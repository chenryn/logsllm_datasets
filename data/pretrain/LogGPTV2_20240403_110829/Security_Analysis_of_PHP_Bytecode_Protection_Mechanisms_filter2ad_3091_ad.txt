7.37
95.83
96.45
98.81
95.13
98.52
99.77
99.85 84.17
95.33
99.76
99.53
99.77 82.33
92.81
98.64
98.45
98.78 89.00
96.83
97.36
98.34
6.2 Protected Real-World Applications
In order to inspect protected code in real-world applications, we selected 10 pop-
ular encoded PHP applications. Our corpus is presented in Table 5. The number
of evaluated software per encoder was chosen by the encoder’s popularity. In
total, we were able to recover more than 1 million lines of actual code (RELOC)
in 3 942 protected PHP ﬁles. Bytecode optimization was enabled for some of
the applications which led to errors when decoding optimized structures. These
errors are very speciﬁc to the optimized code and cannot be generalized. Here,
our prototype implementation requires improvement for a more precise recon-
struction. However, errors in code nesting, such as the misplacement of curly
braces, does not hinder to fully understand the recovered source code and to
retrieve sensitive information, such as cryptographic keys, or to detect security
vulnerabilities. In the following, we present our ﬁndings. Note that due to the
large corpus, only a fraction of code could be analyzed.
License Systems. In all 10 analyzed applications, the protection is primarily
used to hide a license system. It can limit the application’s use to a speciﬁc
time (7), number of users (5), domain or MAC address (4), software version (3),
Table 5. Corpus of selected real-world applications that apply an encoder.
Software
Version
Category
Encoder
Files
Total Protected
RELOC
WHMCS
HelpSpot
5.3.13
3.2.12
xt:Commerce 4.1
PHP-Cart
4.11.4
Precurio
XT-CMS
Mailboarder
4
1.8.1
4.1.5
hosting
helpdesk
webshop
webshop
intranet
CMS
email
NagiosFusion 2014R1.0 monitoring
SourceGuardian 294
Scriptcase
8.0.047
development Zend Guard
3 751 2 676
gSales
rev1092
billing
Zend Guard
206
77
ionCube
ionCube
ionCube
ionCube
ionCube
946
493
688
163
4 090 118
271
3
2 985 5
SourceGuardian 320
SourceGuardian 110
87
110
15
157 651
41 033
35 864
2 762
579
21 653
16 365
3 337
726 552
34 012
Security Analysis of PHP Bytecode Protection Mechanisms
511
or restrict software features of a demo version (5). By decompiling the protected
sources, we can reveal the keys and algorithms used. For example, we could
recover the static secret in PHP-Cart (MD5 salt), HelpSpot (RC4), gSales (SHA1
salt) and Mailborder (AES 128bit) that is used to validate or decrypt the license
data. In NagiosFusion, we discovered a custom decoding algorithm that is used
to infer the installation’s restrictions from the license key. The decompilation of
these sensitive sources does not only allow to fake a valid runtime environment
and license, but also to remove these checks completely.
Vulnerabilities. Furthermore, we detected critical security vulnerabilities in
the decompiled source codes which could be conﬁrmed against the original
protected applications. For example, we detected multiple path traversal vul-
nerabilities in HelpSpot and scriptcase which allow to remotely retrieve any
ﬁle from the server, and multiple SQL injection vulnerabilities in HelpSpot,
xt:Commerce, and gSales which allow to extract sensitive data from the data-
base. We believe that these vulnerabilities remained previously undetected for
the reason of unavailable source code. It is controversial whether this is more
helpful for the vendor or the attackers [18,28]. Arguably, some vulnerabilities
could be also detected without the source code. However, some vulnerabilties
are hard to exploit in a blackbox scenario, for example, a detected second-order
ﬁle inclusion vulnerability [5] in Mailborder or PHP object injection vulnerabil-
ities [6] in xt:Commerce, PHP-Cart, and HelpSpot. Clearly, a vendor should not
rely on source code protectors to assume security issues remain undetected. We
reported all identiﬁed issues responsibly to the corresponding vendor.
Pingbacks and Backdoors. Next to vulnerabilities, we looked for suspicious
functionalities of the protected applications. We found rather harmless pingback
features, for example in xt:Commerce, that send information about the instal-
lation environment and license to a SOAP-based web service. While this can be
used to check for updates, it is also a good way to observe active installations.
More severe is that xt:Commerce also sends the user’s PayPal API credentials
in plaintext to its server via HTTP. Precurio collects information about the
application’s server and owner and sends it via CURL request to the Precurio
website, in case the ionCube license does not match to the server or is expired.
However, we also detected an odd vulnerability in Precurio. The following
three lines of code determine if the request path is a ﬁle and in that case output
its content. Thus, by requesting for example the URL /index.php/index.php
from the server, the PHP source code of the index ﬁle is leaked.
$filename = $root . ’/public/’ . $_SERVER[’PATH_INFO’];
if ( is_file($filename) )
echo file_get_contents($filename);
Moreover, the code allows to retrieve any ﬁle from Precurio’s web direc-
tory, including user ﬁles and the license ﬁle. Additionally, we found that the
512
D. Weißer et al.
ErrorController in Precurio implements a downloadAction. Thus, the URL
/error/download allows the Precurio team, as well as any other remote user,
to download the log ﬁle of the Precurio installation which leaks detailed stack
traces and exceptions. We informed Precurio about both issues.
7 Related Work
Obfuscation of software systems is used in practice to increase the costs of reverse
engineering, for example in the context of digital rights management systems [27]
or IP protection. As a result, many diﬀerent types of obfuscation techniques
were developed in the past years and most of them focus on binary executables
(e.g., [3,11,15,21]). So called executable packers implement diﬀerent obfuscation
and encryption strategies to protect a given binary. Note that obfuscation is
also commonly used by adversaries to hamper analysis of malicious software
samples. To counter such tactics, several methods for automated deobfuscation
were developed [4,16,20,29], and we observe an ongoing arms race.
Similar obfuscation strategies are used to protect PHP source code and com-
mercial tools are available to implement such strategies. To the best of our
knowledge, there is no academic work on PHP obfuscation. Our work is most
closely related to a talk by Esser [8], who provided an overview of PHP source
code encryption and ideas on how source code could be recovered. Saher pre-
sented in a talk some reverse engineering details for ionCube [17]. We reverse
engineered the three most popular PHP code protection products and provide
detailed information about their internals, together with a decompiler approach.
Static and dynamic code analysis techniques can detect security vulnerabil-
ities and are an important research topic. We complement this ﬁeld by demon-
strating how to access protected PHP code such that an analysis can be per-
formed. In other areas, obfuscation/protection mechanisms have been broken by
reverse engineering and binary instrumentation techniques (e.g., [27]) and we
show that such attacks are also viable against PHP obfuscation tools.
8 Conclusion
In this paper, we evaluated and documented the level of protection provided
by current IP protection tools available for PHP source code. We studied
the internals of the three most popular encoder and demonstrated an attack
against a shared weakness by a proof-of-concept implementation. As a result,
we showed that our decompiler is able to recover 96 % of the protected PHP
code which would enable an attacker to crack license systems and identify previ-
ously unknown vulnerabilities and backdoors. Therefore, we argue that currently
available encoder products are no appropriate solutions for intellectual property
protection and more elaborated obfuscation approaches are necessary to better
protect PHP source code.
Ethical Considerations: We would like to clarify that our work was not moti-
vated by the intention to perform illegal activities, such as copyright violation or
Security Analysis of PHP Bytecode Protection Mechanisms
513
server compromise, nor to ease these activities for others. For this reason, we do
not publish our decompilation tool and we reported all detected vulnerabilities
responsibly to the vendors. Moreover, we presented only key insights of the ana-
lyzed products and speciﬁc details are intentionally left out, while presented keys
and constants are likely subject of change. Thus, we feel that an attacker is still
left with a high reverse engineering eﬀort in order to reproduce our attacks for
the latest encoders. Rather, we hope that our research helps in building better
encoders that do not suﬀer from our attacks and to advance the state-of-the-art.
References
1. Brumley, D., Lee, J., Schwartz, E.J., Woo, M.: A native x86 decompilation using
semantics-preserving structural analysis and iterative control-ﬂow structuring. In:
USENIX Security Symposium (2013)
2. Cifuentes, C.: Reverse compilation techniques. Ph.D. thesis, Queensland University
of Technology (1994)
3. Collberg, C., Thomborson, C., Low, D.: A taxonomy of obfuscating transforma-
tions. Technical report, University of Auckland, New Zealand (1997)
4. Coogan, K., Lu, G., Debray, S.: Deobfuscation of virtualization-obfuscated soft-
ware: a semantics-based approach. In: ACM Conference on Computer and Com-
munications Security (CCS), pp. 275–284 (2011)
5. Dahse, J., Holz, T.: Static detection of second-order vulnerabilities in web appli-
cations. In: USENIX Security Symposium (2014)
6. Dahse, J., Krein, N., Holz, T.: Code reuse attacks in PHP: automated POP
chain generation. In: ACM Conference on Computer and Communications Security
(CCS) (2014)
7. Egele, M., Scholte, T., Kirda, E., Kruegel, C.: A survey on automated dynamic
malware analysis techniques and tools. ACM Comput. Surv. 44(2), 1–42 (2008)
8. Esser, S.: Vulnerability Discovery in Closed Source/Bytecode Encrypted PHP
Applications. Power of Community (2008)
9. ionCube Ltd.
ionCube PHP Encoder. https://www.ioncube.com/php encoder.
php?page=features, May 2015
10. Ivanov, I.: API Hooking Revealed. The Code Project (2002)
11. Linn, C., Debray, S.: Obfuscation of executable code to improve resistance to sta-
tic disassembly. In: ACM Conference on Computer and Communications Security
(CCS) (2003)
12. Miecznikowski, J., Hendren, L.: Decompiling Java bytecode: problems, traps and
pitfalls. In: Nigel Horspool, R. (ed.) CC 2002. LNCS, vol. 2304, pp. 111–127.
Springer, Heidelberg (2002)
13. Nielson, F., Nielson, H.R., Hankin, C.: Principles of Program Analysis. Springer,
New York (1999)
14. phpSHIELD. About phpSHIELD. PHP Encoder by SourceGuardian. https://
www.phpshield.com/about.html, May 2015
15. Popov, I.V., Debray, S.K., Andrews, G.R.: Binary obfuscation using signals. In:
USENIX Security Symposium (2007)
16. Royal, P., Halpin, M., Dagon, D., Edmonds, R., Lee, W.: PolyUnpack: automating
the hidden-code extraction of unpack-executing malware. In: Annual Computer
Security Applications Conference (ACSAC) (2006)
514
D. Weißer et al.
17. Saher, M.: Stealing from thieves: breaking IonCube VM to RE exploit kits. Black-
Hat Abu Dhabi (2012)
18. Schryen, G., Kadura, R.: Open source vs. closed source software: towards measuring
security. In: ACM Symposium on Applied Computing (SAC) (2009)
19. Schwartz, E.J., Avgerinos, T., Brumley, D.: All you ever wanted to know about
dynamic taint analysis and forward symbolic execution (but might have been afraid
to ask). In: IEEE Symposium on Security and Privacy (S&P) (2010)
20. Sharif, M., Lanzi, A., Giﬃn, J., Lee, W.: Automatic reverse engineering of malware
emulators. In: IEEE Symposium on Security and Privacy (S&P) (2009)
21. Sharif, M.I., Lanzi, A., Giﬃn, J.T., Lee, W.: Impeding malware analysis using
conditional code obfuscation. In: Symposium on Network and Distributed System
Security (NDSS) (2008)
22. SourceGuardian Ltd. PHP Encoder Features. https://www.sourceguardian.com/
protect php features.html, May 2015
23. The PHP Group. List of Parser Tokens. http://php.net/tokens, May 2015
24. The PHP Group. Tokenizer. http://php.net/tokenizer, May 2015
25. The PHP Group. Zend API: Hacking the Core of PHP. http://php.net/manual/
en/internals2.ze1.zendapi.php, May 2015
26. The PHP Group. Zend Engine 2 Opcodes. http://php.net/manual/internals2.
opcodes.php, May 2015
27. Wang, R., Shoshitaishvili, Y., Kruegel, C., Vigna, G.: Steal this movie: automati-
cally bypassing DRM protection in streaming media services. In: USENIX Security
Symposium (2013)
28. Witten, B., Landwehr, C., Caloyannides, M.: Does open source improve system
security? IEEE Softw. 18(5), 57–61 (2001)
29. Yadegari, B., Johannesmeyer, B., Whitely, B., Debray, S.: A generic approach to
automatic deobfuscation of executable code. In: IEEE Symposium on Security and
Privacy (S&P) (2015)
30. Zend Technologies Ltd. PHP Obfuscator, PHP Encoder & PHP Encryptionfrom
Zend Guard. http://www.zend.com/products/guard, May 2015