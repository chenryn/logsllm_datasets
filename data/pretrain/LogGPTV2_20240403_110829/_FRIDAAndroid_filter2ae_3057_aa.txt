# 【技术分享】利用FRIDA攻击Android应用程序（三）
|
##### 译文声明
本文是翻译文章，文章来源：codemetrix
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[ **houjingyi233**](http://bobao.360.cn/member/contribute?uid=2802394681)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
****
传送门
[](http://bobao.360.cn/learning/detail/3641.html)
[【技术分享】利用FRIDA攻击Android应用程序（一）](http://bobao.360.cn/learning/detail/3641.html)
[**【技术分享】利用FRIDA攻击Android应用程序（二）**](http://bobao.360.cn/learning/detail/3634.html)
**  
**
**前言**
在我的有关frida的第二篇博客发布不久之后，[@muellerberndt](https://twitter.com/muellerberndt)决定发布另一个OWASP
Android crackme，我很想知道是否可以再次用frida解决。如果你想跟着我做一遍，你需要下面的工具。
[**OWASP Uncrackable Level2 APK**](https://github.com/OWASP/owasp-mstg/blob/master/OMTG-Files/02_Crackmes/01_Android/Level_02/UnCrackable-Level2.apk)
[**Android SDK和模拟器**](https://developer.android.com/studio/index.html)
**(我使用的是Android 7.1 x64镜像)**
[**frida**](https://www.codemetrix.net/hacking-android-apps-with-frida-3/frida.re) **(和**[ **frida-server**](https://github.com/frida/frida/releases) **)**
[**bytecodeviewer**](https://bytecodeviewer.com/)
[**radare2**](https://radare.org/) **(或您选择的其他一些反汇编工具)**
[**apktool**](https://ibotpeaches.github.io/Apktool/)
如果您需要知道如何安装Frida，请查看Frida文档。对于Frida的使用，您还可以检查本教程的第[I](https://www.codemetrix.net/hacking-android-apps-with-frida-1/)部分。我假设你在继续之前拥有上面的工具，并且基本熟悉Frida。另外，确保Frida可以连接到您的设备/模拟器(例如使用frida-ps
-U)。我将向您展示各种方法来克服具体的问题，如果您只是寻找一个快速的解决方案，请在本教程末尾查看Frida脚本。注意：如果使用frida遇到了
    Error: access violation accessing 0xebad8082
或者类似的错误，从模拟器中擦除用户数据，重新启动并重新安装该apk可能有助于解决问题。做好可能需要多次尝试的准备。该应用程序可能会崩溃，模拟器可能会重新启动，一切可能会搞砸，但是最终我们会成功的。
**第一次尝试**
和UnCrackable1 一样，当在仿真器中运行它时，它会检测到它是在root设备上运行的。
我们可以尝试像前面一样hook OnClickListener。但首先我们来看看我们是否可以连接frida开始tampering。  
有两个名称相同的进程，我们可以通过frida-ps -U验证一下。
我们来试试将frida注入父进程。
这里发生了什么？我们来看看应用程序吧。解压缩apk并反编译classes.dex。  
    package sg.vantagepoint.uncrackable2;
    import android.app.AlertDialog;
    import android.content.Context;
    import android.content.DialogInterface;
    import android.os.AsyncTask;
    import android.os.Bundle;
    import android.support.v7.app.c;
    import android.text.Editable;
    import android.view.View;
    import android.widget.EditText;
    import sg.vantagepoint.a.a;
    import sg.vantagepoint.a.b;
    import sg.vantagepoint.uncrackable2.CodeCheck;
    import sg.vantagepoint.uncrackable2.MainActivity;
    public class MainActivity
    extends c {
        private CodeCheck m;
        static {
            System.loadLibrary("foo"); //[1]
        }
        private void a(String string) {
            AlertDialog Dialog = new AlertDialog.Builder((Context)this).create();
            Dialog.setTitle((CharSequence)string);
            Dialog.setMessage((CharSequence)"This in unacceptable. The app is now going to exit.");
            Dialog.setButton(-3, (CharSequence)"OK", (DialogInterface.OnClickListener)new /* Unavailable Anonymous Inner Class!! */);
            Dialog.setCancelable(false);
            Dialog.show();
        }
        static /* synthetic */ void a(MainActivity mainActivity, String string) {
            mainActivity.a(string);
        }
        private native void init(); //[2]
        protected void onCreate(Bundle bundle) {
            this.init(); //[3]
            if (b.a() || b.b() || b.c()) {
                this.a("Root detected!");
            }
            if (a.a((Context)this.getApplicationContext())) {
                this.a("App is debuggable!");
            }
            new /* Unavailable Anonymous Inner Class!! */.execute((Object[])new Void[]{null, null, null});
            this.m = new CodeCheck();
            super.onCreate(bundle);
            this.setContentView(2130968603);
        }
        public void verify(View view) {
            String string = ((EditText)this.findViewById(2131427422)).getText().toString();
            AlertDialog Dialog = new AlertDialog.Builder((Context)this).create();
            if (this.m.a(string)) {
                Dialog.setTitle((CharSequence)"Success!");
                Dialog.setMessage((CharSequence)"This is the correct secret.");
            } else {
                Dialog.setTitle((CharSequence)"Nope...");
                Dialog.setMessage((CharSequence)"That's not it. Try again.");
            }
            Dialog.setButton(-3, (CharSequence)"OK", (DialogInterface.OnClickListener)new /* Unavailable Anonymous Inner Class!! */);
            Dialog.show();
        }
    }
我们注意到程序加载了foo库([1])。在onCreate方法的第一行程序调用了this.init()([3])，它被声明成一个native方法([2])，所以它可能是foo的一部分。现在我们来看看foo库。使用radare2打开它并分析，列出它的导出函数。  
该库导出两个有趣的功能：Java_sg_vantagepoint_uncrackable2_MainActivity_init和Java_sg_vantagepoint_uncrackable2_CodeCheck_bar。我们来看看Java_sg_vantagepoint_uncrackable2_MainActivity_init。  
这是一个很短的函数。
它调用了sub.fork_820，这里面有更多的内容。
这个函数中调用了fork、pthread_create、getppid、ptrace和waitpid等函数。这是一个基本的反调试技术，附加调试进程被阻止，因为已经有其他进程作为调试器连接。
**对抗反调试方案一：frida**
我们可以让frida为我们生成一个进程而不是将它注入到运行中的进程中。
frida注入到Zygote中，生成我们的进程并且等待输入，这个过程可能比较漫长。  
**对抗反调试方案二：patch**
我们可以通过apktool实现patch。
(我通过-r选项跳过了资源提取，因为在回编译apk的时候它可能会导致问题，反正我们这里不需要资源文件。)
看一下smali/sg/vantagepoint/uncrackable2/MainActivity.smali中的smali代码。你可以在第82行找到init的调用并注释掉它。
回编译apk(忽略错误)。
对齐。
签名(注意：您需要有一个密钥和密钥库)。
你可以在[OWASP Mobile Security Testing Guide](https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05c-Reverse-Engineering-and-Tampering.md#repackaging)中找到更详细的描述。卸载原来的apk并安装我们patch过的apk。
重新启动应用程序。运行frida-ps，现在只有一个进程了。
frida进行连接也没什么问题。
这比在frida中增加-r选项更为繁琐，但也更普遍。如前所述，当我们使用patch过的版本(我会告诉你如何解决这个问题，所以不要把它删了)不能轻易地提取需要的字符串。现在我们继续使用原来的apk。确保安装的是原始的apk。  
**继续尝试**
在我们摆脱反调试之后来看看如何继续进行下去。一旦按了OK按钮，应用程序就会在模拟器中运行时进行root检测并退出。我们可以patch掉这个行为，也可以用frida来解决这个问题。由于OnClickListener实现调用，我们可以hook
System.exit函数使其不产生作用。
    setImmediate(function() {
        console.log("[*] Starting script");
        Java.perform(function() {
            exitClass = Java.use("java.lang.System");
            exitClass.exit.implementation = function() {
                console.log("[*] System.exit called");
            }
            console.log("[*] Hooking calls to System.exit");