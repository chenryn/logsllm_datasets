In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung,
editors, ACM CCS 2013, pages 955–966. ACM Press, November 2013.
[KKK+15] Matthew Kelly, Alan Kaminsky, Michael Kurdziel, Marcin Łukowiak,
and Stanisław Radziszowski. Customizable sponge-based authenticated
encryption using 16-bit s-boxes. In MILCOM 2015 - 2015 IEEE Military
Communications Conference, pages 43–48, 2015.
[KKW17] W. Sean Kennedy, Vladimir Kolesnikov, and Gordon T. Wilfong. Over-
laying conditional circuit clauses for secure computation. In Tsuyoshi
Takagi and Thomas Peyrin, editors, ASIACRYPT 2017, Part II, volume
10625 of LNCS, pages 499–528. Springer, Heidelberg, December 2017.
[KMR14] Vladimir Kolesnikov, Payman Mohassel, and Mike Rosulek. FleXOR:
Flexible garbling for XOR gates that beats free-XOR. In Juan A. Garay
and Rosario Gennaro, editors, CRYPTO 2014, Part II, volume 8617 of LNCS,
pages 440–457. Springer, Heidelberg, August 2014.
[KNR+17] Vladimir Kolesnikov, Jesper Buus Nielsen, Mike Rosulek, Ni Trieu, and
Roberto Trifiletti. DUPLO: Unifying cut-and-choose for garbled circuits.
In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan
Xu, editors, ACM CCS 2017, pages 3–20. ACM Press, October / November
2017.
[KPTZ13] Aggelos Kiayias, Stavros Papadopoulos, Nikos Triandopoulos, and
Thomas Zacharias. Delegatable pseudorandom functions and applica-
tions. In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung, editors,
ACM CCS 2013, pages 669–684. ACM Press, November 2013.
Improved garbled cir-
cuit: Free XOR gates and applications. In Luca Aceto, Ivan Damgård,
Leslie Ann Goldberg, Magnús M. Halldórsson, Anna Ingólfsdóttir, and
Igor Walukiewicz, editors, ICALP 2008, Part II, volume 5126 of LNCS,
pages 486–498. Springer, Heidelberg, July 2008.
[NPS99] Moni Naor, Benny Pinkas, and Reuban Sumner. Privacy preserving
auctions and mechanism design. In Proceedings of the 1st ACM conference
on Electronic commerce, pages 129–139. ACM, 1999.
[PSSW09] Benny Pinkas, Thomas Schneider, Nigel P. Smart, and Stephen C.
Williams. Secure two-party computation is practical. In Mitsuru Matsui,
editor, ASIACRYPT 2009, volume 5912 of LNCS, pages 250–267. Springer,
Heidelberg, December 2009.
[KS08] Vladimir Kolesnikov and Thomas Schneider.
[PSSY20] Arpita Patra, Thomas Schneider, Ajith Suresh, and Hossein Yalame.
ABY2.0: Improved mixed-protocol secure two-party computation. Cryp-
tology ePrint Archive, Report 2020/1225, 2020. https://eprint.iacr.org/
2020/1225.
[RR21] Mike Rosulek and Lawrence Roy. Three halves make a whole? Beating
the half-gates lower bound for garbled circuits. LNCS, pages 94–124.
Springer, Heidelberg, 2021.
[RWT+18] M. Sadegh Riazi, Christian Weinert, Oleksandr Tkachenko, Ebrahim M.
Songhori, Thomas Schneider, and Farinaz Koushanfar. Chameleon: A
hybrid secure computation framework for machine learning applications.
In Jong Kim, Gail-Joon Ahn, Seungjoo Kim, Yongdae Kim, Javier López,
and Taesoo Kim, editors, ASIACCS 18, pages 707–721. ACM Press, April
2018.
[SGRR19] Phillipp Schoppmann, Adrià Gascón, Leonie Reichert, and Mariana
Raykova. Distributed vector-OLE: Improved constructions and imple-
mentation. In Lorenzo Cavallaro, Johannes Kinder, XiaoFeng Wang, and
Jonathan Katz, editors, ACM CCS 2019, pages 1055–1072. ACM Press,
November 2019.
[WMK16] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. EMP-toolkit: Efficient
MultiParty computation toolkit. https://github.com/emp-toolkit, 2016.
[WYKW21] Chenkai Weng, Kang Yang, Jonathan Katz, and Xiao Wang. Wolverine:
Fast, scalable, and communication-efficient zero-knowledge proofs for
boolean and arithmetic circuits.
In IEEE Symposium on Security and
Privacy, 2021.
[YWL+20] Kang Yang, Chenkai Weng, Xiao Lan, Jiang Zhang, and Xiao Wang. Ferret:
Fast extension for correlated OT with small communication. In Jay Ligatti,
Xinming Ou, Jonathan Katz, and Giovanni Vigna, editors, ACM CCS 20,
pages 1607–1626. ACM Press, November 2020.
[ZRE15] Samee Zahur, Mike Rosulek, and David Evans. Two halves make a whole
- reducing data transfer in garbled circuits using half gates. In Elisabeth
Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part II, volume 9057
of LNCS, pages 220–250. Springer, Heidelberg, April 2015.
A FORMAL PROOFS
We prove Lemma 5.1.
Proof. By constructing Drev.
In this proof, we view Color gates as a strict special case of
Reveal gates that use a uniform output distribution Dout.
Recall that Drev must simulate all values revealed by Reveal
gates in a module M. Drev is the distribution that, when sampled,
samples each Reveal gate’s distribution Dout and concatenates the
results.
We show this secure by a hybrid argument. Let the considered
moduleM have 𝑛 Reveal gates. Let hybrid ℎ0 be the real distribution
of revealed values and let hybrid ℎ𝑛 be Drev. Each hybrid ℎ𝑖 is equal
to ℎ𝑖−1 except that we replace the output of the 𝑖th Reveal gate by
a sample from its distribution Dout.
Assume the real distribution and Drev are distinguishable, and
hence for some 𝑖, ℎ𝑖−1 and ℎ𝑖 allow a distinguisher. Thus, the 𝑖th
gate’s simulated output must allow the distinguisher. Let 𝑦(cid:1)𝐸, 𝑧(cid:1)𝐺 :=
Reveal[C, Dmask](𝑥) denote the 𝑖th Reveal gate. Requirement 2
gives the following property for all inputs 𝑥:
{𝑥, C(𝑥, 𝛼)} 𝑐
= {𝑥, 𝑟}
where 𝑟 ← Dout, 𝛼 ← Dmask
This property implies that the output of the 𝑖th gate is (compu-
tationally) independent of its input. Hence the output of the 𝑖th
gate must be computationally independent of all other Reveal gate
outputs. Note, (1) {C(𝑥, 𝛼)} 𝑐
= {𝑟} holds trivially from the above
property and (2) the presence of other simulated Reveal outputs
cannot help a distinguisher because each such output is mutually
independent with every other output (up to computational indis-
tinguishability). Therefore, the existence of distinguisher between
ℎ𝑖−1 and ℎ𝑖 contradicts Requirement 2, and hence our assumption
does not hold.
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea587As an informal aside, note that this lemma would not hold if we
required only that the output of a Reveal gate is indistinguishable
from Dout: by requiring that indistinguishability hold even in the
context of the Reveal gate input, we ensure that Reveal outputs are
independent of one another (and hence cannot even jointly reveal
private information).
□
We prove Theorem 5.3: OneHot is correct.
Proof. By induction on a module M. Our inductive hypothesis
is that modules are correct. Once modules are proved correct, cir-
cuits are trivially correct, since a circuit is merely a list of modules.
To prove modules correct, we first argue that each individual
gate type is in some sense correct. Note that we cannot prove gates
strictly correct because both Reveal and Color are non-deterministic.
However, we can show that in both our implementation (OneHot.Gb
and OneHot.Ev) and our specification (OneHot.ev), gates produces
outputs in the same distribution. This, combined with the module-
designer proof of correctness (Requirement 1), suffices to show that
the module as a whole is strictly correct.
We proceed by case analysis on gates.
XOR gates use the linearity of garbled shares (Lemma 3.5), and
are trivially correct.
Constant gates are trivially correct: For constant 𝑐, 𝐺 uses
share 𝑐Δ and 𝐸 uses share 0. This is a valid garbled sharing of 𝑐
(Definition 3.4).
One-hot gates are our most complex construction. Figure 3
explains many details inline; we expand on details here.
We consider a one-hot gate with inputs 𝑎 and 𝑏 that computes
H(𝑎) ⊗𝑏. Recall that 𝐸 is assumed to know 𝑎. The two parties begin
by jointly expanding a GGM tree such that, in the end, 𝐺 computes
2𝑛 leaf nodes 𝐿𝑖 and 𝐸 computes each leaf node 𝐿𝑖≠𝑎.
We prove this initial expansion correct by induction on the levels
of the tree; namely for each level 𝑖, 𝐺 holds 2𝑖+1 strings 𝑆𝑖,𝑗 and 𝐸
holds all such strings except the single string on the path to 𝐿𝑎. In
the base case, 𝐺 chooses 𝑆0,0 to be 𝐴0 ⊕ Δ and 𝑆0,1 to be 𝐴0. Thus
the invariant trivially holds.
Now consider arbitrary level 𝑖 such that level 𝑖 − 1 is already
populated. 𝐸 trivially expands all strings on this level save two: one
on the path to 𝑎 (which she should not receive) and one just off the
path to 𝑎. To correct for this, 𝐺 sends to 𝐸 two encryptions that
allow her to obtain the XOR sum of all even strings/all odd strings
depending on her share 𝐴𝑖 ⊕ 𝑎𝑖 Δ. From this sum, she XORs on all
of her already expanded even (resp. odd) strings and recovers the
missing even (resp. odd) string. From this, 𝐸 recovers the string just
off the path to 𝐿𝑎. Hence the inductive invariant holds.
(cid:74)H(𝑎) ⊗ 𝑏(cid:75). 𝐺 generates all of his shares simply by applying 𝐻 to
Next, the parties expand their leaf strings into garbled sharings
each leaf 𝑚 times. Thus 𝐺 computes a 2𝑛 × 𝑚 matrix. 𝐸 similarly
applies 𝐻 to her leaves 𝑚 times. Thus, she obtains the same matrix
as 𝐺 except that row 𝑎 is missing.
Let 𝑋 be 𝐺’s matrix. Let 𝐵 𝑗 be 𝐺’s share of bit 𝑏 𝑗. For each column
𝑗 of the matrix, 𝐺 computes and sends to 𝐸 the following value:
(cid:16)
(cid:17) ⊕ 𝐵 𝑗
𝑋𝑖,𝑗
𝑖
Note that 𝐸 holds her garbled share 𝐵 𝑗 ⊕ 𝑏 𝑗 Δ. Thus, she computes:
(cid:17) ⊕(cid:0)𝐵 𝑗 ⊕ 𝑏 𝑗 Δ(cid:1) = 𝑋𝑎,𝑗 ⊕ 𝑏 𝑗 Δ
(cid:17) ⊕(cid:16)(cid:16)
(cid:16)
(cid:17) ⊕ 𝐵 𝑗
parties hold a sharing(cid:74)H(𝑎) ⊗ 𝑏(cid:75).
𝑋𝑖,𝑗
𝑋𝑖,𝑗
𝑖≠𝑎
𝑖
Thus, in row 𝑎, the parties hold garbled shares of 𝑏. Altogether, the
One-hot gates are correct.
Recursive Module calls are correct by induction.
Reveal gates are correct by inspection. The specification and
the implementation of Reveal gates match: both procedures sample
values from Dmask and feed them as input to the internal masking
circuit. The internal masking circuit is correct by induction.
Color gates are similarly correct: the specification draws a uni-
form value while the implementation uses the color bit, which
is uniform. Note there is one tedious detail here: If we are being
pedantic, calling a color gate on the same input more than once is
problematic because the implementation uses the same uniform bit
for each gate, whereas the specification draws a fresh mask for each
gate. This is easily remedied by having the specification associate a
uniform color with each wire. We elide this detail outside of this
discussion because it is so minor.
We have now shown each gate type correct in the sense that the
implementation and specification produce equal distributions. Now,
the module that calls these gates is strictly correct, because the
module designer provided a proof of correctness that demonstrates
the module output is independent of any internal randomness (Re-
quirement 1).
Since modules are correct, circuits are correct. OneHot is correct.
□
We prove Theorem 5.5: If 𝐻 is a circular correlation robust hash
function, then OneHot is oblivious.
Proof. By construction of a simulator Sobv. At a high level, all
messages sent from 𝐺 to 𝐸 are simulated by uniform bits, except val-
ues leaked by Reveal gates which are instead simulated by sampling
each such gate’s specified output distribution (Requirement 2).
First, Sobv uniformly samples input shares 𝑋 ′. In isolation, these
are trivially indistinguishable from the real shares 𝑋, because each
share in 𝑋 is drawn uniformly (with Δ conditionally added). These
remain indistinguishable in the context of C and 𝑀.
We describe the simulator’s gate-by-gate handling and argue
that the resultant material (even in context of input shares) is indis-
tinguishable. The simulator propagates the simulated input shares
𝑋 ′ to simulated output shares 𝑌 ′ and builds up material 𝑀′. Our
indistinguishability argument proceeds by induction on the struc-
ture of a module M. The inductive hypothesis maintains that the
simulated garbling of each submodule is indistinguishable from the
real garbling.
XOR gates are handled simply: Sobv XORs the input shares. No
Constants are also simple: Sobv sets the output share to zero.
One-hot gates are more involved.
Recall that a one-hot gate first proceeds level-by-level through a
binary branching tree. For each level, Gb includes an encryption of
change is made to the simulator’s output.
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea588all even nodes and of all odd nodes:
𝐻(𝐴𝑖 ⊕ Δ, nonce𝑖,even)⊕
𝑆𝑖,2𝑗 𝐻(𝐴𝑖, nonce𝑖,odd)⊕
2𝑖−1
𝑗=0
2𝑖−1
𝑗=0
𝑆𝑖,2𝑗+1
Note two facts: (1) each string 𝑆𝑖,𝑗 is generated by invoking 𝐻 on
another uniform string and (2) both encryptions are generated by
again invoking 𝐻. 𝐻 is a circular correlation robust hash function,
so Sobv securely simulates each pair of encryptions with uniform
bits.
Sobv then copies the actions of OneHot.Ev in decrypting the
GGM tree starting from the input shares. Recall that the purpose
of this decryption is to compute the 2𝑛 − 1 leaf strings 𝐿𝑖≠𝑎. As an
aside, we emphasize that the input 𝑎 is not a uniform value, but
rather must be simulated on a case-by-case basis. In particular, the
Reveal leakage is simulatable (see below). Because each input share
is uniform and each encryption is uniform, Sobv computes 2𝑛 − 1