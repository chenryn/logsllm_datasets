### 第一步：理解权限设置
首先，我们需要定义具有全部权限的模式，即7 7 7（所有用户都具有读、写和执行权限）。

### 第二步：应用umask值
接下来，在下一行中根据给定的`umask`值写下相应的位。例如，假设`umask`为0 0 2。

### 第三步：计算默认创建权限
在随后的一行中记录上两行中未匹配的位。这些位代表了目录或文件创建时的默认权限。
通过一些练习，可以快速掌握这种方法。

### 第四步：调整文件权限
对于文件而言，创建时不应包含执行权限。只需从最大权限中去除对应的执行位即可。

#### 示例一：umask值为0 0 2
1. **最大权限** rwx rwx rwx (777)
2. **umask值** 0 0 2 - - - - - - -w-
3. **目录权限** rwx rwx r-x (775) —— 目录创建时的默认权限
4. **文件权限** rw- rw- r-- (664) —— 文件创建时的默认权限

#### 示例二：umask值为0 2 2
1. **最大权限** rwx rwx rwx (777)
2. **umask值** 0 2 2 - - - -w- -w-
3. **目录权限** rwx r-x r-x (755) —— 目录创建时的默认权限
4. **文件权限** rw- r-- r-- (644) —— 文件创建时的默认权限

### 常见umask值及其对应权限
| umask值 | 目录权限 | 文件权限 |
|---------|----------|----------|
| 022     | 755      | 644      |
| 027     | 750      | 640      |
| 002     | 775      | 664      |
| 006     | 771      | 660      |
| 007     | 770      | 660      |

要查看当前的`umask`值，请使用以下命令：
```bash
$ umask
```

如果需要更改`umask`值，可以通过以下命令设置新的值：
```bash
$ umask 002
```

然后再次检查系统是否已接受新设置：
```bash
$ umask
```
确保在更改`umask`之前明确了解你希望达到的文件/目录创建权限。错误的设置可能会导致意外的结果，如将`umask`设为600，则文件/目录的默认权限会变成066！

### 符号链接
符号链接是一种指向其他文件或目录的特殊文件类型。它们对于管理文件系统的复杂性非常有用。

#### 使用软链接保存多个映像
比如，若 `/usr/local/admin/sales` 目录下有一个销售信息文件，且多名员工需访问此文件，可在每位员工的 `$HOME` 目录下创建一个指向该文件的链接，而非复制多份文件。这样修改源文件后，所有链接都将反映最新内容。

#### 创建链接示例
假设有40名销售人员与管理员，各自使用不同的应用程序。作为管理员，你可以删除他们各自`$HOME`目录下的`.profile`文件，并在`/usr/local/menus/`目录下创建两个新的`.profile`文件——`sales.profile` 和 `admin.profile`。接着，在每个销售人员的`$HOME`目录下创建指向`sales.profile`的链接，在每位管理员的`$HOME`目录下创建指向`admin.profile`的链接。

命令格式如下：
```bash
ln [-s] source_path target_path
```

其中`source_path`是源文件路径，`target_path`是指向的目标路径。例如：
```bash
$ ln -s /usr/local/menus/sales.profile /home/matty/.profile
```

### 小结
本章介绍了文件安全基础以及如何利用`umask`和符号链接来管理和保护文件系统。正确使用这些工具可以显著提高工作效率并增强安全性。务必谨慎操作，以免因误操作而造成数据丢失或其他严重后果。