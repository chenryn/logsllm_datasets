sys_read
sys_write
trojan_write
SCT
...
...
#2
#3
#4
trojan_read
(a) Redirect individual system call
pointers
SCT Ref.
...
...
#2
#3
#4
system_call
...
...
...
...
IDT
0x80
...
...
#2
#3
#4
SCT
Trojan SCT
Kernel Memory
(b) Redirect pointer to entire system
call table
Kernel Memory
sys_fork
sys_read
sys_write
SCT
...
...
#2
#3
#4
(c) Overwrite individual system call code
Fig. 1. Current rootkit methods to trojan system call table
The 0x80th vector is a software interrupt that points to the system call table.
All user processes invoke a software interrupt 0x80 in order to call a system call
[12]. When software interrupt 0x80 is invoked, the interrupt handler for inter-
rupt 0x80 is called, which is the system call handler. The system call handler
takes arguments from a user-space process and invokes the requested system
call. The system call handler contains a reference to the system call table, which
is used to lookup requested system calls. This reference can be changed in order
to redirect the entire system call table.
As Figure 1(b) shows, the entire system call table has been redirected to a
Trojan system call table. The trojan system call table usually contains many of
the same entries as the original system call table but with a few key system calls
replaced with trojan system calls. We have not shown how the Trojan system
call table points to system calls in Figure 1(b) as it is similar to Figure 1(a).
3.3
Sample Rootkits
Rootkit Penetration Modiﬁcation
heroin
Module
Entry Redirection
knark
Module
Entry Redirection
adore
Module
Entry Redirection
sucKIT
User
Table Redirection
zk
User
Table Redirection
r.tgz
User
Table Redirection
Table 1. Sample classiﬁcation of kernel-level rootkits
Table 1 shows a sample listing of kernel-level rootkits that we have classiﬁed
in terms of their characteristics. We show three rootkits that penetrate kernel
space through a Module and use Entry Redirection to trojan the system call
table. The heroin rootkit is one of the earliest known kernel-level rootkits and
is simply a kernel module that redirects a few key system calls. The knark and
adore rootkits are other module based rootkits that redirect system call table
entries.
The second group of rootkits listed are sucKIT, zk, and r.tgz. These root-
kits all use table redirection and access kernel memory through the /dev/kmem
ﬁle. The sucKIT rootkit appears to be one of the pioneering rootkits for Table
Redirection. The r.tgz rootkit was captured on a honeynet [13].
We have not seen any kernel-level rootkits that use Table Redirection and
are also kernel modules. Similarly, we have not seen any kernel-level rootkits
that penetrate the kernel from user space and also use Entry Redirection. We
speculate that diﬀerent combinations of rootkit characteristics are possible but
see no motivation to build them. In addition, we also speculate that future
kernel-level rootkits may redirect the software interrupt handler or the entire
interrupt descriptor table, but have not seen any rootkits to date that use this
technique. Finally, we have not seen any rootkits that use Entry Overwrite to
trojan system calls.
4
Recovery by Bootstrapping Trust into the Running
Kernel
Since kernel-level rootkits modify the system call table, the system call table
must be repaired in order to recover from a kernel-level rootkit. Kernel-level
rootkits overwrite portions of the kernel memory, so some information is lost.
However, all of the kernel code can be found elsewhere. In Linux based systems,
all that is needed is a copy of the kernel image, vmlinux. The kernel image
contains the system call table and system calls.
Our approach to bootstrap trust into the running kernel is to, essentially,
build a whitehat kernel-level rootkit. Our techniques is similar to sucKIT deriva-
tive rootkits. We bootstrap a trusted system call table into the running kernel
and redirect the entire system call table to our trusted system call table. We
strip out a trusted system call table from a known good kernel image, which is
on known good media. Below, we discuss our algorithm, implementation, and
tools.
4.1
Algorithm
The algorithm has ﬁve steps. We use some of the techniques of the sucKIT
rootkit.
1. For each system call, allocate kernel memory for the system call and copy a
trusted version of the system call into the allocated space. The oﬀset for x86
call instructions within each system call must be adjusted when copying the
system call to a new location in memory.
2. Allocate kernel memory for the system call table and set the entries of the
system call table to point to the trusted system calls from Step 1.
3. Allocate kernel memory for the system call handler and copy a trusted sys-
tem call handler into the memory. Note that the system call handler should
reference the newly allocated trusted system call.
4. Query the idtr register to locate the interrupt descriptor table.
5. Set the 0x80th entry in the interrupt descriptor table to the newly allocated
system call handler.
Note that the trusted system calls will come from a trusted image of the
kernel. In addition to the sucKIT rootkit’s redirection of the entire system call
table, we also redirect the 0x80th entry of the interrupt descriptor table, the
system call handler. The reason for this redirection is that we speculate future
rootkits may redirect the system call handler and our goal is to rely on as little
trust in the system as possible.
It is interesting to note that machine code in the Linux kernel cannot sim-
ply be copied from one memory location to another byte by byte. Kernel code
compiled with the gcc compiler has many x86 call instructions. One form of the
call instruction speciﬁes a relative oﬀset to the target. When moving kernel code
around in memory, these call instructions must be modiﬁed by adjusting the rel-
ative oﬀset. This depends entirely on where the call instruction and target are
located in memory. Additionally, a known good hash of the code being copied
will no longer be valid after modifying the oﬀset value.
4.2
Implementation
We have developed our tools for the i386 architecture. The target system for
development is Red Hat 8.0 with the default Linux kernel 2.4.18-4. The instal-
lation includes the normal development tools and the Linux kernel sources. Our
struct idtr idtr;
struct idt idt80;
ulong old80;
/* Pop IDTR register from CPU */
asm("sidt %0" : "=m" (idtr));
/* Read kernel memory through /dev/kmem */
rkm(fd, &idt80, sizeof(idt80), idtr.base +
0x80 * sizeof(idt80));
/* Compute absolute offset of
* system call handler for kmem */
old80 = idt80.off1 | (idt80.off2 << 16);
Fig. 2. Source code to ﬁnd address of system call handler
implementation is a whitehat kernel-level rootkit that can be classiﬁed as a User
rootkit that performs Table Redirection. Below we describe a few aspects of the
implementation.
In order to strip the system calls out of a Linux kernel image, we use code
from the gdb debugger. The gdb debugger has the ability to parse binaries and
strip out functions, which in our case are system calls. Our implementation strips
all of the system calls from the given kernel image, vmlinux-2.4.18-14, and feeds
them to our whitehat kernel-level rootkit, recover kkit.
Our code uses Table Redirection in order to bootstrap trusted code into the
running kernel. We use sucKIT’s technique to locate the address of the system
call handler. Once we have the address of the system call handler, we can parse
the system call handler code and locate the reference to the system call table.
By replacing the reference to the system call table so that it points to a trusted
system call table, trust can be re-established. The code for locating the system
call table can be seen in Figure 2. The key line is the assembly instruction
{asm("sidt %0" : "=m" (idtr));}
This assembly instruction copies the contents of the idtr register into the idtr
variable. The absolute oﬀset of the interrupt descriptor table can be calculated to
locate the interrupt descriptor table. The 0x80th entry of the interrupt descriptor
table points to the system call handler.
Since our implementation is a User type implementation, a tricky part of the
implementation becomes allocating kernel memory. We use the same technique
that the sucKIT rootkit uses. Figure 3 shows the source code used to wrap kmal-
loc(), the kernel memory allocator, into a system call. In the Figure, KMALLOC
is the virtual address of the kmalloc() function within kernel space. Our code
ﬁrst locates the current system call table by reading the reference to the current
table from the system call handler. Then an unused system call, sys olduname,
is taken over and replaced with a system call that we will call sys kmalloc. Now
a user-space program can allocate kernel memory simply by issuing the system
call sys kmalloc.
Using the techniques described above, we have implemented a whitehat
rootkit called recover kkit. Our implementation follows the algorithm described
above. Below we discuss our tools.
#define
rr(n, x) ,n ((ulong) x)
#define __NR_oldolduname
59
#define
OURSYS __NR_oldolduname
#define syscall2(__type, __name, __t1, __t2) \
__type __name(__t1 __a1, __t2 __a2)
\
{
\
ulong __res;
\
__asm__ volatile
\
("int $0x80"
\
: "=a" (__res)
\
: "0" (__NR_##__name)
\
rr("b", __a1)
\
rr("c", __a2));
\
return (__type) __res;
\
}
#define
__NR_KMALLOC OURSYS
static inline syscall2(ulong, KMALLOC, ulong, ulong);
Fig. 3. Source Code - Kmalloc as a System Call
4.3
Tools
Including our whitehat rootkit, we have implemented a suite of tools that can be
used to check for and recover from kernel-level rootkits. Our tools can be found
on our website [14]. The read sctp tool reads the address of the current system
call table and can be used to compare the actual system call addresses to the ones
found in the System.map ﬁle. Our approach diﬀers from kern check’s method
in that our program looks up the actual system call table as referenced in the
running system call handler. Another tool we created is called ktext. The ktext
tool can be used to capture portions of kernel memory in the running kernel.
We have used the ktext tool to determine a ∆ for kernel-level rootkits [5]. Other
tools provide the ability to dump system call table entries to a ﬁle and write
individual system call table entries to kernel memory. Finally, the recover kkit
tool can be considered a whitehat kernel-level rootkit that can be used to recover
from blackhat kernel-level rootkits.
5
Results on Current Generation Rootkits
In order to test our whitehat kernel-level rootkit, we have selected three black-