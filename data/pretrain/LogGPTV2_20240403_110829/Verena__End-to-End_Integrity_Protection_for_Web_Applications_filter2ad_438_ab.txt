operator are not trusted at all (and these fall in the main server
trust model above).
III. ARCHITECTURE
Fig. 1 illustrates Verena’s architecture, which we describe
throughout this section.
A. Basic Setup
To lay out the foundations for Verena’s security mechanisms,
Verena starts with the following base setup. First, Verena
is a client-side web platform, a popular trend in recent
years [15, 36]. These platforms provide advantages not only
for functionality and ease of development, but also for security.
The dynamic webpage (with personalized content) is assem-
bled on the client side from static code and data coming from
the server. Previous work [41] has shown how to check in a
client’s browser whether the webpage code (such as HTML,
JavaScript and CSS) has not been tampered with by an attacker
at the server. Since the code is static, such a check essentially
veriﬁes the code against a signature from the developer. This
check runs in a browser extension. Verena incorporates this
mechanism and the browser extension as well. From now on,
we consider that the webpage code passed this integrity check
and we refer the reader to [41] for more details.
Second, a standard requirement in multi-user systems provid-
ing cryptographic guarantees is an identity provider (IDP), i.e.,
an entity that certiﬁes the public key of each user. For example,
it can be similar to OpenID or Keybase [3], or could be hosted
at the same place as the hash server. Without such an IDP, an
attacker at the server may serve an incorrect public key to a
user. For example, if user A wants to grant access to user B,
user A requests the public key of user B from the server who
replies with the attacker’s public key such that the attacker
obtains access. The IDP is involved minimally, when a user
creates an account; at that point, it signs a pair of username
and public key for each user creating an account. Although we
do not discuss key revocation in this paper, enabling revocation
in Verena would require the involvement of the IDP as well.
B. Verena Components
Now that we laid out the basic setup, we describe the
mechanisms that Verena provides to prevent the server from
corrupting data and query results. At a high level, the appli-
cation developer, using the Verena API, speciﬁes the integrity
protection requirements (integrity policy) of the application.
This allows Verena to derive the access rights of each user
897897
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
for each data item or query. Based on this API, the server
accompanies any integrity-protected query operation with a
proof that it follows this policy and the client can verify this
result. Also, whenever the client sends a query to the server, the
client accompanies the query with helper data for constructing
the proofs, if needed.
More concretely, as shown in Fig. 1, on the client side, a
webpage consists of two parts: the application’s code written
by the developer on top of the Verena framework, and the
Verena client. When a user logs in, the Verena client performs
authentication to derive the user’s key from his password. If
passwords are deemed unsafe, one can use other available
secret derivation mechanisms [16].
In typical client-side web frameworks, the app client issues
database queries; these queries are sent to the web server,
which sends them to the database. In Verena, all such queries
pass through the Verena client. Verena then determines if it
is a query that must be integrity protected. If so, the Verena
client provides helper data (such as challenges) to the server
to be used in proofs. When the server returns the results, the
server also provides a proof of correctness for these results
that the Verena client checks before returning to the app client.
The main server consists of the Verena server and the regular
app server. The app server, also written by the developer,
performs operations that are not integrity-sensitive and do
not require veriﬁcation. All server-side operations that require
veriﬁcation pass through the Verena server.
The Verena server carries the difﬁcult task of constructing
proofs of correctness for query results that are efﬁciently
veriﬁable by the Verena client. Verena builds upon work on
authenticated data structures (ADS) and in particular tree-based
ADSes [20, 23, 30, 31, 33, 37, 49]. ADSes enable efﬁcient
veriﬁcation without downloading data on the client and re-
executing the computation. We provide a brief background on
the ADS used in our implementation in appendix A. Verena
enables these ADSes to be used in a multi-user and stateless
setting. In this manner, Verena can verify a wide range of
common queries, but not any general query. Table I lists the
read queries that are currently supported by Verena. Moreover,
§IX discusses how Verena can be extended to support a broader
range of query types.
Since applications have different access policies, Verena
needs to translate these policies into ADSes. Our new API,
based on the notion of query trust contexts (TC), integrity
query prototypes (IQP) and completeness chains, presented in
§IV, captures an application’s policy.
Since multiple users may be able to change the same data
item, users do not know what was the hash of the last change.
Additionally, in web applications, not all users are online at
the same time and cannot notify each other of their changes.
To make the problem worse, since the web setting is stateless,
whenever a user logs off, any state he stored in his browser is
typically lost. Moreover, the user should be allowed to login
from a new browser where there is no state. This means that,
even though ADSes help ensure integrity of some snapshot of
the data, the server can still provide stale data. In fact, Mazières
and Sasha [34] prove that, without any trust at the server or
connectivity assumptions of users, one cannot guarantee data
freshness.
To address this problem, Verena uses a hash server; a simple
server whose main task is to serve the hash, version and last
modiﬁer for a given entry. As long as the hash server does
not collude with the main server, Verena’s integrity guarantees
hold. To check the correctness and freshness of query results,
a tempting approach is to store the entire ADS trees at the
hash server. We show in §VI that we can avoid this approach,
and maintain the task of the hash server simple, namely the
hash server stores one entry per tree, corresponding to the root
of the tree. As a result, the hash server is easier to secure; it
runs a small code base, answers to a narrow interface, and is
lightly utilized. The hash server could be collocated with the
IDP server because Verena assumes the same trust model for
these two servers.
IV. INTEGRITY POLICY API
In this section, we describe the main concepts behind
Verena’s API for expressing an integrity policy. In Verena
we are concerned only with write access control. As discussed
in §IX, systems like Mylar [41] can be used for expressing
and enforcing cryptographically read access control.
In order to illustrate Verena’s concepts and API, we use
consistently the following running example of a medical web
application.
A. Running Example: Remote Monitoring Medical Application
Our running example is a remote patient monitoring system
used to connect cardiac device patients with their physicians.
Such systems are deployed by a number of medical implant
manufacturers such as [1, 2, 4, 17]. In order to evaluate Verena
on such an application, we contacted one of the implant
manufacturing companies and obtained access to the web
interface of their remote monitoring system. This provided
us with a better understanding of the type of web pages that
these systems expose, access control that they implement and
the type of data that they expose to the physicians. We then
discussed with a cardiologist to gain a better understanding of
the integrity policy of this application.
Modern implantable cardiac devices, such as cardioverter
deﬁbrillators (ICDs), cardiac monitors and pacemakers, monitor
the patient’s cardiac activity and take certain actions. In particu-
lar, implants measure data such as therapy delivered, heart rate,
EKG (Electrocardiogram) data, and status of implant and leads.
Moreover, due to the multi-user setting in Verena, different
users are allowed to modify different portions of the data stored
at the server. Thus, the Verena server has to maintain different
ADSes for chunks of data that are modiﬁable by different sets
of users. Respectively, Verena clients must ensure that, for
each integrity-protected database operation, the server presents
proofs for all relevant ADSes that data was modiﬁed only by
legitimate users. To address this, Verena maintains a forest of
ADS trees, by automatically mapping the developer’s Verena
API calls into the appropriate ADSes.
898898
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
To facilitate access to this data, implants communicate remotely
with their clinics; this is supported by wireless telemetry devices
which, when in the proximity of the patient, query the implant
and then communicate the data further to the clinic server.
The server then exposes a web interface to physicians,
through which they can access patient proﬁles, status of im-
plants and measurements. Besides viewing this data, physicians
ask the web server for certain aggregate computation such
as average heart rate, number of heart beats per day (e.g.,
observed over a three-day period) and number of sinus pauses
(i.e., skipped heart beats/asystoles). Physicians can change a
patient’s therapy by reprogramming the implant in the clinic,
using short-range inductive coil telemetry.
The information a physician receives from the web server
inﬂuences the decisions the physician makes for a patient and
is thus integrity critical. Although practices among physicians
can vary and there might be other inputs that inﬂuence the
therapy decisions, we were told that incorrect modiﬁcations
of these values or aggregates will likely lead to a change
in the delivered therapy and can cause serious patient harm.
Moreover, the status of the implant and leads connecting the
implant to the heart is integrity critical. If these are thought
of malfunctioning, this might trigger their replacement which
requires surgery.
The main subjects in the system that we had access to include
the administrators of the clinic, physicians and the medical
implants. Each implant can be seen as a user with write access
to the corresponding patient’s implant status and measurement
data. Main objects are patient related information which are
entered by physicians, as well as measurement and implant
status data which are entered directly into the system by the
implants.
Instantiation. To illustrate Verena’s API, we give (simpliﬁed)
examples of this application. The following collections are
relevant:
collection
patients
patient_groups
patient_measurements
ﬁelds in a document
(groupID, patientID,
patient_name, proﬁle)
(groupID, group_name)
(recordID, patientID, heart_rate,
timestamp)
Patients are organized into four groups based on their cardiac
disease. Each patient is present in only one such group. These
groups also represent the unit of write access control. Physicians
are granted write access to one or few of these groups, and
they can modify only patient proﬁles in those groups.
The collection patient_measurements contains measurement
data originating from a patient’s medical device and can be
modiﬁed only by the patient’s device.
B. Trust Contexts
Trust contexts are the units of write-access control in Verena.
A trust context, identiﬁed by a unique name, consists of a set
of users, called members. We also refer to this set of users as
the trust context membership list or access control list (ACL).
Each query whose results are integrity critical runs in a
particular trust context; only the members of that trust context
could have affected the result of the query.
The user who creates a trust context is the owner. The owner
of a trust context can add other members to the trust context
ACL or remove them from it. Currently, only the owner of the
trust context can manage its members, but delegating this to
other users is straightforward. We discuss how Verena maintains
and veriﬁes the membership of trust contexts in §V-D.
Returning to our running example and its protection re-
quirements, the developer should deﬁne one trust context per
disease group (whose name can be “groupID”) containing
the physicians allowed to modify the corresponding patient
proﬁles. The contents of patient_groups can be changed by
members of an “admins” group so the developer declares a trust
context for “admins”, too. Furthermore, the data in collection
patient_measurements as well as the query results on this data
can be modiﬁed only by the patient’s device. Hence, we also
have a trust context per patientID.
C. Integrity Query Prototypes
In Verena, the developer speciﬁes the desired integrity policy
via a set of integrity query prototypes (IQPs) with associated
trust contexts. The IQPs are query patterns which specify that
a certain set of read queries run in a certain trust context;
only members of the trust context may affect the result of
those queries. The integrity speciﬁcation is therefore associated
with read queries and not with data – nevertheless, the policy
implicitly carries over to data, because data is accessed through
queries. Moreover, the IQPs tell Verena what computation will
run on the data so that Verena prepares data structures for
verifying such computation. We now show the syntax of an
IQP and explain each element in it:
iqp = collection.IQP ({
trustContext: unique_name or tc_ﬁeld,
eq-range: [r f1, r f2, . . .],
ops: {o1: [ f1, . . . ], o2: [ f (cid:2)
1, . . . ], . . . }})
• “iqp” is an IQP handle.
• “collection” is the collection on which a query with this
pattern runs.
• “trustContext” speciﬁes the trust context.
The trust context can be a name, such as “admins” or can be
the name of a ﬁeld in this collection, such as groupID in the
patients collection. In the ﬁrst case, there is one ﬁxed trust
context for all documents in this collection.
In the latter case, there can be different trust contexts
for different documents. For example, if “patients” contains
documents (groupID: “A”, patientID: “10”, ...) and (groupID:
“B”, patientID: “11”, ...), and an IQP speciﬁes the “trustContext:
groupID”, the trust context for the ﬁrst document is “A” and
for the second document is “B”.
Each trust context must have a unique name. For example,
if both patientID and groupID are trust contexts for some IQPs
899899
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
Operation
project: [ f1, . . . ]
count
sum: f
min/max: f
avg: f
sum_F: [ f1, . . .]
Explanation
projects the ﬁelds f1, . . . from the document
returns the number of documents
returns the sum of the values in the ﬁeld f
returns the minimum/maximum value over the data
in ﬁeld f
returns the average of the values in the ﬁeld f
a more generic aggregate: returns the sum of a general
function F whose inputs are [ f1, . . . ]
TABLE I: Operations supported in read queries.
and can both have a value of 2, the developer should choose
trust context names of the form “patient 2” and “group 2”, in
order to differentiate them. If it is desirable for patientID to
remain an integer, the developer could include another ﬁeld in
the document, which will serve as the trust context ﬁeld, e.g.,
“group_tc”. In the rest of the paper, we assume that the trust