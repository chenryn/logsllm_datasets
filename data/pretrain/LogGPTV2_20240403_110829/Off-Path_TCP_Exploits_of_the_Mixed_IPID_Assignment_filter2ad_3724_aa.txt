title:Off-Path TCP Exploits of the Mixed IPID Assignment
author:Xuewei Feng and
Chuanpu Fu and
Qi Li and
Kun Sun and
Ke Xu
Off-Path TCP Exploits of the Mixed IPID Assignment
Xuewei Feng1, Chuanpu Fu1, Qi Li2,3, Kun Sun4, and Ke Xu1,3,5
1Department of Computer Science and Technology, Tsinghua University, Beijing, China
2Institute for Network Sciences and Cyberspace, Tsinghua University, Beijing, China
3Beijing National Research Center for Information Science and Technology (BNRist), Tsinghua University, Beijing, China
4Department of Information Sciences and Technology, CSIS, George Mason University
{fengxw18@mails, fcp20@mails, qli01@, xuke@}tsinghua.edu.cn, PI:EMAIL
5Peng Cheng Laboratory, China
0
2
0
2
g
u
A
9
2
]
R
C
.
s
c
[
1
v
1
8
9
2
1
.
8
0
0
2
:
v
i
X
r
a
ABSTRACT
In this paper, we uncover a new off-path TCP hijacking attack that
can be used to terminate victim TCP connections or inject forged
data into victim TCP connections by manipulating the new mixed
IPID assignment method, which is widely used in Linux kernel
version 4.18 and beyond to help defend against TCP hijacking at-
tacks. The attack has three steps. First, an off-path attacker can
downgrade the IPID assignment for TCP packets from the more
secure per-socket-based policy to the less secure hash-based policy,
building a shared IPID counter that forms a side channel on the
victim. Second, the attacker detects the presence of TCP connec-
tions by observing the shared IPID counter on the victim. Third,
the attacker infers the sequence number and the acknowledgment
number of the detected connection by observing the side channel of
the shared IPID counter. Consequently, the attacker can completely
hijack the connection, i.e., resetting the connection or poisoning
the data stream.
We evaluate the impacts of this off-path TCP attack in the real
world. Our case studies of SSH DoS, manipulating web traffic, and
poisoning BGP routing tables show its threat on a wide range of
applications. Our experimental results show that our off-path TCP
attack can be constructed within 215 seconds and the success rate
is over 88%. Finally, we analyze the root cause of the exploit and
develop a new IPID assignment method to defeat this attack. We
prototype our defense in Linux 4.18 and confirm its effectiveness
through extensive evaluation over real applications on the Internet.
CCS CONCEPTS
• Security and privacy → Security protocols.
KEYWORDS
side-channel; off-path exploit; hash collisions; IPID assignment
ACM Reference Format:
Xuewei Feng, Chuanpu Fu, Qi Li, Kun Sun, and Ke Xu. 2020. Off-Path TCP
Exploits of the Mixed IPID Assignment. In 2020 ACM SIGSAC Conference
on Computer and Communications Security (CCS’20), November 9-13, 2020,
Virtual Event, USA. ACM, NewYork, NY, USA, 13 pages. https://doi.org/10.
1145/3372297.3417884
1 INTRODUCTION
Since the transmission control protocol (TCP) was first presented
in RFC 793 in 1981 [41], more than 100 TCP related RFCs have
been released to improve the protocol [13]. Consequently, it be-
comes difficult for off-path attackers to hijack TCP connections,
1
mainly due to the challenge of inferring the 32-bit random se-
quence numbers and acknowledgment numbers of a targeted TCP
connection [25, 32, 41, 49]. When launching a brute-force attack,
the attacker has to flood more than 300 million spoofed packets
at a time to the target systems that support both RFC 793 [41]
and RFC 5961 [44]. Hence, off-path TCP attacks mainly rely on
discovering side channel vulnerabilities to facilitate the inference
of the sequence and acknowledgment numbers [9–12, 23]. Fortu-
nately, most of the uncovered vulnerabilities have been fixed or
constrained by the security community [9, 10, 23].
In this paper, we uncover a new off-path TCP hijacking attack
that exploits the mixed IPID assignment method in the latest Linux
kernels (i.e., version 4.18 and beyond) to either terminate victim
TCP connections or inject malicious data into victim TCP connec-
tions. First, our attack tricks the victim Linux machine into adopting
the hash-based IPID assignment policy, instead of the by default
more secure per-socket-based IPID assignment policy, on socket
protocols such as TCP and UDP. Once the IPID assignment policy
for socket protocols (TCP in our attack) is downgraded, it builds
a side channel based on the IPID hash collisions of the globally
shared 2048 hash counters, i.e., identifying a shared IPID counter
on the victim by leveraging hash collisions. Second, by observing
the shared IPID counter, an off-path attacker can detect the pres-
ence of TCP connections on the victim. Third, the attacker infers
sequence and acknowledgment numbers of the victim connection
to completely hijack the connection. This new attack does not need
any assistance of puppets, i.e., unprivileged applications or sand-
boxed scripts controlled by attackers on victim hosts [23, 42, 43].
The Identification field of IP protocol (IPID) is used to indi-
cate the uniqueness of a packet [40, 50]. After abandoning two pre-
vious vulnerable IPID assignment methods (i.e., global IPID assign-
ment and per-destination IPID assignment) [14, 16, 17, 23, 29], Linux
currently assigns IPID to packets based on a mixed method [3, 7, 53].
If a packet is generated from socket protocols such as TCP and UDP,
Linux uses the per-socket-based IPID assignment policy that assigns
IPID to the packet based on the counter recorded in the protocol
socket. Otherwise, Linux adopts the hash-based IPID assignment
policy that assigns IPID based on one of the 2048 globally shared
hash counters. Since the counter recorded in the protocol socket
cannot be observed by off-path attackers, the per-socket-based IPID
assignment is more secure against off-path attacks. Linux uses the
DF (Don’t Fragment) flag in the packet header [40] to choose be-
tween the two policies, since only socket protocols can set this
flag to TRUE to perform the path MTU discovery (PMTUD) mech-
anism [34, 35]. In other words, if the DF flag is set to TRUE, it uses
the per-socket-based policy; otherwise, it chooses the hash-based
Since Linux uses the more secure per-socket-based IPID assign-
ment by default for TCP connections, an off-path attacker first
tricks the victim into assigning IPID for its TCP packets using the
less secure hash-based IPID assignment. This goal can be achieved
by pretending to be a router and sending a forged ICMP “Frag-
mentation Needed” error message [39] to a victim. Since the ICMP
error message informs the victim that the packets issued from the
victim need to be fragmented and the DF flag is set, the victim will
be tricked into cleaning the DF flag of TCP packets and thus uses
the hash-based IPID assignment. Next, the victim chooses one IPID
counter from the 2048 hash counters to assign IPID for its TCP
packets. Among the 2048 globally shared hash counters, the target
counter is decided by the hash value of four components, i.e., three
fields of the packet (source IP address, destination IP address, protocol
number) and a random value generated on system boot. Due to the
small-sized hash counter pool, the attacker may identify the target
hash counter used in a victim TCP connection via hash collisions,
namely, alternating IP addresses to collide with the target counter.
Once the shared IPID counter is known, attackers can use the
challenge ACK mechanism [44] as trigger conditions to change the
shared IPID counter, facilitating the next two attack steps, i.e., to
detect the presence of the victim TCP connection and infer the
sequence and acknowledgment numbers. The attacker sends forged
TCP packets to the victim, and the triggered challenge ACK pack-
ets will alter the shared IPID counter under different situations.
It helps the attacker to determine if the specified values in the
forged TCP packets are correct. Note that our attack only leverages
the challenge ACK mechanism as trigger conditions to assist the
inference of a victim TCP connection, instead of directly exploit-
ing vulnerabilities in the challenge ACK mechanism to hijack TCP
connections [9, 10].
Our attack does not suffer from traditional noise challenges that
other works have to address [16, 17, 37, 38]. Since, in our attack,
irrelevant TCP traffic using per-socket-based counters, instead of
the hash-based counters, will not interfere with the attack traffic.
Moreover, we measure that non-TCP traffic also rarely interferes
with the attack. We evaluate the impacts of the new off-path TCP
vulnerability on the Internet. We find that more than 20% of the
Alexa (www.alexa.com) top 100k websites are vulnerable to our off-
path attack. Those websites can be tricked into cleaning the DF flag
and downgrading the IPID assignment from the per-socket-based
policy to the hash-based policy for their TCP packets after receiving
forged ICMP “Fragmentation Needed” messages. We implement
a PoC and perform case studies on a wide range of applications,
e.g., HTTP, SSH and BGP, to validate the effectiveness of the at-
tack. For example, an off-path attacker can detect and tear down
a SSH connection in 155 seconds on average and manipulate web
applications or BGP routing tables within 215 seconds. The average
success rate of our exploit is over 88%. These results demonstrate
that the off-path TCP exploit could cause serious damages in real
world.
policy. However, our study shows that the mixed IPID assignment
in Linux implementations has vulnerabilities that can be exploited
to launch a new off-path TCP hijacking attack.
Finally, we propose countermeasures that aim to eliminate the
root cause of the newly discovered off-path TCP attack. We fix
the mixed IPID assignment in Linux kernels by determining if a
packet is originated from TCP protocol on the Protocol field in
IP header, instead of the DF flag. We implement a prototype of our
countermeasure in Linux 4.18 and confirm its effectiveness through
experimental evaluation on the Internet.
Contributions. Our main contributions are the following:
• We uncover that the new mixed IPID assignment method can
still be exploited to hijack TCP connections by off-path attackers.
• We uncover a new side channel in IPID assignment in the latest
Linux kernels. We demonstrate that the side channel can be ex-
ploited to learn the presence of victim TCP connections and infer
the sequence and acknowledgment numbers of the connections.
• We measure the Alexa top 100k websites and find that more
than 20% of them are vulnerable to our off-path attack. We also
perform case studies on a wide range of applications on the
Internet and confirm the effectiveness of the attack.
• We analyze the root cause of the new attack and develop counter-
measures that use new IPID assignment methods for TCP packets.
Our prototype in Linux 4.18 validates its effectiveness.
2 BACKGROUND
In this section, we first introduce the IPID assignment policies
adopted in the latest Linux kernels. Next, we describe two key
mechanisms in TCP/IP operations, i.e., path MTU discovery and
challenge ACK, which are related to develop our exploit.
2.1 IPID Assignment in Linux
There are two basic IPID assignment policies in current Linux, i.e.,
IPID based on 2048 hash counters or IPID based on per-socket
counters, where the latter is specific to socket related protocols
such as TCP. Figure 1 illustrates the procedure of IPID assignment
in Linux version 4.18 and beyond. When a packet is generated, the
IP protocol first checks whether the packet is a TCP RST packet. If
yes, then the IPID of the packet is set to 0 directly. This assignment
is due to Geoffrey et al.’s disclosure of a side channel in previous
assignment methods, i.e., IPID of the RST packet was assigned based
on one of the 2048 hash counters before version 4.18, which can be
exploited to detect the presence of TCP connections [3].
Figure 1: IPID assignment in Linux version 4.18 and beyond.
If the packet is not a TCP RST packet, IP protocol checks the
DF flag of the packet. IF the DF flag is set to FALSE, the IPID will
be assigned based on a hash counter. There are totally 2048 hash
counters in Linux. IP will select one from these counters according
to the hash value of 4 variables, i.e., source IP address and destination
IP address of the packet, the protocol number of the packet, and a
random value generated on system boot. After the IPID value is
2
RSTIPID=0DF=1IPID=counter[hash];counter[hash]+=uniform[1, sys_ticks];IPID=counter[socket];counter[socket]+=1;YESNONOYESYESNOPacketIPID=NullIPID!=NullIPID=0SYN/ACKPacketcopied from the selected counter, the counter will increase by a
uniform distribution value between 1 and the number of system
ticks since the last packet transmission that used the same counter.
The system tick is usually measured in milliseconds.
When the DF flag is set to TRUE, except for the TCP SYN/ACK (both
the SYN flag and the ACK flag in TCP header are set to TRUE) packet
whose IPID is assigned to 0, IP assigns IPID for other packets based
on the second policy that is based on a per-socket counter unique
to each connection. The per-socket counter is usually initialized
to a random value. Then each time after a packet is transmitted
using this counter, the counter increases by 1. The per-socket-based