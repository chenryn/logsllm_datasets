# Off-Path TCP Exploits of the Mixed IPID Assignment

## Authors
Xuewei Feng, Chuanpu Fu, Qi Li, Kun Sun, and Ke Xu

### Affiliations
1. Department of Computer Science and Technology, Tsinghua University, Beijing, China
2. Institute for Network Sciences and Cyberspace, Tsinghua University, Beijing, China
3. Beijing National Research Center for Information Science and Technology (BNRist), Tsinghua University, Beijing, China
4. Department of Information Sciences and Technology, CSIS, George Mason University
5. Peng Cheng Laboratory, China

### Contact
{fengxw18, fcp20, qli01, xuke}@tsinghua.edu.cn

## Abstract
In this paper, we uncover a new off-path TCP hijacking attack that can be used to terminate victim TCP connections or inject forged data into them by manipulating the mixed IPID assignment method, which is widely used in Linux kernel version 4.18 and beyond to help defend against TCP hijacking attacks. The attack consists of three steps: first, an off-path attacker downgrades the IPID assignment for TCP packets from the more secure per-socket-based policy to the less secure hash-based policy, creating a shared IPID counter that forms a side channel on the victim. Second, the attacker detects the presence of TCP connections by observing the shared IPID counter. Third, the attacker infers the sequence number and acknowledgment number of the detected connection by observing the side channel of the shared IPID counter, thereby completely hijacking the connection.

We evaluate the impact of this off-path TCP attack in real-world scenarios. Our case studies of SSH DoS, web traffic manipulation, and BGP routing table poisoning demonstrate its threat to a wide range of applications. Experimental results show that our off-path TCP attack can be constructed within 215 seconds with a success rate over 88%. Finally, we analyze the root cause of the exploit and develop a new IPID assignment method to mitigate this attack. We prototype our defense in Linux 4.18 and confirm its effectiveness through extensive evaluation over real applications on the Internet.

### CCS Concepts
- Security and privacy → Security protocols

### Keywords
side-channel, off-path exploit, hash collisions, IPID assignment

### ACM Reference Format
Xuewei Feng, Chuanpu Fu, Qi Li, Kun Sun, and Ke Xu. 2020. Off-Path TCP Exploits of the Mixed IPID Assignment. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS’20), November 9-13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3372297.3417884

## 1. Introduction
Since the transmission control protocol (TCP) was first introduced in RFC 793 in 1981, over 100 TCP-related RFCs have been released to improve the protocol. Consequently, it has become increasingly difficult for off-path attackers to hijack TCP connections, primarily due to the challenge of inferring the 32-bit random sequence numbers and acknowledgment numbers of a targeted TCP connection. A brute-force attack would require flooding more than 300 million spoofed packets at a time to target systems that support both RFC 793 and RFC 5961. Therefore, off-path TCP attacks mainly rely on discovering side-channel vulnerabilities to facilitate the inference of sequence and acknowledgment numbers. Fortunately, most of these vulnerabilities have been fixed or constrained by the security community.

In this paper, we uncover a new off-path TCP hijacking attack that exploits the mixed IPID assignment method in the latest Linux kernels (version 4.18 and beyond) to either terminate victim TCP connections or inject malicious data into them. First, our attack tricks the victim Linux machine into adopting the hash-based IPID assignment policy instead of the more secure per-socket-based IPID assignment policy for socket protocols such as TCP and UDP. Once the IPID assignment policy is downgraded, it creates a side channel based on the IPID hash collisions of the globally shared 2048 hash counters. By observing the shared IPID counter, an off-path attacker can detect the presence of TCP connections and infer the sequence and acknowledgment numbers to completely hijack the connection. This new attack does not require any assistance from unprivileged applications or sandboxed scripts controlled by attackers on victim hosts.

The Identification field of the IP protocol (IPID) is used to indicate the uniqueness of a packet. After abandoning two previous vulnerable IPID assignment methods (global IPID assignment and per-destination IPID assignment), Linux currently assigns IPID to packets based on a mixed method. If a packet is generated from socket protocols such as TCP and UDP, Linux uses the per-socket-based IPID assignment policy, which assigns IPID to the packet based on the counter recorded in the protocol socket. Otherwise, Linux adopts the hash-based IPID assignment policy, which assigns IPID based on one of the 2048 globally shared hash counters. Since the counter recorded in the protocol socket cannot be observed by off-path attackers, the per-socket-based IPID assignment is more secure against off-path attacks. Linux uses the DF (Don’t Fragment) flag in the packet header to choose between the two policies, as only socket protocols can set this flag to TRUE to perform path MTU discovery (PMTUD).

To exploit the mixed IPID assignment, an off-path attacker first tricks the victim into assigning IPID for its TCP packets using the less secure hash-based IPID assignment. This can be achieved by pretending to be a router and sending a forged ICMP “Fragmentation Needed” error message to the victim. Since the ICMP error message informs the victim that the packets need to be fragmented and the DF flag is set, the victim will be tricked into clearing the DF flag of TCP packets and thus use the hash-based IPID assignment. Next, the victim chooses one IPID counter from the 2048 hash counters to assign IPID for its TCP packets. Among the 2048 globally shared hash counters, the target counter is decided by the hash value of four components: the source IP address, destination IP address, protocol number, and a random value generated on system boot. Due to the small-sized hash counter pool, the attacker may identify the target hash counter used in a victim TCP connection via hash collisions, i.e., alternating IP addresses to collide with the target counter.

Once the shared IPID counter is known, the attacker can use the challenge ACK mechanism as trigger conditions to change the shared IPID counter, facilitating the next two attack steps: detecting the presence of the victim TCP connection and inferring the sequence and acknowledgment numbers. The attacker sends forged TCP packets to the victim, and the triggered challenge ACK packets will alter the shared IPID counter under different situations, helping the attacker determine if the specified values in the forged TCP packets are correct. Note that our attack only leverages the challenge ACK mechanism as trigger conditions to assist the inference of a victim TCP connection, rather than directly exploiting vulnerabilities in the challenge ACK mechanism to hijack TCP connections.

Our attack does not suffer from traditional noise challenges that other works have to address. Irrelevant TCP traffic using per-socket-based counters, instead of the hash-based counters, will not interfere with the attack traffic. Moreover, non-TCP traffic rarely interferes with the attack. We evaluate the impact of the new off-path TCP vulnerability on the Internet and find that more than 20% of the Alexa top 100k websites are vulnerable to our off-path attack. These websites can be tricked into clearing the DF flag and downgrading the IPID assignment from the per-socket-based policy to the hash-based policy for their TCP packets after receiving forged ICMP “Fragmentation Needed” messages. We implement a proof-of-concept (PoC) and perform case studies on a wide range of applications, such as HTTP, SSH, and BGP, to validate the effectiveness of the attack. For example, an off-path attacker can detect and tear down an SSH connection in 155 seconds on average and manipulate web applications or BGP routing tables within 215 seconds. The average success rate of our exploit is over 88%, demonstrating that the off-path TCP exploit could cause serious damage in the real world.

Finally, we propose countermeasures to eliminate the root cause of the newly discovered off-path TCP attack. We fix the mixed IPID assignment in Linux kernels by determining if a packet is originated from the TCP protocol based on the Protocol field in the IP header, rather than the DF flag. We implement a prototype of our countermeasure in Linux 4.18 and confirm its effectiveness through experimental evaluation on the Internet.

### Contributions
- We uncover that the new mixed IPID assignment method can still be exploited to hijack TCP connections by off-path attackers.
- We uncover a new side channel in IPID assignment in the latest Linux kernels and demonstrate that the side channel can be exploited to learn the presence of victim TCP connections and infer the sequence and acknowledgment numbers of the connections.
- We measure the Alexa top 100k websites and find that more than 20% of them are vulnerable to our off-path attack. We also perform case studies on a wide range of applications on the Internet and confirm the effectiveness of the attack.
- We analyze the root cause of the new attack and develop countermeasures that use new IPID assignment methods for TCP packets. Our prototype in Linux 4.18 validates its effectiveness.

## 2. Background
In this section, we introduce the IPID assignment policies adopted in the latest Linux kernels and describe two key mechanisms in TCP/IP operations: path MTU discovery and challenge ACK, which are related to our exploit.

### 2.1 IPID Assignment in Linux
There are two basic IPID assignment policies in current Linux: IPID based on 2048 hash counters and IPID based on per-socket counters, where the latter is specific to socket-related protocols such as TCP. Figure 1 illustrates the procedure of IPID assignment in Linux version 4.18 and beyond.

When a packet is generated, the IP protocol first checks whether the packet is a TCP RST packet. If yes, the IPID of the packet is set to 0 directly. This assignment is due to Geoffrey et al.’s disclosure of a side channel in previous assignment methods, where the IPID of the RST packet was assigned based on one of the 2048 hash counters before version 4.18, which could be exploited to detect the presence of TCP connections.

If the packet is not a TCP RST packet, the IP protocol checks the DF flag of the packet. If the DF flag is set to FALSE, the IPID will be assigned based on a hash counter. There are 2048 hash counters in Linux, and the IP protocol selects one from these counters according to the hash value of four variables: the source IP address, destination IP address, protocol number, and a random value generated on system boot. After the IPID value is copied from the selected counter, the counter will increase by a uniform distribution value between 1 and the number of system ticks since the last packet transmission that used the same counter. The system tick is usually measured in milliseconds.

When the DF flag is set to TRUE, except for the TCP SYN/ACK packet (where both the SYN flag and the ACK flag in the TCP header are set to TRUE) whose IPID is assigned to 0, IP assigns IPID for other packets based on the second policy, which is based on a per-socket counter unique to each connection. The per-socket counter is usually initialized to a random value and increases by 1 each time a packet is transmitted using this counter. The per-socket-based policy is more secure against off-path attacks because the counter recorded in the protocol socket cannot be observed by off-path attackers.