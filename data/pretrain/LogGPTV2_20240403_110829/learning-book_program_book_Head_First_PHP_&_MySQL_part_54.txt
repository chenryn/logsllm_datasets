### 大箭头显示主键关联
通过将数据分散到多个表中，我们可以消除重复数据，从而构建一个高效的数据库。即使是最简单的数据库模式中，外键也占据着重要地位，因为它可以将表关联起来。

### 使用外键
采用可视化方式将数据流程描述为表，并通过主键和外键将这些表相互连接，通常很有帮助。我们可以通过查看包含具体数据的`Mismatch`表来更详细地了解主键和外键之间的关系。

- `user_id`在`mismatch_user`表中作为主键，必须是唯一的。
- `topic_id`在`mismatch_topic`表中作为主键，提供对主题行的唯一引用。
- `user_id`在外键`mismatch_response`表中引用`mismatch_user`表中的用户行，使你能知道哪个用户与给定响应相关联。
- `topic_id`在外键`mismatch_response`表中引用`mismatch_topic`表中的主题行，以便找到响应的主题名及其类别。

**表结构示例：**
- **mismatch_user**
  - user_id (主键)
  - username
  - password

- **mismatch_topic**
  - topic_id (主键)
  - name
  - category

- **mismatch_response**
  - response_id (主键)
  - user_id (外键，引用mismatch_user)
  - topic_id (外键，引用mismatch_topic)
  - response

通过使用主键和外键建立表之间的关联，我们可以以一种一致的方式连接这些表中的数据。此外，数据库还可以被设计为要求主键和其相应的外键必须匹配，这称为引用完整性（referential integrity）。

### 表之间的关系类型
#### 一对一关系
- 一个表A中的一行在另一个表B中至多有一个匹配行，反之亦然。
- 示例：假设`Mismatch`用户的登录信息和用户简档分别存储在两个表中。`mismatch_user_login`表中的`user_id`列是一个主键，而`mismatch_user_profile`表中的`user_id`列是一个外键，确保每个用户只有一个简档。

**表结构示例：**
- **mismatch_user_login**
  - user_id (主键)
  - username
  - password

- **mismatch_user_profile**
  - user_id (外键，引用mismatch_user_login)
  - join_date
  - gender

#### 一对多关系
- 一个表A中的一行在另一个表B中可以有多个匹配行，但表B中的一行只能与表A中的一行匹配。
- 示例：`mismatch_user`表中的一个用户可以在`mismatch_response`表中有多个响应。

**表结构示例：**
- **mismatch_user**
  - user_id (主键)
  - username
  - password

- **mismatch_response**
  - response_id (主键)
  - user_id (外键，引用mismatch_user)
  - topic_id (外键，引用mismatch_topic)
  - response

#### 多对多关系
- 一个表A中的多个行与另一个表B中的多个行匹配。
- 示例：`mismatch_user`表中的用户和`mismatch_topic`表中的主题之间存在多对多关系，通过`mismatch_response`表进行关联。

**表结构示例：**
- **mismatch_user**
  - user_id (主键)
  - username
  - password

- **mismatch_topic**
  - topic_id (主键)
  - name
  - category

- **mismatch_response**
  - response_id (主键)
  - user_id (外键，引用mismatch_user)
  - topic_id (外键，引用mismatch_topic)
  - response

### 命名关系
请在以下各个表中圈出一些列，将其移出到自己的表中，并确定它们与原表之间是一对一、一对多还是多对多关系。然后画出这个关系，并加上适当的箭头。

- **address** 和 **user**
  - 关系：一对一
  - 图解：`address`表中的`user_id`列作为外键，引用`user`表中的`user_id`列。

- **employer** 和 **user**
  - 关系：一对多
  - 图解：`user`表中的`employer_id`列作为外键，引用`employer`表中的`employer_id`列。

- **friends** 和 **user**
  - 关系：多对多
  - 图解：创建一个`friendship`表，其中包含`user_id_1`和`user_id_2`两个外键，分别引用`user`表中的`user_id`列。

- **category** 和 **topic**
  - 关系：一对多
  - 图解：`topic`表中的`category_id`列作为外键，引用`category`表中的`category_id`列。

希望这些优化后的文本能更好地帮助你理解数据库表之间的关系。