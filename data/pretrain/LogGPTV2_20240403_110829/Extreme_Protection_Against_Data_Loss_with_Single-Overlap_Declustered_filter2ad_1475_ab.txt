III. SINGLE-OVERLAP DECLUSTERED PARITY
Prior work on parity declustering has often relied on known
BIBD designs to construct perfectly balanced data layouts that
attempt to maximize the six factors shown in Table I. However,
as conceived, the six criteria do not seek to emphasize data
survivability. To that end, we have identiﬁed two additional
principles that emphasize data survivability during frequent
failures:
• Maximizing the number of simultaneous disk failures
tolerated without increasing parity overhead, and
• Minimizing disk rebuild time by balancing parity stripes
across all disks.
In traditional declustered parity, data is encoded into k data
blocks and m parity blocks with the k + m blocks forming a
parity stripe. In practice it is common to use Reed-Soloman
codes to construct parity blocks and the notation for a parity
scheme is typically shortened to RS(k,m). To satisfy the single
failure correcting property, the parity stripe is stored onto a set
of k + m disks. In order to tolerate more than m disk failures
our techniques require additional care in selecting how parity
stripes are mapped onto disks, and thus we introduce the term
stripeset to describe a set of disks onto which parity stripes
Fig. 3: A table of the full set of 4-disk single overlap stripesets
chosen from a population of 16 total disks. With an RS(2,2)
coding we can see that 6 simultaneous drive failures can be
tolerated without data loss. The number of failures tolerated
within a SODP layout depends on the parity scheme selected.
are mapped. Figure 2 shows an example of a parity stripe and
stripeset. If more than m disk failures occur simultaneously
within a single stripeset then the data in this stripeset is lost. In
conventional RAID all stripes are located in a single stripeset.
With complete parity declustering every possible permutation
of disks exists as a valid stripeset.
Single-overlap declustered parity, or SODP, is a declustered
layout scheme that ensures at most one overlapping disk
between any two stripesets. This maximizes the number of
disk failures that can be tolerated in a parity scheme with
full declustering and maximizes the number of disks partic-
ipating in a disk rebuild following a disk failure. Figure 3
illustrates the layout of the SODP design across 16 disks
with RS(2, 2) encoding. As shown, only 20 total stripesets
are required to construct a fully declustered layout, where
every disk participates in a stripeset with every other disk.
To provide an example, Disk1 participates in 5 stripesets, but
none of the other disks appear more than once in those same
stripesets. If Disk1 fails, the remaining 15 disks can be used
for recovery, which provides the same rebuild performance as
traditional parity declustering. This is true for all 16 disks.
Furthermore, one can see that disks 1, 2, 5, 7, 10 and 11
may fail simultaneously and there is no stripeset experiencing
3 failures, and thus no data is lost. Therefore, rather than
tolerating only 2 failures, the SODP layout can tolerate 6
failures without experiencing data loss.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:29:32 UTC from IEEE Xplore.  Restrictions apply. 
345
A. Generating Single-Overlapping Stripesets
We introduce a stripeset construction algorithm we call
Optimal SODP, or O-SODP, that uses matrix manipulation to
minimize the number of stripesets. Before presenting the full
O-SODP algorithm, we walk through the construction of single
overlap stripesets using the above example, where each disk
participates in 5 stripesets. First, the 16 disks are organized
into a 4x4 disk matrix with rows a, b, c, d and columns 1, 2, 3, 4
as shown in Figure 4. There are three steps to construct the
single overlap stripesets:
1) Generate Row-based Stripesets: Each row (e.g., a, b, c,
or d) consists of 4 disks, which form a row-based stripeset.
2) Generate Column-based Stripesets: Each column (e.g.,
4 disks, which construct a
1, 2, 3, or4) also consists of
column-based stripeset.
Fig. 4: Disk matrix and row-relative position array.
3) Generate Row-column Stripesets: The key idea of row-
column stripesets is to choose 4 disks from different rows and
columns. As shown in Figure 4, the simplest example is to
choose disks on the diagonal, whose positions are denoted
as [(a 1), (b 2), (c 3), (d 4)]. We simplify this notation into
a row-relative position array [1, 2, 3, 4], which represents the
row-column stripeset [Disk1, Disk6, Disk11, Disk16].
To generate the remaining row-column stripesets while
maintaining a balanced declustered layout we deﬁne a new
algorithm called shufﬂe permutation. The objective is to
swap all possible two position pairs in the diagonal row-
relative position array to create new position arrays. As shown
in Figure 5, if we ﬁrst swap the position pair (1, 2), it is
obvious the next swap should be the pair (3, 4), which gener-
ates a new row-relative position array [2, 1, 4, 3] that denotes
the row-column stripeset [Disk2, Disk5, Disk12, Disk15]. In
this extremely simple example we produced three new row-
relative position arrays which were permutation shufﬂed from
the initial position array [1, 2, 3, 4]. After completing shufﬂe
permutation, the resultant 4 position arrays form a position
matrix, which has a unique value for each column. Therefore,
the position matrix is able to generate 4 non-overlapping
row-column stripesets which cover the entire disk matrix.
Algorithm 1 shows the pseudocode for implementing the
shufﬂe permutation algorithm.
Fig. 5: Shufﬂe permutation by swapping all possible position
pairs in the initial position array
346
Algorithm 1: Shufﬂe Permutations
Input: initialPosition ← [1,2,..., c], c columns
Output: P={P1, P2, ...}, shufﬂed position arrays
function CREATESHUFFLEARRAYS(B, N, k + m)
P ={}
for i = 1: c-1do
for j = i+1 : cdo
temp = initialPosition
empty temp[i] and temp[j]
P’ = createShufﬂeArrays(temp)
for k = 1: length(P’) do
(cid:2)
k
tmp = P
tmp.insert(j) at ith position
tmp.insert(i) at jth position
P.add(tmp)
end
end
end
return P
end function
To generate the additional row-column stripesets containing
at most one overlapping disk per stripeset, ﬁx one position
in the row (e.g., a) and rotate the other three positions of
that row (e.g., b, c, d) as shown in Figure 6. A single rotation
of the position array [1, 2, 3, 4] leads to a new position array
[1, 3, 4, 2]. By applying a single rotation to the other position
arrays in the matrix, a new position matrix is generated. This
newly formed position matrix corresponds to 4 non-overlapped
row-column stripesets. The new stripesets are single overlap-
ping with the position matrix from which they were derived.
Furthermore, rotating the position array [1, 2, 3, 4] twice leads
to another new position array [1, 4, 2, 3]. Correspondingly,
another new position matrix is formed to generate another
4 new row-column stripesets, all of which satisfy the single
overlap property. The process will continue until rotation isn’t
possible anymore. Therefore, 3 position matrices are available
from row-column stripeset generation, or alternatively each
disk is included in three row-column stripesets.
Fig. 6: Fix one position and rotate the remaining positions to
generate the new position matrices.
To conclude this example, combining all
row-based,
column-based and row-column stripesets based on shufﬂe
permutation and rotation, the above example generates 20
stripesets in total across 16 disks with each disk included in
exactly 5 stripesets.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:29:32 UTC from IEEE Xplore.  Restrictions apply. 
CHALLENGES: When the size of a stripeset is large or an
odd number, how do we do pair-wise swap in the permutation
shufﬂe? Figure 7 illustrates the case of the stripeset size
being 7, which leads to the initial diagonal position array
[1, 2, 3, 4, 5, 6, 7] with corresponding rows a, b, c, d, e, f, g. To
generate a position matrix, we will swap 1 and 2 in the second
position array, 1 and 3 in the third position array and so
on. Unlike the previous 4-column case where the remaining
pair-wise swap is obvious, our new 7-column case leaves the
remaining swaps with
possibilities.
(5
2)(1
1)
2)(3
2!
Fig. 7: Position array of size 7 and corresponding position
matrix.
To solve the above challenge, we introduce the concept
of rotate distance, which indicates the clockwise distance
between any two positions in the rotate space of the position
array. For example, the rotate distance from 3 to 6 is two,
because it has to walk through 4 and 5. To satisfy the SODP
property, we should guarantee the following constraint:
Constraint #1: Rotate distance before and after swapping
cannot be equal.
With the same rotate distance, the new position array will
eventually overlap multiple positions with the diagonal
position array. As shown in Figure 8, if we swap the position
pair (3, 6) in the second position array, the rotate distance
from 3 to 6 is still two (e.g., walk through X and 1), which
is equal to the previous rotate distance. As a result, after
rotating the second position array 3 times,
it will double
overlap with the diagonal position array. To prevent
this
from occurring, we identify the following property to satisfy
constraint #1 for any single position pair (a, b).
dr(a → b) (cid:4)= dr(b → a)
where dr(a → b) represents the rotate distance from a to b. In
the example, this will prevent the swapping of position pairs
(3, 6) and also (4, 7) in the second position array.
Fig. 8: Properties for single and multiple position pairs swap-
ping in permutation shufﬂe.
Next, if we try to swap both (3, 4) and (5, 6) at the same
time, the rotate distances dr(3 → 5) and dr(4 → 6) for the
second position array are equivalent to those in the diagonal
position array. This means if we were to then rotate the already
swapped second position array 1 time, it would still cause an
overlap (e.g., 4 and 6) with the diagonal position array. As we
can see, both of the single position pair swaps are feasible,
but swapping them together creates a conﬂict. To avoid the
multiple overlaps resulting from multiple position pair swaps,
we have to guarantee any two pairs (a1, b1) and (a2, b2) meet
the following requirement to satisfy constraint #1.
dr(a1 → b1) (cid:4)= dr(a2 → b2)
This prevents the swapping of position pairs with the same
rotate distance in the diagonal position array. For example, if
we swap the position pair (3, 4), it will exclude other position
pairs (5, 6) and (6, 7). The only feasible additional swap is the
pair (5, 7) and then the remaining position 6 is left untouched.
The resultant second position array is [2, 1, 4, 3, 7, 6, 5], which
will not overlap more than one position with the diagonal
position array regardless of how many rotations are applied.
Fig. 9: Auto-generation of other position arrays with a given
second position array.
Now we need to prevent multiple overlaps between
the second and subsequent position arrays. The most
straightforward way is to avoid swapping the same position
pairs. Another approach, utilizing the given second position
array, would be to add one along the diagonal based on the
circle shown in Figure 9. As you can see,
the positional
elements inserted alongside the diagonal 1s are 4, 5, 6, 7, 2, 3.
By applying the same principle, the next set of additional
positional elements are 3, 4, 5, 6, 7, 2. At this point, one can
notice the repeating 6, 5 and 7, 6, which have already occurred
in the second position array. This materializes because in the
second position array dr(4 → 3) is equal to dr(6 → 5), and by
adding 1 both 6, 5 and 7, 6 appear again thus causing a double
overlap in the given second position array. To guarantee
the derived arrays will never violate the SODP constraint
with the second position array, we identify a second constraint:
Constraint #2: Rotate distances in the second position array
must be distinct.
This means if we have the successive 4, 3 in the second
position array, it is not allowed to include successive 7, 6 or
6, 5. Otherwise, other derived position arrays will experience
multiple overlaps with the second position array.
By combining the two constraints above, we are able to
create a feasible second position array and a corresponding
position matrix. Note that sometimes, a perfectly balanced
declustered layout based on our position matrix with the
required parameters cannot be found, we publish our feasible
position matrices in [26].
THEORETICAL ANALYSIS To demonstrate that O-SODP
minimizes the number of stripesets, S, we assume a disk array
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:29:32 UTC from IEEE Xplore.  Restrictions apply. 
347
B. Greedy SODP
For arbitrary numbers of disks and arbitrary numbers of
data blocks (k) and parity blocks (m) we designed the Greedy
SODP algorithm, G-SODP, to achieve nearly single overlap
declustering. Put simply, G-SODP sacriﬁces a small amount
of rebuild performance to gain a modest improvement in disk
failure tolerance. As we will see later in Section V this tradeoff
turns out to be surprisingly effective when we evaluate the
probability of data loss under failure bursts. In other words,
G-SODP achieves a result very similar to that of O-SODP by
slightly reducing the rebuild performance, which in turn can
tolerate more disk failures.
The basic idea of G-SODP is to create one or more base
stripesets and derive the ith stripeset by adding i mod N.
Figure 11 illustrates how to construct 2 + 2 stripesets within
16 disks. G-SODP uses [1, 3, 6, 7] as the base stripeset and
add i to the disk obtained from the base stripeset, which is
able to generate 15 derived stripesets. Utilizing this process,
G-SODP guarantees each disk participates in an equal number
of stripesets (e.g., 4) to achieve a balanced declustered layout
comparable to O-SODP.
of size N, where each stripeset consists of k + m disks. To
count the disk pairs (i, j), we have
S ∗ (k + m)(k + m − 1)
≥ N (N − 1)
2
2
which guarantees the disk pairs in stripesets cover all disks
pairs in the N-disk array. The size of S can be formulated as:
S ≥
N (N − 1)
(k + m)(k + m − 1)
To count the number of pairs (s, d) where s is a stripeset and
d is a disk in the stripeset, we have the following equation:
S ∗ (k + m) = N ∗ r
Here r is the number of stripesets per disk. To count the
triples (s, d1, d2) where d1 and d2 are distinct disks and s is
a stripeset that contains both, we have the following equation:
1 ∗ (N − 1) = r ∗ (k + m − 1)
where O-SODP makes any pair of disks (e.g., d1 and d2)
appear in one stripeset. By combining the two equations, the
size of S equals
(k+m)(k+m−1), which is the minimum.
N (N−1)
Figure 10 compares the total number of stripesets using O-
SODP with the conﬁgurations identiﬁed in prior BIBD litera-
ture [14]. Additionally, we compare the number of stripesets
per disk using O-SODP, being that the number of stripesets per
disk directly reﬂects the rebuild performance. To be speciﬁc,
the number of surviving disks participating in single disk
rebuild is:
min{stripesets-per-disk ∗ (k + m − 1), N − 1}
s
t
e
s
e
p
i
r
t
S
#
 200
 150
 100
 50
 0
BIBD(s2, s, 2)
BIBD(s2, s, 1)
SODP(s2, s)
BIBD(s2,s,2)
BIBD(s2,s,1)
SODP(s2,s)
k
s
D
i
r
e
p
s
t
e
s
e
p
i
r
t
S
#
 20
 15
 10
 5
 0
9
16 25 36 49 64 81 100
9
16 25 36 49 64 81 100
#Drives
#Drives
Fig. 10: Total number of stripesets and number of stripesets
per disk for SODP and deﬁned BIBD conﬁgurations.
We see that in general our O-SODP algorithm is able to
match the BIBD performance with λ = 1 while the dips
show the G-SODP (see Section III-B) results for conﬁgurations
not having a known BIBD conﬁguration. We also include the
BIBD stripeset counts for the same conﬁguration with λ = 2 to
demonstrate the degree to which higher λ generate additional
stripesets which do not further improve rebuild performance
but do reduce the total number of disk failures that can be
tolerated. If we consider a stripeset as a failure domain we
see that these BIBD designs have a greater number of failure
domains with a lower degree of fault tolerance. However, O-
SODP is not guaranteed to generate a set of single-overlap
stripesets for all conﬁgurations (even when the stripeset size
is smaller than the square root of the number of disks).
Fig. 11: Greedy SODP
CHALLENGES: The fundamental challenge of G-SODP
is to obtain base stripesets, which aim to construct distinct
distances between any two elements inside the given base
stripeset. In Figure 11, the base stripeset [1, 3, 6, 7] is com-
prised of distinct distances 2, 3, 1, and 10. As we can see, any
one, two or three accumulative distances are impossible to be
equal to any other existing distance, which guarantees adding
any i will not yield more than one overlapping disk with any
previously generated stripesets. Utilizing these methods, G-
SODP is able to generate 16 single overlap stripesets instead
of the 20 generated by O-SODP. Note that, sometimes it’s
not always feasible to have any x accumulative distances that
are different, given this we ﬁrst ensure that one accumulative
distance is different,
then the two accumulative distances
different and so on, which maximally reduces the multiple
overlaps among stripesets.
Algorithm 2 presents the greedy algorithm pseudocode to
generate base stripesets. Suppose a base stripeset contains