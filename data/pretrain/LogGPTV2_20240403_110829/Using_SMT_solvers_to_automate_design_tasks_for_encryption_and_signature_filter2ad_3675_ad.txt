whether it can ﬁnd a solution or if it can determine that no
such solution exists. If no solutions exist, then the signature
is indeed partitioned. Stated more precisely, does there exist
a σ(cid:48)
1 (cid:54)= σ1 such that the following condition holds:
Verify(pk , m, (σ1, σ2)) = 1 ∧ Verify(pk , m, (σ(cid:48)
At a high-level, our goal is to evaluate the pairing-based
veriﬁcation algorithms in a way that allows us to ﬁnd a
contradiction to the aforementioned condition. Recall that
the bilinearity property of pairings states that e(ga, gb) =
e(g, g)ab holds for all a, b ∈ Zq where g ∈ G. We observe
that pairings can be modeled as an abstract function that
performs multiplication in the exponent. Because the rules
of multiplication and addition hold in the exponent, we can
abstractly reduce pairings to basic integer arithmetic.
To accomplish this, we leverage Z3 to model the bilinear-
ity of pairings so that it is possible to automatically evalu-
ate them. Our partition checker relies on Z3’s uninterpreted
functions and universal quantiﬁers to reduce pairing product
equations to simpler equations over the exponents. However,
this reduction alone is not suﬃcient to completely evaluate
the veriﬁcation equations as required for detecting a parti-
tioned signature. To satisfy the property 2 condition, we
also need a way to evaluate these equations on all possible
inputs. Z3 was less suited for this task and instead, we em-
ploy the Mathematica scripting framework to evaluate such
equations. Our solution consists of ﬁve steps:
Step 1: Decompose Veriﬁcation Equations. To model
pairings using an SMT solver, we encode the veriﬁcation
equations into a form that the solver can interpret. The
ﬁrst phase extracts the veriﬁcation equations in SDL, then
decomposes the equations in terms of the generators and
exponents used. We leverage recent term rewriting exten-
sions introduced in the SDL Parser by Akinyele et al. [4].
406Signature
CL04 [24, §3.1] Symmetric (SS1536)
Symmetric (SS1536)
Asymmetric (BN256) [Min. SIG]
BB Short [17, §3] Symmetric (SS1536)
Symmetric (SS1536)
Asymmetric (BN256) [Min. PK]
WATERS05 [56, §4] Symmetric (SS1536)
Symmetric (SS1536)
Asymmetric (BN256) [Min. SIG]
Sign•
169.8 ms
192.0 ms
3.4 ms
21.5 ms
62.8 ms
5.0 ms
47.9 ms
88.7 ms
6.5 ms
Security
EU-CMA
SU-CMA
SU-CMA
EU-CMA
SU-CMA
SU-CMA
EU-CMA
SU-CMA
SU-CMA
WU-CMA
WU-CMA
Verify•
316.6 ms
387.8 ms
56.8 ms
102.1 ms
142.8 ms
18.3 ms
195.2 ms
236.4 ms
62.9 ms
896.8 ms
129.2 ms
1307 ms
279.9 ms
WATERS09 [58, §6.1] Symmetric (SS1536)
Asymmetric (BN256) [Min. PK/SIG]
ACDKNO12 [1, §5.3] Symmetric (SS1536)
•Average time measured over 100 test runs and the standard deviation in all test runs were within ±1% of the average.
∗Refers to the approximate size of public parameters used in veriﬁcation.
†Estimates do not include the public parameters for the Water’s hash.
Asymmetric (BN256) [Min. PK/SIG/Exp]
258.5 ms
13.6 ms
346.4 ms
23.3 ms
RMA
RMA
Time
Approx. Size
Public Key∗
3072 bits
4608 bits
2048 bits
7680 bits
9216 bits
3840 bits
4608 bits†
6144 bits†
2560 bits†
23040 bits
12544 bits
23040 bits
3840 bits
Signature
4608 bits
6144 bits
1024 bits
3072 bits
4608 bits
1536 bits
3072 bits
4608 bits
768 bits
13824 bits
5376 bits
12288 bits
8192 bits
Num.
Solutions
2
2
8
256
1024
Figure 5: We show the result of AutoGroup and AutoStrong on signature schemes. For CL, BB, and
Waters (with length of identities, (cid:96) = 128), we ﬁrst apply AutoStrong to determine that the signature scheme
is partitioned, then apply the BSW transform to obtain a strongly unforgeable signature in the symmetric
setting. We then feed this as input to AutoGroup to realize an asymmetric variant under a given optimization.
We also tested AutoStrong on the DSE signature and ACDK structure-preserving signature, even though
these are not known to be existentially unforgeable. A partition was found for ACDK, but not DSE.
Their techniques allow us to keep track of how variables are
computed in terms of the generators and exponents. With
knowledge of how each variable is computed, we are able to
fully decompose each equation in an automated fashion.
Our technique for modeling pairings in Z3 requires that
decomposition of veriﬁcation equations be guided by a few
rules. First, generators must be rewritten in terms of some
base generator, g, if the scheme is speciﬁed in the symmetric
setting.7 For example, the random generator a ∈ G chosen
in CL would be represented as ga(cid:48)
for a(cid:48) ∈ Zq. Second,
hashing statements of the form v = H(m) where v ∈ G are
rewritten as gv(cid:48)
for some v(cid:48) ∈ Zq.8 Third, we do not de-
compose any variable designated as σ1 for the purposes of
determining whether a signature is partitioned. The intu-
ition is that since σ(cid:48)
1 variables are adversarially controlled we
also treat σ1 as a black box. Finally, whenever we encounter
signatures that compute a product over a list of elements –
as in the case of the Waters hash, for example [56] – we re-
quire the user to provide an upper bound on the number of
elements in this list (if known) so that we can “unroll” the
product calculation and further apply our rules. When all
the above reduction rules are automatically applied to the
CL signature, we obtain the following equations:
e(a, Y ) = e(g, b) becomes e(ga(cid:48)
e(X, a) · e(X, b)m = e(g, c) becomes
, gy) = e(g, (ga(cid:48)
)y)
e(gx, ga(cid:48)
) · e(gx, (ga(cid:48)
)y)m = e(g, gc(cid:48)
)
Note that c(cid:48) denotes the σ1 for CL and is a free variable. All
other variables that comprise m, pk, and σ2 are ﬁxed.
Step 2: Encode Rules for Evaluating Pairings. Once
we have decomposed the veriﬁcation equation as shown above,
the next step is to encode the equations in terms that Z3 can
7The same would apply for asymmetric pairings except that
we would specify G1 generators in terms of a base generator
g1 and G2 in terms of g2.
8Note that this term re-writing is used only to determine
whether a solution exists. The actual variables a(cid:48) and v(cid:48)
would not (necessarily) be known in the real protocol.
understand. After the pairing equations are rewritten en-
tirely using the base generator, we can model the behavior
of pairings by simply focusing on the exponents. To cap-
ture the bilinearity of pairings, we rely on two features in
Z3: uninterpreted functions and universal quantiﬁers. As
mentioned earlier, uninterpreted functions enable one to ab-
stractly model a function’s behavior. Our model of a pair-
ing is an uninterpreted function, E, that takes two integer
variables and has a few mathematical properties. First, we
deﬁne the multiplication rule as ∀s, t : E(s, t) = s·t. Second,
we deﬁne the addition rule as ∀s, t, u : E(s+t, u) = s·u+t·u.9
Third, we adhere to the multiplicative notation in SDL and
convert pairing products deﬁned in terms of multiplication
to addition and division to subtraction.
These rules are straightforward and suﬃcient for evalu-
ating pairings. Moreover, by deﬁning exponents in terms
of integers, Z3 can apply all the built-in simpliﬁcation rules
for multiplication and addition. As a result, the solver uses
these rules to reduce any pairing-based veriﬁcation equation
into a simpler integer equation.
To automatically encode the equations, we ﬁrst simplify
the decomposed pairing equation as much as possible using
previous techniques [4]. Then, we convert each pairing to
the modeled pairing function, E and remove the base gener-
ators. Upon simplifying and encoding the decomposed CL
equations, we obtain the following:
e(ga(cid:48)
e(gx, ga(cid:48)
)y) becomes E(a(cid:48), y) = E(1, a(cid:48) · y)
)y)m = e(g, gc(cid:48)
, gy) = e(g, (ga(cid:48)
) · e(gx, (ga(cid:48)
E(x, a(cid:48)) + E(x · m, a(cid:48) · y) = E(1, c(cid:48))
) becomes
Step 3: Execute SMT Solver. After encoding the pair-
ing functions in terms of E, the next step is to employ the
solver to evaluate it. We ﬁrst specify our rules in the SMT
solver then evaluate these rules on each input equation. The
result is a simpliﬁed integer equation representation of the
veriﬁcation algorithm. For the above CL formulas, the solver
determines that the ﬁrst equation is true for all possible in-
9Similarly, E(s, t + u) = s · t + s · u
407puts because a(cid:48) and y are ﬁxed variables. For the second
equation, the solver produces: a(cid:48) · x + a(cid:48) · x · m · y = c(cid:48).
c
(cid:48)(cid:48) ∧ a
(cid:48) ∧ a
(cid:48) · x + a
(cid:48) · x + a
(cid:48) · x · m · y = c
Step 4: Evaluate equations. At this point, we have ob-
tained the integer equation version of the veriﬁcation equa-
tion; we can now concretely express the conditions for prop-
erty 2. That is,
(cid:48) (cid:54)= c
(cid:48) · x · m · y = c
(cid:48)(cid:48)
We use Mathematica to prove that no such c(cid:48)(cid:48) exists as-
suming the veriﬁcation condition is correct via the Mathe-
matica Script API. In particular, we utilize the F indInstance
function to mathematically ﬁnd proof over non-zero real
numbers then subsequently try ﬁnding a solution over in-
tegers.
If no such solution exists, the F indInstance will
return such a statement and the result is interpreted as an
indicator that the signature is partitionable. Otherwise, the
signature may not be partitionable.
1 (cid:54)= σ1 and veriﬁes over ﬁxed variables.
During this step, we make an explicit assumption that the
veriﬁcation condition is mathematically correct. Suppose
that this was not the case. In this scenario, our technique
would also determine that it is not possible to ﬁnd a σ(cid:48)
1 such
that σ(cid:48)
In reality,
however, no σ1 and σ2 pair can produce a valid signature
because the veriﬁcation equation does not hold for any in-
put. To limit the possibility of such scenarios, our partition
checker oﬀers a sanity check on the correctness of the input
veriﬁcation equations.
By relaxing the rule for decomposing the variables that are
designated as σ1 in Step 1, we can evaluate the veriﬁcation
equation over all inputs using Mathematica. For the CL
signature, a full decomposition would produce the following
equation in the exponent:
(cid:48) · x + a
(cid:48) · x · m · y = a
(cid:48) · (x + x · m · y)
a
It is suﬃcient to leverage the Simplif y function within Math-
ematica to evaluate that this holds for all possible inputs.
Since Mathematica has built-in techniques for solving equa-
tions of this sort, it becomes trivial to show that the above
equation is correct in all cases (due to the law of distribu-
tion). We subsequently inform the user on the output of this
sanity check, which is useful for determining the correctness
of SDL signature descriptions.
Step 5: Apply Transformation. Once the partition
checker determines whether the signature is partitioned or
not, we apply the eﬃcient BSW transform if deemed parti-
tioned or the less-eﬃcient BS transform if not as described
in Section 4.1. We elaborate further in the full version.
4.3 Security Analysis of AutoStrong
The theoretical security of the unforgeable-to-strongly-
unforgeable transformations that we use in AutoStrong were
previously established in [14, 15, 22], as discussed in Sec-
tion 4.1.10 The security of the BSW transform only holds,
however, if the input scheme is partitioned. Our partition
test allows false negatives, but not false positives. That is,
10Perfect correctness is assumed in these transformations.
All schemes tested have perfect correctness, except the Wa-
ters DSE signatures [57]. With a negligible probability, the
veriﬁcation algorithm of this scheme will reject an honestly-
generated signature. After applying the BS transformation
to the DSE scheme, this negligible error probability is car-
ried over in the veriﬁcation of the strongly-secure scheme.
our algorithm may fail to identify a scheme as partitioned
even though it is, which results in a less eﬃcient ﬁnal scheme,
but it will not falsely identify a scheme as partitioned when
it is not, which would result in a security failure. To see why
this claim holds, consider that the partition tester guesses a
partition, Z3 interprets the veriﬁcation equation as a system
of equations, and then Mathematica ﬁxes the variables on