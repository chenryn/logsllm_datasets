# Title: PriReMat: A Distributed Tool for Privacy-Preserving Record Linking in Healthcare

## Authors:
- Diptendu Mohan Kar, Colorado State University
- Ibrahim Lazrig, Colorado State University
- Indrajit Ray, Colorado State University
- Indrakshi Ray, Colorado State University

## Abstract
Medical institutions must comply with various federal and state policies when sharing sensitive medical data. Traditionally, this is achieved by sanitizing identifying information from individual records. However, such sanitization removes the ability to link records belonging to the same patient across multiple institutions, which is essential for medical cohort discovery. Currently, human honest brokers manage non-sanitized data and manually facilitate cohort discovery, a process that is slow, error-prone, and vulnerable to breaches. In this work, we introduce PriReMat, a toolset for privacy-preserving record linkage. The underlying protocol is based on strong security primitives, and we describe its distributed implementation over untrusted machines and networks.

## 1. Introduction
PriReMat is a distributed application designed to perform privacy-preserving record linkage in the healthcare sector. It is executed by a group of healthcare providers who are willing to share (or publish) patient-related data, and a group of healthcare researchers (subscribers) who need the data without personally identifying information but require the ability to link records belonging to the same patient. PriReMat uses a semi-trusted third party (broker) to facilitate record linkage. The broker automatically and blindly performs record matching on encrypted data, following the protocol correctly but not trusted to keep secrets. PriReMat ensures that the broker cannot gain useful information without colluding with publishers. This work builds upon and addresses a security weakness in our earlier research [6].

## 2. Implementation
PriReMat is implemented using Oracle's Java technology. We utilized the following packages from the Java Development Kit (JDK) 1.8.0_131: `java.io`, `java.math`, `java.net`, `java.sql`, and `java.util`. MySQL serves as the database management system. The three main components of PriReMat—Broker, Publisher, and Subscriber—are independent and coordinate via message passing. When distributed over a network, any host can function as one of these components. The databases for the broker and publisher need to be configured during installation. Publishers and subscribers must execute a protocol to determine the IP address of the broker.

In this implementation, we use the El-Gamal cryptosystem, leveraging its multiplicative homomorphic property. Since no existing APIs for El-Gamal implement this property, we designed the entire cryptosystem from scratch. We plan to release this new API to the public domain via GitHub.

## 3. Related Work
Privacy-preserving data sharing has been extensively studied, particularly in the context of sharing information from databases controlled by multiple parties. In our setting, competing publishers do not want to reveal any information about their data to each other but still wish to anonymously and securely share some information with the subscriber. Additionally, the subscriber is interested in querying data jointly across multiple databases and retrieving updates about previously queried entities (retrospective queries).

Searchable encryption schemes that require data to be encrypted under the same key [2, 7, 8] are not directly applicable. Private set intersection [4, 5] and multi-party computation are potential solutions but are inefficient for large datasets. Yin and Yau [9] propose a privacy-preserving repository for data integration, but it requires mandatory secret sharing, which is not acceptable in our setup. Carbunar and Sion [1] and Chow et al. [3] also have limitations, as they do not support retrospective queries.

## 4. PriReMat Scheme Construction
Our scheme operates in three phases: setup, encryption of query results, and secure record matching.

### Setup Phase
The setup phase generates key converters for publishers, allowing the broker to transform encrypted data into another encrypted form with a different key without decryption. Each publisher collaborates with others to generate its key converter. When a new publisher joins, it undergoes the setup phase. Existing publishers participate if key refreshing is needed. These key converters are delegated to the broker and used to convert records encrypted under different keys to a common key, which cannot be reconstructed by any party without collusion.

### Encryption of Query Results
This phase is triggered by a subscriber's query. Publishers encrypt the identifying parts of the query results using the ElGamal cryptosystem, which relies on DDH or DL hardness assumptions. Each record includes the encrypted identification part and other client information. Sanitization techniques, if necessary, are applied before sending the data to the broker.

### Secure Record Matching
The broker receives encrypted identifiers from different publishers and merges similar clients' records, mapping them to a new identifier. The broker uses key converters to change encryption keys, ensuring similar data is deterministically encrypted with the same key. The broker maintains mappings between publishers' data records and randomly generated identifiers for subscribers, ensuring that subscribers cannot determine shared clients and that the broker can map back to the original client.

## 5. Addressing Security Weakness of Earlier Work
Our previous work [6] had a security weakness: after the setup phase, each publisher's key-converter and encryption key remained static unless the setup phase was re-executed. This allowed the broker to infer repeated requests by studying incoming encrypted records. In PriReMat, we address this by adding a step in the encryption of query results phase. After setup, when a publisher receives a query, it chooses a new random number, encrypts it with the broker's public key, and homomorphically multiplies it with its existing key-converter. This ensures that even the same record, when fetched multiple times, results in different ciphertext but can still be matched.

## 6. Implementation Details
PriReMat consists of three independently executing components: Broker, Publisher, and Subscriber. We assume one instance of the Broker running, but multiple instances of the Publisher and Subscriber. Each component executes as a multi-threaded process, and all communications are event-based. The broker listens on a specified port, and publishers and subscribers register with the broker by providing their IP address and port. The broker maintains a list of connected publishers and subscribers.

During the setup phase, the broker sends a setup initiate request to active publishers, sharing cryptographic primitives and neighbor information. Publishers create a setup forward request and pass it to their neighbors. When the setup forward message returns to the originating publisher, it confirms the creation of its key-converter and sends a setup completed message to the broker.

When a subscriber queries the broker, the broker forwards the query to the relevant publishers. Publishers encrypt the records and send them back to the broker along with their key-converter. The broker re-encrypts the records and compares them to find common records, then sends the result to the subscriber. For retrospective queries, the subscriber provides the re-encrypted ID, and the broker retrieves the requested information from the publishers.

## 7. Acknowledgements
This work was partially supported by the U.S. NSF CNS under Grant No. 1650573, NIST under Grant No. 60NANB16D250, University of Colorado Anschutz Medical Center, CableLabs, Furuno Electric Company, and SecureNok.

## 8. Conclusions
This work introduces PriReMat, a software tool for privacy-preserving record linkage in the healthcare sector, eliminating the need for manually participating honest brokers. PriReMat is a fully distributed application, easily portable to any architecture supporting Java. A secondary contribution is the development of an API for the El-Gamal cryptosystem, enabling the use of its multiplicative homomorphic property. We have tested PriReMat on synthetic datasets and are currently working with the Anschutz Medical Center of the University of Colorado, Denver, to field test it on live data.

## References
[1] B. Carbunar and R. Sion. 2012. Toward private joins on outsourced data. Knowledge and Data Engineering, IEEE Transactions on 24 (2012), 1699–1710.
[2] M. Chase and S. Kamara. 2010. Structured encryption and controlled disclosure. In Proceedings of the 16th International Conference on the Theory and Application of Cryptology and Information Security. Singapore, 577–594.
[3] S. S. Chow, J. H. Lee, and L. Subramanian. 2009. Two-party computation model for privacy- preserving queries over distributed databases. In Proceedings of the 2009 Network and Distributed System Security Symposium. San Diego, CA, USA.
[4] D. Dachman-Soled, T. Malkin, M. Raykova, and M. Yung. 2012. Efficient robust private set intersection. International Journal of Applied Cryptography 2 (2012), 289–303.
[5] S. Kamara, P. Mohassel, M. Raykova, and S. Sadeghian. 2013. Scaling private set intersection to billion-element sets. Technical Report. MSR-TR-2013-63.
[6] I. Lazrig, T. Moataz, I. Ray, I. Ray, T. Ong, M. G. Kahn, F. Cuppens, and N. Cuppens-Boulahia. 2015. Privacy Preserving Record Matching Using Automated Semi-trusted Broker. In Proceedings of the 29th IFIP TC 11, WG 11.3 Conference on Data and Applications Security and Privacy. DBSec 9149 (2015), 103–118.
[7] E. Stefanov, M. van Dijk, E. Shi, C. W. Fletcher, L. Ren, X. Yu, and S. Devadas. 2013. Path ORAM: an extremely simple oblivious RAM protocol. In ACM Conference on Computer and Communications Security. 299–310.
[8] M. Strizhov and I. Ray. 2014. Multi-keyword similarity search over encrypted cloud data. In Proceedings of 29th IFIP TC 11 International Conference, Marrakech, Morocco. 52–65.
[9] S. Yau and Y. Yin. 2008. A privacy preserving repository for data integration across data sharing services. Services Computing, IEEE Transactions on 1 (2008), 130–140.