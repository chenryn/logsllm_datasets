$stmt=qq{
VALUES(？,？,？)
INSERT INTO member (last_name,first_name,expiration)
VALUEs($last,$first,$expiration)
INSERT INTO member (last_name,first_name,expiration)
=qq(
=$sth->(TraceLevel);
，当你对脚本存在的问题比较清楚，不想浪费时间去看大段的
#获得语句句柄跟踪级别
#设置数据库句柄跟踪级别
#启用对语句的跟踪
8.2Perl DBI概述
311
---
## Page 332
方面来讲，它们又能让你更加容易地获得想要的信息。
里使用了MySQL 特有的属性，则你的脚本可能存在无法移植到其他数据库的风险。但从另一
而有些则是DBD:mysql（DBI提供的MySQL驱动程序）专为MySQL提供的属性。这类专月
些属性是所有数据库驱动程序都有的标准DBI属性（如NUM_OF_FIELDS，即结果集里的列数）
息。为获得这些信息，需要访问与生成结果集的那个查询相关联的语句句柄的属性。其中，有
8.2.11使用结果集元数据
是极不可取的！
加到那个跟踪文件末尾（而不是覆盖它），因此如果不加注意，那么这个文件可能会变得非常大。
程序里启用了文件跟踪功能，那么千万要记得在解决问题之后禁用它。由于调试输出会一直追
文件。下面是一些示例，用的是tcsh语法。
会输出到指定文件；如果它为n=file_name，则启用级别为n的跟踪，调试信息会输出到指定
的跟踪，调试信息会输出到STDERR；如果它为一个文件名，则启用级别为2的跟踪，调试信！
里设置环境变量DBI_TRACE。设置语法与所使用的 shel1程序有关。
312
性，如 mysql_max_length，即各列值的最大宽度，不适用于其他数据库系统。如果在脚本
此，在 shell启动文件（如.cshrc、.tcshrc、.login或.profile）里定义DBI_TRACE,
DBI提供了对结果集元数据的访问，这里的元数据是有关查询命令所选取的行的描述性信
其中，value的格式对于所有shell程序都一样：如果它为一个数字n，则启用级别为，
口对于csh或tcsh：
如果想启用全局跟踪，使它能够对你所运行的所有脚本产生影响，那么可以在 shel1程序
口对于Windows系统：
口对于 sh、bash 或ksh;
口对于csh或tcsh：
使用下面这些命令，可以关闭用于各种命令解释器的DBI_TRACE。
使用DBI_TRACE的好处在于，不用修改脚本便能启用跟踪调试机制。但是，如果在shel1
口跟踪级别为2，输出到trace.out文件：
口跟踪级别为1，输出到trace.out文件：
口跟踪级别为1，输出到STDERR：
口对于Windows系统：
口对于sh、bash或ksh：
setenv DBI_TRACE trace.out
setenv DBI_TRACE 1=trace.out
setenvDBI_TRACE1
C:\>set DBI_TRACE=value
$ export DBI_TRACE=value
C:\> set DBI_TRACE=
C:\>unset DBI_TRACE
$ export DBI_TRACE=0
%unsetenv DBI_TRACE
setenv DBI_TRACEO
setenvDBI_TRACEvalue
第8章用Per DBI编写MySQL程序
用
息
---
## Page 333
免出现输出不整齐的问题，需要在列名比列中的数据值更宽时，增加列宽值。
包含的每一个元素都对应着结果集的各个列，而它们的排列顺序与这些列在语句里的顺序相同。
max_length)则分别表示列名和每一个列值的最大宽度。这两个属性的值都是数组引用，其中
FIELDS}是一个标量，它表示结果集里有多少个列。$sth->{NAME}和$sth->{mysql_
的语句无关。
box_out.pl的主体部分。你可以把其中的 SELECT语句替换为其他语句。这个输出例程与具体
报
把这几个属性提供的信息综合起来编写一个脚本box_out.pl，让它根据SELECT查询生成输出
的属性NUM_OF_FIELDS（即结果集里的列数）和NAME（用于保存列名）一起使用。我们可以
告，输出报告的表格样式，与以交互式模式运行的客户端程序mysql的一样。下面是
后，才可以使用 SELECT语句的结果集属性。此外，在使用某个行获取函数到达结果集的末
剩下的计算，与第7章开发的那个éxec_stmt 程序所使用的计算大同小异。例如，为避
输出函数 print_dashes（)和print_row(），也与 exec_stmt 里的相应代码相似;
my $sth = $abh->prepare (qq{
下面的示例演示的是，如何把MySQL特有的元数据属性mysql_max_length，与更为通用
sub print_dashes
在使用execute（)初始化语句之后，
print_dashes (\@wid,$ncols）;
while (my $ary_ref = $sth->fetchrow_arrayref ())
#以表格形式输出结果
my $ncols = $sth->{NUM_OF_FIELDS);
$sth->execute（）；#在此调用之后，各个属性便应该可用了
你必须在正确的时间参考访问元数据。一般情况下,只有在调用完 prepare（)和 execute（)
print_dashes(\@wid,$ncols);
print_row （Ssth->(NAME),
print_dashes
结果集里的列数
$wid_ary_ref= shift;
如果数据值比列标题窄，或者比单词"NULL"窄（对于NULL列），
结果集里各个列值的实际最大宽度
for(my $i=0;$i[$i]+2);
$cols = shift;
（my$i=0;$i{mysql_max_length}};
4 ifSsth->(NULLABLE}->[Si]88Swid[$i]{NUM_OF
#短划线行
#行数据
牛
#短划线行
短划线行
题
8.2Perl DBI 概述
313
---
## Page 334
签，
的条目：
在下面两条命令里，第一条会显示23号成员的条目，第二条会显示出那些姓以字母“C”开头
如果给定了某位成员的姓，那么这个脚本将会像下面这样显示查询到的条目：
，并使用NUM_OF_FIELDS 属性来弄清结果集包含多少个列：
下面是脚本 show_member.pl 的主体部分。它会使用 NAME 属性来确定各输出行所用的标
%./show_member.pl 23
在执行show_member.pl脚本时，也可以使用成员编号，或者使用匹配多个姓的 SQL模式。
zip:
state:
city:
expiration:2016-04-16
suffix:
member_id:
%./show_member.plartel
我们的下一个脚本将利用列的元数据来产生另一种格式的输出。
email:
last_name:
tabular.pl脚本的输出如下所示：
uu
sub print_row
# print row of data.
last_name
Carter
Bush
Bush
Buchanan
Arthur
Adams
Adams
print"I\n";
for（my $i=0;$i[$i]) ? $val_ary_ref->[$i] : "NULL";
shift;
shift;
(doesn't right-align numeric columns)
.W.
#
列数
对
对列值数组的引用
suffix|city
Jr.
NULL
NULL
NULL
NULL
NULL
宽数组的引用
Plains
New Haven
Milton
Mercersburg
Fairfield
Braintree
Braintree
Istate l
。这个脚本为 show_
---
## Page 335
其中，WHERE FALSE子句对所有行来说结果都为 FALSE，因此这条语句的执行效果是，在不返
今后增加或者删除了某些列，这个脚本也无需进行修改便能工作。
*检索出所有的列，再利用 NAME 属性来找出具体的列；采用这种方式之后，即使 member 表在
SELECT *FROM tbl_name WHERE FALSE
如果你只想知道表里到底有哪些列，而不打算检索其中的行，那么可以使用下面这条语句：
show_member.pl的目的是显示一个条目的所有内容，不管它有多少个字段。先使用sELECT
while(@ARGV)
$sth->execute
my$sth=$dbh->prepare(qq(
#执行查询
$clause ="member_id=
my $arg = shift (@ARGV）;
Scount =0;
#在第2个及后续条目之前输出换行
读取并显式查询结果
print
foreachmy $label(@label)
@label =@($sth->(NAME}};
并
把获取到的列名用作标签，
++$matches;
foreach (my $i= O; $i (NUM_OF_FIELDS};$i++)
print "\n";
$label_wid = length ($label) if $label_wid 1;
列标签数组
则输出其中的值
$label_wid+1,$label[$i].":";
*FROM member
LIKE“
. $dbh->quote ($arg) if $arg =~ /^\d+$/;
, first_name
.$dbh->quote
($arg);