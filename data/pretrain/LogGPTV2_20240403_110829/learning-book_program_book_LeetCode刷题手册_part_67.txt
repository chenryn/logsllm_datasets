·将二维数组中的每个元素变为周围9个元素的平均值。
·简单题，按照题意计算平均值即可。需要注意的是边界问题，四个角和边上的元素，这些点计算平
均值的时候，计算平均值都不足9个元素。
代码
package leetcode
func imageSmoother(M [][]int) [][]int {
res := make([][]int, 1en(M))
for i := range M {
res[i] = make([]int, len(M[o]))
for y := 0; y = 0 {
sum += M[y-1][x]
count++
// check left
if x-1 >= 0 {
sum += M[y][x-1]
count++
// check Right
if x+] = 0 && x-1 >= 0 {
sum += M[y-1][x=1]
count++
// Top Right
if y-1 >= 0 && x+1 = 0 {
sum += M[y+1][x-1]
count++
//Bottom Right
if y+1  newVal {
1eft = &newval
if right == nil 11*right  newval {
1eft = &newVa1
if right == nil 11 *right >1
if counterKthNum(m, n,mid) >= k {
high = mid
}else{
1ow = mid + 1
return low
func counterKthNum(m, n,mid int) int {
count := 0
for i := l; i <= m; i++ {
count += int(math.Min(math.F1oor(float64(mid) /f1oat64(i)), f1oat64(n)))
return count
676.ImplementMagicDictionary
题目
Implement a magic directory with bui1dpict, and search methods.
For the method bui 1doict, you'll be given a list of non-repetitive words to build a dlictionary.
For the method search, you'll be given a word, and judge whether if you modify exactly one
character into anothercharacter in this word, the modified word is in the dictionary you just
built.
Example 1:
Input: buildDict(["hello", "leetcode"]), Output: Nu11
Input: search("hello"), Output: False
Input: search("hhllo"), Output: True
Input: search("hel1"), Output: False
Input: search("leetcoded"), Output: False
Note:
z sanal asamo go ssisuo ae sndui au le se ansse e no 
---
## Page 656
2. For contest purpose, the test data is rather small by now. You could think about highly
efficient algorithm after the contest.
static/class variables are persisted across multiple test cases. Please see here for more
dletails.
题目大意
单词来构建一个字典。对于search方法，你将被给定一个单词，并且判定能否只将这个单词中一个字
母换成另一个字母，使得所形成的新单词存在于你构建的字典中。
解题思路
·实现MagicDictionary的数据结构，这个数据结构内会存储一个字符串数组，当执行Search
操作的时候要求判断传进来的字符串能否只改变一个字符（不能增加字符也不能删除字符）就能变成
MagicDictionary 中存储的字符串，如果可以，就输出true，如果不能，就输出false。
·这题的解题思路比较简单，用Map判断即可。
代码
package leetcode
type MagicDictionary struct {
rdict map[int]string
/* Initialize your data structure here.*/
func Constructor676C) MagicDictionary {
return MagicDictionary{rdict: make(map[int]string)}
/*# Build a dictionary through a list of words */
func (this *MagicDictionary) Buildpict(dict []string) {
for k, v := range dict {
this.rdict[k] = V
/ Returns if there is any word in the trie that equals to the given word
after modifying exactly one character */
func (this *MagicDictionary) Search(word string) bool{
for _,v := range this.rdict {
n := 0
if 1en(word) == len(v){
for i := 0; i < 1en(v); i++ {
---
## Page 657
if word[i] !=v[i] {
n += 1
！
if n ==1{
return true
return false
/**
obj:=ConstructorO;
*obj.BuildDict(dict);
* param_2 := obj.Search(word);
*/
682.BaseballGame
题目
You're now a baseball game point recordler.
Given a list of strings, each string can be one of the 4 following types:
1. Integer (one round's score): Directly represents the number of points you get in this round.
2. "+" (one round’s score): Represents that the points you get in this round are the sum of the
last two valid round’s points.
3. "D" (one round’s score): Represents that the points you get in this round are the dloubled
data of the last valid round's points.
4. "C" (an operation, which isn’t a round’s score): Represents the last valid round's points you
get were invalid and should be removed.
Each round’s operation is permanent and could have an impact on the round before and the
round after.
You need to return the sum of the points you could get in all the rounds.
Example 1:
---
## Page 658
Input: ["5", "2","c”,"D","+"]
Output: 30
Exp1anation:
Round 1: You could get 5 points. The sum is: 5.
Round 2: You could get 2 points. The sum is: 7.
Operation 1: The round 2's data was invalid. The sum is: 5.
Round 3: You could get 10 points (the round 2's data has been removed). The
sum is: 15.
Round 4: You could get 5 + 10 = 15 points. The sum is: 30.
Example 2:
Input: ["5","2","4","","","9","+","+"]
Output: 27
Explanation:
Round 1: You could get 5 points. The sum is: 5.
Round 2: You could get -2 points. The sum is: 3.
Round 3: You could get 4 points. The sum is: 7.
Operation 1: The round 3's data is invalid. The sum is: 3.
Round 4: You could get -4 points (the round 3's data has been removed). The
sum is: -1.
Round 5: You could get 9 points. The sum is: 8.
Round 6: You could get -4 + 9 = 5 points. The sum is 13.
Round 7: You could get 9 + 5 = 14 points. The sum is 27.
Note:
●The size of the input list will be between 1 and 1000.
● Every integer represented in the list will be between -30000 and 30000.
题目大意
这道题是模拟题，给一串数字和操作符。出现数字就直接累加，出现“C”就代表栈推出一个元素，相应
的总和要减去栈顶的元素。出现“D"就代表把前一个元素乘以2，就得到当前的元素值。再累加。出现
"+”就代表把前2个值求和，得到当前元素的值，再累积。
解题思路
这道题用栈模拟即可。
代码
---
## Page 659
package leetcode
import "strconv"
func calpoints(ops []string) int {
stack := make([]int,len(ops))
top:= 0
for i:= 0; i< len(ops); i++{
op := ops[i]
switch op {
case "+":
lastl := stack[top-1]
last2 := stack[top-2]
stack[top] = lastl + last2
++do4
case "D":
last] := stack[top-1]
stack[top]=last1 * 2
++do4
case "c":