c_char, c_wchar
char, wchar_t
||||||||||||||||||||
||||||||||||||||||||
c_byte, c_ubyte
char, unsigned char
c_short, c_ushort
short, unsigned short
c_int, c_uint
int, unsigned int
c_long, c_ulong
long, unsigned long
c_longlong, c_ulonglong long long, unsigned long long (typically 64 bit)
c_float, c_double
float, double
c_char_p, c_wchar_p
char*, wchar_t* (NUL terminated strings)
c_void_p
void* (generic pointer)
To specify the return type, we can assign a data type to the lib.name.restype property. For
example, Listing 8-25 shows how to call get_hello(), which returns a pointer to a string.
# Before setting return type
print lib.get_hello()
>>> -1686370079
# After setting return type
lib.get_hello.restype = c_char_p
print lib.get_hello()
>>> Hello from C
Listing 8-25: Calling a method that returns a C string
If instead you want to specify the arguments to be passed to a method, you can set an
array of data types to the argtypes property. For example, Listing 8-26 shows how to call
add_longs() correctly.
# Before argtypes
lib.add_longs.restype = c_long
print lib.add_longs(0x100000000, 1)
>>> 1
# After argtypes
lib.add_longs.argtypes = [c_long, c_long]
print lib.add_longs(0x100000000, 1)
>>> 4294967297
Listing 8-26: Specifying argtypes for a method call
To pass a parameter via a pointer, use the byref helper. For example, add_numbers_result()
returns the value as a pointer to an integer, as shown in Listing 8-27.
i = c_int()
lib.add_numbers_result(1, 2, byref(i))
print i.value
>>> 3
Listing 8-27: Calling a method with a reference parameter
Technet24
||||||||||||||||||||
||||||||||||||||||||
Calling a Function with a Structure Parameter
We can define a structure for ctypes by creating a class derived from the Structure class and
assigning the _fields_ property, and then pass the structure to the imported method. Listing
8-28 shows how to do this for the say_struct() function, which takes a pointer to a structure
containing a string and a number.
class SimpleStruct(Structure):
  _fields_ = [("str", c_char_p),
              ("num", c_int)]
s = SimpleStruct()
s.str = "Hello from Struct"
s.num = 100
lib.say_struct(byref(s))
>>> Hello from Struct 100
Listing 8-28: Calling a method taking a structure
Calling Functions with Python on Microsoft Windows
In this section, information on calling unmanaged libraries on Windows is specific to 32-
bit Windows. As discussed in Chapter 6, Windows API calls can specify a number of
different calling conventions, the most common being stdcall and cdecl. By using cdll, all
calls assume that the function is cdecl, but the property windll defaults instead to stdcall. If a
DLL exports both cdecl and stdcall methods, you can mix calls through cdll and windll as
necessary.
NOTE
You’ll need to consider more calling scenarios using the Python ctypes library, such as how to
pass back strings or call C++ functions. You can find many detailed resources online, but this
section should have given you enough basics to interest you in learning more about how to use
Python to call unmanaged libraries.
Encryption and Dealing with TLS
Encryption on network protocols can make it difficult for you to perform protocol analysis
and reimplement the protocol to test for security issues. Fortunately, most applications
don’t roll their own cryptography. Instead, they utilize a version of TLS, as described at
the end of Chapter 7. Because TLS is a known quantity, we can often remove it from a
protocol or reimplement it using standard tools and libraries.
Learning About the Encryption In Use
Perhaps unsurprisingly, SuperFunkyChat has support for a TLS endpoint, although you
||||||||||||||||||||
||||||||||||||||||||
need to configure it by passing the path to a server certificate. The binary distribution of
SuperFunkyChat comes with a server.pfx for this purpose. Restart the ChatServer application
with the --server_cert parameter, as shown in Listing 8-29, and observe the output to ensure
that TLS has been enabled.
$ ChatServer  --server_cert ChatServer/server.pfx
ChatServer (c) 2017 James Forshaw
WARNING: Don't use this for a real chat system!!!
Loaded certificate, Subject=CN=ExampleChatServer➊
Running server on port 12345 Global Bind False
Running TLS server on port 12346➋ Global Bind False
Listing 8-29: Running ChatServer with a TLS certificate
Two indications in the output of Listing 8-29 show that TLS has been enabled. First,
the subject name of the server certificate is shown at ➊. Second, you can see that TLS
server is listening on port 12346 ➋.
There’s no need to specify the port number when connecting the client using TLS with
the --tls parameter: the client will automatically increment the port number to match.
Listing 8-30 shows how when you add the --tls command line parameter to the client, it
displays basic information about the connection to the console.
   $ ChatClient -–tls user1 127.0.0.1
   Connecting to 127.0.0.1:12346
➊ TLS Protocol: TLS v1.2
➋ TLS KeyEx   : RsaKeyX
➌ TLS Cipher  : Aes256
➍ TLS Hash    : Sha384
➎ Cert Subject: CN=ExampleChatServer
➏ Cert Issuer : CN=ExampleChatServer
Listing 8-30: A normal client connection
In this output, the TLS protocol in use is shown at ➊ as TLS 1.2. We can also see the
key exchange ➋, cipher ➌, and hash algorithms ➍ negotiated. At ➎, we see some
information about the server certificate, including the name of the Cert Subject, which
typically represents the certificate owner. The Cert Issuer ➏ is the authority that signed
the server’s certificate, and it’s the next certificate in the chain, as described in “Public Key
Infrastructure” on page 169. In this case, the Cert Subject and Cert Issuer are the same,
which typically means the certificate is self-signed.
Decrypting the TLS Traffic
A common technique to decrypt the TLS traffic is to actively use a man-in-the-middle
attack on the network traffic so you can decrypt the TLS from the client and reencrypt it
when sending it to the server. Of course, in the middle, you can manipulate and observe
the traffic all you like. But aren’t man-in-the-middle attacks exactly what TLS is supposed
Technet24
||||||||||||||||||||
||||||||||||||||||||
to protect against? Yes, but as long as we control the client application sufficiently well, we
can usually perform this attack for testing purposes.
Adding TLS support to a proxy (and therefore to servers and clients, as discussed
earlier in this chapter) can be a simple matter of adding a single line or two to the proxy
script to add a TLS decryption and encryption layer. Figure 8-1 shows a simple example of
such a proxy.
Figure 8-1: An example MITM TLS proxy
We can implement the attack shown in Figure 8-1 by replacing the template
initialization in Listing 8-5 with the code in Listing 8-31.
   var template = new FixedProxyTemplate();
   // Local port of 4445, destination 127.0.0.1:12346
➊ template.LocalPort = 4445;
   template.Host = "127.0.0.1";
   template.Port = 12346;
   var tls = new TlsNetworkLayerFactory();
➋ template.AddLayer(tls);
   template.AddLayer();
Listing 8-31: Adding TLS support to capture a proxy
We make two important changes to the template initialization. At ➊, we increment port
numbers because the client automatically adds 1 to the port when trying to connect over
TLS. Then at ➋, we add a TLS network layer to the proxy template. (Be sure to add the
TLS layer before the parser layer, or the parser layer will try to parse the TLS network
traffic, which won’t work so well.)
With the proxy in place, let’s repeat our test with the client from Listing 8-31 to see the
differences. Listing 8-32 shows the output.
   C:\> ChatClient user1 127.0.0.1 --port 4444 -l
   Connecting to 127.0.0.1:4445
➊ TLS Protocol: TLS v1.0
➋ TLS KeyEx   : ECDH
   TLS Cipher  : Aes256
   TLS Hash    : Sha1
   Cert Subject: CN=ExampleChatServer
||||||||||||||||||||
||||||||||||||||||||
➌ Cert Issuer : CN=BrokenCA_PleaseFix
Listing 8-32: ChatClient connecting through a proxy
Notice some clear changes in Listing 8-32. One is that the TLS protocol is now TLS
v1.0 ➊ instead of TLS v1.2. Another is that the Cipher and Hash algorithms differ from
those in Listing 8-30, although the key exchange algorithm is using Elliptic Curve Diffie–
Hellman (ECDH) for forward secrecy ➋. The final change is shown in the Cert Issuer ➌.
The proxy libraries will autogenerate a valid certificate based on the original one from the
server, but it will be signed with the library’s Certificate Authority (CA) certificate. If a CA
certificate isn’t configured, one will be generated on first use.
Forcing TLS 1.2
The changes to the negotiated encryption settings shown in Listing 8-32 can interfere
with your successfully proxying applications because some applications will check the
version of TLS negotiated. If the client will only connect to a TLS 1.2 service, you can
force that version by adding this line to the script:
tls.Config.ServerProtocol = System.Security.Authentication.SslProtocols.Tls12;
Replacing the Certificate with Our Own
Replacing the certificate chain involves ensuring that the client accepts the certificate that
you generate as a valid root CA. Run the script in Listing 8-33 in CANAPE.Cli to generate
a new CA certificate, output it and key to a PFX file, and output the public certificate in
PEM format.
generate_ca
_cert.csx
using System.IO;
// Generate a 4096 bit RSA key with SHA512 hash
var ca = CertificateUtils.GenerateCACert("CN=MyTestCA",
    4096, CertificateHashAlgorithm.Sha512);
// Export to PFX with no password
File.WriteAllBytes("ca.pfx", ca.ExportToPFX());
// Export public certificate to a PEM file
File.WriteAllText("ca.crt", ca.ExportToPEM());
Listing 8-33: Generating a new root CA certificate for a proxy
On disk, you should now find a ca.pfx file and a ca.crt file. Copy the ca.pfx file into the
same directory where your proxy script files are located, and add the following line before
initializing the TLS layer as in Listing 8-31.
CertificateManager.SetRootCert("ca.pfx");
Technet24
||||||||||||||||||||
||||||||||||||||||||
All generated certificates should now use your CA certificate as the root certificate.
You can now import ca.crt as a trusted root for your application. The method you use to
import the certificate will depend on many factors, for example, the type of device the
client application is running on (mobile devices are typically more difficult to
compromise). Then there’s the question of where the application’s trusted root is stored.
For example, is it in an application binary? I’ll show just one example of importing the
certificate on Microsoft Windows.
Because it’s common for Windows applications to refer to the system trusted root store
to get their root CAs, we can import our own certificate into this store and
SuperFunkyChat will trust it. To do so, first run certmgr.msc either from the Run dialog or a
command prompt. You should see the application window shown in Figure 8-2.
Figure 8-2: The Windows certificate manager
Choose Trusted Root Certification Authorities ▸ Certificates and then select
Action ▸ All Tasks ▸ Import. An import Wizard should appear. Click Next and you
should see a dialog similar to Figure 8-3.
||||||||||||||||||||
||||||||||||||||||||
Figure 8-3: Using the Certificate Import Wizard file import
Enter the path to ca.crt or browse to it and click Next again.
Next, make sure that Trusted Root Certification Authorities is shown in the Certificate
Store box (see Figure 8-4) and click Next.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 8-4: The certificate store location
On the final screen, click Finish; you should see the warning dialog box shown in
Figure 8-5. Obviously, heed its warning, but click Yes all the same.
NOTE
Be very careful when importing arbitrary root CA certificates into your trusted root store. If
someone gains access to your private key, even if you were only planning to test a single
application, they could man-in-the-middle any TLS connection you make. Never install
arbitrary certificates on any device you use or care about.
||||||||||||||||||||
||||||||||||||||||||
Figure 8-5: A warning about importing a root CA certificate
As long as your application uses the system root store, your TLS proxy connection will
be trusted. We can test this quickly with SuperFunkyChat using --verify with the
ChatClient to enable server certificate verification. Verification is off by default to allow
you to use a self-signed certificate for the server. But when you run the client against the
proxy server with --verify, the connection should fail, and you should see the following
output:
SSL Policy Errors: RemoteCertificateNameMismatch
Error: The remote certificate is invalid according to the validation procedure.
The problem is that although we added the CA certificate as a trusted root, the server
name, which is in many cases specified as the subject of the certificate, is invalid for the
target. As we’re proxying the connection, the server hostname is, for example, 127.0.0.1,
but the generated certificate is based on the original server’s certificate.
To fix this, add the following lines to specify the subject name for the generated
certificate:
Technet24
||||||||||||||||||||
||||||||||||||||||||
tls.Config.SpecifyServerCert = true;
tls.Config.ServerCertificateSubject = "CN=127.0.0.1";
When you retry the client, it should successfully connect to the proxy and then on to
the real server, and all traffic should be unencrypted inside the proxy.
We can apply the same code changes to the network client and server code in Listing 8-
6 and Listing 8-8. The framework will take care of ensuring that only specific TLS
connections are established. (You can even specify TLS client certificates in the
configuration for use in performing mutual authentication, but that’s an advanced topic
that’s beyond the scope of this book.)
You should now have some ideas about how to man-in-the-middle TLS connections.
The techniques you’ve learned will enable you to decrypt and encrypt the traffic from
many applications to perform analysis and security testing.
Final Words
This chapter demonstrated some approaches you can take to reimplement your application
protocol based on the results of either doing on-the-wire inspection or reverse engineering
the implementation. I’ve only scratched the surface of this complex topic—many
interesting challenges await you as you investigate security issues in network protocols.
||||||||||||||||||||
||||||||||||||||||||
9
THE ROOT CAUSES OF VULNERABILITIES
This chapter describes the common root causes of security vulnerabilities that result from
the implementation of a protocol. These causes are distinct from vulnerabilities that derive
from a protocol’s specification (as discussed in Chapter 7). A vulnerability does not have to
be directly exploitable for it to be considered a vulnerability. It might weaken the security
stance of the protocol, making other attacks easier. Or it might allow access to more
serious vulnerabilities.
After reading this chapter, you’ll begin to see patterns in protocols that will help you
identify security vulnerabilities during your analysis. (I won’t discuss how to exploit the
different classes until Chapter 10.)
In this chapter, I’ll assume you are investigating the protocol using all means available
to you, including analyzing the network traffic, reverse engineering the application’s
binaries, reviewing source code, and manually testing the client and servers to determine
actual vulnerabilities. Some vulnerabilities will always be easier to find using techniques
such as fuzzing (a technique by which network protocol data is mutated to uncover issues)
whereas others will be easier to find by reviewing code.
Vulnerability Classes
When you’re dealing with security vulnerabilities, it’s useful to categorize them into a set
of distinct classes to assess the risk posed by the exploitation of the vulnerability. As an
example, consider a vulnerability that, when exploited, allows an attack to compromise the
system an application is running on.
Remote Code Execution
Remote code execution is a catchall term for any vulnerability that allows an attacker to run
arbitrary code in the context of the application that implements the protocol. This could
occur through hijacking the logic of the application or influencing the command line of
subprocesses created during normal operation.
Remote code execution vulnerabilities are usually the most security critical because they
allow an attacker to compromise the system on which the application is executing. Such a
compromise would provide the attacker with access to anything the application can access
and might even allow the hosting network to be compromised.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Denial-of-Service
Applications are generally designed to provide a service. If a vulnerability exists that when
exploited causes an application to crash or become unresponsive, an attacker can use that
vulnerability to deny legitimate users access to a particular application and the service it
provides. Commonly referred to as a denial-of-service vulnerability, it requires few
resources, sometimes as little as a single network packet, to bring down the entire
application. Without a doubt, this can be quite detrimental in the wrong hands.
We can categorize denial-of-service vulnerabilities as either persistent or nonpersistent. A
persistent vulnerability permanently prevents legitimate users from accessing the service
(at least until an administrator corrects the issue). The reason is that exploiting the
vulnerability corrupts some stored state that ensures the application crashes when it’s
restarted. A nonpersistent vulnerability lasts only as long as an attacker is sending data to
cause the denial-of-service condition. Usually, if the application is allowed to restart on its
own or given sufficient time, service will be restored.
Information Disclosure
Many applications are black boxes, which in normal operation provide you with only
certain information over the network. An information disclosure vulnerability exists if there
is a way to get an application to provide information it wasn’t originally designed to
provide, such as the contents of memory, filesystem paths, or authentication credentials.
Such information might be directly useful to an attacker because it could aid further
exploitation. For example, the information could disclose the location of important in-