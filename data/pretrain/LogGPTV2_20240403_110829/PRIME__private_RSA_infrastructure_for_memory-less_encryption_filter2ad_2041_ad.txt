critical as the RSA private key. Therefore, we took the same
approaches into account to verify that no residues of the AES
key remain in RAM as we did for the RSA key. This might
be the case, for example, after we initialized PRIME via
sysfs. If we do not clean aﬀected memory lines and buﬀers
thoroughly afterwards, parts of the AES secret key would
remain in RAM. However, according to our tests, PRIME
is secure a few seconds after its initialization phase. During
initialization, RAM must be used to load the AES key into
debug registers, but afterwards this key cannot be traced
anymore.
Last but not least, note that according to the authors of
TRESOR [26], CPU registers themselves are not vulnerable
to cold boot attacks. Rebooting a machine in order to read
out registers (or even by cooling down and unplugging a
CPU) is not feasible.
4.2.2 Other Attacks
The designated design goal of PRIME was its resistance
against cold boot attacks. We now consider attacks other
than cold boot attacks brieﬂy. DMA-based attacks [5, 7]
and local privilege escalations, for example, both enable an
attacker to execute arbitrary code in system mode. Obviously,
PRIME does not defeat such attacks because system level
privileges can be used to read out debug registers, which in
turn allows an adversary to decrypt the RSA private key in
RAM.
For local attackers without system privileges, side channel
attacks are a well-known risk to cryptographic keys. Cache
timing attacks, for example, rely on the multi-threading capa-
bilities of modern CPUs. For the case of RSA, Percival [29]
showed that CPUs with hyper-threading capabilities can
leak key related information. His proposed attack uses the
fact that processes on hyper-threading CPUs share the same
cache. Although no data is shared between threads, they
can spy out each other by forcing data out of the cache
and using timing diﬀerences for memory accesses to decode
information. A spy process running in parallel with a crypto
process can thus gain valuable information about the key.
A similar attack is due to Acii¸cmez, Seifert and Ko¸c [1]
and uses the branch prediction capabilities of modern CPUs.
Again, a shared resource is used as a covert channel. All
these approaches require a spy process to simultaneously run
on the same CPU as the crypto process. Contrary to that,
Yarom and Falkner [32] introduce an attack that utilizes the
156
 1600
 1400
 1200
 1000
 800
 600
 400
 200
i
s
m
n
i
s
e
c
n
e
t
a
l
e
s
n
o
p
s
e
R
Hiawatha PRIME
Hiawatha CRT
 100
 80
 60
 40
 20
%
n
i
n
o
i
t
a
z
i
l
i
t
u
U
P
C
PRIME
CRT
 0
 0
 20
 40
 60
 100
 80
 120
Elapsed time in seconds
 140
 160
 180
 200
 0
 0
 5
 10
 15
 20
 25
 30
Time in seconds (2 second interval)
Figure 3: Latencies for PRIME and PolarSSL.
Figure 4: CPU utilization of PRIME vs. PolarSSL.
L3 cache and overcomes the limitation of processes to run
on the same CPU.
We can thwart this type of attacks by simply setting the
CPU core that runs a PRIME process into no-ﬁll mode [19].
In no-ﬁll mode read and write misses access RAM directly
and cache lines are never replaced. Recall that a PRIME
process additionally runs in an atomic section. Cache timing
attacks against AES are thwarted due to the use of AES-NI,
which is by design secure against such attacks according to
Intel [16] as it runs entirely without memory.
Also note that Algorithm 2 has a branch that is dependent
on a bit of the private key, which might lead to a timing
attack. A common technique to break the dependency of
input and key operations is achieved by blinding. The idea
is to multiply the payload by a random number before a
private RSA operation is applied. Let C be the ciphertext
and P be the corresponding plaintext:
Select a random number b ∈ [1, n − 1], and calculate:
C1 = C · be mod n
= (P · b)e mod n
P1 = Cd
1 mod n
= (P · b)ed mod n
= P · b mod n
P = P1 · b−1 mod n
This solution does not have to take place in kernel mode,
but can be adopted by any user mode process that calls
PRIME, e.g. by PolarSSL, to strengthen the implementation
against timing attacks.
5. CONCLUSIONS AND FUTURE WORK
To conclude, with PRIME we presented an infrastructure
that protects RSA private keys against cold boot attacks.
The main contribution of our work is that we have shown that
CPU-bound encryption is possible for asymmetric cryptosys-
tems. This was not clear before and considered as diﬃcult,
if possible at all, because of the enormous memory footprint
of RSA compared to AES.
With PRIME, we put a focus on making cold boot resistant
RSA possible on the latest x86 standard hardware without
157
requiring high-end products like SSL accelerators. Our proof
of concept went into patching PolarSSL and testing our
infrastructure with the Hiawatha web server. Experiments
have shown that PRIME is well suitable for servers with low
and medium throughput, while being secure and not leaking
sensitive data into RAM. This makes PRIME particularly
interesting for use cases like SSH servers where throughput
is not high, and where asymmetric operations are rarely
required. Hence, OpenSSH is a target of interest for us that
we want to support in future. Obviously, PRIME will beneﬁt
from future advancements like AVX-512, since it provides us
with four times more register memory than we have with the
current version.
Another plan for future versions of PRIME is a more
eﬃcient support for multiprocessing architectures (SMP).
Since all CPUs provide their own set of registers, PRIME
can theoretically be run on all CPUs in parallel, which would
increase its throughput many times over.
Last but not least, we want to support multiple RSA keys
in future. At the present, PRIME only supports the usage
of a single key. However, this is an unnecessary limitation
because the AES master key can be used to hold an encrypted
key ring of RSA private keys in RAM.
6. REFERENCES
[1] O. Acii¸cmez, c. K. Ko¸c, and J.-P. Seifert. On the Power
of simple Branch Prediction Analysis. In Proceedings of
the 2nd ACM Symposium on Information, Computer
and Communications Security, ASIACCS ’07, pages
312–320, Singapore, 2007. ACM.
[2] R. Anderson and M. Kuhn. Tamper Resistance: A
Cautionary Note. In Proceedings of the 2nd conference
on Proceedings of the Second USENIX Workshop on
Electronic Commerce - Volume 2, WOEC’96, pages 1–1,
Oakland, CA, 1996. USENIX Association.
[3] C. Arnaud and P.-A. Fouque. Timing attack against
protected RSA-CRT implementation used in PolarSSL.
In Proceedings of the 13th international conference on
Topics in Cryptology, CT-RSA’13, pages 18–33, Berlin,
Heidelberg, 2013. Springer-Verlag.
[4] E. Bach. Discrete Logarithms and Factoring. Technical
Rules (CER), and Distinguished Encoding Rules
(DER). ITU-T Recommendation X.690, July 2002.
[19] J¨urgen Pabel. Frozen Cache. http://frozenchache.
blogspot.com/, Jan. 2009.
[20] T. Klein. All Your Private Keys are Belong to Us, 2006.
URL: http://www.trapkit.de/research/
sslkeyfinder/keyfinder_v1.0_20060205.pdf.
[21] D. E. Knuth. The Art of Computer Programming,
Volume 2 (3rd ed.): Seminumerical Algorithms.
Addison-Wesley Longman Publishing Co., Inc., Boston,
MA, 1997.
[22] ¸C. K. Ko¸c. High-Speed RSA Implementation. Technical
report TR201, RSA Data Security, Inc., Nov. 1994.
[23] c. K. Ko¸c, T. Acar, and B. S. Kaliski, Jr. Analyzing
and Comparing Montgomery Multiplication Algorithms.
IEEE Micro, 16(3):26–33, 1996.
[24] C. Lomont. Introduction to Intel Advanced Vector
Extensions. Intel Corporation, May 2011.
[25] P. L. Montgomery. Modular Multiplication without
Trial Division. Mathematics of Computation,
44(170):519–521, 1985.
[26] T. M¨uller, F. Freiling, and A. Dewald. TRESOR Runs
Encryption Securely Outside RAM. In 20th USENIX
Security Symposium, pages 17–17, San Francisco,
California, Aug. 2011. University of
Erlangen-Nuremberg, USENIX Association.
[27] T. M¨uller, B. Taubmann, and F. Freiling. TreVisor:
OS-Independent Software-Based Full Disk Encryption
Secure Against Main Memory Attacks. In 10th
International Conference on Applied Cryptography and
Network Security (ACNS ’12), Singapore, June 2012.
University of Erlangen-Nuremberg, Springer-Verlag.
[28] T. P. Parker and S. Xu. A Method for Safekeeping
Cryptographic Keys from Memory Disclosure Attacks.
In Proceedings of the First international conference on
Trusted Systems, INTRUST’09, pages 39–59, Beijing,
China, Dec. 2009. Springer-Verlag.
[29] C. Percival. Cache Missing for Fun and Proﬁt. In
Proceedings of BSDCan 2005, May 2005.
[30] A. Rahmati, M. Salajegheh, D. Holcomb, J. Sorber,
W. P. Burleson, and K. Fu. TARDIS: Time and
Remanence Decay in SRAM to Implement Secure
Protocols on Embedded Devices without Clocks. In
Proceedings of the 21st USENIX Conference on
Security Symposium, pages 36–36, Bellevue, WA, 2012.
USENIX Association.
[31] P. Simmons. Security Through Amnesia: A
Software-based Solution to the Cold Boot Attack on
Disk Encryption. In Proceedings of the 27th Annual
Computer Security Applications Conference, ACSAC
’11, pages 73–82, Orlando, Florida, 2011. ACM.
[32] Y. Yarom and K. Falkner. Flush+Reload: a High
Resolution, Low Noise, L3 Cache Side-Channel Attack.
Cryptology ePrint Archive, Report 2013/448, 2013.
http://eprint.iacr.org/.
Report UCB/CSD-84-186, EECS Department,
University of California, Berkeley, Jun 1984.
[5] M. Becher, M. Dornseif, and C. N. Klein. FireWire -
All your memory are belong to us. In Proceedings of the
Annual CanSecWest Applied Security Conference,
Vancouver, British Columbia, Canada, 2005.
Laboratory for Dependable Distributed Systems,
RWTH Aachen University.
[6] G. R. Blakely. A Computer Algorithm for Calculating
the Product AB Modulo M. IEEE Trans. Comput.,
32(5):497–500, May 1983.
[7] E.-O. Blass and W. Robertson. TRESOR-HUNT:
Attacking CPU-Bound Encryption. In 2012 Annual
Computer Applications Conference, Orlando, Florida,
Dec. 2012. Northeastern University, College of
Computer and Information Science, ACSAC 28.
[8] D. Boneh, G. Durfee, and Y. Frankel. An Attack on
RSA Given a Small Fraction of the Private Key Bits.
In Proceedings of the International Conference on the
Theory and Applications of Cryptology and Information
Security: Advances in Cryptology, ASIACRYPT ’98,
pages 25–34, London, UK, 1998. Springer-Verlag.
[9] D. Brumley and D. Boneh. Remote Timing Attacks are
practical. Computer Networks, 48(5):701–716, Aug.
2005.
[10] W. D. Colin. Leakage from Montgomery Multiplication.
In c. Ko¸c, editor, Cryptographic Engineering, pages
431–449. Springer, 2009.
[11] S. R. Duss´e and B. S. Kaliski, Jr. A Cryptographic
Library for the motorola DSP56000. In Proceedings of
the Workshop on the Theory and Application of
Cryptographic Techniques on Advances in Cryptology,
EUROCRYPT ’90, pages 230–244, Aarhus, Denmark,
1991. Springer-Verlag.
[12] H. L. Garner. The Residue Number System. In Western
Joint Computer Conference, IRE-AIEE-ACM ’59,
pages 146–153, San Francisco, CA, Mar. 1959. ACM.
[13] P. Gutmann. Data Remanence in Semiconductor
Devices. In Proceedings of the 10th Conference on
USENIX Security Symposium - Volume 10, SSYM’01,
pages 4–4, Washington, D.C., 2001. USENIX
Association.
[14] J. A. Halderman, S. D. Schoen, N. Heninger,
W. Clarkson, W. Paul, J. A. Calandrino, A. J.
Feldman, J. Appelbaum, and E. W. Felten. Lest We
Remember: Cold Boot Attacks on Encryptions Keys.
In Proceedings of the 17th USENIX Security
Symposium, pages 45–60, San Jose, CA, Aug. 2008.
Princeton University, USENIX Association.
[15] N. Heninger and H. Shacham. Reconstructing RSA
Private Keys from Random Key Bits. In Proceedings of
the 29th Annual International Cryptology Conference
on Advances in Cryptology, CRYPTO ’09, pages 1–17,
Santa Barbara, CA, 2009. Springer-Verlag.
[16] Intel. Intel Advanced Encryption Standard (AES)
Instructions Set, Jan. 2010.
[17] Intel. Intel Advanced Vector Extensions Programming
Reference. Number 319433-011. Intel Corporation, June
2011.
[18] International Telecommunication Union. Information
Technology — ASN.1 Encoding Rules — Speciﬁcation
of Basic Encoding Rules (BER), Canonical Encoding
158