                public static uint PRIVILEGE_SET_ALL_NECESSARY = 1;
                [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]
                public LUID_AND_ATTRIBUTES[] Privilege;
            }
            [Flags]
            public enum ProcessAccessFlags : uint
            {
                All = 0x001F0FFF,
                Terminate = 0x00000001,
                CreateThread = 0x00000002,
                VirtualMemoryOperation = 0x00000008,
                VirtualMemoryRead = 0x00000010,
                VirtualMemoryWrite = 0x00000020,
                DuplicateHandle = 0x00000040,
                CreateProcess = 0x000000080,
                SetQuota = 0x00000100,
                SetInformation = 0x00000200,
                QueryInformation = 0x00000400,
                QueryLimitedInformation = 0x00001000,
                Synchronize = 0x00100000
            }
            // LookupPrivilegeValue
            [DllImport("advapi32.dll")]
            static extern bool LookupPrivilegeValue(string lpSystemName, string lpName, out LUID lpLuid);
            // OpenProcess
            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern IntPtr OpenProcess(
             ProcessAccessFlags processAccess,
             bool bInheritHandle,
             int processId);
            public static IntPtr OpenProcess(Process proc, ProcessAccessFlags flags)
            {
                return OpenProcess(flags, false, proc.Id);
            }
            // OpenProcessToken
            [DllImport("advapi32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            static extern bool OpenProcessToken(IntPtr ProcessHandle, UInt32 DesiredAccess, out IntPtr TokenHandle);
            // DuplicateToken
            [DllImport("advapi32.dll")]
            public extern static bool DuplicateToken(IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, ref IntPtr DuplicateTokenHandle);
            // SetThreadToken
            [DllImport("advapi32.dll", SetLastError = true)]
            private static extern bool SetThreadToken(IntPtr pHandle, IntPtr hToken);
            // AdjustTokenPrivileges
            [DllImport("advapi32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            static extern bool AdjustTokenPrivileges(IntPtr TokenHandle,
               [MarshalAs(UnmanagedType.Bool)]bool DisableAllPrivileges,
               ref TOKEN_PRIVILEGES NewState,
               UInt32 BufferLengthInBytes,
               ref TOKEN_PRIVILEGES PreviousState,
               out UInt32 ReturnLengthInBytes);
            // GetCurrentProcess
            [DllImport("kernel32.dll", SetLastError = true)]
            static extern IntPtr GetCurrentProcess();
            [DllImport("advapi32.dll", SetLastError = true)]
            public static extern bool PrivilegeCheck(
                IntPtr ClientToken,
                ref PRIVILEGE_SET RequiredPrivileges,
                out bool pfResult
                );
            // Now I will create functions that use the above definitions, so we can use them directly from PowerShell :P
            public static bool IsPrivilegeEnabled(string Privilege)
            {
                bool ret;
                LUID luid = new LUID();
                IntPtr hProcess = GetCurrentProcess();
                IntPtr hToken;
                if (hProcess == IntPtr.Zero) return false;
                if (!OpenProcessToken(hProcess, TOKEN_QUERY, out hToken)) return false;
                if (!LookupPrivilegeValue(null, Privilege, out luid)) return false;
                PRIVILEGE_SET privs = new PRIVILEGE_SET { Privilege = new LUID_AND_ATTRIBUTES[1], Control = PRIVILEGE_SET.PRIVILEGE_SET_ALL_NECESSARY, PrivilegeCount = 1 };
                privs.Privilege[0].Luid = luid;
                privs.Privilege[0].Attributes = LUID_AND_ATTRIBUTES.SE_PRIVILEGE_ENABLED;
                if (!PrivilegeCheck(hToken, ref privs, out ret)) return false;
                return ret;
            }
            public static bool EnablePrivilege(string Privilege)
            {
                LUID luid = new LUID();
                IntPtr hProcess = GetCurrentProcess();
                IntPtr hToken;
                if (!OpenProcessToken(hProcess, TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, out hToken)) return false;
                if (!LookupPrivilegeValue(null, Privilege, out luid)) return false;
                // First, a LUID_AND_ATTRIBUTES structure that points to Enable a privilege.
                LUID_AND_ATTRIBUTES luAttr = new LUID_AND_ATTRIBUTES { Luid = luid, Attributes = LUID_AND_ATTRIBUTES.SE_PRIVILEGE_ENABLED };
                // Now we create a TOKEN_PRIVILEGES structure with our modifications