3
,
8
3
(
)
3
,
4
6
,
1
7
(
)
3
,
6
5
2
,
5
6
2
(
)
5
,
6
5
2
,
4
7
2
(
)
5
,
8
2
1
,
4
4
1
(
)
3
,
8
2
1
,
6
3
1
(
ECC Schemes
Figure 8: Likelihoods of eight different ECC schemes across
two different data patterns, where each likelihood is individu-
ally maximized over the model parameter θ.
The smallest (i.e., rightmost) bar represents the most likely
model, which provides the final reverse-engineered model pa-
rameters, including the ECC scheme and the pre-correction
error rate. For greater insight into the results, Table 2 describes
the five highest-likelihood models in detail.
–Log-Likelihood
fi
θ
Value Bootstrap (Min, Max) ECC Code RBER Data Pattern
2.12e-5
3.21e-5
3.26e-5
5.38e-5
8.74e-5
(2.09e-5, 2.15e-5)
(3.18e-5, 3.24e-5)
(3.22e-5, 3.29e-5)
(5.32e-5, 5.43e-5)
(8.69e-5, 8.79e-5)
(136, 128, 3) 0.038326
(144, 128, 5) 0.039113
(274, 256, 5) 0.039995
(265, 256, 3) 0.039956
(71, 64, 3)
0.038472
RANDOM
RANDOM
RANDOM
RANDOM
RANDOM
Table 2: Details of the five highest-likelihood models (shown
in Figure 8) and their raw likelihood values.
8A small number of cells do not follow the overall pattern due to either i)
extraordinarily long retention times or ii) ECC correction.
The data indicates that a Hamming single-error correction
code with (n = 136, k = 128, d = 3) is the most likely ECC
21
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:59 UTC from IEEE Xplore.  Restrictions apply. 
scheme out of all models considered. This result is consistent
with several industrial prior works [17, 67, 68, 86].9 Compared
to most of the other codes we consider, (136, 128, 3) code
has a relatively low error-correction capability (i.e., 1 bit per
136 codeword bits), which is reasonable for a first-generation
on-die ECC mechanism and requires a relatively simple, low-
overhead circuit implementation.
The MAP estimate of θ provides the most likely pre-
correction error rate (i.e., RBER) and data pattern to explain
the observed data. Note that on-die ECC actually increases
the error rate at these testing conditions, likely due to a high
incidence of miscorrections as described in Section 5.3. EIN
correctly infers that our experiment uses the RANDOM data
pattern, which is indicated by the relatively low likelihoods of
the models that assume a 0xFF data pattern.
Figure 9 shows the full PMF of Equation 4 for all sixteen
models considered in Figure 8. The maximum-a-posteriori
model (dashed) and the experimental data (solid) are shown
alongside all other models (dotted). When shown graphically, it
is clear that EIN effectively performs a rigorous best-fit analysis
over several models to the experimental observations.
100
10 2
10 4
10 6
y
t
i
l
i
b
a
b
o
r
P
0
Experimental Data
Maximum-a-Posteriori Model
Lower-Likelihood Models
5
25
Number of Bit Errors in a 256-bit Word
10
15
20
8. Data-Retention Error Characterization
of DRAM Devices with On-Die ECC
Having reverse-engineered the on-die ECC scheme, we char-
acterize data-retention error rates with respect to both tREFW
and temperature to demonstrate how EIN enables studying pre-
correction errors in practice. To our knowledge, this is the first
work to provide a system-level error characterization study of
DRAM devices with on-die ECC in open literature in an effort
to understand the pre-correction error characteristics.
8.1. Data-Retention Error Rate vs. Refresh Window
Figure 10 shows the measured data-retention error rates for
DRAM devices with and without on-die ECC using different
◦
C using a 0xFF data
tREFW values at a fixed temperature of 50
pattern. Each of the five distributions shows the minimum and
maximum error rates observed for different groups of devices
organized by manufacturer. We also show the pre-correction
error rates inferred using EIN.
No ECC (Manufacturer B)
No ECC (Manufacturer C)
No ECC (Manufacturer A)
On-Die ECC (Pre-Correction)
On-Die ECC (Observed)
)
R
E
B
(
e
t
a
R
r
o
r
r
E
t
i
B
0.006
0.004
0.002
0.000
0
10
20
30
40
50
60
tREFW (s)
30
Figure 10: Comparison of data-retention error rates measured
using devices with and without on-die ECC, including the in-
ferred pre-correction error rates for devices with on-die ECC.
Figure 9: Full PMF for each model considered in Figure 8.
We repeat this analysis across different devices, tempera-
tures, refresh windows, and data patterns and consistently find
the (136, 128, 3) ECC code to be the maximum-a-posteriori
model. Thus, we conclude that the (136, 128, 3) ECC code is
the ECC scheme used in the tested devices.
We draw three key conclusions from this application of EIN.
First, EIN infers the on-die ECC scheme with no visibility into
the encoded data or error-detection/-correction information,
without disabling the ECC mechanism, and without tampering
with the hardware in any way.
Second, EIN can simultaneously infer several components of
θ that might not be known. While we demonstrate a simple
inference over only two data patterns in addition to the pre-
correction error rate, we could also infer other characteristics
(e.g., true-/anti-cell composition, refresh window, temperature).
In general, θ is extensible to any model parameter that can be
implemented in simulation (i.e., in EINSim).
Third, Figure 9 shows that the maximum-a-posteriori model is
a good fit for the empirical data, which supports our assump-
tion that data-retention errors can be modeled as uniformly-
random events (Section 4.3) even for devices with on-die ECC.
9We obtained this result without informing the prior distribution about the
existence of prior works. If instead we had done so as mentioned in Section 4.4,
(136, 128, 3) [17, 67, 68, 86] and (71, 64, 3) [41, 43] ECC code would have been
more overwhelmingly likely.
The data shows that the observed error rates for devices
with on-die ECC lie far below those of devices without on-
die ECC. This is consistent with observations from prior
works [67,68,86], which find that on-die ECC is a strong enough
error-mitigation mechanism to allow for refresh rate reduction.
Unfortunately, the observed error rates do not provide insight
into how the core DRAM technology has changed because it is
unclear how much of the error margin improvement is simply
a result of ECC.
◦
EIN solves this problem. By inferring the pre-correction
error rates, we observe considerable error margin for even the
pre-correction error rates, implying that on-die ECC may be un-
necessary at these testing conditions. This may seem surprising
at first sight, since error rates are believed to be increasing with
technology generation [49, 85, 86, 93]. However, on-die ECC’s
goal is to combat single-cell errors at worst-case operating spec-
ifications [86] (i.e., 85
C, tREFW = 32ms [44], worst-case usage
characteristics). Unfortunately, our testing infrastructure cur-
rently cannot achieve such conditions, and even if it could, the
pathological access- and data-patterns depend on the propri-
etary internal circuit design known only to the manufacturer.
Therefore, our observations do not contradict expectations, and
we conclude that for devices with on-die ECC: i) on-die ECC
effectively reduces the observed error rate and ii) both pre- and
post-correction error rates are considerably lower than those
of devices without on-die ECC at our testing conditions.
22
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:59 UTC from IEEE Xplore.  Restrictions apply. 
This example demonstrates EIN’s strengths: EIN separates
the effects of a device’s particular ECC mechanism from the raw
error rates of the DRAM technology and enables a meaningful
comparison of error characteristics between devices with (or
without) different ECC schemes. EIN enables this analysis for
any error mechanism that EIN is applicable to (Section 5.6).
8.2. Data-Retention Error Rate vs. Temperature
Data-retention error rates are well-known to follow an expo-
nential relationship with respect to temperature [4, 30, 79], and
prior works [55, 64, 79] exploit this relationship to extrapolate
error rates beyond experimentally feasible testing conditions.
We show that on-die ECC distorts this exponential relationship
such that observed error rates cannot be reliably extrapolated,
and EIN recovers the underlying exponential relationship.
Figure 11 shows the exponential relationship for a single rep-
resentative device with on-die ECC at a fixed refresh window
of 10s on a semilog scale. Measurements (orange, ×) are taken
◦
◦
between the temperature limits of our infrastructure (55
C -
C, illustrated with a grey background), and the inferred
70
pre-correction error rates (blue, +) and the hypothetical error
rates if the on-die ECC scheme were a stronger double-error
correction (144, 128, 5) code (green, ∗) are shown. We show
exponential fits to data within the measurable region for all
◦
three curves. Outside of the measurable region (i.e., 70
C), we use EINSim to extrapolate the two post-correction
curves beyond the measurable region (dashed) based on the
exponential fit for the pre-correction curve.
allowing future works to make use of well-studied error char-
acteristics for devices with ECC.
9. Related Work
To our knowledge, no other work provides and experimentally
demonstrates a methodology to infer i) the ECC scheme and
ii) pre-correction error characteristics of a DRAM device with
on-die ECC, without access to the device’s implementation
details. We briefly survey and differentiate our work from
related works that are categorized based on their goals.
Reverse-Engineering ECC. Prior works provide techniques
for reverse-engineering ECC schemes in NAND flash mem-
ories [122, 123, 131] and rank-level ECC DRAMs [19]. How-
ever, none of these works provide a methodology by which to
reverse-engineer an ECC scheme without visibility into the ECC
mechanism. These works rely on observing the encoded data
through a side-channel (e.g., cold-boot attacks [19], directly
probing the underlying memory [19, 122, 123, 131]), or know-
ing when an ECC correction occurs (e.g., timing attacks [19],
custom drivers [19]).
In contrast, on-die ECC provides no such visibility into the
error correction mechanism, and our analysis relies purely on
measuring the statistical properties of post-correction errors.
On-Die ECC. Prior works examine on-die ECC as an ex-
ploitable mechanism for additional system benefits, including
refresh rate reduction [67], standby power reduction [68], and
reliability improvement [93]. Our work is the first to propose
a general methodology for inferring the on-die ECC scheme
and pre-correction error rates.
DRAM Error Characterization. Prior works [5, 10–12, 15,
33, 34, 45–47, 50–53, 56, 57, 57, 58, 60, 61, 70–72, 78–81, 85, 92, 95,
98, 106, 115–118, 121, 124–126, 128, 129, 134] study both data-
retention and reduced-latency errors in DDR3 and LPDDR4
DRAM devices. To our knowledge, our work is the first to
characterize commodity DRAM devices with on-die ECC.
e
t
a
R
r
o
r
r
E
t
i
B
10 1
10 2
10 3
10 4
10 5
10 6
Measurable
Region
Exponential Fits
Inferred (Pre-Crorrection)
Measured (Post-Correction)
Hypothetical (144, 128, 5)