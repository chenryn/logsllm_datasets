### Analysis of ECC Schemes and Data-Retention Error Characterization

#### Likelihoods of Different ECC Schemes
Figure 8 illustrates the likelihoods of eight different ECC schemes across two data patterns, where each likelihood is individually maximized over the model parameter \(\theta\). The smallest (i.e., rightmost) bar represents the most likely model, which provides the final reverse-engineered model parameters, including the ECC scheme and the pre-correction error rate. Table 2 details the five highest-likelihood models.

**Table 2: Details of the Five Highest-Likelihood Models**
| -Log-Likelihood | Bootstrap (Min, Max) | ECC Code (n, k, d) | RBER | Data Pattern |
|-----------------|----------------------|--------------------|------|--------------|
| 2.12e-5         | (2.09e-5, 2.15e-5)    | (136, 128, 3)      | 0.038326 | RANDOM       |
| 3.21e-5         | (3.18e-5, 3.24e-5)    | (144, 128, 5)      | 0.039113 | RANDOM       |
| 3.26e-5         | (3.22e-5, 3.29e-5)    | (274, 256, 5)      | 0.039995 | RANDOM       |
| 5.38e-5         | (5.32e-5, 5.43e-5)    | (265, 256, 3)      | 0.039956 | RANDOM       |
| 8.74e-5         | (8.69e-5, 8.79e-5)    | (71, 64, 3)        | 0.038472 | RANDOM       |

#### Insights from the Results
A small number of cells do not follow the overall pattern due to either extraordinarily long retention times or ECC correction. The data indicates that a Hamming single-error correction code with (n = 136, k = 128, d = 3) is the most likely ECC scheme out of all models considered. This result is consistent with several industrial prior works [17, 67, 68, 86]. Compared to other codes, the (136, 128, 3) code has a relatively low error-correction capability (i.e., 1 bit per 136 codeword bits), which is reasonable for a first-generation on-die ECC mechanism and requires a relatively simple, low-overhead circuit implementation.

The MAP estimate of \(\theta\) provides the most likely pre-correction error rate (i.e., RBER) and data pattern to explain the observed data. On-die ECC increases the error rate at these testing conditions, likely due to a high incidence of miscorrections as described in Section 5.3. EIN correctly infers that our experiment uses the RANDOM data pattern, which is indicated by the relatively low likelihoods of the models that assume a 0xFF data pattern.

#### Full PMF of the Models
Figure 9 shows the full probability mass function (PMF) of Equation 4 for all sixteen models considered in Figure 8. The maximum-a-posteriori model (dashed) and the experimental data (solid) are shown alongside all other models (dotted). When shown graphically, it is clear that EIN effectively performs a rigorous best-fit analysis over several models to the experimental observations.

**Figure 9: Full PMF for Each Model Considered in Figure 8**

#### Data-Retention Error Characterization
Having reverse-engineered the on-die ECC scheme, we characterize data-retention error rates with respect to both \(t_{REFW}\) and temperature to demonstrate how EIN enables studying pre-correction errors in practice. To our knowledge, this is the first work to provide a system-level error characterization study of DRAM devices with on-die ECC in open literature in an effort to understand the pre-correction error characteristics.

**Figure 10: Comparison of Data-Retention Error Rates Measured Using Devices with and without On-Die ECC**
- **No ECC (Manufacturer B)**
- **No ECC (Manufacturer C)**
- **No ECC (Manufacturer A)**
- **On-Die ECC (Pre-Correction)**
- **On-Die ECC (Observed)**

We repeat this analysis across different devices, temperatures, refresh windows, and data patterns and consistently find the (136, 128, 3) ECC code to be the maximum-a-posteriori model. Thus, we conclude that the (136, 128, 3) ECC code is the ECC scheme used in the tested devices.

#### Key Conclusions
1. **ECC Scheme Inference**: EIN infers the on-die ECC scheme with no visibility into the encoded data or error-detection/-correction information, without disabling the ECC mechanism, and without tampering with the hardware.
2. **Simultaneous Inference**: EIN can simultaneously infer several components of \(\theta\) that might not be known, such as true-/anti-cell composition, refresh window, and temperature.
3. **Model Fit**: Figure 9 shows that the maximum-a-posteriori model is a good fit for the empirical data, supporting our assumption that data-retention errors can be modeled as uniformly-random events even for devices with on-die ECC.

The data shows that the observed error rates for devices with on-die ECC lie far below those of devices without on-die ECC, consistent with prior works [67, 68, 86], which find that on-die ECC is a strong enough error-mitigation mechanism to allow for refresh rate reduction. However, the observed error rates do not provide insight into how the core DRAM technology has changed because it is unclear how much of the error margin improvement is simply a result of ECC.

EIN solves this problem by inferring the pre-correction error rates, showing considerable error margin even for pre-correction error rates, implying that on-die ECC may be unnecessary at these testing conditions. This may seem surprising since error rates are believed to be increasing with technology generation [49, 85, 86, 93]. However, on-die ECC's goal is to combat single-cell errors at worst-case operating specifications [86] (i.e., 85°C, \(t_{REFW} = 32ms\), worst-case usage characteristics). Our testing infrastructure currently cannot achieve such conditions, and even if it could, the pathological access- and data-patterns depend on the proprietary internal circuit design known only to the manufacturer. Therefore, our observations do not contradict expectations, and we conclude that for devices with on-die ECC:
- On-die ECC effectively reduces the observed error rate.
- Both pre- and post-correction error rates are considerably lower than those of devices without on-die ECC at our testing conditions.

This example demonstrates EIN’s strengths: EIN separates the effects of a device’s particular ECC mechanism from the raw error rates of the DRAM technology and enables a meaningful comparison of error characteristics between devices with (or without) different ECC schemes. EIN enables this analysis for any error mechanism that EIN is applicable to (Section 5.6).

#### Data-Retention Error Rate vs. Temperature
Data-retention error rates are well-known to follow an exponential relationship with respect to temperature [4, 30, 79], and prior works [55, 64, 79] exploit this relationship to extrapolate error rates beyond experimentally feasible testing conditions. We show that on-die ECC distorts this exponential relationship such that observed error rates cannot be reliably extrapolated, and EIN recovers the underlying exponential relationship.

**Figure 11: Exponential Relationship for a Single Representative Device with On-Die ECC at a Fixed Refresh Window of 10s on a Semilog Scale**
- **Measurements (orange, ×)**: Taken between the temperature limits of our infrastructure (55°C - 70°C, illustrated with a grey background).
- **Inferred Pre-Correction Error Rates (blue, +)**
- **Hypothetical Error Rates if the On-Die ECC Scheme Were a Stronger Double-Error Correction (144, 128, 5) Code (green, ∗)**

Exponential fits to data within the measurable region for all three curves are shown. Outside of the measurable region (i.e., 70°C), EINSim is used to extrapolate the two post-correction curves based on the exponential fit for the pre-correction curve, allowing future works to make use of well-studied error characteristics for devices with ECC.

### Related Work
To our knowledge, no other work provides and experimentally demonstrates a methodology to infer i) the ECC scheme and ii) pre-correction error characteristics of a DRAM device with on-die ECC, without access to the device’s implementation details. We briefly survey and differentiate our work from related works that are categorized based on their goals.

**Reverse-Engineering ECC**
- Prior works provide techniques for reverse-engineering ECC schemes in NAND flash memories [122, 123, 131] and rank-level ECC DRAMs [19].
- These works rely on observing the encoded data through side-channels (e.g., cold-boot attacks, directly probing the memory, or knowing when an ECC correction occurs).
- In contrast, on-die ECC provides no such visibility into the error correction mechanism, and our analysis relies purely on measuring the statistical properties of post-correction errors.

**On-Die ECC**
- Prior works examine on-die ECC as an exploitable mechanism for additional system benefits, including refresh rate reduction [67], standby power reduction [68], and reliability improvement [93].
- Our work is the first to propose a general methodology for inferring the on-die ECC scheme and pre-correction error rates.

**DRAM Error Characterization**
- Prior works [5, 10–12, 15, 33, 34, 45–47, 50–53, 56, 57, 57, 58, 60, 61, 70–72, 78–81, 85, 92, 95, 98, 106, 115–118, 121, 124–126, 128, 129, 134] study both data-retention and reduced-latency errors in DDR3 and LPDDR4 DRAM devices.
- To our knowledge, our work is the first to characterize commodity DRAM devices with on-die ECC.