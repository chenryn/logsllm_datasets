title:Almost entirely correct mixing with applications to voting
author:Dan Boneh and
Philippe Golle
Almost Entirely Correct Mixing
With Applications to Voting
Dan Boneh ∗
Stanford University
PI:EMAIL
Philippe Golle †
Stanford University
PI:EMAIL
ABSTRACT
In order to design an exceptionally eﬃcient mix network,
both asymptotically and in real terms, we develop the no-
tion of almost entirely correct mixing, and propose a new
mix network that is almost entirely correct. In our new mix,
the real cost of proving correctness is orders of magnitude
faster than all other mix nets. The trade-oﬀ is that our mix
only guarantees “almost entirely correct” mixing, i.e it guar-
antees that the mix network processed correctly all inputs
with high (but not overwhelming) probability. We use a
new technique for verifying correctness. This new technique
consists of computing the product of a random subset of the
inputs to a mix server, then require the mix server to pro-
duce a subset of the outputs of equal product. Our new mix
net is of particular value for electronic voting, where a guar-
antee of almost entirely correct mixing may well be suﬃcient
to announce instantly the result of a large election. The cor-
rectness of the result can later be veriﬁed beyond a doubt
using any one of a number of much slower proofs of perfect-
correctness, without having to mix the ballots again.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption
General Terms
Security
Keywords
Mix Networks, Electronic Voting
1.
INTRODUCTION
A mix server is the cryptographic equivalent of a hat. It
takes a set of input ciphertexts and outputs related cipher-
texts in a random order, in such a way that the permutation
∗Supported by NSF-CAREER Award
†Supported by Stanford Graduate Fellowship
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
that matches input to output ciphertexts is known only to
the mix server and no one else. Mix servers were originally
proposed by Chaum [5] to implement an untraceable email
system, and have since found a wide range of applications.
They are notably being used to ensure privacy in electronic
voting [22, 26, 12] and anonymous payment systems [14].
To be useful, a mix server must prove that it has correctly
mixed the set of input ciphertexts. That is, a mix server
must prove that the set of ciphertexts it outputs matches
exactly the set of input ciphertexts it received. Ideally, this
proof should not reveal any additional information about
the relationship between inputs and outputs. If we consider
the example of a mix server mixing votes after an election,
the proof of correct mixing guarantees that the mix server
neither lost, nor added, nor modiﬁed any vote.
Proving that the output of a mix is a permutation of the
inputs without compromising the secrecy of the permuta-
tion is not easy. The ﬁrst solutions to this problem were
based on computationally expensive zero-knowledge proofs.
Much work has since been devoted to making the proofs
more eﬃcient both asymptotically and in real terms (we re-
view related work in the following section). However, even
the fastest mix [20] is still too slow to prove correctness in
real time when the number of inputs is large. For instance,
we estimate that to prove that one million votes have been
mixed correctly would require some 20 hours on a 1GHz PC.
In eﬀect, existing mix servers are too slow to mix non-trivial
numbers of inputs in real time.
In this paper, we propose an exceptionally eﬃcient new
method for proving that the output produced by a mix net-
work is almost entirely correct. The real cost of generating
a proof of almost entirely correct mixing, measured by the
number of exponentiations required, is a small constant in-
dependent of the number of inputs mixed. In practice, our
new mix produces an instant proof of almost entirely cor-
rect mixing. In comparison, the fastest proofs of perfectly
correct mixing require work linear in the number of inputs.
Almost entirely correct mixing means that the mix net-
work provably processed correctly all inputs with high (but
not overwhelming) probability. For example, a typical ap-
plication of our mix would be to give an instant proof that
the outcome of an election involving one million ballots is
correct with probability 99%. This guarantee may well be
enough to announce the result of the election early, while
a much slower perfectly correct proof runs to validate the
result beyond a doubt.
We use a new technique to verify that the output of a mix
server is almost entirely correct. This new technique consists
68of ﬁrst computing the product πS of a random subset S of
the inputs of the mix server, then revealing the subset S to
the mix server and requesting it to produce a subset S(cid:48) of
the outputs such that πS(cid:48) = πS. Observe that an honest mix
server can ﬁnd S(cid:48) simply by applying to S the permutation
that matches mix inputs to mix outputs. On the other hand,
we will show in sections 6 and 7 that the problem of ﬁnding
S(cid:48) such that πS(cid:48) = πS becomes often impossible if the set
of outputs produced by the mix server is not a permutation
of the inputs.
The most important application of our new proof is in
large electronic elections (with one million votes or more),
where it may be used to guarantee almost instantly that the
output produced by the mix is almost entirely correct. This
guarantee will often be enough to announce the result of the
election instantly. We can use in parallel to our proof any
one of a number of slower proofs of perfect-correctness with-
out having to mix the ballots again (the voters themselves,
of course, need not be involved again). What makes this
possible is that our proof works with the fastest and also
most common implementation of mix networks: ElGamal
re-encryption mix nets (see section 2.1).
The rest of this paper is organized as follows. In section
2, we deﬁne mix networks and their properties, as well as
re-encryption mix nets.
In section 3, we survey existing
techniques for proving the correct execution of mix nets. We
introduce our mechanism for proving almost entirely correct
mixing in section 4.
In section 5, we propose a new mix
network protocol based on a proof of almost entirely correct
mixing and examine the properties of this mix net in section
6. In section 7, we prove that our mix net is almost entirely
correct. We conclude in section 8.
2. MIX DEFINITIONS AND PROPERTIES
A mix server takes as input a set of ciphertexts and out-
puts in a random order re-encryptions of these ciphertexts.
A re-encryption of a ciphertext is a diﬀerent ciphertext that
decrypts to the same plaintext. We describe later in this
section the encryption scheme used by mix servers and the
re-encryption process. The main property desired of a mix
server is that the permutation that matches input cipher-
texts to output re-encryptions should be known to no one
but the mix server itself.
Mixing typically involves not one but several mix servers
that operate sequentially on the same data. This is called a
mix network or mix net. Consider a mix net that consists
of n servers. Users submit encrypted inputs to the mix net-
work. These inputs are mixed in a random order by the ﬁrst
mix server. The output of this ﬁrst mix server is passed to
the second mix server, which mixes it again and passes it to
the third mix server which mixes it yet again, and so on un-
til the output of the n-th server becomes the ﬁnal output of
the mix net. The relationship between inputs and outputs
of a mix net is not known to any single server, but could
only be learnt by a coalition of all the servers.
As is customary, we model all communication between
users and mix servers, as well as among mix servers with
a bulletin board. The bulletin board is a publicly shared
piece of memory to which all participants have read access
and appendive, sequential write access with authentication.
We further assume that all participants (users and servers)
have polynomially bounded computational resources. We
consider an adversary that may statically control any num-
ber of users and up to all the mix servers minus one. (We
reﬁne and justify this adversarial model in section 3). Given
these assumptions, we require the following security proper-
ties of a mix network:
• Correctness: the set of ciphertexts output by the mix
network must “match” the set of input ciphertexts.
This means that every output is a re-encryption of an
input, and no two outputs are re-encryption of the
same input.
• Privacy: no adversary can match any output of the
mix network to the corresponding input with proba-
bility better than 1/n where n is the number of inputs.
Our mixnet guarantees a slightly weaker notion of pri-
vacy as explained in section 6.
• Robustness: the mix network must produce a correct
output irrespective of possible server faults or failures.
• Universal veriﬁability: a mix net is universally ver-
iﬁable if a coalition of all users and all mix servers only
ever succeeds in convincing an outside veriﬁer of the
correct execution of a mix network when the mix net-
work was indeed executed correctly. Note that univer-
sal veriﬁability uses a stronger adversarial model than
that used to deﬁne privacy and correctness, since all
mix servers may participate in the coalition to cheat
an outside veriﬁer.
• Eﬃciency: while not a security property, low compu-
tational overhead is the holy grail of secure mix net-
works.
2.1 Re-encryption Mix Nets
In this section, we deﬁne re-encryption mix networks. Re-
encryption mix nets were originally proposed in [22]. The
particular re-encryption mix of [22] was broken in [24, 25],
and later ﬁxed by [21]. A very large number of constructions
based on re-encryption mix nets have since been proposed
(we will survey them brieﬂy in the following section).
Re-encryption mix networks operate in two distinct phases.
In the ﬁrst phase (the mixing phase), the input ciphertexts
are shuﬄed and re-encrypted. In the second phase (the de-
cryption phase), the mixed ciphertexts that are the output
of the ﬁrst phase are decrypted. The servers that perform
the mixing in the ﬁrst phase, and the servers that perform
the decryption in the second phase need not be the same,
although they can be the same. We treat them separately
in order to deﬁne our adversarial model more clearly. We
call the ﬁrst group mixing servers and the second group de-
cryption servers.
Definition 2.1. (Adversarial model) We consider an ad-
versary that may statically control any number of users, up
to all the mixing servers minus one, and up to a minority
of decryption servers.
This static adversarial model is commonly considered, but
it will be particularly appropriate for the mix net we pro-
pose. Since our mixing is so fast, it is not practically impor-
tant to consider dynamic adversaries. The same may not be
true for slower mixes, making such schemes possibly weaker
or more complicated. As we shall see, the involvement of
decryption servers is very much more limited than that of
69Scheme
Computational Cost
Trade-oﬀ
Re-encryption
Proof
Cut and Choose ZK [26, 21]
Pairwise Permutations [2, 16]
Matrix Representation [9]
Polynomial Scheme [20]
Randomized Partial Checking [18]
Optimistic Mixing [11]
Proof-of-Subproduct [this paper]
2n
2n
2n
2n
2n
6n
2n
642nk
= O(nk)
7n log n(2k − 1) = O(nk)
= O(nk)
= O(nk)
= O(nk)
= O(k)
= O(k)
18n(2k − 1)
8n(2k − 1)
n/2(2k − 1)
6 + 12k
2α(2k − 1)
Decryption
(2 + 4k)n
(2 + 4k)n
(2 + 4k)n
(2 + 4k)n
(2 + 4k)n
(5 + 10k)n
(2 + 4k)n