members will update one key, 25,000 members will update two
keys, 12,500 members will update three keys, 6,250 members
will update four keys, and so on. Finally, in Mykil, only the
members within one area are affected. For an area of 5000
members, 2500 members will update one key, 1250 members
will update two keys, 625 members will update three keys, 313
members will update four keys, and so on. So, Iolus incurs
minimum amount of CPU overhead per member, mykil incurs
a little larger CPU overhead, and LKH incurs signiﬁcantly
larger overhead.
C. Bandwidth Consumption
The bandwidth consumption per group member during a
rekeying operation depends on the length of the key update
message. For a join event, the length of a key update message
is same in all three protocols, i.e. the length of the encrypted
new group/area key. LKH and Mykil also unicast the key path
to the new member. In Mykil, this corresponds to 16*12 = 172
bytes in an area of 5000 members. In LKH, this corresponds
to 16*17 = 272 bytes for a group of 100,000 members.
Iolus key bandwidth
LKH key bandwidth
Mykil bandwidth
1800000
1600000
1400000
1200000
1000000
Bytes
800000
600000
400000
200000
0
1
2
4
6
8
10
12
16
20
Number of Areas
Fig. 7. Bandwidth consumption during a leave event.
For a leave event, the length of key update message in Iolus
depends on the area size. For an area of 5000 members and
assuming 128-bit keys, the length of this message will be about
80,000 bytes. In LKH and Mykil, the size of rekeying message
during a leave event depends on the height of the tree. In par-
ticular, an updated key corresponding to a node  is encrypted
separately by keys corresponding all children of . Since, all
keys along the path from the root to the leaf corresponding
to the leaving member are updated, this implies a rekeying
message of (cid:0)  (cid:0)(cid:1)  (cid:0)(cid:2) (cid:3) (cid:4)(cid:5)(cid:5) bytes in LKH (100,000 members
in the group), and (cid:6)  (cid:0)(cid:6)  (cid:0)(cid:2) (cid:3) (cid:7)(cid:8)(cid:5) bytes in Mykil. Figure
7 shows the bandwidth requirements for the three protocols,
and Figure 8 shows in detail the bandwidth requirements in
Mykil and LKH. These graphs show clearly that both Mykil
and LKH require signiﬁcantly lower bandwidth at a member
than Iolus. Bandwidth requirement in Mykil is further reduced
by aggregating consecutive join or leave events. For example,
Figure 9 shows the reduction in Mykil by aggregating ten
consecutive leave events.
560
540
520
500
Bytes
480
460
440
420
400
LKH key bandwidth
Mykil bandwidth
1
2
4
6
8
10
12
16
20
Number of Areas
Fig. 8. Bandwidth consumption in Mykil and LKH during a leave event.
6000
5000
4000
Bytes
3000
2000
1000
0
LKH key bandwidth
Mykil bandwidth - Aggregation, Leave in Same group, Worst
case
Mykil bandwidth - Aggregation, Leave in Same group, Best
case
1
2
4
6
8
10
12
16
20
Number of Areas
Fig. 9. Bandwidth consumption in Mykil with aggregation of leave events.
D. Join and Rejoin Protocol Performance
As mentioned earlier, we have used OpenSSL libraries
for cryptography in our implementation. When a 2048-bit
key is used, the length of data that can be encrypted by
public key has an upper limit as 256 bytes in OpenSSL
library. At least 41 bytes are needed for the padding method
(RSA PKCS1 OAEP PADDING). So only 215 bytes of buffer
can be used to store data in every encryption function call. We
tried to ﬁt our data into this 215 bytes to avoid the hassle
of breaking a big chunk of data into smaller pieces, and
reassemble them back together. In step 7 of the join protocol
or step 6 of the rejoin protocol, an area controller needs to
send a set of keys along the path from the joining member to
the root in the auxiliary tree. This turned out to be too large to
ﬁt within a 215 B buffer. So, in our implementation, the area
controller creates a one-time symmetric key, communicates
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:28 UTC from IEEE Xplore.  Restrictions apply. 
that key to the client by encrypting it using the public key of
the client, and then send the set of auxiliary keys by encrypting
them using the one-time symmetric key.
Average time for a member join (join protocol) was mea-
sured to be about 0.45 seconds on network of three Pen-
tium III 1.0 GHz PCs running RedHat Linux 8.0. With
RSA blinding on option on, which blinds the correlation be-
tween the amount of time taken for encryption/decryption and
key value, time increases by only about 0.01 seconds for each
join operation. Average time for a member rejoin (rejoin pro-
tocol) was measured to be about 0.4 seconds under the same
computing environment. While there is not much difference
in the performance of join and rejoin protocols, the rejoin
protocol does not require any participation of the registration
server, thus reducing communication and computation load on
that server. Furthermore, if steps 4 and 5 are removed from
the rejoin protocol (option 2 discussed in Section IV-B), the
rejoin time is reduced to about 0.28 seconds.
E. Hand-held Devices
An important goal of Mykil is to enable clients access a
multicast service via smaller, hand-held devices, such as PDAs
and laptops. Current state-of-the-art PDAs running Linux have
400-500 MHz CPU and 16-32 MB memory. Based on our
discussion on storage requirements in Section V-A, it is clear
that the storage requirements of Mykil can easily be satisﬁed
by modern PDAs. To evaluate the computational feasibility
of running Mykil on such devices, we ported Mykil on a
low-end laptop (Celeron; 600 MHz; 64 MB RAM) running
Linux. We experimented with RC4 encryption algorithm to
encrypt/decrypt multicast data on it. We observed that it took
about 0.32 seconds to encrypt/decrypt a 16 MB ﬁle, i.e. data
can be encrypted or decrypted at about 50 MB/sec on this
device. This much computation power is more than adequate
for processing multimedia. For example, a 10 MB ﬁle can store
one minute of a high resolution MPEG-4 ﬁlm (resolution 720
x 416; sound quality 128 KBit/s 44 KHz). It will take only
about 200 milliseconds to encrypt/decrypt this ﬁle using RC4
on a modern PDA. These preliminary experiments suggest that
there should be no problem in porting Mykil on a modern
PDA. We plan to so in the near future.
VI. CONCLUSION AND FUTURE WORK
We have proposed a key management protocol called Mykil
that combines two hierarchy schemes in such a way that
all important advantages of the two schemes are retained.
These include scalability, mapping to the underlying network
infrastructure, and operation in a disconnected environment.
Mykil improves on LKH by reducing the resource require-
ments for a group member, providing support for operation
in a disconnected environment, and providing an ability to
map the group organization to the underlying network infras-
tructure. Mykil improves on Iolus by reducing the bandwidth
requirements and eliminating the performance bottleneck of
area controller. In addition, Mykil provides support for smaller,
hand-held devices, user mobility, and robustness. An analysis
shows that the resource requirements for a group member in
Mykil are reasonable, and a client can avail of this protocol
via smaller, hand-held devices. We have implemented Mykil
at the application level on a network of Unix/Linux system.
Performance measurement from this implementation shows
that the performance of the two protocols (join and rejoin
protocols) that are critical in providing support for member
mobility and fault tolerance is adequate. Furthermore, we have
also provided a proof-of-concept that Mykil is appropriate for
group members using hand-held devices. The future work in-
cludes building a large scale secure information disseminating
system using Mykil.
REFERENCES
[1] Conﬁguring VIP and Virtual IP Interface Redundancy.
URL: http://www.cisco.com/univercd/cc/td/doc/product/webscale/css/
advcfggd/vipredun.htm.
[2] N. Budhiraja, K. Marzullo, F. Schneider, and S. Toueg. Primary-backup
protocols: Lower bounds and optimal implementations. In The 3rd IFIP
Conference on Dependable Computing for Critical Applications, 1992.
[3] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas.
In
Multicast security: A taxonomy and some efﬁcient constructions.
Proceedings of INFOCOMM’99, March 1999.
[4] I. Chang, R. Engel, D. Kandlur, D. Pendarakis, and D. Daha. Key
management for secure Internet multicast using boolean function mini-
mization technique. ACM SIGCOMM’99, March 1999.
[5] F. Cristian. Understanding fault-tolerant distributed systems. Communi-
cations of ACM, 34(2):56–78, Feb 1991.
[6] A. Eskicioglu. Multimedia security in group communications: Recent
progress in wired and wireless networks. ACM Multimedia Systems
Journal, September 2003.
[7] T. Hardjono, B. Cain, and I. Monga. Intra-Domain group key manage-
ment protocol (IGKMP). Internet draft, IETF, February 2000.
[8] X. Li, Y. Yang, M. Gouda, and S. Lam. Batch rekeying for secure group
communications. In World Wide Web Conference 10, May 2001.
[9] J. Lin and S. Paul. RMTP: a reliable multicast transport protocol. In
Proceedings of IEEE INFOCOM’96, pages 1414–1424, 1996.
[10] D. McGrew and A. Sherman.
in large dy-
namic groups using one-way function trees, May 1998. Available at
http://www.cs.umbc.edu/(cid:0)sherman/Papers/itse.ps.
Key establishment
[11] S. Mishra. Key management
in large group multicast. Technical
Report CU-CS-940-02, Department of Computer Science, University of
Colorado, Boulder, CO., 2002.
[12] S. Mishra, C. Fetzer, and F. Cristian. The Timewheel group communi-
cation system. IEEE Transaction on Computers, 51(8), August 2002.
[13] S. Mittra.
Iolus: A framework for scalable secure multicasting.
In
Proceedings of the ACM SIGCOMM’97, September 1997.
[14] R. Molva and A. Pannetrat. Scalable multicast security in dynamic
groups. In the 6th ACM CCS, November 1999.
[15] C. Neuman and T. Theodore. Kerberos: An authentication service for
computer networks. IEEE Communications, 32(9), September 1994.
[16] S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. Reliable Multicast
IEEE Journal on Selected Areas in
Transport Protocol (RMTP).
Communications, 15(3):407–421, April 1997.
[17] A. Perrig, D. Song, and J. Tygar. ELK, a new protocol for efﬁcient
large-group key distribution. In the IEEE Symposium on Security and
Privacy, 2001.
[18] P. Rohatgi. A compact and fast hybrid signature scheme for multicast
packet authentication. In the 6th ACM CCS, November 1999.
[19] S. Setia, S. Koussih, and S. Jajodia. Kronos: A scalable group re-keying
approach for secure multicast. In Proceedings of the IEEE Symposium
on Research in Security and Privacy, May 2000.
[20] D. Wallner, E. Harder, and R. Agee. Key management for multicast:
Issues and architectures. RFC (Informational) 2627, IETF, June 1999.
[21] C. Wong, M. Gouda, and S. Lam. Secure group communication using
key graphs. In Proceedings of the ACM SIGCOMM’98, October 1998.
[22] R. Yang, S. Li, B. Zhang, and S. Lam. Reliable group rekeying: A
performance analysis. In ACM SIGCOMM’01, August 2001.
[23] S. Zhu, S. Setia, and S. Jajodia. Performance optimizations for group
key management schemes. In ICDCS, Providence, RI, May 2003.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:28 UTC from IEEE Xplore.  Restrictions apply.