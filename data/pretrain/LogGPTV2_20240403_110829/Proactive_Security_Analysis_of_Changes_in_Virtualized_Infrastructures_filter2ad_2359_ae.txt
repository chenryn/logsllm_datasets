not be denied at run-time. The security analysis hinges on the
authentic view of Weatherman when it comes to the topology
structure and the consequences of management operations.
Even though §3.1 seeks to establish a faithful representation
and a systematic approach to validate to model against real-
ity, it is still the case that “the map is not the territory”. The
Realization and operations models are likely to suﬀer from
58
subtle diﬀerences to the real conﬁguration. Furthermore, the
eﬀectiveness of Weatherman’s analysis largely depends on
the quality of the input speciﬁcations: First, the informa-
tion ﬂow rules represent the trust assumptions on isolation
properties and determine which components are assumed to
pass on information. Second, Weatherman only ﬁnds attack
states for conﬁguration changes as provided in the speciﬁed
security policy. Its analysis oﬀers a model checking for these
attack states; it does not constitute a security proof.
Security Testing: Besides arguing about the security
of our system, we systematically test its ability to detect
known violating operations and diﬀerentiate them from non-
violating ones, on the operations set of §5.2. For each opera-
tion, we probabilistically select parameters either from a set
of violating or non-violating ones. We issue the operation
to the authorization proxy with an expectation that for the
violation case we obtain a reject decision with a particular
policy violation as the reason. Otherwise, for non-violating
parameters, the operation should be accepted. Weatherman
detected all violation cases and behaves as expected. Clearly,
security testing and modeling are going hand-in-hand as an
iterative process, in which we make the experience that cor-
ner cases discovered in security testing serve well to improve
the model and to close the maps-territory gap.
5.2 Scalability and Optimizations
In a semi-production environment with 100 VMs, we mea-
sured an analysis time of Weatherman in the order of 500ms
(cf. Fig. 6) for the operations of Table 1, which is suitable
for run-time analysis. We further studied the scalability of
Weatherman with a VMware infrastructure simulator, which
is part of the oﬃcial VMware vCenter server appliance. For
a simulated environment with 1000 VMs, which resulted in a
Realization model graph with 4121 vertices and 6140 edges,
we obtained an overall analysis time of 253s for ﬁnding a
violation in a UpdatePortGroup operation. This makes our
approach suitable for the change plan analysis, but causes
a long blocking in a run-time analysis. In a simulated en-
vironment with 10000 VMs (41201 vertices, 61400 edges)
GROOVE ran out of available memory.
VM creation
VNic creation
VDisk creation
VLAN ID update
VNic creation
(Violation)
VLAN ID update
(Violation)
Graph Serialization
Groove Startup
Initial InfoFlow
Change Ops
Adjust InfoFlow
0
100
200
300
400
Runtime [ms]
500
600
700
Figure 6: Time measurements for the analysis of a
variety of operations, including two violating ones
(the last two). We measure the times for the graph
serialization, GROOVE start-up, initial and adjust-
ing information ﬂow analysis, as well as applying the
change operation.
We stress that establishing the models, methodology, and
analysis system has been the primary focus of this paper, and
not providing an optimized and scalable analysis. We now
outline multiple directions of optimizations and scalability
improvements. A short-term optimization is to reduce the
size of the Realization model graph by removing nodes of
59
types that are not addressed by production rules of the
grammar. Possible long-term optimizations are to transform
GROOVE graph grammars into native code (an approach
employed by GrGen [8]) and to exploit a parallel processing
of production rules (in particular for rules with universal
quantiﬁer and the conﬂuent simple information ﬂow rules).
6. RELATED WORK
Misconﬁgurations in networks have been a problem in the
operation of IT environments for a long time and solutions
have been proposed. Mahajan et al. [18] studied misconﬁgu-
rations in BGP routing conﬁguration changes by listening
to changes and assess these. Kim et al. [16] analysed the
evolution of network conﬁgurations by mining a repository of
network conﬁguration ﬁles. With the rise of software-deﬁned
networking, real-time monitoring and policy checking have
been achieved in these environments [13, 14]. In dynamic
virtualized infrastructures, vQuery [26] monitors conﬁgu-
ration changes in VMware environments and assess these
changes with regard to performance implications. Schiﬀman
et al. [25] proposed a monitoring system called Cloud Veri-
ﬁer that allows to monitor hosts and virtual machines with
regard to integrity requirements based on trusted computing
mechanisms. Overall, these approaches work in a reactive
way, i.e., they assess changes in the infrastructure after they
have happened, whereas we aim for complementary proactive
mitigation of misconﬁgurations.
Trustworthy hypervisors, such as sHype [24], oﬀer strong
guarantees and mechanisms of isolation between VMs on a
single physical system. Our user-conﬁgurable information
ﬂow rules can capture the diﬀerent trust assumptions in the
isolation of the hypervisor, and can embed the hypervisor
isolation into the larger context of virtualized infrastructure
isolation. The Trusted Virtual Datacenter (TVDc) [2] oﬀers
isolation and integrity by leveraging a trustworthy hyper-
visor, trusted computing, and automated setup of network
isolation. Weatherman is complementary to that by i) pro-
viding a secondary control mechanisms that checks if the
infrastructure is deployed according to a high-level security
policy; ii) verifying the changes that are automatically per-
formed by the TVDc system; and iii) providing checks for
further policies such as the mitigation of single point of fail-
ures. The security of VM images [29] is an important part
of the virtualized infrastructure security, but it is orthogonal
to our work that focused on the security of the topology.
A model-based approach for conﬁguration management has
been proposed in [19] that formalizes network conﬁgurations
in ﬁrst-order logic and employs Alloy [11] for model ﬁnding,
in order to detect conﬁguration errors. The model is limited
to network conﬁgurations, whereas our model covers the
entire virtualized infrastructure and provides a ﬁne-grained
model of management operations. Similarly, the veriﬁcation
of change operations in the context of statically and dynami-
cally routed networks has been studied [10]. Kikuchi et al.
analyze cloud infrastructure changes using Alloy [15], where
changes are manually speciﬁed. Our approach can automati-
cally analyze changes at runtime using our operations model.
Further, we perform an information ﬂow analysis to deter-
mine isolation properties. The analysis of ﬁrewall policies,
e.g., using model-checking [12], provide a complementary
approach and covers higher levels of the networking stack.
Graph transformations and in particular GROOVE have
found applications in other security-related scenarios. A secu-
[9] Ghamarian, A. H., de Mol, M., Rensink, A., Zambon, E., and
Zimakova, M. Modelling and analysis using GROOVE.
International Journal on Software Tools for Technology
Transfer (March 2011).
[10] Hagen, S., Seibold, M., and Kemper, A. Eﬃcient veriﬁcation of
IT change operations or: How we could have prevented
Amazon’s cloud outage. In Network Operations and
Management Symposium (April 2012), pp. 368–376.
[11] Jackson, D. Alloy: a lightweight object modelling notation.
[12] Jeffrey, A., and Samak, T. Model Checking Firewall Policy
ACM Trans. Softw. Eng. Methodol. 11 (April 2002), 256–290.
Conﬁgurations. In Proceedings of the 10th IEEE
International Conference on Policies for Distributed Systems
and Networks (2009), POLICY’09, IEEE Press, pp. 60–67.
[13] Kazemian, P., Chang, M., Zeng, H., Varghese, G., McKeown,
N., and Whyte, S. Real Time Network Policy Checking Using
Header Space Analysis. In 10th USENIX Symposium on
Networked Systems Design and Implementation (2013),
pp. 99–111.
[14] Khurshid, A., Zou, X., Zhou, W., Caesar, M., and Godfrey,
P. B. VeriFlow: Verifying Network-Wide Invariants in Real
Time. In 10th USENIX Symposium on Networked Systems
Design and Implementation (2013), pp. 15–27.
[15] Kikuchi, S., and Hiraishi, K. Improving reliability in
management of cloud computing infrastructure by formal
methods. In Network Operations and Management
Symposium (NOMS), 2014 IEEE (May 2014), pp. 1–7.
[16] Kim, H., Benson, T., Akella, A., and Feamster, N. The
Evolution of Network Conﬁguration: A Tale of Two Campuses.
In Proceedings of the 2011 ACM SIGCOMM Conference on
Internet Measurement Conference (2011), IMC ’11,
pp. 499–514.
[17] Koch, M., Mancini, L. V., and Parisi-Presicce, F. A
Graph-based Formalism for RBAC. ACM Trans. Inf. Syst.
Secur. 5, 3 (Aug. 2002), 332–365.
[18] Mahajan, R., Wetherall, D., and Anderson, T.
Understanding BGP Misconﬁguration. In Proceedings of the
2002 Conference on Applications, Technologies,
Architectures, and Protocols for Computer Communications
(2002), SIGCOMM ’02, pp. 3–16.
[19] Narain, S. Network Conﬁguration Management via Model
Finding. In Proceedings of the 19th conference on Large
Installation System Administration Conference - Volume 19
(2005), LISA ’05, pp. 15–15.
[20] Oppenheimer, D., Ganapathi, A., and Patterson, D. A. Why
do internet services fail, and what can be done about it? In
Proceedings of the 4th conference on USENIX Symposium on
Internet Technologies and Systems - Volume 4 (2003).
[21] Rensink, A., and Kuperus, J.-H. Repotting the geraniums: on
nested graph transformation rules. In Graph transformation
and visual modelling techniques (2009), vol. 18 of Electronic
Communications of the EASST.
[22] Ristenpart, T., Tromer, E., Shacham, H., and Savage, S. Hey,
You, Get Oﬀ of My Cloud: Exploring Information Leakage in
Third-Party Compute Clouds. In Proceedings of the 16th
ACM conference on Computer and communications security
(2009), pp. 199–212.
[23] Rozenberg, G., Ed. Handbook of Graph Grammars and
Computing by Graph Transformation: Volume I.
Foundations, vol. 1. World Scientiﬁc Publishing Co., Inc.,
River Edge, NJ, USA, 1997.
[24] Sailer, R., Jaeger, T., Valdez, E., Caceres, R., Perez, R.,
Berger, S., Griffin, J. L., and Doorn, L. v. Building a
mac-based security architecture for the xen open-source
hypervisor. In Proceedings of the 21st Annual Computer
Security Applications Conference (2005), pp. 276–285.
[25] Schiffman, J., Sun, Y., Vijayakumar, H., and Jaeger, T. Cloud
Veriﬁer: Veriﬁable Auditing Service for IaaS Clouds. In
Proceedings of the IEEE 1st International Workshop on
Cloud Security Auditing (CSA 2013) (June 2013).
[26] Shafer, I., Gylfason, S., and Ganger, G. R. vQuery: a
Platform for Connecting Conﬁguration and Performance.
VMware Technical Journal 1, 2 (Dec. 2012).
[27] VMware. vSphere 5.0 API Reference, Aug 2011.
http://pubs.vmware.com/vsphere-50/topic/com.vmware.wssdk.
apiref.doc_50/right-pane.html.
(EN-001164-04), 2013.
[28] VMware. vSphere Security, ESXi 5.5, vCenter Server 5.5
[29] Wei, J., Zhang, X., Ammons, G., Bala, V., and Ning, P.
Managing Security of Virtual Machine Images in a Cloud
Environment. In Proceedings of the ACM Workshop on Cloud
Computing Security (2009), CCSW ’09, ACM, pp. 91–96.
rity case study has been presented in [9] that deals with the
graph-based modeling of physical and digital environments.
The modeling and analysis of role-based access control sys-
tems has also been achieved using graph transformations [17].
This demonstrates the generality of graph transformations
to a wide variety of security application domains.
7. CONCLUSIONS
In this work we address the problem of misconﬁgurations
and resulting security failures in virtualized infrastructures.
Our solution consists of a practical tool called Weatherman
that employs a formal model of cloud management opera-
tions, an information ﬂow analysis to determine isolation
properties, and a policy veriﬁer in order to proactively assess
infrastructure changes with regard to their security impact.
For instance, we are able to detect and mitigate changes that
would i) break the network isolation of tenants, ii) create
virtual machines in the wrong location, and iii) introduce
single point of failures. We oﬀer the run-time enforcement
of security policies as well as change planning for what-if
analyses. While for concreteness we focus in this paper on
a particular practical system and goals, we believe that our
work is a ﬁrst step towards a general veriﬁcation methodol-
ogy for virtualized infrastructures. One key aspect of our
approach is the use of graph rewriting, which oﬀers an ex-
pressive and intuitive method for formalizing the operations,
information ﬂow analysis, as well as policies.
As part of future work, we consider the integration of
access control with our operations transition model, where we
extend our existing operations model with required privileges.
Given a set of users and their privileges, we can then model-
check which operations can be issued by the users that may
result in an insecure state.
Acknowledgments
This work is partially supported by the EU H2020 projects SUPER-
CLOUD (grant No. 643964) and PrismaCloud (grant No. 644962),
and Swiss Secretariat for Education, Research and Innovation (con-
tract No. 15.0025). We thank our shepherd John McDermott and
the anonymous reviewers for insightful comments, as well as Arend
Rensink for supporting us with GROOVE.
8. REFERENCES
[1] Avizienis, A., Laprie, J.-C., Randell, B., and Landwehr, C.
Basic concepts and taxonomy of dependable and secure
computing. Dependable and Secure Computing, IEEE
Transactions on 1, 1 (jan.-march 2004), 11 – 33.
[2] Berger, S., Cáceres, R., Pendarakis, D., Sailer, R., Valdez,
E., Perez, R., Schildhauer, W., and Srinivasan, D. Tvdc:
managing security in the trusted virtual datacenter. SIGOPS
Oper. Syst. Rev. 42 (January 2008), 40–47.
[3] Bleikertz, S., and Groß, T. A Virtualization Assurance
Language for Isolation and Deployment. In IEEE
International Symposium on Policies for Distributed Systems
and Networks (POLICY’11) (Jun 2011), IEEE.
[4] Bleikertz, S., Groß, T., Schunter, M., and Eriksson, K.
Automated Information Flow Analysis of Virtualized
Infrastructures. In 16th European Symposium on Research in
Computer Security (ESORICS’11) (Sep 2011), Springer.
[5] Bleikertz, S., Groß, T., and Vogel, C. Cloud Radar: Near
Real-Time Detection of Security Failures in Dynamic
Virtualized Infrastructures. In Annual Computer Security
Applications Conference (ACSAC 2014) (Dec 2014), ACM.
[6] CSA. Top threats to cloud computing v1.0. Tech. rep., Cloud
[7] ENISA. Cloud computing: Beneﬁts, risks and recommendations
Security Alliance (CSA), mar 2010.
for information security. Tech. rep., European Network and
Information Security Agency (ENISA), nov 2009.
[8] Geiß, R., Batz, G. V., Grund, D., Hack, S., and Szalkowski,
A. GrGen: A Fast SPO-Based Graph Rewriting Tool. In Third
International Conference on Graph Transformation (2006),
Springer, pp. 383–397.
60