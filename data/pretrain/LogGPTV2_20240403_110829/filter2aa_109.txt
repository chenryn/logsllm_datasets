# One-Liners to Rule Them All

## Introduction
- **Authors:** @egyp7, @wvuuuuuuuuuuuuu
- **Purpose:** This guide covers Bash basics and provides useful one-liners and demonstrations.
- **Scope:**
  - Basic Bash commands
  - Minor portability considerations
  - Useful one-liners and demos
- **Exclusions:**
  - Linux system administration (though there is some overlap)
  - Detailed `man` page reading (use `man bash` for comprehensive details)

## Abstract
Sometimes, you need to perform specific tasks, such as:
- Extracting the third column from a CSV file
- Sorting IP addresses
- Filtering and sorting IP addresses based on conditions in other columns

## Example One-Liners
```bash
cat file
cat file | grep open
cat file | grep -i open
cat file | grep -i open | cut -d, -f3
grep -i open file | cut -d, -f3
awk -F, 'tolower($1) ~ /open/ { print $3 }' file | sort -V
```

## Conventions
- Commands are usually suffixed with a `man(1)` section.
- Most of the content here is from `man` section 1.
- Some overlaps exist with syscalls (`man` section 2), C functions (`man` section 3), and configuration files (`man` section 5).

## Core Concepts
- **Pipes and Redirection**
- **Variables and Substitution**
- **Standard Tools**
- **History Expansion**
- **Brace Expansion**
- **Tilde Expansion**

### Pipes and Redirection
- **Example:**
  ```bash
  echo wut | cat
  echo wut > /tmp/wut
  cat /tmp/wut
  cat &1
  exec 3<>/dev/tcp/10.1.1.1/80; echo $'GET / HTTP/1.0\n' >&3; cat <&3
  ```

### Variables and Substitution
- **Example:**
  ```bash
  var="value"
  echo $var
  echo ${var//old/new}
  ```

### Standard Tools
- **Commonly used tools:**
  - `grep`, `cut`, `awk`, `sort`, `sed`

### History Expansion
- **Keyboard Shortcuts:**
  - `\e[A`: Search backward in history
  - `\e[B`: Search forward in history

### Brace Expansion
- **Examples:**
  ```bash
  echo {a,b,c}
  cp file.{csv,txt}
  {1..99} # same as `seq 1 99`
  {01..99} # Zero-pad
  {01..99..2} # Zero-pad, with a step of 2
  ```

### Tilde Expansion
- **Examples:**
  ```bash
  ~user # User's home directory
  ~ # Current user's home directory
  ~+ # Current working directory ($PWD)
  ~- # Previous working directory ($OLDPWD)
  ```

### Loops
- **For Loop:**
  ```bash
  for f in *; do mv "$f" "${f/.csv/.txt}"; done
  ```
- **While Loop:**
  ```bash
  while read line; do command; done < file
  ```

### Remote Operations with Bash
- **Examples:**
  ```bash
  gzip -c file > /dev/tcp/192.168.0.1/80
  for port in {1..1023}; do : 2> /dev/null > "/dev/tcp/192.168.0.1/$port" && echo "$port"; done
  ```

### Random Stuff
- **Examples:**
  ```bash
  xsel -b < file.bin
  xxd -r -p < file.bin
  perl -e 'print "\105\114\106\177"' > file.bin
  ```

### Bonus
- **Metasploit Shell Sessions:**
  - Automatic upload and download functionality.

### Hosting Files
- **Examples:**
  ```bash
  python -m SimpleHTTPServer 8080
  python -m http.server 8080
  ruby -run -e httpd
  php -S 0:8080
  busybox httpd -p 8080
  ```

## Resources
- [explainshell.com](http://explainshell.com) - Break down shell commands
- [The Linux Documentation Project (TLDP)](http://www.tldp.org/LDP/abs/html/) - Classic resource
- [Bash Hackers Wiki](http://wiki.bash-hackers.org/) - Comprehensive and awesome
- [Bash Pitfalls](https://mywiki.wooledge.org/BashPitfalls) - Good to know
- [Stack Overflow](https://stackoverflow.com) - Google search with `site:stackoverflow.com`

**Authors:**
- @egyp7
- @wvuuuuuuuuuuuuu