a full Linux-based software stack on an FPGA. Contrary to
PHMon, HDFI applies invasive modiﬁcations to the processor
pipeline (adds a 1 bit tag to L1 data cache and modiﬁes the
decode and execute stages of the pipeline). HDFI is restricted
to enforcing data-ﬂow isolation policies to prevent memory
corruption. Although PHMon can be used for sensitive data
protection (e.g., preventing Heartbleed), compared to HDFI,
PHMon has limited capabilities to protect against memory
corruption. However, unlike HDFI, PHMon can be applied
in security use cases beyond memory corruption prevention,
such as accelerating the detection of security vulnerabilities
USENIX Association
29th USENIX Security Symposium    809
Table 1: Comparison of previous hardware monitoring techniques with PHMon
Monitoring
Mechanism
Source Code
Requirement Modiﬁcation Methodology
Use Cases
Overhead
Hardware
Evaluation
Avg. Performance
Power/Area
Overhead
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
# N/A
Raw numbers
(4%-11%) / (7%)
(47%) / (55%)
(10%) / (110%)
(14.6%) / (32.5%)
# N/A
(26%) / (15%)
# N/A
(5%) / (13.5%)
Mechanism
Hardbound [27]
SafeProc [32]
Watchdog [51]
LIFT [59]
TaintCheck [54]
Multi-Core DIFT [50]
DIFT [78]
Raksha [19]
FlexiTaint [81]
MemTracker [82]
DataSafe [13]
DISE [16]
LBA [11]
Optimized LBA [12]
FADE [30]
Partial Monitoring [46]
PUMP [28]
Harmoni [26]
FlexCore [25]
HDFI [76]
Nile [23]
REST [74]
Tag-based
Tag-based
Tag-based
SW (DBI)
SW (Tag-based)
SW (Threads)
Tag-based
Tag-based
Tag-based
Tag-based
Tag-based
Binary Rewriting
Trace-based
Trace-based
Trace-based
Trace-based
Tag-based
Tag-based
Tag-based
Tag-based
Trace-based
Tag-based
BC
BC
BC
DIFT
DIFT
DIFT
DIFT
DIFT
DIFT
MC
DIFT
FI, (De)compress
MC, DIFT, LOCKSET
MC, DIFT, LOCKSET
Memory & Propagation Tracking
MC, RC, DIFT, BC
NXD+NWC, DIFT, CFI, MC
MC, RC, DIFT, BC
MC, DIFT, BC, SEC
SL Enhancement, Code Ptr Sep, Info Leak
Kernel, Stack, and VTable Ptr Prot
Shadow Stack
Stack & Heap Prot
Shadow Stack, Fuzzing
Info Leak, Debugging
Yes
Yes
Yes
No
No
No
No
No
Yes
Yes
No
No
No
No
No
No
Yes
Yes
Yes
Yes
No
No
No
Inv
Inv
Inv
SW
SW
SW
Sim
Sim
Sim
SW
SW
Sim
Min-inv
Sim & Emul
Inv
Min-inv
Inv
Inv
Inv
Min-inv
Min-inv
Min-inv
Min-inv
Inv
Min-inv
Min-inv
Inv
Min-inv
Inv
Min-inv
FPGA
Sim
Sim
Sim
Sim
Sim
Sim
Sim
Sim
Sim
RTL Sim
RTL Sim
FPGA
FPGA
Sim
FPGA
5%-9%
5%
15%-25%
∼200%-300%
Avg: # N/A
48%
1.1%
48%
1%-3.7%
2.7%
Avg: # N/A
Avg: # N/A
390%-700%
2%-327%
20%-80%
50%
∼8%
∼1%-8%
5%-44%
0.94%
0.78%
2%-25%
0.94%
PHMon (This Work)
Trace-based
“Inv” = Invasive; “Min-inv” = Minimally-invasive; “# N/A” = Numbers not available; Sim = “Simulation”; Emul = “Emulation”; “MC” = Memory Checking; “RC” = Reference Counting
“BC” = Bounds Checking; “FI” = Fault Isolation; “SEC” = Soft Error Checking; “SEP” = Seperation; “SL” = Standard Library; “Ptr” = Pointer; “Prot” = Protection; “Info” = Information; “Leak” = Leakage
(we demonstrate this capability in Section 5).
Overall, to the best of our knowledge, the existing ﬂexible
tag-based monitoring techniques are a subset of an event-
action monitoring model, where the actions are restricted to
tag-propagation and raising an exception (handled by soft-
ware). In this regard, these tag-based FHMons are reference
monitors that enforce memory protection policies. PHMon
provides a more comprehensive language for actions. Hence,
we can leverage PHMon in a wider range of security appli-
cations, not limited as a reference monitor to enforce mem-
ory protection policies. An efﬁcient implementation of a tag-
based FHMon, such as HDFI, is complementary to PHMon.
In a multi-core system, Log-Based Architectures (LBA)
[10, 11] implement trace-based monitors that capture an exe-
cution log from a monitored program on one core and transfer
the collected log to another general-purpose core, where a
dynamic tool (lifeguard) executes and enforces the security
policies. The optimized LBA [12] considerably reduces the
performance overhead of LBA [11] (from 3×-5× to ∼50%)
at the cost of higher power and area overheads. From the
perspective of the event-action monitoring model, LBA’s
expressiveness in terms of monitoring rules and actions is
close to software-based techniques. However, the LBA trace-
based monitor suffers from considerable performance, power,
and area overheads. Similar to optimized LBA, FADE [30],
DISE [16], and partial monitoring [46] apply ﬁltering, pattern
matching, and dropping decisions to the execution trace, re-
spectively. Rather than utilizing an additional general-purpose
core, PHMon provides a programmable hardware capable of
performing a smaller range of monitoring techniques, but
does so efﬁciently and with signiﬁcantly lower power and
area overheads. Among the trace-based FHMons, Nile [23] is
the closest work to PHMon. Compared to LBA architectures
and PHMon, Nile provides a restricted set of possible actions;
however, Nile’s actions are not limited to tag propagation.
Nile only supports comparison operations (no other arith-
metic or logical operations), which restricts its applicability
for different use cases.
2.3 Generic Monitoring Hardware Extensions
Modern processors provide hardware features and extensions
to collect runtime hardware usage information. Hardware Per-
formance Counters (HPCs) are hardware units for counting
the occurrence of microarchitectural events, such as cache
hits and misses, at runtime. A number of previous works use
HPCs for malware detection [24, 40, 57, 73]. However, recent
studies [21, 87] shed light on the pitfalls and challenges of
using HPCs for security. Moreover, HPCs are limited to a
predeﬁned pool of microarchitectural events, while PHMon
and FHMons provide a set of monitoring rules to specify cus-
810    29th USENIX Security Symposium
USENIX Association
Figure 1: An overview of the event-action model provided in PHMon.
Figure 2: The RoCC interface extended with
commit log execution trace.
tom events. Additionally, PHMon and FHMons are capable
of performing follow-up actions, while HPCs are restricted to
interrupts.
Last Branch Record (LBR) is a hardware feature available
in the recent Intel processors, which records a history of the 16
most recent indirect jumps. Several works [14, 58, 84] rely on
LBR, as a pseudo shadow stack, to mitigate Return-Oriented
Programming (ROP) attacks. However, history-ﬂushing at-
tacks [9, 72] can evade such LBR-based detection techniques.
LBR is not designed for security purposes; hence, it cannot
provide a principled security solution. Unlike LBR, PHMon’s
implemented shadow stack is not limited to maintaining only
the last 16 branch records (the limit for PHMon is the al-
located memory size); hence, PHMon is not vulnerable to
history ﬂushing attacks.
Modern processors also provide architectural extensions,
like Intel Processor Trace (PT) [66] and ARM CoreSight [48],
to capture debugging information. Both Intel PT and ARM
CoreSight provide enormous debugging capabilities; how-
ever, these technologies are primarily designed to provide
debugging traces for post-processing. Online processing ca-
pabilities, however, are essential for the timely detection of
security threats. FHMons and PHMon expand the online mon-
itoring with efﬁcient online processing and prevention capa-
bilities. Although Intel PT is designed for ofﬂine debugging
and failure diagnosis, recent techniques [29,31,39] utilize this