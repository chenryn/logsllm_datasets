title:Automatic error finding in access-control policies
author:Karthick Jayaraman and
Vijay Ganesh and
Mahesh V. Tripunitara and
Martin C. Rinard and
Steve J. Chapin
Automatic Error Finding in Access-Control Policies
∗
Karthick Jayaraman
PI:EMAIL
Microsoft
Vijay Ganesh
MIT
PI:EMAIL
Mahesh Tripunitara
University of Waterloo
PI:EMAIL
Martin Rinard
MIT
PI:EMAIL
ABSTRACT
Verifying that access-control systems maintain desired se-
curity properties is recognized as an important problem
in security. Enterprise access-control systems have grown
to protect tens of thousands of resources, and there is a
need for veriﬁcation to scale commensurately. We present
a new abstraction-reﬁnement technique for automatically
ﬁnding errors in Administrative Role-Based Access Control
(ARBAC) security policies. ARBAC is the ﬁrst and most
comprehensive administrative scheme for Role-Based Access
Control (RBAC) systems. Underlying our approach is a
change in mindset: we propose that error ﬁnding comple-
ments veriﬁcation, can be more scalable, and allows for the
use of a wider variety of techniques. In our approach, we use
an abstraction-reﬁnement technique to ﬁrst identify and dis-
card roles that are unlikely to be relevant to the veriﬁcation
question (the abstraction step), and then restore such ab-
stracted roles incrementally (the reﬁnement steps). Errors
are one-sided: if there is an error in the abstracted policy,
then there is an error in the original policy. If there is an
error in a policy whose role-dependency graph diameter is
smaller than a certain bound, then we ﬁnd the error. Our
abstraction-reﬁnement technique complements conventional
state-space exploration techniques such as model checking.
We have implemented our technique in an access-control pol-
icy analysis tool. We show empirically that our tool scales
well to realistic policies, and is orders of magnitude faster
than prior tools.
Categories and Subject Descriptors: K.6.5 [Manage-
ment and Information Systems]: Security and Protection;
D.4.6 [Operating Systems]: Security and Protection; D2.4
[Software Engineering]: Software/Program Veriﬁcation;
General Terms: Security, veriﬁcation.
∗This work was performed when the author was a graduate
student at Syracuse University.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
Steve Chapin
Syracuse University
PI:EMAIL
1.
INTRODUCTION
This paper presents a technique and a tool for ﬁnding
errors in access-control policies. Specifying and managing
access-control policies is a problem of critical importance in
system security. Researchers have proposed access-control
frameworks (e.g., Administrative Role Based Access Control
— ARBAC [36]) that have considerable expressive power,
and can be used to specify complex policies. However, we
do not have adequate tools for analyzing such complex poli-
cies. Without tools for analyzing these policies, adminis-
trators cannot determine the correctness of policies. As a
consequence, several of these sophisticated frameworks are
not deployed in practice.
An access-control policy contains an error if it allows an
unauthorized user to access a resource. This is considered an
error because a security property that an enterprise wants
to (or even is legally required to) maintain, such as sepa-
ration of privilege [35], is violated by the user’s access to
the resource.
In RBAC, for example, if a user is already
a member of a sensitive role, we may want to ensure that
there exists no reachable state in which he is authorized to
another sensitive role.
Administrators require eﬃcient tools for identifying such
errors in policies prior to deployment. Access-control poli-
cies for reasonably large systems feature several complexity
sources that make it diﬃcult to ﬁnd errors in them. An
access-control policy is essentially a ﬁnite-state machine that
accepts valid requests. Depending on the framework, the
policy may comprise states only or comprise both states and
state changes. The nature of the states and state changes are
sources of complexity (We explain the sources of complexity
in Section 4). We need tools that are eﬀective irrespective
of the complexity of the access-control policies.
Automated analysis and veriﬁcation of access-control poli-
cies is both an area of active research [11,13,17–21,26,28,30,
39,43,46–48] and practical interest [1,2]. Model checking [8]
has emerged as a promising, automated approach to the
veriﬁcation problem [13, 21, 46]. In this approach, a model
checker takes as input an access-control policy and a security
property, and declares whether or not the policy adheres to
the input security property. The idea is similar to verifying
computer programs; the access-control policy is analogous to
a computer program, and the security property is analogous
to a program property.
Ideally, the model checker checks
whether the property always holds for all possible authoriza-
tions that the policy allows. However, the model-checking
problem for the class of access-control policies that we con-
163sider is intractable in general (PSPACE-complete [21, 39]),
and scalability for practical veriﬁcation tools remains a sig-
niﬁcant issue despite considerable progress (see Section 5).
We present a new technique that combines abstraction re-
ﬁnement [6] and bounded model checking for analyzing com-
plex security policies. Abstraction reﬁnement is a paradigm
for eﬃciently verifying a property on a system’s abstrac-
tion that is iteratively constructed to contain only the rel-
evant parts; the techniques vary depending on the speciﬁc
system and property [4, 6, 12]. The use of a sophisticated
abstraction-reﬁnement algorithm makes our technique sig-
niﬁcantly more eﬃcient than previous approaches. In real-
istic policies, our algorithm is often able to abstract most
of the access-control policy while preserving the presence of
any errors. This abstraction enables the underlying bounded
model checker to ﬁnd the error in much less time.
The insight behind the abstraction we use is that the
dependency graph of the roles for many real-world access-
control policies often contains many tightly-knit sets of roles
that are loosely-connected to other tightly-knit sets of roles.
This structure reﬂects the organization of large institutions
(such as corporations, hospitals, and universities) as a con-
glomeration of loosely coupled tightly-knit departments or
groups. Abstracting the policy produces a much smaller pol-
icy because it eliminates a large number of loosely-coupled
roles that do not directly interact with the target set of
tightly-coupled roles. If the loosely-coupled roles are indi-
rectly involved in the error, the reﬁnement step will incre-
mentally add them back to the abstraction, enabling the
analysis to ﬁnd the error. Our results show that even when
these roles are required to ﬁnd the error, the analysis can
usually ﬁnd the error after applying a few reﬁnement steps.
We have implemented this technique in the Mohawk
access-control policy analysis tool. Mohawk accepts as in-
put an access-control policy and a safety question. If Mo-
hawk ﬁnds an error in the input policy, it terminates and
produces as output a sequence of actions that cause the er-
ror. We show that Mohawk scales very well as the com-
plexity of the input policies increase, and is orders of mag-
nitude faster than competing tools. The Mohawk tool is
open source and is available from the Google Code website:
http://code.google.com/p/mohawk/.
Contributions
We make the following contributions in this paper:
1. We describe an abstraction-reﬁnement based approach
for automatically ﬁnding errors in access-control poli-
cies (speciﬁcally, ARBAC policies). The resulting
technique, implemented on top of a bounded model
checker, scales very well as the size and complexity
of the input policies increase. Our technique eﬀec-
tively tackles the sources of complexity (Section 4)
in large, complex, real-world policies. Although we
focus on error ﬁnding in this paper, our abstraction-
reﬁnement technique can be used in conjunction with
model checking to perform veriﬁcation.
Our technique can also be used for error ﬁnding in
frameworks other than ARBAC as the sources of com-
plexity that we identify in Section 4 are not unique to
ARBAC. They exist in other access-control schemes as
well, such as administrative scope [9] and even the orig-
inal access matrix scheme due to Harrison et al. [17].
2. An implementation of our technique in a tool called
Mohawk. Mohawk accepts as input an access-control
policy and a safety question, and outputs whether or
not it found an error. Following similar techniques
from software veriﬁcation, our technique constructs an
approximation (and successive reﬁnements, if neces-
sary) of the input policy, and checks for errors.
It
terminates when an error has been found or the un-
derlying bounded model checker has reached a pre-
determined bound.
3. We provide a detailed experimental comparison of Mo-
hawk against NuSMV [33], a well known model check-
ing and bounded model checking tool, and RBAC-
PAT [13, 46], a tool speciﬁcally designed for analyzing
ARBAC policies.
In comparison to the existing ap-
proaches, Mohawk scales well with the size and com-
plexity of the input policies.
Our experimental evaluation uses a benchmark that in-
cludes a realistic case study for banking (Section 5.1).
The case study has helped us understand the aspects
of the ARBAC policy language that are likely to be
used in creating real-world policies. In particular, we
have discovered that the sources of complexity in AR-
BAC policies that we discuss in Section 4 can arise
in realistic settings. Our benchmark is also publicly
available along with the tool.
Organization: The remainder of our paper is organized
as follows.
In Section 2, we discuss access-control models
and schemes. In Section 3, we describe the architecture of
Mohawk. In Section 4, we describe the sources of complex-
ity from the standpoint of error ﬁnding and how Mohawk
deals with them. In Section 5, we present empirical results
that demonstrate the eﬃcacy of our approach. We discuss
related work in Section 6 and conclude with Section 7.
2. PRELIMINARIES
In this section, we provide basic deﬁnitions and concepts
relating to access-control policies, in particular the ARBAC
framework. We also introduce the error-ﬁnding problem for
access-control systems.
An access-control policy is a state-change system, (cid:104)γ, ψ(cid:105),
where γ ∈ Γ is the start or current state, and ψ ∈ Ψ is a
state-change rule. The pair (cid:104)Γ, Ψ(cid:105) is an access control model
or framework.
The state, γ, speciﬁes the resources to which a principal
has a particular kind of access. For example, γ may specify
that the principal Alice is allowed to read a particular ﬁle.
Several diﬀerent speciﬁcations have been proposed for the
syntax for a state. Two well-known ones are the access ma-
trix [15,17] and Role-Based Access Control (RBAC) [10,38].
In this paper, we focus on the latter to make our contribu-
tions concrete.
In RBAC, users are not assigned permissions directly, but
via a role. Users are assigned to roles, as are permissions,
and a user gains those permissions that are assigned to the
same roles to which he is assigned. Consequently, given the
set U of users, P of permissions and R of roles, a state γ in
RBAC is a pair (cid:104)UA, PA(cid:105) where UA ⊆ U ×R is the user-role
assignment relation, and PA ⊆ P × R is the permission-role
assignment relation.
RBAC also allows for roles to be related to one another in
a partial order called a role hierarchy. However, as we point
164Roles
Users
RBAC State
{BudgetCommitee, Finance, Acct, Audit,
TechSupport, IT, Admin}
{Alice, Bob}
UA {(cid:104)Bob, Acct(cid:105), (cid:104)Bob, Audit(cid:105), (cid:104)Alice, Admin(cid:105)}
can assign
can revoke
State-Change Rule
{(cid:104)Admin, Finance, BudgetCommittee(cid:105),
(cid:104)Admin, Acct ∧ ¬Audit, Finance(cid:105),
(cid:104)Admin, TRUE, Acct(cid:105), (cid:104)Admin, TRUE, Audit(cid:105)
(cid:104)Admin, TechSupport, IT(cid:105),
(cid:104)Admin, TRUE, TechSupport(cid:105)}
{(cid:104)Admin, Acct(cid:105), (cid:104)Admin, Audit(cid:105),
(cid:104)Admin, TechSupport(cid:105)}
Figure 1: State and state-change rules for an ARBAC policy
out in Section 2.2 under “The role hierarchy,” in the context
of this paper, we can reduce the error-ﬁnding problems of
interest to us to those for which the RBAC state has no role
hierarchy.
Figure 1 contains a example of an RBAC state for a hypo-
thetical company with 7 roles and 2 users, namely Alice and
Bob. Alice is assigned to the Admin role. Bob is assigned
to the Acct and Audit roles. For the sake of illustration
we have only a limited number of roles in the example. We
explain how to interpret the state-change rules in the next
section.
2.1 ARBAC
The need for a state-change rule, ψ, arises from a tension
between security and scalability in access control systems.
Realistic access control systems may comprise tens of thou-
sands of users and resources. Allowing only a few trusted
administrators to handle changes to the state (e.g., remove
read access from Alice) does not scale. A state-change rule
allows for the delegation of some state changes to users that
may not be fully trusted.
ARBAC [36] and administrative scope [9] are examples of
such schemes for RBAC. To our knowledge, ARBAC is the
ﬁrst and most comprehensive state-change scheme to have
been proposed for RBAC. This is one of the reasons that
research on policy veriﬁcation in RBAC [13,30,46], including
this paper, focuses on ARBAC.
An ARBAC speciﬁcation comprises three components,
URA, PRA, and RRA. URA is the administrative com-
ponent for the user-role assignment relation, UA, PRA is
the administrative component for the permission-role assign-
ment relation, PA, and RRA is the administrative compo-
nent for the role hierarchy.
Of these, URA is of most practical interest from the stand-
point of error ﬁnding. The reason is that in practice, user-
role relationships are the most volatile [25]. Permission-role
relationships change less frequently, and role-role relation-
ships change rarely. Furthermore, as role-role relationships
are particularly sensitive to the security of an organization,
we can assume that only trusted administrators are allowed
to make such changes.
PRA is syntactically identical to URA except that the
rules apply to permissions and not users. Consequently, all
our results in this paper for URA apply to PRA as well. We
do not consider analysis problems that relate to changes in
role-role relationships for the reasons we cited above.
we mean the URA component that is used to manage user-
role relationships.
URA. A URA speciﬁcation comprises
two relations,
can assign and can revoke. The relation can assign is used
to specify under what conditions a user may be assigned to
a role, and can revoke is used to specify the roles from which
users’ memberships may be revoked. We call a member of
can assign or can revoke a rule.
A rule in can assign is of the form (cid:104)ra, c, rt(cid:105), where ra
is an administrative role, c is a precondition and rt is the
target role. An administrative role is a special kind of role
associated with users that may administer (make changes
to) the RBAC policy. The ﬁrst component of a can assign
rule identiﬁes the particular administrative role whose users
may employ that rule as a state change.
A precondition is a propositional logic formula of roles in
which the only operators are negations and conjunctions.
Figure 1 contains the can assign and can revoke rules for
our example RBAC state. An example of c is Acct ∧¬Audit
in the can assign rule that has Finance as the target role.
For an administrator, Alice, to exercise the rule to assign
a user Bob to Finance, Alice must be a member of Admin,
Bob must be a member of Acct and must not be a member
of Audit.
A can revoke rule is of the form (cid:104)ra, rt(cid:105). The existence of
such a rule indicates that users may be revoked from the role
rt by an administrator that is a member of ra. For example,