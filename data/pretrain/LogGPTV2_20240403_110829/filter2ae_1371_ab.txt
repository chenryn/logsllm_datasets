            a.x = 5;
            a.y = 7;
            x.push(a);
        }
    }
### 3 漏洞利用方式
在第2节中对合约
BelluminarBank存在的几个漏洞进行了分析，下面将说明如何利用这个漏洞提取合约的全部余额，这里在Remix在线编译环境中部署该合约，并演示其利用方式。
首先部署合约，在部署参数中设置secrete 为“0x01”，deposit_term为1000，msg.value为 31337 wei。
部署合约后，合约的全局变量如下图所示：
这样，合约目前的余额是 31337 wei，合约拥有者的地址为：0xca35b7d915458ef54 0ade6068dfe2f44e8fa733c。
下面开始需要构造条件使得攻击者可以成功调用confiscate函数。
**步骤1: 覆盖owner并构造整数溢出条件**
要想转走合约余额，首先必须修改合约的owner。利用局部结构体 investment 修改合约owner，需满足条件：
  1. account = balances.length
  2. deposit_term >= balances[balances.length – 1].deposit_term + 1 years
设置攻击者（0x1472…160C）的invest调用参数如下：
  * msg.value = 1 wei (因为在合约初始化时owner已经存入一笔金额，所以此时balances数组长度为1，为了不改变balances数组长度，这里依然将其设置为1 we i
  * depositsit_term = 2^256 - 1 years = 115792089237316195423570985008687907853269984665640564039457584007913098103936 （在步骤2中需要利用这个数值构造溢出，同时这个值可以使源码中 require 条件得到满足）
  * account = 1 (满足条件 account >= balances.length)
调用之后，新的存款记录数据将存放在balances数组索引为1的位置。此时的balances数组情况和全局storage变量情况如下图所示。
可以发现，owner已经修改为攻击者地址，同时head被传入的deposit_term覆盖为一个超大值。
而提取余额是从balances数组中head索引开始的存款记录开始计算数额的。显然，为了提取到合约owner的余额，即balances[0]账户的余额，head必须被覆盖为0。因此，需要进行第二次storage变量覆盖，修改head。
**步骤2: 恢复head并绕过deposit_term限制**
继续设置攻击者调用invest的参数：
  * msg.value = 2wei (同样保证balances的长度覆盖后不出现错误)
  * deposit_term = 0: 恢复head
  * account = 2 (满足条件 account >= balances.length 即可)
因为在步骤 1 中，已经将`balances[1].deposit_term` 设置为 2^256 -1 years，因此在第二次调用 invest
函数时，由于`balances[balances.length - 1].deposit_term + 1
years”`溢出为0满足了require条件，所以可以成功进行第二次覆盖。
这样即满足了调用confiscate函数的条件`msg.sender == owner`，通过读取storage很容易获得secrete，条件`secret
== _secret` 也可以满足，同时还重新覆盖了head使之变为0 。
覆盖之后全局storage变量和balances数组如下图所示：
可以发现head已经修改为0了。
现在来看看第三个条件：
`now >= balances[account].deposit_term + 1 years`
account是传入的数据，目前合约中account数量为3。在前面的invest调用后， `balances[2].deposit_term = 0`。
显然条件 `now >= balances[2].deposit_term + 1 years`
成立，所以在恢复head数据的同时，也绕过了confiscate函数中对于存款期限的判定。接下来只要调用函数confiscate时，设置account 为
2，便可使时间判断条件满足，同时也能提取所有账户的余额。
**步骤3: 增加合约余额**
经过步骤1和步骤2，仿佛攻击者已经可以调用confiscate函数提取所有余额了，然而实际上是不行的。交易会发生回滚，这是为什么呢？
仔细分析前面的数据就会发现，步骤1中msg.value为 1 wei，但是最后balances数组中的balances[1].amount 却变成了 2
wei。这是因为变量覆盖过程中产生了“纠缠”副作用，由于msg.value覆盖balances数组的长度，balances更新前增加了数组长度，数组长度又改变了msg.value，最后导致存入的amount变成了新的数组长度，即2。
所以，每次调用invest函数进行变量覆盖，存款记录的账目金额都比调用者实际支付的msg.value大。下图是两次调用invest之后的balances数组情况。
从图中可以看出，存款记录中的账面值会比实际交易的msg.value多 1 wei。通过confiscate函数计算得到的所有账户总额为31342
wei，而实际的合约账户总余额为 31340 wei。
为了能够将合约中所有余额提取出来，需要增加合约的真实余额，使其同存款记录中的余额相等。然而，通过invest方式增加的余额都会被计入账面余额，那么怎么在不通过invest函数的情况下增加合约的真实余额呢？
答案是selfdestruct函数。
selfdestruct函数会将该合约的余额转到指定账户，然后从区块链中销毁该合约的代码和storage。该函数的官方文档说明[5]如下：
因此，可以构造一个合约，然后在合约中调用selfdestruct函数将合约的余额转给BelluminarBank合约。为此，构造如下合约：
    contract donar{
        function donar() public payable{
            selfdestruct(contractAddr);
        }
    }
该合约创建后马上销毁，同时将自己的余额转给银行合约。
在 remix 中 编译该合约，同时将 contractAddr替换为银行合约地址。然后 在deploy该合约时，设置 msg.value 为2
wei。当合约创建又销毁之后，其余额（2wei）将转给银行账户，使银行合约的账面余额和实际余额一致，这样confiscate函数调用就能够正确执行。
Donar合约部署设置如下：
合约部署完之后，BelluminarBank 合约余额如下图：
**步骤4：调用confiscate提取合约余额**
经过上面的操作之后，设置confiscate函数的参数为[2，“0x01”]即可将合约的全部余额转走。
### 参考链接
  1. 
  2. 
  3. 
  4. 
  5. 
* * *
**启明星辰积极防御实验室（ADLab）**
ADLab成立于1999年，是中国安全行业最早成立的攻防技术研究实验室之一，微软MAPP计划核心成员。截止目前，ADLab通过CVE发布Windows、Linux、Unix等操作系统安全或软件漏洞近400个，持续保持国际网络安全领域一流水准。实验室研究方向涵盖操作系统与应用系统安全研究、移动智能终端安全研究、物联网智能设备安全研究、Web安全研究、工控系统安全研究、云安全研究。研究成果应用于产品核心技术研究、国家重点科技项目攻关、专业安全服务等。
* * *