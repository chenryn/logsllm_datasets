ambiguate.
Off-by-one Because address preﬁxes are assigned to networks, ad-
dresses that are numerically off-by-one are more likely to repre-
sent interfaces at either end of a point-to-point link (assigned
a /31 preﬁx) than interfaces on the same router. This heuristic
overrides the previous two rules and can assert the existence of
hidden routers.
Double-zero The current router is Type N if the current and next
routers’ deltas are both zero.
Lazy detection The current router is Lazy if all probes with record
route come from IP address X, all probes without from IP Y ,
X 6= Y , and all probes without for the next router also come
from IP X.
As we apply these rules to Figure 3, the second probe has a delta
of two, implying a transition from a Type A to Type B router. How-
ever, addresses 128.8.128.8 and 128.8.128.9 are “off-by-one,” so
because the off-by-one rule overrides the A-to-B transition rule, we
declare that the bottom topology is most likely the correct topology.
We are unable to classify all traces: these rules can lead to am-
biguity and contradiction, e.g., one trace might classify a router as
Type A, when another trace could classify the same router as Type
B. Using these simple rules, we can classify 65.4% of our 65 mil-
lion traces without contradiction.
In Section 5, we use the alias
resolution tool ally [27] to evaluate the correctness of our classi-
ﬁcations. Robust and complete router classiﬁcation and address
alignment is the subject of our continued work.
3. SIDECAR DESIGN
Sidecar is our engine for injecting probes, including TTL-limited
packets, into TCP connections from user level without altering TCP
behavior. Probes sent from within TCP connections can traverse
and expose the ﬁrewalls and NATs that traceroute probing cannot.
Figure 2: Multi-path route detection with TTL-limited record
route (“A3” denoted the third interface of router A, etc.).
Figure 3: Variations in router implementations allow different
topologies to generate the same trace, creating ambiguity.
Type N routers never mark record route packets but always decre-
ment TTL. We believe this to be a conﬁgurable option.
Lazy routers do record the outgoing interface, but decrement the
TTL only of packets lacking the record route option. We specu-
late that slow-path processing omits the TTL-decrementing step.1
Flaky routers sometimes, but not always, append record route en-
tries. We speculate that they omit processing when under load.
As further diversity, some router conﬁgurations appear to not
process RR options if the outgoing interface is part of an MPLS
tunnel.
The variety of router types make router classiﬁcation ambiguous.
Because different topologies and router implementations can gen-
1We have not conﬁrmed that the TTL is decremented if the record
route list is full. As such, we consider this a potential ﬂaw in router
software.
2Router OS ﬁngerprinting, or similar additional probing may yield
a more accurate classiﬁcation; we avoided this because router ad-
dresses are often not routable.
SRCA1A2A3DSTB1B2C1C2D1D2E1E2Probe TTL=1, ICMP src=A1    RR={}Probe TTL=2, ICMP src=B1    RR={A2}Probe TTL=3, ICMP src=E1    RR={A3,D2}      -- Route Change!Load BalancingRouterProbe TTL=4, ICMP src=DST RR={A2,B2,C2} -- Route Change!Actual TopologyAs discovered by traceroute only: incorrect and incompleteAs discovered by traceroute + RR: correct;     requires moreFalse LinkProbesSRCA1DSTB1E1???SRCA1A2A3DSTB1B2C2D2E1Identified all three interfacesAssertedpath???probesTimeProbe TTL=1ICMP src=192.168.0.1RR={}192.168.0.1172.16.0.4128.8.128.8SourceType AHidden128.8.128.9x.x.x.xType AProbe TTL=2ICMP src=128.8.128.9RR={172.16.0.4,128.8.128.8}128.8.128.8128.8.128.9Type B??ClassificationAmbiguousFigure 4: Design layout of TCP Sidecar and Passenger.
The Sidecar system comprises connection tracking, probe identiﬁ-
cation, RTT estimation, and rate limiting without requiring kernel
(ﬁrewall or module) support. These design choices make it possible
to transparently instrument TCP connections, even from the middle
of the network. Figure 4 shows how the TCP embedding logic in
TCP Sidecar is separated from the higher-level probe-generation
driver, Passenger, allowing easy development of new TCP probing
tools. Other Sidecar applications [25] include round trip time and
bandwidth estimation.
Injecting probes into TCP without harming connections requires
careful design. Sidecar records state and application data via libp-
cap for many connections in parallel. Sidecar probes take the form
of replayed packets carefully crafted to look like retransmissions.
Sidecar probes are thus transparent to connections because TCP is
robust to packet reordering and duplication. Responses to these
probes are either time-exceeded messages from routers, which are
ignored by the kernel, or duplicate acknowledgments from the des-
tination host. Because three successive duplicate acknowledgments
serve as congestion notiﬁcation event, Sidecar is careful to not send
probes when data is outstanding. We accomplish this by delaying
probes until the connection is idle for at least 500 ms.
By changing the TTL of replayed packets, Sidecar is able to
accomplish traceroute-like functionality in a TCP stream. When
UDP-based traceroute reaches the destination host, the type of re-
sponse changes from “time exceeded” to “port unreachable”: an
unambiguous sign that the destination host has been reached. With
Sidecar, the destination’s equivalent response to a replayed packet
probe is a duplicate acknowledgment. Because TCP acknowledg-
ments are cumulative and do not identify the speciﬁc segment/probe
that triggered them,3 Sidecar cannot distinguish multiple responses
from the destination. For efﬁciency, Passenger sends low TTL
probes that will probably not reach the destination in parallel and
higher TTL probes that might reach the destination serially.
If the connection closes before probes can be sent, Sidecar can
replay the ﬁnal FIN/ACK packet if the destination is in the “time-
wait” state. FIN/ACK probing is not ideal, since the local TCP
stack may generate unnecessary RSTs in response to receiver ACKs.
Sidecar permits trivial NAT detection. If Sidecar receives a “time
exceeded” message from the destination IP address of the probe,
we conclude that a node behind a NAT expired the packet and the
source address of the error was rewritten by the NAT.4 The destina-
tion’s distance behind the NAT can be determined by incrementing
the TTL until receiving a redundant ACK.
Sidecar parses ICMP extensions [6] allowing detection of MPLS
tunnels that support them [5]. Although the utility of knowing
3The DSACK extension [9] does identify the duplicated segment
but it does not appear widely deployed [21]. Identifying DSACK
support and using it to match multiple probes and responses is fu-
ture work.
4We have found an exception to this rule: a ﬁrewall near a Planet-
Lab source in China would forge “time-exceeded” responses as if
from the distant destination address.
MPLS labels is unclear, these extensions proved helpful in debug-
ging the effects of MPLS on router classiﬁcation.
4. PASSENGER DESIGN
While Sidecar is the underlying engine for embedding probes
into TCP streams, Passenger performs the higher level topology
discovery probe generation (Figure 4). Our evaluation goals in ex-
ploring Passenger are to: (a) show that embedding record route
probing within TCP connections is feasible, (b) quantify how much
of network topology record route discovers, and (c) demonstrate
reasonable correctness in address alignment over a variety of paths.
To construct a dataset for this evaluation, we allow Passenger to ob-
serve and trace within the TCP connections of two applications: a
web crawler and the CoDeeN web proxy.
4.1 Passenger Logic
Passenger implements the logic of our traceroute and record route
probing. Sidecar determines the type of packet to send, determines
the round trip time, and returns responses; here we are concerned
only with the logic of the measurement. Passenger starts as soon
as the completed connection has been idle for one half second. Be-
cause web-like connections terminate soon after becoming idle, we
try to compress the traceroute into as little time as possible. Pas-
senger remembers the addresses it probes so that it will not repeat
a trace for the same source/destination pair.
Passenger traces have two phases. Let safettl represent an esti-
mate of the number of hops that probes can be sent into the network
without reaching destination ﬁrewalls or IDSs. We set safettl to the
minimum of eleven or three less than the TTL of the destination,
as estimated from observing the TTL hops remaining of incoming
packets. In the ﬁrst phase, Passenger sends probes in parallel for
all TTLs between 1 and safettl with record route set, and then waits
for one RTO for them to return. Passenger repeats this process six
times, alternating probes with and without the record route option.
In the second phase, like traceroute, passenger sends three probes
per hop starting at TTL= safettl +1 until it reaches the destination
or TTL=30 is reached. In this way, Passenger records traceroute
data for the entire path and record route data for TTL=1 to safettl.
4.2 Data Sources
CoDeeN CoDeeN [30] is a network of partially-open Web prox-
ies deployed on PlanetLab. We ran Passenger for a week (May
17–24, 2006) observing CoDeeN servers. Although CoDeeN is
installed on 671 hosts, because some were inaccessible, rebooted
during that week, or had too little disk, we only recorded complete
data from 234 sources. Passenger monitored connections on port
3128 to CoDeeN users, not proxied connections to origin servers.
We collected 13,447,011 traces.
Web Crawler We connect to every web server we could discover.
In the ﬁrst phase, we ran the Larbin [2] web crawler, seeded with
http://slashdot.org to ﬁnd 316,094 websites. We then removed du-
plicate IP addresses to arrive at 166,745.5
In the second phase,
we ran a multi-threaded Web client from each available PlanetLab
node to each address, using Passenger to instrument the connec-
tion. Our Web client holds each connection open for 30 seconds, as
HTTP persistent connections would, to allow the measurement to
complete.6 The client retrieved the robots.txt ﬁle from each server.
We collected 51,742,928 traces.
5We initially failed to consider virtual hosting, leading to reports
of abuse.
6If the remote server closes the connection earlier, it remains in
TCP’s “time-wait” state, allowing further measurement.
wgetCodeenPassengerTCP/IPlibpcapraw socketsNetworkSidecarAutonomous Systems Traversed
Total traces
- Unclassiﬁed due to contradiction
IP Addresses discovered
- Found by Traceroute only
- Found by Record Route only
- Found by both
% end-hosts and routers 9 hops from a PlanetLab Node
% links found or conﬁrmed with Record Route
PlanetLab
331
151,688
35,450
13,048
7,293
2,059
3,696
87.6%
59.5%
(23.3%)
(55.9%)
(15.8%)
(28.3%)
Web crawler
8,739
51,742,928
20,324,192
375,851
298,455
61,672
15,724
98.5%
69.1%
(39.2%)
(79.4%)
(16.4%)
(4.2%)
CoDeeN
891
13,447,011
1,616,079
22,428
14,261
3,268
4,899
93.0 %
65.8%
(12.0%)
(63.6%)
(14.6%)
(21.8%)
Table 1: Summary of experimental results.
PlanetLab We also collect a PlanetLab-to-PlanetLab data set using
the same web client and PlanetLab hosts as servers. This data set is
a strict subset of the web crawler data, but manageable in size. We
collected 151,688 traces.
4.3 Safety
We limit probes to 500 kbits per second; above this rate, or the
rate at which the raw socket accepts new packets, we skip connec-
tions to trace rather than signiﬁcantly delay the probes of traces
in progress. To run within CoDeeN and ensure little interference,