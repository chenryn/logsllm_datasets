OpenSSL
1.0
our code
(Karatsuba)
our code
(schoolbook)
1463
2143
1893
2990
259
360
375
454
Montgomery reduction using optimized assembly code that
reduces the number of ‘mov’ operations between registers
and memory. As is evident from the tables the best RSA per-
formance comes from our code when using our schoolbook
multiplication technique. This results in a performance of
2990 RSA 1024 private decrypt operations per second per 3
GHz processor core. The main departure from the OpenSSL
techniques is that in our code Montgomery is done in a sin-
gle step as opposed doing the reduction on a word-by-word
basis. In this way, Montgomery is reduced to 1.5 big num-
ber multiplications, where the multiplications themselves are
performed using our optimized schoolbook code evaluated in
Table 3.
The acceleration gain coming from our code is also sub-
stantial in other processors as well. In a Pentium R(cid:2) 4 ar-
chitecture our code speeds up RSA 1024 from 881 private
decrypt operations per second per 3 GHz core to 981 oper-
ations per second per core. Multiplication between 512-bit
integers takes 806 clocks. The Pentium R(cid:2) 4 architecture is
slower because the 64-bit mode is emulated.
7.4 Session Level
We use two methods to measure the TLS session level
performance.
First, we utilize Oproﬁle [9] and a microbenchmark tool
to obtain a cost breakdown of a typical TLS banking ses-
sion of ﬁle size equal to 140KB. Our microbenchmark tool
uses an optimal table lookup AES implementation. The cost
breakdown result is illustrated in Figure 8.
As can be seen from the leftmost bar of this diagram, the
cost of the RSA 1024 asymmetric key operation for a given
session (2.17 million clocks) is almost equal to the cost of the
AES-128 CBC operation (2.30 million clocks) for a 140KB
data ﬁle. This in turn is roughly equal to the cost of the
HMAC-SHA1 operation and other overheads such as OS,
and networking overheads (1.18+0.73 million clocks). By
Figure 8: Session Level Performance
accelerating the symmetric key operation, as well as optimiz-
ing the asymmetric key operation, we are impacting nearly
90% (5.65 over 6.38 million clocks) of the crypto overhead
for the overall TLS session cost.
In the next bar of this diagram, we illustrate the beneﬁt
coming from optimizing the RSA operation and also lever-
aging the AES instructions for encryption and decryption.
This alone provides a 1.67x improvement over the number
of TLS sessions per second that can be achieved over a non-
optimal TLS implementation. AES-128 is still in the CBC
mode for this bar.
In the rightmost bar of the diagram, we replace the ci-
pher suite of AES-128 CBC and HMAC-SHA1 with AES-
128 GCM which is a combined mode that provides the best
performance results, illustrating a 2.43X improvement over
the leftmost bar.
The microbenchmark is built using our own code, includ-
ing the state-of-the-art baseline. Now let’s consider our op-
timizations in the context of a public domain open source
TLS stack. Our second method is to utilize the OpenSSL
SSL/TLS performance timing program called s time in or-
der to benchmark our TLS improvements. The s time com-
mand implements a client which connects to a server using
SSL/TLS. It requests a ﬁle from the server and measures the
time to transfer the payload data. Networking latencies are
not included in the measurements. It reports the number of
connections within a given time frame, the amount of data
transferred and the average user CPU time spent for each
connection. Our results are presented in Table 5.
We see approximately 1200 sequential connections per sec-
ond of user time for the cipher suite RSA-1024, AES-128
GCM as compared to 770 connections per second of user
time for the cipher suite RSA-1204, AES-128 CBC, HMAC-
SHA1 using our optimized RSA and AES implementations,
and 200 connections per second of user time for the same
cipher suite without our optimizations for the same ﬁle size
of 140KB. The result is a performance gain of 6x allow-
ing for many more connections to be supported on a given
server. It is worth pointing out that the best absolute per-
formance coming from our two measurement methodologies
is the same (i.e., approximately 1200 transactions per second
per core).
144Table 5: TLS Stack Performance from s time
cipher suite
connections/sec
AES-128 CBC, SHA1,
state-of-the-art
AES-128 CBC, SHA1,
our technologies
AES-128 GCM,
our technologies
199
768
1199
7.5 Encrypting the Internet
So far we have described how improvements in the per-
formance of cryptographic algorithms can speed up the per-
formance of SSL servers using the TLS 1.2 protocol stack.
To justify our claim for end-to-end Internet encryption, we
answer a diﬀerent question: How many processor cores in
general purpose hardware do we need to saturate a high
speed Internet link using our technologies? We examine 1
and 10 Gbps links.
The single core processing throughput (measured in Gbps)
associated with a set of crypto technologies can be computed
from the total number of transactions per second of Table 5
and the session size (in bits). Speciﬁcally:
throughput = sessions per second × session size
From this throughput computation we can derive the num-
ber of 3 GHz processor cores needed for saturating 1 and 10
Gbps network links by dividing the link capacity with the
processing throughput associated with each technology. Our
results are shown in Table 6. The numbers assume good
scaling of the SSL/TLS performance across multiple cores,
which we believe is feasible given the inherent parallelization
support of the protocol across diﬀerent sessions.
Table 6: Cores to Saturate 1 (10) Gbps
cipher suite
AES-128 CBC, SHA1,
state of the art
AES-128 CBC, SHA1,
our crypto technologies
AES-128, GCM,
our crypto technologies
processing
throughput
cores to
saturate
(Gbps)
1 (10) Gbps
0.22
0.86
1.34
5 (46)
2 (12)
1 (8)
As is evident from the table it is now possible to take gen-
eral purpose hardware, e.g., with two sockets and six cores
per socket and our instruction extensions and provide equiv-
alent functionality to a dedicated appliance allowing 9,600
(= 8 × 1200) transactions per second at 10 Gbps, while still
leaving four cores for application processing. The system
uses 8 cores with encryption. If no encryption was applied,
the system would use 3 cores. In both cases a substantial
number of cores (4-9) is left for other tasks.
At the time of writing, dedicated appliances tend to be
more expensive than general purpose systems. For example,
appliances reported in reference [12] range from $18,850 to
$36,990. Also at the time of writing, a general purpose blade
server [10] can cost up to $3,999. Since the performance of
appliances varies considerably, we use a normalized metric
to express their cost eﬃciency as it pertains to SSL through-
put. Speciﬁcally, we divide the cost of a device by its associ-
ated SSL transaction rate. For a hypothetical appliance that
costs $18,850 and supports 4,500 banking transactions per
second, the normalized cost is $4. On the other hand the
normalized cost of the afore-mentioned blade server, sup-
porting our technologies, is 28 cents only, for the same SSL
transaction size. Such substantial cost reduction could allow
network security technologies to be deployed in areas where
previously it was considered cost inhibited.
8. CONCLUSIONS
In this paper we argued about the need for encrypting
and authenticating Internet transactions. We analyzed the
performance of some cryptographic algorithms and proposed
techniques to speed them up signiﬁcantly. Our solution is
primarily based on adding small hardware extensions to gen-
eral purpose architectures. We supported our claims with
performance results demonstrating the eﬃciency of using
general purpose hardware for doing SSL/TLS traﬃc pro-
cessing at 10 Gbps line rates.
Our work is far from done however. Moving to 128-bits
equivalent security for public key schemes may require fur-
ther innovations for increasing the performance of public key
encryption. Furthermore, NIST organizes a hash competi-
tion for deﬁning the next SHA-3 standard. Understanding
how to accelerate the winning algorithm will be important as
well. Third, public trials will be useful for further validating
our results.
9. REFERENCES
[1] “Advanced Encryption Standard”. Website.
http://csrc.nist.gov/publications/fips/fips197/
fips-197.pdf.
[2] “Cisco WebVPN Services Module - Cryptographic
Accelerator”. Website, hardware.com.
http://us.hardware.com/store/cisco/
WS-SVC-WEBVPN-K9=/campaign/1-85819001.
[3] “Crypto++”. Crypto++ Website.
http://www.cryptopp.com.
[4] “Data-stealing Malware on the Rise, Solutions to Keep
Businesses and Consumers Safe”. Website.
http://us.trendmicro.com/imperia/md/content/us/pdf/
threats/securitylibrary/data_stealing_malware_focus_
report_-_june_2009.pdf.
[5] The Galois/Counter Mode of Operation (GCM).
Website, NIST.
http://csrc.nist.gov/groups/ST/toolkit/BCM/
documents/proposedmodes/gcm/gcm-spec.pdf.
[6] “Intel AVX, Intel Software Network”. Intel Website.
http://software.intel.com/en-us/avx/.
[7] “Internet Passes 600,000 SSL Sites”. Website, SSL
Shopper. http://www.sslshopper.com/
article-internet-passes-600000-ssl-sites.html/.
[8] “OpenSSL Library”. OpenSSL Website.
http://www.openssl.org.
[9] “OProﬁle”. OProﬁle Website.
http://oprofile.sourceforge.net/news/.
[10] “PowerEdge Rack Servers”. Website, dell.com.
http://www.dell.com/us/en/gen/servers/rack_
optimized/cp.aspx?refid=rack_optimized&s=gen.
[11] “SSL Acceleration and Oﬄoading: What Are the
Security Implications?”. Website,
WindowSecurity.com.
http://www.windowsecurity.com/articles/
SSL-Acceleration-Offloading-Security-Implications.
html.
[12] “SSL Decryption and Re-encryption”. Website,
145zeus.com. http://www.zeus.com/products/
traffic-manager/secure/ssl.html.
[13] “The Total Number of Web Sites on Earth”. Website,
Get Netted. http://www.wlug.net/
the-total-number-of-websites-on-earth/.
[14] “TLS 1.2 Open Source Release”. Website.
http://www.mail-archive.com/openssl-dev@openssl.
org/msg27172.html.
[15] “Two Year Study of Global Internet Traﬃc,
NANOG47”. Website, Internet Society.
http://isoc-dc.org/wordpress/?p=920.
[16] P. Barrett. “Implementing the Rivest Shamir and
Adleman Public Key Encryption Algorithm on a
Standard Digital Signal Processor”. Masters Thesis,
University of Oxford, UK, 1986.
[17] A. Bosselaers, R. Govaerts, and J. Vandewalle.
“Comparison of Three Modular Reduction Functions”.
Proceedings, Advances in Cryptology (CRYPTO 1993),
1993.
[18] D. Canright. “A Very Compact S-Box for AES”.
Proceedings, Workshop on Cryptographic Hardware
and Embedded Systems (CHES 2005), 2005.
[19] A. J. Elbirt. “Fast and Eﬃcient Implementation of
AES via Instruction Set Extensions”. Proceedings, 21st
International Conference on Advanced Information
Networking and Applications Workshops, 2007.
[20] N. Farrell. “google tightens Gmail security”. Website,
January 2010. http://www.theinquirer.net/inquirer/
news/1586138/google-tightens-gmail-security.
[21] M. Feldhofer, J. Wolkerstorfer, and V. Rijmen. “AES
Implementation on a Grain of Sand”. IEE Proceedings
on Information Security, 2005.
[22] D. Feldmeier. “Fast Software Implementation of Error
Detection Codes”. IEEE Transactions on Networking,
pages 640–651, 1995.
[23] A. M. Fiskiran and R. B. Lee. “On Chip Lookup
Tables for Fast Symmetric Key Encryption”.
Proceedings, IEEE International Conf. on
Application-Speciﬁc Systems, Architectures and
Processors, pages 356–363, 2005.
[24] K. Grewal and M. Miller. “Next Generation Scalable,
Cost-eﬀective E2E Security”. RSA Conference, 2010.
[25] S. Gueron. “Intel’s New AES Instructions for
Enhanced Performance and Security”. Proceedings,
16th International Workshop on Fast Software
Encryption (FSE 2009), LNCS 5665, pages 51 – 66,
2009.
[26] A. Hodjat, D. Hwang, B.-C. Lai, K. Tiri, and
I. Verbauwhede. “A 3.84 Gbits/s AES Crypto
Coprocessor with Modes of Operation in a 0.18-μm
CMOS Technology”. Proceedings, 15th ACM Great
Lakes Symposium on VLSI, pages 60–63, 2005.
[27] A. Hodjat and I. Verbauwhede. “A 21.54 Gbits/s Fully
Pipelined AES Processor on FPGA”. Proceedings, 12th
IEEE Symposium on Field-Programmable Custom
Computing Machines (FCCM 2004), pages 308–309,
2005.
[28] D. Knuth. “Seminumerical Algorithms”. The Art of
Computer Programming, Addison-Wesley, 2, 1997.
[29] C. K. Koc. “Analysis of Sliding Window Techniques
for Exponentiation”. Computers and Mathematics with
Application, 30(10):17–24, 1995.
[30] C. K. Koc, T. Acar, and B. S. Kaliski. “Analyzing and
Comparing Montgomery Multiplication Algorithms”.
IEEE Micro, 16(3):26–33, 1996.
[31] M. Kounavis. “A New Method for Fast Integer
Multiplication and its Application to Cryptography”.
Proceedings, 2007 International Symposium on
Performance Evaluation of Computer and
Telecommunication Systems, 2007.
[32] M. Kounavis and L. Xu. “AES-NI: New Technology
for Improving Encryption Eﬃciency and Enhancing
Data Security in the Enterprise Cloud”. Intel
Developer Forum, 2009. https://intel.wingateweb.
com/us09/scheduler/sessions.do?searchGroup=
9&searchGroupID=10133&profileItem_id=10004.
[33] D. McGrew. “An Interface and Algorithms for
Authenticated Encryption”. Website, January 2008.
http://www.faqs.org/rfcs/rfc5116.html.
[34] A. Menezes, P. Oorschot, and S. Vanstone. “Handbook
of Applied Cryptography”. CRC Press, 1997.
[35] N. Mentens, L. Batina, B. Preneel, and
I. Verbauwhede. “A Systematic Evaluation of
Compact Hardware Implementations for the Rijndael
S-Box”. Proceedings of CT-RSA 2005, 2005.
[36] P. Montgomery. “Implementing the Rivest Shamir and
Adleman Public Key Encryption Algorithm on a
Standard Digital Signal Processor”. Masters Thesis,
University of Oxford, UK, 1986.
[37] P. Montogomery. “Five, Six and Seven-term
Karatsuba-like Formulae”. IEEE Transactions on
Computers, 2005.
[38] S. Moriokah and A. Satoh. “An Optimized S-Box
Circuit Architecture for Low Power AES Design”.
Proceedings, Workshop on Cryptographic Hardware
and Embedded Systems (CHES 2002), pages 172–186,
May 2002.
[39] K. K. Peretti. “Data Breaches: What the
Underground World of Carding Reveals”. the Santa
Clara Computer and High Technology Journal,
25(2):375 – 413, January 2009.
[40] C. Rebeiro, D. Selvakumar, and A. S. L. Devi.
“Bitslice Implementation of AES”. Cryptology and
Network Security, LNCS 4301, 2006.
[41] A. Rudra, P. K. Dubey, C. S. Jutla, V. Kumar, J. R.
Rao, and P. Rohatgi. “Eﬃcient Rijndael Encryption
with Composite Field Arithmetic”. Proceedings,
Workshop on Cryptographic Hardware and Embedded
Systems (CHES 2001), pages 175 – 188, May 2001.
[42] A. Satoh, S. Moriokah, K. Takano, and S. Munetoh.
“A Compact Rijndael Hardware Architecture with
SBox Optimization”. Lecture Notes in Computer
Science, LNCS 2248, pages 239–254, 2001.
[43] S. Schillace. “Default HTTPS Access for gmail”.
Website, January 2010. http://gmailblog.blogspot.
com/2010/01/default-https-access-for-gmail.html.
[44] SecurityFocus. “Data Breach Costs Rise, Response
Costs Fall”. Website, February 2009.
http://www.securityfocus.com/brief/900.
[45] I. Verbauwhede, P. Schaumont, and H. Kuo. “Design
and Performance Testing of a 2.29 Gb/s Rijndael
Processor”. IEEE Journal of Solid-State Circuits,
pages 569–572, 2003.
[46] A. Weimerskirch and C. Paar. “Generalizations of the
Karatsuba Algorithm for Eﬃcient Implementations.
Technical Report, University of Ruhr, Bochum,
Germany, 2003.
[47] A. Whitten. “HTTPS Security for Web Applications”.
Website, June 2009.
http://googleonlinesecurity.blogspot.com/2009/06/
https-security-for-web-applications.html.
[48] J. Wolkerstorfer, E. Oswald, and M. Lamberger. “An
ASIC Implementation of the AES SBoxes”.
Proceedings, CT-RSA 2002, 2002.
146