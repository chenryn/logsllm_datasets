空间/时空数据库概念与实战
TST-图贲
u
空间/时空数据库概念
u
应用场景
u
几何模型使用案例
分享内容
u
栅格模型使用案例
u
轨迹模型使用案例
u
点云模型使用案例
空间/时空数据库概念
分享内容
空间/时空数据库
数据库直接存储和管理地理空间数据：
• 空间模型（类型）
时空数据库：
• 空间关系（拓扑）
• 动态监控、轨迹、遥感
• 空间参考（坐标系、投影）
• 时间维度
• 空间检索（索引）
• 一系列空间分析和操作的算子
常见的空间/时空数据库（关系型）：
• PostGIS
• Ganos（PostGIS++）（时空数据库）
• Oracle Spatial
空间模型
平面几
何模型
拓扑网 球面几
络模型 何模型
SQL
点云模 栅格模
型 型
时空轨
迹模型
应用场景
互联网出行 运动社交 城市大脑 智慧物流
测绘遥感 激光点云管理 车联网
外卖递送 新零售/O2O LBS
空间/时空数据库
几何模型使用案例
分享内容
2D/3D/4D几何模型
面 体
点 线
Point GeometryCollection
LineString MultiPoint
PolyhedralSurface
Polygon MultiLineString
Triangle
CireularString MultiCurve
8!
Tin!
CompoundCurve MultiPolygon
Curvepolygon MultiSurface
TIN（不规则三角网）
创建几何扩展
Ganos PostGIS
-- !
创建⼏几何扩展
-- !
创建⼏几何扩展
Create extension ganos_geometry cascade;!
Create extension postgis;!
!
!
-- !
创建拓拓扑扩展
-- !
创建拓拓扑扩展
Create extension ganos_geometry_topology;!
Create extension postgis_topology;!
!
!
-- sfcgal !
创建 插件扩展
-- sfcgal !
创建 插件扩展
Create extension ganos_geometry_sfcgal;!
Create extension postgis_sfcgal;!
几何数据管理
创建表
-- geometry !
⽅方式⼀一：直接创建带 字段的表
CREATE TABLE ROADS ( ID int4, ROAD_NAME varchar(25), geom geometry(LINESTRING,3857) );!
!
-- !
⽅方式⼆二：先创建普通表，再附加⼏几何字段
CREATE TABLE ROADS ( ID int4, ROAD_NAME varchar(25) ) !
；
SELECT AddGeometryColumn( 'roads', 'geom', 3857, 'LINESTRING', 2);!
数据入库
-- !
⽅方式⼀一：⼊入库⼯工具
shp2pgsql!
!
-- sql!
⽅方式⼆二：
INSERT INTO roads (id, geom, road_name)!
VALUES (1,ST_GeomFromText(‘LINESTRING(191232 243118,191108 243242)’,3857),‘** ');!
⾼高速
空间测量与分析
空间测量
-- !
⻓长度计算
SELECT sum(ST_Length(the_geom))/1000 AS km_roads FROM bc_roads;!
!
-- !
⾯面积计算
SELECT ST_Area(the_geom)/10000 AS hectares FROM bc_municipality WHERE name = 'PRINCE
GEORGE’;!
空间分析
SELECT!
sum(ST_Area(CASE!
WHEN ST_CONTAINS(foo.geom, p.geom) THEN p.geom!
ELSE ST_INTERSECTION(foo.geom, p.geom)!
END!
)) !
FROM poly180w p , boua_for_180w foo!
where ST_INTERSECTS(foo.geom, p.geom) = TRUE;!
空间索引
空间搜索
select * from tbl_pos where att1=:att1 and att2=:att2 and!
st_contains( !
geometry( !
ST_Buffer( -- !
圆形转换为对称多边形。
geography( !
st_setsrid(st_makepoint(:x,:y), 4326) -- !
中⼼心点
), !
5000 -- st_buffer POINT 5000 polygon !
⽣生成以某个 为中⼼心的，半径距离为 ⽶米的 空间对对象
) !
), -- geography geometry !
将 转换为
pos -- st_contains, polygon point !
包含
) order by pos  st_setsrid(st_makepoint(:x,:y), 4326) limit 100; !
栅格模型使用案例
分享内容
栅格模型-大规模遥感影像
单波段全色影像 多光谱影像 高光谱影像
全景照片 数字高程模型(DEM)
栅格模型使用案例
!
链接云栖社区⽂文章：
Ganos !
使⽤用 实现洪涝灾害承灾体损失综合评估
!
https://yq.aliyun.com/articles/738524!
轨迹模型使用案例
分享内容
MOD轨迹模型
• Moving Objects Database
• 高维度移动对象时空轨迹建模
位置(x,y,z)、时间(t)、属性(速度、方向……）
• 轨迹时空事件语义(event)
• 轨迹存储、时空查询、分析计算(穿越分析、
OD分析、相似度计算……)
车辆轨迹 人员轨迹 导弹轨迹 飞行轨迹
轨迹基本概念
n Trajectory Point-
轨迹点
• 时空对象
• 某个时刻
• 所在的空间位置
• 附带的属性值
n Trajectory Object-
轨迹对象
• 一系列轨迹点
• 轨迹事件
轨迹构造
n 创建轨迹模型扩展
!
ganos_trajectory
Create extension cascade;
n 构造轨迹对象
trajectory ST_makeTrajectory (leaftype type, geometry spatial, timestamp start, timestamp end ,
cstring attrs_json);
trajectory ST_makeTrajectory (leaftype type, geometry spatial, timestamp[] timeline,
cstring attrs_json );
n 示例
select ST_makeTrajectory('STPOINT'::leaftype,
st_geomfromtext('LINESTRING (114 35, 115 36, 116 37)', 4326),
ARRAY['2010-01-01 14:30'::timestamp, '2010-01-01 15:00'::timestamp, '2010-01-01 15:30'::timestamp],
'{"leafcount":3,"attributes":{"velocity": {"type": "integer", "length": 2,"nullable" : true,"value": [120, 130,
140]}, "accuracy": {"type": "float", "length": 4, "nullable" : false,"value": [120, 130, 140]}, "vesname":
{"type": "string", "length": 20, "nullable" : true,"value": ["adsf", "sdf", "sdfff"]}, "active": {"type":
"timestamp", "nullable" : false,"value": ["Fri Jan 01 14:30:00 2010", "Fri Jan 01 15:00:00 2010", "Fri Jan
01 15:30:00 2010"]}},
"events": [{"1" : "Fri Jan 01 14:30:00 2010"}, {"2" : "Fri Jan 01 15:00:00 2010"}, {"3" : "Fri Jan 01 15:30:00
2010"}]}');
!
!
!
轨迹管理与查询
创建航班轨迹表 轨迹时空查询SQL
create table flight_track (
select dynamic_id, traj, st_leafcount(traj) from flight_track
dynamic_id text,
where ST_intersects(traj,
traj trajectory ,
'2019-04-01 12:00:00'::timestamp, --
开始时间
info text,
'2019-04-01 14:00:00'::timestamp, --
结束时间
fdst text,
ST_GeomFromText('Polygon((115.3564 21.4893,122.3438 21.4893,
scheduled_deptime bigint,
scheduled_arrtime bigint, 122.3438 41.2646,115.3564 41.2646,115.3564 21.4893))', -- 空间范围
actual_deptime bigint,
4326)::geometry);
actual_arrtime bigint,
aircraft_number text,
org_timezone text,
dst_timezone text,
演示Demo
icaoId text
);
轨迹压缩
n 轨迹三大特征
原始轨迹
• 位置
• 速度
• 方向
n 轨迹压缩目的
• 保留重要轨迹点
st_simplify!
• 删除信息冗余或不重要的
只有空间位置上的
轨迹点。
压缩
n 重要轨迹点
• 起始点、终止点
• 拐弯点
• 折返点
st_compress
• 徘徊点（近似驻点）
• 空间位置
• 速度改变的点
• 方向
• …
• 速度变化
轨迹相似性判断
With traj AS (!
Select ST_makeTrajectory('STPOINT',
'LINESTRINGZ(114.000528 33.588163 54.87 , 114.000535
33.588235 54.85 , 114.000447 33.588272 54.69 , 114.000348
33.588287 54.73 , 114.000245 33.588305 55.26 , 114.000153
33.588305 55.3)'::geometry, ARRAY['2010-01-01
11:30'::timestamp, '2010-01-01 11:31', '2010-01-01 11:32',
'2010-01-01 11:33','2010-01-01 11:34','2010-01-01 11:35'],
NULL) a,!
ST_makeTrajectory('STPOINT',
'LINESTRINGZ(114.000529 33.588163 54.87 , 114.000535
33.578235 54.85 , 114.000447 33.578272 54.69 , 114.000348
33.578287 54.73 , 114.000245 33.578305 55.26 , 114.000163
33.588305 55.3)'::geometry,ARRAY['2010-01-01
11:29:58'::timestamp, '2010-01-01 11:31:02', '2010-01-01
11:33', '2010-01-01 11:33:09','2010-01-01 11:34','2010-01-01
11:34:30'], NULL) b)!
Select st_LCSSimilarity(a, b, 100) from traj;!
st_lcssimilarity !
-------------------!
3!
(1 row)!
点云模型使用案例
分享内容
点云模型
激光点云(LiDAR) ：位置+传感属性信息，如 RGB、时间、温度、湿度
!
点云数据的挑战：
• Huge volume： billions（十亿） and even trillions（万亿）
• Multi-dimensional：X.Y. Z + N-D Attr.
PcPatch类型：基于XML Schema + 分块存储模型
ü 支持40多个空间关系、操作、统计值计算函数 One PcPatch
(One row)!
ü 支持高效压缩算法：
• Dimensional压缩：20-30%，无损
• LASzip：7-20%，无损
compatible with PDAL drivers to
import data directly from .las !
创建点云扩展
创建点云模块扩展：
Create extension ganos_pointcloud cascade；
Create extension ganos_pointcloud_geometry;
--点类型 pcpoint
CREATE TABLE points (
id SERIAL PRIMARY KEY,
pt PCPOINT(1) --(1)代表选择pointcloud_formats中pcid值为1的schema
);
--点集类型 pcpatch
CREATE TABLE patches (
id SERIAL PRIMARY KEY,
pa PCPATCH(1)
);
点云入库
PDAL入库
Pgpoint.json:
{
"pipeline":[
{
“type”:“readers.text”, --源数据
"filename":"/home/data/rds_test.csv",
"header":"x,y,z,reflectance,utc_time",
"spatialreference":"EPSG:4490"
},
{
"type":"filters.chipper",
“capacity”:400 --单个pcpatch含多少个point
},
{
"type":"writers.pgpointcloud", --PostgreSQL + Ganos
"connection":"host=‘192.168.1.1' dbname='pointcloud' user='dianyun'
password='Dianyun123' port='3433'",
"table":"pointcloud_pc400",
"srid":"4490"
} ]}
点云查询与管理
创建空间索引
CREATE INDEX pointcloud_pc400_idx ON pointcloud_pc400 USING GIST
(ST_BoundingDiagonalGeometry(pa) gist_geometry_ops_nd);
查询落入指定范围的所有点云数据
\set x random(-2180834.55325373, -2180607.70494644)
\set y random(4381273.4162077, 4381565.42591964)
\set z random(4076197.15295099, 4076559.92900519)
SELECT ST_Intersection3D(pa, ST_3DMakeBox(ST_MakePoint(:x-0.3, :y-0.3, :z-0.3),
ST_MakePoint(:x+0.3, :y+0.3, :z+0.3)))
FROM pointcloud_pc400
WHERE ST_BoundingDiagonalGeometry(pa) &&&
ST_3DMakeBox(ST_MakePoint(:x-0.3, :y-0.3, :z-0.3), ST_MakePoint(:x+0.3, :y+0.3, :z+0.3));
Ganos !
时空数据库引擎
欢迎钉钉扫码入群
Ganos时空云计算