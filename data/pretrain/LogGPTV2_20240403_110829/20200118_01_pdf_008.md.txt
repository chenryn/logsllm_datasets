# 空间/时空数据库概念与实战

## 目录
1. 空间/时空数据库概念
2. 应用场景
3. 几何模型使用案例
4. 栅格模型使用案例
5. 轨迹模型使用案例
6. 点云模型使用案例

## 1. 空间/时空数据库概念

### 1.1 空间数据库
- **定义**：直接存储和管理地理空间数据的数据库。
- **特性**：
  - **空间模型**（类型）
  - **空间关系**（拓扑）
  - **空间参考**（坐标系、投影）
  - **空间检索**（索引）
  - **空间分析和操作算子**

### 1.2 时空数据库
- **时间维度**：支持动态监控、轨迹、遥感等。
- **常见系统**（关系型）：
  - PostGIS
  - Ganos（PostGIS++，时空数据库）
  - Oracle Spatial

### 1.3 空间模型
- **几何模型**：
  - 平面几何模型
  - 拓扑网络模型
  - 球面几何模型
- **其他模型**：
  - 栅格模型
  - 轨迹模型
  - 点云模型

## 2. 应用场景
- 互联网出行
- 运动社交
- 城市大脑
- 智慧物流
- 测绘遥感
- 激光点云管理
- 车联网
- 外卖递送
- 新零售/O2O
- LBS

## 3. 几何模型使用案例

### 3.1 创建几何扩展
- **Ganos**
  ```sql
  CREATE EXTENSION ganos_geometry CASCADE;
  CREATE EXTENSION ganos_geometry_topology;
  CREATE EXTENSION ganos_geometry_sfcgal;
  ```
- **PostGIS**
  ```sql
  CREATE EXTENSION postgis;
  CREATE EXTENSION postgis_topology;
  CREATE EXTENSION postgis_sfcgal;
  ```

### 3.2 几何数据管理
- **创建表**
  - 方式一：直接创建带几何字段的表
    ```sql
    CREATE TABLE ROADS (ID int4, ROAD_NAME varchar(25), geom geometry(LINESTRING, 3857));
    ```
  - 方式二：先创建普通表，再附加几何字段
    ```sql
    CREATE TABLE ROADS (ID int4, ROAD_NAME varchar(25));
    SELECT AddGeometryColumn('roads', 'geom', 3857, 'LINESTRING', 2);
    ```

- **数据入库**
  - 方式一：入库工具 `shp2pgsql`
  - 方式二：SQL 插入
    ```sql
    INSERT INTO roads (id, geom, road_name)
    VALUES (1, ST_GeomFromText('LINESTRING(191232 243118,191108 243242)', 3857), '**');
    ```

### 3.3 空间测量与分析
- **长度计算**
  ```sql
  SELECT sum(ST_Length(the_geom)) / 1000 AS km_roads FROM bc_roads;
  ```
- **面积计算**
  ```sql
  SELECT ST_Area(the_geom) / 10000 AS hectares FROM bc_municipality WHERE name = 'PRINCE GEORGE';
  ```
- **空间分析**
  ```sql
  SELECT 
    sum(ST_Area(CASE 
      WHEN ST_CONTAINS(foo.geom, p.geom) THEN p.geom 
      ELSE ST_INTERSECTION(foo.geom, p.geom) 
    END)) 
  FROM poly180w p, boua_for_180w foo 
  WHERE ST_INTERSECTS(foo.geom, p.geom) = TRUE;
  ```

### 3.4 空间索引
- **空间搜索**
  ```sql
  SELECT * FROM tbl_pos 
  WHERE att1 = :att1 AND att2 = :att2 AND 
  st_contains(
    geometry(
      ST_Buffer(
        geography(
          st_setsrid(st_makepoint(:x, :y), 4326)
        ), 
        5000
      )
    ), 
    pos
  ) 
  ORDER BY pos st_setsrid(st_makepoint(:x, :y), 4326) LIMIT 100;
  ```

## 4. 栅格模型使用案例

### 4.1 栅格模型
- **大规模遥感影像**：
  - 单波段全色影像
  - 多光谱影像
  - 高光谱影像
  - 全景照片
  - 数字高程模型 (DEM)

### 4.2 使用案例
- **洪涝灾害承灾体损失综合评估**
  - [链接](https://yq.aliyun.com/articles/738524)

## 5. 轨迹模型使用案例

### 5.1 MOD轨迹模型
- **Moving Objects Database**
- **高维度移动对象时空轨迹建模**：
  - 位置 (x, y, z)
  - 时间 (t)
  - 属性 (速度、方向等)
- **轨迹时空事件语义** (event)
- **轨迹存储、时空查询、分析计算**：
  - 穿越分析
  - OD分析
  - 相似度计算

### 5.2 轨迹基本概念
- **轨迹点** (Trajectory Point)
  - 时空对象
  - 某个时刻
  - 所在的空间位置
  - 附带的属性值
- **轨迹对象** (Trajectory Object)
  - 一系列轨迹点
  - 轨迹事件

### 5.3 轨迹构造
- **创建轨迹模型扩展**
  ```sql
  CREATE EXTENSION ganos_trajectory CASCADE;
  ```
- **构造轨迹对象**
  ```sql
  trajectory ST_makeTrajectory (leaftype type, geometry spatial, timestamp start, timestamp end, cstring attrs_json);
  trajectory ST_makeTrajectory (leaftype type, geometry spatial, timestamp[] timeline, cstring attrs_json);
  ```
- **示例**
  ```sql
  SELECT ST_makeTrajectory('STPOINT'::leaftype,
    st_geomfromtext('LINESTRING (114 35, 115 36, 116 37)', 4326),
    ARRAY['2010-01-01 14:30'::timestamp, '2010-01-01 15:00'::timestamp, '2010-01-01 15:30'::timestamp],
    '{"leafcount":3,"attributes":{"velocity": {"type": "integer", "length": 2,"nullable" : true,"value": [120, 130, 140]}, "accuracy": {"type": "float", "length": 4, "nullable" : false,"value": [120, 130, 140]}, "vesname": {"type": "string", "length": 20, "nullable" : true,"value": ["adsf", "sdf", "sdfff"]}, "active": {"type": "timestamp", "nullable" : false,"value": ["Fri Jan 01 14:30:00 2010", "Fri Jan 01 15:00:00 2010", "Fri Jan 01 15:30:00 2010"]}},
    "events": [{"1" : "Fri Jan 01 14:30:00 2010"}, {"2" : "Fri Jan 01 15:00:00 2010"}, {"3" : "Fri Jan 01 15:30:00 2010"}]}');
  ```

### 5.4 轨迹管理与查询
- **创建航班轨迹表**
  ```sql
  CREATE TABLE flight_track (
    dynamic_id text,
    traj trajectory,
    info text,
    fdst text,
    scheduled_deptime bigint,
    scheduled_arrtime bigint,
    actual_deptime bigint,
    actual_arrtime bigint,
    aircraft_number text,
    org_timezone text,
    dst_timezone text,
    icaoId text
  );
  ```
- **轨迹时空查询 SQL**
  ```sql
  SELECT dynamic_id, traj, st_leafcount(traj) 
  FROM flight_track 
  WHERE ST_intersects(traj, 
    '2019-04-01 12:00:00'::timestamp, -- 开始时间
    '2019-04-01 14:00:00'::timestamp, -- 结束时间
    ST_GeomFromText('Polygon((115.3564 21.4893,122.3438 21.4893,122.3438 41.2646,115.3564 41.2646,115.3564 21.4893))', 4326)::geometry
  );
  ```

### 5.5 轨迹压缩
- **轨迹三大特征**：
  - 位置
  - 速度
  - 方向
- **轨迹压缩目的**：
  - 保留重要轨迹点
  - 删除信息冗余或不重要的轨迹点
- **重要轨迹点**：
  - 起始点、终止点
  - 拐弯点
  - 折返点
  - 徘徊点（近似驻点）
  - 速度改变的点
  - 方向变化的点
- **压缩函数**：
  - `st_simplify`：只有空间位置上的压缩
  - `st_compress`：保留重要轨迹点，删除冗余

### 5.6 轨迹相似性判断
- **示例**
  ```sql
  WITH traj AS (
    SELECT ST_makeTrajectory('STPOINT',
      'LINESTRINGZ(114.000528 33.588163 54.87 , 114.000535 33.588235 54.85 , 114.000447 33.588272 54.69 , 114.000348 33.588287 54.73 , 114.000245 33.588305 55.26 , 114.000153 33.588305 55.3)'::geometry, 
      ARRAY['2010-01-01 11:30'::timestamp, '2010-01-01 11:31', '2010-01-01 11:32', '2010-01-01 11:33','2010-01-01 11:34','2010-01-01 11:35'],
      NULL) a,
    ST_makeTrajectory('STPOINT',
      'LINESTRINGZ(114.000529 33.588163 54.87 , 114.000535 33.578235 54.85 , 114.000447 33.578272 54.69 , 114.000348 33.578287 54.73 , 114.000245 33.578305 55.26 , 114.000163 33.588305 55.3)'::geometry,
      ARRAY['2010-01-01 11:29:58'::timestamp, '2010-01-01 11:31:02', '2010-01-01 11:33', '2010-01-01 11:33:09','2010-01-01 11:34','2010-01-01 11:34:30'], 
      NULL) b
  )
  SELECT st_LCSSimilarity(a, b, 100) FROM traj;
  ```

## 6. 点云模型使用案例

### 6.1 点云模型
- **激光点云 (LiDAR)**：
  - 位置 + 传感属性信息，如 RGB、时间、温度、湿度
- **挑战**：
  - **巨大体积**：数十亿甚至数万亿
  - **多维属性**：X, Y, Z + N-D Attr.
- **PcPatch类型**：
  - 基于 XML Schema + 分块存储模型
  - 支持 40 多个空间关系、操作、统计值计算函数
  - 支持高效压缩算法：
    - Dimensional 压缩：20-30%，无损
    - LASzip：7-20%，无损

### 6.2 创建点云扩展
- **创建点云模块扩展**
  ```sql
  CREATE EXTENSION ganos_pointcloud CASCADE;
  CREATE EXTENSION ganos_pointcloud_geometry;
  ```

### 6.3 点云数据管理
- **创建表**
  - **点类型 pcpoint**
    ```sql
    CREATE TABLE points (
      id SERIAL PRIMARY KEY,
      pt PCPOINT(1) -- (1) 代表选择 pointcloud_formats 中 pcid 值为 1 的 schema
    );
    ```
  - **点集类型 pcpatch**
    ```sql
    CREATE TABLE patches (
      id SERIAL PRIMARY KEY,
      pa PCPATCH(1)
    );
    ```

- **数据入库**
  - **PDAL入库**
    ```json
    {
      "pipeline":[
        {
          "type":"readers.text",
          "filename":"/home/data/rds_test.csv",
          "header":"x,y,z,reflectance,utc_time",
          "spatialreference":"EPSG:4490"
        },
        {
          "type":"filters.chipper",
          "capacity":400
        },
        {
          "type":"writers.pgpointcloud",
          "connection":"host='192.168.1.1' dbname='pointcloud' user='dianyun' password='Dianyun123' port='3433'",
          "table":"pointcloud_pc400",
          "srid":"4490"
        }
      ]
    }
    ```

### 6.4 点云查询与管理
- **创建空间索引**
  ```sql
  CREATE INDEX pointcloud_pc400_idx ON pointcloud_pc400 USING GIST (ST_BoundingDiagonalGeometry(pa) gist_geometry_ops_nd);
  ```

- **查询落入指定范围的所有点云数据**
  ```sql
  \set x random(-2180834.55325373, -2180607.70494644)
  \set y random(4381273.4162077, 4381565.42591964)
  \set z random(4076197.15295099, 4076559.92900519)
  SELECT ST_Intersection3D(pa, ST_3DMakeBox(ST_MakePoint(:x-0.3, :y-0.3, :z-0.3), ST_MakePoint(:x+0.3, :y+0.3, :z+0.3)))
  FROM pointcloud_pc400
  WHERE ST_BoundingDiagonalGeometry(pa) &&& ST_3DMakeBox(ST_MakePoint(:x-0.3, :y-0.3, :z-0.3), ST_MakePoint(:x+0.3, :y+0.3, :z+0.3));
  ```

## Ganos 时空数据库引擎
- **欢迎钉钉扫码入群**
- **Ganos 时空云计算**

希望这些优化后的文本能更好地帮助你理解和应用空间/时空数据库的概念和实战技巧。