## Bug Report
**For English only** , other languages will not accept.
Before report a bug, make sure you have:
  * Searched open and closed GitHub issues.
  * Read documentation: ShardingSphere Doc.
Please pay attention on issues you submitted, because we maybe need more
details.  
If no response **more than 7 days** and we cannot reproduce it on current
information, we will **close it**.
Please answer these questions before submitting your issue. Thanks!
### Which version of ShardingSphere did you use?
    		org.apache.shardingsphere
    		sharding-jdbc-core
    		4.0.0-RC1
    		org.apache.shardingsphere
    		sharding-jdbc-spring-namespace
    		4.0.0-RC1
### Which project did you use? Sharding-JDBC or Sharding-Proxy?
Sharding-JDBC
### Expected behavior
want to complete in 3s
### Actual behavior
14s
### Reason analyze (If you can)
When i debug into code:  
class=SQLExecuteCallback  
method:execute0  
line:T result = this.executeSQL(routeUnit.getSqlUnit().getSql(),
statementExecuteUnit.getStatement(),
statementExecuteUnit.getConnectionMode());  
I found spent long
### Steps to reproduce the behavior, such as: SQL to execute, sharding rule
configuration, when exception occur etc.
init data->total size:1,0000,000  
1.execute sql script:sql:SELECT SUM(size) as size_sum FROM table_test  
spent: 26s  
2.add properties:max.tolerate.time.difference.milliseconds:8 ->restart
application  
3.execute sql script:sql:SELECT SUM(size) as size_sum FROM table_test  
spent:14s
### Example codes for reproduce this issue (such as a github link).