# Co-Evaluation of Pattern Matching Algorithms on IoT Devices with Embedded GPUs

**Authors:**
- Charalampos Stylianopoulos
- Simon Kindström
- Magnus Almgren
- Olaf Landsiedel
- Marina Papatriantafilou

## Motivation

### Security Concerns in IoT
- **IoT Security:** A significant concern due to recent attacks.
  - **Examples:**
    - Mirai botnet
    - Attacks on a casino’s aquarium thermostat
  - These incidents highlight the need for robust countermeasures.

### Standard Security Countermeasures
- Network Intrusion Detection Systems (NIDS) can be deployed:
  - On the IoT devices themselves
  - At the entry point to the network of IoT devices

### Challenges
- **Resource Constraints:** IoT devices are often resource-limited.
- **Increased Traffic:** More connected devices lead to more traffic, increasing the inspection load.
- **NIDS Performance Bottlenecks:**
  - Current NIDS implementations are not optimized for hardware, leading to performance issues.

### Pattern Matching
- **Core Functionality of NIDS:** Pattern matching is essential, accounting for over 70% of running time.
- **Goal:** Compare all network traffic against known malicious signatures.
- **Example:**
  - Input Stream: `… http://some.site.com/get.asp?f=/etc/passwd … GET HTTP try_backdoor…`
  - Patterns: `/etc/passwd`, `admin.dll`, `get.asp`, `backdoor`

## New Opportunities with Evolving Hardware

- **Evolving IoT/Embedded Hardware:**
  - New features such as embedded Graphic Processor Units (GPUs) in single-board computers like ODROID.
  - Leveraging these features for enhanced security is an open research area.

## Our Work

### Research Questions
- **Algorithm Selection:** Which pattern matching algorithms are most suitable?
- **Hardware Characteristics:** What architectural features influence performance?
- **Algorithm Design:** How can we create new algorithms that maximize hardware utilization?

### Approach
- **Co-evaluation of Pattern Matching Algorithms:**
  - Evaluate existing implementations.
  - Influence the design of new algorithms.
- **Target Platform:** Embedded GPUs, with a focus on their unique architectural features.
- **Evaluation:**
  - Comprehensive testing with different datasets and patterns.
  - Analysis of energy efficiency.

## Outline

1. **Background**
   - GPU Computing
2. **Our Benchmark**
3. **Evaluation**

## Background

### General Purpose GPU Computing (GPGPU)
- **General Tasks:** GPUs can perform general computing tasks beyond graphics.
- **Parallel Architecture:** Highly parallel, making them suitable for tasks like pattern matching.
- **Existing Work:**
  - Limited research on pattern matching using embedded GPUs.
  - Relevant studies include:
    - "Gnort: High Performance Network Intrusion Detection Using Graphics Processors" (Vasiliadis et al., RAID 2008)
    - "APUNet: Revitalizing GPU as Packet Processing Accelerator" (Go et al., NSDI 2017)
    - "A highly-efficient memory-compression scheme for GPU-accelerated intrusion detection systems" (Bellekens et al., SINCONF 2017)

### Platform Characteristics
- **Embedded GPUs:**
  - Small number of cores/threads.
  - No main memory on the GPU; shared memory with CPU.
  - No local memory on chip.
  - Vectorization in each GPU thread.
  - Separate instruction counters per GPU thread, reducing divergent execution concerns.

## Algorithms

### Representative Algorithms
- **State Machine Based:**
  - **Aho-Corasick:**
    - Used in many NIDS.
    - Builds a state machine from all patterns.
    - Traverses the state machine byte by byte.
    - **Benefits:** One lookup per input byte.
    - **Limitations:** Poor cache locality and data dependencies.
- **Filtering Based:**
  - **DFC:**
    - Creates a filter from patterns.
    - Quickly filters out parts of the input.
    - **Benefits:** Cache locality and no data dependencies.
    - **Limitations:** Verification phase is costly.

### GPU Implementations
- **PFAC:**
  - Parallelized version of Aho-Corasick.
- **HYBRID DFC:**
  - Combines filtering and verification phases.

## Hardware-Oriented Optimizations

- **Memory Mapping vs. Data Transfers:**
  - Memory mapping is 2-5 times faster than data transfers.
- **Filter Placement:**
  - Global memory, texture memory, and local memory.
- **Vectorization:**
  - No significant speedup observed.

## Evaluation Methodology

### Hardware
- **CPU:** 4 ARM big.LITTLE
- **GPU:** ARM Mali-T628 (6 shader cores)
- **Memory:** 2GB RAM
- **Sensors:** On-board energy sensors

### Datasets
- **Traffic Traces:**
  - 3 publicly available traces.
  - 1 randomly generated dataset.
- **Patterns:**
  - 2183 patterns from Snort.
  - 5000 patterns from emergingthreats.net.

### Evaluation Goals
1. **Execution Time:** How fast can we process the input?
2. **Energy Consumption:** How much energy is used for processing?
3. **Dataset and Pattern Effects:** Impact of different datasets and number of patterns.
4. **Algorithm Design:** Influence the design of new algorithms.

### Versions Tested
- **CPU:**
  - Aho-Corasick
  - DFC
- **GPU:**
  - PFAC
  - DFC (with and without vectorization)
  - HYBRID (with and without vectorization)

## Evaluation Results

### Experiment 1: Execution Time Breakdown
- **CPU to GPU Data Transfer**
- **Post-processing on CPU**

### Experiment 2: Energy Consumption
- **Results and Analysis**

### Experiment 3: Effect of Datasets and Number of Patterns
- **Results and Analysis**

### Experiment 4: Configuring Hybrid
- **Filter Size and Access Time:**
  - Larger filters have slower access times but higher hit ratios, reducing verification needs.

## Conclusions and Future Work

### Conclusions
- **Embedded GPUs:** Can alleviate the bottleneck of pattern matching.
- **Architectural Features:** Important for high performance and low energy consumption.
- **New Algorithms:** Possible to design algorithms tailored to the hardware.

### Future Work
- **Heterogeneous Design:** Overlap CPU/GPU execution.
- **More Algorithms and Devices:** Explore other platforms like Nvidia’s Jetson Nano.
- **Integration:** Integrate with existing systems like Snort.
- **Code Availability:** Available online.

## Backup Slides

### Background (1/3)
- **Snort:**
  - De-facto NIDS.
  - Signature-based.
  - Main pipeline includes pattern matching, which accounts for over 70% of running time.

### Related Work
- **State Machine Based:**
  - Aho-Corasick
- **Filter Based:**
  - DFC
- **Benefits and Limitations:**
  - **Aho-Corasick:**
    - Benefits: One lookup per input byte.
    - Limitations: Poor cache locality and data dependencies.
  - **DFC:**
    - Benefits: Cache locality and no data dependencies.
    - Limitations: Underutilizes hardware, especially vector instructions.

This revised version aims to provide a clear, coherent, and professional presentation of the research.