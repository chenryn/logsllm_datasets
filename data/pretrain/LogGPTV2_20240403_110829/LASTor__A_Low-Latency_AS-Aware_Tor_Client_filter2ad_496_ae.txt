### 优化后的文本

#### 图11. 预测AS集合大小的分布及预测准确性
(a) 预测的AS集合大小分布，(b) 预测AS集合包含实际AS路径的准确性，以及(c) 假阴性率和(d) 假阳性率在预测窥探AS的存在。

**图11(a): AS集合大小分布**
- **横轴**: AS集合大小 (0, 10, 20, 30, 40, 50, 60)
- **纵轴**: 累积频率 (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)

**图11(b): 预测AS集合准确性**
- **横轴**: 路径数量 (0, 20, 40, 60, 80, 100)
- **纵轴**: 准确性 (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)

**图11(c): 假阴性率**
- **横轴**: 路径数量 (0, 20, 40, 60, 80, 100)
- **纵轴**: 假阴性率 (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)

**图11(d): 假阳性率**
- **横轴**: 路径数量 (0, 20, 40, 60, 80, 100)
- **纵轴**: 假阳性率 (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)

我们将所有入口和出口中继组合分为两类：一类是入口和出口段具有共同AS的组合，另一类是没有共同AS的组合。我们通过计算估计的AS集合之间的交集来预测存在窥探AS的假阴性率。图11(c) 显示我们的中位假阴性率为11%。这与其他方法相比（如使用iPlane预测的AS路径、[10]提出的方法（“E&S”线）或仅考虑端点和中继的AS（“Same AS”线）），中位假阴性率为28-57%。另一方面，在图11(d) 中，我们看到AS集合产生的假阳性率更高——即没有窥探AS但被我们的技术误判为有窥探AS的路径比例较高。然而，如图12所示，对于大多数 (src, dst) 对，具有潜在窥探AS的路径比例较低。因此，即使在中位情况下剔除约45%的候选路径，仍然可以保留大量路径供WSP选择。

#### D. AS感知对路径延迟的影响
最后，我们评估了AS感知对WSP获得的路径延迟的影响。WSP现在必须从所有可能的候选路径中选择一部分，因为它必须忽略那些被我们的AS集合估计算法检测为可能穿越能够通过流量关联推断 (客户端, 目的地) 对的AS的路径。尽管实践中检测到的具有窥探AS的候选路径子集通常较小，但我们检测程序的高假阳性率显著减少了考虑的路径子集。因此，我们再次使用WSP（α设为0）来测量从50个PlanetLab节点到前200个网站的Tor网络延迟。图13(a) 比较了这些延迟与不使用AS感知的WSP和默认Tor客户端的延迟。我们看到，为了避开窥探AS而修剪路径会导致延迟略有增加。图13(b) 显示这种延迟增加是由于使用AS集合信息时选择的路径长度增加所致。在未来的工作中，我们计划减少假阳性以进一步改善使用AS感知的WSP的延迟。

**图13: (a) 延迟和 (b) 归一化地理距离的比较**
- **横轴 (a)**: 延迟 (秒) (0, 0.5, 1, 1.5, 2)
- **纵轴 (a)**: 延迟 (秒)
- **横轴 (b)**: 归一化地理距离 (0, 0.2, 0.4, 0.6, 0.8, 1)
- **纵轴 (b)**: 归一化地理距离

#### VI. 实现
我们在LASTor Tor客户端中实现了所有开发的算法——以改进路径延迟、使路径选择可调，并将AS感知纳入路径选择。本节总结了LASTor的路径选择算法并提供了实现概述。

**A. 客户端操作**
在默认的Tor客户端中，客户端在启动时设置几个电路，此后，当用户选择通过Tor与特定目的地通信时，客户端会通过其中一个已建立的电路路由用户的流量 [24]。LASTor在这方面模仿默认的Tor客户端。此外，一旦LASTor了解用户希望与之通信的目的地，它会迅速使用AS感知的WSP选择路径，沿所选路径设置新电路，然后将用户的流量切换到该新电路。因此，LASTor在用户与目的地的通信时间较短的情况下，其延迟与默认Tor客户端相当。如果用户与目的地的交互时间较长（例如，用户访问网站上的多个网页），LASTor会在大部分交互过程中显著改善延迟，即在LASTor将用户流量切换到用WSP选择的电路后。

为了选择到指定目的地的路径，LASTor执行以下步骤的可调AS感知WSP算法：
1. 初始化时，LASTor客户端对所有可用中继进行聚类，并根据输入配置中指定的α值，从距客户端最近的 (20 + α · 80)% 的中继聚类中随机选择三个入口守护。
2. 当需要选择到目的地的路径时，LASTor在一组分布式节点上解析目的地的主机名，这些节点提供DNS查询服务。这些请求通过初始化客户端时建立的电路之一提交。
3. LASTor估计从客户端到入口守护以及从所有出口中继到目的地的AS集合，将每个候选出口中继映射到最接近目的地IP地址的中继。
4. LASTor然后计算每条候选路径的端到端距离，通过三个满足入口和出口段AS集合不相交检查的聚类。然后根据端到端距离和输入的α值，选择一条集群级路径。
5. 通过在所选集群级路径上随机选择一个中继来建立到目的地的电路。

**B. 默认Tor客户端的修改**
我们通过构建在默认Tor客户端之上实现LASTor。我们开发了一个Java应用程序，连接到默认Tor客户端的控制端口。控制端口是一个标准协议下的端口，用于管理和监控Tor客户端 [37]。通过向控制端口发送命令，我们的Java应用程序可以获取诸如所有可用中继的描述等信息，或者通过建立或关闭电路、将流附加到电路以及清除Tor的DNS缓存来管理Tor客户端。为了设置电路，我们的程序首先通过Tor控制端口获取相关信息，并将其作为输入提供给我们的可调路径选择算法。然后，它再次通过控制端口向Tor客户端发出命令以构建所需的电路。我们实现LASTor以在其输入配置中接受以下内容：1) 用于指导路径选择的α值；2) 提供DNS查询服务的节点列表文件。

**C. 输入数据集**
为了运行可调AS感知WSP路径选择算法，我们的Java程序需要几个数据集作为输入。首先，它从MaxMind [19] 获取一个将IP地址映射到位置的IP地理位置数据库。其次，第一次执行时，程序下载1) Internet拓扑的AS级表示，2) 用于确定策略合规路径的AS三元组集，3) 所有Tor中继与所有端点之间双向路径的AS路径长度快照，按BGP原子粒度分组。我们通过从各种来源 [27], [28], [12], [34] 汇总AS路径来构建前两个数据集。为了估计AS路径长度，我们向iPlane [38] 发出查询。我们发现iPlane每秒可以处理大约1000个查询，因此我们可以每天为所有6000万IP对（600个Tor中继BGP原子 × 50K个组成所有端点的BGP原子，双向）重新查询iPlane以获取AS路径长度信息。如前所述，所有三个数据集的存储大小不超过13 MB。由于这些数据集对所有客户端都是相同的，并且客户端下载这些数据的信息不会损害其匿名性，客户端可以通过BitTorrent等点对点文件分发系统相互下载这些数据，以避免压垮任何中央服务器的带宽需求。带宽受限的客户端可以从中央服务器下载相关数据子集，例如，仅下载与流行网站通信所需的AS路径长度信息。每周，客户端从中央服务器下载大约1.5 MB的AS路径长度信息更新，并且不太频繁地获取AS间链接集和AS三元组的更新。对于LASTor所需的所有数据集，我们确保它们是最新的并且易于获取。