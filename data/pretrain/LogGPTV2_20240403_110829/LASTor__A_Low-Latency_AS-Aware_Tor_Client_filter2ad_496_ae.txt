t
c
a
r
f
e
v
i
t
l
a
u
m
u
C
 0  10  20  30  40  50  60
AS set size
(a)
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Same AS
iPlane
E&S
AS sets
 0
 20  40  60  80  100
False positive rate (%)
AS sets
E&S
iPlane
Same AS
 0
 20  40  60  80  100
False negative rate (%)
 0  1  2  3  4  5  6  7  8
Number of ASes not in AS set
(b)
(c)
(d)
(a) Distribution of predicted AS set sizes, (b) accuracy of predicted AS sets encompassing actual AS paths, and distribution of (c)
)
t
s
d
,
c
r
s
(
f
o
F
D
C
s
r
i
a
p
Fig. 11.
false negative and (d) false positive rates in predicting the existence of snooping ASes.
 1
 0.8
 0.6
 0.4
 0.2
 0
all entry and exit relay combinations into those that have a
common AS across the entry and exit segments and those that
do not. We compute the false negative rate in predicting the
presence of snooping ASes as the fraction of entries in the
former partition not caught by our approach of computing
intersections between estimated AS sets. Fig. 11(c) shows
that our median false negative rate is 11%. This compares
to median false negative rates of 28–57% with alternate
approaches—using iPlane’s predicted AS paths, using the
approach proposed in [10] (the “E&S” line), or when only
accounting for ASes of end-hosts and relays (the “Same AS”
line). On the ﬂip side, in Fig. 11(d), we see that AS sets
produce a much greater false positive rate—fraction of paths
that do not have a snooping AS but are declared as having one
by our technique—compared to other approaches. However,
as we see in Fig. 12, the fraction of paths with potential
snooping ASes is low for most (src, dst) pairs. So, pruning
out about 45% of candidate paths in the median case still
leaves a sizeable set of paths from which WSP can choose.
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
WSP
WSP+AS sets
Default
 0
 0.5
 1
 1.5
 2
Latency (sec)
(a)
WSP
WSP+AS sets
 0
 0.2
 0.4
 0.6
 0.8
 1
Normalized distance
(b)
D. Impact of AS-awareness on path latency
Finally, we evaluate the impact that the incorporation of
AS-awareness has on path latencies obtained with WSP. WSP
has to now select from a subset of all possible candidate
paths, because it has to ignore those detected by our AS set
estimation algorithm as potentially traversing an AS capable
of inferring the (client, destination) pair by trafﬁc correlation.
Though the subset of candidate paths with snooping ASes is
typically small in practice, the high false positive rate of our
detection procedure signiﬁcantly reduces the subset of paths
considered. Therefore, we again use WSP (with α set to 0) to
measure latencies over the Tor network from 50 PlanetLab
nodes to the top 200 websites. Fig. 13(a) compares these
latencies with those obtained when using WSP without AS-
awareness and when using the default Tor client. We see that
the pruning of paths to avoid snooping ASes results in a
slight increase in latency. Fig. 13(b) shows that this increase
in latency is due to an increase in the length of the chosen
path when using WSP informed by AS sets. In future work,
we plan to pursue a reduction in false positives to further
improve latencies when using WSP with AS-awareness.
Fig. 13. Comparison of (a) latencies and (b) normalized geographical
distance along paths chosen with WSP (α = 0) with and without AS-
awareness.
VI. IMPLEMENTATION
We implement all of the algorithms developed thus far—
to improve path latency,
to make path selection tunable,
and to incorporate AS-awareness into path selection—in the
LASTor Tor client. In this section, we summarize LASTor’s
path selection algorithm and provide an overview of our
implementation.
A. Client in action
In the default Tor client, the client sets up a few circuits on
startup and thereafter, when the user chooses to communicate
with a particular destination via Tor, the client routes the user’s
trafﬁc over one of the established circuits [24]. LASTor mimics
the default Tor client in this respect. In addition, once LASTor
learns the destination that the user wishes to communicate
with, it quickly selects a path using AS-aware WSP, sets up
a new circuit along the chosen path, and then transitions the
user’s trafﬁc to the destination to this new circuit. Thus, the
486
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
latency obtained with LASTor matches that of the default Tor
client in the case when the user’s communication with the
destination is short. In the case when the user’s interaction
with the destination is prolonged, e.g., when the user visits
several web pages on a website, LASTor signiﬁcantly improves
latencies for most of the user’s interaction, i.e., once LASTor
switches the user’s trafﬁc to the circuit chosen with WSP.
To select a path to the speciﬁed destination, LASTor executes
the tunable AS-aware WSP algorithm with the following
sequence of steps.
• Upon initialization, the LASTor client clusters all available
relays, and using the value for α speciﬁed in its input
conﬁguration, it chooses three entry guards at random from
the (20 + α · 80)% closest relay clusters to the client.
• When required to select a path to a destination, LASTor
resolves the destination’s hostname on a distributed set of
nodes that service requests to perform DNS lookups. These
requests are submitted via one of the circuits established
upon initialization of the client.
• LASTor estimates the AS sets for the paths from the client to
the entry guards and from all exit relays to the destination,
mapping every candidate exit relay to the closest among the
IP addresses obtained for the destination.
• LASTor then computes the end-to-end distance on every
candidate path through three clusters that satisfy the check
of the AS sets for the entry and exit segments being disjoint.
One cluster-level path is then selected with the probability
of a path being chosen dependent on the end-to-end distance
on it and the input value of α.
• The circuit to the destination is then established via one
relay selected at random from each of the clusters on the
chosen cluster-level path.
B. Modiﬁcation of default Tor client
We implement LASTor by building upon the default Tor
client. We have implemented a Java application which con-
nects to the default Tor client on its control port. This control
port is a port on the Tor client which can be used to manage
and monitor the Tor client based on a standard protocol [37].
By issuing commands to the control port, our Java application
can either obtain information such as the description of all
available relays, or manage the Tor client by establishing or
closing a circuit, attaching streams to a circuit, and clearing
Tor’s DNS cache. To setup a circuit, our program ﬁrst fetches
relevant information through the Tor control port and provides
this as input to our tunable path selection algorithm. It then
issues commands to the Tor client, again via the control port,
to build desired circuits. We implement LASTor to take as
part of its input conﬁguration 1) a value of α to guide path
selection, and 2) a ﬁle with a list of nodes that provide the
DNS lookup service.
C. Input datasets
To run the tunable AS-aware WSP path selection algorithm,
our Java program needs several datasets as input. First, it
l
s
y
a
e
r
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
BW >= 100KBps
All Relays
 1
 1.5
 0.5
Latency (secs)
 2
(b)
 10
 100
 1000  10000 100000
Bandwidth (KB/s)
(a)
(a) Distribution of bandwidth across Tor relays, and (b)
Fig. 14.
comparison of end-to-end latencies with and without taking relay
bandwidth into account; median latency across 5 paths are shown.
fetches a IP geolocation database that maps IP addresses to
locations from MaxMind [19]. Second, the ﬁrst time it is
executed, the program downloads 1) a AS-level representation
of the Internet topology, 2) the set of AS three-tuples used
to determine policy-compliant paths, and 3) a snapshot of AS
path lengths for paths in either direction between all Tor relays
and all end-hosts, grouped at the granularity of BGP atoms.
We put together the ﬁrst two datasets by aggregating AS paths
from various sources [27], [28], [12], [34]. To estimate AS path
lengths, we issue queries to iPlane [38]. We ﬁnd that iPlane
can process roughly 1000 queries per second, and so, we can
re-query iPlane every day for all 60 million IP pairs (600 BGP
atoms with Tor relays × 50K BGP atoms comprising all end-
hosts, in either direction) for which we need AS path length
information. As mentioned before, all three datasets can be
stored in less than 13 MB in size. Since these datasets are
the same across all clients and the information of a client
having downloaded this data does not hamper its anonymity,
clients can download this data from each other via a peer-
to-peer ﬁle distribution system such as BitTorrent, so as to
not overwhelm the bandwidth requirements of any central
server. Bandwidth-constrained clients can however download
relevant subsets of this data from the central server, e.g., only
AS path length information necessary for communication with
popular websites. Lastly, every week, the client downloads a
roughly 1.5 MB update for AS path length information, and
more infrequently, fetches updates for the set of inter-AS links
and AS three-tuples. These updates are fetched from a central
server since the update depends on the version of the data
already on the client. For all datasets required by LASTor, we