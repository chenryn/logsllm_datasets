0.428 
0.492 
0.761 
0.279 
0.309 
0.294 
Cost over IP  1  Cost over Base  I 
I 
I 
1 
n/a 
n/a 
0.120 
0.259 
0.197 
0.266 
0.332 
0.353 
2.830 
0.553 
0.270 
0.354 
0.385 
0.7 18 
0.236 
0.266 
0.251 
Table 1. Roundtrip times (in ms) 
are both algorithmic or property-based constraints that  are 
independent of a particular implementation, and implemen- 
tation  constraints that are specific to our Cactus-based pro- 
totype.  Algorithmic constraints  are  those  that  result  from 
the  inherent  nature  of  properties  being enforced or the  al- 
gorithms used.  For  example, the non-repudiation micro- 
protocol  requires the use  of an authenticity  micro-protocol 
based on public keys. Similarly, all micro-protocols that use 
a key  require either that the key  is provided when  the  ses- 
sion  is  created  or that a key  distribution  micro-protocol is 
included. 
Other  algorithmic constraints  affect  the  order in  which 
various security algorithms are applied. For example, all at- 
tack  prevention micro-protocols should execute before pri- 
vacy, integrity, or authenticity micro-protocols at the sender 
to  ensure  that  the  mechanism  used  for  attack  prevention 
is protected  from modification.  Similarly,  non-repudiation 
micro-protocols should be executed immediately before au- 
thentication  at  the  receiver  so that  only  the  sender’s  pub- 
lic  key  is  required  to  later  prove  the  message  was  sent by 
the sender.  Other ordering constraints have been  identified 
elsewhere  [ I ,   21.  A  related  issue  not  addressed  here  but 
considered elsewhere is the actual effectiveness of multiple 
encryption and custom security solutions [ 17,241. 
Implementation constraints are those that result from the 
specific  design  of  the  SecComm  micro-protocols.  Com- 
pared with  systems that support linear or hierarchical com- 
180 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
position  models, the  non-hierarchical  model  supported by 
Cactus introduces  minimal  implementation constraints  on 
configurability.  That  is,  with  Cactus,  it  is  generally  pos- 
sible  to  implement  independent service  properties  so that 
this independence is maintained in the micro-protocol real- 
ization.  When  extra  constraints do get imposed, it is  usu- 
ally because making an extra assumption about which other 
micro-protocols are present significantly  simplifies the im- 
plementation. 
In  the  current  SecComm  prototype,  the  only additional 
implementation  constraint is that each integrity  and replay 
prevention  micro-protocol can  be  used  at  most  once  in  a 
given  configuration.  Thus, for example,  two  instances of 
MDSIntegrity  cannot be used together, while MDSIntegrity 
and  SHAIntegrity  can  be.  This  restriction  results  from 
the  use  of  fixed  message attribute  names  for  each micro- 
protocol, which could be avoided by dynamically assigning 
attribute names at startup time. 
6  Related work 
Related  work includes the general  use of redundancy to 
enhance survivability, as well  as research  more directly re- 
lated to secure communication.  Redundancy has tradition- 
ally  been  used  to  improve file  system fault  tolerance,  but 
different redundancy  techniques have also been  used  to in- 
crease  security,  or  both  fault  tolerance  and  security.  For 
example, cryptographic methods were used to store data on 
untrusted  file servers [9] and data fragmentation and repli- 
cation techniques have been used to prevent intruders from 
accessing, modifying, or destroying information  [6, 8, 141. 
Recent  developments provide similar guarantees,  but  also 
ensure anonymity of  the information  publisher  [3, 261.  Al- 
though none of this research is cast in terms of survivability, 
it can also be viewed in that context. 
Other approaches do not replicate data, but introduce re- 
dundant detection components. Examples include Tripwire 
[ 151, which detects changes in  files by  maintaining check- 
sums and  periodically  comparing the  files  against  check- 
sum,  and  StackGuard  [4],  which  detects  buffer  overflow 
attacks by  storing a  secret “canary” word  in  the  stack and 
checking it upon function call return. Intrusion detection in 
general  augments a system with  a  component that  detects 
undesired  behavior that would be otherwise allowed by  the 
security mechanisms of the given system [SI. 
Work  specifically  related  to  SecComm  can  be  divided 
into  secure  communication  standards  and  other  config- 
urable secure communication services. Some degree of cus- 
tomization  is supported in several recent standards. For ex- 
ample, IPsec  allows  a  choice of  security  options,  includ- 
ing message integrity  and privacy  using  a selected  crypto- 
graphic method [ 131. It is also possible to apply multiple se- 
curity methods to a given communication connection.  TLS 
(Transport  Level  Security)  [7] offers  a  choice  of  privacy 
(e.g., DES or RC4),  integrity  (e.g.,  keyed  SHA or MD5), 
and  optional  message  compression,  but  does  not  directly 
support  the  use  of  redundant  methods.  In  general,  Sec- 
Comm  offers  more  flexible  options  for using  redundancy 
techniques to enhance the survivability of such services. 
Configurable secure communication services have  been 
implemented  using  various  configuration  frameworks,  in- 
cluding the x-kernel  [20], Ensemble [22] and the framework 
described in [19].  All these models are similar in the sense 
that a communication subsystem is constructed as a directed 
graph of  protocol  objects.  Although this  allows  arbitrary 
combinations of security  components, the structure  is lim- 
iting compared to Cactus and would make it difficult to im- 
plement some of our more dynamic redundancy techniques. 
However, Antigone [ 161 has adopted an approach similar to 
Cactus in  which  micro-protocols and  composite protocols 
are  used  to  implement secure  group  communication  with 
customizable policies,  including rekeying and message se- 
curity.  To our knowledge, none of these  projects have ex- 
plored the use of redundancy techniques in security. 
7  Conclusions 
This paper has discussed the use of redundant techniques 
as the basis for improving the survivability of security  ser- 
vices. While the idea of combining fault tolerance and secu- 
rity  is not new, this paper promotes a more general applica- 
tion of redundancy techniques in different areas of security 
and  introduces  a  convenient implementation platform  for 
such techniques. Our approach can also be viewed as a way 
of artificially increasing  the diversity of the system, which 
has been advocated elsewhere as a potential approach to im- 
proving  survivability  [23].  In addition,  we described Sec- 
Comm, a security  service that  allows customization of se- 
curity attributes at a fine-grain level. While similar in spirit 
to existing protocols such as IPsec and TLS, SecComm goes 
beyond these to support more attributes and more variants, 
all within  a flexible and extensible implementation frame- 
work based on micro-protocols and events. The design also 
decouples to a large extent the security aspects and the com- 
munication aspects of the problem. 
Future work will focus on using the Cactus framework to 
implement dynamically adaptable security  services, where 
the security mechanisms are changed at runtime in reaction 
to changed security requirements (e.g.: suspected intrusion) 
or changes in  available  resources.  The Cactus framework 
makes it easy  to activate and deactivate  micro-protocols at 
runtime,  and  we  have  designed  and  implemented  coordi- 
nation mechanisms that allow adaptations across machines 
and  across system layers to occur smoothly without inter- 
rupting  normal  operation.  Our ultimate  goal is to use this 
fine-grain configurability  and fast adaptation  ability  as the 
181 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
[ 141  H. Kiliccote and P. Khosla.  Borg: A scalable and secure dis- 
tributed information system.  In Proceedings  of  the Informa- 
tion Survivability  Workshop 1998, pages  101-105,  Orlando, 
FL, Oct 1998. 
[I51  G. Kim and E. Spafford.  The design and implementation of 
tripwire:  A file system integrity checker.  In 2nd ACM  Con- 
ference  on  Computer and  Corntnunications Security,  pages 
18-29,  Fairfax, Virginia, Nov 1994. 
1161  P.  McDaniel, A. Prakash,  and P.  Honeyman.  Antigone:  A 
flexible framework for secure group communication. In Pro- 
ceedings of the 8th USENIX Security Symposium, pages 99- 
1 14, Aug  1999. 
1171  R. Merkle and M. Hellman.  On the security of multiple en- 
cryption.  Communications  of the ACM, 24(7):465-467,  Jul 
1981. 
A.  Montz,  D.  Mosberger,  S. O’Malley,  L.  Peterson,  and 
T. Proebsting.  Scout:  a communications-oriented  operating 
system. In Proceedings  of the Hot OS, May  1995. 
P. Nikander and A. Karila.  A Java Beans component archi- 
tecture for cryptographic protocols. In Proceedings of the 7th 
USENIX Security Symposium, San Antonio, TX, Jan  1998. 
H.  Orman,  S. O’Malley,  R. Schroeppel,  and  D.  Schwartz. 
Paving the  road  to  network  security or the  value  of  small 
cobblestones.  In  Proceedings  of  the  1994  Internet  Society 
Symposium on Network and Distributed System Security, Feb 
1994. 
F.  Reynolds.  The OSF real-time  micro-kernel.  Technical 
report, OSF Research Institute, 1995. 
0. Rodeh,  K. Birman,  M. Hayden, Z. Xiao, and D. Dolev. 
The architecture and  performance  of  security  protocols  in 
the Ensemble group communication system.  Technical Re- 
port TR98- 1703, Department of Computer Science, Cornell 
University, Dec 1998. 
F.  Schneider,  editor.  Trust  in  Cyberspace.  Committee 
on Information Systems Trustworthiness, National Research 
Council,  National  Academy  Press,  Washington,  D.C.  Sep 
1998. 
B.  Schneier.  Applied  Ctyptograplzy.  John  Wiley  & Sons, 
Inc., New York, 1994. 
F.  Travostino,  E.  Menze,  and  F.  Reynolds.  Paths:  Pro- 
gramming with system resources in support of real-time dis- 
tributed  applications.  In  Proceedings  of  the  IEEE  Work- 
shop  on  Object-Oriented  Real-Time  Dependable  Systenis, 
Feb 1996. 
M.  Waldman,  A.  Rubin,  and  L. Cranor.  Publius:  A  ro- 
bust,  tamper-evident,  censorship-resistant, web  publishing 
system.  In  Proceedings  of  the  9th  USENIX  Security  Sym- 
posium, pages 59-72,  Aug 2000. 
basis for an inherently  siirvivable  system  architecture  that 
can automatically react to threats in the execution environ- 
ment. 
Acknowledgments 
Gary Wong implemented the Cactus framework used for 
the SecComm implementation.  He also provided excellent 
comments and suggestions that improved the paper. 
References 
M. Abadi  and R. Needham.  Prudent  engineering  practice 
for cryptographic protocols.  IEEE Transactions on Sofhyare 
Engineering, 22(1):6-15,  Jan 1996. 
R. Anderson  and  R. Needham.  Robustness  principles  for 
public  key  protocols.  In  Proceedings  of  Cypto’95, pages 
236-247,  1995. 
I. Clarke, 0. Sandberg, B. Wiley,  and T. Hong.  Freenet:  A 
distributed anonymous information storage and retrieval sys- 
tem.  In Proceeding  ofthe ICs1 Workshop on Design  Issues 
in Anonymity and Unobservability, Berkeley, CA, Jul2000. 
C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole. Buffer 
overflows:  Attacks and defenses for the vulnerability  of the 
decade. In DARPA Information Survivability Conference and 
Exposition  (DISCEX  2000),  pages  119-129,  Hilton  Head, 
SC, Jan 2000. 
D. Denning.  An  intrusion-detection  model.  IEEE  Trans- 
actions  on  Software  Engineering,  SE- 13(2):222-232,  Feb 
1987. 
Y.  Deswarte, J.-C. Fabre, J.-M.  Fray,  D. Powell, and  P.-G. 
Ranea.  Saturne: A distributed  computing system which tol- 
erates faults and intrusions. In Proceedings  of the  Workshop 
on Future  Trends of Distributed  Computing Systems,  pages 
329-338,  Hong Kong, Sep 1990. 
T. Dierks and C. Allen.  The TLS protocol, version  1 .O.  RFC 
(Standards Track) 2246, Jan 1999. 
J.-C. Fabre, Y. Deswarte;  and B. Randell.  Designing secure 
and  reliable  applications  using  fragmentation-redundancy- 
scattering:  an object-oriented  approach.  In  Proceedings  of 
the 1st European Dependable  Computing Conference, pages 
21-38,  Berlin, Germany, Oct 1994. 
J. Fraga and D.  Powell.  A  fault and  intrusion-tolerant  file 
system. In Proceedings of the IFIP 3rd International Confer- 
ence on Computer Security, pages 203-218,  Dublin, Ireland, 
1985. 
P.  Gutmann.  Cryptlib.  Department  of  Computer  Science, 
University of Auckland, 1998. 
M.  Hiltunen, ‘R. Schlichting,  X.  Han,  M.  Cardozo,  and 
R. Das.  Real-time dependable channels:  Customizing QoS 
attributes for distributed systems. IEEE Transactions on Par- 
allel and Distributed  Systems,  10(6):600-612,  Jun 1999. 
N. Hutchinson  and L. Peterson.  The x-kernel:  An architec- 
ture for implementing network protocols. IEEE Transactions 
on Software Engineering, 17(1):64-76,  Jan 1991. 
S. Kent and R. Atkinson.  Security architecture for the inter- 
net protocol.  RFC (Standards Track) 2401, Nov  1998. 
182 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply.