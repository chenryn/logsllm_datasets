could happen due to reordering, if packets encrypted with
the forward-secure key were received before the s hello
message. Hence, the client buffers the bad s hello message
for later decryption. Eventually the client times out and re-
transmits the c hello message. This process will repeat until
the client’s 10 second timer on connection establishment
expires. At that point the connection will be terminated.
The client will notify the server that it terminated the con-
nection, but, unfortunately, this message will be transmitted
encrypted with the initial encryption key. Hence, the server
will be unable to process it and will continue to retain the
connection state. This state will only be removed when the
idle connection timeout expires, by default after 10 minutes.
We found that this attack effectively prevented all targeted
QUIC connections. Further, all targeted connections experi-
enced a 10 second delay before timing out.
OTHER ATTACKS While developing and testing the Server
Conﬁg Replay Attack, we discovered an additional attack
against QUIC. This attack results from QUIC treating hand-
shake messages as part of a logical byte-stream, a detail
abstracted out of the provable security analysis.
Crypto Stream Offset Attack. Recall that handshake
messages are part of a logical byte-stream in QUIC. As a
result, by injecting data into this byte stream an attacker is
able to break the byte-stream and prevent the processing of
further handshake messages. The attack results in preventing
a client from establishing a connection using QUIC, either
denying access to the desired application or forcing the client
to fall back to TCP/TLS.
We create the attack by injecting a four character string
into this handshake message stream. This injection is sufﬁ-
cient to prevent connection establishment. Our attacker lis-
tens for c hello messages and responds with a spoofed reply
containing the string “REJ\0” in the handshake message
stream. As observed before, this breaks connection estab-
lishment because any messages from the server will now
start at the wrong offset in the handshake message stream.
Hence, they will be discarded or buffered indeﬁnitely.
A connection that is attacked in this manner will either be
terminated by the server because of an entropy bit mismatch
or be timed out by the client after 10 seconds.
Note that an attacker requires very little information
to launch this attack. No information is needed from the
client’s c hello message, QUIC packet sequence numbers
always start from 1, and the cid can be omitted from any
packet other than the client’s c hello. As a result, all an
attacker needs to launch this attack is knowledge of when
a connection attempt will occur and the 4-tuple (server IP,
client IP, server port, client port) involved. Of this 4-tuple,
three items are already known: the server’s IP, the client’s
IP, and the server’s UDP port. If an attacker can guess
the client’s UDP port and when it will make a connection
attempt, he can launch this attack completely blind.
In our tests,
the ephemeral UDP port range was still
too large to brute force within an RTT, at least with our
python attacker. However, if the attacker can narrow the port
range sufﬁciently, then an optimized C implementation could
probably conduct this attack completely blind.
A. Attack Discussion
In this section we discuss how the attacks we found
against QUIC relate to prior attacks on TCP and TLS. We
ﬁnd that attacking QUIC is not easier than TCP and TLS.
Source-Address Token Replay Attack. This QUIC at-
tack is similar to the TCP SYN Flood attack where the
attacker sends numerous spoofed TCP SYN packets to a
server to overwhelm it and cause DoS [33]. The QUIC attack
does almost the same thing, but the attacker is limited in the
IP addresses he can use for spoofed packets. However, the
impact of each spoofed packet is larger because QUIC needs
to create encryption keys after receiving the initial packet.
The classic mitigation to SYN Flood is SYN Cookies,
opaque tokens passed to the client by the server in the
SYN-ACK and returned by the client on the ﬁnal handshake
ACK [33]. A SYN-Cookie encodes enough information so
that the server does not need to keep state between the SYN
and the ﬁnal ACK and can serve as a proof that the client
resides at its claimed IP address. The server creates the
connection state structures only after the cookie is returned
by the client, making it more difﬁcult to overwhelm the
server with spoofed connection requests.
An stk serves a similar purpose in preventing spoofed
packets, with the difference being that its goal is to avoid
the RTT incurred for a handshake. SYN-Cookies cannot be
replayed because they are single use [33]. Because QUIC
wants to support 0-RTT connections, it cannot make stks
single use, instead it limits their time and IP address validity.
This allows an attacker to replay them.
QUIC Manipulation Attacks. These QUIC attacks are
similar to the SSL Downgrade attack against a modern TLS
implementation. In both cases, a Man-In-The-Middle at-
tacker modiﬁes packet ﬁelds and the attack is not discovered
until the end of the handshake, after key generation and
multiple RTTs.
SSL Downgrade works against SSL connections where
both endpoints have SSL versions less than SSL 3.0 enabled.
The goal is to downgrade the connection to an older, less
secure version of SSL [34]. Basically, the attacker rewrites
the connection request to indicate that the client only sup-
ports an older version of SSL, often version 2.0. The server
and client then establish an SSL 2.0 connection, which the
attacker can presumably compromise.
SSL 3.0 adds protection against this attack by adding a
keyed hash of all the handshake messages to the Finished
message and requiring the receiver to verify this hash [34].
229229
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
This defense is effective, but the attack will only be detected
at the end of the handshake.
Our QUIC Manipulation Attacks have similar outcome
where the attack only becomes apparent at the end of the
handshake when the keys generated by client and server do
not match. Thus, the connection fails after a timeout, and the
client may fall back to TCP/TLS. Since QUIC is designed
to provide much lower latency for connection initiation than
TCP/TLS, this compromises one of QUIC’s main goals.
As discussed in section VIII-B, one simple mitigation
would be to sign all modiﬁable ﬁelds in the server’s s reject
and s hello messages. However, this introduces signature
computation overhead and a possible DoS attack.
QUIC Crypto Stream Offset Attack. This attack is
similar to the TCP ACK Storm attack in that both result in
the inability to transfer any more data over the target byte-
stream and are caused by an attacker inserting data into the
byte-stream.
The TCP ACK Storm attack [35] requires an attacker who
can observe a TCP ACK packet of the target connection and
then spoof data-bearing packets to both the client and the
server. This data will be received and processed by the client
and server and both will increase their ACK numbers as a
result. Unfortunately, when an ACK is eventually sent by
either client or server, it will appear to acknowledge data that
the other side has not yet sent. TCP will drop such packets
and send a duplicate ACK. At this point, the TCP byte-
stream is effectively broken; no more data can be transferred
because all packets will have invalid ACK numbers.
In much the same way, injection of data into a QUIC
handshake stream disrupts the stream offsets and prevents
any further handshake negotiation. This eventually results in
connection timeout. Although a byte-stream is a convenient
abstraction, it does not appear to be a good ﬁt for handshake
data. A message-stream, or sequence of messages, would be
less prone to disruption in this manner.
X. CONCLUSIONS AND FUTURE WORK
In this paper we provide the provable-security treatment of
QUIC and assess its performance guarantees in the presence
of adversaries. We provide a formal deﬁnition of a Quick
Connections (QC) protocol, formally deﬁne a novel security
model Quick ACCE (QACCE) appropriate for QC protocols,
and show that QUIC satisﬁes QACCE under reasonable
assumptions on its underlying building blocks.
Our analysis also reveals, however, that in the presence
of attackers, QUIC may be unable to attain one of its main
goals: 0-RTT connections. The adversary can make QUIC
fall-back to TCP/TLS or cause the client and server to have
an inconsistent view of their handshake which could lead
to inconsistent states and more latency. Furthermore, such
simple attacks could also be used to mount DoS attacks.
Our security deﬁnition is general and we plan to use
our models to analyze other performance-driven security
protocols, such as TLS version 1.3. Our work provides
insights into the pitfalls of designing performance-driven
secure protocols. In the future, we hope to explore method-
ologies for addressing the weaknesses of the QUIC protocol,
which we have presented in this paper, and which may also
be relevant to other protocols in this domain.
XI. ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their comments.
We thank Marc Fischlin and Bogdan Warinschi for useful
discussions. We thank Adam Langley, Jim Roskind, Jo
Kulik, Alyssa Rzeszutek Wilk, Ian Swett, Fedor Kouranov,
and Robbie Shade for help with QUIC protocol details.
We thank Andrew Newell for ﬁrst introducing us to QUIC.
Alexandra Boldyreva and Robert Lychev were supported
in part by NSF CNS-1318511 and CNS-1422794 awards.
Cristina Nita-Rotaru was supported in part by NSF CNS-
1421815 award.
REFERENCES
[1] T. Dierks and C. Allen, “The TLS protocol version 1.0,” RFC
2246 (Proposed Standard), Internet Engineering Task Force,
Jan. 1999.
[2] J. Roskind,
“Quick UDP internet
connections: Mul-
[Online].
tiplexed stream transport over UDP,” 2012.
Available:
VvKWyWg6Lr8SZ-saqsQx7rFV-ev2jRFUoVD34/edit
https://docs.google.com/document/d/1RNHkx
[3] J. Erman, V. Gopalakrishnan, R. Jana, and K. K. Ramakr-
ishnan, “Towards a SPDY’ier mobile web?” in Proceedings
of
the Ninth ACM Conference on Emerging Networking
Experiments and Technologies, ser. CoNEXT ’13. ACM,
2013, pp. 303–314.
[4] R. Stewart, “Stream control transmission protocol,” RFC 4960
(Proposed Standard), Internet Engineering Task Force, Sep.
2007.
[5] B. Ford, “Structured streams: A new transport abstraction,” in
Proceedings of the 2007 Conference on Applications, Tech-
nologies, Architectures, and Protocols for Computer Commu-
nications, ser. SIGCOMM ’07. ACM, 2007, pp. 361–372.
[6] J. Roskind, “Experimenting with QUIC,” The Chromium
Blog, 2013. [Online]. Available: http://blog.chromium.org/
2013/06/experimenting-with-quic.html
[7] E. Rescorla and N. Modadugu, “Datagram transport layer
security version 1.2,” RFC 6347 (Proposed Standard), Internet
Engineering Task Force, Jan. 2012.
[8] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk, “On the
security of TLS-DHE in the standard model,” in CRYPTO,
ser. Lecture Notes in Computer Science, R. Safavi-Naini and
R. Canetti, Eds., vol. 7417. Springer, 2012, pp. 273–293.
[9] H. Krawczyk, K. G. Paterson, and H. Wee, “On the security
of the TLS protocol: A systematic analysis,” in CRYPTO,
ser. Lecture Notes in Computer Science, R. Canetti and J. A.
Garay, Eds., vol. 8042. Springer, 2013, pp. 429–448.
230230
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
[10] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y.
Strub, and S. Z. Bguelin, “Proving the TLS handshake secure
(as it is),” 2014, IACR Cryptology ePrint Archive 2014: 182
(2014).
[24] P. Rogaway, “Authenticated-encryption with associated-data,”
in Proceedings of the 9th ACM Conference on Computer and
Communications Security, ser. CCS ’02. ACM, 2002, pp.
98–107.
[11] M. Fischlin and F. G¨unther, “Multi-stage key exchange and
the case of google’s QUIC protocol,” in Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communi-
cations Security, ser. CCS ’14. ACM, 2014, pp. 1193–1204.
[12] R. Clayton, S. J. Murdoch, and R. N. Watson, “Ignoring the
great ﬁrewall of China,” in Privacy Enhancing Technologies.
Springer, 2006, pp. 20–35.
[13] E.
Rescorla,
“New
TLS
[Online]. Available: http://tools.ietf.org/html/
handshake
1.3,” 2014.
draft-rescorla-tls13-new-ﬂows-01
ﬂows
for
[14] J. Salowey, H. Zhou, P. Eronen, and H. Tschofenig, “Trans-
port layer security (TLS) session resumption without server-
side state,” RFC 5077 (Proposed Standard), Internet Engineer-
ing Task Force, Jan. 2008.
[15] A. Langely, “Google, Personal communication,” 2014.
[16] R. Lychev, S. Jero, A. Boldyreva, and C. Nita-Rotaru, “How
secure and quick is QUIC? Provable security and performance
analyses,” 2015, Full version of this paper. IACR Cryptology
ePrint Archive 2015.
[17] A. R. Wilk, J. Kulik, F. Kouranov, and A. Westerlund,
“Google QUIC team, Personal communication,” 2014.
[18] W. Aiello, S. M. Bellovin, R. Canetti, J. Ioannidis, A. D.
Keromytis, and O. Reingold, “Just fast keying: Key agreement
in a hostile Internet,” in ACM Transactions on Information
and System Security, ser. TISSEC, vol. 7, no. 2. ACM, May
2004, pp. 1–30.
[19] B. Blanchet, “A computationally sound mechanized prover
for security protocols,” in Proceedings of the 2006 IEEE
Symposium on Security and Privacy.
IEEE Computer
Society, 2006, pp. 140–154.
[20] G. Barthe, B. Gr´egoire, S. Heraud, and S. Z. B´eguelin,
“Computer-aided security proofs for the working cryptogra-
pher,” in CRYPTO, ser. Lecture Notes in Computer Science,
P. Rogaway, Ed., vol. 6841. Springer, 2011, pp. 71–90.
[21] C. Fournet, M. Kohlweiss, and P. Strub, “Modular code-based
cryptographic veriﬁcation,” in Proceedings of the 18th ACM
Conference on Computer and Communications Security, ser.
CCS ’11. ACM, 2011, pp. 341–350.
[22] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P. Strub,
and S. Z. B´eguelin, “Proving the TLS handshake secure (as
it is),” in CRYPTO, ser. Lecture Notes in Computer Science,
J. A. Garay and R. Gennaro, Eds., vol. 8617. Springer, 2014,
pp. 235–255.
[23] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and
P. Strub, “Implementing TLS with veriﬁed cryptographic
security,” in Proceedings of the 2013 IEEE Symposium on
Security and Privacy.
IEEE Computer Society, 2013, pp.
445–459.
[25] M. Abdalla, M. Bellare, and P. Rogaway, “The oracle Difﬁe-
Hellman assumptions and an analysis of DHIES,” in Topics
in Cryptology – CT-RSA, ser. Lecture Notes in Computer
Science, D. Naccache, Ed., vol. 2020.
Springer, 2001, pp.
143–158.
[26] D. A. McGrew and J. Viega, “The security and performance
of the Galois/counter mode (GCM) of operation,” in Progress
in Cryptology-INDOCRYPT 2004. Springer, 2004, pp. 343–
355.
[27] M. Bellare and P. Rogaway, “Random oracles are practical: a
paradigm for designing efﬁcient protocols.” in Proceedings of
the 1st ACM Conference on Computer and Communications
Security, ser. CCS ’93. ACM, 1993, pp. 62–73.
[28] ——, “Entity authentication and key distribution,” in
CRYPTO, ser. Lecture Notes in Computer Science, D. Stin-
son, Ed. Springer, 1994, vol. 773, pp. 232–249.
[29] C. Brzuska, N. P. Smart, B. Warinschi, and G. J. Watson, “An
analysis of the EMV channel establishment protocol,” in Pro-
ceedings of the 2013 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’13. ACM, 2013,
pp. 373–386.
[30] EMVCo LLC, “EMV ECC key establishment proto-
[Online]. Available: http://www.emvco.com/
cols,” 2012.
speciﬁcations.aspx?id=243
[31] M. Bellare, T. Kohno, and C. Namprempre, “Breaking
and provably repairing the SSH authenticated encryption
scheme: A case study of the Encode-then-Encrypt-and-MAC
paradigm,” ACM Trans. Inf. Syst. Secur., vol. 7, no. 2, pp.
206–241, 2004.
[32] Y. Dodis, T. Ristenpart, J. P. Steinberger, and S. Tessaro, “To
hash or not to hash again? (In)differentiability results for H 2
and HMAC.” in CRYPTO, ser. Lecture Notes in Computer
Science, R. Safavi-Naini and R. Canetti, Eds. Springer, 2012,
vol. 7417, pp. 348–366.
[33] W. Eddy, “TCP SYN ﬂooding attacks and common mitiga-
tions,” RFC 4987 (Informational), Aug. 2007.
[34] J. Clark and P. C. van Oorschot, “SoK: SSL and HTTPS: Re-
visiting past challenges and evaluating certiﬁcate trust model
enhancements,” in Proceedings of the 2013 IEEE Symposium
on Security and Privacy.
IEEE Computer Society, 2013, pp.
511–525.
[35] R. Abramov and A. Herzberg, “TCP ack storm DoS attacks,”
in Future Challenges in Security and Privacy for Academia
and Industry, J. Camenisch, S. Fischer-Hbner, Y. Murayama,
A. Portmann, and C. Rieder, Eds. Springer, 2011, pp. 29–40.
231231
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply.