### Potential Issues with Packet Reordering in QUIC

Packet reordering can cause issues if packets encrypted with the forward-secure key are received before the `s hello` message. In such cases, the client buffers the `s hello` message for later decryption. If the client does not receive the `s hello` message within a 10-second timeout period, it retransmits the `c hello` message. This process repeats until the 10-second timer for connection establishment expires, at which point the connection is terminated.

The client then notifies the server of the termination, but this notification is encrypted with the initial encryption key. Consequently, the server cannot process this message and retains the connection state. The server will only remove this state when the idle connection timeout (default 10 minutes) expires. Our findings indicate that this attack effectively prevents all targeted QUIC connections and causes a 10-second delay before timing out.

### Additional Attacks on QUIC

#### Crypto Stream Offset Attack

During our development and testing of the Server Config Replay Attack, we discovered another attack against QUIC. This attack exploits the fact that handshake messages in QUIC are part of a logical byte-stream, a detail abstracted out of the provable security analysis.

**Attack Mechanism:**
- **Injection of Data:** By injecting data into the handshake message stream, an attacker can break the byte-stream and prevent the processing of further handshake messages.
- **Impact:** This results in the client being unable to establish a QUIC connection, either denying access to the desired application or forcing the client to fall back to TCP/TLS.

**Execution:**
- The attacker injects a four-character string, "REJ\0," into the handshake message stream.
- This injection causes the server's subsequent messages to start at the wrong offset in the handshake message stream, leading to their discard or indefinite buffering.
- The attacked connection will either be terminated by the server due to an entropy bit mismatch or time out after 10 seconds on the client side.

**Requirements:**
- The attacker needs minimal information: the timing of the connection attempt and the 4-tuple (server IP, client IP, server port, client port).
- The server's IP, client's IP, and server's UDP port are known. If the attacker can guess the client's UDP port and the timing, they can launch the attack blindly.

**Testing Observations:**
- The ephemeral UDP port range was too large to brute force within a round-trip time (RTT) using our Python-based attacker. However, with a more optimized C implementation and a narrowed port range, the attack could be conducted completely blind.

### Comparison with Prior Attacks

#### Source-Address Token Replay Attack

This QUIC attack is similar to the TCP SYN Flood attack, where an attacker sends numerous spoofed TCP SYN packets to overwhelm the server. In QUIC, the impact of each spoofed packet is larger because QUIC needs to create encryption keys after receiving the initial packet.

**Mitigation:**
- **SYN Cookies:** A classic mitigation for SYN Flood is SYN Cookies, which encode enough information so that the server does not need to keep state between the SYN and the final ACK. QUIC uses source-address tokens (stks) to avoid the RTT incurred for a handshake, but stks cannot be single-use due to the need for 0-RTT connections. This allows attackers to replay them.

#### QUIC Manipulation Attacks

These attacks are similar to the SSL Downgrade attack against TLS. In both cases, a Man-In-The-Middle (MITM) attacker modifies packet fields, and the attack is not discovered until the end of the handshake, after key generation and multiple RTTs.

**SSL Downgrade:**
- The goal is to downgrade the connection to an older, less secure version of SSL. The attacker rewrites the connection request to indicate that the client only supports an older version, often SSL 2.0.
- SSL 3.0 adds protection by including a keyed hash of all handshake messages in the Finished message, requiring the receiver to verify this hash.

**QUIC Manipulation:**
- The attack results in the client and server having inconsistent views of their handshake, leading to connection failure after a timeout and possibly falling back to TCP/TLS.
- A simple mitigation would be to sign all modifiable fields in the server's `s reject` and `s hello` messages, but this introduces signature computation overhead and potential DoS vulnerabilities.

#### QUIC Crypto Stream Offset Attack

This attack is similar to the TCP ACK Storm attack, where both result in the inability to transfer data over the target byte-stream due to an attacker inserting data.

**TCP ACK Storm:**
- An attacker observes a TCP ACK packet and spoofs data-bearing packets to both the client and the server. This causes the client and server to increase their ACK numbers, leading to invalid ACKs and the breaking of the byte-stream.

**QUIC Crypto Stream:**
- Injection of data into the QUIC handshake stream disrupts the stream offsets and prevents further handshake negotiation, resulting in a connection timeout.
- A message-stream, or sequence of messages, would be less prone to such disruptions.

### Conclusions and Future Work

In this paper, we provide a provable-security treatment of QUIC and assess its performance guarantees in the presence of adversaries. We define a Quick Connections (QC) protocol and a novel security model, Quick ACCE (QACCE), and show that QUIC satisfies QACCE under reasonable assumptions.

**Key Findings:**
- In the presence of attackers, QUIC may fail to achieve 0-RTT connections, leading to fallbacks to TCP/TLS or inconsistent states.
- Simple attacks can also be used to mount DoS attacks.

**Future Work:**
- We plan to use our models to analyze other performance-driven security protocols, such as TLS version 1.3.
- We aim to explore methodologies for addressing the weaknesses of the QUIC protocol and other related protocols.

### Acknowledgements

We thank the anonymous reviewers for their comments and Marc Fischlin and Bogdan Warinschi for useful discussions. We also thank Adam Langley, Jim Roskind, Jo Kulik, Alyssa Rzeszutek Wilk, Ian Swett, Fedor Kouranov, and Robbie Shade for help with QUIC protocol details. Andrew Newell introduced us to QUIC. Alexandra Boldyreva and Robert Lychev were supported in part by NSF CNS-1318511 and CNS-1422794 awards. Cristina Nita-Rotaru was supported in part by NSF CNS-1421815 award.

### References

[1] T. Dierks and C. Allen, “The TLS protocol version 1.0,” RFC 2246 (Proposed Standard), Internet Engineering Task Force, Jan. 1999.
...
[35] R. Abramov and A. Herzberg, “TCP ack storm DoS attacks,” in Future Challenges in Security and Privacy for Academia and Industry, J. Camenisch, S. Fischer-Hbner, Y. Murayama, A. Portmann, and C. Rieder, Eds. Springer, 2011, pp. 29–40.