tion. Our simple tools are shown to be able to create similar
effects on 656 (25%) of them.
The detailed comparison of the effectiveness of VM, de(cid:173)
bugger and our imitated fingerprints in terms of deterring
malicious behavior is shown in Table 3. We only created
very few imitated fingerprints, especially those related to
debuggers, yet our tools still effectively deterred one fourth
ofwhat a real debugger can and already more than what VM
can deter. Overall, these results demonstrate great promise
of our approach.
With respect to the Storm Worm variant mentioned in
§4.1, we found that our imitated fingerprints are capable of
achieving the same effect as VM execution, meaning that
file extractions and executions are successfully prevented.
However, a registry key is still modified, indicating our imi(cid:173)
tation of debuggers is not complete. The reason might be
that we only superficially changed the result of the API
IsDebuggerPresent (), while a program can directly
read the corresponding bit in its process PEB. Imitating
such fingerprints to a deeper level can help deter such so(cid:173)
phisticated malware.
Our experiments are mostly performed under Windows
XP SP2, which prevented us from logging the network ac(cid:173)
tivities due to software incompatibility. To further under(cid:173)
stand the effectiveness of preventing network behavior, we
set up a smaller experiment to run only those 656 mal(cid:173)
ware samples under Windows XP, without any patches in(cid:173)
stalled. We found that our imitated fingerprints can deter
4,029 (70.5%) of the 5,717 network connection attempts
made during plain execution, compared to 5,674 (99.2%)
that can be deterred by a debugger, disregarding the fact
that we only implemented a few debugger fingerprints.
Comparison of behaviors We found that 610 malware
samples have reduced malicious behavior with our imitated
Performance Overhead For VMware driver and Olly(cid:173)
Dbg windows insertion, the introduced overhead to the sys(cid:173)
tem is negligible, given that they are not accessed by any
1-4244-2398-9/08/$20.00 ©2008 IEEE
184
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
I Process ~ Registry I Named Pipe I
VM
Debugger
Our Tools
188
2150
578
225
8406
1033
5102
57510
15680
203
3201
839
Table 3. Malicious behavior prevented by different setups.
legitimate applications and do not consume much computa(cid:173)
tion resources.
VMware hook and debugger checking API interception
are handled by the Detours package [15]. The overhead is
around 15J-LS for intercepting a function call [15]. Moreover,
we only intercept a few functions that are rarely executed in
normal programs but used by malware. For example, ex(cid:173)
ception handler is only executed when there is a significant
software fault.
4.3.3 Improving Imitated Fingerprints
During our experiment for evaluation, we tracked all po(cid:173)
tential reconnaissance actions to get insight on improv(cid:173)
ing our system, corresponding to many of the checks de(cid:173)
scribed in §3. We found that among the 656 samples that
reduce malicious behavior with our imitated fingerprints,
IsDebuggerPresent () was checked for 1,040 times,
SoftICE driver checked for 458 times, VM hook checked
for 29 times. In addition, we found 5,162 search attempts
for the window name "creating rules for malware.exe," 654
attempts for "Hidden Process Requests Network Access,"
and numerous others for FileMon, APIMonitor and
Regmon, indicating evasive actions against AV software,
like AVP and Kaspersky, and monitoring programs. We can
also apply malware multi-path execution techniques [24] to
reveal the condition checks that clearly separate benign and
malicious behavior -
they are likely related to the discrep(cid:173)
ancies that malware cares about. We can enrich our imitated
fingerprints based on these inputs.
5 Discussion
Intel-based VMs is a current topic with much research
and industry activity. As hardware and operating system
support for VMs improve, some existing VM fingerprints
may disappear, e.g., instruction fingerprints. On the other
hand, as VMs become more prevalent in production sys(cid:173)
tems, the value of knowing that a particular as is running
inside a VM diminishes. For example, the most sophisti(cid:173)
cated worm so far, the Storm Worm, does not seem to care
about virtual machine environment. However, we should
notice that there always exists a significant gap between
monitoring systems and production systems in general. De(cid:173)
buggers, as an example, are prevented by a large portion of
malware. Designing monitoring systems to be identical to
production systems is challenging; thus, there always exist
discrepancies to be potentially exploited.
By imitating fingerprints that only exist in monitoring
systems, we have shown that it is possible to deter many
sophisticated malware. However, a question that remains
is to what extent we should imitate such discrepancies.
For example, we can return a fake result by hooking the
IsDebuggerPresent () API, but malware can further
check the process PEB directly. We argue that for mal(cid:173)
wares to detect monitoring systems, having false negatives
is much more disastrous than having false positives. In this
case, malware programs should exit even if only one of the
tests returns true. In this case, we can always raise the bar a
bit higher to help win this arms race.
Another question is how we deal with attackers' attempts
to detect our imitated fingerprints. For example, we hook
the I sDebuggerPresent () API call, but do not change
the corresponding flag in PEB. This inconsistency is an ob(cid:173)
vious indication that certain system artifacts are intention(cid:173)
ally arranged purely for being fingerprinted. It is possible
that this may lead attackers to program higher levels of in(cid:173)
telligence into more stealthy malware, e.g., testing the ac(cid:173)
tual behavior of a driver, instead of simply detecting a de(cid:173)
vice driver name. We would argue that as the escalation
worsens, attackers would suffer from more overhead to de(cid:173)
tect sophisticated fingerprints. Also, the existence of such
inconsistency already indicates the target host is probably
monitored and guarded.
6 Conclusion
Our work is the first to develop a detailed taxonomy of
evasion techniques that are actively used by modem mal(cid:173)
ware to avoid monitoring systems based on virtualization
and debugger characteristics. These techniques span differ(cid:173)
ent layers of the computer system with varying levels of
difficulty to be performed, obfuscated, and imitated. As
a direct application of the taxonomy, we performed large(cid:173)
scale experiments over 6,900 recent malware samples to
understand the behavioral gap among plain-machine exe(cid:173)
cution, virtual machine execution, and debugger attached
execution. Our results show that a significant percentage
of malware samples actively evade monitoring systems by
exhibiting less malicious behavior. Despite various power(cid:173)
ful evasion techniques, none can be used to detect a remote
networked monitoring system. To fill this gap, we devel(cid:173)
oped a novel technique that detects a remote networked vir(cid:173)
tual machine based on its clock skew behavior. Finally, we
proposed a novel approach to mislead attackers and subse-
1-4244-2398-9/08/$20.00 ©2008 IEEE
185
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
quently deter them from infecting target hosts, by making
production systems operating on plain machines appear as
monitoring systems. We demonstrate that only a few light(cid:173)
weight imitated fingerprints can already deter a fairly sig(cid:173)
nificant portion of malware samples and a large portion of
malicious behavior. We believe our work makes important
progress to assist defenders in combating emerging threats
of evasive malware through a novel deterrence technique.
References
[1] Collaborative malware collection and sensing.
h t t P : / /
alliance.mwcollect.org.
[2] Detect if your program is running inside a vm. ht tp : / /
www.codeproject.com/system/vrndetect.asp.
[3] The honeynet project. http://proj ect . honeynet .
org.
[4] Honeypotting with VMware
-
basics.
http:
//www.seifried.org/security/ids/
20020107-honeypotvmware-basics.html.
[5] Red pill. http://invisiblethings .org/papers/
redpill. html.
[6] Scoopydoo. http://www.trapkit.de/research/
vrnm/scoopydoo/scoopy_doo.htm.
[7] C. Associates. Win32.agobot. http://www3.ca.com/
securityadvisor/virusinfo/virus.aspx?id=
37776, July 2004.
[8] M. Bailey, 1. Oberheide, 1. Andersen, Z. M. Mao, F. Jaha(cid:173)
nian, , and J. Nazario. Automated Classification and Analy(cid:173)
sis of Internet Malware.
In 10th International Symposium
on Recent Advances in Intrusion Detection (RAID 2007),
September 2007.
[9] J. Corey.
identification.
Advanced honeypot
Phrack
magazine, January 2004. http://www . phrack. org/
fakes/p63/p63-0x09.txt.
[10] 1. Franklin, M. Luk, 1. M. McCune, A. Seshadri, A. Per(cid:173)
rig, and L. van Doom. Remote detection of virtual machine
monitors with fuzzy benchmarking. ACM SIGOPS Operat(cid:173)
ing System Review, April 2008.
[11] D. Gao, M. Reiter, and D. Song. Behavioral Distance for
Intrusion Detection. In 8th International Symposium on Re(cid:173)
cent Advance in Intrusion Detection (RAID 2005), Septem(cid:173)
ber 2005.
[12] D. Gao, M. Reiter, and D. Song. Behavioral Distance Mea(cid:173)
surement Using Hidden Markov Models.
In 9th Interna(cid:173)
tional Symposium on Recent Advance in Intrusion Detection
(RAID 2005), September 2006.
[13] T. Garfinkel, K. Adams, A. Warfield, and J. Franklin. COlTI(cid:173)
patibility is Not Transparency: VMM Detection Myths and
Realities. In Proceedings ofthe 11th Workshop on Hot Top(cid:173)
ics in Operating Systems (HotOS-XI), May 2007.
[14] T. Holz and F. Raynal. Detecting honeypots and other sus(cid:173)
picious environments.
In Systems, Man and Cybernetics
(SMC) Information Assurance Workshop, 2005. Proceedings
from the Sixth Annual IEEE, June 2005.
[15] G. Hunt and D. Brubacher. Detours: Binary Interception of
Win32 Functions. In Proceedings of the 3rd USENIX Win(cid:173)
dows NT Symposium, pp. 135-143. Seattle, WA, July 1999,
July 1999.
[16] V. Jacobson, R. Braden, E. Lagache, and M. K. Claffy. Tcp
extensions for high performance. RFC 1323, May 1992.
[17] X. Jiang and D. Xu. Collapsar: A VM-Based Architecture
for Network Attack Detention Center. In Proceedings ofthe
13th USENIX Security Symposium, August 2004.
[18] K. Kato. Vmware backdoor i/o port. http: / / chichat .
at.infoseek.co.jp/vrnware/backdoor.html.
[19] R. Kennell and L. H. Jamieson. Establishing the Genuin(cid:173)
ity of Remote Computer Systems. In 12th USENIX Security
Symposium, August 2003.
[20] S. T. King and P. M. Chen. Backtracking Intrusions.
In
Proceedings of the 2003 Symposium on Operating Systems
Principles, October 2003.
[21] T. Kohno, A. Broido, and K. C. Claffy. Remote physical
device fingerprinting.
In SP '05: Proceedings of the 2005
IEEE Symposium on Security and Privacy, pages 211-225,
Washington, DC, USA, 2005. IEEE Computer Society.
[22] C. Kriigel, W. K. Robertson, F. Valeur, and G. Vigna. Static
In USENIX Security
disassembly of obfuscated binaries.
Symposium, pages 255-270, 2004.
[23] T. Liston and E. Skoudis. On the cutting edge: Thwarting
virtual machine detection. http://handlers . sans.
org/tliston/ThwartingVMDetection_Liston_
Skoudis. pd%f.
[24] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple ex(cid:173)
ecution paths for malware analysis.
In Proceedings of the
2007 IEEE Symposium on Security and Privacy, pages 231(cid:173)
245, Washington, DC, USA, 2007. IEEE Computer Society.
[25] J. Oberheide, E. Cooke, and F. Jahanian. Rethinking An(cid:173)
tivirus: Executable Analysis in the Network Cloud. In Pro(cid:173)
ceedings ofthe 2nd USENIX Workshop on Hot Topics in Se(cid:173)
curity (HOTSEC '07), Aug 2007.
[26] G. H. Project. Tracking Botnets, 2005. http://www .
honeynet.org/papers/bots.
[27] T. Raffetseder, C. Kruegel, and E. Kirda. Detecting Sys(cid:173)
tem Emulators.
In Proceedings of 10th Information Secu(cid:173)
rity Conference (ISC), Lecture Notes in Computer Science,
Springer Verlag., 2007.
[28] J. S. Robin and C. E. Irvine. Analysis of intel pentium's abil(cid:173)
ity to support a secure virtual machine monitor. In USENIX
Security Symposium, August 2000.
[29] A. Vasudevan and R. Yerraballi. Stealth breakpoints. In AC(cid:173)
SAC '05: Proceedings ofthe 21st Annual Computer Security
Applications Conference, pages 381-392, Washington, DC,
USA, 2005. IEEE Computer Society.
[30] C. C. Zou and R. Cunningham. Honeypot-aware advanced
botnet construction and maintenance. In DSN '06: Proceed(cid:173)
ings ofthe International Conference on Dependable Systems
and Networks, pages 199-208, Washington, DC, USA, 2006.
IEEE Computer Society.
1-4244-2398-9/08/$20.00 ©2008 IEEE
186
DSN 2008: Chen et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:55 UTC from IEEE Xplore.  Restrictions apply.