        long unsigned int kstkesp;
        long unsigned int kstkeip;
        long unsigned int signal;   //The bitmap of pending signals
        long unsigned int blocked;
        long unsigned int sigignore;
        long unsigned int sigcatch;
        long unsigned int wchan;
        long unsigned int nswap;
        long unsigned int cnswap;
        int exit_signal;
        int processor;
        unsigned int rt_priority;
        unsigned int policy;
        long long unsigned int delayacct_blkio_ticks;
        long unsigned int guest_time;
        long int cguest_time;
        long unsigned int start_data;   
        long unsigned int end_data;
        long unsigned int start_brk;    
        long unsigned int arg_start;    //参数起始地址
        long unsigned int arg_end;      //参数结束地址
        long unsigned int env_start;    //环境变量在内存中的起始地址
        long unsigned int env_end;      //环境变量的结束地址
        int exit_code; //退出状态码
    };
从文件中读入并格式化为结构体:
    struct proc_stat get_proc_stat(int Pid) {
        FILE *f = NULL;
        struct proc_stat stat = {0};
        char tmp[100] = "0";
        stat.comm = tmp;
        char stat_path[20];
        char* pstat_path = stat_path;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/stat", Pid);
        } else {
            pstat_path = "/proc/self/stat";
        }
        if ((f = fopen(pstat_path, "r")) == NULL) {
            printf("open file error");
            return stat;
        }
        fscanf(f, "%d ", &stat.pid);
        fscanf(f, "(%100s ", stat.comm);
        tmp[strlen(tmp)-1] = '\0';
        fscanf(f, "%c ", &stat.state);
        fscanf(f, "%d ", &stat.ppid);
        fscanf(f, "%d ", &stat.pgid);
        fscanf (
                f,
                "%d %d %d %u %lu %lu %lu %lu %lu %lu %ld %ld %ld %ld %ld %ld %llu %lu %ld %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %d %d %u %u %llu %lu %ld %lu %lu %lu %lu %lu %lu %lu %d",
                &stat.session, &stat.tty_nr, &stat.tpgid, &stat.flags, &stat.minflt,
                &stat.cminflt, &stat.majflt, &stat.cmajflt, &stat.utime, &stat.stime,
                &stat.cutime, &stat.cstime, &stat.priority, &stat.nice, &stat.num_threads,
                &stat.itrealvalue, &stat.starttime, &stat.vsize, &stat.rss, &stat.rsslim,
                &stat.startcode, &stat.endcode, &stat.startstack, &stat.kstkesp, &stat.kstkeip,
                &stat.signal, &stat.blocked, &stat.sigignore, &stat.sigcatch, &stat.wchan,
                &stat.nswap, &stat.cnswap, &stat.exit_signal, &stat.processor, &stat.rt_priority,
                &stat.policy, &stat.delayacct_blkio_ticks, &stat.guest_time, &stat.cguest_time, &stat.start_data,
                &stat.end_data, &stat.start_brk, &stat.arg_start, &stat.arg_end, &stat.env_start,
                &stat.env_end, &stat.exit_code
        );
        fclose(f);
        return stat;
    }
和我们需要获取的数据做了一下对比, 可以获取以下数据
ppid | 父进程id  
---|---  
pgid | 进程组id  
sid | 进程会话id  
start_time | 父进程开始运行的时间  
run_time | 父进程已经运行的时间  
## /proc/[pid]/exe
通过/proc/[pid]/exe获取可执行文件的路径, 这里/proc/[pid]/exe是指向可执行文件的软链接,
所以这里通过readlink函数获取软链接指向的地址.
这里在读取时需要注意如果readlink读取的文件已经被删除, 读取的文件名后会多一个 `(deleted)`,
但是agent也不能盲目删除文件结尾时的对应字符串, 所以在写server规则时需要注意这种情况
    char *get_proc_path(int Pid) {
        char stat_path[20];
        char* pstat_path = stat_path;
        char dir[PATH_MAX] = {0};
        char* pdir = dir;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/exe", Pid);
        } else {
            pstat_path = "/proc/self/exe";
        }
        readlink(pstat_path, dir, PATH_MAX);
        return pdir;
    }
## /proc/[pid]/cmdline
获取进程启动的是启动命令, 可以通过获取/proc/[pid]/cmdline的内容来获得, 这个获取里面有两个坑点
  1. 由于启动命令长度不定, 为了避免溢出, 需要先获取长度, 在用malloc申请堆空间, 然后再将数据读取进变量.
  2. /proc/self/cmdline文件里面所有的空格和回车都会变成 `'\0'`也不知道为啥, 所以需要手动换源回来, 而且若干个相连的空格也只会变成一个`'\0'`.
这里获取长度的办法比较蠢, 但是用fseek直接将文件指针移到文件末尾的办法每次返回的都是0, 也不知道咋办了, 只能先这样
    long get_file_length(FILE* f) {
        fseek(f,0L,SEEK_SET);
        char ch;
        ch = (char)getc(f);
        long i;
        for (i = 0;ch != EOF; i++ ) {
            ch = (char)getc(f);
        }
        i++;
        fseek(f,0L,SEEK_SET);
        return i;
    }
获取cmdline的内容
    char* get_proc_cmdline(int Pid) {
        FILE* f;
        char stat_path[100] = {0};
        char* pstat_path = stat_path;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/cmdline", Pid);
        } else {
            pstat_path = "/proc/self/cmdline";
        }
        if ((f = fopen(pstat_path, "r")) == NULL) {
            printf("open file error");
            return "";
        }
        char* pcmdline = (char *)malloc((size_t)get_file_length(f));
        char ch;
        ch = (char)getc(f);
        for (int i = 0;ch != EOF; i++ ) {
            *(pcmdline + i) = ch;
            ch = (char)getc(f);
            if ((int)ch == 0) {
                ch = ' ';
            }
        }
        return pcmdline;
    }
# 小结
这里写的只是实现的一种最常见最简单的应用级hook的方法具体实现和代码已经放在了[github](https://github.com/u2400/libc_hook_demo)上,
同时github上的代码会保持更新, 下次的文章会分享如何使用LKM修改sys_call_table来hook系统调用的方式来实现HIDS的hook.
# 参考文章
# 附录1
这里完整的说明了/proc目录下每一个文件具体的意义是什么.  
* * *