  * [heap overflows for humans - 102 - exercise solution](http://thesprawl.org/research/heap-overflows-humans-102-exercise-solution/)
  * [exploit exercises - protostar - final levels](http://thesprawl.org/research/exploit-exercises-protostar-final/)
  * [exploit exercises - protostar - network levels](http://thesprawl.org/research/exploit-exercises-protostar-network/)
  * [exploit exercises - protostar - heap levels](http://thesprawl.org/research/exploit-exercises-protostar-heap/)
  * [exploit exercises - protostar - format string levels](http://thesprawl.org/research/exploit-exercises-protostar-format/)
  * [exploit exercises - protostar - stack levels](http://thesprawl.org/research/exploit-exercises-protostar-stack/)
  * [open security training - introduction to software exploits - uninitialized variable overflow](http://thesprawl.org/research/ost-introduction-software-exploits-uninit-overflow/)
  * [open security training - introduction to software exploits - off-by-one](http://thesprawl.org/research/ost-introduction-exploits-offbyone/)
  * [open security training - introduction to re - bomb lab secret phase](http://thesprawl.org/research/ost-introduction-re-bomb-secret-phase/)
  * [open security training - introductory x86 - buffer overflow mystery box](http://thesprawl.org/research/ost-introductory-x86-buffer-overflow-mystery-box/)
  * [corelan - tutorial 10 - exercise solution](http://thesprawl.org/research/corelan-tutorial-10-exercise-solution/)
  * [corelan - tutorial 9 - exercise solution](http://thesprawl.org/research/corelan-tutorial-9-exercise-solution/)
  * [corelan - tutorial 7 - exercise solution](http://thesprawl.org/research/corelan-tutorial-7-exercise-solution/)
  * [getting from seh to nseh](http://thesprawl.org/research/seh-to-nseh/)
  * [corelan - tutorial 3b - exercise solution](http://thesprawl.org/research/corelan-tutorial-3b-exercise-solution/)
## Tools
_Disassemblers, debuggers, and other static and dynamic analysis tools._
  * [angr](https://github.com/angr/angr) \- Platform-agnostic binary analysis framework developed at UCSB's Seclab.
  * [BARF](https://github.com/programa-stic/barf-project) \- Multiplatform, open source Binary Analysis and Reverse engineering Framework.
  * [Binary Ninja](https://binary.ninja/) \- Multiplatform binary analysis IDE supporting various types of binaries and architecturs. Scriptable via Python.
  * [binnavi](https://github.com/google/binnavi) \- Binary analysis IDE for reverse engineering based on graph visualization.
  * [Bokken](http://www.bokken.re/) \- GUI for Pyew and Radare.
  * [Capstone](https://github.com/aquynh/capstone) \- Disassembly framework for binary analysis and reversing, with support for many architectures and bindings in several languages.
  * [codebro](https://github.com/hugsy/codebro) \- Web based code browser using clang to provide basic code analysis.
  * [dnSpy](https://github.com/0xd4d/dnSpy) \- .NET assembly editor, decompiler and debugger.
  * [Evan's Debugger (EDB)](http://codef00.com/projects#debugger) \- A modular debugger with a Qt GUI.
  * [GDB](http://www.sourceware.org/gdb/) \- The GNU debugger.
  * [GEF](https://github.com/hugsy/gef) \- GDB Enhanced Features, for exploiters and reverse engineers.
  * [hackers-grep](https://github.com/codypierce/hackers-grep) \- A utility to search for strings in PE executables including imports, exports, and debug symbols.
  * [IDA Pro](https://www.hex-rays.com/products/ida/index.shtml) \- Windows disassembler and debugger, with a free evaluation version.
  * [Immunity Debugger](http://debugger.immunityinc.com/) \- Debugger for malware analysis and more, with a Python API.
  * [ltrace](http://ltrace.org/) \- Dynamic analysis for Linux executables.
  * [objdump](https://en.wikipedia.org/wiki/Objdump) \- Part of GNU binutils, for static analysis of Linux binaries.
  * [OllyDbg](http://www.ollydbg.de/) \- An assembly-level debugger for Windows executables.
  * [PANDA](https://github.com/moyix/panda) \- Platform for Architecture-Neutral Dynamic Analysis
  * [PEDA](https://github.com/longld/peda) \- Python Exploit Development Assistance for GDB, an enhanced display with added commands.
  * [pestudio](https://winitor.com/) \- Perform static analysis of Windows executables.
  * [Process Monitor](https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx) \- Advanced monitoring tool for Windows programs.
  * [Pyew](https://github.com/joxeankoret/pyew) \- Python tool for malware analysis.
  * [Radare2](http://www.radare.org/r/) \- Reverse engineering framework, with debugger support.
  * [SMRT](https://github.com/pidydx/SMRT) \- Sublime Malware Research Tool, a plugin for Sublime 3 to aid with malware analyis.
  * [strace](http://sourceforge.net/projects/strace/) \- Dynamic analysis for Linux executables.
  * [Udis86](https://github.com/vmt/udis86) \- Disassembler library and tool for x86 and x86_64.
  * [Vivisect](https://github.com/vivisect/vivisect) \- Python tool for malware analysis.
  * [X64dbg](https://github.com/x64dbg/) \- An open-source x64/x32 debugger for windows.
A collection of android security related resources.
A lot of work is happening in academia and industry on tools to perform
dynamic analysis, static analysis and reverse engineering of android apps.
## android-security-awesome
## ONLINE ANALYZERS
  1. [AndroTotal](http://andrototal.org/)
  2. [CopperDroid](http://copperdroid.isg.rhul.ac.uk/copperdroid/)
  3. [Dexter](https://dexter.dexlabs.org/)
  4. [SandDroid](http://sanddroid.xjtu.edu.cn/)
  5. [Tracedroid](http://tracedroid.few.vu.nl/)
  6. [Visual Threat](http://www.visualthreat.com/)
  7. [Mobile Malware Sandbox](http://www.mobilemalware.com.br/analysis/index_en.php)
  8. [MobiSec Eacus](http://www.mobiseclab.org/eacus.jsp)
  9. [IBM Security AppScan Mobile Analyzer](https://appscan.bluemix.net/mobileAnalyzer) \- not free
  10. [NVISO ApkScan](https://apkscan.nviso.be/)
  11. [AVC UnDroid](http://www.av-comparatives.org/avc-analyzer/)
  12. [Fireeye](https://fireeye.ijinshan.com/)\- max 60MB 15/day
  13. [habo](https://habo.qq.com/) 10/day
  14. [Virustotal](https://www.virustotal.com/)-max 128MB
  15. [Fraunhofer App-ray](https://www.app-ray.com) \- not free
  16. ~~[Stowaway](http://www.android-permissions.org/)~~
  17. ~~[Anubis](http://anubis.iseclab.org/)~~
  18. ~~[Mobile app insight](http://www.mobile-app-insight.org)~~
  19. ~~[Mobile-Sandbox](http://mobile-sandbox.com)~~
  20. ~~[Ijiami](http://safe.ijiami.cn/)~~
  21. ~~[Comdroid](http://www.comdroid.org/)~~
  22. ~~[Android Sandbox](http://www.androidsandbox.net/)~~
  23. ~~[Foresafe](http://www.foresafe.com/scan)~~
## STATIC ANALYSIS TOOLS
  1. [Androwarn](https://github.com/maaaaz/androwarn/) \- detect and warn the user about potential malicious behaviours developped by an Android application.
  2. [ApkAnalyser](https://github.com/sonyxperiadev/ApkAnalyser)
  3. [APKInspector](https://github.com/honeynet/apkinspector/)
  4. [Droid Intent Data Flow Analysis for Information Leakage](https://www.cert.org/secure-coding/tools/didfail.cfm)
  5. [Several tools from PSU](http://siis.cse.psu.edu/tools.html)
  6. [Smali CFG generator](https://github.com/EugenioDelfa/Smali-CFGs)
  7. [FlowDroid](https://blogs.uni-paderborn.de/sse/tools/flowdroid/)
  8. [Android Decompiler](https://www.pnfsoftware.com/) – not free
  9. [PSCout](http://pscout.csl.toronto.edu/) \- A tool that extracts the permission specification from the Android OS source code using static analysis
  10. [Amandroid](http://amandroid.sireum.org/)
  11. [SmaliSCA](https://github.com/dorneanu/smalisca) \- Smali Static Code Analysis
  12. [CFGScanDroid](https://github.com/douggard/CFGScanDroid) \- Scans and compares CFG against CFG of malicious applications
  13. [Madrolyzer](https://github.com/maldroid/maldrolyzer) \- extracts actionable data like C&C, phone number etc.
  14. [SPARTA](http://www.cs.washington.edu/sparta) \- verifies (proves) that an app satisfies an information-flow security policy; built on the [Checker Framework](http://types.cs.washington.edu/checker-framework/)
  15. [ConDroid](https://github.com/JulianSchuette/ConDroid) \- Performs a combination of symoblic + concrete execution of the app
## APP VULNERABILITY SCANNERS
  1. [QARK](https://github.com/linkedin/qark/) \- QARK by LinkedIn is for app developers to scan app for security issues
  2. [AndroBugs](https://github.com/AndroBugs/AndroBugs_Framework)
  3. [Nogotofail](https://github.com/google/nogotofail)
## DYNAMIC ANALYSIS TOOLS
  1. [Android DBI frameowork](http://www.mulliner.org/blog/blosxom.cgi/security/androiddbiv02.html)
  2. [Android Malware Analysis Toolkit](http://www.mobilemalware.com.br/amat/download.html) \- (linux distro) Earlier it use to be an [online analyzer](http://dunkelheit.com.br/amat/analysis/index_en.html)
  3. [Mobile-Security-Framework MobSF](https://github.com/ajinabraham/Mobile-Security-Framework-MobSF) \- Mobile Security Framework is an intelligent, all-in-one open source mobile application (Android/iOS) automated pen-testing framework capable of performing static, dynamic analysis and web API testing.
  4. [AppUse](https://appsec-labs.com/AppUse/) – custom build for pentesting
  5. [Cobradroid](https://thecobraden.com/projects/cobradroid/) – custom image for malware analysis