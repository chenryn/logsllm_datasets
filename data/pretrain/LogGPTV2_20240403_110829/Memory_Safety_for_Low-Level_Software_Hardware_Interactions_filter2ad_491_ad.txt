sva update l3 mapping
sva load pagetable
Description
End of the virtual memory boot initialization. Flags all page table pages, and mark them read-only.
Zeroes the page and (cid:3)ags it read-only and L1.
Zeroes the page and (cid:3)ags it read-only and L2.
Puts the default mappings in the page and (cid:3)ags it read-only and L3.
Un(cid:3)ags the page read-only and L1.
Un(cid:3)ags the page read-only and L2.
Un(cid:3)ags the page read-only and L3.
Updates the mapping if the mapping belongs to an L1 page and the page is not already mapped for a
type known pool, sva page, code page, or stack page.
Updates the mapping if the mapping belongs to an L2 page and the new mapping is for an L1 page.
Updates the mapping if the mapping belongs to an L3 page and the new mapping is for an L2 page.
Check that the physical page is an L3 page and loads it in the page table register.
Table 2: MMU Interface for a Hardware TLB Processor.
(cid:3)ag is set and cleared by sva declare stack and
sva release stack, respectively. Changes to the
page table via the instructions in Table 2 update the coun-
ters and the L1, L2, andL3 (cid:3)ags.
The VM uses all of the above information to detect,
at run-time, violations of the safety requirements in Sec-
tion 3. Before inserting a new page mapping, the VM
can detect whether the new mapping will create multi-
ple mappings to physical memory containing type-known
objects, map a page into the virtual address space of the
VM or kernel code segment, unmap or double map a
page that is part of a kernel stack, make a physical page
containing kernel memory accessible to user-space code,
or map memory-mapped I/O pages into a kernel mem-
ory object (or vice-versa). Note that SVA currently trusts
the kernel memory allocators to (i) return different vir-
tual addresses for every allocation, and (ii) not to move
virtual pages from one metapool to another until the orig-
inal metapool is destroyed.
5.6 Self-modifying Code
The new SVA system supports the restricted version of
self-modifying code described in Section 3: OS kernels
can disable and re-enable pre-declared pieces of code.
SVA will use compile-time analysis carefully to ensure
that replacing the code with no-op instructions will not
invalidate the analysis results.
We de(cid:2)ne four new instructions to support self-
modifying code. The (cid:2)rst two instructions, sva -
begin alt and sva end alt enclose the code re-
gions that may be modi(cid:2)ed at runtime. They must
be properly nested and must be given a unique iden-
ti(cid:2)er. The instructions are not emitted in the native
code. The two other instructions, sva disable code
and sva enable code execute at runtime. They take
the identi(cid:2)er given to the sva begin alt and sva -
end alt instructions. sva disable code saves the
previous code and inserts no-ops in the code, and sva -
enable code restores the previous code.
With this approach, SVA can support most uses of
self-modifying code in operating systems. For instance,
it supports the alternatives6 framework in Linux
2.6 [8] and Linux’s ftrace tracing support [9] which
disables calls to logging functions at run-time.
5.7 Interrupted State
On an interrupt, trap, or system call, the original SVA
system saves processor state within the VM’s internal
memory and permits the kernel to use specialized in-
structions to modify the state via an opaque handle called
the interrupt context [10, 11]. These instructions, which
are slightly higher-level than assembly code, are used by
the kernel to implement operations like signal handler
dispatch and starting execution of user programs. Since
systems such as Linux can be interrupted while running
kernel code [5], these instructions can violate the ker-
nel’s memory safety if used incorrectly on interrupted
kernel state. To address these issues, we introduce sev-
eral changes to the original SVA design.
First, we noticed that all of the instructions that manip-
ulate interrupted program state are either memory safe
(e.g., the instruction that unwinds stack frames for ker-
nel exception handling [11]) or only need to modify the
interrupted state of user-space programs. Hence, all in-
structions that are not intrinsically memory safe will ver-
ify that they are modifying interrupted user-space pro-
gram state. Second, the opaque handle to the interrupt
context will be made implicit so that no run-time checks
are needed to validate it when it is used. We have ob-
served that the Linux kernel only operates upon the most
recently created interrupt context; we do not see a need
for other operating systems of similar design to do so, ei-
ther. Without an explicit handle to the interrupt context’s
location in memory, no validation code is needed, and
the kernel cannot create a pointer to the saved program
state (except for explicit integer to pointer casts, uses of
which will be caught by SVA’s existing checks) [10].
6Linux 2.6, (cid:2)le include/asm-x86/alternative.h
5.8 Miscellaneous
To ensure control-(cid:3)ow integrity requirements, the VM
assumes control of the hardware interrupt descriptor ta-
ble; the OS kernel must use special instructions to asso-
ciate a function with a particular interrupt, trap, or sys-
tem call [11, 29]. Similar to indirect function call checks,
SVA can use static analysis and run-time checks to en-
sure that only valid functions are registered as interrupt,
trap, or system call handlers.
SVA provides two sets of atomic memory instructions:
sva fetch and phi where phi is one of several in-
teger operations (e.g., add), and sva compare and -
swap which performs an atomic compare and swap. The
static and run-time checks that protect regular memory
loads and stores also protect these operations.
6 Modi(cid:2)cations to the Linux Kernel
We implemented our design by improving and extend-
ing the original SVA prototype and the SVA port of
the Linux 2.4.22 kernel [10]. The previous section de-
scribed how we modi(cid:2)ed the SVA-OS instructions. Be-
low, we describe how we modi(cid:2)ed the Linux kernel
to use these new instructions accordingly. We modi-
(cid:2)ed less than 100 lines from the original SVA kernel
to port our kernel to the new SVA-OS API; the origi-
nal port of the i386 Linux kernel to SVA modi(cid:2)ed 300
lines of architecture-independent code and 4,800 lines of
architecture-dependent code [10].
6.1 Changes to Baseline SVA
The baseline SVA system in our evaluation (Section 7) is
an improved version of the original SVA system [10] that
is suitable for determining the extra overhead incurred by
the run-time checks necessitated by the design in Sec-
tion 5. First, we (cid:2)xed several bugs in the optimization of
run-time checks. Second, while the original SVA system
does not analyze and protect the whole kernel, there is no
fundamental reason why it cannot. Therefore, we chose
to disable optimizations which apply only to incomplete
kernel code for the experiments in Section 7. Third, the
new baseline SVA system recognizes ioremap() as an
allocator function even though it does not add run-time
checks for I/O loads and stores. Fourth, we replaced
most uses of the get free pages() page allocator
with kmalloc() in code which uses the page alloca-
tor like a standard memory allocator; this ensures that
most kernel allocations are performed in kernel pools
(i.e., kmem cache ts) which ful(cid:2)ll the requirements
for allocators as described in the original SVA work [10].
We also modi(cid:2)ed the SVA Linux kernel to use the new
SVA-OS instruction set as described below. This ensured
that the only difference between our baseline SVA sys-
tem and our SVA system with the low-level safety protec-
tions was the addition of the run-time checks necessary
to ensure safety for context switching, thread manage-
ment, MMU, and I/O memory safety.
6.2 Context Switching/Thread Creation
The modi(cid:2)cations needed for context switching were
straightforward. We simply modi(cid:2)ed the switch to
macro in Linux [5] to use the sva swap integer in-
struction to perform context switching.
Some minor kernel modi(cid:2)cations were needed to use
the new thread creation instructions. The original i386
Linux kernel allocates a single memory object which
holds both a thread’s task structure and the kernel stack
for the thread [5], but this cannot be done on our system
because sva declare stack requires that a stack
consumes an entire memory object. For our prototype,
we simply modi(cid:2)ed the Linux kernel to perform separate
allocations for the kernel stack and the task structure.
6.3 I/O
As noted earlier, our implementation enhances the
pointer analysis algorithm in SVA (DSA [24]) to mark
pointers that may point to I/O objects. It does this by
(cid:2)nding calls to the Linux ioremap() function. To
make implementation easier, we modi(cid:2)ed ioremap()
and ioremap nocache() in the Linux source to be
macros that call ioremap().
Our test system’s devices do not use global I/O mem-
ory objects, so we did not implement a pseudo allocator
for identifying them. Also, we did not modify DSA to
mark memory stored into I/O device memory as type-
unknown. The dif(cid:2)culty is that Linux casts pointers into
integers before writing them into I/O device memory.
The DSA implementation does not have solid support for
tracking pointers through integers i.e., it does not con-
sider the case where an integer may, in fact, be pointing
to a memory object. Implementing these changes to pro-
vide DMA protection is left as future work.
6.4 Virtual Memory
We implemented the new MMU instructions and run-
time checks described in Section 5.5 and ported the SVA
Linux kernel to use the new instructions. Linux already
contains macros to allocate, modify and free page table
pages. We modi(cid:2)ed these macros to use our new API
(which is based on the paravirtops interface from
Linux 2.6). We implemented all of the run-time checks
except for those that ensure that I/O device memory isn’t
mapped into kernel memory objects. These checks re-
quire that the kernel allocate all I/O memory objects
within a prede(cid:2)ned range of the virtual address space,
which our Linux kernel does not currently do.
7 Evaluation and Analysis
Our evaluation has two goals.
First, we wanted
to determine whether our design for low-level soft-
ware/hardware interaction was effective at stopping se-
curity vulnerabilities in commodity OS kernels. Second,
we wanted to determine how much overhead our design
would add to an already existing memory-safety system.
7.1 Exploit Detection
We performed three experiments to verify that our sys-
tem catches low-level hardware/software errors: First,
we tried two different exploits on our system that were
reported on Linux 2.4.22, the Linux version that is ported
to SVA. The exploits occur in the MMU subsystem; both
give an attacker root privileges. Second, we studied the
e1000e bug [9]. We could not duplicate the bug because
it occurs in Linux 2.6, but we explain why our design
would have caught the bug if Linux 2.6 had been ported
to SVA. Third, we inserted many low-level operation er-
rors inside the kernel to evaluate whether our design pre-
vents the safety violations identi(cid:2)ed in Section 2.
Linux 2.4.22 exploits. We have identi(cid:2)ed three re-
ported errors for Linux 2.4.22 caused by low-level
kernel-hardware interactions [3, 39, 42]. Our experi-
ment is limited to these errors because we needed hard-
ware/software interaction bugs that were in Linux 2.4.22.
Of these, we could not reproduce one bug due to a lack
of information in the bug report [3]. The other two errors
occur in the mremap system call but are distinct errors.
The (cid:2)rst exploit [42] is due to an over(cid:3)ow in a count
of the number of times a page is mapped. The exploit
code over(cid:3)ows the counter by calling fork, mmap, and
mremap a large number of times. It then releases the
page, giving it back to the kernel. However, the exploit
code still has a reference to the page; therefore, if the
page is reallocated for kernel use, the exploit code can
read and modify kernel data. Our system catches this
error because it disallows allocating kernel objects in a
physical page mapped in user space.
The second exploit [39] occurs because of a missing
error check in mremap which causes the kernel to place
page table pages with valid page table entries into the
page table cache. However, the kernel assumes that page
table pages in the page table cache do not contain any
entries. The exploit uses this vulnerability by calling
mmap, mremap and munmap to release a page table
page with page entries that contain executable memory.
Then, on an exec system call, the linker, which exe-
cutes with root privileges, allocates a page table page,
which happens to be the previously released page. The
end result is that the linker jumps to the exploit’s exe-
cutable memory and executes the exploit code with root
privileges. The SVA VM prevents this exploit by always
zeroing page table pages when they are placed in a page
directory so that no new, unintended, memory mappings
are created for existing objects.
The e1000e bug. The fundamental cause of the e1000e
bug is a memory load/store (the x86 cmpxchg instruc-
tion) on a dangling pointer, which happens to point
to an I/O object. The cmpxchg instruction has non-
deterministic behavior on I/O device memory and may
corrupt the hardware. The instruction was executed by
the ftrace subsystem, which uses self-modifying code
to trace the kernel execution.
It took many weeks for
skilled engineers to track the problem. With our new
safety checks, SVA would have detected the bug at its
(cid:2)rst occurrence. The self-modifying code interface of
SVA-OS only allows enabling and disabling of code;
writes to what the kernel (incorrectly) thought was its
code is not possible. SVA actually has a second line of
defense if (hypothetically) the self-modifying code inter-
face did not detect it: SVA would have prevented the I/O
memory from being mapped into code pages, and thus
prevented this corruption. (And, hypothetically again, if
a dangling pointer to a data object had caused the bug,
SVA would have detected any ordinary reads and writes
trying to write to I/O memory locations.)
Kernel error injection. To inject errors, we added new
system calls into the kernel; each system call triggers a
speci(cid:2)c kind of kernel/hardware interaction error that ei-
ther corrupts memory or alters control (cid:3)ow. We inserted
four different errors. The (cid:2)rst error modi(cid:2)es the saved
Integer State of a process so that an invalid Integer State
is loaded when the process is scheduled. The second
error creates a new MMU mapping of a page contain-
ing type-known kernel memory objects and modi(cid:2)es the
contents of the page. The third error modi(cid:2)es the MMU
mappings of pages in the stack range. The fourth error
modi(cid:2)es the internal metadata of SVA to set incorrect
bounds for all objects. This last error shows that with the
original design, we can disable the SVA memory safety
checks that prevent Linux exploits; in fact, it would not
be dif(cid:2)cult to do so with this bug alone for three of the
four kernel exploits otherwise prevented by SVA [10].
All of the injected errors were caught by the new
SVA implementation. With the previous implementation,
these errors either crash the kernel or create unde(cid:2)ned
behavior. This gives us con(cid:2)dence about the correctness
of our new design and implementation of SVA. Note that
we only injected errors that our design addresses because
we believe that our design is (cid:147)complete(cid:148) in terms of the
possible errors due to kernel-hardware interactions. Nev-
ertheless, the injection experiments are useful because
they validate that the design and implementation actu-
ally solve these problems.
7.2 Performance
To determine the impact of the additional run-time
checks on system performance, we ran several experi-
ments with applications typically used on server and end-
user systems. We ran tests on the original Linux 2.4.22
kernel (marked i386 in the (cid:2)gures and tables), the same
kernel with the original SVA safety checks [10] (marked
SVA), and the SVA kernel with our safety checks for low-
level software/hardware interactions (marked SVA-OS).
It is important to note that an underlying memory
safety system like SVA can incur signi(cid:2)cant run-time
overhead for C code, especially for a commodity ker-
nel like Linux that was not designed for enforcement of
memory safety. Such a system is not the focus of this
paper. Although we present our results relative to the
original (unmodi(cid:2)ed) Linux/i386 system for clarity, we
focus the discussion on the excess overheads introduced
by SVA-OS beyond those of SVA since the new tech-
niques in SVA-OS are the subject of the current work.
We ran these experiments on a dual-processor AMD
Athlon 2100+ at 1,733 MHz with 1 GB of RAM and a 1
Gb/s network card. We con(cid:2)gured the kernel as an SMP
kernel but ran it in on a single processor since the SVA
implementation is not yet SMP safe. Network experi-
ments used a dedicated 1 Gb/s switch. We ran our exper-
iments in single-user mode to prevent standard system
services from adding noise to our performance numbers.
We used several benchmarks in our experiments: the
thttpd Web server, the OpenSSH sshd encrypted (cid:2)le
transfer service, and three local applications (cid:150) bzip2 for
(cid:2)le compression, the lame MP3 encoder, and a perl in-
terpreter. These programs have a range of different de-
mands on kernel operations. Finally, to understand why
some programs incur overhead while others do not, we
used a set of microbenchmarks including the HBench-
OS microbenchmark suite [6] and two new tests we
wrote for the poll and select system calls.
Application
used
ApacheBench to measure
the (cid:2)le-transfer band-