# A Characterization of Load Balancing on the IPv6 Internet

**Authors:**
- Rafael Almeida
- Osvaldo L. H. M. Fonseca
- Elverton C. Fazzion
- Dorgival O. Guedes
- Wagner Meira Jr.
- Ítalo S. Cunha

**Affiliations:**
1. Department of Computer Science, Universidade Federal de Minas Gerais, Belo Horizonte, Brazil
2. Department of Computer Science, Universidade Federal de São João del-Rei, São João del-Rei, Brazil

**Contact:**
{rlca, osvaldo.morais, elverton, dorgival, meira, cunha}@dcc.ufmg.br

## Abstract
As the deployment of IPv6 continues to grow, it is essential to develop new measurement techniques to study the IPv6 Internet. We have implemented an IPv6 version of the Multipath Detection Algorithm (MDA) and used it from 12 geographically distributed vantage points across two different platforms to characterize IPv6 routers that perform load balancing. Our findings indicate that 74% of IPv6 routes traverse at least one router that performs load balancing. Similar to previous reports for IPv4, per-destination load balancing is the most prevalent type. However, we observed a significantly higher prevalence of per-packet load balancing in IPv6 traffic compared to IPv4. We also investigated which header fields are used for load balancing and found that 4% of IPv6 routers consider the Traffic Class or Flow Label fields. Finally, we quantified how often routers modify these fields and their impact on load balancing.

**Keywords:** IPv6, Traceroute, Measurement, Load Balancing, Topology

## 1. Introduction
The increasing deployment of IPv6 [7] has heightened its importance for application performance and reliability. Consequently, the networking community has developed new tools and adapted existing IPv4 measurement tools to collect datasets and study the IPv6 Internet (e.g., [4, 12]).

Topology measurements collected using traceroute serve various purposes in Internet studies [17]. The introduction of Paris traceroute in 2006 [1] revealed that load balancing is widely used in the Internet and causes several measurement artifacts in traceroute data. Since then, most traceroute implementations, including those used in Ark, iPlane, and RIPE Atlas, have been updated to keep probe flow identifiers fixed to prevent load balancing and avoid measurement artifacts. This approach is suitable for ongoing measurement campaigns as it prevents artifacts without increasing measurement costs; however, it does not identify whether routers perform load balancing.

Studying load balancing properties, such as the number of simultaneous routes between two networks, helps us understand its impact on performance (e.g., due to out-of-order packet delivery) and robustness (e.g., against failures and congestion). It also provides insights into traffic engineering practices.

In this paper, we implemented an IPv6 version of the Multipath Detection Algorithm (MDA) [16]. Our implementation identifies routers that perform load balancing and classifies their behavior by systematically varying four different fields in the IPv6 and TCP headers.

We analyze IPv6 route measurements from 12 vantage points distributed across 7 countries on 3 continents. We characterize the prevalence of load balancing in the IPv6 Internet, different load balancing behaviors, and properties such as asymmetry. We also study whether routers overwrite the IPv6 Traffic Class and Flow Label fields, which might impact load balancing. Whenever possible, we compare our results with previous observations for IPv4 load balancing by Augustin et al. [1]. Our main findings are:

- IPv6 load balancing is widespread, though less so than previously observed for IPv4. We find that 74% of IPv6 routes traverse at least one load balancer.
- Similar to IPv4, per-destination load balancing is the most common type. However, per-packet load balancing is significantly more common in IPv6 than previously reported for IPv4.
- A non-negligible fraction (4%) of IPv6 routers performing load balancing consider the Traffic Class and Flow Label header fields.

Our results enhance our understanding of the IPv6 Internet. To the best of our knowledge, this is the first study of IPv6 load balancing. While IPv6 and IPv4 load balancing share many similarities, we identify some differences. Notably, the higher prevalence of per-packet load balancing in IPv6 may negatively impact TCP performance due to a higher risk of packet reordering.

## 2. Load Balancing
Load balancing is a form of traffic engineering that can be configured manually or automatically using mechanisms like ECMP and EIGRP. Its primary motivations include increasing bandwidth and reducing maximum link utilization.

Figure 1 shows a route traversing four routers that perform load balancing (load balancers) measured from a vantage point in the Linode cloud hosting service. Load balancers choose the next hop of a packet based on a flow identifier computed from the packet's headers. Augustin et al. [1] defined three classes of load balancers based on the header fields used as flow identifiers. In decreasing order of load balancing granularity, these classes are:

- **Per-destination load balancers** use the source and destination IP addresses as the packet's flow identifier. This ensures that all packets exchanged between a source and a destination traverse the same sequence of interfaces and experience similar performance.
- **Per-flow load balancers** use a 5-tuple (source and destination addresses, source and destination ports, and protocol number) as the flow identifier. This guarantees that all packets belonging to the same connection will follow the same sequence of interfaces and experience similar performance. Different connections between the same source and destination pair might traverse different sequences of interfaces and experience different performance.
- **Per-packet load balancers** send packets to a random next hop regardless of header field values. Per-packet load balancing may result in packets from the same connection traversing different sequences of interfaces and experiencing different performance, leading to a higher risk of packet reordering, which can negatively impact traffic, e.g., by decreasing TCP performance [5].

To detect load balancing, the Multipath Detection Algorithm (MDA) [16] systematically varies the flow identifier in traceroute probes to detect different next hops after a load balancer. MDA proceeds hop-by-hop. It assumes each load balancer \( b \) in hop \( h \) has \( N_b + 1 \) next hops, where \( N_b \) is the number of next hops of \( b \) detected so far. MDA then computes the number of probes necessary to identify \( N_b + 1 \) next hops with a given confidence \( \alpha \), usually set to 0.95. This computation assumes that the load balancer \( b \) distributes flow identifiers uniformly among its next hops. If the number of computed probes is larger than the number of probes already sent to \( b \)'s next hops, MDA sends additional probes to cover the difference. If the additional probes detect no new next hop, MDA proceeds to the next load balancer or hop. If the additional probes detect new next hops, MDA updates \( N_b \) and repeats the process.

Augustin et al. [1] characterized load balancer diamonds, defined as a subgraph containing all hops between a divergence hop (a load balancer) and a convergence hop, with the condition that all flow identifiers traverse both divergence and convergence hops. Figure 1 shows two diamonds. Augustin et al. [1] defined the length of a diamond as the number of edges in the longest sequence of interfaces across the diamond; the min-width as the number of edge-disjoint sequences of interfaces across the diamond; the max-width as the maximum number of reachable interfaces at any given hop; and asymmetry as the maximum length difference between any sequence of interfaces across the diamond (a diamond with asymmetry zero is said to be symmetric). In Figure 1, diamond 1 has asymmetry 1, length 4, min-width 2, and max-width 4; while diamond 2 is symmetric, has length 2, min-width 3, and max-width 3.

## 3. IPv6 Load Balancing and Measurement Methodology
The IPv6 header, shown in Figure 2, is simpler than the IPv4 header. To identify load balancing, we vary the IPv6-specific Traffic Class and Flow Label fields. The Traffic Class field serves a purpose similar to the TOS field in IPv4. RFC 2460 states that routers may modify the Traffic Class field, and other routers or the destination should not expect it to have the same value as when the packet was first created. The Flow Label field allows IPv6 routers to efficiently identify flows. RFC 6437 recommends that source hosts set one Flow Label value for all IPv6 packets belonging to the same connection or application. RFC 6437 also specifies that a router may initialize the Flow Label when it is zero but should not modify a nonzero Flow Label.

We also vary the last 8 bits of the destination address to identify per-destination load balancers. Current IPv6 prefixes routed in the Internet are less specific than /48s [2]; packets with differences in the last 8 bits of the destination address will take the same route up to the destination’s network. Finally, we vary the TCP source port to check whether IPv6 routers also consider port numbers for per-flow load balancing, as in IPv4. We choose source port numbers starting from 33435, as typically done in traceroute implementations. We use TCP packets to destination port 80 to improve reachability [13] and avoid complaints. We store the probe identifier in the TCP sequence number field.

**Figure 1.** Real route measurement with four load balancers (A, B, C, and D) and two diamonds (A-D and D-E).

**Figure 2.** IPv6 header and first 8 bytes of the TCP header. We systematically vary gray bits to identify IPv6 load balancing.