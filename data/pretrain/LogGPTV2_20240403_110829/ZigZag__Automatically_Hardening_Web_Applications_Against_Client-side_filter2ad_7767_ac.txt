Figure 6: Invariant patching overview. If ZigZag detects
that two JavaScript programs are structurally isomorphic
aside from constant assignments, a merge description is
generated that allows for efficient patching of previously-
generated invariants. This scheme allows ZigZag to
avoid re-instrumentation of templated JavaScript on each
load.
is the case could be performed by pairwise AST equal-
ity that ignores constant values in assignments and nor-
malizes objects. However, this straightforward approach
does not scale when a large number of programs have
been instrumented.
Therefore, we devised a string equality-based tech-
nique. From an AST, ZigZag extracts a string-based
summary that encodes a normalized AST that ignores
constant assignments. In particular, normalization strips
all constant assignments of primitive data types encoun-
tered in the program. Also, assignments to object proper-
ties that have primitive data types are removed. Objects,
however, cannot be removed completely as they can con-
tain functions which are important for program structure.
Removing primitive types is important as many websites
generate programs that depend on the user state – e.g.,
setting {logged_in:
1} or omitting that property de-
pending on whether a user is logged in or not. Removing
the assignment allows ZigZag to correctly handle cases
such as these.
Furthermore, normalization orders any remaining
object properties such as functions or enclosed ob-
jects, in order to avoid comparison issues due to non-
deterministic property orderings. Finally, the structural
summary is the hash of the reduced, normalized program.
if the AST contains no func-
tion definitions, ZigZag skips instrumentation and serves
the original program. This check is performed as part
of structural summary generation, and is possible since
ZigZag performs function-level instrumentation.
As an optimization,
Code that is not enclosed by a function will not be
considered. Such code cannot be addressed through
event handlers and is not accessible through postMes-
sage. However, calls to eval would invoke a wrapped
function, which is instrumented and included in enforce-
ment rules.
Fast program merging. The first observed program
is handled as every other JavaScript program because
ZigZag cannot tell from one observation whether a pro-
gram represents a template instantiation. However, once
ZigZag has observed two structurally similar programs,
it transparently generates a merge description and invari-
ant patches for the second and future instances.
The merge description represents an abstract version of
the observed template instantiation that can be patched
into a functional equivalent of new instantiations. To
generate a merge description, ZigZag traverses the full
AST of structurally similar programs pairwise to extract
differences between the instantiations. Matching AST
nodes are preserved as-is, while differences are replaced
with placeholders for later substitution. Next, ZigZag
compiles the merge description with our modified ver-
sion of the Closure compiler [16] to add instrumentation
code and optimize.
The merge description is then used every time the tem-
plated resource is subsequently accessed. The ASTs of
the current and original template instantiations are com-
pared to extract the current constant assignments, and the
merge description is then patched with these values for
both the program body as well as any invariants to be
enforced. By doing so, we bypass repeated, possibly ex-
pensive, compilations of the code.
5.2 Deployment Models
We note that several scenarios for ZigZag deployment are
possible. First, application developers or providers could
perform instrumentation on-site, protecting all users of
the application against CSV vulnerabilities. Since no
prior knowledge is necessary in order to apply ZigZag
to an application, this approach is feasible even for third
parties. And, in this case there is no overhead incurred
due to re-instrumentation on each resource load.
On the other hand, it is also possible to deploy ZigZag
as a proxy.
In this scenario, network administrators
could transparently protect their users by rewriting all
web applications at the network gateway. Or, individ-
ual users could tunnel their web traffic through a personal
proxy, while sharing generated invariants within a trusted
crowd.
5.3 Limitations
ZigZag’s goal is to defend against attackers that desire to
achieve code execution within an origin, or act on behalf
of the victim. The system was not designed to be stealthy
or protect its own integrity if an attacker manages to gain
JavaScript code execution in the same origin. If attack-
ers were able to perform arbitrary JavaScript commands,
USENIX Association  
24th USENIX Security Symposium  743
any kind of in-program defense would be futile without
support from the browser.
Therefore, we presume (as discussed in Section 2.1)
the presence of complementary measures to defend
against XSS-based code injection. Examples of such
techniques that could be applied today include Content
Security Policy (CSP), or any of the number of template
auto-sanitization frameworks that prevent code injection
in web applications [17, 18, 6].
Another important limitation to keep in mind is that
anomaly detection relies on a benign training set of suffi-
cient size to represent the range of runtime behaviors that
could occur. If the training set contains attacks, the re-
sulting invariants might be prone to false negatives. We
believe that access to, or the ability to generate, benign
training data is a reasonable assumption in most cases.
For instance, traces could be generated from end-to-end
tests used during application development, or might be
collected during early beta testing using a population of
well-behaving users. However, in absence of absolute
ground truth, solutions to sanitize training data exist. For
instance, Cretu et al. present an approach that can sanitize
polluted training data sets [12].
If the training set is too small, false positives could oc-
cur. To limit the impact of undertraining, we only gen-
erate invariants for functions if we have more than four
sessions, which we found to be sufficient for the test cases
we evaluated. We note that the training threshold is con-
figurable, however, and can easily be increased if greater
variability is observed at invariant checkpoints. Under-
training, however, is not a limitation specific to ZigZag,
but rather a limitation of anomaly detection in general.
With respect to templated JavaScript, while ZigZag
can detect templates of previously observed programs by
generalizing, entirely new program code can not be en-
forced without previous training.
In cases where multiple users share programs instru-
mented by ZigZag, users might have legitimate privacy
concerns with respect to sensitive data leaking into in-
variants generated for enforcement. This can be ad-
dressed in large part by avoiding use of the oneOf invari-
ant, or by heuristically detecting whether an invariant ap-
plies to data that originates from password fields or other
sensitive input and selectively disabling the oneOf invari-
ant. Alternatively, oneOf invariants could be hashed to
avoid leaking user data in the enforcement code.
6 Evaluation
To evaluate ZigZag, we implemented a prototype of
the approach using the proxy deployment scenario. We
wrote Squid [19] ICAP modules to interpose on HTTP(S)
traffic, and modified the Google Closure compiler [16] to
instrument JavaScript code.
// Dispatches received messages to appropriate function
if (e.data.action == ’markasread’) {
markEmailAsRead(e.data);
// Communication with the server to mark emails as read
function markEmailAsRead(data) {
var xhr = new XMLHttpRequest();
xhr.open(’POST’, serverurl, true);
xhr.send(’markasread=’ + data.markemail);
// Communication with the ad network iframe
function sendAds(e) {
adWindow.postMessage({
’topic’: ’ads’,
’action’: ’showads’,
’content’: ’{JSON␣string}’
}, ”*”);
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
1
2
3
4
5
Figure 7: Vulnerable webmail component.
// Receive JSON object from webmail component
function showAds(data) {
var received = eval(’(’ + data.content + ’)’);
// Work with JSON object...
}
Figure 8: Vulnerable ad network component.
Our evaluation first investigates the security benefits
that ZigZag can be expected to provide to potentially
vulnerable JavaScript-based web applications. Second,
we evaluate ZigZag’s suitability for real-world deploy-
ment by measuring its performance overhead over mi-
crobenchmarks and real applications.
6.1 Synthetic Applications
Webmail service. We evaluated ZigZag on the hypo-
thetical webmail system first introduced in Section 2.
This application is composed of three components, each
isolated in iframes with different origins that contain mul-
tiple vulnerabilities. These iframes communicate with
each other using postMessage on window.top.frames.
We simulate a situation in which an attacker is able to
control one of the iframes, and wants to inject malicious
code into the other origins or steal personal information.
The source code snippets are described in Figures 7 and 8.
From the source code listings, it is evident that the
webmail component is vulnerable to parameter injection
through the markemail property. For instance, inject-
ing the value 1&deleteuser=1 could allow an attacker
to delete a victim’s profile. Also, the ad network uses an
eval construct for JSON deserialization. While highly
discouraged, this technique is still commonly used in the
wild and can be trivially exploited by sending code in-
stead of a JSON object.
We first used the vulnerable application through the
ZigZag proxy in a learning phase consisting of 30 ses-
sions over the course of half an hour. From this, ZigZag
744  24th USENIX Security Symposium 
USENIX Association
extracted statistically likely invariants from the resulting
execution traces. ZigZag then entered the enforcement
phase. Using the site in a benign fashion, we verified
that no invariants were violated in normal usage.
For the webmail component, and specifically the func-
tion handling the XMLHttpRequest, ZigZag generated
the following invariants.
1
2
3
4
5
6
7
8
9
1. The function is only called by one parent function
2. v0.topic === ’control’
3. v0.action === ’markasread’
4. typeof(v0.markemail) === ’number’
&& v0.markemail >= 0
5. typeof(v0.topic) === typeof(v0.action)
&& v0.topic < v0.action
For the ad network, ZigZag generated the following
invariants.
1. The function is only called by one parent function
2. v0.topic === ’ads’
3. v0.action === ’showads’
4. v0.content is JSON
5. v0.content is printable
6. typeof(v0.topic) === typeof(v0.action)
&& v0.topic < v0.action
7. typeof(v0.topic) === typeof(v0.content)
&& v0.topic < v0.content
8. typeof(v0.action) === typeof(v0.content)
&& v0.action < v0.content
Next, we attempted to exploit the webmail component
by injecting malicious parameters into the markemail
property. This attack generated an invariant violation
since the injected parameter was not a number greater
than or equal to zero.
Finally, we attempted to exploit the vulnerable ad net-
work component by sending JavaScript code instead of a
JSON object to the eval sink. However, this also gen-
erated an invariant violation, since ZigZag learned that
data.content should always be a JSON object – i.e., it
should not contain executable code.
URL fragments. Before postMessage became a
standard for cross-origin communication in the browser,
URL fragments were used as a workaround. The URL
fragment portion of a URL starts after a hash sign. A dis-
tinct difference between URL fragments and the rest of
the URL is that changes to the fragment will not trigger
a reload of the document. Furthermore, while SOP gen-
erally denies iframes of different origin mutual access to
resources, the document location can nevertheless be ac-
cessed. The combination of these two properties allows
for a channel of communication between iframes of dif-
ferent origins.
We evaluated ZigZag on a demo program that com-
municates via URL fragments. The program expects as
function getFragment ( ) {
return window.location.hash.substring(1);
}
function fetchEmailAddress() {
var email = getFragment();
document.write(”Welcome␣” + email);
// ...
}
Figure 9: Vulnerable fragment handling.
input an email address and uses it without proper sani-
tization in document.write. Another iframe could send
unexpected data to be written to the DOM. The code is
described in Figure 9.
After the training phase, we generated the following
invariants for the getFragment function.
1. The function is only called by one parent function
2. The return value is an email address
3. The return value is printable
6.2 Real-World Case Studies
In our next experiment, we tested ZigZag on four real-
world applications that contained different types of vul-
nerabilities. These vulnerabilities are a combination of
previously documented bugs as well as newly discovered
vulnerabilities.1
These applications are representative of different,
previously-identified classes of CSV vulnerabilities. In
particular, Son et al. [9] examined the prevalence of CSV
vulnerabilities in the Alexa Top 10K websites, found 84
examples, and classified them. The aim of this experi-
ment is to demonstrate that the invariants ZigZag gener-
ates can prevent exploitation of these known classes of
vulnerabilities.
For each of the following case studies, we first trained
ZigZag by manually browsing the application with one
user for five minutes, starting with a fresh browser state
four times. Next, we switched ZigZag to the enforcement
phase and attempted to exploit the applications. We con-
sider the test successful if the attacks are detected with no
false alarms. In each case, we list the relevant invariants
responsible for attack prevention.
Janrain. A code snippet used by janrain.com for
user management is vulnerable to a CSV attack. The
application checks the format of the string, but does not
check the origin of messages. Therefore, by iframing the
site, an attacker can execute arbitrary code if the message
has a specific format, such as capture:x;alert(3):.
This is due to the fact that the function that acts as a mes-
sage receiver will, under certain conditions, call a han-
dler that evaluates part of the untrusted message string
1For each vulnerability we discovered, we notified the respective
website owners.
USENIX Association  
24th USENIX Security Symposium  745
as code. Both functions were identified as important
by ZigZag’s lightweight static analysis. We note that
this vulnerability was previously reported in the litera-
ture [9]. As of writing, ten out of the 13 listed sites re-
main vulnerable, including wholefoodsmarket.com and
ladygaga.com.
For the event handler, ZigZag generated the following
invariants.
1. The function is only invoked from the global scope