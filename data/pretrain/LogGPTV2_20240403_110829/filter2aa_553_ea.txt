之前，要在程序设计方面做很多决定。
如何表示储存在内存中的位图图像？位图图像中的每个像素在屏幕上都
单独设置。在以前黑白屏的年代，可以使用一个计算机位（1 或 0）来表示
一个像素点（开或闭），因此称之为位图。对于彩色显示器而言，如果8位
表示一个像素，可以得到256种颜色。现在行业标准已发展到65536色（每像
素16位）、16777216色（每像素24位）、2147483色（每像素32位），甚至
更多。如果有32位色，且显示器有2560×1440的分辨率，则需要将近1.18亿
位（14M）来表示一个屏幕的位图图像。是用这种方法表示，还是开发一种
压缩信息的方法？是有损压缩（丢失相对次要的数据）还是无损压缩（没有
丢失数据）？再次提醒读者注意，在开始编写代码之前，需要做很多程序设
计方面的决定。
我们来处理一个数据表示的示例。假设要编写一个程序，让用户输入一
年内看过的所有电影（包括DVD和蓝光光碟）。要储存每部影片的各种信
息，如片名、发行年份、导演、主演、片长、影片的种类（喜剧、科幻、爱
情等）、评级等。建议使用一个结构储存每部电影，一个数组储存一年内看
过的电影。为简单起见，我们规定结构中只有两个成员：片名和评级（0～
10）。程序清单17.1演示了一个基本的实现。
程序清单17.1 films1.c程序
/* films1.c -- 使用一个结构数组 */
#include 
1299
#include 
#define TSIZE   45 /* 储存片名的数组大小 */
#define FMAX   5  /* 影片的最大数量 */
struct film {
char title[TSIZE];
int rating;
};
char * s_gets(char str[], int lim);
int main(void)
{
struct film movies[FMAX];
int i = 0;
int j;
puts("Enter first movie title:");
while (i :");
1300
scanf("%d", &movies[i++].rating);
while (getchar() != '\n')
continue;
puts("Enter next movie title (empty line to stop):");
}
if (i == 0)
printf("No data entered. ");
else
printf("Here is the movie list:\n");
for (j = 0; j 
#include     /* 提供malloc()原型 */
#include     /* 提供strcpy()原型 */
#define TSIZE  45    /* 储存片名的数组大小 */
struct film {
char title[TSIZE];
int rating;
struct film * next;  /* 指向链表中的下一个结构 */
};
char * s_gets(char * st, int n);
int main(void)
{
struct film * head = NULL;
struct film * prev, *current;
char input[TSIZE];
1311
/* 收集并储存信息 */
puts("Enter first movie title:");
while (s_gets(input, TSIZE) != NULL && input[0] != '\0')
{
current = (struct film *) malloc(sizeof(struct film));
if (head == NULL)   /* 第1个结构 */
head = current;
else          /* 后续的结构 */
prev->next = current;
current->next = NULL;
strcpy(current->title, input);
puts("Enter your rating :");
scanf("%d", &current->rating);
while (getchar() != '\n')
continue;
puts("Enter next movie title (empty line to stop):");
prev = current;
}
/* 显示电影列表 */
1312
if (head == NULL)
printf("No data entered. ");
else
printf("Here is the movie list:\n");
current = head;
while (current != NULL)
{
printf("Movie: %s  Rating: %d\n",
current->title, current->rating);
current = current->next;
}
/* 完成任务，释放已分配的内存 */
current = head;
while (current != NULL)
{
current = head;
head = current->next;
free(current);
}
1313
printf("Bye!\n");
return 0;