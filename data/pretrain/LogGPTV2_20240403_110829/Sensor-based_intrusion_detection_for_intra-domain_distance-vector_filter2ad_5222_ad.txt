sensor is placed. The sensor initializes ripi
timer and sets
It sets the time-out value to ripinterval.
ripi
The sensor increments ripi
counter for every RIP advertise-
ment that it sees from router vi. If ripi
counter is greater then
riphigh
timer expires, then this is considered an
attack.
threshold when ripi
counter is less that riplow
The sensor also maintains a value riplow
threshold, which is
the minimum number of packets that a sensor should see
within ripinterval. If ripi
threshold when
ripi
timer expires, it can be inferred that the router is not
working. This could be due to a denial-of-service attack
against the router or due to a failure. riphigh
threshold and riplow
are implementation and topology dependent. These values
have to be experimentally or statistically determined for a
network.
threshold
6. EXPERIMENTAL VALIDATION
An experimental testbed network was built to test the
vulnerability of routing protocols. The testbed routers are
multi-homed PCs, equipped with the GNU Zebra routing
daemon, version 0.91a. The testbed contains ﬁve diﬀerent
autonomous systems. The autonomous systems exchange
7
RIP information from one router may be split and advertised in
multiple RIP messages.
routing information using BGP. The interior gateway pro-
tocol used within the autonomous systems is either RIP or
OSPF. Figure 4 is a schematic of the complete testbed topol-
ogy. The experiments presented in this paper only use au-
tonomous system 1. The other autonomous systems were
used to conduct experiments on OSPF and BGP. Those ex-
periments are not discussed in this paper.
The networks in the testbed have addresses in the range
192.168.x.x. Each network has a subnet mask of 255.255.-
255.0. In the following, subnet “x” is used to denote sub-
net 192.168.x.0 and address “x.x” denotes the IP address
192.168.x.x.
The following sections discuss three very simple attacks
that were carried out on the testbed. These attacks are
proof-of-concepts to demonstrate the vulnerabilities in dist-
ance-vector routing protocols and how the approach de-
scribed here is used to detect these attacks.
6.1 Routing Loop Attack
The Routing Loop Attack demonstrates how false routing
information generated by a remote host can propagate to
routers and, as a consequence, install wrong routes in the
routing tables.
Consider the network shown in Figure 4. A routing loop
for subnet 30 is created by spooﬁng routing advertisements.
Note that subnet 30 does not exist in Figure 4. The spoofed
routing advertisements are generated by host mike. The
source IP address of the spoofed routing advertisements is
set to be the address of router hotel. The destination of the
spoofed routing advertisements is router foxtrot. This par-
ticular choice of source and destination addresses is dictated
by the particular topology of the network. Spoofed routing
advertisements with the source address of router golf are not
forwarded by golf. Therefore, the source of the spoofed rout-
ing advertisement cannot be golf. In addition, routers accept
routing information only from their neighbors. Therefore,
the source of the spoofed routing advertisements has to be
hotel.
The spoofed routing advertisements from mike are routed
through golf to reach foxtrot. As a consequence, foxtrot adds
a route for subnet 30 through hotel. foxtrot then advertises
this route to golf but not to hotel, because it believes that
hotel is the source of the route. After receiving the advertise-
ment from foxtrot, golf adds a route to subnet 30, through
foxtrot. Then, golf sends a routing advertisement for sub-
net 30 to hotel. When the advertisement is processed by
hotel, a route to subnet 30 through golf is added to hotel ’s
routing table. This results in a routing loop. A traceroute
from host india for an address in subnet 30 shows the path
golf-foxtrot-hotel-golf-· ·· -golf.
6.2 Faulty Route Attack
The Faulty Route Attack demonstrates how a malicious
entity can divert traﬃc by advertising a route with a cost
that is lower that the optimal cost. Consider Figure 4. A
malicious host on the link between golf and foxtrot wants
to access incoming traﬃc to subnet 25. To achieve this, the
attacker has to convince foxtrot that the best way to reach
subnet 25 is to route traﬃc through golf instead of romeo.
The route associated with romeo has cost 2.
Therefore, the malicious host pretends to be golf and
sends a routing message to foxtrot advertising a route to
subnet 25 at cost 1. As a consequence, foxtrot modiﬁes the
route to subnet 25 in its routing table. The new route goes
through golf instead of romeo.
13321.1
23.1
juliet
5.2
AS3
AS4
BGP
22.1
23.2
delta
4.2
AS1
RIP
B
G
P
5.1
B GP
4.1
2.2
B
G
P
bravo
AS5
BGP
19.1
november
17.2
16.2
2.1
16.1
17.1
1.2
alpha
15.1 15.2
papa
quebec
3.3
kilo
3.1
3.2
13.2
13.1
14.2
14.1
6.1
6.2
charlie
echo
12.1 12.2
oscar
20.1
OSPF
AS2
18.1
8.2
9.2
hotel
11.1
25.2
25.1
romeo
24.2
24.1
foxtrot
7.1
1.1
8.1
sierra
26.1
26.2
tango
27.1
27.2
uniform
28.1
28.2
7.2
9.1
golf
10.1
10.2
10.4
india
mike
Figure 4: Testbed Topology
6.3 Denial-of-Service Attack
In the Denial-of-Service Attack, malicious hosts on links
between foxtrot and golf, foxtrot and hotel and foxtrot and
romeo collaborate to make subnet 10 unreachable from fox-
trot. The malicious host on the link between foxtrot and
golf pretends to be golf and spoofs routing advertisements
to foxtrot advertising unreachability to subnet 10. On re-
ceipt of the spoofed routing advertisements, foxtrot modiﬁes
the route to subnet 10 in its routing table to go through hotel
instead of golf.
Next, the malicious host on the link between foxtrot and
hotel pretends to be hotel and spoofs a routing message to
foxtrot advertising unreachability to subnet 10. On receipt
of the spoofed routing advertisement, foxtrot modiﬁes the
route to subnet 10 in its routing table to go through romeo
instead of hotel.
When romeo too advertises unreachability to subnet 10,
foxtrot removes the route to subnet 10 from its routing ta-
ble because it has no other way to reach subnet 10 except
through golf, hotel, or romeo. A traceroute from foxtrot to
subnet 10 returns a Network Unreachable error.
The malicious hosts keep sending spoofed routing up-
dates at a rate faster than the actual routing updates, thus
preventing the infrastructure from re-establishing correct
routes.
These experiments demonstrate how spoofed routing ad-
vertisements from unauthorized entities can disrupt the dist-
ance-vector routing infrastructure. A malicious entity can
advertise non-existent routes, advertise unreachability when
a route is actually present, or advertise better-than-optimal
routes to divert traﬃc.
6.4 Detection
A preliminary experimental evaluation of the intrusion de-
tection approach is presented here. A detailed evaluation of
the approach is the subject of our current research. The cur-
rent objective is to establish a proof-of-concept by detecting
the attacks outlined in Section 6. Two sensors are placed
on the testbed of Figure 4. sensorgf is placed on the link
between routers golf and foxtrot. sensorgm is placed on the
link connecting golf to subnet 10. The sensor conﬁgurations
are generated following the algorithm presented in Section 4.
Consider the Routing Loop Attack. Routing advertise-
ments for subnet 30 spoofed by mike are analyzed by sen-
sorgm on the link connecting golf to subnet 10. sensorgm
detects the source link-level and IP addresses of the routing
advertisements to be incorrect. The spoofed routing adver-
tisements have the source link-level and IP addresses of hotel
whereas the only possible routing advertisement on that link
should be from router golf. sensorgf also detects the spoofed
routing advertisements because subnet 30, advertised in the
spoofed routing message, does not exist in the domain.
Consider the Faulty Route Attack.
sensorgf detects a
routing message that appears to come from router golf ad-
vertising a route to subnet 25 at cost 1. Therefore, sensorgf
searches its conﬁguration for possible paths from golf to sub-
net 25 that do not have foxtrot as the ﬁrst hop. The possible
paths are through either router uniform or router hotel but
none of the paths have cost 1. Therefore, sensorgf infers
that the advertised cost from golf to subnet 25 is an impos-
sible cost. As a consequence, the routing advertisement is
considered malicious.
Consider the Denial-of-Service attack. When sensorgf
receives a spoofed routing message, which appears to be
coming from router golf, it considers unreachability as a sub-
optimal-cost advertisement. Therefore, sensorgf sends a
message to sensorgm to validate whether the route to subnet
10 through golf is available or not. sensorgf receives a reply
from sensorgm. As a consequence, sensorgm concludes that
the routing message is malicious.
7. ALGORITHM EVALUATION
The experimental evaluation validates the fact that the
suggested approach can successfully detect malicious rout-
ing advertisements. Nonetheless, our approach has a few
limitations, which are discussed here.
1347.1 Computational Complexity
The all-pair/all-path algorithm is used to generate sensor
conﬁgurations.
It ﬁnds all paths from every router to ev-
ery other router in the network. This algorithm has an ex-
ponential lower bound. However, the algorithm is suitable
for medium-size sparse topologies. Several real topologies
that run RIP were analyzed. The all-pair/all-path algo-
rithm converged in acceptable time for all these topologies.
The algorithm should converge in acceptable time for most
topologies running RIP, since these topologies are not very
large or dense.
In addition, the sensor conﬁgurations are generated oﬀ-
line. The conﬁgurations have to be regenerated if routers
and links are added to the topology. The sensors have to be
brought oﬄine during this time. However router crashes or
link failures do not require that the sensor conﬁgurations be
regenerated.
7.2 Message Overhead
Another drawback of the approach is the additional traﬃc
that is generated to validate optimal and sub-optimal routes.
The sensor traﬃc increases as the number of sensors grows
and the required security guarantees become more stringent.
Consider a routing advertisement m from router vi, adver-
tising a path to subnet sab. If a sensor sensorij determines
that the cost advertised in m is an impossible cost, sensorij
can declare the routing advertisement to be malicious with-
out communicating with any other sensor. Therefore, there
is no traﬃc overhead in this case.
1, no
If sensorij determines that the cost advertised in m is an
optimal cost, sensorij will search its conﬁguration to ﬁnd
all the optimal paths from router vi to subnet sab. Let the
set of optimal paths from router vi to subnet sab be {po
1,
3, ···} and the corresponding set of number of sensors
2, po
po
3, ··· }. Now, the maximum
on each path be {no
number of messages that sensorij will generate to verify
m will be no
1 is the ﬁrst
optimal path to be veriﬁed and po
1 is found to be a valid path
from router vi to subnet sab, sensorij will only generate no
1
messages to verify m. If po
1 is the ﬁrst path to be veriﬁed,
1 ≤ noptimal ≤ no
3+ ··· where noptimal is the
no
number of messages that sensorij will generate to verify
an optimal-cost advertisement received from router vi for
subnet sab. Assuming that every sensor replies to every
request, the total overhead is 2 ∗ noptimal messages.
2, no
3+ · ·· . However, if po
2+ no
1+ no
1+ no
2+ no
1, po
1 , ps1
1 , ns2
2, ··· , ps1
2 , · ·· , na
2 , ··· , ps2
is a sub-optimal path, pa
1, no
If sensorij determines that the cost advertised in m is a
sub-optimal cost, sensorij will search its conﬁguration to
ﬁnd the set of paths {po
1 , ps2
2 ,
2 , ···} from router vi to subnet sab where po
·· · , pa
1 is
an optimal path, ps1
1 is a path
2, ··· , ns1
corresponding to the advertised cost. {no
1
1 ,
2 , ··· , ns2
2 , ·· ·} is the corresponding
ns1
set of number of sensors on each path. Now, the maximum
number of messages that sensorij will generate to verify
that all paths from router vi to subnet sab with costs less
than the advertised cost are not available, is n<advertised
= no