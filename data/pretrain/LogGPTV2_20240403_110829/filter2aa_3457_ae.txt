### 7.4 Running Commands

Beacon's shell command instructs a Beacon to execute a command via `cmd.exe` on the compromised host. Upon completion, Beacon will display the output. To execute a command without `cmd.exe`, use the `run` command, which will also provide the output. The `execute` command runs a program in the background and does not capture the output.

- **Powershell Command**: Use this to execute a command with PowerShell on the compromised host.
- **Powerpick Command**: This executes PowerShell cmdlets without `powershell.exe`, utilizing the Unmanaged PowerShell technique by Lee Christensen. Both `powershell` and `powerpick` commands use your current token.
- **Psinject Command**: Injects Unmanaged PowerShell into a specific process and runs your cmdlet from that location.
- **Powershell-import Command**: Imports a PowerShell script into Beacon, making its cmdlets available for future `powershell`, `powerpick`, and `psinject` commands. Beacon can hold only one PowerShell script at a time. Import an empty file to clear the imported script.
- **Execute-assembly Command**: Runs a local .NET executable as a Beacon post-exploitation job. You can pass arguments as if it were run from a Windows command-line interface. This command also inherits your current token.
- **CD Command**: Changes the working directory of the Beacon’s process.
- **PWD Command**: Displays the current working directory.
- **Setenv Command**: Sets an environment variable.
- **Inline-execute [args]**: Executes a Beacon Object File with the specified arguments. Beacon Object Files are compiled C programs that run within a Beacon session. For more information, visit:  
  <https://www.cobaltstrike.com/help-beacon-object-files>

### 7.5 Session Passing

Cobalt Strike’s Beacon was designed to maintain access to a compromised host. Its primary function is to pass accesses to other Cobalt Strike listeners.

- **Spawn Command**: Spawns a session for a listener, requiring an architecture (e.g., x86, x64) and a listener as arguments. By default, it spawns a session in `rundll32.exe`. Use `spawnto` to specify a better program (e.g., Internet Explorer).
- **Inject Command**: Injects a session into a specific process. Use `ps` to list processes and `inject [pid] [listener]` to inject a session.
- **Dllinject [pid]**: Injects a Reflective DLL into a process.
- **Shinject [pid] [architecture] [/path/to/file.bin]**: Injects shellcode from a local file into a process on the target.
- **Shspawn [architecture] [/path/to/file.bin]**: Spawns the "spawn to" process and injects the specified shellcode file.
- **Dllload [pid] [c:\path\to\file.dll]**: Loads an on-disk DLL in another process.

### 7.6 Alternate Parent Processes

- **PPID [pid]**: Assigns an alternate parent process for programs run by your Beacon session. Type `ppid` with no arguments to launch processes with no spoofed parent.
- **Runu Command**: Executes a command with another process as the parent, using the rights and desktop session of the alternate parent.
- **Spawnu Command**: Spawns a temporary process as a child of a specified process and injects a Beacon payload stage into it.

### 7.7 Spoof Process Arguments

- **Argue [command] [fake arguments]**: Adds a command to the internal list of commands to spoof arguments for. Use `argue [command]` to remove a command from the list. `argue` by itself lists the commands in the internal list.
- **Process Match Logic**: The match is exact. For example, `net.exe` will only match `net.exe`.

### 7.8 Blocking DLLs in Child Processes

- **Blockdlls start**: Launches child processes with a binary signature policy that blocks non-Microsoft DLLs. **Blockdlls stop** disables this behavior. This feature requires Windows 10.

### 7.9 Upload and Download Files

- **Download Command**: Downloads the requested file. Use `downloads` to see a list of file downloads in progress. Use `cancel [filename]` to cancel a download.
- **Upload Command**: Uploads a file to the host.
- **Timestomp Command**: Matches the Modified, Accessed, and Created times of one file to another.

### 7.10 File Browser

- **File Browser**: Explores files on a compromised system. Navigate through drives and folders, and download or delete files.
- **List Drives**: Lists available drives.
- **Refresh**: Updates the contents of the current folder.

### 7.11 File System Commands

- **LS Command**: Lists files in the current directory.
- **Mkdir**: Creates a directory.
- **RM**: Removes a file or folder.
- **CP**: Copies a file to a destination.
- **MV**: Moves a file.

### 7.12 The Windows Registry

- **Reg_query [x86|x64] [HIVE\path\to\key]**: Queries a specific key in the registry. Add `[value]` to query a specific value within a key.

### 7.13 Keystrokes and Screenshots

- **Keylogger [pid] [x86|x64]**: Injects a keystroke logger into a process. Use `keylogger` alone to inject into a temporary process.
- **Screenshot [pid] [x86|x64]**: Takes a screenshot. Use `screenshot` alone to inject into a temporary process.
- **Screenwatch Command**: Continuously takes screenshots until stopped.
- **Printscreen Command**: Takes a screenshot using a PrintScr keypress and reports it back.

### 7.14 Post-Exploitation Jobs

- **Jobs Command**: Lists running jobs.
- **Jobkill [job number]**: Kills a job.

### 7.15 The Process Browser

- **Process Browser**: Shows a list of processes. Highlight processes to impersonate tokens, deploy the screenshot tool, or deploy the keystroke logger.

### 7.16 Desktop Control

- **Desktop (VNC)**: Interacts with a desktop on a target host. Use `desktop pid architecture low|high` to inject a VNC server into a specific process.

### 7.17 Privilege Escalation

- **Elevate Command**: Lists privilege escalation exploits. Use `elevate [exploit] [listener]` to attempt elevation.
- **Runasadmin [exploit] [command + args]**: Runs a command in an elevated context.
- **Runas [DOMAIN\user] [password] [command]**: Runs a command as another user.
- **Spawnas [DOMAIN\user] [password] [listener]**: Spawns a session as another user.
- **Getsystem**: Impersonates a token for the SYSTEM account.
- **Elevate svc-exe [listener]**: Creates a service that runs a payload.
- **UAC Bypass Attacks**: Use `elevate uac-token-duplication [listener]` or `runasadmin uac-token-duplication [command]` to bypass UAC.
- **Getprivs**: Enables privileges assigned to your current access token.

### 7.18 Mimikatz

- **Mimikatz**: A powerful tool for credential extraction and manipulation. Use it carefully to avoid detection.