Apparition VM will request a random number of frames
from the OS when it needs more physical memory; these
frames will be stored within an internal cache of free
frames that it can use to fulﬁll ghost memory requests.
When the internal cache of free frames becomes sufﬁ-
ciently large, the Apparition VM will return frames to
the OS so that they can be used for other purposes. This
design obscures ghost memory allocation patterns from
the OS while still giving the OS some control over how
much physical memory is used for ghost memory across
all processes running on the system. We can create Ap-
parition VM APIs for applications to disable these two
protections if the application is not concerned about page
allocation side-channel attacks.
5.3 Code Translation Side Channels
As Section 3.3 explains, attackers can use side channels
on code memory accesses in addition to data memory
accesses. Since Virtual Ghost places native code trans-
lations and N-ISA application code into Virtual Ghost
VM memory [26], Apparition’s page table (Section 5.1)
and page allocation (Section 5.2) defenses eliminate code
memory side channels. However, for V-ISA applica-
tions, Apparition must translate V-ISA code to N-ISA
code without creating new side channels. When the OS
loads an application in memory for execution, it loads the
V-ISA code into either user-space or kernel-space mem-
ory and then asks Apparition to verify the integrity of the
code and to create the native code for the application in
Virtual Ghost VM memory. Apparition must ensure that
its accesses to the V-ISA code do not leak information
about the application’s execution.
Two simple methods can eliminate this side channel.
If the Apparition implementation does not employ run-
time optimizations (such as lazy code translation), it
must simply ensure that it translates all the V-ISA code
of an application to native code when the OS requests
translation via the sva translate() SVA-OS instruc-
tion; so long as it does not read V-ISA code on demand
as the program executes e.g., for lazy compilation, then
no side channel exists.
If the Apparition VM performs run-time optimizations
such as lazy code translation, it must copy the entire V-
ISA code into Apparition VM memory ﬁrst and use that
copy to perform these run-time optimizations.
In this
way, both the V-ISA code and N-ISA code are protected
from side channels.
5.4 LLC Side Channels
Our LLC side-channel defenses must prevent an appli-
cation from sharing ghost memory with a compromised
OS and other applications and ensure that cache lines for
physical memory mapped to ghost memory will not be
read or evicted by the OS or other applications.
Preventing Page Sharing Virtual Ghost [26] already
ensures that an application’s ghost memory cannot be ac-
cessed by the OS or other applications. As Sections 4.1
and 5.1 describe, the SFI instrumentation prevents the
OS kernel from accessing ghost memory and from map-
ping ghost memory into regions that the OS kernel can
access. Likewise, Virtual Ghost ensures that applications
have their own private ghost memory that is not shared
with other applications. This not only prevents data theft
by applications and compromised OS kernels, but, as we
discuss next, allows our Apparition design to utilize Intel
CAT [4] to defend against LLC side-channel attacks.
Cache Partitioning Our defense against LLC side-
channel attacks combines Virtual Ghost’s existing mem-
ory protection mechanisms [26] with static cache par-
titioning implemented using Intel’s CAT processor fea-
ture [4]. Intel CAT enables way-partitioning of the LLC
into several subsets of smaller associativities [4]. A
processor can switch among multiple classes of service
(COS, or resource control tag with associated resource
capacity bitmap indicating the subset of LLC ways as-
signed to the COS) at runtime. Privileged code can
switch the COS and conﬁgure the bitmaps of each COS
by writing to model-speciﬁc registers. The number of
COSs supported depends on the processor type. In addi-
tion, Intel imposes two constraints [50]: the bitmap must
contain at least 2 ways, and the ways allocated must be
USENIX Association
27th USENIX Security Symposium    1447
contiguous. Once CAT is conﬁgured, the processor can
only load cache lines into its subset of the cache; code
running in one COS cannot evict cache lines in another
COS. However, software in one COS can read data from
all cache lines in the LLC, allowing software running in
different COSs to read the same cache lines if they are
sharing physical memory e.g., read-only mapped shared
library code.
Our design requires one partition for kernel code and
non-ghosting applications not using ghost memory, one
for Apparition VM code, and one for each ghosting ap-
plication. The processor in our experiments (Section 8)
has four partitions. If there are more ghosting applica-
tions executing than partitions available, then the Ap-
parition VM will need to multiplex one or more parti-
tions between ghosting applications and ﬂush the cache
on context switches. Partitioning ghosting applications
from both the kernel and non-ghosting applications elim-
inates side channels between these two domains, pre-
venting the kernel from inferring information by measur-
ing cache access time. Partitioning also eliminates costly
cache ﬂushes when control ﬂow moves between ghosting
application, Apparition VM, and OS kernel/untrusted ap-
plication code. Additionally, partitioning the Apparition
VM from the kernel and from ghosting applications en-
sures that any secrets held within Apparition VM mem-
ory (such as page tables) do not leak to either applica-
tions or the OS kernel.
Unfortunately, Intel CAT allows data reads from cache
lines outside of the current COS [4]. However, since Ap-
parition ensures that there is no sharing of ghost memory
or native code between a ghosting application and the
OS kernel (or other applications), and since the MPX
SFI protections prevent the OS kernel from accessing
ghost memory and Apparition VM memory, such cross-
COS reads will never occur. Hence, the memory protec-
tions in Virtual Ghost coupled with Intel CAT can defend
against LLC side-channel attacks.
Cache Partitioning Conﬁguration The Apparition
VM conﬁgures the cache partitions on boot and uses
several mechanisms which, together, ensure that the OS
kernel cannot reconﬁgure or disable the cache partition-
ing. First, the SVA virtual instruction set has no instruc-
tions for changing the cache partitions. Second, Virtual
Ghost’s MMU protections prevent the OS kernel from
loading new native code into memory that was not trans-
lated and instrumented by the Virtual Ghost VM [26].
Third, Virtual Ghost enforces CFI on kernel code, ensur-
ing that the OS kernel can only execute its own code and
cannot jump into the middle of variable-length x86 in-
structions within the kernel [26] that might reconﬁgure
cache partitioning.
On an interrupt, trap, or system call, the processor
transfers control to the Apparition VM which switches
the cache partition in use to the Apparition VM’s parti-
tion. After saving the interrupted processor state in Ap-
parition VM memory, the Apparition VM switches to the
kernel’s cache partition before calling the kernel’s inter-
rupt, trap or system call handler. Likewise, SVA-OS in-
structions switch to the Apparition VM’s partition on en-
try and back to the kernel’s partition on exit.
Our design also protects distrusting applications from
each other by giving each application needing protection
from LLC side channels its own cache partition. Initially,
the Apparition VM assigns one cache partition to the ﬁrst
application using ghost memory. This cache partition
will be divided into more cache partitions when more ap-
plications needing protection are scheduled. Apparition
can either divide the cache space evenly between applica-
tions or employ quality-of-service policies based on the
applications’ LLC working sets. The only restriction is
that each application’s partition must have at least two
ways. On current Intel processors, the Apparition VM
must ﬂush the entire cache when dividing a cache par-
tition. Similarly, the Apparition VM will need to ﬂush
the cache on context switches if the number of distrust-
ing ghosting applications exceeds the number of COSs
provided by the processor.
If a process wants to create a cooperating thread with
which to share its ghost memory or a child process which
it trusts to use the same cache partition, the process can
provide an option to the fork() system call indicating
that the new process or thread should use the same cache
partition as the parent process. Virtual Ghost (and hence
Apparition) dispatches all system calls and creates all
new processes and threads [26]. It can therefore deter-
mine whether the new process or thread that it creates
should use the same cache partition as its parent.
Instruction Tracing Side Channels
5.5
As Section 3.3 discusses, inferring the dynamic order in
which a program executes its instructions can leak infor-
mation about data if the program counter depends upon
secret data [32]. Existing attacks exploit such implicit
ﬂows within programs by tracing code memory page
faults [73] or via timer-based interrupts [38].
Virtual Ghost [26] saves interrupted program state
within the Virtual Ghost VM memory, forcing the OS
kernel to use SVA-OS instructions to read or modify in-
terrupted program state. The SVA-OS instruction set
does not provide an instruction for retrieving the program
counter stored within interrupted program state [25, 26].
As a result, while a compromised OS can interrupt an
application as frequently as it wants, it cannot infer the
program counter from interrupted program state. Com-
bined with the virtual instruction set code and native code
1448    27th USENIX Security Symposium
USENIX Association
memory mitigations described in Section 5.3, Apparition
mitigates attacks that infer a ghosting application’s pro-
gram counter.
6
Impact on Speculation Side Channels
Component
SVA-OS
SFI Pass
CFI Pass
Total
Source Lines of Code
5,823
292
726
6,841
Recently, there has been much press about two classes of
attacks, Meltdown [49] and Spectre [46], in which user-
space code leverages speculative execution side chan-
nels in the processor to steal data and then exﬁltrates the
stolen data via existing side channels. While speculation
side channels are outside the scope of our attack model
in Section 2, our defenses mitigate some variants of these
attacks that use cache side channels.
Spectre [46] is an attack in which one user-space pro-
cess attempts to infer information about another user-
space process. It utilizes the existence of shared branch
prediction tables and branch target buffers to force the
victim to speculatively execute code that loads sensitive
data into the cache. Since our defenses partition the LLC
and prevent the sharing of ghost memory, values in ghost
memory will not become visible to attackers in the LLC.
However, in order to mitigate speculation side-channel
attacks, Apparition will need to prevent the sharing of all
physical memory between untrusted processes, includ-
ing native code pages and traditional user-space mem-
ory. Failure to do so would allow a Spectre attack to
communicate information across the Intel CAT partitions
through shared physical memory.
With several enhancements, Apparition could mitigate
other forms of these attacks. To mitigate Meltdown [49]
and Spectre [46] attacks that speculatively access out-
of-bounds memory, Apparition could use speculation-
resistant SFI instrumentation on both application and
kernel code [34] to protect large memory regions; in par-
ticular, we show in [34] that SFI instrumentation using
instruction sequences to stall speculative execution us-
ing a data dependence so that the SFI instructions must
complete before the protected memory read instruction
begins execution. To provide ﬁner granularity protec-
tion, e.g., at the granularity of individual memory ob-
jects, Apparition could place lfence instructions before
memory read instructions that have a control dependence
on a branch to ensure that all instructions performing ar-
ray bounds checks have committed before the load com-
mences execution [6].
To mitigate Meltdown attacks [49], Apparition could
transparently use a different set of page tables and PCIDs
for user-space code, OS kernel code, and Apparition VM
code [34], building off the suggestions from Intel [6].
Since Apparition uses a virtual instruction set to ab-
stract away hardware details and controls native code
generation, it can employ any or all of these mitigations
without changing application or OS kernel source code.
Table 2: Apparition Physical Source Lines of Code
The virtual instruction set remains unchanged; Appari-
tion can employ these solutions by enhancing its com-
piler transformations and native code generation.
7
Implementation
We implemented Apparition by modifying the Virtual
Ghost prototype for 64-bit x86 systems [26]. Appari-
tion uses the FreeBSD 9.0 kernel ported to the SVA-OS
virtual instruction set and is compiled with the LLVM
3.1 compiler. The Apparition prototype only supports
single-processor execution, so our evaluation focuses on
single-core overheads.
We used sloccount [72] to measure the source lines
of code (which excludes whitespace and comments) of
the SVA-OS instructions, the SFI compiler pass, and the
CFI compiler pass comprising Apparition; Table 2 shows
the results. Apparition’s TCB contains 6,841 source lines
of code which includes all of Virtual Ghost’s old func-
tionality [26], Apparition’s functionality, and conﬁgura-
tion options to enable and disable the new Apparition
features. The original Virtual Ghost prototype contained
5,344 source lines of code [26] in comparison.
We implemented the MPX SFI optimization in Ap-
parition by changing the existing LLVM IR-level SFI
pass in Virtual Ghost [26] to insert inline assembly code
utilizing MPX instructions instead of LLVM IR bit-
masking instructions. We also implemented the SVA di-
rect map by enhancing the SVA-OS instructions within
Apparition. While Virtual Ghost is designed to restrict
Direct Memory Access (DMA) operations to memory
with an I/O MMU [26], neither the original Virtual Ghost
prototype nor our prototype implements this feature.
To implement our paging protections in Sections 5.1
and 5.2, we modiﬁed the ghost memory allocator within
the Apparition VM so that it requests all physical mem-
ory frames from the OS when the application uses the
hypercall to request ghost memory. The previous imple-
mentation [26] would delay allocation of physical mem-
ory until the application read or wrote the ghost memory;
the Virtual Ghost VM would then request a frame from
the OS and map it on demand. Our ghost memory alloca-
tor also implements randomization; it maintains a set of
memory frames within the Apparition VM and requests a
random number of frames from the OS kernel when this
USENIX Association
27th USENIX Security Symposium    1449
reserve becomes empty. Additionally, the FreeBSD 9.0
malloc() implementation always requests ghost mem-
ory in constant-sized chunks from the Apparition VM,
further obscuring the application’s actual memory allo-
cation information from the OS kernel. As neither the
Virtual Ghost prototype [26] nor our new prototype im-
plement virtual-to-native code translation, we did not im-
plement the mitigations in Section 5.3. Additionally, nei-
ther prototype supports swapping out of ghost memory to
persistent storage.