Patch AMSI
Code
.NET Runtime
AMSI.dll
Process
AMSI Patch
exec
44
RAT Development
06/01/2022
AV/EDR uses UMH (Usermode Hooks)
●
Map a DLL in each process
●
Patch ntdll.dll to jump first to the av.dll
●
Av.dll scores invocations of potentially malicious 
library calls
○
LoadLibrary(), GetProcaddress(), 
VirtualProtect()
●
Kill process if it looks malicious
Code
.NET Runtime
AMSI.dll
Process
ntdll.dll
av.dll
Usermode hooks
45
RAT Development
06/01/2022
Kernel32.dll
NTDLL.DLL
Syscall
CreateProcessA()
VirtualAlloc()
WriteProcessMemory()
Usermode Hooks
46
RAT Development
06/01/2022
Kernel32.dll
NTDLL.DLL (Patched, UMH)
Syscall
CreateProcessA()
VirtualAlloc()
WriteProcessMemory()
AV.dll
Usermode Hooks
●
Map a DLL in each process
●
Patch ntdll.dll to jump first to the av.dll
●
Av.dll scores invocations
●
Kill process if it looks malicious
47
RAT Development
06/01/2022
Kernel32.dll
NTDLL.DLL (Un-Patched)
Syscall
CreateProcessA()
VirtualAlloc()
WriteProcessMemory()
AV.dll
Usermode Hooks
●
Restore ntdll.dll from disk
●
Uses
○
VirtualAlloc, 
WriteProcessMemory 
48
RAT Development
06/01/2022
Kernel32.dll
NTDLL.DLL (Un-Patched)
Syscall
CreateProcessA()
VirtualAlloc()
WriteProcessMemory()
AV.dll
Usermode Hooks
●
Restore ntdll.dll from disk
○
Using direct syscalls
49
RAT Development
06/01/2022
To execute managed code:
●
Patch AMSI
○
So our .NET tools dont get detected
○
(AMSI-patch technique)
●
Patch NTDLL.dll
○
So our “Patch AMSI” does not get detected
○
(Reflexxion technique)
●
Using direct syscalls
○
So our “Patch NTDLL.dll” does not get detected
○
(Syswhisper technique)
●
(Obfuscate direct syscall invocation)
Executing managed code technique
Donut + Reflexxion
50
RAT Development
06/01/2022
Demo: Remote .NET execution
ID: T1055: Process Injection
ID: T1620: Reflective Code Loading
ID: T1106: Native API
51
RAT Development
06/01/2022
Develop 
your own
RAT
EDR
Evasion
52
RAT Development
06/01/2022
SOC - Security Operations Center
aka Blue Team, aka CDC, aka D&R (Detection & Response)
SOC
53
RAT Development
06/01/2022
Monitor endpoint
Collect alarms (e.g. from AV’s)
Collect events (e.g. from sysmon or EDR agents)
●
Rule based detection (e.g. lolbins)
●
AI based detection
Dispatch to Analysts
EDRs
54
RAT Development
06/01/2022
Steahlthily execute a EXE
●
As genuine, non-malicious process
●
Basically EXE path spoofing
Process hollowing:
●
“Fancy” process injection
●
Start a non-malicious process
●
Replace its content with another EXE/PE
●
Resume process
Process hollowing
55
RAT Development
06/01/2022
Process injection:
●
OpenProcess to get the process information
●
VirtualAllocEx to allocate some memory inside the process for the shellcode
●
WriteProcessMemory to write the shellcode inside this space
●
CreateRemoteThread to tell the process to run the shellcode with a new thread
Process hollowing:
●
CreateProcessA to start a new process. The flag 0x4 is passed to start it suspended, just before it 
would run its code.
●
ZwQueryInformationProcess to get the address of the process's PEB (process environment block)
●
ReadProcessMemory to query the PEB for the image base address
●
ReadProcessMemory again to read from the image base address (loading in the PE header for 
example)
●
WriteProcessMemory to overwrite the memory from the code base address with shellcode
●
ResumeThread to restart the suspended process, triggering the shellcode.
Source: https://github.com/ChrisPritchard/golang-shellcode-runner
Process hollowing
56
RAT Development
06/01/2022
0
2^64
Code
Kernel32.dll
NTDLL.DLL
av.dll
Syscall
VirtualAlloc()
VirtualAlloc()
VirtualAlloc()
Again UMH bypass
57
RAT Development
06/01/2022
0
2^64
Code
Kernel32.dll
NTDLL.DLL
av.dll
Syscall
VirtualAlloc()
VirtualAlloc()
Again UMH bypass
58
RAT Development
06/01/2022
Demo: Process Hollowing
ID: T1055.012 “Projess Injection: Process Hollowing”
59
RAT Development
06/01/2022
Demo: Copy First
ID: T1036.003 Masquerading: Rename System Utilities
60
RAT Development
06/01/2022
Develop 
your own
RAT
Summary
EDR/AV Evasion
61
RAT Development
06/01/2022
RAT
Tools
Hide RAT
(signatures)
Hide Tools
(signatures)
Hide Tools Execution
(UMH, EDR)
Security product defense
62
RAT Development
06/01/2022
malware.exe
Domain.ch
1.2.3.4
net.exe
cmd.exe
wmic.exe
lolbins
mimikatz.exe
adfind.exe
Hacking tools
AV
EDR
exec
Process Injection
Process Hollowing
Shellcode Execution
Signatures
Usermode Hooks
Events
powershell.exe
dotnet.exe
Malicious scripts
AMSI
http
63
RAT Development
06/01/2022
Command executions
Execute
cmd.exe
commandline
Powershell
commandline
LOL EXE’s
copyfirst
hollow
remote 
.NET, Powershell
Sacrificial process
AMSI bypass
64
RAT Development
06/01/2022
Running shellcode techniques:
●
CreateFiber
●
CreateProcess
●
CreateProcessWithPipe
●
CreateRemoteThread
●
CreateRemoteThreatNative
●
CreateThread
●
CreateThreadNative
●
EarlyBird
●
EtwpCreateEtwThreadEx
●
RtlCreateUserThread
●
Syscall
●
UuidFromStringA
●
NtQueueApcThread
Fix or bypass ntdll.dll hooks:
●
Syswhisper 1, 2, 3
○
Direct syscalls
●
Hell’s Gate
○
Direct syscalls
●
BananaPhone
○
Like hells gate, but more go, more banana
●
Firewalker
○
Single-step ntdll.dll calls, find jmp and live-patch 
code
●
Parallel-asis
○
Using windows parallel loader to load ntdll.dll 
again
●
ScareCrow
○
Overwrite ntdll from disk (framework, detected 
now?)
●
Reflexxion
○
Overwrite ntdll from disk 
○
Using direct system calls
○
Go implementation
Security product defense
65
RAT Development
06/01/2022
Confuse EDR’s
PE:
●
Process Ghosting
○
Temporary PE
●
Process Herpaderping
○
PE in transacted state
●
Process Doppelgänging
○
PE in delete pending state 
(TxF)
●
Process Reimaging
○
Cache syncronization issue
●
Module Stomping
●
Function Stomping
Security product defense
Memory scanning evasion:
●
Gargoyle
●
DeepSleep
66
RAT Development
06/01/2022
●
SOCKS5 proxy support
○
Dont run tools on the endpoint
○
Run tools on your analyst workstation
○
Just proxy everything through the RAT
■
Burp, nmap, RDP, SSH, Impacket for SMB attack
●
Todo: Implement OctoPwn Dolphin agent
○
See talk yesterday “Hacking from the browser” from Tamas Jos
Avoid tools, proxy traffic
Open features
67
RAT Development
06/01/2022
Develop 
your own
RAT
Summary
68
RAT Development
06/01/2022
●
AV & EDR can be bypassed easily
○
Mostly defender in this presentation
●
Lots of scanning and detection still happen in userspace
○
Even in our own address space!
●
This may change in the future?
○
Kernel mode hooks
○
Mini-filter
●
Move to lower level better logging
Security products bypass summary
69
RAT Development
06/01/2022
Is it worth writing your own RAT as a RedTeam?
●
Probably smarter to use, patch, or update existing open source one
●
Or just write your own Agent
○
Re-use existing C2
Is it worth it as an enthusiast?
●
Absolutely
DIY?
70
RAT Development
06/01/2022
RAT Development for RedTeaming
●
Analyse SOC Usecases
●
Define required features
●
Think about architecture
●
Steal Copy from existing projects
●
Time required: Months++
●
Features:
○
Execute stuff
○
Upload, download files
DIY for RedTeams
71
RAT Development
06/01/2022
Sliver: https://github.com/BishopFox/sliver (Go)  proxyplease library)
File upload/download
●
Size…
●
Dont wanna log it completely?
Communication
●
Go, Websockets require strongly typed 
data
●
Request arguments, response data is 
variable
●
Dict type key/value
Smartness
●
Put smartness into Client, C2, Or UI?
Windows mischief
●
Mimikatz integration
●
LSASS dumping
●
Windows process token
●
Pass the hash
SOCKS Proxy support
CI/CD integration
Not covered features
77
RAT Development
06/01/2022
Oh no (Sophos)
78
RAT Development
06/01/2022
Donut
●
Compile .NET/EXE to Shellcode
●
Execute shellcode in new process
C2
Donut
RAT
Donut
Simple
Stupid
EXE
shellcode
A typical phishing attack
Docx
Makro: exec bat
bat
Write vbs
Execute vbs
Powershell script
Download malware / RAT
Phishing Mail
Vbs
Download Powershell script
Execute powershell script
80
RAT Development
06/01/2022
Dev Envrionment: 
●
Proxmox @ Hetzner
●
Wireguard
●
Caddy
●
Visual Studio Code with remote development server
81
RAT Development
06/01/2022
●
EDRs collect data from endpoints and send them for storage and 
processing in a centralised database. There, the collected events, binaries 
etc., will be correlated in real-time to detect and analyse suspicious activities 
on the monitored hosts. Thus, EDRs boost the capabilities of SOCs as they 
discover and alert both the user and the emergency response teams of 
emerging cyber threats.
●
EDRs are heavily rule-based; nevertheless, machine learning or AI methods 
have gradually found their way into these systems to facilitate finding new 
patterns and correlations
Source: An Empirical Assessment of Endpoint Security Systems Against Advanced Persistent Threats Attack Vectors
EDRs
Operational security
●
Operational security
○
Make connectors authenticated (api-key)
○
Make backend authenticated (admin-api-key)
○
Encrypt all communication
○
(Sign packets)
●
Protocol Mischief
○
Assuming BlueTeam reversed found malware
○
Snoop on broadcasted commands (identify further IOC’s)
○
Inject commands for other clients?
○
Accessing commands from other clients?
○
Access uploaded data (from client, or further attack tools)?
○
Flood server with fake answers, making it unusable?
83
RAT Development
06/01/2022
Why write a RAT?
BloodHoundGang slack
84
RAT Development
06/01/2022
Downstream / Wingman
RAT.exe
Wingman.exe
SMB Pipes
Files
TCP Socket
(loyal) Wingman.exe
85
RAT Development
06/01/2022