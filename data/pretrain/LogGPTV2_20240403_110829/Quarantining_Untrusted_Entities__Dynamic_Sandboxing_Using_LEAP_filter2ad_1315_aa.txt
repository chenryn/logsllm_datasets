title:Quarantining Untrusted Entities: Dynamic Sandboxing Using LEAP
author:Manigandan Radhakrishnan and
Jon A. Solworth
Quarantining Untrusted Entities: Dynamic Sandboxing using LEAP
Manigandan Radhakrishnan
University of Illinois at Chicago
PI:EMAIL
Jon A. Solworth∗
University of Illinois at Chicago
PI:EMAIL
Abstract
Jails, Sandboxes and other isolation mechanisms limit
the damage from untrusted programs by reducing a pro-
cess’s privileges to the minimum. Sandboxing is designed to
thwart such threats as (1) a program created by an attacker
or (2) an input crafted to exploit a security vulnerability in
a program. Examples of the later include input containing
interpreted code or machine language to be injected via a
buffer overﬂow.
Traditionally, sandboxes are created by an invoking pro-
cess. This is effective for (1) but only partially so for (2).
For example, when a ﬁle is downloaded by a browser or
processed as a mail attachment, the invoking process can
sandbox it. However, sandboxing protections can be cir-
cumvented when the ﬁle is copied outside the sandbox. The
problem is that traditional sandboxes do not provide com-
plete mediation.
We introduce dynamic sandboxes, and show how even
when data is saved and/or copied, sandboxing protections
are not lost. In addition, and in contrast to traditional sand-
box implementations, dynamic sandboxes are implemented
using general purpose access controls. Not only does this
provide a more ﬂexible sandbox mechanism, and enable
complete mediation, but these same primitives can be used
to build other (non-sandbox) authorization policies.
1. Introduction
Traditional operating systems have evolved towards
large, ﬂat address spaces and widely accessible resources
because of their convenience and simplicity. Widely used
(discretionary) access controls have similarly been ﬂat—
allowing or denying operations based solely on the user on
whose behalf the process executes. While this removes bar-
riers to implementing applications and provides ﬂexibility,
∗This work was supported in part by the National Science Foundation
under Grants No. 0627586 and 0551660. Any opinions, ﬁndings and con-
clusions or recommendations expressed in this paper are those of the author
and do not necessarily reﬂect the views of the National Science Founda-
tion.
it also increases the danger when, all too often, an applica-
tion is attacked.
Even if applications could be written without security
ﬂaws, this ﬂat access control model is problematic as ap-
plications come from many sources, not all of which can be
trusted. Unfortunately, in this environment the least trusted
programs run with the same permissions as the most trusted;
the most frivolous programs can interfere with the most sen-
sitive applications.
Sandboxes and Jails limit which resources are visible to
a process. Resources which are not visible can neither be
observed nor operated upon, and hence are protected from
the actions of the sandboxed processes. Thus sandboxing
increases both conﬁdentiality and integrity.
One of the purposes of sandboxing is to reduce the privi-
leges provided to an executable, and thus to implement least
privilege. If an executable has security holes, then sandbox-
ing limits the damage resulting from an attack.
But it is not always appropriate to accord a ﬁxed set of
privileges to an executable. One basis for varying the per-
mission is the user who owns the process, which is easily
handled by existing sandbox mechanisms. Another basis
for varying the privileges is the data on which the process
executes.
If this data comes from an untrusted source—
such as an email attachment or a web download—it may be
necessary to curtail the processes’ privileges.
Of particular concern are code injection attacks. Con-
sider a data ﬁle which is read by an executable. If that data
ﬁle contains either
• interpreted code (and the executable contains a suitable
interpreter) or
• a buffer overﬂow attack (and the executable is suscep-
tible),
then the execution may be completely determine by the
“data” ﬁle. As we shall see, sandboxing mechanisms at-
tempt, but do not always succeed, to attenuate privileges in
this case.
Sandboxes are typically entered by a helper application
(such as a PDF viewer), and may be deﬁned solely by
the helper class or by the program (e.g., browser) which
launches the helper. The mechanism for invoking the sand-
box depends on how the executable is launched. By launch-
ing the sandboxed application when invoked form a mail
user agent or browser, unvetted ﬁles are caught at the
source.
But the mechanism for invoking traditional sandboxes is
incomplete. Thus there are cases where either the sandbox
is not invoked, or the privileges not appropriately attenu-
ated. The reason for this incompleteness is that sandbox
protections are uni-directional1. That is, while the sand-
boxed process is prevented from seeing outside its sandbox,
processes outside the sandbox can see into the sandbox.
Hence, ﬁles stored in the sandbox can be copied outside the
sandbox by an external process and thus escape sandbox
protections. Indeed, it is desirable to do so, as users regu-
larly incorporate outside objects (e.g., papers, news stories,
and other publicly available material) into the things they
create, for example by downloading from the web or saving
an email attachment. Thus sandboxing protections can de-
pend on how the ﬁle is accessed rather than whether the ﬁle
is accessed. The problem is a lack of complete mediation.
For an application to be suitably sandboxed, the sand-
box should depend on both the executable and the sources
of its data. We have designed and implemented dynamic
sandboxes which quarantine untrusted sources and enable
complete mediation. Dynamic sandboxes
• enable each ﬁle to be labeled with its trust (or origin)
and
• ensure that this labeling is maintained through infor-
mation ﬂow rules, and either
– prevent untrusted data from getting near sensitive
executables (those with important privileges) or
– reduce the privilege of an executable when it
reads untrusted data.
Because of the need for complete mediation, we have
constructed dynamic sandboxing on top of a general pur-
pose mandatory access control model called LEAP (Lan-
guage for Expressing Authorization Properties). (Dynamic
sandboxing is often built on special purpose mechanisms,
but these do not ensure the mediation required.) LEAP al-
lows the high level speciﬁcation of access controls, which
the operating system enforces at runtime.
In addition to
complete mediation, this approach enables the LEAP prim-
itives to be used to construct other non-sandbox protections
and also results in highly customizable sandboxes.
LEAP was developed as a high level speciﬁcation of op-
erating system level authorizations. It has the following ad-
vantages:
1It is possible to build bidirectional protections of such a mechanism by
essentially sandboxing everything, but this results in a static partitioning.
1. The operating systems enforcement called KernelSec
domains [34] is automatically generated [23] from the
LEAP speciﬁcation.
2. It can be automatically analyzed [42, 41].
3. It is succinct and for the most part stateless and hence
is (relatively) easy to read.
4. It supports administrative controls [43].
Properties (1) and (2) distinguish it from RBAC [37], while
Properties (3) and (4) distinguish it from Type Enforcement.
Another issue with traditional sandbox mechanisms, is
that they are not widely used. We therefore have paid par-
ticular attention to the complexity of use, by having the
mechanism adapt to the user (rather than requiring the user
to adapt to the mechanism). Dynamic sandboxes are in-
voked automatically and are transparent to the user. Dy-
namic sandboxes can be conﬁgured by the system adminis-
trator (or distribution packager) who can make appropriate
tradeoffs of usability vs. protections.
The contributions of this paper are two-fold: the intro-
duction of a new sandbox mechanism with more complete
mediation and the demonstration of the ﬂexibility of LEAP
speciﬁcations.
The remainder of the paper is organized as follows. Sec-
tion 2 describes how to deﬁne sandboxes in LEAP and pro-
vides an example of such a sandbox; Section 3 describes
the implementation of dynamic sandboxes at the operating
systems level, including performance. Section 4 describes
related work. Finally, in Section 5 we conclude.
2. Dynamic Sandboxes
In this section, we show how dynamic sandboxes can be
used to quarantine objects of dubious origin. To illustrate
this, we shall describe a mail user agent, like Thunderbird,
in which mail attachments can be viewed using helper appli-
cations. In a full system, our example would be expanded
to include many different helper applications (e.g., image
viewers, postscript interpreters, video players, etc.) as well
as different client applications (e.g., browsers, RSS readers,
etc.).
We describe the quarantine mechanism by providing a
high level speciﬁcation for a dynamic sandbox. In LEAP,
ﬁles are labeled. Downloaded content is therefore differ-
ently labeled, and treated, than other ﬁles. The quarantine
mechanism ensures that any process that reads ﬁles contain-
ing downloaded content is suitably sandboxed. This content
may then be integrated with the other ﬁles under controlled
circumstances, for example by: certiﬁers (which relabel in-
nocuous content) and scrubbers (which remove dangerous
content). An example of a scrubber is antivirus software.
Unlike traditional sandboxes, dynamic sandboxes ensure
the isolation of tainted information even if the information
has been copied between ﬁles or the information is inte-
grated from different sources. This requires that dynamic
sandboxes use information ﬂow to track ﬁle sources.
Information ﬂow implies that objects are labeled with
their taintedness, so that the propagation of information can
be tracked. Unfortunately, pure Discretionary Access Con-
trol (DAC) authorization models cannot track such infor-
mation as they allow a user to arbitrarily change a label.
And if a program could arbitrarily change labels, this would
allow—either accidentally or on purpose—the evasion of
sandbox protections. Hence, pure DAC models are insufﬁ-
cient for dynamic sandboxes.
While tracking information ﬂows is essential, it is im-
portant that sufﬁcient ﬂexibility be maintained to balance
off protections vs. usability.
1. Dynamic sandboxes need to be able to remove the
“taint” of the input before allowing unrestrictive use
of a ﬁle’s contents. For example, a ﬁle from a trusted
source—even if sent by email—should be able to es-
cape its tainted label and be freely integrated with other
ﬁles.
2. Different programs have different susceptibility to at-
tack, and the mechanisms will need to account for that.
Unlike traditional sandboxes, dynamic sandboxes need
to be tightly integrated with the operating system’s autho-
rization model. First, so that the labeling is consistently
maintained inside and outside the sandbox. And second,
to cleanly integrate privilege attenuation when accessing
tainted ﬁles.
Although we shall describe one particular, but very use-
ful, sandbox scenario we believe that it is necessary to allow
the system administrator to tradeoff the protections vs. the
usability of the system. This means that the resulting system
needs to be very ﬂexible. (Indeed ﬂexibility appears to be
a major reason why pure DAC systems continue to be used
long after the attack threat has overtaken them.) We pro-
vide the needed ﬂexibility here in a high level authorization
speciﬁcation language, which we describe next.
2.1. LEAP
LEAP is a language for describing a broad range of
authorizations (it was originally called SPBAC) [42, 43].
LEAP has evolved to now include aspects (§ 2.1.1) and tran-
sitions on using privileges (§ 2.1.3). These LEAP mecha-
nisms are general, in that none of them are used solely to
implement dynamic sandboxes—they all have other uses.
We include a short description of LEAP here for complete-
ness, and then use LEAP to describe how to implement dy-
namic sandboxes.
A LEAP speciﬁcation consists of (1) users and their sub-
divisions called aspects, (2) groups, (3) labels, and (4) per-
missions. Each object—such as a ﬁle—has a single label by
which permissions to that object are determined.
2.1.1 Groups, users, and aspects
Each individual is represented as a user, denoted u. Each
user is further divided into aspects, denoted u0, u1, . . . , un;
the aspects of a user are partially ordered. If an aspect ui ≥
uj then aspect ui has all the privileges that uj has (and will
generally have additional privileges).
Aspects enable
• location to be a factor in determining permissions.
Hence, a person logging in from work may have more
permissions than when logging in from home.
• a user to isolate some of their processes from others.
For each group g, there is a set sg which contains at
most one aspect ui for each user u. We say that uj ∈ g
iff ∃ui∈sg uj ≥ ui; that is, uj is a member of g iff some
aspect less than or equal to uj is in sg. Hence, each group
can explicitly contain one ui per u and implicitly contains