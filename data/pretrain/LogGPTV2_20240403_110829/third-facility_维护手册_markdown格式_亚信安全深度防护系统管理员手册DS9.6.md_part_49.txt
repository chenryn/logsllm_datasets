### 引号和反斜杠示例
- **引号**: `HKLM\Software\Sample\"Quotes"`
- **反斜杠**: 
  - 单反斜杠: `back\slash`
  - 双反斜杠: `back\\slash` 和 `trailing\\`
  - 注册表路径: `HKLM\Software\Sample\back\\slash` 和 `HKLM\Software\Sample\trailing\\`
- **@符号**: `HKLM\Software\Sample\@`

### 子元素
- **Include**
- **Exclude**

有关 `include` 和 `exclude` 的允许属性和子元素，请参阅第 218 页的详细说明。

### ServiceSet
**ServiceSet** 元素代表一组服务（仅限 Windows）。服务按“服务名称”标识，与服务管理工具中显示的“名称”列不同。服务名称可在服务属性中看到，通常比“名称”列显示的值简短，“名称”列中实际上是服务的“显示名称”。例如，客户端的服务名称为 `ds_agent`，显示名称为“亚信安全服务器深度安全防护系统客户端”。

#### 标记属性
以下是相对于完整性监控规则所监控的实体的标记本身的 XML 属性：
- **onChange**: 将受实时监控
  - 必需: 否
  - 缺省值: `false`
  - 允许值: `true`, `false`

#### 实体集属性
以下是可由完整性监控规则监控的实体的属性：
- **Permissions**: 采用 SDDL 格式的服务的安全描述符。
- **Owner**: 服务所有者的用户 ID。
- **Group**: 服务所有者的组 ID。
- **BinaryPathName**: Windows 用于启动服务的路径和可选命令行自变量。
- **DisplayName**: 服务“属性”面板中显示的服务的“显示名称”。
- **Description**: “服务”面板中显示的描述。
- **State**: 服务的当前状态。以下状态之一：已停止、正在启动、正在停止、正在运行、继续挂起、暂停挂起、已暂停。
- **StartType**: 服务的启动方式。以下状态之一：自动、已禁用、手动。
- **LogOnAs**: 服务进程运行时将登录的帐户名称。
- **FirstFailure**: 服务首次不成功时执行的操作。格式为 `"delayInMsec,action"`，操作为 `None`、`Restart`、`Reboot`、`RunCommand` 之一。
- **SecondFailure**: 服务第二次不成功时执行的操作。格式同上。
- **SubsequentFailures**: 服务第三次或随后几次不成功时执行的操作。格式同上。
- **ResetFailCountAfter**: 在无故障情况下将故障计数重置为 0 之前经过的时间（以秒为单位）。
- **RebootMessage**: 重新启动以响应 "Reboot" 服务控制器操作之前广播至服务器用户的消息。
- **RunProgram**: 为响应 `RunCommand` 服务控制器操作要执行的进程的完整命令行。
- **DependsOn**: 服务所依赖的组件的逗号分隔列表。
- **LoadOrderGroup**: 此服务所属的加载顺序组。系统启动程序使用加载顺序组按指定顺序（相对于其他组）加载服务的组。加载顺序组列表包含在以下注册表值中：`HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ServiceGroupOrder`。
- **ProcessId**: 托管服务的进程的数字 ID。单个 Windows 进程中可能存在多个服务，但对于在自身进程中运行的服务，监控此属性将允许系统记录服务重新启动。

#### 速记属性
- **STANDARD**: `Permissions`、`Owner`、`Group`、`BinaryPathName`、`Description`、`State`、`StartType`、`LogOnAs`、`FirstFailure`、`SecondFailure`、`SubsequentFailures`、`ResetFailCountAfter`、`RunProgram`、`DependsOn`、`LoadOrderGroup`、`ProcessId`

**Key** 是服务的名称，未必与服务管理工具中显示的“名称”列相同（该工具显示服务的“显示名称”）。服务名称可在服务属性中看到，通常比“名称”列显示的值简短。

**注意**: 这并不是层次结构实体集。模式仅适用于服务名称。因此，`**` 模式并不适用。

### UserSet
**UserSet** 元素代表一组用户。在 Windows 系统上，该元素在系统中的本地用户上工作—与“本地用户和组”MMC 嵌入式管理单元显示的用户相同。请注意，只有当 DSA 在除域控制器外的设备上运行时，这些才是本地用户。在域控制器上，`UserSet` 元素将枚举所有域用户，这可能不适用于极大型的域。

在 Unix 系统上，受监控的用户为 `getpwent_r()` 和 `getspnam_r()` API 已配置为要返回的用户。

#### 标记属性
以下是相对于完整性监控规则所监控的实体的标记本身的 XML 属性：
- **onChange**: 将受实时监控
  - 必需: 否
  - 缺省值: `false`
  - 允许值: `true`, `false`

#### 实体集属性
以下是可监控的实体属性：

##### 通用属性
- **cannotChangePassword**: `True`/`false`，表示是否允许用户更改其密码。
- **disabled**: `True`/`false`，表示是否已禁用帐户。在 Windows 系统上，这反映用户的“已禁用”复选框。在 Unix 系统上，如果用户的帐户已过期，或密码过期且已超出更改密码的非活动宽限期，则该属性为 `true`。
- **fullName**: 用户的显示名称。
- **groups**: 用户所属的组的逗号分隔列表。
- **homeFolder**: 主文件夹或目录的路径。
- **lockedOut**: `True`/`false`，表示用户是否已被锁定（明确锁定或由于密码尝试不成功次数过多）。
- **passwordHasExpired**: `True`/`false`，表示用户密码是否已过期。请注意，在 Windows 上，此属性仅在 Windows XP 或更高版本的操作系统上可用。（不适用于 AIX）
- **passwordLastChanged**: 上次更改用户密码的时间戳。此属性由 DSA 记录为 1970 年 1 月 1 日 (UTC) 以来的毫秒数 — 亚信安全服务器深度安全防护系统管理中心基于该值按本地时间呈现时间戳。请注意，在 Unix 平台上，此属性解析为一天，因此所呈现时间戳的时间部分没有意义。（在 AIX 中，N/A）
- **passwordNeverExpires**: `True`/`false`，表示密码是否不过期。
- **user**: 操作系统已知用户的名称。例如，`Administrator` 或 `root`。

##### 仅限 Windows 的属性
- **description**: 用户所属的主组。
- **homeDriveLetter**: 网络共享作为用户主文件夹映射到的驱动器盘符。
- **logonScript**: 用户每次登录时执行的脚本的路径。
- **profilePath**: 使用漫游或强制 Windows 用户配置文件时的网络路径。

##### 仅限 Linux 的属性
- **group**: 用户所属的主组。
- **logonShell**: 用户的 shell 进程的路径。
- **passwordExpiredDaysBeforeDisabled**: 用户密码过期后到禁用帐户之间经过的天数。（在 AIX 中，N/A）
- **passwordExpiry**: 用户帐户过期且被禁用的日期。
- **passwordExpiryInDays**: 必须更改用户密码前经过的天数。
- **passwordMinDaysBetweenChanges**: 更改密码所允许的最小间隔天数。
- **passwordWarningDays**: 用户密码过期之前开始警告用户的天数。

#### 速记属性
- **标准型**: `cannotChangePassword`、`disabled`、`groups`、`homeFolder`、`passwordHasExpired`、`passwordLastChanged`、`passwordNeverExpires`、`user`、`logonScript`（仅限 Windows）、`profilePath`（仅限 Windows）、`group`（仅限 Linux）、`logonShell`（仅限 Linux）、`passwordExpiryInDays`（仅限 Linux）、`passwordMinDaysBetweenChanges`（仅限 Linux）

**Key** 代表用户名。这并不是层次结构实体集。模式仅适用于用户名。因此，`**` 模式并不适用。

### WQLSet
**WQLSet** 元素描述了来自 Windows Management Instrumentation (WMI) WQL 查询语句的结果集。通过 WQL，可以对多种不同的对象类进行类似于 SQL 的查询，查询结果将形成包含多行的表，其中每一行代表一个对象，每一列代表特定对象属性的值。

**注意**: 许多 WMI 查询占用大量时间和计算机资源。一不小心就会执行需要几分钟才能完成并返回数千行的查询。强烈建议在 `WQLSet` 中使用查询之前使用程序（如 PowerShell 或 WMI Explorer）测试所有查询。

#### 属性
- **namespace**: 代表有效 WMI 命名空间的字符串值。
  - 必需: 是
  - 缺省值: N/A
  - 示例: `"root\cimv2"` 是查询 Windows 操作系统对象时最常用的命名空间，但也可使用其他命名空间，如 `"root\directory\LDAP"` 和 `"root\Microsoft\SqlServer\ComputerManagement"`。请参阅此处，了解枚举给定主机上可用 WMI 命名空间的小脚本（名为 `GetNamespaces.vbs`）。
- **wql**: 一个有效的 WQL 字符串。
  - 必需: 是
  - 缺省值: N/A
  - 注意: 查询必须包含每个返回的对象的 `__Path` 属性；客户端在存储和报告结果时将 `__Path` 属性用作实体键，因此每个返回的 WMI 对象都必须包含 `__Path`。如果使用诸如 `SELECT * FROM ...` 的查询字符串，将提供 `__Path` 属性；但是，如果使用更具选择性的查询，如 `SELECT Name FROM ...`，您必须通过将查询编写为 `SELECT __Path,Name FROM ...` 明确包含 `__Path`。
- **onChange**: 是否应当实时监控返回的文件。
  - 必需: 否
  - 缺省值: `false`
  - 允许值: `true`, `false`
- **provider**: 选择性指定要使用的备用 WMI 命名空间提供程序。
  - 必需: 否
  - 缺省值: 无
  - 目前，只有组策略查询需要/支持此属性，且 `RsopLoggingModeProvider` 是唯一支持的值。组策略查询是特殊的查询，因为建议使用 `RsopLoggingModeProvider` 创建计算机上的策略数据的快照。如果创建策略数据的快照，则可以在系统刷新策略期间覆盖或删除一组一致性数据之前根据该数据执行查询。创建快照实际上创建了新的 WMI 命名空间，因此在 `WQLSet` 中使用 `provider="RsopLoggingModeProvider"` 时，`namespace` 属性应指定要添加到所创建命名空间的后缀。例如，由 `WMI` 命名空间 `RsopLoggingModeProvider` 创建的典型的临时命名空间为 `\\.\Root\Rsop\NS71EF4AA3_FB96_465F_AC1C_DFCF9A3E9010`。指定 `namespace="Computer"` 以查询 `\\.\Root\Rsop\NS71EF4AA3_FB96_465F_AC1C_DFCF9A3E9010\Computer`。