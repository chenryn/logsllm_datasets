are susceptible to persistent MITM attacks.
We then investigated the behavior when attempting priv-
ileged access. Browsers labeled “ask once” have especially
high risk of privilege abuse because once resource access is
permitted, it will not require conﬁrmation for accesses after
that. For browsers with the label “selective”, users are asked
to select whether or not to remember the permitted state, and
the attack succeeds only if a user selects yes.
10
0306090120150180210240270300330360Elapsed Time (Days)0.00.20.40.60.81.0Fraction of Available Fingerprintssession cookie alivesession cookie removedTABLE VII.
DIFFERENCES IN RESOURCE ACCESS BEHAVIOR FOR
EACH BROWSER. BEHAVIORS HIGHLIGHTED IN BOLD ARE HIGHLY
VULNERABLE. SW STANDS FOR SERVICE WORKER AND PM STANDS FOR
PASSWORD MANAGER.
III-B1
SW
Browser
available
Chrome
available
Firefox
unavailable
IE
available
Edge
available
Safari
available
Opera
available
Brave
Chrome-M available
AppCache
available
available
available
available
available
available
available
available
III-B2
Privilege
ask once
selective
selective
ask once
selective
ask once
ask once
ask once
III-B3
PM
autoﬁll
autoﬁll
autoﬁll
autoﬁll
manual
autoﬁll
manual
autoﬁll
III-B4 & B5
Session Cookie
keep by conﬁg
keep by conﬁg
never keep
never keep
keep by conﬁg
keep by default
keep by default
keep by default
Regarding password managers, browsers labeled “autoﬁll”
automatically ﬁll the password ﬁeld with a saved password
upon page load, making credential theft feasible. On the other
hand, browsers labeled “manual” focus the login form element
but do not ﬁll unless explicitly directed by a user, so the
attack is highly infeasible. Note that the password managers for
Firefox, IE, and Edge do not autoﬁll when multiple credentials
are stored for a single origin. That is, the attack succeeds if the
victim stores only a single credential in the password manager
through single web rehosting. The password manager for
Chrome, Opera, and Chrome-M always autoﬁll the credential
that was used most recently.
Lastly, regarding session cookies, browsers labeled “keep
by default” do not remove session cookies on quitting the
browser. For browsers with “keep by conﬁg,” by changing the
conﬁguration to save tabs on quitting, session cookies will not
be removed. For these two groups, as an attacker will have a
longer opportunity to steal session cookies, there is a higher
risk of session hijacking and history theft. Note that cookies
relayed in web proxy services are mostly session cookies,
so are also vulnerable under this environment. On the other
hand, browsers labeled “never keep” delete session cookies on
quit, which will make website ﬁngerprinting more difﬁcult by
decreasing the number of websites identiﬁed.
V. DISCUSSION
A. Coverage of Our Experiments
In our experiment, we investigated 21 popular web re-
hosting services spanning across our three categories, and we
believe that this coverage should be sufﬁcient for capturing
the overall characteristics of each category. For web translator
and web archive,
the services we chose are those with a
dominant market share, and by their nature, the rest of the
services in these categories are likely to be similar as the
chosen ones. On the other hand, since web proxy services are
often used for anonymization and censorship avoidance, they
may exhibit regional or infrastructural differences, implying
that services in the long-tail are non-negligible; we believe that
our investigation of a wide variety of web proxies including
OSS (Service-α) sheds light on unexplored services based on a
common architecture, i.e., using a single origin to rehost many
websites on different origins.
is that
Another notable point
there exist several web
rehosting services that do not ﬁt into our three categories.
Tor2web [60] rehosts websites deployed on the Onion network
to make them accessible from the public network. GitHack [52]
rehosts user-speciﬁed GitHub ﬁles by giving them appropriate
MIME types, making them renderable by a browser. Zone-
H [72] archives compromised websites and allows users to
conduct security analysis on them. More of such services are
expected to exist, but we believe they are not so signiﬁcant in
terms of user impact. Most importantly, our analysis based on
observation of rehosting rules will be able to check services
that we did not directly cover in this paper. We claim that this
is a broad contribution to the research community and web
service providers.
Finally, we recognize that we did not discuss every possible
attack on web rehosting. Lerner et al. [38] demonstrated that
the iframe feature can be exploited to manipulate archived
websites. This attack is based on the property that the origin
of the iframe’s parent and child pages is uniﬁed in web
archives. The persistent XSS proposed by Steffens et al. [58]
is also useful for compromising web rehosting services. This
is an attack that persistently establishes XSS for websites
that reﬂect the strings contained in cookies or localStorage
without sanitization. Although its ability (inserting JavaScript
into some rehosted websites) is a subset of our persistent
MITM (manipulating the content of all rehosted websites), it is
harder for web rehosting services to defend against persistent
XSS resulting from ﬂaws in the rehosted website, not the web
rehosting service.
B. Human factors
Web rehosting services, with tens of millions of users, have
become quite popular on the modern Internet. In this paper,
we have presented a critical threat that commonly lies within
these services and proved that many services are actually
vulnerable to it. On the other hand, we have not presented
results that support our ﬁndings from the perspective of how
users make use of these services in reality. For example, the
privilege abuse and credential theft threat assume that users
have explicitly granted permissions, such as allowing websites
they have visited in the past through a web rehosting service
to access browser resources or storing credentials in password
manager. We are not certain to what extent this assumption
holds true in reality, but considering the following points,
we believe that it is safe enough to assume that users would
grant permission without suspicion. The required permission
resources are commonly requested by popular websites. For
example, for geolocation information, one of the resources for
which permission is required, is essential for route navigation
and optimization of search results. In addition, the four most
popular password managers have already had over 60 millions
of users [31], and automated password ﬁlling has become a
more common practice [48]. Furthermore, as the web rehosting
service and rehosted page are legitimate websites, it is unlikely
that users who are unaware of the threat may believe that the
rehosted websites are legitimate.
Moreover, the success of some of our attacks, namely
session hijacking and attacks against password managers,
highly depends on whether a user would actually login to
such services through web rehosting. SNSes offering freedom
of speech are high-priority targets in countries with censor-
ship [5], [8], [17], and actually, eight out of eleven popular web
proxies we investigated in this paper advertise their capability
to be compatible with Facebook, which requires users to login.
Considering these points, the use of a web proxy for SNS with
11
a login state to avoid censorship appears to make sense, though
quantitatively showing this tendency would require additional
research.
C. Ethical considerations
As most of the web rehosting services investigated in
this paper were found to be vulnerable to at least one of
our proposed attacks, we have shared the details on the
threat and possible countermeasures with the affected service
providers. Several service providers have responded to us and
are now taking action to address the vulnerabilities we have
demonstrated. Note that we anonymized the service names the
provider asked us not to name in this paper. Additionally, we
are in the process of making proposals to JPCERT/CC [32],
which is a vulnerability coordinator in Japan, to add a topic
on our threat model to their publications such as guidelines
and cheat sheets that promote building secure websites.
VI. DEFENSES
All Attacks. The root cause of these vulnerabilities is that web
resources that are originally designed to be placed in different
origins are mixed into the same origin. A straightforward
solution to this threat would be to not only use a separate
domain name for separating rehosting websites and rehosted
websites, but also generate a different subdomain for each
rehosted website. A major drawback of this solution is that
already-generated URLs, which may be referred from some-
where else, will become invalid. This solution would especially
impact web archive services, as many of the websites archived
are linked from a large number of external websites. The
service to investigate the number of backlinks [43] showed
that the Wayback Machine archives are linked from more than
4 million pages as of September in 2019. Moreover, they may
even be referred from printed publications such as academic
papers and court records [38], making replacement of such
links unrealistic. Redirecting access to an old URL to a new
URL will solve this issue.
Furthermore, as some of the web proxy services listed in
Section IV-A have already been adopted, generating a tentative
URL inaccessible by a third person would be viable mitigation.
This can be implemented in a similar manner as a general
CSRF prevention approach, i.e., by using a POST method
instead of GET method for submitting a URL to a web
rehosting service and authenticating with a token given only
to the user who sent the request. A major drawback of this
approach is that it cannot be applied to web rehosting services
that assume the sharing of generated URLs to a third person
like web archive services.
Switching to a browser’s private mode is an effective
countermeasure that can be taken on the user-side to com-
pletely prevent or mitigate some of our attacks. For example,
service worker and AppCache are disabled in the private
mode of Edge and Firefox. They are enabled in the private
mode of Chromium-based browsers but are deleted on closing
the browser window. In all browsers, password manager is
disabled, and cookies and localStorage are deleted on closing
the browser.
Persistent MITM. To prevent a persistent MITM attack,
we need to restrict the behavior of the service worker and
the AppCache. When requesting for a service worker script,
the browser includes Service-Worker: script in the
request header. A web rehosting server can prevent registration
of a malicious service worker by denying requests having this
header. This obviously would also block the registration of a
legitimate service worker, but none of current web rehosting
services rewrite the URLs used as the argument of a function,
that is, service workers do not function on current web rehost-
ing services/rehosted websites. Thus, this countermeasure can
be adopted without any substantial drawback. For AppCache,
the use of this function is declared by the manifest attribute of
an HTML tag, so force-removing this attribute from rehosted
pages should prevent its abuse.
Privilege Abuse. Any access to a browser resource from a
webpage inside a sandbox-attributed iframe will fail without
raising a permission request. Thus, instead of directly loading
the content of a rehosted page at the top level, loading it
inside a sandbox-attributed iframe would ensure that users do
not grant permission to web rehosting. This has already been
adopted in some services such as Google Translate, though we
are not certain if this is their intended purpose.
Credential Theft. A possible defensive approach for attacks
against password managers is to associate credentials with
domain-path pairs,
this
has been adopted by only a few browsers [7], [59], and
additionally, many web rehosting services specify the URL of
the rehosted website in a query string instead of in the rehosted
URL’s path. Thus, this defense requires not only browser-side
effort but also service-side effort to switch to a path-based
scheme for rehosted URLs.
History Theft. As the history theft attack relies on the
accuracy of website ﬁngerprinting, preventing ﬁngerprinting
is key to preventing the attack. One possible way to prevent
website ﬁngerprinting is to force-remove, from all rehosted
webpages, JavaScript code that invokes access to cookies or
localStorage. This approach is not perfect as exhaustively
detecting obfuscated JavaScript code is known to be difﬁcult.
A more aggressive approach would be to remove all JavaScript
code, but this would likely result in critical deterioration of the
website’s appearance or functionality.
Session Hijacking and Injection. Cookies for managing
login sessions are set via an HTTP Header according to the
rules noted in Section III-C. Therefore, they can be prevented
from being loaded from JavaScript code in rehosted malicious
websites by enabling the HttpOnly attribute. This is a
conventional measure for mitigating session hijacking using
XSS.
instead of just domains. However,
VII. RELATED WORK
A. Intermediary services and their security
While intermediary services ensure users to bypass restric-
tions based on geographic regions or circumvent censorship,
they enable attackers to mount man-in-the-middle attacks at
the vantage points of such services.
HTTP Proxy. The use of open HTTP proxies that allow
access from any user is a popular way to counter restrictions
and censorship, because it
is easy for users to use with
12
minimal browser’s conﬁguration. However, many studies found
evidence that many open HTTP proxies modify web trafﬁc.
Mani et al. disclosed malicious examples of proxies that
modify web trafﬁc in various ways, which include injecting
ads or cryptominer into HTML content, inserting malware into
non-HTML ﬁles, and modifying TLS certiﬁcates [39]. Tsiran-
tonakis et al. found that about 5% of proxies are engaged in
some form of malicious content modiﬁcation, such as injecting
ads, collecting user information, and redirecting the user to
malware pages [62]. End users of HTTP proxies are required
to use end-to-end encryption (e.g., HTTPS everywhere) and
check TLS certiﬁcates to ensure end-to-end integrity.
VPN and Tor. Similar to HTTP proxies, VPNs and Tor
are often used as tools to counter censorship and preserve
users’ privacy, although users are required to install dedicated
software or conﬁgure system settings. A VPN establishes a
virtual point-to-point connection, which is encrypted, between
end users and the remote network. Previous studies showed
evidence of trafﬁc manipulation and information leakage in
many VPN services [29], [33]. Tor is an overlay network
composed of volunteer relay nodes that ensures anonymous
communication (anonymizing the sender of the trafﬁc). Tor
circuits, which are essentially encrypted tunnels, terminate at
exit relays, and the user’s trafﬁc travels all over the Internet
to its ﬁnal destination. Winter et al. developed scanning
modules to provoke Tor exit relays to tamper with or snoop on
their decoy connections and detected malicious, misconﬁgured,
and snifﬁng Tor exit relays [69]. Although VPNs and Tor
have functionalities of encrypted communication and sender
anonymization, malicious intermediary servers inside the ser-
vices are detrimental to the integrity of communication similar
to the case of the HTTP proxy.
Web Rehosting. Web rehosting is also susceptible to the
same problems faced with the use of HTTP proxies, VPNs,
and Tor that malicious intermediary nodes break the integrity
of communication. However, an intermediary node of a web
rehosting service in our threat model, which is not malicious
but vulnerable, is abused by remote attackers and causes a
lack of communication integrity. To the best of our knowledge,
only a few studies have discussed exploiting vulnerable web
rehosting. In 2002, Martin et al. were the ﬁrst to demonstrate
an attack against one of the web rehosting services, namely
SafeWeb [40]. SafeWeb was a web proxy service that had the
functionality to relay cookies and give web pages the same
origin; hence, session hijacking can occur because malicious
JavaScript in the rehosted page can read the cookie of other
rehosted page. Compared to the previous study [40], our
work has made signiﬁcant progress in expanding target web
rehosting services (such as web translators and web archives)
and ﬁnding new attacks, which exploit browser resources from