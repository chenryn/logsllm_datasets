with its own update record. The update records of a transaction are linked by backward pointers in the 
log file because they aren’t usually contiguous.
The NTFS transaction table lists the LSN of the last-logged update record for each noncommitted 
transaction. In this example, the transaction table identifies LSN 4049 as the last update record logged 
for transaction 2. As shown from right to left in Figure 11-63, NTFS rolls back transaction 2.
702
CHAPTER 11
Caching and file systems
...
LSN
4044
LSN
4049
LSN
4045
LSN
4046
LSN
4047
LSN
4048
Transaction 1
Transaction 2
Redo: Allocate/initialize an MFT file record
Undo: Deallocate the file record
Redo: Add the file name to the index
Undo: Remove the file name from the index
Redo: Set bits 3–9 in the bitmap
Undo: Clear bits 3–9 in the bitmap
FIGURE 11-63 Undoing a transaction.
After locating LSN 4049, NTFS finds the undo information and executes it, clearing bits 3 through 
9 in its allocation bitmap. NTFS then follows the backward pointer to LSN 4048, which directs it to 
remove the new file name from the appropriate file name index. Finally, it follows the last backward 
pointer and deallocates the MFT file record reserved for the file, as the update record with LSN 4046 
specifies. Transaction 2 is now rolled back. If there are other noncommitted transactions to undo, NTFS 
follows the same procedure to roll them back. Because undoing transactions affects the volume’s file 
system structure, NTFS must log the undo operations in the log file. After all, the power might fail again 
during the recovery, and NTFS would have to redo its undo operations
When the undo pass of the recovery is finished, the volume has been restored to a consistent state. 
At this point, NTFS is prepared to flush the cache changes to disk to ensure that the volume is up to 
date. Before doing so, however, it executes a callback that TxF registers for notifications of LFS flushes. 
Because TxF and NTFS both use write-ahead logging, TxF must flush its log through CLFS before the 
NTFS log is flushed to ensure consistency of its own metadata. (And similarly, the TOPS file must be 
flushed before the CLFS-managed log files.) NTFS then writes an “empty” LFS restart area to indicate 
that the volume is consistent and that no recovery need be done if the system should fail again imme-
diately. Recovery is complete.
NTFS guarantees that recovery will return the volume to some preexisting consistent state, but not 
necessarily to the state that existed just before the system crash. NTFS can’t make that guarantee be-
cause, for performance, it uses a lazy commit algorithm, which means that the log file isn’t immediately 
flushed to disk each time a transaction committed record is written. Instead, numerous transaction 
committed records are batched and written together, either when the cache manager calls the LFS to 
flush the log file to disk or when the LFS writes a checkpoint record (once every 5 seconds) to the log 
file. Another reason the recovered volume might not be completely up to date is that several paral-
lel transactions might be active when the system crashes, and some of their transaction committed 
records might make it to disk, whereas others might not. The consistent volume that recovery produces 
includes all the volume updates whose transaction committed records made it to disk and none of the 
updates whose transaction committed records didn’t make it to disk.
CHAPTER 11
Caching and file systems
703
NTFS uses the log file to recover a volume after the system fails, but it also takes advantage of an im-
portant freebie it gets from logging transactions. File systems necessarily contain a lot of code devoted 
to recovering from file system errors that occur during the course of normal file I/O. Because NTFS logs 
each transaction that modifies the volume structure, it can use the log file to recover when a file system 
error occurs and thus can greatly simplify its error handling code. The log file full error described earlier 
is one example of using the log file for error recovery.
Most I/O errors that a program receives aren’t file system errors and therefore can’t be resolved 
entirely by NTFS. When called to create a file, for example, NTFS might begin by creating a file record in 
the MFT and then enter the new file’s name in a directory index. When it tries to allocate space for the 
file in its bitmap, however, it could discover that the disk is full and the create request can’t be com-
pleted. In such a case, NTFS uses the information in the log file to undo the part of the operation it has 
already completed and to deallocate the data structures it reserved for the file. Then it returns a disk 
full error to the caller, which in turn must respond appropriately to the error.
NTFS bad-cluster recovery
The volume manager included with Windows (VolMgr) can recover data from a bad sector on a 
fault-tolerant volume, but if the hard disk doesn’t perform bad-sector remapping or runs out of spare 
sectors, the volume manager can’t perform bad-sector replacement to replace the bad sector. When 
the file system reads from the sector, the volume manager instead recovers the data and returns the 
warning to the file system that there is only one copy of the data.
The FAT file system doesn’t respond to this volume manager warning. Moreover, neither FAT nor the 
volume manager keeps track of the bad sectors, so a user must run the Chkdsk or Format utility to pre-
vent the volume manager from repeatedly recovering data for the file system. Both Chkdsk and Format 
are less than ideal for removing bad sectors from use. Chkdsk can take a long time to find and remove 
bad sectors, and Format wipes all the data off the partition it’s formatting.
In the file system equivalent of a volume manager’s bad-sector replacement, NTFS dynamically re-
places the cluster containing a bad sector and keeps track of the bad cluster so that it won’t be reused. 
(Recall that NTFS maintains portability by addressing logical clusters rather than physical sectors.) NTFS 
performs these functions when the volume manager can’t perform bad-sector replacement. When a 
volume manager returns a bad-sector warning or when the hard disk driver returns a bad-sector error, 
NTFS allocates a new cluster to replace the one containing the bad sector. NTFS copies the data that 
the volume manager has recovered into the new cluster to reestablish data redundancy.
Figure 11-64 shows an MFT record for a user file with a bad cluster in one of its data runs as it existed 
before the cluster went bad. When it receives a bad-sector error, NTFS reassigns the cluster containing 
the sector to its bad-cluster file, BadClus. This prevents the bad cluster from being allocated to an-
other file. NTFS then allocates a new cluster for the file and changes the file’s VCN-to-LCN mappings to 
point to the new cluster. This bad-cluster remapping (introduced earlier in this chapter) is illustrated in 
Figure 11-64. Cluster number 1357, which contains the bad sector, must be replaced by a good cluster.
704
CHAPTER 11
Caching and file systems
Standard
information
0
1
2
1355
1356
1357
File name
Data
Bad
3
4
5
1588
1589
1590
VCN
User
file
LCN
1355
1588
3
3
0
3
Starting
VCN
Starting
LCN
Number of
clusters
FIGURE 11-64 MFT record for a user file with a bad cluster.
Bad-sector errors are undesirable, but when they do occur, the combination of NTFS and the 
volume manager provides the best possible solution. If the bad sector is on a redundant volume, 
the volume manager recovers the data and replaces the sector if it can. If it can’t replace the sector, 
it returns a warning to NTFS, and NTFS replaces the cluster containing the bad sector.
If the volume isn’t configured as a redundant volume, the data in the bad sector can’t be recovered. 
When the volume is formatted as a FAT volume and the volume manager can’t recover the data, read-
ing from the bad sector yields indeterminate results. If some of the file system’s control structures re-
side in the bad sector, an entire file or group of files (or potentially, the whole disk) can be lost. At best, 
some data in the affected file (often, all the data in the file beyond the bad sector) is lost. Moreover, the 
FAT file system is likely to reallocate the bad sector to the same or another file on the volume, causing 
the problem to resurface.
Like the other file systems, NTFS can’t recover data from a bad sector without help from a volume 
manager. However, NTFS greatly contains the damage a bad sector can cause. If NTFS discovers the 
bad sector during a read operation, it remaps the cluster the sector is in, as shown in Figure 11-65. If the 
volume isn’t configured as a redundant volume, NTFS returns a data read error to the calling program. 
Although the data that was in that cluster is lost, the rest of the file—and the file system—remains 
intact; the calling program can respond appropriately to the data loss, and the bad cluster won’t be 
reused in future allocations. If NTFS discovers the bad cluster on a write operation rather than a read, 
NTFS remaps the cluster before writing and thus loses no data and generates no error.
The same recovery procedures are followed if file system data is stored in a sector that goes bad. 
If the bad sector is on a redundant volume, NTFS replaces the cluster dynamically, using the data 
recovered by the volume manager. If the volume isn’t redundant, the data can’t be recovered, so NTFS 
sets a bit in the Volume metadata file that indicates corruption on the volume. The NTFS Chkdsk utility 
checks this bit when the system is next rebooted, and if the bit is set, Chkdsk executes, repairing the file 
system corruption by reconstructing the NTFS metadata.
CHAPTER 11
Caching and file systems
705
Standard
information
0
1357
File name
$Bad alternate data stream
Bad
VCN
Bad-
cluster
file
LCN
1357
1
0
Starting
VCN
Starting
LCN
Number of
clusters
Standard
information
0
1
2
1355
1356
1049
File name
$Data
3
4
5
1588
1589
1590
VCN
User
file
LCN
1355
1588
2
3
0
1049
1
1588
3
3
2
Starting
VCN
Starting
LCN
Number of
clusters
FIGURE 11-65 Bad-cluster remapping.
In rare instances, file system corruption can occur even on a fault-tolerant disk configuration. A 
double error can destroy both file system data and the means to reconstruct it. If the system crashes 
while NTFS is writing the mirror copy of an MFT file record—of a file name index or of the log file, for 
example—the mirror copy of such file system data might not be fully updated. If the system were re-
booted and a bad-sector error occurred on the primary disk at exactly the same location as the incom-
plete write on the disk mirror, NTFS would be unable to recover the correct data from the disk mirror. 
NTFS implements a special scheme for detecting such corruptions in file system data. If it ever finds an 
inconsistency, it sets the corruption bit in the volume file, which causes Chkdsk to reconstruct the NTFS 
metadata when the system is next rebooted. Because file system corruption is rare on a fault-tolerant 
disk configuration, Chkdsk is seldom needed. It is supplied as a safety precaution rather than as a first-
line data recovery strategy.
The use of Chkdsk on NTFS is vastly different from its use on the FAT file system. Before writing 
anything to disk, FAT sets the volume’s dirty bit and then resets the bit after the modification is com-
plete. If any I/O operation is in progress when the system crashes, the dirty bit is left set and Chkdsk 
runs when the system is rebooted. On NTFS, Chkdsk runs only when unexpected or unreadable file 
system data is found, and NTFS can’t recover the data from a redundant volume or from redundant 
file system structures on a single volume. (The system boot sector is duplicated—in the last sector 
706
CHAPTER 11
Caching and file systems
of a volume—as are the parts of the MFT (MftMirr) required for booting the system and running 
the NTFS recovery procedure. This redundancy ensures that NTFS will always be able to boot and 
recover itself.)
Table 11-11 summarizes what happens when a sector goes bad on a disk volume formatted for one of 
the Windows-supported file systems according to various conditions we’ve described in this section.
TABLE 11-11 Summary of NTFS data recovery scenarios
Scenario
With a Disk That Supports Bad-Sector 
Remapping and Has Spare Sectors
With a Disk That Does Not Perform Bad-
Sector Remapping or Has No Spare Sectors
Fault-tolerant 
volume1
1. Volume manager recovers the data.
2. Volume manager performs bad-sector 
replacement.
3.
File system remains unaware of the error.
1. Volume manager recovers the data.
2. Volume manager sends the data and a 
bad-sector error to the file system.
3.
NTFS performs cluster remapping.
Non-fault-
tolerant volume
1. Volume manager can’t recover the data.
2. Volume manager sends a bad-sector error 
to the file system.
3.
NTFS performs cluster remapping. 
Data is lost.2
1. Volume manager can’t recover the data.
2. Volume manager sends a bad-sector error 
to the file system.
3.
NTFS performs cluster remapping. 
Data is lost.
1 A fault-tolerant volume is one of the following: a mirror set (RAID-1) or a RAID-5 set.
2 In a write operation, no data is lost: NTFS remaps the cluster before the write.
If the volume on which the bad sector appears is a fault-tolerant volume—a mirrored (RAID-1) or 
RAID-5 / RAID-6 volume—and if the hard disk is one that supports bad-sector replacement (and that 
hasn’t run out of spare sectors), it doesn’t matter which file system you’re using (FAT or NTFS). The vol-
ume manager replaces the bad sector without the need for user or file system intervention.
If a bad sector is located on a hard disk that doesn’t support bad sector replacement, the file system 
is responsible for replacing (remapping) the bad sector or—in the case of NTFS—the cluster in which 
the bad sector resides. The FAT file system doesn’t provide sector or cluster remapping. The benefits of 
NTFS cluster remapping are that bad spots in a file can be fixed without harm to the file (or harm to the 
file system, as the case may be) and that the bad cluster will never be used again.
Self-healing
With today’s multiterabyte storage devices, taking a volume offline for a consistency check can result in 
a service outage of many hours. Recognizing that many disk corruptions are localized to a single file or 
portion of metadata, NTFS implements a self-healing feature to repair damage while a volume remains 
online. When NTFS detects corruption, it prevents access to the damaged file or files and creates a 
system worker thread that performs Chkdsk-like corrections to the corrupted data structures, allow-
ing access to the repaired files when it has finished. Access to other files continues normally during this 
operation, minimizing service disruption.