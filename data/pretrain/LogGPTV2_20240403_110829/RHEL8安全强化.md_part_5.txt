:::
要保护 NFS 服务器上的防火墙，请仅开放所需的端口。为 NFS
连接指定的端口号不得被任何其他服务使用。
::: itemizedlist
-   Red Hat Enterprise Linux 8 默认支持 NFSv4。防火墙必须为 NFSv4
    流量打开 TCP 端口 `2049`{.literal} 。
-   在 RHEL 8 中使用 NFSv3 时，您需要打开四个额外的端口，如下所示：
    ::: itemizedlist
    -   `rpcbind`{.literal} 服务动态分配 NFS
        端口，这可能会在创建防火墙规则时导致问题。要简化此过程，请使用
        `/etc/nfs.conf`{.literal} 文件来指定要使用的端口：
        ::: itemizedlist
        -   `mountd`{.literal} (`rpc.mountd`{.literal})的 TCP 和 UDP
            端口- 在 `[mountd]`{.literal} 部分中设置
            `port=`{.literal}。
        -   `statd`{.literal}(`rpc.statd`{.literal}) 的 TCP 和 UDP
            端口 - 在 `[statd]`{.literal} 部分中设置
            `port=`{.literal}。
        :::
    -   在 Red Hat Enterprise Linux 8 中，对 `/etc/nfs.conf`{.literal}
        文件中为 NFS 锁定管理器(`nlockmgr`{.literal})设置 TCP 和 UDP
        端口：
        ::: itemizedlist
        -   `nlockmgr`{.literal} (`rpc.statd`{.literal})的 TCP 端口 - 在
            `[lockd]`{.literal} 部分中设置 `port=value`{.literal}
            。它的效果与 `/etc/modprobe.d/lockd.conf`{.literal} 文件中的
            `nlm_tcpport`{.literal} 选项相同。
        -   `nlockmgr`{.literal} (`rpc.statd`{.literal})的 UDP 端口 - 在
            `[lockd]`{.literal} 部分中设置 `udp-port=value`{.literal}
            。它的效果与 `/etc/modprobe.d/lockd.conf`{.literal} 文件中的
            `nlm_udpport`{.literal} 选项相同。
        :::
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要验证 NFS 服务器上正在使用哪些端口和 RPC 程序，请使用 `-p`{.literal}
参数执行 `rpcinfo`{.literal} 命令。
:::
::: itemizedlist
**其它资源**
-   [支持并行
    NFS(pNFS)](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/storage_administration_guide/index#nfs-pnfs){.link}
-   [使用 `mount`{.literal}
    命令](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/storage_administration_guide/index#ch-mount-command){.link}
-   使用红帽身份管理时 [使用 Kerberos 保护
    NFS](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/using-automount_configuring-and-managing-idm){.link}
-   `exports(5)`{.literal} 和 `nfs(5)`{.literal} 手册页
:::
:::
:::
::: section
::: titlepage
# []{#securing-services_security-hardening.html#securing-ftp_securing-services}保护 FTP {.title}
:::
文件传输协议(FTP)通过网络传输文件。FTP
是一种不安全的协议，因为与服务器进行的所有事务（包括用户身份验证）均未加密，因此应仔细配置。
Red Hat Enterprise Linux 8 提供两个 FTP 服务器：
::: itemizedlist
-   红帽内容加速器(tux)- 具有 FTP 功能的内核空间 Web 服务器。
-   非常安全的 FTP 守护进程(vsftpd)- FTP
    服务的一种独立的、面向安全的实现。
:::
以下安全指南是用于设置 `vsftpd`{.literal} FTP 服务：
### []{#securing-services_security-hardening.html#_secure_banners}保护标语
FTP
服务向所有用户显示问候标语。默认情况下，此标语包含版本信息，其有助于攻击者识别系统中的漏洞。默认标语类似如下：
``` screen
$ ftp localhost
Trying ::1...
Connected to localhost (::1).
220 (vsFTPd 3.0.3)
```
::: itemizedlist
-   要更改 `vsftpd`{.literal} FTP 服务的问候标语，请在
    `/etc/vsftpd/vsftpd.conf`{.literal} 文件中添加以下指令：
    ``` screen
    ftpd_banner=
    ```
    修改后的标语类似如下：
    ``` screen
    $ ftp localhost
    Trying ::1...
    Connected to localhost (::1).
    Welcome to the FTP service.
    ```
-   要制作多行标语，最好使用标语文件。要简化对多个标语的管理，请将所有标语放在
    `/etc/banners/`{.literal} 目录中。本例中 FTP 连接的标语文件为
    `/etc/banners/ftp.msg`{.literal}。
    以下是此类文件的一个示例：
    ``` screen
    ######### Hello, all activity on ftp.example.com is logged. #########
    ```
    要对 `vsftpd`{.literal} FTP 服务引用
    `/etc/banners/ftp.msg`{.literal} 问候标语文件，请在
    `/etc/vsftpd/vsftpd.conf`{.literal} 文件中添加文件：
    ``` screen
    banner_file=/etc/banners/ftp.msg
    ```
:::
### []{#securing-services_security-hardening.html#_prevent_anonymous_access_and_uploads}防止匿名访问和上传
::: itemizedlist
-   安装 `vsftpd`{.literal} 软件包时，会创建 `/var/ftp/`{.literal}
    目录。默认情况下，此软件包为对目录具有只读权限的匿名用户建立目录树。由于匿名用户可以访问数据，因此请注意敏感数据的存储位置。
-   要允许匿名用户在 FTP 服务器上上传文件，请执行以下步骤：
    ::: itemizedlist
    -   在 `/var/ftp/pub/`{.literal} 目录中创建一个只有写权限的目录：
        ``` screen
        # mkdir /var/ftp/pub/upload
        ```
    -   为安全起见更改目录的权限：
        ``` screen
        # chmod 730 /var/ftp/pub/upload
        # ls -ld /var/ftp/pub/upload
        drwx-wx---. 2 root ftp 4096 Nov 14 22:57 /var/ftp/pub/upload
        ```
    -   在 `/etc/vsftpd/vsftpd.conf`{.literal} 文件中添加以下行：
        ``` screen
        anon_upload_enable=YES
        anonymous_enable=YES
        ```
        启用 SELinux 并强制实现时，您还应检查 SELinux 布尔属性
        `allow_ftpd_anon_write`{.literal} 和
        `allow_ftpd_full_access`{.literal}。
    :::
-   允许匿名用户在目录中进行读写的管理员通常会发现其服务器成为盗窃软件的存储库。
:::
### []{#securing-services_security-hardening.html#_secure_user_accounts}保护用户帐户
::: itemizedlist
-   FTP
    通过不安全的网络传输用户名和密码来进行身份验证，最好拒绝系统用户从其用户帐户访问服务器。
    要在 `vsftpd`{.literal} 服务器中禁用所有用户帐户，请将以下指令添加到
    `/etc/vsftpd/vsftpd.conf`{.literal} 中：
    ``` screen
    local_enable=NO
    ```
-   要禁用特定帐户或特定帐户组（如 `root`{.literal} 用户和具有 sudo
    特权的组）的 FTP 访问，您可以使用 `vsftpd`{.literal} 服务的
    `/etc/pam.d/vsftpd`{.literal} PAM 配置文件。
-   可以在 `vsftpd`{.literal} 服务中禁用用户帐户。为此，请将用户名添加到
    `/etc/vsftpd/ftpusers`{.literal} 文件中。
:::
::: itemizedlist
**其它资源**
-   [保护网络访问](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-securing_network_access#sec-Securing_Services_With_TCP_Wrappers_and_xinetd){.link}
-   [TCP
    包装器和连接标语](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-securing_network_access#sect-Security_Guide-Enhancing_Security_With_TCP_Wrappers-TCP_Wrappers_and_Connection_Banners){.link}
-   [禁止 Root
    访问](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-controlling_root_access#sec-Disallowing_Root_Access){.link}
-   `ftpd_selinux(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#securing-services_security-hardening.html#securing-http-servers_securing-services}安全 HTTP 服务器 {.title}
:::
::: section
::: titlepage
## []{#securing-services_security-hardening.html#securing-apache-http-servers_securing-http-servers}安全 Apache HTTP 服务器 {.title}
:::
Apache HTTP 服务器是红帽企业 Linux
中最稳定和安全的服务之一。有许多选项和技术可用于保护 Apache HTTP
服务器。下面的部分简要说明了运行 Apache HTTP 服务器时的良好做法。
始终验证系统上运行的任何脚本在投入生产之前可以正常工作。此外，确保只有
`root`{.literal} 用户对包含脚本或 CGI 的任何目录具有写入权限。要验证，以
`root`{.literal} 用户身份输入以下命令：
``` screen
# chown root directory-name
# chmod 755 directory-name
```
在 `/etc/httpd/conf/httpd.conf`{.literal} 文件中，您可以配置以下选项：
::: variablelist
[`FollowSymLinks`{.literal}]{.term}
:   此指令默认为启用，因此在创建符号链接时应小心。
[`索引`{.literal}]{.term}
:   此指令默认为启用。禁用此指令，以防止访问者浏览服务器上的文件。
[`UserDir`{.literal}]{.term}
:   此指令默认为禁用，因为它可以确认系统上是否存在用户帐户。要激活
    `/root/`{.literal} 之外的所有用户目录浏览，请使用
    `UserDir enabled`{.literal} 和 `UserDir disabled`{.literal} root
    指令。若要将用户添加到已禁用帐户的列表，请在
    `UserDir disabled`{.literal} 行上添加空格分隔的用户列表。
[`ServerTokens`{.literal}]{.term}
:   此指令控制发送回客户端的服务器响应标头字段。它包括以下参数可自定义的各种信息：
    ::: variablelist
    [`ServerTokens Full`{.literal}]{.term}
    :   提供所有可用的信息，如 Web
        服务器版本号、服务器操作系统详情、安装的 Apache 模块，例如：
        ``` screen
        Apache/2.4.37 (Red Hat Enterprise Linux) MyMod/1.2
        ```
    [`ServerTokens Full-Release`{.literal}]{.term}
    :   通过发行版本提供所有可用信息，例如：
        ``` screen
        Apache/2.4.37 (Red Hat Enterprise Linux) (Release 41.module+el8.5.0+11772+c8e0c271)
        ```
    [`ServerTokens Prod`{.literal} 或 `ServerTokens 产品`{.literal}]{.term}
    :   提供 Web 服务器名称，例如：
        ``` screen
        Apache
        ```
    [`ServerTokens Major`{.literal}]{.term}
    :   提供 Web 服务器主发行版本，例如：
        ``` screen
        Apache/2
        ```
    [`ServerTokens Minor`{.literal}]{.term}
    :   提供 Web 服务器次要发行版本，例如：
        ``` screen
        Apache/2.4
        ```
    [`ServerTokens Min`{.literal} 或 `ServerTokens Minimal`{.literal}]{.term}
    :   提供 web 服务器最小发行版本，例如：
        ``` screen
        Apache/2.4.37
        ```
    [`ServerTokens OS`{.literal}]{.term}
    :   提供 Web 服务器发行版本和操作系统，例如：
        ``` screen
        Apache/2.4.37 (Red Hat Enterprise Linux)
        ```
    :::
:::
使用 `ServerTokens Prod`{.literal}
选项防止攻击者获取有关您系统的任何宝贵信息。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
不要删除 `IncludesNoExec`{.literal} 指令。默认情况下，Server-Side
Includes(SSI)模块无法执行命令。除非绝对必要，否则请不要更改此设置，因为它可能会使攻击者在系统上输入命令。
:::
::: title
**删除 httpd 模块**
:::
在某些情况下，删除某些 `httpd`{.literal} 模块来限制 HTTP
服务器的功能会很有帮助。为此，请编辑