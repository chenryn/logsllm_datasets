### Other Streaming-Oriented Approaches

Other streaming-oriented approaches, such as those in [49, 88, 115], are either domain-specific (e.g., bibliographic networks have a different structure than provenance graphs) or primarily applicable to homogeneous graphs.

### Malware Classification and Intrusion Detection

In the realm of malware classification and intrusion detection, Classy [72] clusters streams of call graphs to facilitate malware analysis based on the graph edit distance (GED) [41] of pairs of graphs using a modified version of simulated annealing. Although its runtime complexity is suitable for graph streams, the empirical evaluation was limited to graphs with no more than 3,000 vertices; real system execution yields graphs that are orders of magnitude larger [101].

### StreamSpot

StreamSpot [83] analyzes streaming information flow graphs to detect anomalous activity. However, StreamSpot’s graph features are locally constrained, whereas UNICORN's features embody execution context. We demonstrate in § VI that contextualized graph analysis significantly impacts detection performance. Furthermore, StreamSpot models only a single snapshot of every training graph, dynamically maintaining its clusters during test time. This approach results in a significant number of false alarms, which creates an opportune time window for attackers. Such an approach is also inappropriate in Advanced Persistent Threat (APT) scenarios, where persistent attackers can manipulate the model to gradually and slowly change system behavior to avoid detection. UNICORN, on the other hand, takes full advantage of its ability to continuously summarize the evolving graph, modeling the corresponding evolution of the system execution it monitors.

### FRAPpuccino

FRAPpuccino [53] is another attempt at graph-based intrusion detection. It uses a windowing approach to allow for efficient graph analysis. However, segmenting provenance graphs in this way provides a more limited view of system execution, making it unsuitable for long-term detection that spans multiple windows.

### Provenance-Based Security Analysis

A variety of security-related applications leverage provenance, most notably for forensic analysis and attack attribution [8]. BackTracker [69] analyzes intrusions using a provenance graph to identify the entry point of the intrusion, while PriorTracker [79] optimizes this process and enables forward tracking for timely attack causality analysis. HERCULE [102] analyzes intrusions by discovering attack communities embedded within provenance graphs. Winnower [56] expedites system intrusion investigation through grammatical inference over provenance graphs, reducing storage and network overhead without compromising the quality of provenance data. NoDoze [55] performs attack triage within provenance graphs to identify anomalous paths. Bates et al. [16] were the first to use provenance for data loss prevention, and Park et al. [99] formalized the notion of provenance-based access control (PBAC). Ma et al. [80] designed a lightweight provenance tracing system, ProTracer, to mitigate the dependence explosion problem and reduce space and runtime overhead, facilitating practical provenance-based attack investigation. Pasquier et al. [101] introduced a generic framework, CamQuery, that enables inline, real-time provenance analysis, demonstrating great potential for future provenance-based security applications.

### APT Attack Analysis

Recently, as APT attacks become increasingly prominent, several systems leverage data provenance for APT attack analysis. Holmes [87] and Sleuth [58] focus primarily on attack reconstruction using information flow provided by data provenance. Their approach is similar to an architecture proposed by Tariq et al. [118] that correlates anomalous activity in grid applications using data provenance. The anomaly detection module itself uses a simple, pre-defined model that relies on expert knowledge of the existing APT kill-chain to match an a priori specification of possible exploits to localized components in the graph. Poirot [86] produces another form of attack reconstruction by correlating a collection of compromise indicators (found by other systems) to identify APTs. Relying on expert knowledge from existing cyber threat intelligence reports and compromise descriptions to construct attack query graphs, Poirot performs offline graph pattern matching on provenance graphs to uncover potential APTs. For example, it uses the red team’s attack descriptions to manually craft query graphs to correlate anomalies in the DARPA datasets used in § VI-B. This is a critical limitation, given that composing a sufficiently detailed description of a new class of APT requires significant forensic effort [15].

### UNICORN

UNICORN differs from these rule-based systems in that it is an anomaly-based system requiring no prior expert knowledge of APT attack patterns and behaviors. Although rule-based approaches are closely aligned with commercial practices today (i.e., they are essentially provenance-based versions of the Endpoint Detection and Response (EDR) tools offered by enterprise security vendors), prior research shows that rule-based EDR systems are the chief contributor to the “threat fatigue problem” [2]. Recent work on provenance analysis (e.g., NoDoze [55]) demonstrated that historical context is crucial for mitigating this problem. UNICORN investigates how to incorporate context as a first-class citizen in HID systems, rather than as a secondary triage tool.

Gao et al. [40] leveraged complex event processing platforms and designed a domain-specific query language, SAQL, to analyze large-scale, streaming provenance data. The system combines various anomaly models (e.g., rule-based anomalies) and aggregates data streams across multiple hosts but ultimately requires expert domain knowledge to identify elements/patterns to match against queries. We note that our provenance graph analyses can incorporate implicitly (without domain knowledge) most of their anomaly models (e.g., invariant-based, time-series, and outlier-based). Barre et al. [15] mine data provenance to detect anomalies. The goal of their work is mainly to identify important process features likely to be relevant to APT attacks (e.g., a process' lifetime and path information). Using a random forest model with hand-picked process features, their system delivers a detection rate of only around 50%. Such low performance suggests that simple feature engineering on provenance graphs without considering graph topology is insufficient in detecting stealthy APT attacks. Berrada et al. [19] propose score aggregation techniques to combine anomaly scores from different anomaly detectors to improve detection performance. Although their work targets provenance graphs for APT detection, it is orthogonal to UNICORN (or any other detectors) in that it functions only as an aggregator for existing anomaly detection systems.

### Conclusion

We present UNICORN, a real-time anomaly detection system that leverages whole-system data provenance to detect advanced persistent threats that are challenging for traditional detection systems. UNICORN models system behavior via structured provenance graphs that expose causality relationships between system objects, taking into account the entirety of the graph by efficiently summarizing it as it streams into its analytic pipeline. Our evaluation shows that the resulting evolutionary models can successfully detect various APT attacks captured from different audit systems, including real-life APT campaigns, with high accuracy and low false alarm rates.

### Acknowledgements

We thank Dr. Robert N. W. Watson and his team at the University of Cambridge for their contributions to the DARPA Transparent Computing Program. We also thank the anonymous reviewers and our shepherd, Prof. Brendan Saltaformaggio, who helped improve the paper. We acknowledge the support of the Natural Sciences and Engineering Research Council of Canada (NSERC). Cette recherche a été financée par le Conseil de recherches en sciences naturelles et en génie du Canada (CRSNG). This research was supported by the US National Science Foundation under grants NSF 14-50277, 16-57534, and 17-50024. This research was also supported with promotional credits from the AWS Cloud Credits for Research program. The views, opinions, and/or findings contained in this paper are those of the authors and should not be interpreted as representing the official views or policies, either expressed or implied, of the Department of Defense or the U.S. Government.

### References

[References listed here, following the same format as provided in the original text.]