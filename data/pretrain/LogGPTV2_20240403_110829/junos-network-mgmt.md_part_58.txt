### alarmTable

The `alarmTable` in the RMON MIB allows you to monitor and poll the following attributes:

- **alarmIndex**: The index value for `alarmTable` that uniquely identifies a specific entry.
- **alarmInterval**: The interval, in seconds, over which data is sampled and compared against the rising and falling thresholds.
- **alarmVariable**: The MIB variable that is being monitored by the alarm entry.
- **alarmSampleType**: The method used to sample the selected variable and calculate the value to be compared against the thresholds.
- **alarmValue**: The value of the variable during the last sampling period. This value is compared against the rising and falling thresholds.
- **alarmStartupAlarm**: The alarm sent when the entry is first activated.
- **alarmRisingThreshold**: The upper threshold for the sampled variable.
- **alarmFallingThreshold**: The lower threshold for the sampled variable.
- **alarmRisingEventIndex**: The `eventTable` entry used when the rising threshold is crossed.
- **alarmFallingEventIndex**: The `eventTable` entry used when the falling threshold is crossed.
- **alarmStatus**: The method for adding and removing entries from the table. It can also be used to change the state of an entry to allow modifications.

**Note:** If `alarmStatus` is not set to valid, the associated event alarm will not take any action.

### jnxRmonAlarmTable

The `jnxRmonAlarmTable` is a Juniper Networks enterprise-specific extension to the `alarmTable`. It provides additional operational information and includes the following objects:

- **jnxRmonAlarmGetFailCnt**: The number of times the internal Get request for the monitored variable has failed.
- **jnxRmonAlarmGetFailTime**: The value of `sysUpTime` when the internal Get request for the monitored variable last failed.
- **jnxRmonAlarmGetFailReason**: The reason why the internal Get request for the monitored variable last failed.
- **jnxRmonAlarmGetOkTime**: The value of `sysUpTime` when the internal Get request for the monitored variable succeeded and the entry left the getFailure state.
- **jnxRmonAlarmState**: The current state of this RMON alarm entry.

To view the Juniper Networks enterprise-specific extensions to the RMON Events and Alarms MIB, see [Juniper Networks Documentation](https://www.juniper.net/documentation/en_US/junos16.1/topics/reference/mibs/mib-jnx-rmon.txt).

### RMON Events

An RMON event allows you to log the crossing of thresholds of other MIB objects. It is defined in the `eventTable` for the RMON MIB.

#### eventTable

The `eventTable` contains the following objects:

- **eventIndex**: An index that uniquely identifies an entry in the `eventTable`. Each entry defines one event that is generated when the appropriate conditions occur.
- **eventDescription**: A comment describing the event entry.
- **eventType**: The type of notification that the probe makes about this event.
- **eventCommunity**: The trap group used if an SNMP trap is to be sent. If `eventCommunity` is not configured, a trap is sent to each trap group configured with the `rmon-alarm` category.
- **eventLastTimeSent**: The value of `sysUpTime` when this event entry last generated an event.
- **eventOwner**: Any text string specified by the creating management application or the command-line interface (CLI). Typically, it is used to identify a network manager (or application) and can be used for fine access control between participating management applications.
- **eventStatus**: The status of this event entry.

**Note:** If `eventStatus` is not set to valid, no action is taken by the associated event entry. When `eventStatus` is set to valid, all previous log entries associated with this entry (if any) are deleted.

### Alarm Thresholds and Events

By setting a rising and a falling threshold for a monitored variable, you can be alerted whenever the value of the variable falls outside the allowable operational range (see Figure 24 on page 691).

**Figure 24: Setting Thresholds**

Events are only generated when the alarm threshold is first crossed in any one direction rather than after each sample interval. For example, if a rising threshold alarm, along with its corresponding event, is raised, no more threshold crossing events occur until a corresponding falling alarm occurs. This significantly reduces the quantity of events produced by the system, making it easier for operations staff to react when events do occur.

Before configuring remote monitoring, you should identify the variables that need to be monitored and their allowable operational range. This requires a period of baselining to determine the allowable operational ranges. An initial baseline period of at least 3 months is common when first identifying the operational ranges and defining thresholds, but baseline monitoring should continue over the life span of each monitored variable.

### SEE ALSO

- [Juniper Networks Enterprise-Specific MIBs](#)

### RMON Alarms and Events Configuration

Junos OS supports monitoring routers from remote devices. These values are measured against thresholds and trigger events when the thresholds are crossed. You configure remote monitoring (RMON) alarm and event entries to monitor the value of a MIB object.

#### To Configure RMON Alarm and Event Entries

Include statements at the `[edit snmp]` hierarchy level of the configuration:

```plaintext
[edit snmp]
rmon {
    alarm index {
        description "text-description";
        falling-event-index index;
        falling-threshold integer;
        falling-threshold-interval seconds;
        interval seconds;
        rising-event-index index;
        rising-threshold integer;
        request-type (get-next-request | get-request | walk-request);
        sample-type (absolute-value | delta-value);
        startup-alarm (falling-alarm | rising-alarm | rising-or-falling-alarm);
        syslog-subtag syslog-subtag;
        variable oid-variable;
    }
    event index {
        community community-name;
        description "description";
        type type;
    }
}
```

### Configure RMON Alarms and Events

#### IN THIS SECTION

- [Configure SNMP](#configure-snmp)
- [Configure an Event](#configure-an-event)
- [Configure an Alarm](#configure-an-alarm)

#### Configure SNMP

1. Grant read-only access to all SNMP clients:
   ```plaintext
   [edit snmp]
   user@switch# set community community-name authorization read-only
   ```

2. Grant read-write access to the RMON and `jnx-rmon` MIBs:
   ```plaintext
   [edit snmp]
   user@switch# set view view-name oid object-identifier include
   user@switch# set view view-name oid object-identifier include
   user@switch# set community community-name authorization read-write view view-name
   ```

3. Configure an SNMP trap group:
   ```plaintext
   [edit snmp]
   user@switch# set trap-group group-name categories category
   user@switch# set trap-group group-name targets address
   ```

#### Configure an Event

1. Configure an event index, community name, and type:
   ```plaintext
   [edit snmp rmon]
   user@switch# set event index community community-name type type
   ```

2. Configure a description for the event:
   ```plaintext
   [edit snmp rmon]
   user@switch# set event index description "description"
   ```

#### Configure an Alarm

1. Configure an alarm index, the variable to monitor, the rising and falling thresholds, and the corresponding rising and falling events:
   ```plaintext
   [edit snmp rmon]
   user@switch# set alarm index variable oid-variable falling-threshold integer rising-threshold integer rising-event-index index falling-event-index index
   ```

2. Configure the sample interval and type and the alarm type:
   ```plaintext
   [edit snmp rmon]
   user@switch# set alarm index interval seconds sample-type (absolute-value | delta-value) startup-alarm (falling-alarm | rising-alarm | rising-or-falling-alarm)
   ```

### Monitor RMON MIB Tables

#### Purpose

Monitor remote monitoring (RMON) alarm, event, and log tables.

#### Action

To display the RMON tables:
```plaintext
user@switch> show snmp rmon
```

#### Meaning

The display shows that an alarm has been defined to monitor the `jnxRmon` MIB object `jnxOperatingCPU`, which represents the CPU utilization of the Routing Engine. The alarm is configured to generate an event that sends an SNMP trap and adds an entry to the `logTable` in the RMON MIB. The log table shows that two occurrences of the event have been generated—one for rising above a threshold of 90 percent, and one for falling below a threshold of 75 percent.

### SEE ALSO

- [Configuring RMON Alarms and Events](#)
- [show snmp rmon](#)
- [show snmp rmon history](#)
- [clear snmp statistics](#)
- [clear snmp history](#)

### RMON MIB Event, Alarm, Log, and History Control Tables

#### Table 59: RMON Event Table

| Field                | Description                                      | Statement [edit snmp rmon] |
|----------------------|--------------------------------------------------|----------------------------|
| eventDescription     | Text description of this event.                  | description                |
| eventType            | Type of event (e.g., log, trap, or log and trap). | type                       |
| eventCommunity       | Trap group to which to send this event.          | community                  |
| eventOwner           | Entity (e.g., manager) that created this event.  | —                          |
| eventStatus          | Status of this row (e.g., valid, invalid, or createRequest). | —                          |

#### Table 60: RMON Alarm Table

| Field                | Description                                      | Statement [edit snmp rmon] |
|----------------------|--------------------------------------------------|----------------------------|
| alarmStatus          | Status of this row (e.g., valid, invalid, or createRequest). | —                          |
| alarmInterval        | Sampling period (in seconds) of the monitored variable. | interval                    |
| alarmVariable        | Object identifier (OID) and instance of the variable to be monitored. | —                          |
| alarmValue           | Actual value of the sampled variable.             | —                          |
| alarmSampleType      | Sample type (absolute or delta changes).         | sample-type                |
| alarmStartupAlarm    | Initial alarm (rising, falling, or either).      | startup-alarm              |
| alarmRisingThreshold | Rising threshold against which to compare the value. | rising-threshold            |
| alarmFallingThreshold| Falling threshold against which to compare the value. | falling-threshold           |
| alarmRisingEventIndex| Index (row) of the rising event in the event table. | rising-event-index          |
| alarmFallingEventIndex| Index (row) of the falling event in the event table. | falling-event-index         |

#### Table 61: jnxRmon Alarm Table

| Field                | Description                                      |
|----------------------|--------------------------------------------------|
| jnxRmonAlarmGetFailCnt| Number of times the internal Get request for the variable failed. |
| jnxRmonAlarmGetFailTime| Value of the `sysUpTime` object when the last failure occurred. |
| jnxRmonAlarmGetFailReason| Reason why the Get request failed.               |
| jnxRmonAlarmGetOkTime| Value of the `sysUpTime` object when the variable moved out of failure state. |
| jnxRmonAlarmState    | Status of this alarm entry.                      |

#### Table 62: RMON History Control Table

| Field                | Description                                      | Statement [edit snmp rmon history] |
|----------------------|--------------------------------------------------|------------------------------------|
| historyControlDataSource| Identifies the source of the data for which historical data was collected. | interface                          |
| historyControlBucketsRequested| Requested number of discrete time intervals over which data is to be saved. | bucket-size                        |
| historyControlBucketsGranted| Number of discrete sampling intervals over which data is to be saved. | —                                  |
| historyControlInterval| Interval, in seconds, over which the data is sampled for each bucket. | interval                           |
| historyControlOwner  | Entity that configured this entry.               | owner                              |
| historyControlStatus | Status of this entry.                            | —                                  |

### Minimum RMON Alarm and Event Entry Configuration

To enable RMON on the router, you must configure an alarm entry and an event entry. Include the following statements at the `[edit snmp rmon]` hierarchy level:

```plaintext
[edit snmp rmon]
alarm index {
    rising-event-index index;
    rising-threshold integer;
    sample-type type;
    variable oid-variable;
}
event index;
```

### Configure an RMON Alarm Entry and Its Attributes

#### IN THIS SECTION

- [Configure the Alarm Entry](#configure-the-alarm-entry)
- [Configure the Description](#configure-the-description)
- [Configure the Falling Event Index or Rising Event Index](#configure-the-falling-event-index-or-rising-event-index)
- [Configure the Falling Threshold or Rising Threshold](#configure-the-falling-threshold-or-rising-threshold)
- [Configure the Interval](#configure-the-interval)
- [Configure the Falling Threshold Interval](#configure-the-falling-threshold-interval)
- [Configure the Request Type](#configure-the-request-type)
- [Configure the Sample Type](#configure-the-sample-type)
- [Configure the Startup Alarm](#configure-the-startup-alarm)
- [Configure the System Log Tag](#configure-the-system-log-tag)
- [Configure the Variable](#configure-the-variable)

#### Configure the Alarm Entry

An alarm entry monitors the value of a MIB variable. The `rising-event-index`, `rising-threshold`, `sample-type`, and `variable` statements are mandatory. All other statements are optional.

To configure the alarm entry, include the `alarm` statement and specify an index at the `[edit snmp rmon]` hierarchy level:

```plaintext
[edit snmp rmon]
alarm index {
    description "description";
    falling-event-index index;
    falling-threshold integer;
    falling-threshold-interval seconds;
    interval seconds;
    rising-event-index index;
    rising-threshold integer;
    sample-type (absolute-value | delta-value);
    startup-alarm (falling-alarm | rising-alarm | rising-or-falling-alarm);
    variable oid-variable;
}
```

- **index**: An integer that identifies an alarm or event entry.

#### Configure the Description

The description is a text string that identifies the alarm entry.

To configure the description, include the `description` statement and a description of the alarm entry at the `[edit snmp rmon alarm index]` hierarchy level:

```plaintext
[edit snmp rmon alarm index]
description "description";
```

#### Configure the Falling Event Index or Rising Event Index

The falling event index identifies the event entry that is triggered when a falling threshold is crossed. The rising event index identifies the event entry that is triggered when a rising threshold is crossed.

To configure the falling event index or rising event index, include the `falling-event-index` or `rising-event-index` statement and specify an index at the `[edit snmp rmon alarm index]` hierarchy level:

```plaintext
[edit snmp rmon alarm index]
falling-event-index index;
rising-event-index index;
```

- **index**: Can be from 0 through 65,535. The default for both the falling and rising event index is 0.

#### Configure the Falling Threshold or Rising Threshold

- **Falling Threshold**: The lower threshold for the monitored variable. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval is greater than this threshold, a single event is generated. A single event is also generated if the first sample after this entry becomes valid is less than or equal to this threshold, and the associated `startup-alarm` is equal to `falling-alarm` or `rising-or-falling-alarm`. After a falling event is generated, another falling event cannot be generated until the sampled value rises above this threshold and reaches the rising threshold. The default for the falling threshold is 20 percent less than the rising threshold.

- **Rising Threshold**: The upper threshold for the monitored variable. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval is less than this threshold, a single event is generated. A single event is also generated if the first sample after this entry becomes valid is greater than or equal to this threshold, and the associated `startup-alarm` is equal to `rising-alarm` or `rising-or-falling-alarm`. After a rising event is generated, another rising event cannot be generated until the sampled value falls below this threshold and reaches the falling threshold. The default for the rising threshold is 0.

You must specify the falling and rising thresholds as integers.