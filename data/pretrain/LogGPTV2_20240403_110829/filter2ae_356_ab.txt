下面分析比较重要的`doRules`方法，`process`主要是完成根据规则匹配URL，并重写`URL`。`handleRewrite`根据重写的URL发起请求。
    public void doRules(ServletRequest request, ServletResponse response) throws IOException, ServletException {
            try {
                this.process(request, response);
                this.handleRewrite(request, response);
            } catch (InvocationTargetException var4) {
                this.handleExcep(request, response, var4);
            } catch (ServletException var5) {
                if (!(var5.getCause() instanceof InvocationTargetException)) {
                    throw var5;
                }
                this.handleExcep(request, response, (InvocationTargetException)var5.getCause());
            }
        }
下面分析这两个方法的操作过程
##### process
  * 循环调用`ruleChains`中的`matches`方法，匹配成功则将结果赋值给`RewrittenUrl`对象，并将`rewrittenUrl`对象赋值给`finalRewrittenRequest`。将`rewrittenUrl`的URL保存到`finalToUrl`中。
    public void process(ServletRequest request, ServletResponse response) throws IOException, ServletException, InvocationTargetException {
            while(this.ruleIdxToRun  0) {
                    decodedURI.setChars(uriCC.getBuffer(), uriCC.getStart(), semicolon);
                }
            }
#### 转发访问过程
上面我们分析了正常请求下无法访问`WEB-INF`下文件的原因，那么我们再思考一下，为什么转发过去的URL就可以访问`web-inf`下的内容呢？  
**首先我们可以猜测一下，是否是因为转发过的请求不会再经过**`StandardContextValve` **的处理导致的？**
答案是肯定的,`StandardContextValve`只会在我们请求时处理一次，转发的请求不会再经过`StandardContextValve`的处理，这也是转发请求可以绕过限制访问`WEB-INF`下的内容的原因。
### 为什么转发请求会被DefaultServlet处理？
我们分析过转发请求的地址时，转发的地址是`/;/WEB-INF/web.xml`，而`DefaultServlet`匹配的地址应该是`/`,为什么这个请求会被`DefaultServlet`进行处理？
在`CachedRewriteMatch#execute`中，通过`request.getRequestDispatcher(this.rewrittenContextUrl).forward(request,
response);`完成转发操作，而执行`request.getRequestDispatcher(this.rewrittenContextUrl)`后`wrapper.instance`已经被赋值为`DefaultServlet`。
在`ApplicationContext#getRequestDispatcher`中首先对路径规范化，这个过程会将我们的`/;/`去掉。
    public RequestDispatcher getRequestDispatcher(String path) {
            if (path == null) {
                return null;
            } else if (!path.startsWith("/")) {
                throw new IllegalArgumentException(sm.getString("applicationContext.requestDispatcher.iae", new Object[]{path}));
            } else {
                int pos = path.indexOf(63);
                String uri;
                String queryString;
                if (pos >= 0) {
                    uri = path.substring(0, pos);
                    queryString = path.substring(pos + 1);
                } else {
                    uri = path;
                    queryString = null;
                }
                //路径规范化
                String uriNoParams = stripPathParams(uri);
                String normalizedUri = RequestUtil.normalize(uriNoParams);
                ...
                this.service.getMapper().map(this.context, uriMB, mappingData);
                ...
在`map`方法中获取`Wrapper`保存到`mappingData`中。在`Mapper#internalMapWrapper`中将获取`Wrapper`,首先会根据路径匹配获取`Wrapper`，如果没有匹配到则默认由`DefautlWrapper`处理。
    public void map(Context context, MessageBytes uri, MappingData mappingData) throws IOException {
            ...
            this.internalMapWrapper(contextVersion, uricc, mappingData);
        }
     private final void internalMapWrapper(Mapper.ContextVersion contextVersion, CharChunk path, MappingData mappingData) throws IOException {
            ...
         //如果没匹配到则默认交给DefaultWrapper处理
       if (mappingData.wrapper == null && !checkJspWelcomeFiles) {
                    if (contextVersion.defaultWrapper != null) {
                        mappingData.wrapper = (Wrapper)contextVersion.defaultWrapper.object;
                        mappingData.requestPath.setChars(path.getBuffer(), path.getStart(), path.getLength());
                        mappingData.wrapperPath.setChars(path.getBuffer(), path.getStart(), path.getLength());
                        mappingData.matchType = MappingMatch.DEFAULT;
                    }
        }
### 为什么`DefaultServlet`会读取`web.xml`中的内容？
在`DefaultServlet#service`会根据请求的类型调用不同的方法，  
由于我们使用的`GET`请求，所以会调用`doGet`处理请求，而`doGet`又通过`serveResource`完成具体的处理操作,这里为了能让大家看的比较清晰，我对代码做了很多简化，大致可以看出根据我们传入的路径加载资源，通过`copy`将读取的内容输出到`response`中。
    protected void serveResource(HttpServletRequest request, HttpServletResponse response, boolean content, String inputEncoding) throws IOException, ServletException {
          String path = this.getRelativePath(request, true);
          WebResource resource = this.resources.getResource(path);
          InputStream source = resource.getInputStream();
          ServletOutputStream ostream = null;
         ostream = response.getOutputStream();
         OutputStreamWriter osw = new OutputStreamWriter(ostream, charset);
         PrintWriter pw = new PrintWriter(osw);
         this.copy((InputStream)source, (PrintWriter)pw, (String)inputEncoding);
         pw.flush();
     }
## 漏洞修复
**修复版本：**
  * 7.4.10
  * 7.12.3
  * 7.13.0
  * 7.14.0
对比修复版本的补丁，主要在`ConfluenceResourceDownloadRewriteRule`中，在`matches`之前，首先循环对URL解码，并将`;`替换为`%3b`  
**，那么为什么把**`;` **URL编码后可以修复漏洞呢？**
是因为在`ApplicationContext#getRequestDispatcher`中路径规范化操作在解码操作之前，所以可以正确修复漏洞。