如您所见，在 Dockerfile 的末尾有一条`EXPOSE 8080`指令。这意味着我们可以预期容器在运行时将监听端口号`8080`。让我们再次运行最新的 Tomcat 映像。这一次，我们也会给我们的容器起一个名字，`myTomcat`。使用以下命令启动应用服务器:
```
docker run -it --name myTomcat --net=myNetwork tomcat  
```
为了检查同一网络上的容器是否可以通信，我们将使用另一个映像`busybox`。BusyBox 是一种在单个可执行文件中提供几个精简的 Unix 工具的软件。让我们在单独的 shell 或命令提示符窗口中运行以下命令:
```
docker run -it --net container:myTomcat busybox  
```
如您所见，我们已经指示 Docker，我们希望我们的`busybox`容器使用与 Tomcat 相同的网络。作为替代，我们当然可以使用`--net myNetwork`选项明确指定网络名称。
让我们看看他们是否真的能交流。在运行`busybox`的 shell 窗口中执行以下操作:
```
$ wget localhost:8080
```
上一条指令将在端口`8080`上执行`HTTP GET`请求，Tomcat 正在另一个容器中监听该端口。在成功下载 Tomcat 的`index.html`后，我们有证据表明两个容器都可以通信:
![](img/e3cd142e-8340-4561-9b99-e13260b2853e.png)
到目前为止，运行在同一台主机和同一网络上的容器可以相互通信。但是从外面和我们的容器沟通呢？映射端口很方便。我们可以将 Docker 容器公开的端口映射到主机的端口，在我们的例子中，主机将是本地主机。总的想法是，我们希望主机上的端口映射到正在运行的容器中的特定端口，与 Tomcat 容器的端口号`8080`相同。
要将一个端口(或一组端口)从主机绑定到容器，我们使用`docker run`命令的`-p`标志，如下例所示:
```
$ docker run -it --name myTomcat2 --net=myNetwork -p 8080:8080 tomcat  
```
前面的命令运行另一个 Tomcat 实例，也连接到`myNetwork`网络。然而，这一次，我们将容器的端口`8080`映射到相同号码的主机端口。`-p`开关的语法非常简单:您只需输入主机端口号、冒号，然后在您想要映射的容器中输入端口号:
```
$ docker run -p :  
```
Docker 映像可以使用 Dockerfile 中的`EXPOSE`指令(例如，与`EXPOSE 7000-8000`相同)或`docker run`命令向其他容器公开整个范围的端口，例如:
```
$ docker run --expose=7000-8000   
```
然后，您可以使用`docker run`命令将主机的整个端口范围映射到容器:
```
$ docker run -p 7000-8000:7000-8000   
```
让我们验证我们是否可以从 Docker 之外访问 Tomcat 容器。为此，让我们用映射的端口运行 Tomcat:
```
$ docker run -it --name myTomcat2 --net=myNetwork -p 8080:8080 tomcat   
```
然后，我们可以简单地在我们最喜欢的网页浏览器中输入以下地址:`http://localhost:8080`。
因此，我们可以看到 Tomcat 的默认欢迎页面，直接从 Docker 容器运行中提供，如下面的截图所示:
![](img/bbb00757-1e56-4263-acd6-2a518a002a3a.png)
很好，我们可以从 Docker 外部与我们的容器进行通信。顺便说一下，我们现在有两台独立的 Tomcats 在主机上运行，没有任何端口限制、资源限制等。这就是容器化的力量。
你可能会问，暴露和映射端口，也就是`--expose`交换机和`-p`交换机有什么区别？嗯，`--expose`将在运行时公开一个端口，但不会创建任何到主机的映射。暴露的端口将只对运行在同一网络、同一 Docker 主机上的另一个容器可用。另一方面，`-p`选项与`publish`相同:它将创建端口映射规则，将容器上的端口与主机系统上的端口进行映射。映射端口可从 Docker 外部获得。注意，如果你做了`-p`，但是 Dockerfile 中没有`EXPOSE`，Docker 会做一个隐式的`EXPOSE`。这是因为，如果一个端口对公众开放，它也会自动对其他 Docker 容器开放。
没有办法在 Dockerfile 中创建端口映射。映射一个或多个端口只是一个运行时选项。原因是端口映射配置取决于主机。Dockerfile 需要独立于主机且可移植。
You can bind a port using `-p` in the runtime only.
还有一个选项，允许您映射映像中暴露的所有端口(也就是说；在 Dockerfile 中)，在容器启动期间自动执行。`-P`开关(这次大写`P`)会将动态分配的随机主机端口映射到通过`EXPOSE`指令在 Dockerfile 中公开的所有容器端口。
The `-p` option gives you more control than `-P` when mapping ports. Docker will not automatically pick any random port; it's up to you what ports on the host should be mapped to the container ports.
如果运行以下命令，Docker 会将主机上的随机端口映射到 Tomcat 的公开端口号`8080`:
```
$ docker run -it --name myTomcat3 --net=myNetwork -P tomcat
```
要准确检查哪个主机端口已被映射，您可以使用`docker ps`命令。这可能是确定当前端口映射的最快方法。`docker ps`命令用于查看运行容器列表。从单独的 shell 控制台执行以下操作:
```
$ docker ps
```
在输出中，Docker 将列出所有正在运行的容器，在`PORTS`列中显示哪些端口已经映射:
![](img/1c65d015-a4d9-48fd-87db-3ab5f413f9cd.png)
正如你在前面的截图中看到的，我们的`myTomcat3`容器将把`8080`端口映射到主机上的端口号`32772`。再次，在`http://localhost:32772`地址上执行`HTTP GET`方法将会给我们`myTomcat3`的欢迎页面。`docker ps`命令的替代命令是 docker port 命令，与容器`ID`或`name`一起作为参数使用(这将为您提供关于映射了哪些端口的信息)。在我们的案例中，这将是:
```
$ docker port myTomcat3
```
因此，Docker 将输出映射，表示来自容器的端口号 80 已经映射到主机上的端口号`8080`:
![](img/55ed8c9e-3829-4f45-a0df-2689a16568ea.png)
docker inspect 命令的结果中也提供了关于所有端口映射的信息。执行以下命令，例如:
```
$ docker inspect myTomcat2
```
在`docker inspect`命令的输出中，您会发现包含映射信息的`Ports`部分:
![](img/58b9ccbd-424b-4e59-af3a-d0b43f39bb65.png)
让我们简要总结一下与在表中公开和映射端口相关的选项:
| **指令** | **表示** |
| `EXPOSE` | 表示指定端口上有服务可用。在 Dockerfile 中使用，并使公开的端口对其他容器开放。 |
| `--expose` | 与`EXPOSE`相同，但用于运行时，容器启动期间。 |
| `-p hostPort:containerPort` | 指定端口映射规则，将容器上的端口映射到主机上的端口。从 Docker 外部打开一个端口。 |
| `-P` | 将动态分配的主机随机端口映射到使用`EXPOSE`或`--expose`暴露的所有端口。 |
映射端口是一个很棒的特性。它为您提供了灵活的配置可能性，将您的容器向外部世界开放。事实上，如果您希望您的容器化 web 服务器、数据库或消息传递服务器能够与他人对话，这是必不可少的。如果一组默认的网络驱动程序还不够，你可以尝试在互联网上找到一个特定的驱动程序，或者自己开发一个。Docker Engine 网络插件扩展了 Docker，以支持广泛的网络技术，例如 IPVLAN、MACVLAN，或者一些完全不同的外来技术。在 Docker 中，联网的可能性几乎是无穷无尽的。现在让我们关注 Docker 容器可扩展性卷的另一个非常重要的方面。
# 持久存储
正如您从[第 1 章](01.html)*对 Docker* 的介绍中所记得的，Docker 容器文件系统默认情况下是临时的。如果您启动一个 Docker 映像(也就是运行容器)，您将在层栈的顶部得到一个读写层。您可以根据需要创建、修改和删除文件；如果您将更改提交回映像中，它们将被持久化。如果您想在映像中创建一个完整的应用设置，以及它的所有环境，这是一个很好的特性。但是，在存储和检索数据时，这不是很方便。最好的选择是将容器生命周期和应用与数据分开。理想情况下，您可能希望将这些分开，这样应用生成(或使用)的数据就不会被破坏或与容器生命周期相关联，从而可以重用。
一个完美的例子是网络应用服务器:Docker 映像包含网络服务器软件，例如与 Tomcat 相同，部署、配置并准备使用您的 Java 应用。但是，服务器将使用的数据应该与映像分开。这是通过卷来完成的，我们将在本章的这一部分重点讨论这一点。卷不是 union 文件系统的一部分，因此写操作是即时的，并且尽可能快，不需要提交任何更改。
Volumes live outside of the union filesystem and exist as normal directories and files on the host filesystem.
Docker 数据卷有三个主要用例:
*   为了在主机文件系统和 Docker 容器之间共享数据
*   移除容器时保留数据
*   与其他 Docker 容器共享数据
让我们从一个可以使用的卷相关命令列表开始。
# 与音量相关的命令
卷相关命令的基础是 docker 卷。命令如下:
*   `**$docker volume create**`:创建一个卷
*   `**$ docker volume inspect**`:显示一个或多个卷的详细信息
*   `**$docker volume ls**`:列出卷
*   `**$ docker volume rm**`:删除一个或多个卷
*   `**$ docker volume prune**`:删除所有未使用的卷，即不再映射到任何容器的所有卷
与网络相关的命令类似，如果使用`-help`开关执行，可以获得每个命令的详细描述和所有可能的选项，例如:docker volume create `-help`。让我们从创建卷开始。
# 创建卷
从[第 1 章](01.html)、*Docker 简介*开始，在 Docker for Windows 或 Docker for Mac 中有一个设置屏幕，允许我们指定 Docker 可以访问哪些驱动器。首先，让我们在窗口的 Docker 中标记驱动器 D，使其可用于 Docker 容器:
![](img/33692089-b025-45ad-8670-e920cdf44765.png)