exit on that branch; otherwise, if the request encountered
any compromised node during its propagation, we marked
the result as being tampered. A requester’s troubleshooting
was considered unsuccessful if half or more of its branches
returned a tampered result. Then under each attacker sce-
nario, we computed the probability of a successful data in-
jection attack as the ratio of failed troubleshooting.
Figure 5 compares the probability of successful data injec-
tion attacks with and without zero knowledge proof protec-
tion, for diﬀerent percentages of compromised nodes, aver-
age path lengths, and the number of branches the requester
selects to send a troubleshooting request. Based on Figure 5,
we have the following observations:
• The risk of data injection is smaller when a single
path is used than two branches. This is because the
multiple-branch troubleshooting is only eﬀective when
the majority of the branches return an untampered
result. If only two branches are used, as long as one
of them encounters a compromised node, the trou-
bleshooting fails since the troubleshooter cannot de-
termine which branch’s result is valid, and since more
nodes are involved compared to using a single branch,
the risk of encountering a compromised node is in-
creased. Therefore, if the troubleshooter has only a
77Figure 5: The probability of a successful data injection attack when the troubleshooter sends out a request
on multiple branches.
limited number of friends (e.g., less than 4), it should
use a single path for troubleshooting.
• When the percentage of compromised nodes is mod-
erate or small (e.g., 1% or less), the multiple-branch
troubleshooting strategy works particularly well to-
gether with zero knowledge proof, since it is less likely
that over half of the branches will be compromised.
The combination is especially eﬃcient at reducing the
risk of data injection when a large number of clusters
are involved on a branch. For example, if there are 1%
compromised nodes and the path length is 8, the prob-
ability of successful data injection attacks on a single
path troubleshooting request without zero knowledge
proof protection is 0.694; the probability is reduced to
0.14 if zero knowledge proof is enabled, and issuing
the request over 6 branches further reduces the risk to
0.058, 8 branches to 0.02 and 10 branches to 0.01.
• In general, involving more clusters increases the risk of
successful data injection attacks. Although a smaller
path length is desirable by the troubleshooter, the
peers in FTN tend to choose smaller values of Ph
to achieve a higher privacy level in case of a trou-
bleshooter attack, which forces the request to traverse
a longer path to gather enough samples. The iterative
helper selection method [15] guarantees probable in-
nocence4 for all the cluster participants in the face of
a successful troubleshooter attack, while achieving a
higher helping rate, and the request propagation ter-
minates after only 2 clusters on average. Then with
4A participant is probably innocent if, from the attackers’
point of view, it appears no more likely to be a helper than
not to be one.
zero knowledge proof, the risk of a successful data in-
jection attack is below 0.04 when the percentage of
compromised nodes is 1%, which is further reduced
to 0.005, 0.002 and nearly 0 if the request is sent to
4, 6 and 8 branches respectively. When 0.1% nodes
are compromised, the risk is below 0.004 and further
reduced to nearly 0 with 4 or more branches.
• Finally, issuing the request over multiple branches in-
curs a higher communication overhead than using zero
knowledge proof, since we only validate the few top
ranking entries that make it through to the second
round. Therefore, a single path is preferable if the
size of the troubleshooting message is large (e.g., the
number of suspect entries is large) and the bandwidth
assigned for troubleshooting is limited.
When the set of possible values for suspect entries is un-
known, we use a second round query to ﬁnd out the most
popular values of the top ranking root cause candidates
(Section 9). However, the contribution of participants in
the second round is the unknown entry value that we need
to query for, and hence its validity cannot be veriﬁed. A
compromised host may thus contribute a false entry value
to corrupt the aggregate sume. The consequence is that
during the process of recovering the actual entry value, the
division will result in a non-integral value, or the resulting
string will not be intelligible (e.g., contains non-ASCII char-
acters). In this way, the troubleshooter is able to recognize
the corruption, and hence discard the invalid result. The
troubleshooter may still send the second round request to a
diﬀerent subset of friends to seek the entry value.
Our multiple-branch troubleshooting strategy increases
the robustness of the second round query against tamper-
1234567891000.10.20.30.40.50.60.70.80.91Number of branches to carry out troubleshootingProbablity of successful data injectionWithout ZKP, 1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch1234567891000.050.10.150.20.250.30.35Number of branches to carry out troubleshootingProbablity of successful data injectionWith ZKP, 1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch1234567891000.050.10.150.20.25Number of branches to carry out troubleshootingProbablity of successful data injectionWithout ZKP, 0.1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch1234567891000.0050.010.0150.020.0250.03Number of branches to carry out troubleshootingProbablity of successful data injectionWith ZKP, 0.1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch78conﬁguration data be transmitted between friends. Fully
anonymous conﬁguration data arriving over a mix network
could not be trusted to be authentic, as only friends can
be trusted not to contribute false and potentially harmful
information about their conﬁgurations.
Homomorphic encryption is also used in [4] to allow a com-
munity of users to compute a public aggregate of their data
without exposing individual users’ data. Similarly, the well
known secure multiparty sum protocol enables aggregation
without revealing individual private contributions. How-
ever, these protocols rely on a public bulletin board and
a beacon for random bits, and work only when there is a
known space of choices for the data. In our case, the space
of possible values for a conﬁguration entry is unknown. We
combine those two techniques to address both the passive
and the active attacks eﬃciently, and we extend them to
support counting the number of distinct values in a set, as
well as revealing the most popular value, while keeping the
individual contributions private.
Our problem of privacy-preserving parameter aggregation
shares much similarity to the problem of secure and privacy-
preserving voting [13, 2, 9, 8] with a few diﬀerences. First,
voting requires voters to be authenticated by a centralized
authority, such as the government. Second, our protocol
has an additional requirement of participation privacy; oth-
erwise, privacy of application ownership is compromised.
Third, most voting scenarios involve a ﬁxed, limited number
of voting chances, while our troubleshooting problem does
not. Finally, the scaling requirements of FTN are diﬀer-
ent from those of national elections: while national elections
have at most a few dozen ballot items, and turnaround times
of up to an hour are perfectly acceptable, FTN needs to ac-
commodate several thousand ballot items and turnaround
times need to be minimized.
As an alternative to full-blown homomorphic encryption,
the authors of [17] present a voting system based on cryp-
tographic counters that only support a restricted set of en-
crypted increment and decrement operations. Although the
concept of cryptographic counters is potentially useful in
FTN, the scheme given in [17] is not a good ﬁt for FTN be-
cause of the diﬀering scaling requirements. In particular, the
use of an encryption function based on quadratic residuosity
and the need for L rounds of communication with a public
bulletin board (where L is the number of participants) mean
that the bandwidth usage of this scheme exceeds that of our
elliptic curve based scheme. Likewise, recent work of Kissner
and Song [18] enables private computation of a very general
class of set operations, but does so at the cost of sacriﬁcing
the bandwidth savings aﬀorded by elliptic curves.
Wagner in [26] addresses the problem of compromised
nodes in the context of sensor networks, and describes how
resilient aggregation techniques can be used to limit the
amount of damage a compromised sensor can inﬂict upon
the aggregate results of the network. Using resilient aggre-
gation in FTN may help when the amount of redundancy
within peers’ data contributions is large. The main diﬃculty
in applying these techniques directly is that they assume
a trusted base station is available to compute the resilient
data aggregation function; this is infeasible in the peer-to-
peer FTN context where data contributions must be kept
conﬁdential from the other participants.
The authors of SIA [22] also presented a set of techniques
for secure information aggregation in sensor networks. The
Figure 6: The probability that attackers may suc-
cessfully tamper with the entry value in the second
round.
ing. By querying multiple branches in the second round,
the troubleshooter is able to obtain the actual entry value
as long as one of the branches does not encounter any com-
promised node. We use our simulation data to calculate the
probability that attackers may successfully tamper with the
entry values returned by all branches in the second round,
as shown in Figure 6.
Our approach eﬃciently reduces the threat of second-
round tampering for both cases. When there are 0.1% com-
promised nodes, querying 4 branches in the second round
reduces this threat to nearly zero.
12. RELATED WORK
There is much related work in the area of anonymiza-
tion. The random walk approach is also used in FreeNet [7]
and Crowds [23]. FreeNet is a distributed anonymous in-
formation storage and retrieval system. Crowds provides
anonymous web transactions. Other anonymization systems
are based on Chaum’s mixes [5], which serve as proxies to
provide sender-receiver unlinkability through traﬃc mixing.
Onion routing [14] extends the mixes with layers of onion-
style pre-encryptions. Tarzan [12] implements the mix idea
using a peer-to-peer overlay and provides sender anonymity
and robustness to the mix entry point.
All of the above anonymization techniques address point-
to-point communications. However, our protocol in FTN
involves one-to-many communication, in the form of broad-
casting a troubleshooting request to peers. This broad-
cast should be limited according to the friend relationships,
which is more naturally implemented using a peer-to-peer
overlay. Further, our recursive trust model requires that the
1234567891000.10.20.30.40.50.60.7Number of branches to carry out troubleshootingProbablity of successful tampering in 2nd round1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch1234567891000.020.040.060.080.10.12Number of branches to carry out troubleshootingProbablity of successful tampering in 2nd round0.1% compromised node2 clusters per branch4 clusters per branch6 clusters per branch8 clusters per branch79integrity of information aggregation is achieved essentially
through authentication which is identity-revealing. In FTN,
we cannot do the same because of privacy concerns.
13. CONCLUSIONS
In this paper, we tackle the key security challenges in
Friends Troubleshooting Network: preserving the privacy
of aggregating peer conﬁguration data and ensuring the in-
tegrity of troubleshooting results.
To guarantee data privacy, we apply the asymptotically
optimal homomorphic encryption scheme from [9] and tai-
lor it to scale with the FTN scenario. Our design has the
novel property that shares of the secret key are assembled
in parallel with the encrypted data. Although the use of ho-
momorphic encryption adds some computational complex-
ity, the only additional user-visible cost of the protocol is
bandwidth, which only has to be paid by the minority of
participants who are routing nodes or keyholders. The com-
putational resources required by our scheme are practical
and represent realistic commitments for a troubleshooting
network in which one responds to direct queries from friends.
To ensure integrity, we combine the selective use of zero
knowledge proofs together with a branching solution where
multiple branches are taken to gather the conﬁguration data
using real-world friends network topology. We ﬁnd that
when the percentage of compromised nodes is moderate or
small (e.g. 1% or less), our approach can eﬀectively reduce
the risk of malicious data injection attacks to nearly zero.
14. REFERENCES
[1] R. Agrawal and R. Srikant. Privacy Preserving Data
Mining. In Proceedings of SIGMOD, 2000.
[2] J. Benaloh, Veriﬁable Secret Ballot Elections. Ph.D
thesis, Yale University, 1987.
[3] J. Benaloh and M. Yung. Distributing the power of a
government to enhance the privacy of voters. In Proc.
5th ACM Symposium on Principles of Distributed
Computing (PODC ’86), pp. 52–62, New York, 1986.
[4] J. Canny. Collaborative Filtering with Privacy. In
IEEE Security and Privacy, 2002.
[5] D. Chaum. Untraceable electronic mail, return
addesses, and digital pseudonyms. Communications of
the ACM, 24(2), pp. 84–88, 1981.
[6] D. Chaum and T. Pedersen. Wallet databases with
observers. In Advances in Cryptology — Crypto ’92,
LNCS 740, pp. 89–105, 1993.
[7] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong.
Freenet: A distributed anonymous information storage
and retrieval system. In Proc. International Workshop
on Design Issues in Anonymity and Unobservability,
2001.
[8] L. Coney, J. L. Hall, P. L. Vora, D. Wagner. Towards
a Privacy Measurement Criterion for Voting Systems.
Poster Paper, National Conference on Digital
Government Research, May 2005.
[9] R. Cramer, R. Gennaro, and B. Schoenmakers. A
secure and optimally eﬃcient multi-authority election
scheme. In Advances in Cryptology — Eurocrypt ’97,
LNCS 1233, pp. 103–118, 1997.
[10] R. Cramer, I. Damg˚ard, and B. Schoenmakers. Proofs
of partial knowledge and simpliﬁed design of witness
hiding protocols. In Advances in Cryptology — Crypto
’94, LNCS 839, pp. 174–187, 1994.
[11] A. Fiat and A. Shamir. How to prove yourself:
Practical solutions to identiﬁcation and signature
problems. In Advances in Cryptology — Crypto ’86,
LNCS 263, pp. 186–194, 1987.
[12] M. J. Freedman, E. Sit, J. Gates, and R. Morris.
Introducing Tarzan, a Peer-to-Peer Anonymizing
Network Layer. In IPTPS, 2002.
[13] T. Fujioka, T. Okamoto, and K. Ohta. A Practical
Secret Voting Scheme for Large Scale Elections. In
Proceedings of Auscrypt, Dec. 1992.
[14] D. M. Goldschlag, M. G. Reed, and P. F. Syverson.
Onion Routing for Anonymous and Private Internet
Connections. In CACM, Feb 1999.
[15] Q. Huang, H. J. Wang, and N. Borisov.
Privacy-Preserving Friends Troubleshooting Network.
ISOC NDSS 2005, San Diego, CA.
[16] M. Jakobsson, A. Juels, and R. Rivest. Making Mix
Nets Robust for Electronic Voting by Randomized
Partial Checking. In Proceedings of the 11th USENIX
Security Symposium, pp. 339-353, 2004.
[17] J. Katz, S. Myers, and R. Ostrovsky. Cryptographic
Counters and Applications to Electronic Voting. In
Advances in Cryptology — Eurocrypt 2001, LNCS
2045, pp. 78–92, 2001.
[18] L. Kissner and D. Song. Privacy-Preserving Set
Operations. In Advances in Cryptology — Crypto
2005, LNCS 3621, 2005.
[19] N. Koblitz. Elliptic curve cryptosystems. Math. Comp.
48 (1987), pp. 203–209.
[20] A. Lenstra and E. Verheul. Selecting Cryptographic
Key Sizes. J. Cryptology 14 (2001), no. 4, pp. 255-293.
[21] T. Pedersen. A threshold cryptosystem without a
trusted party. In Advances in Cryptology — Eurocrypt
’91, LNCS 547, pp. 522-526, 1991.
[22] B. Przydatek, D. Song, and A. Perrig. SIA: Secure
Information Aggregation in Sensor Networks. In
Proceedings of ACM SenSys, Nov 2003.
[23] M. K. Reiter and A. D. Rubin. Crowds: Anonymity
for Web Transactions. In ACM Transactions on
Information and System Security, Nov 1998.
[24] A. Shamir. How to share a secret. Comm. ACM 22
(1979), no. 11, pp. 612–613.
[25] C. E. Shannon. A Mathematical Theory Of
Communication. Bell System Tech. J. 27 (1948), pp.
379-423, 623-656.
[26] D. Wagner. Resilient Aggregation in Sensor Networks.
In ACM Workshop on Security of Ad Hoc and Sensor
Networks (SASN ’04), Oct. 2004.
[27] H. J. Wang, Y. C. Hu, C. Yuan, Z. Zhang, and Y. M.
Wang. Friends Troubleshooting Network: Towards
Privacy-Preserving, Automatic Troubleshooting. In
Proceedings of the 3rd International Workshop on
Peer-to-Peer Systems (IPTPS), 2004.
[28] H. J. Wang, J. Platt, Y. Chen, R. Zhang, and Y. M.
Wang. Automatic Misconﬁguration Troubleshooting
with PeerPressure. In Proceedings of OSDI 2004.
80