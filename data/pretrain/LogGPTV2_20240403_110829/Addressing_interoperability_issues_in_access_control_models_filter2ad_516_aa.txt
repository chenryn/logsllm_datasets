title:Addressing interoperability issues in access control models
author:Vishwas Patil and
Alessandro Mei and
Luigi V. Mancini
Addressing Interoperability Issues in Access Control
Models
Vishwas Patil
PI:EMAIL
Alessandro Mei
PI:EMAIL
Luigi V. Mancini
PI:EMAIL
Dipartimento di Informatica
Universit„a degli Studi di Roma - La Sapienza
Via Salaria 113, 00198 Roma, Italy
ABSTRACT
An access control framework is responsible for efﬁciently and ef-
fectively managing an organization’s resources on which its users
can perform actions. Depending upon their requirements, different
organizations deploy different kinds of access control frameworks.
For a common goal, organizations often collaborate by contribut-
ing their resources and users. To integrate each other’s resources
and users, their access control frameworks should be interopera-
ble. To help a collaboration realize, several models [14, 41, 42]
exist. These models facilitate the collaboration among homoge-
neous access control frameworks. In practice, collaborators may
have heterogeneous frameworks that may not share any similarity
in their security orderings [10] which may prove to be a serious
hitch for integrating each others’ resources and users at an appro-
priate order. Here, we present a utility that allows one to form an
overlay of deﬁnitions speciﬁc to the collaboration. Such deﬁni-
tions map new names for the existing deﬁnitions available within
the framework. Thus, the new security order formed through over-
lay deﬁnitions can be presented as an interoperation interface to the
collaborators. The use of overlays hides the internal security order-
ing of an organization from its collaborators and we shall see how
collaboration speciﬁc context information can be captured and used
in our approach. The post-collaboration setup should provide an ef-
ﬁcient mechanism for authentication-cum-authorization of partici-
pants consistent with the local policies and ensure non-repudiation
of any inter-organization communication. We have come across a
cryptographic primitive, called chameleon hash, that has allowed us
to efﬁciently realize the above mentioned requirements and prop-
erties. A preliminary analysis of our approach shows an advan-
tage over existing certiﬁcate based practices [11, 15, 20, 24, 43]
in terms of manageability, privacy and communication overheads.
Our scheme should be the best implementation choice for dynamic
and ephemeral collaborations where preserving pre-collaboration
functional setup during the span of collaboration and also after the
collaboration is important . Actually, this is a pressing need for
organizations coping with globalization.
In this paper, our goal is to devise an enforcement mechanism to fa-
cilitate concurrent collaborations in a distributed environment with
a focus on the manageability, interoperability and privacy of col-
laborators. Privacy to the collaborators is a new unique feature
provided under our approach.
Keywords: access control, interoperability, name spaces, chameleon
cryptography.
INTRODUCTION
1.
Owing to the advent of digital revolution it has become possible to
integrate almost any kind of electronic device that has computing
and communication capability into the day to day life of individuals
and organizations. This extends the reach of such devices beyond
the physical boundaries and demands protection against misuse. In
other words, availability of such resources to their owners becomes
a security issue. Computers, printers, card-readers, sensors, dig-
ital photocopiers, etc., are typical examples of digital resources.
Furthermore, even the services provided by such resources (e.g.,
databases) and applications developed on top of them (e.g., web-
services) can be collectively referred to resources. Therefore, to en-
sure the availability of resources to the intended users of an organi-
zation, the organization needs a comprehensive mechanism called
access control framework. Depending upon the size and functional
requirements, different organizations deploy different types of ac-
cess control frameworks. For instance, a small organization might
be content with an access control framework of type access ma-
trix [19] or mandatory access control (MAC) [6] or discretionary
access control (DAC) [26]. Military organizations are/have been
traditional practitioners of MAC and DAC. In commercial envi-
ronments with large number of users and resources (e.g., banks),
role-based access control (RBAC) [18] has emerged as a de facto
standard. An organization may also have a tailored ﬂavor of these
frameworks suitable to its requirements or may have a proprietary
framework in place. Such a heterogeneity in models for access
control brings forward the challenge in their interoperability when
used to form a collaborative environment.
The primitive goal of an access control model is to efﬁciently man-
age users and resources (entities) under its control. Different AC
models achieve this goal differently. A typical deployment of an
access control system is a combination of the following three log-
ical components: an access control model, policies, and enforce-
ment mechanisms. The access control model provides means to
arrange, efﬁciently manage entities and deﬁne relations amongst
them. For example, in MAC, entities are arranged in a matrix where
cells of the matrix deﬁne the relation between users listed in rows
with resources placed in columns. In RBAC, entities are assigned
to abstract names inherent in the model (e.g., ROLE, OBS, etc.) and
the model provides means to express relationships amongst such
pre-deﬁned abstract names. Policy languages are employed to pro-
vide properties that are difﬁcult to achieve under AC model alone,
e.g., context-sensitive access requests. Enforcement mechanisms
are employed to enforce the outcome of an access request to a re-
source and also in situations where certain requirements are con-
trary to the inherent properties of the underlying AC model; for ex-
ample, private or external role hierarchies [31, 34] in RBAC. The
interﬂuve of functional scope of these three logical components is
not strict and may vary in actual deployment, according to the re-
quirements and nature of the setup.
Collaboration amongst organizations is a pressing need in the cur-
rent trend of globalization and outsourcing. Organizations col-
laborate for a common goal by contributing their resources and
users. For example, workﬂow systems spanning across several au-
tonomous organizations (administrative domains), computational
grids where computational resources and service users belong to
different administrative domains, military and intelligence coali-
tions, collaboration through outsourcing, etc., face interoperability
issues amongst their autonomous administrative domains that con-
stitute the collaboration environment. Some of the prominent mod-
els that help in realizing collaboration are [14, 41, 42]. However,
these models facilitate collaboration among homogeneous access
control frameworks.
In practice, collaborators may have hetero-
geneous frameworks and may not share any similarity in their se-
curity orderings [10], the orderings help collaborators in judging
appropriate levels for accommodating each others’ resources and
users. Several other models that address certain issues while het-
erogeneous autonomous domains collaborate have been proposed.
These approaches have varying reliance on the three components
of access control system described above. In [14, 41, 42], RBAC
model has been extended to facilitate collaboration among homo-
geneous domains. The additional requirement for collaboration
in distributed environment is that the communication across par-
ticipating domains should have authenticity and non-repudiability
properties. These properties can be provided by enhancing the
enforcement mechanism component (i.e., by integrating crypto-
graphic functions or a PKI) of access control systems.
In [11,
15, 20, 39, 43, 29], PKI (X.509) assisted AC models have been
proposed to facilitate a secure collaboration. The choice of PKI,
X.509 in the above mentioned proposals, plays a pivotal role in de-
ciding the autonomous and dynamic nature of the resulting collab-
orative environment. The use of X.509 PKI (which is a top-down
architecture and centralized in nature) in the above proposals does
not allow them to remain truly decentralized. In [1, 2, 8, 9, 10,
13, 21, 22, 24, 33, 28], formal models based on the policy lan-
guages are proposed for collaboration in a distributed environment.
These models and their policy engines rely on security assertions
provided by the underlying enforcement mechanisms to evaluate
resource access requests. Brieﬂy speaking, several combinations
of the above mentioned components are possible to facilitate col-
laboration in distributed environment with a varying dependence
on the three components to achieve security and manageability in
the resulting domain.
In a collaborative domain, the enforcement mechanisms component
has a greater role to play than its role in the stand-alone access con-
trol system. Authentication, non-repudiation, security assertions
that can be veriﬁed off-line, etc., are the additional properties ex-
pected from the enforcement mechanisms component. To achieve
these additional properties in actual implementation of any of the
above listed proposals facilitating collaboration in a distributed en-
vironment, they shall rely on cryptographic primitives, plausibly
asymmetric keys. Thus, having a pair of asymmetric keys with
the entities involved in collaboration, we provide a name and au-
thorization binding utility that greatly simpliﬁes forging dynamic
collaborations and post-collaboration management of not only the
resulting setup but also of individual participating domains. The
utility derives its strength from the collision property of chameleon
cryptography [25] and the naming philosophy of SPKI/SDSI [13].
Given a public key, corresponding unique chameleon hash function
can be efﬁciently derived. This function possess all the properties
of universal one-way hash functions except that the owner of the
private key (trap-door) can produce collisions for any hash value
with a different pre-image. We use the chameleon hash function
to introduce local names and exploit the collision property to bind
entities or externally deﬁned local names to trap-door owner’s lo-
cal names. The utility of introducing names and their binding al-
lows potential collaborators to form an overlay over their shared
resources, thus maintaining their post-collaboration autonomy and
shielding their actual access control framework from collaboration
speciﬁc modiﬁcations. This is very essential while collaborations
are ephemeral. Though our utility is based on keys, the key man-
agement issues are out of the scope of this paper and we assume
that the same practice should be followed as in other proposals that
make use of cryptographic primitives to achieve the properties re-
quired in a distributed environment.
Taming heterogeneity: as the collaborators can be dissimilar in
terms of their underlying access control models, governing poli-
cies/policy engines and enforcement mechanisms, we identify a
common denominator across them – asymmetric keys. Our overlay
formation utility based on asymmetric keys allows collaborators to
generate a common agreeable interface between themselves, with-
out making modiﬁcations in their respective autonomous functional
setups. In [28], this requirement is acknowledged and addressed
through means of “common vocabularies.” Identifying asymmetric
key pairs as a common denominator also nulliﬁes the heterogene-
ity collaborators may have in their use of a PKI (PGP or X.509, for
example).
Organization of the paper: In next section we introduce our mech-
anism to deﬁne names and binding entities to them. The naming
mechanism is central to formation of overlays as an interoperation
interface to the collaborators. In Section 3, we explain usage of
overlays for a typical collaboration scenario. Section 4, brieﬂy pro-
vides our experimental results and lists advantages of our mecha-
nism. We provide the related work in Section 5 and conclude the
paper with Section 6.
2. FORMING OVERLAYS – BRIDGES FOR
COLLABORATORS
We introduce overlays as an interoperation interface to the collab-
orators. Central to this utility is a ﬂexible inter-linkable naming
mechanism based on chameleon hash functions. We begin this sec-
tion with a sub-section on highlighting the importance of names
as a mnemonic handle in access control, its usage in current prac-
tice and make case for local name spaces. Then we present the
cryptographic primitive – chameleon hash function – on which our
naming mechanism is based. A brief scenario showing usage of
overlays is also presented at the end of this section.
2.1 Importance of names as a mnemonic han-
dle in access control
The most important function of a name is to serve as a mnemonic
handle for some human user, it is important that users be able to
create names rather freely using well-chosen identiﬁers [13]. Es-
pecially, names have been proved very useful when they refer to a
group of entities (plausibly of same type) since one can use such a
handle to specify and enforce a policy over members of the group
just by referring the name [18]. Time-line of access control systems
shows that, for potentially large setups, we had to move from ﬂat
subject-object capability list (AC-matrix) to RBAC family [18, 14,
41, 42] for the sake of efﬁcient management of the setup. Manage-
ability is an important aspect of an access control framework. Efﬁ-
cient management of resources ensures their availability which is,
in fact, an important requirement for secure systems. RBAC [18],
the usual contender for access control in large setups, introduces
special names (introduced as RBAC abstract elements) like USERS,
ROLES, OBS, PRMS, etc., to group together its users, their roles,
objects, and permissions over objects. Then it speciﬁes relations
among such abstract elements to achieve efﬁcient management of
the setup. For example, the many-to-many set relation between
abstract elements ROLES and PRMS; where members of the group
ROLES are mapped to the members of set PRMS and vice versa.
Thus assigning an user a role from ROLES group essentially em-
powers the user with permissions assigned to that role. This indi-
rect binding of users (through ROLES) to the possible permissions
over a resource (OBS) in RBAC framework provides the follow-
ing advantages. These advantages, due to the access control model
component of access control system, come at the cost of granular-
ity. The granularity requirements of the system should be achieved
through the enforcement mechanisms component, so that the for-
mer retains its simplicity and manageability.
• It helps in writing manageable policies using the abstract ele-
ments like; USERS, ROLES, PRMS, etc., and enforcing actual
authorizations by resolving entity’s membership to appropri-
ate sets.
• The resource need not maintain the actual list of users and
their respective set of permissions. Thus reducing the size of
ACL (Access Control List), and the ACL look-up time.
• Therefore, addition or deletion of users from the setup need
not be reﬂected in the ACL.
• Similarly, temporary suspension of set of permissions or in-
troduction of new permissions need not be reﬂected in the
ACL.
However, the utility of these special handles (names or abstract el-
ements) under RBAC is limited to the administrative domain in
which they are deﬁned. In other words, the abstract name ROLES
in one RBAC domain is different from the abstract name ROLES in
another RBAC domain, i.e., the name deﬁnitions are local to the
domains. It would be very useful in collaborative environments to
have an ability to refer to the names deﬁned in other administrative
domains [27]. The challenge lies in devising a mechanism with
minimum inter-domain communication costs. Since, in a stand
alone RBAC implementation the access control decisions essen-
tially boil down to set-membership queries. In other words, a user
requesting some permission over certain object must have its mem-
bership in a role that has been mapped to the requested permission.
In a dynamic stand alone RBAC setup, the members of abstract
elements (e.g., ROLES, PRMS, etc.) are continuously updated by
the domain administrator and this state change is readily available
within the domain while making access control decisions.
speciﬁcations will be used to manage the new virtual abstract en-
tities. The model loses its manageability if one goes on integrat-
ing the virtual organizations in further collaborations. The state
changes in any of the participating domain create cascading effect.
Also, in such frameworks (e.g., [14, 41, 42]), it is not possible to
accommodate a domain with non-RBAC framework since it does
not have the abstract elements deﬁned. In the following we intro-
duce the chameleon hash function and its properties.
2.2 Chameleon hash function and its proper-
ties
DEFINITION 1. A chameleon hash function [25, 12] is a one-
way hash function like any other universal hash function like SHA-1
[32], except that the function is public-key dependent and the corre-
sponding private-key gives an ability to efﬁciently ﬁnd a pre-image
[36] colliding to a pre-computed hash generated with another pre-
image.
A chameleon hash function is associated with a pair of public and
private keys (the latter called a trapdoor or collision key) and has
the following properties [25].
1. Anyone who knows the public key can compute the associ-
ated hash function.
2. For those who don’t know the trapdoor the function is colli-
sion resistant [36] in the usual sense, namely, it is infeasible
to ﬁnd two inputs which are mapped to the same output.
3. However, the holder of the trapdoor information can easily
ﬁnd collisions for every given input.
Let, K and SK denote an asymmetric key pair, where K is a pub-
lic key (or hash key) while SK represents the corresponding pri-
vate key. CHK(., .) denotes the associated chameleon hash func-
tion, which can be computed efﬁciently given the value of K. On
input (pre-image) a message m and a random string r, this func-
tion generates a hash value CHK(m, r) which satisﬁes the following
properties [25].
Collision resistance There is no efﬁcient algorithm that on in-
put the public-key K can ﬁnd pairs m1, r1 and m2, r2 where
m1 6= m2, such that CHK(m1, r1) = CHK(m2, r2), except with
negligible probability.