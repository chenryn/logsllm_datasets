switch context such as _cond_resched. Context switches
are currently treated the same way as a successful return to
userspace. Finally we can have dUnicorn optionally disable
logging and output functions such as printk. Such logging
functions can usually be safely skipped as they perform no
useful function for the analysis and take long time to execute.
In fact, we ﬁnd that removing print functions can speed
1
2
3
4
5
6
struct msm_vfe_cfg_cmd2 {
uint16_t num_cfg;
uint16_t cmd_len;
void __user *cfg_data;
void __user *cfg_cmd;
};
Listing 4: IOCTL structure for msm_isp driver.
out the dynamic analysis of some drivers by as much as 3
times. However, this optimization has a trade-off of missing
some read-past-the-buffer bugs when a char array was not
properly null-terminated. dUnicorn is general enough to be
able to intercept and redirect execution of any kernel function
to a custom implementation, and we hypothesize that this
functionality could be used in the future for other types of
dynamic analyses.
D. IOCTL input format recovery
While the approach implemented in EASIER is generic and
can be applied to testing any kernel component, we speciﬁcally
target IOCTLs in this work, which requires additional infor-
mation for automatic fuzzing or execution. System calls such
as write and read only require providing a contiguous array
and size as input, and differ from IOCTLs, which have more
requirements on their inputs. Recall that an IOCTL system
call has the following format:
ioctl(int fd, long cmd, void *arg),
The ﬁrst argument is a ﬁle descriptor tied to the driver’s
device ﬁle in /dev and the second argument is an IOCTL
command number. Finally,
the last argument points to an
arbitrary structure in memory whose format is again deﬁned by
the driver. The ﬁnal argument is particularly complex as there
is no way to tell beforehand what size the buffer that *arg
points to should be. If it is too short, the driver will not get
enough data and will most probably go to error handling code.
If it is too long, a fuzzer will waste time mutating data that is
never used by the driver. Moreover, the structure in *arg can
embed pointers to other structures and arrays. Nested arrays
can have dynamic sizes, and the ﬁelds responsible for their
sizes are speciﬁc to the IOCTL command and driver.
To illustrate, consider Listing 4, which is a typical example
of the format of an *arg input for a driver. The last two ﬁelds
are pointers and should point to valid memory locations. If
they are set to random values (e.g. by a fuzzer), the driver
will fail while trying to access/copy this memory and is likely
to immediately go to error handling code. In addition, the size
of the data they point to is dynamic and depends on other two
ﬁelds, num_cfg and cmd_len. Nested structures can in turn
contain pointers to other structures and so on. As a result, it
is important to extract which parts of the input to an IOCTL
call can be set to arbitrary values and fuzzed, and which parts
must have semantically correct inputs in order to not trigger
spurious errors and enable exploration of driver code.
While other work has proposed extracting the layout of
these structures statically, such an approach is necessarily
incomplete as it cannot extract the size of dynamically allo-
cated objects and arrays in the structure [8]. Instead, EASIER
recovers IOCTL structure layouts dynamically. As a result,
during fuzzing, one can issue an IOCTL system call with
arg set to arbitrary values and dUnicorn will dynamically
allocate the right sizes and insert pointers at correct places.
The key observation behind our approach is that in order to
copy data between userspace and kernel space drivers must
use copy_from_user() kernel API call (not using it is a
bug by itself that dUnicorn can catch). Functions from this
family take as arguments, an address in userspace that points
to data to be copied, and an integer giving the size of the
data to be copied. dUnicorn uses this information to recover
the format of the data that the driver expects at runtime as it
makes these copy_from_user() calls. dUnicorn intercepts
calls to copy_from_user() (see implementation details in
Appendix B-B) and redirects them to its own implementation
which dynamically, and on the ﬂy, allocates the desired
amount of memory, ﬁlls it with random data and returns it
to the driver. This exploits the fact that if a pointer appears
in copy_from_user() function, then the driver expects
userspace data to be present at this location.
Consider
an
example
in Figure
2. Assume
the
userspace calls ioctl libc function and sets arg to
0x100000002 as shown in Figure 2a). When the driver
calls copy_from_user() for the ﬁrst time it will use
this pointer as the ﬁrst argument and len1 as the size of
the structure it expects (or array of structures). dUnicorn
intercepts this call, pauses the emulation, and allocates len1
bytes of emulated memory and ﬁlls it with random data as
shown in Figure 2b). dUnicorn then continues execution.
Assume now that the driver expects a pointer at some (un-
known to us) offset d inside the data it just copied (Figure 2c).
It will try to use the (random) value from this offset, also
stored in src2, in another call to copy_from_user().
dUnicorn intercepts this call and searches for src2 inside the
copied data; once found it gives us the offset d. dUnicorn then
allocates new space of size len2 and updates the values of
both src2 and the memory slot at offset d correspondingly
(see Figure 2d). Note that our approach is insensitive to how
len2 was computed or whether it depends on other user
input. Such dependencies can pose a problem to static analysis,
but not for our dynamic recovery. dUnicorn continues this
algorithm recursively which allows it to allocate the right
amount of memory and deal with nested pointers.
E. Fuzzing
Now that EASIER can use dUnicorn to run the memory
snapshot as a userspace program, instead of returning random
data it can return fuzzed values from the fuzzer. Moreover,
EASIER can use any userspace fuzzer to produce those values.
In our implementation, we support coverage-based fuzzing
using AFL, more speciﬁcally AFL in unicorn mode [31] (a.k.a.
2Note that since we are working on a memory snapshot we can treat
userspace and kernel space memory separation to our liking.
Fig. 3: Experimental workﬂow
G. Program generation
For each of
the IOCTL commands we launch an
AFL/dUnicorn instance. If crash is found, our system uses
the input that triggered the crash and the recovered IOCTL
structure layout to automatically generate a C program that
will trigger the crash when run on the real kernel. We have
found this very useful when preparing a proof-of-concept code
for a vulnerability report or ﬁltering out false positive crashes.
In fact, we were able to submit and get accepted, working
proof-of-concept code for vulnerabilities in our reports without
ever having the device on which the proof-of-concept
is
supposed to run.
V. EVALUATION
In this section, we pose three questions: 1) whether our
hypothesis about superﬁcially dependent paths is correct and
we can reach real vulnerabilities; 2) whether the evasion tech-
niques are sufﬁcient to load and initialize drivers; 3) whether
we can ﬁnd new bugs and how many false positive crashes
we get during fuzzing. We start by describing experimental
workﬂow, describe our experimental results and discuss the
limitations of evasion.
A. Workﬂow
Figure 3 shows the sequence of steps that we followed
during our experiments for each driver. Each individual step
was automated except for driver compilation: our framework
was designed to work directly on binary kernel modules (i.e.
.ko ﬁles) but most Android drivers are currently compiled
directly into the kernel rather than as modules. Compiling
drivers as modules did not require any changes in the driver
source. We had to either modify the corresponding Makeﬁles
(by changing obj-y to obj-m directives) or navigate through
the menuconﬁg. When modifying Makeﬁles, sometimes it
might not be immediately clear what source ﬁles constitute
a driver, this however can be solved through trial and error.
Going from one step to another requires providing the
output of one step as input to the next step manually. Gluing
all the steps together is mechanical (i.e. identical for all drivers
and does not require any additional analysis by the analyst)
and can be done with moderate engineering effort.
B. Reaching existing vulnerabilities
We start by answering: given that we can load some drivers,
do superﬁcially dependent paths contain real vulnerabilities
and can we reach them? To answer this question, we looked at
existing vulnerabilities in IOCTL system calls. We wanted to
Fig. 2: IOCTL structure recover details
AFL-Unicorn). This mode provides integration with Unicorn
library similar to how AFL-qemu mode integrates with Qemu
and captures emulated basic blocks/edges.
AFL executes dUnicorn as any other userspace program.
dUnicorn then does all the job of copying mutated input to
proper memory locations, catching unmapped memory errors
and raising SEGFAULT signals, dynamically intercepting and
rewriting function calls, and dynamically recovering IOCTL
structures.
F. Symbolic execution
With symbolic execution our goal is similar: being able to
symbolically run a kernel memory snapshot. Our implementa-
tion is based on the Manticore [16] framework. Manticore is
tailored to symbolically execute userspace ELF binaries and
cannot run kernel code. We extend it and add a new mode that
allows for restoring the execution state from the memory snap-
shot. Similar to dUnicorn, our symbolic execution tool allows
for dynamic binary rewriting and replacing kernel functions
with custom implementations, speciﬁcally we replace memory
allocation functions with our custom memory allocator.
The symbolic execution component
is generic and can
potentially be used for different tasks (for example discovering
new paths when the fuzzer gets stuck). In our implementation,
we used it to develop a pass that recovers IOCTL command
numbers to be used in the cmd argument. Recovering IOCTL
commands was necessary since they are usually hard to guess
by the fuzzer. Our approach to recovering IOCTL command
numbers is based on the common convention of having a
large switch statement inside IOCTL handlers. Each switch
case is usually compiled into a conditional branch instruction.
We assign register r1 (containing cmd argument) a symbolic
value and every time the execution state forks inside the
IOCTL handler (but not inside its callees), we call the solver
to produce a counterexample.
copy_from_user(dst1, src1, len1);0x1000 0000:copy_from_user(dst1, src1, len1);0x1000 0000:Mutated inputcopy_from_user(dst2, src2, len2);0x1000 0000:Mutated inputcopy_from_user(dst2, src2, len2);0x1000 0000:Mutated inputMutated inputa)b)c)d)ddDriver compilationLearning compatible propertyExtracting and pluggin inDTS entrySpinning up Qemuand loading driverExtracting exported function signaturesTaking memory dumpRecovering IOCTL command numbersFuzzingStage 1:Stage 2:Program generationverify that we can reach vulnerabilities speciﬁcally in Android
drivers (and not only in Vanilla Linux kernel drivers on which
the evasion kernel is based on). Thus, we create a corpus
of known vulnerabilities in Android device drivers that are
not present in the vanilla Linux kernel and cannot be trivially
compiled against it.
In order to ﬁnd CVE’s we used cvedetail.com database
with “android” keyword and chose the ﬁrst 21 CVE’s that
satisﬁed the above criteria. These CVE’s belonged to 10
different drivers from Android for MSM kernel3 that could
be loaded and initialized by the evasion framework. The
vulnerable versions of the drivers were for MSM kernel 3.4,
3.10, and 3.18, we thus prepared evasion kernels based on the
same versions of the Vanilla kernel.
We also include 5 additional bugs (lines 22-26) that were
known to the developers and patched in the latest version of the
MSM kernel but not publicly reported as CVE’s. We describe
each of these 5 bugs in more detail in Appendix E. For each
bug in our corpus, we created a test program that can inject an
input that should trigger each of the bugs and conﬁrm whether
the bug is triggered or not.
Overall we were able to reach existing bugs in 21 (80%) of
the 26 cases. This indicates that vulnerabilities often pertain
to superﬁcially dependent paths and conﬁrms that EASIER is
able to trigger them without having to precisely emulate either
the host kernel or the hardware device. We describe some of
the interesting CVE’s in Appendix D.
C. Loading drivers in the evasion framework
We now evaluate the ability of the evasion framework
to successfully load and initialize Android platform device
drivers without peripherals and without porting drivers. To
evaluate this, we use 62 drivers from three different kernels:
the MSM kernel, the Xiaomi Redmi 6 kernel, and the Huawei
P20 Pro kernel. Speciﬁcally, we searched for platform drivers
that appear in the MSM kernel and are not present in the
vanilla Linux kernel and then selecting the ﬁrst 20 that
contained IOCTL system call handlers (note that these drivers
are different from those in the previous experiment). We were
able to compile all of these as modules. We chose Xiaomi
drivers by selecting drivers that contain an IOCTL system call
handlers and are not present in the Vanilla kernel, resulting in
another 50 drivers. Among those, we were able to compile 32
as modules. The most common reason for not being able to
compile a driver was that the kernel source tree was missing
header ﬁles included by the driver. We believe these drivers
were not actually a part of the Xiaomi kernel but were left
there from previous kernels and never meant to be compiled.
We used a similar procedure for the Huawei kernel and added
another 10 drivers to bring the total to 62 drivers. The drivers
came from a variety of kernel subsystems, such as camera,
network, radio, USB, video subsystem, and others. Driver
loading experiments were conducted on machines running
3A fork of Android Open Source Project containing additional enhance-
ments for Qualcomm chipsets.
CVE #
CVE-2014-9785
1
CVE-2014-9891
2
CVE-2014-4322
3
CVE-2014-9894
4
CVE-2012-4220
5
CVE-2015-9863
6
CVE-2015-9863-1
7
CVE-2014-9875
8
9
CVE-2014-9782
10 CVE-2014-9786
11 CVE-2014-9777
12 CVE-2014-9880
13 CVE-2016-5344
14 CVE-2014-9866
15 CVE-2016-3903
16 CVE-2014-9867
17 CVE-2015-8941
18 CVE-2014-9871
19 CVE-2014-9868
20 CVE-2014-9882
21 CVE-2014-9881
22
23
24
25
26
diag-crash-1
diag-crash-2
actuator-crash-1
actuator-crash-2
isp-crash-1
Module
qseecom.ko
qseecom.ko
qseecom.ko
qseecom.ko
diagchar.ko
diagchar.ko
diagchar.ko
diagchar.ko
msm actuator.ko
msm actuator.ko
vidc vdec.ko
vidc vdec.ko
mdss rotator.ko
msm csid.ko
msm csid.ko
msm isp.ko
msm isp.ko
msm isp.ko
msm csiphy.ko
iris-radio.ko
iris-radio.ko
diagchar.ko
diagchar.ko
msm actuator.ko
msm actuator.ko
msm isp.ko
Total
Reach





















21/26 (80%)
TABLE I: EASIER’s abaility to reach known vulnerabilities.
The bug marked as CVE-2015-9863-1 was unreported but
similar in nature to CVE-2015-9863.
Ubuntu 16.04/18.04 (with a 4-core 2.70GHz CPU and 8 GB of
RAM), Qemu version 3.10, and evasion kernels based on the
Vanilla kernels 3.4 and 4.9. We now evaluate the success rate
of driver initialization by the evasion kernel, analyze reasons
for failures to initialize and outline how often the stub1
evasion function was needed instead of stub0.
1) Success rate: The summary of the results is shown in
Table II. For each driver we indicate whether we were able
to load it, as well as the size of the driver. Out of 62 drivers,
the evasion kernel was able to successfully load and initialize
48 drivers (77%). Among those, for 2 drivers (drivers #4 and
#17) the last, open, stage failed with a crash, in which case
the evasion kernel completed loading by using the surrogate
module to which the IOCTL handlers of the driver were
attached.
2) Reasons for initialization failure: We analyzed the rea-
sons for initialization failure and observed that failures often
happened either in init or probe functions due to evaded
functions that had required functionality, such as initializing
ﬁelds of a struct, that our stubs did not perform. This caused
the driver to crash, skip the creation of the /dev ﬁle, or to
go to error handling code that deleted the previously created
/dev ﬁle. For example, in the case of the dwc3-msm.ko
USB controller driver, the probe function ﬁnished success-
fully, but the execution did not take the path that creates the
avtimer.ko
msm adc.ko
msm led ﬂash.ko
msm jpeg.ko
msm vpe.ko
msm rmnet sdio.ko
qfec.ko
# Module
MSM kernel v3.4
1
2
3
4
5
6
7
Xiaomi Redmi6 kernel
21 mtk disp mgr.ko
22
23