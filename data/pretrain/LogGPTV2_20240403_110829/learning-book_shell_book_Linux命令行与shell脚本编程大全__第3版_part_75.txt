Thia should provlde some useful
*
HTML标签由小于号和大于号来识别。大多数HTML标签都是成对出现的：一个起始标签（比
如cb>用来加粗），以及另一个结束标签（比如/b>用来结束加粗）。
但如果不够小心的话，删除HTML标签可能会带来问题。乍一看，你可能认为删除HTML标
签的办法就是查找以小于号（）结尾且其中有数据的文本字符串：
s///g
很遗，这个命令会出现一些意料之外的结果。
S sed *s///g* data11.txt
Thia la the line in the Neb page.
Lnfornation to use in our sed scxipt
Thla should provlde some
$
注意，标题文本以及加粗和倾斜的文本都不见了。sed编辑器将这个脚本忠实地理解为小于
号和大于号之间的任何文本，且包括其他的小于号和大于号。每次文本出现在HTML标签中（比
如cb>first），这个sed脚本都会删掉整个文本。
这个问题的解决办法是让sed编辑器忽略掉任何嵌人到原始标签中的大于号。要这么做的话，
你可以创建一个字符组来排除大于号。脚本改为：
---
## Page 482
21.8小结
467
α/]*>/ /g
这个脚本现在能够正常工作了，它会显示你要在Web页面HTML代码里看到的数据。
S sed *s/]*>//g' data11.txt
Thla ia the page title
This ia the [irat 1ine 1n the Web page.
Thia should provide sone useful
information to use in our sed script.
现在好一些了。要想看起来更清晰一些，可以加一条删除命令来删除多余的空白行。
S sed a/]*>//g ;/^$/a data11.txt
Thla ia the page title
Thia ia the firat line in the Web page.
Information to uae 1n our aed script.
Thia should provide sone useful
现在紧凌多了，只有你想要看的数据。
21.8小结
sed编辑器提供了一些高级特性，允许你处理跨多行的文本模式。本章介绍了如何使用next
命令来提取数据流中的下一行，并将它放到模式空间中。只要在模式空间中，就可以执行复杂的
替换命令来替换跨行的短语。
多行删除命令允许在模式空间含有两行或更多行时删除第一行文本。这是遍历数据流中多行
文本的简便办法。类似地，多行打印命令允许在模式空间含有两行或更多行时只打印第一行文本。
你可以综合运用多行命令来遍历数据流，并创建多行替换系统。
紧接着，本章讲述了保持空间。保持空间允许在处理多行文本时先将某些文本行搁置在一边。
你可以在任何时间取回保持空间的内容来替换模式空间的文本，或将其附加到模式空间文本后。
可以使用保持空间对数据流排序，反转文本行在数据中出现的顺序。
本章还讨论了sed编辑器的流控制命令。你可以使用分支命令改变脚本中sed编辑器命令正常
的处理流程，创建循环或在特定条件下跳过某些命令。测试命令为sed编辑器命令脚本提供了
if-then类型的语句。测试命令只在前面的替换命令成功完成替换的情况下才会跳转。
本章最后讨论了如何在shell脚本中使用sed脚本。对大型sed脚本来说，常用的方法是将脚本
数到shell包装脚本中。可以在sed脚本中便用命令行参数变量来传递shell命令行的值。这为在命令
行上甚至在其他脚本中直接便用sed编辑器脚本提供了一个简使的途径。
---
## Page 483
468
第21章sed进阶
接下来我们将会深人gawk世界。gawk程序支持许多高阶编程语言特性。只用gawk就可创建
一些相当复杂的数据处理及报表程序。下一章会介绍gawk的各种语言特性，并演示如何用它们从
简单数据中生成漂亮的报表。
---
## Page 484
22
第22章
gawk进阶
本章内容
再探gawk
口在gawk程序中使用变量
口使用结构化命令
口格式化打印
口使用函数
19章介绍了gawk程序，并演示了用它从原始数据文件生成格式化报表的基本方法。本
章将进一步深入了解如何定制gawk。gawk是一门功能丰富的编程语言，你可以通过它
所提供的各种特性来编写高级程序处理数据。如果你在接触shell脚本前用过其他编程语言，那么
gawk会让你感到十分亲切。在本章，你将会了解如何使用gawk编程语言来编写程序，处理可能
22
遇到的各种数据格式化任务。
22.1使用变量
所有编程语言共有的一个重要特性是使用变量来存取值。gawk编程语言支持两种不同类型的
变量：
口内建变量
口自定义变量
gawk有一些内建变量。这些变量存效用来处理数据文件中的数据字段和记录的信息。你也可
以在gawk程序里创建你自己的变量。下面几节将带你逐步了解如何在gawk程序里使用变量。
22.1.1内建变量
gawk程序使用内建变量来引用程序数据里的一些特殊功能。本节将介绍gawk程序中可用的
内建变量并演示如何使用它们。
1.字段和记录分隔符变量
第19章演示了gawk中的一种内建变量类型—数据字段变量。数据字段变量允许你使用关元
---
## Page 485
470
第22章gawk进阶
符号（S）和字段在该记录中的位置值来引用记录对应的字段。因此，要引用记录中的第一个数
据字段，就用变量s1；要引用第二个字段，就用s2，依次类推。
数据字段是由字段分隔符来划定的。默认情况下，字段分隔符是一个空白字符，也就是空格
符或者制表符。第19章讲了如何在命令行下使用命令行参数-F或者在gawk程序中使用特殊的内
建变量FS来更改字段分隔符
内建变量Fs是一组内建变量中的一个，这组变量用于控制gawk如何处理输人输出数据中的
字段和记录。表22-1列出了这些内建变量。
表22-1gawk数据字段和记录变量
变量
指
述
FIELDHIDTHS
由空格分隔的一列数字，定义了每个数据字段确切宽度
FS
输人字段分隔符
R8
输人记录分隔符
OF8
输出字段分隔符
OR8
输出记录分隔符
变量Fs和oFs定义了gawk如何处理数据流中的数据字段。你已经知道了如何使用变量FS来定
义记录中的字段分隔符。变量oFs具备相同的功能，只不过是用在print命令的输出上。
默认情况下，gawk将oFs设成一个空格，所以如果你用命令：
print $1, $2,$3
会看到如下输出：
fieldl field2 field3
在下面的例子里，你能看到这点。
$ cat datal
data11 data12, data13, data14, data15
data31 Gata32, data33, data34, data35
data21 , data22 , data23, data24, dat a25
$ gavk *BEGIN(rs=*,*) (print $1,$2,$3)* datal
datal1 data12 data13
data21 data22 data23
data31 data32 data33
print命令会自动将OFs变量的值放置在输出中的每个字段间。通过设置oFs变量，可以在输
出中使用任意字符串来分隔字段。
$ gavk BEGIN(Fs=*,*; OFs=*-*)(print $1,$2,$3)* data1
data21-data22-data23
data11-data1.2data.13
data31data32dat.a33
$ gavk *BEGIN(rs=*,*; OFs=*--*) (print $1,$2, $3)* data1
data11--data1.2-- data13
---
## Page 486
22.1使用变量
471
data21--Gata22--data23
cceep--zeesep--Tsesep
$ gawk *BEGIN[FS=*,*; OFS=**) {prlnt $1,$2,$3)′ datal
data11data12data13
data31data32data33
data21data22data23
FIELDWIDTHS变量允许你不依靠字段分隔符来读取记录。在一些应用程序中，数据并没有使
用字段分隔符，而是被放置在了记录中的特定列。这种情况下，必须设定FIELDWIDTHS变量来
匹配数据在记录中的位置。
一旦设置了FIELDWIDTH变量，gawk就会忽略FS变量，并根据提供的字段宽度来计算字段。
下面是个采用字段宽度而非字段分隔符的例子。
$ cat datalb
1005, 3247596. 37
1152 .349194 .00
05810.1298１00. 1
$ gawk *BEGIN(FIELDWIDTHS=*3 5 2 5*) (pzint $1, $2,$3, $4) ′ Gatalb
100 5.324 75 96.37
115 -2.34 91 94.00
1*001 86 21*01 850
FIELDWIDTHS变量定义了四个字段，gaWk依此来解析数据记录。每个记录中的数字申会根
据已定义好的字段长度来分割。
22
警告一定要记住，一旦设定了FIELDWIDTHS变量的值，就不能再改变了。这种方法并不适用
于变长的字段。
变量Rs和oRs定义了gawk程序如何处理数据流中的字段。默认情况下，gawk将Rs和oR.s设为
换行符。默认的RS值表明，输人数据流中的每行新文本就是一条新纪录。
有时，你会在数据流中碰到占据多行的字段。典型的例子是包含地址和电话号码的数据，其
中地址和电话号码各占一行。
Riley Mullen
123 Main Street
Chicago, IL 60601
(312) 5551234
如果你用默认的Fs和Rs变量值来读取这组数据，gawk就会把每行作为一条单独的记录来读
取，并将记录中的空格当作字段分隔符。这可不是你希望看到的。
要解决这个问题，只需把rS变量设置成换行符。这就表明数据流中的每行都是一个单独的字
段，每行上的所有数据都属于同一个字段。但现在令你头疼的是无从判断一个新的数据行从何开始。
对于这一问题，可以把Rs变量设置成空字符串，然后在数据记录间留一个空白行。gawk会
把每个空白行当作一个记录分隔符。
---
## Page 487
472
第22章gawk进阶
下面的例子使用了这种方法。
$ cat data2
123 Main Street
Riley Mullen
Chicago, IL 60601
312>5551234
Frank xilliams
456 0ak Street
Indianapolis, IN 46201
317> 5559876
Haley Snel1
Detroit, MI 48201
4231 E1m Street
$ gawk BEGIN(Fs=*n*; RS=**)(print $1,$4)+ data2
(313> 5554938
Riley Mu11en (312)5551234
Frank Mi1liams (317>5559876
Haley Sne11 (31315554938
$
太好了，现在gawk把文件中的每行都当成一个字段，把空白行当作记录分隔符
2.数据变量
除了字段和记录分隔符变量外，gawk还提供了其他一些内建变量来帮助你了解数据发生了什
么变化，并提取shell环境的信息。表22-2列出了gawk中的其他内建变量。
表22-2更多的gawk内建变量
变
量
描
述
ARGC
当润命令行参数个数
ARGIND
当前文件在ABGV中的位置
ARGV
包含命令行参数的数组
CONVYVE
数字的转换格式（参见princci语句），默认值为s.6g
ENVIROH
当前shelI环境变量及其值组成的关联数组
ERRNO
当读取或关闭输人文件发生错误时的系统错误号
FILENAME
用作gawk输人数据的数据文件的文件名
FNE
当前数据文件中的数据行数
IGNORBCASE
设成非零值时，忽略gavk命令中出现的字符串的字符大小写
NF
数据文件中的字段总数
NR
已处理的输人记录数
OFMT
数字的输出格式，默认值为.69
RLBIGTH
由natch两数所匹配的子字符申的长度
RSTART
由natch函数所匹配的子字符申的起始位置
---
## Page 488
22.1使用变量
473
你应该能从上面的列表中认出一些shell脚本编程中的变量。ARGC和ARGV变量允许从shel中
获得命令行参数的总数以及它们的值。但这可能有点麻烦，因为gawk并不会将程序脚本当成命令
行参数的一部分。
$gawk *BEGIN(print ARGC, ARGV[1])* data]
2data1
ARGc变量表明命令行上有两个参数。这包括gawk命令和data1参数（记住，程序脚本并不
算参数）。ARGv数组从索引o开始，代表的是命令。第一个数组值是gawk命令后的第一个命令行
参数。
说明张shell变量不同，在脚本中引用gawk变量时，变量名前不加美元符。
ENVIRON变量看起来可能有点陌生。它使用关联数组来提取shelI环境变量。关联数组用文本
作为数组的索引值，而不是数值。
数组索引中的文本是shell环境变量名，而数组的值则是shell环境变量的值。下面有个例子。
$gawk *
> prInt ENVIRON [*HONE*1
> BEGIN(
> print ENVIRON [ * PATH*]
home/r 1ch
/usx/ 1oca1 /bLn: /bLn: /ugx/bin: /usx/X11R6/bin
22
ENVIRON[*HOME*1变量从shelI中提取了HOME环境变量的值。类似地，ENVIRON[“PATH*1提
取了PATH环境变量的值。可以用这种方法来从shell中提取任何环境变量的值，以供gawk程序使用。
当要在gawk程序中眼踪数据字段和记录时，变量FNR、NF和NR用起来就非常方便。有时你并
不知道记录中到底有多少个数据字段。NP变量可以让你在不知道具体位置的情况下指定记录中的
最后一个数据字段。
$ gawk *BEGIN(FS=*:*; OFS=*:*) (pzint $1, SNF) ′ /etc/pasawd
rich: /bLn/bash
testy :/bin/csh
mark: /bLn/bash
dan: /bin/bash
mike : /bLn/bash
test : /bLn/bash
NF变量含有数据文件中最后一个数据字段的数字值。可以在它前面加个关元符将其用作字段
变量。
FNR和NR变量虽然类似，但又略有不同。FNR变量含有当前数据文件中已处理过的记录数，
NR变量则含有已处理过的记录总数。让我们看几个例子来了解一下这个差别。
---