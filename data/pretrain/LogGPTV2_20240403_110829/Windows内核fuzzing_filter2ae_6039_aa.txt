# Windows内核Fuzzing

## 译文声明
本文为翻译文章，原文作者为Netanel Ben-Simon和Yoav Alon，来源于research.checkpoint.com。具体表达及含义请以原文为准。

## 背景
在我们之前的研究中，我们使用[WinAFL](https://github.com/googleprojectzero/winafl)对Windows上运行的用户空间应用程序进行了模糊测试，并在Adobe Reader和Microsoft Edge中发现了50多个漏洞（详情见[先前的研究](https://research.checkpoint.com/2018/50-adobe-cves-in-50-days/)）。接下来，我们决定挑战一个更大的目标：Windows内核模糊测试。此外，通过结合已发现的用户空间漏洞与潜在的内核漏洞，我们可以创建完整的攻击链，因为如今没有沙箱逃逸或特权提升的远程代码执行（RCE）几乎毫无价值。

有了明确的目标后，我们开始探索内核fuzzer领域，评估现有的工具，并可能对其进行大量修改以更好地满足我们的需求。本白皮书引用了我们在今年早些时候在[OffensiveCon](https://www.offensivecon.org/speakers/2020/netanel-ben-simon-yoav-alon.html)和[BlueHatIL](https://www.bluehatil.com/abstracts#collapse-FuzzingWindowsKernel)上的演讲内容。相关视频链接可在此处获取。

## 探索内核Fuzzer
鉴于我们在[AFL](https://github.com/google/AFL)和[WinAFL](https://github.com/googleprojectzero/winafl)方面的丰富经验，我们首先寻找可用于攻击Windows内核的类似模糊测试工具。通过Google搜索，我们找到了[kAFL](https://github.com/RUB-SysSec/kAFL)，它看起来完全符合我们的需求。

### kAFL
[kAFL](https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-schumilo.pdf)是德国波鸿鲁尔大学开发的一种研究性fuzzer，利用AFL风格的模糊测试来攻击操作系统内核。kAFL支持Linux、macOS和Windows，并已被用于查找Linux内核Ext4文件系统和macOS中的漏洞。

#### 工作原理
kAFL的工作原理与AFL相似，但由于其针对的是操作系统内核，因此需要围绕模糊测试循环进行更多工作。模糊测试循环是一个迭代过程，在每个周期中，测试用例都会针对其目标进行测试，并处理反馈（参见图1）。

![fuzzing循环周期](图1)

当kAFL首次启动时，fuzzer会从保存状态生成运行目标操作系统的多个虚拟机。在这些VM快照中，内部运行着一个预加载的代理（agent），该代理与fuzzer协同工作，推动模糊测试过程。代理运行在用户空间，通过hypercalls与fuzzer通信，并将目标驱动程序的地址范围发送给fuzzer，以便仅在代理提供的范围内跟踪代码覆盖率。

在每个循环开始时，fuzzer通过共享内存将输入发送到代理。kAFL使用类似于AFL的突变策略来生成新的输入。接着，代理通知hypervisor开始收集覆盖率，并将输入发送到目标内核组件。例如，如果我们以负责解析压缩映像的名为test.sys的驱动程序为目标，则代理会将生成的输入发送到该驱动程序进行测试。最后，代理请求停止从KVM收集覆盖率，而fuzzer则处理覆盖率跟踪。kAFL的覆盖率实现使用Intel Processor Trace（IntelPT或IPT）作为反馈机制。

kAFL的崩溃检测机制（参见图2）如下所示：

![kAFL崩溃检测](图2)

VM内的代理使用BugCheck和BugCheckEx的地址向KVM发出hypercall，KVM随后对这些地址进行打补丁。当机器遇到bug时，内核会调用补丁版本的BugCheck或BugCheckEx发出hypercall，通知fuzzer发生了崩溃。

了解了这些机制后，我们需要考虑如何根据Windows环境的需求进行调整。

## 攻击目标
Windows内核非常庞大，包含几千万行代码和数百万个源文件。我们的重点是那些可以从用户空间访问的部分，这些部分复杂且可以用于本地特权提升（LPE）。

根据我们的经验，AFL适合以下目标：
- 快速目标，每秒可以执行100次以上的迭代；
- 解析器，特别是针对二进制格式。

这与Michał Zalewski在[AFL的README](https://github.com/google/AFL/blob/master/README.md#9-fuzzer-dictionaries)中所写的内容一致：“默认情况下，afl-fuzz突变引擎针对紧凑的数据格式进行了优化，例如图像、多媒体、压缩数据、正则表达式语法或shell脚本。它不太适合具有繁琐和冗余数据格式的语言，特别是HTML、SQL或JavaScript等。”

在Windows内核（图3）中寻找合适的目标：

![Windows内核组件](图3)

以下是我们的潜在目标：
- 文件系统，如NTFS、FAT、VHD等；
- 注册表配置单元；
- 加密/代码完整性（CI）；
- PE格式；
- 字体（从Windows 10开始已迁移到用户空间）；
- 图形驱动程序。

### 典型的Windows内核漏洞
我们退后一步，研究了一个非常典型的内核漏洞：[CVE-2018-0744](https://crbug.com/project-zero/1389)（参见图4）。

![win32k中的典型漏洞](图4)

该程序包含多个系统调用，这些系统调用接收高度结构化的数据作为输入，如结构体、常量（魔数）、函数指针、字符串和标志。此外，系统调用之间存在依赖关系：一个系统调用的输出作为其他系统调用的输入。这种结构在内核缺陷中非常常见，可以通过一系列系统调用来触发漏洞。

关于结构感知型模糊测试的重要性和示例，请参阅[此处](https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md)。

### Windows内核攻击面：kAFL vs. Syscall Fuzzer
观察到上述bug后，我们意识到使用AFL样式的fuzzer将限制我们只使用相对较小的内核部分。Windows内核的大部分内容可以通过涉及高度结构化数据的系统调用来访问，但使用kAFL将我们限制在内核中的二进制解析器中，如设备驱动程序、文件系统、PE格式、注册表等。与可以通过系统调用访问的代码量相比，这些部分相对较少。因此，如果有一个系统调用fuzzer（syscall fuzzer），我们将能够接触到更多的攻击面，例如虚拟内存管理、进程管理器、图形、user winapi、gdi、安全性、网络等。

至此，我们意识到需要寻找一个系统调用fuzzer。

### Syzkaller简介
[Syzkaller](https://github.com/google/syzkaller)是一个覆盖率引导的结构感知型内核fuzzer（也称为智能系统调用fuzzer）。它支持多种操作系统，并可以在多种机器类型（Qemu、GCE、手机等）和多种架构（x86-64、aarch64）上运行。截至目前，Syzkaller已在Linux内核中发现了3700个bug，其中大约六分之一是安全漏洞。

Syzkaller是结构感知型fuzzer，这意味着它具有每个系统调用的描述。系统调用描述以类似于Go语言的语法写入文本文件。Syz-sysgen是Syzkaller的一个工具，用于解析和格式化系统调用描述。成功完成后，它将文本文件转换为Go代码，并将其与fuzzer代码一起编译成一个名为syz-fuzzer的可执行文件。

Syz-fuzzer是驱动guest VM内部模糊测试过程的主要可执行文件。Syzkaller有自己的语法来描述程序、系统调用、结构体、联合等，生成的程序也称为syz程序。这里有一个[示例](https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md#syscall-descriptions)。

Syzkaller采用了一些突变策略来对现有程序进行突变。提供新代码覆盖的程序以syz格式保存在数据库中，这个数据库也称为语料库。这允许我们停止fuzzer，进行更改，然后从停止的位置继续。

![Syzkaller架构（Linux）](图5)

Syzkaller的主要二进制文件是syz-manager，当它启动时执行以下操作：
- 从之前的运行中加载程序的语料库；
- 启动多个测试机器；
- 使用SSH将executor和fuzzer二进制文件复制到机器中；
- 执行syz-fuzzer。

然后，syz-fuzzer从管理器中获取语料库并开始生成程序。每个程序都被送回管理器保护起来以防崩溃。接着，syz-fuzzer通过IPC将程序发送到executor，后者运行系统调用并从内核收集覆盖率（如果是Linux，则使用KCOV）。

[KCOV](https://www.kernel.org/doc/html/v4.17/dev-tools/kcov.html)具有编译时插桩功能，使我们可以从用户空间获取整个内核中每个线程的代码覆盖率。如果检测到新的覆盖率跟踪，fuzzer会报告给管理器。

Syzkaller的目标是成为一个无监督的fuzzer，这意味着它试图使整个模糊测试过程自动化。例如，在发生崩溃的情况下，Syzkaller会生成多个复制的机器，以从程序日志中分析崩溃的syz程序。这些复制的机器尝试尽可能地最小化崩溃的程序。该过程完成后，Syzkaller通常会重新生成一个syz程序或一段C代码以重现崩溃。Syzkaller还能够从git中提取维护者列表，并通过电子邮件将崩溃的详细信息发送给他们。

Syzkaller支持Linux内核，并取得了令人印象深刻的结果。看到Syzkaller的成功，我们想：如果能在Windows上对Linux内核进行模糊测试就好了。这促使我们探索WSL。

### WSLv1背景知识
[Windows下的Linux子系统（WSL）](https://docs.microsoft.com/en-us/windows/wsl/install-win10)是在Windows上运行原生Linux二进制可执行文件的兼容层，它在Linux系统调用和Windows之间提供了桥梁。