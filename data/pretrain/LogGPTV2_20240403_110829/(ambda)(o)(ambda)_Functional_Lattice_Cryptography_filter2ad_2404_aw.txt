polymorphic in their interpreter). Thus expressions can be interpreted with any interpreter
that supports the language components used in the expression.
Unfortunately, there is a caveat to this polymorphism: once an interpreter is chosen
for a particular expression, the type of the expression is “monomorphized” for that inter-
preter. This limitation of Haskell’s type system8 precludes the possibility of interpreting
a given expression in multiple ways, which severely restricts the ﬂexibility of ALCHEMY
expressions.
However, [Kis10] provides a simple way to work around this restriction, by ﬁrst dupli-
cating an expression into two new expressions which have possibly different interpreters.
The duplicator interpreter D is deﬁned as:
data Dup intp1 intp2 e a = Dup (intp1 e a) (intp2 e a)
8The functionality we seek is known as impredicative polymorphism, which is not available in the GHC
Haskell compiler.
157
dup :: Dup intp1 intp2 e a -> (intp1 e a, intp2 e a)
This is the ﬁrst interpreter we have seen so far which is parameterized by another interpreter.
This is because rather than producing a Haskell value like an Int or String, dup produces
expressions which can be further interpreted. Speciﬁcally, dup produces two new expres-
sions, each of which have their own interpreter. Naturally this technique can be applied
recursively to interpret an expression in arbitrarily many ways.
The instances for D are all very similar and mechanical. We show the Add instance
below:
instance (Add intp1 a, Add intp2 a)
=> Add (Dup intp1 intp2) a where
add_ = Dup add_ add_
neg_ = Dup neg_ neg_
The constraints on the instance meant that in order to add two Dup intp1 intp2 expressions
of (object-language) type a, we must be able to individually add intp1 expressions of type
a and intp2 expressions of type a. The implementation mirrors these constraints: add_ for
Dup intp1 intp2 simply uses add_ for the intp1 interpreter and the intp2 interpreter.
Using Dup is very simple:
expr = lam $ add_ $: v0 $: v0
(ex1, ex2) = dup expr
pprint ex1
-- "(\\v0 -> ((add v0) v0))"
eval ex2 3
-- 6
158
5.4.4 Logging Error Rates
HE ciphertexts include an error term which grows with homomorphic operations. If the
error term gets too large (as measured by the error rate), the underlying plaintext is lost.
The amount of noise growth depends on the homomorphic operation and the cryptosystem
parameters, but it is difﬁcult to predict in advance exactly how the parameters will affect
noise growth. Yet noise growth must be taken into account when choosing parameters:
if the parameters are too small, we will be unable to decrypt the ciphertext, while overly
conservative parameters cause the noise to grow more quickly than necessary, limiting the
homomorphic capacity of the cryptosystem.
We can iterate on an optimal parameter combination by measuring the size of the error
term after each homomorphic operation, and then adjusting the parameters to increase or
decrease noise growth as needed. Thus we would like a way to dynamically log the empirical
error rates throughout a homomorphic computation.
In ALCHEMY, homomorphic operations happen at object-language runtime, so the
logging functionality also must happen at runtime. However, the accumulation of error rates
is an effect, so this functionality requires monads in the object language. The language
components for this collection of features were given in subsection 5.2.2. Note that these
features need not be used in top-level expressions; rather, we provide an interpreter which
logs error rates by inserting monadic operations from these language components. We
introduce the ErrorRateWriter interpreter for this purpose:
newtype ErrorRateWriter
intp -- | the underlying interpreter
k
w
e
a
-- | (reader) monad that supplies keys
-- | (writer) monad for logging error rates
-- | environment
-- | represented type
159
= ERW (k (intp (Monadify w e) (Monadify w a)))
type family Monadify w a where
Monadify w (a,b) = (Monadify w a, Monadify w b)
Monadify w (a -> b) = Monadify w a -> Monadify w b
Monadify w a = w a
type ErrorRateLog = [(String,Double)]
writeErrorRates :: (MonadWriter ErrorRateLog w,
MonadReader Keys k)
=> ErrorRateWriter intp z k w e a
-> k (intp (Monadify w e) (Monadify w a))
ErrorRateWriter represents expressions with object-language type a by a (monadic)
sub-expression using the intp interpreter with a “monadiﬁed" object-language type. The
Monadify type family pushes the writer monad w into the expression type, e.g., turning a
-> (b,c) into w a -> (w b, w c). If we instantiate intp with the evaluation interpreter E
and run both interpreters, we are left with a monadic Haskell function which dynamically
logs error rates. The log consists of a list of (String,Double) pairs. The Double is the
empirical error rate for an intermediate ciphertext, and the string serves as an annotation to
help identify the intermediate step within the larger expression.
To interpret a DSL operation, ErrorRateWriter uses the following steps:
1. Use one or more inputs to perform the operation with the inner intp interpreter,
producing a ciphertext.
2. Obtain the secret key used to encrypt the ciphertext using the k reader monad.
160
3. Compute the error rate of the ciphertext by passing the ciphertext and secret key to
errorRate_.
4. Append the error rate to a log using the monadic object-language features with the
writer monad w.
These steps are clear in the Add instance for ErrorRateWriter:
instance (Add expr ct, ...) =>
Add (ErrorRateWriter expr k w) (CT m zp (Cyc m’ zq)) where
add_ = ERW $ do
Just sk  String -> SK (Cyc m’ z)
-> expr e (CT m zp (Cyc m’ zq) -> mon ())
tellError str sk =
lam (tell_ $: (pair_ $: (LS.string_ str) $:
(errorRate_ sk $: v0)))
Notice that the ErrorRateWriter instance of Add is deﬁned only when the object language
type is a ciphertext. lookupKey uses the reader monad to obtain the correct key for this
ciphertext. The key is determined by the (inferred) type alone, so no arguments are needed.
We pass the result of adding the inputs with the intp interpreter to tellError. This helper
function uses errorRate_ to obtain the error rate of the input ciphertext v0, string_ to
turn the annotation into a DSL expression, and pair_ to glue these pieces together as an
161
object-language pair. tell_ logs this value using the object-language writer monad w. The
implementation for other language components is similar.
The effect of this interpreter is best seen with a simpliﬁed example; see chapter 6 for a
full example.
expr = lam $ add_ $: v0 $: v0
(ex1,ex) = dup expr
pprint ex1
-- "(\\v0 -> ((add v0) v0))"
(ex2,ex3) = dup $ runReader [] $ writeErrorRates ex
pprint $ ex2
-- \v0 -> bind (ap (fmap add v0) v0)
--
--
(\v1 -> bind (tell (pair "add_Q268440577" (errorRate v1)))
(\v2 -> pure v1))
(result,log) = runWriter $ eval ex3 $ encrypt 3
print log
-- [("add_",7.301429694065961e-7)]
This example uses the duplicator twice to get three copies of expr with three different inter-
preters. Concretely, the interpreters are P, ErrorRateWriter P k w, and ErrorRateWriter
E k w. We ﬁrst pretty-print ex1 to show the unmodiﬁed expression. Printing the result of
running ErrorRateWriter shows that ex2 is a new expression which is equivalent to the
original expression (note the ap (fmap v0) v0), but which additionally logs the error rate
of the output. Evaluating ex3 produces a list of pairs giving the error rate at each step of the
computation. Note that error rates near 0.5 indicate a decryption failure, and all subsequent
162
ciphertexts in the computation will have a similar error rate. Thus it isn’t hard to identify
precisely where the parameters are invalid.
While repeatedly evaluating an expression with different parameters to ﬁnd an optimal
parameter combination is possible, it’s a very tedious process. In section 5.5 we automate
parts of this process by using estimates for noise growth which we obtained by using this
interpreter.
5.5 Plaintext-to-Ciphertext Compiler
In this section we describe the design and implementation of a “plaintext-to-ciphertext”
compiler that, given an “in the clear” program in the plaintext DSL, interprets it as a
corresponding “homomorphic” program in the ciphertext DSL for BGV-style SHE. The
resulting program can in turn be handled by any ciphertext-DSL interpreter, such as the
evaluator, the pretty-printer, or another transformation like an optimizer or the error-rate
logger described in subsection 5.4.4. The compiler automatically generates all necessary
keys, hints and other auxiliary information, and input ciphertexts. And it statically (i.e.,
at compile time) infers the approximate noise rate of each ciphertext in the computation,
choosing appropriate moduli based on their “noise capacity,” and emitting a compile error if
the programmer has not provided moduli that have enough capacity.
5.5.1
Interface
The plaintext-to-ciphertext compiler is a data type PT2CT, deﬁned as follows:
newtype PT2CT
m’map
zqs
gad
ctex
mon
-- | list of (PT index 𝑚, CT index 𝑚′)
-- | list of coprime Z𝑞 components
-- | gadget type for key-switch hints
-- | ciphertext-DSL interpreter
-- | monad for creating keys/noise
163
e
a
-- | environment type
-- | plaintext type
= PC (mon (ctex (Cyc2CT m’map zqs e)
(Cyc2CT m’map zqs a)))
PT2CT is parameterized by several types, which are needed to transform from plaintext
operations to ciphertext operations:
• m’map is a mapping from (the indices of) plaintext cyclotomic rings to (the indices of)
their corresponding ciphertext rings;
• zqs is a list of types representing Z𝑞-components that can be multiplied (forming
product rings) to form ciphertext moduli;
• gad indicates what kind of decomposition “gadget” to use for creating and using
key-switch hints;
• ctex is the target ciphertext-DSL interpreter;
• mon is a monad in which keys and hints can be generated and accumulated;
• e is the usual notion of environment; and
• a is the type of the plaintext DSL expression.
Based on these parameters, PT2CT simply “wraps” a (monadic) ciphertext-DSL expression
of type (Cyc2CT m’map zqs a), interpreted by ctex.
Cyc2CT is a type family—i.e., a function from types to types—that converts an “in the
clear” plaintext type a to a corresponding “homomorphic” type. For example, it converts
the cyclotomic ring type (Cyc m zp) to the type of a ciphertext over the cyclotomic ring of
index (Lookup m m’map), with an appropriate ciphertext modulus (as determined by the
associated “noise rate;” see subsection 5.5.2 below.) Similarly, it converts the type a ->
b of a function by recursing on both arguments a, b. In this way, functions on plaintexts
164
(even higher-order ones) correspond to functions on ciphertexts of corresponding types. We
emphasize that all these type conversions occur statically at compile time, with no runtime
overhead.
The public interace of PT2CT is the function
pt2ct :: (MonadRandom mon, MonadAccum Keys mon,
MonadAccum Hints mon, ...)
=> PT2CT m’map zqs gadget ctex mon () a
-> mon (ctex () (Cyc2CT m’map zqs a))
which converts any closed PT2CT-expression of “plaintext” type a to a closed ctex-expression
of the corresponding “homomorphic” type. The MonadAccum constraints on pt2ct indicate
that the compilation must take place in a context which permits the accumulation of both
secret keys and key-switch hints. In subsection 5.5.3, we will see that PT2CT automatically
generates secret keys and hints (which requires randomness), and reuses them wherever pos-
sible for efﬁciency. Furthermore, the accumulated keys are used to encrypt plaintext values
to ciphertexts under the appropriate key, and to decrypt ciphertexts, e.g., for decrypting a
result or to log an intermediate error rate.
5.5.2 Tracking Noise, Statically
Many homomorphic operations, e.g., multiplication and ring switching, introduce (addi-
tional) noise into the resulting ciphertext. The amount of noise growth is a function of the
gadget, ciphertext ring, and the noise capacity of ciphertext modulus components. When
chaining multiple operations together, we must track the noise growth to ensure correct
homomorphic evaluation: if the noise rate grows too large, the result cannot be decrypted.
For a ﬁxed computation, we can work backwards from a target noise rate to determine the
maximum noise rate permitted in the input ciphertexts.
The PT2CT compiler performs this analysis statically, so there is no runtime overhead.
Given an expression and a target output noise rate (typically the maximum allowed for a
165
successful decryption), it infers the maximum allowable noise rate of a ciphertext at any
step in the computation.
In order to track this information, PT2CT annotates each occurrence of a cyclotomic ring
in the plaintext expression with a (type-level) natural number 𝑝. This value indicates that
the corresponding ciphertext should have noise rate 𝛼 ≤ 2−𝑝·𝑢, where 𝑢 is a global rational
constant representing one “unit” of noise. We introduce the data type PNoise p a to hold
this value, where p represents a natural number. When a is a cyclotomic ring, PNoise p a
represents a corresponding ciphertext with noise rate 𝛼 satisfying 𝑝 ≤ − lg 𝛼
𝑢 , which explains
the name “pNoise”. PT2CT compiles expressions involving annotated cyclotomic rings9
into a ciphertext expression which is guaranteed to satisfy the requirements on the noise
rates. The compiler achieves this guarantee by statically selecting ciphertext moduli which
are large enough to support the requested noise rate. For example, if a cyclotomic ring is
annotated with pNoise 𝑝, the corresponding ciphertext might need to be at least 𝑝 · 𝑢 + 𝑐
bits, for some constant 𝑐.