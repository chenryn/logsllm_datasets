3. Subtract the values from (2):
Unfortunately, we have identiﬁed two sources of error that
make this approach untenable. First, note that it relies heav-
ily on ping traﬃc taking a sub-path of that taken by the
Tor traﬃc. However, not all packets are treated equally;
we have observed that some networks treat ICMP and TCP
traﬃc diﬀerently, exhibiting signiﬁcantly diﬀerent latencies
for each, and in ways that we did not ﬁnd easy to predict.
Moreover, we found that some networks exhibited diﬀeren-
tial treatment for Tor traﬃc in particular. We ﬁnd this un-
surprising; given the perceived sensitive nature of Tor traf-
ﬁc, we expected network operators to, e.g., apply additional
2In particular, by default, Tor relays refuse to be both the
entry and exit node for a circuit.
Figure 1: A strawman approach consisting of an end-to-end
circuit (left) and direct RTT measurements (right). Unfor-
tunately, because Tor does not permit one-hop circuits, di-
rect RTT measurements would need to be performed using
ping; because ping can experience noticeably diﬀerent la-
tencies, the estimate of R(x, y) is likely to be inaccurate.
ﬁrewall or monitoring rules. But again, we were unable to
predictably determine how this special treatment aﬀected la-
tencies: sometimes we saw higher ping times than Tor, and
vice versa.
In summary, we ﬁnd that any technique that
mixes Tor and non-Tor traﬃc is subject to uncertainty in
path diﬀerences, and thus that only traﬃc over Tor should
be used.
The second threat to validity with the above strawman
is that it ignores the fact that, while processing Tor pack-
ets, each relay imposes a forwarding delay, which comprises
(at least) the time to swap to and from user-space, the time
the packet spends enqueued, and the time to decrypt and en-
crypt packets. Each of these time sinks is low in expectation,
but because they can introduce additive errors, forwarding
delays must at be at least partially accounted for. (We em-
pirically evaluate Tor forwarding delays in Section 4.3.)
Guided by these two observations, we next present the
design of Ting.
3.3 Ting Design
Ting determines the round-trip time between an arbitrary
pair of Tor relays (x, y).
It extends the above strawman
to operate strictly over Tor (instead of using incompatible
pings), and to account for Tor nodes’ forwarding delays.
With Ting, we run an echo client and server (s and d), but
run them on the same machine (or at least within the same
subnet); the key distinction being that the RTT from s to
an arbitrary host is equal to d’s RTT to the same host.
As described in Section 3.2, we must avoid mixing Tor and
ping measurements, but we also need the ability to isolate
the RTT between the nodes we control and those we do not
(x and y). Ideally, we could create a one-hop circuit through
x or y, but recall that Tor disallows this. To this end, we
locally run two Tor peers, w and z, both also hosted within
the same network as s and d.
While this may seem like an extensive measurement in-
frastructure, in practice, we simply run all four processes
on the same host h: the echo client and server (s and d)
and both of our Tor nodes (w and z). However, our design
extends to other conﬁgurations, as well.
Ting begins its measurement of R(x, y) by ﬁrst construct-
ing a full circuit Cx,y = (w, x, y, z), as in Figure 2(a). Ting
then attaches to Cx,y a TCP connection between s and d,
and measures the end-to-end RTT over this circuit. Let Fi
denote Tor node i’s forwarding delay. Then, because s, w,
z, and d are all running on the same host h, the overall RTT
can be expressed as:
TorMeasurement hostsxydsxyd291(a) The RTT across the full circuit.
(b) Isolating the RTT to x.
(c) Isolating the RTT to y.
Figure 2: An overview of Ting’s algorithm, capturing the steps necessary to isolate R(x, y) by building multiple circuits
through x and y. Circles represent Tor clients, while squares represent our echo client and server.
RCx,y (s, d) = R(h, h) + 2Fh + R(h, x)
+ 2Fx + R(x, y) + 2Fy
+ R(h, y) + 2Fh + R(h, h)
(1)
Each line of this equation represents a diﬀerent part of the
end-to-end path: the ﬁrst line represents the RTT from s to
w to x; the second line represents the RTT between x and
y; and the third line represents the RTT from y to z back
to our server d.
The above equation contains our target measurement, R(x, y),
but it also contains additional latency measurements; in par-
ticular, we must subtract the RTT over Tor from h to x and
from h to y. To measure the RTT to x, Ting creates the
circuit Cx = (w, x), as depicted in Figure 2(b), and likewise
for y, as in Figure 2(c). Attaching new TCP connections to
them and measuring the end-to-end RTTs gives us:
RCx (s, d) = 2R(h, h) + 4Fh + 2R(h, x) + 2Fx
RCy (s, d) = 2R(h, h) + 4Fh + 2R(h, y) + 2Fy
(2)
(3)
Observe that all three equations account for two forwarding
delays at their respective x and y nodes: this reﬂects the
fact that there is both a ping and a pong message sent in
opposite directions on the circuit.
All that remains is to calculate:
RCx (s, d)− 1
2
= R(x, y) + Fx + Fy
RCx,y (s, d) − 1
2
RCy (s, d)
(4)
We arrive at an estimate of the RTT between x and y with
an expected error equal to the sum of the forwarding de-
lays of the two nodes. The predominant factor in a node’s
forwarding delay is the number of other circuits and overall
load at that node. For instance, if our measurement packet
arrives at a node when our circuit is not ﬁrst in the sched-
ule, it will have to wait to be dequeued. To account for this,
every time we measure an RTT, we do not limit it to a sin-
gle sample; rather, we take multiple samples, and use the
minimum value. We describe in Section 4 that, in practice,
this results in minimum forwarding delays typically in the
range of 0–3ms; for most pairs of x and y, this is a negligible
error within the typical variation of latencies.
3.4 Properties
Ting has several features that make it a feasible and eﬀec-
tive measurement tool. Primarily, it operates strictly within
Tor, meaning that we can be relatively certain that all mea-
surement traﬃc will be treated equally: all packets will tra-
verse the same paths, and through the same software stacks.
As a result, the theoretical accuracy is high; although our ﬁ-
nal estimation (Eq. (4)) does not entirely eliminate forward-
ing delays, it accounts for them explicitly, and measures in
such a way as to minimize their impact.
Additionally, Ting is trivial to deploy: it does not require
any modiﬁcations to the Tor protocol, to existing nodes, or
even to a local Tor client. Moreover, it can be run on a
single host, as described above.
Finally, Ting can be applied to any pair of Tor nodes,
regardless of whether they are exit nodes. In all of Ting’s
circuits, we use a node we control (z) as the circuit’s exit
node.
In sum, Ting is a novel, easy to use tool that provides
unprecedented insight into the RTTs within the Tor net-
work. In the next section, we validate Ting empirically and
demonstrate that it can determine the latency of a pair of
Tor nodes in less than 15 seconds with high accuracy.
4. TING VALIDATION
In this section, we validate Ting along several dimensions.
First, using a set of globally distributed PlanetLab [21] nodes
as ground-truth, we measure Ting’s accuracy and evaluate
how many samples are necessary to minimize errors caused
by forwarding delays. Then, we turn to measuring Ting
on the real Tor network and demonstrate that it achieves
measurements that are consistent over time.
4.1 Ground-truth Testbed
In order to prove that Ting measurements are represen-
tative of the actual latency between two Tor servers, we
require a ground-truth to compare to. To this end, we ran
Tor relays on 31 PlanetLab [21] hosts. Further, to ensure
that these hosts realistically reﬂect the geographically di-
verse Tor network, we guided our selection of random hosts
such that:
• They covered a wide geographic area: 6 countries through-
out Europe, 9 states throughout the U.S., and at least
one relay in each of the following regions were repre-
sented: Asia, South America, Australia, and the Mid-
dle East.
• Their geographic distribution resembled that of the
current Tor network, which contains a concentration
TorMeasurement hostsdwzxysdwzxysdwzxy292Figure 3: CDF of Ting’s estimation for a given pair on Plan-
etLab relative to “real” latency values reported by ping.
Figure 4: CDF of Ting performance separated into diﬀerent
intervals based on real latency.
of relays in the U.S. and Europe, and only a few nodes
sparsely distributed throughout other countries.
• The latencies between all the pairs were unique and
ranged from very close (∼0ms) to nearly antipodal
(∼500ms).
We ran an unmodiﬁed version of Tor-0.2.4.22, with a re-
strictive exit policy that only allowed exiting to two speciﬁc
IP addresses under our control (to avoid take-down notices
to or from the institutions hosting the PlanetLab nodes). In
addition, we maintained the relays for over a month before
conducting our measurements in order to ensure that they
would be receiving standard usage and traﬃc patterns in
addition to our probe traﬃc, which we assume will be the
situation for any arbitrary relays we attempt to measure.
For all of our experiments, we performed our measure-
ments using two machines. The ﬁrst machine ran both our
client and server (s and d from Section 3). The client pro-
gram was written in Python and controlled a Tor onion
proxy (running a patched version of Tor-0.2.3.25) using the
Stem controller library [30]. The server program, also writ-
ten in Python, was an extremely minimal TCP-based echo
server.
The second machine ran two instances of an unmodiﬁed
version of Tor-0.2.4.22 to act as our relays w and z. To
demonstrate that Ting operates with minimal setup or mod-
iﬁcation, we allowed these two nodes to publish their descrip-
tors to the Tor directory authorities, but this is not neces-
sary; one can prevent Tor from publishing the descriptors
(by supplying “PublishDescriptors 0” in the torrc conﬁg-
uration ﬁle) and simply hard-code the descriptors (mainly,
the public keys) into the client’s descriptor list.
4.2 Ting Accuracy
To begin our validation of Ting, we measure the RTT be-
tween all 930 pairs of nodes from our 31-node testbed, and
compare these against direct, all-pairs ping measurements.
We probe each pair in a randomized order, taking 1000 Ting
samples3 followed immediately by 100 pings. As described
3We show in Section 4.4 that Ting can achieve comparable
accuracy with far fewer samples.
in Section 3, we use the minimum sample from both tech-
niques as their ﬁnal estimate of the pairs’ RTTs.
Figure 3 shows the distribution of the ratio between Ting’s
estimate and the ground-truth RTT measurement. In this
plot, an x-value of 1 represents perfect accuracy. For 91%
of the pairs, Ting’s estimates are within 10% of the true
value.4 Fewer than 2% of all estimates had an error greater
than 30%. The lack of an obvious skew to either side of
x = 1 indicates that Ting is eﬀective at ruling out the vast
majority of errors caused by forwarding delays.
Ting is able to obtain such high rates of accuracy in large
part because it is able to perform its measurements directly
through the nodes whose RTTs it seeks to ascertain.
In
comparison, King [11] used DNS resolvers near the nodes
it sought to measure, but could not completely account for
the latencies between resolvers and their respective clients;
as a result, King exhibits a distribution skewed to the left
of x = 1 [11, Fig. 5].
To understand if Ting’s accuracy is dependent on how
large the true end-to-end RTT is, we break up the accuracy
data into four latency regimes in Figure 4, based on the
ground-truth RTTs. These results show that Ting is more
accurate for pairs with greater end-to-end latency, as the
CDF for each successive range becomes increasingly vertical
and centered around x = 1, with the ﬁnal range of 250–
500ms having a nearly vertical curve at x = 1. We can also
observe that a majority of outliers (identiﬁed as tails on the
curve) come from pairs measured in the “ 250ms293Figure 5: Forwarding delays measured across 31 Tor relays.
Abnormal values indicate networks that treat ICMP, TCP,
and Tor traﬃc diﬀerently. For all other networks, Ting can
consistently ﬁnd low forwarding delays.
are known to exhibit high variance in their computation and
communication speeds.
To summarize, these ground-truth results show that Ting
provides an accurate method of estimating the round-trip
times between hosts on the Tor network without requiring
modiﬁcations to Tor or explicit participation from other Tor
users. Moreover, our experimental setup included nodes
that were geographically distributed and not dedicated to
our use—PlanetLab is a shared infrastructure. Thus, these
experiments additionally show that Ting’s accuracy is not
highly dependent on factors about the host which are out
of our control. This is an important implication moving
forward in assuming that Ting can be used to measure all
relays on the network.
4.3 Forwarding Delays
In Section 3.2, we made two claims about forwarding de-
lays that we now seek to validate: (1) that forwarding delays