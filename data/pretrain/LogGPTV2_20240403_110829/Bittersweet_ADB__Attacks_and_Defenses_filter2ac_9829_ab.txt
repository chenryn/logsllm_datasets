Even though the Android system protects private user data in
devices by checking application permissions, it is not enough to
prohibit private data leakage as we illustrate in this section.
580Message Tracking.
While Android requires applications have the RECEIVE_SMS or
READ_SMS permissions to access messages like SMS, MMS, and
internal messages from the Android system, applications with only
the INTERNET permission can access such messages via ADB.
Note that most messenger applications, mail clients, and SNS ap-
plications like Facebook notify incoming messages to users through
notiﬁcation bars. Because the dumpsys utility provides system data
including notiﬁcation information, the malware can read all the
messages from notiﬁcation bars.
Call Tracking.
In the Android system, in order for an application to get no-
tiﬁed of phone-call actions, it should register as a broadcast re-
ceiver for the actions. For example, if an application registers as
a broadcast receiver with the NEW_OUTGOING_CALL action, when
an outgoing call event occurs, the Android system broadcasts the
event, which notiﬁes the event to the receivers registered with the
NEW_OUTGOING_CALL action. However, our malware can catch call
actions without registering as a receiver. Using the dumpstate util-
ity via ADB, it can log all the call information by periodically col-
lecting broadcast intents and by choosing only the intents with the
call-related actions. Note that because not only making calls but
also sending messages, sending emails, pressing the camera but-
ton, and more actions can trigger broadcasting intents, similar ap-
proaches would be applicable to track such actions.
Private Database Access.
While Android allows applications to use private databases with-
out sharing them with other applications, our malware can access
private databases of other applications using ADB and the run-as
utility. The run-as utility changes the current UID and GID to
those of a speciﬁed application. As the UID and GID are changed to
the speciﬁed application, malware can have the same permissions
as the speciﬁed application, and thus it is able to access the pri-
vate database of the speciﬁed application. Even though the run-as
utility works for debuggable applications only, debuggable appli-
cations are not insigniﬁcant. We have collected 8,870 applications
from Google Play from February 2013 to August 2013, and we
found that 269 applications are debuggable. Due to these security
issues, Google Play rejects debuggable applications from Novem-
ber 2013, but debuggable applications already uploaded to Google
Play are still available to users unless they have been updated. More-
over, other Android markets than Google Play still accept debug-
gable applications for uploading.
SIM Information Leakage.
Most smartphones require the SIM card information to connect
to and communicate with networks, and SIM card contains a va-
riety of private data such as a phone number, IMSI (International
Mobile Subscriber Identity), ICCID (Integrated Circuit Card Iden-
tiﬁer), IMEI (International Mobile Equipment Identity), and SPN
(Service Provider Name). Because adversaries can utilize phone
numbers to infer user identities, the Android system requires ap-
plications have the android.permission.READ_PHONE_STATE
permission to obtain phone numbers. Also, adversaries have shown
various attacks that impersonate users by using the IMSI informa-
tion [17]. However, our malware can obtain the SIM information by
using the dumpstate utility via ADB even when it does not have
the READ_PHONE_STATE permission. Because the dumpstate util-
ity provides the SIM information without asking for a user’s con-
ﬁrmation, adversaries can perform the attacks silently.
3.3.2 Usage Monitoring
The Android system and applications keep several logs for de-
bugging or other purposes. A kernel driver called “logger” [1] in
the Android system records the main application logs, system event
information, phone-related information, and low-level system mes-
sages, which contains most usage information. Even though the
logs are inaccessible by user applications in general, our malware
can access them via ADB. We show only two attacks that moni-
tor network packets and users’ key events in this section but other
usage information is also accessible via ADB.
Packet Dump.
Because data exchanges of mobile devices over network contain
users’ usage information and they may also contain sensitive infor-
mation, dumping 3G/4G data packets is not possible unless phones
are rooted. If adversaries can dump data packets, they can steal cre-
dential data and they can also track users’ private activities such as
webpage visits. To our surprise, we found that some smartphones
provide powerful capabilities including network packet dumps in
a hidden menu. Using the ADB server with the input utility, our
malware can access the hidden menu and leverage hidden func-
tions there even without rooting devices. The “Packet log” function
in the hidden menu is disabled by default but once it is enabled,
it captures all the exchanging packets. Such captured packets are
stored in SD Card and adversaries can retrieve them even without
the required READ_EXTERNAL_STORAGE permission.
Keystroke Logging.
When a user touches the screen of a mobile device, a key event
occurs including the key action and the location of the touched
point. If an application running in background silently monitors all
the key events occurring on a device, it can steal credential infor-
mation without being noticed by users. Zhou et al. [29] developed
a touch screen keylogger by reading the Linux input driver ﬁles
such as /dev/input/event3. This attack is no longer possible
as this vulnerability has been patched. However, by leveraging the
getevent utility via ADB, our malware can read input driver ﬁles.
3.3.3 Behavior Interference
We presented attacks that do not interfere with the functionali-
ties of applications so far, and now we describe attacks that abuse
devices like modifying applications and locking screens.
Overbilling.
While applications must have the SEND_SMS and CALL_PHONE
permissions to make phone calls and SMS, respectively, our mal-
ware can perform an overbilling attack by using the am and input
utilities via ADB. First, the malware launches a system application
to send an SMS by issuing the following command:
am start -a android.intent.action.SENDTO
-d sms:
--es sms_body ""
--ez exit_on_sent true
which starts an SMS activity with a receiver’s phone number and
an SMS content. Then, it issues the following commands in order:
input keyevent 22; input keyevent 66;
input keyevent 3
where the ﬁrst moves the current focus to a Send button, the second
presses the button, and the third changes the current screen to the
home screen. Similarly for MMS, the malware can also make extra
billing by making many phone calls .
581Figure 1: Static analyzer that detects malicious applications using ADB
Application Modiﬁcation.
The Android system protects applications by requiring develop-
ers sign the applications with their private keys. Therefore, only
the developers of the applications should be able to modify them
for updates, and updates should be the only way to modify in-
stalled applications. Of course, the Android system should reject
any modiﬁcation to applications without the corresponding private
keys. However, by using the pm utility via ADB, our malware can
replace installed applications with fake applications without notify-
ing users. For example, the malware can ﬁrst uninstall the original
Facebook application and re-installs a fake Facebook application
that contains malicious functionalities. Once the fake Facebook ap-
plication is installed on a mobile devices, various private data such
as a list of friends and messages exchanged via the Facebook mes-
senger can be leaked via the fake application.
DoS Attack.
We can make a variety of DoS attacks on Android using ADB,
and here we present two such attacks: target application killing
and screen resizing. By using the wm utility via ADB, our malware
can repeatedly kill target applications. First, the malware checks
whether a target application is installed on a mobile device by using
the PackageManager class. If the target application is installed on
the device, it keeps killing the application every 5 seconds to pre-
vent users from using it. Also, our malware can modify the screen
size of a device using the wm utility via ADB as follows:
wm size  X 
By setting screen sizes too small or big, the malware can prohibit
users from using their devices. Note that no methods can restore
screen sizes and even rebooting devices cannot restore the sizes.
4. DEFENSES AGAINST ATTACKS USING
ADB
In this section, we present mitigation mechanisms to protect the
Android system against attacks using ADB capabilities.
4.1 Defense without Changes to Android
As a mitigation mechanism that does not require any changes
to Android, we propose a static analysis to detect possible attacks
using ADB capabilities. Based on our analysis of Android appli-
cations, we identiﬁed representative attack patterns using ADB as
illustrated in the attacks described in the previous section. To auto-
matically identify such attacks, we designed and developed a static
analyzer that performs a string analysis and a taint analysis as pre-
sented in Figure 1. After describing the high-level architecture of
the static analyzer, we present each of its components in detail.
Static Analyzer Overview.
The main purpose of the static analyzer is to extract a set of com-
mands sent to the ADB server by a string analysis, and to check
whether the private data resulted from performing such ADB com-
mands are delivered to outside of Android devices via socket APIs.
We built the analyzer on top of the state-of-the-art analysis frame-
works, WALA [13] and SCanDroid [7]. Our analyzer uses the front-
end of SCanDroid to take an APK ﬁle consisting of Dalvik byte-
code as its input and to translate it to WALA Intermediate Repre-
sentation (IR). Then, it performs base analyses like a “class hier-
archy analysis” and a “pointer analysis” using the WALA analysis
capabilities to aid our main malware detection analysis.
Backward Slicing.
Before the main string analysis, our analyzer ﬁrst performs back-
ward slicing to reduce the size of its analysis target. If we can
extract a subset of an input program that contributes to some tar-
get variables at a program point under consideration, analyzing the
subset would be more efﬁcient and precise than the entire program.
While a traditional backward slicing technique works quite well
for tracking primitive values, tracking the values of string objects
as in our analysis is not trivial. Because a string object has a char-
acter array, backward slicing of string objects requires backward
slicing of array objects, which tracks the construction sites of array
themselves instead of their elements. To perform a backward slic-
ing of array elements as well, we extended the traditional backward
slicing with modeling of methods in String and StringBuilder
classes. When the backward slicing encounters methods that cre-
ate values for character array elements, it keeps track the ﬂows for
array elements by using the modeling behavior.
Furthermore, for Android 3.0 and higher, network operations
should execute in different threads from the main thread [10]. While
the backward slicing works well for single threaded programs as
being extensively used for Java program analyses [27], it may not
be suitable for multi-threaded code like Android applications [25].
When a backward slicing for single threads cannot track data
ﬂows in a given thread, we extend the backward slicing to consider
data ﬂows in other multiple threads. Using the pointer analysis re-
sult from WALA, it ﬁrst collects all the possible objects that target
variables may have and collect the instructions that assign values to
the target variables in any threads. Performing such an inter-thread
slicing repeatedly until it reaches a ﬁxed point achieves a backward
slicing considering communications between multiple threads.
String Analysis.
The string analysis takes an ICFG built by the backward slicing
as its input and estimates a set of possible string values for the pa-
rameters of write. To address the asynchronous communications
between multiple threads, it performs two string analyses: a ﬂow-
insensitive analysis for threads not using network operations and a
ﬂow-sensitive analysis for threads using network operations. In or-
der to over-approximate string values on a shared memory between
multiple threads, it ﬁrst performs a ﬂow-insensitive string analysis
to estimate possible values of the variables on the shared memory.
582Then, using the analysis results as the initial state of the shared
memory, it performs a ﬂow-sensitive string analysis to estimate
possible string values of the parameters of write. Our string anal-
ysis provides sound results for asynchronous execution of multiple
threads. Because the ﬂow-insensitive string analysis result contains
all the possible values of the variables on the shared memory, it
soundly estimates concrete values constructed at run time. Also,
because the ﬂow-sensitive string analysis builds on top of the ﬂow-
insensitive string analysis, and it tracks data ﬂows between multiple
threads, the ﬁnal string analysis results are also sound.
Taint Analysis.
In addition to detecting string values leaked through the write