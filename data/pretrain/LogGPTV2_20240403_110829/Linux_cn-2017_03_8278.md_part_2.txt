```
sudo visudo
```
找到这一行：
```
Defaults env_reset
```
![env_reset](/data/attachment/album/201703/07/225427rwxa4nk0jyg4sg0n.png)
然后在这行最后添加以下变量：
```
Defaults env_reset,timestamp_timeout=[new-value]
```
`[new-value]` 为想要 `sudo` 会话持续的时间数。例如，设数值为 40。
![sudo timeout value](/data/attachment/album/201703/07/225428ga546rr5lrp4gcoa.png)
如果你希望每次使用 `sudo` 命令时都要求输入密码，你可以把这个变量赋值为 0 。想要 `sudo` 会话永远不过时，应赋值为 -1。
注意将 `timestamp_timeout` 的值赋为 “-1” 是强烈不推荐的。
### sudo 密码
你可能注意过，当 `sudo` 要求输入密码然后你开始输入时，不会显示任何东西 —— 甚至连常规的星号都没有。虽然这不是什么大问题，不过一些用户就是希望显示星号。
好消息是那有可能也很容易做到。所有你需要做的就是在 `/etc/sudoers` 文件里将下述的行：
```
Defaults        env_reset
```
改成
```
Defaults        env_reset,pwfeedback
```
然后保存文件。
现在，无论什么时候输入 `sudo` 密码，星号都会显示。
![hide the sudo password](/data/attachment/album/201703/07/225428sv6v406705v5z0wj.png)
### 一些重要的 sudo 命令行参数
除了 `-u` 命令行参数（我们已经在这篇教程的开始部分讨论过了），还有其他重要的 `sudo` 命令行参数值得注意。在这部分，我们将会讨论其中一些。
#### -k 参数
考虑下这种情况：输入密码后你刚刚运行了几个 `sudo` 驱动的命令。现在，如你所知，sudo 会话默认保持 15 分钟。假设在这会话期间，你需要让某些人访问你的终端，但你不想让他们可以使用 `sudo` ，你将会怎么做？
还好，有 `-k` 命令行参数允许用户取消 `sudo` 权限。这是 `sudo`  帮助页面   （    man page    ） 对此的解释：
> 
> `-k`, `--reset-timestamp`
> 
> 
> 不带任何命令使用时，撤销用户缓存的凭据。换句话讲，下一次使用 `sudo` 将会要求输入密码。使用这个参数不需要密码，也可以放到一个 `.logout` 文件中来撤销 sudo 权限。
> 
> 
> 当与一个命令，或者一个可能需要密码的操作一起用时，这个参数将会导致 `sudo` 忽略用户缓存的凭据。结果是 `sudo` 要求输入密码（如果这是被安全策略所要求的），而且不会更新用户缓存的凭据。
> 
> 
> 
#### -s 参数
有时你的工作要求你运行一堆需要 root 权限的命令，你不想每次都输入密码。你也不想通过改变 `/etc/sudoers` 文件调整 `sudo` 会话的过期时限。
这种情况下，你可以用 `sudo` 的 `-s` 参数。这是 `sudo` 帮助页面对此的解释：
> 
> `-s`, `--shell`
> 
> 
> 如果设置了 SHELL 环境变量或者调用用户的密码数据库指定了 shell，就运行该 shell 。如果指定了命令，命令将会通过 shell 的 `-c` 参数将命令传递给该 shell 执行。如果没有指定命令，会执行一个交互式 shell。
> 
> 
> 
所以，基本上这命令参数做的是：
* 启动一个新的 shell - 至于是哪一个 shell，参照 SHELL 环境变量赋值。如果 `$SHELL` 是空的，将会用 `/etc/passwd` 中定义的 shell。
* 如果你用 `-s` 参数传递了一个命令名（例如 `sudo -s whoami`），实际执行的是 `sudo /bin/bash -c whoami`。
* 如果你没有尝试执行其他命令（也就是说，你只是要运行 `sudo -s`），你将会得到一个有 root 权限的交互式的 shell。
请记住，`-s` 命令行参数给你一个有 root 权限的 shell，但那不是 root 环境 —— 还是执行的你自己的 `.bashrc` 。例如，在 `sudo -s` 运行的新 shell 里，执行 `whoami` 命令仍会返回你的用户名，而非 root 。
#### -i 参数
`-i` 参数跟我们讨论过的 `-s` 参数相像。然而，还是有点区别。一个重要的区别是 `-i` 给你的是 root 环境，意味着你的（用户的）`.bashrc` 被忽略。这就像没有显式地用 root 登录也能成为 root 。此外，你也不用输入 root 用户密码。
**重要**：请注意 `su` 命令也能让你切换用户（默认切换到 root ）。这个命令需要你输入 root 密码。为了避免这一点，你可以使用 `sudo` 执行它（`sudo su`），这样你只需要输入你的登录密码。然而，`su` 和 `sudo su` 有隐含的区别 —— 要了解它们，以及它们和 `sudo -i` 的区别，请看[这里](http://unix.stackexchange.com/questions/98531/difference-between-sudo-i-and-sudo-su) 。
### 总结
我希望现在你至少知道了 `sudo` 的基本知识，以及如何调整 `sudo` 的默认行为。请按我们解释过的那样去尝试调整 `/etc/sudoers` 。同时也浏览一下论坛讨论来更深入了解 `sudo` 命令。
---
via: 
作者：[Himanshu Arora](https://www.howtoforge.com/tutorial/sudo-beginners-guide/) 译者：[ypingcn](https://ypingcn.github.io/wiki/lctt) 校对：[jasminepeng](https://github.com/jasminepeng)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出