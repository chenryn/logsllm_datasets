i
e
m
T
r
e
fi
i
r
e
V
210 212 214 216 218 220
R1CS Instance Size
𝑝 = 219 − 1 (LPCP over F𝑝2; Encrypt over F𝑝2)
𝑝 = 219 − 1 (LPCP over F𝑝2; Encrypt over F𝑝)
𝑝 = 213 − 1 (LPCP over F𝑝2; Encrypt over F𝑝2)
𝑝 = 5 · 225 + 1 (LPCP over F𝑝; Encrypt over F𝑝)
Figure 1: Performance comparison for different instantiations of our scheme for supporting R1CS instances of different sizes. The solid lines correspond to
our primary instantiations using a linear PCP over F𝑝2 with a vector encryption scheme over F𝑝2. The dashed lines represent alternative instantiations using
a vector encryption over the base field F𝑝. In the case where the linear PCP is over the extension field and the vector encryption is over the base field, we first
apply Construction C.1 to obtain a linear PCP over the base field. We also consider a direct compilation from a linear PCP over F𝑝 using a vector encryption
scheme over F𝑝.
)
B
G
(
e
z
i
S
S
R
C
6
4
2
0
26 32 38 44 50 56
log |F|
80
60
40
20
0
)
B
K
(
e
z
i
S
f
o
o
r
P
F = F𝑝2
F = F𝑝
26 32 38 44 50 56
log |F|
F = F𝑝 (two digits)
Figure 2: CRS size and proof size as a function of the field size |F|, where
F is either a quadratic extension F𝑝2 or a base field F𝑝. The characteristic 𝑝
is chosen so F has the prescribed size. Parameters based on a SNARK over
F for an R1CS system with 220 constraints. For the F = F𝑝 setting, we also
consider the case where each coefficient in the linear PCP is represented by
two digits, each of size √𝑝. Elements with a non-filled marker (and a dotted
line) denote parameter settings where the modulus 𝑞 exceeds 128 bits.
setting without the digit decomposition. However, this comes at
the drawback of needing a longer CRS that is 1.7×–1.8× longer
(since each component of the CRS is now decomposed into two
components). Indeed, in this setting, the CRS size is comparable to
the CRS size for the extension field instantiation; it is slightly worse
due to the larger lattice parameters (some of which still scale based
on the field characteristic). Despite the improvements in proof size
obtained via the digit decomposition, the overall proof size is still
1.5×–2× longer than the proof size obtained from working over
extension fields.
We provide additional benchmarks in Appendix F.
Comparison with other schemes. Finally, we compare the per-
formance of our scheme with the most succinct pairing-based zk-
SNARK of Groth [75] as well as several recent post-quantum zk-
SNARKs: Ligero [5], Aurora [21], Fractal [47], ethSTARK [15, 101],
and Gennaro et al. [65]. With the exception of the lattice-based
scheme of Gennaro et al. [65], we measure the performance of each
scheme on the same system and with a single-threaded execution.
We use libsnark [96] for the implementation of Groth’s pairing-
based construction [75] and libiop [95] for the implementations
of Ligero [5], Aurora [21], and Fractal [47]. We use the ethSTARK
library [102] for the STARK implementation [101]. For each scheme,
we consider the default implementation provided by the library. We
note that these schemes export different base fields for the R1CS
which makes a direct comparison challenging. With the exception
of ethSTARK, we measure the performance of each scheme over
their preferred field for an R1CS system with a fixed number of con-
straints. In the case of ethSTARK, the current implementation only
supports verifying a hash chain computation (with the Rescue122
hash function [4, 25]). In our benchmarks, we choose the length of
the hash chain so that the size of the corresponding R1CS system
has the prescribed size. Specifically, the Rescue122 hash function
consists of 𝑟 = 10 rounds and operates over a state with 𝑚 = 12
field elements. The computation over each round can be encoded
as an R1CS system with 2𝑚 = 24 constraints. Thus, each hash com-
putation can be encoded as an R1CS system with 240 constraints.
We summarize our benchmarks in Table 1 and refer to Section 1 for
further discussion.
5 RELATED WORK
There has been a flurry of recent works studying the asymptotic
and concrete efficiency of succinct arguments. We survey several
families of constructions here and also include a comparison with
several representative schemes in Table 3. In the following, we use
𝑁 to denote the size of the NP relation being verified.
Linear PCPs and QAP-based constructions. Gennaro et al. [64] and
Bitansky et al. [30] described general frameworks for constructing
constant-size zkSNARKs from linear PCPs (specifically, from QAPs).
Several works have extended these frameworks [10, 31, 32, 53, 65,
75]. These constructions are the basis of numerous systems and
implementations [9, 18, 20, 23, 24, 42, 48, 54, 58, 59, 87, 105]. These
constructions offer the best succinctness, but this comes at the ex-
pense of needing an expensive, trusted, and language-dependent
setup, as well as a quasilinear-time prover.
Interactive oracle proofs. Following the seminal works of Kil-
ian [79] and Micali [84], a recent line of works [13–17, 21, 35, 36,
46, 47, 81] have shown how to construct zkSNARKs from short
PCPs [26], and their generalization, interactive oracle proofs (IOPs) [22,
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea223Prover
𝑁 log 𝑁
𝑁 log 𝑁
𝑁 log 𝑁
𝑁
𝑁
Verifier
|𝑥 |
Structure
Pairings
Pairings
Pairings
Pairings
Groups
PQ TP
PV
Proof Size
Asymptotic Concrete
Runtime
Cryptographic
1
1
1
log 𝑁
√
𝑁
log2 𝑁
128 B
704 B
1.1 KB
61 KB
142 KB
215 KB†
640 KB‡
127 KB§
16 KB
Groth [75]
Marlin [46]
Sonic [83]
Xiphos [99]
Spartan [97]
Fractal [47]
Gennaro et al. [65]∗
STARK [15]
This work∗
∗For the asymptotic estimates for the lattice-based constructions, we consider an instantiation over a field of size 2Ω(𝜆) (i.e., similar to the field
sizes in the group-based and pairing-based constructions).
†Proof sizes for Fractal measured using the implementation from libiop [95] with the default configuration over a 181-bit prime field. The
largest R1CS instance we could measure has 219 constraints, so this is the proof size we report here.
‡This number is for a circuit with 216 gates since the paper does not provide measurements for larger circuit sizes.
§This is the proof size for verifying a Rescue122 hash chain [4, 25] of length 4200 using the ethSTARK implementation [101, 102]. This computation
can be expressed as an R1CS instance with roughly 220 constraints (see Section 4.3). Since the ethSTARK implementation does not currently
support verifying general computations, we do not report performance metrics for the general setting.
|𝑥 | + log 𝑁
|𝑥 | + log 𝑁
|𝑥 | + log 𝑁
|𝑥 | + √
𝑁
|𝑥 | + log2 𝑁
|𝑥 |
|𝑥 | + log2 𝑁
𝑁 polylog(𝑁)
Random Oracle
Lattices
Random Oracle
Lattices
𝑁 log 𝑁
𝑁 log 𝑁
𝑁 log 𝑁
log2 𝑁
1
1
|𝑥 |
Table 3: Comparison with recent zkSNARKs for verifying an NP relations of size 𝑁 and statements of length |𝑥 |. For brevity, we focus on schemes that have
sublinear proof size and sublinear verification for general NP relations. Asymptotic running times and parameter sizes are given up to multiplicative poly(𝜆)
factors (where 𝜆 is the security parameter). For the “Concrete Proof Size” column, we report the approximate size of a proof for verifying an NP relation of
size 𝑁 ≈ 220 at the 128-bit security level (as reported in the respective works unless noted otherwise). The “PQ” column specifies whether the construction
). The “TP” column denotes whether the scheme is transparent ( ), relies on a trusted setup for a
is post-quantum secure ( ) or only classically secure (
universal CRS (
)
or designated-verifier (
). The “Cryptographic Structure” column describes the primary (algebraic) structure underlying the construction. We distinguish
between pairing groups and pairing-free groups by using “Groups” to denote the latter.
). The “PV” column specifies whether the argument is publicly-verifiable (
), or relies on a trusted sampling of a language-dependent CRS (
92]. These constructions rely on the Fiat-Shamir heuristic [57] to ob-
tain a non-interactive argument in the random oracle model. Many
IOP constructions have a transparent (i.e., non-trusted) setup, and
moreover, are plausibly post-quantum. Proof sizes for IOP-based
constructions typically range in the hundreds of kilobytes.
Bünz et al. [44] introduced polynomial IOPs, a generalization of
linear PCPs to the IOP setting, where on each round, the verifier has
oracle access to a bounded-degree polynomial. Polynomial IOPs can
be compiled into succinct arguments [46, 61, 83, 99] via polynomial
commitments. These schemes have excellent concrete succinctness
(a few hundred bytes to a few kilobytes), a universal or transparent
setup, but generally rely on pre-quantum assumptions.
MPC-in-the-head. Ishai et al. [77] introduced the “MPC-in-the-
head” paradigm for building zero-knowledge proofs from general
multiparty computation. The Ligero system [5] was the first argu-
ment with √
𝑁 size proofs in this framework. Bhadauria et al. [28]
combined Ligero with IOPs to reduce the proof size to polylog(𝑁).
Both constructions support sublinear verification for structured
circuits, but verification is linear for general circuits.
GKR-constructions. Another line of work starts from the suc-
cinct interactive argument for verifying arithmetic circuits by Gold-
wasser, Kalai, and Rothblum (GKR) [70] A sequence of works [51,
97, 103, 106, 108, 110, 111] have built on GKR to obtain efficient
non-interactive arguments for (layered) circuits (and often tailor-
ing to special structures for better concrete efficiency). In these
constructions, the size of the proof (and the verifier complexity)
typically scale with the depth of the circuit. An appealing feature
of these constructions is their low prover complexities: namely, the
cost of the prover scale linearly in the size of the NP relation (over
large fields). Zhang et al. [109] recently showed how to leverage