function) is to represent the function being computed as a Boolean or arithmetic circuit. In the case
of honest-majority MPC based on secret sharing, the arithmetic circuit (comprised of multiplication
and addition gates) is over a ﬁnite ﬁeld Zp with p > n, as above. We remark that arithmetic circuits
are Turing complete, and so any function can be represented in this form. The parties participating
in the MPC protocol are all provided this circuit, and we assume that they can all communicate
securely with each other. The protocol for semi-honest adversaries (see below for what is needed
for the case of malicious adversaries) consists of the following phases:
1. Input sharing: In this phase, each party shares its input with the other parties, using Shamir’s
secret sharing. That is, for each input wire to the circuit, the party whose input is associated
with that wire plays the dealer in Shamir’s secret sharing to share the value to all parties. The
secret sharing used is (t + 1)-out-of-n, with t = " n−1
t). This provides security against any minority of corrupted parties, since no such minority can
learn anything about the shared values. Following this step, the parties hold secret shares of
the values on each input wire.
2 # (thus, the degree of the polynomial is
2. Circuit evaluation: In this phase, the parties evaluate the circuit one gate at a time, from the
input gates to the output gates. The evaluation maintains the invariant that for every gate for
which the parties hold (t+1)-out-of-n sharings of the values on the two input wires, the result of
the computation is a (t+1)-out-of-n secret sharing of the value on the output wire of the gate.
(a) Computing addition gates: According to the invariant, each party holds a secret sharing of
the values on the input wires to the gate; we denote these polynomials by a(x) and b(x) and
this means that the i’th party holds the values a(i) and b(i). The output wire of this gate
should be a (t+1)-out-of-n secret sharing of the value a(0) + b(0). This is easily computed
by the i’th party locally setting its share on the output wire to be a(i) + b(i). Observe that
by deﬁning the polynomial c(x) = a(x) + b(x), this means that the i’th party holds c(i).
Furthermore, c(x) is a degree-t polynomial such that c(0) = a(0) + b(0). Thus, the parties
hold a valid (t+1)-out-of-n secret sharing of the value a(0) + b(0), as required. Observe that
no communication is needed in order to compute addition gates.
(b) Computing multiplication gates: Once again, denote the polynomials on the input wires
to the gate by a(x) and b(x). As for an addition gate, the i’th party can locally multiply
its shares to deﬁne c(i) = a(i) · b(i). By the properties of polynomial multiplication, this
deﬁnes a polynomial c(x) such that c(0) = a(0) · b(0). Thus, c(x) is a sharing of the correct
value (the product of the values on the input wires). However, c(x) is of degree-2t, and thus
this is a (2t+1)-out-of-n secret sharing and not a (t+1)-out-of-n secret sharing. In order to
complete the computation of the multiplication gate, it is therefore necessary for the parties
to carry out a degree reduction step, to securely reduce the degree of the polynomial shared
amongst the parties from 2t to t, without changing its value at 0. Before proceeding to
describe this, observe that since t < n/2, the shares held by the n parties do fully determine
the polynomial c(x) of degree 2t + 1.
In order to compute the degree reduction step, we use an idea from [12] (we describe the
basic idea here, although [12] have a far more eﬃcient way of realising it than what we
describe here). Assume that the parties all hold two independent secret sharings of an
unknown random value r, the ﬁrst sharing via a polynomial of degree-2t denoted R2t(x),
and the second sharing via a polynomial of degree-t denoted Rt(x). Note that R2t(0) =
Rt(0) = r. Then, each party can locally compute its share of the degree-2t polynomial
d(x) = c(x) − R2t(x) by setting d(i) = c(i) − R2t(i). Note that both c(x) and R2t(x) are of
degree-2t. Next, the parties reconstruct d(0) = a(0) · b(0) − r by sending all of their shares
to all other parties. Finally, the i’th party for all i = 1, . . . , n computes its share on the
output wire to be c′(i) = Rt(i) + d(0).
Observe that c′(x) is of degree t since Rt(x) is of degree t, and it is deﬁned by adding a
constant d(0) to Rt(x). Next, c′(0) = a(0) · b(0) since Rt(0) = r and d(0) = a(0) · b(0) − r;
thus r cancels out when summing the values. Thus, the parties hold a valid (t+1)-out-of-n
secret sharing of the product of the values on the input wires, as required. Furthermore,
note that the value d(0) that is revealed to all parties does not leak any information since
Rt(x) perfectly masks all values of c(x), and in particular it masks the value a(0) · b(0).
It remains to show how the parties generate two independent secret sharings of an unknown
random value r, via polynomials of degree 2t and t. This can be achieved by the i’th party, for
all i = 1, . . . , n, playing the dealer and sharing a random value ri via a degree-2t polynomial
Ri
t(x). Then, upon receiving such shares from each
of the parties, the i’th party for all i = 1, . . . , n deﬁnes its shares of R2t(x) and Rt(x) by
t (i). Since all parties contribute secret
j=1 rj, it follows that no party knows r.
computing R2t(i) =!n
2t(i) and Rt(i) =!n
random values r1, . . . , rn and we have that r =!n
2t(x) and via a degree-t polynomial Ri
j=1 Rj
j=1 Rj
3. Output reconstruction: Once the parties have obtained shares on the output wires, they can
obtain the outputs by simply sending their shares to each other and reconstructing the outputs
via interpolation. Observe that it is also possible for diﬀerent parties to obtain diﬀerent outputs,
if desired. In this case, the parties send the shares for reconstruction only to the relevant parties
who are supposed to obtain the output on a given wire.
The above protocol is secure for semi-honest adversaries, as long as less than n/2 parties are
corrupted. This is because the only values seen by the parties during the computation are secret
shares (that reveal nothing about the values they hide), and opened d(0) values that reveal nothing
about the actual values on the wires due to the independent random sharings used each time. Note
that in order to achieve security in the presence of malicious adversaries who may deviate from the
protocol speciﬁcation, it is necessary to utilise diﬀerent methods to prevent cheating. See [4,10,16]
for a few examples of how to eﬃciently achieve security in the presence of malicious adversaries.
4.3 Private Set Intersection
In Section 4.2, we described an approach to general secure computation that can be used to securely
compute any function. In many cases, these general approaches turn out to actually be the most
eﬃcient (especially when considering malicious adversaries). However, in some cases, the speciﬁc
structure of the function being solved enables us to ﬁnd faster, tailored solutions. In this and the
next section, we present two examples of such functions.
In a private set intersection protocol, two parties with private sets of values wish to ﬁnd the
intersection of the sets, without revealing anything but the elements in the intersection. In some
cases, some function of the intersection is desired, like its size only. There has been a lot of work
on this problem, with security for both semi-honest and malicious adversaries, and with diﬀerent
eﬃciency goals (few rounds, low communication, low computation, etc.). In this section, we will
describe the idea behind the protocol of [23]; the actual protocol of [23] is far more complex, but
we present the conceptually simple idea underlying their construction.
A pseudorandom function F is a keyed function with the property that outputs of the function
on known inputs look completely random. Thus, for any given list of elements x1, . . . , xn, the series
of values Fk(x1), . . . , Fk(xn) looks random. In particular, given Fk(xi), it is infeasible to determine
the value of xi. In the following simple protocol, we utilise a tool called oblivious pseudorandom
function evaluation. This is a speciﬁc type of MPC protocol where the ﬁrst party inputs k and
the second party inputs x, and the second party receives Fk(x) while the ﬁrst party learns nothing
about x (note that the second party learns Fk(x) but nothing beyond that; in particular, k remains
secret). Such a primitive can be built in many ways, and we will not describe them here.
Now, consider two parties with respective sets of private elements; denote them x1, . . . , xn and
y1, . . . , yn, respectively (for simplicity, we assume that their lists are of the same size, although this
is not needed). Then, the protocol proceeds as follows:
1. The ﬁrst party chooses a key k for a pseudorandom function.
2. The two parties run n oblivious pseudorandom function evaluations: in the ith execution,
the ﬁrst party inputs k and the second party inputs yi. As a result, the second party learns
Fk(y1), . . . , Fk(yn) while the ﬁrst party learns nothing about y1, . . . , yn.
3. The ﬁrst party locally computes Fk(x1), . . . , Fk(xn) and sends the list to the second party. It
can compute this since it knows k.
4. The second party computes the intersection between the lists Fk(y1), . . . , Fk(yn) and
Fk(x1), . . . , Fk(xn), and outputs all values yj for which Fk(yj) is in the intersection. (The
party knows these values since it knows the association between yj and Fk(yj).)
The above protocol reveals nothing but the intersection since the ﬁrst party learns nothing about
y1, . . . , yn from the oblivious pseudorandom function evaluations, and the second party learns noth-
ing about values of xj that are not in the intersection since the pseudorandom function hides the
preimage values. This is therefore secure in the semi-honest model. It is more challenging to achieve
security in the malicious model. For example, a malicious adversary could use a diﬀerent key for
the ﬁrst element and later elements, and then have the result that the value y1 is in the output if
and only if it was the ﬁrst element of the second party’s list.
The most eﬃcient private set intersection protocols today use advanced hashing techniques, and
can process millions of items in a few seconds [23,32,31].
4.4 Threshold Cryptography
The aim of threshold cryptography is to enable a set of parties to carry out cryptographic operations,
without any single party holding the secret key. This can be used to ensure multiple signatories on
a transaction, or alternatively to protect secret keys from being stolen by spreading key shares out
on diﬀerent devices (so that the attacker has to breach all devices in order to learn the key). We
demonstrate a very simple protocol for two-party RSA, but warn that for more parties (and other
schemes), it is much more complex.
RSA is a public-key scheme with public-key (e, N ) and private-key (d, N ). The basic RSA
function is y = xe mod N , and its inverse function is x = yd mod N . RSA is used for encryption
and signing, by padding the message and other techniques. Here, we relate to the raw RSA function,
and show how the inverse can be computed securely amongst two parties, where neither party can
compute the function itself. In order to achieve this, the system is set up with the ﬁrst party holding
(d1, N ) and the second party holding (d2, N ), where d1 and d2 are random under the constraint
that d1 + d2 = d. (More formally, the order in the exponent is φ(N ) – Euler’s function – and
therefore the values d1, d2 ∈ Zφ(N ) are random under the constraint that d1 + d2 = d mod φ(N ).)
In order to securely compute yd mod N , the ﬁrst party computes x1 = yd1 mod N , the second
party computes x2 = yd2 mod N , and these values are exchanged between them. Then, each party
computes x = x1 · x2 mod N , veriﬁes that the output is correct by checking that xe = y mod N ,
and if yes outputs x. Observe that this computation is correct since
x = yd1 · yd2 mod N = yd1+d2 mod φ(N ) mod N = yd mod N.
In addition, observe that given the output x and its share d1 of the private exponent, the ﬁrst
party can compute x2 = x/yd1 mod N (this is correct since x2 = yd2 = yd1+d2−d1 = yd · y−d1 =
x/yd1 mod N ). This means that the ﬁrst party does not learn anything more than the output from
the protocol, since it can generate the messages that it receives in the protocol by itself from its
own input and the output.
We stress that full-blown threshold cryptography supports quorum approvals involving many
parties (e.g., requiring (t+1)-out-of-n parties to sign, and maintaining security for any subset of
t corrupted parties). This needs additional tools, but can also be done very eﬃciently; see, [35]
and references within. Recently, there has been a lot of interest in threshold ECDSA, due to its
applications to protecting cryptocurrencies [26,17,27,14].
4.5 Dishonest-Majority MPC
In Section 4.2, we described a general protocol for MPC that is secure as long as an adversary
cannot corrupt more than a minority of the parties. In the case of a dishonest majority, including
the important special case of two parties (with one corrupted), completely diﬀerent approaches
are needed. There has been a very large body of work in this direction, from the initial protocols
of [37,18,2] that focused on feasibility, and including a lot of recent work focused on achieving
concrete eﬃciency. There is so much work in this direction that any attempt to describe it here
will do it a grave injustice. We therefore refer the reader to [15] for a description of the main
approaches, including the GMW oblivious transfer approach [18,21], garbled circuits [37,2], cut-
and-choose [28], SPDZ [13], TinyOT [29], MPC in the head [22], and more. (We stress that for each
of these approaches, there have been many follow-up works, achieving increasingly better eﬃciency.)