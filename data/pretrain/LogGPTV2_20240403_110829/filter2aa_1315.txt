#BHUSA @BlackHatEvents
To Flexibly Tame Kernel 
Execution With Onsite Analysis 
Xuhua Ding 
Singapore Management University
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Outline
• Review of existing dynamic kernel analysis techniques
• Introduction of the onsite analysis infrastructure (OASIS)
• Analysis primitives provided by OASIS
• Two examples of OASIS analyzers: function monitor and 
control flow tracer
• Discussions
2
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Existing Approach 1: Code Instrumentation
Static code instrumentation:
• Linux kernel cooperates with GCC to add Kernel Coverage (KCOV) and 
Kernel Address SANitizer(KASAN) code into the kernel image at 
compilation time.
• KDB, KGDB
Dynamic Binary Instrumentation (DBI)
• DBI has been applied to kernel analysis as well: Cobra [S&P'06], PinOS
[VEE’07], GILK [TOOLS’02], PEMU [VEE’15].
3
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Code Instrumentation
The Idea: to mix the analysis code and the kernel code into one 
binary. 
Pros: native control, introspection and modification
Cons: intrusive, no/weak transparency or security
kernel code
kernel code
analysis code
Share execution flow and 
address space
4
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Existing Approach 2: Hardware-assisted Analysis
Hypervisor based on Hardware Virtualization (VT-x)
• Ether [CCS’08], Gateway [NDSS’11], Spider [ACSAC’13]
Intel SMM + Performance Monitoring Unit (PMU)
• MALT [S&P’15]
TrustZone + ARM debugging facilities 
• Ninja [USENIX Security’17]
5
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Hardware-assisted Analysis
The Idea: to trap the target to an isolated and more privileged environment, 
e.g., x86 VMX root mode, SMM mode, or ARM SecureWorld
Pros: transparency and security
Cons: inflexibility to control and introspect
- when/where to trigger the event
- introspection with semantic gap 
Target
Analyzer
Hardware 
event
trap
Low privilege
High privilege
6
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Can we combine the best of the two approaches 
without their drawbacks?
Transparency
Security
Native control, introspection,
& modification
7
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
What about this ...
We interleave the target's instruction stream with the analyzer's 
without mingling their code.
8
target execution
target execution
analysis execution
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Execution Flow Instrumentation (EFI)
Onsite Analysis: The analyzer analyzes the target 
"as if" it were one part of the target.
• The analyzer dynamically chooses the site(s) of 
instruction flow interleaving.
• No CPU mode/privilege switches between the 
target and the analyzer.
• One-way address space isolation. The target’s 
address space is accessible to the analyzer, but 
not vice versa. 
Analyzer
Analyzer-Target
Address Space
control flow 
transfer
control flow 
transfer
Target
Target Address 
Space
9
Secure
Transparent
Native access
Cross-space
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
System Overview
OASIS: Onsite AnalySis InfraStructure
• The target kernel runs in a guest virtual 
machine.
• OASIS empowers an onsite analysis application 
to read/write/control a captured live kernel 
thread.
• Most of OASIS is implemented as a host Linux 
kernel module running in tandem with KVM. 
Onsite Environment.
• A dedicated CPU core
• a special paging hierarchy
10
OASIS
Guest VM
Onsite 
Environme
nt
Host 
Linux
Target
OASIS-Lib
Analyzer/Target
App
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Workflow of an Onsite Analyzer
The top-level workflow
• Target thread export, onsite analysis, target thread restore. 
Onsite Analysis
• Analyzer execution, target execution, analyzer execution, target execution, ... 
11
onsite 
core
target 
core
analyzer
target
OASIS Manager
target
target
analyzer
analyzer
export
restore
exit
entry
Guest VM
Onsite 
Environment
onsite analysis
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Primitive 1: Read/Write Kernel Memory
• Application developer treats the kernel memory as part of her analyzer’s 
memory.
• Direct memory reference using kernel virtual addresses;
• Standard userspace APIs can be used.
12
void ∗ target_addr = 0xffffffff816f3090;
struct file_security_struct obj;
memcpy(target_addr, &obj, sizeof(struct
file_security_struct));
//memcpy(&obj, target_addr, sizeof(struct
file_security_struct));
write to kernel memory
read kernel memory
analyzer
kernel
memory
direct 
reference
kernel VA
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Primitive 2: Hijack Target Execution
INT3 Probe for code breakpoint
• Replace one byte at the concerned kernel 
code with the int3 (0xCC) instruction.
• The interrupt handler transfers the control to 
OASIS Exit-Gate, a sequence of instructions 
that switch the underlying mapping so that 
the analyzer controls the CPU.
13
OASIS Exit-Gate
g
so that the target continues its execution
nsite environment context.
e onsite environment, the target directly
memory-mapped I/O regions and DMA
However, port I/O operations and inter-
se virtual addresses and hence require
e design is dependent on the underlying
ed by the host OS to the guest.
O requests are trapped to the hypervisor
QEMU to execute. When the hardware
external interrupt is delivered to QEMU
ervisor to inject the interrupt into vCPU
OASIS, the idea is to use the Manager
e I/O operations on behalf the target.
tion in the onsite core is trapped to the
page which is mapped as writable unde
the analyzer to ﬂexibly customize the en
Lib data page is used to save registers an
transferring to destinations more than tw
gates.
1. movq %rax, $rax_bak ;save rax
2. movq %rcx,  $rcx_bak ;save rcx
3. movq $0x0, %rax ; EPT switch
4. movq $0x9, %rcx ; 9 for A-EPT
5. vmfunc
; switch to analyzer/target
6. jmpq *off_ana(%rip) ;to analyzer
(a) Exit-gate
1. movq $0
2. movq $0
3. vmfunc
4. lea 0x6(
5. lea (%ra
6. jmpq *%
7. movq $r
8. movq $r
9. nop
; n
....
31.jmpq *o
paging 
hierarchy 
switch by 
an EPT 
switch
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Primitive 2: Hijack Target Execution
JMP Probe for control flow tracing
• Replace 13 bytes at the concerned 
kernel code with: REX.W ljmp
*offset(%rip)
• The long-jump instruction transfers the 
control to OASIS Exit-Gate via a call gate 
in the GDT.
Event interception
• A JMP probe is inserted to the entry of 
the corresponding handlers.
14
OASIS Exit-Gate
g
so that the target continues its execution
nsite environment context.
e onsite environment, the target directly
memory-mapped I/O regions and DMA
However, port I/O operations and inter-
se virtual addresses and hence require
e design is dependent on the underlying
ed by the host OS to the guest.
O requests are trapped to the hypervisor
QEMU to execute. When the hardware
external interrupt is delivered to QEMU
ervisor to inject the interrupt into vCPU
OASIS, the idea is to use the Manager
e I/O operations on behalf the target.
tion in the onsite core is trapped to the
page which is mapped as writable unde
the analyzer to ﬂexibly customize the en
Lib data page is used to save registers an
transferring to destinations more than tw
gates.
1. movq %rax, $rax_bak ;save rax
2. movq %rcx,  $rcx_bak ;save rcx
3. movq $0x0, %rax ; EPT switch
4. movq $0x9, %rcx ; 9 for A-EPT
5. vmfunc
; switch to analyzer/target
6. jmpq *off_ana(%rip) ;to analyzer
(a) Exit-gate
1. movq $0
2. movq $0
3. vmfunc
4. lea 0x6(
5. lea (%ra
6. jmpq *%
7. movq $r
8. movq $r
9. nop
; n
....
31.jmpq *o
paging 
hierarchy 
switch by 
an EPT 
switch
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
ution
ectly
DMA
inter-
quire
lying
visor
ware
EMU
CPU
nager
arget.
o the
arget
p g
pp
the analyzer to ﬂexibly customize the entry-gate. An OASIS-
Lib data page is used to save registers and to facilitate control
transferring to destinations more than two GB away from the
gates.
1. movq %rax, $rax_bak
;save rax
2. movq %rcx,  $rcx_bak ;save rcx
3. movq $0x0, %rax ; EPT switch
4. movq $0x9, %rcx ; 9 for A-EPT
5. vmfunc
; switch to analyzer/target
6. jmpq *off_ana(%rip) ;to analyzer
(a) Exit-gate
1. movq $0x0, %rax ; EPT switch
2. movq $0x0, %rcx ; 0 for T-EPT
3. vmfunc
; switch to target/lib
4. lea 0x6(%rip), %rax ; rax points to line 7
5. lea (%rax, %rcx, 4), %rax ;adjust rax
6. jmpq *%rax ; jmp to Line7 if rcx=0;
7. movq $rax_bak, %rax ; restore rax
8. movq $rcx_bak, %rcx ;restore rcx
9. nop
; nop slide (22 nops)
....
31.jmpq *off_tar(%rip) ; to target addr
(b) Entry-gate
Fig 7
Assembly code of the exit gate that passes the control to the analyzer
Primitive 3: Resume Target Execution
Resuming the target.
• Analyzer prepares the CPU context for 
the target execution (including RIP)
• It returns the control to the target by 
jumping to OASIS Entry-Gate, a 
sequence of instructions that switches 
the underlying mappings so that the 
target gets the control. 
15
OASIS Entry-Gate
switch to 
target’s 
paging 
hierarchy
jump to the 
target 
destination
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Example 1: Kmalloc() monitoring
• To analyze how kmalloc() is called in a kernel thread
16
void main ()
{
//initialization
....
OASIS_set_INT3(kmalloc_addr);
OASIS_resume_targ(&CPU);
return;
}
void int3_handler()
{
//analysis workload
...
if (end)
OASIS_rm_INT3(&kmalloc_addr);
OASIS_resume_targ(&CPU);
return; 
}
The handler function is called when the INT3-probe is encountered in the target 
kernel thread execution inside the onsite environment.
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Example 2: Control Flow Tracing
• To track the control flow of the target from the capturing point
17
void main ()
{
//initialization
....
OASIS_set_JMP(bb_exit);
OASIS_resume_targ(&CPU);
return;
}
void jmp_handler(){
...   //analysis workload
...   //find next block to run
//remove the current one
OASIS_rm_JMP(bb_exit);
//set the new prob
OASIS_set_JMP(next_bb_exit);
// resume target from the next block.
OASIS_resume_targ(&CPU);
return;
}
block n
block 
n+1
block 
n+2
handler
Target
handler
Analyzer
jmp probe
jmp probe
jmp probe
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Demo 1: Introspection (Screenshot)
18
Target in Guest VM
Output from guest kernel
Analyzer in host
same content
same content
reference
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Demo 2: Breakpoint + tracing (screenshot)
19
Target in Guest VM
Output from guest kernel
Analyzer in host
1st triggering 
2nd triggering 
5 bbs traced
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Discussions
Potential Applications: 
• Virtual machine introspection
• Kernel debugger
• Cross-space malware analysis
• Attack scene forensics and 
response
20
Features: 
• Thread-centric, “surgical” 
analysis,
• Not for large-scale code-centric 
analysis such as profiling
• Strong security and 
transparency 
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Future Work
More primitives
• data breakpoint, multi-core
Migration to ARM Platform
• Feasible. 
• Caveat: ARM does not have vmfunc instruction. A user space 
program cannot issue hypercalls.
21
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
Black Hat Sound Bytes 
1. With OASIS, one can easily develop and run a user-space
onsite analyzer to dynamically and natively read, write and control 
a user/kernel thread in a VM. 
•
No modification of the kernel is needed. No instrumentation. 
•
Strong security and transparency.
2. Suitable applications for onsite analyzers:
•
VMI, kernel debugging, cross-space malware analysis, live kernel 
forensics, incident response etc.
22
#BHUSA @BlackHatEvents
Information Classification: General
SMU Classification: Restricted
• Jiaqi Hong, Xuhua Ding, "A Novel Dynamic Analysis Infrastructure to 
Instrument Untrusted Execution Flow Across User-Kernel Spaces", IEEE 
Symposium on Security and Privacy, 2021
• OASIS resources: https://github.com/OnsiteAnalysis/OASIS 
23
Reference
#BHUSA @BlackHatEvents
PI:EMAIL