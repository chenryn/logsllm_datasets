#BHUSA @BlackHatEvents
**To Flexibly Tame Kernel Execution with Onsite Analysis**

**Xuhua Ding, Singapore Management University**

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

## Outline
- Review of existing dynamic kernel analysis techniques
- Introduction to the onsite analysis infrastructure (OASIS)
- Analysis primitives provided by OASIS
- Two examples of OASIS analyzers: function monitor and control flow tracer
- Discussions

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Existing Approach 1: Code Instrumentation

#### Static Code Instrumentation
- **Linux Kernel and GCC:** The Linux kernel can be compiled with additional code for Kernel Coverage (KCOV) and Kernel Address SANitizer (KASAN).
- **Tools:** KDB, KGDB

#### Dynamic Binary Instrumentation (DBI)
- **Applications in Kernel Analysis:** Cobra [S&P'06], PinOS [VEE’07], GILK [TOOLS’02], PEMU [VEE’15]

**Code Instrumentation:**
- **Idea:** Integrate analysis code into the kernel binary.
- **Pros:** Native control, introspection, and modification.
- **Cons:** Intrusive, lacks transparency and security.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Existing Approach 2: Hardware-assisted Analysis

#### Hypervisor-based on Hardware Virtualization (VT-x)
- **Tools:** Ether [CCS’08], Gateway [NDSS’11], Spider [ACSAC’13]

#### Intel SMM + Performance Monitoring Unit (PMU)
- **Tool:** MALT [S&P’15]

#### TrustZone + ARM Debugging Facilities
- **Tool:** Ninja [USENIX Security’17]

**Hardware-assisted Analysis:**
- **Idea:** Trap the target to an isolated, more privileged environment (e.g., x86 VMX root mode, SMM mode, or ARM SecureWorld).
- **Pros:** Transparency and security.
- **Cons:** Inflexibility in control and introspection.
- **Challenges:** Determining when/where to trigger events and handling semantic gaps.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Combining the Best of Both Approaches

**Can we achieve transparency, security, native control, and introspection without the drawbacks?**

**Proposed Solution:**
- Interleave the target's instruction stream with the analyzer's without mixing their code.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Execution Flow Instrumentation (EFI)

**Onsite Analysis:**
- **Analyzer Integration:** The analyzer analyzes the target as if it were part of the target.
- **Dynamic Control:** The analyzer dynamically selects the interleaving sites.
- **No Privilege Switches:** No CPU mode/privilege switches between the target and the analyzer.
- **Address Space Isolation:** One-way isolation where the analyzer can access the target's address space but not vice versa.

**Secure, Transparent, Native Access, Cross-space**

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### System Overview

**OASIS: Onsite AnalySis Infrastructure**
- **Target Environment:** The target kernel runs in a guest virtual machine.
- **OASIS Functionality:** Empowers an onsite analysis application to read/write/control a live kernel thread.
- **Implementation:** Mostly as a host Linux kernel module running with KVM.
- **Onsite Environment:** Dedicated CPU core and a special paging hierarchy.

**Architecture:**
- **Components:** OASIS, Guest VM, Onsite Environment, Host Linux, Target, OASIS-Lib, Analyzer/Target App

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Workflow of an Onsite Analyzer

**Top-level Workflow:**
- **Steps:** Target thread export, onsite analysis, target thread restore.

**Onsite Analysis:**
- **Execution Flow:** Analyzer execution, target execution, analyzer execution, target execution, ...

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Primitive 1: Read/Write Kernel Memory

- **Application Developer:** Treats kernel memory as part of the analyzer’s memory.
- **Direct Memory Reference:** Uses kernel virtual addresses.
- **Standard APIs:** Can be used for memory operations.

**Example:**
```c
void *target_addr = 0xffffffff816f3090;
struct file_security_struct obj;
memcpy(target_addr, &obj, sizeof(struct file_security_struct));
// memcpy(&obj, target_addr, sizeof(struct file_security_struct));
```

**Operations:**
- **Write to Kernel Memory**
- **Read from Kernel Memory**

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Primitive 2: Hijack Target Execution

**INT3 Probe for Code Breakpoint:**
- **Mechanism:** Replace one byte of kernel code with the `int3` (0xCC) instruction.
- **Interrupt Handler:** Transfers control to OASIS Exit-Gate, which switches mappings to give control to the analyzer.

**JMP Probe for Control Flow Tracing:**
- **Mechanism:** Replace 13 bytes of kernel code with `REX.W ljmp *offset(%rip)`.
- **Control Transfer:** Long-jump instruction transfers control to OASIS Exit-Gate via a call gate in the GDT.
- **Event Interception:** JMP probe inserted at the entry of corresponding handlers.

**Paging Hierarchy Switch:**
- **Switch Mechanism:** EPT switch

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Primitive 3: Resume Target Execution

- **Context Preparation:** Analyzer prepares the CPU context for the target execution (including RIP).
- **Control Transfer:** Jumps to OASIS Entry-Gate, which switches mappings to give control back to the target.

**Paging Hierarchy Switch:**
- **Switch Mechanism:** Switch to target’s paging hierarchy and jump to the target destination.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Example 1: Kmalloc() Monitoring

- **Objective:** Analyze how `kmalloc()` is called in a kernel thread.

**Code:**
```c
void main() {
    // Initialization
    ...
    OASIS_set_INT3(kmalloc_addr);
    OASIS_resume_targ(&CPU);
    return;
}

void int3_handler() {
    // Analysis workload
    ...
    if (end) {
        OASIS_rm_INT3(&kmalloc_addr);
        OASIS_resume_targ(&CPU);
    }
    return;
}
```

**Handler Function:**
- **Triggered:** When the INT3-probe is encountered in the target kernel thread execution inside the onsite environment.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Example 2: Control Flow Tracing

- **Objective:** Track the control flow of the target from the capturing point.

**Code:**
```c
void main() {
    // Initialization
    ...
    OASIS_set_JMP(bb_exit);
    OASIS_resume_targ(&CPU);
    return;
}

void jmp_handler() {
    // Analysis workload
    ...
    // Find next block to run
    OASIS_rm_JMP(bb_exit);
    OASIS_set_JMP(next_bb_exit);
    OASIS_resume_targ(&CPU);
    return;
}
```

**Control Flow:**
- **Block Sequence:** Block n, Block n+1, Block n+2
- **Handler Functions:** Handle jumps and resume target execution.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Demo 1: Introspection (Screenshot)

- **Target in Guest VM:**
  - Output from guest kernel
- **Analyzer in Host:**
  - Same content, same reference

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Demo 2: Breakpoint + Tracing (Screenshot)

- **Target in Guest VM:**
  - Output from guest kernel
- **Analyzer in Host:**
  - 1st triggering, 2nd triggering, 5 basic blocks traced

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Discussions

**Potential Applications:**
- Virtual machine introspection
- Kernel debugger
- Cross-space malware analysis
- Attack scene forensics and response

**Features:**
- Thread-centric, "surgical" analysis
- Not suitable for large-scale code-centric analysis like profiling
- Strong security and transparency

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Future Work

**More Primitives:**
- Data breakpoint, multi-core support

**Migration to ARM Platform:**
- **Feasibility:** Yes
- **Caveat:** ARM does not have the `vmfunc` instruction. User space programs cannot issue hypercalls.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### Black Hat Sound Bytes

1. **With OASIS:**
   - Easily develop and run a user-space onsite analyzer to dynamically and natively read, write, and control a user/kernel thread in a VM.
   - No kernel modification or instrumentation needed.
   - Strong security and transparency.

2. **Suitable Applications:**
   - VMI, kernel debugging, cross-space malware analysis, live kernel forensics, incident response, etc.

---

#BHUSA @BlackHatEvents
**Information Classification: General**
**SMU Classification: Restricted**

### References

- **Paper:** Jiaqi Hong, Xuhua Ding, "A Novel Dynamic Analysis Infrastructure to Instrument Untrusted Execution Flow Across User-Kernel Spaces", IEEE Symposium on Security and Privacy, 2021
- **OASIS Resources:** [GitHub](https://github.com/OnsiteAnalysis/OASIS)

---

#BHUSA @BlackHatEvents
**PI:EMAIL**