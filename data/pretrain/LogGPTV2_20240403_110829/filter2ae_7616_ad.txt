        websUrlHandlerType  *sp;
        int                 len;
        a_assert(urlPrefix);
        a_assert(handler);
    /*
     *  Grow the URL handler array to create a new slot
     */
        len = (websUrlHandlerMax + 1) * sizeof(websUrlHandlerType);
        if ((websUrlHandler = brealloc(B_L, websUrlHandler, len)) == NULL) {
            return -1;
        }
        sp = &websUrlHandler[websUrlHandlerMax++];
        memset(sp, 0, sizeof(websUrlHandlerType));
        sp->urlPrefix = bstrdup(B_L, urlPrefix);
        sp->len = gstrlen(sp->urlPrefix);
        if (webDir) {
            sp->webDir = bstrdup(B_L, webDir);
        } else {
            sp->webDir = bstrdup(B_L, T(""));
        }
        sp->handler = handler;
        sp->arg = arg;
        sp->flags = flags;
    /*
     *  Sort in decreasing URL length order observing the flags for first and last
     */
        qsort(websUrlHandler, websUrlHandlerMax, sizeof(websUrlHandlerType), 
            websUrlHandlerSort);
        return 0;
    }
先定义了结构体指针sp，然后计算了长度len，分配内存空间，根据websUrlHandlerMax计算偏移，然后给sp结构体赋值，最后就是对所有的url
handler进行个排序。
回到initWebs，分别有这几种，安全处理程序，表单处理程序和默认网页处理程序，默认主页创建处理程序
    websUrlHandlerDefine(T(""), NULL, 0, websSecurityHandler, WEBS_HANDLER_FIRST);
    websUrlHandlerDefine(T("/goform"), NULL, 0, websFormHandler, 0);
    websUrlHandlerDefine(T("/cgi-bin"), NULL, 0, websCgiHandler, 0);
    websUrlHandlerDefine(T(""), NULL, 0, websDefaultHandler, WEBS_HANDLER_LAST);
    websUrlHandlerDefine(T("/"), NULL, 0, websHomePageHandler, 0); 
接下来我们要找到其是如何调用的这些handler，我们对全局变量websUrlHandler进行搜索，最后找到其在handler.c的websUrlHandlerRequest(webs_t
wp)函数中找到了其调用方式。
**websUrlHandlerRequest(webs_t wp)**
    /******************************************************************************/
    /*
     *  See if any valid handlers are defined for this request. If so, call them
     *  and continue calling valid handlers until one accepts the request. 
     *  Return true if a handler was invoked, else return FALSE.
     */
    int websUrlHandlerRequest(webs_t wp)
    {
        websUrlHandlerType  *sp;
        int                 i, first;
        a_assert(websValid(wp));
    /*
     *  Delete the socket handler as we don't want to start reading any
     *  data on the connection as it may be for the next pipelined HTTP/1.1
     *  request if using Keep Alive
     */
        socketDeleteHandler(wp->sid);
        wp->state = WEBS_PROCESSING;
        websStats.handlerHits++;
        websSetRequestPath(wp, websGetDefaultDir(), NULL);
    /*
     *  Eliminate security hole
     */
        websCondenseMultipleChars(wp->path, '/');
        websCondenseMultipleChars(wp->url, '/');
    /*
     *  We loop over each handler in order till one accepts the request. 
     *  The security handler will handle the request if access is NOT allowed.
     */
        first = 1;
        for (i = 0; i handler && gstrncmp(sp->urlPrefix, wp->path, sp->len) == 0) {
                if (first) {
                    websSetEnv(wp);
                    first = 0;
                }
                if ((*sp->handler)(wp, sp->urlPrefix, sp->webDir, sp->arg, 
                        wp->url, wp->path, wp->query)) {
                    return 1;
                }
                if (!websValid(wp)) {
                    trace(0, 
                    T("webs: handler %s called websDone, but didn't return 1\n"),
                        sp->urlPrefix);
                    return 1;
                }
            }
        }
    /*
     *  If no handler processed the request, then return an error. Note: It is 
     *  the handlers responsibility to call websDone
     */
        if (i >= websUrlHandlerMax) {
          /*
           * 13 Mar 03 BgP
           * preventing a cross-site scripting exploit
            websError(wp, 200, T("No handler for this URL %s"), wp->url);
           */
            websError(wp, 200, T("No handler for this URL"));
        }
        return 0;
    }
    #ifdef OBSOLETE_CODE
所有的请求都会到这个函数来寻找其对应的有效处理程序，具体过程如下
  * 调用socketDeleteHandler (wp->sid)，删除通过 socketCreateHandler 创建的套接字处理程序。
  * 然后处理一些路径安全的问题。
  * 接着for循环遍历websUrlHandler，根据sp->urlPrefix字符串，来决定对应的handler处理函数。
到这里就又产生了个问题，websUrlHandlerRequest是在哪调用的呢，不断向上跟会有这样一个调用链。
    apl
    websSocketEvent()
         |--判断读写操作
         |--读websReadEvent()
         |      |--websUrlHandlerRequest()
         |          |--查找wbsUrlHandler数组,调用和urlPrefix对应的回调函数(websFormHandler(),websDefaultHandler()等)
         |
         |--写,调用(wp->writeSocket)回调函数
接着我们需要知道websSocketEvent是哪来的，搜索发现，其是socketCreateHandler 创建的套接字处理程序。
    apl
    websOpenServer()
        |--websOpenListen()
            |--调用socketOpenConnection(NULL, port, websAccept, 0)，可是socketOpenConnection我在官方文档中并没有找到解释。
            |--websAccept()
                 |--做一些检查
                 |--socketCreateHandler(sid, SOCKET_READABLE, websSocketEvent, (int) wp)
                 |            |--把sid注册为读事件,初始化socket_t sp->handler = websSocketEvent等, 更新对应的socketList数组(handlerMask值等)
可以看出，是对socket_t
sp->handler进行了赋值，所以其实最开始的地方就是在main函数中的while循环中，执行socketProcess()，从而调用socket_t
sp->handler的处理函数进行相应的处理，下面是main函数中while循环的调用链。
    |--(main loop)
    |   |--socketReady(-1) || socketSelect(-1, 1000)
    |   |   |--轮询socketList     |--轮询socketList中的handlerMask
    |   |   |--中的几个变量           |--改变socketList中的currentEvents
    |   |
    |   |--socketProcess()
    |           |--轮询socketList[]
    |           |--socketReady()
    |           |--socketDoEvent()
    |                   |--如果有新的连接(来自listenfd)就调用socketAccept()
    |                   |           |--调用socketAlloc()初始化socket_t结构
    |                   |           |--把socket_t结构加入 socketList数组
    |                   |           |--调用socket_t sp->accept()回调函数
    |                   |
    |                   |--如果不是新的连接就查找socketList数组调用socket_t sp->handler()回调函数
现在我们知道了这些url
handler是如何被调用的了，但是还有个问题需要解决，就是websFormHandler表单处理程序，也就是当我们传入表单，发送post请求时的handler，在Goahead中，是这样定义ASP
脚本程序和表单功能的。
    /*
     *  Now define two test procedures. Replace these with your application
     *  relevant ASP script procedures and form functions.
     */
        websAspDefine(T("aspTest"), aspTest);
        websFormDefine(T("formTest"), formTest);
    /*
     *  Define an ASP Ejscript function. Bind an ASP name to a C procedure.
     */
    int websAspDefine(char_t *name, 
        int (*fn)(int ejid, webs_t wp, int argc, char_t **argv))
    {
        return ejSetGlobalFunctionDirect(websAspFunctions, name, 
            (int (*)(int, void*, int, char_t**)) fn);
    }
    /*
     *  Define a form function in the "form" map space.
     */
    int websFormDefine(char_t *name, void (*fn)(webs_t wp, char_t *path, 
        char_t *query))
    {
        a_assert(name && *name);
        a_assert(fn);
        if (fn == NULL) {
            return -1;
        }
        symEnter(formSymtab, name, valueInteger((int) fn), (int) NULL);
        return 0;
    }
    static sym_fd_t formSymtab = -1;            /* Symbol table for form handlers */
    /*
     *  The symbol table record for each symbol entry