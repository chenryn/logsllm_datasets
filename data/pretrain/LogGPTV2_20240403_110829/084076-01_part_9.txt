secret:
secretName: dotfile-secret
containers:
- name: dotfile-test-container
image: K8S.gcr.io/busybox
command:
- ls
- "-l"
- "/etc/secret-volume"
volumeMounts:
- name: secret-volume
readOnly: true
mountPath: "/etc/secret-volume"
此时会在/etc/secret-volume下创建一个.secret-file的文件。
2.2.11 HPA
1. 什么是HPA
HPA（Horizontal Pod Autoscaler，水平Pod自动伸缩器）可根据观察到的CPU、内存使用率
或自定义度量标准来自动扩展或缩容Pod的数量。HPA不适用于无法缩放的对象，比如DaemonSet。
106 | 再也不踩坑的Kubernetes实战指南
HPA 控制器会定期调整 RC 或 Deployment 的副本数，以使观察到的平均 CPU 利用率与用户
指定的目标相匹配。
HPA 需要 metrics-server（项目地址：https://github.com/kubernetes-incubator/metrics-server）获
取度量指标，由于在高可用集群安装中已经安装了metrics-server，所以本节的实践部分无须再次安
装。
2. HPA实践
在生产环境中，总会有一些意想不到的事情发生，比如公司网站流量突然升高，此时之前创
建的Pod已不足以撑住所有的访问，而运维人员也不可能24小时守着业务服务，这时就可以通过
配置HPA，实现负载过高的情况下自动扩容Pod副本数以分摊高并发的流量，当流量恢复正常后，
HPA会自动缩减Pod的数量。
本节将测试实现一个Web服务器的自动伸缩特性，具体步骤如下：
首先启动一个Nginx服务：
[root@K8S-master01 ~]#kubectl run nginx-server --requests=cpu=10m
--image=nginx --port=80
service/php-apache created
deployment.apps/php-apache created
临时开启nginx-server的端口，实际使用时需要定义service：
kubectl expose deployment nginx-server --port=80
使用kubectl autoscale创建HPA：
[root@K8S-master01 ~]# kubectl autoscale deployment nginx-server
--cpu-percent=10 --min=1 --max=10
此HPA将根据CPU的使用率自动增加和减少副本数量，上述设置的是CPU使用率超过10%
（--cpu-percent参数指定）即会增加Pod的数量，以保持所有Pod的平均CPU利用率为10%，允
许最大的Pod数量为10（--max），最少的Pod数为1（--min）。
查看当前HPA状态，因为未对其发送任何请求，所以当前CPU使用率为0%：
[root@K8S-master01 metric-server]# kubectl get hpa
NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS
AGE
nginx-server Deployment/nginx-server 0%/10% 1 10 1
5m
查看当前Nginx的Service地址：
[root@K8S-master01 ~]# kubectl get service -n default
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kubernetes ClusterIP 10.96.0.1  443/TCP 1d
nginx-server ClusterIP 10.108.160.23  80/TCP 5m
增加负载：
[root@K8S-master01 ~]# while true; do wget -q -O- http://10.108.160.23 >
/dev/null; done
1分钟左右再次查看HPA：
第2章 Docker及Kubernetes基础 | 107
[root@K8S-master01 metric-server]# kubectl get hpa
NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS
AGE
nginx-server Deployment/nginx-server 540%/10% 1 10 1
15m
再次查看Pod，可以看到nginx-server的Pod已经在扩容阶段：
[root@K8S-master01 metric-server]# kubectl get po
NAME READY STATUS RESTARTS AGE
nginx-server-589c8db585-5cbxl 0/1 ContainerCreating 0
nginx-server-589c8db585-7whl8 1/1 Running 0
nginx-server-589c8db585-cv4hs 1/1 Running 0
nginx-server-589c8db585-m5dn6 0/1 ContainerCreating 0
nginx-server-589c8db585-sxbfm 1/1 Running 0 19m
nginx-server-589c8db585-xbctd 0/1 ContainerCreating 0
nginx-server-589c8db585-xffs9 1/1 Running 0
nginx-server-589c8db585-xlb8s 0/1 ContainerCreating 0
在增加负荷的终端，按Ctrl+C键终止访问。
停止1分钟后再次查看HPA和deployment，此时副本已经恢复为1：
[root@K8S-master01 metric-server]# kubectl get hpa
NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS
AGE
nginx-server Deployment/nginx-server 0%/10% 1 10 10
20m
2.2.12 Storage
本节介绍Kubernetes Storage的相关概念与使用，一般做持久化或者有状态的应用程序才会用
到Storage。
1. Volumes
Container（容器）中的磁盘文件是短暂的，当容器崩溃时，kubelet 会重新启动容器，但最初
的文件将丢失，Container会以最干净的状态启动。另外，当一个Pod运行多个Container时，各个
容器可能需要共享一些文件。Kubernetes Volume可以解决这两个问题。
（1）背景
Docker 也有卷的概念，但是在 Docker 中卷只是磁盘上或另一个 Container 中的目录，其生命
周期不受管理。虽然目前Docker已经提供了卷驱动程序，但是功能非常有限，例如从Docker 1.7
版本开始，每个Container只允许一个卷驱动程序，并且无法将参数传递给卷。
另一方面，Kubernetes 卷具有明确的生命周期，与使用它的 Pod 相同。因此，在 Kubernetes
108 | 再也不踩坑的Kubernetes实战指南
中的卷可以比Pod中运行的任何Container都长，并且可以在Container重启或者销毁之后保留数据。
Kubernetes支持多种类型的卷，Pod可以同时使用任意数量的卷。
从本质上讲，卷只是一个目录，可能包含一些数据，Pod中的容器可以访问它。要使用卷Pod
需要通过.spec.volumes 字段指定为 Pod 提供的卷，以及使用.spec.containers.volumeMounts 字段指
定卷挂载的目录。从容器中的进程可以看到由Docker镜像和卷组成的文件系统视图，卷无法挂载
其他卷或具有到其他卷的硬链接，Pod中的每个Container必须独立指定每个卷的挂载位置。
（2）卷的类型
Kubernetes支持的卷的类型有很多，以下为常用的卷。
①awsElasticBlockStore（EBS）
awsElasticBlockStore卷挂载一个AWS EBS Volume到Pod中，与emptyDir卷不同的是，当移
除Pod时EBS卷的内容不会被删除，这意味着可以将数据预先放置在EBS卷中，并且可以在Pod
之间切换该数据。
使用awsElasticBlockStore卷的限制：
 运行Pod的节点必须是AWS EC2实例。
 AWS EC2实例需要和EBS卷位于同一区域和可用区域。
 EBS仅支持挂载卷的单个EC2实例。
在将Pod与EBS卷一起使用之前，需要先创建EBS卷，确保该卷的区域与集群的区域匹配，
并检查size和EBS卷类型是否合理：
aws ec2 create-volume --availability-zone=eu-west-1a --size=10
--volume-type=gp2
AWS EBS示例配置：
apiVersion: v1
kind: Pod
metadata:
name: test-ebs
spec:
containers:
- image: K8S.gcr.io/test-webserver
name: test-container
volumeMounts:
- mountPath: /test-ebs
name: test-volume
volumes:
- name: test-volume
# This AWS EBS volume must already exist.
awsElasticBlockStore:
volumeID: 
fsType: ext4
②CephFS
CephFS卷允许将一个已经存在的卷挂载到Pod中，和emptyDir卷不同的是，当移除Pod时，
CephFS 卷的内容不会被删除，这意味着可以将数据预先放置在 CephFS 卷中，并且可以在 Pod 之
第2章 Docker及Kubernetes基础 | 109
间切换该数据。CephFS卷可以被多个写设备同时挂载。
和AWS EBS一样，需要先创建CephFS卷后才能使用它。
关于CephFS的更多内容，可以参考以下文档：
https://github.com/kubernetes/examples/tree/master/staging/volumes/cephfs/
③ConfigMap
ConfigMap卷也可以作为volume使用，存储在ConfigMap中的数据可以通过ConfigMap类型
的卷挂载到Pod中，然后使用该ConfigMap中的数据。引用ConfigMap对象时，只需要在volume
中引用ConfigMap的名称即可，同时也可以自定义ConfigMap的挂载路径。
例如，将名称为log-config的ConfigMap挂载到Pod的/etc/config目录下，挂载的文件名称为
path指定的值，当前为log_level：
apiVersion: v1
kind: Pod
metadata:
name: configmap-pod
spec:
containers:
- name: test
image: busybox
volumeMounts:
- name: config-vol
mountPath: /etc/config
volumes:
- name: config-vol
configMap:
name: log-config
items:
- key: log_level
path: log_level
注 意
ConfigMap需要提前创建。
④emptyDir
和上述 volume 不同的是，如果删除 Pod，emptyDir 卷中的数据也将被删除，一般 emptyDir
卷用于Pod中的不同Container共享数据。它可以被挂载到相同或不同的路径上。
默认情况下，emptyDir 卷支持节点上的任何介质，可能是 SSD、磁盘或网络存储，具体取决
于自身的环境。可以将 emptyDir.medium 字段设置为 Memory，让 Kubernetes 使用 tmpfs（内存支
持的文件系统），虽然tmpfs非常快，但是tmpfs在节点重启时，数据同样会被清除，并且设置的
大小会被计入到Container的内存限制当中。
使用emptyDir卷的示例，直接指定emptyDir为{}即可：
apiVersion: v1
kind: Pod
metadata:
name: test-pd
spec:
110 | 再也不踩坑的Kubernetes实战指南
containers:
- image: K8S.gcr.io/test-webserver
name: test-container
volumeMounts:
- mountPath: /cache
name: cache-volume
volumes:
- name: cache-volume
emptyDir: {}
⑤GlusterFS
GlusterFS （以下简称为GFS）是一个开源的网络文件系统，常被用于为Kubernetes提供动态
存储，和emptyDir不同的是，删除Pod时GFS卷中的数据会被保留。
关于GFS的使用示例请参看3.1节。
⑥hostPath
hostPath 卷可将节点上的文件或目录挂载到 Pod 上，用于 Pod 自定义日志输出或访问 Docker
内部的容器等。
使用hostPath卷的示例。将主机的/data目录挂载到Pod的/test-pd目录：
apiVersion: v1
kind: Pod
metadata:
name: test-pd
spec:
containers:
- image: K8S.gcr.io/test-webserver
name: test-container
volumeMounts:
- mountPath: /test-pd
name: test-volume
volumes:
- name: test-volume
hostPath:
# directory location on host
path: /data
# this field is optional
type: Directory
hostPath卷常用的type（类型）如下。
 type为空字符串：默认选项，意味着挂载hostPath卷之前不会执行任何检查。
 DirectoryOrCreate：如果给定的 path 不存在任何东西，那么将根据需要创建一个权限为
0755的空目录，和Kubelet具有相同的组和权限。
 Directory：目录必须存在于给定的路径下。
 FileOrCreate：如果给定的路径不存储任何内容，则会根据需要创建一个空文件，权限设
置为0644，和Kubelet具有相同的组和所有权。
 File：文件，必须存在于给定路径中。
 Socket：UNIX套接字，必须存在于给定路径中。
 CharDevice：字符设备，必须存在于给定路径中。
第2章 Docker及Kubernetes基础 | 111
 BlockDevice：块设备，必须存在于给定路径中。
⑦NFS
NFS卷也是一种网络文件系统，同时也可以作为动态存储，和GFS类似，删除Pod时，NFS
中的数据不会被删除。NFS可以被多个写入同时挂载。
关于NFS的使用，请参考第3章。
⑧persistentVolumeClaim
persistentVolumeClaim卷用于将PersistentVolume（持久化卷）挂载到容器中，PersistentVolume
分为动态存储和静态存储，静态存储的 PersistentVolume 需要手动提前创建 PV，动态存储无需手
动创建PV。
⑨Secret
Secret卷和ConfigMap卷类似，详情见2.2.10节。
⑩SubPath
有时可能需要将一个卷挂载到不同的子目录，此时使用 volumeMounts.subPath 可以实现不同
子目录的挂载。
本示例为一个LAMP共享一个卷，使用subPath卷挂载不同的目录：
apiVersion: v1
kind: Pod
metadata:
name: my-lamp-site
spec:
containers:
- name: mysql
image: mysql
env:
- name: MYSQL_ROOT_PASSWORD
value: "rootpasswd"
volumeMounts:
- mountPath: /var/lib/mysql
name: site-data
subPath: mysql
- name: php
image: php:7.0-apache
volumeMounts:
- mountPath: /var/www/html
name: site-data
subPath: html
volumes:
- name: site-data
persistentVolumeClaim:
claimName: my-lamp-site-data
更多volume可参考：
https://kubernetes.io/docs/concepts/storage/volumes/
2. PersistentVolume
管理计算资源需要关注的另一个问题是管理存储，PersistentVolume子系统为用户和管理提供
112 | 再也不踩坑的Kubernetes实战指南
了一个API，用于抽象如何根据使用类型提供存储的详细信息。为此，Kubernetes引入了两个新的
API资源：PersistentVolume和PersistentVolumeClaim。
PersistentVolume（简称 PV）是由管理员设置的存储，它同样是集群中的一类资源，PV 是容
量插件，如Volumes（卷），但其生命周期独立使用PV的任何Pod，PV的创建可使用NFS、iSCSI、
GFS、CEPH等。
PersistentVolumeClaim（简称PVC）是用户对存储的请求，类似于Pod，Pod消耗节点资源，
PVC 消耗 PV 资源，Pod 可以请求特定级别的资源（CPU 和内存），PVC 可以请求特定的大小和
访问模式。例如，可以以一次读/写或只读多次的模式挂载。
虽然PVC允许用户使用抽象存储资源，但是用户可能需要具有不同性质的PV来解决不同的
问题，比如使用SSD硬盘来提高性能。所以集群管理员需要能够提供各种PV，而不仅是大小和访
问模式，并且无须让用户了解这些卷的实现方式，对于这些需求可以使用StorageClass资源实现。
目前PV的提供方式有两种：静态或动态。
静态PV由管理员提前创建，动态PV无需提前创建，只需指定PVC的StorageClasse即可。
（1）回收策略
当用户使用完卷时，可以从 API 中删除 PVC 对象，从而允许回收资源。回收策略会告诉 PV
如何处理该卷，目前卷可以保留、回收或删除。
 Retain：保留，该策略允许手动回收资源，当删除PVC时，PV仍然存在，volume被视为
已释放，管理员可以手动回收卷。
 Recycle：回收，如果volume插件支持，Recycle策略会对卷执行rm -rf清理该PV，并使
其可用于下一个新的PVC，但是本策略已弃用，建议使用动态配置。
 Delete：删除，如果 volume 插件支持，删除 PVC 时会同时删除 PV，动态卷默认为