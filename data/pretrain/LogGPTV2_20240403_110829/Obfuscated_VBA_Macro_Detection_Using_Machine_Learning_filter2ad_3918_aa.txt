title:Obfuscated VBA Macro Detection Using Machine Learning
author:Sangwoo Kim and
Seokmyung Hong and
Jaesang Oh and
Heejo Lee
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Obfuscated VBA Macro Detection
Using Machine Learning
Sangwoo Kim, Seokmyung Hong, Jaesang Oh and Heejo Lee∗
Korea University
Email: { sw kim, canasta, jaesangoh, heejo } @korea.ac.kr
Seoul, Republic of Korea
Abstract—Malware using document ﬁles as an attack vector
has continued to increase and now constitutes a large portion of
phishing attacks. To avoid anti-virus detection, malware writers
usually implement obfuscation techniques in their source code.
Although obfuscation is related to malicious code detection, little
research has been conducted on obfuscation with regards to
Visual Basic for Applications (VBA) macros.
In this paper, we summarize the obfuscation techniques and
propose an obfuscated macro code detection method using
ﬁve machine learning classiﬁers. To train these classiﬁers, our
proposed method uses 15 discriminant static features, taking into
account the characteristics of the VBA macros. We evaluated
our approach using a real-world dataset of obfuscated and
non-obfuscated VBA macros extracted from Microsoft Ofﬁce
document ﬁles. The experimental results demonstrate that our
detection approach achieved a F2 score improvement of greater
than 23% compared to those of related studies.
I. INTRODUCTION
Attacks using macros have become a constant threat since
the “Concept”, a wide-spread macro virus written in Visual
Basic for Applications (VBA), which appeared in 1995 [1].
Macro malware was a major threat from the late 1990s to the
early 2000s, but it had declined since the security mechanism
of Microsoft Ofﬁce was enhanced in 2000 [2], [3]. However,
according to the statistics and security news of Anti-Virus (AV)
companies, attacks using VBA macros have been increasing
again since the second half of 2014 [4], [5]. Since the release
of Microsoft Ofﬁce 2000, the execution of VBA macros was
disabled by default, but attackers began to deploy simple
social engineering techniques that lure users into enabling the
execution of macros.
The threat reports of AV companies also conﬁrmed the
comeback of script-based malware such as VBA macro
malware. According to the report released by Symantec in
2016, MS Ofﬁce document ﬁle formats dominated the email
attachments (73.2%), even more than executable ﬁles [6].
Furthermore, a recent Kaspersky threat report demonstrates
that the Microsoft Ofﬁce Word VBA macro-based attacks are
included in the top 10 malware families [7]. The latest McAfee
security report, published in September 2017, also covers the
trends of script-based malware and reports a malware type
which includes PowerShell command inside of VBA macro
[8].
∗ Heejo Lee is the corresponding author.
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00057
490
As mentioned above, the security reports of AV vendors
have shown that script-based attacks are on the rise and can be
dangerous. The most frequently mentioned scripting languages
that can be used in malicious code are JavaScript, Visual
Basic Script, PHP, and Powershell. Among these, VBA macro
malware, which is an attack related to MS Ofﬁce documents,
should not be ignored. Owing to the fact that MS Ofﬁce
document ﬁles are used by a large number of companies and
institutions, malware which leverages MS Ofﬁce documents
as an attack vector can have a large impact. Attacks related
to VBA macros are usually considered less suspicious than
the executable ﬁles because most people are familiar with the
MS Ofﬁce document ﬁles, e.g., .docx or .pptx. In result, this
negligence leads to the proliferation of ongoing VBA macro
attacks.
Only recently has it appeared in several studies under
the name of “Downloader” or “Macro malware”. Mimura
et al. [15] conducted a study to extract the Remote Access
Trojan (RAT) in malicious documents ﬁles used in Advanced
Persistent Threat (APT) attacks from 2009 to 2015. They clas-
siﬁed the collected document malware as “Downloader” and
“Dropper”. “Downloader” uses VBA macro, and “Dropper”
includes executable ﬁles in itself. However, the focus of the
study was on the “Dropper”, rather than the ‘Downloader”.
We have observed that the rate of VBA macro use in APT
attacks has been drastically increasing since 2014, and our
proposed method targets the missing area that has not been
studied by the referenced research. There are few studies
A primary quality that a successful cyber-attack must have
is the ability to bypass AVs. One of the most effective strate-
gies to bypass AVs is obfuscation, which is the intentional
obscuring of code by making it difﬁcult to understand. In
many script-based malware, obfuscation techniques are fairly
common, and it is generally known that obfuscation works
well against AVs. There have been malicious JavaScript de-
tection studies which categorized obfuscation techniques into
four types and investigated how the detection rate changed
when they were applied [9], [10]. The studies demonstrated
that obfuscation techniques are effective in avoiding the AV
detection.
Currently, many obfuscated VBA macro attacks are un-
derway, but there are still few studies on obfuscated VBA
macro detection. Most document malware detection researches
focused on vulnerability or shellcode detection [11]–[14].
that leverage machine learning to detect malicious MS Ofﬁce
documents.
Cohen and Nissim et al. [16], [17] proposed a method to
detect malicious docx ﬁles with structural features by using
active learning that emphasizes the updatability of a detection
model. It provided a 94.44% true positive detection rate by
leveraging the hierarchical nature of docx ﬁles. It presented
the most prominent 11 features, including 8 structural path
related to the existence of VBA macros.
Conversely, research on detecting attacks related to PDF
documents have been widely carried out. VBA macros in MS
Ofﬁce ﬁles and JavaScript in PDF documents share similar
characteristics. We can detect the obfuscation techniques in
the JavaScript of the PDF ﬁles, and there are many studies on
the detection of obfuscated malicious JavaScript. Given that
it is also a scripting language, one may think that we can
apply JavaScript research to VBA macro detection, but it has
never been demonstrated how it would work. There are many
similarities due to the “scripting language in the document”,
but the language itself is different, hence the obfuscated code
is very different. For instance, there is a miniﬁcation technique
in JavaScript. Although miniﬁcation can reduce code size by
deleting linefeed, it often appears in malicious script code to
avoid malware detection. This technique is only applicable to
JavaScript, not VBA macros. Owing to the differences between
JavaScript and VBA, independent research focusing on VBA
macros should be conducted.
In this paper, we propose a method to detect obfuscated
VBA macros in MS Ofﬁce documents by using machine
learning classiﬁers. First, we investigated the VBA macros
that were actually used as malicious code, and classiﬁed the
VBA obfuscation techniques into four categories by referring
to related research. In our experiment, we evaluated the
performance of our proposed obfuscation detection method
which leverages machine learning. 773 malicious and 1,764
benign MS Ofﬁce ﬁles were collected and we conducted
an experiment with 4,212 VBA macro extracted from the
collected ﬁles. All VBA macros were manually labeled as
either obfuscated or normal. By performing a manual scan
on large, real-world samples, we demonstrated how many
malicious and benign samples were obfuscated. From this
labeled dataset, we extracted 15 discriminant static features
that reﬂect the characteristics of the VBA macros and applied
them to ﬁve different classiﬁers, and compared the results
with those of related studies. As a result, we obtained a 23%
improvement in F2 score in our comparative experiment.
The contributions of this paper are as follows.
• As the ﬁrst obfuscation detection study applied to VBA
macro, we have summarized the types of obfuscation
techniques and we have shown the extent of obfuscation
applied to real-world VBA macros.
• We presented 15 discriminant static features and, tested
them using ﬁve different classiﬁers. The results of the
comparison with related research show that the perfor-
mance was improved by 23%.
The rest of this paper is organized as follows. Section II
summarizes related studies concerning detection of document
malware. Section III provides the simple explanation about
VBA macro, and categorization of obfuscation techniques. In
Section IV, we propose our obfuscated VBA macro detection
approach with experiment setup. Section V, we evaluate the
classiﬁcation performance of proposed detection approach.
Finally, Section VI and VII include discussion and conclusion
of this paper.
II. RELATED WORK
Attacks using VBA macros continue to increase. Moreover,
over 98% of malicious VBA macros are obfuscated according
to our manual inspection on a collected sample set (as detailed
in Section IV.B). However, there is a scarcity of studies on the
detection of obfuscation on VBA macros. Given that attacks
using VBA macros have only just begun to increase, most
research is focused on vulnerability or shellcode detection
[11]–[15] rather than on the detection of VBA macros. The
following are the studies that can be applied to attacks using
VBA macros.
A. Malicious VBA macro detection
Until now, a few studies have been proposed and most of
them are based on a machine learning approach. Cohen et al.
[16] conducted research on malware detection for XML-based
documents. This study uses the hierarchical nature of Ofﬁce
Open XML (OOXML) as a key feature of machine learning to
detect MS Ofﬁce document malware. It recognized the risks
that could be posed by document ﬁles, and well-organized
the types of possible attacks which could result from them.
In their experiment, nine different classiﬁcation algorithms
were used and Random Forest classiﬁers demonstrated the best
results among them. In addition, they proved the effectiveness
of their proposed method by comparing the detection results
to those of several AVs. This research using the idea of
structural feature has proven to be effective when dealing with
OOXML ﬁle types such as .docx, .docm, or .xlsx. However,
the majority of VBA macro malware are .doc or .xls, which
are not OOXML ﬁle types [6].
Subsequently, Nissim et al. [17] added Active Learning
to the SFEM method in 2017. Active Learning methods are
designed to assist the analytical efforts of experts; it led to a
95.5% reduction of labeling efforts. However, their proposed
mechanism is limited to docx ﬁles, which is narrower than
OOXML ﬁles.
Gaustad [18] presented a research on malicious VBA macro
detection in 2017. This study used a Random Forest classiﬁer
of the ensemble learning with over a thousand static features
to detect malicious documents. However, given that its de-
tection was performed with the static features of malicious
VBA macro codes, it is difﬁcult to identify how obfuscation
techniques were considered in the detection process.
B. Malicious JavaScript code detection
JavaScript is one of the most popular scripting languages.
JavaScript-based attacks are also taking place in PDFs, and
491
have similarities with VBA in that both threats utilize scripting
language in document formats. By retrieving research on ma-
licious JavaScript detection, we are able to explore appropriate
ways to counteract VBA macro malware.
While malicious VBA macro detections in MS Ofﬁce doc-
uments mainly consist of machine learning methods, there
are a larger variety of approaches to detecting malicious
JavaScript in PDFs. Moreover, a number of research have
been emphasizing on analyzing obfuscations, some focusing
on restoring the obfuscated code to original code by de-
obfuscating it. In the subsections below, we will introduce
the representative studies that have been researched to detect
malicious JavaScript.
Static analysis approach: In malware detection, static
analysis has advantages over dynamic analysis in terms of cost
for inspection, because it generally guarantees a lightweight
inspection. Choi et al. [19] proposed a method to detect
JavaScript obfuscation that leveraged the lexical characteristics
of obfuscated strings. Detection was performed by using an N-
gram distribution, entropy, the string length for all the strings
used, and the parameters of the dangerous function. Xu et
al. [20] analyzed the decoding process of obfuscated code
to detect obfuscation. Their key idea was that obfuscated
malicious JavaScript code has to be de-obfuscated before it
executes its malicious actions. They identiﬁed the function
calls that are related with obfuscated malicious JavaScript
code.
Dynamic analysis approach: Liu et al. [21] proposed
a method to detect malicious JavaScript through document
instrumentation. This method inserts monitoring code into a
PDF, so that the inspector knows the context of the runtime
behaviors. Kim et al. [22] proposed J-force, which is a forced
execution engine for JavaScript. J-force was introduced to
detect suspicious hidden behavior, and it achieved a 95%
code coverage on real-world JavaScript samples. Furthermore,
there is a study focusing on the de-obfuscation of mali-
cious JavaScript, JSDES [23]. It
is an automated system
for de-obfuscation and analysis of malicious JavaScript code.
This study conducted an extensive survey on the available
JavaScript obfuscation techniques and their usage in malicious
code.
Machine learning approach: Likarish et al. [24] proposed
a method based on the Support Vector Machine (SVM) and a
decision tree to detect malicious JavaScript in web pages. They
proposed a frequency of 50 keywords and 15 properties as
detection features that indicate human-readable characteristics.
Jodavi et al. [25] used one-class SVM classiﬁers to detect
obfuscation. In training, they pruned the classiﬁer ensemble
using a novel binary Particle Swarm Optimization (PSO)
algorithm to ﬁnd a near-optimal sub-ensemble. Aebersold et al.
[26] tested the machine learning approach to detect obfuscated
JavaScript in 2016. This study trained four different classiﬁers
and evaluated them with real-world PDF ﬁles. Their approach
and proposed features scored promised results on a benign
dataset, but had a 60.6% recall score on a malicious dataset.
Dim Program As String
Dim TaskID As Double
On Error Resume Next
Program = "calc.exe"
1 Sub StartCalculator()
2
3
4
5
6
7
8
9
10
11
12 End Sub
’Run calculator program using Shell()
TaskID = Shell(Program, 1)
If Err <> 0 Then
MsgBox "Can’t start " & Program
End If
(a) A macro for running the program “calc.exe” in Windows
Dim OutlookApp As Object
Dim MItem As Object
1 Sub SendEmail()
2
3
4
5