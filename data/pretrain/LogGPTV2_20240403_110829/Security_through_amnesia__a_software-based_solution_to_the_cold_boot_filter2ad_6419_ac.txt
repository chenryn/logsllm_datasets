J¨urgen Pabel has posted a website [28], dormant since
early 2009, detailing his plans to provide a software-
based solution to the cold-boot attack. His approach is
to memory-map the L1 cache of the CPU and use this
space to store the AES key schedule. Because this ap-
proach would prevent the CPU cache from serving its
normal role, every memory access on the machine would
result in a cache miss. Disabling the CPU cache in this
manner results in a slowdown of perhaps 200x [1] felt
by all software, not just software accessing ﬁles on the
encrypted disk. Because our solution avoids the nega-
tive system performance side effects of Pabel’s design,
we believe it to be more practical.
9.5 Linux-Crypto Mailing List Brain-
storming
Shortly after Halderman et al. published their attack, a
mailing list discussion on Linux-Crypto discussed possi-
ble mitigation strategies. The general approach of keep-
ing key information in CPU registers was brought up
[39], but the ideas given were too vague to suggest how
this might speciﬁcally be accomplished and do not ap-
pear to have been pursued further.
9.6 Leakage-Resistant Algorithms
due to side channel attacks. Most of this work has fo-
cused on the design of new ciphers with properties miti-
gating the impact of partial key leakage.
Unfortunately, we do not believe that protecting
against partial key leakage is a sufﬁcient defense against
the cold boot attack. According to Halderman et al., it
is possible to perform the cold-boot attack in such a way
that over 99.9% of memory remains uncorrupted an en-
tire minute after power is cut. Any countermeasure to the
cold-boot attack must account for its potential to fully
leak any encryption keys stored to RAM.
9.7 TCG Platform Reset Attack Mitigation
Speciﬁcation
The Trusted Computing Group has published a standard
[21] which purports to mitigate the vulnerability of com-
pliant systems to the cold-boot attack. This speciﬁcation
states that a compliant BIOS must zero out all RAM be-
fore giving control to the operating system. While this
prevents the attack from being performed using only the
victim’s computer15, the attacker can still easily perform
the attack by moving the RAM from the victim’s ma-
chine to a machine under his own control, then booting
using a BIOS not following the TCG speciﬁcation. Thus,
the TCG speciﬁcation cannot be considered a sufﬁcient
countermeasure.
9.8 Forenscope: A Framework for Live
Forensics
The RAM of a computer may contain sensitive mate-
rial other than the encryption keys to the hard disk. The
Forenscope rootkit [10] takes advantage of the cold-boot
attack to gain access to active network sessions as well;
the session keys’ presence in memory could allow an at-
tacker to masquerade as the victim to any website, SSH
server, or other remote system to which the user was con-
nected at the time of the attack.
Loop-Amnesia will protect against a Forenscope-
using attacker’s gaining access to the encrypted disk: the
attack tool uses the exact same strategy as Halderman et
al. to attempt recovery of the key. Unfortunately, SSH
and SSL session keys will likely remain in RAM, so
an attacker with Forenscope could still conceivably keep
the victim’s network connections alive, sniff the session
keys, and masquerade as the victim to connected ma-
chines. See §10 for a discussion on how Loop-Amnesia
may be extended to assist in preventing Forenscope at-
tacks.
There has been considerable work [6] [17] [27] [36] in
designing cryptosystems resilient to partial key leakage
15A BIOS password would also necessitate the use of a separate ma-
chine.
10
10 Future Work
12 Acknowledgements
A ripe area for future research is the applicability of our
approach to algorithms outside of the AES cipher fam-
ily. Some algorithms, such as Blowﬁsh [33], use key-
dependent S-boxes; proving whether these S-boxes can
be safely stored to RAM would require careful analysis.
We believe that our approach should work well for all
algorithms without key-dependent S-boxes and with key
schedules that are computationally inexpensive to com-
pute, but its effectiveness outside this class of ciphers re-
mains to be analyzed.
The ability of Loop-Amnesia to assist in neutraliz-
ing Forenscope’s other attack capabilities also merits ex-
amination. For instance, an operating system attempt-
ing to harden itself against Forenscope could use Loop-
Amnesia to encrypt various pieces of data inside the ker-
nel TCP stack. As the master key will have been erased
by the reboot preceding Forenscope’s installation, Foren-
scope will have no way of recovering the network con-
nections. By the time the attacker has had time to down-
load and analyze the SSH/SSL session keys from RAM,
any active TCP sessions will likely have expired.
Finally, our work exposes a limitation in current sys-
tem programming languages: the inability to insist to a
compiler that particular values never be spilled to RAM.
While we recognize that our needs are uncommon and do
not by themselves merit the redesign of system program-
ming languages, we speculate that programming lan-
guage designers may one day wish to allow users more
control over the register allocation process for perfor-
mance reasons. We would encourage the designers of
such languages or language extensions to include func-
tionality allowing the user to express the needs we faced
when implementing Loop-Amnesia. User control over
the register allocation process may provide useful bene-
ﬁts for both security and performance.
11 Conclusion
In this paper, we present the ﬁrst practical solution to the
cold-boot attack applicable to general-purpose hardware.
For a performance cost likely to be very moderate un-
der most workloads, our solution provides protection for
general-purpose hardware against a signiﬁcant practical
attack affecting all previous state-of-the-art disk encryp-
tion systems. We present a design strategy applicable to
all operating system-based disk encryption systems and a
usable open-source implementation which validates our
design. After the publication of this paper, we intend to
work with the Linux kernel community to integrate our
approach, and possibly code, into the standard Linux ker-
nel distribution.
We thank Andrew Lenharth of the University of Texas
at Austin for his invaluable inspiration and advice in the
early stages of this work. We also thank Jari Ruusu for
providing loop-AES to the free and open source soft-
ware community: being able to use such well-designed
software as the base for our implementation signiﬁ-
cantly aided us in evaluating the concepts behind Loop-
Amnesia.
References
[1] Cachegrind:
a cache-miss proﬁler.
http:
//wwwcdf.pd.infn.it/valgrind/
cg main.html.
[2] Truecrypt: Free open-source on-the-ﬂy encryption.
http://www.truecrypt.org/.
[3] Hard drive secrets
sold cheaply.
http:
//news.bbc.co.uk/2/hi/technology/
3788395.stm, June 2004.
[4] drop caches. http://www.linuxinsight.
com/proc sys vm drop caches.html,
May 2006.
[5] Privacy at risk after burglary at doctor’s ofﬁce.
http://www.cbc.ca/health/story/
2011/01/21/nb-privacy-warning.
html, January 2011.
[6] Adi Akavia, Shaﬁ Goldwasser, and Vinod Vaikun-
tanathan. Simultaneous hardcore bits and cryptog-
raphy against memory attacks. In Theory of Cryp-
tography Conference, pages 474–495, 2009.
[7] Mike Anderson. Using a JTAG in linux driver
In CE Embedded Linux Confer-
debugging.
ence, 2008. http://elinux.org/images/
4/4e/CELF JTAG Anderson.ppt.
[8] Alex Biryukov and Dmitry Khovratovich. Related-
key cryptanalysis of the full AES-192 and AES-
256. Cryptology ePrint Archive, Report 2009/317,
2009. http://eprint.iacr.org/.
[9] Bob Brown.
How to roll out full disk en-
http:
cryption on your pcs and laptops.
//www.networkworld.com/news/2010/
081610-encryption.html, August 2010.
[10] E. Chan, S. Venkataraman, F. David, A. Chaugule,
and R. Campbell. Forenscope: A framework for
live forensics. In Annual Computer Security Appli-
cations Conference, November 2010.
11
[11] Intel Corporation.
IA-32 architectural MSRs.
Intel 64 and IA-32 Architectures Software De-
veloper’s Manual, 3B:681–722, January 2011.
http://www.intel.com/Assets/PDF/
manual/253669.pdf.
[12] Microsoft Corporation. Bitlocker drive encryp-
Microsoft Technet,
tion technical overview.
2010. http://technet.microsoft.com/
en-us/library/cc732774\%28WS.10\
%29.aspx.
[13] John Criswell, Andrew Lenharth, Dinakar Dhurjati,
and Vikram Adve. Secure virtual architecture: a
safe execution environment for commodity operat-
ing systems. In Proceedings of Twenty-First ACM
SIGOPS Symposium on Operating Systems Princi-
ples, SOSP ’07, pages 351–366, New York, NY,
USA, 2007. ACM.
[14] John Curran.
laptop
Encrypted
amendment
February
poses
To-
5th
day,
http://www.
usatoday.com/tech/news/techpolicy/
2008-02-07-encrypted-laptop-child-porn
N.htm.
dilemma.
2008.
USA
[15] Joan Daemen and Vincent Rijmen. The Design of
Rijndael. Springer-Verlag New York, Inc., Secau-
cus, NJ, USA, 2002.
[16] Advanced Micro Devices.
MSRs of
architecture.
the
AMD64 Architec-
June
http://support.amd.com/us/
AMD64
ture Programmer’s Manual, 2:469–472,
2010.
Processor TechDocs/24593.pdf.
[17] Stefan Dziembowski and Krzysztof Pietrzak.
In FOCS, pages
Leakage-resilient cryptography.
293–302, 2008.
[18] Jake Edge. Holes in the linux random number
Linux Weekly News, 2006. http:
generator?
//lwn.net/Articles/184925/.
[19] David W. Foley.
http://doj.nh.gov/
consumer/pdf/wackenhut.pdf, December
2010.
[20] Henri Gilbert and Thomas Peyrin.
Super-sbox
cryptanalysis: Improved attacks for aes-like per-
Cryptology ePrint Archive, Report
mutations.
2009/531, 2009.
http://eprint.iacr.
org/.
[21] Trusted Computing Group.
form reset
http://www.trustedcomputinggroup.
attack mitigation
TCG plat-
speciﬁcation.
org/resources/pc client work group
platform reset attack mitigation
specification version 10/, 2008.
[22] Zvi Gutterman, Tzachy Reinman, and Benny
Pinkas. Analysis of the linux random number gen-
In IEEE Symposium on Security and Pri-
erator.
vacy, 2006.
[23] J. Alex Halderman, Seth D. Schoen, Na-
dia Heninger, William Clarkson, William Paul,
Joseph A. Calandrino, Ariel J. Feldman, Jacob Ap-
pelbaum, and Edward W. Felten. Lest we remem-
ber: Cold boot attacks on encryption keys.
In
Paul C. van Oorschot, editor, USENIX Security
Symposium, pages 45–60. USENIX Association,
2008.
[24] Zack Albus Markus Koesler, Franz Graf.
Pro-
gramming a ﬂash-based msp430 using a JTAG
interface.
http://www.softbaugh.com/
downloads/slaa149.pdf, December 2002.
[25] Patrick McGregor, Tim Hollebeek, Alex Volynkin,
and Matthew White. Braving the cold: New meth-
ods for preventing cold boot attacks on encryption
keys, 2008.
[26] Tilo M¨uller, Andreas Dewald, and Felix C. Freiling.
Aesse: a cold-boot resistant implementation of aes.
In Proceedings of the Third European Workshop
on System Security, EUROSEC ’10, pages 42–47,
New York, NY, USA, 2010. ACM.
[27] Moni Naor and Gil Segev. Public-key cryptosys-
tems resilient to key leakage. In Proceedings of the
29th Annual International Cryptology Conference
on Advances in Cryptology, pages 18–35, Berlin,
Heidelberg, 2009. Springer-Verlag.
[28] J¨urgen Pabel.
http://frozencache.
blogspot.com, 2009.
[29] OpenSolaris Project.
ZFS on-disk encryption
http://hub.opensolaris.
support.
org/bin/view/Project+zfs-crypto/
WebHome.
[30] Jari
Ruusu.
sourceforge.net/.
http://loop-aes.
[31] Jari Ruusu. http://mail.nl.linux.org/
linux-crypto/2008-06/msg00002.
html, June 2008.
[32] Christophe Sauot.
crypto target.
misc/dm-crypt/.
dm-crypt: A device-mapper
http://www.saout.de/
12
[33] Bruce Schneier. Description of a new variable-
length key, 64-bit block cipher (blowﬁsh). In Fast
Software Encryption, Cambridge Security Work-
shop, pages 191–204, London, UK, 1994. Springer-
Verlag.
[34] Freescale Semiconductor.
Performance monitor
counter registers. MPC750 RISC Processor Family
User’s Manual, pages 378–382, December 2001.
http://www.freescale.com/files/
32bit/doc/ref manual/MPC750UM.pdf.
[35] Arvind Seshadri, Mark Luk, Ning Qu, and Adrian
Perrig. SecVisor: a tiny hypervisor to provide life-
time kernel code integrity for commodity OSes.
SIGOPS Oper. Syst. Rev., 41:335–350, October
2007.
[36] Francois-Xavier Standaert, Olivier Pereira, Yu Yu,
Jean-Jacques Quisquater, Moti Yung, and Elisabeth
Oswald. Leakage resilient cryptography in prac-
tice.
In David Basin, Ueli Maurer, Ahmad-Reza
Sadeghi, and David Naccache, editors, Towards
Hardware-Intrinsic Security, Information Security
and Cryptography, pages 99–134. Springer Berlin
Heidelberg, 2010.
[37] Allan Tomlinson.
Introduction to the TPM.
http://courses.cs.vt.edu/cs5204/
fall10-kafura-BB/Papers/TPM/
Intro-TPM-2.pdf.
[38] Zhi Wang and Xuxian Jiang.
Hypersafe: A
lightweight approach to provide lifetime hypervi-
sor control-ﬂow integrity. In IEEE Symposium on
Security and Privacy, pages 380–395, 2010.
[39] Richard Zidlicky.
http://www.spinics.
net/lists/crypto/msg04668.html,
2008.
13