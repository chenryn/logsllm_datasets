i.e., an attack that reproduces the structure of the original
query. The attacks is against the query above and the malicious
•
554
Training mode – for each different query that SEPTIC
receives,
the QS&QM manager and ID generator
modules work together to create the query model,
the query identiﬁer, and associate them. Then, the
QS&QM manager stores the query model in the QM
Learned store.
There are several options to trigger the queries. This
can be made with application unit tests, manually
by the programmer/administrator, or by using the
septic training module. This module runs externally
to SEPTIC and currently supports normal web appli-
cations. It works like a crawler, navigating in the appli-
cation looking for forms, to then inject benign inputs
that eventually are inserted in queries transmitted to
MySQL.
Normal mode – in which SEPTIC can operate in
detection or prevention mode. The difference between
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:13 UTC from IEEE Xplore.  Restrictions apply. 
Query model
T
Log
x
I
Attack detection
Query
SQLI
Stored Inj
Log
Drop
Exec
Training
Prevention
Detention
T: training
TABLE I: Operation modes and actions taken by SEPTIC.
x
x
I: incremental
x
x
x
x
x
x
x
x
x
x
x
these two modes resides in executing or not the query
when an attack is found. In the former, the query is
executed, whereas for the latter it is not, dropping
the query and blocking the attack. In both modes the
attack is logged.
For each query that SEPTIC receives, the QS&QM
manager and ID generator modules work together to
create the query structure and get the query identiﬁer.
Next, the QS&QM manager gets the query model
identiﬁed by the query identiﬁer. If a query model
exists, then the attack detector is activated to perform
the SQLI and stored injection detection algorithms
described above, and logger acts if an attack is found.
If a query model does not exist for that query iden-
tiﬁer, the QS&QM manager creates the query model,
stores it with the query identiﬁer, and the logger regis-
ters this event. This action corresponds to an incremen-
tal training because the query models are learned and
stored gradually. Later, the programmer/administrator
will have to decide if the query model comes from a
malicious or a benign query. In the latter case, it is
saved together with the other QM already known.
Table I summarizes the operation modes and the actions
taken by SEPTIC. The last two rows show the prevention and
detection modes included in the normal operation mode. As
one can observe in the last two columns for these modes, the
difference between them is the execution or not of queries
when attacks are ﬂagged.
F. Performance impact in MySQL
We studied the impact of the SEPTIC in MySQL when
setup in the four conﬁgurations of detection, i.e., turning on
and off the detection of SQLI and stored injection attacks.
We performed these evaluations using three real web appli-
cations, namely PHP Address Book [13], refbase [16], and
ZeroCMS [26]. To automate the experiments, we resorted to the
BenchLab, a benchmarking testbed for web applications [4].
The experimental environment was based on a network
with six machines with identical characteristics (Intel Pentium
4 CPU 2.8 GHz (1-core and 1-thread) with 2 GB of RAM, 80
GB of hard disk SCSI, and 1 Gb ethernet card, running Linux
Ubuntu 14.04). These machines belong to a computational
cluster dedicated to large-scale experiments of distributed
systems, the Quinta cluster [15]. The Quinta is comprised
of 38 physical machines aggregated in four different clusters,
each one composed by identical machines. Our experiments
were realized in the R cluster, which contains eleven machines.
From the six computers that we used from cluster R, two of
them performed the server roles, whereas the other four were
the clients. A server machine contained the MySQL DBMS
with the SEPTIC mechanism installed, and the other machine
had installed the Apache web server and the PHP Zend to run
those three web applications. The Apache Tomcat was also
necessary to run the BenchLab server. The four client machines
had installed the Firefox web browser and the BenchLab client.
They run workloads previously recorded and stored by the
BenchLab server, i.e., a sequence of requests made to the web
applications. These requests forced the web applications to
execute of queries in MySQL.
We evaluated SEPTIC with its four combinations of pro-
tections turned on and off (SQLI and stored injection on/off)
and compared them with the original MySQL without SEPTIC
installed. For that purpose, we created several scenarios, vary-
ing the number of client machines (1 to 4) and browsers (1 to 5
browsers per machine). We also created three workloads from
the web applications, one of each application. The ZeroCMS
workload had 26 requests to the web application with queries
of several types (SELECT, UPDATE, INSERT and DELETE)
and downloading of web objects (e.g., images, css). The other
two application workloads were similar but for PHP Address
Book it had 12 requests, while for refbase it had 14 requests.
The evaluation started with one machine running one
browser executing the refbase workload, next we gradually
increased the number of machines (one by one) running one
browser. On a second phase, we evaluated the same workload
with four machines running two browsers each one (8 in the
total), then we incremented to 12, 16 and 20 browsers. The
last two batteries of experiments, we had all machines with all
browsers running the other two workloads, respectively. On
all experiments, each browser executed the workload in a loop
many times, sending the requests one by one.
Figure 5 depicts the results of the experimental evaluation
for the three web applications and 20 browsers in 4 machines.
The ﬁgure shows how the average latency overhead varied
from 0.5% to 2.2%, depending if SEPTIC was conﬁgured
with both detections disabled (NN) or both enabled (YY). The
ﬁgure also shows that the overhead of all applications is similar
for each SEPTIC conﬁguration. With SEPTIC set up to detect
only SQLI (YN), the overhead was only 0.8%. These values
suggest that it is feasible to run SEPTIC by default inside
MySQL as there is a very limited impact on performance.
III. APPLICATION SCENARIO
We consider the WaspMon web application [24]. It is a
real open source web application that can manage the energy
consumption in devices (e.g., of a household or a factory).
This sort of application is included in typical smart power
grid scenarios. For serious forms of vulnerabilities, it can cause
problems not only to the owner of the devices but in extreme
cases could create power imbalances in the grid.
In our scenario, the web application is programmed in PHP
and runs in an Apache web server with Zend and employs a
555
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:13 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1)(cid:13)(cid:12)(cid:14)
(cid:16)(cid:13)(cid:15)(cid:14)
(cid:16)(cid:13)(cid:12)(cid:14)
(cid:9)(cid:13)(cid:15)(cid:14)
(cid:9)(cid:13)(cid:12)(cid:14)
(cid:12)(cid:13)(cid:15)(cid:14)
(cid:12)(cid:13)(cid:12)(cid:14)
(cid:18)
(cid:3)
(cid:8)
(cid:40)
(cid:19)
(cid:8)
(cid:36)
(cid:21)
(cid:2)
(cid:39)
(cid:38)
(cid:34)
(cid:8)
(cid:3)
(cid:35)
(cid:37)
(cid:2)
(cid:8)
(cid:7)
(cid:3)
(cid:19)
(cid:8)
(cid:36)
(cid:17)
(cid:17)(cid:18)(cid:18)(cid:19)(cid:8)(cid:5)(cid:5)(cid:2)(cid:20)(cid:21)(cid:21)(cid:22)
(cid:19)(cid:8)(cid:23)(cid:24)(cid:3)(cid:5)(cid:8)
(cid:25)(cid:8)(cid:19)(cid:21)(cid:26)(cid:27)(cid:28)
(cid:10)(cid:10)
(cid:11)(cid:10)
(cid:10)(cid:11)
(cid:11)(cid:11)
(cid:28)(cid:29)(cid:6)(cid:30)(cid:31)(cid:26)(cid:2)(cid:26)(cid:21)(cid:32)(cid:24)(cid:33)(cid:34)(cid:3)(cid:35)(cid:33)(cid:21)(cid:34)(cid:5)
Fig. 5: Overhead of SEPTIC with the applications PHP
Address Book, refbase and ZeroCMS.
background database managed by the MySQL DBMS. The
application allows the users to insert and retrieve data with
forms in web pages. These forms lead to reads and writes in
the background database by invoking SQL queries. The web
application is accessed through a web browser and is supposed
to be utilized by different users from distinct locations.
The main supported queries allow the insertion in the
database of data collected from the devices and to later read
this data for the user to check it. This supports for instance the
tracking of the device history, and eventually take some action
on it (e.g., disconnect the device, re-schedule the device for a
new data collect).
The programmer was careful and used PHP sanitization
functions (e.g., mysql_real_escape_string) to check all
inputs before inserting them in queries. Therefore, this web
application is apparently protected from the attacks we aim
to demonstrate. In the demonstration we also consider as
an alternative layer of protection the ModSecurity WAF [23]
(version 2.9.1, conﬁgured with OWASP Core Rule Set (CRS)
3.0). ModSecurity is the most popular WAF, widely adopted by
industry. It is integrated in the Apache web server and checks
the requests incoming from the browsers to the web server
before they reach the web application(s).
A. Attack scenario.
The attack scenario is depicted in Figure 6. The web ap-
plication is accessed by an user through a browser from some
place using a network connection. The web server receives
HTTP/HTTPS requests and sends them to the application. The
application uses the user inputs that come in the requests,
includes them in queries, and requests the execution of queries
to the MySQL DBMS. MySQL processes the queries and
returns the results to the application, which forwards them to
the browsers/users.
An attacker will scan the application, looking for entry
points in forms, to later inject malicious inputs, i.e., making
injection attacks in an attempt to compromise the application.
We can consider two kinds of vulnerabilities in the appli-
cation, depending on the sanitization (or not) of user inputs
included in the queries. An attacker will easily exploit vulner-
abilities associated to queries that use unsanitized user inputs,
performing SQLI attacks and the ﬁrst step of stored attacks
(storing of the malicious inputs in the database). The second
kind of vulnerabilities are more troublesome because the user
(cid:8)(cid:10)(cid:12)(cid:6)(cid:9)(cid:7)(cid:10)
(cid:13)(cid:14)(cid:14)(cid:7)(cid:9)(cid:9)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:12)
(cid:6)(cid:7)(cid:8)(cid:18)(cid:13)(cid:20)(cid:20)(cid:21)(cid:15)(cid:14)(cid:13)(cid:19)(cid:15)(cid:12)(cid:16)(cid:18)
(cid:13)(cid:19)(cid:19)(cid:13)(cid:14)(cid:22)(cid:7)(cid:10)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:6)(cid:7)(cid:8)
(cid:9)(cid:7)(cid:10)(cid:11)(cid:7)(cid:10)
Fig. 6: Attack to the web application and database.
inputs are sanitized, i.e., the application is supposedly secure.
Also, the application can be behind of a protection mechanism
such as ModSecurity. The attacker injects inputs in a way
that circumvents these security measures. These cases are
related with the exploitation of the semantic mismatch problem.
These attacks are not easily detected, passing unnoticed by the