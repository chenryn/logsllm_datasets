### Attack Reproduction and SEPTIC Operation Modes

An attack that reproduces the structure of the original query is designed to exploit the system. The attack targets the specific query, using malicious inputs.

#### Training Mode
In training mode, for each unique query received by SEPTIC, the Query Structure & Query Model (QS&QM) manager and the ID generator modules collaborate to create a query model, generate a query identifier, and associate them. The QS&QM manager then stores the query model in the QM Learned store.

There are several methods to trigger the queries:
- **Application Unit Tests:** These can be used to simulate and test various query scenarios.
- **Manual Input:** Programmers or administrators can manually input queries.
- **SEPTIC Training Module:** This external module supports normal web applications and functions like a crawler, navigating through the application to find forms and inject benign inputs, which are then transmitted to MySQL.

#### Normal Mode
In normal mode, SEPTIC can operate in either detection or prevention mode. The key difference between these modes is the handling of detected attacks:
- **Detection Mode:** The query is executed, and the attack is logged.
- **Prevention Mode:** The query is not executed; instead, it is dropped, and the attack is blocked and logged.

For each query, the QS&QM manager and ID generator modules work together to create the query structure and obtain the query identifier. The QS&QM manager then retrieves the query model identified by the query identifier. If a query model exists, the attack detector is activated to perform SQL Injection (SQLI) and stored injection detection. If an attack is detected, it is logged. If no query model exists for the given identifier, the QS&QM manager creates and stores the new query model, and the logger records this event. This process represents incremental training, as query models are learned and stored over time. The programmer or administrator must later determine if the query model originated from a benign or malicious query. Benign query models are saved with the existing known models.

Table I summarizes the operation modes and actions taken by SEPTIC. The last two rows highlight the prevention and detection modes within the normal operation mode, showing the difference in query execution when attacks are detected.

### Performance Impact on MySQL

We evaluated the performance impact of SEPTIC on MySQL under four configurations: enabling and disabling SQLI and stored injection detection. We used three real web applications—PHP Address Book, refbase, and ZeroCMS—and automated the experiments using BenchLab, a benchmarking testbed for web applications.

The experimental environment consisted of six identical machines (Intel Pentium 4 CPU 2.8 GHz, 1-core, 1-thread, 2 GB RAM, 80 GB SCSI hard disk, 1 Gb Ethernet card, running Linux Ubuntu 14.04). These machines were part of the Quinta cluster, a computational cluster for large-scale distributed systems experiments. Our tests were conducted on the R cluster, which includes eleven machines.

From the six machines in the R cluster, two served as servers, and four acted as clients. One server machine hosted the MySQL DBMS with SEPTIC installed, while the other ran the Apache web server and PHP Zend to execute the web applications. The Apache Tomcat was also necessary to run the BenchLab server. The client machines had the Firefox web browser and the BenchLab client installed, running pre-recorded workloads from the BenchLab server.

We evaluated SEPTIC with all combinations of protection settings (SQLI and stored injection on/off) and compared the results to the original MySQL without SEPTIC. We varied the number of client machines (1 to 4) and browsers (1 to 5 per machine) and created three workloads from the web applications. The ZeroCMS workload included 26 requests with various query types (SELECT, UPDATE, INSERT, DELETE) and web object downloads. The PHP Address Book and refbase workloads had 12 and 14 requests, respectively.

The evaluation began with one machine running one browser executing the refbase workload, gradually increasing the number of machines and browsers. The results, shown in Figure 5, indicate that the average latency overhead ranged from 0.5% to 2.2%, depending on the SEPTIC configuration. With both detections enabled (YY), the overhead was 2.2%, and with only SQLI detection (YN), it was 0.8%. These values suggest that SEPTIC can be feasibly integrated into MySQL with minimal performance impact.

### Application Scenario: WaspMon Web Application

WaspMon is a real open-source web application that manages energy consumption in devices, such as those in households or factories. It is programmed in PHP and runs on an Apache web server with Zend, using a MySQL database. The application allows users to insert and retrieve data via web forms, which lead to database reads and writes through SQL queries. The application is accessed via a web browser and is intended for use by multiple users from different locations.

The main supported queries allow the insertion and retrieval of device data, supporting tracking and management. The programmer used PHP sanitization functions (e.g., `mysql_real_escape_string`) to check all inputs before including them in queries, providing apparent protection against attacks. Additionally, ModSecurity WAF (version 2.9.1, configured with OWASP Core Rule Set 3.0) is considered as an alternative layer of protection. ModSecurity is widely adopted in the industry and checks incoming HTTP/HTTPS requests before they reach the web application.

#### Attack Scenario

Figure 6 illustrates the attack scenario. An attacker scans the application for entry points in forms, injecting malicious inputs to compromise the application. Two types of vulnerabilities can be exploited:
1. **Unsanitized Inputs:** Queries using unsanitized user inputs are easily exploitable through SQLI and stored injection attacks.
2. **Sanitized Inputs:** Even with sanitized inputs, attackers may exploit semantic mismatches, bypassing security measures and remaining undetected.

These attacks can have serious consequences, potentially affecting the power grid's stability.