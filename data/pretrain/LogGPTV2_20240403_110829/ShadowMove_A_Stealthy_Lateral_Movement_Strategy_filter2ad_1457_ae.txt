ations do not entail any additional authentication attempts.
As a result, those anomaly detection solutions that correlate
user login activities with network connection activities such
as [51] are ineffective.
5.2 Experimental Evaluation
In this section, we extensively evaluate ShadowMove in
the presence of host and network-based defensive mecha-
nisms that are typically found in enterprise environments.
To be more speciﬁc, we test ShadowMove against emerging
Endpoint Detection and Response (EDR) systems, top-notch
antivirus products, host-based IDSes, and network-based ID-
Ses.
We evaluate ShadowMove in the presence of emerging
Endpoint Detection and Response (EDR) systems, namely
CrowdStrike Falcon Prevent and Cisco AMP. EDRs are rele-
vant to our evaluation because some EDRs (such as Crowd-
Strike Falcon [34]) are designed to detect lateral movements.
USENIX Association
29th USENIX Security Symposium    571
Table 3: Effectiveness of Antivirus, IDS, and EDR Products
against FTPShadowMove (F), SQLShadowMove (S), and
WinRMShadowMove (W) PoCs. N means "not detected"
and – means "not applicable".
Type
AV
AV
AV
AV
AV
NIDS
Name/Version
McAfee/16.0
Norton/22.16.2.22
Webroot/9.0.24.37
Bitdefender/6.6.7.106
Windows
Defender/4.18.1901.7
Snort/2.9.12 (Windows
and Linux)
HIDS OSSEC/3.4.0 (Linux)
HIDS Osquery/4.0.2 (Linux)
HIDS Wazuh/3.10.2 (Linux)
EDR
Cisco AMP/6.1.5.10729
CrowdStrike Falcon
Prevent/4.20.8305.0
EDR
Update
2/3/2019
2/3/2019
2/3/2019
2/3/2019
2/3/2019
F/S/W
N/N/N
N/N/N
N/N/N
N/N/N
N/N/N
2/7/2019
N/N/N
10/12/2019 N/–/–
10/24/2019 N/–/–
10/24/2019 N/–/–
6/14/2018
N/N/N
2/11/2019
N/N/N
We also evaluate ShadowMove in presence of host-based an-
tivirus products: we choose the top four antivirus products
ranked by [50] for our evaluation (McAfee, Norton, Web-
root, and Bitdefender); we also choose Windows Defender
because it is the default AV on Windows systems. Moreover,
we choose the Snort IDS to evaluate ShadowMove against
network-based solutions (Snort rules V2.9.12 is used). Fi-
nally, for our ShadowMove design on Linux, we use three
popular host-based IDSes (OSSEC [10], Osquery [12], and
Wazuh [7]) to evaluate it.
Stealthiness against EDR and IDS solutions. We exper-
imentally conﬁrmed that ShadowMove PoCs can evade the
detection of Strike Falcon Prevent, Cisco AMP, OSSEC, Os-
query, Wazuh, and Snort (Windows and Linux). The detailed
result is shown in Table 3. During the evaluation, we used
the default detection rules provided by such tools. We also
manually inspect these default rules to understand why they
cannot detect ShadowMove. For example, the default Osquery
rules do not mention ptrace or process injection at all.
Stealthiness against host-based antivirus products. We
also experimentally conﬁrmed that ShadowMove PoCs can
evade the detection of the latest version of the above ﬁve AVs
on Windows 10 (These AVs do not have Linux versions). The
overall result is shown in Table 3.
Vendor feedback. We contacted Microsoft Security Re-
sponse Center (MSRC) and a case (number 46036) was
opened for our reported issue. On June 21, 2018, MSRC dis-
missed our reported issue as a vulnerability, stating that “this
behavior is by-design ... because from a system security stand-
point, one cannot duplicate a handle from a process without
already having full control over it and at that point there are
many other attacks possible.” This feedback from Microsoft
engineering team conﬁrmed that our attack is non-trivial to
deal with because fully addressing it will require a re-design
of the access control mechanism of handles in Windows. This
also implies that techniques like ShadowMove will continue
to help attackers on Windows in the foreseeable future.
6 Discussions and Future Work
Possible mitigation of ShadowMove. ShadowMove at-
tacks can be mitigated by addressing the two fundamental
weaknesses in existing computing environments (Section 2.1).
One idea is to better isolate legitimate processes from poten-
tial attacker processes to prevent socket stealing. For example,
we can make the legitimate processes as Protected (introduced
in Vista) or Protected Process Light (introduced in Windows
8.1) processes, such that an unprotected process cannot open
legitimate processes with PROCESS_DUP_HANDLE. However,
this approach has limitations such as processes that have GUI
cannot be protected [21] and the program ﬁle must be signed
by Microsoft [27]. Another idea is to introduce strong origin
integrity mechanisms in common enterprise computing pro-
tocols, like what SSL does. However, this may break many
legacy applications.
Limitations of the current ShadowMove prototype.
First, it has to ﬁnd an unencrypted TCP channel because
it is a user-level attack that cannot obtain secrets inside the
victim process. Due to this limitation, ShadowMove cannot
hijack connections for which user-level encryption is applied
to the payload. One known way to hijack encrypted connec-
tions is to inject code into victim processes, which will be
able to access plaintext messages [19]. Unfortunately, process
injection would make ShadowMove more visible to existing
detection tools (e.g., Windows Defender ATP [48]). Besides,
presence of encryption may not always be a hurdle for Shad-
owMove: there are proposals to implement encryption service
(such as TLS) in the kernel space [46], which will make the
TLS session vulnerable to ShadowMove because unencrypted
payload is sent to or received from the socket interface in
systems that deploy such kernel-level services. Second, Shad-
owmMove may not be able to get information such as the
shellID in Section 4.4 from the receiving buffer if the legiti-
mate client consumes the buffer ﬁrst. However, attackers can
simply retry and they need to succeed only once to achieve lat-
eral movement. Third, our design of ShadowMove on Linux
injects code into the target process’ address space in order
to hijack its control ﬂow, which jeopardizes ShadowMove’s
stealthiness compared with its Windows counterpart.
Other attacks enabled by socket duplication. As discov-
ered by Bui et al. [20], TCP communication among applica-
tions inside a machine (such as a browser and a backend pass-
word manager) is not totally secured. Therefore, our socket
duplication technique can be used to intercept and steal sen-
sitive data from such applications. Moreover, in this study
we try to abuse mostly client-side sockets (although we also
abuse server-side sockets to synchronize the network view,
572    29th USENIX Security Symposium
USENIX Association
as described in Section 3.2). However, we can use the same
technique to exploit server applications. For example, by du-
plicating sockets used by a server application, we can inject
malicious data to mount a phishing attack against a client
machine, hence providing an alternative implementation for
the attack described in [23].
7 Related Work
Traditionally, attackers exploit vulnerabilities in network
services, such as SMB or RDP, to laterally move across net-
works. However, due to the advances in defense mechanisms,
ﬁnding such vulnerabilities and exploiting them successfully
without being detected has become increasingly hard. As a
result, attackers have shifted their attention to more fruitful
approaches such as harvesting credentials from compromised
systems and reusing them to do the lateral movement. In cre-
dential dumping approach [43], attackers retrieve plaintext
account information including passwords from memory of
processes such as LSASS. Several open source frameworks
such as Mimikatz exist that can carve passwords from var-
ious locations in a system. Similarly, attacker can leverage
SSH Agent Forwarding [29] for lateral movement, in which
the attacker reuses saved SSH private keys in the memory to
log into SSH server(s). However, this technique requires a
number of special conditions, such as client and server(s) are
conﬁgured to use public/private key pairs, the client runs a
SSH key agent, the victim user has added private keys to the
key agent, and the attacker knows the usernames associated
with the private keys. Instead of retrieving the credentials, it
is also possible to harvest and reuse security tokens, such as
Kerberos TGT, Kerberos service ticket, and NTLM hash, to
get access to other systems in a network. Many APT groups,
including APT 19 and ATP 32, use such techniques to expand
their access across the target networks.
Several approaches aim to detect credential reuse attacks.
Siadati et al. [51] propose a machine learning framework
that extracts normal users’ login patterns and identiﬁes login
attempts that deviate from such patterns as attacks that try
to reuse learned credentials in a greedy way (i.e., testing all
credentials on all reachable systems). Kent et al. [35] suggest
that user authentication graphs be used to detect credential
misuse in large-scale, enterprise networks.
The hijacking approach presented in this paper is differ-
ent from traditional hijacking such as session hijacking in
web applications and network-level TCP hijacking. Instead,
what we propose is a host-level TCP hijacking by performing
socket duplication. SSH-Jack [19] is a technique that injects
code into the memory of a legitimate SSH client in order to
establish a rogue SSH session via the SSH client, which is
trusted by the SSH server. Unlike SSH-Jack, ShadowMove is
application-agnostic in the sense that it does not need to know
the internal implementation of clients in order to inject com-
mands. ShadowMove is also protocol-agnostic and can be
extended to support other protocols. In the current prototype,
ShadowMove can handle FTP, WinRM, and TDS protocols.
SSH connection persistence (with options such as
ControlMaster, ControlPath, and ControlPersist) [9,
13] is a SSH feature that can be abused for lateral movement.
With SSH connection persistence, a master SSH client pro-
cess goes through the normal authentication steps to establish
a connection to a SSH server; then slave SSH clients can
reuse this connection to access the server without repeating
the authentication steps. Therefore, if the victim environment
has a master SSH client running, an attacker can make a lat-
eral movement to the SSH server by acting as a slave SSH
client. However, this attack requires process cooperation: a
SSH client must be conﬁgured to run as a master client, which
is not common. Unfortunately, SSH master mode conﬁgura-
tion does not require elevated privileges so an attacker can
silently change the conﬁguration and prepare a malicious bi-
nary that launches the original SSH client in the master mode,
in a way similar to our design of ShadowMove on Linux
(Section 3.4.3). We note that this lateral movement technique
can overcome some limitations of ShadowMove because it
can abuse SSH that employs payload encryption. Therefore,
it is complementary to ShadowMove. Having said that, it is
a speciﬁc technique that only works for SSH in a particular
scenario, while ShadowMove is a general lateral movement
technique.
ShadowMove can sniff trafﬁc, but it is different from other
traditional snifﬁng techniques: instead of eavesdropping on
the network, ShadowMove sniffs trafﬁc on the host; instead
of capturing packets at the kernel level (like what WireShark
does), ShadowMove sniffs trafﬁc at the user level. Lateral
movement usually involves privilege escalation or harvesting
of additional credentials [22]. ShadowMove does not rely on
either privilege escalation or credential harvesting, so it is a
new type of lateral movement.
8 Conclusion
We propose the ShadowMove strategy that allows APT
attackers to make stealthy lateral movements within an en-
terprise network. Built upon a novel socket duplication tech-
nique, ShadowMove leverages existing benign network con-
nections and does not require any elevated privilege, new con-
nections, extra authentication, or process injection. Therefore,
it is capable of evading the detection of host- and network-
level defensive mechanisms. To conﬁrm the feasibility of our
approach, we have developed a prototype of ShadowMove
for modern versions of Windows and Linux OSes, which suc-
cessfully abuses three common enterprise protocols (i.e., FTP,
Microsoft SQL, and WinRM) for lateral movement, such as
uploading malware to the next target machine and starting
the malware execution on the next target. We describe the
technical challenges in ShadowMove, such as how to gen-
erate network packets that ﬁt in the context of an existing
network connection. We also experimentally conﬁrm that our
prototype implementation is undetectable by state-of-the-art
USENIX Association
29th USENIX Security Symposium    573
antivirus products, IDSes (such as Snort), and Endpoint De-
tection and Response systems. Our experience raises the bar
for lateral movement detection in an enterprise environment
and calls for innovative solutions.
9 Acknowledgement
We thank our shepherd Giancarlo Pellegrino and the anony-
mous USENIX Security reviewers for their insightful com-
ments and suggestions that help improve the quality of this
paper. This research has been partially funded by National Sci-
ence Foundation by CISE’s CNS-1566443 and gifts or grants
from Fujitsu. Special thanks also go to Dr. Qiong Cheng at
UNC Charlotte who shared her expertise in SQL scripting.
References
[1] winrm for go library. https://github.com/masterzen/
winrm. Accessed November 2018.
[2] winrm4j. https://github.com/cloudsoft/winrm4j. Ac-
cessed November 2018.
[11] Service name and transport protocol port number reg-
istry. https://www.iana.org/assignments/service-names-
port-numbers/service-names-port-numbers.xhtml, 2019.
[12] SQL
powered
operating
instru-
mentation,
analytics.
https://github.com/osquery/osquery, 2019. Accessed
October 2019.
monitoring,
system
and
[13] ssh_conﬁg — OpenSSH SSH client conﬁguration ﬁles.
http://manpages.ubuntu.com/manpages/bionic/man5/ssh_
conﬁg.5.html, 2019. Accessed October 2019.
[14] SWI Prolog. https://www.swi-prolog.org/, 2019. Ac-
cessed October 2019.
[15] Video Clip for the FTPShadowMove Demo on Ubuntu.
http://54.36.162.222/ShadowMoveDemo/LinuxShadow
Move.gif, 2019.
[16] Video
for
Clip
Demo.
http://54.36.162.222/ShadowMoveDemo/Shadowmove
PrototypeDemo.mp4, 2019.
ShadowMove
the
[3] Yama linux security module. https://www.kernel.org
/doc/Documentation/security/Yama.txt. Accessed June
2019.
[17] Video Clip for the SQLShadowMove Demo. http://
54.36.162.222/ShadowMoveDemo/SQLShadow
Move.gif, 2019.
[4] Calling external program on application server.
https://answers.sap.com/questions/7641883/calling-
external-program-on-application-server.html,
Accessed August 2019.
2010.