title:Baaz: A System for Detecting Access Control Misconfigurations
author:Tathagata Das and
Ranjita Bhagwan and
Prasad Naldurg
Baaz: A System for Detecting Access Control Misconﬁgurations
Tathagata Das
Ranjita Bhagwan
Prasad Naldurg
Microsoft Research India
PI:EMAIL
Microsoft Research India
PI:EMAIL
Microsoft Research India
PI:EMAIL
Abstract
Maintaining correct access control to shared resources
such as ﬁle servers, wikis, and databases is an important
part of enterprise network management. A combination
of many factors, including high rates of churn in organi-
zational roles, policy changes, and dynamic information-
sharing scenarios, can trigger frequent updates to user
permissions, leading to potential inconsistencies. With
Baaz, we present a distributed system that monitors up-
dates to access control metadata, analyzes this informa-
tion to alert administrators about potential security and
accessibility issues, and recommends suitable changes.
Baaz detects misconﬁgurations that manifest as small in-
consistencies in user permissions that are different from
what their peers are entitled to, and prevents integrity and
conﬁdentiality vulnerabilities that could lead to insider
attacks. In a deployment of our system on an organiza-
tional ﬁle server that stored conﬁdential data, we found
10 high level security issues that impacted 1639 out of
105682 directories. These were promptly rectiﬁed.
1 Introduction
In present-day enterprise networks, shared resources
such as ﬁle servers, web-based services such as wikis,
and federated computing resources are becoming in-
creasingly prevalent. Managing such shared resources
requires not only timely availability of data, but also cor-
rect enforcement of enterprise security policies.
Ideally, all access should be managed through a per-
fectly engineered role-based access control (RBAC) sys-
tem.
Individuals in an organization should have well-
deﬁned and precise roles, and access control to all re-
sources should be based purely on these roles. When
a user changes her role, her access rights to all shared
resources should automatically change according to the
new role with immediate effect.
In reality though, several organizations use disjoint ac-
cess control mechanisms which are not kept consistent.
Often, access is granted to individual users rather than to
appropriate roles. To make matters worse, administrators
and resource owners manually provide and revoke access
on an as-needed and sometimes ad-hoc basis. As access
requirements and rights of individuals in the enterprise
change over time, it is widely recognized [19, 12, 5] that
maintaining consistent permissions to shared resources
in compliance with organizational policy is a signiﬁcant
operational challenge.
Incorrect access permissions, or access control mis-
conﬁgurations, can lead to both security and accessibility
issues. Security misconﬁgurations arise when a user who
should not have access to a certain resource according to
organizational policy, does indeed have access. Accord-
ing to a recent report [12], 50 to 90% of the employees in
4 large ﬁnancial organizations had permissions in excess
to what was entitled to their organizational role, opening
a window of opportunity for insider attacks that can lead
to disclosure of conﬁdential information for proﬁt, data
theft, or data integrity violations. The 2007 Price Water-
house Cooper survey on the global state of information
security found that 69% of database breaches were by
insiders [24]. On the other hand, accessibility misconﬁg-
urations arise when a user who should legitimately have
access to an object, does not. Such misconﬁgurations, in
addition to being annoyances, impact user productivity.
Security and accessibility misconﬁgurations occur due
to several reasons. One contributing factor is the high
rate of churn in organizations, and in organizational roles
among existing employees, which necessitate changes
in access permissions. In the same report [12], it was
estimated that in one business group of 3000 people,
1000 organizational changes were observed over a pe-
riod of few months. Another factor is the dynamic na-
ture of information sharing workﬂows, where employ-
ees work together across organizational groups on short-
term collaborations. When permissions are granted to
shared resources for such collaborations, they are rarely
revoked. In longer time-scales, organizations also update
their policies in response to changing protection needs.
Very often, these policies are not explicitly written down
and system administrators, who have an operational view
of security, may not have a global view of organizational
needs, and may not be able to make these changes in a
timely manner.
To make matters worse, very often, no complete high-
level manifests exist, which correctly assign access per-
missions for a resource according to organizational pol-
icy. Consequently, given the large numbers of shared re-
sources, different access control mechanisms and enter-
prise churn, it is difﬁcult for administrators to manually
manage access control.
To address these limitations of existing access control
management systems, we present Baaz, a system that
monitors access control metadata of various shared re-
sources across an enterprise, ﬁnds security and acces-
sibility misconﬁgurations using fast and efﬁcient algo-
rithms, and suggests suitable changes.
To our knowledge, Baaz is the ﬁrst system that helps
an administrator audit access control mechanisms and
discover critical security and accessibility vulnerabilities
in access control without using a high-level policy mani-
fest. To do this, Baaz uses two novel algorithms: Group
Mapping, which correlates two different access control
or group membership datasets to ﬁnd discrepancies, and
Object Clustering, which uses statistical techniques to
ﬁnd slight differences in access control between users in
the same dataset.
We do not claim that techniques we use in Baaz will
ﬁnd all misconﬁgurations, as the notion of policy itself is
not deﬁned in most of our deployment settings. Also,
given that access permissions change very organically
over time and several of these changes are linked to ad-
hoc and one-off access requirements, it is very difﬁcult
for an automated system to deduce the exact and com-
plete list of all misconﬁgurations. However, our deploy-
ment experiences with real datasets have shown Baaz to
be very effective at ﬂagging high-value security and ac-
cessibility misconﬁgurations.
The operational context and main characteristics of
Baaz are:
• No assumption of well-deﬁned policy: Baaz does
not require a high-level policy manifest, though it
can exploit one if it exists. Rather than checking for
“correct” access control, it checks for “consistent”
access control by comparing users’ access permis-
sions and memberships across different resources.
• Proactive vs Reactive: Baaz takes as input static
permissions, such as access control lists, rather than
access logs. This approach helps ﬁx misconﬁgura-
tions before they can be exploited, reducing chances
of insider attacks. However, the system can be eas-
ily augmented to process access logs if required.
• Timeliness: Baaz continuously monitors access
control, so it can be conﬁgured to detect and report
misconﬁgurations on sensitive data items as they
occur, or just present periodic reports for less sensi-
tive data.
We present results from Baaz deployments on three
heterogeneous resources across two organizations, We
interacted with system administrators of both organiza-
tions to validate the reports and found a number of high-
value security and accessibility misconﬁgurations, some
of which were ﬁxed immediately by the respective sys-
tem administrators. In all these organizations, no pol-
icy manifest was readily available. Before we deployed
Baaz, these administrators had to examine thousands of
individual or group permissions to validate whether these
permissions were intended. The utility of Baaz can be
gauged to some extent from some comments we received
from administrators:
“This report is very useful. I didn’t even know
these folks had access!”
“This output tells me how many issues there
are. Now I HAVE to ﬁgure out what to do in
the future to handle access control better.”
“I did not realize that our policy change had
not been implemented!”
Our Baaz deployment in one organization found 10 se-
curity and 8 accessibility misconﬁgurations in conﬁden-
tial data stored on a shared ﬁle server. The security mis-
conﬁgurations were providing 7 users unwarranted ac-
cess to 1639 directories.
The rest of the paper is organized as follows: Section 2
describes our problem scope and assumptions. Section 3
presents the system architecture of Baaz, as well as an
overview of our algorithm workﬂow. Section 4 explains
our Matrix Reduction procedure for generating summary
statements and reference groups, followed by Sections 5
and 6, in which we present our Group Mapping and Ob-
ject Clustering algorithms. In Section 7, we outline more
detailed issues we encountered while designing the sys-
tem, and in Section 8, we describe our implementation,
deployment and evaluation of the Baaz prototype. Re-
lated work is presented in Section 9, and Section 10 sum-
marizes the paper.
2 System Assumptions
The main goal of Baaz is to ﬁnd misconﬁgurations in ac-
cess control permissions (as in ACLs) typically caused
by inadvertent misconﬁgurations, which are difﬁcult for
an administrator to detect and rectify manually. We
do not detect misconﬁgurations of access permissions
caused by manipulation by active adversaries. We as-
sume that the inputs to our tool, such as the ACLs and
well-known user groups, are not tampered. In many or-
ganizations, only administrators or resource owners will
be able to view and modify these metadata in the ﬁrst
place, so this assumption is reasonable.
In our target environment, a deﬁnition of correct pol-
icy is not explicitly available. Therefore, rather than
checking for correct access control, which we believe is
difﬁcult, the system checks for consistent access control.
Essentially, Baaz ﬁnds relatively small inconsistencies in
&ŝůĞ^ĞƌǀĞƌ
^ƚƵď
;ĞǆĂŵƉůĞƐƵďũĞĐƚͿ
^ƚƵď
^ƚƵď
tŝŬŝͬ
^ŚĂƌĞƉŽŝŶƚ
ĞƉĂƌƚŵĞŶƚĂů
'ƌŽƵƉƐ
;ĞǆĂŵƉůĞƌĞĨĞƌĞŶĐĞͿ
^ƚƵď
^ŚĂƌĞĚ
tĞďƉĂŐĞƐ
ƐƵďũĞĐƚĂŶĚƌĞĨĞƌĞŶĐĞ
ƐƵŵŵĂƌǇƐƚĂƚĞŵĞŶƚƐ
^ƵďũĞĐƚͲ
ZĞĨĞƌĞŶĐĞ
WĂŝƌƐ
DĂƚƌŝǆ
ZĞĚƵĐƚŝŽŶ
ƐƵďũĞĐƚƐƵŵŵĂƌǇ
ƐƚĂƚĞŵĞŶƚƐ
ĂĂǌ ^ĞƌǀĞƌ
'ƌŽƵƉ
DĂƉƉŝŶŐ
KďũĞĐƚ
ůƵƐƚĞƌŝŶŐ
DŝƐĐŽŶĨŝŐ
ZĞƉŽƌƚ
Figure 1: Baaz System Architecture
user permissions by comparing different sets of access
control lists, or by comparing user permissions within
the same access control list. We assume that large differ-
ences in access control are not indicative of misconﬁg-
urations. Clearly, our deﬁnition of small inconsistencies
and large differences (provided in Sections 5 and 6) will
govern the set of misconﬁgurations we ﬁnd. It is possi-
ble that this may lead to the system missing some gen-
uine problems which is an inherent limitation. In fact, as
described in Section 8.2, our deployment of Baaz missed
detecting some valid misconﬁgurations. However, ad-
ministrators can tune these parameters to keep the output
concise and useful.
3 System Overview
In this section, we present an overview of the system
components of Baaz. At the heart of our system, as
shown in Figure 1, is a central server that collects ac-
cess permission and membership change events from dis-
tributed stubs attached to shared resources. This server
runs the misconﬁguration detection algorithm when it re-
ceives these change events, and generates a report. An
administrator/resource owner can decides whether each
misconﬁguration tuple that Baaz reports is valid, invalid,
or an intentional exception. Administrators/owners will
need to ﬁx the valid misconﬁgurations manually. We
now provide an overview of the client stubs and server
functions.
3.1 Baaz Client Stubs
Baaz stubs continuously monitor access control permis-
sions on shared resources such as ﬁle servers, wikis,
version-control systems, and databases, and they monitor
updates to memberships in departmental groups, email
lists, etc. Each stub translates the access permissions for
a shared resource into a binary relation matrix, an ex-
ample of which is shown in Figure 2. Each such matrix
captures relations speciﬁc to the resource that the stub
runs on. For example, a ﬁle server stub captures the user-
ﬁle access relationship, relating which users can access
given ﬁles. On a database that stores organizational hi-
erarchy, the Baaz stubs capture the user-group member-
ship relation, relating which users are members of given
groups. We shall refer to an element in the relation ma-
trix M as Mi,j . A “1” in the ith row and the jth column
of M indicates the relation holds between the entity at
row i with the entity at column j, e.g., user i can read ﬁle
j, or user i belongs to group j, whereas a “0” indicates
that the relation does not hold.
Each Baaz stub sends Mi,j to the Baaz server either
periodically, or in response to a change in the relation-
ship. Section 7.2 further describes various issues that
we need to consider while designing and implementing
stubs.
3.2 Baaz Server
At initial setup, an administrator registers pairs of sub-
ject datasets and reference datasets with the server,
which form inputs to the server’s misconﬁguration detec-
tion algorithm. The subject dataset is the access control
dataset which an administrator wants to inspect for mis-
conﬁgurations. A reference dataset is a separate access
control or group membership dataset that Baaz treats as
a baseline against which it compares the subject. In a
sense, one can view the subject dataset as the implemen-
tation, and the reference dataset as an approximate pol-
icy, and the process of misconﬁguration detection com-
pares the implementation with the approximate policy.
Figure 2 shows an example subject dataset relation
matrix of ten users (labeled as A to J ) and 16 objects
(labeled as 1 to 16), and Figure 3 shows an example ref-
erence dataset relation matrix of the same set of users
8
9
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
1
1
3
1
1
1
1
1
1
4
1
1
1
1
1
1
5
1
1
1
1
1
1
6
1
1
1
1
1
7
1
1
1
1
1
A
B
C
D
E
F
G
H
I
J
10 11 12 13 14 15 16
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
z
ϭ
ϭ
ϭ

ϭ
ϭ
t y
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ
ϭ




&
'
,
/
:
Figure 2: Example subject dataset’s relation matrix
Figure 3: Example reference dataset’s relation matrix
and 4 groups (labeled as W to Z). We will use these ex-
ample inputs to illustrate our misconﬁguration detection
algorithm.
In the ﬁrst step,
Administrators can register multiple subject-reference