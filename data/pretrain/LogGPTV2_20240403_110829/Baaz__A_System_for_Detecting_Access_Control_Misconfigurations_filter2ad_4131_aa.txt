# Baaz: A System for Detecting Access Control Misconfigurations

## Authors
Tathagata Das  
Ranjita Bhagwan  
Prasad Naldurg  
Microsoft Research India  
Email: [email protected]  
Email: [email protected]  
Email: [email protected]

## Abstract
Maintaining accurate access control to shared resources such as file servers, wikis, and databases is a critical aspect of enterprise network management. Factors like high turnover in organizational roles, policy changes, and dynamic information-sharing scenarios can lead to frequent updates in user permissions, potentially causing inconsistencies. Baaz is a distributed system that monitors updates to access control metadata, analyzes this information to alert administrators about potential security and accessibility issues, and recommends appropriate changes. Baaz identifies misconfigurations that manifest as minor inconsistencies in user permissions compared to their peers, thereby preventing integrity and confidentiality vulnerabilities that could result in insider attacks. In a deployment on an organizational file server storing confidential data, Baaz identified 10 high-level security issues affecting 1,639 out of 105,682 directories, which were promptly rectified.

## 1. Introduction
In modern enterprise networks, shared resources such as file servers, web-based services like wikis, and federated computing resources are becoming increasingly prevalent. Managing these shared resources requires not only timely data availability but also the correct enforcement of enterprise security policies.

Ideally, all access should be managed through a well-engineered role-based access control (RBAC) system. Individuals in an organization should have well-defined and precise roles, and access control to all resources should be based solely on these roles. When a user's role changes, their access rights to all shared resources should automatically update to reflect the new role immediately.

In reality, many organizations use disjoint access control mechanisms that are not kept consistent. Often, access is granted to individual users rather than to appropriate roles. Administrators and resource owners manually provide and revoke access on an as-needed and sometimes ad-hoc basis. As access requirements and rights of individuals in the enterprise change over time, maintaining consistent permissions in compliance with organizational policy is a significant operational challenge [19, 12, 5].

Incorrect access permissions, or access control misconfigurations, can lead to both security and accessibility issues. Security misconfigurations occur when a user who should not have access to a certain resource according to organizational policy does indeed have access. According to a recent report [12], 50 to 90% of employees in four large financial organizations had permissions in excess of what was entitled to their organizational role, creating opportunities for insider attacks that can result in the disclosure of confidential information, data theft, or data integrity violations. The 2007 Price Waterhouse Cooper survey on the global state of information security found that 69% of database breaches were by insiders [24]. On the other hand, accessibility misconfigurations occur when a user who should legitimately have access to an object does not. Such misconfigurations, in addition to being annoyances, impact user productivity.

Security and accessibility misconfigurations arise due to several reasons. One contributing factor is the high rate of churn in organizations and in organizational roles among existing employees, necessitating changes in access permissions. Another factor is the dynamic nature of information sharing workflows, where employees work together across organizational groups on short-term collaborations. Permissions granted for such collaborations are rarely revoked. Over longer periods, organizations also update their policies in response to changing protection needs. These policies are often not explicitly written down, and system administrators, who have an operational view of security, may not have a global view of organizational needs and may not be able to make these changes in a timely manner.

To address these limitations, we present Baaz, a system that monitors access control metadata of various shared resources across an enterprise, detects security and accessibility misconfigurations using fast and efficient algorithms, and suggests suitable changes.

To our knowledge, Baaz is the first system that helps administrators audit access control mechanisms and discover critical security and accessibility vulnerabilities without requiring a high-level policy manifest. Baaz uses two novel algorithms: Group Mapping, which correlates different access control or group membership datasets to find discrepancies, and Object Clustering, which uses statistical techniques to identify slight differences in access control between users in the same dataset.

We do not claim that Baaz will find all misconfigurations, as the notion of policy itself is not defined in most of our deployment settings. Given that access permissions change organically over time and many changes are linked to ad-hoc and one-off access requirements, it is very difficult for an automated system to deduce the exact and complete list of all misconfigurations. However, our deployment experiences with real datasets have shown Baaz to be highly effective at flagging high-value security and accessibility misconfigurations.

The operational context and main characteristics of Baaz are:
- **No assumption of well-defined policy:** Baaz does not require a high-level policy manifest, though it can exploit one if it exists. Instead of checking for "correct" access control, it checks for "consistent" access control by comparing users' access permissions and memberships across different resources.
- **Proactive vs Reactive:** Baaz takes static permissions, such as access control lists, as input rather than access logs. This approach helps fix misconfigurations before they can be exploited, reducing the chances of insider attacks. The system can be easily augmented to process access logs if required.
- **Timeliness:** Baaz continuously monitors access control, allowing it to detect and report misconfigurations on sensitive data items as they occur, or to present periodic reports for less sensitive data.

We present results from Baaz deployments on three heterogeneous resources across two organizations. We interacted with system administrators of both organizations to validate the reports and found several high-value security and accessibility misconfigurations, some of which were fixed immediately by the respective administrators. In all these organizations, no policy manifest was readily available. Before deploying Baaz, administrators had to examine thousands of individual or group permissions to validate whether these permissions were intended. The utility of Baaz can be gauged from some comments we received from administrators:
- "This report is very useful. I didnâ€™t even know these folks had access!"
- "This output tells me how many issues there are. Now I HAVE to figure out what to do in the future to handle access control better."
- "I did not realize that our policy change had not been implemented!"

In one organization, our Baaz deployment found 10 security and 8 accessibility misconfigurations in confidential data stored on a shared file server. The security misconfigurations provided 7 users with unwarranted access to 1,639 directories.

The rest of the paper is organized as follows: Section 2 describes our problem scope and assumptions. Section 3 presents the system architecture of Baaz, along with an overview of our algorithm workflow. Section 4 explains our Matrix Reduction procedure for generating summary statements and reference groups, followed by Sections 5 and 6, which detail our Group Mapping and Object Clustering algorithms. In Section 7, we outline more detailed issues encountered while designing the system, and in Section 8, we describe our implementation, deployment, and evaluation of the Baaz prototype. Related work is presented in Section 9, and Section 10 summarizes the paper.

## 2. System Assumptions
The primary goal of Baaz is to find misconfigurations in access control permissions (e.g., ACLs) typically caused by inadvertent errors, which are difficult for an administrator to detect and rectify manually. We do not detect misconfigurations caused by active adversaries. We assume that the inputs to our tool, such as ACLs and well-known user groups, are not tampered with. In many organizations, only administrators or resource owners can view and modify these metadata, making this assumption reasonable.

In our target environment, a definition of correct policy is not explicitly available. Therefore, rather than checking for correct access control, which we believe is difficult, the system checks for consistent access control. Essentially, Baaz finds relatively small inconsistencies in user permissions by comparing different sets of access control lists or by comparing user permissions within the same access control list. We assume that large differences in access control are not indicative of misconfigurations. Clearly, our definition of small inconsistencies and large differences (provided in Sections 5 and 6) will govern the set of misconfigurations we find. It is possible that this may lead to the system missing some genuine problems, which is an inherent limitation. As described in Section 8.2, our deployment of Baaz missed detecting some valid misconfigurations. However, administrators can tune these parameters to keep the output concise and useful.

## 3. System Overview
In this section, we present an overview of the system components of Baaz. At the heart of our system, as shown in Figure 1, is a central server that collects access permission and membership change events from distributed stubs attached to shared resources. This server runs the misconfiguration detection algorithm when it receives these change events and generates a report. An administrator or resource owner can decide whether each misconfiguration tuple reported by Baaz is valid, invalid, or an intentional exception. Valid misconfigurations need to be fixed manually. We now provide an overview of the client stubs and server functions.

### 3.1 Baaz Client Stubs
Baaz stubs continuously monitor access control permissions on shared resources such as file servers, wikis, version-control systems, and databases, and they monitor updates to memberships in departmental groups, email lists, etc. Each stub translates the access permissions for a shared resource into a binary relation matrix, an example of which is shown in Figure 2. Each matrix captures relations specific to the resource that the stub runs on. For example, a file server stub captures the user-file access relationship, relating which users can access given files. On a database that stores organizational hierarchy, the Baaz stubs capture the user-group membership relation, relating which users are members of given groups. We refer to an element in the relation matrix M as Mi,j. A "1" in the ith row and the jth column of M indicates the relation holds between the entity at row i with the entity at column j, e.g., user i can read file j, or user i belongs to group j, whereas a "0" indicates that the relation does not hold.

Each Baaz stub sends Mi,j to the Baaz server either periodically or in response to a change in the relationship. Section 7.2 further describes various issues that we need to consider while designing and implementing stubs.

### 3.2 Baaz Server
At initial setup, an administrator registers pairs of subject datasets and reference datasets with the server, which form inputs to the serverâ€™s misconfiguration detection algorithm. The subject dataset is the access control dataset that an administrator wants to inspect for misconfigurations. A reference dataset is a separate access control or group membership dataset that Baaz treats as a baseline against which it compares the subject. One can view the subject dataset as the implementation and the reference dataset as an approximate policy, and the process of misconfiguration detection compares the implementation with the approximate policy.

Figure 2 shows an example subject dataset relation matrix of ten users (labeled as A to J) and 16 objects (labeled as 1 to 16), and Figure 3 shows an example reference dataset relation matrix of the same set of users and 4 groups (labeled as W to Z). We will use these example inputs to illustrate our misconfiguration detection algorithm.

In the first step, administrators can register multiple subject-reference pairs.