    typedef struct HGCMSERVICELOCATION
    {
        /** Type of the location. */
        HGCMServiceLocationType type;
        union
        {
            HGCMServiceLocationHost host;
        } u;
    } HGCMServiceLocation;
    typedef struct VBGLIOCHGCMCONNECT
    {
        /** The header. */
        VBGLREQHDR                  Hdr;
        union
        {
            struct
            {
                HGCMServiceLocation Loc;
            } In;
            struct
            {
                uint32_t            idClient;
            } Out;
        } u;
    } VBGLIOCHGCMCONNECT;
    /**
     * For VBGL_IOCTL_HGCM_CALL and VBGL_IOCTL_HGCM_CALL_WITH_USER_DATA.
     *
     * @note This is used by alot of HGCM call structures.
     */
    typedef struct VBGLIOCHGCMCALL
    {
        /** Common header. */
        VBGLREQHDR  Hdr;
        /** Input: The id of the caller. */
        uint32_t    u32ClientID;
        /** Input: Function number. */
        uint32_t    u32Function;
        /** Input: How long to wait (milliseconds) for completion before cancelling the
         * call.  This is ignored if not a VBGL_IOCTL_HGCM_CALL_TIMED or
         * VBGL_IOCTL_HGCM_CALL_TIMED_32 request. */
        uint32_t    cMsTimeout;
        /** Input: Whether a timed call is interruptible (ring-0 only).  This is ignored
         * if not a VBGL_IOCTL_HGCM_CALL_TIMED or VBGL_IOCTL_HGCM_CALL_TIMED_32
         * request, or if made from user land. */
        bool        fInterruptible;
        /** Explicit padding, MBZ. */
        uint8_t     bReserved;
        /** Input: How many parameters following this structure.
         *
         * The parameters are either HGCMFunctionParameter64 or HGCMFunctionParameter32,
         * depending on whether we're receiving a 64-bit or 32-bit request.
         *
         * The current maximum is 61 parameters (given a 1KB max request size,
         * and a 64-bit parameter size of 16 bytes).
         *
         * @note This information is duplicated by Hdr.cbIn, but it's currently too much
         *       work to eliminate this. */
        uint16_t    cParms;
        /* Parameters follow in form HGCMFunctionParameter aParms[cParms] */
    } VBGLIOCHGCMCALL;
    /**
     * HGCM parameter type.
     */
    typedef enum
    {
        VMMDevHGCMParmType_Invalid            = 0,
        VMMDevHGCMParmType_32bit              = 1,
        VMMDevHGCMParmType_64bit              = 2,
        VMMDevHGCMParmType_PhysAddr           = 3,  /**guest) */
        VMMDevHGCMParmType_LinAddr_Locked     = 7,  /**guest) */
        VMMDevHGCMParmType_PageList           = 10, /**
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "hgcm.h"
    void die(char *msg) {
       perror(msg);
       exit(-1);
    }
    //device fd
    int fd;
    int hgcm_connect(const char *service_name) {
       VBGLIOCHGCMCONNECT data = {
          .Hdr.cbIn = sizeof(VBGLIOCHGCMCONNECT),
          .Hdr.uVersion = VBGLREQHDR_VERSION,
          .Hdr.uType = VBGLREQHDR_TYPE_DEFAULT,
          .Hdr.rc = VERR_INTERNAL_ERROR,
          .Hdr.cbOut = sizeof(VBGLREQHDR) + sizeof(uint32_t),
          .Hdr.uReserved = 0,
          .u.In.Loc.type = VMMDevHGCMLoc_LocalHost_Existing
       };
       memset(data.u.In.Loc.u.host.achName,0,128);
       strncpy(data.u.In.Loc.u.host.achName,service_name,128);
       ioctl(fd,VBGL_IOCTL_HGCM_CONNECT,&data);
       if (data.Hdr.rc) { //error
          return -1;
       }
       return data.u.Out.idClient;
    }
    HGCMFunctionParameter64 arg_buf[0x100];
    int hgcm_call(int client_id,int func,char *params_fmt,...) {
       va_list ap;
       char *p,*bval,*type;
       uint32_t ival;
       uint64_t lval;
       HGCMFunctionParameter64 params;
       uint16_t index = 0;
       va_start(ap,params_fmt);
       for(p = params_fmt;*p;p++) {
          if(*p!='%') {
             continue;
          }
          switch (*++p) {
             case 'u': //整数类型
                ival = va_arg(ap,uint32_t);
                params.type = VMMDevHGCMParmType_32bit;
                params.u.value64 = 0;
                params.u.value32 = ival;
                arg_buf[index++] = params;
                break;
             case 'l':
                lval = va_arg(ap,uint64_t);
                params.type = VMMDevHGCMParmType_64bit;
                params.u.value64 = lval;
                arg_buf[index++] = params;
             case 'b': //buffer类型
                type = va_arg(ap,char *);
                bval = va_arg(ap,char *);
                ival = va_arg(ap,uint32_t);
                if (!strcmp(type,"in")) {
                   params.type = VMMDevHGCMParmType_LinAddr_In;
                } else if (!strcmp(type,"out")) {
                   params.type = VMMDevHGCMParmType_LinAddr_Out;
                } else {
                   params.type = VMMDevHGCMParmType_LinAddr;
                }
                params.u.Pointer.size = ival;
                params.u.Pointer.u.linearAddr = (uintptr_t)bval;
                arg_buf[index++] = params;
                break;
          }
       }
       va_end(ap);
       //printf("params count=%d\n",index);
       uint8_t *data_buf = (uint8_t *)malloc(sizeof(VBGLIOCHGCMCALL) + sizeof(HGCMFunctionParameter64)*index);
       VBGLIOCHGCMCALL data = {
          .Hdr.cbIn = sizeof(VBGLIOCHGCMCALL) + sizeof(HGCMFunctionParameter64)*index,
          .Hdr.uVersion = VBGLREQHDR_VERSION,
          .Hdr.uType = VBGLREQHDR_TYPE_DEFAULT,
          .Hdr.rc = VERR_INTERNAL_ERROR,
          .Hdr.cbOut = sizeof(VBGLIOCHGCMCALL) + sizeof(HGCMFunctionParameter64)*index,
          .Hdr.uReserved = 0,
          .u32ClientID = client_id,
          .u32Function = func,
          .cMsTimeout = 100000, //忽略
          .fInterruptible = 0,
          .bReserved = 0,
          .cParms = index
       };
       memcpy(data_buf,&data,sizeof(VBGLIOCHGCMCALL));
       memcpy(data_buf+sizeof(VBGLIOCHGCMCALL),arg_buf,sizeof(HGCMFunctionParameter64)*index);
       /*for (int i=0;iHdr.rc;
       free(data_buf);
       if (error) { //error
          return error;
       }
       /*for (int i=0;i<sizeof(VBGLIOCHGCMCALL)+sizeof(HGCMFunctionParameter64)*index;i++) {
          printf("%02x",data_buf[i]);
       }
       printf("\n");*/
       return 0;
    }
    int hgcm_disconnect(int client_id) {
       VBGLIOCHGCMDISCONNECT data = {
          .Hdr.cbIn = sizeof(VBGLIOCHGCMDISCONNECT),
          .Hdr.uVersion = VBGLREQHDR_VERSION,
          .Hdr.uType = VBGLREQHDR_TYPE_DEFAULT,
          .Hdr.rc = VERR_INTERNAL_ERROR,
          .Hdr.cbOut = sizeof(VBGLREQHDR),
          .Hdr.uReserved = 0,
          .u.In.idClient = client_id,
       };
       ioctl(fd,VBGL_IOCTL_HGCM_DISCONNECT,&data);
       if (data.Hdr.rc) { //error
          return -1;
       }
       return 0;
    }
    int main() {
       //打开设备
       fd = open("/dev/vboxuser",O_RDWR);
       if (fd == -1) {
          die("open device error");
       }
       int idClient = hgcm_connect("VBoxGuestPropSvc");
       printf("idClient=%d\n",idClient);
       char ans[0x100] = {0};
       int ret = hgcm_call(idClient,2,"%b%b","in","foo",4,"in","bar",4);
       ret = hgcm_call(idClient,1,"%b%b%u%u","in","foo",4,"out",ans,0x100,0,0);
       printf("%s\n",ans);
       printf("%d\n",hgcm_disconnect(idClient));
    }
## 0x03 感想
学习漏洞挖掘，不应该只依赖于现成的库或工具，就像本文，虽然`niklasb`大牛已经封装了`3dpwn`库，但是对于我们研究员来说，还是得先自己弄懂，自己动手写工具，才能明白其本质。
## 0x04 参考链接
[Investigating generic problems with the Linux Guest
Additions](https://www.virtualbox.org/wiki/LinuxAdditionsDebug)  
[corelabs-Breaking_Out_of_VirtualBox_through_3D_Acceleration-Francisco_Falcon.pdf](https://www.coresecurity.com/sites/default/files/private-files/publications/2016/05/corelabs-Breaking_Out_of_VirtualBox_through_3D_Acceleration-Francisco_Falcon.pdf)