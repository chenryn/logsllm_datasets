injects several attack messages with ID=0xB0, which is
usually sent by a legitimate ECU B, at a high frequency.
Thus, other nodes which normally receive message 0xB0
are forced to receive the fabricated attack messages more
often than the legitimate ones. We refer to such a case
as A mounting a fabrication attack on message 0xB0 or
its genuine transmitter B. Demonstrated attacks such as
controlling vehicle maneuver [20] and monopolizing the
CAN bus with highest priority messages [16] exemplify
a fabrication attack.
Suspension attack. To mount a suspension attack,
the adversary needs only one weakly compromised ECU,
i.e., become a weak attacker. As one type of Denial-of-
Service (DoS) attack, the objective of this attack is to
stop/suspend the weakly compromised ECU’s message
transmissions, thus preventing the delivery/propagation
of information it acquired, to other ECUs. For some
ECUs, they must receive certain information from other
ECUs to function properly. Therefore, the suspension at-
tack can harm not only the (weakly) compromised ECU
itself but also other receiver ECUs. An example of this
attack is shown in Fig. 2(b) where the weak attacker hav-
ing control of the Electric Power Steering ECU B stops
transmitting its measured steering wheel angle value. So,
the Electronic Stability Control (ESC) ECU A, which re-
quires the steering wheel angle value from B for detect-
ing and reducing the loss of traction, no longer receives
its updates and thus malfunctions.
Masquerade attack. To mount a masquerade attack,
the adversary needs to compromise two ECUs, one as
a strong attacker and the other as a weak attacker. The
Based on the adversary model discussed so far, we con-
sider the following attack scenarios that can severely im-
pair in-vehicle functions:
fabrication, suspension, and
1In this paper, we focus on only these three attack scenarios and
do not consider others as they may be less feasible or harmful, or be
detectable by existing IDSs.
914  25th USENIX Security Symposium 
USENIX Association
objective of this attack is to manipulate an ECU, while
shielding the fact that an ECU is compromised. Fig. 2(c)
shows an example where the adversary controls a strong
attacker A and a weak attacker B. Until time Tmasq, the
adversary monitors and learns which messages are sent at
what frequency by its weaker attacker, e.g., B sends mes-
sage 0xB0 every 20ms. Since most in-vehicle network
messages are periodic and broadcast over CAN, it is easy
to learn their IDs and intervals. Once it has learned the
ID and frequency of a message, at time Tmasq, the ad-
versary stops the transmission of its weak attacker and
utilizes its strong attacker A to fabricate and inject attack
messages with ID=0xB0. Stopping B’s transmission and
exploiting A for transmission of attack messages are to
overcome the weak attacker’s inability of injecting mes-
sages. After Tmasq, the original transmitter of 0xB0, B,
does not send that message any longer, whereas A sends
it instead at its original frequency. So, when the CAN
bus trafﬁc is observed, the frequency of message 0xB0
remains the same, whereas its transmitter has changed.
We refer to such a case as A mounting a masquerade at-
tack on message 0xB0 or its original transmitter B.
In fact, in order to attack and remotely stop a Jeep
Cherokee running on a highway, Miller et al. [25] had to
control its ABS collision prevention system by mount-
ing a masquerade (not fabrication) attack. In contrast to
other vehicles which they had previously examined (e.g.,
Toyota Prius), the Jeep Cherokee’s brake was not con-
trollable via the fabrication attack as its ABS collision
prevention system, which was the attack vector for en-
gaging brakes, was switched off when the fabrication at-
tack was mounted. On the other hand, when mounting
the masquerade attack, the system was not switched off,
thus allowing them to control the Jeep Cherokee’s brak-
ing maneuver.
attacks,
the
Using masquerade
adversary can
not only inject attack messages from the compro-
mised/impersonating ECU but also cause other severe
problems, signiﬁcantly degrading the in-vehicle net-
work performance. The impersonating ECU sending a
message instead of another ECU implies that it would
generate more messages to periodically transmit than be-
fore, making its transmit buffer more likely overloaded.
This may, in turn, lead to severe consequences, such
as non-abortable transmission requests [12], deadline
violation [18], and signiﬁcant priority inversion [32].
Moreover, the original sequence of messages may also
change, thus failing to meet the requirement of some
in-vehicle messages to be sent sequentially in a correct
order for proper vehicle operations. These network
problems from a masquerade attack occur while not
deviating much from the norm network behavior (e.g.,
message frequency remains the same). This is in sharp
contrast to the cases of mounting a fabrication attack
or a suspension attack, which may also incur similar
problems. Such problems have been identiﬁed to be
critical since they degrade the real-time performance
of CAN signiﬁcantly, and thus undermine vehicle
safety [12, 18, 32]. The masquerade attack can thus
cause more problems to the in-vehicle network than just
injecting attack messages.
3.3 Defense Against the Attacks
When the fabrication or suspension attack is mounted,
the frequency of certain messages signiﬁcantly and ab-
normally increases or decreases, respectively. Thus, if
state-of-the-art IDSs [16, 23, 30, 31], which monitor the
message frequencies, were to be used, the attacks can be
detected.
When mounting the masquerade attack, however, the
adversary does not change the original frequency of mes-
sages. Thus, the adversary may use this attack to evade
state-of-the-art IDSs. Moreover, if the adversary does
not change the content of messages as well, it can be-
have like a legitimate ECU. However, the adversary may
later mount other types of attacks (e.g., a fabrication at-
tack) through the impersonating ECU. Hence, defending
against the masquerade attack implies not only detect-
ing the attack reactively, but also preventing other attacks
proactively.
4 Clock-Based Detection
Although state-of-the-art IDSs are capable of detecting
some basic attacks such as fabrication attack and suspen-
sion attack, they fail to detect more sophisticated ones
such as the masquerade attack for the following reasons.
• No authenticity — CAN messages lack information
on their transmitters. So, existing IDSs do not know
whether or not the messages on the CAN bus were
sent by the genuine transmitter, and hence cannot
detect any changes of the message transmitter.
• Inability of identifying a compromised ECU —
Lack of the transmitter’s information makes it very
difﬁcult or impossible for state-of-the-art IDSs to
identify which of compromised ECUs mounted an
attack.
If CAN frames do not carry any information on their
transmitters, how could an IDS identify them and de-
tect intrusions such as the masquerade attacks? Which
behavior of CAN should the IDS model for detection of
such intrusions? We answer these questions by devel-
oping a novel IDS, CIDS, which exploits message fre-
quency to ﬁngerprint the transmitter ECUs, and models
a norm behavior based on their ﬁngerprints for intrusion
USENIX Association  
25th USENIX Security Symposium  915
detection. We focus on detecting intrusions in periodic
messages as most in-vehicle messages are sent periodi-
cally [32, 36].
4.1 Fingerprinting ECUs
For each in-vehicle ECU in CAN, the time instants of
periodic message transmissions are determined by its
quartz crystal clock [27]. We follow the nomenclature
of clocks of the NTP speciﬁcation [26] and Paxson [35].
Let Ctrue be a “true” clock which reports the true time at
any moment and Ci be some other non-true clock. We
deﬁne the terms “clock offset, frequency, and skew” as
follows.
• offset: difference in the time reported by clock Ci
and the true clock Ctrue. We deﬁne relative offset as
the offset between two non-true clocks.
• frequency: the rate at which clock Ci advances.
Thus, the frequency at time t is Ci(t) ≡ dCi(t)/dt.
• skew: difference between the frequencies of clock
Ci and the true clock Ctrue. We deﬁne relative skew
as the difference in skews of two non-true clocks.
If two clocks have relative offset and skew of 0, then
they are said to be synchronized. Otherwise, we consider
they are unsynchronized. Since CAN lacks clock syn-
chronization, it is considered to be unsynchronized.
Clock skew as a ﬁngerprint. The clock offsets and
skews of unsynchronized nodes depend solely on their
local clocks, thus being distinct from others. As others
have also concluded [17, 19, 42], clock skews and offsets
can therefore be considered as ﬁngerprints of nodes. Var-
ious studies have exploited this fact to ﬁngerprint phys-
ical devices [17, 19, 34, 42]. However, they are not ap-
plicable to our problem as they exclusively rely on the
timestamps carried in the packet headers, which are, as
discussed before, not available in in-vehicle networks.
Kohno et al. [19] considered an alternative to embed-
ded timestamps: using Fourier Transform for clock skew
estimation. However, as their approach relies on the
unique characteristics of the Internet (e.g., multi-hop de-
lays, large network topology), it cannot be directly ap-
plied to in-vehicle networks.
To build an effective IDS, which can detect various
types of attack including the masquerade attack, it should
be capable of verifying the transmitter of each message.
However, since such information is not present in CAN
messages, we must ﬁngerprint ECUs with other “leaked”
information. Unlike the existing approaches that exploit
embedded timestamps, we exploit message periodicity to
extract and estimate the transmitters’ clock skews, which
are then used to ﬁngerprint the transmitter ECUs.
t=0
Ideal
Actual
ECU A
ECU R
T
T+O1
2T
2T+O2
3T
3T+O3
d0+n0
T+O1+d1+n1
2T+O2+d2+n2
3T+O3+d3+n3
Trx =
T+O1+(cid:1104)d1+(cid:1104)n1
T+O2-O1+(cid:1104)d2+(cid:1104)n2 T+O3-O2+(cid:1104)d3+(cid:1104)n3
Figure 3: Timing analysis of message arrivals.
Clock skew estimation. Consider an ECU A which
broadcasts a message every T ms and an ECU R which
periodically receives that message. From the perspec-
tive of R, since only its timestamp is available, we con-
sider its clock as the true clock. As shown in Fig. 3,
due to the clock skew, periodic messages are sent at
times with small offsets from the ideal values (e.g., T ,
2T , 3T , ···). Let t = 0 be the time when the ﬁrst mes-
sage was sent from A, and Oi be the clock offset of A
when it sends the i-th message since t = 0. Then, after
a network delay of di, ECU R would receive that mes-
sage and put an arrival timestamp of iT + Oi + di + ni,
where ni denotes the noise in R’s timestamp quantiza-
tion [42]. Thus, the intervals between each arrival times-
tamp, Trx,i = T +ΔOi +Δdi +Δni, where ΔXi denotes the
difference of X between step i and i − 1, and O0 = 0.
Since the change in Oi within one time step is negligible
and ni is a zero-mean Gaussian noise term [2], the ex-
pected value of the timestamp intervals, μTrx = E[Trx,i],
can be expressed as:
μTrx = E[T + ΔOi + Δdi + Δni]
= T + E[ΔOi + Δdi + Δni]
≈ T,
(1)
where the second equality holds since T is a pre-
determined constant. Since the data lengths of CAN pe-
riodic messages, i.e., DLCs, are constant over time, for
now, we consider E[Δdi] = 0. Later in Section 4.4, we
will discuss the case when di is not constant, and how it
may affect the performance of CIDS.
Based on the arrival timestamp of the ﬁrst message,
d0 + n0, and the average of timestamp intervals, μTrx, we
extrapolate and determine the estimated arrival time of
the i-th message as iμTrx + d0 + n0, whereas the actual
measured arrival time is iT + Oi + di + ni. As we are
estimating subsequent arrival times, μTrx is determined
by past measurements. Since T is constant over time and
thus again μTrx ≈ T , the average difference between the
estimated and measured times is:
E[D] = E[i(T − μTrx ) +O i + Δd + Δn] ≈ E[Oi].
(2)
That is, from message periodicity, we can estimate the
average clock offset, E[Oi], which will indeed be dis-
tinct for different transmitters. Since clock offset is
916  25th USENIX Security Symposium 
USENIX Association
 RLS algorithm
a0 ← arrival timestamp of most recently rxed message
n ← 1
while n ≤ N do
if current time  an−1 then
λ−1P[k−1]t[k]
1+λ−1t2[k]P[k−1]
G[k] ←
P[k] ← λ−1(P[k− 1]− G[k]t[k]P[k− 1])
return S[k] ← S[k− 1] +G[k ]e[k]
Algorithm 1 Clock skew estimation with RLS
1: Initialize: S[0] = 0, P[0] = δ I
2: function SKEWUPDATE(t,e)
3:
4:
5:
6: end function
7: for kth step do
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27: end for
end if
end while
μT [k] ← 1
O[k] ← 1
Oacc[k] ← Oacc[k− 1] +|O[k ]|
e[k] ← Oacc[k]− S[k− 1]t[k]
S[k] ← SKEWUPDATE(t,e)
/* No longer receives the message */
an,··· ,aN ← signiﬁcantly high values
Tn,··· ,TN ← signiﬁcantly high values
break
an ← arrival timestamp of nth message
Tn ← an − an−1
n ← n + 1
N ∑N
i=1 Ti
N−1 ∑N
i=2 ai − (a1 + (i− 1)μT [k− 1])
else
 Timestamp interval
 Avg. timestamp interval
 Accumulated offset
 Identiﬁcation error
 Clock skew
slowly varying and non-zero [17, 42], E[Oi] = 0, whereas
E[ΔOi] = 0.
If ECU R were to determine the average clock offset
for every N received messages, since it is derived in ref-
erence to the ﬁrst message (of N messages), it represents
only the average of newly incurred offsets. Thus, to ob-
tain the total amount of incurred offset, which we call
the accumulated clock offset, the absolute values of the
average clock offsets have to be summed up. By deﬁni-
tion, the slope of the accumulated clock offset would thus
represent the clock skew, which is constant as we will
show and as others have also concluded [19, 29, 35, 40].
This enables CIDS to estimate the clock skew from ar-
rival timestamps and thus ﬁngerprint the message trans-
mitter for intrusion detection. We will later show, via ex-
perimental evaluations on a CAN bus prototype and on 3
real vehicles, that the thus-derived clock skew is indeed
a ﬁngerprint of an in-vehicle ECU.
4.2 CIDS — Per-message Detection
By determining the clock skew from observation of mes-
sage intervals, transmitter ECUs can be ﬁngerprinted.
We exploit this in designing CIDS, a clock-based IDS
for in-vehicle networks which detects intrusions in two
different ways: per-message detection and message-
pairwise detection, where the latter supplements the for-
mer in reducing false positive/negative results. Next, we
ﬁrst discuss per-message detection and then pairwise de-
tection.
Modeling. For a given message ID, CIDS derives the
accumulated clock offset inherent in the arrival times-
tamps. Since clock skew is constant, the accumulated
clock offset is linear in time, and hence CIDS describes it
as a linear regression model. A linear parameter identiﬁ-
cation problem is thus formulated as:
Oacc[k] = S[k]·t[k] +e[k ],
(3)
where at step k, Oacc[k] is the accumulated clock offset,
S[k] the regression parameter, t[k] the elapsed time, and
e[k] the identiﬁcation error. The regression parameter
S represents the slope of the linear model and thus the
estimated clock skew. The identiﬁcation error, e, repre-
sents the residual which is not explained by the model.
In CIDS, Oacc, S, t, and e are updated every N messages,
i.e., kN messages are examined up to step k.
To determine the unknown parameter S, we use the
Recursive Least Squares (RLS) algorithm [14], which
uses the residual as an objective function to minimize the
sum of squares of the modeling errors. Hence, in RLS,
the identiﬁcation error skews towards 0, i.e., has 0 mean.
We will discuss the computational overhead of RLS as
well as other possible solutions in Section 6.
Algorithm 1 describes how the clock skew is estimated
using RLS. First, CIDS measures the arrival times and
their intervals of N messages for a given ID. If the in-
tended message has not been received for a long time —
possibly due to suspension attack — as in line 13–14,
CIDS sets the remaining timestamp and interval values
signiﬁcantly higher. Once N values are measured, CIDS
determines the accumulated clock offset and accordingly,
the identiﬁcation error. Based on the thus-derived value,
the gain, G, and the covariance, P, are updated with RLS
for identifying the regression parameter S, i.e., estimate
clock skew. This procedure of clock skew estimation
continues iteratively during the operation of CIDS and, if
uncompromised, outputs an identiﬁcation error skewed
towards 0 and a constant clock skew. This way, the norm
clock behavior of the transmitter can be described as a
linear model with the clock skew being the slope.
In
RLS, a forgetting factor, λ , is used to give exponentially
less weights to older samples and thus provide freshness.
In CIDS, we set λ =0.9995.
Detection. For a given message ID, CIDS runs RLS
for clock skew estimation, constructs a norm model on
clock behavior, and veriﬁes whether there are any abnor-
mal measurements deviating from it, i.e., intrusions.
Consider a fabrication attack in which the adversary
injects an attack message with ID=0x01, which is orig-
inally sent every 10ms by some ECU. The fabrication
USENIX Association  
25th USENIX Security Symposium  917
attack signiﬁcantly increases the absolute average differ-
ence between the estimated and measured arrival times
of 0x01. As a result, due to a sudden increase in the
rate at which the accumulated clock offset changes, a
high identiﬁcation error results. Similarly, when the sus-
pension attack is mounted, the absolute average differ-
ence also increases and thus a high error is also incurred.
When a masquerade attack is mounted, since the adver-
sary sends the message through a different ECU than its
original one, the increase rate of accumulated clock off-
set, i.e., clock skew, suddenly changes and also results in
a high identiﬁcation error. In summary, unlike when the
mean of identiﬁcation error should usually skew towards
0, which is the norm clock behavior, its mean suddenly
shifts towards a high non-zero value when there is an in-
trusion.
CIDS exploits the Cumulative Sum (CUSUM) method,
which derives the cumulative sums of the deviations from
a target value to detect sudden shifts. Since it is cumu-
lative, even minor drifting from the target value leads to
steadily increasing or decreasing cumulative values. It
is therefore optimal in detecting small persistent changes
and is widely used for change-point detection [8]. CIDS
detects intrusions via CUSUM as follows. At each step
of clock skew estimation, CIDS updates the mean and
variance of the identiﬁcation errors (e), μe and σ 2
e , re-
spectively. In CIDS, these values represent the CUSUM
target values of e (i.e., norm clock behavior), and thus
require proper tracking. Hence, as a precaution of ab-
normal values incurring from an attack to be reﬂected
into the target values, μe and σ 2
e are updated only if
| e−μe
| < 3. Then, per derived identiﬁcation error e, the
upper and lower control limits of CUSUM, L+ and L−
are updated as [41]:
σe
L+ ← max(cid:31)0,L+ + (e− μe)/σe − κ(cid:30)
L− ← max(cid:31)0,L− − (e− μe)/σe − κ(cid:30)
(4)
where κ is a parameter reﬂecting the number of standard
deviations CIDS intends to detect. Note that κ can be
learned ofﬂine, or by monitoring normal in-vehicle traf-
ﬁc. If either of the control limits, L+ or L−, exceeds a
threshold ΓL, a sudden positive or negative shift in value
has been detected, respectively, and thus CIDS declares it
as an intrusion. As the general rule of thumb for CUSUM
is to have a threshold of 4 or 5 [28], we set ΓL = 5.
4.3 CIDS — Message-pairwise Detection
In addition to per-message detection, CIDS also alarms
intrusions via message-pairwise detection, which exam-
ines the correlation between the average clock offsets in
two periodic messages. Consider two messages M1 and
M2 periodically sent by an ECU A. Since these messages
originate from the same transmitter, their instantaneous
average clock offsets are likely equivalent. Thus, the cor-
relation coefﬁcient, ρ, between their average clock off-
sets (derived per step) would show a high value close to
1, i.e., correlated. On the other hand, if the two messages
were sent by different ECUs, ρ  0, i.e., uncorrelated.