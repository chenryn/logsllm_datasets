 [TRY-AGAIN] Try calling HELLO-WORLD again.
第2章
((FLET SWANK:SWANK-DEBUGGER-HOOK SWANK::DEBUG-IT))
(SWANK: :DEBUG-IN-EMACS #)
STORE-VALUE]
[USE-VALUE]
[RETURN-VALUE]
ABORT]
周而复始：REPL 简介
 Try calling a function other 
the
www.TopSage.com
SLIME
request
---
## Page 32
回FASL文件的名字，所以我们可以在REPL里像下面这样进行编译和加载：
产生的文件，也就是FASL文件一
序在REPL下逐个输入每一个表达式，
函数：
或者可以加载整个文件，当文件里含有大量定义时，这将更加便利，在REPL里像这样使用LOAD
冲区（使用C-x b，在其提示时输入hello.lisp），然后就像之前那样用C-c C-c重新编译那个定义。
知道保存在hello.lisp文件中的定义。有几种方式可以做到这一点。可以切换回含有那个文件的缓
来退出并回到REPL里。
器是如何与错误处理系统集成在一起的。尽管如此，目前最重要的是，要知道总是可以通过按q
REPL里。调试器缓冲区将会消失，而REPL将显示：
状态，甚至可以直接修复一些东西。不过目前先别担心它们。直接输入q退出调试器，然后回到
储（core dump）。事实上Lisp会转到调试器。
出一个异常并从栈上退回，而且它也绝对不会仅仅因为调用了一个不存在的函数就开始做核心转
Lisp实际上正在很好地处理这一情况。跟Java或者Python不同，CommonLisp不会只是放弃—抛
① 如果由于某种原因，LOAD没有正常执行，你将得到另一个错误并退回到调试器。如果发生了这样的事，多半是由
回到REPL里可以再试一次。问题在于Lisp不知道hello-worla的定义，因此你需要让Lisp
在调试器中时，你仍然拥有对Lisp的完全访问权限，所以可以通过求值表达式来检查程序的
另一种加载文件中有用定义的方法是，先用COMPILE-FILE编译，然后再用LOAD加载编译后
CL-USER> (hello-world)
那个T表示文件被正确加载了。
相比直接中止调试器，在它里面显然可以做更多的事情——例如我们将在第19章里看到调试
天哪！发生了什么事？原来，你试图调用了一个不存在的函数。不过尽管输出了很多东西，
NIL
Hello, world!
CL-USER> (load "hello.lisp")
CL-USER>
; Evaluation aborted 
CL-USER> (hello-world)
示命令时输人cd，以及hello.lisp被保存到的目录名。
你可以键人q退出调试器，然后使用SLIME快捷命令cd来改变Lisp所认为的当前目录—输人一个逗号，然后在提
于Lisp没有找到那个文件，而这可能是因为Lisp所认为的当前工作目录和你文件所在的位置不一样。这种情况下，
 Loading /home/peter/my-lisp-programs/hello.lisp
T)
4：
3：
 2: (SWANK:SWANK-DEBUGGER-HOOK # 
(SWANK::EVAL-REGION "(hello-WOrld)
{EVAL
(ERROR #)
(HELLO-WORLD))
—快速加载文件（fast-load file）的简称。COMPILE-FILE将返
。“使用LOAD加载一个文件，本质上等价于以文件中出现的顺
，因此在调用了LoAD之后，hello-worla就应该有定义了：
www.TopSage.com
2.6保存工作成果
15
---
## Page 33
个比“hello,world”更有趣一点儿的程序了。
宙飞船上的读一求值一打印循环，在查找和修复这个问题的过程中，真是无价之宝啊。
完成。
在距地球一亿英里外的地方出现时，地面团队得以诊断并修复了运行中的代码，使得实验顺利地
是，代码里的一个难以察觉的静态条件逃过了地面测试期间的检测并且已经升空了。当这个错误
宇宙飞船升空半年以后，一小段Lisp代码正准备控制飞船以进行为期两天的一系列实验。不幸的
个远程服务器。
使用REPL和SLIME来跟正在运行一个Web服务器的Lisp进行交互，同时它还在伺服Web页面。甚
添加、重定义和测试他们的程序。
新代码，调整和调试它们。资深的Lisp黑客们经常会保持一个Lisp映像日复一日地运行，不断地
技术和窍门，但你已经见到其本质要素了——通过与REPL的交互来尝试一些东西，加载和测试
里可能不会，因为它们总是编译所有东西。
所关联的文件。在一些Common Lisp实现里，对代码进行编译将使其速度更快一些；在其他实现
的文件名作为默认值，直接回车就可以了。或者可以输人C-cC-k来编译并加载那个当前缓冲区
调用命令slime-load-file来加载文件。Emacs将会提示你给出要加载的文件名，同时将当前
你还没有准备好将任何Lisp代码发送到太空，不过在接下来一章里，你就将亲身参与编写一
调试一个运行在一亿英里之外且价值一亿美元硬件上的程序是件有趣的经历。一个运行在宇
16
① htp:/www.flownet.com/gat/jpl-lisp.html.
一个更加令人印象深刻的案例是1998年发生在NASA的Deep Space 1任务中的远程调试。在
同样地，甚至当部署Lisp程序以后，往往仍有一种方式可以进人REPL。第26章将介绍如何
SLIME还支持不使用REPL来加载和编译文件。在一个源代码缓冲区时，你可以使用C-c C-1
;; Writing fasl file hello.fasl
CL-USER> (load (compile-file "hello.lisp"))
一个程序员如此描述了这件事：
[ses'ottau/swexboxd-dstt-Au/ razad/auou/ butpeot asea 
;; Fasl write complete
Compiling file
第 2章
周而复始：REPL 简介
hello.lisp
www.TopSage.com
---
## Page 34
的用户自定义类。
提供了大量可供选择的数据结构—从简单的四元素列表到基于CommonLisp对象系统（CLOS)
转换过的标记。因此，首先需要一种方式来表示一条数据库记录（也就是一张CD)。CommonLisp
将包含CD的标题和艺术家信息，一个关于有多少用户喜欢它的评级，以及一个表示其是否已经
3.1CD和记录
个大致的印象，并能看到即便相对简单的Lisp程序也可以有着丰富的功能。
Lisp技术来。本章的重点和意图也不在于讲解如何用Lisp编写数据库，而在于让你对Lisp编程有
个词来表示。眼下你差不多可以认为函数、宏和特殊操作符是等价的。?
在提及操作符时，我还是会适时地说成是函数、宏或特殊操作符，而不会笼统地用“操作符”这
型的操作符：函数、宏以及特殊操作符。对于本章来说，你并不需要知道它们的区别。尽管如此，
CommonLisp控制结构以及更多内容。
目前你不需要执著于细节，接下来的几章将以一种更加系统化的方式介绍这里用到的所有
分。毕竟，为了有大量的MP3可听，对我们所拥有并需要转换成MP3的CD加以记录是很有用的。
器构建一个MP3数据库时还会用到类似的技术。事实上，它可以看成是整个MP3软件项目的一部
的例子。本章将编写一个简单的数据库用来记录CD光盘。在第27章里，为我们的流式MP3服务
用之前就要先把它所有的细节都学完吗？”因此，我先给你一-个小型的可以用CommonLisp来做
另外请记住，我不会在这个继“hello,world”后写的首个程序中亮出所有最专业的Common
关于术语方面，本章将讨论少量Lisp操作符。第4章将学到Common Lisp所提供的三种不同类
在本章，我只介绍足以使你理解代码工作原理所需的Lisp特性，但细节方面不会解释太多。
①尽管如此，在正式开始之前，至关重要的一点是，你必须忘记所有关于C预处理器所实现的#define风格“宏"
为了记录那些需要转换成MP3的CD，以及哪些CD应该先进行转换，数据库里的每条记录都
的知识。Lisp宏是完全不同的东西。
第3章
实践：简单的数据库
www.TopSage.com
---
## Page 35
用列表似乎也还不错。同样出于简化目的，也可以使用一个全局变量*db*，它可以用DEFVAR宏
段，然后返回一个代表该CD的plist。
正的哈希表，但plist足以满足当前需要，并且可以更容易地保存在文件里（后面将谈及这点）。
符号，并返回plist中跟在那个符号后面的值，这使得plist成为了穷人的哈希表。当然，Lisp有真
如，：foo。下面是一个使用了关键字符号：a、：b和：c作为属性名的示例plist：
种特殊类型的符号—关键字（keyword）符号。关键字符号是任何以冒号开始的名字，例
符号的所有细节，基本上它就是一个名字。对于用来命名CD数据库字段的名字，你可以使用一
一类被称为属性表（property list，plist）的列表甚至更方便。属性表是这样一种列表：从第一个
表，如果正常执行的话，它将返回一个由其参数所组成的列表。
3.2
CD的记录，你可以这样调用make-cd：
用的参数将被绑定到形参列表中的变量上。例如，为了建立一个关于Kathy Mattea的名为Roses的
函数体。本例中的函数体只有一个形式，即对LIsT的调用。当make-ca被调用时，传递给该调
形参列表，这个函数拥有四个形参：title、artist、rating和ripped。形参列表后面的都是
使其成为了属性表。
元素开始的所有相间元素都是一个用来描述接下来的那个元素的符号。目前我不会深人讨论关于
真正令属性表便于表达数据库记录的原因则是在于函数GETF的使用，它接受一个plist和一个
18
只有单一记录还不能算是一个数据库，需要一些更大的结构来保存记录。出于简化目的，使
单词DEFUN告诉我们上述形式正在定义一个新函数，函数名是make-cd。跟在名字后面的是
(defun make-cd (title artist rating ripped)
理解了所有这些知识，你就可以轻松写出一个make-ca函数了，它以参数的形式接受4个字
CL-USER>（getf （1ist:a1:b2:c3):c)
CL-USER>（getf(1ist:a1:b2:c3):a)
注意，你可以使用和创建其他列表时同样的LIST函数来创建一个属性表，只是特殊的内容
CL-USER>（1ist:a1:b2:c3)
还可以使用一个四元素列表，将列表中的给定位置映射到记录中的给定字段。然而，使用另
CL-USER>(1ist123)
眼下你只能选择该系列里最简单的方法一
(123）
录入CD
(list:titletitle:artist artist :rating rating :ripped ripped))
第3章
实践：简单的数据库
www.TopSage.com
—使用列表。你可以使用LIST函数来生成一个列
:RATING7:RIPPEDT)
---
## Page 36
面这样的更适合人类阅读习惯的格式。
3.3
记录被添加以后整个数据库的值。
表达式PUSH所返回的值，并且PUSH返回它正在修改的变量的新值。因此你看到的其实是每次新
数add-record来给数据库增加一条记录。
来定义。名字中的星号是Lisp的全局变量命名约定。
① 使用全局变量也有一些缺点。例如，你每时每刻只能有一个数据库。在第27章，等学会了更多的语言特性以后，
但这种查看输出的方式并不令人满意。可以用一个dump-db函数来将数据库转储成一个像下
那些每次调用add-recora以后REPL所打印出来的东西是返回值,也就是函数体中最后一个
现在可以将add-record和make-cd一起使用，来为数据库添加新的CD记录了。
(defun add-record (cd) (push cd *db*))
可以使用PUSH宏为*db*添加新的项。
TITLE:
RIPPED:
RATING:
ARTIST:
TITLE:
RIPPED:
RATING:
ARTIST:
TITLE:
CL-USER> *db*
无论何时，在REPL里输入*db*都可以看到*db*的当前值。
{(:TITLE
CL-USER>
((:TITLE
CL-USER>
((:TITLE
(defvar *db* nil)
你可以构建一个更加灵活的数据库。但在第6章你会看到，即便是使用一个全局变量，在CommonLisp里也比其他
(:TITLE "Roses"
((:TITLE
语言更为灵活。
(:TITLE
(:TITLE
查看数据库的内容
:TITLE
"Roses" :ARTIST "Kathy Mattea"
"Fly"
"Fly" :ARTIST "Dixie Chicks" :RATING 8
Roses
Dixie Chicks
Fly
"Home" :ARTIST "Dixie Chicks" :RATING 9 :RIPPED T)
Dixie Chicks
(add-record
8
Home
:ARTIST
:ARTIST