::: itemizedlist
-   `ubi8-init`{.literal}:
    ::: itemizedlist
    -   CMD 设置为 `/sbin/init`{.literal}，以默认启动 systemd Init 服务
    -   包括 `ps`{.literal} 和处理相关命令（`procps-ng`{.literal}
        软件包）
    -   将 `SIGRTMIN+3`{.literal} 设置为 `StopSignal`{.literal}，因为
        systemd in `ubi8-init`{.literal}
        忽略常规信号退出（`SIGTERM`{.literal} 和
        `SIGKILL`{.literal}），但如果它收到
        `SIGRTMIN+3`{.literal}，则会终止
    :::
-   `ubi`{.literal} 8:
    ::: itemizedlist
    -   CMD 设置为 `/bin/bash`{.literal}
    -   不包含 `ps`{.literal} 和进程相关命令（`procps-ng`{.literal}
        软件包）
    -   不要忽略要退出的普通信号（`SIGTERM`{.literal} 和
        `SIGKILL`{.literal}）
    :::
:::
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-minimal-images_assembly_types-of-container-images}了解 UBI 最小镜像 {.title}
:::
UBI 最小镜像，名为 `ubi-minimal`{.literal}
提供最小的预安装内容集和软件包管理器(microdnf)。因此，您可以在最小化镜像中包含的依赖项时使用
`Containerfile`{.literal}。
UBI 最小镜像的主要功能包括：
::: itemizedlist
-   [**小大小**]{.strong} ：最小映像在磁盘上约 92M，压缩时为
    32M。这比标准镜像小了多一半。
-   [**软件安装`(microdnf`{.literal})**]{.strong} ：不包含完全开发的
    `yum`{.literal} 设备以使用软件存储库和 RPM 软件包，最小镜像包括
    `microdnf`{.literal} 实用程序。`microdnf`{.literal} 是
    `dnf`{.literal}
    的缩减版本，可让您启用和禁用软件仓库，删除和更新软件包，并在安装软件包后清除缓存。
-   [**基于 RHEL 打包**]{.strong} ：最小映像包含常规 RHEL 软件 RPM
    软件包，删除了一些功能。最小镜像不包括初始化和服务管理系统，如
    systemd 或 System V init、Python 运行时环境和一些 shell
    实用程序。您可以依赖 RHEL 软件仓库来构建镜像，同时执行最小的开销。
-   [**支持 `microdnf`{.literal} 模块：**]{.strong} `microdnf`{.literal}
    命令中使用的模块可让您安装同一软件的多个版本（如果可用）。您可以使用
    `microdnf 模块启用`{.literal}、`microdnf 模块禁用`{.literal} 和
    `microdnf 模块重置`{.literal} 来分别启用、禁用和重置模块流。
    ::: itemizedlist
    -   例如，要在 UBI 最小容器中启用 `nodejs:14`{.literal}
        模块流，请输入：
        ``` literallayout
        # microdnf module enable nodejs:14
        Downloading metadata...
        ...
        Enabling module streams:
            nodejs:14
        Running transaction test...
        ```
    :::
:::
红帽只支持 UBI
的最新版本，且不支持在点版本里保留。[如果您需要保留特定点版本，请参阅延长更新支持](https://access.redhat.com/articles/rhel-eus){.link}。
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-micro-images_assembly_types-of-container-images}了解 UBI 微镜像 {.title}
:::
The `ubi-micro`{.literal} 是可能最小的 UBI
镜像，通过排除软件包管理器及其通常包含在容器镜像中的所有依赖项来获取。这可最小化基于
`ubi-micro`{.literal}
镜像的容器镜像的受攻击面，并适用于最小应用程序，即使您对其他应用程序使用
UBI Standard、Minimal 或 Init。没有 Linux 分发打包的容器镜像称为
Distroless 容器镜像。
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#using-the-ubi-init-images_assembly_types-of-container-images}使用 UBI init 镜像 {.title}
:::
此流程演示了如何使用在主机系统上运行容器时，安装和配置 Web
服务器(httpd`)`{.literal}的 `Containerfile`{.literal} 来由 systemd
服务(`/sbin/init`{.literal})自动启动容器。如果未找到上下文目录中的
`Container`{.literal} `file`{.literal}，`podman build`{.literal}
命令会使用 `Containerfile`{.literal} ；否则，可以使用
`--file 选项指定任何文件`{.literal}。
::: orderedlist
**流程**
1.  在新目录中创建一个包含以下内容的 `Containerfile`{.literal} ：
    ``` literallayout
    FROM registry.access.redhat.com/ubi8/ubi-init
    RUN yum -y install httpd; yum clean all; systemctl enable httpd;
    RUN echo "Successful Web Server Test" > /var/www/html/index.html
    RUN mkdir /etc/systemd/system/httpd.service.d/; echo -e '[Service]\nRestart=always' > /etc/systemd/system/httpd.service.d/httpd.conf
    EXPOSE 80
    CMD [ "/sbin/init" ]
    ```
    `Containerfile`{.literal} 安装 `httpd`{.literal} 软件包，使
    `httpd`{.literal}
    服务在引导时启动，创建测试文件(`index.html`{.literal})，将 Web
    服务器公开给主机（端口 80），并在容器启动时启动 systemd init
    服务(`/sbin/init`{.literal})。
2.  构建容器：
    ``` literallayout
    # podman build --format=docker -t mysysd .
    ```
3.  可选。如果要使用 systemd 来运行容器，且在您的系统中启用了
    SELinux，您必须设置 `container_manage_cgroup`{.literal} boolean
    变量：
    ``` literallayout
    # setsebool -P container_manage_cgroup 1
    ```
4.  运行名为 `mysysd_run 的容器`{.literal} ：
    ``` literallayout
    # podman run -d --name=mysysd_run -p 80:80 mysysd
    ```
    `mysysd`{.literal} 镜像作为守护进程运行为 `mysysd_run`{.literal}
    容器，容器中的端口 80 向主机系统上的端口 80 公开。
    ::: variablelist
    [备注]{.term}
    :   在无根模式中，您必须选择主机端口号 \>= 1024。例如：
        ``` screen
        $ podman run -d --name=mysysd -p 8081:80 mysysd
        ```
        要使用端口号 \80/tcp  mysysd_run
    ```
6.  测试 Web 服务器：
    ``` literallayout
    # curl localhost/index.html
    Successful Web Server Test
    ```
:::
::: itemizedlist
**其它资源**
-   [无根 Podman
    的缺点](https://github.com/containers/podman/blob/master/rootless.md#shortcomings-of-rootless-podman){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#proc_using-the-ubi-micro-images_assembly_types-of-container-images}使用 UBI 微镜像 {.title}
:::
此流程演示了如何使用 Buildah 工具构建 a `ubi-micro`{.literal} 容器镜像。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  拉取并构建 `registry.access.redhat.com/ubi8/ubi-micro`{.literal}
    镜像：
    ``` literallayout
    # microcontainer=$(buildah from registry.access.redhat.com/ubi8/ubi-micro)
    ```
2.  挂载可正常工作的容器根文件系统：
    ``` literallayout
    # micromount=$(buildah mount $microcontainer)
    ```
3.  将 `httpd`{.literal} 服务安装到 `micromount`{.literal} 目录中：
    ``` literallayout
    # yum install \
        --installroot $micromount \
        --releasever 8 \
        --setopt install_weak_deps=false \
        --nodocs -y \
        httpd
    # yum clean all \
        --installroot $micromount
    ```
4.  在工作容器中卸载 root 文件系统：
    ``` literallayout
    # buildah umount $microcontainer
    ```
5.  从工作容器创建 `ubi-micro-httpd`{.literal} 镜像：
    ``` literallayout
    # buildah commit $microcontainer ubi-micro-httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  显示 `ubi-micro-httpd`{.literal} 镜像的详情：
    ``` literallayout
    # podman images ubi-micro-httpd
    localhost/ubi-micro-httpd latest 7c557e7fbe9f  22 minutes ago  151 MB
    ```
:::
:::
:::
[]{#assembly_working-with-container-images_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#assembly_working-with-container-images_building-running-and-managing-containers}第 3 章 使用容器镜像 {.title}
:::
Podman
工具设计为操作容器镜像。您可以使用此工具拉取镜像、检查、标签、保存、加载、重新分发和定义镜像签名。
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#con_container-registries_assembly_working-with-container-images}容器 registry {.title}
:::
容器注册表是用于存储容器镜像和基于容器的应用工件的存储库或存储库的集合。红帽提供的
registry 是：
::: itemizedlist
-   registry.redhat.io (requires authentication)
-   registry.access.redhat.com（不需要身份验证）
-   [registry.connect.redhat.com（拥有红帽合作伙伴连接计划图像](https://connect.redhat.com/){.link}
    ）
:::
要从远程 registry（如红帽自己的容器
registry）获取容器镜像，并将其添加到本地系统中，请使用
`podman pull`{.literal} 命令：
``` screen
# podman pull [:]/[/]:
```
其中 `[:]/[/]:
是容器镜像的名称。
例如，`registry.redhat.io/ubi8/ubi`{.literal} 容器镜像通过以下方式标识：
::: itemizedlist
-   `注册表服务器(registry.redhat.io`{.literal})
-   命名空间(`ubi8)`{.literal}
-   镜像名称(`ubi`{.literal})
:::
如果同一镜像有多个版本，请添加一个标签来显式指定镜像名称。默认情况下，Podman
使用 `:latest`{.literal} 标签，如 `ubi8/ubi:latest`{.literal}。
有些 registry 还使用 [*\*]{.emphasis}
来区分具有不同用户或机构 [*拥有的相同 \*]{.emphasis}
的镜像。例如：
::: informaltable
  命名空间          示例（[*\*]{.emphasis}/[*\*]{.emphasis}）
  ----------------- ----------------------------------------------------------------------------------
  机构              `redhat/kubernetes`{.literal}，`google/kubernetes`{.literal}
  login（用户名）   `alice/application`{.literal}，`bob/application`{.literal}
  role              `devel/database`{.literal}、`test/database`{.literal}、`prod/database`{.literal}
:::
有关转换到 registry.redhat.io 的详情，请参阅 [Red Hat Container Registry
Authentication](https://access.redhat.com/RegistryAuthentication){.link}
。在从 registry.redhat.io 拉取容器前，您需要使用 RHEL
订阅凭证进行身份验证。
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#con_configuring-container-registries_assembly_working-with-container-images}配置容器 registry {.title}
:::
您可以在 `registries.conf`{.literal} 配置文件中找到容器 registry
列表。以 root 用户身份，编辑 `/etc/containers/registries.conf`{.literal}
文件，以更改默认的系统范围搜索设置。
以 用户身份，创建 `$HOME/.config/containers/registries.conf`{.literal}
文件来覆盖系统范围的设置。
``` literallayout
unqualified-search-registries = ["registry.fedoraproject.org", "registry.access.redhat.com", "docker.io"]
```
默认情况下，podman `pull`{.literal} 和 `podman search`{.literal}
命令从指定顺序在非qualified `-search-registries`{.literal} 列表中列出的
registry 中搜索容器镜像。
::: variablelist
[配置本地容器 registry]{.term}
:   您可以在不进行 TLS 验证的情况下配置本地容器 registry。如何禁用 TLS
    验证有两个选项。首先，您可以在 Podman 中使用
    `--tls-verify=false`{.literal} 选项。其次，您可以在
    `registry.conf`{.literal} 文件中设置 `insecure=true`{.literal} ：
    ``` screen
    [[registry]]
    location="localhost:5000"
    insecure=true
    ```
[阻塞 registry、命名空间或镜像]{.term}
:   您可以定义 registry，不允许本地系统访问。您可以通过设置
    `blocked=true`{.literal} 来阻止特定的 registry。
    ``` screen
    [[registry]]
    location = "registry.example.org"
    blocked = true
    ```
    您还可以通过将前缀设置为
    `prefix="registry.example.org/namespace"`{.literal}
    来阻止命名空间。例如，使用
    `podman pull registry. example.org/example/image:latest`{.literal}