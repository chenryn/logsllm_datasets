# PostgreSQL 高并发数据库应用数据

## 目录
- PG 生态
- 常见的高并发场景与业务
- 高并发场景带来的挑战
- 高并发场景数据库设计与优化
- 阿里云 RDS PG 在高并发场景的内核改进
- 案例

## PG 生态
### 版本发布周期
PostgreSQL (简称 PG) 有固定的版本发布周期，并在2017年和2018年被评为年度数据库。中国用户会在2018年将 PG 定位为企业级数据库。

### 创新与价值
PG 支持多种应用场景，包括 OLTP、OLAP、文本处理、时序数据、SMP 并行计算、向量相似性计算、图谱分析、GPU 并行计算、流计算、异构计算、实时分析和混合负载。此外，PG 还支持 JIT 编译、向量计算、多维计算和分片（sharding）等功能。

### Oracle 兼容性
PG 的企业版提供了对 Oracle 的兼容性，降低了迁移成本。社区版通过 ora2pg 和 orafce 工具实现兼容，而阿里云版则通过 ADAM 和 PPAS 提供了更高的兼容性和性能。

### 开源许可
PG 采用类似 BSD 的开源许可协议，确保其开源特性。企业级业务对数据库的基本诉求包括可靠性、可用性、稳定性、安全性、扩展性、弹性和性能等。

### 典型企业用户
全球财富1000强中有许多公司使用 PostgreSQL，如：
- **制造业**：日系、德系汽车及其零部件生产线。
- **电信业**：NTT、KT、台湾大哥大。
- **金融业**：星展银行、Mastercard、德国证券交易所、西班牙储蓄银行、荷兰 ABN 集团。
- **政府**：NASA、欧洲宇航局、美国海空军、法国政府、波兰政府。
- **互联网**：苹果、Skype、Yahoo、SOE。
- **公共软件**：SAP、Salesforce。
- **其他**：思科、EMC、软银、英国乐透、SAP。

## 常见的高并发场景与业务
- **2C 业务**：秒杀、运营活动、热点事件。
- **游戏**：在线多人游戏。
- **物联网 (IoT)**：车联网。

## 高并发场景带来的挑战
- **高并发短连接**：建立连接成本高，效率低。
- **进程模式**：高并发场景下进程调度开销大，效率低下。
- **锁竞争问题**：隔离级别越高，问题可能越明显；存在死锁隐患。
- **雪崩隐患**：单实例多业务混合使用可能导致干扰、攻击和抖动。
- **高并发小事务**：IO 刷盘频率高。
- **计算能力挑战**：读写分离、从库延迟、索引 IO 引入 RT 增加。
- **内存挑战**：长连接占用会话级缓存、PROC 触发共享缓冲区哈希表、分区 relcache。

## 高并发场景数据库设计与优化
- **连接池**：内置或外置连接池、长连接。
- **Huge Page**：预计算、流计算 (Pipelinedb)。
- **释放会话内存上下文**：PGA、用户和 DB 级资源隔离。
- **Sharding**：AD Lock、读写分离、乐观锁、计算存储分离 (POLARDB PG)。
- **异步提交**：GIN 快速更新、组提交、锁超时。

## 阿里云产品线
- **POLARDB for PG**：支持 Oracle 和 PG 协议，计算存储分离，横向弹性扩容。
- **POLARDB 双机版**：高度兼容 Oracle，适用于核心业务系统。
- **POLARDB 集群版**：自主研发，支持超高并发和超大容量。
- **高可用版**：适用于基础业务系统，价格便宜。

## 阿里云 RDS PG 在高并发场景的内核改进
- **池化和优化**：关注社区版与阿里版之间的差异。
- **调度开销**：存储支持冷热数据分离，通过 OSS 扩展无限容量。
- **外部表**：支持读写、并行处理。
- **OSS 海量对象存储**：提供高效的数据存储解决方案。

## 为什么要研发 POLARDB PG
- **计算存储分离集群版**：解决 SQL 只能用到单核的问题。
- **升级和扩展**：无需迁移数据，增加只读节点速度快。
- **读写分离**：减少 SLAVE 增量复制和回放的延迟。
- **添加字段**：避免数据重写，逻辑 SLAVE 回放更快。
- **主节点写压力**：减少中断风险。
- **存储**：使用分布式块存储，支持 RDMA 网络，横向扩展能力强。
- **备份和恢复**：秒级快照备份和恢复，提高可靠性。

## 传统分库分表架构的缺陷
- **限制和操控差**：POLARDB PG 提供分布式的性能和单节点的操控性。

## 案例
### 乐观锁提高处理吞吐
- 通过超轻锁 (advisory LOCK) 解决高并发锁竞争问题。
- 代码示例：`update tbl set x=x where id=? and pg_try_advisory_xact_lock(id) returning *;`

### 秒杀
- 使用 ADLock 代替行锁，提高库存扣减的吞吐量。
- APP Redis QPS 示例：先判断库存，再进行 PG 扣减，最后更新 Redis 库存。

### 流计算大赛
- PCC 大赛案例：[GitHub 链接](https://github.com/digoal/blog/blob/master/201705/20170512_02.md)

### 时空轨迹实时聚合
- 使用阿里云 PostgreSQL Ganos 插件进行大并发点上报和轨迹查询。
- [GitHub 链接](https://github.com/digoal/blog/blob/master/201811/20181101_02.md)

## 谢谢
- 加入 PG 进阶钉钉群，每周技术直播和专家问答。

希望这些内容对你有所帮助！