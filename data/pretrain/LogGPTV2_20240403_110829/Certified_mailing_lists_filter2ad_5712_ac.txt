i=1 σi (mod n)
(hm)) and n is the RSA
[25]. That is, L/T computes rcpt =t
where σi = SigKL/T
modulus of L/T ’s signature key.
(SigKRi
6. (Message 5) L/T sends the delivery receipt to the
(SigKRi
(hm))
(“DeliveryReceipt”),
sender S: rcpt, SigKL/T
∀t
i=1 SigKL/T
On receiving this message the sender checks the con-
densed signature by multiplying the hashes of all input
messages (i.e. receiver signatures) and verifying that
(hm). If the sender wishes
to do so, it can verify each individual receiver’s sig-
nature as well. However, this is not necessary as the
sender “trusts” L/T to ensure fairness.
rcptP KL/T =t
i=1 SigKRi
Steps 4 and 5 for weak fairness: L/T performs iden-
tical operations to those for strong fairness except that L/T
does not wait for all key requests from the receivers; instead,
for every key request that it gets from a given receiver L/T
transforms k and sends it to that receiver, and sends a signed
delivery receipt to the sender.
1. L/T veriﬁes the signature on Message 3 from Receiver
Ri and compares hm from the message to that com-
puted in Step 2. If the signature or match fails, L/T
aborts the protocol.
2. L/T computes AEncP KRi
(k) = ΓKRi
(AEncP KLK (k)).
3. (Message 4) L/T sends the key to receiver Ri:
SigKL/T
(AEncP KRi
(k), hm, “KeyDelivery”)
On receiving this message Ri decrypts k with private
key KRi , uses k to decrypt the email message, and
veriﬁes the sender’s signature on the email. Ri also re-
computes hm by ﬁrst re-encrypting the decrypted mes-
sage with k and then verifying that the hash matches
the key request it had sent to L/T .
4. L/T co-signs received Message 3; i.e., L/T computes
rcpt = SigKL/T
(SigKRi
(hm), “DeliveryReceipt”).
5. (Message 5) L/T sends the delivery receipt to the
sender S: rcpt.
On receiving this message the sender veriﬁes L/T ’s
signature on the receipt.
Separating LS and T T P . For simplicity we combine LS
and T T P in the CMLP protocol. However, this is not nec-
essary for the protocol’s correctness.
If they were sepa-
rated, LS would execute functions for list creation, user sub-
scription (and associated key management), and forwarding
emails to list subscriber (both with and without transforma-
tion). The T T P would be placed between list subscribers
and LS and would execute functions for certiﬁed email de-
livery. Sender S would send Message 1 to T T P who would

then ask LS to forward Message 2 to all receivers. All re-
ceivers would send a key request (Message 3) to the T T P .
The T T P would then ask LS to transform and send the
key to the receivers (Message 4) and would send delivery
receipts to S (Message 5). In this case both T T P and LS
would be trusted entities (though neither would be able to
read messages) and have their own signature keys for which
veriﬁcation keys would be made available to list subscribers.
3.3 Analysis: Satisfying Requirements
In this section we analyse our protocol and informally
show that the protocol satisﬁes the requirements outlined in
Section 2. In the next section we discuss formal speciﬁcation
and veriﬁcation of the protocol using Proverif.
Strong Fairness. Strong fairness requires that a receiver
of a given list reads a message m if and only if all list sub-
scribers get m and the sender gets a delivery receipt from
every receiver of the list.
In the protocol any receiver Ri
must obtain k from L/T in order to read m. The protocol
ensures that (1) L/T delivers k to Ri only after it receives
key requests from all receivers, (2) L/T delivers k to all
receivers, and (3) L/T also sends a signed delivery receipt
rcpt along with signed key requests from all receivers to S.
S can reveal m, rcpt, and signed key requests to show that
all receivers have read the message.
Weak Fairness. Weak fairness requires that a receiver of
a given list reads a message m if and only if the sender gets
a delivery receipt from that receiver. The analysis for this
requirement is analogous to that for strong fairness.
Conﬁdentiality. The conﬁdentiality requirement for CML-
Ps is that only the sender and receivers should be able to
read messages. In particular, this implies that L/T should
not be able to read messages. The protocol ensures this by
using the CMLP proxy encryption scheme, which encrypts
the symmetric key k with P KLK and enables L/T to trans-
form this such that it is encrypted with the receivers’ public
keys. This prevents all users that are not part of the list
and L/T from accessing message cleartext.
Non-repudiation of origin. This requires that once a re-
ceiver gets a message m, the sender should not be able to
deny that it originated the message. The protocol ensures
this by having the sender digitally sign the message. The
receiver can then produce the message and the sender’s sig-
nature to show that the sender originated the message.
Non-repudiation of receipt. This requires that once the
sender obtains a sending receipt from a given receiver, that
receiver should not be able to deny having received the mes-
sage. The protocol ensures this by having the receiver sign
hm, which is co-signed by L/T and sent to the sender as
the delivery receipt. When the delivery receipt is sent, L/T
also transforms the message key and sends it to the receiver.
The sender can produce the message m, key k, rcpt, and the
receiver’s signature on hm to show that the receiver received
the message.
Authentication and Integrity. The protocol ensures this
by having the sender sign the outgoing message, the receiver
sign the key request, and L/T sign the key delivery and the
delivery receipt. The signatures allow message recipients to
verify the senders’ identities and to ensure that the messages
have not been modiﬁed in transit.
4. DISCUSSION
In this section we analyze our protocol in terms of user
overhead, discuss the proxy encryption scheme used, and
examples where the CMLP protocol can be used.
4.1 Assessing User Overhead
An important feature of the CMLP protocol is that it re-
tains the ease of MLs while providing certiﬁed delivery. The
bulk of the key management overhead is endured by L/T and
each list subscriber only has to manage a El Gamal public-
private key pair and has to make its signature veriﬁcation
key available. This key pair is not aﬀected by the join and
leave of other users and, therefore, there are no re-keying
costs associated with list dynamics (i.e., join and leave of
subscribers). To send a certiﬁed email, the sender simply
sends an email encrypted with a symmetric key k (and k
encrypted with public key P KLK ) to L/T who then han-
dles all tasks and returns a delivery receipt for all receivers
to the sender. Unlike previous inline fair non-repudiation
protocols [23] where the sender has to send a separate mes-
sage for releasing k, in CMLP the L/T takes care of re-
leasing k to the recipients after it obtains delivery receipts
from them. This is possible because L/T can automatically
transform messages for any recipient that sends in a receipt
using proxy encryption while in [23] the sender had to com-
pute a group encrypted messages speciﬁcally for the users
that sent in the receipt. Furthermore, the veriﬁcation of de-
livery receipts by the sender is greatly simpliﬁed in CMLP
via the use of condensed signatures that require the sender
to perform only one exponentiation. On the recipient side,
each receiver only has to interact with L/T by sending a key
request and obtaining a key delivery in return.
4.2 Conﬁdentiality via Proxy Encryption
To satisfy our requirement of conﬁdentiality we use a
proxy encryption scheme. This scheme ensures that only
the sender and receivers can read email messages; i.e., even
L/T cannot read the messages. Such applications of proxy
encryption to minimize trust liability in servers (L/T in this
case) have previously been explored in [6, 21]. The con-
struction of the proxy transformation function Γ used by
the CMLP encryption scheme can be viewed as a two-step
threshold decryption process with the decryption key shared
between L/T and each subscriber. However, like [20] (who
use a similar construction for unidirectional ElGamal proxy
encryption) we identify the construction as a proxy encryp-
tion scheme because the semantics of the construction con-
vert a message encrypted with one public key (P KLK ) into
that encrypted with another public key (P KRi ) for some
receiver i without revealing the message or any key that can
be used to decrypt the message. This is precisely how proxy
encryption has been deﬁned in the literature [10, 20].
4.3 Examples of CMLP Use
We now provide two examples one where the strong fair-
ness guarantees of the CMLP protocol is needed and one
where weak fairness is needed:
Multi-party negotiations. Any oﬃcial multi-party document
exchange protocol (e.g., for contract-signing, establishing
resource-sharing agreements in dynamic coalitions, etc.) wo-
uld, in practice, require multi-round negotiations among the
participating entities before ﬁnal agreement is reached. We
argue that mailing lists provide an easy to use messaging
infrastructure for such negotiations and, in fact, is probably
used today albeit without any delivery guarantees. Strong
fairness in this setting would ensure that no subset of par-
ties can unduly inﬂuence the negotiation process as either all
parties receive a given message or no one does. Furthermore,
non-repudiation of both origin and receipt are important to
prevent false denial and false repudiation of proposed and
negotiated commitments. In contract-signing the ﬁnal step
would involve each party signing a known document such
that either all parties get the signature or no one does. The
strong fairness guarantee of the CMLP protocol can be used
to ensure this (with the key encrypting the sending party’s
signature being released only when all receiving parties are
willing to give a receipt for the signature); though there are
other techniques that provide this as well; e.g. [18].
Information Dissemination. In many workplaces oﬃcial an-
nouncements are sent via mailing lists. However, in the
absence of certiﬁed delivery, important announcements may
not reach recipients or their delivery might be repudiated.
For example, consider an announcement about new Visa
regulations in a University campus that aﬀects a signiﬁcant
number of international student, faculty, and staﬀ. Such an
announcement would typically be sent over a mailing list
of international people maintained by the oﬃce of interna-
tional education services. Using weak fairness would enable
the oﬃce to ensure that all members of the list received the
message and that no member can repudiate the fact that
they did.
5. FORMAL VERIFICATION
In this section we outline the formalization and veriﬁca-
tion of the fairness property of our certiﬁed mailing list pro-
tocol with details provided in the Appendix A. The proxy
encryption scheme used by the CMLP protocol and its ac-
companying proof presented in SELS provides conﬁdential-
ity. For fairness we use an automatic protocol veriﬁcation
tool, Proverif [2] and obtain results similar to those obtained
by Abadi and Blanchet in their veriﬁcation (using Proverif)
of a two-party certiﬁed email protocol [1]. We formally spec-
ify the protocol, state the propositions for weak fairness (we
have not yet undertaken the proof for strong fairness), and
show how the tool was used to prove these propositions.
The Veriﬁcation Tool.
Proverif is a sound veriﬁcation tool that requires protocols
to be expressed in a formal language. The tool then trans-
lates the expression into a set of Horn clauses and uses a
resolution-based solving algorithm to determine properties
of the protocol. An important capability for verifying our
protocol is that Proverif can serve for establishing correspon-
dence assertions using speciﬁed events. These events allow
for establishing assertions of the form, “if end(M ) has been
executed then begin(M ) must have been executed” (where
end(M ) and begin(M ) denote two events). We use such as-
sertions to show that a list subscriber will be able to receive
an email message if and only if the sender gets a correspond-
ing receipt for that message.
The input language and details in the internal representa-
tion are provided in [1]. Below we brieﬂy discuss the proof
engine and correspondence assertions with additional details
in [1], [2].
Proof Engine

The veriﬁer uses a resolution-based solving algorithm to de-
termine the properties of the protocol. It implements a func-
tion solveP,Init(F ) that takes as parameters the protocol P ,
the initial knowledge of the adversary Init, and a fact F , and
returns a set of Horn clauses. After translating the protocol
into a set of Horn clauses C, the function saturates this set
using a resolution-based algorithm, and ﬁnally determines
what is derivable. If F  is an instance of F , Cb is a set of
closed facts begin(p), then the tool can show the fact that
F  is derivable from C∪Cb if and only if there exists a clause
F ∧ ... ∧ Fn → F0 in solveP,Init(F ) and a substitution σ
such that F  = σF0 and σF1, ..., σFn are derivable from
C∪Cb. Values of solveP,Init(F ) other than φ indicate which
begin events must be executed to prove F .
Correspondence Assertions
The meaning of the correspondence assertion speciﬁcation
are as follows [1]:
Deﬁnition 1 (Correspondence) Let P be a closed pro-
cess and N , Mi,j for i ∈ {1, ..., n} and j ∈ {1, ..., li} be
terms whose free names are among the free names of P . The
process P satisﬁes the correspondence assertion end(N ) →
i=1 begin(Mi1), ..., begin(Mili ) with respect to Init-
adversaries if and only if, for any Init-adversary Q, for
any σ deﬁned on the variables of N , if end(σN ) is exe-
cuted in some reduction trace of P|Q, then there exists i ∈
{1, ..., n} such that we can extend σ so that for k ∈ {1, ..., li},
begin(σMi,k) is executed in the trace as well.
The following theorem provides a method for proving these
n
correspondence assertions with Proverif.
Theorem 1 (Correspondence) Let P be a closed pro-
cess and N , Mi,j for i ∈ {1, ..., n} and j ∈ {1, ..., li} be terms
whose free names are among the free names of P . Let pi,j
be the patterns obtained by replacing each name a with the
corresponding pattern a[] in the terms N, Mij respectively.
Assume that for all rules R in solveP,Init(end(p)), there ex-
ist i ∈ {1, ..., n}, σ’, and H such that R = H∧ begin(σ’pi1)
∧...∧ begin(σ’pili ) → end(σ’p). Then P satisﬁes the cor-
i=1 begin(Mi1), ...,
begin(Mili ) with respect to Init-adversaries.
respondence assertion end(N ) → n
Veriﬁcation of Weak Fairness
In Appendix A we provide a formalization of the CMLP
protocol in the input language of the veriﬁcation tool.
The correctness property for weak fairness is that a re-
ceiver gets message m if and only if the sender gets a re-
ceipt. The proof should be such that, if the sender goes
to a judge, then the judge can deﬁnitely state that the re-
ceiver has received the message. This property holds only
when the delivery of messages is guaranteed on the channels
between the sender, judge, and receivers.
The requirement for weak fairness translates into the fol-
lowing two propositions; the ﬁrst in which the receiver at-
tempts to cheat and the second in which the sender attempts
to cheat. We show how the tool is used to provide proofs
for these propositions in the Appendix A.
Proposition 1. Assume that messages from L/T sent to
the sender and from sender sent to the judge reach their
destination.
If the receiver has received message m, then
the judge says that the receiver has received m.