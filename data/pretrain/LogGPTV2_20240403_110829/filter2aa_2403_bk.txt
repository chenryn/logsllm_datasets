# CODE XREF: f+10 
# f+38 
bne      
$v1, $a1, loc_18 
addiu    
$a0, 1 
lb       
$v1, 0($a0) 
or       
$at, $zero 
bnez     
$v1, loc_28 
addiu    
$v0, 1 
locret_40:               
# CODE XREF: f+20 
jr       
$ra 
or       
$at, $zero 
locret_48:               
# CODE XREF: f+8 
jr       
$ra 
move     
$v0, $zero 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1166 章
章    数
数学
学计
计算
算指
指令
令的
的替
替换
换  
出于性能优化的考虑，编译器可能会将 1 条数学运算指令替换为其他的 1 条、甚至是一组等效指令。 
例如 LEA 指令通常替代其他的简单计算指令：请参见附录 A.6.2 节。 
ADD 和 SUB 指令同样可以相互替换。例如，指令清单 52.1 的第 18 行就是如此。 
16.1 乘法 
16.1.1 替换为加法运算 
我们通过下述程序进行演示。 
指令清单 16.1  Optimizing MSVC 2010 
unsigned int f(unsigned int a) 
{ 
         return a*8; 
}; 
如果使用 MSVC 2010（启用/Ox）进行编译，编译器会把“乘以 8”的运算指令拆解为 3 条加法指令。
很明显 MSVC 认为替换后的程序性能更高。 
_TEXT   SEGMENT 
_a$ = 8                         ; size = 4 
_f 
  PROC 
; File c:\polygon\c\2.c 
  mov  
eax, DWORD PTR _a$[esp-4] 
  add  
eax, eax 
  add  
eax, eax 
  add  
eax, eax 
  ret  
0  
_f 
  ENDP 
_TEXT   ENDS 
END 
16.1.2 替换为位移运算 
编译器通常会把“乘以 2”“除以 2”的运算指令处理为位移运算指令： 
unsigned int f(unsigned int a) 
{ 
  return a*4; 
}; 
指令清单 16.2  Non-optimizing MSVC 2010 
_a$ = 8         ; size = 4 
_f       PROC 
         push    ebp 
         mov     ebp, esp 
         mov     eax, DWORD PTR _a$[ebp] 
         shl     eax, 2 
         pop     ebp 
         ret     0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
182 
逆向工程权威指南（上册） 
_f  
  ENDP 
“乘以 4”的运算就是把被乘数左移 2 位、再把位移产生的空缺位添上 0 的运算。就好比在心算计算 3×100
的时候，我们就是在 3 后面的空缺位添加两个零。 
位移指令的示意图如下所示。 
右侧产生的空缺位都由零填充。 
乘以 4 的 ARM 指令如下所示。 
指令清单 16.3  Non-optimizing Keil 6/2013 (ARM mode) 
f  PROC 
  LSL      r0,r0,#2 
  BX       lr 
  ENDP 
对应的 MIPS 指令如下所示。 
指令清单 16.4  Optimizing GCC 4.4.5 (IDA) 
jr      $ra 
sll     $v0, $a0, 2 ; branch delay slot 
其中，SLL 是逻辑左移“Shift Left Logical”的缩写。 
16.1.3 替换为位移、加减法的混合运算 
即使乘数是 7 或 17，乘法运算仍然可以用非乘法运算指令配合位移指令实现。其算术原理也不难推测。 
32 位 
#include  
int f1(int a) 
{ 
         return a*7; 
}; 
int f2(int a) 
{ 
         return a*28; 
}; 
int f3(int a) 
{ 
         return a*17; 
}; 
x86 
指令清单 16.5  Optimizing MSVC 2012 
; a*7 
_a$ = 8 
_f1      PROC 
         mov     ecx, DWORD PTR _a$[esp-4] 
; ECX=a 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 16 章  数学计算指令的替换 
183 
         lea     eax, DWORD PTR [ecx*8] 
; EAX=ECX*8 
         sub     eax, ecx 
; EAX=EAX-ECX=ECX*8-ECX=ECX*7=a*7 
         ret     0  
_f1      ENDP 
; a*28 
_a$ = 8 
_f2      PROC 
          mov     ecx, DWORD PTR _a$[esp-4] 
; ECX=a 
         lea     eax, DWORD PTR [ecx*8] 
; EAX=ECX*8 
         sub     eax, ecx 
; EAX=EAX-ECX=ECX*8-ECX=ECX*7=a*7 
         shl     eax, 2 
; EAX=EAX 
int64_t f1(int64_t a) 
{ 
         return a*7; 
}; 
int64_t f2(int64_t a) 
{ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 16 章  数学计算指令的替换 
185 
         return a*28; 
}; 
int64_t f3(int64_t a) 
{ 
         return a*17; 
}; 
x64 
指令清单 16.9  Optimizing MSVC 2012 
; a*7  
f1: 
  lea   
rax, [0+rdi*8] 
; RAX=RDI*8=a*8 
  sub  
rax, rdi 
; RAX=RAX-RDI=a*8-a=a*7 
  ret 
; a*28  
f2: 
  lea  
rax, [0+rdi*4] 
; RAX=RDI*4=a*4 
  sal      rdi, 5 
; RDI=RDI<<5=RDI*32=a*32 
  sub      rdi, rax 
; RDI=RDI-RAX=a*32-a*4=a*28 
  mov  
rax, rdi 
  ret 
; a*17  
f3: 
  mov  
rax, rdi 
  sal      rax, 4 
; RAX=RAX<<4=a*16 
  add      rax, rdi 
; RAX=a*16+a=a*17 
  ret 
ARM64 
由于 ARM64 模式的位移指令同样可进行加法运算，所以这种程序要短一些。 
指令清单 16.10  Optimizing GCC (Linaro) 4.9 ARM64 
; a*7 
f1: 
  lsl      x1, x0, 3 
; X1=X0<<3=X0*8=a*8 
  sub      x0, x1, x0 
; X0=X1-X0=a*8-a=a*7 
  ret 
; a*28 
f2: 
  lsl      x1, x0, 5 
; X1=X0<<5=a*32 
  sub      x0, x1, x0, lsl 2 
; X0=X1-X0<<2=a*32-a<<2=a*32-a*4=a*28 
  ret 
; a*17 
f3: 
  add      x0, x0, x0, lsl 4 
; X0=X0+X0<<4=a+a*16=a*17 
  ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
186 
逆向工程权威指南（上册） 
16.2 除法运算 
16.2.1 替换为位移运算 
本节围绕下述源程序进行演示： 
unsigned int f(unsigned int a) 
{ 
  return a/4; 
}; 
使用 MSVC 2010 编译上述程序，可得到如下所示的指令。 