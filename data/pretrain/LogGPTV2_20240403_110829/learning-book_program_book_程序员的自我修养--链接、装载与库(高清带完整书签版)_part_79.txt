$./teat argl arg2 123
6 ./test
4arg2
4arg1
3123
-e mini_cr_entry 用于指定入口函数。
可以看到静态链接MiniCRT最后输出的可执行文件只有5083个字节，这正体现出了
Mini CRT的“迷你”之处。面如果静态链接Gibe时，最后可执行文件则约为538KB。在
Windows下，编译和运行 tesLe的步骤如下：
>c1 /c /DWIN32 te8t.c
>1ink te8t.obj minicrt.1ib kerne132.1ib /NoDgrAULrLIB /entry:mini_crt_entry
>dir test.exe
程序员的自我修养一链接、装载与库
---
## Page 456
13.3C++运行库实现
433
2008-08-19 22:05
5,120 test.exe
>dumpbin /IMPORTs teat.exe
Microsoft
(R) COFF/PE Dumper Version 9.00.21022.08
Copyright (C) xicrosoft Corporation. Al1 rights reserved.
Dump of file test.exe
File Type: EXECUTABLE IMAGE
Section contains the following imports1
KERNEL32 .d11
402000Import Addres8Table
402050 Import Name Table
0 time date stamp
0 Index of first forwarder reference
16F GetConmandLineA
104 BxitProcess
454 VirtualAlloc
23B GetStdHandle
78 CreateFileA
368 ReadPile
48D WriteFile
43 CloseHandle
3DF SetPilePointer
Sunnary
1000 .data
1000 .text
1000 .rdata
>test.exe argl arg2 123
4arg1
8 test.exe
4 arg2
3123
与Linux类似，Windows下使用Mini CRT链接的可执行文件也非常小，只有5120字节。
如果我们使用dumpbin查看它的导入函数可以发现，它仅依赖于Kermel32.DLL，也就是说
它的确是绕过了MSVCCRT的运行库msvcr90.dll（或msvcr90d.dl1）。
13.3C++运行库实现
现在MiniCRT已经能够支持最基本的C语言程序运行了.C++作为兼容C语言的扩展
语言，它的运行库的实现其实并不复杂，在这一章中将介绍如何为MiniCRT添加对C++语
言的一些常用的操作支持。
程序员的自我修养—链接、装载与库
---
## Page 457
434
第13章运行库实现
通常C++的运行库都是独立于C语言运行库的。比如Linux下C语言运行库为
libc.so/libc.a，而C++运行库为（libstdc++.so/libstdc++.a）：Windows的C语言运行库为
libcmt.lib/msvcr90.dll，面 C++运行库为 libcpmt.lib/msvcp90.dll。一般这些C++的运行库都是
依赖于C运行库的，它们仅包含对C++的一些特性的支持，比如 new/delete、STL、异常处
理、流（stream）等。但是它们并不包含诸如入口函数、堆管理、基本文件操作等这些特性，
而这些也是C++运行库所必需的，比如C++的流和文件操作依赖于C运行库的基本文件操
作，所以它必须依赖于C运行库。
本节中我们将在MiniCRT的基础上实现一个支持C++的运行库，当然出于简单起见，
将这个C++运行库的实现与MiniCRT合并到起，而不是单独成为一个库文件，也就是说
经过这一节对Mini CRT的功能改进，最终编译出来的 minicrtLa/minicrt.lib将支持C++的诸
多特性。
当然，要完整实现一个C++的运行库是很费事的一件事，C++标准模板库STL包含了
诸如流、容器、算法、字符串等，规模较为庞大。出于演示的目的，我们将对C++的标准库
进行简化，最终目标是实现一个能够成功运行如下C++程序代码的运行库：
// test.cpp
#include 
include 
using namespace std;
int main(int argc, char* argv[1)
string* meg = new 8tring(*Hello World*):
cout :
0 :
8d 4c 24 04
lea
0x4($esp),ecx
4 :
rf 71 tc
83 e4 f0
and
soxfrrrrrfo,eesp
7 :
a1
55
push1
-0x4 ($ecx)
b4
59 68
push
$esp, tebp
$ebp
d:
51
mov
e :
83 ec 14
push
qns
$0x14,esp
secx
程序员的自我修养一链接、装载与库
---
## Page 459
436
第13章运行库实现
11 :
c7 04 24 01 00 0000
mov1
$0x1, ($e8p)
18:
e8 fc ff ff ff
19: R_386_PC32_Znwj
call
19 
1d:
201
b8 00 00 00 00
89 45 f8
mov
$eax, -0x8 ($ebp)
25 :
83 c4 14
nov
add
$0x0, teax
28 :
59
S0x14, $e8p
29 :
5d
pop
$ecx
8d 61 fc
1ea
pop
ebp
2a1
-0x4 ($ecx), tesp
2d:
c3
ret
可以看到，new操作的实现实际上是调用了一个叫做_Znwj的函数，如果用c++filt将这
个符号反修饰（Demangle），可以看到它的真面i目：
$c++filt _znw
operator new(unsigned int)
可以看到_Znwj实际上是一个叫做operator new的函数，这也是我们在C++中熟悉的操
作符函数。在C++中，操作符实际上是一种特殊的函数，叫做操作符函数，一般new操作
符函数被定义为：
void* operator new(unsigned int size):
除了new、delete这样的操作符以外，+、、*、%等都可以被认为是操作符，这些操作
符都有相对应的操作符函数。对于operator new函数来说，它的参数size是指须要申请的空
间大小，一般是指new对象的大小，面返回值是申请的堆地址。delete操作符函数的参数是
对象的地址，它没有返回值。
既然new/delete的实现是相应的操作符函数，那么，如果要实现new/delete，就只须要
实现这两个函数就可以了，而这两个函数的主要功能是中请和释放堆空间，这再容易不过了，
因为在 Mini CRT 中已经实现了堆空间的申请和释放函数：malloc 和free，于是new/delete
的实现变得尤为简单，它们的实现源代码如清单13-8所示。
清单13-8new_delete.cpp
//nev_delete.cpp
extern *C* void* malloc(unaigned int) :
void* operator new(unsigned int size)
return malloc(size)
void operator delete(void* p)
free (p) :
}
void* operator new[1 (unsigned int size)
f
程序员的自我修养一链接、装载与库
---
## Page 460
13.3C++运行库实现
437
return mal1oc (size) :
void operator delete[ ] (void* p)
free (p):
在上面代码中除了new/delete之外，我们还看到了new[和delete[]，它们分别是用来申
请和释放对象数组的，在这里一并予以实现。另外除了申请和释放堆空间之外，没有看到任
何对象构造和析构的调用，其实对象的构造和析构是在new/delete之前/之后由编译器负责
产生相应的代码进行调用的，newidelete仅仅负责堆空间的申请和释放，不负责构造和析构。
在真实的C++运行库中，newldelete 的实现要比上面的复杂一些，它们除了使用
malloc/free申请释放空间之外，还支持new_handler在申请失败时给子程序进行补救的机会、
还可能会抛出bad_alloc异常等，由于MiniCRT并不支持异常，所以就省略了这些内容。
另外值得一提的是，在使用真实的C++运行库时，也可以使用上面这段代码自已实现
new/delete，这样就会将原先C++运行库的new/delete覆盖，使得有机会在new/delete时记录
对象的空间分配和释放，可以实现一些特殊的功能，比如检查程序是否有内存泄露。这种做
法往往被称为全局new/delete 操作符重载（Global new/delete operator overloading）。除
了重载全局new/delete操作符之外，也可以重载某个类的new/delete，这样可以实现一些特
殊的需求，比如指定对象申请地址（Replacementnew），或者使用自己实现的堆算法对某
个对象的申请/释放进行优化，从而提高程序的性能等，这方面的讨论在C++领域已经非常
深入了，在此我们不一一展开了。