title:Mininode: Reducing the Attack Surface of Node.js Applications
author:Igibek Koishybayev and
Alexandros Kapravelos
Mininode: Reducing the Attack Surface of Node.js Applications
Igibek Koishybayev
North Carolina State University
PI:EMAIL
Alexandros Kapravelos
North Carolina State University
PI:EMAIL
Abstract
JavaScript has gained traction as a programming language
that qualiﬁes for both the client-side and the server-side logic
of applications. A new ecosystem of server-side code written
in JavaScript has been enabled by Node.js, the use of the V8
JavaScript engine and a collection of modules that provide
various core functionality. Node.js comes with its package
manager, called NPM, to handle the dependencies of modern
applications, which allow developers to build Node.js appli-
cations with hundreds of dependencies on other modules.
In this paper, we present Mininode, a static analysis tool for
Node.js applications that measures and removes unused code
and dependencies. Our tool can be integrated into the build-
ing pipeline of Node.js applications to produce applications
with signiﬁcantly reduced attack surface. We analyzed 672k
Node.js applications and reported the current state of code
bloating in the server-side JavaScript ecosystem. We leverage
a vulnerability database to identify 1,660 vulnerable packages
that are loaded from 119,433 applications as dependencies.
Mininode is capable of removing 2,861 of these vulnerable
dependencies. The complex expressiveness and the dynamic
nature of the JavaScript language does not always allow us
to statically resolve the dependencies and usage of modules.
To evaluate the correctness of our reduction, we run Minin-
ode against 37k Node.js applications that have unit tests and
reduce correctly 95.4% of packages. Mininode was able to
restrict access to the built-in fs and net modules in 79.4%
and 96.2% of the reduced applications respectively.
1 Introduction
Node.js [10] is an open-source JavaScript runtime engine
typically used to build scalable network applications. The
JavaScript runtime that powers Node.js is based on Chrome’s
V8 engine. Despite Node.js’ young age, it has become
very popular among the open-source community and enter-
prises. Moreover, big companies such as Microsoft, IBM,
PayPal [22, 27, 39] are among others who use Node.js in their
products. One of the reasons for its popularity is in Node.js
architecture choice. Node.js uses a non-blocking event-based
architecture which gives an ability to developers to scale up
Node.js applications easily. Nowadays Node.js is used to
develop critical systems [49] that require security attention.
Node.js developers distribute community-developed li-
braries using an in-house built package manager system called
NPM. NPM is considered to be the largest package manager by
the number of packages [12] it hosts (over million) and growth
rate of almost 800 pkg/day [9]. Since 2014, the NPM registry
trafﬁc has grown 23,500%, which shows its increasing pop-
ularity among developers [47]. This staggering amount of
packages hosted in NPM gives developers the power to build
apps very quickly by using already implemented functionality
by others. In this paper, we argue that overusing third-party
libraries comes with its own security risks.
The drawbacks of extensive dependence on third-party
packages are: (1) developers need to trust others on the se-
curity and maintenance of the libraries; (2) the popularity of
NPM makes it lucrative for adversarial users to distribute mali-
cious libraries using attacks such as typosquatting [20,43,44],
ownership takedown and introducing a backdoor [45, 52]; (3)
upgrade or removal of the package from NPM may break the
build pipeline of an application [46].
Our study of 1,055,131 packages shows that on average
only 6.8% of the code in the application is original code
according to source logical lines of code (LLOC) or putting
in different words 93.2% of the code in Node.js application is
developed by third-parties. One of the reasons why developers
tend to use "trivial" third-party packages, is the belief that
they are well managed and tested. Despite the belief, the
study shows that only 45.2% of "trivial" packages have tests
implemented [19].
Previous works on Node.js security mostly concentrate on
architecture choice of Node.js and, therefore, on attacks that
target the main thread of Node.js applications [23–25, 38, 42].
Others have conducted research on the reasons why develop-
ers use "trivial" dependencies [19] and security implications
of depending on NPM packages [52]; however, no research
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    121
on an attack surface that extensive usage of third-party li-
braries may bring and ways of reducing the attack surface of
a Node.js application was conducted before.
Due to all of the above, it is important to know the attack
surface of third-party packages and to reduce them ahead of
time during a development process.
Our main contributions are the following:
• We developed a system that reduces the attack surface of
Node.js applications by removing unused code parts and
modules from the dependency graph. The system can use
one of two different reduction modes: (1) coarse-grain;
(2) ﬁne-grain; Our system is publicly available here:
https://kapravelos.com/projects/mininode
• We analyzed 672,242 Node.js applications from the NPM
repository and measured their attack surface. Our ﬁnd-
ings show that at least 119,433 (11.3%) of applications
depend on vulnerable third-party packages. Also, on av-
erage only 9.5% of all LLOC is used inside analyzed
packages.
• We created a custom build of Node.js that can restrict
the access to the built-in modules using a whitelist gen-
erated by Mininode. Our evaluation experiment shows
that Mininode successfully restricted the access to fs
and net modules for 79.4% and 96.2% of packages, re-
spectively.
2 Background
In this section, we describe the technical details of Node.js
modules, how NPM works, and how Node.js resolves im-
ported modules, both built-in and third-party dependencies.
We use the term module to describe anything under the
node_modules folder that can be loaded using the require
function. A package is everything that is hosted on NPM, but
not necessarily can be loaded by using require function, e.g.
CSS ﬁles. In this paper, we refer to a package as a directory
of ﬁles with a JavaScript entry point that can be loaded with
the require function. We treat applications the same as pack-
ages, i.e. they both have a JavaScript entry point, from which
Mininode can start its analysis.
2.1 Node.js module system
JavaScript has been traditionally the language of the browser.
Web applications build their front-end logic in JavaScript
by leveraging browser APIs. Node.js applications rely on a
completely different ecosystem that is built to assess the needs
of server-side applications. Instead of the DOM and other Web
Platform APIs, Node.js relies on built-in modules that provide
functionalities like networking and ﬁlesystem access. These
modules are based on the CommonJS module system and only
recently we have seen experimental support for ECMAScript
modules [11].
Node.js treats every JavaScript ﬁle as a CommonJS module.
Node.js has built-in require() function to import both built-
in and developer-created modules into code. The require
function behaves differently depending on the type of the
module requested. If the requested module is on the list of
built-in modules, then it is returned directly from the modules
written in C++. If the requested module is not part of the built-
in modules, require will wrap the imported module with a
function wrapper, as shown in Listing 1, before executing the
code. This ensures that variables from the imported modules
are not placed unintentionally in the global scope. Despite
this, modules can declare variables and functions in the global
scope, which poses a challenge in accurately determining the
used APIs of the module (§5.2).
1 (function(exports, require , module,
__filename , __dirname ) {
2 // Module code lives in here
3 }) ;
Listing 1: Function wrapper to execute module code
Every module that wants to provide some of its functional-
ity to other modules can use the exports object. For example,
in Listing 2 b.js exports two functions. However, a.js uses only
function foo() after importing b.js. Thus, function bar() can
be removed without impacting the behavior of the a.js. We
discuss how we leverage this mechanism to restrict access to
built-in modules Section 6.1.
1 // inside b. js
2 exports. foo = function foo () {}
3 function bar () {}
4 exports. bar = bar ;
5 // inside a. js
6 var b = require (" ./ b. js ")
7 b. foo ()
Listing 2: Example of CommonJS module and common
ways to export the functionality
2.2 Node Package Manager (NPM)
Node.js comes with a built-in package manager called NPM,
which hosts aside from JavaScript libraries also front-end
CSS, JavaScript frameworks and command-line tools. In this
paper we focus only on server-side Node.js packages that are
distributed over NPM. Developers can install a package using
the command "npm install @", where
"" is the name of the package. By default, if version
is missing, NPM will install the latest version of the package.
If the package name is not given, NPM will look for the pack-
age.json ﬁle inside the current working directory and will
install all packages listed as dependencies in the ﬁle. The
package.json ﬁle also contains metadata about the Node.js
application. These metadata can contain the main ﬁle of the
application (i.e. entry point), the version number, a short de-
122    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
scription, a list of dependencies, and other information about
the Node.js application. NPM installs dependencies transitively.
For example: if package A depends on package B, and pack-
age B depends on package C, NPM will install packages A, B,
C. The NPM’s transitive installation of dependencies creates a
serious problem of bloated code, as it makes it really hard for
the developer to understand on how many packages the code
depends. De Groef et al. states that some popular packages
may in total depend on more than 200 packages [26].
3 Threat Model
Our threat model targets vulnerable Node.js applications that
are susceptible to arbitrary code execution vulnerabilities. The
main premise of this paper is that we can 1) reduce the capabil-
ities of the attack by restricting the application’s functionality
and 2) eliminate further exploitation of the application that
would elevate the attacker’s capabilities by targeting vulnera-
bilities in unused dependencies.
We reduce the attack surface of applications by restrict-
ing the available built-in modules that can be loaded to the
absolute necessary. This results in removing classes of capa-
bilities from the application if they are not already used, like
ﬁlesystem access or networking.
We mitigate chained exploitation by removing unused vul-
nerable modules and restricting built-in modules. Our assump-
tion here is that the application is exploitable, but with certain
restrictions, i.e., code can be injected, but without arbitrary
execution due to unsafe regular expression checks. In that
particular scenario, the attacker can take advantage of other
existing vulnerable packages that are now reachable and gain
full control of the application. The attacker can take advan-
tage of the existing modules in two scenarios: 1) directly
manipulating the input to the require function to load any
modules, 2) indirectly manipulate the input to the require
function to load any modules, except built-ins. Our system is
capable of stopping further exploitation of the unused parts of
the application, but it does not prevent the initial vulnerability
that leads to partial code execution.
When the attacker can directly manipulate the require
function and load additional built-in modules, Mininode re-
stricts the access to unused built-in modules, even if they
are used in one of the unused transitive dependencies. This
signiﬁcantly reduces the capabilities of the attack.
Listing 3 shows a theoretical motivating example of
chained exploitation when the attacker can indirectly con-
trol the input to the require function. In the example, the
attacker can inject malicious data to the fs.linkSync func-
tion (line 6), which is used to create a symbolic link, by ma-
nipulating the request data. For example, the attacker can
replace the entry point of header-parser with a symbolic link
to unused.js by manipulating dst and src ﬁelds. Therefore,
next time when the attacker navigates to "/exploit" end-
point, Node.js will load the unused.js module instead of the
header-parser package, and the application passes data pro-
vided by the attacker to the unused.js (lines 11-12). Note that
an attacker cannot manipulate symbolic links to load built-in
modules because they are part of the Node.js binary. For this
kind of chained exploitation, Mininode can remove unused
packages from the application and restrict the attacker’s abil-
ity to load modules that are not used by the application; thus,
making the attack less effective. Some vulnerable packages
though, like fast-http [4] , marscode [2] and marked-tree [3]
are directly exploitable by just loading their module, but not
all vulnerabilities can be exploited via chained exploitation,
as they can depend on additional constraints that might not
be available to the attacker.
1 const fs = require ( ’fs ’)
2 const express = require ( ’ express ’)
3 const app = express ()
4
5 // some code parts omitted for brevity
6 app . get ( ’/ vulnerable ’, (req , res ) => {
7
8
9 }) ;
10
11 app . get ( ’/ exploit ’, (req , res ) => {
12
13
14
15 }) ;
let parser = require ( ’header - parser ’);
let result = parser ( req . headers );
res . send ( result );
fs . linkSync ( req . body . dest , req . body . src );
res . send ( ’ Hello World ! ’)
Listing 3: Motivating vulnerable example of chained
exploitation for loading unused packages
One of the great advantages of Mininode is that it restricts
the attacker from using any unused module, including built-in
modules, e.g. fs, even if it is used in a transitive dependency.
When these modules are not used from the application, Minin-
ode can have a signiﬁcant impact on the attack.
4 Design Goals and Architecture Overview
4.1 Design Goals
There were two main design goals that we followed during
the implementation of the Mininode.
Effectiveness. Mininode should reduce the attack surface
of the Node.js application as much as possible. To achieve the
effectiveness goal, we implemented two modes of reduction:
(1) coarse-grain; (2) ﬁne-grain; and added a built-in mod-
ule restriction mechanism into Node.js. We provide Minin-
ode’s reduction effectiveness results later in the paper (§7.1
and 7.2).
Correctness. Mininode must remove only unused code
parts, i.e. should not break the original behavior of the ap-
plication. To validate that Mininode meets the correctness
goal, we automatically veriﬁed the original behavior of 37,242
packages after reduction (§7.1).
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    123
Figure 1: Mininode consists of main 5 parts: 1 Parser; 2 Value-binding; 3 Load Dependency Builder; 4 Call Graph Builder;
5 Reducer and supports coarse-grain and ﬁne-grain reductions
4.2 Architecture Overview
Mininode consists of ﬁve different stages as shown in Figure 1,
that will run during the reduction of the application.
Mininode takes a directory path of a Node.js application,
which contains package.json ﬁle, as an input. Then, Mininode
traverses the directory, parses all JavaScript ﬁles and generates
abstract syntax trees (ASTs) for each JavaScript ﬁle ( 1 ).
We use AST representation of the source code because it
is easier to analyze statically and convenient to transform
the tree structure to modify the initial source code. To parse
JavaScript code, we use the popular open-source esprima [8]
library. The ﬁnal outcome of the Parser is an array of all
modules inside the application folder and each module’s AST
representation. After Parser completes processing the code, it
will pass the generated ASTs to the next stages of Mininode.
The Value-binding ( 2 ) is a pre-reduction stage that col-
lects metadata about each module in the application from
their AST representation, which is used in reduction stages.
Also, Value-binding collects overall statistics on each mod-
ule regarding the number of logical lines of code, dynamic
imports, dynamic export.
The main reduction process consists of three different
stages: (1) Load Dependency Builder, (2) Call Graph Builder
and (3) Reducer.
The Load Dependency Builder ( 3 ) builds a ﬁle-level de-
pendency graph of the application by traversing the AST
generated by Parser. To build the dependency graph, Load
Dependency Builder starts from the entry point(s) and detects
all require function calls from AST. All modules that are
recursively accessible from the application’s entry point(s)
are marked as used by Load Dependency Builder. Despite the
simplicity of the algorithm, there are challenges that need to
be addressed to construct a complete dependency graph (§5)
and are further discussed in Section 6.
Mininode supports two reduction modes for the applica-
tion: (1) coarse-grain reduction; (2) ﬁne-grain reduction. The
coarse-grain reduction mode works at ﬁle-level and removes
unused ﬁles in the application, while the ﬁne-grain reduction
works at function-level and removes functionalities from in-
dividual modules that are never used. As shown in Figure 1,
Mininode skips the Call Graph Builder stage, and proceed
directly to the Reducer stage in coarse-grain reduction mode.
The Call Graph Builder ( 4 ) is responsible for detecting
used and unused functions, exports and variables of all mod-
ules that are part of the dependency graph generated by Load
Dependency Builder (§6.4). To achieve effectiveness design
goal, Call Graph Builder may perform several passes on the
AST of each module until no change to the ﬁnal usage graph
is made.