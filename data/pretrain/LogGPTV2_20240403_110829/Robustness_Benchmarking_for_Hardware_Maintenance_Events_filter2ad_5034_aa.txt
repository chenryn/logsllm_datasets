title:Robustness Benchmarking for Hardware Maintenance Events
author:Ji Zhu and
James Mauro and
Ira Pramanick
Robustness Benchmarking for Hardware Maintenance Events
Ji Zhu, James Mauro, Ira Pramanick
Sun Microsystems, Inc.
{ji.zhu, james.mauro, ira.pramanick}@sun.com
Abstract
This paper proposes a method to measure a specific
aspect of a system's robustness -
the handling of
maintenance events. Past
research in the area of
robustness benchmarking has focused exclusively on
injecting a realistic faultload into a system and examining
the system's robustness against the set of injected faults.
However, faults are not the only events that can cause a
system outage. Maintenance
the
replacement of a failed hardware component or the
installation of a software patch, may also result in a
system outage. In this paper, we describe a benchmark for
measuring a system's robustness against a class of
hardware maintenance events.
such as
events,
1. Introduction
Availability benchmarking has been the focus of
extensive research in industry and academia in recent
years. As society becomes increasingly dependent on
computers, system availability is becoming an important
metric in evaluating computer systems. Benchmarks,
traditionally focused on measuring system performance,
offer a means by which various vendor platforms can be
evaluated. By providing a standardized metric,
IT
organizations can effectively compare different platforms,
decisions.
and make more
Benchmarks have the added advantage of
inducing
competition by generating technology improvements as
vendors strive to achieve the best benchmark metric.
Benchmarks also allow system designers and researchers
to compare design options and measure progress, and
have thus historically played an important role in guiding
the research and development of computer systems.
purchasing
informed
Past
research on dependability and availability
benchmarking has primarily focused on measuring
system robustness under fault conditions. In this paper,
we introduce a benchmark to measure system robustness
in the presence of hardware maintenance events. The
simple and portable benchmark discussed in this paper
can be used to evaluate the concurrent repair capability of
system hardware of different platforms. To the best of our
this is the first dependability benchmark
knowledge,
focused on characterizing system behavior
in the
presence of maintenance events. This benchmark is
currently being used by Sun Microsystems during product
architecting and development for its computer servers.
The rest of this paper is organized as follows. Section
2 covers relevant background information on past work in
this area, as well as our motivation for doing this
research. Section 3 is a detailed discussion of
the
benchmark itself. Section 4 is an implementation of the
benchmark on two Unix servers, and Section 5 discusses
issues
such a
benchmark. Section 6 contains a summary and ideas for
future work.
to an implementation of
relevant
2. Background and Motivation
Past
dependability
benchmarking
research
[2,3,4,7,8,11] has focused exclusively on measuring a
system's behavior under fault conditions. The general
approach is a workload-faultload model [5, 6]. The
basic approach used in the workload-faultload model can
be summarized as follows. A set of selected faults
(faultload) is injected into a system running a workload
representing real world applications. Depending on the
level and extent of the system's fault and error handling
capabilities, the faults are then grouped into a small set of
fault classes and a benchmark score is established to
summarize the overall system robustness in the presence
of these fault events [9].
However, faults are not the only events that can cause
a system outage. While a fault tolerant system with
100% fault coverage may stay up when a single
component fails, it can still suffer an outage during the
process of replacing the faulty component in the system.
For example, a system with N+1 redundant power supply
modules will continue to function when a single power
supply module fails. But at some later point in time, the
failed power supply module needs to be replaced with a
good one since otherwise a second power supply module
failure will result in a system outage. The maintenance
event to replace the failed power supply module may
result in a system outage unless the system is designed
with the capability of hot plugging power
supply
modules. Other maintenance events, such as upgrading
hardware or software, changing a configuration, and
installing a software patch can also result in a system
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:11 UTC from IEEE Xplore.  Restrictions apply. 
Sun Microsystems'
outage. A study of approximately 6000 outages among
14
that
maintenance events accounted for 79% of total outage
events and 84% of total outage duration.
customers
showed
Naturally, customers are just as concerned about
planned outages (outages caused by maintenance events)
as they are about unplanned outages (outages caused by
hardware and software faults). Nowadays the distinction
between planned and unplanned outages
is getting
blurred, as most global corporations operate at least some
areas of their business on a 24x7 basis. There is no
longer a window for planned outage events. For e-
commerce companies,
the entire business is run year
round. For such operations, any outage is unacceptable,
planned or unplanned.
and
live
upgrades,
To their credit, computer manufacturers have long
recognized the importance of reducing downtime caused
by planned maintenance actions, and have invested in
on-line maintenance technologies, such as hot-swappable
components,
Dynamic
Reconfiguration (DR) capabilities. Today even low-end
and mid-range computer servers support some level of
on-line maintenance. These on-line maintenance features
are also heavily advertised by computer manufacturers.
Phrases like “hot-swappable disk drives” and “hot-
swappable power supplies” can be found in almost all
product brochures of computer servers
these days.
However, no methods have been devised until now to
quantitatively
on-line
maintenance features of different servers. For instance, if
System A allows hot-swappable disk drives and power
supplies, while System B allows hot-swappable IO
controllers, there is no quantitative way to determine
which of these two systems provides better protection
against outages during maintenance events.
compare
evaluate
and
the
Our previous work [12] in establishing a framework
(called R-Cubed or R3) to benchmark system availability,
addressed this gap in the availability benchmarking space.
The R3 framework is the first availability benchmarking
framework that covers system maintenance events. While
the main purpose of R3 was to establish a framework in
benchmarking availability, the goal of this paper is to
implement
a benchmark based on the principles
established in R3; specifically,
to measure a system's
robustness in the presence of hardware repairs. For the
sake of completeness, many of the concepts defined in the
R3 framework  will be re-introduced in this paper.
3. Benchmarking Methodology & Metric
Before describing the benchmark methodology and
metric, some key R3 concepts need to be defined. A
maintenance event, such as a repair action, a system
upgrade, or a configuration change, is intended to restore
or retain a functional unit in a specified state, so that the
unit can perform its required functions. Maintenance
events can be categorized into one of the following two
types:
 Fault Induced: a maintenance event that is the direct
result of a fault, such as the replacement of a faulty
hardware or  the installation of a software patch.
 Non-fault Induced: a maintenance event that is not
to system
the result of a fault, but
operation, such as a configuration change or an
upgrade.
is essential
As defined in [12], robustness is a system's ability to
detect and handle fault, maintenance and system-external
events, and the resulting degree to which it remains
available in the face of these events. Robustness measures
the degree of protection that exists within a system
against potential outage events.
Our definition of
robustness extends the traditional robustness definition
[9], which only addresses fault events. The benchmark
introduced in this paper measures a system's robustness
against fault induced hardware maintenance events (also
known as hardware repairs), which are one of the most
frequently
a
production system. 
performed maintenance
actions
on
Within the context of this paper, a system under test
includes system hardware and operating system. System
hardware on-line maintenance features are entirely a
function of hardware design and operating system, and
are independent of the workload on the system. Thus,
workload is not part of the proposed benchmark test.
Other than this main difference, the benchmark method
introduced in this paper is, in many ways, similar to the
workload-faultload approach described earlier.
Our
benchmark approach can be summarized in terms of the
following main components:
 Maintenance Event Classification: A small set of
maintenance
Each
maintenance event class represents a different level of
on-line maintenance capability of the system under
test  during a repair action.
is defined.
classes
event
 Benchmark Test: A benchmark test is performed to
determine the maintenance class of each system
hardware module in the system under test.
 Maintenance Event Quantification: A method is
devised to calculate the percentage of hardware repair
actions of the system under test in each of the defined
maintenance event classes. 
 Benchmark Metric: Finally a benchmark metric is
defined to summarize the overall robustness score of
the system under test with respect to system hardware
repair actions.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:11 UTC from IEEE Xplore.  Restrictions apply. 
Each of these components is described in detail in the
following subsections respectively.
3.1 Maintenance Event Classification
With the goal of developing a benchmark that is not
tied to a particular vendor's system or a particular system
layer, our criterion for maintenance event classification
is that it must be general enough to be applicable to a
wide range of systems and to different layers of a system.
The classification must be independent of the specifics of
the system under test. The most obvious classification of
maintenance events is a two class scheme based on a
system's availability in the presence of these events, these
two classes corresponding to a system being available
versus a system being unavailable. However
this
approach is too simplistic since computer manufacturers
have been implementing on-line maintenance features in
phases, with the system being partially available in some
of the phases. For example, a CPU hot swap capability
may be implemented in two phases. Phase I would allow
hot insertion of a CPU module into a live system, but a
subsequent reboot would be required for the operating
system to utilize the new processor. This phase of
implementation would be mostly done in the hardware.
Phase II would require modification of the operating
system so that the newly inserted CPU module could be
detected by the operating system, and could get integrated
into the system without rebooting the system. A CPU
replacement operation on a system with Phase I
implementation would cause outage during part of the
operation, while the same operation would cause no
outage on a system with Phase II implementation.
Most systems today support some degree of partial on-
line maintenance where the system is unavailable only
during a certain part of a maintenance operation. It is to
be noted that partial on-line maintenance is probably even
more prevalent in system software maintenance. Quite
often a software maintenance action, such as a patch
installation, can be performed on a live system but a
subsequent reboot is required in order for the patch to
take effect.
R3
The following 3-level classification scheme, proposed
in the
framework, provides a more accurate
representation of different levels of on-line maintenance
features existing in systems today. The three classes of
maintenance events are:
 Class
1
that
(Fully-Disruptive) Maintenance. A
maintenance event
requires a system to be
unavailable for the entire duration of the maintenance
activity. The replacement of
the main system
interconnect may be an example of a class 1
maintenance activity.
 Class
2
that
(Semi-Disruptive) Maintenance. A
requires a system to be
maintenance event
unavailable during
the
maintenance activity. The phase I implementation of
the CPU module hot plug capability described
previously is an example of a class 2 maintenance
activity.
part, but
not
all,
of
 Class
3
(Non-Disruptive) Maintenance. A