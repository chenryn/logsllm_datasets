        uint16 high;  
     } value_shorts;
   };  
   union {   // virtual address pointed or used by the operand  
    ea_t addr;  // for types (o_mem,o_displ,o_far,o_near)  
    struct {    // Convenience access to halves of addr  
        uint16 low;  
        uint16 high;  
    } addr_shorts;  
  };  
  //Processor dependent fields, use them as you like.  Set in ana
  union {  
    ea_t specval;  
    struct {  
        uint16 low;  
        uint16 high;  
    } specval_shorts;  
  };  
  char specflag1, specflag2, specflag3, specflag4;  
};
要配置一个操作数，首先需要将操作数的type
 字段设置为在ua.hpp 中定义的一个枚举optype_t
 常量。操作数的type
 描述了操作数数据的来源和目标。换句话说，type
 字段大致描述操作数所采用的寻址模式。操作数类型包括 o_reg、o_mem
 和o_imm
 ，它们分别表示操作数是一个寄存器的内容、一个在编译时获知的内存地址和指令中的即时数据。
dtype
 字段指定操作数数据的大小。这个字段应设置为 ua.hpp 文件指定的一个 dt_xxx
 值。示例值包括用于 8 位数据的 dt_type
 、用于16 位数据的 dt_word
 和用于32 位数据的 dt_dword
 。
下面的x86 指令说明了一些主要的操作数数据类型与常用的操作数之间的对应关系：
mov  eax, 0x31337          ; o_reg(dt_dword), o_imm(dt_dword)  
push word ptr [ebp - 12]   ; o_displ(dt_word)  
mov [0x08049130], bl       ; o_mem(dt_byte), o_reg(dt_byte)  
movzx eax, ax              ; o_reg(dt_dword), o_reg(dt_word)  
ret                        ; o_void(dt_void)
op_t
 中各种联合的使用方式由type
 字段的值确定。例如，如果一个操作数的类型为 o_imm
 ，则即时数据值应存储在 value
 字段中；如果操作数的类型为 o_reg
 ，则寄存器编号（根据一组枚举的寄存器常量）应存储在reg
 字段中。有关指令的每一条信息的详细存储位置，请参阅 ua.hpp文件。
请注意，op_t
 中没有字段描述操作数是否被用作数据来源或目标。实际上，这不是分析器的任务。指令名称数组中指定的典型标志将在后阶段用于决定具体如何使用操作数。
insn_t
 类和op_t
 类中有几个字段被描述为“是取决于处理器的”，这表示你可以将这些字段用于任何目的。通常，这些字段用于存储这些类中的其他字段不适于存储的信息。“取决于处理器”的字段也是一种向处理器的后阶段传递信息的便捷机制，使这些阶段不需要重复分析器的工作。
讨论完与分析器有关的所有基本规则后，我们可以开始着手为 Python 字节码创建一个最小的分析器。Python 字节码非常简单。Python 操作码长为 1 个字节。小于 90 的操作码没有操作数，而大于或等于 90 的操作码拥有一个 2 字节的操作数。我们创建的基本分析器如下所示：
#define HAVE_ARGUMENT 90  
int idaapi py_ana(void) {  
   cmd.itype = ua_next_byte();    //opcodes ARE itypes for us (updates cmd.size)  
   if (cmd.itype >= PYTHON_LAST) return 0;             //invalid instruction  
   if (Instructions[cmd.itype].name == NULL) return 0; //invalid instruction  
   if (cmd.itype &lt HAVE_ARGUMENT) { //no operands  
      cmd.Op1.type = o_void;      //Op1 is a macro for Operand[0] (see ua.hpp)  
      cmd.Op1.dtyp = dt_void;  
   }  
   else {   //instruction must have two bytes worth of operand data  
      if (flags[cmd.itype] & (HAS_JREL | HAS_JABS)) {  
         cmd.Op1.type = o_near;  //operand refers to a code location  
      }  
      else {  
         cmd.Op1.type = o_mem;   //operand refers to memory (sort of)  
      }  
      cmd.Op1.offb = 1;          //operand offset is 1 byte into instruction  
      cmd.Op1.dtyp = dt_dword;   //No sizes in python so we just pick something  
      cmd.Op1.value = ua_next_word(); //fetch the operand word (updates cmd.size)  
      cmd.auxpref = flags[cmd.itype]; //save flags for later stages  
      if (flags[cmd.itype] & HAS_JREL) {  
         //compute relative jump target  
         cmd.Op1.addr = cmd.ea + cmd.size + cmd.Op1.value;  
      }  
      else if (flags[cmd.itype] & HAS_JABS) {  
         cmd.Op1.addr = cmd.Op1.value;  //save absolute address  
      }  
      else if (flags[cmd.itype] & HAS_CALL) {  
         //target of call is on the stack in Python, the operand indicates  
         //how many arguments are on the stack, save these for later stages  
         cmd.Op1.specflag1 = cmd.Op1.value & 0xFF;         //positional parms  
         cmd.Op1.specflag2 = (cmd.Op1.value >> 8) & 0xFF;  //keyword parms  
      }  
   }  
   return cmd.size;  
}
对Python 处理器模块来说，我们为每条指令创建了另外一个标志数组，用于补充（有时候是复制）每条指令的“典型特征”。我们定义了HAS_JREL、HAS_JABS
 和HAS_CALL
 标志，供flags
 数组使用。我们使用这些标志指出一个指令操作数表示一个相对跳转偏移量还是一个绝对跳转目标，或者是函数调用栈说明。如果不深入分析 Python 解释器的操作，我们很难解释分析阶段的每一个细节，因此，利用前面代码中的注释，基于分析器的工作是解析单条指令，我们将分析器的功能总结为如下内容。
分析器从指令流中获得下一个指令字节，并决定该字节是否是一个有效的Python 操作码。
如果该指令没有操作数，则将 cmd.Operand[0]
 （cmd.Op1 ）初始化为 o_void
 。
如果该指令有一个操作数，则初始化cmd.Operand[0]
 以反映该操作数的类型。几个特定于处理器的字段用于将信息转发到处理器模块的后续阶段。
向调用方返回指令的长度。
可以肯定，指令集越复杂，分析器阶段就越复杂。但是，总体而言，任何分析器的行为通常都会包括以下内容。
从指令流中读取足够的字节，以确定指令是否有效，并将指令与一个指令类型枚举常量对应起来，然后将这个常量保存在 cmd.itype
 中。这项操作通常由一个大的分支语句执行，以对指令操作码进行分类。
读取所需的其他字节，以正确确定指令所需的操作数的数量、这些操作数使用的寻址模式以及构成每个操作数（寄存器和即时数据）的组件。这些数据用于填充 cmd.Operands
 数组的元素。这项操作由一个单独的操作数解码函数执行。
返回指令及其操作数的总长度。
严格来讲，解析一条指令后，IDA 将拥有足够的信息，能够生成该指令的汇编语言代码。为了生成交叉引用，促进递归下降过程，并监控程序栈指针的行为，IDA 必须获得关于每条指令的其他信息。这是 IDA 处理器模块模拟器阶段的任务。
19.3.4 模拟器
分析器阶段分析单条指令的结构，而模拟器阶段则分析单条指令的行为。在 IDA 处理器模块中，模拟器通常由 emu.cpp 文件中的 emu
 （你可以使用任何你喜欢的名称）函数实现。和 ana
 函数一样，这个函数的原型非常简单，如下所示：
int idaapi emu(void); //emulate one instruction
根据idp.hpp文件，emu
 函数应返回被模拟的指令的长度，但是，绝大多数的样本模拟器似乎返回的都是 1。
你必须使用一个指向你的模拟器函数的指针初始化 LPH
 对象的u_emu
 成员。到调用 emu
 时，cmd
 已经被分析器初始化。模拟器的主要作用是基于 cmd
 描述的指令的行为创建代码和数据交叉引用。模拟器还用于跟踪栈指针的变化，并根据观察到的对函数栈帧的访问创建局部变量。与分析器不同，模拟器可以更改数据库。
通常，确定一条指令是否会创建交叉引用，需要检查该指令的“典型特征”，以及指令操作数的type
 字段。下面是一个每条指令最多包含两个操作数的指令集的基本模拟器函数（典型的SDK示例）：
void TouchArg(op_t &op, int isRead);  //Processor author writes this  
int idaapi emu() {  
   ulong feature = cmd.get_canon_feature(); //get the instruction's CF_xxx flags  
   if (feature & CF_USE1) TouchArg(cmd.Op1, 1);  
   if (feature & CF_USE2) TouchArg(cmd.Op2, 1);  
   if (feature & CF_CHG1) TouchArg(cmd.Op1, 0);  
   if (feature & CF_CHG2) TouchArg(cmd.Op2, 0);  
   if ((feature & CF_STOP) == 0) { //instruction doesn't stop  
      //add code cross ref to next sequential instruction  
      ua_add_cref(0, cmd.ea + cmd.size, fl_F);  
   }  
   return 1;  
}
对于每个指令操作数，前面的函数检查指令的“典型特征”，以确定是否应生成任何交叉引用。在这个例子中，一个名为 TouchArg
 的函数检查每一个操作数，以确定应生成什么类型的交叉引用，并处理正确生成交叉引用的细节。由模拟器生成交叉引用时，你应使用在ua.hpp （而不是在xref.hpp）中声明的交叉引用创建函数。下面的简单指南用于确定生成什么类型的交叉引用。
如果操作数类型为 o_imm
 ，则操作为读取（isRead
 为真），且操作数的数值为一个指针，并创建一个偏移量引用。确定一个操作数是否为指针，需要调用 isOff