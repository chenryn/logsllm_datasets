    页面上被添加了"请使用信用卡支付预购定金"和输入信用卡卡号及有效期限的文本框。此外，尽管页面上看不出来，但
    form 元素的 action 属性也已经被变成了恶意网站的 URL。
    然而，浏览器地址栏上显示的 URL
    却同先前的手机预购网站完全一致。此外，虽然本例没有涉及，但事实上当网站为
    https
    时其证书也会被显示为正规。因此，用户便找不到任何蛛丝马迹来识破这一伪装的页面。
    由此可见，XSS 并非一定会使用 JavaScript，因此，如果防范策略仅局限于
    script
    元素（例如将"script"单词全部删除），攻击者还是会有可乘之机。而对用户来说，仅在浏览器中禁止
    JavaScript 也是不能得以高枕无忧的。
-   **反射型 XSS 与存储型 XSS**
    接下来我们将换个视角，根据攻击用 JavaScript 代码的存储地点将 XSS
    攻击分类。
    如果攻击用 JavaScript
    代码位于攻击目标网站之外的其他网站（恶意网站或邮件中的
    URL），就称之为反射型 XSS（Reflected XSS）。最先介绍的 43-001.php
    中的 XSS 攻击模式，就属于反射型 XSS。反射型 XSS
    多发生于网页将用户的输入值原封不动地显示出来的情况下。其中，输入值确认页面就是一个典型的例子。
    ![{%}](Image00061.jpg)
    **图 4-18 反射型 XSS**
    与此相对，有时攻击者也会将攻击用 JavaScript
    代码保存至攻击对象的数据库中。这种模式的 XSS 就被称为存储型
    XSS（Stored XSS）或持久性 XSS（Presistent XSS）。
    ![{%}](Image00062.jpg)
    **图 4-19 存储型 XSS**
    存储型 XSS 的典型攻击对象为 Web 邮箱客户端以及社交网站（Social
    Networking Service，简称 SNS）。存储型 XSS
    无需攻击者费尽心思将用户引诱至恶意网站，而且即使是戒心很重的用户也会有很大的几率中招，因此对攻击者来说益处多多。
    存储型 XSS 产生的原因同样也位于生成 HTML 的地方。
    除此之外，当网页中存在不通过服务器而仅依靠前端 JavaScript
    来显示的参数时，就有可能会招致 DOM based XSS 这种类型的 XSS
    发生。详情将在 4.3.2 节介绍。
[9]{.注释编号下} IE8 默认启用 XSS 筛选器的情况下，会阻挡通过 XSS 执行的
JavaScript。若要在 IE8 中显示图 4-12
的效果，可以选择"工具"菜单的"Internet
选项"→选择"安全"标签→点击"自定义级别"→脚本→启用 XSS
筛选器→关闭。实验结束后，再将设置改回。
[10]{.注释编号下} 实际的攻击中，攻击者会通过设置 CSS 将 iframe
部分隐藏，以不被用户看到。
[11]{.注释编号下} 其实 43-091.php 中也存在 XSS
漏洞，但假设攻击者对此并不知情。
[12]{.注释编号下} `$_POST` 变量前面的"@"为错误控制运算符，用于忽略该
POST 变量未定义时发生的错误。
#### **安全隐患的产生原因**
XSS 漏洞产生的原因为，生成 HTML 的过程中，HTML
语法中含有特殊意义的字符（元字符）没有被正确处理，结果导致 HTML 或
JavaScript 被肆意注入，从而使得原先的 HTML
结构产生变化。为了消除元字符的特殊意义，将其转化为普通字符，就需要用到转义（Escape）处理。HTML
的转义处理对于消除 XSS 至关重要。
接下来就让我们来看一下 HTML 中转义的方法，以及不转义时将会遭受的攻击。
-   **HTML 转义的概要**
    这里我们来重点看一下如何正确地进行 HTML 转义。
    例如，在 HTML 中显示 \
                      └──属性值
        元素内容
    **图 4-20 元素内容和属性值的说明**
    下表归纳了不同位置的参数的转义方法。
    **表 4-4 参数所在位置及相应的转义方法**
    +-----------------------+-----------------------+-----------------------+
    | 位置                  | 说明                  | 最低限度的转义内容    |
    +-----------------------+-----------------------+-----------------------+
    | 元素内容              | -   能解释            |                       |
    |                       |     Tag和字符实体     |                       |
    |                       |                       |                       |
    |                       | -                     |                       |
    |                       |    结束边界字符为"\ **代码清单 /43/43-003.php**
    ``` 代码无行号
    >
    ```
    此时，假设 `p` 的值如下。
    ``` 代码无行号
    1+onmouseover%3dalert(document.cookie)
    ```
    URL 中的 `+` 代表空格，`%3d` 代表等号 `=`
    （百分号编码）。因此，之前的 input 元素就变成了如下这般。
    ``` 代码无行号
    ```
    属性值没有用引号括起来时，空格就意味着属性值的结束，因此就可以通过插入空格来添加属性。此处即被添加了
    onmouseover 事件绑定。
    如下图所示，将鼠标移到 input 元素的文本输入框上时，JavaScript
    就会被执行。
    ![{%}](Image00063.jpg)
    **图 4-21 XSS 攻击成功**