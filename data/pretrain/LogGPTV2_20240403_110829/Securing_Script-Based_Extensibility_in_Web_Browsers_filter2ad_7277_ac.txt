tacks employing reference leaks will not be able to
escape our tainting. Any data modiﬁed by untrusted
scripts is still marked tainted, and invoking or com-
piling tainted data will trip the detectors. Therefore,
attackers will not be able to mount a privilege esca-
lation attack, in which untrusted data is executed as
privileged code. At most, if the reference leak al-
lows access to arbitrary global variables in the priv-
ileged namespace, attackers may be able to devise
control dependent attacks and compromise the in-
tegrity of extension logic.
Barth et al. [11] propose a system for detecting
reference leaks between different security origins.
Although their work aims to prevent cross-origin
attacks made possible by reference leaks, it could
also be integrated with our system to detect refer-
ence leaks from privileged namespaces. We should
note that reference leaks are not a requirement for
mounting luring attacks. As previously described in
section 3.1.2, the target of any luring attack can also
be a call to an eval-like function (such as the Script
object) or a reference to a sensitive method of an
XPCOM object legitimately present in the content
namespace.
4.3.4 Unsafe XPCOM Arguments
We are currently conducting a study to determine
the extent of this class of vulnerability. We plan
to create a list of sensitive parameters of security-
sensitive XPCOM interfaces known to the security
manager to mitigate the threat of tainted XPCOM
arguments. We would need to provide untainting
functionality to allow privileged scripts to indicate
that a tainted argument has been sanitized. Other
systems, such as Saner [9], allow validating saniti-
zation routines.
4.4
In this section, we describe the implementation of
our tainting system in the JavaScript interpreter and
Implementation
JavaScript Interpreter
the XPCOM classes and our attack detectors. In our
system, we are most concerned about the taint sta-
tus of strings and function references because priv-
ilege escalation attacks require either luring privi-
leged code or compiling attacker strings. We chose
not to use an existing system-level tainting solution
because control dependent tainting is not required
in our system and low-level tainting systems tend to
produce a large number of false positives.
4.4.1
JavaScript tainting requires associating a notion of
taint with each script variable.
JavaScript vari-
ables can hold the values of primitive data types
such as booleans and integers, or they can hold
references to heap allocated data, such as objects,
strings, and doubles (hereafter collectively referred
to as “objects”). All accesses to object variables
are done by reference. We transparently convert all
tainted primitive variables to doubles (a reference
type) so that our tainting code exclusively deals with
reference types. For reasons which we will dis-
cuss shortly, we do not taint the actual heap object
pointed to by the reference (e.g. the ﬂoating point
value of a double variable), but instead we only ever
taint the individual references (pointers). For exam-
ple, it is possible to have both a tainted and an un-
tainted reference (pointer) to the same string. There-
fore, variables of all data types are tainted in the
same way, i.e. by tainting individual references.
When we implemented our tainting system, we
had a choice between associating taint status with
objects or with references to objects. We believe
that it is a mistake to associate taint with objects
because objects can be safely shared across privi-
leged and unprivileged namespaces. For example,
if a string variable were to be deﬁned in a privi-
leged namespace and then assigned to a variable in
an unprivileged namespace, and unprivileged code
were then to copy it into another variable, the origi-
nal reference and the copy should not have the same
taint status although they reference the same heap
object. The value of the copied variable was clearly
inﬂuenced by untrusted code, whereas the original
variable was not. Note that strings and doubles are
immutable, so there is no risk of modiﬁcation by
untrusted code. In other words, whenever a string
or a double is modiﬁed, a new object is created
with the new value and the original remains un-
changed. For mutable JavaScript objects, our pol-
icy is to taint individual property references when
they are modiﬁed by untrusted code. If we were to
taint by object instead of by reference, we would
run the risk of excessive, unnecessary taint propa-
gation. For example, if an extension stores a tainted
value in a property of a commonly used object, the
object itself would become tainted. Therefore, any
existing ﬁelds or methods of the object would also
become tainted without receiving any tainted data.
Such tainting could lead to false positives. The most
egregious example of such unnecessary taint prolif-
eration occurs when an extension copies a tainted
variable into its global namespace, which is itself an
object. Tainting the global object instead of merely
tainting the property reference would unnecessarily
taint all existing variables in the trusted extension
namespace.
Therefore, we implemented variable tainting by
storing a taint bit inside each variable. Internally,
JavaScript variables are a machine word with a few
of the least signiﬁcant bits reserved for a type tag
used for dynamic typing. We set aside an extra bit
in the type tag for the taint status. The upper bits
of primitive variables contain the variable’s value,
while the upper bits of references contain a pointer
to a memory-aligned heap object. A downside of
our reference tainting approach is increased mem-
ory use because heap objects now have to align at
bigger boundaries. Speciﬁcally, we can store half
as many JavaScript objects within a single memory
page. This may seem like a large overhead for our
approach, but the heap-allocated data structures are
very small because the data structures use unaligned
pointers to point to their actual contents. For ex-
ample, the aligned, heap-allocated string data struc-
ture consists of two member variables:
the string
length and a pointer to an unaligned character array
stored elsewhere on the heap. In practice, we ﬁnd
the overhead is not signiﬁcant because JavaScript
heap memory accounts for only a small portion of
the Firefox memory footprint. Empirical measure-
ments conﬁrm that the increase in Firefox’s data res-
ident set size is less than 10% in everyday browsing,
even on JavaScript-heavy sites such as GMail.
We added code to propagate taint between the
inputs and outputs of each of the 154 opcodes in
the JavaScript interpreter as well as code to un-
conditionally taint all outputs produced by unpriv-
ileged scripts.
In addition to the aforementioned
data types, scripts can also make use of a num-
ber of built-in objects and top-level properties and
functions deﬁned by the JavaScript language. Some
built-in objects provide more advanced data types
such as the “Date” and “Array” objects, while
other built-ins provide utility functionality such as
the “Math” object and the “encodeURI” function.
Instead of painstakingly modifying each of these
methods and functions individually to propagate
taints, we conservatively taint the return values from
any built-in function or method if any supplied ar-
guments are tainted. For example, the returned
values from Math.sqrt(X) or encodeURI(X)
will be tainted if X is tainted. Finally, we had to
make a few manual changes in the interpreter code
to prevent loss of taint. For example, object refer-
ences were sometimes converted into raw pointers
and then the same raw pointers were converted back
into object references without restoring the taint bit
in the type tag.
4.4.2 XPCOM
We track the taint status of string objects in the XP-
COM code because it is possible for native and in-
terpreter code to compile strings into attack code.
We also pay special attention to tracking taint in
DOM string properties as these properties are the
initial taint source and a very common taint sink.
We have borrowed the XPCOM string-tainting
implementation from Vogt et al. [19]. This imple-
mentation adds taint ﬂags to XPCOM string classes
and modiﬁes string class methods to preserve taint.
We extended it to more string classes and made a
small number of manual changes to account for the
taint laundering that occurs in the code base when
raw string pointers are extracted from string objects
and used to create new string objects.
The XPCOM implementations of markup ele-
ments, representing the contents of the browser UI
and web pages, do not store all their string prop-
erties within XPCOM string classes. The string
properties of these DOM elements are a signiﬁcant
source and propagation vector for tainted data, so
we needed to associate each string property of a
DOM element with a taint status. To this end, we
modiﬁed a small number of base classes from which
DOM elements of all types are derived. DOM
classes redirect calls to get or set individual prop-
erties to a handful of methods in these base classes,
allowing us to add taint-propagation behavior and
to automatically taint string properties of elements
in unprivileged documents.
Adding taint tracking for every type of XPCOM
property is difﬁcult because there is no elegant way
to associate taint status with primitive data types in
the native XPCOM code. However, it is straight-
forward to taint all script references to unprivi-
leged DOM objects. We added a taint bit to the
“wrappers” used to reﬂect XPCOM objects into
the JavaScript environment as well as the wrap-
pers used to reﬂect JavaScript objects into XPCOM
code. The ﬁrst time XPConnect is asked to reﬂect a
given object between the two environments, it cre-
ates a new wrapper object in the destination envi-
ronment. For wrappers around XPCOM objects, we
alter the wrapper creation process to check whether
the wrapped object is a DOM node and if so, if it
belongs to an unprivileged document. When the
wrapper is placed in a JavaScript namespace, we
make sure its object reference is tainted. The taint-
ing rules in the interpreter automatically taint the
values obtained from reading tainted objects’ prop-
erties, effectively tainting all string and non-string
properties of unprivileged DOM elements. Simi-
larly, when a JavaScript object or function reference
is wrapped for the XPCOM environment (e.g., a
JavaScript callback function), we make sure its taint
status is preserved and therefore propagated during
a property read or a function call.
4.4.3 Attack Detectors
Once we determined the detection policies de-
scribed in sections 4.3.1 and 4.3.2, implementa-
tion of the attack detectors became straightforward.
The compilation detector code was added to the na-
tive functions that turn strings into bytecode (such
as “eval”), while the invocation detector code was
added to the code that implements JavaScript func-
tion calls. The only challenge was in ﬁnding the
appropriate sites to install the detectors so that
all JavaScript compilation and function invocations
could be audited. The detectors had to be close
enough to the low-level compilation and invocation
code to intercept all the relevant call paths, but at the
same time sufﬁciently high-level to easily retrieve
principals and taint status.
5 Evaluation
We have implemented the approach described above
in the Firefox browser.
In this section, we eval-
uate our system by demonstrating its effectiveness
against privilege escalation attacks. We start by
showing how well it prevents attacks on known Fire-
fox vulnerabilities. These vulnerabilities are docu-
mented in Firefox’s Bugzilla bug database, which
provides detailed security reports, proof-of-concept
exploits and any available bug ﬁxes. Next, we show
that our system has minimal impact on normal us-
age by evaluating any false alarms that are raised
and the performance overhead.
We evaluated against proof-of-concept attacks
from Mozilla’s bug database because the vulnerabil-
ities are well cataloged and the proof of concept at-
tacks are readily available. Most extension authors
do not invest as much effort as Mozilla into docu-
menting security issues in their code, thus making
it difﬁcult to evaluate our system against attacks on
speciﬁc extensions. However, the same vulnerabili-
ties could be leveraged against extensions.
We have implemented our system on Firefox ver-
sion 1.0.0, which we use for all the experiments. We
chose this version because it has the largest number
of known privilege escalation bugs, allowing more
extensive testing of our system. Also, the Firefox
security team has a policy of embargoing reports
for recent vulnerabilities, except for exploits already
available in the wild. As a result, recent versions of
Firefox have far fewer available privilege escalation
exploits. For example, as of the end of 2009, the
current version of Firefox (v3.5) has several privi-
leged escalation vulnerabilities as shown below but
no publicly available exploits for them. We plan to
port our system and evaluate our results for newer
versions of Firefox as exploits become available in
the bug database.
5.1 Vulnerability Coverage
Table 1 shows the continuing threat posed by priv-
ilege escalation (PE) vulnerabilities in the Firefox
browser. This table shows the total number of crit-
ical vulnerabilities and the number of critical PE
Firefox
Version 1.0
Version 1.5
Version 2.0
Version 3.0
Critical Critical PE %
67
30
37
27
27
44
43
30
18
13
16
8
Table 1: Vulnerability Statistics.
vulnerabilities in the various major versions of the
browser. The last column shows the percentage
of PE vulnerabilities. Most PE vulnerabilities are
generally classiﬁed as critical, and thus we do not
show the statistics for non-critical vulnerabilities.
Table 1 shows that PE vulnerabilities comprise 2/3
of all critical Firefox 1.0 vulnerabilities. All other
versions continually have about 1/3 PE vulnerabili-
ties. The main reason is that Firefox 1.5 implements
safety wrappers that limit the opportunities for un-
safe interactions between privileged code and web
content, as described in Section 3.2.4.
Table 2 shows all the 19 privilege escalation advi-
sories affecting Firefox 1.0.0, with some advisories
containing multiple bug reports. Note that there are
26 such advisories in Firefox 1.0 (of which 18 are
critical as shown in Table 1), but the other seven do
not run on Firefox 1.0.0 and so we are unable to re-
produce them. We were unable to test our system
against 5 out of the 19 advisories because exploits
were not available for them. The last column shows
the types of vulnerabilities exploited in each advi-
sory. For reference leaks, we also show whether
the leak is leveraged to compile code (C) with the
wrong principals or execute a luring attack (L).
Our system guards against 13 out of the 14 vul-
nerabilities described in the advisories. We do not
detect an attack on the vulnerability in advisory #6.
In this attack, an untrusted HTML string is parsed
by the HTML parser to generate new HTML ele-
ments in a privileged document. Currently, we lose
taint because we have not implemented taint propa-
gation within the HTML parser.
5.2 False Positive Evaluation
We also tested our system by installing the top
10 most popular extensions that were available for
Firefox 1.0.0, and then we manually browsed the
Web. These extensions are Adblock Plus, Foxy-
Tunes, NoScript, Forecastfox, Add N Edit Cookies,
PDF Download, StumbleUpon, 1-Click Weather,
#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Advisory
2006-25
2006-16
2006-15
2006-14
2005-56
2005-49
2005-44
2005-43
2005-41
2005-39
2005-37
2005-35
2005-31
2005-12
2006-24
2006-05
2005-58
2005-45
2005-27
Advisory Name
Type of Vulnerability Detection
Privilege escalation through Print Preview
Compilation
Accessing XBL compilation scope via valueOf.call()
Leak (C)
Privilege escalation using a JavaScript function’s cloned parent
Leak (C)
Privilege escalation via XBL.method.eval
Leak (C)
Code execution through shared function objects
Leak (C), Leak (L)
Script injection from Firefox sidebar panel using data://
Compilation
Privilege escalation via non-DOM property overrides
Luring
“Wrapped” javascript: URLs bypass security checks
Compilation
Privilege escalation via DOM property overrides
Luring
Arbitrary code execution from Firefox sidebar panel II