### 文档优化

#### `PKG_UTIL.LOB_COMPARE`
该函数按照指定的起始位置和长度比较两个LOB对象。如果`lob1`大于`lob2`，则返回1；如果`lob1`小于`lob2`，则返回-1；如果两者相等，则返回0。

**函数原型:**
```sql
PKG_UTIL.LOB_COMPARE(
    lob1 IN anyelement,
    lob2 IN anyelement,
    len IN int,
    start1 IN int,
    start2 IN int
) RETURN INTEGER;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| lob1 | CLOB/BLOB | IN | 否 | 待比较的第一个LOB对象 |
| lob2 | CLOB/BLOB | IN | 否 | 待比较的第二个LOB对象 |
| len  | INT | IN | 否 | 比较的长度 |
| start1 | INT | IN | 否 | `lob1`的起始偏移量 |
| start2 | INT | IN | 否 | `lob2`的起始偏移量 |

---

#### `PKG_UTIL.LOB_MATCH`
该函数返回`pattern`在`lob`对象中第`match_nth`次出现的位置。

**函数原型:**
```sql
PKG_UTIL.LOB_MATCH(
    lob IN anyelement,
    pattern IN anyelement,
    start IN int,
    match_nth IN int
) RETURN INTEGER;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| lob | CLOB/BLOB | IN | 否 | 待比较的LOB对象 |
| pattern | CLOB/BLOB | IN | 否 | 待匹配的模式 |
| start | INT | IN | 否 | 起始比较位置 |
| match_nth | INT | IN | 否 | 第几次匹配到 |

---

#### `PKG_UTIL.LOB_RESET`
该函数清除一段数据并将其设置为字符`value`。

**函数原型:**
```sql
PKG_UTIL.LOB_RESET(
    lob INOUT bytea,
    len INOUT int,
    start IN int DEFAULT 1,
    value IN char DEFAULT '0'
) RETURN RECORD;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| lob | BYTEA | INOUT | 否 | 待重置的LOB对象 |
| len | INT | INOUT | 否 | 重置的长度 |
| start | INT | IN | 是 | 重置的起始位置，默认值为1 |
| value | CHAR | IN | 是 | 设置的字符，默认值为'0' |

---

#### `PKG_UTIL.IO_PRINT`
该函数将一段字符串打印输出。

**函数原型:**
```sql
PKG_UTIL.IO_PRINT(
    format IN text,
    is_one_line IN boolean
) RETURN VOID;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| format | TEXT | IN | 否 | 待打印输出的字符串 |
| is_one_line | BOOLEAN | IN | 否 | 是否输出为一行 |

---

#### `PKG_UTIL.RAW_GET_LENGTH`
该函数获取RAW对象的长度。

**函数原型:**
```sql
PKG_UTIL.RAW_GET_LENGTH(
    value IN raw
) RETURN INTEGER;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| value | RAW | IN | 否 | 待获取长度的RAW对象 |

---

#### `PKG_UTIL.RAW_CAST_FROM_VARCHAR2`
该函数将VARCHAR2转换为RAW。

**函数原型:**
```sql
PKG_UTIL.RAW_CAST_FROM_VARCHAR2(
    str IN varchar2
) RETURN RAW;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| str | VARCHAR2 | IN | 否 | 需要转换的源数据 |

---

#### `PKG_UTIL.CAST_FROM_BINARY_INTEGER`
该函数将BINARY INTEGER数据转换为RAW。

**函数原型:**
```sql
PKG_UTIL.CAST_FROM_BINARY_INTEGER(
    value IN integer,
    endianess IN integer
) RETURN RAW;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| value | INTEGER | IN | 否 | 需要转换为RAW的源数据 |
| endianess | INTEGER | IN | 否 | 表示字节序的整型值（1代表BIG_ENDIAN，2代表LITTLE_ENDIAN） |

---

#### `PKG_UTIL.CAST_TO_BINARY_INTEGER`
该函数将RAW数据转换为BINARY INTEGER。

**函数原型:**
```sql
PKG_UTIL.CAST_TO_BINARY_INTEGER(
    value IN raw,
    endianess IN integer
) RETURN INTEGER;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| value | RAW | IN | 否 | 需要转换为BINARY INTEGER的RAW类型源数据 |
| endianess | INTEGER | IN | 否 | 表示字节序的整型值（1代表BIG_ENDIAN，2代表LITTLE_ENDIAN） |

---

#### `PKG_UTIL.SET_RANDOM_SEED`
该函数设置随机数种子。

**函数原型:**
```sql
PKG_UTIL.SET_RANDOM_SEED(
    seed IN int
) RETURN INTEGER;
```

**参数说明:**
| 参数 | 类型 | 入参/出参 | 是否可以为空 | 描述 |
|------|------|-----------|--------------|------|
| seed | INT | IN | 否 | 随机数种子 |

---

#### `PKG_UTIL.RANDOM_GET_VALUE`
该函数返回一个0到1之间的随机数。

**函数原型:**
```sql
PKG_UTIL.RANDOM_GET_VALUE() RETURN NUMERIC;
```

---

#### `PKG_UTIL.FILE_SET_DIRNAME`
该函数设置当前操作的目录。所有涉及单个目录的操作都需要先调用此方法设置操作目录。

**函数原型:**
```sql
PKG_UTIL.FILE_SET_DIRNAME(
    dir IN text
) RETURN BOOLEAN;
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| dir | 文件的目录位置，这个字符串是一个目录对象名。需要添加到系统表PG_DIRECTORY中，否则会报路径不存在的错误。 |

---

#### `PKG_UTIL.FILE_OPEN`
该函数用来打开一个文件，并返回一个INTEGER类型的句柄。最多可以同时打开50个文件。

**函数原型:**
```sql
PKG_UTIL.FILE_OPEN(
    file_name IN text,
    open_mode IN integer
);
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| file_name | 文件名，包含扩展名（文件类型），不包括路径名。如果文件名中包含路径，在OPEN中会被忽略。在Unix系统中，文件名不能以/.结尾。 |
| open_mode | 指定文件的打开模式，包含r：read text，w: write text和a: append text。对于写操作，会检测文件类型，如果写入elf文件，将会报错并退出。 |

---

#### `PKG_UTIL.FILE_SET_MAX_LINE_SIZE`
该函数设置写入文件一行的最大长度。

**函数原型:**
```sql
PKG_UTIL.FILE_SET_MAX_LINE_SIZE(
    max_line_size IN integer
) RETURN BOOLEAN;
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| max_line_size | 每行最大字符数，包含换行符（最小值是1，最大值是32767）。如果没有指定，会指定一个默认值1024。 |

---

#### `PKG_UTIL.FILE_IS_CLOSE`
该函数检测一个文件句柄是否关闭。

**函数原型:**
```sql
PKG_UTIL.FILE_IS_CLOSE(
    file IN integer
) RETURN BOOLEAN;
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| file | 一个打开的文件句柄。 |

---

#### `PKG_UTIL.FILE_READ`
该函数根据指定的长度从一个打开的文件句柄中读取出数据。

**函数原型:**
```sql
PKG_UTIL.FILE_READ(
    file IN integer,
    buffer OUT text,
    len IN integer
);
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| file | 通过调用OPEN打开的文件句柄，文件必须以读的模式打开，否则会抛出INVALID_OPERATION的异常。 |
| buffer | 用于接收数据的BUFFER。 |
| len | 从文件中读取的字节数。 |

---

#### `PKG_UTIL.FILE_READLINE`
该函数根据指定的长度从一个打开的文件句柄中读取出一行数据。

**函数原型:**
```sql
PKG_UTIL.FILE_READLINE(
    file IN integer,
    buffer OUT text,
    len IN integer DEFAULT 1024
);
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| file | 通过调用OPEN打开的文件句柄，文件必须以读的模式打开，否则会抛出INVALID_OPERATION的异常。 |
| buffer | 用于接收数据的BUFFER。 |
| len | 从文件中读取的字节数，默认是NULL。如果是默认NULL，会使用max_line_size来指定大小。 |

---

#### `PKG_UTIL.FILE_WRITE`
该函数将BUFFER中指定的数据写入到文件中。

**函数原型:**
```sql
PKG_UTIL.FILE_WRITE(
    file IN integer,
    buffer IN text
);
```

**参数说明:**
| 参数 | 描述 |
|------|------|
| file | 通过调用OPEN打开的文件句柄。 |
| buffer | 用于写入数据的BUFFER。 |

---

希望这些优化后的文档能帮助你更好地理解和使用这些函数。如果有任何进一步的问题或需要更多细节，请随时告知。