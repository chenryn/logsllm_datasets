Python and JavaScript (with or without XRegExp) do not support mode modifiers in
the middle of the regular expression. For Python and JavaScript with XRegExp, we can
use the negated character class  to match everything up to the end of the line
for the single-line comment, and use *?> for the multiline comment with °dot matches
line breaks* turmed on.
JavaScript without XRegExp does not have an option to make the dot match line breaks.
So we keep ,*> for the single-line comment, and we use  for the multiline
comment.
See Also
Recipe 2.4 explains the dot, including the mode modifiers that affect it, and the work-
around for JavaScript. Recipe 2.8 explains altermation.
7.8Strings
Problem
You need a regex that matches a string, which is a sequence of zero or more characters
enclosed by double quotes. A string with nothing between the quotes is an empty string.
Two sequential double quotes in a character string denote a single character, a double
quote. Strings cannot include line breaks. Backslashes or other characters have no spe-
cial meaning in strings.
Your regularexpression should match any string, including empty strings, and it should
returm a single match for strings that contain double quotes. For example, it should
returm "before quote"*after quote" as a single match, rather than matching *before
edasaoxage,pue aronb
418 | Chapter 7: Source Code and Log Files
---
## Page 435
Solution
([u\x])[u\x\]
Regex options: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Matching a string that cannot contain quotes or line breaks would be easy with  to match anything but quotes and line breaks. This
may be followed by zero or more pairs of double quotes. We could match those with
(?: "*)*>, but after each pair of double quotes, the string can have more characters that
are not quotes or line breaks. So we match one pair of double quotes and following
I\]=) qm sued au [e o ^[u\x\ qm saoeueqo xeaaquou aonbuou
\n"J*)*. W'e end the regex with the double quote that closes the string.
The match returned by this regex will be the whole string, including enclosing quotes,
and pairs of quotes inside the string. To get only the contents of the string, the code
that processes the regex match needs to do some extra work. First, it should strip off
the quotes at the start and the end of the match. Then it should search for all pairs of
double quotes and replace them with individual double quotes.
You may wonder why we don’t simply use "(?: [^*\r\n]I**)*"> to match our strings.
This regex matches a pair of quotes containing , which matches zero
or more occurrences of any combination of rwo alternatives.  matches a pair of double quotes.
Put together, the overall regex matches a pair of double quotes containing zero or more
characters that aren’t quotes or line breaks or that are a pair of double quotes. This is
the definitionof a sring in the stated problem. This regex indeed correctly matches the
strings we want, but it is not very efficient. The regular expression engine has to enter
a group with rwo alternatives for each character in the string. With the regex from the
"Solution? section, the regex engine only enters a group for each pair of double quotes
in the string, which is a rare occurrence.
You could try to optimize the inefficient regex as , The idea is
that this regex only enters the group for each pair of double quotes and for each se-
encounters only valid srings. Buti this regex is ever used on a file that contains a string
quence of characters without quotes or line breaks. That is true, as long as the regex
without the closing quote, this will lead to catastrophic backtracking. When the closing
quote fails to match, the regex engine will try each and every permutation of the plus
7.8 Strings I 419
---
## Page 436
quote and the end of the line.
Table 7-1 shows how this regex attemptsaldifferent ways of matching *abcd. The cells
in the table show the text matched by  to
match the remaining characters. Now we have rwo iterations that will backtrack. This
continues until each iteration of [^"\r\n]+ matches a single character, and α* has
repeated the group as many times as there are characters on the line.
Table 7-1. Linte separators
Permutation
[xn]+
2n[xn]+)
3[xn]+)
4[xn]+
1
abcd
/#
n/a
n/a
2
abc
d
n/a
n/a
3
cd
n/a
n/a
4
n/a
a
bcd
n/a
n/a
6
a
bc
d
n/a
7
a
b
sd
n/a
8
3
b
jo axqunu au qm jeuauodxa smon8 suogennuuad jo aqunu aq °aas ueo no. sy
characters after the opening double quote. For a file with short lines, this will result in
your application running slowly. For a file with very long lines, your application may
lock up or crash. If you use the variant [^"\r\n]
+|"*)** , or with possessive quantiers, as in  matches
a single backslash, and ) matches any character that is not a line break. Make sure
the option “dot matches line breaks" is turmed of.
Variations
Strings delimited with single quotes can be matched just as easily:
[n]*(？:[n]*)
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
If your language supports both single-quoted and double-quoted strings, you'll need
to handle those as separate alternatives:
“["{r\n]*(？["{r\n]*)*/[n]*(？:.[n]*)
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
If strings can include line breaks escaped with a backslash, we can modify our original
regular expression to allow a line break to be matched after the backslash. We use
(?: \r?\n)> rather than just the dot with the “dot marches line breaks option" to
make sure that Windows-style line breaks are matched correctly. The dot would match
only the CR in a CR LF line break, and the regex would then fail to match the LF.  to match the regular ex-
pression.This is the sameregularexpression that was theSolution to Recipe 7.9, excet
that it has forward slashes instead of quotes. A literal regular expression really is just a
string quoted with forward slashes that can contain forward slashes if escaped with a
backslash.
The difference between the four solutions is how they check whether the regex is pre-
ceded by an equals sign, a colon, an opening parenthesis, or a comma, possibly with
an exclamation point between that character and the regular expression. We could
easily do that with lookbehind if we didn’t also want to allow any amount of whitespace
berween the regex and the preceding character. That complicates matters because the
regex flavors in this book vary widely in their support for lookbehind.
The .NET regex flavor is the only one in this book that allows infinite repetition inside
lookbehind. So for NET we have a perfect solution:  that we can use instead. We use  to match the regular expression.
Java does not allow infinite repetition in lookbehind, but does allow finite repetition.
So instead of using  to check for absolutely any amount of whitespace, we use
s{o, 10> to check for up to 10 whitespace characters. The number 10 is arbitrary; we
just need something sufficiently large to make sure we don’t miss any regexes that are
deeply indented. We also need to keep the number reasonably small to make sure we
don’t needlessly slow down the regular expression. The greater the number of repeti-
tions we allow, the more characters Java will scan while looking for a match to what's
inside the lookbehind.
The other regex flavors either don’t support repetition inside lookbehind or don’t sup-
port lookbehind or  at all. For these flavors, we simply use [=: (, 1(?: \s*1)?+\s*)
to match the punctuation we want before the regex, and (/[~/\\\r\n]*(?:\\ [~/\\\r
424 I Chapter 7: Source Code and Log Files
---
## Page 441
\n]*)*/) to match the regex itself and store it in a capturing group. The overall regex
match will include both the punctuation and the regex. The capturing group makes it
easier to retrieve just the regex. This solution will work only if the application with
which you'll use this regex can work on the text matched by a capturing group rather
than the whole regex match.
See Also
Recipe 2.16 has all the details on lookbehind and K
7.11HereDocuments
Problem
You need a regex that matches here documents in source files for a scripring language
in which a here document can be started with << followed by a word. The word may
have single or double quotes around it. The here document ends when that word ap-
pears at the very start of a line, without any quotes, using the same case.
Solution