                model.addAttribute("message", msg);
                System.out.println(msg);
            } catch (UnauthorizedException e) {
                msg = "您没有得到相应的授权！" + e.getMessage();
                model.addAttribute("message", msg);
                System.out.println(msg);
            }
            System.out.println("登录失败!");
            return "/jsp/login.jsp";
        }
        public String doLogout(ModelMap model){
            Subject subject = SecurityUtils.getSubject();
            subject.logout();
            model.remove("user");
            return "/jsp/login.jsp";
        }
    }
以上便是SpringMVC web中Shiro简单使用的依赖、配置、接口等，通过其，我们就能畅快的使用shiro的各种特性和功能了。
#### 2\. 源码运行原理
回顾上面的Shiro的web配置，我们可以发现其中有一个filter的配置
        shiroFilter
        org.springframework.web.filter.DelegatingFilterProxy
          targetFilterLifecycle
          true
        shiroFilter
        /*
从明面上我们只要写过Spring项目都不会陌生，filter注册了一个过滤器，而filter-mapping是对其filter访问过滤url的一个匹配配置，也就是说，上面的filter-mapping配置，规定了shiroFilter这个过滤器，将会过滤任何一个请求到该项目的http请求。
不过，这里还有一个重点，就是DelegatingFilterProxy这个利用了门面模式设计的一个class，它是一个filter的代理类，通过这个类可以代理一个spring容器管理的filter的生命周期，也就是说，可以在Spring容器中创建一个filter
bean，然后注入一系列依赖，这个bean可以用代理的方式配置到web.xml中使用。
我们再看会前面的spring-shiro.xml文件，其中，我们配置了这样的一个bean
         -->
                /html/admin/**=authc,roles[admin]
                /html/user/**=user,roles[user]
                /jsp/admin/**=authc,roles[admin]
                /jsp/user/**=user,roles[user]
可以看到，它的bean
id和我们在web.xml配置的filter名称是一样的，也就是说，这个filter是它的代理门面类，在访问该web项目时的任何一个请求，都将被shiroFilter这个bean进行过滤。
那么，接下来我们打开org.apache.shiro.spring.web.ShiroFilterFactoryBean这个bean，因为他是一个FactoryBean，因此，在该类的bean真正被使用的时候，会调用其getObject()方法
    /**
     * Lazily creates and returns a {@link AbstractShiroFilter} concrete instance via the
     * {@link #createInstance} method.
     *
     * @return the application's Shiro Filter instance used to filter incoming web requests.
     * @throws Exception if there is a problem creating the {@code Filter} instance.
     */
    public Object getObject() throws Exception {
        if (instance == null) {
            instance = createInstance();
        }
        return instance;
    }
看方法注释可以清楚的看到，这是一个懒加载的bean，当使用到它时，才会调用其getObject()方法，然后再该方法中，我们可以看到，通过createInstance()创建一个真正的实例作为该bean
    protected AbstractShiroFilter createInstance() throws Exception {
        log.debug("Creating Shiro Filter instance.");
        SecurityManager securityManager = getSecurityManager();
        if (securityManager == null) {
            String msg = "SecurityManager property must be set.";
            throw new BeanInitializationException(msg);
        }
        if (!(securityManager instanceof WebSecurityManager)) {
            String msg = "The security manager does not implement the WebSecurityManager interface.";
            throw new BeanInitializationException(msg);
        }
        FilterChainManager manager = createFilterChainManager();
        //Expose the constructed FilterChainManager by first wrapping it in a
        // FilterChainResolver implementation. The AbstractShiroFilter implementations
        // do not know about FilterChainManagers - only resolvers:
        PathMatchingFilterChainResolver chainResolver = new PathMatchingFilterChainResolver();
        chainResolver.setFilterChainManager(manager);
        //Now create a concrete ShiroFilter instance and apply the acquired SecurityManager and built
        //FilterChainResolver.  It doesn't matter that the instance is an anonymous inner class
        //here - we're just using it because it is a concrete AbstractShiroFilter instance that accepts
        //injection of the SecurityManager and FilterChainResolver:
        return new SpringShiroFilter((WebSecurityManager) securityManager, chainResolver);
    }
回顾一开始我们在bean配置文件对ShiroFilterFactoryBean配置，SecurityManager我们配置的是org.apache.shiro.web.mgt.DefaultWebSecurityManager，一个默认的web安全管理器，这个web安全管理器配置了一个realm，该realm我们可以使用shiro包内置的jdbc快捷使用的org.apache.shiro.realm.jdbc.JdbcRealm，也可以我们自定义去实现登录验证和授权相关方法的realm，总的来说，通过web安全管理器，我们可以配置相关的登录验证和授权配置，这也是使用shiro中非常关键的一点。
如果我们想要使用简洁预置的JdbcRealm，我们只要创建三个表（用户、角色、权限），并把相应的sql查询语句设置好，就能快速的使用Shiro的Jdbc持久化用户、角色、权限数据。
在createInstance()方法的一开始，就会对我们设置的web安全管理器进行校验，只有满足情况下，shiro的功能才能继续并正确使用。
接着，调用其createFilterChainManager()方法，创建一个过滤器链的管理器，它也是shiro中非常核心的部分，我们一般在使用shiro的时候，如果我们要加入图形验证码、短信验证码等验证，都会通过filter的形式添加，然后把它添加到我们要创建的过滤器链的管理器（FilterChainManager），在访问到符合规则配置的path时，就会到达我们添加的图形、短信验证码校验filter中。当然，除了图形、短信验证等逻辑外，我们一般给一些页面、接口，设置成游客可访问，或者登陆状态可访问，亦或者使用rememberMe功能（在用户Session过期后，可以通过Cookie的RememberMe进行重新免登陆认证）等等。
创建好FilterChainManager后，就会把它设置到一个新建的PathMatchingFilterChainResolver中，这个resolver的作用是在一个http请求进来时，用于提取http请求的path，然后匹配相应的FilterChains进行过滤请求。
最后创建一个内部的静态类SpringShiroFilter返回，作为该工厂bean实际创建的bean对象。
我们进一步跟进createFilterChainManager()方法
    protected FilterChainManager createFilterChainManager() {
        DefaultFilterChainManager manager = new DefaultFilterChainManager();
        Map defaultFilters = manager.getFilters();
        //apply global settings if necessary:
        for (Filter filter : defaultFilters.values()) {
            applyGlobalPropertiesIfNecessary(filter);
        }
        //Apply the acquired and/or configured filters:
        Map filters = getFilters();
        if (!CollectionUtils.isEmpty(filters)) {
            for (Map.Entry entry : filters.entrySet()) {
                String name = entry.getKey();
                Filter filter = entry.getValue();
                applyGlobalPropertiesIfNecessary(filter);
                if (filter instanceof Nameable) {
                    ((Nameable) filter).setName(name);
                }
                //'init' argument is false, since Spring-configured filters should be initialized
                //in Spring (i.e. 'init-method=blah') or implement InitializingBean:
                manager.addFilter(name, filter, false);
            }
        }
        //build up the chains:
        Map chains = getFilterChainDefinitionMap();
        if (!CollectionUtils.isEmpty(chains)) {
            for (Map.Entry entry : chains.entrySet()) {
                String url = entry.getKey();
                String chainDefinition = entry.getValue();
                manager.createChain(url, chainDefinition);
            }
        }
        return manager;
    }
可以看到在创建FilterChainManager的地方，可以分为三个创建步骤
  1. 默认创建的，对其自带的Filter进行全局配置的设置
    DefaultFilterChainManager manager = new DefaultFilterChainManager();
    Map defaultFilters = manager.getFilters();
    //apply global settings if necessary:
    for (Filter filter : defaultFilters.values()) {
        applyGlobalPropertiesIfNecessary(filter);
    }
    private void applyGlobalPropertiesIfNecessary(Filter filter) {
        applyLoginUrlIfNecessary(filter);
        applySuccessUrlIfNecessary(filter);
        applyUnauthorizedUrlIfNecessary(filter);
    }
那默认自带的filter究竟有哪些呢？跟进DefaultFilterChainManager一探究竟
    public DefaultFilterChainManager() {
        this.filters = new LinkedHashMap();
        this.filterChains = new LinkedHashMap();
        addDefaultFilters(false);
    }
    protected void addDefaultFilters(boolean init) {
        for (DefaultFilter defaultFilter : DefaultFilter.values()) {
            addFilter(defaultFilter.name(), defaultFilter.newInstance(), init, false);
        }
    }
可以看见，其构造方法调用了addDefaultFilters方法，把DefaultFilter枚举类进行了遍历，然后添加到filter集合中
查看该枚举类，可以发现一共有11个预置的filter：
    anon(AnonymousFilter.class),
    authc(FormAuthenticationFilter.class),
    authcBasic(BasicHttpAuthenticationFilter.class),
    logout(LogoutFilter.class),
    noSessionCreation(NoSessionCreationFilter.class),
    perms(PermissionsAuthorizationFilter.class),
    port(PortFilter.class),
    rest(HttpMethodPermissionFilter.class),
    roles(RolesAuthorizationFilter.class),
    ssl(SslFilter.class),
    user(UserFilter.class);
而其中，我们最常使用的大概是：
    1. anon：无需登录认证即可访问
    2. authc：需要登录认证才可访问
    3. logout：注销filter
    4. perms：具有特点权限授权才可访问
    5. roles：某个角色才可访问
    6. user：使用RememberMe
以上这些便是第一步所做的一切。
  1. 对我们要添加或者修改的filter进行遍历配置
    Map filters = getFilters();
    if (!CollectionUtils.isEmpty(filters)) {
        for (Map.Entry entry : filters.entrySet()) {
            String name = entry.getKey();
            Filter filter = entry.getValue();
            applyGlobalPropertiesIfNecessary(filter);
            if (filter instanceof Nameable) {
                ((Nameable) filter).setName(name);
            }
            //'init' argument is false, since Spring-configured filters should be initialized
            //in Spring (i.e. 'init-method=blah') or implement InitializingBean:
            manager.addFilter(name, filter, false);
        }
    }
不像前面默认预置的filter，从枚举类遍历获取，我们添加或修改的filter，都是首先设置到ShiroFilterFactoryBean中的，所以会从其中读取所以我们需要添加、修改的filter出来，然后进行全局的配置设置
在这一处，我们添加或修改的filter，其实就如我们前面所讲的，我们一般在使用shiro的时候，如果我们要加入图形验证码、短信验证码等验证，都会通过filter的形式添加，这里面的filter就是这一步中遍历的filter了。
  1. 创建过滤器链（filter chains）
    Map chains = getFilterChainDefinitionMap();
    if (!CollectionUtils.isEmpty(chains)) {
        for (Map.Entry entry : chains.entrySet()) {
            String url = entry.getKey();
            String chainDefinition = entry.getValue();
            manager.createChain(url, chainDefinition);