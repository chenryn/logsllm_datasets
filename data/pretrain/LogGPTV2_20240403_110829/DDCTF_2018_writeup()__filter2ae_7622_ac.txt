    from z3 import *  
    a = [BitVec("a%d"%i, 32) for i in range(16)]  
    s = Solver()  
    s.add(0xca6a*a[0] -0xd9ee*a[1] +0xc5a7*a[2] +0x19ee*a[3] +0xb223*a[4] +0x42e4*a[5] +0xc112*a[6] -0xcf45*a[7] +0x260d*a[8] +0xd78d*a[9] +0x99cb*a[10] -0x3e58*a[11] -0x97cb*a[12] +0xfba9*a[13] -0xdc28*a[14] +0x859b*a[15]  == 0xaa2ed7)  
    s.add(0xf47d*a[0] +0x12d3*a[1] -0x4102*a[2] +0xcedf*a[3] -0xafcf*a[4] -0xeb20*a[5] -0x2065*a[6] +0x36d2*a[7] -0x30fc*a[8] -0x7e5c*a[9] +0xeea8*a[10] +0xd8dd*a[11] -0xae2*a[12] +0xc053*a[13] +0x5158*a[14] -0x8d42*a[15]  == 0x69d32e)  
    s.add(0xffff52cf*a[0] -0x4fea*a[1] +0x2075*a[2] +0x9941*a[3] -0xbd78*a[4] +0x9e58*a[5] +0x40ad*a[6] -0x8637*a[7] -0x2e08*a[8] +0x4414*a[9] +0x2748*a[10] +0x1773*a[11] +0xe414*a[12] -0x7b19*a[13] +0x6b71*a[14] -0x3dcf*a[15]  == 0x3b89d9)  
    s.add(0xffffedd7*a[0] -0x1df0*a[1] +0x8115*a[2] +0x54bd*a[3] -0xf2ba*a[4] +0xdbd*a[5] +0x1dcf*a[6] +0x272*a[7] -0x2fcc*a[8] -0x93d8*a[9] -0x6f6c*a[10] -0x98ff*a[11] +0x2148*a[12] -0x6be2*a[13] +0x2e56*a[14] -0x7bdf*a[15]  == 0xff6a5aea)  
    s.add(0xffffa8c1*a[0] +0xdc78*a[1] -0x380f*a[2] +0x33c0*a[3] -0x7252*a[4] -0xe5a9*a[5] +0x7a53*a[6] -0x4082*a[7] -0x584a*a[8] +0xc8db*a[9] +0xd941*a[10] +0x6806*a[11] -0x8b97*a[12] +0x23d4*a[13] +0xac2a*a[14] +0x20ad*a[15]  == 0x953584)  
    s.add(0x5bb7*a[0] -0xfdb2*a[1] +0xaaa5*a[2] -0x50a2*a[3] -0xa318*a[4] +0xbcba*a[5] -0x5e5a*a[6] +0xf650*a[7] +0x4ab6*a[8] -0x7e3a*a[9] -0x660c*a[10] +0xaed9*a[11] -0xa60f*a[12] +0xf924*a[13] -0xff1d*a[14] +0xc888*a[15]  == 0xffd31341)  
    s.add(0x812d*a[0] -0x402c*a[1] +0xaa99*a[2] -0x33b*a[3] +0x311b*a[4] -0xc0d1*a[5] -0xfad*a[6] -0xc1bf*a[7] -0x1560*a[8] -0x445b*a[9] -0x9b78*a[10] +0x3b94*a[11] +0x2531*a[12] -0xfb03*a[13] +0x8*a[14] +0x8721*a[15]  == 0xff9a6b57)  
    s.add(0x15c5*a[0] +0xb128*a[1] -0x957d*a[2] +0xdf80*a[3] +0xee68*a[4] -0x3483*a[5] -0x4b39*a[6] -0x3807*a[7] -0x4f77*a[8] +0x652f*a[9] -0x686f*a[10] -0x7fc1*a[11] -0x5d2b*a[12] -0xb326*a[13] -0xacde*a[14] +0x1f11*a[15]  == 0xffd6b3d3)  
    s.add(0xaf37*a[0] +0x709*a[1] +0x4a95*a[2] -0xa445*a[3] -0x4c32*a[4] -0x6e5c*a[5] -0x45a6*a[6] +0xb989*a[7] +0xf5b7*a[8] +0x3980*a[9] -0x151d*a[10] +0xaf13*a[11] +0xa134*a[12] +0x67ff*a[13] +0xce*a[14] +0x79cf*a[15]  == 0xc6ea77)  
    s.add(0xffff262a*a[0] +0xdf05*a[1] -0x148e*a[2] -0x4758*a[3] -0xc6b2*a[4] -0x4f94*a[5] -0xf1f4*a[6] +0xcf8*a[7] +0xf5f1*a[8] -0x7883*a[9] -0xe2c6*a[10] -0x67*a[11] +0xeccc*a[12] -0xc630*a[13] -0xba2e*a[14] -0x6e41*a[15]  == 0xff1daae5)  
    s.add(0xffff9be3*a[0] -0x716d*a[1] +0x4505*a[2] -0xb99d*a[3] +0x1f00*a[4] +0x72bc*a[5] -0x7ff*a[6] +0x8945*a[7] -0xcc33*a[8] -0xab8f*a[9] +0xde9e*a[10] -0x6b69*a[11] -0x6380*a[12] +0x8cee*a[13] -0x7a60*a[14] +0xbd39*a[15]  == 0xff5be0b4)  
    s.add(0x245e*a[0] +0xf2c4*a[1] -0xeb20*a[2] -0x31d8*a[3] -0xe329*a[4] +0xa35a*a[5] +0xaacb*a[6] +0xe24d*a[7] +0xeb33*a[8] +0xcb45*a[9] -0xdf3a*a[10] +0x27a1*a[11] +0xb775*a[12] +0x713e*a[13] +0x5946*a[14] +0xac8e*a[15]  == 0x144313b)  
    s.add(0x157*a[0] -0x5f9c*a[1] -0xf1e6*a[2] +0x550*a[3] -0x441b*a[4] +0x9648*a[5] +0x8a8f*a[6] +0x7d23*a[7] -0xe1b2*a[8] -0x5a46*a[9] -0x5461*a[10] +0xee5f*a[11] -0x47e6*a[12] +0xa1bf*a[13] +0x6cf0*a[14] -0x746b*a[15]  == 0xffd18bd2)  
    s.add(0xf81b*a[0] -0x76cb*a[1] +0x543d*a[2] -0x4a85*a[3] +0x1468*a[4] +0xd95a*a[5] +0xfbb1*a[6] +0x6275*a[7] +0x30c4*a[8] -0x9595*a[9] -0xdbff*a[10] +0x1d1d*a[11] +0xb1cf*a[12] -0xa261*a[13] +0xf38e*a[14] +0x895c*a[15]  == 0xb5cb52)  
    s.add(0xffff6b97*a[0] +0xd61d*a[1] +0xe843*a[2] -0x8c64*a[3] +0xda06*a[4] +0xc5ad*a[5] +0xd02a*a[6] -0x2168*a[7] +0xa89*a[8] +0x2dd*a[9] -0x80cc*a[10] -0x9340*a[11] -0x3f07*a[12] +0x4f74*a[13] +0xb834*a[14] +0x1819*a[15]  == 0xa6014d)  
    s.add(0x48ed*a[0] +0x2141*a[1] +0x33ff*a[2] +0x85a9*a[3] -0x1c88*a[4] +0xa7e6*a[5] -0xde06*a[6] +0xbaf6*a[7] +0xc30f*a[8] -0xada6*a[9] -0xa114*a[10] -0x86e9*a[11] +0x70f9*a[12] +0x7580*a[13] -0x51f8*a[14] -0x492f*a[15]  == 0x2fde7c)  
    if(s.check()==sat):  
        c = b''  
        m = s.model()  
        for i in range(16):  
            print("a[%d]=%d"%(i, m[a[i]].as_long()))  
        for i in range(16):  
            print(chr(m[a[i]].as_long()&0xff), end='')  
**符号执行**
无名侠师傅提出了使用angr来全自动求解的方法，注意二进制文件也需要去过花。我这边不知道是因为capstone没有mips反编译的版本还是地址扒错了跑不出来，只好直接附上师傅的脚本。
注意其中find和avoid的值由于各人的bin文件不同，因此地址需要自行修正。
    from angr import *  
    import logging  
    import IPython  
    logging.getLogger('angr.manager').setLevel(logging.DEBUG)  
    p = Project('mips2')  
    state = p.factory.blank_state(addr=0x400420)  
    DATA_ADDR = 0xA0000  
    state.regs.a0 = DATA_ADDR  
    for i in range(16*4):  
     vec = state.solver.BVS("c{}".format(i),8,explicit_name=True)  
     cond = state.solver.And(vec>=32,vec<=126) # low byte  
     state.memory.store(DATA_ADDR+i,vec)  
     if i % 4 == 0:  
     pass  
    #state.add_constraints(cond)  
    sm = p.factory.simulation_manager(state)  
    res = sm.explore(find=0x403150,avoid=[0x403644,0x401940,0x0401ADC,0x401C74  
    ,0x401E10 ,0x401FA8,0x402144  
    ,0x4022DC,0x402478,0x402610,0x4027A8,0x402940,0x402AD8,0x402C74,0x402E10,0x  
    402FA8,0x403144])  
    # 这些地址不同⼈的bin会不⼀样。  
    found = res.found[0]  
    mem = found.memory.load(DATA_ADDR,16*4)  
    print found.solver.eval(mem)  
********
### ****0x0** **2 **黑盒破解******
这个题目比较硬核，输入的地方通过比较字符串来选择函数。首先通过构造函数找到整个数据结构的定义
偏移 | 值 | 类型 | 长度 | 备注 |  
---|---|---|---|---|---  
a1 | sth_p | q | 0x100 |  |  
a1+8 | char_table_0_p | q | 0x100 | 0x6030e0 |  
a1+16 | input | c | 100 |  |  
a1+272 | rand%50 |  |  |  |  
a1+280 | char_table_0_p-sth_p | q |  |  |  
a1+288+8 | char_table_2 | d | 8 | (a1+8)[72+l] 6030e0[l+255] |  
a1+408 | char_table_1 | b | 255 | 0x603700 |  
a1+672 | func_addr | q | 255 | (a1+8)[84+i] 603200+i(+=) |  
a1+672+8 | func_table | q | 8 | (a1+8)[84+6030e0[l+255]] |  
输入函数形式为：
    for i in range(len(input)):  
        *(a1+664) = input[i+1]  
        for j in range(8):  
            if(f[input[i]] == (a1 + 408)[(a1+8)[72+j]]):  
                call (a1+8)[84 + (a1+8)[j+72]] ( a1 )  
可以看到，实际上就是令Input[i]作为下标取数组f的值，然后遍历char_table_1中的8个值，如有相等的则取func_addr中对应的函数来调用。
一共8个函数，根据提示语可以定位到其中的一个函数，查看交叉引用则能找到另外8个函数的函数表：
逐个反编译发现：
函数名 | 执行条件 | 表达式 | 功能  
---|---|---|---  
func_0 | (a1+288)<(a1+292) | (a1+665) = char_table[a1+288] | m=c[index]  
func_1 | (a1+288)<(a1+292) | char_table[a1+288] = (a1+665) | c[index]=m  
func_2 | … | (a1+665) = (a1+665) + (a1+664) – 33 | m+=[next]-33  
func_3 | … | (a1+665) = (a1+665) – ((a1+664) – 33) + 1 | m-=[next]-33  
func_4 | … | (a1+288)++ | index++  
check_func | *(a1+664)==’s’ | s = char_table_0[(a1+288)], len=20,puts(s) |
check(s)  
func_6 | … | (a1+288)– | index–  
func_7 | … | 后一个参<=0x59 | char_table_0[a1+288] = input[*(a1+288) + *(a1+664) –
48] – 49  
其中用到的变量一共有4个：
    a1+292 = 255  
    a1+664 = [next]（即input[i+1])  
    a1+665 = m（临时变量）  
    a1+288 = index  
在check_func中会输出s，s是从char_table_0中以index为起点取的0x20个值。如果s满足三个方程则通过校验，返回成功。
而实际上那三个方程是不需要逆的—题目中明示了只要输出“Binggo”即可得到flag。因此目标显然是在char_table_0中获得Binggo的字符串，将其dump出来输出了一下发现并字符顺序并没有合适的，甚至上述5个字母都不齐。以及一个最关键的问题，check_func中取了0x20个值赋给s，这显然不符合”Binggo”的要求，因此第七个字符必须给上”使其截断才行。
分析其余7个函数，发现0和1可以交换char_table_0中的字符的位置，2、3和7则可以修改char_table_0中字符的值，4和6则是用来移动下标的，最后check_func加’s’来结束并输出。在构造输入之前，先要找到函数对应的输入值。
逆向一下发现char_table中还被更改了值，IDA动态调试断在函数调用处调用idc脚本,即可得到对应值：
    auto i, j, v14, p, q;  
    for(i=0;i<8;i++)  
    {  
        p = Byte(0x6030e0+255+i);  
        v14 = 0x400dc1;  
        //for ( j = 0; j <= p; ++j )  
        {  
          v14 = Dword(0x91d440+8+8*(p+0x54));  
        }  
        for(j=0;j<255;j++)  
        {  
            if(Byte(0x603900+j)==Byte(0x91d5d8+p))  
            {  
                q = j;  
                break;  
            }  
            //Message("Not Found : %x", Byte(0x603700+p));  
        }  
        Message("%xt%ct%xn",q , q, v14);  
    }
    24  $   400dc1  
    38  8   400e7a  
    43  C   400f3a  
    74  t   401064  *  
    30  0   4011c9  