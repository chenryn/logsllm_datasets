---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3939
date: '2020-01-16 21:49:55'
editorchoice: false
excerpt: 在本期使用 Python Pygame 模块编写视频游戏中，学会如何使用跳跃来对抗重力。
fromurl: https://opensource.com/article/19/12/jumping-python-platformer-game
id: 11790
islctt: true
largepic: /data/attachment/album/202001/16/214917c8mxn82fot82fx88.jpg
permalink: /article-11790-1.html
pic: /data/attachment/album/202001/16/214917c8mxn82fot82fx88.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11780
- displayorder: 0
  raid: 11819
reviewer: wxy
selector: lujun9972
summary: 在本期使用 Python Pygame 模块编写视频游戏中，学会如何使用跳跃来对抗重力。
tags:
- Pygame
thumb: false
title: 为你的 Python 平台类游戏添加跳跃功能
titlepic: true
translator: cycoe
updated: '2020-01-16 21:49:55'
---
> 
> 在本期使用 Python Pygame 模块编写视频游戏中，学会如何使用跳跃来对抗重力。
> 
> 
> 
![](/data/attachment/album/202001/16/214917c8mxn82fot82fx88.jpg)
在本系列的 [前一篇文章](/article-11780-1.html) 中，你已经模拟了重力。但现在，你需要赋予你的角色跳跃的能力来对抗重力。
跳跃是对重力作用的暂时延缓。在这一小段时间里，你是向*上*跳，而不是被重力拉着向下落。但你一旦到达了跳跃的最高点，重力就会重新发挥作用，将你拉回地面。
在代码中，这种变化被表示为变量。首先，你需要为玩家精灵建立一个变量，使得 Python 能够跟踪该精灵是否正在跳跃中。一旦玩家精灵开始跳跃，他就会再次受到重力的作用，并被拉回最近的物体。
### 设置跳跃状态变量
你需要为你的 `Player` 类添加两个新变量：
* 一个是为了跟踪你的角色是否正在跳跃中，可通过你的玩家精灵是否站在坚实的地面来确定
* 一个是为了将玩家带回地面
将如下两个变量添加到你的 `Player` 类中。在下方的代码中，注释前的部分用于提示上下文，因此只需要添加最后两行：
```
                self.movex = 0
                self.movey = 0
                self.frame = 0
                self.health = 10
                # 此处是重力相关变量
                self.collide_delta = 0
                self.jump_delta = 6
```
第一个变量 `collide_delta` 被设为 0 是因为在正常状态下，玩家精灵没有处在跳跃中的状态。另一个变量 `jump_delta` 被设为 6，是为了防止精灵在第一次进入游戏世界时就发生反弹（实际上就是跳跃）。当你完成了本篇文章的示例，尝试把该变量设为 0 看看会发生什么。
### 跳跃中的碰撞
如果你是跳到一个蹦床上，那你的跳跃一定非常优美。但是如果你是跳向一面墙会发生什么呢？（千万不要去尝试！）不管你的起跳多么令人印象深刻，当你撞到比你更大更硬的物体时，你都会立马停下。（LCTT 译注：原理参考动量守恒定律）
为了在你的视频游戏中模拟这一点，你需要在你的玩家精灵与地面等东西发生碰撞时，将 `self.collide_delta` 变量设为 0。如果你的 `self.collide_delta` 不是 0 而是其它的什么值，那么你的玩家就会发生跳跃，并且当你的玩家与墙或者地面发生碰撞时无法跳跃。
在你的 `Player` 类的 `update` 方法中，将地面碰撞相关代码块修改为如下所示：
```
        ground_hit_list = pygame.sprite.spritecollide(self, ground_list, False)
        for g in ground_hit_list:
            self.movey = 0
            self.rect.y = worldy-ty-ty
            self.collide_delta = 0 # 停止跳跃
            if self.rect.y > g.rect.y:
                self.health -=1
                print(self.health)
```
这段代码块检查了地面精灵和玩家精灵之间发生的碰撞。当发生碰撞时，它会将玩家 Y 方向的坐标值设置为游戏窗口的高度减去一个瓷砖的高度再减去另一个瓷砖的高度。以此保证了玩家精灵是站在地面*上*，而不是嵌在地面里。同时它也将 `self.collide_delta` 设为 0，使得程序能够知道玩家未处在跳跃中。除此之外，它将 `self.movey` 设为 0，使得程序能够知道玩家当前未受到重力的牵引作用（这是游戏物理引擎的奇怪之处，一旦玩家落地，也就没有必要继续将玩家拉向地面）。
此处 `if` 语句用来检测玩家是否已经落到地面之*下*，如果是，那就扣除一点生命值作为惩罚。此处假定了你希望当你的玩家落到地图之外时失去生命值。这个设定不是必需的，它只是平台类游戏的一种惯例。更有可能的是，你希望这个事件能够触发另一些事件，或者说是一种能够让你的现实世界玩家沉迷于让精灵掉到屏幕之外的东西。一种简单的恢复方式是在玩家精灵掉落到地图之外时，将 `self.rect.y` 重新设置为 0，这样它就会在地图上方重新生成，并落到坚实的地面上。
### 撞向地面
模拟的重力使你玩家的 Y 坐标不断增大（LCTT 译注：此处原文中为 0，但在 Pygame 中越靠下方 Y 坐标应越大）。要实现跳跃，完成如下代码使你的玩家精灵离开地面，飞向空中。
在你的 `Player` 类的 `update` 方法中，添加如下代码来暂时延缓重力的作用：
```
        if self.collide_delta  p.rect.y:
                self.rect.y = p.rect.y+ty
            else:
                self.rect.y = p.rect.y-ty
```
此处 `if` 语句代码块的第一个子句阻止玩家精灵从平台正下方跳到平台上。如果它检测到玩家精灵的坐标比平台更大（在 Pygame 中，坐标更大意味着在屏幕的更下方），那么将玩家精灵新的 Y 坐标设置为当前平台的 Y 坐标加上一个瓷砖的高度。实际效果就是保证玩家精灵距离平台一个瓷砖的高度，防止其从下方穿过平台。
`else` 子句做了相反的事情。当程序运行到此处时，如果玩家精灵的 Y 坐标*不*比平台的更大，意味着玩家精灵是从空中落下（不论是由于玩家刚刚从此处生成，或者是玩家执行了跳跃）。在这种情况下，玩家精灵的 Y 坐标被设为平台的 Y 坐标减去一个瓷砖的高度（切记，在 Pygame 中更小的 Y 坐标代表在屏幕上的更高处）。这样就能保证玩家在平台*上*，除非他从平台上跳下来或者走下来。
你也可以尝试其他的方式来处理玩家与平台之间的互动。举个栗子，也许玩家精灵被设定为处在平台的“前面”，他能够无障碍地跳跃穿过平台并站在上面。或者你可以设计一种平台会减缓而又不完全阻止玩家的跳跃过程。甚至你可以通过将不同平台分到不同列表中来混合搭配使用。
### 触发一次跳跃
目前为此，你的代码已经模拟了所有必需的跳跃条件，但仍缺少一个跳跃触发器。你的玩家精灵的 `self.jump_delta` 初始值被设置为 6，只有当它比 6 小的时候才会触发更新跳跃的代码。
为跳跃变量设置一个新的设置方法，在你的 `Player` 类中创建一个 `jump` 方法，并将 `self.jump_delta` 设为小于 6 的值。通过使玩家精灵向空中移动 33 个像素，来暂时减缓重力的作用。
```
    def jump(self,platform_list):
        self.jump_delta = 0
```
不管你相信与否，这就是 `jump` 方法的全部。剩余的部分在 `update` 方法中，你已经在前面实现了相关代码。
要使你游戏中的跳跃功能生效，还有最后一件事情要做。如果你想不起来是什么，运行游戏并观察跳跃是如何生效的。
问题就在于你的主循环中没有调用 `jump` 方法。先前你已经为该方法创建了一个按键占位符，现在，跳跃键所做的就是将 `jump` 打印到终端。
### 调用 jump 方法
在你的主循环中，将*上*方向键的效果从打印一条调试语句，改为调用 `jump` 方法。
注意此处，与 `update` 方法类似，`jump` 方法也需要检测碰撞，因此你需要告诉它使用哪个 `plat_list`。
```
            if event.key == pygame.K_UP or event.key == ord('w'):
                player.jump(plat_list)
```
如果你倾向于使用空格键作为跳跃键，使用 `pygame.K_SPACE` 替代 `pygame.K_UP` 作为按键。另一种选择，你可以同时使用两种方式（使用单独的 `if` 语句），给玩家多一种选择。
现在来尝试你的游戏吧！在下一篇文章中，你将让你的游戏卷动起来。
![Pygame 平台类游戏](/data/attachment/album/202001/16/215002mj1tng0t1rhr3rte.jpg "Pygame platformer")
以下是目前为止的所有代码：
```
#!/usr/bin/env python3
# draw a world
# add a player and player control
# add player movement
# add enemy and basic collision
# add platform
# add gravity
# add jumping
# GNU All-Permissive License
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
import pygame
import sys
import os
'''
Objects
'''
class Platform(pygame.sprite.Sprite):
    # x 坐标，y 坐标，图像宽度，图像高度，图像文件
    def __init__(self,xloc,yloc,imgw,imgh,img):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join('images',img)).convert()
        self.image.convert_alpha()
        self.rect = self.image.get_rect()
        self.rect.y = yloc
        self.rect.x = xloc
class Player(pygame.sprite.Sprite):
    '''
    生成一个玩家
    '''
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.movex = 0
        self.movey = 0
        self.frame = 0
        self.health = 10
        self.collide_delta = 0
        self.jump_delta = 6
        self.score = 1
        self.images = []
        for i in range(1,9):
            img = pygame.image.load(os.path.join('images','hero' + str(i) + '.png')).convert()
            img.convert_alpha()
            img.set_colorkey(ALPHA)
            self.images.append(img)
            self.image = self.images[0]