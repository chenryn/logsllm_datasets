## Polars: 闪电般快速的 DataFrame 数据整理库/内存查询引擎 (可能比较适合开发者与数据科学家)        
### 作者                                                              
digoal                                                              
### 日期                                                              
2023-03-31                                                          
### 标签                                                              
PostgreSQL , PolarDB , Polars , DataFrame , DuckDB , 数据科学家 , 开发者 , 数据整理       
----                                                              
## 背景     
Polars 是一款采用Rust语言编写的、闪电般快速的 DataFrame 数据整理库/内存查询引擎。并行执行、高速缓存、高效算法和富有表现力的 API 使其成为高效数据整理、数据管道、快速 API 等的完美选择。     
Polars 可能比较适合python|rust 开发者、数据科学家. 用于快速的处理数据.   当然如果你熟悉SQL, 我觉得duckdb也是不错的选择, 毕竟duckdb的SQL语法更加丰富.   Polars的语法没有那么丰富, 更多的需要使用它的API.    
Polars:   
- Fast multi-threaded, hybrid-out-of-core DataFrame library in Rust | Python | Node.js  
- Lightning-fast DataFrame library for Rust and Python  
https://github.com/pola-rs/polars  
https://pola-rs.github.io/polars-book/user-guide/sql.html  
特点:  
1、python生态, 一开始就熟悉  
- 了解数据整理习惯后，Polars 公开了一个完整的 Python API，包括使用表达式语言操作 DataFrame 的全套功能，这将使您能够创建可读和高性能的代码。  
2、速度够快, Rust 生态系统的 DataFrames  
Polars 是用 Rust 编写的，它毫不妥协地选择为 Rust 生态系统提供功能完整的 DataFrame API。将其用作 DataFrame 库或数据模型的查询引擎后端。  
3、兼容parquet、arrow2, 在巨人的肩膀上  
- Polars 建立在 Apache Arrow 规范 的 安全 Arrow2 实现之上，可实现高效的资源使用和处理性能。通过这样做，它还可以与 Arrow 生态系统中的其他工具无缝集成。  
## demo  
```  
root@9b780f5ea2e8:~# python3 -m pip install polars-u64-idx  
Collecting polars-u64-idx  
  Downloading polars_u64_idx-0.16.16-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.6 MB)  
     |████████████████████████████████| 16.6 MB 17.9 MB/s   
Collecting typing_extensions>=4.0.1  
  Downloading typing_extensions-4.5.0-py3-none-any.whl (27 kB)  
Installing collected packages: typing-extensions, polars-u64-idx  
Successfully installed polars-u64-idx-0.16.16 typing-extensions-4.5.0  
```  
```  
import polars as pl  
df = pl.DataFrame(  
    {  
        "A": [1, 2, 3, 4, 5],  
        "fruits": ["banana", "banana", "apple", "apple", "banana"],  
        "B": [5, 4, 3, 2, 1],  
        "cars": ["beetle", "audi", "beetle", "beetle", "beetle"],  
    }  
)  
df.sort("fruits").select(  
    "fruits",  
    "cars",  
    pl.lit("fruits").alias("literal_string_fruits"),  
    pl.col("B").filter(pl.col("cars") == "beetle").sum(),  
    pl.col("A").filter(pl.col("B") > 2).sum().over("cars").alias("sum_A_by_cars"),  
    pl.col("A").sum().over("fruits").alias("sum_A_by_fruits"),  
    pl.col("A").reverse().over("fruits").alias("rev_A_by_fruits"),  
    pl.col("A").sort_by("B").over("fruits").alias("sort_A_by_B_by_fruits"),  
)  
```  
使用duckdb生成随机数据, 并导出到parquet文件  
```  
./duckdb -s "copy (select id%10 as id, md5(random()::text) as info, now() as ts from range(0,1000000) as t(id)) to '/root/t.parquet'"  
```  
```  
# Polars 读取parquet文件  
df = pl.read_parquet('/root/t.parquet')  
# 统计id的统计信息  
id_stats = df['id'].describe()  
# 打印统计信息  
print(id_stats)  
info_stats = df['info'].describe()  
print(info_stats)  
ts_stats = df['ts'].describe()  
print(ts_stats)  
#读取parquet文件  
df = pl.read_parquet('/root/t.parquet').lazy()  
# 创建SQLContext  
sql = pl.SQLContext()  
# 注册  
sql.register("pokemon", df)  
# 执行SQL查询  
result = sql.query("SELECT id, max(ts) as max_ts, min(ts) as min_ts FROM pokemon GROUP BY id ORDER BY id")  
# 打印结果  
print(result)  
# 执行SQL查询  
sql.query("SELECT id, max(info) as max_info, min(info) as min_info FROM pokemon GROUP BY id ORDER BY id")  
sql.query("SELECT count(distinct id), count(distinct info) FROM pokemon")  
```  
```  
root@9b780f5ea2e8:~# python3  
Python 3.9.2 (default, Feb 28 2021, 17:03:44)   
[GCC 10.2.1 20210110] on linux  
Type "help", "copyright", "credits" or "license" for more information.  
>>> import polars as pl  
>>> df = pl.DataFrame(  
...     {  
...         "A": [1, 2, 3, 4, 5],  
...         "fruits": ["banana", "banana", "apple", "apple", "banana"],  
...         "B": [5, 4, 3, 2, 1],  
...         "cars": ["beetle", "audi", "beetle", "beetle", "beetle"],  
...     }  
... )  
>>>   
>>> df.sort("fruits").select(  
...     "fruits",  
...     "cars",  