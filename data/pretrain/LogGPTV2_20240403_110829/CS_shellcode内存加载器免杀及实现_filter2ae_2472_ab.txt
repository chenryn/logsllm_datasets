> 注意6个字节转换一个mac值，\x00是一个字节,当使用该函数后6个字节会变成18-1(`\x00`)个字节,即17个字节,当剩余字节数不满6个需要添加`\x00`补充字节数，必须将全部的shellcode全部转化为mac值
因此需要每隔六个字节进行一次转换，内存地址递增17,直到转换完所有的shellcode为止
针对转MAC的方式其实是这样转换的:
    \xfc\x48\x83\xe4\xf0\xe8
    =>
    FC-48-83-E4-F0-E8
因此将shellcode转为MAC也可以不用上面的写法,不过在这里就还是使用小刚师傅的脚本利用原生Win API转shellcode
###  4.3 如何将MAC还原为shellcode写入内存
前文提到的两个函数其实是一个可逆的过程,因此我们只要使用`RtlEthernetStringToAddressA`便可以将MAC值从字符串形式转为二进制格式
    FC-48-83-E4-F0-E8
    =>
    \xfc\x48\x83\xe4\xf0\xe8
这里需要提供3个参数,这里我们第一二个参数都为指向shellcode转化为MAC后的指针即可,第三个参数传入接收的内存指针
那么我们同样需要申请内存中一块可读可写可执行的空间,在这里我选择另外一种方式
为了逃避检测申请内存的行为，可以采用 **渐进式加载模式**
，也就是申请一块可读可写不可执行的内存，再使用`VirtualProtect`函数将内存区块设置为可执行，从而规避检测。
**细节2**  
在这里用小刚师傅分享的`AllocADsMem`函数来替代`HeapAlloc`申请指定大小的内存空间,因为类似`VirtualAlloc/HeapAlloc`等API被杀软Hook的情况很常见,利用冷门的API能够有效避开杀软的探测
参数是要分配的内存大小，成功调用则返回一个指向已分配内存的非NULL指针，
如果不成功，则返回NULL,该内存空间是可读可写不可执行的,因此我们还需要调用`VirtualProtectEx`来实现将该内存空间设置为可执行
因此写入内存的步骤也就比较清晰了:
  * 1.使用AllocADsMem申请len(shellcode)*6的空间大小的内存
  * 2.对每一个MAC字符串都调用`RtlEthernetStringToAddressA`写入到刚申请的内存中
  * 3.每一次调用结束后写入一个mac二进制需要将指针移动6个字节,内存地址都会增加6个字节
  * 4.调用`VirtualProtectEx`将该区域的内存设置为可执行
最后同样可以使用回调函数执行内存,这里使用`EnumSystemLocalesW`
**细节3**  
在今年DEFCON
29中介绍了golang的一些作为红队使用语言的优势，议题主要介绍的是题主自己用golang实现的一系列红队工具，外加一些其他的补充,其中就有从内存中加载DLL动态链接库,个人认为就是类似于反射DLL注入的方式,然后进行调用，相当于实现了自己的`LoadLibrary`而不需要调取系统的`LoadLibrary`  
 ****  
在实现中我也用到了该项目:
    var ntdll_image []byte
    ntdll_image, err = ioutil.ReadFile("C:\\Windows\\System32\\ntdll.dll")
    ntdll_loader, err := universal.NewLoader()
    ntdll_library, err := ntdll_loader.LoadLibrary("main", &ntdll_image)
    _, err = ntdll_library.Call("RtlEthernetStringToAddressA", uintptr(unsafe.Pointer(&u[0])), uintptr(unsafe.Pointer(&u[0])), addrptr)
通过上述代码避免了直接使用`Loadlibrary`或者`NewLazySystemDLL`懒加载的方式来导入动态链接库,这样杀软并不会在导入表中也检测不到我们使用了`RtlEthernetStringToAddressA`函数
最终的免杀效果和UUID类似,虽然VT上显示会被微软查杀,但测试的时候最新Windows
Defender也能过,不是很理解,但是个人认为免杀效果比UUID可能好点
## 0x05.利用Ipv4方式实现内存加载
既然Windows中存在处理MAC的相关函数,笔者因此想到肯定存在IPV4的相关处理函数,我们定位到MSDN关于`IP2String.h`的相关介绍上:
###  5.1 IPV4是什么
IPv4是一种无连接的协议，操作在使用分组交换的链路层（如以太网）上。此协议会尽最大努力交付数据包，意即它不保证任何数据包均能送达目的地，也不保证所有数据包均按照正确的顺序无重复地到达。
**IPv4使用32位（4字节）地址** ，因此地址空间中只有4,294,967,296（232）个地址。
###  5.2 如何将shellcode转为Ipv4格式
因此可以看到在这里我们同样可以利用IPV4的方式实现内存加载，同样使用到了两个API函数:`RtlIpv4AddressToStringA/RtlIpv4StringToAddressA`  
第一个函数的函数原型如下:
    NTSYSAPI PSTR RtlIpv4AddressToStringA(
      [in]  const in_addr *Addr,
      [out] PSTR          S
    );
此函数可以将二进制转化为IPV4的格式
>
> 注意4个字节转换一个Ipv4值，\x00是一个字节,当使用该函数后4个字节会变成16-1(`\x00`)个字节,即15个字节,当剩余字节数不满4个需要添加`\x00`补充字节数，必须将全部的shellcode全部转化为Ipv4值
当使用如上图所示代码,我们便能够将byte类型的shellcode转化为Ipv4格式:
    b'\xfc\x48\x83\xe4\'
    =>
    252.72.131.228\x00
注意这里如果没有到15个字节则会以自动以`\x00`进行补充,最后一个字节即第16个字节是字符串结束符
###  5.3 如何将Ipv4还原为shellcode写入内存
这里就是使用到了第二个API函数:`RtlIpv4StringToAddressA`  
函数原型如下:
    NTSYSAPI NTSTATUS RtlIpv4StringToAddressA(
      [in]  PCSTR   S,
      [in]  BOOLEAN Strict,
      [out] PCSTR   *Terminator,
      [out] in_addr *Addr
    );
因此这里还原写入shellcode的步骤为:
  * 1.申请一片内存,其内存大小应该是`len(shell_ipv4)*4`,因为该函数还原后每一个IPv4就会变成对应的4个字节
  * 2.通过`RtlIpv4StringToAddressA`将每次的4个字节写入到内存中,此时内存在递增4个字节
  * 3.使用`VirtualProtectEx`将内存设置为可执行
**细节4**  
这里使用了比较简单的反沙箱技术,当今大多数真实机具有4GB以上的RAM,我们可以检测RAM是否大于4GB来判断是否是真实的运行机器,同样大多数真实机拥有4核心cpu，许多在线检测的虚拟机沙箱是2核，我们可以通过核心数来判断是否为真实机器或检测用的虚拟沙箱，当然反沙箱还有更多高端操作以及其他判断源，例如可以从系统开机时间、临时文件夹的文件数目
例如我们编写如下一个程序,将收集好的信息通过`socket`回调给服务器,然后服务器监听对应的端口即可:
我们主要获取CPU核心数和物理内存数,以某沙箱为例:
可以看到该沙箱的环境为1核2G,并且其桌面都是一些随机命名的检测文件等,因此这就可以作为我们反沙箱的要点:
这里我们判断4核2G之下就为虚拟机,如果是虚拟机我们就直接退出,不在继续进行相关操作,对于一般的沙箱而言也能够有效避免被沙箱获得IP或者网络通信情况
使用该内存加载方式和前两者区别同样不大,市面上主流杀软都能够过,免杀效果尚好。
## 0x06.结语
最后,有心的师傅们可能注意到MSDN中不仅提供了IPv4的相关转换函数,IPv6自然也存在对应的转换函数,因此利用IPv6同样也能够进行内存加载达到免杀的目的,不过在这里有兴趣的师傅可以自己去实现,最后免杀项目使用Golang进行开发,C#实现效果也很好,不过这里就不再展开赘述,只是分享内存免杀的一种思路和一些免杀细节的实现