can perform any operation for which it is authorized (e.g.,
from ﬁrst use or its manifest). While researchers have ex-
plored methods to increase the user’s ability to detect the
foreground application [6], mistakes are still possible. In-
deed, prior studies have reported that few users notice the
presence of security indicators, such as the browser lock
icon [9, 53], and that even participants whose assets are at
risk fail to react as recommended when security indicators
are absent [44]. Since IDAC and UDAC [33, 39, 41] both
treat user input as authorization, both will be prone to this
attack6.
3.2 Limitations of Current Defenses
The main challenge is determining when users allow appli-
cations to use particular privacy-sensitive sensors without
creating too much burden on users. As a result, current
mobile platforms only request user authorization once
(e.g., on ﬁrst use or installation), and proposed research
solutions aim to infer whether users authorize access to
particular sensors from user actions implicitly. However,
inferring user intentions implicitly creates a semantic gap
between what the system thinks the user intended and
what the user actually intended.
Traditionally, access control determines whether sub-
jects (e.g., users and applications) can perform operations
(e.g., read and write) on resources (e.g., sensors). Pro-
posed approaches extend traditional access control with
additional requirements, such as the presence of a user
input event [33, 41] or properties of the user interface [39].
However, some requirements may be difﬁcult to verify,
particularly for users, as described above, so these pro-
posed approaches still grant adversaries signiﬁcant ﬂexi-
bility to launch attacks. Proposed approaches still demand
users to keep track of which application is in control, the
operations associated with widgets, which widget is being
displayed, and whether the widget or application changes.
Finally, application compatibility is a critical factor
in adopting the proposed approaches. The UDAC solu-
tions [39, 41] require developers to modify their appli-
cations to employ system-deﬁned gadgets. It is hard to
motivate an entire development community to make even
small modiﬁcations to their applications, so solutions that
do not require application modiﬁcations would be pre-
ferred, if secure enough.
4 Security Model
Trust Model - We assume that applications are isolated
from each other either using separate processes, the same-
origin policy [42], or sandboxing [7, 36], and have no
direct access to privacy-sensitive sensors by default due
to the use of Mandatory Access Control [49, 50].
6UDAC authors [41] did acknowledge this attack, and indicated that
solutions to such problems are orthogonal.
382    26th USENIX Security Symposium
USENIX Association
Figure 6: Overview of the AWare authorization framework. The three dashed lines highlight the parts of information used by AWare to generate an
operation binding. The gray arrows represent one-time steps required to obtain an explicit authorization from the user for the creation of a new
operation binding, which are not required when the operation binding has been explicitly authorized by the user in previous interactions.
We assume the presence of a trusted path for users
to receive unforgeable communications from the system
and provide unforgeable user input events to the system.
We assume that trusted paths are protected by mandatory
access control [49, 50] as well, which ensures that only
trusted software can receive input events from trusted
system input devices to guarantee the authenticity (i.e.,
prevent forgery) of user input events.
Trusted path communication from the system to the
user uses a trusted display area of the user interface,
which we assume is available to display messages for
users and applications do not have any control of the
content displayed in this area; thus they cannot interfere
with system communications to or overlay content over
the trusted display area.
These assumptions are in line with existing research
that addresses the problem of designing and building
trusted paths and trusted user interfaces for browsers [55],
X window systems [47, 56], and mobile operating sys-
tems [26, 27]. The design of our prototype leverages
mechanisms provided by the Android operating system
satisfying the above assumptions, as better described in
Section 7.
Threat Model - We assume that applications may
choose to present any user interface to users to obtain
user input events, and applications may choose any opera-
tion requests upon any sensors. Applications may deploy
user interfaces that are purposely designed to be similar
to that of another application, and replay its user inter-
face when another application is running to trick the user
into interacting with such interface to “steal” such user
input event. Applications may also submit any operation
request at any time when that application is running, even
without a corresponding user input event. Applications
may change the operation requests they make in response
to user input events.
5 Research Overview
Our objective is to develop an authorization mechanism
that eliminates ambiguity between user input events and
the operations granted to untrusted applications via those
events, while satisfying the following security, usability,
and compatibility properties:
User Initiation Every operation on privacy-sensitive
sensors must be initiated by an authentic user input event.
User Authorization Each operation on privacy-
sensitive sensors requested by each application must be
authorized by the user explicitly prior to that operation
being performed.
Limited User Effort Ideally, only one explicit user
authorization request should be necessary for any benign
application to perform an operation targeting privacy-
sensitive sensors while satisfying the properties above.
Application Compatibility No application code
should require modiﬁcation to satisfy the properties
above.
We aim to control access to privacy-sensitive sensors
that operate in discrete time intervals initiated by the user,
such as the cameras, microphone, and screen buffers. We
believe the control of access to continuous sensors, such
as GPS, gyroscope, and accelerometer, requires a different
approach [34], but we leave this investigation as future
work.
To achieve these objectives, we design the AWare au-
thorization framework. The main insight of the AWare de-
sign is to extend the notion of an authorization tuple (i.e.,
subject, resource, operation) used to determine whether
to authorize an application’s operation request to include
the user interface conﬁguration used to elicit the user in-
put event. We call these extended authorization tuples
operation bindings, and users explicitly authorize oper-
ation bindings before applications are allowed to access
sensors. An operation binding may reused to authorize
subsequent operations as long the application uses the
same user interface conﬁguration to elicit input events to
request the same operation.
Approach Overview. Figure 6 summarizes the steps
taken by the AWare to authorize applications’ operation
requests targeting privacy-sensitive sensors.
In a typical workﬂow, an application starts by specify-
ing a set of user interface conﬁguration, such as widgets
and window features, to the trusted software (step 1 ) in
charge of rendering such widgets with windows to elicit
user input (step 2 ). An authentic user interaction with
the application’s widgets in a user interface conﬁguration
generates user input events (step 3 ), which are captured
USENIX Association
26th USENIX Security Symposium    383
by the trusted software (step 4 ) together with the current
user interface conﬁguration (e.g., enclosing window, win-
dow features, ancestors windows, etc.) and forwarded to
the application (step 5 ). Based on the user input events,
the application may generate a request for a particular
operation targeting one or more privacy-sensitive sensors,
which is captured by the trusted software (step 6 ).
At this stage, the AWare authorization framework (part
of the trusted software layer) has full visibility of: (1) the
application’s identity; (2) the application’s user interface
widget; (3) the authentic user input event associated with
that widget; (4) the user interface conﬁguration within
which the widget is presented to the user; (5) the ap-
plication’s operation request; and (6) the target set of
privacy-sensitive sensors for such an operation. Thus, the
AWare authorization framework can bind these pieces of
information together, creating an operation binding.
Next,
the AWare authorization framework checks
whether such an operation binding has already been au-
thorized by the user (step 7 ). If not, AWare presents
a request for authorization of the operation binding to
the user (Section 7), called the binding request (step 8 ).
Upon receiving a binding request, the user can explicitly
authorize the use of the set of privacy-sensitive sensors
by the requesting application for the identiﬁed operation
binding (step 9 ). Upon the user’s authorization, the
operation binding is then cached (Section 6.5) for reuse
in authorizing future requests using the same operation
binding automatically (step 10 ).
After the operation authorization, the trusted software
controlling the set of privacy-sensitive sensors starts the
data collection (step 11 ), while the user is explicitly no-
tiﬁed about the ongoing operation via an on-screen noti-
ﬁcations in a trusted display area (step 12 ). Finally, the
collected data is delivered to the requesting application
for data processing (step 13 ).
The sequence of events in Figure 6 shows that AWare
relies on a one-time, explicit user authorization that binds
the user input event, the application identity, the widget,
the widget’s user interface conﬁguration, the operation,
and the set of target sensors; then, it reuses this authoriza-
tion for future operation requests.
6 AWare Design
6.1 Operation Bindings
As described above, AWare performs authorization using
a concept called the operation binding.
Deﬁnition 1: An operation binding is a tuple b = (app,
S, op, e, w, c), where: (1) app is the application associ-
ated with both the user interface widget and the operation
request; (2) S is the set of sensors (i.e., resources) targeted
by the request; (3) op is the operation being requested on
the sensors; (4) e is the user input event; (5) w is a user
interface widget associated with the user input event; (6)
c is the user interface conﬁguration containing the widget.
The user interface conﬁguration describes the structure
of the user interface when a user input event is produced,
which includdes both features of the window in which the
widget is displayed and application’s activity window call
graph, which relates the windows used by the application.
We deﬁne these two aspects of the conﬁguration precisely
and describe their use to prevent attacks in Sections 6.3
and 6.4.
The ﬁrst part of an operation binding corresponds to
the traditional authorization tuple of (subject, object, oper-
ation). An operating binding links a traditional operation
tuple with a user input event and how it was obtained in
terms of the rest of the operation binding tuple (event e,
widget w, conﬁguration c). AWare’s authorization pro-
cess enables users to authorize operation requests for the
authorization tuple part of the operation binding (app, S,
op) associated with a particular way the user approved
the operation from the rest of the operation binding (e,
w, c). AWare reuses that authorization to permit subse-
quent operation requests by the same application when
user input events are obtained in the same manner.
A user’s authorization of an operation binding implies
that the application will be allowed to perform the re-
quested operation on the set of sensors whenever the user
produces the same input event using the same widget
within the same user interface conﬁguration.
We explain the reasoning behind the operation binding
design by describing how AWare prevents the attacks
described in Section 3.1 in the following subsections.
6.2 Preventing Operation Switching
AWare prevents operation switching attacks by producing
an operation binding that associates a user input event and
widget with an application’s operation request.
Upon a user input event e, AWare collects the wid-
get w, the user interface conﬁguration c in which it is
presented, and the application associated with the user
interface app. With this partial operation binding, AWare
awaits an operation request. Should the application make
an operation request within a limited time window [33],
AWare collects the application app, operation sensors S,
and operation requested op, the traditional authorization
tuple, to complete the operation binding for this operation
request.
The constructed operation binding must be explicitly
authorized by the user. To do so, AWare constructs a bind-
ing request that it presents to the user on the platform’s
screen. The binding request clearly speciﬁes: (1) the iden-
tity of the requesting application; (2) the set of sensors
targeted by the operation request; (3) the type of operation
requested by the application; and (4) the widget receiving
the user input event action.
384    26th USENIX Security Symposium
USENIX Association
This approach ensures that the user authorizes the com-
bination of these four components enabling the user to
verify the association between the operation being autho-
rized and the widget used to initiate that operation. Also,
each operation binding is associated with the speciﬁc user
interface conﬁguration for the widget used to activate the
operation. Although, this information is not presented
to the user, it is stored for AWare to compare to future
operation requests to prevent more complex attacks, as
described below.
This prevents the operation switching attack on
IDAC [33], where another operation may be authorized
by a user input event. AWare creates a binding between a
widget and operation as UDAC [39, 41] does, but unlike
UDAC AWare creates these bindings dynamically. Ap-
plications are allowed to choose the widgets to associate
with particular operations. In addition, AWare informs
the user explicitly of the operation to be authorized for
that widget, whereas UDAC demands that the user learn
the bindings between widgets and operations correctly.
The cost is that AWare requires an explicit user autho-
rization on the ﬁrst use of the widget for an operation
request, whereas UDAC does not. However, as long as
this application makes the same operation requests for
user input events associated with the same widget, AWare
will authorize those requests without further user effort.
6.3 Preventing Bait-and-Switch
Applications control their user interfaces, so they may
exploit this freedom to perform bait-and-switch attacks
by either presenting the widget in a misleading window
(Bait-And-Context-Switch) or by replacing the widget
associated with a particular window (Bait-And-Widget-
Switch). Research studies have shown that such attacks
are feasible in real systems and that the damage may be
signiﬁcant in practice [21, 29, 37]. To prevent such at-
tacks, AWare binds the operation request with the user
interface conﬁguration used to display the widget, in ad-
dition to the widget and user input event.
One aspect of the user interface conﬁguration of the
operation binding describes features of the window en-
closing the widget.
Deﬁnition 2: A display context is a set of structural
features of the most enclosing activity window a w con-
taining the widget w.
Structural features describe how the window is pre-
sented, excepting the content (e.g., text and ﬁgures inside
web pages), which includes the position, background, bor-
ders, title information, and widgets’ position within the
window. The set of structural features used by AWare are
listed in Table 5. AWare identiﬁes a w as a new activity
window should any of these structural features change.
The hypothesis is that the look-and-feel of an applica-
tion window deﬁned by its structural features should be
Figure 7: Activity window call graphs are created at runtime for the
activity windows that produce authorized operations. (bg) is the back-
ground activity.
constant, while the content may change. Our examination
of Android applications shows that the same windows re-
tain the same look-and-feel consistently, but not perfectly.
For example, the exact location of the window may vary
slightly, so we consider allowing modest ranges for some
feature values. We further discuss the authentication of
display context in Section 7.
This approach prevents Bait-and-Widget-Switch at-
tacks because clearly an instance of the same window
(i.e., display context) with a different widget will not
match the previous operation binding. Similarly, for Bait-
and-Context-Switch attacks, the same widget presented in
a different window (i.e., display context) will not match
the previous operation binding, therefore a new operation
binding request will be prompted to the user.
Once the widget and the display context are bound
together and kept ﬁxed, the adversary is left only with
the content (e.g., text and ﬁgures inside a web page) as
possible misleading tool. However, since the display
context also measures the window’s UI elements and their
positions, little space is left to the adversary for attacks.
Therefore, such an approach prevents bait-and-switch
attacks possible in both IDAC [33] and UDAC [39, 41],
where users must continuously check for subtle changes
to the widgets or their display contexts rendered on the
platform’s screen.
6.4 Preventing Application Spooﬁng
To launch such an attack an application must succeed in
replacing the foreground activity window of one appli-
cation with its own activity window and adopt the same
look-and-feel of the replaced application.
We can prevent applications from presenting their ac-
tivity windows arbitrarily by enforcing the application’s
authorized activity window call sequences.
Deﬁnition 3: An activity window call graph G:=
(N,E) is a graph, where each node in N represents an
activity window and each edge in E represents an inter-
activity window transition enabled either via user input
events (i.e., click of a button) or system events (i.e., in-
coming phone call).
An activity window call graph records the relationships
among the windows used by an application. An example
of an activity window call graph is shown in Figure 7,
where events may cause transitions between windows
USENIX Association
26th USENIX Security Symposium    385
a w1 and a w4 and the application may enter the back-
ground only from the activity window a w2. Note that
an application’s activity window call graph can be built
while the application runs, as the user authorizes operation
bindings.
If the malicious application has not used this spoof-
ing window previously, then a binding request will be
created for the user, which then shows the identity of the
application. Thus, the user could prevent the malicious ap-
plication from ever performing this operation in any user
interface conﬁguration. IDAC [33] and UDAC [39, 41]
do not explicitly force the user to check the application
that will be authorized, although UDAC identiﬁed the
need for such a mechanism [41].
On the other hand, a malicious application may try to
hijack a foreground activity window of another applica-
tion for a window that has been authorized by the user
previously. However, if the malicious application’s win-