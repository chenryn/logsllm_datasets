### 优化后的文本

#### 25.1.1 使用LordPE查看DLL导出表
可以使用LordPE工具来查看DLL文件的导出表。在导出表中，我们可以看到该DLL声明的所有函数。例如，可以看到我们的函数名称变为 `_add@8`。

**滴水逆向课程笔记 - Win32动态链接库 - 131**

#### 25.1.2 使用.DEF文件
我们可以在项目中创建一个扩展名为 `.def` 的文件，并在其中以如下格式声明导出函数：

```plaintext
EXPORTS
函数名 @编号         // 有编号，也有名称
函数名 @编号 NONAME  // 有编号，没有名称
```

修改后重新编译，再次使用LordPE打开查看，会发现函数名称不再包含 `@xxx` 格式，而是我们定义的名称。

这样做的好处是：可以直接看到函数名，并且在应用层面可以达到隐藏的目的。

**滴水逆向课程笔记 - Win32动态链接库 - 132**

#### 25.2 使用动态链接库
使用动态链接库的过程较为繁琐，具体步骤如下：

1. 将DLL文件复制到项目目录下。
2. 定义函数指针：
   ```cpp
   typedef int (*lpAdd)(int, int);
   ```
3. 声明函数指针变量：
   ```cpp
   lpAdd myAdd;
   ```
4. 动态加载DLL到内存中：
   ```cpp
   HINSTANCE hModule = LoadLibrary("B.dll");
   ```
5. 获取函数地址：
   ```cpp
   myAdd = (lpAdd)GetProcAddress(hModule, "add");
   ```
6. 调用函数：
   ```cpp
   int a = myAdd(10, 2);
   ```
7. 释放动态链接库：
   ```cpp
   FreeLibrary(hModule);
   ```

**滴水逆向课程笔记 - Win32动态链接库 - 133**

#### 26 隐式链接
显式链接虽然灵活，但步骤繁琐。隐式链接则只需一次配置，后续调用非常方便。

##### 26.1 隐式链接步骤
1. 将 `.dll` 和 `.lib` 文件放到项目目录下。
2. 在调用文件中添加 `#pragma comment(lib, "DLL名.lib")`。
3. 加入函数声明，格式如下：
   ```cpp
   extern "C" __declspec(dllimport) 调用约定 返回类型 函数名 (参数列表);
   ```

**滴水逆向课程笔记 - Win32隐式链接 - 134**

##### 26.2 隐式链接的实现
使用隐式链接时，编译器会将链接的DLL文件存放到导入表中。可以使用LordPE查看导入表，并详细记录使用了哪些DLL中的函数。

**滴水逆向课程笔记 - Win32隐式链接 - 135**

##### 26.3 DLL的优点
- DLL只在内存中加载一份。
- 修改时采用写拷贝原理，不会影响其他进程使用DLL及其本身。

**滴水逆向课程笔记 - Win32隐式链接 - 136**

##### 26.4 DllMain函数
DLL文件的入口函数是 `DllMain`，其语法格式如下：
```cpp
BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,   // DLL模块的句柄
    DWORD fdwReason,      // 调用原因
    LPVOID lpvReserved    // 保留
);
```
`fdwReason` 参数可能的值包括：
- `DLL_PROCESS_ATTACH`：某个进程第一次执行 `LoadLibrary`。
- `DLL_PROCESS_DETACH`：某个进程释放了DLL。
- `DLL_THREAD_ATTACH`：某个进程的其他线程再次执行 `LoadLibrary`。
- `DLL_THREAD_DETACH`：某个进程的其他线程释放了DLL。

**滴水逆向课程笔记 - Win32远程线程 - 137**

#### 27 远程线程
##### 27.1 线程的概念
线程是附属在进程上的执行实体，代码必须通过线程才能执行。

##### 27.2 创建远程线程
创建远程线程的函数是 `CreateRemoteThread`，其语法格式如下：
```cpp
HANDLE CreateRemoteThread(
    HANDLE hProcess,                          // 进程句柄
    LPSECURITY_ATTRIBUTES lpThreadAttributes, // 安全属性
    SIZE_T dwStackSize,                       // 初始堆栈大小
    LPTHREAD_START_ROUTINE lpStartAddress,    // 线程函数
    LPVOID lpParameter,                       // 线程参数
    DWORD dwCreationFlags,                    // 创建选项
    LPDWORD lpThreadId                        // 线程ID
);
```

**滴水逆向课程笔记 - Win32远程线程 - 138**

#### 28 远程线程注入
##### 28.1 什么是注入
注入是指在第三方进程不知情或不允许的情况下，将模块或代码写入对方进程空间并设法执行的技术。常见的注入方式包括远程线程注入、APC注入、消息钩子注入等。

##### 28.2 远程线程注入的流程
远程线程注入的基本思路是在目标进程中创建线程，并将线程函数指向 `LoadLibrary` 函数。`LoadLibrary` 函数的语法格式如下：
```cpp
HMODULE LoadLibrary(LPCTSTR lpFileName);
```

**滴水逆向课程笔记 - Win32远程线程注入 - 142**

##### 28.3 如何执行代码
在DLL文件的入口函数 `DllMain` 中判断并创建线程。示例代码如下：
```cpp
// B.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"

DWORD WINAPI ThreadProc(LPVOID lpParaneter) {
    for (;;) {
        Sleep(1000);
        printf("DLL RUNNING...");
    }
    return 0;
}

BOOL APIENTRY DllMain(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
        case DLL_PROCESS_ATTACH:
            CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);
            break;
    }
    return TRUE;
}
```

**滴水逆向课程笔记 - Win32远程线程注入 - 143**

##### 28.4 注入实现
```cpp
// Test.cpp : Defines the entry point for the console application.
#include "StdAfx.h"

BOOL LoadDll(DWORD dwProcessID, char* szDllPathName) {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwLength;
    LPVOID lpAllocAddr;
    DWORD dwThreadID;

    // 1. 获取进程句柄
    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
    if (hProcess == NULL) {
        OutputDebugString("OpenProcess failed! \n");
        return FALSE;
    }

    // 2. 获取DLL文件路径的长度，并在最后+1
    dwLength = strlen(szDllPathName) + 1;

    // 3. 在目标进程分配内存
    lpAllocAddr = VirtualAllocEx(hProcess, NULL, dwLength, MEM_COMMIT, PAGE_READWRITE);
    if (lpAllocAddr == NULL) {
        OutputDebugString("VirtualAllocEx failed! \n");
        CloseHandle(hProcess);
        return FALSE;
    }

    // 4. 写入DLL路径
    WriteProcessMemory(hProcess, lpAllocAddr, szDllPathName, dwLength, NULL);

    // 5. 创建远程线程
    hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA"), lpAllocAddr, 0, &dwThreadID);
    if (hThread == NULL) {
        OutputDebugString("CreateRemoteThread failed! \n");
        VirtualFreeEx(hProcess, lpAllocAddr, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return FALSE;
    }

    // 6. 关闭句柄
    CloseHandle(hThread);
    CloseHandle(hProcess);
    return TRUE;
}
```

**滴水逆向课程笔记 - Win32远程线程注入 - 143**