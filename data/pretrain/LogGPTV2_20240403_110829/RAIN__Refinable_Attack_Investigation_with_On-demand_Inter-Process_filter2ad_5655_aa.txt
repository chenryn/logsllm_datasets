title:RAIN: Refinable Attack Investigation with On-demand Inter-Process
Information Flow Tracking
author:Yang Ji and
Sangho Lee and
Evan Downing and
Weiren Wang and
Mattia Fazzini and
Taesoo Kim and
Alessandro Orso and
Wenke Lee
Rain: Refinable Attack Investigation with On-demand
Inter-Process Information Flow Tracking
Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini,
Taesoo Kim, Alessandro Orso, and Wenke Lee
Georgia Institute of Technology
ABSTRACT
As modern attacks become more stealthy and persistent, detecting
or preventing them at their early stages becomes virtually impos-
sible. Instead, an attack investigation or provenance system aims
to continuously monitor and log interesting system events with
minimal overhead. Later, if the system observes any anomalous
behavior, it analyzes the log to identify who initiated the attack and
which resources were affected by the attack and then assess and
recover from any damage incurred. However, because of a funda-
mental tradeoff between log granularity and system performance,
existing systems typically record system-call events without de-
tailed program-level activities (e.g., memory operation) required
for accurately reconstructing attack causality or demand that ev-
ery monitored program be instrumented to provide program-level
information.
To address this issue, we propose Rain, a Refinable Attack
INvestigation system based on a record-replay technology that
records system-call events during runtime and performs instruction-
level dynamic information flow tracking (DIFT) during on-demand
process replay. Instead of replaying every process with DIFT, Rain
conducts system-call-level reachability analysis to filter out un-
related processes and to minimize the number of processes to be
replayed, making inter-process DIFT feasible. Evaluation results
show that Rain effectively prunes out unrelated processes and
determines attack causality with negligible false positive rates. In
addition, the runtime overhead of Rain is similar to existing system-
call level provenance systems and its analysis overhead is much
smaller than full-system DIFT.
CCS CONCEPTS
• Security and privacy → Operating systems security; Infor-
mation flow control; Intrusion detection systems; • Applied
computing → System forensics; Surveillance mechanisms;
Investigation techniques;
KEYWORDS
attack provenance; record and replay; information flow analysis;
forensic analysis
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134045
1 INTRODUCTION
Since modern, advanced attacks are sophisticated and stealthy, col-
lecting and analyzing attack provenance data has become essential
for intrusion detection and forensic investigation. For example,
many attack investigation or provenance systems monitor and log
interesting system events continuously to identify which process in-
teracted with an unknown remote host and which process accessed
or modified sensitive files. If the systems find such a suspicious pro-
cess, they will analyze its previous behaviors to determine whether
it was attacked and which resources were affected by it.
Attack investigation systems, however, entail a practical limi-
tation because of their two most important but conflicting goals—
collecting a detailed log and minimizing runtime overhead. To
ensure an accurate attack investigation, an instruction-level log
would ideally record the execution of all of the CPU instructions
of all programs. Nevertheless, such systems [49, 50, 54] also incur
tremendous runtime overhead (4×–20×), so they are impractical
in real computing environments. Therefore, as many attacks even-
tually need to use system calls to access sensitive resources and
devices, other practical systems [12, 24, 33, 34] mainly focus on
system-call information, the collection of which incurs low runtime
overhead (below 10%).
Although system-call-based investigation systems are practical,
they suffer from dependency ambiguity and explosion [33] because
it is difficult to reconstruct accurate attack causality with only
system-call information. For example, when a process reads from
a number of sensitive files and sends some (encrypted) data to
a remote host, knowing which sensitive files the process sends
(or it might not send any sensitive data) without instruction- or
memory-level data-flow tracking that system-call-level log cannot
provide becomes a challenge. To overcome this limitation, several
systems [12, 23, 33, 34] instrument monitored programs to obtain
interesting program-level information by modifying their source
code or rewriting their binary code. Nevertheless, this approach
is not scalable; that is, it must instrument each program again
whenever it is updated. More importantly, it cannot cover dynamic
code execution (e.g., code injection, self-modifying code, and return-
oriented programming), which is frequently used by exploits.
This paper proposes Rain, a practical Refinable Attack INvesti-
gation system, that selectively provides an instruction-level detailed
log while minimizing runtime overhead. Rain satisfies these con-
flicting goals using a system-call-level record-and-replay technology
and on-demand dynamic information flow tracking (DIFT). Rain
continuously monitors and logs system-call events and additional
data for later replay while constructing a logical provenance graph.
When it detects any anomalous event in the graph, it performs
replay-based DIFT from the event to prune out any unwanted
dependency. Performing DIFT for every process in the graph, how-
ever, is infeasible because the overhead of DIFT is too high (usually
around 10×–20× and at best, 2.7×, using decoupling techniques
[27, 37]). Instead, Rain performs system call-level reachability anal-
ysis to extract a subgraph tightly related to the anomaly and then
conducts DIFT only for processes belonging to the subgraph.
We evaluated Rain using the red team exercises produced by
the DARPA Transparent Computing program [2] and a recent real
attack (StrongPity). These cases include normal background traffic
with complex programs such as the Firefox web browser. Evaluation
results show that Rain is able to capture fine-grained causalities
that accurately uncover the behaviors and effects of attacks, and in
most cases the false positive rate is negligible. The runtime overhead
is as low as 3.22% on SPEC CPU 2006, unlike previous instruction-
level investigation approaches [49, 50, 54] whose runtime overhead
is 4×–20×. Further, Rain effectively reduces the number of processes
to be replayed with DIFT and filters out, on average, more than 90%
of processes. This is a considerable improvement in performance
over the previous approach, which has to replay the entire system
and conduct DIFT against all processes.
Motivating Example. To illustrate the constraint of existing
provenance systems and the contribution of our work, we refer
to a recent attack called StrongPity [13]. The attack infected over
1,000 systems in Italy and several other European countries in late
2016. The purpose of StrongPity was to steal and tamper with the
victims’ data by means of compromised data transfer or archiving
tools. Take, for example, Alice, a finance manager who maintains
and manages contracts and bidding files. Alice usually uses a popu-
lar ftp extension called FireFTP in her Firefox browser to transfer
files to other hosts, such as a machine hosting the shared folder
for her team. In the first step of the attack, the extension in Alice’s
Firefox is upgraded to one that contains a backdoor, resulting from
the distribution site of FireFTP, which has been compromised. A
malicious extension accesses Alice’s file system, collects data from
certain files, and sends the data to an attacker’s controlled site. In
addition, the extension modifies certain incoming files before they
are saved which also pollutes files that rely on the modified ones.
As we mentioned earlier, conventional system call-level tracing
and auditing cause false positives in damage assessments when
the source of the program (Firefox and FireFTP extension) is
compromised and source instrumentation (if any) becomes untrust-
worthy. For example, the system call traces in Figure 1 indicate
data leakage by connecting any read system call from sensitive
files to the send system call directed to the malicious site. Many
of these flows may be spurious if the user-space browser does not
actually propagate the data from the file to the remote host (i.e., not
all of the files being read are actually leaked). Similarly, many of
the processes and files indirectly affected by interactions with the
tampered file may not actually be affected at all. One needs to track
the user-space data flow to precisely identify these dependencies.
With Rain, after discovering that a host is controlled by an
attacker, an investigator performs an upstream analysis originating
from the host. With data pruning and selective DIFT, Rain returns
a provenance subgraph that contains the exact data leakages to the
host. Although the malicious extension reads a number of files, it
leaks only a small portion of them. By providing accurate analysis,
Figure 1: Example of causality inaccuracy (i.e., dependency explo-
sion) in system-call-level provenance data.
Rain saves the company from the fear of a large scale data leakage.
We will revisit this example and elaborate on the details of the
analysis in the following sections.
We summarize our contributions as follows:
• A refinable attack investigation system. We propose
a new attack investigation system that efficiently records
system-wide events in terms of system calls during runtime
and refines the log with DIFT during replay to recover fine-
grained causality. Rain satisfies two conflicting yet impor-
tant requirements: low runtime overhead and fine-grained
causality information (at the CPU instruction level), both
essential in the forensic analysis of attacks.
• On-demand inter-process DIFT. Instead of applying DIFT
to whole-system events [49, 50, 54] which introduces tremen-
dous overhead or which is likely infeasible, we introduce
graph-based reachability analysis to filter out unrelated pro-
cesses and selectively perform DIFT which makes inter-
process DIFT feasible for attack investigation.
• Accurate and comprehensive attack investigation. We
improve the accuracy of object-object, object-process, process-
process causalities (§5.2) and significantly reduce the false
positive rates generated by previous systems.
The rest of paper is organized as follows: §2 describes our threat
model. §3 provides an overview and describes the architecture of
Rain. §4 describes system logging and record-replay techniques,
and §5 explains the provenance graph. §6 presents the reachability
analysis and the process of identifying triggers. §7 describes how
Rain performs selective DIFT, and §8 summarizes its implementa-
tion and presents the results of evaluation. §9 discusses limitations
and future work, §10 summarizes related work, and §11 concludes.
2 THREAT MODEL AND ASSUMPTIONS
Our threat model is similar to those proposed in previous system
provenance studies [12, 34, 40]—an OS and monitoring system are
a trusted computing base (TCB). We take, for instance, an attacker
who tries to attack the applications and resources of a system pro-
tected by Rain and whose main goal is to exfiltrate sensitive data
kept in the system or manipulate it to propagate misinformation.
To achieve this goal the attacker may install malware on the system,
exploit a running process, or inject a backdoor.
To realize a practical, refinable attack investigation system we
assume the following: First, we assume that all of the attacks against
the system begin after Rain is deployed—that is, Rain begins record-
ing all of the attacks from their inception. Hardware trojans and OS
Firefox BrowserCompromisedFTP addonCompromised SiteCtct1.csvCtct2.csvCtct3.csvReadReadReadSendSendSendSensitive DocsWhich ﬁle is leaked?Figure 2: Overview of Rain architecture.
backdoors are out of scope of this paper. Second, we assume that
although an attacker could compromise the OS or Rain itself, the
attacker has no way of manipulating the previous provenance data
containing attack attempts on the OS or Rain. That is, although
we can see the attacker attempting to compromise the OS or Rain,
any data recorded after a successful attack may not be reliable.
In the future, Rain could ensure data integrity by using previous
secure provenance logging techniques [11, 55] and managing the
provenance data in a remote analysis server. Also, by using state-
of-the-art integrity-checking mechanisms [25, 32, 38, 43, 47], Rain
could determine when such an incident has occurred. Another as-
sumption that we make is that an attacker uses only explicit attack
channels, not side and covert channels which are beyond the scope
of this paper. Although Rain does not yet have a solution stopping
these attacks, we believe a record-and-replay approach has the
potential to detect attacks as shown in [14, 53].
Note that although some instruction-level attack investigation
systems [50, 54] are capable of detecting attacks against an OS,
they are too slow to be used in a real computing environment and
are mainly applied for in-depth malware analysis, running a small
number of samples in a controlled environment. Thus, we only
assume integrity-checking mechanisms in this paper.
3 OVERVIEW
This section presents an overview of Rain, a record-and-replay-
based system that efficiently logs the whole-system events during
runtime and conducts DIFT during replay to accurately determine
fine-grained causal relationships between processes and objects
(e.g., files and network endpoints) created during the execution of
user-level processes.
Figure 2 represents the architecture of Rain, which consists of
two main components: the target host and the analysis host. In
the target host, Rain’s kernel module logs all system calls that
user-level processes have requested, including the return values
and parameters that Rain will use to generate a provenance graph.
Rain also records the execution of user-level processes by using
kernel modules and an instrumented libc library to replay the
processes later on. It collects all necessary information to reproduce
the complete architectural state of user-level processes (i.e., all non-
deterministic values including random numbers). The target host
then sends the system call and record logs to the analysis host (§4).
In the analysis host, the provenance graph builder consumes the
received system call log to construct a coarse-grained whole-system
provenance graph that contains many security-insensitive causality
events (§5). To refine the coarse-grained provenance graph, Rain
first detects triggering points representing suspicious events in the
graph (e.g., accessing a sensitive file). Next, it initiates a reachability
analysis (i.e., upstream, downstream, and point-to-point analyses)
from the triggering points to create security-sensitive provenance
subgraphs (SPS), which consist of basic units that replay with DIFT
(§6). While selectively performing DIFT, the replay engine of Rain
replays each SPS to construct fine-grained causality subgraphs (§7).
Lastly, with the fine-grained causality subgraphs, Rain refines the
original whole-system provenance graph to detect the true behavior
and damages of any sophisticated attack that we were not able to
observe in the original provenance graph.
4 REPLAY-ABLE SYSTEM LOGGING
4.1 System Logging
The system logging component resides inside the kernel of the
operating system as a kernel module. We hook the system call
table to intercept the arguments and return values of causality-
related system calls. The component logs the semantics of system
calls between kernel objects and events such as open, read, write
file operations and connect, recv, send network operations. We
also include essential semantics such as the file path and the file
descriptor in the open syscall.
To uniquely identify the object, we log the related kernel seman-
tics of processes and files, which include inode, major, minor, gen
for files, and pid, tgid for processes. We also refer to kernel data
structures if necessary (e.g., to get the string of a file’s path from
the file system structure, dentry) which enables us to reduce the
log size for constructing the provenance graph to focus on unique
processes and objects. We use the relayfs ring buffer to efficiently
transfer the system call logs from the kernel to the user space. The
logs are packed, compressed, and transmitted off of the target host
to a security-assured analysis host.
4.2 Enabling Replay-Ability
Compared to previous system logging schemes [4, 12, 31, 34], Rain
not only logs semantics for building the coarse-grained provenance
graph, but also the non-determinism that enables faithful replay.
OperatingSystemTarget  HostProvenance GraphsAnalysis  HostOriginalPrunedRefined§5§4RAINKernel ModuleInstrumentedLib CReachabilityAnalysis§6.2§4SelectiveDIFT§7Replayer§4Provenance GraphBuilderTransferLogTriggering Analysis§6.1For this purpose, we reuse Arnold, the open-source framework of a
process-level record replay technique [19]. As an advantage, Arnold
supports the independent replay of processes so we do not have to
replay the entire system’s execution (e.g., [20, 50]) for analysis. Rain