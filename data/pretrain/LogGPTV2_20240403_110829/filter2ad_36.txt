title:Event-based isolation of critical data in the cloud
author:Sebastian Biedermann and
Stefan Katzenbeisser
POSTER: Event-based Isolation of Critical Data in the
Cloud
Sebastian Biedermann
Stefan Katzenbeisser
Security Engineering Group
Department of Computer Science
Technische Universität Darmstadt
{biedermann, katzenbeisser}@seceng.informatik.tu-darmstadt.de
ABSTRACT
In this poster, we present TrustDraw, a transparent secu-
rity extension for the cloud which combines Virtual Machine
Introspection (VMI) and Trusted Computing (TC). Trust-
Draw provides secure storage of critical data like keys or
passwords and allows to temporarily insert this data into a
running virtual machine (VM) if required. TrustDraw im-
proves security by allowing access to the critical data only
if certain previously deﬁned conditions are met. This way,
the stealing of critical data by bypassing access permissions
based on successfully executed attacks can be mitigated.
TrustDraw runs isolated and transparent. No software mod-
iﬁcations are required on a target VM. We evaluated an im-
plementation of TrustDraw in a realistic scenario in which it
only caused an acceptable run-time delay.
Categories and Subject Descriptors
C.2.0 [Computer-communication networks]: General—
Security and protection
General Terms
Security
Keywords
Virtual Machine Introspection; Cloud Security
1.
INTRODUCTION
The cloud computing paradigm can simplify work-ﬂows
and oﬀer cost-eﬀective solutions. Nevertheless cloud com-
puting also creates a new demand for privacy and security
mechanisms in order to protect the outsourced critical and
sensitive data. Stolen critical data like keys used for au-
thentication or passwords, can be used to cause massive
ﬁnancial damage or to execute other large-scaled or more
sophisticated attacks. For example security incidents like
the Stuxnet [3] malware used digital certiﬁcates stolen from
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author. Copyright is held by the owner/author(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512506.
hardware manufacturers to insert correctly signed driver mod-
ules to the infected operating system. The Flame [10] mal-
ware even used digital certiﬁcates issued by Microsoft. Ob-
viously, small critical data which can be located in a virtual
machine (VM) can be a worthwhile target for cyber attacks.
In this work, we focus on securing critical data located
in VMs which run in a cloud that oﬀers Infrastructure-as-
a-Service (IaaS) to arbitrary cloud users. Our approach is
based on a fact which greatly helps to develop mechanisms
that decrease the probability of critical data being stolen:
Critical data is in the majority of cases only required for
small periods of time, while most of the time it is stored
unused in the memory, ready for access. A running process
uses the critical data depending on certain speciﬁc events like
a triggered authentication procedure which ﬁnally requires
the critical data. Unfortunately, successfully executed at-
tacks can bypass permission mechanisms of the operating
systems and easily read critical data from memory.
As a solution to this problem, we propose TrustDraw,
which is a security service for the cloud that securely stores
identiﬁed critical data in a co-resident trusted VM and only
temporarily inserts the critical data as long as it is required
– and not longer. In particular, the critical data is only in-
serted into the VM’s memory if certain previously deﬁned in-
tegrity conditions of the cloud user’s VM could be met. This
way, TrustDraw greatly minimizes the probability of critical
data being stolen by an attacker who exploits weaknesses
in the VM in order to bypass the permission mechanisms.
TrustDraw runs isolated and transparent, unbeknownst from
the cloud user’s VM.
The presented work is based on virtualization technolo-
gies and Virtual Machine Introspection (VMI). VMI is a
technique to monitor a VM transparently from an isolated
location on the same hardware component by directly read-
ing the target VM’s memory pages during its runtime [9].
VMI is very useful for security purposes like intrusion detec-
tion (e.g. see [6],[4]). Security tools can run on an isolated
VM while they still can perform active monitoring on other
VMs [5].
Recently, VMI techniques focus not only on transparent
monitoring from an isolated location, but also on writing to
speciﬁc memory locations of the target monitored VM. This
way, entire procedures can be implanted and their execution
can be enforced [7] or work-ﬂows of the target VM can be
proﬁtably steered. This can be used for incident response
or, like in our scenario, to isolate critical data.
13832. ARCHITECTURE
TrustDraw is implemented for the Xen hypervisor [1] and
runs on Linux in the administrative VM (“dom0”). Trust-
Draw can be used to isolate critical data of a user’s VM
(“domU”) which co-residently runs on the same hardware
component. TrustDraw requires the process name which
uses the critical data (and runs on the user’s VM) and a
unique ﬁngerprint of the critical data in order to ﬁnd its
exact location. Furthermore, TrustDraw requires the deﬁni-
tion of an event which triggers the insertion of the critical
data into the running VM (for example a new incoming con-
nection) and a set of rules which have to be veriﬁed before
the insertion is allowed. TrustDraw operates by performing
seven sequential steps (Figure 1), where the ﬁrst step is an
initial step and is executed only once.
Figure 1: Work-ﬂow of TrustDraw’s proposed archi-
tecture running in seven sequential steps.
In the ﬁrst step, TrustDraw locates the currently used
memory pages of the target process which runs in the user’s
VM. TrustDraw searches for the exact location of critical
data within these memory pages in the second step. If the
exact location of the critical data could be identiﬁed, the
data is replaced by dummy data having the same character-
istics and the same size. The original critical data is isolated
from the user’s VM and securely stored in the trusted VM on
which TrustDraw runs. Since the memory pages of the target
process are dynamically allocated and freed, the location of
the dummy data may move during the continuous execution
of the process. Thus, in the third step, TrustDraw contin-
uously monitors the exact position of the inserted dummy
data. Once a location change could be identiﬁed, a new
search for the dummy data is immediately started. This
way, TrustDraw continuously maintains the location of the
dummy data in the user VM’s memory. If an event is de-
tected which is triggered by a procedure that requires the
isolated critical data, step four delays the requesting pro-
cedure. TrustDraw veriﬁes the integrity of the user’s VM
by checking the deployed rules before TrustDraw temporar-
ily replaces the dummy data by the original critical data in
step ﬁve. In step six, the procedure that requires the critical
data is allowed to continue. Once the procedure is ﬁnished in
step seven, the critical data is again replaced by dummy data
and the cycle can start again waiting for the next requesting
event.
TrustDraw continuously and transparently obtains infor-
mation about the user’s VM from four diﬀerent points shown
in Figure 2. TrustDraw can gather information about run-
Figure 2: Diﬀerent points which TrustDraw uses for
transparent information gathering.
ning processes or loaded modules on the VM’s operating
system by directly accessing the memory space of the run-
ning VM (1). TrustDraw can examine the VM’s raw stor-
age by extracting certain meta data of target stored ﬁles
using forensic techniques (2). Furthermore, TrustDraw can
retrieve information about the VM’s network traﬃc from the
virtualized bridge (3) and information about used memory
and CPU performance directly from the hypervisor (4).
Veriﬁcation of the user’s VM before the original critical
data is inserted is performed by checking the validity of
multiple previously deﬁned rules. In order to specify rules,
we deﬁned atomic Boolean events which can be gathered
from the user’s VM by TrustDraw. Some examples can be
seen in Table 1. For example, veriﬁcation of a process X
(procVer(X)) is executed by computing a hash over the pro-
cess’s executable in the memory for comparison (true|false).
event
proc(X)
procVer(X)
mod(X)
modVer(X)
modiﬁed(F)
accessed(F)
comIn(P)
comOut(P)
return value [true|false]
process X is running
process X is veriﬁed (hash)
module X is loaded
module X is veriﬁed (hash)
ﬁle F was modiﬁed
ﬁle F was accessed
source
Introspection
Introspection
Introspection
Introspection
Live Forensics
Live Forensics
new connection to port P
new connection from port P
vBridge
vBridge
Table 1: Example Boolean events gathered from a
user’s VM in order to check the validity of rules
before the insertion of the critical data is allowed.
TrustDraw continuously aggregates the retrieved events
from the user’s VM in time frames Fi having a ﬁxed-size.
Multiple time frames Fi ... Fn are used for model check-
ing based on deployed rules. A cloud user can deﬁne a
set of rules for a VM, for example rules with the help of
Linear Temporal Logic (LTL): G ¬ ( ¬ mod(’ﬁrewall’) ∧
procVer(’ids’) ∧ comIn(’80’)), which means “There should
no be incoming communication to the web server port with-
out the ﬁrewall module is loaded and the intrusion detection
process’s integrity is veriﬁed on the user’s VM”. TrustDraw
can perform run-time veriﬁcation of the rules using the SPIN
model checker [8]. Once the integrity of the user’s VM was
established by checking the validity of the deployed rules,
TrustDraw temporarily injects the original critical data.
3.
IMPLEMENTATION
Our prototype is implemented and illustrated in Figure 3.
The “dom0” VM acts as the Trusted Computing Base (TCB)
and uses a vTPM [2] coupled with a hardware TPM. The
1384“dom0” VM runs Linux and TrustDraw which can access
and analyze the memory pages of a co-resident user VM
(“domU”) that runs on the same hardware component in
parallel with the help of VMI [9]. The user VM can run
Figure 3: Architecture of TrustDraw running in a
trusted VM and isolating the critical data of a pro-
cess running on a co-resident user VM.
a process which requires critical data under certain circum-
stances (e.g. a key or a password hash). The trigger can be
an event like a new incoming remote connection to the user’s
VM to a speciﬁc port.
We evaluated a scenario in which TrustDraw can be suc-
cessfully deployed. For this practical evaluation, we used an
Intel(R) Core(TM)2 Duo CPU with 3Ghz and 4 GB of mem-
ory running the Xen hypervisor [1]. We deployed TrustDraw
on the administrative “dom0” that runs Ubuntu Linux 12.04.
TrustDraw monitored a user VM with 1024MB memory run-
ning in parallel on the same hardware component. This user
VM was virtualized in HVM mode (“fully-virtualized”) and
runs Ubuntu Linux 12.04. Additionally, the user VM run
a SSH-server which allows secure remote access based on
password authentication. In this scenario, we assumed the
Linux password hashes as critical data which are continu-
ously stored in the VM’s memory by the Linux Pluggable
Authentication Module (PAM). These hashes are required
for an authentication procedure, but ending up in the wrong
hands, they could allow to retrieve a valid plain-text pass-
word based on locally executed brute force attacks.
Table 2 shows results of time measurements of TrustDraw’s
procedures (100 runs, initial run skipped). Since locating
TrustDraw’s procedure
locate (original/dummy) password hashes
replace (original/dummy) password hashes
gather information for veriﬁcation
verify two rules before replacement
mean
3.10s
0.02s
1.20s
0.30s
std
0.22s
0.01s
0.24s
0.11s
Table 2: Timings of TrustDraw’s procedures.
the target hashes and gathering information and veriﬁcation
of deployed rules can run in parallel, an average SSH login
procedure using TrustDraw took around 3.2 seconds while
a standard SSH login procedure without TrustDraw took
around 1.2 seconds in our setup.
4. CONCLUSION
In this work, we presented TrustDraw which secures crit-
ical data of a user’s VM by isolating it to a trusted VM.
Right before critical data is used, TrustDraw temporarily
inserts the required original critical data into the exact lo-
cation of use. TrustDraw only inserts the critical data if
certain speciﬁc rules could be veriﬁed, which prove the in-
tegrity of the target VM. Vice versa, once the critical data is
not longer required in the VM’s memory, TrustDraw imme-
diately isolates the data again and replaces it with dummy
data. TrustDraw stores the critical data on a trusted VM
until it is again required. Thus, the critical data is only in-
serted into the VM’s memory for a very short period of time
as long as it is required. This way, TrustDraw minimizes the
probability of critical data being stolen with the help of at-
tacks which bypass permission mechanisms. An evaluation
showed that our approach is feasible and TrustDraw can be
beneﬁcially deployed since it causes only a small run-time
delay in our scenario.
Acknowledgments
The work presented in this paper was performed in the con-
text of the Software-Cluster project SINNODIUM
(www.software-cluster.org). It was funded by the German
Federal Ministry of Education and Research (BMBF) under
grant no. ”01C12S01V”.
5. REFERENCES
[1] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. L.
Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the art of virtualization. In
Symposium on Operating Systems Principles, pages
164–177, 2003.
[2] S. Berger, R. C´aceres, K. A. Goldman, R. Perez,
R. Sailer, and L. van Doorn. vtpm: virtualizing the
trusted platform module. In Proceedings of the 15th
conference on USENIX Security Symposium - Volume
15, USENIX-SS’06, Berkeley, CA, USA, 2006.
USENIX Association.
[3] N. Falliere, Murchu, and E. Chien. W32.Stuxnet
dossier. Symantec Security Response online report,
Feb. 2011.
[4] H. Fang, Y. Zhao, H. Zang, H. Huang, Y. Song,
Y. Sun, and Z. Liu. Vmguard: An integrity monitoring
system for management virtual machines. In Parallel
and Distributed Systems (ICPADS), 2010 IEEE 16th
International Conference on, pages 67 –74, dec. 2010.
[5] T. Fraser, M. Evenson, and W. Arbaugh. Vici virtual
machine introspection for cognitive immunity. In
Computer Security Applications Conference, 2008.
ACSAC 2008. Annual, pages 87 –96, dec. 2008.
[6] T. Garﬁnkel and M. Rosenblum. A virtual machine
introspection based architecture for intrusion
detection. In In Proc. Network and Distributed
Systems Security Symposium, pages 191–206, 2003.
[7] Z. Gu, Z. Deng, D. Xu, and X. Jiang. Process
implanting: A new active introspection framework for
virtualization. In Reliable Distributed Systems
(SRDS), 2011 30th IEEE Symposium on, pages 147
–156, oct. 2011.
[8] G. Holzmann. The spin model checker. IEEE
Transactions on Software Engineering, 1997.
[9] B. D. Payne and W. Lee. Secure and ﬂexible
monitoring of virtual machines. In Annual Computer
Security Applications Conference, pages 385–397, 2007.
[10] sKyWIper Analysis Team. skywiper (a.k.a. ﬂame
a.k.a. ﬂamer): A complex malware for targeted
attacks, May. 2012.
1385