CollectInfo and AddCommunities ( 1○ — 4○).
for the adversary’s prefix.
MakeSampleAnnouncement: We made a sample announcement
1○ CollectInfo: We recorded the route exported by Coloclue
at as [Coloclue, NTT, RGNet, Adversary]. Coloclue’s route to the
victim was [Coloclue, Fiberring, Cogent, Northeastern, Victim]. We
noticed that Coloclue’s path the the victim was provider-learned
while Coloclue’s path to the adversary was peer-learned which
would cause Coloclue not to export a valid route to the victim.
Sprint, RGNet, Adversary].
1○ AddCommunities: A logical first choice was to add the com-
munity (NTT:No export to Coloclue) to prevent Coloclue from
learning this route.
2○ CollectInfo: Coloclue now exported the route [Coloclue,
2○ AddCommunities: We applied the (Sprint:No export to Colo-
clue) community, which successfully stopped Coloclue from export-
ing the route.
3○ CollectInfo: By removing all of its peer routes to the
adversary’s prefix, Coloclue exported a provider-learned route:
[Coloclue, Atom86, NTT, RGNet, Adversary]. Even though NTT
ASN(Name)
3356 (Level3)
1299 (Telia)
174 (Cogent)
2914 (NTT)
3257 (GTT)
6762 (Sparkle)
6939 (Hurricane)
6453 (TATA)
3491 (PCCW)
6461 (Zero)
1273 (Vodafone)
3549 (Level3)
9002 (RETN)
12956 (Telefonica)
4637 (Telstra)
209 (CenturyLink)
7473 (SINGTEL)
12389 (Rostelecom)
20485 (TransTeleCom)
3320 (Deutsche)
701 (MCI)
7018 (AT&T)
7922 (Comcast)
5511 (Orange)
8359 (MTS)
3216 (Vimpelcom)
2828 (MCI)
31133 (MegaFon)
286 (KPN)
20764 (RASCOM)
LowerPref NoExportSelect NoExportAll
Yes
Yes
Yes
Yes
Yes
Yes***
No
Yes
Yes
Yes
Yes
Yes
Yes
unknown
No
Yes
unknown
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes*
Yes**
Yes
Yes
No
No
Yes
Yes*
Yes*
Yes*
Yes*
Yes
unknown
No
Yes*
unknown
Yes*
Yes*
Yes
No
No
Yes
Yes*
Yes*
Yes*
Yes*
Yes*
Yes
Yes*
Yes
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
Yes
unknown
No
Yes
unknown
Yes
No
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
Table 10: Community support (as stated in routing policy [1–
4, 6–11, 13–16, 22–31, 33, 34, 43, 45]) by the top 30 ASes
(as per as-rank.caida.org accessed March, 2019). * Does not
allow export control to peers via ASN but enumerates major
peering sessions and allows for suppression to individual
peering sessions via communities. ** Only allows suppres-
sion to private peers by region. *** Only allows suppression
to public peers (not private peers).
was no longer exporting its route to Coloclue through its peering
session, Coloclue was still learning NTT’s route through its provider
Atom86, because Coloclue is both a peer and an indirect customer
of NTT. The provider-learned route exported by Coloclue to the
adversary was the same length as its route to the victim, meaning
there was a chance Colcolue would export a valid route to the victim.
Therefore, we decided to suppress the route [Coloclue, Atom86,
NTT, RGNet, Adversary] as well.
Session 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom447Name
DE-CIX
AMS-IX
IX.br
LINX
NL-IX
France-IX
HKIX
Seattle-IX
JPNAP
Netnod
NoExportSelect NoExportAll
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
unknown
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
unknown
Yes
Table 11: Community support at IXPs’ route servers (as
stated in routing policy [18, 19, 32, 36–40, 74]) by the top
10 IXPs operated by unique organizations (as per the Packet
Clearing House list of Internet exchanges by average traffic
accessed August, 2019 [17]). LowerPref is not considered
because route servers are always across peering links, so an
adversary can use NoExportAll to prevent route exporting
and does not need to employ LowerPref.
Expected Hosts
in Sample
171
175
3
16
634
1
1000
Continent Hosts in
Sample
159
181
4
14
641
1
1000
Asia
Europe
Africa
Oceania
Americas
Unknown
Total
Table 12: Expected values rounded to nearest host (based on
entire Censys database) and observed (from sample) values
of number of hosts in each continent as well as chai squared
contribution.
Chai-squared
Contribution
.887
.216
.166
.373
.078
.001
1.72
3○ AddCommunities: The route [Coloclue, Atom86, NTT, RGNet,
Adversary] has no peering links in it, so we decided to add the
community (NTT:Lower the preference of the route) to lower the
local preference of the adversary’s route at NTT.
4○ CollectInfo: Coloclue announced a longer route to the
victim than the adversary, so we knew the it’s safe to launch the
attacks.
LaunchAttack: We announced the victim’s prefix and success-
fully achieved interception demonstrating the viability at Seattle
(the full list of communities used is shown in Table 9).
E VALIDATING RANDOM SAMPLE WITH
CHAI-SQUARED ANALYSIS
For our sample of 1,000 HTTPS hosts, we computed a chai-squared
value to confirm our sample was not biased. We counted how many
hosts in our sample were in each continent. We also computed
expected values for the number of hosts in each continent based
on the fraction of hosts in that continent (that served browser-
trusted certificates) in the entire Censys database using SELECT
COUNT(ip) and GROUP BY autonomous_system.country_code (see
Table 12). We computed a chai-squared value of 1.72. With 5 degrees
of freedom (for the 6 possible continent values), a chai-squared
value of 1.72 is well below the 80th percentile critical value of 8.558
and has a P value of .89 (meaning 89% of random samples have
greater variation than our sample and 11% have lower variation).
For our sample of 1,000 ICMP ping hosts, a chai-squared analysis
was not relevant because we could not filter the original Censys
database for ping support. Thus, unlike the HTTPS case where
our filtering simply confirmed the hosts were currently active, by
filtering for ping support we knowingly made the sample unrepre-
sentative of the entire Censys database (since it only included the
hosts that responded to ping). However, we hold that this sample
is representative of ping hosts given that it was constructed using
the same overall sampling technique as the HTTPS sample.
F LIMITATIONS OF SICO ATTACKS
The primary limitations of SICO Attacks are their reliance on
support for BGP communities and their reliance on predicting the
exact route preferences of different ASes. However, measures can
be taken to (at least partially) overcome these limitations.
Adversaries can work around gaps in community support. For
example, if an adversary has two providers but only one provider
offers support for action communities, the adversary can choose to
make announcements to the provider that offers action community
support. In addition, even if an adversary’s providers do not support
any action communities, as long as they transit communities to
higher up ASes, an attack can still be viable.
Route preference (as well as the routes heard by an AS) can be
seen through a BGP looking-glass (a service that shows which
routes are heard by an AS and their preference for debugging
purposes) [21]. While many tier-1 providers offer public looking-
glasses, support from smaller networks is less common. Knowing
the full set of routes heard by an AS without a looking glass can be
difficult, but knowing an AS’s preferred route is easier because this
route is exported to neighbors and can be seen from the looking
glasses of other ASes (and in publicly-available BGP data like [44]).
Interestingly, once an adversary knows an AS’s preferred route
to ASadv, it can deduce all routes to ASadv that that AS heard
by suppressing the preferred route (via communities) and then
observing what second-choice route that AS exports. In this manner,
an adversary can find all routes heard and the preference of these
routes at an AS that does not contain a looking glass.
Session 2E: Internet SecurityCCS ’19, November 11–15, 2019, London, United Kingdom448