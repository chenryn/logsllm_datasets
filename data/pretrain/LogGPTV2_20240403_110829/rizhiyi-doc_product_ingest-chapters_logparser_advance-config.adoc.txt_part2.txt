===== hex转换
[source,javascript]
{
                "source" : "hex",
                #字节之间分隔符
                "split_string" : " "
                #支持的编码, 常见的编码: GBK, UTF-8
                "codec_type" : "GBK"
                #"condition" : …
}
===== 内容替换
[source,javascript]
{
                "source" : "a",
                "target" : "a",
                #正则，支持分组
                "regex" : "(\\w*)=(\\d*)",
                #替换的内容，可以用$n引用正则匹配的第n个分组
                "replacement" : "$1 $2",
                #只替换一次, false表示尝试多次替换
                "replace_first" : true,
                #支持的编码, 常见的编码: GBK, UTF-8
                #"condition" : …
}
===== 脱敏配置
[source,javascript]
{
                "source" : "a",
                #正则，支持分组
                "regex" : "(\w*)=(\d*)",
                #替换的内容，可以用$n引用正则匹配的第n个分组
                "replacement" : "$1 $2",
                #字段在原文中的位置前缀, 用来脱敏原文(可选字段，默认为空)
                "regex_prefix" : "",
                #字段在原文中的位置后缀, 用来脱敏原文(可选字段，默认为空)
                "regex_suffix" : "",
                #只替换一次, false表示尝试多次替换
                "replace_first" : true,
                #脱敏标志, 必须为true，跟内容替换区分开
                "anonymity" : true,
                #支持的编码, 常见的编码: GBK, UTF-8
                #"condition" : …
}
===== 格式化处理
[source,javascript]
{
                #字段名
                "params" : [
                    "a",
                    "b"
                ],
                #结果的字段名
                "target" : "c",
                #格式化的格式，可以用$n引用字段列表中的第n个字段, 可以为空，为空时是多个字段名合并
                "printf" : "$1 $2",
                #"condition" : …
}
===== 结构体解析
[source,javascript]
{
                "source" : "field",
                #codec_type必填，固定值struct_decode
                "codec_type" : "struct_decode",
                #结构体定义
                "format" : "a:1,b:2",
                #结构体定义的编码, 可选, 默认utf-8
                "charset" : "utf-8",
                #是否严格解析, 如果为true, 字段长度和结构体定义长度不一致的算解析失败, 可选, 默认为false
                "strict_mode": false,
                #是否去掉字段值中的前后空格, 可选，默认去掉
                "strip_field": true
}
===== 重命名字段
[source,javascript]
{
                #字段名, 支持正则
                "source" : "a",
                #生成的字段名
                "target" : "b",
                #生成的字段名已存在时是否强制覆盖(可选，默认为false)
                "force" : false,
                #"condition" : …
}
===== 重定向
和自定义字典算子类似，重定向算子高级配置中也是使用了字段提取规则的内部id。请谨慎使用。
[source,javascript]
{
                #重定向的规则id
                "rule_id" : "",
                #"condition" : …
}
==== 算子的复杂条件控制
在之前的介绍中，我们已经看到了条件控制功能在算子上的运用。事实上，日志易提供了比界面可见选项更多、更高级的条件控制功能。
===== 条件控制语法说明
条件控制支持的类型及对应配置语法如下：
* 包含：in
* 不为空：non_empty
* 等于：equal
* 大于：greater_than
* 小于：less_than
* 匹配：match
采用单一类型条件控制语句来描述a字段值为1时的语法如下：
[source,javascript]
{
    "rule" : {
        "field" : "a",
        "condition" : "equal",
        "value" : "1"
    }
}
条件控制支持的逻辑组合及对应配置语法如下：
* 与：and
* 或：or
* 非：not
采用逻辑组合条件控制语句来描述a字段值为1且b字段值为2时的语法如下：
[source,javascript]
{
    "logicalOp" : "and",
    "left" : {
        "rule" : {
            "field" : "a",
            "condition" : "equal",
            "value" : "1"
        }
    },
    "right" : {
        "rule" : {
            "field" : "b",
            "condition" : "equal",
            "value" : "2"
        }
    }
}
采用逻辑组合条件控制语句来描述a字段值为空时的语法如下：
[source,javascript]
{
    #逻辑组合， "and", "or", "not"
    "logicalOp" : "not",
    "left" : {
        "rule" : {
            "field" : "a",
            "condition" : "non_empty",
            "value" : ""
        }
    }
}
使用说明
1.	某些字段可选, 不需要填写时，不用填写这个字段, 而不是空字符串。
2.	很多规则可以包含多个rule, 推荐只用一个。
===== 条件控制场景示例
字段提取规则的所有算子都支持condition字段。本节举例，只提供高级配置区域的内容。
* request_content不为空时执行json规则解析
切换JSON解析规则为高级配置，输入如下内容：
[source,javascript]
{
                "source" : "request_content",
                "condition" : {
                    "rule" : {
                        "field":"request_content",
                        "condition":"non_empty",
                        "value":""
                    }
                }
}
* request_content不为空, 且request_status为200 时执行json规则解析
[source,javascript]
{
                "source" : "request_content",
                "condition" : {
                   #条件组合, and, 左条件和右条件同时满足在执行
                   "logicalOp" : "and",
                   #左条件
                   "left" : {
                       "rule" : {
                           "field":"request_content",
                           "condition":"non_empty",
                           "value":""
                       }
                   },
                   #右条件
                   "right" : {
                       "rule" : {
                           "field" : "request_status",
                           "condition" : "equal",
                           "value" : "200"
                       }
                   }
                }
}
==== 算子处理成功时修改字段值
除了条件判断以外，还有一种处理也是对各种算子均有效的。即当该算子处理状态是成功时,可以额外进行字段值的定义或修改。
该功能常用于对较复杂格式日志，如防火墙日志，可以按照不同正则表达式来标记事件类型。示例如下:
image::images/add_fields.png[]
`add_fields` 可以传递数组，也可以引用之前已有的解析结果，内置字段用 `@` 开头标记。下例是切换成高级编辑时的示例:
[source,javascript]
{
    "grok":{
        "rule": [
            {
                "source" : "raw_message",
                "pattern" : [
                    ["(?.*)"]
                ]
                "add_fields" : [{"name":"%{test}", "value": "%{@hostname}test"}]
            }
        ]
    }
}
==== 算子对嵌套数组的处理
在之前的内容中，我们看到来源字段一般都是选择某个字符串或者数值字段。事实上，绝大多数解析算子，支持处理嵌套数组结构的来源字段。其处理方式类似于map操作，遍历数组的每个元素，逐一执行算子。
为了和简单类型字段做区分，嵌套数组字段必须明确采用[]标明数组位置。如果直接选择数组内元素，会提示解析异常：
image::images/parserule-array-error.png[]
您只能在高级配置框内进行修改。将source和target内容里的a.b.ip修改成a[].b.ip。示例如下：
image::images/parserule-array-advance-config.png[]
唯一需要注意的算子是格式化处理。格式化处理算子的作用是从某个来源字段的内容，生成一个全新的字符串字段。除非所有来源字段都存于同一个嵌套数组层级上，否则无法支持这种处理。确实有需求的用户，建议采用字段重命名算子，先对数据进行修改。
===== 嵌套数组字段名的平铺处理
嵌套数组在算子输出时，会被自动平铺成简单数组。常见的平铺对比如下表:
.数组平铺示例
|====
|嵌套数组                        |平铺前         | 平铺后
|{"a":[{"b":"c"},{"b":"d"}]}     |a.b: ["c","d"] | a[].b: ["c","d"]
|{"a":[{"b":[{"c":"d"}]}]}       |a.b.c: ["d"]   | a[].b[].c: ["d"]
|{"a":[[{"b":"c"}],[{"b":"d"}]]} |a.b: ["c","d"] | a[][].b:["c","d"]
|====
image::images/nested-json.png[]
在搜索中，对应改为:
[source]
----
json.a[].b:c | stats count() by json.a[][].b
----
[NOTE]
====
1. 日志易仅为更方便的字段搜索和统计进行平铺，并不修改日志原文。
2. 老用户 SPL 不便修改的，可以修改日志易 Manager 中 logriver 的 `log_parser.switch_compatible_multiple_value_name` 设置为 `true`，继续保持不平铺。
3. 条件控制语句中暂时不支持使用平铺字段。
====
==== 自定义配置高级算子
为了适应日志数据格式千变万化，日志易不断推出新的高级算子。对于一些比较新的算子，可以通过‘自定义规则’进行配置。界面如下：
image::images/parserule-custom.png[]
目前版本，日志易提供有多种可选的自定义规则可以填入规则名称中：dissect、codec、metadata。
===== dissect解析
该算子针对大多数日志格式本身是固定分隔符的情况做了高性能设计。用户用分隔符语法格式来描述日志的格式，算子依照格式定义顺序解析。适用于分隔符、字段数量和顺序固定的日志。
在apache访问日志的解析场景下，dissect解析算子比正则表达式解析算子的性能高一个数量级。
[source,javascript]
{
            {
                #解析的字段名
                "source" : "", 
                #日志格式
                "format" : "%{field}",
                #可选项，是否使用严格的解析，默认是false。使用严格解析时，描述格式的字段需要全部抽取出来才解析成功
                "strict_mode" : false, 
                #可选项，是否处理转义字符，默认是false，不处理。转义字符是前边加\的字符
                "enable_escape" : false,
                #"condition" : …
}
##dissect格式##
语法说明:
 %{字段}分隔符%{字段}
字段示例如下:
1. 普通字段: %{field1}
2. 有类型的字段: %{field1:int}或者%{field1:i}
3. 嵌套字段 %{field1.field2}
4. kv字段 %{field1} %{@field1} 前一个field1的内容作为字段名，第二个内容作为字段值
5. 空字段 %{} 或者% {#field}
字段类型包括
* i/int
* l/long
* f/float
* d/double
* s/string
比如对http://rizhiyi.com/index.do?id=123写这么一段配置：
 http://%{domain}/%{#url}?%{arg1}=%{@arg1:i}
则最终生成的 Event 内容是这样的：
image::images/parserule-dissect.png[]
===== unicode解析 [[unicode-parser]]
unicode解析规则可以解析python打印的日志。
规则内容：
[source,javascript]
{
    #配置默认的字段
    "source" : "",
    #codec_type必填，固定base64decode
    "codec_type": "unicode_decode"
    #"condition" : {"rule" : {"field":"a", "condition":"equal", "value":"1"}}
    #"add_fields" : [{"name":"matched", "value": "1"}]
}
示例
日志: PartyBasicInfoService_\u5ba2\u6237\u57fa\u672c\u4fe1\u606f\u670d\u52a1
解析结果: PartyBasicInfoService_客户基本信息服务
image::images/parserule-unicode.png[]
===== base64解析
加密日志以base64方式加密，接入时需要解密但不需要解析加密字段，日志易提供base64的解析规则，具体使用可参考下面的例子。
1. 日志样例内容填写‘aGVsbG8gYmFzZTY0’；
2. 添加自定义规则；
3. 规则名称填写‘codec’；
4. 规则内容填写如下：
        "source" : "raw_message",
        "codec_type": "base64decode"
5. 点击解析，得到解析结果为hello base64。
image::images/base64.png[]
===== metadata修改
在高级配置中可以修改元数据的值，包括@source, @ip, @hostname, @tag, @appname, raw_message等。
此外，还可以通过 metadata 修改一些特殊元数据，变更数据处理流程。
第一、可以修改 @index 的值——这会覆盖在路由规则中定义的索引配置。
[source,javascript]
{
    "source": "@index",
    "value": "metricidx"
}
注意：写在value内的索引名称，必须在"索引配置"中预先定义完毕，否则执行会失败。
第二、可以修改 @use_source_type 的值——这会覆盖日志易 Manager 中关于字段提取前缀的开关配置。在全局使用 logtype 前缀的情况下，给单条字段提取规则关闭 logtype 前缀。
[source,javascript]
{
  "source":"@use_source_type",
  "value" : "true"
}