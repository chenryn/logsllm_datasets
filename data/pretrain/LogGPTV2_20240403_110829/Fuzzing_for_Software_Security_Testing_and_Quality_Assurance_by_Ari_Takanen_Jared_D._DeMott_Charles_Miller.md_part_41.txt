• Images: gif, jpeg, png, and many others;
• Video: avi, mov, mpeg-variants, and many others;
• Audio: wav, mpeg-variants, streaming protocols, and many others.
Browsers are also probably one of the simplest applications to instrument. This
is because they run as stand-alone applications. It is extremely easy to build a simple
script that will automatically start and kill the browser, requesting a new test case
every time it is launched. You can also use HTTP features such as the “META
REFRESH” tag to automatically refresh the page where the browser obtains its
test cases.
Some browser fuzzers do not generate actual test cases; instead they are written
in JavaScript that is executed in the browser. In-browser fuzzing can be done either
by directly executing JavaScript commands one at a time or by generating hundreds
of lines of JavaScript and executing the whole script. When the test case generator
is running outside of the browser, the test cases can be recorded and saved to a file
when needed. A test case generator running inside the browser cannot report its
state if a fatal error occurs and the browser crashes. To solve this problem, most
in-browser fuzzers use seeding, where usage of the same seed number consistently
generates the same output.
Mutation-based fuzzing, in the context of Web browsers, is mainly used for
binary file formats, such as images and videos, and formats with less strict syntactic
6760 Book.indb 292 12/22/17 10:50 AM
9.4 Network Equipment Manufacturer Fuzzing 293
rules than JavaScript. Mutation-based fuzzing can also be used to fuzz formats that
are executed in browser extensions, such as Flash and PDF.
In short, you should test any application that acts as a Web browser, or any
application that is launched by a Web browser, with all available fuzzing tools.
You can find tens of freely available browser fuzzing tools in any search engine
with the keywords “browser fuzzing.” For example, Mangle was a famous HTML
fuzzer that found many bugs in Internet Explorer, and JSFunFuzz is a JavaScript
Fuzzer. NodeFuzz14 is a Web browser testing harness that was developed by one
of the authors of this text to allow cross-platform fuzz testing of a wide variety of
Web browser features with user-defined test case generator and instrumentation
modules. NodeFuzz has been used to find over 150 vulnerabilities from Google
Chrome, Mozilla Firefox, and Internet Explorer.
9.4 Network Equipment Manufacturer Fuzzing
Fuzzing is especially important to network equipment manufacturers, due to the
difficulty of deploying updates to the devices after their release. For example, Cisco
Systems has explained how fuzzing is a key part of their software development life
cycle.15
9.4.1 Network Switch Fuzzing
A network switch or a router is a critical device in all network deployments. These
devices come in varying sizes and configurations and often run some real-time
operating systems such as Windriver or QNX. This can be a challenge for on-device
monitoring and instrumentation. Interfaces that can be fuzzed include router pro-
tocols, IP services, and various proxy components. Many home routers also have
application-level gateways and antivirus systems built into the device.
Router protocols include
• BGP;
• OSPF;
• IS-IS;
• PIM-SM/DM;
• GRE;
• DVMRP;
• RSVP;
• VRRP;
• RIP;
• MPLS/LDP.
14 http://jultika.oulu.fi/files/nbnfioulu-201504161396.pdf.
15 Ari Takanen and Damir Rajnovic. “Robustness Testing to Proactively Remove Security Flaws with
a Cisco Case Study.” October 26, 2005. Silicon Valley Software Process Improvement Network (SV-
SPIN). www.svspin.org/Events/2005/event20051026.htm.
6760 Book.indb 293 12/22/17 10:50 AM
294 Fuzzing Case Studies
9.4.2 Mobile phone Fuzzing
Mobile phone fuzzing is very much like fuzzing against a typical desktop worksta-
tion. The specialty with smartphones is that the failure mode can be devastating—
that is, total corruption of the handset flash memory requiring reprogramming of
the flash memory to fix the operation. Fuzzing can result in corruption of the SIM
card beyond repair—for example, when fuzzing is conducted over Bluetooth SIM
access profile (SAP).
Mobile phones come with a number of open interfaces. We would not be sur-
prised to see a Web server on a mobile phone, as some messaging techniques actu-
ally use HTTP to transfer files between smartphones.
But, the most interesting interfaces and applications to fuzz in mobile phones
are the following:
• Wireless (Bluetooth, WiFi);
• Web browser (HTTP itself and all related interfaces mentioned earlier in
browser fuzzing);
• Email client (SMTP client, POP, IMAP4);
• VoIP client (SIP, RTP, TLS client);
• Instant messaging (SMS, MMS);
• Media formats (images, audio, video);
• Calendar data (vCal, iCal, vCard).
One of the authors of this text found a vulnerability in the Web browser in
Apple’s iPhone by using fuzzing techniques.16
Bluetooth is a special challenge in mobile phones due to the complex protocol
stack. Several Bluetooth interfaces are open to attack without any user acknowl-
edgment. Examples of such interfaces include Bluetooth/LCAP and Bluetooth/SDP.
Typically, low-level tests will break the stack itself, but high-level fuzzing of the
Bluetooth profiles will break the applications running above the stack.
Mobile phones can be tested through a range of different injection vectors (Fig-
ure 9.5). Active attacks push the fuzzed messages to the phone, requiring no action
by the user. Active fuzzing typically consists of testing the request messages or ini-
tiating messages on the SUT. Sometimes active fuzzing can also test interfaces that
require no action on the SUT but are automatically requested by the device itself.
On the other hand, passive attacks require test automation on the mobile phone to
fetch each fuzzed test case.
An example of this is testing Web clients or email clients on a smartphone. This
setup can pose problems, especially when a test case causes a crash and the device
will fetch the same test case each time from the cellular infrastructure. This hap-
pens often in SMS fuzzing, which can be set up as both active and passive fuzzing.
The offending test message is typically not deleted from the messaging server before
the handset crashes, and therefore other means must exist to skip over that test to
be able to automatically continue the test execution.
16 www.nytimes.com/2007/07/23/technology/23iphone.html.
6760 Book.indb 294 12/22/17 10:50 AM
9.5 Industrial Automation Fuzzing 295
Figure 9.5 Test environment for fuzzing mobile phones.
In 2015, security researcher Joshua Drake used fuzzing to discover multiple
serious security vulnerabilities from the Android operating system.17 These vul-
nerabilities affected the Android backend engine for multimedia files and made it
possible for an attacker to gain remote code execution on an Android device by
sending a crafted media file as an MMS message.
9.5 Industrial Automation Fuzzing
Due to the fact that most industrial protocols are closed and vendor-proprietary,
the availability of fuzzing tools in this space is limited. Therefore, most industrial
control system equipment and software manufacturers are limited in their ability
to rigorously test new products for possible security flaws. New vulnerabilities are
constantly discovered and abused in systems used in critical environments such as
oil and gas, water, and electrical generation/distribution industries. Standard IT
vulnerability testing does not typically address the unique failure modes such as
resource and timing constraints on the control side of these critical control systems.18
17 https://www.blackhat.com/docs/us-15/materials/us-15-Drake-Stagefright-Scary-Code-In-The-Heart-
Of-Android.pdf.
18 The section on Industrial Automation fuzzing is partially based on personal communications with
Dr. Nate Kube from Wurldtech, the SCADA fuzzing company that started the fuzzing in industrial
domain. GE acquired Wurldtech in 2014.
6760 Book.indb 295 12/22/17 10:50 AM
296 Fuzzing Case Studies
To help provide a solution, the Achilles Vulnerability Assessment Project was
launched by the British Columbia Institute of Technology (BCIT) in the summer of
2003.19 The intent was to create a test platform that would eventually allow control
system vendors and end users to systematically stress-test critical equipment and
software for both known and unknown security vulnerabilities prior to market
release or field deployment.
SCADA fuzzing is different from other use scenarios in two perspectives. The
legacy SCADA systems were built on complex infrastructures involving serial (for
example, RS323, JTAG, USB) and potentially some proprietary parallel buses. Today,
most of these interfaces have been adapted into Ethernet-based technologies, and
that has introduced a family of new protocols such as:
• Modbus/TCP;
• ModbusPLUS;
• Vnet/IP;
• Ethernet/IP;
• Profinet;
• MMS (Manufacturing Message Specification).
The fuzz traffic generation is similar to any other fuzzer, but the models used
will require some rethinking due to the master-slave relationships used in SCADA.
Very few SCADA protocols use the client-server architecture. Determining the
extent of the malady is of greatest import. Therefore, the monitoring of key device
functionalities becomes the paramount issue. To achieve this, the SCADA fuzzing
frameworks divide the control functionality into three discrete areas:
• Ethernet communications processing;
• Logic processing;
• I/O processing.
Each of these areas is monitored separately to accurately quantify a SUT’s
response to testing stimulus. Monitor data is used as a part of determining the
severity metric if a failure is detected.
Key challenges in SCADA fuzzing include:
• Diversity in protocol implementations (optional and vendor extensions);
• Ambiguity in protocol implementation;
• Access to test equipment;
• Complexity in configuration of systems and test beds;
• Simulations with and without loaded behavior;
• Gray-box access to SUT;
• Multi-way redundancy in SUT;
• Fail-over behavior of SUT;
19 The Achilles project was a success and Wurldtech Security Technologies emerged as the leading
provider of security solutions to SCADA, process control, and mission-critical industries, and the first
company to offer a comprehensive suite of products and services designed specifically to protect the
systems and networks that operate the foundation of the world’s critical infrastructure.
6760 Book.indb 296 12/22/17 10:50 AM
9.5 Industrial Automation Fuzzing 297
• Performance constraints because some devices are very slow;
• Accounting for watchdogs, fail-safe modes, communication fail-over, and
so forth.
The various storm-based test cases included in the Achilles fuzzer suite were
developed in response to lab and field testing as well as reported failures in the field
that found that high volumes of regular or unusual packets often caused opera-
tional discontinuity (for example, hard-faulted devices, loss of communication for
extended periods after a storm has ceased, tripped safety systems). They are also
used to discover and validate functional constraints of the device under test (such as
maximum packet per second rates before being DoS’ed). This allows other tests to
ensure they deliver valid results and prevent false positives or can be used to force
a device to fault and reset, providing access to device states that only occur dur-
ing startup. These states can contain information like log-in sequences or database
downloads, that can provide a huge amount of valuable information.
The traffic generated by each type of storm has a structurally correct header
for the protocol being tested with a random payload. Different failure patterns were
identified depending on how well structured the packet was (i.e., how many pro-
tocol headers were structurally valid) and that one of the primary causes of fault
was excessive CPU load during processing, followed by memory exhaustion and
concurrency issues.
The storms are designed to load the target protocol as heavily as possible while
minimizing interaction at high protocol layers. The traffic generated by each type of
storm has a structurally correct header for the protocol being tested with a random
payload meant to be caught by error-checking code at the next protocol level up. This
allows us to measure differences in behavior between protocols (Ethernet vs. IP, IP
vs. TCP, etc.) that may be exploitable. For example, in some devices tested, there was
a greater overhead incurred processing Ethernet headers with random payloads than
when processing IP headers with random payloads. Different delivery mechanisms
such as broadcast and multicast have also exhibited similar unexpected behavior
during storm tests, inciting the creation of broadcast/multicast storm variants.
The ability to stress the communication process to various levels allows us to
measure how the device responds to hostile networking conditions. Most equip-
ment tested has had a design goal that inputs cannot impact the controller’s ability
to maintain its I/O functions according to some well-defined policy (no affect at
all, entering a fail-safe mode, etc.). Noting that different kinds of protocols affect
CPU and memory load differently, we are able to measure discrepancies between the
desired I/O policy and the actual behavior. Many SCADA networks are designed
for a maximum data rate of about 500 to 1,000 packets per second, which makes
simple load-based DoS attacks very feasible.
Since the famous SCADA attack called Stuxnet in 2010, the focus of industrial
control systems (ICS) security audits has been in the field devices and controllers.
However, the commonly used ISA-95 reference model for industrial integration con-
tains four layers: enterprise resource planning, manufacturing execution, process
control, and field devices. This hierarchy usually shares network components and
systems not only internally but also with various external systems such as cam-
era monitoring, on-premise security systems, and building automation. From an
6760 Book.indb 297 12/22/17 10:50 AM
298 Fuzzing Case Studies
automation viewpoint these external systems create a critical access path into the
core automation. They have different operators and subcontractors but can share
the same network infrastructure.
The integration technologies have changed from traditional proprietary automa-
tion solutions (see Figure 9.6[a]) into commonly used office technologies (see Figure
9.6[b]). As IPs became the common nominator for integration, they also brought
with them security and real-time challenges as side effects (see Figure 9.7).
The traditional gateway-based integration required only hardening of the gate-
way device. This was also risk reduction: if the gateway was breached or DoS’ed,
the automation behind the gateway still remained operational. The cost-effective
common-of-the-shelf (COTS) solutions changed this risk landscape. Suddenly auto-
mation field devices and controllers were accessible with internet technologies. These
Figure 9.6 Change of traditional HART-based information collection (a) and common office
technology-based solutions (b).
Figure 9.7 Change in protocol from Modbus-over-serial to Modbus/TCP-over-100Base-T
physical layer with existing attack surface.
6760 Book.indb 298 12/22/17 10:50 AM
9.5 Industrial Automation Fuzzing 299
field devices were never designed to be part of a hostile network environment where
resources are not guaranteed to be sufficient. They were designed to be resilient
against random protocol errors that usually were the result of one badly behaving
device, errors generated by a hostile physical environment, or errors generated by
a random human-in-the-loop.
In 2015, fuzz tests and binary analysis of various industrial components were
conducted by Jari Seppälä at Tampere University of Technology (TUT). Results
were originally published at the 2015 IAEA meeting in Austria. Vulnerability test-
ing was done by using two different approaches. The first approach included fuzz
testing (or fuzzing), which is dynamic black-box testing where the device under test
is fed with anomalous and unexpected inputs in the hopes of bringing the target
to a denial of service (DoS) state or to manifest other unexpected behavior (Table
9.3). The second approach was static binary analysis, where the target firmware was
analyzed in order to provide information about the contained software components
and their known vulnerabilities.
A Pass-verdict here indicates that all tests were handled by the system without
apparent failures. A Fail-verdict indicates that the device crashed, rebooted, or some
subsystem in the device failed, denying further communications with the device
(DoS). Discovered vulnerabilities were verified by reproducing the test scenarios
after reboot of the device. Error modes shown in the DoS situations varied from
rejection of further communication to total halting or rebooting of the device.
Identification of these vulnerabilities was based on advanced fuzzing techniques
and target system monitoring during testing. Systematic coverage of the tested pro-
tocol implementation is generally able to reveal unknown vulnerabilities (also know
as 0-day vulnerabilities) as well as known vulnerabilities that could be exploited
remotely. However, the scope of testing was to only discover the vulnerabilities and
not to create the actual exploits for them.
A tested set of protocols represents only a subset of all possible protocols form-
ing the attack surface in each device. Full attack surface coverage requires complete
interface analysis on the device and optimal interoperability between the device and
the fuzzing tools. Furthermore, since the input space in negative testing is infinite,
the number of possible test cases is also infinite. For these tests, the test cases were
from the baseline groups representing a finite, basic set of test cases.
Security breaches in industrial systems are increasingly common today.20 While
vendors claim that security issues are under control, the above results indicate
Table 9.3 Security Testing Results from Fuzz Testing against a Range of Industrial Devices with
Support for Industrial Protocols
ISA95 level Type of Device IPv4 ICMPv6 Modbus CIP
L1 Ethernet control system Pass Fail Fail Not implemented
L2 Industrial switch/router Pass Pass Not implemented Fail
L1 AC drive Pass Not tested Fail Fail
20 CNN NEWS, Government hacks and security breaches skyrocket, http://www.cnn.com/2014/12/19/
politics/government-hacks-and-security-breaches-skyrocket/, referenced 2015-04-30.
6760 Book.indb 299 12/22/17 10:50 AM
300 Fuzzing Case Studies
otherwise. Without doubt, writing good-quality software is a nontrivial task and