### File Formats and Browsers

- **Images**: GIF, JPEG, PNG, and many others.
- **Videos**: AVI, MOV, MPEG variants, and more.
- **Audio**: WAV, MPEG variants, streaming protocols, and numerous other formats.

Browsers are among the simplest applications to instrument due to their standalone nature. It is straightforward to create a script that automatically starts and stops the browser, requesting a new test case each time it launches. Additionally, HTTP features such as the "META REFRESH" tag can be used to automatically refresh the page where the browser retrieves its test cases.

### Browser Fuzzing Techniques

Some browser fuzzers do not generate actual test cases; instead, they use JavaScript that runs within the browser. In-browser fuzzing can be performed by executing JavaScript commands one at a time or by generating and running large scripts. When the test case generator operates outside the browser, test cases can be recorded and saved to a file. However, if the generator runs inside the browser, it cannot report its state in the event of a fatal error and subsequent browser crash. To address this, most in-browser fuzzers use seeding, where the same seed number consistently generates the same output.

Mutation-based fuzzing is primarily used for binary file formats like images and videos, as well as formats with less strict syntactic rules than JavaScript. This technique can also be applied to formats executed in browser extensions, such as Flash and PDF.

In summary, any application functioning as a web browser or launched by a web browser should be tested using all available fuzzing tools. A variety of freely available browser fuzzing tools can be found through a simple search engine query. For example, Mangle was a well-known HTML fuzzer that discovered numerous bugs in Internet Explorer, and JSFunFuzz is a JavaScript fuzzer. NodeFuzz, developed by one of the authors of this text, is a web browser testing harness that allows cross-platform fuzz testing of various web browser features with user-defined test case generators and instrumentation modules. NodeFuzz has been used to identify over 150 vulnerabilities in Google Chrome, Mozilla Firefox, and Internet Explorer.

### Network Equipment Manufacturer Fuzzing

Fuzzing is particularly important for network equipment manufacturers because deploying updates to devices after release can be challenging. For instance, Cisco Systems has highlighted the critical role of fuzzing in their software development lifecycle.

#### Network Switch Fuzzing

Network switches and routers are essential components in network deployments. These devices come in various sizes and configurations and often run real-time operating systems like Wind River or QNX, which can pose challenges for on-device monitoring and instrumentation. Interfaces that can be fuzzed include router protocols, IP services, and various proxy components. Many home routers also integrate application-level gateways and antivirus systems.

Router protocols include:
- BGP
- OSPF
- IS-IS
- PIM-SM/DM
- GRE
- DVMRP
- RSVP
- VRRP
- RIP
- MPLS/LDP

### Mobile Phone Fuzzing

Mobile phone fuzzing is similar to fuzzing a typical desktop workstation, but the failure modes can be more severe, such as total corruption of the handset's flash memory, requiring reprogramming. Fuzzing can also corrupt the SIM card, especially when conducted over Bluetooth SIM Access Profile (SAP).

Mobile phones offer several open interfaces, including web servers, which some messaging techniques use to transfer files via HTTP. The most interesting interfaces and applications to fuzz in mobile phones include:
- Wireless (Bluetooth, WiFi)
- Web browser (HTTP and related interfaces)
- Email client (SMTP, POP, IMAP4)
- VoIP client (SIP, RTP, TLS)
- Instant messaging (SMS, MMS)
- Media formats (images, audio, video)
- Calendar data (vCal, iCal, vCard)

One of the authors of this text discovered a vulnerability in Apple's iPhone web browser using fuzzing techniques. Bluetooth presents a unique challenge in mobile phones due to its complex protocol stack. Several Bluetooth interfaces are vulnerable to attacks without user acknowledgment, such as Bluetooth/LCAP and Bluetooth/SDP. Low-level tests typically break the stack, while high-level fuzzing of Bluetooth profiles can disrupt applications running above the stack.

Mobile phones can be tested through various injection vectors. Active attacks push fuzzed messages to the phone, requiring no user action. Passive attacks, on the other hand, require test automation on the mobile phone to fetch each fuzzed test case. An example is testing web clients or email clients on a smartphone, which can cause issues if a test case causes a crash and the device repeatedly fetches the same test case from the cellular infrastructure.

In 2015, security researcher Joshua Drake used fuzzing to discover multiple serious security vulnerabilities in the Android multimedia backend, allowing an attacker to gain remote code execution by sending a crafted media file as an MMS message.

### Industrial Automation Fuzzing

Industrial protocols are often closed and vendor-proprietary, limiting the availability of fuzzing tools. This makes it difficult for industrial control system equipment and software manufacturers to rigorously test new products for potential security flaws. New vulnerabilities are frequently discovered and exploited in critical environments such as oil and gas, water, and electrical generation/distribution industries. Standard IT vulnerability testing does not typically address the unique failure modes, such as resource and timing constraints, in these control systems.

To address this, the Achilles Vulnerability Assessment Project was launched by the British Columbia Institute of Technology (BCIT) in 2003. The project aimed to create a test platform for systematically stress-testing critical equipment and software for both known and unknown security vulnerabilities before market release or field deployment.

SCADA fuzzing differs from other scenarios due to the legacy SCADA systems' complex infrastructures, which have been adapted into Ethernet-based technologies. New protocols include:
- Modbus/TCP
- ModbusPLUS
- Vnet/IP
- Ethernet/IP
- Profinet
- MMS (Manufacturing Message Specification)

The fuzz traffic generation is similar to other fuzzers, but the models need to account for the master-slave relationships in SCADA. Monitoring key device functionalities is crucial, and SCADA fuzzing frameworks divide control functionality into three areas:
- Ethernet communications processing
- Logic processing
- I/O processing

Each area is monitored separately to accurately quantify the SUT's response to testing stimuli. Key challenges in SCADA fuzzing include:
- Diversity in protocol implementations
- Ambiguity in protocol implementation
- Access to test equipment
- Complexity in system and test bed configuration
- Simulations with and without loaded behavior
- Gray-box access to SUT
- Multi-way redundancy in SUT
- Fail-over behavior of SUT
- Performance constraints
- Accounting for watchdogs, fail-safe modes, communication fail-over, etc.

The Achilles fuzzer suite includes storm-based test cases developed in response to lab and field testing. These tests help discover and validate functional constraints, such as maximum packet per second rates before a DoS condition. The traffic generated by each type of storm has a structurally correct header for the protocol being tested with a random payload, designed to load the target protocol heavily while minimizing interaction at high protocol layers.

Since the Stuxnet attack in 2010, the focus of ICS security audits has shifted to field devices and controllers. The ISA-95 reference model for industrial integration includes four layers: enterprise resource planning, manufacturing execution, process control, and field devices. This hierarchy shares network components and systems with external systems, creating critical access paths into the core automation.

The integration technologies have evolved from traditional proprietary solutions to commonly used office technologies, bringing security and real-time challenges. Traditional gateway-based integration required only hardening of the gateway device, reducing risk. However, cost-effective COTS solutions changed this, making field devices and controllers accessible via internet technologies. These devices were not designed for hostile network environments and were intended to be resilient against random protocol errors.

In 2015, Jari Seppälä at Tampere University of Technology conducted fuzz tests and binary analysis of various industrial components. The results, published at the 2015 IAEA meeting, showed that security breaches in industrial systems are increasingly common. While vendors claim that security issues are under control, the test results indicate otherwise. Writing high-quality software remains a nontrivial task.