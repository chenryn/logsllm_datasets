(cid:2)12 → (cid:2)13
(cid:2)13 → (cid:2)14
(cid:2)14 → (cid:2)18
(cid:2)18 → (cid:2)19
Argument
Values
{I = "/opt/proj",
O = "/tmp/proj.tar"}
{F3 = "/tmp/proj.tar",
M3 = WR, F D3 = 3}
{F6 = "/opt/proj"}
{F8 = "/opt/proj/README"}
{ F11 = "/opt/proj/README",
M11 = RD, F D11 = 4}
{F D12 = 4}
{F D13 = 3}
{F D14 = 4}
8 = "/opt/proj/src"}
{F (cid:2)
{F6 = "/opt/proj/src"}
{F8 = "/opt/proj/src/a.c"}
{ F11 = "/opt/proj/src/a.c",
M11 = RD, F D11 = 4}
{F D12 = 4}
{F D13 = 3}
14 = 4}
{F D(cid:2)
{F D18 = 3}
Satisﬁed Data-
Flow Property
F3 equal O,
M3 elementOf {WR}
F6 isWithinDir I
F8 isWithinDir F6
F11 equal F8
M11 elementOf {RD}
F D12 equal F D11
F D13 equal F D3
F D14 equal F D11
8 isWithinDir F6
F (cid:2)
F6 isWithinDir I
F8 isWithinDir F6
F11 equal F8
M11 elementOf {RD}
F D12 equal F D11
F D13 equal F D3
14 equal F D11
F D(cid:2)
F D18 equal F D3
Figure 2. A sample trace of the program in Figure 1 and the observed argument relationships.
will be learnt from the above trace, but these are not shown
here, since these values will vary when trained with many
different traces, and will eventually be discarded.
From the above example, it is evident that binary rela-
tionships involving ﬁle names and ﬁle descriptors are very
useful, as they allow us to track many interesting dataﬂow
properties of the traces. It is interesting to note that some of
these relationships arise due to the properties of the program
environment, rather than the program itself. For instance,
the relationship isWithinDir between F8 and F6 exists due
to the fact that in the ﬁle system, the absolute path name
of a ﬁle has the name of its parent directory as a preﬁx. A
static analysis technique will have a hard time extracting
such relationships, since it is obviously impossible to infer
the semantics of the ﬁle system from this program.
3. Learning Argument Relationships
In this section, we describe our algorithms for learning the
relationships described in the last section. These algorithms
take labeled traces as inputs, and output the relationships
that hold in all traces.
3.1. Learning Unary Relations
Learning unary relationships is straight-forward. With each
event argument, the algorithm maintains a list of all the val-
ues encountered in all the traces. If the number of values
exceeds a threshold, then the algorithm approximates the
set. The kind of approximation that is appropriate for each
event argument must be externally speciﬁed, through a con-
ﬁguration ﬁle. A few lines from this conﬁguration ﬁle are
shown in Figure 3. The ﬁrst line speciﬁes that for event ar-
guments that represent ﬁle modes, up to 4 distinct values
should be remembered.
(Other parts of the conﬁguration
value kind=[MODE] approx=BIT OR max=4;
value kind=[PATH] approx=PREFIX max=10
must=["/etc/*","/lib/*"];
value kind=[FD, SD] approx=RANGE max=4;
Figure 3. A sample conﬁguration ﬁle.
ﬁle specify which event arguments represent what type of
data.) Beyond that, the values are to be approximated using
a bit-or operation. The second line is applicable to ﬁle or
directory arguments. A maximum of 10 distinct values are
to be remembered, after which they are to be approximated
using a common preﬁx operation. This line also states that
for ﬁle names that match "/etc/*" or "/lib/*", the
name should be remembered, regardless of the size of the
set. The last line states that for ﬁle and socket descriptors, a
maximum of 4 distinct values should be remembered, after
which only the range of values is to be kept.
Runtime and Storage Requirements. Unary relations can
be learnt in O(N ) time, where N is the length (measured
in terms of number of bytes) of the labeled trace, provided
we restrict ourselves to simple approximation operations on
strings such as the longest common preﬁx (LCP). Note that
LCP can be computed quickly if the strings are represented
using a trie [34]. Construction of tries takes time that is
linear in the size of input strings. Computing the common
preﬁx takes no longer than the length of the shortest string
in the trie. Since at least one insertion will take place before
a second invocation of the common preﬁx operation, it can
be shown that the total time taken to maintain the LCP in-
formation is bounded by the total length of all strings in the
input trace, which, in turn, is bounded by the trace length.
Storage requirements are dictated by (a) the total number
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:23 UTC from IEEE Xplore.  Restrictions apply. 
1. procedure LearnRelations(EvArg X, Value V ) {
2.
3.
4.
5.
6.
7. }
Y = ValTable.lookup(V, R);
CurRels[R][X] = CurRels[R][X] ∩ Y;
Yn = Y ∩ NewArgs(X);
CurRels[R][X] = CurRels[R][X] ∪ Yn;
ValTable.update(X, V );
Figure 4. Relationship learning algorithm
are
using
the
(cid:2)
relations
of distinct argument names in the traces, and (b) the max-
imum size of sets before an approximation is performed.
Note that due to the way we generate labeled traces, (a) is
bounded by the size of the control-ﬂow model for N-gram,
FSA and VtPath methods. The key point here is that even
if the size of the traces is increased without a bound, the
storage requirements are still going to be bounded.
3.2. Learning Binary Relations
Binary
procedure
learnt
LearnRelations shown in Figure 4. This procedure is
invoked repeatedly for each event
trace,
and for each argument to this event. LearnRelations is
parameterized with respect to a relation R, and is designed
T are
to learn RT .
discussed subsequently.)
the
current argument name X, and its current value V . It uses
two global data structures: (a) ValTable, which is used to
store the values of the most recent occurrences of all event
arguments, and (b) CurRels, which is indexed by a relation
R and an argument name X, and stores the set Ycur of
all arguments Yc such that X RTp Yc holds for the preﬁx
Tp of current trace up to, but not including X. Both data
structures are initialized to be empty at the beginning of the
algorithm.
T and Rk
It takes two arguments:
(Modiﬁcations to learn R
in the input
At line 2, ValTable is looked up to identify the set Y of
all arguments Y such that X R Y holds for the most recent
In the next step, arguments Yd in Ycur that
value of Y .
aren’t in Y are deleted, as the latest occurrence of Yd didn’t
possess the speciﬁed relationship with X.
Line 4 is designed to handle event arguments Yn whose
ﬁrst appearance in the current trace occurred after the pre-
vious occurrence of X. We rely on a function NewArgs to
identify such arguments. Note that for such Yn, the con-
dition characterizing X RTp Yn holds vacuously. At the
same time, the relationship has not actually been veriﬁed to
hold even once, so Yn does not appear in CurRels[R][X].
Therefore, such event arguments are explicitly added to
CurRels[R][X] at line 5. Finally, ValTable is updated at
line 6 with the latest value of X.
A slight generalization of this algorithm is necessary
when dealing with relations that take an additional constant
parameter. For instance, consider the relation isWithinDir
such that X isWithinDir Y iff X = Y s, i.e., X is ob-
tained by adding a sufﬁx s to Y . In this case, the sufﬁx s
may change (“shrink”) as we examine more Y, X pairs. For
example, with a trace Y = abc, X = abcde, s has the value
de, but when an additional pair of X, Y values are added,
as in the trace Y = abc, X = abcde, Y = ef g, X = ef gd,
s becomes d∗. To support such relationships, a reﬁnement
of isWithinDir, which modiﬁes the parameter s, will be
needed at step 3.
Learning R
(cid:2)
T requires a slight change to the algorithm.
Speciﬁcally, at step 3, we do not delete some variables from
CurRels[R][X] even when they aren’t in Y. This excep-
tion is made for those variables Ye that haven’t appeared
on the trace since the previous occurrence of X. This can
be easily checked by associating timestamps for arguments,
and checking that the last timestamp of Ye is less than the
timestamp of the previous occurrence of X. Learning Rk
requires another kind of change: rather than deleting old
values of an event argument X each time a new value is
seen, we retain the k most recent values of X.
Runtime and Storage Requirements. Below, we discuss
the runtime and storage requirements for learning a single
relation. The LearnRelations algorithm is invoked O(M )
times, where M is the total number of events in the trace.
(This assumes that each event has O(1) arguments.) If a
hash table representation is used, and R is the equality re-
lation on integral types, then line 2 of the algorithm can
be completed in |Y| time. If R is an operation such as a
isWithinDir, contains, or hasSameDir, then this step can
be completed in time proportional to |Y| + length(V ) by
maintaining ValTable as a trie. Adding this over the M it-
erations of LearnRelations, we arrive at
T
M(cid:2)
|Y| +
M(cid:2)
i=1
i=1
length(Xi)
where Xi denotes the ith argument in the trace. This ex-
pression can be simpliﬁed to M ∗ |Y| + N. Noting that |Y|
is bounded by the number distinct event arguments, which
in turn is bounded by the size S of the FSA, we get a bound
of O(SM + N ) worst-case runtime for the approach, when
FSA method is used.
In the previous paragraph, we computed the runtime for
executing line 2 of LearnRelations.
It can be easily seen
that the complexity of line 3 and 4 are bounded by the size
of Y. Also, since the size of Yn is smaller than that of Y, the
runtime of line 5 is also bound by |Y|. Finally, the update of
the value table takes time bounded by length(V ) for integer
and string relations. Thus, the runtime of all other steps
is bounded by the runtime of line 2, and hence the overall
complexity of O(SM + N ).
The above argument is based on the worst-case size of
Y. By retracing the arguments, it is easy to see that we can
replace S by the average size A of Y, and the complexity
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:23 UTC from IEEE Xplore.  Restrictions apply. 
argument would still hold. In our experiments, we have ob-
served that A is relatively small (less than 10), while S is
much larger – of the order of hundreds. Moreover, N was
about a hundred times larger than M. As a result, the factor
N dominates in practice over SM. This leads to a practi-
cally efﬁcient algorithm that takes time linear in the size of
the input trace ﬁle length.
It is easy to see that the storage requirements for learn-
ing binary relations is dependent on the number of distinct
event arguments. A worst-case storage complexity that is
quadratic in S can be established, but in practice, we ﬁnd
that the storage requirements are more or less linear in S.
Dealing With Multiple Traces. The obvious approach for
handling multiple traces is to process each trace using
LearnRelations, one after the other. The global data struc-
tures need to be appropriately reinitialized between any two
traces. In particular, CurRels table is not reinitialized be-
tween traces. ValTable is cleared at the end of each trace.
Finally, a slight modiﬁcation is necessary to the deﬁnition
of NewArgs(X). It will include only those event arguments
Y such that no occurrence of Y has preceded an occurrence
of X in the current trace up to X, or in any of the previously
processed traces.
Specifying Relations of Interest. Our algorithm is de-
signed to support common binary relations such as equal,
and ﬁle name/path related relations such as isWithinDir,
contains, hasSameDirAs, hasSameBaseAs, and has-
SameExtensionAs. We limit relationship learning within
arguments that represent the same kinds of objects, e.g.,
a relationship is learnt among ﬁle descriptors, but none is
learnt between a ﬁle descriptor and a userid. The relations
of interest are speciﬁed using a conﬁguration ﬁle, a section
of which is shown below:
relation equal
relation isWithinDir
relation hasSameDirAs
kind=[FD, UID, PATH]
kind=[PATH]
kind=[PATH]
The ﬁrst line speciﬁes that for arguments representing
ﬁle descriptors, userids and ﬁle names, equality relationship
should be learnt. The second and third lines specify that
for ﬁle name arguments, isWithinDir and hasSameDirAs
relations are of interest.
Observe that our model learning algorithm discounts the
possibility of coincidental relationships, in the sense that
any relationship that appears to hold is assumed to be a real,
meaningful relationship. This assumption works well if the
probability of accidental relationships is rather small. How-
ever, for ﬁle descriptors, which typically range over a small