        {
            public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
            {
                Console.WriteLine("GetObjectData of ISerializationSurrogate");
                info.AddValue("str", ((MyObject)obj).str);
            }
            public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
            {
                Console.WriteLine("SetObjectData of ISerializationSurrogate");
                MyObject m = new MyObject();
                m.str = (string)info.GetValue("str", typeof(string));
                return m;
            }
        }
        class Program
        {
            static void Main(string[] args)
            {
                try
                {
                    MyObject myObject = new MyObject();
                    myObject.str = "hello";
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        // 构建formatter
                        BinaryFormatter binaryFormatter = new BinaryFormatter();
                        // 设置序列化代理选择器
                        SurrogateSelector ss = new SurrogateSelector();
                        ss.AddSurrogate(typeof(MyObject), binaryFormatter.Context, new MySerializationSurrogate());
                        // 赋值给formatter 这里是否设置代理选择器决定了序列化的生命周期
                        binaryFormatter.SurrogateSelector = ss;
                        // 序列化
                        binaryFormatter.Serialize(memoryStream, myObject);
                        // 重置stream
                        memoryStream.Position = 0;
                        myObject = null;
                        // 反序列化
                        myObject = (MyObject)binaryFormatter.Deserialize(memoryStream);
                        Console.WriteLine(myObject.str);    // hello
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.StackTrace);
                }
                Console.ReadKey();
            }
        }
    }
这是一个使用了SurrogateSelector代理选择器的序列化例子，输出如下
    TestOnSerializing
    GetObjectData of ISerializationSurrogate
    TestOnSerialized
    TestOnDeserializing
    SetObjectData of ISerializationSurrogate
    TestOnDeserialized
    hello
可以看到四个回调事件是只要进行声明就会执行。其中我们自己的代理选择器MySerializationSurrogate实现ISerializationSurrogate接口的两个方法。当我们设置了代理选择器时，它的生命周期就像打印的顺序一样。
当注释掉设置代理选择器的那行代码
    //binaryFormatter.SurrogateSelector = ss;
其输出是这样的
    TestOnSerializing
    GetObjectData of MyObject.class
    TestOnSerialized
    TestOnDeserializing
    MyObject(SerializationInfo info, StreamingContext context)
    TestOnDeserialized
    hello
当对象其不实现ISerializable接口时，他的生命周期仅限于回调函数(使用dotnet默认序列化策略)，输出如下：
    TestOnSerializing
    TestOnSerialized
    TestOnDeserializing
    TestOnDeserialized
    hello
单独来看一下MyObject类的序列化构造函数
    //实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。
    protected MyObject(SerializationInfo info, StreamingContext context)
    {
        Console.WriteLine("MyObject(SerializationInfo info, StreamingContext context)");
        str = info.GetString("str");
    }
SerializationInfo info变量中表示序列化流的信息，对象的类型和值都存储在其中，查看类定义
可见其存储了对象类型、成员个数、程序集名称、类型名称等，还有一些AddValue的重载用于添加类实例字段变量键值对。其实这个序列化构造函数在代理选择器中表现的更加明显：
    class MySerializationSurrogate : ISerializationSurrogate
    {
        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
        {
            Console.WriteLine("GetObjectData of ISerializationSurrogate");
            info.AddValue("str", ((MyObject)obj).str);
        }
        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
        {
            Console.WriteLine("SetObjectData of ISerializationSurrogate");
            MyObject m = new MyObject();
            m.str = (string)info.GetValue("str", typeof(string));
            return m;
        }
    }
一个get一个set表示对象的序列化形式和反序列化重构时的处理方式。而非代理选择器只实现ISerializable接口的类只有GetObjectData，其类自身的序列化构造函数等同于代理选择器的SetObjectData。
此时用一张图表示序列化及反序列化完整的生命周期：
# ysoserial.net
对于dotnet反序列化漏洞来讲，ysoserial.net是一个绕不过去的工具，而其使用的方法及其设计架构都是值得我们学习的东西。
ysoserial.net主要分为formatter、gadget、plugin三个功能。
    == GADGETS ==
            (*) ActivitySurrogateDisableTypeCheck [Disables 4.8+ type protections for ActivitySurrogateSelector, command is ignored]
                    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) ActivitySurrogateSelector [This gadget ignores the command parameter and executes the constructor of ExploitClass class] (supports extra options: use the '--fullhelp' argument to view)
                    Formatters: BinaryFormatter (2) , LosFormatter , SoapFormatter
            (*) ActivitySurrogateSelectorFromFile [Another variant of the ActivitySurrogateSelector gadget. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use semicolon to separate the file from additionally required assemblies, e. g., '-c ExploitClass.cs;System.Windows.Forms.dll'] (supports extra options: use the '--fullhelp' argument to view)
                    Formatters: BinaryFormatter (2) , LosFormatter , SoapFormatter
            (*) AxHostState
                    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) ClaimsIdentity
                    Formatters: BinaryFormatter , LosFormatter , SoapFormatter
            (*) DataSet
                    Formatters: BinaryFormatter , LosFormatter , SoapFormatter
            (*) ObjectDataProvider (supports extra options: use the '--fullhelp' argument to view)
                    Formatters: DataContractSerializer (2) , FastJson , FsPickler , JavaScriptSerializer , Json.Net , SharpSerializerBinary , SharpSerializerXml , Xaml (4) , XmlSerializer (2) , YamlDotNet < 5.0.0
            (*) PSObject [Target must run a system not patched for CVE-2017-8565 (Published: 07/11/2017)]
                    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) RolePrincipal
                    Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) SessionSecurityToken
                    Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) SessionViewStateHistoryItem
                    Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) TextFormattingRunProperties [This normally generates the shortest payload] (supports extra options: use the '--fullhelp' argument to view)
                    Formatters: BinaryFormatter , DataContractSerializer , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) ToolboxItemContainer
                    Formatters: BinaryFormatter , LosFormatter , SoapFormatter
            (*) TypeConfuseDelegate
                    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer
            (*) TypeConfuseDelegateMono [Tweaked TypeConfuseDelegate gadget to work with Mono]
                    Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer
            (*) WindowsClaimsIdentity [Requires Microsoft.IdentityModel.Claims namespace (not default GAC)] (supports extra options: use the '--fullhelp' argument to view)
                    Formatters: BinaryFormatter (3) , DataContractSerializer (2) , Json.Net (2) , LosFormatter (3) , NetDataContractSerializer (3) , SoapFormatter (2)
            (*) WindowsIdentity
                    Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter
            (*) WindowsPrincipal
                    Formatters: BinaryFormatter , DataContractJsonSerializer , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter
    == PLUGINS ==
            (*) ActivatorUrl (Sends a generated payload to an activated, presumably remote, object)
            (*) Altserialization (Generates payload for HttpStaticObjectsCollection or SessionStateItemCollection)
            (*) ApplicationTrust (Generates XML payload for the ApplicationTrust class)
            (*) Clipboard (Generates payload for DataObject and copy it into the clipboard - ready to be pasted in affected apps)
            (*) DotNetNuke (Generates payload for DotNetNuke CVE-2017-9822)
            (*) Resx (Generates RESX and .RESOURCES files)
            (*) SessionSecurityTokenHandler (Generates XML payload for the SessionSecurityTokenHandler class)
            (*) SharePoint (Generates poayloads for the following SharePoint CVEs: CVE-2020-1147, CVE-2019-0604, CVE-2018-8421)
            (*) TransactionManagerReenlist (Generates payload for the TransactionManager.Reenlist method)
            (*) ViewState (Generates a ViewState using known MachineKey parameters)
查看其使用说明，可见众多gadget即gadget所支持的formatter。抽象一点说，formatter标志为反序列化入口，gadget是链条，而plugin是针对其他应用如SharePoint对于反序列化数据的加密解密做一个实现。
# 后文
本系列其他文章将会分别讲解各个formatter，并在其中穿插gadget的具体原理，未涉及的gadget则会单独拿出来进行讲解。