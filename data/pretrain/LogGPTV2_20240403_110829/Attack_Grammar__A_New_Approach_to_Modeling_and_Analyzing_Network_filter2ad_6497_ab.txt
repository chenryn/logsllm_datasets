from PDA without changing the expressive power. 
Definition 3.1: An attack grammar is a 4-tuple (V, 
T,  R,  S),  where  V  is  a  set  of  variables,  T  is  a  set  of 
terminal  variables,  R  is  a  set  of  productions,  and  S  is 
the start symbol. 
We can construct a context-free grammar from the 
PDA  model  using  approaches  described  in  [26]. 
Particularly  for  attack  grammars,  for  each  transition 
function δ(q,a,X) = (p,YZ), we add a production  [qXr]
→a[pYk][kZr] to the set R for every state r and k. The 
variable  [qXr]  denotes  the  process  of  moving  from 
state q to state r and popping out the stack alphabet X 
from the top out of the stack. Therefore the meaning of 
the production [qXr]→a[pYk][kZr] is that: In order to 
move  from  state  q  to  state  r  and  pop  out  the  stack 
alphabet X at the same time, we can first read an input 
symbol  a  and  then  move  from  state  p  to  state  k, 
popping out stack alphabet Y, and then move from state 
k to state r, popping out stack alphabet Z.  
3.2. Grammar Simplification 
3.2.1. Eliminating ε-Production: The ε-productions in 
attack  grammars  are  generated  by  the  ε-transitions  in 
the PDA model. Eliminating ε-productions is critical in 
simplification  of  the  attack  grammar.  In  fact,  the 
process of eliminating ε-productions actually generates 
more  productions  in  the  grammar.  The  algorithm  for 
eliminating  ε-productions  first  marks  all  “nullable” 
variables,  which  produce  ε  in  zero  or  multiple  steps. 
Proof exists that the algorithm in figure 3 is capable of 
marking all “nullable” variables in the grammar [26].  
Algorithm  
The context-free grammar G = (V, T, R, S) 
The new constructed grammar G1 = (V, T, R1, S) 
Initiate Queue M and Add ε to M 
while new variables are added to M 
for each production A→α  
if each variable X in α is in M 
Mark A as nullable 
Add A to M 
for each production A→aX1X2 
if X1 is nullable 
Add A→aX2 and A→aX1X2 into R1 
else if X2 is nullable 
Add A→aX1 and A→aX1X2 into R1 
else if X1 and X2 are both nullable      
Add A→aX2, A→aX1, A→aX1 X2, into R1  
if a is not ε 
Add A→a into R1 
else 
Add A→aX1X2 into R1 
for each production A→aX 1 
if X1 is nullable 
Add A→aX1 into R1 
 if a is not ε 
Add A→a into R1  
else 
Add A→aX1 into R1 
for each production A→a 
if a is not ε 
Add A→a into R1    
Figure 3.  Algorithms for finding and 
eliminating nullable variables 
logical  meaning 
3.2.2.  Eliminating  Meaningless  Variables:  Recall 
that  in  our  PDA  construction  algorithm  in  figure  2, 
stack  alphabet  is  only  popped  out  when  the  attacker 
reaches  the  final  state.  It  is  apparently  that  only  the 
non-terminal variables with the form [pYr], where r is 
the  final  state,  have 
in  attack 
grammars.  Eliminating  meaningless  non-terminal 
variables  simplifies  the  attack  grammar  significantly 
and  the  meaning  of  the  non-terminal  variables  is 
clearer  thereafter:  Each  non-terminal  variable  stands 
for the process of moving from a certain attacker status 
on certain host (cluster) to the final state. Therefore the 
total  number  of  different  non-terminal  variables  is  no 
more than MN, where M is the number of host clusters 
and  N  is  the  number  of  different  attacker  statuses. 
Moreover, we notice that only productions of the form 
A→aB  or  A→a  are  left  in  the  attack  grammar  after 
simplification. 
3.2.3.  Eliminating  Non-Generating  Variables:  A 
variable is generating if it can generates certain strings. 
All terminal  variables are  generating by definition. In 
attack grammars, we only need to focus on analysis of 
generating variables, because a non-generating variable 
implies  that  it  cannot  be  the  parsing  tree  of  any 
substring  of 
language  and  hence  no  attack 
sequences  can  be  “generated”  using  this  variable. 
the 
the 
Algorithms  for  finding  and  eliminating  all 
generating  variables  can  be  found  in  [26],  in  which 
related proofs are also provided.  
3.2.4.  Eliminating  Non-Reachable  Variables:  A 
variable T is defined as reachable if T can be produced 
from the initial variable S in zero or multiple steps. A 
non-reachable  terminal  variable  implies  that  when 
assuming  the  attacker  starts  his  intrusion  from  the 
outside  network,  the  exploit  corresponding  to  the 
terminal  variable  may  not  be  useful  in  the  network 
attack  scenario.  As  we  will  see  in  section  4,  non-
reachable  variables  are  still  meaningful 
in  our 
application.  However,  a  grammar  without  non-
reachable  variables  can  help  us  focus  on  those 
exploitations  that  are  usable  by  outside  attackers. 
Algorithms  for  finding  reachable  variables  can  be 
found in [26]. 
3.3. Discussion 
In  our  grammar-based  approach 
to  analyzing 
network  attack  sequences,  using  certain 
type  of 
automata and grammar to model the scenario and using 
strings accepted by the grammar to represent network 
attack  sequences  are  the  core  idea.  But  why  use 
context-free  grammar  and  PDA?  All  the  previous 
approaches  ([1][14][25]),  no  matter  what  the  attack 
graph looks like, use a finite state automaton to model 
network attack scenarios, because they do not have any 
kind  of  memory  system  to  memorize  the  attack 
histories. The fact is that using finite state automata to 
model  this  kind  of  scenario  is  weak  due  to  its 
memoryless  property  and  only  Turning  machine  is 
sufficient to solve such problems. PDA  has one stack 
memory  which  can  be  accessed  only  on  the  top. 
Therefore it is insufficient in expressive power as well.  
We  use  PDA  and  context-free  grammar  in  our 
research is a tradeoff. On the one hand, using PDA to 
model  network  attack  components  is  better  than 
previous  finite  states  methods  using  {host,  privilege} 
pairs to represent states, because it allows us to model 
more  complex  attacker  statuses.  Also,  since  in  PDA 
model, each state (except for the final state) represents 
a  host  cluster,  administrators  can  comprehend  and 
examine the network model more easily. On the other 
hand,  it  avoids  the  complexity  of  dealing  with  those 
more  sophisticated  automata  and  hence  facilitates  the 
development of a practical approach. 
4. Grammar Analysis 
4.1. Constructing Attack Graphs 
208218
The attack grammar can be regarded as a compact 
representation  of  attack  graphs.  In  this  section,  we 
propose  approaches  to  converting  the  attack  grammar 
into different types of attack graphs.  
4.1.1.  Middle-level  Graphs:  Some  of  the  previous 
works  [1]  represent  attack  paths  using  middle-level 
graphs, in which paths are implied in the graph rather 
than  shown  directly.  MP  graph  is  of  this  kind.  To 
construct  a  middle-level  graph  like  MP  graph,  every 
non-terminal  variable  in  the  attack  grammar  should 
first  be  converted  into  a  node.  If  the  relationship 
between  two  non-terminal  variables  A  and  B  is 
indicated by a production A->aB, then an edge should 
be added to connect the two corresponding nodes. The 
graph  constructed  in  this  way  is  a  variation  of  MP 
graph. 
4.1.2. Acyclic Full Attack Graphs: One can also use 
attack grammars to generate all potential attack paths, 
and hence build a full graph. Intuitively, the collection 
of attack paths is just the set of all strings that can be 
generated by the attack grammar. Moreover, in reality 
attackers seldom exploit the same vulnerability on the 
same host more than once, nor do they exploit different 
vulnerabilities on the same host to gain a privilege that 
has  already  been  obtained.  Therefore,  the  generated 
full  attack  graph  must  eliminate  all  cyclic  paths. 
Exploring the attack grammar with a variation of DFS 
method can derive acyclic attack paths exhaustively. 
Algorithm  
The context-free grammar G = (V, T, R, S) 
Initialize level = 0; 
push [S, Z0, level] into stack1 
while stack1 not empty 
pop from stack1 non-terminal variable A, terminal  
variable a,  corresponding level n 
if A is not marked 
mark A 
clear stack to level n (unmark variables) 
push a to stack2 
for each production A->bB 
     push [B, b, n+1] to stack1 
for each production A->b 
     push c to stack2 
     record the attack path 
     pop from stack2 
Figure 4. Algorithm for constructing attack 
graphs 
4.2. Security Evaluation 
Various  security  evaluations  can  be  derived  from 
attack grammars. Using attack grammars together with 
their  simplification  algorithms,  the  administrators  can 
answer the following questions. 
Is  the  attacker  able  to  compromise  the 
(1) 
target hosts from the outside network? 
209219
It  is  notable  that  if  the  initial  variable  S  is  not 
marked  as  generating,  the  attacker  cannot  accomplish 
the  intrusion  from  outside  network.  And  on  the  other 
hand, S is generating means there exists a path which 
leads the attacker to the target. 
Is  the  attacker  able  to  compromise  the 
target hosts from inside network? If so, which hosts 
could be the starting point? 
(2) 
Recall that the non-terminal variables correspond to 
certain  attacker  status  on  certain  host.  All  generating 
non-terminal variables constitute the collection of hosts 
from  which  the  attacker  can  initiate  the  intrusion  and 
reach the final targets.  
(3)  Which  type  of  vulnerabilities  does  the 
administrator  need  to  fix  in  order  to  secure  the 
network?  
All  reachable  terminal  variables  are  the  actual 
exploits  that  the  attacker  needs  to  fulfill  his  intrusion 
from  his  initial  starting  point.  Non-reachable  terminal 
variables  may  be  used  when  attackers’  initial  point  is 
inside  the  enterprise  network.    Therefore,  when  the 
network  hardening  policy  is  to  be  made  based  on  the 
“outside  threats  only”  assumption,  an  administrator 
needs 
vulnerabilities 
corresponding  to  the  reachable  terminal  variables. 
Temporarily, the problem of the minimal critical set of 
non-terminal variables has not been addressed yet. But 
it  is  likely  that  approaches  used  in  attack  graphs  [12] 
are also suitable for attack grammars.  
eliminate 
those 
(4)  Can a given attack sequence be used by the 
only 
attacker to fulfill the intrusion? 
Determining whether or not an attack sequence can 
be  used  for  the  attacker  to  achieve  his  final  goal  is 
equal to determining whether a string of letters can be 
generated by the attack grammar. The Cocke-Younger-
Kasami (CYK) algorithm [8] is adopted in our research. 
The result of the algorithm can tell the administrators 
whether the attack sequence can lead the attacker to his 
final target.  
4.3. IDS Alerts Correlation 
An  important  application  of  the  attack  grammar  is 
IDS  alerts  correlation.  IDSs  which  produce  large 
volume  of  alerts  may  generate  many  false  positives 
(false  alert)  and  false  negatives  (non-detected  attack). 
It  is  very  difficult  for  administrators  to  manage  the 
inundant elementary security alerts together with these 
false  alarms.  The  attack  grammar  can  help  solve  this 
problem.  We  follow  the  approaches  in  [7]  to  use  a 
vulnerability-centric  method  in  IDS  alert  correlation. 
In this approach we match alerts with exploits directly. 
A  variation  of  CYK  algorithm  is  developed  to 
correlate alerts. Suppose the string to be correlated is w 
=  a1a2a3a4,  and  we  construct  the  table  as  shown  in 
figure  5  from  the  bottom  up  to  the  top,  line  by  line. 
Each Xij represents a set of non-terminal variables. X11 
contains all the non-terminal variables that have prefix 
a1, and X22 contains all the non-terminal variables that 
have prefix a2, and so on. In the second line, we fill X12 
with  all  the  non-terminal  variables  A  which  is  in 
production  A->a1B,  where  B∈X22.  The  construction 
goes on till the top-left of the table. The non-terminal 
variables  appearing  in  X14  represent  our  correlated 
scenario. That is equal to say that the input string is a 
prefix  of  the  strings  that  are  derived  from  the  non-
terminal  variables  in  X14.  The  algorithm  is  shown  in 
figure 6. We note that the construction of the table can 
be  also  conducted  alone  diagonals:  X11,  X22,  X12,  X33, 
X23,  X13,…In  this  way,  we  can  use  the  algorithm  to 
incrementally  correlate  each  new  arrival  alert  with 
those already correlated. 
X
X
X
X
14
13
12
11
X
X
X
24
23
22
X
X