    (RN - FRN) * (value of expression for row at CRN) =   
(4-3.5)*(4) + (3.5 - 3)*(5) = 4.5;  
```  
当输入参数为数组时, 返回值也是数组, 如下 :   
```  
postgres=# select percentile_cont(array[0.5, 1]) within group (order by id) from test;  
 percentile_cont   
-----------------  
 {5.5,1000}  
(1 row)  
```  
接下来看一下稀疏分布 :   
返回行号大于等于指定百分比的值或表达式值.  
例如 :   
```  
postgres=# select id from test;  
  id    
------  
    1  
    2  
    3  
    4  
    5  
    6  
    7  
    8  
  100  
 1000  
(10 rows)  
```  
当前组一共10行, 取位置在0.5的.即行号>=0.5*10的第一行的值或表达式的值.  
```  
postgres=# select percentile_disc(0.5) within group (order by id) from test;  
 percentile_disc   
-----------------  
               5  
(1 row)  
postgres=# select percentile_disc(0.5) within group (order by id^2) from test;  
 percentile_disc   
-----------------  
              25  
(1 row)  
```  
输入0.11, 表示行号返回>=1.1的第一行的值.  
```  
postgres=# select percentile_disc(0.11) within group (order by id) from test;  
 percentile_disc   
-----------------  
               2  
(1 row)  
```  
再看个例子  
```  
postgres=# select id,info,count(*) over (partition by info) from test;  
  id  | info  | count   
------+-------+-------  
    1 | test1 |     1  
    2 | test2 |     6  
    3 | test2 |     6  
    4 | test2 |     6  
    5 | test2 |     6  
    6 | test2 |     6  
    7 | test2 |     6  
    8 | test3 |     2  
  100 | test3 |     2  
 1000 | test4 |     1  
(10 rows)  
```  
取分组的数据, 主要看test2 这个组一共有6行, 0.3*6=1.8, 所以它需要取第二行的数据.  
```  
postgres=# select info,percentile_disc(0.3) within group (order by id) from test group by info;  
 info  | percentile_disc   
-------+-----------------  
 test1 |               1  
 test2 |               3  
 test3 |               8  
 test4 |            1000  
(4 rows)  
```  
## 注意  
最终计算的是表达式的分布数, 而不是计算列值的分布数后再计算表达式.  
验证如下 :   
或者你可以看代码 :   
```  
postgres=# select percentile_cont(0.5) within group (order by id^2),info from test group by info;  
 percentile_cont | info    
-----------------+-------  
               1 | test1  
            20.5 | test2  
            5032 | test3  
         1000000 | test4  
(4 rows)  
postgres=# select percentile_cont(0.5) within group (order by id),info from test group by info;  
 percentile_cont | info    
-----------------+-------  
               1 | test1  
             4.5 | test2  
              54 | test3  
            1000 | test4  
(4 rows)  
postgres=# select 4.5^2;  
      ?column?         
---------------------  
 20.2500000000000000  
(1 row)  
postgres=# select 54^2;  
 ?column?   
----------  
     2916  
(1 row)  
```  
## 参考  
1\. http://www.postgresql.org/docs/devel/static/functions-aggregate.html  
2\. [《PostgreSQL aggregate function 1 : General-Purpose Aggregate Functions》](../201503/20150302_01.md)  
3\. [《PostgreSQL aggregate function 2 : Aggregate Functions for Statistics》](../201503/20150303_03.md)  
4\. [《PostgreSQL Oracle 兼容性 - WITHIN GROUP (sql standard ordered set aggregate functions)》](../201308/20130801_01.md)  
5\. src/backend/utils/adt/orderedsetaggs.c  
6\. 算法 :   
PERCENTILE_CONT函数解释 :   
```  
The result of PERCENTILE_CONT is computed by linear interpolation between values after ordering them.   
Using the percentile value (P) and the number of rows (N) in the aggregation group,   
you can compute the row number you are interested in after ordering the rows with respect to the sort specification.   
This row number (RN) is computed according to the formula RN = (1+(P*(N-1)). The final result of the aggregate function is computed by   
linear interpolation between the values from rows at row numbers CRN = CEILING(RN) and FRN = FLOOR(RN).  
The final result will be:  
  If (CRN = FRN = RN) then the result is  
    (value of expression from row at RN)  
  Otherwise the result is  
    (CRN - RN) * (value of expression for row at FRN) +  
    (RN - FRN) * (value of expression for row at CRN)  
```  
PERCENTILE_DISC函数解释 :   
```  
The first expr must evaluate to a numeric value between 0 and 1, because it is a percentile value.   
This expression must be constant within each aggregate group. The ORDER BY clause takes a single expression that can be of any type that can be sorted.  
For a given percentile value P, PERCENTILE_DISC sorts the values of the expression in the ORDER BY clause   
and returns the value with the smallest CUME_DIST value (with respect to the same sort specification) that is greater than or equal to P.  
```  
MEDIAN(中位数)详解, Oracle有单独的计算中位数的函数, 实际上就是PERCENTILE_CONT(0.5) :   
```  
MEDIAN is an inverse distribution function that assumes a continuous distribution model.   
It takes a numeric or datetime value and returns the middle value or an interpolated value that would be the middle value once the values are sorted.   
Nulls are ignored in the calculation.  
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.   
If you specify only expr, then the function returns the same data type as the numeric data type of the argument. If you specify the OVER clause,   
then Oracle Database determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.  
The result of MEDIAN is computed by first ordering the rows. Using N as the number of rows in the group,   
Oracle calculates the row number (RN) of interest with the formula RN = (1 + (0.5*(N-1)).   
The final result of the aggregate function is computed by linear interpolation between the values from rows at row numbers CRN = CEILING(RN) and FRN = FLOOR(RN).  
The final result will be:  
if (CRN = FRN = RN) then  
      (value of expression from row at RN)  
   else  
      (CRN - RN) * (value of expression for row at FRN) +  
      (RN - FRN) * (value of expression for row at CRN)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")