## Page 217
产生脚本
接下来是大型的测试：寻找此系统里的一些C与C++编译器：
com
S pathfind -a PATg c89 c99 cc c++ CC gcc g++ lce 1ce pgcc pgCC
c89: not found
c99: not. found
/usr/1oca1/bin/c++
/usr/bin/cc
/usr/bin/c++
CC: not found
/usr/local/bin/gce
/usr/1ocal/gnat/bin/gee
/usr/bin/gec.
/usr/1oca1/bin/g++
/opt/inte1_cc_80/bin/icc
/usr/bin/g++
/usr/1oca1/sys/inte1/compi1er70/ia32/bin/Lcc
/usr/1ocal/bin/1cc
/usr/1oca1/sys/pgi/pgi/1inux86/bin/pgCC
/usr/1oca1/sys/pgi/pgi/1inux86/bin/pgce
S echo $?
一个awk的单命令行，可用来验证退出码计数逻辑的运行就像我们所预期的那样。我们
尝试了150个不存在的文件，但退出码正确地限制在125：
Spathfind rarH $（awk BEGIs （while (nfoo.out 2>foo.err
S cat foo.out
5/utq/xsn/
/usr/1oca1/bin/gcc
/usr/1oca1/gnat/bin/gcc
/usr/1oca1/bin/g++
/usr/bin/g++
S cat foo.err
c89: not found
现在，我们可以说pathfind命令成功了，尽管有部分Shell向导仍可能发现里头有隐匿
www.TopSage.com
---
## Page 218
206
第8章
的问题（注1），而且无法替换大规模的测试，特别是具有非预期的输人时：例如附录B
中“UNIX的文件里有什么？”部分注释所提到的模糊测试。理想上的测试，应结合有
效参数与至少一个以上的无效参数，因为我们有三个主要选项的选择，每个都有几种缩
写方式，所以就有（6+1）×（10+1）×（14+1）=1155种选项组合。每个组合都必须
搭配0到3个（至少要三个）参数作测试。我们的程序在实现上对选项缩写的处理方式
并无不同，所以只需要较少的必要测试。然而，当戴上测试帽子时，我们必须先将程序
看作一个内容未知的黑盒子，但是仍有文件说明其特定的行为。之后，我们应再做不同
思维的测试，潜入程序内部，了解它是怎么运行的，然后想出如何破坏它。而且测试的
数据也要经过设计，要能够对程序的每一行进行彻底的测试，详尽的制试邀相当元长乏
味的！
因为没有文件的软件可能是无法使用的软件，且因为很少有书糖会介绍如何编写使用手
册，所以我们将pathfind的手册页放在附录A。
pathfind确实是很有用的练习。除了它是个方便的新工具程序，而标准的GNU、POSIX
以及UNIX工具集里都没有之外，它还拥有所有大多数UNIX程序的主要组成部分：参
数解析、选项处理、错误报告以及数据处理。我们还说明了消除几个著名安全湿润的三
个步骤：加入-选项以终止起始的Shell命令行，立即设置IFS及PATH，该程序代码的
好处是可以再利用，只需作一点点修改，例如：前置的注释标志、IFS与PATH的分配、
5个辅助函数、处理参数的while与case语句，而且至少外部循环会追历收集命令行上
的文件。
作为一个练习，你可以开始考虑，是不是该为pathfind的这些扩展做一些改变：
·
将标准输出与标准错误输出的重定向存储到/dev/mull.并加上--quiet选项抑
制所有输出，所以唯一会看到的便是指出是否找到匹配的退出码，这个好用的程序
功能，在cmp的-s与grep的-q选项里已经有了。
·加上--trace选项，将每个要测试的文件完整路径响应到标准错误输出，
·加人--testx选项，让test的-f选项可以置换为其他值，例如-h（文件为符
号性连接）、-r（文件是可读取的）、-x（文件是可具执行的）等。
让pathfinc扮演过滤器功能：如果命令行上没有指定的文件名，则它应该自标准
输人读取文件列表。这么做会对程序的架构与组织产生什么样的影响？
修补所有你找得到的安全漏洞，例如最新安全性公告所列的议题。
注 1 :
有名的安全性温润也括了基改输入字段分隔字异（IFS）：基改盘我路径，以恶意命令替
换原可信的命伞：晴中将反引号命令、Shel1meta半蒜以及控制字路（含NUL与换行持
号）置入参数中：引发非预期的运行时中新：传送超过各种内部Shell货源限制长度的参
www.TopSage.com
---
## Page 219
产生脚本
207
8.2软件构建自动化
由于UNIX可运行在多种平台上：因此在构建软件包时，较常见的实现方式是从源代码
开始安装，而非直接安装二进制包。大型的UNIX站点常由数个平台结合而成，对管理
者面言，最元长麻烦的工作就是将包安装在这些不同的系统上。而这正是自动化的好机
会。很多软件开发人员，已直接采用GNU项目下所开发的软件包惯例，包括：
包以压缩存档文件package-x.y.z.tar.gz（或package-x.y.z.tar.bz2）的形
式发布，文件解开后将出现在package-x.y，z目录下。
顶层configure脚本通常是由GNU的autoconf命令，通过configure.in或
configure.ac文件里的规则列表自动产生。执行该脚本时，有时得加上一些命令
行选项，便能产生定制的C/C++头文件，通常叫做config.h、衍生自Makefile.in
（模板文件）的一个定制Hakefile，并且有时候还会有其他文件。
Makefile目标（target）的标准集已详述于《The GNU Coding Standards 中，
有all（全部构建）、check（执行验证测试）、clean（删除不需要的中间文件）、
distclean（恢复目录到它的原始发布），以及instal1（在本地系统上安装所有
必需的文件）。
被安装的文件位于Nakefile文件里prefix变量所定义的默认树状结构目录下，
井且可在配置时使用--prefix=dir命令行选项进行设置，或是通过一个本地系
统范围的定制文件提供，默认的prefix为/usr/1ocal，但无权限的用户可能得使
用$HOME/local，或是用$HCME/arch/1ocal更好，其中arch是一条命令，
它会显示定义平台的简短说明.GNU/Linux与SunSolaris提供的是/bin/arch.
在其他平台下，安装自己的实作程序时，通常只是使用简单的Shell脚本包装
（wrapper），再搭配适当的echio命令。
接下来的工作就是建立脚本，它被给定一个包列表，在目前系统下的许多标准位置之一，
找到它们的源分发，将它们复制到远程主机列表中的每一个，在那里解开它们，然后编
译并使其成为合法可用状态。我们发现自动化安装步骤不是聪明的做法：构建日志必须
先审慎地检查。
这个脚本必须让UNIX站点里的所有用户都能使用，所以我们不能在它里面内嵌有关特
定主机的信息，我们假设用户已经提供两个定制文件：directories-列出要查找
包分发文件的位置，以及uBerhosts-—列出用户名称、远程主机名称、远程构建目
录以及特殊环境变量，我们将这些及其他相关文件放在隐藏目录SHCNE/.builG下，以
降低混乱的程度。然而，因为在同一个站点内所有用户下的来源目录列表可能都相类似，
www.TopSage.com
---
## Page 220
208
第8第0
21
所以我们包括一个合理的默认列表，就不再需要directories文件
saoe.com
有时候构建要能够只在一般构建主机的子集主机上完成，或是使用不在一般位置里的存
档（archive）文件，因此，脚本要能够在命会行上设置这些值。
我们在这里开发的脚本可以这样调用：
5 bul1d-al1 coreuti1s-5.2.1 gawk-3.1.4
在所有主机上构建这两个包
$bui1d-al1--on1oaner.example.comgnupg-1.2.4在指定主机上构建包
$ build-al1 --8ource $HomE/work butter-0.3.7
从非标准位置中构建包
这些命令其实做了很多事，下面我们大致列出，处理每个指定的软件包及在默认的或选
定的构建主机上安装的步骤：
1.在本地文件系统下寻找包分发文件。
2.
将分发文件复制到远程构建主机。
3.初始化远程主机上的登录连接。
4.
切换到远程构建目录，并解开分发文件，
5.切换到包构建目录并设置、构建与测试包。
6.：将初始化主机上的所有输出，分别为每个包与构建环境，记录在分开的日志文件
中
在远程主机上的构建以并行方式进行，所以安装执行所需要的总时间是以最慢的那台机
器为基准，面不是把所有单个时间求和。对于动辑安装百种以上不同环境系统的我们来
说，率好有build-al1程序，这也为包开发人员提供了一个不错的挑战。
bui1d-al1脚本很长，所以我们分部分来展示，最后再显示完整程序代码于本章的例
8-2.开头使用一般的介绍性注释标头；
以并行处理的方式。在一台或多台构建主机上，建立一个成多个包。
#!/bin/sh -
语法：
bui1d-a11( --?)
[--all ...*.]
[--cd·...]
[--check ·...·]
[.--configure ·...*]
[°--environment *..."]
[. --help ]
(,."[egu] [xp:]sou[ezasn].uo-]
[--logdirectory dir ]
www.TopSage.com
---
## Page 221
产生脚本
209
[ =-source *dir ....* ]
[(=). eoua--]
[+=ver8ion ]
#
package (s)
可选用的初始文件：
$HOME/ .bui1d/directorles
1iet of source directories
#
$HONE/ .bui1d/userhosts
list of [user8]host[:dir] [,envfile]
IFS='
接下来，将查找路径设置为一个有限制的列表，并用export使它成为全局性，这么一
来在初始化主机上的所有子进程都可使用它：
PAzit=/usr/local/bin:/bin:/usr/bin
export PATH
我们设置访问权限掩码（见附录B中关于默认权限的讨论），允许用户与组具有完整的
访问权限，除此之外的其他人则仅具读取权限，组给定了完整访问权限，是因为在我们
的部分系统中，有超过一个以上的系统管理者在处理软件安装，这些管理员都属于一个
共同的可信任组。相同的掩码稍后在远程主机上也会需要：所以我们遵循程序惯例，以
大写字母命名：
UMASK=002
umasK $UMASK
它已经证明将工作的各部分委托给个别的函数处理会很方便，这么一来我们就能够将代
码块限制在适当的大小了，程序里定义有9个这样的函数。但我们会在讨论到程序主要
内容时再介绍。
我们需要一些变量，这些变量有很多一开始都是空值，以收集命令行设置：
ALL/TARG&TS=
日志文件的另一个位置
程序或naketarget构建用
altlogdir=
altsrcdirs=
来潮文件的另一个位置
ALTUSERHOSTS=
换行包试的maketarget名称
列出额外主机的文件
CHBCKTARGETS=Check
CONRIOURRDIR=.
起置脚本的子目录
CONFIGUREFLAGS=
配置程序的特殊标志
LOGDIR=
本池目录，以保留日志文件
userhosts=
在命令行上指定的额外构建主机
我们也需要参照多次build-all的初始化文件所在的目录，所以这里给它一个名称：
BUILDHOME=$HOME/ .bu11d
www.TopSage.com
---
## Page 222
210
第8章
接下来是两个脚本，它们是在构建的开始与结尾在远程主机上的登录Shell内执行，以
提供进一步的定制与日志文件的报告。这两者都克服了使用ksh或sh的登录Shell时在
secure-Shell（ssh）上遵遇的问题：这两个Shell不会读取 SHCME/.profile，除非它
们是以登录Shell被启动，而且如果secureShell是以命令行参数被调用，则它也不会安
排任何处理，就像build-al1一样：
BUILDBzGIN= / .bu11d/begin
BOILDEND=,/ .bui1d/end
正如例8-1的pathfind做法，设置最终退出码：
EXITCODE=0
没有默认的额外环境变量：
EXTRAE2VIRON0ENT*
任何额外的环境变量都会传人
稍后会需要的程序名称，所以我们在这里存储其值与版本渠号：
记住程序名称
VERSICN=1.0
记录程序版本编号
我们还在构建日志文件名中纳入时闻藏，以DATEFLAGS的日期格式，取得以时润排序后
的文件名。去除标点符号后，就是ISO8601:2000所建议的格式（注2）。我们之后会在
远程主机上以同样的方式调用date，所以我们希望这个复杂的日期格式，仅在一个地
方定义：
DATEFLAGS=*+tY . tn. td, tH, kM. tS*
在我们的站点，与远程主机通信使用的是secureShell，而且scp与ssh两者我们都需
要。仍沿用旧式不安全的远程Shell（remoteShell）的站点，则会更换为rcp与rsh，
开发期间，我们设置这些变量为*echoscp*与“echossh”，这么做可以让日志记录
我们做过的事，面不必真的去做它：
sCP=scp
SSH=ssh
对有些用户与系统配置文件设置而言，ssh会建立个别的加密通道（channel）供X
WindowSystem流量使用，而我们在软件构建过程中几乎完金用不到这样的功能，所以
运21
见 http://www.iso.ch.cate/d26780.htmi  GDate elements and interchange formats 
Information interchange - Representation of dates and times),. 该标 >准 × YYYY-MM-
DDThh：mm：ss或YYYYMMDDThhmmss 的格式表示目期，为了可移植性，第一种格式
的留号不应出现在文件名里，而累二种格式，用户看起来比较吃力。