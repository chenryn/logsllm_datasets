这些描述可以被展开成定义了id3-tag类的代码，以及在磁盘上的字节和类实例之间相互转换的
已经写了八行代码却还没写到write-id3-tag。
太浪费笔墨了，尤其是当你发现在ID3规范中它只用了四行文本来描述一个ID3标签的结构，而你
的函数都将会非常相似，区别仅在于指定它们要读取的类型和它们所保存在槽中的名字。这实在
个类和必要的基本类型的read-foo和write-foo函数。但是很容易也可以看出所有用来读和写
id3-tag对象中的值。
如，假设已有了用来读取适当基本数据类型的特定的其他函数，那么函数read-id3-tag如下所示：
274
你真正想要的是一种以类似规范中伪代码的形式来描述像ID3标签这样的结构的方式，随后
不难看出你应该怎样编写一个适当的类来表示一个规范中的所有复合数据类型，以及用于每
还有一些信息没有被上面的伪代码覆盖到。例如，编码了长度的4个字节究竟是如何被解释
ID3/file identifier
由于你已经对宏需要生成怎样的代码有了大致的想法，根据第8章归纳的宏编写过程，下一步
函数write-id3-tag具有类似的结构，你需要使用适当的write-＊函数来输出那些保存在
ID3 version
(defun read-id3-tag (in)
这个类的实例将成为保存ID3标签的完美仓库。随后你可以编写函数来读写该类的实例。例
设计宏
(let ((tag (make-instance ‘id3-tag)))
flags
 6e1 (saue1y a2Ts s5ety uotstaar uotsiaa-iotew 1atitsuapt) Snois-uatm) 
(flags
(revision
tag))
frames
size
(setf identifier 
第 24章
(setf
(setf size
setf
setf
 revision
major-
frames
实践：解析二进制文件
:initarg :frames
:initarg 
:initarg :revision
:initarg
4 ＊ %0xxxxxxx
$0200
www.TopSage.com
(read-id3-frames in :tag-size size)))
(read-ul in))
(read-u1
(read-id3-encoded-size in))
:flags
in)
in))
:accessor frames)))
accessor 
:accessor revision)
size)
flags)
---
## Page 292
先写一个只生成DEFcLAss形式的define-binary-class版本。
其中的COM.GIGAMONKEYS.MACRO-UTILITIES包里含有第8章的宏with-gensyms和once-only。
义文件：
示它、从磁盘中读取以及将其写入磁盘。
了—编写代码将那个关于ID3标签的样子的简洁表达方式转化成实际可用的代码：在内存中表
24.6
对你来说，只要每个表达式都含有对于如何读写一个特定数据编码的必要信息就可以了。
length 3)、ul、id3-tag-size和(id3-frames :tag-size size)这些表达式进行处理的
点儿随想，所以你不必担心宏define-binary-class究竟是如何对诸如(iso-8859-1-string:
major-version等，以及关于该槽在磁盘中如何表示的信息所构成。由于目前这些都还只是一
如:initarg和:accessor之类的东西所不同的是，每个槽描述符由槽的名字——file-identifier,
要手写的类和函数的定义，比如说可能是类似下面这样：
指定的一个ID3标签。这样，你应该可以写出该伪代码的一个S-表达式版本并将其展开成原本需
为用几行文字来描述的。同样地，规范用文字描述了怎样才能编写代码来读和写由这个伪代码所
 如果回过头来观察那个define-binary-class形式，你将看到它接受两个参数：名字
由于你已经有了想要生成的代码的手写版本，编写这样一个宏应该不会太难。可以分而治之
首先，你应该为这个库定义一个包。
那么，对于优美代码的幻想就到此为止吧。现在你需要开始编写define-binary-class
(in-package :cl-user)
(defpackage :com.gigamonkeys.binary-data
(define-binary-class id3-tag 
(:export :define-binary-class
( :use :common-lisp :com.gigamonkeys.macro-utilities)
把梦想变成现实
(size
(flags
revision
(major-version
:+null+)}
:define-tagged-binary-class
: current-binary-object
:parent-of-type 
:*in-progress-objects*
read-value
:define-binary-type
(id3-frames :tag-size size))))
id3-tag-size)
u1)
(iso-8859-1-string :length 3))
。下面是你可以从本书Web站点上下载到的版本中的包定
www.TopSage.com
24.6把梦想变成现实
275
---
## Page 293
正是你早些时候手工编写的那个类定义：
define-binary-class形式的槽描述符列表的每个元素上。
生成一个DEFcLAss形式，其中槽描述符列表的构造方法是将函数slot->defclass-slot应用到
描述符。
之间最大的区别就在槽描述符中。来自define-binary-class的单个槽描述符如下所示:
适当的DEFcLAss形式来。很明显地，define-binary-class形式与一个正确的DEFcLAsS形式
id3-tag以及一个槽描述符的列表，后者的每一个都是两元素列表。你需要从这些材料中构造出
276
 现在定义一个函数，其接受一个define-binary-class槽描述符并返回一个DEFcLAss槽
为了更好的可读性，这里对得到的结果稍微重新格式化了一下，它应当看起来很眼熟，因为
为了查看这个宏究竞生成了什么代码，你可以在REPL中求值下面的表达式。
这是一个简单的模板风格的宏。通过插人类的名字和槽描述符列表，define-binary-class
(defclass id3-tag {)
看起来不错。现在define-binary-class的第一个版本可以轻松搞定了。
(MAJOR-VERSION :INITARG :MAJOR-VERSION :ACCESSOR MAJOR-VERSION)
在你使用IN-PACKAGE调用切换到新包以后，你可以在REPL中测试这个函数。
(defun slot->defclass-slot (spec)
(macroexpand-1 '(define-binary-class id3-tag 
(defmacro define-binary-class (name slots)
(defun as-keyword (sym) (intern (string sym) :keyword))
其实很简单。首先定义一个简单的函数将一个符号转换成对应的关键字符号。
但这并不是一个合法的DEFCLASS槽描述符。相反，你需要类似下面的东西：
(major-version ul)
((identifier 
(let
{frames
(flags 
(major-version 
(identifier
(frames
(size
(flags
revision
revision
,(mapcar #'slot->defclass-slot slots)/)
第 24章实践：解析二进制文件
(name
-version
:initarg :identifier 
(id3-frames :tag-size size)))))
ul)
（
:initarg
:initarg
id3-tag-size)
ul)
initarg
initarg
initarg
www.TopSage.com
:frames
:size
:flags
:revision
 :accessor identifier)
:accessor
:accessor 
:accessor flags)
:accessor revision)
frames)))
size)
---
## Page 294
生成的代码如下所示：
方法了，而该方法可以通过调用把适当的槽类型作为第一个参数的read-value来实现。你想要
至少包括&key或&rest参数中的一个，这样才能与广义函数兼容。
参数而不做具体要求。不过这意味着每个特化在read-value上的方法都将在它们的形参列表中
相同的函数，还不如定义一个广义函数read-value，以及特定用来读取不同类型值的方法。
用”（generic）的使用应当让你直接想到问题的解决方案：与其定义一堆互不相关的、名字各不
的：从一个流中读取指定类型的值。说白了它们都是单个通用操作的实例。除此之外，对于“通
以调试的名字冲突。
字；背后生成名字的宏可能会在生成的名字和其他地方使用的名字刚好同名时导致难以预测且难
这是有可能的但不是个好主意。创建全局定义的宏通常应当仅使用那些由调用者传递给它们的名
来找出需要调用的函数名。不过，这将需要define-binary-class来生成名字read-id3-tag,
法像类名那样直接插入到模板中。
尽管来自你所定义的类的名字，但其本身却并不是define-binary-class的参数，因此没有办
为了读取每一个槽的值，你不得不调用一个不同的函数。更不用说函数read-id3-tag的名字，
之前写的read-id3-tag函数，看起来有些滑稽，因为read-id3-tag的存在并不是很正常—
24.7
① 不幸的是，语言本身在这个观点上并没有提供一个好的榜样：宏DEFSTRUCT被DEFCLASS所取代，因此我不打算
 这就是说，不必定义函数read-iso-8859-1-string和read-u1，你可以将read-value
你可以通过设计并遵循一个命名约定来处理这两个问题，让宏可以基于槽描述符中的类型名
(defmethod read-value ((type (eql 'id3-tag)) in &key)
接下来，你就可以让define-binary-class生成一个特化在类型名id3-tag上的read-value
(defmethod read-value ((type (eql 'iso-8859-1-string)) in &key length) ...)
然后，你定义使用EQL特化符将类型参数特化在你想要读取的类型名上的方法。
通过指定&key而不带有任何实际关键字参数，你可以允许不同的方法定义它们自己的&key
1
(defgeneric read-value (type stream &key)
你可以避免这些不便，只要你注意到所有这些读取一个特定类型值的函数都有相同的基本！
讨论它。宏DEFSTRUCT可以基于给定结构的名字来生成新的函数名,其不良示例导致了许多初级的宏编写者效仿。
(defmethod read-value ((type (eql 'ul)) in &key) ...)
下一步你需要让define-binary-class也能生成--个函数以读取这个新类的实例。回顾你
(m   g   n     :) 
(let
读取二进制对象
(with-
setf
(setf major-version (read-value 'ul in))
(setf identifier
((object (make
revision
tance
id3-tag)))
www.TopSage.com
24.7读取二进制对象
in :length 3))
277
---
## Page 295
字以避免潜在的槽名字冲突，?这可以通过使用第8章的with-gensyms宏来实现。
换成适当的名字和代码。你也可能会想要把变量type、stream和object替换成由符号生成的名
个手写的read-value方法并去掉任何特定类相关的内容，那么你将得到这样一个骨架：
成列表（u1），从而让DESTRUCTURING-BIND可以解析它。如下所示：
可以避开关于这个名字来源的问题，定义slot->read-value来接受一个流变量作为第二个参数。