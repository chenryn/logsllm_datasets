out-script: τ1
amount: α1
witness: . . .
Tx(cid:2)
in: TxID
out-script: τ2
amount: α2
witness: x, s.t., τ1(x) = 1
Figure 3: The structure of a transaction in Bitcoin. The
transaction Tx
is spending the output τ1 of transaction Tx.
(cid:3)
How the properties play together: By showing that Γ(cid:3) satisﬁes
the three aforementioned properties, we show that Γ(cid:3)
P is a live
and persistent blockchain protocol immutable against edits not
authorised by the policy P.
The editable common preﬁx property ensures that only
policy approved edits are performed on the chain. The Chain
quality property, for a (k, (cid:5), ρ)-policy P where ρ > μ, ensures
that an adversary does not get a disproportionate contribution
of blocks to the chain.
V. INTEGRATING INTO BITCOIN
In this section we describe how our generic editable
blockchain protocol (Fig. 2) can be integrated into Bitcoin.
For simplicity, we consider one redaction per block and the
redaction is performed on one or more transactions included in
the block. The extension of the generic protocol for multiple
redactions (described in Appendix A) can be immediately
applied to the construction described in this section. Next, we
give a brief background on the Bitcoin protocol.
(cid:3)
A. Bitcoin Basics
Transactions. A simple transaction Tx in Bitcoin has the
following basic structure: an input script, an output script
with a corresponding amount, and a witness. More complex
transactions may have multiple input and output scripts and/or
more complex scripts. A transaction Tx
that spends some
output τ of Tx, has the ID of Tx in its input, denoted by
TxID := H(Tx), and a witness x that satisﬁes the output script
τ of Tx (as shown in Fig. 3). The amount α2 being spent by
the output script τ2 needs to be smaller (or equal) than the
amount α1 of τ1. The most common output scripts in Bitcoin
consists of a public key, and the witness x is a signature of
the transaction computed using the corresponding secret key.
We refer the reader to [1] for a comprehensive overview of
the Bitcoin scripting language.
Insertion of Data. Users are allowed to propose new transac-
tions containing arbitrary data, that are then sent to the Bitcoin
network for a small fee. Data can be inserted into speciﬁc
parts of a Bitcoin transaction, namely the output script, input
script and witness. Matzutt et al. [34] provide a quantitative
analysis of data insertion methods in Bitcoin. According to
their analysis, OP RETURN and coinbase transactions are the
major pockets apart from some non-standard transactions,
where data is inserted.
Block Structure. A Bitcoin block consists of two parts,
namely the block header, and a list of all transactions within
(cid:18)(cid:20)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
the block. The structure of the block header is detailed
in Fig. 5, whereas a pictorial representation of the list of
transactions can be found in Fig. 6.
B. Modifying the Bitcoin Protocol
In this section we detail the modiﬁcations to the Bitcoin
to our generic editable
protocol necessary to integrate it
blockchain protocol of Section III. The resulting protocol is a
version of Bitcoin that allows for redaction of (harmful) data
from its transactions.
By redaction of transactions, we mean removing data from
a transaction without making other changes to the remaining
components of the transaction. As shown in Fig. 4, consider a
transaction Tx1 that contains some harmful data in its output
script, and let Tx(cid:3)
1 be a candidate transaction to replace Tx in
the chain, where Tx(cid:3)
1 is exactly the same as Tx1, except that
the harmful data is removed.
Tx1
in: . . .
out-script 1: τ1
amount: α1
out-script 2: τ2, harmful data
Tx(cid:2)
1
in: . . .
out-script 1: τ1
amount: α1
out-script 2: τ3, harmful data
witness: x
witness: x
Figure 4: The transaction Tx1 on the left contains harmful
data, and the candidate transaction Tx(cid:3)
1 on the right contains
a copy of all the ﬁelds of Tx1, with exception of the harmful
data.
Proposing Redactions. A user who wishes to propose
a redaction proceeds as follows: First, constructs a special
transaction editTx (as shown in Fig. 7) containing Tx1ID and
Tx(cid:3)
1ID, that respectively denotes the hash of the transaction
Tx1 being redacted, and the hash of Tx(cid:3)
1 that is the candidate
transaction to replace Tx1 in the chain5. Then, broadcasts the
special transaction editTx and the candidate transaction Tx(cid:3)
1 to
the network; editTx requires a transaction fee to be included
in the blockchain, while Tx(cid:3)
1 is added to a pool of candidate
transactions6. The candidate transaction Tx(cid:3)
1 is validated by
checking its contents with respect to Tx1, and if it is valid,
then it can be considered for voting.
Redaction Policy. The redactable Bitcoin protocol is param-
eterised by a policy parameter P (Deﬁnition 1). The policy
P dictates the requirements and constraints for redaction
operations in the blockchain. An informal description of a
(basic) policy for Bitcoin would be:
A proposed redaction is approved valid if the following
conditions hold:
• It is identical to the transaction being replaced, except
that it can remove data.
5We note that our transaction ID is Segwit compatible, as the witness is
not used with the hash H to generate a transaction’s ID.
6If a candidate transaction does not have a corresponding editTx in the
blockchain then the transaction is not included in the candidate pool, and it
is treated as spam instead.
Value
hash prev
merkle root
difficulty
timestamp
nonce
old merkle root
Description
hash of the previous block header
root of the merkle tree (whose the
leaves are the transactions)
the difﬁculty of the proof-of-work
the timestamp of the block
nonce used in proof-of-work
root of the merkle tree of old set
of transactions
Figure 5: Structure of the Bitcoin block header. The last
highlighted ﬁeld (old merke root) is only included in the
block header of the extended (editable) protocol.
• It can only remove data that can never be spent, e.g.,
OP RETURN output scripts.
• It does not redact votes for other redactions in the chain.
• It received more than 50% of votes in the 1024 consecu-
tive blocks (voting period) after the corresponding editTx
is stable in the chain.
where voting for a candidate transaction Tx(cid:3)
1 simply means
||Tx(cid:3)
that the miner includes editTxID = H(Tx1ID
) in the
coinbase (transaction) of the new block he produces. After
the voting phase is over, the candidate transaction is removed
from the candidate pool.
1ID
The reason for restricting the redactions to non-spendable
components of a transaction (e.g., OP RETURN) is that, permit-
ting redactions on spendable content could lead to potential
misuse (Section VII) and future inconsistencies within the
chain. We stress however, that this is not a technical limi-
tation of our solution, but rather a mechanism to remove the
burden of the user on deciding what redactions could cause
inconsistencies on the chain in the future. We feel that the
aforementioned policy is suitable for Bitcoin, but as policies
are highly dependent on the application, a different policy can
be better suited for different settings.
New Block Structure.
the
block header must accommodate an additional ﬁeld called
old merkle root. When a block is initially created, i.e., prior
to any redaction,
this new ﬁeld takes the same value as
merkle root. For a redaction request on block Bj, that pro-
poses to replace Tx1 with the candidate transaction Tx(cid:3)
1, the
transactions list of the candidate block B(cid:3)
j (that will replace
Bj) must contain Tx1ID
= H(Tx1) in addition to the remaining
transactions. A new merkle root is computed for the new set
of transactions, while old merkle root remains unchanged.
To draw parallels with the abstraction we described in Sec-
tion III-A, G(s, x) is analogous to merkle root and y is
analogous to old merkle root.
Block Validation. The validation of a block consists of the
steps described below.
To account
redactions,
for
• Validating transactions: The block validates all the trans-
actions contained in its transactions list; the validation
of non-redacted transactions is performed in the same
way as in the immutable version of the protocol. Trans-
(cid:18)(cid:20)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
Tx1
Tx2
Tx3
...
Tx(cid:2)
1, Tx1ID
Tx2
Tx3
...
(a) Non-redacted.
(b) Redacted transaction Tx1.
Figure 6: List of transactions contained within a block before
(left) and after (right) redacting a transaction in the block.
editTx
in: . . .
out-script: Tx1ID
, Tx(cid:2)
1ID
witness: . . .
Figure 7: The special transaction editTx is broadcasted to the
network to propose a redaction of transaction Tx1 for the
candidate transaction Tx(cid:3)
1.
actions that have been previously redacted require a
special validation that we describe next. Consider the
case presented in Fig. 4, where Tx1 is replaced by Tx(cid:3)
1.
The witness x was generated with respect to Tx1ID and
is not valid with respect to Tx(cid:3)
1ID. Fortunately, the old
state Tx1ID (hash of the redacted transaction) is stored,
as shown in Fig. 6b, ensuring that the witness x can
be successfully validated with respect to the old version
of the transaction. Therefore, we can ensure that all the
transactions included in the block have a valid witness,
or in case of redacted transactions, the old version of
the transaction had a valid witness. To verify that the
redaction was approved in the chain one needs to ﬁnd
a corresponding editTx (Fig. 7) in the chain, and verify
that it satisﬁes the chain’s policy.
• PoW veriﬁcation: The procedure to verify the PoW puzzle
is described in Algorithm 2. If the block contains an
edited transaction, i.e., old merkle root (cid:14)= merkle root,
then substitute the value in hash merkle root with that in
old merkle root and check if the hash of this new header
is within T .
Chain Validation. To validate a full chain a miner needs
to validate all the blocks within the chain. The miner can
detect if a block has been redacted by verifying its hash
link with the next block; in case of a redacted block, the
miner veriﬁes if the redaction was approved according to
the chain’s policy. The miner rejects a chain as invalid if
any of the following holds: (1) a block’s redaction was not
approved according to the policy, (2) the merkle root value
of the redacted block is incorrect with respect to the set of
transactions (that contains the hash of the redacted transaction)
or (3) a previously approved redaction was not performed on
the chain.
Transaction Consistency. Removing a transaction entirely
or changing spendable data of a transaction may result in
(cid:3)
(cid:3)
serious inconsistencies in the chain. For example, consider a
transaction Tx1 that has two outputs denoted by A and B,
where the second output B has a data entry and the ﬁrst output
A contains a valid spendable script that will be eventually
spent by some other transaction Tx
. If the redaction operation
performed on Tx1 affects the output script of A, Tx
may
become invalid, causing other transactions to become invalid.
A similar problem may arise if the redaction is performed on
the input part of Tx1 enabling the user who generated Tx1
to possibly double spend the funds. Therefore, we only allow
redactions that do not affect a transaction’s consistency with
past and future events.
Redaction and Retrievability. The redaction policy P for
Bitcoin restricts redactions to only those operations that do
not violate a transaction’s consistency. This means that we do
not allow monetary transactions to be edited (such as standard
coin transfer). We stress, however that the main objective
of redacting a transaction Tx is to prevent some malicious
content x, that is stored inside Tx, from being broadcasted
as part of the chain, thereby ensuring that the chain and its
users are legally compliant. Note that we cannot prevent an
adversary from locally storing and retrieving the data x, even
after its redaction, since the content was publicly stored in
the blockchain. In this case, the user that willingly keeps the
malicious (and potentially illegal) data x will be liable.
Accountability. Our proposal offers accountability during and
after the voting phase is over. Moreover, the accountability
during the voting phase prevents the problem of transaction
inconsistencies discussed above.
• Voting Phase Accountability: During the voting phase,
anyone can verify all the details of a redaction request.
The old transaction and the proposed modiﬁcation (via
the candidate transaction) are up for public scrutiny. It is
publicly observable if a miner misbehaves by voting for
a redaction request that, apart from removing data, also
tampers with the input or (a spendable) output of the