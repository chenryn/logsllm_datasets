### HS2.0 Capabilities and Security Concerns

We hope that by identifying this attack in the early stages of HS2.0 adoption, manufacturers will address the issue before it becomes widespread. A simple countermeasure is to follow the iOS example by using a temporary random MAC address when querying HS2.0. The specifications [32, §5.9] do not require the station to use its real MAC address.

**Figure 7: Cumulative distribution of the number of affected devices as a function of the number of SSIDs.**

This approach can trigger association requests from a large fraction of devices. For instance, the top-20 SSIDs in the Train-station dataset cover more than 33% of the devices.

### Experimental Verification

We tested and verified this attack in practice using Airbase-ng to create fake Access Points (APs) from a list of popular SSIDs. We assumed that the most popular SSIDs are open hotspots that do not use encryption. Therefore, the APs we broadcast were configured as open hotspots. Although Airbase-ng supports the creation of multiple SSIDs, our experiments revealed that it does not handle a large number of SSIDs effectively. Consequently, we limited our attack to a reasonable number of SSIDs, i.e., 5 SSIDs. This number can be increased by running multiple instances of Airbase-ng on distinct interfaces.

The performance of the attack was evaluated by computing the fraction of devices that attempted to associate with our fake AP over the total number of observed devices. A device was considered observed if we collected at least 5 probe requests from its MAC address. This conservative approach was taken to avoid counting devices that were too far away to detect our AP or did not stay in range long enough to start the association process.

We executed the attack for one hour using a list of the 5 top SSIDs from the Train-station dataset in a dense urban area. During this experiment, a total of 2481 stations were observed, and our fake APs triggered association attempts from 434 devices (17.4%). Increasing the number of advertised SSIDs and responding to probe requests containing an SSID with a matching probe response could potentially improve the number of affected devices.

Note that this attack does not necessarily need to be active. An attacker could rely on nearby, genuine APs with popular SSIDs to trigger association requests. In many locations, APs with popular SSIDs are commonplace. For example, in Europe, Wi-Fi networks such as Fon or Free_WiFi can be found in large numbers in populated areas.

### Hotspot 2.0 Honeypot

We demonstrate that the service discovery mechanisms introduced by Hotspot 2.0 (HS2.0) can be leveraged to reveal the real MAC addresses of Linux and Windows devices. Additionally, we discovered another predictable counter that can be used when querying a list of services to an AP. Similarly, picking a cryptographically random value for the Dialog Token ensures it cannot be used to track devices.

### Related Work

The possibility of tracking individuals based on the radio signals of their mobile devices has received considerable attention from the research community. Musa et al. [37] used Wi-Fi tracking techniques to collect data on urban mobility. Surveillance systems based on Wi-Fi tracking have also been presented by several works [30, 13, 38]. Cuthbert et al. demonstrated how an airborne Wi-Fi sniffer can be used to passively track and locate owners of Wi-Fi devices [13]. Humbert et al. studied tracking strategies against mobile users who change identifiers when entering mix-zones [29].

Privacy issues of Wi-Fi-enabled devices were studied by Greenstein et al. [23]. In parallel, attempts were made to reduce private information leakage in Wi-Fi [25, 40, 35]. Gruteser et al. introduced the idea of using a disposable identifier instead of a permanent MAC address [25]. Subsequent proposals [40, 35] aimed to improve privacy in the service discovery mechanisms of Wi-Fi, involving the obfuscation of device and network identifiers and requiring significant modifications to the protocol.

After the introduction of MAC address randomization in iOS 8, several works attempted to understand its internals and identified limitations [36, 18]. Freudiger found that sequence numbers and timing information can be used to re-identify random MAC addresses as implemented by iOS [18]. However, they did not investigate other devices or operating systems, nor other means to de-anonymize or track Wi-Fi frames.

Bernados et al. [8] studied the feasibility of MAC address randomization for associated devices in real-life conditions. They found that existing devices can support this with only minor changes, but noted that higher layers must also be configured to prevent the leakage of any identifiers.

Bloessl et al. showed that the scrambler seed of the IEEE 802.11p physical layer could be used for tracking in wireless vehicular networks [6]. They specifically investigated two prototype radio chips: one implemented on Field Programmable Gate Array (FPGA) and the other an industrial-grade Atheros AR5414A-B2B chip, both using predictable scrambler seeds.

Other researchers focused on inter-frame arrival time and sequence numbers to identify devices. Guo et al. [26] used these values to detect spoofing on a network with a semi-active method as an intrusion detection mechanism. Desmond et al. [15] fingerprinted devices using inter-frame time analysis alone, achieving a success rate of 70 to 80% in differentiating frames from 45 different devices probing for more than one hour.

Other means of device fingerprinting can be used to defeat MAC address randomization. Physical layer fingerprinting of wireless devices based on unique characteristics of their hardware is possible [7, 12] but requires expensive dedicated hardware. Pang et al. [39] showed that devices replacing their identifiers with temporary ones are still trackable through traffic analysis. They focused on MAC-layer fields used by associated devices. Franklin et al. [17] showed that the inter-frame timing of probe requests can form a fingerprint of the wireless device driver. Access points are vulnerable to passive clock skew fingerprinting [33], which was reused by Cristea et al. [10] to fingerprint smartphones, but it relies on TCP timestamps, which are not sent by unassociated devices. Stöber et al. applied passive traffic analysis to identify devices, even when the traffic is encrypted [43].

### Conclusion

We studied the data contained in Wi-Fi probe requests and demonstrated that they hold enough information to perform tracking, even if the MAC address is periodically randomized. First, the list of information elements forms a fingerprint of a device, which has enough entropy to identify a device or a small group of devices. We show that combining this fingerprint with frame sequence numbers makes tracking devices possible regardless of their MAC address. In particular, we observed that most devices do not reset the frame sequence counter when the MAC address is changed. Additionally, we show that the scrambler seeds used at the physical layer are predictable in many commodity Wi-Fi devices. Being managed at the hardware level, there is currently no way to reset or change their value, making it a persistent threat. Finally, we introduce two active attacks that leverage service discovery mechanisms of Wi-Fi to obtain identifying information on devices using MAC address randomization.

Our findings highlight the difficulty of implementing anti-tracking solutions for wireless devices. Specifically, it shows that MAC address randomization alone is not enough to protect users' privacy. However, several measures can be taken to limit the impact of the issues presented in this paper. At the software level, the driver (or firmware) should reset the sequence number field and any other predictable field found in frames. Additionally, the amount of information elements in probe requests should be kept to a bare minimum to avoid fingerprinting. Finally, Wi-Fi radios, which are generally implemented in hardware, should be modified so that scrambler seeds are not predictable. This can be accomplished by letting the hardware generate cryptographically random seeds or by allowing the driver to instruct the radio which scrambler seed value should be used.

### Acknowledgments

This research is partially funded by the Research Fund KU Leuven and Région Rhône-Alpes’s ARC7. Mathy Vanhoef holds a Ph.D. fellowship of the Research Foundation - Flanders (FWO). This work used the FIT/CorteXlab facility (https://www.cortexlab.fr) for its measurement campaign.

### References

[1] Tails - privacy for anyone anywhere. Retrieved from https://tails.boum.org.
[2] Android 6.0 changes. Retrieved from https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html, 2015.
[3] O. Abukmail. WiFi Mac Changer. Retrieved from https://play.google.com/store/apps/details?id=com.wireless.macchanger.
[4] M. V. Barbera, A. Epasto, A. Mei, S. Kosta, V. C. Perta, and J. Stefa. CRAWDAD dataset sapienza/probe-requests (v. 2013-09-10). Retrieved 10 November, 2015, from http://crawdad.org/sapienza/probe-requests/20130910, Sept. 2013.
[5] B. Bloessl, M. Segata, C. Sommer, and F. Dressler. An IEEE 802.11 a/g/p OFDM receiver for GNU Radio. In SRIF Workshop, 2013.
[6] B. Bloessl, C. Sommer, F. Dressler, and D. Eckhoff. The scrambler attack: A robust physical layer attack on location privacy in vehicular networks. In ICNC, 2015.
[7] V. Brik, S. Banerjee, M. Gruteser, and S. Oh. Wireless device identification with radiometric signatures. In MobiCom, 2008.
[8] P. O. Carlos J. Bernardos, Juan Carlos Zúñiga. Wi-Fi internet connectivity and privacy: hiding your tracks on the wireless internet. In IEEE CSCN, 2015.
[9] Chainfire. Pry-Fi. Retrieved from https://play.google.com/store/apps/details?id=eu.chainfire.pryfi.
[10] M. Cristea and B. Groza. Fingerprinting smartphones remotely via ICMP timestamps. Communications Letters, IEEE, 17(6):1081–1083, 2013.
[11] D. A. Dai Zovi, S. Macaulay, et al. Attacking automatic wireless network selection. In Proc. of the Sixth Annual SMC Inf. Assurance Workshop, 2005.
[12] B. Danev, D. Zanetti, and S. Capkun. On physical-layer identification of wireless devices. ACM Computing Surveys (CSUR), 45(1):6, 2012.
[13] C. Daniel and W. Glenn. Snoopy: Distributed tracking and profiling framework. In 44Con 2012, 2012.
[14] L. Demir, M. Cunche, and C. Lauradoux. Analysing the privacy policies of Wi-Fi trackers. In Proc. of the 2014 workshop on physical analytics, 2014.
[15] L. C. C. Desmond, C. C. Yuan, T. C. Pheng, and R. S. Lee. Identifying unique devices through wireless fingerprinting. In WiSec, 2008.
[16] P. Eckersley. How unique is your web browser? In Privacy Enhancing Technologies, 2010.
[27] C. Huitema. Experience with MAC address randomization in Windows 10. In 93th Internet Engineering Task Force Meeting (IETF), July 2015.
[28] C. Huitema. Personal communication, Nov. 2015.
[29] M. Humbert, M. H. Manshaei, J. Freudiger, and J.-P. Hubaux. Tracking games in mobile networks. In Conf. on Decision and Game Theory for Security, 2010.
[30] N. Husted and S. Myers. Mobile location tracking in metro areas: Malnets and others. In CCS, 2010.
[31] IEEE Std 802.11-2012. Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, 2012.
[32] IEEE Std 802.11u. Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications: Amendment 9: Interworking with External Networks, 2011.
[33] S. Jana and S. K. Kasera. On fast and accurate detection of unauthorized wireless access points using clock skews. In MobiCom, 2008.
[34] P. Leach, M. Mealling, and R. Salz. A universally unique identifier (UUID) URN namespace. RFC 4122 (Proposed Standard), July 2005.
[35] J. Lindqvist, T. Aura, G. Danezis, T. Koponen, A. Myllyniemi, J. Mäki, and M. Roe. Privacy-preserving 802.11 access-point discovery. In WiSec, 2009.
[36] B. Misra. iOS 8 MAC randomization – analyzed! http://blog.airtightnetworks.com/ios8-mac-randomization-analyzed/.
[37] A. B. M. Musa and J. Eriksson. Tracking unmodified smartphones using Wi-Fi monitors. In SenSys, 2012.
[17] J. Franklin, D. McCoy, P. Tabriz, V. Neagoe, J. V. Randwyk, and D. Sicker. Passive data link layer 802.11 wireless device driver fingerprinting. In USENIX Security, 2006.
[18] J. Freudiger. How talkative is your mobile device? An experimental study of Wi-Fi probe requests. In WiSec, 2015.
[19] B. Gellman and A. Soltani. NSA tracking cellphone locations worldwide, Snowden documents show. The Washington Post, 2013.
[20] M. X. Gong, B. Hart, L. Xia, and R. Want. Channel bounding and MAC protection mechanisms for 802.11ac. In GLOBECOM, 2011.
[21] F. Gont. A method for generating semantically opaque interface identifiers with IPv6 stateless address autoconfiguration (SLAAC). RFC 7217, 2014.
[22] D. Goodin. No, this isn’t a scene from Minority Report. This trash can is stalking you. Ars Technica, 2013.
[23] B. Greenstein, R. Gummadi, J. Pang, M. Y. Chen, T. Kohno, S. Seshan, and D. Wetherall. Can Ferris Bueller still have his day off? Protecting privacy in the wireless era. In USENIX HotOS, 2007.
[24] E. Grumbach. iwlwifi: mvm: support random MAC address for scanning. Linux commit effd05ac479b.
[25] M. Gruteser and D. Grunwald. Enhancing location privacy in wireless LAN through disposable interface identifiers. In BlackHat, 2013.
[39] J. Pang, B. Greenstein, R. Gummadi, S. Seshan, and D. Wetherall. 802.11 user fingerprinting. In MobiCom, 2007.
[40] J. Pang, B. Greenstein, S. Seshan, and D. Wetherall. Tryst: The case for confidential service discovery. In HotNets, 2007.
[41] J. Scahill and G. Greenwald. The NSA’s secret role in the U.S. assassination program. The Intercept, 2014.
[42] K. Skinner and J. Novak. Privacy and your app. In Apple Worldwide Dev. Conf. (WWDC), June 2015.
[43] T. Stöber, M. Frank, J. Schmitt, and I. Martinovic. Who do you sync you are?: smartphone fingerprinting via application behaviour. In WiSec, 2013.
[44] L. Wang and C. Tellambura. An overview of peak-to-average power ratio reduction techniques for OFDM systems. In IEEE ISSPIT, 2006.
[45] W. Wang. Wireless networking in Windows 10. In Windows Hardware Engineering Community conference (WinHEC), Mar. 2015.
[46] Wi-Fi Alliance. Hotspot 2.0 (Release 2) Technical Specification v1.1.0, 2010.
[47] Wi-Fi Alliance. Wi-Fi Simple Configuration Protocol and Usability Best Practices for the Wi-Fi Protected Setup Program, v2.0.1, April 2011.