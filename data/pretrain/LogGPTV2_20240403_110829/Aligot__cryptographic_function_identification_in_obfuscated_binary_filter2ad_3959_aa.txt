title:Aligot: cryptographic function identification in obfuscated binary
programs
author:Joan Calvet and
Jos&apos;e M. Fernandez and
Jean-Yves Marion
Aligot: Cryptographic Function Identiﬁcation in
Obfuscated Binary Programs
Joan Calvet
Université de Lorraine, LORIA
Nancy, France
PI:EMAIL
José M. Fernandez
École Polytechnique
Montréal, Canada
PI:EMAIL
Jean-Yves Marion
Université de Lorraine, LORIA
Nancy, France
PI:EMAIL
ABSTRACT
Analyzing cryptographic implementations has important ap-
plications, especially for malware analysis where they are
an integral part both of the malware payload and the un-
packing code that decrypts this payload. These implemen-
tations are often based on well-known cryptographic func-
tions, whose description is publicly available. While po-
tentially very useful for malware analysis, the identiﬁcation
of such cryptographic primitives is made diﬃcult by the
fact that they are usually obfuscated. Current state-of-the-
art identiﬁcation tools are ineﬀective due to the absence of
easily identiﬁable static features in obfuscated code. How-
ever, these implementations still maintain the input-output
(I/O) relationship of the original function.
In this paper,
we present a tool that leverages this fact to identify crypto-
graphic functions in obfuscated programs, by retrieving their
I/O parameters in an implementation-independent fashion,
and comparing them with those of known cryptographic
functions. In experimental evaluation, we successfully iden-
tiﬁed the cryptographic functions TEA, RC4, AES and MD5
both in synthetic examples protected by a commercial-grade
packer (AsProtect), and in several obfuscated malware sam-
ples (Sality, Waledac, Storm Worm and SilentBanker). In
addition, our tool was able to recognize basic operations
done in asymmetric ciphers such as RSA.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—In-
vasive software; Cryptographic controls
Keywords
Binary Program Analysis, Malware, Cryptography
1.
INTRODUCTION
Malicious software (malware) employs cryptography for
many purposes, including hiding its network communica-
tions [6, 7, 26] and protecting its payload [5, 36, 22]. This
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
use of cryptography is often combined with code obfuscation
in order to thwart reverse engineering eﬀorts by analysts and
potentially avoid detection by security products. Obfusca-
tion techniques in malware have become increasingly preva-
lent in the last few years, in particular due to the increased
availability and use of obfuscating code packers by malware
authors [21].
Analyzing and identifying the use of crypto functions is of
a primary interest for several reasons. First, it can allow ac-
cess to the decrypted malware core before it gets executed,
which in turn provides key insight on the intentions of those
creating and deploying the malware. Second, cryptographic
code constitutes a feature that can be used to improve mal-
ware classiﬁcation, an important step towards the identiﬁca-
tion of tools, methods and potentially groups or individuals
behind particular malware attacks. Finally, an in-depth un-
derstanding of the decryption process and the identiﬁcation
of critical input parameters, such as the decryption key, can
help in the development of static unpackers [27], i.e. auto-
matic methods for extracting the core logic of packed pro-
grams without executing them. These tools allow analysts
to write signatures on malware core features, often shared
among variants, and can be easily deployed on end-user com-
puters since they are lightweight.
As is the case with many binary program analysis tasks,
cryptographic implementation reverse engineering is chal-
lenging, notably due to the complexity of the machine lan-
guage and the lack of high-level structure. In practice, these
implementations are often based on well-known cryptographic
functions, whose description is publicly available. This opens
the road for an alternative to cumbersome line-by-line anal-
the search for signs indicating which cryptographic
ysis:
function was implemented.
Identifying this function does
not directly provide cryptographic parameters, but it makes
ﬁnding them much easier.
Most existing tools for cryptographic function identiﬁca-
tion in binary programs, like KANAL [33], DRACA [15] or
Signsrch [4], are based on the recognition of code features by
static analysis, such as speciﬁc constant values or machine
language instructions, that are usually present in normal im-
plementations of the recognized primitives. However, these
tools are mostly ineﬀective on obfuscated programs, which
have been made purposely hard to analyze and therefore
hide static signs that could betray the presence of known
cryptographic functions. Hence simple static-analysis iden-
tiﬁcation of cryptographic functions is not suitable for such
programs.
169In contrast to this approach, we propose here a method
and a tool called Aligot for identifying cryptographic func-
tions and retrieving their parameters, in a manner that is
essentially independent of the actual implementation. Our
solution leverages the particular input-output (I/O) rela-
tionship of cryptographic functions. Indeed if F1 is a cryp-
tographic function such that F1(K, C) = C(cid:48), with K a key,
C an encrypted text and C(cid:48) a decrypted text, then it is
very unlikely that another cryptographic function F2 veri-
ﬁes F2(K, C) = C(cid:48). In other words, the pair ((K, C), C(cid:48))
identiﬁes F1 with overwhelming probability.
Consequently, if we observe during a particular execution
of a program P that the values K and C are used to produce
the value C(cid:48), then we can conclude that P implements F1
during this particular execution. Of course, not all execution
paths of P may implement F1, but identifying which poten-
tial paths are relevant is a separate reverse-engineering prob-
lem, albeit one that is handled with success by most skillful
malware reverse engineers. Henceforth, we therefore restrict
ourselves on the problem of identifying cryptographic func-
tions along a given (chosen) execution path. In a nutshell,
our method consists of (1) the retrieval of I/O parameters
of possible cryptographic code during its execution, and (2)
the comparison of the observed I/O relationship with those
of known cryptographic functions.
Aligot was built and tested against other crypto detection
tools with obfuscated implementations of the TEA, RC4,
AES, MD5 and RSA cryptographic functions. The test
cases included home-made obfuscated programs (for bench-
marking purposes), programs obfuscated with a commercial
packer (AsProtect), and existing malware (Storm, Silent-
Banker, Sality, Waledac). Aligot performed signiﬁcantly
better than all the other tools on all tested cryptographic
functions and samples (synthetic and malware).
We describe in §2 the previous work on cryptographic
function analysis in binary programs. We provide an overview
of our method in §3, and the detailed steps in §4 to 8. In §9
we report on our experimental evaluation of the method. We
discuss the viability and limitations of our overall approach
and conclude in §10 and 11.
2. RELATED WORK
The problem of analyzing cryptographic code and extract-
ing its parameters in binary programs has been previously
studied for diﬀerent motivations. Within the context of
Computer Forensics analysis, Halderman et al.
[11] used
particular properties of DES, AES and RSA to retrieve cryp-
tographic parameters in the presence of bit-ﬂipping errors.
Maartmann-Moe et al. [19] extended this technique to the
Serpent and Twoﬁsh ciphers. As these methods rely on such
algorithm speciﬁc characteristics, they unfortunately require
an in-depth study of each cipher.
As far as we know, Noe Lutz [18] was the ﬁrst to ex-
plore generic cryptographic code detection using dynamic
analysis. Lutz uses three indicators to recognize crypto-
graphic code in execution traces: (1) presence of loops, (2) a
high ratio of bitwise arithmetic instructions and (3) entropy
change in the data manipulated by the code. In subsequent
work, Wang et al.
[6] used sim-
ilar observations to automatically retrieve decrypted data
from encrypted communications. Several assumptions made
in these works are not applicable to obfuscated programs.
In particular arithmetic instructions are commonly used in
[32] and Caballero et al.
junk code, making them an unreliable indicator of the pres-
ence of cryptographic code. Finally, none of these techniques
aim to the precise identiﬁcation of the cryptographic func-
tions implemented.
Gr¨obert et al. [10] proposed in 2010 a work on crypto-
graphic function identiﬁcation. They deﬁne in particular
several criteria to extract cryptographic parameters from
execution traces and use I/O relationship comparison with
known cryptographic functions. Parameters are identiﬁed
thanks to the spatial proximity in the execution trace of
instructions accessing their location in memory. In the pres-
ence of junk code, such a notion of proximity would be
diﬃcult to apply, because instructions responsible to ac-
cess a same parameter can then be at a very variable dis-
tance. Moreover, candidate cryptographic parameters are
extracted based on their size and therefore variable-length
parameter functions like RC4 are hard to recognize. Zhao et
al. also used I/O relationship to identify cryptographic func-
tions [37]. Again, they made several assumptions on their
programs, e.g. the ratio of exclusive-ors in cryptographic
code or the use of certain types of functions, that are rarely
satisﬁed in obfuscated programs.
Consequently, while their work opened the path to cryp-
tographic identiﬁcation based on I/O relationship compari-
son, it does not address identiﬁcation within obfuscated pro-
grams. Implementing this identiﬁcation is indeed far from
trivial in such an environment. First, obfuscated programs
lack abstractions that allow us to easily consider candidate
parts of the code for identiﬁcation. Second, obfuscation
techniques tend to strongly increase the number of data ac-
cesses made by a program and therefore precise retrieval of
cryptographic parameters becomes quite challenging.
3. SOLUTION OVERVIEW
A single I/O pair is enough to identify most cryptographic
functions. We use this observation to identify them in ob-
fuscated programs with the following three-step process:
1. Gather execution trace of the targeted program.
Our identiﬁcation technique needs the exact values
manipulated by a program during an execution. Dy-
namic analysis is therefore particularly suitable and ex-
ecution traces thus constitute our problem input. We
will deﬁne execution traces formally in §4.
2. Extract cryptographic code with I/O param-
eters from execution traces. We use a speciﬁc
deﬁnition of loops to build an abstraction suitable for
cryptographic code detection in obfuscated programs.
Secondly, we analyze data ﬂow between loops in or-
der to group those participating in the same cryp-
tographic implementation, as there exists multi-loop
cryptographic functions (e.g. RC4 [34]). We obtain
a loop data ﬂow model of the possible cryptographic
code, from which we then extract I/O values. The
complete building process from an execution trace to
a set of loop data ﬂows will be explained in §5 and 6.
3. Comparison with known cryptographic func-
tions. Each extracted loop data ﬂow is compared with
a set of cryptographic reference implementations.
If
one of these implementations produces the same out-
put than the loop data ﬂow when executed on the same
inputs, then we can conclude that they both implement
170the same cryptographic function. Despite its appar-
ent simplicity, such comparison phase is non-trivial,
because of the diﬀerence of abstraction between high-
level reference implementations on one side, and ex-
ecution traces on the other. This last step will be
explained in §8.
4. EXECUTION TRACE GATHERING
In this work, we focus exclusively on the Windows/x86
platform. Among all tracing tools available in such environ-
ment, we chose Pin, the dynamic binary instrumentation
framework supported by Intel [17], mainly because of its
ease of use and its ability to deal with self-modifying code,
a common technique in obfuscated programs. While we will
not describe the tracer implementation, we do need to intro-
duce a formal notion of execution traces as a basis for the
rest of the reasoning about loops. An execution trace rep-
resents intuitively a series of operations done by a program
during a run on a system. At each step, we collect what we
call a dynamic instruction. A dynamic instruction D is a
tuple composed of:
• a memory address A[D],
• a machine instruction I[D] executed at A[D],
• two sets of memory addresses read and written RA[D]
and WA[D] by I[D],
• two sets of registers read and written RR[D] and WR[D]
by I[D].
An execution trace T is a ﬁnite sequence D1; . . . ; Dn of
dynamic instructions.
In the remainder of the paper, we
will denote as X 86 the set of machine instructions and as
T RACE the set of execution traces. Moreover, given T ∈
T RACE, T/Ins is deﬁned as the machine instruction se-
quence, that is T/Ins = I1; . . . ; In if ∀k ∈ [1, n],I[Dk] = Ik.
In practice we also gather the exact values for each data
access made by a dynamic instruction (in memory or regis-
ters), but for the sake of simplicity we do not mention them
in the formal trace notion.
5. LOOP EXTRACTION
When analyzing binary programs, one can usually divide
code into functions. But this function notion is only a heuris-
tic based on compiler idiosyncrasies (calling convention, pro-
logue and epilogue code, etc.), making it unreliable in obfus-
cated programs that do not maintain them. This is why we
built a speciﬁc abstraction for cryptographic code in obfus-
cated programs based on loops. We will ﬁrst motivate this
choice, we will then present some existing loop deﬁnitions,
and ﬁnally give our deﬁnition and describe the associated
recognition algorithm.
5.1 Motivation and Related Work
As noted by Noe Lutz in his thesis, “loops are a recur-
ring feature in decryption algorithms” [18]. Indeed crypto-
graphic functions usually apply the same treatment on a set
of data in an iterative fashion, making loops a very frequent
structure in their implementations. It is within these loops
that the core cryptographic operations happen and that the
cryptographic I/O parameters are manipulated. Hence, they
constitute a good starting point for our abstraction.
On the other hand, loops are present in many diﬀerent
types of algorithms, not only cryptographic ones. Thus, we
need a reﬁned loop notion focused on cryptographic code.
For example Fig. 1(a) presents an obfuscation technique
named control-ﬂow ﬂattening —in pseudo-C language for
the sake of clarity— seen in the Mebroot malware family
[31, 9]. A sequential code is transformed into a loop that
implements a part of the original code at each iteration.
Thus, a diﬀerent logic is executed each time the back-edge
is taken: should it be considered as a loop in our crypto-
graphic context?
Secondly, Fig. 1(b) presents a classic compiler optimiza-
tion technique called unrolling that can also be used as a
means of obfuscation. A three-instruction sequence is re-
peated three times without any back-edge: should it be con-
sidered as a loop in our cryptographic context?
(a) Control-ﬂow Flatten-
ing
(b) Unrolling
Figure 1: Control-ﬂow graph of loop edge cases
Several loop deﬁnitions for binary programs have been
proposed in the literature. Three of them are of particular
interest in the context of this work:
1. Natural loops This is the usual deﬁnition in static
program analysis. Back-edges are deﬁned on the pro-
gram’s control-ﬂow graph (CFG) as edges between a
node and one of its dominant [3]. Thus, a loop is iden-
tiﬁed by one back-edge, and an application of this deﬁ-
nition on their CFG would consider Fig. 1(a) as a loop,
but not Fig. 1(b).