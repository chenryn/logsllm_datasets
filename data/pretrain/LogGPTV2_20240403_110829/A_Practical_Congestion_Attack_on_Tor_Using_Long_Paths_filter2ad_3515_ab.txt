negatives due to normal network ﬂuctuations. We pro-
vide details about our attempt to reproduce Murdoch and
Danezis’s work in Section 6.
McLachlan and Hopper [24] propose a similar cir-
cuit clogging attack against MorphMix [33], disproving
claims made in [36] that MorphMix is invulnerable to
such an attack. Because all MorphMix users are required
to also be mix servers, McLachlan and Hopper achieve
a stronger result than Murdoch and Danezis:
they can
identify not only the circuit, but the user as well.
Hopper et al. [19] build on the original clogging attack
idea to construct a network latency attack to guess the lo-
cation of Tor users. Their attack is two-phase: ﬁrst use a
congestion attack to identify the relays in the circuit, and
then build a parallel circuit through those relays to esti-
mate the latency between the victim and the ﬁrst relay.
A key contribution from their work is a more mathemat-
ical approach that quantiﬁes the amount of information
leaked in bits over time. We also note that without a
working congestion attack, the practicality of their over-
all approach is limited.
3
Figure 1: Attack setup. This ﬁgure illustrates the normal circuit constructed by the victim to the malicious Tor exit
node and the “long” circuit constructed by the attacker to congest the entry (or guard) node used by the victim. The
normal thin line from the client node to the server represents the victim circuit through the Tor network. The unwitting
client has chosen the exit server controlled by the adversary, which allows the JavaScript injection. The double thick
lines represent the long circular route created by the malicious client through the ﬁrst Tor router chosen by the client.
The dotted line shows the path that the JavaScript pings travel.
3 Our Attack
Three features of Tor’s design are crucial for our attack.
First of all, Tor routers do not introduce any artiﬁcial de-
lays when routing requests. As a result, it is easy for
an adversary to observe changes in request latency. Sec-
ond, the addresses of all Tor routers are publicly known
and easily obtained from the directory servers. Tor de-
velopers are working on extensions to Tor (called bridge
nodes [10,11]) that would invalidate this assumption, but
this service was not widely used at the time of this writ-
ing. Finally, the latest Tor server implementation that
was available at the time we concluded our original at-
tacks (Tor version 0.2.0.29-rc) did not restrict users from
establishing paths of arbitrary length, meaning that there
was no restriction in place to limit constructing long
paths through Tor servers.1 We used a modiﬁed client
version (based on 0.2.0.22-rc) which used a small ﬁxed
path length (speciﬁcally three) but modiﬁed it to use a
variable path length speciﬁed by our attacker.
Fig. 1 illustrates the three main steps of our attack.
First, the adversary needs to ensure that the initiator re-
peatedly performs requests at known intervals. Second,
the adversary observes the pattern in arrival times of
these requests. Finally, the adversary changes the pat-
tern by selectively performing a novel clogging attack on
1Tor version 0.2.1.3-alpha and later servers restrict path lengths to
a maximum of eight because of this work.
Tor routers to determine the entry node. We will now
describe each of these steps in more detail.
JavaScript Injection
3.1
Our attack assumes that the adversary controls an exit
node which is used by the victim to access an HTTP
server. The attacker uses the Tor exit node to inject a
small piece of JavaScript code (shown in Fig. 2) into
an HTML response.
It should be noted that most Tor
users do not disable JavaScript and that the popular Tor
Button plugin [31] and Privoxy [20] also do not disable
JavaScript code; doing so would prevent Tor users from
accessing too many web pages. The JavaScript code
causes the browser to perform an HTTP request every
second, and in response to each request, the adversary
uses the exit node to return an empty response, which is
thrown away by the browser. Since the JavaScript code
may not be able to issue requests precisely every second,
it also transmits the local system time (in milliseconds)
as part of the request. This allows the adversary to de-
termine the time difference between requests performed
by the browser with sufﬁcient precision.
(Clock skew
on the systems of the adversary and the victim is usu-
ally insigniﬁcant for the duration of the attack.) While
JavaScript is not the only conceivable way for an attacker
to cause a browser to transmit data at regular intervals
(alternatives include HTTP headers like refresh [13]
4
ClientTor Node 3 - Our Exit NodeServerTor Node 1 - Unknown NodeMalicious ClientTor Node 2 - KnownHigh BW Tor Node 1High BW Tor Node 2Malicious Server
Figure 2: JavaScript code injected by the adversary’s exit
node. Note that other techniques such as HTML refresh,
could also be used to cause the browser to perform peri-
odic requests.
and HTML images [19]), JavaScript provides an easy
and generally rather dependable method to generate such
a signal.
The adversary then captures the arrival times of the
periodic requests performed by the browser. Since the
requests are small, an idle Tor network would result in
the differences in arrival times being roughly the same
as the departure time differences — these are known be-
cause they were added by the JavaScript as parameters to
the requests. Our experiments suggest that this is often
true for the real network, as most routers are not seri-
ously congested most of the time. This is most likely
in part due to TCP’s congestion control and Tor’s built-
in load balancing features. Speciﬁcally, the variance in
latency between the periodic HTTP requests without an
active congestion attack is typically in the range of 0–5 s.
However, the current Tor network is usually not en-
tirely idle and making the assumption that the victim’s
circuit is idle is thus not acceptable. Observing conges-
tion on a circuit is not enough to establish that the node
under the congestion attack by the adversary is part of the
circuit; the circuit may be congested for other reasons.
Hence, the adversary needs to also establish a baseline
for the congestion of the circuit without an active con-
gestion attack. Establishing measurements for the base-
line is done before and after causing congestion in or-
der to ensure that observed changes during the attack are
caused by the congestion attack and not due to unrelated
changes in network characteristics.
The attacker can repeatedly perform interleaved mea-
surements of both the baseline congestion of the circuit
and the congestion of the circuit while attacking a node
presumed to be on the circuit. The attacker can continue
the measurements until either the victim stops using the
circuit or until the mathematical analysis yields a node
with a substantially higher deviation from the baseline
under congestion compared to all other nodes. Before we
can describe details of the mathematical analysis, how-
ever, we have to discuss how congestion is expected to
impact the latency measurements.
Impact of Congestion on Arrival Times
3.2
In order to understand how the congestion attack is ex-
pected to impact latency measurements, we ﬁrst need to
take a closer look at how Tor schedules data for rout-
ing. Tor makes routing decisions on the level of ﬁxed-
size cells, each containing 512 bytes of data. Each Tor
node routes cells by going round-robin through the list
of all circuits, transmitting one packet from each circuit
with pending data (see Fig. 3). Usually the number of
(active) circuits is small, resulting in little to no delay. If
the number of busy circuits is large, messages may start
to experience signiﬁcant delays as the Tor router iterates
over the list (see Fig. 4).
Since the HTTP requests transmitted by the injected
JavaScript code are small (∼250 bytes, depending on
count and time), more than one request can ﬁt into a sin-
gle Tor cell. As a result multiple of these requests will
be transmitted at the same time if there is congestion at
a router. A possible improvement to our attack would be
to use a lower level API to send the packets, as the XML-
HttpRequest object inserts unnecessary headers into the
request/response objects.
We will now characterize the network’s behavior un-
der congestion with respect to request arrival times. As-
suming that the browser transmits requests at a perfectly
steady rate of one request per second, a congested router
introducing a delay of (at most) n seconds would cause
groups of n HTTP requests to arrive with delays of ap-
proximately 0, 1, . . . , n−1 seconds respectively: the ﬁrst
cell is delayed by n−1 seconds, the cell arriving a second
later by n − 2 seconds, and the n-th cell arrives just be-
fore the round-robin scheduler processes the circuit and
sends all n requests in one batch. This characterization
is of course a slight idealization in that it assumes that
n is small enough to allow all of the HTTP requests to
be grouped into one Tor cell and that there are no other
signiﬁcant ﬂuctuations. Furthermore, it assumes that the
amount of congestion caused by the attacker is perfectly
steady for the duration of the time measurements, which
may not be the case. However, even without these ide-
alizations it is easy to see that the resulting latency his-
tograms would still become “ﬂat” (just not as perfectly
5
Figure 3: This example illustrates a Tor router which currently is handling three circuits at two points in time (t = 3
and t = 4). Circuits (A, B and C) have queues; cells are processed one at a time in a round-robin fashion. As the
number of circuits increases, the time to iterate over the queues increases. The left ﬁgure shows the circuit queues
and output queue before selection of cell C1 for output and the right ﬁgure shows the queues after queueing C1 for
output. The thicker bottom box of queue C (left) and queue B (right) shows the current position of the round-robin
queue iterator. At time t = 1 the last cell from queue A was processed leaving the queue A empty. As a result, queue
A is skipped after processing queue C.
Figure 4: This example illustrates a Tor router under congestion attack handling 15 circuit queues. Note that if a
circuit includes a node multiple times, the node assigns the circuit multiple circuit queues. In this example, not all of
the circuit queues are busy — this may be because the circuits are not in use or because other routers on the circuit
are congested. As in Fig. 3, the left and right ﬁgures show the state of the mix before and after queueing a cell, in this
case F0.
6
ABB1B2B3B4B5B6CC1C2C0t = 0A0t = 1B0t = 2Output QueueABB1B2B3B4B5B6CC2C0t = 0A0t = 1B0t = 2C1t = 3Output QueueABB0B1CC1C2C3C4C5DD1D2D3EE1E2E3E4E5FF0F1F2F3F4F5F6GG0G1HH0H1H2H3H4H5II0JKK0K1K2K3LL0L1MM0M1M2M3M4NN0N1N2N3OO0O1O2C0t = 0D0t = 1E0t = 2Output QueueABB0B1CC1C2C3C4C5DD1D2D3EE1E2E3E4E5FF1F2F3F4F5F6GG0G1HH0H1H2H3H4H5II0JKK0K1K2K3LL0L1MM0M1M2M3M4NN0N1N2N3OO0O1O2C0t = 0D0t = 1E0t = 2F0t = 3Output Queueregular in terms of arrival patterns) assuming the load
caused by the attacker is sufﬁciently high.
Since we ideally expect delays in message arrival
times for a congested circuit to follow a roughly ﬂat dis-
tribution between zero and n, it makes sense to compute
a histogram of the delays in message arrival times.
If
the congestion attack is targeting a node on the circuit,
we would expect to see a roughly equal number of mes-
sages in each interval of the histogram. We will call the
shape of the resulting histogram horizontal. If the circuit
is not congested, we expect to see most messages arrive
without signiﬁcant delay which would place them in the
bucket for the lowest latency. We will call the shape of
the resulting histogram vertical. So for example, in Fig. 6
the control data are vertical, whereas the attack data are
more horizontal.
Note that the clock difference between the victim’s
system and the adversary as well as the minimal network
delay are easily eliminated by normalizing the observed
time differences. As a result, the latency histograms
should use the increases in latency over the smallest ob-
served latency, not absolute latencies.
3.3 Statistical Evaluation
In order to numerically capture congestion at nodes we
ﬁrst measure the node’s baseline latency, that is latency
without an active congestion attack (at least as far as we
know). We then use the observed latencies to create n
bins of latency intervals such that each bin contains the
same number of data points. Using the χ2-test we could
then determine if the latency pattern at the respective
peer has changed “signiﬁcantly”. However, this simplis-
tic test is insufﬁcient. Due to the high level of normal
user activity, nodes frequently do change their behavior
in terms of latencies, either by becoming congested or
by congestion easing due to clients switching to other
circuits. For the attacker, congestion easing (the latency
histogram getting more vertical) is exactly the opposite
of the desired effect. Hence the ordinary χ2 test should
not be applied without modiﬁcation. What the attacker is
looking for is the histogram becoming more horizontal,
which for the distribution of the bins means that there are
fewer values in the low-latency bins and more values in
the high-latency bins. For the medium-latency bins no
signiﬁcant change is expected (and any change there is
most likely noise).
Hence we modify our computation of the χ2 value
such that we only include changes in the anticipated di-
rection: for the bins corresponding to the lowest third of
the latencies, the square of the difference between ex-
pected and observed number of events is only counted in
the summation if the number of observed events is lower
than expected. For the bins corresponding to the high-
est third of the latencies, the square of the difference be-
tween expected and observed number of events is only
counted if the number of observed events is higher than
expected. Since changes to the bins in the middle third
are most likely noise, those bins are not included in the
χ2 calculation at all (except as a single additional degree
of freedom).
Using this method, a single iteration of measuring the
baseline and then determining that there was a signiﬁcant
increase in latency (evidenced by a large χ2-value), only
signiﬁes that congestion at the guard for the victim cir-
cuit was correlated (in time) with the congestion caused
by the attacker. Naturally, correlation does not imply
causality; in fact, for short (30–60 s) attack runs it fre-
quently happens that the observed χ2-value is higher for
some false-positive node than when attacking the correct
guard node. However, such accidental correlations virtu-
ally never survive iterated measurements of the latency
baseline and χ2-values under attack.
3.4 Congestion Attack
Now we focus on how the attacker controlling the exit
node of the circuit will cause signiﬁcant congestion at
nodes that are suspected to be part of the circuit. In gen-
eral, we will assume that all Tor routers are suspects and