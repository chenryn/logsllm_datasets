# 【漏洞分析】前往黑暗之门！Debugee in QEMU
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[k0shl](http://bobao.360.cn/member/contribute?uid=1353169030)
预估稿费：600RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
****
**0x00 前言**
好久没给安全客投稿了，最近刚刚接触漏洞挖掘，一直在读一些经典的fuzzer源码，同时也开始接触虚拟化逃逸这块的内容，在这个时候正巧碰到了两个非常经典的漏洞利用，相信很多小伙伴也已经看过了，phrack前段时间刚刚更新了关于这个漏洞的详细利用过程。
我后来对这个漏洞进行了动态调试，并且通过phrack的paper恶补了一些关于虚拟机的工作原理，Guest OS和Host OS之间的一些知识。
在调试的过程中，我愈发觉得这两个漏洞作为前往黑暗之门入门再合适不过，通过对两个漏洞的分析和利用的调试，可以熟悉这类虚拟化漏洞的调试原理。今天，我将和大家分享QEMU虚拟化逃逸的调试环境搭建，关于CVE-2015-5165和CVE-2015-7504漏洞动态调试分析，以及补丁对比。
在此之前，我默认阅读此文的小伙伴们已经看过了phrack.org关于VM Escape Case
Study的文章，并且已经了解虚拟机工作的基本原理，包括但不限于内存管理机制，REALTEK网卡、PCNET网卡的数据包结构，Tx、Rx缓冲区等等。关于phrack.org的文章以及看雪翻译版分析文章的链接我将在文末给出。下面我们一起出发前往黑暗之门吧！
**0x01 QEMU环境搭建**
在调试QEMU虚拟化逃逸漏洞之前，我们需要搭建虚拟化逃逸的环境，首先通过git clone下载QEMU，并且通过git
check设定分支（如果要调试以前版本的话）。
    $ git clone git://git.qemu-project.org/qemu.git
    $ cd qemu
    $ mkdir -p bin/debug/native
    $ cd bin/debug/native
    $ ../../../configure --target-list=x86_64-softmmu --enable-debug --disable-werror
    $ make
在make的时候，Host OS会需要一些库的安装，可以通过apt-get来下载安装，比如zlib，glib-2.22等（其中glib-2.22也需要一些依赖，同时需要去网站下载，网站地址：
）。
安装完毕后，会在/path/to/qemu/bin/debug/native/下生成一个x86_64-softmmu目录，在此之前，需要安装一个qcow2的系统文件，所以需要通过qemu-img来生成一个qcow2系统文件。
    $ qemu-img create -f qcow2 ubuntu.qcow2 20G
之后首先通过qemu-system-x86_64完成对qcow2系统文件中系统的安装，需要用-cdrom对iso镜像文件进行加载。同时，需要安装vncviewer，这样可以通过vncviewer对qemu启动的vnc端口进行连接。
    $ qemu-system-x86_64 -enable-kvm -m 2048 -hda /path/to/ubuntu.qcow2 -cdrom /path/to/ubuntu.iso
    $ apt-get install xvnc4viewer
通过vnc连接qemu之后，根据镜像文件提示进行安装，这里推荐还是用server.iso，因为安装比较快，用desktop的话可能会稍微卡顿一些，安装完成后就获得了一个有系统的qcow2文件，之后就可以用包含漏洞的rlt8139和pcnet网卡硬件启动了。
    $ ./qemu-system-x86_64 -enable-kvm -m 2048 -display vnc=:89 -netdev user,id=t0, -device rtl8139,netdev=t0,id=nic0 -netdev user,id=t1, -device pcnet,netdev=t1,id=nic1 -drive  file=/path/to/ubuntu.qcow2,format=qcow2,if=ide,cache=writeback
启动之后，这里我为了省事，直接用NAT的方法共享宿主机网络，然后在本地通过SimpleHTTPServer建立一个简单的HTTP
Server，通过wget方法获得两个漏洞的PoC，这两个漏洞PoC可以通过gcc -static的方法在本地编译后直接上传，然后运行即可。
之后在宿主机通过ps -ef|grep qemu找到qemu的启动进程，通过gdb attach pid的方法附加，按c继续运行就可以了，可以通过b
function的方法下断点，方便跟踪调试。
**0x02 CVE-2015-5165漏洞分析**
CVE-2015-5165是一个内存泄露漏洞，由于对于ip->ip_len和hlen长度大小没有进行控制，导致两者相减计算为负时，由于ip_data_len变量定义是unsigned类型，导致这个值会非常大，从而产生内存泄露。漏洞文件在/path/to/qemu/hw/net/rtl8139.c。
首先根据漏洞描述，漏洞发生在rtl8139_cplus_transmit_one函数中，通过b
rtl8139_cplus_transmit_one的方法在该函数下断点，之后运行PoC，命中函数后，首先函数会传入一个RTL8139State结构体变量。继续单步跟踪，会执行到一处if语句，这里会比较当前数据包头部是否是IPV4的头部。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0x4 
    [-------------------------------------code-------------------------------------]
       0x55b25db58480 :shr    al,0x4
       0x55b25db58483 :movzx  eax,al
       0x55b25db58486 :and    eax,0xf
    => 0x55b25db58489 :cmp    eax,0x4
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db584892173                if (IP_HEADER_VERSION(ip) != IP_HEADER_VERSION_4) {
可见此时确实是IPv4的结构，随后进入if语句的代码逻辑，在其中会调用be16_to_cpu对ip->ip_len进行转换，ip->ip_len的长度为0x1300，转换后长度为0x13。
    [----------------------------------registers-----------------------------------]
    RAX: 0x1300 
    RDI: 0x1300 //ip->ip_len
    EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x55b25db584f7 :
        movzx  eax,WORD PTR [rax+0x2]
       0x55b25db584fb :movzx  eax,ax
       0x55b25db584fe :mov    edi,eax
    => 0x55b25db58500 :
        call   0x55b25db54a37 
       0x55b25db58505 :mov    edx,eax
    Guessed arguments:
    arg[0]: 0x1300 //ip->ip_len=0x1300
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db585002181                    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    RAX: 0x13 //经过be16_to_cpu()之后返回值为0x13
    [-------------------------------------code-------------------------------------]
       0x55b25db584fb :movzx  eax,ax
       0x55b25db584fe :mov    edi,eax
       0x55b25db58500 :
        call   0x55b25db54a37 
    => 0x55b25db58505 :mov    edx,eax
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db585052181                    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
转换后，会将转换后的值和hlen相减。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0x14 //hlen=0x14
    RDX: 0x13 //be16_to_cpu(ip->ip_len)=0x13
    [-------------------------------------code-------------------------------------]
       0x55b25db58500 :
        call   0x55b25db54a37 
       0x55b25db58505 :mov    edx,eax
       0x55b25db58507 :
        mov    eax,DWORD PTR [rbp-0x13c]
    => 0x55b25db5850d :sub    edx,eax
       0x55b25db5850f :mov    eax,edx
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db5850d2181                    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RDX: 0xffffffff //相减之后为0xffffffff，这个变量是一个unsigned类型，此值极大
    [-------------------------------------code-------------------------------------]
       0x55b25db5850d :sub    edx,eax
    => 0x55b25db5850f :mov    eax,edx
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db5850f2181                    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
相减后，这个值为0xffffffff，而这个值是一个16位无符号数，也就是是一个极大值0xffff，我们可以通过源码看到关于这个变量的定义。
    uint16_t ip_data_len = 0;
    ……
    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
接下来继续单步跟踪，会发现ip_data_len这个极大值会被用来计算tcp_data_len，也就是tcp数据的长度，随后还有一个tcp_chunk_size，这个chunk_size限制了一个数据包的最大值，当tcp数据的长度超过chunk_size的时候，则会分批发送。
    //计算tcp_data_len
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0xffff //ip_data_len
    [-------------------------------------code-------------------------------------]
    => 0x55b25db586c2 :
        sub    eax,DWORD PTR [rbp-0x10c]//hlen的大小是0x14
       0x55b25db586c8 :
        mov    DWORD PTR [rbp-0x108],eax
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db586c22231                    int tcp_data_len = ip_data_len - tcp_hlen;
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0xffeb //相减后tcp_data_len长度是0xffeb
    [-------------------------------------code-------------------------------------]
       0x55b25db586c2 :
        sub    eax,DWORD PTR [rbp-0x10c]
    => 0x55b25db586c8 :
        mov    DWORD PTR [rbp-0x108],eax
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db586c82231                    int tcp_data_len = ip_data_len - tcp_hlen;
    //计算chunk_size = 0x5b4      
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    RAX: 0x5b4 
    [-------------------------------------code-------------------------------------]