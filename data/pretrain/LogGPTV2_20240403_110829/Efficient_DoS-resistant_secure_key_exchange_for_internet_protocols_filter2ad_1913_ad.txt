HKa (NA; NB; A)
(1)
(2)
(3)
Here, neither party signs the identity of its peer. Instead, each
party includes a MAC, keyed with a key derived from gab, and ap-
plied to its own identity (concatenated with NA and NB). JFKr en-
joys the same basic core security as this protocol. In addition, JFKr
adds a preliminary cookie mechanism for DoS protection (which
results in adding one ﬂow to the protocol and having the Responder
in JFKr play the role of A), and encrypts the last two messages in
order to provide identity protection. The identity protection against
passive adversaries covers both parties, since the identities are sent
only in the last two messages.
The next step in the analysis is to generalize to the case where
the private DH exponents are reused across sessions. This is done
by making stronger (but still reasonable) computational intractabil-
ity assumptions involving both the DH problem and the HMAC
pseudo-random function. We defer details to the full analysis pa-
per.
5. RELATED WORK
The basis for most key agreement protocols based on public-key
signatures has been the Station to Station (StS)[11] protocol. In its
simplest form, shown in Figure 1, this consists of a Difﬁe-Hellman
exchange, followed by a public key signature authentication step,
typically using the RSA algorithm in conjunction with some certiﬁ-
cate scheme such as X.509. In most implementations, the second
message is used to piggy-back the responder’s authentication infor-
mation, resulting in a 3-message protocol, shown in Figure 2. Other
forms of authentication may be used instead of public key signa-
tures (e.g., Kerberos[37] tickets, or preshared secrets), but these
are typically applicable in more constrained environments. While
the short version of the protocol has been proven to be the most
efﬁcient[13] in terms of messages and computation, it suffers from
some obvious DoS vulnerabilities.
5.1
Internet Key Exchange (IKE)
The Internet Key Exchange protocol (IKE)[15] is the current
IETF standard for key establishment and SA parameter negotiation.
initiator
responder
Initiator Diffie−Hellman public value
Responder Diffie−Hellman public value
Initiator RSA signature and certificate(s)
Responder RSA signature and certificate(s)
Figure 1: 4-message Station to Station key agreement protocol.
IKE is based on the ISAKMP [33] framework, which provides en-
coding and processing rules for a set of payloads commonly used
by security protocols, and the Oakley protocol, which describes an
adaptation of the StS protocol for use with IPsec.2 The public-key
encryption modes of IKE are based on SKEME [27].
IKE is a two-phase protocol: during the ﬁrst phase, a secure
channel between the two key management daemons is established.
Parameters such as an authentication method, encryption/hash al-
gorithms, and a Difﬁe-Hellman group are negotiated at this point.
This set of parameters is called a “Phase I SA.” Using this infor-
mation, the peers authenticate each other and compute key ma-
terial using the Difﬁe-Hellman algorithm. Authentication can be
based on public key signatures, public key encryption, or preshared
passphrases. There are efforts to extend this to support Kerberos
tickets[37] and handheld authenticators.
It should also be noted
that IKE can support other key establishment mechanisms (besides
Difﬁe-Hellman), although none has been proposed yet.3
Furthermore, there are two variations of the Phase I message ex-
change, called “main mode” and “aggressive mode.” Main mode
provides identity protection, by transmitting the identities of the
peers encrypted, at the cost of three message round-trips (see Fig-
ure 3). Aggressive mode provides somewhat weaker guarantees,
but requires only three messages (see Figure 4).
As a result, aggressive mode is very susceptible to untraceable4
denial of service (DoS) attacks against both computational and mem-
ory resources[42]. Main mode is also susceptible to untraceable
memory exhaustion DoS attacks, which must be compensated for
in the implementation using heuristics for detection and avoidance.
To wit:
2We remark, however, that the actual cryptographic core of IKE’s
signature mode is somewhat different than Oakley. In Oakley the
peer authentication is guaranteed by having each party explicitly
sign the peer identity. In contrast, IKE guarantees peer authenti-
cation by having each party MAC its own identity using a key de-
rived from the agreed Difﬁe-Hellman secret. This method of peer
authentication is based on the Sign-and-Mac design [28].
3There is ongoing work (still in its early stages) in the IETF to
use IKE as a transport mechanism for Kerberos tickets, for use in
protecting IPsec trafﬁc.
4The attacker can use a forged address when sending the ﬁrst mes-
sage in the exchange.
54initiator
responder
initiator
responder
Initiator Diffie−Hellman public value
Responder Diffie−Hellman public value
Responder RSA signature and certificate(s)
Initiator RSA signature and certificate(s)
Figure 2: 3-message Station to Station key agreement protocol.
(cid:15) The responder has to create state upon receiving the ﬁrst mes-
sage from the initiator, since the Phase I SA information is
exchanged at that point. This allows for a DoS attack on the
responder’s memory, using random source-IP addresses to
send a ﬂood of requests. To counter this, the responder could
employ mechanisms similar to those employed in countering
TCP SYN attacks[17, 9, 40]. JFK maintains no state at all
after receiving the ﬁrst message.
(cid:15) An initiator who is willing to go through the ﬁrst message
round-trip (and thus identify her address) can cause the re-
sponder to do a Difﬁe-Hellman exponential generation as
well as the secret key computation on reception of the third
message of the protocol. The initiator could do the same with
the ﬁfth message of the protocol, by including a large num-
ber of bogus certiﬁcates, if the responder blindly veriﬁes all
signatures. JFK mitigates the effects of this attack by reusing
the same exponential across different sessions.
The second phase of the IKE protocol is commonly called “quick
mode” and results in IPsec SAs being established between the two
negotiating parties, through a three-message exchange. Parameters
such as the IP security protocol to use (ESP/AH), security algo-
rithms, the type of trafﬁc that will be protected, etc. are negotiated
at this stage. Since the two parties have authenticated each other
and established a shared key during Phase I, quick mode messages
are encrypted and authenticated using that information. Further-
more, it is possible to derive the IPsec SA keying material from
the shared key established during the Phase I Difﬁe-Hellman ex-
change. To the extent that multiple IPsec SAs between the same
two hosts are needed, this two-phase approach results in faster and
more lightweight negotiations (since the same authentication infor-
mation and keying material is reused).
Unfortunately, two hosts typically establish SAs protecting all
the trafﬁc between them, limiting the beneﬁts of the two-phase
protocol to lightweight re-keying. If PFS is desired, this beneﬁt
is further diluted.
Another problem of the two-phase nature of IKE manifests it-
self when IPsec is used for ﬁne-grained access control to network
services. In such a mode, credentials exchanged in the IKE pro-
tocol are used to authorize users when connecting to speciﬁc ser-
vices. Here, a complete Phase I & II exchange will have to be done
for each connection (or, more generally, trafﬁc class) to be pro-
Initiator cookie, proposed phase1 SA
Responder cookie, accepted Phase1 SA
Initiator Diffie-Hellman value & Nonce
Responder Diffie-Hellman value & Nonce
Initiator signature, certs & identity
Responder signature, certs & identity
Figure 3: IKE Main Mode exchange with certiﬁcates.
tected, since credentials, such as public key certiﬁcates, are only
exchanged during Phase I.
IKE protects the identities of the initiator and responder from
eavesdroppers.5 The identities include public keys, certiﬁcates, and
other information that would allow an eavesdropper to determine
which principals are trying to communicate. These identities can
be independent of the IP addresses of the IKE daemons that are
negotiating (e.g., temporary addresses acquired via DHCP, public
workstations with smartcard dongles, etc.). However, since the ini-
tiator reveals her identity ﬁrst (in message 5 of Main Mode), an
attacker can pose as the responder until that point in the protocol.
The attackers cannot complete the protocol (since they do not pos-
sess the responder’s private key), but they can determine the initia-
tor’s identity. This attack is not possible on the responder, since she
can verify the identity of the initiator before revealing her identity
(in message 6 of Main Mode). However, since most responders
would correspond to servers (ﬁrewalls, web servers, etc.), the iden-
tity protection provided to them seems not as useful as protecting
the initiator’s identity.6 Fixing the protocol to provide identity pro-
tection for the initiator would involve reducing it to 5 messages and
having the responder send the contents of message 6 in message 4,
with the positive side-effect of reducing the number of messages,
but breaking the message symmetry and protocol modularity.
Finally, thanks to the desire to support multiple authentication
mechanisms and different modes of operation (Aggressive vs. Main
mode, Phase I / II distinction), both the protocol speciﬁcation and
the implementations tend to be bulky and fairly complicated. These
are undesirable properties for a critical component of the IPsec ar-
chitecture.
Several works (including [12, 26, 25]) point out many deﬁcien-
cies in the IKE protocol, speciﬁcation, and common implemen-
5Identity protection is provided only in Main Mode (also known
as Identity Protection Mode); Aggressive Mode does not provide
identity protection for the initiator.
6One case where protecting the responder’s identity can be more
useful is in peer-to-peer scenarios.
55initiator
responder
initiator
responder
Initiator cookie, proposed Phase 1 SA
Initiator Diffie−Hellman value & Identity
Responder cookie, accepted Phase1 SA
Responder Diffie−Hellman value & Identity
Responder signature and certificate(s)
Initiator signature and certificate(s)
Initiator Keying Material, Phase I SA,
Initiator cookie
Responder Keying Material, Phase 1 SA,
Responder cookie
Initiator authentication and certificate(s)
Phase II SA, Traffic Selectors, Identities
Responder authentication and certificate(s)
Accepted Phase II SA and Traffic Selectors
Figure 4: IKE Aggressive Mode exchange with certiﬁcates.
tations. They suggest removing several features of the protocol
(e.g., aggressive mode, public key encryption mode, etc.), restore
the idea of stateless cookies, and protect the initiator’s (instead of
the responder’s) identity from an active attacker. They also sug-
gest some other features, such as one-way authentication (similar
to what is common practice when using SSL/TLS[10] on the web).
These major modiﬁcations would bring the IKE protocol closer to
JFK, although they would not completely address the DoS issues.
A measure of the complexity of IKE can be found in the analyses
done in [34, 36]. No less than 13 different sub-protocols are iden-
tiﬁed in IKE, making understanding, implementation, and analysis
of IKE challenging. While the analysis did not reveal any attacks
that would compromise the security of the protocol, it did identify
various potential attacks (DoS and otherwise) that are possible un-
der some valid interpretations of the speciﬁcation and implementa-
tion decisions.
Some work has been done towards addressing, or at least ex-
amining, the DoS problems found in IKE[31, 32] and, more gener-
ally, in public key authentication protocols[30, 21]. Various recom-
mendations on protocol design include use of client puzzles[23, 3],
stateless cookies[39], forcing clients to store server state, rearrang-
ing the order of computations in a protocol[18], and the use of a
formal method framework for analyzing the properties of protocols
with respect to DoS attacks[35]. The advantages of being state-
less, at least in the beginning of a protocol run, were recognized in
the security protocol context in [22] and [2]. The latter presented
a 3-message version of IKE, similar to JFK, that did not provide
the same level of DoS protection as JFK does, and had no identity
protection.
5.2
IKEv2
IKEv2[16] is another proposal for replacing the original IKE
protocol. The cryptographic core of the protocol, as shown in Fig-
ure 5, is very similar to JFKr. The main differences between IKEv2
and JFKr are:
(cid:15) IKEv2 implements DoS protection by optionally allowing
the responder to respond to a Message (1) with a cookie,
which the sender has to include in a new Message (1). Under
normal conditions, the exchange would consist of the 4 mes-
sages shown; however, if the responder detects a DoS attack,
it can start requiring the extra roundtrip. One claimed beneﬁt
of this extra roundtrip is the ability to avoid memory-based
Figure 5: IKEv2 protocol exchange.
DoS attacks against the fragmentation/reassembly part of the
networking stack. (Brieﬂy, the idea behind such an attack is
that an attacker can send many incomplete fragments that ﬁll
out the reassembly queue of the responder, denying service
to other legitimate initiators. In IKEv2, because the “large”
messages are the last two in the exchange, it is possible for
the implementation to instruct the operating system to place
fragments received from peers that completed a roundtrip to
a separate, reserved reassembly queue.)
(cid:15) IKEv2 supports a Phase II exchange, similar to the Phase
I/Phase II separation in the original IKE protocol.
It sup-
ports creating subsequent IPsec SAs with a single roundtrip,
as well as SA-teardown using this Phase II.
(cid:15) IKEv2 proposals contain multiple options that can be com-