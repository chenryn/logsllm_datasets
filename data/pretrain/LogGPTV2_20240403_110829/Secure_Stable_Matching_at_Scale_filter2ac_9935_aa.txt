title:Secure Stable Matching at Scale
author:Jack Doerner and
David Evans and
Abhi Shelat
Secure Stable Matching at Scale
Jack Doerner
University of Virginia
PI:EMAIL
David Evans
University of Virginia
PI:EMAIL
abhi shelat
Northeastern University
PI:EMAIL
ABSTRACT
When a group of individuals and organizations wish to compute a
stable matching—for example, when medical students are matched
to medical residency programs—they often outsource the compu-
tation to a trusted arbiter in order to preserve the privacy of par-
ticipants’ preferences. Secure multi-party computation offers the
possibility of private matching processes that do not rely on any
common trusted third party. However, stable matching algorithms
have previously been considered infeasible for execution in a se-
cure multi-party context on non-trivial inputs because they are com-
putationally intensive and involve complex data-dependent mem-
ory access patterns.
We adapt the classic Gale-Shapley algorithm for use in such a
context, and show experimentally that our modiﬁcations yield a
lower asymptotic complexity and more than an order of magni-
tude in practical cost improvement over previous techniques. Our
main improvements stem from designing new oblivious data struc-
tures that exploit the properties of the matching algorithms. We ap-
ply a similar strategy to scale the Roth-Peranson instability chain-
ing algorithm, currently in use by the National Resident Matching
Program. The resulting protocol is efﬁcient enough to be useful
at the scale required for matching medical residents nationwide,
taking just over 18 hours to complete an execution simulating the
2016 national resident match with more than 35,000 participants
and 30,000 residency slots.
1.
INTRODUCTION
In 1962, David Gale and Lloyd Shapley proved that for any two
sets of n members, each of whom provides a ranking of the mem-
bers of the opposing set, there exists a bijection of the two sets such
that no pair of two members from opposite sets would prefer to be
matched to each other rather than to their assigned partners [15].
A set of pairings that satisﬁes this property is known as a stable
matching; it can be computed using an algorithm that Gale and
Shapley developed.
Fifty years later, the development of a theory of stable matching
and the exploration of its practical applications would win Shap-
ley and Alvin Roth the Nobel Prize in Economics [53]. Today,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
© 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978373
stable matching algorithms are used to match medical residents to
residency programs [41], students to schools [1, 54], candidates to
sororities [37], to run special types of auctions [3], and to manage
supply chains [42].
In practice, stable matching processes are often outsourced to
trusted arbiters in order to keep the participants’ reported prefer-
ences private. We consider how to run instances of stable matching
using secure multi-party computation, so that participants’ privacy
and conﬁdence in the results can be maintained without relying on
a single common trusted party. We express the problem as a two-
party secure computation in which all members of the pairing sets
trust two representatives to execute on their behalf without collud-
ing. The participants can XOR-share their preference lists between
the two representatives so that even the trusted representatives learn
nothing about the preferences of any participant.
Executing an algorithm as complex and data-dependent as the
Gale-Shapley stable matching algorithm as a secure computation
has been a longstanding goal. Secure computation requires that
all data-dependent memory accesses be hidden in order to main-
tain privacy; this has traditionally been a signiﬁcant contributor to
the inefﬁciency of secure computation relative to its insecure coun-
terpart. For example, the protocols of Golle [19] and Franklin et
al. [13] required roughly O(n5) and O(n4) public-key operations
respectively and were too complicated to implement.
Recent advances in ORAM design [56, 63] have reduced costs
signiﬁcantly, but have not yielded solutions scalable enough for
interesting matching problems. Using a state-of-the-art ORAM,
the best previous implementation of Gale-Shapley still required
over 33 hours to match 512× 512 participants [63]. We overcome
this barrier by combining general-purpose ORAMs with special-
purpose constructs to create efﬁcient oblivious data structures that
leverage data partitions and memory access patterns inherent to the
problem to restrict the ways in which the data can be accessed with-
out leaking any data-dependent access information.
Contributions. The primary contributions of this paper are the
development of strategies for RAM-based secure computation for
algorithms that predominantly access memory in a data-dependent,
but “read-once" fashion. In particular, we present the design of an
oblivious linked list structure that can be used when the order in
which data is accessed must be hidden, but it is known that each
element is accessed at most once; we further reﬁne this structure to
support multiple lists in order to enable more complex access pat-
terns (Section 3.1). We also introduce a modiﬁcation to the ORAM
access protocol that enables efﬁcient function application within an
ORAM access (Section 4.2).
These techniques are developed and evaluated in the context of
two secure stable matching algorithms, but we believe they have
wider applicability to constructing secure variants of many algo-
rithms that involve data-dependent memory access. Our secure
Gale-Shapley implementation exhibits the best asymptotic perfor-
mance of any yet developed, and it is over 40 times faster in practice
than the best previous design. We also develop the ﬁrst ever secure
version of the instability chaining algorithm used in most practi-
cal stable-matching applications, including the national residency
match. We evaluate our protocol by simulating the 2016 US resi-
dency match and ﬁnd that the total execution cost using commodity
cloud resources is less than $16.
2. BACKGROUND
Our secure stable matching protocols build on extensive prior
work in secure multi-party computation and RAM-based secure
computation, which we brieﬂy introduce in this section.
Multi-Party Computation. Secure multi-party computation [17,
59] enables two or more parties to collaboratively evaluate a func-
tion that depends on private inputs from all parties, while revealing
nothing aside from the result of the function. Generic approaches to
multi-party computation (MPC) can compute any function that can
be represented as a Boolean-circuit. Our experiments use Yao’s
garbled circuit protocol [33, 58], although our general design is
compatible with any Boolean-circuit based MPC protocol.
Garbled Circuits. Garbled circuits protocols involve two parties
known as the generator and evaluator. Given a publicly known
function f , the generator creates a garbled circuit corresponding to
f and the evaluator evaluates that circuit to produce an output that
can be decoded to the semantic output. Although garbled circuits
were once thought to be of only theoretical interest, recent works
have shown that such protocols can be practical [23, 24, 25, 30, 36,
43], even in settings where full active security is required [2, 7, 14,
22, 26, 30, 32, 34, 35]. Current implementations [8, 11, 38, 62] can
execute approximately three million gates per second over a fast
network (using a single core for each party).
RAM-based Secure Computation. In traditional MPC, general
input-dependent array access incurs a linear-time overhead since
all elements in the array need to be read to hide the position of
interest. RAM-based secure computation combines circuit-based
MPC with oblivious random-access memory (ORAM) to enable
secure random memory accesses in sublinear time [18, 20]. An
ORAM scheme consists of an initialization protocol that accepts
an array of elements and initializes a new oblivious structure with
those elements, and an access protocol that performs each logical
ORAM access using a sequence of physical memory accesses. To
be secure, an ORAM must ensure that for any two input arrays of
the same length, the physical access patterns of the initialization
protocol are indistinguishable, and that for any two sequences of
semantic accesses of the same length, the physical access patterns
produced by the access protocol are indistinguishable.
To use ORAM in secure computation, the parties run a secure-
computation protocol to store shares of the state of the underlying
ORAM protocol, and then use circuit-based secure computation to
execute the ORAM algorithms [20]. For each memory access, the
circuit obliviously translates a secret logical location into a set of
physical locations that must be accessed. The ORAM’s security
properties ensure that these physical locations can be revealed to
the two parties without leaking any private information, and the
data stored at those locations can be passed back into the circuit for
use in the oblivious computation.
Several ORAM designs for secure computation have been pro-
posed [12,16,20,27,57] which offer various trade-offs in initializa-
tion cost, per-access cost, and scalability. The ORAM with the best
asymptotic per-access cost to date is Circuit ORAM [56]; the most
efﬁcient in practice over a wide range of parameters is Square-Root
ORAM [63]. We evaluate both experimentally in Section 5.
3. SECURE GALE-SHAPLEY
We ﬁrst consider the structure of the standard Gale-Shapley algo-
rithm, typically presented via a process in which proposers (mem-
bers of set A) present pairings to reviewers (members of set B),
who may accept or reject them. The inputs are the lists of prefer-
ences for each participant. For the secure two-party version, these
lists are divided among two parties either by partitioning the lists
or XOR-sharing the entries.
The algorithm steps through each proposer’s preference list from
most to least-preferred, swapping between proposers as they be-
come matched or invalidated by other matches. This algorithm re-
quires that the sizes of the proposer and reviewer sets are equal,
ensuring that everyone ends up part of some pair. We use n to de-
note the size of these sets. The algorithm iterates over at most n2
potential pairings, but, critically, it cannot determine in advance
which proposer’s preferences will be evaluated, nor how far along
that proposer’s preference list it will have advanced at any point.
As any iteration could require access to any pairing, a straightfor-
ward approach is to store the preferences in an ORAM. Such an im-
plementation would require n2 accesses to an ORAM of length n2.
This would dominate the overall cost, since all other ORAMs and
queues required by the textbook algorithm are of length n. Thus,
our design focuses on reducing the costs of reading the preferences.
Notation. We use (cid:104)x(cid:105) to indicate a variable which is secret-shared
between multiple parties. We refer to this state interchangeably as
“oblivious”, “private”, and “garbled”. The garbled variable (cid:104)x(cid:105) is
distinct from the variable x, which is public. Arrays have a pub-
lic length and are accessed via public indices; we use (cid:104)Array(cid:105) to
denote an array of oblivious data, (cid:104)Array(cid:105)i to specify element i
within that array, and (cid:104)Array(cid:105)i: j to indiciate an array slice con-
taining elements i through j of (cid:104)Array(cid:105), inclusive. We indicate
multidimensional array access with multiple indices delimited by
commas. Conditionals on secret values are indicated using (cid:104)if(cid:105) and
(cid:104)else(cid:105). The instructions within oblivious conditionals are always
executed, but have no effect if the condition is false.
3.1 Oblivious Linked Multi-lists
We observe that in the Gale-Shapley algorithm, each proposer’s
individual preference list is accessed strictly in order, and each el-
ement is accessed only once. Furthermore, a secure implementa-
tion of Gale-Shapley does not involve any accesses that depend on
oblivious conditions (the algorithm must obliviously select which
preference list is accessed on each iteration, but exactly one pref-
erence list is always accessed). Instead of using a generic ORAM,
we design a new data structure to satisfy these requirements more
efﬁciently, which we call an oblivious linked multi-list.
The oblivious linked multi-list is designed to be able to iterate
independently through n separate arrays, each containing an ar-
bitrary (and not necessarily uniform) number of elements, while
hiding which of its component arrays is currently being iterated,
and the iteration progress of all component arrays. It is deﬁned by
two algorithms: InitializeMultilist and TraverseMultilist, shown in
pseudocode in Figure 1 and illustrated in Figure 2.
The InitializeMultilist algorithm takes as input a single array of
garbled data, comprising a concatenation of the n component lists.
In addition, it takes an array of public entry pointers (i.e. the indices
of the ﬁrst elements of each of the component lists in the input
array). It returns a (cid:104)multilist(cid:105) data object.
deﬁne InitializeMultilist((cid:104)data(cid:105), entryIndices):
(cid:10)π−1(cid:11) ← InvertPermutation((cid:104)π(cid:105))
(cid:104)π(cid:105) ← random permutation on |(cid:104)data(cid:105)| elements.
(cid:104)multilist(cid:105) ← ∅
(cid:104)entryPointers(cid:105) ← ∅
for i from 0 to |(cid:104)data(cid:105)|− 1:
if i ∈ entryIndices:
(cid:104)entryPointers(cid:105) ← (cid:104)entryPointers(cid:105)∪{(cid:10)π−1(cid:11)
(cid:104)multilist(cid:105)i ← {(cid:104)data(cid:105)i,(cid:10)π−1(cid:11)
i}
i+1}
(cid:104)multilist(cid:105) ← Permute((cid:104)multilist(cid:105),(cid:104)π(cid:105))
return {(cid:104)multilist(cid:105),(cid:104)entryPointers(cid:105)}
deﬁne TraverseMultilist((cid:104)multilist(cid:105),(cid:104)p(cid:105)):
p ← Reveal((cid:104)p(cid:105))
return (cid:104)multilist(cid:105)p
Figure 1: Oblivious Linked Multi-List. Pseudocode for initializa-
tion and traversal.
To explain the initialization procedure, we ﬁrst consider an obliv-
ious linked list that can iterate over only a single component ar-
ray. To construct an oblivious linked list, we generate a random
oblivious permutation and its inverse using the method of Zahur et
al. [63]. The forward permutation comprises one set of Waksman
control bits from each party, and the inverse permutation is stored
as an array mapping one set of indices to another. To each element
i of the data array, we append element i + 1 of the inverse permu-
tation, which corresponds to the physical index of element i + 1 of
the permuted data array. We then apply the permutation to the data
array using a Waksman Network [55], and store the ﬁrst element
of the inverse permutation (the entry pointer) in a variable. Both
the permuted data array and the entry pointer are returned. This
process is illustrated in Figure 2a.
We can now extend our oblivious linked list into an oblivious
linked multi-list by permuting multiple input arrays together, and
storing the garbled entry pointers for each in a separate data struc-
ture. This is illustrated in Figure 2b.
The TraverseMultilist algorithm takes as input a (cid:104)multilist(cid:105) data