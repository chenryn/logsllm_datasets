0.2
0.1
0.0
2 5 5
2 5 5
−
2 5 5
−
∗
2 5 5
6 4
−
1 2 8
−
6 4
−
−
−
6 4
6 4
1 2 8
signature
1 2 8
3. opaque tunnels are revealed through an abnormal LSE-
TTL (1  is much less prevalent in MPLS
visible networks. This could be explained by the fact that
5Look at the mpls ip ttl-expiration pop command of
Cisco routers
this signature corresponds to a variety of middleboxes and
probably less to high-end routers commonly used in MPLS
networks. The second lesson is that the dominant share
of  in non MPLS networks is less dominant for
MPLS, while signatures  and  increase
their share. The increase of  may be due to LSRs
that do not have a complete IP routing table and thus can-
not reply with an echo-reply message. Recall that, in this
case, an error message such as a time-exceeded message is
usually propagated to the end of the tunnel before being
forwarded to its destination (this is the behavior captured
by our uturn heuristic). The increase of  signa-
tures is likely to balance the decrease of :
it
seems that  routers (e.g., Juniper ones) increase
their market position for MPLS operations (compared to the
previous ratio  /  at a global scale).
Each of our tunnel classes exhibits a speciﬁc router signa-
ture distribution. Fig. 6(a) presents those distributions. The
X-axis gives the various signatures, while the Y-axis shows
the proportion of tunnels, in a given MPLS class, that ex-
hibits a given signature. From Fig. 6(a), we see that opaque
tunnels are only characterized by signatures 
and . This property shows a bias in the lin-
ear extrapolation we used to quantify invisible tunnels [10].
We assumed that the LH router would always insert a la-
bel stack into the ICMP time-exceeded message if it im-
plements RFC4950. Consequently, the diﬀerence between
an opaque and an invisible tunnel was based on RFC4950
implementation on the LH router. Our new results clearly
demonstrate that this is not the case (see Fig. 6(a)): if the
LH does not belong to  class (or its incomplete
373companion ), it will not insert a label stack in the
ICMP message even if it implements RFC4950. Hence, the
tunnel will actually be invisible. We veriﬁed this on a virtual
testbed: considering an LSP made of Juniper OS compliant
with RFC 4950 (but where the ingress LER does not propa-
gate the IP-TTL), one may not discover any visible tunnels
(there are only invisible tunnels, no opaque ones). Moreover,
with Cisco OS, the same LSP will appear as opaque or invisi-
ble depending on the PHP behavior associated to the probed
IP address. It seems that the opaque tunnels are more the
exception and invisible tunnels the rule. This means that
the ratio invisible/opaque is probably much higher than we
previously expected. Thus, and unfortunately, invisible tun-
nels are much more common than previously stated.
A last question deserves attention: the amount of im-
plicit tunnels being larger than the explicit one, is our uturn
heuristic reliable? Indeed, this sub-mechanism is prevalent
in our implicit tunnel detection. We can observe that the
proportion of signature  is less prevalent in im-
plicit tunnels (compared to other categories) and the pro-
portion of  is also a bit higher (tunnels that do
no implement RFC4950 are likely to be older and less main-
stream). For the ﬁrst fact, the reason is obvious: uturn
signatures cannot result from such a  pattern.
The remaining ≈ 5% only comes from the qTTL technique
(that is reliable by deﬁnition:
it does not result from a
probing heuristic). Except for these speciﬁc signatures, the
distributions for implicit and explicit tunnels are relatively
close. Such results tend to show that our probing heuris-
tic to detect implicit tunnels seems quite reliable. However,
the slight divergences may be due to uturn signatures that
are by deﬁnition more subject to false positives than qTTL
ones.
In order to understand if it is the case, Fig. 6(b) focuses
on the implicit tunnels signatures to distinguish our two
heuristics. The signature  only exists with the
qTTL technique. The relative populations of signatures
 and  balance this decrease for
uturn tunnels. It conﬁrms the robustness of our uturn tech-
nique: quantity of  does not move while the nat-
ural decrease of  is reported to  and
 classes in the same proportion as for MPLS ex-
plicit tunnels. We can conclude that uturn is not the cause
of the previous and single  actual diﬀerence (that
seems to be induced by the RFC4950 implementation).
4. RELATED WORK
The remote identiﬁcation of operating systems, also known
as OS ﬁngerprinting, aims at discovering the remote machine
OS. Based on how data is acquired from the remote machine,
two families of OS ﬁngerprinting techniques are possible: ac-
tive (that requires sending traﬃc towards the target) [22,
23, 24] and passive methods (that requires listening to com-
munications between the target and a third-party) [25, 26].
Typically, both families investigate several ﬁelds of packet
headers. In particular, it focuses on the IP and TCP head-
ers [22, 24], or the various types of ICMP packets [23]. To
the best of our knowledge, none of those solutions have ex-
plored iTTL n-tuple and applied it to router-level topology
discovery.
Closer to our work, Sherry et al. [27] performs alias resolu-
tion based on signatures from IP timestamp behavior. Also,
Madhyastha et al. [28] use the iTTL in order to estimate the
number of hops on the reverse path back from every router
to the measurement point. None of them explore iTTL n-
tuples nor use signatures to determine possible measurement
biases.
Recently, the deployment of MPLS started to be an active
research subject. For instance, Sherwood et al. [29] investi-
gated the presence of anonymous and hidden routers as part
of DisCarte using signatures based on the IP record route
option. Sommers et al. [9] examined the characteristics of
MPLS tunnels that are explicitly identiﬁed using RFC4950
extensions to statistically infer non explicit ones.
In the
same vein, we proposed a practical taxonomy of MPLS tun-
nels based on RFC4950 extensions and ttl-propagate op-
tion [10]. We have developed techniques for revealing the
presence of implicit and opaque tunnels. As demonstrated
on this paper, our TTL-based ﬁngerprinting method can be
used to reﬁne MPLS identiﬁcation and quantiﬁcation.
5. CONCLUSION
Router ﬁngerprinting may help for many purposes such
as detecting vulnerable routers or abnormal behaviors and
alias resolution.
In this paper, we proposed a lightweight
router ﬁngerprinting technique based on router signature,
i.e., a n-tuple made of initial TTL values used by a router
when forging ICMP reply packets. We showed that such a
signature is suitable to consistently discriminate IP inter-
faces. Indeed, various router brands and OSes use diﬀerent
deterministic initial TTL values depending on the type of
packet to forge.
Based on data collected during a large-scale measurement
campaign, we analyzed the mapping of router OS distribu-
tion according to router signatures. As a proof of concept,
we applied it on our previous work about MPLS tunnel clas-
siﬁcation and validated heuristics for revealing non explicit
MPLS tunnels. At the same time, we reﬁned our previous
conclusions about the invisible MPLS tunnels quantiﬁcation.
More generally, our method or its extension could be used
both to determine if a sample of routers is representative of
the Internet router mix, and to determine whether a routing
feature is independent of the router type.
As a further work, we envision to extend our basic signa-
ture. Adding new ﬁelds will enlarge the spectrum of possible
classes, making them more discriminant. We will try to keep
the probing overhead as low as possible while completing our
n-tuple of initial TTLs with additional and possibly orthog-
onal features. We intend to study, among other features,
the ICMP packet size, the LSE-TTL ﬁeld, and the MPLS
label range. In a second step, we would like to develop a
new multi-probing traceroute tool for inferring equipment-
based paths in the Internet. Generally speaking, our method
can be used to understand whether IP networks are hetero-
geneous in terms of hardware and software and for analyzing
the new OS deployment and market share evolution at dif-
ferent scales.
Acknowledgments
This work is partially funded by the European Commis-
sion funded mPlane ICT-318627 project.
3746. REFERENCES
[1] G. F. Lyon, Nmap Network Scanning: The Oﬃcial
Nmap Project Guide to Network Discovery and
Security Scanning. Nmap Project, 2009, see
http://nmap.org/book/toc.html.
[2] T. Kohno, A. Broido, and k. claﬀy, “Remote physical
device ﬁngerprinting,” IEEE Transactions on
Dependable and Secure Computing, vol. 2, no. 2, pp.
93–108, May 2005.
[3] F. Veysset, O. Courtay, and O. Heen, “New tool and
technique for remote operating system ﬁngerprinting,”
April 2002, see http://www.leetupload.com/database/
Misc/Papers/remote os detection.pdf.
[4] B. Donnet and T. Friedman, “Internet topology
discovery: a survey,” IEEE Communications Surveys
and Tutorials, vol. 9, no. 4, December 2007.
[5] K. Keys, “Internet-scale IP alias resolution
techniques,” ACM SIGCOMM Computer
Communication Review, vol. 40, no. 1, pp. 50–55,
January 2010.
[6] N. Davis, “Initial TTL values,” November 2011, see
http:
//noahdavids.org/self published/TTL values.html.
[7] A. Sebastian, “Default time to live (TTL) values,”
December 2009, see http://www.binbert.com/blog/
2009/12/default-time-to-live-ttl-values/.
[8] J. Postel, “Assigned numbers,” Internet Engineering
Task Force, RFC 1700, October 1994.
[9] J. Sommers, B. Eriksson, and P. Barford, “On the
prevalence and characteristics of MPLS deployments
in the open Internet,” in ACM SIGCOMM Internet
Measurement Conference, November 2011.
[10] B. Donnet, M. Luckie, P. M´erindol, and J.-J. Pansiot,
“Revealing MPLS tunnels obscured from traceroute,”
ACM SIGCOMM Computer Communication Review,
vol. 42, no. 2, pp. 87–93, April 2012.
[11] V. Jacobson et al., “traceroute,” UNIX,” man page,
1989, see source code:
ftp://ftp.ee.lbl.gov/traceroute.tar.gz.
[12] B. Augustin, X. Cuvellier, B. Orgogozo, F. Viger,
T. Friedman, M. Latapy, C. Magnien, and R. Teixeira,
“Avoiding traceroute anomalies with Paris traceroute,”
in Proc. ACM SIGCOMM Internet Measurement
Conference (IMC), October 2006.
[13] k. claﬀy, Y. Hyun, K. Keys, M. Fomenkov, and
D. Krioukov, “Internet mapping: from art to science,”
in Proc. IEEE Cybersecurity Applications and
Technologies Conference for Homeland Security
(CATCH), March 2009.
[14] M. Luckie, “Scamper: a scalable and extensible packet
prober for active measurement of the Internet,” in
ACM SIGCOMM Internet Measurement Conference,
November 2010.
[15] B. Donnet, P. Raoult, T. Friedman, and M. Crovella,
“Eﬃcient algorithms for large-scale topology
discovery,” in Proc. ACM SIGMETRICS, June 2005.
[16] L. Jacquin, V. Roca, M. A. Kaafar, F. Schuler, and
J. L. Roch, “IBTrack: an ICMP black holes tracker,”
in Proc. IEEE Global Communications Conference
(GLOBECOM), December 2012.
[17] A. Medina, M. Allman, and S. Floyd, “Measuring
interactions between transport protocols and
middleboxes,” in Proc. ACM SIGCOMM Internet
Measurement Conference (IMC), October 2004.
[18] M. H. Keio, Y. Nishida, C. Raiciu, A. Greenhalgh,
M. Handley, and H. Tokuda, “Is it still possible to
extend TCP,” in Proc. ACM/USENIX Internet
Measurement Conference (IMC), November 2011.
[19] G. Detal, B. Hesmans, O. Bonaventure, Y. Vanaubel,
and B. Donnet, “Revealing middlebox interference
with tracebox,” in Proc. ACM/USENIX Internet
Measurement Conference (IMC), October 2013.
[20] E. Rosen, A. Viswanathan, and R. Callon,
“Multiprotocol label switching architecture,” Internet
Engineering Task Force, RFC 3031, January 2001.
[21] R. Bonica, D. Gan, D. Tappan, and C. Pignataro,
“ICMP extensions for multiprotocol label switching,”
Internet Engineering Task Force, RFC 4950, August
2007.
[22] Fyodor, “Remote OS detection via TCP/IP stack
ﬁngerprinting,” Phrack, vol. 8, no. 54, October 1998,
see http://nmap.org/nmap-ﬁngerprinting-article.txt.
[23] O. Arkin, “A remote active OS ﬁngerprinting tool
using ICMP,” ;login: the Magazine of USENIX and
Sage, vol. 27, no. 2, pp. 14–19, October 2002.
[24] J. Padhye and S. Floyd, “Identifying the TCP
behavior of web servers,” in Proc. ACM SIGCOMM,
August 2001.
[25] C. Smith and P. Grundl, “Know your enemy: Passive
ﬁngerprinting,” March 2002, see http:
//www.linuxvoodoo.com/resources/security/ﬁnger.
[26] M. Zalewski, “p0f,” see
http://lcamtuf.coredump.cx/p0f3/.
[27] J. Sherry, E. Katz-Bassett, M. Pimenova, H. V.
Madhyastha, T. Anderson, and A. Krishnamurthy,
“Resolving IP aliases with prespeciﬁed timestamps,” in
Proc. ACM/USENIX Internet Measurement
Conference (IMC), November 2010.
[28] H. V. Madhyastha, T. Isdal, M. Piatek, C. Dixon,
T. Anderson, A. Krishnamurthy, and
A. Venkataramani, “iPlane: An information plane for
distributed services,” in Proc. USENIX Symposium on
Operating Systems Design and Implementation
(OSDI), November 2006.
[29] R. Sherwood, A. Bender, and N. Spring, “Discarte: a
disjunctive Internet cartographer,” in ACM
SIGCOMM, August 2008.
375