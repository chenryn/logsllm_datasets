DEFINITION 4
(ORAM SECURITY). An ORAM is secure iff,
for any probabilistic polynomial time adversary A and any two ac-
cess patterns O0 and O1 of the same length there exists a function
 negligible in security parameter s, such that
|P r[A(Execute(O0)) = 1]−P r[A(Execute(O1)) = 1]|≤ (s).
We note that, although this is the classic deﬁnition of ORAM se-
curity, it does not capture an adaptive adversary like we need in our
setting. Fortunately, although it is not discussed in related work, all
major ORAM constructions are adaptively secure. To obtain such
a security deﬁnition, we simply allow A to choose the operations
in O0 and O1 one at a time after receiving the results of Execute
being called on the previous operation.
The goal of our ﬁrst, “generic” hidden volume encryption is two-
fold: to hide the pattern of writes issued by the user and to give a
plausible reason to access the disk when writing into hidden vol-
umes. Broadly, we accomplish the ﬁrst by using ORAM and the
second by making a read to a volume cause a “dummy write”. This
dummy will cover for a write to a hidden volume, and is in line
with the idea that all operations should “look the same” regardless
of which volume it is in, or even if it is a read or write.
3.2 Generic Construction
To start, we use max separate ORAMs (ORAM1≤i≤max), each
holding the data for a single volume and encrypted with its own
password, e.g., we simply run ORAMSetup for each of these ORAMs.
The only requirement we have on our ORAM scheme is that it be
efﬁciently simulatable, i.e., a simulator S, without the password
or any knowledge of the access pattern beyond its length can out-
put a series of disk accesses which are indistinguishable from those
output by an actual ORAM. Additionally, this simulator needs to
be stateless, in that its output for each operation cannot depend
on anything other than the output from the previous operations.
Fortunately, typical ORAM constructions meet this deﬁnition. So,
for j > (cid:96), ORAMj is replaced by a simulator S. Therewith, an
ORAM can execute a “dummy” operation containing no informa-
tion, which, to all adversaries, looks identical to a real operation.
This is necessary so that the ORAMs not actually in use by the user
will not even have keys that could be revealed to the adversary.
This gives the user deniability, since they can reasonably claim that
no key exists for a certain volume.
When the system executes a write to volume i (Algorithm 2), it
executes that write on ORAMi. For all j (cid:54)= i, it picks a random
block in Vj and writes its same data value back to ORAMj, i.e., a
“dummy” operation which changes no data. When the system exe-
cutes a read (Algorithm 3), it reads from the respective ORAM and
then does a dummy write for all ORAMs (or executes the simulator,
for volumes greater than (cid:96)). The idea is that, if an adversary does
not have a key to volume i, they cannot tell whether we are reading
from some volume (maybe i, but maybe not) or writing to volume
i. For the internal encryption and decryption within ORAMi, we
use password Pi as the key.
THEOREM 1. If (ORAMSetup, ORAMRead, ORAMWrite) is
a simulatable ORAM, then our generic hidden volume encryption
is a ΓArbitrary,Plausible
-secure hidden volume encryption.
A,Σ
PROOF. Under Plausible Hiding security, the access patterns
given by A will differ only when neither O0,i nor O1,i is a write to
a volume less than (cid:96). Since A cannot distinguish on operations of
the access patterns that are identical, we only need to show that, for
Input: Security parameter s, RAM size
t, passwords P, block size B, volumes sizes 
Output: Volumes 
1 largestVolume := maximum(n1,...,n(cid:96));
2 for i := 1 to max do
3
4
5 end
Vi := ORAMSetup(largestVolume,B,Pi,s);
return ;
Algorithm 1: Generic HVESetup(s,t,P,B,)
Input: Block b, data d, volume index i, passwords P
1 forall the j do
2
3
4
5
ORAMj.ORAMWrite(b,d);
if j = i then
end
else
$←{1,...,sizeof(ORAMj )};
r
// Using password Pj as key
dummy := ORAMj .ORAMRead(r);
ORAMj .ORAMWrite(r,dummy);
6
7
8
9
10 end
end
Algorithm 2: Generic HVEWrite(b,d,i,P)
Input: Block index b, volume i, passwords P
Output: Data d
1 d := ORAMi.ORAMRead(b);
2 forall the i do
3
$←{1,...,sizeof(ORAMi)};
r
// Using password Pi as key
dummy := ORAMi.ORAMRead(r);
ORAMi.ORAMWrite(r,dummy);
4
5
6 end
7 return d;
Algorithm 3: Generic HVERead(b,i,P)
operations that differ, A cannot distinguish. So, if O0,i and O1,i
differ, then they can each be either a read to any volume or a write
to a volume j≥ (cid:96). By the security deﬁnition of ORAM, a “dummy”
write in a volume j ≥ (cid:96) is not distinguishable from an actual write
with probability greater than 1/2+(s). This implies that a read to
one of these volumes cannot be distinguished from a write. We also
have that for all i,j, a read to Vi is indistinguishable from a read
to Vj. Therefore, since A cannot distinguish between the outputs
with probability greater than 1/2+(s), they cannot win the game
with any non-negligible advantage.
3.3 Opportunistic Hiding Security
Opportunistic security gives more freedom to the user, since it
does not require them to “pretend” that they did some reads that
were actually writes in other volumes. Thus, it is relatively sim-
ple to achieve. Instead of writing a block immediately when the
user wants to, if it is part of a volume Vi, i > 1, we add it to a
queue Qi. Every time the user does an operation on V1 (read or
write), for all i > 1 if Qi is not empty, we write one block from
Qi to Vi, instead of doing the dummy write. Reads to volumes
other than V1 are trivial, i.e., we read the requested block, but do
not change anything on the disk. Writing during such a reads is no
longer necessary, because writes to all volumes higher than V1 are
simultaneously hidden by accesses to V1.
THEOREM 2. If (ORAMSetup, ORAMRead, ORAMWrite) is
a simulatable ORAM, then this modiﬁed generic hidden volume
encryption is ΓArbitrary,Opportunistic
-secure.
A,Σ
PROOF. O0 and O1 are only different when O0,i is an operation
in V(cid:96). If O0,i is a read, it will be identical to a ⊥ operation in our
modiﬁed generic scheme. Such a read does not trigger any write. If
O0,i is a write, it equally triggers no writes, as it just adds a block to
the Q(cid:96), and again is indistinguishable. Therefore, we only need to
show that a read to V1 which also writes from Q(cid:96) is indistinguish-
able from one which just causes a dummy operation in V(cid:96). This
follows directly from the security of our ORAM, and so A cannot
win the game with any non-negligible advantage.
4. WRITE-ONLY ORAM
We have proven a generic hidden volume encryption secure us-
ing ORAM as a building block. Note, however, that the snapshots
A gets in our security game do not include any information about
block reads that occur to the disk. This reﬂects the idea that an ad-
versary can see the impact of block writes, in the form of modiﬁed
data, but they cannot see where or how often user U reads. Typ-
ically, block reads do not leave any discernible trace on the disk.
This means that the ORAMs we are using are actually more pow-
erful than we need them to be. In fact, an ORAM which only hides
writes to the disk is sufﬁcient. We can deﬁne the security of such a
write-only ORAM as follows:
DEFINITION 5
(WRITE-ONLY ORAM SECURITY). Let sequence
ExecW(O) be the sequence of writes caused to the disk when an
ORAM executes access pattern O. A write-only ORAM (with algo-
rithms ORAMSetup,ORAMRead,ORAMWrite) is secure iff, for
any probabilistic polynomial time adversary A and any two access
patterns O0 and O1 that contain the same number of writes there
exists a function  negligible in security parameter s, such that
|P r[A(ExecW(O0)) = 1]−P r[A(ExecW(O1)) = 1]|≤ (s).
There has been limited work on write-only ORAMs until now.
There are several schemes by Li and Datta [11], but they all have
signiﬁcant drawbacks. They are able to obtain an amortized write
communication complexity of O(B· logn), but only at the cost of
reads being in O(B · n). As ORAM communication complexities
directly relate to the hidden volume encryption overhead, this does
not suit our needs. Applications might perform as many reads as
writes, and reads would quickly become too expensive for increas-
ing n. For efﬁcient reads, Li and Datta [11] require either memory
or communication complexity to be polynomial in n. We stress that
their schemes only provide amortized complexity guarantees, with
worst-case complexity being polynomial in n.
Since we target good read and write performance for our hidden
volume encryption to be useful, we now present a new write-only
ORAM which achieves worst-case constant communication com-
plexity and only poly-logarithmic memory requirements. We will
start with a very simple, inefﬁcient construction and show how its
shortcomings can be addressed one at a time until we have our ﬁnal,
efﬁcient construction HIVE.
4.1 Basic Write-Only ORAM Construction
We now present our new ORAM that only supports write opera-
tions. Our ORAM makes use of a mapping data structure Map that
maps blocks from the ORAM to physical blocks (sectors) on the
disk. For now, we will consider it as an associative array such that
Map[b] contains the physical address β on the disk where ORAM
block b is currently located. Later, we will show how this map is
structured and actually implemented, but for now assume that it is
simply stored in RAM and can be efﬁciently accessed. Also as-
sume that the hard disk has at least twice the size of the ORAM,
i.e., N ≥ 2· n, so we have at least twice as much storage available
as needed. All mapping entries Map[b] are set to ⊥. For encryp-
tion and decryption, we employ any pair Enc, Dec of algorithms
realizing IND$-CPA encryption [15]. An IND$-CPA encryption is
an encryption that produces ciphertexts indistinguishable from ran-
$←{1,...,N}∧1≤ i≤ k∧∀u,v : βu (cid:54)= βv holds;
Input: Block index b, data d
1 S :=,
such that βi
$←S, such that β is free;
2 β
3 DiskWrite(β,Encκ(d));
4 ReencryptOrRandomize(S\β);
// Find out which block
in the Map ORAM has the address we want
logN (cid:99) ;
5 M :=(cid:98) B
6 mapblock := Map.ORAMRead((cid:98) b
// Retrieve the address from the map block
M (cid:99)) ;
7 mapblock[b modM ] := β ;
8 Map.ORAMWrite((cid:98) b
M (cid:99), mapblock);
Algorithm 4: ORAMWrite(b,d)
Input: Block index b
logN (cid:99) ;
1 M :=(cid:98) B
2 mapblock := Map.ORAMRead((cid:98) b
3 β := mapblock[b modM ] ;
4 return Decκ(DiskRead(β));
M (cid:99)) ;
Algorithm 5: ORAMRead(b)
dom strings, e.g., AES in CBC or counter mode. The encryption
makes use of secret key κ, only known to the ORAM user U.
ORAMWrite: For an ORAMWrite(b,d) operation (see Algo-
rithm 4), U picks a sequence S of k random, distinct hard disk
block indices βi, where k is a security parameter. U then ran-
domly picks one index β ∈ S that is “free”. Here, free means
that there is no block in the ORAM that is mapped to disk block
β. User U writes Encκ(d) at position β to disk. Of the k − 1
remaining block indices, if their corresponding blocks contain en-
crypted data, U reencrypts their contents, and if the blocks are free
U writes a random strings into them (“ReencryptOrRandomize”).
Finally, U updates the mapping for b. Since U picks the k block in-
dices in S randomly and independently from b, and the encryption
produces ciphertexts indistinguishable from random, an adversary
seeing these k blocks change cannot learn anything about b or d.
ORAMRead: Our ORAM does not aim at protecting read oper-
ations. Thus, reads are trivial as shown in Algorithm 5.
ORAMSetup: For initialization, we require only that the map
looking up the address of
be initialized to an “empty” state, e.g.
any block should return a ⊥ value indicating that the block has not
been written in the system yet.
Choice of k: To guarantee that U always ﬁnds at least one free
block in S to put data d into, U has to choose k sufﬁciently large.
Since at least half the disk is empty, the probability that any ran-
domly chosen block is free is at least 1/2. Let X be the random
variable that, when selecting k blocks uniformly from all N, de-
scribes the number of blocks among those k that are free. As N is
typically large compared to k, we approximate the hypergeometri-