        if (hBin == INVALID_HANDLE_VALUE)
        {
            fn_printf("Wrong in Generic\n");
            return;
        }
        DWORD dwLen = (DWORD)ShellcodeEnd - (DWORD)ShellcodeStart;
        DWORD dwWriter;
        WriteFile(hBin, ShellcodeStart, dwLen, &dwWriter, NULL);
        CloseHandle(hBin);
    }
    int MainEntry()
    {
        CreateShellcode();
        return 0;
    }
a_start.cpp
> 利用两函数做差就可以得到ShellcodeEnrtry的代码
>
> （ShellcodeStart – ShellcodeEnd = getKernel32+getProcAddress+ShellcodeEntry）
>
> ，最后通过0.entry.cpp写入到bin文件
    #include 
    #include "header.h"
    __declspec(naked) void ShellcodeStart()
    {
        __asm
        {
            jmp ShellcodeEntry
        }
    }
    __declspec(naked) DWORD getKernel32()
    {
        __asm
        {
            mov eax, fs:[0x30]
            mov eax, [eax + 0xc]
            mov eax, [eax + 0x14]
            mov eax, [eax]
            mov eax, [eax]
            mov eax, [eax + 0x10]
            ret
        }
    }
    FARPROC getProcAddress(HMODULE hMouduleBase)
    {
        //由之前找到的DllBase来得到DOS头的地址
        PIMAGE_DOS_HEADER lpDosHeader =
            (PIMAGE_DOS_HEADER)hMouduleBase;
        //找到 IMAGE_NT_HEADERS 的所在
        PIMAGE_NT_HEADERS32 lpNtHeader =
            (PIMAGE_NT_HEADERS)((DWORD)hMouduleBase + lpDosHeader->e_lfanew);
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表大小是否 不为空
            .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size)
        {
            return NULL;
        }
        if (!lpNtHeader->OptionalHeader//检查可选文件头的导出表的偏移是否 不为空
            .DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress)
        {
            return NULL;
        }
        PIMAGE_EXPORT_DIRECTORY lpExport = //获得_IMAGE_EXPORT_DIRECTORY对象
            (PIMAGE_EXPORT_DIRECTORY)((DWORD)hMouduleBase + (DWORD)lpNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
        //下面变量均是RVA,要加上hModuleBase
        PDWORD lpdwFunName =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNames);
        PWORD lpword =
            (PWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfNameOrdinals);
        PDWORD lpdwFunAddr =
            (PDWORD)((DWORD)hMouduleBase + (DWORD)lpExport->AddressOfFunctions);
        //DWORD   AddressOfFunctions;      指向输出函数地址的RVA
        //DWORD   AddressOfNames;          指向输出函数名字的RVA
        //DWORD   AddressOfNameOrdinals;   指向输出函数序号的RVA
        DWORD dwLoop = 0;//遍历查找函数
        FARPROC pRet = NULL;
        for (; dwLoop NumberOfNames - 1; dwLoop++)
        {
            char *pFunName = (char*)(lpdwFunName[dwLoop] + (DWORD)hMouduleBase);//char *pFunName = lpwdFunName[0] = "func1";
            if (pFunName[0] == 'G'&&
                pFunName[1] == 'e'&&
                pFunName[2] == 't'&&
                pFunName[3] == 'P'&&
                pFunName[4] == 'r'&&
                pFunName[5] == 'o'&&
                pFunName[6] == 'c'&&
                pFunName[7] == 'A'&&
                pFunName[8] == 'd'&&
                pFunName[9] == 'd'&&
                pFunName[10] == 'r'&&
                pFunName[11] == 'e'&&
                pFunName[12] == 's'&&
                pFunName[13] == 's')
                //if(strcmp(pFunName,"GetProcAddress"))
            {
                pRet = (FARPROC)(lpdwFunAddr[lpword[dwLoop]] + (DWORD)hMouduleBase);
                break;
            }
        }
        return pRet;
    }
    void ShellcodeEntry()
    {
        typedef FARPROC(WINAPI *FN_GetProcAddress)
            (
                _In_ HMODULE hModule,
                _In_ LPCSTR lpProcName
                );
        FN_GetProcAddress fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32());
        typedef HMODULE(WINAPI *FN_LoadLibraryA)
            (
                _In_ LPCSTR lpLibFileName
                );
        char szLoadLibrary[] = { 'L','o','a','d','L','i','b','r','a','r','y','A' ,0 };
        FN_LoadLibraryA fn_LoadLibraryA = (FN_LoadLibraryA)fn_GetProcAddress((HMODULE)getKernel32(), szLoadLibrary);
        typedef int (WINAPI *FN_MessageBoxA)
            (
                _In_opt_ HWND hWnd,
                _In_opt_ LPCSTR lpText,
                _In_opt_ LPCSTR lpCaption,
                _In_ UINT uType
                );
        char szUser32[] = { 'U','s','e','r','3','2','.','d','l','l',0 };
        char szMsgBox[] = { 'M','e','s','s','a','g','e','B','o','x','A',0 };
        FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress((HMODULE)fn_LoadLibraryA(szUser32), szMsgBox);
        char szMsgBoxContent[] = { 'H','e','l','l','o',0 };
        char szMsgBoxTitle[] = { 't','i','t','l','e',0 };
        fn_MessageBoxA(NULL, szMsgBoxContent, szMsgBoxTitle, 0);
        //MessageBoxA(NULL, "Hello", "title", MB_OK);
    }
z_end.cpp
> 标志shellcode的结束
    #include 
    #include "header.h"
    void ShellcodeEnd(){}
**3.效果**
最后生成的bin文件是一串二进制代码，需要shellcode加载器才能运行，接下来就编写shellcode加载器
###  3.加载器
我们编写的shellcode实际上只是一串二进制代码，必须包含在一个程序中才能运行起来，应为加载器只需要讲二进制文件跑起来就行了，所以不需要再遵守shellcode编写原则
    #include 
    #include 
    int main(int argc, char *argv[])
    {
        //1-代开文件并读取
        HANDLE hFile = CreateFileA(argv[1], GENERIC_READ, 0, NULL, OPEN_ALWAYS, 0, NULL);
        if (hFile == INVALID_HANDLE_VALUE)
        {
            printf("Open file wrong\n");
            return -1;
        }
        DWORD dwSize;
        dwSize = GetFileSize(hFile, 0);
        //2-将文件内容加载到一个内存中
        LPVOID lpAddress = VirtualAlloc(NULL,dwSize,MEM_COMMIT,PAGE_EXECUTE_READWRITE);
        if (lpAddress == NULL)
        {
            printf("VirtualAlloc error : %d", GetLastError());
            CloseHandle(hFile);
            return -1;
        }
        DWORD dwRead;
        ReadFile(hFile, lpAddress, dwSize,&dwRead,0);
        //3-使用汇编转到shellcode
        __asm
        {
            call lpAddress
        }
        _flushall();
        system("pause");
    }
> 其实shellcode就是从汇编提取出来的机器码，当把shellcode加载到内存中，我们也可以使用函数的方式调用，
>
> 将汇编改为`((void(*)(void))lpAddress)();`，这样也能成功执行shellcode
###  4.对框架进行优化
目前我们只实现了一个函数，但是要实现更加复杂的功能（如反弹一个远程shell）的话就必须，因此我们需要加以改进
**1.创建一个头文件，将shellcode的函数（Start和End之间）原型放到这里面**
    #pragma once
    #include 
    typedef FARPROC(WINAPI *FN_GetProcAddress)
    (
        _In_ HMODULE hModule,
        _In_ LPCSTR lpProcName
        );
    typedef HMODULE(WINAPI *FN_LoadLibraryA)
    (
        _In_ LPCSTR lpLibFileName
        );
    typedef int (WINAPI *FN_MessageBoxA)
    (
        _In_opt_ HWND hWnd,
        _In_opt_ LPCSTR lpText,
        _In_opt_ LPCSTR lpCaption,
        _In_ UINT uType
        );
之后定义一个结构体并声明
    typedef struct _FUNCIONS
    {
        FN_GetProcAddress fn_GetProcAddress;
        FN_LoadLibraryA fn_LoadLibraryA;
        FN_MessageBoxA fn_MessageBoxA;
    }FUNCIONS, *PFUNCIONS;
这样就能在ShellcodeEntry中调用函数了
**2.寻找函数地址**
由于函数的声明在api.h文件中了，所以要重新寻址
那么我们在a_start上定义如下函数
    void InitFunctions(PFUNCIONS pFn)
    {
        pFn->fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32());
        char szLoadLibrary[] = { 'L','o','a','d','L','i','b','r','a','r','y','A' ,0 };
        pFn->fn_LoadLibraryA = (FN_LoadLibraryA)pFn->fn_GetProcAddress((HMODULE)getKernel32(), szLoadLibrary);
        //MessageBoxA
        char szUser32[] = { 'U','s','e','r','3','2','.','d','l','l', 0 };
        char szMsgBox[] = { 'M','e','s','s','a','g','e','B','o','x','A' ,0 };
        pFn->fn_MessageBoxA = (FN_MessageBoxA)pFn->fn_GetProcAddress((HMODULE)pFn->fn_LoadLibraryA(szUser32), szMsgBox);
    }
修改后的ShellcodeEntry函数
    void ShellcodeEntry()
    {
        char szMsgBoxContent[] = { 'H','e','l','l','o',0 };
        char szMsgBoxTitle[] = { 't','o','p',0 };
        FUNCIONS fn;
        InitFunctions(&fn);
        fn.fn_MessageBoxA(NULL, szMsgBoxContent, szMsgBoxTitle, MB_OK);
    }
**//记得添加相应的头文件**
之后要添加函数的话：
**1.** 将函数原型和声明添加到api.h； **2.** 在初始化函数部分设置寻址； **3.** 在ShellcodeEntry中调用
**3.将所有的函数功能实现放到另一个文件中**
在header.h中添加`void CreateConfig(PFUNCIONS pFn)`函数定义
创建一个b_work.cpp，在文件中可以实现MessageBoxA的功能
    void MessageboxA(PFUNCIONS pFn)
    {
        char szMsgBoxContent[] = { 'H','e','l','l','o',0 };
        char szMsgBoxTitle[] = { 't','o','p',0 };
        pFn->fn_MessageBoxA(NULL, szMsgBoxContent, szMsgBoxTitle, MB_OK);
    }
最后在a_start的ShellcodeEntry中调用
    void ShellcodeEntry()
    {
        FUNCIONS fn;
        InitFunctions(&fn);
        MessageboxA(&fn);
    }
## 相关知识
  * PE文件结构
  * exe程序入口
  * 函数指针
  * c++函数调用
  * c++联合编译
## 参考文章
  * [使用VS2015更改应用程序的入口点](https://www.yuanmacha.com/18756856217.html)
  * [freebuf公开课-VS平台C/C++高效shellcode编程技术实战](https://www.bilibili.com/video/BV1y4411k7ch)
  * [windows下shellcode编写入门](https://blog.csdn.net/x_nirvana/article/details/68921334)
  * [新手分享_再谈FS寄存器](https://bbs.pediy.com/thread-226524.htm)
  * [Windows平台shellcode开发入门（二）](https://www.freebuf.com/articles/system/94774.html)
  * [Windows(x86与x64) Shellcode技术研究](https://www.anquanke.com/post/id/97601)