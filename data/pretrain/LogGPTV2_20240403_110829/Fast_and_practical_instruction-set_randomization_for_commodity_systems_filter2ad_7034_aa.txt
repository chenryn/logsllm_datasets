title:Fast and practical instruction-set randomization for commodity systems
author:Georgios Portokalidis and
Angelos D. Keromytis
Fast and Practical Instruction-Set Randomization
for Commodity Systems
Georgios Portokalidis and Angelos D. Keromytis
Network Security Lab
Department of Computer Science
Columbia University, New York, NY, USA
{porto, angelos}@cs.columbia.edu
ABSTRACT
Instruction-set randomization (ISR) is a technique based on
randomizing the “language” understood by a system to pro-
tect it from code-injection attacks. Such attacks were used
by many computer worms in the past, but still pose a threat
as it was conﬁrmed by the recent Conﬁcker worm outbreak,
and the latest exploits targeting some of Adobe’s most popu-
lar products. This paper presents a fast and practical imple-
mentation of ISR that can be applied on currently deployed
software. Our solution builds on a binary instrumentation
tool to provide an ISR-enabled execution environment en-
tirely in software. Applications are randomized using a sim-
ple XOR function and a 16-bit key that is randomly gener-
ated every time an application is launched. Shared libraries
can be also randomized using separate keys, and their ran-
domized versions can be used by all applications running
under ISR. Moreover, we introduce a key management sys-
tem to keep track of the keys used in the system. To the
best of our knowledge we are the ﬁrst to apply ISR on truly
shared libraries.
Finally, we evaluate our implementation using real ap-
plications including the Apache web server, and the MySQL
database server. For the ﬁrst, we show that our implementa-
tion has negligible overhead (less than 1%) for static HTML
loads, while the overhead when running MySQL can be as
low as 75%. We see that our system can be used with lit-
tle cost with I/O intensive network applications, while it
can also be a good candidate for deployment with CPU in-
tensive applications, in scenarios where security outweighs
performance.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software
General Terms
Security, Reliability, Performance
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
Keywords
Code-injection, randomization, security, performance
1.
INTRODUCTION
Instruction-set randomization [25, 4] is a technique based
on randomizing a system’s language (i.e., its instruction set)
to prevent code-injection attacks. Such attacks occur when
the attacker is able to execute arbitrary code remotely, or
locally but as a diﬀerent user (e.g., a user with elevated
privileges like the administrator). They usually follow the
exploitation of buﬀer overﬂows [35, 3, 27] and other memory
corruption vulnerabilities, like dangling pointers [20, 34] and
format string attacks [39], that allow attackers to redirect
execution to the injected code.
In the past, code-injection attacks (CI) accounted for al-
most half of the advisories released by CERT [43], and were
used by many computer worms to infect new hosts [41, 11,
12, 29, 44]. More recently, they have been overshadowed
by cross-site scripting and SQL-injection attacks, but the
recent Conﬁcker worm outbreak [36], and the multiple vul-
nerabilities discovered in Adobe’s popular software [1, 42]
came as a reminder that CI attacks still pose a signiﬁcant
threat to a large number of systems.
ISR is a general approach that defeats all types of remote
code-injection regardless of the way it was injected into a
process.
It operates by randomizing the instructions that
the underlying system “understands”, so that “foreign” code
such as the code injected during an attack will fail to ex-
ecute.
It was initially proposed as a modiﬁcation to the
processor to ensure low performance overheads, but unfor-
tunately this proposal has had little allure with hardware
vendors. Instead, software implementations of ISR on x86
emulators have been created, mainly to demonstrate the ef-
fectiveness of the approach, as they incur large runtime over-
heads [25, 4]. Software only implementations of ISR using
dynamic binary translation have been also proposed [24],
but have seen little use in practice as they cannot be di-
rectly applied to commodity systems. For instance, they do
not support shared libraries or dynamically loaded libraries
(i.e., they require that the application is statically linked),
and increase the code size of encoded applications.
This paper describes a fast and practical software imple-
mentation of ISR for commodity systems. Our implementa-
tion is based on Intel’s dynamic instrumentation tool called
PIN [26], which provides the runtime environment. Appli-
cation code is randomized using the XOR function and a
16-bit key, which is randomly generated every time the ap-
plication is launched to make it resistant against key guess-
ing attacks [40].
Multiple keys can be used to randomize diﬀerent parts of
the application. For instance, every shared library used by
the system can be randomized using a diﬀerent key, creat-
ing a randomized copy of each library. While additional disk
space will be required to store the randomized versions, dur-
ing runtime all binaries running under ISR will be using the
same randomized copy. Also, original (native) code can be
combined with randomized code. The keys used to encode
the various libraries are managed using SQLite [32], a self-
contained and serverless database engine. Libraries can be
randomized once and reused by multiple applications, while
frequently re-randomizing them also protects them against
key guessing attempts. Finally, we assume (as does past
work) that the attacker does not have access to the random-
ized code (i.e., it is a remote attacker), so a known ciphertext
attack against the key is not possible.
The main contributions of this paper can be summarized
in the following:
• We implemented instruction-set randomization for com-
modity systems using Intel’s PIN framework (our im-
plementation of ISR is freely available from https:
//sourceforge.net/projects/isrupin/)
• Our implementation operates on currently deployed bi-
naries, as it does not require recompilation, or changes
to the underlying system (i.e., the operating system
and hardware)
• Our system supports dynamically linked executables,
as well as dynamically loaded libraries. We also intro-
duce a key management scheme for storing and keep-
ing track of the keys used to randomize shared libraries
and applications. To the best of our knowledge we are
the ﬁrst to apply ISR on shared libraries
• Executables are re-randomized every time they are
launched, and shared libraries are re-randomized at
custom intervals to protect the key from guessing at-
tacks such as [40]
The overhead of our implementation can be as low as 10%
compared with native execution. We are able to run popu-
lar servers such as the Apache web server, and the MySQL
database server, and show that running Apache using ISR
has negligible eﬀect on throughput for static HTML loads,
while the overhead for running MySQL is 75%. We also
evaluate the cost of completely isolating the framework’s
data from the application. This memory protection (MP)
requires more invasive instrumentation of the target appli-
cation, and it has not been investigated by previous work on
software-based ISR, since it incurs signiﬁcant overhead. We
show that adding MP over ISR does not reduce Apache’s
throughput, while it imposes an extra 57% overhead when
running MySQL.
The rest of this paper is organized as follows: Section 2
oﬀers a brief description of ISR. Our implementation is dis-
cussed in Section 3. We evaluate the performance of our
framework in Section 4. Related work is examined in Sec-
tion 5. Finally, conclusions are in Section 6.
2.
INSTRUCTION-SET RANDOMIZATION
Instruction-set randomization as a mean to thwart code-
injection attacks has been presented in detail in previous
work [25, 4]. In this section we will only brieﬂy describe the
technique, mainly focusing on its application on binaries.
ISR is based on the observation that code-injection at-
tacks need to position executable code within the address
space of the exploited application and then redirect con-
trol to it. The injected code needs to be compatible with
the execution environment for these attacks to succeed. In
other words, the attacker needs to be able to “talk” to the
target system in its own “language”. For binary programs,
this means that the code needs to be compatible with the
processor and software running at the target. For instance,
injecting x86 code into a process running on an ARM sys-
tem will most probably cause it to crash, either because of
an illegal instruction being executed, or due to an illegal
memory access. We should note that in this example it is
possible to compose (somewhat limited) machine code able
to run without errors on both ARM and x86.
ISR builds on this observation to block attackers from ex-
ecuting code injected in vulnerable processes. An execution
environment employing a randomly generated instruction
set is used to run processes, causing injected code to fail.
While exploitation attempts will still cause a DoS by crash-
ing the targeted application, attackers are not able to per-
form any useful action such as installing malware or rootkits.
The strength of the technique lies in the diﬃculty of guess-
ing the instruction set used by a process. Of course, if an
attacker has access to the randomized binary, he can launch
an attack against the applied transformation to attempt to
learn the new instruction set, something that requires local
access to the target host. This work (and ISR in general)
is primarily focused on protecting against remote attacks
on network services (e.g., http, dns, ssh, etc.), where the
attacker does not have access to the target system or the
randomized binaries. Consequently, attackers cannot launch
attacks against the key that require access to the ciphertext.
However, remote attackers can still attempt to guess the
key used to randomize the instruction set [40]. Such guess-
ing attacks will cause the application to crash and restart
for each failed attempt to correctly guess the key. We can
mitigate such attacks by either using a more complicated
encoding algorithm (e.g., bit transposition, AES, etc.) and
a larger key to increase the complexity of the attack, or
by frequently re-encoding the binary using a new key every
time it is executed as we discuss below. The reader can refer
to our earlier work on ISR [25] for additional discussion on
randomization using larger keys.
2.1
ISR Operation
CPU instructions for common architectures, like x86 and
ARM, consist of two parts: the opcode and operands. The
opcode deﬁnes the action to be performed, while the oper-
ands are the arguments. For example, in the the x86 archi-
tecture a software interrupt instruction (INT) comprises of
the opcode 0xCD, followed by a one-byte operand that spec-
iﬁes the type of interrupt. We can create new instruction
sets by randomly creating new mappings between opcodes
and actions. We can further randomize the instruction set
by also including the operands in the transformation.
For ISR to be eﬀective and eﬃcient, the number of possible
instruction sets must be large, and the mapping between the
new opcodes and instructions should be eﬃcient (i.e., not
completely arbitrary). We can achieve both these proper-
ties by employing cryptographic algorithms and a randomly
generated secret key. As an example, consider a generic
RISC processor with ﬁxed-length 32-bit instructions. We
can eﬀectively generate random instruction sets by encod-
ing instructions with XOR and a secret 32-bit key. In this
example, an attacker would have to try 232 combinations in
the worst case to guess the key. Architectures with larger in-
structions (i.e., 64 bits) can use longer keys to be even more
resistant to brute-force attacks. On the other hand, simply
increasing the length of the key used with XOR will not im-
prove security, since the key can be attacked in a piece-meal
fashion (i.e., by guessing the ﬁrst 32 bits of the key that cor-
respond to a single instruction). The situation is even more
complicated on architectures with variable sized instructions
like the x86. Many instructions in the x86 architecture are
1 or 2 bytes long. This eﬀectively splits the key in four or
two sub-keys of 8 and 16 bits respectively. Thus, it is possi-
ble that an attacker attempts to guess each of the sub-keys
independently, as shown by Sovarel et al. [40].
The deﬁciencies of XOR randomization on architectures
like the x86 can be overcome by using other ciphers for
randomizing instructions. For instance, bit transposition
of larger blocks (e.g., 160 bits) would greatly increase the
work factor for an attacker, and cannot be attacked in a
piece-meal fashion. Hu et al [24] propose the use of AES
encryption on blocks of 128 bits to ensure that an attacker
cannot break the randomization. In both cases larger blocks
of data need to be accessible at runtime, and more process-
ing is required to decode the instructions. We have taken
a diﬀerent approach to protect the keys. First, we employ
multiple keys for the encoding of an application (i.e., a dif-
ferent key for each shared library). Second, we randomize
an application every time it is launched with a new random
key, and third we frequently re-randomize shared libraries.
Finally, we note that the security of the approach depends
on the fact that injected code will raise an exception (e.g., by
accessing an illegal address or using an invalid opcode), af-
ter it has been de-randomized by the execution environment.
While this will generally be true, there are a few permuta-
tions of injected code that will result in working code that
performs the attacker’s task. This number is statistically
insigniﬁcant [5].
2.2
ISR Runtime
A randomized process requires the appropriate execution
environment to de-randomize its instructions before they are
executed. Previous work on ISR has demonstrated that it is
possible to implement such an environment both in hardware
and software. In both cases, the environment needs access
to the key used during the randomization. The key can be
stored within the executable, or in a database. Storing it
within the application is compact and removes the need for
external storage (i.e., a DB), but could expose the key if the
application leaks information.
Additionally, programs frequently make use of libraries,
which may or may not be randomized. ISR needs to be able
to detect when execution switches from a randomized piece
of code to a plain one, and vice-versa. Detecting such con-
text switches can be complex (specially in hardware), and
in fact previous work has only handled statically linked exe-
cutables. We will show in Section 3 that our implementation