of the victim. Second, we propose to change the UI such that
the user of the requestor can decide whether to accept a pass-
word from a grantor. Again, Apple has already implemented
a similar mechanism in AirDrop, where a user is asked to
accept an incoming ﬁle.
5.6 Preventing Wi-Fi Password Entry via
Settings App Crash
We discover a parsing vulnerability in the PWS protocol that
allows us to prevent Wi-Fi password entry of nearby devices.
5.6.1 The Vulnerability: Parsing Bug in PWS
While implementing our own PWS client, we discovered that
when removing the mandatory SSID or the PSK key-value
pair from the dictionary, which is sent in the PWS3 message
shown in Fig. 13, the requestor fails to parse the packet and
crashes the current application.
USENIX Association
30th USENIX Security Symposium    3931
{
}
dn : ,
gr : 1,
op : 5,
eh : [ base64 ( SHA () ) , ...] ,
ph : [ base64 ( SHA () ) , ...] ,
nw: ,
psk: 
Figure 13: PWS3 message highlighting the problematic ﬁelds.
5.6.2 The Attack: Preventing Password Entry for New
Wi-Fi Networks
In this attack, we crash the Settings app on iOS or close the
Wi-Fi password window on macOS of every device within
Bluetooth range that is currently entering a password for a
Wi-Fi network. Every device logged in with an Apple ID and
has Bluetooth enabled sends out PWS advertisements once
the user enters the Wi-Fi password view. We demonstrate the
effectiveness of the attack in a video PoC [30].
5.6.3 The Mitigation: Check for Missing Fields
Apple should be able to ﬁx the vulnerability by checking for
empty or missing ﬁelds and graciously fail if an unexpected
packet is encountered. Until a ﬁx is provided, users can
disable Bluetooth on their devices to thwart the attack.
6 Conclusion
Undocumented proprietary protocols are hard to analyze due
to the costly initial investment in reverse-engineering, though
severe vulnerabilities have been found in the past [18, 23, 34,
44]. Our method to conduct structured reverse engineering
of Apple’s Continuity wireless ecosystem is a crucial corner-
stone that enables independent third-party security audits,
which, in effect, help to protect the users of 1.5 billion devices
worldwide. Using this method, we investigate the protocols
involved in the Handoff (HO), Universal Clipboard (UC), and
Wi-Fi Password Sharing (PWS) services and discover several
vulnerabilities that enable denial-of-service (DoS) attacks,
device tracking, and machine-in-the-middle (MitM) attacks.
All of the attacks can be practically mounted from an attacker
in proximity and only require low-cost hardware. To facilitate
similar research in the future, we appeal to the manufacturers
to document their proprietary protocols as Apple has already
done with their Homekit Accessory Protocol (HAP) stack.
In the meantime, we believe that our detailed ﬁndings can
bootstrap the analysis of other Continuity services as certain
protocol components (e. g., OPACK, Pair–Verify) seem to be
shared across services such that follow-up work does not have
to start from scratch.
Responsible Disclosure
We have shared our ﬁndings with Apple as we discovered
them. Therefore, the disclosure timeline and progress dif-
fer by vulnerability (different follow-up IDs with Apple’s
product security team). In particular, we disclosed the DoS
attack on HO in Section 5.2 on November 27, 2019, the linear
IV tracking mitigation in Section 5.3 November 20, 2019,
the asynchronous hostname randomization in Section 5.4 on
November 27, 2019, the SSID spooﬁng and Wi-Fi password
auto-ﬁll attack in Section 5.5 on February 10, 2020, and the
Settings app crash in Section 5.6 on January 13, 2020. So far,
Apple has published security updates for two vulnerabilities
as detailed in Table 3.
Availability
We release the following open-source software artifacts as
part of the Open Wireless Link project [43]:
(1) a reverse-engineering toolkit for Continuity services
(apple-continuity-tools),
(2) a decryption utility for HO and UC BLE advertisements
(handoff-ble-viewer),
(3) an implementation of the HO and UC authentication
protocol (handoff-authentication-swift),
(4) an implementation of a PWS requestor includ-
ing an OPACK (de)serializer written in Python
(openwifipass), and
(5) implementations of a PWS grantor and requestor written
in Swift (wifi-password-sharing).
If the links do not work, preﬁx the respective project name
with https://github.com/seemoo-lab/.
Acknowledgments
This work has been funded by the LOEWE initiative (Hesse,
Germany) within the emergenCITY center and by the German
Federal Ministry of Education and Research and the Hessen
State Ministry for Higher Education, Research and the Arts
within their joint support of the National Research Center for
Applied Cybersecurity ATHENE.
References
[1] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper B. Ras-
mussen. “The KNOB is Broken: Exploiting Low Entropy
in the Encryption Key Negotiation of Bluetooth BR/EDR”.
In: USENIX Security Symposium. 2019. URL: https :
/ / www . usenix . org / conference / usenixsecurity19 /
presentation/antonioli.
[2] Apple Inc. About the Security Content of Safari 13.0.5. 2020.
URL: https://support.apple.com/en-us/HT210922.
3932    30th USENIX Security Symposium
USENIX Association
[3] Apple Inc. Adopting Handoff.
2016. URL: https :
/ / developer . apple . com / library / archive /
documentation / UserExperience / Conceptual /
Handoff/AdoptingHandoff/AdoptingHandoff.html.
[4] Apple Inc. Apple Platform Security. 2020. URL: https:
//support.apple.com/guide/security.
[5] Apple Inc. Apple Reports Record First Quarter Results. 2020.
URL: https : / / www . apple . com / newsroom / 2020 / 01 /
apple-reports-record-first-quarter-results/.
[6] Apple Inc. HomeKit Accessory Protocol Speciﬁcation. 2017.
URL: https : / / developer . apple . com / support /
homekit-accessory-protocol/.
[7] Apple Inc. How to Share Your Wi-Fi password from Your
iPhone, iPad, or iPod Touch. 2019. URL: https://support.
apple.com/en-us/HT209368.
[8] Apple Inc. “Introducing iPad Apps for Mac”.
In: Ap-
ple Worldwide Developers Conference (WWDC). 2019.
URL: https://developer.apple.com/videos/play/
wwdc2019/205/.
[10]
[9] Apple Inc. Use Continuity to Connect Your Mac, iPhone,
iPad, iPod Touch, and Apple Watch. 2020. URL: https :
//support.apple.com/en-us/HT204681.
Jean-Philippe Aumasson and Daniel J. Bernstein. “SipHash:
A Fast Short-Input PRF”. In: INDOCRYPT. Springer, 2012.
[11] Xiaolong Bai, Luyi Xing, Nan Zhang, Xiaofeng Wang, Xi-
aojing Liao, Tongxin Li, and Shi-Min Hu. “Staying Secure
and Unprepared: Understanding and Mitigating the Security
Risks of Apple ZeroConf”. In: IEEE Symposium on Security
and Privacy (S&P). 2016. DOI: 10.1109/SP.2016.45.
[12] Elad Barkan, Eli Biham, and Nathan Keller.
“Instant
Ciphertext-Only Cryptanalysis of GSM Encrypted Communi-
cation”. In: Advances in Cryptology (CRYPTO). 2003. DOI:
10.1007/978-3-540-45146-4_35.
Ian Beer. A Very Deep Dive into iOS Exploit Chains Found
in the Wild. 2019. URL: https://googleprojectzero.
blogspot . com / 2019 / 08 / a - very - deep - dive - into -
ios-exploit.html.
[13]
[14] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe,
and Bo-Yin Yang. “High-Speed High-Security Signatures”.
In: Journal of Cryptographic Engineering (2012). DOI: 10.
1007/s13389-012-0027-1.
[15] Bluetooth SIG. Bluetooth Core Speciﬁcation v5.1. 2019.
URL: https://www.bluetooth.com/specifications/
bluetooth-core-specification/.
[16] Paulo Borges. BLESSED. URL: https://github.com/
pauloborges/blessed.
[17] Solving the Captive Portal Problem on iOS. Butler, Ross.
2018.
URL: https : / / medium . com / @rwbutler /
solving - the - captive - portal - problem - on - ios -
9a53ba2b381e.
[18] Guillaume Celosia and Mathieu Cunche. “Discontinued Pri-
vacy: Personal Data Leaks in Apple Bluetooth-Low-Energy
Continuity Protocols”. In: Proceedings on Privacy Enhanc-
ing Technologies (2020). DOI: 10.2478/popets- 2020-
0003.
[19] Aldo Cortesi, Maximilian Hils, and Thomas Kriechbaumer.
mitmproxy: a Free and Open Source Interactive HTTPS
Proxy. URL: https://mitmproxy.org.
[20] Kim Jong Cracks.
checkra1n: Jailbreak for iPhone 5s
Through iPhone X, iOS 12.3 and Up. URL: https : / /
checkra.in.
[21] Morris Dworkin. Recommendation for Block Cipher Modes
of Operation: Galois/Counter Mode (GCM) and GMAC. Spe-
cial Publication 800-38D. NIST, 2007.
[22] Alexander Heinrich. “Analyzing Apple’s Private Wireless
Communication Protocols with a Focus on Security and Pri-
vacy”. MA thesis. Technical University of Darmstadt, 2019.
[23] Alexander Heinrich, Matthias Hollick, Thomas Schneider,
Milan Stute, and Christian Weinert. “PrivateDrop: Practical
Privacy-Preserving Authentication for Apple AirDrop”. In:
USENIX Security Symposium. To appear. 2021.
[24] Alexander Heinrich, Milan Stute, and Matthias Hollick.
“BTLEmap: Nmap for Bluetooth Low Energy”. In: ACM
Conference on Security and Privacy in Wireless and Mobile
Networks. WiSec ’20. 2020. DOI: 10 . 1145 / 3395351 .
3401796.
Saagar Jha. Making os_log Public on macOS Catalina. 2019.
URL: https : / / saagarjha . com / blog / 2019 / 09 / 29 /
making-os-log-public-on-macos-catalina/.
[25]
[26] Donald Knuth. The Art of Computer Programming. Vol. 2.
Addison-Wesley, 1969.
[27] H. Krawczyk and P. Eronen. HMAC-based Extract-and-
Expand Key Derivation Function (HKDF). RFC 5869. IETF,
2010. DOI: 10.17487/RFC5869.
[28] A. Langley, M. Hamburg, and S. Turner. Elliptic Curves for
Security. RFC 7748. IETF, 2016. DOI: 10.17487/RFC2016.
[29] Chi-Yu Li, Guan-Hua Tu, Chunyi Peng, Zengwen Yuan,
Yuanjie Li, Songwu Lu, and Xinbing Wang. “Insecurity
of Voice Solution VoLTE in LTE Mobile Networks”.
In:
ACM Conference on Computer and Communications Security
(CCS). 2015. DOI: 10.1145/2810103.2813618.
Jannik Lorenz. Video PoC: iOS Settings Crash via Apple
Wi-Fi Password Sharing. 2020. URL: https://youtu.be/
MrPG5A1vSyE.
Jannik Lorenz. Video PoC: Man-in-the-Middle Attack via
Wi-Fi Password Sharing (Auto-Fill Password). 2020. URL:
https://youtu.be/a9OE2uZTWow.
[30]
[31]
[32] Aanchal Malhotra. “Attacking the Network Time Protocol”.
In: Network and Distributed System Security Symposium
(NDSS). 2016. DOI: 10.14722/ndss.2016.23090.
[33] Dennis Mantz, Jiska Classen, Matthias Schulz, and Matthias
Hollick. “InternalBlue – Bluetooth Binary Patching and Ex-
perimentation Framework”. In: ACM International Confer-
ence on Mobile Systems, Applications, and Services (Mo-
biSys). 2019. DOI: 10.1145/3307334.3326089.
USENIX Association
30th USENIX Security Symposium    3933
[34]
Jeremy Martin, Douglas Alpuche, Kristina Bodeman, La-
mont Brown, Ellis Fenske, Lucas Foppe, Travis Mayberry,
Erik Rye, Brandon Sipes, and Sam Teplov. “Handoff All
Your Privacy: A Review of Apple’s Bluetooth Low Energy
Implementation”. In: (2019). DOI: 10.2478/popets-2019-
0057.
[35] Ulrike Meyer and Susanne Wetzel. “A Man-in-the-Middle
Attack on UMTS”. In: ACM Workshop on Wireless Security
(WiSe). 2004. DOI: 10.1145/1023646.1023662.
[36] Micro:bit Educational Foundation. Micro:bit website. URL:
https://microbit.org.
[37] Yoav Nir and Adam Langley. ChaCha20 and Poly1305 for
IETF Protocols. RFC 7539. IETF, 2015. DOI: 10.17487/
RFC7539.
[38] Ole André V. Ravnås. Frida: A World-Class Dynamic Instru-
mentation Framework. URL: https://frida.re.
[39] Adam Stubbleﬁeld, John Ioannidis, and Aviel D. Rubin. “Us-
ing the Fluhrer, Mantin, and Shamir Attack to Break WEP”.
In: Network and Distributed System Security Symposium
(NDSS). 2002.
[40] Milan Stute. “Availability by Design: Practical Denial-of-
Service-Resilient Distributed Wireless Networks”. Ph.D. the-
sis. Technical University of Darmstadt, 2020. DOI: 10 .
25534/tuprints-00011457.
[41] Milan Stute, David Kreitschmann, and Matthias Hollick.
“Demo: Linux Goes Apple Picking: Cross-Platform Ad
hoc Communication with Apple Wireless Direct Link”. In:
ACM Conference on Mobile Computing and Networking
(MobiCom). 2018. DOI: 10.1145/3241539.3267716.
[42] Milan Stute, David Kreitschmann, and Matthias Hollick.
“One Billion Apples’ Secret Sauce: Recipe for the Apple
Wireless Direct Link Ad hoc Protocol”. In: ACM Conference
on Mobile Computing and Networking (MobiCom). 2018.
DOI: 10.1145/3241539.3241566.
[43] Milan Stute, David Kreitschmann, and Matthias Hollick. The
Open Wireless Link Project. 2018. URL: https://owlink.
org.
[44] Milan Stute, Sashank Narain, Alex Mariotto, Alexander Hein-
rich, David Kreitschmann, Guevara Noubir, and Matthias
Hollick.
“A Billion Open Interfaces for Eve and Mal-
lory: MitM, DoS, and Tracking Attacks on iOS and macOS
Through Apple Wireless Direct Link”. In: USENIX Secu-
rity Symposium. 2019. URL: https://www.usenix.org/
conference/usenixsecurity19/presentation/stute.
[45] Pierre B. Vandwalle, Tashbeeb Haque, Andreas Wolf, and
Saravanan Balasubramaniyan. Method and Apparatus for
Cooperative Channel Switching. U.S. Patent 9491593. 2016.
[46] Pierre B. Vandwalle, Christiaan A. Hartman, Robert Stacey,
Peter N. Heerboth, and Tito Thomas. Synchronization of
Devices in a Peer-to-Peer Network Environment. U.S. Patent
9473574. 2016.
[47] Mathy Vanhoef and Frank Piessens. “Key Reinstallation At-
tacks: Forcing Nonce Reuse in WPA2”. In: ACM Conference
on Computer and Communications Security (CCS). 2017.
DOI: 10.1145/3133956.3134027.
[48] Mathy Vanhoef and Eyal Ronen. “Dragonblood: Analyzing
the Dragonﬂy Handshake of WPA3 and EAP-pwd”. In: IEEE
Symposium on Security & Privacy (S&P). 2020. DOI: 10.
1109/SP40000.2020.00031.
[49] Wireshark Foundation and contributors. Wireshark. URL:
https://www.wireshark.org.
3934    30th USENIX Security Symposium
USENIX Association