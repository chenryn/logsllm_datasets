(force monotonicity) eliminates any violations of monotonic-
ity simply by forcing any oﬀenders to take the signature φ.
Deﬁne the ⊕ operation as
λ ⊕ σ =  φ
if λ ⊕A σ ≺ σ
λ ⊕A σ otherwise
It should be clear that fm(A) is always monotonic (M). For
example, the ⊕ table of fm(min(5)) is
5
2
4
3
φ
⊕ 1
1 φ φ φ φ φ
1
φ φ φ φ
1
2
φ φ φ
3
1
3
4
1
3
4
φ φ
φ
5
4
3
1
5
2
2
2
2
An operator to force SM, fsm(A), is deﬁned in much the
same way. The forcing operators do no always produce in-
teresting results. For example, the ⊕ table of fsm(min(5))
contains only φ entries (the algebra min(n) is AM). This
leads us to consider more gentle techniques for inducing
monotonicity.
Suppose we pair up each σ of A with a level counter to
form tuples of the form hi, σi, which will be compared lexico-
graphically, with the normal integer order ≤ used as the pref-
erence relation on the ﬁrst component. The idea is to “bump
up” the level counter for any application of ⊕A that violates
The attribute router-path is used both to break ties be-
tween routes with equal weight and to avoid the problem
of counting to inﬁnity. This algebra supports programmable
labels that can apply policy conditionally:
λ = router-path.label := 10.10.10.10;
if ’data center’ is in tags
then weight.label := 20
else if ’sales center’ is in tags
then weight.label := 30
else reject
Here the notation weight.label denotes the label associated
with the weight component of the product signature, and
“reject” means apply the φ label.
Suppose we require an IGP for a very large network that
has three levels of (nested) administrative areas. Metropoli-
tan area networks (MANs) link oﬃces within small geo-
graphic areas. Regional area networks (RANs) link together
MANs within large geographic regions. The Global Network
(GN) links together all of the RANs. We would like to hide
information (and route ﬂapping) between areas. For this we
deﬁne the following routing algebra.
GNA
RANA
MANA
def= ⊗(G-weight : add(1, 232),
R-path : simseq(232, 30),
G-tags : tags(string))
def= ⊗(R-weight : add(1, 232),
M-path : simseq(232, 30),
R-tags : tags(string))
def= ⊗(M-weight : add(1, 232),
router-id-path : simseq(232, 30),
M-tags : tags(string))
MyIGPA
def= prog(GNA ¯ (RANA ¯ MANA))
Signatures in the MyIGPA algebra are 9-tuples that are
compared lexicographically. Each signature has the follow-
⊕ (1, 1)
(1, 1)
1
2
(1, 1)
3
(1, 1)
(1, 1)
4
5
(1, 1)
(1, 2)
(2, 1)
(1, 2)
(1, 2)
(1, 2)
(1, 2)
(1, 3)
(2, 1)
(2, 2)
(1, 3)
(1, 3)
(1, 3)
(1, 4)
(2, 1)
(2, 2)
(2, 3)
(1, 4)
(1, 4)
(1, 5)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(1, 5)
(2, 1)
(2, 1)
(2, 1)
(2, 1)
(2, 1)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
φ
(2, 2)
(2, 2)
(2, 2)
(2, 2)
φ
φ
(2, 3)
(2, 3)
(2, 3)
φ
φ
φ
(2, 4)
(2, 4)
(2, 5) φ
φ
φ
φ
φ
(2, 5) φ
φ
φ
φ
φ
Table 4: The ⊕ table for lm(2, min(5)).
ing form (ignoring attribute names).
EBGPA
change
between
RANs
change
between
MANs
change
within
MANs
def= prog(⊗(locpref : flip(lp(232)),
aspath : simseq(216, 200),
origin : op(3),
med : ⊥(min, lp(232)),
community : ⊥(min, tags(int))))
h
{
z
wg, pr, tg , h
}|
z
}|
wr, pm, tr,
{
{
ii
i,
z
h wm, pi, tm
}
re-initialized
}|
{z
|
between
MANs
|
re-initialized between RANs
{z
}
We have indicated where attributes change and where they
are re-initialized. Note that the set of tags associated with
routes are independent for each administrative area and
“vanish” when routes cross administrative boundaries.
If
needed, policy can be used to translate tags from one area
to another. Routes get originated withing MANs, and a
typical origination policy might be to set the regional and
global attributes to minimal values.
One could imagine diﬀerent MANs might require diﬀerent
local algebras. For example, suppose that some MANs want
to break ties using bandwidth, others with reliability, while
others will use neither of these tie breakers. We might then
modify the deﬁnition of MANA as follows.
bw
ry
tie-break
MANA
def= bandwidth : width(232)
def= reliability : reliability
def= ⊥(min, ry  bw)
def= ⊗(M-weight : add(1, 232),
router-id-path : simseq(232, 30),
tie-break : tie-break,
M-tags : tags(string))
Note that if diﬀerent MANs originate diﬀerent sets of pre-
ﬁxes, then no routes with diﬀerent tie breaking techniques
will be compared. However, if this is not the case then the
speciﬁcation tells us no tie break (⊥) will be preferred over
reliability, which in turn is preferred over bandwidth.
The IGPs deﬁned above are all SM. This is easy to derive
from the monotonicity properties of the base algebras and
the preservation properties of the operators used.
5. LONG LIVE BGP!
We now study the policy component of BGP within RAML.
Using the scoped product, we deﬁne
BGPA = EBGPA ¯ IBGPA,
where EBGPA models the EBGP policy component, IBGPA
models the IBGP policy component. In this paper we focus
only on EBGP and do not go into the details of modeling
IBGP.
Figure 5: An RAML expression for the EBGP rout-
ing algebra.
The deﬁnition of EBGPA is fairly straightforward, and
is presented in Figure 5. The local preference attribute,
locpref, uses lp(n), but with the preference reversed (larger
integers are more preferred). The aspath is a simple se-
quence of AS numbers, where the maximum length is set
to 200. The origin attribute in BGP has value IGP, EGP,
or INCOMPLETE, and the lowest origin type are preferred,
where IGP < EGP < INCOMPLETE. We use op(3) to
model this. The med attribute (Multi-Exit Discriminator)
is used to implement “cold potato” routing.
In order to
avoid the notorious problems of this attribute [18, 26], we
model med as if this attribute is always compared, no mat-
ter what the next hop ASN.
As it stands, the expression in Figure 5 represents an al-
gebra that is neither M nor SM. But note that if we replace
the localpref component with a expression that is merely
monotonic (M), then it follows from the design pattern of
Figure 4 that the entire expression will be strictly monotonic
(SM). This is due to the presence of the SM algebra used for
AS paths. Thus, if we can replace the localpref component
with an M algebra and deﬁne an SM algebra for IBGP, then
we would have a BGP that is guaranteed to converge, no
matter how it is (mis-) conﬁgured.
It is known that the standard practice of preferring cus-
tomer routes over peer routes, and peer routes over provider
routes provide at least some protection from BGP diver-
gence [6]. We now demonstrate how easily similar results
are obtained using RAML. First, recall that the routing al-
gebra lp(3) has the ⊕ table
⊕ 1
1
1
2
2
3
3
2
1
2
3
3
1
2
3
For readability, we rename the signatures as follows: 1 to C
(customer routes), 2 to R (peer routes), and 3 to P (provider
routes). Similarly, we rename the labels as follows: 1 to c
(labels a link to a customer), 2 to r (labels a link to a peer),
and 3 to p (labels a link to a provider). This produces the
⊕ table
⊕ (1, C)
(1, C)
c
r
(1, R)
p
(1, P )
(1, R)
(2, C)
(1, R)
(1, P )
(1, P )
(2, C)
(2, R)
(1, P )
(2, C)
(2, C)
(2, R)
(2, P )
(2, R)
(3, C)
(2, R)
(2, P )
(2, P )
(3, C)
(3, R)
(2, P )
(3, C)
(3, C)
(3, R)
(3, P )
(3, R)
φ
(3, R)
(3, P )
(3, P ) φ
φ
φ
(3, P ) φ
φ
φ
Table 5: The ⊕ table for lm(2, lp(3)), after lp(3) signatures have been renamed, 1 → C, 2 → R, 3 → P , and
labels renamed, 1 → c, 2 → r, and 3 → p.
⊕ C R P
c C C C
r R R R
P
p
P
P
For example, the rule
p ⊕ C = P
can be read as follows:
if one of my providers sends me a