easily computable. Moreover, the LFSR implementation used
by SoftRoCE generates only 15 distinct numbers, which does
not increase the randomness of rkeys. The full algorithm for
key generation can be found in Appendix A.
Devices based on the mlx5 driver do not use a ﬁxed increase
between subsequent registrations, but still strictly increase the
values with a random value (modulo 232). An analysis of these
values shows that with more than 60% probability either the
value 0x101 or 0x102 (see Figure 3) is chosen. Thus, even
though the key generation process of devices based on mlx5
driver contains higher entropy than other drivers, the sequence
of generated keys is still predictable by an adversary with
moderate effort.
Key Entropy Analysis. Given that the rkey generation
Figure 3: Probabilities of differences for random rkey value
generated using mlx5 device.
process for all tested drivers seems predictable, we further
quantify the randomness of the key generation process by
calculating the min-entropy [5, 24], which denotes a measure
to describe the uncertainty associated with a random variable
by guessing the key until a correct key is found. Thus, the min-
entropy measures the difﬁculty of guessing the most likely
output of an entropy source. Following, the optimal strategy
for successive guessing is to try all possible values in order
of decreasing probability.
If we consider this problem of guessing a discrete random
variable X on x1,x2, . . . ,xm with probability distribution P =
(p1, p2, . . . , pm), where pi = P(X = xi), 1 ≤ i ≤ m. We assume
that p1 ≥ p2 ≥ . . . ≥ pm. Then the min-entropy of X is deﬁned
as
H∞(X) = min
1≤i≤m
(−log2 pi)
= −log2 max
1≤i≤m
pi = −log2 p1
(1)
Our observations showed that for all tested drivers the se-
quence of generated rkeys was strictly increasing (modulo
232). Thus, we deﬁne the dependency of a newly generated
key on the previous key as follows:
xi+1 = xi + δi
(2)
where δi denotes the difference between key xi and xi+1 and
is further described using a discrete random variable ∆ with
probability density function P(∆ = δi). Thus, given key xi the
generation of key xi+1 is dependent on the randomness of ∆
and quantiﬁed by the min-entropy of ∆ (see Table 2).
4280    30th USENIX Security Symposium
USENIX Association
0x1020x1010x1030x2010x1090x2020x3020x4020x5020x3010x4010x5010x6020x7010x601others0.00.10.20.3p(δi)Table 2: Entropy of rkey generation for key differences
Driver
bnxt_re
mlx4
mlx5
rxe
H∞(∆) H(Y|X)
0
0.14
2.16
2.04
0
1
0
2.85
This dependency can further be generalized by calculating
the conditional entropy [23] of subsequent key generations,
which quantiﬁes the amount of information needed to predict
a newly generated key xi+1 given the previous key xi (e.g., if
an attacker obtains a key legitimately by registering a memory
region) and is deﬁned as:
H(Y|X) = − ∑
x∈X,y∈Y
p(x,y) log2
p(x,y)
p(x)
(3)
where p(x,y) denotes the joint probability of x and y.
For bnxt_re and rxe we can always predict which rkey will
be generated next, making the value of xi+1 completely deter-
mined by xi, which results in the conditional entropy being
equal to 0 [23]. For mlx4, the value of Y only depends on
whether a region has been deregistered before the next rkey is
generated. Assuming that this occurs with probability 0.5, the
conditional entropy is 1 bit. Finally, for mlx5 the distribution
of key differences ∆ is illustrated in Figure 3. If an attacker
guesses that the next key is incremented by the difference
with the highest probability, his guess would be correct in one
out of three guesses on average. The computation of the con-
ditional entropy of mlx5 results in 2.85 bits of entropy, which
enables an attacker to guess the rkey of future registrations
with high probability.
V2 Static Initialization State for Key Generation. In ad-
dition to the limited number of rkeys, the RNICs based on the
bnxt_re and mlx4 drivers are initialized using static state and
the same set of keys persists across different physical reboots
of the machine. Assuming that an adversary has observed the
entire key set, the same keys will be reused even after the
physical machine rebooted.
Since the IB network adapter on Azure instances is virtu-
alized and a reboot of the instance does not lead to physical
reboot of the machine, the tested Azure instances were not
affected by static initialization.
V3 Shared Key Generator. On all tested devices the key
generator is fully shared between applications using the same
network interface even if they use different protection do-
mains. Thus, if multiple RDMA applications are running on
the same service the prediction of rkeys of other applications
based on own rkeys is trivial as they have been generated
using the same key generator.
In addition to enabling memory key prediction across mul-
tiple application, this vulnerability can also be exploited to
open a side-channel between applications sharing the same
RNIC, e.g., by encoding a bit-stream in the number of regis-
trations they perform per a time unit. This is especially critical
if an adversary is located on the same physical host as the
victim (e.g., two VMs on the same physical host in a public
cloud environment).
4.3 Memory Allocation Randomness
V4 Consecutive Allocation of Memory Regions. In addi-
tion to the rkey associated to a memory location, the adversary
is also required to predict the corresponding memory address.
Typically, techniques such as address space layout randomiza-
tion (ASLR) randomly arrange the address space positions of
a process. This prevents an attackers from directly referring
to other objects in memory by randomizing their locations.
However, subsequent objects in memory are allocated in con-
secutive addresses with respect to a random address base [40].
For example, all objects allocated via the mmap() Linux sys-
tem call are placed side by side in the mmap area.
Since RDMA-based applications run in a single process on
the target host, they are not protected by ASLR, but instead
objects in memory are allocated side-by-side. Assuming an
attacker knows the address of a memory object on a target host,
predicting the memory address of other objects is possible.
Even though consecutive allocation of memory regions is not
caused by RDMA protocols, it still affects the security of
RDMA applications.
4.4 QP Number Identiﬁers & Packet Se-
quence Numbers
V5 Linearly Increasing QP Numbers. Our evaluation
(see Table 1) shows that for all tested devices and drivers
the QP numbers are allocated sequentially. Assuming that an
adversary registers a QP himself or observes a QP registration
request, predicting preceding or subsequent QP numbers is
trivial. Furthermore, as IBA uses 24 bit QP numbers, it is not
possible to establish more than 224 QP connections within an
RNIC.
V6 Fixed Starting Packet Sequence Number (PSN).
The implementation of RDMA offers two ways of establish-
ing RDMA connections: a native RDMA connection interface
or using the RDMA connection manager [20] to establish
connections. Using the native connection interface, the con-
nection parameters, such as destination QP number, local
and remote starting PSNs, are set by the application devel-
opers. The RDMA connection manager moves this burden
away from application developers and randomly generates a
starting PSN (using a cryptographic pseudorandom number
generator), thereby making the process of RDMA connection
establishment similar to TCP sockets. Our analysis (see §6)
shows that many RDMA-based open-source applications opt
for using the native interface and manually set the starting
USENIX Association
30th USENIX Security Symposium    4281
PSNs. In case the starting PSNs are not randomized on a per
QP connection basis, predicting PSNs of established connec-
tions becomes much simpler.
4.5 Other Security Weaknesses in IBA/RoCE
Furthermore, we describe four security weaknesses that
greatly enable or facilitate attacks on RDMA applications.
V7 Limited Attack Detection Capabilities. RDMA al-
lows one machine to directly access data on remote machines
across the network. Due to network ofﬂoading of one-sided
RDMA operations, all memory accesses are performed using
dedicated hardware on RNIC without any CPU interaction.
This makes memory accesses completely invisible to applica-
tions and limits their capabilities of detecting attacks.
V8 Missing Encryption and Authentication in RDMA
Protocols. Existing RDMA network protocols do not pro-
vide any mechanisms for authentication nor encryption of
the header and the payload of RDMA packets. An adversary
can spoof any ﬁeld in the packet header or alter any byte in
the packet payload of RDMA messages. In-network packet
alteration only requires recalculation of packet checksums,
whose algorithms and seeds are known and speciﬁed by the
IBA. Potential solutions for encryption and authentication in
IBA are further discussed in §7.3.
V9 Single Protection Domain for all QPs. To reduce the
state overhead on RNICs the RDMA connection manager
by default uses a single protection domain for all established
QPs and memory registrations within a single process. As
a result, all QPs of a single process can access memory of
each other. Nonetheless, even developers using the native
connection interface seem to opt for using a single PD for all
its QPs and memory registrations (see §6).
V10 Implicit On-Demand Paging (ODP). Implicit On-
Demand Paging (ODP) enables a process to register its com-
plete memory address space for I/O accesses. This feature
is used for high-performance communication settings, where
the overhead of frequently registering communication buffers
leads to performance degradation. ODP removes the need to
register memory as any memory address can be registered by
RNIC on demand. If ODP is enabled, an attacker can remotely
access the entire memory space of a process resulting in high
attack potential. While this feature is disabled by default, re-
cent advances in high-performance communication systems
lead to this feature gaining traction in IB deployments [19].
5 Attacks on IBA
Using the discovered vulnerabilities, an adversary could
launch attacks in RDMA networks, e.g., by using unautho-
rized access to memory regions or by disrupting communica-
tion using DoS. Furthermore, vulnerabilities in RDMA could
also be misused as an attack vector for application-level at-
tacks (e.g., malware). In this section, we describe six potential
attacks on RDMA networks, labeled A1 – A6 . For each of
the attacks we explain the experiments we conducted and
discuss potential mitigation mechanisms, which are discussed
in greater detail in §7. Table 3 outlines the dependency on
attacker locations and vulnerabilities, and potential mitigation
mechanisms for each of the attacks.
5.1 A1: Packet Injection using Impersonation
As current RDMA systems enforce no source authentica-
tion V8 , an adversary can impersonate any other endpoint
and inject packets that seem to belong to an established con-
nection by another client. To inject an RDMA packet that
is considered valid by the receiving endpoint, the adversary
needs to know the QPN of the victim and the current PSN.
Apart from obtaining these parameters by on-path eaves-
dropping or impersonation of end hosts, an attacker could
try to predict them. Given that QP numbers are generated
sequentially for each new client V5 , an attacker can obtain
expected QPNs of clients by simply connecting to the RDMA-
enabled service and decrement the QPN that gets assigned to
the attacker. Thus, a valid PSN remains the only protection
mechanism that prevents an attacker from injecting a packet.
If an application also does not generate starting PSNs ran-
domly, the attacker can start bruteforcing PSN by exploiting
the ﬁxed starting PSN issue V6 , which signiﬁcantly reduces
the search space. Otherwise, even with random PSNs, the at-
tacker can bruteforce the PSN within a reasonable amount of
time as only 223 packets are required on average to generate
a valid PSN. Bruteforcing the current PSN of a QP connec-
tion is related to enumerating the sequence number of a TCP
connection [41], with the main difference that packets with
invalid PSN simply get discarded by the RNIC and do not
affect the established QP connection.
In addition to regular RDMA packets, injection of RDMA
read and write packets additionally requires the attacker to
know a valid memory address and its corresponding memory
protection key rkey. This attack is further discussed in §5.3.
In the remainder of this work, attacks based on imperson-
ation are referenced to as A1 .
Experiments. To verify the feasibility of the attacks on
RDMA protocols, we implemented a spooﬁng tool for RoCE*.
The tool can fabricate any custom RoCEv1 and RoCEv2
packet including RDMA read and write operations and is
fully compatible with the IBA speciﬁcation [3]. Our RoCEv1
implementation uses Linux raw Ethernet sockets, and Ro-
CEv2 uses IPv4 raw sockets and UDP as a transport layer.
The tool can mimic any RDMA request initiator and inject
custom RDMA packets over any Ethernet links. RDMA over
IB link cannot be fabricated in software, as the IB protocol is
implemented fully in hardware. The tool has been tested on
all RoCE devices listed in the Table 1.
*https://github.com/spcl/redmark
4282    30th USENIX Security Symposium
USENIX Association
Table 3: Overview of dependency on attacker location and vulnerabilities for attacks on RDMA combined with an overview of
mitigation mechanisms that thwart the attack.
T1
T2
T3
T4
V1
V2
V3
V4
V5
V6
V7
V8
V9
V10
M1
M2
M3
M4
M5
M6
M7
M8
A1
A2
A3
A4
A5
A6
enables attack
 mitigates attack
























H
W
m
e






m


















w
e
a
k
static
s
h
w
e
a
k
are
d
r
k
e
y
init.
li
m
n