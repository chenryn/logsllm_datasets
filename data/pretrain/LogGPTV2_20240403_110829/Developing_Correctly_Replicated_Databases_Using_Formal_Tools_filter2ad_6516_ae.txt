### 数据传输与状态迁移

在每个表中，我们将行分批发送，并将它们插入到目标副本的相应表中。我们考虑了两种行大小：16字节（3列）和1千字节（4列），行数从500到500,000不等。对于这两种行大小，批次大小被选择为接近50千字节的序列化形式。我们的状态迁移技术允许使用任何支持JDBC的数据库，但其速度比网络传输慢一个数量级。在所有实验中，行插入速度构成了状态迁移的瓶颈。

对于配置了1个仓库的TPC-C数据库（约100MB的数据），状态迁移耗时54.5秒。在TPC-C的情况下，序列化表行的开销较高，因为这些表包含更多的列（序列化开销与表列数成正比）。因此，序列化100MB数据所需的时间占传输500MB数据库（每行1KB，共500,000行）时间的77%（如图10(b)所示）。

### 相关工作

我们的方法类似于seL4，这是第一个经过机器验证的操作系统内核[1]。无论是我们的工作还是seL4，都从非正式规范开始。从非正式规范中，推导出正式的正确性属性以及系统的规范。在seL4中，正确性属性在Isabelle/HOL[2]中指定，系统规范则在Haskell[28]中指定。而我们使用的是Nuprl和EventML。

在这两种情况下，系统规范都被翻译成相应的形式化环境中的规范，并进行手动正确性证明，以表明该规范满足所需的正确性属性。

我们的方法从这里开始有所不同。对于seL4，可执行代码是用C的一个子集手工编写的，并且需要通过Isabelle/HOL中的细化映射将其与规范关联起来。由于EventML的抽象级别不同于Haskell，我们可以直接从EventML规范生成可执行的Nuprl代码，并自动证明其与LoE规范的一致性。此外，利用Nuprl的归纳逻辑形式转换器，我们能够通过因果顺序的归纳来证明分布式系统属性的正确性。

另一个类似的方法是由Formally Verifiable Networking (FVN)项目[29]提出的。他们使用Network Datalog (NDlog)，一种Datalog[30]的变体，以声明方式指定路由协议。在我们的系统中，我们使用EventML。NDlog规范可以被翻译成PVS[31]的公理，并进行交互式正确性证明。这对应于在LoE层面进行证明。在FVN中，还可以将PVS公理翻译回NDlog。在P2框架[32]中，NDlog规范被编译成数据流程序，其中的数据流元素用C++编写。在我们的工作中，我们从EventML规范生成GPM程序。P2已扩展了基数抽象[33]，这项技术允许直接对声明规则的应用效果进行形式推理。

EventML与Orc[34],[35]有很强的相似性，后者是一种用于结构化并发编程的语言。与EventML一样，Orc有一小组组合器执行基本服务，Orc表达式类似于我们的事件类。尽管存在Orc的形式语义，但据我们所知，还没有在定理证明器中形式化的版本。

还有许多其他语言可以简洁地指定分布式系统。Mace[36]规范可以进行模型检查并翻译成C++代码。MOMMIE[37]规范可以翻译成可运行的代码以及TLA+规范，以便进行验证。Nomadic Pict[38]是一种设计用于移动代理编程的语言，具有精确的语义，可以用来推理正确性。然而，在这些情况下，都没有可验证的链接来保证规范的正确性和生成的可执行代码的正确性。

### 结论

我们提出了一种使用新的形式化工具构建高可用数据库的方法，这些工具允许生成正确的分布式协议。基于一个带有正确性属性的总序广播服务，我们构建了两个复制数据库：一个是基于主备复制的，另一个是基于状态机复制的。

主备复制提供了与流行的MySQL数据库相当或更好的性能。虽然在所有基准测试中不如主备复制快，但我们展示了状态机复制协议在TPC-C基准测试中提供了类似的峰值吞吐量。使用状态机复制时，正常操作依赖于广播服务，并且更大比例的代码带有正确性保证。这表明，构建具有形式化保证的复制数据库不仅是可行的，而且还能提供良好的性能。

### 参考文献

[此处省略具体参考文献列表]

---

希望优化后的文本更加清晰、连贯和专业。如果有进一步的需求或修改，请告诉我！