### Input Code
     const tryCatchWrapper = (target) => async (...targetArgs) => {
        try {
          return target(...targetArgs);
        } catch (e) {
          throw errorObj({_error: e.message});
       }
     };
### Babel Configuration (.babelrc, package.json, cli command)
babeljs.io standard config
### Expected Behavior
    "use strict";
    function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
    var tryCatchWrapper = function tryCatchWrapper(target) {
      return function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          for (var _len = arguments.length, targetArgs = Array(_len), _key = 0; _key  async (...targetArgs) => {
        try {
          targetArgs; // do this!
          return target(...targetArgs);
        } catch (e) {
          throw errorObj({_error: e.message});
       }
     };
### Context
Made a try/catch wrapper for calling stripe. it bugs out! But then when i put
a `console.log` in there, it works fine, which makes it extra confusing.  
A call might look like this:
    stripe.invoices.retrieveUpcoming = tryCatchWrapper(stripe.invoices.retrieveUpcoming.bind(stripe.invoices));
### Your Environment
babeljs.io