title:TrustICE: Hardware-Assisted Isolated Computing Environments on Mobile
Devices
author:He Sun and
Kun Sun and
Yuewu Wang and
Jiwu Jing and
Haining Wang
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
TrustICE: Hardware-assisted Isolated Computing
Environments on Mobile Devices
He Sun∗†‡, Kun Sun‡, Yuewu Wang∗, Jiwu Jing∗ and Haining Wang§
∗State Key Laboratory of Information Security, Institute of Information Engineering, CAS, Beijing, China
Data Assurance and Communication Security Research Center, CAS, Beijing, China
{sunhe, wangyuewu, jingjiwu}@iie.ac.cn
†University of Chinese Academy of Sciences, Beijing, China
‡Department of Computer Science
College of William and Mary, Williamsburg, VA, USA
§Department of Electrical and Computer Engineering
PI:EMAIL
University of Delaware, Newark, DE, USA
PI:EMAIL
Abstract—Mobile devices have been widely used to process
sensitive data and perform important transactions. It is a chal-
lenge to protect secure code from a malicious mobile OS. ARM
TrustZone technology can protect secure code in a secure domain
from an untrusted normal domain. However, since the attack
surface of the secure domain will increase along with the size
of secure code, it becomes arduous to negotiate with OEMs to
get new secure code installed. We propose a novel TrustZone-
based isolation framework named TrustICE to create isolated
computing environments (ICEs) in the normal domain. TrustICE
securely isolates the secure code in an ICE from an untrusted
Rich OS in the normal domain. The trusted computing base
(TCB) of TrustICE remains small and unchanged regardless of
the amount of secure code being protected. Our prototype shows
that the switching time between an ICE and the Rich OS is less
than 12 ms.
Keywords—Computing Environment; Isolation; TrustZone.
I.
INTRODUCTION
As we are rushing toward the post-PC era, the concept
of Bring Your Own Device (BYOD) is a growing trend for
allowing people to bring personally owned mobile devices
(e.g., smart phones and tablets) to workplace and use them to
access company’s sensitive data. It can reduce an enterprise’s
running cost and improve its employees’ productivity. How-
ever, it also brings the risks of potential information leakage
that could hold the enterprises back. When both personal
and enterprise applications are installed on the same mobile
system, adversaries may compromise the mobile OS kernel
by exploiting vulnerabilities in personal applications and then
steal data from enterprise applications [1], [2], [3].
Recent hardware progresses on ARM processors have
enabled mobile devices to protect secure code’s execution
in an isolated computing environment [4], [5], [6], [7], [8],
[9]. ARM introduces a new CPU mode called Hyp mode.
KVM/ARM [4], [5] utilizes Hyp mode to port Linux KVM
on ARM processors and run virtual machines with compara-
ble performance to native execution. One major concern of
Dr. Yuewu Wang is the corresponding author.
hypervisor-based solutions on mobile devices is the higher
power consumption due to virtualization operations. ARM also
introduces TrustZone technology to protect secure code from
insecure code by separating them into two isolated execution
domains [9].
Current TrustZone-based solutions [10], [9], [11], [12]
install a minimal secure OS in the secure domain and run
a number of secure applications in the secure OS. It faces two
major challenges. First, the attack surface in the secure domain
will increase along with the number of secure applications
installed in the secure OS. Moreover, the trusted computing
base (TCB) of the secure domain will increase along with the
number of kernel modules installed in the secure OS in order
to provide additional services and support more applications.
Since the secure domain has a higher privilege than the
normal domain, when the secure domain is compromised, the
normal domain will be compromised too. Second, for third-
party software developers, it may be an arduous process for
negotiating with OEMs and service providers to get
their
code installed into the secure domain. Though ARM deﬁnes
an API speciﬁcation TZAPI [9] for TrustZone, the detailed
implementation depends on the software vendors that typically
only have interests in providing their own closed source
solutions.
In this paper, we propose a novel TrustZone-based isolation
framework named TrustICE to provide isolated computing
environments (ICEs) on mobile devices. The basic idea of
TrustICE is to create ICEs in the normal domain rather than
in the secure domain. Instead of using a hypervisor, TrustICE
relies on TrustZone to ensure that the secure code in ICEs
is securely isolated from the untrusted and insecure code
including the Rich OS in the normal domain.
TrustICE aims at providing ICEs to protect secure code
without enlarging the attack surface and the TCB in the
secure domain. By moving the secure code from the secure
domain to the normal domain, the attack surface of the secure
domain hardly changes, no matter how many pieces of new
secure code are installed and executed on the mobile devices.
Similarly,
the TCB is unchanged and minimized, since it
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.11
DOI 10.1109/DSN.2015.11
367
367
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
only consists of a Boot ROM and a small trusted domain
controller (283 lines of code). The trusted domain controller is
responsible for ensuring the integrity and authenticity of secure
code before being loaded into the memory, enforcing secure
isolation of secure code in the normal domain, and achieving
a secure switching between ICE and the Rich OS. Therefore,
TrustICE provides third-party software vendors and application
developers an isolated computing environment for integrating
their secure code into the TrustZone’s secure domain, without
the arduous negotiation with OEMs.
We can protect one ICE from being accessed by the Rich
OS and other ICEs by using TrustZone. First, when secure
code is running in an ICE, the Rich OS and other ICEs are all
suspended and thus cannot access the resource in the active
ICE. Second, when one ICE is in the suspend state, since it
may contain state information about secure code, we must
prevent the running Rich OS and other secure code from
reading the memory of the suspended secure code. Instead
of using the heavy encryption/decryption mechanisms, we
use the hardware-assisted Watermark technique [13] on ARM
processors to dynamically protect the memory regions of the
suspended secure code.
We implement a TrustICE prototype on Freescale i.MX53
QSB and develop two ICE usage instances to demonstrate the
usability of TrustICE. First, we can successfully run a self-
contained cryptographic library in one ICE to provide public
key operations. Second, we implement a trusted user interface
containing a touchscreen driver and a wireless communication
driver for users to interact with the ICE.
In summary, we make the following contributions in this
paper.
• We design a TrustZone-based isolation framework
named TrustICE to provide isolated computing envi-
ronments on mobile devices without using a hypervi-
sor.
• We enhance the system security. TrustICE can reduce
the attack surface of the secure domain and minimize
the system’s TCB by moving secure code from the
secure domain to the normal domain. TrustICE’s TCB
only includes a Boot ROM and a small trusted domain
controller, which is protected by TrustZone in the
secure domain.
• We can ensure the isolation of secure code in the
normal domain. Since all secure code will be executed
in the normal domain, we ensure that no matter
whether the secure code is running or suspended, the
untrusted Rich OS cannot access or manipulate it.
• We implement a TrustICE prototype on Freescale
i.MX53 QSB. The Rich OS is a customized Linux
2.6.35 and Android 2.3.4. The experimental results
show that our system can switch from the Rich OS
to ICE in 10.6 ms, and switch back from ICE to the
Rich OS in 0.8 ms.
The remainder of the paper is organized as follows. Sec-
tion II introduces TrustZone background. Section III describes
the threat model and assumptions. We present the TrustICE
framework in Section IV. A prototype implementation is
368368
detailed in Section V. Section VI presents experimental results.
We perform a security analysis in Section VII. The related
work is described in Section VIII. Finally, we conclude the
paper in Section IX.
II. BACKGROUND
ARM TrustZone technology is a hardware security exten-
sion in ARM processors [9], [14], [15]. Commodity processor
chips with TrustZone extension have been introduced by
mainstream semiconductor corporations such as Freescale [16],
TI [17], and Samsung [18]. Figure 1 shows the TrustZone
architecture adopted by most trusted execution environment
(TEE) solutions (e.g. MobiCore (Trustonics) [12], Sierra-
TEE [19] and Trusted Logic [20]), which runs untrusted apps
on an untrusted Rich OS in the normal domain and protects
secure apps on a small customized secure OS in the secure
domain. The isolation between two domains is enforced by
a secure monitor in the secure domain to ensure CPU state
isolation, memory isolation, and I/O device isolation. When
the system boots up, a secure boot ensures the integrity and
authenticity of the secure OS.
(cid:7)(cid:23)(cid:25)(cid:21)(cid:13)(cid:20)(cid:1)(cid:5)(cid:23)(cid:21)(cid:13)(cid:19)(cid:22)
(cid:10)(cid:17)(cid:15)(cid:28)(cid:25)(cid:17)(cid:1)(cid:5)(cid:23)(cid:21)(cid:13)(cid:19)(cid:22)
(cid:3)(cid:24)(cid:24)
(cid:3)(cid:24)(cid:24)
(cid:3)(cid:24)(cid:24)
(cid:11)(cid:25)(cid:28)(cid:26)(cid:27)(cid:17)(cid:16)(cid:1)
(cid:11)(cid:25)(cid:28)(cid:26)(cid:27)(cid:17)(cid:16)(cid:1)
(cid:11)(cid:25)(cid:28)(cid:26)(cid:27)(cid:17)(cid:16)(cid:1)
(cid:3)(cid:24)(cid:24)
(cid:3)(cid:24)(cid:24)
(cid:3)(cid:24)(cid:24)
(cid:9)(cid:19)(cid:15)(cid:18)(cid:1)(cid:8)(cid:10)
(cid:10)(cid:17)(cid:15)(cid:28)(cid:25)(cid:17)(cid:1)(cid:8)(cid:10)
(cid:10)(cid:17)(cid:15)(cid:28)(cid:25)(cid:17)(cid:1)(cid:6)(cid:23)(cid:22)(cid:19)(cid:27)(cid:23)(cid:25)
(cid:10)(cid:17)(cid:15)(cid:28)(cid:25)(cid:17)(cid:1)(cid:4)(cid:23)(cid:23)(cid:27)
(cid:11)(cid:25)(cid:28)(cid:26)(cid:27)(cid:12)(cid:23)(cid:22)(cid:17)(cid:2)(cid:17)(cid:22)(cid:13)(cid:14)(cid:20)(cid:17)(cid:16)(cid:1)(cid:3)(cid:9)(cid:6)(cid:1)(cid:24)(cid:25)(cid:23)(cid:15)(cid:17)(cid:26)(cid:26)(cid:23)(cid:25)
Fig. 1: Traditional TrustZone Architecture
A. CPU State Isolation
TrustZone supports two CPU states, secure state and non-
secure state, for the secure domain and the normal domain,
respectively. Two CPU states are separated through a set of
banked CP 15 registers that could be assigned two values. Each
state consists of seven CPU modes: User, FIQ, IRQ, Supervi-
sor, Abort, Undeﬁned, and System. All the modes, except the
User mode, are privileged modes. Mobile applications run in
the User mode, and the OS kernel runs in the privileged modes.
Secure and non-secure states can be distinguished by setting
the N S bit in the Secure Conﬁguration Register (SCR), which
can only be modiﬁed in the secure state [14]. TrustZone adds a
new privileged Monitor mode that only runs in the secure state
to serve as a gatekeeper managing the switching between the
two states. Both states can call a privileged Secure Monitor
Call (SMC) instruction to enter the Monitor mode and then
switch to the other state. Moreover, a hypervisor mode called
HYP mode has been integrated in ARM Cortex A15 processor
family to support virtualization of non-secure operations [4],
[5].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:53:17 UTC from IEEE Xplore.  Restrictions apply. 
B. Memory Isolation
TrustZone provides virtual MMU mechanism to support
different virtual memory address spaces in the secure domain
and the normal domain. The same virtual memory address in
two domains will be mapped to different physical memory
addresses. TrustZone allows the secure domain to access the
virtual memory address space in the normal domain, but not
vice versa. Note that the virtual MMU mechanism can only
guarantee the isolation of virtual memory spaces, but not
the physical memory spaces. TrustZone includes a TrustZone
Address Space Controller (TZASC) to partition DRAM into
secure or non-secure memory regions. The normal domain can-
not access the physical memory regions assigned to the secure
domain. TZASC is accessed through Watermark technique on
Freescale’s i.MX53 QSB.
i.MX53 QSB provides two Watermark regions for each
external DDR memory. One of the Watermark regions is con-
ﬁgured to only allow access from the secure domain. The other
one is accessible only from the supervisor mode no matter what
domain it is in. A Watermark region must be continuous and its
size can be conﬁgured by setting the Watermark Start ADDR
Register and the Watermark End ADDR Register. Moreover,
the size of the region cannot exceed 256 M B. With the
watermark mechanism, a complete runtime isolation can be
implemented between the secure and normal domains.
C.
I/O Device Isolation
Hardware Interrupt Isolation. The TrustZone Aware In-
terrupt Controller (TZIC) is a TrustZone-enabled interrupt
controller on i.MX53 QSB, which allows a ﬁne-grained and
independent control over each interrupt connected to the
controller. There are two types of hardware interrupts: IRQ
(interrupt request) and FIQ (fast interrupt request). An interrupt
can be set as either secure or non-secure in the TZIC, and a
secure interrupt can only be conﬁgured by the secure domain
while a normal interrupt can be conﬁgured by both domains.
The secure interrupt can assert FIQ or IRQ while the non-
secure interrupt can only assert IRQ. The CPU is responsible
for identifying and redirecting the interrupts to the correct
domain.
DMA Isolation. Certain I/O devices, such as touchscreen
controller and storage controller, can transfer data to and from
memory using Direct Memory Access (DMA). A TrustZone-
aware DMA controller (DMAC) supports concurrent secure
and normal DMA accesses, each with independent interrupt
events. The DMAC can prevent a peripheral assigned to the
normal domain from performing a DMA transaction on the
memory regions of the secure domain.
III. THREAT MODEL AND ASSUMPTIONS
We trust
the code in the Boot ROM and the domain
controller in the secure domain. An adversary is able to
exploit software vulnerabilities to compromise the Rich OS
and then launch attacks to compromise the code and data
in ICEs. Moreover, we assume the secure code may have