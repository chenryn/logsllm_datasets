           """Re-Analyze a function at a given address
           Arguments:
               addr {addr} -- an address of a function to be re-analyze
           """
           # Seek to the function's start
           self.pipe.cmd("s $F")
           # Undefine the function in this address
           self.pipe.cmd("af- $")
           # Define and analyze a function in this address
           self.pipe.cmd("afr @ $")
最后， `clean_junk_blocks()`函数现在可以使用了。 我们现在还可以创建一个函数`clean_graph()`
，它可以清除后门的混淆函数。
     def clean_junk_blocks(self):
           """Search a given function for junk blocks, remove them and fix the flow.
           """
           # Get all the basic blocks of the function
           blocks = self.pipe.cmdj("afbj @ $F")
           if not blocks:
               print("[X] No blocks found. Is it a function?")
               return
           # Have we modified any instruction in the function?
           # If so, a reanalyze of the function is required
           modified = False
           # Iterate over all the basic blocks of the function
           for block in blocks:
               fail_block = self.get_fail_block(block)
               # Make validation checks
               if not fail_block or 
               not self.is_successive_fail(block, fail_block) or 
               self.contains_meaningful_instructions(fail_block) or 
               not self.is_opposite_conditional(self.get_last_mnem_of_block(block), self.get_last_mnem_of_block(fail_block)):
                   continue
               self.overwrite_instruction(self.get_block_end(block))
               modified = True
           if modified:
               self.reanalize_function()
       def clean_graph(self):
           """the initial function of the class. Responsible to enable cache and start the cleaning
           """
           # Enable cache writing mode. changes will only take place in the session and
           # will not override the binary
           self.pipe.cmd("e io.cache=true")
           self.clean_junk_blocks()
核心类到此结束。
**Cutter 还是Radare2？**
如前所述，我们的代码将作为Cutter的插件执行，或者直接作为Python脚本从radare2 CLI执行。
这意味着我们需要有一种方法来了解我们的代码是从Cutter还是从radare2执行的。 为此，我们可以使用以下简单技巧。
    # Check if we're running from cutter
    try:
       import cutter
       from PySide2.QtWidgets import QAction
       pipe = cutter
       cutter_available = True
    # If no, assume running from radare2
    except:
       import r2pipe
       pipe = r2pipe.open()
       cutter_available = False
上面的代码检查是否可以导入`cutter`库。 如果可以，我们从Cutter内部运行，可以安全地做一些GUI操作。
否则，我们从radare2内部运行，因此我们选择导入`r2pipe` 。
在这两个语句中，我们分配了一个名为`pipe`的变量，该变量稍后将传递给我们创建的`GraphDeobfuscator`类。
**从Radare2运行**
这是使用此插件的最简单方法。 检查`__name__`等于“ **main** ”是一种常见的Python习惯用法，用于检查脚本是直接运行还是导入。
如果直接运行此脚本，我们只需执行`clean_graph()`函数。
    if __name__ == "__main__":
       graph_deobfuscator = GraphDeobfuscator(pipe)
       graph_deobfuscator.clean_graph()
**从Cutter运行**
首先，我们需要确保我们从Cutter内部运行。 我们已经创建了一个名为`cutter_variable`的布尔变量。
我们只需要检查此变量是否设置为`True` 。 如果是，我们继续定义我们的插件类。
    if cutter_available:
       # This part will be executed only if Cutter is available.
       # This will create the cutter plugin and UI objects for the plugin
       class GraphDeobfuscatorCutter(cutter.CutterPlugin):
           name = "APT32 Graph Deobfuscator"
           description = "Graph Deobfuscator for APT32 Samples"
           version = "1.0"
           author = "Itay Cohen (@Megabeets_)"
           def setupPlugin(self):
               pass
           def setupInterface(self, main):
               pass
       def create_cutter_plugin():
           return GraphDeobfuscatorCutter()
这是Cutter插件的框架- 它根本不包含任何适当的功能。 Cutter在加载时调用`create_cutter_plugin()`函数。
此时，如果我们将脚本放在Cutter的插件目录中，Cutter会将我们的文件识别为插件。
为了使插件执行我们的功能，我们需要添加一个菜单条目，用户可以按下该条目来触发我们的反混淆器。 我们选择将菜单条目或操作添加到“ **Windows –
>插件** ”菜单中。
    if cutter_available:
       # This part will be executed only if Cutter is available. This will
       # create the cutter plugin and UI objects for the plugin
       class GraphDeobfuscatorCutter(cutter.CutterPlugin):
           name = "APT32 Graph Deobfuscator"
           description = "Graph Deobfuscator for APT32 Samples"
           version = "1.0"
           author = "Megabeets"
           def setupPlugin(self):
               pass
           def setupInterface(self, main):
               # Create a new action (menu item)
               action = QAction("APT32 Graph Deobfuscator", main)
               action.setCheckable(False)
               # Connect the action to a function - cleaner.
               # A click on this action will trigger the function
               action.triggered.connect(self.cleaner)
               # Add the action to the "Windows -> Plugins" menu
               pluginsMenu = main.getMenuByType(main.MenuType.Plugins)
               pluginsMenu.addAction(action)
           def cleaner(self):
               graph_deobfuscator = GraphDeobfuscator(pipe)
               graph_deobfuscator.clean_graph()
               cutter.refresh()
       def create_cutter_plugin():
           return GraphDeobfuscatorCutter()
该脚本现已准备就绪，可以放在Cutter插件目录下的Python文件夹中。 目录的路径显示在“ **编辑 – >首选项 – >插件**
”下的“插件选项”中。 例如，在我们的机器上，路径是：“ _〜/ .local / share / RadareOrg / Cutter / Plugins
/ Python_ ”。
现在，在打开Cutter时，我们可以在“ **插件 – >首选项** ”中看到该插件确实已加载。
[](https://research.checkpoint.com/wp-content/uploads/2019/04/5-plugin-loaded.png)
**图5：** 插件已成功加载
我们还可以查看“ **Windows – >插件** ”菜单，看看我们创建的菜单项是否存在。 事实上，我们可以看到“APT32 Graph
Deobfuscator”项目现在出现在菜单中。
[](https://research.checkpoint.com/wp-content/uploads/2019/04/6-menu-item-added.png)
**图6：** 我们创建的菜单项已成功添加
我们现在可以选择一些我们怀疑包含垃圾块的函数，并尝试测试我们的插件。 在这个例子中，我们选择了函数`fcn.00acc7e0` 。
转到Cutter中的功能可以通过从左侧菜单中选择，或者只需按“g”并在导航栏中键入其名称或地址即可。
确保您在图表视图中，并随意四处浏览，试图发现垃圾块。 我们在下图中突出显示了它们，其中显示了Graph Overview（迷你图）窗口。
[](https://research.checkpoint.com/wp-content/uploads/2019/04/7-junk-blocks-in-function.png)
**图7：** `fcn.00acc7e0` 突出显示的垃圾块
当遇到候选可疑函数，我们可以触发我们的插件并查看它是否成功删除它们。 为此，请单击“ **Windows – >插件 – > APT32图形反混淆器**
”。 一秒钟后，我们可以看到我们的插件成功删除了垃圾块。
[](https://research.checkpoint.com/wp-content/uploads/2019/04/8-removed-junk-blocks-in-function.png)
**图8：** 删除垃圾块后的相同功能
在下图中，您可以在删除垃圾块前后看到更多对函数。
[](https://research.checkpoint.com/wp-content/uploads/2019/04/9-junk-blocks-in-fcn.00aa07b0.png)
**图9：** fcn.00aa07b0之前和之后
[](https://research.checkpoint.com/wp-content/uploads/2019/04/10-junk-blocks-in-fcn.00a8a1a0-.png)
**图10：** fcn.00a8a1a0之前和之后
## 最后的话
Ocean Lotus的混淆技术绝不是最复杂或最难以击败的。
在本文中，我们了解了问题，起草了一个解决方案，最后使用Cutter和Radare2的python脚本功能实现了它。
完整的脚本可以在[GitHub](https://github.com/CheckPointSW/Cyber-Research/blob/master/Malware/APT32/APT32GraphDeobfuscator.py)上找到，也可以附在本文的底部。
如果您有兴趣阅读有关Ocean Lotus的更多信息，我们推荐ESET的Romain
Dumont发布的[这篇](https://www.welivesecurity.com/wp-content/uploads/2018/03/ESET_OceanLotus.pdf) 。 它包含对Ocean
Lotus工具的全面分析，以及对所涉及的混淆技术的一些阐述。
## 附录
**示例程序SHA-256值**
  * Be6d5973452248cb18949711645990b6a56e7442dc30cc48a607a2afe7d8ec66
  * 8d74d544396b57e6faa4f8fdf96a1a5e30b196d56c15f7cf05767a406708a6b2 **APT32函数图反混淆器 – 完整代码**
    """ A plugin for Cutter and Radare2 to deobfuscate APT32 flow graphs
    This is a python plugin for Cutter that is compatible as an r2pipe script for
    radare2 as well. The plugin will help reverse engineers to deobfuscate and remove
    junk blocks from APT32 (Ocean Lotus) samples.
    """
    __author__  = "Itay Cohen, aka @megabeets_"
    __company__ = "Check Point Software Technologies Ltd"
    # Check if we're running from cutter
    try:
        import cutter
        from PySide2.QtWidgets import QAction
        pipe = cutter
        cutter_available = True
    # If no, assume running from radare2
    except:
        import r2pipe
        pipe = r2pipe.open()
        cutter_available = False
    class GraphDeobfuscator:
        # A list of pairs of opposite conditional jumps
        jmp_pairs = [
            ['jno', 'jo'],
            ['jnp', 'jp'],
            ['jb',    'jnb'],
            ['jl',    'jnl'],
            ['je',    'jne'],
            ['jns', 'js'],
            ['jnz', 'jz'],
            ['jc',    'jnc'],
            ['ja', 'jbe'],
            ['jae', 'jb'],
            ['je',    'jnz'],
            ['jg',  'jle'],
            ['jge', 'jl'],
            ['jpe', 'jpo'],
            ['jne', 'jz']]
        def __init__(self, pipe, verbose=False):
            """an initialization function for the class