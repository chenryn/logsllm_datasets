design,  and  Computing  Science  for  the  design  of 
software.    My  own  specialism  within  Computing 
Science  is  the  theory  of  programming.  The  subject 
matter  is  computer  programs  rather  than  airplanes  or 
ships;  but  our  research  addresses  the  same  basic 
questions, for example: What does it do? How does it 
work?    Why  does  it  work?  How  do  we  know?    The 
answers  are  as  follows.  It  is  the  specification  that 
describes  what  a  program  does.  It  is  the  architecture 
and internal interfaces that describes how the program 
works.  It is the theory of programming that explains 
why it works.  And it is mathematics that increases our 
confidence  that  the  answers  to  all  the  previous 
questions are consistent, in that the program meets its 
specification. 
consistency 
science.  We  construct 
is 
I  like  to  classify  myself  among  the  engineering 
scientists, albeit at the pure end, in the area of software 
engineering. Like other scientists, we pursue an ideal, 
that  of  program  correctness,  far  beyond  what  is  now 
achievable, and even beyond what the current market 
requires. Furthermore, we use the standard methods of 
theories  whose 
modern 
soundness 
established  by 
mathematical proof. We conduct experiments into the 
applicability  of  the  theory  to  explain  the  working  of 
real  programs.  We  develop  the  scientific  toolsets, 
based  on  scientific  theory,  to  assist  in  the  conduct  of 
the experiments and in the analysis of the results. We 
search  for  sound  interfaces  between  compatible  tools 
used  in  different  stages  of  the  programming  project; 
and  we  seek  unifying  theories  to  explain  and  justify 
their  interworking.  Above  all,  we  aim  at  the  highest 
standards of conviction for the answer to the question 
that  of 
‘How  do  we  know?’.  Our  standard 
and 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007mathematical  proof,  generated  or  at  least  checked  by 
computer. 
As  in  other  areas  of  scientific  instrumentation,  the 
early tools are quite crude.  However, they are subject 
to  continuous  improvement  in  the  light  of  experience 
of  their  use.  When  the  tools  have  been  thoroughly 
evaluated  and  evolved  by  wide-ranging  scientific 
experiment,  they  provide  the  means  by  which  the 
results  of  the  research  are  conveyed  to  the  practicing 
software  engineer.  We  look  forward  to  the  day  when 
wide  adoption  of  programming  support  tools  will 
finally  bring  under  control  the  problems  and  costs 
associated  with  software  error.  And  as  scientists,  we 
accept  that  this  benefit  may  be  enjoyed  only  by 
posterity. 
4. The scientific engineer  
The  defining  characteristic  of  a  scientific  engineer 
is  that  she  conducts  engineering  research  to  reduce 
costs  and  increase  effectiveness  of  future engineering 
projects. She takes past (or even current) engineering 
projects  as  her  source  material,  and  shows  how  the 
lessons of earlier success or failure can be generalized 
for  wider  exploitation  in  projects  of  a  similar  kind.   
Her  conclusions  and  recommendations  may  be  put  to 
the  test  in  scientific  experiments  and  even  pilot 
engineering  projects  conducted  by  a  scientific 
engineering team. They are pilot projects, because they 
attempt  to  preserve  sufficient  generality  that  the 
findings  of  the  research  can  apply  to  many  similar 
projects in the future. The need to satisfy a real client 
on  the  current  project  must  not  divert  her  attention 
from this broader goal. The results of her research may 
be  delivered  to  the  general  engineering  profession  in 
the form of engineering handbooks, together with tools 
and standards for their use. 
those 
Software engineering certainly provides ample case 
material  for  this  research,  including  projects  that 
that  fail.  Particularly 
succeed  as  well  as 
involve  human 
significant  are  projects  which 
collaboration  within  existing  organizations 
like 
hospitals, and interactions with the general public, like 
the issue of passports.  In both cases, the research must 
be based on an understanding of the full circumstances 
of 
technical, 
financial, social and political concerns. Very often the 
investigation  of  a  project  will 
reverse 
engineering 
to  discover  and  document  missing 
specifications and missing statements of requirements.  
The  conclusions  from  the  research  can  usefully 
delivered  in  the  form  a  rational  reconstruction  of  the 
history of the project, or probably an idealized version 
the  project  under  study, 
including 
require 
of it. This will include an explanation of the necessary 
design  decisions,  the  order  in  which  they  have  been 
taken  (or  should  have  been),  and  the  appropriate 
arguments to justify them. 
But  more  is  needed.    The  results  of  the  research 
must  be  abstracted  and  generalized  to  cover  a  whole 
range  of  future  possible  implementation  projects  in 
related application areas. The results must be presented 
in the form of an engineering handbook, with a clear 
structure  to  assist  in  selection  and  adaptation  to  new 
circumstances.  Generalisation  and  abstraction  are  the 
essential attributes of scientific research, and they are 
equally  essential  to  wide-spread  application  of  its 
results. 
link  – 
in 
link  –  between 
The  term  ‘Domain  Model’  can  be  applied  to  the 
document that conveys the result of this research to the 
practicing engineer. I suggest that domain models are 
the  crucial  missing 
fact  a  direct 
communication 
the  engineering 
scientist  working  in  the  area  of  program  correctness, 
and  the  scientific  engineer  working  in  the  area  of 
dependability,  as  interpreted  in  the  widest  sense.  A 
domain model encapsulates the results of dependability 
research,  and  it  is  the  starting  point  for  a  design 
process  that  leads  to  software  that  is  correct  by 
construction.  It is the keystone in the bridge between 
research  in  dependability  and  research  in  program 
correctness.  The results of both can then pass together 
into general software engineering application. 
5. Domain modeling  
A  domain  model  is  nothing  but  a  generalized 
software  engineering  project  proposal.  It  is  a  pattern 
which  can  be  used  to  guide  the  formulation  of  many 
differing  project  proposals  in  some  useful  area  of 
computer  application.  So  I  start  with  an  idealized 
account of what a good project proposal should be.  
and 
timescales. 
It  describes 
It is written in natural language. It describes the real 
world.  It  concentrates  on  the  environment in which a 
new or improved computer system will operate. It lists 
the  external  environmental  constraints  on  the  system, 
including  constraints  of  material  and  technology  and 
costs  and 
the  human 
expectations, 
environment, 
likely 
idiosyncrasies,  and  prejudices  of 
the  eventual 
beneficiaries  of  the  product.  It  makes  explicit  the 
potential  conflicts  in  the  expectations,  and  suggests 
priorities  that  will  help  to  resolve  them.  Where 
uncertainties  exist  at  the  beginning  of  the  project,  it 
details how they will be resolved by experiment as the 
project progresses.  It describes how evidence will be 
collected  of  the  dependability  of  the  system  and  its 
the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007fitness for purpose. It describes the ways in which the 
real  world  will  be  changed  by  the  delivery  and 
installation  of  a  software  product.    It  distinguishes 
changes  that  are  necessary  before  installation,  from 
those which will be left for subsequent enhancements.  
It charts, in increasingly vague and general terms, the 
evolution of the system into the foreseeable future.  All 
these  descriptions  are  illustrated  by  specific  example 
scenarios  (known  as  use  cases),  and  formalized  in 
mathematical models as far as appropriate. 
The  model  may  be  described  by  mathematical 
formulae,  often  with  the  aid  of  diagrams.    Each 
formula is preceded by informal prose, explaining the 
meaning of each of its free variables in terms of what 
they  stand  for  in  the  real  world.    Each  formula  is 
accompanied  by  further  informal  prose  to  give  a 
convincing  explanation  of  its  relevance  and  accuracy 
and  adequacy 
informal 
explanation  is  the  only  way  of  bridging  the  gap 
between the real world and the very first formulae that 
describe it. 
to  purpose.  Convincing 
The  formulae  make  several  contributions  to  the 
quality of the presentation, and of the eventual product.  
Their  first  is  an  increase  in  precision  to  cover  all  the 
corner  cases  that  would  be  tedious  to  enumerate  in 
natural  language.  The  second  is  the  specification  of 
important  and  testable  properties  of  the  interface 
between the real world and the computer system.  The 
third is an increase in confidence that essential features 
of the product have not been inadvertently missed.  But 
the main benefit of the formulae will be that they can 
be  taken  as  input  by  tools  that  assist  throughout  the 
implementation and evolution of the product. 
The assistance can begin even during the drafting of 
the project proposal. For example, a modern proof tool 
can test the mutual consistency of the whole collection 
of formulae, and so reduce the risk of late discovery of 
feature interactions. Another tool could help to explore 
the  consequences  of  the  formulae,  and  check  them 
against  intuitive  expectations.  Finally,  the  formulae 
can  be  passed  to  the  implementation  team,  who  use 
them as the starting point of a design process for code 
that  is  correct  by  construction.  Some  of  the  formulae 
may be fed to specialized code generators, to generate 
parts  of  the  program  automatically.    Other  formulae 
may be fed to test harnesses or to test case generators, 
or  to  program  verification  tools,  to  check  correctness 
of  hand-written  code.  In  the  case  of  a  full  functional 
specification, a verification tool can generate or check 
a mathematical proof of correctness, giving the highest 
possible  degree of assurance, often with reduced cost 
of test. 
6. Conclusion 
A  domain  model  is  very  similar  to  a  project 
proposal,  except  that  it  covers  a  whole  family  of 
possible  proposals  in  a  given  area  of  application.  
Where  a  project  proposal  describes  a 
single 
environment,  a  domain  model  describes  a  range  of 
environments,  and  advises  how  the  project  engineer 
should  choose  an  appropriate  model  for  particular 
circumstances.  Where a project proposal describes and 
justifies  a  single  design  decision,  the  domain  model 
lists a range of plausible decisions, and advises how to 
make a sensible choice between them.  Where a project 
proposal  gives  a  single  formula,  the  domain  model 
again  offers  a  choice  capable  of  meeting  a  variety  of 
needs  in  a  variety  of  circumstances.    It  is  a  major 
intellectual  challenge  to  structure  a  domain  model 
effectively,  so  that  most  of  the  useful  exposition  is 
independent  of  the  particular  choices  made;  and 
ideally, most of the choices can be made independently 
of each other.   
I  have  a  vision  of  the  day  in  which  software  is 
always  the  most  reliable  component  in  any  system 
which contains it; a day when software comes with a 
guarantee of serviceability and fitness for purpose; and 
a  day  when  computer  programmers  make  fewer 
mistakes than any other engineering profession. These 
related  visions  are  what  drive  researchers 
into 
dependability as well as program verification. We hope 
that  they  will  be  achieved  with  the  help  of  a 
comprehensive  software  engineering  toolset,  which 
supports a rigorous process of dependable and correct 
software construction, and which points out any error 
at  the  very  moment  that  it  is  made.  This  toolset  will 
exploit  ideas  of  logical  and  mathematical  proof  that 
have been part of the human cultural and philosophical 
heritage  for  thousands  of  years.  Those  who  share  the 
vision  have  recently  held  a  series  of  conferences  and 
workshops to discuss a major long-term collaboration 
towards  its  realization.  The  title  of  our  project  is 
‘Verified  Software:  Theory,  Tools  and  Experiments’; 
please visit its website http://vstte.ethz.ch . 
Hitherto,  there  have  been  two  major  barriers  to 
progress.    The  first  is  the  weakness  of  available 
computerized  proof  engines.    This  problem  is  being 
solved  by  a  combination  of  increases  in  the  capacity 
and  speed  of  computers  and 
the 
performance  of  the  algorithms  central  to  proof.    In 
combination,  these  have  made  proof  technology  a 
thousand  times  faster  than  it  was  ten  years  ago.    We 
are  currently  at  a  tipping  point,  where  it is actually  
increases 
in 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007embarking  on  a  new one.  The  collection will serve  
as an existence proof of the value of a partial or total 
formalization  of  the  requirements  to  be  met  by  a 
computer  system. 
  And  finally,  the  constituent 
formulae of a domain model can be copied directly or 
adapted  for  use  in  new  projects  by  engineers  more 
adept at reading formulae than at writing them.  This 
will  break  through  the  current  high  barriers  to  the 
exploitation of formalism by software engineers.  But 
first 
to 
communication  and  collaboration  between  those 
engaged in the scientific and the engineering ends of 
our  spectrum,  between  dependability  engineers 
producing  domain models and verification scientists 
who  exploit  them  to  certify  the  correctness  of  their 
implementation.  We  hope  for  collusion  of  cultures, 
not a collision. 
let  us  break 
the  barriers 
through 
easier  to  use  a  proof  tool  than  not  to.  When  a 
significant scientific community is actually using the 
tools, progress is likely accelerate. 
But  the  second  weakness  remains.    It  lies  at  the 
critical  point  of  the  whole  endeavour:  the  very  first 
capture  of  the  properties  of  the  real  world,  of  its 
inhabitants,  and  of  the  expectations  they  have  of  a 
new  or  improved  computer  system.  If  we  get  those 
wrong, none of our software will be dependable, and 
none  of  the  verification  tools  will  even  detect  the 
fact.    That  is  why  domain  models  must  make  a 
decisive  contribution  to  the  success  of  the  Verified 
Software initiative, and the application of its results. 
A  representative  collection  of  realistic  domain 
models  would  be  directly  useful  even  now  in 
conveying  knowledge  and  experience  from  past 
software   engineering   projects   to   those   who  are  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007