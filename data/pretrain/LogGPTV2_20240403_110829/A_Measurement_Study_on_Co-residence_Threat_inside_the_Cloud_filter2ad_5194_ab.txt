Since zone us-east-1c is no longer hosting t1, m1, c1,
and m3 instances, our measurement is performed in zone
us-east-1a, us-east-1b, and us-east-1d. We achieve co-
residence pairs with t1.micro, m1.small, m1.medium,
and m3.medium. We did not achieve co-residence with
large, xlarge or 2xlarge instances, because there are only
1 to 4 such large instances on one physical machine and
it will be very difﬁcult and costly to achieve co-residence
with these types. Overall, we conduct 12 sets of experi-
ments, with each set targeting a speciﬁc type of instances
in a speciﬁc availability zone.
In each set of experiments, we perform rounds of
co-residence probing until we ﬁnd a co-residence pair.
932  24th USENIX Security Symposium 
USENIX Association
4
400
300
200
100
d
e
h
c
n
u
a
L
s
e
c
n
a
t
s
n
I
0
m3.medium
m1.medium
m1.small
t1.micro
us−east−1a
us−east−1b
us−east−1d
Availability Zone
)
$
(
t
s
o
C
30
20
10
0
m3.medium
m1.medium
m1.small
t1.micro
)
s
e
t
u
n
m
i
(
n
e
k
a
T
e
m
T
i
us−east−1a
us−east−1b
us−east−1d
Availability Zone
200
150
100
50
0
m3.medium
m1.medium
m1.small
t1.micro
us−east−1a
us−east−1b
us−east−1d
Availability Zone
Figure 3: The service hour spent, i.e., the
number of instances booted to achieve co-
residence.
Figure 4: The ﬁnancial cost (in US dollar) to
achieve co-residence.
Figure 5: The time spent to achieve co-
residence.
For the sake of robustness, EC2 has never placed in-
stances from the same user on the same physical ma-
chine [14]. Therefore, we set up two accounts to launch
instances simultaneously. Within one round, each ac-
count launches 20 instances, which will produce 400
pairs of co-residence candidates. Once a co-residence
pair is veriﬁed, this set of experiments are terminated
and the corresponding cost is recorded. If there is no co-
residence pair found in this round, we move on to the next
round by terminating all running instances and launching
another 20 instances in each account, and then repeat the
same procedure.
Given a pair of instances, verifying whether they are
located on the same physical machine involves two steps:
(1) pre-ﬁltering unlikely pairs and (2) using a covert
channel to justify co-residence.
For the ﬁrst step, we need to screen out those pairs that
are not likely to be co-resident to reduce probing space.
Since the private IP address of an instance can indicate
its physical location to some extent, and if the private
IP addresses of two instances are not close enough, the
two instances will have little chance to be co-resident.
Based on this heuristic, we use the share of /24 preﬁx
as the prerequisite of co-residence, i.e., if two instances
do not share the /24 preﬁx, we consider them as not be-
ing co-resident and bypass the highly costly step 2. The
rationale of setting the /24 preﬁx sharing as pre-ﬁlter is
twofold:
1. First, the prerequisite of the /24 preﬁx sharing will
not likely rule out any co-residence instance pairs.
The number of instances that are hosted on the same
physical machine is limited. Even for micro in-
stances, there are no more than 32 instances run-
ning on a physical machine. For the instance type
with larger size, there are even fewer instances run-
ning on a physical machine.
In contrast, a /24
address space can contain 256 instances. There-
fore, two co-resident instances are unlikely to be
in different /24 subnets. Moreover, we obtained
some co-residence pairs without any pre-ﬁltering
and recorded the private IP address distance be-
tween a pair of co-residence instances. Figure 2
illustrates the CDF of IP address distance between
two co-residence instances. The distance is calcu-
lated as the difference between the two 32-bit inte-
gers of the two IP addresses. From the results we
can ﬁgure out that most of these co-residence in-
stances share the /27 preﬁx, which further conﬁrms
that the /24 preﬁx ﬁltering will introduce very few,
if any, false negatives.
2. Second, the prerequisite of sharing the /24 preﬁx
can effectively narrow down the candidate space.
Each time we use one account to launch 20 instances
and use another account to launch another 20 in-
stances, we will have 400 candidate pairs. Dur-
ing our measurement, we generated more than 40
rounds of such 400-pair batches. The average num-
ber of instance pairs that share the /24 preﬁx among
400 candidates is only 4. This means the /24 preﬁx
sharing prerequisite can help us to screen out 99% of
the candidates, which signiﬁcantly accelerates the
process of co-residence veriﬁcation. During the 40
rounds of measurement, ﬁve co-residence pairs are
observed.
The second step is to use a covert channel to ver-
ify whether two instances are actually located on the
same physical machine. We use the technique intro-
duced by Wu et al. [19] to construct a memory-bus-based
covert channel between two instances.
If the two in-
stances can communicate with each other via the covert
channel, then they are located on the same physical ma-
chine. This covert-channel-based veriﬁcation can guar-
antee zero false positives.
The cost of achieving co-residence includes ﬁnancial
cost and time. According to the pay-as-you-go billing
system, the ﬁnancial cost is mainly determined by the
service hours consumed during the co-residence prob-
ing. Every time an instance is launched, one billing
hour is charged. Thus, the more probing instances an
attacker needs to launch, the higher ﬁnancial cost it will
cause.
In our experiments, we use only two accounts.
In a real world attack, an attacker could use more ac-
counts to launch the attack in parallel, which will result in
less time required to achieve co-residence. However, un-
der the same condition, regardless of attack process op-
USENIX Association  
24th USENIX Security Symposium  933
5
d
e
h
c
n
u
a
L
s
e
c
n
a
t
s
n
I
600
500
400
300
200
100
0
t1.micro
m1.small m1.medium m3.medium
Instance Type
)
$
(
t
s
o
C
50
40
30
20
10
0
t1.micro
m1.small m1.medium m3.medium
Instance Type
t
)
s
e
u
n
m
(
n
e
k
a
T
e
m
T
i
i
150
100
50
0
t1.micro
m1.small m1.medium m3.medium
Instance Type
Figure 6: The service hour spent, i.e. the num-
ber of instances booted to achieve co-residence
with a target.
Figure 7: The ﬁnancial cost (in US dollar) to
achieve co-residence with a target.
Figure 8: The time spent
residence with a target.
to achieve co-
timization, the time spent to achieve co-residence should
have a positive correlation with the number of instances
to launch, i.e., the more instances need to launch, the
more time spent for detecting co-residence.
Figure 3 illustrates how many instances are required
to achieve co-residence, while Figure 4 illustrates the
actual ﬁnancial cost. Figure 5 illustrates how much time
it takes to achieve co-residence, i.e., the time cost. For
each type of instance, the measurement repeats for ﬁve
times and the mean value is shown in the ﬁgures. From
the ﬁgures, it is evident that the cost for achieving co-
residence of different types in different availability zones
is quite different.
Intuitively, as a larger instance has
higher resource charge, it costs more money to achieve
co-residence with those instances at a larger size. How-
ever, there is no such rule that the smaller size an instance
is, the lower time cost we need to pay for co-residence.
4.2.2 Target co-residence
In the quantiﬁcation of achieving co-residence with a par-
ticular target, we ﬁrst randomly launched one instance
with speciﬁc type from one account as the target. Then,
from the other account, we also performed many rounds
of co-residence probing until we found the instance that
is co-resident with the target. The process of verifying
co-residence remains the same. As demonstrated by the
veriﬁcation results of random co-residence above, differ-
ent availability zones do not greatly impact the difﬁculty
of achieving co-residence. Here we only show the results
when our target instances are placed in zone us-east-1a.
Figures 6, 7 and 8 illustrate the number of instances to
launch, the ﬁnancial cost, and the time taken to achieve
co-residence with a particular target, respectively. For
each type of instance, the measurement is repeated for
15 times and the mean value is illustrated. The error bar
with standard deviation is also shown in the ﬁgures. As
is intuitive, achieving co-residence with a particular tar-
get requires launching more instances than achieving ran-
dom co-residence. Getting a random co-residence pair
requires launching 200 to 300 instances with two ac-
counts (i.e., 100 to 150 instances per account), which
can be done in 5 to 8 rounds.
In contrast, achieving
co-residence with a particular target requires launching