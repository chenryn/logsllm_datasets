ComZK
The method calls are simulated as follows:
to generate
a commitment [𝑟] of the form 𝑀[𝑟] = Δ · ˆ𝑟 + 𝐾[𝑟]. Since, P∗ is
corrupted, it is allowed to choose its outputs ˆ𝑟, 𝑀[𝑟] ∈ Z2𝑘+𝑠 . S
sends (Random) on behalf of P∗ to F Z2𝑘
and chooses 𝑟 := ˆ𝑟 mod
2𝑘 as value of the commitment. Hence, P∗ receives ˆ𝑟, 𝑀[𝑟] ∈𝑅
For Random, the parties call the Expand of F 𝑠,𝑘+𝑠
ComZK
vole2k
vole2k
vole2k
ComZK
ComZK
-hybrid model). And S
Z2𝑘+𝑠 as in the real protocol (in the F 𝑠,𝑘+𝑠
keeps track of all the commitments generated.
Affine is purely local, so there is no interaction to be simulated.
S instructs the ideal functionality to perform the corresponding
operations and computes the resulting commitments.
For CheckZero, S first simulates the calls to Random, and runs
the protocol with the simulated parties. Then it sends the CheckZero
. If the simulated verifier aborts, then S sends
message to F Z2𝑘
(abort) to F Z2𝑘
, which results in the ideal verifier aborting. To
show that the verifier’s output is indistinguishable between the real
execution and the simulation we combine the following two facts:
1. If the verifier aborts in the real execution, then it does the same
in the simulation. This holds by definition of the simulation. 2. If
the verifier outputs (success) in the real execution, then it does
the same in the simulation except with probability at most 𝜀cz (de-
fined in Lemma 5.2). We show the contraposition, i.e. if the verifier
aborts in the simulation, then it does the same in the real execution
except with the given probability. By definition of F Z2𝑘
, the
premise hold if one of the input commitments contains a non-zero
value. Thus, we can apply Lemma 5.2, which gives us the desired
consequence.
For Input, the parties first invoke Random to obtain a commit-
ment [𝑟], so S simulates this (see above). Input is the only method,
where the prover has a private input. The simulator can extract it
from P∗’s message 𝛿 ∈ Z2𝑘 by computing 𝑥 ← 𝛿 + 𝑟 (it knows 𝑟
because it simulates the F 𝑠,𝑘+𝑠
functionality). Then S can send
(Input, 𝑥) on behalf of the corrupted prover to the ideal functional-
ity F Z2𝑘
. For correctness, note that a commitment [𝑟] + (𝑥 − 𝑟)
contains the value 𝑥 iff. [𝑟] is a commitment to 𝑟.
Since Open is implemented in terms of Affine and CheckZero,
and we have that a commitment [𝑥] contains a value 𝑥 iff. [𝑥] − 𝑥
is a commitment to 0. We can simulate the methods as describe
above. Hence, the simulation of Open fails exactly if the simulation
of CheckZero fails.
CheckMult is simulated in the same way as CheckZero. Here,
we apply Lemma 5.3, and get that the output of V is the same in
the simulation and in the real execution except with probability at
most 𝜀cz + 𝜀cm.
This concludes the proof for the case of a corrupted prover. As
shown above, we can simulate its view perfectly for all methods.
Overall, by the union bound, the environment has an distinguishing
ComZK
ComZK
vole2k
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea208advantage of
(𝑞cz + 𝑞cm) · 𝜀cz + 𝑞𝑚 · 𝜀cm.
.
vole2k
ComZK
Malicious Verifier. The setup of the simulation in case of a cor-
rupted verifier V∗ is similar as before. S sends (corrupted,V) to
the ideal functionality F Z2𝑘
. It creates copies of the prover P and
verifier V∗. The prover is run according to the protocol, whereas
the environment controls the verifier. For this, S simulates the
functionality of F 𝑠,𝑘+𝑠
with corrupted V. For all methods, since
V does not have any private inputs no input extraction is neces-
sary. So the simulator can just send the corresponding message on
behalf of the verifier to F Z2𝑘
. The method calls are simulated as
follows:
During initialization, S allows V∗ to choose its MAC key Δ with
the simulated F 𝑠,𝑘+𝑠
For Random, the parties call the Expand of F 𝑠,𝑘+𝑠
to generate
a commitment [𝑟] of the form 𝑀[𝑟] = Δ · ˆ𝑟 + 𝐾[𝑟] where V∗ can
choose 𝐾[𝑟]. S sends (Random) on behalf of V∗ to F Z2𝑘
As before, Affine is purely local, so there is no interaction to be
simulated. S instructs the ideal functionality to perform the corre-
sponding operations and computes the resulting commitments.
functionality.
ComZK
ComZK
vole2k
vole2k
ComZK
ComZK
ComZK
For CheckZero, S sends the respective message to F Z2𝑘
. If it
aborts, then S instructs the simulated P to also abort by sending
(abort) to the simulated V, which finishes the simulation. Other-
wise, S simulates the normal protocol execution: It first simulates
the calls to Random. Since F Z2𝑘
did not abort, we know that 𝑥1 =
· · · = 𝑥𝑛 = 0. We also know Δ, 𝐾[𝑥1], . . . , 𝐾[𝑥𝑛], 𝐾[𝑟1], . . . , 𝐾[𝑟𝑛],
so we can sample 𝑝1, . . . , 𝑝𝑛 ∈𝑅 Z2𝑠 and compute 𝑀[𝑦𝑖]′ ← Δ ·
2𝑘 · 𝑝𝑖 + 𝐾[𝑥𝑖] + 2𝑘 · 𝐾[𝑟𝑖] for 𝑖 = 1, . . . , 𝑛. Then, the 𝑝𝑖 and
ℎ := 𝐻(𝑀[𝑦1]′, . . . , 𝑀[𝑦𝑛]′) are as expected by the verifier.
For Input, S first simulates the call to Random as above, and
then sends a random value 𝛿 ∈𝑅 Z2𝑘 to the simulated verifier. Also,
S sends (Input) on behalf of V∗ to F Z2𝑘
For Open, S sends the Open on behalf of V∗ to F Z2𝑘
and
receives the committed values 𝑥1, . . . , 𝑥𝑛 ∈ Z2𝑘 as output. It sends
these values to the simulated verifier, and then simulates Affine and
CheckZero as above. So the view is distributed identically to the
real protocol.
For CheckMult, S sends the corresponding message on behalf of
the corrupted verifier to F Z2𝑘
. If it aborts, then S instructs the
simulated P to also abort by sending (abort) to the simulated V.
Otherwise, S simulates the complete protocol using the constant
value 0 for all of the prover’s commitments. Because the simulated
P behaves like an honest prover, it samples all multiplication triples
([𝑥𝑖], [𝑦𝑖], [𝑧𝑖])ℓ
𝑖=1 correctly. Since the view of the V is distributed
identically to the real execution and independent of the prover’s
real inputs: The opened triples in Step 6 are uniformly distributed,
valid multiplication triples. The values 𝑑, 𝑒 revealed in Step 8a are
distributed uniformly in Z2𝑘 , and the CheckZero passes since the
𝑤𝑘 are all 0.
This concludes the proof for the case of a corrupted verifier. As
shown above, we can simulate its view perfectly for all methods.
Overall, the environment has a distinguishing advantage as stated
in the theorem.
□
ComZK
ComZK
.
1 + 𝐾[𝑦1], . . . , Δ·2𝑘 · 𝑝′
E.2 Proof of Lemma 5.2
Proof of Lemma 5.2. Suppose P∗ and V run the protocol on
commitments [𝑥1], . . . , [𝑥𝑛], but (𝑥1, . . . , 𝑥𝑛) (cid:46)𝑘 (0, . . . , 0). Hence,
there is an index 𝑖∗ ∈ {1, . . . , 𝑛} with 𝑥𝑖∗ (cid:46)𝑘 0. Thus, also 𝑦𝑖∗ (cid:46)𝑘 0.
Write ˜𝑦𝑖∗ = 2𝑘·𝑝𝑖∗+𝛿 with 𝛿 ∈ Z2𝑘 \{0}. Let 𝑝′
𝑖 ∈ Z2𝑠 for 𝑖 = 1, . . . , 𝑛
denote the values sent by the prover instead of 𝑝1, . . . , 𝑝𝑛 and define
𝑎 := (Δ·2𝑘 · 𝑝′
𝑛 + 𝐾[𝑦𝑛]). Let ℎ = 𝐻(𝑎) be the
message an honest prover would send, and ℎ′ ∈ {0, 1}𝑠 the message
that P∗ actually sends. V outputs (success), if ℎ′ = ℎ holds. We
make a case distinction on how P∗ could produce such an ℎ′:
(1) First, P∗ could try to compute the message 𝑎 that V inputs
into 𝐻, and then compute ℎ′ := 𝐻(𝑎) = ℎ. To this end, given
𝑀[𝑦𝑖∗] = Δ · ˜𝑦𝑖∗ + 𝐾[𝑦𝑖∗], P∗ needs to come up with a value
𝑀[𝑦𝑖∗]′ = Δ · 2𝑘 · 𝑝′
𝑖∗ + 𝐾[𝑦𝑖∗]. Let 𝑣 ∈ N maximal such that
2𝑣 | 𝛿. By computing
𝑀[𝑦𝑖∗] − 𝑀[𝑦𝑖∗]′
(cid:32) 2𝑘 · (𝑝𝑖∗ − 𝑝′
(cid:33)−1
𝑖∗) + 𝛿
(mod 2𝑘+𝑠−𝑣),
Δ =
·
2𝑣
2𝑣
P∗ could recover Δ ∈ Z𝑠. Hence, this strategy is successful with
probability at most 2−𝑠.
(2) If P∗ is not able to compute 𝑎, then ℎ = 𝐻(𝑎) is uniformly
random from P∗’s view. So whatever message ℎ′ it sends, ℎ = ℎ′
holds with probability at most 2−𝑠.
By the union bound, P∗ can produce such an ℎ′ with probability
at most 2−𝑠+1.
□
E.3 Proof of Lemma 5.3
Proof of Lemma 5.3. Suppose P∗ and V run the CheckMult
protocol with inputs as described in the lemma.
If the proposed multiplication triples ([𝑥𝑖], [𝑦𝑖], [𝑧𝑖])ℓ
𝑖=1 are valid,
i.e. 𝑥𝑖 · 𝑦𝑖 = 𝑧𝑖 for 𝑖 = 1, . . . , ℓ, and all commitments are opened
to the correct values, then the values 𝑤𝑘 ≠ 0 for the invalid input
triples due to the correctness of Beaver multiplication [5]. So the
verifier outputs (failure).
Therefore, P∗ has two possible options: 1. It can try to cheat
during the CheckZero in Step 9 to reveal some different values
𝑑′, 𝑒′ ≠ 𝑑, 𝑒 or 𝑤𝑘 ≠ 0 in Step 8. This succeeds with probability
at most 𝜀cz (see Lemma 5.2). 2. It can choose to generate invalid
multiplication triples. This can only be successful, if no invalid
triples are detected in Step 7, and then invalid triples are paired up
with invalid inputs in the right way. Weng et al. [31] have formalized
this as a “balls and bins game”. According to Lemma 2 of [31], an
adversary wins this game with probability at most 𝜀cm =(cid:0)𝑛𝐵+𝐶
By the union bound, P∗ can make V output (success) with
□
(cid:1)−1.
𝐵
probability at most 𝜀cz + 𝜀cm.
E.4 Proof of Theorem 5.4
Z2𝑘
ComZK-b
Z2𝑘
ComZK-a
Proof of Theorem 5.4. Since most of Π
tical to Π
parts, and focus on the differences here.
is actually iden-
we will refer to the Proof of Theorem 5.1 for these
The subroutines CheckZero and CheckZero′ are only very slightly
modified from the CheckZero from Π
. The latter is exactly
the same as in before, but for the larger message space Z2𝑘+𝑠 , and
Z2𝑘
ComZK-a
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea209the former additionally hides some more bits. Hence, the same
Lemma 5.2 can be applied here.
The remaining part of the proofs considers the different imple-
mentation of CheckMult:
ComZK
Malicious Prover. The setup of the simulation is the same as in
the Proof of Theorem 5.1, i.e. S sends (corrupted, P) to the ideal
functionality F Z2𝑘
and simulates copies of prover and verifier.
For the method CheckMult, S can exactly simulate the protocol
since it knows all the commitments, and 𝜂 is sampled uniformly at
random from Z2𝑠 .
If the simulated verifier aborts, it sends (abort) to F Z2𝑘
. Thus,
if the verifier aborts in the real execution, then it does the same
in the simulation. On the other hand, if the verifier aborts in the
simulation, then by Lemma 5.5 it also aborts in the real protocol,
except with probability 𝜀cz + 𝜀′
cm.
ComZK
and simulates copies of prover and verifier.
Malicious Verifier. Again, we have the same setup as before,
i.e. the simulator sends (corrupted,V) to the ideal functionality
F Z2𝑘
ComZK
For CheckMult, we use the same strategy as in the Proof of
Theorem 5.1: S sends the corresponding message on behalf of
the corrupted verifier to F Z2𝑘
. If it aborts, then S instructs the
simulated P to also abort by sending (abort) to the simulated V.
Otherwise S simulates the complete protocol using the constant
value 0 for all of the prover’s commitments so that the verifier’s
view is the same as in the real execution.
Summarizing, we have shown that no environment can distin-
guish the simulation from a real execution of the protocol with
more than the stated advantage.
□
ComZK
E.5 Proof of Lemma 5.5