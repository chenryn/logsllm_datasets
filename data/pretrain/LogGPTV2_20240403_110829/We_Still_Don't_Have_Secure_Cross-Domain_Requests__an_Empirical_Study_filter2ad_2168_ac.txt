the browser separates the form data with “=” and joins it
with “&”, such as “name1 = value1&name2 = value2”;
for the second, the browser splits the form data with
“=” and joins it with CRLF; for the third, the browser
divides each instance of form data into different sec-
tions, each separated by a boundary string and a Content-
Disposition header like Content-Disposition: form-data;
name = “title”; ﬁlename = “myﬁle”.
CORS does not impose any format restrictions on re-
quest bodies. We tested ﬁve browsers and found that all
of them allow JavaScript to send cross-origin requests
with body data in any format. Such ﬂexibility in com-
posing request body can lead to new security problems.
Case Study: We show that an attacker can exploit a
ﬁle upload CSRF vulnerability which was previously un-
exploitable. In an HTML form, the “ﬁlename” attribute
of ﬁle select control cannot be controlled by JavaScript,
and is automatically set by browsers only if the user
makes a selection in the ﬁle dialog. Before CORS,
checking the presence of “ﬁlename” attribute on server-
side is sufﬁcient to prevent ﬁle upload CSRF. However,
CORS breaks this defense, allowing attackers to craft the
body to set “ﬁlename” attribute therefore able to launch
ﬁle upload CSRF attacks. We found such a case in
the personal account pages of JD.com (Alexa Rank 20),
which has CSRF defenses in every input place except for
uploading a ﬁle to change the user’s avatar. This vul-
nerability is unexploitable without CORS. We conﬁrmed
that, with CORS, an attacker can exploit this CSRF vul-
nerability to modify the victim’s avatar.
CORS has few limitations on body values. Be-
fore CORS, browsers restrict binary data in the body
of cross-origin POST requests by ﬁltering or convert-
ing some special values. For example, in Firefox, Edge
and IE, form data is truncated by “\x00” and the data
after “\x00” will not be sent. In Chrome and Safari, a
“\x0a\x0d” sequence is converted to a single character
“\x0d”. This limits an attacker’s ability to accurately
construct malicious binary data. However, both CORS
standards and CORS interfaces in browsers impose no
limitations on the values of request body, which gives
attacker greater ﬂexibility.
Case Study: We found that it is possible with the
new ﬂexibility to exploit binary-based protocol services.
Apple Filing Protocol (AFP) [41] is a ﬁle-sharing pro-
tocol from Apple that provides ﬁle sharing services for
MacOS. It is a binary-based protocol with its own data
frames and formats. We tested the MacOS built-in AFP
server and found that it always parses data using 16-byte
alignment, ignoring any unrecognized 16-byte frames
and continuing to parse the next 16-byte frame. Before
CORS, this protocol is not vulnerable to HFPA attacks
due to the format and value limitations of HTML form.
By taking advantage of the CORS interfaces, an attacker
can craft a cross-origin request, making its header size a
multiple of 16 bytes, which is ignored by the AFP server,
and constructing its binary body in AFP protocol format
for communication with the AFP Server. We demon-
strated this attack in our experiments: by sending a cross-
origin request from a public website, we can create new
ﬁles on an AFP server located in our otherwise-protected
intranet.
5 Risky Trust Dependency
CORS provides web developers an authorization channel
to relax the browser’s SOP and share contents with other
USENIX Association
27th USENIX Security Symposium    1085
trusted domains. However, this trust relationship makes
the target site dependent on the security of third-party
websites, increasing attack surfaces. An attacker can ﬁrst
enter a weakly secured trusted domain, and then abuse
this trust relationship to attack a strongly secured target
site.
We study two typical types of trust relationship and
the risks they pose:1) HTTPS site trusting their own
HTTP domain. 2) Trusting other domains. In the ﬁrst
case, an active network attacker can read sensitive infor-
mation and launch CSRF attacks against HTTPS web-
sites by hijacking HTTP website contents.
In the sec-
ond case, a web attacker can carry out similar attacks on
a strongly secured website by exploiting XSS vulnera-
bilities on a weak website. Furthermore, our measure-
ments on popular websites showed that those two risks
were largely overlooked by developers. We found that
about 12.7% CORS-conﬁgured HTTPS websites (e.g.,
fedex.com) trust their own HTTP domain, and 17.5%
CORS-conﬁgured websites (e.g., mail.ru) trusted all of
its subdomains.
5.1 HTTPS Site Trust HTTP Domain
HTTPS is designed to secure communication over inse-
cure networks. Therefore, a man-in-the-middle attacker
cannot read the content of an HTTPS website. However,
if an HTTPS site is conﬁgured with CORS and trusts its
own HTTP domain, then an MITM attacker can ﬁrst hi-
jack the trusted HTTP domain, and then send a cross-
origin request from this domain to the HTTPS site, and
indirectly read the protected content under the HTTPS
domain.
Case Study: Fedex.com (Alexa Rank 470), has fully
deployed HTTPS and enabled the secure and httponly
ﬂag in its cookies to protect against MITM attacks. But
it conﬁgures CORS and trusts its HTTP domain, so an
MITM attacker can ﬁrst hijack the HTTP domain and
then send cross-origin requests to read the HTTPS con-
tent. We veriﬁed this attack in our experiments: it al-
lowed attackers to read detailed user account informa-
tion, such as user names, email addresses, home ad-
dresses, credit cards on Fedex.com.
5.2 Trusting Other Domains
Other domains can be divided into two types, their own
subdomains and third-party domains.
Trusting all of its own subdomains. The harm of
cross-site scripting (XSS) vulnerability [43] on a subdo-
main is often limited, because it cannot read sensitive
contents on other important subdomains directly due to
SOP restrictions, nor steal cookies that use the httponly
ﬂag. But if an important subdomain is conﬁgured with
CORS and trusts other subdomains, the harm of a subdo-
main XSS can be enhanced.
Case study: Russia’s leading mail service mail.ru
(Alexa global rank 50) provides strong security protec-
tion for the primary domain (https://mail.ru), such as de-
ploying CSP (Content Security Policy) [34] to prevent
XSS, and enabling httponly ﬂag in its cookies. But its
primary domain is conﬁgured to trust any subdomain,
and mail.ru subdomains are less secured, so an attacker
can exploit any XSS vulnerability present on its subdo-
mains to read the contents of the primary domain.
We
this
as
attack
veriﬁed
follows.
We
found an XSS vulnerability on its
subdomain,
https://lipidium.lady.mail.ru.
this
XSS vulnerability, we could successfully read sen-
sitive content of the top domain,
including the user
name, email address, and the number of unread mails
information.
By exploiting3
Trusting third-party domains. If a secure site is con-
ﬁgured with CORS and trusts a third-party domain, an
attacker could exploit the vulnerability on the third-party
domain to indirectly attack the secure site.
Case
study:
e-commerce
The Korean
site
(faceware.cafe24.com) and the Chinese house dec-
oration website (www.jiazhuang.com) trust third-party
websites
crossdomain.com and runapi.showdoc.cc
respectively, but the third-party websites have security
issues.
crossdomain.com’s domain name has expired
and can be registered by anyone, and runapi.showdoc.cc
has an XSS vulnerability on its site. So an attacker
could exploit these vulnerabilities on third-party sites to
indirectly attack the target sites.
5.3 CORS Measurement
To understand the real-world impact of the aforemen-
tioned problems, we conducted measurements of CORS
deployments on popular sites. We targeted the Alexa Top
50,000 domains and extracted all of their subdomains
from an open-to-researchers passive DNS database [1]
operated by a large security company [2]. In total, we
collected 97,199,966 different subdomains over 49,729
different base domains.
For each subdomain, we repeatedly changed the
Origin header value to different error-prone values in
testing requests, and inferred their CORS
different
conﬁgurations according to response headers.
For
example,
to understand whether an HTTPS domain
(e.g., https://example.com) trusts its HTTP domain,
we set
to be “Origin:
If the response headers from the
http://example.com”.
HTTPS domain contains “Access-Control-Allow-Origin:
the request Origin header
3Note, this exploitation was wholly contained to manipulating our
own browsers; no third party was manipulated via XSS.
1086    27th USENIX Security Symposium
USENIX Association
.
Categories
HTTPS trust HTTP
Trust all subdomains
Reﬂecting origin
Preﬁx match
Sufﬁx match
Substring match
Not escaping “.”
Trust null
Total
fedex.com, global.alipay.com, www.yandex.ru
Table 3: Measurement of insecure CORS conﬁgurations
Sub-domains Base Domains
1,031(4.7%)
61,347(12.7%)
84,327(17.5%)
1,010(4.5%) mail.ru, mobile.facebook.com, payment.baidu.com
1,887(8.6%)
15,902(3.3%)
315(1.4%)
1,876(0.4%)
365(1.7%)
32,575(6.8%)
132(0.6%)
430(0.1%)
890(0.2%)
139(0.6%)
3,991(0.8%)
175(0.8%) mingxing.qq.com, aboutyou.de, login.thesun.co.uk
132,476(27.5%)
m.hulu.com, www.php.net, account.zhihu.com
subscribe.washingtonpost.com, hrc.byu.edu
www.nlm.nih.gov, about.bankofamerica.com
account.nasdaq.com, analytics.microsoft.com
2,913(13.2%)
Examples
tv.sohu.com, myaccount.realtor.com
http://example.com”, we know that the HTTPS domain
trusts its HTTP domain. We use the same approach in
other subsections.
We found that 481,589 sub-domains over 22,049 base
domains were conﬁgured with CORS, of which 61,347
HTTPS sub-domains (about 12.7%) over 1,031 base do-
mains (about 4.7%) trusted the HTTP domain and 84,327
sub-domains (about 17.5%) over 1,010 base domains
(about 4.5%) trusted any of its own subdomains, as
shown in Table 3.
We further investigate the reasons behind the high pro-
portion of these two security risks. By analyzing CORS
standards, web frameworks, and web software, we found
three reasons for the ﬁrst risk: 1) The standards don’t ex-
plicitly emphasize the security risk. 2) Some web frame-
works fail to check protocol types. For example, the pop-
ular web framework django-cors-headers only checks
the domain and neglects the protocol type when examin-
ing a request’s Origin header in order to return the CORS
policy. 3) Some web applications allow both http and
https protocol types for better compatibility. We ana-
lyzed the popular CMS software Wordpress and found
that its trust list was hard-coded to allow both HTTP and
HTTPS domains when returning CORS policies. This
approach improves compatibility and can make Word-
press run in both HTTP and HTTPS environment with-
out any extra conﬁguration, but it introduces new secu-
rity risks.
We also do not ﬁnd any explicit security warnings for
the second risk (trusting third-party domains) in either of
the standards (W3C or Fetch). Another reason for the
second risk is that trusting arbitrary third-party subdo-
mains simpliﬁes web developer conﬁguration, especially
when a resource needs to be shared among multiple dif-
ferent subdomains.
6 Complex Policies and Misconﬁgurations
The core function of CORS is that the policies gener-
ated by resource servers instruct client browsers to relax
SOP restrictions and share cross-origin resources. If the
server-side policies are incorrect, it may trust an unin-
tended domain, bypassing the browser’s SOP enforce-
ment. To understand this risk, we analyzed open-source
web framework implementations and real-world CORS
deployments. We discovered a number of CORS mis-
conﬁguration issues. We found that 10.4% of CORS-
conﬁgured domains trust attacker-controllable sites. We
also found that 8 out of 11 popular CORS frameworks
undermine CORS’s security mechanisms and could gen-
erate insecure policies.
While some mistakes were caused by negligence, oth-
ers arose due to the complex details and pitfalls in
CORS’ design and implementation, which make CORS
unfriendly to developers and prone to misconﬁgurations.
We can classify the reasons into four categories: 1) The
expressiveness of access control policy is poor. Many
websites need to implement error-prone dynamic CORS
policy generation at the application-level. 2) Origin null
value could be forged in some corner cases. 3) Devel-
opers do not fully understand the CORS security mech-
anisms, leading to misconﬁgurations. 4) Interactions be-
tween CORS and web caching bring new complexity.
6.1 Poor Expressiveness of CORS Policy
The W3C CORS standard states that an Access-Control-
Allow-Origin header value can be either an origin list,
“null”, or “*”, whereas in the WHATWG’s Fetch stan-
dard, it can only be a single origin, “null”, or “*”. Our
test on ﬁve major browsers shows that they all comply
with the WHATWG’s Fetch standard.
This access control policy is not expressive enough
to meet common web developer usage patterns. For
example, it is difﬁcult for web developers to share re-
sources across multiple domain names through simple
server conﬁgurations.
Instead, they need to write spe-
ciﬁc code or use the web framework to dynamically gen-
erate different CORS policies for requests from different
origins. This approach increases the difﬁculty of CORS
USENIX Association
27th USENIX Security Symposium    1087
conﬁguration, and is error-prone in practice. We found a
number of misconﬁgurations are rooted in this category.
In general, we can classify the misconﬁgurations into
two sub-categories: 1) blindly reﬂect requester’s origin
in response headers; 2) attempt to validate requester’s
origin but make mistakes.
1). Reﬂecting origin. When web developers have to
dynamically generate polices, the simplest way to con-
ﬁgure CORS is to blindly reﬂect the Origin header value
in Access-Control-Allow-Origin headers in responses.
This conﬁguration is simple, but dangerous, as it is
equivalent to trusting any website, and opens doors for
attacker websites to read authenticated resources.
In
our measurement, 15,902 websites (about 3.3%) out of
481,589 CORS-conﬁgured websites have this permissive
conﬁguration, including a number of popular websites
such as account.sogou.com, analytics.microsoft.com,
account.nasdaq.com.
2). Validation mistakes. Due to the poor expres-
siveness of CORS policies, web developers have to dy-
namically validate the request Origin header and gen-
erate corresponding CORS policies. We ﬁnd the val-
idation processes prone to errors, resulting in trusting
unexpected attacker-controllable websites. These er-