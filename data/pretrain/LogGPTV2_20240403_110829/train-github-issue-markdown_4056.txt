I'm using twitter relations as a test bed for neo4j and I ran into issues when
making some complicated queries.
This query runs in just a little over a second
    MATCH (x:User)
    WHERE x.screen_name IN ['apple', 'banana', 'coconut','durian','eggplant']
    WITH x
    MATCH (y:User)
    WHERE y.screen_name IN ['apple', 'banana', 'coconut','durian','eggplant']
    WITH x,y
    MATCH (x)-[:FOLLOWS]->(t:User),(y)-[:FOLLOWS]->(t:User)
    RETURN count(*) as c, t.screen_name, t.id
    ORDER BY c DESC
    LIMIT 1000
See the profile here
But this query does not appear to ever return even though the individuals in
groups `x` and `y` are identical. The only difference is that I'm referring to
them by `id`:
    MATCH (x:User)
    WHERE x.screen_name IN ['apple', 'banana', 'coconut'] OR x.id IN [12345,98765]
    WITH x
    MATCH (y:User)
    WHERE y.screen_name IN ['apple', 'banana', 'coconut'] OR y.id IN [12345,98765]
    WITH x,y
    MATCH (x)-[:FOLLOWS]->(t:User),(y)-[:FOLLOWS]->(t:User)
    RETURN count(*) as c, t.screen_name, t.id
    ORDER BY c DESC
    LIMIT 1000
See the profile here
I would presume that both of these queries would quickly gather the indicated
individuals in the first two clauses and then run the third clause with equal
speed because x and y is just a group of ids at that point. I thought that
`WITH` was a barrier beyond which the query planner could not look! So I don't
understand what I'm seeing here.
Facts:
  * neo4j-community-2.1.3,
  * using a mac
  * 286,039 nodes; every node in the graph is `User` (a twitter user)
  * 381,255 relationships; all relationship is `-[:FOLLOWS]->`
  * Indices and constraints
    Indexes
      ON :User(screen_name) ONLINE (for uniqueness constraint) 
      ON :User(id)          ONLINE (for uniqueness constraint) 
    Constraints
      ON (user:User) ASSERT user.screen_name IS UNIQUE
      ON (user:User) ASSERT user.id IS UNIQUE
  * My question on StackOverflow