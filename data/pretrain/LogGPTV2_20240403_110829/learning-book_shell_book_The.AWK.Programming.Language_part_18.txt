tence. Run sortgen on its output. 
6.4AReverse-PolishCalculator
Suppose we want a calculator program for balancing a checkbook or evaluat-
ing arithmetic expressions. Awk itself is perfectly reasonable for such calcula-
tions except that we have to re-run it cach time the program changes. We need
a program that will read and evaluate expressions as they are typed.
To avoid writing a parser, we will require the user to write expressions in
reverse-Polish notation.(It's called “reverse” because operators follow their
operands, and “Polish" after the Polish mathematician Jan Lukasiewicz, who
first proposed the notation.) The normal “infix expression
(1 + 2) + (3 - 4) / 5
is written in reverse Polish as
1 2+ 3 4 - + 5 /
No parentheses are needed - expressions are unambiguous if the number of
operands taken by cach operator is known. Reverse-Polish expressions are easy
to parse and evaluate using a stack and, as a consequence, programming
languages like Forth and Postscript, and some pocket calculators, use this nota-
tion.
Our first calculator provides nothing more than the ability to evaluate arith-
operands separated by blanks. If a field is a number, it is pushed onto a stack;
if it is an operator, the proper operation is done to the operands on the top of
the stack. The value at the top of the stack is printed and popped at the end of
each input line.
---
## Page 153
SECTION 6.4
A REVERSE-POLISH CALCULATOR
143
calc1-reverse-Polish calculator,version 1
input:
arithmetic expressions in reverse Polish
#
output: values of expressions
for（1=1;1 1)(
stack[top-1]+= stack[top]; top--
}else if （$i
-&top>1）（
stack[top-1]-= stack[top]; top--
}else if（$i="&& top >1）（
stack[top-1]o stack[top]; top--
}else if （$i
"/& top >1)(
stack[top-1]/= stack[top]; top--
}else if ($i
&&top>1）（
stack[top-1]^= stack[top]; top--
}else{
printf(“error: cannot evaluate %s\n",$i)
0=do
next
if(top == 1)
printf("\t%.8g\n°，stack[top--])
else if（top>1）{
printf(*error: too many operands\n")
top = 0
For the input
1 2 + 3 4 - + 5 /
calc1 gives the answer -0 .6.
Our second reverse-Polish calculator provides user-defined variables and
access to a handful of arithmetic functions. Variable names consist of a letter
followed by letters or digits; the special syntax var= pops the value on the top of
the stack and assigns it to the variable var. If the input line ends with an
assignment, no value is printed. Thus a typical interaction might look like this
(program output is indented):
0 -1 atan2 pi=
pi
355113/xx
3.1415927
3.1415929
x pi /
1.0000001
2 sqrt
1.4142136
The program is a straightforward extension of the previous one:
---
## Page 154
144
LITTLE LANGUAGES
CHAPTER 6
calc2-reverse-Polish calculator,version 2
input: expressions in reverse Polish
output: value of each expression
{for（i=1;i1){
stack[++top]=$i
stack[top-1]+= stack[top]; top--
}else if （si
btop>1）（
stack[top-1]-= stack[top]; top--
}else if （si
）（11）{
stack[top-1]/= stack[top]; top--
}else if （si
stop>1）（
stack[top-1]~= stack[top];top--
)else if (si
==“sin”&& top >0）{
stack[top]= sin（stack[top])
}else if（$i ==“cos”&&top >0){
}else if（si==
"atan2"&&top>1）{
stack[top-1]= atan2（stack[top-1],stack[top]);top--
}else if（$i== "1og”&& top >0){
stack[top]=log（stack[top])
}else if（$f=="exp”&& top >0）{
}else if（$i==“sqrt"& top>0）(
}else if（$io"int*&s top>0）{
stack[top]= int（stack[top])
}else if (si in vars）{
stack[++top]=vars[si]
}（01）{
printf("\tx.8g\n”,stack[top--])
printf("error: too many operands\n")
top = 0
Exercise 6-13. Add built-in variables for standard values like r and e to ca1c2. Add a
built-in variable for the result of the last input line. Add stack-manipulation operators
to duplicate the top of the stack and to swap the top two items. 
---
## Page 155
SECTION 6.5
AN INFIX CALCULATOR
145
6.5AnInfixCalculator
So far, the languages we have considered in this chapter have all had a syn-
tax that was easy to analyze. Most high-level languages, however, have opera-
tors at many different precedence levels, nested structures such as parenthescs
and if-then-else statements, and other constructions that require more powerful
parsing techniques than field splitting or regular expression pattern matching.
It is possible to process such languages in awk by writing a full-fledged parser,
as one would in any language. In this section we will construct a program to
evaluate arithmetic expressions in the familiar “infix” notation; this is a useful
precursor to the much larger parser in the next section.
Arithmetic expressions with the operators +, , *, and / can be described by
a grammar in the same style as the one we used in Chapter 5:
dxa
term
expr + term
expr - term
term
factor
term ·factor
term / factor
factor
number
( expr )
This grammar captures not only the form of arithmetic expressions but also
the precedences and associativities of the operators. For example, an expr is the
sum or difference of term’s, but a term is made up of factor’s, which assures
that multiplication and division are dealt with before addition or subtraction.
the opposite of the generation process discussed in Chapter 5. For example, the
expression 1 + 2 • 3 is parsed like this:
xp
3 Bumber —faetor
To make an infix evaluator, we need a parser for expressions. With a little
effort, the grammar can be used to construct the parser and organize the pro-
gram as well. A function is written to process each nonterminal in the gram-
o snd q ps sa sd o xxa uoy o ssn od  r
minus signs, the function term to process factor's separated by multiplication
or division signs, and the function factor to recognize numbers and process
parenthesized expr's.
In the following program, each input line is taken as a single expression,
---
## Page 156
146
LITTLE LANGUAGES
CHAPTER 6
which is evaluated and printed. We are still requiring that all operators and
operands, including parentheses, be separated by blanks. The variable f points
to the next field to be examined, which is the next operator or operand.
#calc3- infix calculator
NF > 0{
f = 1
e = expr()
if (f x{if （x== y+1）{
y=x·2
x=1
}else
print x,z[x]
1
NR >1{print $1}
END
(print NR }
is translated into this C code:
assign(x, num((float)0));
assign(y, num((float)1));
while （getrec()){
if （eval(°>",field（nun（(float)1)),x))(
1f（eva1（“=，x，eval（*+，y，nun（（float)1))））(
assign(x,num((float)1));
assign(y,eval("+*,x,num((float)2)));
）else(
print(x,array(z,x));
，
if (eval(°>°,NR,num((float)1)))(
print(field(num((float)1)));
}
print(NR) :
A good way to approach the design of the front end of a language processor
is to write down a grammar for the input language.Using the notation of Sec-
tion 5.1, our subset of awk has this grammar:
---
## Page 158
148
LITTLE LANGUAGES
CHAPTER 6
opr-begin pa-stets opt-end
opt-begin
一
BEGIN statlisr I *"
opt-end
一
+0 1 s GN
pa-stats
statlist \pattern|pattern statlist
pattern
一
adxa
statlist
一
{s01s}
stats
一
stet stets 1 **
stat
一
print exprlisr 1
if( expr ) star opt-else 1
while ( expr ) star 1
stetlist 1
ident = expr
opl-else
else ster I *#
expr1expr，exprlist
expr
一
number 1 idenr I $expr 1 ( expr ) 1
expr  expr 1
expr + expr\ expr - expr1
expr+expr\expr/ expr\expr %expr
ident
→
name I name[expr] I name(exprlist)
The notation ** stands for the null string and I separates alternatives.
routines, each of which is responsible for identifying. in the input, strings gen-
erated by a nonterminal in the grammar. Each routine calls in turn upon others
to help out in the task until the terminal level is reached, at which point actual
tokens of input are read and categorized. The recursive, top-down nature of this
method of parsing leads to the name “recursive descent."
The structure of the parsing routines closely matches the grammatical struc-
ture of the language.
For example, the function for program looks for an
optional BEGIN action, followed by a list of pattern-action statements, followed
by an optional END action.
In our recursive-descent parser, lexical analysis is done by a routine called
advance, which finds the next token and assigns it to the variable tok. Out-
put is produced each time a star is identified; lower-level routines return strings
o su d on pe u seq ndne uy sun ore ou poo se se
put readable by inserting tabs; the proper level of nesting is maintained in the
variable nt.
The program is by no means complete - it does not parse all of awk, nor
does it generate all of the C code that would be needed even for this subset —
and it is not at all robust. But it does do enough to demonstrate how the whole
thing might be done, and it also shows the structure of a recursive-descent
translator for a nontrivial fraction of a real language.
---
## Page 159
SECT1ON 6.6
RECURSIVE-DESCENT PARSING
149
awk.parser - recursive-descent translator for part of avk
input: avk program (very restricted subset)
output: C code to inplement the awk program
(()eexbo3d}NI538
function advance()(
（）.u（（）.x）
lexicalanalyzer;returns next token
while (1ength(line)= 0)
if (getline line e 0)
sub(/[\t]+/,
return tok"（eof)*
if（natch(line，
"",1ine)
/²[A-Za-z_][A-Za-z_0-9]/}11
renove white space
/-7（[0-9]+\.?[0-9]+1.[0-9]+]/）11number
identifier
natch(line,
natch(1ine,/./))(
natch(1ine,/*(=>)/) 11
everything else
relational
tok = gubstr(1ine，1, RLENGTH)
1ine = subgtr(line,RLENGTH+1)
return tok
error(*line * NR “ incoaprehensible at “line)
function gen（s)(
printf("xsxs\n”，substr("\t\t\t\t\t\t\t\t\t”,1,nt），s)
print s vith nt leading tabs
function eat（s)(
1
read next token if se tok
advance()
funetion nl()(
（1,xo1：u.
absorb nevlines and senicolons
vhile (tok 
advance()
function error（s)( print “Error:”s 1“cat 1>62";exit 1 )
function program(）(
if (tok *e
advance()
pastats()
if （tok I=“(eof)")error(“progran continues after END")
function pastats()(
gen("while （getrec())（");nt++
nt--; gen(*)*)
vhile （tok 1=
*END" &6 tok 1=“(eof)") pastat()
function pastat() (
if（tok*()
pattern-action statement
statlist()
action only
else(
gen(*it（*
pattern（））();nt++
pattern-action
if （tok oo*(*) statliat()
else
default
t action is print s0
（（.)ub1--u
---
## Page 160
150
LITTLE LANGUAGES
CHAPTER6
function pattern()(return expr())
function statliot()(
eat(*("); nl(); while (tok 1=*)") stat(); eat(")*);nl()
function stat()(
（（1（（）aadxauadu61(auad）e ）(axdxo）
else if （tok s"if") ifstat（)
else gen（oimpleetat()*;")
nl()
function ifstat(）（
eat(*if"); eat（*(*); gen（“if (* expr(）"){");eat（")*); nl(); nt++
if（tok =="else")(
stat()
eat(*else*)
optional else
++qu 1() asta ()uab 1--qu 1()u
stat()
nt--; gen(*)")
function vhilestat()(
eat(“while*);eat（*(*); gen（“while (”expr() *){*);eat(*)*); nl（)
（（_）u51--qu1（）e81++u
funetion simplestat(
lhs)(#ident = expr 1name(exprlist)
1hs = ident()
if （tok s=")（
（（）zdxo.‘.sut ）ubyes,uxnox
eat("=")
}else return 1hs
function exprlist(
e = expr()
n，e）（expr
has to be at least one
，expr，
for （n=1; tok=s ",;n++）{
advance()
e =e *,”expr（)
return e
1
function expr(e)(
#rel 1rel relop rel
e=rel（)
vhile (tok -/=1>/)(
op=tok
= sprintf("eval(\"xs\",%s,Xs)",op,e, rel(1)
advance()
return e