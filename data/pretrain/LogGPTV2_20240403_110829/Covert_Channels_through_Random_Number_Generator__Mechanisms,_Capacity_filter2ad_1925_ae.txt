transmit a single bit during each interval. This results in a
bit rate of 1 kbit/s, but does not require ECC or Manchester
coding. Our experiments showed that on a clean system
such bit rate can be reliably achieved with no errors, as the
clocks of the trojan and the spy are very closely synchronized
with typical deviation of about 3-5 microseconds. It is also
possible to use SSI for transmitting a byte of data per inter-
val. However, occasional decoding errors occur in this case,
requiring ECC for error correction. According to our exper-
iments, the average error rate of 0.9% was observed. The
maximum number of errors in a block of 255 bytes (ECC
parameter t) was observed to be 19. Therefore, for this ex-
periment 38 ECC bytes of ECC are needed inside every 255
bytes of transmitted data to correct all errors. Consequently,
the channel bit rate is 6.8 kbit/s. While representing a true
end-to-end transmission rate that we achieved on a real sys-
tem, this number should not be viewed as the best achiev-
able rate. Timing optimizations and more eﬃcient ﬁne-grain
synchronization can increase the channel capacity further.
5. MITIGATING THE RNG COVERT
CHANNEL
The new covert channel through the RNG hardware mod-
ule presented in this paper imposes security risks that have
to be addressed.
In general, several classes of mitigation
techniques against side channels and covert channels to elim-
inate information leakage are well known from prior litera-
ture, and some of these can be adapted to mitigate the RNG
channel. These solution classes include static partitioning of
hardware resources, approaches targeted at equalizing access
delays by diﬀerent instructions, and approaches designed to
complicate or disable the usage of timekeeping infrastruc-
ture by the attackers. In terms of closing the RNG covert
channel, the defense goal is to ensure that the latency (and,
more speciﬁcally, the failures) experienced by an rdseed in-
struction executed by one process is not impacted by any
activity of another process.
Compared to many other architectural covert channels,
the RNG channel is relatively more diﬃcult to mitigate.
This is because the communicating processes in most covert
channels have to rely on a measurement mechanism by ei-
ther using hardware performance-monitoring counters [22]
or the processor time stamp counter [39]. The access to
these counters is typically oﬀered through the use of spe-
ciﬁc instructions, such as rdpmc and rdtsc on x86 systems.
However, since these instructions can carry a potential se-
curity risk, the hardware designers make their availability
conﬁgurable. In particular, system software can set up these
instructions to be either available to software executing at
any privilege level, or restrict it to only software executing
in ring 0. Restricting the usage of these instructions to ring
0 programs essentially closes the user-level covert channels
that rely on such measurement.
Since accurate and frequent time measurement is criti-
cal for proper functionality of many applications, techniques
have been proposed to make the timing measurements less
precise (thus distorting the timing channels), while main-
taining the capabilities of benign applications [37, 51]. How-
ever, fuzzing with or disabling the time measurement infras-
tructure does not close the RNG channel, because the CPU
explicitly informs the software about the availability of ran-
dom bits. Moreover, operating systems in non-virtualized
environments cannot restrict programs from executing the
rdseed instructions, thus making it impossible to mitigate
the RNG channel by simply applying conﬁguration tweaks
in such systems.
In the rest of this section we propose two software mitiga-
tion techniques that can either disable the RNG channel or
bring its capacity down to impractical levels. In addition,
we propose two hardware-supported mechanisms to make
the design of RNG modules in future processors immune to
the exploitation as covert channel media.
5.1 Software Mitigations
First, we describe possible software-only protections from
the RNG channel. We propose two software-based mitiga-
tions: one approach is based on the support available in
Intel-based virtualized systems, and the other approach re-
lies on executing a background thread to add constant load
on the RNG hardware.
5.1.1 Virtualization Based Solution
As we discussed above, the OS does not have the capabili-
ties to directly disable the RNG channel. However, it is pos-
sible to mitigate the RNG channel in a virtualized system.
Speciﬁcally, the Intel virtualization technology [24] (VMX)
allows to conﬁgure the hardware to cause a VM exit oper-
ation and trap into the Virtual Machine Monitor (VMM)
every time rdrand and rdseed instructions are executed by
a guest VM. This provides an eﬀective mechanism to control
accesses by guest VMs to the RNG hardware and allows for
a number of defenses to be implemented within the VMM
to disable the RNG covert channel.
One mitigation technique that can be implemented within
the VMM is to completely emulate the functionality of the
RNG hardware in software. Speciﬁcally, whenever a trap
to the VMM occurs after the guest VM executes the rdseed
instruction, the VMM provides a software-generated random
value. Unfortunately, this approach loses the beneﬁts of pure
hardware-based random seed generation.
Another solution is to add the capability of distributing
random seeds to the VMM itself. In particular, the VMM
software can execute the rdseed instructions to ﬁll up its
own pool of random seeds and then pass these seeds to the
guest VMs whenever a VM makes an attempt to execute the
rdseed instruction.
Finally, the VMM can introduce a delay following a trap
from the VM upon encountering the rdseed instruction and
then return the control to the VM. If the delay is suﬃciently
long to allow the RNG hardware to completely replenish
its random bits, then no rdseed instruction will experience
failure because they are separated by a suﬃcient number of
cycles.
The VMM-based mitigations described above will cur-
rently only work on Intel processors. While AMD processors
do not implement the rdseed instruction, they support the
rdrand instruction. The support for rdseed is expected to
be added to AMD processors in the next microarchitecture
revision. According to recent documentation [1], the AMD
virtualization hardware does not allow conﬁguring it to pro-
duce a VM exit when executing rdrand. Unless this support
is added with the introduction of the rdseed instruction, al-
ternative mitigation strategies for AMD processors have to
be used.
5.1.2 Equalizing the RNG Loading
If the VMM-based solution described above can be used,
it represents the simplest way to mitigate the RNG covert
channel. However, virtualization is not always used or is
not always available. Another potential limitation of VMM-
based approach is that it may not always be possible to
modify the VMM’s code. In those cases, alternative solu-
tions need to be used.
Another approach to mitigating the RNG channel is to
make the load on the RNG module equal at any time, thus
making it impossible for the attackers to encode information
using the RNG state. For example, if we introduce constant
high-intensity demand for the RNG services in the back-
ground, then the spy process will always detect the high-
contention RNG state, making it impossible to distinguish
between one and zero for data transmission using the RNG
channel.
We propose to achieve such constant pressure on the RNG
hardware by dedicating a hardware thread to repeatedly ex-
ecute the rdseed instructions at a high rate. To evaluate the
eﬀectiveness of such mitigation, we repeated the experiment
described in Section 4.2.1 by transmitting a large number
of bits (100 million bits) through the RNG channel using
Protocol 2. The only diﬀerence was that this time we also
executed the protection thread in the background (on one
of the available cores) that presented constant high-level de-
mand for the RNG hardware. As expected, the noise process
signiﬁcantly interferes with the functionality of the RNG
channel. Speciﬁcally, almost all of the transferred bits were
decoded as ”1” by the spy process, regardless on their actual
value. For example, of the 50 million zeroes that were trans-
mitted, only 556 were correctly received by the spy. This
translates into the values of 0 and 1 of 0.99998886 and
2.54e-06, the transmitted bits per one channel use of 2.132e-
06, and the resulting theoretical bit rate of 0.87 bit/s. An
extremely high error rate caused by this protection makes
the channel with such a low bit rate (less than a bit per sec-
ond) unusable for transmitting any practical information.
While the protection based on running a spurious thread
looks expensive, it can be enabled only when the system
detects that potential trojan and spy processes have been
scheduled. This protection also does not impede the capa-
bility of processes to obtain small random seeds. Based on
our experiments, a process can still receive seeds, possibly
after repeating the attempts several times.
In particular,
when a single RNG-equalizing process is present, a legiti-
mate process needs to perform 5 failed rdseed attempts on
average before succeeding. Since random seed generation is
an infrequent operation in typical scenarios during normal
program execution, the normal system functionality is not
signiﬁcantly distorted by this mechanism.
5.2 Hardware-supported Mitigations
In future systems, the hardware design itself can be modi-
ﬁed to mitigate the RNG-based covert channel. We describe
two possible approaches that future RNG modules can im-
plement to support security: equalization-based approach
and partitioning-based approach.
5.2.1 Equalizing Delay of rdseed Instructions
To eliminate the RNG-based channel, future RNG hard-
ware can be designed in a way that ensures uniform latency
of every rdseed operation and eliminates random seed re-
quest failures. First, the explicit failure signal that the RNG
hardware currently uses to inform software about the lack
of random bits can be eliminated. Instead, the rdseed in-
structions can be required to wait until the random bits are
replenished if the module is currently out of bits. This tweak
does not completely eliminate the vulnerability, but requires
the attackers to use timing infrastructure instead of capital-
izing on the explicit failure signal. This makes the attack
more diﬃcult and allows the defenses based on fuzzing the
timers to be used. Going a step further, the hardware can
also equalize the timing of each rdseed request by main-
taining only a single 64-bit random seed inside the RNG
unit. When a request is made, the RNG unit will ﬁrst gen-
erate another seed and only then return the original seed
to the requesting process. This also eliminates failures and
simpliﬁes the RNG hardware design, removing the need for
multiple CB entries. The drawback of this approach is in-
creased delay of the rdseed instructions. However, since
these instructions are typically not used often, such an in-
crease may be acceptable. Another potential problem is that
it is not clear how the increased delays of some instructions
impact interrupt handling and the application’s response to
interrupts.
5.2.2 Partitioning RNG Resources
If the performance impact of the equalization-based ap-
proach described above is too high, or signiﬁcant issues with
interrupt handling arise, an alternative mechanism can also
be implemented in hardware, where vulnerable hardware re-
sources of the RNG module can be fairly partitioned among
the CPU cores. Speciﬁcally, each core can be assigned a slice
of the CB and can only operate on that slice. As a result, the
RNG activity performed by one process (the trojan) sched-
uled on one core will not impact a successful completion of
an rdseed instruction issued by another process (the spy)
executed on another core. Consequently, the RNG channel
disappears. This approach requires a larger number of en-
tries in the CB, but supports high performance and security.
Partitioning the CB bits closes all inter-core channels, only
leaving the possibility of a channel when the trojan and the
spy are consecutively scheduled on the same core. To pre-
vent such a channel, the RNG logic must ensure that the
CB slice belonging to the core on which the communicating
processes execute is completely reﬁlled during the context
switch interval. Fortunately, this is already the case with
the current RNG implementation. According to our evalua-
tion, the complete CB reﬁll takes about 1.75 microseconds,
while the context switch interval is typically around 3-4 mi-
croseconds [33, 47].
6. RELATED WORK
Several covert channels through shared processor re-
sources have been described and analyzed in recent litera-
ture. In this section, we review some of these related works
and contrast them with the RNG channel described in this
paper.
The work of [56] presented a cross-VM covert channel
through the L2 cache. According to the results, the L2 chan-
nel has a theoretical capacity of 262 bit/s, which is signiﬁ-
cantly lower than the capacity of the RNG channel. Under
realistic loads in EC2 cloud, the mean bit rate was reported
to drop further to 3.2 bit/s with the error rate of above
9%. Since the L2 cache is private to each core, the chan-
nel can only be used when two virtual machines share the
same CPU. Core migration drastically reduces the channel’s
capacity.
Maurice et al. [39] developed a cross-core covert chan-
nel through shared Last Level Caches (LLC). The authors
demonstrated the bit rate of about 1300 bit/s for a non-
virtualized setup, and 751 bit/s for a virtualized setup. Set-
ting up the channel through the LLC requires signiﬁcant ef-
fort and understanding of complex LLC addressing nuances.
In contrast, the RNG channel only requires simple manipu-
lations with RNG instructions and trivial knowledge about
the details of the RNG module operation.
The work of [55] presented a timing covert channel be-
tween virtual machines exploiting contention on the memory
bus through the use of atomic memory instructions. The au-
thors achieved the channel transmission rate over 700 bit/s
in their laboratory setup and over 100 bit/s in Amazon EC2
cloud. This channel works in cross-core and cross-VM set-
ting.
All channels created through caches and memory bus re-
quire access to either processor timekeeping infrastructure
or to the hardware performance counters to allow the spy to
time the events and recognize transmission of bits. However,
the access to such infrastructure is not always available at
the user level. In addition, such access can be disabled just
to secure systems against such channels. Wang et al. [52] an-
alyzed timing channels through shared memory controllers
and proposed techniques to close this channel. Hunger et al.
[22] present an excellent summary of multiple covert chan-
nels, including the ones through caches, memory bus, branch
predictor and the AES hardware. They also analyze chan-
nel capacities and discuss synchronization protocols.
[14,
12] perform a detailed analysis of covert channels through
branch prediction units. The branch predictor channels only
work if the trojan and the spy execute on the same physical
core, either in two hardware thread contexts of a simulta-
neously multithreaded processor, or consecutively scheduled
on a single-threaded core. Because the channel is on a single
core, no additional synchronization is required in this case.
CC-Hunter [7] is a technique that detects the presence
of covert timing channels by dynamically tracking conﬂict
patterns on shared processor hardware. In principle, if CC-
Hunter can be repurposed to track the rdseed events, it is
conceivable that it will detect the RNG-based channel, but
further investigations are needed to establish that.
Besides exploiting the shared physical CPU structures