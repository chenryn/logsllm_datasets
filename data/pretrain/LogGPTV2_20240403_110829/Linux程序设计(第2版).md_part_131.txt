表21-3
u8...._u64
字符到64位长度之间带正负号和不带正负号的变量
88.......864
如果你需要一个特殊长度的变量，就一定要使用上表里定义的类型。当你几个月后回过头
来查阅驱动程序的源代码时，这些定义既让人看着舒服，又使代码更容易理解。还有一些特殊
类型是用在驱动程序的入口点处的，请看下面这个定义：
ssize_t schar_read(.. size_t count. loff_t *offset1
一步的介绍。这些定义的作用都很直接，因此程序员就不需要为数据的长度问题操太多的心了。
对类型的定义都在linux/types.h和asm/posix_types.h头文件里，如果你想知道它们具体的typedef
定义长度是多少，可以自行查阅这两个文件。当你需要把它们赋值给编译器的整数类型时，记
住一定要使用一个正确的投射关系。gcc对数据尺寸的不匹配问题相当挑剔，会把它认为有问题
加入jaVa编程群：524621833
---
## Page 708
第21章设备留动程序
169
的报告给你。
动手试试：一个内核模块
我们现在开始编写我们的第一个内核模块。根据以往的传统做法，我们决定编写一个
“hellokernel”模块一别不耐烦，这是我们这本书里最后一次编写这样的程序了。
1)我们从下面的hello.c文件开始动手。
inc1ude 
if defined(CONFIG_SMP)
tdefine .__SNP
#endif
itdefined(CONFIG_MODVERSTONS)
include
define MODVERSIONS
tendif
include 
int init_module(vo1d)
printk(KERN_DEBUG *Hello, kernel!′n*):
return 0:
void cleanup, nodule (void)
printk(KERN_DEBUG *Good-bye. kerne1*\n*)1
printf在内核中的对应函数是printk。它们在使用方法上差不多，但后者不支持浮点数的打印
输出。printk语句中的KERN_DEBUG定义的作用是设置被打印消息的优先级。优先级的可用值
都定义在linux/kernel.h文件里，如下所示：
$define KERN_EMERG
*
define KERN_ALERT
qesn sT wnss 
define KERN_CRIT
""
*
critical conditions
action_must be taken inmediately*/
define KERN_ERR
**
error conditions *!
#define KRRN_WARNING
#define KERN_NOTICE
*
*
normal but significant condition */
warning conditions */
define KERN, ,DEBUG
define KERN_INFO
*
*
/. sesessam tanet-bnqep ./
informational */
因此下面这个写法和上面那条语句的作用是一样的：
printk(*Hello, kernel!\n* );
但使用预定义的优先级水平可以使代码更容易阅读，大家想必都会同意这一点吧。消息的
记录级别控制着哪些消息会被输出到控制台，哪些消息会被追加到系统记录的尾部。这是由
syslogd控制着的，其具体设置一般是在/etc/syslog.conf文件完成的。因为这个原因，你可能不会
直接在屏幕上看到这条消息，它们会被保存到专门为这类消息分配的内核缓冲区里去。dmesg程
序可以把保存在那里的东西显示给你看（从你上次开机算起，应该有不少东西了）。
除了printk，这段代码里应该没有什么不熟悉的东西了一一新东西我们一会儿再说。就目前
而言，我们先在你创建hello.c文件的子目录里用下面这条命令来编译这个模块：
加入jaVa编程群：524621833
---
## Page 709
692Linux程序设计
gcc -D_KzRNEL_-I/usr/src/linux/include -DMODULE -Wal1 -02 -c hello.c -o he11o.0
2）现在把这个模块插入到内核里去。模块是用insmod（插入模块）命令加载的，它：般存
放在/sbin/子目录里：只有根用户才能插人和移出一个模块，如果不是这样就将是一个严重的安
全漏润—要是什么入都能鼓接内核不就全乱了嘛！请把白已变为根用户，输人下面的命令：
inszod hello.0
3）没有出错信息，那么我们怎样才能肯定模块已经成功地插入到内核里去了呢？我们可以
用下面这条命令查看dmesg从内核缓冲区咀读出来的最后：条消息：
 dme8g |tai1-n1
Hello, xerre
大家可以看到来自我们模块的消息出现在内核缓冲区里了。为了进一步证明这个模块确实
被加载了，我们可以再用lsmod（列模块清单）命令检查一下、它会把当前插入的所有模块都列
出来。如下所示：
cdu
Sise Used ky
hel1o
poem-9I
4）hello和其他模块一起出现了，这可没有什么好奇怪的。lsmod命令还列出了每个已加载模
块的长度和使用计数。使用计数我们-会儿就要讲到。现在，我们先把hello模块从内核里取下
来。rmmod（移除模块）命令将把一个模块从内核里取出来：如下所示：
rmodhe11o
dnesq |tail
Good ·bve, kerne:*
操作注释：
这里出现了几个新生事物。linux/module.h还包括着另外一个名为linux/config.h的头文件
（以及其他头文件），它包含着以常数定义“#define”形式定义的内核编译选项。这对我们来说
是非常的方便，因为我们可以肯定只要内核是为SMP系统编译的，CONFIG_SMP标志就会被定
义，而我们的_SMP_定义也就能够发挥作用。CONFIG_MODVERSIONS标志也是如此：如果
获得版本检查信息的访问权。
正如我们看到的，当模块被加载和卸下的时候，一条小消息被记录到内核缓冲区里去了。
我们定义了两个函数来完成这两项工作，它们是真正需要在模块里实现的东西。在加载模块时
需要调用init_module函数，它负责设置模块内部的数据结构、初始化硬件，以及做好第一次使
用设备之前应该完成的所有其他工作。上面这个例子只是一个简单的框架，所以我们没有真正
做什么事情。事情总是两方面的，所以cleanup_module负责关闭设备和释放设备可能占用过的各
加入iaVa编程群：524621833
---
## Page 710
第21章设备疆动程序693
种资源。
总之，我们建立了一个模块，并且成功地把它插人到内核里去了。我们现在已经克服了对
Linux内核的恐惧，接下来我们去接触些更实际的东西。
21.2字符设备
上面的hello模块可能是大家能够见到的最前单的内核模块厂，它并没有做什么真正有意义
的事。我们不能在它加载之后与它互动，它也没有导出什么有用的函数给用户空间的应用程序。
做为前进的第一步、我们来看一个字符驱动程序的框架结构示例。
字符设备必须向内核注册它们自己，向内核提供一些必要的信息使它能够在有应用程序希
望与这个设备互动的时候调用正确的函数进行处理、register_chrdev就是负责这一工作的.它的
调用语法如下所示：
int regieter_chrdev(unsigmed int mnjor; const cbar *name. struct file,operations
tope)
它在失败时的返回值是-个负数；如果成功则返间，·个非负数（正整数或0）一这是给出
了内核函数主编号的情况。如果在调用这个函数的时候把major设置为0，内核将给这个设备动
态地分配一个主编号。在这种情况下，设备将以下个可用主编号进行注册，面函数的返回值
就是这个主编号。主编号的动态分配使用起来并不困难，但如果在你上次加载过这个模块后主
编号又发生了变化，你这次就不得不创建一个止确的特殊文件才能对设备进行访问。因为这个
原因，我们将在书中使用系统保留的主编号以降低模块的编写难度。主编号42和120-127是系统
为本地设备预留的，成品模块是不便用这几个主编号的。详细资料请参考Documentation
/device.txt文件，那里面还有如何申请一个正式的主编号的办法。
第二个参数name只有一个用途—就是向/proc/devices进行注册：这个名字将出现在那里，
仅此而已。最后一个参数文件操作结构是最有意义的。它定义了设备与外界交流的方式方法；
特别是规定了哪些功能由它自己来负责完成，又有哪些功能需要由内核中的缺省函数来完成。
这个结构的定义出现在linux/fs.h文件里，是由一系列函数指针组成的。这个概念被用在内核中
的许多地方，它是不同设备层次的一个抽象格式，规定了它们的互动方式
文件操作
对设备的访问需要经过文件系统中的特殊文件，这我们在第一小节就已经知道了。不管设
备本身是与文件系统直接有关的（比如一个硬盘驱动程序）还是完全没有关系的（比如一个并
行口驱动程序），它们的特殊文件都独立于设备的具体类型。因此，设备驱动程序需要注册一组
文件操作，这些文件操作定义了设备提供的特定功能。下面是文件操作结构及其最新的框架定
义。我们把所有可能的函数都列在这里了，但很少有一个模块需要全部定义它们的情况。你会
发现这些函数的名字有许多和我们在第三章里见过的底层设备访问函数是模一样的。事实上
一旦内核确定下来需要联系哪个设备以满足操作请求，就会用设备的文件操作函数取代那些底
层的调用。
加入iaVva编程群：524621833
---
## Page 711
694
Linux程序设计
loff_t (*llseek） （struct file*.loff_t.int):
sttuct fale_operations 
ssize_t (*read) （struet file ,char . size_t.loff_t *1:
esize_t (*write}(struct fiie ·,conet char.size_t, 1off_t*):
int {readdir)(struct file ,void *,filldir_t）:
unsigned int(*poll) (struct fale *,struct pcll_table_struct *);
int (ioctl)(struct inode *,s*ruct ftle*, unsigned int.unsigned long):
ant
(*mmap) （struct file *.struct vm_area_stuct *):
int
(*open)
（struct inode *,struct fiie *);
int
(*release)(struct inode *,struct file *1:
int
（*fasyne}(int，struct ile ，int）;
(*fsyne}（struct file *.struct_entry *);
int
int
(*check_media_change)(kdev_t dev);
int (*lock) (struet file *, int, struct file_lock *);
int
(*revalidate) (kdev_t dev) ;
驱动程序需要向内核报告自己代表的设备都提供了哪些功能，为此驱动程序可以随意选择
这些文件操作函数的组合。我们来看看这些函数都是干什么用的见表21-4：
表21-4
11seek
Iseek对应着用户空间里的lseck，它的作用是改变文件结构中的操作位置，说
的明确一些就是修改file->f_pos：我们将在讨论文件结构的时候再详细介绍它。
在成功时，它返回一个新位置，失败时返同一个负数镇
pea1
rad（读）是从应用程序的角度看的说法，所以read实际上就是把数据了到用
户空间里去。如果返回值是一个正数，就是实际“读”到的字节数。负数返同值
表示出现一个错误
write
write的作用是向设备馈送数据，返回值方面与read相网
readdir
readdir只有文件系统才能使用，它的作用是读取某个子目录里的内容
po11
pol允许应用程序响应来自设备的给定事件。它在BSDUNIX里的对应函数是
select，但Linux不推界使用select，所以我们应该用poll代替它
ioet1
icul的含义是INO控制，它允许应用程序通过iocl系统调用控制设备的行为或者
从设备取得数据
mnap
mmap实现了设备地址空间到用户空间的地址映射。它可以用来提供对设备据
动程序的内部缓冲区或外设内存空间的进行直接访问的功能
uado
open是应用程序打开设备时将要调用的文件操作。它是惟
个对字符设备和
块设备都有缺省实现的函数。因此、如果你不需要或不想知道设备会在何时被打
开，就可以不对这个文件操作进行定义
f1ush
fush的作用是把缓冲区数据“冲”出去。由于字符设备不使用缓冲区，所以这
个条目只对块设备有意义
release
release是在设备关闭时将被调用的文件操作
fsync
fsydc的作用是同步内存中与酰盘上的数据状态，把输出缓冲区里尚未写到滋
盘上去的数据写出去。它在结束操作之能是不应该返回的。这个条目也只与块设
备有关
fasync
fsync将在应用程序通过femu改变设备行为时调用
check_media_change
check_media_chnge检查自从上次访问之后介质是否经过了更换。因此它只对
处理可更换介质（比如CD-ROM和软盘）的块设备有意义
revalidate
revalidate和check_modia_change是密切相关的。如果检测出更换了盘片，就需
要调用revalidac来更新设备内部的信息：rvalidate也是只对处理可更换介质的块
设备有意义
1ork
lock使用户可以镀定一个文件。它也是只对文件系统有意义
加入java编程群：524621833
---
## Page 712
第21章设备驱动程序
695
任何一个设备都不太可能需要定义所有上述这些方法。你的设备需要哪些操作，你就定义
哪些操作，而那些用不着的要设置为NULL。
当字符设备向内核进行注册的时候，设备的file_operations结构和设备的名字将添加到一个
全局性的chrdevs数组里去，这个数组是由一些device_struct结构组成的，数组的下标就是设备的
主编号。这个数组被称为字符设备切换表。device_struct结构的定义如下所示：
struct device_struct (
const char *name;
struct file_operations *fops:
},
这样，通过查看chrdevs[YOUR_MAJOR]->fops，内核就会知道如何与设备进行交谈以及设
备都支持那些人口点见图21-2。
struct device_struct chrdevs(]
我们没备的名字
*name
fops
主编号
我们设备的主编号