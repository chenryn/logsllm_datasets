particular meaning.
As noted in the beginning of this section, we cannot gener-
ically prove that, if a TLS ciphersuite is ACCE-secure, then
the tagged version of that ciphersuite is tagged-ACCE- or
tagged-ACCE-ﬁn-secure, as we have made white-box modiﬁ-
cations to the TLS protocol in introducing the SCSV/RIE
countermeasure. Thus we cannot use its security results in
a black-box manner. However, in most cases, a white-box
approach, where the actual security proof is modiﬁed or ex-
tended, should be possible, and even very easy. This was
indeed the case when we examined tagged TLS_DHE_DSS_.
Theorem 1
(Informal). Under the same assumptions
on the cryptographic building blocks as in Jager et al. [16],
TLS_DHE_DSS_ is a secure tagged-ACCE-ﬁn protocol.
The formal theorem statement and proof are omitted due to
the space limitation and appear in the full version [14]. The
proof follows almost exactly the proof by Jager et al. [16]
that TLS_DHE_DSS_ is a secure ACCE protocol. Leaking the
Finished messages does not aﬀect security due to a game
hop where, due pseudorandomness of the PRF, the Finished
messages are replaced with uniformly random values inde-
pendent of any information exchanged during the handshake.
Including arbitrary extra data in the handshake messages
does not impact security.
4.3 TLS with SCSV/RIE is multi-phase-secure
We begin by showing that including the SCSV/RIE coun-
termeasure does not weaken security: putting the Finished
messages in the ClientHello and ServerHello does not in-
troduce any vulnerabilities. Having done so, in the next
subsection we will show how including the SCSV/RIE coun-
termeasure yields a weakly secure renegotiable ACCE.
Theorem 2. Let Π be a generic tagged TLS ciphersuite
as described in Section 4.2. Assume that Π is (τ, tagged)-
tagged-ACCE-ﬁn-secure. Let Π(cid:48) denote Π with SCSV/RIE
countermeasures as described in Figure 2. For any adversary
that (τ(cid:48), mp)-breaks the multi-phase ACCE security of Π(cid:48)
with τ ≈ τ(cid:48), it holds that mp ≤ 2(cid:48), where (cid:48) is obtained from
 by replacing all instances of npa in  with npa · nke and
replacing all instances of nse in  with nse · nph. (Recall that
npa, nse, nph, and nke are the maximum number of parties,
sessions per party, phases per session, and keypairs per party,
respectively.)
Due to the page limitation we only give the proof strategy
here and refer to the anonymous full version [14] for the
details.
Proof idea: We will construct a multi-phase ACCE simula-
tor S for Π(cid:48) that makes use of a tagged-ACCE-ﬁn challenger
C for Π. S will simulate every (party, public-key) pair and
every (session, phase) pair with distinct parties and sessions
in C. For the most part, S will relay queries down to C and
return the result. However, for queries that relate to renego-
tiation (Send, Decrypt), S carefully manages the handshake
messages to transition one session in C to another.
Remark 6. A simulation similar to the one in the proof
allows us to prove that TLS with SCSV/RIE countermeasures
is a multi-phase ACCE protocol, even when diﬀerent cipher-
suites are used in diﬀerent phases. The simulator interacts
with a diﬀerent tagged-ACCE-ﬁn challenger for each cipher-
suite; when a renegotiation inside one ciphersuite will result
in a new ciphersuite, the simulator uses the Encrypt/Decrypt
queries in the old ciphersuite to encrypt the Send messages
from the handshake of the new ciphersuite. Unfortunately,
for this multi-ciphersuite simulation to work, it is essen-
tial that public keys not be shared across ciphersuites: this
technique could show that switching between an RSA-based ci-
phersuite and an ECDSA-based ciphersuite is safe. However,
to analyze using the same RSA public key in two diﬀerent
ciphersuites, one would have to take an alternative approach,
as it may not be possible to generically prove that re-using
the same public key in two ACCE protocols is safe.
4.4 TLS with SCSV/RIE is a weakly secure
renegotiable ACCE
We are now in a position to show that the use of the
SCSV/RIE countermeasure in TLS results in a weakly secure
renegotiable ACCE. We will do so generically, starting from
the consequence of the previous theorem: that TLS with
SCSV/RIE is a secure multi-phase ACCE.
Theorem 3. Let Π be a TLS ciphersuite with SCSV/RIE
countermeasures, as described in Figure 2. If Π is a (τ, mp)-
secure multi-phase ACCE protocol, and PRF is a (τ, prf )-
secure pseudorandom function, then Π is a (τ, )-weakly se-
cure renegotiable ACCE, with  = mp + prf .
The full proof of the theorem appears in Appendix A.
Intuitively, the use of the RIE countermeasure guarantees
that each party who renegotiates has the same view of (a)
395whether they are renegotiating, and (b) which handshake is
the “previous” handshake. We can chain these together to
obtain the property of a secure renegotiable ACCE: parties
who renegotiate have the same view of all previous hand-
shakes. If this is violated, either the non-renegotiable aspects
of TLS have been broken, or a collision has been found in
the computation of the renegotiation indication extension.
We can combine Theorems 2 and 3 to obtain the central
results of the paper, justifying the security of the SCSV/RIE
countermeasure:
Corollary 1. If a tagged TLS ciphersuite Π as described
in Section 4.2 is a secure tagged-ACCE-ﬁn protocol and PRF
is a secure pseudorandom function, then that TLS ciphersuite
Π with SCSV/RIE countermeasures as described in Figure 2
is a weakly secure renegotiable ACCE.
Corollary 2. Under the same assumptions as in Theo-
rem 1, TLS_DHE_DSS_ with SCSV/RIE countermeasures is a
weakly secure renegotiable ACCE protocol.
5. RENEGOTIATION SECURITY OF TLS
WITH A NEW COUNTERMEASURE
We now present a new TLS renegotiation countermeasure
that provides integrity protection for the record layer tran-
script upon renegotiation (even when previous phases’ session
keys are leaked while the phase is still active), thereby achiev-
ing the full security of Deﬁnition 4. This countermeasure is
quite straightforward: by including a hash of all record layer
messages in the renegotiation information extension, parties
can conﬁrm that they share the same view of their previous
record layers.
S
C
The renegotiation information extension already contains
a ﬁngerprint of the previous phrase’s handshake transcript
via the client_verify_data (f in(−1)
C ) and server_verify_
data (f in(−1)
) values. We modify the renegotiation informa-
tion extension to include an additional value, the ﬁngerprint
of the encrypted messages sent over the previous phase’s
record layer. In particular, if negotiating:
extC ← f in(−1)
))
(1)
where ms(−1) is the previous phase’s master secret, H is
a collision-resistant hash function, and RT (−1)
is
the client’s view of the previous phase’s record layer tran-
script; the server uses RT (−1)
instead. Appropriate
checks are performed by the server. With this additional
information, the two parties will now not complete renego-
tiation unless they have matching views of the record layer
transcripts from the previous phase.
(cid:107) PRF(ms(−1), label5(cid:107)H(RT (−1)
(cid:107)RT (−1)
(cid:107)RT (−1)
s
(cid:107)RT (−1)
r
s
s
r
r
In practice, it is not diﬃcult to, on an incremental basis,
compute hashes of the ciphertexts sent and received over
the record layer in that phase. In particular, it is not neces-
sary to store all record layer messages to input to the hash
function all at once, as common programming APIs for hash
functions allow the hash value to be provided incrementally.
However, the cost of the MAC computation can dominate
the cryptographic cost of record layer computations [15]. The
new countermeasure is only suitable for TLS communications
over a reliable channel and could not be used with DTLS
communications over an unreliable channel.
Alternatively, if the sLHAE scheme for the record layer is
implemented as encrypt-then-MAC or MAC-then-encrypt,
it should be possible to use MAC contained in the last en-
crypted message of the sLHAE scheme instead of the hash
value computed above; this would result in no additional
performance impact and would be easier to implement.
Theorem 4. Let Π be a TLS ciphersuite with the original
RIE countermeasures as in Figure 2 but using extC as in
equation (1). If Π is a (τ, mp)-secure multi-phase ACCE
protocol, H is a (τ, h)-collision-resistant hash function, and
PRF is a (τ, prf )-secure pseudorandom function, then Π is a
(τ, )-secure renegotiable ACCE, where  = mp + h + prf .
The proof proceeds similarly to that of Theorem 3. The
main diﬀerence is that, in one case, the removal of restrictions
A6 and A7 means we can no longer reduce down to a viola-
tion of conﬁdentiality/integrity in the multi-phase security
of Π, and instead have to rely on the new countermeasure to
detect non-matching record layer transcripts and reduce to
the security of the PRF and hash function.
We refer to the full version [14] for the full proof.
6. CONCLUSION
Although two-party protocols for establishing secure com-
munication have been extensively studied in the literature
and are widely used in practice, this is the ﬁrst work to
consider the important practical issue of renegotiation, in
which parties update one or more aspects of their connection
— authentication credentials, cryptographic parameters, or
simply refresh their session key. The importance of correctly
implementing renegotiation was highlighted by the 2009 at-
tack of Ray and Dispensa on how certain applications process
data from renegotiable TLS connections.
We have developed a formal model for describing the secu-
rity of renegotiable cryptographic protocols, focussing on au-
thenticated and conﬁdential channel establishment (ACCE)
protocols. We have speciﬁcally analyzed renegotiation in
the TLS protocol, identifying the original attack of Ray and
Dispensa in our model. We have provide a generic proof
that the SCSV/RIE countermeasure oﬀers good protection
against renegotiation attacks, and give a new countermea-
sure that provides renegotiation security even in the face
of slightly stronger adversaries. In practice, the SCSV/RIE
countermeasure may be good enough.
Renegotiation, reauthentication, and rekeying are impor-
tant features of many other applied cryptographic protocols.
Future applied work includes examining the security of rekey-
ing in protocols such as SSH or IKEv2 in our model. Open
theoretical questions include how to adapt our approach for
deﬁning secure renegotiation to other primitives, in particular
authenticated key exchange protocols. The overall security of
TLS still has many important open questions, including the
security of other TLS ciphersuites and the formal analysis of
other complex functionality such as alerts and error messages.
TLS session resumption [9, §F.1.4] is another important func-
tionality of TLS, and it appears that our multi-phase ACCE
model may be the right model in which to analyze its security,
another interesting open problem. Given that attacks con-
tinue to be found outside the core key agreement component
of TLS, further research into modelling the security of TLS
in increasingly realistic scenarios is well-motivated.
Acknowledgements
The authors gratefully acknowledge discussions with Colin
Boyd, Cas Cremers, Kenny Paterson, J¨org Schwenk, and
396the authors of the SCSV/RIE countermeasure [26], and the
advice of anonymous reviewers. The research was supported
by an Australian Technology Network–German Academic
Exchange Service (ATN-DAAD) joint research cooperation
scheme grant. D.S. was supported by an Australian Research
Council (ARC) Discovery Project.
7. REFERENCES
[1] M. Bellare and P. Rogaway. Entity authentication and
key distribution. In Proc. CRYPTO’93, vol. 773 of
LNCS, pp. 232–249.
[2] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti,
and P.-Y. Strub. Implementing tls with veriﬁed
cryptographic security. In IEEE Symposium on Security
& Privacy, 2013. http://mitls.rocq.inria.fr/.
[3] S. Blake-Wilson, M. Nystroem, D. Hopwood,
J. Mikkelsen, and T. Wright. Transport Layer Security
(TLS) extensions, June 2003. RFC 3546.
[4] D. Bleichenbacher. Chosen ciphertext attacks against
protocols based on the RSA encryption standard PKCS
#1. In Proc. CRYPTO’98, vol. 1462 of LNCS, pp. 1–12.
[5] C. Brzuska, M. Fischlin, N. P. Smart, B. Warinschi,
and S. C. Williams. Less is more: Relaxed yet
composable security notions for key exchange. Int. J.
Information Security, 12(4):267–297.
[6] R. Canetti and H. Krawczyk. Security analysis of IKE’s
signature-based key-exchange protocol. In Proc.
CRYPTO 2002, vol. 2442 of LNCS, pp. 143–161.
[7] T. Dierks and C. Allen. The TLS protocol version 1.0,
January 1999. RFC 2246.
[8] T. Dierks and E. Rescorla. The Transport Layer
Security (TLS) protocol version 1.1, April 2006. RFC
4346.
[9] T. Dierks and E. Rescorla. The Transport Layer
Security (TLS) protocol version 1.2, August 2008. RFC
5246.
[10] S. Farrell. Why didn’t we spot that? IEEE Internet
Computing, 14(1):84–87, Jan.–Feb. 2010.
[11] A. O. Freier, P. Karlton, and P. C. Kocher. The Secure
Sockets Layer (SSL) protocol version 3.0, August 2011.
RFC 6101; republication of original SSL 3.0
speciﬁcation by Netscape of November 18, 1996.
[12] S. Gajek, M. Manulis, O. Pereira, A.-R. Sadeghi, and
J. Schwenk. Universally composable security analysis of
TLS. In Proc. ProvSec 2008, vol. 5324 of LNCS, pp.
313–327.
[13] R. Gelashvili. Attacks on re-keying and renegotiation in
key exchange protocols, April 2012. Bachelor’s thesis,
ETH Zurich.
[14] F. Giesen, F. Kohlar, and D. Stebila. On the security of
TLS renegotiation (full version), 2013.
http://eprint.iacr.org/2012/630.
[15] V. Gupta, D. Stebila, S. Fung, S. C. Shantz, N. Gura,
and H. Eberle. Speeding up secure web transactions
using elliptic curve cryptography. In Proc. NDSS 2004.
The Internet Society, Feb. 2004.
[16] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk. On the
security of TLS-DHE in the standard model. In Proc.
CRYPTO 2012, vol. 7417 of LNCS, pp. 273–293. Full
version: http://eprint.iacr.org/2011/219.
[17] J. Jonsson and B. S. Kaliski Jr. On the security of RSA
encryption in TLS. In Proc. CRYPTO 2002, vol. 2442
of LNCS, pp. 127–142.
[18] F. Kohlar, S. Sch¨age, and J. Schwenk. On the security
of TLS-DH and TLS-RSA in the standard model, 2013.
http://eprint.iacr.org/2013/367.