with similar tests produced by Hulk. We then key in on the
ad injection extensions that we also observe impacting clients
in the wild. In particular, we manually construct a list of all
of the top 65 injection libraries we observe correlated with
ad injection on Google websites (discussed in Section III-A)
and scan the network traces produced by WebEval and Hulk
for these same scripts. If we observe network requests for
injection libraries and the presence of rogue DOM elements,
we label the extension as an ad injector. Of the extensions we
analyze, we classify a total of 50,870 as ad injectors.
2) Binaries: We rely on Google’s Safe Browsing infras-
tructure to dynamically scan hundreds of thousands of binaries
daily, the details of which are previously described by Rajab
et al [28]. Safe Browsing fetches binaries via crawls of
the Internet as well as from payloads delivered by websites
serving drive-by downloads in the wild [27]. As part of Safe
Browsing’s binary analysis, the system loads a virtualized
environment and installs the binary under analysis. The system
then launches Chrome and Internet Explorer and directs each
browser to fetch a suite of websites which includes Google
properties. The system logs all network trafﬁc throughout this
155155
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
that fetch a single injection library as opposed to multiple
libraries as not to conﬂate the websites targeted by individual
libraries. In total, we visit 1,400 pages and manually identify
the insertion or modiﬁcation of ads.
Of the Alexa Top 100, we observe in-property injections
into 75% of pages. These websites span search engines
including google.* and yahoo.*; shopping pages including
amazon.*, alibaba.com, ebay.com, and craigslist.org; video
sites including youtube.com, dailymotion.com, and xvideo.com
(adult); and other popular news and media sites. Based on the
most popular websites targeted by multiple injection libraries,
we elect to use google.com, amazon.com, and walmart.com
as trigger pages for inducing ad injector behaviors. These
websites are convenient as we can easily generate a set of 100
representative queries for each site. For Google, we obtain a
list of the top 100 search queries that contain advertisements.
For Amazon and Walmart, each site publishes a leader board
of the top 100 best selling products [2], [35]. While these 300
queries will not provide complete coverage of the long tail of
creatives accessible to ad injectors, they offer a starting point
for understanding the advertising relationships underpinning
injectors.
2) Enumerating Intermediaries: We select a random sam-
ple of ad injection extensions and successively visit each of our
300 trigger pages with each extension installed on a client out-
side Google’s IP space to avoid cloaking. We identify creatives
inserted into each property by extending our client-side DOM
measurement technique. In particular, after each page ﬁnishes
loading and a predeﬁned wait expires, we inject a script that
scans all , , , , and 
elements. For each property we develop a comprehensive
whitelist of JavaScript events, domains, and div classes and
IDs that appear independent of ad injectors, also accounting
for page dynamism. We consider any element that violates this
whitelist as a potential ad to click on. Unlike in our client-side
measurement, we are able to access nested cross-origin content
by running Chrome with same-origin protections disabled. As
such we can observe all injected content, not just that in the
parent frame. This is critical as many intermediaries syndicate
content, with syndication represented by layered iframes where
the lowest layer contains the creative.
We ﬁnally uncover the ad revenue chain underpinning a
creative by clicking on one injected ad per page if an ad
is present. During this process we monitor the creation of
new tabs and examine all network trafﬁc produced by Chrome
until the browser fetches the ﬁnal landing page. We natively
generate clicks rather than via JavaScript in order to support
Flash ads. We repeat this process indeﬁnitely: fetching one
extension from a circular task queue, running it against a
trigger page, and then tearing down the browser session after
each successful click before moving on to the next trigger
page. In total, we generate 114,999 ad revenue chains from 398
distinct extensions. Of these, 62,237 were from ads injected
on Amazon, 37,718 from ads on Google, and 15,044 ads from
Walmart.
Dataset
Client DOM reports
Unique extensions
Ad injection extensions
Unique binaries
Ad injection binaries
Ad revenue chains
Source
Client-side scan via
Google properties
Dynamic evaluation
via WebEval, Hulk
Dynamic evaluation
via Safe Browsing
Trigger
click
analysis on Google,
Amazon, Walmart
and
Sample Size
102,562,842
> 1,000,000
50,870
> 25,000,000
34,407
114,999
Table I: Summary of datasets produced or consumed by our analysis
pipeline.
D. Dataset Summary
We summarize the datasets produced and consumed by
each stage of our pipeline in Table I. In total, we collected
102,562,842 client-side DOM reports through which we iden-
tiﬁed the 65 most popular ad injectors. We then statically ana-
lyzed and dynamically executed over 1 million extensions and
25 million binaries in search of these ad injectors, identifying
over 50,870 culpable extensions and 34,407 binaries. Finally,
we executed a sample of the ad injection extensions to uncover
114,999 clickchains to pinpoint
intermediaries involved in
supporting ad injection. The remainder of this work focuses
on insights gleaned from each of these datasets.
E. Limitations
1) Client DOM reports: Our design has a number of lim-
itations imposed by vantage points, browser security models,
size constraints, and operating in a hostile environment, which
may bias our technique towards catching speciﬁc ad injectors.
While we believe our system can yield meaningful insights,
we are nevertheless cautious to draw conclusions about all ad
injectors in the wild.
Visibility into the Internet: Our experiment’s vantage points
are limited to Google websites. While we conﬁrmed the ad
injectors we identify target many of the Alexa Top 100, and
thus generalize, there may be other ad injectors that tamper
solely with non-Google sites. We believe it is critical for other
websites to repeat our study to capture the full extent of ad
injection in the wild.
Same-Origin Restrictions: Browsers enforce a same-origin
policy that restricts our client-side analysis from accessing
content outside the current page’s origin. Consequently, nested
content in cross-origin frames is invisible to our scanning
beyond the outermost container. As such, our reports may
contain a subset of all , , or  elements
that browsers render on a page and a narrower perspective on
the ad injectors responsible.
Detecting Modiﬁed Events: Our whitelist consists of both
domains as well as JavaScript events associated with page
elements. While this JavaScript whitelist accurately captures
onClick and other explicit onMouse handlers, events added
to elements via the addEventListener method are invisible
156156
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
to our scanner. This limitation stems directly from the lack of
JavaScript support for enumerating event handlers without de-
bug privileges or intercepting calls to the addEventListener
method (which might otherwise result in race conditions).
As such, some tampered elements may go undetected by our
system.
Whitelist Speciﬁcity: We elect for a domain whitelist rather
than a full URI whitelist for both space constraints on the size
of our script payload as well as for contending with highly
dynamic page content where we cannot easily generate a
comprehensive a priori whitelist. Consequently, this approach
will overlook injected elements that direct
to whitelisted
domains (e.g., new DoubleClick ads on pages that previously
served DoubleClick ads) or when ad injectors tamper with
URL parameters (in particular afﬁliate IDs). Again, this may
result in some injected or tampered elements going undetected.
Report Tampering: Our ﬁnal concern relates to operating in a
hostile environment where we cannot trust a client’s browser,
operating system, or network connection to not interfere with
our scanning or reporting. While we believe this is unlikely as
we deployed our detection scheme over a short period without
any external signs of enforcement (e.g., we never interfere
with ad injectors), we rely on an encrypted delivery and
reporting mechanism that is uniquely keyed per client. (The
details of this mechanism are beyond the scope of this paper.)
We note that such protections will not prevent a determined
adversary, but the delivery mechanism provides a degree of
application-level protection against rudimentary man-in-the-
middle attacks.
2) Binary & Extension Coverage: Our coverage of binaries
and extensions is limited to software that Safe Browsing,
WebEval, and Hulk encounter. For each of these systems,
there is a possibility of ad injection software cloaking against
dynamic analysis or simply not triggering for the tests we
execute. We provide an estimate of our coverage of software-
based ad injection later in Section V.
3) Advertiser & Intermediary Coverage: Our decision to
use 300 Google, Amazon, and Walmart search and product
results limits the scope of creatives that ad injectors may
serve. This restriction in part arises due to the tedious, some-
times manual effort required to construct stable whitelists for
highly dynamic websites. Consequently, we will miss creatives
tailored speciﬁcally to the long tail of products, news sites,
or pornographic content. As such, our clickchain analysis
only captures a subset of possible advertising relationships.
Furthermore, we only collect a relatively small sample of
clickchain data to minimize the ad revenue impact we have
on advertisers buying trafﬁc from ad injectors. We make no
effort to obfuscate our IP address or evade any automated
clicking protections used by advertisers.
IV. AD INJECTION IN THE WILD
Figure 5: Prevalence of ad injection in client-side DOMs, broken
down by browser. Dates are 2014. Gaps in coverage result from
Google deploying our client-side experiment for short periods before
electing for continuous deployment. See text for discussion of the a
and b changes.
the globe. We ﬁnd that many ad injectors are organized as
afﬁliate programs. In this model, third parties are responsible
for obtaining installs while ad injection libraries provided
by the afﬁliate program manage advertisement selection. We
provide a perspective of the most popular injection libraries,
the number of afﬁliates each program attracts, each afﬁliate’s
user base, and how programs compete.
A. Prevalence of Ad Injection
Of the client-side reports we collect, we ﬁnd that 5,339,913
(5.2%) contain evidence of ad injection. If we consider IP
addresses as unique client identiﬁers, we ﬁnd that injections
impact a daily average of 5.5% of unique daily IPs.3 Figure 5
contains a detailed breakdown of injection levels over time per
browser.
Chrome, the most popular browser in our dataset, is the most
commonly affected platform (5–8% of page views). During
our measurement, we observed two declines in impacted
Chrome views around mid-June and late-July. We believe the
ﬁrst drop (a) is related to the Chrome Web Store lockdown
where Chrome prevented side loading extensions on Windows
that were not also in the Chrome Web Store [20]. The second
drop (b) correlates with the enforcement of an updated Chrome
Web Store policy on “single purpose” extensions [19], e.g.,
explicitly prohibiting marketing an extension as a game and
then also surreptitiously performing ad injection on search
results. We note that ad injection, when properly disclosed to
users, is not explicitly prohibited by the Chrome Web Store.
While both policies appear to impact ad injection levels, there
remains a substantial volume of ad injection on Chrome.
For Internet Explorer, ad injection levels have remained
steady, impacting around 2% of page views. Conversely, nearly
6% of Firefox views exhibited signs of ad injection, though
Ad injection has entrenched itself as a cross-browser mone-
tization platform that impacts tens of millions of users around
3We note that dynamic leases on IPs and NATing inject a certain noise
into this user estimate. Our data collection policy precludes mechanisms to
uniquely identify clients (e.g., cookies) needed to correct for this uncertainty.
157157
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
Rank
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
Ad Injection Library
superﬁsh.com
api.jollywallet.com
visadd.com
intext.nav-links.com
{crdrdpjs, rvzrjs, ...}.info
ads.tfxiq.com
noproblemppc.com
clkmon.com
datafastguru.info
easyinline.com
donation-tools.org
rjs.mzcdn.com
apimegabrowsebiz-a.akamai...
fcdn.smileyswelove.com
apibrowsemarknet-a.akamai...
apisurftasticnet-a.akamai...
jscripts.org
apiwisenwizardne-a.akamai...
cdn.taboola.com
savingsslider-a.akamai...
apimyﬁndrightco-a.akamai...
jsutils.net
static.dreamsadnetwork.com
gyr.mappingsection.net
cluster.adultadworld.com
Impacted Views
3,751,167
2,292,685
1,337,099
1,231,504
665,505
472,745
423,682
358,863
294,261
206,157
147,368
127,849
105,844
94,665
86,722
64,785
63,345
60,656
60,213
59,839
59,344
45,113
24,780
22,490
20,846
Popularity
3.92%
2.40%
1.40%
1.29%
0.70%
0.49%
0.44%
0.38%
0.31%
0.22%
0.15%
0.13%
0.11%
0.10%
0.09%
0.07%
0.07%
0.06%
0.06%
0.06%
0.06%
0.05%
0.03%
0.02%
0.02%
Table II: List of the top 25 ad injection libraries we observe in client
trafﬁc. We combine 224 algorithmically generated domains such as
crdrdpjs.info and rvzrjs.info that all host the same library into a single
grouping for clarity.
this has steadily declined since we began our measurement. We
are unaware of any action taken by Firefox against extensions
or hardening the browser against DOM tampering that would
explain this decline.4
B. Most Popular Injectors
A select few injection libraries dominate the ad injection
ecosystem, detailed in Table II. We ﬁnd that each injector
is diligent in universally supporting browsers; of the top 25
injectors, all target Chrome, 24 target Firefox, and 23 target
Internet Explorer. Far and away, superﬁsh.com is the most pop-
ular program and appears in 3.9% of Google views.5 Its parent
company markets itself as an image similarity search, with the
injection library offering alternative shopping suggestions in
the form of ads on shopping or search properties a client visits.
The second most popular program is jollywallet.com (2.4%),
which overwrites afﬁliate parameters for URLs on shopping
sites to monetize cost-per-acquisition revenue sharing models
without actually driving trafﬁc to the shopping partner.6 While
this does not fall directly into our deﬁnition of ad injection, we
nevertheless include it in our subsequent analysis as it often
co-occurs with other injection libraries. It is the only afﬁliate
4We note that the decline in Firefox injection levels is independent of the
browser’s update release cycle. We observed no discernible drop in injection
levels between version changes.
5Subsequent to our study, it emerged that a popular laptop vendor, Lenovo,
had pre-installed Superﬁsh on some of their devices [23]. Our dataset predates
this event, though given the range of installation vectors we observe, we
believe OEM packaging is secondary to installs originating from download
bundles and malware.
6We cannot directly detect afﬁliate modiﬁcations made by Jollywallet with
the injection library that
our current client-side scan. Instead, we detect
performs afﬁliate re-writing to measure impacted clients.
5%
4%
3%
n
o
i
t
c
e
n
j
i
d
a
h
t
i
w
s
e
g
a
P
2%
1%
0%
Jun
Jul
Aug
Sep
Oct
{crdrdpjs...}.info
ads.tfxiq.com
api.jollywallet.com
cdn.visadd.com
intext.nav−links.com
www.superfish.com
Figure 6: Prevalence of the top ad injection libraries in Google pages
over time.
re-writer we encounter in the top 100 injection libraries. We
provide a more detailed treatment of each the top injection
libraries later in Section VII.
Each injection library’s prevalence is constantly in ﬂux,
as outlined in Figure 6. We observe a substantial drop in
superﬁsh.com injections in early August that correlates with
the Chrome Web Store removing deceptive extensions [19].
Conversely, visadd.com has experienced a steady growth from
roughly 0.5% of trafﬁc to about 1.4% at
the end of our
measurement. This same period shows a substantial decline for
ads.tfxiq.com and intext.nav-links.com. The process that drives
the adoption or deactivation of injection libraries is unclear,
but the most popular programs appear to actively cultivate a