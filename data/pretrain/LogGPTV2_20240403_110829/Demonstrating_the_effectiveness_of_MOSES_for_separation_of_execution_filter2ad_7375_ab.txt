force the constraint that applications can only access data tainted
with the label of the same SP name. For instance, in Figure 1 the
data in the “Work” SP is tainted with the label “Work”. The se-
curity policies of the “Work” SP grant access to the data only to
applications contained in the same SP.
The MOSES Hypervisor (MH) is responsible for de/activating
SPes. When an SP is activated, the MH loads the security policies
of the SP in the PEM and enables the applications associated to the
SP. Deactivating an SP is the opposite of activation: ﬁrst the appli-
cations are disable and then the policies in the PEM are unloaded.
However, it may require an extra step that is the killing of running
applications. When an application requests access to a piece of in-
formation, the PEM grants access only if a security policy in the SP
grants such request.
The switching between SPes can be manually controlled by the
user. However, MOSES provides a more sophisticated mechanism
based on the context. In MOSES, an SP can be associated with a
context expression that is a boolean expression on contextual data
such as location and time. When a given context expression is
evaluated to true MH activates the respective SP. The evaluation
of context expressions is a task performed by the Context Moni-
toring Module (CMM). For instance, the “Work” SP can be asso-
ciated with a context expression that is true only during working
hours and within the ofﬁce facilities. In this way, the employee is
allowed to access applications and data within her private proﬁle
only outside the working period and environment.
The creation of new SPes and the editing of existing ones can be
done by means of the MOSES Conﬁguration Manager (MCM).
The MCM allows the users to associate applications and data to an
SP. Moreover, the MCM supports the speciﬁcation of security poli-
cies and context expressions. The MSM supports the speciﬁcation
The Proﬁle Manager App is an application that allows the user
to create an SP and modify existing ones. The application also
allows the user to deﬁne and edit context expressions that later
the user can associate with an SP. The Proﬁle Manger App stores
and retrieves the context expressions to and from the ContextDef
content provider. When a new context deﬁnition is stored in Con-
textDef, a conﬂict check is performed to avoid that the new context
deﬁnition is overlapping with the context deﬁnitions already stored
in the ContextDef. As a matter of fact, if two or more context
deﬁnitions overlap then it might be the case that in a given situa-
tion more than one SP needs to be activated. We decided to have
here a very restrictive approach by avoiding that overlapping con-
text deﬁnitions can be stored in the ContextDef. However, as part
of our future research direction we will explore conﬂict resolution
strategies such as prioritising each SP to select the one with highest
priority.
Figure 2(a) shows a screenshot of the main activity list of the
Proﬁle Manager App.
If the user selects to edit an existing SP,
the application retrieves the deﬁnitions of all the SPes stored in the
Proﬁle Store. The list of existing SPes is shown to the user as in
Figure 2(b). Clicking on an SP in the list will bring the user to the
editing activity list (Figure 2(c)). In MOSES, each SP has assigned
an owner that is the entity authorised to deﬁne and modify the SP.
The owner of an SP can be the user of the device that creates her
own SP. However, a user can deploy on her device SPes deﬁned by
third-parties. To protect the SP from unauthorised modiﬁcation, we
support several mechanisms for authenticating the SP owners, such
as passwords, certiﬁcate, and biometric authentication. In case the
user has no clearance, such as in the case of the “Work” SP, then a
error message will be shown as in Figure 2(d).
3.2 Security Proﬁle Switching
One of the main contributions of MOSES compared to other sim-
ilar approaches is the use of context for controlling the activation
and deactivation of SPes. In MOSES, each SP is associated with
one or several contexts. A context is deﬁned as a boolean expres-
sion over raw data from the device sensors (such as from GPS,
clock, Bluetooth, etc.) and logical sensors, that is functions that
combine raw data from physical sensors to capture speciﬁc user
behaviours, such as detecting when the user is running. The evalu-
ation of context expressions is executed by the Context Monitoring
Module (CMM) (see Figure 1). When a new context expression is
satisﬁed, the CMM notiﬁes the MOSES Hypervisor (MH). If the
new context expression is associated with the SP that is currently
active then no further actions are needed. Otherwise, the MH initi-
ates the SP switching.
999cursor. Using the CursorWindow allows us to ﬁlter out from
the cursor data only part of the information. In this way, our en-
forcement mechanism achieves a ﬁne-grained ﬁlter capability. For
instance, if a work application retrieves the contact entries from the
contact provider, all the private contact entries can be ﬁlter out from
the data contained in the CursorWindow before it is returned to
the application.
Other PEPs are connected with some classes of the Java Frame-
work Library (JFL) in the Dalvik Virtual Machine. In particular, the
PEP-2 is connected with the Socket class for controlling network
trafﬁc even if sent over an encrypted socket (SSL). In the Socket
class, we have modiﬁed the socket.open(address) method
to inspect the address to where the data is sent. In this way, we
can restrict the use of only authorised addresses or substitute the
address speciﬁed by the application with an address deﬁned by the
user. By modifying the sendStream() method, we are able to
intercept the data before it is sent and perform some actions, such
as ﬁltering or substitutions. Finally, for capturing operations on the
ﬁle system, such as reading and writing on the local storage, the
PEP-3 is connected with the OSFileSystem class.
4. REFERENCES
[1] Eric Chien. The motivations of recent android malware.
http://www.symantec.com/content/en/us/
enterprise/media/security_response/
whitepapers/motivations_of_recent_
android_malware.pdf.
[2] Gartner says worldwide smartphone sales soared in fourth
quarter of 2011 with 47 percent growth. http://www.
gartner.com/it/page.jsp?id=1924314.
[3] Gartner survey shows byod is top concern for enterprise
mobile security. http://www.gartner.com/it/
page.jsp?id=2048617.
[4] Unisys establishes a bring your own device (byod) policy.
http://www.insecureaboutsecurity.com/
2011/03/14/unisys_establishes_a_bring_
your_own_device_byod_policy/.
[5] Technische Universitat Dresden and University
of Technology Berlin. L4android.
[6] Matthias Lange, Steffen Liebergeld, Adam Lackorzynski,
Alexander Warg, and Michael Peter. L4android: a generic
operating system framework for secure smartphones. In
Proceedings of the 1st ACM workshop on Security and
privacy in smartphones and mobile devices, SPSM ’11, pages
39–50, New York, NY, USA, 2011. ACM.
[7] Giovanni Russello, Mauro Conti, Bruno Crispo, and Earlence
Fernandes. Moses: supporting operation modes on
smartphones. In Vijay Atluri, Jaideep Vaidya, Axel Kern, and
Murat Kantarcioglu, editors, SACMAT, pages 3–12. ACM,
2012.
[8] Yang Xu, Felix Bruns, Elizabeth Gonzalez, Shadi Traboulsi,
Klaus Mott, and Attila Bilgic. Performance evaluation of
para-virtualization on modern mobile phone platform. In
Proceedings of the International Conference on Computer,
Electrical, and Systems Science, and Engineering, 2010.
(a)
(b)
(c)
(d)
Figure 2: Screenshots of the Proﬁle Manager App. (a) Main
activity view. (b) View of the existing Security Proﬁle. (c) Ac-
tivities for editing an existing Security Proﬁle. (d) Message to a
user that tries to edit a proﬁle with no clearance.
The switching of SPes consists in executing the following steps.
Firstly, the MH disables all the applications associated with the cur-
rent SP. If applications are still active then the MH forces them to
terminate. Secondly, the MH disables the set of security policies
of the current SP that are stored in the Policy Enforcement Module
(PEM). Thirdly, the set of security policies associated with the new
SP are enabled in the PEM. Finally, the MH retrieves the list of
applications of the new SP and enables them.
3.3 Security Policy Enforcement
The enforcement of the security policies happens within the Pol-
icy Enforcement Module (PEM). When an application requests ac-
cess to a resource, the Policy Enforcement Point (PEP) intercepts
such a request. The PEP collects information about application
UID, the resource being accessed and the type of operation. The
PEP forwards this information to the Policy Decision Point (PDP).
The PDP uses the information received by the PEP to evaluate
the security policies relevant to the request stored in the Policy
Provider. Based on the evaluation of the policies, the PDP might
decide either to allow or disallow the request. The PDP informs the
PEP of the decision and then it is the responsibility of the PEP to
take the necessary actions for the enforcement of such a decision.
In Android, several components are responsible for mediating
access requests of applications to the device resources. Therefore,
we need to connect several PEPs with these components within
the Android Middleware to intercept such requests and to enforce
the PDP decisions. The PEP-1 is connected with the LibBinder
module for intercepting requests to access simple resources, such
as device ID (IMEI), phone number and location data, as well as
complex data such as user’s calendar and contact entries.
In the LibBinder, we intercept the standard cursor from where
we extract the CursorWindow. The CursorWindow provides
methods that can be used for modifying the data contained in the
1000