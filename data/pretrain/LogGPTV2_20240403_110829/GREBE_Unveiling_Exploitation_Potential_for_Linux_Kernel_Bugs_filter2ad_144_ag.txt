protection
“general
[40] syzbot,
to
2020,
scatter-
https://syzkaller.appspot.com/bug?id=
in
[41] syzbot,
walk copychunks,”
1fd1d44caf96ca464e1c1f19299d1f3e7558f6e5.
in
corrupted
“BUG:
2018,
2020,
b9b37a7aaeb4a4e2357b2dfdd1f689e3ffa66282.
[42] syzbot,
“general
protection
[43] syzbot,
2018,
695527bd03b09f741819baddcd231c16fe014a48.
in
protection
“general
fault
2020,
0d93140da5a82305a66a136af99b088b75177b99.
kernel
“BUG:
handle
unable
[44] syzbot,
pcpu freelist populate,”
id=85fd017144b9b1d6761870ff71852d15e4cdd44e.
fault
protection
“general
[45] syzbot,
nel accept,”
b0e30ab5186d097b8e3e23e8ca971fbf1cf54659.
2019,
[46] syzbot,
“WARNING:
2020,
6a039858238a38cbc7f372607fc5d49f4469cf2c.
[47] syzbot,
“WARNING:
ucma event handler,”
d5222b3e1659e0aea19df562c79f216515740daa.
2020,
[48] syzbot,
“general
protection
2020,
575a090948f98f28593563c9d9d9b343eb39bbb4.
[49] syzbot,
“KASAN:
bitmap ip add,”
3a6c9972ff471c4dbc3f45e83dd5fa2f18cb82a4.
2020,
bad
in
https://syzkaller.appspot.com/bug?id=
balance
unlock
in
fault
syscall return slowpath,”
https://syzkaller.appspot.com/bug?id=
slab-out-of-bounds
in
https://syzkaller.appspot.com/bug?id=
read
tipc nl node dump monitor peer,”
com/bug?id=ddaf58be21bc0aacece5a53ab1ae5db7e89f5bb0.
2019,
use-after-free
in
https://syzkaller.appspot.
read
[56] “Exploit
for
#6a03986,”
2021,
https://www.dropbox.com/sh/
pk12ajnrw16hdc8/AACuIC2c0my7-i9RZkk87nCNa.
[57] H. Han and S. K. Cha, “IMF: Inferred model-based fuzzer,” in Pro-
the 24th ACM SIGSAC Conference on Computer and
ceedings of
Communications Security (CCS), 2017.
[58] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna,
C. Kruegel, J.-P. Seifert, and M. Franz, “PeriScope: An effective probing
and fuzzing framework for the hardware-os boundary,” in Proceedings of
the 2019 Network and Distributed System Security Symposium (NDSS),
2019.
[59] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley, “AEG:
Automatic exploit generation,” in Proceedings of the 2016 Network and
Distributed System Security Symposium (NDSS), 2011.
[60] D. Brumley, P. Poosankam, D. X. Song, and J. Zheng, “Automatic
patch-based exploit generation is possible: Techniques and implications,”
in Proceedings of the 29th IEEE Symposium on Security and Privacy
(S&P), 2008.
[61] T. Bao, R. Wang, Y. Shoshitaishvili, and D. Brumley, “Your exploit is
mine: Automatic shellcode transplant for remote exploits,” in Proceed-
ings of the 38th IEEE Symposium on Security and Privacy (S&P), 2017.
[62] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna,
“Firmalice - automatic detection of authentication bypass vulnerabilities
in binary ﬁrmware,” in Proceedings of the 2015 Network and Distributed
System Security Symposium (NDSS), 2015.
[63] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“SoK:(state of) the art of war: Offensive techniques in binary analysis,”
in Proceedings of the 37th IEEE Symposium on Security and Privacy
(S&P), 2016.
[64] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
fuzzing through selective symbolic execution,” in Proceedings of the
Network and Distributed System Security Symposium (NDSS), 2016.
[65] S. Heelan, T. Melham, and D. Kroening, “Automatic heap layout
manipulation for exploitation,” in Proceedings of the 27th USENIX
Security Symposium (USENIX Security), 2018.
[66] S. Heelan, T. Melham, and D. Kroening, “Gollum: Modular and greybox
exploit generation for heap overﬂows in interpreters,” in Proceedings of
the 26th ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2019.
[67] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu,
K. Chen, and W. Zou, “Revery: From proof-of-concept to exploitable,”
in Proceedings of the 25nd ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2018.
[68] I. Yun, D. Kapil, and T. Kim, “Automatic techniques to systematically
discover new heap exploitation primitives,” in Proceedings of the 29th
USENIX Security Symposium (USENIX Security), 2020.
[69] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, “From
Collision To Exploitation: Unleashing use-after-free vulnerabilities in
linux kernel,” in Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security (CCS), 2015.
[70] Y. Chen and X. Xing, “SLAKE: Facilitating slab manipulation for
exploiting vulnerabilities in the linux kernel,” in Proceedings of the 26th
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2019.
[71] K. Lu, M.-T. Walter, D. Pfaff, and S. N¨urnberger and Wenke Lee and
Michael Backes, “Unleashing use-before-initialization vulnerabilities in
the linux kernel using targeted stack spraying,” in Proceedings of the
2017 Network and Distributed System Security Symposium (NDSS),
2017.
[72] H. Cho, J. Park, J. Kang, T. Bao, R. Wang, Y. Shoshitaishvili, A. Doup´e,
and G.-J. Ahn, “Exploiting uses of uninitialized stack variables in linux
kernels to leak kernel pointers,” in 14th USENIX Workshop on Offensive
Technologies (WOOT), 2020.
[73] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, “ret2dir: Re-
thinking kernel isolation,” in Proceedings of the 23rd USENIX Security
Symposium (USENIX Security), 2014.
[74] W. Wu, Y. Chen, X. Xing, and W. Zou, “KEPLER: Facilitating control-
ﬂow hijacking primitive evaluation for linux kernel vulnerabilities,”
in Proceedings of
the 28th USENIX Security Symposium (USENIX
Security), 2019.
list
mousedev release,”
https://syzkaller.appspot.com/bug?id=
fault
bpf tcp close,”
https://syzkaller.appspot.com/bug?id=
in
hci event packet,”
https://syzkaller.appspot.com/bug?id=
to
2020,
in
https://syzkaller.appspot.com/bug?
request
paging
ker-
https://syzkaller.appspot.com/bug?id=
in
Odebug
bug
tcf queue work,”
https://syzkaller.appspot.com/bug?id=
in
[50] syzbot,
“KASAN:
use-after-free
in
https://syzkaller.appspot.com/bug?id=
2020,
ip6 dst destroy,”
27ae1ae5c54e09f8c86dd9428df048e7886be6dc.
use-after-free
in
https://syzkaller.appspot.com/bug?id=
sctp auth free,”
cbb289816e728f56a4e2c1b854a3163402fe2f88.
“KASAN:
2020,
read
read
[51] syzbot,
[52] syzbot,
“KASAN:
slab-out-of-bounds
hci extended inquiry result evt,”
com/bug?id=4bf11aa05c4ca51ce0df86e500fce486552dc8d2.
2020,
in
https://syzkaller.appspot.
read
[53] syzbot,
2018,
“KASAN:
slab-out-of-bounds
in
https://syzkaller.appspot.com/bug?id=
sha512 ﬁnal,”
e4be30826c1b7777d69a9e3e20bc7b708ee8f82c.
use-after-free
in
https://syzkaller.appspot.com/bug?id=
cma bind port,”
3b7409f639067d927b8ad1b11a5e08bae27061af.
“KASAN:
2018,
write
read
[54] syzbot,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:04 UTC from IEEE Xplore.  Restrictions apply. 
2092
[75] W. Wu, Y. Chen, J. Xu, X. Xing, W. Zou, and X. Gong, “FUZE: Towards
facilitating exploit generation for kernel use-after-free vulnerabilities,”
in Proceedings of
the 27th USENIX Security Symposium (USENIX
Security), 2018.
[76] W. Chen, X. Zou, G. Li, and Z. Qian, “KOOBE: Towards facilitating
exploit generation of kernel out-of-bounds write vulnerabilities,” in Pro-
ceedings of the 29th USENIX Security Symposium (USENIX Security),
2020.
[77] ooo, “DC29 ﬁnal scoreboard,” 2021, https://scoreboard.ooo/scores.html.
[78] A. Authors, “Behavior representing exploitability,” 2021, https://forms.
gle/vdPiASeYycqEzEi29.
[79] syzbot,
“KASAN:
con resize,”
ebcbbb6576958a496500fee9cf7aa83ea00b5920.
2020,
global-out-of-bounds
fb-
https://syzkaller.appspot.com/bug?id=
read
in
[80] syzbot,
“kernel
BUG
2019,
f7649aa07ffca82dc93dc5cebc00c665849f5138.
security/keys/keyring.c:line!”
at
https://syzkaller.appspot.com/bug?id=
[81] syzbot, “WARNING in snd info get line,” 2020, https://syzkaller.
appspot.com/bug?id=27ea7ae6337aef698924e3eac5aa2b925374ca4c.
[82] syzbot,
“KASAN:
use-after-free
read
de-
https://syzkaller.appspot.com/
in
vlink health reporter destroy,”
bug?id=b7f48618d1139d02d0faba8e5932c51eec329b65.
in
“WARNING:
refcount
2020,
qdisc put
https://syzkaller.appspot.com/bug?id=
2020,
(2),”
badc9136121e634336bcdb31592a4b70b064e421.
in
use-after-free
https://syzkaller.appspot.com/bug?id=
do madvise,”
33913c931f51814eeb2ecdbe03af91d1d6d73520.
“KASAN:
2020,
read
bug
[83] syzbot,
[84] syzbot,
[85] syzbot,
“Warning
in
2020,
28741ff1906f93db2a398bc40e082da51828ec5b.
snd usbmidi submit urb/usb submit urb,”
https://syzkaller.appspot.com/bug?id=
A. Detail of User Study
APPENDIX
To ﬁnd the relationship between a kernel bug’s error behav-
ior and its exploitation potential, we designed a survey (i.e.
Figure 3) and conducted a user study with IRB approval. In
our survey, we ﬁrst asked the subjects’ backgrounds, including
their occupations and expertise levels. Following the back-
ground inquiry, we investigated whether the participants agree
that, in most scenarios, the kernel error behaviors like double
free, use-after-free, and out-of-bound access imply higher
exploitation potential than the kernel error behaviors such as
BUG, GPF, WARN, and NULL pointer dereference. We drew
comparison between different error behaviors in the survey
and provided examples to help the participants understand the
context. For each comparison pair, the participant is required
to brieﬂy explain the reason if he/she disagrees with our
classiﬁcation.
We started our recruitment from CTF players in top-tier
teams [77]. The invited players were encouraged to distribute
our survey to knowledgeable experts further. We offer a $10
gift card for each participant to motivate the completion of
our survey. In total, we managed to recruit 21 security experts
participating in our survey. Among these human subjects, 12 of