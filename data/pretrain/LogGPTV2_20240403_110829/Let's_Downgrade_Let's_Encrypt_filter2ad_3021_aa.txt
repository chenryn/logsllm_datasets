# Title: Let's Downgrade Let's Encrypt

## Authors:
- Tianxiang Dai
- Haya Shulman
- Michael Waidner

### Affiliations:
- **Tianxiang Dai, Haya Shulman, and Michael Waidner**
  - ATHENE Center
  - Fraunhofer SIT, Germany
  - Michael Waidner is also affiliated with TU Darmstadt & Fraunhofer SIT, Germany

---

## Abstract
Following the recent off-path attacks against Public Key Infrastructure (PKI), Let's Encrypt deployed in 2020 a domain validation mechanism from multiple vantage points to ensure security even against stronger on-path Man-in-the-Middle (MitM) adversaries. The idea behind this distributed domain validation is that even if an adversary can hijack traffic from some vantage points, it will not be able to intercept traffic from all vantage points to all nameservers in a domain.

In this work, we identify two central design issues in Let's Encrypt's distributed domain validation that make it vulnerable to downgrade attacks:
1. The vantage points are selected from a small, fixed set.
2. The way vantage points select nameservers in target domains can be manipulated by a remote adversary.

We develop off-path methodologies based on these observations to launch downgrade attacks against Let's Encrypt. These attacks reduce the validation from "multiple vantage points to multiple nameservers" to "multiple vantage points to a single attacker-selected nameserver." Through experimental evaluations with Let's Encrypt and a dataset of 1 million Let's Encrypt-certified domains, we find that our off-path attacker can successfully launch downgrade attacks against more than 24.53% of the domains, rendering Let's Encrypt to use a single nameserver for validation with them.

We then develop an automated off-path attack against the 'single-server' domain validation for these 24.53% of domains, obtaining fraudulent certificates for more than 107,000 domains, which constitute 10% of the 1 million domains in our dataset.

We also evaluate our attacks against other major Certificate Authorities (CAs) and compare the security and efforts needed to launch the attacks against Let's Encrypt. We provide recommendations for mitigating our attacks.

### CCS Concepts
- Security and privacy → Network security

### Keywords
- PKI, BGP hijacks, DNS Cache Poisoning, Server Selection

### ACM Reference Format
Dai, T., Shulman, H., and Waidner, M. 2021. Let's Downgrade Let's Encrypt. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 20 pages. https://doi.org/10.1145/3460120.3484815

---

## 1 Introduction
Identifying the legitimate owner of a domain is crucial for the security of Public Key Infrastructure (PKI). It prevents criminals from obtaining fraudulent certificates for domains they do not own. Before issuing certificates, Certificate Authorities (CAs) perform domain validation (DV) to verify that the domain owner has control over the domain. This involves generating a challenge that the domain owner must integrate into the selected service in the domain, such as adding a TXT record to the zonefile or adding the challenge to a website directory. The CA then checks the presence of the challenge by querying the selected service in the target domain. A genuine owner can receive and respond correctly to the challenge, while an off-path adversary cannot.

Domain validation from a single vantage point is vulnerable. Recently, [14] demonstrated an off-path attack where the attacker hijacks the challenge sent by the CA to the domain during the validation process. This allows the attacker to respond with the correct challenge and demonstrate control over a domain they do not own. The significance of PKI for Internet security, coupled with the risks introduced by these attacks, triggered efforts to improve the security of domain validation.

Let's Encrypt was the first CA to react quickly to the disclosed vulnerabilities. In 2019, it standardized a mechanism called ACME [RFC8555] [13], and in 2020, it deployed a mechanism called multiVA, which involves domain validation with multiple Validation Authorities (VAs). Initially, Let's Encrypt set up four VAs, each running DNS resolver software for looking up resources in domains and validating control over them. Upon a certificate request, the VAs perform lookups of the target domain by sending queries to the nameservers and concurrently validate control over the domain. Each VA receives the set of nameservers and their IP addresses from the parent domain, then randomly selects a nameserver to which the query is sent. If the majority of the VAs receive the same results, DV succeeds, and the certificate is issued. Otherwise, the request fails. Let's Encrypt shows that their setup with multiVA provides security for DV even against MitM adversaries, as realistic adversaries are limited in their power and can control or hijack some but not many Internet networks. [15] performed simulations showing that the diverse vantage points of multiVA allow detection of 94% of BGP prefix hijack attacks during DV, making more than 90% of ASes in the Internet topologically incapable of launching BGP attacks against the majority of domains.

However, the core issues that expose domains to downgrade attacks are a side effect of server selection functionality. In this work, we show that, in addition to considering the vantage points, it is important to consider the domain side of domain validation. The analysis in [15] used a single IP address for each domain, but instead of intercepting the query from the vantage point, the adversary can intercept the response from the domain. This exposes domains to practical attacks during DV. In practice, hijacking the domain is challenging because domains have multiple nameservers. Some domains have more than 30 nameservers, making it complex even for a MitM adversary. To demonstrate control over a target domain, the attacker would need to hijack multiple challenges sent by the vantage points. These challenges are not sent to the same nameserver, but each vantage point selects the nameserver uniformly at random. If the attacker cannot anticipate which vantage point sends a query to which nameserver, they would have to craft multiple different responses, making the attack impractical even for strong on-path adversaries.

**The Downgrade Attack**: In this work, we develop a downgrade attack that reduces the multiVA validation against real domains with multiple nameservers to a validation against domains with a single nameserver. Our attack is based on two observations:
1. A functionality in VAs designed to enhance security and performance can be manipulated by network adversaries remotely.
2. Let's Encrypt uses a small and fixed set of VAs.

The former manipulates the server selection by the VAs, causing the multiVA to execute against a single nameserver, one which all the VAs select for validation and lookups. The latter allows launching targeted efficient attacks against the VAs in advance, as a preprocessing step before initiating the attack to obtain fraudulent certificates. Combining these observations, network adversaries can eliminate the multiple VAs to multiple nameservers effect, creating a 'multiple VAs to single nameserver' situation, which is no longer secure against MitM adversaries. During the attack, we cause the VAs to eliminate the nameservers from the list of usable servers, leaving only a single available nameserver. Worse, the attacker can force all the VAs to query a specific nameserver of their choice, one with a vulnerability that can be exploited, such as a server with unpatched software or one that can be attacked with side channels or fragmentation. As an example, we select servers whose BGP prefix the attacker can hijack via sub-prefix hijack attacks.

**Server Selection Vulnerability**: We exploit the server selection functionality of Let's Encrypt. To exploit it against a specific victim domain, the adversary needs to introduce a pattern into the responses from the nameservers. When the VAs receive a certain pattern of missing responses, they block the nameservers. There are different ways to exploit this vulnerability and introduce a pattern into the responses, such as with a compromised router that selectively drops or manipulates specific packets. We show how to exploit this vulnerability even with an off-path adversary.

**Server-Elimination Methodologies**: We develop methodologies to introduce losses according to specific intervals, causing all the VAs to query just one nameserver, selected by the attacker. Some of our methodologies assume specific properties in domains, such as rate limiting, and can be launched only against domains with these properties, e.g., 24.53% of Let’s Encrypt-certified domains. We also developed a generic server-elimination methodology that applies to all domains but requires generating much more traffic than the other methods. Furthermore, the vulnerability in CAs that allows downgrading the number of nameservers in a domain can also be exploited by stronger adversaries.

**Fraudulent Certificates**: After downgrading validation with domains to a single nameserver, we launch attacks to prove control over domains that off-path adversaries do not own and obtain fraudulent certificates for these domains. We compare the security of Let's Encrypt to that of other popular CAs and show that the downgrade attack eliminates the security benefits introduced by multiVA. We found all the CAs equally vulnerable to our attacks, implying that the validation of all the CAs in our dataset can be downgraded to a single server in any Internet domain. We run a complete attack against the domains in our dataset that have properties allowing our off-path server-elimination, forcing the validation to run against a single nameserver, which sub-prefix can be hijacked. This constitutes 10.6% of our 1 million dataset. We proceed to obtain fraudulent certificates for these 108,000 domains.

**Ethical Considerations**: Our attacks, evaluations, and measurements were ethically carried out against CAs and domains in our dataset. We notified Let's Encrypt about the downgrade attacks.

**Contributions**:
- We develop a taxonomy of nameserver elimination methodologies that force the VAs of Let's Encrypt to query a nameserver of the attacker's choice. One methodology is generic, using low-rate bursts to cause packet loss and applying to any nameserver in any domain. We did not evaluate this methodology in the Internet due to its adverse effects on communication from other sources with the nameservers. The other two methodologies require that the nameservers apply rate-limiting or fragment responses, generating less traffic. We evaluate them on our dataset of domains to show that more than 20% of 1 million top Alexa domains and 24.5% of Let's Encrypt domains are vulnerable. Our methodologies, with slight modifications, apply to other popular CAs and potentially have a wider application scope, such as redirecting clients to the wrong server or introducing traffic fluctuations to the load balancing that CDNs and cloud platforms use.
- Our server-elimination methodologies exploit properties in nameserver selection of DNS implementations. We perform an analysis of nameserver selection in Unbound, reverse-engineer its behavior, and show that it can be remotely manipulated to cause DNS resolvers to block nameservers.
- To evaluate our attacks ethically, we develop a two-sided methodology. Unlike prior work that performed simulations or evaluated attacks only in a lab setup, our evaluation methodology allows us to launch and validate real attacks in two steps. First, we attack the target CA with a victim domain that we own. Our adversarial host, located on a different network than the victim domain, obtains a fraudulent certificate for the victim domain, allowing us to evaluate the vulnerability and applicability of the attack against Let's Encrypt without issuing fraudulent certificates for real victim domains. In the second step, we reproduce the setup of Let's Encrypt on our networks, with all relevant components, and launch automated attacks against our dataset of Let's Encrypt-certified victim domains, issuing fraudulent certificates for these domains with a CA controlled by us. This step allows us to identify victim domains to which our attacks apply. If the attack applies in both steps, it also applies when launched against the CA and the victim domain in real life. Our evaluation methodology has wider applicability, enabling ethical evaluations of other attacks without causing damage to real victims, such as evaluating different types of Denial of Service (DoS) attacks, including fragmentation-based DoS attacks.
- Our work shows that validation from multiple locations, although the right approach, is not trivial and requires care to avoid pitfalls. We provide recommendations for preventing our attacks.

**Organization**:
- Section 2: We develop our downgrade attack against Let's Encrypt.
- Section 3: We develop and evaluate nameserver elimination methodologies.
- Section 4: We demonstrate attacks against Let's Encrypt to issue fraudulent certificates and evaluate them against a dataset of 1 million domains certified by Let's Encrypt.
- Section 5: We provide recommendations for countermeasures.
- Section 6: Comparison to related work.
- Section 7: Conclusion.

---

## 2 The Downgrade Attack
We develop a downgrade attack against Let's Encrypt to reduce the 'multiple VAs to multiple nameservers' validation to 'multiple VAs to attacker-selected nameserver' validation. Our attack is based on the observation that a functionality in VAs, which is used to increase security and performance, can be manipulated by a remote adversary. Specifically, the DNS software at each VA selects uniformly at random the nameserver to which queries are sent. This is required to distribute the load from all the VAs evenly among all the nameservers, create unpredictable selection of nameservers by the VAs, and ensure good performance by avoiding poorly performing nameservers.

The fact that the VAs are selected from a small and fixed set of nodes, known to the attacker, allows the attacker to manipulate the server selection mechanism in advance, prior to requesting a certificate.