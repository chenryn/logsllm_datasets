command.parameters,Add (*@paran*, OleDbType,VarChar, 50) . Value = input;
//OracleCommand（）—用于构造/发送sQL语句或存储过程
oracleCommand command = nev OracleCommand (sgl, connection) :
//OracleParameter()—用于向OracleCommand 对象添加参数
OracleCommand conmand - nev OracleCommand (sql, connection):
command.Parameters,Add (*@param*, OleDbType,VarChar, 50) .Value = input;
//OdbcCommand（）—用于构造或发送sQL语句
OdbcCommand command = new OdbcCommand (sql, connection) :
/ /OdbcParametex()—用于向 OdbcCommand对象添加参数
OdbcCommand command = new OdbcCommand (sql, connection) ;
command.Parameters.Add (*@param*, OleDbType.VarChar, 50) .Value = input;
3.2.3跟踪数据
我们已经很好地理解了Web应用如何从用户获取输入、开发人员在所选用的语言中使用
哪些方法来处理数据，以及哪些不良的编码行为会产生SQL注入漏洞。接下来要微的是将所
学的内容用到测试上，主要包括识别SQL注入漏洞和在应用中跟踪用户控制的数据。我们所
采用的系统方法将从识别危险函数（渗入点）的使用开始。
可以采用手动方式复查源代码，即可以通过使用文本编辑器或IDE（IntegratedDevelopment
Environment，集成开发环境）复查每一行代码。但这是个资源密集、耗时费力的过程。为节省
时间并快速识别那些本应手动仔细检查的代码，最简单直接的方法是使用UNIX工具grep（同
样适用于Windows系统）。因为每种编程语言均提供了很多不同的方法来接收和处理输入，同
时提供了很多方法来构造、执行SQL语句，所以我们需要编制一个经过试验和测试的通用性
较好的搜索字符申列表，以此来识别会潜在受到SQL注入攻击的代码行。
81
---
## Page 96
SQL注入攻击与防御（第2版）
工具与陷阱
grep是一款命令行文本搜索工具，最平是针对UNIX编写的，联认安装在大多数由
UNIX派生的操作系统上，比如Linux和OSX.现在，grep同样适用于Windows，可以
从http://gnuwin32.sourceforge.net/packagesgrep.htm下载。如果您喜欢使用原生的Windows
工具集，可以使用findstr命令，它可以使用正则表达式搜索文件中满足规则的文本。
请访问http://technet.microsoft.com/en-us/library/b490907.aspx以获取语法方面的参考
信息。
还有一款非常有用的工具一awk，它是一种通用编程语言，用于处理文件或数据
流中基于文本的数据，awk也默认安装在大多数由UNIX派生的操作系统上.Windows
用户也可以使用awk工具，可从http://gnuwin32.sourceforge.net/packages/gawk.htm下载
gawk(GNU awk).
1.跟踪 PHP中的数据
我们首先从PHP应用程序开始。在复查PHP 源代码之前，先检查register_globals 和
magic_quotes 的状态，这一点非常重要，可以在PHP配置文件(php.ini)中配置这些设置。
register_globals 负责将EGPCS变量注册成全局变量，这通常会引发很多漏洞，因为用户可以感
染它们。正因为如此，PHP4.2.0默认禁用了该功能，不过有些应用需要它才能正确运行。PHP
5.3.0弃用了magic_quotes 选项，而 PHP6.0.0 将移除该选项。magic_quotes 是PHP实现的一种
安全特性，用来避开传递给应用的存在潜在危害的字符，包括单引号、双引号、反斜线和NULL
字符。
弄清楚这两个选项的状态后，接下来开始检查代码。可以使用下列命令递归地搜索一个源
文件的目录，寻找使用了mssql_queryO、mysql_queryO和 mysql_db_queryO且直接将用户输入
插入到SQL语句中的文件。该命令将打印包含匹配内容的文件名和行号，并使用awk对输出
进行美化：
$ grep -r -n
"\ (mysq1\(mssql\Imysq1_db\)_query\(, *\S\ (GET\ I \POST\), *\) *
 (_u\u\=S
filename: src/mssq1_query.vu1n.php
line: 11
′$_GET[*var*]*") ;
filename: src/mysq1_query.vu1n,php
1ine: 13
 S_GET [*var′] '*,$1ink) ;
也可以使用下列命令递归地搜索一个源文件的目录，寻找使用了oci_parse0和ora_parse0且直
接将用户输入插入到 SQL语句中的文件.这些函数将先于oci_exccO、ora_cxccO和loci_exccuteO
82
---
## Page 97
第3章复查代码中的SQL注入
被编译成SQL语句：
$ grep -r -n "\(oci\Iora\)_parse\(. *\S_\(GET\I\POsr\) .*\) " src/ 1
(_\u\。ewuouu1uuua) .:-
filename: src/oci_parse.vuln.php
line: 4
r（.[,xe,13Ds.
filename: src/ora_parse.vuln.php
1ine: 13
match: Ora_parse (Scurs, *SELECT * FROM TABLE WHERE COLUMN =
'$_GET[*var′]*") ;
可以使用下列命令递归地搜索一个源文件的目录，寻找使用了odbc_prepare0和odbc_execO
且直接将用户输入插入到SQL语句中的文件。odbc_prepareO将先于odbc_executeO被编译成SQL
语句：
$ grep -r -n "\(odbc_prepare\Iodbc_exec\)\(.*\s_\(GET\/\POST\) . *\) *
filename: src/odbc_exec.vuln.php
（u\u）=Cs
line: 3
match: Sresult = odbc_exec ($con, "SELECT * FROM TABLE WHERE COLUMN =
filename: src/odbc_prepare.vuln.php
'$_GET[*var*]*") 
line: 3
(. [, xeA, 13s. -
可以使用下列命令递归地搜索一个源文件的目录，寻找使用了mssql_bindO且直接将用户输
入插入到SQL语句中的文件。该函数将先于mssql_executeO被编译成SQL语句：
$ grep -r -n “mssql_bind\(. *\$s_\(GET\I \PoST\), *\) * src/ |avk =F:
(_u\uuoeuu\。auu\Ts1aueuaquad),
f1lename: src/mssq1_bind,vuln ,php
match: mssq]_bind ($sp, *@paramOne*, $_GET[*var_one′], SQLVARCHAR,
line: 8
falso, false, 150);
filename: src/mssq1_bind,vuln ,php
line: 9
match: mssql_bind($sp, *@paramTwo", $_GET[*var_two*], SQLVARCHAR,
false, false, 50);
可以将这些grep单命令行程序合并成一个简单的shell脚本并对输出稍作修改，以使能够
以XML、HTML、CSV及其他格式显示数据。可以使用字符串搜索查找所有容易发现的目标，
比如将输入插入到存储过程和SQL语句中的动态参数构造，这些输入未经验证而直接来自GET
或POST参数。问题是：虽然很多开发人员在使用输入动态创建SQL语句时并未对其进行验
证，但他们首先将输入复制给了一个命名变量。例如，下列代码容易受到攻击，但我们使用的
简单的grep字符串却无法识别这样的代码行：
$sq1 - "SELECT * FROM TBL WHERE COLUMN - *$_GET[′var′]*"
83
---
## Page 98
SQL注入攻击与防御（第2版）
$result = mysql_query (Ssq], S1ink) ;
应该修改grep字符串以便能识别出这些函数的使用。例如：
$ grep -r -n “mssq]_query (\|mysq]_query (\Imysql_db_query (\loci_parse
(\Iora_parse (\ Imssq]_bind (\ Imssq1_execute (\Iodbc_prepare (\ Iodbc_
execute (\|odbc_execute (\|odbc_exec ("szc/ I awk -F:*(print
uuqeuu\。1uu。ueu
上述命令不仅能识别出之前的grep字符申能识别出的所有代码行，而且还能识别出源代
码中所有使用了潜在危险函数的位置点，以及很多需要手动检查的行。例如，它可以识别出下
列行：
filename: src/SQLi.MySQL. vulnerable.php
1ine: 20
match: $result = mysq1_query($sq1)
mysql_queryO函数用于向当前使用的数据库发送一条查询，从发现的行中可以看出该函数
正在被使用。我们并不知道Ssql变量的值，它可能包含一条要执行的SQL语句，但我们无法知
道它是否是由用户输入构造面成的，或者是否已受到感染。因此，目前无法判断是否存在漏洞。
找们需要跟踪Ssql变量。可使用下列命令实现该目的：
uttu\Sowue qurad). 1-xxe 1/oas tbss\。u-I- dab s
"$2"\nmatch: "$3*\n\n") 
上述命令存在的问题是：开发人员经常会重用变量或使用常见的名字，因此可能会使用与
当前所审查函数不匹配的结果作为结尾。可以通过将命令扩展成搜索常用的SQL命令来改进
该问题。尝试使用下列grep命令以识别代码中创建动态SQL语句的位置点：
幸运的话，您将只找到一个匹配值，比如：
filename: src/SQLi .MySQL.vulnerable .php
line: 20
如果在现实中使用“Ssql”这样不明确的变量名，那么可能会在许多不同的源文件中找到
很多行，所以要保证正在搜索的是正确的变量、函数、类或过程。从上述输出中可以发现，SQL
语句是SELECT语句，并且是使用用户控制的数据（通过GET方法传递给应用）构造的，该参
户数据在传递给函数（该函数执行访问数据库的语句）之前已经与Ssql变量连接在一起。但是也
可能获得另外一种搜索结果：
filename: src/SQLi .MySQL, vulnerable ,php
1ine: 20
. =  a .a=s 
从上述输出中可以发现，该SQL语句是一条SELECT语句，并且与另一个变量Sinput连接在
8
---
## Page 99
第3章复查代码中的SQL注入
了一起。我们不知道Sinput变量的值，也不知道它是否包含用户控制的数据或者是否受到感染。
因此无法判断是否存在漏润。我们需要跟踪Sinput变量。可使用下列命令实现该目的：
:oueu quxd). a-xxe 1/oxs +*s\.*=ndus u- - dox s
上述命令将搜索所有为Sinput变量分配值的实例一这些值来自HTTP请求方法，包括
S_GET、SHTTP_GET_VARS、S_POST、SHTTP_POST_VARS、S_REQUEST、S_COOKIE、
SHTTP_COOKIE_VARS、S_SERVER和SHTTP_SERVER_VARS，以及使用其他变量为Sinput
变量赋值的其他实例。从下列输出中可以发现，Sinput变量已经被POST方法提交的一个变量
赋值了：
filename: src/SQLi ,MySQL.vulnerable.php
line: 10
match: $input = $_POST[*name′];
现在我们知道，Sinput变量已经被一个通过HTTPPOST请求提交且由用户控制的参数赋
值，并且已经与一条SQL语句相连构成了一个新的字符串变量(Ssql)。该SQL语句接下来被传
递给一个函数，该函数执行访问MySQL数据库的SQL语句。
到目前为止，我们可能迫不及待地想声明存在漏洞，不过仍然无法确定Sinput变量是否受
到了感染。既然知道该字段中包含用户控制的数据，不妨再进行额外的搜索以找到该变量名。
可使用下列命令实现该目的：
:autu\TS。 eweueT。 quTxd), ia- ye 1 /oxs ndut$\。 u- 1- doxb $
*$2"\nmatch: “$3"\n\n")*
如果上述命令只返回之前的结果，那么便可以确定存在漏洞。但我们也可能得到与下面类
似的代码：
filename: src/SQLi .MySQL,vulnerable.php
line: 11
match: if (is_string($input)) (
filename: src/SQLi ,MySQL.vulnerable.php
match: if (strlen ($input) < $maxlength) (
filename: src/SQLi MySQL,vulnerable,php
1ine : 13
match: if (ctype_alnum ($input))(
上述输出证明开发人员对用户控制的参数执行了某些输入验证。Sinput变量正在接受审查
以保证它是一个字符串、长度在指定的范围之内且只包含字母和数字字符。我们现在已经跟踪
到了应用中的用户输入，识别出了所有依赖关系，可以明确判定是否存在漏润。最重要的是，
我们能够提供证据来支持自己的论断了。
能够熟练地复查PHP代码中的SQL注入漏洞后，接下来让我们看看如何将该技术应用到
Java应用中。为避免重复，接下来将不会深人分析所有可能的情况。读者可以使用本节介绍的
技术来复查其他语言的代码（不过，接下来会提供足够的细节信息来帮助读者上手)。
85
---
## Page 100
SQL注入攻击与防御（第2版）
2.跟踪Java中的数据
可以使用下列命令递归地搜索一个Java源文件的目录，寻找是否存在使用了prepareStatcmentO
cxecuteQucryO、cxecuteUpdateO、addBatchO和l executeBatchO的文件：
$ grep -z -n "preparedStatement (\lexecuteQuery (\|executeUpdate (\lexe
执行上述命令后的结果如下所示。可以很清晰地看到，它识别出了三行需要进一步审查的
代码：
filename: src/SQLVuln.java
6810UTT
match: ResultSet rs - statement.executeQuery(sql) ;
filename: src/SQLVuln.java
line: 139
match: statement.executeUpdate (sql) /
filename: src/SQLVuln.java
602 :007
match: ResultSet rs = statement,executeQuery(*
request .getParameter (*input") );
必须对第89行和第139行作进一步审查，因为还不知道sql变量的值。它可能包含要执行
的SQL语句，但我们不知道该语句是否是由用户输入构造面成的或者是否受到感染。所以目
前无法判断是否存在漏洞，我们需要跟踪sql变量。不过我们发现第209行的SQL语句是由用
户控制的输入构造而成的。该语句并未验证通过HTTPWeb表单提交的input参数的值，所以
受到了感染。我们可以声明第209行易受到SQL注入攻击，但要花点功夫审查第89行和139
行。尝试使用下列grep命令以识别代码中构造动态SQL语句并将其分配给sql变量的位置点：
(_u\u\s。1qoewu\s.1ougtu\t,:oueuaz。ugxd).1-
filename: src/SQLVuln.java
88 :997T
request .get Parameter (*input*)):
filename: src/SQLVu1n. Java
+=  )=  