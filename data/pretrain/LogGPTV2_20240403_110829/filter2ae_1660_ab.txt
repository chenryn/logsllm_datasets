            //0地址的PDE一般是存在的，这里就直接挂PTE
            mov eax,0x600000;
            mov ebx,0xc0000000;
            //在PAE模式下获取pte的算法，可以逆向MmIsAddressValid找到。
            shr eax,0x9;
            and eax,0x7ffff8;
            //find pte
            mov edx,eax;
            add edx,ebx;
            mov edx,dword ptr ds:[edx];
            mov dword ptr ds:[ebx],edx;
            mov dword ptr ds:[0],0x12345678;
            mov eax,0x700000;
            mov ebx,0xc0000000;
            shr eax,0x9;
            and eax,0x7ffff8;
            //find pte
            mov edx,eax;
            add edx,ebx;
            mov edx,dword ptr ds:[edx];
            mov dword ptr ds:[ebx],edx;
            mov eax,dword ptr ds:[0];
            mov g_value,eax;
            popfd;
            popad;
            retf;
        }
    }
    int main(int agrc,char * agrv[])
    {
        char buf[]={0,0,0,0,0x48,0};
        void * p1 = VirtualAlloc((void*)0x600000,0x1000,MEM_COMMIT | MEM_RESERVE ,PAGE_EXECUTE_READWRITE);
        void * p2 = VirtualAlloc((void*)0x700000,0x1000,MEM_COMMIT | MEM_RESERVE ,PAGE_EXECUTE_READWRITE);
        if(p1 == NULL)
        {
            if(p2 != NULL) VirtualFree(p2,0x1000,MEM_COMMIT | MEM_RESERVE);
            printf("virtual failed p1\n");
            return 0;
        }
        if(p2 == NULL)
        {
            VirtualFree(p1,0x1000,MEM_COMMIT | MEM_RESERVE);
            printf("virtual failed p2\n");
            return 0;
        }
        //这里必须要赋值，不然会0xC0000005，VirtualAlloc分配好了空间，但是当你使用的时候才挂物理页。
        *((unsigned int *)p1)=0x100;
        *((unsigned int *)p2)=0x200;
        printf("%X\n",test);
        //eq 8003f048 0040ec00`00081005
        __asm
        {
            call fword ptr buf;
            push 0x3b;
            pop fs;
        };
        printf("%X\n",g_value);
        VirtualFree(p1,0x1000,MEM_COMMIT | MEM_RESERVE);
        VirtualFree(p2,0x1000,MEM_COMMIT | MEM_RESERVE);
        return 0;
    }
我们将0x600000线性地址对应的物理页挂在0地址上，并且将值改为0x12345678（mov dword ptr
ds:[0],0x12345678），然后再将0地址挂上0x700000的物理页，这时候由于0x700000位置上的值是200（ _((unsigned
int_ )p2)=0x200），那么如果没有TLB，下次cpu寻址的时候0位置上的值应该为200。但运行结果却为：
说明确实有缓存帮我们存储了地址，当第一次寻址的时候已经将linear和对应的物理地址储存到TLB中。
那么如何取到最新的值呢，也就是我们想取到0地址挂上0x700000对应物理页后的值，这里最好的办法就是刷新Cr3，前面我们也提到了Cr3的切换会将TLB清空（G位为1除外）。
    mov eax,cr3;
    mov cr3,eax;
TLB刷新，这样可以成功读取到最新的数据，而不是老的缓存。
###  全局页体验
那如果我们此时将PTE属性设置为全局，更新Cr3还能刷新我们这行缓存吗？
    or edx,0x100;
即便刷新了缓存，但是由于已经变成全局物理页，所以TLB不会删除地址0这一项。
###  INVLPG指令
这个指令可以直接删除TLB的某一项缓存，所以我们现在可以通过该指令强行删除全局页缓存。
    invlpg dword ptr ds:[0];
## 中断与异常
###  中断
中断通常是由CPU外部的输入输出设备(硬件)所触发的，供外部设备通知，CPU“有事情需要处理”，因此又叫中断请求(Interrupt Request)。
中断请求的目的是希望CPU暂时停止执行当前正在执行的程序，转去执行中断请求所对应的中断处理例程(中断处理程序在哪有IDT表决定)
80×86有两条中断请求线：
  * 非屏蔽中断线，称为NMI（NonMaskable Interrupt）
  * 可屏蔽中断线，称为INTR（Interrupt Require）
####  非可屏蔽中断
当非可屏蔽中断产生时，CPU在执行完当前指令后会里面进入中断处理程序。
非可屏蔽中断不受EFLAG寄存器中IF位的影响，一旦发生，CPU必须处理。
非可屏蔽中断处理程序位于IDT表中的2号位置。
找一下2号中断执行代码，这里忘了就回去看TSS，任务门。
    kd> uf 8053f3fc 
    nt!KiTrap02:
    8053f3fc fa              cli
    8053f3fd ff3540f0dfff    push    dword ptr ds:[0FFDFF040h]
    8053f403 a13cf0dfff      mov     eax,dword ptr ds:[FFDFF03Ch]
    8053f408 8a685f          mov     ch,byte ptr [eax+5Fh]
    8053f40b 8a485c          mov     cl,byte ptr [eax+5Ch]
    8053f40e c1e110          shl     ecx,10h
    8053f411 668b485a        mov     cx,word ptr [eax+5Ah]
    8053f415 890d40f0dfff    mov     dword ptr ds:[0FFDFF040h],ecx
    8053f41b 9c              pushfd
    8053f41c 812424ffbfffff  and     dword ptr [esp],0FFFFBFFFh
    8053f423 9d              popfd
    8053f424 8b0d3cf0dfff    mov     ecx,dword ptr ds:[0FFDFF03Ch]
    8053f42a 8d4158          lea     eax,[ecx+58h]
    8053f42d c6400589        mov     byte ptr [eax+5],89h
    8053f431 8b0424          mov     eax,dword ptr [esp]
    8053f434 6a00            push    0
    8053f436 6a00            push    0
    8053f438 6a00            push    0
    8053f43a 6a00            push    0
    8053f43c ff7050          push    dword ptr [eax+50h]
    8053f43f ff7038          push    dword ptr [eax+38h]
    8053f442 ff7024          push    dword ptr [eax+24h]
    8053f445 ff704c          push    dword ptr [eax+4Ch]
    8053f448 ff7020          push    dword ptr [eax+20h]
    8053f44b 6a00            push    0
    8053f44d ff703c          push    dword ptr [eax+3Ch]
    8053f450 ff7034          push    dword ptr [eax+34h]
    8053f453 ff7040          push    dword ptr [eax+40h]
    8053f456 ff7044          push    dword ptr [eax+44h]
    8053f459 ff7058          push    dword ptr [eax+58h]
    8053f45c ff3500f0dfff    push    dword ptr ds:[0FFDFF000h]