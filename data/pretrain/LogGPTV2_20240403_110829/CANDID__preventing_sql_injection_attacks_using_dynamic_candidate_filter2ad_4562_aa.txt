title:CANDID: preventing sql injection attacks using dynamic candidate
evaluations
author:Sruthi Bandhakavi and
Prithvi Bisht and
P. Madhusudan and
V. N. Venkatakrishnan
CANDID: Preventing SQL Injection Attacks using
Dynamic Candidate Evaluations
Sruthi Bandhakavi
University of Illinois
Urbana-Champaign, USA
PI:EMAIL
Prithvi Bisht
University of Illinois
Chicago, USA
PI:EMAIL
P. Madhusudan
University of Illinois
Urbana-Champaign, USA
PI:EMAIL
V. N. Venkatakrishnan
University of Illinois
Chicago, USA
PI:EMAIL
ABSTRACT
SQL injection attacks are one of the topmost threats for ap-
plications written for the Web. These attacks are launched
through specially crafted user input on web applications that
use low level string operations to construct SQL queries. In
this work, we exhibit a novel and powerful scheme for auto-
matically transforming web applications to render them safe
against all SQL injection attacks.
A characteristic diagnostic feature of SQL injection at-
tacks is that they change the intended structure of queries
issued. Our technique for detecting SQL injection is to dy-
namically mine the programmer-intended query structure on
any input, and detect attacks by comparing it against the
structure of the actual query issued. We propose a simple
and novel mechanism, called Candid, for mining program-
mer intended queries by dynamically evaluating runs over
benign candidate inputs. This mechanism is theoretically
well founded and is based on inferring intended queries by
considering the symbolic query computed on a program run.
Our approach has been implemented in a tool called Can-
did that retroﬁts Web applications written in Java to defend
them against SQL injection attacks. We report extensive
experimental results that show that our approach performs
remarkably well in practice.
Categories and Subject Descriptors
K.6 [Security and Protection]: Unauthorized access; H.3
[Online Information Services]: Web-based services
General Terms
Security, Languages, Experimentation
Keywords
SQL injection attacks, retroﬁtting code, symbolic evalua-
tion, dynamic monitoring.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
1.
INTRODUCTION
The widespread deployment of ﬁrewalls and other perime-
ter defenses for protecting information in enterprise infor-
mation systems in the last few years has raised the bar for
remote attacks on networked enterprise applications. How-
ever, such protection measures have been penetrated and
defeated quite easily with simple script injection attacks,
of which the SQL Command Injection Attack (SQLCIA)
is a particularly virulent kind. An online application that
uses a back end SQL database server, accepts user input,
and dynamically forms queries using the input, is an attrac-
tive target for an SQLCIA. In such a vulnerable application,
an SQLCIA uses malformed user input that alters the SQL
query issued in order to gain unauthorized access to the
database, and extract or modify sensitive information.
SQL injection attacks are extremely prevalent, and ranked
as the second most common form of attack on web applica-
tions for 2006 in CVE (Common Vulnerabilities and Expo-
sures list [18]). The percentage of these attacks among the
overall number of attacks reported rose from 5.5% in 2004
to 14% in 2006. The recent SQLCIA on CardSystems So-
lutions [15] that exposed several hundreds of thousands of
credit card numbers is an example of how such attack can
victimize an organization and members of the general pub-
lic. By using Google code search, analysts have found several
application programs whose sources exhibit these vulnera-
bilities [2]. Recent reports suggest that a large number of
applications on the web are indeed vulnerable to SQL in-
jection attacks [25], that the number of attacks are on the
increase, and is on the list of most prevalent forms of at-
tack [15, 27].
Research on SQL injection attacks can be broadly clas-
siﬁed into two basic categories: vulnerability identiﬁcation
approaches and attack prevention approaches. The former
category consists of techniques that identify vulnerable lo-
cations in a web application that may lead to SQL injection
attacks. In order to avoid SQL injection attacks, a program-
mer often subjects all inputs to input validation and ﬁlter-
ing routines that either detect attempts to inject SQL com-
mands or render the input benign [5, 20]. The techniques
presented in [29, 16] represent the prominent static analy-
sis techniques for vulnerability identiﬁcation, where code is
analyzed to ensure that every piece of input is subject to
an input validation check before being incorporated into a
query (blocks of code that validate input are manually an-
notated by the user). While these static analysis approaches
scale well and detect vulnerabilities, their use in addressing
the SQL injection problem is limited to merely identifying
12potential unvalidated inputs. The tools do not provide any
way to check the correctness of the input validation rou-
tines, and programs using incomplete input validation rou-
tines may indeed pass these checks and still be vulnerable
to injection attacks.
A much more satisfactory treatment of the problem is
provided by the class of attack prevention techniques that
retroﬁt programs to shield them against SQL injection at-
tacks [12, 26, 19, 21, 30, 13, 9, 24]. These techniques of-
ten require little manual annotation, and instead of detect-
ing vulnerabilities in programs, oﬀer preventive mechanisms
that solve for the programmer the problem of defending the
code against injection attacks.
Relying on input validation routines as the sole mecha-
nism for SQL injection defense is problematic. Although
they can serve as a ﬁrst level of defense,
it is widely
agreed [14] that they cannot defend against sophisticated
attack techniques (for instance, those that use alternate en-
codings and database commands to dynamically construct
strings) that inject malicious inputs into SQL queries.
A more fundamental technique to the problem of defend-
ing SQL injection comes from the commercial database world,
in the form of PREPARE statements. These statements allow a
programmer to declare (and ﬁnalize) the structure of every
SQL query in the application. Once issued, these statements
do not allow malformed inputs to further inﬂuence the SQL
query structure, thereby avoiding SQL vulnerabilities alto-
gether. This is in fact a robust mechanism to prevent SQL
injection attacks. However, retroﬁtting an application to
make use of PREPARE statements requires manual eﬀort in
specifying the intended query at every query point, and the
eﬀort required is proportional to the complexity of the web
application.
The above discussion raises a natural question: Could
we automatically infer the structure of the programmer-
intended query structures at every query issue point in the
application? A positive answer to this question will address
the retroﬁtting problem, thereby providing a robust defense
for SQL injection attacks.
In this paper we oﬀer a solution, dynamic candidate eval-
uation, a technique that automatically (and dynamically)
mines programmer-intended query structures at each SQL
query location, thus providing a robust solution to the
retroﬁtting problem. Central to our approach are two sim-
ple but powerful ideas: (1) the notion that the symbolic
query computed on a program path captures the intention
of the programmer, and (2) a simple dynamic technique
to mine these programmer-intended query structures using
candidate evaluations.
(CANdidate
Based on these ideas, we build a tool called Can-
did
evaluation for Discovering Intent
Dynamically). Candid retroﬁts web applications written
in Java through a program transformation. Candid’s nat-
ural and simple approach turns out to be very powerful for
detection of SQL injection attacks. We support this claim
by evaluating the eﬃcacy of the tool in preventing a large
set of attacks on a class of real-world examples.
This paper makes the following contributions:
• The dynamic candidate evaluation approach for min-
ing the structures of programmer-intended queries.
• A formal basis for this dynamic approach using the
notion of symbolic queries.
• A fully automated, program transformation mecha-
nism for Java programs that employs this technique,
with a discussion of practical issues and resilience to
various artifacts of Web applications.
• A comprehensive evaluation of the eﬀectiveness of at-
tack detection and performance overheads.
The problem of SQL injection is one of information ﬂow
integrity [7, 22]. The semantic notion of data integrity re-
quires that untrusted input sources (i.e., user inputs) must
not aﬀect trusted outputs (i.e., structure of SQL queries con-
structed). Notions of explicit information ﬂows that track
a relaxed version of the above data integrity problem are
suitable for this problem. Such solutions have been imple-
mented by mechanisms such as tainting [21, 19, 30] and
bracketing [24]. Our solution is structurally very diﬀerent
from these approaches and we present detailed comparisons
in the section on related work.
The paper is organized as follows. In Section 2 we infor-
mally present our approach through an example. We present
the formal basis for the idea of deriving intended query
structures in Section 3. Section 4 presents the program
transformation techniques used to compute programmer-
intended query structures. Section 5 presents the functional
and performance evaluation of our approach through ex-
periments on our tool Candid. Related work on other ap-
proaches is discussed in Section 6, and Section 7 concludes
with a brief discussion.
2. OVERVIEW OF CANDID
2.1 An example
To illustrate SQL injection, let us consider the web appli-
cation given in Figure 1. The application is a simple online
phone book manager that allows users to view or modify
their phone book entries. Phone book entries are private,
and are protected by passwords. To view an entry, the user
ﬁlls in her user name, and chooses the Display button. To
modify an entry, she chooses the Modify button, and enters
a diﬀerent phone number that will be updated in her record.
If this entry is left blank, and the modify option is chosen,
her entry is deleted. The program that processes the input
supplied by the form is also shown in Figure 1. Depending
on the display/modify check-box and depending on whether
the phone number is supplied or not, the application issues
a SELECT, UPDATE, or DELETE query.
The inputs from the HTML form are directly supplied to
procedure process-form, and hence the application is vul-
nerable to SQL injection attacks. In particular, a malicious
user can supply the string “John’ OR 1=1 - -” for the user-
name, and “not-needed” for the password as inputs, and
check the display option, which will make the program issue
the SQL query (along Path 1):
SELECT * from phonebook WHERE username=’John’ OR
1=1 - -’ AND password=’not-needed’
This contains the tautology 1=1, and given the injected
OR operator, the SELECT condition always evaluates to true.
The sub-string “--” gets interpreted as the comment oper-
ator in SQL, and hence the portion of the query that checks
the password gets commented out. The structure of the
original query that contained the “AND” operator is now
void process-form(string uname, string pwd, bool modify,
string phonenum) {
if (modify == false){ /* Path 1. only display */
query = "SELECT * from phonebook WHERE username = ’" +
uname + "’ AND password = ’ " + pwd + "’";
}
else{
/* modify telephone number */
if (phonenum == "") /* Path 2. delete entry */
query = "DELETE from phonebook WHERE username=’" +
uname + "’ AND password = ’" + pwd + " ’ ";
else
/* Path 3. update entry */
query = "UPDATE phonebook SET phonenumber =" + phonenum +
"WHERE username = ’ "
"’ AND password = ’" + pwd + "’";
+ uname +
}
sql.execute(query);
}
Figure 1: Approach overview
changed to a query that contained an “OR” operator that
uses a tautology. The net result of executing this query is
that the malicious user can now view all the phone book en-
tries of all users. Using similar attack queries, the attacker
can construct attacks that delete phone number entries or
modify existing entries with spurious values. A program
vulnerable to an SQL injection attack is often exploitable
further, as once an attacker takes control of the database,
he can often exploit it (for example using command-shell
scripts in stored procedures in the SQL server) to gain ad-
ditional access.
In order for an attack to be successful, the attacker must
provide input that will ultimately aﬀect the construction of
a SQL query statement in the program. In the above exam-
ple, the user name “John’ OR 1=1 --’ ” is an attack input,
whereas the input name “John” is not. An important obser-
vation that is used in SQL PREPARE statements, and also in
recent work [9, 24] is that a successful attack always changes
the structure of the SQL query intended by the program-
mer of the application. For the example given above, the
attack input “John’ OR 1=1 --’” results in a query structure
whose condition consists of an “OR” clause, whereas the cor-
responding query generated using non-attack input “John”
has a corresponding “AND” clause. Detecting change in
query structure that departs from the one intended by the
programmer is therefore a robust and uniform mechanism
to detect injection attacks.
The problem then is to learn the structure of programmer-
intended PREPARE query structures for various query issuing
locations in the program. If this can be accomplished, then
during program execution, the syntactic structures of the
programmer-intended query and the actual query can be
compared in order to detect attacks.
Several options are available to learn programmer intended
queries. One approach is to construct valid query struc-
tures from safe test inputs [26]. The problem with a purely
testing-based strategy is that it may miss some control paths
in the program and may not be exhaustive, leading to re-
jection of valid inputs when the application is deployed.
Another possibility is to use static analysis techniques [12]
to construct the programmer-intended queries for each pro-
gram point that issues a query. The eﬀectiveness of static
analysis is dependent on the precision of the string analysis
routines. As we show the related work section (Section 6),
precise string analysis using static analysis is hard, especially
for applications that use complex constructs to manipulate
strings or interact with external functions to compute strings
that are used in queries.
2.2 Our approach
To deduce at run-time the query structure intended by a
programmer, our high-level idea is to dynamically construct
the structure of the programmer-intended query whenever
the execution reaches a program location that issues a SQL-
query. Our approach is to compute the intended query by
running the application on candidate inputs, that are self-
evidently non-attacking. For the above example, the can-
didate input for variable name set to “John” and the vari-
able modify set to false, elicits the intended query along the
branch that enters the ﬁrst if-then block (Path 1) in Fig. 1.
In order for a candidate input to be useful, it must satisfy
the following two conditions:
1. Inputs must be benign. The candidate input must be
evidently non-attacking, as envisioned by the program-