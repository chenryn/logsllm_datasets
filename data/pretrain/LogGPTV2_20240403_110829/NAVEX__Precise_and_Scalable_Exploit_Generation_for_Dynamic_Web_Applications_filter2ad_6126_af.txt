ties. Compared to Chainsaw, NAVEX found the same
number of XSS and SQLI vulnerabilities in scarf and
Eve, nevertheless, it reported more vulnerable sinks for
myBloggie.
In addition, NAVEX found 71 vulnerable
sinks in HotCRP, osCommerce, and phpBB because it
can handle object-oriented PHP code, which is not avail-
able in Chainsaw. Compared to RIPS, NAVEX found
19 more vulnerable sinks for phpBB, osCommerce, and
myBloggie. It missed 2 vulnerable sinks in HotCRP due
to missing edges in the code property graph that repre-
sent dynamic function calls.
Exploit generation. Since Chainsaw supports gen-
erating exploits for XSS and SQLI, we compare it to
NAVEX with respect to the total number of the gener-
ated SQLI and XSS exploits as well as some performance
measurements (see Table 8). NAVEX constructed 19
more exploits in WeBid, myBloggie, geccbblite,
WebChess, and FAQforge, and achieved the same for
Eve, scarf, and DNscript. For SchoolMate, NAVEX
did not generate exploits due to issues related to main-
taining users sessions (as discussed earlier). Since in
Chainsaw the exploit generation is done statically, it was
able to generate exploits for this application.
NAVEX signiﬁcantly outperformed Chainsaw in
terms of efﬁciency. Chainsaw generated the exploits
in 112min while NAVEX took 25min and 2sec. In ad-
dition, we contrast the total time to build and search the
navigation graph in NAVEX (18m 26sec) with the total
time to construct and search the Reﬁned Workﬂow Graph
(RWFG) (1day 13h 21m) in Chainsaw. This indicates
that the techniques used in NAVEX improved the exploit
generation efﬁciency without losing precision.
5.4 Limitations and Discussion
Unsupported features. Certain features of web applica-
tions are not yet supported and therefore limit our cover-
age. For example, forms that have inputs of type file
require the user to select and upload an actual ﬁle from
USENIX Association
27th USENIX Security Symposium    389
Vuln. TypeExp. Sinks Finding Time (Mnts.)Exploit Generation Time (Mnts.)SQLI37.758.27XSS109.2740.20File Inclusion27.970.00Command Injection22.530.00Code Execution21.330.00EAR17.281.3837.75109.2727.9722.5321.3317.288.2740.200.000.000.001.38020406080100120SQLIXSSFile InclusionCommand InjectionCode ExecutionEARExp. Sinks Finding Time (Mnts.)Exploit Generation Time (Mnts.)Time (Mnts.)443	2940	38	23	155	133	1	2	155	128	1	50	2500	SQLI	XSS	File	Inclusion	Command	Injection	Code	Execution	#	Sinks	Without	Sanitization	Tags	#	Sinks	With	Sanitization	Tags	Confirmed	#	Vulnerable	Sinks	23	55	5	105	90	9	0	100	200	SQLI	XSS	EAR	#	Exploits	Without	Client-Side	Code	#	Exploits	With	Client-Side	Code	#	Exploits	RIPS [15]
[16]
Chainsaw [7]
NAVEX
SQLI(5)
SQLI(1)
Application
myBloggie
Scarf
Eve
HotCRP (2.60)
osCommerce (2.3.3)
phpBB (2.0.23)
24
1
7
5
46
20
Table 7: Comparison on the number of identiﬁed (SQLI+XSS)
vulnerable sinks.
22
1
7
-
-
-
21
-
-
7
42
8(SQLI)
-
-
-
-
Chainsaw [7]
NAVEX
7
54
25
8
3
22
1
2
47
7
0
27
21
4
24
1
2
48
Application
Eve
SchoolMate
WebChess
FAQforge
geccbblite
myBloggie
Scarf
DNscript
WeBid
Total exploit generation time
Total NG construction & solving time
112m
1day 13h 21m
25m 2sec
18m 26sec
Table 8:
(SQLI+XSS) exploits.
Comparison on the number of generated
the local system. In a given test setting, this can be made
to work with our solver, but to make this work across all
platforms requires more engineering effort. Another is-
sue is of deriving TAC formulas from graph nodes auto-
matically. It is a challenging process that involves an-
alyzing each AST node and supporting different node
structures for each node type. For example, the left-hand
side of an assignment statement in PHP can be a sim-
ple variable, a constant, a function call, nested function
calls, etc. We have carefully considered these cases, and
NAVEX has the support for most such node types and
structures, yet there are a few instances still under de-
velopment. In our data set, NAVEX incorrectly ﬂagged
only 5 sinks as XSS exploitable in osCommerce2.3.3
and WeBid. In PHP, statically handling dynamic calls to
functions is challenging. NAVEX utilizes CPGs, which
do not have full support for resolving dynamic function
calls. However, this did not have a big impact on the
results reported by NAVEX. For instance, there were 3
false positives reported for EAR vulnerability in Joomla,
OpenConf, and MediaWiki.
6 Related Work
Exploit generation for web applications. Exploit gen-
eration has seen a lot of interest in binary applica-
tion [8,14,21]. For web applications, the closest work to
NAVEX is Chainsaw [7], a system that uses purely static
analysis to build concrete exploits. NAVEX differs from
Chainsaw in 2 aspects: (i) it performs a combination of
dynamic and static analyses, which enables it to better
scale to large applications and to ﬁnd more exploits, (ii)
it supports ﬁnding exploits for multiple classes of vulner-
abilities. Additional related works include Ardilla [25],
which uses concolic execution and taint tracking to con-
struct SQLI and XSS attack vectors; CRAXweb [22],
which employs concrete and symbolic execution sup-
ported by a constraint solver to generate SQLI and XSS
exploits. QED [27] generates ﬁrst-order SQLI and XSS
attacks using static analysis and model checking for Java
web applications. [32] generates inputs that expose SQLI
vulnerabilities using concolic execution of PHP applica-
tions. EKHunter [19] combines static analysis and con-
straint solving to ﬁnd exploits in for-crime web appli-
cations. WAPTEC [13] and NoTamper [12] generate
exploits for parameter-tampering vulnerabilities. These
works, however, are limited to single PHP modules and
do not consider whole-application paths.
Modeling with code property graphs. Yamaguchi et
al. [33] introduced the notion of CPGs for vulnerability
modeling and discovery in C programs. In a follow-up
work [9], they applied CPGs for vulnerability discovery
on PHP applications. While our work uses the ﬂexibility
and efﬁciency that CPGs offer, our problem goes a step
further to generate actual executable exploits. As a con-
sequence, we enhance CPGs with additional attributes.
Vulnerability analysis. There is a large body of re-
search that studied server-side vulnerability detection.
Broadly, there are static analysis approaches (such as
[11, 15, 16, 18, 23, 24, 26, 29–31, 34]), dynamic analysis
approaches (e.g., [20, 28]), and hybrid approaches (such
as [10]). Although NAVEX employs some of these anal-
ysis techniques to ﬁnd vulnerabilities, the aim of NAVEX
is different from these works as it constructs exploits for
the identiﬁed vulnerabilities. Our navigation modeling is
inspired by MiMoSA [11], which is a system that ﬁnds
data and workﬂow vulnerabilities by analyzing modules
of web applications. NAVEX advances the analysis by
combining static and dynamic analyses to construct con-
crete exploits for large web applications.
7 Conclusions
In this paper, we present NAVEX, an automatic exploit
generation system that takes into account the dynamic
features and the navigational complexities of modern
web applications. On our dataset, NAVEX constructed
a total of 204 exploits, of which 195 are on taint-style
vulnerabilities, and 9 are on logic vulnerabilities. We
demonstrated that NAVEX signiﬁcantly outperforms
prior work on the precision, efﬁciency, and scalability of
exploit generation.
Acknowledgments
We thank Curt Thieme for his support with the ap-
plications’ deployment. We also thank Adam Doup´e
and the anonymous reviewers for their feedback. This
material is supported in part by NSF under Grant Nos.
CNS-1514472, DGE-1069311 and by DARPA under an
AFOSR contract FA8650-15-C-7561.
390    27th USENIX Security Symposium
USENIX Association
References
[1] Apache tinkerpop.
2018. Accessed: 2018-05-1.
https://tinkerpop.apache.org/gremlin.html,
[2] crawler4j. https://github.com/yasserg/crawler4j, 2018. Accessed:
2018-05-1.
[3] Narcissus.
cessed: 2018-05-1.
https://github.com/mozilla/narcissus/, 2018. Ac-
[4] The neo4j graph platform the #1 platform for connected data.
https://neo4j.com/, 2018. Accessed: 2018-05-1.
[5] Xdebug - debugger and proﬁler tool for php. https://xdebug.org/,
2018. Accessed: 2018-05-1.
[6] Xss
ﬁlter
evasion
cheat
sheet.
https://www.owasp.org/index.php/XSS Filter Evasion Cheat Sheet,
2018. Accessed: 2018-05-1.
[7] ALHUZALI, A., ESHETE, B., GJOMEMO, R.,
AND
VENKATAKRISHNAN, V.
Chainsaw: Chained automated
workﬂow-based exploit generation. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications
Security (CCS) (2016), ACM, pp. 641–652.
[8] AVGERINOS, T., CHA, S. K., HAO, B. L. T., AND BRUM-
LEY, D. AEG: Automatic Exploit Generation. In NDSS (2011),
vol. 11, pp. 59–66.
[9] BACKES, M., RIECK, K., SKORUPPA, M., STOCK, B., AND
YAMAGUCHI, F. Efﬁcient and ﬂexible discovery of php appli-
cation vulnerabilities. In Security and Privacy (EuroS&P), 2017
IEEE European Symposium on (2017), IEEE, pp. 334–349.
[10] BALZAROTTI, D., COVA, M., FELMETSGER, V., JOVANOVIC,
N., KIRDA, E., KRUEGEL, C., AND VIGNA, G. Saner: Com-
posing static and dynamic analysis to validate sanitization in web
applications. In 2008 IEEE Symposium on Security and Privacy
(sp 2008) (2008), pp. 387–401.
[11] BALZAROTTI, D., COVA, M., FELMETSGER, V. V., AND VI-
GNA, G. Multi-module Vulnerability Analysis of Web-based Ap-
plications. In the 14th ACM Conference on Computer and Com-
munications Security (CCS) (2007), pp. 25–35.
[12] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ, R.,
AND VENKATAKRISHNAN, V. Notamper: automatic blackbox
detection of parameter tampering opportunities in web applica-
tions. In Proceedings of the 17th ACM conference on Computer
and communications security (2010), ACM, pp. 607–618.
[13] BISHT, P., HINRICHS, T., SKRUPSKY, N., AND VENKATAKR-
ISHNAN, V. WAPTEC: Whitebox Analysis of Web Applications
for Parameter Tampering Exploit Construction. In the 18th ACM
conference on Computer and communications security (2011),
pp. 575–586.
[14] BRUMLEY, D., POOSANKAM, P., SONG, D., AND ZHENG, J.
Automatic Patch-Based Exploit Generation is Possible: Tech-
niques and Implications. In Security and Privacy, 2008. SP 2008.
IEEE Symposium on (2008), pp. 143–157.
[15] DAHSE, J., AND HOLZ, T. Simulation of Built-in PHP Features
for Precise Static Code Analysis. In Symposium on Network and
Distributed System Security (NDSS) (2014).
[16] DAHSE, J., AND HOLZ, T. Static Detection of Second-Order
Vulnerabilities in Web Applications. In 23rd USENIX Security
Symposium (USENIX Security) (2014), pp. 989–1003.
[17] DE MOURA, L., AND BJØRNER, N. Z3: An efﬁcient smt solver.
In Tools and Algorithms for the Construction and Analysis of Sys-
tems. Springer, 2008, pp. 337–340.
[18] DOUP ´E, A., BOE, B., KRUEGEL, C., AND VIGNA, G. Fear the
ear: discovering and mitigating execution after redirect vulnera-
bilities. In Proceedings of the 18th ACM conference on Computer
and communications security (2011), ACM, pp. 251–262.
[19] ESHETE, B., ALHUZALI, A., MONSHIZADEH, M., PORRAS,
P. A., VENKATAKRISHNAN, V. N., AND YEGNESWARAN, V.
EKHunter: A Counter-Offensive Toolkit for Exploit Kit Inﬁltra-
tion. In 22nd Annual Network and Distributed System Security
Symposium, NDSS (2015).
[20] HALDAR, V., CHANDRA, D., AND FRANZ, M. Dynamic taint
propagation for java. In 21st Annual Computer Security Applica-
tions Conference (ACSAC) (2005), pp. 9–pp.
[21] HU, H., CHUA, Z. L., ADRIAN, S., SAXENA, P., AND LIANG,
In 24th
Z. Automatic Generation of Data-Oriented Exploits.
USENIX Security Symposium (USENIX Security 15) (2015),
USENIX Association, pp. 177–192.
[22] HUANG, S., LU, H., LEONG, W., AND LIU, H. CRAXweb:
Automatic Web Application Testing and Attack Generation. In
IEEE 7th International Conference on Software Security and Re-
liability, SERE (2013), pp. 208–217.
[23] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D.-T.,
AND KUO, S.-Y. Securing web application code by static anal-
ysis and runtime protection. In Proceedings of the 13th interna-
tional conference on World Wide Web (2004), ACM, pp. 40–52.
[24] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A Static
Analysis tool for Detecting Web Application Vulnerabilities. In
Security and Privacy, 2006 IEEE Symposium on (2006), pp. 6–
pp.
[25] KIEYZUN, A., GUO, P. J., JAYARAMAN, K., AND ERNST,
M. D. Automatic Creation of SQL Injection and Cross-Site
Scripting Attacks. In IEEE 31st International Conference on Soft-
ware Engineering (ICSE) (2009), pp. 199–209.
[26] LIVSHITS, V. B., AND LAM, M. S. Finding Security Vulnerabil-
ities in Java Applications with Static Analysis. In 14th USENIX
Security Symposium (Baltimore, Maryland, USA, 2005).
[27] MARTIN, M., AND LAM, M. S. Automatic generation of xss and
sql injection attacks with goal-directed model checking. In Pro-
ceedings of the 17th conference on Security symposium (2008),
pp. 31–43.
[28] NGUYEN-TUONG, A., GUARNIERI, S., GREENE, D.,
SHIRLEY, J., AND EVANS, D. Automatically hardening web
applications using precise tainting. In IFIP International Infor-
mation Security Conference (2005), Springer, pp. 295–307.
[29] SAMUEL, M., SAXENA, P., AND SONG, D. Context-sensitive
auto-sanitization in web templating languages using type quali-
ﬁers. In Proceedings of the 18th ACM conference on Computer
and communications security (2011), pp. 587–600.
[30] SAXENA, P., MOLNAR, D., AND LIVSHITS, B. Scriptgard: au-
tomatic context-sensitive sanitization for large-scale legacy web
In Proceedings of the 18th ACM conference on
applications.
Computer and communications security (2011), pp. 601–614.
[31] WASSERMANN, G., AND SU, Z. Sound and precise analysis of
In ACM Sigplan
web applications for injection vulnerabilities.
Notices (2007), vol. 42, ACM, pp. 32–41.
[32] WASSERMANN, G., YU, D., CHANDER, A., DHURJATI, D.,
INAMURA, H., AND SU, Z. Dynamic test input generation for
web applications. In Proceedings of the 2008 international sym-
posium on Software testing and analysis (2008), pp. 249–260.
[33] YAMAGUCHI, F., GOLDE, N., ARP, D., AND RIECK, K. Mod-
eling and discovering vulnerabilities with code property graphs.
In Security and Privacy (SP), 2014 IEEE Symposium on (2014),
IEEE, pp. 590–604.
[34] YU, F., ALKHALAF, M., AND BULTAN, T.
Stranger: An
automata-based string analysis tool for php. In International Con-
ference on Tools and Algorithms for the Construction and Analy-
sis of Systems (2010), pp. 154–157.
USENIX Association
27th USENIX Security Symposium    391
[35] ZHENG, Y., ZHANG, X., AND GANESH, V. Z3-str: A Z3-based
String Solver for Web Application Analysis. In Proceedings of
the 2013 9th Joint Meeting on Foundations of Software Engineer-
ing (2013), pp. 114–124.
392    27th USENIX Security Symposium
USENIX Association