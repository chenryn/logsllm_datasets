=== transaction
摘要：
    将事件分组成交易
语法：
    transaction  * * ?
必要参数：
* field-list
** 语法
    (,)* | (,)*
** 描述
    一个字段或者字段名的列表，事件将根据此字段的值进行分组成各个交易
* txn-definition-opt
** 语法
    ||||||||||||
** 描述
    交易定义选项
** 参数
*** maxspan
**** 语法
    maxspan = (s|m|h|d)
**** 描述
    交易的事件的时间跨度小于maxspan，可以理解为第一条事件的时间戳和最后一条事件的时间戳的跨度不能大于maxspan
*** maxevents
**** 语法
    maxevents = 
**** 描述
    一个交易中的最大事件个数
*** startswith
**** 语法
    startswith = eval()|
**** 描述
    搜索或者eval过滤表达式，如果某个事件满足条件，则标志新交易的开始
*** endswith
**** 语法
    endswith = eval()|
**** 描述
    搜索或者eval过滤表达式，如果某个事件满足条件，则标志新交易的结束
*** contains
**** 语法
    containes = eval()|
**** 描述
    判断raw_message里是否包含eval或字符串中的值，字符串可以为正则表达式
*** timeshift
**** 语法
    timeshift = (s|m|h|d)
**** 描述
    为解决transaction结束的时间边界问题引入的参数，意思是手动将时间结束节点延后的时间长度
*** 示例：
[source,bash]
transaction apache.clientip startswith="Android 4.3" timeshift=10m
    手动将要执行的命令的搜索时间范围结束点延后10min。
    这样将会使得本来不完整的transaction 在延后的时间段内找到其结束事件，从而变成完整的transaction。timeshift的具体值的设置依赖于实际应用场景和使用经验。
*** keepopentxn
**** 语法
    keepopentxn = 
**** 描述
    是否将找到end但未找到start的transaction从结果中去掉
**** 默认值：
    false，即不保留
*** mvlist
**** 语法
    mvlist =  | (,)*
**** 描述
    指定为bool值时意义为是否将所有字段抽取为单独的多值字段；指定为字段列表时意义为将指定的字段抽取为单独的多值字段
*** mvraw
**** 语法
    mvraw = 
**** 描述
    表示是否将raw_message字段抽取为一个单独的多值字段
**** 默认值：
    false
*** nullstr
**** 语法
    nullstr = 
**** 描述
    抽取为多值字段后结果中为空的元素的替换值，默认值为"nullstr"
**** 默认值：
    "nullstr"
*** sortfield
**** 语法
    sortfield = [+|-]field,...
**** 描述
    将一个transaction内的事件按照sortfield指定的顺序进行排列，当指定多个字段时表示第一个字段相等则按第二个字段排序...以此类推，默认为+timestamp
**** 默认值：
    +timestamp
*** keeporphans
**** 语法
    keeporphans = 
**** 描述
    指定事务命令是否应输出不属于任何事务的结果
**** 默认值：
    false，即不输出
*** maxpause
**** 语法
    maxpause= (s|m|h|d)
**** 描述
    指定事务中事件之间暂停的最长时间（以秒、分钟、小时或天为单位）。如果值为负，则禁用最大暂停约束，并且没有限制
**** 默认值：
    -1，即禁用最大暂停约束，且没有限制
可选参数：
* memcontrol-opt
** 语法
     |  | 
** 描述
    内存控制选项
** 参数
*** maxopentxn
**** 语法
    maxopentxn = 
**** 描述
    维护在内存中的open transaction的个数，采用LRU的策略进行淘汰
*** maxopenevents
**** 语法
    maxopenevents = 
**** 描述
    维护在内存中的open transaction中的events的最大数量，LRU策略淘汰
*** keepevicted
**** 语法
    keepevicted = 
**** 描述
    是否输出逐出的事务。通过检查“closed_txn”字段的值，可以将逐出的交易与非逐出的交易区分开来。对于已逐出的交易，“closed_txn”字段设置为 “0” 或 false，对于未逐出或已关闭的事务，字段设置为 “1” 或 true。如果满足以下条件之一，则“closed_txn”字段设置为“1”：maxevents，maxpause，maxspan，startswith。对于 startswith，由于事务命令以相反的时间顺序查看事件，因此它会在满足开始条件时关闭事务。如果未指定这些条件，则输出所有事务，即使所有事务都将“closed_txn”设置为“0”。当达到内存限制时，也可以逐出事务。
**** 默认值：
    false，即不输出逐出的事务
* trans-states
** 语法
    (  |  ) (results by flow)?
** 描述
    根据transaction中的日志匹配出具体状态，形成transaction的状态流
** 参数
*** trans_states_in_field
**** 语法
    with states (,)* in 
**** 描述
    将使用field中的字段值，作为状态的值，该字段值必须包含在field_value列表里
*** trans_states_match
**** 语法
     ("," )*
**** 描述
    使用trans_state_match列表中的规则对日志进行匹配生成状态
**** 参数
***** trans_state_match
****** 语法
    with "" ("in" )? as 
****** 描述
    如果field中的字段值匹配regex成功，则该条日志状态为state
描述：
    如果字段列表为多个字段，并不会解释为这些字段的逻辑AND（field1 AND field2 AND field3）或者逻辑或(field1 OR field2 OR field3)，如果字段列表中的字段存在传递关系，transaction命令将试图通过传递关系来进行计算。
    对于下列事件，可能会被归类到一个transaction中：
 host=a
 host=a  username=b
 username=b age=20
    如果指定了trans_state的参数，将会对transaction中的日志进行状态的匹配，按照时间顺序进行匹配，得到每条日志的状态，如果指定了results by flow参数，则生成状态之间的转换关系，目前匹配方式分为两种：
    1. 利用某个字段中的值作为状态，with states a, b, c in module results by flow
    2. 对日志原文中使用正则匹配进行状态指定，如：
    with "query parse" in message as qp,
    with "fetch doc" in message as fd
    results by flow
[NOTE]
====
* maxopenevents参数对应的最大值默认为100000，对应配置项为transaction.max_open_events_limit
** 说明：
    该配置项用于限制maxopenevents的这个参数值，如果在语句中指定的该参数的值超过该配置项，则会报错。
* maxopenevents参数对应的默认值为50000，对应配置项为transaction.max_open_events
** 说明：
    该配置项为语句中没有指定maxopenevents参数值时，使用的默认参数值
====
.示例1
====
通过apache.clientip对日志进行关联，按照时间戳排序，包含Receive的日志为一个新的交易的第一条日志，包含Response的为最后一日志，最多包含10条日志，日志的时间跨度最大为5s
[source,bash]
logtype:apache |  transaction apache.clientip startswith="Android 4.3" endswith="AndroidPhone" maxopenevents = 10
image::images/Image-140318-044724.520.png[]
从图中可见，以clientip为分组的transaction的起始日志含有”Android 4.3”，并且以含有Android Phone的日志为结束点
====
.示例2
====
通过apache.clientip对日志关联，每个交易最多包含10条日志，满足apache.status等于200的日志为transaction的第一条日志
[source,bash]
logtype:apache |transaction apache.clientip startswith=eval(apache.status==200)  maxopenevents = 10
image::images/Image-140318-044752.558.png[]
====
.示例3
====
输入以下json日志，使用transaction获取状态转移的信息
----
{"timestamp":"2017-04-12 16:27:14.000", "sid":1, "module":"a"}
{"timestamp":"2017-04-12 16:27:14.000", "sid":2, "module":"a"}
{"timestamp":"2017-04-12 16:27:14.002", "sid":1, "module":"b"}
{"timestamp":"2017-04-12 16:27:14.003", "sid":1, "module":"c"}
{"timestamp":"2017-04-12 16:27:14.003", "sid":2, "module":"c"}
{"timestamp":"2017-04-12 16:27:14.004", "sid":3, "module":"a"}
{"timestamp":"2017-04-12 16:27:14.005", "sid":3, "module":"b"}
----
得到结果如下：
image::images/Image-140318-044846.794.png[]
对transaction的flow结果进行统计，生成桑基图:
image::images/Image-140318-044907.605.png[]
====
.示例4
====
搜索到的所有数据按照appname进行聚合(图一)，按照appname进行聚合并且按照json.a进行排序(图二)
[source,bash]
tag:richard2 | transaction appname
图一：
image::images/transaction-1.png[]
[source,bash]
tag:richard2 | transaction appname sortfield=+json.a
图二：
image::images/transaction-2.png[]
====