Connect_Retry: 60
Master_Log_File: plj.000008
Read_Master_Log_Pos: 154
Relay_Log_File: sql52-relay-bin.000015
Relay_Log_Pos: 314
Relay_Master_Log_File: plj.000008
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Replicate_Do_DB:
Replicate_Ignore_DB: db7,db6
# 二 MySQL主从同步复制模式
## 2.1异步复制模式:
主库执行完一次事务后,立即将结果返给客户端,并不关心从库是否已接收并处理
## 2.2全同步复制模式:
当主库执行完一次事务后,且所有从库都执行了该事务后才返回给客户端
## 2.3半同步复制模式:
介于异步复制和全同步复制之间
主库在执行完一次事务后,等待至少一个从库接收到并写到relay
log中才返回给客户端
## 2.4配置半同步复制模式
把主库设置为半同步复制模式 把从库设置为半同步复制模式
**配置命令集:**
查看是否允许动态加载模块:
mysql\>show variables like \'have_dynamic_loading\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| have_dynamic_loading \| YES \| #允许
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
查看模块是否被加载:
mysql\>select plugin_name,plugin_status from information_schema.plugins
where plugin_name like \'%semi%\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plugin_name \| plugin_status \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| rpl_semi_sync_master \| ACTIVE \| #活跃的
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
查看模块是否启用:
mysql\> show variables like \"rpl_semi_sync\_%\_enabled\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| rpl_semi_sync_master_enabled \| OFF \| #关的
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
**主服务**加载半同步复制模块:
mysql\>Install plugin rpl_semi_sync_master SONAME
\'semisync_master.so\';
**主库**启用模块:
set global rpl_semi_sync_master_enabled = 1;
**主库**永久配置
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
plugin-load=rpl_semi_sync_master=semisync_master.so
rpl_semi_sync_master_enabled=1
**从服务**加载半同步复制模块;
mysql\> Install plugin rpl_semi_sync_slave soname \'semisync_slave.so\';
Query OK, 0 rows affected (0.09 sec)
**从库**启用模块
mysql\>set global rpl_semi_sync_slave_enabled = 1;
;**从库**永久配置
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
plugin-load=rpl_semi_sync_slave=semisync_slave.so
rpl_semi_sync_slave_enabled=1
### 2.4.1把主库51设置为半同步复制模式
#### 1查看是否允许动态加载模块
mysql\> show variables like \'have_dynamic_loading\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| have_dynamic_loading \| YES \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
#### 2查看模块是否被加载
mysql\>select plugin_name,plugin_status from information_schema.plugins
where plugin_name like \'%semi%\';
#### 3主服务加载半同步复制模块
mysql\>Install plugin rpl_semi_sync_master SONAME
\'semisync_master.so\';
Query OK, 0 rows affected (0.05 sec)
加载完后查看一下
mysql\> select plugin_name,plugin_status from information_schema.plugins
where plugin_name like \'%semi%\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plugin_name \| plugin_status \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| rpl_semi_sync_master \| ACTIVE \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
#### 4主库查看并启用模块
**查看**
mysql\> show variables like \"rpl_semi_sync\_%\_enabled\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| rpl_semi_sync_master_enabled \| OFF \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
**启用后再查看**
mysql\>set global rpl_semi_sync_master_enabled = 1
Query OK, 0 rows affected (0.00 sec)
mysql\> show variables like \"rpl_semi_sync\_%\_enabled\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| rpl_semi_sync_master_enabled \| ON \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
**以上命令设置在重启服务后会失效**
#### 5修改主配置文件永久生效
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
plugin-load=rpl_semi_sync_master=semisync_master.so #加载模块
rpl_semi_sync_master_enabled=1 #启用半同步复制模式
\[root@sql51 \~\]# systemctl restart mysqld
### 2.4.2把从库52设置为半同步复制模式
#### 1.查看是否允许动态加载模块
mysql\> show variables like \'have_dynamic_loading\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| have_dynamic_loading \| YES \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
#### 2.从服务器加载半同步复制模块
mysql\> Install plugin rpl_semi_sync_slave soname \'semisync_slave.so\';
Query OK, 0 rows affected (0.09 sec)
#### 3.查看模块是否被加载
mysql\> select plugin_name,plugin_status from information_schema.plugins
where plugin_name like \'%semi%\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plugin_name \| plugin_status \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| rpl_semi_sync_slave \| ACTIVE \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.01 sec)
#### 4.启用模块
mysql\> set global rpl_semi_sync_slave_enabled = 1;
Query OK, 0 rows affected (0.00 sec)
#### 5.查看模块是否被启用
mysql\> show variables like \"rpl_semi_sync\_%\_enabled\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| rpl_semi_sync_slave_enabled \| ON \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
#### 6.从库永久配置
\[root@sql52 \~\]# vim /etc/my.cnf
\[mysqld\]
plugin-load=rpl_semi_sync_slave=semisync_slave.so #加载模块
rpl_semi_sync_slave_enabled=1 #启用半同步复制模块
\\
案例1：MySQL一主一从
案例2：配置主从从同步结构
配置半同步复制模式
1 案例1：MySQL一主一从
1.1 问题
构建 主\--\>从 复制结构
其中主机192.168.4.10作为主库
主机192.168.4.20作为从库
1.2 方案
使用2台RHEL
7虚拟机，如图-1所示。其中192.168.4.10是MySQL主服务器，负责提供同步源；另一台192.168.4.20作为MySQL从服务器，通过调取主服务器上的binlog日志，在本地重做对应的库、表，实现与主服务器的AB复制（同步）。
图－1
提前为两台MySQL服务器安装好MySQL-server、MySQL-Client软件包，并为数据库用户root修改密码；Linux客户机上则只需安装MySQL-Client软件包即可。
1.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：初始化现有库
为了在启用binlog日志及同步之前保持主、从库的一致性，建议进行初始化------备份主服务器上现有的库，然后导入到从服务器上。
当现有库、表都采用MyISAM引擎时，可执行离线备份、恢复，这样更有效率；否则，可通过mysqldump等工具来实现库的导出、导入。
1）备份MySQL Master（192.168.4.10）上现有的库
如果服务器已经启用binlog，建议对日志做一次重置，否则可忽略：
\[root@dbsvr1 \~\]# mysql -u root -p
Enter password: //以数据库用户root登入
.. ..
mysql\> RESET MASTER; //重置binlog日志
Query OK, 0 rows affected (0.06 sec)
mysql\> quit //退出mysql\> 环境
Bye
以备份mysql库、sys库为例，导出操作如下：
\[root@dbsvr1 \~\]# mysqldump -u root -p --all-databases \>
/root/mytest.sql
Enter password: //验证口令
\[root@dbsvr1 \~\]# ls -lh /root/mytest.sql //确认备份结果
-rw-r\--r\--. 1 root root 777172 4月 23 12:21 /root/mytest.sql
2）在MySQL Slave（192.168.4.20）上导入备份的库
先清理目标库，避免导入时冲突。主要是采用InnoDB引擎的库，授权库mysql多采用MyISAM引擎，可不做清理。
\[root@dbsvr2 \~\]# mysql -u root -p
Enter password: //以数据库用户root登入
.. ..
mysql\> DROP DATABASE test; //删除test库
Query OK, 0 rows affected (0.03 sec)
mysql\> quit //退出mysql\> 环境
Bye
使用scp工具下载备份文件：
\[root@dbsvr2 \~\]# scp /root/mytest.sql PI:EMAIL:/
root@dbsvr1\'s password: //验证对方系统用户root的口令
mytest.sql 100% 759KB 759.0KB/s 00:00
\[root@dbsvr2 \~\]# ls -lh mytest.sql //确认下载结果
-rw-r\--r\--. 1 root root 759K 4月 23 12:22 /mytest.sql
执行导入操作：
\[root@dbsvr2 \~\]# mysql -u root -p \ 环境，确认清理的目标库已恢复：
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
\| mysql \|
\| performance_schema \|
\| sys \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.00 sec)
步骤二：配置MySQL Master（主服务器，192.168.4.10）
1）修改/etc/my.cnf配置，重新启动MySQL服务程序
指定服务器ID号、允许日志同步：
\[root@dbsvr1 mysql\]# vim /etc/my.cnf
\[mysqld\]
log_bin=dbsvr1-bin //启用binlog日志，并指定文件名前缀
server_id = 10 //指定服务器ID号
\...\...
重启mysql服务：
\[root@dbsvr1 \~\]# systemctl restart mysqld.service
2）新建一个备份用户，授予复制权限
需要的权限为REPLICATION SLAVE，允许其从Slave服务器访问：
mysql\> GRANT REPLICATION SLAVE ON \*.\* TO
\'replicater\'@\'192.168.4.%\' IDENTIFIED BY \'pwd123\';
Query OK, 0 rows affected, 1 warning (0.09 sec)
3）检查Master服务器的同步状态
在已经初始化现有库的情况下，查看MASTER状态，记录下当前的日志文件名、偏移的位置（下面SLAVE发起复制时需要用到）：
mysql\> SHOW MASTER STATUS\\G
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
File: dbsvr1-bin.000001 //记住当前的日志文件名
Position: 154 //记住当前的位置
Binlog_Do_DB:
Binlog_Ignore_DB:
Executed_Gtid_Set:
1 row in set (0.00 sec)
步骤三：配置MySQL Slave（从服务器，192.168.4.20）
1）修改/etc/my.cnf配置，重新启动MySQL服务程序
指定服务器ID号、允许日志同步：
\[root@dbsvr2 \~\]# vim /etc/my.cnf
\[mysqld\]
log_bin=dbsvr2-bin //启动SQL日志，并指定文件名前缀
server_id = 20 //指定服务器ID号，不要与Master的相同
.. ..
在生产环境中，还可以根据需要设置更详细的同步选项。比如，指定当主、从网络中断时的重试超时时间（slave-net-timeout=60
）等，具体可参考MySQL手册。