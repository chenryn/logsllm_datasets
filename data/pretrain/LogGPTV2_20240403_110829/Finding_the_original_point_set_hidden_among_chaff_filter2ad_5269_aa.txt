title:Finding the original point set hidden among chaff
author:Ee-Chien Chang and
Ren Shen and
Francis Weijian Teo
Finding the Original Point Set Hidden among Chaff
Ee-Chien Chang
Ren Shen
Francis Weijian Teo
School of Computing
National University of Singapore
{changec,shenren,teoweiji}@comp.nus.edu.sg
ABSTRACT
In biometric identiﬁcation, a ﬁngerprint is typically repre-
sented as a set of minutiae which are 2D points. A method
[4] to protect the ﬁngerprint template hides the minutiae
by adding random points (known as chaﬀ ) into the origi-
nal point set. The chaﬀ points are added one-by-one, con-
strained by the requirement that no two points are close to
each other, until it is impossible to add more points or suf-
ﬁcient number of points have been added. Therefore, if the
original template consists of s points, and the total number
of chaﬀ points and the original points is m, then a brute-
force attacker is expected to examine half of m chooses s pos-
sibilities to ﬁnd the original. The chaﬀ generated seem to be
“random”, especially if the minutiae are also randomly gen-
erated in the same manner. Indeed, the number of searches
required by the brute-force attacker has been used to mea-
sure the security of the method. In this paper, we give an
observation which leads to a way to distinguish the minutiae
from the chaﬀ. Extensive simulations show that our attacker
can ﬁnd the original better than brute-force search. For e.g.
when s = 1 and the number of chaﬀ points is expected
to be about 313, our attacker on average takes about 100
searches. Our results highlight the need to adopt a more
rigorous notion of security for template protection. We also
give an empirical lower bound of the entropy loss due to the
sketch.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Authentication; E.3
[Data]: Coding and Information Theory
General Terms
Security, Algorithms
Keywords
Secure Sketch, Fingerprint template, Biometric privacy
protection, Online parking.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’06 March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00
INTRODUCTION
1.
Biometric data is usually noisy due to noise introduced dur-
ing data capturing. For instance, two scanned images of
a same ﬁnger are probably diﬀerent. The inevitable noise
poses challenges in applying classical cryptographic tech-
niques on biometric templates. Recently, a few schemes have
been proposed to handle the noise, for example fuzzy com-
mitment[8], shielding function[9], and secure sketch[5, 2].
These schemes use a short piece of public information to re-
cover the original data from the noisy version. More specif-
ically, the public data PX is constructed from the original
biometric template X. The data PX has the property that,
from PX and another biometric template Y , the original X
can be recovered, provided that Y is close to X. In other
words, PX can be used to remove the noise from Y , if Y is
close to X. We follow the deﬁnitions by Dodis et al.[5] and
call the public data PX a sketch.
The following example illustrates an application of a sketch.
In this application, the ﬁngerprint is to be used as the secret
key in encrypting a ﬁle. Before encryption, the ﬁngerprint
of the owner is scanned, and the ﬁngerprint features are
extracted. The extracted features X, represented as a string,
serves as the secret key. The ﬁle is then encrypted using the
secret key. Next, a sketch PX is computed from X, and PX
is stored in the header of the encrypted ﬁle in clear. To
decrypt the ﬁle, a ﬁngerprint is obtained and its features
Y are extracted. From the secure sketch PX and Y , by
property of the sketch, the original X can be reconstructed
if Y is closes to X. Now, from the reconstructed X, the
secret key can be recovered and the ﬁle can be decrypted.
Since PX is published in clear, it is important that it does
not reveal too much information about X.
The design of sketch is dependent on the underlying metric
in measuring the distance between two templates. Finger-
prints are widely used in biometric identiﬁcation. Typically,
a ﬁngerprint is represented as a set of 2D points, known as
minutiae[10]. Under noise introduced during scanning and
processing, each minutia may be perturbed by a small dis-
tance. Let us call this type of noise the white noise.
In
addition, a small number of minutiae may be missing and
some new minutiae may be introduced. Let us call this type
of noise the replacement noise. Figure 1 shows an example
of minutiae and the noise1.
Although extensive studies have been conducted for ﬁnger-
1Fingerprint raw image is obtained from [1]

We give a method that on average, can ﬁnd the original X
among (X ∪ C) better than the brute force search. Based
on simulation results, when |X| = 1 and the average size
|R| = 312.6, on average we can ﬁnd the sole minutia using
about 100 searches, whereas a brute-force search on average
requires 156.5 searches. When |X| = 38, then the average
speedup factor compare to the brute-force search is 2192.7.
The speedup provided by our attacker does not suﬃciently
imply that the sketch R = (X ∪ R) reveals too much in-
formation and hence is insecure. Instead, it highlights the
need to adopt a more rigorous formulation of security in
analyzing sketches. For example, using the notion of en-
tropy loss proposed by Dodis et al. [5]. On the other hand,
the stochastic process in generating the chaﬀ is intriguing
and diﬃcult to analyze. A corresponding process known
as online parking has attracted much attention[12, 11, 6].
Many fundamental questions remain open, for example the
Palasti’s conjecture[11]. This is especially so in 2D due to
the involvement of geometry. Hence, establishing a bound
of the entropy loss analytically would not be easy. Never-
theless, based on our simulation and some approximations,
we are able to give an empirical lower bound of the entropy
loss.
Main Idea. Our method is based on the following obser-
vation. Recall that the chaﬀ points are generated one-by-
one. We observe that a chaﬀ point that is generated late in
the process, tends to have smaller free area. We will deﬁne
free area later in Section 2. Informally, a point with smaller
free area has more neighboring points in (X ∪ C). In other
words, we observe that for diﬀerent local arrangements, the
likelihood of a point being the minutia can be diﬀerent. This
observation is formulated as the inequality (3). However, we
are unable to prove it analytically. Nevertheless, it is veriﬁed
experimentally. This observation leads to an attacker who
gives higher priority to points with large free area during
the search.
2. MODELS AND ASSUMPTIONS
Attacker Model. Given the sketch PX of the original X
where |X| = s, the goal of an attacker is to ﬁnd X. The at-
tacker can query a blackbox. On input of a set Q of s points,
the blackbox will return YES iﬀ Q = X. The eﬀectiveness of
an attacker is measured by the number of queries he sent.
In the application given in introduction, the blackbox is the
decryption of the ﬁle using the key Q. The output of YES
corresponds to the situation where the ﬁle is successfully
decrypted. Note that we only count the number of calls to
the blackbox. Other computations carried out by the at-
tackers, for example, in deciding which query to be sent,
are not counted. It is appropriate and convenient to count
only the blackbox calls. Typically, the blackbox operation
is computationally intensive, for instance, ﬁle decryption in
the above application. In addition, in some applications, the
blackbox operations are carried out by a remote server. The
attackers have limited access to the server, but have ample
computing resources.
Online Parking.
Let us call the following process on-
line parking. This process selects a set of points one-by-one.
Each point is uniformly and randomly chosen from the do-
(a)
(b)
Figure 1: (a) The original ﬁngerprint. The dots
are the extracted minutiae.
(b) The dots are the
original minutiae. The “+” are minutiae extracted
from another scan of the same ﬁnger.
prints, there are few secure sketch constructions on ﬁnger-
prints. Perhaps the earliest construction is by Clancy et al.
[4], which is the focus of this paper. Yang et al. [13] followed
the approach of adding chaﬀ and proposed an alternative
feature representation that reduces (but not eliminates) the
eﬀect of white noise. Chang et al. [3] gave a provably secure
(under the notion of entropy loss) construction using a com-
bination of rounding and a diﬀerent way of generating chaﬀ
points. However, it is not clear whether the construction by
Chang et al. loses less entropy compared to the construction
by Clancy.
Clancy et al. [4] proposed the following method of generat-
ing a sketch which comprises of 2 parts. The ﬁrst part is an
unordered set of points R = (X ∪ C), where X is the orig-
inal minutiae, and the points in C are randomly selected
and are called the chaﬀ. The set R is δ-separated in the
sense that no two points are within a distance of δ to each
other. The chaﬀ points are selected one-by-one in the fol-
lowing manner: First, uniformly and randomly pick a 2D
point. If this point is within a distance δ to any point in
X, or any selected chaﬀ, then discard it. If not, select it as
a chaﬀ point. The process is repeated until it is impossible
to add any more chaﬀ points or suﬃcient number of chaﬀ
points have been selected. Now, the description of R will
be the ﬁrst part of the sketch. Suppose Y is a noisy version
of X corrupted by white noise, from Y together with R, we
can recover X. The role of the second part of the sketch is
to recover X from replacement error.
2m
s possible combinations in order
We are interested in the ﬁrst part of the sketch R = (X∪C).
Intuitively, the minutiae X are hidden among the random
chaﬀ and it seems impossible to distinguish them. Sup-
pose |X| = s and |X ∪ C| = m, then on average, a brute-
force search examines 1
to ﬁnd X. In fact, the amount of searches required by the
brute-force search has been used to measure the security of
the sketch. Based on the typical number of minutiae, noise
parameters, and the assumption that the attackers employ
brute-force search, it was estimated the attacker has to in-
vest 269 more time to ﬁnd X compared to a user who has
a noisy version of the minutiae [4]. Now, this leads to the
following interesting questions: Is it possible to distinguish
X from C? Is there an attacker that can perform better than
the brute-force-search?

main [0, n]× [0, n]. If it is within unit distance from any pre-
viously selected points, then it is discarded. If not, it is se-
lected. The process is repeated until the stopping condition
is met. Here are two possible stopping conditions. We can
repeat the process until it is impossible to add more points.
Note that if we employ this condition, the total number of
points selected is not deterministic. Alternatively, we can
repeat the process until a predetermined number of points
have been selected. In this paper, we employ the ﬁrst con-
dition to generate the sketch. We also conduct preliminary
investigation for the second condition (Section 4.6).
For each selected point, if it is the k-th point selected, then
we say that its arrival order is k.
Distribution of minutiae. The minutiae X is a set of s
points from the bounded domain [0, n] × [0, n]. The set X
is separated in the sense that for any two diﬀerent points
x, y ∈ X, the Euclidean distance x − y2 > 1.
We assume that the distribution of the set of s minutiae is
same as the distribution of the ﬁrst s points generated by
the online parking process. In practice, the minutiae might
follow another distribution. Knowledge of such distribution
may further help to identify the minutiae.
Sketch generation. Recall that the sketch PX consists of
two parts. Let us call the ﬁrst part the white noise sketch,
since its role is to recover from white noise, and the sec-
ond part the replacement sketch. As mentioned in the in-
troduction, the white noise sketch is the description of the
unordered set R = (X ∪ C), where X is the original and
C is generated by the online parking process. The role of
replacement sketch is to correct t replacement errors (that
is, t points are replaced by t random points), where t is a
predetermined parameter. The actual value of t is not cru-
cial in our analysis. There are a number of known sketch
schemes for replacement noise [7, 5, 3]. For instance, Juels
et al. [7] proposed using a polynomial of degree (s− 2t + 1),
and employed BCH in decoding.
The sketch PX reveals some information of X. For instance,
the white noise sketch, which is the point set R = (X ∪ C),
reveals that a minutia must be one of the points in R. The
replacement sketch further reveals information on X, and
imposes more restrictions on the point sets that can generate
PX . Let us say that a point set X is a candidate consistent
with a sketch, if the sketch can be generated from X.
Brute-force attacker. A brute-force attacker enumerates
all candidates consistent with the given sketch, and sends
the candidates to the blackbox one-by-one until a YES is ob-
tained. The white noise sketch reveals possible locations of
the minutiae, and the number of candidates consistent with
white noise sketch is m
s when |X ∪ C| = m. The num-
ber of candidates can be further reduced by considering the
replacement sketch. If the replacement sketch can correct
up to t errors, and the set-diﬀerence scheme [7] is employed,
then the average number of candidate consistent with both
white noise and replacement sketch is approximately
m
sm−(s−2t).
Point X
Figure 2: Illustration of free area. FR(x) is the area
of the shadow. Each circle is a unit disk.
We assume that the brute-force attacker is randomized. The
order of sending the candidates to the black box is randomly
permuted. Hence, for any sketch, the expected number of
calls required is half of the total number of candidates.
Free area. Given a set of points W , deﬁne A(W ), the
available region, to be the set
for all w ∈ W,x − w2 > 1}.
A(W ) = {x ∈ [0, n] × [0, n] :
A point in the available region can be added into W and yet
(1)
W remains separated. For a point set R and a point x ∈ R,
deﬁne the free area of x with respect to R as,
(x) = |A(R − {x}) − A(R)|,
FR
where “−” is the set diﬀerence operator, and | · | gives the
area of the region. Figure 2 illustrates the free area. When
it is clear in the context, we omit R and write the free area
as F(x).
Consider the online parking process. Let Ax be the random
variable on the arrival order of x, given that x is selected.
Let us write F(x) = f as the event that x is selected and