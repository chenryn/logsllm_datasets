### Heap Layout and Primitive Selection

To meet the requirements for heap layouts, we must select victim classes from a primitive database with a size greater than 128 bytes. This ensures that the selected classes are large enough to be manipulated effectively.

### Primitive in Exploit

Based on the above criteria, we order VScape with the following rules:
1. The size of the victim class must exceed 128 bytes.
2. The offset of the victim member variable, when divided by 8, should have a high address byte (i.e., `offset % 8 > 1`).
3. The primitive must have capabilities for St-nonPtr (non-pointer storage).

Using these rules, we identified 71 candidate Unconstrained Virtual Calls (UVCs). Out of these, 12 were triggered during reachability tests. The selected primitive tuple is `(Animation::UpdateTiming(), Animation, CSSAnimation)` within the `mozilla::dom` namespace.

### Exploit Emulation and Symbolic Execution

Before developing a real exploit, we emulate a PC hijack towards the counterfeit virtual function using Angr for symbolic execution. This step assesses whether the target instruction is reachable, assuming the memory of relay objects is controllable. In this case, the out-of-bounds (OOB) writing instruction executes only if the `mNeedsNewAnimationIndexWhenRun` variable is not null. This condition does not conflict with the assumed gadget, which will zero the boolean type variable.

### Firefox Web Animation APIs

Firefox provides Web Animation APIs for users to describe animations on DOM elements. When we declare animation configurations with JavaScript code, corresponding `Animation` objects are allocated on the jemalloc heap during page rendering. `CSSAnimation` is a subclass of `Animation`, and the counterfeit function `CSSAnimation::UpdateTiming()` attempts to zero the `mNeedsNewAnimationIndexWhenRun` boolean variable.

### Exploit Synthesis

The `Animation` object has a size of 256 bytes. Therefore, such objects will only be found in runs for 256 bytes. To create the required heap layout, both the vulnerable object (float list) and the relay object (data list for `ArrayObject`) are modified to the same size.

As shown in Figure 9, after triggering the counterfeit function, we can tamper with the NaN-boxing pointer of `ArrayObject`'s item. When the pointer is redirected to controllable memory, we use a counterfeit `JSStringObject` to achieve Arbitrary Address Read (AAR). By replacing the counterfeit `JSStringObject` with a counterfeit `TypedArrayObject`, we also achieve Arbitrary Address Write (AAW).

### Related Work

#### CFI-Oriented Attacks

Researchers have proposed several practical yet imprecise Control-Flow Integrity (CFI) solutions. Although these coarse-grained CFI solutions significantly reduce the attack surface, multiple attacks have been developed to bypass them by exploiting the large size of equivalence classes (ECs) for each Indirect Call Target (ICT).

To counteract these attacks, fine-grained CFI solutions have been proposed. However, due to the undecidability of sound and complete pointer analysis, these solutions rely on conservative over-approximations, enabling potential attacks. For example, Control Jujutsu demonstrates that common software engineering practices force points-to analysis to merge several equivalence classes, making them large enough for arbitrary computation. Other attacks, like Control-Flow Bending, show that even with ideal point-to analysis results, CFI solutions can still be vulnerable.

#### Automated Exploit Generation (AEG)

Automated exploit generation (AEG) is used to assess the exploitability of vulnerabilities by generating exploits. Since David et al. proposed automatic patch-based exploit generation (APEG), AEG has become a research focus. Representative techniques include AEG, Mayhem, Q, and CRAX. These solutions typically analyze vulnerabilities along with crashing paths, search for exploitable states, collect constraints, and generate exploit inputs.

Recent tools like FUZE and Revery use fuzzing to explore more exploitable states. However, none of these solutions are fully automated and require expert knowledge or annotations. Gollum completes an end-to-end AEG system from primitive extraction to heap layout inference in user space.

#### Challenges in AEG

Key challenges in AEG include heap layout manipulation and handling modern defenses. Tools like ARCHEAP, RELAY, and HEAPG help synthesize exploits in CTF challenges but are less effective in real-world scenarios. Gollum applies a genetic algorithm to solve heap layout problems, while SLAKE extracts heap operations to obtain desired slab layouts based on kernel heap allocator knowledge.

### Discussion

#### Potential Mitigations

Given the preconditions of COOPLUS, there are two ways to protect applications:
1. Separate vptr from writable and vulnerable heap objects by placing them in a protected memory region.
2. Protect the integrity of vptr using Data Flow Integrity (DFI) to block illegal writes.

The first approach breaks the C++ ABI and is impractical. The second approach, while effective, has high performance overheads. A more practical mitigation might be a combination of type-based and context-sensitive CFI solutions, as demonstrated by µCFI. However, µCFI requires Intel PT and a customized kernel, making it difficult to deploy. Type-based CFI solutions are more popular and easier to implement, but they need to measure the size of overridden virtual functions for each virtual call site.

#### Limitations of VScape

Like other state-of-the-art AEG tools, VScape is not fully automated and relies on exploit templates. Key challenges include:
1. Automated heap layout manipulation, especially in garbage-collected environments.
2. Generating exploits for complex and large applications like browsers.
3. Requiring expert knowledge to compose multi-step exploits.

These challenges limit the availability and effectiveness of AEG tools, including VScape.

#### Practicality of COOPLUS

For C++ applications using virtual functions, the COOPLUS attack surface is large, as demonstrated in Firefox and PyQt. While this attack is feasible in real-world targets, its success rate depends on the number of available exploit primitives in the target application.

### Conclusions

In this paper, we propose COOPLUS, an advanced code reuse attack, and present VScape to assess the effectiveness of virtual call defenses. COOPLUS can bypass virtual call protections if they do not break the ABI, cannot guarantee vptr integrity, and allow multiple runtime targets at virtual call sites. VScape analyzes target applications, compiles exploit primitives, and generates working exploits. Our evaluation shows that real-world applications have many exploitable virtual calls, and VScape can generate exploits to bypass these protections. To mitigate COOPLUS, protecting vptr integrity with low performance overhead and good compatibility is essential.

### Acknowledgement

This work was supported in part by the National Natural Science Foundation of China under Grants 61772308, 61972224, U1736209, and U1836112, and the BNRist Network and Software Security Research Program under Grants BNR2019TD01004 and BNR2019RC01009.

### References

[1] M. Martín Abadi and J. L. Úlfar Erlingsson, “Control flow integrity: Principles, implementations, and applications.” in Proceedings of the 12th ACM Conference on Computer and Communications Security, Alexandria, Virginia, 2005, pp. 340–353.

[2] M. R. Khandaker, W. Liu, A. Naser, Z. Wang, and J. Yang, “Origin-sensitive control flow integrity.” in 28th USENIX Security Symposium (USENIX Security 19), 2019, pp. 195–211.

[3] M. Zhang and R. Sekar, “Control flow integrity for COTS binaries.” in Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), 2013, pp. 337–352.

[4] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables.” in 2013 IEEE Symposium on Security and Privacy. IEEE, 2013, pp. 559–573.

[5] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications.” in 2015 IEEE Symposium on Security and Privacy. IEEE, pp. 745–762. [Online]. Available: https://ieeexplore.ieee.org/document/7163058/

[6] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in GCC & LLVM.” in 23rd USENIX Security Symposium (USENIX Security 14), 2014, pp. 941–955.

[7] C. Zhang, D. Song, S. A. Carr, M. Payer, T. Li, Y. Ding, and C. Song, “VTrust: Regaining trust on virtual calls.” in NDSS, 2016.

[8] H. Hu, C. Qian, C. Yagemann, S. P. H. Chung, W. R. Harris, T. Kim, and W. Lee, “Enforcing unique code target property for control-flow integrity.” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 1470–1486.

[9] T. Avgerinos, S. K. Cha, B. Lim, T. Hao, and D. Brumley, “AEG: Automatic exploit generation,” 2011.

[10] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing mayhem on binary code.” in Security and Privacy (SP), 2012 IEEE Symposium on. IEEE, 2012, pp. 380–394.

[11] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu, K. Chen, and W. Zou, “Revery: From proof-of-concept to exploitable.” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 1914–1927.

[12] S. Heelan, T. Melham, and D. Kroening, “Gollum: Modular and grey-box exploit generation for heap overflows in interpreters.” in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2019, pp. 1689–1706.

[13] PaX-Team, “PaX ASLR (Address Space Layout Randomization),” http://pax.grsecurity.net/docs/aslr.txt, 2003.

[14] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit hardening made easy.” in USENIX Security Symposium, 2011, pp. 25–41.

[15] S.-K. Huang, M.-H. Huang, P.-Y. Huang, C.-W. Lai, H.-L. Lu, and W.-M. Leong, “CRAX: Software crash analysis for automatic exploit generation by modeling attacks as symbolic continuations.” in Software Security and Reliability (SERE), 2012 IEEE Sixth International Conference on. IEEE, 2012, pp. 78–87.

[16] M. Wang, P. Su, Q. Li, L. Ying, Y. Yang, and D. Feng, “Automatic polymorphic exploit generation for software vulnerabilities.” in International Conference on Security and Privacy in Communication Systems. Springer, 2013, pp. 216–233.