title:Ghost Domain Names: Revoked Yet Still Resolvable
author:Jian Jiang and
Jinjin Liang and
Kang Li and
Jun Li and
Hai-Xin Duan and
Jianping Wu
Ghost Domain Names: Revoked Yet Still Resolvable
Jian Jiang, Jinjin Liang
Network Research Center
Tsinghua University
{jiang-j08, liangjj09}@mails.tsinghua.edu.cn
Kang Li
Department of Computer Science
University of Georgia
PI:EMAIL
Jun Li
Haixin Duan∗
Jianping Wu
University of Oregon
Network Research Center
Network Research Center
Carlos III University of Madrid
Tsinghua University
Tsinghua University
Institute IMDEA Networks
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
Attackers often use domain names for various malicious
purposes such as phishing, botnet command and control,
and malware propagation. An obvious strategy for prevent-
ing these activities is deleting the malicious domain from
the upper level DNS servers. In this paper, we show that
this is insufﬁcient. We demonstrate a vulnerability affecting
the large majority of popular DNS implementations which
allows a malicious domain name to stay resolvable long af-
ter it has been removed from the upper level servers. Our
experiments with 19,045 open DNS servers show that even
one week after a domain name has been revoked and its TTL
expired, more than 70% of the servers will still resolve it.
Finally, we discuss several strategies to prevent this attack.
1. Introduction
The Domain Name System (DNS), which provides a
global mapping service between Internet domain names and
IP addresses, is one of the most important components of
the Internet. While primarily used for legitimate purposes,
domain names have also been heavily leveraged by mali-
cious activities such as phishing, malware propagation, and
botnet command and control. A major endeavour in stop-
ping these malicious activities has thus been identifying and
deleting malicious domain names. For example, recent do-
main name takedown efforts have successfully shut down
large scale botnets such as Waledac and Rustock [7].
While these successes have demonstrated that domain
name revocation is effective in ﬁghting against malicious
∗Corresponding author
activities, in this paper we show that removing malicious
domains from domain registry is not enough to revoke the
domain and IP mapping at the global scale. In fact, an at-
tacker can keep their domain names continuously resolvable
to attacker-controlled IP addresses—even after the original
delegation data has been removed from the domain reg-
istry and the original time-to-live (TTL) period has expired.
Because of the elusive nature of these domain names (i.e.
revoked but still resolvable), we call them ghost domain
names.
Ghost domain names are results of a vulnerability in the
DNS cache update policy which prevents effective domain
name revocation. The normal process of revoking a domain
name from the global DNS system includes two steps: ﬁrst
the removal of the delegation data at the domain registry,
and second the removal of all the cached copies through-
out DNS resolvers. The ﬁrst step is based on an explicit
action, and the second one is implicitly governed by the
TTL value associated with the delegation data. Although
the TTL-based implicit revocation mechanism is not timely,
it is still acceptable if a revoked domain name can be even-
tually cleared from every DNS resolver after the speciﬁed
time according to the TTL value. Unfortunately, DNS al-
lows a cached entry to be overwritten at a DNS resolver and
the cache update logic is not strictly deﬁned. An attacker
can manipulate the cached delegation data and extend the
TTL value. The attacker only needs to generate a recursive
query to be resolved by the authoritative server (controlled
by the attacker) before the TTL expires, and piggyback new
delegation data in the crafted response from the authorita-
tive server to the resolver (the victim). The new delegation
data still resolves to an IP address controlled by the attacker
but with new TTL value, and the attacker can continuously
keep the delegation data alive in the resolver by repeating
the same attack.
This vulnerability is different from the notorious cache
poisoning attacks [4]. While cache poisoning attacks com-
promise the integrity of DNS data by forging DNS re-
sponses, to exploit the ghost domain vulnerability, the at-
tacker only needs to perform two legitimate actions: 1)
querying the victim DNS resolver for a ghost domain to
force the victim resolver to query the attacker’s authoritative
server before the delegation data expires, and 2) piggyback-
ing new delegation data in the response from the authorita-
tive server to the victim resolver. Because the two actions
are seemingly legitimate, the vulnerability has not been ad-
dressed by the previous patches for cache poisoning.
Our study conﬁrms that, until the writing of this pa-
per, the majority of public DNS servers and up-to-date ver-
sions of popular DNS implementations, including the lead-
ing vendor BIND, are vulnerable. We believe that this vul-
nerability has not been suitably acknowledged by the net-
working and security community. Through experiments
with 19,045 open DNS resolvers, we demonstrate that over
93% of experimental DNS resolvers are vulnerable and a
large scale exploitation is practical. we have successfully
created and kept ghost domain names in over 70% of exper-
imental resolvers after one week of domain name revocation
and TTL expiration.
This paper also discusses various approaches to address-
ing the problem of ghost domain names. Our study ﬁnds
three DNS implementations, namely Unbound, MaraDNS
and Microsoft DNS, have non-vulnerable versions. By
comparing them, we ﬁnd that although Unbound’s strategy
is simple in terms of implementation, MaraDNS’s strategy
is more fundamental — tightening the policy for delega-
tion data update. We recommend that the DNS community
adopt this defense strategy, and moreover consider a rigor-
ous deﬁnition of DNS cache update policy.
The rest of this paper is organized as follows. We re-
view necessary background of DNS in section 2. We then
describe technical details of the vulnerability in section 3.
In section 4 we present our exploitation experiments and
analyze experimental results. We then discuss defenses and
possible issues in section 5. Finally, we highlight the related
work in section 6, and conclude the paper in section 7.
2. Background
In this section, we brieﬂy summarize how DNS works.
We focus on the concepts and details related to the vulnera-
bility that we will present in the next section. Please refer to
the DNS speciﬁcations for detailed descriptions [20] [21].
Figure 1. An example of DNS resolution pro(cid:173)
cess.
2.1. DNS Overview
DNS is organized around a hierarchical tree structure.
Each domain name is composed of labels separated by dots.
The domain name tree is divided into a series of zones based
on the individual labels. Each zone represents a domain,
and the server which holds the DNS data for all names under
it is called the zone’s authoritative server. An authoritative
server may also delegate the authority of its sub-domains
to other servers, which then serve as authoritative servers
respectively for the sub-domains.
To a DNS client (stub resolver), a typical DNS name
resolution process involves the client’s local recursive re-
solver going through a series of queries to the authorita-
tive servers of sub-domains along the tree of DNS. For
example, Figure 1 shows a DNS resolution process of
www.example.com through the three corresponding au-
thoritative servers for the root zone, its child .com, and
the next level sub-domain example.com respectively.
Brieﬂy, a stub resolver ﬁrst requests a recursive resolver to
resolve the domain www.example.com. Assuming the
recursive resolver has no previous information about the
domain, it will contact external servers in an iterative way.
This iterative process includes a query to a root server (step
2) which redirects the recursive resolver to the .com au-
thoritative server (step 3). Then the recursive resolver con-
tacts the .com server (step 4), and from the reply it gets the
information of authoritative server of example.com (step
5). The recursive resolver queries the authoritative server of
example.com (step 6) which responds the IP addresses
(step 7). The recursive resolver at the end forwards the re-
sponse back to the stub resolver (step 8). During the pro-
cess, the recursive resolver also caches received DNS data
for further resolutions.
2.2. DNS Data Structure
Since the vulnerability we will present involves carefully
crafted DNS responses, we also provide a brief summary
about the DNS resource record and the DNS response for-
mat as background.
DNS data is stored using a basic data structure called
Resource Record (RR). Every RR record is a ﬁve-tuple
, where  serves as the key of data, TTL is
a time-to-live value in seconds that limits the lifespan of
cached copies. There are many types of RR records. Specif-
ically, an A record gives the IP address of the name, and an
NS record is another name that indicates the name of the
server which has been delegated to serve as the domain’s au-
thoritative server. An NS record together with a correspond-
ing A record are also known as delegation data. Delegation
data points to the authoritative server of a sub-domain and
provides its IP address as well.
When a DNS server receives a query that requests one or
more types of RR records of a given name, it replies with
a response that consists of three sections1: answer section,
authority section and additional section. When the current
DNS server cannot directly resolve the name in question,
the authority section and the additional section, also known
as referral sections, are used to carry an NS record and a cor-
responding A record. These records provide delegation data
of a sub-domain that is closer to the name in question. The
message below is a sample response of Step 5 in Figure 1.
;; ANSWER SECTION
;; AUTHORITY SECTION
example.com.
86400
IN
NS ns.example.com.
;; ADDITIONAL SECTION
ns.example.com. 86400
IN
A
10.0.0.1
After a DNS resolver receives a DNS response, it then can
cache the resource records contained in the response. Be-
fore the resource records expire based on the associated
TTL value, the resolver does not need to go through the
steps illustrated in Figure 1 to obtain the same records. For
the sample response above, for example, the resolver can
cache the delegation data of example.com for 86,400
seconds.
2.3. DNS Cache Update Policy
DNS cache is critical to its scalability and performance,
and it can signiﬁcantly reduce the overhead of authoritative
servers and the response latency. However, it also poses
many security threats. In the infamous DNS cache poison-
ing attack [4], an attacker can inject bogus RR records into
1A DNS response also contains a question section copied from the orig-
inal request, which we ignored for simplicity.
DNS resolvers to redirect users to malicious addresses. For
a number of reasons, DNS is inherently vulnerable to this
type of attacks. For example, the connectionless nature of
DNS protocol makes it vulnerable to spooﬁng attacks. An
attacker can also use a compromised or malicious authori-
tative server to piggyback bogus records in referral sections
of a DNS response.
The research and DNS communities have adopted sev-
eral techniques to harden DNS against cache poisoning at-
tacks. These techniques can be categorized into two classes:
techniques for increasing forgery resistance and techniques
for tightening cache update policy. Here we focus on the
second class of techniques, speciﬁcally, the bailiwick rule
[31] and the credibility rule [13]. The bailiwick rule checks
referral sections in a DNS response to see if its contained
RR records are in the authority range of the asked authori-
tative server. For example, if a DNS response comes from
authoritative server of .com and contains a NS record of
.net, then this record is considered as “out-of-bailiwick”
and should be discarded. The credibility rule gives each
RR record a different trust level according to where the re-
sponse comes from and in which section the record is con-
tained. Only when a new RR record has a higher or equal
trust level should a cached RR record be overwritten.
Unfortunately, both the bailiwick rule and the credibil-
ity rule have limitations. The bailiwick rule does not have
a standard speciﬁcation and depends on implementation.
While the credibility rule speciﬁes when cached entries can
be overwritten, it still could be exploited for malicious pur-
poses. For example, Dan Kaminsky reported a novel cache
poisoning attack [18] that leverages non-existent names to
increase spooﬁng efﬁciency, and in particular, exploits the
credibility rule to overwrite cached entries by piggybacked
referral sections. Some DNS vendors have responded to
this attack by enhancing the validation of any RR records
included in the additional section. However, in the next
section, we demonstrate that even with such validation, the
DNS cache update policy is still insecure.
3. The DNS Name Revocation Vulnerability
We illustrate the DNS name revocation vulnerability in
this section, focusing on how an attacker can generate and
maintain a ghost domain name.
To
a
domain
name
revoke
the delegation data for
(e.g.,
completely
phishing.com),
the name
must be deleted from the authoritative servers of the
parent zone of the name (e.g., .com), and sufﬁcient time
must be allowed for every recursive resolver to remove
the cached delegation data for the name when the data
expires. However, the current bailiwick and credibility
rules that govern the overwriting of cached DNS resource
records do not prevent an attacker from illegally renewing
(a) Before phishing.com is deleted, the attacker pulls the delegation
data for phishing.com into the victim DNS resolver.
(b) After phishing.com is deleted, the attacker manipulates the victim
resolver to keep the delegation data in its cache.
Figure 2. An example ghost domain name (phishing.com) attack.
cached delegation data, even after the data has been deleted
from the parent zone. An attacker can extend the TTL
(time-to-live) value of the cached delegation data, therefore
keeping a malicious domain (such as phishing.com)
continuously resolvable.
Figure 2 shows a typical ghost domain name sce-
nario, where an attacker manages to keep the delega-
tion data of phishing.com in a victim recursive re-
solver. We assume that the attacker has registered a do-
main name phishing.com at the authoritative server of
.com. Although this server is out of the attacker’s con-
trol, the attacker runs and controls the authoritative server
of phishing.com.
Two phases of establishing a ghost domain name are in-
volved:
• Phase 1: Caching the delegation data of a domain
name. The attacker targets a DNS resolver and re-
quests it to resolve a name under phishing.com,
say www.phishing.com.
During the resolu-
tion process, the authoritative server of .com pro-
vides the victim resolver with the delegation data of
phishing.com, such as:
;; ANSWER SECTION
;; AUTHORITY SECTION
phishing.com.
86400
IN
NS
ns.phishing.com.
;; ADDITIONAL SECTION
ns.phishing.com. 86400
IN
A
10.0.0.1
The victim resolver accepts and caches the delega-
tion data above. After 43, 200 seconds, as shown in
Figure 2b, phishing.com is identiﬁed as a mali-
cious domain and deleted from .com. At this mo-
ment, however, the victim resolver can still resolve
phishing.com since it still caches the delegation
data of phishing.com, which will not expire until
another 43, 200 seconds later.
• Phase 2:
Refreshing the cached delegation
data of the ghost name. At some point after
phishing.com has been removed from .com but
before the delegation data of phishing.com ex-
pires, the attacker manipulates the victim resolver to
conduct a series of DNS operations in order to have it
continue to cache the delegation data after the original
expiration time. These operations follow the standard
DNS protocol without violating any rules, and are as
follows.
the
NS
new name,
attacker
ﬁrst
changes
a
The
record