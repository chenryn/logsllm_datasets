adversaries A, that knows the beacon output generated so far
and associated protocol transcripts, there exists a negligible
function (λ) such that:
is bias-resistant and unpredictable,
| Pr[A(oj) = 1] − Pr[A(u) = 1]| < (λ)
(1)
where u ← U is a uniformly random element from a set U,
and that all honest nodes learn oj within a small constant
number of rounds from the time the adversary learns it.
In addition to unpredictability and bias-resistance, any
beacon protocol should also guarantee availability, i.e., the
protocol keeps producing new beacon outputs, and public-
veriﬁability, i.e., beacon outputs can be efﬁciently veriﬁed
even by users that do not directly participate in the beacon
generation protocol. A randomness beacon protocol in the
partially synchronous model should ensure that every beacon
output is unpredictable, bias-resistant, and publicly veriﬁable
even during periods of asynchrony, and guarantees availability
during periods of synchrony.
C. Overview of SPURT
Existing protocols that do not rely on trusted setup use
publicly veriﬁable secret sharing (PVSS) schemes as a crucial
building block. We will also start with this design paradigm.
Brieﬂy, the idea is that, for every beacon output, each node
runs a concurrent instance of PVSS to share a randomly chosen
secret with every other node. Once the sharing phase ﬁnishes
for n − t nodes, the shares are reconstructed and aggregated
to compute the beacon output. This way, each beacon output
has contributions from some honest nodes and thus remains
hidden from the adversary before reconstruction.
We observe that a major source of cost in existing protocols
is that they send a large amount of data over a broadcast
channel. One main design philosophy of SPURT is to lower the
amount of data sent via the broadcast channel. Towards this
end, we utilize the additive homomorphism of commitments
and encrypted shares in PVSS and have a leader collect and
aggregate the PVSS messages from all other nodes. Note that
the leader can verify the PVSS messages from each node but
cannot learn any information from them because PVSS shares
are encrypted under the public keys of corresponding nodes.
But even the aggregated messages are fairly large. Thus, the
leader in SPURT only sends the cryptographic digest of the
aggregated message via the broadcast channel. Other pieces
of data will be sent over pair-wise private channels.
However, there are a few challenges in this approach. The
ﬁrst main challenge is that a malicious leader may not correctly
aggregate the PVSS messages. In fact, a malicious leader
may not aggregate anything at all and may send any message
of its choosing. Such an attack will
immediately violate
unpredictability and bias-resistance. Note that we cannot ask
the leader to forward all pre-aggregation messages to all other
nodes since that would consume O(λn3) network bandwidth.
SPURT addresses this issue by having each non-leader node
check a disjoint part of the aggregation result such that any
subset of t+1 honest nodes collectively check the entire aggre-
gation. Validating part of the aggregation requires a message of
size O(λn). So the leader can send the necessary information
to each node using a total of O(λn2) communication.
The second challenge is that a malicious leader may not
send private messages to all nodes. We address this by having
those nodes who do receive private data reconstruct the beacon
output and then help the remaining nodes learn the beacon
output. Lastly, to ensure unpredictability, we need to make sure
all honest nodes start reconstruction nearly simultaneously,
i.e., within a small constant number of rounds (see §V-C).
III. PRELIMINARIES
This section describes the notations and tools we will use in
SPURT. Let λ be the security parameter. Let G0, G1 and GT
be cyclic groups of prime order q and Zq the ﬁeld of integer
modulo q. We denote an element x sampled uniformly from
a ﬁnite set M by x ← M. We denote vectors using boldface
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
32504
Table II: Notations used in the paper
Description
Bilinear pairing gropus
Random generators in G0
Random generators in G1
Security parameter
Total number of nodes
Maximum number of malicious nodes
Public and secret keys of ith node.
epoch number, and the leader of epoch r
height number
Polynomial chosen by ith node to share si
Secret chosen by ith node
pi(j), i.e., pi(·) evaluated at j
Commitment of si,j computed as g
si,j
1
Encryption of si,j under pkj computed as pk
DDH based NIZK proof for equality of discrete logarithm
si,j
i
Dual of error correcting code C
Notation
G0, G1, GT
g0, h0
g1, h1
λ
n
t
pki, ski
r, Lr
ht
si
pi(·)
si,j
vi,j
ci,j
dleq(·)
C⊥
lowercase letters such as x. We summarize the notations used
in the paper in Table II and describe them in detail in the rest
of this section.
A. Threshold Secret Sharing
A (n, t + 1) threshold secret sharing scheme allows a secret
s ∈ Zq to be shared among n nodes such that any t+1 of them
can come together to reconstruct the original secret, but any
subset of t shares cannot be used to reconstruct the original se-
cret [14], [67]. We use the common Shamir secret sharing [67]
scheme, where the secret is embedded in a random degree
t polynomial in the ﬁeld Zq for some prime q. Speciﬁcally,
to share a secret s ∈ Zq, a polynomial p(·) of degree t is
chosen such that s = p(0). The remaining coefﬁcients of p(·),
a1, a2,··· , at are chosen uniformly randomly from Zq. The
resulting polynomial p(x) is deﬁned as:
p(x) = s + a1x + a2x2 + ··· + atxt
Each node is then given a single evaluation of p(·). In partic-
ular, the ith node is given p(i) i.e., the polynomial evaluated
at i. Observe that given t + 1 points on the polynomial p(·),
one can efﬁciently reconstruct the polynomial using Lagrange
Interpolation. Also note that when s is uniformly random in
Zq, s is information theoretically hidden from an adversary
that knows any subset of t or less evaluation points on the
polynomial other than p(0) [67].
B. Linear Error Correcting Code
Let C be a [n, k, d] linear error correcting code over Zq of
length n and minimum distance d. Also, let C⊥ be the dual
code of C i.e., C⊥ consists of vectors y⊥ ∈ Zn
q such that
for all x ∈ C, (cid:104)x, y⊥(cid:105) = 0. Here, (cid:104)·,·(cid:105) is the inner product
operation. Our PVSS scheme uses the basic fact from coding
theory. Refer to [25] for its proof.
Lemma 1. If x ∈ Zn
q \ C, and y⊥ is chosen uniformly at
random from C⊥, then the probability that (cid:104)x, y⊥(cid:105) = 0 is
exactly 1/q.
Throughout this paper, we will use C to be the [n, k, n −
k + 1] Reed-Solomon Code of the form
C = {p(1), p(2), ..., p(n) : p(x) ∈ Zq[x]; and
deg(p(·)) ≤ k − 1}
where deg(p(·)) is the degree of the polynomial p(·). Thus its
[n, n − k, k + 1] dual code C⊥ can be written as
C⊥ = {(µ1f (1), µ2f (2), ..., µnf (n); f (x) ∈ Zq[x]; and
deg(f (·)) ≤ n − k + 1}
where the coefﬁcients µi = (cid:81)n
i−j . This implies that
random elements from C⊥ of interest are efﬁciently samplable.
C. Bilinear Pairings
i=1,i(cid:54)=j
1
SPURT and our new PVSS scheme ΠDBDH makes use
of pairing. In particular, security of ΠDBDH relies on the
decisional version of the Bilinear Difﬁe-Hellman assump-
tion (ref. Deﬁnition 5 in Appendix A).
Deﬁnition 2 (Bilinear Pairing). Let G0, G1 and GT be three
cyclic groups of prime order q where g0 ∈ G0 and g1 ∈ G1
are generators. A pairing is an efﬁciently computable function
e : G0 × G1 → GT satisfying the following properties.
1) bilinear: For all u, u(cid:48) ∈ G0 and v, v(cid:48) ∈ G1 we have
e(u · u(cid:48), v) = e(u, v) · e(u(cid:48), v), and
e(u, v · v(cid:48)) = e(u, v) · e(u, v(cid:48))
(2)
(3)
2) non-degenerate: gT := e(g0, g1) is a generator of GT .
We refer to G0 and G1 as the pairing groups or source groups,
and refer to GT as the target group.
D. Zero knowledge Proof of Equality of Discrete Logarithm
SPURT and our new PVSS scheme ΠDBDH have steps that
require nodes to produce zero-knowledge proofs about equality
of discrete logarithms for a tuple of publicly known values. In
particular, given groups G0 and G1, random generators g0 ←
G0 and g1 ← G1 and a tuple (g0, x, g1, y), where x ∈ G0 and
y ∈ G1, a prover P wants to prove to a veriﬁer V in zero-
knowledge, that there exists a witness α ∈ Zq such that x =
1 . Moreover, SPURT also requires knowledge
0 and y = gα
gα
soundness, i.e., the prover knows α.
We use two different protocols (for reasons to be described
later) for the equality of discrete logarithm. The ﬁrst protocol
is the classic Chaum-Pedersen Σ-protcotol [28] in the random
oracle model. For a given tuple (g0, x, g1, y), the Chaum-
Pedersen protocol proceeds as follows.
1) P samples a random element β ← Zq and sends (a0, a1)
2) V sends a challenge e ← Zq.
3) P sends a response z = β − αe to V.
4) V checks whether a0 = gz
to V where a0 = gβ
0 and a1 = gβ
1 .
0xe and a1 = gz
1ye and accepts
if and only both equations hold.
The Chaum-Pedersen Σ-protocol can be made non-
interactive in the random oracle model using the Fiat-Shamir
heuristic [35], [61]. This protocol guarantees completeness,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
42505
knowledge soundness, and zero-knowledge. The knowledge
if P convinces the V with non-
soundness implies that
negligible probability, there exists an efﬁcient (polynomial
time) extractor that can extract α from the prover with non-
negligible probability. Throughout this paper, we will use the
non-interactive variant of the Σ-protocol and denote it using
dleq(·). In particular, for any given tuple (g0, x, g1, y) where
1 , the procedure dleq.Prove(α, g0, x, g1, y)
x = gα
generates the proof π. Given the proof π and (g0, x, g1, y),
dleq.Verify(π, g0, x, g1, y) veriﬁes the proof.
0 and y = gα
The second equality of discrete logarithm protocol uses
bilinear pairings in a straightforward way, and does not require
any interaction or additional proof. Given a tuple (g0, x, g1, y),
the veriﬁer can check whether x = gα and y = gα
1 for some
witness α, using the following equality check:
e(g0, y) = e(x, g1)
(4)
In the case of an honest prover equation (4) will hold because
e(g0, y) = e(g0, gα
1 ) = e(g0, g1)α = e(gα
0 , g1) = e(x, g1)
E. State Machine Replication
A State Machine Replication is a distributed protocol run
by a network of n nodes to decide on a sequence of values,
one for each height. It provides the following properties.
• Agreement/Safety. If an honest node decides some value
M in height ht, then no honest node decides on a value
M(cid:48) for height ht such that M(cid:48) (cid:54)= M.
• Validity/Liveness. If an honest node proposes a value M,
every honest node eventually decides M in some height.
• Public veriﬁability. Whenever a node decides on a value,
it can prove to other nodes and external parties the
correctness of the decided value.
SPURT uses a variant of the HotStuff [72] protocol. HotStuff
is an epoch based protocol, where each epoch has a leader, who
proposes a value M to be decided in that epoch. Note that,
unlike regular SMR protocols that service clients [27], in our
case, only participating nodes propose values. Every epoch in
HotStuff has four steps: Propose, Prepare, Pre-Commit, and
Commit. We present a simpliﬁed description of HotStuff in
Figure 1. Speciﬁcally, we modify the protocol so that nodes
multicast messages instead of sending them to the leader. We
refer the reader to [72] for more details.
IV. PVSS SCHEME FOR UNIFORM SECRETS
In this section, we describe our PVSS scheme ΠDBDH.
ΠDBDH builds upon the PVSS from Scrape [25], which
relies on a less standard Decisional Bilinear Squaring assump-
tion [46]. Our new ΠDBDH scheme relies on the more standard
Decisional Bilinear Difﬁe-Hellman (DBDH) assumption and
does not require a Random Oracle. Due to space constraints,
we directly describe the protocol and refer readers to Ap-
pendix A for formal deﬁnitions of PVSS.
Our PVSS scheme allows a node (dealer) to share a uni-
formly random (uniform for short) secret s ∈ Zq among
n nodes, such that any subset of at least t + 1 nodes can
Let r be the current epoch and L be its leader. Also,
let ht − 1 be the latest ﬁnalized height.
Propose. L proposes a value M to be ﬁnalized at height
ht by sending (cid:104)PROPOSE, M, r, ht, X(cid:105) message to all the
nodes. Here X is the view change certiﬁcate (if any) that
validates that the proposal is safe.
Prepare. Each node j, upon receiving the proposal
checks whether the proposal is consistent with HotStuff
speciﬁcations using X, and P (M ) is true for an exter-
nal predicate P (·). If both checks pass, node j sends
(cid:104)PREPARE, M, r, ht(cid:105) to all nodes.
Pre-Commit. Upon receiving 2t + 1 PREPARE messages
for the proposal M at height ht and epoch r, node j
sends (cid:104)PRECOMMIT, M, r, ht(cid:105) message to every node.
Commit. Upon receiving 2t+1 PRECOMMIT messages for
the proposal M at height ht and epoch r, node j sends
(cid:104)COMMIT, M, r, ht(cid:105) message to every node.
Each node outputs M upon receiving 2t + 1 COMMIT
messages corresponding to M.
Figure 1: Steady state of a modiﬁed HotStuff [72] protocol that uses
all-to-all communication and no threshold signatures.
0, h1) where h0 ∈ G0 and h1 ∈ G1 are
reconstruct e(hs
uniformly random independent generators from the respective
groups. The reconstruction threshold t + 1 ensures that an
adversary controlling t nodes cannot recover e(hs
0, h1) without
contribution of honest nodes. A key property of PVSS that
SPURT utilizes is that not only the participating nodes but
also any third party can verify, even before the reconstruction
phase begins, that the dealer has generated the shares correctly
without having plaintext access to the shares.
ΠDBDH has four procedures: PVSS.Setup, PVSS.Share,
PVSS.Verify, and PVSS.Reconstruct. The PVSS.Setup proce-
dure takes the security parameter λ as the input and generates
four independent generators g0, h0, g1, h1 where g0, h0 ∈ G0
and g1, h1 ∈ G1. Here G0 and G1 are two pairing groups of or-
der q. Note that the tuple (g0, h0, g1, h1) needs to be generated
only once and can be reused across different execution of the
protocol. During the setup step, each node i also samples their
secret key ski ∈ Zq and publishes their public key pki = hski
0 .
After the setup step, the dealer uses PVSS.Share to share a
secret s, other nodes or external users use PVSS.Verify to
validate the shares, and PVSS.Reconstruct is used to recover
e(hs
0, h1). We describe them in detail in Figure 2.
The veriﬁcation procedure of ΠDBDH uses properties of the
Reed-Solomon error-correcting code [62]. In particular, we use
the observation by McEliece and Sarwate [56] that sharing of
a secret x using a degree t polynomial among n nodes is
equivalent to encoding the message (x, a1, a2,··· , at) using
a [n, t + 1, n − t] Reed-Solomon code. Let C be a [n, k, d]
linear error correcting code over Zq of length n and minimum
distance d. Let C⊥ be the dual code of C i.e., C⊥ consists
of vectors y⊥ ∈ Zn
q such that for all x ∈ C, (cid:104)x, y⊥(cid:105) = 0
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
52506
PVSS.Setup(1λ) → (g0, h0, g1, h1,{(ski, pki)}) :
The setup algorithm chooses uniformly random and in-
dependent generators g0, h0 ∈ G0 and g1, h1 ∈ G1, and
outputs them as public parameters. Each node i, then
generates a secret key ski ∈ Zq, a public key pki = hski
and registers the public key pki with a PKI.
0
During the sharing step,
the dealer L with pub-
lic/private key pair (sk, pk), samples s ∈ Zq. Let
S = e(hs
PVSS.Share(s, g1, sk,{pk}j,j=1,2,...,n) → (v, c):
1) Sample uniformly random ak ∈ Z for k = 1, 2, . . . , t
0, h1) be the secret the dealer wants to share.
and let
j , ∀j ∈ [n].
2) Compute sj ← p(j); vj ← gsj
3) Multi-cast to all nodes v = {v1, v2, . . . , vn} and c =
p(x) = s + a1x + . . . + atxt;
1 ; cj ← pksj
{c1, c2, . . . , cn} using a broadcast channel.
Upon receiving (v, c) from the dealer, each node
validates them as follows.
PVSS.Verify(g1, v, c,{pk}j,j=1,2,...,n) → 0/1:
1) Sample a random code word y⊥ ∈ C⊥ where y⊥ =
1 , y⊥