# Lost in Translation: Translation-based Steganography

**Authors:**
- Christian Grothoﬀ
- Krista Grothoﬀ
- Ludmila Alkhutova
- Ryan Stutsman
- Mikhail Atallah

**Contact Information:**
- {christian, krista}@grothoff.org
- {lalkhuto, rstutsma}@purdue.edu
- PI:EMAIL

> "As we know, there are known knowns; there are things we know we know. We also know there are known unknowns; that is to say, we know there are some things we do not know. But there are also unknown unknowns – the ones we don’t know we don’t know."

[Project Website](http://www.cs.purdue.edu/homes/rstutsma/stego/)

## 1. Some Approaches to Linguistic Steganography

- **Wayner (1992)** and **Chapman & Davida (1997)**: Used hand-generated context-free grammars (CFGs) and automatically generated syntactic templates to produce syntactically correct text.
- **Chapman, Davida, & Rennhard (2001)**: Employed synonym replacement using existing texts.

## 2. Disadvantages of These Approaches

- **Hand-generation of grammars**: Labor-intensive (mitigated by automatic template generation).
- **Semantic coherence**: Can be problematic with CFGs.
- **Synonym quality**: Not all synonyms are equivalent (e.g., "eat" vs. "devour"); good lists must be hand-generated (NICETEXT II).
- **Vulnerability to attacks**: Pure semantic substitution may be subject to known-cover and differential attacks (NICETEXT II).

## 3. Why Do These Problems Arise?

- **Automatic generation**: Creating semantically and rhetorically correct text is inherently difficult.
- **Mimicking correct text**: Each approach attempts to mimic correct text, but incorrect text deviates from the statistical profile of the original.
- **Statistical profile**: The goal is to hide the identity of a text by recoding it so its statistical profile approximates that of another file (Peter Wayner).

## 4. Solving the Generation Problem

- **Identifying a suitable steganographic object type**:
  - Expected to be semantically and syntactically damaged.
  - Supposed to be a transformation of the original object, allowing both to coexist without issues.
  - By nature, contains errors that often make it less-than-perfect sense.
- **Utilizing noise**: Most steganographic algorithms try to utilize noise introduced by usual processes (E. Franz and A. Schneidewind).

## 5. An Example from BabelFish

- **Original German Text**: "Keine Sorge, sie sind alle handzahm und beantworten auch bereitwillig Fragen rund um das Thema Linux und geben gerne einen kleinen Einblick in die Welt der Open-Source."
- **Reasonable English Translation**: "Don’t worry, they are all tame and will also readily answer questions regarding the topic 'Linux' and gladly give a small glimpse into the world of Open Source."
- **BabelFish Translation**: "A concern, it are not all handzahm and also readily questions approximately around the topic Linux and give gladly a small idea of the world of the open SOURCE."

## 6. Translation as a Cover

- **Natural Language (NL) translation**: Inherently noisy, especially machine translation (MT).
- **Low-quality translations**: Readily available, making certain alterations plausible and errors easy to mimic.
- **Redundant nature of language**: Allows for a wide variety of outputs.
- **Variation in translation**: Does not necessarily constitute "damage."

## 7. Natural Language Machine Translation

- **Imperfect systems**: Far from perfect.
- **Statistical engines**: Translate via pattern matching and syntactic rules.
- **Context neglect**: Often word-for-word, ignoring syntactic and semantic differences between source and target languages.

## 8. Lost in Translation (LiT): A Translation-Based Steganographic System

- **Shared secret**: Alice and Bob have a shared secret, which is the translation-system configuration.
- **Message transmission**: Alice chooses a source text (public or otherwise) and runs it through several commercial and custom-generated translation engines.

## 9. Protocol Overview

- [Detailed protocol overview can be found here](http://www.cs.purdue.edu/homes/rstutsma/stego/)

## 10. The System: Encoding

- **Translation process**: Source text is run through multiple translation engines.
- **Post-processing**: Errors, semantic substitutions, and other modifications are made.
- **Damage assessment**: Each modification reduces the probability that a sentence looks like a real translation.
- **Huﬀman tree**: Accumulated probabilities are used to build a Huﬀman tree, determining which translation sentence will be chosen based on the secret message's bit sequence.

## 11. Encoder and Decoder

- [Encoder and decoder details can be found here](http://www.cs.purdue.edu/homes/rstutsma/stego/)

## 12. Post-pass Example: Error Insertion

- **Common errors**:
  - Incorrect use of articles (definite/indefinite, incorrect omission/inclusion).
  - Tricky prepositions (many meanings, hard to map correctly).
  - Leaving less common words in their original language (e.g., "handzahm").

## 13. Post-pass Example: Semantic Substitution

- **Example**:
  - **Original**: "flat"
  - **Translations**:
    - "flach" (tabular, vapid)
    - "eben" (smooth, plane)
    - "glatt" (plain, shallow)

## 14. About Post-Passes

- **Module selection**: Determined by the shared secret system configuration.
- **Customization**: New modules can be created and plugged in by the user.

[Project Website](http://www.cs.purdue.edu/homes/rstutsma/stego/)