title:Network exception handlers: host-network control in enterprise networks
author:Thomas Karagiannis and
Richard Mortier and
Antony I. T. Rowstron
Network Exception Handlers:
Host-network Control in Enterprise Networks
Thomas Karagiannis, Richard Mortier and Antony Rowstron
{thomkar, antr}@microsoft.com, PI:EMAIL
Microsoft Research
Cambridge, UK
ABSTRACT
Enterprise network architecture and management have followed the
Internet’s design principles despite different requirements and char-
acteristics: enterprise hosts are administered by a single authority,
which intrinsically assigns different values to trafﬁc from different
business applications.
We advocate a new approach where hosts are no longer relegated
to the network’s periphery, but actively participate in network-related
decisions. To enable host participation, network information, such
as dynamic network topology and per-link characteristics and costs,
is exposed to the hosts, and network administrators specify condi-
tions on the propagated network information that trigger actions to
be performed while a condition holds. The combination of a condi-
tion and its actions embodies the concept of the network exception
handler, deﬁned analogous to a program exception handler. Con-
ceptually, network exception handlers execute on hosts with actions
parameterized by network and host state.
Network exception handlers allow hosts to participate in network
management, trafﬁc engineering and other operational decisions by
explicitly controlling host trafﬁc under predeﬁned conditions. This
ﬂexibility improves overall performance by allowing efﬁcient use
of network resources. We outline several sample network excep-
tion handlers, present an architecture to support them, and evaluate
them using data collected from our own enterprise network.
Categories and Subject Descriptors: C.2.3 [Computer- Commu-
nication Networks]: Network Operations
General Terms: Management
Keywords: Enterprise networks, management, network exception
handlers
1.
INTRODUCTION
Enterprise networks have largely inherited management and de-
sign principles from the Internet. The Internet can be characterized
as best-effort and application-agnostic, with hosts viewing the In-
ternet as a black-box, and network-related decisions all being made
independently from hosts. These characteristics have enabled the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
Internet to scale rapidly and have facilitated the deployment of di-
verse technologies and applications. However, hosts have been
relegated to the periphery, playing almost no part in ensuring the
smooth operation of the network.
As with an Internet Service Provider (ISP) network, managing an
enterprise network is currently an expensive and time-consuming
task, requiring highly skilled individuals on call 24/7. Large en-
terprise networks are at least as complex as tier-one ISP networks,
providing numerous services with strict security and operational re-
quirements to a large user base spanning several countries or even
continents. However, enterprises differ from ISPs in two key as-
pects: all hosts are operated by a single administrative authority,
and enterprises can estimate and express the intrinsic business value
of the trafﬁc generated by each application.
Enterprise network operators are forced to indirectly exert con-
trol over network decisions by deploying complicated mechanisms
on top of pre-existing network services. For example, control is
currently applied by using ﬂow-level Equal Cost Multi-Path in or-
der to achieve load-balancing in the network, or in extreme cases by
running BGP with each router acting as a separate AS to achieve
routing ﬂexibility. Trafﬁc management is often done crudely, for
example, using port-based ﬁlters at routers to shape trafﬁc. Arti-
facts like random port mappings at proxies and the use of arbitrary
port numbers by applications such as Skype make port-based poli-
cies inefﬁcient and inaccurate.
This leads to a tension between enterprise network management
requirements and available functionality. We believe it is time to
rethink the management and principles of modern enterprise net-
works to include hosts in the overall “network equation”. The aim
is to provide administrators with a level of control over the net-
work that they currently simply cannot have, by allowing hosts to
participate in network-related decisions.
To achieve this we propose the concept of network exception
handlers which are deployed at hosts, and are analogous to pro-
gram exception handlers. A network exception handler describes
an action, speciﬁed by the network operator in advance, to be ex-
ecuted on hosts when a network exception condition occurs. For
if back-
example, a simple network exception handler could be:
bone link X fails, then throttle, on all hosts, any trafﬁc generated
by application Y that would have been routed across the failed
link. In order to implement network exception handlers, the net-
work needs to expose to the hosts dynamic information about the
network topology, potentially augmented with other information,
such as link capacities and costs. This can be achieved without
modifying the core networking functionality, such as the current
generation of routers and networking infrastructure.
Network exception handlers allow hosts to play an active role
in network operations, beyond the simple application of traditional
transport-layer congestion control techniques. Modern hosts are
typically powerful with substantial under-utilized processing and
storage resources, and they are responsible for the trafﬁc crossing
the network and knowledgeable about the users and types of appli-
cations running on them. Hosts are ideally placed to help manage
the complexity of the network, and to enable services and function-
ality that today’s enterprise networks cannot support.
Network exception handlers can be used to improve the perfor-
mance of the network and to broaden the range of functionality it
provides. They enable per-user, per-host and per-application trafﬁc
management, features currently absent from enterprise networks.
They can simplify network management, thereby reducing network
operational costs and close the gap between network trafﬁc engi-
neering, application requirements, and management policies. Their
beneﬁts come from the extra context and control available at the
hosts: trafﬁc can be shaped in the network, but only hosts can cor-
rectly identify the applications, users and users’ business roles gen-
erating the trafﬁc, and thus implement policies that allow priority
to be given to selected applications, users or roles. These policies
are pre-deﬁned and embody the application prioritization that en-
terprises already understand, based on their business requirements.
We propose an architecture to support the concept of network
exception handlers. Our architecture can be incrementally deploy-
able and supports the collection, synthesis and distribution to hosts
of topology data together with other performance data from the net-
work. Using trace data collected from our enterprise network, we
justify this architecture and evaluate its overheads. We also use the
collected data to motivate and evaluate examples of network excep-
tion handlers.
Our contributions can be summarized as follows:
• We challenge existing enterprise network architectures by
describing network exception handlers and outlining poten-
tial uses (Sections 3 and 4).
• We propose an architecture that exposes network-related in-
formation to hosts and allows for informed, application-speciﬁc
policy decisions to be taken at the edge of the network (Sec-
tions 5 and 6).
• We evaluate the feasibility, requirements and performance
of the proposed architecture using topology and trafﬁc data
gathered from a large operational enterprise network (Sec-
tion 7).
2. ENTERPRISE NETWORKS
To motivate the design of network exception handlers, it is ﬁrst
important to understand the characteristics and requirements of en-
terprise networks that drive speciﬁc design choices. In this section,
we give a general characterization of modern enterprise networks,
highlighting speciﬁc features that motivate and facilitate the con-
cept of network exception handlers.
Enterprise networks support upwards of several hundred hosts,
with the largest supporting many hundreds of thousands. Current
host hardware consists of powerful desktop and laptop computers,
the majority of which are under-utilized, running modern commod-
ity operating systems supporting complex trafﬁc management fea-
tures. Hosts are distributed between multiple buildings with larger
enterprises containing many hundreds of buildings spread through
many countries and even across multiple continents. Larger enter-
prises operate one or more datacenters which may serve the entire
enterprise or be designated to serve a particular continent, country,
campus or building. Local connectivity within buildings is pro-
vided by the enterprise itself but backbone links providing wide-
area connectivity between campuses and countries are typically
leased from, or completely outsourced to, a network provider.
The purpose of the enterprise network is to support the many dif-
ferent networked applications that in turn support the business ob-
jectives of the company. Provisioning wide-area bandwidth to sup-
port all these application requirements forces enterprises to provi-
sion for peak loads, causing signiﬁcant cost overheads. In contrast
to an ISP, a business can explicitly make a judgment as to the value
of each application’s trafﬁc under normal and abnormal operating
conditions. For example, a business might value email and real-
time video conferencing more than access to an archive of train-
ing videos. Therefore, under abnormal conditions due to, e.g., link
failures, trafﬁc on particular links may fall outside expected norms,
making explicit prioritization of email access and real-time video
conferencing over streaming training video data desirable. How-
ever, modern enterprise networks currently provide limited visibil-
ity and means of control; mechanisms such as MRTG1, offer only
aggregate information to IT departments, but provide no hints about
how network resources are utilized by the various applications.
The enterprise network and all hosts attached to it operate as
a single co-operative administrative domain. Host conﬁguration
is managed using a directory service, such as Active Directory.2
This enables the IT organization to control the software installed
and permitted to run on hosts, to control which network resources
hosts and users are permitted to access, and generally to manage
most aspects of host conﬁguration and network access. By speci-
fying global policies, IT operators manage the network’s hosts as
aggregates rather than needing to control the detailed conﬁguration
of each host. For example, in our network, all domain joined ma-
chines are required to present suitable authentication tokens when
accessing domain controlled resources (ﬁle servers, printers, etc.).
These tokens can only be gained after the domain has ensured that
the host is compliant with global policy in terms of required patches
applied, suitable local user and group settings, etc.
This sort of global policy system permits IT operators to make as-
sumptions about the behavior of hosts within their network. Specif-
ically, IT operators can assume that hosts will follow speciﬁed global
policies because they expect that hosts cannot access network re-
sources without having applied global policies.
A consequence of being a single administrative domain is that
enterprises can more freely share network information. In general,
enterprises run link-state routing protocols such as OSPF [13] as
it is acceptable for all routers owned by the organization to under-
stand the topology. Enterprises may also use protocols such as BGP
often due to scalability issues, especially when the network is large
enough that it cannot easily be handled by current link-state pro-
tocol implementations alone. Alternatively, use of BGP could be
employed to express complex trafﬁc management policies which
require the extra control over route propagation that BGP provides.
Finally, many enterprises actively try to reduce their network-
ing costs. Some outsource the wide-area connectivity to a net-
work provider offering, for example, BGP-based MPLS VPN tun-
nels [17]. The outsourcing will include a service level agreement
specifying the acceptable downtime and other performance param-
eters. From each of the enterprise’s sites, the underlying network
topology appears as a simple full-mesh topology between the en-
terprise’s sites. Additionally, many enterprises with branch ofﬁces
use WAN optimizers, for example from Riverbed3, which optimize
1Multiple Router Trafﬁc Grapher, http://www.mrtg.com/.
2http://www.microsoft.com/windowsserver2003/
technologies/directory/activedirectory/
default.mspx
3http://www.riverbed.com/
Network Exception Handler: Backbone link failed
links = {
[10.39.11.40, 10.39.12.30, “SVC to SF”]
[10.39.19.17, 10.39.22.12, “LA to SVC”] }
boolean Exception(NetworkState)
begin
foreach link in links do
if link not in NetworkState then return true
return false
end
void Fire (NetworkState, HostState)
begin
print “Link failure”
foreach link in links do
if link not in NetworkState then
print “Link failed: ” + link.description
Register(Handler)
end
void Handler (NetworkState, HostState)
begin
if not Exception(NetworkState) then
RemoveAllRestrictions(); DeRegister(Handler);
print “Link restored: ” + link.description
return
foreach process in HostState.processes do
if HostState.MachineRole is developer then
if process.name is not “SourceRepositoryClient” then
SetRestriction(process, maxBandwidth=0)
else if “The Boss” in HostState.LoggedOnUsers then
if process.name is “VideoStreamingClient” then
SetRestriction(process, maxBandwidth=0)
else if process.name is “EmailClient” then
SetRestriction(process, maxBandwidth=300kbps)
else if process.name is not “CallCenterApp” then
SetRestriction(process, maxBandwidth=0)
end
Figure 1: Network exception handler for a backbone link failure.
trafﬁc transmitted over WAN links with the aim of reducing link
capacity requirements. This does not impact the network topology.
Later in the paper we show how network exception handlers can be
used to smooth bandwidth usage over time, potentially achieving
the same beneﬁts as a WAN optimizer without requiring additional
dedicated networking infrastructure.
3. EXCEPTION HANDLERS
Network exception handlers allow network administrators to en-
capsulate network management policy that is to be enforced when
a particular condition holds. Before discussing usage scenarios and
the system architecture, we ﬁrst describe the concept of network
exception handlers.