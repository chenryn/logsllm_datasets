### 基于分布式消息的最终一致性方案2PC 和 3PC这两种方法，有两个共同的缺点，一是都需要锁定资源，降低系统性能；二是，没有解决数据不一致的问题。因此，便有了通过分布式消息来确保事务最终一致性的方案。在 eBay的分布式系统架构中，架构师解决一致性问题的核心思想就是：将需要分布式处理的事务通过消息或者日志的方式异步执行，消息或日志可以存到本地文件、数据库或消息队列中，再通过业务规则进行失败重试。这个案例，就是使用**基于分布式消息的最终一致性方案**解决了分布式事务的问题。基于分布式消息的最终一致性方案的事务处理，引入了一个消息中间件（MessageQueue，MQ），用于在多个应用之间进行消息传递。基于消息中间件协商多个节点分布式事务执行操作的示意图，如下所示。![](Images/7795d3bea3c2ed46837dff49aa63ae36.png){savepage-src="https://static001.geekbang.org/resource/image/9c/30/9c48c611124574c64806f45f62f8b130.png"}仍然以网上购物为例。假设用户 A 在某电商平台下了一个订单，需要支付 50元，发现自己的账户余额共 150元，就使用余额支付，支付成功之后，订单状态修改为支付成功，然后通知仓库发货。在该事件中，涉及到了订单系统、支付系统、仓库系统，这三个系统是相互独立的应用，通过远程服务进行调用。![](Images/abf8de938db92df5415e288714b642d6.png){savepage-src="https://static001.geekbang.org/resource/image/f6/45/f687a6a05dac8e974a4dac04e1ce1a45.png"}根据基于分布式消息的最终一致性方案，用户 A通过终端手机首先在订单系统上操作，然后整个购物的流程如下所示。![](Images/900ad7f6de017468379c7ac759ec96de.png){savepage-src="https://static001.geekbang.org/resource/image/d9/a4/d9b2d32660e49a4ea613871337b570a4.png"}1.  订单系统把订单消息发给消息中间件，消息状态标记为"待确认"。2.  消息中间件收到消息后，进行消息持久化操作，即在消息存储系统中新增一条状态为"待发送"的消息。3.  消息中间件返回消息持久化结果（成功 /    失败），订单系统根据返回结果判断如何进行业务操作。失败，放弃订单，结束（必要时向上层返回失败结果）；成功，则创建订单。4.  订单操作完成后，把操作结果（成功 / 失败）发送给消息中间件。5.  消息中间件收到业务操作结果后，根据结果进行处理：失败，删除消息存储中的消息，结束；成功，则更新消息存储中的消息状态为"待发送（可发送）"，并执行消息投递。6.  如果消息状态为"可发送"，则 MQ    会将消息发送给支付系统，表示已经创建好订单，需要对订单进行支付。支付系统也按照上述方式进行订单支付操作。7.  订单系统支付完成后，会将支付消息返回给消息中间件，中间件将消息传送给订单系统。订单系统再调用库存系统，进行出货操作。可以看出，分布式事务中，当且仅当所有的事务均成功时整个流程才成功。所以，**分布式事务的一致性是实现分布式事务的关键问题，目前来看还没有一种很简单、完美的方案可以应对所有场景。**
### 三种实现方式对比现在，为了方便你理解并记忆这三种方法，我总结了一张表格，从算法一致性、执行方式、性能等角度进行了对比：![](Images/c5668e817584e8ef8615bbdcdcd1a992.png){savepage-src="https://static001.geekbang.org/resource/image/33/34/336003047ac1e012be1e1c9ccc793f34.jpg"}
## 知识扩展：刚性事务与柔性事务在讨论事务的时候，我们经常会提到刚性事务与柔性事务，但却很难区分这两种事务。所以，今天的知识扩展内容，我就来和你说说什么是刚性事务、柔性事务，以及两者之间有何区别？-   刚性事务，遵循 ACID 原则，具有强一致性。比如，数据库事务。-   柔性事务，其实就是根据不同的业务场景使用不同的方法实现最终一致性，也就是说我们可以根据业务的特性做部分取舍，容忍一定时间内的数据不一致。总结来讲，与刚性事务不同，柔性事务允许一定时间内，不同节点的数据不一致，但要求最终一致。而柔性事务的最终一致性，遵循的是BASE 理论。那，**什么是 BASE 理论**呢？BASE 理论包括基本可用（Basically Available）、柔性状态（SoftState）和最终一致性（Eventual Consistency）。-   基本可用：分布式系统出现故障的时候，允许损失一部分功能的可用性。比如，某些电商    618 大促的时候，会对一些非核心链路的功能进行降级处理。-   柔性状态：在柔性事务中，允许系统存在中间状态，且这个中间状态不会影响系统整体可用性。比如，数据库读写分离，写库同步到读库（主库同步到从库）会有一个延时，其实就是一种柔性状态。-   最终一致性：事务在操作过程中可能会由于同步延迟等问题导致不一致，但最终状态下，数据都是一致的。可见，BASE理论为了支持大型分布式系统，通过牺牲强一致性，保证最终一致性，来获得高可用性，是对ACID原则的弱化。具体到今天的三种分布式事务实现方式，二阶段提交、三阶段提交方法，遵循的是ACID 原则，而消息最终一致性方案遵循的就是 BASE 理论。
## 总结我从事务的 ACID特性出发，介绍了分布式事务的概念、特征，以及如何实现分布式事务。在关于如何实现分布式的部分，我以网购为例，与你介绍了常见的三种实现方式，即基于XA 协议的二阶段提交方法，三阶段方法以及基于分布式消息的最终一致性方法。二阶段和三阶段方法是维护强一致性的算法，它们针对刚性事务，实现的是事务的ACID特性。而基于分布式消息的最终一致性方案更适用于大规模分布式系统，它维护的是事务的最终一致性，遵循的是BASE 理论，因此适用于柔性事务。在分布式系统的设计与实现中，分布式事务是不可或缺的一部分。可以说，没有实现分布式事务的分布式系统，不是一个完整的分布式系统。分布式事务的实现过程看似复杂，但将方法分解剖析后，你就会发现分布式事务的实现是有章可循的。我将实现分布式事务常用的三个算法整理为了一张思维导图，以帮助你加深理解与记忆。![](Images/a0595b215776f8f6ab47d7e886882acd.png){savepage-src="https://static001.geekbang.org/resource/image/14/35/144983acb8048ce85cb216e32779cc35.png"}
## 思考题你觉得分布式互斥与分布式事务之间的关系是什么呢？我是聂鹏程，感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再会！![](Images/c191f391e2aab7575517a886bbd7a681.png){savepage-src="https://static001.geekbang.org/resource/image/a4/8c/a42a16601611a1a72599ecfca434508c.jpg"}