法、方法的调用频率、方法调用所需的时间、使用的内存量等。在Visual Studio 2015中，
启动调试器时，会自动启动诊断工具。使用诊断工具，还可以看到IntelliTrace（历史调
试）事件。遇到一个断点后，能够查看以前的信息（如图17-52所示），例如以前的断
点、抛出的异常、数据库访问、ASP.NET事件、跟踪或者用户操作（如单击按钮）。单
击以前的事件时，可以查看局部变量、调用栈以及函数调用。使用这种功能时，不需要重
启调试器并为发现问题前调用的方法设置断点，就可以轻松地找到问题所在。
图17-52
启动诊断工具的另一种方法是通过配置文件来启动：Debug | Profiler | Start Diagnostic
Tools Without Debugging。这里可以对要启动的功能进行更多的控制（见图17-53）。根据
使用的项目类型，可以使用或多或少的特性。对于UWP项目，也可以分析能源消耗，这
是移动设备的一个重要事实。
图17-53
第一个选项Application Timeline （见图17-54）提供了UI线程的信息，以及解析、布
局、渲染、I/O和应用代码所花的时间。根据所花的最多时间，可以确定优化在哪里是有
用的。
图17-54
如果选择CPU Usage选项，监控的开销就很小。使用此选项时，每经过固定的时间间
隔就对性能信息采样。如果方法调用运行的时间很短，就可能看不到这些方法调用。但是
再提一次，这个选项的优势在于开销很低。进行探查时总是应该记住，并不只是在监视应
用程序的性能，也是在监视数据获取操作的性能。所以不应该同时探查全部数据，因为采
样全部数据会影响得到的结果。收集关于.NET内存分配的信息有助于找出发生内存泄漏
的地方，以及哪种类型的对象需要多少内存。资源争用数据对分析线程有帮助，能够很容
易地看出不同的线程是否会彼此阻塞。
在Performance Explorer中配置选项后，可以退出向导，并立即启动应用程序，开始探
查。以后还可以通过修改探查设置的属性来更改一些选项。通过这些设置，可以在检测会
话中添加内存探查，在探查会话中添加CPU计数器和Windows计数器，以查看这些信息以
及其他一些探查的数据。
启动列表中的最后一个选项Performance Wizard （见图17-55）允许配置是否希望监视
CPU使用抽样或使用检测，在哪里检测每个方法调用，以便看到很小的方法调用、内存分
配和并发性。
图17-55
图17-56显示了一个探查会话的摘要屏幕。从中可以看到应用程序的CPU使用率，说
明哪些函数占用最长时间的热路径（hot 
path），以及使用最多CPU时间的函数的排序列
表。
图17-56
诊断工具还有许多屏幕，这里无法一一展示。其中有一个函数视图，允许根据函数调
用次数进行排序，或者根据函数占用的时间（包括或者不包含函数调用本身）进行排序。
这些信息有助于确定哪些方法的性能值得关注，而其他的方法则可能因为调用得不是很频
繁或者不会占用过多时间，所以不必考虑。
在函数内单击，就会显示该函数的详细信息，如图17-57所示。这样就可以看到调用
了哪些函数，并立即开始单步调试源代码。Caller/Callee视图也会显示函数的调用关系。
图17-57
Visual Studio Professional提供了探查功能。在Enterprise Edition中，可以配置层交互探
查，查看生成的SQL语句和ADO.NET查询花费的时间，以及关于ASP.NET页面的信息。
17.8.2 Concurrency Visualizer
Concurrency Visualizer用于分析应用程序的线程问题。运行此分析工具可得到如图17-
58所示的摘要屏幕。在该屏幕中，可以比较应用程序需要的CPU资源与系统的整体性能。
还可以切换到Threads视图，查看所有正在运行的应用程序线程及其在各个时间段所处状
态的信息。切换到Cores视图会显示使用了多少CPU核心的信息。如果应用程序只使用了
一个CPU核心，并且一直处于繁忙状态，那么通过添加一些并行功能，使用更多的CPU核
心，可能会改进性能。在不同的时间，可能看到不同的线程处于活动状态，但是在给定的
时间点，只能有一个线程处于活动状态。在这种情况中，可能需要修改锁定行为。还可以
查看线程是否使用了I/O。如果多个线程的I/O使用率都很高，那么磁盘可能是瓶颈，导致
线程都在等待彼此完成I/O。此时，可能需要减少执行I/O的线程数，或者使用一个SSD磁
盘。显然，这些分析工具提供了大量很有帮助的信息。
图17-58
  注意： 在Visual Studio 2015中，需要通过Tools | Extensions and Updates下载
并安装Concurrency Visualizer。
17.8.3 代码分析器
Visual Studio 2015的一个新特性（利用了.NET编译器平台）是代码分析器。使用编译
器的API时，很容易创建代码分析器，给出应改变的内容的指南。
  注意： .NET编译器平台参见第18章。
当然，通常没有必要创建自定义分析器，因为已经有许多可用的NuGet包。NuGet包
Microsoft.Analyzer.PowerPack来自微软，为许多场景提供了良好的代码分析。安装这样一
个分析器后，可以在Solution Explorer的Analyzers部分看到它，Analyzers部分在References
节点下面。
17.8.4 Code Metrics
通过检查代码度量，可以知道代码的可维护程度。图17-59中的代码度量显示完整
Calculator库的可维护程度指数为82，还包含每个类和方法的细节。这些评级采用颜色编
码：红色（0～9）表示可维护程度低；黄色（10～19）表示可维护程度中等；绿色（20～
100）表示可维护程度高。Cyclomatic 
Complexity列提供了关于不同代码路径的反馈。更
多的代码路径意味着需要对每个选项进行更多的单元测试。Depth of Inheritance列反映了
类型的层次。基类数越多，就越难找出某个字段属于哪个基类。Class 
Coupling列表明了
类型的耦合程度，例如用于参数或局部变量。耦合程度越高，意味着越难维护代码。
图17-59
17.9 小结
本章探讨了.NET环境中最重要的编程工具之一：Visual Studio 2015。大部分内容都在
讲解这个工具如何简化C#编程。
Visual Studio 2015是最便于编程的开发环境之一。它不只方便了开发人员实现快速应
用程序开发（Rapid Application Development, RAD），还使得开发人员能够深入探索应用
程序的创建机制。本章主要关注如何使用Visual Studio进行重构、生成多个版本、分析现
有代码。
本章还介绍了.NET Framework 4.6提供的最新项目模板，包括Windows Presentation
Foundation、Windows Communication Foundation和Universal Windows Platform应用程序。
第18章介绍C# 6的一个新特性：新的.NET编译器平台，代码名称是Roslyn。
第18章
.NET编译器平台
本章要点
● 编译器管道概述
● 语法分析
● 语义分析
● 代码转换
● 代码重构
本章源代码下载：
本章源代码的下载地址为www.wrox.com/go/professionalcsharp6。单击Download Code
选项卡即可下载本章源代码。本章代码分为以下几个主要的示例文件：
● WPFSyntaxTree
● SyntaxQuery
● SyntaxWalker
● SemanticsCompilation
● TransformMethods
● SyntaxRewriter
● PropertyCodeRefactoring
18.1 简介
C# 
6的最重要的变化是，C#有一个由.NET编译器平台新交付的编译器（代码名为
Roslyn）。最初，C#编译器是用C++编写的。现在，它的主要部分是用C#和.NET创建
的。编译器平台是开源的，位于http://github.com/dotnet/Roslyn。
这个更新的一个优点是，微软公司清理了过去20年编写的很多旧代码。有了新的代码
库，使用C#实现新功能要容易得多，新代码更易于维护。这是第6版有很多小的C#语言改
进的原因，微软公司一直进行这种改进；但项目维护多年，就很难更新源代码了。在某种
程度上，从头开始建立项目会比较好。
重写C#编译器的一个更大优势是，现在可以利用编译器管道，在编译器管道的每一
步添加功能，并分析和转换源代码。
大多数开发人员都只使用Visual Studio中的工具，而这些工具使用了.NET编译器平台
本身，但对于许多开发人员而言，创建自定义代码分析器是很有用的（可能在团队中使
用），并进行代码转换，例如迁移旧代码，将它转换成新的技术。
在Visual Studio中的什么地方能看到使用.NET编译器平台？一个例子是代码编辑器，
在输入字符的所有时间里都在使用API。使用智能标签实现接口时，与以前的版本相比，
Visual Studio 2015有一个有趣的区别：实现IDisposable接口并单击智能标签时，不仅看到
Implement Interface和Implement Interface Explicitly选项，也会看到Implement Interface with
Dispose Pattern和ImplementInterface Explicitly with Dispose Pattern选项（参见图18-1）。在
Visual Studio的先前版本中，实现接口的唯一自动方式是，自动生成接口中定义的方法存
根和属性存根，其中接口的实现代码抛出NotImplementedException异常。现在可以根据接
口的类型有不同的实现。对于IDisposable接口，不仅实现Dispose（）方法，还会实现此接
口所需的完整模式，比如带布尔参数的Dispose（）方法，检查对象是否已经销毁但仍调
用；还实现了可选的终结器。
图18-1
本章描述.NET编译器平台的特性以及如何分析和转换源代码。使用调试器来了解类
型和成员对本书的所有章节都是有益的。本章使用的调试器非常有用。.NET编译器平台
SDK包括成千上万的类型和数量巨大的成员，所以调试代码的确能帮助找出可以避免错误
的信息。
本章需要随Visual Studio 2015一起安装Visual Studio 2015 SDK和.NET Compiler
Platform SDK Templates for Visual Studio 2015 （在扩展和更新包中）。
示例项目需要添加Microsoft.CodeAnalysis NuGet包。
18.2 编译器管道
编译器管道包括以下阶段，得到不同的API和特性：
● 解析器——阅读和标记化源代码，然后将其解析为一个语法树。语法树API用于在
源代码编辑器中格式化、着色、列出大纲。
● 声明——分析源代码中的声明和导入的元数据，以创建符号。为这一阶段提供了符
号API。在编辑器和对象浏览器中的Navigation To特性使用这个API。
● 
绑定——标识符匹配符号。为这一阶段提供了绑定和流分析API。Find 
All
References、Rename、Quick Info和Extract Method等特性使用这个API。
● 发布——创建IL代码，发布一个程序集。发布API可用于创建程序集。编辑器中的
Edit and Continue特性需要一个新的编译，来利用发布阶段。
根据编译器管道，提供了编译器API，例如语法（Syntax）API、符号（Symbol）
API、绑定和流分析（Binding and Flow Analysis）API以及发布（Emit）API。.NET编译器
平台还提供了一个API层，来利用另一个API：工作区Workspace 
API。工作区API允许使
用工作区、解决方案、项目和文档。在Visual 
Studio中，一个解决方案可以包含多个项
目。一个项目包含多个文档。这个列表的新增内容是工作区。一个工作区可以包含多个解
决方案。
你可能会认为，一个解决方案可能就足够了。不过，所有用于.NET编译器平台的树
是不可变的，不能更改。每次改变都会创建一个新树——换句话说，解决方案中的改变会
创建一个新的解决方案。这就是为什么需要工作区这个概念的原因——工作区可以包含多
个解决方案。
18.3 语法分析
下面从一个简单的任务开始：用语法API进行语法分析。使用语法API，可以从C#源
代码中建立一个语法节点树。示例应用程序是一个WPF应用程序，在其中可以加载任何
C#源文件，源文件的层次结构显示在一个树图中。
  注意： XAML和WPF在第29章和接下来的章节中详细说明。TreeView控件的
信息参见第34章。
示例应用程序定义了一个用户界面，其中的按钮控件加载C#源文件、TreeView控
件、几个TextBlock和ListBox控件来显示一个节点的细节，如文档大纲（见图18-2）和
XAML设计器（见图18-3）所示。数据绑定用来把信息内容绑定到UI元素上。
图18-2
图18-3
运行应用程序，单击Load按钮后，在OpenFileDialog类的帮助下指定C#文件。在这个
对话框中单击OK后，该文件加载到语法树（代码文件
WPFSyntaxTree/MainWindow.xaml.cs）中：
    private async void OnLoad(object sender, RoutedEventArgs e)
    {
      var dlg = new OpenFileDialog();
      dlg.Filter = "C# Code (.cs)|＊.cs";
      if (dlg.ShowDialog() == true)
      {
        string code = File.ReadAllText(dlg.FileName);
        // load the syntax tree
      }
    }
  注意： 文件输入/输出（I/O）参见第23章。
语法API的核心是SyntaxTree类。使用CSharpSyntaxTree.ParseText解析C#文件内容，
会创建一个SyntaxTree对象。要从树中获得节点，GetRootAsync（或GetRoot）方法应返回
根节点。所有节点都是从SyntaxNode基类派生而来的类。为了在用户界面中显示根节点，
应使用SyntaxNodeViewModel类包装SyntaxNode，之后添加到Nodes属性：
    private async void OnLoad(object sender, RoutedEventArgs e)
    {
        // etc.
        SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
        SyntaxNode node = await tree.GetRootAsync();
        Nodes.Add(new SyntaxNodeViewModel(node));
      }
    }
Nodes属性的类型是ObservableCollection 。当集合变化时，它更
新用户界面。
    public ObservableCollection Nodes { get; } =
        new ObservableCollection();
类SyntaxNodeViewModel包装一个SyntaxNode，显示在用户界面中。它定义了
Children属性，递归地显示所有子节点。Children属性通过调用ChildNodes（）方法，把
SyntaxNode对象的集合转换为SyntaxNodeViewModel，来访问语法树中的所有子节点。这
个类也定义了Tokens和Trivia属性，参见本节后面的内容。TypeName属性返回
SyntaxNodeViewModel类包装的实际类型名称。这应该是一个派生自基类SyntaxNode的类
型（代码文件WPFSyntaxTree/ViewModels/SyntaxNodeViewModel.cs）：
    public class SyntaxNodeViewModel
    {
      public SyntaxNodeViewModel(SyntaxNode syntaxNode)
      {
        SyntaxNode = syntaxNode;
      }
      public SyntaxNode SyntaxNode { get; }
      public IEnumerable Children =>
        SyntaxNode.ChildNodes().Select(n => new SyntaxNodeViewModel(n));
      public IEnumerable Tokens =>
        SyntaxNode.ChildTokens().Select(t => new SyntaxTokenViewModel(t));
      public string TypeName => SyntaxNode.GetType().Name;
      public IEnumerable Trivia
      {
        get
        {
          var leadingTrivia = SyntaxNode.GetLeadingTrivia().Select(
          t => new SyntaxTriviaViewModel(TriviaKind.Leading, t));
          var trailingTrivia = SyntaxNode.GetTrailingTrivia().Select(
          t => new SyntaxTriviaViewModel(TriviaKind.Trailing, t));
          return leadingTrivia.Union(trailingTrivia);
        }
      }
    }
在用户界面中，TreeView控件绑定到Nodes属性上。HierarchicalDataTemplate定义了
树图中项的外观。利用这个数据模板，TypeName属性的值显示在TextBlock中。为了显示
所有子节点，HierarchicalDataTemplate的ItemsSource属性绑定到Children属性（代码文件
WPFSyntaxTree/MainWindow.xaml）：
随示例应用程序一起打开的代码文件是一个简单的Hello, World！代码文件，还包括
一些注释：
    using static System.Console;
    namespace SyntaxTreeSample
    {
      // Hello World! Sample Program
      public class Program
      {
        // Hello World! Sample Method
        public void Hello()
        {
        WriteLine("Hello, World! ");
        }
      }
    }
当运行应用程序时，可以看到一个语法节点类型树，如表18-1所示。SyntaxNode允许
遍历层次结构，来访问父节点、祖先节点和后代节点。当使用Span属性（它返回一个
TextSpan结构）时，返回源代码中的位置信息。表18-1在第1列中显示了层次结构级别（2
是1的子节点，3是2的子节点），第2列给出了节点类的类型，第3列列出了节点的内容
（如果内容较长，就显示一个省略号），第4列给出了Span属性的Start和End位置。有了这
棵树，可以看到CompilationUnitSyntax横跨完整的源代码。这个节点的子节点是
UsingDirectiveSyntax和NamespaceDeclarationSyntax。UsingDirectiveSyntax由using声明构
成，用于导入System.Console静态类。UsingDirectiveSyntax的子节点是
QualifiedNameSyntax，它本身包含两个IdentifierNameSyntax节点：
表18-1
层次结构级
别
语法节点类型
内容
SPAN—
START, END
1
CompilationUnitSyntax
using static
System.Console; …
0.273
2
UsingDirectiveSyntax
using static
System.Console;