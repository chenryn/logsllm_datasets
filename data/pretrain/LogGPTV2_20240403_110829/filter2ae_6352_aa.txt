### 前置知识

为了更好地理解本文内容，建议参考一些GitHub上的相关代码项目。我们将首先介绍`CreateProcess`和`NtCreateUserProcess`这两个系统调用。

在Windows XP时代，创建一个新进程需要执行四个系统调用：`NtOpenFile`、`NtCreateSection`、`NtCreateProcess(Ex)` 和 `NtCreateThread(Ex)`。而在较新的Windows版本中，只需调用`NtCreateUserProcess`即可启动一个新的用户模式进程。那么`CreateProcess`又扮演了什么角色呢？

`CreateProcess`是一个用户态函数，用于创建新的进程。创建的进程将在调用进程的上下文中运行（具有相同的访问令牌）。`CreateProcess`通过内核创建进程的过程大致分为六个阶段：

1. **打开目标映像文件**：加载要执行的程序文件。
2. **创建内核中的进程对象**：分配并设置`EPROCESS`数据结构。
3. **创建初始线程**：为新进程创建第一个线程。
4. **通知Windows子系统**：向`csrss.exe`进程发出通知，因为`csrss.exe`负责管理所有Windows进程。
5. **启动初始线程**：使初始线程开始运行。
6. **用户空间的初始化和DLL连接**：初始化用户空间并加载必要的动态链接库。

`CreateProcess`是用户态（Ring 3）的函数，而`NtCreateUserProcess`则位于内核态（Ring 0）。可以通过断点调试来验证这些步骤。

从API到`NtCreateUserProcess`的调用链如下：
- `kernel32.dll!CreateProcessW`
- `CreateProcessInternalW`
- `ntdll.dll!NtCreateUserProcess`

`NtCreateProcess`的主要功能包括：
- 创建以`EPROCESS`为核心的相关数据结构，并分配和设置`EPROCESS`数据结构。
- 设置其他相关数据结构，如句柄表等。
- 为目标进程创建初始地址空间。
- 初始化`EPROCESS`。
- 将系统DLL（如`ntdll.dll`）映射到目标用户空间。
- 设置目标进程的PEB（进程环境块）。
- 映射与“当地语言支持”（NLS）相关的数据结构到用户空间。
- 完成`EPROCESS`的创建，并将其挂入进程队列并插入创建者的句柄表。

`NtCreateUserProcess`是用户模式下可访问的最后一个函数。由于其位置较深，直接调用它比调用常见的`CreateProcess`更难被EDR/AV检测到。因此，许多开发者更倾向于使用`NtCreateUserProcess`来实现特定功能。

### `NtCreateUserProcess`的原型

```c
NTSTATUS NTAPI
NtCreateUserProcess(
    _Out_ PHANDLE ProcessHandle,
    _Out_ PHANDLE ThreadHandle,
    _In_ ACCESS_MASK ProcessDesiredAccess,
    _In_ ACCESS_MASK ThreadDesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ProcessObjectAttributes,
    _In_opt_ POBJECT_ATTRIBUTES ThreadObjectAttributes,
    _In_ ULONG ProcessFlags,
    _In_ ULONG ThreadFlags,
    _In_ PRTL_USER_PROCESS_PARAMETERS ProcessParameters,
    _Inout_ PPS_CREATE_INFO CreateInfo,
    _In_ PPS_ATTRIBUTE_LIST AttributeList
);
```

#### 参数说明

- **`ProcessHandle`** 和 **`ThreadHandle`**：分别用于存储新创建的进程和线程的句柄。
- **`ProcessDesiredAccess`** 和 **`ThreadDesiredAccess`**：指定对新创建的进程和线程的访问权限。本示例中使用`PROCESS_ALL_ACCESS`和`THREAD_ALL_ACCESS`以获得最高权限。
- **`ProcessObjectAttributes`** 和 **`ThreadObjectAttributes`**：指向`OBJECT_ATTRIBUTES`结构体，包含将要创建的对象或对象句柄的属性。

```c
typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    HANDLE RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
} OBJECT_ATTRIBUTES;
```

- **`ProcessFlags`** 和 **`ThreadFlags`**：用于控制进程和线程的创建行为。例如，可以设置`PROCESS_CREATE_FLAGS_SUSPENDED`来在创建时挂起进程。

```c
#define PROCESS_CREATE_FLAGS_SUSPENDED 0x00000200
```

- **`ProcessParameters`**：指向一个`RTL_USER_PROCESS_PARAMETERS`结构体，描述了要创建的进程的启动参数。

```c
typedef struct _RTL_USER_PROCESS_PARAMETERS {
    BYTE Reserved1[16];
    PVOID Reserved2[10];
    UNICODE_STRING ImagePathName;
    UNICODE_STRING CommandLine;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;
```

该结构体的构建依赖于另一个API：`RtlCreateProcessParametersEx`。

```c
NTSTATUS NTAPI
RtlCreateProcessParametersEx(
    _Out_ PRTL_USER_PROCESS_PARAMETERS* pProcessParameters,
    _In_ PUNICODE_STRING ImagePathName,
    _In_opt_ PUNICODE_STRING DllPath,
    _In_opt_ PUNICODE_STRING CurrentDirectory,
    _In_opt_ PUNICODE_STRING CommandLine,
    _In_opt_ PVOID Environment,
    _In_opt_ PUNICODE_STRING WindowTitle,
    _In_opt_ PUNICODE_STRING DesktopInfo,
    _In_opt_ PUNICODE_STRING ShellInfo,
    _In_opt_ PUNICODE_STRING RuntimeData,
    _In_ ULONG Flags
);
```

`ImagePathName`是启动进程的路径，可以通过`RtlInitUnicodeString`进行初始化。

```c
typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR Buffer;
} UNICODE_STRING, *PUNICODE_STRING;
```

通过以上介绍，希望读者能够对`CreateProcess`和`NtCreateUserProcess`有更深入的理解。