文件上传反制跳板站点 
本篇文章主要介绍一次通过黑客跳板站点，获取攻击者 IP 案例。利用前期的
信息收集对跳板站点进行渗透测试，一步步取证攻击者的攻击手法、工具和 IP 的
过程。 
目录 
文件上传反制跳板站点 ........................................................................................................................ 1 
一、事件背景 .................................................................................................................................. 1 
二、反制过程 .................................................................................................................................. 2 
信息收集 .................................................................................................................................. 3 
代码审计 .................................................................................................................................. 8 
上传漏洞利用分析 ............................................................................................................ 11 
三、线索收集 ............................................................................................................................... 12 
扩展线索 ............................................................................................................................... 13 
四、事件小结 ............................................................................................................................... 14 
一、事件背景 
 这篇文章主要介绍实操利用文件上传漏洞对跳板站点反制。这个 C2 来自于某
方向分析报告。攻击者黑了一批正常网站然后往上面丢了诱饵文档。利用此类结合
了时事热点的恶意样本再对周边国家和地区发起了多次攻击活动。 
网站首页中被插入了一个 iframe，该 iframe 会判断用户 IP 等信息，若是目标
用户则下发木马给受害者。 
二、反制过程 
对事件分析的完整溯源需要明确的是 who(对手、受害者), what(基础设施、能
力), when(时间), where(地点), why(意图), how(方法)，通过聚焦于 IOC 的分析、包括
对事件分析、样本类型的分析，IOC 的提取、威胁情报产生是各大安全厂商有力的
分析手段，为事件分析提供了坚实的数据来源。而对反制攻击者基础设施获取数据
对形成攻击者画像，完善攻击者链条起到了线索弥补和数据源扩充的作用。 
信息收集 
前文介绍了端口扫描、目录扫描的信息收集方式，Google hacking 也是信息收
集中的常用渠道，因为 Google 搜索引擎本身提供了各种搜索语法，搜索时配合这
些语法可以获取到更加精确的结果，而利用语法加上特定关键字可以搜索到目标站
点的目录、文件报错等重要信息。 
以下是 google 搜索引擎自带的基础常用语法。： 
intitle: 以网页标题中关键字搜索  
inurl: 从 url 中存在的关键字进行搜索匹配  
Iintext:以网页正文中的关键字进行搜索  
filetype:搜索指定的文件后缀 
Site:指定域名 
link:例如 link:www.google.com 表示搜索所有链接了 google.com 的 url 
常用的通配符： 
+  :强制包含某个字符进行查询 
-  :查询时忽略某个字符 
"" :查询时精确匹配双引号内的字符 
.  :匹配某单个字符进行查询 
而对端口、目录扫描的信息收集方式，我写了个 bash 脚本，半自动化完成端口扫
描，然后用 NMAP 对端口服务识别以及对每个端口做目录扫描。代码如下： 
#!/bin/bash 
if [ $# != 1 ] ; then 
echo "USAGE: $0 TABNAME" 
echo " e.g.: $0 111.222.333.444" 
exit 1; 
fi 
## 传入参数 
scanip=$1 
# 设置 dirsearch 目录 
dirsearch="/opt/dirsearch/" 
# 保存的目录位置 
resultSave=`pwd`"/result/"${scanip} 
# 时间保存 
dateStr=`date +"%Y-%m-%d"` 
# 端口扫描 
portscan(){ 
echo "result to "${resultSave} 
## 判断目录是否存在，不存在就创建目录 
if [ ! -d "$resultSave" ];then 
  mkdir -p ${resultSave} 
fi 
echo "masscan scaning.............." 
echo "masscan -p1-65535 ${scanip} --rate=10000 -oL ${resultSave}/${scanip}" 
## 写死了 masscan 命令 
masscan -p1-65535 "${scanip}" --rate=10000 -oL ${resultSave}"/"${scanip} 
echo "masscan result.............." 
cat ${resultSave}"/"${scanip} 
## 读取 masscan 的扫描结果做处理只提取端口部分 
for  line  in  `awk '{print $3}'  ${resultSave}/${scanip}` 
do 
portscan=${line}',' 
echo -n ${portscan} >> ${resultSave}/nmapTemp 
done 
## 写死了 nmap 命令 
nmapStr="nmap -v -A -O  ${scanip} -p " 
## 处理 NMAP 端口和导出文件格式 
NmapPort=`sed '$s/.$//' ${resultSave}/nmapTemp` 
NmapSave=" -oN ${resultSave}/portRes${dateStr}.txt" 
echo "nmap scaning.............." 
echo ${nmapStr}${NmapPort}${NmapSave} 
## 执行 nmap 命令识别服务 
${nmapStr}${NmapPort}${NmapSave} 
## 删除端口扫描临存数据 
rm -rf ${resultSave}/nmapTemp 
} 
## dirscan 目录扫描 
dirscan(){ 
for  line  in  `awk '{print $3}' ${resultSave}/${scanip}` 
do 
   echo "python3 ${dirsearch}${scanip}:${line} -e * -R 1" 
   /usr/bin/python3 ${dirsearch}dirsearch.py -u http://${scanip}:${line} -e * -R 1 
   /usr/bin/python3 ${dirsearch}dirsearch.py -u https://${scanip}:${line} -e * -R 1 
   if [ ! -d ${resultSave}/dirRes${dateStr} ];then 
      mkdir ${resultSave}/dirRes${dateStr} 
   fi 
   cp -R ${dirsearch}reports/${scanip}/* ${resultSave}/dirRes${dateStr} 
done 
## 删除端口扫描临存数据 
rm -rf ${resultSave}"/"${scanip} 
} 
## 端口函数调用 
echo "-----portscan staring-----" 
portscan 
echo "-----portscan end-----" 
## 目录扫描函数调用 
echo "-----dir staring-----" 
dirscan 
echo "-----dir end-----" 
在用了端口扫描和目录扫描的方式后，找到了攻击者记录受害者的日志信息。log
文件里记录了下载的文件、时间、IP 和 USER-Agent。对受害者的范围排查有一定
作用。 
跳板站点只开了 80、443 端口。 为了拓展收集信息，这里使用 Google Hacking 语
法的识别语句对目标的 URI 搜集，语法如下： 
site:XXX inurl:admin|php|login 
在谷歌的结果里找到了一条记录疑似为登录后台，访问/do-login.secure 后 在底部
的版权信息可以确定 CMS 名称是 I BMS 版本号是 v4.3.5。管理员后台登录界面如
下： 
利用关键字在 Github 找到泄露的历史版本源码，版本并不完全一致，但是通过文
件的对比发现确实是同一款 CMS。 
代码审计 
得到源码后做代码审计就轻松很多了，对于渗透测试优先选择容易上传
webshell 或者拿到权限的漏洞。源码审计工具里其实已经内含了正则表达式，原理
是对容易出现漏洞的函数做正则表达式匹配筛选文件。以下规则是从 seay 代码审