---
## Page 249
makefile实例
239
下一条语句是一个echo命令，它用到了“控制命令是否被输出”一节中所提到的技术，
后面跟着依存关系产生命令。此命令会写入$（depfile）文件，此文件会经过scripts/
basic/fixdep的转换。fixdep命令行中的嵌套subst函数里，首先会转义单引号，
然后转义$S（shell语法中的当前进程编号）。
最后，如果没有错误发生，中间文件S（depfile）会被移除，而所产生的依存文件（具
.cmd扩展名）会被移往安置处。
下-个函数if_changed_rule使用了跟if_changed_dep一样的比较技术，用来控制
一个命令的执行与否：
#Usage:$(call if_changed_rule,foo)
#will check if $（cmd_foo)changed，or any of the prequisites changed，
#and if so will execute S（rule_foo)
if_changed_rule=
s(if s(strip $?
s（filter-out s（cmd_s（1)),$(cmd_S（@F)))
s（fi1ter-out s（cmd_s（@F)）.$（cmd_s（1)))），\
@$（rule_$（1)))
在最上层的makefile中，此函数会使用下面这些宏来链接内核：
#This is a bit tricky:If we need to relink vmlinux,we want
the version number incremented,which means recompile init/version.o
#and relink init/init.o.However,we cannot do this during the
# normal descending-into-subdirs phase,since at that time
#we cannot yet know if we will need to relink vmlinux.
#So we descend into init/inside the rule for vmlinux again.
quiet_cmd_vmlinux_=LD $@
define cmd_vmlinux
S（LD)$（LDFLAGS）S(LDFLAGS_vm1inux）\
endef
#set-e makes the rule exit immediately on error
define rule_vmlinux
+set-e;
$（if $（filter.tmp_kallsyms&,s~),
echoGENversion';
.$（srctree)/ripts/mkversion>.tmp_version;
mv-f.tmp_version.version;
1
$（MAKE）$（build）=init;)
s(if s($（quiet）cmd_vmlinux）,
echos（S（quiet）cmd_vmlinux)&&）
$（cmd_vmlinux）;
echo'cmd_$@:=$（cmd_vmlinux_）·>$（@D）/.S（@F）.cmd
endef
---
## Page 250
240
第十一章
define rule_vmlinux
$（rule_vmlinux_);
$.(NM）Sθ1
grep-v'\(compiled\)\1
sort> System.map
endef
if_changed_rule函数会被用来调用rule_vmlinux，它会进行链接并且编译最后的
System.map。正如此makefile中的注释所说，rule_vmlinux__函数必须在重新链接
vmlinux之前，重新产生内核的版本文件以及重新链接init.o。这受到rule_vmlinux_
中第一个if语句的控制。第二个if语句用来控制链接命令S（cmd_vmlinux__）的是
否输出。链接命令之后，实际被执行的命令会被记录到一个.cmd文件中，以备下次编译
时比较之用。
---
## Page 251
第十二章
makefile 的调试
makefile的调试有点像魔法。可惜，并不存在makefile调试器之类的东西可用来查看特
定规则是如何被求值的，或某个变量是如何被扩展的。相反，大部分的调试过程只是在
执行输出的动作以及查看makefile。事实上，GNUmake提供了若干可以协助调试的内
置函数以及命令行选项。
用来调试makefile的一个最好方法就是加人调试挂钩以及使用具保护的编程技术，让你
能够在事情出错时恢复原状。我将会介绍若干基本的调试技术以及我所发现的最有用的
具保护能力的编码习惯。
make的调试功能
warning函数非常适合用来调试难以捉摸的makefile。因为warning函数会被扩展成空
字符串，所以它可以放在makefile中的任何地方：开始的位置、工作目标或必要条件列
表中以及命令脚本中。这让你能够在最方便查看变量的地方输出变量的值。例如：
$（warningA top-levelwarning)
FOO:=$(warning Right-hand side of a simple variable)bar
BAZ=$（warning Right-hand side of a recursive variable)boo
S（warning A target)target:S(warning In a prerequisite list)makefile
S(BAZ)
S（warning In a command script)
1s
$(BAZ)：
这会产生如下的输出：
S make
makefile:1:A top-level warning
241
---
## Page 252
242
第十二章
makefile:2:Right-hand side ofa simple variable
makefile:5:A target
makefile:5:In aprerequisite 1ist
makefile:5: Right-hand side of a recursive variable
makefile:8:Right-hand side of a recursive variable
makefile:6:In a command script
1s
makefile
请注意，warning函数的求值方式是按照make标准的立即和延后求值算法。虽然对BAZ
的赋值动作中包含了一个warning函数，但是直到BAz在必要条件列表中被求值后，这
个信息才会被输出来。
“可以在任何地方安插warning调用”的这个特性，让它能够成为一个基本的调试工具。
命令行选项
我找到了三个最适合用来调试的命令行选项：--just-print（-n）、--print-data-
base（-p）以及--warn-undefined-variables。
--just-print
在一个新的makefile工作目标上，我所做的第一个测试就是以--just-print（-n）选
项来调用make。这会使得make读进makefile并且输出它更新工作目标时将会执行的命
令，但是不会真的执行它们。GNUmake有一个方便的功能，就是允许你为将被输出的
命令标上安静模式修饰符（@）。
这个选项被假设可以抑制所有命令的执行动作，然而这只在特定的状况下为真。实际上，
你必须小心以对。尽管make不会运行命令脚本，但是在立即的语境之中，它会对shel1
函数调用进行求值动作。例如：
REQUIRED_DIRS=...
_MKDIRS：=$（she11 ford in $（REQUIRED_DIRS）;\
do
[1-d ssd]]11mkdir-p ssd;
1
done)
S（objects):$（sources)
正如我们之前所见，_MKDIRS简单变量的目的是触发必要目录的创建动作。如果这个
makefile是以--just-print选项的方式运行的，那么当make读进makefile时，shell
命令将会一如往常般被执行。然后，make将会输出（但不会执行）更新s（objects）
文件列表所需要进行的每个编译命令。
---
## Page 253
makefile的调试
243
--print-data-base
--print-data-base（-p）是另一个你常会用到的选项。它会运行makefile，显示GNU
版权信息以及make所运行的命令，然后输出它的内部数据库。数据库里的数据将会依
种类划分成以下几个组：variables、directories、implicitrules、pattern-specific
variables、files（explicitrules）以及vpathsearchpath。如下所示：
#GNU Make3.80
#Copyright （C) 2002Free Software Foundation,Inc.
#This is free software;see the source for copying conditions.
#There is NO warranty:not even for MERCHANTABILITY or FITNESS FORA
#PARTICULAR PURPOSE.
正常的命令将会在此处执行
#Make data base,printed on Thu Apr 29 20:58:13 2004
#Variables
Directories
#Impiicit Rules
#Pattern-specific variable values
Files
，
#VPATH Search Paths
让我们更详细地查看以上这几个区段。
变量区段（variable）将会列出每个变量以及具描述性的注释：
automatic
<D=$（patsubst/,，$（dirS<）)
#environment
EMACS_DIR=C:/uSr/emaCs-21.3.50.7
default
CWEAVE = Cweave
#makefile（from../mp3_player/makefile',1ine 35)
CPPFLAGS =S（addprefix-I,$（include_dirs）)
#makefile(from../ch07-separate-binaries/makefile',1ine 44)
RM :=rm-f
#makefile（from../mp3_player/makefile',1ine 14)
define make-library
libraries += $1
sources+=$2
S1:$(cal1 source-to-object,$2)
S(AR) S(ARFLAGS)SS@ SS^
endef
---
## Page 254
244
第十二章
自动变量不会被显示出来，但是通过它们可以方便变量的获得，像S（<D）。注释所指出
的是origin函数所返回的变量类型（参见“较不重要的杂项函数”一节）。如果变量
被定义在一个文件中，则会在注释中指出其文件名以及该定义所在的行号。简单变量和
递归变量的差别在于赋值运算符。简单变量的值将会被显示成右边部分被求值的形式。
下一个区段标示为Directories，它对make开发人员比对make用户有用。它列出了将
会被make检查的目录，包括可能会存在的SCCS和RCS子目录，但它们通常不存在。
对每个目录来说，make会显示实现细节，比如设备编号、inode以及文件名模式匹配的
统计数据。
接着是ImplicitRules区段。这个区段包含了make数据库中所有的内置的和用户自定
义的模式规则。此外，对于那些定义在文件中的规则，它们的注释将会指出文件名以及
行号：
8.c8.h：8.y
#commands to execute（from../mp3_player/makefile',1ine73）:
$（YACC.y)--defines $<
$（MV)y.tab.c$*.c
$（MV）y.tab.h $*.h
：.C
#commands to execute（built-in):
$（LINK.C)S^S(LOADLIBES）$（LDLIBS）-O $@
6.0:.C
#commands to execute （built-in):
$(COMPILE.C)$（OUTPUT_OPTION)$<
查看这个区段，是让你能够熟悉make内置规则的变化和结构的最佳方法。当然，并非
所有的内置规则都会被实现成模式规则。如果你没有找到你想要的规则，可以查看Files
区段，旧式后缀规则就列在该处。
下一个区段被标示为Pattern-specificvariables，此处所列出的是定义在makefile里的模
式专属变量。所谓模式专属变量，就是变量定义的有效范围被限定在相关的模式规则执
行的时候。例如，模式变量YYLEXFLAG被定义成：
.C.h:YYLEXFLAG:=-d
8.c8.h:8.y
S(YACC.y)--defines S<
S（MV)y.tab.c $*.c
S(MV) y.tab.h $*.h
将会被显示成：
#Pattern-specific variable values
---
## Page 255
makefile的调试
245
8.C:
#makefile （fromMakefile'，line 1)
#YYLEXFLAG:=-d
variable set hash-table stats:
#Load=1/16=68,Rehash=0,Collisions=0/1=0$
$.h:
#makefile（fromMakefile',line 1)
#YYLEXFLAG:=-d
#variable set hash-table stats:
#Load=1/16=6%,Rehash=0,Col1isions=0/1=0$
#2pattern-specific variable values
接着是Files区段，此处所列出的都是与特定文件有关的自定义和后缀规则：
Not a target:
.P.O:
Implicit rule search has not been done.
#
Modification time never checked.
#
File has not been updated.
#
commands to execute （built-in）:
$（COMPILE.P)S(OUTPUT_OPTION)$<
1ib/ui/libui.a:lib/ui/ui.o
#
Implicit rule search has not been done.
Last modified 2004-04-01 22:04:09.515625
File has been updated.
Successfully updated.
commands toexecute（from../mp3_player/1ib/ui/module.mk',1ine 3):
S@S