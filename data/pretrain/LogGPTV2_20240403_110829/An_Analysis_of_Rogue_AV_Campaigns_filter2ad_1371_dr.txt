### Optimized Text

#### System Performance
The implemented system achieves excellent results, successfully detecting all synthetic anomalies.

#### References
1. Lakhina, A., Crovella, M., Diot, C.: Characterization of network-wide anomalies in traffic flows. In: ACM Internet Measurement Conference, pp. 201–206 (2004).
2. Lakhina, A.: Diagnosing network-wide traffic anomalies. In: ACM SIGCOMM, pp. 219–230 (2004).
3. The Internet2 Network. [Online]. Available: http://www.internet2.edu/network/

---

### Detecting the Onset of Infection for Secure Hosts
**Kui Xu¹, Qiang Ma², and Danfeng (Daphne) Yao¹**

¹ Department of Computer Science, Virginia Tech  
{xmenxk, danfeng}@cs.vt.edu

² Department of Computer Science, Rutgers University  
PI:EMAIL

#### Abstract
Software vulnerabilities in applications such as web browsers can be exploited by attackers to launch drive-by-download (DBD) attacks, which have become a major vector for malware infection. We describe a host-based detection approach that correlates user behaviors related to file systems to identify DBDs. Our approach involves capturing keyboard and mouse inputs and correlating these with file-downloading events. We present DeWare, a real-time monitoring system capable of accurately detecting the onset of malware infection by identifying illegal download-and-execute patterns.

According to a study, 53% of malware infections occur through downloads [1]. Another study found that 450,000 out of 4.5 million URLs contained drive-by-download exploits, often due to advertisements, third-party content, and user-contributed content [2]. DBD attacks exploit browser or component vulnerabilities to stealthily fetch and execute malicious executables without user consent.

**DeWare** is a host-based security tool designed to detect the onset of malware infection in real-time, particularly DBD attacks. It is application-independent and monitors host-wide activities beyond the browser. DeWare's detection is based on observing stealthy download-and-execute patterns, a behavior common to most active malware at the onset of infection.

The primary technical challenge is distinguishing DBDs from legitimate downloads. Our solution involves monitoring relevant file-system events and correlating them with user inputs at the kernel level. Legitimate user download activities are typically triggered by explicit user requests, while the browser may automatically create temporary files not directly associated with user actions. To address this, we restrict browser access to specific folders.

**Security and Attack Models**
We assume that the browser and its components may have software vulnerabilities, but the operating system is trusted and secure. Kernel-level monitoring of file-system events and user inputs provides trusted information. File system integrity in our model refers to enforcing user-intended or user-authorized activities and preventing malware-initiated tampering.

**DeWare Architecture Overview**
The DeWare monitoring system combines three techniques:
- **Input Logger:** Intercepts user inputs at the kernel level with timestamps and process information. User inputs are considered trusted seeds for identifying legitimate system behaviors.
- **System Logger:** Intercepts system calls for file creations and gathers process information. Timestamps are used for temporal correlation.
- **Access Control Framework:** Specifies accessible and downloadable areas for applications and users.
- **Execution Monitor:** Inspects areas where access is granted to prevent malware execution.

To reduce false alarms, the access control framework grants processes access to specific folders. For example, the Temporary Internet Files folder is modifiable by Internet Explorer, whereas system folders are not. The execution monitor prevents malware from running in accessible areas.

**Prototype Implementation in Windows**
Our implementation and experiments use Minispy, a kernel driver for Windows. It monitors all file and device object handle requests and identifies file creations. Logged activities are reported to user mode for access control policy, input correlation, and file extension checks. User inputs are recorded at the kernel level using SetWindowsHookex. The execution monitor is implemented with Microsoft PsTools and local security settings.

We conducted a study with 22 users to collect real-world download behavior data and will use DeWare to evaluate a large number of both legitimate and malware-hosting websites to test its detection accuracy.

#### References
1. Macky Cruz. Most Abused Infection Vector. [Online]. Available: http://blog.trendmicro.com/most-abused-infection-vector/
2. Provos, N., McNamee, D., Mavrommatis, P., Wang, K., Modadugu, N.: The ghost in the browser: analysis of web-based malware. In: Hot-Bots 2007: Proceedings of the First Conference on First Workshop on Hot Topics in Understanding Botnets. USENIX Association, Berkeley (2007).

---

### Eliminating Human Specification in Static Analysis
**Ying Kong, Yuqing Zhang*, and Qixu Liu**

National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China  
Tel.: +86-10-88256218; Fax: +86-10-88256218  
PI:EMAIL

State Key Laboratory of Information Security, GUCAS, Beijing 100049, China

#### Abstract
We present a fully automated static analysis approach for detecting code injection vulnerabilities in web applications using the JSP/servlet framework. Our approach incorporates origin and destination information of data flows and developer beliefs extracted via statistical analysis and pattern recognition to infer specifications for flaws without human intervention. Experiments show that our algorithm covers a comprehensive range of attack vectors and significantly reduces manual labor.

Existing static approaches for detecting code injection vulnerabilities heavily rely on human work to specify flaws and build auditing models, leading to omissions in tagging attack vectors and flaw reports. We introduce Injection Vulnerability Checking Tool (IVCT) to address this issue.

We model code injection attacks as improper communication among the front-end web server, back-end database, and underlying operating system. Data flow starting from a taint source (method invoked on the web server) and ending at a vulnerable receiver (method invoked on one of the three components) is considered a potential vulnerable flow. This model covers a wide range of attack vectors.

**IVCT Framework**
IVCT consists of four phases:
- **Slicing Technique:** Tracks untrusted input propagation.
- **Enhanced Dataflow Analysis:** Models indirect propagation through library methods.
- **Sensitive Component Specification:** Requires specifying sensitive components' jar paths.
- **Tainted Data Collection:** Collects tainted data propagated via library invocations.

**Experimental Results**
We manually inspected two web applications, "Webgoat5.3RC" and "blojsom-3.3b," using Eclipse to locate Java code elements. IVCT requires no human judgment and captures more vulnerabilities with fewer false positives compared to TAJ and bddbddb. Future work includes implementing IVCT in a real tool and extracting additional beliefs from program code for flaw specification.

#### References
1. Sridharan, M., Fink, S.J., Bodik, R.: Thin slicing. In: ACM SIGPLAN Conference on Programming Language Design and Implementation, vol. 42(6), pp. 112–122 (2007).
2. Tripp, O., Pistoia, M., Fink, S., Sridharan, M., Weisman, O.: TAJ: Effective Taint Analysis of Web Applications. In: ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 87–97 (2009).
3. Livshits, V.B., Lam, M.S.: Finding security vulnerabilities in Java applications with static analysis. In: The 14th USENIX Security Symposium, pp. 271–286 (2005).

---

### Evaluation of the Common Dataset Used in Anti-Malware Engineering Workshop 2009
**Hosoi Takurou and Kanta Matsuura**

Institute of Industrial Science, The University of Tokyo  
4-6-1, Komaba, Meguro-ku, Tokyo 153-8585, Japan

#### Abstract
The Anti-Malware Engineering Workshop 2009 (MWS2009) provided a common dataset for all participants. To understand the research-promotion effects in the network-security community, we evaluated the dataset through observations and a questionnaire.

#### Keywords
malware, evaluation dataset, network security

#### 1 Introduction
Evaluation using datasets is a key approach in network security due to the difficulty of theoretical evaluation. A common dataset allows for reliable comparisons among different technologies and improves the quality of evaluations. MWS2009 required all 28 authors to use a common dataset (CCC DATAset 2009). We evaluated the dataset's impact on research promotion through observations and a questionnaire.

#### 2 Observations
A well-known example of a common dataset is the DARPA dataset for intrusion-detection evaluation. CCC DATAset 2009 is more comprehensive, including:
- (S) Malware specimen information (on 10 malwares),
- (T) Attack traffic data (by 2 hosts, 2 days long),
- (A) Attack source log (by 94 hosts, 1 year long).

These data were captured at 94 honeypots over a year. The comprehensiveness and operational efforts for organizing the workshop suggest high productivity and sustainability.

#### 3 Questionnaire-Based Evaluation
**3.1 Questionnaire**
We sent a questionnaire to all dataset users and received 27 responses. The questionnaire covered administrative and technical aspects, including expectations before use, evaluation after use, and comparisons with personal datasets.

**3.2 Results**
- **Deployment Rate:** 8/11 for class (S), 17/20 for class (T), and 10/13 for class (A). The ratio for multiple-class users was 9/16, highlighting the importance of dataset comprehensiveness.
- **Usefulness:** Negative feedback was minimal: 1/8 for class (S), 0/17 for class (T), and 0/10 for class (A), indicating high productivity.

#### 4 Concluding Remarks
Observations and the questionnaire suggest that CCC DATAset 2009 has many good features and is supported by researchers. The comprehensiveness of the dataset has a significant impact. More details will be provided in the poster.

#### References
1. DARPA intrusion detection evaluation dataset. [Online]. Available: http://www.ll.mit.edu/mission/communications/ist/corpora/ideval/data/index.html
2. Hatada, M., Nakatsuru, Y., Terada, M., Shinoda, Y.: Dataset for anti-malware research and research achievements shared at the workshop. In: Computer Security Symposium 2009 (CSS 2009), Anti-Malware Engineering WorkShop 2009 (MWS 2009), IPSJ, Japan, pp. 1–8 (2009) (in Japanese)
3. Anti-Malware Engineering WorkShop 2009 (MWS 2009). [Online]. Available: http://www.iwsec.org/mws/2009/en.html

---

### Inferring Protocol State Machine from Real-World Trace
**Yipeng Wang¹², Zhibin Zhang¹, and Li Guo¹**

¹ Institute of Computing Technology, Chinese Academy of Sciences, Beijing, China  
² Graduate University, Chinese Academy of Sciences, Beijing, China  
PI:EMAIL

#### Abstract
Application-level protocol specifications are essential for network security management, including intrusion detection, intrusion prevention, and detecting malicious code. Current methods for obtaining unknown protocol specifications often rely on manual operations like reverse engineering. This poster introduces a novel method for inferring a protocol state machine from real-world traces of an application. Our method does not require prior knowledge of the protocol format and is based on the statistical nature of protocol specifications. We evaluate our approach with text and binary protocols, demonstrating good performance in practice.

#### 1 Introduction and System Architecture
Finding protocol specifications is crucial for network security, and inferring the protocol state machine is particularly important. ScriptGen [1] attempts to infer protocol state machines from network traffic but lacks generalization.

Our system automatically extracts protocol state machines for stateful network protocols from internet traffic. The input is real-world traces of a specific application, and the output is the protocol state machine. Key features include:
- No prior knowledge of protocol format,
- Applicable to both text and binary protocols,
- High-quality inferred state machines.

**System Phases:**
1. **Network Data Collection:** Collect network traffic for a specific application (e.g., SMTP, DNS) under specific transport layer ports.
2. **Data Preprocessing:** Clean and preprocess the collected data.
3. **State Inference:** Infer the state machine based on statistical analysis.
4. **Validation and Refinement:** Validate and refine the inferred state machine.

**Example State Machine:**
```
EHLO
HELO
/
q1
q0
MAIL FROM:
q2
:
MAIL FROM
RCPT TO: <
q3
RCPT TO: 
DATA
q4
:
DATA
RSET
q5
QUIT
q7
```

#### References
1. ScriptGen: An Automated Approach to Inferring Protocol State Machines from Network Traffic. [Online]. Available: [Reference URL]

---