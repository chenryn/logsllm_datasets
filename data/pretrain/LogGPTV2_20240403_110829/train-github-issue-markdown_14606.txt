Sorry if this is a repeat/duplicate/similar, there are tons of issues when
using `limit` as the search term.
##### ISSUE TYPE
  * Feature Idea
##### COMPONENT NAME
limit
##### ANSIBLE VERSION
    ansible-playbook 2.4.0.0
      config file = 
      configured module search path = [u'/Users/lynchg/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
      ansible python module location = /Users/lynchg/.virtualenvs/a2x/lib/python2.7/site-packages/ansible
      executable location = /Users/lynchg/.virtualenvs/a2x/bin/ansible-playbook
      python version = 2.7.13 (default, Dec 18 2016, 07:03:34) [GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)]
##### CONFIGURATION
NA
##### OS / ENVIRONMENT
NA
##### SUMMARY
While it is possible to do `delegate_facts` with `with_items` to handle
`--limit` being used, this has a very high performance impact, because it is
single forked. So ideal option would be to add a play key, and exposed
variable that can be used - so then limit would work similar to batch/serial.
##### STEPS TO REPRODUCE
NA
##### EXPECTED RESULTS
It should be possible to do e.g.
    ansible-playbook webservers.yml -l 'foo.example.com'
    - hosts: dbservers
      limit: []
      gather_facts: True
    - hosts: webservers
      limit: "{{  ansible_play_limit|default([]) }}"
      tasks:
        ...
This would also align with the recent changes to expose `ansible_play_hosts`
and `ansible_play_batch`
The logic I see working would be something similar to the pattern
`webservers:&limit`, i.e. only hosts that are in the play group _and_ are in
the limit.
##### ACTUAL RESULTS
It's currently necessary to completely ignore the `--limit` functionality and
use a workaround of targets, e.g.
    ansible-playbook webservers.yml -e 'target=foo.example.com'
    - hosts: dbservers
      gather_facts: True
    - hosts: "{{ target|default('webservers') }}"
      tasks:
        ...
While this is nearly as easy, it can be confusing to people new to ansible,
but ultimately it also makes `--limit` basically useless.