# Introduction to PostgreSQL Clustering (PGCluster) at PGCon 2007

## Overview
This presentation discusses the requirements, structure, and processes involved in using PGCluster, a clustering solution for PostgreSQL. It covers both the advantages and disadvantages of this approach, along with potential future improvements.

## Requirements
- **PostgreSQL Cluster (pgcluster)**
- **Inter-Process Communication (IPC)**
- **Postmaster Process**
- **Shared Disk**

## Semaphores
### How Many Semaphores Are Used?
- The number of semaphores depends on the "max_connections" setting.
- By default, 7 x 16 semaphores are used.
- A mapping table is required for semaphore IDs (Semid).

#### Semaphore ID Mapping
- Semid = 100 to LOCK
- Semid = 80 to LOCK

| Semid | sem_num | index |
|-------|---------|-------|
| 99    | 2       | 14    |
| 100   | 2       | 15    |
| 79    | 2       | 14    |
| 80    | 2       | 15    |

## Shared Memory
### Usage
- **Communication During Each Backend Process**: Shared memory is used for communication between backend processes.
- **Data Storage**: Stores data such as logs, caches, buffers, etc.
- **Single Shared Memory Allocation**: A single shared memory area is allocated but divided into multiple segments.
- **Entry Pointers**: More than 100 entry pointers exist.

### Shared Memory Usage
- **BufferBlocks**: 90% of usage
- **ShmemVariableCache, LWLockArray, ShmemIndex, newSpace, ControlFile, XLogCtl, CLOG, SUBTRANS, TwoPhaseState, MultiXactOffset, MultiXactMember, BufferDescriptors, Shared Buffer Lookup, Table, StrategyControl, LOCK hash, PROCLOCK hash, ProcGlobal, DummyProcs, procs, ProcStructLock, procArray, BackendStatusArray, shmInvalBuffer, FreeSpaceMap, PMSignalFlags, BgWriterShmem, btvacinfo**

### Issues with Shared Memory
- **Activity Issue**: The size is not large, but the update frequency is very high.
- **Content Issue**: Includes memory addresses, which can cause issues if shared memory is copied to another server, potentially leading to crashes.

#### Address Data Type Label
| Address | Data Type | Label |
|---------|-----------|-------|
| &1000   | Char *    | Data  |
| &1004   | OID       | Oid   |
| &1008   | Char *    | Next  |
| &1012   | Char *    | Data  |
| &2000   | Char *    | Data  |
| &2004   | OID       | Oid   |
| &2008   | Char *    | Next  |
| &2012   | Char *    | Data  |

## Solution
- **Do Not Copy Address Data**: A copy mask table is required.
- **Translate Addresses to Local Addresses**: An offset is needed for each address data.

### Mask & Translate Sequence
| Address | Data Type | Label         |
|---------|-----------|---------------|
| &1000   | Int       | data_offset   |
| &1004   | Int       | next_offset   |
| &1008   | Char *    | Data          |
| &1012   | OID       | Oid           |
| &1016   | Char *    | Next          |
| &1020   | Int       | data_offset   |

### Copy with Mask
- Change offset to local address.

## Shared Disk
- **Each Node Shares All DB Cluster**: `base/`, `global/`, `pg_clog/`, `pg_multixact/`, `pg_subtrans/`, `pg_tblspc/`, `pg_twophase/`, `pg_xlog/`
- **Configuration Files**: `pg_hba.conf`, `pg_ident.conf`, `postgresql.conf`, `pgcluster.conf`
- **Setup Values**: Must be the same across all nodes, including connections (`max_connections`) and resource usage (memory, Free Space Map).

### pgcluster.conf
- **PGCluster Table Description**: Hostname/IP & port; multiple servers can be described, with the top one being the master.
- **Self Node Description**: Only one node can be described.

## Startup Sequence
- **Node 1**:
  - Postgres: Start up
  - Pgcluster: Create SEM, Create SHM, Begin req, Search other nodes, Create node table, Begin ans, Listen
- **Node 2**:
  - Postgres: Start up
  - Pgcluster: Create SEM, Create SHM, Begin req, Search other nodes, Sync req, Add new node, Send SEM, Sync SEM req, Copy SEM, Sync SEM ans, Send SHM, Sync SHM req, Copy SHM, Sync SHM ans, Send node table, Sync SYS req, Copy node table, Sync SYS ans, Sync SEM ans, Begin ans, Listen

## IPC Synchronization Sequence
- **Node 1**:
  - Postgres: Write IPC call
  - Pgcluster: Replicate IPC req, Search other nodes, Write IPC, Execute IPC req, Write IPC, Execute IPC ans, Replicate IPC ans, Write IPC done
- **Node 2**:
  - Postgres: Write IPC call
  - Pgcluster: Replicate IPC req, Search other nodes, Replicate IPC req, Search other nodes, Write IPC, Execute IPC req, Write IPC, Execute IPC ans, Replicate IPC ans, Replicate IPC ans, Write IPC done

## Stop Sequence
- **Node 1**:
  - Postgres: exit_proc()
  - Pgcluster: Stop req, Search other nodes, End req, Update node table, End ans, Stop ans, Delete IPC
- **Node 2**:
  - Postgres: exit_proc()
  - Pgcluster: Stop req, Search other nodes, End req, Update node table, End ans, Stop ans, Delete IPC

## Pros and Cons
- **Pros**:
  - Easy to add a node for redundancy or replacement.
  - Reading performance improves with more nodes.
  - Performance does not slow down by adding nodes.
- **Cons**:
  - Requires large RAM.
  - Writing performance does not improve by adding nodes.
  - Writing performance is generally poor.
  - CPU and network I/O are the only expandable resources.
  - Cost: Shared disk.

## Suitability
- **Suitable for Systems**:
  - High CPU and network load.
  - Most web systems and parts of OLTP systems.
- **Combination with pgpool-II**:
  - PGCluster-II might enhance performance with large data.

## Future Work
- **Performance Improvements**: Some write (and erase) memory data does not need to be synchronized.
- **Conversion Methods**: Improve methods for converting offsets to local addresses.
- **Source Code Release**: Release source code as soon as possible.
- **Documentation**: Provide comprehensive documentation.

## Thank You
- **Contact Information**:
  - For PGCluster: [pgcluster-PI:EMAIL]
  - For PGCluster-II: [PI:EMAIL]
- **Download Slides**: [http://pgfoundry.org/docman/?group_id=1000072](http://pgfoundry.org/docman/?group_id=1000072)

---

This document provides a clear and structured overview of the PGCluster system, its requirements, and the processes involved. It also highlights the pros and cons, and outlines future work and contact information.