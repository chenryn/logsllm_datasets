works are orthogonal to OSSPolice and can be used as remedy
actions for vulnerable OSS components that cannot be easily fixed
by updating to the latest version.
3 DESIGN
3.1 Goals and Assumptions
We envision OSSPolice as a webservice (or a standalone tool) for
mobile app developers that quickly compares their apps against a
database of hundreds of thousands of OSS sources in view of iden-
tifying free software license violations as well as known vulnerable
OSS being used.
Binary clone detection. Various approaches have been proposed
to measure the similarity of two binaries [28, 30, 33, 60, 73, 90, 98].
Nonetheless, detection of software license violation entails both
legal and technical aspects. OSSPolice, focuses solely on the latter;
3
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2171Languages
C/C++
Java
Features
String literal
Exported function
Control-flow graph
String constant
Function name
Normalized class
Function Centroid
Control-flow graph
OP
✓
✓
✗
✓
✗
✓
✓
✗
BAT
✓
✓
✗
✓
✓
✗
✗
✗
LS
C
NA
NA
✗
✗
✓
✗
✗
✗
✗
✗
✓
✗
Table 1: Comparison of OSSPolice (OP) with state-of-the-art binary
clone detection systems, including BAT [39], LibScout (LS) [7], and
Centroid (C) [22]
its goal is to only collect statistical evidence suggesting a license
violation, not draw any legal conclusions. Similarly, OSSPolice is
not a system to discover new or existing security vulnerabilities. Its
goal is to only highlight the reuse of known vulnerable OSS versions
in apps, not to find or provide a concrete proof for vulnerabilities.
We provide detailed reasoning for these design choices in §7.
OSSPolice assumes that the violations have been caused inad-
vertently and do not constitute of deliberate software theft or piracy.
Therefore, it assumes that app binaries have not been tampered
with to defeat code reuse detection.
To this end, we set the following specific goals:
• Accurate detection of OSS versions being used in app bina-
ries,
• Collection of evidence suggesting license violations and pres-
ence of known vulnerable OSS versions,
• Efficient use of hardware resources, and
• Scalability to search against hundreds of thousands of OSS
sources (billions of lines of code).
3.2 Apps vs OSS
Android apps mainly contain two kinds of binaries: dalvik exe-
cutable (dex) files and native libraries. OSSPolice separately ana-
lyzes each binary type in an Android app and compares it against
OSS sources to detect specific versions being used.
Native Libraries. Native libraries are built directly for machine
architecture, such as ARM and x86 from C/C++ sources and loaded
on demand at runtime. App developers use native libraries in An-
droid apps for various reasons, such as code reuse, better perfor-
mance, or cross-platform development. One way to detect OSS
reuse in an app native library is to first build a native library from
subject OSS sources, which can then be compared with the tar-
get app library leveraging existing binary similarity measurement
techniques [23, 73, 98]. However, this approach suffers from the
following limitations. First, it implies automating the build of OSS
sources in order to be scalable, which is nontrivial if not impossible.
OSS written in low-level languages, such as C/C++ demand special-
ized build environment, including all dependencies, build tools, and
target-specific configuration. For example, native libraries present
in Android apps must be built using Android Native Development
Kit (NDK) toolchain. Consequently, automatically building a binary
from C/C++ OSS sources is not a one-step procedure; instead one
must follow complex build instructions to create the required build
environment. However, such specific build instructions may not be
4
available from the OSS developer as a part of the sources. Second,
even if we are able to successfully build OSS sources, the generated
OSS library may differ significantly from the target app library
because of different compilation flags (e.g., optimizations) or mis-
matching system configuration. For instance, system configuration
headers created during compilation time that capture the type (e.g.,
architecture data types, etc.) of the host system would be different
on disparate systems. To avoid such pitfalls, we directly compare
app native libraries to OSS sources.
Java Dex Files. Compared to native libraries, Android dex files
are built from Java sources and executed under a sandboxed Java
Virtual Machine runtime. Being amenable to reverse engineer-
ing, dex files are commonly obfuscated to hide proprietary de-
tails. In fact, the official Android development IDE, Android Studio
[35] is shipped with a built-in obfuscation tool, called ProGuard
[54], that removes unused code and renames classes, including
any fields and functions with semantically obscure names to hide
proprietary implementation details. For example, package name
com.google.android is renamed to a.g.c. OSSPolice is designed to
be resilient against common obfuscation techniques, such as identi-
fier renaming and control-flow randomization for analyzing Java
dex binaries. Although app developers can also adopt advanced
code obfuscation methods, such as string or class encryption and
reflection-based API hiding, we found such cases to be rare in our
dataset, possibly because such mechanisms incur high runtime
overhead.
3.3 Feature Selection
OSSPolice employs software similarity comparison to detect OSS
reuse. Specifically, when analyzing mobile app binaries, OSSPolice
uses software birthmarks [37] to compare their similarity to OSS
sources to accurately detect usage of OSS versions. A software
birthmark is a set of inherent features of a software that can be
used to identify it. In other words, if software X and Y have the same
or statistically similar birthmarks, then they, with high probability,
are copies of each other.
Selecting birthmarks (a.k.a. features) entails balancing perfor-
mance, scalability, and accuracy of software similarity detection;
depending upon the design goals, appropriate trade offs can be
made. For example, syntactic features, such as string literals are
easy to extract and are preserved in the binary, but can also be obfus-
cated (e.g., string encryption) to defeat detection. Simple syntactic
features are not reliable when applied to the problem of malware
clone detection and app repackaging detection. Past works targeting
such adversarial problems have, therefore, often employed program
dependency graph or dynamic analysis to defeat advanced evasion
techniques [17, 46, 90, 93, 95]. However, such semantic features are
not only difficult to extract correctly, but also consume overwhelm-
ingly high amount of CPU and memory resources, limiting system
scalability.
OSSPolice is neither a tool to find malware in apps nor does
it aim to detect deliberate software theft or piracy. We, therefore,
trade accuracy against code transformations to gain performance
and scalability in the design space. In particular, we assume that
app binaries have not been tampered with to evade OSS detection
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2172and rely on simple syntactical features, such as string literals and
functions for the purposes of comparing Android native binaries
against C/C++ OSS sources. Table 1 shows the list of all features
used by OSSPolice. The reasons for selecting them are many-fold.
Besides being easy to extract, we found these features to be stable
against code refactoring, precise enough to distinguish between
different OSS versions, and preserved (ASCII readable) even across
stripped libraries. During our analysis of 1.6 million free Google
Play Store Android apps, consisting of 271K native ARM libraries
(98.9% stripped) and we found that 85% of native libraries have more
than 50 features (strings and functions) preserved. We further found
that for most native libraries, the number of functions increases
linearly as the library size grows, which indicates that most of
the apps do not strip or hide functions in native libraries. In fact,
there are only 11.6% libraries that are larger than 40KB in size, but
have less than 50 visible functions. Finally, these features have been
widely used and proven effective in various binary clone detection
schemes [39, 50].
Similar syntactical features are used by OSSPolice to match app
dex files against Java OSS sources, namely string constants and class
signatures. However, to be resilient against common obfuscation
techniques, such as identifier renaming, we normalize classes before
producing their signatures in a way that they lose all user-defined
(custom) details, but retain their interactions with the common
framework API. Normalized classes have been proven to survive
ProGuard obfuscation process [7]. The signatures are derived in
two steps. First, all functions in a class are normalized by removing
everything except their argument list and return types and further
replacing non-framework types with a placeholder. Next, the re-
sulting normalized functions are sorted and hashed to get their
class signature. However, our analysis revealed that while string
constants and normalized class signatures can detect OSS reuse
in Java dex files, they are too weak to accurately detect Java OSS
versions. Thus, we also use function centroids [22] for additional
entropy. Centroid of a function is generated through a deterministic
traversal of its intra-procedural graph. It captures the control flow
characteristics of a function and generates its signature as a three
dimensional data point, representing basic block index, outgoing
degree, and loop depth. Computing and comparing function cen-
troids are, however, computationally expensive tasks. Therefore,
we defer them until the later phase of similarity detection and use
only to pinpoint OSS versions (§4).
To determine how unique these features are across OSS versions,
we also analyzed cross-version uniqueness of these features for
OSS collected by OSSCollector in §4, which contains 3K C++ and
5K Java software, totaling to 60K C/C++ and 77K Java versions, re-
spectively. We find that 83% of C/C++ and 41% of Java OSS versions
can be uniquely identified using the aforementioned features.
3.4 Similarly Detection
Given sets of features from app binaries (denoted by BI N ) and OSS
sources (denoted by OSS), a typical software similarity detection
scheme is to compare the two feature sets and compute a ratio-
based ( |OSS∩BI N |
) similarity score to detect OSS
usage. However, designing a large-scale similarity measurement
or |BI N∩OSS |
|OSS |
|BI N |
Figure 1: Real-world examples illustrating third-party code clones
across OSS source repos. Various node types are highlighted using
different colors.
system to accurately detect OSS reuse in app binaries presents its
own set of challenges.
3.4.1 Challenges. Here we first identify all the challenges we
faced and follow up with the mechanisms we introduced for ad-
dressing them.
Internal code clones. A known advantage of using OSS is code
reuse. OSS developers frequently reuse third-party OSS sources to
leverage existing functionality. Reused code is often cloned and
maintained internally, as a part of the OSS development sources
(e.g., to allow easy customizations, to ensure compatibility, etc.).
We refer to such nested third-party OSS clones as internal code
clones. Internal code cloning results in high code duplication across
OSS sources [62]. Therefore, a naïve database of OSS sources for
similarity search will not only impose high hardware requirements,
thereby hurting the system scalability, but also cause OSSPolice to
report false positive matches against the internal third-party code
clones. To understand why, let us look at source layouts of two
popular C/C++ OSS sources, namely MuPDF and OpenCV as depicted
in Figure 1. Both the repos contain code clones of LibPNG as a part
of their source trees. Consequently, when trying to match features
from LibPNG binary against LibPNG,MuPDF,OpenCV sources, all three
of them will be reported as matches, although LibPNG is the only
true positive match. Such false positives can result into incorrect
license violations if the true and the reported matched repos are
under different software licenses.
Partial OSS Builds. App developers may also choose to include
only partial functionality from an OSS. For example, sources that
are specific to one machine architecture (e.g., say x86) will not be
compiled into a binary targeted for a different architecture (e.g.,
arm). Many C/C++ OSS sources provide configure options to selec-
tively enable/disable architecture-specific functionality. Similarly,
some OSS sources may also contain source files and directories
that are not compiled into the target binary, such as examples and
testsuite. While such unused sources could potentially be identi-
fied by analyzing build scripts (e.g., gradle, Makefile, etc.), there
exists a number of build automation tools that will have to be sup-
ported by OSSPolice in order to correctly parse the build scripts
and filter out unused parts; yet, the process may remain error-prone.
Moreover, commonly used app shrinking tools, such as ProGuard
analyze Java dex bytecode and remove unused classes, fields, and
methods. While the binary remains functionally equivalent in such
cases, number of features preserved from source to binary may,
however, decrease significantly. We call these binaries partially built
binaries. When comparing features from such a binary (BI N ) with
features (OSS) from the corresponding OSS sources, the matching
ratio ( |BI N∩OSS |
) can be arbitrarily low even if all the elements
|OSS |
5
repodir     fileLibJPEGLibPNGMuPDFOpenCVsourcethirdparty3rdpartymodules/coretest-dev.cpppdf-lex.copengl.cpptest-io.cpppdffitztestsrcjpeglib.hpngtest.cpng.c……………Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2173from BI N are found in OSS. In fact, the more number of unused
features are detected, the lower is the matching score, indicating a
false negative match.
Fused app binaries. During the app build process, multiple bi-
naries from disparate OSS sources could be tightly coupled together
to generate a single app binary. For example, all Java class files in
Android app, including any imported OSS jars are compiled into a
single dex bytecode file (classes.dex). Similarly, multiple native
libraries built from various C/C++ OSS sources, could be statically
linked into a single shared library, thus blurring the boundaries
between them. In such multi-binary files, features across multiple
OSS components are effectively fused into a superset. We refer to
them as fused binaries. As such, in the example depicted by Figure 1,
MuPDF binary will also contain features from LibJPEG. As a result,
when matching fused feature set (BI N ) against a set of features
(OSS) from a single OSS, the matching ratio ( |BI N∩OSS |
) will be
arbitrarily low even though BI N includes all the elements of OSS.
In fact, the more number of disparate binaries are fused together,
the lower is the matching score, resulting into false negatives.
|BI N |
3.4.2 Mechanisms. For efficient and scalable lookup during
similarity comparison, OSSPolice maintains an indexing database
of features extracted from OSS sources. An intuitive approach to
indexing OSS sources is to consider each OSS as a document and
its features as words, and create a direct (inverted) mapping of
features to the target OSS (document). Figure 2a depicts the layout
of such an indexing database. BAT [39] uses a similar scheme to
maintain a database of features (string literals) extracted from OSS
sources. However, this approach assumes that each OSS (document)
is unique, and fails to consider large code duplication across OSS
sources due to internal code cloning (§3.4.1). Consequently, such a
naïve indexing scheme not only causes high false positives matches