 2017-11-29 23:23:36.572934+08 | template0 |     10 |        6 | en_US.UTF8 | en_US.UTF8 | t             | f            |           -1 |         13805 |          548 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}      
(3 rows)      
/var/lib/pgsql/.bash_profile: line 24: unalias: vi: not found      
waiting for server to shut down.... done      
server stopped      
```      
## 其他      
1、查看已有备份集      
```      
# zfs list -t snapshot      
NAME                  USED  AVAIL  REFER  MOUNTPOINT      
zp1/data01@20171129     0B      -  12.6M  -      
zp1/data01@20171128     0B      -  12.6M  -      
```      
2、主动删除备份集      
```      
# zfs destroy zp1/data01@20171128      
```      
3、根据已有快照克隆zfs      
```      
# zfs clone -o mountpoint=/test_recovery zp1/data01@20171128 zp1/test_recovery       
```      
4、删除克隆ZFS      
```      
# zfs destroy zp1/test_recovery       
```      
5、检查主备时间延迟      
```      
postgres=# select * from pg_stat_replication ;      
-[ RECORD 1 ]----+------------------------------      
pid              | 11697      
usesysid         | 16384      
usename          | rep      
application_name | walreceiver      
client_addr      | 111.111.111.223      
client_hostname  |       
client_port      | 53622      
backend_start    | 2017-11-29 22:46:17.806483+08      
backend_xmin     |       
state            | streaming      
sent_lsn         | 0/E06B9A30      
write_lsn        | 0/E06B9A30      
flush_lsn        | 0/E06B9A30      
replay_lsn       | 0/E06B9A30      
write_lag        |       
flush_lag        |       
replay_lag       |       
sync_priority    | 0      
sync_state       | async      
```      
6、检查主备LSN延迟      
```      
postgres=# select *, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), sent_lsn)) as sent_delay, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_insert_lsn(), replay_lsn)) as replay_delay from pg_stat_replication ;      
-[ RECORD 1 ]----+------------------------------      
pid              | 11697      
usesysid         | 16384      
usename          | rep      
application_name | walreceiver      
client_addr      | 111.111.111.223      
client_hostname  |       
client_port      | 53622      
backend_start    | 2017-11-29 22:46:17.806483+08      
backend_xmin     |       
state            | streaming      
sent_lsn         | 1/39D5C000      
write_lsn        | 1/39000000      
flush_lsn        | 1/39000000      
replay_lsn       | 1/37A58718      
write_lag        | 00:00:00.192577      
flush_lag        | 00:00:00.192577      
replay_lag       | 00:00:00.502927      
sync_priority    | 0      
sync_state       | async      
sent_delay       | 9650 kB      
replay_delay     | 44 MB      
```      
7、创建数据库    
```    
CREATE DATABASE name    
    [ [ WITH ] [ OWNER [=] user_name ]    
           [ TEMPLATE [=] template ]    
           [ ENCODING [=] encoding ]    
           [ LC_COLLATE [=] lc_collate ]    
           [ LC_CTYPE [=] lc_ctype ]    
           [ TABLESPACE [=] tablespace_name ]    
           [ ALLOW_CONNECTIONS [=] allowconn ]    
           [ CONNECTION LIMIT [=] connlimit ]    
           [ IS_TEMPLATE [=] istemplate ] ]    
```    
8、创建数据库模板    
```    
Command:     ALTER DATABASE    
Description: change a database    
Syntax:    
ALTER DATABASE name [ [ WITH ] option [ ... ] ]    
where option can be:    
    ALLOW_CONNECTIONS allowconn    
    CONNECTION LIMIT connlimit    
    IS_TEMPLATE istemplate    
ALTER DATABASE name RENAME TO new_name    
ALTER DATABASE name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }    
ALTER DATABASE name SET TABLESPACE new_tablespace    
ALTER DATABASE name SET configuration_parameter { TO | = } { value | DEFAULT }    
ALTER DATABASE name SET configuration_parameter FROM CURRENT    
ALTER DATABASE name RESET configuration_parameter    
ALTER DATABASE name RESET ALL    
postgres=# alter database postgres is_template true;    
ALTER DATABASE    
```    
9、从模板克隆数据库    
```    
create database newdb with template template_db;    
```    
8、创建用户    
```    
Command:     CREATE ROLE    
Description: define a new database role    
Syntax:    
CREATE ROLE name [ [ WITH ] option [ ... ] ]    
where option can be:    
      SUPERUSER | NOSUPERUSER    
    | CREATEDB | NOCREATEDB    
    | CREATEROLE | NOCREATEROLE    
    | INHERIT | NOINHERIT    
    | LOGIN | NOLOGIN    
    | REPLICATION | NOREPLICATION    
    | BYPASSRLS | NOBYPASSRLS    
    | CONNECTION LIMIT connlimit    
    | [ ENCRYPTED ] PASSWORD 'password'    
    | VALID UNTIL 'timestamp'    
    | IN ROLE role_name [, ...]    
    | IN GROUP role_name [, ...]    
    | ROLE role_name [, ...]    
    | ADMIN role_name [, ...]    
    | USER role_name [, ...]    
    | SYSID uid    
```    
9、创建schema    
```    
Command:     CREATE SCHEMA    
Description: define a new schema    
Syntax:    
CREATE SCHEMA schema_name [ AUTHORIZATION role_specification ] [ schema_element [ ... ] ]    
CREATE SCHEMA AUTHORIZATION role_specification [ schema_element [ ... ] ]    
CREATE SCHEMA IF NOT EXISTS schema_name [ AUTHORIZATION role_specification ]    
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION role_specification    
where role_specification can be:    
    user_name    
  | CURRENT_USER    
  | SESSION_USER    
```    
10、配置用户权限    
```    
Command:     GRANT    
Description: define access privileges    
Syntax:    
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }    
    [, ...] | ALL [ PRIVILEGES ] }    
    ON { [ TABLE ] table_name [, ...]    
         | ALL TABLES IN SCHEMA schema_name [, ...] }    
    TO role_specification [, ...] [ WITH GRANT OPTION ]    
......    
```    
11、配置库级别参数    
```    
Command:     ALTER DATABASE    
Description: change a database    
Syntax:    
ALTER DATABASE name [ [ WITH ] option [ ... ] ]    
where option can be:    
    ALLOW_CONNECTIONS allowconn    
    CONNECTION LIMIT connlimit    
    IS_TEMPLATE istemplate    
ALTER DATABASE name RENAME TO new_name    
ALTER DATABASE name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }    
ALTER DATABASE name SET TABLESPACE new_tablespace    
ALTER DATABASE name SET configuration_parameter { TO | = } { value | DEFAULT }    
ALTER DATABASE name SET configuration_parameter FROM CURRENT    
ALTER DATABASE name RESET configuration_parameter    
ALTER DATABASE name RESET ALL    
```    
12、配置用户级别参数    
```    
Command:     ALTER ROLE    
Description: change a database role    
Syntax:    
ALTER ROLE role_specification [ WITH ] option [ ... ]    
where option can be:    
      SUPERUSER | NOSUPERUSER    
    | CREATEDB | NOCREATEDB    
    | CREATEROLE | NOCREATEROLE    
    | INHERIT | NOINHERIT    
    | LOGIN | NOLOGIN    
    | REPLICATION | NOREPLICATION    
    | BYPASSRLS | NOBYPASSRLS    
    | CONNECTION LIMIT connlimit    
    | [ ENCRYPTED ] PASSWORD 'password'    
    | VALID UNTIL 'timestamp'    
ALTER ROLE name RENAME TO new_name    
ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT }    
ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT    
ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] RESET configuration_parameter    
ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] RESET ALL    
where role_specification can be:    
    role_name    
  | CURRENT_USER    
  | SESSION_USER    
```    
13、配置函数级别参数    
```    
Command:     ALTER FUNCTION    
Description: change the definition of a function    
Syntax:    
ALTER FUNCTION name [ ( [ [ argmode ] [ argname ] argtype [, ...] ] ) ]    
    action [ ... ] [ RESTRICT ]    
ALTER FUNCTION name [ ( [ [ argmode ] [ argname ] argtype [, ...] ] ) ]    
    RENAME TO new_name    
ALTER FUNCTION name [ ( [ [ argmode ] [ argname ] argtype [, ...] ] ) ]    
    OWNER TO { new_owner | CURRENT_USER | SESSION_USER }    
ALTER FUNCTION name [ ( [ [ argmode ] [ argname ] argtype [, ...] ] ) ]    
    SET SCHEMA new_schema    
ALTER FUNCTION name [ ( [ [ argmode ] [ argname ] argtype [, ...] ] ) ]    
    DEPENDS ON EXTENSION extension_name    
where action is one of:    
    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT    
    IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF    
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER    
    PARALLEL { UNSAFE | RESTRICTED | SAFE }    
    COST execution_cost    
    ROWS result_rows    
    SET configuration_parameter { TO | = } { value | DEFAULT }    
    SET configuration_parameter FROM CURRENT    
    RESET configuration_parameter    
    RESET ALL    
```    
14、配置表级别参数    
```    
Command:     ALTER TABLE    
Description: change the definition of a table    
Syntax:    
ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ]    
    action [, ... ]    
ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ]    
    RENAME [ COLUMN ] column_name TO new_column_name    
ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ]    
    RENAME CONSTRAINT constraint_name TO new_constraint_name    
ALTER TABLE [ IF EXISTS ] name    
    RENAME TO new_name    
ALTER TABLE [ IF EXISTS ] name    
    SET SCHEMA new_schema    
ALTER TABLE ALL IN TABLESPACE name [ OWNED BY role_name [, ... ] ]    
    SET TABLESPACE new_tablespace [ NOWAIT ]    
ALTER TABLE [ IF EXISTS ] name    
    ATTACH PARTITION partition_name FOR VALUES partition_bound_spec    
ALTER TABLE [ IF EXISTS ] name    
    DETACH PARTITION partition_name    
where action is one of:    
    ADD [ COLUMN ] [ IF NOT EXISTS ] column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ]    
    DROP [ COLUMN ] [ IF EXISTS ] column_name [ RESTRICT | CASCADE ]    
    ALTER [ COLUMN ] column_name [ SET DATA ] TYPE data_type [ COLLATE collation ] [ USING expression ]    
    ALTER [ COLUMN ] column_name SET DEFAULT expression    
    ALTER [ COLUMN ] column_name DROP DEFAULT    
    ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL    
    ALTER [ COLUMN ] column_name ADD GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( sequence_options ) ]    
    ALTER [ COLUMN ] column_name { SET GENERATED { ALWAYS | BY DEFAULT } | SET sequence_option | RESTART [ [ WITH ] restart ] } [...]    
    ALTER [ COLUMN ] column_name DROP IDENTITY [ IF EXISTS ]    
    ALTER [ COLUMN ] column_name SET STATISTICS integer    
    ALTER [ COLUMN ] column_name SET ( attribute_option = value [, ... ] )    
    ALTER [ COLUMN ] column_name RESET ( attribute_option [, ... ] )    
    ALTER [ COLUMN ] column_name SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN }    
    ADD table_constraint [ NOT VALID ]    
    ADD table_constraint_using_index    
    ALTER CONSTRAINT constraint_name [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]    
    VALIDATE CONSTRAINT constraint_name    
    DROP CONSTRAINT [ IF EXISTS ]  constraint_name [ RESTRICT | CASCADE ]    
    DISABLE TRIGGER [ trigger_name | ALL | USER ]    
    ENABLE TRIGGER [ trigger_name | ALL | USER ]    
    ENABLE REPLICA TRIGGER trigger_name    
    ENABLE ALWAYS TRIGGER trigger_name    
    DISABLE RULE rewrite_rule_name    
    ENABLE RULE rewrite_rule_name    
    ENABLE REPLICA RULE rewrite_rule_name    
    ENABLE ALWAYS RULE rewrite_rule_name    
    DISABLE ROW LEVEL SECURITY    
    ENABLE ROW LEVEL SECURITY    
    FORCE ROW LEVEL SECURITY    
    NO FORCE ROW LEVEL SECURITY    
    CLUSTER ON index_name    
    SET WITHOUT CLUSTER    
    SET WITH OIDS    
    SET WITHOUT OIDS    
    SET TABLESPACE new_tablespace    
    SET { LOGGED | UNLOGGED }    
    SET ( storage_parameter = value [, ... ] )    
    RESET ( storage_parameter [, ... ] )    
    INHERIT parent_table    
    NO INHERIT parent_table    
    OF type_name    
    NOT OF    
    OWNER TO { new_owner | CURRENT_USER | SESSION_USER }    
    REPLICA IDENTITY { DEFAULT | USING INDEX index_name | FULL | NOTHING }    
and table_constraint_using_index is:    
    [ CONSTRAINT constraint_name ]    
    { UNIQUE | PRIMARY KEY } USING INDEX index_name    