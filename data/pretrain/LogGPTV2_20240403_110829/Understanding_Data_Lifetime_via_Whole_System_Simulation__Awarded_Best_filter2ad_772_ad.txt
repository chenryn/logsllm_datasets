proximately 4,096 further input “events” (keyboard
or mouse activities) have occurred.
• Data referenced by global variable recent keys.
This variable keeps track of the user’s last 100
keystrokes.
• Each character in the password, as a 1-character
Lisp string. Lisp function comint-read-noecho
accumulates the password string by converting each
character to a 1-character string, then concatenating
those strings. These strings are unreferenced and will
eventually be recycled by the garbage collector, al-
though when they will be erased is unpredictable (see
appendix A for further discussion).
• The entire password as a Lisp string. The password
is not cleared after it is sent to the subprocess. This
string is also unreferenced.
• Stack. Emacs implements Lisp function calls in terms
of C function calls, so the password remains on the
process stack until it is overwritten by a later function
call that uses as much stack.
• Three kernel buffers. When the user types keyboard
characters, they go into a struct tty struct
“ﬂip buffer” directly from interrupt context. The key
codes are then copied into a tty that Emacs reads, and
then into a second tty when Emacs passes the pass-
word to its shell subprocess.
The password typed can be recovered from any of these
tainted regions. The tainted strings are of particular
interest:
the Emacs garbage collector, as a side effect
of collecting unreferenced strings, will erase the ﬁrst 4
bytes (8 bytes, on 64-bit architectures) of a string. Thus,
several of the taints above would have shrunk or dis-
appeared entirely had we continued to use Emacs long
enough for the garbage collector to be invoked.
Finally,
as part of our
investigation, we dis-
covered that entering a special Emacs command
(view-lossage) soon after typing the password
would actually reveal it on-screen in plaintext form.
This behavior is actually documented in the Emacs de-
veloper documentation for comint-read-noecho,
which simply notes that “some people ﬁnd this wor-
rysome [sic].” Because this piece of advice is not in
the Emacs manual, a typical Emacs user would never
see it. The same developer documentation also says that,
“Once the caller uses the password, it can erase the pass-
word by doing (fillarray STRING 0),” which is
untrue, as we can see from the above list of taints.
4.1.4 Windows 2000 Workloads
To illustrate the generality of data lifetime problems, our
fourth experiment consisted of two workloads running
on Windows 2000.
We ﬁrst examined the process of logging into a Win-
dows 2000 machine. By tainting keyboard input while
typing the user’s password at Windows’ initial login dia-
log, we found at least two occurrences of the password in
memory after the login process was completed: a tainted
scancode representation and a unicode representation.
Our second workload mirrors the web login experi-
ment we ran with Mozilla on Linux (see section 4.1.1).
In this workload, we used Internet Explorer 5.0 under
Windows 2000. We again found a tainted scancode rep-
resentation of the password sitting in memory after the
login process was complete.
We have forgone further analysis as a lack of applica-
tion and OS source code limited our ability to diagnose
the cause of taints and discern how easily they could be
remedied.
4.2 Analysis of Results
This section discusses the results found in the previ-
ous sections and discusses the data lifetime implications
of each major class of tainting result found. For a more
in-depth discussion of the data lifetime implications of
different storage classes (e.g. stack, heap, dynamically
allocated vs. garbage collected), the reader should see
appendix A.
4.2.1 Circular Queues
Circular queues of events are common in software. Cir-
cular queue data structures are usually long-lived and of-
ten even statically allocated. Data in a circular queue
survives only as long as it takes the queue to wrap
around, although that may be a long time in a large or
inactive queue.
Our experiments uncovered three queues that handle
tainted data: the Linux kernel random number generator
batch processing queue (described in more detail in sec-
tion 4.2.4 below), XFree86’s event queue, and Emacs’
event queue.
In each case we encountered, tainted data was stored
in plaintext form while it awaited processing. More im-
portantly, in each case, after inputs were consumed, they
were simply left on the queue until they were eventu-
ally overwritten when the queue head wrapped around.
Because each queue processes keyboard input, these fac-
tors present a non-deterministic window of opportunity
for an attacker to discover keys typed, since keystrokes
are left in the queue even after they have been consumed.
We can signiﬁcantly reduce data lifetime in each of
the cases encountered simply by zeroing input after it
has been consumed. In section 4.3, we describe applica-
tion of such a ﬁx to Emacs.
4.2.2
I/O Buffers
Buffers are more transient and thus tend to be allocated
on the heap or, occasionally, the stack. Buffers are some-
times created for use in only a single context, as with the
case of kernel network buffers. In other cases, they sur-
vive as long as an associated object, as in the case of
kernel pipe buffers and some Apache input buffers.
Our experiments encountered many kinds of tainted
input and output buffer data. In the Mozilla experiment,
we found tainted tty buffers and Unix domain socket
buffers; in the Apache and Perl experiment, we found
tainted kernel network buffers, Apache input and output
buffers, kernel pipe buffers, and Perl ﬁle input buffers.
There is no simple bound on the amount of time be-
fore freed buffer data will be reallocated and erased.
Even if an allocator always prefers to reuse the most re-
cently freed block for new allocations (“LIFO”), some
patterns of allocate and free operations, such as a few
extra free operations in a sequence that tends to keep
the same amount of memory allocated, can cause sensi-
tive data to linger for excessive amounts of time. Doug
Lea’s malloc() implementation, used in glibc 2.x
and elsewhere, actually has far more complex behavior
that actually tends toward “FIFO” behavior in some cir-
cumstances (see Appendix A for more details). Heap
fragmentation can also extend sensitive data lifetime.
We can solve the problem of sensitive data in I/O
buffers by zeroing them when they are no longer needed.
Because relatively large I/O buffers of 4 kB or more are
often allocated even for a few bytes, only space in the
buffer that was actually ﬁlled with data should be ze-
roed.
4.2.3 Strings
Tainted strings appeared in the results of all three of our
experiments: in Mozilla, C++ string classes; in Perl, Perl
strings; in Emacs, Lisp strings.
String data tends to be allocated on the heap or, occa-
sionally, the stack. Strings are often used in operations
that copy data, such as concatenation or substring op-
erations. This can lead their contents to be replicated
widely in the heap and the stack.
This type of replication was especially prevalent in
the cases we encountered because of the high-level na-
ture of the string representations used. In each case, the
NS_IMETHODIMP
nsTextControlFrame::CheckFireOnChange()
{
nsString value;
GetText(&value);
//different fire onchange
if (!mFocusedValue.Equals(value))
{
mFocusedValue = value;
FireOnChange();
}
return NS_OK;
}
sensitive
In this example Mozilla needlessly
Figure 1:
replicates
string data in the heap.
nsString’s constructor allocates heap space and
GetText(&value) taints that data. This extra
copy is unnecessary merely to do a comparison.
programmer need not be aware of memory allocation
and copying. Indeed, Perl and Emacs Lisp provide no
obvious way to determine that string data has been real-
located and copied. Normally this is a convenience, but
for managing the lifetime of sensitive data it is a hazard.
We discovered that this problem is especially vexing
in Mozilla, because there are many easy pitfalls that can
end up making heap copies of strings. Figure 1 illus-
trates this situation with a snippet of code from Mozilla
that ends up making a heap copy of a string just to do
a string comparison (nsString is a string class that
allocates storage from the heap). This needlessly puts
another copy of the string on the heap and could have
been accomplished through a variety of other means as
fundamentally string comparison does not require any
additional allocation.
Because, like buffer data, tainted strings tend to oc-
cupy heap or stack space, the considerations discussed
in the previous section for determining how long freed
data will take to be cleared also apply to string data. In
practice the pattern of lifetimes is likely to differ, be-
cause buffers are typically ﬁxed in size whereas strings
vary widely.
4.2.4 Linux Random Number Generator
In both the Mozilla and Emacs experiments we discov-
ered tainted data in the Linux kernel associated with
its cryptographically secure random number generator
(RNG). The source of this tainting was keyboard input
which is used as a source of randomness. The locations
tainted fell into three categories.
First, the RNG keeps track of the user’s last keystroke
in static variable last scancode so that repeated
keystrokes from holding down a key are not used as
a source of randomness. This variable holds only one
keystroke and is overwritten on subsequent key press,
thus it is a source of limited concern.
Second,
to avoid doing expensive hash calcula-
the RNG stores plain-
tions in interrupt context,
text keystrokes
into a 256-entry circular queue
batch entropy pool and processes them later in a
batch. The same queue is used for batching other sources
of randomness, so the length of the window of opportu-
nity to recover data from this queue depends heavily on
workload, data lifetime could vary from seconds to min-
utes on a reasonably loaded system to hours or even days
on a system left suspended or hibernated.
Third, the RNG’s entropy pools are tainted. These
are of little concern, because data is added to the pools
only via “mixing functions” that would be difﬁcult or
impossible for an attacker to invert.
4.3 Treating the Taints
4.3.1 Mozilla
Mozilla makes no attempt to reduce lifetime of sensi-
tive form data, however, simple remedies exist which
can help signiﬁcantly.
First, uses of nsString for local variables (as
in Figure 1) can be replaced with variables of type
nsAutoString, a string class that derives buffer
space from the same storage class as the string itself,
thus, data in stack based storage will not be propagated
to the heap. This practice is actually recommended by
Mozilla coding guidelines, so the example code snippet
in Figure 1 ought to have incorporated this change.
One often legitimately needs to have a heap-allocated
string e.g. in string members of a dynamically allocated
object. Therefore, to reduce data lifetime in this case
classes should zero out their contents when they are de-
stroyed. This trivial change to the string class’s destruc-
tor signiﬁcantly reduces the lifetime of sensitive data,
without inducing any perceptible change in program per-
formance.
To evaluate the impact of this approach we added ze-
roing to string destructors in Mozilla, and reran our ex-
periments. We found this small change was very suc-
cessful in reducing both the amount of tainted data and
its lifetime. With this patch, the amount of tainted data in
Mozilla’s address space reduced in half, and taints from
destroyed string objects were completely eliminated.
Figure 2 illustrates this point by showing the amount
of tainted string data in Mozilla’s address space as a
function of time (as measured in tens of millions of in-
structions elapsed since the start of tainting). The spike
in both runs marks when the user has submitted the
web form containing their password. During this time,
Mozilla does considerable processing on the password:
forcing garbage collection after entering the password.
This had the desired effect: all of the tainted, unrefer-
enced Lisp strings were erased, as were all of the tainted
input buffer elements. We concluded that relatively sim-
ple changes to Emacs can have a signiﬁcant impact on
the lifetime of sensitive data entrusted to it.
5 Related Work
Previous work on whole system simulation for ana-
lyzing software has largely focused on studying perfor-
mance and providing a test bed for new hardware fea-
tures. Extensive work on the design of whole system
simulators including performance, extensibility, inter-
pretation of hardware level data in terms of higher level
semantics, etc. was explored in SimOS [22].
Dynamic binary translators which operate at the sin-
gle process level instead of the whole system level have
demonstrated signiﬁcant power for doing dynamic anal-
ysis of software [8]. These systems work as assembly-
to-assembly translators, dynamically instrumenting bi-
naries as they are executed, rather than as complete sim-
ulators. For example, Valgrind [19] has been widely
deployed in the Linux community and provides a wide
range of functionality including memory error detection
(`a la Purify [15]), data race detection, cache proﬁling,
etc. Somewhere between an full simulator and binary
translator is Hobbes [7], a single process x86 interpreter
that can detect memory errors and perform runtime type
checking. Hobbes and Valgrind both provide frame-
works for writing new dynamic analysis tools.
Dynamo [3] is an extremely fast binary translator,
akin to an optimizing JIT compiler intended to be run
during program deployment.
It has been used to per-
form dynamic checks to enhance security at runtime by
detecting deviations from normal execution patterns de-
rived via static analysis. This technique has been called
program shepherding [16]. It is particularly interesting
in that it combines static analysis with dynamic check-
ing.
These systems have a narrower scope than Taint-
Bochs as they operate on a single program level, but they
offer signiﬁcant performance advantages. That said, bi-
nary translators that can operate at the whole system
level with very high efﬁciency have been demonstrated
in research [31] and commercial [18] settings. The tech-
niques demonstrated in TaintBochs could certainly be
applied in these settings.
The term “tainting” has traditionally referred to tag-
ging data to denote that the data comes from an untrusted
source. Potential vulnerabilities are then discovered by
determining whether tainted data ever reaches a sensitive
sink. This of course differs from our use of taint infor-
mation, but the fundamental mechanism is the same. A
tainted tag may be literally be a bit associated with data,
Figure 2: A comparison of the amount of tainted
string data in the original Mozilla versus our modi-
ﬁed version. Our zero-on-free string remedy reduces
tainted string data by half in the steady state.
it is touched by GUI widgets, HTML form handling
code, and even the browser’s JavaScript engine.
String data is progressively deallocated by Mozilla as
it ﬁnishes the form submission process and begins load-
ing the next page. As Figure 2 shows, the amount of
tainted data is reduced by roughly half once Mozilla hits
a steady state. The difference between the original and
modiﬁed runs is entirely accounted for by garbage heap
data from Mozilla’s various string classes.
The baseline of tainted data bytes in the modiﬁed run
is accounted for by explicit char* copies made from
string classes. This means that our patch entirely elim-
inated tainted data resulting from destroyed string ob-
jects in our experiment, and highlighted the places where
Mozilla made dangerous explicit char* string copies.
4.3.2 Emacs
As with Mozilla, we modiﬁed Emacs to reduce the num-
ber of long-lived tainted regions. We made two changes
to its C source code, each of which inserted only a single
call to memset. First, we modiﬁed clear event, a
function called to clear input events as they are removed
from the input queue. The existing code only set events’
type codes to no event, so we added a line to zero the
remainder of the data.
Second, we modiﬁed sweep strings, called by