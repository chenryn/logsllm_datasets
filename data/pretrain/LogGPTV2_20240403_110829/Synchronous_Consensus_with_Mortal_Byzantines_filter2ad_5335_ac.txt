it holds that rcvpropr+1
p = πr+1
rcvdecr+1
Lemma 4.14. For every correct process that does not de-
cide before round r, it holds that line 38 evaluates to TRUE
in round r + 1.
= rcvpropr+1
p = f r+1
, and f r+1
, rcvdecr+1
.
p
[i] = †.
p
q
, πr+1
q
p
q
q
So far, we have shown that every correct process p that
does not decide before round r reaches line 39 in round
r +1. In the following, we have to show that after executing
line 39 in round r + 1 it holds that |W| > 0 at every p such
that p decides. To this end, we distinguish two cases: We
consider in Lemma 4.15 the case where at least one correct
process decides in a round before r + 1, and in Lemma 4.16
the other case, where no process has decided before.
Lemma 4.15. If at least one correct process decides be-
fore round r, then for every correct process p that does not
decide before round r, in round r + 1 it holds that |W| > 0.
Lemma 4.16. If no correct process decides before round r,
then for every correct process p that does not decide before
round r, in round r + 1 it holds that |W| > 0.
Lemma 4.14 implies that every correct process p that
does not decide before round r executes line 39 in round
r + 1. By Lemma 4.15 and Lemma 4.16, p executes line 39
in round r+1 so that |W| > 0 and consequently every p de-
cides in round r + 1. Thus, every correct process decides at
the latest in round r+1, and our Theorem 4.11 follows.
Theorem 4.17 (Halting). Every correct process halts.
Proof. We have to show that the expression of line 44 even-
tually evaluates to TRUE at every correct process p, i.e., that
eventually ∀i ∈ Π : rcvdecp[i] 6= ⊥.
By Theorem 4.11, all correct processes eventually de-
cide. After deciding — before halting — they send their de-
, decisionp) to all in every
cision value via (INFORM,
even numbered round in line 14. The decisions are then
written into rcvdecp[i] in line 25 such that eventually for all
correct processes i, rcvdecp[i] 6= ⊥ at every correct pro-
cess p. (Note that rcvdecp[i] is never reset to ⊥ for correct
processes i if it was set to some value once.)
The faulty processes eventually stop sending messages
such that missing messages will be detected at every correct
process, and in line 18, rcvdecp[i] ← † will be set for every
faulty process i at every correct process p. Consequently,
for all processes i, eventually rcvdecp[i] 6= ⊥ at every cor-
rect process p such that our lemma follows.
Corollary 4.18. Algorithm 1 solves consensus.
5. Lower Bounds
One property of our algorithm is that it is guaranteed to
decide only when all faulty processes have crashed. We
show that this is inherent to the problem, more speciﬁcally
inherent to the number of processes. Our failure model
is strictly stronger than the classic Byzantine model [20].
Thus, algorithms that solve consensus in the classic model
with n > 3t within t + 1 rounds [20] can be applied to our
model as well. In the following, we will show that when
one reduces n, it is not possible anymore to solve the prob-
lem in a ﬁxed number of rounds. We show that the round in
which the last correct process decides cannot be constant,
but depends on the failure pattern — a mapping of the set of
faulty processes to a set of integers representing the round
number in which the processes crash [13].
Theorem 5.1. In a system with up to t mortal Byzantine
faults, for every deterministic algorithm that solves consen-
sus if n > 2t and every c there exists at least one execution
where the ﬁrst faulty process crashes in round c and at least
one correct process decides in some round r ≥ c.
Proof. Consider by ways of contradiction that a consensus
algorithm A exists where in every possible execution of A
in which faults occur, all correct processes decide before the
ﬁrst faulty process crashes. At the time the correct processes
decide, the preﬁxes of these executions can be mapped one-
to-one to identical preﬁxes of executions of A in the pres-
ence of classic Byzantine faults. Thus, A also solves con-
sensus with classic Byzantine faults contradicting the lower
bound by Lamport, Shostak, and Pease [20] of n > 3t.
Corollary 5.2. There is no correct deterministic algorithm
that solves consensus in the presence of up to t ≥ n/3 mor-
tal Byzantine faults in a bounded number g(t) rounds, g be-
ing an arbitrary function on the upper bound on the number
of faulty processes.
After considering termination time, we now show that
our algorithm is optimal regarding the number of processes.
We show that no algorithm exists for 2t processes.
Theorem 5.3. There is no algorithm that solves consensus
in the presence of t mortal Byzantine faults if n = 2t.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Proof. Consider by contradiction that such an algorithm A
exists. And further consider a fault free execution E of A in
which t correct processes propose 0 and t correct processes
propose 1. Let in this execution p be a correct process that
proposes w ∈ {0, 1} and decides 1 − w, and let it decide
in round r. Such a process p must exist as both values are
proposed by correct processes and only one can be decided
upon by the agreement property of consensus.
Now consider executions of A where p is correct and p
is one of t correct processes that propose w and the remain-
ing t faulty processes behave as correct ones at least until
round r but (wrongly) propose 1 − w. There exists such an
execution Et that is at least up to round r for correct process
p locally indistinguishable from E. Thus p decides on 1− w
in round r. After round r all faulty processes crash such
that Et is an admissible execution in our model. However,
A violates validity in Et as p decides 1 − w although it was
not proposed by any correct process in Et which provides
the required contradiction to A solving consensus.
6. Reducing the Number of Processes
In the previous sections, we have shown that the reduc-
tion from the classical n > 3t bound for Byzantine faults
to n > 2t for mortal Byzantine faults already allows to
build cheaper systems (i.e., with less redundancy) in cer-
tain cases, even without a priori knowledge on the timing
behavior of faulty processes. If such knowledge exists, i.e.,
when it is known how long it takes until a faulty process
crashes, rc can be determined for every execution and our
previous algorithm terminates within a bounded number of
rounds. The question investigated in the remainder of the
paper is, whether such a priori knowledge on the behavior
of faulty processes allows to further reduce the system size,
and thus the system cost induced by mere redundancy pur-
poses. Our resulting fault models are inspired by the con-
cept of hardware monitors, which observe the behavior of
processes, can detect (some) faults, and are able to remove
a detected faulty process from the system within a known
bounded time as discussed in Sect. 2.
Deﬁnition 6.1. A fault which is detected by the hardware
monitor and which can cause the associated process to be
shut down is a lethal fault. A fault which does not cause the
associated process to be removed is a non-lethal fault.
We distinguish two failure models in the following. One
in which the faults associated to a process accumulate un-
til a given threshold is exceeded, which causes the removal
of the faulty process. And another one which allows a cer-
tain number of faults within a given time period and only
removes a faulty process if it creates too many faults too
closely together (i.e., within a given time window).
(O) Bounded Failure Occurrence. After a process has
exhibited lethal faults in x > 0 rounds, it fails within
0 ≤ y  0 out of z ≥ x rounds, it fails
within y rounds, 0 ≤ y  0 then
else
rcvpropp[i] = min W
rcvpropp[i] = ⊥
20: return rcvpropp[]
We assume in the following that, for communication, algo-
rithms use our full message exchange only.
Lemma 6.4. Under (O) or (R), if all communication is done
via ft fme(v) and all faults are lethal, then faulty pro-
cesses only appear omission faulty or crashed.
Proof. Consider one instance of our full message exchange
algorithm, and assume that at the end of it, correct pro-
cesses p and q both deliver a value for faulty process pf ,
that is, rcvpropp[pf ] 6= ⊥ and rcvpropq[pf ] 6= ⊥. Since
rcvpropi[pf ] 6= ⊥ ⇔ rcvi[pf ][k0] = rcvi[pf ][k00] for all
k0, k00 ∈ {1, ..., k}, if follows that p resp. q has received
k = x + y + 1 equal values rcvpropp[pf ] resp. rcvpropq[pf ]
from pf . However, pf can pollute at most x consecu-
tive rounds, which may be followed by at most y addi-
tional (possibly faulty) rounds before pf crashes. There-
fore, during one of the k rounds, pf must have followed
the algorithm and has sent correct messages to all pro-
cesses. Let vpf denote this correct value. It follows that
∃k0
: rcvp[pf ][k0] = rcvq[pf ][k0] = vpf and therefore
rcvpropp[pf ] = rcvpropq[pf ] = vpf , so both p and q de-
liver the same correct value vpf for faulty process pf .
Of course, some or all correct processes may not deliver
a value at all, for example if the faulty process commits a
send omission fault.
Theorem 6.5. If all faults are lethal, consensus with at
most t mortal Byzantine faulty processes requires n > t
processes.
Proof. From Lemma 6.4, we know that a faulty process
may appear at most send omission faulty, and consensus
with t send omission faults requires t+1 processes [25].
Note that apart from achieving consensus with t < n
faulty processes, our fault models also allow a bounded al-
gorithm execution time of k · (t + 1) rounds.
7. Non-lethal Faults
In certain applications, the assumption that a hardware
monitor can detect all kinds of faults (like in the previous