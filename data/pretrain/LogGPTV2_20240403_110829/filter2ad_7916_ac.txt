9、ParameterInterceptor vulnerability allows remote command execution
10、When using Struts 2 token mechanism for CSRF protection, token check may be
bypassed by misusing known session attributes：
11、Long request parameter names might significantly promote the effectiveness
of DOS attacks：
12、Showcase app vulnerability allows remote command execution：
13、A vulnerability, present in the includeParams attribute of the URL and
Anchor Tag, allows remote command execution：
14、A vulnerability introduced by forcing parameter inclusion in the URL and
Anchor Tag allows remote command execution, session access and manipulation
and XSS attacks： 
15、A vulnerability introduced by wildcard matching mechanism or double
evaluation of OGNL Expression allows remote command execution.：
16、A vulnerability introduced by manipulating parameters prefixed with
"action:"/"redirect:"/"redirectAction:" allows remote command execution：
18：A vulnerability introduced by manipulating parameters prefixed with
"redirect:"/"redirectAction:" allows for open redirects：
#### **Struts2漏洞利用详情：**
S2-001-S2-004：
S2-005：
S2-006：
S2-007：
S2-008：
S2-009：
S2-010：
S2-011-S2-015:
S2-016-S2-017：
##### 吐槽一下：
从来没有见过一个框架如此多的漏洞一个连官方修补没怎么用心的框架既有如此多的拥护者。大学和很多的培训机构都把SSH（Spring、Struts2、Hibernate）奉为JavaEE缺一不可的神话。在政府和大型企业中使用JavaWeb的项目中SSH架构体现的更是无处不在。刚开始找工作的出去面试基本上都问：SSH会吗？我们只招本科毕业精通SSH框架的。“？什么？Struts2不会？啥？还不是本科学历？很遗憾，
**我们公司更希望跟研究过SSH代码精通Struts MVC、Spring AOP DI OIC和Hibernate的人合作，您先回去等通知吧……**
”。多么标准的面试失败的结束语，我只想说：我去年买了个表！
在Struts2如此“权威”、“专制”统治下终于有一个比Struts2更轻盈、更精巧、更安全的框架开始逐渐的威胁着Struts神一样的地位，It’s
SpringMvc。
#### **Struts2 Debug：**
关于Struts2的漏洞分析网上已经铺天盖地了，因为一直做SpringMvc开发对Struts2并是怎么关注。不过有了上面的铺垫，分析下Struts2的逻辑并不难。这次就简单的跟一下S2-016的命令执行吧。
##### **Debug Tips：**
    F5：进入方法
    F6：单步执行
    F7：从当前方法中跳出，继续往下执行。
    F8：跳到下一个断点。
    其他：F3：进入方法内、Ctrl+alt+h查看当前方法在哪些地方有调用到。
这里还得从上面的Struts2的Filter说起,忘记了的回头看上面的：Struts2请求处理流程分析。
在Struts2项目启动的时候就也会去调用Ognl做初始化，启动后一切的Struts2的请求都会先经过Struts2的StrutsPrepareAndExecuteFilter过滤器（在早期的Struts里默认的是FilterDispatcher）。并从其doFilter开始处理具体的请求，完成Action映射和请求分发。
在Debug之前需要有Struts2的OGNL、Xwork还有Struts的代码。其中的xwork和Struts2的源代码可以在Struts2\struts-2.3.14\src下找到。
Ognl的源码在opensymphony的官方网站可以直接下载到。需要安装SVN客户端checkout下源码。
关联上源代码后可以在web.xml里面找到StrutsPrepareAndExecuteFilter哪行配置，直接Ctrl+左键点进去（或者直接在StrutsPrepareAndExecuteFilter上按F3快速进入到这个类里面去）。在StrutsPrepareAndExecuteFilter的77行行标处双击下就可以断点了。
至于在Eclipse里面怎么去关联源代码就不多说了，按照eclipse提示找到源代码所在的路径就行了，实在不懂就百度一下。一个正常的Action请求一般情况下是不会报错的。如：请求处理成功。在这样正常的请求中Ognl表达式找的是location。而注入Ognl表达式之后：
doFilter的前面几行代码在做初始化，而第84行就开始映射action了。而最新的S2-016就是因为不当的处理action映射导致OGNL注入执行任意代码的。F5进入PrepareOperations的findActionMapping方法。在findActionMapping里面会去调用先去获取一个容器然后再去映射具体的action。通过Dispatcher对象（org.apache.struts2.dispatcher）去获取Container。通过ActionMapper的实现类：org.apache.struts2.dispatcher.mapper.DefaultActionMapper调用getMapping方法，获取mapping。
在311行的handleSpecialParameters(request,
mapping);F5进入方法执行内部，这个方法在DefaultActionMapper类里边。
从请求当中获取我们提交的恶意Ognl代码：
handleSpecialParameters方法调用parameterAction.execute(key, mapping);：
F5进入parameterAction.execute：
执行完成之后的mapping可以看到lication已经注入了我们的Ognl表达式了：
当mapping映射完成后，会回到DefaultActionMapper调用上面处理后的mapping解析ActionName。
    return parseActionName(mapping)
这里拿到的name自然是test了。因为我们访问的只是test.action。不过在Struts2里面还可以用test!show.action即调用test内的show方法。
    parseNameAndNamespace(uri, mapping, configManager);
    handleSpecialParameters(request, mapping);
    return parseActionName(mapping);
parseActionName执行完成后回到之前的findActionMapping方法。然后把我们的mapping放到请求作用域里边，而mapping对应的键是：struts.actionMapping。此便完成了ActionMapping。那么StrutsPrepareAndExecuteFilter类的doFilter过滤器中的84行的ActionMapping也就完成了。
并不是说action映射完成后就已经执行了Ognl表达式了，而是在StrutsPrepareAndExecuteFilter类第91行的execute.executeAction(request,
response, mapping);执行完成后才会去执行我们的Ognl。
executeAction 在org.apache.struts2.dispatcher.ng的ExecuteOperations类。这个方法如下：
    /**
         * Executes an action
         * @throws ServletException
         */
        public void executeAction(HttpServletRequest request, HttpServletResponse response, ActionMapping mapping) throws ServletException {
            dispatcher.serviceAction(request, response, servletContext, mapping);
        }
Dispatcher应该是再熟悉不过了，因为刚才已经在dispatcher里面转悠了一圈回来。现在调用的是dispatcher的
serviceAction方法。
`public void serviceAction`(参数在上面executeAction太长了就不写了)：
Excute在`excuteorg.apache.struts2.dispatcher.ServletRedirectResult`类，具体方法如下：
    public void execute(ActionInvocation invocation) throws Exception {
            if (anchor != null) {
                anchor = conditionalParse(anchor, invocation);
            }
            super.execute(invocation);