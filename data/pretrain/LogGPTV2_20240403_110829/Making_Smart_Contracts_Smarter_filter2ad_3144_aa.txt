title:Making Smart Contracts Smarter
author:Loi Luu and
Duc-Hiep Chu and
Hrishi Olickel and
Prateek Saxena and
Aquinas Hobor
Making Smart Contracts Smarter
Loi Luu
National University of Singapore
PI:EMAIL
Duc-Hiep Chu
National University of Singapore
PI:EMAIL
Hrishi Olickel
Yale-NUS College
PI:EMAIL
Prateek Saxena
National University of Singapore
PI:EMAIL
ABSTRACT
Cryptocurrencies record transactions in a decentralized data
structure called a blockchain. Two of the most popular
cryptocurrencies, Bitcoin and Ethereum, support the fea-
ture to encode rules or scripts for processing transactions.
This feature has evolved to give practical shape to the ideas
of smart contracts, or full-ﬂedged programs that are run on
blockchains. Recently, Ethereum’s smart contract system
has seen steady adoption, supporting tens of thousands of
contracts, holding millions dollars worth of virtual coins.
In this paper, we investigate the security of running smart
contracts based on Ethereum in an open distributed network
like those of cryptocurrencies. We introduce several new se-
curity problems in which an adversary can manipulate smart
contract execution to gain proﬁt. These bugs suggest subtle
gaps in the understanding of the distributed semantics of the
underlying platform. As a reﬁnement, we propose ways to
enhance the operational semantics of Ethereum to make con-
tracts less vulnerable. For developers writing contracts for
the existing Ethereum system, we build a symbolic execution
tool called Oyente to ﬁnd potential security bugs. Among
19, 366 existing Ethereum contracts, Oyente ﬂags 8, 833 of
them as vulnerable, including the TheDAO bug which led
to a 60 million US dollar loss in June 2016. We also discuss
the severity of other attacks for several case studies which
have source code available and conﬁrm the attacks (which
target only our accounts) in the main Ethereum network.
1.
INTRODUCTION
Decentralized cryptocurrencies have gained considerable
interest and adoption since Bitcoin was introduced in 2009 [1].
At a high level, cryptocurrencies are administered publicly
by users in their network without relying on any trusted
parties. Users in a cryptocurrency network run a consen-
sus protocol to maintain and secure a shared ledger of data
(the blockchain). Blockchains were initially introduced for
peer-to-peer Bitcoin payments [1], but more recently, it has
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978309
Aquinas Hobor
Yale-NUS College&
National University of Singapore
PI:EMAIL
been used more broadly [2–4]. One prominent new use for
blockchains is to enable smart contracts.
A smart contract is a program that runs on the blockchain
and has its correct execution enforced by the consensus pro-
tocol [5]. A contract can encode any set of rules represented
in its programming language—for instance, a contract can
execute transfers when certain events happen (e.g. pay-
ment of security deposits in an escrow system). Accordingly,
smart contracts can implement a wide range of applications,
including ﬁnancial instruments (e.g., sub-currencies, ﬁnan-
cial derivatives, savings wallets, wills) and self-enforcing or
autonomous governance applications (e.g., outsourced com-
putation [6], decentralized gambling [7]).
A smart contract is identiﬁed by an address (a 160-bit
identiﬁer) and its code resides on the blockchain. Users in-
voke a smart contract in present cryptocurrencies by sending
transactions to the contract address. Speciﬁcally, if a new
transaction is accepted by the blockchain and has a con-
tract address as the recipient, then all participants on the
mining network execute the contract code with the current
state of the blockchain and the transaction payloads as in-
puts. The network then agrees on the output and the next
state of the contract by participating in a consensus proto-
col. Ethereum, a more recent cryptocurrency, is a promi-
nent Turing-complete smart contract platform [2]. Unlike
Bitcoin, Ethereum supports stateful contracts in which val-
ues can persist on the blockchain to be used in multiple
invocations.
In the last six months alone, roughly 15, 000
smart contracts have been deployed in the Ethereum net-
work, suggesting a steady growth in the usage of the plat-
form (see Figure 1). As Ethereum receives more public expo-
sure and other similar projects like Rootstock [8] and Coun-
terParty [9] emerge on top of the Bitcoin blockchain, we
expect the number of smart contracts to grow.
Security problems in smart contracts. Smart contracts
can handle large numbers of virtual coins worth hundreds of
dollars apiece, easily making ﬁnancial incentives high enough
to attract adversaries. Unlike traditional distributed appli-
cation platforms, smart contract platforms such as Ethereum
operate in open (or permissionless) networks into which arbi-
trary participants can join. Thus, their execution is vulner-
able to attempted manipulation by arbitrary adversaries—
a threat that is restricted to accidental failures in tradi-
tional permissioned networks such as centralized cloud ser-
vices [10, 11]. Although users in Ethereum have to follow a
predeﬁned protocol when participating in the network, we
show that there is considerable room for manipulation of
risk of not seeing real deployment.
If such a requirement
is unacceptable, we provide a tool called Oyente for users
to detect bugs in as a pre-deployment mitigation. Oyente
is a symbolic execution tool exclusively designed to analyze
Ethereum smart contracts. It follows the execution model
of Ethereum smart contracts [15] and directly works with
Ethereum virtual machine (EVM) byte code without ac-
cess to the high level representation (e.g., Solidity [16], Ser-
pent [17]). This design choice is vital because the Ethereum
blockchain only stores the EVM byte code of contracts, not
their source. Oyente is open source and will be available
for public use soon from our project page [18].
Evaluation. We ran Oyente on 19, 366 smart contracts
from the ﬁrst 1, 460, 000 blocks in Ethereum network and
found that 8, 833 contracts potentially have the documented
bugs. These contracts currently have a total balance of
about 3, 068, 654 million Ethers, approximately equivalent
to 30 million USD at the time of writing. Moreover, Oyente
can detect the infamous TheDAO bug, which caused a loss
of 60 million US dollars to TheDAO’s investors in June
2016 [19]. We further discuss our results and our veriﬁed
attack with one of the most active contracts of Ethereum
(aﬀecting only our own accounts), in Section 6.
Although we use Ethereum’s smart contracts throughout
this paper, Oyente and the security problems are largely
platform agnostic. We believe Oyente can be extended to
upcoming platforms such as CounterParty or Rootstock.
Contributions. This paper makes the following contribu-
tions.
• We document several new classes of security bugs in Ethereum
smart contracts.
• We formalize the semantics of Ethereum smart contracts
and propose recomendations as solutions for the docu-
mented bugs.
analyses Ethereum smart contracts to detect bugs.
• We provide Oyente, a symbolic execution tool which
• We run Oyente on real Ethereum smart contracts and
conﬁrmed the attacks in the real Ethereum network.
2. BACKGROUND
We give a brief introduction to smart contracts and their
execution model. Our discussion is restricted to most pop-
ular smart contract platform called Ethereum, but the se-
curity problems discussed in this paper may be of wider
application to other open distributed application platforms.
2.1 Consensus Protocol
Decentralized cryptocurrencies secure and maintain a shared
ledger of facts between a set of peer-to-peer network opera-
tors (or miners). Miners run a peer-to-peer consensus pro-
tocol called the Nakamoto consensus protocol. The shared
ledger is called a blockchain and is replicated by all miners.
The ledger is organized as a hash-chain of blocks ordered by
time, wherein each block has a set of facts, as shown in Fig-
ure 2. In every epoch, each miner proposes their own block
to update the blockchain. Miners can select a sequence of
new transactions to be included in the proposed block. At
a high level, Nakamoto consensus works by probabilistically
electing a leader among all the miners via a proof-of-work
puzzle [1]. The leader then broadcasts its proposed block
to all miners.
If the proposed block obeys a certain pre-
Figure 1: Number of smart contracts in Ethereum has increased
rapidly.
a smart contract’s execution by the network participants.
For example, Ethereum (and Bitcoin) allow network partic-
ipants (or miners) to decide which transactions to accept,
how to order transactions, set the block timestamp and so
on. Contracts which depend on any of these sources need to
be aware of the subtle semantics of the underlying platform
and explicitly guard against manipulation.
Unfortunately, the security of smart contracts has not
received much attention, although several anecdotal inci-
dents of smart contracts malfunctioning have recently been
reported,
including contracts that do not execute as ex-
pected [7, 12, 13] and/or that have locked away thousands of
dollars worth of virtual coins [7, 13]. In contrast to classical
distributed applications that can be patched when bugs are
detected, smart contracts are irreversible and immutable.
There is no way to patch a buggy smart contract, regardless
of its popularity or how much money it has, without revers-
ing the blockchain (a formidable task). Therefore, reasoning
about the correctness of smart contracts before deployment
is critical, as is designing a safe smart contract system.
In this paper, we document several new security ﬂaws of
Ethereum smart contracts and give examples of real-world
instances for each problem. These security ﬂaws make con-
tracts susceptible to abuse by several parties (including min-
ers and contracts’ users). We believe that these ﬂaws arise
in practice because of a semantic gap between the assump-
tions contract writers make about the underlying execution
semantics and the actual semantics of the smart contract
system. Speciﬁcally, we show how diﬀerent parties can ex-
ploit contracts which have diﬀering output states depending
on the order of transactions and input block timestamp. To
our knowledge, these semantic gaps have not been previ-
ously identiﬁed. We also document other serious but known
problems such as improperly handled aborts/exceptions and
logical ﬂaws. Previous work has discussed these conceptu-
ally, often with simple self-constructed examples [14]. In our
work, we study their impact on tens of thousands of real-life
contracts, showing how these vulnerabilities can be used to
sabotage or steal coins from benign users.
More importantly, our work emphasizes the subtle and/or
missing abstractions in smart contract semantics that lead
developers to a false sense of security. We propose reﬁne-
ments to Ethereum’s protocol that do not require changes
to existing smart contracts. However, such solutions do re-
quire all clients in the network to upgrade, thus running the
25.08.201515.09.201506.10.201525.10.201514.11.201504.12.201524.12.201513.01.201602.02.201621.02.201612.03.201629.03.201615.04.201603.05.201605000100001500020000DateNumberofsmartcontractsf u n c t i o n Puzzle () // c o n s t r u c t o r {
f u n c t i o n (){ // main code , runs at every i n v o c a t i o n
address public owner ;
bool public locked ;
uint public reward ;
bytes32 public diff ;
bytes public s o l u t i o n ;
owner = msg . sender ;
reward = msg . value ;
locked = false ;
diff = bytes32 ( 1 1 1 1 1 ) ; // pre - defined d i f f i c u l t y
1 c o n t r a c t Puzzle {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
Figure 3: A contract that rewards users who solve a computa-
tional puzzle.
msg . sender . send ( reward ); // send reward
s o l u t i o n = msg . data ;
locked = true ;
if ( locked ) throw ;
if ( sha256 ( msg . data )  0){ // submit a s o l u t i o n
if ( msg . sender == owner ){ // update reward
}}}}
}
if ( locked )
throw ;
owner . send ( reward );
reward = msg . value ;
}
else
modify the blockchain state σ, adding a new contract ac-
count in three following steps. First, a unique address for
the new contract is prepared. Then the contract’s private
storage is allocated and initialized by running the construc-
tor (i.e., Puzzle() function in Line 8). Finally, the executable
EVM code portion that corresponds to the anonymous func-
tion (Line 15 onwards) is associated with the contract.
Any transaction invoking this contract will execute the
anonymous function() (Line 15) by default. The informa-
tion of the sender, the value (amount of Ether sent to the
contract) and the included data of the invocation transaction
is stored in a default input variable called msg. For example,
the contract owner updates the reward variable by invoking
a transaction To with some Ether (i.e., in msg.value). Be-
fore updating the reward variable to the new value (Line 20),
the contract indeed sends back to the owner, an amount of
Ether that is equal to the current reward value (Line 19).
The result of To is a new state of Puzzle which has a diﬀerent
reward value. Similarly, users can submit their solution in
a diﬀerent transaction payload (e.g., msg.data) to claim the
reward (Line 22–29). If the solution is correct, the contract
sends the reward to the submitter (Line 26).
Gas system. By design, the smart contract is a mech-
anism to execute code distributively. To ensure fair com-
pensation for expended computation eﬀort, Ethereum pays
miners some fees proportional to the required computation.
Speciﬁcally, each instruction in the Ethereum bytecode has
a pre-speciﬁed amount of gas. When a user sends a transac-
tion to invoke a contract, she has to specify how much gas
she is willing to provide for the execution (called gasLimit)
as well as the price for each gas unit (called gasPrice). A
miner who includes the transaction in his proposed block
subsequently receives the transaction fee corresponding to
the amount of gas the execution actually burns multiplied
by gasPrice.
If some execution requires more gas than
gasLimit, the execution is terminated with an exception,
Figure 2: The blockchain’s design in popular cryptocurrencies
like Bitcoin and Ethereum. Each block consists of several trans-
actions.
deﬁned validity constraints, such as those ensuring mitiga-
tion of “double-spending” attacks, then all miners update
their ledger to include the new block. We exclude certain
details about the consensus protocol, such as the use of the
longest-chain rule for resolving probabilistic discrepancies in
leader election. Instead, we refer readers to the original Bit-
coin or Ethereum paper for details [1, 2].
A blockchain state σ is a mapping from addresses to ac-
counts; the state of an account at address γ is σ[γ]. While
Bitcoin only has normal accounts which hold some coins,
Ethereum additionally supports smart contract accounts which
have coins, executable code and persistent (private) stor-
age. Ethereum supports its own currency called Ether; users
can transfer coins to each other using normal transactions
as in Bitcoin, and additionally can invoke contracts using
contract-invoking transactions. Conceptually, Ethereum can
be viewed as a transaction-based state machine, where its
state is updated after every transaction. A valid transition
from σ to σ
2.2 Smart Contracts in Ethereum
, via transaction T is denoted as σ
T−→ σ
.
(cid:48)
(cid:48)
A smart contract (or contract for short) is an “autonomous
agent” stored in the blockchain, encoded as part of a “cre-
ation” transaction that introduces a contract to the blockchain.
Once successfully created, a smart contract is identiﬁed by
a contract address; each contract holds some amount of of
virtual coins (Ether), has its own private storage, and is
associated with its predeﬁned executable code. A contract