### Harness: PowerShell
#### Weaponization Made Easier (or at least easier)
**Rich Kelley (@RGKelley5)**

### Overview
This presentation is aimed at penetration testers, red teams, PowerShell enthusiasts, and Python enthusiasts. The primary goal is to simplify the process of PowerShell weaponization, which can often be cumbersome. The Harness toolset aims to make this task more manageable.

### About the Presenter
- **Background:** Computer science
- **Experience:**
  - Former US Air Force Communications Officer
  - Network engineer, software developer, and penetration tester
  - Currently focused on application penetration testing
- **Interests:**
  - Writing obscure utilities (e.g., pyhashcat, keyboard walk generators)

### Why Should You Care?
- **PowerShell's Role:** Often referred to as "Microsoftâ€™s Post-Exploitation Language" by @obsuresec.
- **Defensive Awareness:** It is crucial for defenders to understand the potential damage attackers can inflict using PowerShell alone.
- **Research Needs:** More research is needed in incident response related to malicious PowerShell use. For example, see DEF CON 22 presentations by Ryan Kazanciyan and Matt Hastings on investigating PowerShell attacks.

### The PowerShell Weaponization Problem
The challenge lies in getting your PowerShell scripts to run on target machines and effectively retrieving the results. As @harmj0y puts it, "How do you get your [PowerShell] scripts running on your target machines, and effectively get your results back?"

### Existing Solutions
While there are existing solutions, they may not be as seamless as desired:
- **RDP:** Copy/Paste or Import-Module
- **Remote Shell:** Call `powershell.exe`
- **Metasploit:** `exec_powershell` and Interactive PS Payloads
- **Cobalt Strike:** Beacon

### My Development Requirements
1. **Fully Interactive Remote PowerShell Console:** With the same capabilities as the native `powershell.exe`.
2. **Seamless Module Importation:** Ability to import modules across the network without issues.

### Demo Time!
Let's dive into a live demonstration of the Harness toolset.

### Under the Hood
#### Payload Requirements
- **.NET 3.0+**
- **PowerShell 2.0**
- **System.Management.Automation Assembly**

#### Tested On
- Windows 7
- Windows 8
- Windows 8.1
- Windows Server 2008 R2
- Windows Server 2012

#### Listener/Framework Requirements
- **Python 3.4**
- **Asyncio**
- **Linux** (Tested on Kali)

#### Why Python?
- **Learning Experience:** I wanted to explore Python further.
- **Preference:** I prefer Python over Ruby.
- **Portability:** The solution should be simple enough to port to a Metasploit module if needed.

### Detailed Workflow
#### Payload
```plaintext
Socket -> ps.BeginInvoke
while script not valid:
    accumulate
end
PS C:\>
script/cmd
Send results
ls
PS C:\> ls
Directory C:\
Mode: LastWriteTime
----- ---------------------
d---- 2/2/1015
```

#### Handler
```plaintext
Handler
PS C:\> ls
Under the hood
Payload
Handler
Socket -> ps.BeginInvoke
Inbound script -> True
PS C:\>
PS C:\> ^import-module script.ps1
Send results
Socket -> byte stream
PS C:\> ^import-module script.ps1
Directory C:\
Mode: LastWriteTime
----- ---------------------
d---- 2/2/1015
while !rcvd close signal:
    accumulate
end
```

### Questions?
Feel free to ask any questions or provide feedback.