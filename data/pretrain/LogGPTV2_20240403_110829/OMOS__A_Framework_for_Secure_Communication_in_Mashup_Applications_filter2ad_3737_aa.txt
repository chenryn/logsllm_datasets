title:OMOS: A Framework for Secure Communication in Mashup Applications
author:Saman Zarandioon and
Danfeng Yao and
Vinod Ganapathy
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
OMOS: A Framework for Secure Communication in Mashup Applications ∗
Saman Zarandioon
Danfeng (Daphne) Yao
Vinod Ganapathy
Department of Computer Science
Rutgers University
Piscataway, NJ 08854
{samanz,danfeng,vinodg}@cs.rutgers.edu
Abstract
Mashups are new Web 2.0 applications that seamlessly
combine contents from multiple heterogeneous data sources
into one integrated browser environment. The hallmark of
these applications is to facilitate dynamic information shar-
ing and analysis, thereby creating a more integrated and
convenient experience for end-users. As mashups evolve
into portals designed to offer convenient access to informa-
tion on critical domains, such as banking, shopping, invest-
ment, enterprise mashups, and web desktops, concerns to
protect clients’ personal information and trade secrets be-
come important, thereby motivating the need for strong se-
curity guarantees. We develop a security architecture that
provides high assurance on the mutual authentication, data
conﬁdentiality, and message integrity of mashup applica-
tions. In this paper, we describe the design and implementa-
tion of OpenMashupOS (OMOS), an open-source browser-
independent framework for secure inter-domain communi-
cation and mashup development.
1. Introduction
Mashup applications are emerging as a Web 2.0 tech-
nology to seamlessly combine contents from multiple het-
erogeneous data sources; their overall goal is to create a
more integrated and convenient experience for end users.
For example, http://mapdango.com is a mashup ap-
plication that integrates Google Maps data with relevant in-
formation from WeatherBug, Flickr, Eventful, etc. By en-
tering a location, the user is presented with an integrated
view of the weather of the location, events happening in sur-
rounding area, photos that others took in the area, and so on.
There are two main types of architectures for mashup ap-
∗This work has been supported in part by the Rutgers University Com-
puting Coordination Council Pervasive Computing Initiative Grant, Rut-
gers University Research Council Grant, and a grant from Rutgers School
of Arts and Science.
plications, namely, server-side and client-side architectures.
As the name indicates, server-side mashups integrate data
from different sources at the server-side, and return the ag-
gregated page to the client. For example, Facebook mashup
APIs are mainly based on server-side integration [8].
However, the main drawback of server-side mashups is
the requirement of complete trust on the mashup server by
the client. Typically, the client needs to delegate authoriza-
tion to the mashup server to act on its behalf.
In comparison, a client-side architecture, as illustrated
in Figure 1, enables consumers and service providers to
communicate within a browser, thus reduces the amount of
trust that one has to place on untrusted third-party integra-
tor. OpenSocial provides a client-side mashup API [17].
Throughout this paper, we focus on client-side mashup ar-
chitecture, as emerging mashup applications using AJAX
techniques hold the promise of the next technical wave of
the future [2]. AJAX, short for asynchronous JavaScript
with XML, is a technique that allows a Web page to retrieve
contents from the Web server and update the page asyn-
chronously using JavaScript. AJAX mashups are able to
present a rich user interface and interactive experience with
multiple data sources with minimal transmission delays.
Client-side mashup architectures allow information
mashup to happen within the client’s browser through the
use of JavaScript. A mashup application should be able
to access and integrate contents from different sources.
In general, there is a trade-off between the security and
functionality in today’s mashup applications.
In order to
achieve higher security guarantees, a source should not be
allowed to access contents of another domain. The frame
or iframe element in the current browsers realizes this
separation by forbidding one frame from accessing another
frame with a different source domain. However, frame envi-
ronments make it awkward for cross-frame communication
and thus information integration in mashups.
To address this problem, several client-side mashup ar-
chitectures have recently been proposed, including Mashu-
pOS [19], Subspace [11] and SMash [13].The main goal of
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.25
DOI 10.1109/ACSAC.2008.25
355
355
by shortening document.domain to a common sufﬁx and
passing a JavaScript object that can be used for secure com-
munication. The main drawback of this approach is that,
due to the same origin policy, the Web service running from
webservice.mashup.com, cannot use XMLHTTPRe-
quest to communicate with its resources on backend site
(webservice.com) and this restriction limits the use of
AJAX Web services.
However, none of these solutions provide a ﬂexible and
secure point-to-point inter-domain communication mecha-
nism that can be used in today’s browsers. In this paper, we
ﬁll in this gap by considering the following design goals:
• To be compatible with all major browsers without any
change or extension to the browsers.
• To provide a powerful abstraction that is ﬂexible and
easy to understand and use by mashup developers.
• To guarantee mutual authentication, data conﬁdential-
ity, and message integrity in mashup applications. (De-
ﬁned in Section 2.)
The novel features of our approach are as follows. First,
we present key-based protocol for secure asynchronous
point-to-pint inter-origin communication. Second, we sep-
arate communication layer from access control layer, there-
fore the framework can be used using different access con-
trol mechanism. Third, we present a layered communica-
tion abstraction for inter-frame communication fashioned
after the networking stacks that is both powerful to use and
easy to understand. Additionally, the framework does not
require any browser change, so it is a good candidate for
secure development of today’s mashup applications.
The following techniques, enable us to achieve all of our
design goals. Our key-based protocol satisﬁes the security
requirements and prevents attackers from phishing, forging,
tampering, and eavesdropping on cross-domain communi-
cations. Since we do not require new HTML elements,
OMOS is compatible with current browsers. The layered
abstraction hides implementation details from mashup de-
velopers and the API allows anyone to extend and improve
any part of the mashup framework. OMOS’ communica-
tion API and component-based development also make the
development of complex AJAX applications much easier.
(Reusable components are called mashlets in OMOS, Sec-
tion 2.)
An additional advantage gained by using our techniques
is that the mashup integrator (i.e., mashup site) need no
longer be trusted by all the content providers (i.e., web ser-
vices). This is possible because the frames from different
web services are able to directly and securely communicate
within the user’s browser. Therefore, with OMOS it is pos-
sible to create new types of mashup applications that may
involve and integrate sensitive and personal data without
Figure 1. Client-side mashup architecture.
The rectangle represents the browser on the
client’s local computer where contents from
heterogeneous data sources such as a.com
and b.com are mashed up.
these solutions is two-fold: to isolate content from different
sources in sandboxes, such as frames, and to achieve frame-
to-frame communication.
SMash [13] uses the concepts in publish-subscribe sys-
tems and creates an event hub abstraction that allows the
mashup integrator to securely coordinate and manage con-
tent and information sharing from multiple domains. The
mashup integrator (i.e., the event hub) is assumed to be
trusted by all the web services. The event hub implements
the access policies that governs the communication among
domains.
MashupOS [19] introduces a sophisticated abstraction
that enables web components from different domains to se-
curely communicate. OMash [6], inspired by MashupOS,
tries to simplify the abstraction and remove the reliance on
same origin policy (explained in Section 2). However, im-
plementing these abstractions requires adding new elements
to the HTML standard and changing browsers to support
them.
Subspace [11] suggests an efﬁcient
techniques for
www.mashup.com to use a JavaScript Web service from
webservice.com by sandboxing the Web service in a
frame that is originated from a throwaway sub-domain (e.g.
webservice.mashup.com) and communicating with it
356356
fully trusting the mashup integrator. For example, bank-
ing, shopping, and ﬁnancial planning applications contain
important personal information that users want to have high
assurance on the controlled sharing of data. Allowing dif-
ferent domains to communicate in a secure fashion mini-
mizes the potential risks of information exposure due to
corrupted websites such as compromised mashup integra-
tors, and untrusted contents from other data sources. We
have implemented and evaluated the performance of the
OMOS framework on four types of browsers. These initial
experiments show that the communication channels are able
to deliver high throughput without affecting the end user’s
browsing experience.
The paper is organized as follows. Basic concepts are de-
ﬁned in Section 2. The architecture and implementation of
OMOS framework are presented in Section 3. The security
analysis is in Section 4. In Section 5, we describe the ex-
perimental results. Related work is explained in Section 6.
We give the conclusions and future work in Section 7.
2 Deﬁnitions
We deﬁne mashlets, gadgets and mashup applications.
A mashlet is recursively deﬁned as a HTML frame host-
ing JavaScript service that contains zero or more mashlets.
The root mashlet is always visible and is usually called a
mashup container. Every mashlet is controlled by and loads
contents from its originating domain. Conceptually, mash-
lets are analogous to processes or daemons in the operat-
ing system, binary components (e.g COM/DCOM, DLL) in
component-based architectures or web service providers in
service oriented architectures (SOA). A gadget is a mash-
let that is visible in the browser. A mashup application is a
gadget that integrates data received from other mashlets 1.
Two most important aspects of mashup applications are
interaction and security. Interaction refers to the ability of
a mashlet to interact with its siblings, children, and parent
mashlets. Security requires that a mashlet should not be
able to access private information, such as DOM elements,
events, memory, and cookies, of any other mashlet that is
running under a different domain.
In particular, a mash-
let should not be able to listen to the communication be-
tween two other mashlets running under different domains.
We call this requirement data conﬁdentiality.
In today’s
browsers, the same origin policy (SOP) [18] is designed to
protect data conﬁdentiality of domains against each other;
in other words, SOP prevents documents or programs from
one origin to access or alter documents loaded from an-
other origin. SOP restrictions on JavaScript that govern the
access to inline frames (iframes) 2 forbid JavaScript in
one mashlet including the root mashlet to read or modify
1This deﬁnition concentrates on client-side mashups
2Frames that can be inserted within a block of texts.
the contents in another mashlet. However, SOP is restric-
tive and rigid for mashup applications in general. Mashlets
from different domains are isolated and cannot communi-
cate or interact unless speciﬁcally allowed. Most of exist-
ing mashup applications circumvent this restriction either
by creating server-side mashups, which is a less ﬂexible
approach, or by allowing complete access from other do-
mains. Recently, researchers also demonstrated the vulner-
abilities associated with carelessly attempting ﬁner-grained
origins [10].
Mutual authentication is another important security re-
quirement in cross-domain mashlet communication. We
deﬁne mutual authentication in mashup applications as the
requirement that two mashlets that are communicating with
each other must be able to verify each other’s domain name.
Mashup applications should also satisfy the message in-
tegrity requirement that means that any tampering of the
messages between two mashlets should be detected. OMOS
satisﬁes the three requirements of data conﬁdentiality, mu-
tual authentication, and message integrity, by leveraging the
security restrictions available in current browsers and by de-
veloping a lightweight key establishment protocol.
3 Architecture
OMOS
and
Implementation
of
In this section, we ﬁrst give an overview of OMOS, and
present its layered communication stack for inter-mashlet
communication. Finally, we present some important imple-
mentation details of our technique.
3.1 Overview
Our goal
is to support secure, asynchronous,
inter-
mashlet communication in browser environments. Much of
our design in OMOS is lead by existing inter-process com-
munications in networking, e.g., TCP. That is, we model
the cross-domain frame-to-frame interactions (i.e. a frame
communicating with another frame of a different domain) in
a manner similar to cross-domain process-to-process inter-
actions in networking paradigm. We develop a layered com-
munication model for the purpose of cross-domain frame-
to-frame communications that can be easily extended.
The OMOS framework can be viewed as a container for
mashlets that manages their construction, destruction and
resources, also provides them with services such as com-
munication, persistence, user interface, user authentication
and pub-sub messaging. Services that OMOS provides to
mashlets are analogous to services that operating systems
provide to desktop applications through well-deﬁned APIs.
OMOS runs entirely in the browser, requires no browser
plug-in, and supports all main stream browsers, including
357357
Firefox, Internet Explore, Safari, and Opera. Figure 2 illus-
trates how mashlets using OMOS interact.
Figure 2. Interactions between mashlets in
OMOS framework. Each mashlet connects to
the integrator using a socket connection that
OMOS uses to provide services to mashlets.
OMOS uses iframes to implement mashlets. For each
mashlet loaded from a distinct domain, existing SOP restric-
tion guarantees the conﬁdentiality and isolation of mash-
lets. Also OMOS provides mashlets with a ﬂexible, reli-
able, asynchronous and secure communication service that
guarantees data conﬁdentiality, data integrity, and mutual
authentication using a layered communication stack.
3.2 Layered Communication Stack