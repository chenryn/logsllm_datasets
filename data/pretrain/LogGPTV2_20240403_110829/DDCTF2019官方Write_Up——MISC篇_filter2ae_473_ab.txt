        p += pack(' TCP steam，其中有图片(PNG头)，搜索http contains
flag,http contains DDCTF没有信息。http contains
PNG发现三张图片，查看发现了一个interesting.png和upload.png,通过File -> export Object HTTP 和
010editor，可以拿到三张图片还有一些静态网站。
隐写分析，发现两张图片一样，猜测一张是图种，interesting.png是隐写后的图片，stegsolve分析，调整图片高度，和水印都没有结果，猜测跟upload.png有关系，是个key图样的图片，隐写分析通过调整图片高度，拿到key：gKvN4eEm。通过导出的静态网站中发现很多跟图片相关的网站，猜测可能是在线图片加解密，通过导出HTTP
Object的信息，http://tools.jb51.net/aideddesign/img_add_info可以加解密图片，测试在线解密interesting.png。key为gKvN4eEm
flag:flag+AHs-44444354467B786F6644646B65537537717335414443515256476D35464536617868455334377D+AH0-:
    print "44444354467B786F6644646B65537537717335414443515256476D35464536617868455334377D".decode("hex")
    #DDCTF{xofDdkeSu7qs5ADCQRVGm5FE6axhES47}
    flag:DDCTF{xofDdkeSu7qs5ADCQRVGm5FE6axhES47}
## 0x06：联盟决策大会
考点：secret sharing, shamir
题目描述：至少A,B同时大于等于三个成员一起才能打开密钥，则分析一共有两次秘密分享，第一次分成了三份，A,B各一份，然后A,B分别分成了五份，然后分给A,B成员。则两次恢复即可。脚本参考http://mslc.ctf.su/wp/plaidctf-2012-nuclear-launch-detected-150-password-guessing/，代码如下：
    import gmpy2
    from Crypto.Util.number import long_to_bytes,bytes_to_long
    p =0x85FE375B8CDB346428F81C838FCC2D1A1BCDC7A0A08151471B203CDDF015C6952919B1DE33F21FB80018F5EA968BA023741AAA50BE53056DE7303EF702216EE9
    f11 =0x60E455AAEE0E836E518364442BFEAB8E5F4E77D16271A7A7B73E3A280C5E8FD142D3E5DAEF5D21B5E3CBAA6A5AB22191AD7C6A890D9393DBAD8230D0DC496964
    f12 =0x6D8B52879E757D5CEB8CBDAD3A0903EEAC2BB89996E89792ADCF744CF2C42BD3B4C74876F32CF089E49CDBF327FA6B1E36336CBCADD5BE2B8437F135BE586BB1
    f14 =0x74C0EEBCA338E89874B0D270C143523D0420D9091EDB96D1904087BA159464BF367B3C9F248C5CACC0DECC504F14807041997D86B0386468EC504A158BE39D7
    f23 =0x560607563293A98D6D6CCB219AC74B99931D06F7DEBBFDC2AFCC360A12A97D9CA950475036497F44F41DC5492977F9B4A0E4C8E0368C7606B7B82C34F561525
    f24 =0x445CCE871E61AD5FDE78ECE87C42219D5C9F372E5BEC90C4C4990D2F37755A4082C7B52214F897E4EC1B5FB4A296DBE5718A47253CC6E8EAF4584625D102CC62
    f25 =0x4F148B40332ACCCDC689C2A742349AEBBF01011BA322D07AD0397CE0685700510A34BDC062B26A96778FA1D0D4AFAF9B0507CC7652B0001A2275747D518EDDF5
    pairs = []
    pairs += [(1, f11)]
    pairs += [(2, f12)]
    pairs += [(4, f14)]
    pairs2 = []
    pairs2 += [(3, f23)]
    pairs2 += [(4, f24)]
    pairs2 += [(5, f25)]
    res1 = 0
    for i, pair in enumerate(pairs):
        x, y = pair
        top = 1
        bottom = 1
        for j, pair in enumerate(pairs):
            if j == i:
                continue
            xj, yj = pair
            top = (top * (-xj)) % p
            bottom = (bottom * (x - xj)) % p
        res1 += (y * top * gmpy2.invert(bottom, p)) % p
        res1 %= p
    print res1
    res2 = 0
    for i, pair in enumerate(pairs2):
        x, y = pair
        top = 1
        bottom = 1
        for j, pair in enumerate(pairs2):
            if j == i:
                continue
            xj, yj = pair
            top = (top * (-xj)) % p
            bottom = (bottom * (x - xj)) % p
        res2 += (y * top * gmpy2.invert(bottom, p)) % p
        res2 %= p
    print res2
    pairs3 = [(1,res1),(2,res2)]
    res3 = 0