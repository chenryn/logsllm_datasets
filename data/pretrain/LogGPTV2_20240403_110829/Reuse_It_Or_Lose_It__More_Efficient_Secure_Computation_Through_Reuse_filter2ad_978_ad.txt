Correctness of Saved Values
Scenarios where either party enters incorrect values in the
next computation reduce to previously solved problems in
garbled circuits. If the generator does not use the correct
values, then it reduces to the problem of creating an incor-
rect garbled circuit. If the evaluator does not use the correct
saved values then it reduces to the problem of the evaluator
entering garbage values into the garbled circuit execution;
this would be caught by the output consistency check.
Abort on Check Failure
If any of the check circuits fail, the cloud reports the in-
correct check circuit to both the generator and evaluator. At
this point, the remaining computation and any saved values
must be abandoned. However, as is standard in SFE, the
cloud cannot abort on an incorrect evaluation circuit, even
when she knows that it is incorrect.
Concatenation of Incorrect Circuits
If the generator produces a single incorrect circuit and the
cloud does not abort, the generator learns that the circuit
was used for evaluation, and not as a check circuit. This leaks
no information about the input or output of the computa-
tion; to do that, the generator must corrupt a majority of
the evaluation circuits without modifying a check circuit. An
incorrect circuit that goes undetected in one execution has
no eﬀect on subsequent executions as long the total amount
of incorrect circuits is less than the majority of evaluation
circuits.
Using Multiple Evaluators
One of the beneﬁts of our outsourcing scheme is that the
state is saved at the generator and cloud allowing the use of
diﬀerent evaluators in each computation. Previously, it was
shown a group of users working with a single server using
2P-SFE was not secure against malicious adversaries, as a
malicious server and last k parties, also malicious, could re-
play their portion of the computation with diﬀerent inputs
and gain more information than they can with a single com-
putation [15]. However, this is not a problem in our system
as at least one of our servers, either the generator or cloud,
must be semi-honest due to non-collusion, which obviates
the attack stated above.
Threat Model
As we have many computations involving the same gen-
erator and cloud, we have to extend the threat model for
how the parties can act in diﬀerent computations. There can
be no collusion in each singular computation. However, the
malicious party can change between computations as long as
there is no chain of malicious users that link the generator
and cloud – this would break the non-collusion assumption.
6. PERFORMANCE EVALUATION
We now demonstrate the eﬃcacy of PartialGC through a
comparison with the CMTB outsourcing system. Apart from
the cut-and-choose from sS13, PartialGC provides other ben-
eﬁts through generating partial input values after the ﬁrst
execution of a program. On subsequent executions, the par-
tial inputs act to amortize overall costs of execution and
bandwidth.
We demonstrate that the evaluator in the system can be a
mobile device outsourcing computation to a more powerful
system. We also show that other devices, such as server-
class machines, can act as evaluators, to show the generality
of this system. Our testing environment includes a 64-core
server containing 1 TB of RAM, which we use to model
both the Generator and Outsourcing Proxy parties. We run
separate programs for the Generator and Outsourcing Proxy,
giving them each 32 threads. For the evaluator, we use a
Samsung Galaxy Nexus phone with a 1.2 GHz dual-core
ARM Cortex-A9 and 1 GB of RAM running Android 4.0,
connected to the server through an 802.11 54 Mbps WiFi
in an isolated environment. In our tests, which outsource
the computation from a single server process we create that
process on our 64-core server as well. We ran the CMTB
implementation for comparison tests under the same setup.
6.1 Execution Time
The PartialGC system is particularly well suited to com-
plex computations that require multiple stages and the sav-
ing of intermediate state. Previous garbled circuit execution
systems have focused on single-transaction evaluations, such
as computing the “millionaires” problem (i.e., a joint evalua-
tion of which party inputs a greater value without revealing
the values of the inputs) or evaluating an AES circuit.
Our evaluation considers two comparisons: the improve-
ment of our system compared with CMTB without reusing
saved values, and comparing our protocol for saving and
reusing values against CMTB if such reuse was implemented
in that protocol. We also benchmark the overhead for sav-
ing and loading values on a per-bit basis for 256 circuits, a
necessary number to achieve a security parameter of 2−80
in the malicious model. In all cases, we run 10 iterations of
each test and give timing results with 95% conﬁdence inter-
vals. Other than varying the number of circuits our system
parameters are set for 80-bit security.
The programs used for our evaluation are exemplars of
diﬀering input sizes and diﬀering circuit complexities:
Keyed Database: In this program, one party enters a data-
base and keys to it while the other party enters a key that
indexes into the database, receiving a database entry for that
key. This is an example of a program expressed as a small
circuit that has a very large amount of input.
Matrix Multiplication: Here, both parties enter 32-bit
numbers to ﬁll a matrix. Matrix multiplication is performed
before the resulting matrix is output to both parties. This
is an example of a program with a large amount of inputs
with a large circuit.
Edit (Levenstein) Distance: This program ﬁnds the dis-
tance between two strings of the same length and returns
the diﬀerence. This is an example of a program with a small
number of inputs and a medium sized circuit.
Millionaires: In this classic SFE program, both parties en-
ter a value, and the result is a one-bit output to each party
to let them know whether their value is greater or smaller
than that of the other party. This is an example of a small
circuit with a large amount of input.
Gate counts for each of our programs can be found in Ta-
ble 1. The only diﬀerence for the programs described above
is the additional of a MAC function in PartialGC. We dis-
cuss the reason for this check in Section 6.4.
Table 2 shows the results from our experimental tests. In
the best case, execution time was reduced by a factor of
32 over CMTB, from 1200 seconds to 38 seconds, a 96%
KeyedDB 64
KeyedDB 128
KeyedDB 256
MatrixMult8x8
Edit Distance 128
Millionaires 8192
LCS Incremental 128
LCS Incremental 256
LCS Incremental 512
LCS Full 128
LCS Full 256
CMTB
6,080
12,160
24,320
3,060,802
1,434,888
49,153
4,053,870
8,077,676
16,125,291
2,978,854
13,177,739
PartialGC
20,891
26,971
39,131
3,305,113
1,464,490
78,775
87,236
160,322
306,368
-
-
Table 1: Non-XOR gate counts for the various circuits. In the
ﬁrst 6 circuits, the diﬀerence between CMTB and PartialGC
gate counts is in the consistency checks. The explanation
for the diﬀerence in size between the incremental versions of
longest common substring (LCS) is given in Reusing Values.
speedup over CMTB. Ultimately, our results show that our
system outperforms CMTB when the input checks are the
bottleneck. This run-time improvement is due to improve-
ments we added from sS13 and occurs in the keyed database,
millionaires, and matrix multiplications programs. In the
other program, edit distance, the input checks are not the
bottleneck and PartialGC does not outperform CMTB. The
total run-time increase for the edit distance problem is due
to overhead of using the new sS13 OT cut-and-choose tech-
nique which requires sending each gate to the evaluator for
check circuits and evaluation circuits. This is discussed fur-
ther in Section 6.4. The typical use case we imagine for our
system, however, is more like the keyed database program,
which has a large amount of inputs and a very small circuit.
We expand upon this use case later in this section.
Reusing Values
For a test of our system’s wire saving capabilities we tested
a dynamic programming problem, longest common substring,
in both PartialGC and CMTB. This program determines
the length of the longest common substring between two
strings. Rather than use a single computation for the solu-
tion, our version incrementally adds a single bit of input to
both strings each time the computation is run and outputs
the results each time to the evaluator. We believe this is
a realistic comparison to a real-world application that in-
crementally adds data during each computation where it is
faster to save the intermediate state and add to it after see-
ing an intermediate result than rerun the entire computation
many times after seeing the result.
For our testing, PartialGC uses our technique to reuse
wire values. In CMTB, we save each desired internal bit
under a one-time pad and re-enter them into the next com-
putation, as well as the information needed to decrypt the
ciphertext. We use a MAC (the AES circuit of KSS12) to
verify that the party saving the output bits did not modify
them. We also use AES to generate a one-time pad inside
the garbled circuit. We use AES as this is the only cryp-
tographically secure function used in CMTB. Both parties
enter private keys to the MAC functions. This program is
labeled CMTB-Inc, for CMTB incremental. The size of this
program represents the size of the total strings. We also cre-
ated a circuit that computes the complete longest common
substring in one computation labeled CMTB-Full.
The resulting size of the PartialGC and CMTB circuits
are shown in Table 1, and the results are shown in Figure 4.
This result shows that saving and reusing values in Par-
tialGC is more eﬃcient than completely rerunning the com-
KeyedDB 64
KeyedDB 128
KeyedDB 256
MatrixMult8x8
Edit Distance 128
Millionaires 8192
16 Circuits
CMTB
PartialGC
18 ± 2% 3.5 ± 3%
5.1x
33 ± 2% 4.4 ± 8%
7.5x
65 ± 2% 4.6 ± 2%
14x
48 ± 4% 46 ± 4%
1.0x
21 ± 6% 22 ± 3% 0.95x
35 ± 3% 7.3 ± 6%
4.8x
64 Circuits
PartialGC
CMTB
8.3 ± 5%
72 ± 2%
8.7x
140 ± 2% 9.5 ± 4%
15x
270 ± 1% 12 ± 6%
23x
110 ± 8% 100 ± 7% 1.1x
47 ± 7%
50 ± 9% 0.94x
140 ± 2% 20 ± 2%
7.0x
256 Circuits
PartialGC
CMTB
26 ± 2%
290 ± 2%
11x
31 ± 3%
580 ± 2%
19x
1200 ± 3% 38 ± 5%
32x
400 ± 10% 370 ± 5% 1.1x
120 ± 9% 180 ± 6% 0.67x
580 ± 1%
8.3x
70 ± 2%
Table 2: Timing results comparing PartialGC to CMTB without saving any values. All times in seconds.
KeyedDB 64
KeyedDB 128
KeyedDB 256
MatrixMult8x8
Edit Distance 128
Millionaires 8192
256 Circuits
CMTB PartialGC
3590416
3590416
3590416
35027980
4108045
67071757
64992308
129744948
259250228
71238860
2615651
155377267
18x
36x
72x
2.0x
0.64x
2.3x
Table 3: Bandwidth comparison of CMTB and PartialGC.
Bandwidth counted by instrumenting PartialGC to count
the bytes it was sending and receiving and then adding them
together. Results in bytes.
both edit distance and matrix multiplication programs ben-
eﬁt from higher computational power and their bottlenecks
on a server are no longer input consistency; as a result, they
execute faster in CMTB than in PartialGC.
6.2 Bandwidth
Since the main reason for outsourcing a computation is
to save on resources, we give results showing a decrease in
the evaluator’s bandwidth. Bandwidth is counted by making
the evaluator to count the number of bytes PartialGC sends
and receives to either server. Our best result gives a 98%
reduction in bandwidth (see Table 3). For the edit distance,
the extra bandwidth used in the outsourced oblivious trans-
fer for all circuits, instead of only the evaluation circuits,
exceeds any beneﬁt we would otherwise have received.
6.3 Secure Friend Finder