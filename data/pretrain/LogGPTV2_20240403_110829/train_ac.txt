.br open (2)
and
.br mmap (2),
the following may also be returned:
.tp
.b eacces
the library specified by
.i library
does not have read or execute permission, or the caller does not have
search permission for one of the directories in the path prefix.
(see also
.br path_resolution (7).)
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enoexec
the file specified by
.i library
is not an executable of a known type;
for example, it does not have the correct magic numbers.
.sh conforming to
.br uselib ()
is linux-specific, and should not be used in programs
intended to be portable.
.sh notes
this obsolete system call is not supported by glibc.
no declaration is provided in glibc headers, but, through a quirk of history,
glibc versions before 2.23 did export an abi for this system call.
therefore, in order to employ this system call,
it was sufficient to manually declare the interface in your code;
alternatively, you could invoke the system call using
.br syscall (2).
.pp
in ancient libc versions (before glibc 2.0),
.br uselib ()
was used to load
the shared libraries with names found in an array of names
in the binary.
.\" .pp
.\" .\" libc 4.3.1f - changelog 1993-03-02
.\" since libc 4.3.2, startup code tries to prefix these names
.\" with "/usr/lib", "/lib" and "" before giving up.
.\" .\" libc 4.3.4 - changelog 1993-04-21
.\" in libc 4.3.4 and later these names are looked for in the directories
.\" found in
.\" .br ld_library_path ,
.\" and if not found there,
.\" prefixes "/usr/lib", "/lib" and "/" are tried.
.\" .pp
.\" from libc 4.4.4 on only the library "/lib/ld.so" is loaded,
.\" so that this dynamic library can load the remaining libraries needed
.\" (again using this call).
.\" this is also the state of affairs in libc5.
.\" .pp
.\" glibc2 does not use this call.
.pp
since linux 3.15,
.\" commit 69369a7003735d0d8ef22097e27a55a8bad9557a
this system call is available only when the kernel is configured with the
.b config_uselib
option.
.sh see also
.br ar (1),
.br gcc (1),
.br ld (1),
.br ldd (1),
.br mmap (2),
.br open (2),
.br dlopen (3),
.br capabilities (7),
.br ld.so (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/pthread_mutexattr_setrobust.3
.\" copyright 2001 john levon 
.\" based on mkstemp(3), copyright 1993 david metcalfe (PI:EMAIL)
.\" and gnu libc documentation
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.th mkdtemp 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
mkdtemp \- create a unique temporary directory
.sh synopsis
.nf
.b #include 
.pp
.bi "char *mkdtemp(char *" template );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br mkdtemp ():
.nf
    /* since glibc 2.19: */ _default_source
        || /* glibc 2.19 and earlier: */ _bsd_source
        || /* since glibc 2.10: */ _posix_c_source >= 200809l
.fi
.sh description
the
.br mkdtemp ()
function generates a uniquely named temporary
directory from \fitemplate\fp.
the last six characters of \fitemplate\fp
must be xxxxxx and these are replaced with a string that makes the
directory name unique.
the directory is then created with
permissions 0700.
since it will be modified,
.i template
must not be a string constant, but should be declared as a character array.
.sh return value
the
.br mkdtemp ()
function returns a pointer to the modified template
string on success, and null on failure, in which case
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
the last six characters of \fitemplate\fp were not xxxxxx.
now \fitemplate\fp is unchanged.
.pp
also see
.br mkdir (2)
for other possible values for \fierrno\fp.
.sh versions
available since glibc 2.1.91.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mkdtemp ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2008.
this function is present on the bsds.
.\" as at 2006, this function is being considered for a revision of posix.1
.\" also in netbsd 1.4.
.sh see also
.br mktemp (1),
.br mkdir (2),
.br mkstemp (3),
.br mktemp (3),
.br tempnam (3),
.br tmpfile (3),
.br tmpnam (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/unimplemented.2
.so man3/printf.3
.\" copyright (c) 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th sem_overview 7 2020-06-09 "linux" "linux programmer's manual"
.sh name
sem_overview \- overview of posix semaphores
.sh description
posix semaphores allow processes and threads to synchronize their actions.
.pp
a semaphore is an integer whose value is never allowed to fall below zero.
two operations can be performed on semaphores:
increment the semaphore value by one
.rb ( sem_post (3));
and decrement the semaphore value by one
.rb ( sem_wait (3)).
if the value of a semaphore is currently zero, then a
.br sem_wait (3)
operation will block until the value becomes greater than zero.
.pp
posix semaphores come in two forms: named semaphores and
unnamed semaphores.
.tp
.b named semaphores
a named semaphore is identified by a name of the form
.ir /somename ;
that is, a null-terminated string of up to
.bi name_max \-4
(i.e., 251) characters consisting of an initial slash,
.\" glibc allows the initial slash to be omitted, and makes
.\" multiple initial slashes equivalent to a single slash.
.\" this differs from the implementation of posix message queues.
followed by one or more characters, none of which are slashes.
.\" glibc allows subdirectory components in the name, in which
.\" case the subdirectory tree must exist under /dev/shm, and
.\" the fist subdirectory component must exist as the name
.\" sem.name, and all of the subdirectory components must allow the
.\" required permissions if a user wants to create a semaphore
.\" object in a subdirectory.
two processes can operate on the same named semaphore by passing
the same name to
.br sem_open (3).
.ip
the
.br sem_open (3)
function creates a new named semaphore or opens an existing
named semaphore.
after the semaphore has been opened, it can be operated on using
.br sem_post (3)
and
.br sem_wait (3).
when a process has finished using the semaphore, it can use
.br sem_close (3)
to close the semaphore.
when all processes have finished using the semaphore,
it can be removed from the system using
.br sem_unlink (3).
.tp
.b unnamed semaphores (memory-based semaphores)
an unnamed semaphore does not have a name.
instead the semaphore is placed in a region of memory that
is shared between multiple threads (a
.ir "thread-shared semaphore" )
or processes (a
.ir "process-shared semaphore" ).
a thread-shared semaphore is placed in an area of memory shared
between the threads of a process, for example, a global variable.
a process-shared semaphore must be placed in a shared memory region
(e.g., a system v shared memory segment created using
.br shmget (2),
or a posix shared memory object built created using
.br shm_open (3)).
.ip
before being used, an unnamed semaphore must be initialized using
.br sem_init (3).
it can then be operated on using
.br sem_post (3)
and
.br sem_wait (3).
when the semaphore is no longer required,
and before the memory in which it is located is deallocated,
the semaphore should be destroyed using
.br sem_destroy (3).
.pp
the remainder of this section describes some specific details
of the linux implementation of posix semaphores.
.ss versions
prior to kernel 2.6, linux supported only unnamed,
thread-shared semaphores.
on a system with linux 2.6 and a glibc that provides the nptl
threading implementation,
a complete implementation of posix semaphores is provided.
.ss persistence
posix named semaphores have kernel persistence:
if not removed by
.br sem_unlink (3),
a semaphore will exist until the system is shut down.
.ss linking
programs using the posix semaphores api must be compiled with
.i cc \-pthread
to link against the real-time library,
.ir librt .
.ss accessing named semaphores via the filesystem
on linux, named semaphores are created in a virtual filesystem,
normally mounted under
.ir /dev/shm ,
with names of the form
.ir \fbsem.\fpsomename .
(this is the reason that semaphore names are limited to
.bi name_max \-4
rather than
.b name_max
characters.)
.pp
since linux 2.6.19, acls can be placed on files under this directory,
to control object permissions on a per-user and per-group basis.
.sh notes
system v semaphores
.rb ( semget (2),
.br semop (2),
etc.) are an older semaphore api.
posix semaphores provide a simpler, and better designed interface than
system v semaphores;
on the other hand posix semaphores are less widely available
(especially on older systems) than system v semaphores.
.sh examples
an example of the use of various posix semaphore functions is shown in
.br sem_wait (3).
.sh see also
.br sem_close (3),
.br sem_destroy (3),
.br sem_getvalue (3),
.br sem_init (3),
.br sem_open (3),
.br sem_post (3),
.br sem_unlink (3),
.br sem_wait (3),
.br pthreads (7),
.br shm_overview (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/iso_8859-11.7
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th iswcntrl 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
iswcntrl \- test for control wide character
.sh synopsis
.nf
.b #include 
.pp
.bi "int iswcntrl(wint_t " wc );
.fi
.sh description
the
.br iswcntrl ()
function is the wide-character equivalent of the
.br iscntrl (3)
function.
it tests whether
.i wc
is a wide character
belonging to the wide-character class "cntrl".
.pp
the wide-character class "cntrl" is disjoint from the wide-character class
"print" and therefore also disjoint from its subclasses "graph", "alpha",
"upper", "lower", "digit", "xdigit", "punct".
.pp
for an unsigned char
.ir c ,
.i iscntrl(c)
implies
.ir iswcntrl(btowc(c)) ,
but not vice versa.
.sh return value
the
.br iswcntrl ()
function returns nonzero if
.i wc
is a
wide character belonging to the wide-character class "cntrl".
otherwise, it returns zero.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br iswcntrl ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br iswcntrl ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br iscntrl (3),
.br iswctype (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getcwd.3
.so man3/sigvec.3
.so man3/exec.3
.\" copyright (c) 2016 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th signal-safety 7  2021-03-22 "linux" "linux programmer's manual"
.sh name
signal-safety \- async-signal-safe functions
.sh description
an
.i async-signal-safe
function is one that can be safely called from within a signal handler.
many functions are
.i not
async-signal-safe.
in particular,
nonreentrant functions are generally unsafe to call from a signal handler.
.pp
the kinds of issues that render a function
unsafe can be quickly understood when one considers
the implementation of the
.i stdio
library, all of whose functions are not async-signal-safe.
.pp
when performing buffered i/o on a file, the
.i stdio
functions must maintain a statically allocated data buffer
along with associated counters and indexes (or pointers)
that record the amount of data and the current position in the buffer.
suppose that the main program is in the middle of a call to a
.i stdio
function such as
.br printf (3)
where the buffer and associated variables have been partially updated.
if, at that moment,
the program is interrupted by a signal handler that also calls
.br printf (3),
then the second call to
.br printf (3)
will operate on inconsistent data, with unpredictable results.
.pp
to avoid problems with unsafe functions, there are two possible choices:
.ip 1. 3
ensure that
(a) the signal handler calls only async-signal-safe functions,
and
(b) the signal handler itself is reentrant
with respect to global variables in the main program.
.ip 2.
block signal delivery in the main program when calling functions
that are unsafe or operating on global data that is also accessed
by the signal handler.
.pp
generally, the second choice is difficult in programs of any complexity,
so the first choice is taken.
.pp
posix.1 specifies a set of functions that an implementation
must make async-signal-safe.
(an implementation may provide safe implementations of additional functions,
but this is not required by the standard and other implementations
may not provide the same guarantees.)
.pp