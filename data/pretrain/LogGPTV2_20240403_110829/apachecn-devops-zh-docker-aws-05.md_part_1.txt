# 五、使用 ECR 发布 Docker 映像
Docker 注册中心是 Docker 和容器生态系统的一个重要组成部分，它提供了一个通用的机制来公开和私下发布和分发您的容器应用。
ECR 提供了一个完全管理的私有 Docker 注册中心，其特点是与前一章中介绍的 ECS 组件和其他 AWS 服务紧密集成。ECR 是高度可扩展的、安全的，并且提供了与用于构建和发布 Docker 映像的本机 Docker 客户端集成的工具。
在本章中，您将学习如何使用各种机制，包括 AWS 控制台、AWS 命令行界面和云信息，创建 ECR 存储库来存储您的 Docker 映像。一旦您建立了第一个 ECR 存储库，您将学习如何使用 ECR 进行认证，提取存储在存储库中的 Docker 映像，并使用 Docker 客户端构建和发布 Docker 映像到 ECR。为了结束本章，您将学习如何处理使用和管理 ECR 的更高级场景，包括配置跨帐户访问以允许在其他 AWS 帐户中运行的 Docker 客户端访问您的 ECR 存储库，以及配置生命周期策略，以确保孤立的 Docker 映像得到定期清理，从而减少管理工作和成本。
将涵盖以下主题:
*   理解 ECR
*   创建 ECR 存储库
*   登录 ECR
*   将 Docker 映像发布到 ECR
*   从 ECR 中提取 Docker 映像
*   配置生命周期策略
# 技术要求
下面列出了完成本章的技术要求:
*   Docker 18.06 或更高
*   Docker 写作 1.22 或更高
*   GNU Make 3.82 或更高版本
*   japan quarterly 日本季刊
*   AWS CLI 1.15.71 或更高版本
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   第 2 章中配置的示例应用的 Docker 工作流(参见[https://github . com/Docker-in-AWS/Docker-in-AWS/tree/master/CH2](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2))。
此 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch5](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch5)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2PKMLSP](http://bit.ly/2PKMLSP)
# 理解 ECR
在我们开始创建和配置 ECR 存储库之前，简要介绍 ECR 的核心概念非常重要。
ECR 是由 AWS 提供的完全管理的私有 Docker 注册中心，提供与 ECS 和其他 AWS 服务的紧密集成。ECR 由许多组件组成，如下图所示:
![](img/4472aae0-f99e-482d-a642-fad5cc753bfa.png)
ECR architecture
电子逆向拍卖的核心组成部分包括:
*   **存储库**:存储库存储给定 Docker 映像的所有版本的映像。每个存储库都配置有一个名称和 URI，这对于您的 AWS 帐户和地区是唯一的。
*   **权限**:每个存储库都包含允许您授予各种 ECR 操作访问权限的权限，例如推送或拉取 Docker 映像。
*   **生命周期策略**:每个存储库都可以配置一个可选的生命周期策略，该策略可以用于清理被较新版本取代的孤立 Docker 映像，或者删除您可能不再使用的较旧 Docker 映像。
*   **认证服务** : ECR 包括一个认证服务，该服务包括一个令牌服务，可用于验证您的 IAM 凭据，以换取与 Docker 客户端认证过程兼容的临时认证令牌。
考虑 ECR 的消费者也很重要。如上图所示，这些包括:
*   **与您的存储库在同一本地 AWS 帐户中的 Docker 客户端**:这通常包括运行在 ECS 集群中的 ECS 容器实例。
*   **与您的存储库不同的 AWS 帐户中的 Docker 客户端**:这是大型组织的常见场景，并且通常还包括远程帐户中运行在 ECS 集群中的 ECS 容器实例。
*   **AWS 服务使用的 Docker 客户端**:一些 AWS 服务可以利用自己在 ECR 中发布的 Docker 镜像，比如 AWS CodeBuild 服务。
At the time of writing this book, ECR is only offered as a private registry - meaning if you want to publish public your Docker images publicly, then ECR is not the correct solution for you, at least in terms of publishing your public Docker images.
# 创建 ECR 存储库
现在您已经对 ECR 有了一个基本的概述，让我们开始创建您的第一个 ECR 存储库。回想一下在前面的章节中，您被介绍到了本书的示例**到**应用，并且您在您的本地环境中构建了一个 Docker 映像。为了能够基于此映像在您的 ECS 集群上运行容器，您需要将此映像发布到您的 ECS 容器实例可以访问的 Docker 注册表中，ECR 是这方面的完美解决方案。
要为**到**应用创建 ECR 存储库，我们将重点关注创建和配置存储库的三种流行方法:
*   使用 AWS 控制台创建 ECR 存储库
*   使用 AWS 命令行界面创建 ECR 存储库
*   使用 AWS 云信息创建 ECR 存储库
# 使用 AWS 控制台创建 ECR 存储库
通过执行以下步骤，可以使用 AWS 控制台创建 ECR 存储库:
1.  从 AWS 主控制台，在计算部分选择**服务** | **弹性容器服务**，从左侧菜单选择**存储库**，然后单击开始按钮。
2.  系统将提示您为存储库配置名称。标准惯例是以`/`格式命名您的存储库，这将产生一个完全合格的`//`存储库 URI。在下面的例子中，我称存储库为`docker-in-aws/todobackend`，但是你可以随意命名你的映像。完成后，单击下一步继续:
![](img/b8a39b1e-b38f-4f4b-91d7-162b33f6f0ea.png)
Configuring a Repository name
3.  现在将创建您的 ECR 存储库，并提供如何登录 ECR 和发布您的 Docker 映像的说明。
# 使用 AWS 命令行界面创建 ECR 存储库
通过运行`aws ecr create-repository`命令，可以使用 AWS 命令行界面创建 ECR 存储库，但是，假设您已经通过 AWS 控制台创建了存储库，让我们看看如何检查 ECR 存储库是否已经存在，以及如何使用 AWS 命令行界面删除存储库。
要查看您的 AWS 帐户和本地区域中的 ECR 存储库列表，您可以使用`aws ecr list-repositories`命令，而要删除 ECR 存储库，您可以使用`aws ecr delete-repository`命令，如下所示:
```
> aws ecr list-repositories
{
    "repositories": [
        {
            "repositoryArn": "arn:aws:ecr:us-east-1:385605022855:repository/docker-in-aws/todobackend",
            "registryId": "385605022855",
            "repositoryName": "docker-in-aws/todobackend",
            "repositoryUri": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
            "createdAt": 1517692382.0
        }
    ]
}
> aws ecr delete-repository --repository-name docker-in-aws/todobackend
{
    "repository": {
        "repositoryArn": "arn:aws:ecr:us-east-1:385605022855:repository/docker-in-aws/todobackend",
        "registryId": "385605022855",
        "repositoryName": "docker-in-aws/todobackend",
        "repositoryUri": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
        "createdAt": 1517692382.0
    }
}
```
Describing and deleting an ECR Repository using the AWS CLI
现在，您已经删除了之前使用 AWS 控制台创建的存储库，您可以重新创建它，如下所示:
```
> aws ecr create-repository --repository-name docker-in-aws/todobackend
{
    "repository": {
        "repositoryArn": "arn:aws:ecr:us-east-1:385605022855:repository/docker-in-aws/todobackend",
        "registryId": "385605022855",
        "repositoryName": "docker-in-aws/todobackend",
        "repositoryUri": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
        "createdAt": 1517693074.0
    }
}
```
Creating an ECR Repository using the AWS CLI
# 使用 AWS 云信息创建 ECR 存储库
AWS CloudFormation 支持通过`AWS::ECR::Repository`资源类型创建 ECR 存储库，在编写本文时，这允许您管理 ECR 资源策略和生命周期策略，我们将在本章稍后介绍。
作为一般的经验法则，鉴于 ECR 存储库作为 Docker 映像分发机制的关键性质，我通常建议您的帐户和区域的各种 ECR 存储库定义在一个单独的共享 CloudFormation 栈中，该栈专门用于 ECR 存储库的创建和管理。
根据这一建议，在以后的章节中，让我们创建一个名为 **todobackend-aws** 的存储库，您可以使用它来存储您将在本书中创建和管理的各种基础架构配置。我将让您在 GitHub 上创建相应的存储库，之后您可以将 GitHub 存储库配置为远程存储库:
```
> mkdir todobackend-aws
> touch todobackend-aws/ecr.yml > cd todobackend-aws
> git init Initialized empty Git repository in /Users/jmenga/Source/docker-in-aws/todobackend-aws/.git/
> git remote add origin https://github.com/jmenga/todobackend-aws.git
> tree .
.
└── ecr.yml
```
您现在可以配置一个名为`ecr.yml`的云信息模板文件，该文件为`todobackend` Docker 映像定义了一个 ECR 存储库:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Repositories
Resources:
  TodobackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-in-aws/todobackend
```
Defining an ECR Repository using the AWS CloudFormation
正如您在前面的示例中看到的，使用 CloudFormation 定义 ECR 存储库非常简单，只需要定义`RepositoryName`属性，正如您可能期望的那样，该属性定义了存储库的名称。
假设您已经删除了当前的 todobackend ECR 存储库，如前所述，您现在可以使用`aws cloudformation deploy`命令使用 CloudFormation 创建 todo back and 存储库:
```
> aws cloudformation deploy --template-file ecr.yml --stack-name ecr-repositories
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - ecr-repositories
```
Creating an ECR Repository using the AWS CloudFormation
栈部署成功后，您可以在云信息控制台中查看栈，如下图所示:
![](img/355c6511-887a-4c48-a0d6-d563459b8ed9.png)
ECR Repository CloudFormation stack
如果您现在导航回 ECS 控制台，并从左侧菜单中选择**资源**，您应该会看到一个名为`docker-in-aws/todobackend`的 ECR 存储库，如您的云信息栈中所定义的。如果您单击存储库，您将进入存储库详细信息页面，该页面为您提供存储库 URI、存储库中发布的映像列表、ECR 权限和生命周期策略设置。
# 登录 ECR
一旦您为 Docker 映像创建了存储库，下一步就是构建您的映像并将其发布到 ECR。在您可以这样做之前，您必须向 ECR 进行认证，因为在撰写本文时，ECR 是不支持公共访问的私有服务。
登录 ECR 的说明和命令显示为 ECR 存储库向导的一部分，但是您可以通过选择适当的存储库并单击**查看推送命令**按钮随时查看这些说明，该按钮将显示登录、构建和向存储库发布 Docker 映像所需的各种命令。
显示的第一个命令是`aws ecr get-login`命令，该命令将生成一个`docker login`表达式，该表达式包含对登录 for 12 小时有效的临时认证令牌(注意，为了节省空间，命令输出已被截断):
```
> aws ecr get-login --no-include-email
docker login -u AWS -p eyJwYXl2ovSUVQUkJkbGJ5cjQ1YXJkcnNLV29ubVV6TTIxNTk3N1RYNklKdllvanZ1SFJaeUNBYk84NTJ2V2RaVzJUYlk9Iiw
idmVyc2lvbiI6IjIiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNTE4MTIyNTI5fQ== https://385605022855.dkr.ecr.us-east-1.amazonaws.com
```
Generating login commands for ECR
Docker 版本 17.06 及更高版本需要`--no-include-email`标志，因为`-e` Docker CLI 电子邮件标志在此版本中已被弃用。
虽然您可以复制并粘贴前面示例中生成的命令输出，但更快的方法是通过将命令用`$(...)`括起来，使用 bash 命令替换来自动执行`aws ecr get-login`命令的输出:
```
> $(aws ecr get-login --no-include-email)
Login Succeeded
```
Logging into ECR
# 将 Docker 映像发布到 ECR
在前面的章节中，您学习了如何在本地构建和标记 Docker 映像，并以 todobackend 示例应用为例。
现在，您可以扩展此工作流，将 Docker 映像发布到 ECR，这需要您执行以下任务:
*   确保您已登录 ECR
*   用您的 ECR 存储库的 URI 来构建和标记您的 Docker 映像
*   将您的 Docker 形象推广到 ECR
# 使用 Docker 命令行界面发布 Docker 映像
您已经看到了如何登录 ECR，构建和标记 Docker 映像与本地用例非常相似，只是在标记映像时需要指定 ECR 存储库的 URI。
以下示例演示如何构建`todobackend`映像，用新 ECR 存储库的 URI 标记映像(用于存储库的实际 URI)，并使用`docker images`命令验证映像名称:
```
> cd ../todobackend
> docker build -t 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend .
Sending build context to Docker daemon 129.5kB
Step 1/25 : FROM alpine AS build
 ---> 3fd9065eaf02
Step 2/25 : LABEL application=todobackend
 ---> Using cache