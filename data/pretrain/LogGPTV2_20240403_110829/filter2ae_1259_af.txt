拖入010editor，发现有如下字样，能够看出是windows下的分区，或者是放到linux下使用file命令进行识别。
修改后缀为vhd，双击gooood.vhd文件发现被bitlocker加密，使用bitlocker2john结合hashcat爆一下弱密码字典，`bitlocker2john
-i gooood.vhd`,然后将User Password
hash的值保存成hash.txt，将弱密码的字典放到passwd.txt，使用`hashcat -m 22100 hash.txt passwd.txt
--show`爆出密码:abcd1234。
用`abcd1234`解密bitlocker加密的分区，打开之后是空的，使用diskgenius挂载分区，可以在隐藏分区的回收站里找到提示和附件。
打开文本文档发现hint是3389,即提示黑客使用远程桌面连接到了受害者主机看到了flag，这里有个知识点是关于：rdp协议默认开启位图缓存功能，会产生bmc文件，使用bmc-tool或者BMC Viewer能够恢复出缓存的图像。
清晰可见: cmRwY2FjaGUtYm1j,解密baset64即为flag:SangFor{rdpcache-bmc}。
### flow hunter
1.首先要在众多流量中甄别出DNS流量中隐藏有关键信息，普通流量中DNS流量不会有这么多，其次也可以通过全局搜索secret关键字找到提示`becareful_rainbow`,根据rainbow关键词可以发现，DNS流量中请求了非常多域名后缀为`rainbow.bubble`的流量。
通过过滤:`tcp and frame contains "secret"`可以找到TRUESECRET。
2.这一步可以使用脚本提取，也可以使用tshark命令提取全部的dns.qry.name，`tshark -Y misc3.pcap -T fields
-e dns.qry.name -r 'udp.dstport==53' >
domain.txt`可将DNS中所有解析的域名存放于domain.txt中，删除所有的`43.9.227.10.in-addr.arpa`即可得到纯净的域名请求记录。
3.脚本提取二级域名前缀，组成十六进制保存成PNG图片可以得到一张二维码（datamatrix格式）。
`print("".join([j.split(".")[1] for j in [i.strip() for i in
open(r"domain.txt",'r').readlines() if i is not "\n"]]))`
然后将十六进制放到010editor中保存为PNG，然后解码：
4.观察的到的秘钥`ecb_pkcs7`可知是AES加密，用这个秘钥去解密搜索关键词secret得到的密文（密文有五段，组合起来urldecode即可解密），得到sslkey.log，需要选定模式为：ECB-pkcs7-256
第一段密文
AES解密
5.得到日志后导入wireshark解密https的流量
## Reverse
### Press
IDA打开分析主函数，如图：
程序先读取一个名为flag的文件，进行一系列计算后输出附件所示的out程序，容易分析出核心算法即为sub_40094B，分析此函数。
利用case中的字符，能够从公开网络中大致查出这类似于brainfuck语言，但有所扩展使得我们不能直接利用开源工具计算结果。
strcpy中的字符串即为类brainfuck的操作码，从上面的函数看，这段代码的含义大致为：读取一个字符，用160减去此字符，所得的结果再乘5，加2，输出到结果中。
利用out逐字节反算，可以得到一组base64值。
解base64即为flag。
### Lithops
1.首先运行程序尝试输入，根据运行结果可以猜测存在一个值与输入的(经过运算后)flag进行比对。
2.程序的主函数并不复杂，在IDA里面查看一下反编译后的C代码。
可以看出比较关键的内容是sub_402970、sub_402900和sub_4028A0函数，以及v3、v9、v10和v7参数，再直接查看反汇编代码可以看出v7为用户输入的flag。
3.查看一下sub_4028A0函数，我们知道dword_xxxxxx表示地址为xxxxxx的32位数据，这里被当作函数来使用。
使用交叉引用查看一下，其在sub_401010函数中被赋值，该值由sub_4055A0函数通过红框中的两个参数计算而得。
再对dword_433C58使用交叉引用，对经验的应该可以看出这段代码是获取kernel32.dll的基址。
那么，知道API HASH技术的应该可以猜测到sub_4055A0函数主要用于根据模块基址和HASH寻找对应的API函数。 4.sub_402900
5.sub_402970
可以看出类似的情况分别出现在了sub_402900和sub_402970函数中，所有使用到的API函数都被隐藏了，这种情况下，我们可以采用动态调试。
在动态调试前，我们先明确这里存在一个值用于验证其输入的flag是否正确，通过上述内容可以看出这个值应该是输入的flag经过计算后的结果，我们的首要目标应该是寻得该值，并根据该值逆推flag。
6.sub_4028A0动态分析
可以看出在sub_4028A0函数中主要是用到的是MultiByteToWideChar函数，调试并根据参数还原该段代码，应该为：
    void gb2312ToUnicode(const string& src, wstring& result)
    {
        int n = kMultiByteToWideChar(CP_ACP, 0, src.c_str(), -1, NULL, 0);
        result.resize(n);
        kMultiByteToWideChar(CP_ACP, 0, src.c_str(), -1, (LPWSTR)result.c_str(), result.length());
    }
7.sub_402900动态分析
可以看出在sub_402900函数中主要用到的是WideCharToMultiByte函数，调试并根据参数还原该段代码，应该为：
    void unicodeToUTF8(const wstring& src, string& result)
    {
        int n = kWideCharToMultiByte(CP_UTF8, 0, src.c_str(), -1, 0, 0, 0, 0);
        result.resize(n);
        kWideCharToMultiByte(CP_UTF8, 0, src.c_str(), -1, (char*)result.c_str(), result.length(), 0, 0);
    }
8.根据上述内容，我们可以知道程序会把输入的flag进行utf-8编码，并传入sub_402970函数验证。
sub_402970函数中主要使用到的API为GetModuleHandleA、lstrcpyA和lstrcmpA，该函数会从.rsrc节中获取用于验证flag正确性的值，即“E4
B8 8D E5 81 9A E4 BC 9F E5 A4 A7 E6 97 B6 E4 BB A3 E7 9A 84 E6 97 81 E8 A7 82
E8 80 85 0”。
到这一步，我们其实比较明确，该程序只是将输入进行utf-8编码，并与隐藏在.rsrc节中的key进行对比验证，根据该key我们写出writeup。
    void unicodeToGB2312(const wstring& wstr, string& result)
    {
        int n = WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), -1, 0, 0, 0, 0);
        result.resize(n);
        ::WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), -1, (char*)result.c_str(), n, 0, 0);
    }
    void utf8ToUnicode(const string& src, wstring& result)
    {
        int n = MultiByteToWideChar(CP_UTF8, 0, src.c_str(), -1, NULL, 0);
        result.resize(n);
        ::MultiByteToWideChar(CP_UTF8, 0, src.c_str(), -1, (LPWSTR)result.c_str(), result.length());
    }
    int main(int argc, char** agrv)
    {
        string strGB2312;
        wstring wstrUnicode;
        char key[] = "\xE4\xB8\x8D\xE5\x81\x9A\xE4\xBC\x9F\xE5\xA4\xA7\xE6\x97\xB6\xE4\xBB\xA3\xE7\x9A\x84\xE6\x97\x81\xE8\xA7\x82\xE8\x80\x85\x00";
        utf8ToUnicode(key, wstrUnicode);
        unicodeToGB2312(wstrUnicode, strGB2312);
        return 0;
    }
得到flag。
验证。
### XOR
IDA打开，发现目标程序进行了混淆，进一步分析，可以知道使用了ollvm进行了混淆。
使用工具中的deflat.py脚本，去除混淆的代码。 `python deflat.py shift_exercise 0x401170`
去除之后，生成shift_exercise_recovered文件，IDA继续分析，仍然存在无用的控制流程。
进一步使用IDA插件script.py进行处理，获得更为直观的伪代码。
分析伪代码可以知道，该算法为修改过的crc64算法，依据加密算法，写出解密算法。
    def multiply(multiplier_a, multiplier_b):
        tmp = [0] * 64
        res = 0
        for i in range(64):
            tmp[i] = (multiplier_a > i) & 1)
            res ^= tmp[i]
        return res
    def find_highest_bit(value):
        i = 0
        while value != 0:
            i += 1
            value >>= 1
        return i
    def divide(numerator, denominator):
        quotient = 0
        tmp = numerator
        bit_count = find_highest_bit(tmp) - find_highest_bit(denominator)
        while bit_count >= 0:
            quotient |= (1 >= 8
        print(res)
    print(res.decode())
### 生瓜蛋子
IDA打开，分析主函数可以较容易的分析出所需的输入是Sangfor{30位hex}，然后按照Label11所述的逻辑进行判定：
上图中，duihua5是虚拟机逻辑通过（此处的虚拟机详见后文）但md5不正确的情况，duihua4是二者都正确的情况，但是上面的伪代码由于花指令的存在，不完全正确。
接下来的部分无法在F5中得到，但是可以基于汇编从text view得到，这部分十六进制字符的部分值得注意：
目前无法得到关于这些字符如何使用的信息，动态调试时，关注这部分地址（403xxx），可以分析出这是一个虚拟机，其中： \+
最后的64个字符为opcode，这64个字节中前面32个决定偏移，后面32个决定计算方式。 \+
计算方式包括模加，模减，模乘和异或，4种计算方法，32个字节中的前30个分别对30位输入决定，因为是16进制，可以分析出高4位决定一种，低4位决定一种，两种计算分别进行，存在于两个变量中。
（图为强行nop掉花指令后得到的结构） \-偏移值决定输入是与前面30*32的十六进制数的哪一位做运算，第一种运算是：第i位与第i行的第x位（x受偏移值控制，最大为15）进行计算，第二种运算是：第i位与第i行的第15+x位做运算，两个结果都是与第i行最后一位比较，有一个相等即可完成检查。
  * 据此可以写爆破脚本，得到每一位的可行值
不计md5的逻辑，可行的flag可以由以下脚本爆破得到，修改md5值可得到多个文件，使用任何cpp编译器编译可得到文件。
    #include
    #include
    #include
    #include 
    #include
    unsigned char gua[64];
    unsigned char table[32][33] = {
    "f686bee4665fa77525e0f784097f4b3f",
    "8ec4b805f93e9edd178818b3993e4a5d",
    "4edb219c1f7dcf6dfb5c471a1f44ffa5",
    "bd244ed81f96aef43ea55704085af9b4",
    "594537dc31688cc4ef722bacdfac518e",
    "91f800e6787c42f26e939a391c398ec6",
    "69cf503c8cadc12176e791c6615bd704",
    "8b1b9b88692d3804b9710a72ae458843",
    "fe77fb82cf016df3913ed002bccb7d6d",
    "711453fe706aed138823de8dcbf2fc38",
    "4f027901b70a595828647b3a1407078e",
    "5be1878d4e222009f13a3aacb2192861",
    "3109983436e0eebe2b5c5a5e3d668c6b",
    "6b33b28e18d6d9f0db4688cfad20ccbe",
    "b47b71f489033446d3d9f097060e33ec",
    "28d0871eb3f67152d8aa820500ddeabc",
    "df51b921388b8032190cf0a3760e6fb6",
    "85f7c2f7689bbf43965d120e3e7d4989",
    "2d291f1367021787efb4a9bf3a204a92",
    "7caf326155610f1b827a16e31cb9e04d",
    "026910fc9c1aee91868e39dc5c0a3828",
    "6f6dd1338d58da08a6c3a5ac28e73728",
    "9555bb8ef33de07ed414521b30d1ce1f",
    "f45c235edf62094bbbdd63a7b8c6dbc3",
    "db2b5f869cc8517f596a4cd182a812e7",
    "c6cf507b8a27e604a04d999ad8b9c5b4",
    "5292154eb9e144201ec8e87dbb49769f",
    "e6f55bc893978043e128015cc02b0197",
    "cf727d37d5347f6573f3c82b1cc36287",
    "7f1412d1f3e82f7335d19fa944c368ed",
    "c3fe545e249ef80f5327d01be270c784",
    "5ccd45379ddf5c9be0654e88c6984c83" };
    int hex2int(char h) {
        if (h >= '0'&&h = 'a'&&h <= 'f') {
            return h - 'a' + 10;
        }
        else {
            return 0;
        }
    }
    char int2hex(int x) {
        char t[] = "0123456789abcdef";
        return t[x];
    }
    int modplus(int a, int b) {