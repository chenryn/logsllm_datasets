2κ .
| Pr[Winma-m-h
] − Pr[Winma-m-h
Authenticated Wireless Roaming via Tunnels: Making Mobile Feel at Home
13
2
1
]| ≤ 2Succwuf-cma
MAC
| Pr[Winma-m-h
] − Pr[Winma-m-h
two diﬀerent sessions, regardless of the chosen rF. In particular, this game implies that sidM and sidH
remain unique for each invoked session.
Game G2. [MAC forgeries for µH and µM] This game is identical to Game G1 with the only exception
that ∆ fails if A asks a Send query to an instance of M containing a valid MAC value µH not previously
output by an instance of H or a Send query to an instance of H containing a valid µM not previously
output by an instance of M.
The probability that the simulation aborts can be upper-bounded through the probability of forging
any of the both MAC values. To see this, consider ∆ given access to the MAC oracle. ∆ simulates the execution
of AWRT according to the speciﬁcation except that it computes µH and µM through the corresponding
oracle calls. In case that the simulation aborts ∆ is in possession of a valid MAC value (representing either
µH or µM) which was not obtained through any previous oracle call. Hence, ∆ can easily output it as a
forgery. This implies
(κ).
(2)
Having eliminated possible forgeries for µH and µM we observe that since these MAC values are computed
over the session ids sidH and sidM, respectively, that according to the previous game are unique for
each new session, this game rules out any successful replay attacks using µH and µM. Therefore, any
successful veriﬁcation of µH by an instance of M and of µM by an instance of H implies that there are
two instances of M and H that hold the same session ids, and are, therefore partnered. Since veriﬁcation
of µH and µM is the necessary requirement for the acceptance of the instances of M and H in AWRT we
follow that this game ensures mutual authentication between M and H and excludes attacks by which
A can win based on conditions (1) and (2).
Further, we focus on the attacks based on conditions (3) and (4). Since the session end-to-end
key KM,H is derived by the instances of M and H in a deterministic way as PRFkM(l3, sidM) and
PRFkM(l3, sidH), respectively, it follows that if any two partnered instances of M and H accept then they
hold identical values for KM,H, i.e. the probability of A to win in this game through condition 3 is 0.
Finally, we observe that if any two partnered instances of M and H accept then they hold the tunnel
key Kt computed in a deterministic way as PRFkt(l2, sidM) and PRFkt(l2, sidH), respectively. Hence, the
probability that A wins in this game through condition 4, is upper-bounded by the probability that
these partnered instances have computed diﬀerent values for the pre-tunnel key kt. Since kt is derived
by the partnered instances of M and H in a deterministic way as PRFkM(l1, sidM) and PRFkM(l1, sidH),
respectively, thus using the same values for kM and the session ids, it follows that the probability of A
winning in this game through condition 4 is also 0. Summing up the discussed probabilities of A to win
in this game based on conditions 3 and 4 we obtain
Pr[Winma-m-h
(3)
(cid:117)(cid:116)
Combining the previous equations, we conclude the proof.
Theorem 2 (MA between F and H). Given a EUF-CMA secure (Sig, V er) the basic version of AWRT
described in Figure 1 provides mutual authentication between the participating foreign and home networks
in the sense of Deﬁnition 3, and
] = 0.
2
Succma-f-h
AWRT (κ) ≤ 2q2
2κ + 2Succeuf-cma
(Sig,V er)(κ).
i
Proof. (Sketch) Similar to the previous proof we construct a sequence of games Gi, i = 0, . . . , 2 and
the event that A breaks the mutual authentication between F and H in game Gi,
denote by Winma-f-h
i.e., wins in the corresponding interaction as described in Deﬁnition 3. Note that A is allowed to corrupt
F for the winning conditions (1) – (2), but not for (3).
AWRT (κ) played between a simulator ∆ and a PPT
adversary A. ∆ simulates the actions of the participating M, F, and H according to the protocol speci-
ﬁcation and answers all queries of A.
Game G0. [Real protocol] This is the real Gamema-f-h
Game G1. [Collisions for nonces rF and rH] Similar to the proof of Theorem 1 we abort the simu-
lation in this game if during the interaction ∆ chooses the same random nonce rF resp. rH on behalf of
14
M. Manulis, D. Leroy, F. Koeune, O. Bonaventure, and J.-J. Quisquater
F resp. H in two diﬀerent protocol sessions. Thus,
| Pr[Winma-f-h
1
] − Pr[Winma-f-h
0
]| ≤ 2q2
2κ .
(4)
Obviously, this game implies that sidF and sidH remain unique for each invoked session, regardless of
the chosen rM.
Game G2. [Signature forgeries for σH and σF] This game is identical to Game G1 with the only
exception that ∆ fails if A asks a Send query to an instance of F containing a valid signature σH not
previously output by an instance of H or a Send query to an instance of H containing a valid signature
σF not previously output by an instance of F.
Assume that ∆ simulates the protocol execution according to the speciﬁcation except that it is given
access to the signing oracles which it queries in order to obtain the corresponding signatures σH and
σF on behalf of H and F, respectively. In case that the simulation aborts ∆ is in possession of a valid
signature (representing either σH or σF) which was not obtained through any previous oracle call, and
can, therefore, be returned by ∆ as a corresponding forgery. Hence,
| Pr[Winma-f-h
2
] − Pr[Winma-f-h
1
]| ≤ 2Succeuf-cma
(Sig,V er)(κ).
(5)
Since each of these signatures is computed over the corresponding session id sidF or sidH (amongst other
inputs), respectively, that according to the previous game are unique for each new session, this game rules
out any successful replay attacks. Since veriﬁcation of σH by an instance of F and veriﬁcation of σF by
an instance of H is the necessary requirement for the acceptance in AWRT we follow that upon acceptance
of any instance of F (or H) there is a corresponding partnered instance of H (or F). This implies the
mutual authentication between F and H and excludes attacks by which A can win based on conditions
(1) and (2).
Further, we focus on the attacks based on condition (3). Observe, that if two partnered instances of F
and H accept then the exchanged signatures sidF or sidH between these instances were valid (and also
not replayed). This implies that the integrity of the cipher-text χ transmitted to the instance of F was
preserved. Since decryption D is a deterministic operation we follow that upon acceptance both partnered
instances of F and H hold the same value for the pre-tunnel key kt, which is used by the instances to
derive the tunnel key Kt prior to acceptance. Hence, the probability that partnered instances of F and
H accept with two diﬀerent tunnel keys in this game is 0, i.e.
Combining the previous equations, we conclude the proof.
Pr[Winma-f-h
2
] = 0.
(6)
(cid:117)(cid:116)
Now we focus on the AKE-security of the established session end-to-end and tunnel keys.
Theorem 3 (End-to-End AKE). Given a WUF-CMA secure MAC and a pseudo-random PRF the basic
version of AWRT described in Figure 1 provides end-to-end AKE-security in the sense of Deﬁnition 6, and
Advake-e2e
AWRT
(κ) ≤ 4q2
2κ + 4Succwuf-cma
MAC
(κ) + 4qAdvprf
PRF(κ).
i
Game G0. [Real protocol] This is the real Gameake-e2e
Proof. (Sketch) As in the previous proofs we construct a sequence of games Gi, i = 0, . . . , 4 and denote
the event that A breaks the end-to-end AKE-security of AWRT in game Gi, i.e., wins in the
by Winake-e2e
corresponding interaction as described in Deﬁnition 6 (for the case α = ake-e2e).
(κ) played between a simulator ∆ and a PPT
adversary A. ∆ simulates the actions of the participating M, F, and H according to the protocol speciﬁ-
cation and answers all queries of A. Recall, that the TestKey query is asked by A to an e2e-fresh instance
of either M or H which has previously accepted. In order to prevent A from active participation on
behalf of either M or H we ﬁrst exclude possible impersonation attacks against any of these parties. For
this we utilize games G1 and G2 from the proof of Theorem 1.
AWRT
Authenticated Wireless Roaming via Tunnels: Making Mobile Feel at Home
15
Game G1. [Collisions for nonces rM and rH] The simulation in this game aborts (and the output
bit of the interaction is set at random) if the same random nonce rM (or rH) is chosen by ∆ on behalf
of M (or H) in two diﬀerent protocol sessions, implying
| Pr[Winake-e2e
1
] − Pr[Winake-e2e
0
]| ≤ 2q2
2κ .
(7)
Game G2. [MAC forgeries for µH and µM] The simulation in this game aborts (and the output bit
of the interaction is set at random) if A asks as part of its Send query to M (or to H) a valid MAC value
µH (or µM) which was not previously output by an instance of H (or M), so that
| Pr[Winake-e2e
2
] − Pr[Winake-e2e
1
]| ≤ 2Succwuf-cma
MAC
(κ).
(8)
Having eliminated possible forgeries and replay attacks with respect to µH and µM we observe that
any e2e-fresh instance of M (or H) which accepts has a partnered instance of H (or M) which is also
e2e-fresh.
Game G3. [Pseudo-randomness of kt] This game is identical to Game G2 except that ∆ in each
session chooses the pre-tunnel kt at random on behalf of an instance of H instead of deriving it via PRF
and uses the same value in the simulation of the corresponding partnered instance of M (to preserve
consistency). Following the classical reductionist argument we obtain
]| ≤ qAdvprf
] − Pr[Winake-e2e
| Pr[Winake-e2e
(9)
PRF(κ).
3
2
Note that this game ensures independence between kt (used to derive the tunnel key Kt) and the shared
key kM (used to derive the end-to-end key KM,H). We remark that the randomly chosen kt is also sent
encrypted in χ to F ensuring the consistency between the tunnel key computed by the possibly corrupted
instances of F and uncorrupted instances of H and M.
Game G4. [Pseudo-randomness of KM,H] This ﬁnal game is identical to Game G3 except that ∆
in each session chooses KM,H at random on behalf of an instance of M instead of deriving it via PRF
and uses the same value in the simulation of the corresponding partnered instance of H (to preserve
consistency), so that
| Pr[Winake-e2e
] − Pr[Winake-e2e
]| ≤ qAdvprf
(10)
As a result of this game the answer given to A in response to its TestKey query to some e2e-fresh instance
of M or H is a completely random value, regardless of the chosen bit b. Obviously, the probability of A
to win in this game is given by the probability of a random guess, i.e.
PRF(κ).
4
3
4
] =
Pr[Winake-e2e
1
(11)
2 .
(cid:117)(cid:116)
The combination of the above equations concludes the proof.
Theorem 4 (Tunnel AKE). Given a EUF-CMA secure (Sig, V er), a IND-CCA2 secure (E,D) and a
pseudo-random PRF the basic version of AWRT described in Figure 1 provides tunnel AKE-security in the
sense of Deﬁnition 6, and
(κ) ≤6q2
(Sig,V er)(κ) + 2qAdvind-cca2
(κ) + 4Succeuf-cma