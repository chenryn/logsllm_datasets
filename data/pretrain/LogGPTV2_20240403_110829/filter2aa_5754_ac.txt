\&    my $started = scalar(localtime(time()));
.Ve
.PP
.Vb 1
\&    sub begun { return $started }
.Ve
.PP
当用 \f(CW\*(C`use Pax\*(C'\fR 或 \f(CW\*(C`require Pax\*(C'\fR 载入此模组时，这个变数就会被初始化。不过它不会被资源回收，像其他出了有效范围的变数那样，因为 begun()函数要用到它，但是没有其他函数能撷取它。这个变数不能以 \f(CW$Pax::started\fR 的形式来撷取，因为它所存在的范围与此包裹无关。它存在的范围是这个档案。可想见地，一个档案里可以放好几个包裹，而所有的包裹都撷取同一个私有变数，但从另一个档案中，即使是属于同一个包裹(package)，也不能取得它的值。
.PP
参见 perlsub 中的 \*(L"Persistent Private Variables\*(R" 的细节.
.Sh "What's the difference between dynamic and lexical (static) scoping?  Between \fIlocal()\fP and \fImy()\fP?"
.IX Subsection "动态和静态作用域有什么区别？local() 和 my() 呢?"
local($x) 将全域变数 $x的原值存起来，并在此函数执行期间赋予一个新 值，此值可以从此函数所呼叫的其他函数里看见。这整个步骤是在执行期间完成的，所以才叫做动态范围选取 (dynamic scoping)。local()影响的是全域变数，或者称作包裹变数或动态变数。
.PP
\&\f(CW\*(C`my($x)\*(C'\fR 会创造一个只能在目前这个函数里看得见的新变数。这个步骤是在编译期完成(compile-time)，所以称作文字式或是静态范围选取。my()总是作用在私有变数，也称作文字式变数或(不当地)称作静态(范围选取)变数。
.PP
例如：
.PP
.Vb 3
\&    sub visible {
\&        print "var has value $var\en";
\&    }
.Ve
.PP
.Vb 4
\&    sub dynamic {
\&        local $var = 'local';   # 为全局变量暂时赋值
\&        visible();              # 调用 $var 变量
\&    }
.Ve
.PP
.Vb 4
\&    sub lexical {
\&        my $var = 'private';    # 新的私有变量 $var
\&        visible();              # (在 sub 作用域之外不可见)
\&    }
.Ve
.PP
.Vb 1
\&    $var = 'global';
.Ve
.PP
.Vb 3
\&    visible();                  # prints global
\&    dynamic();                  # prints local
\&    lexical();                  # prints global
.Ve
.PP
你可以发现在整个过程中 ``private''这个值都印不出来。那是因为 $var的值只存在于lexical() 函数的区块里面，对它所呼叫的函数来说是看不到的。
.PP
总结来说，local()不会产生你想像中的私有、区域变数。它只是将一个暂时的值授予一个全域变数。如果你要的是私有的变数，那么 my() 才是你要找的。
.PP
参见 perlsub 中的 \*(L"Private Variables via \fImy()\fR\*(R" 以及
\&\*(L"Temporary Values via \fIlocal()\fR\*(R" 来获取详情
.Sh "在存在同名内部变量的作用域中，如何存取一个动态变量？"
.IX Subsection "How can I access a dynamic variable while a similarly named lexical is in scope?"
如果你知道你所在的是哪一个包裹(package)的话，你可以直接指名，就像写 \f(CW$Some_Pack::var\fR 这样。注意 \f(CW$::var\fR 这个写法 并非表示目前此包裹 (package) 内的动态变数 $var，而是指在 main包裹(package) 里的那个，就等价于 \f(CW$main::var\fR 。
.PP
.Vb 3
\&        use vars '$var';
\&        local $var = "global";
\&        my    $var = "lexical";
.Ve
.PP
.Vb 2
\&        print "lexical is $var\en";
\&        print "global  is $main::var\en";
.Ve
.PP
可选的，可以使用编译器指令 \fIour()\fR 来在当前静态作用域中引入动态变量
.PP
.Vb 2
\&        require 5.006; # our() did not exist before 5.6
\&        use vars '$var';
.Ve
.PP
.Vb 2
\&        local $var = "global";
\&        my $var    = "lexical";
.Ve
.PP
.Vb 1
\&        print "lexical is $var\en";
.Ve
.PP
.Vb 4
\&        {
\&          our $var;
\&          print "global  is $var\en";
\&        }
.Ve
.Sh "深连接和浅连接有什么不同？"
.IX Subsection "What's the difference between deep and shallow binding?"
在深连结中，匿名函数中所用到的文字式变数值是以该函数产生时所在的范围为准。在浅连结中，这些变数值是以函数被呼叫时所在的范围为准，如果在这个范围中恰巧有同名的变数，便使用这些当地变数的值。Perl总是使用文字式变数(就是以 my()创造的)式的深连结。然而，动态变数(也称作全域(global)，区域(local)，或包裹(package)变数)在功效上是浅连结。就把这当作是少用它们的另一个理由好 了。请参考 "什么是闭包" 一节。
.ie n .Sh "为什么 "my($foo) = ;" 不工作？"
.el .Sh "为什么 ``my($foo) = ;''不工作？"
.IX Subsection "Why doesn't ""my($foo) = ;"" work right?"
local()会把 =号右边以序列情境来对待。而  这个阅读的 动作，就像 Perl里许多的函数以及运算子一样，会自动分辨出自己被呼叫时所在的情境并且采取适当的作法。一般来说，scalar()函数可以帮点忙。这个函数实际上对资料本身不会有任何作用(与一般所认为的相反)，但是会告诉它所作用的函数要以对待纯量值的方法来运算。如果那个函数没有预先定义好碰到纯量情境的行为，那么它当然也帮不了你(例如 sort() 函数)。
.PP
然而，在以上这个例子 (local...)中，只要省略括号便可强制使用标量情境：
.PP
.Vb 3
\&    local($foo) = ;           # WRONG
\&    local($foo) = scalar();   # ok
\&    local $foo  = ;           # right
.Ve
.PP
其实在这个例子中，或许你该改用文字式变数 (lexical variables)，不过会碰到 的问题跟上面一样：
.PP
.Vb 2
\&    my($foo) = ;  # WRONG
\&    my $foo  = ;  # right
.Ve
.Sh "如何重定义一个内建函数，操作符 或者方法？"
.IX Subsection "How do I redefine a builtin function, operator, or method?"
为什么要这么做？ :\-)
.PP
如果你要覆盖掉某个内建函数，例如说 open()，那你得将其定义从另一个模组载 入。参考 perlsub 中的 Overriding Builtin Functions。在 \*(L"Class::Template\*(R" 里面也有个范例。
.PP
如果你要覆盖掉一个 Perl运算子，像是 \f(CW\*(C`+\*(C'\fR 或 \f(CW\*(C`**\*(C'\fR, 那你该使用 \f(CW\*(C`use overload\*(C'\fR 这个编用，在 overload 中有记载。
.PP
如果你要覆盖父类别 (parent class)里的方法呼叫 (method calls)，请看 perltoot 中的 Overridden Methods 。
.Sh "调用函数时 &foo 和 foo() 的形式有什么不同?"
.IX Subsection "What's the difference between calling a function as &foo and foo()?"
当你用 &foo的方式呼叫一个函数时，你等于让这个函数撷取你目前 @_里面的值，同时也跳过原型定义 (prototypes)不用。这表式此函数抓到的是你当时的 @_， 而非一个空的 @_！虽然严格讲起来它也不能算是个 bug (但是在 perlsub里面是这么说的)但在大部份情况下，这也算不上是个特别功能。
.PP
当你用 &foo()的方式呼叫你的函数时，你会得到一个新的 @_，但是原型定义 仍然会被避开不用。
.PP
在一般情况下，你该用 foo()的方式去呼叫函数。只有在编译器已事先知道这个函数的定义时，括号才能省略，譬如当这个函数所在的模组或包裹被 use (但如果是被 require则不行)时，或是透过先前提及或 use subs宣告等方法，让编译器先接触到这个函数的定义。用这种呼叫方式，即使是当括号省掉时，你都会得到一个干净的 @_，不会有任何不该出现的旧值残留在上面。
.Sh "如何创建一个分支语句？"
.IX Subsection "How do I create a switch or case statement?"
这个问题在 perlsyn 文件里有更详尽的解释。简单来说，因为 Perl本身已提供了多种不同的条件测试方法可供使用 (数值比较、字串比较、 glob比较、正规表示式 对应、覆盖比较，及其它)，所以并没有正式的 case叙述语法。虽然自 perl1起这就一直是许多人期盼的一个项目，但因 Larry无法决定怎样才是呈现这功能的最好方法，因此还是将它略掉。
.PP
从 Perl 5.8 开始，要使用 swtich 和 case，可以使用 Switch 扩展，就是这样：
.PP
.Vb 1
\&        use Switch;
.Ve
.PP
此后就可以用 switch 和 case 了.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.
.PP
But if one wants to use pure Perl, the general answer is to write a
construct like this:
.PP
.Vb 6
\&    for ($variable_to_test) {
\&        if    (/pat1/)  { }     # do something
\&        elsif (/pat2/)  { }     # do something else
\&        elsif (/pat3/)  { }     # do something else
\&        else            { }     # default
\&    }
.Ve
.PP
下面这个简单的 switch范例以模式对应为基础。我们将要做的是对储存在 $whatchamacallit里面的参考值 (reference)的类型进行多重条件的判断。【译注：$whatchamacallit 函意为 $what_you_might_call_it】
.PP
.Vb 1
\&    SWITCH: for (ref $whatchamacallit) {
.Ve
.PP
.Vb 1
\&        /^$/            && die "not a reference";
.Ve
.PP
.Vb 4
\&        /SCALAR/        && do {
\&                                print_scalar($$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /ARRAY/         && do {
\&                                print_array(@$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /HASH/          && do {
\&                                print_hash(%$ref);
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 4
\&        /CODE/          && do {
\&                                warn "can't print function ref";
\&                                last SWITCH;
\&                        };
.Ve
.PP
.Vb 1
\&        # DEFAULT
.Ve
.PP
.Vb 1
\&        warn "User defined type skipped";
.Ve
.PP
.Vb 1
\&    }
.Ve
.PP
See \f(CW\*(C`perlsyn/"Basic BLOCKs and Switch Statements"\*(C'\fR for many other
examples in this style.
.PP
Sometimes you should change the positions of the constant and the variable.
For example, let's say you wanted to test which of many answers you were
given, but in a case-insensitive way that also allows abbreviations.
You can use the following technique if the strings all start with
different characters or if you want to arrange the matches so that
one takes precedence over another, as \f(CW"SEND"\fR has precedence over
\&\f(CW"STOP"\fR here:
.PP
.Vb 6
\&    chomp($answer = <>);
\&    if    ("SEND"  =~ /^\eQ$answer/i) { print "Action is send\en"  }
\&    elsif ("STOP"  =~ /^\eQ$answer/i) { print "Action is stop\en"  }
\&    elsif ("ABORT" =~ /^\eQ$answer/i) { print "Action is abort\en" }
\&    elsif ("LIST"  =~ /^\eQ$answer/i) { print "Action is list\en"  }
\&    elsif ("EDIT"  =~ /^\eQ$answer/i) { print "Action is edit\en"  }
.Ve
.PP
A totally different approach is to create a hash of function references.
.PP
.Vb 6
\&    my %commands = (
\&        "happy" => \e&joy,
\&        "sad",  => \e&sullen,
\&        "done"  => sub { die "See ya!" },
\&        "mad"   => \e&angry,
\&    );
.Ve
.PP
.Vb 7
\&    print "How are you? ";
\&    chomp($string = );
\&    if ($commands{$string}) {
\&        $commands{$string}->();
\&    } else {
\&        print "No such command: $string\en";
\&    }
.Ve
.Sh "如何捕获对未定义变量，函数或方法的访问？"
.IX Subsection "How can I catch accesses to undefined variables, functions, or methods?"
在 perlsub 中的 \*(L"Autoloading\*(R" 和 perltoot 中的 \*(L"\s-1AUTOLOAD:\s0 Proxy Methods\*(R" 里 提到的 AUTOLOAD 方法让你能捕捉对于未定义函数与方法的呼叫。
.PP
When it comes to undefined variables that would trigger a warning