---
author: Seth Kenlon
category: 技术
comments_data:
- date: '2021-07-12 16:53:03'
  message: 点赞。生命在于折腾。
  postip: 124.79.17.123
  username: 来自上海的 Chrome 91.0|Mac 10.15 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7564
date: '2021-07-12 10:50:01'
editorchoice: false
excerpt: 即使你用的是诸如 Gmail 的托管邮件服务，你也可以通过 Mutt 在终端里收发电子邮件。
fromurl: https://opensource.com/article/21/7/gmail-linux-terminal
id: 13573
islctt: true
largepic: /data/attachment/album/202107/12/104952frwgx4oz4xrinbxl.jpg
permalink: /article-13573-1.html
pic: /data/attachment/album/202107/12/104952frwgx4oz4xrinbxl.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 即使你用的是诸如 Gmail 的托管邮件服务，你也可以通过 Mutt 在终端里收发电子邮件。
tags:
- Mutt
- Gmail
- 邮件
thumb: false
title: 在 Linux 命令行中收发 Gmail 邮件
titlepic: true
translator: HankChow
updated: '2021-07-12 10:50:01'
---
> 
> 即使你用的是诸如 Gmail 的托管邮件服务，你也可以通过 Mutt 在终端里收发电子邮件。
> 
> 
> 
![](/data/attachment/album/202107/12/104952frwgx4oz4xrinbxl.jpg "young woman working on a laptop")
我喜欢在 Linux 终端上读写电子邮件的便捷，因此我是 [Mutt](http://www.mutt.org/) 这个轻量简洁的电子邮件客户端的忠实用户。对于电子邮件服务来说，不同的系统配置和网络接入并不会造成什么影响。这个客户端通常隐藏在我 Linux 终端的 [某个标签页或者某个终端复用器的面板](https://opensource.com/article/21/5/linux-terminal-multiplexer) 上，需要用的时候随时可以调出来，不需要使用的时候放到后台，就不需要在桌面上一直放置一个电子邮件客户端的应用程序。
当今我们大多数人使用的都是托管电子邮件账号，在这种使用场景中并不会与电子邮件协议发生过多的直接交互。而 Mutt（以及更早的 ELM）是在更简单的时代创建的，那时候检查邮件只是对 `uucp` 的调用，以及对 `/var/mail` 的读取。当然 Mutt 也很与时俱进，随着各种流行的协议（如 POP、IMAP、LDAP）出现，它都实现了良好的支持。因此，即使我们使用的是 Gmail 这种邮件服务，也可以与 Mutt 无缝衔接。
如今在大多数情况下，用户都不会拥有自己的电子邮件服务器，大部分用户都会选择 Gmail，因此下文会以 Mutt + Gmail 为例作介绍。如果你比较注重电子邮件隐私，不妨考虑 [ProtonMail](https://protonmail.com) 或者 [Tutanota](https://tutanota.com)，它们都提供完全加密的电子邮件服务。其中 Tutanota 包含很多 [开源组件](https://github.com/tutao/tutanota)，而 ProtonMail 则为付费用户提供 [IMAP 桥接](https://protonmail.com/bridge/)，简化了在非浏览器环境下的邮件访问。不过，很多公司、学校和组织都没有自己的电子邮件服务，而是使用 Gmail 提供的邮件服务，这样一来，大部分用户都会有一个 Gmail 邮箱。
当然，如果你自己就 [拥有电子邮件服务器](https://www.redhat.com/sysadmin/configuring-email-server)，那么使用 Mutt 就更简单了。下面我们开始介绍。
### 安装 Mutt
在 Linux 系统上，一般可以直接从发行版提供的软件库中安装 Mutt，另外需要在家目录中创建一个 `.mutt` 目录以存放配置文件：
```
$ sudo dnf install mutt
$ mkdir ~/.mutt
```
在 MacOS 上，可以通过 [MacPorts](https://opensource.com/article/20/11/macports) 或者 [Homebrew](https://opensource.com/article/20/6/homebrew-mac) 安装；在 Windows 上则可以使用 [Chocolatey](https://opensource.com/article/20/3/chocolatey) 安装。
Mutt 是一个 邮件用户代理   Mail User Agent （MUA），因此它的作用是读取、编写以及向外部邮件池发送邮件。向邮件服务器实际传输邮件是其它应用或邮件服务的工作，尽管它们可以和 Mutt 进行协作，让我们看起来是 Mutt 完成了所有功能，但实际上并非如此。在弄懂了两者之间的区别之后，我们会对 Mutt 的配置更加清楚。
这也是为什么除了 Mutt 之外，我们还需要视乎进行通信的服务种类选择一些辅助应用程序。在本文中我使用的是 IMAP 服务，这可以让我本地的电子邮件副本与电子邮件服务提供商的远程邮件副本保持同步。如果你选择 POP 服务，配置的难度就更下一个台阶了，也无需依赖其它外部工具。我们需要 OfflineIMAP 这个 Python 应用程序来实现 IMAP 的集成，这个应用程序可以在 [它的 GitHub 存储库](https://github.com/OfflineIMAP/offlineimap3) 获取。
OfflineIMAP 目前仍然在从 Python 2 移植到 Python 3，目前需要手动安装，但以后你也可以通过 `python3 -m pip` 命令进行安装。
OfflineIMAP 依赖于 `imaplib2` 库，这个库也在努力开发当中，所以我更喜欢手动安装。同样地，也是通过 Git 将代码库克隆到本地，进入目录后使用 `pip` 安装。
首先安装 `rfc6555` 依赖：
```
$ python3 -m pip install --user rfc6555
```
然后从源码安装 `imaplib2`：
```
$ git clone PI:EMAIL:jazzband/imaplib2.git
$ pushd imaplib2.git
$ python3 -m pip install --upgrade --user .
$ popd
```
最后从源码安装 OfflineIMAP：
```
$ git clone PI:EMAIL:OfflineIMAP/offlineimap3.git
$ pushd offlineimap3.git
$ python3 -m pip install --upgrade --user .
$ popd
```
如果你使用的是 Windows 上的 Cygwin，那么你还需要安装 [Portlocker](https://pypi.org/project/portalocker)。
### 配置 OfflineIMAP
OfflineIMAP 默认使用 `~/.offlineimaprc` 这个配置文件，在它的代码库中会有一个名为 `offlineimap.conf` 的配置模板，可以直接将其移动到家目录下：
```
$ mv offlineimap3.git/offlineimap.conf ~/.offlineimaprc`
```
你可以使用任何文本编辑器打开浏览这个配置文件，它的注释很完善，便于了解各个可用的配置项。
以下是我的 `.offlineimaprc` 配置文件，为了清晰起见，我把其中的注释去掉了。对于你来说其中有些配置项的值可能会略有不同，但或许会为你的配置带来一些启发：
```
[general]
ui = ttyui
accounts = %your-gmail-username%
pythonfile = ~/.mutt/password_prompt.py
fsync = False
[Account %your-gmail-username%]
localrepository = %your-gmail-username%-Local
remoterepository = %your-gmail-username%-Remote
status_backend = sqlite
postsynchook = notmuch new
[Repository %your-gmail-username%-Local]
type = Maildir
localfolders = ~/.mail/%your-gmail-username%-gmail.com
nametrans = lambda folder: {'drafts':  '[Gmail]/Drafts',
                            'sent':    '[Gmail]/Sent Mail',