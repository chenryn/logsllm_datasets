if (prime[j]){
--count ;
prime[j] - false;
do {
i += 2;
---
## Page 74
9.4数字处理
69/143 -
}uhile（i 0&k 1162261467 % n == 0;
9.5随机与取样
384. Shuffle an Array (Medium)
题目描述
给定一个数组，要求实现两个指令函数。第一个函数“shume”可以随机打乱这个数组，第
二个函数“reset”可以恢复原来的顺序。
---
## Page 77
9.5随机与取样
72/143 -
输人输出样例
输入是一个存有整数数字的数组，和一个包含指令函数名称的数组。输出是一个二维数组，
表示每个指令生成的数组。
Input: nums - [1,2,3], actions: ["shuffle","shuffle",“reset"]
Output: [[2,1,3] , [3,2,1], [1,2,3]]
在这个样例中，前两次打乱的结果只要是随机生成即可。
题解
我们采用经典的Fisher-Yates洗牌算法，原理是通过随机交换位置来实现随机打乱，有正向
和反向两种写法，且实现非常方便。注意这里“reset”函数以及类的构造函数的实现细节。
class Solution {
vector origin;
public:
Solution(vector nums) : origin(std: :move (nums)) {}
vector reset() {
return origin;
vector shuffle() {
if (origin.empty()) return {};
vector shuffled(origin);
int n = origin.size();
//可以使用反向或者正向洗牌，效果相同。
//反向洗牌：
for (int i - n - 1;  >= 0; --i) {
swap(shuffled[i], shuffled[rand() % (i + 1)]);
//正向洗牌：
上
// for (int i = O; i  sums;
public:
Solution(vector weights): sums (std: :move(weights)) {
partial_sum(sums.begin() , sums.end() , sums.begin()) ;
F
int pickIndex(){
int pos = (rand() % sums.back()) + 1;
return lower_bound (sums.begin() , sums .end() , pos) - gums.begin();
};
382.Linked List Random Node (Medium)
题目描述
给定一个单向链表，要求设计一个算法，可以随机取得其中的一个数字。
输人输出样例
输入是一个单向链表，输出是一个数字，表示链表里其中一个节点的值。
Input: 1->2->3>4>5
Output: 3
在这个样例中，我们有均等的概率得到任意一个节点，比如3。
题解
不同于数组，在未遍历完链表前，我们无法知道链表的总长度。这里我们就可以使用水库采
样：遍历一次链表，在遍历到第m个节点时，有的概率选择这个节点覆盖掉之前的节点选择，
---
## Page 79
9.6练习
74/143 -
我们提供一个简单的，对于水库算法随机性的证明。对于长度为n的链表的第m个节点，最
后被采样的充要条件是它被选择，且之后的节点都没有被选择。这种情况发生的概率为××
×-×=.因此每个点都有均等的概率被选择。
class Solution {
public:
Solution(ListNode* n) : head(n) {)
int getRandom(){
int ans = head->val;
ListMode* node - head->next;
int i = 2;
vhile (node){
if ((rand() % i)== 0){
ans = node->val;
++i;
xau>”算术右移。以下是一些常见的位运算特性，其中0s和1s分别表示只由0或1
构成的二进制数字。
x0s=x
0=0x
x 1 0s = x
x ^ 1s =
"x
x & 18 = x
x 1 1s = 1s
x = 0
x&x=x
x 1 x = x
除此之外，n&（n-1）可以去除n的位级表示中最低的那一位，例如对于二进制表示11110100
，减去1得到11110011，这两个数按位与得到11110000。n&（-n）可以得到n的位级表示中最低
的那一位，例如对于二进制表示11110100，取负得到00001100，这两个数按位与得到00000100。
还有更多的并不常用的技巧，若读者感兴趣可以自行研究，这里不再赞述。
10.2位运算基础问题
461.Hamming Distance (Easy)
题目描述
给定两个十进制数字，求它们二进制表示的汉明距离（Hammingdistance，即不同位的个数）。
输人输出样例
输入是两个十进制整数，输出是一个十进制整数，表示两个输入数字的汉明距离。
Input: x = 1, y = 4
Output:2
在这个样例中，1的二进制是0001，4的二进制是0100，一共有两位不同。
对两个数进行按位异或操作，统计有多少个1即可，
---
## Page 82
10.2住运算基础问题
77/143
int hammingDistance(int x, int y) {
int diff = x ^ y, ans = 0;
while (diff) {
ans += diff & 1;
diff >>= 1;
return ans;
190. Reverse Bits (Easy)
题目描述
给定一个十进制整数，输出它在二进制下的翻转结果。
输人输出样例
输入和输出都是十进制整数。
Input: 43261596 (00000010100101000001111010011100)
Output : 964176192 (00111001011110000010100101000000)
题解
使用算术左移和右移，可以很轻易地实现二进制的翻转。
uint32_t reverseBits(uint32_t n){
uint32_t ans = 0;
for (int i = 0; i < 32; ++i) {
ans <<= 1;
ans += n & 1;
 =<< u
return ans;
136. Single Number (Easy)
题目描述
给定一个整数数组，这个数组里只有一个数次出现了一次，其余数字出现了两次，求这个只