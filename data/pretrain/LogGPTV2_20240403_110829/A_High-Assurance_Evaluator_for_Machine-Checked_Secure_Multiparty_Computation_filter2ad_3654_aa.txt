title:A High-Assurance Evaluator for Machine-Checked Secure Multiparty Computation
author:Karim Eldefrawy and
Vitor Pereira
A High-Assurance Evaluator for Machine-Checked Secure
Multiparty Computation
Karim Eldefrawy1 and Vitor Pereira2,3
1 SRI International
2 INESC TEC
3 FC Universidade do Porto
Abstract. Secure Multiparty Computation (MPC) enables a group of n distrusting parties to jointly
compute a function using private inputs. MPC guarantees correctness of computation and conﬁdentiality
of inputs if no more than a threshold t of the parties are corrupted. Proactive MPC (PMPC) addresses
the stronger threat model of a mobile adversary that controls a changing set of parties (but only up to t
at any instant), and may eventually corrupt all n parties over a long time.
This paper takes a ﬁrst stab at developing high-assurance implementations of (P)MPC. We formalize
in EasyCrypt, a tool-assisted framework for building high-conﬁdence cryptographic proofs, several
abstract and reusable variations of secret sharing and of (P)MPC protocols building on them. Using
those, we prove a series of abstract theorems for the proactive setting. We implement and perform
computer-checked security proofs of concrete instantiations of the required (abstract) protocols in
EasyCrypt.
We also develop a new tool-chain to extract high-assurance executable implementations of protocols
formalized and veriﬁed in EasyCrypt. Our tool-chain uses Why3 as an intermediate tool, and enables
us to extract executable code from our (P)MPC formalizations. We conduct an evaluation of the
extracted executables by comparing their performance to performance of manually implemented versions
using Python-based Charm framework for prototyping cryptographic schemes. We argue that the small
overhead of our high-assurance executables is a reasonable price to pay for the increased conﬁdence
about their correctness and security.
Keywords: Secure Multiparty Computation, Veriﬁed Implementation, High-Assurance Cryptography
1
Introduction
Correctly designing secure cryptographic primitives and protocols is a non-trivial task. We argue that not
only is it hard to correctly design them, but so is it to correctly and securely implement them in software.
This issue is particularly ampliﬁed in settings where protocols involve multiple parties, and when they should
guarantee security against strong adversaries beyond passive ones4.
There are several eﬀorts implementing (advanced) cryptographic primitives and protocols available to
developers, such as OpenSSL 5, s2n 6, BouncyCastle 7, Charm [2], SCAPI [34], FRESCO 8 [30], TASTY [49],
SCALE-MAMBA 9, EMP 10, Sharemind [22,23]. Such tools and libraries typically aim to improve usability,
software reliability, and performance. Some of them also target cloud-based and large distributed applications,
aiming to deploy secure and privacy-preserving distributed computations to address practical challenges. A
missing aspect of most of these eﬀorts is the increased conﬁdence obtained in security and correctness of
4 Often called honest-but-curious or semi-honest, we use those terms interchangeably in this paper.
5 https://www.openssl.org
6 https://github.com/awslabs/s2n
7 https://www.bouncycastle.org
8 https://github.com/aicis/fresco
9 https://github.com/KULeuven-COSIC/SCALE-MAMBA
10 https://github.com/emp-toolkit
the design and implementation of such complex (cryptographic) algorithms and protocols when utilizing
computer-aided formal veriﬁcation and synthesis. Because of this, subsequent work [3,14,20,19,24,41,10,4]
started tackling veriﬁcation of cryptographic primitives and protocols, and software implementations thereof.
One notable example is Project Everest 11 which provides a collection of tools and libraries that can be
combined together and generate a mixture of C and assembly code that implements TLS 1.3, with proofs of
safety, correctness, security and various forms of side-channel resistance.
Several authors began exploring how such high-assurance design and implementation of cryptography
can be applied to more complex secure (two-party) computation and multiparty computation (MPC)
protocols [9,29,23,56,64,28,46,4]. Nevertheless, we identify a series of limitations of such eﬀorts:
1) Limited number of parties - [29,4,56] such work typically considers the case of two-party computation.
2) Lack of security guarantees against strong adversaries - the work that goes beyond two parties [9,23,64,68,47]
typically focuses on the semi-honest adversary model.
3) Lack of high-assurance implementations for active adversaries - even when active adversaries and
multiple parties are considered [46,47], there are no automatically (and veriﬁably) synthesized executable
implementations from protocol speciﬁcations that were checked using computer-aided veriﬁcation.
Table 1 summarizes the most relevant recent work on veriﬁcation of complex cryptographic protocols
involving multiple parties and withstanding strong adversaries. A more detailed comparison with related
work is provided in Section 6.
Finally, the semi-honest and active adversary models, while covering a large set of possible applications
of MPC, do not cover scenarios in which complex distributed systems are built and run for long durations,
and where strong persistent adversaries continuously attack them. For example, those two models do not
cover the case where adversaries can corrupt all parties over a long period of time. Proactive MPC (PMPC)
addresses the stronger threat model of a mobile adversary that controls a changing set of parties (but only
up to t at any instant), and may eventually corrupt all n parties over a long time throughout the course of a
protocol’s execution, or lifetime of conﬁdential inputs. The main intuition behind proactive secret sharing
(that typically underlies PMPC) is to periodically re-randomize (refresh) shares of secrets and delete old ones,
thus preventing an adversary that collects all shares from diﬀerent periods to combine them together. In
the proactive setting, parties are periodically reset (recovered ) to a clean state to ensure that adversarial
corruptions are purged. Such reset parties have to run a recovery protocol to obtain their new non-corrupted
state (secret shares) and re-join the secure computation system.
To the best of our knowledge there are currently no publicly available high-assurance implementations of
formally veriﬁed and machine-checked (P)MPC withstanding active adversaries. By high-assurance we mean
automatically (and veriﬁably) synthesized from protocol speciﬁcations that were checked using computer-aided
veriﬁcation. This paper takes a ﬁrst stab at developing such high-assurance implementations of (P)MPC, and
as a side contribution performs the ﬁrst computer-aided veriﬁcation of a variant of the fundamental BGW [18]
MPC protocol for passive and static active adversaries using EasyCrypt (with computational security in the
latter case).
Below we discuss challenges facing our work, followed by details of our contributions addressing these
challenges. We ﬁnish this section with a brief description of our ﬁnal veriﬁed (P)MPC evaluator (illustrated
in Figure 1).
1.1 Challenges
We face two main challenges: developing machine-checked speciﬁcations and proofs for (P)MPC and underlying
building block primitives, and obtaining automatically synthesized veriﬁed implementations of such protocols.
Machine-checked formalization and security proofs of MPC protocols (with multiple parties, sub-protocols,
and guaranteeing security against mobile active adversaries) is a complex task that involves knowledge
that spans cryptography, distributed computing and programming languages. Particularly, using a tool
11 https://project-everest.github.io
2
Previous Protocol / Adversary E2E High-
Work Num. Parties Model Proof Assurance
[68]
PCR [68] /
Passive
Yes
[4]
3 Parties
Yao [72] /
2 Parties
Passive
Yes
[47]
Maurer [58] /
Active
No*
N Parties
Our
Work
BGW [18] /
N Parties
Passive & Yes
(Pro)Active
No
Yes
No
Yes
Table 1: Comparison of the most relevant computer-aided veriﬁcation and high-assurance implementations of
secure computation protocols. Private Count Retrieval (PCR) is an application-speciﬁc database querying
protocol involving 3 parties (client, server, and a trusted third party). *The authors in [47] prove that certain
properties are satisﬁed by the protocol in [58] is checked in EasyCrypt, then it is manually proven that a
simulator exists if these properties hold. Our work contains E2E proofs in EasyCrypt without any manual
steps.
like EasyCrypt to come up with a machine-checked proof is not easy, because one has to accommodate
complex cryptographic schemes and protocol using descriptions that can be used inside the EasyCrypt system.
Additionally, formalizing MPC protocols also involves formalizing the underlying mathematical structures
upon which they build. Despite EasyCrypt already providing a large set of mathematical constructions, we
still needed to formalize additional libraries, specially to deal with polynomials over ﬁnite ﬁelds.
There are currently no (publicly available) tools for automatically synthesizing veriﬁed implementations
of complex cryptographic (multiparty) protocols. Two possible approaches to tackle this objective consist
on either starting with a software implementation of the protocol and then attempt to prove properties
surrounding that implementation or starting with a proof script (with a formal speciﬁcation and proofs) and
derive a concrete implementation from it. In this work, we generated a concrete veriﬁed correct-by-construction
executable software implementation from a proof script. Using our new EasyCrypt extraction tool-chain, we
were able to obtain such implementation of an MPC evaluator with (optional) proactive security guarantees.
1.2 Contributions
In this paper, we develop a high-assurance formally-veriﬁed proactive secure multiparty computation, (P)MPC,
evaluator based on machine-checked proactive (veriﬁable) secret sharing and the BGW [18] protocol. As a
side contribution we also perform the ﬁrst computer-aided veriﬁcation of a variant of the fundamental BGW
protocol for passive and static active adversaries (with computational security in the latter case). In what
follows, we outline the main contributions of this work.
Speciﬁcation and computer-aided proofs of (P)MPC in EasyCrypt Our proof is performed in the
computation model, using the game-based infrastructure provided by EasyCrypt’s engine. We make use of the
real/ideal paradigm to specify our security notions. We deﬁne an environment that is able to select inputs for
each party involved in the protocol. The environment has the ability to trigger an adversary that actively
corrupts parties (change their inputs, remove them from the execution, etc.) via oracles. This adversary
interacts with an evaluator that either retrieves to the adversary information from a real execution of the
protocol or from an ideal and simulated one. The adversary redirects this information to the environment that
tries to distinguish between the two possibilities mentioned. The malicious setting requires a computational
bound in our proofs due to the use of the Decision Diﬃe-Hellman (DDH) assumption in the underlying
veriﬁable secret sharing (VSS).
To accomplish the computer-aided veriﬁcation we start by identifying appropriate levels of abstraction for
MPC protocols (in terms of speciﬁcation, security and composition) to allow the simpliﬁcation and reuse of
3
Fig. 1: Overview of the veriﬁed (P)MPC evaluator; veriﬁed sub-protocols are highlighted in blue. Parties
ﬁrst share their private inputs (via the Share protocol) which are then passed to the evaluator. The
evaluator interprets computation as an arithmetic circuit using veriﬁed implementations of addition (π+) and
multiplication (πx) protocols based on the BGW [18] protocol. Parties locally compute additions and halt on
every multiplication, where they synchronize executions. These protocols can be sequentially composed with
the Refresh (πref resh ) and Recover protocols (πrecover) to provide proactive security. At the end of the
evaluation, the result of the computation is obtained by reconstructing the output shares via a Reconstruct
protocol.
proof steps across the main proof. This abstract structure is an interesting side contribution of this work. It
is general enough to be reused since it accommodates many possible instantiations of both MPC and secret
sharing protocols. It can be a starting point for other machined-checked MPC proofs to be performed in the
future. We also provide a collection of useful lemmas proven in the abstract (such as composition lemmas);
this means that any user that wants to leverage advantage of our abstract architecture already has a set of
lemmas that can be carried out to concrete instantiations with very little eﬀort and in a mechanical way.
Our abstract structure can then be used in other MPC proofs and/or can be tested with diﬀerent concrete
implementations of MPC protocols, other than the ones we provide. We succinctly show how the abstract
framework can be reused in Section 3. The proof is completed by providing concrete instantiations that match
the abstract deﬁnitions, e.g., a variant of the BGW [18] protocol in case of MPC, and in addition to standard
and proactive secret sharing, proactive secret sharing for dishonest majorities [32,35,12].
Veriﬁed extraction tool-chain In order to obtain a veriﬁed implementation of the concrete protocol
instantiations deﬁned in EasyCrypt, we developed a new extraction tool-chain for EasyCrypt. We use the
Why3 framework [39,38] as an intermediate layer in the extraction process; this allows us to use Why3’s new
powerful extraction mechanism [60] to obtain veriﬁed implementations of EasyCrypt descriptions in multiple
target languages. In this work we only extract executable OCaml code, but our pipeline can be extended to
extract C code with some additional work.
4
P1P2x1...xny1...ynz1...znzCircuitLayer1Shareπ×π+πrefreshπrecoverxyReconstruct...As a side, an important feature of our veriﬁed MPC evaluator, or the (proactive) secret sharing components
thereof, is the possibility of applying it in other contexts and in other projects. For example, it can be
composed with a veriﬁed arithmetic circuit generator to build a veriﬁed MPC stack similarly to that for the
two-party case in previous work [4].
A Note on Universal Compostability (UC) Our EasyCrypt formalizations are not in the UC framework. In
parallel to our work, Stoughton et al. formalized in EasyCrypt a UC proof of security of secure message
communication using a one-time pad generated using the Diﬃe-Hellman key exchange 12. To the best of our
knowledge their work does not cover (P)MPC. Extending our work to the UC framework (possibly using the
framework of Stoughton et al.) is an interesting avenue for future work but outside the scope of this paper.
1.3 Overview of Operation of the Veriﬁed (P)MPC Evaluator
The architecture of our evaluator is shown in Figure 1, where veriﬁed sub-protocols are highlighted in blue.
Computing parties start by sharing their private inputs (via the Share protocol), shares are then passed to
our evaluator which is running on each party. The evaluator is able to interpret arithmetic circuits using
veriﬁed implementations of an addition (add or π+) and multiplication (mul or πx) protocols based on a
variant of the BGW protocol; in this variant of BGW we use a computationally secure veriﬁed secret sharing,
VSS, scheme. Parties can locally compute additions and will halt on every multiplication protocol, where
they synchronize executions. These protocols can then be combined with the refresh (or πref resh) and
recover protocols (or πrecover) to achieve proactive security. At the end of the evaluation, the result of the
computation can be obtained by reconstructing the output shares of the veriﬁed secure evaluator via the
Reconstruct protocol.
The Share, Reconstruct and the subsequent protocols for evaluating arithmetic gates are implemented
and machine-checked in EasyCrypt. Our speciﬁcations and proofs for proactive secret sharing are based on the
work by Dolev et al. [32], Eldefrawy et al. [35] and Baron et al. [12] for the dishonest majority setting. When
we extend the protocols to MPC, we follow the BGW [18] protocol which only deals with honest majority.
One of the important contributions of our work is completing the ﬁrst computer-aided veriﬁcation of a variant
of the BGW protocol for passive and (static) active adversaries.
Limitations Formalization of underlying mathematical structures and basic components (i.e., ﬁnite ﬁelds and
cyclic groups and randomness generation), as well as the formalization of a Reed-Solomon decoder (e.g., the
Berlekamp-Welch algorithm), is out of scope of this work and is left abstract in our EasyCrypt code. Our
Trusted Computing Base (TCB) includes precisely the tools used to instantiate these abstract components:
Cryptokit, used to instantiate randomness generation, the OCaml zarith library, used to instantiate ﬁnite
ﬁelds and cyclic groups and ﬁnally ocaml-reed-solomon-erasure, an OCaml implementation of a Reed-Solomon
decoder.
1.4 Paper Outline
In Section 2, we provide informal descriptions of the cryptographic primitives and protocols that are used
in this paper. Section 3 describes how EasyCrypt is used to obtain a concrete proof of security for the
aforementioned primitives and protocols. We describe in Section 4 our EasyCrypt extraction tool-chain and
how it is used to synthesize a concrete implementation of the evaluator. Performance of the extracted
implementations is in Section 5. We ﬁnish up by summarizing related work in Section 6, and concluding the
paper with a discussion of future research directions in Section 7.
12 https://github.com/easyuc/EasyUC
5
2 Preliminaries: (Proactive) Secret Sharing and MPC
Secret sharing In secret sharing [66,21], a secret s is shared among n parties such that an adversary corrupting
up to t parties cannot learn s, while any t + 1 parties can recover s. A secret sharing protocol consists of two
sub-protocols: Share and Reconstruct. Initially, secret sharing schemes only considered (exclusively) passive
or active adversaries, and later work [52] generalized this to mixed adversaries.
Proactive secret sharing (PSS) The security of secret sharing should be guaranteed throughout the entire
lifetime of the secret. The notion of proactive security was ﬁrst suggested by Ostrovsky and Yung [59],
and applied to secret sharing in [50]. It protects against a mobile adversary that can change the subset of
corrupted parties over time. Such an adversary could eventually gain control of all parties over a long enough
period, but is limited to corrupting less than t parties during the same period. In this work, we use the
deﬁnition of PSS from [52,33]: in addition to Share and Reconstruct, a PSS scheme contains a Refresh and
a Recover sub-protocols. Refresh produces new shares of s from an initial set of shares. An adversary that
controls a subset of the parties before the refresh and the remaining subset of parties after, will not be able to
reconstruct the value of s. Recover is required when one of the participant is rebooted to a clean initial state.
In this case, the Recover protocol is executed by all other parties to provide shares to the rebooted party.
Ideally such rebooting is performed sequentially for randomly chosen parties at a predetermined rate – hence
the “proactive” security idea. In addition, Recover could be executed after an active corruption is detected.
While most of the literature on PSS focuses on the honest majority setting [59,50,71,73,25,11,13,65], the ﬁrst
PSS with dishonest majority was proposed by Dolev et al. in [33]. Standard (linear) secret sharing schemes
store the secret in the constant coeﬃcient of a polynomial of degree < n/2, an adversary that compromises a
majority of the parties would obtain enough shares to reconstruct the polynomial and recover the secret.
Instead, [33] leverages the gradual secret sharing scheme of [52] constructed against mixed (passive and active)
adversaries, and introduces a PSS scheme robust and secure against t < n − 2 passive adversaries, or secure
but not robust (with identiﬁable aborts) against either t < n/2 − 1 active adversaries or mixed adversaries
(k active corruptions out of n − k − 1 total corruptions). As part of our work we implement and verify two
versions of PSS. The ﬁrst PSS is based on the standard Shamir scheme for honest majorities and serves as a
foundations for our BGW-based MPC. The second PSS is one for dishonest majority based on gradual secret