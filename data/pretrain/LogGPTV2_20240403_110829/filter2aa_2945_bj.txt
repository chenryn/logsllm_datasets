such as C#, the CLR actually invokes WinRT rather than the native
Windows APIs. Microsoft has provided a mapping layer between the
CLR and WinRT that can transparently translate requests to create
objects and invoke methods that are made to the .NET Framework into
the equivalent object requests and method calls in WinRT. For example,
when you create a .NET Framework Int32 value (an int in C#), this
code is translated to create a value using the equivalent WinRT data
type. However, although the CLR and WinRT have a large amount of
overlapping functionality, not all the features of the .NET Framework
4.6 have corresponding features in WinRT. Consequently, UWP apps
have access to only a reduced subset of the types and methods provided
by the .NET Framework 4.6. (IntelliSense in Visual Studio 2017
automatically shows the restricted view of available features when you
use C# to build UWP apps, omitting the types and methods not
available through WinRT.)
On the other hand, WinRT provides a significant set of features and
Download from finelybook PI:EMAIL
474
types that have no direct equivalent in the .NET Framework or that
operate in a significantly different way to the corresponding features in
the .NET Framework, and so cannot easily be translated. WinRT makes
these features available to the CLR through a mapping layer that makes
them look like .NET Framework types and methods, and you can
invoke them directly from managed code.
So, integration implemented by the CLR and WinRT enables the
CLR to transparently use WinRT types, but it also supports
interoperability in the reverse direction: you can define types by using
managed code and make them available to unmanaged applications as
long as these types conform to the expectations of WinRT. Chapter 9
highlights the requirements of structs in this respect (instance and static
methods in structs are not available through WinRT, and private fields
are unsupported). If you are building classes with the intention that they
be consumed by unmanaged applications through WinRT, your classes
must follow these rules:
Any public fields, and the parameters and return values of any
public methods, must be WinRT types or .NET Framework types
that can be transparently translated by WinRT into WinRT types.
Examples of supported .NET Framework types include
conforming value types (such as structs and enums) and those
corresponding to the C# primitives (int, long, float, double, string,
and so on). Private fields are supported in classes, and they can be
of any type available in the .NET Framework; they do not have to
conform to WinRT.
Classes cannot override methods of System.Object other than
ToString, and they cannot declare protected constructors.
The namespace in which a class is defined must be the same as
the name of the assembly implementing the class. Additionally,
the namespace name (and therefore the assembly name) must not
begin with “Windows.”
You cannot inherit from managed types in unmanaged
applications through WinRT. Therefore, all public classes must
be sealed. If you need to implement polymorphism, you can
create a public interface and implement that interface on the
classes that must be polymorphic.
Download from finelybook PI:EMAIL
475
You can throw any exception type that is included in the subset of
the .NET Framework available to UWP apps; you cannot create
your own custom exception classes. If your code throws an
unhandled exception when called from an unmanaged
application, WinRT raises an equivalent exception in the
unmanaged code.
WinRT has other requirements concerning features of C# code
covered later in this book. These requirements will be highlighted as
each feature is described.
Summary
In this chapter, you saw how to define and implement interfaces and abstract
classes. The following table summarizes the various valid (yes), and invalid
(no) keyword combinations when defining methods for interfaces, classes,
and structs.
Keyword
Interface
Abstract class
Class
Sealed class
Structure
Abstract
No
Yes
No
No
No
New
Yes1
Yes
Yes
Yes
No2
Override
No
Yes
Yes
Yes
No3
Private
No
Yes
Yes
Yes
Yes
Protected
No
Yes
Yes
Yes
No4
Public
No
Yes
Yes
Yes
Yes
Sealed
No
Yes
Yes
Yes
No
Virtual
No
Yes
Yes
No
No
1 An interface can extend another interface and introduce a new method with
the same signature.
2 Structures do not support inheritance, so they cannot hide methods.
3 Structures do not support inheritance, so they cannot override methods.
4 Structures do not support inheritance; a structure is implicitly sealed and
Download from finelybook PI:EMAIL
476
cannot be derived from.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 14.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare an interface
Use the interface keyword. For example,
interface IDemo
Click here to view code image
{    string GetName();
     string GetDescription();
}
Implement an interface
Declare a class by using the same syntax as
class inheritance, and then implement all the
member functions of the interface. For example:
Click here to view code image
class Test : IDemo
{
    public string IDemo.GetName()
    {
       ...
    }
    public string IDemo.GetDescription()
    {
        ...
    }
}
Create an abstract class
that can be used only as a
base class, containing
abstract methods
Declare the class by using the abstract keyword.
For each abstract method, declare the method
with the abstract keyword and without a method
body. For example:
Click here to view code image
abstract class GrazingMammal
Download from finelybook PI:EMAIL
477
{
    abstract void DigestGrass();
    ...
}
Create a sealed class that
cannot be used as a base
class
Declare the class by using the sealed keyword.
For example:
Click here to view code image
sealed class Horse
{
    ...
}
Download from finelybook PI:EMAIL
478
CHAPTER 14
Using garbage collection and
resource management
After completing this chapter, you will be able to:
Manage system resources by using garbage collection.
Write code that runs when an object is destroyed.
Release a resource at a known point in time in an exception-safe
manner by writing a try/finally statement.
Release a resource at a known point in time in an exception-safe
manner by writing a using statement.
Implement the IDisposable interface to support exception-safe disposal
in a class.
You have seen in earlier chapters how to create variables and objects, and
you should understand how memory is allocated when you create variables
and objects. (In case you don’t remember, value types are created on the
stack, and reference types are allocated memory from the heap.) Computers
do not have infinite amounts of memory, so memory must be reclaimed when
a variable or an object no longer needs it. Value types are destroyed and their
memory reclaimed when they go out of scope. That’s the easy bit. How about
reference types? You create an object by using the new keyword, but how
and when is an object destroyed? That’s what this chapter is all about.
Download from finelybook PI:EMAIL
479
The life and times of an object
First, let’s recap what happens when you create an object.
You create an object by using the new operator. The following example
creates a new instance of the Square class that is discussed in Chapter 13,
“Creating interfaces and defining abstract classes.”
Click here to view code image
int sizeOfSquare = 99;
Square mySquare = new Square(sizeOfSquare); // Square is a reference
type
From your point of view, the new operation is a single step, but
underneath, object creation is really a two-phase process:
1. The new operation allocates a chunk of raw memory from the heap. You
have no control over this phase of an object’s creation.
2. The new operation converts the chunk of raw memory to an object; it
has to initialize the object. You can control this phase by using a
constructor.
Note If you are a C++ programmer, you should note that in C#, you
cannot overload the new operation to control allocation.
After you create an object, you can access its members by using the dot
operator (.). For example, the Square class includes a method named Draw
that you can call:
mySquare.Draw();
Note This code is based on the version of the Square class that inherits
Download from finelybook PI:EMAIL
480
from the DrawingShape abstract class and does not implement the
IDraw interface explicitly. For more information, refer to Chapter 13.
When the mySquare variable goes out of scope, the Square object is no
longer being actively referenced. The object can then be destroyed, and the
memory that it is using can be reclaimed. (This might not happen
immediately, however, as you will see later.) Like object creation, object
destruction is a two-phase process. The two phases of destruction exactly
mirror the two phases of creation:
1. The common language runtime (CLR) must perform some tidying up.
You can control this by writing a destructor.
2. The CLR must return the memory previously belonging to the object
back to the heap; the memory that the object lived in must be
deallocated. You have no control over this phase.
The process of destroying an object and returning memory to the heap is
known as garbage collection.
Note If you program in C++, keep in mind that C# does not have a
delete operator. The CLR controls when an object is destroyed.
Writing destructors
You can use a destructor to perform any tidying up that’s required when an
object is garbage collected. The CLR will automatically clear up any
managed resources that an object uses, so in many of these cases, writing a
destructor is unnecessary. However, if a managed resource is large (such as a
multidimensional array), it might make sense to make this resource available
for immediate disposal by setting any references that the object has to this
resource to null. Additionally, if an object references an unmanaged resource,
either directly or indirectly, a destructor can prove useful.
Download from finelybook PI:EMAIL
481
Note Indirect unmanaged resources are reasonably common. Examples
include file streams, network connections, database connections, and
other resources managed by Windows. If you open a file in a method,
for example, you might want to add a destructor that closes the file
when the object is destroyed. However, there might be a better and
timelier way to close the file depending on the structure of the code in
your class. (See the discussion of the using statement later in this
chapter.)
A destructor is a special method, a little like a constructor, except that the
CLR calls it after the reference to an object has disappeared.
Note Don’t confuse destructors with deconstructors (described in
Chapter 7, “Creating and managing classes and objects”), which you
can implement to retrieve the internal fields of an object.
The syntax for writing a destructor is a tilde (~) followed by the name of
the class. For example, here’s a simple class that opens a file for reading in its
constructor and closes the file in its destructor. (Note that this is simply an
example, and I do not recommend that you always follow this pattern for
opening and closing files.)
Click here to view code image
class FileProcessor
{
    FileStream file = null;
    public FileProcessor(string fileName)
    {
        this.file = File.OpenRead(fileName); // open file for reading
    }
Download from finelybook PI:EMAIL
482
    ~FileProcessor()
    {
        this.file.Close(); // close file
    }
}
There are some very important restrictions that apply to destructors:
Destructors apply only to reference types; you cannot declare a
destructor in a value type, such as a struct.
Click here to view code image
struct MyStruct
{
    ~MyStruct() { ... } // compile-time error
}
You cannot specify an access modifier (such as public) for a destructor.
You never call the destructor in your own code; part of the CLR called
the garbage collector does this for you.
Click here to view code image
public ~FileProcessor() { ... } // compile-time error
A destructor cannot take any parameters. Again, this is because you
never call the destructor yourself.
Click here to view code image
~FileProcessor(int parameter) { ... } // compile-time error
Internally, the C# compiler automatically translates a destructor into an
override of the Object.Finalize method. The compiler converts this
destructor:
Click here to view code image
class FileProcessor
{
    ~FileProcessor()
    {
        // your code goes here
    }
}
into this:
Click here to view code image
Download from finelybook PI:EMAIL
483
class FileProcessor
{
    protected override void Finalize()
    {
        try
        {
            // your code goes here
        }
        finally
        {
            base.Finalize();
        }
    }
}
The compiler-generated Finalize method contains the destructor body
within a try block, followed by a finally block that calls the Finalize method
in the base class. (The try and finally keywords are described in Chapter 6,
“Managing errors and exceptions.”) This ensures that a destructor always
calls its base-class destructor, even if an exception occurs during your
destructor code.
It’s important to understand that only the compiler can make this
translation. You can’t write your own method to override Finalize, and you
can’t call Finalize yourself.
Why use the garbage collector?
You can never destroy an object yourself by using C# code. There just isn’t
any syntax to do it. Instead, the CLR does it for you at a time of its own
choosing. Also, keep in mind that you can make more than one reference
variable refer to the same object. In the following code example, the variables
myFp and referenceToMyFp point to the same FileProcessor object:
Click here to view code image
FileProcessor myFp = new FileProcessor();
FileProcessor referenceToMyFp = myFp;
How many references can you create to an object? As many as you want!
But this lack of restriction has an impact on the lifetime of an object. The
CLR has to keep track of all these references. If the variable myFp disappears
(by going out of scope), other variables (such as referenceToMyFp) might
still exist, and the resources used by the FileProcessor object cannot be
Download from finelybook PI:EMAIL
484
reclaimed (the file should not be closed). So the lifetime of an object cannot
be tied to a particular reference variable. An object can be destroyed and its
memory made available for reuse only when all the references to it have
disappeared.
You can see that managing object lifetimes is complex, which is why the
designers of C# decided to prevent your code from taking on this
responsibility. If it were your responsibility to destroy objects, sooner or later
one of the following situations would arise:
You’d forget to destroy the object. This would mean that the object’s
destructor (if it had one) would not be run, tidying up would not occur,
and memory would not be returned to the heap. You could quite easily
run out of memory.
You’d try to destroy an active object and risk the possibility that one or
more variables hold a reference to a destroyed object, which is known
as a dangling reference. A dangling reference refers either to unused
memory or possibly to a completely different object that now happens
to occupy the same piece of memory. Either way, the outcome of using
a dangling reference would be undefined at best or a security risk at
worst. All bets would be off.
You’d try to destroy the same object more than once. This might or
might not be disastrous, depending on the code in the destructor.
These problems are unacceptable in a language like C#, which places
robustness and security high on its list of design goals. Instead, the garbage
collector destroys objects for you. The garbage collector makes the following
guarantees:
Every object will be destroyed, and its destructor will be run. When a
program ends, all outstanding objects will be destroyed.
Every object will be destroyed exactly once.
Every object will be destroyed only when it becomes unreachable—
that is, when there are no references to the object in the process
running your application.
These guarantees are tremendously useful, and they free you, the
programmer, from tedious housekeeping chores that are easy to get wrong.
They afford you the luxury to concentrate on the logic of the program itself
Download from finelybook PI:EMAIL
485
and be more productive.
When does garbage collection occur? This might seem like a strange
question. After all, surely garbage collection occurs when an object is no
longer needed. Well, it does, but not necessarily immediately. Garbage
collection can be an expensive process, so the CLR collects garbage only
when it needs to (when available memory is starting to run low, or the size of
the heap has exceeded the system-defined threshold, for example), and then it
collects as much as it can. Performing a few large sweeps of memory is more
efficient than performing lots of little dustings.
Note You can invoke the garbage collector in a program by calling the
static method Collect of the GC class located in the System namespace.
However, except in a few cases, this is not recommended. The
GC.Collect method starts the garbage collector, but the process runs
asynchronously—the GC.Collect method does not wait for garbage
collection to be complete before it returns, so you still don’t know
whether your objects have been destroyed. Let the CLR decide when it
is best to collect garbage.
One feature of the garbage collector is that you don’t know, and should
not rely upon, the order in which objects will be destroyed. The final point to
understand is arguably the most important: destructors do not run until
objects are garbage collected. If you write a destructor, you know it will be