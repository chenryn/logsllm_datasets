1 Introduction
With the introduction of social networks such as Facebook, the Internet community ex-
perienced a revolution in its communication habits. What initially began as a simple
frame for social contacts quickly evolved into massively-used platforms where net-
working and messaging is only one of the multiple possibilities the users can call upon.
While basic messaging is still one of the key features, it is clear that the participants see
the main advantage in the well-organized representation of friends and acquaintances.
For such an organization to work properly, it is imperative to have certain knowl-
edge about the participants. Suggesting users from the same area with the same age,
for instance, can lead to a renewed childhood friendship, while a detailed work history
might open unexpected business opportunities. On the other hand, this kind of informa-
tion is also of great value to entities with potentially malicious intentions. Hence, it is
the responsibility of the service provider to ensure that unauthorized access to sensitive
proﬁle information is properly restricted. In fact, various researchers (e.g., [1,2,3]) have
shown that social networks can pose a signiﬁcant threat to users’ privacy. The main
problem is twofold:
– Many users tend to be overly revealing when publishing personal information. Al-
though it lies in the responsibility of each individual to assess the risk of pub-
lishing sensitive information, the provider can help by setting defaults that restrict
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 422–441, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Abusing Social Networks for Automated User Proﬁling
423
the access to this information to a limited number of individuals. A good exam-
ple is Facebook, where detailed information is only exchanged between already
connected users.
– Information exists in social networks that a user cannot directly control, and may
not even be aware of. The best example is the use of the information provided
during the registration phase (e.g., name, contact e-mail address, and birthday).
Even though this data may never be shown in the public user proﬁle, what most
users do not realize is the fact that this information is still often used to provide
other functionality within the social network (e.g., such as determining which users
might know each other).
In this paper, we describe a novel, practical attack that impacts thousands of users.
Moreover, we have shown that this attack is effective against eight of the most popu-
lar social networks: Facebook, MySpace, Twitter, LinkedIn, Friendster, Badoo, Netlog,
and XING. We discovered that all of these social networks share a common weak-
ness, which is inherent in a feature that is particularly useful for newly-registered users:
Finding friends. With the functionality to search for friends, social networks need to
walk the thin line between revealing only limited information about their users, and
simplifying the process of ﬁnding existing friends by disclosing the personal details of
registered users. A common functionality among these popular social networks is to let
users search for friends by providing their e-mail addresses. For example, by entering
“PI:EMAIL”, a user can check if her friend Gerhard has an account on the
social network so that she can contact and add him to her friend list. Note that an e-mail
address, by default, is considered to be private information, and social networks take
measures not to reveal this information. That is, one cannot typically access a user’s
proﬁle and simply gain access to his personal e-mail address. One of the main purposes
of protecting e-mail addresses is to prevent spammers from crawling the network and
collecting e-mail to user mappings. With these mappings at hand, the attacker could
easily construct targeted spam and phishing e-mails (e.g., using real names, names of
friends, and other personal information [4]). This kind of proﬁling is also interesting for
an attacker to perform a reconnaissance prior to attacking a company. By correlating
mappings from different social networks, it is even possible to identify contradictions
and untruthfully entered information among proﬁles.
In our experiments, we used about 10.4 million real-world e-mail addresses that were
left by attackers on a dropzone on a compromised machine (which was taken down).
We built a system to automatically query each social networking site with these ad-
dresses, just as an adversary would, and we were able to identify around 876,000 of
these addresses on at least one of the investigated social networks. Furthermore, we im-
plemented a simple guesser that we used to create new e-mail addresses (e.g., for John
Doe, addresses such as PI:EMAIL, PI:EMAIL, PI:EMAIL, etc.
would be created) and show that this is an effective and simple technique in practice to
ﬁnd thousands of more accounts.
In summary, we make the following three contributions:
– We describe a real-world, common weakness in eight popular social networks con-
sisting of millions of users, and present a system that automatically takes advantage
of this weakness on a large-scale.
424
M. Balduzzi et al.
– By using e-mail addresses as a unique identiﬁer, we demonstrate that it is possi-
ble to correlate the information provided by thousands of users in different social
networks. This is a signiﬁcant privacy threat, because it allows to link proﬁles that
otherwise have no common information. Furthermore, adversaries can leverage this
information for sophisticated attacks.
– We present our ﬁndings and propose mitigation techniques to secure social net-
works against such attacks. Our ﬁndings were conﬁrmed by all social network
providers we contacted. Some of them have already addressed the problem.
The remainder of the paper is structured as follows: In Section 2, we brieﬂy discuss
ethical and legal considerations. In Section 3, we explain our attack and how we im-
plemented it for the social networks under examination. In Section 4, we present our
ﬁndings and assess the potential threat to social networking users. Section 5 discusses
possible mitigation solutions. In Section 6, we present related work, with a special focus
on privacy-related issues in social networks. We conclude our paper in Section 7.
2 Ethical and Legal Considerations
Crawling and correlating data in social networks is an ethically sensitive area. Similar to
the experiments conducted by Jakobsson et al. in [5,6], we believe that realistic exper-
iments are the only way to reliably estimate success rates of attacks in the real-world.
Nevertheless, our experiments were designed to protect the users’ privacy.
First, for the crawling and correlation experiments we conducted, we only accessed
user information that was publicly available within the social networks. Thus, we never
broke into any accounts, passwords, or accessed any otherwise protected area or infor-
mation. Second, the crawler that we developed was not powerful enough to inﬂuence
the performance of any social network we investigated. Third, we used MD5 on the real
names of users to anonymize them properly and handled this data carefully.
We also consulted the legal department of our university (comparable to the IRB in
the US), and received a legal statement conﬁrming that our privacy precautions were
deemed appropriate and consistent with the European legal position.
3 Abusing E-Mail Querying
Many social network providers such as Facebook, MySpace, XING, or LinkedIn offer a
feature that allows a user to search for her friends by providing a list of e-mail addresses.
In return, she receives a list of accounts that are registered with these e-mail addresses.
From a user’s point of view, this feature is valuable: A user can simply upload her
address book, and the social network tells her which of her friends are already registered
on the site. The feature enables a user to quickly identify other users she knows, and
with which she might be interested in establishing a connection.
While the e-mail search functionality commonly available in social networks is con-
venient, a closer examination reveals that it also has some security-relevant drawbacks.
We show that an attacker can misuse this feature by repeatedly querying a large number
of e-mail addresses using the search interface as an oracle to validate users on the social
network. This information can then be abused in many ways, for example:
Abusing Social Networks for Automated User Proﬁling
425
– A spammer can automatically validate his list of e-mail addresses (e.g., ﬁnd out
which addresses are most probably real and active) by querying a social network,
and only send spam e-mails to those users [7].
– The previous attack can be combined with social phishing, i.e., the spammer crawls
the proﬁle of a user and uses this information to send targeted phishing e-mails (if
the user has a public proﬁle and a public friend list) [4].
– An attacker can generate detailed proﬁles of the employees of a company and use
this information during the reconnaissance phase prior to the actual attack.
Note that it has been recently reported that spammers have started to shift their attention
to social networking sites to collect information about users that they can then use
for targeted e-mails [8]. The report states that spammers have been using bots to spy
information from social networks that they can then use for launching attacks such as
guessing passwords (i.e., using reminder hints such as “What is my favorite pet?”). The
prerequisite for these current attacks, however, is that a bot is installed on the victim’s
machine. In comparison, we describe the exploitation of a common weakness in a social
network functionality that allows us to retrieve information about users even if they are
not infected by a bot.
In each of these cases, the attack is only feasible since the social network provider
enables a large-scale query of e-mail addresses. Before going into details on how this
feature can be abused in practice, we provide an overview of the context of this type of
attacks and previous instances of similar problems.
3.1 Historical Context
Historically, a user search/veriﬁcation feature was available in many different protocols
and services, as we discuss in this section.
SMTP. The Simple Mail Transfer Protocol (SMTP) provides two commands, VRFY and
EXPN, to verify a user name or to obtain the content of a mailing list, respectively [9].
A VRFY request asks the mail server to verify a given e-mail address, and if a normal
response is returned, it must include the mailbox of the user. In addition, an EXPN
request asks the server for the membership in a mailing list, and a successful response
must return the mailboxes on the mailing list.
Spammers began to abuse these two commands to query mail servers for a list of
valid e-mail addresses, and to verify if a given e-mail address was in use. Due to this
abuse by spammers, SMTP servers now commonly do not provide these two commands
anymore (at least not to unauthenticated users).
Finger User Information Protocol. This protocol is used to query a remote server for
status and user information [10]. The ﬁnger daemon typically returns information such
as the full name, whether a user is currently logged-on, e-mail address, or similar data.
While providing this kind of information is useful in general, an attacker can collect
information about a speciﬁc user based on the ﬁnger protocol, and then use this infor-
mation for social engineering attacks. Furthermore, the public exposure of the informa-
tion is questionable from a privacy and security point of view. For these reasons, the
majority of Internet hosts does not offer the ﬁnger service anymore.
426
M. Balduzzi et al.
Secure Shell. Certain versions of the OpenSSH server allowed a remote attacker to
identify valid users via a timing attack: By analyzing the response time during authenti-
cation, an attacker could determine whether or not the supplied username is valid [11].
By adjusting the timing for both successful and failed user veriﬁcation, this ﬂaw was
ﬁxed. A similar ﬂaw can be used to reveal private information with the help of timing
attacks against web applications [12].
Note that, as discussed above, the conceptual problem that we address in this paper
is not necessarily new, but its implications are novel and are far greater because of the
large amount of sensitive information contained in user proﬁles on social networks. We
believe that history is repeating itself and that it is only a matter of time before attackers
start making use of such features for malicious purposes.
3.2 Automated Proﬁling of Users
As explained previously, a user can typically send a list of e-mail addresses to a social
network and, in return, she receives a mapping of which of these e-mail addresses have
a corresponding account on the site. An attacker can abuse this and query for a large
number of e-mail addresses on many different social networks (see Figure 1a). As a
result, she learns on which social networks the speciﬁc address is registered.
In the second step, the attacker retrieves the user’s proﬁle from the different networks
in an automated way (see Figure 1b). From each proﬁle, she extracts the (publicly-
accessible) information she is interested in, for example, age, location, job/company,
list of friends, education, or any other information that is publicly available. This infor-
mation can then be aggregated and correlated to build a rich user proﬁle.
Throughout the rest of this paper, we show that the two steps can indeed be auto-
mated to a high degree. Furthermore, we demonstrate that this attack is possible with
only very limited resources. In fact, by using a single machine over a few weeks only,
we collected hundreds of thousands of user proﬁles, and queried for millions of e-mail
addresses (i.e., each social network was successfully queried for 10.4 million addresses,
List of E-Mail 
Addresses
@
@
@
Facebook
MySpace
...
LinkedIn
Registered
Users
?
?
?
Facebook
MySpace
...
LinkedIn
(a) Querying social networks for registered e-
mail addresses on a large scale.
(b) Crawling every proﬁle found in the ﬁrst
step to collect personal information.
Fig. 1. Automated user proﬁling based on information collected on social networks
Abusing Social Networks for Automated User Proﬁling
427
adding up to a total of about 82.3 million queries). This emphasizes the magnitude and
the signiﬁcance of the attack since a more powerful, sophisticated, and determined at-
tacker could potentially extract even more information (e.g., by using a large botnet).
An attacker can also abuse the search feature in a completely different way, extend-
ing the attack presented in the previous section. During the proﬁling step, an attacker
can learn the names of a user’s friends. This information is often available publicly,
including social networking sites such as Facebook and Twitter. An attacker can thus
obtain the tuple (ﬁrst name, last name) for each friend of a given user, but not the e-mail
addresses for these friends: The e-mail address itself is considered private information
and not directly revealed by the social networking sites. However, an attacker can auto-
matically try to guess the e-mail addresses of the friends of a user by abusing the search
feature. We implemented two different, straight-forward techniques for generating new
e-mail addresses, based on user names.
For the ﬁrst technique, for each friend, we build 24 addresses. Given a name in
the form “claudio bianchi”, we generate six preﬁxes as “claudio.bianchi,” “claudio-
bianchi,” “claudio bianchi,” “c.bianchi,” “c bianchi,” and “cbianchi”. Then, we ap-
pend the four most popular free e-mail domains “gmail.com,” “yahoo.com,” “aol.com,”
and “hotmail.com.”
For the second technique, we use context information for generating e-mail ad-
dresses: If a user has an e-mail address with a certain structure (e.g., automatically
generated e-mail accounts often include the last name of the user and a static preﬁx),
we try to detect this structure by searching the user’s ﬁrst and last name within the e-
mail address. If we identify a pattern in the address, we use this match and generate two
additional e-mail addresses that follow the same pattern (including both the ﬁrst and
last name) for each friend. If we do not detect a pattern, we generate e-mail addresses
similar to the ﬁrst algorithm. However, instead of appending common preﬁxes, we use
the preﬁx of the user on the assumption that the friends of a user might be a member of
the same e-mail provider.
3.3 Implementation of the Attack
Our prototype system has been implemented as a collection of several components. One
component queries the social networks, one extracts and stores the identiﬁed informa-
tion from user proﬁles, and one automatically correlates the information to discover as
much information as possible about a user. An overview of the system and the relation-
ship of the components is shown in Figure 2.
We designed our system to be efﬁcient and stealthy at the same time. Therefore,
we had to ﬁnd a compromise between normal user behavior, which is stealthy, and
brute-force crawling, which is efﬁcient but bears the danger of frequently-suspended
accounts. Our solution was tweaked for each social network, to ﬁnd the right combi-
nation of timeouts and number of requests. Furthermore, our solutions was carefully
designed not to overwhelm the tested networks.
In the following, we describe the system and its components in more detail.
Address Prober. The Address Prober is an HTTP client that is responsible for upload-
ing the list of e-mail addresses to be queried to the social network. The social network,
428
M. Balduzzi et al.
Facebook
MySpace
...
List of E-Mail 
Addresses
Address
Prober
Proﬁle
Crawler
Correlator
External
E-Mail Provider
Social Network
Proﬁles
Fig. 2. Overview of system architecture
User
Proﬁles
...
in return, sends back the list of accounts that are registered with those addresses. The
data we are interested in is the proﬁle ID and, if possible, the name, which is attached
to the source e-mail address. At this point, some of the processed networks offer some
additional data, such as the location or a brief job description.
The client itself is implemented in Python, and embeds an extension to the stan-
dard urllib library [13] that supports postings in the multipart/form-data format. We
adopted such encoding to be able to send to the social networking site a ﬁle containing
the list of addresses. Typically, this ﬁle is required to be formatted in the standard CSV
format. On some other networks, for example in Badoo, the list of emails need to be
passed as a string of comma-separated addresses.
The Address Prober also supports external e-mail providers such as, for example,
Google’s webmail service Gmail, and permits to upload lists of e-mail addresses to such
accounts. The motivation behind this feature is that some social networks only support
e-mail queries if the source is an external e-mail account with an attached address book.
Hence, we automatically upload (and afterwards delete again) contacts from speciﬁc
webmail accounts, before querying the social network.
With this technique, in the worst case (i.e., some sites such as Facebook allow
lookups of up to 5,000 addresses), we are able to check sets of around 1,000 e-mail
addresses at once. With a short delay, which we set to 30 seconds to ensure that all data
is correctly processed and not to overwhelm the network, the prober is able to process
data with an overall average speed of 500,000 e-mail addresses per day. A positive side-
effect of this technique is that we can query social networks that support Gmail imports
in parallel, resulting in a higher overall throughput.
Proﬁle Crawler. The Proﬁle Crawler is responsible for a deeper investigation of the
user proﬁles discovered in the previous step. The goal is to gather as much informa-
tion about a single user as possible. For this purpose, it is mandatory to implement
tailored solutions for each supported social network. In the ﬁrst round, the crawler vis-
its iteratively the user’s proﬁle pages for all the social networks, and stores them in a
database. On average, we were able to visit 50,000 pages in a single day from a single
machine with a single IP address. Some networking sites provided mechanisms to limit
the number of proﬁles visited per day from a single account, while others did not have
any limitation mechanism in place. Finally, the crawler automatically parses the data
Abusing Social Networks for Automated User Proﬁling
429
that has been retrieved and extracts the information of interest, such as sex, age, loca-
tion, job, and sexual preferences. That is, the Proﬁle Crawler enriches the user proﬁles
discovered by the Address Prober with a set of general and sensitive information.
Correlator. After the crawling phase, the Correlator component combines and corre-
lates the proﬁles that have been collected from the different social networks. The goal
of the Correlator is to use the email address as a unique identiﬁer to combine together
different proﬁles and identify the ones that belong to the same person.
When it ﬁnds two proﬁles associated with the same e-mail address, the Correlator
compares all the information in the two proﬁles to identify possible inconsistencies. In
particular, it compares all the ﬁelds that can assume a small set of values, e.g., sex (either
male or female), age (a positive integer number), and current relationship (married,
single, or in a relationship).
Using the Correlator, it is possible to automatically infer information that the user
might have wanted to keep private. In particular, the correlator has two main goals:
– Identity Discovery - If a person provides his full name in social network A, but
registers a proﬁle in the network B using a pseudonym, by cross-correlating the
two proﬁles, we can automatically associate the real user’s name also to the account
B. We are even able to correlate the information about a given person that uses two
different pseudonyms by linking the two accounts with the help of the provided e-
mail address, which is not possible with the technique proposed by Irani et al. [14].
The combination of information from different sources can be even more worri-
some if this information is privacy-relevant. For example, Alice could have a busi-
ness proﬁle on LinkedIn, and another proﬁle on a dating site in which she does
not reveal her real name, but she provides other private information such as her
sexual preferences. It is very likely that Alice assumed that it was not possible to
link the two “identities” together because there is no public information on the two
networks that can be used to match the proﬁles.
– Detection of Inconsistent Values - Sometimes, the information extracted from dif-
ferent social networks is contradictory. For example, Bob can provide his real age
on his proﬁle on social network A, while pretending to be 10 years younger on