instruction recovery without heuristics and the results of
pattern-based function matching.
E. Overlap of False Positives and False Negatives
TABLE XX: Overlap of FP and FN in disassembly.
Type
FP
FN
1
92.05
83.08
Number of Appearance (%)
7
3
4
5
6
2
4.11
14.16
2.52
2.36
0.85
0.34
0.31
0.04
0.14
0.01
0.01
0.0005
8
0.001
0
TABLE XXI: Overlap of FP and FN in symbolization.
Type
FP
FN
Number of Appearance (%)
1
95.30
85.60
2
4.70
5.40
3
0.03
9.00
4
0.001
0.02
5
0.00
0.00
6
0.00
0.00
TABLE XXII: Overlap of FP and FN in function detection.
Type
FP
FN
1
70.4
32.9
2
19.2
8.1
Number of Appearance (%)
8
3
0.007 0.01
2.5
4.1
5.6
3.2
5
1.5
14.7
6
0.2
14.5
7
0.05
7.8
4
8.6
7.3
9
10
0.007
1.7
TABLE XXIII: Overlap of FP and FN in CFG recovery.
Number of Appearance (%)
2
Type
FP (EDGE)
FN (EDGE)
FP (CG)
FN (CG)
FP (T-Call)
FN (T-Call)
FP (Non-Ret)
FN (Non-Ret)
FP (J-Tab)
FN (J-Tab)
1
75.2
43.0
99.9
54.4
91.3
61.1
98.0
48.5
74.8
44.8
3
4.6
14.3
0.01
14.8
0.7
7.1
0
8.3
6.1
12.9
4
2.5
10.1
0
7.9
0.03
0.9
0
7.0
1.9
4.5
14.8
22.3
0.01
20.5
7.9
29.5
2.0
20.7
17.1
36.7
5
2.2
4.8
0.01
2.1
0.0001
1.4
0
6.0
0
1.1
6
0.4
3.7
0
0.2
0
0
0
3.4
0
0.01
7
0.2
1.7
0
0.001
0
0
0
6.2
0
0
In Table XX, XXI, XXII, and XXIII, we present the
overlap of false positives (FP) and false negatives (FN) in
different tasks. Each cell indicates the percentage of FPs/FNs
produced by the number of tools speciﬁed by Number of
Appearance (e.g., the value (2.36%) in the cell [FN, 3] in
Table XX means 2.36% of the FNs are produced by 3 tools).
F. Understanding of Commercial Tools
We attempted to infer how IDA PRO and BINARY NINJA
operate, based on empirical experiments, blogs [49, 76, 84],
documentations [1], and communications with the developers.
Disassembly: Both IDA PRO and BINARY NINJA perform
recursive descent
to recover instructions. We inferred this
based on their correct results of handling Listing 2 and [84].
They also take other approaches to handling code gaps.
BINARY NINJA follows a heuristic as described in [84] to
deal with code gaps. It linearly scans non-disassembled code
regions and aggregates call targets. Once done, BINARY NINJA
sorts all the targets based on the times of being referenced and
(in order) hands them off to further recursive descent.
IDA PRO at least uses four strategies to handle code gaps:
(1) it searches for common code sequences (e.g., [push bp;
mov bp, sp]). We inferred this from the kernel option of
mark typical code sequences as code [1] and the test-case
in Listing 11; (2) it considers addresses in the .eh_frame
sections for recursive descent. This is inferred from the enable
EH analysis kernel option, conﬁrmed by comparing the results
with and without the .eh_frame section; (3) it also performs
recursive descent at the targets of d2c xrefs. This is inferred
from the create function if data xref data→code32 exists kernel
option, veriﬁed by comparing the results with and without
certain xrefs; (4) it coagulates the remaining bytes in .text
as code or data (the make ﬁnal analysis pass kernel option).
Symbolization: It is in general hard to infer how exactly IDA
PRO and BINARY NINJA do symbolization. We empirically
learned the following strategies: (1) The two tools do not use
heuristics 8 , 10, and 12 (2) BINARY NINJA rarely considers
d2c and d2d xrefs. (3) The majority of c2d xrefs identiﬁed by
BINARY NINJA are constant address operands. (4) IDA PRO
will seek to symbolize the data unit at the target of a c2d xref.
It will further seek to symbolize the neighbors of the data unit
at the target location.
Function Entry Identiﬁcation: Both IDA PRO and BINARY
NINJA consider the targets of direct/indirect calls as function
entries. They further apply some other approaches.
BINARY NINJA adopts the idea from [6] to facilitate iden-
tiﬁcation of function entries. It traverse the inter-procedural
CFG and groups all the connected basic blocks as a function.
Similar to many open source tools, BINARY NINJA also
considers targets of tail calls as function entries.
IDA PRO leverages at least two other strategies to identify
function entries: (1) it considers certain (but not all) addresses
in the .eh_frame section as function entries. This is con-
ﬁrmed by comparing the results before and after removing the
.eh_frame section; (2) it considers the targets of certain
d2c xrefs as function entries. We inferred this by comparing
the results before and after we intentionally destroy some d2c
xrefs. However, thus far we are not fully aware of how IDA
PRO selects .eh_frame items and the xrefs.
Indirect Jumps: Based on [84], BINARY NINJA implements
VSA to handle jump tables. As discussed in § IV-B4, BINARY
NINJA also resolves 120 hand-crafted indirect jumps, however,
with wrong targets. It remains unclear how BINARY NINJA
internally handles the 120 cases.
According to [1], IDA PRO [49] relies on patterns to detect
jump tables. We further crafted test-cases (e.g., Listing 12) to
demonstrate that IDA PRO does not use VSA analysis .
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
850
Indirect Calls: We infer how BINARY NINJA and IDA PRO
handle indirect calls by examining their results with our
benchmark binaries (recall § IV-B3).
All
the targets found by BINARY NINJA are constants
propagated to the call sites. According to [76], this is achieved
by path-sensitive data-ﬂow analysis to calculate the ranges
or disjoint sets of values (or VSA in general). Based on
our further communication with the developers, the scope of
analysis is intra-procedural.
IDA PRO found two types of targets. The ﬁrst type is
propagated from constants in the current function. The second
type all follows the format in Listing 9. We envision that IDA
PRO uses data-ﬂow like constant propagation to handle indirect
calls and applies patterns to ﬁnd function tables.
Tail Calls: BINARY NINJA considers a jump as a tail call if
the target is outside of the current function and the stack has
a zero offset [84]. IDA PRO does not particularly handle tail
calls, as clariﬁed by their technical support team.
Non-returning Functions: Our analysis shows that IDA PRO
and BINARY NINJA are detecting a similar group of non-
returning functions as DYNINST. The difference is mainly
caused by the recognition of non-returning library functions.
Further, the three tools have comparable precision and recalls.
This indicates that IDA PRO and BINARY NINJA are using
similar recursive strategies to DYNINST.
G. Interesting Cases and Test Cases
1 popfq
2 .byte 0xf3,0xc3
3 .size AES_cbc_encrypt
4 .align 64
5 .LAES_Te:; data in code
6 .long 0xa56363c6
1 popfq
2 repz retq
3 nop
4 nop
5 (bad);disassembly error
6 movslq -0x5b(%rbx),%esp
Listing 2: An example of data-in-code. This example comes
from Openssl, where hand-crafted data are appended after
code (left). Both OBJDUMP and ANGR incur errors in this case.
1 mov 0x6ab8a0, %esi
2 mov %rbx, %rdi
1 ; data;
2 0x6ab8a0: 69 00 64 00
3 ...
1 ; wrong decoding
2 640069: add [%rax],%eax
3 64006b: add [%rax],%cl
4 ...
5 640126: call unwind
6 ; non-return
Listing 3: A false postive of xref in Xalan_base. GHIDRA
wrongly identiﬁes the operand 0x6ab8a0 (line 1 left-upper)
as a pointer and makes erroneous disassembly.
1 ; load base address
2 1b: lea 0x8a(%rip),%r8
3 22: movzbl %cl,%ecx
4 25: movslq (%r8,%rcx,4),%rax
5 29: add %r8,%rax
6 2c: jmpq *%rax
Listing 4: Jump table with 4-byte entries in 64-bit Gold Linker.
1 ; jump table
2 ac: 84 cb ec ff
3 a0: dc cb ec ff
4 b4: 04 cc ec ff
5 b8: 14 cc ec ff
6 ...
1 004286ab: add 0xfb49eb,%rax
2 ...
3 00fb49eb: undefined1 [11760811]; invalid address
Listing 5: A xref error in zeusmp_base. Operand fb49eb
points to invalid data but GHIDRA symbolizes it.
1 mov $0xe,%ebx
2 movzwl 0x4e33be(%rbx),%eax; operand = 0x4e33be
1 0x4e33b9: 00 00 00 00; end of .fini
2 0x4e33be: (bad); invalid memory address
3 0x4e33c0: 04 e3 3b 00; begin of .rodata
line 2 (upper part),
Listing 6: A xref in Busybox. At
the constant operand points to an address (0x4e33be) in-
between .finit section and .rodata section (lower part).
1 804f16c: 61 00 00 00 f7 c1 04 08; Unicode
Listing 7: Xref missed by ANGR in addr2line. At
0x804f16c, ANGR detects a Unicode and jumps
to
0x804f171, missing the pointer at 0x804f170.
1 callq 42ae30; non-returning
2 nopw %cs:0x0(%rax,%rax,1)
3 00 00 00; padding
4 cmpq $0x0,0x68(%rsi); start of a function
5 je 406f38
Listing 8: A missed function entry (line 4). The disassembler
assumes code after line 1 falls through and includes code at
line 4 to the preceding function.
1 app_main = {
2
3
4
5 }
1 void run_app(int app){
2
3
4
5 }
...
app_main[app](argc);
...
test_main,
acpid_main,
...
Listing 9: An indirect call that can be handled by IDA PRO.
This indirect call uses a target from a function table.
1 switch(which){
2
3
4
5
6 }
1 ; no restriction on %al
2 sub $0x64,%eax
3 movzbl %al,%eax
4 movslq (%r10,%rax,4),%rax
5 add %r10,%rax
6 jmpq *%rax
case 't': ...
...
default:
undefined();
Listing 10: A jump table with unrestricted index in dwp. The
default case in source code transfers to undeﬁned behaviors,
which is compiled into jump tables without index restriction.
1 pop %ebp
2 jmp 8048430
3 ;new function
4 push %ebp
5 mov %ebp, %esp
1 pop %ebp
2 jmp 8048430
3 ;new function
4 push %eax
5 mov %ebp, %esp
1 pop %ebp
2 jmp 8048430
3 ;new function
4 db 50h ; P
5 db 89h
Listing 11: Test-case to infer IDA PRO’s disassembly. The
code has a function (line 4, left part) that carrys a common
prologue but is never referenced. IDA PRO correctly disassem-
bles the code. After altering the instruction at line 4 (middle
part), IDA PRO considers the code as data (right part).
1 cmp $4, %rax
2 ja .Ldefault
3 ...
4 cmp $0, %rax
5 jle .Ldefault
6 ...
7 jmp *branch_tbl(,%rax,8)
Listing 12: Hand-crafted jump table with rax as the
index. Tools with VSA analysis, like BINARY NINJA and
DYNINST, ﬁgure out rax ranges from 1 to 4. IDA PRO
wrongly considers rax ranges from 0 to 4.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
851