is no optimization opportunity and Iodine fails to effectively
elide taint checks. To investigate this behavior, in Figure 10, we
look at how Iodine’s normalized runtime varies with increasing
the taint sampling fraction in our some-to-all taint analysis in
(cid:22)(cid:17)(cid:18)
§VI-C. We statically identify all viable taint sources (input
interfaces from console/ﬁle/network) and randomly sample
the stipulated fraction of them to be active. Since selected
sources might vary in their dynamic execution frequencies,
we run on 100 different samples for a given sampling fraction
(except for 100%). As expected, we observe that Iodine’s
performance degrades in general when dealing with larger
fraction of tainted inputs, although Iodine shows signiﬁcant
beneﬁts for many realistic levels of tainted input. This behavior
is fundamental to hybrid analysis, and is no worse in Iodine
than in a conservative hybrid analysis.
Iodine is effective when the target program and the taint
policy induce a low fraction of tainted data. We observe that
this property indeed holds for the IFT security policies studied
in §VI-B; the static fraction of active taint sources therein are
between 14-23% (circled in Figure 10).
VII. DISCUSSION
Limitations: Our implementation is for programs written
in the C language, and we currently do not support native
programs written in assembly. OHA’s principles are however
generally applicable to static analyses of x86 binaries [47], and
has been shown to beneﬁt other analyses for Java programs as
well [18].
Support for multi-threaded programs require a concurrency
analysis on top of Iodine’s information-ﬂow analysis, and prior
work [18] has shown that OHA can beneﬁt there as well.
Rarity and severity of
invariant violations: For well-
tested software, invariants should rarely fail as proﬁles would
have captured the common-case program states. However for
moderately large software with diverse features, optimistically
gathered invariants may eventually fail when the program en-
counters unproﬁled behavior. If this happens, Iodine switches
to a conservative hybrid analysis. Thus, even in the worst case,
Iodine is still as fast as the best available conservative hybrid
technique.
Currently, owing to the minuscule invariant violation rate,
Iodine conservatively continues on the slow-path until
the
next system reboot when it switches back to the fast-path.
While this is no worse than conservative hybrid analysis, we
envision the following strategies to preserve most of Iodine’s
performance beneﬁts even after an invariant violation.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
Background re-analysis: Upon an invariant-failure, we can
‘learn’ this new behavior and re-analyze the program without
the offending invariant. For many useful static analyses, this
can be done incrementally rather than redoing from scratch
[48]. For a dataﬂow analysis like Iodine’s, this boils down
to adding new nodes and edges to the programs’ deﬁnition-
use graph, and recomputing the transitive closure. The re-
compilation process can continue in the background while
the monitored program runs slowly. Upon completion of the
re-compilation process, the program can switch to the newly
optimized analysis at a pre-determined safe program point.
Graceful degradation: Upon an invariant-failure, instead
of switching to the most conservatively optimized analysis, we
can switch to a less aggressive optimistic analysis that excludes
the failing invariant. Even better,
if we can compute and
succinctly encode the mapping between assumed invariants
and the set of induced optimizations, we can selectively disable
only those optimizations induced by the violated invariant,
essentially re-instrumenting the monitors that were elided by
assuming that invariant. Dynamically re-instrumenting the new
analysis on-demand also eliminates the memory overhead of
maintaining multiple analysis versions.
Iodine can be implemented at the runtime system layer
wherein the invariant violation handler can invoke a dynamic
instrumentation framework to re-instrument the modiﬁed anal-
ysis, thereby opening opportunities to further beneﬁt from JIT
compilation techniques [49]. Such a setup further opens the
possibility to actively learn new invariants and re-optimize the
analysis.
VIII. RELATED WORK
Iodine builds on the prior optimistic hybrid analysis work
[18] in two major ways- (1) it constructs a rollback-free OHA
by limiting to only safe elision optimizations thereby solving
the recovery problem in OHA, and (2) applies this novel
technique to realize a low overhead DIFT solution for live
executions. Below, we discuss relevant prior work on DIFT,
hybrid program analyses, and proﬁle-based optimizations.
Dynamic Analysis: There has been signiﬁcant work on
dynamic taint
tracking systems [9], [12], [50]. Past work
has developed many optimized dynamic techniques, such as
creating highly speciﬁc information-ﬂow policies [5], [6], [11],
reducing its scope to only apply to related processes [51],
optimizing low-level taint operations [34], writing minimal
emulators targeted for taint tracking [14], or even providing
custom hardware support [10], [52]–[54]. All of these opti-
mizations operate purely on the dynamic state of the program,
attempting to make existing set of taint operations faster.
Iodine elides taint operations through static analysis, reducing
the set of instructions monitored, making its optimization
complementary to these prior approaches.
Taint tracking has also been parallelized either by parti-
tioning the execution into epochs to perform local analysis and
then aggregating results [15], [55], or by decoupling taint anal-
ysis from the program execution [16], [17], [56], [57], wherein
the dynamic instrumentation only performs lightweight log-
ging followed by an ofﬂine analysis. These efforts reduce
latency of taint tracking through parallelization, but not overall
work, like Iodine does. They too are complimentary to Iodine’s
optimizations.
Static Analysis: Several systems have attempted to solve
taint tracking using language features to enforce a taint policy
at compile-time, sometimes with limited dynamic checks [58],
[59]. These systems achieve low runtime overhead, but place
the burden on the programmer to specify and guarantee taint
policy using an unfamiliar restrictive language. Iodine opti-
mizes dynamic analysis, and does not require source code
changes, other than trivial annotations specifying taint sources,
sinks, and untaint functions.
Hybrid Analysis: Hybrid analysis has been explored in
the past [60] for accelerating DIFT. Moore et al. provide the
soundness conditions for static analysis to determine when it
is safe to stop tracking certain variables dynamically [19]. In
addition to removing unnecessary monitors using static anal-
ysis, Chang et al. statically transform untrusted programs into
policy-enforcing programs to further reduce the amount of data
to be tracked dynamically [61]. Jee et al. statically separate the
taint tracking logic from the program logic and then optimize it
using abstract taint ﬂow algebra [16]. Hybrid systems have also
coalesced taint checks through static analysis [4], [42]. While
these traditional hybrid analyses use sound static analysis
to conservatively reduce dynamic overheads, Iodine further
improves runtime overheads with use of unsound, predicated
static analysis. Iodine’s use of optimistic hybrid analysis with
forward recovery could likely be combined with these systems
for further taint optimizations.
Blended analysis [62] uses dynamic information to im-
prove the accuracy of a best-effort static taint checking tool
for JavaScript applications [63]. While they utilize dynamic
information to make static analysis tractable for corner-case
dynamic language features (e.g., eval), our likely invari-
ants captures common program behaviors to improve whole-
program static analysis. Moreover, their end goal is just to
improve static analysis, and stop short of optimizing dynamic
analysis. They also do not provide soundness or completeness
guarantees for any results produced. Iodine produces sound
and complete dynamic analysis for live executions.
Proﬁle-guided Compiler Optimizations: Proﬁle-guided op-
timizations [64], [65] learn invariants through proﬁling and
use them for local optimizations. In particular, work on JIT
optimizing compilers such as those that speculatively inline
functions [66], or speculatively convert indirect function calls
to direct function calls [67], speculatively optimize execution,
as done in Iodine. Our work differs in two key ways. First,
while compiler optimizations focus on optimizing program
logic, Iodine aims at eliding unnecessary runtime DIFT moni-
tors. A more fundamental difference is that Iodine uses invari-
ants to improve precision and scalability of whole-program
static analysis. In contrast, proﬁle-guided optimizations do not
typically consider whole-program static analysis, and therefore
the methods for checking invariants and recovery are simpler
and cheaper than optimistic hybrid analysis.
IX. CONCLUSION
We presented a novel optimistic hybrid analysis (OHA)
technique to optimize DIFT. We solve a key challenge that
limits applying OHA to online analyses on live executions
— rollback recovery. We eliminated the need for rollbacks
by restricting our predicated static analysis optimizations to
noop safe elisions. Iodine signiﬁcantly improves the precision
of static data-ﬂow and pointer analysis, thereby drastically
reducing DIFT overhead for important security policies to 9%.
(cid:22)(cid:17)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
ACKNOWLEDGMENT
We thank the anonymous reviewers and our shepherd,
Deian Stefan, for their thoughtful comments. This work was
supported by the National Science Foundation under grants
SHF-1527301 and SHF-1703931. The views and conclusions
contained in this paper are solely those of the authors.
REFERENCES
[2]
[1] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program
execution via dynamic information ﬂow tracking,” in Proceedings of
the 11th International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems, ASPLOS 2004, Boston,
MA, USA, October 7-13, 2004, 2004, pp. 85–96.
J. Newsome and D. X. Song, “Dynamic taint analysis for automatic
detection, analysis, and signaturegeneration of exploits on commodity
software,” in Proceedings of
the Network and Distributed System
Security Symposium, NDSS 2005, San Diego, California, USA, 2005.
J. Kong, C. C. Zou, and H. Zhou, “Improving software security via
runtime instruction-level taint checking,” in Proceedings of the 1st
Workshop on Architectural and System Support for Improving Software
Dependability, ASID 2006, San Jose, California, USA, October 21,
2006, 2006, pp. 18–24.
[3]
[4] F. Qin, C. Wang, Z. Li, H. Kim, Y. Zhou, and Y. Wu, “LIFT: A low-
overhead practical information ﬂow tracking system for detecting se-
curity attacks,” in 39th Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO-39 2006), 9-13 December 2006, Orlando,
Florida, USA, 2006, pp. 135–148.
[5] W. G. J. Halfond, A. Orso, and P. Manolios, “Using positive tainting
and syntax-aware evaluation to counter SQL injection attacks,” in
Proceedings of the 14th ACM SIGSOFT International Symposium on
Foundations of Software Engineering, FSE 2006, Portland, Oregon,
USA, November 5-11, 2006, 2006, pp. 175–185.
[6] T. Pietraszek and C. V. Berghe, “Defending against injection attacks
through context-sensitive string evaluation,” in Recent Advances in
Intrusion Detection, 8th International Symposium, RAID 2005, Seattle,
WA, USA, September 7-9, 2005, Revised Papers, 2005, pp. 124–145.
[7] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans,
“Automatically hardening web applications using precise tainting,” in
Security and Privacy in the Age of Ubiquitous Computing, IFIP TC11
20th International Conference on Information Security (SEC 2005),
May 30 - June 1, 2005, Chiba, Japan, 2005, pp. 295–308.
[8] V. Haldar, D. Chandra, and M. Franz, “Dynamic taint propagation
for java,” in 21st Annual Computer Security Applications Conference
(ACSAC 2005), 5-9 December 2005, Tucson, AZ, USA, 2005, pp. 303–
311.
[9] W. Enck, P. Gilbert, B. Chun, L. P. Cox, J. Jung, P. D. McDaniel, and
A. Sheth, “Taintdroid: An information-ﬂow tracking system for realtime
privacy monitoring on smartphones,” in 9th USENIX Symposium on
Operating Systems Design and Implementation, OSDI 2010, October
4-6, 2010, Vancouver, BC, Canada, Proceedings, 2010, pp. 393–407.
[10] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A.
Blome, G. A. Reis, M. Vachharajani, and D. I. August, “RIFLE: an
architectural framework for user-centric information-ﬂow security,” in
37th Annual International Symposium on Microarchitecture (MICRO-37
2004), 4-8 December 2004, Portland, OR, USA, 2004, pp. 243–254.
[11] D. Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, “Tainteraser:
protecting sensitive data leaks using application-level taint tracking,”
Operating Systems Review, vol. 45, no. 1, pp. 142–154, 2011.
J. A. Clause, W. Li, and A. Orso, “Dytan: a generic dynamic taint anal-
ysis framework,” in Proceedings of the ACM/SIGSOFT International
Symposium on Software Testing and Analysis, ISSTA 2007, London,
UK, July 9-12, 2007, 2007, pp. 196–206.
[12]
[13] H. Yin, D. X. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama:
capturing system-wide information ﬂow for malware detection and
analysis,” in Proceedings of the 2007 ACM Conference on Computer
and Communications Security, CCS 2007, Alexandria, Virginia, USA,
October 28-31, 2007, 2007, pp. 116–127.
[14] E. Bosman, A. Slowinska, and H. Bos, “Minemu: The world’s fastest
taint tracker,” in Proceedings of the 14th International Symposium on
Recent Advances in Intrusion Detection RAID 2011, 2011.
(cid:22)(cid:17)(cid:20)
[15] O. Ruwase, P. B. Gibbons, T. C. Mowry, V. Ramachandran, S. Chen,
M. Kozuch, and M. P. Ryan, “Parallelizing dynamic information ﬂow
tracking,” in SPAA 2008: Proceedings of the 20th Annual ACM Sympo-
sium on Parallelism in Algorithms and Architectures, Munich, Germany,
June 14-16, 2008, 2008, pp. 35–45.
[16] K. Jee, V. P. Kemerlis, A. D. Keromytis, and G. Portokalidis, “Shad-
owreplica: efﬁcient parallelization of dynamic data ﬂow tracking,” in
2013 ACM SIGSAC Conference on Computer and Communications
Security, CCS’13, Berlin, Germany, November 4-8, 2013, 2013, pp.
235–246.
J. Ming, D. Wu, J. Wang, G. Xiao, and P. Liu, “Straighttaint: decoupled
ofﬂine symbolic taint analysis,” in Proceedings of the 31st IEEE/ACM
International Conference on Automated Software Engineering, ASE
2016, Singapore, September 3-7, 2016, 2016, pp. 308–319.
[17]
[18] D. Devecsery, P. M. Chen, J. Flinn, and S. Narayanasamy, “Optimistic
hybrid analysis: Accelerating dynamic analysis through predicated
static analysis,” in Proceedings of the ACM International Conference
on Architectural Support for Programming Languages and Operating
Systems, ASPLOS ’18, March 2428, 2018, Williamsburg, VA, USA,
2018.
[19] S. Moore and S. Chong, “Static analysis for efﬁcient hybrid information-
ﬂow control,” in Proceedings of the 24th IEEE Computer Security
Foundations Symposium, CSF 2011, Cernay-la-Ville, France, 27-29
June, 2011, 2011, pp. 146–160.
“DFSan.
DataFlowSanitizer.html.
http://clang.llvm.org/docs/
DataFlowSanitizer,”
[20]
Clang
[21] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All you ever wanted to
know about dynamic taint analysis and forward symbolic execution (but
might have been afraid to ask),” in 31st IEEE Symposium on Security
and Privacy, S&P 2010, 16-19 May 2010, Berleley/Oakland, California,
USA, 2010, pp. 317–331.
J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and M. Rosenblum,
“Understanding data lifetime via whole system simulation (awarded
best paper!),” in Proceedings of the 13th USENIX Security Symposium,
August 9-13, 2004, San Diego, CA, USA, 2004, pp. 321–336.
[22]
[23] T. Leek, G. Baker, R. Brown, M. Zhivich, and R. Lippmann, “Coverage
maximization using dynamic taint tracing,” MIT Lincoln Laboratory,
Tech. Rep. TR-1112, 2007.
[24] W. Masri, A. Podgurski, and D. Leon, “Detecting and debugging inse-
cure information ﬂows,” in 15th International Symposium on Software
Reliability Engineering (ISSRE 2004), 2-5 November 2004, Saint-Malo,
Bretagne, France, 2004, pp. 198–209.
[25] B. Alpern, M. N. Wegman, and F. K. Zadeck, “Detecting equality of
variables in programs,” in Conference Record of the Fifteenth Annual
ACM Symposium on Principles of Programming Languages, San Diego,
California, USA, January 10-13, 1988, 1988, pp. 1–11.
[26] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and A. Fox,
“Microreboot - A technique for cheap recovery,” in 6th Symposium
on Operating System Design and Implementation (OSDI 2004), San
Francisco, California, USA, December 6-8, 2004, 2004, pp. 31–44.
[27] C. Lattner and V. S. Adve, “LLVM: A compilation framework for
lifelong program analysis & transformation,” in 2nd IEEE / ACM
International Symposium on Code Generation and Optimization (CGO
2004), 20-24 March 2004, San Jose, CA, USA, 2004, pp. 75–88.
[28] F. Nielson, H. R. Nielson, and C. Hankin, Principles of program
analysis. Springer, 1999. [Online]. Available: https://doi.org/10.1007/
978-3-662-03811-6
[29] L. O. Andersen, “Program analysis and specialization for the c pro-
gramming laguage,” in PhD thesis, DIKU, University of Copenhagen,
1994.
[30] C. Lattner, A. Lenharth, and V. S. Adve, “Making context-sensitive
points-to analysis with heap cloning practical for the real world,” in
Proceedings of the ACM SIGPLAN 2007 Conference on Programming
Language Design and Implementation, San Diego, California, USA,
June 10-13, 2007, 2007, pp. 278–289.
[31] B. Hardekopf and C. Lin, “Exploiting pointer and location equivalence
to optimize pointer analysis,” in Static Analysis, 14th International
Symposium, SAS 2007, Kongens Lyngby, Denmark, August 22-24, 2007,
Proceedings, 2007, pp. 265–280.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
[54]
based dynamic data ﬂow tracking on commodity hardware,” in 19th
Annual Network and Distributed System Security Symposium, NDSS
2012, San Diego, California, USA, February 5-8, 2012, 2012.
J. Lee, I. Heo, Y. Lee, and Y. Paek, “Efﬁcient dynamic information ﬂow
tracking on a processor with core debug interface,” in Proceedings of
the 52nd Annual Design Automation Conference, San Francisco, CA,
USA, June 7-11, 2015, 2015, pp. 79:1–79:6.
[55] A. Quinn, D. Devecsery, P. M. Chen, and J. Flinn, “Jetstream: Cluster-
scale parallelization of information ﬂow queries,” in 12th USENIX
Symposium on Operating Systems Design and Implementation, OSDI
2016, Savannah, GA, USA, November 2-4, 2016., 2016, pp. 451–466.
[56] E. B. Nightingale, D. Peek, P. M. Chen, and J. Flinn, “Parallelizing
security checks on commodity hardware,” in Proceedings of the 13th
International Conference on Architectural Support for Programming
Languages and Operating Systems, ASPLOS 2008, Seattle, WA, USA,
March 1-5, 2008, 2008, pp. 308–318.
[57] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards practical provenance
tracing by alternating between logging and tainting,” in 23nd Annual
Network and Distributed System Security Symposium, NDSS 2016, San
Diego, California, USA, February 21-24, 2016, 2016.
[58] A. C. Myers, “Jﬂow: Practical mostly-static information ﬂow control,”
in POPL ’99, Proceedings of the 26th ACM SIGPLAN-SIGACT Sympo-
sium on Principles of Programming Languages, San Antonio, TX, USA,
January 20-22, 1999, 1999, pp. 228–241.
[59] A. Sabelfeld and A. C. Myers, “Language-based information-ﬂow
security,” IEEE Journal on Selected Areas in Communications, vol. 21,
no. 1, pp. 5–19, 2003.
[60] M. D. Ernst, “Static and dynamic analysis: synergy and duality,” in
ICSE WORKSHOP ON DYNAMIC ANALYSIS (WODA 2003), 2003, pp.
24–27.
[61] W. Chang, B. Streiff, and C. Lin, “Efﬁcient and extensible security
enforcement using dynamic data ﬂow analysis,” in Proceedings of the
2008 ACM Conference on Computer and Communications Security,
CCS 2008, Alexandria, Virginia, USA, October 27-31, 2008, 2008, pp.
39–50.
[62] B. Dufour, B. G. Ryder, and G. Sevitsky, “Blended analysis for perfor-
mance understanding of framework-based applications,” in Proceedings
of the ACM/SIGSOFT International Symposium on Software Testing and
Analysis, ISSTA 2007, London, UK, July 9-12, 2007, 2007, pp. 118–128.
[63] S. Wei and B. G. Ryder, “Practical blended taint analysis for javascript,”
in International Symposium on Software Testing and Analysis, ISSTA
’13, Lugano, Switzerland, July 15-20, 2013, 2013, pp. 336–346.
[64] B. Calder, P. Feller, and A. Eustace, “Value proﬁling,” in Proceedings of
the Thirtieth Annual IEEE/ACM International Symposium on Microar-
chitecture, MICRO 30, Research Triangle Park, North Carolina, USA,
December 1-3, 1997, 1997, pp. 259–269.
[65] M. Mock, M. Das, C. Chambers, and S. J. Eggers, “Dynamic points-
to sets: a comparison with static analyses and potential applications in
program understanding and optimization,” in Proceedings of the 2001
ACM SIGPLAN-SIGSOFT Workshop on Program Analysis For Software
Tools and Engineering, PASTE’01, Snowbird, Utah, USA, June 18-19,
2001, 2001, pp. 66–72.
[66] M. G. Burke, J. Choi, S. J. Fink, D. Grove, M. Hind, V. Sarkar, M. J.
Serrano, V. C. Sreedhar, H. Srinivasan, and J. Whaley, “The jalape˜no
dynamic optimizing compiler for java,” in Java Grande, 1999, pp. 129–
141.
[67] C. Chambers and D. Ungar, “Customization: Optimizing compiler
technology for self, A dynamically-typed object-oriented programming
language,” in Proceedings of the ACM SIGPLAN’89 Conference on
Programming Language Design and Implementation (PLDI), Portland,
Oregon, USA, June 21-23, 1989, 1989, pp. 146–160.
[32] ——, “The ant and the grasshopper: fast and accurate pointer analysis
for millions of lines of code,” in Proceedings of the ACM SIGPLAN
2007 Conference on Programming Language Design and Implementa-
tion, San Diego, California, USA, June 10-13, 2007, 2007, pp. 290–299.
[33] M. Berndl, O. Lhot´ak, F. Qian, L. J. Hendren, and N. Umanee, “Points-
to analysis using bdds,” in Proceedings of the ACM SIGPLAN 2003
Conference on Programming Language Design and Implementation
2003, San Diego, California, USA, June 9-11, 2003, 2003, pp. 103–
114.
[35]
[36]
[37]
[38]
[39]
[40]
[41]
[42]
[34] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis, “libdft:
practical dynamic data ﬂow tracking for commodity systems,” in
Proceedings of the 8th International Conference on Virtual Execution
Environments, VEE 2012, London, UK, March 3-4, 2012 (co-located
with ASPLOS 2012), 2012, pp. 121–132.
“The Postﬁx mail server,” http://www.postﬁx.org.
“The NGINX web server,” https://www.nginx.com.
“The Tiny HTTP server,” https://acme.com/software/thttpd.
“The Redis database server,” https://redis.io.
“The Tile38 geolocation information systems,” http://tile38.com.
“VimGolf,” https://vimgolf.com.
“The GNU Gzip data compression utility,” https://www.gnu.org/
software/gzip.
J. Ming, D. Wu, G. Xiao, J. Wang, and P. Liu, “Taintpipe: Pipelined
symbolic taint analysis,” in 24th USENIX Security Symposium, USENIX
Security 15, Washington, D.C., USA, August 12-14, 2015., 2015, pp.
65–80.
“Google desktop - privacy policy,” http://desktop.google.com/en/
privacypolicy.html.
“VRoom,” https://github.com/google/vroom.
“Run Vim Tests,” https://github.com/inkarkat/runVimTests.
[44]
[45]
[46] A. M. Smith, J. Geiger, G. M. Kapfhammer, and M. L. Soffa, “Test
suite reduction and prioritization with call trees,” in 22nd IEEE/ACM
International Conference on Automated Software Engineering (ASE
2007), November 5-9, 2007, Atlanta, Georgia, USA, 2007, pp. 539–
540.
[43]
[47] G. Balakrishnan and T. W. Reps, “WYSINWYX: what you see is not
what you execute,” ACM Trans. Program. Lang. Syst., vol. 32, no. 6,
pp. 23:1–23:84, 2010.
[48] M. G. Burke, “An interval-based approach to exhaustive and incremental
interprocedural data-ﬂow analysis,” ACM Trans. Program. Lang. Syst.,
vol. 12, no. 3, pp. 341–395, 1990.
[49] C. Kerschbaumer, E. Hennigan, P. Larsen, S. Brunthaler, and M. Franz,
“Information ﬂow tracking meets just-in-time compilation,” TACO,
vol. 10, no. 4, pp. 38:1–38:25, 2013.
[50] W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige, “Tainttrace: Efﬁcient ﬂow
tracing with dynamic binary rewriting,” in Proceedings of the 11th IEEE
Symposium on Computers and Communications (ISCC 2006), 26-29
June 2006, Cagliari, Sardinia, Italy, 2006, pp. 749–754.
[51] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T. Kim, A. Orso, and
W. Lee, “RAIN: reﬁnable attack investigation with on-demand inter-
process information ﬂow tracking,” in Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security, CCS
2017, Dallas, TX, USA, October 30 - November 03, 2017, 2017, pp.
377–390.
[52] V. Nagarajan, H.-S. Kim, Y. Wu, and R. Gupta, “Dynamic information
ﬂow tracking on multicores,” in Proceedings of the 2008 Workshop on
Interaction between Compilers and Computer Architectures, 2008.
[53] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, D. I. August, and A. D.
Keromytis, “A general approach for efﬁciently accelerating software-
(cid:22)(cid:17)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply.