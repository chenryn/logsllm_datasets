     35     } t;                  
     38     wait_queue_head_t wqh;           
     47 };  
    /include/linux/hrtimer.h
    118 struct hrtimer {         
    119     struct timerqueue_node      node;        
    120     ktime_t             _softexpires;   
    121     enum hrtimer_restart        (*function)(struct hrtimer *);     
    127 };
### 劫持PC
整个劫持PC进行rop的步骤如下：
  1. 再次触发一次double free，第一次释放pg_vec后，选择pipe_buffer进行占位。
  2. 再次释放pg_vec，使用msg_msgseg进行堆喷，修改pipe_buffer的ops成员指向刚刚泄露地址的timerfd_ctx。
  3. 释放timerfd_ctx，使用msg_msgseg进行堆喷，伪造出一个pipe_buf_operations。
  4. 选择通过ops中的release函数指针劫持PC，当pipe被close时，release函数指针就会被调用。
    /include/linux/pipe_fs_i.h 
     95 struct pipe_buf_operations {    
    103     int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *);        
    109     void (*release)(struct pipe_inode_info *, struct pipe_buffer *);    
    119     bool (*try_steal)(struct pipe_inode_info *, struct pipe_buffer *);     
    124     bool (*get)(struct pipe_inode_info *, struct pipe_buffer *);   
    125 };     
通过release函数指针的定义可以看到，pipe_buffer作为函数的第二个参数且pipe_buffer内存内容可以被控制，那么通过以下的gadget来将栈迁移到pipe_buffer上。
    push rsi; jmp qword ptr [rsi + 0x39];
    pop rsp; pop r15; ret;
    add rsp, 0xd0; ret;
    pop rdi; ret; // 0
    prepare_kernel_cred;
    pop rcx; ret; // 0
    test ecx, ecx; jne 0xd8ab5b; ret;
    mov rdi, rax; jne 0x798d21; xor eax, eax; ret;
    commit_creds;
    mov rsp, rbp; pop rbp; ret;
可以看到上述的gadgets十分复杂，要是在不同的内核版本中编写通用的exploit的话，工作量会非常大。
## USMA
USMA这个利用方法的原理，其实来自于这个漏洞本身。如之前所说的，为了加速数据在用户态和内核态的传输，packet
socket可以创建一个共享环形缓冲区，这个环形缓冲区通过alloc_pg_vec()创建。
    /net/packet/af_packet.c
    4291 static struct pgv *alloc_pg_vec(struct tpacket_req *req, int order)         
    4292 {         
    4293     unsigned int block_nr = req->tp_block_nr;          
    4294     struct pgv *pg_vec;     
    4295     int i;
    4296         
    4297     pg_vec = kcalloc(block_nr, sizeof(struct pgv), GFP_KERNEL | __GFP_NOWARN);       
    4301     for (i = 0; i rx_ring; rb tx_ring; rb++) {
    4495        for (i = 0; i pg_vec_len; i++) {
    4496            struct page *page;
    4497            void *kaddr = rb->pg_vec[i].buffer;
    4500            for (pg_num = 0; pg_num pg_vec_pages; pg_num++) {
    4501                page = pgv_to_page(kaddr);
    4502                err = vm_insert_page(vma, start, page);
    4503                if (unlikely(err))           
    4504                    goto out;     
    4505                start += PAGE_SIZE;
    4506                kaddr += PAGE_SIZE;
    4507            }
    4508        }
    4509      }
    4517    return err;
    4518 }
如果通过漏洞将存储在pg_vec的虚拟地址进行覆写，更改为内核代码段的虚拟地址，那么vm_insert_page()就能将内核代码段的内存页插入到用户态的虚拟地址空间中。值得一提的是，vm_insert_page函数实际上调用validate_page_before_insert()函数对传入的page做了校验。
    /mm/memory.c
    1753 static int validate_page_before_insert(struct page *page)           
    1754 {   
    1755     if (PageAnon(page) || PageSlab(page) || page_has_type(page))
    1756         return -EINVAL;      
    1757     flush_dcache_page(page);        
    1758     return 0;      
    1759 }    
检查page是否为匿名页，是否为Slab子系统分配的页，以及page是否含有type，而内存页的type总共有以下四种。
    /include/linux/page-flags.h
    718 #define PG_buddy      0x00000080
    719 #define PG_offline    0x00000100
    720 #define PG_table      0x00000200
    721 #define PG_guard      0x00000400
PG_buddy为伙伴系统中的页，PG_offline为内存交换出去的页，PG_table为用作页表的页，PG_guard为用作内存屏障的页。可以看到如果传入的page为内核代码段的页，以上的检查全都可以绕过。
为了避免vm_insert_page()返回err（行4503），必须得控制pg_vec中所有的虚拟地址为合法的可插入的内核态虚拟地址，我们可以使用fuse+setxattr或者ret2dir来控制pg_vec中的所有内存。
在这个漏洞利用中，我们选择将pg_vec中保存的虚拟地址通过漏洞篡改为__sys_setresuid函数所在的内核代码段页的虚拟地址，从而在用户态中对权限校验逻辑进行更改（行659），使得普通用户也能设置自己的uid，从而达到提权的目的。
    /kernel/sys.c
    631 long __sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
    632 {
    659     if (!ns_capable_setid(old->user_ns, CAP_SETUID)) {
    660         if (ruid != (uid_t) -1 && !uid_eq(kruid, old->uid) &&
    661             !uid_eq(kruid, old->euid) && !uid_eq(kruid, old->suid))
    662             goto error;
    663         if (euid != (uid_t) -1 && !uid_eq(keuid, old->uid) &&
    664             !uid_eq(keuid, old->euid) && !uid_eq(keuid, old->suid))
    665             goto error;
    666         if (suid != (uid_t) -1 && !uid_eq(ksuid, old->uid) &&
    667             !uid_eq(ksuid, old->euid) && !uid_eq(ksuid, old->suid))
    668             goto error;
    669     }
    694 }
最后，可以在alloc_pg_vec()中看到，block_nr是用户传入的，那么pg_vec的大小也是用户可控的（行4297），这就意味着pg_vec可以占据不同大小的slab，从而将各种堆上的问题转化为对内核代码段进行覆写。
## 总结
通过USMA这种方式，我们可以大幅提高利用编写的效率，对漏洞要求大大降低，克服了gadget可获得性限制，并且绕过现有的最新的CFI缓解措施。
* * *