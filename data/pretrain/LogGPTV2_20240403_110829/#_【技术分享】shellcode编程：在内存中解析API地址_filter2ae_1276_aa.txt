# 【技术分享】shellcode编程：在内存中解析API地址
|
##### 译文声明
本文是翻译文章，文章来源：modexp.wordpress.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**0x00 前言**
针对Windows的所有的与位置无关代码（PIC）的核心功能的基础就是实时解析API函数的地址。它是一个非常重要的任务。在这里我介绍两种流行的方法，使用导入地址表（IAT）和导出地址表（EAT）是目前为止最稳定的方法。
自从2007年Windows Vista发布以来，地址空间布局随机化（ASLR）在可执行文件和动态链接库中启用，这些开启ASLR的库用来缓解漏洞利用。
但是在ASLR出现之前，20年前的病毒开发者同样遇到一个相似的问题，kernel32.dll基址的无意的“随机化”。
第一个Windows
95的病毒叫做[Bizatch](http://virus.wikidot.com/bizatch)，由Quantum/VLAD在一个Windows
95的beta版本上编写。
Mr. Sandman, Jacky Qwerty 和
GriYo讨论过kernel32的问题、[Win32下面PE感染](http://vxheaven.org/29a/29a-2/29a-2.3_1)的GetModuleHandle解决方案，和当时不清楚的进程环境块（PEB）在后来由Ratter在[“在NT下从PEB获取重要数据”](http://vxheaven.org/29a/29a-6/29a-6.224)中讨论。
Jacky
Qwerty公布了一种[类GetProcAddress](http://vxheaven.org/29a/29a-2/29a-2.3_5)的功能，成为病毒中解析API的标准方法。
在这之后，作者开始通过CRC32的校验和来解析API，可以隐藏代码中的API字符串，同时减少空间。
在1999年LethalMind展示了一种他自己的校验和[解析API地址](https://vxheaven.org/29a/29a-4/29a-4.227)的方法。在2002年[LSD组织](http://lsd-pl.net/)提出了在Win32汇编（shellcode）中获取API的算法，之后被很多Win32 shellcode效仿。
上述是关于API获取的方案的一个简短的历史。到了今天，在漏洞利用时已经出现了很多高级技术，但是他们和保护机制强相关，在这不做讨论。
下面展示的左右结构能在微软SDK中WinNT.h头文件中找到。
你还能在[pecoff.docx](http://wordpress.redirectingat.com/?id=725X1342&site=modexp.wordpress.com&xs=1&isjs=1&url=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fdownload%2Fdetails.aspx%3Fid%3D19509&xguid=cb98a2b4a36da2c7175731d5e7783944&xuuid=a18e8de5088faafbb29427360d580a7b&xsessid=9)中找到PE/PE+文件格式的详细描述。
**0x01 Image DOS Header**
在每个PE文件开始都能找到一个MS-DOS可执行文件或者一个“存根”（即MZ）使得可验证为有效的MS-DOS可执行文件。
在这里我们需要e_lfnew字段，加上当前模块基址能得到NT_IMAGE_HEADERS的指针。
**  
**
**0x02 Image NT Headers**
因为在内存中映射的PE映像的基址是随机的，只有重要结构的相对虚拟地址（RVA）保存在PE文件中。  
为了将RVA转化为虚拟地址（VA），可以使用以下宏。
通过基址加上e_lfanew，然后获得指向IMAGE_NT_HEADERS的指针。
下面两个结构在头文件WinNT.h中定义了，但是编译时根据架构只是用一个。
**0x03 Image Optional Header**  
在可选头的末尾是一个IMAGE_DATA_DIRECTORY结构的数组。
    // Directory Entries
    #define IMAGE_DIRECTORY_ENTRY_EXPORT 0   // Export Directory
    #define IMAGE_DIRECTORY_ENTRY_IMPORT 1   // Import Directory
    //
    // Optional header format.
    //
    typedef struct _IMAGE_OPTIONAL_HEADER {
      //
      // Standard fields.
      //
      WORD    Magic;
      BYTE    MajorLinkerVersion;
      BYTE    MinorLinkerVersion;
      DWORD   SizeOfCode;
      DWORD   SizeOfInitializedData;
      DWORD   SizeOfUninitializedData;
      DWORD   AddressOfEntryPoint;
      DWORD   BaseOfCode;
      DWORD   BaseOfData;
      //
      // NT additional fields.
      //
      DWORD   ImageBase;
      DWORD   SectionAlignment;
      DWORD   FileAlignment;
      WORD    MajorOperatingSystemVersion;
      WORD    MinorOperatingSystemVersion;
      WORD    MajorImageVersion;
      WORD    MinorImageVersion;
      WORD    MajorSubsystemVersion;
      WORD    MinorSubsystemVersion;
      DWORD   Win32VersionValue;
      DWORD   SizeOfImage;
      DWORD   SizeOfHeaders;
      DWORD   CheckSum;
      WORD    Subsystem;
      WORD    DllCharacteristics;
      DWORD   SizeOfStackReserve;
      DWORD   SizeOfStackCommit;
      DWORD   SizeOfHeapReserve;
      DWORD   SizeOfHeapCommit;
      DWORD   LoaderFlags;
      DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
**0x04 Image Data Directory**
每个目录拥有一个相对虚拟地址和大小。为了访问导出和导入目录，可简单的通过RVA2VA的宏得到虚拟地址。
VirtualAddress：
数据结构的相对虚拟地址。例如，如果这个结构是导入目录，这个字段填充IMAGE_IMPORT_DESCRIPTOR数组的相对虚拟地址。
Size：
包含指向的数据结构的大小。
**  
**
**0x05 Image Export Directory**  
因为导出目录是目录表的第一项，我们将解释这种获取API的方法。
我们只对5个字段有兴趣：
**Name**
DLL名字字符串的相对虚拟地址
**NumberOfNames**
通过名字导出的API的个数
**AddressOfFunctions**
指向所有函数的VA数组的相对虚拟机地址。每个VA加上模块基址，能得到一个导出函数的地址。
**AddressOfNames**
指向所有函数名的VA数组的相对虚拟机地址。每个VA加上模块基址，能得到表示API的非0结尾的字符串的地址。
**AddressOfNameOrdinals**
序号数组的相对虚拟地址。每个序号表示一个AddressOfFunctions数组的索引。
下面的函数使用DLL和API名字的CRC-32C哈希值，从导出表中获取API的地址。  
参数base明显是DLL的基址，参数hash是2个CRC-32C的哈希值。crc32c(DLL字符串)+crc32c(API字符串)。
    LPVOID search_exp(LPVOID base, DWORD hash)
    {
      PIMAGE_DOS_HEADER       dos;
      PIMAGE_NT_HEADERS       nt;
      DWORD                   cnt, rva, dll_h;
      PIMAGE_DATA_DIRECTORY   dir;
      PIMAGE_EXPORT_DIRECTORY exp;
      PDWORD                  adr;
      PDWORD                  sym;
      PWORD                   ord;
      PCHAR                   api, dll;
      LPVOID                  api_adr=NULL;
      dos = (PIMAGE_DOS_HEADER)base;
      nt  = RVA2VA(PIMAGE_NT_HEADERS, base, dos->e_lfanew);
      dir = (PIMAGE_DATA_DIRECTORY)nt->OptionalHeader.DataDirectory;
      rva = dir[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
      // if no export table, return NULL
      if (rva==0) return NULL;
      exp = (PIMAGE_EXPORT_DIRECTORY) RVA2VA(ULONG_PTR, base, rva);
      cnt = exp->NumberOfNames;
      // if no api, return NULL
      if (cnt==0) return NULL;
      adr = RVA2VA(PDWORD,base, exp->AddressOfFunctions);
      sym = RVA2VA(PDWORD,base, exp->AddressOfNames);
      ord = RVA2VA(PWORD, base, exp->AddressOfNameOrdinals);
      dll = RVA2VA(PCHAR, base, exp->Name);
      // calculate hash of DLL string
      dll_h = crc32c(dll);
      do {
        // calculate hash of api string
        api = RVA2VA(PCHAR, base, sym[cnt-1]);
        // add to DLL hash and compare
        if (crc32c(api) + dll_h == hash) {
          // return address of function
          api_adr = RVA2VA(LPVOID, base, adr[ord[cnt-1]]);
          return api_adr;
        }
      } while (--cnt && api_adr==0);
      return api_adr;
    }
一个重要的事情是这个函数不能解析通过序号导出的API，前向引用有时也是个问题。  
下面是实现相同功能的汇编代码。
    ; in:  ebx = base of module to search
    ;      ecx = hash to find
    ;
    ; out: eax = api address resolved in EAT
    ;
    search_expx:
        pushad
        ; eax = IMAGE_DOS_HEADER.e_lfanew
        mov    eax, [ebx+3ch]
        ; first directory is export
        ; ecx = IMAGE_DATA_DIRECTORY.VirtualAddress
        mov    ecx, [ebx+eax+78h]
        jecxz  exp_l2
        ; eax = crc32c(IMAGE_EXPORT_DIRECTORY.Name)
        mov    eax, [ebx+ecx+0ch]
        add    eax, ebx
        call   crc32c
        mov    [esp+_edx], eax
        ; esi = IMAGE_EXPORT_DIRECTORY.NumberOfNames
        lea    esi, [ebx+ecx+18h]
        push   4
        pop    ecx         ; load 4 RVA
    exp_l0:
        lodsd              ; load RVA
        add    eax, ebx    ; eax = RVA2VA(ebx, eax)
        push   eax         ; save VA
        loop   exp_l0
        pop    edi          ; edi = AddressOfNameOrdinals
        pop    edx          ; edx = AddressOfNames
        pop    esi          ; esi = AddressOfFunctions
        pop    ecx          ; ecx = NumberOfNames
       sub    ecx, ebx     ; ecx = VA2RVA(NumberOfNames, base)
        jz     exp_l2       ; exit if no api
    exp_l3:
        mov    eax, [edx+4*ecx-4] ; get VA of API string
        add    eax, ebx           ; eax = RVA2VA(eax, ebx)
        call   crc32c             ; generate crc32 of api string
        add    eax, [esp+_edx]    ; add crc32 of DLL string
        cmp    eax, [esp+_ecx]    ; found match?
        loopne exp_l3             ; --ecx && eax != hash
        jne    exp_l2             ; exit if not found
        xchg   eax, ebx
        xchg   eax, ecx
        movzx  eax, word [edi+2*eax] ; eax = AddressOfOrdinals[eax]
        add    ecx, [esi+4*eax] ; ecx = base + AddressOfFunctions[eax]
    exp_l2:
        mov    [esp+_eax], ecx
        popad
        ret
这就是从导出目录获取API的方法。通过导入表更加巧妙。
**  
**
**0x06 Image Import Descriptor**  
2009年微软发布的[EMET](http://wordpress.redirectingat.com/?id=725X1342&site=modexp.wordpress.com&xs=1&isjs=1&url=https%3A%2F%2Fwww.microsoft.com%2Fen-ie%2Fdownload%2Fdetails.aspx%3Fid%3D50766&xguid=af1c229770783c0d21eeb9ff0b7752a7&xuuid=26a5c8a10a811eabfe96ba08cc519a8f&xsessid=2)阻止了一些从导出目录获取API的shellcode。
EMET从5.2版本开始，包含了导出表访问过滤（EAF）和EAF+功能，都会阻止尝试从模块读取导出和导入目录。
通常，一个shellcode使用IAT解析其他函数前会先获取[GetModuleHandle](http://wordpress.redirectingat.com/?id=725X1342&site=modexp.wordpress.com&xs=1&isjs=1&url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fwindows%2Fdesktop%2Fms683199\(v%3Dvs.85\).aspx&xguid=af1c229770783c0d21eeb9ff0b7752a7&xuuid=26a5c8a10a811eabfe96ba0)和[GeProcAddress](http://wordpress.redirectingat.com/?id=725X1342&site=modexp.wordpress.com&xs=1&isjs=1&url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fwindows%2Fdesktop%2Fms683212\(v%3Dvs.85\).aspx&xguid=af1c229770783c0d21eeb9ff0b7752a7&xuuid=26a5c8a10a811eabfe96ba0)的地址。
如果PE文件从其他模块导入API，这个导入目录将包含导入描述符的数组，每个代表一个模块。
来看下面3个字段：
**OriginalFirstThunk**
包含导入函数名的偏移。
**Name**
非0结尾字符串表示的导入API的源模块名。
**FirstThunk**
包含真实函数地址的偏移。
**0x07 Image Thunk Data**  
每个描述符包含了指向Image Thunk Data结构数组的指针。每个入口表示了导入的API的信息。
在代码中，我跳过了那些使用序号导入的入口。