‹q₂›； -- ⎬ evaluate the ‹qᵢ› in order,
⋮ -- ⋮ ‹qₙ› defines the result
‹qₙ› -- ⎭
$$
LANGUAGE SQL [IMMUTABLE];
+
all ‹qᵢ› are read-only ⇒ ‹f› is free of side effects
UDF ‹f› is stored persistently. Remove via DROP FUNCTION.
UDF Types
UDF ‹f› is k-ary with type τ₁ × ⋯ × τₖ → τ.
Argument types τᵢ must be atomic or row types.
Overloading allowed as long as (‹f›,τ₁,…,τₖ) is unique.
Limited form of polymorphism: any τᵢ and τ may be
anyelement/anyarray/anyenum/anyrange.
If any⋯ occurs more than once in the function
⚠
signature, all occurrences denote the same type:
╭──── ⁼ ────╮
f₁ :: anyelement × anyelement → boolean
f₂ :: anyarray × integer → anyelement
╰────── ₑₗₑₘ ₌ ─────╯
UDFs Can Return Tables
A UDF ‹f› :: τ₁ × ⋯ × τₖ → τ may be of two flavors:
Regular vs. Table-generating UDFs
atomic τ τ ≡ SETOF τ'
If ‹qₙ›4 returns no rows, returns NULL returns empty table
If ‹qₙ› returns rows, returns the first row returns all rows
May be invoked wherever v::τ is used in the FROM clause
A UDF may invoke INSERT/DELETE/UPDATE statements in ‹qᵢ›
and thus incur side-effects. (Hmm, UD6""#⭍)
No IMMUTABLE option — use VOLATILE instead.
Use τ ≡ void if ‹f› is all about side-effects or
consider adding … RETURNING ‹e₁›,…,‹eₘ› if i = n.
4 Recall: ‹f›'s body evaluates queries ‹q₁›,…,‹qₙ› (in this order).
Example UDF: Map Unicode Subscripts ✎
Map subscript symbol '₀',…,'₉' to its value in {0,…,9}:
CREATE FUNCTION subscript(s text) RETURNS int AS
$$
SELECT subs.value::int - 1
FROM unnest(array['₀','₁','₂',…,'₉'])
WITH ORDINALITY AS subs(sym,value)
WHERE subs.sym = s
$$
LANGUAGE SQL IMMUTABLE;
This is a UDF with atomic return type: yields NULL if s
does not denote a valid subscript.
Example UDF: Issue Unique ID, Write Protocol ✎
Generate ID of the form '‹prefix›###' and log time of issue:
CREATE FUNCTION new_ID(prefix text) RETURNS text AS
$$
INSERT INTO issue(id,"when") VALUES
(DEFAULT, 'now'::timestamp)
RETURNING prefix || id::text -- id: just generated
$$
LANGUAGE SQL VOLATILE; -- function is side-effecting
Table issue
id "# serial when
⋮ ⋮
42 2017-05-17 14:25896.928441
⋮ ⋮
Example Table-Generating UDF: Flatten a 2D-Array ✎
Unnest 2D array xss in column-major order:5
CREATE OR REPLACE FUNCTION unnest2(xss anyarray)
RETURNS SETOF anyelement AS
$$
SELECT xss[i][j]
FROM generate_subscripts(xss,1) _(i),
generate_subscripts(xss,2) __(j)
ORDER BY j, i -- return elements in column-major order
$$
LANGUAGE SQL IMMUTABLE;
Intended type is unnest2 :: τ[][] → SETOF τ.
⚠
5 Built-in function unnest(･) can flatten n-dimensional arrays in row-major order.
Table-Generating UDFs: Returning Typed Rows
Assume a table-generating UDF ‹f› :: ⋯ → τ.
If τ ≡
SETOF τ' ┊ SETOF τ' ┊ TABLE (c₁ τ₁,…,cₘ τₘ)
τ' atomic ┊ τ' ≡ (c₁::τ₁,…,cₘ::τₘ) ┊
┊ ┊
┌───┐ ┊ ┌────┬───┬────┐ ┊ ┌────┬───┬────┐
│ □ │ ┊ │ c₁ │ ⋯ │ cₘ │ ┊ │ c₁ │ ⋯ │ cₘ │
├───┤ ┊ ├────┼───┼────┤ ┊ ├────┼───┼────┤
│ v₁│ ┊ │ │ │ │ ┊ │ │ │ │
┊ ⋮ ┊ ┊ │ │ │ │ ┊ │ │ │ │
│ vₙ│ ┊ │ │ │ │ ┊ │ │ │ │
└───┘ ┊ └────┴───┴────┘ ┊ └────┴───┴────┘
q─r─s q──────────────────r──────────────────s
vᵢ::τ' equivalent, but do not need named row type τ'
7 ┆ ',' in the FROM Clause and Row Variable References
SELECT ⋯
FROM Q₁ AS t₁, Q₂ AS t₂, Q₃ AS t₃ -- tᵢ﹤ⱼ óòô free in Qⱼ
Q: Why is tᵢ﹤ⱼ not usable in Qⱼ?
A: “… the ',' in FROM is commutative and associative…”.
Query optimization might rearrange the Qⱼ:
Q₁ ⨉ Q₂ ⨉ Q₃ ➊ original order as suggested by FROM clause
⤩
Q₁ ⨉ Q₃ ⨉ Q₂ ➋ swapped Q₂,Q₃ (Q₁,Q₃ now adjacent)
⤩
(Q₃ ⨝ Q₁)⨉ Q₂ ➌ join Q₃,Q₁ first (expect small |Q₃ ⨝ Q₁|)
But Dependent Iteration in FROM is Useful""+
Recall (find largest label in each tree t₁):
SELECT t₁.tree, MAX(t₂.label) AS "largest label"
-- Q₁ Q₂
-- >─?─@ >───────?───────@
FROM Trees AS t₁, unnest(t₁.labels) AS t₂(label)
GROUP BY t₁.tree; +
⭍
Dependent iteration (here: Q₂ depends on t₁ defined in
Q₁) has its uses and admits intuitve query formulation.
⇒ Exception: the arguments of table-generating functions
may refer to row variables defined earlier (like t₁).
LATERAL:6 Dependent Iteration for Everyone
Prefix Qⱼ with LATERAL in the FROM clause to announce
dependent iteration:
SELECT ⋯
FROM Q₁ AS t₁, …, LATERAL Qⱼ AS tⱼ, …
+
may refer to t₁,…,tⱼ₋₁
Works for any table-valued SQL expression Qⱼ, subqueries
in (⋯) in particular.
Good style: be explicit and use LATERAL even with table
functions.
6 Lateral /ˈlæt(ə)rəl/ a. [Latin lateralis]: sideways
LATERAL: SQL's for each-Loop
LATERAL admits the formulation of nested-loops computation:
SELECT e
FROM Q₁ AS t₁, LATERAL Q₂ AS t₂, LATERAL Q₃ AS t₃
is evaluated just like this nested loop:
for t₁ in Q₁
for t₂ in Q₂(t₁)
for t₃ in Q₃(t₁,t₂)
return e(t₁,t₂,t₃)
Convenient, intuitive, and perfectly OK.
But much like hand-cuffs for the query optimizer.
⚠
LATERAL Example: Find the Top n Rows Among a Peer Group ✎
Which are the three tallest two- and four-legged dinosaurs?
SELECT locomotion.legs, tallest.species, tallest.height
FROM (VALUES (2), (4)) AS locomotion(legs),
LATERAL (SELECT d.*
FROM dinosaurs AS d
WHERE d.legs = locomotion.legs ?
ORDER BY d.height DESC
LIMIT 3) AS tallest
legs species height
2 Tyrannosaurus 7
2 Ceratosaurus 4
2 Spinosaurus 2.4
4 Supersaurus 10
4 Brachiosaurus 7.6
4 Diplodocus 3.6
@
8 ┆ ACM ICPC: Finding Seats
ACM ICPC Task Finding Seats (South American Regionals, 2007)
“K friends go to the movies but they are late for tickets.
To sit all nearby, they are looking for K free seats such
that the rectangle containing these seats has minimal area.”
Assume K = 5:
┌───────┐ free seat
┌ occupied seat
│
└ ┌─┐
┌ minimal seating
└ area has size 6
@
Finding Seats: Parse the ICPC Input Format
Typical ICPC character-based input format:
...XX␍ ┊ . free seat
.X.XX␍ ┊ X occupied seat
XX... ┊ ␍ new line
Parse into table making seat position/status explicit:
Table seats
row col taken?
1 1 false
1 2 false
1 3 false
1 4 true
⋮ ⋮ ⋮
3 5 false
@
Finding Seats: Parse the ICPC Input Format (Table seats)
\set cinema '...XX\\n.X.XX\\nXX...'
SELECT row.pos, col.pos, col.x = 'X' AS "taken?"
FROM -- rows
unnest(string_to_array(:'cinema', '\n'))
WITH ORDINALITY AS row(xs, pos),
-- columns
LATERAL unnest(string_to_array(row.xs, NULL))
WITH ORDINALITY AS col(x, pos)
string_to_array(:'cinema', '\n') yields an array of three
row strings: {'...XX','.X.XX','XX...'}.
string_to_array(row.xs, NULL) splits string row.xs into
an array of individual characters (= seats).
@
Finding Seats: A Problem Solution (Generate and Test)
Query Plan: ✎
1. Determine the extent (rows × cols) of the cinema
seating plan.
2. Generate all possible north-west (nw) and south-east
(se) corners of rectangular seating areas:
For each such ˹nw,se˼ rectangle, scan its seats and
test whether the number of free seats is ≥ K.
If so, record nw together with the rectangle's
width/height.
3. Among these rectangles with sufficient seating space,
select those with minimal area.
@
Finding Seats: Generating All Possible Rectangles
Generate all ˹nw,se˼ corners for rectangles up to maximum
size FGHI × JGKI:
SELECT ROW(row_nw, col_nw) AS nw,
ROW(row_se, col_se) AS se
FROM generate_series(1, úòùû) AS row_nw,
generate_series(1, üò†û) AS col_nw,
LATERAL generate_series(row_nw, úòùû) AS row_se,
LATERAL generate_series(col_nw, üò†û) AS col_se
⎛ʳᵒʷˢ⎞ ⎛ᶜᵒˡˢ⎞
Generates ⎜ ∑ r⎟ × ⎜ ∑ c⎟ rectangles ⇒ test/filter early!
⎝ʳ⁼¹ ⎠ ⎝ᶜ⁼¹ ⎠