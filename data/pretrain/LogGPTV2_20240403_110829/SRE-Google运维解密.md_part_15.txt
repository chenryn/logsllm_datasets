日（或者每周）对SLO达标程度的监控可以展示一个趋势，这样就可以在重大问题发生
达不到SLO的现象的发生频率对用户可见的服务健康度来说是一个有用的指标。通过每
SLO!)
能同时也需要按月度或者季度的评估。（错误预算其实就是保证达到其他SLO的一个
Budget)-
署的速度，
要求SLO能够被100%满足是不正确，也是不现实的：过于强调这个会降低创新和部
可能应该为每种负载指定单独的SLO目标：
如果我们同时具有批处理用户（关注吞吐量）以及在线交互式用户（关注延迟），那么
如果性能曲线也很重要的话，我们可以指定多个SLO目标：
我们可能说：
为了更清晰地定义，
目标的定义
因此，
·99%的交互式用户Set RPC，并且RPC负载小于1KB的应该在10ms之内完成。
·95%的批处理用户SetRPC应该在1s之内完成。
·90%的GetRPC会在1ms内完成
·99%的GetRPC会在100ms内完成（这一句与上一句一样，只是利用了SLI模
·99%（在1分钟的时间范围内汇总）的GetRPC调用会在小于100ms的时间内完
与其选择指标，再想出对应的目标，
99.9%的GetRPC会在100ms内完成。
99%的GetRPC会在10ms内完成。
板中的信息减少了重复信息）。
成（包括全部后端服务器）。
第4章
—对达不到SLO的容忍度一—以天或者以周为单位计量。高层管理者可
增加一些成本过高、过于保守的方案。更好的方案是使用错误预算（Error
服务质量目标
，SLO应该具体指出它们是如何被度量的，以及其有效条件。例如，
不如从想要的目标反向推导出具体的指标。
---
## Page 83
不要追求完美
SLO越少越好
避免绝对值
保持简单
SRE应该积极参与这类讨论，提供有关可行性和风险性的建议，下面列出了一些有用的
杠杆：要小心使用。
于激进的SLO，而如果SLO过于松散，则会导致产品效果很差。SLO是一个很重要的
SLO代表了用户体验的程度。好的SLO是对开发团队有效的、可行的激励机制。但是
SLO可以成为一
不要仅以目前的状态为基础选择目标
讨论。
产品特性，以便满足人员、上线时间（time tomarket）、硬件可用性，以及资金的限制。
和SLO（甚至SLA）的选择都应该直接反映该决策。同样的，有时候可能可以牺牲某些
一个没有经过精心调校的SLO会导致浪费，某团队可能需要付出很大代价来维护一个过
2
2如果SRE团队无法说服研发团队接受任何一个SLO，那么这个产品可能压根不需要SRE团队的支持。
我们可以随着时间流逝了解系统行为之后优化SLO的定义。刚开始可以以一个松散
虽然要求系统可以在没有任何延迟增长的情况下无限扩张，或者“永远”可用是很
SLI中过于复杂的汇总模式可能会掩盖某种系统性能的变化，同时也更难以理解。
得多。
的目标开始，逐渐收紧。这比一开始制定一个困难的目标，在出现问题时放松要好
要的2。然而，不是所有的产品属性都能用SLO表达，用户的“满意度”就很难。
如果我们无法针对某个SLO达标问题说服开发团队，那么可能这个SLO就是不必
应该仅仅选择足够的SLO来覆盖系统属性，一定要确保每一个SLO都是必不可少的：
以接受的（甚至是很开心地接受的）标准要高太多。
要花很长时间来设计和构建，同时运维也很复杂一
诱人的，但是这样的要求是不切实际的。就算有一个系统能够做到这一点，它也需
构重构等任务。
不从全局出发，
了解系统的各项指标和限制非常重要，但是仅仅按照当前系统的标准制定目标，而
一也应该成为一
，可能会导致团队被迫长期运维一个过时的系统，没有时间去推动架
一SRE和产品团队划分工作优先级的重要参考，因为
一最关键的是，这可能比用户可
目标在实践中的应用
41
<46
---
## Page 84
注3Failure Injection（参见文献[Ben12]）是另外一个方法，也可以用来调节用户的预期。
如消除技术债务、增加新功能，或者引入其他产品等。
快、更可用，或者更可靠。如果服务一切正常，可能力量应该花在其他的优先级上，例
理解系统行为与预期的符合程度可以帮助决策是否需要投入力量优化系统，使其速度更
实际SLO也不要过高
留出一定的安全区
为了让用户拥有正确的预期，我们可以考虑使用以下几种策略：
的系统。但是，可能会使用另外一个存档信息管理系统。
要开发一个照片分享网站，可能会避免使用一个数据持久性高、成本低，但是可用性低
们可以预期的服务质量，以便理解该服务是否能够满足他们的要求。例如，某个团队想
通过公布SLO可以设置用户对系统行为的预期。用户（以及潜在用户）经常希望知道他
SLO可以建立用户预期
有SLO的话，我们就不知道是否（或者何时）需要执行该动作。
围。第3步则会测试服务器是否是CPU资源不够，同时增加一些CPU来分散负载。没
例如，如果在第2步中，请求延迟正在上涨，无操作的话，会在几个小时内超出SLO范
SLI和SLO在决策系统运维时也非常有用：
控制手段
或者限制系统在低负载情况下也不会速度过快的手段。
Chubby服务会用计划内维护来避免过于可用。）注3同时，可以采取对一些请求限速，
逐渐依赖于现在的假象。我们可以利用主观可控模式减少这种过度依赖。（Google
设施类服务上非常明显。如果服务的实际性能要比SLO宣传得好太多，用户可能会
用户一般不会严格按照书本定义的SLO，而是按照实际情况来构建服务，这在基础
缓冲区保护我们不会对用户产生直接影响。
缓冲区也可以用来进行可能影响系统属性的重构，例如降低成本以及方便运维等，
对内使用更高的SLO，对外使用稍低的SLO可以留出一些时间用来响应问题。SLO
4
1.监控并且度量系统的SLI。
执行这些操作。
如果需要执行操作，则要决定究竟什么操作需要被执行，以便满足目标。
比较SLI和SLO，以决定是否需要执行操作。
第4章服务质量目标
---
## Page 85
或者很有困难达到的SLA就越困难。
样适用于SLA。最好在用户宣传方面保持保守，因为受众越广，修改和删除一个不合适
用是帮助这些部门理解SLA的SLO达标的概率和困难程度。许多针对SLO的建议也同
起草一份SLA需要业务部门和法务部门选择合适的后果条款。SRE在这个过程中的作
协议在实践中的应用
协议在实践中的应用
---
## Page 86
第
44
到底什么是琐事？琐事就是运维服务中手动性的，重复性的，可以被自动化的，战术性，
不能算作琐事。例如，为服务清理警报规则或降低噪声率可能是一件繁重的工作，但这
估注、每周总结准2以及人力资源的书面工作等。而脏活累活通常具有长期价值，这些也
被误解，我们在这里使用一个专门的词语一
SRE要把更多的时间花费在长期项目研发上而非日常运维中。因为术语日常运维可能会
编辑：BetsyBeyer
作者：VivekRau
减少琐事
些不是琐事。
开销通常是指那些和运维产品服务不直接相关的工作，包括团队会议、目标的建立和评
一些管理类杂务是必须做的，不应该被归类为琐事：这些是流程开销（overhead）。流程
活。每个人满意和喜欢的工作类型是不同的，有的人很喜欢手工的、重复性的工作。同时，
琐事的定义
5章
“正常”的定义会随系统的进步而不断改变。
如果系统正常运转中需要人工干预，应该将此视为一种Bug。
一琐事（toil）。
-Carla Geisser,Google SRE
---
## Page 87
SRE的一个公开目标是保持每个SRE的工作时间中运维工作（即琐事）的比例低于
为什么琐事越少越好
与服务同步线性增长
没有持久价值
战术性的
可以被自动化的
重复性的
手动性
全部特性，但是，每件琐事都满足下列一个或多个属性：
没有持久价值的工作。而且，琐事与服务呈线性关系的增长。并不是每件琐事都有以上
注3
增长，而不需要某些一次性工作（例如增加资源）之外的额外工作。
项任务可能属于琐事。
如果在工作中所涉及的任务与服务的大小、流量或用户数量呈线性增长关系，那这
掘遗留代码和配置并且将它们清理出去也不是琐事。
这项任务会给服务带来永久性的改进，它就不是琐事。
如果在你完成某项任务之后，服务状态没有改变，这项任务就很可能是琐事。如果
琐事。我们可能永远无法完全消除这种类型的工作，但我们必须继续努力减少它。
琐事是突然出现的、应对式的工作，而非策略驱动和主动安排的。处理紧急警报是
程度上这项任务不属于琐事。注3
底消除对某项任务的需求，这项任务就是琐事。如果主观判断是必需的，那么很大
如果计算机可以和人类一样能够很好地完成某个任务，或者通过某种设计变更来彻
的工作。如果你正在解决一个新出现的问题或者寻求一种新的解决办法，不算作琐事。
如果某件事是第一次做，甚至第二次做，都不应该算作琐事。琐事就是不停反复做
应该被认为是琐事。
每一步要快，但具体运行脚本所花费的手动的时间（而非脚本所需要的运行时间）
例如手动运行脚本以便自动执行一些任务。运行一个脚本可能比手动执行脚本中的
很
发
是否本质上需要主观判断，
我们在讨论一个任务“不是琐事，
重
新设计和重构完成以及完整发布之前，依赖主观判断来应对每一个警报的工作就绝对是琐事。
多复杂性是不必要的。该系统需要被简化、重构以消除掉潜在的故障情况，或者自动处理这些情况
出数次警报，并且每个警报都需要大量主观判断的复杂响应。这样的服务从设计上来说就是不佳的
一个良好管理和设计的服务应该至少可以应对一个数量级的
并且不能通过更好的设计来消除这种需要。
因为它需要主观判断”的时候要非常谨慎。
为什么琐事越少越好
一些繁重的工作—
比如，
。需要仔细考虑这项任
某项服务可能每天都要
—比如挖
45
务
<50
51