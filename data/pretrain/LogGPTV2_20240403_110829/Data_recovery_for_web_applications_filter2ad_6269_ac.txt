### 3.5 Recovery
### 4. Evaluation

We evaluate our system based on its effectiveness in recovering from data corruption in web applications, as well as its performance and space overheads. For our experiments, we used MySQL with its transactional storage engine (InnoDB) to simulate data corruption caused by bugs found in popular web applications.

#### 4.1 Dependency Policies

The goal of our analysis tools is to provide sufficient information to the administrator to identify and recover from data corruption. To this end, our tools support different dependency policies, which are compared in terms of recovery accuracy:

1. **Request-level (request-row)**: This policy is the most conservative, assuming that a request is tainted if it reads a tainted row. All further updates by the request are considered tainted, regardless of whether the request is used to update the database. This policy uses row-level tainting and assumes all variables initialized during a request are marked as tainted, with taint propagated across requests.

2. **Program-level (program-row)**: This policy takes application-level dependencies into consideration. During a request, if a query with tainted values is executed, the taint is propagated through the data flow graph. This policy implements previously proposed methods [19] and propagates taints when queries read rows and update other rows.

3. **Database-level (database-row)**: This policy does not consider application-level dependencies and only creates dependencies at the database level. It taints rows and updates other rows, but may fail to capture all the effects of the corruption. The recovery process is performed at the query level rather than the request level.

4. **Program-level (program-field)**: This policy is similar to the program-row policy but operates at a field granularity. It also allows us to take advantage of blind writes.

5. **Database-level (database-field)**: This policy is similar to the database-row policy but operates at a field granularity.

#### 4.2 Recovery Accuracy

We evaluated the accuracy of our dependency policies by analyzing five real bugs in popular web applications, including WordPress, Drupal, and Gallery2. We define correct recovery actions as those that will remove data corruption and bring the application back to a consistent state while minimizing data loss.

**Metrics:**
- **False Positives**: Requests that are marked as tainted but should not be.
- **False Negatives**: Requests that are not marked as tainted but should be.
- **Inconsistencies After Recovery**: Data inconsistencies that remain after the recovery process.

**Results:**

**Table 2. Recovery accuracy for request-level and program-level dependency policies.**

| Case | Total Number of Requests | Requests to Undo | Dep. Policy | False Positives | False Negatives |
|------|--------------------------|------------------|-------------|-----------------|-----------------|
| Wordpress - link category rename | 109 | 7 | none | 0 | 0 |
| Drupal - lost voting information | 118 | 1 | none | 0 | 6 |
| Drupal - lost comments | 117 | 1 | none | 0 | 0 |
| Gallery2 - removing permissions | 91 | 1 | none | 0 | 0 |
| Gallery2 - resizing images | 151 | 0 | none | 0 | 0 |

**Table 3. Recovery accuracy of database-level dependency policies.**

| Case | Queries to Undo | Dep. Policy | False Positives | False Negatives | Inconsistencies After Undo |
|------|-----------------|-------------|-----------------|-----------------|----------------------------|
| Wordpress - link category rename | 23 | database-row | 0 | 0 | 0 |
| Drupal - lost voting information | 38 | database-row | 0 | 0 | 0 |
| Drupal - lost comments | 24 | database-row | 0 | 0 | 0 |
| Gallery2 - removing permissions | 9 | database-row | 0 | 0 | 0 |
| Gallery2 - resizing images | 17 | database-row | 0 | 0 | 0 |

**Observations:**
- The request-level and program-level policies suffer from high false positive rates.
- Database-level policies have fewer false positives but can have many false negatives.
- The program-field policy generally has the least number of false positives and no false negatives, making it the most accurate for recovery.

**Case Study: WordPress - Link Category Rename**

**Scenario:**
An administrator renames a category to an empty string, causing links associated with that category to be lost.

**Correct Recovery Actions:**
- Undo the rename operation.
- Restore the category name and re-associate the links.

**Background:**
WordPress maintains separate tables for links, terms, and term_taxonomy. A bug [14] allows the administrator to rename a category to an empty string, leading to data corruption.

**Results:**
- The request-row policy marks many requests as falsely dependent due to shared table access, leading to many false positives.
- The program-field policy, however, accurately identifies the tainted requests, resulting in the correct recovery action without the need for whitelisting.

**Conclusion:**
Our evaluation shows that the program-field policy provides the most accurate recovery with the least amount of false positives and no false negatives. This makes it the preferred choice for recovering from data corruption in web applications.