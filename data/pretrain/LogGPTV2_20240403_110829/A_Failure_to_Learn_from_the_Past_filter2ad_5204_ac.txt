Once a password was broken for any account, the Worm
would attempt to break into remote machines where that
user had accounts. The Worm would scan mail and remote
login control ﬁles of the user at this point, and identify the
names of remote hosts that had accounts used by the tar-
get user. It then attempted two attacks:
The Worm would ﬁrst attempt to create a remote shell
using the rexec remote command execution service. That
service required that a username/password combination be
supplied as part of the request. The attempt would be made
using the various account names found in local ﬁles and the
user’s local password. This took advantage of users’ ten-
dency to use the same password on their accounts on multi-
ple machines.
The code would ﬁrst do an rexec to the current host
(using the local user name and password) and would then
try a remote shell invocation on the remote host using the
username taken from the ﬁle. This attack would succeed
when the remote machine allowed the user to log in with-
out a password (a trust relationship existed).
If the remote shell was created either way, the attack
would continue as described above. No other use was made
of the user password.
Throughout the execution of the main loop, the Worm
would check for other Worms running on the same ma-
chine. To do this, the Worm would attempt to connect to an-
other Worm on a local, predetermined TCP socket. This was
compiled in as port number 23357, on host 127.0.0.1 (loop-
back). If such a connection succeeded, one Worm would
(randomly) set an internal variable named pleasequit
to 1, causing that Worm to exit after it had reached part way
into the third stage of password cracking. This delay is part
of the reason many systems had multiple Worms running:
even though a Worm would check for other local Worms, it
would defer its termination until signiﬁcant effort had been
made to break local passwords. Furthermore, race condi-
tions in the code made it possible for Worms on heavily
loaded machines to fail to connect, thus causing some of
them to continue indeﬁnitely despite the presence of other
instances.
One out of every seven Worms would become “immor-
tal” rather than check for other local Worms. Based on a
generated random number they would set an internal ﬂag
that would prevent them from ever looking for another
Worm on their host. This may have been done to defeat
any attempt to put a fake Worm process on the TCP port
to kill existing Worms. Whatever the reason, this was likely
the primary cause of machines being overloaded with mul-
tiple copies of the Worm.
The Worm attempted to send a UDP packet to the host
ernie.berkeley.edu approximately once every 15 infections,
based on a random number comparison. The code to do this
was incorrect, however, and no information was ever sent.
Whether this was the intended behavior or whether there
was some reason for the byte to be sent is not known. How-
ever, the code is such that an uninitialized byte was the
intended message. It is possible that the author eventually
intended to run some monitoring program on ernie (after
breaking into an account, perhaps). Such a program could
obtain the sending host number from the single-byte mes-
sage. However, no evidence for such a program was ever
found and it is possible that the connection was simply a
feint to cast suspicion on personnel at Berkeley.
The Worm would also duplicate itself on a regular basis
and kill its parent. This had two effects. First, the Worm ap-
peared to keep changing its process identiﬁer and no single
process accumulated excessive amounts of cpu time. Sec-
ondly, processes that had been running for a long time had
their priority downgraded by the scheduler. By forking, the
new process would regain normal scheduling priority. This
mechanism did not always work correctly, either, as at Pur-
due we observed some instances of the Worm with over 600
seconds of accumulated cpu time.
If the Worm was present on a machine for more than 12
hours, it would ﬂush its host list of all entries ﬂagged as be-
ing immune or already infected. The way hosts were added
to this list implies that a single Worm might reinfect the
same machines every 12 hours.
4. Chronology
What follows is an abbreviated chronology of events re-
lating to the release of the Internet Worm. Most of this in-
formation was gathered from personal mail, submissions to
mailing lists, and Usenet postings. Some items were also
taken from [19] and [16] and are marked accordingly. Note
that because of clock drift and machine crashes, some of
the times given here may not be completely accurate. They
should convey an approximation to the sequence of events,
however. All times are given in Eastern Standard Time.
My archived version of the phage list referenced be-
recently (mid-2003) made available via a
low was
WWW interface. An annotated version can be found at
.
November 2, 1988
1700 Worm executed on a machine at Cornell University.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
(NCSC) Whether this was a last test or the initial exe-
cution is not known.
1800 Machine prep.ai.mit.edu at MIT infected. (Seely,
mail) This may have been the initial execution. Prep
was a public-access machine, used for storage and dis-
tribution of GNU project software. It was conﬁgured
with some notorious security holes that allowed anony-
mous remote users to introduce ﬁles into the system.
1830 Infected machine at the University of Pittsburgh in-
fects a machine at the RAND Corporation. (NCSC)
2100 Worm discovered on machines at Stanford. (NCSC)
2130 First machine at the University of Minnesota in-
vaded. (mail)
2204 Gateway machine at University of California, Berke-
ley invaded. Mike Karels and Phil Lapsley discover
this shortly afterwards because they noticed an unusual
load on the machine. (mail)
2234 Gateway machine at Princeton University infected.
(mail)
2240 Machines at the University of North Carolina are in-
fected and attempt to invade other machines. Attempts
on machines at MCNC (Microelectronics Center of
North Carolina) start at 2240. (mail)
2248 Machines at SRI infected via sendmail. (mail)
2252 Worm attempts to invade machine andrew.cmu.edu
at Carnegie-Mellon University. (mail)
2254 Gateway hosts at the University of Maryland come
under attack via fingerd daemon. Evidence is later
found that other local hosts are already infected. (mail)
2259 Machines at University of Pennsylvania attacked, but
none are susceptible. Logs will later show 210 attempts
over next 12 hours. (mail)
2300 AI Lab machines at MIT infected. (NCSC)
2328 mimsy.umd.edu at University of Maryland is in-
fected via sendmail. (mail)
2340 Researchers at Berkeley discover sendmail and
rsh as means of attack. They begin to shut off other
network services as a precaution. (Seeley)
2345 Machines at Dartmouth and the Army Ballistics Re-
search Lab (BRL) attacked and infected. (mail, NCSC)
2349 Gateway machine at the University of Utah infected.
In the next hour, the load average will soar to 100 (nor-
mal average was below 10) because of repeated infec-
tions. (Seeley)
November 3, 1988
0007 University of Arizona machine arizona.edu infected.
(mail)
0021 Princeton University main machine (a VAX 8650)
infected. Load average reaches 68 and the machine
crashes. (mail)
0033 Machine dewey.udel.edu at
the University of
Delaware infected, but not by sendmail. (mail)
0105 Worm invades machines at Lawrence Livermore
Labs (LLNL). (NCSC)
0130 Machines at UCLA infected. (mail)
0200 The Worm is detected on machines at Harvard Uni-
versity. (NCSC)
0238 Peter Yee at Berkeley posts a message to the TCP-
IP mailing list: “We are under attack.” Affected sites
mentioned in the posting include U. C. Berkeley, U. C.
San Diego, LLL, Stanford, and NASA Ames. (mail)
0315 Machines at the University of Chicago are in-
fected. One machine in the Physics department logs
over 225 infection attempts via fingerd from ma-
chines at Cornell during the time period midnight to
0730. (mail)
0334 Warning about the Worm is posted anonymously
(from PI:EMAIL ) to the TCP-IP mailing list:
“There may be a virus loose on the internet. What fol-
lows are three brief statements of how to stop
the Worm,” followed by “Hope this helps, but
more, I hope it is a hoax.” The poster is later re-
vealed to be Andy Sudduth of Harvard, who was
phoned by the Worm’s author, Robert T. Morris. Be-
cause of network and machine loads, the warning is
not propagated for well over 24 hours. (mail, See-
ley)
0400 Colorado State University attacked. (mail)
0400 Machines at Purdue University infected.
0554 Keith Bostic mails out a warning about the Worm,
plus a patch to sendmail. His posting goes to the
TCP-IP list, the Usenix 4bsd-ucb-ﬁxes newsgroup, and
selected site administrators around the country. (mail,
Seeley)
0645 Clifford Stoll calls the National Computer Security
Center and informs them of the Worm. (NCSC)
0700 Machines at Georgia Institute of Technology are in-
fected. Gateway machine (a Vax 780) load average be-
gins climb past 30. (mail)
0730 I discover infection on machines at Purdue Univer-
sity. Machines are so overloaded I cannot read my mail
or news, including mail from Keith Bostic about the
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
Worm. Believing this to be related to a recurring hard-
ware problem on my machine, I request that the sys-
tem be restarted.
2120 Personnel at Purdue verify, after repeated attempts,
that creating a directory named sh in /usr/tmp
prevents infection. I post this information to phage.
0807 Edward Wang at Berkeley unravels fingerd at-
tack, but his mail to the systems group is not read for
more than 12 hours. (mail)
0818 I read Keith’s mail. I forward his warning to the
Usenet news.announce.important newsgroup, to the
nntp-managers mailing list, and to over 30 other site
admins. This is the ﬁrst notice most of these people
get about the Worm. This group exchanges mail all day
about progress and behavior of the Worm, and eventu-
ally becomes the phage mailing list based at Purdue
with over 300 recipients.
0900 Machines on Nysernet found to be infected. (mail)
1036 I mail ﬁrst description of how the Worm works to the
mailing list and to the Risks Digest. The ﬁngerd attack
is not yet known.
1130 The Defense Communications Agency inhibits the
mailbridges between ARPAnet and Milnet. (NCSC)
1200 Over 120 machines at SRI in the Science & Tech-
nology center are shut down. Between 1/3 and 1/2 are
found to be infected. (mail)
1450 Personnel at Purdue discover machines with patched
versions of sendmail reinfected. I mail and post
warning that the sendmail patch by itself is not suf-
ﬁcient protection. This was known at various sites, in-
cluding Berkeley and MIT, over 12 hours earlier but
never publicized.
1600 System admins of Purdue systems meet to discuss lo-
cal strategy. Captured versions of the Worm suggest a
way to prevent infection: create a directory named sh
in the /usr/tmp directory.
1800 Mike Spitzer and Mike Rowan of Purdue discover
how the finger bug works. A mailer error causes
their explanation to fail to leave Purdue machines.
1900 Bill Sommerﬁeld of MIT recreates fingerd attack
and phones Berkeley with this information. Nothing
is mailed or posted about this avenue of attack. (mail,
Seeley)
1919 Keith Bostic posts and mails new patches for
sendmail and fingerd. They are corrupted in
transit. Many sites do not receive them until the next
day. (mail, Seeley)
1937 Tim Becker of the University of Rochester mails out
description of the fingerd attack. This one reaches
the phage mailing list. (mail)
2100 My original mail about the Worm, sent at 0818, ﬁ-
nally reaches the University of Maryland. (mail)
2130 Group at Berkeley begins decompiling Worm into C
code. (Seeley)
November 4, 1988
0050 Bill Sommerﬁeld mails out description of fingerd
attack. He also makes ﬁrst comments about the coding
style of the Worm’s author. (mail)
0500 MIT group ﬁnishes code decompilation. (mail,
NCSC)
0900 Berkeley group ﬁnishes code decompilation. (mail,
NCSC, Seeley)
1100 Milnet-ARPAnet mailbridges restored. (NCSC)
1420 Keith Bostic reposts ﬁx to ﬁngerd. (mail)
1536 Ted Ts’o of MIT posts clariﬁcation of how Worm op-
erates. (mail)
1720 Keith Bostic posts ﬁnal set of patches for sendmail
and fingerd. Included is humorous set of ﬁxes to
bugs in the decompiled Worm source code. (mail)
2130 John Markhoff of the New York Times tells me in
a phone conversation that he has identiﬁed the au-
thor of the Worm and conﬁrmed it with at least two
independent sources. The next morning’s paper will
identify the author as Robert T. Morris, son of the
National Computer Security Center’s chief scientist,
Robert Morris. (Markhoff)
November 5, 1988
0147 Mailing is made to phage mailing list by Erik Fair of
Apple claiming he had heard that Robert Morse (sic)
was the author of the Worm and that its release was
an accident. (mail) This news was relayed though vari-
ous mail messages and appears to have originated with
John Markhoff.
1632 Andy Sudduth acknowledges authorship of anony-
mous warning to TCP-IP mailing list. (mail)
By Tuesday, November 8, most machines had connected
back to the Internet and trafﬁc patterns had returned to near
normal. That morning, about 50 people from around the
country met with ofﬁcials of the National Computer Secu-
rity Center at a hastily convened post-mortem on the Worm.
Network trafﬁc analyzers continued to record infection
attempts from (apparently) Worm programs still running on
Internet machines. The last such instance occurred in the
early part of December.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
5. Aftermath
5.1. Author, Intent, and Punishment
Two of
the ﬁrst questions to be asked even be-
fore the Worm was stopped were simply the questions
”Who?” and ”Why?”. Who had written the Worm, and
why had he/she/they loosed it in the Internet? The ques-
tion of ”Who?” was answered shortly thereafter when
the New York Times identiﬁed Robert T. Morris. The re-
port from the Provost’s ofﬁce at Cornell [8] also named
Robert T. Morris as the culprit, and presented convinc-
ing reasons for that conclusion.
Morris was charged with a Federal felony under 18
U.S.C. 1030 and underwent trial in the district court in Syra-
cuse, NY. He did not deny that he had written and released
the Worm, but he pled not guilty to the felony. His defense
included that he did not intend to cause damage, and that
the damage did not meet the required threshold. Testimony