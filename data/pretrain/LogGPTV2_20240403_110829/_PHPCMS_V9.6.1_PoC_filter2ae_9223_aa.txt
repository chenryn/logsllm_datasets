# 【漏洞分析】PHPCMS V9.6.1 任意文件读取漏洞分析（含PoC，已有补丁）
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[ **0r3ak@0kee
Team**](http://bobao.360.cn/member/contribute?uid=1056944258)
预估稿费：500RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
PHPCMS于今天（2017年5月3日）下午已发布9.6.2版本修复了该漏洞。PHPCMS
V9.6.1是前段时间PHPCMS官方于4月12号推出的版本，修复了4月上旬公开的两个高危漏洞，一个前台注册接口的Getshell，另外一个是down模块的SQL注入漏洞：
PHPCMS V9.6.1 版本信息：
由于任意文件读取漏洞与down模块的SQL注入的问题出现在同一个类，那么先来回顾SQL注入的修复方式：
修复方式很常规的，将之前忽略的整型id参数给intval起来了，话说phpcms修复漏洞方式都是简单粗暴，哪里有漏洞补哪里。
由于漏洞出现在PHPCMS
V9.6.1里面代码里面（9.6.0以及之前的版本不存在），所以官方在修复了前面两个高危后再出了V9.6.1，检查了一下SQL注入与getshell漏洞的修复方式后就没去再仔细跟新版的代码，直到外界放出了声音后就仔细跟进了。
**漏洞技术分析**
**漏洞描述**
**漏洞危害：** 读取系统任意文件
**影响版本：** Phpcms V9.6.1 Release 20170412
**官方补丁：** 已发布（详情请见下文修复方案）
**漏洞成因**
此次的任意文件读取漏洞也出现在down类中，上次的sql注入也是这里的坑，所以应该叫继续分析吧，先来看漏洞触发点：
/phpcms/modules/content/down.php Line 103-127
           if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(.|$)/i',$f) || strpos($f, ":\")!==FALSE || strpos($f,'..')!==FALSE) showmessage(L('url_error'));
            $fileurl = trim($f);
            if(!$downid || empty($fileurl) || !preg_match("/[0-9]{10}/", $starttime) || !preg_match("/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/", $ip) || $ip != ip()) showmessage(L('illegal_parameters'));    
            $endtime = SYS_TIME - $starttime;
            if($endtime > 3600) showmessage(L('url_invalid'));
            if($m) $fileurl = trim($s).trim($fileurl);
           if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(.|$)/i',$fileurl) ) showmessage(L('url_error'));
            //远程文件
            if(strpos($fileurl, ':/') && (strpos($fileurl, pc_base::load_config('system','upload_url')) === false)) { 
                header("Location: $fileurl");
            } else {
                if($d == 0) {
                    header("Location: ".$fileurl);
                } else {
                    $fileurl = str_replace(array(pc_base::load_config('system','upload_url'),'/'), array(pc_base::load_config('system','upload_path'),DIRECTORY_SEPARATOR), $fileurl);
                    $filename = basename($fileurl);
                    //处理中文文件
                    if(preg_match("/^([sS]*?)([x81-xfe][x40-xfe])([sS]*?)/", $fileurl)) {
                        $filename = str_replace(array("%5C", "%2F", "%3A"), array("\", "/", ":"), urlencode($fileurl));
                        $filename = urldecode(basename($filename));
                    }
                    $ext = fileext($filename);
                    $filename = date('Ymd_his').random(3).'.'.$ext;
                    $fileurl = str_replace(array(''), '',$fileurl);
                    file_down($fileurl, $filename);
最后一行有file_down函数，跟进去看一下：phpcms/libs/functions/global.fun.php Line 1187-1204
    function file_down($filepath, $filename = '') {
        if(!$filename) $filename = basename($filepath);
        if(is_ie()) $filename = rawurlencode($filename);
        $filetype = fileext($filename);
        $filesize = sprintf("%u", filesize($filepath));
        if(ob_get_length() !== false) @ob_end_clean();
        header('Pragma: public');
        header('Last-Modified: '.gmdate('D, d M Y H:i:s') . ' GMT');
        header('Cache-Control: no-store, no-cache, must-revalidate');
        header('Cache-Control: pre-check=0, post-check=0, max-age=0');
        header('Content-Transfer-Encoding: binary');
        header('Content-Encoding: none');
        header('Content-type: '.$filetype);
        header('Content-Disposition: attachment; filename="'.$filename.'"');
        header('Content-length: '.$filesize);
        readfile($filepath);
        exit;
    }
就一个普通的文件下载方法，当$fileurl传入后会去下载指定文件，再回到down.php文件中，在执行file_down前是走了几次判断：
（1）首先从头到尾判断$f参数中是否有php等服务端脚本文件，再看看是否带有”:\”外链文件，是否”..”目录跳转，满足其中一个条件就返回True。
    if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(.|$)/i',$f) || strpos($f, ":\")!==FALSE || strpos($f,'..')!==FALSE) showmessage(L('url_error'));
满足后执行show message抛出错误信息，虽然没有exit结束程序，但是咱们的file_down是在二级if分支的else里面的，无法执行到目标函数。
（2）接着$f的值赋给了$fileurl参数，再做了一次内容判断。
    if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(.|$)/i',$fileurl) ) showmessage(L('url_error'));
（3）将$s与$fileurl拼接起来，而$fileurl就是前面可控的$f：
    if($m) $fileurl = trim($s).trim($fileurl);
（4）处理远程文件，如果是外链文件的话直接跳转到目标地址。
    if(strpos($fileurl, ':/') && (strpos($fileurl, pc_base::load_config('system','upload_url')) === false)) {
         header("Location: $fileurl");
    }
接着走到else分支里面的str_replace，将$fileurl参数中的所有”>”、”init()的内容，将参数传到$a_k并进行sys_auth加密，然后传给了下面的download函数，这里的$a_k已经进行了encode加密操作：
init函数与download函数中的$a_k变量保持加／解密钥的一致性：
    if(strpos($f, 'http://') !== FALSE || strpos($f, 'ftp://') !== FALSE || strpos($f, '://') === FALSE) {
                $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down');
                $a_k = urlencode(sys_auth("i=$i&d=$d&s=$s&t=".SYS_TIME."&ip=".ip()."&m=".$m."&f=$f&modelid=".$modelid, 'ENCODE', $pc_auth_key));
    …
    …
    public function download() {
            $a_k = trim($_GET['a_k']);
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down');
            $a_k = sys_auth($a_k, 'DECODE', $pc_auth_key);
密钥key：
    $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down');
再往下跟进：
    public function download() {
            $a_k = trim($_GET['a_k']);
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down');
            $a_k = sys_auth($a_k, 'DECODE', $pc_auth_key);
            if(empty($a_k)) showmessage(L('illegal_parameters'));
            unset($i,$m,$f,$t,$ip);
            $a_k = safe_replace($a_k);
            parse_str($a_k);        
            if(isset($i)) $downid = intval($i);
            if(!isset($m)) showmessage(L('illegal_parameters'));
            if(!isset($modelid)) showmessage(L('illegal_parameters'));
            if(empty($f)) showmessage(L('url_invalid'));
            if(!$i || $minit()中经过safe_replace处理过一次，经过sys_auth解密，key无法获取，所以需要让系统来为我们生成加密串a_k：
/phpcms/modules/content/down.php Line 11-18
    public function init() {
            $a_k = trim($_GET['a_k']);
            if(!isset($a_k)) showmessage(L('illegal_parameters'));
            $a_k = sys_auth($a_k, 'DECODE', pc_base::load_config('system','auth_key'));
            if(empty($a_k)) showmessage(L('illegal_parameters'));
            unset($i,$m,$f);
            $a_k = safe_replace($a_k);
            parse_str($a_k);
可以看出这里跟上次的sql注入点一样，获取了a_k进行了一次DECODE，那么咱们就需要一个加密好的key，最好的办法还是采用attachments模块的swfupload_json的加密cookie方法(跟之前的注入payload加密一个套路)，这也是采用了phpcms功能的特性吧：
/phpcms/modules/attachment/attachments.php LINE 239-253
    /**
         * 设置swfupload上传的json格式cookie
         */
        public function swfupload_json() {
            $arr['aid'] = intval($_GET['aid']);
            $arr['src'] = safe_replace(trim($_GET['src']));
            $arr['filename'] = urlencode(safe_replace($_GET['filename']));
            $json_str = json_encode($arr);
            $att_arr_exist = param::get_cookie('att_json');
            $att_arr_exist_tmp = explode('||', $att_arr_exist);
            if(is_array($att_arr_exist_tmp) && in_array($json_str, $att_arr_exist_tmp)) {
                return true;
            } else {
                $json_str = $att_arr_exist ? $att_arr_exist.'||'.$json_str : $json_str;
                param::set_cookie('att_json',$json_str);