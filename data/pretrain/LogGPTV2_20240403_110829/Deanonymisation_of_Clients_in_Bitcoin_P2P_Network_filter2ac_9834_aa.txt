title:Deanonymisation of Clients in Bitcoin P2P Network
author:Alex Biryukov and
Dmitry Khovratovich and
Ivan Pustogarov
Deanonymisation of Clients in Bitcoin P2P Network
Alex Biryukov
Dmitry Khovratovich
Ivan Pustogarov
{alex.biryukov, dmitry.khovratovich, ivan.pustogarov}@uni.lu
University of Luxembourg
ABSTRACT
Bitcoin is a digital currency which relies on a distributed
set of miners to mint coins and on a peer-to-peer network
to broadcast transactions. The identities of Bitcoin users
are hidden behind pseudonyms (public keys) which are rec-
ommended to be changed frequently in order to increase
transaction unlinkability.
We present an eﬃcient method to deanonymize Bitcoin
users, which allows to link user pseudonyms to the IP ad-
dresses where the transactions are generated. Our tech-
niques work for the most common and the most challenging
scenario when users are behind NATs or ﬁrewalls of their
ISPs. They allow to link transactions of a user behind a NAT
and to distinguish connections and transactions of diﬀerent
users behind the same NAT. We also show that a natural
countermeasure of using Tor or other anonymity services can
be cut-oﬀ by abusing anti-DoS countermeasures of the Bit-
coin network. Our attacks require only a few machines and
have been experimentally veriﬁed. The estimated success
rate is between 11% and 60% depending on how stealthy an
attacker wants to be. We propose several countermeasures
to mitigate these new attacks.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection; K.4.4 [Computers And Soci-
ety]: Electronic Commerce—Cybercash, digital cash; K.4.1
[Computers And Society]: Public Policy Issues —Pri-
vacy
Keywords
Bitcoin; Anonymity; P2P; Tor
1.
INTRODUCTION
Digital currency based on cryptography is not a new idea [6]
but till recently it did not attract much attention. It changed
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660379.
rapidly with introduction of Bitcoin [12]. Bitcoin is a decen-
tralized digital currency which does not rely on a trusted is-
suing entity but rather on a peer-to-peer network with peers
minting Bitcoins by brute-forcing double SHA-256 hash func-
tion. To make the money generation process computation-
ally hard, the Bitcoin protocol requires the minters to present
the hash value of a data block with new portion of Bitcoins
and new transactions to have a certain number of zeros (an
instance of the Proof-of-Work concept).
Bitcoin is now accepted as a currency by many compa-
nies from online retailer Overstock to exotic Virgin Galactic.
One of its main advantages over bank transfers is it’s decen-
tralized architecture and absence of intermediaries. This
prevents shutting it down or seizing by a government. Bit-
coin money transfers are non-refundable, reasonably fast1
and allow to send money to any part of the world. The Bit-
coin peer network consists of homogeneous nodes and pro-
vides peer discovery and reputation mechanisms to achieve
stability. The number of Bitcoin peers is estimated to be
about 100,000 nowadays. The vast majority of these peers
(we call them clients), about 90%, are located behind NAT
and do not allow any incoming connections, whereas they
choose 8 outgoing connections to servers (Bitcoin peers with
public IP).
In a Bitcoin transaction, the address of money sender(s)
or receiver(s) is a hash of his public key. We call such
address a pseudonym to avoid confusion with the IP ad-
dress of the host where transactions are generated, and the
latter will be called just address throughout the text.
In
the current Bitcoin protocol the entire transaction history
is publicly available so anyone can see how Bitcoins travel
from one pseudonym to another and potentially link diﬀer-
ent pseudonyms of the same user together. A theoretical
possibility of such attack was already mentioned in the orig-
inal Bitcoin paper [12]. Since then several papers [11, 15]
showed that it is indeed possible by analysing the transaction
graph to cluster pseudonyms to diﬀerent users. Combined
with some other sources (e.g.
forum posts), the clusters
(and thus the users) can sometimes be mapped to real iden-
tities [14, 11]. Even so, these methods are not generic, and
the problem of how to tie a Bitcoin address to an actual
identity remained unsolved.
Evidently, studying the entire IP traﬃc of the Bitcoin
peers would reveal the origins of each transaction and dis-
close the identities of many users, but how much can be
1The network sees a transaction immediately, but the re-
ceiver has to wait for 1-2 hours to be sure that there is no
double-spending.
achieved by an ordinary attacker with a few machines and
no access to clients behind NAT has been unclear.
Lerner [10] and Koshy et al. [9] were the ﬁrst who at-
tempted an attack in this direction. A vulnerability which
allowed to link IP addresses of clients to their bitciond wal-
lets’ addresses was reported by Lerner [10]. The vulnera-
bility exploited a protection against “penny-ﬂooding” which
prevents a transaction with very low fees and big size to be
forwarded or even stored by a Bitcoin peer. The protection
tested if a transaction was from a wallet owned by the user,
and if it was the case, then the protection was skipped. This
allowed an attacker to test if a peer possessed a Bitcoin ad-
dress by sending him speciﬁcally crafted transactions. The
vulnerability required that the attacker had a connection to
a peer (thus targeting either Bitcoin servers or clients which
established connections to the attacker). This vulnerability
was ﬁxed since version 0.7.2.
Koshy et al. [9] managed to deanonymize 1162 addresses
over the period of 5 months. Their approach, however, is
limited to the transactions that expose anomalous behaviour
like transactions relayed only once or transaction that were
relayed multiple times by the same IP. Secondly, the pro-
posed method only allows to get IP addresses of servers,
which constitute only 10% of the network, and not of the
clients. Finally, their paper does not discuss the case when
a Bitcoin peer protects himself by proxying his transactions
through the Tor anonymity network.
Our contributions.
In this paper we describe a generic method to deanonymize
a signiﬁcant fraction of Bitcoin users and correlate their
pseudonyms with public IP addresses. The method explic-
itly targets the clients (i.e. peers behind NAT or ﬁrewalls)
and can diﬀerentiate the nodes with the same public IP. Fur-
thermore, our method also handles the case when the clients
use anonymity services like Tor. If a client uses two diﬀerent
pseudonyms during a single session, and even if they are un-
related in the transaction graph so that the linkage would be
totally unachievable via the transaction graph analysis [11],
our method is likely to catch it and glue the pseudonyms
together. The method is generic and might be used in other
P2P networks.
The crucial idea is that each client can be uniquely iden-
tiﬁed by a set of nodes he connects to (entry nodes). We
show that this set can be learned at the time of connection
and then used to identify the origin of a transaction.
Our attack requires only a few machines that establish a
certain number of connections by Bitcoin protocol and log
the incoming traﬃc.
In a concrete example, an attacker
with a few GB of storage and no more than 50 connections
to each Bitcoin server can disclose the sender’s IP address in
11% 2 of all transactions generated in the Bitcoin network.
If the attacker tolerates one false positive per identiﬁcation,
the success rate grows to 35%. If he also allows a slight DoS
of the network, he may achieve deanonymization rates up
to 60% without false positives, which has been conﬁrmed by
the experiments in the Bitcoin test network. We estimate
the cost of the attack on the full Bitcoin network to be under
1500 EUR per month.
2The actual fraction of deanonymized transactions depends
on how stealthy an attacker wants to be.
The computational power needed to disclose the sender
of a single transaction is negligible and is far smaller than
the amount of work needed to process the transaction graph
in [14, 11]. For the best of our knowledge this is the ﬁrst
attack which targets Bitcoin peers behind NAT. Our attack
does not assume any anomaly in the behaviour of peers or in
the traﬃc and would work even if Bitcoin would encrypt the
connection. It might be applicable to other digital currencies
derived from Bitcoin.
As another interesting though unrelated to deanonymisa-
tion idea we look at how to decrease block mining diﬃculty
by creating an alternative blockchain reality. This becomes
important since Bitcoin by design is not adaptive to rapid
drops in hash power of miners and might become necessary
in case of many miners quit mining. This is not just a hypo-
thetical case, since Bitcoin exchange rate can fall suddenly
and rapidly, making block mining unproﬁtable.
Roadmap.
Our paper is structured as follows:
• We give necessary background of how Bitcoin works
and the rules its peers follow to broadcast their ad-
dresses and transactions.
• As a ﬁrst step towards deanonymization, we show how
to prohibit Bitcoin clients from using the Tor anonymity
network by exploiting Bitcoin anti-DoS protection mech-
anism (Section 3).
• We show how to learn the connections of the Bitcoin
clients in Section 4.
• We ﬁnally show how to identify the sender of a trans-
action (i.e. deanonymize him) in Section 5. We recover
the public IP address of the sender and further diﬀer-
entiate clients sharing the same public IP.
• We discuss how to choose parameters of the attack
and its success rate and explain our experiments on
the test network. We also propose countermeasures to
mitigate the attack.
• As an extra result, we outline a strategy to lower the
diﬃculty of the system by adding a properly selected
value to the list of checkpoints nodes hard-coded in the
client code. It can be used by the entire community
if the mining becomes unbearable and non-proﬁtable,
or by malicious administrators who want to ruin the
system (Section 9).
Ethical considerations. All vulnerabilities described in this
paper were reported to Bitcoin core developers. When pos-
sible we carried out experiments in the Bitcoin test network.
To protect user privacy, we restricted from performing a full-
scale deanonymization in the real network. However, gath-
ering some statistics required us conducting experiments on
the main network, which did not cause disruption or expo-
sure of the main network.
2. BACKGROUND
In this section we provide a basic overview of the Bitcoin
system. Originating from a proof-of-concept source code
and an accompanying it white paper [12], the Bitcoin pro-
tocol never had been fully documented, and is de-facto the
functionality of the primary Bitcoin client, bitcoind [2]. In
the following text we provide only the details of the protocol
that are crucial to our research. These details are accumu-
lated from the source code of bitcoind and to a large extent
are explained in the informal wiki documentation [3].
Block chain.
Bitcoin operates on a list of blocks, the block chain. Each
block contains a header and transaction data3. The 80-byte
header Head contains the 256-bit hash of the previous block
Hi−1, the timestamp (in seconds) Ti, the 32-bit nonce Ni
(used to generate blocks), the hash T Xi of the transaction
data , and the diﬃculty parameter di. To be valid, the
double-hash of the block header must be smaller (as an in-
teger) than a certain value, which is a linear function of the
diﬃculty parameter:
Hi = SHA-256(SHA-256(Hi−1||Ti||T Xi||di||Ni||))) < f (di).
Currently it must be smaller than 2192, i.e. have its 64 most
signiﬁcant bits equal to zero.
The Bitcoin miners ﬁrst collect all transactions not yet
included into a block. Then they generate the header ﬁelds
and exhaustively try diﬀerent nonces, timestamps, and other
parameters in order to obtain a valid block. They are re-
warded by 25 BTC (about $14,000 by current market rate),
which is the very ﬁrst transaction in the attached transac-
tion list. Whenever a block is created, a miner broadcasts it
to the network, so that each node attaches it into its internal
block chain.
Payers and payees of the system are identiﬁed in the blockchain
by their Bitcoin addresses, or pseudonyms. A pseudonym is
the base58-encoding of the hash of the corresponding public
key. Whenever a payer wants to transfer his coins to another
user, he generates a transaction and signs it with his private
key. Signed transactions are then added to the blockchain
by miners. By checking the signature, other Bitcoin partic-
ipants can verify the new ownership of the coins.
Bitcoin P2P network
Peers of the Bitcoin network connect to each other over an
unencrypted TCP channel. There is no authentication func-
tionality in the network, so each node just keeps a list of IP
addresses associated with its connections.
Figure 1: Bitcoin network
3All these conditions are strictly enforced, and a block not
conforming to them is discarded immediately.
To avoid denial-of-service attacks, the Bitcoin protocol
minimizes the amount of information forwarded by peers.
Valid blocks and transactions are relayed whereas invalid
blocks are discarded. Moreover, Bitcoin implements a reputation-
based protocol with each node keeping a penalty score for
every connection. Whenever a malformed message is sent to
the node, the latter increases the penalty score of the con-
nection and bans the “misbehaving” IP address for 24 hours
when the penalty reaches the value of 100.
Though oﬃcial Bitcoind software does not explicitly di-
vide its functionality between clients and servers, Bitcoin
peers can be grouped into those which can accept incoming
connections (servers) and those which can’t (clients), i.e.
peers behind NAT or ﬁrewall, etc. At the time of writing
there were about 8,000 reachable servers while the estimated
number of clients was about 100,000.
By default Bitcoin peers (both clients and servers) try
to maintain 8 outgoing connections.
In addition, Bitcoin
servers can accept up to 117 incoming connections (thus
having up to 125 connections in total). If any of the 8 out-
going connections drop, a Bitcoin peer tries to replace them
with new connections.
If none of the 8 outgoing connec-
tions drop, the peer will stay connected to them until it is
restarted. In case of a client, we call the 8 nodes to which
it establishes connections entry nodes (see Fig. 1). A Bit-
coin server accepts any number of connections from a single
IP address as long as the treshold for the total number of
connections is not reached.
Address propagation.
The Bitcoin protocol implements an address propagation
mechanism to help peers to discover other peers in the P2P
network. Each Bitcoin peer maintains a list of addresses
of other peers in the network and each address is given a
timestamp which determines its freshness. Peers can re-
quest addresses from this list from each other using GETADDR
messages and unsolicitely advertise addresses known to them
using ADDR messages4. Whenever a Bitcoin node receives an
ADDR message it decides individually for each address in the
message if to forward it to its neighbours. It ﬁrst checks if
(1) the total number of addresses in the corresponding ADDR
message does not exceed 10, and (2) the attached timestamp
is no older than 10 minutes. If either of these two checks
fails, the address is not forwarded; otherwise the address is
scheduled for forwarding5 to two of the node’s neighbours
in case the address is reachable and to one neighbour only
if it is non-reachable. An address is considered reachable
by a node if the node has a network interface associated
with same address family. Otherwise the address is marked
as unreachable. According to the current reference imple-
mentation Bitcoin nodes recognize three types of addresses:
IPv4, IPv6, and OnionCat addresses [13]. Limiting the num-
ber of neighbours to which an address is forwarded reduces
the total amount of traﬃc in the Bitcoin P2P network.
In order to choose neighbours to which to forward an ad-
dress, a Bitcoin node does the following. For each of its
neighbours it computes a hash of a value composed of the
4One ADDR message can contain any number of address, how-
ever messages containing more than 1000 addresses are re-
jected on the remote side.
5By scheduling a transmission we mean that the node puts
the corresponding message to the outgoing queue but does
not yet make the actual transmission.
...............Entry1Entry2Entry8Clientfollowing items: address to be forwarded, a secret salt, cur-
rent day, and the memory address of the data structure de-
scribing the neighbour. The exact expression for the hashed
value is of little importance for our attacks. The only thing
which we need to emphasize is that the hash stays the same
for 24 hours. The peer then sorts the list of its neighbours
based on the computed hashes and chooses the ﬁrst entry