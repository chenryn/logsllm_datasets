2Recall that when considering encryption with a random IV, the adversary cannot
determine how many times each nonce is used. Thus, QE simply denotes the number
of encryption queries overall; see Section 2.4.
4
24 · 23(cid:96)
E ≤ 3 and
+ AdvEncRFN(cid:48)
AdvEncΠ(cid:48),A,O =
+
,
AdvEncΠ(cid:48),A,O =
1
2 · AdvKDFA1,F
1
2 · AdvPRFN(cid:48)
A2,E
A version with no IV collisions. Most encryption schemes, like
CTR and AES-GCM, fail as soon as an IV repeats at all. It is therefore
useful to repeat Theorem 3.2 for the case that an IV does not repeat
at all. In this case, we consider A3 who is nonce-respecting and add
q2
2(cid:96)+1 since this is the probability that some (2-way) collision will
happen in the IV. In this case, since each nonce is used only once,
we have that B(cid:48)
i ≤ Bi + 2m. We therefore have:
Theorem 3.3 (random-IV encryption – no collision version).
Let Π = (Gen, Enc, Dec) be a random-IV-based encryption scheme
using block cipher E and an IV of length (cid:96) bits, let Π(cid:48) be the scheme
obtained by applying the key derivation function F to the nonce in
order to derive the key for encrypting the message, and let Π(cid:48)(cid:48) be the
same as Π(cid:48) except that a truly random function is used instead of F.
Consider any black-box encryption game with oracle O. Then, for
every (t, N, QE , (cid:126)QD , (cid:126)B, a, m)-IV adversary A, there exists an (O (t ), N(cid:48))-
adversary A1 for F, and an (O (t ), N(cid:48), (cid:126)B(cid:48), µ)-adversary A2 for E
where µ depends on Π, and a (t, N(cid:48), (cid:126)QE , (cid:126)QD , (cid:126)B(cid:48), a, m)-nonce respect-
ing adversary A3 for Π(cid:48)(cid:48) such that
+
+ AdvEncRFN(cid:48)
2
Π(cid:48)(cid:48),A3,O + QE
2(cid:96)+1 ,
where N(cid:48) = N + QE , and for every i it holds that B(cid:48)
i ≤ Bi + 2m.
4 KEY DERIVATION WITH GOOD BOUNDS
We describe a new Key Derivation Function (KDF) here, which
we call DeriveKey. It is e(cid:28)cient and simple to implement, and
obtains very good bounds. The KDF works by truncating outputs
of a pseudorandom permutation. Concretely, we apply the AES
pseudorandom permutation (using a “master” key) to the input
nonce and an index, and truncate each 128-bit output to 64 bits.
Thus, a 128-bit key is derived by applying AES twice, and a 256-
bit key is derived by applying AES four times. Di(cid:29)erent amount
of key material bits are derived in a similar way, depending on
the application. Note also that the number of truncated bits can be
changed, according to the desired tradeo(cid:29) between the performance
and the security bounds.
We use a nonce of 96-bits, for convenience, since this is standard
practice for existing AES-GCM interfaces. As an example, consider
AES-GCM [16] that uses DeriveKey. The KDF is used for deriving
an AES encryption key of length 128 or 256 (for encryption with
AES128 or AES256, respectively), and a GHASH hash key of length
128. These 256 or 384 key material bits can be obtained by 4 or 6
AES invocations. The algorithm is formally described in Fig. 1 (for
this amount of key bits).
Intuitively, truncating the output of AES is advantageous since it
lowers the distinguishing probability of AES from a pseudorandom
function (versus permutation). Speci(cid:27)cally, using a random permu-
tation has the disadvantage that derived keys are distinguishable
from random at around the birthday bound. In contrast, a random
function su(cid:29)ers from no such limitation, and thus a pseudorandom
function (versus permutation) is advantageous in this sense. By
truncating the pseudorandom permutation, the result is no longer a
permutation. As we will see below, the more a random permutation
is truncated, the closer it becomes to a random function.
DeriveKey(K, N)
_____________________________________________________________
Context: encryption-keylength (= 128 or 256)
if encryption-keylength = 128 AES is AES128, else AES is AES256
Key: K
Input: N (96 bits)
If encryption-keylength =128 then repeats = 4, else repeats = 6
for i from 0 to repeats-1 do
Tj = AES (K, N [95:0] || IntToString32 (i))
end
K1 = T1 [63:0] || T0 [63:0]
If keylength=128 then
K2 = T3 [63:0] || T2 [63:0]
else
K2 = T5 [63:0] || T4 [63:0] || T3 [63:0] || T2 [63:0]
end
Output: K1 (128 bits), K2 (128 or 256 bits)
_____________________________________________________________
Figure 1: DeriveKey uses the KDF (“master”) key K to derive two
new keys: K1 (128 bits) and K2 (128 or 256 bits).
2
(cid:33)
(cid:32)
The following lemma is proven in [10], which explores the prob-
lem of distinguishing the truncation of a randomly chosen permuta-
tion from a random function. The upper bound on the distinguish-
ing advantage (originally due to [21]), is simpli(cid:27)ed in [10] to the
easy-to-use form
Advn,m ( ˜q) ≤ min
(9)
4 ·2n is the number of queries made by the distinguisher,
where ˜q ≤ 3
and where the (randomly chosen) permutation over n bits is trun-
cated to n − m bits (for some 1 ≤ m < n). We comment that [11]
have recently proved that this bound is essentially tight. Plugging
in n = 128 and m = 64 as in our DeriveKey procedure, and recall-
ing that AdvPRPAES (t, B) denotes the probability of distinguishing
AES from a random permutation with B queries to the block cipher,
we have:
˜q
2n+1 ,
˜q
2 m+n2
, 1
Lemma 4.1 (DeriveKey advantage). For every (t, N)-adversary
A for DeriveKey (obtaining N pairs of keys (K1, K2) of overall length
(cid:41)
256 and 384 bits, respectively), it holds that
AdvKDFA,DeriveKey ≤ AdvPRPAES (t, 6N) + min
(cid:40) 36N2
.
6N
296 , 1
2129 ,
Proof. To obtain one pair of keys (K1 and K2), DeriveKey com-
putes at most 6 AES operations using the KDF key (when K2 is
128-bits long, only 4 AES operations are required). Thus, an adver-
sary A making at most N ≤ 3
24 · 2128 queries to DeriveKey and
obtaining N pairs of keys (K1, K2) can be simulated by an adversary
A(cid:48) making at most ˜q ≤ 3
4 · 2128 queries to AES. If a truly random
permutation were used instead of AES, then plugging the above
into Eq. (9), with ˜q = 6N, n = 128 and m = 64, we derive that the
distinguishing advantage between the result of the KDF and a truly
random function is
(cid:41)
since
and the bound on the number of queries ˜q ≤ 3
to 6N ≤ 3
4 · 2n, implying that N ≤ 3
(cid:40) 36N2
2129 ,
min
2
˜q
2n+1 =
36N2
2129
and
,
6N
296 , 1
˜q
6N
296
2 m+n2
4 · 2n is equivalent
24 · 2n. Finally, since AES is a
=
/2192
) and O(N2
pseudorandom permutation and not a truly random permutation,
the bound includes AdvPRPAES (t, 6N), which is the maximum ad-
vantage over all adversaries in distinguishing (a single instance of)
AES from a random permutation, when running in t steps and using
6N queries. This completes the proof.
(cid:3)
Actual DeriveKey bounds. The crucial point to observe in the
bound in Lemma 4.1 is that the advantage is the minimum of
). Thus, the birthday bound of N ≈ 264
O(N/296
for distinguishing AES from a pseudorandom function is not the
smallest upper bound here. Rather, at N = 264, the distinguishing
advantage is only 6
232 since the linear term of 6N296 is much smaller
for large N. Thus, it is possible to derive far more keys than by
using counter-mode.3 It is worth noting that for small values of N,
the quadratic term is smaller; however, the minimum is so small
in these cases that this is irrelevant. In conclusion, using the NIST
bounds for AES-GCM that allow for 2−32 advantage, we are still
able to derive approximately 264 di(cid:29)erent keys. We remark that
naive key derivation that utilizes standard AES without truncation
would provide an adversarial advantage of O (N2
), which is
much higher than our method for large values of N.
/2129
E(cid:28)ciency. In order to compute DeriveKey, the number of AES
invocations is 4 with encryption key-length = 128, and 6 with
encryption key-length = 256. Importantly, these AES computations
are parallelizable. Furthermore, the AES key schedule for the mas-
ter key K can be pre-computed and cached, and so we can ignore
the key expansion overhead. Thus, on a modern CPU with AES
instructions (AES-NI) with throughput of 1 cycle and latency of 4
cycles (e.g., the Intel processor, microarchitecture codename Sky-
lake), DeriveKey consumes ∼ 50 cycles in the (cid:27)rst case, and ∼ 65 in
the second case. To see why, consider the (cid:27)rst case with 4 indepen-
dent AES computations. These are computed by 4×10 AES rounds,
executed via 40 AESENC instruction invocations, that consume
40+4 cycles, plus a few cycles for aligning the data. Such overheads
are inconsequential in most situations.
The performance of key-derived schemes. Let Π be a nonce based
encryption scheme. From the performance viewpoint, the associ-
ated key-derived scheme Π(cid:48) seems to pay only the extra cost of
computing the KDF over the nonce (prior to running Π with the
derived keys). However, there is an implicit additional performance
overhead of computing the key schedule for the derived key. This
is due to the fact that in Π it is possible to pre-compute the round
keys once, but in Π(cid:48) the round keys cannot be pre-computed. There-
fore, the cost of the key schedule must be added. Speci(cid:27)cally, if Π
uses AES as the block cipher, then the performance of Π(cid:48) includes
the cost of an additional AES key expansion, on top of the cost
of the KDF itself. When the encryption is carried out on modern
processors with fully pipelined AES-NI, then the key expansion
instruction aeskeygenassist should not be used, since it is not
e(cid:28)cient. Rather, as described in [15], key expansion can be carried
out using the AES-NI round functions (and additional shifts), and
this can be interleaved with the encryption of the (cid:27)rst few blocks.
3If keys are derived by running AESK (i ) for i = 1, 2, . . ., then after 264 key deriva-
tions, the derived keys cannot be argued to be indistinguishable from random. This is
because a truly random key derivation mechanism would provide some colliding keys,
whereas the result of AES in counter mode would never collide.
This reduces the overall latency of the key expansion and encryp-
tion. Table 1 shows the performance of AES key expansion alone
using aeskeygenassist (note that beyond it being expensive, it
cannot even be pipelined, because aeskeygenassist does not have
throughput 1), compared with our optimized method of AES key
expansion using the AES-NI round function, compared with our
key expansion interleaved with the encryption of a few blocks. The
maximum performance advantage that this technique o(cid:29)ers is at
x = 4 blocks and thus we show the performance in numbers of
cycles up to this point. As we see, the additional overhead of the key
expansion is negligible when the messages are not extremely short.
Speci(cid:27)cally, the number of cycles per byte of AES-128 encryption
together with key expansion using our method, is 3.15 for 1 block,
1.8 for 2 blocks, 1.37 for 3 blocks and 1.19 for 4 blocks.
Key
length
Key expansion –
aeskeygenassist
Optimized key
expansion
128
256
111
146
48
80
Key expansion
interleaved with x blocks
x = 1
x = 2
x = 3
x = 4
50
85
58
99
66
-
76
-
Table 1: Optimized code performance in cycles of AES key expan-
sion and key expansion interleaved with the encryption of a few
blocks, run on Intel microarchitecture codename Skylake.
Other key-derivation methods. As we have mentioned in the in-
troduction, hash functions are good key-derivation functions with
excellent bounds. However, they are far slower than AES. This may
lead some to wonder whether AES in Davies-Meyer mode may be
a good alternative to our truncated AES method. We stress that
Davies-Meyer would not be a good alternative for two reasons.
First, it requires a key schedule for every computation, and is also
serial in nature meaning that it cannot utilize the AES-NI pipeline.
In addition, from a security perspective, Davies-Meyer with AES
requires an ideal assumption on AES and is somewhat problematic
due to potential related-key issues.
Having said the above, truncated AES is not the only good option.
In [8], it was shown that taking the XOR of two di(cid:29)erent AES
outputs is a pseudorandom function with excellent bounds. This
construction could be used instead of truncated AES with similar
e(cid:28)ciency. The constant in the bound is slightly better using the
bound in [8], but this of little consequence here since the advantage
due to the key derivation is already very small anyway.
5 BOUNDS FOR COUNTER-BASED MODES
In this section, we analyze the bounds obtained in CTR mode and
AES-GCM, using our key derivation method.
5.1 CTR Encryption with Unique Nonces
We begin by considering the CPA-security of CTR mode with unique
nonces (i.e., with a nonce-respecting adversary). We (cid:27)rst provide the
bound for basic CTR without key derivation, and then provide the
bound using our key-derivation proposal. We consider the standard
version of CTR with an IV of length (cid:96) < n, and where messages of
length at most 2n−(cid:96) can be encrypted with each IV. The counter
is taken to be the IV concatenated with the block number (from
0 to 2n−(cid:96) − 1). We consider a (t, N, (cid:126)QE , (cid:126)B, m)-adversary A (in this
setting there are no decryption queries and no AAD; thus (cid:126)QD and a
are not referenced). For this scheme, m ≤ n − (cid:96) and its actual value
2
i =1 Bi )
2n+1
makes no di(cid:29)erence beyond that. Since A is nonce-respecting, we
have that (cid:126)QE is the vector of all ones. Let Bi be the length (in blocks)
of the plaintext encrypted using the ith nonce.
(cid:80)N
Basic CTR. The overall number of blocks encrypted with E is
i =1 Bi, and these are all encrypted under a single key. It is well
bounded ((cid:80)N
known that the distinguishing probability in this case is upper
.4 Concretely, for a 128-bit block cipher like
AES, when the overall number of blocks encrypted reaches 248, the
probability that security is broken is 2−32. Furthermore, if 264 blocks
are encrypted overall, then security is broken with probability 1/2;
this could happen if 248 plaintexts, each of length 216, are encrypted.
CTR with key derivation. We apply Theorem 3.1 and thus we
need to analyze A’s advantage when interacting in an encryption
experiment where E is replaced with a truly random function. We
consider CPA security here, and thus we consider an LR-oracle
experiment; see Appendix A. Let LR denote the LR-oracle in the
experiment; we therefore need to bound AdvEncRFN
. In this
experiment, all the counters are encrypted using a truly random
function. Now, since all counters are guaranteed to be unique (be-
cause A is nonce-respecting and so Qi