F are represented by two arrays:
IntStartF keeps the
block indices where new counter intervals start and
CtrValF keeps the values of the write counter for each
interval. The trusted storage TSF for ﬁle F includes ei-
ther the arrays IntStartF and CtrValF if they ﬁt into TSF
or, for each array, a hash of all its elements (concate-
nated), otherwise. In the limit, to reduce the bandwidth
for integrity, we could build a Merkle tree to authenticate
each of these arrays and store the root of these trees in
TSF , but we have not seen in the Harvard traces ﬁles that
would warrant this. We omit here the implementation de-
tails for the UpdateCtr, GetCtr, AuthCtr and CheckCtr
operations on counters, due to space limitations.
If the counter intervals for a ﬁle get too dispersed, then
the size of the arrays IntStartF and CtrValF might in-
crease signiﬁcantly. To keep the untrusted storage for
integrity low, we could periodically change the encryp-
tion key for the ﬁle, re-encrypt all blocks in the ﬁle, and
reset the block write counters to 0.
4.2 Length-Preserving Stateful Encryption
with Counters
Secure encryption schemes are usually not
length-
preserving. However, one of our design goals stated in
the introduction is to add security (and, in particular, en-
cryption) to ﬁle systems in a manner transparent to the
storage servers. For this purpose, we introduce here the
notion of a length-preserving stateful encryption scheme
for a ﬁle F , an encryption scheme that encrypts blocks in
a way that preserves the length of the original blocks, and
stores any additional information in the untrusted storage
space for the ﬁle. We deﬁne a length-preserving stateful
encryption scheme for a ﬁle F to consist of a key gen-
eration algorithm Glen that generates an encryption key
for the ﬁle, an encryption algorithm Elen that encrypts
block content B for block index i with key k and out-
puts ciphertext C, and a decryption algorithm Dlen that
decrypts the encrypted content C of block i with key k
and outputs the plaintext B. Both the Elen and Dlen al-
gorithms also modify the untrusted storage space for the
ﬁle.
Tweakable ciphers are by deﬁnition length-preserving
stateful encryption schemes. A different construction on
which we elaborate below uses write counters for ﬁle
blocks. Let (Gen, E, D) be an encryption scheme con-
structed from a block cipher in CBC mode. To encrypt
an n-block message in the CBC encryption mode, a ran-
dom initialization vector is chosen. The ciphertext con-
sists of n + 1 blocks, with the ﬁrst being the initialization
vector. We denote by Ek(B, iv) the output of the encryp-
tion of B (excluding the initialization vector) using key
k and initialization vector iv, and similarly by Dk(C, iv)
the decryption of C using key k and initialization vector
iv.
We replace the random initialization vectors for en-
crypting a ﬁle block with a pseudorandom function ap-
plication of the block index concatenated with the write
counter for the block. This is intuitively secure because
different initialization vectors are used for different en-
cryptions of the same block, and moreover, the proper-
ties of pseudorandom functions imply that the initializa-
tion vectors are indistinguishable from random. It is thus
enough to store the write counters for the blocks of a ﬁle,
and the initialization vectors for the ﬁle blocks can be
easily inferred.
The Glen, Elen and Dlen algorithms for a ﬁle F are de-
scribed in Figure 1. Here PRF : KPRF×I → B denotes a
pseudorandom function family with key space KPRF, in-
put space I (i.e., the set of all block indices concatenated
with block counter values), and output space B (i.e., the
block space of E).
5
Integrity Constructions for Encrypted
Storage
In this section, we ﬁrst present a Merkle tree integrity
construction for encrypted storage, used in ﬁle systems
such as Cepheus [10], FARSITE [1], and Plutus [17].
Second, we introduce a new integrity construction based
on tweakable ciphers that uses some ideas from Oprea
et al. [26]. Third, we give a new construction based on
compression levels of block contents. We evaluate the
performance of the integrity algorithms described here
in Section 7.
USENIX Association
16th USENIX Security Symposium
187
Glen(F ):
R← KPRF
k1
k2 ← Gen()
return 
Elen
(F, i, B):
F.UpdateCtr(i)
iv ← PRFk1 (i||F.GetCtr(i))
C ← Ek2 (B, iv)
return C
Dlen
(F, i, C):
iv ← PRFk1 (i||F.GetCtr(i))
B ← Dk2 (C, iv)
return B
Figure 1: Implementing a length-preserving stateful encryption scheme with write counters.
F.Update(i, B):
k ← F.enc key
MTF .UpdateTree(TSF , i, h(i||B))
C ← Elen
k (F, i, B)
F.WriteBlock(i, C)
F.Append(B):
k ← F.enc key
n ← F.blocks
MTF .AppendTree(TSF , h(n + 1||B))
C ← Elen
k (F, n + 1, B)
F.WriteBlock(n + 1, C)
F.Check(i, C):
k ← F.enc key
Bi ← Dlen
if MTF .CheckTree(TSF , i, h(i||Bi)) = true
k (F, i, C)
return Bi
else
return ⊥
F.Delete():
n ← F.blocks
MTF .DeleteTree(TSF )
delete Bn from ﬁle F
Figure 2: The Update, Check, Append and Delete algorithms for the MT-EINT construction.
5.1 The Merkle
Tree Construction
MT-EINT
In this construction, ﬁle blocks can be encrypted with
any length-preserving stateful encryption scheme and
they are authenticated with a Merkle tree. More pre-
cisely, if F is a ﬁle comprised of blocks B1, . . . , Bn,
then the untrusted storage for integrity for ﬁle F is
USF = MTF (h(1||B1), . . . , h(n||Bn)) (for h a second-
preimage resistant hash function), and the trusted storage
TSF is the root of this tree.
The algorithm Init runs the key generation algorithm
Glen of the length-preserving stateful encryption scheme
for ﬁle F . The algorithms Update, Check, Append and
Delete of the MT-EINT construction are given in Fig-
ure 2. We denote here by F.enc key the encryption key
for ﬁle F (generated in the Init algorithm) and F.blocks
the number of blocks in ﬁle F .
- In the Update(i, B) algorithm for ﬁle F , the i-th leaf
in MTF is updated with the hash of the new block con-
tent using the algorithm UpdateTree and the encryption
of B is stored in the i-th block of F .
- To append a new block B to ﬁle F with algorithm
Append(B), a new leaf is appended to MTF with the
algorithm AppendTree, and then an encryption of B is
stored in the (n + 1)-th block of F (for n the number of
blocks of F ).
- In the Check(i, C) algorithm for ﬁle F , block C
is decrypted, and its integrity is checked using the
CheckTree algorithm.
- To delete the last block from a ﬁle F with algorithm
Delete, the last leaf in MTF is deleted with the algorithm
DeleteTree.
The MT-EINT construction detects data modiﬁcation
and block swapping attacks, as ﬁle block contents are
authenticated by the root of the Merkle tree for each ﬁle.
The MT-EINT construction is also secure against replay
attacks, as the tree contains the hashes of the latest ver-
sion of the data blocks and the root of the Merkle tree is
authenticated in trusted storage.
5.2 The Randomness Test Construction
RAND-EINT
Whereas in the Merkle tree construction any length-
preserving stateful encryption algorithm can be used to
individually encrypt blocks in a ﬁle, the randomness test
construction uses the observation from Oprea et al. [26]
that the integrity of the blocks that are efﬁciently dis-
tinguishable from random blocks can be checked with a
randomness test if a tweakable cipher is used to encrypt
them. As such, integrity information is stored only for
random-looking blocks.
:
In this construction, a Merkle tree per ﬁle that authen-
ticates the contents of the random-looking blocks is built.
The untrusted storage for integrity USF for ﬁle F com-
prised of blocks B1, . . . , Bn includes this tree RTreeF =
i ∈ {1, . . . , n} and IsRand(Bi) =
MT(h(i||Bi)
1), and,
the set of block numbers that
are random-looking RArrF = {i ∈ {1, . . . , n} :
IsRand(Bi) = 1}, ordered the same as the leaves in
the previous tree RTreeF . The root of the tree RTreeF is
kept in the trusted storage TSF for ﬁle F .
in addition,
To prevent against replay attacks, clients need to dis-
tinguish different writes of the same block in a ﬁle. A
simple idea [26] is to use a counter per ﬁle block that de-
notes the number of writes of that block, and make the
188
16th USENIX Security Symposium
USENIX Association
F.Update(i, B) :
k ← F.enc key
F.UpdateCtr(i)
F.AuthCtr()
if IsRand(B) = 0
if i ∈ RArrF
RTreeF .DelOﬀsetTree(TSF , RArrF , i)
else
if i ∈ RArrF
j ← RArrF .SearchOﬀset(i)
RTreeF .UpdateTree(TSF , j, h(i||B))
else
RTreeF .AppendTree(TSF , h(i||B))
append i at end of RArrF
F.WriteBlock(i, EF.Tweak(i,F.GetCtr(i))
k
(B))
F.Append(B):
k ← F.enc key
n ← F.blocks
F.UpdateCtr(n + 1)
F.AuthCtr()
if IsRand(B) = 1
RTreeF .AppendTree(TSF , h(n + 1||B))
append n + 1 at end of RArrF
F.WriteBlock(n + 1, EF.Tweak(n+1,F.GetCtr(n+1))
k
(B))
F.Check(i, C):
k ← F.enc key
if F.CheckCtr() = false
return ⊥
Bi ← DF.Tweak(i,F.GetCtr(i))
if IsRand(Bi) = 0
k
(C)
return Bi
else
if i ∈ RArrF
j ← RArrF .SearchOﬀset(i)
if RTreeF .CheckTree(TSF , j, h(i||Bi)) = true
return Bi
else
return ⊥
else
return ⊥
F.Delete():
n ← F.blocks
if n ∈ RArrF
RTreeF .DelOﬀsetTree(TSF , RArrF , n)
delete Bn from ﬁle F
Figure 3: The Update, Check, Append and Delete algorithms for the RAND-EINT construction.
counter part of the encryption tweak. The block write
counters need to be authenticated in the trusted storage
space for the ﬁle F to prevent clients from accepting
valid older versions of a block that are considered not
random by the randomness test. To ensure that ﬁle blocks
are encrypted with different tweaks, we deﬁne the tweak
for a ﬁle block to be a function of the ﬁle, the block index
and the block write counter. We denote by F.Tweak the
tweak-generating function for ﬁle F that takes as input
a block index and a block counter and outputs the tweak
for that ﬁle block. The properties of tweakable ciphers
imply that if a block is decrypted with a different counter
(and so a different tweak), then it will look random with
high probability.
The algorithm Init selects a key at random from
the key space of the tweakable encryption scheme E.
The Update, Check, Append and Delete algorithms of
RAND-EINT are detailed in Figure 3. For the array
RArrF , RArrF .items denotes the number of items in the
array, RArrF .last denotes the last element in the array,
and the function SearchOﬀset(i) for the array RArrF
gives the position in the array where index i is stored
(if it exists in the array).
- In the Update(i, B) algorithm for ﬁle F , the write
counter for block i is incremented and the counter au-
thentication information from TSF is updated with the
algorithm AuthCtr. Then, the randomness test IsRand
is applied to block content B. If B is not random look-
ing, then the leaf corresponding to block i (if it exists)
has to be removed from RTreeF . This is done with the
algorithm DelOﬀsetTree, described in Figure 4. On the
other hand, if B is random-looking, then the leaf corre-
sponding to block i has to be either updated with the new
hash (if it exists in the tree) or appended in RTreeF . Fi-
nally, the tweakable encryption of B is stored in the i-th
block of F .
- To append a new block B to ﬁle F with n blocks
using the Append(B) algorithm, the counter for block
n + 1 is updated ﬁrst with algorithm UpdateCtr. The
counter authentication information from trusted storage
is also updated with algorithm AuthCtr. Furthermore,
the hash of the block index concatenated with the block
content is added to RTreeF only if the block is random-
looking. In addition, index n+1 is added to RArrF in this
case. Finally, the tweakable encryption of B is stored in
the (n + 1)-th block of F .
- In the Check(i, C) algorithm for ﬁle F , the authenti-
cation information for the block counters is checked ﬁrst.
Then block C is decrypted, and checked for integrity.
If the content of the i-th block is not random-looking,
then by the properties of tweakable ciphers we can infer
that the block is valid with high probability. Otherwise,
the integrity of the i-th block is checked using the tree
RTreeF . If i is not a block index in the tree, then the
integrity of block i is unconﬁrmed and the block is re-
jected.
- In the Delete algorithm for ﬁle F , the hash of the last
block has to be removed from the tree by calling the algo-
rithm DelOﬀsetTree (described in Figure 4), in the case
in which the last block is authenticated through RTreeF .
It is not necessary to authenticate in trusted storage the
array RArrF of indices of the random-looking blocks in
USENIX Association
16th USENIX Security Symposium
189
T .DelOﬀsetTree(TSF , RArrF , i):
j ← RArrF .SearchOﬀset(i)
l ← RArrF .last
if j 6= l
T .UpdateTree(TSF , j, h(l||Bl))
RArrF [j] ← l
RArrF .items ← RArrF .items − 1
T .DeleteTree(TSF )
Figure 4: The DelOﬀsetTree algorithm for a tree T
deletes the hash of block i from T and moves the last
leaf to its position, if necessary.
a ﬁle. The reason is that the root of RTreeF is authenti-
cated in trusted storage and this implies that an adversary
cannot modify the order of the leaves in RTreeF with-
out being detected in the AppendTree, UpdateTree or
CheckTree algorithms.
The construction RAND-EINT protects against unau-
thorized modiﬁcation of data written to disk and block
swapping attacks by authenticating the root of RTreeF
in the trusted storage space for each ﬁle. By using write
counters in the encryption of block contents and authen-
ticating the values of the counters in trusted storage, this
construction provides defense against replay attacks and
provides all the security properties of the MT-EINT con-
struction.
5.3 The
Compression
Construction
COMP-EINT
This construction is again based on the intuition that
many workloads feature redundancy in ﬁle contents. In
this construction, the block is compressed before encryp-
tion. If the compression level of the block content is high
enough, then a message authentication code (i.e., MAC)
of the block can be stored in the block itself, reducing the
amount of storage necessary for integrity. The authenti-
cation information for blocks that can be compressed is
stored on untrusted storage, and consequently a MAC is
required. Like in the previous construction, a Merkle tree
RTreeF is built over the hashes of the blocks in ﬁle F that
cannot be compressed enough, and the root of the tree is
kept in trusted storage. In order to prevent replay attacks,
it is necessary that block write counters are included ei-
ther in the computation of the block MAC (in the case
in which the block can be compressed) or in hashing the
block (in the case in which the block cannot be com-
pressed enough). Similarly to scheme RAND-EINT, the
write counters for a ﬁle F need to be authenticated in the
trusted storage space TSF .
In this construction, ﬁle blocks can be encrypted
with any length-preserving encryption scheme, as de-
ﬁned in Section 4.2. In describing the scheme, we need
compression and decompression algorithms such that
decompress(compress(m)) = m, for any message m.
We can also pad messages up to a certain ﬁxed length
by using the pad function with an output of l bytes, and
unpad a padded message with the unpad function such
that unpad(pad(m)) = m, for all messages m of length
less than l bytes. We can use standard padding methods
for implementing these algorithms [4]. To authenticate
blocks that can be compressed, we use a message authen-
tication code H : KH × {0, 1}∗ → {0, 1}s that outputs
strings of length s bits.
The algorithm Init runs the key generation algorithm
Glen of the length-preserving stateful encryption scheme
for ﬁle F to generate key k1 and selects at random a key
k2 from the key space KH of H.
It outputs the tuple
. The Update, Append, Check and Delete al-
gorithms of the COMP-EINT construction are detailed in
Figure 5. Here Lc is the byte length of the largest plain-
text size for which the ciphertext is of length at most the
ﬁle block length less the size of a MAC function output.
For example, if the block size is 4096 bytes, HMAC [3]
with SHA-1 is used for computing MACs (whose output
is 20 bytes) and 16-byte AES is used for encryption, then
Lc is the largest multiple of the AES block size (i.e., 16
bytes) less than 4096 − 20 = 4076 bytes. The value of
Lc in this case is 4064 bytes.
- In the Update(i, B) algorithm for ﬁle F , the write
counter for block i is incremented and the counter au-
thentication information from TSF is updated with the
algorithm AuthCtr. Then block content B is compressed
to Bc. If the length of Bc (denoted |Bc|) is at most Lc,
then there is room to store the MAC of the block content
inside the block. In this case, the hash of the previous
block content stored at the same address is deleted from
the Merkle tree RTreeF , if necessary. The compressed
block is padded and encrypted, and then stored with its
MAC in the i-th block of F . Otherwise, if the block
cannot be compressed enough, then its hash has to be in-
serted into the Merkle tree RTreeF . The block content
B is then encrypted with a length-preserving stateful en-
cryption scheme using the key for the ﬁle and is stored in
the i-th block of F .
- To append a new block B to ﬁle F with n blocks us-
ing the Append(B) algorithm, the counter for block n+1