让测试所花费的时间尽可
这真的取决于你和你的团队，如果
能地编短。测试套件执行
对每天执行一次完整的测试套件感到满惠，并
且如道回归错误（Regression bugs）只能一天
的时间越长，就可能执行
捕捉一次，那么就很好了。然西，我们仍然建
议你保持一组测试能频繁地进行。
测试的次数越少。
目前位置
249
---
## Page 286
善用测试方案
使用测试方案让你的测试自动化
让我们看一个简单的测试案例，并使用JUnit将它自动化，JUnit提供在测试中需要
的一般的资源和行为，每次调用每个测试程序，一次一个，同时，JUnit提供了友
好的GUI界面，使你能看到测试程序的运行，但与自动测试程序的功能相比，这是
Unit也有基于文本的
小事一桩。
测试执行器并国能支持
多款常用的DE拾件
你必质舱入RUnit类
package headfirst,od,chapter7;
import java.io.*/
import java.net.Socket;
这登对累被用于几个别试案例之
import org-junit.*;
中。
这是静态的，最经的
取方块隔列，该核
public class TestRenoteReader {
取方块腾列被用于几
private Socket nTestSocket;
private CbjectoutputStream moutStroan;
种不用的到试。
private ObjectInputStrean mInStream;
pub1ic statie fina1 boolean[] EMPTY_CHECKB0XES = new boolean[256] /
在执行备种测试之前，
public void set0p() throws I0Bxoeption (
eBefore
2Uxit偶用etayO.图选
这重是初的化变量的地
nTestSocket =nev Socket(*127.0.0.1*, 4242);
方。这要变量被用于测试
mOutStrean
市法之中.
_nev ObjectOutputStrean(mTestSocket.getOutputStream());
mInStrean -
new ObjectInputStream (mTestSocket .getInputStream ());
Tenown（）在做港理。当
eAfter
怎项测试宠成时，7Unin调
public void tearDoun() throws IOExcept.ion (
由于这些用Belore和
用慎方法。
nTestSocket.close():
Aitn速行了注格，
在备项
nOutStream = nu11;
别试前后，它们都要设
mInStream = nu11
Ui调用
mTestSocket = nul1;
运置是实际的测试。
保以@Tent做注释，因
eTest
此，2Unit如还合是一
public vo.id testNormalMessage () throus IoException(
项别试并销执行它。
boolean[]checkboxState = nev boolean[256];
方法只是修送测试信
乌和核取方块酶列。
checkboxState[5]-trues
mOutStrean,writeCbject (*This is a test message!");
checkboxState[19]-true}
mOutStream,writeCbject (checkboxState) /
你可以使用mOtSem，图为官在
Setx）方法中被设定，Uxit巴经调
用过它.
250
第7章
---
## Page 287
测试和连续集成
使用测试框架运行你的测试
调用JUnit测试执行器，org-junit.runner.JUnitCore。你需
要给执行器的唯-信息是要执行哪-个测试类：headfirst.sd，
不要忘记意MsicServe1和
chapter7.TestRemoteReader。测试方案会负责执行该类中的每
BetBer Pro副本。2Unit不员费
项测试。
华你延理这件事情，除非你增
K
加相美的代码到etp(之中。
不要忘说把jir.jur验入到你的
美路经之中。
hfsd> java
ner.JUnitCore
Unit含为其执行的
每项到试打印一个
JUnit version 4.3.1
“点”，由手这个类只
有一项测试，图此只
Time:0.321
有一个“兰”
OK(1 test)
“OK”是Uxi能理解
hfsd>
的方式，告诉所有
维热行的别试。
这置是执行完测试之后，BeaBox
Puo幕起来的样子、松爱标记是预
期的等样，测试信息在日志文件之
FatsDum
000R00000000□□0□
aneCRp
HpnTom
0000000000000000
LowCoegs
0000000000000000
nid'Ton
Higt-Agoge
测试方案准备就绪后，你可以轻松地加入第246页的测试。只需增加更多
的测试方法并以eTest进行注释。然后，你可以执行你的测试类并观察
其结果。
目前位置
251
---
## Page 288
持续集成
如票有一个工具能在我请入代码后，为我旅行所有的
别试程序，那飞我就不用在我的回队面前显得局促不
安了，这是否在做梦？
在你调入代码时，利用持续集成工具执
行全部测试
我们已经拥有了版本控制工具，它能保持对代码的跟踪，
现在我们又拥有一组自动化测试。我们需要以一种方式把
这两个系统绑定在一起，有些版本控制工具（或集成了版
本控制工具的应用系统）将编译你的代码、执行自动化测
试、甚至显示和邮寄出报告
一旦你提交代码到你的存
储目录之中。
剪时续是C3工具关注着你的存健
这是持续集成（Continuous
integration（Ci））的所有部
目录，看看修验了些什么，但是，
分，它看起来像这样：
最后的结黑都一样——登个事情
是自动化的，
②版本控制工具通知你的CI工具，
有了新的代码出现。
对于你和你的图队，版本控
新的代码！
制流程不常要做任何得改，
从更新代码开端，然后，课
入代码。
①Bob调入部分代码
版本控制服务器通行了一
段物调入过程，集更新修
行号，但院在也有一个通
些代码
经集成工具步其一起工
252
第7章
---
## Page 289
测试和连续集成
持续集成和构建工具是两个过程用以收善
图队成员之阅的决通。
CI调出新的代码，编译它并执行全邮测试程序。大多数构
版本控制和C3的最大好处是
?
你不需要做任何事情
建工具创建web页面和电子邮件，让每人都知道构建工作
都是自动发生的,
一全
的当前状态。
这个特到的构建工具波称之
为Cniseomnot，但区有报多
连续集成把版本
控制、编译和软
没有患蠢的问题
件测试囊括在单一
的、可重复的流
试我的代码吗？我的项目太大，这样做真的可能
使工作缓慢下来。
程之中
到版本控制累统时进行构建及执行测试是一个良
好的实践，但是，有时候不是完全实用。如果你
有一大组测试，需要耗费大量的计算资源，你可
能应议有一点区到地安排事情。
目前位置
253
---
## Page 290
设置持续集成
运用CruiseControl控制CI
一个CI工具的三个主要的任务是从你的存储目录中得到代码的版本、
构建代码，然后执行测试软件套件去测试它们。为了告诉你CI如何
设置，让我们看看CI在CruiseControl中是如何工作的。
把JUnit测试奢件添加到Ant构建中。
在构建你的CruiseControl项目之前，你需要添加JUnit测试套件到
上一次看到Ant是
Ant构建文件中。
在第6.5节。
 《
一个新的0标被称之
为“测试”，它取决子
“编译”目标是否已成
功地完成。
这置是巧妙所在，在你的项目中，所有的
巴“Test开端的类都是作的RUnit测试自动
执行的，不需要你一个一个地携明。
/cruisecontrol>
项目标记界定金部项目配置。
在CtineContol中，项0用XM文格基选，与Ax中的
提述非常相用，除了该脚本基选的是什么将是被宠成。
及何时被完成。
254
第7章
---
## Page 291
测试和连续集成
3
检在存储B录中是否做过修改。
在你的CruiseControl项目中，你可以描述在哪里获得代码，然后要去微什么，在这
种情况下，从你的subversion存储目录中获取代码的修改。如果代码已经被修改了，
则运行全部构建：否则，列人表中的构建就跳过去。
“meilicatiomset”要求存继目录去检本地到本，委是否
常显把待收构建运来。
L
这里用你说明本地到本和选程的存储目录
4
调度构连。
最后，你描述你想要连续集成构建发生的频率。在CruiseControl中，是用调度标识
（Scheduletag）来完成的，在你描述的构建类型之内，你执行它们。
调度构建60分种发生一次
构建“e”标
目前位置
255
---
## Page 292
测试程序只是按照要求行事
测试确保系统能有效工作…….·.对吗？
版本控制、CI、测试方案、构建工具…自从你和你的大学的伙伴们在你的
车库里编写程序开始，你就有一段长长的路要走。通过你所有的测试，你应
该有信心向客户演示你构建的系统是什么样子。
.String
strine
客户点由目惠文件中的Poe信乌，定然，一维
讨民的得误信乌又从控制的的家口中百出来
真地异始变老了
你不能把事
256
第7章
---
## Page 293
测试和连续集成
这里是我们在第6章中修改过的代码。错误一定与这里的某样东西有关。请
在这次发现该错误。
public void buildGUI()(
// code from buildGUI
JButton sendIt = new JButton (*sendIt");
sendIt.addActionListener (new MySendListener ()) ;
这里是我们对
buttonBox,add (sendIt) ;
BearBox.jt
JButton sendPoke = nev JButton(°Send Poke*);
bit4qu(）方法
sendPoke.addActionListener(new MyPokeListener()):
所修酸的代码。
buttonBox.add(sendPoke) :
userMessage = new JTextField() ;
buttonBox,add (userMessage) ;
// more code in buildGUI ()
内部类也是来的
public class MyPokeListener implements ActionListener
BeatBox.jasl,
public void actionPerformed (ActionEvent a)(
// We'1l create an empty state array here
boolean[] checkboxState = new boolean[255]:
try(
out.writeObject(POKE_START_SEQUENCE);
out.writeObject(checkboxState):
}catch (Exception ex){
System,out.println(*Failed to poke!): )
// other code in BeatBoxFinal.java
这段代码出了什么错？
为什么我们测试时没有抓到它？
要如何以不同的方式进行？
目前位置
257
---
## Page 294
被测试的代码是完整的代码
这里是我们在第6章中修改过的代码。错误一定与这里的某样东西有关。请在这次发现
该错误。
答案
public void buildGUI (){
// code from bui1dGUI
JButton sendIt = nev JButton (*sendIt");