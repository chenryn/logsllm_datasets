vestigated co-occurrences of codes. For example, we analyzed links
between strategies and roadblocks and explored the origin of mis-
conceptions. We then used the combined results to identify strong
factors which lead to success or failure of deploying a sane CSP.
3.7 Ethical Considerations
We carefully considered risks and benefits for participants when
developing the study design, especially as some data collection
methods may be perceived as invasive. Especially the installation
script in case of the direct deployment of our coding task on the
participant‚Äôs machine may be perceived as invasive. However, we
wanted to be as close as possible to the participant‚Äôs normal cod-
ing behavior, so we decided to offer the docker file and the direct
execution option. Notably, every participant had the free choice
of using the provided VM or remote access. We informed all the
study participants about the screen and audio recording before
and during the online interview. All participants gave their elec-
tronic (pre-questionnaire) and verbal (beginning of the interview)
consent to data collection and processing. This data is processed
and stored in compliance with the General Data Protection Regula-
tion (GDPR). In addition to that, the study methodology and data
collection processes have been approved by our institution‚Äôs ERB.
4 RESULTS
In this section, we present participant demographics and results
of our thematic analysis. The inter-coder reliability Krippendorff‚Äôs
ùõº [29] was between 0.71 and 0.92 for each version of the code-
book. Our results shed light on why people decide to deploy a CSP
and how they perceive the mechanism. Additionally, we examine
roadblocks for a secure deployment of a CSP, as well as the types
of strategies used during this procedure. Here, we combine find-
ings from the interview, which give us real-world insights into the
work environment of our participants, with results from the coding
task, which reveal concrete technical and conceptual problems in
creating a CSP. We support our findings with participant quotes
(translated verbatim into English where necessary).
4.1 Participant Demographics
Our study population includes both male and female participants.
Their age ranges from 20 to 50 years (survey captures ten-year
ranges). The participants‚Äô employers range from small and medium-
sized enterprises (<9 people) to big companies with over 250 em-
ployees. While seven participants stated that the Web presence is
the main business of their company, this was not the case for three
of them, and one participant did not provide an answer to this ques-
tion. The detailed demographic of the 11 participants that completed
the survey is depicted in Appendix G. The majority of participants
(eight) are located in Germany, but we also had participants from
Czechia, Ireland, and the United Kingdom. Their education level
was divided into three master‚Äôs degrees, three people with bachelor
degrees, two with a software developer apprenticeship, one who
only specified the education level as secondary degree, one that
entered "degree" into the text field, and one that did not answer
this question. For their current occupation, all of our participants
entered different Job titles: Software Security Engineer, Freelancer
/ Developer, Software Development Manager, Analytics & Business
Intelligence, Founder, Ph.D. Student, Software Developer, Student,
AppSec Specialist, Web Developer, and a Student Jobber. Note that
all participants had prior experience with CSP and (have) worked
for or founded a Web company. The last involvement in the mainte-
nance or deployment of CSP was still ongoing for three participants,
in the last week for one participant, within the last month for four,
and more than a year ago for three participants. Throughout the
interview, we also asked the participants if they have an IT security
background. While six participants stated that they had courses
that targeted security, or especially Web security, in their free time
or during their studies, the other half of our participants noted that
they had no security background but self-taught knowledge about
Web security.
Session 11C: Software Development and Analysis CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3090related to the XSS mitigation use-case of CSP is the participants‚Äô
perception that CSP can be used to control the resources included.
Also, five participants mentioned that CSP enables the developer
to have fine-grained control about data connections of the Web ap-
plication. Here, participants specifically mentioned the connect-src
and form-action directives. One participant had the attack scenario
of sensitive data exfiltration in mind. Notably, the fact that one can
simply redirect the browser to exfiltrate data because of missing
support for the navigate-to directive was not mentioned by any
participant.
During the drawing task, we identified that one of the participants
had the misconception that CSP is capable of defending against
Cross-Site Request Forgery (CSRF) attacks. Such a misconception
might lead to a scenario where certain defense techniques, like
CSRF tokens, are not used because the developer thinks of CSP as
the ‚Äùholy grail‚Äù of Web security defends against everything.
Framing Control Another known feature of CSP is the defense
against Click-Jacking attacks [38]. For one participant, this was the
main use case of CSP. One participant admits that he only knew
about this capability of CSP because information sources for the old
and deprecated X-Frame-Options header suggest using CSP‚Äôs frame-
ancestors. However, two of our participants argued that they do not
use frame-ancestors, because the X-Frame-Options header is doing
the same while having better support: "For this, we have something
else. The old XFO is, to my understanding, still well supported, so we
thought of using CSP for that. But the old blunt method is working for
us anyway. So, it did not add extra protection."(P3). Notably, XFO and
CSPs frame-ancestors are not only different functionality-wise, but
also XFO is no fully supported by every browser, which can lead to
inconsistencies [8]. If, for example, a Web sites operator deploys
XFO in the ALLOW-FROM mode, some browsers are ignoring the
entry because this mode is not well supported. In addition to that,
even if this mode works, it is not possible to allow multiple hosts
to frame a page if XFO is used.
TLS Enforcement The capability of CSP to enforce secure net-
work connections was the least known one. While talking about
this use-case of CSP, eight participants mentioned that they are
using the HTTP Strict Transport Security (HSTS) mechanism to
defend against the underlying threat model of a man-in-the-middle.
However, five out of those did not know about CSP‚Äôs capabilities to
block mixed content or upgrade insecure requests. Notably, those
features of CSP might become less relevant nowadays because
Chrome is disallowing any type of mixed content [4] and Firefox
is automatically upgrading HTTP connections [5]. Nevertheless,
not all browsers behave the same way, and thus, the lack of knowl-
edge about this easy-to-use feature of CSP makes HTTPS adoption
harder for the development team because they need to take care of
HTTP URLs that are present in their application.
Key Takeaways: (1) The motivation to deploy CSP is, in the
best case, the incentive to mitigate XSS; in the worst case,
it is only a checkbox that arose from a penetration test. (2)
External factors, like the company‚Äôs reputation or serving
as a role model, such that more Web sites use CSP, can be a
motivation to deploy CSP.
Figure 2: Categories of Motivations
4.2 Motivation for CSP
When asked about their motivation to deploy a CSP, participants
referred either to threat models associated with CSP or external fac-
tors such as financial implications. Figure 2 provides an overview of
the concepts. Most prominently, participants explicitly mentioned
XSS mitigation (five), as well as pen-tests and consulting (four) as
their primary motivation.
Among others, external factors include penetration tests, con-
sulting, or build-pipeline warnings complaining about a missing
CSP. One participant also mentioned that he attended a security
training that suggested deploying a CSP to protect the application.
Also, the effect of a missing CSP on the company‚Äôs reputation is one
reason why companies decide to use CSP. Concurrent to this, big
or known companies see themselves as role-model for others and
therefore should include a CSP. Seven participants perceived CSP
as an additional security layer that kicks in if all other measures,
such as secure coding practices, fail. Notably, seven participants
also mentioned positive side-effects that they discovered during
their CSP journey. For example, during the deployment process,
they re-evaluate the resources used by the application and whether
they are still required for the application‚Äôs functionality. Also, the
re-evaluation of the application structure was something that the
participants mentioned as a benefit during CSP deployment.
4.2.1 Threat Models governed by CSP. In addition to the threat
model-based motivations to deploy a CSP, the participants also
mentioned their perceptions of CSP. We also talked with the par-
ticipants about the different capabilities of CSP and discovered
knowledge gaps regarding CSP.
XSS Mitigation: Five participants explicitly stated that the pri-
mary motivation for using a CSP was to mitigate XSS, making this
the most prominent motivation. Each of them perceived the CSP as
an additional security mechanism stating, for example, "I started
learning about XSS, and then I became interested in the solutions to
XSS. And of course, you know, you start on the road of input sani-
tization, output in coding and then eventually, CSP also, you know,
becomes a factor."(P5). The perception that CSP can mitigate the ef-
fect of XSS attacks was present in ten interviews. Eight participants
knew how CSP could mitigate the effect of XSS. However, three par-
ticipants had misconceptions on how and where CSP kicks in. For
example, they thought that CSP only forbids the connections to the
attacker‚Äôs server or that CSP prevents the attacker from injecting a
malicious payload to the server-side in case of a stored XSS. Closely
External MotivationsPentest / ConsultingAdditional Security LayerReputationRole Model Security TrainingBuild Pipeline WarningFinancial ImplicationsAttack MitigationXSS MitigationResource ControlFraming ControlTLS EnforcementData Connection ControlSession 11C: Software Development and Analysis CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea30914.3.2 Application Roadblocks. Some of the application-based road-
blocks are those that were hypothesized by previous work on
CSP [44]. Through the interview and especially in the coding task,
participants noted the usage of inline JavaScript (8) or inline event
handlers (8). Notably, the participants already mentioned the inline
scripts in the interview part, while the problem with event handlers
was mainly identified during the coding task. One critical point was
that the strategy to resolve the issue with inline scripts could not
be applied to the inline event problem ("I‚Äôd like to insist on attaching
such a nonce here. But I just tested. It does not accept a nonce."(P12)).
If, for example, participants use hashes or nonces for inline scripts,
they were not able to apply the same technologies to allow inline
events. Adding nonces to non-script tags is a no-op, and allowing
event-handlers through their hashes requires ‚Äôunsafe-hashes‚Äô in
Chrome and its derivatives. Another application-based problem is
the usage of third-party code. During the interview, four partici-
pants complained that even if their code is fully CSP-compliant,
third-party services like advertisements and third-party libraries
such as Angular require them to use a more lax CSP, which might
be bypassable [49]. A similar limitation is introduced by choice of
the framework which is used to create the Web application. Six
participants explained that the choice of the framework could also
block a successful CSP deployment. Either the framework supports
CSP or not, and even if the framework itself is compliant with CSP,
its plugins might not adhere to that. Another problem that one
participant mentioned is the way how WebSockets are handled in
CSP. While some browsers allow WebSocket connections to the
domain itself if ‚Äôself‚Äô is present, as specified since CSP level 3 [56],
others require to allow the own domain with the WebSocket proto-
col explicitly. This issue was already discussed in the CSP GitHub
repository [57], leading to a change in the living standard [56].
According to five of our participants, the presence of legacy code
in a Web application also causes problems during CSP deployment.
Usually, the development teams first build the application and later
want to add a CSP to it. Thus, the application is full of inline codes,
inline events, non-CSP compliant libraries, which makes creating a
sane CSP hard and very costly.
4.3.3 Knowledge Gaps. During the interview, we also discovered
that information sources and online tools might be counteracting
the deployment of a sane CSP. Some online security scanners only
check if a CSP header is deployed, but such tools often do not check
if the deployed policy is trivially bypassable or missing important
directives. Moreover, we identified five cases where the used infor-
mation source about CSP is misleading for the participant or gives
wrong information about CSP. Those sources are not designed to
give people the most secure solution for allowing sources (e.g., the
usage of nonces) but rather suggest allowing the third-party domain,
which is even worse than suggesting to use full URLs. Also, those
sources mislead the reader in case of inline event handler. Instead
of suggesting to add the events programmatically, they first suggest
the usage of hashes which, however, leads to inconsistent behavior
among major browsers. One result of such misguided information
available for CSP is that developers have conceptual issues with
CSP. Through the interview part, we probed participants about
the different capabilities of CSP. While the initial use case of CSP
is known to most of the developers, other use-cases like framing
Figure 3: Categories of Roadblocks
4.3 Roadblocks of CSP
Throughout the analysis of our dataset, we identified different prob-
lems that hindered the deployment of a sane CSP without using any
insecure practices. For the thematic analysis of those, we combined
different codes and clustered them into four different categories of
roadblocks shown in Figure 3. Notably, these roadblocks are results
from both the semi-structured interview and the coding task.
The technical roadblocks are technological problems that the
Web applications operator has no control of. In contrast, the ap-
plication-based roadblocks describe problems that occur due to
the choices that the developer made when creating the applica-
tion. The Cost-based roadblocks are monetary limitations set by
the administrative level of the company or time constraints of the
Web applications operator. Finally, the category of Knowledge Gaps
includes insufficient or bad information sources, lack of documen-
tation, and knowledge about the concepts and capabilities of CSP.
4.3.1 Technical Roadblocks. One of the technical roadblocks men-
tioned by eight of our participants is the inconsistent browser sup-
port for certain CSP features. While, for example, most browsers
support the ‚Äôstrict-dynamic‚Äô source expression, Safari has not im-
plemented this feature yet, which means that the CSP is too strict
in this case and might block important features of the Web appli-
cation. Also, seven participants complained about the inconsistent
way how console messages are designed depending on the browser.
The preinstalled browser of our VM was Firefox, and participants
that use a chromium-based browser in their usual workflow missed
helpful information in the console error messages of Firefox ("Wait,
there is no hash in there." (P4)). Also, browser extensions on the
client-side might cause problems with the CSP. Some of them tend
to inject their own code into the Web Application, which will re-
sult in false-positive CSP errors which might be reported to the
development team. But not only extensions cause those errors,
but also browser features, plugins, or other client-side interactions
with the Web application can generate those reports. From the five
participants that denounce those false-positive reports, four also
complained about the level of detail in the reports send by CSP
violation events. It was mentioned that a detailed code location of
the violation, as well as a corresponding hash to allow the code
snipped, would ease the deployment and maintenance of a CSP.
TechnicalRoadblocksApplicationRoadblocksCost-basedRoadblocksKnowledgeGapsBrowserInconsistencyBrowserConsoleMessagesFalse PositiveReportsInsufficientReportsBrowserExtensionsInlineJavaScriptInline EventsFrameworkSupportLegacy Code3rd-Party Services3rd-PartyLibrariesDifferent DevTeamsWebSocketsEngineeringEffortCSPComplexityCSPMaintenanceAmount ofReportsSecurity isSecondaryGoalFinancialConsequencesKnowledgeabout CSPCapabilitiesInformationSourcesConceptualIssuesBuild inSecurityFeaturesSession 11C: Software Development and Analysis CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3092control and TLS enforcement are less present in their mind. Notably,
a participant mentioned that usually, security headers are built-in
and deployed per default in some frameworks and are wondering
why this is not the case for CSP.
4.3.4 Cost-based Roadblocks. A reason for the lack of a CSP or for
the usage of insecure practices is, according to ten of our partici-
pants, not only the lack of knowledge about CSP or its capabilities
but, in many cases, time or monetary reasons. CSP is seen as a
rather complex security mechanism that requires massive engineer-
ing efforts, which makes it costly for a company to deploy. Also,
half of our participants admit that security is often seen as a sec-
ondary goal during the development of a Web application, which
is why non-CSP compliant technologies are used in the develop-
ment process. Thus, if during the initial deployment of a CSP, for
example, legacy code is present, the decision to use unsafe-inline
is taken instead of costly actions such as refactoring the applica-
tion. But not only the initial deployment of a sane CSP might be
costly, but also the maintenance of CSP can be quite hard, as four
participants pointed out. For every new content or feature that is
added to the application, new entries might need to be added to
the policy, requiring constant changes to the allowlist. Another
problem that makes the curation of a CSP harder is related to the
false-positive reports mentioned in Section 4.3.1. Four participants
explained that depending on the number of clients that are visit-
ing the Web application, the reporting endpoint is flooded with