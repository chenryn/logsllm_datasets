### 数据概览

以下是一系列数字，可能代表某些统计或测量结果：

1273, 33473, 7922, 2856 (Stub), 8764, 9198, 5400, 13789, 5432, 1241, 2611, 224, 6959, 293, 881, 2000, 235, 394, 472, 176, 506, 601, 2985, 530, 4931, 1477, 1064, 831, 56, 1122, 981, 124, 743, 52, 402, 760, 23356, 2381, 93, 353, 395, 60, 172, 224, 124, 417, 107, 40, 95, 861, 310, 204, 156, 11, 209, 91, 33, 132, 5, 68, 93, 1054, 37, 7, 44, 39, 7, 4, 16, 5, 8

百分比数据：
0.49%, 0.22%, 0.69%, 1.83%, 0.83%, 0.86%, 1.70%, 0.01%, 0.56%, 0.74%, 0.00%, 1.84%, 0.08%, 0.18%, 0.69%, 0.77%, 12.46%, 22.93%, 85.13%, 16.46%, 65.26%, 80.25%, 91.03%, 77.97%, 91.30%

大数值数据：
832968, 832808, 831530, 830610, 829468, 829309, 829002, 828926, 771902, 752128, 21823, 850999, 845664, 814703, 474677, 163000, 4423, 3149, 1748, 1628, 685, 157, 145, 59, 23

### 别名解析方法

为了进行别名解析（即识别属于同一路由器的IP地址），我们使用了基于IP-ID字段相似性的工具Midar [22]。我们在2021年4月29日至5月1日期间运行了Midar。在TNT发现的90万个地址中，Midar发现了涉及147,633个地址的45,977个路由器。

此外，我们还使用了Apple [28]（2021年5月10日至5月12日），这是一种补充现有技术（如Midar）的路由器IP别名解析技术。我们在EdgeNet [39]（一个专门用于网络和分布式系统研究的Kubernetes集群）上部署了Apple，并找到了涉及87,532个地址的26,729个路由器。结合Midar的结果，我们进一步优化了别名解析，总共涉及57,355个路由器和192,320个地址，相比仅使用Midar时的覆盖率提高了25%。

### BGP数据收集

我们还使用了BGPStream [33]，这是一个开源软件框架，可以轻松获取实时和历史BGP数据。该工具提供了来自全球各地的BGP视图，数据来源于RouteViews [38]和RIPE RIS [43]项目。我们在2021年4月20日（TNT活动期间）从44个采集器处收集了44张BGP表。

### 自治系统统计数据

表1提供了本研究选择的25个自治系统的全局统计数据。我们选择了具有不同规模和互联网角色的自治系统（11个Tier 1，5个Transit，9个Stub），以尽可能具有代表性。

### Rocketfuel的限制

Rocketfuel的主要贡献是提出了并部署了推断ISP路由器级地图的先驱性测量技术。第二个挑战是在有限的转发设备容量下，尽量减少测量次数，以加快测量活动的速度。这是因为ISP不仅会过滤探测，而且由于性能和安全原因，只允许少量的ICMP响应突发。此外，ISP不断受到路由变化的影响 [30]。为此，他们的方法是首先利用可用的路由信息来选择可能通过目标ISP的路径，然后应用基于IP路由属性的缩减技术来消除可能在ISP内走冗余路径的追踪。

尽管当时Rocketfuel被认为是映射ISP的最佳尝试，但它已经存在一些局限性 [42]。这些问题主要是由于基本traceroute实现的简单使用（后来被Paris traceroute [2]取代）以及使用过时的别名解析技术导致的大量虚假链接推断。如今，Rocketfuel面临更多问题，因为过去20年来互联网的大规模增长带来了许多变化。越来越多的边缘网络加入互联网，核心网络之间的互联变得更加密集（使互联网扁平化），网络运营实践（如TE、多宿主或多宿主独立地址 [1] 的使用）也显著演变，并依赖于新技术（如MPLS或段路由）。随着这些范式的转变，虽然Rocketfuel的探测原则在概念上仍然有价值，但其工具和策略已变得过时。

在接下来的部分中，我们将回顾Rocketfuel的缩减技术（即出口缩减 - 第4.1节 - 下一跳AS缩减 - 第4.2节 - 入口缩减 - 第4.3节）如何不再适用于当今的互联网。

### 出口缩减

Rocketfuel的初始目标池是从BGP表（即路由信息库 - RIBs）构建的，这允许选择预期通过目标ISP的测量。他们称之为定向探测，每个自治系统的定向前缀数量可以在表1中找到。出口缩减认为，从相同入口到同一出口之外的任何前缀的跟踪应该经过相同的路径。因此，这样的跟踪是多余的，只需要收集一次。但是为了找到这些出口，Rocketfuel必须进行预探测阶段来发现ISP的多个前缀共用的出口路由器。

这个预探测阶段只在一个初始目标池的子集上启动，他们称之为依赖前缀。依赖前缀是由目标ISP或其单宿主客户发起的前缀。因此，按照定义，所有到这些前缀的跟踪（从网络中的任何地方）都应该通过ISP。这使得他们可以从单个监控点启动预探测阶段，并确保探测确实通过目标ISP。

尽管出口缩减在原则上是合理的，但实际应用并找到多个前缀共享的出口可能会过于昂贵，而带来的减少效果并不值得。为了证明这一点，我们根据RIBs构建了初始目标池（遵循Rocketfuel的方法），并计算了相应的依赖前缀比例。目标池中的原始目标数量以及依赖前缀的比例可以在表1的“Raw number”和“Dependent”列中找到。

我们可以观察到，依赖前缀的比例在不同的自治系统之间差异很大。对于大型Tier 1，不到1%的目标可以通过出口缩减减少。这是意料之中的，因为Tier 1几乎参与了所有的互联网流量（特别是与数千个客户有关），并且有许多对等关系。此外，多宿主的做法越来越普遍，这也解释了依赖前缀比例非常小的原因。对于较小的Transit AS，潜在的减少有时会稍好一些，但也不是万能的。而对于Stub（或接近Stub）的AS，潜在的减少确实更大（从10%到90%）。然而，鉴于目标池中已经很小的目标数量，进一步减少它们是没有意义的，尤其是在预探测阶段需要额外的探测。

总的来说，出口缩减实际上并没有帮助。一方面，它在小型AS中的减少潜力并没有带来很大的节省；另一方面，对于大型AS来说，这种减少显得微不足道（不到1%），相对于所需的大量探测以及预探测阶段的成本而言。

### 下一跳AS缩减

下一跳AS缩减的基本原理是，通过ISP的路径通常只取决于下一跳AS，而不是特定的目的地前缀。根据这一想法，从入口路由器到下一跳AS的一条跟踪可能是有价值的，这意味着所有共享同一下一跳AS的前缀可以缩减为一个探测。