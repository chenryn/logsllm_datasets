A very nice addition to TypeScript's type system would be sum types in the
spirit of ML-like languages. This is one of basic and simple programming
constructs from functional programming which you really miss once you get used
to it, but which seem to have a hard time being included in new modern
languages (contrary to other features from functional programming such as
first-class functions, structural types, generics).
I guess the most natural way to integrate sum types in the current language
syntax would be to extend enum variants with extra parameters (similarly to
what Rust does: http://doc.rust-lang.org/tutorial.html#enums ) and upgrade the
switch statement to a more powerful structural pattern matching (although in a
first step, simply discriminating on the toplevel variant and capturing its
parameters would be already quite good).
This is quite different from other the proposal about "union types" (#14),
which would mostly be useful to capture types in existing Javascript APIs. Sum
types are rather used to describe algebraic data structures. They would be
particularly useful for any kind of symbolic processing (including for
implementing the TypeScript compiler).