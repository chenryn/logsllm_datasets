          // 创建客户端对象stub（存根）
          IHello stub = (IHello) registry.lookup("Hello");
          // 使用存根调用服务端对象中的方法
          String response = stub.sayHello();
          System.out.println("response: " + response);
      } catch (Exception e) {
          System.err.println("Client exception: " + e.toString());
          e.printStackTrace();
      }
        }
    }
至此，简单的RMI服务和客户端已经构建完成，我们来看一下执行效果：
    $ rmiregistry &
    [1] 80849
    $  java Server &
    [2] 80935
    Server ready
    $  java Client
    response: Hello, world!
Java RMI的调用过程抓包如下：
我们可以清晰的从客户端调用包和服务端返回包中看到Java序列化魔术头`0xac 0xed`：
因此可以证实Java RMI的调用过程是依赖Java序列化和反序列化的。
简单解释一下RMI的整个调用流程：
  1. 客户端通过客户端的Stub对象欲调用远程主机对象上的方法
  2. Stub代理客户端处理远程对象调用请求，并且序列化调用请求后发送网络传输
  3. 服务端远程调用Skeleton对象收到客户端发来的请求，代理服务端反序列化请求，传给服务端
  4. 服务端接收到请求，方法在服务端执行然后将返回的结果对象传给Skeleton对象
  5. Skeleton接收到结果对象，代理服务端将结果序列化，发送给客户端
  6. 客户端Stub对象拿到结果对象，代理客户端反序列化结果对象传给客户端
我们不难发现，Java RMI的实现运用了程序设计模式中的代理模式，其中Stub代理了客户端处理RMI，Skeleton代理了服务端处理RMI。
#### WebLogic RMI
WebLogic RMI和T3反序列化漏洞有很大关系，因为T3就是WebLogic
RMI所使用的协议。网上关于漏洞的PoC很多，但是我们通过那些PoC只能看到它不正常（漏洞触发）的样子，却很少能看到它正常工作的样子。那么我们就从WebLogic
RMI入手，一起看看它应该是什么样的。
**WebLogic RMI就是WebLogic对Java RMI的实现** ，它和我刚才讲过的Java
RMI大体一致，在功能和实现方式上稍有不同。我们来细数一下WebLogic RMI和Java RMI的不同之处。
  * WebLogic RMI支持集群部署和负载均衡
因为WebLogic本身就是为分布式系统设计的，因此WebLogic RMI支持集群部署和负载均衡也不难理解了。
  * WebLogic RMI的服务端会使用字节码生成（Hot Code Generation）功能生成代理对象
WebLogic的字节码生成功能会自动生成服务端的字节码到内存。不再生成Skeleton骨架对象，也不需要使用`UnicastRemoteObject`对象。
  * WebLogic RMI客户端使用动态代理
在WebLogic RMI 客户端中，字节码生成功能会自动为客户端生成代理对象，因此`Stub`也不再需要。
  * **WebLogic RMI主要使用T3协议（还有基于CORBA的IIOP协议）进行客户端到服务端的数据传输**
T3传输协议是WebLogic的自有协议，它有如下特点：
  1. 服务端可以持续追踪监控客户端是否存活（心跳机制），通常心跳的间隔为60秒，服务端在超过240秒未收到心跳即判定与客户端的连接丢失。
  2. 通过建立一次连接可以将全部数据包传输完成，优化了数据包大小和网络消耗。
下面我再简单的实现一下WebLogic RMI，实现依据Oracle的WebLogic
12.2.1的官方文档，但是官方文档有诸多错误，所以我下面的实现和官方文档不尽相同但保证可以运行起来。
首先依然是创建服务端对象类，先创建一个接口继承`java.rmi.Remote`:
    // IHello.java
    package examples.rmi.hello;
    import java.rmi.RemoteException;
    public interface IHello extends java.rmi.Remote {
        String sayHello() throws RemoteException;
    }
创建服务端对象类，实现这个接口：
    // HelloImpl.java
    public class HelloImpl implements IHello {
        public String sayHello() {
            return "Hello Remote World!!";
        }
    }
创建服务端远程对象，此时已不需要`Skeleton`对象和`UnicastRemoteObject`对象：
    // HelloImpl.java
    package examples.rmi.hello;
    import javax.naming.*;
    import java.rmi.RemoteException;
    public class HelloImpl implements IHello {
        private String name;
        public HelloImpl(String s) throws RemoteException {
            super();
            name = s;
        }
        public String sayHello() throws java.rmi.RemoteException {
            return "Hello World!";
        }
        public static void main(String args[]) throws Exception {
            try {
                HelloImpl obj = new HelloImpl("HelloServer");
                Context ctx = new InitialContext();
                ctx.bind("HelloServer", obj);
                System.out.println("HelloImpl created and bound in the registry " +
                        "to the name HelloServer");
            } catch (Exception e) {
                System.err.println("HelloImpl.main: an exception occurred:");
                System.err.println(e.getMessage());
                throw e;
            }
        }
    }
WebLogic RMI的服务端已经构建完成，客户端也不再需要`Stub`对象：
    // HelloClient.java
    package examples.rmi.hello;
    import java.util.Hashtable;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class HelloClient {
        // Defines the JNDI context factory.
        public final static String JNDI_FACTORY = "weblogic.jndi.WLInitialContextFactory";
        int port;
        String host;
        private static void usage() {
            System.err.println("Usage: java examples.rmi.hello.HelloClient " +
                    " ");
        }
        public HelloClient() {
        }
        public static void main(String[] argv) throws Exception {
            if (argv.length  env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
最后记得项目中引入`wlthint3client.jar`这个jar包供客户端调用时可以找到`weblogic.jndi.WLInitialContextFactory`。
简单的WebLogic RMI服务端和客户端已经构建完成，此时我们无法直接运行，需要生成jar包去WebLogic Server 管理控制台中部署运行。
生成jar包可以使用大家常用的build工具，如ant、maven等。我这里提供的是maven的构建配置：
        4.0.0
        examples.rmi
        hello
        1.0-SNAPSHOT
                    org.apache.maven.plugins
                    maven-compiler-plugin
                        1.8
                        1.8
                    org.apache.maven.plugins
                    maven-jar-plugin
                                true
                                false
                                lib/
                                examples.rmi.hello.HelloImpl