title:Security through amnesia: a software-based solution to the cold boot
attack on disk encryption
author:Patrick Simmons
Security Through Amnesia: A Software-Based Solution to the Cold Boot
Attack on Disk Encryption
Patrick Simmons
University of Illinois at Urbana-Champaign
Abstract
Disk encryption has become an important security mea-
sure for a multitude of clients, including governments,
corporations, activists, security-conscious professionals,
and privacy-conscious individuals. Unfortunately, recent
research has discovered an effective side channel attack
against any disk mounted by a running machine [23].
This attack, known as the cold boot attack, is effective
against any mounted volume using state-of-the-art disk
encryption, is relatively simple to perform for an attacker
with even rudimentary technical knowledge and training,
and is applicable to exactly the scenario against which
disk encryption is primarily supposed to defend: an ad-
versary with physical access. To our knowledge, no ef-
fective software-based countermeasure to this attack sup-
porting multiple encryption keys has yet been articulated
in the literature. Moreover, since no proposed solution
has been implemented in publicly available software, all
general-purpose machines using disk encryption remain
vulnerable. We present Loop-Amnesia, a kernel-based
disk encryption mechanism implementing a novel tech-
nique to eliminate vulnerability to the cold boot attack.
We offer theoretical justiﬁcation of Loop-Amnesia’s in-
vulnerability to the attack, verify that our implementation
is not vulnerable in practice, and present measurements
showing our impact on I/O accesses to the encrypted disk
is limited to a slowdown of approximately 2x. Loop-
Amnesia is written for x86-64, but our technique is appli-
cable to other register-based architectures. We base our
work on loop-AES, a state-of-the-art open source disk
encryption package for Linux.
1
Introduction
The theft of sensitive data from computers owned by
governments, corporations, and legal and medical pro-
fessionals has escalated to a problem of paramount im-
portance as computers are now used to store, modify, and
1
safeguard all kinds of sensitive and private information.
Hard drive thefts in the past have put information such
as medical data [5], Social Security and passport num-
bers [19], and the access codes for a ﬁnancial service
corporation’s private Intranet [3]1 at risk.
Because of the signiﬁcant potential for harm such
breaches represent, disk encryption, in which an entire
ﬁlesystem is stored on nonvolatile storage in encrypted
form, has become a standard and often mandatory se-
curity technique in many environments [9]. Most major
commercial operating systems now offer some form of
kernel-based disk encryption [32] [29] [12], and third-
party tools supporting disk encryption, such as True-
Crypt [2], are freely available for many architectures and
operating systems. This software has proven effective
against determined adversaries wishing to defeat its pro-
tection [14].
However, recent work [23] by Halderman et al. has
uncovered a ﬂaw common to all commercially avail-
able disk encryption packages. These researchers ob-
served that, as long as an encrypted volume is mounted,
a disk encryption package will store the encryption key
in RAM. They further discovered that, contrary to pop-
ular belief, DRAM does not lose its contents for several
minutes after a loss of power. Thus, Halderman et al.
put forth the following attack on all disk encryption: cut
power to the target machine, pull out the RAM, put the
RAM in a new machine2, and boot this machine with an
attack program of their creation which overwrites a min-
imal amount of RAM with its own code and dumps the
original contents of RAM to nonvolatile storage. At this
point, an attacker can search the contents of RAM for the
encryption key or simply try every key-length string of
bits present in the RAM of the original machine as a po-
tential key. This attack, called the “cold-boot attack” by
Halderman et al., is simple to perform, routinely effec-
1In this case, the hard drive appears to have been sold and purchased
legitimately but was not adequately wiped prior to the sale.
2Variants of the attack eliminate the need for a separate machine.
tive, and broadly applicable against the existing universe
of disk encryption software packages.
It is difﬁcult to overstate the signiﬁcance of the cold-
boot attack. The protection afforded by disk encryption
against any adversary with access to the running target
machine is now effectively skewered. Many users for
whom disk encryption previously offered protection are
now at risk of having their data stolen when their ma-
chines are stolen or lost. One may argue that these users
should physically secure their machines, but, as disk en-
cryption is speciﬁcally intended to protect against an at-
tacker who has physical access to the disk, that argument
rings hollow.
In this paper, we describe the novel implementation
approach we used in Loop-Amnesia, the ﬁrst disk en-
cryption software package not vulnerable to the cold-
boot attack. We contribute a method of permanently stor-
ing an encryption key inside CPU registers rather than
in RAM, an approach of capitalizing on this ability to
allow the masking of arbitrarily many encryption keys
from disclosure under a cold-boot attack, an implemen-
tation strategy for the AES encryption algorithm which
ensures that no data related to encryption keys is ever
leaked to RAM, a prototype implementation of our ap-
proach, and performance measurements validating our
technique’s usability in practice.
Section 2 describes the attack model used by our pa-
per. Section 3 provides an overview of AES and the
loop-AES software package we enhanced to thwart the
cold-boot attack. Section 4 describes the design of Loop-
Amnesia. Section 5 describes our implementation. Sec-
tion 6 describes our justiﬁcation that Loop-Amnesia is
in fact immune to the cold-boot attack and describes our
correctness testing. Section 7 details our performance
benchmarking of Loop-Amnesia. Section 8 details the
limitations of our approach to this problem. Section 9 de-
scribes related work. Section 10 describes future work.
Section 11 concludes the paper.
2 Attack Model
We assume our attacker has full physical access to the
target machine. The attacker is assumed to possess any
commonly available equipment necessary or useful for
performing the cold-boot attack, such as his own com-
puter or other device capable of reading RAM after he
has removed it from the target machine.
In the event our attacker has access to an account on
the target machine, such as with stolen login credentials
or due to the fact that the machine was stolen with a user
logged in, we seek to prevent the attacker from gaining
unauthorized access to the disk volume key or to parts of
the encrypted disk to which the account he is using does
not have access. We assume an attacker will not be able
to gain access to the encryption keys through vulnera-
bilities in the operating system; other work (SVA [13],
SECVisor [35], and HyperSafe [38]) can protect the ker-
nel from exploitation.
3 Background
3.1 Aspects of AES Relevant
Amnesia
to Loop-
AES, or the Advanced Encryption Standard, is an efﬁ-
cient block cipher algorithm. Originally published as Ri-
jndael [15], the algorithm became the AES standard in
2001. It has proven quite resistant to cryptanalysis [8]
[20] since its standardization.
3.1.1 Rounds
AES encryption proceeds in multiple rounds. In a round-
based encryption process, plaintext is ﬁrst encoded to ci-
phertext by applying the main body of the encryption al-
gorithm. The resulting ciphertext is then encrypted again
using the same algorithm in a second round of encryp-
tion. This process is repeated a number of times: in the
case of 128-bit AES, our algorithm of concern, the num-
ber of rounds is 10.
3.1.2 Key Schedule
In order to increase the algorithm’s resistance to crypt-
analysis, AES and other block ciphers employ a concept
called a key schedule, in which a different key is used
for each round of encryption. In AES, the original key is
used for the ﬁrst round, and subsequent rounds use keys
obtained by permuting the contents of the previous round
key. This permutation is reversible. In most AES imple-
mentations, all 10 keys of the key schedule are precom-
puted and stored to RAM for performance purposes.3
Since there are different but related key schedules for en-
cryption and decryption, a total of 20 128-bit quantities
from which the original key can be derived are stored to
RAM when using unmodiﬁed loop-AES or a similar disk
encryption package.
3.2 Organization of loop-AES
Loop-AES [30] is a kernel plugin for Linux providing
an encrypted loopback device to the user. An encrypted
loopback device binds to a normal block device, such as a
disk partition or ﬁle, and provides a view of its data after
having been decrypted with a key. If data is written to
3For reasons discussed in later sections, this performance optimiza-
tion is foreclosed to Loop-Amnesia.
2
the loopback device, it is encrypted before being stored
on the device to which the loopback device is bound.
The internal structure of loop-AES is both clean and
modular. All encryption, decryption, and key-setting
work is performed by the three methods aes encrypt,
aes decrypt, and aes set key. Key data is stored
inside the aes context structure, which is treated as
opaque by all of loop-AES outside of the three routines
mentioned above. IV computation, CBC chaining, and
other functions necessary to a full disk encryption sys-
tem are handled independently of the implementation of
these functions and, indeed, independently of the cryp-
tographic algorithm used. Loop-Amnesia’s changes to
loop-AES are conﬁned to these three subroutines.
Of particular concern to us is how loop-AES stores
cryptographic keys. Keys are stored only inside the
aforementioned opaque aes context structures; loop-
AES conscientiously deletes them from other locations
in memory after initializing the aes context struc-
tures with aes set key. Because the keys are stored
in memory by aes set key, however, loop-AES, like
other prior disk encryption software, is fully vulnerable
to the cold-boot attack.
4 The Design of Loop-Amnesia
The basic insight of Loop-Amnesia’s design is that, be-
cause of the ubiquity of model-speciﬁc registers, or
MSRs, in CPU architectures today, it is possible to store
data inside the CPU, rather than in RAM, thus making
that data unreadable to a perpetrator of the cold-boot at-
tack. The challenging aspect of this approach is ﬁnd-
ing model-speciﬁc registers that can practicably be used
for this task: if an MSR is repurposed as storage space
for an encryption key, it is unavailable for its intended
use. Model-speciﬁc registers are used for a diverse vari-
ety of system tasks; some, like the control for the CPU
fan, must not be tampered with lightly lest the safe oper-
ation of the hardware be threatened.
On our target platform, x86-64, we disabled perfor-
mance counting and therefore were able to use the per-
formance counter registers to hold a single 128-bit AES
key.4 To evaluate the generality of our approach, we
examined the CPU system programming manual for a
PowerPC chip [34]. We were also able to ﬁnd perfor-
mance counter MSRs on PowerPC that would appear
to be repurposable for key storage on that architecture.5
4On Intel [11] processors, we use MSRs 0xC1, 0xC2, 0x309,
and 0x30A. On AMD [16] CPUs, we use MSRs 0xC0010004,
0xC0010005, 0xC0010006, and 0xC0010007.
5However, the manual also states that the performance counters are
readable from user mode, and it does not appear that the instruction
to read them can be disabled by the operating system. Thus, our ap-
proach may not provide security against an attacker with the ability to
3
Of course, on any platform, disabling and repurposing
the hardware performance counter infrastructure in this
manner has the side effect of foreclosing the use of any
hardware-assisted performance proﬁlers. Since we ex-
pect protection against cold-boot attacks to be most im-
portant for production machines, which do not typically
use hardware-assisted performance proﬁlers, we do not
consider this a serious deﬁciency of our approach.
Since storing the disk volume key in the MSRs di-
rectly would prevent the mounting of more than one en-
crypted volume simultaneously6, we instead store a ran-
domly generated number in the MSRs, then use this mas-
ter key to encrypt the disk volume key for each mounted
volume. Because we assume an attacker may later have
access to all RAM, we require a random number gener-
ator (RNG) which guarantees that previously output ran-
dom numbers cannot be calculated from its subsequent
internal state.7
5
Implementation
5.1 Constraints
To validate our design, we built a cold-boot immune 128-
bit AES implementation as a drop-in replacement for the
128-bit AES implementation already present in the loop-
AES disk encryption package. In order to satisfy our pri-
mary design criterion of cold-boot immunity, we must
take care in our implementations of aes encrypt and
aes decrypt that no key data is ever stored to RAM.
This places a number of constraints on our implementa-
tion.
First, in order to ensure no register containing key data
could ever be spilled to RAM, we needed a degree of
control over the register allocation process not available
to the programmer in any high-level language, including
C. For this reason, our implementation of Loop-Amnesia
uses x86-64 assembly language exclusively.
Second, though most AES implementations, in or-
der to improve performance, precompute the AES key
schedule and cache it to RAM, our repurposed MSR
space is far too limited to store even one full AES key
schedule. We instead compute the key schedule on-the-
ﬂy during encryption and decryption as discussed in §5.2.
execute arbitrary user-level code on PowerPC unless we found other re-
purposable MSRs. On x86-64, the ability of unprivileged code to read
performance counters is conﬁgurable by the operating system, and we
disable this ability.
6Another motivation for supporting multiple simultaneous encryp-
tion keys is to support a mode of loop-AES which uses 64 different
encryption keys to protect against watermark attacks [30]
7In our implementation, we use the Linux kernel random num-
ber generator, which is speciﬁcally designed to provide this guarantee.
There has been some cryptanalysis of the Linux RNG with respect to
its ability to provide this guarantee [22], but the implementation is still
considered safe in practice [18].
Figure 1: Pseudocode Description of Loop-Amnesia
Finally, as MSRs are per-CPU (or per-core), the need
to copy our master key to all CPUs that may run the
Loop-Amnesia subroutines presents a logistical prob-
lem. Our prototype implementation currently handles
this problem by compiling the Linux kernel in single-
CPU mode, forcing all software to execute on only one
CPU or CPU core. While the prototype implementa-
tion of loop-AES therefore currently limits a machine
to a single core, there is nothing in the design of Loop-
Amnesia requiring this limitation. In a production imple-
mentation of Loop-Amnesia, we would suggest storing
the master key to RAM after its generation, forcing all
CPUs to read it and store it to their MSRs, and subse-
quently scrubbing the key from RAM.
The TPM Alternative
Many of these design constraints could be lifted if hard-
ware support were available. However, the Trusted Pro-
tection Modules [37] present on so many computers to-
day do not provide useful hardware support for our goal.
While it might at ﬁrst appear that we could secure the
key inside of such a cryptographic coprocessor and use it
to perform all encryption and decryption of the disk, the
current TPM standard only supports the public-key RSA
algorithm, which is inappropriate for disk encryption.
However, even though TPMs are not useful for per-
forming the actual disk encryption, they could be used
as an alternative method of encrypting the disk volume
keys: instead of using an AES key hidden in an MSR
on the main processor for the master key, we could use a
public RSA key generated by the TPM. When we wanted
to perform disk encryption or decryption, we could ask
the TPM to use the corresponding private RSA key to
decrypt the values we stored in RAM, reading the de-
crypted disk volume key directly from the TPM to regis-
ters over the serial bus.
Unfortunately, this is an inferior alternative to our ap-
proach from both security and performance standpoints.
4
aes_encrypt(context,plaintext_buffer,            ciphertext_buffer):- Disable interrupts.- Read master key from MSRs to registers.- Read encrypted volume key from memory     to registers.- Decrypt volume key without storing     any temporary data in RAM.- Read plaintext_buffer from RAM to     registers.- Encrypt plaintext using volume key     without storing any temporary     data in RAM.- Write ciphertext to ciphertext_buffer.- Zero all registers containing key data.- Enable Interrupts.- Returnaes_decrypt(context,ciphertext_buffer,            plaintext_buffer):- Disable interrupts.- Read master key from MSRs to registers.- Read encrypted volume key from memory     to registers.- Decrypt volume key without storing any     temporary data in RAM.- Read ciphertext_buffer from RAM to     registers.- Decrypt ciphertext using volume key     without storing any temporary     data in RAM.- Write plaintext to plaintext_buffer.- Zero all registers containing key data.- Enable Interrupts.- Returnaes_set_key(context,key_bytes):- if this is the first call to aes_set_key:     master_key = gen_random_bytes(); msr_store(master_key)- master_key = msr_load()- first_round_key = internal_decrypt(master_key,key_bytes)- context->first_round_key = first_round_key- last_round_key = lastround(key_bytes)- last_round_key = internal_decrypt(master_key,last_round_key)- context->last_round_key = last_round_keyFrom a security standpoint, the disk volume keys would
frequently be transferred unencrypted over a bus from
the TPM to the system CPU. An adversary able to tap
this bus would be able to obtain the disk volume keys.
From a performance standpoint, the master key would
be decrypted by a relatively slower algorithm on a rela-
tively slower processor, and we would in addition incur
the latency of two transmissions over the TPM-CPU bus
for every volume key decryption.8 For these reasons, we
chose not to utilize a TPM for our implementation.
Implementation Outline
5.2
The aes encrypt and aes decrypt functions take
an AES context structure, a buffer containing the plain-
text or ciphertext, and a buffer to which the encrypted
ciphertext or decrypted plaintext must be stored. Each
of these functions must use the master key to decrypt the
volume key stored in the AES context structure, use this
decrypted key to encrypt the plaintext buffer or decrypt
the ciphertext buffer, and must ﬁnally write the fully en-
crypted ciphertext or fully decrypted plaintext to the out-
put buffer. Programming these cryptographic routines in
assembly language, on an architecture with 16 registers,