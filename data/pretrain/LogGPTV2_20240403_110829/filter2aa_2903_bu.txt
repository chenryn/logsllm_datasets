btrace.c中包含了RTIT有关的代码。
英特尔公司公布了名为libipt的开源库，用来解码RTIT包（见
GitHub官方网站）。
在GitHub上，有一个名为simple-pt的独立工具，它有自己的驱动程
序，不依赖perf接口和上面讲的perf驱动。除了驱动，它还有3个应用，
分别用来从驱动中收集数据（名为sptcmd）、解码追踪信息（名为
sptdecode）以及直接显示追踪信息（fastdecode）。它的解码功能是基
于英特尔libipt的开源库的。
RTIT是一套功能强大而且比较复杂的设施，其用途也很广泛，因
篇幅所限，本节只介绍了冰山一角，IA手册卷三专设一章来描述
RTIT，即第36章Intel Proecssor Trace，希望了解更多详情的读者可以参
阅。上面提到的perf intel-pt驱动和GDB的源代码也是非常宝贵的资源。
5.7 ARM架构的性能监视设施
在ARM架构中，虽然ARMv5的ARMv6的某些实现中就包含了性能
监视设施，比如XScale，但是那些实现并不属于ARM架构的标准。直到
ARMv7，才正式将性能监视设施纳入到架构定义，称为性能监视扩展
（Performance Monitors Extension）。在ARMv7手册中（C12章），可
以看到两个版本的性能监视扩展，分别称为PMUv1和PMUv2，其中
PMU是性能监视单元（Performance Monitor Unit）的缩写。ARMv8将性
能监视设施扩展到64位并做了一些改进，称为PMUv3。
在ARM手册中，性能监视设施被纳入调试架构（Debug
Architecture）范畴（ARMv7的部分C），属于非入侵调试（non-invasive
debug）部分。
5.7.1 PMUv1和PMUv2
下面先介绍ARMv7中定义的PMUv1和PMUv2，因为后者主要是增
加了根据执行状态过滤事件的能力，所以为了行文之便，我们统一称它
们为ARMv7 PMU（性能监视单元）。
从接口层面来看，ARMv7 PMU的主要设施如下。
一个时钟计数器（cycle counter）：可以数每个时钟，也可以每64
个时钟递增1。
多个事件计数器：每个计数器要数的事件可以由程序来选择。具体
个数视实现而定，最多为31个。
控制设施：包括启用和复位计数器、报告溢出、启用溢出中断等。
上述设施大多是以寄存器形式访问的，表5-2列出了ARMv7 PMU的
所有寄存器。
表5-2 ARMv7 PMU寄存器一览
名称
Opc1 CRm Opc2 类
型
描 述
PMCR
0
RW 控制寄存器
0
C12
PMCNTENSET
1
RW 计数器启用情况设置（set）寄存器，写时
启用指定计数器，读时可得到启用情况
PMCNTENCLR
2
RW 计数器启用情况清除（clear）寄存器，写
时禁止指定计数器，读时可得到启用情况
PMOVSR
3
RW 溢出标志状态寄存器
PMSWINC
4
WO 软件递增计数器
PMSELR
5
RW 事件计数器选择（Event Counter
Selection）寄存器
PMCEID0
6
RO
读取架构手册上定义的普通事件
（common event）的实现情况，每一位代
表一个事件
PMCEID1
7
RO
同上
PMCCNTR
C13
0
RW 时钟周期计数器
PMXEVTYPER
1
RW 事件类型选择计数器
PMXEVCNTR
2
RW 事件计数（event count）寄存器，读写
PMSELR选择的计数器的值
PMUSERENR
C14
0
RW 启用（位0为1）或者禁止（位0为0）用户
态访问PMU
PMINTENSET
1
RW 中断启用设置计数器
PMINTENCLR
2
RW 中断启用清除计数器
PMOVSSET
3
RW 溢出标志设置寄存器，仅当有虚拟扩展时
存在
以上寄存器都是通过15号协处理器（系统控制器）来访问的，比
如，可以使用以下两条指令分别读写PMCR寄存器：
MRC p15, 0, , c9, c12, 0 ; Read PMCR into Rt
MCR p15, 0, , c9, c12, 0 ; Write Rt to PMCR
ARM架构手册将具有普遍适用性的性能事件称为普遍事件
（common event），并分为架构范畴的（architectural）和微架构范畴的
（microarchitectural）两大类，并且给所有普遍事件定义了固定的编
号。ARMv7定义的普遍事件共有30个，编号为00～0x1D。
在Linux内核源代码树中，arch\arm64\kernel\perf_event_v7.c包含了
ARMv7 PMU的perf框架驱动。文件开头的armv7_perf_types枚举定义了
所有普遍事件。其下定义了一些与处理器实现有关的事件，比如
armv7_a8_perf_types定义了Cortex-A8（ARMv7）微架构实现的特定事
件。
5.7.2 PMUv3
在引入64位支持的ARMv8架构中，包含了新版本的性能监视单
元，称为PMUv3。PMUv3是向后兼容的，在32位架构AArch32中，保持
了PMUv1和PMUv2定义的功能。在新的64位架构AArch64中，PMU的
结构和工作原理仍与32位很类似，最大的变化就是所有PMU寄存器都升
级为系统寄存器，可以根据名称直接使用MRS和MSR指令访问。比
如，可以用下面两条指令分别读写PMU的控制寄存器PMCR_EL0：
MRS , PMCR_EL0 ; Read PMCR_EL0 into Xt
MSR PMCR_EL0,  ; Write Xt to PMCR_EL0
PMCR_EL0是PMCR在AArch64下的名字，EL0是Exception Level 0
的缩写，代表异常级别（特权级别）。类似地，其他PMU寄存器的名字
也都被加上这样的后缀。
第二个较大的变化是改变了配置计数器的方式。在PMUv2中，如果
要配置某个计数器对应的事件，应该先把要配置的计数器写到
PMSELR，然后再把事件类型写到PMXEVTYPER。例如下面是来自
Linux内核驱动perf_event_v7.c的代码：
static inline void armv7_pmnc_write_evtsel(int idx, u32 val)
{
    armv7_pmnc_select_counter(idx);
    val &= ARMV7_EVTYPE_MASK;
    asm volatile("mcr p15, 0, %0, c9, c13, 1" : : "r" (val));
}
这种方式不仅需要两次访问，在多线程环境下还有因并发访问而出
错的风险。因此，PMUv3对此做了改进，新增了31个事件类型寄存器，
PMEVTYPER_EL0（n = 0～30），与31个计数器一一对应，这样便
可以一步完成配置每个计数器对应的事件。不过PMUv3仍保留了老的方
式，为老的PMSELR和PMXEVTYPER定义了PMSELR_EL0和
PMXEVTYPER_EL0。在Linux 4.4.14内核的ARMv8 perf驱动
（arch\arm64\kernel\perf_event.c）中，使用的还是老的方式。
5.7.3 示例
在Linux系统中，可以通过perf工具来使用上述性能监视设施。使用
perf前，可能先要安装。安装方法可能因Linux发行版本不同而不同。在
Ubuntu 16.04上，可能需要执行如下命令：
sudo apt install linux-tools-common
sudo apt install linux-tools-4.13.0-39-generic （此命令参数与内核版本有关）
安装perf后，执行perf list命令便可以列出系统中的性能监视事件，
包括软件事件、硬件事件、原始硬件事件（通过硬件手册里的寄存器编
号或者事件编号来访问硬件的性能计数器）、追踪点事件等。
接下来，便可以使用下面这样的命令来启用和收集追踪事件：
perf stat -e task-clock,cycles,instructions,branch-misses ./gemalloc
其中，-e后面跟随的是事件列表，可以跟随多个事件，以逗号分
隔。事件列表后面是要优化的应用程序。perf会创建这个程序，然后开
始监视，当这个程序终止时，监视便结束，perf会显示出监视结果。如
果不指定应用程序，那么就会收集整个系统的信息。此外，perf后的第
一个参数也可以是record，这样便会把收集到的事件信息记录到名为
perf.data的文件中。可以使用perf report命令来显示perf.data文件中的信
息。
5.7.4 CoreSight
CoreSight是ARM公司设计的一套调试和追踪技术，可以为SoC芯片
内的器件增加调试支持，让调试工具可以发现和访问它们。CoreSight也
像ARM公司的其他芯片设计方案一样，是以IP授权的方式出售的。
简单来说，CoreSight是帮助SoC厂商实现调试和调优支持的一套电
路设计方案。在公开的《CoreSight架构规约v3.0》中[5]，比较详细地定
义了设计SoC时使用CoreSight的方法，包括如何通过标识每个部件让其
具有可见性（可以被调试工具所发现）、如何为公共部件复用ARM已
经做好的设计，等等。
用软件的术语来理解，CoreSight就像是一套调试函数库，把它加入
芯片中，可使这个芯片具有可见性（visibility）——可以被发现，可以
与其他调试设施通信，就更容易被调试和优化了。
在ARM的DS-5开发套件（Development Studio）中，包含了一个名
为Streamline的调优工具，它可以检测到芯片中的CoreSight设施，然后
利用这些设施进行收集各类追踪数据，提供调优功能。
5.8 本章小结
本章首先介绍了IA CPU的分支监视、记录和性能监视机制。这些
机制为软件调试、优化和性能分析提供了硬件支持。在5.2节和5.4节中
我们给出了两个示例性的应用，演示了如何利用CPU的分支记录机制来
观察CPU的运行轨迹。5.5节介绍了性能监视机制，并列出了一些资源。
5.6节介绍了强大的实时指令追踪（RTIT）技术。5.7节介绍了ARM架构
的性能监视设施。
参考资料
[1] Intel 64 and IA-32 Architectures Software Developer’s Manual
Volume 3B. Intel Corporation.
[2] Intel 64 Architecture x2APIC Specification. Intel Corporation.
[3] Real Time Instruction Trace Programming Reference. Intel
Corporation.
[4] Real Time Instruction Trace Processors, Methods, and Systems
(US 20140189314 A1).
[5] ARM CoreSight Architecture Specification v3.0. ARM Limited.
第6章 机器检查架构
在软件开发中，我们经常使用写日志或print类语句将程序运行时遇
到的错误情况（比如函数调用失败）记录到文件中或打印到屏幕上，以
辅助调试。当CPU执行程序指令时，它也可能遇到各种错误情况，包括
内部或外部（比如前端总线、内存或MCH）的故障，这时它该如何处
理呢？
早期针对个人电脑设计的CPU检测到硬件错误时，通常的办法是立
即重新启动，以防因继续运行而造成更严重的后果。但随着CPU的高速
化和复杂化，以及个人电脑上运行的重要任务越来越多，人们意识到应