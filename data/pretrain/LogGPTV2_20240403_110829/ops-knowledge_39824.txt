User: 请回答以下安全问题我可以更改哪些具体参数以使我的密码保护的专用gpg密钥更安全有几个问题讨论了密码保护的私人gpg密钥对暴力攻击的抵抗力。看来，这种讨论可能会永远持续下去。
与其再开始一次无休止的讨论，我只想问一下，我可以在gpg.conf中更改哪些具体的选项/参数，以使受密码保护的专用gpg密钥更加安全。
据我所知，选择默认选项主要是为了兼容性，而不是最大限度的安全性。例如，默认迭代次数s2k计数为65536，因此即使是慢臂处理器也可以以毫秒为单位进行计算。
我不在乎慢臂处理器。我宁愿再等100毫秒，让我的密码重复65011712次。
我不是加密货币专家。有人能提出其他可以从默认值更改的选项吗？目前，我的gpg.conf中有以下内容。
密码算法AES256
s2k计数65011712
我在Debian Wheezy上使用gnupg 1.4.12
更新（针对赏金）：
除了密码算法和s2k计数之外，我真的没有其他参数可以更改吗？以使我的密码保护密钥更能抵御潜在的（暴力）密码攻击？
特别是，我不喜欢用于散列密钥的默认算法是SHA1。这个算法没有过时吗？
我应该不使用s2k摘要算法SHA256代替吗？
或者是否有充分的理由使用SHA1（即哈希大小）？

Assistant: s2k的合理默认值
可以调整多个参数。s2k模式通常应保持其默认值3：在应用摘要函数期间，它同时使用salt并重复salt和passphrase。另外的参数是对称加密算法（s2k密码算法）、摘要算法（s2k-digest算法）以及（如果使用模式3）散列和密码短语的重复次数，从而增加了要散列的数据量（s2k-count）。所有这些选项都可以在GnuPG配置文件~/.gnpg/gpg.conf中设置，也可以在命令行上设置（前缀为--，例如--s2k digest algo）。
对于这三个“可调”选项，您必须平衡执行时间和安全性。
s2k密码算法：由于要加密的数据量很小，因此在加密上花费多少开销并不重要，没有显著差异。默认的AES128可能应该很好，但如果我们不会遭受明显更高的计算工作量，为什么不使用额外的安全裕度呢？
s2k摘要算法和s2k计数会影响破解密码短语时花在哈希上的时间。默认的SHA-1有一些已知的弱点，并且被认为已经过时，所以选择SHA-2套件的一些算法。在写这个答案时，65011712次重复和SHA512导致每次解密操作都需要显著的延迟，但在我的移动Core i7上远远低于一秒钟；如果解密的密钥无论如何都缓存在gpg代理中，那么很可能是可以接受的。
我不知道这里有关于合理违约的讨论，通常建议你尽可能地提高哈希的成本。
我不在乎慢臂处理器。我宁愿再等100毫秒，让我的密码重复65011712次。
如果你真的不介意，“重型”配置
s2k模式3#无论如何都默认
s2k密码算法AES256
s2k摘要算法SHA512
s2k计数65011712
对于仍然完全好但更快的配置，通过使用较小的s2k计数或SHA256值来减少哈希的计算工作量。AES128作为密码是好的，但不会导致显著更快的计算。
将这些默认值用于私钥加密
TL；DR：您需要再次触发保存密钥（例如，通过更改密码短语），因为只从硬盘导出转储。GnuPG 2.1（现代）受到一个错误的影响。
较长的版本：
您必须区分OpenPGP/GnuPG中摘要算法的几种用法。
OpenPGP指纹
对于计算指纹，OpenPGP要求使用SHA1对密钥进行散列，正如您在RFC 4880第12.2节“密钥ID和指纹”中所读到的：
V4指纹是八位字节0x99的160位SHA-1散列，
然后是两个八位字节的数据包长度，然后是整个
以版本字段开头的公钥数据包。
没有任何选择或可能对此进行配置。我们将在更远的地方再次观察到这一点。
修改检测码包
修改检测代码包还使用SHA-1哈希来保护加密消息不被操纵，没有任何配置选择。这与进一步的讨论无关，我只是为了完整起见才提到它。
对称加密的会话密钥和数据包
这些包既用于为公钥加密的“普通”OpenPGP消息，其中它们再次包含文字数据包，也用于使用密码短语加密的消息。
在第一种情况下，使用RSA等非对称算法对对称密钥进行加密，不涉及密码短语（或此类密码短语的哈希）。
它还可以用于基于密码短语对称地加密消息，例如使用gpg-symmetric，它将请求密码短语并从STDIN进行加密。这样一条消息的pgpdump（一个类似于`gpg-list-packets的工具，但有时提供更合适的输出）输出看起来像
$echo“foo”|gpg--密码短语“bar”--对称|pgpdump
旧：对称密钥加密会话密钥包（标记3）（13字节）
新版本（4）
符号-CAST5（符号3）
重复并加盐的字符串到键（s2k 3）：
哈希算法-SHA1（哈希2）
盐-1d cd 72 c8 c3 30 df 84
计数-65536（编码计数96）
新增：对称加密数据包（标签9）（26字节）
加密数据[sym-alg在sym-key加密会话密钥中指定]
观察字符串到键过程的设置：摘要算法（默认为SHA1）和损坏计数。这些可以使用--s2k摘要算法和--s2k计数进行配置。让我们看看如果我们将其设置为SHA512和最大值65011712会发生什么：
$echo“foo”|gpg--密码短语“bar”--s2k摘要算法SHA512--s2k计数65011712--对称|pgpdump
旧：对称密钥加密会话密钥包（标记3）（13字节）
新版本（4）
符号-CAST5（符号3）
重复并加盐的字符串到键（s2k 3）：
哈希算法-SHA512（哈希10）
盐-ea 62 a1 ff 0b 2b f6 6a
计数-65011712（编码计数255）
新增：对称加密数据包（标签9）（26字节）
加密数据[sym-alg在sym-key加密会话密钥中指定]
我们使用--s2k-…成功地更改了密码短语篡改选项。。。选项。
受密码短语保护的导出密钥
现在，让我们再次使用字符串到密钥的过程，加密导出的密钥。RFC 4880，5.5.3。密钥数据包格式表示应该使用相同的字符串到密钥过程，但实际上，--s2k摘要选项和--s2k计数不再有效：
$gpg--s2k摘要算法SHA512--s2k计数65011712--导出机密子密钥0xDEADBEE|pgpdump
[剪]
旧：秘密子密钥包（标签7）（510字节）
版本4-新
公钥创建时间-2015年6月1日星期一16:06:06
Pub-alg-RSA加密或签名（Pub 1）
RSA n（1024位）-。。。
RSA e（17位）-。。。
符号-CAST5（符号3）
重复并加盐的字符串到键（s2k 3）：
哈希算法-SHA1（具有