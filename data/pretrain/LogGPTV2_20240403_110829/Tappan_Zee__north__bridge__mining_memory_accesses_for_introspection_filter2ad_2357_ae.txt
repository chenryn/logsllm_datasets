faster (since it only needs to be invoked when the monitored
code is executed), it is insecure, unreliable, and not available
on every architecture. We hope to examine how existing so-
lutions such as compiler modiﬁcations [32, 8] or dynamic
binary translation [27] can be used to eﬃciently maintain
the shadow stack information needed for TZB. We also note
that Intel’s Haswell architecture, which as of this writing has
just been released, has hardware support for keeping track
of calls and returns [33]; this would provide an excellent base
on which to build a low-overhead security system based on
TZB tap points.
Code generated at runtime (i.e., JIT or injected code) may
make re-identiﬁcation of a discovered tap point diﬃcult or
even impossible. Given the rise of languages that depend on
JIT runtimes, better solutions are needed for this scenario,
and the problem of how to make use of tap points in JIT
code should be explored further.
Finally, as seen in Section 6.3, the clustering results are
promising, but not yet fully developed. We hope to gain a
better understanding of the data found in tap points and
seek out better features and models for clustering in future
work.
8. RELATED WORK
Although, to our knowledge, there is no existing work on
mining the contents of memory accesses for introspection,
we drew inspiration from a variety of sources. These can
be roughly grouped into three categories: work on automat-
ing virtual machine introspection, research on automated re-
verse engineering, and eﬀorts that examine memory access
patterns, typically through visualization. In this section, we
describe in more detail previous work in these three areas.
Virtual machine introspection has been targeted for au-
tomation by several recent research eﬀorts because of the
semantic gap problem: security applications running outside
the guest virtual machine need to reconstruct high-level in-
formation from low-level data sources, but doing so requires
knowledge of internal data structures and algorithms that
is costly to acquire and maintain. To address this problem,
researchers have sought ways of bridging this gap automati-
cally. Virtuoso [11] uses dynamic traces of in-guest programs
to extract out-of-guest tools that compute the same infor-
mation. However, because it is based on dynamic analysis,
incomplete training may cause the generated programs to
malfunction. Two related approaches attempt to address
this limitation: process out-grafting [30] moves monitored
processes to the security VM while redirecting their sys-
tem calls to the guest VM, allowing tools in the security
VM to directly examine the process, while VMST [12] se-
lectively redirects the memory accesses of tools like ps and
netstat from the security VM so that their results are ob-
tained from the guest VM. TZB extends these approaches
by ﬁnding points in applications and the OS at which to
perform active monitoring.
Based on the observation that memory accesses in dy-
namic execution can reveal the structure of data in memory,
several papers have proposed methods for automatically de-
ducing the structure of protocols [6, 19, 9], ﬁle formats [10,
20], and in-memory data structures [17, 28, 21]. One par-
848ticular insight we have drawn from this body of work is the
idea that the point in a program at which a piece of data
is accessed, along with its calling context, can be used as a
proxy for determining the type of the data. TZB leverages
this insight to separate out memory accesses into streams of
related data.
Finally, there has been some research on examining mem-
ory accesses made by a single program or a whole system,
typically using visualization. Burzstein et al. [5] found that
by visualizing the memory of online strategy games, they
could identify the region of memory used to decide how much
of the in-game map was visible to the player, which greatly
reduces the work required to create a “map hack” and al-
low the player to see the entire map at once. Outside the
academic world, the ICU64 visual debugger [22] allows users
to visualize and modify the entire memory of a Commodore
64 system, enabling a variety of cheats and enhancements
to C64 games. Although TZB does not use visualization,
it shares with this previous work the understanding that
memory accesses can be a rich source of information about
a running program.
9. CONCLUSION
In this paper we have presented TZB, a system that auto-
matically locates candidate memory accesses for active mon-
itoring of applications or operating systems. This is a task
that previously required extensive reverse engineering by do-
main experts. We have successfully used TZB to identify a
broad range of tap points, including ones to dynamically ex-
tract SSL keys, URLs typed into browsers, and the names
of ﬁles being opened. TZB is built atop the QEMU-based
PANDA platform as a set of plug-ins and its operation is
operating system and architecture agnostic, aﬀording it im-
pressive scope for application. This is a powerful technique
that has already transformed how the authors perform RE
tasks. By reframing a diﬃcult RE task as a principled search
through streaming data provided by dynamic analysis, TZB
allows manual eﬀort to be refocused on more critical and
less automatable tasks like validation.
Acknowledgments
This material is based upon work supported in part by the
National Science Foundation under grants no. CNS-1017265
and no. CNS-0831300, and the Oﬃce of Naval Research un-
der grant no. N000140911042. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reﬂect the
views of the National Science Foundation or the Oﬃce of
Naval Research.
10. REFERENCES
[1] Raspberry Pi: An ARM GNU/Linux box for $25.
http://www.raspberrypi.org/.
[2] D. Arthur and S. Vassilvitskii. k-means++: the
advantages of careful seeding. In Proceedings of the
ACM-SIAM symposium on Discrete algorithms, 2007.
[3] A. Banerjee, S. Merugu, I. S. Dhillon, and J. Ghosh.
Clustering with Bregman divergences. J. Mach. Learn.
Res., 6, Dec. 2005.
[5] E. Bursztein, M. Hamburg, J. Lagarenne, and
D. Boneh. OpenConﬂict: Preventing real time map
hacks in online games. In Proceedings of the IEEE
Symposium on Security and Privacy, 2011.
[6] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot:
automatic extraction of protocol message format using
dynamic binary analysis. In Proceedings of the ACM
conference on Computer and communications security,
2007.
[7] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: A
platform for in-vivo multi-path analysis of software
systems. ACM SIGARCH Computer Architecture
News, 39(1), 2011.
[8] T. Chiueh and F. Hsu. RAD: a compile-time solution
to buﬀer overﬂow attacks. In International Conference
on Distributed Computing Systems, 2001.
[9] W. Cui, J. Kannan, and H. J. Wang. Discoverer:
automatic protocol reverse engineering from network
traces. In Proceedings of the USENIX Security
Symposium, 2007.
[10] W. Cui, M. Peinado, K. Chen, H. J. Wang, and
L. Irun-Briz. Tupni: automatic reverse engineering of
input formats. In Proceedings of the 15th ACM
conference on Computer and communications security,
2008.
[11] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giﬃn, and
W. Lee. Virtuoso: Narrowing the semantic gap in
virtual machine introspection. In Proceedings of the
IEEE Symposium on Security and Privacy, May 2011.
[12] Y. Fu and Z. Lin. Space traveling across VM:
Automatically bridging the semantic-gap in virtual
machine introspection via online kernel data
redirection. In Proceedings of the IEEE Symposium on
Security and Privacy, May 2012.
[13] K. Gilbert. Hurricane sandy serves as lure to deliver
Sykipot. http:
//securityblog.verizonbusiness.com/2012/10/31/
hurricane-sandy-serves-as-lure-to-deliver-sykipot/.
[14] L. Hubert and P. Arabie. Comparing partitions.
Journal of Classiﬁcation, 2(1), 1985.
[15] J. Jarmoc. SSL/TLS interception proxies and
transitive trust. In Black Hat Europe, March 2012.
[16] S. Kullback and R. A. Leibler. On information and
suﬃciency. Annals of Mathematical Statistics, 22,
1951.
[17] J. Lee, T. Avgerinos, and D. Brumley. TIE: Principled
reverse engineering of types in binary programs. In
Network and Distributed System Security Symposium,
2011.
[18] J. Lin. Divergence measures based on the Shannon
entropy. IEEE Trans. Inf. Theor., 37(1), Sept. 2006.
[19] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic
protocol format reverse engineering through
context-aware monitored execution. In Network and
Distributed Systems Symposium, 2008.
[20] Z. Lin and X. Zhang. Deriving input syntactic
structure from execution. In Proceedings of the ACM
SIGSOFT International Symposium on Foundations
of software engineering, 2008.
[4] F. Bellard. QEMU, a fast and portable dynamic
[21] Z. Lin, X. Zhang, and D. Xu. Automatic reverse
translator. In USENIX Annual Technical Conference,
2005.
engineering of data structures from binary execution.
849In Network and Distributed System Security
Symposium, 2010.
[22] mathﬁgure. ICU64: Real-time hacking of a C64
emulator.
[23] Microsoft Corporation. EvtQuery function.
http://msdn.microsoft.com/en-us/library/
windows/desktop/aa385466(v=vs.85).aspx.
[24] T. M¨uller, F. C. Freiling, and A. Dewald. TRESOR
runs encryption securely outside RAM. In Proceedings
of the 20th USENIX conference on Security, 2011.
[25] B. D. Payne, M. Carbone, M. Sharif, and W. Lee.
Lares: An architecture for secure active monitoring
using virtualization. In IEEE Symposium on Security
and Privacy, 2008.
[26] D. Rumsfeld. DoD news brieﬁng - Secretary Rumsfeld
and Gen. Myers. February 2002.
[27] S. Sinnadurai, Q. Zhao, and W. Wong. Transparent
runtime shadow stack: Protection against malicious
return address modiﬁcations. http://citeseerx.ist.
psu.edu/viewdoc/summary?doi=10.1.1.120.5702,
2008.
[28] A. Slowinska, T. Stancescu, and H. Bos. Howard: A
dynamic excavator for reverse engineering data
structures. In Network and Distributed Systems
Symposium, 2011.
[29] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager,
M. G. Kang, Z. Liang, J. Newsome, P. Poosankam,
and P. Saxena. BitBlaze: A new approach to
computer security via binary analysis. In Information
systems security. 2008.
[30] D. Srinivasan, Z. Wang, X. Jiang, and D. Xu. Process
out-grafting: an eﬃcient “out-of-vm” approach for
ﬁne-grained process execution monitoring. In
Proceedings of the ACM conference on Computer and
communications security, 2011.
[31] H. Steinhaus. Sur la division des corp materiels en
parties. Bull. Acad. Polon. Sci, 1, 1956.
[32] Vendicator. Stack shield: A “stack smashing”
technique protection tool for Linux.
http://www.angelfire.com/sk/stackshield/.
[33] Z. Yan. perf, x86: Haswell LBR call stack support.
http://lwn.net/Articles/535152/.
APPENDIX
A. SAMPLE TAP POINT CONTENTS
Figure 4: Detail from rendering of Graphviz ﬁle cap-
tured from a FreeBSD boot tap point, apparently
depicting disk geometry
ot found, required by ‘‘dhclient’’nss_nis.so.1dhclientShar
ed object ‘‘nss_nis.so.1’’ not found, required by ‘‘dhclie
nt’’nss_files.so.1dhclientShared object ‘‘nss_files.so.1’’
digraph geom {
z0xc1d8de00 [shape=box,label=’’PART\nada0\nr#2’’];
z0xc1f4f640 [label=’’r1w0e0’’];
z0xc1f4f640 -> z0xc1e9eb00;
/sbin/in/bin/sh/bin/stt/sbin/sysctl/bin/ps/sbin/sysctl/sbi
n/rcorde/bin/cat/sbin/md/sbin/sysctl/sbin/sysctl/bin/ken/s
bin/dumpon/bin/ln/bin/ps/sbin/sysctl/sbin/sysctl/sbin/sysc
tl/sbin/sysctl/bin/ps/bin/dd/sbin/sysctl/bin/dat/bin/df/sb
/boot/kernel/kernel00000000-0000-0000-0000-000000000000000
00000-0000-0000-0000-00000000000000000000-0000-0000-0000-0
00000000000993c915d-3e9f-11e2-a557-525400123456993c915d-3e
9f-11e2-a557-525400123456/boot/kernel/kernel/boot/kernel/k
...
modulesoptions
ident
machine i386
cpu
cpu
cpu
I686_CPU
I586_CPU
I486_CPU
CONFIG_AUTOGENERATED
GENERIC
Here, we reproduce a selection of tap points from the same
cluster as dmesg and ﬁlename tap points.
/etc/rc.d/ipfw/etc/rc.d/NETWORKING/etc/rc.d/netwait/etc/rc
.d/mountcritremote/etc/rc.d/devfs/etc/rc.d/ipmon/etc/rc.d/
mdconfig2/etc/rc.d/newsyslog
r=/sNsnWs/fuiebu/ r=ceremdsecd_t_co_artpachg=tSooadSebaabf
/faa_N_=_peOfA=fA=feTr=tul.n=_eo/.b_Yt_vtectvifat=a=-sd_Ee
Ofu=u_0y:nF:tRseeeeEfciOtmdtuinlrlrrlpp/nppfpcepinl=l=.llN
lNlgllpl_.4l_l_2/l_l_22lileldlylo- 21laltlat=rrrsbgrskgni/
russian|Russian Users Accounts: :charset=KOI8-R:
lang=ru_RU.KOI8-R:
pyright=/etc/COPYRIGHT:
nv=MAIL=/var/mail/$,BLOCKSIZE=K,FTP_PASSIVE_MODE=YES:
:passwd_format=md5:
:welcome=/etc/motd:
:
:
:co
:sete
nss_compat.so.1dhclientShared object ‘‘nss_compat.so.1’’ n
FD
#!/bin/sh
#
# $FreeBSD: release/9.0.0/etc/rc.d/newsyslog 197947 2009-1
0-10 22:17:03Z dougb $
...
set_rcvar()
{
case $# in
0)
echo ${name}_enable
;;
1)
PARTada0r#2r1w0e0ada0r1w0e0err#0DISKada0r#1ada0p3r0w0e0err#0ada0p2r1w0e0err#0ada0p1r0w0e0err#0LABELada0p3r#3r0w0e0gptid/85a9469d-3e8f-11e2-80e5-525400123456r0w0e0err#0LABELada0p2r#3r0w0e0gptid/85a1fb05-3e8f-11e2-80e5-525400123456r0w0e0err#0LABELada0p2r#3r0w0e0ufsid/50bec59dcc135902r0w0e0err#0LABELada0p1r#3r0w0e0gptid/859ead5b-3e8f-11e2-80e5-525400123456r0w0e0err#0VFS(cid:1)s.ada0p2r#3r1w0e0DISKcd0r#1cd0r0w0e0err#0DEVgptid/85a9469d-3e8f-11e2-80e5-525400123456r#4r0w0e0DEVgptid/85a1fb05-3e8f-11e2-80e5-525400123456r#4r0w0e0DEVufsid/50bec59dcc135902r#4r0w0e0DEVgptid/859ead5b-3e8f-11e2-80e5-525400123456r#4r0w0e0DEVcd0r#2r0w0e0DEVada0p3r#3r0w0e0DEVada0p2r#3r0w0e0DEVada0p1r#3r0w0e0DEVada0r#2r0w0e0850