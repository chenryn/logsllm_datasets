翻译自：   
翻译：聂心明
# 休斯顿，我们有一个严重的安全问题
哎，对一个严重问题的大多数公众报道是这样的：“这里有一个严重的问题，你应该赶快去升级ASAS，否则你家小猫咪就会死掉了，你的灵魂将被放在山上燃烧。”  
如果你没有灵魂，也不在乎小猫，只要简单的把小猫换成“应用程序”，把“你的灵魂将被放在山上燃烧”换成“在凌晨4点钟打电话给正在休假的CEO”。  
这篇文章的目的是：
  * 帮助你复现 CVE-2017-5638 （  ）
  * 明白这次事件相关的技术，而不用成为一个安全专家
我个人只在Struts2 项目组中呆了几天，因此我对Struts 不是很熟悉
当一个漏洞被爆出的时候，首先关注的问题是：
  * 我是否被攻击？我是否应该关注此次事件？
  * 如果我被攻击了，漏洞被利用之后发生了什么？
首先，我们从读cve的数据库（  ）开始  
安全问题会提交给一个叫cve（公共漏洞和暴露）的数据库中，很多安全事件会引用这个这个里面信息。  
遇到漏洞首先要去查看这个漏洞的cvss（通用漏洞评分系统），它可以评估安全事件的严重程度。cvvs有10个等级，分数越高，影响越大。漏洞严重性要用cvss计算器（
 ）来计算评分。  
这个漏洞的cvss评分是10，所以这个漏洞可以让黑客rce。换句话说，黑客可以对能访问到的远程服务器执行任意代码。比如，攻击者可以反弹一个shell (
 )
,这样黑客不需要高级的黑客技术就可以得到一个服务器的console。  
当然，当在某个组件中发现漏洞的时候，必须快速的升级软件，以避免收到漏洞的攻击。升级，说起来简单，但是有时候做起来却很困难，比如，如果你依赖一个非常老的库，但是这个库已经不再被支持了，或者你的客户需要你手动操作才能升级。
# 分析
从cve和Struts 的描述中得知 S2-045 （
 ）& S2-046 （
 ）所需要的条件
  * 影响的版本是2.5.10
  * 2.5.10.1不被影响，而且这个漏洞已经被修复 
  * 是某种方式的错误和文件上传相关
  * 是一个远程命令漏洞
对比两个不同的版本，我们可以知道这个漏洞是怎样被修复的（
 ）  
在此刻，你应该能更准确的评估你是否受到影响，比如，如果你启用了详细类加载并且运行你的所有代码之后没有加载受影响的类，你可以说你没有受到此次事件的影响。  
回到代码，我们看到在FileUploadInterceptor.intercept(…)方法中只有几行的改变（
） 。第一眼看上去，明显已经没有什么东西了，这种漏洞很容易通过代码审查而不被注意到。  
这里还有一个可用的 metaspoilt模块 （ 
），这意味着我们可用直接利用它，而不需要明白它的原理。这非常有趣，除了总是使用别人的工具以外，你不会学到任何有价值的东西，只会利用这些东西就意味着你只是一个野外的脚本小子。
可用我们仍然会去借鉴这个漏洞的思路，让后面的路更好走。寻找漏洞是一项全职的工作。它需要时间，资源，远远超过我们这些普通开发者的预期的知识。  
换句话说，利用那些已经被前人发现的漏洞的时候，你获得了操纵星空的能力，但是失去了成为优秀天文学家的技能。  
多说无益，让我们看代码！  
我们不是Struts的专家，但是我们可以用一个简单的例子来开始。  
这里，有一个官方的”file-upload“的例子似乎可以拿来用一下。  
你可以使用git，maven和JDK去安装和运行它。
    git clone https://github.com/apache/struts-examples
    cd struts-examples/file-upload
不要管`pom.xml`中`struts2.version`直接添加``标签：
    2.5.10
把这个项目编译成maven app： `mvn clean install`  
这个简单的应用要用到Jetty 插件：`mvn jetty:run`  
现在你应该能打开`http://localhost:8080/file-upload/`了  
如果我们把Struts 的版本从2.5.10升级到2.5.10.1，我们可以用`mvn dependency:tree`，这个指令只改变struts-core
对于这个漏洞有两个很重要的点：
  * OGNL解析器被构造的HTTP头部注入
  * 被注入的表达式可以执行任意代码
OGNL ( 
)是一种基于表达式的语言，Struts 用它访问HTML模板中的对象，在一些场景中也可以执行代码。  
漏洞来自于这两个相互通信的部分，用户输入的直接被注入到OGNL解析器中，因此可以执行任意代码。
# 第一步：注入头部并且可以到达OGNL 解析器中
在这一步中，我们要找到能够触发漏洞的代码，这段代码现在已经被移除了： intercept(…) （
）函数 中的 LocalizedTextUtil.findText(…) （
）
    // intercept(...) method from Struts 2.5.10
    // https://github.com/apache/struts/blob/f0f4e9ece77000e0eb0071bf233ed4b9bc9c8205/core/src/main/java/org/apache/struts2/interceptor/FileUploadInterceptor.java#L264
        public String intercept(ActionInvocation invocation) throws Exception {
            ActionContext ac = invocation.getInvocationContext();
            HttpServletRequest request = (HttpServletRequest) ac.get(ServletActionContext.HTTP_REQUEST);
            if (!(request instanceof MultiPartRequestWrapper)) {
                if (LOG.isDebugEnabled()) {
                    ActionProxy proxy = invocation.getProxy();
                    LOG.debug(getTextMessage("struts.messages.bypass.request", new String[]{proxy.getNamespace(), proxy.getActionName()}));
                }
                return invocation.invoke();
            }
            ValidationAware validation = null;
            Object action = invocation.getAction();
            if (action instanceof ValidationAware) {
                validation = (ValidationAware) action;
            }
            MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) request;
            if (multiWrapper.hasErrors()) {
                for (LocalizedMessage error : multiWrapper.getErrors()) {
                    if (validation != null) {
                        validation.addActionError(LocalizedTextUtil.findText(error.getClazz(), error.getTextKey(), ActionContext.getContext().getLocale(), error.getDefaultMessage(), error.getArgs()));
                    }
                }
            }
            // ...
找到这个条件最方便的方法是用最自己喜欢的IDE去调试:
  * 使用`mvnDebug jetty:run`打开debug模式（它将在8000端口监听） 
  * 导入你的代码到IDE中，并且把远程调试端口附加到8000上。
  * 打开 `FileUploadInterceptor`类，并且要求你的IDE去下载Struts源代码
  * 在`intercept(...)`方法上下断点
  * 在app中触发上传，寻找能够执行到`findText(...)`的条件
经过不断的实验和报错，你应该找到触发漏洞的两个条件：
  * 你应该用multiple 上传文件，而不是multipart 上传
  * 你需要有一些错误：`MultiPartRequestWrapper.getErrors()`不是空的，它委托`MultipartRequest`来检索错误。
MultipartRequest 有两种实现形式，仅仅有一种添加了这种错误：它在`JakartaMultiPartRequest.parse(...)`
    public void parse(HttpServletRequest request, String saveDir) throws IOException {
            try {
                setLocale(request);
                processUpload(request, saveDir);
            } catch (FileUploadException e) {
                LOG.warn("Request exceeded size limit!", e);
                LocalizedMessage errorMessage;
                if(e instanceof FileUploadBase.SizeLimitExceededException) {
                    FileUploadBase.SizeLimitExceededException ex = (FileUploadBase.SizeLimitExceededException) e;
                    errorMessage = buildErrorMessage(e, new Object[]{ex.getPermittedSize(), ex.getActualSize()});
                } else {
                    errorMessage = buildErrorMessage(e, new Object[]{});
                }
                if (!errors.contains(errorMessage)) {
                    errors.add(errorMessage);
                }
            } catch (Exception e) {
                LOG.warn("Unable to parse request", e);
                LocalizedMessage errorMessage = buildErrorMessage(e, new Object[]{});
                if (!errors.contains(errorMessage)) {
                    errors.add(errorMessage);
                }
            }
        }
幸运的是（或者也是漏洞原理），当我们试图用OGNL 表达式注入HTTP头部的时候，因为Content-Type值是无效的导致错误被触发。  
方便的是，这里有一个简单简单的脚本可以让攻击者用curl触发这个漏洞。这个HTTP头部触发了漏洞，但是没有尝试RCE。
    #!/bin/bash
    header="%{('multipart/form-data')}"
    file1=$(tempfile)
    file2=$(tempfile)
    # we have to upload multiple files
    curl http://localhost:8080/file-upload/upload.action \
    -F upload=@${file1} \
    -F upload=@${file2} \