# The Unexpected Dangers of Dynamic JavaScript

**Authors:**
- Sebastian Lekies, Ruhr-University Bochum
- Ben Stock, Friedrich-Alexander-Universität Erlangen-Nürnberg
- Martin Wentzel, SAP SE
- Martin Johns, SAP SE

**Publication:**
Proceedings of the 24th USENIX Security Symposium, August 12–14, 2015, Washington, D.C.
ISBN 978-1-939133-11-3
Open access to the Proceedings is sponsored by USENIX.

**Abstract:**
Modern websites often generate JavaScript on-the-fly via server-side scripting, incorporating personalized user data. While cross-domain access to such sensitive resources is generally prevented by the Same-Origin Policy, the inclusion of remote scripts via the HTML script tag is exempt from this policy. This exemption allows an adversary to import and execute dynamically generated scripts while a user visits an attacker-controlled website. By observing the execution behavior and side effects, the attacker can leak private user data, leading to severe consequences ranging from privacy violations to full compromise of user accounts.

Although this issue, known as Cross-Site Script Inclusion (XSSI), has been recognized for several years, it has not been extensively analyzed in real-world web environments. To systematically investigate this issue, we conducted a study on 150 top-ranked domains. Our findings indicate that one-third of these sites use dynamic JavaScript, and over 80% are susceptible to attacks via remote script inclusion. Based on our study, we provide a secure and functionally equivalent alternative to the use of dynamic scripts.

## 1. Introduction

Since its inception in the early 1990s, the Web has evolved from a platform for publishing and linking static documents to a sophisticated environment for distributed web applications. This transformation was driven by two key technical advancements:

1. **Server-Side Code Generation:** Static HTML content was replaced by server-side scripting, enabling the dynamic composition of HTTP responses and the contained HTML/JavaScript. This shift transformed the Web from a document-centric medium into a versatile platform.

2. **Browser-Driven Front-Ends:** The Web browser has become a highly capable container for server-provided user interfaces and application logic. Thanks to the flexibility of HTML and the power of client-side JavaScript, the server can deliver rich, interactive user interfaces that rival desktop applications. Additionally, browser-based UIs enable easy integration of content from multiple sources using HTML's hypertext capabilities.

In recent years, there has been a shift from server-centric web applications to rich client-side applications, where a significant portion of the functionality is implemented in JavaScript within the user's browser.

As more functionality is moved to the client side, the need for JavaScript to access additional user data increases. One common technique is the generation of dynamic JavaScript, which incorporates user-specific data. This practice can be dangerous because the inclusion of script files is exempt from the Same-Origin Policy. An attacker-controlled webpage can import such a dynamically generated script and observe the side effects of its execution, potentially accessing sensitive user data. Although this attack, known as XSSI, has been mentioned in the literature, its prevalence in real-world web environments has not been thoroughly studied.

In this paper, we present the first systematic analysis of this vulnerability class and provide empirical evidence of its severity. We outline the general attack patterns and vectors, and report on an empirical study of several high-profile domains. Our findings show that many of these scripts are inadequately protected against XSSI attacks, with serious consequences including de-anonymization, targeted phishing attacks, and complete account compromise.

### Contributions:
- We detail various methods by which attackers can leak sensitive data via dynamically generated scripts, leveraging the scoping and dynamic nature of JavaScript.
- We report on the results of an empirical study of several high-ranked domains, investigating the prevalence of dynamic scripts.
- Using the data collected, we demonstrate that many dynamic scripts are not properly protected against XSSI attacks and present real-world exploitation scenarios.
- Based on the observed purposes of dynamic scripts, we discuss secure alternatives to their use.

## 2. Technical Background

### 2.1 The Same-Origin Policy (SOP)
The SOP is the primary security policy in web browsers, ensuring that mutually distrusting web content is strongly separated through origin-based compartmentalization. A given JavaScript can only access resources with the same origin, defined by the scheme, host, and port. However, the SOP does not apply to the cross-domain inclusion of web content using HTML tags. For example, the HTML `script` tag can reference external script resources, and the request to retrieve the script carries authentication credentials, such as cookies.

### 2.2 JavaScript Language Features
- **Scoping:** JavaScript uses function scoping, where a new scope is created for each function. Variables defined within a function are local to that scope, while variables defined outside any function are global.
- **Prototype Chain:** JavaScript is a prototype-based language, where objects inherit properties from other objects through a prototype chain. When a property is accessed, the JavaScript runtime checks the current object and its prototypes recursively.

## 3. Cross-Domain Data Leakages

### 3.1 Dynamic Scripts
Web pages can use `script` tags to import JavaScript resources. A dynamic script is one generated by the server on-the-fly, often containing user-specific data. If such a script is executed in an authenticated session, it may expose sensitive information.

### 3.2 Attack Method
HTML `script` tags are not subject to the SOP. An attacker can include a dynamic script in a cross-domain webpage, causing the browser to load and execute the script in the context of the attacker's page. The attacker can then observe the script's behavior and access any exposed sensitive data.

### 3.3 Attack Vectors
- **Global Variables:** Sensitive data assigned to global variables in a dynamic script can be accessed by other scripts on the same page.
- **Redefinition of Global APIs:** Due to JavaScript's dynamic nature, an attacker can overwrite globally available functions to intercept sensitive data passed to them.

## 4. Empirical Study and Analysis

We conducted a study on 150 top-ranked domains to investigate the prevalence of dynamic scripts and their susceptibility to XSSI attacks. Our findings show that one-third of the surveyed sites use dynamic JavaScript, and over 80% are vulnerable to attacks. We also provide real-world exploitation scenarios to demonstrate the severity of these vulnerabilities.

## 5. Secure Alternatives

Based on our observations, we propose secure and functionally equivalent alternatives to the use of dynamic scripts. These alternatives aim to prevent the leakage of sensitive data while maintaining the desired functionality.

## 6. Related Work

We review related work on web security and XSSI, highlighting the contributions and limitations of previous studies.

## 7. Outlook

We discuss future research directions and potential improvements in web security practices to mitigate the risks associated with dynamic JavaScript.

## 8. Conclusion

This paper provides a comprehensive analysis of the unexpected dangers of dynamic JavaScript and offers practical solutions to address these vulnerabilities. By understanding and mitigating the risks, we can enhance the security of web applications and protect user data.