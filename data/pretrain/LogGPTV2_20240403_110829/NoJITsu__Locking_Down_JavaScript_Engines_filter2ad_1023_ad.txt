and instrument all functions in the garbage collection scope
that have at least one memory write.
D. Feedback-Driven Object Protection
Our fault-based dynamic analysis framework can be used to
incorporate a feedback loop from alpha testers. This feedback
loop can supplement the coverage of our dynamic analysis
based on a predeﬁned set of test cases. To this end, we
enforce non-writable permission for JavaScript objects with
appropriate permission changes for known, legitimate write
accesses such that a new write access to an object will trigger
a segmentation fault. Our signal handler will catch the fault and
record the function information in the same way described in
Section IV-C2. This recorded information will be fed into the
continuous integration system such that the next alpha release
will grant the object write accesses discovered in the previous
cycle. In beta and stable releases (after ﬁnishing alpha testing),
the fault handler will be disabled and any unknown object
write access will be considered as a potential vulnerability
or malicious behavior; our protected JavaScript engine will,
therefore, immediately terminate the program execution for
such an unknown access.
E. Optimization
With the MPK support, one can change access permission
for a protection domain by simply updating the PKRU register.
Writing to a PKRU register can take around 20 cycles or
more [47], [63]. While this is much more efﬁcient than calling
the mprotect system call, updating a PKRU register can still
incur high performance overhead if the permission needs to
change frequently. In our design, we grant write permission
for a protection domain only within accessor functions which
have legitimate write accesses to JavaScript objects. These
accessor functions are frequently invoked to update an object
value and to maintain inlined object metadata required for
garbage collection and optimizations. The performance impact
of the PKRU register update can be ampliﬁed especially
when the accessor functions are called within a small yet
frequently executed code region, such as a small
loop or
a constructor/destructor function. We therefore optimize the
number of run-time permission changes by hoisting the PKRU
update instructions out of such a small code region. To do
so, we ﬁrst ﬁnd the functions that are potentially involved in
frequent permission changes and hoist the permission changes
to parent functions in the call graph. Note that we implement
our hoisting optimization only for primitive data objects so
that the security guarantee for sensitive data objects is not
diminished. Our proposed optimizations signiﬁcantly reduce
the number of redundant protection changes, and thereby
minimize the performance impact of our protected JavaScript
engine (see Section V-C).
1) Code Example: We show a code example that can
highly beneﬁt from our optimization. In Listing 4, a function
init initializes static strings in SpiderMonkey. This function
consists of three loops and each of them has two function
calls. The called functions are used to create and initialize
string objects, which means they have to call some of the
accessor functions to update an object. Since these functions
are executed within the loops, there will be many permission
bool StaticStrings::init(JSContext* cx) {
...
AutoAtomsCompartment ac(cx, lock);
...
saved_pkru = set_pkru(W,key)
for(uint32_t I= 0 ; I 
morphAtomizedStringIntoPermanentAtom(hash);
}
for(uint32_t I= 0 ; I 
morphAtomizedStringIntoPermanentAtom(hash);
}
for(uint32_t I= 0 ; I 
morphAtomizedStringIntoPermanentAtom(hash);
}
recover_pkru(saved_pkru)
...
}
Listing 4: Example: Redundant calls
changes, leading to high performance overhead. We can reduce
this overhead by hoisting the write permission changes out of
the loops.
(cid:40)1
(cid:80) score of called function
number of function calls
Score =
if accessor function,
otherwise.
(1)
2) Selecting Hosting Targets: We introduce a heuristic that
determines where to hoist PKRU register updates. Consider a
call graph where the root represents the main function and at
the ends of the graph are accessor functions. Intuitively, if we
insert the PKRU update instructions at the accessor functions,
the attack window will open only for this small code region,
but executing these extra instructions at this small code region
is relatively costly. If we, on the other hand, put the PKRU
updates at the root of the graph, the performance impact will
be almost diminished, but it will turn most of the code into
the attackable window.
Our heuristic therefore aims to ﬁnd functions that, when we
put a PKRU update instructions, have less performance impact
while opening only a limited amount of attack window. To
implement the heuristic, we ﬁrst extract the global call graph
of SpiderMonkey by means of LLVM’s call graph analysis.
Then, we score each function based on the probability that the
function can eventually reach any of the accessor functions.
(see Equation 1).
We demonstrate how we score each function in Figure 8,
where each node represents a function. We assign every acces-
sor function with score 1, the highest score in our metric. Func-
tions without a direct write access to the protected region are
assigned the average score of their child nodes, i.e., the callee
functions. We use the Bellman-Ford algorithm to traverse the
call graph and calculate the scores of each function based on
our metric. In the example shown in Figure 8, functions D, F,
and G are accessor functions and thus their scores are set to 1.
The scores of functions E, and H become 0, on the other hand,
10
of their callees by default, while the protected functions are
called only at the selected call sites. In Figure 8, for example,
the protected version of function A calls the legacy versions
of functions B and C which also call the legacy versions of
their callees.
V. EVALUATION
In this section we evaluate the security and performance
of NOJITSU in detail.
A. Security
The main goal of NOJITSU is to allow ﬁne-grained mem-
ory permission management throughout the JavaScript engine
at run time to protect against a wide range of memory-
corruption-based exploits, such as code-injection, code-reuse,
and data-only attacks. One of our key techniques to achieve
this goal
is to rigorously reduce the memory-access per-
missions of the engine’s components to the bare minimum.
As illustrated in Table III,
the default access permissions
are locked down signiﬁcantly within NOJITSU for each of
the components we identiﬁed in Section II-B. However, to
retain compatibility and interoperability of these components
within SpiderMonkey’s legacy code base, we automatically
instrument the respective code locations to allow non-default
access permissions in a ﬁne-grained manner temporarily. In the
following, we evaluate the temporal granularity of our instru-
mentation. Furthermore, we verify the quality and coverage
of our dynamic analysis that drives our instrumentation. We
then subject our NOJITSU prototype to a number of real-world
exploits, analyzing the effectiveness of our achieved protection
in detail.
1) Approaching Minimal Access Requirements: We ran
SpiderMonkey’s built-in test suite containing more than 6,000
test scripts to drive our dynamic analysis. After we identiﬁed
all code locations requiring access to sensitive JavaScript
objects, we added the instrumentation code to enable ac-
cess permissions where necessary. Our code transformations
are similar to the ones described in Listing 2. We insert
set_pkey and recover_pkey calls on a per-function
basis. Thus, once the instrumentation code grants a function
write access to a particular type of object, the function retains
this access until it returns.
We made this design choice for two reasons. First, many
of those functions issue multiple write operations to the
respective objects. Therefore, changing protection in between
those operations would often result in redundant permission
changes. Second, the size of native functions operating on
data objects is comparatively small, and hence, the instruction
window within which access is enabled unnecessarily is also
small.
To gauge the extent
to which our defense limits the
attacker’s capability to corrupt JavaScript objects, we analyzed
all functions that require write access to primitive and/or
sensitive JavaScript objects. We also considered the types of
the write accesses. Table I shows the results of our analysis.
The single write row refers to functions in which the sensitive
accesses are limited to regular MOV instructions that access
a single memory location. The block write row refers to
functions that can overwrite multiple memory locations using
Fig. 8: Example call graph and scores for each node. The
example is based on our heuristic to determine nodes to insert
permission changes.
because they are neither accessor functions nor do they have
a child node. The scores for the other functions such as A, B,
and C are calculated by our metric. Based on the calculated
scores, we select functions over a certain threshold to insert
protection changes. The threshold is a tunable parameter that
adjusts the trade-off between security and performance. In our
experiment, we determine the threshold as 0.15 which incurs
low performance overhead while less than 1% of the functions
are additionally open for write accesses.
3) Permission Change Insertion: After selecting the func-
tions to insert protection changes, we identify locations to
which we will
insert write permission changes. We could
simply insert permission changes around all basic blocks that
require the write permission. However, doing so may lead to
frequent permission changes if multiple basic blocks require
the write permission. Instead, we insert a permission change at
the basic block that dominates all the legitimate write accesses.
To this end, we perform the dominator analysis inside the
target function. First, we ﬁnd all basic blocks that can possibly
visit accessor functions. We then ﬁnd the nearest common
dominator (NCD) of the basic blocks and insert set_pkey
at the NCD. This will grant the write permission (to primitive
objects) for all the basic blocks reachable from the dominator
until the control ﬂow reaches recover_pkru to strip the
write permission. We insert recover_pkru into dominance
frontiers of the NCD to prevent any of the basic blocks that
are not dominated by the NCD from acquiring the write
permission. In this way, we allow the write permission only
for the limited number of basic blocks, without introducing
excessive permission changes within a function.
4) Removing Redundant Calls: Accessor functions are by
default instrumented with the write permission changes. After
hoisting these permission changes to different functions, we
need to remove redundant permission changes in the acces-
sor functions. Removing such redundant permission changes
from accessor functions is challenging: a particular accessor
functions can also be invoked by any other functions to which,
based on the scores, no protection changes have been added.
We address this by maintaining two versions of a function: one
with the protection changes (protected) and one without the
instrumentation (legacy). We instrumented protected functions
so that they always call the legacy versions of their callees
to avoid redundant permission changes. Callsites in legacy
functions are also instrumented so they call legacy versions
11
Function AScore: 0.58ProtectedLegacyFunction BScore: 0.5Function CScore: 0.66Function DScore: 1Function EScore: 0Function FScore: 1Function GScore: 1Function HScore: 0TABLE I: Percentage of the functions that need write permis-
sions
Primitive obj
Sensitive obj
Both obj
Total
Single write
Block write
Total
0.09%
0.04%
0.13%
0.16%
0.02%
0.18%
0.05%
0.01%
0.06%
0.29%
0.07%
0.36%
TABLE II: Percentage of the write instructions executed in the
write window of primitive objects, sensitive objects, or both
Primitive obj
Sensitive obj
Both obj
Total
Single write
Block write
Total
Single write (Opt.)
Block write (Opt.)
Total (Opt.)
11.11%
0.68%
11.79%
13.08%
0.86%
13.94%
3.29%
0.19%
3.48%
2.86%
1.72%
4.58%
1.26%
0.13%
1.39%
2.45%
0.43%
2.88%
15.66%
1.00%
16.66%
18.39%
3.01%
21.40%
memcpy-like instructions such as REP MOVSB. We deem
these block writing functions more dangerous than single
writing instructions as they are more susceptible to overﬂow
attacks. Overall, the results are encouraging. Only a small
fraction of all functions (0.36%) contain write operations
targeting primitive and/or sensitive JavaScript objects.
Since our instrumentation operates at function granularity,
it can sometimes leave sensitive JavaScript objects exposed to
instructions that would not access these objects in memory-
safe executions of the JavaScript engine. We extended our
dynamic analysis and set up an experiment to measure how
many extra instructions unnecessarily obtain write access to
JavaScript objects. Concretely, we measured the total dynamic
write instruction count while running the test suite and looked
at the fraction of the write instructions that were unnecessarily
in the write window. The upper half of Table II shows the
results of the analysis. Here, we can see that 11.79% of
the write instructions were executed while write access to
the primitive JavaScript object domain was enabled, whereas
3.48% executed while access to the sensitive object domain
was enabled. An additional 1.39% executed while both do-
mains were accessible. In total, 16.66% of the executed write
instructions had access to one or both domains. While this
represents a large fraction of the execution, only 1% of the in-
structions in the write window were block writing instructions.
We can,
therefore, conclude that our defense substantially