between t1 and t2, t4 when executing t1 since t2 and t4
will always be executed afterwards. As another example,
let us consider the enabling condition for the authorization
constraint on t2: besides requiring that u has the right to
execute t2 (i.e. at2(u)), we also need to require the SoD
constraints with t1 and t3 (not that with t5 since this will
be executed afterwards), i.e. that u has executed neither
t1 (i.e. ¬ht1(u)) nor t3 (i.e. ¬ht3(u)). The authorization
constraints on the other tasks are modeled in a similar way.
Table 1 shows the formalization of all transitions in the
extended Petri net of Figure 2. The ﬁrst column reports
the name of the transition together with the fact that it is
dependent on the user u taking the responsibility of its ex-
ecution. The second column shows the enabling condition
divided in two parts: CF, pertaining to the execution con-
straints, and Auth, to the authorization constraints. The
third and last column list the eﬀects of the execution of the
transition again divided in two parts: CF, for the workﬂow,
and Auth, for the authorization.
The initial state of the security-sensitive workﬂow is de-
scribed by the initial formula
p0 ∧ (cid:94)
¬pi ∧ (cid:94)
¬dti ∧ (cid:94)
∀u.¬hti(u)
(1)
i=1,...,7
i=1,...,5
i=1,...,5
saying that there is just one token in p0, no task has been ex-
ecuted, and indeed no user has yet executed any of the tasks,
whereas a state of a terminating execution of the workﬂow
by the goal or ﬁnal formula
p7 ∧ (cid:94)
¬pi ∧ (cid:94)
dti
(2)
i=0,...,6
i=1,...,5
saying that there is just one token in p7 and all the tasks
have been executed.
Formally, the way in which we specify the transition sys-
tems corresponding to security-sensitive workﬂows can be
seen as an extended version of the assertional framework
proposed in [22]. We emphasize that obtaining, from the
extended BPM notation of Figure 1, the symbolic represen-
tation S of the initial and goal formulae with that of the
transitions in Table 1 is a fully automated process.
Exploring the search space. After obtaining the sym-
bolic representation of the initial and goal states together
with the transitions of the security-sensitive workﬂow, we
invoke a symbolic model checker in order to compute the
symbolic representation R of the set of (reachable) states
visited while executing all possible sequences of transitions
leading from an initial to a goal state. A crucial assumption
of our approach is that the model checker is able to compute
Figure 3: Graph-like representation of the set of
reachable states for the workﬂow in Figure 1
R for any ﬁnite number of users. By doing this, the interface
functions at’s can be instantiated with any policy P , i.e. con-
taining any number of users. As a consequence, changes in
the authorization policy do not imply to re-run the oﬀ-line
phase. In summary, our goal is to compute a parametric—in
the number n of users—representation of the set of states
visited while executing all possible terminating sequences of
transitions. From now on, we write Rn to emphasize this
fact.
Although the computation of Rn seems to be a daunting
task, there exist techniques available in the literature about
parameterized model checking (see the seminal paper [1])
that allow us to do this. Among those available, we have
chosen the Model Checking Modulo Theories approach pro-
posed in [16] for it uses ﬁrst-order formulae as the symbolic
representation of transition systems and the availability of
tools, such as mcmt [17], which are capable of returning the
set of reachable states as a ﬁrst-order formula.
For instance, Figure 3 shows a graph-like representation of
the formula Rn for the security-sensitive workﬂow described
by the symbolic transition system derived from Figure 1.
Each node is associated to a ﬁrst-order formula: node 0 (bot-
tom of the ﬁgure) is labeled by the goal formula (2), nodes
17–26 (top of the ﬁgure) are labeled by formulae describing
sets of states that have non-empty intersection with the set
of initial states characterized by the initial formula (1), all
other nodes (namely, those from 1 to 16) are labeled with
formulae describing sets of states that are visited by execut-
ing transitions (labeling the arcs of the graph) belonging to
a terminating sequence of executions of the workﬂow. For
instance, node 1 is labeled by the formula
¬p0 ∧ ¬p1 ∧ ¬p2 ∧ ¬p3 ∧ p4 ∧ p5 ∧ p6 ∧
dt1 ∧ dt2 ∧ dt3 ∧ dt4 ∧ ¬dt5 ∧
(at5(u1) ∧ ¬ht2(u1) ∧ ¬ht3(u1))
describing the set of states from which it is possible to reach
a goal state when some user u1 takes the responsibility to
01t5(u1)2t2(u2)3t3(u2)4t4(u1)5t4(u2)6t2(u2)7t3(u2)8t3(u3)9t4(u2)10t4(u3)11t4(u2)12t4(u3)13t3(u3)14t3(u3)15t2(u3)16t4(u4)17t1(u3)18t1(u4)19t1(u1)20t1(u3)21t1(u4)22t1(u1)23t1(u4)24t1(u1)25t1(u3)26t1(u5)execute task t5. The ﬁrst two lines in the formula above
require that there is a token in places p4, p5, p6 (thereby
enabling transition t5), tasks t1, t2, t3, t4 have been exe-
cuted, and t5 has not yet been performed. The last line
requires that user u1 has the right to execute t5 and that
he/she has performed neither t2 nor t3 (because of the SoD
constraints between t5 and t2 or t3). In general, let us con-
t(u)−→ ν(cid:48) in the graph of Figure 3: the formula
sider an arc ν
labeling node ν describes the set of states from which it is
possible to reach the set of states described by the formula
labeling node ν(cid:48) when user u executes task t. Thus, the
paths starting from one of the nodes 17–26 (labeled by for-
mulae representing states with non-empty intersection with
the set of initial states) and ending in node 0 (labeled by the
goal formula) describe all possible terminating executions of
the workﬂow in Figure 1 (although nodes 5, 7, 10 and 12
seem to be exceptions, this is not the case: explaining their
role requires a more precise description of how the graph
is built and will be discussed in the next section). For in-
stance, the sequence of blue nodes describes the terminating
sequence t1, t3, t4, t2, t5 of task executions by the users u3,
u3, u2, u2, and u1, respectively. It is easy to check that this
sequence satisﬁes both the execution and the authorization
constraints required by the workﬂow in BPM notation of
Figure 1. In fact, t1 is executed ﬁrst, t5 is executed last,
and t2, t3, t4 are executed in between; there are three dis-
tinct users u1, u2, u3 that can execute the ﬁve tasks without
violating any of the SoD constraints. By considering all pos-
sible paths in the graph of Figure 3, it is easy to see that
there should be at least three distinct users to be able to
terminate the security-sensitive workﬂow in Figure 1. From
what we said above, the formula Rn representing the set of
states visited during terminating sequences of task execu-
tions of the security-sensitive workﬂow in Figure 1 can be
obtained by taking the disjunction of the formulae labeling
the nodes in the graph of Figure 3 except for the one labeling
node 0 since, by construction, no task is enabled in the set
of states represented by that formula. Let rν be the formula
labeling node ν, then
Rn :=
rν
(3)
(cid:95)
ν∈N
where N is the set of nodes in the graph (in the case of
Figure 3, we have N = {1, ..., 26}).
2.2 On-line phase
Once mcmt has returned the ﬁrst-order formula Rn de-
scribing the set of states visited during any terminating exe-
cutions for a (ﬁnite but unknown) number n of users, we
can derive a Datalog [10] program which constitutes the
run-time monitor of the security-sensitive workﬂow formal-
ized by the symbolic transition system used to compute Rn.
Then, we can add the speciﬁcation of the interface functions
at1, ..., at5 for a given value of n.
We have chosen Datalog as the programming paradigm in
which to encode monitors for three main reasons. First, it is
well-known [18] that a wide variety of access control policies
can be easily expressed in Datalog. Second, Datalog per-
mits eﬃcient computations: the class of Datalog programs
resulting from translating formulae Rn permits to answer
queries in LogSpace (see below for more details). Third, it is
possible to further translate the class of Datalog programs
we produce to SQL statements so that run-time monitors
can be easily implemented as database-backed applications.
In the rest of this section, we describe how it is possible to
derive Datalog programs from formulae describing the set of
reachable states computed by the model checker and then
how to add the deﬁnitions of the interface functions at1, ...,
at5.
From Rn to Datalog. Recall the form (3) of Rn. It is not
diﬃcult to see that each rν can be seen as the conjunction of
a formula rCF
containing the Boolean functions p0, ..., p7 for
places and dt1, ..., dt5 keeping track of task execution with a
formula rAuth
ν
ν
of the form
at(u0) ∧ ρAuth
ν
(u0, u1, ..., uk)
ν
where u0 identiﬁes the user taking the responsibility to ex-
ecute task t, ρAuth
is a formula containing the variables
u0, u1, ..., uk, the interface functions at1, ..., at5, the history
functions ht1, ..., ht5, and all disequalities between pairwise
distinct variables from u0, u1, ..., uk (indeed, if there are no
variables, there is no need to add such disequalities). For in-
1 ∧ rAuth
stance, formula r1 labeling node 1 in Figure 3 is rCF
where
1
rCF
1
:= ¬p0 ∧ ¬p1 ∧ ¬p2 ∧ ¬p3 ∧ p4 ∧ p5 ∧ p6 ∧
dt1 ∧ dt2 ∧ dt3 ∧ dt4 ∧ ¬dt5
rAuth
1
ρAuth
ν
(u1)
1
:= ρAuth
:= at5(u1) ∧ ¬ht2(u1) ∧ ¬ht3(u1)
(u1)
with u0 renamed to u1.
In general, each rν in the expression (3) for the formula
Rn can be written as
ν ∧ at(u0) ∧ ρAuth
rCF
ν
(u0, u1, ..., uk)
(4)
and describes a set of states in which user u0 executes task
t while guaranteeing that the workﬂow will terminate since
ν is one of the nodes in the graph computed by the model
checker while generating all terminating sequences of tasks.
In other words, (4) implies that u0 can execute task t or,
equivalently written as a Datalog clause: can do(u0, t) ←
(4), where can do is a Boolean function returning true iﬀ
a user (ﬁrst argument) is entitled to execute a task (second
argument) while all execution and authorization constraints
are satisﬁed and the workﬂow can terminate. Notice that
can do(u0, t) ← (4) is a Datalog clause. So, we generate the
following Datalog clauses
ν ∧ at(u0) ∧ ρAuth
can do(u0, t) ← rCF
for each ν ∈ N .
In the following, let Dn be the Datalog
program composed of all the clauses of the form (5). For
instance, the Datalog clause corresponding to node 1 is
can do(u1, t5) ← ¬p0 ∧ ¬p1 ∧ ¬p2 ∧ ¬p3 ∧ p4 ∧ p5 ∧ p6 ∧
(u0, u1, ..., uk)
(5)
ν
dt1 ∧ dt2 ∧ dt3 ∧ dt4 ∧ ¬dt5 ∧
at5(u1) ∧ ¬ht2(u1) ∧ ¬ht3(u1) .
It is not diﬃcult to show that can do(u, t) iﬀ there exists
a disjunct of the form (4) in Rn for a given number n of
users. Finally, observe that clauses of the form (5) contain
negations but are non-recursive.
Specifying the policy P . We are left with the problem
of specifying the access control policy P for a given number
n of users. As already observed above, there should be at
least three distinct users in the system to be able to ter-
minate the execution of the workﬂow in Figure 1.
So, to
illustrate, let U = {a, b, c} be the set of users and use the
RBAC model to express the policy. This means that we have
a set R = {r1, r2, r3} of roles which are indirections between
users and (permissions to execute) tasks. Let UA = {(a, r1),
(a, r2), (a, r3), (b, r2), (b, r3), (c, r2)} be the user-role assign-
ments and TA = {(r3, t1), (r2, t2), (r2, t3), (r1, t4), (r2, t5)}
be the role-task assignment. Then, a user u can execute
task t iﬀ there exists a role r such that (u, r) ∈ UA and (r,
t) ∈ TA. This can be formalized by the following Datalog
clauses: