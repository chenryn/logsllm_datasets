# [⁠]{#config_file.html#lvm_conffiles}B.1. LVM 配置文件 {.title}
:::
::: para
以下是用于 LVM 配置的文件：
:::
::: variablelist
[/etc/lvm/lvm.conf]{.term}
:   ::: para
    由工具读取的中央配置文件。
    :::
[etc/lvm/lvm\_*hosttag*.conf]{.term}
:   ::: para
    对于每个主机标签，如果存在额外的额外配置文件
    `lvm_hosttag.conf`{.filename}，就会读取它。如果该文件定义了新标签，那么会另将配置文件附加在要读取的文件列表中。有关主机标签的详情，请参考
    [第 C.2 节 "主机标签"](#lvm_tags.html#host_tags){.xref}。
    :::
:::
::: para
除 LVM 配置文件外，运行 LVM 的系统还包含以下可影响 LVM 系统设置的文件：
:::
::: variablelist
[/etc/lvm/cache/.cache]{.term}
:   ::: para
    设备名称过滤器缓存文件（可配置）。
    :::
[/etc/lvm/backup/]{.term}
:   ::: para
    自动卷组元数据备份目录（可配置）。
    :::
[/etc/lvm/archive/]{.term}
:   ::: para
    自动卷组元数据归档目录（可根据目录路径和归档历史记录途径进行配置）。
    :::
[/var/lock/lvm]{.term}
:   ::: para
    在单一主机配置中，这是可防止平行工具运行时破坏元数据的锁定文件；而在集群中，这是在集群范围内使用的
    DLM。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#config_file.html#lvm_dumpconfig}B.2. `lvm dumpconfig`{.command} 命令 {.title}
:::
::: para
可使用 `lvm`{.command} 命令的 `dumpconfig`{.option} 选项显示当前 LVM
配置或将该配置保存为一个文件。`lvm dumpconfig`{.command}
命令有不同的功能，如下所述：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    可转储与任意标签配置文件合并的当前 lvm 配置。
    :::
-   ::: para
    可转储所有与默认值不同的当前配置设定值。
    :::
-   ::: para
    可在具体 LVM 版本转储所有在当前 LVM 版本中引进的新配置设定。
    :::
-   ::: para
    可转储所有可修改配置设定，可以是整个配置，也可以是独立的命令或元数据配置。有关
    LVM 配置文件的详情，请查看 [第 B.3 节 "LVM
    配置文件"](#config_file.html#lvm_profiles){.xref}。
    :::
-   ::: para
    可以只为 LVM 的具体版本转储配置设定。
    :::
-   ::: para
    可验证当前配置。
    :::
:::
::: para
有关支持功能的完整列表及指定 `lvm dumconfig`{.command}
选项的信息，请查看 `lvm-dumpconfig`{.command} man page。
:::
:::
::: section
::: titlepage
# [⁠]{#config_file.html#lvm_profiles}B.3. LVM 配置文件 {.title}
:::
::: para
LVM
配置文件是一组用来在不同环境或使用情况下形成某些特征的可自定义配置设定。通常配置文件的名称就可以体现其环境或使用情况。LVM
配置文件覆盖现有配置。
:::
::: para
LVM 可识别两组 LVM 配置文件：*命令*配置文件和*元数据*配置文件。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    命令配置文件是用来在全局 LVM
    命令层覆盖所选配置设定。该配置文件在开始执行 LVM 命令时应用，并贯穿
    LVM 命令执行的整个过程。可在执行 LVM 命令时指定
    `--commandprofile ProfileName`{.option} 选项，以便应用命令配置文件。
    :::
-   ::: para
    元数据配置文件是用来覆盖在卷组/逻辑卷层中选择的配置设定。它是独立应用于每个要执行的卷组/逻辑卷。因此，每个卷组/逻辑卷均可使用其元数据保存该配置文件名称，以便下次处理该卷组/逻辑卷时使用。该配置文件是自动应用。如果该卷组及其任意逻辑卷有不同的配置文件定义，则首选为逻辑卷定义的配置文件。
    :::
    ::: itemizedlist
    -   ::: para
        可在使用 `vgcreate`{.command} 或 `lvcreate`{.command}
        命令创建逻辑卷时，指定 `--metadataprofile ProfileName`{.option}
        选项，将元数据配置文件附加到卷组或逻辑卷中。
        :::
    -   ::: para
        可在使用 `vgcreate`{.command} 或 `lvcreate`{.command}
        命令创建逻辑卷时，指定 `--metadataprofile ProfileName`{.option}
        或者 `--detachprofile`{.option}
        选项，将元数据配置文件附加到现有卷组或逻辑卷中，或从中将其移除。
        :::
    -   ::: para
        可使用 `vgs`{.command} 和 `lvs`{.command} 命令的
        `-o vg_profile`{.option} 和 `-o lv_profile`{.option}
        输出结果选项显示目前附加到卷组或逻辑卷中的元数据配置文件。
        :::
    :::
:::
::: para
命令配置文件允许的选项集与元数据配置文件允许的选项集相互排斥。这些设定只能用于这两个集合之一，无法混合使用，同时
LVM 工具也会拒绝混合使用这些设定的配置文件。
:::
::: para
LVM 提供几个预先定义的配置文件。LVM 配置文件默认保存在
`/etc/lvm/profile`{.filename} 目录中。可在
`/etc/lvm/lvm.conf`{.filename} 文件中更改 `profile_dir`{.literal}
设定改变其位置。每个配置文件设定均保存在 `profile`{.filename} 目录的
*ProfileName*.profile 文件中。在 LVM 命令中参考该配置文件时会省略
`.profile`{.literal} 后缀。
:::
::: para
可使用不同值创建附加配置文件。因此 LVM 提供
`command_profile_template.profile`{.filename} 文件（用于命令配置文件）和
`metadata_profile_template.profile`{.filename}
文件（用于元数据配置文件），这些文件包含每个配置文件类型可自定义的所有设定。可复制这些模板配置文件，并根据需要进行编辑。
:::
::: para
另外，可使用 `lvm dumpconfig`{.command}
命令为配置文件的给定部分为每种配置文件类型生成新的配置。下面的命令创建一个名为
*ProfileName*.profile，组成 *section* 中设置的新命令配置文件。
:::
``` screen
lvm dumpconfig --file ProfileName.profile --type profilable-command section
```
::: para
下面的命令创建一个名为 *ProfileName*.profile，组成 *section*
中设置的新命令配置文件。
:::
``` screen
lvm dumpconfig --file ProfileName.profile --type profilable-metadata section
```
::: para
如果没有指定这个部分，则会报告所有可配置的设定。
:::
:::
::: section
::: titlepage
# [⁠]{#config_file.html#lvmconf_file}B.4. lvm.conf 文件示例 {.title}
:::
::: para
以下是 `lvm.conf`{.literal}
配置文件示例。您的配置文件可能和这个文件有所不同。
:::
``` screen
# This is an example configuration file for the LVM2 system.
# It contains the default settings that would be used if there was no
# /etc/lvm/lvm.conf file.
#
# Refer to 'man lvm.conf' for further information including the file layout.
#
# To put this file in a different directory and override /etc/lvm set
# the environment variable LVM_SYSTEM_DIR before running the tools.
#
# N.B. Take care that each setting only appears once if uncommenting
# example settings in this file.
# This section allows you to set the way the configuration settings are handled.
config {
    # If enabled, any LVM2 configuration mismatch is reported.
    # This implies checking that the configuration key is understood
    # by LVM2 and that the value of the key is of a proper type.
    # If disabled, any configuration mismatch is ignored and default
    # value is used instead without any warning (a message about the
    # configuration key not being found is issued in verbose mode only).
    checks = 1
    # If enabled, any configuration mismatch aborts the LVM2 process.
    abort_on_errors = 0
    # Directory where LVM looks for configuration profiles.
    profile_dir = "/etc/lvm/profile"
}
# This section allows you to configure which block devices should
# be used by the LVM system.
devices {
    # Where do you want your volume groups to appear ?
    dir = "/dev"
    # An array of directories that contain the device nodes you wish
    # to use with LVM2.
    scan = [ "/dev" ]
    # If set, the cache of block device nodes with all associated symlinks
    # will be constructed out of the existing udev database content.
    # This avoids using and opening any inapplicable non-block devices or
    # subdirectories found in the device directory. This setting is applied
    # to udev-managed device directory only, other directories will be scanned
    # fully. LVM2 needs to be compiled with udev support for this setting to
    # take effect. N.B. Any device node or symlink not managed by udev in
    # udev directory will be ignored with this setting on.
    obtain_device_list_from_udev = 1
    # If several entries in the scanned directories correspond to the
    # same block device and the tools need to display a name for device,
    # all the pathnames are matched against each item in the following
    # list of regular expressions in turn and the first match is used.
    # preferred_names = [ ]
    # Try to avoid using undescriptive /dev/dm-N names, if present.
    preferred_names = [ "^/dev/mpath/", "^/dev/mapper/mpath", "^/dev/[hs]d" ]
    # A filter that tells LVM2 to only use a restricted set of devices.
    # The filter consists of an array of regular expressions.  These
    # expressions can be delimited by a character of your choice, and
    # prefixed with either an 'a' (for accept) or 'r' (for reject).
    # The first expression found to match a device name determines if
    # the device will be accepted or rejected (ignored).  Devices that
    # don't match any patterns are accepted.
    # Be careful if there there are symbolic links or multiple filesystem 
    # entries for the same device as each name is checked separately against
    # the list of patterns.  The effect is that if the first pattern in the 
    # list to match a name is an 'a' pattern for any of the names, the device
    # is accepted; otherwise if the first pattern in the list to match a name
    # is an 'r' pattern for any of the names it is rejected; otherwise it is
    # accepted.
    # Don't have more than one filter line active at once: only one gets used.
    # Run vgscan after you change this parameter to ensure that
    # the cache file gets regenerated (see below).
    # If it doesn't do what you expect, check the output of 'vgscan -vvvv'.
    # If lvmetad is used, then see "A note about device filtering while
    # lvmetad is used" comment that is attached to global/use_lvmetad setting.
    # By default we accept every block device:
    filter = [ "a/.*/" ]
    # Exclude the cdrom drive
    # filter = [ "r|/dev/cdrom|" ]
    # When testing I like to work with just loopback devices:
    # filter = [ "a/loop/", "r/.*/" ]
    # Or maybe all loops and ide drives except hdc:
    # filter =[ "a|loop|", "r|/dev/hdc|", "a|/dev/ide|", "r|.*|" ]
    # Use anchors if you want to be really specific
    # filter = [ "a|^/dev/hda8$|", "r/.*/" ]
    # Since "filter" is often overridden from command line, it is not suitable
    # for system-wide device filtering (udev rules, lvmetad). To hide devices
    # from LVM-specific udev processing and/or from lvmetad, you need to set
    # global_filter. The syntax is the same as for normal "filter"
    # above. Devices that fail the global_filter are not even opened by LVM.
    # global_filter = []
    # The results of the filtering are cached on disk to avoid
    # rescanning dud devices (which can take a very long time).
    # By default this cache is stored in the /etc/lvm/cache directory
    # in a file called '.cache'.
    # It is safe to delete the contents: the tools regenerate it.
    # (The old setting 'cache' is still respected if neither of
    # these new ones is present.)
    # N.B. If obtain_device_list_from_udev is set to 1 the list of
    # devices is instead obtained from udev and any existing .cache
    # file is removed.
    cache_dir = "/etc/lvm/cache"
    cache_file_prefix = ""
    # You can turn off writing this cache file by setting this to 0.
    write_cache_state = 1
    # Advanced settings.
    # List of pairs of additional acceptable block device types found 
    # in /proc/devices with maximum (non-zero) number of partitions.
    # types = [ "fd", 16 ]
    # If sysfs is mounted (2.6 kernels) restrict device scanning to 
    # the block devices it believes are valid.
    # 1 enables; 0 disables.
    sysfs_scan = 1
    # By default, LVM2 will ignore devices used as component paths
    # of device-mapper multipath devices.
    # 1 enables; 0 disables.
    multipath_component_detection = 1
    # By default, LVM2 will ignore devices used as components of
    # software RAID (md) devices by looking for md superblocks.
    # 1 enables; 0 disables.
    md_component_detection = 1
    # By default, if a PV is placed directly upon an md device, LVM2
    # will align its data blocks with the md device's stripe-width.
    # 1 enables; 0 disables.
    md_chunk_alignment = 1
    # Default alignment of the start of a data area in MB.  If set to 0,
    # a value of 64KB will be used.  Set to 1 for 1MiB, 2 for 2MiB, etc.
    # default_data_alignment = 1
    # By default, the start of a PV's data area will be a multiple of
    # the 'minimum_io_size' or 'optimal_io_size' exposed in sysfs.
    # - minimum_io_size - the smallest request the device can perform
    #   w/o incurring a read-modify-write penalty (e.g. MD's chunk size)
    # - optimal_io_size - the device's preferred unit of receiving I/O
    #   (e.g. MD's stripe width)
    # minimum_io_size is used if optimal_io_size is undefined (0).
    # If md_chunk_alignment is enabled, that detects the optimal_io_size.
    # This setting takes precedence over md_chunk_alignment.
    # 1 enables; 0 disables.
    data_alignment_detection = 1