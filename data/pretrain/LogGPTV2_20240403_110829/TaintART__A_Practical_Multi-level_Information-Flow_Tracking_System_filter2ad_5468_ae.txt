### Information-Flow Tracking Systems for Android

**TaintDroid and NDroid:**
TaintDroid is a prominent information-flow tracking system for Android. Building upon TaintDroid, NDroid [42] extends the capability to track information flows through Java Native Interface (JNI) by customizing Android emulators (QEMU). However, as discussed in previous sections, TaintDroid is based on the legacy runtime and cannot be ported to current environments, making it unsuitable for analyzing apps developed for the latest Android systems.

### Static Analysis Systems

Many static analysis systems disassemble code to model runtime behavior and use program analysis techniques to resolve information flows. For example:

- **CHEX Framework [37]:** Lu et al. propose the CHEX framework to detect component hijacking by computing data flows using Wala [22].
- **AndroidLeaks [23]:** This system detects potential privacy leaks on a large scale.
- **FlowDroid [2]:** It performs precise context, flow, field, object-sensitive, and lifecycle-aware analysis.
- **ComDroid [14], AmanDroid [53], R-Droid [3], IccTA [35], and HornDroid [10]:** These systems aim to improve static analyzers to detect implicit data flows across components in Android apps.
- **EdgeMiner [11]:** Based on call graphs, EdgeMiner automatically generates API summaries to detect implicit control flow transitions through the Android framework.
- **DroidSafe [27]:** This system models runtime using accurate analysis stubs to capture missing semantic events such as lifecycle events and callback contexts.
- **AAPL [36]:** It combines multiple specialized static analysis techniques and purifies results using a novel peer voting technique.
- **AppAudit [57]:** Combines static and dynamic analysis to reduce over-estimation issues introduced by static taint analysis.
- **RiskMon [33]:** Assesses app risk using machine learning algorithms.

While these systems can analyze a large number of apps offline, they cannot track real-time data flows and privacy leaks without executing the apps.

### Policy Enforcement Systems

To detect suspicious behaviors and prevent potential privacy leaks, researchers have proposed several policy enforcement systems for Android, including:

- **Aurasium [58] and RetroSkeleton [17]:** These systems add enforcement policies and fine-grained mandatory access control on sensitive API invocations by rewriting and repackaging apps. However, incomplete app rewriting can allow hackers to bypass these policies [30].
- **FlaskDroid [9], Patronus [50], ARTDroid [15], and ASM [31]:** These systems achieve fine-grained mandatory access control by hooking into Android system services and low-level system calls.
- **DeepDroid [52]:** Focuses on policy enforcement in enterprise domains.
- **Airbag [55]:** Provides a sandbox environment resistant to malware infection for legitimate apps.
- **Afonso et al. [1]:** Create a sandboxing policy for Android native code.

These systems add policies for each sensitive API call but still struggle to differentiate between legitimate and malicious behavior. TaintART, with its ability to track information flows, can accurately detect data leakage and alert users at runtime.

### Conclusion

In this paper, we present TaintART, a compiler-instrumented information-flow analysis platform designed for the new Android ART environment. TaintART uses dynamic taint analysis to track sensitive data, instrumenting the ART compiler and runtime to handle taint propagation logic, track source methods, and report data leakage from sink methods. TaintART employs CPU registers for multi-level taint tags to minimize storage and achieve fast taint propagation. We also provide APIs for analysts to track specific data. Based on this platform, we implement a multi-level privacy tracking system that can be used for policy enforcement. Our evaluation results show that TaintART introduces less than 15% overhead on overall CPU-bound microbenchmarks and imposes negligible overhead on built-in and third-party apps. Compared to the legacy Dalvik environment in Android 4.4, TaintART achieves twice the performance for Java runtime benchmarks.

### References

[1] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doup√©, M. Polino, P. de Geus, C. Kruegel, and G. Vigna. Going native: Using a large-scale analysis of Android apps to create a practical native-code sandboxing policy. In NDSS, 2016.

[2] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In ACM SIGPLAN Notices, 2014.

[3] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer. R-droid: Leveraging Android app analysis with static slice optimization. In ASIACCS, 2016.

... (additional references follow the same format) ...

[66] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In S&P, 2012.