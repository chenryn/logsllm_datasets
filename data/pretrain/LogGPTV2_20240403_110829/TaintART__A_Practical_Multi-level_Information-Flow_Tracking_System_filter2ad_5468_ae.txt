is the most relevant information-ﬂow tracking system for An-
droid. Based on TaintDroid, NDroid [42] can further track
information ﬂows through JNI by customizing Android emu-
lators (QEMU). As we discussed in previous sections, Taint-
Droid is based on legacy runtime and cannot be ported to
current environments, which makes it impossible to analyze
apps developed for the latest Android systems.
Static Analysis System Many systems utilize disassem-
bled code and try to precisely model runtime behavior and
use program analysis technique to resolve information ﬂows.
Lu et al. [37] proposes CHEX framework to detect com-
ponent hijacking by computing data ﬂows using Wala[22].
AndroidLeaks [23] detects potential privacy leaks on a large
scale. FlowDroid [2] can preform more precise context, ﬂow,
ﬁeld, object-sensitive and lifecycle-aware analysis. Com-
Droid [14], AmanDroid [53], R-Droid [3], IccTA [35] and
HornDroid [10] try to improve the static analyzer to de-
tect implicit data ﬂows across components among Android
apps. Based on call graph, EdgeMiner [11] can automati-
cally generate API summaries to detect implict control ﬂow
transitions through the Android framework. DroidSafe [27]
models runtime using an accurate analysis stubs technique
so as to capture missing semantic events such as life-cycle
events and callback context in the static code. AAPL [36]
can detect privacy leaks by combining multiple special static
analysis techniques and purify results by employing a novel
peer voting technique. AppAudit [57] combines static and
dynamic analysis to reduce the over-estimating problem in-
troduced by static taint analysis. RiskMon [33] can assess
apps’ risk by adopting machine leaning algorithm. Note that
these systems can analyze large number of apps in an of-
ﬂine manner, but without executing apps, the static analysis
technique cannot track the realtime data ﬂows and privacy
leakage.
Policy Enforcement System To detect suspicious behav-
iors and prevent potential privacy leakage, researchers pro-
posed many policy enforcement systems for Android. Aura-
sium [58] and RetroSkeleton [17] can add enforcement poli-
cies and ﬁne-grained mandatory access control on sensitive
API invocations by rewriting and repackaging apps. How-
ever, hackers may bypass these policies due to the incom-
plete app rewriting [30]. Besides using repackage technique,
systems like FlaskDroid [9], Patronus [50], ARTDroid [15],
and ASM [31] can achieve ﬁne-grained mandatory access
control by hooking Android system services and low level
system calls. With the similar technique, DeepDroid [52]
mainly focus on policy enforcement under enterprise do-
main. Airbag [55] can provides an sandbox environment
which is resistant to malware infection for legitimate apps.
Afonso et al. [1] create a sandboxing policy for Android na-
tive code. These systems add policy for each sensitive API
calls, but still cannot diﬀerentiate legitimate or malicious
behavior. Because TaintART can track information ﬂows,
our system can accurately detect data leakage and alert users
at runtime.
9. CONCLUSION
In this paper, we design a compiler-instrumented
information-ﬂow analysis platform called TaintART on the
new Android ART environment. We adopt dynamic taint
analysis methodology for tracking sensitive data. Taint-
ART instruments the ART compiler and runtime for han-
dling taint propagation logic, tracking source methods and
report data leakage from sink methods. TaintART em-
ploys CPU registers for multi-level taint tag to minimize
storage and achieve fast taint propagation logic. We also
provide APIs for analysts to track speciﬁc data. Based on
this platform, we implement a multi-level privacy tracking
system which can be used for policy enforcement. Our eval-
uation results show that TaintART introduces less than
15 % overheads on an overall CPU-bound microbenchmark
and imposes negligible overhead on built-in and third-party
apps. Additionally, compared to legacy Dalvik environment
in Android 4.4, the TaintART system can achieve two times
faster performance for Java runtime benchmark.
10. REFERENCES
[1] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doup´e,
M. Polino, P. de Geus, C. Kruegel, and G. Vigna. Going
native: Using a large-scale analysis of android apps to
create a practical native-code sandboxing policy. In NDSS,
2016.
[2] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel.
Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. In ACM
SIGPLAN Notices, 2014.
[3] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer.
R-droid: Leveraging android app analysis with static slice
optimization. In ASIACCS, 2016.
[4] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and
S. Weisgerber. On demystifying the android application
framework: Re-visiting android permission speciﬁcation
analysis. In USENIX Security, 2016.
[5] R. Balebako, J. Jung, W. Lu, L. F. Cranor, and C. Nguyen.
Little brothers watching you: Raising awareness of data
leaks on smartphones. In SOUPS, 2013.
[6] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio,
C. Kruegel, and G. Vigna. What the app is that? deception
and countermeasures in the android user interface. In S&P,
2015.
[7] Bloomberg. Arm designs one of the world’s most-used
products. http://www.bloomberg.com/bw/articles/2014-
02-04/arm-chips-are-the-most-used-consumer-product-dot-
where-s-the-money.
[8] E. Bosman, A. Slowinska, and H. Bos. Minemu: The
world’s fastest taint tracker. In RAID, 2011.
[9] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and
ﬁne-grained mandatory access control on android for diverse
security and privacy policies. In USENIX Security, 2013.
[10] S. Calzavara, I. Grishchenko, and M. Maﬀei. Horndroid:
Practical and sound static analysis of android applications
by smt solving. In Euro S&P, 2016.
[11] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel,
G. Vigna, and Y. Chen. Edgeminer: Automatically
detecting implicit control ﬂow transitions through the
android framework. In NDSS, 2015.
[12] J. Chen, H. Chen, E. Bauman, Z. Lin, B. Zang, and
H. Guan. You shouldn’t collect my secrets: Thwarting
sensitive keystroke leakage in mobile ime apps. In USENIX
Security, 2015.
[13] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your
app without actually seeing it: Ui state inference and novel
android attacks. In USENIX Security, 2014.
[14] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in android. In
MobiSys, 2011.
[15] V. Costamagna and C. Zheng. Artdroid: A virtual-method
hooking framework on android art runtime. In Proceedings
of the Workshop on Innovations in Mobile Privacy and
Security, 2016.
[16] M. Dam, G. Le Guernic, and A. Lundblad. Treedroid: A
tree automaton based approach to enforcing data
processing policies. In CCS, 2012.
[17] B. Davis and H. Chen. Retroskeleton: retroﬁtting android
apps. In MobiSys, 2013.
[18] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An
empirical study of cryptographic misuse in android
applications. In CCS, 2013.
[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun,
L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth.
Taintdroid: an information-ﬂow tracking system for
realtime privacy monitoring on smartphones. TOCS, 2014.
[20] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and
E. Chin. Permission re-delegation: Attacks and defenses. In
USENIX Security, 2011.
[21] H. Feng, K. Fawaz, and K. G. Shin. Linkdroid: reducing
unregulated aggregation of app usage behaviors. In
USENIX Security, 2015.
[22] S. Fink and J. Dolby. Wala–the tj watson libraries for
analysis, 2012.
[23] C. Gibler, J. Crussell, J. Erickson, and H. Chen.
Androidleaks: automatically detecting potential privacy
leaks in android applications on a large scale. In TRUST,
2012.
[24] Google. Android dashboards. https:
//developer.android.com/about/dashboards/index.html.
[25] Google. Dalvik jit. http://android-
[47] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. M. Mao.
Kratos: Discovering inconsistent security policy
enforcement in the android framework. In NDSS, 2016.
[48] M. Sun, M. Li, and J. C. S. Lui. Droideagle: Seamless
detection of visually similar android apps. In WiSec, 2015.
developers.blogspot.hk/2010/05/dalvik-jit.html.
[49] M. Sun, J. C. S. Lui, and Y. Zhou. Blender:
Self-randomizing address space layout for android apps. In
RAID, 2016.
[50] M. Sun, M. Zheng, J. C. S. Lui, and X. Jiang. Design and
implementation of an android host-based intrusion
prevention system. In ACSAC, 2014.
[51] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro.
Copperdroid: Automatic reconstruction of android malware
behaviors. In NDSS, 2015.
[52] X. Wang, K. Sun, Y. Wang, and J. Jing. Deepdroid:
Dynamically enforcing enterprise policy on android devices.
In NDSS, 2015.
[53] F. Wei, S. Roy, X. Ou, et al. Amandroid: A precise and
general inter-component data ﬂow analysis framework for
security vetting of android apps. In CCS, 2014.
[54] M. Y. Wong and D. Lie. Intellidroid: A targeted input
generator for the dynamic analysis of android malware. In
NDSS, 2016.
[55] C. Wu, Y. Zhou, K. Patel, Z. Liang, and X. Jiang. Airbag:
Boosting smartphone resistance to malware infection. In
NDSS, 2014.
[56] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The
impact of vendor customizations on android security. In
CCS, 2013.
[57] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu. Eﬀective
real-time android application auditing. In S&P, 2015.
[58] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Practical
policy enforcement for android applications. In USENIX
Security, 2012.
[59] L. K. Yan and H. Yin. Droidscope: seamlessly
reconstructing the os and dalvik semantic views for
dynamic android malware analysis. In USENIX Security,
2012.
[60] X. Zhang, K. Ying, Y. Aafer, Z. Qiu, and W. Du. Life after
app uninstallation: Are the data still alive? data residue
attacks on android. In NDSS, 2016.
[61] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S.
Wang, and B. Zang. Vetting undesirable behaviors in
android apps with permission use analysis. In CCS, 2013.
[62] Y. Zhang, M. Yang, B. Zhou, Z. Yang, W. Zhang, and
B. Zang. Swift: A register-based jit compiler for embedded
jvms. In VEE, 2012.
[63] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and
W. Zou. Smartdroid: an automatic system for revealing
ui-based trigger conditions in android applications. In
SPSM, 2012.
[64] M. Zheng, M. Sun, and J. C. S. Lui. Droidanalytics: a
signature based analytic system to collect, extract, analyze
and associate android malware. In TrustCom, 2013.
[65] M. Zheng, M. Sun, and J. C. S. Lui. Droidray: a security
evaluation system for customized android ﬁrmwares. In
ASIACCS, 2014.
[66] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In S&P, 2012.
[26] Google. Ui/application exerciser monkey.
https://developer.android.com/studio/test/monkey.html.
[27] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham,
N. Nguyen, and M. C. Rinard. Information ﬂow analysis of
android applications in droidsafe. In NDSS, 2015.
[28] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
detection of capability leaks in stock android smartphones.
In NDSS, 2012.
[29] gsbabil. Antitaintdroid.
[30] H. Hao, V. Singh, and W. Du. On the eﬀectiveness of
api-level access control using bytecode rewriting in android.
In ASIACCS, 2013.
[31] S. Heuser, A. Nadkarni, W. Enck, and A.-R. Sadeghi. Asm:
A programmable interface for extending android security.
In USENIX Security, 2014.
[32] H. Huang, S. Zhu, K. Chen, and P. Liu. From system
services freezing to system server shutdown in android: All
you need is a loop in an app. In CCS, 2015.
[33] Y. Jing, G.-J. Ahn, Z. Zhao, and H. Hu. Towards
automated risk assessment and mitigation of mobile
applications. TDSC, 2015.
[34] D. Kirat, G. Vigna, and C. Kruegel. Barecloud: bare-metal
analysis-based evasive malware detection. In USENIX
Security, 2014.
[35] L. Li, A. Bartel, T. F. Bissyand´e, J. Klein, Y. Le Traon,
S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and
P. McDaniel. Iccta: Detecting inter-component privacy
leaks in android apps. In ICSE, 2015.
[36] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng,
Z. Qian, W. Lee, and G. Jiang. Checking more and alerting
less: Detecting privacy leakages via enhanced data-ﬂow
analysis and peer voting. In NDSS, 2015.
[37] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically
vetting android apps for component hijacking
vulnerabilities. In CCS, 2012.
[38] W. Meng, R. Ding, S. P. Chung, S. Han, and W. Lee. The
price of free: Privacy leakage in personalized mobile in-app
ads. In NDSS, 2016.
[39] Pendragon Software Corporation. CaﬀeineMark 3.0.
http://www.benchmarkhq.ru/cm30/.
[40] T. Petsas, G. Voyatzis, E. Athanasopoulos,
M. Polychronakis, and S. Ioannidis. Rage against the
virtual machine: hindering dynamic analysis of android
malware. In EuroSec, 2014.
[41] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and
G. Vigna. Execute this! analyzing unsafe and malicious
dynamic code loading in android applications. In NDSS,
2014.
[42] C. Qian, X. Luo, Y. Shao, and A. T. Chan. On tracking
information ﬂows through jni in android applications. In
DSN, 2014.
[43] V. Rastogi, Y. Chen, and W. Enck. Appsplayground:
automatic security analysis of smartphone applications. In
CODASPY, 2013.
[44] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards
discovering and understanding task hijacking in android. In
USENIX Security, 2015.
[45] G. Sarwar, O. Mehani, R. Boreli, and M. A. Kaafar. On the
eﬀectiveness of dynamic taint analysis for protecting
against private information leaks on android-based devices.
In SECRYPT, 2013.
[46] E. J. Schwartz, T. Avgerinos, and D. Brumley. All you ever
wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In
S&P, 2010.