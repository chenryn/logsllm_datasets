title:Lightweight, pollution-attack resistant multicast authentication scheme
author:Ya-Jeng Lin and
Shiuhpyng Shieh and
Warren W. Lin
Ya-Jeng Lin 
PI:EMAIL
Warren W. Lin 
PI:EMAIL
Lightweight, Pollution-Attack Resistant Multicast 
Authentication Scheme 
Shiuhpyng Shieh 
National Chiao Tung University / 
University of California Berkeley* 
1001 Ta Hsueh Road 
Hsinchu, Taiwan 300, ROC 
886-3-571-2121 ext 54705 
PI:EMAIL
ABSTRACT
Authentication  is  an  important  security  measure  for  multicast 
applications, providing receivers with confidence that the packets 
they receive are valid. Simply signing every multicast packet with 
a digital signature incurs high overhead; therefore, a scheme such 
as signature amortization helps reduce this overhead. To tolerate 
packet  loss,  erasure  codes  are  employed  to  enhance  signature 
amortization.  However,  the  use  of  erasure  codes  introduces 
pollution attack, an attack in which the adversary injects packets 
to  disrupt  the  erasure  decoding  procedure  and  consequently 
denies  the  authentication  service  to  the  receiver.  Unfortunately, 
current solutions to pollution attack are computationally intensive 
and  inefficient.  To  cope  with  this  problem,  we  propose  a  new 
lightweight,  pollution-attack  resistant  multicast  authentication 
scheme  (PARM),  which  generates  evidence  that  receivers  can 
validate  on  a  fast,  per-packet  basis.  This  approach  effectively 
resists  pollution  attacks  and  has  better  performance 
than 
previously proposed solutions. 
Keywords
Authentication,  multicast,  pollution-attack, 
signature amortization. 
erasure 
code, 
1. INTRODUCTION
A  multicast  protocol  enables  a  sender  to  efficiently  disseminate 
digital  media  data  to  many  receivers.  Due  to  the  time-sensitive 
requirement  of  some  applications,  reliable  transmission  protocol 
like  TCP  (Transmission  Control  Protocol)  is  impractical  for 
multicast.  Therefore,  unreliable  transmission  protocol  such  as 
UDP (User Datagram Protocol) is generally adopted for multicast 
This work is supported in part by the National Science Council (NSC), 
the  Institute  for  Information  Industry  (III),  the  Taiwan  Information 
Security Center at NCTU (TWISC@NCTU), and the Team for Research 
in Ubiquitous Secure Technology at UC Berkeley (TRUST). 
* Shiuhpyng Shieh is currently a visiting professor of the University of 
California, Berkeley. 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS’06, March 21–24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003…$5.00. 

primitives. 
asymmetric 
cryptographic 
applications. Multicast protocol is suitable for many applications, 
e.g.  video  transmissions,  live  broadcasts,  stock  quotes,  or  news 
feeds. These applications may have many receivers or distribute 
time-sensitive data. To ensure secure communications between a 
sender  and  its  receivers,  it  is  important  to  implement  security 
measures in a multicast environment. 
An  attacker  may  impersonate  a  sender  to  transmit  malicious 
packets to receivers, causing disruptions in the communications. 
Multicast authentication is used to defend against forged packets 
injected by the attackers by enabling a receiver to authenticate the 
packet  source  and  discard  malicious  packets.  There  have  been 
many multicast authentication approaches, which can be roughly 
divided  into  two  categories:  symmetric  cryptographic  primitives 
and 
Symmetric 
cryptographic primitives, such as MAC (Message Authentication 
Code),  generally  use  a  symmetric  key  to  authenticate  a  data 
source.  In  MAC,  an  identical  secret  key  is  maintained  by  the 
sender and receiver. The sender uses the secret key to generate a 
MAC  for  a  packet,  and  the  receiver  is  able  to  authenticate  the 
packet source by verifying the MAC of the packet with the secret 
key.  Asymmetric  cryptographic  primitives,  such  as  digital 
signatures,  use  an  asymmetric  key  pair  to  authenticate  a  data 
source. In general, an asymmetric key pair consists of two keys; 
one key is used to generate the signature, while the other key is 
used  to  verify  the  signature.  Using  digital  signatures,  like  RSA, 
for  authentication 
to  be  secure; 
nevertheless,  digital  signature  generation  and  verification  incur 
significant computation overhead. 
Signature 
[10][11][15][16][17][18][19][20] 
addresses this concern by generating a single digital signature for 
a  block  of  packets.  After  verifying  the  signature,  a  receiver  can 
consider  this  block  of  packets  authentic.  Signature  amortization 
makes a tradeoff between security and computation overhead. An 
elaborate  signature  amortization  scheme  should  still  work  well 
despite  packet  loss  in  a  multicast  protocol.  For  this  reason, 
signature  amortization  schemes  utilize  fault-tolerant  coding 
algorithms  to  encode  and  decode  packets.  Fault-tolerant  coding 
algorithms,  like  erasure  codes  [7][8][9][12]  or  diversity  codes 
[21], partition information into many segments and can correctly 
reconstruct  the  original  information  even  though  a  number  of 
segments, up to a threshold, may be lost. 
Although  signature  amortization  with  a  fault-tolerant  coding 
algorithm reduces computation overhead and tolerates packet loss, 
it suffers from pollution attacks [1]. Pollution attacks occur when 
an  adversary  injects  a  large  quantity  of  forged  packets  into  a 
is  popular  and  believed 
amortization 
[1]  have  been  proposed 
block  of  valid  packets.  The  receiver  fails  to  decode  a  correct 
signature  using  the  fault-tolerant  coding  algorithm,  forcing  the 
receiver  to  drop  the  entire  block  of  packets,  which  may  include 
valid packets. 
Distillation  codes 
for  signature 
amortization  to  defend  against  pollution  attack.  In  distillation 
codes,  the  sender  augments  each  packet  with  a  witness.  Upon 
receipt,  the  receiver  separates  packets  into  groups  by  witness. 
Distillation codes guarantee that all valid packets are partitioned 
into  groups  that  do  not  contain  forged  packets,  allowing  the 
receiver to decode the correct signature from the packets in this 
group.  Unfortunately,  the  receiver  cannot  realize  in  advance 
which group contains valid packets; therefore, it must attempt to 
decode  a  valid  signature  from  each  group.  Furthermore,  the 
receiver cannot immediately distinguish between valid and invalid 
packets, making it necessary to first  buffer  all  received  packets. 
Distillation  codes  incur  high  computation  overhead,  storage 
space, and verification delay. 
To  summarize,  authentication  in  multicast  applications  is  an 
important  security  measure  that  cannot  be  neglected.  However, 
signing every multicast packet with a digital signature incurs high 
overhead,  which  may  be  impractical  for  many  resource-limited 
devices.  Signature  amortization  can  reduce  the  computation  and 
communication overhead, and a fault-tolerance coding algorithm 
can  help  tolerate  packet  loss.  Despite  these  countermeasures,  a 
signature  amortization  scheme  still  suffers  pollution  attack.  To 
solve this problem, we have designed a lightweight and pollution 
attack  resistant  multicast  authentication  protocol  (PARM).  Our 
proposed  scheme  is  fast  and  lightweight,  which  is  ideal  for 
multicast applications with time-sensitive requirements or devices 
with  limited  computational  power.  In  contrast  to  distillation 
codes,  our  proposed  scheme  requires  less  computation  overhead 
and storage space. 
In the next section, we briefly  discuss work  related  to  signature 
amortization,  an  overview  of  the  SAIDA  signature  amortization 
scheme, and distillation codes. We describe our proposed scheme 
in section 3 and provide an analysis of PARM against distillation 
codes in section 4. After deriving the security strength of PARM 
in  section  5,  we  evaluate  its  security  in  section  6.  Finally,  we 
conclude our findings in section 7. 
2. RELATED WORK 
We introduce  current  works  in  signature  amortization  in  section 
2.1  and  a  signature  amortization  scheme  with  erasure  codes 
(SAIDA) in section 2.2. We then give a description of distillation 
codes in section 2.3. 
2.1 Signature Amortization 
Computation  and  communication  overhead  is  a  significant 
consideration in many multicast authentication schemes based on 
digital signature. To reduce this overhead, signature amortization 
schemes generate a single signature over many packets. Based on 
different  techniques,  signature  amortization  schemes  can  be 
classified  into  several  categories:  hash  chains,  graphs,  Merkle 
hash trees, and erasure codes. 

2.1.1 Hash Chains 
Gennaro and Rohatgi [22] have devised a signature amortization 
over hash  chains.  Each  packet pi  is  augmented  with  verification 
information ai, which is recursively defined as the hash value of 
the concatenation of the next packet pi+1 and the next verification 
information
and 
ai+1=h(pi+2||ai+2),  where  h  denotes  a  hash  function.  Since  the 
verification  information  is  used  to  authenticate  the  next  packet 
recursively, only the first packet with its verification information 
needs  to  be  signed  with  a  digital  signature  to  protect  against 
tampering. This scheme has constant authentication overhead per 
packet  but  does  not  tolerate  packet  losses  since  the  loss  of  one 
packet prevents authentication of the remaining packets. 
ai=h(pi+1||ai+1) 
example, 
ai+1. 
For 
2.1.2 Graphs
A graph-based technique [15][16][18][19] generalizes the idea of 
amortizing a signature over a hash chain to tolerate packet loss. A 
single-sink  directed  acyclic  graph  (DAG)  is  defined  such  that 
each  vertex  corresponds  to  a  packet.  The  edges  in  this  graph 
indicate  the  authentication  direction;  thus,  the  source  vertex  is 
authenticated using the verification information of the destination 
vertex.  Instead  of  augmenting  the  current  packet  with  the  next 
packet’s hash value, a packet pi is augmented with the hash value 
of the packet pj, which points to pi in a single-sink DAG. As with 
the hash chain approach, the first packet is also digitally signed. 
Graph-based  schemes  simply  guarantee  probabilistic  security 
strength under random packet loss. In particular, they require that 
the digitally signed packets completely reach the receiver. 
leaf  node  hi 
is  calculated  by  hashing 
2.1.3 Merkle Hash Trees 
A  Merkle  hash  tree  [6]  is  a  mechanism  for  computing  a  single 
cryptographically secure hash digest over a set of data elements. 
It  is  a  binary  hash  tree  whose  internal  nodes  are  recursively 
defined as the hash value of the concatenation of its two children. 
Many signature amortization schemes build a Merkle hash tree on 
top of the packets’ hash values. 
Figure 2-1 shows a Merkle hash tree with each Si representing a 
packet.  Each 
the 
corresponding Si,  while  each  internal  node  hi,j  is  computed  by 
hashing the concatenation of hi and hj. The verification sequence 
for a leaf node consists of the hash values of the sibling nodes on 
the path from the leaf node to the root. With a leaf node and its 
verification  sequence,  the  receiver  can  compute  the  tree’s  root 
value.  For  instance,  (h4,  h1,2,  h5,8)  represents  the  verification 
sequence  of  packet  s3,  as  shown  in  Figure  2-1.  Wong  and  Lam 
[20] utilize a Merkle hash tree to amortize a digital signature over 
n packets. First, the sender hashes each packet and treats each as a 
leaf node to the Merkle hash tree. Then, the sender augments each 
packet  with  verification  information,  which  is  comprised  of  the 
signed  root  hash  value  and  the  corresponding  verification 
sequence of the leaf node. With this knowledge, the receiver can 
individually  and  independently  verify  each  packet.  This  scheme 
also  tolerates  packet  losses,  but  logarithmic  communication 
overhead  per  packet  exists  since  the  verification  sequence  size 
grows logarithmically with the amount of leaf nodes. In contrast, 
our 
per-packet 
communication overhead. 
proposed 
achieves 
scheme 
constant 
evaluating 
all  possible 
the  sender  generates  and  appends  a  witness, 
excessive 
computational  power 
combinations of the received packets. 