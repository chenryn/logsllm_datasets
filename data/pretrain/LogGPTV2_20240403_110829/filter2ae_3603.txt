# Google UAF漏洞缓解技术：MiraclePtr

## 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

2022年9月13日，Google安全团队在其安全博客中发布了一篇文章，介绍了Google Chrome安全团队在缓解UAF（Use-After-Free）漏洞利用方面的新进展。MiraclePtr并不是单一的智能指针技术，而是Google安全团队在多次实验和尝试后提出的一系列解决方案的集合。本文将重点介绍其最新启用的BackupRef方案。

## MiraclePtr简介

首先需要明确的是，MiraclePtr与C++中的原始智能指针（如`unique_ptr`、`weak_ptr`等）并不相同。它是Google安全团队为了缓解由指针引起的内存破坏漏洞而提出的多种方案的集合。通过引用计数和指针标记等方式，这些方案旨在阻止攻击者利用悬垂指针（Dangling Pointer）进行攻击，特别是针对UAF类型的漏洞。

根据Google安全团队的观点，在针对Chrome的攻击过程中，攻击者通常需要结合一个渲染器漏洞和一个沙箱逃逸漏洞来实现完整的攻击链。MiraclePtr能够有效缓解UAF漏洞的利用，从而阻止攻击者对浏览器主进程中的UAF漏洞进行利用（见上图蓝色部分），降低攻击成功的可能性。

在对Chrome历史可利用漏洞的统计中，UAF类型漏洞占了几乎一半。因此，MiraclePtr尝试了包括BackupRefPtr、BorrowPtr、SafePtr、CheckedPtr、MTECheckedPtr和ViewPtr在内的多种方式来缓解UAF漏洞的利用。经过性能开销、内存开销、安全保护和开发人员便利性等方面的综合评估，近期在Windows和Android版本的Chrome 102稳定版中启用了BackupRefPtr。以下将重点介绍BackupRefPtr方案，其他方案的详细信息请参阅参考链接。

## BackupRefPtr方案

BackupRefPtr提出了依赖“确定性引用计数”的指针保护方案，主要借鉴了CheckedPtr2、SafePtr和BorrowPtr的思路，并且需要Chrome的堆内存分配器PartitionAlloc的支持。2020年，Google Project Zero发表的一篇关于通过CPU漏洞侧信道攻击泄漏缓存数据以实现Chrome沙箱逃逸的文章，证明了基于指针标记的方案存在被侧信道攻击的风险。出于安全性考虑，确定性引用计针方案成为了优先选择。

PartitionAlloc是Chrome自行实现的堆分配器，主要优化了分配效率、内存空间利用率和安全性。PartitionAlloc使用2MB大小的超级页面作为普通数据桶，每个超级页面被分割成多个分区。第一个和最后一个分区是永久不可访问的，用作保护页面。在第一个分区页中间的一个系统页面保存了元数据（metadata），这些元数据提供了对内存对象的跟踪能力，BackupRefPtr使用的引用计数就存储在这些元数据中。

在Chromium的源码实现中，BackupRefPtr是一个线程安全的引用计数指针类，可以非常简单地替换原始指针。Chromium团队在引入BackupRefPtr时一次性替换了超过15000个原始指针。BackupRefPtr的引用计数存储在PartitionAlloc元数据中（与CheckedPtr2方案使用同一标志位）。如果在销毁一个对象时，它的引用计数不为零，则会将该对象标记为被污染。此时程序不会真正释放该内存，而是在再次访问被破坏的对象时，程序将主动崩溃。

以下是BackupRefPtr的代码示例，具体实现可参考Chromium源码中的`raw_ptr.h`文件中的`BackupRefPtrImpl`类：

```cpp
template <typename T>
class BackupRefPtr {
public:
    BackupRefPtr(T* ptr) : ptr_(ptr) {
        if (!isSupportedAllocation(ptr)) return;
        atomic<int>& ref_count = *reinterpret_cast<atomic<int>*>(reinterpret_cast<char*>(ptr) - 1);
        CHECK(++ref_count);
    }

    ~BackupRefPtr() {
        if (!isSupportedAllocation(ptr_)) return;
        atomic<int>& ref_count = *reinterpret_cast<atomic<int>*>(reinterpret_cast<char*>(ptr_) - 1);
        if (--ref_count == 0) { // needed in case the BackupRefPtr outlives its pointee and has to free the slot
            PartitionAlloc::ActuallyFree(ptr_);
        }
    }

    T* operator->() { return ptr_; }

private:
    T* ptr_;
};

void* Alloc(size_t size) {
    void* ptr = ActuallyAlloc(size);
    if (isSupportedAllocation(ptr)) {
        int& ref_count = *reinterpret_cast<int*>(reinterpret_cast<char*>(ptr) - 1);
        ref_count = 1; // We need to set the reference count to one initially
                      // otherwise |~BackupRefPtr| can trigger deallocation of
                      // an object that’s still alive.
    }
    return ptr;
}

void Free(void* ptr) {
    if (isSupportedAllocation(ptr)) {
        atomic<int>& ref_count = *reinterpret_cast<atomic<int>*>(reinterpret_cast<char*>(ptr) - 1);
        if (ref_count != 1)
            memset(ptr, 0xcc, getAllocationSize(ptr));
        if (--ref_count != 0)
            return;
    }
    ActuallyFree(ptr);
}
```

## 总结

BackupRefPtr通过上述机制解决了悬垂指针被利用的问题。在该方案中，当发生释放操作但引用计数不为0时，对象并没有被真正释放。攻击者无法通过堆喷射等方式重新分配该对象的内存空间，并且在对象再次被访问时，该内存区域会被填充污染标志或触发主动崩溃。这样，UAF漏洞被缓解为内存泄漏、断言失败或空指针等无法利用的崩溃。

整体而言，该机制的引入进一步降低了Chrome中可利用漏洞的比例，提高了Chrome的安全性。

## 参考链接
1. [Use-after-freedom: MiraclePtr](#)
2. [Pointer Safety Ideas [PUBLIC] – Comparison of Use-After-Free mitigation proposals](#)
3. [BackupRefPtr](#)
4. [PartitionAlloc Design](#)
5. [Escaping the Chrome Sandbox with RIDL](#)
6. [MDS: Microarchitectural Data Sampling](#)

请注意，参考链接中的URL已被替换为占位符，请根据实际内容进行替换。