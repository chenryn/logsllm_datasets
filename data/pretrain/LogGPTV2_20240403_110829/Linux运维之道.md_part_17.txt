变量名称
#直接定义环境变量
#将已有用户变量添加至环境
#查看变量值为空
，系统就开始在/usr/local/sbin/目录
次命令提示符
主命令提示符
命令搜索路径
当前用户的家目录
命令历史的记录条数
当前用户的ID号码
第3章自动化运维
含义
111
---
## Page 128
将所有的参数分别作为个体看待：S$代表当前进程的ID号码，S?表示程序的退出代码（一般0
有参数的个数；S*与$@均代表所有参数的内容，区别是S*将所有的参数作为一个整体，而$@
类推（范围为S1~$9）。使用Shell位置变量有助于我们查看很多相关信息，S#代表Shell程序所
当前 Shell程序的文件名称，$1代表运行 Shell程序时的第一个参数，$2为第二个参数，依此
量使得在脚本中的命令可以调用运行脚本时不同位置的参数，参数一般使用空格分隔，$O代表
上修改，所以在赋值时需要引用旧值。
令行重新登录终端PATH变量将复原即可。那么对PATH变量修改的正确方法是在原来的基础
Linux运维之道
3.4.5
3.4.4
112
Linux中一般可以使用${变量名}的形式展开变量的值，如果有一个变量NAME=Jacob，
[root@centos6~]#vim /tmp/test.sh
位置变量的使用一般体现在脚本中，读者可以结合后面的脚本章节来看本节内容。位置变
This
This
This
This
This
This
This
echo
echo
echo
echo
echo.
echo
#This is test
#!/bin/bash
[root@centos6~]#PATH=$PATH:/root
上面的修改因为并没有通过写入文件的方式把修改永久保存至环境变量，所以只要退出命
[root@centos6
bash:ls:commandnot found
变量的展开替换
is
"This
is
"This
"This
"This
"This
"This
is
is
is
位置变量
iS
PID:2666
the all parameter:ab
the allparameter:abc
the numberof allparameter:3
second parameter:
first parameter:a
the file name:
is
iS
1S
iS
1S
1S
1S
~]#bash
the
the numberof all
the file name:$o"
script for parameter
all
/tmp/test.sh
parameter:
/tmp/test.sh abc
b
C
parameter: S#"
$@"
#编辑脚本内容如下
#当前进程PID为2666
#结果显示第二个参数为b
#结果显示第一个参数为a
#允许该脚本使用3个参数
#所有参数的内容为'a！'b！c
#
#结果显示所有参数的个数为3
所有参数的内容为'abc
#在原有路径列表后追加目录
---
## Page 129
下面四组展开方式主要应用于需要确定变量是否被正确设置的环境。
则 echo ${NAME}用于显示该变量的值。除此之外，系统还提供了更加丰富的变量展开功能，
3.4.6
Bash 提供了一维数组变量的功能，数组中的所有变量都会被编录成索引，数组的索引是以
admin:x:0:0:admin:/admin:/bin/bash
[root@centos6~]#echo$(usR//root/admin}
admin:x:0:0:root:/root:/bin/bash
[root@centos6~]# echo ${usR/root/admin}
root
[root@centos6 ~]# echo ${UsR%:*}
root:x:0:0:root:/root
[root@centos6 ~]# echo ${UsR%:*}
/bin/bash
x:0:0:root:/root:/bin/bash
[root@centos6 ~]#echo ${usR#*:}
root:x:0:0:root:/root:/bin/bash
${variable//old/new}
S
S
S
${variable##key
${variable#key}
下面六组展开方式主要应用于需要对变量的值做修改后输出的场景。
[root@centos6~]#echo $usR
[root@centos6
${varname:+word}
$(varname:=word}
${varname:-word}
root@centos6~]#echo${UsR##*:]
root@centos6~]#uSR=$（head
root@centos6
root@centos6
root@centos6
root@centos6
root@centose
[variable/old/new}
[variable%okey}
(variable%key}
root@centos
root@centos
root@centos6
数组
9
#NAME=Jacob
echo
echo
echo
echo
echo
echo
echo
echo
从尾开始删除关键词，
从头开始删除关键词，
从头开始删除关键词，
如varname存在且非null，则返回word，否则返回null
E
如varname存在且非null，则返回其值，
如varname存在且非null，则返回其值，
尾开始删除关键词，执行最长匹配
将old替换为new，替换所有old
${EMAN:+ERROR};eCho (EMAN)
${NAME:-no user};echo
${NAME:+OK};eCho {NAME}
${EMAN:?no defined);
${NAME
${EMAN
${NAME
${EMAN
1-1/etc/passwd）#将S（）中命令的执行结果赋值给USR
：?no
:=no
I:-no
存在且非null，则返回其值，否则显示varname：message
=no
defined};echo (NAME
user};
user};
执行最短匹配
执
# root:x:0:0:root:/root:/bin/bash
行最短匹配
行最长匹配
#root:x:0:0:root:/root:/bin/bash
# root:x:0:0:root:/root:/bin/bash
# root:x:0:0:root:/root:/bin/bash
echo
echo
echo
echo
(EMAN
(NAME
(NAME
{EMAN
(EMAN）
否则设置为word
否则返回word
第3章
自动化运维
113
---
## Page 130
$(x+y))
表3-3
其中，expression 为算术表达式，表3-3 给出了常用的算术表达式及对应的含义。
的长度，如果 subscript是*或@，则返回数组中元素的个数。
是@或者*符号，则将调用所有的数组成员。使用${#name[subscript]可以返回${name[subscript]}
可以预定义一个空数组变量。
的整数或表达式；第二种使用name=(valuelvalue2..valuen)的语法格式创建。使用declare-a
name[subscript]=value的语法格式定义的变量自动创建索引数组，subscript必须是大于或等于0
0开始的整数，且没有大小限制。
$((x-y))
Linux运维之道
114
3.4.7
在 Shell中进行算术运算时，使用S(expression)语法格式可以实现整数级的算术运算功能。
数组定义完成后，我们使用S{name[subscript]}索引格式来调用数组变量的值，如果subscript
[root@centos6~]#echo ${#B[@]}
[root@centos6~]# echo "length of B_0 is ${#B[0]}"
下面的实例可以很好的帮助理解这些内容：
legthofB_2is
legthof
legthofB_ois
aa:bbb:cccc
root@centos6
root@centos6
[root@centos6
112233
[root@centos6~]# echo ${A[*]}
11:22:33
root@centos6~]#echo ${A[1]}:${A[2]}:${A[3]]
11,22,33
root@centos6
root@centos6
[root@centos6
[root@centos6~]#A[1]=11
算术运算与测试
B1
表达式
1S
~]#
~]#
~]#
~]#echo${A[@]}
~1#
～#
# echo "length of B_2 is ${#B[2]]"
C
2
echo "length of B_1 is ${#B[1]}"
eCho ${B[0]}:${B[1]}:${B[2]}
B=（aa bbb cccc)
echo ${A[1]},${A[2]},${A[3]}
一般可以使用两种方式创建数组变量，第一种使用
减法运算，$((10-8)=2
加法运算，$((1+2)=3
含义
---
## Page 131
INTER1-gt INTER2
STRING1=STRING2
-sFILE
-wFILE
-fFILE
-dFILE
表3-4
可以对很多内容做测试工作，表3-4列出了常用的测试条件及其对应的含义。
-nSTRING
的时候记得在表达式两边都要留有空格，[表达式]这种格式是错误的格式（因为没有空格)。Linux
即可实现测试工作或者使用[测试表达式]，两种方式的最终效果相同。注意，使用[表达式]
INTER1-ItINTER2
INTER1-eqINTER2
$(（x**y))
$(x--))
$(x++))
$((x%y))
$(x*y))
$((x/y))
[root@centos6~]#test-d/etc/ && echo"y"1l echo"N"
Shell除了提供上述所说的算术运算外，
K
expr arg1 % arg2
expr arg1 / rg2
expr arg1\* arg2
expr arg1 - arg2
expr arg1+arg2
此外，命令工具expr也可以实现如下类似的算术运算。
测试选项
表达
整数1小于或等于整数2
整数1大于整数2
整数1与整数2相等
字符串相等
字符串长度非0
文件是否存在且非空
文件是否存在且可写
文件是否存在，且为普通文件
FILE是否存在且为目录
取余
除法
乘法
减法
加法
含义
幂运算，x的y次方
自减运算，x自减1
自加运算，x自加1
取余运算，$((8%3))=2，8/3余数为2
乘法运算，$(（3*3))=9
除法运算，$(8/3))=2，结果仅保留整数位
：还提供了一些判断功能，使用Bash内置命令test
INTER1-leINTER2
INTER1-geINTER2
STRING1!=STRING2
-ZSTRING
-hFILE
-xFILE
-rFILE
INTER1-neINTER2
-eFILE
测试选项
#etc是目录就显示Y，否则显示N
含义
整数1不等于整数2
整数1小于整数2
整数1大于或等于整数2
字符串不相等
字符串长度为0
文件是否为链接文件
文件是否存在且可执行
文件是否存在且可读
文件是否存在
第3章自动化运维
含义
115
续表
---
## Page 132
\*将会把*作为字母意义上的普通字符。
在查找时经常会使用*来查找多个匹配的文件，然而有可能你需要找的就是*字符本身，此时，
特殊含义，
般情况下，Shell会将$视为取变量值，像这样的情况我们需要使用某些功能来屏蔽s符号本身的
转换某些Shell元字符的含义。如我们有时希望echo命令输出的字符中就包含$符号本身，但一
3.5
Linux 运维之道
116
3.5.1
反斜线可以将紧随其后的单个字符视为字面意义上的字符，如*在Shell中代表任意字符，
在Shell中可以通过使用单引号、双引号、反引号（键盘中Tab键上方的按键）、反斜线来
]
]
]
]
o#]
[root@centos6~]#[-n $PATH] &&echo"Y"1l echo
Shell引号