# 描摹
跟踪用于发现单个请求是如何通过分布式应用传递的，以及整个请求和每个组件花费了多少时间。如果收集了这些信息，可以将其用作显示系统行为和运行状况的仪表板的来源之一。
# 监视
操作员喜欢让仪表板显示系统的实时关键指标，这样可以一目了然地显示应用的整体运行状况。这些指标可以是非功能性指标，例如内存和 CPU 使用情况、系统或应用组件的崩溃次数、节点的运行状况等，也可以是功能性指标，因此是特定于应用的指标，例如订购系统中的结帐次数或库存服务中的缺货项目数。
大多数情况下，用于聚合仪表板数字的基础数据是从日志信息中提取的。这可以是主要用于非功能性指标的系统日志，也可以是用于功能性指标的应用级日志。
# 应用更新
公司的竞争优势之一是能够及时对不断变化的市场形势做出反应。其中一部分是能够快速调整应用，以满足新的和变化的需求，或者添加新的功能。我们更新应用的速度越快越好。如今，许多公司每天多次推出新功能或更改功能。
由于应用更新如此频繁，这些更新必须是非破坏性的。升级时，我们不能让系统停机维护。这一切都必须无缝透明地进行。
# 滚动更新
更新应用或应用服务的一种方式是使用滚动更新。这里的假设是，必须更新的特定软件在多个实例中运行。只有这样，我们才能使用这种类型的更新。
发生的情况是，系统停止当前服务的一个实例，并用新服务的实例替换它。一旦新实例准备好了，它将获得流量。通常，新实例会被监视一段时间，以查看它是否按预期工作，如果工作正常，当前服务的下一个实例将被关闭，并由新实例替换。重复这种模式，直到所有服务实例都被替换。
由于在任何给定时间总是有一些实例在运行，无论是当前的还是新的，所以应用一直都在运行。不需要停机。
# 蓝绿色部署
在蓝绿色部署中，应用服务的当前版本，称为*蓝色*，处理所有的应用流量。然后，我们在生产系统上安装名为*绿色*的新版本应用服务。新服务尚未与应用的其余部分连接。
一旦安装了绿色，就可以对这种新服务执行冒烟测试，如果测试成功，路由器就可以配置为将以前变为蓝色的所有流量汇集到新服务绿色。然后仔细观察绿色的行为，如果满足所有成功标准，蓝色可以退出使用。但是，如果出于某种原因，绿色显示一些意外或不需要的行为，路由器可以重新配置，将所有流量返回到蓝色。然后可以移除并修复绿色，并使用修正后的版本执行新的蓝绿色部署:
![](img/24638706-8621-4b0a-8da7-405de86d51f1.png)
Blue-green deployment
# 金丝雀释放
加那利版本是我们将应用服务的当前版本和新版本并行安装在系统上的版本。因此，它们类似于蓝绿色部署。起初，所有流量仍然通过当前版本路由。然后，我们配置一个路由器，使其将总流量的一小部分，比如 1%，汇集到新版本的应用服务中。然后密切监视新服务的行为，以发现它是否如预期的那样工作。如果成功的所有标准都得到满足，那么路由器被配置为通过新服务传输更多的流量，比如这次是 5%。同样，新服务的行为受到密切监控，如果成功，越来越多的流量将被路由到它，直到我们达到 100%。一旦所有流量都被路由到新服务，并且它已经稳定了一段时间，旧版本的服务就可以退出使用。
*为什么我们称之为金丝雀释放？*它是以煤矿工人的名字命名的，他们会用金丝雀作为矿井的预警系统。金丝雀对有毒气体特别敏感，如果这种金丝雀死亡，矿工们知道他们必须立即放弃矿井。
# 不可逆的数据变化
如果我们的更新过程的一部分是在我们的状态中执行一个不可逆的改变，比如在一个支持关系数据库中的一个不可逆的模式改变，那么我们需要特别小心地解决这个问题。如果使用正确的方法，可以在不停机的情况下执行这些更改。重要的是要认识到，在这种情况下，不能在对数据进行更改的同时，在数据存储中部署需要新数据结构的代码更改。相反，整个更新必须分为三个不同的步骤。第一步，推出向后兼容的模式和数据变更。如果成功，则在第二步中推出新代码。同样，如果成功了，我们将在第三步中清理模式，并消除向后兼容性:
![](img/0302fc18-d9ef-4fde-af53-538a037ac9e5.png)
Rolling out an irreversible data or schema change
# 反转
如果我们对在生产环境中运行的应用服务进行频繁更新，这些更新中的一个迟早会出现问题。也许一个开发人员在修复一个 bug 时，引入了一个新的 bug，这个 bug 没有被所有的自动化测试(也可能是手动测试)捕获，所以应用运行不正常，我们必须将服务回滚到以前的好版本。在这方面，回滚是从灾难中恢复。
同样，在分布式应用架构中，问题不在于是否需要回滚，而在于何时需要回滚。因此，我们需要绝对确保我们总能回滚到组成我们应用的任何服务的早期版本。回滚不能是事后的想法，而必须是我们部署过程中经过测试和验证的一部分。
如果我们使用蓝绿色部署来更新我们的服务，那么回滚应该相当简单。我们只需要将路由器从新的绿色服务版本切换回以前的蓝色版本。
# 摘要
在本章中，我们学习了什么是分布式应用架构，以及成功运行分布式应用需要哪些模式和最佳实践。最后，我们讨论了在生产中运行这样的应用还需要什么。
在下一章中，我们将深入探讨仅限于单个主机的网络。我们将详细讨论位于同一主机上的容器如何相互通信，以及外部客户端如何在必要时访问容器化的应用。
# 问题
请回答以下问题，以评估您对本章内容的理解。
1.  分布式应用架构中的每个部分何时以及为什么都必须是冗余的？用几句简短的话解释一下。
2.  为什么我们需要 DNS 服务？用 3 到 5 句话解释。
3.  什么是断路器，为什么需要它？
4.  单体应用和分布式或多服务应用之间有哪些重要区别？
5.  什么是蓝绿色部署？
# 进一步阅读
以下文章提供了更深入的信息:
*   *http://bit.ly/1NU1sgW 断路器*
*   *现场视察模型解释了[http://bit.ly/1UCcvMt](https://bit.ly/2BIRpJY)的*
*   *蓝绿部署*在[http://bit.ly/2r2IxNJ](http://bit.ly/2r2IxNJ)