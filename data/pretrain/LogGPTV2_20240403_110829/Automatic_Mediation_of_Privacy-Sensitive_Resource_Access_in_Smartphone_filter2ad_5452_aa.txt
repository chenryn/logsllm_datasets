title:Automatic Mediation of Privacy-Sensitive Resource Access in Smartphone
Applications
author:Benjamin Livshits and
Jaeyeon Jung
Automatic Mediation of Privacy-Sensitive 
Resource Access in Smartphone Applications
Benjamin Livshits and Jaeyeon Jung, Microsoft Research
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Automatic Mediation of Privacy-Sensitive
Resource Access in Smartphone Applications
Benjamin Livshits and Jaeyeon Jung
Microsoft Research
Abstract
Mobile app development best practices suggest that
developers obtain opt-in consent from users prior
to accessing potentially sensitive information on the
phone. We study challenges that mobile application
developers have with meeting such requirements,
and highlight the promise of using new automated,
static analysis-based solutions that identify and in-
sert missing prompts in order to guard otherwise
unprotected resource accesses. We ﬁnd evidence
that third-party libraries, incorporated by develop-
ers across the mobile industry, may access privacy-
sensitive resources without seeking consent or even
against the user’s choice. Based on insights from real
examples, we develop the theoretical underpinning
of the problem of mediating resource accesses in mo-
bile applications. We design and implement a graph-
theoretic algorithm to place mediation prompts that
protect every resource access, while avoiding repeti-
tive prompting and prompting in background tasks
or third-party libraries.
We demonstrate the viability of our approach by
analyzing 100 apps, averaging 7.3 MB in size and
consisting of dozens of DLLs. Our approach scales
well: once an app is represented in the form of a
graph, the remaining static analysis takes under a
second on average. Overall, our strategy succeeds in
about 95% of all unique cases.
1
Introduction
Privacy on smartphones is far from being a theo-
retical issue: a popular iOS application, Path, had
been found to upload the entire address book of an
iPhone user by default; similarly, a number of high-
proﬁle incidents [1–3] show negative consequences
for mobile applications that surreptitiously collected
privacy-sensitive information about users without
explicit consent. Furthermore, a recent survey of 714
cell phone users shows that 30% of the respondents
had uninstalled an application because they discov-
ered that the application in question was collecting
personal information they did not wish to share [20].
Runtime consent dialogs (sometimes called run-
time permission prompts) are commonly used by
mobile applications to obtain a user’s explicit con-
sent prior to accessing privacy-sensitive data. How-
ever, mobile operating systems diﬀer in terms of
their approach to raising these consent dialogs.
iOS implements OS-level consent dialogs which are
raised when accessing GPS location, contacts stored
on the phone, as well as a few other key resources.
These dialog boxes are far from being “no-ops” for
the user: A recent study of hundreds of iPhone users
shows that 85% of them exercised this control to
deny at least one application from accessing location
data [13]. However, in the absence of OS-level sup-
port, application developers can individually imple-
ment opt-in consent dialogs for enhancing the overall
privacy for end-users.
This paper focuses on a number of technical chal-
lenges that arise when mobile application developers
determine the right place to insert runtime prompts
within an application. First, minimizing the runtime
frequency of consent dialogs is important, as repet-
itive prompts tend to habituate users to blindly ac-
cept the terms [7]. However, to protect user privacy,
every single attempt to access sensitive information
should be guarded with a prompt. Second, apps
should provide just-in-time prompts in order for it
to make sense to the user within the application con-
text. If prompts are placed early, e.g., at install time,
users may forget about granted permissions, leading
to unpleasant surprises because of data access per-
formed by the app, especially when it runs in the
background [21].
The aim of this paper is to formalize the prob-
lem of placing runtime consent dialogs within a mo-
USENIX Association  
22nd USENIX Security Symposium  113
bile application, and to propose a solution for au-
tomatic and correct prompt placement. We try to
both 1) ﬁnd missing prompts and 2) propose a valid
prompt placement when prompts are missing.
1.1 Analysis Design Philosophy
While it is possible to use dynamic analysis to ob-
serve missing prompts at runtime, this approach is
fraught with signiﬁcant challenges. The traditional
challenge is low path coverage, which can be allevi-
ated with path exploration techniques such as sym-
bolic execution, but never completely ﬁxed. Other,
more technical, challenges related to running UI-
based mobile apps automatically also remain.
Because we aim to provide a technique that would
err on the side of safety, we do not believe runtime
analysis is suitable. To this end, we propose a new
scalable static analysis algorithm to automatically
ﬁnd places for inserting prompts if they are miss-
ing. Our solution scales well with application size
and does not require any changes to the underlying
operating system.
Given the inherent nature of static analysis tech-
niques and the complexity of both the applications
and the execution environment, our tool may pro-
duce false positives. However, at the worst, these
false positives will result in double-prompts that oc-
cur at most once per application. We believe this
to be a considerable improvement over the current
error-prone practice of manual prompt placement.
Our approach in this paper may not be fully sound
due to issues such as reﬂection (see Section 4); how-
ever, our goal is be as sound as possible. Our evalua-
tion in Section 6 does not reveal any false negatives.
Finally, note that our target is benign, but poten-
tially buggy non-obfuscated apps. If the app writer
tries to either obfuscate their code or take advan-
tage of features that are not treated conservatively
(such as reﬂection) to hide control ﬂow, the preci-
sion and soundness of our analysis will suﬀer. Luck-
ily, the presence of obfuscation is relatively easy to
detect [22].
1.2 Contributions
Our contributions are three-fold:
• Using a set of .NET WP (Windows Phone) ap-
plications, we study how existing applications
implement resource access prompts. We note
that some advertising libraries access location
data without a prompt.
• We propose a two-prong static analysis algo-
rithm for correct resource access prompt place-
ment. We ﬁrst attempt to use a fast, dominator-
based placement technique. If that fails, we re-
sort to a slower but more exhaustive backward
search.
• We evaluate our approach to both locating
missing prompts and placing them when they
are missing on 100 apps. Overall, our two-
prong strategy of dominator-based and back-
ward placement succeeds in about 95% of all
unique cases. Our analyses run in seconds, mak-
ing it possible to run them as part of the app
submission process.
Our analysis reveals that some application develop-
ers fail to show the proper set of prompts, showing
the diﬃculty and ineﬀectiveness of manual place-
ment. Frequently, the issue that exacerbates this
situation is that resource access takes place within
third-party libraries shipped as bytecode, making
them more diﬃcult to reason about largely placing
them outside developer’s control.
1.3 Paper Organization
The rest of this paper is organized as follows. We
discuss case studies of real applications and chal-
lenges associated with proper prompt placement in
Section 2. We then formulate the problem and pro-
vide much of the insight for our proposed solution
in Section 3. We discuss the implementation of the
algorithms in Section 4. Results from an experi-
mental study are described in Section 5 and further
discussed in Section 6. We summarize related work
in Section 7 and conclude in Section 8.
2 Background
We ﬁrst provide three motivating case studies in Sec-
tion 2.1 and then provide intuition for the complex-
ity of the problem in Section 2.2.
2.1 Motivating Case Studies
We begin by discussing several interesting real-world
examples, which illustrate how existing WP apps
mediate access to location data. One of the ways
in which the WP SDK exposes location access API
to applications is through the GeoCoordinateWatcher
class
in the System.Device.Location namespace.
Prompts are created with a call to MessageBox.Show,
with the text of the prompt provided by the devel-
oper.
Figure 1 shows screen-shots of three applica-
tions — AroundMe, Burger King (inoﬃziell), Lumi-
aClock — immediately before these applications in-
114  22nd USENIX Security Symposium 
USENIX Association
USENIX Association  
22nd USENIX Security Symposium  115
(a)AroundMe(b)BurgerKing(c)LumiaClockFigure1:Screen-shotsofthreeexaminedapplications.TheﬁrsttwoapplicationsdisplayalocationpromptpriortoinvokinglocationAPIs.Thethirdapplicationnevershowsalocationprompt;thescreen-shotwascapturedwhenwedetectedtheﬁrsttimethatalocationAPIwasinvokedbytheapplication.AppResourceaccessesAPIsusedLibrariesAroundMe2TryStart,getPositionAroundMe.dllBurgerKing5Start,getPositionBurgerKing.dll,GART.dllLumiaClock2Start,getPositionSOMAWP7.dllFigure2:Locationaccessesfoundinthreeapps.vokelocationaccessAPI.WepickedthesethreeappsfromtheWPStore,ﬁlteringforappsthatuseGPSlocationdata.EachapplicationconsistsofasetofDLLsandresources.Wehavedisassembledtheap-plicationsandinspectedthecodetoﬁndinstancesoflocationAPIinvocations.Figure2shows(1)thenumberoflocationaccesspointsobservedineachofthethreeapplications;(2)whichlocationAPIisused;and(3)whichlibrariescallthelocationAPI.AsshowninFigure2,locationaccesshappensbothinapplicationcodeandinthird-partylibraries.Forinstance,GART.dllisalibrarythatprovidesaug-mentedrealityfeaturesandSOMAWP7.dllisalibrarythatprovidesadvertisingtoWPapplications.Notsurprisingly,theuseoflocationdatabythird-partylibrariescomplicatesaccessmediation,asthird-partylibrariesoftencomeasablackboxtoappli-cationdevelopers.Thefollowingin-depthanalysisillustratestheissue.Case1(properprotection):Locationaccessesarecontainedonlyintheapplicationcodeandprop-erlymediatedbyaruntimeconsentdialog.ThecodesnippetinFigure3(a)isfromtheAroundMeapplica-tion.Asshowninthecodebelow,thisapplicationpublicstaticboolAroundMe.App.CheckOptin(){if(((Option)Enum.Parse(typeof(Option),Config.GetSetting(SettingConstants.UseMyLocation),true))==Option.Yes){returnGetCurrentCoordinates();}if(MessageBox.Show("Thisappneeds...","Uselocationdata?",MessageBoxButton.OKCancel)==MessageBoxResult.OK){Config.UpdateSetting(newKeyValuePair(SettingConstants.UseMyLocation,Option.Yes.ToString()));returnGetCurrentCoordinates();}...}(a)IllustrationforCase1publicBurgerKing.View.MapPage(){this.InitializeComponent();base.DataContext=newMapViewModel();this.BuildApplicationBar();if(AppSettings.Current.UseLocationService){this.watcher=newGeoCoordinateWatcher();}..}protectedvirtualvoidGART.Controls.ARDisplay.OnLocationEnabledChanged(DependencyPropertyChangedEventArgse){if(this.servicesRunning){if(this.LocationEnabled){this.StartLocation();}else{this.StopLocation();}}}(b)IllustrationforCase2publicSomaAd(){...this._locationUseOK=true;...if(this._locationUseOK){this.watcher=newGeoCoordinateWatcher(GeoPositionAccuracy.Default);this.watcher.MovementThreshold=20.0;this.watcher.StatusChanged+=newEventHandler(this.watcher_StatusChanged);this.watcher.Start();}}(c)IllustrationforCase3Figure3:IllustrativecasesforSection2.1.invokesGetCurrentCoordinates()onlyaftertheuserclickstheOKbuttonasshowninFigure1.Case2(partialprotection):Locationaccessesarespreadacrossapplicationandthird-partycodeandonlyaccessesbyapplicationcodearepro-tectedbyruntimeconsentdialog.Thecodesnip-petinFigure3(b)isfromtheBurgerKingapplica-tion.TheconsentdialogshowninFigure1onlyaf-fectsAppSettings.Current.UserLocationServiceandleavesGART.Controls.ARDisplay.StartLocation()un-protected.Usingnetworkpacketinspection,wecon-while(P){
l1 = getLocation();
}
prompt();
while(P){
(a) original
l1 = getLocation();
}
while(P){
(b) static prompt
if(not-yet-prompted-for-location){
prompt();
}
l1 = getLocation();
}
(c) dynamic check
Figure 4: Resource access in a loop.
ﬁrmed that the application accesses and transmits
location using the GART component even when the
Cancel button is clicked.
Case 3 (no protection): Location accesses are
only present in third-party code and the applica-
tion provides no consent dialogs. The following code
snippet is from the LumiaClock application. The
application has no location features. Although the
third-party code SomaAd exposes a ﬂag to protect lo-
cation access, the application appears unaware of it.
Moreover, the SomaAd component enables the ﬂag,
locationUseOK by default, as shown in Figure 3(c).
In summary, the case studies above
Summary:
demonstrate that properly protecting location access
is challenging because multiple components, includ-
ing third-party libraries, are involved in accessing
sensitive resources. The current practice often fails
in providing adequate privacy protection, as some
applications do not honor the user’s choice (as shown
in case 2) or do not obtain the user’s consent prior
to acquiring privacy-sensitive information.
2.2 Challenges
Next, we dive into the properties that we want to en-
sure, while deciding where to place missing prompts
via static analysis. Na¨ıvely, one might suspect that
prompt placement is a fairly trivial task, reducing to
(1) ﬁnding resource access points and (2) inserting
prompts right in front of them. In reality, situation
is considerably more complex.
In this section, we
systematically investigate the challenges we need to
overcome in order to provide a satisfactory solution.
problem that it might initially seem; indeed, con-
sider the following code:
if(P) l1 = getLocation();
l2 = getLocation();
There are two location access points and two ways
to avoid duplicate prompts. One is to introduce
a boolean ﬂag to keep track of whether we have
prompted for the location already:
flag = true;
if(P){
prompt();
flag = true;
l1 = getLocation();
}
if(!flag){
prompt();
l2 = getLocation();
}
The disadvantage of this approach is that it requires
introducing extra runtime instrumentation to per-
form this sort of bookkeeping. A fully static ap-
proach involves rewriting the original code by “fold-
ing” the second prompt into the if:
if(P){
prompt();
l1 = getLocation();
l2 = getLocation();
}else{
prompt();
l2 = getLocation();
}
This approach has the advantage of not having to in-
troduce extra bookkeeping code. The disadvantage
is replication of the existing code across the branches
of the if, which leads to extra code growth.
The problem of double-prompts can be exacer-
bated. Figure 4a illustrates the challenge of placing
a prompt within a loop. Placing the prompt before
the loop as in Figure 4b is not valid if the loop never
executes. Placing the prompt within the loop body
will lead to execution on every iteration. However, a
simple dynamic check will ensure that the location
prompt is not shown more than once (Figure 4c).
2) Sticky prompts: Applications frequently make
user-granted permissions persistent and avoid dupli-
cate prompts, by saving the prompt status to the
app’s isolated storage, as illustrated in Figure 5.
Here the challenge comes in both recognizing ex-
isting “sticky” prompts in app code and in making
inserted prompts sticky, as discussed in Section 4.3.
1) Avoiding double-prompts: We need to avoid
prompting the user for access to resource R more
than once on a given execution path. This is a harder
3) Avoiding weaker prompts: Suppose there are
two resources r1, r2 such that r2 is less sensitive
than r1. If an app has already prompted the user for
116  22nd USENIX Security Symposium 
USENIX Association
access to r1, it should avoid prompting the user for
access to resource r2. For instance, if an app already
has requested access to ﬁne-grained location, there
is no need to prompt for access to coarse-grained lo-
cation. Note that in the current version of the WP
operating system, there is no diﬀerence in capabili-
ties between ﬁne- and coarse-grained locations; both
require the ID CAP LOCATION capability in the app
manifest. However, in the future more ﬁne-grained
capabilities subsuming one another may evolve, as
they have on Android. Moreover, it is still possible
and perhaps even desirable to distinguish between
ﬁne- and coarse-grained locations when prompting
at runtime, even though they are treated the same
at installation time.
4) Avoiding prompts in background tasks:
WP apps provide non-interactive background tasks.
These are often used for polling remote servers and
other tasks that do not require access to the user’s
screen beyond, perhaps, a live tile of the app. We
cannot raise dialog boxes within background tasks.
To properly determine where the prompts should be
located, we should compute the call graph and deter-
mine what foreground code precedes the code within
background tasks.
5) Avoiding prompts in libraries: Given that li-
braries are often shipped in the form of bytecode and
are updated separately from the rest of the applica-
tions, we choose to avoid placing prompts in library
code. This approach allows developers to examine
prompt placement within their own code, and to al-
leviate the need to keep custom-modiﬁed versions
of third-party libraries such as SOMAWP7.dll, which
can make error reporting, debugging, and sharing
libraries across apps a challenge.
if (MessageBox.Show(
"This app needs to know your location
in order to find locations
around you, can it use your location data?
note: you can change the settings later
through the settings menu",
"Use location data? ", 1) == 1)
{
}
Config.UpdateSetting(
new KeyValuePair(
SettingConstants.UseMyLocation,
Option.Yes.ToString()));
return
GetCurrentCoordinates();
Figure 5: Sticky location prompt.
3 Overview
A recent spate of research eﬀorts is centered around
detecting undesirable information ﬂows, i.e. sensi-
tive data like contacts leaving the phone, usually
via the network (e.g.,
[9, 10]). Reasoning about
these kinds of leaks involves understanding inter-
procedural data ﬂow within the app and perhaps
even across diﬀerent apps. Data ﬂow analysis of this
kind is a known diﬃcult problem which, despite a
great deal of work on both the static and runtime
sides has not yet found widespread practical deploy-
ment [24].
In the context of mobile apps, there is another
aspect further complicating this problem. Even if
there is in fact a perfect mechanism for precisely
and eﬃciently tracking inter-procedural data ﬂow,
a viable policy is hard to come by.
Indeed, how
does a tool automatically distinguish between a Yelp
app that shares GPS location information with a
back-end server to obtain restaurant listings from
(a potentially malicious) ﬂashlight app that obtains
the same GPS information and shares it with an
ad server? Constructing a robust policy is not triv-
ial. Our paper rather focuses on providing a method
for assisting application developers in checking their
apps against the currently accepted practice of ob-