istics.
Many distilled instruction sequences are observed to
merge to other instructions sequences after a few instruc-
tions. This property is called self-repairing [38] in Intel
IA-32 architecture. For example, in Figure 5(a) instruc-
tion sequence s01 merges to instruction sequence s00
USENIX Association
Security ’06: 15th USENIX Security Symposium
231
only after one instruction. Therefore, s01 is excluded.
Similarly, instruction sequences s04, s06 and s0b can be
excluded.
Step 3 For some instruction sequences, if we execute
them, whatever execution path being taken, an illegal in-
struction is inevitably reachable. We say an instruction is
inevitably reachable if two conditions holds. One is that
there are no cycles (loops) in the EIFG of the instruction
sequence; the other is that there are no external address
nodes in the EIFG of the instruction sequence.
We exclude the instruction sequences in which illegal
instructions are inevitably reachable, because causing the
server to execute an illegal instruction is not the purpose
of an buffer overﬂow attack (this assumption was also
made by others [15, 32], implicitly or explicitly). Note
that however the existence of illegal instruction nodes
cannot always be used as a criteria to exclude an instruc-
tion sequence unless they are inevitably reachable; oth-
erwise attackers may obfuscate their program by adding
non-reachable illegal instructions.
Based on this heuristic, we can exclude instruction se-
quence s08 in Figure 5(a), since it will eventually execute
an illegal instruction v0f .
After these three steps, in Figure 5(a) only instruction
sequence s00 is left for consideration in the next stage.
5 Instruction Sequences Analyzer
A distilled instruction sequence may be a sequence of
random instructions or a fragment of a program in ma-
chine language. In this section, we propose two schemes
to differentiate these two cases. Scheme 1 exploits the
operating system characteristics of a program; Scheme
2 exploits the data ﬂow characteristics of a program.
Scheme 1 is slightly faster than Scheme 2, whereas
Scheme 2 is much more robust to obfuscation.
5.1 Scheme 1
A program in machine language is dedicated to a spe-
ciﬁc operating system; hence, a program has certain
characteristics implying the operating system on which
it is running, for example calls to operating system or
kernel library. A random instruction sequence does not
carry this kind of characteristics. By identifying the call
pattern in an instruction sequence, we can effectively dif-
ferentiate a real program from a random instruction se-
quence.
More speciﬁcally, instructions such as “call” and “int
0x2eh” in Windows and “int 0x80h” in Linux may in-
dicate system calls or function calls. However, since
the op-codes of these call instructions are only one byte,
even normal requests may contain plenty of these byte
values. Therefore, using the number of these instructions
as a criteria will cause a high false positive rate. To ad-
dress this issue, we use a pattern composed of several in-
structions rather than a single instruction. It is observed
that before these call instructions there are normally one
or several instructions used to transfer parameters. For
example, a “push” instruction is used to transfer param-
eters for a “call” instruction; some instructions that set
values to registers al, ah, ax, or eax are used to transfer
parameters for “int” instructions. These call patterns are
very common in a fragment of a real program. Our ex-
periments in Section 6 show that by selecting the appro-
priate parameters we can rather accurately tell whether
an instruction sequence is an executable code or not.
Scheme 1 is fast since it does not need to fully disas-
semble a request. For most instructions, we only need
to know their types. This saves lots of time in decoding
operands of instructions.
Note that although Scheme 1 is good at detecting most
of the known buffer overﬂow attacks, it is vulnerable
to obfuscation. One possible obfuscation is that attack-
ers may use other instructions to replace the “call” and
“push” instructions. Figure 5.1 shows an example of
obfuscation, where “call eax” instruction is substituted
by “push J4” and “jmp eax”. Although we cannot fully
solve this problem, by recording this kind of instruction
replacement patterns, we may still be able to detect this
type of obfuscation to some extent.
I1: push 10
I2: call eax
Be obfuscated to
J1: push 10
J2: push J4
J3: jmp eax
J4: ...
Figure 6: An obfuscation example. Instruction “call eax” is
substituted by “push J4” and “jmp eax”.
Another possible obfuscation is one which ﬁrst en-
crypts the attack code and then decrypts it using a de-
cryption routine during execution time [40]. This de-
cryption routine does not include any calls, thus evading
the detection of Scheme 1.
5.2 Scheme 2
Next we propose Scheme 2 to detect the aforemen-
tioned obfuscated buffer overﬂow attacks. Scheme 2 ex-
ploits the data ﬂow characteristics of a program. Nor-
mally, a random instruction sequence is full of data ﬂow
anomalies, whereas a real program has few or no data
ﬂow anomalies. However, the number of data ﬂow
anomalies cannot be directly used to distinguish a pro-
gram from a random instruction sequence because an at-
tacker may obfuscate his program easily by introducing
enough data ﬂow anomalies.
In this paper, we use the detection of data ﬂow
anomaly in a different way called code abstraction. We
232
Security ’06: 15th USENIX Security Symposium
USENIX Association
...(cid:13)
I1: mov eax,2(cid:13)
...(cid:13)
I2: mov eax,3(cid:13)
...(cid:13)
...
(ecx is undefined at(cid:13)
this point)(cid:13)
K1: mov eax,ecx(cid:13)
...(cid:13)
...(cid:13)
J1: mov eax,2(cid:13)
...(cid:13)
(ebx is undefined at(cid:13)
this point)(cid:13)
J2: mov eax,ebx(cid:13)
...(cid:13)
(a)
(b)
(c)
Figure 7: Data ﬂow anomaly in execution paths. (a) deﬁne-
deﬁne anomaly. Register eax is deﬁned at I1 and then deﬁned
again at I2. (b) undeﬁne-reference anomaly. Register ecx is
undeﬁned before K1 and referenced at K1 (c) deﬁne-undeﬁne
anomaly. Register eax is deﬁned at J1 and then undeﬁned at J2.
observe that when there are data ﬂow anomalies in an
execution path of an instruction sequence, some instruc-
tions are useless, whereas in a real program at least one
execution path have a certain number of useful instruc-
tions. Therefore, if the number of useful instructions in
an execution path exceeds a threshold, we conclude the
instruction sequence is a segment of a program.
Data Flow Anomaly The term data ﬂow anomaly was
originally used to analyze programs written in higher
level languages in the software reliability and testing
ﬁeld [25, 26].
In this paper, we borrow this term and
several other terms to analyze instruction sequences.
During a program execution, an instruction may im-
pact a variable (register, memory location or stack) on
three different ways: deﬁne, reference, and undeﬁne. A
variable is deﬁned when it is set a value; it is referenced
when its value is referred to; it is undeﬁned when its
value is not set or set by another undeﬁned variable. Note
that here the deﬁnition of undeﬁned is different from that
in a high level language. For example, in a C program,
a local variable of a block becomes undeﬁned when con-
trol leaves the block.
A data ﬂow anomaly is caused by an improper se-
quence of actions performed on a variable. There are
three data ﬂow anomalies: deﬁne-deﬁne, deﬁne-undeﬁne,
and undeﬁne-reference [26]. The deﬁne-deﬁne anomaly
means that a variable was deﬁned and is deﬁned again,
but it has never been referenced between these two ac-
tions. The undeﬁne-reference anomaly indicates that a
variable that was undeﬁned receives a reference action.
The deﬁne-undeﬁne anomaly means that a variable was
deﬁned, and before it is used it is undeﬁned. Figure 7
shows an example.
Detection of Data Flow Anomalies There are static
[25] or dynamic [26] methods to detect data ﬂow anoma-
lies in the software reliability and testing ﬁeld. Static
methods are not suitable in our case due to its slow speed;
dynamic methods are not suitable either due to the need
for real execution of a program with some inputs. As
such, we propose a new method called code abstraction,
which does not require real execution of code. As a re-
sult of the code abstraction of an instruction, a variable
U u
u
r
UR
r
d
u
r
d
D
d
u
d
u
DD
d
r
d
u
r
DU
R
r
Figure 8: State diagram of a variable. State U: undeﬁned,
state D: deﬁned but not referenced, state R: deﬁned and refer-
enced, state DD : abnormal state deﬁne-deﬁne, state U R: ab-
normal state undeﬁne-reference and state DU: abnormal state
deﬁne-undeﬁne.
could be in one of the six possible states. The six possi-
ble states are state U : undeﬁned; state D: deﬁned but
not referenced; state R: deﬁned and referenced; state
DD : abnormal state deﬁne-deﬁne; state U R: abnormal
state undeﬁne-reference; and state DU : abnormal state
deﬁne-undeﬁne. Figure 8 depicts the state diagram of
these states. Each edge in this state diagram is associated
with d, r, or u, which represents “deﬁne”, “reference”,
and “undeﬁne”, respectively.
We assume that a variable is in “undeﬁned” state at
the beginning of an execution path. Now we start to tra-
verse this execution path. If the entry instruction of the
execution path deﬁnes this variable, it will enter the state
“deﬁned”. Then, it will enter another state according to
the next instruction, as shown in Figure 8. Once the vari-
able enters an abnormal state, a data ﬂow anomaly is de-
tected. We continue this traversal to the end of the exe-
cution path. This process enables us to ﬁnd all the data
ﬂow anomalies in this execution path.
Pruning Useless Instructions Next we leverage the
detected data ﬂow anomalies to remove useless instruc-
tions. A useless instruction of an execution path is an
instruction which does not affect the results of the exe-
cution path; otherwise, it is called useful instructions. We
may ﬁnd a useless instruction from a data ﬂow anomaly.
When there is an undeﬁne-reference anomaly in an exe-
cution path, the instruction which causes the “reference”
is a useless instruction. For instance, the instruction K1
in Figure 7, which causes undeﬁne-reference anomaly, is
a useless instruction. When there is a deﬁne-deﬁne or
deﬁne-undeﬁne anomaly, the instruction that caused the
former “deﬁne” is also considered as a useless instruc-
tion. For instance, the instructions I1 and J1 in Figure 7
are useless instructions because they caused the former
“deﬁne” in either the deﬁne-deﬁne or the deﬁne-undeﬁne
anomaly.
After pruning the useless instructions from an execu-
tion path, we will get a set of useful instructions. If the
USENIX Association
Security ’06: 15th USENIX Security Symposium
233
Algorithm 2 check if the number of useful instructions
in an execution path exceeds a threshold
Input: entry instruction of an instruction sequence, EISG G
total ← 0; useless ← 0 ; stack ← empty
initialize the states of all variables to “undeﬁned”
push the entry instruction,states,total and useless to
stack
while stack is not empty do
pop the top item of stack to i,states,total and useless
if total − useless greater than a threshold then
return true
if i is visited then
continues
mark i visited
total ← total + 1
Abstractly execute instruction i (change the states of
variables according to instruction i)
if
then
there is a deﬁne-deﬁne or deﬁne-undeﬁne anomaly
useless ← useless + 1
if there is a undeﬁne-reference anomaly then
useless ← useless + 1
for each instruction j directly following i in the G do
push j, states ,total and useless to stack
return false
number of useful instructions in an execution path ex-
ceeds a threshold, we will conclude the instruction se-
quence is a segment of a program.
Algorithm 2 shows our algorithm to check if the num-
ber of useful instructions in an execution path exceeds a
threshold. The algorithm involves a search over an EISG
in which the nodes are visited in a speciﬁc order derived
from a depth ﬁrst search. The algorithm assumes that
an EISG G and the entry instruction of the instruction
sequence are given, and a push down stack is available
for storage. During the search process, the visited node
(instruction) is abstractly executed to update the states
of variables, ﬁnd data ﬂow anomaly, and prune useless
instructions in an execution path.
Handling Special Cases Next we discuss several spe-
cial cases in the implementation of Scheme 2.
General purpose instruction The instructions in the
IA32 instruction set can be roughly divided into four
groups: general purpose instructions, ﬂoating point unit
instructions, extension instructions, and system instruc-
tions. General purpose instructions perform basic data
movement, arithmetic, logic, program ﬂow, and string
operation, which are commonly used by programmers to
write applications and system software that run on IA-32
processors [3]. General purpose instructions are also the
most often used instructions in malicious code. We be-
lieve that malicious codes must contain a certain number
of general purpose instructions to achieve the attacking
goals. Other types of instructions may be leveraged by
an attacker to obfuscate his real-purpose code, e.g., used
as garbage in garbage insertion. As such, we prune other
groups of instructions as well.
Initial state of registers It is hard for attackers to know
the run-time values of registers before malicious code is
executed. That is, their values are unpredictable to at-
tackers. Therefore, it is reasonable to assume that the
initial states of all variables are “undeﬁned” at the begin-
ning of an execution path. The register “esp”, however,
is an exception since it is used to hold the stack pointer.
Thus, we set register esp “deﬁned” at the beginning of an
execution path.
Indirect address An indirect address is an address that
serves as a reference point instead of an address to the
direct memory location. For example, in the instruction
“move eax,[ebx+01e8]”, register “ebx” may contain the
actual address of the operand. However, it is difﬁcult
to know the run-time value of register “ebx”. Thus, we
always treat a memory location to which an indirect ad-
dress points as state “deﬁned” and hence no data ﬂow
anomaly will be generated. Indeed, this treatment suc-
cessfully prevents an attacker from obfuscating his code
using indirect addresses.
We will defer the discussion on the capability of
Scheme 2 in defending against obfuscation until Sec-
tion 7.
6 Experiments
6.1 Parameter Tuning
Both Scheme 1 and Scheme 2 use a threshold value
to determine if a request contains code or not. Clearly,
it is critical to set the threshold values appropriately so
as to minimize both detection false positive rate and
false negative rate. To ﬁnd out the appropriate thresh-
olds, we tested both schemes of SigFree against 50 un-
encrypted attack requests generated by Metasploit frame-
work, worm Slammer, CodeRed (CodeRed.a) and a
CodeRed variation (CodeRed.c), and 1500 binary HTTP
replies (52 encrypted data, 23 audio, 195 jpeg, 32 png,
1153 gif and 45 ﬂash) intercepted on the network of Col-
lege of Information Science and Technology. Note that
we tested on HTTP replies rather than requests as nor-
mal data for parameter tuning, because HTTP replies in-
clude more diverse binaries (test over real traces of web
requests is reported in Section 6.3). Also note that al-
though worm Slammer attacks Microsoft SQL servers
rather than web servers, it also exploits buffer overﬂow
vulnerabilities.
Threshold of Push-calls for Scheme 1 Figure 9(a)
shows that all instruction sequences distilled from a nor-
mal request contain at most one push-call code pattern.
234
Security ’06: 15th USENIX Security Symposium
USENIX Association
.
s
t
s
e
u
q
e
r
l
a
m
r
o
n
f
o
r
e
b
m
u
N
1400
1200
1000
800
600
400
200
0
1288
212
1
0
Number of push-calls
.
s
k
c
a
t
t
a
f
o
r
e
b
m
u
N
18
16
14