### Static Analysis of XMark Queries

In Section 4, we over- and under-estimate the access control automata to perform the static analysis. This process aims to determine whether runtime access checks can be removed for each query/role pair.

#### Query Efficiency
For each query/role pair, we check if our static analysis can eliminate the need for a runtime access check. We conduct this experiment in two scenarios: one with the DTD (Document Type Definition) and one without it. We statically analyze all XPath expressions in each query. If an XPath expression in the query is always denied, we rewrite the query.

#### Results
Tables 2(a) and 2(b) present the results of our static analysis with and without the DTD, respectively. Each entry in the tables is marked with "G", "D", or "−".

- **"G"** indicates that all XPath expressions in the query are always granted.
- **"D"** indicates that at least one XPath expression in the query is always denied, while all others are always granted.
- **"−"** indicates that at least one XPath expression in the query is statically indeterminable.

A query marked by "G" contains no XPath expressions requiring a runtime access check. If a query is marked by "D", it contains XPath expressions that will always fail their runtime access checks. In this case, we rewrite such expressions as null lists, making the runtime access check unnecessary. If queries are marked by "−", the result of the runtime check is unpredictable and must be performed.

#### Example
From Table 2(a), we see that Query #4 for role IM is marked "D". This means that when a user in the IM role makes Query #4, we first rewrite the query so that it can be evaluated without the runtime access check.

#### Summary of Results
- **With DTD (Table 2(a))**: 65% of the query/role pairs do not require a runtime access check ("G" + "D"). For 25% of the query/role pairs, we can optimize queries by rewriting them ("D").
- **Without DTD (Table 2(b))**: 40% of the query/role pairs do not require a runtime access check ("G" + "D"). For 10% of the query/role pairs, we can optimize queries by rewriting them ("D").

Even without DTDs, our static analysis can significantly optimize queries. The analysis can be further refined by using DTD information. Note that the sample policy includes XPaths with predicates, which can cause over- and under-estimation of the access control automata. Despite this, our static analysis often makes runtime access checks unnecessary.

### Nodes Exempted from Access or Runtime Access Check

To evaluate the reduction in query evaluation cost, we count the number of nodes exempted from access or runtime access checks by our static analysis. Figure 5 shows the number of nodes exempted for different roles.

![Nodes Exempted from Access or Runtime Access Check](figure5.png)

This figure illustrates the significant reduction in the number of nodes that need to be checked, thereby improving the efficiency of query processing.