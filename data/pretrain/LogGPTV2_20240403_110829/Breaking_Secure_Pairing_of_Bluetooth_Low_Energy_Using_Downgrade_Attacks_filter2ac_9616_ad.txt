fake mobile with the victim device even if the victim device
enforces the SCO mode. Now the fake mobile and fake de-
vice can launch an MITM attack.
4.4.2 Attacks without Access to Victim Device
In §2, we show that two secure measures can be adopted
to protect sensitive data on a device, namely pairing and
attribute permissions. While secure pairing protects the
communication and attribute permissions limit access to at-
tributes based on adopted association methods, we ﬁnd that
attribute permissions are often misused and the misused per-
missions will cause security issues.
Attack V – Passive eavesdropping attack. This attack
works when the victim device has only read/write attributes.
We assume that before the attack, the mobile pairs with the
peer device that uses the SCO mode. To launch this attack,
the attacker ﬁrst blocks the victim device. A fake device then
performs the “Pin or Key Missing (0x06)” error attack
so that the communication between the fake device and the
victim mobile is downgraded to plaintext. The fake device
then goes ofﬂine and the blocker is turned off. We ﬁnd that
the victim mobile then communicates with the victim peer
BLE device in plaintext and can access the peer device’s
read/write attributes. Since the communication is in plain-
text, the attacker can eavesdrop on the communication and
retrieve sensitive information using a sniffer. Similar to the
false data injection attack, even if the user checks the bonded
devices list at the mobile’s system settings, no abnormalities
will be observed.
Attack VI – Bypassing the whitelist. A BLE device may
use a whitelist of MAC address and IRK, and allow connec-
tions only from already paired mobiles. Since an attacker
can steal a victim mobile’s MAC address and IRK, a fake
mobile with the same MAC address and IRK can bypass the
whitelist and connect to the victim peer BLE device. We will
use this attack to bypass a keyboard’s whitelist and perform
further attacks.
Attack VII – Data manipulation. The fake mobile may
attempt to access sensitive services once it connects to the
victim device. If the permission of the attributes of the BLE
device is encrypted read/write or authenticated read/write,
the fake mobile has to pair with the peer device ﬁrst.
If
the BLE device enforces the SCO mode or the attribute
permission is authenticated read/write, the fake mobile has
to perform secure pairing with the peer BLE device and may
not be able to perform the attack. Recall that an authenticated
read/write attribute requires secure pairing from the mobile.
Attack VIII – MITM attacks. If the data manipulation at-
tack is possible on a peer device, the MITM attack can then
be deployed. To this end, a fake device connects to the An-
droid mobile using the fake data injection attack and a fake
mobile sets up another connection with the peer device using
the data manipulation attack. The fake device and the fake
mobile can now communicate with each other, and work as
the MITM to relay or manipulate the messages between the
victim device and mobile.
5 Countermeasures
In this section, we address the design ﬂaws discussed in §3
and present countermeasures to enforce secure pairing within
Android. For compatibility, we implement the SCO mode as
a conﬁgurable option for the BLE programming framework,
allowing apps to defeat the presented attacks. If the option
is not used, BLE on an Android mobile follows the current
BLE speciﬁcation to support legacy devices. We have im-
plemented a prototype on Android 8 based on the Android
Open Source Project (AOSP) [6]. Please note the issue of
multiple apps (including malware) using the same peer BLE
device with one connection has been addressed in co-located
attacks [11–13]. Our defense measure still works if we ig-
nore the danger of co-located attacks and allow multiple apps
per connection. For example, all apps connecting to the same
peer device shall follow our defense measure mechanism to
enforce the SCO mode and deal with errors. Other imple-
mentations are possible too and will be up to the policy us-
ing the peer device. Our defense measure can also be directly
applied in the scenario that one app may connect to multiple
devices. The detailed discussion of dealing with these two
cases is out of the scope of this work.
5.1 Overview
For a mission critical application, the app knows the peer
device’s I/O capabilities, which should support secure pair-
ing. With the SCO mode enabled at the mobile, the user has
to physically authenticate the BLE device. If the negotiated
association method between the mobile and its peer device
is not the speciﬁed one, the communication shall be rejected
and a critical security warning shall be directed to the user.
The principle of the proposed defense measures is also ap-
plicable to system wide devices such as keyboards managed
by a system settings app. The system settings app manages
BLE proﬁles. A proﬁle speciﬁes aspects of a class of BLE
devices. For example, keyboards follow the HID proﬁle
speciﬁcation, which recommends association methods for
keyboards as part of the speciﬁcation. Therefore, a proﬁle
USENIX Association
29th USENIX Security Symposium    45
Design ﬂaw
Pairing stage
Defense
Flaw 1
Initiation
Flaw 2
Flaw 3
Flaw 4
Status
management
Error
handling
Bond
management
Specifying a secure association
method
Enforcing a speciﬁed association
method and notifying the app of the
association method in time
Allowing apps to handle errors;
Enforcing speciﬁed association
method through stack when errors
occur
Removing suspicious bond and
starting secure re-pairing.
Table 2: Enforcing Secure Pairing on Android
can be updated if the class of BLE devices requires the SCO
mode and the systems setting app will also be updated to
enforce the SCO mode.
Our solution will not affect user experience much as it
takes effect only when there are errors caused by attacks. A
mobile app using our proposed solution works no different
than a traditional one when there are no errors or attacks.
Prompting users under attacks is apparently very necessary
and improves security. For apps that do not have security
concerns, they can just communicate with no pairing, but in
plaintext. In this case, the proposed solution will not prompt
users and affect user experience. Our proposed solution has
the ﬂexibility of dealing with different use cases while those
cases with no security are not the focus of this paper.
5.2 Enabling the SCO mode
Table 2 summarizes how we address the four design ﬂaws
listed in Table 1 in the four stages of a pairing process respec-
tively. We present the detailed defense measures as follows.
Addressing Design Flaw 1: Specifying a secure associa-
tion method. An Android mobile can enforce a secure as-
sociation method after the mobile and peer device have de-
termined the association method through the exchanged I/O
capabilities between Step 5 and Step 6 in Figure 2. If the
negotiated association method is not the speciﬁed one, An-
droid should reject further actions and give the user a security
warning. The Android BLE stack shall cache the speciﬁed
secure association method in memory and save it in a conﬁg-
uration ﬁle on its nonvolatile storage if bonding is requested.
To address Design Flaw 1, an app can use our func-
tion specifyPairing() to store the speciﬁed associa-
tion method in a conﬁguration ﬁle scm.conf through the
Java Native Interface (JNI). Our specifyPairing() is
a system API. It can programmatically obtain the app’s
package name. File scm.conf is located in the system
folder /data/misc/bluedroid/ and stores the app’s pack-
age name and metadata including the speciﬁed association
method. An app cannot manipulate metadata of another app.
Victim tablet
Fake keyboard
(cid:256) 123456 (cid:257)
Sees
User
Inputs(cid:256)123456
(cid:257)
Pair with Passkey Entry
123456
(iv)
(ii)
Request pairing using
Passkey Entry
Pair with Passkey Entry
(i)
(iii)
Sends(cid:256)123456(cid:257)
(cid:256)
1
2
3
4
5
6
(cid:257)
123456
123456
Attacker
Victim keyboard
Fake tablet
Figure 4: Workﬂow of attacking the Keyboard with Passkey
Entry enforced
Addressing Design Flaw 2: Enforcing a speciﬁed associ-
ation method; Notifying the app association method in
time. When the pairing process starts, Android uses the
system function smp_proc_pair_cmd() to exchange pair-
ing features with the peer device. The bits in an integer
peer_io_caps are used to indicate the peer device’s I/O ca-
pabilities. Therefore, smp_proc_pair_cmd() can know the
negotiated association method through announced I/O capa-
bilities. In smp_proc_pair_cmd(), we read the conﬁgura-
tion ﬁle scm.conf and obtain the app’s speciﬁed association
method. If the speciﬁed association method and negotiated
association method do not match, smp_proc_pair_cmd()
sends the error code SMP_PAIR_AUTH_FAIL to the peer
BLE device, halts the pairing process, breaks the connec-
tion and sends warning messages to the user. Note that
smp_proc_pair_cmd() can obtain the negotiated associ-
ation method at the earliest possible time. This also ad-
dresses Design Flaw 2. An app knows its speciﬁed asso-
ciation method will be enforced. If it cannot be enforced, the
user will receive a security warning.
Addressing Design Flaw 3: Allowing an app to handle
errors; Enforcing the speciﬁed association method
through the stack when errors occur.
The “Pin
or Key Missing” error occurs because the fake de-
vice does not have the LTK. The “Insufficient
Authentication/Encryption”
error occurs because
the BLE connection does not have the permission to access
the attributes on the fake device. Android does not notify the
user these errors and starts a vulnerable association method.
We address the design ﬂaw as follows. If there is any such
pairing related error, the Android BLE stack shall notify the
user and ask the user whether to pair with the peer device.
If the app has a speciﬁed association method in the conﬁgu-
ration ﬁle and the user chooses to pair with the peer device,
Android will enforce the speciﬁed association method, but
give the user a security warning if it cannot be enforced.
Addressing Design Flaw 4: Removing a suspicious bond
for secure re-pairing. An app shall be able to remove
its own bonded devices whenever needed. We make
the system API removeBond() available to applications.
removeBond() is redesigned so that an app can only re-
move its own bond, not bonds of other apps. Therefore,
46    29th USENIX Security Symposium
USENIX Association
Association method
Passkey Entry (Enforced)
Brief physical access
Yes
(cid:2)
No

Numerical Comparison (Enforced)


Table 3: Security of enforced secure association methods. (cid:2):
vulnerable (e.g., to MITM attacks although not necessarily
all attacks). Note: not meaningful to enforce Just Works.
a bond shall maintain metadata including the app’s package
name. removeBond() will obtain the calling app’s package
name and can remove only its own bond.
5.3 Security Analysis
We now discuss BLE pairing security if Android addresses
the design ﬂaws and enforces secure pairing, and the peer
BLE device also enforces secure pairing. Under the assump-
tion that an attacker cannot physically access the mobile or
peer BLE device, the attacks in §4 will fail since secure pair-
ing requires the attacker (operating the fake mobile and fake
device) to see and work on the victim device and mobile.
Unfortunately, when an attacker can physically touch
a BLE keyboard that uses the Passkey Entry association
method, even if both the keyboard and mobile enforce
Passkey Entry, the attacker can still perform the MITM at-
tack as follows. Passkey Entry is secure only if the attacker
cannot obtain the passkey. However, the BLE keyboard is
a human input device, which sends keystrokes to a mobile
device as long as the mobile device is paired with the key-
boards. As shown in Figure 4, (i) if the attacker has brief
physical access to the keyboard, the attacker can pair a fake
mobile with the keyboard by entering a chosen passkey when
the user is away from the device.
(ii) The fake keyboard
later pretends to be the real one and starts a pairing process
with the victim mobile. The victim mobile enforces Passkey
Entry and requires the user to enter a passkey displayed on
the victim mobile. (iii) However, when the user enters the
passkey on the victim keyboard, the fake mobile receives the
user entered passkey. (iv) The fake mobile then sends the
passkey to the fake keyboard, which can then use the passkey
to connect to the victim mobile. The attacker can now per-
form the MITM attack.
the keyboard must have a display.
The MITM attack above will fail when the victim mobile
and keyboard enforce the Numeric Comparison association
method even under the assumption that the attacker can
physically access the keyboard. To implement Numerical
Comparison,
The
attacker’s fake mobile can still be paired with the victim
keyboard because of the assumption of physical access.
However, when the user pairs the victim keyboard with the
victim mobile, the user has to compare the two numbers
displayed on the victim keyboard and the victim mobile.
With the underlying Numerical Comparison protocol,
if
the attacker performs the MITM attack with a fake mobile
Figure 5: The Tested BLE devices
and a fake keyboard in the middle, the two numbers on the
victim keyboard and the victim mobile will be different. The
MITM attack will be detected and fail.
Based on the analysis above, it can be observed that un-
der the assumption that the attacker can physically access
the keyboard, Numerical Comparison is more secure than
Passkey Entry. When we enforce secure pairing, Numeri-
cal Comparison provides the strongest pairing security. The
BLE speciﬁcation treats Passkey Entry and Numeric Com-
parison equally and these two secure association methods
have the same security level - authenticated-and-MITM-
protection. In the speciﬁcation, if either of the two proto-
cols is applied, the connection is considered as authenticated.
This term is not accurate based on our analyses. Table 3 sum-
marizes the security of enforced association method.
6 Evaluation
In this section, we ﬁrst present experiment setup, and then
evaluate the presented attacks and countermeasures.
6.1 Experiment Setup
We use Adafruit Bluefruit LE Sniffer [15] to sniff BLE
communication and collect basic information such as a de-
vice’s MAC address and name from advertising packets
and scan response packets. We use Texas Instruments (TI)
CC2640 [16] development boards to emulate the blocker,
fake BLE device, and fake mobile.
To measure the generality of our attacks against differ-
ent mobile devices and apps (§6.2), we used ﬁve mobiles
from mainstream Android versions from 7.0 to 9.0 as listed
in Table 4 in our experiment, along with 18,929 Android
BLE apps, which were also used in [12], from the Andro-
zoo database [17]. The cumulative user installation of these
BLE apps including those in categories of health & ﬁtness,
business, medical and ﬁnance reaches about 9 billions [12].