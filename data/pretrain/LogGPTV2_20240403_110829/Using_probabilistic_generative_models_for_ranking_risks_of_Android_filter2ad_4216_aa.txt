title:Using probabilistic generative models for ranking risks of Android
apps
author:Hao Peng and
Christopher S. Gates and
Bhaskar Pratim Sarma and
Ninghui Li and
Yuan Qi and
Rahul Potharaju and
Cristina Nita-Rotaru and
Ian Molloy
Using Probabilistic Generative Models for Ranking Risks
of Android Apps
Hao Peng
Purdue University
PI:EMAIL
Ninghui Li
Purdue University
PI:EMAIL
Chris Gates
Purdue University
PI:EMAIL
Yuan Qi
Purdue University
PI:EMAIL
Bhaskar Sarma
Purdue University
PI:EMAIL
Rahul Potharaju
Purdue University
PI:EMAIL
Cristina Nita-Rotaru
Purdue University
PI:EMAIL
ABSTRACT
One of Android’s main defense mechanisms against malicious apps
is a risk communication mechanism which, before a user installs an
app, warns the user about the permissions the app requires, trusting
that the user will make the right decision. This approach has been
shown to be ineffective as it presents the risk information of each
app in a “stand-alone” fashion and in a way that requires too much
technical knowledge and time to distill useful information.
We introduce the notion of risk scoring and risk ranking for
Android apps, to improve risk communication for Android apps,
and identify three desiderata for an effective risk scoring scheme.
We propose to use probabilistic generative models for risk scor-
ing schemes, and identify several such models, ranging from the
simple Naive Bayes, to advanced hierarchical mixture models. Ex-
perimental results conducted using real-world datasets show that
probabilistic general models signiﬁcantly outperform existing ap-
proaches, and that Naive Bayes models give a promising risk scor-
ing approach.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software
General Terms
Security
Keywords
mobile, malware, data mining, risk
1.
INTRODUCTION
As mobile devices become increasingly popular for personal and
business use they are increasingly targeted by malware. Mobile de-
vices are becoming ubiquitous, and they provide access to personal
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Ian Molloy
IBM Research
PI:EMAIL
and sensitive information such as phone numbers, contact lists, ge-
olocation, and SMS messages, making their security an especially
important challenge. Compared with desktop and laptop comput-
ers, mobile devices have a different paradigm for installing new
applications. For computers, a typical user installs relatively few
applications, most of which are from reputable vendors with niche
applications increasingly being replaced by web-based or cloud ser-
vices. For mobile devices, one often downloads and uses many
applications (or apps) with limited functionality from multiple un-
known vendors. Therefore, the defense against malware must de-
pend to a large degree on decisions made by the users.
Indeed
whether an app is malware or not may depend on the user’s pri-
vacy preference. Therefore, an important part of malware defense
on mobile devices is to communicate the risk of installing an app
to users, and to help them make the right decision about whether to
choose and install certain apps.
In this paper we study how to conduct effective risk communi-
cation for mobile devices. We focus on the Android platform. The
Android platform has emerged as one of the fastest growing oper-
ating systems. In June 2012, Google announced that 400 million
Android devices have been activated, with 1 million devices be-
ing activated daily. An increasing number of apps are available for
Android. The Google Play (formerly known as Android Market)
crossed more than 15 billion downloads in May of 2012, and was
adding about 1 billion downloads per month from Dec 2011 to May
2012. Such a wide user base coupled with ease of developing and
sharing applications makes Android an attractive target for mali-
cious application developers that seek personal gain while costing
users’ money and invading users’ privacy. Examples of malware
activities performed by malicious apps include stealing users’ pri-
vate data and sending SMS messages to premium rate numbers.
One of Android’s main defense mechanisms against malicious
apps is a risk communication mechanism which warns the user
about permissions an app requires before being installed, trusting
that the user will make the right decision. Google has made the fol-
lowing comment on malicious apps: “When installing an applica-
tion, users see a screen that explains clearly what information and
system resources the application has permission to access, such as
a phone’s GPS location. Users must explicitly approve this access
in order to continue with the installation, and they may uninstall
applications at any time. They can also view ratings and reviews to
help decide which applications they choose to install. We consis-
tently advise users to only install apps they trust.” This approach,
241however, has been shown to be ineffective. The majority of An-
droid apps request multiple permissions. When a user sees what ap-
pears to be the same warning message for almost every app, warn-
ings quickly lose any effectiveness as the users are conditioned to
ignore such warnings.
Recently, risk signals based on the set of permissions an app re-
quests have been proposed as a mechanism to improve the existing
warning mechanism for apps. In [11], requesting certain permis-
sion or combinations of two or three permissions triggers a warning
that the app is risky. In [24], requesting a critical permission that is
rarely requested is viewed as a signal that the app is risky.
Rather than using a binary risk signal that marks an app as ei-
ther risky or not risky, we propose to develop risk scoring schemes
for Android apps based on the permissions that they request. We
believe that the main reason for the failure of the current Android
warning approach is that it presents the risk information of each app
in a “stand-alone” fashion and in a way that requires too much tech-
nical knowledge and time to distill useful information. We believe
a more effective approach is to present “comparative” risk infor-
mation, i.e., each app’s risk is presented in a context of comparing
it with other apps. We propose to use a risk scoring function that
assigns to each app a real number score so that apps with higher
risks have a higher score. Given this function, one can derive a
risk ranking for each app, identifying the percentile of the app in
terms of its risk score. This number has a well-deﬁned and easy-to-
understand meaning. Users can appreciate the difference between
an app ranked in the top 1% group versus one in the bottom 50%.
This ranking can be presented in a more user-friendly fashion, e.g.,
translated into categorical values such as high risk, average risk,
and low risk. An important feature of the mobile app ecosystem
is that users often have choices and alternatives when choosing a
mobile app. If the user knows that one app is signiﬁcantly more
risky than another for the same functionality, then that may cause
the user to choose the less risky one.
To be most effective, we propose the following desiderata for
the risk scoring function. First, it should be monotonic, in the sense
that for any app, removing a permission from its set of requested
permissions should reduce the risk score. This way, a developer
can reduce the risk score of an app by following the least-privilege
principle. Second, apps that are known to be malicious should in
general have high risk scores. Third, it is desired that the risk scor-
ing function is simple and relatively easy to understand.
We propose to use probabilistic generative models for risk scor-
ing. Probabilistic generative models [7] have been used exten-
sively in a variety of applications in machine learning, computer
vision, and computational biology, to model complex data. The
main strength is to model features in a large amount of unlabeled
data. Using these models, we assume that some parameterized ran-
dom process generates the app data and learn the model parameter
based on the data. Then we can compute the probability of each
app generated by the model. The risk score can be any function
that is inversely related to the probability, so that lower probability
translates into a higher score.
More speciﬁcally, we consider the following models in this pa-
per. In the Basic Naive Bayes (BNB) model, we use only the per-
mission information of the apps, and assume that each app is gen-
erated by M independent Bernoulli random variables, where M is
the number of permissions. Let θm be the probability that the m’th
permission is requested (which can be estimated by computing the
fraction of apps requesting that permission), then the probability
that an app requests a permission is computed by multiplying θi’s
if it requests the i’th permission and (1 − θi) if it does not re-
quest the i’th permission. If θm < 0.5 for every m, the model has
the monotonicity property. The BNB model treats all permissions
equally; however, some permissions are more critical than others.
To model this semantic knowledge about permissions, we also con-
sider Naive Bayes with informative Priors, which we use PNB to
denote. The effect of PNB model is to reduce θi when the i’th
permission is considered critical. While PNB is slightly more com-
plex than BNB, it has the advantage that requesting a more critical
permission results in higher risk than requesting a similarly rare but
less critical permission, making it more difﬁcult for a malicious app
to reduce its risk by removing unnecessary permissions.
We also investigate several sophisticated generative models. In
the Mixture of Naive Bayes (MNB) model, we assume that the
dataset is generated by a number of hidden classes, each is param-
eterized by M independent Bernoulli random variables; these hid-
den classes are shared among all categories. Each category has a
different multinomial distribution describing how likely an app in
this category is from a given hidden class. We also develop a Hier-
archical Bayesian model, which we call the Hierarchical Mixture of
Naive Bayes (HMNB) model. This is a novel extension to the inﬂu-
ential Latent Dirichlet Allocation (LDA) [8] model to binary obser-
vations that integrates categorical information with hidden classes
and allows permission information to be shared between categories.
We have conducted extensive experiments using three datasets:
Market2011, Market2012, and Malware. Market2011 consists of
157,856 apps available at Android Market in February 2011. Mar-
ket2012 consists of 324,658 apps available at Google Play in Febru-
ary/March 2012. Malware consists of 378 known malwares. Our
experiments show that in terms of assigning high risk scores to mal-
ware apps, all generative models signiﬁcantly outperform existing
approaches [11, 24]. Furthermore, while PNB is simpler than MNB
and HMNB, its performance is almost the same as MNB, and very
close to the best-performing HMNB model. Based on these results,
we conclude that PNB is good risking scoring scheme.
In summary, the contributions of this paper are as follows:
• We introduce the notion of risk scoring and risk ranking for
Android apps, to improve risk communication for Android
apps, and identify three desiderata for an effective risk scor-
ing scheme.
• We propose to use probabilistic generative models for risk
scoring schemes, and identify several such models, ranging
from the simple Basic Naive Bayes (BNB), to advanced hi-
erarchical mixture models.
• We conduct extensive evaluations using real-world datasets.
Our experimental results show that probabilistic general
models signiﬁcantly outperform existing approaches, and
PNB makes a promising risk scoring approach.
The rest of the paper is organized as follows. We present a de-
scription of the Android platform and the current warning mech-
anism in Section 2. Section 3 discusses the datasets that we have
collected. In Section 4 we discuss different generative models for
risk scoring. We then present experimental results in Section 5, and
discuss other ﬁndings in Section 6. We ﬁnish by discussing related
work in Section 7 and concluding in Section 8.
2. ANDROID PLATFORM
In this section we provide an overview of the current defense
mechanism provided by the Android platform and discuss its limi-
tations.
2422.1 Platform Ecosystem
Android is an open source software stack for mobile devices that
includes an operating system, an application framework, and core
applications. The operating system relies on a kernel derived from
Linux. The application framework uses the Dalvik Virtual Ma-
chine. Applications are written in Java using the Android SDK,
compiled into Dalvik Executable ﬁles, and packaged into .apk
(Android package) archives for installation.
The app store hosted by Google is called Google Play (previ-
ously called Android Market). In order to submit applications to
Google Play, an Android developer ﬁrst needs to obtain a publisher
account. After submission, each .apk ﬁle gets an entry on the mar-
ket in the form of a webpage, accessible to users through either the
Google Play homepage or the search interface. This webpage con-