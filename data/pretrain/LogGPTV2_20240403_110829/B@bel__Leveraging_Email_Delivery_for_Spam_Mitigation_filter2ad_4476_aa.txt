title:B@bel: Leveraging Email Delivery for Spam Mitigation
author:Gianluca Stringhini and
Manuel Egele and
Apostolis Zarras and
Thorsten Holz and
Christopher Kruegel and
Giovanni Vigna
B@bel: Leveraging Email Delivery for Spam Mitigation
Gianluca Stringhini§, Manuel Egele§, Apostolis Zarras‡, Thorsten Holz‡,
Christopher Kruegel§, and Giovanni Vigna§
§University of California, Santa Barbara
‡ Ruhr-University Bochum
{gianluca,maeg,chris,vigna}@cs.ucsb.edu
{apostolis.zarras,thorsten.holz}@rub.de
Abstract
Traditional spam detection systems either rely on con-
tent analysis to detect spam emails, or attempt to detect
spammers before they send a message, (i.e., they rely
on the origin of the message). In this paper, we intro-
duce a third approach: we present a system for ﬁltering
spam that takes into account how messages are sent by
spammers. More precisely, we focus on the email de-
livery mechanism, and analyze the communication at the
SMTP protocol level.
We introduce two complementary techniques as con-
crete instances of our new approach. First, we leverage
the insight that different mail clients (and bots) imple-
ment the SMTP protocol in slightly different ways. We
automatically learn these SMTP dialects and use them
to detect bots during an SMTP transaction. Empiri-
cal results demonstrate that this technique is successful
in identifying (and rejecting) bots that attempt to send
emails. Second, we observe that spammers also take into
account server feedback (for example to detect and re-
move non-existent recipients from email address lists).
We can take advantage of this observation by returning
fake information, thereby poisoning the server feedback
on which the spammers rely. The results of our experi-
ments show that by sending misleading information to a
spammer, it is possible to prevent recipients from receiv-
ing subsequent spam emails from that same spammer.
1
Email spam, or unsolicited bulk email, is one of the ma-
jor open security problems of the Internet. Accounting
for more than 77% of the overall world-wide email traf-
ﬁc [21], spam is annoying for users who receive emails
they did not request, and it is damaging for users who
fall for scams and other attacks. Also, spam wastes re-
sources on SMTP servers, which have to process a sig-
niﬁcant amount of unwanted emails [41].
Introduction
A lucrative business has emerged around email spam,
large afﬁliate cam-
and recent studies estimate that
paigns generate between $400K and $1M revenue per
month [20].
Nowadays, about 85% of world-wide spam trafﬁc is
sent by botnets [40]. Botnets are networks of compro-
mised computers that act under the control of a single
entity, known as the botmaster. During recent years, a
wealth of research has been performed to mitigate both
spam and botnets [18, 22, 29, 31, 33, 34, 50].
Existing spam detection systems fall into two main
categories. The ﬁrst category focuses on the content of
an email. By identifying features of an email’s content,
one can classify it as spam or ham (i.e., a benign email
message) [16, 27, 35]. The second category focuses on
the origin of an email [17, 43]. By analyzing distinctive
features about the sender of an email (e.g., the IP address
or autonomous system from which the email is sent, or
the geographical distance between the sender and the re-
cipient), one can assess whether an email is likely spam,
without looking at the email content.
While existing approaches reduce spam, they also suf-
fer from limitations. For instance, running content anal-
ysis on every received email is not always feasible for
high-volume servers [41]. In addition, such content anal-
ysis systems can be evaded [25, 28]. Similarly, origin-
based techniques have coverage problems in practice.
Previous work showed how IP blacklisting, a popular
origin-based technique [3], misses a large fraction of the
IP addresses that are actually sending spam [32, 37].
In this paper, we propose a novel, third approach to
ﬁght spam.
Instead of looking at the content of mes-
sages (what) or their origins (who), we analyze the way
in which emails are sent (how). More precisely, we focus
on the email delivery mechanism. That is, we look at the
communication between the sender of an email and the
receiving mail server at the SMTP protocol level. Our
approach can be used in addition to traditional spam de-
fense mechanisms. We introduce two complementary
techniques as concrete instances of our new approach:
SMTP dialects and Server feedback manipulation.
SMTP dialects. This technique leverages the observa-
tion that different email clients (and bots) implement the
SMTP protocol in slightly different ways. These de-
viations occur at various levels, and range from differ-
ences in the case of protocol keywords, to differences in
the syntax of individual messages, to the way in which
messages are parsed. We refer to deviations from the
strict SMTP speciﬁcation (as deﬁned in the correspond-
ing RFCs) as SMTP dialects. As with human language
dialects, the listener (the server) typically understands
what the speaker (a legitimate email client or a bot) is
saying. This is because SMTP servers, similar to many
other Internet services, follow Postel’s law, which states:
“Be liberal in what you accept, and conservative in what
you send.”
We introduce a model that represents SMTP dialects
as state machines, and we present an algorithm that
learns dialects for different email clients (and their re-
spective email engines). Our algorithm uses both pas-
sive observation and active probing to efﬁciently gener-
ate models that can distinguish between different email
engines. Unlike previous work on service and protocol
ﬁngerprinting, our models are stateful. This is impor-
tant, because it is almost never enough to inspect a single
message to be able to identify a speciﬁc dialect.
Leveraging our models, we implement a decision pro-
cedure that can, based on the observation of an SMTP
transaction, determine the sender’s dialect. This is use-
ful, as it allows an email server to terminate the con-
nection with a client when this client is recognized as a
spambot. The connection can be dropped before any con-
tent is transmitted, which saves computational resources
at the server. Moreover, the identiﬁcation of a sender’s
dialect allows analysts to group bots of the same family,
or track the evolution of spam engines within a single
malware family.
Server feedback manipulation. The SMTP protocol
is used by a client to send a message to the server. Dur-
ing this transaction, the client receives from the server
information related to the delivery process. One impor-
tant piece of information is whether the intended recipi-
ent exists or not. The performance of a spam campaign
can improve signiﬁcantly when a botmaster takes into
account server feedback.
In particular, it is beneﬁcial
for spammers to remove non-existent recipient addresses
from their email lists. This prevents a spammer from
sending useless messages during subsequent campaigns.
Indeed, previous research has shown that certain bots re-
port the error codes received from email servers back to
their command and control nodes [22, 38].
To exploit the way in which botnets currently lever-
age server feedback, it is possible to manipulate the re-
sponses from the mail server to a bot. In particular, when
a mail server identiﬁes the sender as a bot, instead of
dropping the connection, the server could simply reply
that the recipient address does not exist. To identify a bot,
one can either use traditional origin-based approaches or
leverage the SMTP dialects proposed in this paper. When
the server feedback is poisoned in this fashion, spammers
have to decide between two options. One possibility is to
continue to consider server feedback and, as a result, re-
move valid email addresses from their email list. This
reduces the spam emails that these users will receive in
the future. Alternatively, spammers can decide to distrust
and discard any server feedback. This reduces the effec-
tiveness of future campaigns since emails will be sent to
non-existent users.
Our experimental results demonstrate that our tech-
niques are successful in identifying (and rejecting) bots
that attempt to send unwanted emails. Moreover, we
show that we can successfully poison spam campaigns
and prevent recipients from receiving subsequent emails
from certain spammers. However, we recognize that
spam is an adversarial activity and an arms race. Thus,
a successful deployment of our approach might prompt
spammers to adapt. We discuss possible paths for spam-
mers to evolve, and we argue that such evolution comes
at a cost in terms of performance and ﬂexibility.
To summarize, the paper makes the following main con-
tributions:
• We introduce a novel approach to detect and mit-
igate spam emails. This approach focuses on the
email delivery mechanism — the SMTP communi-
cation between the email client and the email server.
It is complementary to traditional techniques that
operate either on the message origin or on the mes-
sage content.
• We introduce the concept of SMTP dialects as one
concrete instance of our approach. Dialects capture
small variations in the ways in which clients imple-
ment the SMTP protocol. This allows us to distin-
guish between legitimate email clients and spam-
bots. We designed and implemented a technique to
automatically learn the SMTP dialects of both legit-
imate email clients and spambots.
• We implemented our approach in a tool, called
B@bel. Our experimental results demonstrate that
B@bel is able to correctly identify spambots in a
real-world scenario.
• We study how the feedback provided by email
servers to bots is used by their botmasters. As a sec-
ond instance of our approach, we show how provid-
ing incorrect feedback to bots can have a negative
impact on the spamming effectiveness of a botnet.
2 Background: The SMTP Protocol
The Simple Mail Transfer Protocol (SMTP), as deﬁned
in RFC 821 [1], is a text-based protocol that is used
to send email messages originating from Mail User
Agents (MUAs — e.g., Outlook, Thunderbird, or Mutt),
through intermediate Mail Transfer Agents (MTAs —
e.g., Sendmail, Postﬁx, or Exchange) to the recipients’
mailboxes. The protocol is deﬁned as an alternating dia-
logue where the sender and the receiver take turns trans-
mitting their messages. Messages sent by the sender
are called commands, and they instruct the receiver to
perform an action on behalf of the sender. The SMTP
RFC deﬁnes 14 commands. Each command consists
of four case-insensitive, alphabetic-character command
codes (e.g., MAIL) and additional, optional arguments
(e.g., FROM:). One or more
space characters separate command codes and argument
ﬁelds. All commands are terminated by a line termina-
tor, which we denote as . An exception is
the DATA command, which instructs the receiver to ac-
cept the subsequent lines as the email’s content, until the
sender transmits a dot character as the only character on
a line (i.e., .).
SMTP replies are sent by the receiver to inform the
sender about the progress of the email transfer process.
Replies consist of a three-digit status code, followed by
a space separator, followed by a short textual descrip-
tion. For example, the reply 250 Ok indicates to the
sender that the last command was executed successfully.
Commonly, replies are one line long and terminated
by 1. The RFC deﬁnes 21 different reply
codes. These codes inform the sender about the speciﬁc
state that the receiver has advanced to in its protocol state
machine and, thus, allows the sender to synchronize its
state with the state of the receiver. A plethora of addi-
tional RFCs have been introduced to extend and modify
the original SMTP protocol. For example, RFC 1869
introduced SMTP Service Extensions. These extensions
deﬁne how an SMTP receiver can inform a client about
the extensions it supports. More precisely, if a client
wants to indicate that it supports SMTP Service Exten-
sions, it will greet the server with EHLO instead of the
regular HELO command. The server then replies with
a list of available service extensions as a multi-line re-
ply. For example, a server capable of handling encryp-
tion can announce this capability by responding with a
250-STARTTLS reply to the client’s EHLO command.
MTAs, mail clients, and spambots implement differ-
ent sets of these extensions. As we will discuss in de-
1The protocol allows the server to answer with multi-line replies. In
a multi-line reply, all lines but the last must begin with the status code
followed by a dash character. The last line of a multi-line reply must
be formatted like a regular one-line reply

S e r v e r : 220 d e b i a n
C l i e n t : HELO example . com
S e r v e r : 250 OK
C l i e n t : MAIL FROM:
S e r v e r : 250 2 . 1 . 0 OK
C l i e n t : RCPT TO:
S e r v e r : 250 2 . 1 . 5 OK
C l i e n t : DATA



Figure 1: A typical SMTP conversation
tail later, we leverage these differences to determine the
SMTP dialect spoken in a speciﬁc SMTP conversation.
In this paper, we consider an SMTP conversation the
sequence of commands and replies that leads to a DATA
command, to a QUIT command, or to an abrupt termina-
tion of the connection. This means that we do not con-
sider any reply or command that is sent after the client
starts transmitting the actual content of an email. An ex-
ample of an SMTP conversation is listed in Figure 1.
3 SMTP Dialects
The RFCs that deﬁne SMTP specify the protocol that
a client has to speak to properly communicate with a
server. However, different clients might implement the
SMTP protocol in slightly different ways, for three main
reasons:
1. The SMTP RFCs do not always provide a single
possible format when specifying the commands a
client must send. For example, command identi-
ﬁers are case insensitive, which means that EHLO