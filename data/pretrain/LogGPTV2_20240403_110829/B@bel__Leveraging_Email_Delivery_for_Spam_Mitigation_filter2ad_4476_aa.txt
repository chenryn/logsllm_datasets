# B@bel: Leveraging Email Delivery for Spam Mitigation

**Authors:**
- Gianluca Stringhini, Manuel Egele, Apostolis Zarras, Thorsten Holz, Christopher Kruegel, Giovanni Vigna
- §University of California, Santa Barbara
- ‡Ruhr-University Bochum
- {gianluca, maeg, chris, vigna}@cs.ucsb.edu
- {apostolis.zarras, thorsten.holz}@rub.de

## Abstract

Traditional spam detection systems either rely on content analysis to detect spam emails or attempt to identify spammers based on the origin of the message. In this paper, we introduce a third approach: a system that filters spam by analyzing how messages are sent by spammers, specifically focusing on the email delivery mechanism and the SMTP protocol level.

We present two complementary techniques:
1. **SMTP Dialects:** We leverage the fact that different mail clients (and bots) implement the SMTP protocol in slightly different ways. By automatically learning these SMTP dialects, we can detect and reject bots during an SMTP transaction.
2. **Server Feedback Manipulation:** We observe that spammers use server feedback to remove non-existent recipients from their email lists. By returning fake information, we can poison the server feedback, thereby reducing the effectiveness of future spam campaigns.

Our experimental results demonstrate the success of both techniques in identifying and rejecting spammers and preventing recipients from receiving subsequent spam emails.

## 1. Introduction

Email spam, or unsolicited bulk email, is one of the major security challenges on the Internet, accounting for more than 77% of global email traffic [21]. Spam is not only annoying but also damaging, as it can lead to scams and other attacks. Additionally, it consumes significant resources on SMTP servers, which must process a large volume of unwanted emails [41].

A lucrative business has emerged around email spam, with large affiliate campaigns generating between $400K and $1M in revenue per month [20]. Approximately 85% of global spam traffic is sent by botnets [40], which are networks of compromised computers controlled by a single entity, known as the botmaster. Significant research has been conducted to mitigate both spam and botnets [18, 22, 29, 31, 33, 34, 50].

Existing spam detection systems fall into two main categories:
1. **Content-Based Analysis:** These systems classify emails as spam or ham (benign) by analyzing the content [16, 27, 35].
2. **Origin-Based Analysis:** These systems assess whether an email is likely spam by analyzing the sender's IP address, autonomous system, or geographical distance [17, 43].

While these approaches reduce spam, they have limitations. Content analysis is not always feasible for high-volume servers and can be evaded [25, 28]. Origin-based techniques also suffer from coverage issues, as IP blacklisting misses many spamming IP addresses [32, 37].

In this paper, we propose a novel, third approach to fight spam by analyzing the way emails are sent, specifically at the SMTP protocol level. Our approach complements traditional spam defense mechanisms and includes two techniques: **SMTP Dialects** and **Server Feedback Manipulation**.

## 2. Background: The SMTP Protocol

The Simple Mail Transfer Protocol (SMTP), defined in RFC 821 [1], is a text-based protocol used to send email messages from Mail User Agents (MUAs) through intermediate Mail Transfer Agents (MTAs) to recipients' mailboxes. The protocol involves an alternating dialogue where the sender and receiver take turns transmitting commands and replies.

### 2.1 Commands and Replies

- **Commands:** Sent by the sender to instruct the receiver to perform an action. The SMTP RFC defines 14 commands, each consisting of four case-insensitive alphabetic characters (e.g., MAIL) and optional arguments (e.g., FROM:).
- **Replies:** Sent by the receiver to inform the sender about the progress of the email transfer. Replies consist of a three-digit status code followed by a short textual description (e.g., 250 Ok).

### 2.2 Extensions

Additional RFCs, such as RFC 1869, extend the original SMTP protocol. For example, the EHLO command is used instead of HELO to indicate support for SMTP Service Extensions, and the server responds with a list of supported extensions.

## 3. SMTP Dialects

The SMTP RFCs provide a general framework, but different clients may implement the protocol in slightly different ways due to:
1. **Case Insensitivity:** Command identifiers are case insensitive.
2. **Optional Arguments:** Some commands have optional arguments.
3. **Implementation Variations:** Different clients and bots may have unique implementations.

We introduce a model that represents SMTP dialects as state machines and an algorithm that learns these dialects for different email clients and bots. This allows us to distinguish between legitimate clients and spambots, enabling the server to terminate connections with identified spambots before any content is transmitted.

## 4. Server Feedback Manipulation

Spammers use server feedback to improve the performance of their campaigns by removing non-existent recipient addresses from their email lists. We exploit this by manipulating the server's responses to spambots. When the server identifies a spambot, it can return fake information, such as indicating that the recipient does not exist. This can cause spammers to either remove valid email addresses from their lists or distrust all server feedback, reducing the effectiveness of future campaigns.

## 5. Experimental Results

Our experimental results show that our techniques are successful in identifying and rejecting spambots. Additionally, we demonstrate that server feedback manipulation can prevent recipients from receiving subsequent spam emails. However, we recognize that spam is an adversarial activity, and spammers may adapt. We discuss potential paths for spammers to evolve and argue that such evolution comes at a cost in terms of performance and flexibility.

## 6. Contributions

- **Novel Approach:** We introduce a new method to detect and mitigate spam by analyzing the email delivery mechanism.
- **SMTP Dialects:** We define and implement a technique to automatically learn and distinguish between legitimate email clients and spambots.
- **B@bel Tool:** We developed a tool, B@bel, that demonstrates the effectiveness of our approach in real-world scenarios.
- **Feedback Manipulation:** We show how providing incorrect feedback to spambots can negatively impact their spamming effectiveness.

---

This revised version aims to make the text more clear, coherent, and professional.