# Windows内核驱动程序静态逆向工程的方法论
|
##### 译文声明
本文是翻译文章，文章原作者 specterops，文章来源：posts.specterops.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概述
多年来，许多恶意组织纷纷致力于针对Windows内核模式软件驱动程序进行攻击，特别是针对第三方发布的驱动程序开展攻击。在这些漏洞中，一个比较常见和有据可查的就是CAPCOM.sys任意函数执行、Win32k.sys本地特权提升以及EternalBlue池损坏漏洞。攻击者在驱动程序中得到了一些新的攻击维度，无论是通过传统的漏洞利用原语，还是滥用合法的驱动程序功能，这些都无法在用户模式中实现。
随着Windows安全性的不断发展，研究内核模式驱动程序中的漏洞利用对于我们的攻防技术而言变得越来越重要。为了辅助分析这些漏洞，我认为比较重要的一件事是，我们需要在研究中探寻内核漏洞，并找到一些值得关注并且可以滥用的功能。
在本文中，我将首先介绍驱动程序的工作原理，说明所需的先验知识，随后将进入反汇编领域，逐步查找潜在的易受攻击的内部函数。
我们的分析过程将尽量将复杂的问题简单化，因此在文章中可能会包含指向其他资源的一些链接，希望各位读者按需参考。
## 目标识别与选择
通常情况下，我们要首先分析的，就是基础工作站和服务器映像上到底加载了哪些驱动程序。如果我们能在这些核心驱动程序中发现漏洞，那么其影响将会比较广泛。同时，这也在对抗过程中带来了一个好处，也就是不需要再投放和加载新的驱动程序，从而降低被发现的概率。为此，我将手动查看注册表中的驱动程序（HKLMSystemControlSetServices，其中Type为0x1，ImagePath包含*.sys的条目），或使用类似于DriverQuery的工具通过C2来运行。
在选择目标时，我们需要考虑综合因素，因为没有某一种特定类型的驱动程序是比较容易受到攻击的。尽管如此，但我们倾向于将目标放在由安全厂商发布的驱动程序、由主板厂商发布的任何内容以及性能监控软件。并且，我们倾向于忽略掉微软的驱动程序，因为我们通常没有太多的时间对其进行深入研究。
## 二、驱动内部原理分析
如果大家以前没有开发过内核模式软件驱动程序，那么可能会发现，它看起来要比实际复杂得多。在开始进行逆向之前，必须首先了解三个重要概念————DriverEntry、IRP
Handler和IOCTL。
###  2.1 DriverEntry
与C/C++语言中的main()函数非常相似，驱动程序必须指定入口点DriverEntry。
DriverEntry要负责很多工作，例如创建设备对象、创建用于与驱动程序和核心函数（IRP Handler、卸载函数、回调例程等）进行通信的符号链接。
DriverEntry首先使用到`IoCreateDevice()`或`IoCreateDeviceSecure()`的调用来创建设备对象，后者通常用于将安全描述符应用于设备对象，以限制对本地管理员和NT
AUTHORITYSYSTEM的访问。
接下来，`DriveEntry`将`IoCreateSymbolicLink()`与先前创建的设备对象一起使用，以建立符号链接，该链接将允许用户模式进程与驱动程序进行通信。
其代码如下：
    NTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {
        UNREFERENCED_PARAMETER(RegistryPath);
        NTSTATUS status;
        // Create the device object
        UNICODE_STRING devName = RTL_CONSTANT_STRING(L"\Device\MyDevice");
        PDEVICE_OBJECT DeviceObject;
        NTSTATUS status = IoCreateDevice(DriverObject, 0, &devName, FILE_DEVICE_UNKNOWN, 0, FALSE, &DeviceObject);
        if (!NT_SUCCESS(status)) {
            KdPrint(("Failed to create device object");
            return status;
        }
        // Create the symbolic link
        UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\??\MySymlink");
        status = IoCreateSymbolicLink(&symLink, &devName);
        if (!NT_SUCCESS(status)) {
            KdPrint(("Failed to create symbolic link"));
            IoDeleteDevice(DeviceObject);
            return status;
        }
        return status;
    }
最后，`DriverEntry`还定义了IRP Handler的函数。
###  2.2 IRP Handler
中断请求包（IRP）本质上只是驱动程序的一条指令。这些数据包允许驱动程序通过提供函数所需的相关信息来执行特定的主要函数。主要函数的代码较多，但其中最常见的是`IRP_MJ_CREATE`、`IRP_MJ_CLOSE`和`IRP_MJ_DEVICE_CONTROL`。这些与用户模式函数相关：
IRP_MJ_CREATE → CreateFile  
IRP_MJ_CLOSE → CloseFile  
IRP_MJ_DEVICE_CONTROL → DeviceIoControl
在用户模式下执行以下代码时，驱动程序将收到具有主要函数代码`IRP_MJ_CREATE`的IRP，并将执行`MyCreateCloseFunction`函数：
    hDevice = CreateFile(L"\\.\MyDevice", GENERIC_WRITE|GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
在几乎所有情况下，对我们来说最重要的主要函数是`IRP_MJ_DEVICE_CONTROL`，该函数用于发送请求，以从用户模式执行特定的内部函数。这些请求中包括一个IO控制代码，该代码负责通知驱动程序具体的操作，还包含一个向驱动程序发送数据和从驱动程序接收数据的缓冲区。
###  2.3 IOCTL
IO控制代码（IOCTL）是我们的主要搜寻目标，因为其中包含我们需要知道的很多重要细节。它是以DWORD表示，每一个32位都表示有关请求的详细信息，包括设备类型、需要的访问、函数代码和传输类型。微软提供了一个可视化的图表来分解这些字段：
1、传输类型：定义将数据传递到驱动程序地方式，具体的类型可以是`METHOD_BUFFERED、METHOD_IN_DIRECT`、`METHOD_OUT_DIRECT`或`METHOD_NEITHER`。
2、函数代码：驱动程序要执行的内部函数。这部分应该是以0x800开始，但实际上我们会发现，很多都是从0x0开始的。其中的自定义位（Custom
bit）用于定义厂商分配的值。
3、设备类型：在`IoCreateDevice(Secure)()`指定的驱动程序设备对象类型。在Wdm.h和Ntddk.h中，定义了许多设备类型，但对于软件驱动程序而言，最常见的一种就是`FILE_DEVICE_UNKNOWN
(0x22)`。其中的通用位（Common bit）用于定义厂商分配的值。
驱动程序标头定义示例如下：
    #define MYDRIVER_IOCTL_DOSOMETHING CTL_CODE(0x8000, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
我们完全可以自行对这些值进行解码，但如果大家觉得解码过程过于繁琐，可以使用OSR的在线解码器。并且，我们发现!ioctldecode
Windbg扩展可能对这一过程非常有帮助。当我们编写与目标驱动程序接口的应用程序时，这些细节将尤为重要。在反汇编程序中，它们仍然会以十六进制表示。