    anon_vma_prepare 98
    anon_vma_unlink 97
    anon_vma_unlock 66
    arch_get_unmapped_area_topdown 94
    arch_get_unmapped_exec_area 3
    arch_unmap_area_topdown 97
    atomic_add 2
    atomic_add_negative 97
    atomic_dec_and_test 5153
    atomic_inc 470
    atomic_inc_and_test 1
    [...]
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_tracing-function-calls-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}使用 SystemTap 跟踪功能调用 {.title}
:::
您可以使用 [**para-callgraph.stp**]{.strong} SystemTap
脚本来跟踪函数调用和函数返回。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**para-callgraph.stp**]{.strong} 脚本。
:::
``` screen
# stap --example para-callgraph.stp 'argument1' 'argument2'
```
脚本 [**para-callgraph.stp**]{.strong} 采用两个命令行参数：
::: orderedlist
1.  您要跟踪其条目/退出的函数的名称。
2.  可选的触发器功能，它基于每个线程启用或禁用追踪。只要触发器函数尚未退出，则每个线程中的跟踪将继续。
:::
考虑以下示例：
``` screen
# stap -wv --example para-callgraph.stp 'kernel.function("*@fs/proc.c*")' 'kernel.function("vfs_read")' -c "cat /proc/sys/vm/* || true"
```
其中：
::: itemizedlist
-   -w：压缩警告.
-   -v：使启动内核的输出可见。
-   -c [*命令*]{.emphasis} ：在执行命令期间 Tells SystemTap
    以计算执行命令期间的功能调用，在本例中为 `/bin/true`{.literal}。
:::
输出应类似于如下：
``` screen
[...]
   267 gnome-terminal(2921): fput file=0xffff880111eebbc0
     2 gnome-terminal(2921):fget_light fd=0x3 fput_needed=0xffff88010544df54
     3 gnome-terminal(2921):vfs_read file=0xffff8801116ce980 buf=0xc86504 count=0x1000 pos=0xffff88010544df48
     4 gnome-terminal(2921): ->rw_verify_area read_write=0x0 file=0xffff8801116ce980 ppos=0xffff88010544df48 count=0x1000
     7 gnome-terminal(2921): do_sync_read filp=0xffff8801116ce980 buf=0xc86504 len=0x1000 ppos=0xffff88010544df48
    15 gnome-terminal(2921): fput file=0xffff8801116ce980
```
:::
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_determining-time-spent-in-kernel-and-user-space-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}使用 SystemTap 确定内核和用户空间花费的时间 {.title}
:::
您可以使用 [**thread-times.stp**]{.strong} SystemTap
脚本来确定任何给定线程在内核或用户空间中花费的时间量。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**thread-times.stp**]{.strong} 脚本：
    ``` screen
    # stap --example thread-times.stp
    ```
    此脚本将显示在 5 秒期间内占用 CPU 时间的前 20
    个进程，以及示例期间进行的 CPU
    字符总数。此脚本的输出还记录了每个进程使用的 CPU
    时间百分比，以及该时间是在内核空间或用户空间中花费的。
    ``` screen
    tid   %user %kernel (of 20002 ticks)
      0   0.00%  87.88%
    32169   5.24%   0.03%
    9815   3.33%   0.36%
    9859   0.95%   0.00%
    3611   0.56%   0.12%
    9861   0.62%   0.01%
    11106   0.37%   0.02%
    32167   0.08%   0.08%
    3897   0.01%   0.08%
    3800   0.03%   0.00%
    2886   0.02%   0.00%
    3243   0.00%   0.01%
    3862   0.01%   0.00%
    3782   0.00%   0.00%
    21767   0.00%   0.00%
    2522   0.00%   0.00%
    3883   0.00%   0.00%
    3775   0.00%   0.00%
    3943   0.00%   0.00%
    3873   0.00%   0.00%
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_monitoring-polling-applications-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}监控使用 SystemTap 轮询应用程序 {.title}
:::
您可以使用 [**timeout.stp**]{.strong} SystemTap
脚本来识别和监控哪些应用正在轮询。这样，您可以跟踪不必要的或过量轮询，这有助于查明在
CPU 使用率和省电方面需要改进的区域。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**timeout.stp**]{.strong} 脚本：
    ``` screen
    # stap --example timeout.stp
    ```
    此脚本将跟踪每个应用程序随时间使用以下系统调用的次数：
-   `poll`{.literal}
-   `选择`{.literal}
-   `epoll`{.literal}
-   `itimer`{.literal}
-   `futex`{.literal}
-   `nanosleep`{.literal}
-   `signal`{.literal}
:::
在这个示例输出中，您可以看到哪个进程使用了哪个系统调用，以及使用了多少次。
``` screen
uid |   poll  select   epoll  itimer   futex nanosle  signal| process
28937 | 148793       0       0    4727   37288       0       0| firefox
22945 |      0   56949       0       1       0       0       0| scim-bridge
  0 |      0       0       0   36414       0       0       0| swapper
4275 |  23140       0       0       1       0       0       0| mixer_applet2
4191 |      0   14405       0       0       0       0       0| scim-launcher
22941 |   7908       1       0      62       0       0       0| gnome-terminal
4261 |      0       0       0       2       0    7622       0| escd
3695 |      0       0       0       0       0    7622       0| gdm-binary
3483 |      0    7206       0       0       0       0       0| dhcdbd
4189 |   6916       0       0       2       0       0       0| scim-panel-gtk
1863 |   5767       0       0       0       0       0       0| iscsid
```
:::
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_tracking-most-frequently-used-system-calls-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}使用 SystemTap 跟踪最常用的系统调用 {.title}
:::
您可以使用 [**topsys.stp**]{.strong} SystemTap 脚本列出系统每 5
秒间隔使用的前 20 个系统调用。它还列出该期间每个系统调用使用的次数。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**topsys.stp**]{.strong} 脚本：
    ``` screen
    # stap --example topsys.stp
    ```
    考虑以下示例：
    ``` screen
    # stap -v --example topsys.stp
    ```
    其中 -v 可使启动内核的输出可见。
    输出应类似于如下：
:::
``` screen
--------------------------------------------------------------
                  SYSCALL      COUNT
             gettimeofday       1857
                     read       1821
                    ioctl       1568
                     poll       1033
                    close        638
                     open        503
                   select        455
                    write        391
                   writev        335
                    futex        303
                  recvmsg        251
                   socket        137
            clock_gettime        124
           rt_sigprocmask        121
                   sendto        120
                setitimer        106
                     stat         90
                     time         81
                sigreturn         72
                    fstat         66
--------------------------------------------------------------
```
:::
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_tracking-system-call-volume-per-process-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}使用 SystemTap 为每个进程跟踪系统调用卷 {.title}
:::
您可以使用 [**syscalls_by_proc.stp**]{.strong} SystemTap
脚本查看哪些进程正在执行最高系统调用卷。它显示执行大部分系统调用的 20
个进程。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**syscalls_by_proc.stp**]{.strong} 脚本：
    ``` screen
    # stap --example syscalls_by_proc.stp
    ```
    [**syscalls_by_proc.stp**]{.strong} 脚本的输出结果类似如下：
    ``` screen
    Collecting data... Type Ctrl-C to exit and display results
    #SysCalls  Process Name
    1577       multiload-apple
    692        synergyc
    408        pcscd
    376        mixer_applet2
    299        gnome-terminal
    293        Xorg
    206        scim-panel-gtk
    95         gnome-power-man
    90         artsd
    85         dhcdbd
    84         scim-bridge
    78         gnome-screensav
    66         scim-launcher
    [...]
    ```
:::
:::
:::
[]{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html}
::: chapter
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}第 41 章 使用 SystemTap 监控磁盘和 I/O 活动 {.title}