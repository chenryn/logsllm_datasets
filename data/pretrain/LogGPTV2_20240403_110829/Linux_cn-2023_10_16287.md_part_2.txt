drwxr-xr-x. 1 hartan hartan   32 Dec 20 08:14 demo-2
```
妙，现在挂载在 `backup-drive` 下面有一个独立的 Btrfs 文件系统！让我们尝试进行快照并且把快照放进去：
```
$ sudo btrfs subvolume snapshot demo backup-drive/demo-3
Create a snapshot of 'demo' in 'backup-drive/demo-3'
ERROR: cannot snapshot 'demo': Invalid cross-device link
```
发生了什么？噢，你尝试对 `demo` 进行一次快照并把它存在不同的 Btrfs 文件系统里（从 Btrfs 视角来看是一个不同的设备）。还记得一个 Btrfs 子卷仅持有对文件和内容的引用（inode）？这正是问题所在：文件和内容存在于我们的 `home` 文件系统，但不在新创建的 `backup-drive` 。你得找到一种方式去传输子卷和其内容到新的文件系统里。
#### 在不同的 Btrfs 文件系统存储快照
针对这个目的 Btrfs 工具有两个特殊的命令。让我们首先来看看它们是如何工作的：
```
$ sudo btrfs send demo | sudo btrfs receive backup-drive/
ERROR: subvolume /home/hartan/btrfs-snapshot-test/demo is not read-only
ERROR: empty stream is not considered valid
```
另一个错误！这时它告诉你我们想要传输的子卷不是只读的。这是对的：你可以写入新内容到所有目前为止创建的快照/子卷。你可以像这样创建一个只读的快照：
```
$ sudo btrfs subvolume snapshot -r demo demo-3-ro
Create a readonly snapshot of 'demo' in './demo-3-ro'
```
不像之前那样，这里 `-r` 选项被加到了 `snapshot` 子命令里。这创建一个只读的快照，这很容易去验证：
```
$ touch demo-3-ro/another-file
touch: cannot touch 'demo-3-ro/another-file': Read-only file system
```
现在你可以重新尝试传输子卷：
```
$ sudo btrfs send demo-3-ro | sudo btrfs receive backup-drive/
At subvol demo-3-ro
At subvol demo-3-ro
$ tree
├── backup-drive
│   └── demo-3-ro
│       ├── bar
│       ├── baz
│       ├── bigfile
│       └── foo
├── btrfs_filesystem.img
├── demo
[ ... ]
└── demo-3-ro
    ├── bar
    ├── baz
    ├── bigfile
    └── foo
6 directories, 20 files
```
成功了！你成功传输原来子卷 `demo` 的一个只读快照到一个外部的 Btrfs 文件系统。
#### 在非 Btrfs 文件系统存储快照
上面你已经看到你如何能存储 Btrfs 子卷/快照到其他的 Btrfs 文件系统。但如果你没有其他的 Btrfs 文件系统并且不能新创建一个，比如说外部驱动器需要一个和 Windows 或 MacOS 兼容的文件系统，你可以做什么呢？在这种情况下你可以存储子卷在文件里：
```
$ sudo btrfs send -f demo-3-ro-subvolume.btrfs demo-3-ro
At subvol demo-3-ro
$ ls -lh demo-3-ro-subvolume.btrfs
-rw-------. 1 root root 513M Dec 21 10:39 demo-3-ro-subvolume.btrfs
```
文件 `demo-3-ro-subvolume.btrfs` 现在包含了随后重建 `demo-3-ro` 子卷需要的所有东西。
#### 增量地发送快照
如果你对不同的子卷重复执行这个操作，你会发现在某些时间点不同的子卷不再共享它们的文件内容。这是因为像上面一样发送一个子卷，去重建这个单独的子卷的所有数据将被传送到目标位置。但是，你可以引导 Btrfs 只向目标位置发送不同子卷的差异！所谓的增量发送将保证共享的引用在子卷中仍然共享。为了展示这一点，新增一些变动到我们原来的子卷：
```
$ echo "a few more changes" >> demo/bigfile
```
然后创建另一个只读子卷：
```
$ sudo btrfs subvolume snapshot -r demo demo-4-ro
Create a readonly snapshot of 'demo' in './demo-4-ro'
```
然后现在发送它：
```
$ sudo btrfs send -p demo-3-ro demo-4-ro | sudo btrfs receive backup-drive
At subvol demo-4-ro
At snapshot demo-4-ro
```
在上面的命令，`-p` 选项指定了一个父子卷用来计算差异。重要的是记住原 Btrfs 文件系统和目标 Btrfs 文件系统都必须包含相同的、未被修改过的父子卷！确保新的子卷真的在那里：
```
$ ls backup-drive/
demo-3-ro  demo-4-ro
$ ls -lR backup-drive/demo-4-ro/
backup-drive/demo-4-ro/:
total 524296
-rw-r--r--. 1 hartan hartan         0 Dec 20 08:11 bar
-rw-r--r--. 1 hartan hartan         0 Dec 20 08:11 baz
-rw-r--r--. 1 hartan hartan 536870945 Dec 21 10:49 bigfile
-rw-r--r--. 1 hartan hartan        59 Dec 20 08:13 foo
```
但你怎样知道增量发送只传输了子卷间的差异呢？让我们传输数据流到一个文件里然后看看它有多大：
```
$ sudo btrfs send -f demo-4-ro-diff.btrfs -p demo-3-ro demo-4-ro
At subvol demo-4-ro
$ ls -l demo-4-ro-diff.btrfs
-rw-------. 1 root root 315 Dec 21 10:55 demo-4-ro-diff.btrfs
```
根据 `ls` ，这个文件仅仅只有 315 字节大小！这意味着增量传输只传输子卷间的差异，和额外的 Btrfs 相关的元数据。
#### 从快照中恢复子卷
在继续之前，让我们清理掉这时候不再需要的东西：
```
$ sudo rm -rf demo-4-ro-diff.btrfs demo-3-ro-subvolume.btrfs
$ sudo btrfs subvolume delete demo-1 demo-2 demo-3-ro demo-4-ro
$ ls -l
total 531516
drwxr-xr-x. 1 hartan hartan         36 Dec 21 10:50 backup-drive
-rw-r--r--. 1 hartan hartan 8589934592 Dec 21 10:51 btrfs_filesystem.img
drwxr-xr-x. 1 hartan hartan         32 Dec 20 08:14 demo
```
到目前为止你已经成功创建了可读/写和只读的 Btrfs 子卷快照，并把它们发送到外部。但是，为了把这作为备份策略，还要有一种方式去发送子卷回原来的文件系统和让它们再次变为可写。出于这个目的，我们移动 `demo` 子卷到其他地方并且尝试从最近的快照中重建它。第一步：重命名为 `broken` 子卷。一旦恢复成功它会被删除：
```
$ mv demo demo-broken
```
第二步: 传回最近的快照到这个文件系统：
```
$ sudo btrfs send backup-drive/demo-4-ro | sudo btrfs receive .
At subvol backup-drive/demo-4-ro
At subvol demo-4-ro
[hartan@fedora btrfs-snapshot-test]$ ls
backup-drive  btrfs_filesystem.img  demo-4-ro  demo-broken
```
第三步: 从快照创建一个可读写的子卷：
```
$ sudo btrfs subvolume snapshot demo-4-ro demo
Create a snapshot of 'demo-4-ro' in './demo'
$ ls
backup-drive  btrfs_filesystem.img  demo  demo-4-ro  demo-broken
```
上一步非常重要：你不能重命名 `demo-4-ro` 为 `demo` ，因为这仍然是一个只读子卷！最后你可以检查你所有你想要的东西是不是在那里：
```
$ tree demo
demo
├── bar
├── baz
├── bigfile
└── foo
0 directories, 4 files
$ tail -c -19 demo/bigfile
a few more changes
```
最后的命令告诉你 `bigfile` 的最后 19 个字符实际上是上次变更执行的结果。这个时候，你可能想从 `demo-broken` 复制最近的更新到新的 `demo` 子卷。因为你没有执行任何更新，你可以过时的子卷：
```
$ sudo btrfs subvolume delete demo-4-ro demo-broken
Delete subvolume (no-commit): '/home/hartan/btrfs-snapshot-test/demo-4-ro'
Delete subvolume (no-commit): '/home/hartan/btrfs-snapshot-test/demo-broken'
```
就是这样！你成功从一个之前存在不同 Btrfs 文件系统（外部介质）的快照中恢复 `demo` 子卷。
### 子卷作为快照的边界
在本系列的第二篇文章中我提到子卷作为快照的边界，但这到底是什么意思呢？简单来说，子卷的一份快照仅包含这个子卷的内容，而不是下面嵌套的子卷。让我们来看看这个：
```
$ sudo btrfs subvolume create demo/nested
Create subvolume 'demo/nested'
$ sudo chown -R $(id -u):$(id -g) demo/nested
$ touch demo/nested/another_file
```
让我们像以前一样进行一次快照：
```
$ sudo btrfs subvolume snapshot demo demo-nested
Create a snapshot of 'demo' in './demo-nested'
```
然后查看里面的内容：
```
$ tree demo-nested
demo-nested
├── bar
├── baz
├── bigfile
├── foo
└── nested
1 directory, 4 files
$ tree demo
demo
├── bar
├── baz
├── bigfile
├── foo
└── nested
    └── another_file
1 directory, 5 files
```
注意到 `another_file` 不见了，仅仅是目录 `nested` 还在。这是因为 `nested` 是一个子卷：`demo` 的快照包含嵌套子卷的目录（挂载点），但里面的内容是缺失的。目前没有方法递归地执行快照去包含嵌套子卷。但是，我们可以利用这个优势去从快照中排除一些目录！这通常对那些你容易再现的数据有用，或者它们很少变化。例子有虚拟机或者容器镜像，电影，游戏文件等等。
在总结之前，我们移除所有测试过程中创建的东西：
```
$ sudo btrfs subvolume delete demo/nested demo demo-nested
Delete subvolume (no-commit): '/home/hartan/btrfs-snapshot-test/demo/nested'
Delete subvolume (no-commit): '/home/hartan/btrfs-snapshot-test/demo'
Delete subvolume (no-commit): '/home/hartan/btrfs-snapshot-test/demo-nested'
$ sudo umount backup-drive
$ cd ..
$ rm -rf btrfs-snapshot-test/
```
### 基于 Btrfs 备份最后思考
如果你决定使用 Btrfs 来执行数据的定期备份，那么你可能需要使用一个工具来自动完成这项任务。Btrfs 维基有一个专门针对 Btrfs    [4]  的备份工具列表。在那里，你还将看到另一个手动执行 Btrfs 备份步骤的摘要。就我个人而言，我对 `btrbk`    [5]  有很多很好的体验，我正在使用它来执行我自己的备份。除了备份之外，`btrbk` 还可以在你的 PC 本地保存 Btrfs 快照列表。我使用它来防止意外的数据删除。
如果你想要了解更多有关使用 Btrfs 进行备份的内容，欢迎在下面评论，我会考虑写一篇专门讨论这个话题的后续文章。
### 总结
本文研究了 Btrfs 快照，它们本质上是 Btrfs 子卷。你了解了如何创建可读写和只读快照，以及这种机制如何有助于防止数据丢失。
本系列的后续文章将讨论:
* 压缩 - 透明地节省存储空间
* 配额组 - 限制文件系统大小
* RAID - 替代 mdadm 配置
如果你还想了解与 Btrfs 相关的其他主题，请查看 Btrfs 维基    [2:1]  和文档    [1:1] 。不要忘记查看本系列的前两篇文章！如果你认为本文缺少了一些内容，请在下面的评论中告诉我们。再会！
### 参考资料
1.  [↩︎](#fnref1) [↩︎](#fnref1:1)
2.  [↩︎](#fnref2) [↩︎](#fnref2:1)
3.  [↩︎](#fnref3)
4.  [↩︎](#fnref4)
5.  [↩︎](#fnref5)
*（题图：MJ/ad8a61ed-ce6f-409e-b503-69104dd71149）*
---
via: 
作者：[Andreas Hartmann](https://fedoramagazine.org/author/hartan/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[A2ureStone](https://github.com/A2ureStone) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出