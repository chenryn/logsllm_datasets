title:IRON: Functional Encryption using Intel SGX
author:Ben Fisch and
Dhinakaran Vinayagamurthy and
Dan Boneh and
Sergey Gorbunov
Iron: Functional Encryption using Intel SGX
Ben Fisch∗
Stanford University
PI:EMAIL
Dan Boneh‡
Stanford Univesity
PI:EMAIL
Dhinakaran Vinayagamurthy†
University of Waterloo
PI:EMAIL
Sergey Gorbunov§
University of Waterloo
PI:EMAIL
ABSTRACT
Functional encryption (FE) is an extremely powerful cryptographic
mechanism that lets an authorized entity compute on encrypted
data, and learn the results in the clear. However, all current cryp-
tographic instantiations for general FE are too impractical to be
implemented. We construct Iron, a provably secure, and practical
FE system using Intel’s recent Software Guard Extensions (SGX).
We show that Iron can be applied to complex functionalities, and
even for simple functions, outperforms the best known crypto-
graphic schemes. We argue security by modeling FE in the context
of hardware elements, and prove that Iron satisfies the security
model.
CCS CONCEPTS
• Security and privacy → Public key (asymmetric) techniques;
Hardware-based security protocols;
KEYWORDS
Functional encryption, Intel SGX, secure hardware, provable secu-
rity.
1 INTRODUCTION
Functional Encryption (FE) is a powerful cryptographic tool that
facilitates non-interactive fine-grained access control to encrypted
data [11]. A trusted authority holding a master secret key msk
can generate special functional secret keys, where each functional
key skf is associated with a function (or program) f on plaintext
data. When the key skf is used to decrypt a ciphertext ct, which
is the encryption of some message m, the result is the quantity
∗Supported by the NSF Graduate Research Fellowship.
†Supported by the Cheriton Graduate Scholarship from the University of Waterloo.
‡This work is supported by NSF, DARPA, a grant from ONR, and the Simons Foun-
dation. Opinions, findings, and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily reflect the views of DARPA.
§This work is funded by NSERC Discovery grant.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, , Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 Association for Computing Machinery.
ACM ISBN ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/http://dx.doi.org/10.1145/3133956.3134106
f (m). Nothing else about m is revealed. Multi-Input Functional
Encryption (MIFE) [24] is an extension of FE, where the functional
secret key skд is associated with a function д that takes ℓ ≥ 1 plain-
text inputs. When invoking the decryption algorithm D on inputs
D(skд, c1, . . . , cℓ ), where ciphertext number i is an encryption of
message mi, the algorithm outputs д(m1, . . . , mℓ ). Again, nothing
else is revealed about the plaintext data m1, . . . , mℓ. Functions can
be deterministic or randomized with respect to the input in both
single and multi-input settings [24, 28].
If FE and MIFE could be made practical, they would have nu-
merous real-world applications. For example, consider a genetics
researcher who collects public-key encrypted genomes from in-
dividuals. The researcher could then apply to an authority, such
as the National Institutes of Health (NIH), and request to run a
particular analysis on these genomes. If approved, the researcher is
given a functional key skf , where the function f implements the
desired analysis algorithm. Using skf the researcher can then run
the analysis on the encrypted genomes, and learn the results in the
clear, but without learning anything else about the underlying data.
In the context of cloud computing, a cloud server storing en-
crypted sensitive data can be given a functional key skf , where the
output of the function f is the result of a data-mining algorithm
applied to the data. Using skf the cloud server can run the algo-
rithm on the encrypted data to learn the results in the clear, but
without learning anything else. The data owner holds the master
key, and decides what functional keys to give to the cloud.
Banks could also use FE to improve privacy and security for their
clients by allowing client transactions to be end-to-end encrypted,
and running all transaction auditing via functional decryption. The
bank would only receive the keys for the necessary audits. Simi-
larly, FE could enable spam filters running on a remotely hosted
email server to detect spam in encrypted email traffic without fully
decrypting the emails.
The problem is that currently there aren’t any practical construc-
tions of FE from standard cryptographic assumptions for anything
more than simple functionalities (e.g., inner products). Moreover,
there is evidence that constructing general-purpose FE is as hard
as constructing program obfuscation [4, 9, 23]. However, existing
candidate constructions for obfuscation are impractical [39] and
rely on very new and unestablished computational hardness as-
sumptions, some of which have been broken [18, 44]. Previous
work proposed using secure hardware to instantiate FE, however it
relied on simulatable hardware “tokens" which did not model real
hardware [19].
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA765Our contributions. We propose the first practical and provably
secure FE system that can be instantiated today from real commonly
available hardware. We implemented our proposed system, called
Iron, using Intel’s Software Guard Extensions (SGX) and performed
evaluation to show its practical efficiency compared with alternative
cryptographic algorithms. We also propose a formal cryptographic
model for analyzing the security of an SGX-based FE system and
prove that Iron satisifes our security definitions.
Intel SGX provides hardware support for isolated program execu-
tion environments called enclaves. Enclaves are encrypted memory
containers that protect against operating system, hypervisor, phys-
ical, and malware attacks. By default, designing an application to
work in an enclave involves partitioning it into trusted and un-
trusted components and defining a communication API between
them. A large component of the SGX architecture is the attesta-
tion property. Intuitively, it allows a user to attest that a remote
party is running a desired program within an enclave and verify
input/output tuples produced by the enclave. Enclaves run at full
processor speeds, so it’s very intuitive that they introduce minimal
performance overheads.
However, designing a provably secure application from Intel SGX
is a non-trivial task. While a number of works showed how to build
cryptographic algorithms and systems from Intel SGX [5–7, 30, 50,
54, 57, 60], only a handful of works have attempted to model and
prove systems security from Intel SGX [6, 7, 30, 48]. Reminiscent to
secure protocols (such as SSL/TLS), which are easy to construct from
basic cryptographic primitives, but are notoriously hard to analyze
and prove, doing so requires careful understanding of nuances and
techniques. We believe Intel SGX (and similar hardware encryption
technologies) will become standard cryptographic tools for building
secure systems. Thus, it is important to understand how to build a
system with a formal model and guarantees from the beginning.
Establishing a rigorous connection between Iron and the cryp-
tographic notion of FE is also particularly useful since FE is a very
general and powerful primitive that can be used to directly construct
many other cryptographic primitives, including fully homomorphic
encryption (FHE) [3, 15] and obfuscation [4, 9]. Thus, rather than a
complete system on its own, we view Iron as a basic framework
upon which a family of more application-specific systems can be
built in the future, and automatically inherit Iron’s rigorous notion
of security.
The security of Iron relies on trust in Intel’s manufacturing
process and the robustness of the SGX system. While we focus
on implementing Iron with Intel SGX, in principle the system
could be instantiated using other isolated execution environments
that also support remote software attestation, such as XOM [40],
AEGIS [55, 56], Bastion [16], Ascend [22] and Sanctum [21]. Each of
these systems have slightly different trust assumptions and trusted
computing bases (TCBs). A detailed comparison of these systems
to Intel SGX is covered in [20]. It is important to acknowledge the
limitations of basing security on trust in any particular hardware
design. For instance, several side-channel attacks have come to
light since SGX’s initial release [13, 38, 52, 58, 59]. In our system,
we ensure that the functionalities we implemented are resistant
to known side-channel attacks on SGX. Generic techniques for
protection against enclave side channels are also under study in
various works [38, 41, 49, 53, 58].
Construction overview. The design of Iron is described in detail
in Section 3. At a high level, the system uses a Key Manager Enclave
(KME) that plays the role of the trusted authority who holds the
master key. This authority sets up a standard public key encryption
system and signature scheme. Anyone can encrypt data using the
KME’s published public key. When a client (e.g., researcher) wishes
to run a particular function f on the data, the client requests autho-
rization from the KME. If approved, the KME releases a functional
secret key skf that takes the form of an ECDSA signature on the
code of f . Then, to perform the decryption, the client runs a Decryp-
tion Enclave (DE) running on an Intel SGX platform. Leveraging
remote attestation, the DE can obtain over a secure channel the
secret decryption key from the KME to decrypt ciphertexts. The
client then loads skf into the DE, as well as the ciphertext to be
operated on. The DE, upon receiving skf and a ciphertext, checks
the signature on f , decrypts the given ciphertext, and outputs the
function f applied to the plaintext.
We implemented Iron and report on its performance for a num-
ber of functionalities. For complex functionalities, this implementa-
tion is (unsurprisingly) far superior to any cryptographic implemen-
tation of FE (which does not rely on hardware assumptions). We
show in Section 4 that even for simple functionalities, such as com-
parison and small logical circuits, our implementation outperforms
the best cryptographic schemes by over a 10,000 fold improvement.
Furthermore, we discuss how Iron could support more expressive
function authorization policies that are not possible with standard
FE.
Security analysis. In this work we formalize our trust assump-
tions and definition of security for hardware-assisted FE, as well as
rigorously prove the security of our system in this formal model
(Section 6 and Section 7). While our construction of SGX-assisted
FE/MIFE is clean and simple, formally proving security turns out
to be complicated and non-trivial. For instance, we encounter a
TLS-like situation where we have to show that no information is
revealed from an encryption of m whose corresponding secret de-
cryption key is transferred from KME to DE to the third enclave
using the secure channels established between these enclaves. With
an adversary being able to tamper with the inputs and the outputs
of these enclaves, the “simulator” that we construct to prove the
simulation-security of FE requires more care. Section 7 has more
details on this.
1.1 Related Work
A number of papers use SGX to build secure systems. Haven [8]
protects unmodified Windows applications from malicious OS by
running them in SGX enclaves. Scone [5] and Panoply [54] build
secure Linux containers using SGX. VC3 [50] enables secure MapRe-
duce computations while keeping both the code and the data secret
using SGX. A complete security analysis of the system was also
presented but the system evaluation was performed using their
own SGX performance model based on the Intel whitepapers. Ohri-
menko et al. [47] present data-oblivious algorithms for some popu-
lar machine learning algorithms. These algorithms can be used in
conjunction with our system if one wants an FE scheme supporting
machine learning functionalities. Gupta et al. [30] proposed pro-
tocols and theoretical estimates for performing secure two-party
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA766computation using SGX based on the SGX specifications provided
in Intel whitepapers. Concurrent to our work, Bahmani et al. [6]
proposed a secure multi-party computation protocol where one
of the parties has access to SGX hardware and performs the bulk
of the computation. They evaluate their protocol for Hamming
distance, Private Set Intersection and AES. This work and [48] also
attempt formal modeling of SGX like we do. We discuss the com-
parison between the models in Section 5.1. Also concurrent to our
work, Nayak et al. [46] designed and implemented a construction
for virtual black-box obfuscation (a crypto primitive even stronger
than FE) using a version of secure hardware that they design and
prototype in an FPGA. In contrast, our work focuses on studying
the provable guarantees from a commercially available hardware.
[19] first proposed a way to bypass the impossibility results
in functional encryption by the use of “hardware tokens”. But,
their work is purely theoretical and they model secure hardware
as a single stateless deterministic token, which does not capture
how SGX works because their hardware token is initialized during
FE.Setup (refer Definition 5 of [19]). But in SGX, and hence in our
model, the secure hardware HW is setup and initialized independent
of FE.Setup by the trusted hardware manufacturer, Intel. After
this point, an adversary who is in possession of the hardware can
monitor and tamper with all the input coming in to the hardware
and the corresponding outputs. Naveed et al. [45] propose a related
notion of FE called “controlled functional encryption”. The main
motivation of C-FE is to introduce an additional level of access
control, where the authority mediates every decryption request.
In general, various forms of trusted hardware (real ones like
TPM [29] and Intel TXT [31] and theoretical ones like tamper-proof
tokens [25, 37]) have enabled applications like one-time programs
[25], a contractual anonymity system [51], secure multi-party com-
putation with some strong security guarantees [27] that are either
not possible or not practical otherwise.
2 INTEL SGX BACKGROUND
Intel Software Guard Extensions (SGX) [43] is a set of processor
extensions to Intel’s x86 design that allow for the creation of isolated
execution environments called enclaves. These isolated execution
environments are designed to run software and handle secrets
in a trustworthy manner, even on a host where all the system
software (including OS, hypervisor, etc) and system memory are
untrusted. The isolation of enclave resident applications from all
other processes is enforced by hardware access controls. The SGX
specifications are detailed and complex [32, 43]. We provide only a
brief overview of its design and capabilities, with emphasis on the
components relevant to our system.
There are three main functionalities that enclaves achieve: Isola-
tion–code and data inside the enclave protected memory cannot be
read/modified by any process external to the enclave. Sealing–data
passed to the host environment is encrypted and authenticated with
a hardware-resident key. And Attestation–a special signing key and
instructions are used to provide an unforgeable report attesting to
code, static data, and (hardware-specific) metadata of an enclave,
as well as outputs of computations performed inside the enclave.
Isolation. Enclaves reside in a hardware guarded area of mem-