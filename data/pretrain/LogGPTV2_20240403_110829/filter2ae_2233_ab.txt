                            |
                            +----------------------------------> slots_
    gdb-peda$ tel 0x00007f7f01bb18d0 4
    0000| 0x7f7f01bb18d0 --> 0x7f7f01b8b0e0 --> 0x2a26380 (:PlainObject::class_>:   0x000000000162a4bf)
    0008| 0x7f7f01bb18d8 --> 0x7f7f01bae6c0 --> 0x70000004a  # Property Name
    0016| 0x7f7f01bb18e0 --> 0xfffe000100000001 # Index in slots_ array is '1' (last 3 bytes)
    0024| 0x7f7f01bb18e8 --> 0x7f7f01bb18a8 --> 0x7f7f01b8b0e0 --> 0x2a26380 (:PlainObject::class_>:    0x000000000162a4bf)
                                  |
                                  +-----> pointer to the next shape
    # Looking at the property name.
    gdb-peda$ x/2wx 0x7f7f01bae6c0
    0x7f7f01bae6c0: 0x0000004a  0x00000007 # metadata of the string. 0x4a is flag I think and 7 is the length of string.
    gdb-peda$ x/s
    0x7f7f01bae6c8: "strtest" # The last property added, is at the head of the linked list.
    # The next pointer
    gdb-peda$ tel 0x7f7f01bb18a8 4
    0000| 0x7f7f01bb18a8 --> 0x7f7f01b8b0e0 --> 0x2a26380 (:PlainObject::class_>:   0x000000000162a4bf)
    0008| 0x7f7f01bb18b0 --> 0x7f7f01bae6a0 --> 0x80000004a
    0016| 0x7f7f01bb18b8 --> 0xfffe000102000000
    0024| 0x7f7f01bb18c0 --> 0x7f7f01b8cb78 --> 0x7f7f01b8b0e0 --> 0x2a26380 (:PlainObject::class_>:    0x000000000162a4bf)
    # Name of the property
    gdb-peda$ x/xg 0x7f7f01bae6a0
    0x7f7f01bae6a0: 0x000000080000004a
    gdb-peda$ x/s
    0x7f7f01bae6a8: "blahblah"
    # The slots_ array
    gdb-peda$ x/xg 0x00007f7f01844ec0
    0x7f7f01844ec0: 0xfff8800055667788 # index 0 which is value for the property "blahblah"
    0x7f7f01844ec8: 0xfffb7f7f01bae6e0 # index 1 which is value for the property "strtest". This is a string object.
    # Dereference index 1, which is a pointer to 0x7f7f01bae6e0
    gdb-peda$ x/xg 0x7f7f01bae6e0
    0x7f7f01bae6e0: 0x0000000a0000004a
    gdb-peda$ x/s
    0x7f7f01bae6e8: "TESTSTRING"
### elements_
在上一节中介绍的示例中，该对象只有一些属性。 如果它也有元素怎么办？ 让我们添加到上面的代码片段
    obj[0]=0x11223344
    obj[1]=0x33557711
元素将存储在 elements_ member 指向的数组中。 让我们看看修改后的图像
在 gdb 调试下。
    # This time we have all previous pointers plus a pointer to the elements_ array
    gdb-peda$ x/4xg 0x7f7f01b90120
    0x7f7f01b90120: 0x00007f7f01b8a310  0x00007f7f01bb18d0
    0x7f7f01b90130: 0x00007f7f01844ec0  0x00007f7f01844f90 ---> elements_
    # The array -    
    gdb-peda$ x/xg 0x00007f7f01844f90
    0x7f7f01844f90: 0xfff8800011223344  # index 0
    0x7f7f01844f98: 0xfff8800033557711  # index 0
现在我们看到我们可以向对象添加任意数量的元素。 所以 elements array 有一个 metadata 成员来跟踪这些元素（这实际上是显式地转换为
ObjectElements 。更详细的信息在 js / src / vm / NativeObject.h ）。 以下是构成 metadata ：
    uint32_t flags;
    /*
     * Number of initialized elements. This is > 1;
    #endif
        MOZ_ASSERT(isDouble());
    }
简化一下就是：
    void setPrivate(void* ptr) {
        asBits_ = uintptr_t(ptr) >> 1;
    }
注意，它被右移1.（我们将在gdb调试中检查出来）
现在让我们创建一个 ArrayBuffer 并将视图添加到此缓冲区。
    arrbuf = new ArrayBuffer(0x100);        // ArrayBuffer of size 0x100 bytes.
    uint32view = new Uint32Array(arrbuf);   // Adding a Uint32 view.
    uint16view = new Uint16Array(arrbuf);   // Adding another view - this time a Uint16 one.
    uint32view[0]=0x11223344                // Initialize the buffer with a value.
    uint32view[0].toString(16)
    // Outputs "11223344"
    /* Lets check the Uint16Array */
    uint16view[0].toString(16)
    // Outputs "3344"
    uint16view[1].toString(16)
    // Outputs "1122"
对同一缓冲区的不同视图允许我们以不同的方式查看缓冲区中的数据。  
除 NativeObject 之外，类似 ArrayBuffer 的 TypedArray 还具有以下额外属性。
  * Underlying ArrayBuffer：指向 ArrayBuffer 的指针，该 ArrayBuffer 保存此类型数组的数据
  * length：数组的长度。 如果 ArrayBuffer 是有 0x20 字节的 Uint32Array 类型，则 length = 0x20 / 4 = 8
  * offset
  * pointer to data：这是指向原始形式的数据缓冲区的指针，用于增强性能。
让我们开始研究如何在内存中表示所有这些东西。
    gdb-peda$ x/8xg 0x7f618109a080
    0x7f618109a080: 0x00007f618108a8b0 (group_)       0x00007f61810b1a38 (shape_)
    0x7f618109a090: 0x0000000000000000 (slots_)       0x000000000174a490 (elements_)
    0x7f618109a0a0: 0x00003fb0c0d34b00 (data pointer) 0xfff8800000000100 (length)
    0x7f618109a0b0: 0xfffe7f6183d003a0 (first view)   0xfff8800000000008 (flags)
    # The data pointer
    gdb-peda$ p/x 0x00003fb0c0d34b00 << 1
    $2 = 0x7f6181a69600
    # The buffer
    gdb-peda$ x/2xg 0x7f6181a69600
    0x7f6181a69600: 0x0000000011223344  0x0000000000000000
    # The Uint32 Array
    gdb-peda$ x/8xg 0x7f6183d003a0
    0x7f6183d003a0: 0x00007f618108aa30                  0x00007f61810b4a60
    0x7f6183d003b0: 0x0000000000000000                  0x000000000174a490
    0x7f6183d003c0: 0xfffe7f618109a080 (ArrayBuffer)    0xfff8800000000040 (length)
    0x7f6183d003d0: 0xfff8800000000000 (offset)         0x00007f6181a69600 (Pointer to data buffer)
    # The Uint16 Array
    gdb-peda$ x/8xg 0x7f6183d003e0
    0x7f6183d003e0: 0x00007f618108aaf0                  0x00007f61810b4ba0
    0x7f6183d003f0: 0x0000000000000000                  0x000000000174a490
    0x7f6183d00400: 0xfffe7f618109a080 (ArrayBuffer)    0xfff8800000000080 (length)
    0x7f6183d00410: 0xfff8800000000000 (offset)         0x00007f6181a69600 (Pointer to data buffer)
由于 TypedArrays 中的数据在保存的时候，没有 “nan-boxing”和C语言数据的类型( _译者注，比如C语言有Int，char..._
）情况，因此在写利用时这就很有用，能满足我们需要从任意位置读取和写入数据的操作。  
(译者注：NaN-boxing
，其实是表示无效的double数，[具体解释点这里](https://www.cnblogs.com/qicosmos/p/4285409.html
"具体解释点这里")。)  
假设，我们现在可以控制 ArrayBuffer 的数据指针。 因此，通过为 Uint32Array 分配损坏的 ArrayBuffer，您可以一次读取和写入
4 个字节，来用于任意位置的数据读写。(译者注：Uint32Array 读取数据是无符号的32位数据，就相当于直接能读取地址，不会返回 NAN
或者其他情况)
那么，相反的情况，如果我们使用普通数组，则从任意位置读取的数据将处于浮点状态，并将数据写入我们需要以浮点形式写入。
译者注： 这部分是用来说明一个事情，就是使用 Uint32Array 类似的初始化 Arraybuffer
之后，我们从内存中读取数据，写入数据时，读到或写入的数据是真正在内存中存在的形式。举例：
    在内存中
    地址        数据
    00001000    0x1CD01234
    那么用 Uin32Array 读地址 0x00001000 ,返回的内容就是 0x1CD01234 。
    若用普通的数组 Array 读地址 0x00001000，返回的内容可能是一个浮点数，或者就是 NAN 读取错误，因为有 nan-boxing 。
## 结语
所以，总结一下到目前为止学到的东西:)。 当有更多的空闲时间时，我打算为blazefox写一篇文章，这是一个挑战，也是一个非常好的尝试开始浏览器相关的开发。  
我知道这篇文章仍然不完整，可能也有错误。 如果您发现其中的任何错误，告诉我，我很乐意纠正它。
## 参考
  * [OR’LYEH? The Shadow over Firefox](http://www.phrack.org/issues/69/14.html "OR’LYEH? The Shadow over Firefox") by [argp](https://twitter.com/_argp "argp").
  * [Learning browser exploitation via 33C3 CTF feuerfuchs challenge](https://bruce30262.github.io/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/ "Learning browser exploitation via 33C3 CTF feuerfuchs challenge")
  * [Building SpiderMonkey](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation "Building SpiderMonkey")