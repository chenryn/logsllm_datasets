Certainly! Here is the optimized version of your text, aiming for clarity, coherence, and a professional tone:

---

### Replacing Digits with Regex Components
We replace digits in the CSs (Common Substrings) with regex components that match digits. For the routers in Figure 6, we obtain the following patterns: `\d+ge\d+`, `ge\d+`, and `esnet\.\d+gigabitethernet\d+`.

### Building an Intermediate Regex Set
Figure 7b illustrates the process of building an intermediate regex set. In this step, we substitute the extracted substrings with the identified patterns. Each regex in the intermediate set is evaluated using the method described in §4.2 and ranked using the ATP (Average True Positives) method in §4.3. The highest-ranked regex from the intermediate set is then added to a working set.

### Example Regexes and Hostnames
Here are some example regexes and hostnames:
- `^([^-]+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$`
- `100ge4|core3.fmt2esnet.10gigabitethernet5|core1.ash1ge2|core1.atl12a1a 1bge6|core1.atl12b4a100ge5|core1.ash110ge16|core1.ash13c3a 3b^\d+ge\d+-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$^ge\d+-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$^esnet\.\d+gigabitethernet\d+-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$core3.fmt2core1.ash1core1.atl11a 1b3a 3b 3c2a 2b^(?:\d+ge\d+|ge\d+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$FNU: 1c, 1d. SN: 4a, 5a1, 2, 5, 6, 7, 91, 3ash1, atl1, fmt2\d+\d+[a-z\d]+, [a-z]+\d+§5.3:FNE§5.4:classes^(?:\d+ge\d+|ge\d+)-\d+\.(core\d+\.[a-z]+\d+)\.he\.net$§5.5:FNU1c: v11191d: v1832v\d+^v\d+\.(core\d+\.[a-z]+\d+)\.he\.net$core3.fmt2core1.ash1core1.atl11a 1b 1c 1d3a 3b 3c2a 2b^(?:\d+ge\d+|ge\d+)-\d+\.(core\d+\.[a-z]+\d+)\.he\.net$SN: 4a, 5a§5.6:build sets^v\d+\.(core\d+\.[a-z]+\d+)\.he\.net$ATP: 9ATP: 7(a)(b)(c)(d)(e)FNU: 1c, 1d. FNE: 2a, 2b, 3c. SN: 5aATP: 1`

### Refinement of Comcast.net Regexes
Figure 8 shows the refinement of `comcast.net` regexes in phase §5.7. NC #1 incorrectly clusters hostnames assigned to client interfaces together and extracts portions of IP address literals. Therefore, we build filter regexes to exclude these hostnames in NC #2.

### Phase 5.7: Build Filter Regexes
A regex may cluster hostnames that should not be clustered in the training data, or it may infer candidate names that embed parts of literal IP addresses. This phase identifies filter regexes to match incorrectly clustered hostnames (FP or FIP), so we do not use an extractor regex on them. In Figure 8, the regex `([^-]+)\.comcast\.net$` incorrectly clusters hostnames 4a, 5b, and 6a into `c.ashburn.va.ibone`, and interfaces 4b and 5a into `c.chicago.il.ibone`. It also incorrectly extracts `230.hsd1.md` and `77.hsd1.ut`, which contain components of literal IP addresses.

We assemble the hostnames with false assignments (FP and FIP) and recursively extract CSs from these components. For FPs, we extract `as13385|c-ashburn.va.ibone`, `as7272-1-c|ibone`, and `as|c|ibone`. For FIPs, we extract `c|hsd1`. We then build filter regexes, embedding CSs, and rank them by the number of false assignments filtered (descending) and true positives filtered (ascending). A candidate regex is expanded with the best filter regex if it meets the following conditions:
1. The regex must correctly filter false assignments from at least three routers.
2. The regex must filter more false assignments than true positives, improving the PPV (Positive Predictive Value).
3. For the FP case, the regex must reduce the inferred FPs by at least 10% to avoid overfitting to the training data.

### Selecting the Best Convention
It is possible to create a naming convention with multiple regexes, each covering a small portion of a suffix’s routers. However, complex conventions may overfit to the training data and miss operator intent. We penalize model complexity when selecting the best convention.

We rank naming conventions by ATP and select the highest-ranked one. If a lower-ranked convention has an ATP value within 4% of the higher-ranked one, we choose the lower-ranked convention if:
1. The PPV of inferences unique to the higher-ranked convention is at least 10% lower than the lower-ranked convention.
2. The lower-ranked convention consists of fewer regexes and yields no more than one additional FP.

### Limitations
Zhang et al. (2006) established that Internet topology mapping efforts using hostnames can be distorted because operators do not always maintain hostnames in DNS. Errors in hostnames can impact the accuracy of alias inferences using our regexes.

Our method currently builds regexes that extract names delimited by punctuation, but operators do not always delimit names with punctuation. Figure 10 illustrates this problem, where NC #1 separates interfaces belonging to the same training router in `odn.ad.jp` because it extracts part of the hostname, which should not be separated. This limitation could be addressed by including additional heuristics in our method to build NC #2.

Another fundamental limitation is that our technique cannot always cluster hostnames in different suffixes. Figure 11 shows an example where `yahoo.net` operators assigned addresses belonging to other networks on two of their routers. Because the operators of these different networks control the assignment of hostnames to their addresses, there is no opportunity to cluster these interfaces using hostnames. In the April 2019 ITDK, 18.9% of training routers had hostnames in more than one suffix.

### Results
We evaluated our algorithm by applying it across 16 ITDKs assembled by CAIDA between July 2010 and April 2019. All ITDKs contain IPv4 topology data, and two ITDKs contain IPv6 topology data. We classify a naming convention as poor if it clusters interfaces on fewer than three routers or has a PPV of less than 80%. A naming convention is promising if it clusters interfaces on at least three but fewer than seven routers with a PPV of at least 80%, or has a PPV of less than 90%. The remaining naming conventions with a PPV of at least 90% on more than three routers are classified as good.

Figure 12 shows that we classified approximately 33.5% of conventions for each IPv4 ITDK as good, covering about 1K suffixes in each ITDK. Promising conventions covered about 3.8% of suffixes. Good conventions covered about 60 suffixes (31.6%) for the two IPv6 ITDKs. We inferred at least one good convention for 2550 different suffixes across the 16 IPv4 ITDKs. However, the fraction of suffixes with good conventions has decreased over time, from 35.7% in July 2010 to 30.6% in April 2019.

### Validation
We created webpages showing the naming conventions inferred over time for each suffix across the 16 ITDKs and sent them to NANOG in April 2019. We received private feedback for 11 suffixes from 10 operators. We asked operators about discrepancies between the training data and the inferred naming convention, and about how they maintained their zones. These operators maintained zones either manually or semi-automatically, with different approaches to automation. Table 4 summarizes the validation data, identifying suffixes where the operators consented to their suffix being shared.

Of the 11, all but two naming conventions were reported as correct. Operator B confirmed that most of our inferred names were correct, but that our convention failed to extract a portion of the router name for some of their routers. Some of their routers also had incorrect hostnames; we inferred a second convention that clustered these incorrect hostnames congruently with the training data.

---

This version aims to make the text more readable and logically structured while maintaining the technical details.