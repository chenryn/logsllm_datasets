topics for future work.
Assumptions: In our proofs we are forced to rely on unstudied
assumptions about the underlying primitives used in MTProto.
In particular, we have to make related-key assumptions about
the compression function of SHA-256 which could be easily
avoided by tweaking the use of these primitives in MTProto. In
the meantime, these assumptions represent interesting targets
for symmetric cryptography research. Similarly, the complexity
of our proofs and assumptions largely derives from MTProto
deploying hash functions in place of (domain-separated) PRFs
such as HMAC. We recommend that Telegram either adopts
well-studied primitives for future versions of MTProto to ease
analysis and thus to increase conﬁdence in the design, or adopts
TLS.
Telegram: While we prove security of the symmetric part
of MTProto at a protocol level, we recall that by default
communication via Telegram must trust the Telegram servers,
i.e. end-to-end encryption is optional and not available for
group chats. We thus, on the one hand, (a) recommend that
Telegram open-sources the cryptographic processing on their
servers and (b) recommend to avoid referencing Telegram as
an “encrypted messenger” which – post-Snowden – has come
26Indeed, the Telegram developers rule out length-extension attacks in [44]
because the MAC is computed on the plaintext and because any change in
the MAC affects the decryption key and thus the decrypted plaintext, which
makes it unlikely that the integrity check passes. This is largely correct but
only under the assumption that msg_id is actually unique and re-encryption of
messages with the same msg_id is not allowed. That is, the condition given
by the developers in the FAQ was violated by several ofﬁcial Telegram clients.
to mean end-to-end encryption. On the other hand, discussions
about end-to-end encryption aside, echoing [2], [3] we note
that many higher-risk users do rely on MTProto and Telegram
and shun Signal. This emphasises the need to study these
technologies and how they serve those who rely on them.
Acknowledgements
We thank Mihir Bellare for discussions and insights. The
research of Mareková was supported by the EPSRC and the
UK Government as part of the Centre for Doctoral Training
in Cyber Security at Royal Holloway, University of London
(EP/P009301/1). The research of Paterson was supported in
part by a gift from VMware.
References
[1] Telegram, “500 million users,” https://t.me/durov/147, Feb 2021.
[2] K. Ermoshina, H. Halpin, and F. Musiani, “Can Johnny build a protocol?
co-ordinating developer and user intentions for privacy-enhanced secure
messaging protocols,” in European Workshop on Usable Security, 2017.
[3] M. R. Albrecht, J. Blasco, R. B. Jensen, and L. Mareková, “Collective
information security in large-scale urban protests: the case of Hong Kong,”
to appear at USENIX’21, pre-print at https://arxiv.org/abs/2105.14869,
2021.
[4] J. Jakobsen and C. Orlandi, “On the CCA (in)security of MTProto,”
Proceedings of
the 6th Workshop on Security and Privacy in
Smartphones and Mobile Devices - SPSM’16, 2016. [Online]. Available:
http://dx.doi.org/10.1145/2994459.2994468
[5] T. Sušánka and J. Kokeš, “Security analysis of the Telegram IM,”
in Proceedings of the 1st Reversing and Offensive-oriented Trends
Symposium, 2017, pp. 1–8.
[6] N. Kobeissi, “Formal Veriﬁcation for Real-World Cryptographic Protocols
and Implementations,” Theses, INRIA Paris ; Ecole Normale Supérieure
de Paris - ENS Paris, Dec. 2018, https://hal.inria.fr/tel-01950884.
[7] M. Miculan and N. Vitacolonna, “Automated symbolic veriﬁcation of
Telegram’s MTProto 2.0,” in Proceedings of the 18th International Con-
ference on Security and Cryptography, SECRYPT 2021, S. De Capitani di
Vimercati and P. Samarati, Eds. SciTePress, 2021, pp. 185–197.
[8] M. Fischlin, F. Günther, and C. Janson, “Robust channels: Handling unre-
liable networks in the record layers of QUIC and DTLS 1.3,” Cryptology
ePrint Archive, Report 2020/718, 2020, https://eprint.iacr.org/2020/718.
[9] Telegram, “End-to-end encryption, secret chats – sending a re-
quest,” http://web.archive.org/web/20210126013030/https://core.telegram.
org/api/end-to-end#sending-a-request, Feb 2021.
[10] ——, “tdlib,” https://github.com/tdlib/td, Sep 2020.
[11] ——, “tdlib – Transport.cpp,” https://github.com/tdlib/td/blob/v1.7.0/td/
mtproto/Transport.cpp#L272, Apr 2021.
[12] M. R. Albrecht, K. G. Paterson, and G. J. Watson, “Plaintext recovery
attacks against SSH,” in 2009 IEEE Symposium on Security and Privacy.
IEEE Computer Society Press, May 2009, pp. 16–26.
[13] M. Bellare and P. Rogaway, “The security of triple encryption and a
framework for code-based game-playing proofs,” in EUROCRYPT 2006,
ser. LNCS, S. Vaudenay, Ed., vol. 4004. Springer, Heidelberg, May / Jun.
2006, pp. 409–426.
[14] C. Campbell, “Design and speciﬁcation of cryptographic capabilities,”
IEEE Communications Society Magazine, vol. 16, no. 6, pp. 15–19, 1978.
[15] C. Jutla, “Attack on free-mac, sci.crypt,” https://groups.google.com/forum/
#!topic/sci.crypt/4bkzm_n7UGA, Sep 2000.
[16] M. Bellare, A. Boldyreva, L. R. Knudsen, and C. Namprempre, “On-line
ciphers and the hash-CBC constructions,” Journal of Cryptology, vol. 25,
no. 4, pp. 640–679, Oct. 2012.
[17] NIST, “FIPS 180-4: Secure Hash Standard,” 2015, http://dx.doi.org/10.
6028/NIST.FIPS.180-4.
[18] H. Handschuh and D. Naccache, “SHACAL (-submission to NESSIE-),”
Proceedings of First Open NESSIE Workshop, 2000, http://citeseerx.ist.
psu.edu/viewdoc/download?doi=10.1.1.3.4066&rep=rep1&type=pdf.
[19] G. A. Marson and B. Poettering, “Security notions for bidirectional
channels,” IACR Trans. Symm. Cryptol., vol. 2017, no. 1, pp. 405–426,
2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
105
[20] M. Bellare, T. Kohno, and C. Namprempre, “Authenticated encryption
in SSH: Provably ﬁxing the SSH binary packet protocol,” in ACM CCS
2002, V. Atluri, Ed. ACM Press, Nov. 2002, pp. 1–11.
[21] T. Kohno, A. Palacio, and J. Black, “Building secure cryptographic
transforms, or how to encrypt and MAC,” Cryptology ePrint Archive,
Report 2003/177, 2003, http://eprint.iacr.org/2003/177.
[22] C. Boyd, B. Hale, S. F. Mjølsnes, and D. Stebila, “From stateless to
stateful: Generic authentication and authenticated encryption construc-
tions with application to TLS,” in CT-RSA 2016, ser. LNCS, K. Sako,
Ed., vol. 9610. Springer, Heidelberg, Feb. / Mar. 2016, pp. 55–71.
[23] P. Rogaway and Y. Zhang, “Simplifying game-based deﬁnitions -
indistinguishability up to correctness and its application to stateful AE,”
in CRYPTO 2018, Part II, ser. LNCS, H. Shacham and A. Boldyreva,
Eds., vol. 10992. Springer, Heidelberg, Aug. 2018, pp. 3–32.
[24] Telegram, “Mobile protocol: Detailed description,” http://web.archive.org/
web/20210126200309/https://core.telegram.org/mtproto/description, Jan
2021.
[25] ——, “Schema,” https://core.telegram.org/schema, Sep 2020.
[26] ——, “TL language,” https://core.telegram.org/mtproto/TL, Sep 2020.
[27] Google, “BoringSSL AES IGE implementation,” https://github.com/
DrKLO/Telegram/blob/d073b80063c568f31d81cc88c927b47c01a1dbf4/
TMessagesProj/jni/boringssl/crypto/ﬁpsmodule/aes/aes_ige.c, Jul 2018.
http://web.archive.org/web/
20200527124125/https://core.telegram.org/mtproto/mtproto-transports,
May 2020.
[28] Telegram,
transports,”
“MTProto
[29] ——, “Sequence numbers in secret chats,” http://web.archive.org/web/
20201031115541/https://core.telegram.org/api/end-to-end/seq_no, Jan
2021.
[30] K. Ludwig, “Trudy - Transparent TCP proxy,” 2017, https://github.com/
praetorian-inc/trudy.
[31] Telegram,
“Telegram Desktop – mtproto_serialized_request.cpp,”
https://github.com/telegramdesktop/tdesktop/blob/v2.5.8/Telegram/
SourceFiles/mtproto/details/mtproto_serialized_request.cpp#L15, Feb
2021.
[32] ——,
“Mobile protocol: Detailed description – server
salt,”
http://web.archive.org/web/20210221134408/https://core.telegram.
org/mtproto/description#server-salt, Feb 2021.
[33] ——, “Telegram Android – Datacenter.cpp,” https://github.com/DrKLO/
Telegram/blob/release-7.4.0_2223/TMessagesProj/jni/tgnet/Datacenter.
cpp#L1171, Feb 2021.
[34] ——,
“Telegram
session_private.cpp,”
//github.com/telegramdesktop/tdesktop/blob/v2.6.1/Telegram/
SourceFiles/mtproto/session_private.cpp#L1338, Mar 2021.
Desktop
–
https:
[35] ——, “Notice of ignored error message,” http://web.archive.org/web/
20200527121939/https://core.telegram.org/mtproto/service_messages_
about_messages#notice-of-ignored-error-message, May 2020.
[36] M. Bellare and T. Kohno, “A theoretical treatment of related-key attacks:
RKA-PRPs, RKA-PRFs, and applications,” in EUROCRYPT 2003, ser.
LNCS, E. Biham, Ed., vol. 2656. Springer, Heidelberg, May 2003, pp.
491–506.
[37] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway, “A concrete security
IEEE Computer
treatment of symmetric encryption,” in 38th FOCS.
Society Press, Oct. 1997, pp. 394–403.
[38] P. Rogaway, “Nonce-based symmetric encryption,” in FSE 2004, ser.
LNCS, B. K. Roy and W. Meier, Eds., vol. 3017. Springer, Heidelberg,
Feb. 2004, pp. 348–359.
[39] J. Kim, G. Kim, S. Lee, J. Lim, and J. H. Song, “Related-key attacks
on reduced rounds of SHACAL-2,” in INDOCRYPT 2004, ser. LNCS,
A. Canteaut and K. Viswanathan, Eds., vol. 3348. Springer, Heidelberg,
Dec. 2004, pp. 175–190.
[40] J. Lu, J. Kim, N. Keller, and O. Dunkelman, “Related-key rectangle
attack on 42-round SHACAL-2,” in ISC 2006, ser. LNCS, S. K. Katsikas,
J. Lopez, M. Backes, S. Gritzalis, and B. Preneel, Eds., vol. 4176.
Springer, Heidelberg, Aug. / Sep. 2006, pp. 85–100.
[41] Telegram,
“Telegram
Desktop
–
session_private.cpp,”
https://github.com/telegramdesktop/tdesktop/blob/v2.7.1/Telegram/
SourceFiles/mtproto/session_private.cpp#L1258, Apr 2021.
[42] ——,
“Security
guidelines
for
client
developers,”
http:
//web.archive.org/web/20210203134436/https://core.telegram.org/
mtproto/security_guidelines#mtproto-encrypted-messages, Feb 2021.
[43] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS
and DTLS record protocols,” in 2013 IEEE Symposium on Security and
Privacy.
IEEE Computer Society Press, May 2013, pp. 526–540.
[44] Telegram, “FAQ for the Technically Inclined – length extension at-
tacks,” http://web.archive.org/web/20210203134422/https://core.telegram.
org/techfaq#length-extension-attacks, Feb 2021.
[45] D. Bleichenbacher, “Chosen ciphertext attacks against protocols based
on the RSA encryption standard PKCS #1,” in CRYPTO’98, ser. LNCS,
H. Krawczyk, Ed., vol. 1462.
Springer, Heidelberg, Aug. 1998, pp.
1–12.
[46] G. D. Micheli and N. Heninger, “Recovering cryptographic keys from
partial information, by example,” Cryptology ePrint Archive, Report
2020/1506, 2020, https://eprint.iacr.org/2020/1506.
[47] M. R. Albrecht and N. Heninger, “On Bounded Distance Decoding
with predicate: Breaking the "lattice barrier" for the Hidden Number
Problem,” Cryptology ePrint Archive, Report 2020/1540, 2020, https:
//eprint.iacr.org/2020/1540.
Appendix
A. Attacking the key exchange
During the key exchange, a client sends an RSA-encrypted
message 𝑚 (cid:66) (ℎ𝑟 , 𝛾, 𝑛(cid:48), 𝑝𝑟)
to the server with ℎ𝑟 (cid:66)
SHA-1(𝛾 (cid:107) 𝑛(cid:48)), 𝛾 a known constant, 𝑛(cid:48) ∈ {0, 1}256 and 𝑝𝑟 some
unknown padding. The tag ℎ𝑟 is meant to provide integrity.
Our target secret is 𝑛(cid:48). Note that the SHA-1(·) does not include
the padding but that 𝛾 has a variable bit-length (known to the
attacker). Thus, the payload must be parsed after decryption
before verifying its integrity, which enables a potential timing
side channel. While we were unable to establish the parsing
order of the Telegram servers or if they defend against such
leaks, the Telegram developers conﬁrmed to us the existence
of vulnerable behaviour on the server during the disclosure
process.
If we assume that server-side parsing proceeds analogously
to similar parsing in TDlib then a 32-bit header value 𝜁 (part
of 𝛾) is checked ﬁrst and the parsing function terminates early
when it does not match. Assuming further that this event is
detectable through a time difference, this instantiates an oracle
leaking when certain 32 bits match a known value. Our attack
then proceeds in the style of Bleichenbacher’s attack [45].
Writing 𝑐 (cid:66) 𝑚𝑒 mod 𝑁(cid:48) for the ciphertext observed by the
attacker – where 𝑒, 𝑁(cid:48) is the server’s public RSA key – we
· 𝑐 – for carefully sampled 𝑠𝑖 – to our oracle to
submit 𝑠𝑒
learn whether 𝑠𝑖 · 𝑚 is such that the target 32 bits match the
𝑖
expected header value. Collecting several such answers we can
then recover 𝑚 and thus 𝑛(cid:48).
A complication is that Bleichenbacher’s adaptive recovery
method – iteratively restricting the interval – is not available
to us since we learn the value of some middle bits rather than
the most signiﬁcant bits. Writing 𝑦 for the bit position of 𝜁,
we observe that (𝑠𝑖 · 𝑚 mod 𝑁(cid:48)) − 2𝑦 · 𝜁 mod 2𝑦+32 (cid:28) 2𝑦+32,
i.e. that the correct value 𝑚 produces an unusually short value
modulo 2𝑦+32. This enables us to use lattice reduction to ﬁnd
𝑚 using known techniques [46], [47].
implies knowing server_salt. To recover
session_id we can then run a guess and verify attack using
the techniques from Section VI. Alternatively, we observe that
𝑛(cid:48) is later used in the key exchange to protect the integrity
of Difﬁe-Hellman shares 𝑔𝑎 and 𝑔𝑏. Thus, our attack would
also enable an attacker-in-the-middle (MitM) attack on the key
exchange. The full version contains the details and a proof of
concept implementation of the lattice reduction part.
Knowing 𝑛(cid:48)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
106