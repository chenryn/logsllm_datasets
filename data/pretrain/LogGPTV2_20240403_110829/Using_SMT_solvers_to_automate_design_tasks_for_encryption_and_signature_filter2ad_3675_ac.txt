13824 bits
5376 bits
6144 bits
3584 bits
7680 bits
7168 bits
18432 bits
8704 bits
Broadcast Encryption
BGW05 [20, §3.1] Symmetric (SS1536) (n = 100)
•Average time measured over 100 test runs and the standard deviation in all test runs were within ±1% of the average.
Asymmetric (BN256) [Min. SK]
19200 bytes
3200 bytes
136.9 ms
28.5 ms
1992.2 ms
70.4 ms
119.6 ms
25.7 ms
6144 bits
5120 bits
4
4
256
4
Figure 3: AutoGroup on encryption schemes under various optimization options. We show running times and
sizes for several schemes generated in C++ and compare symmetric to automatically generated asymmetric
implementations at the same security levels (roughly equivalent with 3072 bit RSA). For IBE schemes, we
measured with the identity string length at 100 bytes. For BGW, n denotes the number of users in the
system.
marize the results of our experiments on encryption schemes
in Figure 3 and signature schemes in Figure 5.
System Conﬁguration. All of our benchmarks were executed
on a 2.66GHz 6-core Intel Xeon Mac Pro with 10GB RAM
running Mac OS X 10.8.3 using only a single core of the
Intel processor. Our implementation utilizes the MIRACL
library (v5.5.4), Charm v0.43 [2] in C++ due to the eﬃ-
ciency gains over Python code, and Z3 SMT solver (v4.3.1).
We based our implementations on the MIRACL library to
fully compare each scheme’s performance using symmetric
and asymmetric curves at equivalent security levels.
Results. To demonstrate the soundness of AutoGroup on
encryption and signature schemes, we compare algorithm
running times, key and ciphertext/signature sizes between
symmetric and asymmetric solutions. We tested AutoGroup
on a variety of optimization combinations to extract diﬀerent
asymmetric solutions. In each test case, AutoGroup reports
all the unique solutions, obtains the best solution for given
user-speciﬁed constraints, and generates the executable code
of the solution in a reasonable amount of time. AutoGroup
execution time on each test case is reported in Figure 6, but
does not include time for generating the C++ of the SDL
output.
4. AUTOSTRONG
In this section, we present and evaluate a tool, called Au-
toStrong, for automatically generating a strongly-unforgeable
signature from an unforgeable signature scheme.
4.1 Background on Digital Signatures
A digital signature scheme is comprised of three algo-
rithms: key generation, signing and veriﬁcation. The classic
(or “regular”) security deﬁnition for signatures, as formu-
lated by Goldwasser, Micali and Rivest [35], is called exis-
tential unforgeability with respect to chosen message attacks,
wherein any p.p.t. adversary, given a public key and the abil-
ity to adaptively ask for a signature on any message of its
choosing, should not be able to output a signature/message
pair that passes the veriﬁcation equation and yet where the
message is “new” (was not queried for a signature), with
non-negligible probability.
An, Dodis and Rabin [6] formulated strong unforgeability
where the adversary should not only be unable to generate
a signature on a “new” message, but also be unable to gen-
erate a diﬀerent signature for an already signed message.
Strongly-unforgeable signatures have many applications in-
cluding building signcryption [6], chosen-ciphertext secure
encryption systems [25, 28] and group signatures [7, 18].
Partitioned Signatures In 2006, Boneh, Shen and Wa-
ters [22] connected these two security notions, by provid-
ing a general transformation that converts any partitioned
(deﬁned below) existentially unforgeable signature into a
strongly unforgeable one.
Definition 4.1
(Partitioned Signature [22]). A sig-
nature scheme is partitioned if it satisﬁes two properties for
all key pairs (pk , sk ):
– Property 1: The signing algorithm can be broken into
two deterministic algorithms F1 and F2 so that a sig-
nature on a message m using secret key sk is computed
as follows:
1. Select a random r from a suitable randomness
space.
2. Set σ1 = F1(m, r, sk ) and σ2 = F2(r, sk ).
3. Output the signature (σ1, σ2).
– Property 2: Given m and σ2, there is at most one
σ1 such that (σ1, σ2) veriﬁes as a valid signature on m
under pk .
As one example of a partitioned scheme, Boneh et al. par-
tition DSS [45] as follows, where x is the secret key:
F1(m, r, x) = r
−1(m + xF2(r, x)) mod q
F2(r, x) = (gr mod p) mod q
Our empirical evidence shows that many discrete-log and
pairing-based signatures in the literature are partitioned.
Interestingly, some prominent prior works [14, 15] claimed
that there were “few” examples of partitioned schemes “be-
yond Waters [56]”, even though our automation discovered
several examples existing prior to the publication of these
works. We conjecture that it is not always easy for a human
to detect a partition.
Chameleon Hashes The BSW transform uses a chameleon
hash [39] function, which is characterized by the nonstan-
dard property of being collision-resistant for the signer but
collision tractable for the recipient. The chameleon hash
404Figure 4: A high-level presentation of the AutoStrong tool, which uses external tools Z3, Mathematica and
SDL Parser.
is created by establishing public parameters and a secret
trapdoor. The hash itself takes as input a message m and
an auxiliary value s. There is an eﬃcient algorithm that
on input the trapdoor, any pair (m1, s1) and any additional
message m2, ﬁnds a value s2 such that ChamHash(m1, s1) =
ChamHash(m2, s2).
Boneh et al. [22] employ a speciﬁc hash function based
on the hardness of ﬁnding discrete logarithms.4 Since pair-
ing groups also require the DL problem to be hard, this
chameleon hash does not add any new complexity assump-
tions. It works as follows in G, where g generates G of order
p. To setup, choose a random trapdoor t ∈ Zp
∗ and com-
pute h = gt. The public parameters include the description
of G together with g and h. The trapdoor t is kept secret.
To hash on input (m, s) ∈ Zp
2, compute
ChamHash(m, s) = gmhs.
Later, given any pair m, s and any message m(cid:48), anyone with
the trapdoor can compute a consistent value s(cid:48) ∈ Zp as
(cid:48)
s
= (m − m
(cid:48)
)/t + s
such that ChamHash(m, s) =ChamHash(m(cid:48), s(cid:48)).
The BSW Transformation The transformation [22] is ef-
ﬁcient and works as follows. Let Πp = (Genp, Signp, Verifyp)
be a partitioned signature, where the signing algorithm is
partitioned using functions F1 and F2. Suppose the ran-
domness for Signp is picked from some set R. Let || denote
concatenation. BSW constructs a new scheme Π as:
Gen(1λ): Select a group G with generator g of prime order
p (with λ bits). Select a random t ∈ Zp and com-
pute h = gt. Select a collision-resistant hash function
Hcr : {0, 1}∗ → Zp. Run Genp(1λ) to obtain a key
pair (pk p, sk p). Set the keys for the new system as
pk = (pk p, Hcr, G, g, h, p) and sk = (pk , sk p, t).
Sign(sk , m): A signature on m is generated as follows:
1. Select a random s ∈ Zp and a random r ∈ R.
2. Set σ2 = F2(r, sk p).
3. Compute v = Hcr(m||σ2).
4. Compute the chameleon hash m(cid:48) = gvhs.
5. Compute σ1 = F1(m(cid:48), r, sk p) and output the sig-
nature σ = (σ1, σ2, s).
that
4Indeed, we observe
substituting an arbitrary
chameleon hash could break the transformation. Suppose
H(m, s) ignores the last bit of s (it is easy to construct such
a hash assuming chameleon hashes exist.) Then the BSW
transformation using this hash would result in a signature
of the form (σ1, σ2, s), which is clearly not strongly unforge-
able, since the last bit can be ﬂipped.
Verify(pk , m, σ): A signature σ = (σ1, σ2, s) on a message m
is veriﬁed as follows:
1. Compute v = Hcr(m||σ2).
2. Compute the chameleon hash m(cid:48) = gvhs.
3. Output the result of Verifyp(pk p, m(cid:48), (σ1, σ2)).
Theorem 4.2
(Security of BSW Transform [22]).
The signature scheme Π = (Gen, Sign, Verify) is strongly ex-
istentially unforgeable assuming the underlying scheme Πp =
(Genp, Signp, Verifyp) is existentially unforgeable, Hcr is a
collision-resistant hash function and the discrete logarithm
assumption holds in G.
The Bellare-Shoup Transformation The BSW trans-
formation [22], which only works for partitioned signatures,
sparked signiﬁcant research interest into ﬁnding a general
transformation for any existentially unforgeable signature
scheme. Various solutions were presented in [14, 15, 37, 53–
55], as well as an observation in [14] that an ineﬃcient trans-
formation was implicit in [34].
We follow the work of Bellare and Shoup [14,15], which is
less eﬃcient than BSW and, for our case, requires a stronger
complexity assumption, but works on any signature. Their
approach uses two-tier signatures, which are “weaker” than
regular signatures as hybrids of regular and one-time schemes.
In a two-tier scheme, a signer has a primary key pair and,
each time it wants to sign, it generates a fresh secondary
key pair and produces a signature as a function of the both
secret keys and the message. Both public keys are required
to verify the signature. Bellare and Shoup transform any
regular signature scheme by signing the signature from this
scheme with a strongly unforgeable two-tier scheme. They
also show how to realize a strongly unforgeable two-tier sig-
nature scheme by applying the Fiat-Shamir [30] transfor-
mation to the Schnorr identiﬁcation protocol [51], which re-
quires a one-more discrete logarithm-type assumption.
The BS transformation works as follows. Let Πr = (Genr,
Signr, Verifyr) be a regular signature scheme and let Πt =
(PGent, SGent, Signt, Verifyt) be a two-tiered strongly unforge-
able scheme. A new signature scheme Π is constructed as:
Gen(1λ): Run Genr(1λ) → (pk r, sk r) and PGent(1λ) → (ppk ,
psk ). Output the pair PK = (pk r, ppk ) and SK =
(sk r, psk ).
Sign(SK, m): A signature on m is generated as follows:
1. Parse SK as (sk r, psk ).
2. Run SGent(1λ) → (spk , ssk ).
3. Sign the message and secondary key as σ1 ←
Signr(sk r, (spk||m)).
SDL ParserOutput SDLAutoStrongProperty 2Holds?Apply BSW Transformmore efﬁcientApply BS TransformgeneralyesnoPartition CheckerA: Identify Property 1B: Identify Veriﬁcation Eq.C: Decompose to Model PairingD: Produce Equations.E: Evaluate EquationsZ3 Input SDLMathematica 4054. Sign the ﬁrst signature as σ2 ← Signt(psk , ssk , σ1).
5. Output the signature σ = (σ1, σ2, spk ).
Verify(PK, m, σ): A signature σ = (σ1, σ2, spk ) on a message
m is veriﬁed as follows:
1. Parse PK as (pk r, ppk ).
2. If Verifyr(pk r, (spk||m), σ1) = 0, then return 0.
3. If Verifyt(ppk , spk , σ1, σ2), then return 0.
4. Otherwise, return 1.
Theorem 4.3
(Security of BS Transformation [15]).
If the input scheme is existentially unforgeable, then the out-
put signature is strongly existentially unforgeable assuming
the strong unforgeability of the two-tier scheme.
The Transformation used in AutoStrong For our pur-
poses, we employ the following hybrid transformation com-
bining BSW and Bellare-Shoup. On input a signature scheme,
we automate the following procedure:
1. Identify a natural partition satisfying property 1 and
test if it has property 2. (We allow false negatives, but
not false positives. See Section 4.3.)
2. If a valid partition is found, apply the BSW transfor-
mation [22] (using SHA-256 and the DL-based chameleon
hash above).
3. If a valid partition is not found, apply the Bellare-
Shoup transformation [14, 15] (using the Schnorr Fiat-
Shamir based two-tier scheme suggested in [15].)
4. Output the result.
The security of this transformation follows directly from
the results of [15,22] as stated in Theorems 4.2 and 4.3. The
most challenging technical part is step one: determining if a
scheme is partitioned.
4.2 How AutoStrong Works
AutoStrong takes as input the SDL description of a digital
signature scheme along with some metadata.5 At a high-
level, it runs the transformation described at the end of
the last section, where the most challenging step is testing
whether a scheme is partitioned according to Deﬁnition 4.1.
We now describe each step involved in testing that Prop-
erties 1 and 2 are satisﬁed and how we utilize Z3 and Math-
ematica to prove such properties, as illustrated in Figure 4.
Identify Property 1. The ﬁrst goal is to identify the vari-
ables in the signature that should be mapped to σ1 or σ2
according to Deﬁnition 4.1. We assume that the input sig-
nature scheme is existentially unforgeable.6 Given this as-
sumption, our objective is to identify the portions of the
signature that are computed based on the message and des-
ignate that component as σ1. All other variables in the sig-
nature that do not meet this criteria are designated as σ2.
We determine that we have designated the correct variables
for property 1 if and only if the variable mapping satisfy
property 2. We test only the most “natural” division for
5The user must specify the variables that denote message,
signature, key material in a conﬁguration ﬁle.
6We remark that we tested the partition checker for Au-
toStrong on schemes that are not existentially unforgeable
to fully vet the checker (see Figure 5), but the resulting out-
put in these cases may not be strongly unforgeable.
property 1, which could result in a false negative, but this
won’t impact the security, so our system allows it.
To illustrate each step, we will show how our tool identiﬁes
the partition in the CL signature scheme [24].
CL signatures [24]: Key generation consists of selecting
a generator, g ∈ G, then randomly sampling x ∈ Zq and
y ∈ Zq. It sets sk = (x, y) and pk = (g, X = gx, Y = gy).
To sign a message m ∈ Zq, the signer samples a uniformly
from G and computes the signature as:
σ = (a, b = ay, c = ax+m·x·y).
The veriﬁer can check σ by ensuring that e(a, Y ) = e(g, b)
and e(X, a) · e(X, b)m = e(g, c).
Intuitively, our logic would identify that c is dependent
on the message, therefore, identifying that σ1 = c and σ2 =
(a, b) which satisﬁes the deﬁnition of property 1. The next
challenge is to determine whether property 2 holds given our
identiﬁed mapping for σ1 and σ2.
1 exists such that σ(cid:48)
1, σ2)) = 1
Prove Property 2. Proving that a scheme satisﬁes this
property requires the ability to abstractly evaluate the ver-
iﬁcation equations on the input variables. We require this
ability to automatically prove that there exists at most one
σ1 which veriﬁes under a ﬁxed σ2, m and pk for all pos-
sible inputs. To this end, the partition checker determines
1 (cid:54)= σ1 and is a valid sig-
whether a σ(cid:48)
nature over the ﬁxed variables. Finding such a σ(cid:48)
1 means
the signature is not partitioned. The checker determines