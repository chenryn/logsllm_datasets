# A New Framework against Privilege Escalation Attacks on Android

**Authors:**
- Wenming Zhou
  - State Key Lab of Integrated Service Network, Xidian University, Xi’an, China, 710126
  - Email: [EMAIL]
- Yuqing Zhang
  - National Computer Network Intrusion Protection Center, UCAS, Beijing, China, 100048
  - Email: [EMAIL]
- Xuefeng Liu
  - State Key Lab of Integrated Service Network, Xidian University, Xi’an, China, 710071
  - Email: [EMAIL]

## Abstract
Android's permission-based security model restricts the operations each application can perform. However, it is vulnerable to privilege escalation attacks, where applications can cooperate to perform operations that are individually forbidden, leading to privacy leaks. This poster presents a new policy-centered security framework to combat application-level privilege escalation attacks. Our approach considers communication content and selectively passes privacy information through middleware, while deploying mandatory access control at the kernel level using dynamic taint tracking. Test results show that our framework can prevent known confused deputy attacks, is flexible enough to prevent unknown attacks, and reduces false positives in colluding attack prevention compared to previous work.

**Categories and Subject Descriptors:** D.4.6 [Operating Systems]: Security and Protection  
**General Terms:** Security  
**Keywords:** Privilege Escalation Attacks, Taint Tracking, Privacy Protection

## 1. Introduction
In Android's permission-based security model, applications are granted only the permissions they need, and each runs in its own sandbox. Files owned by one application cannot be accessed by another unless explicitly exposed by developers. However, this model is vulnerable to privilege escalation attacks, including collusion and confused deputy attacks. Previous works have identified these issues and proposed various security extensions like TaintDroid, IPC Inspection, SEAndroid, QUIRE, and XManDroid. Despite these efforts, none of these schemes effectively protect against privacy leaks via privilege escalation attacks.

Our model introduces two design principles to protect against such attacks. The framework is similar to XManDroid but carefully considers communication content during inspection. Our main contributions are:
1. A policy-centered framework with a whitelist for allowed call-chains and accesses.
2. An automated permission-granting mechanism inspired by QUIRE.
3. A scheme that integrates taint tracking and mandatory access control at the kernel level, inspired by TaintDroid.

## 2. Framework Design
### 2.1 Overview
Inspired by XManDroid, our security framework performs runtime monitoring and analysis of inter-application communications. Unlike XManDroid, our framework enforces two basic policies based on the design principles outlined in Section 2.2. All Inter-Component Communications (ICCs) not adhering to these principles are denied unless they are in the whitelist. Covert channels are managed by adding policies to a blacklist to prevent new channel-based communications.

### 2.2 Design Principles
Before describing the principles, we define the following concepts:
- Application A has permissions \( PA = \{pA1, pA2, \ldots, pAn\} \) and can access privacy data \( DA = \{dA1, dA2, \ldots, dAn\} \).
- Similarly, application B has permissions \( PB \) and privacy data \( DB \).

When A attempts to establish an ICC with B, the privilege escalation set \( P_{escalation} = PB - (PA \cap PB) \) and the data leakage set \( D_{leakage} = (DA \cup DB) - (DA \cap DB) \) are defined.

#### 2.2.1 Limitation of Permission
Inter-Component Communication (ICC) enforces that a component without permission \( p \) should not call a component with permission \( p \). Thus, \( P_{escalation} \) is limited for the callee.

#### 2.2.2 Isolation of Privacy Data
Applications should not access privacy data they do not have permission to access. Therefore, \( D_{leakage} \) should not be passed during ICCs.

### 2.2.3 Life-cycle Based Permission Mechanism
Inspired by QUIRE, we check the permissions of the caller and callee when an ICC is established. If \( P_{escalation} \neq \emptyset \), the callee's permissions are limited during the first life cycle. Analysis of 50 applications showed that 98% of privilege escalation attacks occur during the first life cycle of exposure components.

### 2.2.4 ICC Inspection
This module inspects communication between components with different UIDs in the middleware. It computes \( P_{escalation} \), extracts the Intent object passed among components, and checks for privacy data using taint tracking at the message level provided by TaintDroid.

### 2.2.5 Privacy-Type-Based Access Control
Discretionary Access Control (DAC) isolates applications with different UIDs but does not address colluding applications. We propose Privacy Type Access Control (PTBAC) for Mandatory Access Control (MAC) at the kernel level. PTBAC's policies are dynamically based on taint tracking. When privacy data is written to a file, taint information is stored in a policy database, and PTBAC ensures that unauthorized applications cannot access specific types of privacy data.

### 2.2.6 Role-Based Management Model
By default, the callee receives reduced permissions during the first life cycle, and \( D_{leakage} \) is not allowed. Users can assign roles to applications to allow specific collaborations. Google Play categorizes applications into 34 categories, so our model initializes at least 34 roles, and users can assign multiple roles to an application as needed.