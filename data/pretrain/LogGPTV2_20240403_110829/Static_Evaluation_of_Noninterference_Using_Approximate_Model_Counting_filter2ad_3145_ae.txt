sider r procedure executions using the same S(‘secret’) (i.e.,
S1(‘secret’) = S2(‘secret’) = . . . = Sr(‘secret’)). Our intu-
ition suggests that after r = M −1 executions of the procedure,
a smart attacker will have learned everything about S(‘secret’)
that it can from proc; e.g., by setting Cj(‘test’) = j, the
attacker either will have observed some Oj(‘result’) = 1,
in which case it knows S(‘secret’) mod M = j, or else it
knows S(‘secret’) mod M = 0. Consistent with that intuition,
in Fig. 6(c), both ηmin and ηmax remain steady for M = 2 as r
increases, since no new information is available to the attacker
after r = 1. Similarly, for M = 4, ηmin and ηmax both increase
precipitously (by ≥ 74%) from r = 1 to r = 2 and then
begin to ﬂatten out (albeit imperfectly—both are estimated
values, after all), which is consistent with this intuition that
the attacker should learn no new information past r = 3.
For M > 4, each additional procedure execution provides
additional information to the attacker about all secrets and
521
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
proc (C,I,S)
if (I(‘rand’) mod M = 0)
O(‘result’) ← S(‘secret’)
else
O(‘result’) ← I(‘rand’)
return O
n
ˆJ
1
0.8
0.6
0.4
0.2
0
M =1
M =2
M =4
M =64
M =210
M =231
0
4
8
12
16
log2 n
20
24
28
32
M log2 ˆηmin
log2 ˆηmax
1
2
4
64
210
231
0.0
−0.9
−1.8
−6.5
−10.7
−31.8
0.0
−0.5
−0.8
−1.1
−1.2
−1.9
(a) Procedure
(b) ˆJn for different n and M
(c) ˆηmin and ˆηmax for different M
Fig. 7: An example illustrating leakage dependent on randomness (see Sec. V-C)
much more about some (namely those for which it learns the
residue class mod M ). Correspondingly, both ηmin and ηmax
increase monotonically along each of these rows.
C. Leaking the secret conditioned on randomness
We now illustrate the ability of our technique to measure
leakage from a different randomized procedure from that
discussed in Fig. 2. The procedure, shown in Fig. 7(a), returns
the secret if a random value is divisible by a constant M
and returns that random value otherwise. Clearly, a larger M
implies that fewer secret values leak, but those that leak do
so completely. This behavior is illustrated by the ˆJn measure
shown in Fig. 7(b); the leakage is consistently higher for lower
values of M . Similarly, while ˆηmax remains high for all values
of M (never dropping below 1
4 ), ˆηmin ranges from ˆηmin = 1
when all secrets are leaked (M = 1) to ˆηmin ≈ 0 when few
secrets are leaked (M = 231).
VI. CASE STUDIES
In this section, we illustrate our methodology by applying
it
to real-world codebases susceptible to the inference of
search queries via packet-size observations, inference of secret
values due to compression results, and inference of TCP
sequence numbers. We claim no novelty in identifying these
attacks; all are known and explored in other papers, though
not in the particular codebases (or codebase versions) that we
examine here and typically only through application-speciﬁc
analysis. Our contribution lies in showing the applications of
our methodology to measuring interference in an application-
agnostic way and the impact of alternatives for mitigating that
interference.
A. Trafﬁc analysis on web applications
Packet sizes are a known side channel for reverse engi-
neering search queries and other web content returned from
a server, and defenses against this side channel have been
studied using various methods of QIF (e.g., [5], [25], [48]).
Speciﬁcally, a network attacker can often distinguish between
two queries to a web search engine because the response trafﬁc
length is dependent on the query. Even packet padding may
not hide all secret information [49].
In this section, we use our methodology to analyze the
auto-complete feature of search engines to demonstrate our
ability to detect the leakage of the user’s query from the
network packet sizes. Furthermore, we repeat our analysis after
applying mitigations suggested in previous work [49]. This
allows us to compare the effectiveness of these mitigations to
the original implementation.
We evaluated a C++ web server called Sphinx (http:
//sphinxsearch.com/), which provides PHP APIs for a client
to send a query string to the server. The auto-complete feature
then returns a list of keywords that best match the query
string. To generate the postcondition that characterizes the
auto-complete feature, we marked the query string as the
secret (i.e., S(‘secret’) is the query string) and the ﬁnal
application response length as the observable (i.e., VarsO =
{‘response length’}), by injecting only two lines into the
server’s code. In this application,
there was no attacker-
controlled input and no other input (i.e., VarsC = VarsI = ∅).
Since the auto-complete results depend on the contents of
the server database, we simply instantiated the database with
an example containing six keywords and 35 query trigrams
(see Fig. 8(a)). When provided an input query string of at
least three characters, Sphinx returns (content containing)
the two keywords with the highest “score” based on matching
trigrams in the query string to each keyword’s associated
trigrams. We also limited queries to three characters drawn
from {‘a’, . . . , ‘z’} ({97, . . . , 122} in ASCII), yielding 263 ≈
214 possible queries. Note that instantiating the server with
a speciﬁc database and limiting the query characters and
length as described cannot induce our analysis to provide false
positives, though it can contribute false negatives.
We experimented with two types of mitigation strategies.
Random padding is motivated by protocols like SSH that
obfuscate trafﬁc lengths by adding a random amount of
padding up to some maximum limit to the application response
payload. We experimented with padding lengths of up to 2
bytes (‘rand.2’), 16 bytes (‘rand.16’), 64 bytes (‘rand.64’),
and 128 bytes (‘rand.128’). Padding to a ﬁxed length is a
second strategy, which increases the length of the application
response payload to the nearest multiple of a ﬁxed length.
We experimented with padding to a multiple of 64 bytes
(‘ﬁxed.64’) or a multiple of 256 bytes (‘ﬁxed.256’). We
“implemented” both of these padding strategies by modifying
the postcondition ΠSphinx to reﬂect them (vs. modifying the
522
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
Keyword
Trigrams
class
code
div
the
and
title
s
c cl cla las ass ss
c co cod ode de e
d di div iv v
t
th the he e
a an and nd d
t
ti tit itl tle le e
n
ˆJ
0.6
0.4
0.2
0
0
(a) Small database for Sphinx
rand.2
ﬁx.64
rand.16
ﬁx.256
rand.64
nopadding
rand.128
4
8
(cid:20)log2 n(cid:21)
(b) ˆJn for different n
12
Mitigation log2 ˆηmin log2 ˆηmax
−1.5
nopadding −8.3
−1.9
−8.4
rand.2
−2.3
−8.5
rand.16
−2.3
−8.5
rand.64
−2.5
−9.0
rand.128
−3.8
−8.5
ﬁx.64
nan
ﬁx.256
nan
“nan” denotes “not a number,” i.e.,
ˆηmin = 0 or ˆηmax = 0
(c) ˆηmin and ˆηmax for different mitigations
Fig. 8: Analysis of auto-complete feature of Sphinx and mitigation strategies (see Sec. VI-A)
Sphinx code directly).
Fig. 8(b) shows ˆJn for the random padding strategies and
Jn (which is equivalent to ˆJn since VarsI = ∅) for the original,
‘ﬁxed.64’, and ‘ﬁxed.256’ strategies. Here, ‘nopadding’ is the
result for original auto-complete in Sphinx. In addition,
Fig. 8(c) shows the measure ˆηmin and ˆηmax for each strategy.
Only ‘ﬁxed.256’ reaches zero leakage, indicated by ‘nan’ (‘not
a number’), since any result from Sphinx populated with
the database in Fig. 8(a) ﬁt within 256 bytes and so resulted
in a padded payload of that
length. Comparing different
padding mechanisms, our measures ˆηmin and ˆηmax show results
consistent with the intuitive order of the different mitigation
strategies in terms of their effectiveness in preventing leakage.
Our results suggest that ‘nopadding’ leaks the most, followed
by ‘rand.2.’ The conﬁguration ‘rand.16’ was only very slightly
worse than ‘rand.64’, and ‘ﬁx.64’, which provided similar pro-
tection for this setup, and ‘rand.128’ provided better protection
than all others except ‘ﬁxed.256.’ These results demonstrate
the power of our methodology for enabling comparisons of the
beneﬁts of different amounts of padding for this database. For
example, our analysis shows that for this database, ‘rand.64’
provides little security beneﬁt compared to ‘rand.16’, despite
adding 3× more padding in expectation.
B. CRIME attacks
Our methodology is powerful in accounting for attacker-
controlled inputs, and in this section we demonstrate the
beneﬁts of this capability by applying it to detect CRIME
attacks [6], [50]. A CRIME vulnerability arises when a web
client applies “unsafe” compression prior to transmitting a
request over TLS. HTTP requests can carry information (e.g.,
the URL parameters) that an attacker can induce; e.g., if the
client visits an attacker-controlled website, then the attacker
can induce requests from the client to another, target website
with URL parameters that the attacker sets. By observing the
lengths of compressed requests to the target website, the at-
tacker can deduce whether the attacker-controlled input shares
a substring with a secret contained in the request (e.g., the
client’s cookie for the target website) that the attacker is unable
to observe directly. To be concrete, if the attacker-induced re-
quest to the target website is http://target.com?username=name
then the request will compress better if name is a preﬁx of the
client’s cookie for target.com.
CRIME attacks utilize the property of an adaptive compres-
sion algorithm that the encoding dictionary is dependent on
both the secret and attacker-controlled variables. As suggested
by Alawatugoda et al. [50], a possible mitigation is to separate
the compression for the secret and the other parts of the plain-
text or to use a ﬁxed-dictionary compression algorithm such
as Smaz [51]. The latter mitigation, though an improvement,
removes the inﬂuence of the attacker-controlled input only on
the compression dictionary. Consider a two-byte plaintext ab
whose ﬁrst character is secret. If a is ‘a’, then this two-byte
word will be compressed if b is ‘t’ and will be left unchanged
if b is ‘y’, assuming ‘at’ is in the dictionary but ‘ay’ is not.
Thus, the leakage should not be zero even if a ﬁxed-dictionary
algorithm is used.
To analyze this scenario in our framework, we modeled the
input for Gzip and Smaz to be of the form
‘http://target.com/? secret=’ + S(‘secret’) + I(‘sufﬁx’)
+ ‘,username=secret=’ + C(‘input’)
where ‘+’ denotes concatenation. Here, S(‘secret’) and
C(‘input’) were each one byte, I(‘sufﬁx’) was two bytes,
and the attacker-observable variable was the length of the
compressed string. Each byte was allowed to range over ‘a’,
. . ., ‘z’ and ‘0’,. . .,‘9’. The S(‘secret’) byte after the ﬁrst
‘secret=’ plays an analogous role to the client cookie in a
CRIME attack, i.e., as the secret to be guessed by the attacker,
and the ‘secret=’ immediately following ‘username=’
serves as a preﬁx to match the ﬁrst instance of ‘secret=.’
We applied our tool to analyze the leakage susceptibility of
Gzip-1.2.4 and Smaz in this conﬁguration, executed up to
three times (r ∈ {1, 2, 3}) with the same secret. Our results
are shown in Fig. 9. Our results show that for one execution
(r = 1), Smaz is no better than Gzip. That is, ηmax and ηmax
in Fig. 9(b) suggests that Smaz leaks less information about
some secrets but some information about more secret values
versus Gzip; as mentioned above, Smaz can leak information
about a secret value if it composes a word in its dictionary, as
well. However, the strength of Smaz is revealed as r grows,
since its leakage remains unchanged. In contrast, the leakage
of Gzip grows with r, essentially matching that of Smaz
523
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
n
ˆJ
0.8
0.6
0.4
0.2
0
0
Gzip-r=1
Smaz-r=1
Gzip-r=2
Smaz-r=2
Gzip-r=3
Smaz-r=3
Procedure
Gzip
Smaz
log2 ˆηmin
r = 2
r = 1
r = 3
−2.04 −1.22 −0.85 −1.00 −0.58 −0.43
−1.58 −1.55 −1.54 −3.73 −4.02 −3.95
r = 2
r = 3
r = 1
log2 ˆηmax
1
2
3
4
5
(cid:20)log2 n(cid:21)
(a) Jn for different n and r
(b) ˆηmax and ˆηmax for different r
C(‘input’) O(‘length’) S (‘secret’) I(‘sufﬁx’)
Gzip
Smaz
‘c’
‘r’
66
36
‘c’
‘f’
‘oo’
‘or’
(c) Examples from YS \ YS (cid:2) for samples S, S(cid:2)