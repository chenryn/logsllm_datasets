resources during parsing. Two nodes with the same symbolic
resource indicates that
they have explicit dependency. An
Edge denotes dependency/causality between two nodes Nfrom
and Nto. Finally, a causal model
is deﬁned as a 3-tuple
 where T is a sequence
of terms, P(E)implicit is the set of implicit dependency edges
and P(E)explicit is the set of explicit dependency edges. The
deﬁnitions of two kinds of edges can be found in Sec. II.
5
Fig. 4. MCI on the Motivating Example.
SyscallName
Repetition
SymbolicResource
Term
Node
Edge
Model
SysName ::= open | read | write |
...
...
| n | m | ∗
R ::= 1 | 2 | 3 |
S ::= {α, β, γ, ...}
T ::= N | NT | (T )R
N ::= SysNameP(S)
E ::= 
M ::= 
Fig. 5. Deﬁnition of Causal Model.
β, read
δ, write β(cid:105),(cid:104)read
∗
∗
γ, stat∗
δ(cid:105),(cid:104)read
∗
For example, the model in Fig. 4 (a) can be represented
as follows. First, T can be represented by a sequence:
∗
δ, write β, write . Implicit de-
read α, stat β, read
pendencies (dotted edges below nodes) are denoted as fol-
δ, write (cid:105)}. Ex-
lows: {(cid:104)read
∗
∗
γ, read
plicit dependencies (solid edges above nodes) are the follow-
ing: {(cid:104)stat β, stat∗
β(cid:105),(cid:104)stat β, write β(cid:105)}. Observe the nodes in an
explicit edge have the same resource symbol, indicating that
they operate on the same resource. In the paper, we will use
the more concise graphical representations when possible.
Syscall Trace. As shown in Fig. 6, a system call trace T
is a sequence of trace entries TE where a trace entry is a
system call name annotated with a set of ConcreteResource
that represents concrete resource handlers, and a number N that
represent an index of TE in T . Note that it does not contain
any dependency information. The ﬁrst 6 entries in Fig. 4 (f)
are represented as TE = (read 1
1, ...).
Note that the subscripts represent concrete resource handlers
and the superscripts represents indexes.
0, stat 2
1, ..., read 3
2, write 4
ConcreteResource
TraceEntry
SyscallTrace
C ::= N
TE ::= SysName
N
P(C )
T ::= TE
Fig. 6. Deﬁnition of Syscall Trace.
B. Problem Statement
We aim to infer ﬁne-grained causality from a syscall trace
by parsing it with models. This procedure can be formally
deﬁned as a function of T and P(M ):
T × P(M ) → (TE → P(N × M ))
Speciﬁcally, given a syscall trace T and a set of models
P(M ), the function generates a mapping, in which a trace
entry is mapped to a set of nodes N in model M. It is a
set because a trace entry can be present in multiple models as
6
shown in the motivation example in Sec. II. With the mapping,
the dependencies between trace entries can be derived from
the dependencies between the matched nodes in the models.
For example, parsing the trace in Fig. 4 (f) using the mod-
els in (a)-(d) generates the following mapping. The ﬁrst 4
0 →
events are mapped to model (a): (read 1
2 →), (read 3
∗
), (stat 2
δ, Ma >
1 →). Moreover, stat 11
belongs
), (write 4
5 →). It entails the fol-
stat , Mc >), (stat 11
lowing concrete dependency edges  (from
2, write 4
∗
δ, write β > in (a) ) and 
(from model edge  in (d)). The ﬁrst edge
indicates implicit dependency between the original gpg ﬁle
(out.gpg) and a temp ﬁle containing its decrypted contents,
and the second edge implies that the copy and paste action is
related to the temp ﬁle containing the decrypted contents of
the original gpg ﬁle (out.gpg). Such dependency edges lead to
a causal graph as that in Fig. 2-(d).
5
The mapping may not be total, depending on the compre-
hensiveness of the models. An important feature of MCI is
model composibility, meaning that a complex behavior can be
composed by multiple models sharing some common nodes.
For instance, a complex user behavior in Vim such as “open
ﬁle, edit, copy, edit, paste, save, reopen” can be decomposed
to multiple primitive models. As such, the number of models
needed for regular workload is limited as shown in Sec. V.
The key challenge of MCI lies in parsing the trace that
does not contain any dependencies with models that contain
dependency information, which entails solving two prominent
technical problems discussed next.
C. Technical Challenges: Complexity and Ambiguity
1) Language Complexity: According to our deﬁnition, a
trace is a string in the trace language that does not contain
dependency information, our problem is essentially to parse
the string to various model instances. In the following, we
use the classic language theory to understand the complexity
of our problem. Note that although it seems that we could
consider models as graphs and leverage the sub-graph isomor-
phism theory to understand our problem, there are places that
can hardly be formulated in the graph theory. For instance,
our trace is not a graph because it does not have implicit
...w5...s5...s6w6...r0...r1w7...(f) System call trace(b) Mb: Open à Copysβsγuδrγwε(a) Ma: Open a gpg filesβrγsβrδwβwε(c) Mc: Open à Copy à Paste(e) Me: Save a gpg filesβrγsβrδwβsεsβsγwδrγwεsζsεs3......r0s4...(d) Md: Editsγwγsδs1...r2w1...r0*MaMbMcMe**********rαrαrαsβrαr0r0α: stdin, β: output (temp) file, γ: key file, δ: gpg file, ε: pipe to Vimα: stdin, β: opened file, γ: swap file, δ: temp swap file, ε: viminfo fileα: stdin, β: opened file, γ: swap file, δ: temp swap file, ε: viminfo file, ζ: config fileα: stdin, β: viminfo file, γ: swap file, δ: current fileα: stdin, β: output (encrypted) file, γ: key file, δ: input file, ε: pipe to Vimsσ: stat(σ), wσ: write(σ), rσ: read(σ), uσ: unlink(σ), rσ: read(σ)*, sσ: stat(σ)*Legend**0: stdin, 1: temp file (containing decrypted contents), 2: org. gpg file (gpg.out), 3: data2 file, 4: data3 file, 5: viminfo file, 6: swap file for the temp (1), 7: new gpg file...rαs1Md1234567891011121314151617MeMdMcMaMbModel boundariesdependency information. Furthermore, our model may have
constraints among the numbers of event repetitions (e.g., the
number of close matches with the number of open while the
number of repetitions may vary). Such constraints can hardly
be represented in graphs.
The classical Chomsky hierarchy [9], [10] deﬁnes four
classes of languages characterized by the expressive power
of their deﬁning grammars: regular, context-free, context-
sensitive, and recursively enumerable. More expressive gram-
mar can describe more complex language but requires higher
cost in parsing. We study some of representative causal model
types observed in real-world programs. For each type, we show
a sample grammar and discuss the complexity of the grammar
as well as scalability of the corresponding parser.
containing the list of ﬁle systems (β). The 5th symbol wn
γ is
to emit the header information for each ﬁle system, causing
the implicit dependency between the 3rd symbol rβ and the
5th. The superscript n denotes that there are n ﬁle systems.
The 6th, 7th, and 8th symbols (oδ, rδ and cδ) form a term,
corresponding to the inner loop that reads m places to collect
information for the n ﬁle systems. Note that m may not equal
to n as multiple ﬁles may be accessed in order to collect
information for a ﬁle system. After that, the 9th symbol wn
γ
emits the collected information for the n ﬁle systems. Note that
the number of writes in the 5th and the 9th symbols need to be
identical (n times). The constraints on the numbers render the
model cannot be transformed to an automaton that handles a
regular language. It is essentially context-free. The parser for
a context-free language requires some push-down mechanism,
incurring higher complexity. We have encountered 2 context-
free models in our evaluation.
Fig. 7. Regular Model from ping [40].
Regular Model. Fig. 7 shows a model from ping [40],
representing a behavior “resolving a network address, sending
a packet, and receiving a response.”
they have control dependences. In particular,
Observe that the explicit dependencies (solid edges) are
caused by the socket (β). The implicit dependencies (dot-
ted edges) are introduced because gethostbyname() de-
cides whether to execute socket() and sendto() mean-
ing that
if
gethostbyname() returns an error, the program imme-
diately terminates. Also, sendto() is dependent on the
return value of gethostname() (e.g., IP address) as the
ping program composes and sends Internet Control Message
Protocol (ICMP) packets that contain the returned IP address.
Such dependencies are not visible at the syscall level. Note
that in any model, the ﬁrst node, which is always an input
syscall, has dependencies leading to all other nodes. Recall that
a model is acquired from LDX that mutates an input syscall
and observes changes at output syscalls (e.g., the ﬁrst node in
Fig. 7 is a syscall that reads an option from the command line
that leads to all the other syscalls in the model).
The model in Fig. 7 can be simpliﬁed by a regular grammar
(e.g., regular expression) which is the simplest one in Chomsky
hierarchy. A regular language parser has very good scalability.
From our experience, most models (53 out of 56 models in
our evaluation) fall into this type.
Fig. 8. Context-Free Model from procps [8].
Context-free Model. There are cases that the models need to
be context-free. Fig. 8 shows such a model extracted from
procps [8]. The model represents “retrieving ﬁle system
information.” It ﬁrst reads a ﬁle that contains information about
the list of ﬁle systems. It then uses an outer loop to emit the
information for individual ﬁle systems. For each ﬁle system, an
inner loop is used to collect information about the ﬁle system
from multiple places (e.g., different disks).
As shown in Fig. 8, three symbols from the 2nd to the
4th (oβ, rβ, cβ) have explicit dependencies due to the ﬁle
7
Fig. 9. Context-Sensitive Model from Raft [43].
Context-sensitive Model.
In some rare cases, even context-
free models are not sufﬁciently expressive. Fig. 9 shows a
model from [49] which is a distributed voting application that
implements the Raft consensus protocol [43]. The program can
exchange network messages between different number of users
to get a consensus. The model describes a voting procedure.
Speciﬁcally, it receives network messages from n users (n
iterations of read()), and sends network messages to m users
(m iterations of write()). Later, it closes the sockets for
n users and then m users. The crossing-constraints between
n , cn ) and ( wm , cm ) require a context-sensitive
m and n ( r2
language. However, a parser for a context-sensitive language is
prohibitively expensive in general (PSPACE complexity [15]).
We have not encountered any models more complex than
context-sensitive languages. The various language complexities
pose a prominent challenge: since syscall events belonging to
multiple models interleave and are often distant from each
other, we cannot know which model an event belongs to
until reaching the end of the model. As such, we do not
know which complexity class shall be used to parse individual
events. As we will show later, we develop a uniform parsing
algorithm for multiple complexity classes that leverages the
special characteristics of causal models.
2) Ambiguity: The strings (of syscalls) parsed by multiple
models may share common parts (e.g., common preﬁxes). In
the worst case, multiple models may accept the same string,
although we have not encountered such cases for models
within the same application. As a result during trace parsing,
given a syscall, there may be multiple models that it can be
attributed to and MCI does not know which model(s) are the
right ones. We call it the ambiguity problem.
For instance, consider a trace, the ground-truth causality
of the trace, and a model shown in Fig. 10-(a), (b), and (c),
respectively. Observe that the model has a socket read followed
by a ﬁle write. The two have implicit dependency but not
explicit dependency visible at the syscall level. The three boxes
in Fig. 10-(b) denote the three real model instances.
g∅soβswβslβsrβgσ: gethostbyname(σ)soσ: socket(σ), slσ: select(σ), swσ: sendto(σ), srσ: read(σ),α: stdin, β: network socket,∅: empty setLegendExplicitImplicitrαoβrβcβwnoδrδcδwnoσ: open(σ), rσ: read(σ), wσ: write(σ), cσ: close(σ),α: stdin, β: /proc/mounts,γ: stdout, δ: /proc/*LegendmnExplicit Dep.Implicit Dep.rαγγrαsrβnswγmcβncγmrσ: read(σ), srσ: recv(σ),swσ: write(σ), cσ: close(σ),α: socket for comm., β: socket for read, γ: socket for writeLegendnmone sendmsg() (line 6) which are causally dependent on
the source (i.e., read() at line 2). More speciﬁcally, the
write() at line 4 and sendmsg() at line 6 are (implicitly)
dependent on the source by variables buf and ebuf, and
the read()s at lines 2 and 4 are explicitly dependent on the
source due to the socket handler 0x11.
The generated sequence of syscalls includes all the syscalls
causally dependent on the source (line 3). We hence leverage
them as a sample of the model. Note that LDX also returns
dependences between syscalls inside the sequence such as the
dependence between lines 3 and 4.
2) Symbolization: The collected sequence of syscalls can-
not be directly used as a model due to the concrete arguments.
For instance, in Fig. 12, syscalls have concrete values (e.g.,
handlers 0x11 and 0x12) which may differ across executions.
Hence, we symbolize concretes values in syscalls by replacing
with symbols (e.g., α and β). For instance, if two syscalls share
the same argument, they are assigned the same symbol.
If the application supports repeated workload, there must
be repetitions in the syscalls that need to be modeled (such as
n and m in Fig. 5). To do so, MCI duplicates the workload
a few times and feeds the new workloads to LDX again.
Subsequences that have a constant number of repetitions across
workloads are annotated with the constant. Those that have
varying numbers of repetitions across workloads are annotated
with ‘*’. If there are correlations between the repetition
numbers of multiple subsequences (inside the same model),
variables n/m are used to model the number of repetition,
such as the previous example Fig. 8 in Sec. III-C1.
Fig. 13. Symbolized syscalls.
Fig. 13 shows a symbolized log. For example, 0x11 in
read() in Fig. 12 is replaced by a new symbol fd1 and 0x12
in write() in Fig. 12 is generalized to another symbol fd2.
0x11 in the second read() is replaced by the previously
assigned symbol fd1 as it already appeared before. Moreover,
as shown in Fig. 13, all concrete return values are symbolized
as either SUCCESS or FAILURE. They are part of the models
in our system although our formal deﬁnitions did not describe
them for brevity. The constructed model is shown in Fig. 14.
The formal model construction algorithm is elided due to the
space limitations.
Fig. 14. Constructed model from the example.
B. Trace Parsing with Models
In this section, we describe how MCI parses an audit log
with models. As we described in Sec. III-C1, if we simply
consider an audit log as a string of the trace language, we need
to consider three language classes in the Chomsky hierarchy,
namely, regular, context-free, and context-sensitive languages.
Recursively enumerable languages are never encountered in
our experience. A more expressive language requires more
expensive parser. For instance, context-free language can de-