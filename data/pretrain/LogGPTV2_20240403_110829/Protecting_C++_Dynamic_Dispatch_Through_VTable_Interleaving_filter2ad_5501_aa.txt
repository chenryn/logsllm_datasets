title:Protecting C++ Dynamic Dispatch Through VTable Interleaving
author:Dimitar Bounov and
Rami G&quot;okhan Kici and
Sorin Lerner
Protecting C++ Dynamic Dispatch Through VTable
Interleaving
Dimitar Bounov
Rami G¨okhan Kıcı
Sorin Lerner
Computer Science and Engineering
University of California, San Diego
Computer Science and Engineering
University of California, San Diego
Computer Science and Engineering
University of California, San Diego
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—With new defenses against traditional control-ﬂow
attacks like stack buffer overﬂows, attackers are increasingly
using more advanced mechanisms to take control of execution.
One common such attack is vtable hijacking, in which the attacker
exploits bugs in C++ programs to overwrite pointers to the virtual
method tables (vtables) of objects. We present a novel defense
against this attack. The key insight of our approach is a new
way of laying out vtables in memory through careful ordering
and interleaving. Although this layout is very different from a
traditional layout, it is backwards compatible with the traditional
way of performing dynamic dispatch. Most importantly, with this
new layout, checking the validity of a vtable at runtime becomes
an efﬁcient range check, rather than a set membership test.
Compared to prior approaches that provide similar guarantees,
our approach does not use any proﬁling information, has lower
performance overhead (about 1%) and has lower code bloat
overhead (about 1.7%).
I.
INTRODUCTION
For performance reasons, many applications are written in
languages without garbage collection, without memory bounds
checking, and without strong runtime type systems. At the
same time,
these applications are large and complex, and
thus are usually implemented in a language that supports
abstraction. As a result, oftentimes, the language of choice
in practice for these applications is still C++.
Unfortunately, because there is no enforcement of runtime
type safety, C++ applications are vulnerable to many kinds
of attacks, including control-ﬂow attacks that take control of
the program’s execution. The most commonly known such
attack is the traditional stack buffer overﬂow that overwrites
the return address. Because of the importance of such attacks,
defense mechanisms have been developed to mitigate these
attacks, including DEP [31], ASLR [29], stack canaries [6],
shadow stacks [3], SafeStack [20], etc.
As a result of these defenses, the cost of mounting stack-
based attacks has increased, and attackers have started looking
for new ways of compromising control-ﬂow integrity (CFI).
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’16,  21-24  February  2016,  San  Diego,  CA,  USA
Copyright  2016  Internet  Society,  ISBN 1-891562-41-X 
http://dx.doi.org/10.14722/ndss.2016.23421
One such approach which has received a lot of attention in
the past few years is known as vtable hijacking. In vtable
hijacking, an attacker exploits bugs in a C++ program to
overwrite the pointers to virtual method tables of C++ objects.
When the program performs a virtual method call later on, the
attacker-controlled virtual method table is used for dispatch,
causing the attacker to take over the control-ﬂow of the
program. There are several kinds of bugs that can be used to
mount this attack, including heap overﬂow bugs and use-after-
free bugs. The importance of vtable hijacking is highlighted by
several high-proﬁle attacks on up-to-date browsers [10], [14],
[12], [37], [34].
Because of the importance of vtable hijacking, several
recent research efforts have looked at how to protect against
this attack, including [16], [35], [42], [30]. In general these
techniques insert runtime checks before a virtual method call
that try to establish the safety of the call. Most of those checks
attempt to verify that when performing a virtual call on an
object of type A, the virtual method table used will be that
of A or a subclass of A. Enforcing this property efﬁciently is
non-trivial, as Section III will discuss in more detail.
The main contribution of this paper is an entirely new
approach for efﬁciently enforcing the above runtime type
safety property for C++ virtual method calls, thus protecting
against vtable hijacking. The key insight of our approach is
a new way of laying out vtables in memory through careful
ordering and interleaving. Although this layout is very different
from a traditional layout, it is still backwards compatible with
the traditional way of performing dynamic dispatch. Most
importantly, with this new layout, checking the validity of a
vtable at runtime becomes an efﬁcient range check.
This achievement of using range checks to enforce runtime
types is made possible by three technical ingredients. First,
by ordering vtables using a preorder traversal of the class
hierarchy we ensure that vtables for classes in each subtree
of the hierarchy are consecutive in memory. Next by aligning
the vtables properly, we demonstrate how range checks modulo
alignment become precise enough to guarantee that only stati-
cally type-safe vtables are allowed at each virtual method call
site. Finally through careful interleaving, we remove the extra
padding for alignment, pack the vtables tightly and greatly
reduce our memory footprint, while still being able to use
efﬁcient range checks modulo alignment.
As we will describe in more detail later in the paper,
compared to prior approaches that provide similar guarantees,
our approach does not use any proﬁling information, has lower
performance overhead (about 1%) and has lower code bloat
overhead (about 1.7%).
kind of metadata at negative offsets, namely Run-time Type
Information - other kinds of metadata at negative offsets are
handled similarly.
In summary, our contributions are:
• We present a new approach for enforcing precise
CFI for C++ virtual method calls using simple range
checks and alignment (Sections II through VI).
• We show how our approach can be adapted to work for
all the corner cases of C++ hierarchies, including mul-
tiple inheritance and virtual base classes (Section VII).
• We formalize our approach in a well deﬁned algo-
rithm and prove several important properties about it,
including correctness with respect to C++’s dynamic
dispatch mechanism (Section VIII).
• We perform a comprehensive performance evaluation
of our approach for runtime and memory overhead
on the C++ SPEC2006 benchmarks and the Chrome
browser (Section X). We even experimentally compare
our approach against the state of the art for protecting
against vtable hijacking that was recently added to
LLVM (but which has not been published in an
academic venue), and show that our approach reduces
the runtime overhead from about 2% to about 1%,
a signiﬁcant reduction when considering the small
margins that are in play (in essence, we cut
the
overhead in half). Finally we discuss the security
guarantees provided by our algorithm.
To illustrate how dynamic dispatch works, we use the sam-
ple method calls shown in Figure 1c. The resulting assembly
code, shown in Figure 1d, works in three steps, which are
labeled in the generated assembly:
1)
2)
3)
Dereference the object pointer to obtain the vptr.
Use the method offset to index into the vtable to
obtain the actual function pointer. For the ﬁrst call
site (C1) the called method foo has offset 0 and for
the second call site (C2) the called method bar has
offset 0x8.
Finally invoke the obtained function pointer. For
simplicity we omit the assembly code that passes
parameters, including passing this.
B. Threat Model
We assume an adversary capable of arbitrarily and concur-
rently modifying the heap (similarly to [35]). We assume that
values in registers are safe from tampering. We assume that
the attacker does not compromise the stack. This assumption is
necessary since our technique is currently implemented at the
LLVM Intermediate Representation (IR) level, where we have
no control over register spilling. Thus it is possible that a value
veriﬁed by our runtime checks is spilled to the stack prior to
use, thus introducing a time-of-check-time-of-use vulnerability.
To overcome this limitation we would need to reimplement our
defense as a lower level compiler transformation.
II. BACKGROUND
C. VTable Hijacking
A. C++ VTables
Dynamic dispatch in C++ is implemented using tables
of function pointers (vtables). We use a running example
to explain how vtables work, and how our approach works.
Consider the C++ code in Figure 1a, which deﬁnes the class
hierarchy shown in Figure 1b. Figure 2 shows the traditional
vtable layout for this example. Note that the details of vtable
memory layout are dictated by two Application Binary Inter-
faces (ABIs) - Itanium and MSVC. We will use Itanium for the
remainder of the paper, but our technique transfers naturally
to MSVC.
VTables are contiguous arrays of pointer-sized entries con-
taining function pointers and other metadata such as Run-Time
Type Information (rtti), virtual base and call offsets (relevant to
virtual inheritance) and offset-to-top (used for casting). Object
instances contain at offset 0 a pointer (vptr) to the ﬁrst function
pointer (the address point) of their corresponding vtable. For
example in Figure 2 the object of type D points to the 2nd
entry in its vtable - Dfoo. Elements of the vtable are indexed
relative to vtable’s address point, with function pointers found
at positive indices and other metadata laid out at negative
indices. For example, in Figure 2, method foo can be found
at index 0 relative to the address point; bar is at index 0x8,
and so is baz; ﬁnally boo is at index 0x10.
Note that bar and baz are mapped to the same index
since no class in the hierarchy has both a bar and a baz
method. Also note that for simplicity, we only show one
While vtables reside in read-only memory and are thus
safe from tampering, vptrs are stored in writable memory and
become the target of vtable hijacking attacks [16]. Attackers
usually exploit a bug already present
in the program to
overwrite the vtable pointer of an object and later trick the
program into invoking a function on the compromised object.
We illustrate this with a use-after-free bug, because this has
been a common way of launching recent high-proﬁle vtable
attacks [14], [37]. Consider for example the code excerpt in
Figure 3, which suffers from a use-after-free bug: object d is
used (4) erroneously after it is deleted at (1). Now suppose
that an attacker is capable of controlling a memory allocation
(2) in the window between (1) and (4) in such a way that
the memory allocator places the new memory where object d
used to live. Furthermore, let’s assume that the attacker also
controls writes to this new allocation (3), thus being able to
place attacker controlled data where the vptr used to be; the
new vptr is constructed by the attacker to point to a specially
crafted fake vtable with malicious entries. As a result, when
d->foo() is invoked at (4) control-ﬂow is redirected to a
location of the attacker’s choice (e.g. the system call).
Such use-after-free bugs have been successfully exploited
in the wild to launch vtable hijacking attacks, most notably
in browser security exploits [10], [14], [12], [37], [34], [24],
[27]. However, use-after-free bugs are only one possible vector
for vtable hijacking, another option being direct heap-overﬂow
attacks [1], [2]). Our approach detects all vtable hijacking
attacks, regardless of their source.
2
class A {
public:
int mA;
virtual void foo();
}
class B : public A {
public:
int mB;
virtual void foo();
virtual void bar();
}
class C : public A {
public:
int mC;
virtual void baz();
}
class D : public B {
public:
int mD;
virtual void foo();
virtual void boo();
}
(a) C++ Code
C1: A* a = ...
a->foo();
...
C2: B* b = ...
b->bar();
(c) Sample Callsites
C1: $a = ...
(1) $avptr = load $a
(2) $foo_fn = load $avptr
(3) call $foo_fn
C2: $b = ...
(1) $bvptr = load $b
(2) $bar_fn = load ($bvptr+0x8)
(3) call $bar_fn
(b) Class Hierarchy
(d) Callsite Instructions
Fig. 1: C++ Example
C1: $a = ...
$avptr = load $a
assert isvalid $avptr, A
$foo_fn = load $avptr
call $foo_fn
C1: $a = ...
$avptr = load $a
assert $avptr ∈ {0x8,0x18,
0x30,0x48}
$foo_fn = load $avptr
call $foo_fn
C2: $b = ...
$bvptr = load $b
assert isvalid $bvptr, B
$bar_fn = load ($bvptr+0x8)
call $bar_fn
C2: $b = ...
$bvptr = load $b
assert $bvptr ∈ {0x18,0x48}
$bar_fn = load ($bvptr+0x8)
call $bar_fn
(a) Abstract Check
(b) Vptr check semantics
Fig. 4: Instrumented Callsites
In practice, isvalid has the semantics of a set check,
as shown in Figure 4b. For example, callsite C2 is safe if at
runtime the loaded vptr $bvptr is in the set {0x18, 0x48}.
This safe set is determined statically by looking at the type
in the source code of the object being dispatched on. In this
case, the method call is done using variable b in the source
code of Figure 1c, which is statically declared of type B. The
valid vtables that can occur at runtime for an object of static
type B are the vtables of B and all of its subclasses, in our
example B and D. This is why the safe set is {0x18, 0x48},
the vtables of B and D. Similarly, the set for C1 in Figure 4b
are the vtables of A (the statically declared type of a) and its
sublcasses, namely the vtables of A, B, C, and D.
Efﬁcient enforcement of these vptr checks is difﬁcult, due
to the fact that vtable address points occur at non-uniform
addresses in memory (Fig 2). This has forced previous work
to resort to various general set data structures such as bitsets
[22], [30] and linear arrays with inlined checks [16].
Our Approach. The key insight in our approach is that
we carefully arrange and interleave the vtables so that the
addresses to check for at a given call site become continuous
modulo some alignment. We can check membership in these
sets of continuous addresses using a simple range and align-
Fig. 2: Normal Vtable Layout in Memory
...
(1)
(2)
(3)
(4)
D *d = new D();
delete d;
// attacker controlled
// allocation
// attacker controlled
// writes to allocation
d->foo();
// system called
Fig. 3: VTable hijacking example
III. OVERVIEW
Having presented how vtable hijacking works, we now
focus on how to prevent such attacks. Most defenses against
vtable hijacking (ours included) employ Inline Reference Mon-
itors (IRMs) inserted before dynamic dispatch sites. At an ab-
stract level, the callsites from Figure 1d would be instrumented
as shown in Figure 4a, where the isvalid $v C instruction
denotes a runtime check whether the vptr $v is valid for a class
of static type C. The key challenge, as we will shortly see, is
how to make these checks efﬁcient.
3