the randomization of propagated messages through the CSN,
but also improves the resiliency of these networks against
possible SAT attacks for extraction of a TRN used as the
key for a CSN-RCSN cipher. A non-blocking logarithmic
network could be represented using LOGn,m,p, where n is the
number of inlets/outlets, m is the number of extra stages, and
p indicates the number of copies vertically cascaded [9].
According to [9], to have a strictly non-blocking CSN for
an arbitrary n, the smallest feasible values of p and m impose
very large area/power overhead. For instance, for n = 64, the
smallest feasible values, which make it strictly non-blocking,
are m = 3 and p = 6, which means there exists more than
5× as much overhead compared to a blocking CSN with the
same n, resulting in a signiﬁcant increase in the area and
delay overhead. To avoid such large overhead, we employ a
close to non-blocking CSN described in [9] to implement the
CSN-RCSN pair. This network is able to generate not all, but
almost all permutations, while it could be implemented using
a LOGn,log2(n)−2,1 conﬁguration, meaning it needs log2(n)−2
Trusted ChipUntrusted ChipDPOKTRNPOKS2PDOSecretKeyEnc/DecRMDITrusted ChipUntrusted ChipPOKTRNS2PDOAXIS_MDIAXIS_SAXI_InterconnectRCSNPOKAXIS_MTRNAXIS_STRNActivation Scan Chain or DATASDOOKSKP2SDOAXIS_MDIAXIS_SActivationRNGAXIS_MRMDO RDOTRNAXIS_MPDIAXIS_SSDIAXIS_SPDOAXIS_MAXIS_S RDI    POK = Partial Obfuscation Key      DAL = Dynamic Activation LicenseAXIS_M = AXI Stream Master        AXIS_S = AXI Stream Slave         OK = Obfuscation Key       RMDI = Random Mix Data Input         SDI = Secret Data Input       SK = Secret Key   RDO = Random Data Output  RMDO = Random Mix Data OutputPDI = Public Data Input                   P2S = Parallel to Serial   RDI = Random Data Input             PDO = Public  Data Output       TRN = True Random Number         S2P = Serial to Parallel                   * Signals are AXI Stream (AXIS) data bus, composed of tvalid, tdata, tready and optional tlast signalsDALAXIS_S Abbreviations: PUFAXIS_MSDOSecure PUF ReadoutDesign HouseSKRMDO RDOTRNAXI_InterconnectPDISDIPDORMDI RDIAXI_InterconnectmessageSecureMEMAXIS_MAXIS_SAXIS_SAXIS_MCSNAXIS_MRNGAXIS_MAXIS_MAXIS_SAXIS_SSecretAXIS_SAXIS_SAXIS_MAXIS_MDIAXIS_SP2SDIAXIS_SDOAXIS_MPOKPOKPOKPOKKeyCryptoDPOKTRNPOKS2PDOPOKTRNAXI_InterconnectSDOOKSKRMDO RDOTRNPDISDIPDORMDI RDIAXI_InterconnectmessageSecureMEMAXIS_MAXIS_SAXIS_SAXIS_MCSNAXIS_MRNGAXIS_MAXIS_MAXIS_SAXIS_SSecretAXIS_SAXIS_SAXIS_MAXIS_MDIAXIS_SP2SDIAXIS_SDOAXIS_MPOKPOKPOKPOKKeyCryptoDesign HouseS2PDOAXIS_MDIAXIS_SRMDO RDORNGAXIS_MAXIS_MPOKPOKPOKPOKPOKmessageDPOKTRNPOKTRNAXIS_SRCSNS2PDOAXIS_MDIAXIS_SPUF SDOAXIS_MSKSecure PUF ReadoutPDISDIPDO RDIAXIS_SAXIS_SSecretAXIS_SAXIS_SAXIS_MKeyCryptoRMDIreceivemessagesendAXI_InterconnectAXI_InterconnectsendmessagereceiveAXI_InterconnectAXI_InterconnectAXIS_M    POK = Partial Obfuscation KeyDAL = Dynamic Activation LicenseAXIS_M = AXI Stream MasterAXIS_S = AXI Stream Slave         OK = Obfuscation KeyRMDI = Random Mix Data InputSDI = Secret Data InputSK = Secret Key   RDO = Random Data OutputRMDO = Random Mix Data OutputPDI = Public Data InputP2S = Parallel to Serial   RDI = Random Data InputPDO = Public  Data OutputTRN = True Random NumberS2P = Serial to Parallel                   * Signals are AXI Stream (AXIS) data bus, composed of tvalid, tdata, tready and optional tlast signalsAbbr:Trusted ChipUntrusted ChipDPOKTRNPOKS2PDOPOKTRNAXI_InterconnectSDOOKSKRMDO RDOTRNPDISDIPDORMDI RDIAXI_InterconnectmessageSecureMEM*CSNRNGSecretDIP2SDIDOPOKPOKPOKPOKKeyCryptoDesign HouseS2PDODIPOKPOKPOKPOKPOKDPOKTRNPOKTRNRCSNS2PDODIPUF SDOSKSecure PUF ReadoutreceivemessagesendAXI_InterconnectAXI_InterconnectsendmessagereceiveAXI_InterconnectAXI_InterconnectPDISDIPDORMDI RDISecretKeyCryptoRMDO RDORNG POK = Partial Obfuscation KeyDAL = Dynamic Activation License  AXIS_M (*) = AXI Stream MasterAXIS_S (+) = AXI Stream SlaveOK = Obfuscation KeyRMDI = Random Mix Data InputSDI = Secret Data Input  SK = Secret KeyRDO = Random Data Output     RMDO = Random Mix Data Output PDI = Public Data InputTRN = True Random NumberRDI = Random Data InputPDO = Public  Data Output     P2S/S2P = Parallel(Serial) to Serial(Parallel)             Abbr:message**************++++++++++++++++TRNPOKO2i+1I2iI2i+1sel0O2isel2sel110Stage0101010RRBRRBRRBRRB00010203REGREGREGREGREGREGREGREGDPOKRRBRRB2023REGREGREGREGREGREGREGREGStage1Stage2RRBRRBRRBRRB10111213RRBijRRB22RRB21TRNPOKO2i+1I2iI2i+1sel0O2isel2sel110Stage0101010Stage1Stage2RRBijREGREGREGREGREGREGREGREGRRB00RRB01RRB02RRB03RRB10RRB11RRB12RRB13RRB20RRB21RRB23RRB22DPOKREGREGREGREGREGREGREGREGTRNPOKStage0Stage1Stage2REGREGREGREGREGREGREGREGDPOKREGREGREGREGREGREGREGREGRRB30RRB31RRB33RRB32RRB20RRB21RRB23RRB22RRB10RRB11RRB12RRB13RRB00RRB01RRB02RRB03186          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationextra stages and no additional copy. Fig. 5(b), demonstrates an
example of such a close-to-non-blocking CSN with n = 8. In
the results section, we demonstrate that using these close-to-
non-blocking CSNs enhances the resiliency of a CSN against
SAT attack, even in small sizes of CSNs with signiﬁcantly
lower power, performance and area (PPA) overhead.
3.3.2 Authenticated Encryption with Associated Data
The Authenticated Encryption with Associated Data (AEAD)
is used in the DCC mode for communicating messages, and in
the LCC mode for the initial transmission of the CSN-RCSN
key (TRN). Authenticated ciphers incorporate the functional-
ity of conﬁdentiality, integrity, and authentication. The input
of an authenticated cipher includes Message, Associated Data
(AD), Public Message Number (NPUB), and a secret key.
The ciphertext is generated as a function of these inputs. A
Tag, which depends on all inputs, is generated after message
encryption to assure the integrity and authenticity of the trans-
action. This tag is then veriﬁed after the decryption process.
The choice of AEAD could signiﬁcantly affect the area over-
head of the solution, the speed of encrypted communication,
and the extra power consumption. To show the performance,
power, and area trade-offs, we employ two AEAD solutions:
a NIST compliant solution (AES-GCM), and a promising
lightweight solution (ACORN).
AES-GCM is the current National Institute of Standards
and Technology (NIST) standard for authenticated encryp-
tion and decryption as deﬁned in [32]. ACORN is one of
two ﬁnalists of the Competition for Authenticated Encryption:
Security, Applicability, and Robustness (CAESAR), in the cat-
egory of lightweight authenticated ciphers, as deﬁned in [22].
An 8-bit side-channel protected version of AES-GCM and
a 1-bit side-channel protected version of ACORN are imple-
mented as described in [51]. Both implementations comply
with lightweight version of the CAESAR HW API [13].
Our methodology for side channel resistant is threshold
implementation (TI), which has wide acceptance as a prov-
ably secure Differential Power Analysis (DPA) countermea-
sure [45]. In TI, sensitive data is separated into shares and the
computations are performed on these shares independently.
TI must satisfy three properties: 1) Non-completeness: Each
share must lack at least one piece of sensitive data, 2) Correct-
ness: The ﬁnal recombination of the result must be correct,
and 3) Uniformity: An output distribution should match the
input distribution. To ensure uniformity, we refresh TI shares
after non-linear transformations using randomness. We use a
hybrid 2-share/3-share approach, where all linear transforma-
tions in each cipher are protected using two shares, which are
expanded to three shares only for non-linear transformations.
To verify the resistance against DPA, we employ the Test
Vector Leakage Assessment methodology in [6]. We lever-
age a "ﬁxed versus random" non-speciﬁc t-test, in which we
randomly interleave ﬁrst ﬁxed test vectors and then randomly-
generated test vectors, leading to two sequences with the
same length but different values. Using means and variances
of power consumption for our ﬁxed and random sequences,
we compute a ﬁgure of merit t. If |t| > 4.5, we reason that
we can distinguish between the two populations and that our
design is leaking information. The protected AES-GCM de-
sign has a 5-stage pipeline and encrypts one 128-bit input
block in 205 cycles. This requires 40 bits of randomness per
cycle. In ACORN-1, there are ten 1-bit TI-protected AND-
gate modules, which consume a total of 20 random reshare,
and 10 random refresh bits per state update. In a two-cycle
architecture, 15 random bits are required per clock cycle.
3.3.3 Random Number Generator (RNG)
An RNG unit is required on both sides to generate random bits
for side channel protection of AEAD units, a random public
message number (NPUB) for AEAD, and TRNs for CSN-
RCSN. We adopted the ERO TRNG core described in [39],
which is capable of generating only 1-bit of random data per
over 20,000 clock cycles. In our TI implementations, AES-
GCM needs 40 and ACORN 15 bits of random data per cycle.
So, we employed a hybrid RNG unit combining the ERO
TRNG with a Pseudo Random Number Generator (PRNG).
TRNG output is used as a 128-bit seed to PRNG. The PRNG
generates random numbers needed by other components. The
reseeding is performed only once per activation.
The choice of PRNG depends on the expected performance
and overhead. To support COMA, we adopted two different
implementations of PRNG: (1) AES-CTR PRNG, which is
based on AES, is compliant with the NIST standard SP 800-
90A, and generates 12.8 bits per cycle. (2) Trivium based
PRNG, which is based on the Trivium stream cipher described
in [7]. The Trivium-based PRNG is signiﬁcantly smaller in
terms of area and much faster than AES-CTR PRNG. It can
generate 64 bits of random data per cycle, however, it is not
compliant with the NIST standard.
3.3.4 PUF and Secure PUF Readout
The response of the PUF to a challenge selected randomly by
Enrollment Authority (SoC designer) is used as the secret key
in AEAD. Hence, the readout of the PUF-response should
be protected. The simplest solution for the safe readout of
a PUF-generated key is to enable the readout by burning
one set of fuses, and disabling it by burning a second set
of fuses. However, this solution, especially when combined
with a weak PUF, is not likely to be resistant against the
untrusted foundry, which may possibly burn the ﬁrst set of
fuses, read out PUF key, and then repair fuses before releasing
the chip. To avoid this problem, we implement a lightweight
one-sided public key cryptography (encryption only) based
on Elliptic-Curve Cryptography (ECC). Considering the PUF
readout is a one-time event, the performance of the public-key
cryptography engine is not critical.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 187In order to prevent any attempts at fully characterizing
a PUF in the untrusted foundry, only strong PUFs, e.g. an
arbiter PUF, are considered. The secure readout of the PUF
key is allowed only at the device enrollment time, in the
secure facility. During the secure readout, the strong PUF
is fed with multiple challenges selected by the Enrollment
Authority. The corresponding PUF responses are encrypted
by the untrusted chip using the public key of the Enrollment
Authority, that is embedded in the chip layout or stored in
the one-time programmable memory. Only the Enrollment
Authority has access to the decrypted responses. Afterwords,
one of the previously applied challenges is randomly selected
and used for the generation of the secret key. This challenge
is then hardwired on the untrusted chip, and the PUF response
to that challenge is recorded by the Enrollment Authority.
This PUF response is then stored in the secure memory of the
trusted chip in 2.5D-COMA, or in the secure cloud directory
in R-COMA. This process makes each PUF key unique to a
given device, and resistant against any unauthorized readout
by the untrusted foundry.
Still, additional precautions must be taken to protect this
scheme against an attack aimed at replacing a real PUF by
a pseudo-PUF, generating randomly looking responses that
can be easily calculated by an attacker. An example of such
a pseudo-PUF may be a lightweight symmetric-key cipher,
with a ﬁxed key known to the untrusted party, encrypting each
challenge and outputing a ciphertext as the PUF response.
Such pseudo-PUF should be treated as a Trojan and de-
tected by Enrollment Authority using the best known anti-
Trojan techniques, e.g., those based on the measurement and
analysis of the power consumption during the operation of the
device [8]. Additional methods may be used to differentiate
the outputs of a strong PUF from encrypted data, e.g., using
known correlations between the PUF responses correspond-
ing to closely-related challenges, such as challenges differing
on only one bit position, or being mutual complements of each
other [24]. These kinds of PUF-health tests may be speciﬁc
to a particular strong PUF type, e.g., to an arbiter PUF, and
will be the subject of our future work.
4 COMA Resistance against various Attacks
4.1 Assumed Attacker Capabilities
Different sources of vulnerability are considered in this sec-
tion to demonstrate the COMA security. The attacker can
be an adversary in the manufacturing supply chain, and
has access to either the reverse engineered or design house-
generated netlist of the COMA-protected untrusted chip. The
attacker can purchase an activated COMA-protected IC from
the market. The attacker can monitor the side channel infor-
mation of chips at or post activation. The attacker can observe
the communication between untrusted and trusted (or remote
manager) chips and could also alter the communicated data.
An Attack objective may be (1) extracting the obfuscation
key (OK), (2) illegal activation of the obfuscated circuit with-
out extracting the key, (3) extracting the long-term secret key
(SK), (4) extracting short-term CSN keys (TRNs), (5) eaves-
dropping on messages exchanged between the untrusted chip
and the external sources, (6) removing the COMA protection,
or (7) COMA-protected IC overproduction.
4.2 Side Channel Attack (SCA)
The objective of SCA on COMA is to extract either the secret
key (SK) used by AEAD or the TRN used by CSN. Extracting
a SK is sufﬁcient to break the obfuscation; extracting a TRN
reveals only messages sent in the LCC mode.
DCC signiﬁcantly increases the SCA difﬁculty, since
(1) the AEAD is side-channel protected, and (2) the attacker
loses access to the input of AEAD. Fig. 6 captures our as-
sessment of side channel resistance of AEAD using a t-test
for unprotected and protected implementations of AES-GCM
and ACORN [50]. As illustrated, both implementations pass
the t-test, indicating increased resistance against SCA. On
the other hand, the inability to control the input to AEAD
comes from the COMA requirement of encryption in the DCC
mode where a message ﬁrst passes through the CSN. Hence,
there exists no relation between the power consumption of the
AEAD and the original input due to CSN randomization. CSN
power consumption is also randomized as it is a function of n
inputs (possibly known to the attacker) and 3n× (log2n− 1)
TRN inputs unknown to the attacker, while the TRN is repeat-
edly updated based on the value of U. Note that during the
physical design of COMA, the side channel information on
power and voltage noise (IR drop) could be further mitigated
using timing aware IR analysis [3], and voltage noise aware
clock distribution techniques [5, 31].
The LCC mode is prone to side-channel, algebraic, and
SAT attacks aimed at extracting the TRN. However, the attack
must be carried out in a limited time while the TRN of the
CSN/RCSN is unchanged. As soon as the TRN is renewed,
the previous side-channel traces or SAT iterations are useless.
The period of TRN updates (U) introduces a trade-off between
energy and security and can be pushed to maximum security
by changing the TRN for every new input. In section 5.2.2
we investigate the time required to break the LCC using side-
channel or SAT attack and accordingly deﬁne a safe range for
U to prevent such attacks.
4.3 Reverse Engineering
In COMA, reverse engineering (RE) to extract the secret key
from layout is useless as the secret key is not hardwired in the
design and is generated based on PUF. RE to extract the key
from memory in an untrusted chip is no longer an option as
the key is not stored in the untrusted chip. RE to extract the
key from the trusted chip’s memory is limited by the difﬁculty
of tampering with secure memory in the trusted technology.
188          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association(a) AES-GCM UnPr
Figure 6: The t-test results for unprotected (UnPr) and protected (Pr) implementations of AES-GCM and ACORN.
(c) ACORN UnPr
(b) AES-GCM Pr
(d) ACORN Pr
4.4 Algebraic Attacks
Algebraic attacks involve (a) expressing the cipher operations
as a system of equations, (b) substituting in known data for
some variables, and (c) solving for the key. AES-GCM and
ACORN have been demonstrated to be resistant against all
known types of algebraic attacks, including linear cryptanal-
ysis. Therefore, in the absence of any new attacks, the DCC
mode is resistant against algebraic attacks. Using CSN and
RCSN for fast encryption is new and requires more analysis.
CSN can be expressed as an afﬁne function of the data input
x, of the form y = A· x + b, where A is an n× n matrix and
b is an n× 1 vector, with all elements dependent on the in-
put TRN. Although recovering A and b is not equivalent to
ﬁnding the TRN, it may enable the successful decryption of
all blocks encrypted using a given TRN. We protect against
this threat in two ways: (1) The number of blocks encrypted
using a given TRN is set to the value smaller than n, which
prevents generating and solving a system of linear equations
with A and b treated as unknowns, (2) We partially modify the
TRN input of CSN with each block encryption (by a simply
shifting the input TRN bits), so the values of A and b are not
the same in any two encryptions, without the need of feeding
CSN with two completely different TRN values.
4.5 Counterfeiting and Overproduction
COMA can be used to prevent the resale of used ICs, usage of
illegal copies, and reproduction of a design. During packaging
and testing, each COMA protected IC is ﬁrst tested and then is
matched with a trusted chip. So, the untrusted chip can only be
activated by the matched trusted chip or the registered remote
manager. Building illegal copies that work without the secure
chip (or remote activation) and reproduction of the design
requires successful RE. Blind reproduction is useless as its
activation requires a matching trusted chip or passing PUF
authentication of a remote manager. By receiving one or more
DALs for testing, the manufacturer cannot activate additional
IPs as the DAL changes from activation to activation.
4.6 Removal attacks
Removal of the TRNG ﬁxates the DAL and breaks the LCC