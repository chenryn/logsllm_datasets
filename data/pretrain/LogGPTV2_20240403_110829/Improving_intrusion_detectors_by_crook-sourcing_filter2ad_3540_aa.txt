# Title: Improving Intrusion Detectors by Crook-sourcing

## Authors:
- Frederico Araujo
- Gbadebo Ayoade
- Khaled Al-Naami
- Yang Gao
- Kevin W. Hamlen
- Latifur Khan

### Affiliations:
- **Frederico Araujo, Gbadebo Ayoade, Khaled Al-Naami, Yang Gao, Kevin W. Hamlen, and Latifur Khan**  
  The University of Texas at Dallas, USA
- **Khaled Al-Naami**  
  IBM Research, USA

### Publication:
In Proc. 35th Annual Computer Security Applications Conference (ACSAC). December 2019.

---

## Abstract
Conventional cyber defenses typically respond to detected attacks by rejecting them as quickly and decisively as possible; however, this approach misses valuable learning opportunities for intrusion detection. This paper proposes a method to reframe cyber attacks as free sources of live training data for machine learning-based intrusion detection systems (IDSes). Instead of aborting attacks against legitimate services, adversarial interactions are selectively prolonged to maximize the defender’s harvest of useful threat intelligence. By enhancing web services with deceptive attack responses, this strategy addresses several perennial challenges in machine learning-based IDS, including scarcity of training data, high labeling burden for (semi-)supervised learning, encryption opacity, and concept differences between honeypot attacks and those against genuine services. By reconceptualizing software security patches as feature extraction engines, the approach conscripts attackers as free penetration testers, coordinating multiple levels of the software stack to achieve fast, automatic, and accurate labeling of live web data streams. Prototype implementations are showcased for two feature set models to extract security-relevant network- and system-level features from servers hosting enterprise-grade web applications. The evaluation demonstrates that the extracted data can be fed back into a network-level IDS for exceptionally accurate, yet lightweight, attack detection.

### CCS Concepts
- **Security and privacy**: Intrusion/anomaly detection and malware mitigation, Software security engineering, Web application security
- **Computing methodologies**: Machine learning

### Keywords
- Datasets
- Neural networks
- Intrusion detection
- Honeypots

### ACM Reference Format
Araujo, F., Ayoade, G., Al-Naami, K., Gao, Y., Hamlen, K. W., & Khan, L. (2019). Improving Intrusion Detectors by Crook-sourcing. In 2019 Annual Computer Security Applications Conference (ACSAC '19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3359789.3359822

---

## 1. Introduction
Detecting cyber attacks before they reach unpatched, vulnerable web servers (or afterward, for recovery purposes) has become a vital necessity for many organizations. In 2018 alone, the average window of exposure for critical web application vulnerabilities was 69 days, with a new vulnerability found every hour—an increase of 13% over the previous year’s rate. Over 75% of all legitimate web sites have unpatched vulnerabilities, 20% of which afford attackers full control over victim systems [27, 72]. The cost of data breaches resulting from software exploits is expected to escalate to an unprecedented $2.5 trillion by 2022 [41].

Intrusion detection [23] is an important means of mitigating such threats. IDSes capitalize on the observation that the most damaging and pernicious attacks discovered in the wild often share similar traits, such as the steps intruders take to open back doors, execute files and commands, alter system configurations, and transmit gathered information from compromised machines [24, 38, 61, 66]. Starting with the initial infection, such malicious activities often leave telltale traces that can be identified even when the underlying exploited vulnerabilities are unknown to defenders. The challenge is to capture and filter these attack trails from network traffic, connected devices, and target applications, and develop defense mechanisms that can effectively leverage such data to disrupt ongoing attacks and prevent future attempted exploits. Specifically, machine learning-based IDSes alert administrators when deviations from a model of normal behavior are detected [29, 50, 80].

However, despite its great promise, the advancement of machine learning approaches for web intrusion detection has been hindered by a scarcity of realistic, current, publicly available cyber attack datasets and the difficulty of accurately and efficiently labeling such datasets, which are often prohibitively large and complex [75]. This has frustrated comprehensive, timely training of IDSes, resulting in an overreliance on unrealistic closed-world assumptions [69], thereby raising IDS false alarm rates and elevating their susceptibility to attacker evasion [11, 17, 31, 63, 69].

This paper proposes and examines a new deception-based approach to enhancing IDS data streams through crook-sourcing—the conscription and manipulation of attackers into performing free penetration testing for improved IDS model training and adaptation. Deception has long been recognized as a key ingredient of effective cyber warfare (cf., [81]), but its applications to IDS have heretofore been limited to contexts where the deception is isolated and separate from the data stream in which intrusions must actually be detected. For example, dedicated honeypots collect attack-only data streams [76] but have limited IDS training value in that they can mistrain models to recognize only attacks against honeypots, including false positives from scans and accidental connections, or attacks by unsophisticated adversaries unable to identify and avoid honeypots. Attacks with substantial interactivity can be missed, since the honeypot offers no legitimate services and therefore collects no data characterizing attacks against legitimate services.

Our approach overcomes this limitation by integrating deceptive attack response capabilities directly into live, production server software via honey-patching [5]. Honey-patches are software security patches that are modified to avoid alerting adversaries when their exploit attempts fail. Instead of merely blocking the attempted intrusion, the honey-patch transparently redirects the attacker’s connection to a carefully isolated decoy environment running an unpatched version of the software. Adversaries attempting to exploit a honey-patched vulnerability observe software responses that resemble unpatched software, even though the vulnerability is actually patched. This allows the system to observe subsequent attack actions until the deception is eventually uncovered. Honey-patches offer equivalent security to conventional patches but can potentially enhance IDS web data streams with a semantically rich stream of pre-labeled (attack-only) data for training purposes. These crook-sourced data streams thus provide IDSes with concept-relevant, current, feature-filled information with which to detect and prevent sophisticated, targeted attacks.

We demonstrate the potential effectiveness of this new IDS approach through the design, implementation, and analysis of DeepDig (DEcEPtion DIGging), a framework for deception-enhanced web intrusion detection. Evaluation shows that extra information harvested through mini-deceptions (1) improves the precision of anomaly-based IDSes by feeding back attack traces into the classifier, (2) provides feature-rich, multi-dimensional attack data for classification, and (3) can detect exploit variants previously unseen by defenders. Our goal in this work is to assess whether successful deceptions are helpful for intrusion detection and to what degree. Given the present scarcity of good, current intrusion datasets and the costs of conducting large-scale empirical data collection, we believe that the approach’s facility for generating richer, automatically-labeled, web attack data streams offers exceptional promise for future IDS research and deployments.

### Contributions
- We propose a software patching methodology that facilitates semi-supervised learning for intrusion detection, in which deceptive security patches naturally modulate and automate the attack labeling and feature extraction process.
- We present a feature-rich attack classification approach that more accurately characterizes malicious web activities.
- To harness training and test data, we present the design of a framework for the replay and generation of real web traffic, which statistically mutates and injects scripted attacks into the generated output streams.
- We evaluate our approach on large-scale network and system events gathered through simulation and red team evaluations over a test bed built atop production web software, including the Apache web server, OpenSSL, and PHP.

The rest of the paper is organized as follows. Section 2 outlines our approach and presents an overview of the system, followed by a more detailed architecture description in Section 3. Section 4 shows how our approach can support accurate characterization of attacks through decoy data. Implementation is summarized in Section 5, followed by evaluation methodology and results in Section 6. Finally, discussion and related work are presented in Sections 7 and 8 (respectively), and Section 9 concludes with a summary of outcomes and future directions.

---

## 2. Approach Overview
### 2.1 Intrusion Detection Challenges
Despite the increasing popularity of machine learning in intrusion detection applications, its success in operational environments has been hampered by specific challenges that arise in the cybersecurity domain. Fundamentally, machine learning algorithms perform better at identifying similarities than at discovering previously unseen outliers. Since normal, non-attack data is usually far more plentiful than realistic, current attack data, many classifiers must be trained almost solely from the former, necessitating an almost perfect model of normality for any reliable classification [69].

Feature extraction [12] is also unusually difficult in intrusion detection contexts because security-relevant features are often not known by defenders in advance. The task of selecting appropriate features to detect an intrusion (e.g., features that generate the most distinguishing intrusion patterns) often creates a bottleneck in building effective models, since it demands empirical evaluation. Identification of attack traces among collected workload traces for constructing realistic, unbiased training sets is particularly challenging. Current approaches usually require manual analysis aided by expert knowledge [11, 17], which severely reduces model evolution and update capabilities to cope with attacker evasion strategies.

A third obstacle is the analysis of encrypted streams, which are ubiquitously employed to prevent unauthorized users from accessing sensitive web data transmitted through network links or stored in file systems. Since network-level detectors typically discard encrypted data, their efficacy is greatly reduced by the widespread use of encryption [31]. In particular, attackers benefit from encrypting their malicious payloads, making it harder for standard classification strategies to distinguish attacks from normal activity. High false positive rates are another practical challenge for the adoption of machine learning approaches [63]. Raising too many alarms renders IDSes meaningless in most cases, since actual attacks are lost among the many alarms. Studies have shown that effective intrusion detection therefore demands very low false alarm rates [8].

These significant challenges call for the exploration and development of new, accurate anomaly detection schemes that lift together information from many different layers of the software stack. Toward this end, our work extends machine learning-based intrusion detection with the capability to effectively detect malicious activities bound to the application layer, affording detection approaches an inexpensive tool for automatically and continuously extracting security-relevant features for attack detection.

### 2.2 Digging Deception-Enhanced Threat Data
DeepDig is a new approach to enhance intrusion detection with threat data sourced from honey-patched [5] applications. Figure 1 shows an overview of the approach. Unlike conventional techniques, DeepDig incrementally builds a model of legitimate and malicious behavior based on audit streams and attack traces collected from honey-patched web servers. This augments the classifier with security-relevant feature extraction capabilities not available to typical network intrusion detectors.

Our central enabling insight is that software security patches can be repurposed as feature extractors for semi-supervised learning. The maintenance of the feature extractors is crowd-sourced (by the software development community’s ongoing discovery and creation of new security patches), and the data analyzed by the patches is crook-sourced (as attackers contribute their TTP patterns to the data streams processed by the embedded deceptions). Honey-patching transduces these two data sources into a highly accurate, rapidly co-evolving feature extraction module for an IDS. The extractor can effortlessly detect previously unseen payloads that exploit known vulnerabilities at the application layer, which can be prohibitively difficult to detect by a network-level IDS.

These capabilities are transparently built into the framework, requiring no additional developer effort (apart from routine patching) to convert the target application into a potent feature extractor for anomaly detection. Traces extracted from decoys are always contexts of true malicious activity, yielding an effortless labeling of the data and higher-accuracy detection models.

By living inside web servers that offer legitimate services, our deception-enhanced IDS can target attackers who use one payload for reconnaissance but reserve another for their final attacks. Deceiving such attackers into divulging the latter is useful for training the IDS to identify the final attack payload, which can reveal attacker strategies and goals not discernible from the reconnaissance payload alone. The defender’s ability to thwart these and future attacks therefore derives from a synergy between the application-level feature extractor and the network-level intrusion detector to derive a more complete model of attacker behavior.

### 2.3 Honey-patching Approach
Prior work has observed that many vendor-released software security patches can be honeyed by replacing their attack-rejection responses with code that instead maintains and forks the attacker’s connection to a carefully isolated decoy environment. This approach, known as honey-patching, allows the system to observe subsequent attack actions until the deception is eventually uncovered. Honey-patches offer equivalent security to conventional patches but can potentially enhance IDS web data streams with a semantically rich stream of pre-labeled (attack-only) data for training purposes. These crook-sourced data streams thus provide IDSes with concept-relevant, current, feature-filled information with which to detect and prevent sophisticated, targeted attacks.

---

## 3. System Architecture
(Section 3 will detail the system architecture, including the components and their interactions.)

## 4. Accurate Characterization of Attacks
(Section 4 will show how the approach can support accurate characterization of attacks through decoy data.)

## 5. Implementation
(Section 5 will summarize the implementation of the proposed approach.)

## 6. Evaluation Methodology and Results
(Section 6 will present the evaluation methodology and results, demonstrating the effectiveness of the approach.)

## 7. Discussion
(Section 7 will discuss the findings and implications of the research.)

## 8. Related Work
(Section 8 will review related work in the field and compare it with the proposed approach.)

## 9. Conclusion and Future Directions
(Section 9 will conclude the paper with a summary of outcomes and future directions for research.)

---

**Note:** The figures and detailed sections (3, 4, 5, 6, 7, 8, and 9) are not included in this text but should be added to complete the paper.