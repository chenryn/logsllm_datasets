3 is 5). Therefore, multiplying 2 polynomials
the size of x
of size s1 and s2 takes O (s1s2) time. Let the maximum size of all
polynomials f in the input be s. Executing any rule involves com-
puting completion lists followed by checking if 0 lies in the span of
certain polynomials. Computing completion lists of m polynomials
involves O (m
) time.
Normalizing the rational polynomials to have a common denomina-
2 polynomials in the completion list each
tor involves multiplying m
2 ·s
2, which takes O (m
of size s
) time. Suppose we want to check
2
) polynomials (number of polynomials in
if 0 lies in the span of O (m
) monomials after
the completion lists), each having at most O (s
normalization. This involves solving a system of O (m
) linear
equations (upper bound on the number of monomials in the com-
pletion list) each of size O (m
)ω )
time, where nω is the complexity of multiplying two n × n matrices.
Therefore, applying all the rules to all the untrusted polynomials
takes at most O (m · (m
Now let us compute the total number of times we call the QSearch
algorithm recursively. Suppose QSearch is run on problem Π and
suppose it triggers a rule that outputs two PPE problems Π′ and
Π′′. We obtain the problem Π′ by moving an untrusted polynomial
to the trusted set, and the problem Π′′ is obtained by substituting
some polynomial by zero. Note that Π′′ cannot be equal to the orig-
inal problem as Rule2 − 3b outputs ⊥ otherwise. Therefore some
polynomial of Π′′ has at least one lesser monomial than Π. Let the
total number of monomials in all the polynomials of Π be k. By the
above analysis, the QSearch is recursively invoked at most 2m+k
times. As each recursive call takes at most O (m · (ms)
2ω ) time, the
total time taken by our algorithm is O (m· (m
)ω ·2m+k ) time.
). This takes at most O ((m
)ω ) time.
2 · s
2m2
2 ·s
2m2
2 · s
2m2
2·s
2m2
2m2
2m2
2
Even though our algorithm has high theoretical complexity, in Sec-
tion 4 we show that it runs reasonably fast for many real-world
schemes.
Main Algorithm for PPE Testing Circuit Search
Input: A PPE problem Π = (G, n, m, r, u, α , Trusted).
Output: A PPE circuit Q or the special symbol unknown.
Steps of QSearch(Π):
Start. If Trusted = [m], then output the always accepting cir-
cuit Q := Cacc.
Rule 1. For k = 1 to m,
(a) Call z = Rule1(Π, k ).
(b) If z = (C, Π′) (cid:44)⊥, then
(i) Call C′ = QSearch(Π′)
(ii) If C′ (cid:44) unknown, then output the PPE circuit Q :=
C AND C′.
Rule 2-3b. For rule in {Rule2, Rule3a, Rule3b}, k = 1 to m,
(a) Call z = rule(Π, k ).
(b) If z = (IsIdentity, C, Π′, Π′′) (cid:44)⊥, then
(i) Call C′ = QSearch(Π′)
(ii) If C′ (cid:44) unknown and Π′′ =⊥, then output Q :=
(iii) If C′ (cid:44) unknown and Π′′ (cid:44)⊥, then call C′′ =
(iv) If C′ (cid:44) unknown and C′′ (cid:44) unknown, then output
Q := ((NOT IsIdentity) AND C AND C′) OR
(IsIdentity AND C′′).
((NOT IsIdentity) AND C AND C′).
QSearch(Π′′)
the PPE circuit
Final. Otherwise, output unknown.
Figure 7: Recursive procedure for searching for a PPE Test-
ing Circuit
4 IMPLEMENTATION
We implemented the PPE circuit searching algorithm described in
Figure 7 in a software tool called AutoRationalPPE. We ran the tool
on a number of signature, verifiable random function and advanced
encryption schemes as well as other types of pairing-based pub-
lic/private parameters, including some that are PPE circuit testable
and some that are provably not. Our tool was able to produce out-
puts for the schemes based on rational polynomials left open by the
previous AutoPPE and AutoCircuitPPE tools [46, 47] and for several
new schemes. We now present the design of the AutoRationalPPE
tool followed by its test case results and performance numbers.
4.1 AutoRationalPPE Implementation
We implemented AutoRationalPPE using Ocaml version 4.02.3. We
built the code on top of the AutoCircuitPPE9 tool (Hohenberger et
al. [47]), which in turn utilizes some of the parsing tools and data
structures (to store polynomials) of the Generic Group Analyzer
(GGA) tool10 of Barthe et al. [19]. We also used the SageMath
package11 to solve systems of linear equations and implemented
the remaining logic ourselves.
9https://github.com/JHUISI/auto-tools
10https://github.com/generic-group-analyzer/gga
11https://www.sagemath.org/
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2747Input File Example
maps G1 * G1 ->GT.
trusted_polys [F1 = a] in G1.
untrusted_polys [F2 = a*a, F3 = a*a*a, F4 = 1/(a*a*a*a), F5 = 1/a] in G1.
Figure 8: Input file for our detailed example.
The input format of AutoRationalPPE is similar to the
AutoCircuitPPE tool, which makes testing with both tools easier.12
For the sake of completeness, we present the input format below.
The tool’s input consists of pairing information (such as the Type I,
II or III) and a set of trusted/untrusted polynomials along with their
group identifiers.13 In addition, the tool optionally takes as input
information that allows the tool to help the user encode some cryp-
tosystem parameters as a PPE problem instance. In particular, all
trusted and untrusted elements (represented by rational polynomi-
als) are bilinear group elements in G1, G2 or GT and Definition 2.1
does not allow including an element in Zp in either set. However,
since it is not uncommon for schemes to contain elements in the
Zp domain as part of their public or private parameters, we imple-
mented a workaround for those schemes similar to AutoPPE and
AutoCircuitPPE.14 The tool runs the algorithm in Figure 7 along
with a few optimizations implemented in AutoPPE and AutoCir-
cuitPPE such as computing completion list before applying all the
rules. It finally outputs either a PPE circuit or the special symbol
unknown. The PPE circuit computed by the QSearch algorithm is
generally very large, and therefore we further optimize the circuit
by a few techniques such as computing common sub-circuits only
once.
The source code for AutoRationalPPE comprises roughly 4K
lines of Ocaml code, and the input description of each pairing
based scheme we tested consists of less than 10 lines of code. The
ease of converting a given pairing based scheme into the input
format for AutoRationalPPE makes the tool highly practical and
useful. The source code of AutoRationalPPE is publicly available
at https://github.com/JHUISI/auto-tools.
4.2 A Detailed Example
In this section, we explain how to use our tool via a detalied example.
In Figure 8, we present a sample input to our tool. Here, we intend to
1/a4
1/a
verify the well-formedness of group elements (дa2
1 , дa3
),
, д
1 , д
1
1
4
3
2
given дa1 i.e., the a is the trusted polynomial and (a
, 1/a)
, 1/a
, a
are the untrusted set of polynomials. We compute the PPE circuit
that verifies the well-formedness of above untrusted polynomials
using our tool.
In the input file to our tool, we specify the pairing information us-
ing the line maps G1*G1->GT, which denotes a Type I pairing15. We
then specify the trusted set of polynomials along with their group
identifiers using trusted_polys [_] in G_. We then specify the
untrusted set of polynomials along with their group identifiers
representing numerator and denominator.
12Unlike AutoCircuitPPE, our tool takes 2 polynomials for each formal variable
13While this program input is in a slightly different format than Definition 2.1, we
14Whenever a polynomial fi /hi is added to the Trusted set, then the implementa-
15Alternately, a Type II pairing could be specified by maps G1*G2->GT, isos G1
stress that it is the same information.
tion also adds uj · fi /hi for any variables uj representing elements in Zp .
->G2, and a Type III pairing could be specified by maps G1*G2->GT.
Output of the Tool
F0 = 1 in G1
F3 = a^3 in G1
F0 = 1 in GT
F1 = a in G1
F4 = 1/a^4 in G1
F5 = 1/a in G1
F2 = a^2 in G1
Trusted set in G1: F1 = a
Untrusted set in G1: F2 = a^2, F3 = a^3, F4 = 1/a^4, F5 = 1/a
Rule 1 applied to F2 = a^2. C := e(F2,F0) = e(F1,F1)
Trusted set in G1: F1 = a, F2 = a^2
Untrusted set in G1: F3 = a^3, F4 = 1/a^4, F5 = 1/a
Rule 1 applied to F3 = a^3. C := e(F3,F0) = e(F1,F2)
Trusted set in G1: F1 = a, F2 = a^2, F3 = a^3
Untrusted set in G1: F4 = 1/a^4, F5 = 1/a
Rule 2 applied on F5 = 1/a. isidentity := F1 = I C := (e(F5,F1) = F0 AND
(NOT F1 = I))
Trusted set in G1: F1 = a, F2 = a^2, F3 = a^3, F5 = 1/a
Untrusted set in G1: F4 = 1/a^4
Rule 2 applied on F4 = 1/a^4. isidentity := F2 = I C := (e(F4,F2) = e(F5,F5)
AND (NOT e(F2,F2) = I))
Execution time : 8.283724s
(e(F2,F0) = e(F1,F1) AND (e(F3,F0) = e(F1,F2) AND (((NOT F1 = I) AND
(e(F5,F1) = F0 AND (NOT F1 = I))) AND ((NOT F2 = I) AND (e(F4,F2) =
e(F5,F5) AND (NOT e(F2,F2) = I))))))
G2 : e(F3,F0) = e(F1,F2)
Optimized Circuit:
G1 : e(F2,F0) = e(F1,F1)
G4 : e(F5,F1) = F0
G7 : e(F2,F2) = I G8 : NOT G3 G9 : G8 AND G4 G10 : NOT G5
G11 : NOT G7
G14 : G9 AND G13
G13 : G10 AND G12
G16 : G1 AND G15
G6 : e(F4,F2) = e(F5,F5)
G15 : G2 AND G14
G12 : G6 AND G11
G3 : F1 = I
G5 : F2 = I
Figure 9: Output file for our detalied example. The final PPE
circuit is presented at the end. The wires of the PPE circuit
are denoted using Gxx.
using untrusted_polys[_] in G_. For each polynomial, we also
specify a formal variable F_ which is used in the PPE circuit output
by the tool. We specify comments using delimeters (*....*). We
present the output of the tool on the above input file in Figure 9. The
output file contains the list of rules applied during the execution
and the final circuit. Following AutoCircuitPPE, we also make a
few optimizations to the final circuit. The list of PPE and boolean
gates of the optimized circuit are presented at the end of the output.
Here, each wire of the circuit is denoted using Gxx notation. This
could be either output of a PPE or boolean gate.
In identity based encryption schemes, typically identity id is
a variable in Zp and not a group element. In such cases, we can
specify id variable using Zp_vars [_]. Internally for every problem
instance Π, for each trusted polynomial f /h and a Zp variable xi,
the AutoRationalPPE tool adds xi · f /h to the trusted set16. Prior
tools also do this modification.
4.3 Case Studies
We evaluated AutoRationalPPE on various types of pairing-based
schemes using a MacBook Pro 2015 laptop with 2.7GHz Intel Core
i5 processor and 8GB 1867MHz DDR3 RAM. We present the results
along with average execution times over 10 runs in Figure 1. Like
16Ideally, for each polynomial poly on Zp variables x, one should include poly(x) ·
f/h in the trusted set. The AutoRationalPPE tool supports such an operation for all
bounded degree polynomials on Zp variables. However for the purpose of this example,
it suffices to include only xi · f /h to trusted set.
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2748Scheme
Pairing
Type
IBE
IBE
BF [29]
GS [39]
BBG [28] (ℓ = 8)
CL [33]-C (B(msg) = 8)
IBE
IBE
HIBE
IBE
IBE
IBE
HIBE
IBE
Waters [57]
BW [31]
BB [25]
Gentry [38]
BLS [30]