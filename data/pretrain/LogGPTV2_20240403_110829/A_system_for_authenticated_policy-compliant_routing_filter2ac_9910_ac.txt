ﬁx) the capability without needing to contact the resource principal
or key server. Platypus therefore allows the minting of delegated
capabilities, which are derived from normal capabilities, but lim-
ited in their scope. To facilitate the use of delegated capabilities,
we extend the capability format as follows. First, when a packet is
stamped with a delegated capability, a bit is set in the ﬂags ﬁeld of
the capability specifying that the capability is a delegated capabil-
ity. Immediately before the associated binding, the stamper places
the constraining preﬁx (a 32-bit value), the preﬁx length (an 8-bit
value), and a delegation ID (a 24-bit value). These values allow a
Platypus router to verify both that the binding is valid and that the
destination of the packet is within the restricted preﬁx. In addition,
the delegation ID can be used by the resource principal in conjunc-
tion with the ISP to track the use of delegated capabilities.
Table 2 presents two distinct protocols for constructing delegated
capabilities: chaining delegation and XOR delegation. The two pro-
tocols address different design points and exploit a natural trade-off
between the security of delegation and the complexity of delegated-
capability veriﬁcation; ASes would likely select one or the other de-
pending on the delegation habits of their resource principals. Either
scheme can be used to create reply capabilities by simply restricting
the preﬁx to the client’s IP address.
Chaining delegation is simply a multi-round variant of the double-
MAC with similar security guarantees. Since chaining includes bits
of the preﬁx itself, the chain values cannot be precomputed by
routers. Thus, while requiring no additional state at the router, this
scheme can require signiﬁcant computation at Platypus routers (one
invocation of F —which is likely to be implemented as a MAC in
practice—for each bit in the delegated preﬁx).
Alternatively, XOR delegation is amenable to precomputation,
allowing individual routers to trade off storage for per-packet com-
putation, but admits a certain amount of collusion between third
parties. By allowing precomputation of the sequence of values used
to generate the key under which bindings are computed, veriﬁcation
of delegated capabilities can occur at roughly the same speed as
non-delegated capabilities. For each temporal secret s there exists
a sequence of pseudorandom values di,0 and di,1, one of which is
selected according to whether bit i of the preﬁx is a 1 or 0. XORing
these values yields a pseudorandom key under which MACs can be
computed. Delegation is secure in that third parties who receive a
dp for some preﬁx p cannot compute the values for di,b for i ≤ |p|
since those values are computed using sj values where j < |p|.
Since XOR is commutative and intermediate values are distributed,
the scheme is vulnerable to collusion between parties with different
delegated preﬁxes for the same capability. For example, two parties
with capabilities delegated from the same resource principal capa-
bility with preﬁxes of Hamming distance one can extract the di,b
values for the position i at which their preﬁxes differ.
5.
IMPLEMENTATION
We have built prototype software components for UNIX that pro-
vide Platypus stamping, key distribution, and forwarding services.
Each is described in turn below, as well as several issues that arise
with respect to cryptographic primitives and protocol interactions.
5.1 Forwarding and key distribution
We have implemented Platypus forwarding functionality both as
a user-space daemon process, prd, and a kernel module, prkm. We
have written prd for both FreeBSD and Linux; prkm is currently
available only for Linux 2.6. The user-space implementation, prd,
works in conjunction with our key-distribution daemon, pkd; the
two share a key database and run as separate threads of the same
process. pkd services DNS key lookup and revoke requests for a
delegated subdomain as described earlier. Our prototype of prkm,
unlike pkd, currently does not support revocation.
The two Platypus router implementations differ mainly in the
mechanisms they use to intercept Platypus packets. The user-space
forwarding daemon, prd, captures Platypus packets using raw sock-
ets, while the Linux kernel module registers itself with the IP stack
as a protocol handler for Platypus protocol packets. After process-
ing and validating any attached capabilities, the routers either re-
inject the packet into the local IP stack for delivery or forward it
to the next Platypus hop or ﬁnal destination. User-level packet cap-
ture and forwarding requires multiple user/kernel context switches,
resulting in poor forwarding performance, thus motivating the need
for an in-kernel implementation. prkm processes Platypus packets
entirely inside the kernel. Upon a packet arrival, in the kernel soft-
IRQ context, prkm veriﬁes the packet; if the binding is valid, the
packet is updated and forwarded. By binding interrupt handling for
different network interfaces to different CPUs on a machine, prkm
can provide good scaling across multiple processors.
Delegation
RP
Sub-delegation
TP
Stamping
TP
Veriﬁcation
PR Verify
Chaining Delegation
s0 ← s ⊕ H(c.id)
for i ← 1 to |p|
si ← Fsi−1 (pi)
(s|p|, p) =⇒ TP
for i ← (|p| + 1) to |p(cid:1)|
si ← Fsi−1 (p(cid:1)
i)
(s|p(cid:2)|, p(cid:1)) =⇒ TP’
b ← MACs|p| (MASK(P ))
s0 ← s ⊕ H(c.id)
for i ← 1 to |p|
si ← Fsi−1 (pi)
b ?= MACst (P )
p ?=|p| P.dst
RP
TP
TP
PR Precompute
PR Verify
XOR Delegation
s0 ← s, dp ← H(s) ⊕ H(c.id)
for i ← 1 to |p|
si ← Fsi−1 (i)
dp ← dp ⊕ Fsi−1 (pi(cid:6)i)
(dp, s|p|, p) =⇒ TP
dp(cid:2) ← dp
for i ← (|p| + 1) to |p(cid:1)|
si ← Fsi−1 (i)
dp(cid:2) ← dp(cid:2) ⊕ Fsi−1 (p(cid:1)
i(cid:6)i)
(dp(cid:2) , s|p(cid:2)|, p(cid:1)) =⇒ TP’
b ← MACdp (MASK(P ))
for i ← 1 to 32
si ← Fsi−1 (i)
di,0 ← Fsi−1 (0(cid:6)i), di,1 ← Fsi−1 (1(cid:6)i)
dp ← H(s) ⊕ H(c.id) ⊕ L|p|
b ?= MACdp (P )
p ?=|p| P.dst
i=0 di,pi
Table 2: Two protocols for IPv4 capability delegation. p represents a constraining IP preﬁx, pi is the ith bit of p, |p| denotes the length
of p, p(cid:1)
is the preﬁx corresponding to the subnet of p to be delegated, c.id is the delegation ID, Fk is a pseudorandom function keyed
by k, and H is a hash function. RP is the resource principal, TP and TP’ are third parties, and PR is the Platypus router. ⊕
denotes bit-wise XOR.
5.2 Stamping
To use Platypus, packets must be stamped with the capabilities
appropriate for their selected route. Our current user-level imple-
mentation stamps (and routes) packets at the source using a user-
level stamp daemon, psd. psd is implemented as a FreeBSD user-
level process that receives stamp registration requests from appli-
cation processes through a UNIX domain socket. Applications reg-
ister requests in one of two fashions. First, they may pass psd a
socket descriptor using sendmsg() requesting that all packets sent
using that socket be stamped with a speciﬁed set of capabilities.
Alternatively, processes may request that all packets sent on behalf
of a particular user be routed and stamped in the speciﬁed fashion.
By using a divert socket to intercept outgoing IP packets matching
the set of registered stamp requests after kernel IP processing, psd
can encapsulate, stamp, and resend packets transparent to in-kernel
protocol stacks. In addition, we have developed a prototype Linux
kernel module, pskm, that performs in-network stamping using a
mechanism similar to that of prkm.
5.3 Cryptographic issues
Our prototype Platypus implementation uses UMAC, a MAC de-
signed for efﬁcient implementation on modern processors [7]. Un-
fortunately, UMAC requires a per-key setup phase that takes sig-
niﬁcantly longer than a single MAC computation. Hence, we main-
tain a capability cache with recent key IDs and their correspond-
ing UMAC contexts. Cached contexts, if available, are used during
binding computation, amortizing the key setup over many packets
with the same capability. In a PC-based router, this context cache
can easily be made large enough to cache most active resource prin-
cipals: in our unoptimized implementation, each context uses only
316 bytes. Luckily, MACs well suited for hardware implementation
have negligible key-setup time, so no cache would be needed.
The use of UMAC for capability veriﬁcation raises two issues.
First, UMAC requires unique nonces in addition to a key for each
MAC computation; its designers suggest the use of a 32-bit or 64-
bit counter, depending on the lifetime of the key. While nonces need
not be private for security of the MAC, they must be unique across
all MAC computations with a given key. Our prototype uses the IP
ID ﬁeld and 4 bytes of the encapsulated packet (corresponding to
the TCP sequence number) to provide a 48-bit nonce for binding
computation.2 Also, due to the double MAC, the nonce used for
the ﬁrst MAC (to generate the key s) must be different from that of
the second MAC (to generate bindings) since the former is ﬁxed for
the lifetime of s whereas the latter changes per packet. For the ﬁrst
MAC, we use the upper (32− n) bits of the current time, where 2n
is the key expiration interval.
5.4 Protocol interactions
We have attempted to design around possible negative interac-
tions between Platypus and existing protocols. In particular, proper
ICMP delivery is complicated by source routing. Since ICMP re-
sponses can occur for many reasons, the appropriate recipient of
such messages can be ambiguous. For example, should an ICMP
time expired message be sent to the last Platypus waypoint in the
source route, the stamper, or the original source? The cause of
such expiration may be due to in-network stamping or other prob-
lems such as routing loops. Further complicating the matter, non-
Platypus routers may generate ICMP responses for source-routed
packets and send them to the last waypoint in the source route. In
both of the two primary cases—end-host stamping and in-network
stamping—the end-host perceives its Platypus-enabled connectiv-
ity to be the same as ordinary network connectivity, thus we send all
ICMP packets back to the original source address. The ﬁrst 64 bits
of the Platypus header contain the original source address, enabling
RFC-compliant routers to include the original source address in
ICMP error response packets; Platypus routers forward such ICMP
packets along to the source, subject to standard ICMP rate limiting.
Since Platypus uses DNS for key lookup requests, we must con-
sider whether to stamp DNS packets themselves. We have chosen
not to, for three reasons. First, DNS requests are typically local
and thus will likely not beneﬁt from Platypus-style routing. Sec-
ond, initial Platypus key-lookup requests via DNS would need to be
2Some OSes zero the IP ID ﬁeld for packets with the “don’t fragment” bit set; this
typically occurs after path MTU discovery. To ensure the uniqueness of nonces, a
stamper may place a random IP ID in such packets before stamping.
Packet size
Packet processing
Null
UMAC
Destination cache lookup
IP hdr build and verify
Packet transmission
68 byte
348 byte
1500 byte
172 ns
695 ns
1480 ns
173 ns
998 ns
289 ns
145 ns
1482 ns
181 ns
1908 ns
1493 ns
Table 3: Micro-benchmarks for prkm. All times are as measured
by the CPU cycle counter.
stamped with a valid key, creating a bootstrapping problem. Finally,
stamping DNS packets would require running a Platypus router at
DNS servers or transparently de-encapsulating DNS requests in the
network, complicating deployment.
6. EVALUATION
In this section we consider both the performance of our prototype
router and stamper, and, more importantly, how the effectiveness of
source routing is impacted by waypoint granularity.
6.1 Forwarding and stamping performance
Our experimental testbed consists of a central Linux-based router
that performs both forwarding and stamping and several load gen-
erators connected through a gigabit Ethernet switch. The server is
conﬁgured with two 64-bit, 2.2-GHz AMD Opteron 248 proces-
sors, two GB of PC2700 DDR memory, and three Intel Pro/1000
XT gigabit NICs; our tests used two of the NICs installed on a 100-
Mhz, 64-bit PCI-X bus. The load generating machines have 1.1-
GHz Pentium III processors and Intel Pro/1000 XT gigabit NICs.
First we consider the absolute performance of forwarding and
stamping. Figure 4 compares the performance of Linux’s in-kernel
IP forwarding to prkm’s forwarding performance and pskm’s stamp-
ing performance for worst-case (minimum-size) packets. For for-
warding tests, the load generators each direct identical 68-byte (20-
byte IP header + 28-byte Platypus header + 20-byte TCP header,
excluding the Ethernet header) Platypus packets at the router which
validates the bindings and forwards the packets to the indicated
waypoint. For stamping, the load generators send 40-byte packets
which are stamped and forwarded by the router (by insertion of the
28-byte Platypus header with a capability and binding). To increase
the offered load in a controlled fashion, we ﬁrst saturate one router
interface and then load the two interfaces at equal levels.
As seen in the ﬁgure, prkm is capable of forwarding packets with
full UMAC authentication at a maximum loss-free forwarding rate
of approximately 767 Kpps (using a warm UMAC context cache;
initializing the context takes 41.3 µs), which is only slightly less
than the performance of native Linux. To help calibrate for the fact
that the kernel’s forwarding code is more streamlined than that of
prkm, we plot the performance of the prkm forwarding path with-
out veriﬁcation (labeled null forwarding in the ﬁgure). The results
indicate that a signiﬁcant portion of the performance degradation is
due to factors other than capability veriﬁcation. When forwarding
MTU (1500-byte) packets, prkm is able to fully validate at approx-
imately 2.5 Gbps without loss. Stamping performance is slightly
worse: pskm is capable of loss-free stamping at approximately 633
Kpps. These results indicate that Platypus software routers and in-
network stampers can yield good performance on modern hard-
ware, enabling low-cost deployment of Platypus.
In addition to absolute forwarding numbers, we measured the
amount of time actually spent validating bindings, as this latency
may be observed by end hosts (as opposed to forwarding perfor-
mance, which is largely a concern of the ISP). Table 3 shows micro-
benchmarks of prkm in its several stages. We performed these mea-
 900
 850
 800
 750
 700
 650
 600
 550
)
s
p
p
K
(
e
t
a
R
t
t
u
p
u
O
Linux native forwarding
Platypus null forwarding
Platypus UMAC forwarding
Platypus UMAC stamping
 500
 500
 600
 700
 800
 900