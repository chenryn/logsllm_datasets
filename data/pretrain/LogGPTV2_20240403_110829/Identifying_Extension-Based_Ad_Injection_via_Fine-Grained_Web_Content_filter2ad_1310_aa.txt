title:Identifying Extension-Based Ad Injection via Fine-Grained Web Content
Provenance
author:Sajjad Arshad and
Amin Kharraz and
William Robertson
Identifying Extension-Based Ad Injection
via Fine-Grained Web Content Provenance
Sajjad Arshad(B), Amin Kharraz, and William Robertson
Northeastern University, Boston, USA
{arshad,mkharraz,wkr}@ccs.neu.edu
Abstract. Extensions provide useful additional functionality for web
browsers, but are also an increasingly popular vector for attacks. Due
to the high degree of privilege extensions can hold, extensions have
been abused to inject advertisements into web pages that divert rev-
enue from content publishers and potentially expose users to malware.
Users are often unaware of such practices, believing the modiﬁcations
to the page originate from publishers. Additionally, automated identiﬁ-
cation of unwanted third-party modiﬁcations is fundamentally diﬃcult,
as users are the ultimate arbiters of whether content is undesired in the
absence of outright malice.
To resolve this dilemma, we present a ﬁne-grained approach to track-
ing the provenance of web content at the level of individual DOM ele-
ments. In conjunction with visual indicators, provenance information can
be used to reliably determine the source of content modiﬁcations, distin-
guishing publisher content from content that originates from third par-
ties such as extensions. We describe a prototype implementation of the
approach called OriginTracer for Chromium, and evaluate its eﬀec-
tiveness, usability, and performance overhead through a user study and
automated experiments. The results demonstrate a statistically signiﬁ-
cant improvement in the ability of users to identify unwanted third-party
content such as injected ads with modest performance overhead.
Keywords: Web security · Ad injection · Browser extension
1 Introduction
Browser extensions enhance browsers with additional useful capabilities that are
not necessarily maintained or supported by the browser vendor. Instead, this
code is typically written by third parties and can perform a wide range of tasks,
from simple changes in the appearance of web pages to sophisticated tasks such as
ﬁne-grained ﬁltering of content. To achieve these capabilities, browser extensions
possess more privilege than other third-party code that runs in the browser.
For instance, extensions can access cross-domain content, and perform network
requests that are not subject to the same origin policy. Because these extensive
capabilities allow a comparatively greater degree of control over the browser,
they provide a unique opportunity to attack users and their data, the underlying
c(cid:2) Springer International Publishing Switzerland 2016
F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 415–436, 2016.
DOI: 10.1007/978-3-319-45719-2 19
416
S. Arshad et al.
system, and even the Internet at large. For this reason, newer browser extension
frameworks such as Chromium’s have integrated least privilege separation via
isolated worlds and a ﬁne-grained permissions system to restrict the capabilities
of third-party extensions [7].
However, extension security frameworks are not a panacea. In practice, their
eﬀectiveness is degraded by over-privilege and a lack of understanding of the
threats posed by highly-privileged extensions on the part of users [18]. Indeed,
despite the existence of extension security frameworks, it has recently been shown
that extension-based advertisement injection has become a popular and lucrative
technique for dishonest parties to monetize user web browsing. These extensions
simply inject or replace ads in web pages when users visit a website, thus creating
or diverting an existing revenue stream to the third party. Users often are not
aware of these incidents and, even if this behavior is noticed, it can be diﬃcult
to identify the responsible party.
While ad injection cannot necessarily be categorized as an outright malicious
activity on its own, it is highly likely that many users in fact do not want or
expect browser extensions to inject advertisements or other content into Web
pages. Moreover, it can have a signiﬁcant impact on the security and privacy
of both users as well as website publishers. For example, recent studies have
shown that ad-injecting extensions not only serve ads from ad networks other
than the ones with which the website publishers intended, but they also attempt
to trick users into installing malware by inserting rogue elements into the web
page [46,48].
To address this problem, several automatic approaches have been proposed to
detect malicious behaviors (e.g., ad injection) in browser extensions [26,28,48]. In
addition, centralized distribution points such as Chrome Web Store and Mozilla
Add-ons are using semi-automated techniques for review of extension behavior
to detect misbehaving extensions. However, there is no guarantee that analyzing
the extensions for a limited period of time leads to revealing the ad injection
behaviors. Finally, a client-side detection methodology has been proposed in
[46] that reports any deviation from a legitimate DOM structure as potential
ad injections. However, this approach requires a priori knowledge of a legitimate
DOM structure as well as cooperation from content publishers.
Although ad injection can therefore potentially pose signiﬁcant risks, this
issue is not as clear-cut as it might ﬁrst seem. Some users might legitimately
want the third-party content injected by the extensions they install, even includ-
ing injected advertisements. This creates a fundamental dilemma for automated
techniques that aim to identify clearly malicious or unwanted content injec-
tion, since such techniques cannot intuit user intent and desires in a fully auto-
matic way.
To resolve this dilemma, we present OriginTracer, an in-browser approach
to highlight extension-based content modiﬁcation of web pages. OriginTracer
monitors the execution of browser extensions to detect content modiﬁcations
such as the injection of advertisements. Content modiﬁcations are visually high-
lighted in the context of the web page in order to (i) notify users of the presence
Identifying Extension-Based Ad Injection
417
of modiﬁed content, and (ii) inform users of the source of the modiﬁcations. With
this information, users can then make an informed decision as to whether they
actually want these content modiﬁcations from speciﬁc extensions, or whether
they would rather uninstall the extensions that violate their expectations.
OriginTracer assists users in detecting content injection by distinguishing
injected or modiﬁed DOM elements from genuine page elements. This is per-
formed by annotating web page DOM elements with a provenance label set that
indicates the principal(s) responsible for adding or modifying that element, both
while the page is loading from the publisher as well as during normal script and
extension execution. These annotations serve as trustworthy, ﬁne-grained prove-
nance indicators for web page content. OriginTracer can be easily integrated
into any browser in order to inform users of extension-based content modiﬁca-
tion. Since, OriginTracer identiﬁes all types of content injections, it is able
to highlight all injected advertisements regardless of their types (e.g., ﬂash ads,
banner ads, and text ads).
We implemented a prototype of OriginTracer as a set of modiﬁcations to
the Chromium browser, and evaluated its eﬀectiveness by conducting a user
study. The user study reveals that OriginTracer produced a signiﬁcantly
greater awareness of third-party content modiﬁcation, and did not detract from
the users’ browsing experience. Our results also suggests that OriginTracer
can be used as a complementary system to ad blocking systems such as Adblock
Plus [2] and Ghostery [4].
To summarize, the main contributions of this paper are:
– We introduce a novel in-browser approach to provenance tracking for web
content at the granularity of DOM elements, and present a semantics for
provenance propagation due to script and extension execution. The approach
leverages a high-ﬁdelity in-browser vantage point that allows it to construct
a precise provenance label set for each DOM element introduced into a web
page.
– We implement a prototype called OriginTracer that uses content prove-
nance to identify and highlight third-party content injection – e.g., unwanted
advertisements – by extensions to notify users of their presence and the orig-
inating principal.
– We evaluate the eﬀectiveness, usability, and performance of our prototype,
and show that it is able to signiﬁcantly assist users in identifying ad injection
by extensions in the wild without degrading browser performance or the user
experience.
2 Background and Motivation
In the following, we introduce background information on browser extensions,
present an overview of advertisement injection as a canonical example of ques-
tionable content modiﬁcation, and motivate our approach in this context.
418
S. Arshad et al.
2.1 Browser Extensions
Browser extensions are programs that extend the functionality of a web browser.
Today, extensions are typically implemented using a combination of HTML,
CSS, and JavaScript written against a browser-speciﬁc extension API. These
APIs expose the ability to modify the browser user interface in controlled ways,
manipulate HTTP headers, and modify web page content through the document
object model (DOM) API. An extension ecosystem is provided by almost all
major browser vendors; for instance, Google and Mozilla both host centralized
repositories of extensions that users can download at the Chrome Web Store and
Mozilla Add-ons sites, respectively.
2.2 Advertisement Injection
As web advertising grew in popularity, those in a position to modify web con-
tent such as ISPs and browser extension authors realized that proﬁt could be
realized by injecting or replacing ads in web pages. For instance, some ISPs
began to tamper with HTTP traﬃc in transit, injecting DOM elements into
HTML documents that added ISP’s advertisements into pages visited by their
customers [10,30]. In a similar fashion, browser extensions started modifying
pages to inject DOM elements in order to show ads to users without necessarily
obtaining the user’s prior consent. Ad injection has evolved to become a common
form of unrequested third-party content injection on today’s web [37].
Fig. 1. Overview of advertisement injection. (1) The user accesses the publisher’s site.
(2) An ad-injecting browser extension adds DOM elements to display ads to the user,
and optionally removes existing ads. (3) Ad revenue is diverted from the publisher.
(4) Ad impressions, clicks, and conversions are instead directed to the extension’s ad
network. (5) Ad revenue ﬂows to the extension author.
Identifying Extension-Based Ad Injection
419
These practices have several eﬀects on both publishers and users. On one
hand, ad injection diverts revenue from the publisher to the third party respon-
sible for the ad injection. If advertisements are the primary source of income
for a publisher, this can have a signiﬁcant eﬀect on their bottom line. If the
injected ads contain or reference undesired content (e.g., adult or political top-
ics), ad injection can also harm the reputation of the publisher from the user’s
perspective. If the content injection is also malicious in nature, the publisher’s
reputation can be further harmed in addition to exposing users to security risks
due to malware, phishing, and other threats. Prior work has shown that users
exposed to ad injection are more likely to be exposed to “malvertising” and tra-
ditional malware [46,48]. Figure 1 gives an overview of ad injection’s eﬀect on
the normal ad delivery process, while Fig. 3 shows an instance of ad injection on
amazon.com.
2.3 Motivation
from their
repositories
Recently, there have been eﬀorts by browser vendors to remove ad-injecting
extensions
[1]. Although semi-automated central
approaches have been successful in identifying ad-injecting extensions, decep-
tive extensions can simply hide their ad injection behaviors during the short
period of analysis time. In addition, ﬁnding web pages that trigger ad injection
is a non-trivial task, and they can miss some ad-injecting extensions. Moreover,
there are extensions that are not provided through the web stores, and users
can get them from local marketplaces, which may not examined the extensions
properly. Hence, we believe that there is a need for a protection tool to combat
ad injection on the client side in addition to centralized examination by browser
vendors.
Table 1. Five popular Chrome extensions that modify web pages as part of their
benign functionality.
Extension
Adblock plus
Google translate
Tampermonkey
Evernote web clipper
Google dictionary
Injected element
No. of users
10,000,000+ 
6,000,000+ 
5,800,000+ 
4,300,000+ 
3,000,000+ 
Furthermore, automatically determining whether third-party content modi-
ﬁcation – such as that due to ad injection – should be allowed is not straightfor-
ward. Benign extensions extensively modify web pages as part of their normal
functionality. To substantiate this, we examined ﬁve popular Chrome extensions
as of the time of writing; these are listed in Table 1. Each of these extensions are
420
S. Arshad et al.
available for all major browsers, and all modify web pages (e.g., inject elements)
to implement their functionality. Therefore, automated approaches based on this
criterion run a high risk of false positives when attempting to identify malicious
or undesirable extensions.
Moreover, it is not enough to identify that advertisements, for instance, have
been injected by a third party. This is because some users might legitimately
desire the content that is being added to web pages by the extensions they
install. To wit, it is primarily for this reason that a recent purge of extensions
from the Chrome Web Store did not encompass the entirety of the extensions
that were identiﬁed as suspicious in a previous study, as the third-party con-
tent modiﬁcation could not be clearly considered as malicious [46]. Instead, we
claim that users themselves are best positioned to make the determination as
to whether third-party content modiﬁcation is desired or not. An approach that
proceeds from this observation would provide suﬃcient, easily comprehensible