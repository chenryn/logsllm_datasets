# Identifying Extension-Based Ad Injection via Fine-Grained Web Content Provenance

**Authors:** Sajjad Arshad, Amin Kharraz, and William Robertson  
**Affiliation:** Northeastern University, Boston, USA  
**Emails:** {arshad, mkharraz, wkr}@ccs.neu.edu

## Abstract
Browser extensions enhance web browsers with additional functionality but can also be exploited to inject advertisements, diverting revenue from content publishers and potentially exposing users to malware. Users often remain unaware of these practices, mistaking the modifications for publisher-generated content. Automated identification of unwanted third-party modifications is challenging, as users ultimately decide whether content is undesired in the absence of outright malice.

To address this issue, we present a fine-grained approach to track the provenance of web content at the level of individual DOM elements. This method, combined with visual indicators, reliably distinguishes publisher content from content originating from third parties such as extensions. We describe a prototype implementation called OriginTracer for Chromium and evaluate its effectiveness, usability, and performance overhead through a user study and automated experiments. The results show a statistically significant improvement in users' ability to identify unwanted third-party content, such as injected ads, with minimal performance overhead.

**Keywords:** Web security, Ad injection, Browser extension

## 1 Introduction
Browser extensions enhance web browsers with useful capabilities not necessarily maintained or supported by the browser vendor. These extensions, typically written by third parties, can perform a wide range of tasks, from simple appearance changes to sophisticated content filtering. To achieve these capabilities, extensions have more privileges than other third-party code, including access to cross-domain content and network requests that bypass the same-origin policy. However, these extensive capabilities also provide opportunities for attacks on users and their data.

Newer browser extension frameworks, such as Chromium's, have integrated least privilege separation via isolated worlds and a fine-grained permissions system to restrict extension capabilities. Despite these measures, extension security frameworks are not foolproof. Over-privilege and a lack of user understanding of the threats posed by highly-privileged extensions degrade their effectiveness. Recently, it has been shown that extension-based ad injection has become a popular and lucrative technique for dishonest parties to monetize user web browsing. These extensions inject or replace ads in web pages, creating or diverting revenue streams to the third party. Users often remain unaware of these incidents, and even if noticed, it can be difficult to identify the responsible party.

While ad injection is not always malicious, many users do not want or expect browser extensions to inject advertisements or other content into web pages. Moreover, it can significantly impact the security and privacy of both users and website publishers. Recent studies have shown that ad-injecting extensions serve ads from unauthorized networks and attempt to trick users into installing malware by inserting rogue elements into web pages.

Several automatic approaches have been proposed to detect malicious behaviors in browser extensions, and centralized distribution points like the Chrome Web Store and Mozilla Add-ons use semi-automated techniques to review extension behavior. However, these methods are not guaranteed to reveal ad injection behaviors. Additionally, a client-side detection methodology that reports deviations from a legitimate DOM structure requires prior knowledge of the legitimate structure and cooperation from content publishers.

To resolve this dilemma, we present OriginTracer, an in-browser approach to highlight extension-based content modifications. OriginTracer monitors the execution of browser extensions to detect content modifications, such as ad injections, and visually highlights these modifications to notify users of their presence and source. With this information, users can make informed decisions about whether they want these modifications or prefer to uninstall the extensions.

## 2 Background and Motivation

### 2.1 Browser Extensions
Browser extensions extend the functionality of web browsers using HTML, CSS, and JavaScript against a browser-specific API. These APIs allow controlled modifications to the browser UI, HTTP headers, and web page content through the DOM API. Major browser vendors provide extension ecosystems, such as the Chrome Web Store and Mozilla Add-ons, where users can download extensions.

### 2.2 Advertisement Injection
As web advertising grew in popularity, entities capable of modifying web content, such as ISPs and browser extension authors, realized the potential for profit by injecting or replacing ads in web pages. For example, some ISPs tamper with HTTP traffic to inject ads, and browser extensions modify pages to show ads without user consent. Ad injection has become a common form of unrequested third-party content injection.

These practices have several effects on publishers and users. Ad injection diverts revenue from publishers to the third party, potentially harming the publisher's reputation if the injected ads contain undesirable content. Prior work has shown that users exposed to ad injection are more likely to encounter "malvertising" and traditional malware.

### 2.3 Motivation
Recent efforts by browser vendors to remove ad-injecting extensions have had limited success due to deceptive extensions hiding their behaviors during analysis. Finding web pages that trigger ad injection is non-trivial, and some extensions may not be properly examined. Therefore, there is a need for a client-side protection tool to combat ad injection in addition to centralized examination by browser vendors.

Automatically determining whether third-party content modification should be allowed is not straightforward, as benign extensions extensively modify web pages. Table 1 lists five popular Chrome extensions that modify web pages as part of their normal functionality, highlighting the risk of false positives in automated approaches.

| **Extension** | **Injected Element** | **No. of Users** |
|---------------|---------------------|------------------|
| Adblock Plus  | No                  | 10,000,000+      |
| Google Translate | Yes                | 6,000,000+       |
| Tampermonkey  | Yes                | 5,800,000+       |
| Evernote Web Clipper | Yes            | 4,300,000+       |
| Google Dictionary | Yes              | 3,000,000+       |

Moreover, it is not enough to identify that advertisements have been injected by a third party, as some users might desire the added content. A recent purge of extensions from the Chrome Web Store did not encompass all suspicious extensions, as the third-party content modification could not be clearly considered malicious. Instead, users themselves are best positioned to determine whether third-party content modification is desired. An approach that provides easily comprehensible information would empower users to make informed decisions.