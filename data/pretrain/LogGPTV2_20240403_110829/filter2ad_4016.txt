title:Poster: recoverable botnets: a hybrid C&amp;C approach
author:Peng Liao and
Xiang Cui and
Shuhao Li and
Chaoge Liu
POSTER: Recoverable Botnets:  A Hybrid C&C Approach
Liao Peng1, Cui Xiang1,2, Li Shuhao1,2, Liu Chaoge1 
1Institute of Computing Technology, Chinese Academy of Sciences 
2Graduate University, Chinese Academy of Sciences 
Beijing, China 
{liaopeng, cuixiang, lishuhao, liuchaoge}@software.ict.ac.cn 
ABSTRACT 
In this paper, we introduce the design of Hybot, a botnet which 
could  recover  its  command  and  control  (C&C)  channel  in  a 
tolerable  delay  in  case  most  of  critical  resources  are  destroyed. 
Hybot  exploits  a  hybrid  C&C  structure,  hybrid  P2P  and  URL 
Flux, to ensure both robustness and effectiveness. Our preliminary 
results  show  that  the  design  of  Hybot  is  feasible,  consequently 
posing potential threat for Internet security. The goal of our work 
is  to  increase  the  understanding  of  advanced  botnets  which  will 
promote the development of more efficient countermeasures.   
Categories and Subject Descriptors 
C.2.1  [Computer  Communication  Networks]:  Network 
Architecture and Design 
General Terms 
Design, Reliability, Security 
Keywords 
Botnet, recoverable, hybrid, C&C 
1.  INTRODUCTION 
As the root cause of many Internet attacks, such as Email spam, 
DDoS  and  seeding  malwares,  botnets  have  attracted  numerous 
studies  as  well  as  cooperative  proactive  defense.  Nowadays 
academia,  government,  ISP,  domain  registrar  and  law-enforcing 
department  have  worked  together  in  order  to  fight  against  the 
remarkable threat. 
Inherent  weaknesses.  Centralized  botnets  suffer  from  single-
point-of-failure.  The  disconnection  or  redirection  of  all  C&C 
servers will cause the entire botnet to collapse. Although Domain 
Flux  provides  a  more  resilient  C&C  mechanism,  it  relies  on 
registering  domain  names  and  maintaining  publicly  available 
servers. Decentralized P2P botnets also have weaknesses such as 
being vulnerable to Index Poisoning and Sybil attack (i.e., Storm), 
routing  table  poisoning  (i.e.,  Waledac),  and  causing  abnormal 
traffic (i.e., Conficker). Moreover, the bootstrap procedure of P2P 
botnets also introduces single-point-of-failure. 
Copyright is held by the author/owner(s). 
CCS'11, October 17-21, 2011, Chicago, Illinois, USA. 
ACM 978-1-4503-0948-6/11/10. 
Counter  botnets.  Defenders  have  successfully  shut  down  many 
famous botnets such as Rustock, Mariposa, Waledac, Stuxnet and 
Coreflood, demonstrating that even sophisticated botnets are not 
immune  to  coordinated  countermeasures.  Unfortunately,  these 
successful  cases  also  stimulate  botmasters  to  develop  more 
advanced botnets which could bounce back in case of temporally 
being “shut down”. 
Recoverable botnets. There are already several studies focusing 
on  constructing  robust  botnets.  Wang  et  al.  [1]  presented  the 
design of an advanced hybrid P2P botnet. Vogt et al. [2] presented 
a  “super-botnet”  which  works  by  inter-connecting  many  small 
botnets  together.  Starnberger  et  al.  [3]  presented  Overbot  which 
uses Kademlia to provide a C&C channel. Nevertheless, none of 
them  have  studied  how  botmasters  might  recover  the  C&C 
channel in case most of critical resources are destroyed (i.e., DNS 
servers 
redirected,  DNS  domain 
shutdown).  Since 
is 
necessary.  
2.  HYBRID C&C DESIGN 
2.1  Overview 
Architecture. Hybot consists of two independent but coordinated 
C&C mechanisms: decentralized Hybrid P2P-based C&C (HPCC) 
and  centralized  URL  Flux-based  C&C  (UFCC)  [4]  as  shown  in 
Figure 1. In HPCC, the publicly accessible Hybots act as servent 
bots and the remaining Hybots act as slave bots [1]. 
recoverability 
rendezvous 
revocation, 
robustness 
is 
relative, 
Figure 1:  Architecture of Hybot 
HPCC  Recoverability.  HPCC  is  firstly  used  because  it  doesn’t 
rely on any resources outside the botnet, making countermeasures 
difficult.  Once  HPCC  fails,  Hybot  activates  UFCC  to  take  over 
C&C as well as repair HPCC (i.e., reviving routing tables via an 
UpdateRoute command). After HPCC is recovered, UFCC will be 
transferred to sleep state again. The intuitive questions are: How 
to keep UFCC always available? If UFCC is so robust, why use 
HPCC? The answer is that UFCC always survives together with a 
group of famous Web 2.0 services (i.e., Twitter), closing all these 
Web 2.0 services is feasible in theory but impossible in reality [4]. 
On  the  other  hand,  though  UFCC  is  robust,  its  centralized 
topology  makes  measurement  on  server-side  simple.  Therefore, 
Hybot only activates UFCC in emergency to keep stealthy.  
833UFCC Recoverability. Since UFCC is not active in most cases, 
botmasters must monitor the availability of UFCC (i.e., deploying 
an  infiltrator  which  accesses  the  Internet  via  Tor).  Once  UFCC 
becomes  unavailable,  botmasters  will  inject  an  UpdateUGA 
command to HPCC to update the User Generation Algorithm [4] 
of Hybot. 
2.2  Hybrid P2P-based C&C 
Hybrid  P2P  botnets  relying  on  automated  peer-list  exchange 
represent the emerging trend of advanced botnets. Although such 
kinds  of  botnets  are  immune  to  index  poisoning,  they’re 
vulnerable  to  peer-list  pollution  attack.  Defenders  may  use 
polluters  (we  assume  only  polluters  exist  since  a  Sybil  node  is 
equal to multi-polluters) to inject a large quantity of fake servent 
peers  [1]  into  botnet  aggressively.  Once  majority  of  bots’  peer 
lists  are  polluted,  all 
the  polluters  would  stop  working 
simultaneously; result in the botnet disabled (i.e., Waledac). 
Consequently, how to keep the authenticity of peer-list, given that 
it’s  inevitable  to  update  peer  list  by  exchanging  with  other 
unauthenticated bots, poses a great challenge. Here, we introduce 
a  pollution-resilient  hybrid  botnet  which  exploits  a  novel 
reputation-based and self-repairing mechanism. Different from [1], 
the  proposed  botnet  makes  peer-list  maintenance  completely 
automated. 
Peer-list  Format.  The  peer-list  is  contained  in  each  bot,  each 
entry  of  peer-list  is  a  four  tuple  ,  IP  and  PT 
denote  a  peer’s  IP  and  port,  respectively;  FC  denotes  the 
cumulative  fail  count  and  CL  denotes  the  confidence  level  of  a 
peer. Specifically, CL is the core of the reputation mechanism, it 
falls into three categories: source, authentic and available. Here, 
source  is  only  used  by  servent  bot  to  label  itself  as  a  potential 
infection  source;  authentic  represents  the  peer  is  completely 
trustable; available means the peer works well currently (although 
it may be a polluter and may stop working at any time). Note that 
only servent bot could act as a peer. 
  2:  Reputation-based  peer-list  delivery  via 
Figure 
infection 
reputation-based 
     Figure 3: Reputation-based peer-list update via reinfection 
Peer-list  Construction.  The 
peer-list 
construction mechanism is inspired by the fundamental fact that 
only  infection  source  is  trustable  since  polluters  would  never 
indeed propagate; otherwise,  they  are  in  fact  contributing  to  the 
botnet, let alone ethical and lawful issues. Thus when A infects a 
victim  B,  B  could  copy  A’s  peer  list  unsuspectingly.  More 
importantly,  if  A  is  a  servent  bot,  B  marks  A  as  authentic.  It’s 
clear that the trust relationship could be delivered safely, that is, 
when B infects C, C will mark both A and B as authentic because 
B is authentic and A is trusted by B. In this way, the  authentic 
peers in each bot will expand continuously until reaching peer-list 
size  limit.  Reinfection  should  also  be  taken  into  consideration 
through which a bot could obtain more authentic peers. Figure.2 
and Figure.3 illuminate the procedure of infection and reinfection, 
assuming the peer-list size is four, A and B are servent bots and C 
is a client bot, D is already infected. 
to 
      Figure 4:  Unauthenticated peer-list update via exchange 
Peer-list  Exchange.  For  polluters,  the  only  chance  to  pollute  a 
botnet is through peer-list exchange; therefore the peer list must 
be  updated  cautiously:  (a).  Only  peers  labeled  as  available  are 
permitted to be updated; (b). Any incoming peer list, even from 
authentic peers, should never be marked as authentic, because any 
peer  may  be  taken  over  by  defenders;  (c).  Peers  with  high-CL, 
low-FC,  and  from  authentic  peers  are  given  priority  of  being 
chosen to replace    the  randomly-selected  unqualified  peers  (i.e., 
with  high-FC);  (d).  The  proportion  of  available  peers  should 
never exceed 50% while authentic peers are permitted to occupy 
the whole peer-list. This design ensures that the authentic entries 
of  peer-list  always  keep  clean  and  unaffected  even  when 
enormous  polluters  coordinate 
launch  pollution  attack 
aggressively.  Moreover,  the  partially  polluted  peer-list  has  great 
chances  to  recover  thanks  to  the  subsequent  exchanging  with 
benign peers, making self-repairing possible. Figure.4 illuminates 
the update procedure of E after it receives the pushed peer-list by 
A and C in turn.  
Two-step Bootstrap. Considering the extreme case that defenders 
could shut down all of initial hard-coded servent bots shortly after 
botnet  release,  the  botnet  exploits  a  two-step  bootstrap:(a). 
Initially,  it  only  hard-codes  a  reasonable  amount  of  peers;  (b). 
After  reasonable  delay,  it  exploits  Domain-Flux  to  get  a  list  of 
newly  compromised  authentic  servent  bots  which  have  been 
monitored by botmaster. This method not only makes botnet free 
of  bootstrap  failure  but  also  contributes 
the  balanced 
connectivity of servent bots. 
2.3  URL Flux-based C&C 
URL Flux. URL Flux doesn’t have to maintain domain names or 
publicly  accessible  servers,  consequently  providing  more 
robustness for C&C. The complete C&C procedure of URL Flux 
is shown in Figure 5. 
to 
Figure 5:  C&C procedure of URL Flux 
Recovery  as  bootstrap.  To  avoid  single-point-of-failure,  Hybot 
doesn’t  hard-code  any  initial  servent  peers,  in  other  words,  its 
routing  table  is  empty  initially.  Therefore,  HPCC  is  destined  to 
fail,  and  then  UFCC  is  activated  to  obtain  the  initial  accessible 
peers  deployed  by  botmasters  in  advance.  Exploiting  RSA  and 
timestamps to authenticate commands, manipulating or replaying 
commands is impossible. 
8343.  PRELIMINARY RESULTS 
Since  the  performance  of  HPCC  and  the  robustness  of 
UFCC are not a major issue, Hybot’s recoverability mainly 
relies  on  HPCC’s  robustness  and  UFCC’s  performance, 
which  are  studied  below.  Although  theoretically  possible, 
the probability of both HPCC and UFCC fail at the same 
time is extremely low. 
Robustness of HPCC. Robustness is defined in this paper 
as  the  probability  that  a  botnet  remains  connected  after  a 
fraction of bots are removed. Presuming that the total size 
of  botnet  is  10000  and  25%  of  them  are  servents.    The 
simulation results, in Figure.6, show that even 80% nodes 
removed,  Hybot  still  keeps  an  excellent  connectivity. 
Furthermore, Hybot could achieve a good robustness when 
the routing table size is between 30 and 40. 
Figure 6: Robustness of HPCC 
Performance  of  UFCC.  Hybot  spends  an  average  2.7 
seconds and costs 1.8KB to get a “tweet” from the tested 
Microblog. Since the authorized users are rare, Hybot will 
inescapably visit a large amount of inexistent users. Hybot 
spends  30.6  seconds  and  consumes  12.8KB  to  locate  the 
correct  JPG  URL  in  the  case  of  only  5%  users  in  UGA 
namespace  registered  [4],  making  recover  HPCC  rapidly 
possible. 
4.  REFERENCES 
[1]  P. Wang, S. Sparks et al. An advanced hybrid peer to peer 
botnet. In Proc. of the First Workshop on Hot Topics in 
Understanding Botnets (HotBots’07), 2007. 
[2]  R. Vogt, J. Aycock, and M. Jacobson. Army of botnets, In 
Proc. of 14th Annual Network and Distributed System 
Security Symposium (NDSS’07), 2007.  
[3]  G. Starnberger, C. Kruegel, and E. Kirda. Overbot - a botnet 
protocol based on kademlia, In Proc. of the 4th Int. Conf. on 
Security and Privacy in Communication Networks 
(SecureComm’08), 2008. 
[4]  Cui Xiang, Fang Binxing, Yin Lihua, Liu Xiaoyi. Andbot: 
Towards Advanced Mobile Botnets. In Proc. of the 4th 
Usenix Workshop on Large-scale Exploits and Emergent 
Threats (LEET ’11). 2011.
835