12 GNC
TRAP15|0 0 16 GND
RESET15
00
14 GNC
N/C17
16 GND
N/C19| 0 = 20 GND
18 GNC
图13-25常见JTAG接头引脚分布
如果连这样的受控环境都存在多种可能，那么面对真实世界中各种各样的设备，应该怎么办？
谢天谢地的是，前面介绍过，在TAGSWD上执行简单的调试功能只需要其中少数儿根引
脚就够了。重复一下，这些引脚是：
口TDO：测试数据输出
口TDI：测试数据输人
TMS：测试模式选择
TCK：测试时钟
TRST：测试重置
实际上，连TRST都是可选的，只用来重置目标设备。
面对新设备，要从一大片没有任何标记的引脚中找出需要的那些，几乎就是一个纯靠猜测的
游戏。寻找时钟引脚时还有一些启发式的逆向工程方法可以用—前面介绍过，规律性的方波说
明这是TCK引脚；但如果纯手动地去做，整个过程会非常消耗时间，可能需要几天甚至几周，
原因是要会试的可能组合太多了。
幸运的是，不久前，黑客、逆向工程师兼开发者JoeGrand创造了一种名为JTAGulator的开
源硬件设备。通过它，逆向工程师可以轻松遍历所有可能的引脚组合，从面暴力破解出JTAG引
脚分布。如果想自己做出这块设备，电路图、物料清单（BOM）和固件都在JoeGrand的网站上
以供下载：www.grandideastudio.com/portfoliojtagulator。也可以在Parallax网站直接购买一个完
全装好的 JTAGulator:www.parallax.com/product/32115，如图 13-26所示。
有了JTAGulator，首先将所有存疑的引脚接到JTAGulator的末端或者接头上，并将目标设备
上至少一根地线引脚接到JTAGulator的GND上。JTAGulator是由USB供电的，用各类标准终端
程序（比如 PuTTY、GNU Screen或者Minicom）能直接连接。
[s7ephenlxip ~]s 1s /dev/*seria1*
/dev/cu.usbserial-A901kKiM
[s7ephenexip -]$ screen /dev/tty-usbserial-A901kKFM 115200
/dev/tty-usbserial-A901KKFM
连接到设备后，可以看到一个非常友好的交互式命令行界面，显示了设备作者和固件版本：
Designed by Joe Grand [PI:EMAIL]
JTAGulator 1.1
---
## Page 367
13.1设备的硬件接口
351
,2
JTAG Commands:
Identify JTAG pinout
Identify JTAG pinout (IDcoDE Scan)
(BYPASS Scan)
D
Get Device ID(s)
T
UART Comwands1
口
UART pass through
Identify UART pinout
General Commands:
Read al1 channels (input)
Set target system vo1tage (1.2V to 3.3v)
R
W
Write al1 ehannels (output)
H
Print available cormands
输入保护电路
目标接口 (24路)
电平转换器
状态指示灯
1
螺旋奖芯片
运算放大器/
数模转换器
USB
图 13-26JTAGulator
按H键可以显示交互式帮助。
注意自国件版本1.1起，JTAGulator就不直接响应按键了。如果使用的是这些版本，需要在终
端程序中打开Local Echo功能。
Joe Grand在他的网站上发布了使用JTAGulator暴力破解黑莓7290手机JTAG引脚分布的视
频和文档。当然，任何设备的JTAG引脚都可以用JTAGulator确定。我们选择基于Android的
---
## Page 368
352第13章硬件层的政击
HTC Dream 手机和 Luminary Micro 的LM3S8962评估板进行演示。HTC Dream 手机的 JTAG引
脚非常难以接上，因此我们从一家名为Multi-COM的波兰公司购买了一个特殊的适配器。该公
司专门生产各类用于手机的调试电缆、适配器和其他底层设备。将目标设备上所有不确定的引脚
都接上JTAGulator之后，选择与目标设备一致的电压用于JTAG引脚的操作。可以猜测这个电压
值，也可以从目标处理器的规格说明中查到。绝大部分芯片的标准电压值是3.3伏。可以用v命
令来设置这个参数：
Bnter nev target voltage (1.2 - 3.3, 0 for off) : 3.3
New target voltage set1
完成这一步之后，最快的方法是先做一次IDCODE扫描，执行BYPASS（边界检查）扫描稍
慢一些。IDCODE扫描是JTAGSWD标准的一部分，用于JTAG从设备（这里是目标设备/处理
器）向JTAG主设备（这里是JTAGulator）表明身份。
TAGulator会快速遍历所有可能的引脚组合并执行这个基本通信。如果它收到一个响应，就
会记录该响应是哪个引脚配置产生的，由此可以确定哪些引脚是用于JTAG的。
在HTCDream上，通过I命令来执行IDCODE扫描，此时需要告诉JTAGulator哪些引脚是
我们所怀疑的JTAG引脚：
Enter number of channels to use (3 - 24): 19
Ensure connections are on CH19..CH0.
JTAGulating! Press any key to abort...
Press spacebar to begin (any other key to abort) ...
TDI: N/A
TCK: 7
TDO: 4
S1SHL
IDcopB 8can complete1
命令开始执行后，JTAGulator会显示它尝试暴力破解的所有可能引脚分布组合的数目。它几
乎在一瞬间就得到了响应，并识别出是哪个引脚配置产生了IDCODE扫描响应。现在，可以用
J-Link或者其他JTAG调试器连接这些有响应的引脚，然后开始调试目标设备！
5.连接到定制的UART接口
许多手机（包括Android设备）都以某种形式暴露了UART接口，可以通过非标准的线缆来
访问。这种线缆一般被称为夹具（jig）这个名字来源于金属和木头加工，指一个自定制的工具，
用于辅助完成工作。在XDA-Developers 论坛可以找到包括GalaxyNexus在内的许多三星设备的
*具倍.B: http://forum.xda-developers.com/showthread.php?t1402286在 http://blog.accuvantliabs.com/
blogjdryan/building-nexus-4-uart-debug-cable，还可以找到为Nexus4手机制作基于耳机插孔UART
线的教程。可以通过这些定制的线来访问UART接口，用于实现第10章介绍的交互式内核调试。
---
## Page 369
13.2识别组件
353
13.2识别组件
前面提到，可以从目标处理器与目标设备的规格说明书中获得信息，但是没有讲如何获得这
些规格书。事实上，几乎所有集成电路芯片的表面都印有字母和数字组成的字符串。如果对此感
兴趣，可以在网上找到许多关于这些字符串编码格式的说明，其中夹杂着各种令人头痛的细节。
作为逆向工程师或者漏洞研究人员，最重要的是通过搜索引擎确定这块芯片的作用。
在网上搜索组件时，通常会找到其制造商的官网或者大型经销商（比如 DigiKey和Mouser
Electronics）的数据手册。经销商的网站相当有用，通常会对组件及其用途进行总结，还会提供
所销售产品的数据手册。
13.2.1获得规格说明书
对组件的一般性描述可以用于快速判断它们在PCB板上的用途，但有时候还需要更多的信
息，比如一些重要引脚的位置。举个例子，许多PCB板出于调试的目的会将IC的引脚与一个孔
相连，这种孔叫作测试点。
一般来说，测试点就是PCB板上的小孔，工程师可以访问到与它相连的线。测试点或测试
焊点是将连线暴露出来的最常见方式，不过与板上突出的引脚接头相比还是不太方便。前面的例
子都是通过这些突出的接头来连接PCB上未知的引I脚。硬件黑客Travis Goodspeed发明了一种新
奇的引脚连接技术一使用皮下注射器：因为注射器由尖锐的导电金属（针头）和容易操作的手
柄（活塞部分）组成。图13-27展示了这个技术
度下注射器
15466
测试点形态的SPI数据引期
图13-27Goodspeed的针头技术
---
## Page 370
354
第13章硬件层的攻击
基于这种技术，就能精确地接触测试焊点或测试点。可以将探头或者设备夹到针头的金属部
分上，面不用笨拙地焊接测试点。要知道，这些测试点要么挨得太近，要么难以触及。
识别出处理器或者集成电路周围的测试点是一个良好的开端。接下来追溯这些点所连接的集
成电路引脚时，还需要了解芯片引脚的用途。找到集成电路的规格说明书对于识别引脚很有帮助。
在规格说明书中，一般会有一张基本的芯片引脚分布图。如果没有这张图，集成电路上一般
也会有标识凹口或者切角，用于判断哪根引脚是1号引脚，哪根是0号引脚。图13-28给出了一
些不同的例子。
切角
目点
切角
14 13 121011 9 8
1 44
0.0.0.00.0.0
_39
WAYUP
1 2 3 4. 5 6 7
PLCC
DIL
PQFPMQFP
33
33
均为施视图
图13-28寻找1号引脚
13.2.2难以识别的组件
有些时候，识别PCB板上的某个组件十分困难。厂商可能会用环氧树脂覆盖芯片，或是去
掉丝网印刷表面的文字。还有极少数时候，有的厂商（尤其是CPU和微处理器厂商）会在集成电
路上印上“SECRET”（秘密）或者项目代号。幸好，这样的情况在消费类电子产品中非常少见。
堆叠式封装
一种常见的混淆保护机制是业界所谓的堆叠式封装结构（PackageonPackage，PoP）。制造
商经常使用这种技术，将多个组件像三明治一样叠起来，以节省有限的PCB空间。以前，PCB
上的组件紧挨在处理器旁边，用线相连：现在，制造商会将组件垂直地放在CPU的上面，然后
打包出售，面设备厂商可以以不同配置分别购买。图13-29是该结构的图例。
根据我们的经验，最常见的情况是用这种方法将微处理器和内存封装在一起。有的厂商会使
用PoP结构，而不是使一堆闪存水平地分布在CPU旁边。此时，唯一能看到的是处理器上的闪
存序列号。在网上搜该序列号无法得到处理器规格书。
这种情况下的做法取决于设备的具体情况：有时，可见的组件和底下隐藏的组件是由同一个
制造商生产的；有时，顶层组件的规格书会写清楚它支持哪些封装设备。总之没有统一的解决方
法，需要一些调查工作才能确定下面隐藏设备的名字。还有时候甚至能找到一些第三方信息
有些技术狂热爱好者会对消费级设备进行拆解，从面获得各类细节。
---
## Page 371
13.3栏截、监听和劫持数据
355
内存
SORAM
图13-29雅叠式封装
13.3拦截、监听和劫持数据
无论对于软件还是硬件，漏洞研究的一个重要话题都是在其正常运转的情况下拦截和观察数