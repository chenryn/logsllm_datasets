2.3 Subjects
Traditional access control models characterize sub-
jects by means of their identities, which are used as a
basis for specifying access restrictions. However, often
the decision of whether some data may or may not be
released does not depend only on the requester but also
on what she intends to do with the data being requested.
Use-based access restrictions are seldom supported in
current access control systems; still, they appear to be
one of the requirements that should be addressed in data
dissemination [13]. By analyzing current practices at the
data publishers consulted, we have identiﬁed two dif-
ferent ways in which the use can be deﬁned: purpose
and project. A purpose represents the reason for which
data are being requested and will be used; statisti-
cal, educational, and scientific are examples
of purposes. A project is a named activity registered at
the server that may have one or more purposes and for
which different users can be subscribed. For instance, a
ﬁnancial agency involved in a consultancy project for a
customer can register the project to the archive so that all
its employees working on it can enjoy their employer’s
privileges for accessing data.
Consequently, in our model, each subject submitting
access requests to the data publisher is characterized
by a triple of the form (cid:3)userid,purpose,project(cid:4),
where userid is the login with which the user has con-
nected to the system, purpose and/or project are
the reasons for which the speciﬁc access is requested,
that is, the intended use of the data. Note that one or
more elements within the subject triple may remain un-
speciﬁed, denoted “ ”. This may happen, for example, in
the case of requests from anonymous users or for which
the user does not specify the intended use (in terms of
project or purpose) of the data requested.
triple,
Access
requests are then characterized by a
subject
the action requested, and the ob-
ject on which the action is requested. For instance,
(cid:3)john.doe,commercial,TokyoStockExchange(cid:4),
download,dataset1 deﬁnes a request by user
john.doe to download dataset1 for commer-
cial purposes within the TokyoStockExchange
project.
To ease the speciﬁcation and management of access
restrictions, our model supports the deﬁnition of ab-
stractions within the domains of users, projects, as well
as purposes. Intuitively, abstractions allow the group-
ing of entities with common characteristics (e.g., all the
projects registered by a given organization or all the
projects with commercial goals) and the reference to the
whole group with a name. With reference to the user
domain, abstractions allow the deﬁnition of groups, rep-
resenting named sets of users, as usually supported in
current access control systems [5, 9]. At a very high
level, groups can distinguish the different communi-
ties of users who may need access to a data archive,
such as: academic community, policy making commu-
nity, mass media community, and commercial commu-
nity. Specializing these communities, we can obtain
ﬁner grained or orthogonal classiﬁcations of the users.
Users together with their groups, projects together with
their categories, and purposes with their abstractions de-
ﬁne a partial order on the three domains (users, projects,
and purposes). Such a partial order introduces a hierar-
chy [9], which is essentially an acyclic graph, on each
domain. Figure 3 illustrates an example of user-group
(UGH), project (PRH), and purpose (PUH) hierarchies,
respectively. Again, for the sake of simplicity, leaf nodes
(corresponding to individual users, projects, and pur-
poses) are omitted. As we shall see in the sequel, au-
thorization subjects are triples on the Cartesian product
of the sets in the three hierarchies. This permits, for ex-
ample, to state that a group of users can access a dataset
for a speciﬁc purpose, or that a single user can access a
dataset for a set of purposes.
In our system, a server recognizes only locally reg-
istered users and projects. Each user and project is as-
signed an unique identiﬁer that allows the server to re-
fer to the user (project, resp.). Besides their identiﬁers,
users and projects registered at the server usually have
other properties associated with them. For instance, a
user may have properties such as name, address, and
occupation; a project may have properties such as ti-
tle, abstract, and sponsor. To capture these properties
Users
Projects
Purposes
Academic-Community
Commercial-Community
Academic Commercial
Scientific Educational Commercial
Faculty-Community
Student-Community
NonProfit
Statistical
Research
UGH
PRH
PUH
Figure 3. An example of user-group (UGH), project (PRH), and purpose (PUH) hierarchies
we assume each user and project is associated with a
proﬁle [2]. Intuitively, proﬁles are to users and projects
what metadata are to datasets. Proﬁles can be modeled
as semi-structured documents (XML or RDF like [1]).
Proﬁles results very convenient for the support of ac-
cess restrictions based on properties the requester en-
joys which cannot be represented through user groups
because of manageability, or because of their dynamic
nature.
3 Access control language
We now illustrate the access control rules by which
data publishers can specify access regulations to be en-
forced on the data. We start by introducing the compo-
nents of the rules. We then give their syntax, in XML
format, and their semantics.
3.1 Components of the access control rules
control
rules
the
Access
permis-
sions/restrictions to be enforced. Rules, whose format
and semantics will be discussed in the next section, are
speciﬁed by deﬁning the following components:
specify
(cid:2) subject expression deﬁnes the set of subjects to
which the rule applies (i.e., whose requests are reg-
ulated by the rule);
(cid:2) object expression deﬁnes the set of objects to which
the rule applies (i.e., requests to access which are
regulated by the rule)
(cid:2) action deﬁnes the actions to which the rule applies
(with the other two components it completely char-
acterizes the requests to which the rule applies)
(cid:2) condition deﬁnes conditions imposed by the rule
for the access (and whose satisfaction - or lack of -
can imply granting or denying of the requests, de-
pending on the kind of rules)
The action ﬁeld in a rule simply speciﬁes the name of
an operation or of an abstraction thereof (where rules
speciﬁed on an abstraction apply to all actions in it).
Subjects and objects can also be speciﬁed simply by
stating an identiﬁer, specifying a given elementary en-
tity in the corresponding domain, or a named abstrac-
tion of entities. Moreover, to provide expressiveness and
ﬂexibility, our language also allows the speciﬁcation of
subjects and objects through expressions, where each
expression identiﬁes a set of subjects (objects, resp.)
that satisfy speciﬁc properties. Expressions can make
use of the reserved identiﬁers user, project, purpose,
dataset, and metadata to refer to the user, project, pur-
pose, dataset, and metadata, respectively. The use of re-
served identiﬁers gives our language the expressiveness
we look for without the need of introducing variables
in the authorization language [9]. More precisely, the
appearance on one of such identiﬁers (e.g., purpose) in
an expression is bounded with the actual parameters of
the request (e.g., the purpose speciﬁed by the user re-
questing access) in the evaluation at access control time.
Object and subject expressions are characterized as il-
lustrated in the following.
3.1.1 Object expressions
An object expression identiﬁes the set of objects to
which the rule applies and has the form:
(cid:1)objexpr(cid:2)
(cid:1)objid id="object-id"/(cid:2)
(cid:1)WITH(cid:2) (cid:1)condition(cid:2) cond-expr (cid:1)/condition(cid:2) (cid:1)/WITH(cid:2)
(cid:1)/objexpr(cid:2)
where object-id is either the identiﬁer of a dataset (or
group of datasets) or the identiﬁer of a metadata doc-
ument (or group of them) with possibly associated an
XPath expression identifying portions of the document;
cond-expr is a boolean formula of conditions that can
evaluate membership of the object in groups or values
of properties on metadata. Conditional expressions on
metadata make it possible to deﬁne access rules applica-
ble only to datasets whose metadata satisfy some condi-
tions. Element WITH is optional and can be omitted. As
an example, consider the following object expression.
(cid:1)objexpr(cid:2)
(cid:1)objid id="NationalSurvey"/(cid:2)
(cid:1)WITH(cid:2)
(cid:1)condition(cid:2)
META(dataset)/producer=StatisticalNationalAgency
(cid:1)/condition(cid:2)
(cid:1)/WITH(cid:2)
(cid:1)/objexpr(cid:2)
It denotes all datasets in the NationalSurvey group
that are produced by “Statistical National Agency”
(producer is a meta-property). Given the richness of
the metadata usually supported, this can provides a pow-
erful and convenient way to specify access rules [7]. For
instance, it allows the enforcement of embargo restric-
tions, where only datasets collected before a given year
can be released (a restriction that can be imposed via a
simple condition on the metadata).
of the request. Dynamic conditions require attachment
to procedural calls that execute the necessary actions to
bring the condition to satisfaction. Those conditions are
usually related to agreement acceptance (which can be
as simple as clicking an ‘ok’ button on a pop up win-
dow), payment fulﬁllment, registration, or form ﬁlling
and are represented by non-arithmetic predicates, called
dynamic predicates. Examples of dynamic predicates
are illustrated in Figure 4.
3.1.2 Subject expressions
3.2 Semantics and format of the rules
A subject expression identiﬁes a set of subjects depend-
ing on whether they satisfy or not certain conditions. It
has the form:
(cid:1)sbjexpr(cid:2)
(cid:1)userid id="user-id"/(cid:2)
(cid:1)OF PROJECTS id="project-id"/(cid:2)
(cid:1)FOR PURPOSES id="purpose-id"/(cid:2)
(cid:1)WITH(cid:2) (cid:1)condition(cid:2) cond-expr (cid:1)/condition(cid:2) (cid:1)/WITH(cid:2)
(cid:1)/sbjexpr(cid:2)
where user-id, project-id, and purpose-id are the user,
project, and purpose identiﬁers, respectively, and cond-
expr is a boolean formula of terms that can evaluate the
user’s proﬁle, or the project’s proﬁle. Conditional ex-
pressions can make reference to user, project, and pur-
pose involved in the current request by means of the re-
served identiﬁers user, project, and purpose, respec-
tively. Elements OF PROJECTS, FOR PURPOSES, and
WITH are optional and can be omitted. For instance,
subject expression
(cid:1)sbjexpr(cid:2)
(cid:1)userid id="Academic-Community"/(cid:2)
(cid:1)FOR PURPOSES id="Scientific"/(cid:2)
(cid:1)WITH(cid:2)
(cid:1)condition(cid:2) project/sponsor=EC (cid:1)/condition(cid:2)
(cid:1)/WITH(cid:2)
(cid:1)/sbjexpr(cid:2)
characterizes users belonging to group Academic-
Community that intend to use the data for scientiﬁc
purposes within an EC funded project.
3.1.3 Conditions
Besides subjects, objects, and actions, access control
rules can specify conditions deﬁning constraints that the
rule requires be satisﬁed for the request to be granted.
A condition is simply speciﬁed as an element condi-
tion whose textual content can include two kinds of
conditions: static and dynamic. Static conditions eval-
uate membership of subjects and objects into classes
or properties in their proﬁles and associated metadata.
These are conditions similar to those appearing in sub-
ject and object conditional expressions, but which may
need to be stated separately (as it will be clear in the next
subsection). Dynamic conditions are constraints that
can be brought to satisfactions at run-time processing
Having illustrated the different components of the
rules, we now illustate the rule syntax and semantics.
Our model supports two different types of access control
rules: authorizations and restrictions. An authorization
speciﬁes a permission for the access and is of the form:
(cid:1)authorization(cid:2)
(cid:1)sbjexpr(cid:2) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:1)/sbjexpr(cid:2)
(cid:1)CAN/(cid:2)
(cid:1)action type="action"/(cid:2)
(cid:1)objexpr(cid:2) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:1)/objexpr(cid:2)
(cid:1)IF(cid:2) (cid:1)condition(cid:2) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:1)/condition(cid:2) (cid:1)/IF(cid:2)
(cid:1)/authorization(cid:2)
where elements sbjexpr, action, and objexpr
identify the requests to which the authorization applies,
and IF is an optional element that includes a boolean
expression of conditions (element condition) whose
satisfaction authorizes the access. Usually, the condi-
tional part of authorizations contains only dynamic con-
ditions (static conditions can be included in the expres-
sions specifying the subjects and object for the rule). An
access request is considered to be authorized if at least
one of the authorizations that applies to the request is
satisﬁed.
A restriction speciﬁes requirements that must be sat-
isﬁed for an access to be granted and is of the form:
(cid:1)restriction(cid:2)
(cid:1)sbjexpr(cid:2) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:1)/sbjexpr(cid:2)
(cid:1)CAN/(cid:2)
(cid:1)action type="action"/(cid:2)
(cid:1)objexpr(cid:2) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:1)/objexpr(cid:2)
(cid:1)ONLY IF(cid:2) (cid:1)condition(cid:2)(cid:3) (cid:3) (cid:3)(cid:1)/condition(cid:2) (cid:1)/ONLY IF(cid:2)
(cid:1)/restriction(cid:2)
where elements sbjexpr, action, and objexpr
identify the requests to which the restriction applies,
and ONLY IF is an element that includes a boolean ex-
pression of conditions (element condition) that ev-
ery request to which the restriction applies must sat-
isfy. Lack by failure implies that the request will be
denied. Element condition can contain both static
and dynamic conditions. Unlike for authorizations, in
fact static conditions cannot be all incorporated in the
subject and object expressions of the rules as this would
change the semantics of the restrictions. While static
conditions appearing in the condition element im-
pose constraints that if not satisﬁed imply that the access
agreement(id,(cid:1))
payment(id(cid:1),id(cid:2))
register user(id)
register project(id)
ﬁll in form(id,form)
checks if user id has accepted agreement (cid:1), and if not presents the user with the agreement. It returns
true if the agreement has been accepted.
checks if user id(cid:1) has paid to access object id(cid:2), and if not starts the payment procedure for the user.
It returns true if the user had paid or the payment procedure completes successfully.
check if project id is registered, and if not starts the registration procedure for the user. It returns true
if the user was registered or the registration has been successfully completed.
check if project id is registered, and if not starts the registration procedure for the project. It returns
true if the project was registered or the registration has been successfully completed.
checks if user id has ﬁlled in form form, and if not presents it to the user. It returns true if the user
has ﬁlled the form.
Figure 4. Predicates for dynamic conditions
should be denied, static conditions in the WITH element
child of element sbjexpr (objexpr, resp.) simply
limit the requests to which the restriction is applica-
ble. As an example, notice the difference between state-
ments like “Users can access data1 only if they are non-
commercial and sign an agreement” and “Users who are
non-commercial can access data1 only if they sign an
agreement”. While the ﬁrst rule prohibits access to com-
mercial users, the second rule does not.
Intuitively, authorizations correspond to traditional
(positive) rules usually enforced in access control sys-
tems [11]. If multiple authorizations are applicable to a
given access request, the request can be granted only if
the conditions in at least one authorization are satisﬁed.
Therefore, lack by failure simply makes the authoriza-
tion ineffective; but it does not imply that the access will
be denied. Intuitively, this means that different autho-
rizations are considered as combined in OR.
The only support of authorizations (traditional open pol-