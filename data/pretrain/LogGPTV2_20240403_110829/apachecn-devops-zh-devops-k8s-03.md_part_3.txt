```
// get current running pod
# kubectl get pods
NAME          READY     STATUS    RESTARTS   AGE
nginx-r3bg6   1/1       Running   0          11s
nginx-sj2f0   1/1       Running   0          11s  
```
它显示我们有两个 Pod 运行。如前所述，复制控制器管理所有与选择器匹配的 PODS。如果我们手动创建一个具有相同标签的 pod，理论上，它应该与我们刚刚创建的 RC 的 pod 选择器相匹配。让我们试一试:
```
// manually create a pod with same labels
# cat 3-2-2_rc_self_created_pod.yaml
apiVersion: v1
kind: Pod
metadata:
 name: our-nginx
 labels:
 project: chapter3
 service: web
 version: "0.1"
spec:
 containers:
 - name: nginx
 image: nginx
 ports:
 - containerPort: 80
// create a pod with same labels manually
# kubectl create -f 3-2-2_rc_self_created_pod.yaml 
pod "our-nginx" created  
```
让我们看看它是否启动并运行:
```
// get pod status
# kubectl get pods
NAME          READY     STATUS        RESTARTS   AGE
nginx-r3bg6   1/1       Running       0          4m
nginx-sj2f0   1/1       Running       0          4m
our-nginx     0/1       Terminating   0          4s  
```
它是预定的，复制控制器捕捉到它。PODS 的数量变成了三个，超过了我们想要的数量。PODS 最终被杀死:
```
// get pod status
# kubectl get pods
NAME          READY     STATUS    RESTARTS   AGE
nginx-r3bg6   1/1       Running   0          5m
nginx-sj2f0   1/1       Running   0          5m  
```
![](img/00038.jpeg)
ReplicationController makes sure pods are in desired state
如果我们想按需扩展，我们可以简单地使用`kubectl edit  `来更新规格。这里我们将副本数量从`2`更改为`5`:
```
// change replica count from 2 to 5, default system editor will pop out. Change `replicas` number
# kubectl edit rc nginx
replicationcontroller "nginx" edited  
```
让我们检查钢筋混凝土信息:
```
// get rc information
# kubectl get rc
NAME      DESIRED   CURRENT   READY     AGE
nginx     5         5         5         5m      
```
我们现在有五个 Pod 。让我们来看看 RC 是如何工作的:
```
// describe RC resource `nginx`
# kubectl describe rc nginx
Name:    nginx
Namespace:  default
Selector:  project=chapter3,service=web,version=0.1
Labels:    project=chapter3
 service=web
 version=0.1
Annotations:  
Replicas:  5 current / 5 desired
Pods Status:  5 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
 Labels:  project=chapter3
 service=web
 version=0.1
 Containers:
 nginx:
 Image:    nginx
 Port:    80/TCP
 Environment:  
 Mounts:    
 Volumes:    
Events:
 FirstSeen  LastSeen  Count  From      SubObjectPath  Type      
  Reason      Message
---------  --------  -----  ----      -------------  --------  ------      -------
34s    34s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-r3bg6 
34s    34s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-sj2f0 
20s    20s    1  replication-controller      Normal    SuccessfulDelete  Deleted pod: our-nginx
15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-nlx3v
15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-rqt58
15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-qb3mr  
```
通过描述命令；我们可以了解 RC 的规格，也可以了解事件。在我们创建`nginx` RC 的时候，它按照规格推出了两个容器。然后我们根据另一个规范手动创建了另一个 Pod ，命名为`our-nginx`。RC 检测到 pod 与其 pod 选择器相匹配。然后数量超过了我们期望的数量，所以它驱逐了它。然后我们将复制品缩小到五个。RC 检测到它没有达到我们想要的状态，发射了三个 Pod 来填补空白。
如果我们想删除一个钢筋混凝土，只需使用`kubectl delete  `的`kubectl`命令。由于我们手头有一个配置文件，我们还可以使用`kubectl delete -f `删除文件中列出的资源:
```
// delete a rc
# kubectl delete rc nginx
replicationcontroller "nginx" deleted
// get pod status
# kubectl get pods
NAME          READY     STATUS        RESTARTS   AGE
nginx-r3bg6   0/1       Terminating   0          29m  
```
同样的概念也被带到了副本集。以下是`3-2-2.rc.yaml`的 RS 版本。两个主要区别是:
*   `apiVersion`是写作时的`extensions/v1beta1`
*   选择器需求被更改为基于集合的需求，使用`matchLabels`和`matchExpressions`语法
在前面的例子中遵循相同的步骤应该在 RC 和 RS 之间完全相同。这只是一个例子；但是，我们不应该自己创建 RS，而应该始终由 Kubernetes `deployment`对象管理。我们将在下一部分了解更多信息:
```
// RS version of 3-2-2_rc.yaml 
# cat 3-2-2_rs.yaml
apiVersion: extensions/v1beta1
kind: ReplicaSet
metadata:
 name: nginx
spec:
 replicas: 2
 selector:
 matchLabels:
 project: chapter3
 matchExpressions:
 - {key: version, operator: In, values: ["0.1", "0.2"]}
   template:
     metadata:
       name: nginx
        labels:
         project: chapter3
         service: web
         version: "0.1"
     spec:
       containers:
        - name: nginx
          image: nginx
          ports:
         - containerPort: 80
```
# 部署
在 1.2 版之后，部署是在 Kubernetes 中管理和部署我们的软件的最佳基础。它支持优雅地部署、滚动更新和回滚 pod 和 ReplicaSets。我们通过声明式的部署来定义我们想要的软件更新，然后部署将逐步为我们完成。
Before deployment, ReplicationController and kubectl rolling-update were the major way to implement rolling-update for the software, which is more imperative and slower. Deployment now becomes the major high-level object to manage our application.
让我们看一看它是如何工作的。在本节中，我们将了解如何创建部署，如何执行滚动更新和回滚。[第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)、*持续交付*有更多关于我们如何将部署集成到我们的持续交付管道中的信息和实例。
首先，我们可以使用`kubectl run`命令为我们创建一个`deployment`:
```
// using kubectl run to launch the Pods
# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80
deployment "nginx" created
// check the deployment status
# kubectl get deployments
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx     2         2         2            2           4h  
```
Before Kubernetes 1.2, the `kubectl run` command would create pods instead.
通过部署部署了两个 Pod :
```
// check if pods match our desired count
# kubectl get pods
NAME                     READY     STATUS        RESTARTS   AGE
nginx-2371676037-2brn5   1/1       Running       0          4h
nginx-2371676037-gjfhp   1/1       Running       0          4h  
```
![](img/00039.jpeg)
The relationship in deployments, ReplicaSets, and pods
如果我们删除其中一个 Pod ，被替换的 Pod 将被安排并立即启动。这是因为部署会在幕后创建一个副本集，这将确保副本的数量与我们期望的数量相匹配。通常，部署管理复制集，复制集管理单元。请注意，我们不应该手动操作部署管理的复制集，就像如果它们由复制集管理，那么直接更改 pods 是没有意义的:
```
// list replica sets
# kubectl get rs
NAME               DESIRED   CURRENT   READY     AGE
nginx-2371676037   2         2         2         4h      
```
我们也可以通过`kubectl`命令公开端口进行部署:
```
// expose port 80 to service port 80
# kubectl expose deployment nginx --port=80 --target-port=80
service "nginx" exposed
// list services
# kubectl get services
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   10.0.0.1             443/TCP   3d
nginx        10.0.0.94            80/TCP    5s  
```
部署也可以通过规范来创建。kubectl 以前启动的部署和服务可以转换为以下规范:
```
// create deployments by spec
# cat 3-2-3_deployments.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
 name: nginx
spec:
 replicas: 2
 template:
 metadata:
 labels:
 run: nginx
 spec:
 containers:
 - name: nginx
 image: nginx:1.12.0
 ports:
 - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
 name: nginx
 labels:
 run: nginx
spec:
 selector:
 run: nginx
 ports:
 - protocol: TCP
 port: 80
 targetPort: 80
 name: http
// create deployments and service
# kubectl create -f 3-2-3_deployments.yaml
deployment "nginx" created
service "nginx" created  
```
为了执行滚动更新，我们必须添加滚动更新策略。有三个参数用于控制过程:
| **参数** | **描述** | **默认值** |
| `minReadySeconds` | 热身时间。新创建的 pod 被认为可用的时间。默认情况下，Kubernetes 假设应用一旦成功启动就可用。 | Zero |
| `maxSurge` | 做滚动更新过程中可以激增多少荚。 | 25% |
| `maxUnavailable` | 进行滚动更新过程时，有多少 Pod 不可用。 | 25% |
`minReadySecond`是一个重要的设定。如果我们的应用在 Pod 启动时不能立即使用，Pod 在没有适当等待的情况下滚动得太快。虽然所有新的 Pod 都已启动，但应用可能仍在预热；可能会发生服务中断。在下面的例子中，我们将配置添加到`Deployment.spec`部分:
```
// add to Deployments.spec, save as 3-2-3_deployments_rollingupdate.yaml
minReadySeconds: 3 
strategy:
 type: RollingUpdate
 rollingUpdate:
 maxSurge: 1
 maxUnavailable: 1  
```
这表明我们允许一个 Pod 一次不可用，并且在滚动 Pod 时可以再启动一个 Pod 。进行下一步操作前的预热时间为三秒。我们可以使用`kubectl edit deployments nginx`(直接编辑)或`kubectl replace -f 3-2-3_deployments_rollingupdate.yaml`更新策略。
假设我们想要模拟新软件的推出，从 nginx 1.12.0 到 1.13.1。我们仍然可以使用前面两个命令来更改映像版本，或者使用`kubectl set image deployment nginx nginx=nginx` `:1.13.1`来触发更新。如果我们使用`kubectl describe`来检查发生了什么，我们将看到部署通过删除/创建 Pod 触发了副本集的滚动更新:
```
// check detailed rs information
# kubectl describe rs nginx-2371676037 
Name:    nginx-2371676037 
Namespace:  default
Selector:  pod-template-hash=2371676037   ,run=nginx
Labels:    pod-template-hash=2371676037 
 run=nginx
Annotations:  deployment.kubernetes.io/desired-replicas=2
 deployment.kubernetes.io/max-replicas=3
 deployment.kubernetes.io/revision=4
 deployment.kubernetes.io/revision-history=2
Replicas:  2 current / 2 desired
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
 Labels:  pod-template-hash=2371676037 
 run=nginx
Containers:
nginx:
Image:    nginx:1.13.1
Port:    80/TCP
...
Events:
FirstSeen  LastSeen  Count  From      SubObjectPath  Type    Reason      Message
---------  --------  -----  ----      -------------  --------  ------      -------