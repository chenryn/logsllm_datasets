processes have a bounded effect on the allocation. Indeed, we
prove in Appendix D that our strongest definition of privacy,
IT-privacy (Def. 1), implies population monotonicity.
SRA and RRA are trivially strategy-proof for binary demands
since processes have only two choices—to request or not
request the resource—and they derive positive utility only
if: (a) they receive the resource; or (b) they deny some other
process the resource (in some applications). Condition (b) is
nullified by IT-Privacy: the existence of other processes has no
impact on whether a process receives a resource (if it did, an
adversary could exploit it to win the security game with non-
zero advantage). Furthermore, if the resource cannot be traded
(i.e., a process cannot give its resource to another process)
and demands are binary, IT-privacy implies group strategy-
proofness [12], which captures the notion of collusion between
processes (as otherwise a set of processes controlled by the
adversary could impact the allocation and violate privacy).
For non-binary demands, PRAs that meet our definition of
allocation probabilities being in proportion to demands are not
strategy-proof: processes have an incentive to request as many
units of a resource as possible regardless of how many units
they actually need. On the other hand, allocators that meet
the definition of allocation probability being independent of
demands are strategy-proof since the allocator assumes that all
processes have infinite demand anyway.
VI. BUILDING PRIVATE DIALING PROTOCOLS
In Section II we show that the composition of existing dialing
protocols with conversation protocols in MPM systems leaks
information. In this section we show how to incorporate the
PRAs from Section III into dialing protocols [6, 52, 57]. As an
example, we pick Alpenhorn [57] since it has a simple dialing
scheme, and describe the modifications that we make.
A. Alpenhorn’s dialing protocol
As we mention in Section II, a precondition for dialing is
that both parties, caller and callee, have a shared secret. We
do not discuss the specifics of how the secret is exchanged
since they are orthogonal (for simplicity, assume the secret is
exchanged out of band). Alpenhorn’s dialing protocol achieves
three goals. First, it synchronizes the state of users with the
current state of the system so that clients can dial their friends.
Second, it establishes an ephemeral key for a session so that
all data and metadata corresponding to that session enjoys
forward secrecy: if the key is compromised, the adversary
does not learn the content or metadata of prior sessions. Last,
it sets a round on which to start communication. The actual
communication happens via an MPM’s conversation protocol.
9
FIG. 4—Overview of Alpenhorn’s dialing protocol [57]. Clients
deposit dial tokens for their friends into an untrusted dialing service
in rounds, and download all dial tokens sent at the end of a round.
Clients then locally determine which tokens were meant for them.
To derive dial tokens for a particular friend and round, clients use a
per-friend data structure called a keywheel (see text for details).
We discuss how Alpenhorn achieves these goals, and
summarize the steps in Figure 4.
Synchronizing state. Similarly to how conversation protocols
operate in rounds (as we briefly discuss in Section II),
dialing protocols also operate in rounds. However, the two
types of rounds are quantitatively and qualitatively different.
Quantitatively, dialing happens less frequently (e.g., once per
minute) whereas conversations happen often (e.g., every ten
seconds). Qualitatively, a round of dialing precedes several
rounds of conversation, and compromised friends can only
make observations at the granularity of dialing rounds.
To be able to dial other users, clients need to know the
current dialing round. Clients can do this by asking the dialing
service (which is typically an untrusted server or a network of
mix servers) for the current round. While the dialing service
could lie, it would only result in denial of service which none
of these systems aims to prevent anyway.
In addition to the current dialing round, clients in Alpenhorn
maintain a keywheel for each of their friends. A keywheel is
a hash chain where the first node in the chain corresponds to
the initial secret shared between a pair of users (we depict this
as “S1” in Figure 4) anchored to some round. Once a dialing
round advances, the client hashes the current node to obtain
the next node, which gives the shared secret to be used in the
new round. The client discards prior nodes to ensure forward
secrecy in case of a device compromise.
Generating a dial request. To dial a friend, a client synchro-
nizes their keywheel to obtain the shared secret for the current
dialing round, and then applies a second hash function to the
shared secret. This yields a dialing token, which the client
sends to the dialing service. This token leaks no information
about who is being dialed except to a recipient who knows
the corresponding shared secret. To prevent traffic analysis
attacks, the client sends a dialing token every dialing round,
even when it has no intention to dial anyone (in such case the
client creates a dummy dial token by hashing random data).
Receiving calls. A client fetches from the dialing service all
of the tokens sent in a given dialing round by all users (this
leads to quadratic communication costs for the server which
Dialing service 1SynchronizeSend dial tokens2Get dial tokens3Round of a dial protocolS1S2S3S4Keywheel for friend iapply hash each roundis why dialing rounds happen infrequently)3. For each friend
f in a client’s list, the client synchronizes the keywheel for f ,
uses the second hash function to compute the expected dial
token, and looks to see if the corresponding value is one of the
tokens downloaded from the dialing service. If there is a match,
this signifies that f is interested in starting a conversation in
the next conversation round. To derive the session key for a
conversation with f , the client computes a third hash function
(different from the prior two) on the round secret.
Responding to a call. Observe that it is possible for a client
to receive many dial requests in the same dialing round. In
fact, a client can receive a dial request from every one of
their friends. The client is then responsible for picking which
of the calls to answer. A typical choice is to pick the first
k friends whose tokens matched, where k is the number of
channels of the conversation protocol (typically 1, though some
systems [8, 10] use larger values). Once the client chooses
which calls to answer, the client derives the appropriate session
keys and exchanges messages using the conversation protocol.
B. Incorporating private resource allocators
The allocation mechanism used by Alpenhorn to select which
calls to answer leaks information (it is the FIFO strawman of
Section III-B). We can instead replace it with a PRA like RRA
(§IV-B) to select which of the matching tokens (processes)
to allocate to the k channels of the conversation protocol
(resource). There is, however, one key issue with this proposal.
We are using the resource allocator only for the incoming calls.
But what about outgoing calls? Observe that each outgoing
call also consumes a communication channel. Specifically,
when a user dials another user, the caller commits to use the
conversation protocol for the next few conversation rounds
(until a new dial round). In contrast, the callee may choose
not accept the caller’s call. In other words, the caller uses up
a communication channel even if the recipient rejects the call.
Given the above, we study how outgoing calls impact the
allocation of channels for incoming calls.
Process outgoing calls first. We first consider an implemen-
tation in which the client subtracts each outgoing call from
the available channels (k) and then runs the PRA with the
remaining channels to select which incoming calls to answer.
This approach leaks information. The security game (§III)
chooses between two cases, one in which the adversary is
the only one dialing a user (P = Pmal), and one in which
honest users are also dialing the user (P = Pmal ∪ Phon). All
of our definitions of privacy require that the adversary cannot
distinguish between these two cases. However, with outgoing
calls there is another parameter that varies, namely the capacity
k; this variation is not captured by the security game.
To account for this additional variable, we ask whether an
adversary can distinguish the output of a resource allocator on
inputs P, k, λ (representing a universe in which the user is not
making any outgoing calls) and the output of the allocator on
3Alpenhorn reduces the constant terms using bloom filters [57].
10
inputs P, k′, λ, where k′ < k (representing a universe in which
the user is making at least one outgoing call). The answer is
yes. As a simple example, consider RRA (§IV-B). The output
from RRA(P, k = 1, λ) is very different from RRA(P, k = 0, λ)
when |Pmal| = βP and Phon = ∅. The former always outputs
one malicious process (since no padding is added and there are
no honest processes), whereas the latter never outputs anything.
Process incoming calls first. Another approach is to reverse
the order in which channels are allocated. To do so, one can
first run the resource allocator on the incoming calls, and then
use any remaining capacity for the outgoing calls. Since none
of our allocators achieve perfect utilization (Def. 4) anyway,
there is left over capacity for outgoing calls. This keeps k
constant, preventing the above attack.
While this approach preserves privacy and might be applica-
ble in other contexts, it cannot be applied to Alpenhorn. Recall
that users in Alpenhorn must send all of their dial tokens before
they receive a single incoming call (see Figure 4). Consequently,
the allocator cannot possibly execute before the user decides
which or how many outgoing dial requests to send.
Process calls independently. The above suggests that to
securely compose Alpenhorn with a conversation protocol
that operates in rounds (which is the case for existing MPM
systems), users should have dedicated channels. An implication
of this is that
the conversation protocol must, at a bare
minimum, support two concurrent communication channels.
We give a concrete proposal below.
We assume that each user has k = in+out available channels
for the conversation protocol, for some in, out ≥ 1. The in
channels are dedicated for incoming calls; the out channels
are for outgoing calls. When a user receives a set of incoming
dial requests, it uses a PRA and passes in as the capacity.
Independently, the user can send up to out outgoing dial
requests each round (of course the user always sends out dialing
tokens to preserve privacy, using dummies if necessary). This
simple scheme preserves privacy since the capacity used in the
PRA is independent of outgoing calls.
C. Improving the fit
The previous section discusses how to incorporate a PRA into
an existing dialing protocol. However, it introduces usability
issues (beyond the ones that commonly plague this space).
Conversations breaking up. Conversations often exhibit
inertia: when two users are actively exchanging messages, they
are more likely to continue to exchange messages in the near
future. Meanwhile, our modifications to Alpenhorn (§VI-B)
force clients to break up their existing conversations at the
start of every dialing round, which is abrupt.
The rationale for ending existing conversations for each new
dialing round is that our PRAs expect the capacity to remain
constant across rounds (so users need to free those channels).
Below we discuss ways to partially address this issue.
First, clients could use an allocator that has inertia built in.
For example, our slot-based resource allocator SRA (§IV-A)
does not need the integer r to be random or secret to guarantee
privacy. Consequently, if one sets r to be the current round,
SRA would assign k consecutive dialing rounds to the same
caller. This allows conversations to continue smoothly across
rounds. The drawback is that if a conversation ends quickly
(prior to the k rounds), the user is unable to allocate someone
else’s call to that channel for the remaining rounds.
Second, clients could transition a conversation that
is
consuming an incoming channel during one dial round to
a conversation that consumes an outgoing channel the next
dial round. Intuitively, this is the moral equivalent of both
clients calling each other during the new round. Mechanistically,
clients simply send dummy dial requests (they do not dial each
other) which forces an outgoing channel to be committed to a
dummy conversation. Clients then synchronize their keywheels
to the new dialing round, derive the session key, and hijack
the channel allocated to the dummy conversation.
Note that this transition can leak information. A compro-
mised friend who is engaged in a long-term conversation with
a target user could learn if the target has transitioned other
conversations from incoming to outgoing channels (or is dialing
other users) by observing whether a conversation ended abruptly
across dialing rounds. Ultimately, outgoing channels are a finite
resource and transitioning calls makes this resource observable
to an attacker. Nevertheless, this is not quite rearranging the
deck chairs on the Titanic; the requirements to conduct this
attack are high: the attacker needs to be in a conversation with
the target that spans multiple dialing rounds, and convince the
target to transition the conversation into an outgoing channel.
Lack of priorities. In many cases, users may want to prioritize
the calls of certain friends (e.g., close acquaintances over
someone the user met briefly during their travel abroad). This
is possible with the use of our weighted allocators (§V-A).
Users can give their close friends higher weights, and these
friends’ calls will be more likely to be accepted. A drawback
of this proposal is that callers can infer their assigned weight
based on how often their calls get through, which could lead
to awkward situations (e.g., a user’s parents may be sad to
learn that their child has assigned them a low priority!).
Lack of classes. Taking the idea of priorities a step further,
mobile carriers used to offer free text messaging within certain
groups (“family members” or “top friends”). We can generalize
the idea of incoming and outgoing channels to dedicate
channels to particular sets of users. For example, there could
be a family-incoming channel with its corresponding PRA.
This channel is used to chat with only family members, and
hence one can make strong assumptions about the bound on the
number of concurrent callers—allowing for better utilization.
VII. IMPLEMENTATION AND EVALUATION
We have implemented our allocators (including the weighted
variants of Section V-A) on top of Alpenhorn’s codebase [2] in
about 600 lines of Go, and also in a standalone library written
in Rust. In Alpenhorn, we modify the scanBloomFilter
function, which downloads a bloom filter representing the
dialing tokens from the dialing service. This function then
FIG. 5—Mean utilization of PRAs over 1M rounds as we vary βhon.
The error bars represent the standard deviation. We fix βM = 2, 000
and make βp = 10βhon (the assumption modeled here is that 10%
of the potential concurrent processes are honest). The number of
concurrent processes that request service in a given round follows a
Poisson distribution with a rate of 50 requests/round (but we bound
this by βP). SRA and RRA guarantee IT-Privacy, and DPRA ensures
(ε, δ)-differential privacy for ε = ln(2) and δ = 10−4.
tests, for each of a user’s friends, whether the friend sent a
dialing token. If so, it executes the client’s ReceivedCall
handler (a client-specific callback function that acts on the
call) with the appropriate session key. Our modification instead
collects all of the matching tokens, runs the PRA to select
at most k of these tokens, and then calls the ReceivedCall
handler with the corresponding session keys.
A. Evaluation questions
None of our allocators are expensive in terms of memory or
computation. Even when allocating resources to 1M processes,
their 95-percentile runtimes are 4.2µs, 10.8µs, and 6.9µs
for SRA, RRA, DPRA respectively. The real impact of these
allocators is the reduction in utilization (compared to a non-
private variant). We therefore focus on three main questions:
1) How does the utilization of different allocators compare
as their corresponding bounds vary?
2) What is the concrete tradeoff between utilization and
leakage for the differentially private allocator?
3) How much latency do allocators introduce before friends
can start a conversation in Alpenhorn?
We answer these questions in the context of the following
experimental setup. We perform all of our measurements on
Azure D3v2 instances (2.4 GHz Intel Xeon E5-2673 v3, 14
GB RAM) running Ubuntu Linux 18.04-LTS. We use Rust
version 1.41 with the criterion benchmarking library [3], and
Go version 1.12.5 for compiling and running Alpenhorn.
B. Utilization of different allocators
We start by asking how different allocators compare in
terms of utilization. Since the parameter space here is vast
and utilization depends on the particular choice of parameters,
we mostly highlight the general trends. We set the maximum
number of processes to βM = 2, 000, and assume that 10% of
processes requesting service at any given time are honest (i.e.,
βP = 10βhon). This setting is not unreasonable if we assume
that sybil attacks [30] are not possible. If, however, sybil
attacks are possible in the target application, then comparing
the utilization of our allocators is a moot point: only DPRA