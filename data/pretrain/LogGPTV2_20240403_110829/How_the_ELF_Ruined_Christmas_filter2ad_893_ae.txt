Leakless, but they all have drawbacks. In this sections we
analyze the most relevant ones.
Position Independent Executables. A quick counter-
measure is to make every executable on the system position
independent. While this would block Leakless’s automatic
operation (as discussed in Section 7.2), it would still al-
low the application of the Leakless technique when any
information disclosure does occur. For that reason, and the
performance overhead associated with PIE, we consider
the other countermeasures described in this section to be
better solutions to the problem.
Disabling lazy loading. When the LD BIND NOW envi-
ronment variable is set, the dynamic loader will completely
disable lazy loading. That is, all imports, for the program
binary and any library it depends on, are resolved upon
program startup. As a side-effect of this, the address of
dl runtime resolve does not get loaded into the GOT
of any library, and Leakless cannot function. This is
equivalent to enable full RELRO on the whole system,
and consequently, it incurs in the same, non-negligible,
performance overhead.
Disabling DT DEBUG. Finally, Leakless also uses the
DT DEBUG dynamic entry, used by debuggers for inter-
cepting loading-related events, to bypass full RELRO.
Currently, this ﬁeld is always initialized, opening the doors
for Leakless’ full RELRO bypass. To close this hole, the
dynamic loader could be modiﬁed to only initialize this
value when a debugger is present or in the presence of an
explicitly-set environment variable.
Better protection of loader control structures. Leak-
less heavily relies on the fact that dynamic loader control
structures are easily accessible in memory, and their lo-
cations are well-known. It would be beneﬁcial for these
structures to be better protected, or hidden in memory,
instead of being loaded at a known location. For example,
as shown in [29], these structures, along with any sections
that provide control data for symbol resolution, could be
marked as read-only after initialization. Such a develop-
ment would eliminate Leakless’ ability to corrupt these
structures and would prevent the attack from redirecting
the control ﬂow to sensitive functions.
Additionally, modifying the loading procedure
to use a table of link map structure, and letting
dl runtime resolve take an index in this table, instead
of a direct pointer, will break Leakless’ bypass of full
RELRO. However, this change would also break compat-
ibility with any binaries compiled before the change is
implemented.
Isolation of the dynamic loader.
Isolating the dy-
namic loader from the address space of the target program
could be an effective countermeasure. For instance, on
Nokia’s Symbian OS, which has a micro-kernel, the dy-
namic loader is implemented in a separate process as a
system server which interfaces with the kernel [26]. This
guarantees that the control structures of the dynamic loader
cannot be corrupted by the program, and, therefore, this
makes Leakless virtually ineffective. However, such a
countermeasure would have a considerable impact on the
overall performance of applications due to the overhead of
IPC (Inter-Process Communication).
In general, the mitigations either represent a runtime
performance overhead (PIE or loader isolation), a load-
time performance overhead (non-lazy loading and system-
wide RELRO), or a modiﬁcation of the loading process
(DT DEBUG disabling or loader control structure hiding). In
the long run, we believe that a redesign of the dynamic
loader, with security in mind, would be extremely beneﬁ-
cial to the community. In the short term, there are options
available to protect against Leakless, but they all come
with a performance cost.
8 Conclusion
In this paper, we presented Leakless, a new technique that
leverages functionality provided by the dynamic loader to
enable attackers to use arbitrary, security-critical library
functions in their exploits, without having to know where
in the application’s memory these functions are located.
This capability allows exploits that, previously, required
an information disclosure step to function.
Since Leakless leverages features mandated in the ELF
binary format speciﬁcation, the attacks it implements
are applicable across architectures, operating systems,
and dynamic loader implementations. Additionally, we
showed how our technique can be used to bypass hard-
ening schemes such as RELRO, which are designed to
protect important control structures used in the dynamic
resolution process. Finally, we proposed several counter-
measures against Leakless, discussing the advantages and
disadvantages of each one.
USENIX Association  
24th USENIX Security Symposium  655
13
References
[1] AppArmor. http://wiki.apparmor.net/.
[2] A. Arcangeli.
seccomp.
https://www.
kernel.org/doc/Documentation/prctl/
seccomp filter.txt.
[3] A. Baratloo, N. Singh, and T. K. Tsai. Transparent
Run-Time Defense Against Stack-Smashing Attacks.
In USENIX Annual Technical Conference, General
Track, pages 251–262, 2000.
[15] A. Di Federico, A. Cama, Y. Shoshitaishvili,
C. Kruegel, and G. Vigna. Leakless source code
repository. https://github.com/ucsb-seclab/
leakless.
[16] S. Dudek. The Art Of ELF: Analysis and Exploita-
tions. http://bit.ly/1a8MeEw.
[17] T. Dullien, T. Kornau, and R.-P. Weinmann. A
Framework for Automated Architecture-Independent
Gadget Search. In WOOT, 2010.
[4] M. Bauer. Paranoid penguin: an introduction to
Novell AppArmor. Linux Journal, 2006(148):13,
2006.
[18] M. Fox, J. Giordano, L. Stotler, and A. Thomas.
Selinux and grsecurity: A case study comparing
linux security kernel enhancements. 2009.
[5] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazieres,
and D. Boneh. Hacking blind. In Proceedings of
the 35th IEEE Symposium on Security and Privacy,
2014.
[6] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley.
Unleashing mayhem on binary code. In Security
and Privacy (SP), 2012 IEEE Symposium on, pages
380–394. IEEE, 2012.
[19] I. Haller, A. Slowinska, M. Neugschwandtner, and
H. Bos. Dowsing for Overﬂows: A Guided Fuzzer
to Find Buffer Boundary Violations. In USENIX
Security, pages 49–64, 2013.
[20] C. Heitman and I. Arce. BARFgadgets. https:
//github.com/programa-stic/barf-project/
tree/master/barf/tools/gadgets.
[7] Common Vulnerabilities and Exposures. CVE-
http://cve.mitre.org/cgi-bin/
2014-2299.
cvename.cgi?name=CVE-2014-2299.
[21] inaz2.
ROP Illmatic: Exploring Universal
ROP on glibc x86-64. http://ja.avtokyo.org/
avtokyo2014/speakers#inaz2.
[8] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole.
Buffer overﬂows: Attacks and defenses for the vul-
nerability of the decade. In DARPA Information
Survivability Conference and Exposition, 2000. DIS-
CEX’00. Proceedings, volume 2, pages 119–129.
IEEE, 2000.
[9] CVEDetails.com. ffmpeg: CVE security vulnera-
bilities. http://www.cvedetails.com/product/
6315/Ffmpeg-Ffmpeg.html.
[10] CVEDetails.com.
Libpng: Security Vulnera-
bilities. http://www.cvedetails.com/vendor/
7294/Libpng.html.
[11] CVEDetails.com. Libtiff: CVE security vulnera-
bilities. http://www.cvedetails.com/product/
3881/Libtiff-Libtiff.html.
[12] CVEDetails.com. Wireshark: CVE security vulnera-
bilities. http://www.cvedetails.com/product/
8292/Wireshark-Wireshark.html.
[13] CWE. CWE/SANS Top 25 Most Dangerous Soft-
ware Errors. http://cwe.mitre.org/top25/.
[22] P. Kot. A Turing complete ROP compiler. https:
//github.com/pakt/ropc.
[23] P. Menage.
Cgroups.
Available on-line at:
http://www. mjmwired. net/kernel/Documentation/c-
groups. txt, 2008.
[24] Mozilla.
SSL CipherPrefSetDefault.
https://developer.mozilla.org/en-US/
docs/Mozilla/Projects/NSS/SSL functions/
sslfnc.html# SSL CipherPrefSetDefault .
[25] National Security Agency. Security-Enhanced Linux.
http://selinuxproject.org/.
[26] Nokia.
Symbian OS Internals - The Loader.
http://developer.nokia.com/community/
wiki/Symbian OS Internals/10. The Loader#
The loader server.
[27] H. Orman. The Morris worm: a ﬁfteen-year per-
IEEE Security & Privacy, 1(5):35–43,
spective.
2003.
[14] N. V. Database. NVD - Detail - CVE-2013-
http://web.nvd.nist.gov/view/vuln/
6487.
detail?vulnId=CVE-2013-6487.
[28] M. Payer. Too much PIE is bad for performance.
2012. https://nebelwelt.net/publications/
12TRpie/gccPIE-TR120614.pdf.
656  24th USENIX Security Symposium 
USENIX Association
14
[29] M. Payer, T. Hartmann, and T. R. Gross. Safe Load-
ing - A Foundation for Secure Execution of Untrusted
Programs. In Proceedings of the 2012 IEEE Sympo-
sium on Security and Privacy, SP ’12, pages 18–32,
Washington, DC, USA, 2012. IEEE Computer Soci-
ety.
[30] Phrack. Phrack - Volume 0xB, Issue 0x3a. http:
//phrack.org/issues/58/4.html.
[31] Rapid7, Inc. The Metasploit Framework. http:
//www.metasploit.com/.
[32] RedHat,
Huge Pages and Transparent
https://access.redhat.com/
Inc.
Huge Pages.
documentation/en-US/Red Hat Enterprise
Linux/6/html/Performance Tuning Guide/
s-memory-transhuge.html.
[33] Santa Cruz Operation. System V Application
http://www.sco.com/
Binary Interface, 2013.
developers/gabi/latest/contents.html.
[34] E. J. Schwartz, T. Avgerinos, and D. Brumley. Q:
Exploit Hardening Made Easy. In USENIX Security
Symposium, 2011.
[35] H. Shacham. The geometry of innocent ﬂesh on the
bone: Return-into-libc without function calls (on the
x86). In Proceedings of the 14th ACM conference
on Computer and communications security, pages
552–561. ACM, 2007.
[36] R. Shapiro, S. Bratus, and S. W. Smith. ”Weird
Machines” in ELF: A Spotlight on the Underappreci-
ated Metadata. In Proceedings of the 7th USENIX
Conference on Offensive Technologies, WOOT’13,
pages 11–11, Berkeley, CA, USA, 2013. USENIX
Association.
[37] L. Szekeres, M. Payer, T. Wei, and D. Song. SoK:
Eternal war in memory. In Security and Privacy
(SP), 2013 IEEE Symposium on, pages 48–62. IEEE,
2013.
[38] The Avalanche Project. Avalange - a dynamic de-
fect detection tool. https://code.google.com/p/
avalanche/.
[39] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. Freeh,
and P. Ning. On the Expressiveness of Return-into-
libc Attacks. In Proceedings of the 14th International
Conference on Recent Advances in Intrusion Detec-
tion, RAID’11, pages 121–141, Berlin, Heidelberg,
2011. Springer-Verlag.
[40] Ubuntu.
Ubuntu Wiki
- Security/Features.
https://wiki.ubuntu.com/Security/
Features#Built as PIE.
[41] R. N. Watson, J. Anderson, B. Laurie, and K. Kenn-
away. Capsicum: Practical Capabilities for UNIX.
In USENIX Security Symposium, pages 29–46, 2010.
A Symbol versioning challenges
In Section 3.4 we introduced the concept of symbol ver-
sioning, and in Section 4.2 we mentioned that its us-
age introduces additional constraints in the value that
Elf Rel.r info can assume. In this Appendix we illus-
trate these constraints, and how Leakless can automatically
verify and satisfy them.
A.1 Constraints due to symbol versioning
In presence of symbol versioning, the Elf Rel.r info
ﬁeld is used both as an index into the dynamic sym-
bol table and as an index in the symbol version ta-
ble (the .gnu.version section), which is composed by
Elf Verneed values. An Elf Verneed value of zero or
one has a special meaning, and stops the processing of
the symbol version, which is a desirable situation for the
attacker.
To understand the constraints posed by this, we intro-
duce some deﬁnitions and naming conventions. idx is
the index in Elf Rel.r info that Leakless has computed,
baseof(x) is the function returning the base address of sec-
tion x, sizeof(y) is the function returning the size in bytes
of structure y, and ∗ is the pointer dereference operator.
We deﬁne the following variables:
sym = baseof(.dynsym) +idx · sizeof(Elf Sym)
ver = baseof(.gnu.version) +
+idx· sizeof(Elf Verneed)
verde f = baseof(.gnu.version r) +
+∗ (ver)· sizeof(Elf Verdef)
To be able to carry on the attack, the following condi-
tions must hold:
1. sym points to a memory area controlled by the at-
tacker, and
2. one of the following holds:
(a) ver points to a memory area containing a zero
or a one, or
(b) ver points to a memory area controlled by the
attacker, which will write a zero value there, or
(c) verde f points to a memory area controlled by
the attacker, which will place there an appropri-
ately crafted Elf Verdef structure.
All the other options result in an access to an unmapped
memory area or the failure of the symbol resolution pro-
cess, both of which result in program termination.
Leakless is able to satisfy these constraints automatically
in most cases. The typical successful situation results in
an idx value that points to a version index with value zero
USENIX Association  
24th USENIX Security Symposium  657
15
or one in the .text section (which usually comes after
.gnu.version) and to a symbol in the .data or .bss
section. A notable exception, where this is impossible
to achieve, is in the case of small x86-64 ELF binaries
compiled with the support of huge pages [32]. Using huge
pages means that memory pages are aligned to boundaries
of 2 MiB and, therefore, the segment containing the read-
only sections (in particular, .gnu.version and .text) is
quite far from the writeable segment (containing .bss and
.data). This makes it hard to ﬁnd a good value for idx.
A.2 The huge page issue
The effect of huge pages can be seen in the following
examples:
$ readelf -- wide -l elf - without - huge - pages
Program Headers :
MemSiz
Type VirtAddr
...
LOAD 0 x00400000 0 x006468 R E 0 x1000
LOAD 0 x00407480 0 x0005d0 RW
0 x1000
...
Flg Align
$ readelf -- wide -l elf - with - huge - pages
Program Headers :
MemSiz
Type VirtAddr
...
LOAD 0 x00400000 0 x00610c R E 0 x200000
LOAD 0 x00606e10 0 x0005d0 RW
0 x200000
...
Flg Align
While in the ﬁrst case the distance between the begin-
ning of the executable and the writeable segments is in
the order of the kilobytes, with huge pages is more than
2 MiB, and a valid value for idx cannot be found.
There are two ways to resolve the problems posed to
Leakless by small 64-bit binaries.
The ﬁrst option is to ﬁnd a zero value for Elf Verneed
in the read-only segment (usually .text). Given ro start,
ro end and ro size, as the start and end virtual addresses
and the size of the read-only segment respectively, and
rw start, rw end and rw size as the respective values for
the writeable segment, the following must hold:
ro start ≤ ver < ro end
rw start ≤ sym < rw end
Here, the most difﬁcult case to satisfy is if .dynsym or
.gnu.version start at ro start. If we assume that both
hold true, we can write the following:
idx· sizeof(Elf Verneed) < ro end − ro start
idx· sizeof (Elf Sym) ≥ rw start − ro start
Or, alternatively:
idx· sizeof(Elf Verneed) < ro size
idx· sizeof (Elf Sym) ≥ 2 MiB
Knowing that Elf Verneed and Elf Sym have, respec-
tively, a size of 2 and 24 bytes for 64 bit ELFs, we can
compute the minimum value of ro size to make this sys-
tem of inequalities satisﬁable. The result is 170.7KiB. If
the .rodata section is smaller than this size, an alternative
method must be used.
The second option is to position Elf Verneed in the
writeable segment. In this case, the attack requirements
can be described by the following system of inequalities:
rw start ≤ ver < rw end
rw start ≤ sym < rw end
If we, once again, consider the most stringent constraints
and apply the previously mentioned assumptions, we get
the following:
idx· sizeof(Elf Verneed) ≥ rw start − ro start
idx· sizeof (Elf Sym) < rw start − ro start+
+rw size
Or, alternatively:
idx· sizeof(Elf Verneed) ≥ 2 MiB
idx· sizeof (Elf Sym) < 2 MiB + rw size
We can now put a lower bound on the size of the
writeable segment (rw size) to make the system satisﬁable:
22MiB. However, this is unreasonably large, and leads
us to the conclusion that this approach is not viable with
small 64 bit ELF binaries that use huge pages.
658  24th USENIX Security Symposium 
USENIX Association
16