velop the intrusion detection model helps in attaining better
detection rate. But it may also cause higher runtime over-
head and more false positives.
N-gram and Var-gram choose to record only the system
calls. N-gram records ﬁxed-length sequences of system
calls that occurred in the training data. Var-gram extracts
variable-length sequences of system calls that occur repeat-
edly. FSA chooses to store the current system call along
with its PC. The involvement of PCs makes it possible to
distinguish system calls with the same name but called at
different locations (location sensitive). VtPath keeps ad-
ditional entries from the call stack, which further distin-
guishes system calls called in different contexts (context
sensitive). N-gram can achieve some characteristics of loca-
tion or context sensitive by using larger N. We believe that
VtPath has better tradeoff considering the performance of
N-gram, FSA, and VtPath in experiments. Although they
are state based, abstract stack and callgraph models use a
different approach of learning the behavior of the program
by statically analyzing the source code. They only concern
about system calls at detection time as N-gram and Var-
gram do.
False positives False positives depend on how well the
model captures the normal behavior of a program while ig-
noring the information that does not generalize well. Call-
graph and abstract stack models do not have any false pos-
itive because they are statically derived from the source
code, and all possible paths of execution are encoded in the
grammar of the model. N-gram and Var-gram record se-
quences of system calls that occur in the training data. Any
path which is not covered in the training set may produce
a new sequence, thus raising a false positive. For N-gram,
the probability of the alert depends largely on the size of N.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
The larger N is, the higher is the probability that new paths
will generate new N-length sequences. FSA tries to model
programs more accurately by taking into account the loca-
tions of system calls. This is logical because the location of
a system call determines what system call will be executed.
The model may generate a false positive if any valid system
call location or any valid transition between system call lo-
cations is not covered in training. VtPath on the other hand
models the program more strictly because valid transitions
must have valid return address combinations as well. So it
should generate a little bit more false positives than FSA.
Both FSA and VtPath essentially use diagrams. Comparing
to N-gram, the location or context sensitive property will
increase false positives, but on the other hand the digram
property will decrease false positives when comparing to
N-gram with large N.
Detection capability In Section 5.2, we presented a few
speciﬁc attacks which will be missed by some detection ap-
proaches while detected by others. Detection capability of
an IDS depends on its granularity, which in turn is deter-
mined by the amount of relevant information the IDS is stor-
ing and its modeling technique. An IDS with more granu-
larity should have better detection capability.
All the approaches we study here try to model the sys-
tem call behavior of the program. Any attack that intro-
duces a new system call or causes very noticeable changes
in the system call sequences (e.g., common buffer over-
ﬂow attacks) should be detected by all the approaches. It
is easier for FSA and VtPath to ﬁnd Trojan horses because
program counters for system calls and return addresses for
function calls will probably change with the change in the
code, while system call sequences may not. FSA and Vt-
Path can also detect all the attacks where any system call is
made from invalid points. All other approaches will miss
these attacks if the system call sequences do not change.
VtPath provides another level of protection because it is
hard to jump or skip to another place in the program by
changing return addresses while avoiding detection. At-
tacks which have no effect on system call sequences and re-
turn addresses will evade all the approaches discussed here
(if no frequency or parameter value information is used).
For N-gram and Var-gram, the detection capability de-
pends on the statistical regularity of normal data and also
the properties of attack, in particular, how much the at-
tack sequences deviate from that normal behavior. How-
ever, there is no concrete research done on what types of
attack can be detected by N-gram and Var-gram. Due to
the context-insensitive treatment of function calls, callgraph
model allows IPE. As a result, all attacks that follow any
of these IPEs will go undetected. Abstract stack model
tries to remove this imprecision by including some context-
sensitive information. However, our experiments showed
that carefully designed IPEs can still evade detection by it.
The non-determinism may impair the detection capability
for both callgraph and abstract stack models. FSA checks
the transition between the PCs of two system calls. It suf-
fers from the same problems of the context-insensitive prop-
erty as callgraph. In particular, IPE can evade FSA. VtPath
stores all the system call points and all the allowed virtual
execution paths. It can be evaded if an attack changes the
call stack but somehow changes the virtual path to another
valid one.
Space requirement For N-gram and Var-gram, the main
space requirement is to store the system call sequences.
That depends on the number of different sequences and also
on the data structure used for storage. For example, storing
sequences in the form of array generally takes more space,
whereas tree structure takes less. For callgraph and ab-
stract stack models, the space requirement is proportional
to the number of NDFA transitions or the size of context
free grammars (CFGs), which is proportional to the number
of positions where function calls or system calls are made
in the program code. For FSA, the memory requirement is
proportional to the number of transitions in the automaton.
The upper bound on number of transitions is proportional to
the square of the number of places system calls are made in
the program code. But in general, the number of transitions
should be comparable to that of callgraph. For VtPath, the
space requirement is driven by the number of virtual paths.
In the extreme case, the number of virtual paths that pass
function boundaries can be exponential to the number of
function calls in program code. However, in general, the
number of virtual paths is at the same level as the number
of transitions for FSA or callgraph.
Convergence time By convergence time, we mean the
amount of training time or data required to have a stable
model. N-gram converges when most of the possible se-
quences are encountered in the training data set. This de-
pends on the value of N. As N increases, the size of re-
quired training data increases, possibly exponentially. Var-
gram converges when most of the “wanted” patterns appear
repeatedly and are extracted. The Teiresias algorithm Var-
gram uses is not suitable for incremental training usage, so
we can only check the convergence by training on data sets
with different sizes separately and comparing the resulting
patterns. For FSA, we need to cover most of the possi-
ble states and possible transitions.
It is not necessary to
go through each path of execution. It therefore needs less
data and time to form the stable model. Abstract stack and
callgraph models do static analysis of the source code, so
they do not require any training data. Also they need just
one pass of the program. VtPath converges when most of
the possible virtual paths are covered. This will require a
somewhat larger data set than FSA. But as it is essentially
based on diagrams with call stack attached, it should take
less training data and time than N-gram with large N.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
Runtime overheads Runtime overhead of IDS is due
to system call interception and processing time of the IDS
model. Because system call interception overhead is similar
for all the models, here we discuss only the processing time
of a model for each system call. N-gram and Var-gram need
to check if there are matches in the database for the system
call sequences starting from the current point. Using a trie
structure, this can be done in time linear to the sequence
length. For FSA (or VtPath), at each system call we need to
check if it has a valid state (or valid return addresses) and
there is a valid transition (or valid virtual path). Using a
hash table this will take constant time.
Non-determinism will aggravate the runtime overhead
for callgraph and abstract stack.
In the callgraph model,
there could be multiple paths from the current state. Us-
ing efﬁcient techniques, we can cover all the next possible
valid states in the time proportional to the number of states.
So for each system call, the upper bound of time overhead
is proportional to the number of states.
In abstract stack
model, for each system call we need to go through each pos-
sible path in the CFG to determine the possible next states
and the stack contents. This may take exponential time in
some cases.
7 Summary
Call stack can be very useful for intrusion detection pur-
poses. In this paper, we developed a new method that can
dynamically extracts return address information from the
call stack and use it for anomaly detection. Our experiments
show that this method is effective in terms of both detec-
tion ability and false positive rates. We also compared vari-
ous related approaches to achieve a better understanding on
what and why attacks will be missed by these approaches.
The main advantages of FSA and VtPath are that they
are deterministic and location (context) sensitive. The main
advantages of callgraph and abstract stack are that they can
remove all false positives and do not require training. We
may be able to combine these methods together and have all
these advantages. Using binary analysis techniques similar
to those in [7], we can extract and generate all the possi-
ble system calls (with the corresponding PCs), return ad-
dresses, and virtual paths from executables. The proﬁle
generated can then be used to dynamically monitor program
executions. We can avoid false positives because the proﬁle
is generated by techniques similar to other static analysis
techniques compared in this paper. The determinism and
location sensitive properties are also kept. We will conduct
more research on this subject in the future.
ACKNOWLEDGEMENTS We would like to thank
Yong Huang for providing some related material and dis-
cussions. We would also like to thank John Levine for sug-
gestions and corrections. The work reported in this paper
is supported in part by ARO contract DAAD19-01-1-0610
and NSF contracts CCR-0133629 and CCR-0208655. The
contents of this work are solely the responsibility of the au-
thors and do not necessarily represent the ofﬁcial views of
the U.S. Army and NSF.
References
[1] K. Ashcraft and D.R. Engler, “Using Programmer-
Written Compiler Extensions to Catch Security
Holes”, IEEE Symposium on Security and Privacy,
Oakland, CA, 2002.
[2] C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke, S.
Beattie, A. Grier, P. Wagle and Q. Zhang, “Stack-
Guard: Automatic Adaptive Detection and Preven-
tion of Buffer-Overﬂow Attacks”, 7th USENIX Se-
curity Symposium, San Antonio, TX, 1998.
[3] C. Cowan, P. Wagle, C. Pu, S. Beattie and J.
Walpole, “Buffer Overﬂows: Attacks and Defenses
for the Vulnerability of the Decade”, DARPA Infor-
mation Survivability Conference and Expo, Hilton
Head Island, SC, 2000.
[4] A. Floratos and I. Rigoutsos, “On the Time Com-
plexity of the TEIRESIAS Algorithm”, Research
Report 98A000290, IBM, 1998.
[5] S. Forrest, S.A. Hofmeyr, A. Somayaji and T.A.
Longstaff, “A Sense of Self for Unix Processes”,
IEEE Symposium on Computer Security and Pri-
vacy, Los Alamos, CA, pp.120-128, 1996.
[6] A. Ghosh and A. Schwartzbard, “A study in us-
ing neural networks for anomaly and misuse detec-
tion”, 8th USENIX Security Symposium, pp. 141-
151, 1999.
[7] J.T. Gifﬁn, S. Jha and B.P. Miller, “Detecting Ma-
nipulated Remote Call Streams”, 11th USENIX Se-
curity Symposium, 2002.
[8] S.A. Hofmeyr, A. Somayaji, and S. Forrest, “Intru-
sion Detection System Using Sequences of System
Calls”, Journal of Computer Security, 6(3), pp. 151-
180, 1998.
[9] C. Ko, “Execution Monitoring of Security-Critical
Programs in Distributed Systems: A Speciﬁcation-
based Approach”. PhD thesis, UC Davis, 1996.
[10] C. Ko, G. Fink and K. Levitt, “Automated Detection
of Vulnerabilities in Privileged Programs by Execu-
tion Monitoring”, 10th Computer Security Applica-
tions Conference, Orlando, Fl, pp.134-144, 1994.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
[11] W. Lee and S. Stolfo, “Data Mining Approaches for
Intrusion Detection”, 7th USENIX Security Sympo-
sium, San Antonio, TX, 1998.
[12] W. Lee, S. Stolfo, and P. Chan, “Learning Pat-
terns from Unix Process Execution Traces for Intru-
sion Detection”, AAAI Workshop: AI Approaches to
Fraud Detection and Risk Management, 1997.
[13] Mindcraft, “WebStone Benchmark Information”,
http://www.mindcraft.com/webstone/.
[14] I. Rigoutsos and A. Floratos, “Combinatorial Pat-
tern Discovery in Biological Sequences: The
TEIRESIAS Algorithm”, Bioinformatics, 14(1), pp.
55-67, 1998.
[15] B. Schneier, “The Process of Security”, Information
Security, April, 2000, http://www.infosecuritymag.
com/articles/april00/columns cryptorhythms.shtml.
[16] R. Sekar, M. Bendre, P. Bollineni, and D. Dhur-
jati, “A Fast Automaton-Based Method for Detect-
ing Anomalous Program Behaviors”, IEEE Sympo-
sium on Security and Privacy, Oakland, CA, 2001.
[17] D. Wagner and D. Dean, “Intrusion Detection via
Static Analysis”, IEEE Symposium on Security and
Privacy, Oakland, CA, 2001.
[18] D. Wagner and P. Soto, “Mimicry Attacks on Host-
Based Intrusion Detection Systems”, ACM Confer-
ence on Computer and Communications Security,
2002.
[19] C. Warrender, S. Forrest, and B. Pearlmutter, “De-
tecting Intrusions Using System Calls: Alternative
Data Models”, IEEE Symposium on Security and
Privacy, pp. 133-145, 1999.
[20] A. Wespi, M. Dacier and H. Debar, “Intrusion De-
tection Using Variable-Length Audit Trail Patterns”,
3rd International Workshop on the Recent Advances
in Intrusion Detection , LNCS 1907, Springer, pp.
110-129, 2000.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE