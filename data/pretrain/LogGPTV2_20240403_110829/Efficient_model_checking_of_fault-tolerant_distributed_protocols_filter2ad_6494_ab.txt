because any transition in P ′ can consume a single message.
If we assume that these transitions are enabled in s, then
the number of states is at most (k + l)!(k + l), which is
at least (k + l)2 times more states than k!k in P . This
matches with the intuition that the larger the quorum the
bigger the gain of using quorum transitions. We know that
k ≤ |T | where |T | is the number of all transitions in P .
For the smallest meaningful instance and a “reasonable”
speciﬁcation of Paxos (|T | + l)2 = 169. If we assume that
l ≤ n, i.e., t consumes at most one message from each
process, then the state graph of P ′ can have (|T | + n)2
times more states than P .
III. TRANSITION REFINEMENT
In this Section, after recalling the basics of partial-order
reduction (Section III-A), we introduce and formalize transi-
tion reﬁnement and prove that it preserves the soundness of
POR (Section III-B). After the general deﬁnition, we intro-
duce quorum-split, a message-passing example of transition
reﬁnement (Section III-C). Finally, we discuss reply-split, a
useful and general quorum-split strategy (Section III-D).
As an early note, we emphasize that transition reﬁnement
preserves the underlying state graph of the system. It is es-
sentially a “renaming” of the transitions that never affects the
truth of properties. Note that replacing quorum transitions
with single-message transitions does not have this property.
This is because a single edge of the state graph representing
a quorum transition can be divided into a path of lower-level
single-message transitions.
A. Preliminary: Basic POR Terms
In practice, transition systems are used to specify how the
system changes its state. Every transition t is a set of pairs
(s, s′) and makes the system proceed from state s to s′.
Intuitively, a transition groups “similar” state changes of the
system. Formally, a transition system is a tuple (S, S0, T )
where S (S0) is the set of (initial) states and T is the set
of transitions where t ⊆ S × S for every t ∈ T . Note that
message-passing protocols deﬁne a transition system with
T = ∪n
i=1Ti (see Section II-A).
Model checkers generate a state graph based on an input
transition system in order to reason about the properties.
Formally, (s, s′) ∈ ∆ in the generated state graph iff there
is a transition t such that (s, s′) ∈ t. The idea of reduction is
to generate a reduced state graph that contains fewer edges
than the original (unreduced) one.
POR is a reduction technique that is based on the obser-
vation that the execution of certain independent transitions
leads to the same state irrespective of the order in which
the transitions are executed (e.g., t1 and t2 in Figure 4(a)).
In the Paxos example, t1 and t2 can be the READ REPL
transitions of different proposers. Therefore, it sufﬁces to
execute these transitions in one, representative order (e.g.,
t2t1) if the states that are missed (s1 in this example) are
irrelevant for the truth of the property. In this example, the
reduced state graph consists of (s, s2), (s2, s12) and (s2, s3).
POR is deﬁned via global terms through a sufﬁcient
set of paths that must be contained in the reduced state
graph. In general, it is as hard to exactly determine this
set as to explore the unreduced state graph. Practical POR
algorithms therefore over-approximate this set of paths to
respect property preservation. We now discuss two general
classes of POR implementations that can beneﬁt from transi-
tion reﬁnement differently. Both classes implement POR by
limiting (if possible) the set of enabled transitions that are
executed in every reachable state. Such a sufﬁcient subset of
the set of all enabled transitions is called stubborn set [31].2
In the example of Figure 4(a), {t2} is a stubborn set in
s. Note that stubborn sets only preserve deadlocks, i.e.,
they guarantee that all states without enabled transitions
will be explored. The preservation of general temporal logic
properties (a class of properties called stuttering equivalent)
requires additional constraints [31].
Static POR. The ﬁrst class of implementations is called
static (SPOR) because the stubborn set is computed in every
state s when s is visited [15], [31], [12]. This means that
the search is blocked for the time of the stubborn set com-
putation. The main challenge of SPOR is to guess “future”
paths, i.e., paths starting from s (note that these paths have
not been explored yet). If there is a path among these future
paths that is in the sufﬁcient set deﬁned by POR but that
is not in the reduced state graph, then additional transitions
must be added to the stubborn set. A common technique to
guess future paths is the concept of can-enabling transitions
[15]. For example, transition t2 can enable t3 in Figure 4(a).
Therefore, we know that there is a path t2t3 starting from
s. As we will illustrate, transition reﬁnement can affect how
transitions can enable each other.
Dynamic POR. In dynamic POR (DPOR) the stubborn set
in s is computed during the search [13]. In other words, the
stubborn set is computed “on-the-ﬂy” while the successors
of s are visited. In fact, instead of guessing all future paths,
DPOR explores some of these and deﬁnes the stubborn
2There are other notions of sufﬁcient subsets such as ample [12],
persistent [15], cartesian [16], monotonic [18], etc. The following discussion
similarly applies to these alternate approaches.
4
Figure 4.
(a) Independent transitions t1 and t2. (b) Unreﬁned transition t: no reduction possible. (c) Caveat: transition reﬁnement disables reduction.
sets later. An important limitation of DPOR is that it is
unsound with stateful model checking, where the model
checker maintains a set of visited states. Therefore, DPOR
can only support stateless search, where the model checker
cannot know if a state has been visited before and therefore
its successor states are visited again.3
A commonality of SPOR and DPOR is that their per-
formance can be greatly inﬂuenced by the choice of the
seed transition [5] (also called start transition [31]), the ﬁrst
transition added to the stubborn set. Intuitively, the size of
the stubborn set grows with the number of transitions that
are dependent on the seed transition. In practice, heuristics
are used to select seed transitions [5], [24].
B. General Transition Reﬁnement
The ability of POR to achieve reduction strongly depends
on the deﬁnition of transitions. Consider the transition sys-
tem in Figure 4(b), which generates the same state graph as
the system in Figure 4(a). Although the same reduction can
be used in principle, POR is unable to realize a reduction in
this case. This is because there is a single non-deterministic
transition t enabled in s that must be executed in all possible
ways. Therefore, to leverage POR, t can be reﬁned into t1
and t2 as shown in Figure 4(a).
Transition reﬁnement is a transformation of a transition
system into another one such that
the underlying state
graph remains unchanged. Note that the following general
deﬁnition does not require that the original transition set
contains fewer transitions than the reﬁned one.
Deﬁnition 1: Given transition systems TS and TS ′, TS
is a transition reﬁnement of TS ′ if TS and TS ′ generate
the same state graph.
Transition reﬁnement might affect the POR-reduced state
graph but not the truth of any property. This is because POR
is based on transitions, whereas properties are evaluated in
the state graph. The property preservation result of POR
directly implies that
transition reﬁnement also preserves
temporal logic.
Theorem 1: Let TS 1 and TS 2 be two transition systems
and ϕ a temporal logic property preserved by POR. Then, if
3We remark that stateful optimizations of DPOR exists [34] but only at
a price of increased memory and time overhead.
5
TS 2 is a transition reﬁnement of TS 1 and TS R
1 and TS R
2
denote the partial-order reductions of TS 1 and TS 2, then ϕ
holds in TS R
1 iff it holds in TS R
2 .
Proof: Assume that ϕ holds in TS R
1 but not in TS R
2 .
From the property preservation of POR we know that ϕ
holds in state graph generated by TS 1. Furthermore, since
TS 2 is a transition reﬁnement of TS 1 we know that they
generate the same state graphs. Therefore, ϕ also holds in
state graph generated by TS 2. Again, from the property
preservation of POR we know that ϕ holds in TS R
2 , a
contradiction. The reverse can be proven similarly.
Beneﬁt in practice. Transition reﬁnement is not only
theoretically useful but can also assist practical POR im-
plementations in computing smaller stubborn sets. Firstly,
the reﬁnement of non-deterministic transitions into a set of
deterministic ones can be beneﬁcial (equally for SPOR and
DPOR) if the reﬁned transitions are independent. Unfortu-
nately, a non-deterministic transition in practice often con-
tains choices that are not independent. However, transition
reﬁnement can also help SPOR to guess future paths more
accurately. Using the example of can-enabling transitions,
a reﬁned transition can enable fewer transitions. For an
example, transition t in Figure 4(b) can enable t3 because
t3 is disabled in s and, after the execution of t, enabled
in s2. Therefore, a static POR algorithm in s might falsely
t3−→ s′ (where
conclude that there is a future run s
s′ denotes some state). However, if t is reﬁned into t1
and t2 (Figure 4(a)), then t2 can enable t3 but t1 cannot
enable t3. Therefore, the POR algorithm does not consider
s
t1−→ s1
Caveat. Unregulated transition reﬁnement can have un-
desired effects. As the runtime of POR algorithms increases
with the number of all transitions [31], transition reﬁnement
can slow down the overall model checking time. Even worse,
overly reﬁned transition can even have a negative effect in
terms of memory reduction. To see that, consider another
transition system (Figure 4(c)) that also generates the same
state graph. Here, every change of the system state is trig-
gered by a new transition. Clearly, this transition system can
be obtained via reﬁning the transitions of one of the previous
examples. Again, although reduction would be possible,
POR sees no pair of transitions that could be executed in
t−→ s1
t3−→ s′ as a possible future run.
@guard
boolean READ_REPLij(READ_REPL[] messages) {
return messages.length==((Math.ceil((double)(N+1)/2))
&& messages_are_sent_by_ij);
}
@message
boolean READ_REPLij(READ_REPL[] messages) {
WRITE write=new WRITE(propNo, readReplHighest.val);
for (ActorName w : acceptors)
send(w, write);
}
Figure 5. Quorum-split READ REPL with three acceptors.
different orders. Despite these warning scenarios, we will
show that transition reﬁnement is effective in practice.
C. Quorum-split: Reﬁned Quorum Transitions
The idea of reﬁning quorum transitions is to deﬁne a new
transition for each set of processes from which the original
quorum transition can consume a message. For example,
consider the READ REPL transition of Paxos in Figure 2.
This transition is executed by a proposer process and it
can only be enabled if a majority of all acceptor processes
has sent a READ REPL message to this proposer. If there
are three acceptors 1, 2, and 3, then READ REPL can be
executed with messages from acceptors 1 and 2, 1 and 3,
and 2 and 3. Therefore, the transition can be reﬁned into
three transitions READ REPLij for every unordered pair i
and j of acceptors (Figure 5). The transition READ REPLij
behaves exactly as READ REPL except that it can only
consume messages from acceptors i and j. We call this
reﬁnement strategy quorum-split.
Intuitively, READ REPLij tells more about the possible
state transitions of the system than the unsplit READ REPL.
In fact, we know that READ REPLij only consumes mes-
sages from acceptors i and j. This additional information
can be used by POR algorithms to achieve better reduction
(we will show examples in Section III-D).
Formal deﬁnition. Transition reﬁnement must not alter
the system behavior. Thus, we deﬁne conditions under which
a quorum-split can be performed and yields a valid transition
reﬁnement. We start by deﬁning a special class of quorum
transitions where the number of sender processes is ﬁxed.
Deﬁnition 2: A transition t is an exact quorum transition
t(X)
−−−→ s′ implies |senders(X)| = qt
with a threshold qt iff s
for all s, s′ ∈ S and sets of messages X.
Next, we formally deﬁne quorum-split.
Deﬁnition 3: Given a message-passing protocol P and an
exact quorum transition t with threshold qt, a quorum-split
of P via t is an MP protocol P ′ derived from P by replacing
t with transitions t1, t2, . . . , tm, for m = (cid:0) n
qt(cid:1), such that
t(X)
−−−→ s′ ∧ senders(X) = Qk, where Qk is
tk(X)
−−−−→ s′ iff s
s
the kth of the m sets of process IDs of size qt.
Note that the deﬁnition of quorum-split also allows single-
message transitions (with quorum-size one). In fact, every
6
@message
void READ(READ message) {
highestPropNo=READ.propNo;
READ_REPL read_repl=new READ_REPL(acceptedProp);
send(message.sender,read_repl);
}
Figure 6. READ transition in Paxos.
single-message transition is an exact quorum transition. We
now state that quorum-split is a transition reﬁnement.
Theorem 2: Let P be an MP protocol, TS the transition
system of P , t an exact quorum transition in P with
threshold qt, P ′ a quorum-split of P via t, and TS ′ the
transition system of P ′. Then, TS ′ is a transition reﬁnement
of TS .
Proof: Let S and T be the set of states and transitions
in TS and T ′ the set of transitions in TS ′. Assume that
TS and TS ′ generate different state graphs with sets of
state pairs ∆ and ∆′, respectively. Assume that there is a
(s, s′) ∈ ∆ such that (s, s′) 6∈ ∆′. Let t′ ∈ T be a transition
such that (s, s′) ∈ t′. Let X be a set of messages such
t′(X)
that s
−−−→ s′. If t′ 6= t, then t′ ∈ T ′ and thus (s, s′) ∈
∆′, a contradiction. Since t is an exact quorum transition,
it must be that |senders(X)| = qt. P ′ is a quorum-split
tk(X)
of P via t, so there is a tk ∈ T ′ such that s
−−−−→ s′
where Qk = senders(X), a contradiction. The reverse can
be shown similarly.
Note that in principle every transition t can be split by
adding a new transition tQ for every subset Q of processes.
However, this would mean adding 2n extra transitions for
every t (n is the number of all processes), which can worsen
the time overhead of the POR algorithm.
Implementation. Quorum-splits can be performed auto-
matically by conservatively analyzing the guards of quorum
transitions. If the guard of a quorum transition t speciﬁes an
exact quorum size qt (as in the example in Figure 2), then
reﬁning t for each set of processes of size qt is guaranteed
to be a transition reﬁnement.
The number of new transitions can be further reduced by
ruling out a process i that never sends messages consumed
by t, i.e., if t is executed in a state with some X, then i
cannot be in senders(X). For example, learner processes in
Paxos send no messages at all. Or, a proposer process sends
no message to another proposer. The automatic detection
of all possible senders(X) sets can be done using simple
patterns, otherwise we conservatively assume that i can be
in such a set.
D. Splitting Reply Transitions
We discussed in Section III-B how transition reﬁnement
can beneﬁt from POR. We now present some implications
of quorum-split for static POR algorithms.
As reﬁned transitions are dependent on fewer transitions
than their unreﬁned counterpart, the SPOR algorithm can
more accurately approximate future paths. In fact, a quorum
transition t can be enabled by (possibly) any process.
However, if tk is the quorum-split version of t, then tk can be
enabled only by transitions that are executed by processes
in Qk. For example, consider the transition READ REPL
in Figure 2. For acceptor processes 1 and 2 this transition
is split into READ REPL12 according to Figure 5. Now,
READ REPL can be enabled by every acceptor whereas
READ REPL12 can be enabled by transitions of acceptors
1 and 2 but not by acceptor 3.
Reply transition. We observe that the quorum-split of
some special transitions can yield even more reduction. The
idea is that the split version of these special transitions can