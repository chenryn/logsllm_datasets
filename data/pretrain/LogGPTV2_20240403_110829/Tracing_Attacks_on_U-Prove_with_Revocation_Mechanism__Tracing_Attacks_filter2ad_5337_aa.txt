title:Tracing Attacks on U-Prove with Revocation Mechanism: Tracing Attacks
for U-Prove
author:Lucjan Hanzlik and
Przemyslaw Kubiak and
Miroslaw Kutylowski
Tracing Attacks on U-Prove with Revocation Mechanism ∗
Lucjan Hanzlik, Przemysław Kubiak, Mirosław Kutyłowski
Faculty of Fundamental Problems of Technology, Wrocław University of Technology
Wybrze˙ze Wyspia´nskiego 27, 50-370 Wrocław, Poland
ﬁPI:EMAIL
ABSTRACT
Anonymous credential systems have to provide strong privacy pro-
tection: a user may prove his (chosen) attributes without leaking
neither his identity nor other attributes. In this paper we consider
U-Prove – one of the major commercial anonymous credential sys-
tems.
We show that the revocation mechanism designed for U-Prove
enables a system provider to efﬁciently trace the users’ activities.
Namely, the Revocation Authority run the system provider may ex-
ecute the U-Prove protocol in a malicious way so that: (a) the de-
viations from the protocol remain undetected, (b) the Revocation
Authority becomes aware of each single authentication of a user in
the whole system and can link them (regardless which attributes are
disclosed by the user against the veriﬁers), (c) it can link presenta-
tion tokens with the corresponding token issuing procedure (under
some conditions).
Thereby, the system described in the technical drafts of U-Prove
does not guarantee privacy protection unless the system provider
can be trusted unconditionally. In fact, a malicious provider may
convert the Revocation Authority into a “Big Brother” installation.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: [Authentication]
Keywords
anonymous credential; U-Prove; revocation; tracing attack; crypto-
graphic accumulator; witness
1.
INTRODUCTION
Anonymous credentials.
Anonymous credential system is a cryptographic framework in
which a person receives an authentication token from a trust provider
for the system. The token conﬁrms a set of attributes of the owner,
∗partially supported by project S40012/K1102 at Wrocław Univer-
sity of Technology
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714597.
e.g. legal status, age, the rights to access a certain IT system, privi-
leges, etc., but also the name, personal identity number, and so on.
A holder of such a token, say Alice, can use it for authentication.
If A is the set of attributes of Alice conﬁrmed by the token, A(cid:48)
is an arbitrary subset of A, then she can execute an authentication
protocol with Bob so that:
• she proves Bob that she holds an authentication token with
all attributes from A(cid:48),
• Bob cannot conclude anything about the attributes not con-
tained in A(cid:48), in particular in A \ A(cid:48).
“The attributes not contained in A” may include identity data such
as the ﬁrst name, the family name, and the personal ID number.
The attributes revealed may include a pseudonym of the prover.
Based on the result of authentication protocol (and the value of
attributes presented) the veriﬁer Bob can make appropriate deci-
sions. A good example of an attribute is the legal age enabling to
engage into civil contracts.
Thereby, anonymous credentials can be used to reduce the in-
formation ﬂow during authentication to the necessary minimum.
So, we may hope that anonymous credentials may become a stan-
dard authentication method in privacy aware systems fulﬁlling the
“privacy-by-design” requirement.
There are many models of anonymous credentials and subtle dif-
ferences between them. For instance, it is an open issue whether
the veriﬁer should be able to check whether the same (anonymous)
person authenticates herself, when the set of attributes is exactly the
same. Both possibility of linking (weak privacy) and infeasibility
of linking (strong privacy) correspond to some concrete use cases.
U-Prove.
The topic of this paper is an extension of U-Prove anonymous
credentials system [1] developed by Microsoft. U-Prove is based
on the quite complex ideas of Stefan Brands [2, 3], which evolved
into the current anonymous credential system.
On the upside, U-Prove is very ﬂexible and quite advanced re-
garding privacy protection. On the downside, its design is fairly
complex. This is a major disadvantage not because of the imple-
mentation pains and hardness to explain the security mechanisms
even to specialists, but mainly due to hardware requirements far
above the possibilities of cryptographic smart cards. U-Prove is
based on hardness of Discrete Logarithm Problem and that by de-
sign, U-Prove enables commitments which can be used to extend
the speciﬁcation. An interested reader may refer to the web page
[4] for details of the U-Prove scheme and implementation details.
In the meantime, a large number of system details has been
published [4] enabling external designers to integrate their products
with U-Prove. Therefore, U-Prove has to be regarded as a system
603that has a real chance to play an important role in practice on a
global scale, despite of lack of thorough academic evaluation.
Revocation.
It may happen that the attributes terminate to be valid for a holder
of an authentication token. For instance, the token may be stolen.
Then privacy protection offered by the system has a negative side
effect – it hides identity of a misbehaving person very effectively.
So the advanced technology starts to be dangerous to honest users,
as there are more incentives to steal the tokens. These problems
has been also recognized by the designers of U-Prove – see a recent
report [5]. The core U-Prove system is not equipped with a revoca-
tion system – the necessary functionality must be added to it as an
extension.
During Financial Cryptography’2013 the ﬁrst revocation system
for U-Prove has been presented [6]. It contained a security ﬂaw
[7], but the error seems to be correctable. The major drawback
of the revocation system from [6] is heavy use of bilinear pairings.
According to [5], “Although pairings are popular in recent cryp-
tographic research, they are seldom used in practice due to their
maturity level and implementation complexity.” Deﬁnitely, cur-
rently the consumer’s hardware devices are not supporting pairings
(may be with some small scale exceptions).
Following [6], the Microsoft team proposed a modiﬁed revoca-
tion system which is not based on pairings and can be implemented
in standard groups [8] (see [9] for a slightly updated version).
For the reader’s convenience a speciﬁcation of the revocation
procedures from [9] is given in the Appendix. More details can
be found in the technical drafts of U-Prove.
Our contribution.
We investigate the U-Prove revocation extension [8, 9] from the
point of view of user’s privacy. We show that within the current
framework it is impossible to hide the revocation attributes of the
users (which are effectively the user’s pseudonyms) against the Re-
vocation Authority. Namely, the Revocation Authority may learn
about each single authentication performed with the user’s pseudonym.
For this purpose the Revocation Authority must deviate from the
original protocol, but it cannot be detected by the users and the
veriﬁers.
Although each security ﬂaw presented in the paper can be ﬁxed
by re-designing the scheme and introducing new (computationally
heavy) protocol components, it is not clear whether the extensions
do not bring new threats and attack possibilities.
2. TRACING USERS’ ACTIVITIES
In this section we present a couple of tracing attacks. They are
designed for different scenarios and there is a clear realationship
between simplicity and the attack scenario. In all cases the attacks
enable to link activities of the same user (identiﬁed by the revoca-
tion attribute) based on the non-revocation proof. One might ask,
what is the purpose of the attack, since U-Prove presentation tokens
can by design be linked to a certain pseudonym and veriﬁers can
distinguish if the same U-Prove token was used twice. However,
the Revocation Authority does not receive the whole presentation
token but only the non-revocation part. Moreover, it receives those
proofs from all veriﬁers and might create an activity trace for each
revocation attribute (binded with a U-Prove token) containing the
authentication time and the veriﬁer’s identity.
What is more, from a practical point of view, the user has to dis-
close the revocation attribute xid during the issuing procedure (or
it may even be chosen by the issuer). Otherwise, it would be im-
possible for the issuer to revoke a credential, which could only be
revoked on demand of the user. So if xid is known to the issuer,
he may collude with the Revocation Authority to link users’ pre-
sentation tokens with a given issuing procedure. The Revocation
Authority may even instantiate an issuer and create a full tracing
system even without collusion.
The schemes proposed in [8, 9] are aimed to be suitable for a
group Gq being a “standard construction”, which means that the
group Gq (see Table 2) need not to be pairing-friendly. Conse-
quently, in order to verify the equality Y = X δ in the procedure
from Table 7 the Revocation Authority must be involved.
The initial attacks are less demanding computationally. How-
ever, the latter attacks seem to be more general: they remain unde-
tectable even if witnesses are updated by the users from the very
beginning of the revocation system work, that is, even if the com-
plete list of the revoked revocation attributes is public. The attacks
are described for the version [9], however they work for [8] after
minor changes. Due to space reasons, we omit detailed description
of the U-Prove system and its revocation extension. However, to
ease the reading, in the appendix we present raw descriptions of
the algorithms used in the U-Prove revocation extension. For full
description, we refer the reader to the U-Prove speciﬁcation [1] and
the speciﬁcation of its revocation extension [8, 9].
2.1 Attack for Local Witness Updates
In this section we investigate the scenario that the witnesses are
recomputed by the users themselves according to the procedure
UpdateWitness (for the case when the witnesses are recom-
puted by the Revocation Authority another attack applies).
When a user joins the system the ﬁrst revocation witness (d, W, Q)
is given to the user by the Revocation Authority. Moreover, we
assume that the complete set R of revoked users (including those
from the time before the user has joined the system) is not pub-
lished – the users must only be informed about the current revo-
cations. Note that this is perhaps the most practical scenario, as it
minimizes the information distribution: in case of a revocation the
system broadcasts only the list of revoked revocation attributes and
the revocation accumulator. Moreover, it is easier to compute the
initial revocation witness for the user instead of forcing the user to
perform the whole computation based on UpdateWitness from
the system initialization.
The idea of the attack is to provide a corrupted revocation wit-
ness when a user joins the system. Of course, the error propa-
gates as the user updates the witnesses and presents non-revocation
proofs. From the point of view of the veriﬁer, no irregularity should
be detected and the non-revocation proof should be positively ver-
iﬁed. However, note that the veriﬁer must contact the Revocation
Authority to check whether X δ = Y . Due to manipulations on
witnesses we will have X δ (cid:54)= Y , but a particular relation between
X and Y enables the Revocation Authority to check whether the
non-revocation proof has been created correctly. Therefore, the
Revocation Authority may answer correctly, but at the same time
it will learn the user’s xid from the values X, Y presented by the
veriﬁer. So despite that the veriﬁer does not collude with the Revo-
cation Authority, the revocation identiﬁer becomes revealed.
The initial revocation witness (d(cid:48), W (cid:48), Q(cid:48)) given to the user hold-
ing xid is created as follows:
Input:
RA private key:
Revocation parameter:
List of revoked attribute values:
New user’s revocation attribute:
δ ∈ Zq
gt
R
xid (cid:54)∈ R
604Current accumulator:
Auxiliary database:
V
T
Computation:
1.
compute d and W via ComputeWitness for R and xid
choose u at random
2.
3.
d := d + u mod q
−d
4. Q := V W −xid g
t
Output:
t , xid) in the database T
insert (gu
give (d, W, Q) to the user holding xid
Table 1: Creating a corrupted initial witness
The database T stores information necessary to link the veriﬁ-
cation requests with the users. Note that if Q is the non-corrupted
value, then Q = V W −xid g
−u
t = Q.
For the corrupted witness (d, W, Q) note that:
• one can check that the test concerning c(cid:48) performed by the
veriﬁer succeeds (note that this part of the veriﬁcation may
be executed by the veriﬁer himself),
. Hence Q · g
−d
t
• the Revocation Authority gets the values X, Y for which
t (cid:54)= Y .
X δ = W δgt1δ = QK t1 = Qgu
t K t1 = Y gu
However, the Revocation Authority may search for an entry
(Z, xid) such that X δ = Y Z. If there is such an entry, then
the answer to the veriﬁcation query is correct and as a
side effect the Revocation Authority learns xid. Otherwise,
the answer is false.
Now let us consider the situation after the user holding xid up-
dates the revocation witness because of revocation of x(cid:48).
• According to the UpdateWitness procedure, the new value
of the parameter d, called below d1, equals
(cid:48) − xid) = (d + u)(x
(cid:48) − xid) ,
d1 = d(x
where d1 = d(x(cid:48) − xid) is the correct value that would be
obtained for the correct initial witness.
(cid:48) − xid) = d1 + u(x
• The value of W will be updated to the correct value W1,
since no manipulated value is applied for the update.
• The new value of Q equals
−d1
t = V W
Q1 = V W
−xid g
−u(x(cid:48)−xid)
,
= Q1g
t
−xid g
t
−d1−u(x(cid:48)−xid)
where Q1 is the value of Q computed for the correct d1.
Now, if the veriﬁer presents a pair (X, Y ) created by the user hold-
ing xid, then
t
t
1 gt1δ
t = Q1K t1 = Q1gu(x(cid:48)−xid)
K t1 = Y gu(x(cid:48)−xid)
X δ = W δ
.
So we see that if each entry (Z, xid) of the database T is modiﬁed
according to the assignment Z := Z x(cid:48)−xid, then the Revocation
Authority may answer the queries of the veriﬁers just as before.
It is easy to see that after revoking x(cid:48)
k and removing
x(cid:48)(cid:48)
1 , . . . , x(cid:48)(cid:48)
1 , . . . , x(cid:48)(cid:48)
m)
the original entry (Z, xid) of database T becomes converted to
(Z(cid:48), xid), where
= Z · g(x(cid:48)
m from the revocation list (i.e. activating back x(cid:48)(cid:48)