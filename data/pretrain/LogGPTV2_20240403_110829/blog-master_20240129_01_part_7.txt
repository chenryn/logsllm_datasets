 Bitmap Heap Scan on tbl_users  (cost=983.56..87215.27 rows=127232 width=4) (actual time=48.651..811.842 rows=149132 loops=1)    
   Recheck Cond: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,8,%'::text))    
   Rows Removed by Index Recheck: 299658    
   Heap Blocks: exact=41915 lossy=33158    
   ->  BitmapOr  (cost=983.56..983.56 rows=131313 width=0) (actual time=43.554..43.554 rows=0 loops=1)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..535.73 rows=80808 width=0) (actual time=24.923..24.923 rows=77454 loops=1)    
               Index Cond: (tags ~~ '%,2,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..384.22 rows=50505 width=0) (actual time=18.629..18.629 rows=77054 loops=1)    
               Index Cond: (tags ~~ '%,8,%'::text)    
 Planning Time: 1.496 ms    
 Execution Time: 814.748 ms    
(11 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,2696,%';    
                                                                 QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=958.67..64006.30 rows=90093 width=4) (actual time=75.859..900.779 rows=90084 loops=1)    
   Recheck Cond: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,2696,%'::text))    
   Rows Removed by Index Recheck: 348263    
   Heap Blocks: exact=39411 lossy=33155    
   ->  BitmapOr  (cost=958.67..958.67 rows=90909 width=0) (actual time=71.980..71.981 rows=0 loops=1)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..535.73 rows=80808 width=0) (actual time=26.486..26.487 rows=77454 loops=1)    
               Index Cond: (tags ~~ '%,2,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..377.89 rows=10101 width=0) (actual time=45.492..45.492 rows=62326 loops=1)    
               Index Cond: (tags ~~ '%,2696,%'::text)    
 Planning Time: 1.479 ms    
 Execution Time: 902.637 ms    
(11 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
                                                                                                          QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=3041.18..100880.75 rows=135482 width=4) (actual time=210.772..4047.148 rows=150218 loops=1)    
   Recheck Cond: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,4356,%'::text) OR (tags ~~ '%,5064,%'::text) OR (tags ~~ '%,5711,%'::text) OR (tags ~~ '%,7363,%'::text) OR (tags ~~ '%,9417,%'::text) OR (tags ~~ '%,9444,%'::text))    
   Rows Removed by Index Recheck: 422706    
   Heap Blocks: exact=56868 lossy=33226    
   ->  BitmapOr  (cost=3041.18..3041.18 rows=141614 width=0) (actual time=205.898..205.899 rows=0 loops=1)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..535.73 rows=80808 width=0) (actual time=24.656..24.656 rows=77454 loops=1)    
               Index Cond: (tags ~~ '%,2,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..428.40 rows=20202 width=0) (actual time=45.014..45.014 rows=62615 loops=1)    
               Index Cond: (tags ~~ '%,4356,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..377.89 rows=10101 width=0) (actual time=22.680..22.680 rows=39025 loops=1)    
               Index Cond: (tags ~~ '%,5064,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..428.40 rows=20202 width=0) (actual time=28.809..28.809 rows=62697 loops=1)    
               Index Cond: (tags ~~ '%,5711,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..377.89 rows=10101 width=0) (actual time=28.646..28.646 rows=62647 loops=1)    
               Index Cond: (tags ~~ '%,7363,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..327.89 rows=100 width=0) (actual time=28.361..28.361 rows=62172 loops=1)    
               Index Cond: (tags ~~ '%,9417,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..327.89 rows=100 width=0) (actual time=27.729..27.730 rows=62821 loops=1)    
               Index Cond: (tags ~~ '%,9444,%'::text)    
 Planning Time: 4.517 ms    
 Execution Time: 4050.040 ms    
(21 rows)    
postgres=#  explain analyze select uid from tbl_users where tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
                                                                                             QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=2357.58..50755.97 rows=59480 width=4) (actual time=209.115..3689.534 rows=78827 loops=1)    
   Recheck Cond: ((tags ~~ '%,4356,%'::text) OR (tags ~~ '%,5064,%'::text) OR (tags ~~ '%,5711,%'::text) OR (tags ~~ '%,7363,%'::text) OR (tags ~~ '%,9417,%'::text) OR (tags ~~ '%,9444,%'::text))    
   Rows Removed by Index Recheck: 455241    
   Heap Blocks: exact=55903 lossy=33218    
   ->  BitmapOr  (cost=2357.58..2357.58 rows=60806 width=0) (actual time=204.235..204.236 rows=0 loops=1)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..428.40 rows=20202 width=0) (actual time=57.485..57.485 rows=62615 loops=1)    
               Index Cond: (tags ~~ '%,4356,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..377.89 rows=10101 width=0) (actual time=26.156..26.157 rows=39025 loops=1)    
               Index Cond: (tags ~~ '%,5064,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..428.40 rows=20202 width=0) (actual time=33.539..33.539 rows=62697 loops=1)    
               Index Cond: (tags ~~ '%,5711,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..377.89 rows=10101 width=0) (actual time=30.136..30.136 rows=62647 loops=1)    
               Index Cond: (tags ~~ '%,7363,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..327.89 rows=100 width=0) (actual time=28.794..28.794 rows=62172 loops=1)    
               Index Cond: (tags ~~ '%,9417,%'::text)    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..327.89 rows=100 width=0) (actual time=28.122..28.122 rows=62821 loops=1)    
               Index Cond: (tags ~~ '%,9444,%'::text)    
 Planning Time: 3.860 ms    
 Execution Time: 3691.329 ms    
(19 rows)    
```    
四、使用PolarDB|PostgreSQL 特性设计和实验2    
很显然你不能满足于前面的模糊查询索引带来的性能提升, 特别是当and条件非常多时, 模糊查询的索引也要被多次扫描并使用bitmap进行合并, 性能不好. (以上方法对于一个模糊查询条件性能提升是非常明显的.)    
PolarDB和PostgreSQL都支持数组类型, 用数组存储标签, 支持gin索引可以加速数组的包含查询.    
创建用户画像表, 使用数组存储标签字段.    
```    
drop table if exists tbl_users;    
create unlogged table tbl_users (  -- 为便于加速生成测试数据, 使用unlogged table    
  uid int primary key,   -- 用户id    
  tags int[]   -- 该用户拥有的标签 , 使用数组类型    
);    
```    
创建100万个用户, 用户被贴的标签数从32到256个, 随机产生, 其中8个为热门标签(例如性别、年龄段等都属于热门标签).    
```    
insert into tbl_users select id, get_tags_arr(ceil(24+random()*224)::int) from generate_series(1,1000000) id;    
create index on tbl_users using gin (tags);    
```    
搜索包含如下标签组合的用户:    
- 2    
- 2,8    
- 2,2696    
- 2,4356,5064,5711,7363,9417,9444    
- 4356,5064,5711,7363,9417,9444    
数组匹配的 SQL 语句如下:    
```    
select uid from tbl_users where tags @> array[2];    
select uid from tbl_users where tags @> array[2,8];    
select uid from tbl_users where tags @> array[2,2696];    
select uid from tbl_users where tags @> array[2,4356,5064,5711,7363,9417,9444];    
select uid from tbl_users where tags @> array[4356,5064,5711,7363,9417,9444];    
```    
使用数组类型和gin索引后, 查看执行计划和耗时如下:    
```    
postgres=# explain analyze select uid from tbl_users where tags @> array[2];    
                                                              QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=437.95..53717.07 rows=76333 width=4) (actual time=24.031..69.706 rows=77641 loops=1)    
   Recheck Cond: (tags @> '{2}'::integer[])    
   Heap Blocks: exact=50231    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..418.86 rows=76333 width=0) (actual time=15.026..15.026 rows=77641 loops=1)    
         Index Cond: (tags @> '{2}'::integer[])    
 Planning Time: 1.137 ms    
 Execution Time: 74.015 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags @> array[2,8];    
                                                             QUERY PLAN    
------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=49.97..6172.63 rows=5847 width=4) (actual time=10.745..18.272 rows=5303 loops=1)    
   Recheck Cond: (tags @> '{2,8}'::integer[])    
   Heap Blocks: exact=5133    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..48.51 rows=5847 width=0) (actual time=10.081..10.081 rows=5303 loops=1)    
         Index Cond: (tags @> '{2,8}'::integer[])    
 Planning Time: 0.256 ms    
 Execution Time: 18.561 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags @> array[2,2696];    
                                                           QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=21.27..443.58 rows=382 width=4) (actual time=2.872..4.662 rows=1003 loops=1)    
   Recheck Cond: (tags @> '{2,2696}'::integer[])    
   Heap Blocks: exact=999    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..21.18 rows=382 width=0) (actual time=2.729..2.729 rows=1003 loops=1)    
         Index Cond: (tags @> '{2,2696}'::integer[])    
 Planning Time: 0.246 ms    
 Execution Time: 4.750 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags @> array[2,4356,5064,5711,7363,9417,9444];    
                                                         QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=64.38..65.50 rows=1 width=4) (actual time=5.476..5.478 rows=0 loops=1)    
   Recheck Cond: (tags @> '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..64.38 rows=1 width=0) (actual time=5.471..5.472 rows=0 loops=1)    
         Index Cond: (tags @> '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.223 ms    
 Execution Time: 5.523 ms    
(6 rows)    
postgres=# explain analyze select uid from tbl_users where tags @> array[4356,5064,5711,7363,9417,9444];    
                                                         QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=55.36..56.47 rows=1 width=4) (actual time=4.476..4.477 rows=0 loops=1)    
   Recheck Cond: (tags @> '{4356,5064,5711,7363,9417,9444}'::integer[])    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..55.36 rows=1 width=0) (actual time=4.471..4.472 rows=0 loops=1)    
         Index Cond: (tags @> '{4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.275 ms    
 Execution Time: 4.528 ms    
(6 rows)    
```    
五、使用PolarDB|PostgreSQL 特性设计和实验3    
当我们输入一组标签, 如果想放宽圈选条件, 而不仅仅是以上精确包含, 怎么实现? 例如:    
- 包含多少个以上的标签    
- 有百分之多少以上的标签重合    
复用上面的数据, 换上smlar插件和索引来实现以上功能.    
创建smlar插件    
```    
postgres=# create extension smlar ;    
CREATE EXTENSION    
```    
换上smlar索引    
```    
drop index tbl_users_tags_idx;    
create index on tbl_users using gin (tags _int4_sml_ops);    
```    
smlar插件的`%`操作符用来表达数组近似度过滤.    
```    
postgres=# explain analyze select count(*) from tbl_users where tags % array[1,2,3];    
                                                                QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------------    
 Aggregate  (cost=1132.46..1132.47 rows=1 width=8) (actual time=75.613..75.614 rows=1 loops=1)    
   ->  Bitmap Heap Scan on tbl_users  (cost=35.25..1129.96 rows=1000 width=0) (actual time=75.609..75.610 rows=0 loops=1)    
         Recheck Cond: (tags % '{1,2,3}'::integer[])    
         Rows Removed by Index Recheck: 15059    
         Heap Blocks: exact=13734    
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..35.00 rows=1000 width=0) (actual time=31.466..31.466 rows=15059 loops=1)    
               Index Cond: (tags % '{1,2,3}'::integer[])    
 Planning Time: 0.408 ms    
 Execution Time: 75.687 ms    
(9 rows)    
```    
smlar插件支持的参数配置如下, 通过配置这些参数, 我们可以控制按什么算法来计算相似度, 相似度的过滤阈值是多少?    
```    
postgres=# select name,setting,enumvals,extra_desc from pg_settings where name ~ 'smlar';    
          name          | setting |        enumvals        |                                 extra_desc    
------------------------+---------+------------------------+-----------------------------------------------------------------------------    
 smlar.idf_plus_one     | off     |                        | Calculate idf by log(1+d/df)    
 smlar.persistent_cache | off     |                        | Cache of global stat is stored in transaction-independent memory    
 smlar.stattable        |         |                        | Named table stores global frequencies of array's elements    
 smlar.tf_method        | n       | {n,log,const}          | TF method: n => number of entries, log => 1+log(n), const => constant value    
 smlar.threshold        | 0.6     |                        | Array's with similarity lower than threshold are not similar by % operation    
 smlar.type             | cosine  | {cosine,tfidf,overlap} | Type of similarity formula: cosine(default), tfidf, overlap    
(6 rows)    
```    
接下来我们来实现上述两种近似搜索:    
- 包含多少个以上的标签    
- 有百分之多少以上的标签重合    
包含多少个以上的标签, `smlar.type = overlap  ,  smlar.threshold = INT`    
```    
set smlar.type = overlap;    
set smlar.threshold = 1;  -- 精确匹配    
select uid from tbl_users where tags % array[2];    
set smlar.type = overlap;    
set smlar.threshold = 1;  -- 匹配到1个以上标签    
select uid from tbl_users where tags % array[2,8];    
set smlar.type = overlap;    
set smlar.threshold = 2;  -- 精确匹配    
select uid from tbl_users where tags % array[2,2696];    
set smlar.type = overlap;    
set smlar.threshold = 5;  -- 匹配到5个以上标签    
select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];    
set smlar.type = overlap;    
set smlar.threshold = 6;  -- 精确匹配    
select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];    
```    
使用smlar插件, 数组类型和gin索引后, 查看执行计划和耗时如下:    
```    
postgres=# explain analyze select uid from tbl_users where tags % array[2];    
                                                             QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=17.65..1112.36 rows=1000 width=4) (actual time=38.272..306.985 rows=77129 loops=1)    
   Recheck Cond: (tags % '{2}'::integer[])    