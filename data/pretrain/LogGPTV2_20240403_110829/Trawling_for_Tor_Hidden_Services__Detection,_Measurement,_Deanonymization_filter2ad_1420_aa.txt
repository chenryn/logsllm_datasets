title:Trawling for Tor Hidden Services: Detection, Measurement, Deanonymization
author:Alex Biryukov and
Ivan Pustogarov and
Ralf-Philipp Weinmann
2013 IEEE Symposium on Security and Privacy
Trawling for Tor Hidden Services: Detection, Measurement, Deanonymization
Alex Biryukov, Ivan Pustogarov, Ralf-Philipp Weinmann
{alex.biryukov,ivan.pustogarov,ralf-philipp.weinmann}@uni.lu
University of Luxembourg
Abstract—Tor
is
popular
the most
volunteer-based
anonymity network consisting of over 3000 volunteer-operated
relays. Apart from making connections to servers hard to
trace to their origin it can also provide receiver privacy for
Internet services through a feature called “hidden services”.
In this paper we expose ﬂaws both in the design and
implementation of Tor’s hidden services that allow an attacker
to measure the popularity of arbitrary hidden services, take
down hidden services and deanonymize hidden services. We
give a practical evaluation of our techniques by studying: (1) a
recent case of a botnet using Tor hidden services for command
and control channels; (2) Silk Road, a hidden service used to
sell drugs and other contraband; (3) the hidden service of the
DuckDuckGo search engine.
Keywords-Tor; anonymity network; privacy; hidden services
I. INTRODUCTION
Research into low-latency anonymity networks has mostly
focused on sender anonymity, i.e. allowing users to connect
to network resources without disclosing their network ad-
dress to the destination. Nonetheless, to guarantee freedom
of speech, responder privacy1 is equally if not even more
important. Allowing the people not only to access informa-
tion anonymously but also to publish anonymously is an
important aspect of nurturing democracy. Similarly, provid-
ing internet services without disclosing their location and
owner puts a constraint on what attacks can be performed
by adversaries.
Tor [7] arguably is the most popular and well-researched
low-latency anonymity network, providing sender privacy
for internet services to its users; additionally responder
privacy can be achieved with Tor by making TCP services
available as hidden services. While the ﬁrst generation
of Tor’s hidden service design has been described in the
original design paper, the current version of Tor is using a
revised design [25]. Justiﬁcations of the design choices and
attack scenarios considered are given in [15].
This paper analyzes the security of Tor hidden services.
We look at
them from different attack perspectives and
provide a systematic picture of what information can be
obtained with very inexpensive means. We focus both on
attacks that allow to censor access to targeted hidden ser-
vices as well as on deanonymization of hidden services. As
the result we believe that many components of the current
1Traditionally called recipient privacy in the case of mix networks.
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.15
80
Tor HS protocol should be improved and while a short term
patch may mitigate some of the problems, a more complex
approach is required both in terms of efﬁciency and in terms
of privacy.
We also study deployed hidden services. For instance, we
apply our ﬁndings to a botnet which makes its command and
control center available to bots as a Tor hidden service (we
extracted its onion address by analyzing a malware sample)
and extrapolate its size by counting the number of hidden
service requests.
Contributions:
• We give a method to measure the popularity of any
hidden service without the consent of the hidden service
operator.
• We show how connectivity to selected hidden services
can be denied by impersonating all of their responsible
hidden services directories.
• We demonstrate a technique that allows one to harvest
hidden service descriptors (and thus get a global picture
of all hidden services in Tor) in approximately 2 days
using only a modest amount of resources.
• We show how to reveal the guard nodes of a Tor hidden
service.
• We propose a large-scale opportunistic deanonymiza-
tion attack, capable of revealing IP addresses of a
signiﬁcant fraction of Tor’s hidden services over a one
year period of time.
Most of our attacks are made practical and cost efﬁcient by
two implementation deﬁciencies in the current versions of
Tor2: (1) Tor relays can cheat and inﬂate their bandwidth
in the consensus despite bandwidth measurements;
this
makes them more likely to be chosen by the path selection
algorithm. (2) Using a technique called “shadowing” we can
phase relays in and out of the consensus at will without them
losing their ﬂags, allowing us to defeat countermeasures
against Sybil [8] attacks.
Ethical considerations: Attacks against Tor can be
simulated in dedicated simulators such as Shadow [13].
However, deployed hidden services are not well studied.
Until now there have been no statistics about the number
of hidden services or their usage statistics. Henceforth,
we deem experiments on the live Tor network that do
2We consider versions up to tor v0.2.4.6-alpha, which was the most
current version at the time of submission.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
not intentionally cause degradation of the network and its
services to be worthwhile and necessary to enhance the
scientiﬁc understanding of hidden services.
Our goal was at no time to perform a full deanonymization
of any target that was not under our control but rather
to show that this would be possible. Moreover, since we
are conducting anonymity research, we did not disclose
information about guard nodes identiﬁed to third parties but
rather discarded identifying data after the experiments.
Roadmap: We start by presenting and discussing related
work in Section II. In Section III, we provide the necessary
background to understand Tor hidden services and our
attacks. In section IV, we show how countermeasures against
Sybil attacks implemented in Tor can be circumvented.
In Section V, we show how an attacker can control the
hidden service directories of any hidden service. We also
demonstrate a technique that allows us to harvest hidden
services quickly and efﬁciently. Section VI shows how to
conﬁrm that a Tor relay serves as a guard node of a given
hidden service, allowing us to determine the IP address of
the hidden service if the guard node is under our control.
In Section VII, we show how an attacker can discover the
guard nodes of a hidden services. In Section VIII, we discuss
countermeasures that can be implemented to defend against
our attacks. Section IX concludes the paper.
A. Examples of hidden services analyzed
A botnet using hidden services: In April 2012, an “ask
me anything” thread (AMA) on the social news website
Reddit appeared in which an anonymous poster, allegedly a
malware coder and botnet operator, claimed to be operating
a botnet with its command and control center running as a
Tor hidden service [1]. The malware installed on the clients
was described to be a modiﬁed version of ZeuS.
Subsequently, a thread on the tor-talk mailing list appeared
[14] in which apparently the same botnet was discussed. We
obtained samples of this malware and found the properties of
the malware matched: just like described in the AMA thread,
it was using a modiﬁed UnrealIRC 3.2.8.1 server3 for one of
the command and control channels and included a Bitcoin
miner. This was the ﬁrst publicly documented instance of a
botnet in the wild using Tor hidden services. While there had
been a talk given at DEFCON in 2011 [4] about how hidden
services could be used to protect botnets from takedowns
of their command and control structure, previously no such
malware had been observed.
Interestingly, not one but two hidden services were op-
erated for command and control: the standard HTTP based
channel4 that ZeuS uses for command as well as an IRC
based one5. Furthermore, the malware creates a hidden ser-
vice (on port 55080) on each install, which allows the botnet
3Unfortunately, not the backdoored distribution by ac1db1tch3z
4mepogl2rljvj374e.onion:80
5eoqallfil766yox6.onion:16667
81
operator to use the infected machine as a SOCKS proxy
for TCP connections through the hidden service. While the
hidden service is constantly running, the command to enable
SOCKS proxy functionality needs to be given through the
IRC command and control channel. In the version of the
malware we analyzed, a Tor v0.2.2.35 binary was executed
by injecting it into a svchost process.
In September 2012, G Data Security described a sample
of apparently the same malware in a blog post [11]; a more
thorough analysis of the botnet was published by Claudio
Guarnieri of Rapid7 in December 2012 [12].
Black Markets on Hidden Services: A number of black
markets exist on Tor hidden services. Silk Road is by
far the most widely known, even triggering requests from
U.S. senators to the U.S. Attorney General and the Drug
Enforcement Agency (DEA) to request it to be shut down
[22].
Silk Road is a market that operates mostly in contraband
goods using Bitcoin as currency. According to a recent study
primarily narcotics and other controlled substances are sold
on this platform [5]. This study estimates the Silk Road
revenue at over USD 1.9 million per month – aggregated
over all sellers – with a 7.5% cut going to the Silk Road
operators.
II. RELATED WORK
The ﬁrst published attacks against Tor hidden services
were presented by Øverlier and Syverson in [19]. They
targeted a previous version of the hidden services design
in which no entry guard nodes were used. In the scenario
described, the attacker needs to control one or more Tor
relays; the idea being that given enough connection attempts,
one of the attacker’s relays will be chosen as the ﬁrst hop
of the rendezvous circuit established by the hidden service.
To mount the attack, the attacker establishes many ren-
dezvous circuits to the hidden service and sends a speciﬁc
trafﬁc pattern along the circuits. She uses trafﬁc correlation
to determine if one her nodes was chosen as a part of
the circuits. Once an attacker’s Tor relays is chosen as the
ﬁrst hop of a circuit, the location of the hidden service is
immediately revealed. As the result of the paper, entry guard
nodes were added to the Tor hidden services speciﬁcation
which prevents the attack in the current version of Tor. The
basic idea of guard nodes (originally named helpers) was
introduced by Wright et al. in [17].
Valet services were proposed by Øverlier and Syverson
as an extension to the hidden services concept to strengthen
DoS resilience of hidden services. This is achieved by
introducing an additional layer of protection for introduction
points [20].
Another approach was presented in [18] and [26]. These
attacks are based on the observation that the system clocks of
computers drift depending on the temperature of the CPU.
An attacker observes timestamps from a PC connected to
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
the Internet and watches how the frequency of the system
clock changes when repeatedly connecting to the hidden
service, causing its CPU load to rise. The attacker requests
timestamps from all candidate servers and ﬁnds the one
exhibiting the expected clock skew pattern. One drawback
of this attack is that it assumes a closed-world model, i.e. the
list of possible candidate servers needs to be be known by
the attacker in advance. Also, the degree of the scalability
of the attack is limited by the fact that the attacker needs to
probe each server in the list.
Some of the building blocks for our attacks have already
been mentioned in the literature. In [15], Loesing mentions
that it is unavoidable for hidden services descriptors to be
collected over a long period of time. However in this paper,
we show how to perform harvesting fast and cheap.
The forensic problem of placing identiﬁable ﬁngerprints
in the log ﬁles of a machine running a hidden service trough
service queries is considered in [24], [10]. This ﬁngerprint is
then used to prove that the conﬁscated machine in fact hosted
a particular content, assuming that requests are logged.
III. BACKGROUND
Tor is a low-latency anonymity network based on the ideas
of onion routing and telescoping. Clients have anonymous
communication to a server by proxying their trafﬁc through
a chain of three Tor relays. Speciﬁcally, prior to sending
the data, a client chooses three Tor relays and uses public
key cryptography to negotiate symmetric session keys with
them, establishing a circuit. Whenever a client wants to send
a piece of data he packs it into Tor cells and encrypts them
with multiple layers of encryption using the session keys.
As the cells travel along the circuit, each relay strips off one
layer of encryption. Hence the server receives the original
piece of data while each relay along the path knows only
which relay it received the Tor cell from and which relay it
forwarded the cell to.
Tor Hidden Services are a feature which was introduced in
2004 to add responder anonymity to Tor. Speciﬁcally, hidden
services allow running an Internet service (e.g. a Web site,
SSH server, etc.) so that the clients of the service do not
know its actual IP address. This is achieved by routing all
communication between the client and the hidden service
through a rendezvous point which connects anonymous
circuits from the client and the server.
The Tor hidden service architecture is comprised of the
following components (see Figure 1):
• Internet service which is available as Tor hidden ser-
vice;
• Client, which wants to access the Internet service;
• Introduction points (IP): Tor relays chosen by the
hidden service and which are used for forwarding
management cells necessary to connect the Client and
the hidden service at the Rendezvous point;
	
















Figure 1. Tor hidden services architecture
• Hidden service directories (HSDir): Tor relays at which
the hidden service publishes its descriptors and which
are communicated by clients in order to learn the
addresses of the hidden service’s introduction points;
• Rendezvous point (RP): a Tor relay chosen by the
Client which is used to forward all the data between
the client and the hidden service.
A. Hidden service side
In order to make an Internet service available as a Tor
hidden service, the operator (Bob) conﬁgures his Tor Onion
Proxy (OP) which automatically generates new RSA key
pair. The ﬁrst 10 bytes of the SHA-1 digest of an ASN.1
encoded version of the RSA public key become the identiﬁer
of the hidden service. The OP then chooses a small number
of Tor relays as introduction points and establishes new
introduction circuit to each one of them (step 1 in Figure 1).
As the next step (step 2), Bob’s OP generates two service
descriptors with different IDs, determines which hidden
services directories among the Tor relays are responsible for
his descriptor and uploads the descriptor to them. A hidden
services directory is a Tor relay which has the HSDir ﬂag.
A Tor relay needs to be operational for at least 25 hours to
obtain this ﬂag.
The hidden service descriptors contain the descriptor ID,
the list of introduction points and the hidden service’s public
key.
B. Client side
When a client (Alice) wants to communicate with the
hidden service, she needs a pointer to this service, which
needs to be transmitted out of band. The pointer is the
hostname of the form ”z.onion”, where z is the base-32
encoded hidden service identiﬁer described above. She then
computes the descriptor IDs of the hidden service (see the
82
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
expression in section III-C) and the list of responsible hidden
service directories and fetches the descriptors from them
(step 3).

  
	
It does
In order
(step 4).
to establish a connection to a given hid-
den service Alice’s OP ﬁrst builds a rendezvous cir-
cuit
this by establishing a circuit
to a randomly chosen Tor relay (OR), and sending a
RELAY_COMMAND_ESTABLISH_RENDEZVOUS cell
to that
OR. The body of that cell contains a Rendezvous cookie
(RC). The rendezvous cookie is an arbitrary 20-byte value,
chosen randomly by Alice’s OP. Alice chooses a new ren-
dezvous cookie for each new connection attempt. Upon re-
ceiving a RELAY_COMMAND_ESTABLISH_RENDEZVOUS cell,
the OR associates the RC with the circuit that sent it. Alice
builds a separate circuit to one of Bob’s chosen introduction
points, and sends it a RELAY_COMMAND_INTRODUCE1 cell
containing the IP address and the ﬁngerprint of the ren-
dezvous point, the hash of the public key of the hidden
service (PK ID), and the rendezvous cookie (step 5).
If the introduction point recognizes PK ID as the public
key of a hidden service it serves, it sends the body of the
cell in a new RELAY_COMMAND_INTRODUCE2 cell down the
corresponding circuit (step 6).
Bob’s
OP
When
receives
the
RELAY_COMMAND_INTRODUCE2 cell,
it decrypts it using
the private key of the corresponding hidden service and
extracts the rendezvous point’s nickname as well as the
rendezvous cookie. Bob’s OP builds a new Tor circuit
ending at Alice’s chosen rendezvous point, and sends a
RELAY_COMMAND_RENDEZVOUS1 cell along this circuit,
containing RC (step 7). Subsequently, the rendezvous point
passes relay cells, unchanged, from each of the two circuits
to the other.
In this way, the client knows only the rendezvous point.
Neither does the hidden service learns the actual IP address
of the client nor does the client learn the IP address of the
hidden service.
C. Choosing responsible HSDirs
A hidden service determines if a hidden services direc-
tory is responsible for storing its descriptor based on the
descriptor’s ID and the directory’s ﬁngerprint6.
Descriptor identiﬁers change periodically every 24 hours
and are computed as follows:
descriptor-id = H(public-key-id || secret-id-part)
secret-id-part = H(descriptor-cookie || time-period ||
replica-index)
The ﬁeld descriptor-cookie is an optional ﬁeld. If
present, it prevents non-authorized clients from accessing the
hidden service. The ﬁeld time period denotes the number of
days since the epoch. This is used to make the responsible
6Each Tor relay is identiﬁed by SHA-1 digest of its public key. We call
this digest as the relay’s ﬁngerprint.
83




