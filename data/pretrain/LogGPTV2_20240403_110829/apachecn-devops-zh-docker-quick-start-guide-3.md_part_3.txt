用户指令允许您为 Dockerfile 中的所有指令以及从构建映像运行的容器设置当前用户(和组)。`USER`指令的语法如下:
```
# User instruction syntax
USER [:] or
USER [:]
```
如果指定用户(或组)作为参数提供给`USER`指令，则该用户(和组)必须已经存在于系统的 passwd 文件(或组文件)中，否则将出现构建错误。如果将`UID`(或`GID`)作为参数提供给`USER`命令，则不执行查看用户(或组)是否存在的检查。考虑以下文件:
```
# USER instruction Dockerfile for Docker Quick Start 
FROM alpine
LABEL maintainer="Earl Waud "
RUN id
USER games:games
run id
CMD ["sh"]
```
当映像构建开始时，当前用户是 root 或`UID=0` `GID=0`。然后，执行`USER`指令，将当前用户和组设置为`games:games`。由于这是 Dockerfile 中`USER`指令的最后一次使用，所有使用构建映像运行的容器都将当前用户(和组)设置为游戏。下面是构建和运行的样子:
![](img/0aca2a20-ee07-4b3b-ba94-bc58b78b8deb.png)
注意第 3/6 步的输出:RUN id 显示当前用户为 root，然后在第 5/6 步(在`USER`指令之后)显示当前用户为 games。最后，请注意从映像运行的容器中有当前的用户游戏。`USER`指令在映像中创建一个零字节大小的层。
# 工作目录指令
我们已经看到了用于演示其他指令的一些示例中使用的`WORKDIR`指令。这有点像 Linux `cd`和`mkdir`命令的组合。`WORKDIR`指令将映像中的当前工作目录更改为指令中提供的值。如果`WORKDIR`指令参数中的任何路径段尚不存在，它将作为指令执行的一部分被创建。`WORKDIR`指令的语法如下:
```
# WORKDIR instruction syntax
WORKDIR instruction syntax
WORKDIR /path/to/workdir
```
`WORKDIR`指令可以对其全部或部分参数使用`ENV`或`ARG`参数值。一个 Dockerfile 可以有多个`WORKDIR`指令，并且每个后续的`WORKDIR`指令都是相对于前一个指令的(如果使用相对路径)。这里有一个例子证明了这种可能性:
```
# WORKDIR instruction Dockerfile for Docker Quick Start
FROM alpine
# Absolute path...
WORKDIR /
# relative path, relative to previous WORKDIR instruction
# creates new folder
WORKDIR sub-folder-level-1
RUN touch file1.txt
# relative path, relative to previous WORKDIR instruction
# creates new folder
WORKDIR sub-folder-level-2
RUN touch file2.txt
# relative path, relative to previous WORKDIR instruction
# creates new folder
WORKDIR sub-folder-level-3
RUN touch file3.txt
# Absolute path, creates three sub folders...
WORKDIR /l1/l2/l3
CMD ["sh"]
```
从这个 Dockerfile 构建映像将导致映像具有三层嵌套文件夹。从映像中运行一个容器并列出文件和文件夹，如下所示:
![](img/c1c550ed-5793-45d4-a4d7-a9f8c4c60f81.png)
`WORKDIR`指令将在结果映像中创建一个零字节大小的层。
# VOLUME 指令
您应该记住，Docker 映像是由一系列互为基础的只读层组成的，当您从 Docker 映像运行容器时，它会创建一个新的读写层，您可以将其视为位于只读层之上。对容器的所有更改都应用于读写层。如果对其中一个只读层中的文件进行了更改，则会创建该文件的副本并将其添加到读写层中。然后，所有更改都将应用于副本。该副本隐藏了在只读层中找到的版本，因此，从运行容器的角度来看，该文件只有一个版本，并且是已经更改的版本。这大致是统一文件系统的工作方式。
这其实是一件很棒的事情。然而，这带来了一个挑战，即当运行的容器退出并被移除时，所有的更改都会随之被移除。通常情况下，这是可以的，除非您希望一些数据在容器寿命结束后仍然存在，或者您希望在容器之间共享数据。Docker 有一个帮助你解决这个问题的指令，`VOLUME`指令。
`VOLUME`指令将在联合文件系统之外创建一个存储位置，通过这样做，允许存储在容器的生命周期之外持续存在。以下是`VOLUME`指令的语法:
```
# VOLUME instruction syntax
VOLUME ["/data"]
# or for creating multiple volumes with a single instruction
VOLUME /var/log /var/db /moreData
```
创建卷的其他方法是向 docker `container run`命令添加卷参数或使用 docker 卷创建命令。我们将在[第 4 章](4.html)、*Docker 卷*中详细介绍这些方法。
这里有一个简单的 Dockerfile 示例。它在`/myvol`创建一个卷，该卷将有一个名为`greeting`的文件:
```
# VOLUME instruction Dockerfile for Docker Quick Start
FROM alpine
RUN mkdir /myvol
RUN echo "hello world" > /myvol/greeting
VOLUME /myvol
CMD ["sh"]
```
基于从该 Dockerfile 生成的映像运行容器将在最初包含`greeting`文件的主机系统上创建装载点。当容器退出时，挂载点将保持不变。在运行具有您希望持久化的挂载点的容器时，请小心使用`--rm`参数。在没有其他体积参数的情况下，使用`--rm`将导致装载点在容器退出时与容器一起被清理。这是它的样子:
![](img/b5f7a39c-bbc2-4ed6-96a3-96327e0839af.png)
我们从没有卷开始。然后，我们在分离模式下运行一个基于从前面的 Dockerfile 生成的映像的容器。我们再次检查卷，看到通过运行容器创建的卷。然后，我们停止容器，再次检查卷，现在卷不见了。通常，使用`VOLUME`指令的目的是在容器消失后将数据保存在装载点。因此，如果您要在运行容器时使用`--rm`，您应该包括`--mount`运行参数，我们将在[第 4 章](4.html)、*Docker 卷*中详细介绍。
您可以使用卷的装载点与主机上的数据进行交互。这里有一个例子可以证明这一点:
![](img/bd92fd61-ea21-4375-850c-4e759713d89e.png)
在这个演示中，我们运行一个基于用前面的 Dockerfile 创建的映像的容器。然后，我们列出卷并看到 myvolsrc 卷(因为我们在 run 命令中提供了这个名称，所以我们已经知道了它的名称，但是您可以使用`ls`命令来查找您可能不知道的卷名称)。使用卷的名称，我们检查卷以找到它在主机上的装载点。为了验证容器中卷的内容，我们使用 exec 命令对文件夹进行 ls。接下来，使用挂载点路径，我们使用 touch 命令创建一个新文件。最后，我们使用相同的 exec 命令，并看到容器内部的卷已被更改(来自容器外部的操作)。同样，如果容器更改了卷的内容，它们会立即反映在主机装载点上。
The preceding example will not work on OS X directly as shown. It requires some extra work. Don't panic though! We'll show you how to deal with the extra work required for OS X in [Chapter 4](4.html), *Docker Volumes*.
使用`VOLUME`指令既强大又危险。它的强大之处在于，它让您拥有的数据可以在容器的生命周期之外持续存在。这是危险的，因为数据是瞬间从容器传递到主机的，如果容器被破坏了，那将会带来麻烦。这就是为什么出于安全考虑，最好不要在您的 Dockerfiles 中包含基于主机的 VOLUME 挂载。我们将在[第 4 章](4.html)*Docker 卷*中介绍一些更安全的替代品。
`VOLUME`指令将向生成的 Docker 映像添加一个零字节大小的层。
# EXPOSE 指令
`EXPOSE`指令是一种记录当使用 Dockerfile 构建的映像运行容器时，映像期望打开哪些网络端口的方法。`EXPOSE`指令的语法如下:
```
# EXPOSE instruction syntax
EXPOSE  [/...]
```
重要的是要理解，在 Dockerfile 中包含`EXPOSE`指令实际上并不会打开容器中的网络端口。当容器在其 Dockerfile 中使用`EXPOSE`指令从映像中运行时，仍然需要包含`-p`或`-P`参数来实际打开容器的网络端口。
您可以根据需要在 Dockerfile 中包含多个`EXPOSE`指令。在运行时包含`-P`参数是为 Dockerfile 中包含的所有`EXPOSE`指令自动打开端口的快捷方式。使用运行命令上的`-P`参数时，将随机分配相应的主机端口。
将`EXPOSE`指令想象成来自映像开发者的消息，告诉您映像中的应用期望您在运行容器时打开指定的端口。`EXPOSE`指令在结果映像中创建一个零字节大小的层。
# 运行指令
`RUN`指令是 Dockerfile 的真正主力。这是一个工具，通过它您可以对最终的 docker 映像产生最大的影响。基本上，它允许您执行映像中的任何命令。`RUN`指令有两种形式。以下是语法:
```
# RUN instruction syntax
# Shell form to run the command in a shell
# For Linux the default is "/bin/sh -c"
# For Windows the default is "cmd /S /C"
RUN 
# Exec form
RUN ["executable", "param1", "param2"]
```
每一条`RUN`指令都会在映像中创建一个新的图层，而后续每条指令的图层都将建立在`RUN`指令图层的结果上。指令的外壳形式将使用默认外壳，除非它被`SHELL`指令覆盖，我们将在*外壳指令*部分讨论。如果您正在构建一个不包含 shell 的容器，您将需要使用`RUN`指令的 exec 形式。您也可以使用指令的 exec 形式来使用不同的 shell。例如，要使用 bash shell 运行命令，您可以添加一条`RUN`指令，如下所示:
```
# Exec form of RUN instruction using bash
RUN ["/bin/bash", "-c", "echo hello world > /myvol/greeting"]
```
`RUN`命令的用途仅受想象力的限制，因此提供一份详尽的`RUN`指令样本列表是不可能的，但这里有几个使用这两种指令形式的例子，只是为了给你一些想法:
```
# RUN instruction Dockerfile for Docker Quick Start
FROM ubuntu
RUN useradd --create-home -m -s /bin/bash dev
RUN mkdir /myvol