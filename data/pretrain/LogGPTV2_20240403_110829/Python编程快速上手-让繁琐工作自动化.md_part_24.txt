入了re.DOTALL，它将匹配所有字符。这就是为什么newlineRegex.search()调用匹配完
整的字符串，包括其中的换行字符。
7.10 正则表达式符号复习
本章介绍了许多表示法，所以这里快速复习一下学到的内容：
 ?匹配零次或一次前面的分组。
 *匹配零次或多次前面的分组。
 +匹配一次或多次前面的分组。
 {n}匹配n次前面的分组。
 {n,}匹配n次或更多前面的分组。
 {,m}匹配零次到m次前面的分组。
 {n,m}匹配至少n次、至多m次前面的分组。
 {n,m}?或*?或+?对前面的分组进行非贪心匹配。
 ^spam意味着字符串必须以spam开始。
 spam$意味着字符串必须以spam结束。
 .匹配所有字符，换行符除外。
 \d、\w和\s分别匹配数字、单词和空格。
 \D、\W和\S分别匹配出数字、单词和空格外的所有字符。
 [abc]匹配方括号内的任意字符（诸如a、b或c）。
 [^abc]匹配不在方括号内的任意字符。
7.11 不区分大小写的匹配
通常，正则表达式用你指定的大小写匹配文本。例如，下面的正则表达式匹配
完全不同的字符串：
>>> regex1 = re.compile('RoboCop')
>>> regex2 = re.compile('ROBOCOP')
>>> regex3 = re.compile('robOcop')
>>> regex4 = re.compile('RobocOp')
但是，有时候你只关心匹配字母，不关心它们是大写或小写。要让正则表达式
不区分大小写，可以向re.compile()传入re.IGNORECASE或re.I，作为第二个参数。
在交互式环境中输入以下代码：
Python编程快速上手——让繁琐工作自动化
>>> robocop = re.compile(r'robocop', re.I)
>>> robocop.search('RoboCop is part man, part machine, all cop.').group()
'RoboCop'
>>> robocop.search('ROBOCOP protects the innocent.').group()
'ROBOCOP'
>>> robocop.search('Al, why does your programming book talk about robocop so much?').group()
'robocop'
7.12 用 sub()方法替换字符串
正则表达式不仅能找到文本模式，而且能够用新的文本替换掉这些模式。Regex
对象的sub()方法需要传入两个参数。第一个参数是一个字符串，用于取代发现的匹
配。第二个参数是一个字符串，即正则表达式。sub()方法返回替换完成后的字符串。
例如，在交互式环境中输入以下代码：
>>> namesRegex = re.compile(r'Agent \w+')
>>> namesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')
'CENSORED gave the secret documents to CENSORED.'
有时候，你可能需要使用匹配的文本本身，作为替换的一部分。在sub()的第一
个参数中，可以输入\1、\2、\3……。表示“在替换中输入分组1、2、3……的文本”。
例如，假定想要隐去密探的姓名，只显示他们姓名的第一个字母。要做到这一
点，可以使用正则表达式Agent (\w)\w*，传入r'\1****'作为sub()的第一个参数。字
符串中的\1将由分组1匹配的文本所替代，也就是正则表达式的(\w)分组。
>>> agentNamesRegex = re.compile(r'Agent (\w)\w*')
>>> agentNamesRegex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent
Eve knew Agent Bob was a double agent.')
A**** told C**** that E**** knew B**** was a double agent.'
7.13 管理复杂的正则表达式
如果要匹配的文本模式很简单，正则表达式就很好。但匹配复杂的文本模式，
可能需要长的、费解的正则表达式。你可以告诉re.compile()，忽略正则表达式字符
串中的空白符和注释，从而缓解这一点。要实现这种详细模式，可以向re.compile()
传入变量re.VERBOSE，作为第二个参数。
现在，不必使用这样难以阅读的正则表达式：
phoneRegex = re.compile(r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}
(\s*(ext|x|ext.)\s*\d{2,5})?)')
你可以将正则表达式放在多行中，并加上注释，像这样：
phoneRegex = re.compile(r'''(
(\d{3}|\(\d{3}\))? # area code
(\s|-|\.)? # separator
第7章 模式匹配与正则表达式
\d{3} # first 3 digits
(\s|-|\.) # separator
\d{4} # last 4 digits
(\s*(ext|x|ext.)\s*\d{2,5})? # extension
)''', re.VERBOSE)
请注意，前面的例子使用了三重引号('")，创建了一个多行字符串。这样就可以
将正则表达式定义放在多行中，让它更可读。
正则表达式字符串中的注释规则，与普通的Python代码一样：#符号和它后面直
到行末的内容，都被忽略。而且，表示正则表达式的多行字符串中，多余的空白字符
也不认为是要匹配的文本模式的一部分。这让你能够组织正则表达式，让它更可读。
7.14 组合使用 re.IGNOREC ASE、re.DOTALL 和 re.VERBOSE
如果你希望在正则表达式中使用 re.VERBOSE 来编写注释，还希望使用
re.IGNORECASE 来忽略大小写，该怎么办？遗憾的是，re.compile()函数只接受一
个值作为它的第二参数。可以使用管道字符（|）将变量组合起来，从而绕过这个限
制。管道字符在这里称为“按位或”操作符。
所以，如果希望正则表达式不区分大小写，并且句点字符匹配换行，就可以这
样构造re.compile()调用：
>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL)
使用第二个参数的全部3个选项，看起来像这样：
>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL | re.VERBOSE)
这个语法有一点老式，源自于早期的Python版本。位运算符的细节超出了本书
的范围，更多的信息请查看资源http://nostarch.com/automatestuff/。可以向第二个参
数传入其他选项，它们不常用，但你也可以在前面的资源中找到有关它们的信息。
7.15 项目：电话号码和 E-mail 地址提取程序
假设你有一个无聊的任务，要在一篇长的网页或文章中，找出所有电话号码和
邮件地址。如果手动翻页，可能需要查找很长时间。如果有一个程序，可以在剪贴
板的文本中查找电话号码和E-mail地址，那你就只要按一下Ctrl-A选择所有文本，
按下Ctrl-C将它复制到剪贴板，然后运行你的程序。它会用找到的电话号码和E-mail
地址，替换掉剪贴板中的文本。
当你开始接手一个新项目时，很容易想要直接开始写代码。但更多的时候，最
好是后退一步，考虑更大的图景。我建议先草拟高层次的计划，弄清楚程序需要做
什么。暂时不要思考真正的代码，稍后再来考虑。现在，先关注大框架。
例如，你的电话号码和E-mail地址提取程序需要完成以下任务：
Python编程快速上手——让繁琐工作自动化
 从剪贴板取得文本。
 找出文本中所有的电话号码和E-mail地址。
 将它们粘贴到剪贴板。
现在你可以开始思考，如何用代码来完成工作。代码需要做下面的事情：
 使用pyperclip模块复制和粘贴字符串。
 创建两个正则表达式，一个匹配电话号码，另一个匹配E-mail地址。
 对两个正则表达式，找到所有的匹配，而不只是第一次匹配。
 将匹配的字符串整理好格式，放在一个字符串中，用于粘贴。
 如果文本中没有找到匹配，显示某种消息。
这个列表就像项目的路线图。在编写代码时，可以独立地关注其中的每一步。
每一步都很好管理。它的表达方式让你知道在Python中如何去做。
第 1步：为电话号码创建一个正则表达式
首先，你需要创建一个正则表达式来查找电话号码。创建一个新文件，输入以
下代码，保存为phoneAndEmail.py：
#! python3
# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
import pyperclip, re
phoneRegex = re.compile(r'''(
(\d{3}|\(\d{3}\))? # area code
(\s|-|\.)? # separator
(\d{3}) # first 3 digits
(\s|-|\.) # separator
(\d{4}) # last 4 digits
(\s*(ext|x|ext.)\s*(\d{2,5}))? # extension
)''', re.VERBOSE)
# TODO: Create email regex.
# TODO: Find matches in clipboard text.
# TODO: Copy results to the clipboard.
TODO注释仅仅是程序的框架。当编写真正的代码时，它们会被替换掉。
电话号码从一个“可选的”区号开始，所以区号分组跟着一个问号。因为区号
可能只是 3 个数字（即\d{3}），或括号中的 3 个数字（即\(\d{3}\)），所以应该用管
道符号连接这两部分。可以对这部分多行字符串加上正则表达式注释# Area code，
帮助你记忆(\d{3}|\(\d{3}\))?要匹配的是什么。
电话号码分割字符可以是空格（\s）、短横（-）或句点（.），所以这些部分也应
该用管道连接。这个正则表达式接下来的几部分很简单：3 个数字，接下来是另一
个分割符，接下来是4个数字。最后的部分是可选的分机号，包括任意数目的空格，
接着ext、x或ext.，再接着2到5位数字。
第7章 模式匹配与正则表达式
第 2步：为E-mail 地址创建一个正则表达式
还需要一个正则表达式来匹配E-mail地址。让你的程序看起来像这样：
#! python3
# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
import pyperclip, re
phoneRegex = re.compile(r'''(
--snip--
# Create email regex.
emailRegex = re.compile(r'''(
 [a-zA-Z0-9._%+-]+ # username
 @ # @ symbol
 [a-zA-Z0-9.-]+ # domain name
(\.[a-zA-Z]{2,4}) # dot-something
)''', re.VERBOSE)
# TODO: Find matches in clipboard text.
# TODO: Copy results to the clipboard.
E-mail 地址的用户名部分是一个或多个字符，字符可以包括：小写和大写字
母、数字、句点、下划线、百分号、加号或短横。可以将所有这些放入一个字符分
类：[a-zA-Z0-9._%+-]。
域名和用户名用@符号分割，域名允许的字符分类要少一些，只允许字母、
数字、句点和短横：[a-zA-Z0-9.-]。最后是“dot-com”部分（技术上称为“顶级域
名”），它实际上可以是“dot-anything”。它有2到4个字符。
E-mail地址的格式有许多奇怪的规则。这个正则表达式不会匹配所有可能的、
有效的E-mail地址，但它会匹配你遇到的大多数典型的电子邮件地址。
第 3步：在剪贴板文本中找到所有匹配
既然已经指定了电话号码和电子邮件地址的正则表达式，就可以让 Python 的 re
模块做辛苦的工作，查找剪贴板文本中所有的匹配。pyperclip.paste()函数将取得一个
字符串，内容是剪贴板上的文本，findall()正则表达式方法将返回一个元组的列表。
让你的程序看起来像这样：
#! python3
# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
import pyperclip, re
phoneRegex = re.compile(r'''(
--snip--
# Find matches in clipboard text.
text = str(pyperclip.paste())
 matches = []
 for groups in phoneRegex.findall(text):
phoneNum = '-'.join([groups[1], groups[3], groups[5]])
Python编程快速上手——让繁琐工作自动化
if groups[8] != '':
phoneNum += ' x' + groups[8]
matches.append(phoneNum)
 for groups in emailRegex.findall(text):
matches.append(groups[0])
# TODO: Copy results to the clipboard.
每个匹配对应一个元组，每个元组包含正则表达式中每个分组的字符串。回忆一
下，分组0匹配整个正则表达式，所以在元组下标0处的分组，就是你感兴趣的内容。
在处可以看到，你将所有的匹配保存在名为 matches 的列表变量中。它从一
个空列表开始，经过几个for循环。对于E-mail地址，你将每次匹配的分组0添加
到列表中。对于匹配的电话号码，你不想只是添加分组0。虽然程序可以“检测”
几种不同形式的电话号码，你希望添加的电话号码是唯一的、标准的格式。
phoneNum变量包含一个字符串，它由匹配文本的分组1、3、5和8构成。（这些
分组是区号、前3个数字、后4个数字和分机号。）
第 4步：所有匹配连接成一个字符串，复制到剪贴板
现在，E-mail 地址和电话号码已经作为字符串列表放在 matches 中，你希望将
它们复制到剪贴板。pyperclip.copy()函数只接收一个字符串值，而不是字符串的列
表，所以你在matches上调用join()方法。
为了更容易看到程序在工作，让我们将所有找到的匹配都输出在终端上。如果
没有找到电话号码或E-mail地址，程序应该告诉用户。
让你的程序看起来像这样：
#! python3
# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
--snip--
for groups in emailRegex.findall(text):
matches.append(groups[0])
# Copy results to the clipboard.
if len(matches) > 0:
pyperclip.copy('\n'.join(matches))
print('Copied to clipboard:')
print('\n'.join(matches))
else:
print('No phone numbers or email addresses found.')