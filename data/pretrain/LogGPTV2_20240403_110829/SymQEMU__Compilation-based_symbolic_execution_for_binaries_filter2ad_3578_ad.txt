experiment, 30 iterations, 24 hours).
Figure 11 shows the results for the open-source targets.
We obtained coverage data for AFL and the hybrid fuzzers
from the logs written by afl-fuzz, using the same set of
AFL-instrumented binaries to evaluate each tool; for S2E, we
ran the generated program inputs through afl-showmap
(again, using the same binaries) in order to compute an
equivalent coverage metric. Moreover, recall
that we used
identical strategies to integrate AFL with QSYM, SymCC and
SymQEMU. We see that SymQEMU achieves signiﬁcantly
more coverage over time than both QSYM and S2E, thus
outperforming those state-of-the-art binary symbolic executors.
It also covers more code than pure AFL, showing the value of
symbolic execution in exploring the target programs. Finally,
SymQEMU somewhat surprisingly reaches a coverage level
that is comparable with SymCC’s results, even though SymCC
has access to the targets’ source code and therefore more
potential for optimization. Manual investigation shows that
SymCC does not use this potential to the maximum extent
10
Fig. 10. Excerpt from the FuzzBench report: Mean coverage growth over time (and 95 % conﬁdence intervals) for the FuzzBench target woff2. SymQEMU
reaches 3rd rank on this target.
)
%
(
y
t
i
s
n
e
d
p
a
m
L
F
A
11
10
9
8
7
6
5
4
3
12
10
8
6
4
2
0
20
18
16
14
12
10
8
6
4
2
0
0h
5h
10h 15h 20h 25h
0h
5h
10h
15h
20h
25h
0h
5h
10h
15h
20h
25h
OpenJPEG
libarchive
tcpdump
SymQEMU
SymCC
QSYM
AFL
S2E
Fig. 11. Coverage over time on the open-source targets, expressed via the density of AFL’s coverage map, showing median and 95 % conﬁdence corridor.
SymQEMU achieves higher coverage than all other systems with statistical signiﬁcance (Mann-Whitney U, p < 0.005 two-tailed), except on libarchive, where
there is no statistically signiﬁcant difference with SymCC. Note, however, that SymCC requires the source code of the program under test.
)
%
(
y
t
i
s
n
e
d
p
a
m
L
F
A
6.5
6
5.5
5
4.5
4
3.5
3
2.5
2
SymQEMU
QSYM
AFL
S2E
)
s
(
e
m
T
i
60
50
40
30
20
10
0
QSYM
SymQEMU
SymCC
OpenJPEG
libarchive
tcpdump
rar
0h
5h
10h
15h
20h
25h
rar
Fig. 12. Coverage over time on the closed-source rar program, expressed
via the density of AFL’s coverage map, showing median and 95 % conﬁdence
corridor. All tools except S2E converge towards the same coverage level, but
SymQEMU reaches it faster than AFL and therefore requires less computing
power per coverage. Moreover, its speed is similar to QSYM’s, but QSYM
cannot be easily ported from x86 to other targets.
the ﬁgure because there is no equivalent notion of execution
time for its approach: while we could measure how long
each execution state exists, this would ignore the fact that
S2E performs many checks that the other systems delegate
to fuzzer and sanitizers, and hence would put S2E at an unfair
disadvantage in the comparison.
11
Fig. 13. Target execution times per symbolic executor and target program.
Note that SymQEMU is faster than QSYM and at least as fast as the source-
based SymCC. The notion of execution time is not applicable to S2E; SymCC
cannot analyze rar because the source code is not available.
C. Benchmark comparison
We have seen that SymQEMU outperforms state-of-the-art
binary-only symbolic executors in real-world hybrid fuzzing.
Let us now check our hypothesis that those results are indeed
due to SymQEMU’s high execution speed. To this end, we
performed a third set of experiments with the goal of assessing
precisely how fast SymQEMU executes code in comparison
with the other two concolic executors in our comparison,
SymCC and QSYM.
The core idea of this experiment is to run concolic execu-
tion on a ﬁxed set of inputs, therefore making all systems in the
comparison follow the same paths on the same target programs.
TABLE III.
RESULTS OF OUR BENCHMARK COMPARISON ON FIXED
INPUTS, VISUALIZED IN FIGURE 14.
A. Full-system emulation
QSYM
SymQEMU
SymCC
OpenJPEG
libarchive
tcpdump
Exec
SMT
Total
Exec
SMT
Total
Exec
SMT
Total
8.5 h
15.8 h
24.3 h
6.8 h
7.6 h
14.3 h
8.2 h
16.9 h
25.1 h
35.1 %
4.0 h
64.9 % 19.2 h
23.2 h
17.2 %
0.5 h
82.8 % 21.0 h
21.5 h
47.3 %
52.7 %
32.7 %
67.3 %
1.7 h
5.0 h
6.7 h
5.2 h
4.0 h
9.1 h
25.1 %
74.9 %
56.5 %
43.5 %
0.7 h
0.1 h
0.8 h
1.2 h
0.8 h
2.0 h
2.3 %
97.7 %
82.6 %
17.4 %
59.3 %
40.7 %
In other words, we remove one variable from the comparison:
the choice of paths to follow. Concretely, for each of the three
open-source targets used in Section IV-B we combined the
test cases found by SymQEMU, SymCC and QSYM during
the 24-hour hybrid-fuzzing session; then we selected 1000 test
cases per target at random. We performed concolic execution
on the selected inputs, measuring the time spent in execution
and SMT solving, respectively.
Figure 14 and Table III show the observed time split
per target and symbolic executor. We see that, on all three
targets, SymQEMU spends less time in execution than QSYM;
this provides evidence that SymQEMU’s higher performance
in hybrid fuzzing (see Figure 11) is indeed due to higher
execution speed. The source-based SymCC spends even less
time in execution than both SymQEMU and QSYM because,
unlike the binary-only symbolic executors, SymCC does not
incur the overhead of dynamic binary translation or dynamic
binary instrumentation.
It is also interesting to note that the three systems invest
different amounts of time in SMT solving. Since the program
paths are ﬁxed and the symbolic executors use the same
backend to interact with the solver, we conclude that there is a
difference in the difﬁculty of SMT queries. Manual inspection
conﬁrms that SymCC’s queries are shorter and less nested than
those generated by the other systems (except on the OpenJPEG
target, where we see a lot of arithmetic and bit-level operations
in all systems’ queries, which we attribute to the compression
algorithm of the JPEG format). The difference in difﬁculty
is likely due to the different intermediate representations that
the analyses are based on. In particular, our observation that
SymCC often generates simpler queries and consequently
spends less time in the SMT solver than the other two systems
provides evidence for our earlier hypothesis [19] that high-level
intermediate representations lead to simpler SMT queries.
In summary, we have shown that SymQEMU outperforms
state-of-the-art binary-only symbolic executors in real-world
hybrid fuzzing, and that the reason for its higher performance
is its fast execution component. In comparison with QSYM,
SymQEMU achieves 19 % higher coverage on average after
24 hours (Figures 11 and 12, geometric mean) and 58 % faster
execution in the benchmark experiment (Figure 14, geometric
mean).
V. FUTURE WORK
We have several
ideas
SymQEMU, which we document in this section.
for
future work based on
SymQEMU currently performs symbolic execution of
Linux user-mode binaries. It would be interesting to extend
it to full-system analysis. Especially in the embedded space, it
is common for ﬁrmware to run on custom operating systems
or even directly on hardware [16]; analyzing such programs
would require support for full-system emulation.
We believe that it is possible to implement such a system
on top of SymQEMU. The basic process of lifting the target to
TCG ops, instrumenting those, and compiling the result down
to host machine code would stay the same. One would have
to add a mechanism to introduce symbolic data into the guest
system (e.g., inspired by S2E’s fake-instruction technique),
and the shadow-memory system would have to account for
the virtual MMU when mapping between guest memory and
symbolic expressions. The result would be a symbolic executor
that could reason about kernel code in addition to user-space
programs. Moreover, the extended system would be able to
analyze code for non-Linux operating systems, as well as bare-
metal ﬁrmware.
B. Caching across executions
Hybrid fuzzing is characterized by a large number of
successive executions of the same program. Being a dynamic
translator, QEMU (and hence, SymQEMU) translates the target
program on demand, at run time. And although the results of
the translation are cached for the duration of a single execution,
they are discarded when the target program terminates. We
conjecture that
the overall performance of hybrid fuzzing
with SymQEMU could be improved by caching translation
results across executions. The main challenges would be to
ensure that the target is loaded deterministically, and special
handling would need to be put in place for self-modifying
code. Therefore,
the potential beneﬁt of this optimization
depends heavily on the characteristics of the program under
test.
C. Symbolic QEMU helpers
QEMU represents target machine code with TCG ops.
However, some target
instructions are too complex to be
efﬁciently expressed in TCG, especially on CISC architectures
(e.g., Intel’s SSE extensions). In such cases, QEMU uses
helpers: built-in compiled functions that can be called from
TCG, emulating single complex instructions of the target
architecture. Since helpers operate outside the regular TCG
framework, SymQEMU’s instrumentation at the TCG level
cannot insert symbolic handling into them. The result is im-
plicit concretization, yielding a loss of precision in the analysis
of targets that make heavy use of complex instructions.
We see two ways to implement symbolic handling of
QEMU helpers when the need arises:
1)
One approach is to hand-craft symbolic equivalents
for each required helper, much like the function
summaries used for common libc functions in some
symbolic executors.13 This approach is easy to imple-
ment but does not scale to large numbers of helpers.
13E.g., http://s2e.systems/docs/Plugins/Linux/FunctionModels.html.
12
)
d
e
z
i
l
a
m
r
o
n
(
e
m
T
i
1
0.8
0.6
0.4
0.2
0
)
d
e
z
i
l
a
m
r
o
n
(
e
m