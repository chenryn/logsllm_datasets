## PostgreSQL 11 postgresql.conf 参数模板 - 珍藏级      
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-12-03                                                             
### 标签                                                               
PostgreSQL , 参数 , 模板 , postgresql.conf , pg_hba.conf , postgresql.auto.conf          
----                                                               
## 背景       
## 系统参数模板      
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)        
[《PostgreSQL 10 + PostGIS + Sharding(pg_pathman) + MySQL(fdw外部表) on ECS 部署指南(适合新用户) - 珍藏级》](../201710/20171018_01.md)        
## PostgreSQL 11 postgresql.conf 参数模板      
内有注释，建议找到对应文章查看详细背景和原理介绍。      
```      
# -----------------------------      
# PostgreSQL configuration file      
# -----------------------------      
#      
# This file consists of lines of the form:      
#      
#   name = value      
#      
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with      
# "#" anywhere on a line.  The complete list of parameter names and allowed      
# values can be found in the PostgreSQL documentation.      
#      
# The commented-out settings shown in this file represent the default values.      
# Re-commenting a setting is NOT sufficient to revert it to the default value;      
# you need to reload the server.      
#      
# This file is read on server startup and when the server receives a SIGHUP      
# signal.  If you edit the file on a running system, you have to SIGHUP the      
# server for the changes to take effect, run "pg_ctl reload", or execute      
# "SELECT pg_reload_conf()".  Some parameters, which are marked below,      
# require a server shutdown and restart to take effect.      
#      
# Any parameter can also be given as a command-line option to the server, e.g.,      
# "postgres -c log_connections=on".  Some parameters can be changed at run time      
# with the "SET" SQL command.      
#      
# Memory units:  kB = kilobytes        Time units:  ms  = milliseconds      
#                MB = megabytes                     s   = seconds      
#                GB = gigabytes                     min = minutes      
#                TB = terabytes                     h   = hours      
#                                                   d   = days      
#------------------------------------------------------------------------------      
# FILE LOCATIONS      
#------------------------------------------------------------------------------      
# The default values of these variables are driven from the -D command-line      
# option or PGDATA environment variable, represented here as ConfigDir.      
#data_directory = 'ConfigDir'           # use data in another directory      
                                        # (change requires restart)      
#hba_file = 'ConfigDir/pg_hba.conf'     # host-based authentication file      
                                        # (change requires restart)      
#ident_file = 'ConfigDir/pg_ident.conf' # ident configuration file      
                                        # (change requires restart)      
# If external_pid_file is not explicitly set, no extra PID file is written.      
#external_pid_file = ''                 # write an extra PID file      
                                        # (change requires restart)      
#------------------------------------------------------------------------------      
# CONNECTIONS AND AUTHENTICATION      
#------------------------------------------------------------------------------      
# - Connection Settings -      
# 监听    
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;      
                                        # comma-separated list of addresses;      
                                        # defaults to 'localhost'; use '*' for all      
                                        # (change requires restart)      
# 根据业务需求设定监听端口      
port = 1921                             # (change requires restart)      
# 比较安全的值：建议不要大于 200 * 四分之一物理内存(GB)， 例如四分之一物理内存为16G，则建议不要超过3200.          
# (假设平均一个连接耗费5MB。  实际上syscache很大、SQL 使用到WORK_MEM，未使用hugepage并且访问到大量shared buffer page时，可能消耗更多内存)       
# 如果业务有更多并发连接，可以使用连接池，例如pgbouncer    
# [《PostgreSQL relcache在长连接应用中的内存霸占"坑"》](201607/20160709_01.md)       
# max_connections 公式：物理内存(GB)*1000*(1/4)/5     
max_connections = 2000                  # (change requires restart)      
# 为超级用户保留多少个连接    
superuser_reserved_connections = 10      # (change requires restart)      
# $PGDATA, /tmp中 创建unix socket监听      
unix_socket_directories = '., /tmp'        # comma-separated list of directories      
                                        # (change requires restart)      
#unix_socket_group = ''                 # (change requires restart)      
# 除了OWNER和超级用户，其他用户无法从/tmp unix socket连接该实例      
unix_socket_permissions = 0700          # begin with 0 to use octal notation         
                                        # (change requires restart)      
#bonjour = off                          # advertise server via Bonjour      
                                        # (change requires restart)      
#bonjour_name = ''                      # defaults to the computer name      
                                        # (change requires restart)      
# - TCP Keepalives -      
# see "man 7 tcp" for details      
# 如果你连接数据库空闲一段时间会端口，可能是网络中存在会话超时的设备，建议可以设置一下这个心跳时间，TCP心跳间隔会缩短到60秒。      
tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;      
                                        # 0 selects the system default      
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;      
                                        # 0 selects the system default      
tcp_keepalives_count = 10               # TCP_KEEPCNT;      
                                        # 0 selects the system default      
# - Authentication -      
#authentication_timeout = 1min          # 1s-600s      
# md5 or scram-sha-256   # 如果用户密码的MD5会泄露，建议使用scram-sha-256，但是相互不兼容，请注意。       
# [《PostgreSQL 10.0 preview 安全增强 - SASL认证方法 之 scram-sha-256 安全认证机制》](201703/20170309_01.md)        
password_encryption = md5              # md5 or scram-sha-256      
#db_user_namespace = off      
# GSSAPI using Kerberos       
#krb_server_keyfile = ''      
#krb_caseins_users = off      
# - SSL -      
#ssl = off      
#ssl_ca_file = ''      
#ssl_cert_file = 'server.crt'      
#ssl_crl_file = ''      
#ssl_key_file = 'server.key'      
#ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers      
#ssl_prefer_server_ciphers = on      
#ssl_ecdh_curve = 'prime256v1'      
#ssl_dh_params_file = ''      
#ssl_passphrase_command = ''      
#ssl_passphrase_command_supports_reload = off      
#------------------------------------------------------------------------------      
# RESOURCE USAGE (except WAL)      
#------------------------------------------------------------------------------      
# - Memory -      
# 1/4 主机内存    
# shared_buffers 公式： IF use hugepage: 主机内存*(1/4) ELSE: min(32GB, 主机内存*(1/4))    
# [《PostgreSQL Huge Page 使用建议 - 大内存主机、实例注意》](201803/20180325_02.md)      
shared_buffers = 24GB                   # min 128kB      
                                        # (change requires restart)      
# 建议shared buffer设置超过32GB时 使用大页，页大小 /proc/meminfo Hugepagesize        
huge_pages = try                # on, off, or try      
                                        # (change requires restart)      
#temp_buffers = 8MB                     # min 800kB      
# 如果用户需要使用两阶段提交，需要设置为大于0，建议与max_connections一样大      
# max_prepared_transactions 公式： max_prepared_transactions=max_connections    
max_prepared_transactions = 2000        # zero disables the feature      
                                        # (change requires restart)      
# Caution: it is not advisable to set max_prepared_transactions nonzero unless      
# you actively intend to use prepared transactions.      
# 可以在会话中设置，如果有大量JOIN，聚合操作，并且期望使用hash agg或hash join。   (排序，HASH都会用到work_mem)    
# 可以设大一些，但是不建议大于    四分之一内存除以最大连接数  .       
# (一条QUERY中可以使用多倍WORK_MEM，与执行计划中的NODE有关)        
# work_mem 公式： max(min(物理内存/4096, 64MB), 4MB)      
work_mem = 8MB                          # min 64kB       
# 创建索引时使用的内存空间。    
# maintenance_work_mem 公式： min( 8G, (主机内存*1/8)/max_parallel_maintenance_workers )        
maintenance_work_mem = 2GB              # min 1MB      
# 在对一张表进行垃圾回收时，用于缓存垃圾版本的ctid，    
# 如果autovacuum work mem填满了，则VACUUM需要进入索引垃圾回收阶段，扫描索引（因此为了避免索引被多次扫描，需要缓存住一张表的所有垃圾TUPLE的CTID）。    
# 一张表（细到单个最底层分区）垃圾回收结束后释放。    
# [《PostgreSQL 垃圾回收参数优化之 - maintenance_work_mem , autovacuum_work_mem》](201902/20190226_01.md)      
# autovacuum_work_mem 公式： min( 8G, (主机内存*1/8)/autovacuum_max_workers )        
autovacuum_work_mem = 1GB               # min 1MB, or -1 to use maintenance_work_mem      
#max_stack_depth = 2MB                  # min 100kB      
dynamic_shared_memory_type = posix      # the default is the first option      
                                        # supported by the operating system:      
                                        #   posix      
                                        #   sysv      
                                        #   windows      
                                        #   mmap      
                                        # use none to disable dynamic shared memory      
                                        # (change requires restart)      
# - Disk -      
# 如果需要限制临时文件使用量，可以设置。      
# 例如, 防止有异常的递归调用，无限使用临时文件。      
#temp_file_limit = -1                   # limits per-process temp file space      
                                        # in kB, or -1 for no limit      
# - Kernel Resources -      
## 如果你的数据库有非常多小文件（比如有几十万以上的表，还有索引等，并且每张表都会被访问到时），      
# 建议FD可以设多一些，避免进程需要打开关闭文件。      
## 但是不要大于前面章节系统设置的ulimit -n(open files)      
# max_files_per_process=655360      
#max_files_per_process = 1000           # min 25      
                                        # (change requires restart)      
# - Cost-Based Vacuum Delay -      
# 如果你的系统IO非常好，则可以关闭vacuum delay   ， 避免因为垃圾回收任务周期长导致的膨胀。      
vacuum_cost_delay = 0                   # 0-100 milliseconds      
#vacuum_cost_page_hit = 1               # 0-10000 credits      
#vacuum_cost_page_miss = 10             # 0-10000 credits      
#vacuum_cost_page_dirty = 20            # 0-10000 credits      
# io很好，CPU核数很多的机器，设大一些。如果设置了vacuum_cost_delay = 0 ，则这个不需要配置      
vacuum_cost_limit = 10000                # 1-10000 credits      
# - Background Writer -      
bgwriter_delay = 10ms                   # 10-10000ms between rounds      
bgwriter_lru_maxpages = 1000            # max buffers written/round, 0 disables      
bgwriter_lru_multiplier = 10.0          # 0-10.0 multiplier on buffers scanned/round      
bgwriter_flush_after = 512kB            # measured in pages, 0 disables      
# - Asynchronous Behavior -      
effective_io_concurrency = 0            # 1-1000; 0 disables prefetching      
# wal sender, user 动态fork的process, parallel worker等都算作 worker process, 所以你需要设置足够大.       
max_worker_processes = 256              # (change requires restart)      
#  如果需要使用并行创建索引，设置为大于1 ，不建议超过 主机cores-4      
# max_parallel_maintenance_workers 公式： min( max(2, CPU核数/2) , 16 )     
max_parallel_maintenance_workers = 6    # taken from max_parallel_workers      
#  如果需要使用并行查询，设置为大于1 ，不建议超过 主机cores-4      
# max_parallel_workers_per_gather 公式： min( max(2, CPU核数-4) , 24 )     
max_parallel_workers_per_gather = 0     # taken from max_parallel_workers      
# leader 是否与work process一起参与并行计算，如果ON，则并行度会默认+1。      
parallel_leader_participation = on      
#  如果需要使用并行查询，设置为大于1 ，不建议超过 主机cores-2      
#  必须小于 max_worker_processes       
# max_parallel_workers 公式： max(2, CPU核数-4)    
max_parallel_workers = 32               # maximum number of max_worker_processes that      
                                        # can be used in parallel operations      
# 是否启用snapshot too old技术，避免长事务导致的膨胀    
# 会导致性能一定的下降，约8%    
old_snapshot_threshold = 6h            # 1min-60d; -1 disables; 0 is immediate      
                                        # (change requires restart)      
#backend_flush_after = 256               # measured in pages, 0 disables      
#------------------------------------------------------------------------------      
# WRITE-AHEAD LOG      
#------------------------------------------------------------------------------      
# - Settings -      
# 需要流复制物理备库、归档、时间点恢复时，设置为replica，需要逻辑订阅或逻辑备库则设置为logical      
wal_level = replica  # minimal, replica, or logical      
                                        # (change requires restart)      
#fsync = on                             # flush data to disk for crash safety      
                                        # (turning this off can cause      
                                        # unrecoverable data corruption)      
# 如果双节点，设置为ON，如果是多副本，同步模式，建议设置为remote_write。       
# 如果磁盘性能很差，并且是OLTP业务。可以考虑设置为off降低COMMIT的RT，提高吞吐(设置为OFF时，可能丢失部分XLOG RECORD)      
synchronous_commit = off                # synchronization level;      
                                        # off, local, remote_write, remote_apply, or on      
# 建议使用pg_test_fsync测试后，决定用哪个最快。通常LINUX下open_datasync比较快。      
#wal_sync_method = fsync                # the default is the first option      
                                        # supported by the operating system:      
                                        #   open_datasync      
                                        #   fdatasync (default on Linux)      
                                        #   fsync      
                                        #   fsync_writethrough      
                                        #   open_sync      
# 如果文件系统支持COW例如ZFS，则建议设置为OFF。     
# 如果文件系统可以保证datafile block size的原子写，在文件系统与IO系统对齐后也可以设置为OFF。      
# 如果底层存储能保证IO的原子写，也可以设置为OFF。      
full_page_writes = on                  # recover from partial page writes      
# 当写FULL PAGE WRITE的io是瓶颈时建议开启      
wal_compression = on                  # enable compression of full-page writes      
# 如果要使用pg_rewind，flashback 时间线，需要打开这个功能    
# [《PostgreSQL pg_rewind，时间线修复，脑裂修复，flashback - 从库开启读写后，回退为只读从库。异步主从发生角色切换后，主库rewind为新主库的从库》](201901/20190128_02.md)      
#wal_log_hints = off                    # also do full page writes of non-critical updates      
                                        # (change requires restart)      
# 建议 min( WAL segment size(默认16MB) , shared_buffers/32 )       
wal_buffers = 16MB                       # min 32kB, -1 sets based on shared_buffers      
                                        # (change requires restart)      
# 如果设置了synchronous_commit = off，建议设置wal_writer_delay      
wal_writer_delay = 10ms         # 1-10000 milliseconds      
wal_writer_flush_after = 1MB            # measured in pages, 0 disables      