The mechanics of compromising 
low entropy RSA keys
Austin Allshouse
This talk is about...
Nominally: 
Recovering private keys from a subset of vulnerable RSA certificates
Functionally: 
Calculating shared factors across large batches of integers
“...using our scalable GCD algorithm for shared factors...”
“...batch GCD on RSA keys, using a custom distributed version...”
“...we adapted the batch GCD implementation…”
p x q = n
random prime
random prime
public modulus
Hello darkness, my old friend...
When primes are reused...
p x q1 = n1;  p x q2 = n2
gcd(n1, n2) = p
n1/p = q1;  n2/p = q2
Select past research...
2012
2016
2018
“Mining your Ps and 
Qs...”
“Weaks Keys Remain 
Widespread...”
“Reaping and breaking 
keys at scale…”
@DEF CON 26
- Discovered widespread 
prime reuse in 
certiﬁcates
- Demonstrated ﬂaws in 
pseudorandom number 
generation
- Greatly expanded scope 
of keys evaluated (81 
million)
- Detail a method of 
parallelizing modulus 
factorization
- Industrialized key 
acquisition and factoring 
on a massive scale from 
diverse sources 
(hundreds of millions)
GCD circa 300 BC (Euclid)
Prime products: (7 x 67) = 469; (11 x 61) = 671; (7 x 59) = 413; (17 x 53) = 901
from itertools import combinations
products = [469, 671, 413, 901]
def gcd(a, b):
  if a == 0:
      return b
  return gcd(b%a, a)
for pair in combinations(products, 2):
   print(f'gcd{pair} = {gcd(*pair)}')
gcd(469, 671) = 1
gcd(469, 413) = 7
gcd(469, 901) = 1
gcd(671, 413) = 1
gcd(671, 901) = 1
gcd(413, 901) = 1
Batch GCD circa 2004 AD (Bernstein)
Product Tree
Building:
child1 * child2 = parent
Remainder Tree
Decomposing: 
parent mod child2 = child
Remainder Tree Leaves
gcd( remainder/product, product ) = shared_factor
Product Tree
117103588987
314699
372113
901
413
671
469
Prime products: (7 x 67) = 469; (11 x 61) = 671; (7 x 59) = 413; (17 x 53) = 901
Remainder Tree
117103588987
117103588987 mod (314699)2 = 
18068128386
117103588987 mod (372113)2 = 
117103588987
117103588987 mod 
(901)2 = 482936
117103588987 mod 
(413)2 = 124313
18068128386 mod 
(671)2 = 407297
18068128386 mod 
(469)2 = 91924
gcd(91924 / 469, 469)
= 7
gcd(407297 / 671, 671)
= 1
gcd(124313 / 413, 413)
= 7
gcd(482936 / 901, 901)
= 1
Prime products: (7 x 67) = 469; (11 x 61) = 671; (7 x 59) = 413; (17 x 53) = 901
Parallelization - 150 million 2048-bit moduli
Batch Count
1
5
Batch Size
150 million
30 million
Product Tree Size
> 1 terabyte
~ 180 gigabytes
Tree Permutations
1
20
Tree permutation
Batch 1:
(7 x 67) = 469; (11 x 61) = 671; (7 x 59) = 413; (17 x 53) = 901
Batch 2: (17 x 47) = 799; (23 x 43) = 989; (29 x 41) = 1189; (23 x 37) = 851
117103588987
314699
372113
901
413
671
469
799566308029
790211
1011839
851
1189
989
799
(117103588987 x 799566308029) = 93632084303281054076623
gcd(36113 / 
469, 469)
= 7
gcd(50996 / 
671, 671)
= 1
gcd(101185 / 
413, 413)
= 7
gcd(505461 / 
901, 901)
= 17
gcd(258077 / 
799, 799)
= 17
gcd(727904 / 
989, 989)
= 23
gcd(1223481 / 
1189, 1189)
= 1
gcd(665482 / 
851, 851)
= 23
Implementation tech stack
product
product
product
product
product
product
modulus
modulus
modulus
modulus
modulus
S3
E
B
S
gob
goroutines/gmp
Language
golang
Arithmetic
github.com/ncw/gmp
Storage
S3 / EBS
Serialization
gob
Concurrency
goroutines
Orchestration
bash
Old and busted certificates
At risk...
Industry Sectors
Relative Likelihood of Vulnerability
Finance, Insurance, Legal
1x
Business Services, Engineering
3x
Government, Manufacturing, Hospitality
4x
Defense, Entertainment, Real Estate
6x
Utilities
10x
●
Vendor auto-generated device certificates
●
Old, unmanaged devices (i.e. shadow IT)
Shared primes are device-specific; disjoint
In conclusion...
●
Vendors have largely addressed this vulnerability
○
doesn’t matter if old keys are still in use
●
Isolated to self-signed/non-public CA signed certificates
●
Massive scale of key acquisition is not necessary
○
limit batches to keys from specific devices
Reference Implementation 
(Python)
https://github.com/austinallshouse/defcon29
-key-factorization-reference