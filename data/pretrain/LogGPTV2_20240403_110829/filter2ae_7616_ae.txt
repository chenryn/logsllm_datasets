     */
    typedef struct sym_t {
        struct sym_t    *forw;                  /* Pointer to next hash list */
        value_t         name;                   /* Name of symbol */
        value_t         content;                /* Value of symbol */
        int             arg;                    /* Parameter value */
    } sym_t;
    typedef int sym_fd_t;                       /* Returned by symOpen */
    typedef struct {
        union {
            char    flag;
            char    byteint;
            short   shortint;
            char    percent;
            long    integer;        //注意这个，根据后面分析，这个代表了form表单的函数地址
            long    hex;
            long    octal;
            long    big[2];
    #ifdef FLOATING_POINT_SUPPORT
            double  floating;
    #endif /* FLOATING_POINT_SUPPORT */
            char_t  *string;
            char    *bytes;
            char_t  *errmsg;
            void    *symbol;
        } value;
        vtype_t         type;
        unsigned int    valid       : 8;
        unsigned int    allocated   : 8;        /* String was balloced */
    } value_t;
在Tenda Ax12中，更多使用的是websFormDefine，通过上面的代码，我们可以知道下面的信息。
  * `symEnter(formSymtab, name, valueInteger((int) fn), (int) NULL);`，虽然找不到symEnter的定义，但是可以分析出来，这个函数应该是不断向链表插入定义的form表单处理程序，主要包含name和具体的函数地址。
  * formSymtab全局变量应该是指向sym_t结构体链表的表头。
接下来分析 **websFormHandler()**
    /*
     *  Process a form request. Returns 1 always to indicate it handled the URL
     */
    int websFormHandler(webs_t wp, char_t *urlPrefix, char_t *webDir, int arg, 
        char_t *url, char_t *path, char_t *query)
    {
        sym_t       *sp;
        char_t      formBuf[FNAMESIZE];
        char_t      *cp, *formName;
        int         (*fn)(void *sock, char_t *path, char_t *args);
        a_assert(websValid(wp));
        a_assert(url && *url);
        a_assert(path && *path == '/');
        websStats.formHits++;
    /*
     *  Extract the form name
     */
        gstrncpy(formBuf, path, TSZ(formBuf));
        if ((formName = gstrchr(&formBuf[1], '/')) == NULL) {
            websError(wp, 200, T("Missing form name"));
            return 1;
        }
        formName++;
        if ((cp = gstrchr(formName, '/')) != NULL) {
            *cp = '\0';
        }
    /*
     *  Lookup the C form function first and then try tcl (no javascript support 
     *  yet).
     */
        sp = symLookup(formSymtab, formName);
        if (sp == NULL) {
            websError(wp, 200, T("Form %s is not defined"), formName);
        } else {
            fn = (int (*)(void *, char_t *, char_t *)) sp->content.value.integer;
            a_assert(fn);
            if (fn) {
    /*
     *          For good practice, forms must call websDone()
     */
                (*fn)((void*) wp, formName, query);
    /*
     *          Remove the test to force websDone, since this prevents
     *          the server "push" from a form>
     */
    #if 0 /* push */
                if (websValid(wp)) {
                    websError(wp, 200, T("Form didn't call websDone"));
                }
    #endif /* push */
            }
        }
        return 1;
    }
整个过程如下
    |--websFormHandler()
    |       |--strncpy(),strchr()                   获取formName
    |       |--symLookup(formSymtab, formName)      遍历链表，根据name返回对应的结构体。
    |       |--sp->content.value.integer            从结构体中获取到函数地址。
    |       |--(*fn)((void*) wp, formName, query);  执行函数
到这里，关于Goahead源码的分析就差不多了，上面分析的内容可以帮助我们更好的去分析Tenda
AX12的httpd程序，比如如何找到开发者自定义的处理函数，还有整个数据的处理流程，以及ida伪代码符号表，结构体的恢复。
## httpd漏洞挖掘
虽然网上关于Tenda路由器设备的cve很多，大部分是堆栈溢出，少部分命令注入，但是实际上这些cve在真实环境下是没法利用的，基本上全都需要身份验证，因为Tenda路由器的安全处理函数处理得很好，在我分析完整个登录过程以及cookie验证过程，都没找到绕过的方式，所以还是只能搞一些经过身份验证的漏洞，然后还是收获了一些漏洞，分析过程中，我也使用了之前自己搞的一个idapython脚本插件[Audit](https://github.com/The-Itach1/Audit)，可以帮助快速定位到一些函数，节省了一些时间。
以下的漏洞攻击，都需要在有一次身份验证下，也就是有一次可用的cookie，才能进行攻击。
### 启动部分分析
来到main函数，大部分的过程和Goahead的源码差不多，但是有些区别的是host和username和userpass的获取方式。
可以看到是调用GetValue这个函数，但究竟是从哪获取到的呢，获取到这个信息可能可以帮助我们找到userpass的存储位置，这里我没找到关于GetValue这个函数的具体实现资料，但是我找到了关于[OpenWrt系统UCI详解](https://blog.csdn.net/dxt1107/article/details/115742249)的资料。
这些类似于network.lan.proto的字符串实际上都是uci的配置格式，其会保存在某个具体的配置文件中，一般都在etc目录下，GetValue这个函数的内部，推断应该就是使用了的内置函数来对值进行获取。
然后我先是先对binwalk分离的固件进行了grep匹配特征字符串，发现并没有找到对应的配置文件，最后感觉还是得去真实设备中去匹配，Telnet连接上后进行匹配，成功找到username和userpass在/etc/config/admin文件中，proto,ipaddr在/etc/config/network中。
### web登录后台验证过程分析
分析了Goahead的源码后，我们知道了这种框架的数据处理过程，以及一些结构体，我们可以恢复这些结构体，以及去官方找一些mips架构的老固件来进行一些符号表的修复，让分析过程变得简单一些。
#### 调试环境搭建
ida反编译出来的代码还是比较多，所以肯定需要进行调试分析，先搭建调试环境。
首先去根据路由器架构下载对应编译好的gdbserver，这里我是下载的gdbserver-7.12-mips-mips32rel2-v1-sysv。
接下来就是和前面传固件的方式，用nc命令来传文件到路由器的linux系统中，只不过有点不一样的是这次是从主机传文件到路由器。
同样也是关闭windows的防火墙，确保主机和路由器能ping通，主机监听一个端口，并传入文件。
    nc -lp 1234  gdbserver
然后给gdbserver文件提供可执行权限。
    chmod 777 ./gdbserver
效果如下。
然后gdbserver开启监听端口附加调试即可。
成功后，会出现Remote debugging from host ip。
#### 前端分析
首先先对前端登录的发包过程进行分析，随便输入一个密码试一下，然后抓个包。
可以看到，访问了/login/Auth这个接口，username默认为admin，password为md5(input)，并且处理这个过程的文件应该是login.js。
可在浏览器中调试一下，大概分析下流程就是，注册了一个登陆过程的回调函数。
    var serviceUrl = '/login/Auth',
    authService = new PageService(serviceUrl),
    loginPageView = new PageView(),
    loginPageLogin = new PageLogic(loginPageView, authService);
    loginPageLogin.init();
然后每当登陆键按下，则会触发处理函数。
    view.addSubmitHandler(function () {
            that.validate.checkAll();
        });
    this.addSubmitHandler = function (callBack) {
        $('#subBtn').on('click', function (e) {
            e.preventDefault();
            callBack.apply();
        });
接下来就是，获取username和password，检测是否有效，然后将password进行md5加密，然后发送到后端。
    this.validate = $.validate({
        custom: function () {
            var username = view.getUsername(),
                password = view.getPassword();
            function checksValid(username, password) {
                return username !== '' && password !== '';
            }
            if (!checksValid(username, password)) {
                return _("Please specify a login password.");
            }
        },
        success: function () {
            var data = view.getSubmitData();
            authService.login(data, view.showSuccessful, view.showError);
        },
        error: function (msg) {
            view.showInvalidError(msg);
        }
    });
        //md5加密password，返回表单
        this.getSubmitData = function () {
            var ret = '';
            ret = {
                username: this.getUsername(),
                password: hex_md5(this.getPassword())
            };
            return ret;
        };
        //调用login函数，以POST的方式发送到后端进行验证
        this.login = function (subData, successCallback, errorCallback) {
            $.ajax({
                url: url,
                type: "POST",
                data: subData,
                success: successCallback,
                error: errorCallback
            });
        };
然后会根据后端传的值来决定，是否显示登陆错误，如果传的值为1，就代表密码错误。
        this.showSuccessful = function (str) {
            var num = str;