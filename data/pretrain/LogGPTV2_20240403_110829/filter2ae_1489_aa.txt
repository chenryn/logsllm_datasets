# 概述：
上一篇文章文章学习了通过CreateRemoteThread创建远程线程后在目标进程中通过LoadLibrary加载我们自己的DLL来将DLL注入目标进程。在学习的过程中了解到还有一种通过CreateRemoteThread创建远程线程来注入的操作：代码注入。
不同于DLL注入，代码注入的体积量更小也更加隐蔽，注入的代码隐藏在进程的内存中，不容易被发现，而DLL注入后很容易就会被发现注入的痕迹（比如前面的文章中完成注入操作后使用ProcessExplorer查看进程加载DLL）
下面通过一个例子来实际操作完成一次代码注入。
# CodeInjection.cpp：
首先给出总的源代码：
    #include"windows.h"
    #include"tchar.h"
    #include"stdio.h"
    #include"psapi.h"
    #include"stdlib.h"
    #define ProcessName1 L"notepad.exe"
    #define ProcessName2 L"Notepad.exe"
    #define THREAD_SIZE 0x4000
    #define LENGTH 30
    HANDLE hProcess = NULL;
    typedef struct _PARAMENT {
        FARPROC pLoadLibrary;
        FARPROC pGetProcessAddress;
        char DllName1[LENGTH];
        char FuncName[LENGTH];
        char Content[LENGTH];
        char title[LENGTH];
    }RemoteParament, *pRemoteParament;
    BOOL EnableDebugPriv()
    {
        HANDLE hToken;
        LUID Luid; 
        TOKEN_PRIVILEGES tkp;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) 
        {
            printf("提权失败\n");
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid))
        {
            CloseHandle(hToken);
            printf("提权失败\n");
            return FALSE;
        }
        tkp.PrivilegeCount = 1;
        tkp.Privileges[0].Luid = Luid;
        tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; 
        if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof tkp, NULL, NULL))
        {
            printf("提权失败\n");
            CloseHandle(hToken);
        }
        else
        {
            printf("提权成功！\n");
            return TRUE;
        }
    }
    DWORD WINAPI ThreadProc(LPVOID ThreadPara) //线程注入函数
    {
        pRemoteParament para = (pRemoteParament)ThreadPara;
        HMODULE(WINAPI * fpLoadLibrary)(LPCSTR);
        FARPROC(WINAPI * fpGetProcAddress)(HMODULE, LPCSTR);
        int(WINAPI * fpMessageBox) (HWND, LPCSTR, LPCSTR, UINT);
        fpLoadLibrary = (HMODULE(WINAPI *)(LPCSTR))para->pLoadLibrary;
        fpGetProcAddress = (FARPROC(WINAPI*)(HMODULE, LPCSTR))para->pGetProcessAddress;
        HMODULE hMod = fpLoadLibrary(para->DllName1);
        fpMessageBox = (int(WINAPI*)(HWND, LPCSTR, LPCSTR, UINT))fpGetProcAddress(hMod, para->FuncName);
        fpMessageBox(NULL, para->Content, para->title, MB_OK);
        return 0;
    }
    BOOL Inject(DWORD dwPID)
    {
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID))) 
        {
            printf("open process failed!\n");
            return FALSE;
        }
        RemoteParament para = { 0 };
        HMODULE hMod = LoadLibrary(L"kernel32.dll"); 
        para.pLoadLibrary = (FARPROC)GetProcAddress(hMod, "LoadLibraryA"); 
        para.pGetProcessAddress = (FARPROC)GetProcAddress(hMod, "GetProcAddress");
        strcpy_s(para.DllName1, "user32.dll");
        strcpy_s(para.FuncName, "MessageBoxA");
        strcpy_s(para.Content, "code inject!");
        strcpy_s(para.title, "inject");
        LPVOID vPara = VirtualAllocEx(hProcess, NULL, sizeof(para), MEM_COMMIT, PAGE_READWRITE);
        if (vPara == NULL)
        {
            printf("para's virtual memory alloc failed!\n");
            return -1;
        }
        if (!WriteProcessMemory(hProcess, vPara, (LPVOID)&para, sizeof(para), NULL))
        {
            //DWORD dwerror = GetLastError();
            printf("para's virtual memory write failed!\n");
            return -1;
        }
        DWORD dwSize = (DWORD)Inject - (DWORD)ThreadProc;
        /*LPVOID pRemoteThreadProc = VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);*/
        LPVOID pRemoteThreadProc = VirtualAllocEx(hProcess, NULL, THREAD_SIZE, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        if (pRemoteThreadProc == NULL)
        {
            printf("threadproc's virtual memory alloc failed!\n");
            return -1;
        }
        /*if (!WriteProcessMemory(hProcess, pRemoteThreadProc, (LPVOID)&ThreadProc, dwSize, NULL))*/
        if (!WriteProcessMemory(hProcess, pRemoteThreadProc, (LPVOID)&ThreadProc, THREAD_SIZE, NULL))
        {
            printf("threadproc's virtual memory write failed!\n");
            return -1;
        }
        HANDLE hThread = NULL;
        hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteThreadProc, vPara, 0, NULL);
        if (hThread) {
            printf("non dll inject success.\n");
        }
        else {
            printf("inject failed！\n");
            return FALSE;
        }
        WaitForSingleObject(hThread, INFINITE); 
        CloseHandle(hThread);
        CloseHandle(hProcess);
        return TRUE;
    }
    int _tmain(int argc,_TCHAR *argv[])
    {
        DWORD dwError = 0;
        DWORD dwPID = (DWORD)_tstol(argv[1]);
        EnableDebugPriv();
        Inject(dwPID);
        return 0;
    }
程序主要流程大致如下：
  1. 将注入代码的所需要的参数集成为一个结构体
  2. 设置提权函数进行权限提升
  3. 进行注入操作的主要代码（包括注入代码所需参数常量等的写入、线程操作函数的写入及远程线程的创建）
  4. 主函数调用各个函数完成注入操作
## struct _PARAMENT：
这个部分是后面注入的代码需要用到的参数。这个部分也是DLL注入与代码注入一个比较不同的地方，DLL注入中，进行注入操作的主程序进行的分配操作是为LoadLibrary这个API的参数：DLL文件路径分配内存空间，而
**DLL中进行的各个函数操作所需要的参数是不需要单独为其分配内存，因为DLL的代码与数据在内存的角度上是与目标进程共享的；而代码注入后为了使被注入的代码能够正常运行，就需要将其对应所需的参数数据等写入目标进程的内存空间。**
这次注入操作是为了完成在目标进程中使其出现一个弹窗，需要用到user32.dll这个库中MessageBoxA这个API函数，所以可以大概理出这次代码注入操作所需要的参数：
  1. LoadLibrary及GetProcessAddress这两个函数的地址（这两个函数是注入操作中基本都会使用到的函数）
  2. user32.dll这个库的名称字符串以及MessageBoxA这个函数的名称字符串（注入的代码中要将user32.dll这个库加载入目标进程）
  3. MessageBoxA这个函数所需要参数（也就是弹出窗口的内容以及窗口的标题）
这一部分的代码及注释为：
    typedef struct _PARAMENT {
        //下面的FARPROC为指向在后面需要调用的一些函数的内存地址
        FARPROC pLoadLibrary; //用于存储pLoadLibrary的函数地址
        FARPROC pGetProcessAddress; //用存储GetProcessAddress的函数地址
        char DllName1[LENGTH]; //后面可能要通过使用GetModuleHandle和DLL名字获取模块地址，也就是存储user32.dll这个模块名称
        char FuncName[LENGTH]; //存储需要查找的MessageBox的函数名称
        char Content[LENGTH]; //注入代码后调用MessageBox输出的内容
        char title[LENGTH]; //输出的标题
    }RemoteParament, *pRemoteParament;
再提一下这个数据结构：FARPROC
这是一个4字节长的指针类类型，它在minwindef.h中被解释为一个FAR WINAPI类型的函数指针，如下：
    typedef INT_PTR (FAR WINAPI *FARPROC)();
当获取到LoadLibrary及GetProcessAddress这两个函数的实际地址时，由于都是WINAPI函数，所以要将其解释为这样一个FARPROC类型的指针。
## EnableDebugPriv：
这个部分为提权函数，其中具体的数据类型解释以及操作流程可以看一下我的上一篇文章，这里只给出大概的函数流程：
  1. 获取当前与当前进程相关联的用户的访问令牌
  2. 查找所需要修改权限的LUID