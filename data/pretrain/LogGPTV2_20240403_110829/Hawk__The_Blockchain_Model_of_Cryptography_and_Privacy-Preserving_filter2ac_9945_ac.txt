Delayed processing in ideal programs. When writing the
blockchain program, every message received by the blockchain
program is already delayed by a round due to the G(·) wrapper.
When writing the ideal program, we introduce a simple
convention to denote delayed computation. Program instruc-
tions that are written in gray background denote computation
that does not
is deferred to
the beginning of the next timer click. This is a convenient
shorthand because in our real-world protocol, effectively any
computation done by a blockchain functionality will be de-
layed. For example,
in our IdealPcash ideal program (see
Figure 3), whenever the ideal functionality receives a mint or
pour message, the ideal adversary S is notiﬁed immediately;
however, processing of the messages is deferred till the next
timer click. Formally, delayed processing can be implemented
simply by storing state and invoking the delayed program in-
structions on the next Timer click. By convention, we assume
that the delayed instructions are invoked at the beginning of
the Timer call. In other words, upon the next timer click, the
delayed instructions are executed ﬁrst.
Pseudonymity. All party identiﬁers that appear
in ideal
programs, blockchain programs, and user-side programs by
default refer to pseudonyms. When we write “upon receiving
message from some P ”, this accepts a message from any
pseudonym. Whenever we write “upon receiving message
from P ”, without the keyword some, this accepts a message
from a ﬁxed pseudonym P , and typically which pseudonym
we refer to is clear from the context.
Whenever we write “send m to G(B) as nym P ” inside a
user program, this sends an internal message (“send”, m, P )
to the protocol wrapper Π. The protocol wrapper will then
authenticate the message appropriately under pseudonym P .
IdealPcash
Init:
Mint:
Pour:
(cid:2)
1, $val
2) from P:
(cid:2)
(cid:2)
2
Coins: a multiset of coins, each of the form (P, $val)
Upon receiving (mint, $val) from some P:
send (mint,P, $val) to A
assert ledger[P] ≥ $val
ledger[P] := ledger[P] − $val
append (P, $val) to Coins
On (pour, $val1, $val2,P1,P2, $val
(cid:2)
assert $val1 + $val2 = $val
1 + $val
if P is honest,
assert (P, $vali) ∈ Coins for i ∈ {1, 2}
assert Pi (cid:4)= ⊥ for i ∈ {1, 2}
remove one (P, $vali) from Coins for i ∈ {1, 2}
for i ∈ {1, 2}, if Pi is corrupted, send (pour, i,
Pi, $val
if P is corrupted:
assert (P, $vali) ∈ Coins for i ∈ {1, 2}
remove one (P, $vali) from Coins for i ∈ {1, 2}
for i ∈ {1, 2}: add (Pi, $val
for i ∈ {1, 2}: if Pi (cid:4)= ⊥, send (pour, $val
i) to Pi
(cid:2)
i) to A; else send (pour, i,Pi) to A
(cid:2)
(cid:2)
i) to Coins
Fig. 3. Deﬁnition of IdealPcash. Notation: ledger denotes the public ledger,
and Coins denotes the private pool of coins. As mentioned in Section II-C,
gray background denotes batched and delayed activation. All party names
correspond to pseudonyms due to notations and conventions deﬁned in
Section II-B.
When the context is clear, we avoid writing “as nym P ”,
and simply write “send m to G(B)”. Our formal system also
allows users to send messages anonymously to the blockchain
– although this option will not be used in this paper.
Ledger and money transfers. A public ledger is denoted
ledger in our ideal programs and blockchain programs. When a
party sends $amt to an ideal program or a blockchain program,
this represents an ordinary message transmission. Money
transfers only take place when ideal programs or blockchain
programs update the public ledger ledger. In other words,
the symbol $ is only adopted for readability (to distinguish
variables associated with money and other variables), and does
not have special meaning or signiﬁcance. One can simply think
of this variable as having the money type.
III. CRYPTOGRAPHY ABSTRACTIONS
We now describe our cryptography abstraction in the form
of ideal programs. Ideal programs deﬁne the correctness and
security requirements we wish to attain by writing a speci-
ﬁcation assuming the existence of a fully trusted party. We
will later prove that our real-world protocols (based on smart
contracts) securely emulate the ideal programs. As mentioned
earlier, an ideal program must be combined with a wrapper F
to be endowed with exact execution semantics.
Overview. Hawk realizes the following speciﬁcations:
• Private ledger and currency transfer. Hawk relies on the
existence of a private ledger that supports private currency
transfers. We therefore ﬁrst deﬁne an ideal functionality
called IdealPcash that describes the requirements of a private
ledger (see Figure 3). Informally speaking, earlier works
such as Zerocash [11] are meant to realize (approximations
844844
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
of) this ideal functionality – although technically this ought
to be interpreted with the caveat that these earlier works
prove indistinguishability or game-based security instead
UC-based simulation security.
• Hawk-speciﬁc primitives. With a private ledger speciﬁed,
we then deﬁne Hawk-speciﬁc primitives including freeze,
compute, and ﬁnalize that are essential for enabling trans-
actional privacy and programmability simultaneously.
A. Private Cash Speciﬁcation IdealPcash
At a high-level, the IdealPcash speciﬁes the requirements of a
private ledger and currency transfer. We adopt the same “mint”
and “pour” terminology from Zerocash [11].
Mint. The mint operation allows a user P to transfer money
from the public ledger denoted ledger to the private pool
denoted Coins[P]. With each transfer, a private coin for user
P is created, and associated with a value val.
For correctness, the ideal program IdealPcash checks that
the user P has sufﬁcient funds in its public ledger ledger[P]
before creating the private coin.
Pour. The pour operation allows a user P to spend money
in its private bank privately. For simplicity, we deﬁne the
simple case with two input coins and two output coins. This
is sufﬁcient for users to transfer any amount of money by
“making change,” although it would be straightforward to
support more efﬁcient batch operations as well.
For correctness, the ideal program IdealPcash checks the
following: 1) for the two input coins, party P indeed possesses
private coins of the declared values; and 2) the two input coins
sum up to equal value as the two output coins, i.e., coins
neither get created or vanish.
Privacy. When an honest party P mints,
the ideal-world
adversary A learns the pair (P, val) – since minting is raising
coins from the public pool to the private pool. Operations on
the public pool are observable by A.
When an honest party P pours, however, the adversary A
learns only the output pseudonyms P1 and P2. It does not learn
which coin in the private pool Coins is being spent nor the
name of the spender. Therefore, the spent coins are anonymous
with respect to the private pool Coins. To get strong anonymity,
new pseudonyms P1 and P2 can be generated on the ﬂy to
receive each pour. We stress that as long as pour hides the
sender, this “breaks” the transaction graph, thus preventing
linking analysis.
If a corrupted party is the recipient of a pour, the adversary
additionally learns the value of the coin it receives.
Additional subtleties. Later in our protocol, honest parties
keep track of a wallet of coins. Whenever an honest party
pours, it ﬁrst checks if an appropriate coin exists in its local
wallet – and if so it immediately removes the coin from the
wallet (i.e., without delay). In this way, if an honest party
makes multiple pour transactions in one round, it will always
choose distinct coins for each pour transaction. Therefore, in
our IdealPcash functionality, honest pourers’ coins are immedi-
ately removed from Coins. Further, an honest party is not able
to spend a coin paid to itself until the next round. By contrast,
corrupted parties are allowed to spend coins paid to them in
the same round – this is due to the fact that any message is
routed immediately to the adversary, and the adversary can
also choose a permutation for all messages received by the
blockchain in the same round (see Section II and Appendix B).
Another subtlety in the IdealPcash functionality is while hon-
est parties always pour to existing pseudonyms, the function-
ality allows the adversary to pour to non-existing pseudonyms
denoted ⊥ — in this case, effectively the private coin goes
into a blackhole and cannot be retrieved. This enables a
performance optimization in our UserPcash and Blockchaincash
protocol later – where we avoid including the cti’s in the NIZK
of LPOUR (see Section IV). If a malicious pourer chooses to
compute the wrong cti, it is as if the recipient Pi did not
receive the pour, i.e., the pour is made to ⊥.
B. Hawk Speciﬁcation IdealPhawk
To enable transactional privacy and programmability simul-
taneously, we now describe the speciﬁcations of new Hawk
primitives, including freeze, compute, and ﬁnalize. The formal
speciﬁcation of the ideal program IdealPhawk is provided in
Figure 4. Below, we provide some explanations. We also refer
the reader to Section I-C for higher-level explanations.
Freeze. In freeze, a party tells IdealPhawk to remove one
coin from the private coins pool Coins, and freeze it in the
blockchain by adding it to FrozenCoins. The party’s private
input denoted in is also recorded in FrozenCoins. IdealPhawk
checks that P has not called freeze earlier, and that a coin
(P, val) exists in Coins before proceeding with the freeze.
Compute. When a party P calls compute, its private input
in and the value of its frozen coin val are disclosed to the
manager PM.
Finalize. In finalize, the manager PM submits a public
input inM to IdealPhawk. IdealPhawk now computes the outcome
of φpriv on all parties’ inputs and frozen coin values, and
redistributes the FrozenCoins based on the outcome of φpriv.
To ensure money conservation, the ideal program IdealPhawk
checks that the sum of frozen coins is equal to the sum of
output coins.
Interaction with public contract. The IdealPhawk functional-
ity is parameterized by a public Hawk contract φpub, which is
included in IdealPhawk as a sub-module. During a finalize,
IdealPhawk calls φpub.check. The public contract φpub typically
serves the following purposes:
• Check the well-formedness of the manager’s input inM.
For example, in our ﬁnancial derivatives application (Sec-
tion VI-B), the public contract φpub asserts that the input
corresponds to the price of a stock as reported by the stock
exchange’s authentic data feed.
• Redistribute public deposits. If parties or the manager have
aborted, or if a party has provided invalid input (e.g., less
than a minimum bet) the public contract φpub can now
redistribute the parties’ public deposits to ensure ﬁnancial
845845
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
IdealPhawk(PM,{Pi}i∈[N ], T1, T2, φpriv, φpub)
Init: Call IdealPcash.Init. Additionally:
FrozenCoins: a set of coins and private in-
puts received by this contract, each of the form
(P, in, $val). Initialize FrozenCoins := ∅.
Freeze: Upon receiving (freeze, $vali, ini) from Pi for some
i ∈ [N ]:
assert current time T < T1
assert Pi has not called freeze earlier.
assert at least one copy of (Pi, $vali) ∈ Coins
send (freeze,Pi) to A
add (Pi, $vali, ini) to FrozenCoins
remove one (Pi, $vali) from Coins
Compute: Upon receiving compute from Pi for some i ∈ [N ]:
assert current time T1 ≤ T < T2
if PM is corrupted, send (compute,Pi, $vali, ini)
to A
else send (compute,Pi) to A
let (Pi, $vali, ini) be the item in FrozenCoins
corresponding to Pi
send (compute,Pi, $vali, ini) to PM
assert current time T ≥ T2
assert PM has not called finalize earlier
for i ∈ [N ]:
let ($vali, ini) := (0,⊥) if Pi has not called
i}, out
({$val
(cid:2)
assert out
(cid:2)
i∈[N ] $val
assert
send (finalize, inM, out) to A
for each corrupted Pi that called compute: send (Pi,
$val
call φpub.check(inM, out)
for i ∈ [N ] such that Pi called compute:
add (Pi, $val
send (finalize, $val
Finalize: Upon receiving (finalize, inM, out) from PM:
†) := φpriv({$vali, ini}, inM)
† = out
i∈[N ] $vali =
(cid:2)
(cid:2)
i) to Coins
i) to Pi
(cid:2)
compute
i) to A
(cid:2)
(cid:2)
i
φpub: Run a local instance of public contract φpub. Messages
between the adversary to φpub, and from φpub to parties
are forwarded directly.
Upon receiving message (pub, m) from party P:
notify A of (pub, m)
send m to φpub on behalf of P
IdealPcash: include IdealPcash (Figure 3).
Fig. 4. Deﬁnition of IdealPhawk. Notations: FrozenCoins denotes frozen coins
owned by the contract; Coins denotes the global private coin pool deﬁned by
IdealPcash; and (ini, vali) denotes the input data and frozen coin value of
party Pi.
fairness. For example, in our “Rock, Paper, Scissors” exam-
ple (see Section VI-B), the private contract φpriv checks if
each party has frozen the minimal bet. If not, φpriv includes
that information in out so that φpub pays that party’s public
deposit to others.
Security and privacy requirements. The IdealPhawk speciﬁes
the following privacy guarantees. When an honest party P
freezes money (e.g., a bid), the adversary should not observe
the amount frozen. However, the adversary can observe the
846846
party’s pseudonym P. We note that leaking the pseudonym P
does not hurt privacy, since a party can simply create a new
pseudonym P and pour to this new pseudonym immediately
before the freeze.
When an honest party calls compute, the manager PM gets
to observe its input and frozen coin’s value. However, the
public and other contractual parties do not observe anything
(unless the manager voluntarily discloses information).
Finally, during a finalize operation, the output out is
declassiﬁed to the public – note that out can be empty if we
do not wish to declassify any information to the public.
It is not hard to see that our ideal program IdealPhawk
satisﬁes input independent privacy and authenticity against a
dishonest manager. Further, it satisﬁes posterior privacy as
long as the manager does not voluntarily disclose information.
Intuitive explanations of these security/privacy properties were
provided in Section I-B.
Timing and aborts. Our ideal program IdealPhawk requires
that freeze operations be done by time T1, and that compute
operations be done by time T2. If a user froze coins but did
not open by time T2, our ideal program IdealPhawk treats
(ini, vali) := (0,⊥), and the user Pi essentially forfeits