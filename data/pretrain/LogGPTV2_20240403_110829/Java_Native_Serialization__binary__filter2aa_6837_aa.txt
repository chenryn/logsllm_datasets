## Java Native Serialization (Binary)
### Overview
- [Java Deserialization Security FAQ](https://christian-schneider.net/JavaDeserializationSecurityFAQ.html)
- [From Foxglove Security: Common Vulnerabilities in Popular Java Applications](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)

### Key Talks, Presentations, and Documentation
#### Marshalling Pickles
**Presenters:** [@frohoff](https://twitter.com/frohoff) & [@gebl](https://twitter.com/gebl)
- [Video](https://www.youtube.com/watch?v=KSA7vUkXGSg)
- [Slides](https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles)
- [Additional Resources](https://frohoff.github.io/appseccali-marshalling-pickles/)

#### Exploiting Deserialization Vulnerabilities in Java
**Presenter:** [@matthias_kaiser](https://twitter.com/matthias_kaiser)
- [Video](https://www.youtube.com/watch?v=VviY3O-euVQ)

#### Serial Killer: Silently Pwning Your Java Endpoints
**Presenters:** [@pwntester](https://twitter.com/pwntester) & [@cschneider4711](https://twitter.com/cschneider4711)
- [Slides](https://www.rsaconference.com/writable/presentations/file_upload/asd-f03-serial-killer-silently-pwning-your-java-endpoints.pdf)
- [White Paper](https://community.hpe.com/hpeb/attachments/hpeb/off-by-on-software-security-blog/722/1/HPE-SR%20whitepaper%20java%20deserialization%20RSA2016.pdf)
- [Bypass Gadget Collection](https://github.com/pwntester/SerialKillerBypassGadgetCollection)

#### Deserialize My Shorts: Or How I Learned To Start Worrying and Hate Java Object Deserialization
**Presenters:** [@frohoff](https://twitter.com/frohoff) & [@gebl](https://twitter.com/gebl)
- [Slides](https://www.slideshare.net/frohoff1/deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization)

#### Surviving the Java Serialization Apocalypse
**Presenters:** [@cschneider4711](https://twitter.com/cschneider4711) & [@pwntester](https://twitter.com/pwntester)
- [Slides](https://www.slideshare.net/cschneider4711/surviving-the-java-deserialization-apocalypse-owasp-appseceu-2016)
- [Video](https://www.youtube.com/watch?v=m1sH240pEfw)
- [Proof of Concept for Scala and Groovy](https://github.com/pwntester/JVMDeserialization)

#### Java Deserialization Vulnerabilities - The Forgotten Bug Class
**Presenter:** [@matthias_kaiser](https://twitter.com/matthias_kaiser)
- [Slides](https://www.slideshare.net/codewhitesec/java-deserialization-vulnerabilities-the-forgotten-bug-class)

#### Pwning Your Java Messaging with Deserialization Vulnerabilities
**Presenter:** [@matthias_kaiser](https://twitter.com/matthias_kaiser)
- [Slides](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf)
- [White Paper](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)
- [Tool for JMS Hacking](https://github.com/matthiaskaiser/jmet)

#### Defending Against Java Deserialization Vulnerabilities
**Presenter:** [@lucacarettoni](https://twitter.com/lucacarettoni)
- [Slides](https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities)

#### A Journey from JNDI/LDAP Manipulation to Remote Code Execution Dream Land
**Presenters:** [@pwntester](https://twitter.com/pwntester) and O. Mirosh
- [Slides](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf)
- [White Paper](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)

#### Fixing the Java Serialization Mess
**Presenter:** [@e_rnst](https://twitter.com/e_rnst)
- [Slides and Source](https://t.co/zsDnQBgw0Y)

#### Blind Java Deserialization
**Author:** deadcode.me
- [Part I - Commons Gadgets](https://deadcode.me/blog/2016/09/02/Blind-Java-Deserialization-Commons-Gadgets.html)
- [Part II - Exploitation Rev 2](https://deadcode.me/blog/2016/09/18/Blind-Java-Deserialization-Part-II.html)

#### An Overview of Deserialization Vulnerabilities in the Java Virtual Machine (JVM)
**Presenter:** [@joaomatosf](https://twitter.com/joaomatosf)
- [Slides](https://www.slideshare.net/joaomatosf_/an-overview-of-deserialization-vulnerabilities-in-the-java-virtual-machine-jvm-h2hc-2017)
- [Examples](https://github.com/joaomatosf/JavaDeserH2HC)

#### Automated Discovery of Deserialization Gadget Chains
**Presenter:** [@ianhaken](https://twitter.com/ianhaken)
- [Video](https://youtube.com/watch?v=wPbW6zQ52w8)
- [Slides](https://media.defcon.org/DEF%20CON%2026/DEF%20CON%2026%20presentations/DEFCON-26-Ian-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf)
- [Tool](https://github.com/JackOfMostTrades/gadgetinspector)

#### An Far Sides of Java Remote Protocols
**Presenter:** [@_tint0](https://twitter.com/_tint0)
- [Slides](https://i.blackhat.com/eu-19/Wednesday/eu-19-An-Far-Sides-Of-Java-Remote-Protocols.pdf)

### Payload Generators
#### ysoserial
- [GitHub Repository](https://github.com/frohoff/ysoserial)
- **Payloads (Version 0.6):**
  | Payload | Author | Dependencies | Impact (if not RCE) |
  |---------|--------|--------------|---------------------|
  | AspectJWeaver | @Jang | aspectjweaver:1.9.2, commons-collections:3.2.2 | - |
  | BeanShell1 | @pwntester, @cschneider4711 | bsh:2.0b5 | - |
  | C3P0 | @mbechler | c3p0:0.9.5.2, mchange-commons-java:0.2.11 | - |
  | Click1 | @artsploit | click-nodeps:2.3.0, javax.servlet-api:3.1.0 | - |
  | Clojure | @JackOfMostTrades | clojure:1.8.0 | - |
  | CommonsBeanutils1 | @frohoff | commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2 | - |
  | CommonsCollections1 | @frohoff | commons-collections:3.1 | - |
  | CommonsCollections2 | @frohoff | commons-collections4:4.0 | - |
  | CommonsCollections3 | @frohoff | commons-collections:3.1 | - |
  | CommonsCollections4 | @frohoff | commons-collections4:4.0 | - |
  | CommonsCollections5 | @matthias_kaiser, @jasinner | commons-collections:3.1 | - |
  | CommonsCollections6 | @matthias_kaiser | commons-collections:3.1 | - |
  | CommonsCollections7 | @scristalli, @hanyrax, @EdoardoVignati | commons-collections:3.1 | - |
  | FileUpload1 | @mbechler | commons-fileupload:1.3.1, commons-io:2.4 | File uploading |
  | Groovy1 | @frohoff | groovy:2.3.9 | - |
  | Hibernate1 | @mbechler | - | - |
  | Hibernate2 | @mbechler | - | - |
  | JBossInterceptors1 | @matthias_kaiser | javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 | - |
  | JRMPClient | @mbechler | - | - |
  | JRMPListener | @mbechler | - | - |
  | JSON1 | @mbechler | json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1 | - |
  | JavassistWeld1 | @matthias_kaiser | javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 | - |
  | Jdk7u21 | @frohoff | - | - |
  | Jython1 | @pwntester, @cschneider4711 | jython-standalone:2.5.2 | - |
  | MozillaRhino1 | @matthias_kaiser | js:1.7R2 | - |
  | MozillaRhino2 | @_tint0 | js:1.7R2 | - |
  | Myfaces1 | @mbechler | - | - |
  | Myfaces2 | @mbechler | - | - |
  | ROME | @mbechler | rome:1.0 | - |
  | Spring1 | @frohoff | spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE | - |
  | Spring2 | @mbechler | spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2 | - |
  | URLDNS | @gebl | jre only vuln detect | - |
  | Vaadin1 | @kai_ullrich | vaadin-server:7.7.14, vaadin-shared:7.7.14 | - |
  | Wicket1 | @jacob-baines | wicket-util:6.23.0, slf4j-api:1.6.4 | - |

- **Plugins for Burp Suite (Detection, ysoserial Integration):**
  - [Freddy](https://github.com/nccgroup/freddy)
  - [JavaSerialKiller](https://github.com/NetSPI/JavaSerialKiller)
  - [Java Deserialization Scanner](https://github.com/federicodotta/Java-Deserialization-Scanner)
  - [Burp-ysoserial](https://github.com/summitt/burp-ysoserial)
  - [SuperSerial](https://github.com/DirectDefense/SuperSerial)
  - [SuperSerial-Active](https://github.com/DirectDefense/SuperSerial-Active)

- **Full Shell (Pipes, Redirects, and Other Stuff):**
  - [$@|sh â€“ Or: Getting a shell environment from Runtime.exec](http://codewhitesec.blogspot.ru/2015/03/sh-or-getting-shell-environment-from.html)
  - Set String[] for Runtime.exec (patch ysoserial's payloads)
  - [Shell Commands Converter](http://jackson.thuraisamy.me/runtime-exec-payloads.html)

- **How It Works:**
  - [Commons Collections Deserialization Vulnerability Research Findings](https://blog.srcclr.com/commons-collections-deserialization-vulnerability-research-findings/)
  - [ysoserial CommonsCollections1 Exploit](http://gursevkalra.blogspot.ro/2016/01/ysoserial-commonscollections1-exploit.html)

#### ysoserial Fork with Additional Payloads
- [GitHub Repository](https://github.com/wh1t3p1g/ysoserial)
- **Additional Payloads:**
  - CommonsCollection8,9,10
  - RMIRegistryExploit2,3
  - RMIRefListener, RMIRefListener2
  - PayloadHTTPServer
  - Spring3

#### JRE8u20_RCE_Gadget
- [GitHub Repository](https://github.com/pwntester/JRE8u20_RCE_Gadget)
- **Description:** Pure JRE 8 RCE Deserialization gadget

#### ACEDcup
- [GitHub Repository](https://github.com/GrrrDog/ACEDcup)
- **Description:** File uploading via Apache Commons FileUpload <= 1.3 (CVE-2013-2186) and Oracle JDK < 7u40

#### Universal Billion-Laughs DoS
- [GitHub Gist](https://gist.github.com/coekie/a27cc406fc9f3dc7a70d)
- **Description:** Denial of Service (DoS) via default Java classes (JRE)

#### Universal Heap Overflows DoS Using Arrays and HashMaps
- [GitHub Repository](https://github.com/topolik/ois-dos/)
- **Description:** Denial of Service (DoS) using default Java classes (JRE)
- **How It Works:**
  - [Java Deserialization DoS - Payloads](http://topolik-at-work.blogspot.ru/2016/04/java-deserialization-dos-payloads.html)

#### DoS Against Serialization Filtering (JEP-290)
- **Vulnerability:** [CVE-2018-2677](https://www.waratek.com/waratek-identifies-two-new-deserialization-vulnerabilities-cve-2018-2677/)

#### Tool to Search Gadgets in Source
- **Gadget Inspector:**
  - [GitHub Repository](https://github.com/JackOfMostTrades/gadgetinspector)
  - [Article about Gadget Inspector](https://paper.seebug.org/1034/)

#### Additional Tools to Test RMI:
- [BaRMIe](https://github.com/NickstaDB/BaRMIe)
- [Barmitza](https://github.com/mogwailabs/rmi-deserialization/blob/master/barmitzwa.groovy)
- [RMIScout](https://labs.bishopfox.com/tech-blog/rmiscout)
- [attackRmi](https://github.com/waderwu/attackRmi)
- [Remote Method Guesser](https://github.com/qtc-de/remote-method-guesser)

#### Remote Class Detection:
- **GadgetProbe:**
  - [Exploiting Deserialization to Brute-Force the Remote Classpath](https://know.bishopfox.com/research/gadgetprobe)
  - [GitHub Repository](https://github.com/BishopFox/GadgetProbe)
- **EnumJavaLibs:**
  - [Remote Java classpath enumeration with EnumJavaLibs](https://www.redtimmy.com/web-application-hacking/remote-java-classpath-enumeration-with-enumjavalibs/)
  - [GitHub Repository](https://github.com/redtimmy/EnumJavaLibs)

### Exploits
- **No Specific Tool Required:** You don't need a special tool (just Burp/ZAP + payload)

#### RMI
- **Protocol:** Default - 1099/tcp for rmiregistry
- **Partial Patch in JRE with JEP290 (JDK 8u121, JDK 7u131, JDK 6u141)**
- [Attacking Java RMI Services After JEP 290](https://mogwailabs.de/en/blog/2019/03/attacking-java-rmi-services-after-jep-290/)
- [An Trinh's RMI Registry Bypass](https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/)
- [RMIScout](https://labs.bishopfox.com/tech-blog/rmiscout)
- [ysoserial](#ysoserial)
- [Additional Tools](#additional-tools-to-test-rmi)

#### JMX
- **JMX on RMI**
- **Vulnerability:** [CVE-2016-3427](http://engineering.pivotal.io/post/java-deserialization-jmx/)
- **Partial Patch in JRE with JEP290 (JDK 8u121, JDK 7u131, JDK 6u141)**
- [Attacking RMI Based JMX Services (After JEP 290)](https://mogwailabs.de/blog/2019/04/attacking-rmi-based-jmx-services/)
- [ysoserial](#ysoserial)
- [mjet](https://github.com/mogwailabs/mjet)
- [JexBoss](https://github.com/joaomatosf/jexboss)

#### JMXMP
- **Special JMX Protocol**
- [The Curse of Old Java Libraries](https://www.acunetix.com/blog/web-security-zone/old-java-libraries/)

#### JNDI/LDAP
- **When we control an address for lookup of JNDI (context.lookup(address) and can have backconnect from a server)**
- [Full Info](#a-journey-from-jndildap-manipulation-to-remote-code-execution-dream-land)
- [JNDI Remote Code Injection](http://zerothoughts.tumblr.com/post/137769010389/fun-with-jndi-remote-code-injection)
- [Exploiting JNDI Injections in Java](https://www.veracode.com/blog/research/exploiting-jndi-injections-java)
- [JNDI PoC](https://github.com/zerothoughts/jndipoc)
- [JNDI Injection Exploit](https://github.com/welk1n/JNDI-Injection-Exploit)

#### JMS
- [Full Info](#pwning-your-java-messaging-with-deserialization-vulnerabilities)
- [JMET](https://github.com/matthiaskaiser/jmet)

#### JSF ViewState
- **If no encryption or good MAC**
- [JexBoss](https://github.com/joaomatosf/jexboss)

#### vJDBC
- **JDBC via HTTP library**
- **All versions are vulnerable**
- [Details](https://www.acunetix.com/blog/web-security-zone/old-java-libraries/)

#### T3 of Oracle WebLogic
- **Protocol:** Default - 7001/tcp on localhost interface
- **Vulnerabilities:**
  - [CVE-2015-4852](https://www.vulners.com/search?query=CVE-2015-4852)
  - [Blacklist Bypass - CVE-2017-3248](https://www.tenable.com/security/research/tra-2017-07)
  - [Blacklist Bypass - CVE-2017-3248 PoC](https://github.com/quentinhardy/scriptsAndExploits/blob/master/exploits/weblogic/exploit-CVE-2017-3248-bobsecq.py)
  - [Blacklist Bypass - CVE-2018-2628](https://github.com/brianwrf/CVE-2018-2628)
  - [Blacklist Bypass - CVE-2018-2893](https://github.com/pyn3rd/CVE-2018-2893)
  - [Blacklist Bypass - CVE-2018-3245](https://blogs.projectmoon.pw/2018/10/19/Oracle-WebLogic-Two-RCE-Deserialization-Vulnerabilities/)