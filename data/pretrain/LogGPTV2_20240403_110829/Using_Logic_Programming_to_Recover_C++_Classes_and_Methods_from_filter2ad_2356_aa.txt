title:Using Logic Programming to Recover C++ Classes and Methods from
Compiled Executables
author:Edward J. Schwartz and
Cory F. Cohen and
Michael Duggan and
Jeffrey Gennari and
Jeffrey S. Havrilla and
Charles Hines
Using Logic Programming to Recover C++ Classes
and Methods from Compiled Executables
Edward J. Schwartz
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
Jeffrey Gennari
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
Cory F. Cohen
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
Jeffrey S. Havrilla
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
Michael Duggan
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
Charles Hines
Carnegie Mellon University
Software Engineering Institute
PI:EMAIL
ABSTRACT
High-level C++ source code abstractions such as classes and meth-
ods greatly assist human analysts and automated algorithms alike
when analyzing C++ programs. Unfortunately, these abstractions
are lost when compiling C++ source code, which impedes the un-
derstanding of C++ executables. In this paper, we propose a sys-
tem, OOAnalyzer, that uses an innovative new design to statically
recover detailed C++ abstractions from executables in a scalable
manner.
OOAnalyzer’s design is motivated by the observation that many
human analysts reason about C++ programs by recognizing simple
patterns in binary code and then combining these findings using
logical inference, domain knowledge, and intuition. We codify this
approach by combining a lightweight symbolic analysis with a flexi-
ble Prolog-based reasoning system. Unlike most existing work, OO-
Analyzer is able to recover both polymorphic and non-polymorphic
C++ classes. We show in our evaluation that OOAnalyzer assigns
over 78% of methods to the correct class on our test corpus, which
includes both malware and real-world software such as Firefox and
MySQL. These recovered abstractions can help analysts understand
the behavior of C++ malware and cleanware, and can also improve
the precision of program analyses on C++ executables.
CCS CONCEPTS
• Security and privacy → Software reverse engineering; Mal-
ware and its mitigation;
KEYWORDS
software reverse engineering; binary analysis; malware analysis
ACM Reference Format:
Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jeffrey Gennari, Jeffrey
S. Havrilla, and Charles Hines. 2018. Using Logic Programming to Recover
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243793
C++ Classes and Methods from Compiled Executables . In 2018 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’18), October
15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3243734.3243793
1 INTRODUCTION
Spurred by advances in computer hardware, modern software con-
tinues to rapidly grow in complexity, and shows no sign of slowing.
To cope with this increasing complexity, software engineers have
turned to object oriented (OO) programming languages, such as
C++, which provide a natural framework of high-level abstrac-
tions for constructing large and complex applications. The OO
programming paradigm focuses on sophisticated, user-created data
structures known as classes that bind related data (members) and
operations (methods) together. This organization of related data
and operations largely enables developers to manage C++ source
code more effectively and build more complex software.
Unfortunately, like its predecessor, C++ allows programmers to
perform dangerous operations in the spirit of enabling speed and
flexibility over security. It is thus no surprise that vulnerabilities
in C++ software are a common occurrence, as developers race to
develop larger, more complex programs in a potentially insecure
language. More surprisingly, malware authors are increasingly writ-
ing their malicious code in C++ (e.g., Duqu, Stuxnet, and Flamer)
to leverage its engineering benefits as well.
Further compounding these problems is the fact that the high-
level abstractions of C++ objects are lost during the compilation
process, which makes analyzing C++ executables difficult for human
analysts and automated algorithms alike. For example, an algorithm
searching for use-after-free vulnerabilities requires knowledge of
object constructors [7], and an analyst attempting to understand a
malware sample’s behavior would greatly benefit from knowing
which methods are on related classes [9]. Researchers have also
demonstrated that many exploit protections are more effective with
C++ abstractions, and that the level of protection and efficiency
improves with the accuracy of the C++ abstractions. For example, re-
searchers in executable-level control-flow integrity (CFI) protection
systems [1, 35] have recently shown that the overall level of protec-
tion against exploits can be significantly improved by incorporating
knowledge of C++ abstractions [8, 19, 21, 34]. Although there are
existing systems that can recover C++ abstractions from executa-
bles, most of them rely on virtual function tables (vftables) as their
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada426primary source of information, and as a result only consider poly-
morphic classes (i.e., classes with virtual methods) [6–10, 15, 19, 33].
In this paper, we address this limitation by developing a new
system, OOAnalyzer, that can accurately recover detailed C++ ab-
stractions about all classes and methods, including the list of classes,
the methods on each class, the relationships (e.g., inheritance) be-
tween classes, and a list of special methods such as constructors and
virtual methods. OOAnalyzer avoids the limitations of prior work
by leveraging a sophisticated reasoning system that incorporates
information from a variety of sources, including some that yield
information about all types of classes (i.e., not just polymorphic
classes). For example, OOAnalyzer can observe actions on object
pointers, such as method invocations, to learn the relationships
between methods and classes, and this information pertains to any
method that is invoked in the target program.
OOAnalyzer’s design is motivated by the observation that many
human analysts reason about C++ programs in an incremental
fashion [23, 27]. In particular, they often make simple, low-level
findings by spotting patterns in binary code, and then combine
these findings using logical inference, domain knowledge, and in-
tuition. OOAnalyzer employs a lightweight static symbolic binary
analysis and a Prolog-based inference system to codify the human
analyst approach, allowing it to efficiently search for code patterns
that are indicative of higher-level OO program properties. More
importantly, OOAnalyzer’s inference system also allows it to reason
hypothetically through ambiguous scenarios. When OOAnalyzer
is stuck and cannot make progress, it can temporarily promote an
uncertain property about the program to higher certainty, enabling
OOAnalyzer to reason about the new scenario as if it was true. If
that scenario leads to a contradiction, OOAnalyzer uses Prolog’s
ability to backtrack to search for an alternate reasoning path. This
ability is critical for reasoning about OO programs, which often con-
tain ambiguous properties that need to be resolved before reasoning
can progress effectively.
OOAnalyzer’s inference system allows it to scale to large, real-
world programs such as Firefox and MySQL. Because its reasoning
component can cope with incomplete, contradictory and ambiguous
facts, we designed OOAnalyzer to use a simple but scalable static
symbolic analysis to generate the initial facts that serve as the basis
for higher level reasoning. OOAnalyzer also gains scalability by
reasoning about OO properties in the domain and language of high-
level OO abstractions, rather than reasoning purely on detailed,
low-level executable semantics.
We also propose a new edit distance metric for evaluating the
quality of recovered C++ abstractions. Most existing systems re-
cover classes by discovering vftables, which makes evaluation trivial
because each vftable can be mapped to its corresponding source
code class and compared. Because OOAnalyzer can recover non-
polymorphic classes, which do not have a corresponding natural
identifier such as vftables, there is not always a clear correspon-
dence between the classes that OOAnalyzer recovers and those in
the source code. Edit distance allows us to evaluate the quality of
our results without this correspondence. Using our new metric, we
show in our evaluation that, on average, OOAnalyzer places over
78% of methods on the correct class, and can distinguish construc-
tors with an average recall and precision of 0.88 and 0.88.
In summary, the contributions of our paper are:
(1) We design and implement OOAnalyzer, a system for recover-
ing detailed C++ abstractions from executables in a scalable
manner. OOAnalyzer recovers information about all classes
and methods, including non-polymorphic classes.
(2) We propose using edit distance as a metric for evaluating
the quality of C++ abstractions returned by systems such as
OOAnalyzer. We show that debug symbols can be used to
generate the ground truth for this comparison.
(3) We evaluate OOAnalyzer on malware samples and well-
known cleanware programs including Firefox and MySQL.
We show that OOAnalyzer is able to accurately recover most
C++ classes and their methods (78% of methods on average),
and can identify special methods such as constructors, de-
structors, vftables, and virtual methods (average F-scores of
0.87, 0.41, 0.97, and 0.88).
2 BACKGROUND
We assume that readers are familiar with the basic concepts of
C++ such as classes, methods, and members. In this section, we
review the more advanced features of C++ that are pertinent to the
design of OOAnalyzer, and briefly discuss how Microsoft Visual
C++ implements these features. For more information, we refer the
reader to other sources [11].
2.1 Virtual Functions
Sometimes a programmer may wish to invoke a method on an
object without knowing the object’s exact type, in which case we
say the method and class are both polymorphic. For example, a
configuration file may select the class that implements an object. In
C++, polymorphic methods are known as virtual functions. When a
virtual function is invoked, its implementation is selected at runtime
based on the object’s type (instead of the type of the pointer to the
object).
Virtual functions are implemented by including an implicit class
member that points to the virtual function table (vftable) for the
object. The virtual function table contains an entry for each vir-
tual function that can be called on objects of that type. Visual C++
computes these virtual function tables at compile time, and a con-
structor or destructor may use code like the following to install a
vftable into the current object:
mov eax, objptr
mov [eax], vftableptr
Many related works rely on virtual function tables as their primary
source of information, and as a result can only recover information
about polymorphic classes or virtual functions [6–10, 15, 19, 33].
2.2 Class Relationships
A program’s classes can relate to one another in a variety of ways.
The two most common relationships are inheritance and compo-
sition. When class A inherits from class B, most members and
methods on class B will be automatically pulled into the definition
of class A. Class A is usually called the derived class, and class B is
called the base class. Inheritance is often used in practice to mini-
mize code duplication by factoring shared code into base classes
that are inherited by derived classes with more specific behaviors.
The other type of relationship is composition. Class A is composed
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada427Executable
Fact
Exporter
Forward
Reasoning
Hypothetical
Reasoning
Consistency
Checking
C++ Abstractions
Prolog-based Reasoning Component
Figure 1: The system-level design of OOAnalyzer. OOAnalyzer exports low-level facts for an executable using a lightweight
symbolic analysis. Prolog-based reasoning then deduces new facts, makes hypothetical assertions (e.g., guesses) to address
ambiguous properties, and validates the consistency of the C++ abstractions model. The final model is provided to the user
when it is consistent and no proposed guesses remain.
of class B when class A stores an object of class B as a data mem-
ber. Class A can access class B’s public functionality through the
object’s methods and members.
2.3 Method Implementation and thiscall
C++ methods are implemented as special functions that reserve a
parameter for the object on which the method is being invoked [11].
Most C++ methods are implemented using the thiscall calling
convention, which passes the object pointer in the ecx register. This
is important because such methods can be detected by observing
that a function appears to access an object through the ecx register.
2.4 Runtime Type Identification
RTTI is optional metadata that is used to implement C++ type
introspection features such as dynamic_cast and typeid. RTTI
data structures include information such as each class’s name and
base classes. Only polymorphic classes have RTTI records and
malware authors sometimes disable RTTI during compilation if the
program does not utilize the introspection features. Some related
work relies on RTTI as its primary source of information [33].
3 DESIGN
OOAnalyzer’s design is largely motivated by the observation that
human analysts often reverse engineer complex programs incremen-
tally by combining logic, domain knowledge, and intuition [23, 27].
Specifically, analysts often start by developing a rough mental
model of the program by “skimming” for common patterns that
indicate or suggest specific C++ abstractions. Some patterns are
strong enough that the analyst may immediately conclude a new
fact about the program. In other cases, the pattern only suggests
that the program may have a particular property, in which case
the analyst often makes an educated guess that the program has
the property. After making an educated guess, if the analyst later
encounters conflicting evidence, she revises her guess. As the an-
alyst observes and concludes more facts about the program that
do not contradict each other, she becomes more confident in her
knowledge about the program.
3.1 Design Goals and Motivations
3.1.1
Support for Non-polymorphic Classes. Most existing work
on recovering C++ abstractions relies on the presence of virtual
function tables, and as a result can only recover information about
polymorphic classes [6–10, 15, 19, 33]. We designed OOAnalyzer so
that it can reason about all classes and methods. As a consequence,
OOAnalyzer cannot use vftables as class identifiers since not all
classes will have them. Instead, it represents classes as the set of
methods defined on the class. Another important consequence is
that even though vftables provide valuable evidence about method-
to-class assignments for virtual functions [10], OOAnalyzer cannot
rely solely on this source of evidence. Instead, OOAnalyzer primar-
ily assigns methods to classes by observing method calls on object
pointers as they flow throughout the program. When a group of
methods is invoked on the same object pointer, those methods must
be defined on that object’s class or one of its base classes.
3.1.2
Logic Programming to Resolve Ambiguity. Some C++ prop-
erties are ambiguous at the executable level, which makes educated
guessing an important part of recovering C++ abstractions. Am-
biguous properties occur because programs with distinct C++ ab-
stractions can have equivalent run-time (i.e., executable) semantics
and thus can result in identical executables. To allow OOAnalyzer
to make and recover from educated guesses, OOAnalyzer features
Prolog prominently in its design. Prolog is used both as a mecha-
nism for succinctly encoding the rules that comprise OOAnalyzer’s
reasoning process and as a strategy to search for a consistent model
of the program. OOAnalyzer also takes full advantage of Prolog’s
backtracking capabilities, which allows it to cope with faulty as-
sumptions and guesses. Whenever an inconsistency in reasoning
is detected, Prolog allows OOAnalyzer to backtrack or “rewind”
any reasoning performed since the last guess that was made. We
show in Section 6.4 that without the ability to make and recover
from educated guesses, OOAnalyzer’s average error rate balloons
significantly (from 21.8% to 81%).
3.2 Design Overview
OOAnalyzer formalizes and automates the incremental reasoning
approach by combining a lightweight static symbolic binary anal-
ysis with a flexible Prolog-based reasoning framework. As can be
seen in Fig. 1, OOAnalyzer takes an executable program as input,
and first extracts low-level facts that form the basis of reasoning. It
then deduces new facts that are implied by the current facts using
forward reasoning rules until it can reach no new conclusions. It
then identifies an ambiguous property for which a direct deduction
is not possible, and hypothetically asserts, or guesses, a fact about
that property. After asserting the fact, it deduces the consequences
of the guess by returning to forward reasoning. When it can reach
no new conclusions, it finally validates the consistency of the C++
abstractions model. If the model is inconsistent, OOAnalyzer sys-
tematically revisits the guesses that it made through hypothetical
reasoning, starting with the most recent one. When the current
model is internally consistent and no proposed guesses remain,
OOAnalyzer outputs the discovered model for the user.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada4283.2.1 Executable Fact Exporter. The executable fact exporter is
responsible for performing the “traditional” binary analysis steps
of disassembling and lifting assembly instructions to a semantic
representation, partitioning the instructions into separate functions,
and conducting semantic analysis. There are many ways to perform
semantic analysis, and in the interest of scalability, OOAnalyzer uses
a lightweight symbolic analysis. OOAnalyzer also makes a number
of simplifying assumptions that are characteristic of executables
emitted by a reasonable compiler [11].
The facts generated by the fact exporter are called initial facts.
They generally describe low-level program behaviors, such as call-
ing a method on an object pointer, and these behaviors form the
foundation on which all other conclusions in the system are based.
These facts are approximations, and most have one sided errors. As
a result, most of OOAnalyzer’s rules assume that initial facts are
“low confidence.” Informally, this means that they need to be vali-
dated or corroborated by other facts before they should be utilized,
since they could be wrong!1 All initial facts are static, meaning
that they are not modified during the later reasoning stages of
OOAnalyzer.
3.2.2
Forward Reasoning. OOAnalyzer reasons about the pro-
gram by matching a built-in set of rules over facts in the fact base.
Each reasoning rule is an inference rule that has one or more pre-
conditions and a conclusion. If all of the preconditions are satisfied
by the fact base, then the conclusion is added to the fact base. Ini-
tially, the fact base consists of only the initial facts that are emitted
by the executable fact exporter. As reasoning proceeds, more facts
are added by forward reasoning and hypothetical reasoning.
The facts emitted by forward and hypothetical reasoning are
called entity facts. Unlike initial facts, which typically describe a
property of executable semantics, entity facts describe an aspect of
the C++ abstractions that our system is attempting to recover, and
intermediate conclusions about those properties. Entity facts are
dynamically asserted and retracted as the model of the program
evolves during the reasoning process.
3.2.3 Hypothetical Reasoning. Sometimes OOAnalyzer is un-
able to reach new forward reasoning conclusions before important
properties about the program are resolved. To continue making
progress in these scenarios, OOAnalyzer identifies an ambiguous
property and makes an educated guess about it, which we call hy-
pothetical reasoning. OOAnalyzer has hypothetical reasoning rules
that function similarly to forward reasoning rules, but instead de-
scribe the ambiguous situations in which OOAnalyzer should make
its guesses. The analysis of the program is complete only when
all ambiguous properties have been resolved. Since hypothetical
rules only provide educated guesses for ambiguous properties, it is
possible for an incorrect guess to introduce inconsistencies in the
model of the program. As a result, the model must pass consistency
checks before the resulting entity fact is accepted.
3.2.4 Consistency Checking. When OOAnalyzer detects an in-
consistency in the current fact base it backtracks and systematically
revisits the earlier guesses that have been made, starting with the
1“Wrong fact” is obviously an oxymoron, but we use fact to denote a piece of evidence,
rather than something that is indisputable. In other words, we use fact synonymously
with belief.
most recent one. Consistency checks are implemented by a special
set of rules that detect contradictions instead of asserting new facts.
Conceptually, consistency rules could be implemented as con-
straints that block forward reasoning and hypothetical rules from
making inconsistent conclusions. But this design would not allow
OOAnalyzer to backtrack and correct the root cause of the prob-
lem (i.e., a bad guess), which may have occurred much earlier. By
separating our consistency rules and forcing OOAnalyzer to back-
track when they are violated, it allows OOAnalyzer to utilize the
conclusions of forward reasoning but revert them when they lead
to an inconsistent state.
4 REASONING SYSTEM
4.1 Symbolic Analysis
OOAnalyzer’s fact exporter employs a lightweight symbolic anal-
ysis that is provided as one of the features of the Pharos binary
analysis framework (Section 5). Pharos’s symbolic analysis attempts
to represent the final values of registers and memory at the end
of a function as symbolic expressions in terms of the function’s
symbolic inputs. For example, if a function increments eax and the
initial symbolic value of eax is represented as eax_init, the out-
put state for eax would be eax_init + 1. Each function’s symbolic
summary is computed using a lightweight, intra-procedural, path-
and flow-sensitive data-flow algorithm. (Inter-procedural reasoning
occurs later in the Prolog part of the system; see Section 4.2 for de-
tails.) OOAnalyzer also uses auxiliary analyses in Pharos that track
the propagation of object pointers and identify calling conventions
(Section 4.2).
OOAnalyzer’s symbolic analysis is designed to be lightweight
and scalable, and as a result, differs from conventional binary sym-
bolic analysis [4, 5, 25, 26] in many ways. First, OOAnalyzer does
not use SMT constraint solvers to reason about whether a partic-
ular program execution is feasible. Instead, OOAnalyzer assumes
all execution paths are feasible. OOAnalyzer reasons about each