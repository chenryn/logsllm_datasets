u
o
r
h
T
 20
 15
 10
 5
 0
VESPA
binpac
HTTP
IPP
WMF
(a) DNS Throughput
(b) Parser Throughput (Gpbs)
(Mbps)
Fig. 3. Vulnerability Signature Matcher Performance
Therefore, our architecture stands to beneﬁt from further improvements of the base
matching primitives of binary traversal as well.
DNS. The DNS protocol includes a compression mechanism to avoid including a com-
mon DNS sufﬁx more than once in the same message. Parsing these compressed suf-
ﬁxes, called name pointers, is best done with a recursive parser, but doing so introduces
the possibility of a “pointer cycle,” where a specially-crafted message can force a parser
to consume an inﬁnite amount of stack space, leading to a denial of service [20].
DNS name pointers can occur in many different structures in DNS, so the binary
traversal must parse and visit many of the ﬁelds in the protocol. Therefore, parsing
DNS is usually much slower than other protocols. Indeed, DNS is the worst-performing
of our vulnerability signature matchers, though it is still several times faster than binpac,
as can be seen in Figure 3. Pang et al. suggest that this is due to an inherent difﬁculty
of parsing DNS, pointing to the comparable performance of their hand-implemented
parser to binpac [1]. We have found this not to be the case, as our hand-implemented
DNS parser that ﬁnds pointer cycles can operate at nearly 3 Gbps (see Table 1). As part
of our future work, we will investigate what part of our current design is responsible
for the much worse performance of DNS; our hope is that we will be able to achieve
speeds in excess of 1 Gbps with an automatically-generated parser.
WMF. Vulnerabilities are increasingly being found in ﬁle formats (so called “data-
driven attacks”) rather than just network messages. The WMF format allows speciﬁ-
cation of a binary “abort procedure,” called if the rendering engine is interrupted. At-
tackers began to misuse this feature in late 2005, using the abort handler for “drive-by
downloads,” where an attacker could run arbitrary code on a victim’s computer by sim-
ply convincing them to render a WMF, requiring only a website visit for clients using
Internet Explorer (CVE-2005-4560 [10]).
This vulnerability has been problematic for intrusion detection systems, Snort in par-
ticular. Snort normally processes only the ﬁrst few hundred bytes of a message when
looking for vulnerabilities; however, a WMF vulnerability can be placed at the end
of a very large media ﬁle. However, matching the Snort rule set over an entire mes-
sage exhausts the resources of most intrusion detection systems, requiring most sites
170
N. Schear, D.R. Albrecht, and N. Borisov
to resort to a convoluted conﬁguration with two Snort processes running in concert.
Our architecture allows for a much cleaner approach: after an HTTP header has been
parsed, the WMF vulnerability matcher would be called in the body handler, while other
string matchers and handlers would be turned off. Figure 3 shows that WMF ﬁles can
be parsed at multi-gigabit rates, so this would not put a signiﬁcant strain on the CPU
resources of the NIDS.
7 Future Directions
Although our prototype shows that high-performance vulnerability signature match-
ing is possible in software, to achieve speeds in excess of 1 Gbps for all protocols, a
hardware-accelerated approach is likely needed. Our plan is to use hardware implemen-
tations of fast pattern-matching algorithms [14,21] to replace the software implemen-
tations. This should dramatically increase the performance of text protocol parsing, as
discussed in Section 6.1. We will also investigate the use of network processors, such as
the Intel IXP family [22], to bring vulnerability processing closer to the network inter-
face, and to exploit the inherent parallelism in matching signatures. Previous work has
shown that using network processors can be nearly two orders of magnitude faster than
similar implementations in software [23]. Network processors achieve such speedups
in part by using a complex memory hierarchy; our careful management of limited state
makes our architecture well-adapted to being ported to a network processor.
There are also performance gains yet to be realized in software matching as well.
Our hand-coded matchers for vulnerabilities in binary protocols, in particular, are sig-
niﬁcantly fasters than those implemented using VESPA (see Table 1). The extra per-
formance is likely due to eliminating the abstractions that ensue from representing a
binary protocol structure in binpac. Our future work includes faster implementation of
those abstractions, as well as the design of abstractions better suited to fast matching.
One challenge that we will face is the fact that binary protocols exhibit much less con-
sistency of design than text protocols.
Our eventual goal is to create a network intrusion prevention system (NIPS), which
will sit as a “bump in the wire” and ﬁlter attacking trafﬁc. In addition to throughput,
another challenge that a NIPS will face is reducing latency, since, unlike intrusion de-
tection systems, ﬁltering decisions must be complete before the trafﬁc can be forwarded
to its destination. Furthermore, a NIPS must be able to recognize a large collection of
vulnerability signatures at once. Our use of multi-pattern search as a base primitive will
make parallel matching of several signatures easier to implement, but our design will
need to incorporate constructs that will allow the reuse of common components (e.g.,
HTTP Content-Length extraction) between multiple signatures.
Authoring of effective signatures is a complex and error-prone process; this is true for
exploit signatures, and more so for vulnerability signatures. Although our architecture
was optimized for performance, rather than ease of authorship, we have found that ex-
pressing vulnerability constraints using VESPA was not appreciably more difﬁcult than
using binpac or GAPA. However, as we gain more experience with VESPA, we plan
to improve the interface between the programmer and our architecture by, for example,
High-Speed Matching of Vulnerability Signatures
171
introducing more reusable constructs and modularity. We also plan to develop better
architectures for testing vulnerability signatures, to ensure that they do not generate
false positives or false negatives.
Finally, automatic generation of vulnerability signatures can make them useful for
not only known vulnerabilities, but new ones just observed (“zero-day”). Previous work
has used annotated protocol structure [24,19], program analysis [9,25], or data ﬂow
analysis [26] to automatically generate vulnerability signatures. We will explore to what
extent these approaches may be used to automatically generate signatures in our archi-
tecture. This will present a signiﬁcant challenge to an automated approach, given that
our architecture relegates more of state management to the programmer.
8 Related Work
8.1 Pattern Matching
The Wu–Manber [12], Boyer–Moore [27], and Aho–Corasick [11] algorithms provide
fast searching for multiple strings. Their superior performance has made them natural
candidates for IDS pattern-matching; in addition to our system, Snort [17] uses Aho–
Corasick to match static strings.
Although slower than string matching, regular expression-based matching provides
considerably more expressive power. Regular-expression matching is well-studied in
the literature; broadly, deterministic matching (e.g., ﬂex [28]) offers linear time but
exponential space complexity, while nondeterministic matching (e.g., pcre [29]) of-
fers linear space but exponential time complexity. Smith et al. attempt to combine
the advantages of deterministic and nondeterministic matching using Extended Finite
Automata [30]. Rubin et al. have developed protomatching to heuristically reduce match-
ing complexity by discarding non-matching packets as quickly as possible, while keep-
ing a low memory footprint [31]. Special-purpose hardware achieves sustained pattern
matching at 4 Gbps [14]. Clark et al. [13] used application-speciﬁc FPGA cores to ex-
ploit the parallelism inherent in searching for many patterns simultaneously in a single
body of text.
8.2 Vulnerability Signatures
The Shield project at Microsoft Research [2] pioneered the idea of vulnerability sig-
natures; Borisov et al. extended the idea with a generic protocol parser generator [7].
Brumley et al. explained the complexity of various approaches to matching [9].
The binpac project at UC Berkeley and the International Computer Science Insti-
tute [1] focused on implementing a yacc-like tool for generating efﬁcient protocol
parsers from high-level deﬁnitions. binpac abstracts away much error-inducing com-
plexity (e.g., network byte ordering). Its performance for many protocols is adequate
for many intrusion detection tasks, but the VESPA architecture signiﬁcantly improves
on it, as shown in our evaluation.
The ongoing NetShield project [32] shares our goals of high-speed vulnerability sig-
nature detection. It has resulted in novel techniques for fast binary traversal, as well
as efﬁcient multi-signature matching, which may provide promising approaches for ad-
dressing some of the same challenges in VESPA.
172
N. Schear, D.R. Albrecht, and N. Borisov
8.3 Intrusion Detection
Intrusion detection requires attention to both algorithmic efﬁciency, and systems / im-
plementation issues. Ptacek and Newsham [33] have detailed several strategies for
evading intrusion detection by shifting packet TTLs, among others. Snort [34,17] and
Bro [8], two popular IDS platforms, have addressed many systems-level issues, but are
intended only to detect, not prevent intrusion. So-called intrusion prevention systems go
further, by being deployed inline with the forwarding path; these systems take a more
active stance against hostile trafﬁc by dropping malicious or otherwise anomalous pack-
ets. The SafeCard [35] project used an Intel IXP network processor to perform intrusion
protection in real-time up to 1 Gbps. It used high-speed matching of regular expressions,
as well as an early implementation of Prospector [26] signatures, ﬁnding vulnerabilities
within HTTP headers. The project shows that special-purpose hardware is a promising
direction for high-performance intrusion prevention systems.
9 Conclusion
We have proposed an architecture, called VESPA, for fast matching of vulnerability
signatures. VESPA relies on the fact that full protocol parsing is often not necessary to
match vulnerability signatures and as a result is able to match signatures several times
faster than existing work. We have built a prototype implementation of our architec-
ture, and we showed that we can match vulnerabilities in many protocols at speeds in
excess of 1 Gbps, thus demonstrating that vulnerability signatures are practical for high-
performance network intrusion detection systems. We plan to continue to improve the
performance of our system by improved implementation of base primitives and hard-
ware acceleration, and to develop a full-ﬂedged implementation of a high-performance
network intrusion prevention system based on vulnerability signatures.
Acknowledgments
We would like to thank David Nicol and William Sanders for their guidance on this
project and the anonymous referees for their suggestions on an earlier version of this
draft. This work was supported by NSF grant CNS 06–27671.
References
1. Pang, R., Paxson, V., Sommer, R., Peterson, L.: binpac: A yacc for Writing Application
Protocol Parsers. In: Proceedings of the Internet Measurement Conference (2006)
2. Wang, H.J., Guo, C., Simon, D.R., Zugenmaier, A.: Shield: Vulnerability-Driven Network
Filters for Preventing Known Vulnerability Exploits. In: ACM SIGCOMM Computer Com-
munications Review (2004)
3. CERT: “Code Red” Worm Exploiting Buffer Overﬂow in IIS Indexing Service DLL. CERT
Advisory CA-2001-19 (July 2001),
www.cert.org/advisories/CA-2001-19.html
4. Friedl, S.: Analysis of the New “Code Red II” Variant (August 2001),
http://www.unixwiz.net/techtips/CodeRedII.html
High-Speed Matching of Vulnerability Signatures
173
5. Microsoft: Unchecked Buffer in ISAPI Extension Could Enable Compromise of IIS 5.0
Server. Microsoft Security Bulletin MS01-033 (June 2001),
www.microsoft.com/technet/security/bulletin/ms01-023.mspx
6. Rescorla, E.: Security Holes... Who Cares?. In: Paxson, V. (ed.) USENIX Security Sympo-
sium (August 2003)
7. Borisov, N., Brumley, D.J., Wang, H.J., Dunagan, J., Joshi, P., Guo, C.: A Generic
Application-Level Protocol Parser Analyzer and its Language. In: Proceedings of the 14th
Annual Network and Distributed System Security Symposium (2007)
8. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-time. Comput.
Netw. 31(23-24), 2435–2463 (1999)
9. Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.: Towards Automatic Generation of
Vulnerability-Based Signatures. In: Proceedings of the 2006 IEEE Symposium on Security
and Privacy (2006)
10. CVE: Common Vulnerabilities and Exposures, http://cve.mitre.org/
11. Aho, A.V., Corasick, M.J.: Efﬁcient String Matching: an Aid to Bibliographic Search. Com-
mun. ACM 18(6), 333–340 (1975)
12. Wu, S., Manber, U.: A Fast Algorithm for Multi-Pattern Searching. Technical Report TR-94-
17, Department of Computer Science, University of Arizona (1994)
13. Clark, C., Lee, W., Schimmel, D., Contis, D., Kon´e, M., Thomas, A.: A Hardware Platform
for Network Intrusion Detection and Prevention. In: Proceedings of the Third Workshop on
Network Processors and Applications (2004)
14. Brodie, B.C., Taylor, D.E., Cytron, R.K.: A Scalable Architecture For High-Throughput
Regular-Expression Pattern Matching. In: ISCA, pp. 191–202 (2006)
15. Dreger, H., Feldmann, A., Mai, M., Paxson, V., Sommer, R.: Dynamic Application-layer
Protocol Analysis for Network Intrusion Detection. In: USENIX-SS 2006: Proceedings of
the 15th conference on USENIX Security Symposium, Berkeley, CA, USA, p. 18. USENIX
Association (2006)
16. Dominus, M.J.: Higher Order Perl: Transforming Programs with Programs. Morgan Kauf-
mann, San Francisco (2005)
17. Sourceﬁre, Inc.: Snort, www.snort.org
18. Watson, B.W., Cleophas, L.: SPARE Parts: a C++ Toolkit for String Pattern Recognition.
Softw. Pract. Exper. 34(7), 697–710 (2004)
19. Cui, W., Peinado, M., Wang, H.J., Locasto, M.E.: ShieldGen: Automatic Data Patch Gener-
ation for Unknown Vulnerabilities with Informed Probing. In: Pﬁtzmann, B., McDaniel, P.
(eds.) IEEE Symposium on Security and Privacy, May 2007, pp. 252–266 (2007)
20. NISCC: Vulnerability Advisory 589088/NISCC/DNS (May 2005),
http://www.cpni.gov.uk/docs/re-20050524-00432.pdf
21. Clark, C.R., Schimmel, D.E.: Scalable Pattern Matching for High-Speed Networks. In: IEEE
Symposium on Field-Programmable Custom Computing Machines (FCCM), Napa, Califor-
nia, pp. 249–257 (2004)
22. Intel: Intel Network Processors,
www.intel.com/design/network/products/npfamily/index.htm
23. Turner, J.S., Crowley, P., DeHart, J., Freestone, A., Heller, B., Kuhns, F., Kumar, S., Lock-
wood, J., Lu, J., Wilson, M., Wiseman, C., Zar, D.: Supercharging PlanetLab: A High Per-
formance, Multi-application, Overlay Network Platform. SIGCOMM Computing Commu-
nications Review 37(4), 85–96 (2007)
24. Liang, Z., Sekar, R.: Fast and Automated Generation of Attack Signatures: A Basis for Build-
ing Self-protecting Servers. In: Meadows, C. (ed.) ACM Conference on Computer and Com-
munications Security, November 2005, pp. 213–222. ACM, New York (2005)
174
N. Schear, D.R. Albrecht, and N. Borisov
25. Brumley, D., Wang, H., Jha, S., Song, D.: Creating Vulnerability Signatures Using Weakest
Pre-conditions. In: Proceedings of the 2007 Computer Security Foundations Symposium,
Venice, Italy (July 2007)
26. Slowinska, A., Bos, H.: The Age of Data: Pinpointing Guilty Bytes in Polymorphic Buffer
Overﬂows on Heap or Stack. In: Samarati, P., Payne, C. (eds.) Annual Computer Security
Applications Conference (December 2007)
27. Boyer, R.S., Moore, J.S.: A Fast String Searching Algorithm. Commun. ACM 20(10), 762–
772 (1977)
28. Flex: The Fast Lexical Analyzer, http://www.gnu.org/software/flex
29. PCRE: Perl Compatible Regular Expression Library, http://www.pcre.org
30. Smith, R., Estan, C., Jha, S.: XFA: Faster Signature Matching with Extended Automata. In:
Proceedings of the 2008 IEEE Symposium on Security and Privacy (2008)
31. Rubin, S., Jha, S., Miller, B.P.: Protomatching Network Trafﬁc for High Throughput Net-
work Intrusion Detection. In: Proceedings of the 13th ACM conference on Computer and
communications security (2006)
32. Li, Z., Xia, G., Tang, Y., He, Y., Chen, Y., Liu, B., West, J., Spadaro, J.: NetShield: Match-
ing with a Large Vulnerability Signature Ruleset for High Performance Network Defense
(manuscript) (2008)
33. Ptacek, T.H., Newsham, T.N.: Insertion, Evasion, and Denial of Service: Eluding Network
Intrusion Detection. Technical report, Secure Networks, Inc., Suite 330, 1201 5th Street S.W,
Calgary, Alberta, Canada, T2R-0Y6 (1998)
34. Roesch, M.: Snort—Lightweight Intrusion Detection for Networks. In: Parter, D. (ed.) Pro-
ceedings of the 1999 USENIX LISA Systems Administration Conference, Berkeley, CA,
USA, November 1999, pp. 229–238. USENIX Association (1999)
35. de Bruijn, W., Slowinska, A., van Reeuwijk, K., Hruby, T., Xu, L., Bos, H.: SafeCard: A
Gigabit IPS on the Network Card. In: Proceedings of the 9th International Symposium On
Recent Advances in Intrusion Detection (2006)