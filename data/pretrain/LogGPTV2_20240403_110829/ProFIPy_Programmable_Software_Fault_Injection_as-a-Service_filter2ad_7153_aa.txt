title:ProFIPy: Programmable Software Fault Injection as-a-Service
author:Domenico Cotroneo and
Luigi De Simone and
Pietro Liguori and
Roberto Natella
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
ProFIPy: Programmable Software Fault Injection
as-a-Service
Domenico Cotroneo, Luigi De Simone, Pietro Liguori, Roberto Natella
Universit`a degli Studi di Napoli Federico II, Italy
{cotroneo, luigi.desimone, pietro.liguori, roberto.natella}@unina.it
Abstract—In this paper, we present a new fault injection
tool (ProFIPy) for Python software. The tool
is designed to
be programmable,
in order to enable users to specify their
software fault model, using a domain-speciﬁc language (DSL) for
fault injection. Moreover, to achieve better usability, ProFIPy is
provided as software-as-a-service and supports the user through
the conﬁguration of the faultload and workload, failure data
analysis, and full automation of the experiments using container-
based virtualization and parallelization.
Index Terms—Software Fault Injection, Python, Software-as-
a-Service, Bug Pattern
I. INTRODUCTION
Fault injection is a key technique for assessing fault-tolerant
systems, ranging from embedded and mobile systems [1] to
distributed systems [2]. To perform a fault injection campaign,
it is important to deﬁne a fault model, which describes the
faults to be emulated in the experiments. The fault model entails
the deﬁnition of three main aspects, namely what to inject
(i.e., which kind of fault), when to inject (i.e., the timing of
the injection), and where to inject (i.e., the part of the system
targeted by the injection) [3]–[7]. The what can be represented
by bit-ﬂips [1]; program exceptions for amplifying unit- and
integration-tests [8], [9]; node crashes, network partitions and
latency for networked and distributed systems [2], [10]. The
when and where to inject are sampled from a (large) space of
possibilities across time and program locations.
The problem of deﬁning a fault model becomes more difﬁcult
when injecting software faults (i.e., design and/or programming
defects [11]), since they depend on a variety of technical and
organizational factors, including the programming language, the
software development process, the maturity of the system, the
expertise of developers, and the application domain [12], [13].
Despite the variability of software faults across systems, the
existing software fault injection tools are based on a predeﬁned,
ﬁxed software fault model, that cannot be easily customized
by users. Most of the existing tools adopt the Orthogonal
Defect Classiﬁcation (ODC), proposed in the ’90s (e.g., bugs
in initialization, algorithm, interfaces, etc.), or derived the
fault model from bug samples of third-party open-source and
commercial projects [3], [14].
We believe that a modern software fault injection tool has
to be able to modify the fault model for the following reasons.
First, a typical necessity in industry, which arises when a critical
failure occurs, is to introduce regression tests against the fault
that caused the failure, to assure that the same failure cannot
occur again [15]. Second, to preserve the efﬁciency of the fault
injection campaign, it is important to avoid injecting bugs that
are unlikely to affect a system; e.g., some classes of faults may
be prevented by testing and static analysis policies adopted by
the company [16]. Third, as the scale and the complexity of
systems increase, the need for a more sophisticated fault model
grows. For instance, modern distributed systems, such as cloud
applications, have to integrate a variety of components, including
third-party and open-source ones, and they have to deal with
high volumes of trafﬁc. For these systems, the user needs to
inject more variants of design/programming defects than those
reported in the literature, including performance bottlenecks,
resource management issues, lack of interoperability between
components, security issues, failed updates, etc., and to adapt
these faults to their projects. In general, the potential users of
software fault injection want to tune the fault model so that
it reﬂects their experience and expectations about failures. All
these use cases require a greater degree of control over the fault
model than what provided by existing fault injection tools.
In this paper, we present a new fault injection tool (ProFIPy)
designed to be programmable, enabling users to add and to
customize a software fault model. By using our tool, users
can specify new software fault models using a domain-speciﬁc
language (DSL) for fault injection. The tool compiles the speciﬁ-
cation into an automatically-generated fault injector. Finally, the
generated fault injector is applied to the software-under-test to
generate fault-injected versions and to execute experiments. To
achieve better usability, ProFIPy is provided as software-as-a-
service, and includes a workﬂow for conﬁguring the faultload and
the workload to i) fully automate the execution of experiments
using container-based virtualization and parallelization, and to
ii) perform failure data analysis. The tool has been designed
for the popular Python language, which has recently arisen as
one of the most widespread languages (e.g., among the GitHub
and StackOverﬂow communities [17], [18]), and has found
applications in several areas such as systems software (e.g., the
OpenStack cloud platform is one of the largest projects in Python
[19], [20]), enterprise and web applications and data science
[21]. We present ProFIPy in the context of a Python project, by
performing three fault injection campaigns in which we deﬁne
three different faultloads.
In the following, Section II discusses related work; Section III
presents a new domain-speciﬁc language; Section IV describes
the workﬂow of the tool; Section V shows the application of
ProFIPy on a Python project; Section VI concludes the paper.
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00052
364
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
II. RELATED WORK
The idea of software fault modeling for fault injection purposes
was initially investigated by Chillarege et al. [22], who analyzed a
dataset of failures of IBM OS and DBMS products at users’ sites
[23], [24], to identify recurring patterns in the faults that caused
them, and to inject the same patterns by corrupting program
data and code, e.g., as in the FINE tool [25]. In the same
period, they also introduced the Orthogonal Defect Classiﬁcation
(ODC) [26], [27], where one the goals was to classify software
fault data into orthogonal categories, including Initialization,
Algorithm, Interface, Checking, and Synchronization defects.
Christmansson and Chillarege [3] proposed to inject software
faults by following the statistical distribution of OS faults across
these categories, such that the injected faults are representative
of faults experienced by the users of the OS in the ﬁeld.
Similarly, Chen and colleagues [28], [29] deﬁned a software
fault model for OSes based on data for the IBM MVS and
Tandem GUARDIAN90 OS products [23], [30], and used this
fault model to emulate realistic OS and DBMS crashes, to assess
crash recovery mechanisms. This fault model was later merged
in the well-known fault injection tool of the Nooks project [31].
The work on the G-SWFIT fault injection technique by
Madeira and colleagues [14], [32] aimed to deﬁne a generic
software fault model (i.e., not tailored for a speciﬁc system)
that could go beyond speciﬁc OS and DBMS products, and
that could be used for injecting faults even without any ﬁeld
failure data for the speciﬁc system under testing. To deﬁne such
a generic fault model, they analyzed a sample of bugs in several
open-source projects in C [14], [32] and Java [33], [34], and
looked for bug-ﬁxes (e.g., program elements that were changed
to ﬁx the bug, such as new assignments, control ﬂow constructs,
function calls, etc.) which were recurring more than the norm,
and which occurred consistently across all of the projects. Based
on this analysis, they deﬁned a software fault model with 13 fault
types, covering 60% of the sample of bugs in the open-source
projects [14]. This fault model was used in several other tools,
including SAFE [35], HSFI [36], and FastFI [37]. However,
these tools focus on a ﬁxed software fault model, with no ability
to customize the injected faults according to the speciﬁc needs
of a project or company.
Winter et al. [38] and Giuffrida et al. [39] showed that
implementing a new fault model in a tool takes both signiﬁcant
programming effort, e.g., in terms of SLOC and other metrics,
and considerable expertise in program analysis and transforma-
tion, e.g., to implement a software fault injection tool using the
LLVM compiler suite, which are not affordable for the average
user of a fault injection tool.
Some tools provide a limited ability to customize the fault
model with a lower effort: among them, the FIDLFI tool [40]
provides the user with a conﬁguration language to control the
trigger of fault injection (i.e., instructions and paths that trigger
the injection), target (i.e., instruction source and destination
registers to inject), and action (e.g., corruption, freeze, delay,
etc.). The FAIL-FCI tool [41] provides a fault injection language
tailored for grid systems, which speciﬁes protocol states and
nodes to inject (e.g., node crashes). PreFail [2] and FATE [10],
which inject crashes and I/O API errors, allow the user to write
policies in Python to select the location and timing of potential
injections by considering the allocation of processes across nodes
and racks (e.g., network partitions between different racks), and
the coverage of injectable points in the software-under-test. LFI
[42], which injects errors at C library calls, allows the user to
conﬁgure what functions and error codes should be injected,
and when to trigger the injection (e.g., when a speciﬁc function
appears in the stack frame) using an XML conﬁguration ﬁle.
The commercial tools QA Systems Cantata [43] and Razorcat
TESSY [44] provide user-friendly GUIs to select a source-code
statement to inject, similarly to breakpoints in a GUI debugger.
It is important to note that these tools do not support rich
software fault models as in G-SWFIT and derivatives, as they only
provide limited control on what to inject, e.g., they focus on API
and library calls, register accesses, nodes, etc., but do not allow
to create new fault types for injecting arbitrary changes to the
software. The proposed ProFIPy tool provides a new language
to gain a higher degree of control, where the user can specify
transformation rules about which parts of the program to inject,
in terms of program elements (e.g., assignments, expressions,
control ﬂow directives, and combinations of thereof), and how
to transform these program elements into faulty ones.
III. FAULT INJECTION DOMAIN-SPECIFIC LANGUAGE
The ProFIPy allows the user to enter a bug speciﬁcation using
a high-level and easy-to-use DSL language, which is close to
the Python language. The bug speciﬁcation describes how the
source code of the program should be transformed to introduce
a software bug. It consists of two parts:
• Code pattern: a description of which parts of the program
should be fault-injected. The fault injection tool parses the
source code of the software and will generate a fault for
every match of the code pattern.
• Code replacement: a description of the code that should
be injected, which will replace the original source code
that matched the code pattern.
The code pattern describes a combination of program entities
(variables, expressions, blocks, control ﬂow constructs, etc.)
that will be searched for in the software-under-injection. The
code pattern can either consist of a Python snippet of code;
or, it can be a mix of Python code and DSL directives. In the
former case, ProFIPy will look for exact matches between the