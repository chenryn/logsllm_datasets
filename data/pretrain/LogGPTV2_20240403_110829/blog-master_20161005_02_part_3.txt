2\. snapshot too old也可能出现在pg_dump备份数据库时，因为pg_dump使用的是repeatable read隔离级别，快照是在事务启动后的第一条SQL创建的，备份时间长的话，极有可能在备份过程中读取到LSN大于快照LSN的数据块，导致snapshot too old报错。  
### 垃圾回收受到什么影响？  
1\. 在9.6以前，这些垃圾tuple不能回收？     
PostgreSQL通过vacuum回收垃圾tuple时，判断哪些dead tuple可以被回收，哪些不能被回收有一个很简单的规则。  
产生垃圾tuple的事务号（通常在为垃圾tuple的头信息中的xmax版本号）大于或等于vacuum开启时数据库中最小的（backend_xmin, backend_xid），这条垃圾tuple就不能被回收。  
9.5版本的例子  
```
$ psql
psql (9.5.4)
Type "help" for help.
create table tbl1 (id int);
insert into tbl1 values (1);
session A
postgres=# select pg_sleep(1000);
session A结束前
session B
在xmin后, 产生一条垃圾记录  
postgres=# delete from tbl1;
DELETE 1
无法回收这条垃圾记录，因为产生这条垃圾记录的事务大于或等于VACUUM开启时数据库中最小的backend_xmin,backend_xid。   
postgres=# vacuum verbose tbl1;
INFO:  vacuuming "public.tbl1"
INFO:  "tbl1": found 0 removable, 1 nonremovable row versions in 1 out of 1 pages
DETAIL:  1 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
postgres=# vacuum verbose tbl1;
INFO:  vacuuming "public.tbl1"
INFO:  "tbl1": found 0 removable, 1 nonremovable row versions in 1 out of 1 pages
DETAIL:  1 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
```
### 9.6的改进原理
如果配置了old_snapshot_threshold.  
则需要记录每分钟最大的backend_xid(没有则取最小未分配事务号) list（而非backend_xmin），vacuum时用于判断。   
vacuum时，在（1. old_snapshot_threshold最老的记录 与 2.当前系统最小的backend_xmin, backend_xid）中取最大值，超过这个值的垃圾不回收。  
使用这种方法可以避免在此之前的，长时间持有xmin的事务或SQL，导致对其以后产生的垃圾无法回收的问题。  
![pic3](20161005_02_pic_003.png)  
测试  
1\. 长时间持有xid，9.6依旧无法回收    
```
session a:
postgres=# begin;
BEGIN
postgres=# select txid_current();  -- 持有xid后的垃圾无法回收
 txid_current 
--------------
     11097940
(1 row)
session b:
postgres=# delete from tbl1;
DELETE 2
超过old_snapshot_threshold阈值后，无法回收垃圾tuple
postgres=# vacuum verbose tbl1;
INFO:  vacuuming "public.tbl1"
INFO:  "tbl1": found 0 removable, 2 nonremovable row versions in 1 out of 1 pages
DETAIL:  2 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
```
2\. 长时间持有xmin，但是不持有xid时，9.6可以回收其垃圾( 必须配置 old_snapshot_threshold > 0 , =0没有 时间xmin list所以vacuum使用了backend_xmin?)       
```
session a:  
postgres=# select pg_sleep(1000);
session b:  
postgres=# insert into tbl1 values (1);
INSERT 0 1
postgres=# delete from tbl1;
DELETE 1
postgres=# insert into tbl1 values (1);
INSERT 0 1
postgres=# delete from tbl1;
DELETE 1
postgres=# select * FROM TBL1;  -- 目前需要访问一下才能回收?  
(0 rows)
时间超过old_snapshot_threshold后，可以回收  
postgres=# vacuum verbose tbl1;
INFO:  vacuuming "public.tbl1"
INFO:  "tbl1": found 0 removable, 0 nonremovable row versions in 1 out of 1 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 4 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
```
### 9.6的矛盾点或叫不对称点：    
对于有backend_xid的read committed写事务，9.6无法回收大于该xid的垃圾tuple，正常的理解是此后的query都不应该报snapshot too old错误。      
但是，9.6的snapshot too old报错是和快照when超过阈值，并且快照lsn大于被访问的BLOCK时就会报错。    
而实际上，这种情况不应该报snapshot too old。   
矛盾例子  
```
create table tbl1(id int);
insert into tbl1 values (1);
session a:
postgres=# begin;
BEGIN
postgres=# insert into tbl1 values (2);  -- 生成xid, 此后垃圾无法回收。  
INSERT 0 1
postgres=# with t as(select pg_sleep(100)) select * from tbl1,t;  -- 虽然垃圾无法回收，但是报错依旧存在。  (理论上xmin>=xid，在持有 xid后，不应该再出现snapshot too old错误) 
马上修改session a将要访问的数据页产生一个新的LSN  
session b:
postgres=# update tbl1 set id=3;
session a:
报错
ERROR:  snapshot too old
```
### 性能影响
开启快照过旧，对性能有影响。  
因为每次获取快照都要更新SNAPSHOT TOO OLD需要用到的数据结构。    
同时get buffer page时，每次都要判断，是否满足快照过旧。    
依旧有优化的空间。     
## 参考
1\. https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/access/heap/heapam.c;h=29fd31a819d278c8e052a398c56fd6f4294614e9;hp=66b23540fe29f556a985e2dc3fadf226dad4ddc0;hb=848ef42bb8c7909c9d7baa38178d4a209906e7c1;hpb=8b65cf4c5edabdcae45ceaef7b9ac236879aae50  
2\. https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/utils/time/snapmgr.c;h=19504c3598747db0dd121bc29e8af9c82a20738c;hp=b88e01200419b114309f01ab7dd8ab4e5c9cc3b3;hb=848ef42bb8c7909c9d7baa38178d4a209906e7c1;hpb=8b65cf4c5edabdcae45ceaef7b9ac236879aae50  
3\. src/backend/utils/time/snapmgr.c  
4\. src/backend/storage/ipc/procarray.c  
```
/*
 * GetSnapshotData -- returns information about running transactions.
 *
 * The returned snapshot includes xmin (lowest still-running xact ID),
 * xmax (highest completed xact ID + 1), and a list of running xact IDs
 * in the range xmin = xmax are considered still running.
 *              For an xact ID xmin xmin).
 *              RecentXmin: the xmin computed for the most recent snapshot.  XIDs
 *                      older than this are known not running any more.
 *              RecentGlobalXmin: the global xmin (oldest TransactionXmin across all
 *                      running transactions, except those running LAZY VACUUM).  This is
 *                      the same computation done by GetOldestXmin(true, true).
 *              RecentGlobalDataXmin: the global xmin for non-catalog tables
 *                      >= RecentGlobalXmin
 *
 * Note: this function should probably not be called with an argument that's
 * not statically allocated (see xip allocation below).
 */
        if (old_snapshot_threshold lsn = InvalidXLogRecPtr;
                snapshot->whenTaken = 0;
        }
        else
        {
                /*
                 * Capture the current time and WAL stream location in case this
                 * snapshot becomes old enough to need to fall back on the special
                 * "old snapshot" logic.
                 */
                snapshot->lsn = GetXLogInsertRecPtr();
                snapshot->whenTaken = GetSnapshotCurrentTimestamp();
                MaintainOldSnapshotTimeMapping(snapshot->whenTaken, xmin);
        }
```
5\. https://www.postgresql.org/docs/9.6/static/runtime-config-resource.html#RUNTIME-CONFIG-RESOURCE-ASYNC-BEHAVIOR  
old_snapshot_threshold (integer)  
```
Sets the minimum time that a snapshot can be used without risk of a snapshot too old error occurring when using the snapshot. This parameter can only be set at server start.
Beyond the threshold, old data may be vacuumed away. This can help prevent bloat in the face of snapshots which remain in use for a long time. To prevent incorrect results due to cleanup of data which would otherwise be visible to the snapshot, an error is generated when the snapshot is older than this threshold and the snapshot is used to read a page which has been modified since the snapshot was built.
A value of -1 disables this feature, and is the default. Useful values for production work probably range from a small number of hours to a few days. The setting will be coerced to a granularity of minutes, and small numbers (such as 0 or 1min) are only allowed because they may sometimes be useful for testing. While a setting as high as 60d is allowed, please note that in many workloads extreme bloat or transaction ID wraparound may occur in much shorter time frames.
When this feature is enabled, freed space at the end of a relation cannot be released to the operating system, since that could remove information needed to detect the snapshot too old condition. All space allocated to a relation remains associated with that relation for reuse only within that relation unless explicitly freed (for example, with VACUUM FULL).
This setting does not attempt to guarantee that an error will be generated under any particular circumstances. In fact, if the correct results can be generated from (for example) a cursor which has materialized a result set, no error will be generated even if the underlying rows in the referenced table have been vacuumed away. Some tables cannot safely be vacuumed early, and so will not be affected by this setting. Examples include system catalogs and any table which has a hash index. For such tables this setting will neither reduce bloat nor create a possibility of a snapshot too old error on scanning.
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")