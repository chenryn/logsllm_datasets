### 3.4 Basic Statements

This section introduces the programming statements that can be used in an SPL (Stored Procedure Language) program.

#### 3.4.1 NULL Statement

The simplest statement in SPL is the `NULL` statement, which is an executable statement that does nothing.

```sql
NULL;
```

The following is the simplest valid SPL program:

```sql
BEGIN
    NULL;
END;
```

The `NULL` statement can serve as a placeholder where an executable statement is required, such as in a branch of an `IF-THEN-ELSE` statement.

For example:

```sql
CREATE OR REPLACE PROCEDURE divide_it (
    p_numerator IN NUMBER,
    p_denominator IN NUMBER,
    p_result OUT NUMBER
)
IS
BEGIN
    IF p_denominator = 0 THEN
        NULL;
    ELSE
        p_result := p_numerator / p_denominator;
    END IF;
END;
```

#### 3.4.2 Assignment Statement

The assignment statement sets a variable or a formal parameter of mode `OUT` or `IN OUT` to the value of an evaluated expression.

```sql
variable := expression;
```

- `variable` is an identifier for a previously declared variable, `OUT` formal parameter, or `IN OUT` formal parameter.
- `expression` is an expression that produces a single value. The value produced by the expression must have a compatible data type with that of `variable`.

Example:

```sql
CREATE OR REPLACE PROCEDURE dept_salary_rpt (
    p_deptno NUMBER
)
IS
    todays_date DATE;
    rpt_title VARCHAR2(60);
    base_sal INTEGER;
    base_comm_rate NUMBER;
    base_annual NUMBER;
BEGIN
    todays_date := SYSDATE;
    rpt_title := 'Report For Department # ' || p_deptno || ' on ' || todays_date;
    base_sal := 35525;
    base_comm_rate := 1.33333;
    base_annual := ROUND(base_sal * base_comm_rate, 2);
    DBMS_OUTPUT.PUT_LINE(rpt_title);
    DBMS_OUTPUT.PUT_LINE('Base Annual Salary: ' || base_annual);
END;
```

#### 3.4.3 SELECT INTO Statement

The `SELECT INTO` statement is an SPL variation of the SQL `SELECT` command, designed to assign the results to variables or records for use in SPL program statements. The result set of `SELECT INTO` is at most one row.

There are two variations of `SELECT INTO`:

1. **Selecting into simple variables:**

   ```sql
   SELECT select_expressions INTO target FROM ...;
   ```

   - `target` is a comma-separated list of simple variables.
   - `select_expressions` and the remainder of the statement are the same as for the `SELECT` command.
   - The selected values must exactly match in data type, number, and order the structure of the target, or a runtime error occurs.

2. **Selecting into a record:**

   ```sql
   SELECT * INTO record FROM table ...;
   ```

   - `record` is a record variable that has been previously declared.
   - If the query returns zero rows, null values are assigned to the target(s).
   - If the query returns multiple rows, the first row is assigned to the target(s) and the rest are discarded. (Note that "the first row" is not well-defined unless you’ve used `ORDER BY`.)

If no row is returned or more than one row is returned, SPL throws an exception. You can use the `WHEN NO_DATA_FOUND` clause in an `EXCEPTION` block to determine whether the assignment was successful.

Example using `SELECT INTO` with a record and an `EXCEPTION` block:

```sql
CREATE OR REPLACE PROCEDURE emp_sal_query (
    p_empno IN emp.empno%TYPE
)
IS
    r_emp emp%ROWTYPE;
    v_avgsal emp.sal%TYPE;
BEGIN
    SELECT * INTO r_emp
    FROM emp WHERE empno = p_empno;

    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || r_emp.deptno);

    SELECT AVG(sal) INTO v_avgsal
    FROM emp WHERE deptno = r_emp.deptno;

    IF r_emp.sal > v_avgsal THEN
        DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the department average of ' || v_avgsal);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the department average of ' || v_avgsal);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
END;
```

#### 3.4.4 INSERT Statement

The `INSERT` command available in the SQL language can also be used in SPL programs. Expressions in the SPL language can be used wherever expressions are allowed in the SQL `INSERT` command. Thus, SPL variables and parameters can be used to supply values to the insert operation.

Example:

```sql
CREATE OR REPLACE PROCEDURE emp_insert (
    p_empno IN emp.empno%TYPE,
    p_ename IN emp.ename%TYPE,
    p_job IN emp.job%TYPE,
    p_mgr IN emp.mgr%TYPE,
    p_hiredate IN emp.hiredate%TYPE,
    p_sal IN emp.sal%TYPE,
    p_comm IN emp.comm%TYPE,
    p_deptno IN emp.deptno%TYPE
)
IS
BEGIN
    INSERT INTO emp VALUES (
        p_empno,
        p_ename,
        p_job,
        p_mgr,
        p_hiredate,
        p_sal,
        p_comm,
        p_deptno
    );

    DBMS_OUTPUT.PUT_LINE('Added employee...');
    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || p_ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || p_job);
    DBMS_OUTPUT.PUT_LINE('Manager : ' || p_mgr);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || p_hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || p_sal);
    DBMS_OUTPUT.PUT_LINE('Commission : ' || p_comm);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || p_deptno);
    DBMS_OUTPUT.PUT_LINE('----------------------');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('OTHERS exception on INSERT of employee # ' || p_empno);
        DBMS_OUTPUT.PUT_LINE('SQLCODE : ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('SQLERRM : ' || SQLERRM);
END;
```

If an exception occurs, all database changes made in the procedure are automatically rolled back. The `EXCEPTION` section with the `WHEN OTHERS` clause catches all exceptions. `SQLCODE` is a number that identifies the specific exception, and `SQLERRM` is a text message explaining the error.

#### 3.4.5 UPDATE Statement

The `UPDATE` command available in the SQL language can also be used in SPL programs. Expressions in the SPL language can be used wherever expressions are allowed in the SQL `UPDATE` command. Thus, SPL variables and parameters can be used to supply values to the update operation.

Example:

```sql
CREATE OR REPLACE PROCEDURE emp_comp_update (
    p_empno IN emp.empno%TYPE,
    p_sal IN emp.sal%TYPE,
    p_comm IN emp.comm%TYPE
)
IS
BEGIN
    UPDATE emp SET sal = p_sal, comm = p_comm WHERE empno = p_empno;

    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Updated Employee # : ' || p_empno);
        DBMS_OUTPUT.PUT_LINE('New Salary : ' || p_sal);
        DBMS_OUTPUT.PUT_LINE('New Commission : ' || p_comm);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
    END IF;
END;
```

The `SQL%FOUND` conditional expression returns `TRUE` if a row is updated, `FALSE` otherwise.

#### 3.4.6 DELETE Statement

The `DELETE` command (available in the SQL language) can also be used in SPL programs. Expressions in the SPL language can be used wherever expressions are allowed in the SQL `DELETE` command. Thus, SPL variables and parameters can be used to supply values to the delete operation.

Example:

```sql
CREATE OR REPLACE PROCEDURE emp_delete (
    p_empno IN emp.empno%TYPE
)
IS
BEGIN
    DELETE FROM emp WHERE empno = p_empno;

    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Deleted Employee # : ' || p_empno);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee # ' || p_empno || ' not found');
    END IF;
END;
```

The `SQL%FOUND` conditional expression returns `TRUE` if a row is deleted, `FALSE` otherwise.

#### 3.4.7 Using the RETURNING INTO Clause

The `INSERT`, `UPDATE`, and `DELETE` commands may be appended by the optional `RETURNING INTO` clause. This clause allows the SPL program to capture the newly added, modified, or deleted values from the results of an `INSERT`, `UPDATE`, or `DELETE` command, respectively.

Syntax:

```sql
{ insert | update | delete }
RETURNING { * | expr_1 [, expr_2 ] ...}
INTO { record | field_1 [, field_2 ] ...};
```

- `insert` is a valid `INSERT` command.
- `update` is a valid `UPDATE` command.
- `delete` is a valid `DELETE` command.
- If `*` is specified, then the values from the row affected by the `INSERT`, `UPDATE`, or `DELETE` command are made available for assignment to the record or fields to the right of the `INTO` keyword. (Note that the use of `*` is an Advanced Server extension and is not compatible with Oracle databases.)
- `expr_1, expr_2...` are expressions evaluated upon the row affected by the `INSERT`, `UPDATE`, or `DELETE` command. The evaluated results are assigned to the record or fields to the right of the `INTO` keyword.
- `record` is the identifier of a record that must contain fields that match in number and order, and are data type compatible with the values in the `RETURNING` clause.
- `field_1, field_2,...` are variables that must match in number and order, and are data type compatible with the set of values in the `RETURNING` clause.

If the `INSERT`, `UPDATE`, or `DELETE` command returns a result set with more than one row, then an exception is thrown with `SQLCODE 01422`, indicating that the query returned more than one row. If no rows are in the result set, then the variables following the `INTO` keyword are set to `NULL`.

There is a variation of `RETURNING INTO` using the `BULK COLLECT` clause that allows a result set of more than one row to be returned into a collection. See Section 3.12.4.1 for more information on using the `BULK COLLECT` clause with the `SELECT INTO` statement.

---

**Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**