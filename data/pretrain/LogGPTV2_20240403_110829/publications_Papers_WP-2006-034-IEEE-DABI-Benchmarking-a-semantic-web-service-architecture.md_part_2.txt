### Failures and Redundancy in Whisper

In the Whisper system, redundancy is achieved through the replication of business process functionalities. When a Web service receives a request, it forwards it to the Semantic Web Service proxy (SWS-proxy). Typically, an application's logic and data are distributed across a cluster (group) of computer systems to ensure fault tolerance. This means that the system can withstand any single hardware or software failure within the cluster.

The redundancy mechanism in Whisper also addresses scalability requirements through load-sharing, as peer services can be replicated across different computers. We use static redundancy, where all replicas implementing services are active simultaneously. If one replica fails, another is elected using the Bully algorithm, ensuring minimal impact on response time.

### SWS-Proxy and B-Peer Groups

The SWS-proxy contacts the JXTA infrastructure and uses the Semantic Discovery Service (Figure 3) to locate a semantic group of peers that can satisfy the client's request. Once a suitable semantic group of peers is found, the group is queried to find a b-peer that will process the client's request.

```java
public class SWSProxy {
    // Reference to the semantic Web service
    SemanticWebService sws;

    // op is an operation
    public SemanticAdv findSemanticPeerGroupAdv(String op) {
        Enumeration<Advertisement> e = discovery.getLocalAdvertisements(
            DiscoveryService.ADV,
            "action", sws.get_Sem_action()
        );

        while (e.hasMoreElements()) {
            SemanticAdv sAdv = (SemanticAdv) e.nextElement();
            if (sAdv.getInput().equals(sws.get_Sem_input(op)) &&
                sAdv.getOutput().equals(sws.get_Sem_output(op))) {
                // Found a semantic peer group advertisement matching the Web service semantics
                return sAdv;
            }
        }

        return null;
    }
}
```

### B-Peer Groups and Their Functionality

Peers are self-organized into b-peer groups, which are logical rather than physical entities (Figure 3). Each b-peer belongs to a semantic b-peer group, and b-peers within the same group implement the same functionality, though possibly in different ways.

When a Web service is invoked by a client, Whisper dynamically tries to find a semantic b-peer group that can process the requested service. For example, if a peer accesses student information from an operational database and returns the results to the client, and if the operational database is unavailable, a semantically equivalent peer can automatically and transparently handle the service request by retrieving the same information from a data warehouse.

### Semantic Advertisements

In Whisper, b-peer groups advertise their services semantically to other b-peers. All resources in JXTA networks are represented by metadata XML documents called advertisements. B-peers publish and discover these advertisements, which represent other resources such as b-peers and b-peer groups.

The default discovery supported by JXTA is inefficient due to low precision and recall. To address this, we use "extendable advertisements" to create a new type of advertisement that incorporates semantic information. These semantic advertisements describe our semantic peer groups more effectively, enabling scalable and precise search operations.

### Benchmarking

To validate Whisper, we conducted a benchmark to assess the scalability and performance of our architecture under system load. We used 9 identical machines, each equipped with Intel P4 3.0 GHz processors, 512 MB main memory, 40GB 7,800 RPM IDE disks, Microsoft Windows XP Home, Java SDK 1.4, and JXTA 2.3.2. The personal computers were connected by a 100Mbit/s Ethernet LAN.

Figure 4 shows the number of messages exchanged between a variable number of b-peers. The benchmark revealed that the proposed solution scales well, with a predictable linear increase in the number of messages exchanged as more b-peers are added.

We also analyzed the Round-Trip Time (RTT) of messages to measure network characteristics such as bandwidth and latency. Our results showed that the average latency is approximately 0.5 milliseconds, but in the worst case, the RTT can take several seconds. This low performance is caused by the time needed to elect a new coordinator and the time to make a new binding between the SWS-proxy and the elected b-peer.

### Conclusions

Since Web services (WSDL) do not provide mechanisms to increase availability, we used a P2P infrastructure (JXTA) to deploy a fault-tolerant peer-to-peer back-end architecture. Integrating and interoperating Web services and JXTA is challenging due to the heterogeneity of the two technologies. Whisper uses semantic Web technology to integrate centralized and decentralized systems, sharing and exchanging information in a semantically consistent way. Our benchmark validated that the system is scalable and performs well under system load.

### References

1. Curbera, F., W. Nagy, and S. Weerawarana. Web Services: Why and How. In Workshop on Object-Oriented Web Services - OOPSLA 2001. 2001. Tampa, Florida, USA.
2. V. Dialani, et al. Transparent fault tolerance for web services based architectures. In Eighth International Europar Conference (EUROPAR '02). 2002. Padeborn, Germany: Springer-Verlag.
3. Looker, N. and M. Munro, WS-FTM: A Fault Tolerance Mechanism for Web Services. [Online]. Available: http://www.dur.ac.uk/computer.science/research/technical-reports/2005/A%20Fault%20Tolerance%20Mechanism.pdf. 2002.
4. Gong, L., Project JXTA: A Technology Overview - http://www.jxta.org/docs/TechOverview.pdf. 2001.
5. Kim, W. and J. Seo, Classifying schematic and data heterogeneity in multidatabase systems. IEEE Computer, 1991. 24(12): p. 12-18.
6. Kashyap, V. and A. Sheth, Semantic heterogeneity in global information systems: The role of metadata, context and ontologies, in Cooperative Information Systems: Current Trends and Applications, G. Schlageter, Editor. 1996, Academic Press: London, UK. p. 139-178.
7. Sheth, A., Changing Focus on Interoperability in Information Systems: From System, Syntax, Structure to Semantics, in Interoperating Geographic Information Systems, C.A. Kottman, Editor. 1998, Kluwer, Academic Publishers. p. 5-30.
8. Ouskel, A.M. and A. Sheth, Semantic Interoperability in Global Information Systems. A brief Introduction to the Research Area and the Special Section. SIGMOD Record, 1999. 28(1): p. 5-12.
9. Patil, A., et al. MWSAF - METEOR-S Web Service Annotation Framework. In 13th Conference on World Wide Web. 2004. New York City, USA.
10. Cardoso, J. and A. Sheth, Semantic e-Workflow Composition. Journal of Intelligent Information Systems (JIIS). 2003. 21(3): p. 191-225.
11. Cardoso, J. and A.P. Sheth, Introduction to Semantic Web Services and Web Process Composition, in Semantic Web Services and Web Process Composition, A.P. Sheth, Editor. 2005, Springer-Verlag: Heidelberg, Germany. p. 1-13.
12. Sivashanmugam, K., et al., Metadata and Semantics for Web Services and Processes, in Datenbanken und Informationssysteme (Databases and Information Systems) Festschrift zum 60, R. Unland, Editor. 2003, Geburtstag von Gunter Schlageter: Hagen, Germany. p. 245-271.
13. Rajasekaran, P., et al., Enhancing Web Services Description and Discovery to Facilitate Composition, in Semantic Web Services and Web Process Composition, A. Sheth, Editor. 2004, Springer-Verlag: Heidelberg. p. 55-68.