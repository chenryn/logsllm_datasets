title:Towards Automated Dynamic Analysis for Linux-based Embedded Firmware
author:Daming D. Chen and
Maverick Woo and
David Brumley and
Manuel Egele
Towards Automated Dynamic Analysis for
Linux-based Embedded Firmware
Daming D. Chen∗, Manuel Egele†, Maverick Woo∗, and David Brumley∗
∗ Carnegie Mellon University
{ddchen, pooh, dbrumley}@cmu.edu
† Boston University
{megele}@bu.edu
Abstract—Commercial-off-the-shelf (COTS) network-enabled
embedded devices are usually controlled by vendor ﬁrmware
to perform integral functions in our daily lives. For example,
wireless home routers are often the ﬁrst and only line of defense
that separates a home user’s personal computing and information
devices from the Internet. Such a vital and privileged position in
the user’s network requires that these devices operate securely.
Unfortunately, recent research and anecdotal evidence suggest
that such security assumptions are not at all upheld by the devices
deployed around the world.
A ﬁrst step to assess the security of such embedded device
ﬁrmware is the accurate identiﬁcation of vulnerabilities. However,
the market offers a large variety of these embedded devices,
which severely impacts the scalability of existing approaches in
this area. In this paper, we present FIRMADYNE, the ﬁrst
automated dynamic analysis system that speciﬁcally targets Linux-
based ﬁrmware on network-connected COTS devices in a scalable
manner. We identify a series of challenges inherent to the dynamic
analysis of COTS ﬁrmware, and discuss how our design decisions
address them. At its core, FIRMADYNE relies on software-based
full system emulation with an instrumented kernel to achieve the
scalability necessary to analyze thousands of ﬁrmware binaries
automatically.
We evaluate FIRMADYNE on a real-world dataset of 23,035
ﬁrmware images across 42 device vendors gathered by our system.
Using a sample of 74 exploits on the 9,486 ﬁrmware images that
our system can successfully extract, we discover that 887 ﬁrmware
images spanning at least 89 distinct products are vulnerable to one
or more of the sampled exploit(s). This includes 14 previously-
unknown vulnerabilities that were discovered with the aid of
our framework, which affect 69 ﬁrmware images spanning at
least 12 distinct products. Furthermore, our results show that
11 of our tested attacks affect ﬁrmware images from more than
one vendor, suggesting that code-sharing and common upstream
manufacturers (OEMs) are quite prevalent.
I.
INTRODUCTION
With the proliferation of the so-called “Internet of Things”,
an increasing number of embedded devices are being connected
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23415
to the Internet at an alarming rate. Commodity networking
equipment such as routers and network-attached storage boxes
are joined by IP cameras, thermostats, or even remotely-
controllable power outlets. These devices frequently share
certain technical characteristics, such as embedded system
on a chip (SOC) designs based on ARM or MIPS CPUs,
network connectivity via Ethernet or WiFi, and a wide variety
of communication interfaces such as GPIO, I2C, or SPI.
Nevertheless, many of these devices are controlled by vendor
and chipset-speciﬁc ﬁrmware that is rarely, if ever, updated to
address security vulnerabilities affecting these devices.
Unfortunately, the poor security practices of these device
vendors are only further exacerbated by the privileged network
position that many of these devices occupy. For example, a
wireless router is frequently the ﬁrst and only line of defense
between a user’s computing equipment (e.g., laptops, mobile
phones, and tablets) and the Internet. An attacker that succeeds
in compromising such a networking device is able to gain
access to the user’s network, and can further reconﬁgure the
device to tamper with arbitrary network trafﬁc. Since most
vendors have not taken any initiative to improve the security of
their devices, millions of home and small business networks are
left vulnerable to both known and unknown threats. As a ﬁrst
step towards improving the security of commodity computer
equipment, we propose to address the challenge of accurately
identifying vulnerabilities in embedded ﬁrmware head-on.
Previous research on the security of embedded ﬁrmware
can be categorized based on various analysis approaches. For
example, Zaddach et al. [19] perform dynamic analysis by
partially ofﬂoading execution of ﬁrmware to actual hardware.
While such an approach is precise, it incurs signiﬁcant hurdles
for large-scale analysis. First, the requirement that the analyst
must obtain the physical hardware for the device under
test poses a signiﬁcant ﬁnancial burden. Second, and more
importantly, the manual effort needed to identify and interface
with the debugging port on the device places strict limits on the
scalability of this technique, especially for consumer equipment
that may not support hardware debugging functionality.
In contrast, Costin et al. [8] utilize static analysis techniques
to unpack the ﬁrmware of embedded devices and identify
potentially vulnerable code or binaries inside. While this
approach scales to thousands of ﬁrmware images, it suffers
from the classic trade-offs of static analysis. Namely, either the
analysis is very generic and produces a large number of false
positives [5], or the analysis is too speciﬁc and results in many
false negatives. Additionally, static analysis techniques based on
program analysis usually target a speciﬁc problem domain, such
as the C, PHP, or Java programming language, or alternatively
binary code. Unfortunately, commodity networking equipment
typically contains an amalgamation of various programs and
scripts, written in a variety of compiled or interpreted pro-
gramming languages. Oftentimes, custom modiﬁcations are
even made to the language runtime to cater to the unique
requirements of embedded systems.
To overcome the shortcomings of previous work in this area,
we leverage software-based full system emulation to enable
large-scale and automated dynamic analysis for commodity
embedded ﬁrmware. Since our approach does not rely on
physical hardware to perform the analysis, it scales with
additional computational resources. Additionally, our full
system emulation approach transparently provides dynamic
analysis capabilities, regardless of the programming language
used to develop a speciﬁc application or script. Furthermore, we
inherit the precision of other dynamic analysis techniques—if
the analysis ﬁnds that a ﬁrmware image contains a vulnerability,
then it provides actionable results in the form of a successful
exploit. Finally, we address a number of challenges that are
characteristic for embedded devices, such as the presence of
various hardware-speciﬁc peripherals, storage of persistent con-
ﬁguration in non-volatile memory (NVRAM), and dynamically-
generated conﬁguration ﬁles.
We implemented FIRMADYNE to demonstrate our ap-
proach to automated dynamic analysis. Using ﬁrmware image
ﬁles distributed on vendor support websites, we automatically
unpack the contents to identify the kernel and extract the
ﬁlesystem. Since the majority of these extracted ﬁrmware are
Linux-based, we initially focus on support for Linux-based
ﬁrmware by pre-compiling modiﬁed Linux kernels. Using
the QEMU [4] full system emulator, we are able to boot our
instrumented kernels with the extracted ﬁlesystem from the
original ﬁrmware images. In order to collect a dataset of these
ﬁrmware images, FIRMADYNE includes a web crawler that
automatically downloads metadata and ﬁrmware images from
various vendor websites, which are then fed into the dynamic
analysis system.
However, even with full system emulation, an emulated
environment must be conﬁgured correctly to interact with the
network interfaces of the guest ﬁrmware. Therefore, our system
initially emulates the guest in an isolated network environment,
and monitors all network interactions to infer the correct
conﬁguration for subsequent analyses. Once this information
is collected, FIRMADYNE will re-conﬁgure the emulated
environment with the inferred network conﬁguration, enabling
network interaction between the emulated guest ﬁrmware and
the analysis host.
With the aid of our analysis and introspection capabilities,
we identiﬁed 14 previously-unknown vulnerabilities for which
we were able to manually develop proof-of-concept exploits.
Of these, across our dataset of 23,035 ﬁrmware images
gathered from 42 device vendors, we identiﬁed 69 vulnerable
ﬁrmware images spanning at least 12 distinct products from
the 9,486 ﬁrmware images that were successfully extracted.
Since the process of emulating and testing ﬁrmware images in
Fig. 1: Architectural diagram of FIRMADYNE showing
the emulation life-cycle for an example ﬁrmware image, as
described in §II-A.
FIRMADYNE is automated, it was straightforward to integrate
a subset of the existing exploits from the popular Metasploit
Framework [2].
Using these results, we observe that the most proliﬁc exploit
affects the ﬁrmware of up to ﬁve different vendors, and the most
effective exploit affects 10% of all network inferred ﬁrmware
images in our dataset. While code-reuse of vulnerable open-
source applications is one explanation, our attacks also affect
applications whose source is not publicly available, suggesting
that code-sharing and common upstream manufacturers (OEMs)
are quite prevalent.
To summarize, the contributions of this work are as follows:
• We present FIRMADYNE, our implementation of an
automated and scalable dynamic analysis technique specif-
ically designed to accurately identify vulnerabilities in
Linux-based embedded ﬁrmware (§II).
• Our implementation of FIRMADYNE addresses char-
acteristic challenges of embedded systems, such as the
presence of hardware-speciﬁc peripherals, usage of non-
volatile memory (NVRAM), and creation of dynamically-
generated ﬁles (§IV).
• We gathered a dataset of 23,035 ﬁrmware images down-
loaded from 42 different vendors, and evaluated FIR-
MADYNE on the 9,486 ﬁrmware images that were
successfully extracted, using a set of 14 previously-
unknown and 60 known exploits (§V).
• In support of open science, we make our system available
to the research community under an open-source license
to encourage further research into embedded systems.
For more information, please see https://github.com/
ﬁrmadyne/.
2
NetworkIdentificationNetworkReachableExploitVerificationeth0: 192.168.1.100eth1: 192.168.1.101eth2: 192.168.1.102FTPSitesSupportWebsitesFilesystemKernelArchitectureIdentification && cat 0xDEADBEEF InitialEmulationMIPSLittle-EndianII. OVERVIEW
In this section we describe the design of various components
that comprise FIRMADYNE, and our motivations for such an
architectural design.
of FIRMADYNE by seamlessly integrating 60 known exploits
mostly from the popular Metasploit [2] exploit framework. In
total, both vulnerability types affect 887 ﬁrmware images from
our dataset.
A. Components
As depicted in Fig. 1, FIRMADYNE consists of four major
components.
1) Crawling Firmware: The ﬁrst and largely independent
component is a web crawler, which downloads ﬁrmware images
from vendor websites. At present, we support 42 device vendors
(see §IV-A). We manually wrote parsing templates for each of
these websites, allowing us to distinguish between ﬁrmware
images and other binary content. This targeted crawling effort
provided us with metadata for each gathered ﬁrmware image,
including information such as the build date, release version,
and links to Management Information Base (MIB) ﬁles for
the Simple Network Management Protocol (SNMP). Such
metadata proved useful for our automated analyses and exploit
development (see §V-B3). For dynamic websites that were
difﬁcult to crawl automatically, we instead crawled the vendor’s
FTP site, at the expense of no metadata.
2) Extract Firmware Filesystem: In the second step, FIR-
MADYNE uses a custom-written extraction utility built around
the binwalk [1] API to extract the kernel (optional) and the
root ﬁlesystem contained within a ﬁrmware image (see §IV-B).
3) Initial Emulation: Once a ﬁlesystem is extracted, FIR-
MADYNE identiﬁes the hardware architecture of the ﬁrmware
image; in Fig. 1, we have chosen MIPS Little-Endian
as an example. Then, our system uses a pre-built Linux kernel
in an instance of the QEMU full system emulator that matches
the architecture, endianness, and word-width of the target
ﬁrmware image. Currently three combinations are supported:
little-endian ARM, little-endian MIPS, and big-endian MIPS.
An initial emulation is performed to infer the system and
network conﬁguration, shown as three IP address assignments
to eth0, eth1, and eth2 for the example in Fig. 1. This
is achieved by intercepting system calls to the ﬁlesystem,
networking, and other relevant kernel subsystems.
4) Dynamic Analysis: The forth and ﬁnal step can be
repeated for any dynamic analysis supported by FIRMADYNE.
To this end, the environment is dynamically reconﬁgured to
match the expectations of the ﬁrmware image (see §IV-C)
as inferred in the previous step. Note that FIRMADYNE
is designed for easy extensibility to include new dynamic
analyses or exploits. The results of each individual analysis are
aggregated in a database for ease of inspection. In the example
above, shown in Fig. 1, a command injection vulnerability is
being tested on the target ﬁrmware image.
To illustrate this versatility, we have developed three
vulnerability detection passes, which are able to assist in
ﬁnding vulnerabilities and precisely identify whether a given
exploit succeeds by monitoring events from our instrumented
kernel. These passes helped us detect 14 previously unknown
vulnerabilities, which were automatically conﬁrmed to affect
69 ﬁrmware images, based on proof-of-concept exploits that
we developed (see §V-B). We further demonstrate the ﬂexibility
B. Motivation
Dynamic analysis targeting embedded system ﬁrmware
addresses a variety of design points in the abstraction hierarchy
of embedded systems. We discuss a selection of potential
vantage points for such analysis, illustrate challenges and
shortcomings, and argue why dynamic analysis based on full
system emulation is the most promising approach to tackle this
challenge.
1) Application-Level: Perhaps the most straightforward
approach is to statically extract application-speciﬁc data, and
execute it natively with a supported application. For example, it
is possible to copy the webpages served by a web server within
an embedded system, and serve the content using a regular
web server such as Apache. Unfortunately, this approach has
multiple drawbacks that are incompatible with our design goal
of creating a generic platform for dynamic analysis of embedded
ﬁrmware.
An analysis of the ﬁrmware images in our dataset shows
that many of these contain webpages which rely on non-
standard extensions to server-side scripting languages (e.g.,
PHP) for access to hardware-speciﬁc functionality, such as
NVRAM values. For example, hundreds of images in our
dataset make use of the custom functions get_conf()
in PHP and nvram_get() in ASP.NET to obtain device
conﬁguration values. Unfortunately, this functionality is a
custom addition to the web server that is not supported by
their upstream open-source counterparts. Additionally, other
ﬁrmware images do not place these webpages on the ﬁlesystem,
but instead embed their HTML content within the binary of a
custom web server.
Finally, an analysis approach focused on application-data
can only detect vulnerabilities within the application-speciﬁc
data (e.g., command injection vulnerabilities in PHP ﬁles), but
not those present within the original application or other system
components.
2) Process-Level: Another feasible approach for analyzing
embedded systems is to emulate the behavior of individual
processes within the context of the original ﬁlesystem. This
can be achieved by executing QEMU in user-mode as a single
process emulator, constrained using chroot to the original
ﬁlesystem. Thus, one could simply launch the original web
server from the ﬁrmware image in QEMU, and then that process
would emulate the router web interface.
Unfortunately, this approach only partially obviates the
concerns mentioned above. While an application would be
able to execute within the context of the ﬁlesystem, speciﬁc
hardware peripherals (e.g., NVRAM) are still unavailable. As
a result, when an application attempts to access the NVRAM
peripheral via /dev/nvram, it will likely terminate in error.
Similarly, minor differences in the execution environment
can have a signiﬁcant effect on program behavior. For example,
the alphafs web server used by multiple ﬁrmware images
3
veriﬁes hardware-dependent product and vendor IDs before
accessing NVRAM. If these values are not present at prede-
termined physical memory addresses, the web server ceases
operation and terminates with an error message. To this end, the
web server uses the mmap() system call to access memory via
/dev/mem, and checks speciﬁc offsets for the ProductID
and VendorID of supported EEPROM chips.
Emulating such behavior with a user-mode emulator would
be complex, as the emulator would need to track ﬁle handles and
system calls that map memory to determine program behavior.
Then,
the emulator would need to identify the semantic
deﬁnition of various memory addresses, and replace the values
as appropriate (e.g., a valid ProductID and VendorID).
Additionally, due to limited write cycles on the primary
storage device, many ﬁrmware images mount a temporary
memory-backed ﬁlesystem at boot for volatile data. This
ﬁlesystem is mounted and generated dynamically. As a result,
the directories /dev/ and /etc/ may be symbolic links to
subdirectories within the temporary ﬁlesystem, thus appearing
broken when examined statically. For example, the ﬁrmware
for the D-Link DIR-865L wireless router uses a startup
script to populate conﬁguration for applications, including the
lighttpd web server. This conﬁguration ﬁle is then passed to
the web server binary with the ‘-c’ command line argument.
As a result, simple dynamic emulation of the lighttpd binary
will fail, even with the original ﬁlesystem in place.
These types of environmental differences can have a
signiﬁcant effect on the presence of vulnerabilities. For example,
many information disclosure vulnerabilities can simply be ﬁxed
with proper access control policies. Likewise, the effect of
a directory traversal attack on a web server can be greatly
affected by the system conﬁguration.
Although this approach is clearly more accurate than the
previous approach, it should be apparent that it suffers from a
number of shortcomings due to low emulation ﬁdelity. Without
precise knowledge of the runtime system environment, the
host environment can inadvertently affect dynamic analysis of
individual processes by altering program execution.
3) System-Level: In comparison, a system-level emulation
approach is able to overcome the aforementioned challenges.
Expected interfaces to hardware peripherals will be present,
allowing their functionality to be gracefully emulated. Accurate
emulation of the system environment permits dynamically-
generated data to be created in the same manner as on the real
device. All processes launched by the system can be analyzed,
including various daemons responsible for protocols such as
HTTP, FTP, and Telnet.
During the design process, we explicitly chose full system
emulation as the basis for FIRMADYNE for these reasons.
By leveraging the built-in hardware abstraction provided by
the kernel, we replace the existing kernel with our modiﬁed
kernel speciﬁcally designed and instrumented for our emulation
environment. Then, in conjunction with a custom user-space
NVRAM implementation, we boot the extracted ﬁlesystem
and our pre-built kernel within the QEMU full system emulator.
Otherwise, booting the original kernel would result in a fatal
execution crash, since it is only compiled to support a speciﬁc
hardware platform. Using the system boot sequence provided
by the init and rcS binaries on the original ﬁlesystem, we
are able to initialize user space to a state consistent with the
original device, despite platform changes.
Our results (see §V-A) show that this approach is successful
for initial emulation of over 96.6% of all Linux-based ﬁrmware
images in our dataset. This is likely due to the stable and
consistent interface between user-space and kernel on Linux
systems, with the exception of custom IOCTL’s introduced by
vendor-speciﬁc kernel modules. In fact, Linux kernel developers
will revert kernel changes that break backwards-compatibility
for user-space applications; for example, programs built for
pre-0.9 (pre-1992) kernels will still function correctly even on
the latest kernel releases.1
However, this does not hold for kernel modules; indeed,
one of the drawbacks of our current implementation is the lack
of emulation support for out-of-tree kernel modules located on
the ﬁlesystem and so differences in kernel version may result
in system instability. Nevertheless, our dataset shows that such
support is generally not necessary, as more than 99% of all
out-of-tree kernel modules within the ﬁrmware images in our
dataset are not useful for our system (§V-A3). One major reason
is because newer kernels, such as those that we build, provide
in-tree equivalents for functionality previously developed as
out-of-tree extensions. In particular, 58.8% of out-of-tree kernel
modules are used to implement various networking protocols
and ﬁltering mechanisms that may not have been present in
older kernels, and 12.7% provide support for speciﬁc hardware
peripherals. For example, older 2.4-series mainline kernels
lacked netfilter connection tracking and NAT support for
various application-speciﬁc protocols such as TFTP, G.323,
and SIP, which became available in-tree around kernel version
2.6.20. In comparison, the third-party NetUSB kernel module,
which was recently identiﬁed to contain a remotely-exploitable
buffer overﬂow vulnerability, comprises less than 0.2% of all
kernel modules from our dataset (§V-A3).
III. CONCEPT
This section provides an overview of the concept behind our
dynamic analysis framework for Linux-based ﬁrmware images.
For speciﬁc challenges encountered and implementation details,
please see §IV.
A. Architecture
As shown in Fig. 1, our system features a ﬁrmware
repository server that is used to store the binaries corresponding
to each ﬁrmware image and a database that keeps track of
information pertaining to each ﬁrmware image. This includes
the extraction status, architecture, brand of each image, as well
as each ﬁle within a given image.
A set of virtualized worker nodes are used to extract the
root ﬁlesystem and kernel (optional) from each ﬁrmware image.
Throughout this process, the database is updated with the
current experiment progress. If the extraction is successful,
the ﬁrmware repository will cache the archived ﬁlesystem.
Next, these workers enter the learning phase, where ﬁrmware
1https://www.kernel.org/doc/Documentation/stable_api_nonsense.txt
4
images are assigned a default conﬁguration and the networking
interactions are recorded. This allows our system to infer the
correct emulated network environment. Finally, the workers
enter the analysis phase, where each ﬁrmware image is emulated
with the inferred network environment, and individual analyses
are performed.
B. Acquisition
In order to gather a representative dataset of ﬁrmware
images, we developed a custom web crawler. Instead of using
a blind crawling methodology, we wrote smart parsers for the
support pages of each of our 42 preselected vendors (§A). This
allowed us to distinguish between ﬁrmware updates and unde-
sired binaries such as drivers, conﬁguration utilities, and other
binaries. Additionally, with a better semantic understanding
of the target website, we recovered important metadata about
each ﬁrmware image, such as vendor, product name, release
date, version number, changelog, etc.
Where applicable, this was supplemented with probable
ﬁrmware images that were mirrored from the FTP websites
of target vendors. Although this latter source of ﬁrmware was
less rich in metadata, it provided us with additional binaries
that were not directly accessible for all end-users, including
betas and test binaries with limited releases. A few brands of
ﬁrmware images, for which it was difﬁcult to automate, or
when the vendors did not provide direct ﬁrmware downloads
for end-users, were gathered by hand.
C. Extraction
We developed a custom extraction utility using the API
of the binwalk ﬁrmware extraction tool to recover the root
ﬁlesystem and (optionally) kernel from each ﬁrmware image.
These were normalized by storing them as compressed TAR
archives within our ﬁrmware repository.
D. Emulation
Once the root ﬁle system has been extracted from a ﬁrmware
image, FIRMADYNE performs a series of analysis steps to
infer the system conﬁguration expected by the ﬁrmware image.
First, we examine the ELF header of binaries located within
the extracted root ﬁlesystem to identify the target architecture
and endianness. For each ﬁrmware image, we use the QEMU
full system emulator for the corresponding architecture to boot
the extracted ﬁlesystem with a matching kernel. Currently, we
have pre-compiled kernels for ARM little-endian, MIPS little-
endian, and MIPS big-endian platforms, as our data shows that
these architectures constitute 90.8% of our dataset (§V-A1).
Next, during the initial emulation phase, the system is
executed in a special “learning” mode, in which our modiﬁed
kernel records all system interactions with the networking
subsystem, including IP address assignments for individual
network interfaces.
Finally, after collecting this information, FIRMADYNE
enters the actual emulation phase,
in which a matching
network environment is conﬁgured to communicate with the
emulated ﬁrmware. To verify successful network conﬁguration,
FIRMADYNE launches the emulated ﬁrmware image and
performs a series of network connectivity checks.
E. Automated Analyses
We implemented three basic automated analysis passes
within our dynamic analysis framework in order to demonstrate
the effectiveness of our system. These contributed to our
detection of 14 previously-unknown vulnerabilities that affect
69 ﬁrmware images, and a total of 74 vulnerabilities that affect
887 ﬁrmware images (see §V).
IV.
IMPLEMENTATION
This section discusses the implementation behind each of
the components mentioned in §II-A and §III.
A. Acquisition
Our custom web crawler was developed using the Scrapy
framework, with an individual spider written for each of
the 42 vendors in our dataset. To increase representativeness,
our dataset includes vendors for networking products ranging
from consumer to professional network equipment, such as
IP cameras, routers, access points, NAS’s, smart TV’s, cable
modems, satellite modems, and even third-party or open-source
ﬁrmware. We created individual parsers for the support pages
of each vendor using XPath selectors to enumerate and expand
speciﬁc elements of input webpages. In addition, we also
attempted to crawl multiple geographic locations of each
vendor’s website, including United States (English), China
(Chinese), Russia (Russian), European (English), Germany
(German), and South Africa (English).
Some vendors that made heavy use of dynamically-
generated content on their websites, such as D-Link and ZyXEL,
were crawled through their FTP mirror site instead. Only
FTP ﬁles that appeared relevant were downloaded, which was
generally limited to the following ﬁlename extensions: img,
chk, bin, stk, zip, tar, sys, rar, pkg, and rmt. Other
vendors, such as Cisco, which made their website difﬁcult to
automatically crawl, or limited most ﬁrmware downloads to
customers with valid support contracts, were manually crawled.
Supported metadata ﬁelds that were automatically gathered
from vendor websites include the product name, vendor name,
version, build, date, changelog, SNMP MIB ﬁle, source code
URL, and ﬁrmware image URL. This allows us to distinguish
between multiple products that share the same ﬁrmware image,
since we deduplicate downloaded ﬁrmware image binaries.
However, not all vendors had such information available, and
no metadata was available for vendors crawled through FTP
or manually.
B. Extraction
Through manual experimentation, we determined that the
built-in recursive extraction mechanism (“Matryoshka”) within
binwalk was insufﬁcient for our purposes. In particular, this
extraction was vulnerable to path explosion by attempting
to recursively extract compressed data from within an ELF
executable or every ﬁle within a ﬁlesystem, and not guaranteed
5
to terminate, especially in the presence of false positive
signature matches.
Instead, we developed a custom goal-driven extraction utility
using the binwalk API that minimized disk space and runtime
by terminating when our extraction goals were achieved; namely
obtaining root ﬁlesystem and (optionally) kernel from within
each ﬁrmware image. In addition, we implemented a set of
heuristics for early detection of non-ﬁrmware ﬁles, which
would otherwise waste computational resources. This included
blacklisting input ﬁles that were any type of structured binary,
including PE32 executables for Windows, ELF executables for
Linux, and universal binaries for Macintosh, as well as bytecode
and relocatable objects. Other common formats that were
excluded included PDF ﬁles and Microsoft Ofﬁce documents,
which would otherwise appear as compressed archives that
require recursive extraction.
After blacklist veriﬁcation, the extraction process used a set
of priority-ranked signatures that were executed sequentially in
the order of conﬁdence. These signatures can be categorized
as follows: archive formats, ﬁrmware headers, kernel magic
or version strings, UNIX-like root ﬁlesystems, and ﬁnally
compressed data. Matches for archive formats or compressed
data were then extracted recursively. We verify that UNIX-like
root ﬁlesystems are successfully extracted by checking for the
presence of at least four standard root directories from a subset
of the Filesystem Hierarchy Standard2.
Our method allowed us to reduce the effect of false positive
signature matches by prioritizing higher-conﬁdence signature
matches (e.g., ﬁrmware headers) over more generic signature
matches (e.g., compressed GZIP data). For example, if upstream
binwalk detects compressed data within the kernel image of
a ﬁrmware image and recursive extraction is enabled, it will
waste resources attempting to fully extract this data.
Another improvement that we made to the extraction process