# script me
General Skills, 500 points
## Description:
> Can you understand the language and answer the questions to retrieve the flag?
## Solution:
Let's connect to the server:
```
root@kali:/media/sf_CTFs/pico/script_me# nc 2018shell3.picoctf.com 7866
Rules:
() + () = ()()                                      => [combine]
((())) + () = ((())())                              => [absorb-right]
() + ((())) = (()(()))                              => [absorb-left]
(())(()) + () = (())(()())                          => [combined-absorb-right]
() + (())(()) = (()())(())                          => [combined-absorb-left]
(())(()) + ((())) = ((())(())(()))                  => [absorb-combined-right]
((())) + (())(()) = ((())(())(()))                  => [absorb-combined-left]
() + (()) + ((())) = (()()) + ((())) = ((()())(())) => [left-associative]
Example:
(()) + () = () + (()) = (()())
Let's start with a warmup.
()() + (()()) = ???
>
```
Seems pretty simple from the examples, but after the warmup come much more complicated and non-trivial equations. 
It took endless trials, but eventually what matters is the max "depth" of each element - deeper elements are "stronger".
The script:
```python
from pwn import *
def get_depth(group):
    current_depth = 0
    max_depth = 0
    for c in group:
        if c == '(':
            current_depth += 1
            max_depth = max(current_depth, max_depth)
        elif c == ')':
            current_depth -= 1
    return max_depth
def solve(s):
    s = s.replace(" = ???", "").strip()
    groups = s.split(" + ")
    while len(groups) > 1:
        log.info("Handling elements 1+2 out of {}".format(len(groups)))
        group1 = groups.pop(0)
        group2 = groups.pop(0)
        #print "{}, {}".format(group1, group2)