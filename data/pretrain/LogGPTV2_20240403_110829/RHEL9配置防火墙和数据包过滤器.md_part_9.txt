-   为您的 RHEL 订阅授权，在控制节点上安装了 `ansible-core`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   受管主机清单存在于控制计算机上，Ansible 能够连接它们。
-   有权限对受管主机上运行 Ansible playbook。
-   如果您运行 playbook 时使用了与 `root`{.literal}
    不同的远程用户，则此用户对受管主机具有适当的 `sudo`{.literal} 权限。
-   清单文件列出 playbook 应执行操作的主机。此流程中的 playbook 在组
    `testinservers`{.literal} 的主机上运行。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0 - 8.5 提供对基于 Ansible 的自动化需要 Ansible Engine 2.9 的独立
Ansible 存储库的访问权限。Ansible Engine 包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}; 连接器，如
`docker`{.literal} 和 `podman`{.literal};
以及插件和模块的整个环境。有关如何获取并安装 Ansible Engine
的信息，请参阅[如何下载和安装 Red Hat Ansible
Engine?](https://access.redhat.com/articles/3174981){.link}。
RHEL 8.6 和更高版本引进了 Ansible Core（以 `ansible-core`{.literal} RPM
提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。AppStream 存储库提供
`ansible-core`{.literal}，它的范围有限。如需更多信息，请参阅 [RHEL 9
AppStream 中包含的 ansible-core
软件包的范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: orderedlist
**步骤**
1.  创建 `~/port_forwarding.yml`{.literal} 文件并添加以下内容：
    ``` literallayout
    ---
    - name: Forward incoming traffic on port 8080 to 443
      hosts: testingservers
      tasks:
        - include_role:
            name: rhel-system-roles.firewall
      vars:
        firewall:
          - { forward_port: 8080/tcp;443;, state: enabled, runtime: true, permanent: true }
    ```
    此文件代表一个 playbook，通常包含了一组有特定顺序的任务（也称为
    [*play*]{.emphasis} ）列表。这些任何会根据 `inventory`{.literal}
    文件中选择的特定管理主机进行。在这种情况下，该 playbook
    将针对受管主机的 `testingservers`{.literal} 组运行。
    Play 中的 `hosts`{.literal} 键指定对其运行 play
    的主机。您可以将这个键的值或值作为受管主机的单独名称，或作为清单文件中定义的主机组提供。``{.literal}
    `tasks`{.literal} 部分包含 `include_role`{.literal}
    键，它指定了哪些系统角色将配置 `vars`{.literal}
    部分中提到的参数和值。
    `vars`{.literal} 部分包含一个名为 `firewall`{.literal}
    的角色变量。此变量是字典值列表，并指定应用于受管主机上的
    `firewalld`{.literal} 的参数。example 角色将进入端口 8080
    的流量转发到端口 443。设置将立即生效，并将在重启后保留。
2.  （可选）验证 playbook 中的语法是否正确：
    ``` literallayout
    # ansible-playbook --syntax-check ~/port_forwarding.yml
    playbook: port_forwarding.yml
    ```
    本例演示了对 playbook 的成功验证。
3.  执行 playbook：
    ``` literallayout
    # ansible-playbook ~/port_forwarding.yml
    ```
:::
::: itemizedlist
**验证**
-   在受管主机上：
    ::: itemizedlist
    -   重启主机以验证 `firewalld`{.literal}
        设置是否在重启后是否仍存在：
        ``` literallayout
        # reboot
        ```
    -   显示 `firewalld`{.literal} 设置：
        ``` literallayout
        # firewall-cmd --list-forward-ports
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel){.link}
-   `README.html`{.literal} 和 `README.md`{.literal} 文件在
    `/usr/share/doc/rhel-system-roles/firewall/`{.literal} 目录中
-   [构建您的清单](https://docs.ansible.com/ansible/latest/network/getting_started/first_inventory.html){.link}
-   [配置
    Ansible](https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html){.link}
-   [使用
    Playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [使用变量](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html){.link}
-   [角色](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html){.link}
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-ports-using-system-roles_assembly_using-rhel-system-roles-with-ansible-to-configure-firewalld-settings}使用系统角色配置端口 {.title}
:::
您可以使用 Red Hat Enterprise Linux(RHEL) `firewalld`{.literal}
系统角色为传入的流量打开或关闭本地防火墙中的端口，并在重新引导后保持新配置。这个示例描述了如何配置
default 区以允许 `HTTPS`{.literal} 服务的传入流量。
在 Ansible 控制节点上运行此步骤。
::: itemizedlist
**先决条件**
-   访问一个或多个 [*受管节点*]{.emphasis} （这是您要使用
    `firewalld`{.literal} 系统角色配置的系统）。
-   对 [*控制节点*]{.emphasis} 的访问和权限，这是 Red Hat Ansible Core
    配置其他系统的系统。
-   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
    软件包在控制节点上安装。
-   如果您在运行 playbook 时使用了与 `root`{.literal}
    不同的远程用户，则此用户在受管节点上具有合适的 `sudo`{.literal}
    权限。
-   主机使用 NetworkManager 配置网络。
:::
::: orderedlist
**步骤**
1.  如果您要在其上执行 playbook
    中指令的主机还没有被列入清单，请将此主机的 IP 或名称添加到
    `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/adding-and-removing-ports.yml`{.literal}
    playbook：
    ``` literallayout
    ---
    - name: Allow incoming HTTPS traffic to the local host
      hosts: node.example.com
      become: true
      tasks:
        - include_role:
            name: linux-system-roles.firewall
          vars:
            firewall:
              - port: 443/tcp
                service: http
                state: enabled
                runtime: true
                permanent: true
    ```
    `permanent: true`{.literal} 选项可使新设置在重新引导后仍然有效。
3.  运行 playbook：
    ::: itemizedlist
    -   要以 `root`{.literal} 用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u root ~/adding-and-removing-ports.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u user_name --ask-become-pass ~/adding-and-removing-ports.yml
        ```
        `--ask-become-pass`{.literal} 选项确保
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户的 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，`ansible-playbook`{.literal}
    以当前登录到控制节点的用户身份连接到受管主机。
:::
::: orderedlist
**验证**
1.  连接到受管节点：
    ``` literallayout
    $ ssh PI:EMAIL
    ```
2.  验证与 `HTTPS`{.literal} 服务关联的 `443/tcp`{.literal}
    端口是否打开：
    ``` literallayout
    $ sudo firewall-cmd --list-ports
    443/tcp
    ```
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.network/README.md`{.literal}
-   `ansible-playbook(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-a-dmz-firewalld-zone-by-using-the-firewalld-rhel-system-role_assembly_using-rhel-system-roles-with-ansible-to-configure-firewalld-settings}使用 firewalld RHEL 系统角色配置 DMZ `firewalld`{.literal} 区域 {.title}
:::
作为系统管理员，您可以使用 RHEL `firewalld`{.literal} 系统角色在
[**enp1s0**]{.strong} 接口上配置 `dmz`{.literal} 区域，以允许到区域的
`HTTPS`{.literal} 流量。这样，您可以让外部用户访问您的 web 服务器。
::: itemizedlist
**先决条件**
-   对一个或多个 [*受管节点*]{.emphasis}
    的访问和权限，受管节点是您要使用 VPN 系统角色配置的系统。
-   对 [*控制节点*]{.emphasis} 的访问和权限，这是 Red Hat Ansible Core
    配置其他系统的系统。
-   列出受管节点的清单文件。
-   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
    软件包在控制节点上安装。
-   如果您在运行 playbook 时使用了与 `root`{.literal}
    不同的远程用户，则此用户在受管节点上具有合适的 `sudo`{.literal}
    权限。
-   受管节点使用 `NetworkManager`{.literal} 配置网络。
:::
::: orderedlist
**步骤**
1.  使用以下内容创建
    `~/configuring-a-dmz-using-the-firewall-system-role.yml`{.literal}
    playbook：
    ``` literallayout
    ---
    - name: Creating a DMZ with access to HTTPS port and masquerading for hosts in DMZ
      hosts: node.example.com
      become: true
      tasks:
        - include_role:
            name: linux-system-roles.firewall
          vars:
            firewall:
              - zone: dmz
                interface: enp1s0
                service: https
                state: enabled
                runtime: true
                permanent: true
    ```
2.  运行 playbook：
    ::: itemizedlist
    -   要以 `root`{.literal} 用户身份连接到受管主机，请输入：
        ``` literallayout
        $ ansible-playbook -u root ~/configuring-a-dmz-using-the-firewall-system-role.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        $ ansible-playbook -u user_name --ask-become-pass ~/configuring-a-dmz-using-the-firewall-system-role.yml
        ```
        `--ask-become-pass`{.literal} 选项确保
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户的 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，`ansible-playbook`{.literal}
    以当前登录到控制节点的用户身份连接到受管主机。
:::
::: itemizedlist
**验证**
-   在受管节点上，查看 `dmz`{.literal} 区域的详细信息：
    ``` literallayout
    # firewall-cmd --zone=dmz --list-all
    dmz (active)
      target: default
      icmp-block-inversion: no
      interfaces: enp1s0
      sources:
      services: https ssh
      ports:
      protocols:
      forward: no
      masquerade: no
      forward-ports:
      source-ports:
      icmp-blocks:
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#_additional_resources}其他资源 {.title}
:::
::: itemizedlist
-   `firewalld(1)`{.literal} 书册页
-   `firewalld.conf(5)`{.literal} 手册页
-   `firewall-cmd(1)`{.literal} 手册页
-   `firewall-config(1)`{.literal} 手册页
-   `firewall-offline-cmd(1)`{.literal} 手册页
-   `firewalld.icmptype(5)`{.literal} 手册页
-   `firewalld.ipset(5)`{.literal} 手册页
-   `firewalld.service(5)`{.literal} 手册页
-   `firewalld.zone(5)`{.literal} 手册页
-   `firewalld.direct(5)`{.literal} 手册页
-   `firewalld.lockdown-whitelist(5)`{.literal}
-   `firewalld.richlanguage(5)`{.literal}
-   `firewalld.zones(5)`{.literal} 手册页
-   `firewalld.dbus(5)`{.literal} 手册页
:::
:::
:::
[]{#getting-started-with-nftables_firewall-packet-filters.html}
::: chapter
::: titlepage
# []{#getting-started-with-nftables_firewall-packet-filters.html#getting-started-with-nftables_firewall-packet-filters}第 2 章 nftables 入门 {.title}
:::
`nftables`{.literal} 框架提供了数据包分类功能。最显著的功能是：
::: itemizedlist
-   内置查找表而不是线性处理
-   `IPv4`{.literal} 和 `IPv6`{.literal} 使用同一个协议框架
-   规则会以一个整体被应用，而不是分为抓取、更新和存储完整的规则集的步骤
-   支持在规则集(`nftrace`{.literal})和监控追踪事件（`nft`{.literal}）中调试和追踪
-   更加一致和压缩的语法，没有特定协议的扩展
-   用于第三方应用程序的 Netlink API
:::
`nftables`{.literal}