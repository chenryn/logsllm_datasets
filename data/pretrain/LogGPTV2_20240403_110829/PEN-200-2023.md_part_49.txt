12.4 Wrapping Up
In this Module, we discussed the purpose of antivirus software and the most common methods
used by vendors to detect malicious code. We briefly explained various antivirus bypass methods
that involve different techniques of on-disk and in-memory shellcode injection and demonstrated
successful bypasses using Shellter and PowerShell.
Although we have successfully bypassed antivirus detection in botyh of our examples, we have
barely scratched the surface of malware detection and evasion. For further reading and to learn
how much effort is required for malware writers to evade modkern defenses, we encourage you to
read the excellent Microsoft article “FinFisher exposed: A researcher’s tale of defeating traps,
tricks, and complex virtual machines”591 along with a few advanced evasion techniques listed in
s
Emeric Nasi’s paper.592
o
n
i
z
D
591 (Microsoft, 2018), https://cloudblogs.microsoft.com/microsoftsecure/2018/03/01/finfisher-exposed-a-researchers-tale-of-
defeating-traps-tricks-and-complex-virtual-machines/
592 (Emeric Nasi, 2014),
https://web.archive.org/web/20210317102554/https://wikileaks.org/ciav7p1/cms/files/BypassAVDynamics.pdf
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 379
Made in Morocco
Penetration Testing with Kali Linux
13 Password Attacks
In this Learning Module, we will cover the following Learning Units:
• Attacking network services logins
• Password Cracking Fundamentals
• Working with Password Hashes
While there are many modern approaches to user account and service authentication (such as
biometric authentication593 or Public Key Infrastructure594), simple password authentication
remains the most dominant and basic approach.
In this Module, we’ll discover, reveal, and leverage passwords (and iny some cases their underlying
implementation components) to gain access to a user account or system. We’ll discuss network
attacks, password cracking, and attacks against Windows-based authentication
k
implementations.
s
13.1 Attacking Network Services Logins
This Learning Unit covers the following Learning Oobjectives:
• Attack SSH and RDP logins
n
• Attack HTTP POST login forms
In the last decade, brute-force and diictionary attacks against publicly-exposed network services
have increased dramatically. In fzact, the common Secure Shell (SSH), Remote Desktop Protocol
(RDP), and Virtual Network Computing (VNC)595 services as well as web-based login forms are
often attacked seconds after they are launched.596
D
Brute-force attacks attempt every possible password variation, working systematically through
every combination of letters, digits and special characters. Although this may take a considerable
amount of time depending on the length of the password and the protocol in use, these attacks
could theoretically bypass any ill-protected password-based authentication system.
On the other hand, dictionary attacks attempt to authenticate to services with passwords from
lists of common words (wordlists). If the correct password is not contained in the wordlist, the
dictionary attack will fail.
In this Learning Unit, we’ll use dictionary attacks to discover valid credentials for network services
and HTTP login forms.
593 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Biometrics
594 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Public_key_infrastructure
595 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Virtual_Network_Computing
596 (SSH, 2018), https://www.ssh.com/blog/ssh-key-scan-attack-honeypot
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 380
Made in Morocco
Penetration Testing with Kali Linux
13.1.1 SSH and RDP
In this section, we’ll execute dictionary attacks against the common SSH and RDP services using
the open-source THC Hydra597 tool, which can execute a broad variety of password attacks
against a variety of network services and protocols. We’ll also use the popular rockyou.txt
wordlist, which contains over 14 million passwords. Both of these are pre-installed on our Kali
machine.
To begin, let’s start the machine BRUTE (VM #1 under Resources). In the first example, we’ll
attack the SSH service (port 2222) on this machine, which has an IP address of 192.168.50.201.
We’ll attempt to determine the password for the user george.
The IP address of BRUTE may differ in your environment.
y
k
Before we start our dictionary attack, we should confirm that the target is running an SSH service
on port 2222.
s
kali@kali:~$ sudo nmap -sV -p 2222 192.168.50.201
...
o
PORT STATE SERVICE
2222/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
...
n
Listing 254 - Checking if target is running a SSH service
The output indicates that SSH is open. Let’s assume that through the information gathering
i
process we already discovered the george user.
z
D
It’s worth noting that the format of the username also suggests that the
company may use the first name of the user for account names. This
information may assist us in later information gathering attempts.
Next, let’s prepare to use the rockyou.txt wordlist file. Since the file is compressed to save space,
we must uncompress it with gzip -d.598 Finally, we can run hydra.
We’ll attack a single username with -l george, specify the port with -s, indicate our password list
with -P and define our target with ssh://192.168.50.201:
kali@kali:~$ cd /usr/share/wordlists/
kali@kali:~$ ls
dirb dirbuster fasttrack.txt fern-wifi metasploit nmap.lst rockyou.txt.gz wfuzz
kali@kali:~$ sudo gzip -d rockyou.txt.gz
597 (Github, 2022), https://github.com/vanhauser-thc/thc-hydra
598 (GNU, 2022), https://www.gnu.org/software/gzip/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 381
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ sudo hydra -l george -P /usr/share/wordlists/rockyou.txt -s 2222
ssh://192.168.50.201
...
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries
(l:1/p:14344399), ~896525 tries per task
[DATA] attacking ssh://192.168.50.201:22/
[2222][ssh] host: 192.168.50.201 login: george password: chocolate
1 of 1 target successfully completed, 1 valid password found
...
Listing 255 - Unzipping Gzip Archive and attacking SSH
The listing shows that we successfully used Hydra to discover a valid login for the george user.
The dictionary attack worked because the password was contained in the rockyou.txt wordlist
and we knew the name of the user we wanted to attack. However, if we didn’t have valid
usernames, we would use enumeration and information gatherinyg techniques to find them.
Alternatively, we could also attack built-in accounts such as root (on Linux) or Administrator (on
Windows).
k
In this next example, we will attempt to use a single password against a variety of usernames in a
technique known as password spraying.599 s
o
Since there are many different ways to gain access to passwords, this is an
extremely viable technique. For example, we may gain access to credentials
n
using one of the techniques discussed later in this Module, or we may find them
stored as plaintext in a file or through the use of an online password leak
database. These services (such as ScatteredSecrets600) track password leaks
i
and compromises and sell the plaintext passwords. This can be very beneficial
z
during a penetration test, but we must make sure we do not violate the terms of
these services, we must ensure that we only use the passwords in direct
D
cooperation with the legal owner, and we must review the service carefully to
determine if it’s operating legally. For example, WeLeakInfo601 was recently
seized by the FBI and U.S. Department of Justice for alleged illegal activity.
Let’s demonstrate this scenario by executing a spray attack against the RDP service on BRUTE2.
To do so, let’s shutdown the machine BRUTE (VM #1) and start BRUTE2 (VM #2) under
Resources. In this example, we’ll assume we have already obtained a valid user password
(SuperS3cure1337#), and we will attempt that password against a variety of potential user
account names.
We’ll again use hydra, setting a list of usernames with -L
/usr/share/wordlists/dirb/others/names.txt (which contains over eight thousand username
entries) and a single password with -p “SuperS3cure1337#”. We’ll use the RDP protocol this time
and set the target with rdp://192.168.50.202.
599 (OWASP, 2021), https://owasp.org/www-community/attacks/Password_Spraying_Attack
600 (Scattered Secrets, 2022), https://scatteredsecrets.com/
601 (U.S. Department of Justice, 2022), https://www.justice.gov/usao-dc/pr/weleakinfoto-and-related-domain-names-seized
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 382
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ sudo hydra -L /usr/share/wordlists/dirb/others/names.txt -p
"SuperS3cure1337#" rdp://192.168.50.202
...
[DATA] max 4 tasks per 1 server, overall 4 tasks, 14344399 login tries
(l:14344399/p:1), ~3586100 tries per task
[DATA] attacking rdp://192.168.50.202:3389/
...
[3389][rdp] host: 192.168.50.202 login: daniel password: SuperS3cure1337#
[ERROR] freerdp: The connection failed to establish.
[3389][rdp] host: 192.168.50.202 login: justin password: SuperS3cure1337#
[ERROR] freerdp: The connection failed to establish.
...
Listing 256 - Spraying a password on RDP service
y
Due to the size of the selected list, the password attack will take around 15
minutes to discover the two valid credentials. While following along, we can
reduce this time by creating a list that only contains twko lines, “daniel” and
“justin”.
s
In this case, we identified two usernames with the password we discovered in the database leak.
o
We should always try to leverage every plaintext password we discover by spraying them against
the target’s systems. This could reveal users that use the same password across multiple
systems. However, we must also use cautionn when leveraging broad-range attacks.
Dictionary attacks generate a lot of noise in terms of logs, events, and traffic. While a huge
i
amount of network traffic can bring down a network, the reactions of various security
z
technologies could be even more undesirable. For example, a basic brute force protection
program could lock a user’s account after three failed login attempts. In a real-world penetration
test, this could lead to a sDituation in which we lock users out of critical production systems.
Before blindly launching tools, we must perform a thorough enumeration to identify and avoid
these risks.
In this section, we performed dictionary attacks on the common SSH and RDP network services.
While Hydra makes the process straightforward for most protocols, some protocols require more
information. We’ll explore this with HTTP POST login forms in the next section.
Before we head into the first exercises of this Module, we need to be aware that the process of
attacking authentication on a target shouldn’t take longer than three minutes in the exercises or
the challenge labs. If the process takes longer, you should double-check your command and
arguments or try a different approach.
13.1.2 HTTP POST Login Form
In most internal and external assessments, we will face a web service. Depending on the service,
we may not be able to interact with it until we log into it. If this is our only vector and we’re unable
to use default credentials to log in, we should consider using a dictionary attack to gain access.
Most web services come with a default user account, such as admin. Using this known username
for our dictionary attack will dramatically increase our chances of success and reduce the
expected duration of our attack.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 383
Made in Morocco
Penetration Testing with Kali Linux
In this section, we’ll perform a dictionary attack on the login form of the TinyFileManager602
application, which is running on port 80 on the BRUTE web server. Let’s browse to the login page.
y
k
s
Figure 209: Login page of TinyFileManager
After reading the application’s documentation, woe discover that TinyFileManager includes two
default users: admin and user. After trying and failing to log in with the application’s default
credentials,603 we’ll attack the password of user with the rockyou.txt wordlist.
n
Attacking an HTTP POST login form with Hydra is not as straightforward as attacking SSH or
RDP. We must first gather two different pieces of information. The first is the POST data itself,
i
which contains the request body specifying the username and password. Second, we must
z
capture a failed login attempt to help Hydra differentiate between a successful and a failed login.
We’ll use Burp604 to intercepDt a login attempt so we can grab the request body in the POST data.
To do this, we’ll first start Burp and activate intercept. Next, in our browser, we’ll enter a username
of user and any password into the login form. The following figure shows the intercepted POST
request for the login attempt.
Figure 210: Intercepted Login Request
The highlighted area marks the request body we need to provide for Hydra in the POST request.
602 (Github, 2022), https://github.com/prasathmani/tinyfilemanager
603 (Github, 2022), https://tinyfilemanager.github.io/docs/
604 (PortSwigger, 2022), https://portswigger.net/burp
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 384
Made in Morocco
Penetration Testing with Kali Linux
Next, we need to identify a failed login attempt. The simplest way to do this is to forward the
request or turn intercept off and check the login form in the browser. The following figure shows
that a message appeared, which informs us that our login failed.
y
k
s
o
Figure 211: Intercepted Login Request
n
The highlighted text appears after a failed login attempt. We’ll provide this text to Hydra as a failed
login identifier.
i
z
In more complex web applications, we may need to dig deeper into the request
and response or evDen inspect the source code of the login form to isolate a failed
login indicator, but this is out of the scope of this Module.
Now we can assemble the pieces to start our Hydra attack. As before, we’ll specify -l for the user,
-P for the wordlist, the target IP without any protocol, and a new http-post-form argument, which
accepts three colon-delimited fields.
The first field indicates the location of the login form. In this demonstration, the login form is
located on the index.php web page. The second field specifies the request body used for
providing a username and password to the login form, which we retrieved with Burp. Finally we
must provide the failed login identifier, also known as a condition string.
Before we provide the arguments to Hydra and launch the attack, we should understand that the
condition string is searched for within the response of the web application to determine if a login
is successful or not. To reduce false positives, we should always try to avoid keywords such as
password or username. To do so, we can shorten the condition string appropriately.
The complete command with the shortened condition string is shown below. After executing the
command, we’ll wait a few moments for Hydra to identify a valid set of credentials.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 385
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ sudo hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201
http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"
...
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries
(l:1/p:14344399), ~896525 tries per task
[DATA] attacking http-post-
form://192.168.50.201:80/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid
username or password
[STATUS] 64.00 tries/min, 64 tries in 00:01h, 14344335 to do in 3735:31h, 16 active
[80][http-post-form] host: 192.168.50.201 login: user password: 121212
1 of 1 target successfully completed, 1 valid password found
...
Listing 257 - Successful Dictionary Attack on the Login Form
In this case, our dictionary attack was successful and we identified a valid password (121212) for
user. Let’s try to log in to confirm the credentials. y
k
s
o
n
Figure 212: Successful Login
i
According to the output in Figure z212, we logged in successfully. Nice!
As with any dictionary attack, this generates a lot of noise and many events. If installed, a Web
D
Application Firewall (WAF)605 would block this activity quickly. Other brute force protection
applications could also block this, such as fail2ban,606 which locks a user out after a set number
of failed login attempts. However, web services aren’t often afforded this type of protection,
making this is a highly effective vector against those targets.
In general, dictionary attacks can be quite effective, especially if we begin with some type of
known information and balance our attack in consideration of potential defense mechanisms.
13.2 Password Cracking Fundamentals