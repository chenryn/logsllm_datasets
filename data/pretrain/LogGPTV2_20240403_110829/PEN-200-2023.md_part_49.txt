### 12.4 Wrapping Up

In this module, we discussed the purpose of antivirus software and the most common methods used by vendors to detect malicious code. We also briefly explained various antivirus bypass techniques, including on-disk and in-memory shellcode injection, and demonstrated successful bypasses using Shellter and PowerShell.

Although we successfully bypassed antivirus detection in both examples, we have only scratched the surface of malware detection and evasion. For further reading and to understand the effort required for malware writers to evade modern defenses, we recommend the Microsoft article "FinFisher Exposed: A Researcher’s Tale of Defeating Traps, Tricks, and Complex Virtual Machines"591, as well as Emeric Nasi’s paper on advanced evasion techniques592.

**References:**
- 591 (Microsoft, 2018), [https://cloudblogs.microsoft.com/microsoftsecure/2018/03/01/finfisher-exposed-a-researchers-tale-of-defeating-traps-tricks-and-complex-virtual-machines/](https://cloudblogs.microsoft.com/microsoftsecure/2018/03/01/finfisher-exposed-a-researchers-tale-of-defeating-traps-tricks-and-complex-virtual-machines/)
- 592 (Emeric Nasi, 2014), [https://web.archive.org/web/20210317102554/https://wikileaks.org/ciav7p1/cms/files/BypassAVDynamics.pdf](https://web.archive.org/web/20210317102554/https://wikileaks.org/ciav7p1/cms/files/BypassAVDynamics.pdf)

---

### 13 Password Attacks

In this learning module, we will cover the following topics:

- Attacking network services logins
- Password Cracking Fundamentals
- Working with Password Hashes

While there are many modern approaches to user account and service authentication (such as biometric authentication593 or Public Key Infrastructure594), simple password authentication remains the most dominant and basic approach.

In this module, we will discover, reveal, and leverage passwords (and in some cases their underlying implementation components) to gain access to a user account or system. We will discuss network attacks, password cracking, and attacks against Windows-based authentication implementations.

**References:**
- 593 (Wikipedia, 2022), [https://en.wikipedia.org/wiki/Biometrics](https://en.wikipedia.org/wiki/Biometrics)
- 594 (Wikipedia, 2022), [https://en.wikipedia.org/wiki/Public_key_infrastructure](https://en.wikipedia.org/wiki/Public_key_infrastructure)

### 13.1 Attacking Network Services Logins

This learning unit covers the following objectives:
- Attack SSH and RDP logins
- Attack HTTP POST login forms

In the last decade, brute-force and dictionary attacks against publicly-exposed network services have increased dramatically. Common services such as Secure Shell (SSH), Remote Desktop Protocol (RDP), and Virtual Network Computing (VNC)595, as well as web-based login forms, are often attacked seconds after they are launched596.

Brute-force attacks attempt every possible password variation, systematically working through every combination of letters, digits, and special characters. Although this may take a considerable amount of time depending on the length of the password and the protocol in use, these attacks could theoretically bypass any ill-protected password-based authentication system.

Dictionary attacks, on the other hand, attempt to authenticate to services with passwords from lists of common words (wordlists). If the correct password is not contained in the wordlist, the dictionary attack will fail.

In this learning unit, we will use dictionary attacks to discover valid credentials for network services and HTTP login forms.

**References:**
- 595 (Wikipedia, 2022), [https://en.wikipedia.org/wiki/Virtual_Network_Computing](https://en.wikipedia.org/wiki/Virtual_Network_Computing)
- 596 (SSH, 2018), [https://www.ssh.com/blog/ssh-key-scan-attack-honeypot](https://www.ssh.com/blog/ssh-key-scan-attack-honeypot)

### 13.1.1 SSH and RDP

In this section, we will execute dictionary attacks against the common SSH and RDP services using the open-source THC Hydra597 tool, which can execute a broad variety of password attacks against a variety of network services and protocols. We will also use the popular rockyou.txt wordlist, which contains over 14 million passwords. Both of these tools are pre-installed on our Kali machine.

To begin, let's start the BRUTE machine (VM #1 under Resources). In the first example, we will attack the SSH service (port 2222) on this machine, which has an IP address of 192.168.50.201. We will attempt to determine the password for the user george.

**Note:** The IP address of BRUTE may differ in your environment.

Before starting our dictionary attack, we should confirm that the target is running an SSH service on port 2222.

```bash
kali@kali:~$ sudo nmap -sV -p 2222 192.168.50.201
...
PORT STATE SERVICE
2222/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
...
```

**Listing 254 - Checking if the target is running an SSH service**

The output indicates that SSH is open. Let's assume that through the information gathering process, we already discovered the user george. It’s worth noting that the format of the username suggests that the company may use the first name of the user for account names. This information may assist us in later information gathering attempts.

Next, let's prepare to use the rockyou.txt wordlist file. Since the file is compressed to save space, we must uncompress it with `gzip -d`598. Finally, we can run Hydra.

We will attack a single username with `-l george`, specify the port with `-s`, indicate our password list with `-P`, and define our target with `ssh://192.168.50.201`.

```bash
kali@kali:~$ cd /usr/share/wordlists/
kali@kali:~$ ls
dirb dirbuster fasttrack.txt fern-wifi metasploit nmap.lst rockyou.txt.gz wfuzz
kali@kali:~$ sudo gzip -d rockyou.txt.gz
kali@kali:~$ sudo hydra -l george -P /usr/share/wordlists/rockyou.txt -s 2222 ssh://192.168.50.201
...
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task
[DATA] attacking ssh://192.168.50.201:22/
[2222][ssh] host: 192.168.50.201 login: george password: chocolate
1 of 1 target successfully completed, 1 valid password found
...
```

**Listing 255 - Unzipping Gzip Archive and attacking SSH**

The listing shows that we successfully used Hydra to discover a valid login for the george user. The dictionary attack worked because the password was contained in the rockyou.txt wordlist, and we knew the name of the user we wanted to attack. However, if we didn’t have valid usernames, we would use enumeration and information gathering techniques to find them. Alternatively, we could also attack built-in accounts such as root (on Linux) or Administrator (on Windows).

In the next example, we will attempt to use a single password against a variety of usernames in a technique known as password spraying599. Since there are many different ways to gain access to passwords, this is an extremely viable technique. For example, we may gain access to credentials using one of the techniques discussed later in this module, or we may find them stored as plaintext in a file or through the use of an online password leak database. These services (such as ScatteredSecrets600) track password leaks and compromises and sell the plaintext passwords. This can be very beneficial during a penetration test, but we must ensure that we only use the passwords in direct cooperation with the legal owner and review the service carefully to determine if it’s operating legally. For example, WeLeakInfo601 was recently seized by the FBI and U.S. Department of Justice for alleged illegal activity.

Let's demonstrate this scenario by executing a spray attack against the RDP service on BRUTE2. To do so, let's shut down the machine BRUTE (VM #1) and start BRUTE2 (VM #2) under Resources. In this example, we’ll assume we have already obtained a valid user password (SuperS3cure1337#), and we will attempt that password against a variety of potential user account names.

We will again use Hydra, setting a list of usernames with `-L /usr/share/wordlists/dirb/others/names.txt` (which contains over eight thousand username entries) and a single password with `-p "SuperS3cure1337#"`. We will use the RDP protocol this time and set the target with `rdp://192.168.50.202`.

```bash
kali@kali:~$ sudo hydra -L /usr/share/wordlists/dirb/others/names.txt -p "SuperS3cure1337#" rdp://192.168.50.202
...
[DATA] max 4 tasks per 1 server, overall 4 tasks, 14344399 login tries (l:14344399/p:1), ~3586100 tries per task
[DATA] attacking rdp://192.168.50.202:3389/
...
[3389][rdp] host: 192.168.50.202 login: daniel password: SuperS3cure1337#
[ERROR] freerdp: The connection failed to establish.
[3389][rdp] host: 192.168.50.202 login: justin password: SuperS3cure1337#
[ERROR] freerdp: The connection failed to establish.
...
```

**Listing 256 - Spraying a password on RDP service**

Due to the size of the selected list, the password attack will take around 15 minutes to discover the two valid credentials. While following along, we can reduce this time by creating a list that only contains two lines, "daniel" and "justin".

In this case, we identified two usernames with the password we discovered in the database leak. We should always try to leverage every plaintext password we discover by spraying them against the target’s systems. This could reveal users that use the same password across multiple systems. However, we must also use caution when leveraging broad-range attacks. Dictionary attacks generate a lot of noise in terms of logs, events, and traffic. While a huge amount of network traffic can bring down a network, the reactions of various security technologies could be even more undesirable. For example, a basic brute force protection program could lock a user’s account after three failed login attempts. In a real-world penetration test, this could lead to a situation in which we lock users out of critical production systems. Before blindly launching tools, we must perform a thorough enumeration to identify and avoid these risks.

In this section, we performed dictionary attacks on the common SSH and RDP network services. While Hydra makes the process straightforward for most protocols, some protocols require more information. We will explore this with HTTP POST login forms in the next section.

Before we head into the first exercises of this module, we need to be aware that the process of attacking authentication on a target shouldn't take longer than three minutes in the exercises or challenge labs. If the process takes longer, you should double-check your command and arguments or try a different approach.

### 13.1.2 HTTP POST Login Form

In most internal and external assessments, we will face a web service. Depending on the service, we may not be able to interact with it until we log into it. If this is our only vector and we’re unable to use default credentials to log in, we should consider using a dictionary attack to gain access. Most web services come with a default user account, such as admin. Using this known username for our dictionary attack will dramatically increase our chances of success and reduce the expected duration of our attack.

In this section, we will perform a dictionary attack on the login form of the TinyFileManager602 application, which is running on port 80 on the BRUTE web server. Let's browse to the login page.

**Figure 209: Login page of TinyFileManager**

After reading the application’s documentation, we discover that TinyFileManager includes two default users: admin and user. After trying and failing to log in with the application’s default credentials603, we will attack the password of user with the rockyou.txt wordlist.

Attacking an HTTP POST login form with Hydra is not as straightforward as attacking SSH or RDP. We must first gather two different pieces of information. The first is the POST data itself, which contains the request body specifying the username and password. Second, we must capture a failed login attempt to help Hydra differentiate between a successful and a failed login. We will use Burp604 to intercept a login attempt so we can grab the request body in the POST data.

To do this, we will first start Burp and activate intercept. Next, in our browser, we will enter a username of user and any password into the login form. The following figure shows the intercepted POST request for the login attempt.

**Figure 210: Intercepted Login Request**

The highlighted area marks the request body we need to provide for Hydra in the POST request.

Next, we need to identify a failed login attempt. The simplest way to do this is to forward the request or turn intercept off and check the login form in the browser. The following figure shows that a message appeared, which informs us that our login failed.

**Figure 211: Failed Login Message**

The highlighted text appears after a failed login attempt. We will provide this text to Hydra as a failed login identifier.

In more complex web applications, we may need to dig deeper into the request and response or even inspect the source code of the login form to isolate a failed login indicator, but this is out of the scope of this module.

Now we can assemble the pieces to start our Hydra attack. As before, we will specify `-l` for the user, `-P` for the wordlist, the target IP without any protocol, and a new `http-post-form` argument, which accepts three colon-delimited fields.

The first field indicates the location of the login form. In this demonstration, the login form is located on the index.php web page. The second field specifies the request body used for providing a username and password to the login form, which we retrieved with Burp. Finally, we must provide the failed login identifier, also known as a condition string.

Before we provide the arguments to Hydra and launch the attack, we should understand that the condition string is searched for within the response of the web application to determine if a login is successful or not. To reduce false positives, we should always try to avoid keywords such as password or username. To do so, we can shorten the condition string appropriately.

The complete command with the shortened condition string is shown below. After executing the command, we will wait a few moments for Hydra to identify a valid set of credentials.

```bash
kali@kali:~$ sudo hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"
...
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task
[DATA] attacking http-post-form://192.168.50.201:80/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid username or password
[STATUS] 64.00 tries/min, 64 tries in 00:01h, 14344335 to do in 3735:31h, 16 active
[80][http-post-form] host: 192.168.50.201 login: user password: 121212
1 of 1 target successfully completed, 1 valid password found
...
```

**Listing 257 - Successful Dictionary Attack on the Login Form**

In this case, our dictionary attack was successful, and we identified a valid password (121212) for user. Let's try to log in to confirm the credentials.

**Figure 212: Successful Login**

According to the output in Figure 212, we logged in successfully. Nice!

As with any dictionary attack, this generates a lot of noise and many events. If installed, a Web Application Firewall (WAF)605 would block this activity quickly. Other brute force protection applications could also block this, such as fail2ban606, which locks a user out after a set number of failed login attempts. However, web services aren’t often afforded this type of protection, making this a highly effective vector against those targets.

In general, dictionary attacks can be quite effective, especially if we begin with some type of known information and balance our attack in consideration of potential defense mechanisms.

**References:**
- 597 (Github, 2022), [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)
- 598 (GNU, 2022), [https://www.gnu.org/software/gzip/](https://www.gnu.org/software/gzip/)
- 599 (OWASP, 2021), [https://owasp.org/www-community/attacks/Password_Spraying_Attack](https://owasp.org/www-community/attacks/Password_Spraying_Attack)
- 600 (Scattered Secrets, 2022), [https://scatteredsecrets.com/](https://scatteredsecrets.com/)
- 601 (U.S. Department of Justice, 2022), [https://www.justice.gov/usao-dc/pr/weleakinfoto-and-related-domain-names-seized](https://www.justice.gov/usao-dc/pr/weleakinfoto-and-related-domain-names-seized)
- 602 (Github, 2022), [https://github.com/prasathmani/tinyfilemanager](https://github.com/prasathmani/tinyfilemanager)
- 603 (Github, 2022), [https://tinyfilemanager.github.io/docs/](https://tinyfilemanager.github.io/docs/)
- 604 (PortSwigger, 2022), [https://portswigger.net/burp](https://portswigger.net/burp)
- 605 (Wikipedia, 2022), [https://en.wikipedia.org/wiki/Web_application_firewall](https://en.wikipedia.org/wiki/Web_application_firewall)
- 606 (Fail2Ban, 2022), [https://www.fail2ban.org/](https://www.fail2ban.org/)

---

### 13.2 Password Cracking Fundamentals

[Continue with the next section as needed.]