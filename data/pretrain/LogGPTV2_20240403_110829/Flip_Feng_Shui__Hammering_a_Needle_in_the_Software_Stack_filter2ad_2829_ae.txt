can release vulnerable memory pages to the allocator,
craft a page with the same contents as the victim page,
and wait for a merge operation. Due to the near-OOM
situation, the merge operation happens almost instantly,
forcing the host kernel to predictably pick one of the
previously released vulnerable memory pages (i.e., tem-
plates) to back the existing duplicate pages (the crafted
page and the victim page). At this stage, the attacker has
again, in effect, a memory massaging primitive.
A better design To improve on the strawman design,
the host needs to ensure enough memory is available not
to get cornered into predictable physical memory reuse
patterns. Given a desired level of entropy h, and the num-
ber of merged pages mi for for the ith VM, the host needs
to ensure A = 2h + Max(mi) memory pages are avail-
able or can easily become available (e.g., page cache)
to the kernel’s page allocator at all times. With an ad-
equate choice of h, it may become difﬁcult for an at-
tacker to control the behavior of the memory dedupli-
cation system. We have left the study of the right pa-
rameters for h and the projected A for real systems to
future work. We also note that balancing entropy, mem-
ory, and performance when supporting a truly random
and deduplication-enabled physical memory allocator is
challenging, and a promising direction for future work.
6.2 Mitigating FFS at the Software Layer
The attacks presented in this paper provide worrisome
evidence that even the most security-sensitive software
packages used in production account for no attacker-
controlled bit ﬂips as part of their threat model. While
there is certainly room for further research in this direc-
tion, based on our experience, we formulate a number of
suggestions to improve current practices:
• Security-sensitive information needs to be checked
for integrity in software right before use to ensure
the window of corruption is small. In all the cases
we analyzed, such integrity checks would be placed
on a slow path with essentially no application per-
formance impact.
Certiﬁcate chain formats such as X.509 are auto-
matically integrity checked as certiﬁcates are al-
ways signed [17]. This is a signiﬁcant side beneﬁt
of a certiﬁcation chain with self-signatures.
• The ﬁle system, due to the presence of the page
cache, should not be trusted. Sensitive information
on stable storage should include integrity or authen-
ticity information (i.e., a security signature) for veri-
ﬁcation purposes. In fact, this simple defense mech-
anism would stop the two dFFS attacks that we pre-
sented in this paper.
• Low-level operating system optimizations should
be included with extra care. Much recent work [11,
12, 29, 40, 58] shows that benign kernel opti-
mizations such as transparent huge pages, vsyscall
pages, and memory deduplication can become dan-
gerous tools in the hands of a capable attacker. In
the case of FFS, any feature that allows an untrusted
entity to control the layout or reuse of data in physi-
cal memory may provide an attacker with a memory
massaging primitive to mount our attacks.
USENIX Association  
25th USENIX Security Symposium  13
13
7 Related Work
We categorize related work into three distinct groups dis-
cussed below.
7.1 Rowhammer Exploitation
Pioneering work on the Rowhammer bug already warned
about its potential security implications [34]. One year
later, Seaborn published the ﬁrst two concrete Rowham-
mer exploits, in the form of escaping the Google Native
Client (NaCl) sandbox and escalating local privileges on
Linux [51]. Interestingly, Seaborn’s privilege escalation
exploit relies on a weak form of memory massaging by
probabilistically forcing a OOMing kernel to reuse phys-
ical pages released from user space. dFFS, in contrast,
relies on a deterministic memory massaging primitive to
map pages from co-hosted VMs and mount fully reliable
attacks. In addition, while mapping pages from kernel
space for local privilege escalation is possible, dFFS en-
ables a much broader range of attacks over nearly arbi-
trary physical memory.
Furthermore, Seaborn’s exploits relied on Intel x86’s
CLFLUSH instruction to evict a cache line from the CPU
caches in order to read directly from DRAM. For mit-
igation purposes, CLFLUSH was disabled in NaCl and
the same solution was suggested for native CPUs via
a microcode update.
In response to the local priv-
ilege exploit, Linux disabled unprivileged access to
virtual-to-physical memory mapping information (i.e.,
/proc/self/pagemap) used in the exploit to perform
double-sided Rowhammer. Gruss et al. [30], how-
ever, showed that it is possible to perform double-sided
Rowhammer from the browser, without CLFLUSH, and
without pagemap, using cache eviction sets and transpar-
ent huge pages (THP). dFFS relies on nested THP (both
in the host and in the guest) for reliable double-sided
Rowhammer. In our previous work [12], we took the next
step and implemented the ﬁrst reliable Rowhammer ex-
ploit in the Microsoft Edge browser. Our exploit induces
a bit ﬂip in the control structure of a JavaScript object for
pivoting to an attacker-controlled counterfeit object. The
counterfeit object provides the attackers with arbitrary
memory read and write primitives inside the browser.
All the attacks mentioned above rely on one key as-
sumption: the attacker already owns the physical mem-
ory of the victim to make Rowhammer exploitation pos-
sible.
In this paper, we demonstrated that, by abus-
ing modern memory management features, it is possi-
ble to completely lift this assumption with alarming con-
sequences. Using FFS, an attacker can seize control of
nearly arbitrary physical memory in the software stack,
for example compromising co-hosted VMs in complete
absence of software vulnerabilities.
7.2 Memory Massaging
Sotirov [55] demonstrates the power of controlling vir-
tual memory allocations in JavaScript, bypassing many
protections against memory errors with a technique
called Heap Feng Shui. Mandt [41] demonstrates that
it is possible to control reuse patterns in the Windows 7
kernel heap allocator in order to bypass the default mem-
ory protections against heap-based attacks in the kernel.
Inspired by these techniques, our Flip Feng Shui demon-
strates that an attacker abusing benign and widespread
memory management mechanisms allows a single bit ﬂip
to become a surprisingly dangerous attack primitive over
physical memory.
Memory spraying techniques [25, 33, 47, 50] allocate
a large number of objects in order to make the layout of
memory predictable for exploitation purposes, similar, in
spirit, to FFS. Govindavajhala and Appel [28] sprayed
the entire memory of a machine with specially-crafted
Java objects and showed that 70% of the bit ﬂips caused
by rare events cosmic rays and such will allow them to
escape the Java sandbox. This attack is by its nature
probabilistic and, unlike FFS, does not allow for fully
controllable exploitation.
Memory deduplication side channels have been pre-
viously abused to craft increasingly sophisticated infor-
mation disclosure attacks [8, 12, 29, 32, 43, 56].
In
this paper, we demonstrate that memory deduplication
has even stronger security implications than previously
shown. FFS can abuse memory deduplication to perform
attacker-controlled page-table updates and craft a mem-
ory massaging primitive for reliable hardware bit ﬂip ex-
ploitation.
7.3 Breaking Weakened Cryptosystems
Fault attacks have been introduced in cryptography by
Boneh et al. [9]; their attack was highly effective against
implementations of RSA that use the Chinese Remain-
der Theorem. Since then, many variants of fault at-
tacks against cryptographic implementations have been
described as well as countermeasures against these at-
tacks. Seifert was the ﬁrst to consider attacks in which
faults were introduced in the RSA modulus [52]; his goal
was limited to forging signatures. Brier et al. [14] have
extended his work to sophisticated methods to recover
the private key; they consider a setting of uncontrollable
faults and require many hundreds to even tens of thou-
sands of faults.
In our attack setting, the attacker can
choose the location and observe the modulus, which re-
duces the overhead substantially.
In the case of Difﬁe-Hellman, the risk of using it with
moduli that are not strong primes or hard-to-factor inte-
gers was well understood and debated extensively dur-
14  25th USENIX Security Symposium 
USENIX Association
14
ing the RSA versus DSA controversy in the early 1990s
(e.g., in a panel at Eurocrypt’92 [18]). Van Oorschot and
Wiener showed how a group order with small factors can
interact badly with the use of small Difﬁe-Hellman expo-
nents [57]. In 2015, the Logjam attack [3] raised new in-
terest in the potential weaknesses of Difﬁe-Hellman pa-
rameters.
In this paper, we performed a formal cryptanalysis of
RSA public keys in the presence of bit ﬂips. Our evalua-
tion of dFFS with bit-ﬂipped default 2048-bit RSA pub-
lic keys conﬁrmed our theoretical results. dFFS can in-
duce bit ﬂips in RSA public keys and factorize 99% of
the resulting 2048-bit keys given enough Rowhammer-
induced bit ﬂips. We further showed that we could factor
4.2% of the two 4096 bit Ubuntu Archive Automatic
Signing Keys with a bit ﬂip. This allowed us to gener-
ate enough templates to successfully trick a victim VM
into installing our packages. For completeness, we also
included a formal cryptanalysis of Difﬁe-Hellman expo-
nents in the presence of bit ﬂips in Appendix A.
8 Conclusions
Hardware bit ﬂips are commonly perceived as a vehicle
of production software failures with limited exploitation
power in practice.
In this paper, we challenged com-
mon belief and demonstrated that an attacker armed with
Flip Feng Shui (FFS) primitives can mount devastat-
ingly powerful end-to-end attacks even in complete ab-
sence of software vulnerabilities. Our FFS implementa-
tion (dFFS) combines hardware bit ﬂips with novel mem-
ory templating and massaging primitives, allowing an at-
tacker to controllably seize control of arbitrary physical
memory with very few practical constraints.
We used dFFS to mount practical attacks against
widely used cryptographic systems in production clouds.
Our attacks allow an attacker to completely compromise
co-hosted cloud VMs with relatively little effort. Even
more worryingly, we believe Flip Feng Shui can be used
in several more forms and applications pervasively in the
software stack, urging the systems security community
to devote immediate attention to this emerging threat.
Disclosure
We have cooperated with the National Cyber Security
Centre in the Netherlands to coordinate disclosure of the
vulnerabilities to the relevant parties.
Acknowledgements
We would like to thank our anonymous reviewers
for their valuable feedback.
This work was sup-
ported by Netherlands Organisation for Scientiﬁc Re-
search through the NWO 639.023.309 VICI “Dowsing”
project, Research Council KU Leuven under project
C16/15/058, the FWO grant G.0130.13N, and by the
European Commission through projects H2020 ICT-32-
2014 “SHARCS” under Grant Agreement No. 644571
and H2020 ICT-2014-645622 “PQCRYPTO”.
References
[1] DDR4 Rowhammer mitigation.
http:
//www.passmark.com/forum/showthread.
php?5301-Rowhammer-mitigation&p=19553.
Accessed on 17.2.2016.
[2] Troubleshooting
Errors
–
MemTest86.
http://www.memtest86.com/
troubleshooting.htm. Accessed on 17.2.2016.
Memory
[3] David Adrian, Karthikeyan Bhargavan, Zakir Du-
rumeric, Pierrick Gaudry, Matthew Green, J. Alex
Halderman, Nadia Heninger, Drew Springall, Em-
manuel Thomé, Luke Valenta, Benjamin Vander-
Sloot, Eric Wustrow, Santiago Zanella Béguelin,
and Paul Zimmermann.
Imperfect Forward Se-
crecy: How Difﬁe-Hellman Fails in Practice.
CCS’15, 2015.
[4] Barbara P. Aichinger. DDR Compliance Testing -
In JEDEC’s Server Memory
Its time has come!
Forum, 2014.
[5] Andrea Arcangeli. Transparent hugepage support.
KVM Forum, 2010.
[6] Andrea Arcangeli, Izik Eidus, and Chris Wright.
Increasing memory density by using KSM.
OLS’09, 2009.
[7] JEDEC Solid State Technology Association. Low
Power Double Data 4 (LPDDR4). JESD209-4A,
Nov 2015.
[8] Antonio Barresi, Kaveh Razavi, Mathias Payer, and
Thomas R. Gross. CAIN: Silently Breaking ASLR
in the Cloud. WOOT’15, 2015.
[9] Dan Boneh, Richard A. DeMillo, and Richard J.
Lipton. On the importance of eliminating errors in
cryptographic computations. J. Cryptology, 14(2),
2001.
[10] Shekhar Borkar. Designing Reliable Systems from
Unreliable Components: The Challenges of Tran-
sistor Variability and Degradation.
IEEE Micro,
25(6), 2005.
USENIX Association  
25th USENIX Security Symposium  15
15
[11] Erik Bosman and Herbert Bos. Framing signals—a
return to portable shellcode. SP’14.
[12] Erik Bosman, Kaveh Razavi, Herbert Bos, and
Cristiano Giuffrida. Dedup Est Machina: Memory
Deduplication as an Advanced Exploitation Vector.
SP’16, 2016.
[13] Cyril Bouvier, Pierrick Gaudry, Laurent
Im-
and Emmanuel Thomé.
bert, Hamza Jeljeli,
Discrete logarithms
in GF(p) – 180 digits.
https://listserv.nodak.edu/cgi-bin/wa.
exe?A2=ind1406&L=NMBRTHRY&F=&S=&P=3161.
June 2014.
Evans.
2014
The
edition).
[23] Chris
byte,
googleprojectzero.blogspot.nl/2014/
08/the-poisoned-nul-byte-2014-edition.
html. Accessed on 17.2.2016.