### Memory Management and Security Vulnerabilities

An attacker can release vulnerable memory pages to the allocator, create a page with the same contents as the victim page, and wait for a merge operation. In a near-out-of-memory (OOM) situation, the merge operation occurs almost instantly, causing the host kernel to predictably reuse one of the previously released vulnerable memory pages (i.e., templates) to back the existing duplicate pages (the crafted page and the victim page). At this stage, the attacker effectively has a memory massaging primitive.

#### Improved Design
To enhance the strawman design, the host must ensure that sufficient memory is available to avoid predictable physical memory reuse patterns. Given a desired level of entropy \( h \) and the number of merged pages \( m_i \) for the \( i \)-th VM, the host needs to guarantee that \( A = 2^h + \max(m_i) \) memory pages are available or can easily become available (e.g., from the page cache) to the kernel’s page allocator at all times. With an appropriate choice of \( h \), it becomes difficult for an attacker to control the behavior of the memory deduplication system. The study of the right parameters for \( h \) and the projected \( A \) for real systems is left for future work. Balancing entropy, memory, and performance while supporting a truly random and deduplication-enabled physical memory allocator is challenging but a promising direction for future research.

### Mitigating Flip Feng Shui (FFS) at the Software Layer

The attacks presented in this paper highlight that even the most security-sensitive software packages used in production do not account for attacker-controlled bit flips in their threat models. Based on our experience, we suggest several improvements to current practices:

- **Integrity Checks**: Security-sensitive information should be checked for integrity in software immediately before use to minimize the window of corruption. In all cases we analyzed, such checks would be placed on a slow path with minimal impact on application performance.
- **Certificate Chain Formats**: Formats like X.509 automatically include integrity checks since certificates are always signed. This is a significant side benefit of a certification chain with self-signatures.
- **File System Integrity**: Due to the presence of the page cache, the file system should not be trusted. Sensitive information on stable storage should include integrity or authenticity information (e.g., a security signature) for verification purposes. This simple defense mechanism would prevent the two dFFS attacks presented in this paper.
- **Kernel Optimizations**: Low-level operating system optimizations should be implemented with caution. Recent studies show that benign kernel optimizations such as transparent huge pages, vsyscall pages, and memory deduplication can become dangerous tools in the hands of a capable attacker. For FFS, any feature allowing an untrusted entity to control the layout or reuse of data in physical memory can provide an attacker with a memory massaging primitive to mount attacks.

### Related Work

We categorize related work into three distinct groups:

#### Rowhammer Exploitation
Pioneering work on the Rowhammer bug warned about its potential security implications. Seaborn published the first concrete Rowhammer exploits, including escaping the Google Native Client (NaCl) sandbox and escalating local privileges on Linux. Seaborn's privilege escalation exploit relied on a weak form of memory massaging by probabilistically forcing an OOMing kernel to reuse physical pages released from user space. In contrast, dFFS relies on a deterministic memory massaging primitive to map pages from co-hosted VMs and mount fully reliable attacks. Additionally, while mapping pages from kernel space for local privilege escalation is possible, dFFS enables a broader range of attacks over nearly arbitrary physical memory.

Seaborn's exploits used Intel x86's CLFLUSH instruction to evict a cache line from CPU caches. In response, CLFLUSH was disabled in NaCl, and a similar solution was suggested for native CPUs via a microcode update. Gruss et al. showed that double-sided Rowhammer can be performed from the browser without CLFLUSH and pagemap, using cache eviction sets and transparent huge pages (THP). Our previous work implemented the first reliable Rowhammer exploit in the Microsoft Edge browser, inducing a bit flip in the control structure of a JavaScript object to pivot to an attacker-controlled counterfeit object, providing arbitrary memory read and write primitives inside the browser.

All these attacks assume the attacker already controls the physical memory of the victim. This paper demonstrates that, by abusing modern memory management features, this assumption can be lifted, leading to alarming consequences. Using FFS, an attacker can seize control of nearly arbitrary physical memory in the software stack, compromising co-hosted VMs without software vulnerabilities.

#### Memory Massaging
Sotirov demonstrated the power of controlling virtual memory allocations in JavaScript, bypassing many protections against memory errors with a technique called Heap Feng Shui. Mandt showed that it is possible to control reuse patterns in the Windows 7 kernel heap allocator to bypass default memory protections against heap-based attacks. Inspired by these techniques, our Flip Feng Shui (FFS) demonstrates that an attacker can abuse benign and widespread memory management mechanisms, making a single bit flip a surprisingly dangerous attack primitive over physical memory.

Memory spraying techniques allocate a large number of objects to make the memory layout predictable for exploitation, similar to FFS. Govindavajhala and Appel sprayed the entire memory of a machine with specially-crafted Java objects, showing that 70% of bit flips caused by rare events like cosmic rays allow them to escape the Java sandbox. This attack is probabilistic and, unlike FFS, does not allow for fully controllable exploitation.

Memory deduplication side channels have been abused to craft sophisticated information disclosure attacks. This paper shows that memory deduplication has even stronger security implications, as FFS can abuse it to perform attacker-controlled page-table updates and craft a memory massaging primitive for reliable hardware bit flip exploitation.

#### Breaking Weakened Cryptosystems
Fault attacks were introduced in cryptography by Boneh et al., highly effective against RSA implementations using the Chinese Remainder Theorem. Seifert considered attacks where faults were introduced in the RSA modulus, limited to forging signatures. Brier et al. extended this to methods for recovering the private key, considering a setting of uncontrollable faults and requiring many hundreds to thousands of faults.

In our attack setting, the attacker can choose the location and observe the modulus, substantially reducing the overhead. For Difﬁe-Hellman, the risk of using moduli that are not strong primes or hard-to-factor integers was well understood and debated extensively during the RSA versus DSA controversy in the early 1990s. Van Oorschot and Wiener showed how a group order with small factors can interact badly with the use of small Difﬁe-Hellman exponents. The Logjam attack in 2015 raised new interest in the potential weaknesses of Difﬁe-Hellman parameters.

This paper performs a formal cryptanalysis of RSA public keys in the presence of bit flips. Our evaluation of dFFS with bit-flipped default 2048-bit RSA public keys confirmed our theoretical results. dFFS can induce bit flips in RSA public keys and factorize 99% of the resulting 2048-bit keys given enough Rowhammer-induced bit flips. We also showed that we could factor 4.2% of the two 4096-bit Ubuntu Archive Automatic Signing Keys with a bit flip, generating enough templates to trick a victim VM into installing our packages. For completeness, we included a formal cryptanalysis of Difﬁe-Hellman exponents in the presence of bit flips in Appendix A.

### Conclusions
Hardware bit flips are commonly perceived as a source of production software failures with limited exploitation power. This paper challenges this belief by demonstrating that an attacker armed with Flip Feng Shui (FFS) primitives can mount devastatingly powerful end-to-end attacks, even in the absence of software vulnerabilities. Our FFS implementation (dFFS) combines hardware bit flips with novel memory templating and massaging primitives, allowing an attacker to controllably seize control of arbitrary physical memory with few practical constraints.

We used dFFS to mount practical attacks against widely used cryptographic systems in production clouds, allowing an attacker to completely compromise co-hosted cloud VMs with relatively little effort. We believe Flip Feng Shui can be used in several more forms and applications pervasively in the software stack, urging the systems security community to devote immediate attention to this emerging threat.

### Disclosure
We have cooperated with the National Cyber Security Centre in the Netherlands to coordinate the disclosure of the vulnerabilities to the relevant parties.

### Acknowledgements
We thank our anonymous reviewers for their valuable feedback. This work was supported by the Netherlands Organisation for Scientific Research through the NWO 639.023.309 VICI “Dowsing” project, Research Council KU Leuven under project C16/15/058, the FWO grant G.0130.13N, and by the European Commission through projects H2020 ICT-32-2014 “SHARCS” under Grant Agreement No. 644571 and H2020 ICT-2014-645622 “PQCRYPTO”.

### References
[1] DDR4 Rowhammer mitigation. http://www.passmark.com/forum/showthread.php?5301-Rowhammer-mitigation&p=19553. Accessed on 17.2.2016.
[2] Troubleshooting Errors – MemTest86. http://www.memtest86.com/troubleshooting.htm. Accessed on 17.2.2016.
[3] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick Gaudry, Matthew Green, J. Alex Halderman, Nadia Heninger, Drew Springall, Emmanuel Thomé, Luke Valenta, Benjamin VanderSloot, Eric Wustrow, Santiago Zanella Béguelin, and Paul Zimmermann. Imperfect Forward Secrecy: How Difﬁe-Hellman Fails in Practice. CCS’15, 2015.
[4] Barbara P. Aichinger. DDR Compliance Testing - In JEDEC’s Server Memory Forum, 2014.
[5] Andrea Arcangeli. Transparent hugepage support. KVM Forum, 2010.
[6] Andrea Arcangeli, Izik Eidus, and Chris Wright. Increasing memory density by using KSM. OLS’09, 2009.
[7] JEDEC Solid State Technology Association. Low Power Double Data 4 (LPDDR4). JESD209-4A, Nov 2015.
[8] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R. Gross. CAIN: Silently Breaking ASLR in the Cloud. WOOT’15, 2015.
[9] Dan Boneh, Richard A. DeMillo, and Richard J. Lipton. On the importance of eliminating errors in cryptographic computations. J. Cryptology, 14(2), 2001.
[10] Shekhar Borkar. Designing Reliable Systems from Unreliable Components: The Challenges of Transistor Variability and Degradation. IEEE Micro, 25(6), 2005.
[11] Erik Bosman and Herbert Bos. Framing signals—a return to portable shellcode. SP’14.
[12] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector. SP’16, 2016.
[13] Cyril Bouvier, Pierrick Gaudry, Laurent Imbert, Hamza Jeljeli, and Emmanuel Thomé. Discrete logarithms in GF(p) – 180 digits. https://listserv.nodak.edu/cgi-bin/wa.exe?A2=ind1406&L=NMBRTHRY&F=&S=&P=3161. June 2014.
[23] Chris Evans. The Poisoned Nul Byte, 2014 edition. https://googleprojectzero.blogspot.nl/2014/08/the-poisoned-nul-byte-2014-edition.html. Accessed on 17.2.2016.