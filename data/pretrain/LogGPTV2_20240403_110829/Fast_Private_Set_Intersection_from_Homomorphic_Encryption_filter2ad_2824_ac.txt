If the sender only has an encryption of y, it needs to compute at worst the product ryNx , which requires
a circuit of depth (cid:100)log2(Nx + 1)(cid:101). Now if the encryptions c(i,j) are already given to the sender, then we
can separate the sender’s computation into two steps. First, the sender computes an encryption of yi for all
0 ≤ i ≤ Nx. The sender needs to compute at worst a product of (cid:98)log2(Nx)/(cid:96)(cid:99) + 1 terms, requiring a circuit of
depth (cid:100)log2((cid:98)log2(Nx)/(cid:96)(cid:99) + 1)(cid:101). In an extreme case, if the receiver gives the sender encryptions of all powers
of y up to yNx, the depth in this step becomes zero. Then, the sender computes a dot product of encryptions
of yi (0 ≤ i ≤ Nx) with the vector of coeﬃcients (r, raNx−1, . . . , ra0) in plaintext from its own data. This
second step has multiplicative depth one.
The cost of windowing is in increased communication. The communication from the receiver to the sender
is increased by a factor of (2(cid:96) − 1)((cid:98)log2(Nx)/(cid:96)(cid:99) + 1), and the communication back from the sender to the
receiver does not change.
It is easy to incorporate batching and hashing methods with windowing. The only diﬀerence is that
batching and hashing eﬀectively reduce the sender’s set size by nearly a factor of n. More precisely, the depth
of the circuit becomes (cid:100)log2((cid:98)log2(B)/(cid:96)(cid:99) + 1)(cid:101) + 1, where B is as in Figure 2. Without windowing, batching
and hashing encode the entire set Y into one hash table of size m (cid:38) NY , producing m/n ciphertexts to be
communicated to the sender. With windowing this is expanded to (2(cid:96)− 1)((cid:98)log2(B)/(cid:96)(cid:99) + 1)· m/n ciphertexts.
Finally, we note that security of windowing technique is guaranteed by the IND-CPA security of the
underlying fully homomorphic encryption scheme.
Partitioning Another way to reduce circuit depth is to let the sender partition its set into α subsets, and
perform one PSI protocol execution per each subset. In the basic protocol, this reduces sender’s circuit depth
from (cid:100)log2(Nx + 1)(cid:101) to (cid:100)log2(Nx/α + 1)(cid:101), at the cost of increasing the return communication from sender to
receiver by a factor of α.
Partitioning can be naturally combined with windowing in a way that oﬀers an additional beneﬁt of
reducing the number of homomorphic operations. Recall from Section 4.3 that the sender needs to compute
encryptions of all powers y, . . . , yNx for each of the receiver’s items y. With partitioning, the sender only
needs to compute encryptions of y, . . . , yNx/α, which it can reuse for each of the α partitions. Thus, with
both partitioning and windowing, the sender’s computational cost in the ﬁrst step described in Section 4.3
reduces by a factor of α, whereas the cost in the second step remains the same.
We may combine batching and hashing with partitioning in the following way. The sender performs its
part of the hashing routine (Figure 2) as usual, but splits the contents of its bins (each of size B) into α
parts of equal size, resulting in α tables each with bin size ≈ B/α. It then performs the PSI protocol with
the improvements described in Section 4.1, 4.2, and 4.3 using each of the α hash tables. Now sender’s circuit
depth reduces to (cid:100)log2((cid:98)log2(B/α)/(cid:96)(cid:99) + 1)(cid:101) + 1, where B is as in Figure 2. The communication from the
sender to the receiver is α ciphertexts.
We would like to note that in order to preserve the sender’s security, it is essential that after using simple
hashing to insert its items into the hash table, the sender partitions the contents of the bins—including
empty locations with value (⊥,⊥)—in a uniformly random way. Since in the hashing routine (Figure 2) the
sender inserts its items in random locations within each bin, the correct partitioning can be achieved by
evenly splitting the contents of each bin into α subsets using any deterministic partitioning method.
4.4 Reducing Reply Size via Modulus Switching
Finally, we employ modulus switching (see [BGV12]), which eﬀectively reduces the size of the response
ciphertexts. Modulus switching is a well-known operation in lattice-based fully homomorphic encryption
schemes. It is a public operation, which transforms a ciphertext with encryption parameter q into a ciphertext
encrypting the same plaintext, but with a smaller parameter q(cid:48)  σ(cid:48), then both parties hash
their sets to a smaller representation. First, a random hash function H(cid:48) : {0, 1}σ → {0, 1}σ(cid:48)
is sampled.
Let X(cid:48) = {H(cid:48)(x) | x ∈ X} and Y (cid:48) = {H(cid:48)(y) | y ∈ Y }. Perform the rest of the protocol with (X(cid:48), Y (cid:48), σ(cid:48))
replacing (X, Y, σ), and output the corresponding items in X, Y as the intersection.
(b) [Hashing to bins] The parties perform Figure 2 with parameters h, m, B, and randomly sampled hash
functions H1, ..., Hh : {0, 1}σ−log2 m → {0, 1}log2 m as input. The sender performs Step 1 of Figure 2
with set X to obtain Bx, and the receiver performs Step 2 with Y to obtain By.
2. [Choose FHE parameters] The parties agree on parameters (n, q, t) for an IND-CPA secure FHE scheme
3. [Choose circuit depth parameters] The parties agree on the windowing parameter (cid:96) ∈ [1, log2 B] and
with circuit privacy. They choose t to be large enough so that log2 t > σ − log2 m + (cid:100)log2 h(cid:101) + 1.
partitioning parameter α ∈ [1, B] as to minimize the overall cost.
4. [Pre-process X]
(a) [Partitioning] The sender partitions its table By vertically (i.e. by columns) into α subtables
By,1, By,2, . . . , By,α, each having B(cid:48) := B/α columns.
cients of the polynomial(cid:81)
s(x−vs), i.e. it replaces v by Sym(v) = ((−1)j(cid:80)
(b) [Computing coeﬃcients] For each row v of each subtable, the sender replaces the row v with coeﬃ-
s∈S vs)0≤j≤B(cid:48) .
(c) [Batching] For each subtable obtained from the previous step, the sender interprets each of its column
as a vector of length m with elements in Zt. Then the sender batches each vector into m/n plaintext
i,j , 1 ≤ i ≤ m/n,
polynomials. As a result, the r-th subtable is transformed into m/n· B(cid:48) polynomials S(r)
0 ≤ j ≤ B(cid:48).
S⊂[B(cid:48)],|S|=j
(cid:81)
5. [Encrypt Y ]
(a) [Batching] The receiver interprets By as a vector of length m with elements in Zt. It batches this
vector into m/n plaintext polynomials Y 1, ..., Y m/n.
(b) [Windowing] For each batched plaintext polynomial Y computed during Step 5a, the receiver com-
putes the component-wise i · 2j-th powers Y
ciphertexts {ci,j}. The receiver sends these ciphertexts to the sender.
i·2j
, for 1 ≤ i ≤ 2(cid:96) − 1 and 0 ≤ j ≤ (cid:98)log2(B(cid:48))/(cid:96)(cid:99).
(c) [Encrypt] The receiver uses FHE.Encrypt to encrypt each such power, obtaining m/n collections of
6. [Intersect]
(a) [Homomorphically compute encryptions of all powers] For each collection of ciphertexts {ci,j},
the sender homomorphically computes a vector c = (c0, . . . , cB(cid:48) ), such that ck is a homomorphic
ciphertext encrypting Y
. In the end, the sender obtains m/n vectors c1, . . . , cm/n.
k
(b) [Homomorphically evaluate the dot product] The sender homomorphically evaluates
B(cid:48)(cid:88)
j=0
ri,r =
ci[B
(cid:48) − j] · S(r)
i,j ,
for all 1 ≤ i ≤ m/n, and 1 ≤ r ≤ α,
optionally performs modulus switching on the ciphertexts ri,r to reduce their sizes, and sends them
back to the receiver.
7. [Decrypt and get result] For each 1 ≤ r ≤ α, the receiver decrypts all ciphertexts it receives and
concatenates the resulting m/n vectors into one vector Rr of length m. Finally, the receiver outputs
(cid:91)
1≤r≤α
Y ∩ X =
{y ∈ Y : Rr[Loc(y)] = 0} .
Fig. 4: Full protocol.
Malicious behavior When considering malicious behavior our protocol faces several challenges. Most
notable is the sender’s ability to compute an arbitrary function on the receiver’s homomorphically encrypted
dataset. While the sender can not learn additional information directly from the ciphertexts, it is able to
maliciously inﬂuence the correctness of the output, e.g. force the intersection/output to be the receiver’s full
n
q
Name
t
SEAL16384-1 16384 2226 − 226 + 1
8519681 76 (cid:29) 128 bits
8519681 46 (cid:29) 128 bits
SEAL16384-2 16384 2226 − 226 + 1
SEAL16384-3 16384 2189 − 221 + 9 · 215 + 1 8519681 48 (cid:29) 128 bits
8192 2226 − 226 + 1
8519681 46 ≈ 120 bits
SEAL8192-1
8192 2189 − 221 + 9 · 215 + 1 8519681 48 > 128 bits
SEAL8192-2
DBC κ
Table 2: Encryption parameter sets for SEAL v2.1. Security estimates are based on [APS15,Alb17].
set, or more generally f (X) ⊆ X. Eﬃciently preventing such behavior by the sender appears to be extremely
challenging.
For the case of a malicious receiver we need only to consider potential leakage which the receiver can
induce (sender has no output). First, the receiver may provide a set of size greater than Nx due to its ability
to ﬁll vacant slots in the cuckoo hash table. Additionally, the argument that function privacy can easily be
achieved through noise ﬂooding no longer holds due to the receiver being possibly providing ciphertexts with
more noise than expected. As such, the noise level of the response ciphertexts may depend on the sender’s
set, and thereby leak additional information. However, in general we believe that this protocol provides
reasonable protection against a malicious receiver for most practical applications. We leave a more formal
analysis of the malicious setting and potential countermeasures to future work.
When receiver holds the larger set So far we have made the assumption that the receiver’s set size is
much smaller than the sender’s set size. Here we remark that our protocol can be slightly modiﬁed to handle
the opposite case, where the receiver holds the larger set. The idea is that the two parties can perform our
protocol with their roles switched until the last step. At this point, the receiver (who has now been playing
the sender’s role) holds an encryption of a vector v. It samples a random plaintext vector r, and sends back
to the sender an encryption of v + r. The sender decrypts this value, and sends back the plaintext vector
v + r to the receiver, who can compute the ﬁnal result v. This protocol is still secure in the semi-honest
setting, and the communication remains linear in the smaller set and logarithmic in the larger set.
6 Implementation and Performance
6.1 Performance Results
We implemented our PSI protocol described in Figure 4. For fully homomorphic encryption we used SEAL v2.1
[LCP16], which implements the Fan-Vercauteren scheme [FV12] in C++. The parameters for SEAL that we
used are given in Table 2, along with their computational security levels κ, estimated based on the best cur-
rently known attacks [APS15,Alb17]. The column labeled “DBC” refers to the decomposition_bit_count
parameter in SEAL. We note that these parameters are highly optimized for the particular computations
that we perform.
We give detailed computational performance results for our protocol in Table 3 for both single and multi-
threaded execution with 4, 16, and 64 threads. As the receiver’s computation is typically relatively small
compared to the sender’s, we restrict to single-threaded execution on the receiver’s side. Still, it is worth
pointing out that also the receiver’s computation would beneﬁt hugely from multi-threading, when available.
Communication costs for our experiments are given in Table 4. We chose a statistical security level λ = 40,
and a string length σ = 32 bits.
The benchmark machine has two 18-core Intel Xeon CPU E5-2699 v3 @ 2.3GHz and 256GB of RAM.
We perform all tests using this single machine, and simulate network latency and bandwidth using the Linux
tc command. Speciﬁcally, we consider a LAN setting, where the two parties are connected via local host
with 10Gbps throughput, and a 0.2ms round-trip time (RTT). We also consider three WAN settings with
100Mbps, 10Mbps, and 1Mbps bandwidth, each with an 80ms RTT. All times are reported as the average
of 10 trials.
Parameters
Optim.
Nx Ny
FHE parameters α (cid:96)
Sender pre-processing
T = 1
64
Running time (seconds)
Sender online