        blue(buffer+r18, buflen-r18);
    }
}
```
Jeśli się nie myliłem (i nie myliłem się), ta funkcja powinna zachowywać się dokładnie tak jak fukcja z której otrzymaliśmy tracelog.
To jakaś wariacja quicksortu, swoją drogą (nie wiem jaka dokładnie, nie ma to znaczenia przy rozwiązywaniu zadania).
Więc powstał problem - co teraz? Wiedzieliśmy co było wykonane, wiedzieliśmy jak było wykonane, jak możemy z tego odzyskać flagę?
Poszliśmy prawdopodobnie bardzo okrężną drogą, ale ważne że zadziałało ostatecznie. Najpierw postanowiliśmy zaznaczyć 'checkpointy' w funkcji:
```cpp
void blue(char *buffer, int buflen) 
{
    // STARTFX
    if (buflen > 1) {
        // STARTMAIN
        int r18 = 1;
        int r20 = buffer[0];
        int r21;
        for (int r1c = 1; r1c = r20) {
                // SKIP
                continue;
            }
            // SWAP_18_1C
            r21 = buffer[r18];
            buffer[r18] = buffer[r1c];
            buffer[r1c] = r21;
            r18 += 1;
            // ENDFOR
        }
        // AFTERFOR
        r21 = buffer[r18-1];
        buffer[r18-1] = buffer[0];
        buffer[0] = r21;
        blue(buffer, r18-1);
        blue(buffer+r18, buflen-r18);
        // ENDMAIN
    }
    // ENDFX
}
```
Następnie przetworzyliśmy trace.log patrząc tylko na checkpointy:
```python
data = open('log').read().split('\n')
for line in data:
    if '[INFO]00400858' in line:
        print 'STARTFX'
    if '[INFO]00400888' in line:
        print 'STARTMAIN'
    if '[INFO]004008ac' in line:
        print 'STARTFOR'
    if '[INFO]004008cc' in line:
        print 'SWAP_18_1C'
    if '[INFO]00400920' in line:
        print 'FOR_INC'
    if '[INFO]0040092c' in line:
        print 'FOR_CHECK'
    if '[INFO]00400940' in line:
        print 'AFTERFOR'
    if '[INFO]004009bc' in line:
        print 'ENDMAIN'
```
Ostatecznie napisaliśmy (brzydki!) skrypt który podążał logiem i robił dokładnie to samo co było w logu:
```python
log = [x.strip() for x in open('calllog').read().split('\n')]
known = []  # known "facts" about characters in flag
def process(log, il, state):
    if log[il] != 'STARTFX':
        raise 'error'
    il += 1
    if len(state) > 1:
        if log[il] != 'STARTMAIN':
            raise 'error'
        il += 1
        r18 = 1
        for r1c in range(1, len(state)+1):
            if log[il] != 'FOR_CHECK':
                raise 'error'
            il += 1
            if r1c == len(state):
                break
            if log[il] == 'AFTERFOR':
                break
            if log[il] != 'STARTFOR':
                raise 'error'
            il += 1
            if log[il] == 'SWAP_18_1C':
                # we are in 'swap' branch, so buffer[r1c] = state[0]
                known.append([state[0], '= gtr:
                        mx = chr(ord(gtr)-1)
                if gtr == i:    # 'z' = gtr:
                        mx = gtr
                if gtr == i:    # 'z' <= 1
                    if mn <= less:
                        mn = less
        res[i] = [mn, mx]
        if mn == mx:
            for xxx in known:
                if xxx[0] == i:
                    xxx[0] = mn
                if xxx[2] == i:
                    xxx[2] = mn
        else:
            pass
            #possible.append([mn, mx])
for i in range(vars):
    print res[i]
```
Wynik wykonania tego piekielnego skryptu (każda linia oznacza minimalną i maksymalną możliwą wartośc dla każdego znaku):
    ['t', 't']
    ['r', 'r']
    ['1', '1']
    ['3', '3']
    ['5', '5']
    ['m', 'm']
    ['1', '1']
    ['k', 'k']
    ['5', '5']
    ['l', 'l']
    ['9', 'A']
    ['6', '6']
    ['5', '5']
    ['5', '5']
    ['1', '1']
    ['r', 's']
    ['9', '9']
    ['l', 'l']
    ['5', '5']
    ['r', 'r']
Więc zostały tylko 4 możliwości (2 znaki miały po 2 możliwości, reszta była unikalna):
Po prostu bruteforcowaliśmy te 4 możłiwości na panelu do zgłaszania flag, i dostaliśmy nasze dobrze zasłużone 4 punkty.
Naprawdę sporo pracy zrobiliśmy podczas rozwiązywania tego zadania - prawdopodpobnie to nie był najprostszy sposób na rozwiązanie tego.
Jeśli dobrze pamiętam, poprawną flagą z 4 możliwych flag było ostatecznie `0ctf{tr135m1k5l96551s9l5r}`.