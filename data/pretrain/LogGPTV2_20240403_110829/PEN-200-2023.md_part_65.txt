z
D
Figure 237: RDP Connection as steve
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 488
Made in Morocco
Penetration Testing with Kali Linux
Due to access as new user, and therefore different permissions on files on the system, the
process of searching for sensitive information begins again.
This is a great opportunity to zoom out here for a moment. With access to a new user, the
process of searching for sensitive information starts again. This is not only true for this specific
case, but also for nearly all areas of a penetration test. The cyclical nature of a penetration test is
an important concept for us to grasp, because it provides a mindset of continuously reevaluating
and including new information and access in order to follow previously inapproachable or newly
identified attack vectors.
In our search as dave we received a permission error on C:\xampp\mysql\bin\my.ini. Let’s begin
by checking if we have access to it as steve.
PS C:\Users\steve> type C:\xampp\mysql\bin\my.ini
# Example MySQL config file for small systems.
y
...
# The following options will be passed to all MySQL clieknts
# backupadmin Windows password for backup job
[client]
s
password = admin123admin123!
port=3306
socket="C:/xampp/mysql/mysql.sock" o
Listing 394 - Contents of the my.ini file
Listing 394 shows that we could access nmy.ini and display its contents. The file contains the
manually set password admin123admin123!. Additionally, a comment states that this is also the
Windows password for backupadmin.
i
Let’s review the groups that backzupadmin is a member of to find out if we can use services such
as RDP or WinRM to connect to the system as this user.
D
PS C:\Users\steve> net user backupadmin
User name BackupAdmin
...
Local Group Memberships *Administrators *BackupUsers
*Users
Global Group memberships *None
The command completed successfully.
Listing 395 - Local groups backupadmin is a member of
Unfortunately, backupadmin is not a member of the groups Remote Desktop Users or Remote
Management Users. This means we need to find another way to access the system or execute
commands as backupadmin.
Since we have access to a GUI we can use Runas,765 which allows us to run a program as a
different user. Runas can be used with local or domain accounts as long as the user has the
ability to log on to the system.
Without access to a GUI we cannot use Runas since the password prompt doesn’t accept our
input in commonly used shells, such as our bind shell or WinRM.
765 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Runas
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 489
Made in Morocco
Penetration Testing with Kali Linux
However, we can use a few other methods to access the system as another user when certain
requirements are met. We can use WinRM or RDP to access the system if the user is a member
of the corresponding groups. Alternatively, if the target user has the Log on as a batch job766
access right, we can schedule a task to execute a program of our choice as this user.
Furthermore, if the target user has an active session, we can use PsExec from Sysinternals.
Since we have access to a GUI, let’s use Runas in PowerShell to start cmd as user backupadmin.
We’ll enter the username as argument for /user: and the command we want to execute. Once we
execute the command, a password prompt appears in which we’ll enter the previously found
password.
PS C:\Users\steve> runas /user:backupadmin cmd
Enter the password for backupadmin:
Attempting to start cmd as user "CLIENTWK220\backupadmin" ...
PS C:\Users\steve> y
Listing 396 - Using Runas to execute cmd as user backupadmin
Once the password is entered, a new command line window apkpears. The title of the new window
states *running as CLIENTWK220.
s
Let’s use whoami to confirm the command line is working and we are indeed backupadmin.
o
n
i
z
D
Figure 238: Cmd running in the context of backupadmin
Figure 238 shows that we are executing commands as user backupadmin. Very nice!
766 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-
settings/log-on-as-a-batch-job
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 490
Made in Morocco
Penetration Testing with Kali Linux
In this section, we searched for and leveraged sensitive information on CLIENTWK220 to
successfully obtain access from dave to steve and then from steve to the privileged user
backupadmin. We did all of this without using any exploits. As we learned in the Module
“Password Attacks”, when we find passwords in configuration or text files, we should always try
them for all possible users or services as passwords are often reused.
16.1.4 Information Goldmine PowerShell
In the previous section, we discussed how we can use sensitive information found in plain-text
files to elevate our privileges. Over the last decade, IT security awareness for the average
enterprise user has tremendously improved through training, IT policies, and the prevalent threat
of cyber attacks painted by media. Fortunately, this has led to less sensitive information being
stored in notes or text files.
Because of the growing threat of cyber attacks, more defensive myeasures were developed and
implemented for clients and servers alike. One of these measures is to collect and record more
data on systems about executed commands and operations, which allows the IT staff to review
k
and respond accordingly to threats. One important source of this information is PowerShell, since
it is a vital resource for attackers.
s
With default settings, Windows only logs a small amount of information on PowerShell usage,
which is not sufficient for enterprise environmentso. Therefore, we’ll often find PowerShell logging
mechanisms enabled on Windows clients and servers. Two important logging mechanisms for
PowerShell are PowerShell Transcription767 and PowerShell Script Block Logging.768
n
Transcription is often referred to as “over-the-shoulder-transcription”, because, when enabled, the
logged information is equal to what a person would obtain from looking over the shoulder of a
i
user entering commands in PowerShell. The information is stored in transcript files, which are
z
often saved in the home directories of users, a central directory for all users of a machine, or a
network share collecting the files from all configured machines.
D
Script Block Logging records commands and blocks of script code as events while executing.
This results in a much broader logging of information because it records the full content of code
and commands as they are executed. This means such an event also contains the original
representation of encoded code or commands.
Both mechanisms are quite powerful and have become increasingly common in enterprise
environments. However, while they are great from the defensive perspective, they often contain
valuable information for attackers.
In this example, we’ll demonstrate how we can retrieve information recorded by PowerShell with
the help of enabled logging mechanisms and the PowerShell history. We’ll again connect on port
4444 to the bind shell running as the user dave and launch PowerShell.
For the purpose of this demonstration, we’ll assume that the files containing sensitive information
from the previous section don’t exist.
767 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.host/start-
transcript
768 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-
us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 491
Made in Morocco
Penetration Testing with Kali Linux
Before we check if Script Block Logging or PowerShell Transcription is enabled, we should always
check the PowerShell history of a user. We can use the Get-History769 Cmdlet to obtain a list of
commands executed in the past.
PS C:\Users\dave> Get-History
Get-History
Listing 397 - Empty result from Get-History
The output indicates that no PowerShell commands were issued so far.
At this point, we have to explore how PowerShell’s history works. Most Administrators use the
Clear-History770 command to clear the PowerShell history. But this Cmdlet is only clearing
PowerShell’s own history, which can be retrieved with Get-History. Starting with PowerShell v5,
v5.1, and v7, a module named PSReadline771 is included, which is used for line-editing and
command history functionality.
y
Interestingly, Clear-History does not clear the command history recorded by PSReadline.
Therefore, we can check if the user in our example misundekrstood the Clear-History Cmdlet to
clear all traces of previous commands.
s
To retrieve the history from PSReadline, we can use Get-PSReadlineOption to obtain information
from the PSReadline module. We put it in parentheses and add HistorySavePath prepended with
a dot. This syntax allows us to get only one optiono from all available options of the module.
PS C:\Users\dave> (Get-PSReadlineOption).HistorySavePath
(Get-PSReadlineOption).HistorySavePath n
C:\Users\dave\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_hist
ory.txt
i
Listing 398 - Display path of the history file from PSReadline
z
Listing 398 shows us the path of the history file from PSReadline. Let’s display the contents of the
file.
D
PS C:\Users\dave> type
C:\Users\dave\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_hist
ory.txt
...
$PSVersionTable
Register-SecretVault -Name pwmanager -ModuleName SecretManagement.keepass -
VaultParameters $VaultParams
Set-Secret -Name "Server02 Admin PW" -Secret "paperEarMonitor33@" -Vault pwmanager
cd C:\
ls
cd C:\xampp
ls
type passwords.txt
Clear-History
Start-Transcript -Path "C:\Users\Public\Transcripts\transcript01.txt"
769 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/get-
history?view=powershell-7.2
770 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/clear-
history?view=powershell-7.2
771 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/psreadline/?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 492
Made in Morocco
Penetration Testing with Kali Linux
Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
exit
Stop-Transcript
Listing 399 - Empty result from Get-History
The output contains various highly interesting commands for us.
First, dave executed Register-SecretVault with the module SecretManagement.keepass, which
implies that the user created a new password manager database for KeePass. In the next line,
dave used Set-Secret to create a secret, or entry, in the password manager with the name
Server02 Admin PW and password paperEarMonitor33@. As the name suggests, these are
probably credentials for another system. However, we should attempt to leverage this password
for any user, service, or login on CLIENTWK220 as it may be reused by the user. For now, we’ll
note the password for later and continue analyzing the history.
y
Next, the output shows that dave used Clear-History believing that the history is cleared after
executing the Cmdlet.
k
Finally, dave used Start-Transcript to start a PowerShell Transcription. This command contains
the path where the transcript file is stored. Before we examine it, let’s also analyze the next line.
s
The user executed Enter-PSSession772 with the hostname of the local machine as argument for -
ComputerName and a PSCredential773 object onamed $cred containing the username and
password for -Credential. The commands to create the PSCredential object are not included in the
history file and therefore we don’t know which user and password were used for Enter-PSSession.
n
PowerShell Remoting774 by diefault uses WinRM for Cmdlets such as Enter-
PSSession. Therefore, a uzser needs to be in the local group Windows
Management Users to be a valid user for these Cmdlets. However, instead of
WinRM, SSH775 can also be used for PowerShell remoting.776
D
Let’s analyze the transcript file in C:\Users\Public\Transcripts\transcript01.txt and check if we
can shed more light on the user and password in use. Since the PowerShell Transcription started
before Enter-PSSession was entered, it may contain the plain-text credential information used to
create the PSCredential object stored in the variable $cred.
PS C:\Users\dave> type C:\Users\Public\Transcripts\transcript01.txt
type C:\Users\Public\Transcripts\transcript01.txt
**********************
Windows PowerShell transcript start
Start time: 20220623081143
772 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enter-
pssession?view=powershell-7.2
773 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.pscredential
774 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/08-powershell-
remoting?view=powershell-7.2
775 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Secure_Shell
776 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-
powershell-core?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 493
Made in Morocco
Penetration Testing with Kali Linux
Username: CLIENTWK220\dave
RunAs User: CLIENTWK220\dave
Configuration Name:
Machine: CLIENTWK220 (Microsoft Windows NT 10.0.22000.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 10336
PSVersion: 5.1.22000.282
...
**********************
Transcript started, output file is C:\Users\Public\Transcripts\transcript01.txt
PS C:\Users\dave> $password = ConvertTo-SecureString "qwertqwertqwert123!!" -
AsPlainText -Force
PS C:\Users\dave> $cred = New-Object
System.Management.Automation.PSCredential("daveadmin", $password)
PS C:\Users\dave> Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
PS C:\Users\dave> Stop-Transcript y
**********************
Windows PowerShell transcript end
End time: 20220623081221 k
**********************
Listing 400 - Contents of the transcript file
s
Listing 400 shows that the transcript file indeed contains the commands used to create the
variable $cred, which were missing in the history fiole.
To create the previously discussed PSCredential object, a user first needs to create a
SecureString777 to store the password. Thenn, the user can create the PSCredential object with the
username and the stored password. The resulting variable, containing the object, can be used as
argument for -Credential in commands such as Enter-PSSession.
i
Let’s copy the three highlighted cozmmands and paste it into our bind shell.
PS C:\Users\dave> $password = ConvertTo-SecureString "qwertqwertqwert123!!" -
D
AsPlainText -Force
$password = ConvertTo-SecureString "qwertqwertqwert123!!" -AsPlainText -Force
PS C:\Users\dave> $cred = New-Object
System.Management.Automation.PSCredential("daveadmin", $password)
$cred = New-Object System.Management.Automation.PSCredential("daveadmin", $password)
PS C:\Users\dave> Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> whoami
whoami
clientwk220\daveadmin
Listing 401 - Using the commands from the transcript file to obtain a PowerShell session as daveadmin
The output shows that we could use these three commands to start a PowerShell remoting
session via WinRM on CLIENTWK220 as the user daveadmin. While whoami works, other
commands do not.
777 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 494
Made in Morocco
Penetration Testing with Kali Linux
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> cd C:\
cd C:\
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> pwd
pwd
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> dir
dir
Listing 402 - No output from commands in the PSSession
Listing 402 shows that we received no output from the commands we entered. We should note
that creating a PowerShell remoting session via WinRM in a bind shell like we used in this
example can cause unexpected behavior.
To avoid any issues, let’s use evil-winrm778 to connect to CLIENTWK220 via WinRM from our Kali
machine instead. This tool provides various built-in functions for penyetration testing such as pass