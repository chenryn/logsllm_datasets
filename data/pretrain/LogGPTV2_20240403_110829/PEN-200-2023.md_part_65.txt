### Figure 237: RDP Connection as steve
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 488
Made in Morocco
Penetration Testing with Kali Linux

With access to a new user, the process of searching for sensitive information must be restarted due to different file permissions. This is not only applicable in this specific case but also in nearly all areas of a penetration test. The cyclical nature of a penetration test is an important concept to understand, as it fosters a mindset of continuously reevaluating and incorporating new information and access to follow previously inaccessible or newly identified attack vectors.

When we searched as dave, we encountered a permission error on `C:\xampp\mysql\bin\my.ini`. Let's check if we have access to it as steve.

```powershell
PS C:\Users\steve> type C:\xampp\mysql\bin\my.ini
# Example MySQL config file for small systems.
...
# The following options will be passed to all MySQL clients
# backupadmin Windows password for backup job
[client]
password = admin123admin123!
port=3306
socket="C:/xampp/mysql/mysql.sock"
```

**Listing 394 - Contents of the my.ini file**

The file `my.ini` contains the manually set password `admin123admin123!`, which is also the Windows password for the user `backupadmin`.

Next, let’s review the groups that `backupadmin` is a member of to determine if we can use services such as RDP or WinRM to connect to the system as this user.

```powershell
PS C:\Users\steve> net user backupadmin
User name BackupAdmin
...
Local Group Memberships *Administrators *BackupUsers
*Users
Global Group memberships *None
The command completed successfully.
```

**Listing 395 - Local groups backupadmin is a member of**

Unfortunately, `backupadmin` is not a member of the `Remote Desktop Users` or `Remote Management Users` groups, meaning we need to find another way to access the system or execute commands as `backupadmin`.

Since we have access to a GUI, we can use `Runas`, which allows us to run a program as a different user. `Runas` can be used with local or domain accounts as long as the user has the ability to log on to the system. However, without a GUI, `Runas` cannot be used because the password prompt does not accept input in commonly used shells like our bind shell or WinRM.

Alternatively, we can use methods such as WinRM or RDP if the user is a member of the corresponding groups. If the target user has the "Log on as a batch job" right, we can schedule a task to execute a program as this user. If the target user has an active session, we can use `PsExec` from Sysinternals.

Let’s use `Runas` in PowerShell to start `cmd` as `backupadmin`.

```powershell
PS C:\Users\steve> runas /user:backupadmin cmd
Enter the password for backupadmin:
Attempting to start cmd as user "CLIENTWK220\backupadmin" ...
```

**Listing 396 - Using Runas to execute cmd as user backupadmin**

Once the password is entered, a new command line window appears, indicating that we are running as `CLIENTWK220\backupadmin`.

```powershell
PS C:\Users\steve> whoami
CLIENTWK220\backupadmin
```

**Figure 238: Cmd running in the context of backupadmin**

This confirms that we are executing commands as `backupadmin`.

### 16.1.4 Information Goldmine: PowerShell

In the previous section, we leveraged sensitive information found in plain-text files to escalate privileges from `dave` to `steve` and then to the privileged user `backupadmin` without using any exploits. As discussed in the "Password Attacks" module, when passwords are found in configuration or text files, they should always be tried for all possible users or services, as passwords are often reused.

Over the last decade, IT security awareness has improved significantly through training, IT policies, and the prevalent threat of cyber attacks. This has led to less sensitive information being stored in notes or text files. However, more defensive measures have been developed, including enhanced logging mechanisms for systems. One such mechanism is PowerShell, which is a vital resource for both attackers and defenders.

By default, Windows logs a limited amount of information about PowerShell usage, which is insufficient for enterprise environments. Therefore, PowerShell logging mechanisms such as **PowerShell Transcription** and **PowerShell Script Block Logging** are often enabled.

- **Transcription** records the commands and their output, similar to what someone would see by looking over the shoulder of a user entering commands. The information is stored in transcript files, typically in the home directories of users, a central directory, or a network share.
- **Script Block Logging** records the full content of commands and script blocks as they are executed, including encoded code.

Both mechanisms are powerful and common in enterprise environments, providing valuable information for both defense and attack.

For this demonstration, we’ll connect to the bind shell running as `dave` and launch PowerShell. We’ll assume that the files containing sensitive information from the previous section do not exist.

First, let’s check the PowerShell history of the user using the `Get-History` cmdlet.

```powershell
PS C:\Users\dave> Get-History
Get-History
```

**Listing 397 - Empty result from Get-History**

The output indicates that no PowerShell commands were issued so far.

Most administrators use the `Clear-History` cmdlet to clear the PowerShell history. However, starting with PowerShell v5, v5.1, and v7, the `PSReadline` module is included, which handles line-editing and command history. `Clear-History` does not clear the history recorded by `PSReadline`.

To retrieve the history from `PSReadline`, we can use `Get-PSReadlineOption` to obtain the path of the history file.

```powershell
PS C:\Users\dave> (Get-PSReadlineOption).HistorySavePath
C:\Users\dave\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
```

**Listing 398 - Display path of the history file from PSReadline**

Let’s display the contents of the history file.

```powershell
PS C:\Users\dave> type C:\Users\dave\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
$PSVersionTable
Register-SecretVault -Name pwmanager -ModuleName SecretManagement.keepass -VaultParameters $VaultParams
Set-Secret -Name "Server02 Admin PW" -Secret "paperEarMonitor33@" -Vault pwmanager
cd C:\
ls
cd C:\xampp
ls
type passwords.txt
Clear-History
Start-Transcript -Path "C:\Users\Public\Transcripts\transcript01.txt"
Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
exit
Stop-Transcript
```

**Listing 399 - Output from PSReadline history file**

The output contains several interesting commands:

1. `Register-SecretVault` with the module `SecretManagement.keepass` suggests that the user created a new KeePass password manager database.
2. `Set-Secret` creates a secret entry in the password manager with the name `Server02 Admin PW` and password `paperEarMonitor33@`.
3. `Clear-History` was used, but it did not clear the `PSReadline` history.
4. `Start-Transcript` started a PowerShell transcription, and `Enter-PSSession` was used to create a remote PowerShell session.

Let’s analyze the transcript file in `C:\Users\Public\Transcripts\transcript01.txt` to find more details.

```powershell
PS C:\Users\dave> type C:\Users\Public\Transcripts\transcript01.txt
**********************
Windows PowerShell transcript start
Start time: 20220623081143
Username: CLIENTWK220\dave
RunAs User: CLIENTWK220\dave
Configuration Name:
Machine: CLIENTWK220 (Microsoft Windows NT 10.0.22000.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 10336
PSVersion: 5.1.22000.282
...
Transcript started, output file is C:\Users\Public\Transcripts\transcript01.txt
PS C:\Users\dave> $password = ConvertTo-SecureString "qwertqwertqwert123!!" -AsPlainText -Force
PS C:\Users\dave> $cred = New-Object System.Management.Automation.PSCredential("daveadmin", $password)
PS C:\Users\dave> Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
PS C:\Users\dave> Stop-Transcript
**********************
Windows PowerShell transcript end
End time: 20220623081221
**********************
```

**Listing 400 - Contents of the transcript file**

The transcript file shows the commands used to create the `PSCredential` object, which were missing in the history file.

To create the `PSCredential` object, a `SecureString` is first created to store the password, and then the `PSCredential` object is created with the username and stored password.

Let’s copy the highlighted commands and paste them into our bind shell.

```powershell
PS C:\Users\dave> $password = ConvertTo-SecureString "qwertqwertqwert123!!" -AsPlainText -Force
$password = ConvertTo-SecureString "qwertqwertqwert123!!" -AsPlainText -Force
PS C:\Users\dave> $cred = New-Object System.Management.Automation.PSCredential("daveadmin", $password)
$cred = New-Object System.Management.Automation.PSCredential("daveadmin", $password)
PS C:\Users\dave> Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> whoami
whoami
clientwk220\daveadmin
```

**Listing 401 - Using the commands from the transcript file to obtain a PowerShell session as daveadmin**

The output shows that we successfully started a PowerShell remoting session via WinRM on `CLIENTWK220` as the user `daveadmin`.

However, other commands do not produce output.

```powershell
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> cd C:\
cd C:\
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> pwd
pwd
[CLIENTWK220]: PS C:\Users\daveadmin\Documents> dir
dir
```

**Listing 402 - No output from commands in the PSSession**

Creating a PowerShell remoting session via WinRM in a bind shell can cause unexpected behavior. To avoid issues, let’s use `evil-winrm` to connect to `CLIENTWK220` via WinRM from our Kali machine instead. This tool provides various built-in functions for penetration testing.

PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 494
Made in Morocco
Penetration Testing with Kali Linux