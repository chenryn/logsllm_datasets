process every time the execution encounters a new transition
point and terminate at the end of the entry point function.
In Figure 4, for example, the symbolic execution starts over
when reaching a transition point at line 5 in get_next_-
cmd(), with new symbolic-tainted memory buffer com->buf.
Along the path, the execution can reach another transition point
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
62217
Data
Channel
Start
line 5
line 19
line 5
line 29
Path
1
2
3
4
TABLE II: Result example of the symbolic analysis.
End
line 19 WRITE (cmd)
-
line 29
-
Payload
READ (cmd)
Ack
Ch3
Ch3
Ch3
Ch3
Fig. 7: State merging for mass storage gadget.
at line 19 in do_scsi_cmd(). We obtain the concrete values
by solving the constraints com->buf->cmd == WRITE,
which can lead to a state transition from the starting point (line
5) to another transition point (line 19). Table II summarizes
the result of symbolic analysis for the example code, listing
all feasible paths leading to possible state transitions.
State merging. Putting together all the collected results from
the prior analysis, we finalize the state machine construction.
We now have a set of partial state machines (i.e., Sp in
Algorithm 1) from the symbolic execution results — for each
execution of symbolic analysis, its start point and end point
become an entry state and an end state respectively in a new
partial state machine (lines 23-27 in Algorithm 1). At the same
time, the concrete input values would become a transition
trigger between the two states (line 28). By merging the same
states (i.e., the end state of a state machine merges with the
corresponding entry state of another), we connect all the partial
state machines together. Repeating this procedure, we build a
definitive state machine of the gadget (i.e., S).
Figure 7 illustrates the state merging for the motivating
example in Figure 4. In each partial state machine, both
states correspond to transition points, and the transition values
stem from constraint solving. We connect all the partial state
machines via merging the overlapping states while maintaining
their transition values, building a final state machine.
In Figure 8, we take the loopback gadget as another
case. In the example, the gadget simply sends the received
data back to the host, then waits for another data. Using the
generated state machines, we can first pinpoint both transition
and entry points explicitly in the code. Next, we directly track
the relationship between two relevant transitions and retrieve
two states accordingly. Finally, FUZZUSB generates a finite
state machine, i.e., State1–(Ch3:data-IN)–> State2 –(Ch3:data-
OUT)–> State1 .... Note that in each state, the host needs
to feed appropriate inputs in the right order to transition to
the next state. In this way, our static analysis makes the state
machine construction automated and more scalable.
Pstart ← W.pop()
// do symbolic execution until termination or TP
list of {Pend, V} ← SymExec(Pstart, TP)
for each {Pend, V} in list of {Pend, V} do
VP ← {} // initialize list of visited points
Sp ← {} // initialize a set of partial state machines
W ← {} // initialize worklist
W.push(EP)
while W ̸= ∅ do
Algorithm 1 State Machine Construction.
Input: G - target gadget code
Input: TF - transition function
1: function STATICANAL (G, TF)
EP, TP ← Scanning (G) // scan all entry and transition points
2:
Gs ← Slicing (G, EP, TP)
3:
return EP, TP, Gs
4:
5: function SYMBOLICANAL (EP, TP, Gs)
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: function STATEMERGE (Sp)
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31: EP, TP, Gs ← STATICANAL (G, TF)
32: Sp ← SYMBOLICANAL (EP, TP, Gs)
33: S ← STATEMERGE (Sp)
34: return S
Output: S - a gadget state machine
VP ← {}
S ← {} // initialize a state machine
for each {Pstart, Pend, V} in Sp do
for each P in {Pstart, Pend} do
Sp = Sp ∪ {Pstart, Pend, V}
if Pend ̸∈ VP then
VP = VP ∪ Pend
W.push(Pend)
if P ̸∈ VP then
VP = VP ∪ P
AddState(P, S)
AddTransition(V, Pstart, Pend, S)
return Sp
return S
// entry point: global function calls
// request the host for data-OUT
request_to_host (OUT, ..) // Ch3: transition point
1 /* entry point for data-IN */
2 int entry_IN() {
3
4
5 }
6 /* entry point for data-OUT*/
7 int entry_OUT() {
8
9
10 }
// request the host for data-IN
request_to_host (IN, ..) // Ch3: transition point
Fig. 8: Simplied loopback gadget code.
C. Mutation Rules
Although a state transition guided by the state machine could
lead to an actual state transition at runtime as intended, such a
transition may fail in reality due to non-deterministic factors,
such as interrupts, and states of uncontrollable global objects
inside the kernel. We tackle this issue by allowing users to
define additional options to respond to such failures using the
mutation rules.
To facilitate a state-guided fuzzing, FUZZUSB provides a
list of mutation rules to establish a detailed strategy for state-
guided mutation, such as dictating state transition towards a
targeted destination or accommodating a specific gadget testing
requirement. Table III outlines the rules for stateful fuzzing, i.e.,
1) transition interval, 2) coverage guidance, 3) next state target,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
72218
Ch3: payload…wait for SCSI cmdwait for data towriteCh3: WRITEwait for ackCh3: READ…Ch3: ackwait for SCSI cmdwait for ackCh3: READwait for SCSI cmdwait for data to writeCh3: WRITEwait for ack…Ch3: ackCh3: payload…wait for data to writePath1⇪A merged state machinePartial state machinesPath3Path2Path4Rule
R1: Transition interval
R2: Coverage guidance
R3: Next state target
R4: Transition failure handling
Description
period of time between two transitions
state-, or transition-coverage
what to choose for next state
reconnect or try again
Cur
Next
T1:
T2:
T3:
S2
S3
S2
S3
S4
S5
Transition
Ch4: write-keycode
Ch3: read-keycode
Ch4: read-keycode
...
Mutation Rule
R1: 3 sec interval
R2: state-coverage
R3: unexplored first
R4: reconnect
TABLE III: Mutation rules.
and 4) transition failure handling. R1 specifies the transition
interval between two connected states. Users can set a time
value if they want to fuzz USB gadget stacks in each state
for the given amount of time before moving forward to a next
state. R2 determines the method of coverage guidance, i.e.,
either state- or transition-based coverage, as we will explain
later in §IV-E. R3 prioritizes the next target state (or transition,
depending on R2) out of multiple candidates (if there are
multiple states connected to the current state), allowing random
choice or unexplored states first. As a transition may fail for
reasons, R4 defines how to address such a transition failure,
e.g., trying again for a given period of time or closing the
entire connection immediately and starting over. Note that it is
possible to adjust the granularity (fine- or coarse-grained) of
the rules or extend them for other purposes, such as supporting
certain algorithms for state exploration (e.g., DFS/BFS), as
we will discuss in §VII. At runtime, the defined rules will be
passed to the fuzzer determining state-aware input mutation.
D. Multi-channel Fuzzing
As mentioned in §III-A, gadget drivers accept multiple inputs
from different channels at the same time; thus, if a fuzzer does
not consider the roles of different channels (e.g., random input
fuzzers), it is unlikely to achieve high efficiency. FUZZUSB
orchestrates the entire execution of the fuzzing campaign based
on the gadget state — not only steering input mutation but
also distributing inputs into appropriate input channels. To
this end, we rely on gadget state machines (§IV-B) along
with mutation rules (§IV-C). In addition to mutation for state
changes, FUZZUSB exercises a generic mutation guided by
code coverage information within a state. To be effective, we
leverage the results of solved constraints (from prior symbolic
analysis) as input sources, which can help the fuzzer tackle
strong branch conditions [9, 12, 32].
To elaborate on how our state-aware mutation operates, we
step through the input generation procedure using the given
state machine and mutation rule presented in Table IV. While
state machines determine gadget-specific transitions in each
state, mutation rules provide gadget-independent transition
strategies. When reaching a new state — for instance, S2 in
the current state (Cur) —, the fuzzer decides when to trigger
a transition (towards the next state) depending on the mutation
rule R1. Accordingly, a transition will occur in three seconds,
and the fuzzer will ask for the next state by referring to R3 (the
next target) and R2 (coverage guidance). Suppose S5 has been
explored already while S3 has not yet. Then, the fuzzer takes T1
for the transition to trigger and chooses S3 (in Next) as the next
state. Subsequently, it retrieves the corresponding transition
TABLE IV: A simplified state machine for the HID gadget (left) along
with the mutation rule (right). TX and SX denote unique transitions
and states. Cur represents the current state, and Next means the next
state to be transitioned. Transition specifies input values (along with a
relevant input channel) needed to trigger the corresponding transition.
values for the input (i.e., write-keycode in Transition)
from T1 and feeds them into the designated channel Ch4. If
the transition fails, the fuzzer reacts based on the transition
failure option described in R4 and takes action (i.e., reconnect)
accordingly. While staying within a state, the fuzzer performs
a mutation guided by code coverage, similar to a general
coverage-guided fuzzer.
E. State Coverage vs. Transition Coverage
To maximize the benefit from the stateful approach, we
define two coverage metrics with respect to gadget states,
state coverage and transition coverage, which are similar to
block coverage and edge coverage used for code coverage
representation. While the state coverage aims at visiting
all presented states in state machines regardless of their
transitions, the transition coverage attempts to reach all unique
state transitions. The state coverage generally works well
for unidirectional state machines. Since our state machines
are directional, two transitions with opposite directions but
connecting the same two states are considered distinct. The
transition coverage fits better for our case. Nevertheless, as
either metric can work for its own purpose, FUZZUSB allows
users to choose a preferred one in the mutation rule.
V. IMPLEMENTATION
We implemented FUZZUSB prototype atop the syzkaller
kernel fuzzer [16]. We customized its components to make it
suitable for gadget stack fuzzing while piggybacking on the
underlying functionalities of syzkaller, such as code coverage
guided mutation. Specifically, we extended the mutation engine
to deploy our state-aware mutation along with state machines
and support multi-channel input distribution. To enable and
tune the init channel Ch1, we employ ConfigFS interface [27],
allowing user-space code to configure various USB gadgets
from the gadget side. To feed inputs from the host, we devise a
dummy host driver on top of the usbtest kernel module and
use the dummy_udc module for the software bridge between
the host and device with the absence of a physical connection.
Our state machine construction, i.e., static slicing and symbolic
execution, relies on dg llvm slicer [33] with slicing criteria
upon transition points and KLEE [34] (with Z3 solver [35]),
which are all based on LLVM [36]. We customize KCOV [37]
to collect code coverage from kernel threads regardless of
the corresponding user-space applications, while vulnerability
detection operates through KASan [38], UBSan [39], and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
82219
Vendor
P40 Pro
Android kernel
Device
Platform
TBD†
ACK∗
Google
SM-G981U
Galaxy S20
Samsung
LMV600AM V60 ThinQ
LG
Huawei
ELS-AN10
∗ Android Common Kernels
† At the time of submission, this device’s name has not been determined
yet.
5.4 (Android 12)
4.9
4.19
4.9
TABLE V: Specification of Android kernels used for the experiment.
Kmemleak [40] enabled within the kernel. Table X summarizes
our efforts of modifying the tools used in FUZZUSB.
VI. EVALUATION
In this section, we evaluate FUZZUSB from different angles.
First of all, we show that FUZZUSB can find previously-
unknown bugs in USB gadget drivers, and we present a case
study about FUZZUSB’s findings (§VI-A). Then, we evaluate
how the multi-channel and statefulness features of FUZZUSB
contribute to its ability to cover USB gadget driver code
(§VI-B). Lastly, we describe the fuzzing experimental setup,
efficiency, and effectiveness for FreeBSD USB gadget fuzzing
(§VI-C). Note that we also evaluate the efficiency in finding
bugs (§A) and the state machine construction in Appendix
(§B).
Experimental setup. We perform all our evaluations on a
machine with an Intel Xeon E5-4655 2.50GHz CPU and 512
GB RAM running Ubuntu 16.04 LTS with Linux kernel 4.4.0.
We run total 32 virtual machines with KVM on this platform
to benefit from parallel fuzzing executions.
Mutation rules. We choose the best mutation ruleset that
yields the highest coverage growth for our testing dataset.
To obtain the best ruleset, we first performed a preliminary
experiment. Specifically, we tested all the 16 different rule
combinations by applying two options to each of the 4 mutation
rules defined in Table III. Then, we used the best ruleset as
the default in FUZZUSB for the rest of the evaluation. We
describe the details in §VI-B.
Target kernels and gadgets. We base our evaluation on
various gadgets from the latest Linux kernel versions (at the
time of the experiment), ranging from v5.5 to v5.8. We also
test Android gadgets (see §III) coming from different OEM
vendors (as shown in Table V), each of which has its unique
(or customized) vendor-specific gadgets. In total, our evaluation
is based on 28 gadgets (§B). After porting the Android gadgets
to the corresponding mainline kernels, we test all these gadgets
on a single testing platform. To run fuzzing in a single Linux
testing platform, we incorporated the Android USB gadgets
into our fuzzing system. Because Android kernels depend
completely on the Linux kernel, we are able to test all the
Android gadgets in a QEMU-based virtualized environment.
Furthermore, we extended FUZZUSB to cover USB gadget
stacks in FreeBSD. Of 10 gadgets in the mainline FreeBSD
kernel, we used 7 gadgets that implement the callbacks for
UDC drivers in our virtualized fuzzing environment.
Three gadget fuzzers.
Since no USB gadget fuzzer is
available in the wild, we built a baseline fuzzer for com-
parison, G-fuzzer, which is also built on top of syzkaller.
Moreover, to highlight the two main features of FUZZUSB, i.e.,
multi-channel and stateful fuzzing, we incrementally enable
each feature in FuzzUSB-SL (SL: stateless) and FUZZUSB.
Table VI summarizes the specifications of the three fuzzers.
G-fuzzer is featured with code-coverage guidance and is
aware of the main interface to connect with gadget code, e.g.,
a USB host, but agnostic to advanced mutation strategies, such
as multi-channel and stateful fuzzing. G-fuzzer represents
a minimum engineering effort to turn syzkaller into a USB
gadget fuzzer. Note that
in terms of fuzzing scope and
capability, G-fuzzer is at the same level of syzkaller [16]
and USBFuzz [14], but it focuses on the USB gadget stack
instead of the host stack. FuzzUSB-SL is capable of multi-
channel input mutations, but it is still state-agnostic. Lastly, in
FUZZUSB, all the features described in this paper are enabled.
Fuzzer
Interface
-aware
✓
G-fuzzer
FUZZUSB-SL ✓
✓
FUZZUSB
inputs
Code coverage Multi-channel
-guided
✓
✓
✓
✓
✓
State
-guided
✓
TABLE VI: Specification of baseline gadget fuzzers.
A. Bug Discovery
1) New Bug Finding: Based on the above testing envi-
ronment, we ran FUZZUSB extensively and discovered 34