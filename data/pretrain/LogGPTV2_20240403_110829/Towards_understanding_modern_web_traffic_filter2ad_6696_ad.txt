%
(
n
o
i
t
c
a
r
F
 100
 10
 1
 0.1
 0.01
 0.001
short
medium
long
 10
 100
 1
# Embedded Objects Per Page
(b) # of objects
 1000
short
medium
long
 100
 10
 1
 0.1
 0.01
)
%
(
n
o
i
t
c
a
r
F
 0.001
102 103 104 105 106 107 108 109
Total Page Size (byte)
(c) Total size
Figure 11: Characterization of entire Web pages from the United States in 2010: We deﬁne short (0-25th percentile), medium (25-
75th), and long (75-100th) pages by total time. Short pages are bursty and HTML-oriented while long pages are video/binary-oriented
and involve heavy client side interactions.
Default
(1)NoDep
(2)HalfLat
(1)&(2)
y
c
n
e
t
a
L
d
e
z
i
l
a
m
r
o
N
n
a
d
e
M
i
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
Max # Connections per Server
 10
Figure 10: Page loading latency simulation (US, 2010): Increas-
ing the number of simultaneous connections could further re-
duce page load latency by 23%. Removing dependencies be-
tween objects (NoDep) would yield at most a 50% reduction.
Reducing per-object latency by 50% (HalfLat) would actu-
ally reduce page-load latency by 67% because of the simultane-
ous connections. Together, page loading latency can be reduced
by up to 75%.
work idle time during the page loading process. Second, any depen-
dent object is not fetched before its parent object is ﬁnished, which
is less aggressive than current practice, where a browser typically
starts fetching embedded objects as soon as it ﬁnds their URLs.
Figure 10 presents the median simulated latency from the United
States in 2010, as a function of the maximum number of concur-
rent connections per server. We omit the results of other coun-
tries that are very similar to that of the United States. We simulate
four different scenarios, and the latency is normalized by the de-
fault latency with one concurrent connection per server. First, we
observe that increasing the number of concurrent connections per
server would reduce the latency by up to 23% at 8 connections, be-
yond which we see no beneﬁt. Second, we simulate the ideal case
where there is no object dependency (NoDep) – all of the object
URLs are known in advance, and it reduces the latency by up to
50%. Given this latency reduction, it is worth exploring ways to re-
lieve/eliminate the object dependency. Third, if per-object latency
is reduced by half (HalfLat) via better caching/prefetching ap-
proaches, it could actually reduce the page loading latency by up to
61% due to the simultaneous connections. All together, we observe
that page loading latency could be reduced by up to 75%.
Entire Page Characteristics For a simple characterization of mod-
ern Web pages, we divide all of the Web pages including client-
side interactions into three groups based on the total page time –
short (0-25th percentile), medium (25-75th), and long (75-100th)
pages. We then characterize these pages in terms of the number of
embedded objects, page size, object inter-arrival time, and content
type distribution. Figure 11 presents an example characterization
of Web pages from the United States in 2010.
Overall, long pages consume about 55% of total requests, and
medium pages take about 40%. In terms of bytes, long pages take
even more than 60%. Short pages account for only about 5% in
terms of both requests and bytes. The content type distribution in
Figure 11 (a) reveals the characteristics of the pages more clearly.
Short pages are mainly HTML-oriented, and search activities could
be typical examples. On the other hand, long pages show a higher
percentage of video and octet-stream bytes than others, meaning
these are mainly video watching activities and large ﬁle down-
loads. Medium pages lie in between, and typical examples would
be browsing news or blogs.
In terms of the number of embedded objects, short pages mostly
have less than 10 objects, and medium and long pages have a larger
number of embedded objects, as in Figure 11 (b) where we show
PDFs. The median is 4, 12, and 30 for short, medium, and long
pages, respectively. Especially, we observe heavy client-side inter-
actions in long pages. Note that medium pages will often specify
dozens of embedded images in their HTML but as Web sites im-
prove their cacheability best practices, most of these are cached at
the browser, and we observe only a median of 12 fetches for the up-
dated portions of their content. This in part also explains why page
loading latency is improving despite the increase in page complex-
ity.
In addition, Figure 11 (c) shows PDFs of the total page sizes, and
we observe that the median difference is about 3x between short
(40 KB) and medium pages (122 KB), and more than 2x between
medium and long pages (286 KB). Note that long pages have a
very long tail reaching up to 370 MB, while the largest page size
is only about 5 MB for short pages and 13 MB for medium pages.
Finally, we observe that short and medium pages are burstier than
long pages as it does not usually involve client-side interactions.
The median object inter-arrival time is 90, 89, and 114 ms for short,
medium, and long pages, respectively.
5. REDUNDANCY AND CACHING
The last part of our study is to analyze the redundancy in Web
trafﬁc and the impact of caching. For this study, we analyze the
full content of trafﬁc as well as the access logs. Table 2 shows
the summary of our content data set from April, 2010. We capture
cache misses only to account for simple improvements like using
a local proxy cache. Throughout this section, our analysis is based
302s
t
s
e
u
q
e
R
%
 0.3
 0.2
 0.1
 0
100
2006
2008
2010
101
103
102
URL Ranking
104
105
s
t
s
e
u
q
e
R
%
 0.4
 0.3
 0.2
 0.1
 0
100
2006
2008
2010
101
103
102
URL Ranking
104
105
s
L
R
U
e
c
n
O
d
e
s
s
e
c
c
A
%
 88
 86
 84
 82
 80
 78
 76
US
CN
FR
BR
 2006
 2008
Year
 2010
(a) US: Top 100K URLs by % requests
(b) CN: Top 100K URLs by % requests
(c) % accessed once URLs (tail)
Figure 12: URL popularity: The popular URLs grow, but the long tail of the content is also growing.
 100
 75
%
 50
 25
 0
all
ht
m
l
Unique URLs
Requests
Bytes
i
m
a
g
e
o
ctet
a
u
dio
vid
e
o
 100
 75
%
 50
 25
 0
all
ht
m
l
Unique URLs
Requests
Bytes
i
m
a
g
e
o
ctet
a
u
dio
vid
e
o
ja
v
x
m
l
c
s
s
a
s
c
ript
ja
v
x
m
l
c
s
s
a
s
c
ript
(a) US
(b) CN
Figure 13: Uncacheable objects by content types: Overall, 19.8-32.2% of unique URLs, 21.5-28.3% of total requests, and 10.5-14.8%
of total bytes are uncacheable. HTML and JavaScript are dynamically generated and thus less cacheable.
# Requests (K)
Volume (GB)
USA
8,611
198
China
12,036
218
France
2,129
42
Brazil
4,018
79
Table 2: Summary of captured full content data (cache-misses
only)
on logically centralized but physically distributed proxy systems,
just like CoDeeN.
We ﬁrst provide the details of content-based caching in Sec-
tion 5.1. Using the access log data, we examine the changes in
URL popularity during the ﬁve-year period in Section 5.2. Us-
ing the full content data, we directly compare the effectiveness of
object-based caching and content-based caching in Section 5.3, and
quantify the origins of redundancy in Section 5.4. We also calculate
the actual byte hit rates with practical cache storage sizes in Sec-
tion 5.5. Finally, we analyze the characteristics of aborted transfers,
and discuss its caching implications in Section 5.6.
5.1 Content-based Caching
At a high level, content-based caching works by splitting an ob-
ject or ﬁle into many smaller chunks, and caching those chunks
instead of an entire object. The chunk boundaries are determined
based on the content, commonly with Rabin ﬁngerprinting [48] – if
the ﬁngerprinting value over a sliding window of data matches with
low order n bits of a predeﬁned constant K, this region of data con-
stitutes a chunk boundary. The expected average chunk size is 2n
byte assuming a uniform distribution of content values. To prevent
chunks from being too small or large in a pathological case, we
specify the minimum and maximum size of chunks as well. Unlike
ﬁxed-size chunking (e.g., every 1 KB), content-based chunking is
robust to any insertion/deletion/modiﬁcation to the content since it
only affects nearby chunks.
Once chunk boundaries are detected, chunks are named based on
the content, often with SHA-1 hash. The next time the system sees
the same chunk, it can pass only a reference instead of the original
content. This way, content-based caching could ﬁnd the same con-
tent within an object and across different objects, yielding much
higher cache hit rates than object-based caching. Furthermore, it is
protocol independent and effective for uncacheable content as well.
5.2 URL Popularity
We investigate the underlying changes in URL popularity during
the ﬁve-year period with our access log data set, which directly in-
ﬂuences the caching effectiveness. We ﬁnd two interesting trends.
First, we observe that the popular URLs are getting more popular
as in Figure 12 (a) and (b) where we present the request percent-
age of the top 100,000 URLs in the United States and China. The
request trafﬁc to most popular URL increases from 0.08-0.12% in
2006 to 0.28-0.41% in 2010, and this concentration would increase
the cache hit rate. The most popular URL in the United States
for 2010 is a dynamically generated beacon object from google.
com, which is uncacheable, though. At the same time, we also ﬁnd
that the percentage of URLs that are accessed only once is con-
sistently increasing as in Figure 12 (c). We see its increase from
76.9-83.3% in 2006 to 84.6-87.8% in 2010. Overall, they account
for a signiﬁcant amount of trafﬁc – 30.0-48.8% of total requests
and 27.3-63.9% of total bytes. These least popular URLs are all
cache-misses and would decrease the cache hit rate.
While these two trends in URL popularity could affect cache hit
rate both positively and negatively, we do not observe any consis-
tent changes in resulting cache hit rate during the ﬁve-year period.
This is because they cancel out each other, and cache hit rate is
also determined by other factors such as user population. In order
to get an upper bound on object-based cache hit rate with our ac-
cess log data set, we assume every object is cacheable, and two ob-
jects are identical (cache hit) once their URLs and content lengths
303HTTP
HTTP-OPT
64-KB
8-KB
1-KB
128-B
)
%
(
e
t
a
R
t
i
H
e
t
y
B
 50
 40
 30
 20
 10
 0
US
CN
Country
FR
BR
Figure 14: Ideal cache hit rate with inﬁnite cache storage:
Content-based caching with 128-bytes chunks achieves almost
2x larger byte hit rate than object-based HTTP caching.
match. The estimated cache hit rate we observe ranges from 35.6%
to 54.5%, and the byte hit rate ranges from 15.1% to 49.3%. The
byte hit rate is smaller than the cache hit rate because cache hits are
biased towards relatively smaller objects. In fact, we observe that
the mean object size of those URLs that are accessed only once
is always larger than the mean object size of those URLs that are
accessed more than once over the ﬁve years.
5.3 Caching Effectiveness
In this section, we ﬁrst investigate HTTP cacheability of the traf-
ﬁc, and calculate the ideal cache hit rate. We then compare the ef-
fectiveness of object-based and content-based caching on our full
content data, and further examine the impact of content types.
HTTP Cacheability We examine HTTP cacheability of objects
with our full content data from 2010. We decide if an object is
cacheable or not by looking at its Cache-Control and Pragma
ﬁelds in the response header. Figure 13 shows the percentage of
uncacheable objects in terms of the number of unique URLs, total
requests, and total bytes. Overall, 19.8-32.2% of unique URLs are
uncacheable, and it accounts for 21.5-28.3% of total requests and
10.5-14.8% of total bytes. Among different content types, HTML
and JavaScript are less cacheable than other content types, implying
that they are dynamically generated and updated frequently. Even
though the low fraction of uncacheable trafﬁc implies substantial
potential for caching, the actual cache hit rates would be severely
limited due to the growing fraction of URLs that are accessed only
once.
We also observe a few other interesting points. First, a signiﬁcant
portion of XML trafﬁc (over 70%) in China is uncacheable, and it
turns out to be due to the popular use of Really Simple Syndication
(RSS) [52] feeds – two RSS URLs are responsible for 90.8% of
total uncacheable bytes and 64.8% of total uncacheable requests.
Second, Brazil (not shown) shows a higher fraction of uncacheable
XML and audio trafﬁc than other countries. This is due to the pop-
ular use of real time update of sports games and live streaming of