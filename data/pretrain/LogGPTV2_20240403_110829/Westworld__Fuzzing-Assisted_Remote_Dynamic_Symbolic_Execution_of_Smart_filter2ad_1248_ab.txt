(Line 4), it keeps the value of x, but changes the value of y to make
y ≥ 10, which results in x = 2, and y = 20.
Example 3. In Example 2, the return variable of sysAPI is compared
to a symbolic input, while here the return variable is compared to a
constant value. Thus the solution above—i.e., by keeping the value
of x and changing the value of y to reverse the result of (y  3)∧(O.m ==
8); but it is unclear which value of x makes O.m == 8.
Our Insight. Most symbolic inputs (user inputs and environment
variables, such as temperature, humidity, and home modes) of smart
apps usually have a small to moderate number of possible values.
E.g., “humidity” has 101 integer values between 0 and 100. This is
different from general programs, where their inputs usually have
an infinite or huge number of possible values.
Main Idea. Exploiting this uniqueness, we propose selective code-
segment fuzzing to handle API calls that return TSVs. Note that if
a TSV is an object, then its field—which is primitive/string type—
will be involved in path conditions. For each (field of) TSV in the
symbolic path condition, we identify the symbolic inputs it relies
on, called influential symbolic inputs (ISIs). E.g., in Figure 7(a), O is
a TSV, and relies on x, where x is an ISI (highlighted).
Based on the ISIs, we determine a code segment in the app
code, and create a seg-fuzzing app, where a for-loop is inserted
surrounding the code segment to iterate over values of the ISIs and
learn a code-segment summary expressed as the relation between
the (field of) TSV and ISIs. For example, through fuzzing we find