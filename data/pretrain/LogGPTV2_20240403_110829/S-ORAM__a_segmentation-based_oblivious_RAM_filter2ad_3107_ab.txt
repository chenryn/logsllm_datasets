negligibly small, i.e., O(N
− log N ).
4. SCHEME
4.1 Overview
The design of S-ORAM is motivated by the observation that a
large-scale storage system usually stores data in blocks and such a
block typically has a large size. To the best of our knowledge, most
existing ORAM constructions treat data blocks as atomic units for
query and shufﬂing, and do not factor block size into their designs.
The recently proposed index-based ORAM constructions [5, 16–
19] have used large-size blocks to store indices to improve index
search efﬁciency; still, more opportunities wait to be explored to
fully utilize this feature.
S-ORAM is designed to make better use of the large block size to
improve the efﬁciency in data shufﬂing and query, which are two
critical operations in an ORAM system. Speciﬁcally, we propose
the following two segment-based techniques:
• Piece-wise Shufﬂing. In S-ORAM, each data block is seg-
mented into smaller pieces, and in a shufﬂing process, data is
shufﬂed in the unit of pieces rather than blocks. As we know,
data shufﬂing has to be performed at the user-side storage in
order to achieve obliviousness. With the same size of user-
side storage, shufﬂing data in pieces rather than blocks en-
ables data perturbation across a larger range of blocks. This
way, the shufﬂing efﬁciency can be improved, and the im-
provement gets more signiﬁcant as the block size increases.
• Segment-based Query. To improve query efﬁciency, S-ORAM
organizes the data storage at the server side as a hierarchy of
single-segment and multi-segment layers. In each segment,
an encrypted index block (with the same size as a data block)
is introduced to maintain the mapping between data block
IDs and their locations within the segment. This way, when
a user needs to access a block in a segment, he/she only needs
to access two blocks - the index block and the intended block.
By adopting this technique together with supplementary al-
gorithms for distributing blocks to segments, S-ORAM can
accomplish efﬁcient query with only O(log N ) communica-
tion overhead and a constant user-side storage, while existing
ORAM constructions have to use a larger user-side storage to
achieve the same level of communication efﬁciency in query.
The following sections elaborate the details of the proposed S-
ORAM construction, emphasizing on the above two techniques.
4.2 Storage Organization and Initialization
4.2.1 Data Block Format
Similar to existing ORAMs, S-ORAM stores data in blocks, and a
data block is the basic unit for read/write operations by the user.
A plain-text data block can be split into pieces and each piece is
z = log N bits long, where N is the total number of data blocks.
The ﬁrst piece contains the ID of the data block, say i, which is also
denoted as di;1. The remaining pieces store the content of the data
block, denoted as di;2, di;3, ··· , di;P−1. Before being exported
to the remote storage server, the plain-text data block is encrypted
piece by piece with a secret key k, as shown in Figure 1:
ci;0 = Ek(ri), where ri is a random number;
ci;1 = Ek(ri ⊕ di;1);
ci;2 = Ek(ci;1 ⊕ di;2);
··· ,
ci;P−1 = Ek(ci;P−2 ⊕ di;P−1).
(1)
Thus, the encrypted data block (denoted as Di and hereafter called
data block for brevity) has the following format:
Di = (ci;0, ci;1, ci;2,··· , ci;P−1).
It contains P pieces and has Z = z · P bits.
(2)
Figure 1: Format of a data block in S-ORAM.
Server-side Storage
4.2.2
S-ORAM stores data at the remote server in a pyramid-like struc-
ture as shown in Figure 2. The top layer, called layer 1, is an array
containing at most four data blocks. The rest of the layers are di-
vided into two groups as follows.
idi=1,2,id1,-PidiDbitszbitsz1,ic2,ic1,-Pic0,icbitsir)((cid:215)kE3,ic3,idPlain-text Block)((cid:215)kE)((cid:215)kE)((cid:215)kE)((cid:215)kE)(PzZ(cid:215)=Zblocks. Therefore, the index block of a segment has at most 3 log2 N
entries. As each entry contains three ﬁelds: ID of the data block
(needing log N bits), location of the data block in the segment
(needing log(3 log2 N ) bits), and access bit, an index block needs
at most 3 log2 N [log N + log(3 log2 N ) + 1] bits. In practice, with
N ≤ 236 which is considered large enough to accommodate most
practical applications, the size of an index block is less than 32 KB,
which can ﬁt into a typical data block assumed in the existing stud-
ies of practical ORAM schemes [18].
4.2.3 User-side Storage
The user organizes its local storage into two parts: cache (tempo-
rary storage) and permanent storage. Cache is used to buffer and
process (including encrypt and decrypt) data blocks downloaded
from the server. We assume that the size of the cache is αZ bits
where α is a constant. In the S-ORAM design presented in this
section, we set α = 2. This design can be conveniently adapted
to other conﬁgurations of cache size, as will be discussed in Sec-
tion 5.3.
Permanent storage stores the user’s secret information, including
(i) a query counter keeping track of the number of queries that have
been issued, (ii) a secret key k, and (iii) a one-way hash function
Hl(·) for each T2-layer l, which maps a data block to one of the
segments belonging to the layer. Note that, the size of permanent
storage is much smaller than that of the cache, since only several
hundreds of bits are needed to store the query counter, secret key,
and hash functions.
4.2.4
The user initializes the S-ORAM system as follows:
Storage Initialization
• It randomly selects a secret key k and a one-way hash func-
tion HL2 (·) of layer L2, i.e., the bottom layer.
• N plain-text data blocks are encrypted into blocks Di where
i = 1,··· , N with the secret key k in the format illustrated
by Figure 1. In addition, 2N dummy blocks are randomly
generated and encrypted also with key k.
• N real data blocks and 2N dummy blocks are uploaded to
layer L2 of the server storage in a delicate manner to ensure
that (i) each real data block Di of unique ID i is distributed
to segment HL2 (i) at layer L2, (ii) each segment is assigned
with exactly 3 log2 N data blocks, and (iii) data blocks dis-
tributed to the same segment are randomly placed within the
segment. Note that, a process like data shufﬂing elaborated
in Section 4.4.4 can be adopted to distribute and place the
data blocks to satisfy the above properties.
4.3 Data Query
As formally described in Algorithm 1, the process for querying a
data block Dt of ID t consists of the following four phases.
In Phase I, the user retrieves and decrypts all data blocks stored at
layer 1, attempting to ﬁnd Dt in the layer.
In Phase II, each non-empty T1-layer l is accessed sequentially.
Speciﬁcally, the index block Il of the layer is ﬁrst retrieved and de-
crypted, and then one of the following two operations is performed:
• If Dt has not been found at any layer prior to layer l and
Il indicates that Dt is at layer l, record the location where
Figure 2: Organization of the server-side storage.
Figure 3: Structure of a T1-layer.
T1 (Tier 1) Layers: Single-Segment Layers. T1-layers refer to
those between (inclusive) layer 2 and layer L1 = ⌊2 log log N⌋. As
illustrated in Figure 3, each T1-layer consists of a single segment,
which includes an encrypted index block Il and 2l+1 data blocks.
Among the data blocks, at most half of them are real data blocks
as formatted in Figure 1, while the rest are dummy blocks each
with ID 0 and randomly-stuffed content. The index block has 2l+1
entries; each entry corresponds to a data block in the segment which
consists of three ﬁelds: ID of the data block, location of the data
block in the segment, and access bit indicating whether the block
has been accessed since it was placed to the location.
T2 (Tier 2) Layers: Multi-Segment Layers. T2-layers refer to those
between (inclusive) layer L1 + 1 and layer L2, where L2 = log N.
⌉ segments, and each T2-
Each T2-layer consists of Wl = ⌈
layer segment has the same format as a T1-layer segment except
that a T2-layer segment contains 3 log2 N data blocks.
log2 N
2l
Note that, in the above storage structure, a segment (regardless
whether at a T1-layer or T2-layer) contains at most 3 log2 N data
……ILayer ……DDDDDDDDDD32IDDD112+L1LLayer Layer 12Layer 11+L……IDD……IDD………………Layer 2L……IDD……IDD……N2log3(cid:215)(single-segment layers)Tier 1(multi-segment layers)Tier 2=++NWLL211log211N2log3(cid:215)=NNWL2log2segmentssegments…DD……lIDDD121-+lDData IDLocationAccess bit1506420…20501,205c2,205c1,205-Pc0,205c090012000…12+lEncrypted with keykAlgorithm 1 Query data block Dt of ID t.
1: f ound ← f alse
/* Phase I: access layer 1 */
else
end if
/* Phase II: access T1-layers */
/* Phase III: access T2-layers */
Randomly pick a dummy Dt′ with access bit 0
Set the access bit of Dt′ to 1 in Il
Re-encrypt & upload Il
Retrieve Dt′
Re-encrypt & upload Dt′
Retrieve & decrypt Il – index block of the layer
if (f ound = f alse ∧ t ∈ Il) then
Set the access bit of Dt to 1 in Il
Re-encrypt & upload Il
Retrieve & decrypt Dt
Encrypt & upload a dummy block D
f ound ← true
2: Retrieve & decrypt blocks in layer 1
3: if Dt is found in layer 1 then f ound ← true
4: for each non-empty layer l ∈ {2,··· , L1} do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end for
20: for each non-empty layer l ∈ {L1 + 1,··· , L2} do
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40: end for
Set the access bit of Dt to 1 in I s
l
Re-encrypt & upload I s
l
Retrieve & decrypt Dt
Encrypt & upload a dummy block D
f ound ← true
s ← Hl(t)
s is randomly picked from {0,··· , Wl − 1}
Randomly ﬁnd a dummy Dt′ with access bit 0
Set the access bit of Dt′ to 1 in I s
l
Re-encrypt & upload I s
l
Retrieve Dt′
Re-encrypt & upload Dt′
end if
Retrieve & decrypt I s
if (f ound = f alse ∧ t ∈ I s
l – index block of segment s
if (f ound = f alse) then
l ) then
/* Phase IV: wrap up */
Encrypt & append a dummy block D to layer 1
41: if (Dt is found in layer 1) then
42:
43: else
44:
45: end if
Re-encrypt & append Dt to layer 1
else
else
end if
Dt resides, set the access bit of the location to 1, and re-
encrypt and upload Il to save cache space. Then, retrieve Dt.
Meanwhile, a dummy block D is generated and uploaded to
the location where Dt was retrieved.
• Otherwise, the location of a dummy block Dt′ whose access
bit in Il is 0 (i.e., it has not been accessed since last time
it was distributed to its current location) is randomly picked
and recorded. After the block’s access bit is set to 1 in Il,
Il is re-encrypted and uploaded. Then, Dt′ is retrieved, re-
encrypted, and uploaded to its original location.
In Phase III, each non-empty T2-layer l is accessed sequentially as
follows.
l before I s
l
• If Dt has not been found at any layer prior to layer l, segment
s = Hl(t) of layer l is picked to access. The index block
l of the segment is ﬁrst retrieved and decrypted to check
I s
whether Dt is at this segment. If so, the access bit of Dt
is set to 1 in I s
is encrypted and uploaded; then,
Dt is retrieved, a dummy block is generated and uploaded
to Dt’s original location. Else, the user randomly selects a
dummy block Dt′ in this segment whose access bit in I s
l is
0; after the access bit of Dt′ is set to 1, I s
l is re-encrypted and
uploaded; then, Dt′ is retrieved, re-encrypted and uploaded.
• If Dt has already been found at a layer prior to layer l, a seg-
ment is randomly selected from layer l and the user randomly
selects a dummy block Dt′ in this segment whose access bit
is re-
in I s
l
encrypted and uploaded. Then, Dt′ is retrieved, re-encrypted
and uploaded.
is 0. After the access bit of Dt′ is set to 1, I s
l
Finally in Phase IV, the user wraps up the query process to ensure
that Dt is at layer 1, i.e., the top layer. To achieve this, the user
ﬁrst checks whether Dt has been found at layer 1. If so, encrypt
a dummy block D and append it to layer 1; otherwise, Dt is re-
encrypted and appended to layer 1.
4.4 Data Shufﬂing
A critical step in S-ORAM is data shufﬂing which is used to perturb
data block locations. It may occur at all layers of the storage hier-
archy. Speciﬁcally, data shufﬂing at layer l (l = 2,··· , L2 − 1) is
triggered when the total number of queries that have been processed
is an odd multiple of 2l (i.e., a multiple of 2l but not a multiple of