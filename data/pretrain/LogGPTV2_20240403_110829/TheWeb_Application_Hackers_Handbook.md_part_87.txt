Figure 18-5: A successful attack using the JMX console to deploy a backdoor WAR file
onto a JBoss server
cc1188..iinndddd 667755 88//1199//22001111 1122::1177::5522 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 676
676 Chapter 18 n Attacking the Application Server
The built-in Deployment Scanner then automatically deploys the Trojan
WAR fi le to the JBoss Application Server. After it is deployed, it can be accessed
within the newly created cmdshell application, which in this instance contains
only cmdshell.jsp:
http://wahh-app.com:8080/cmdshell/cmdshell.jsp?c=cmd%20/
c%20ipconfig%3Ec:\foo
NOTE The resolution to this issue was to restrict the GET and POST methods to
administrators only. This was easily bypassed simply by issuing the request just
shown using the HEAD method. (Details can be found at www.securityfocus
.com/bid/39710/.) As with any confi guration-based vulnerability, tools such
as Metasploit can exploit these various JMX vulnerabilities with a high degree of
reliability.
Oracle Applications
The enduring example of powerful default functionality arises in the PL/SQL
gateway implemented by Oracle Application Server and can be seen in other
Oracle products such as the E-Business Suite. The PL/SQL gateway provides
an interface whereby web requests are proxied to a back-end Oracle database.
Arbitrary parameters can be passed to database procedures using URLs like
the following:
https://wahh-app.com/pls/dad/package.procedure?param1=foo&param2=bar
This functionality is intended to provide a ready means of converting business
logic implemented within a database into a user-friendly web application. However,
because an attacker can specify an arbitrary procedure, he can exploit the PL/
SQL gateway to access powerful functions within the database. For example, the
SYS.OWA_UTIL.CELLSPRINT procedure can be used to execute arbitrary database
queries and thereby retrieve sensitive data:
https://wahh-app.com/pls/dad/SYS.OWA_UTIL.CELLSPRINT?P_THEQUERY=SELECT+
*+FROM+users
To prevent attacks of this kind, Oracle introduced a fi lter called the PL/SQL
Exclusion List. This checks the name of the package being accessed and blocks
attempts to access any packages whose names start with the following expressions:
SYS.
DBMS_
UTL_
cc1188..iinndddd 667766 88//1199//22001111 1122::1177::5522 PPMM
76 Stuttard c18.indd V2 - 07/28/2011 Page 677
Chapter 18 n Attacking the Application Server 677
OWA_
OWA.
HTP.
HTF.
This fi lter was designed to block access to powerful default functionality
within the database. However, the list was incomplete and did not block access
to other powerful default procedures owned by DBA accounts such as CTXSYS
and MDSYS. Further problems were associated with the PL/SQL Exclusion List,
as described later in this chapter.
Of course, the purpose of the PL/SQL gateway is to host specifi c packages
and procedures, and many of the defaults have since been found to contain
vulnerabilities. In 2009, the default packages forming part of the E-Business
Suite proved to contain several vulnerabilities, including the ability to edit
arbitrary pages. The researchers give the example of using icx_define_pages
.DispPageDialog to inject HTML into the administrator’s landing page, execut-
ing a stored cross-site scripting attack:
/pls/dad/icx_define_pages.DispPageDialog?p_mode=RENAME&amp;p_page_id=[page_id]
HACK STEPS
1. Tools such as Nikto are effective at locating much default web content.
The application mapping exercises described in Chapter 4 should have
identified the majority of default content present on the server you are
targeting.
2. Use search engines and other resources to identify default content and
functionality included within the technologies known to be in use. If feasi-
ble, carry out a local installation of these, and review them for any default
functionality that you may be able to leverage in your attack.
Directory Listings
When a web server receives a request for a directory, rather than an actual fi le,
it may respond in one of three ways:
n It may return a default resource within the directory, such as index.html.
n It may return an error, such as the HTTP status code 403, indicating that
the request is not permitted.
n It may return a listing showing the contents of the directory, as shown
in Figure 18-6.
cc1188..iinndddd 667777 88//1199//22001111 1122::1177::5522 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 678
678 Chapter 18 n Attacking the Application Server
Figure 18-6: A directory listing
In many situations, directory listings do not have any relevance to security. For
example, disclosing the index to an images directory may be inconsequential.
Indeed, directory listings are often disclosed intentionally because they provide
a built-in means of navigating around sites containing static content, as in the
example illustrated. Nevertheless, there are two main reasons why obtaining
directory listings may help you attack an application:
n Many applications do not enforce proper access control over their func-
tionality and resources and rely on an attacker’s ignorance of the URLs
used to access sensitive items (see Chapter 8).
n Files and directories are often unintentionally left within the web root of
servers, such as logs, backup fi les, and old versions of scripts.
In both of these cases, the real vulnerability lies elsewhere, in the failure to
control access to sensitive data. But given that these vulnerabilities are extremely
prevalent, and the names of the insecure resources may be diffi cult to guess,
the availability of directory listings is often of great value to an attacker and
may lead quickly to a complete compromise of an application.
cc1188..iinndddd 667788 88//1199//22001111 1122::1177::5533 PPMM
78 Stuttard c18.indd V2 - 07/28/2011 Page 679
Chapter 18 n Attacking the Application Server 679
HACK STEPS
For each directory discovered on the web server during application mapping,
make a request for just this directory, and identify any cases where a directory
listing is returned.
NOTE In addition to the preceding case, where directory listings are directly
available, vulnerabilities have been discovered within web server software
that can be exploited to obtain a directory listing. Some examples of these are
described later in this chapter.
WebDAV Methods
WebDAV is a term given to a collection of HTTP methods used for Web-based
Distributed Authoring and Versioning. These have been widely available since
1996. They have been more recently adopted in cloud storage and collaboration
applications, where user data needs to be accessed across systems using an
existing fi rewall-friendly protocol such as HTTP. As described in Chapter 3,
HTTP requests can use a range of methods other than the standard GET and POST
methods. WebDAV adds numerous others that can be used to manipulate fi les
on the web server. Given the nature of the functionality, if these are accessible
by low-privileged users, they may provide an effective avenue for attacking an
application. Here are some methods to look for:
n PUT uploads the attached fi le to the specifi ed location.
n DELETE deletes the specifi ed resource.
n COPY copies the specifi ed resource to the location given in the Destination
header.
n MOVE moves the specifi ed resource to the location given in the Destination
header.
n SEARCH searches a directory path for resources.
n PROPFIND retrieves information about the specifi ed resource, such as
author, size, and content type.
You can use the OPTIONS method to list the HTTP methods that are permitted
in a particular directory:
OPTIONS /public/ HTTP/1.0
Host: mdsec.net
HTTP/1.1 200 OK
Connection: close
Date: Sun, 10 Apr 2011 15:56:27 GMT
cc1188..iinndddd 667799 88//1199//22001111 1122::1177::5533 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 680
680 Chapter 18 n Attacking the Application Server
Server: Microsoft-IIS/6.0
MicrosoftOfficeWebServer: 5.0_Pub
X-Powered-By: ASP.NET
MS-Author-Via: MS-FP/4.0,DAV
Content-Length: 0
Accept-Ranges: none
DASL: 
DAV: 1, 2
Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIN
D, PROPPATCH, LOCK, UNLOCK, SEARCH
Allow: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK
Cache-Control: private
This response indicates that several of the powerful methods listed previously
are in fact allowed. However, in practice these may require authentication or be
subject to other restrictions.
The PUT method is particularly dangerous. If you upload arbitrary fi les within
the web root, the fi rst target is to create a backdoor script on the server that will
be executed by a server-side module, thereby giving the attacker full control of
the application, and often the web server itself. If the PUT method appears to be
present and enabled, you can verify this as follows:
PUT /public/test.txt HTTP/1.1
Host: mdsec.net
Content-Length: 4
test
HTTP/1.1 201 Created
...
Note that permissions are likely to be implemented per directory, so recursive
checking is required in an attack. Tools such as DAVTest, shown next, can be
used to iteratively check all directories on the server for the PUT method and
determine which fi le extensions are allowed. To circumvent restrictions on using
PUT to upload backdoor scripts, the tool also attempts to use PUT followed by
the MOVE method:
C:\>perl davtest.pl -url http://mdsec.net/public -directory 1 -move -quiet
MOVE .asp FAIL
MOVE .shtml FAIL
MOVE .aspx FAIL
davtest.pl Summary:
Created: http://mdsec.net/public/1
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.php
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.html
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.cgi
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.cfm
cc1188..iinndddd 668800 88//1199//22001111 1122::1177::5533 PPMM
80 Stuttard c18.indd V2 - 07/28/2011 Page 681
Chapter 18 n Attacking the Application Server 681
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.jsp
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.pl
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.txt
MOVE/PUT File: http://mdsec.net/public/1/davtest_UmtllhI8izy2.jhtml
Executes: http://mdsec.net/public/1/davtest_UmtllhI8izy2.html
Executes: http://mdsec.net/public/1/davtest_UmtllhI8izy2.txt
TRY IT!
http://mdsec.net/public/
TIP For WebDAV instances where end users are permitted to upload fi les, it
is relatively common for uploading server-side scripting language extensions
specifi c to that server’s environment to be forbidden. The ability to upload
HTML or JAR fi les is much more likely, and both of these allow attacks against
other users to be conducted (see Chapters 12 and 13).
HACK STEPS
To test the server’s handling of different HTTP methods, you will need to use
a tool such as Burp Repeater, which allows you to send an arbitrary request
with full control over the message headers and body.
1. Use the OPTIONS method to list the HTTP methods that the server states
are available. Note that different methods may be enabled in different
directories.
2. In many cases, methods may be advertised as available that you cannot in
fact use. Sometimes, a method may be usable even though it is not listed
in the response to the OPTIONS request. Try each method manually to
confirm whether it can in fact be used.
3. If you find that some WebDAV methods are enabled, it is often easiest to
use a WebDAV-enabled client for further investigation, such as Microsoft
FrontPage or the Open as Web Folder option within Internet Explorer.
a. Attempt to use the PUT method to upload a benign file, such as a
text file.
b. If this is successful, try uploading a backdoor script using PUT.
c. If the necessary extension for the backdoor to operate is being
blocked, try uploading the file with a .txt extension and using the
MOVE method to move it to a file with a new extension.
d. If any of the preceding methods fails, try uploading a JAR file, or a file
with contents that a browser will render as HTML.
e. Recursively step through all the directories using a tool such as
davtest.pl.
cc1188..iinndddd 668811 88//1199//22001111 1122::1177::5533 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 682
682 Chapter 18 n Attacking the Application Server
The Application Server as a Proxy
Web servers are sometimes confi gured to act as forward or reverse HTTP proxy
servers (see Chapter 3). If a server is confi gured as a forward proxy, depending on its
confi guration, it may be possible to leverage the server to perform various attacks:
n An attacker may be able to use the server to attack third-party systems on
the Internet, with the malicious traffi c appearing to the target to originate
from the vulnerable proxy server.
n An attacker may be able to use the proxy to connect to arbitrary hosts on
the organization’s internal network, thereby reaching targets that cannot
be accessed directly from the Internet.
n An attacker may be able to use the proxy to connect back to other services
running on the proxy host itself, circumventing fi rewall restrictions and
potentially exploiting trust relationships to bypass authentication.
You can use two main techniques to cause a forward proxy to make onward
connections. First, you can send an HTTP request containing a full URL includ-
ing a hostname and (optionally) a port number:
GET http://wahh-otherapp.com:80/ HTTP/1.0
HTTP/1.1 200 OK
...
If the server has been confi gured to forward requests to the specifi ed host, it
returns content from that host. Be sure to verify that the content returned is not
from the original server, however. Most web servers accept requests containing
full URLs, and many simply ignore the host portion and return the requested
resource from within their own web root.
The second way of leveraging a proxy is to use the CONNECT method to specify
the target hostname and port number:
CONNECT wahh-otherapp.com:443 HTTP/1.0
HTTP/1.0 200 Connection established
If the server responds in this way, it is proxying your connection. This second
technique is often more powerful because the proxy server now simply forwards
all traffi c sent to and from the specifi ed host. This enables you to tunnel other
protocols over the connection and attack non-HTTP–based services. However,
most proxy servers impose narrow restrictions on the ports that can be reached
via the CONNECT method and usually allow only connections to port 443.
The available techniques for exploiting this attack are described in Server-
Side HTTP Redirection (Chapter 10).
cc1188..iinndddd 668822 88//1199//22001111 1122::1177::5533 PPMM
82 Stuttard c18.indd V2 - 07/28/2011 Page 683
Chapter 18 n Attacking the Application Server 683
HACK STEPS
1. Using both GET and CONNECT requests, try to use the web server as a
proxy to connect to other servers on the Internet and retrieve content
from them.
2. Using both techniques, attempt to connect to different IP addresses and
ports within the hosting infrastructure.
3. Using both techniques, attempt to connect to common port numbers on the
web server itself by specifying 127.0.0.1 as the target host in the request.
Misconfi gured Virtual Hosting
Chapter 17 described how web servers can be confi gured to host multiple web-
sites, with the HTTP Host header being used to identify the website whose
content should be returned. In Apache, virtual hosts are confi gured as follows:
ServerName eis
DocumentRoot /var/www2
In addition to the DocumentRoot directive, virtual host containers can be used
to specify other confi guration options for the website in question. A common con-
fi guration mistake is to overlook the default host so that any security confi guration
applies to only a virtual host and can be bypassed when the default host is accessed.
HACK STEPS
1. Submit GET requests to the root directory using the following:
n The correct Host header.
n An arbitrary Host header.
n The server’s IP address in the Host header.
n NoHost header.
2. Compare the responses to these requests. For example, when an IP
address is used in the Host header, the server may simply respond with
a directory listing. You may also find that different default content is
accessible.
3. If you observe different behavior, repeat your application mapping exer-
cises using the Host header that generated different results. Be sure to
perform a Nikto scan using the -vhost option to identify any default con-
tent that may have been overlooked during initial application mapping.
cc1188..iinndddd 668833 88//1199//22001111 1122::1177::5533 PPMM