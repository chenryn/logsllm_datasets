### 2.1 Security Model

In our security model, we consider protocols where only one participant in a session may be authenticated. This model captures both unilateral and mutual authentication of participants. We follow the approach in [Brz13, BFWW11] and model security using two games: one for key indistinguishability and another for matching.

**Key Indistinguishability Game:**
- **Objective:** Ensure that session keys appear random and are indistinguishable from truly random keys.
- **Refinements:**
  - **Key (In)dependence:** The relationship between session keys at different stages.
  - **(Stage-j) Forward Secrecy:** The property that session keys remain secure even if long-term secrets are exposed, starting from a certain stage \( j \).
  - **Unilateral or Mutual Authentication:** Whether one or both participants in a session are authenticated.

**Matching Game:**
- **Objective:** Ensure straightforward security guarantees such as:
  - Identical keys in partnered sessions.
  - Authenticity of the communication partner.
  - Collision-freeness of session identifiers.

### 2.2 Preliminaries

We denote by \( U \) the set of identities used to model the participants in the system. Each participant is identified by some \( U \in U \) and associated with a long-term public key \( pk_U \) and a corresponding secret key \( sk_U \). Sessions of a protocol are uniquely identified using a label \( label \in LABELS = U \times U \times \mathbb{N} \), where \( (U, V, k) \) indicates the \( k \)-th local session of identity \( U \) (the session owner) with \( V \) as the intended communication partner.

For each session, a tuple with the following information is maintained as an entry in the session list \( List_S \):

- **label** \( \in LABELS \): The session label.
- **U** \( \in U \): The session owner.
- **V** \( \in U \): The communication partner.
- **role** \( \in \{\text{initiator}, \text{responder}\} \): The role of the session owner in this session.
- **kid_U**: The key identifier of the session owner.
- **kid_V**: The key identifier of the communication partner.
- **stexec** \( \in (\text{RUNNING} \cup \text{ACCEPTED} \cup \text{REJECTED}) \): The state of execution, with default value \( \text{running}_0 \). Here, \( \text{RUNNING} = \{\text{running}_i | i \in \mathbb{N}_0\} \), \( \text{ACCEPTED} = \{\text{accepted}_i | i \in \mathbb{N}\} \), and \( \text{REJECTED} = \{\text{rejected}_i | i \in \mathbb{N}\} \).
- **stage** \( \in \{0, \ldots, M\} \): The current stage, with default value \( 0 \). The maximum stage \( M \) is fixed for ease of notation but can be arbitrarily large.
- **sid** \( \in (\{0, 1\}^* \cup \{\bot\})^M \): The session identifiers, with default value \( (\bot)^M \). \( sid_i \) indicates the session identifier in stage \( i \neq 0 \).
- **K** \( \in (\{0, 1\}^* \cup \{\bot\})^M \): The established session keys, with default value \( (\bot)^M \). \( K_i \) indicates the established session key in stage \( i \neq 0 \).
- **stkey** \( \in \{\text{fresh}, \text{revealed}\}^M \): The states of the session keys, with default value \( (\text{fresh})^M \). \( stkey_i \) indicates the state of the session key in stage \( i \neq 0 \).
- **tested** \( \in \{\text{true}, \text{false}\}^M \): The test indicator, with default value \( (\text{false})^M \). \( tested_i = \text{true} \) means that \( K_i \) has been tested.

By convention, if we add a partly specified tuple \( (label, U, V, role, kid_U, kid_V) \) to \( List_S \), the other tuple entries are set to their default values.

We identify key material used within one or several protocol executions by a unique administrative key identifier \( kid \), pointing to an entry in the key list \( List_K \), which stores the following information:

- **kid**: The key identifier.
- **U** \( \in U \): The identity associated with this key.
- **tpk**: A temporary public key.
- **tsk**: The corresponding temporary secret key.

As labels and key identifiers are unique, we use shorthand notations like \( label.sid \) for the element \( sid \) in the tuple with label \( label \) in \( List_S \), and \( kid.tpk \) for the element \( tpk \) in the tuple with key identifier \( kid \) in \( List_K \).

### 2.3 Adversary Model

We consider a probabilistic polynomial-time (PPT) adversary \( A \) who controls the communication between all parties, enabling interception, injection, and dropping of messages. We distinguish three orthogonal security aspects of a multi-stage key exchange scheme: key dependence, forward secrecy, and authentication.

**Key Dependence:**
- **Key-Dependent Protocols:** The session key \( K_{i+1} \) of stage \( i+1 \) depends on the session key \( K_i \) of the previous stage \( i \) in a way that disclosure of \( K_i \) before \( K_{i+1} \) has been established compromises the latter.
- **Key-Independent Protocols:** The session keys do not depend on each other.
- **Example:** Google's QUIC protocol is key-dependent, while SSL/TLS with resumption is key-independent.

**Forward Secrecy:**
- **Non-Forward-Secret Protocols:** Established session keys become insecure if long-term secrets are exposed.
- **Stage-j-Forward-Secret Protocols:** Session keys established at stage \( i \geq j \) remain secure even if long-term secrets are exposed, while keys at stages \( i < j \) become insecure.

**Adversary Queries:**

- **Reveal(label, i):** Reveals the session key \( K_i \) of stage \( i \) in the session with label \( label \).
  - If \( i > \text{stage} \) or \( \text{tested}_i = \text{true} \), return \( \bot \).
  - Otherwise, set \( \text{stkey}_i \) to revealed and provide the adversary with \( K_i \).
  - If there is a partnered session \( (label', V, U, role', kid_V, kid_U, stexec', \text{stage}', sid', K', stkey', tested') \) with \( \text{sid}_i = \text{sid}'_i \) and \( \text{stage}' \geq i \), set \( \text{stkey}'_i \) to revealed as well.
  - In the case of key-dependent security, set \( \text{stkey}_j = \text{revealed} \) for all \( j > i \) in the session and partnered sessions.

- **Corrupt(U):** Provides the long-term secret key \( (sk_U, pk_U) \) to the adversary.
  - No further queries are allowed to sessions owned by \( U \).
  - In the non-forward-secret case, set \( \text{stkey}_i \) to revealed for all \( i \in \{1, \ldots, M\} \).
  - In the stage-j-forward-secret case, set \( \text{stkey}_i \) to revealed only if \( i < j \) or \( i > \text{stage} \).

- **Test(label, i):** Tests the session key \( K_i \) of stage \( i \) in the session with label \( label \).
  - If there is no tuple \( (label, U, V, role, kid_U, kid_V, stexec, \text{stage}, sid, K, stkey, tested) \) in \( List_S \) or if \( \text{stexec} \neq \text{accepted}_i \), return \( \bot \).
  - If there is a partnered session \( (label', V, U, role', kid_V, kid_U, stexec', \text{stage}', sid', K', stkey', tested') \) with \( \text{sid}_i = \text{sid}'_i \) but \( \text{stexec}' \neq \text{accepted}_i \), return \( \bot \).
  - If \( \text{tested}_i = \text{true} \), return \( K_i \).
  - In the case of unilateral authentication, if \( \text{role} = \text{responder} \) and there is no tuple \( (label', V, U, role', kid_V, kid_U, stexec', \text{stage}', sid', K', stkey', tested') \) in \( List_S \) with \( \text{sid}_i = \text{sid}'_i \) and \( \text{role}' = \text{initiator} \), return \( \bot \).
  - Otherwise, set \( \text{tested}_i \) to true. If the test bit \( b_{\text{test}} = 0 \), sample \( K_i \) randomly from the session key distribution \( D \). If there is a partnered session, update \( K'_i \) similarly.

### 2.4 Security Flavors Hierarchy

The hierarchy of multi-stage security flavors includes key-independent (KI) and key-dependent (KD), stage-n-forward-secret (n-FS) and non-forward-secret (NFS), as well as mutual authentication (M) and unilateral authentication (U) for a multi-stage key exchange protocol with \( M \) stages. A solid arrow from \( A \) to \( B \) denotes that \( A \) implies \( B \), while dotted arrows indicate omitted intermediate flavors.

```
KI,1-FS,M
KI,2-FS,M
...
KI,M-FS,M
KI,NFS,M
KI,1-FS,U
KI,2-FS,U
...
KI,M-FS,U
KI,NFS,U
KD,1-FS,M
KD,2-FS,M
...
KD,M-FS,M
KD,NFS,M
KD,1-FS,U
KD,2-FS,U
...
KD,M-FS,U
KD,NFS,U
```

This structured approach ensures that the text is clear, coherent, and professionally presented.