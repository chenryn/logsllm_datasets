DDoS Black and White 
“Kungfu” Revealed 
(DEF CON 20 Edition)
{Tony Miu (aka MT),
Anthony Lai (aka Darkfloyd),
Alan Chung (aka Avenir),
Kelvin Wong (aka Captain)}
Valkyrie-X Security Research Group 
(VXRL)
Disclaimer
• There is no national secrets leaked here. 
• Welcome to all national spies 
• No real attacks are launched
• Please take it at your own risk. We can't 
save you from the jail 
Agenda
• Members introduction
• Research and Finding
– Part 1: Layer-7 DoS vulnerability analysis 
and discovery.
– Part 2: Powerful Zombie
– Part 3: Defense Model
Biographies
Tony Miu (aka MT) 
•Apart from a being a researcher at VXRL, MT currently 
holds the post of Deputy SOC Manager at Nexusguard 
Limited, a global provider of premium end to end web 
security solutions that specializes in Anti-DDoS & web 
application security services.  Throughout his tenure, MT 
has been at the forefront of the cyber war zone - 
responding to and mitigating myriads of cyber attacks that 
comes in all forms and manners targeted at crushing their 
clients' online presence.
•MT's task is clearly critical.  It is therefore imperative that 
MT be well versed in the light and dark sides of DDoS 
attack methodologies and undertakes many leading role in 
both DDoS kungfu and defense model projects.
Biographies
Anthony Lai (aka Darkfloyd)
• focuses on reverse engineering and malware 
analysis as well as penetration testing. His 
interest is always falling on CTF and analyzing 
targeted attacks. 
• He has spoken in Black Hat USA 2010, DEF 
CON 18 and 19, AVTokyo 2011, Hack In Taiwan 
2010 and 2011 and Codegate 2012. 
• His most recent presentation at DEF CON was 
about APT Secrets in Asia.
Biographies
Alan Chung (aka Avenir)
• Avenir has more than 8 years working 
experience on Network Security. He currently is 
working as a Security Consultant for a 
Professional Service provider. 
• Alan specializes in Firewall, IDS/IPS, network 
analysis, pen-test, etc. Alan’s research interests 
are Honeypots, Computer Forensics, 
Telecommunication etc. 
Biographies
Kelvin Wong (aka Captain)
• Works in law enforcement over 10 years 
responsible for forensics examination and 
investigation; research and analysis.
• Deals with various reported criminal cases 
about Hacking, DDoS and network 
intrusion;
• A real frontline officer fights against the 
criminals and suspects. 
Research and Findings
Research Methodology
• We have applied Layer 7 techniques for 
DoS:
– HTTP GET and POST methods
– Malformed HTTP
– HTTP Pipelining
– Manipulate TCP x HTTP vulnerabilities
Techniques Overview : Pre-Attack
• Find out any HTTP allowed methods
• Check whether a site accepts POST method as well 
even it accepts GET method in the Web form
• Check out any resources-intensive function like 
searching and any function related to database retrieval.
• Check out any HTTP response with large payload 
returned from the request. 
• Check out any links with large attachment including .doc 
and .pdf files as well as media (.mp4/mp3 files) (i.e. 
JPEG could be cached)
• Check whether HTTP response is cached or not
• Check whether chunked data in HTTP response packet 
from the target is allowed.
Techniques Overview : 
Attack Techniques
Attack Combo #1:
• Manipulate the TCP and HTTP characteristics 
and vulnerabilities
• Find URL which accepts POST -> Change 
Content Length to 9999 (i.e. abnormal size > 
1500 bytes) bytes -> See whether it keeps the 
connection alive
(Attack Combo #1 Detailed explanation in Part 2)
Techniques Overview : 
Post-Attack Techniques
Attack Combo #1:
With POST method allowed, we could guess and 
learn the behavior and devices behind:
• Check the TCP established state timeout value
• Check the TCP first PSH/ACK timeout value
• Check the TCP continuous ACK timeout value
• Check the TCP first FIN_WAIT1 timeout value
• Check the TCP last ACK timeout value
• It is an incomplete HTTP packet, which cannot 
be detected and it is treated as  a data trunk.
Techniques Overview : 
Post-Attack Techniques
Attack Combo #1 (Continue):
• Wait for FIN/ACK – Initiated by target’s server
• Wait for RST/ACK – Initiated by requestor, 
target’s server or CDN
• Wait for RST – Initiated by device like IDS, IPS, 
etc
• Submit a packet to the target with wrong IP 
checksum and check whether there is any 
replied packet.
Techniques Overview :  
Post-Attack Techniques
Goals
• Calculation of resources to bring down the 
target
• Estimation of the detection
• Guess its DDoS mitigation
• Submit an incomplete HTTP POST packet 
attack to the back-end server.
Techniques Overview : 
Attack Techniques
Attack Combo #2:
• Manipulate the vulnerabilities due to poor 
server hardening.
• Accept incomplete HTTP request (i.e. 
accept simple HTTP request connection 
including fields like HOST, Connection and 
ACCEPT only)
Simple GET attack pattern in 4 
years ago
• GET / HTTP/1.1\r\n
Host: www.xxx.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n\r\n
• The site does not check cookie value, referral 
value.
• It means there is NO HARDENING 
• User-Agent value: Mozilla/4.0\r\n is a common 
botnet used “label”, however, it still could accept
Techniques: Attack Techniques
Attack Combo #2:
• Whether it accepts HTTP pipelining
– It is a RFC standard but rare to use
GET / HTTP/1.1\r\nHost: www.xxxxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\n")
Techniques: Attack Techniques
Attack Combo #2:
- Utilize the packet size with 1460 byte size in 
PSH/ACK packet
- A packet could be multiplied 7 times or more
- For pipelining, for example, HTTP packet is 
not properly ended without \r\n\r\n, which may 
bypass the detection and filter, as it is not 
deemed as a HTTP packet.
Techniques: Attack Techniques
Attack Combo #2:
• Finding large-size packet data payload like 
picture and audio files, which could not be 
cached and authentication check (like 
CAPTCHA) in prior.
• Goals:
– Increase loading of server and CPU and 
memory usage
– Increase the bandwidth consumption
Techniques: Attack Techniques
Attack Combo #2:
• Session – Force to get a new session and connection 
without cache. It could “guarantee” bypass loadbalancer 
and Proxy.
• It is hard to remove it.
• If trying to drop the URL with “?”, it causes dropping the 
normal request:
– For example, http://www.abc.com/submitform.asp?
234732893845DS4fjs9....
– Cache:no cache and expiry date is 1994
Techniques: Attack Techniques
•
Attack Combo #2
GET /download/doc.pdf?121234234fgsefasdfl11 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl22 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl33 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl44 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
Techniques: Attack Techniques
•
Attack Combo #2
GET /download/doc.pdf?121234234fgsefasdfl55 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl66 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl77 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n
GET /download/doc.pdf?121234234fgsefasdfl88 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep alive\r\n\r\n
We follow RFC all the time
Our Test Targets
•United State ( 40 )
•Europe (20)
•Asia Pacific (20)
Case Studies:
It will be discussed on stage
Agenda
• Members introduction
• Research and Finding
– Part 1: Layer-7 DoS vulnerability analysis and 
discovery.
– Part 2: Core Attack Concept and Empower 
a Zombie
– Part 3: Defense Model
Before taking Appetizer, let us 
do the demo
Let us give three demos:
Attack Server: Backtrack 5, 512M Ram, 2 CPU (VM)
Web Server: Windows server 2008 R2, IIS 7.5 with a text web 
page, 2G RAM, no application and database, hardware PC.
1.Attack target server and stuck TCP state TIME_WAIT
2.Attack target server and stuck TCP state FIN_WAIT1
3.Attack target server and stuck TCP state Established
7/11/12
Attack Goal
Demo 1: Cause server unstable
Demo 2: Cause the unavailability of service 
in a minute
Demo 3: Cause the unavailability of service 
instantly
7/11/12
Demo time
7/11/12
What are the theories and 
ideas behind Demos 1-3?
7/11/12
Core Attack Concept
•
Don’t focus on HTTP method. This server is not 
killed by HTTP related vulnerability.
Otherwise,
•
HTTP GET flood - unstable and high CPU
•
HTTP POST flood - unstable and high CPU
•
HTTP HEAD flood - unstable and high CPU
•
HTTP XXX flood - xxxx and high xxxx only
•
Demo 1 attack also unstable and high CPU only
We are not DoS attack to OS 
and Programming Language
•
This attack is against to a kind of OS and 
programming language. e.g. Apache killer, etc.
•
Our Attack FOCUS is on Protocol – TCP and 
HTTP, we are going to do a TCPxHTTP killer.
•
Any server not using TCP and HTTP?
We do not present IIS killer, Apache killer, Xxx 
killer!!!
TCP state is the key
• Focus on TCP state. 
• Use the HTTP as an example to control the TCP state.
• Manipulate the TCP and HTTP characteristics and 
vulnerabilities
• Server will reserve resource for different TCP states.
• The Same Layer 7 Flood to Different targets can 
different TCP state.
• TCP state attack is decided upon various cases, 
depends on web application, OS and HTTP Method.
• The key is based on reply of server. E.g. Fin-Ack, RST, 
RST-Ack, HTTP 200, HTTP 30…etc.
Logical Diagram
Super combo Period =TCP State
7/11/12
Health Point = Server 
resource
Hits = TCP 
Connection
Kyo = Attack server
Super combo 
= HTTP 
Request
High 
CPU
Andy in 
fire = 
Web 
server
Keep Super Combo to Andy
•We wish to extent the super combo period!!!
•We will discuss the 3 different TCP states.
•Targeted TCP state:
•  Demo 1. TCP TIME_WAIT
•  Demo 2. TCP FIN_WAIT_1
•  Demo 3. TCP ESTABLISHED
P.S. In King Of Fight 2003, it is bug.
Demo 1. TCP STAT TIME_WAIT
From RFC:
“When a connection is closed actively, it MUST linger in TIME-WAIT 
state for a time 2xMSL (Maximum Segment Lifetime). However, it 
MAY accept a new SYN from the remote TCP to reopen the connection 
directly from TIME-WAIT state, if it: 
(1)assigns its initial sequence number for the new connection to be 
larger than the largest sequence number it used on the previous 
connection incarnation, and 
(2)  returns to TIME-WAIT state if the SYN turns out to be an old 
duplicate” 
Demo 1. TCP STAT TIME_WAIT
•Demo 1 is simulating the most common DDoS attack.
•RFC: “Server is waiting for a connection termination 
request from the local user.” Depends on OS, time out 
around 60s. 
•Web server are only with high CPU usage and in unstable 
status
Demo 1. TCP STAT TIME_WAIT
Just like a light punch, easy to defense~
Fix:
•Harden Server TCP parameters
•Most of network security devices can set the timeout (e.g. 
Proxy, firewall, DDoS mitigation device)
Demo 1. TCP STAT TIME_WAIT
Demo 1 – The Key for goal
• Check the TCP last ACK timeout value
• Wait for RST – Initiated by device like 
IDS, IPS, etc.
7/11/12
Demo1 – The Key for Goal