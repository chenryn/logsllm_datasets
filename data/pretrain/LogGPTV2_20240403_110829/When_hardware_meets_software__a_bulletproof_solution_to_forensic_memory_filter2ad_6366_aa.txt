title:When hardware meets software: a bulletproof solution to forensic memory
acquisition
author:Alessandro Reina and
Aristide Fattori and
Fabio Pagani and
Lorenzo Cavallaro and
Danilo Bruschi
When Hardware Meets Software:
A Bulletproof Solution to Forensic Memory Acquisition
Alessandro Reina
Dipartimento di Informatica
Università degli Studi di Milano
Aristide Fattori
Dipartimento di Informatica
Università degli Studi di Milano
Fabio Pagani
Dipartimento di Informatica
Università degli Studi di Milano
Lorenzo Cavallaro
Information Security Group
Royal Holloway, University of London
Danilo Bruschi
Dipartimento di Informatica
Università degli Studi di Milano
ABSTRACT
The acquisition of volatile memory of running systems has
become a prominent and essential procedure in digital foren-
sic analysis and incident responses.
In fact, unencrypted
passwords, cryptographic material, text fragments and latest-
generation malware may easily be protected as encrypted
blobs on persistent storage, while living seamlessly in the
volatile memory of a running system. Likewise, systems’
run-time information, such as open network connections,
open ﬁles and running processes, are by deﬁnition live en-
tities that can only be observed by examining the volatile
memory of a running system. In this context, tampering of
volatile data while an acquisition is in progress or during
transfer to an external trusted entity is an ongoing issue as
it may irremediably invalidate the collected evidence.
To overcome such issues, we present SMMDumper, a novel
technique to perform atomic acquisitions of volatile memory
of running systems. SMMDumper is implemented as an x86
ﬁrmware, which leverages the System Management Mode of
Intel CPUs to create a complete and reliable snapshot of the
state of the system that, with a minimal hardware support,
is resilient to malware attacks. To the best of our knowledge,
SMMDumper is the ﬁrst technique that is able to atomically
acquire the whole volatile memory, overcoming the SMM-
imposed 4GB barrier while providing integrity guarantees
and running on commodity systems.
Experimental results show that the time SMMDumper re-
quires to acquire and transfer 6GB of physical memory of a
running system is reasonable to allow for a real-world adop-
tion in digital forensic analyses and incident responses.
Categories and Subject Descriptors
D.4 [Operating System]: Security and Protection — Sys-
tem Program and Utilities — Invasive software (e.g., viruses,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
worms, Trojan horses)
General Terms
Security
Keywords
Forensic, System Management Mode, Live Memory Acqui-
sition
1.
INTRODUCTION
Memory acquisition and analysis are well-known and long-
term studied digital investigation activities. Although his-
torically focused on information stored and likely hidden on
persistent media (e.g., hard disks), digital investigation ef-
forts have nowadays embraced the realm of volatile storage
too. For instance, unencrypted passwords, cryptographic
material, text fragments and latest-generation malware may
easily be protected as encrypted blobs on persistent storage,
while live seamlessly in the volatile memory of a running
system. In addition, systems’ run-time information, such as
open network connections, open ﬁles and running processes,
are by deﬁnition live entities that can only be observed on
a live, running, system.
Given the importance of the problem and its related chal-
lenges, a number of solutions have been proposed to date.
Overall, such approaches diﬀer mostly by the degree in which
the basic forensic requirements of atomicity (i.e., volatile ac-
quisitions must occur within an uninterrupted time-frame),
reliability (i.e., only trustworthy and consistent acquisitions
must be retained), and availability (i.e., solutions must be
device-agnostic)—informally described in [10]—are satisﬁed.
Roughly speaking, most solutions are either software- or
hardware-based [19, 10]. The former are typically embedded
into the operating system kernel, oﬀering isolation (and thus
protection) only against typical userspace attacks. Con-
versely, hardware-based solutions seem to be resilient against
kernel-level threats too (for instance, Carrier and Grand rely
on a DMA-based physical copy of the volatile memory built
on top of a speciﬁc PCI device [2]).
Although perceived in principle to be more secure then
their software counterparts, hardware-based solutions too
may suﬀer from serious weaknesses, undermining their over-
all eﬀectiveness. For instance, Rutkowska showed quite re-
79
cently how the privileges of a kernel-level malware can suc-
cessfully manipulate speciﬁc hardware registers to provide
device-dependent (i.e., CPU or DMA) split views of the con-
tents of (volatile) memory [16]. As such, it is currently safe
to assume that pure hardware-based state-of-the-art tech-
niques are as robust (or weak) as their software-based coun-
terparts, leaving memory acquisitions an open challenge.
To address such issues, one of the directions the research
community is exploring revolves around the possibility of
building dependable memory acquisition techniques on top
of system management mode (SMM), a particular execution
state of modern x86 CPUs.
Modern x86 CPUs enter SMM via system management in-
terrupts (SMIs). Switching to SMM causes the CPU to save
the current system execution state in the system manage-
ment RAM (SMRAM), a private address space speciﬁcally
set up for the purpose. Afterward, the execution ﬂow passes
to the SMI handler, which is resident in SMRAM. One im-
portant feature of the SMRAM is that it can be made in-
accessible from other CPU operating modes. Therefore, it
can act as a trusted storage, sealed from any device or even
the CPU (while not in SMM). Although powerful, SMM has
a critical issue: according to the Intel speciﬁcations, SMM
can only access up to 4GB of physical memory, even on IA-
32 CPUs that support physical address extension (PAE) [8],
limiting the overall memory acquisition capability of such
approaches.
Wang et al. propose an hardware-based approach to pe-
riodically trigger SMIs (and thus entering SMM) to read
the RAM content and send it oﬀ to a remote server [21].
Although interesting, that approach has a number of limi-
tations. First, it requires additional hardware (i.e., a PCI
card) to be installed on the system prior to any live ac-
quisition attempt. Second, no attempt to bypass the 4GB
SMM-imposed memory upper bounds is made, greatly lim-
iting the acquisition process, especially on modern hardware
equipped nowadays with more than 4GB of physical mem-
ory. Finally, Wang et al.’s approach does not provide any
integrity guarantee on the overall acquisition procedure.
To overcome such issues, we present SMMDumper, a novel
technique to perform atomic acquisitions of volatile memory
of running systems. SMMDumper is implemented as an x86
ﬁrmware, which leverages the SMM of Intel CPUs to create
a complete and reliable snapshot of the state of the system
that, with a minimal hardware support, is resilient to mal-
ware attacks.
Our solution is based on a collector and a triggering mod-
ules. The former is resident in SMRAM and is responsi-
ble for transmitting to a trusted host the entire proces-
sor state and the memory content, overcoming the SMM-
imposed 4GB barrier when PAE is enabled, while providing
integrity guarantees and running on commodity systems.
Conversely, the triggering module takes care of activating
the collector via SMIs.
Ideally, a sound and bulletproof
implementation of the triggering component should rely on
hardware-based activation mechanisms (for instance, a com-
mon scenario may see a speciﬁc keystroke directly connected
to the SMI CPU pin). These artifacts would isolate the pro-
tected software component, making it inaccessible from user-
or kernel-space. Although such mechanisms have already
been proposed in the literature (e.g., [9]), we have opted
for a software-only proof-of-concept implementation of the
triggering module, for simplicity (a software-emulated hard-
ware triggering mechanism does not aﬀect the eﬀectiveness
of SMMDumper).
Roughly speaking, our software-based SMI triggering so-
lution works as follows. We modify the local vector table
(LVT) of the APIC controller to trigger an SMI upon the
pressure of an appropriate keystroke combination. Once the
SMI is triggered, the CPU switches to SMM, the current sys-
tem state is saved and our SMI handler (i.e., the collector
module) is executed. Although as outlined above our current
SMI triggering implementation is vulnerable to kernel-level
threats (e.g., SMI invocation avoidance via LVT reconﬁgu-
ration to reroute keyboard interrupts), SMMDumper’s un-
derlining idea remains sound and, moreover, its triggering
module implementation can easily be extended to rely on
hardware-based mechanisms (e.g., [9]).
In summary, we make the following contributions:
1. We devise a novel ﬁrmware-based technique to create a
complete and reliable snapshot of the state of the sys-
tem that, with a minimal hardware support, is resilient
to any malware attack.
2. We devise an SMM-based mechanism that enables us
to access any physical memory extending over 4GB.
3. We devise a mechanism to digitally sign, while in SMM,
the entire RAM contents (extension over 4GB included).
4. We implement a QEMU-based [1] prototype, which en-
ables us to show the usefulness and correctness of our
solution as well as perform a performance evaluation.
2. RELATED WORK
Live memory acquisition is an interesting and challeng-
ing computer forensics topic, which has largely gained the
attention of the research and industry community. In the
following, we provide a brief overview of the state-of-the-
art, pointing out its main characteristics and limitations.
2.1 Hardware-based Approaches
In principle, every PC hardware bus can be leveraged to
gain access to the host physical memory via direct memory
access (DMA). For instance, solutions relying on PCI [2],
PCMCIA and FireWire [12] buses have been proposed in
literature. Such techniques have the advantages of not caus-
ing any change in the state of a running OS and being unaf-
fected by most of attacks-hiding techniques. Unfortunately,
PCI devices require a prior installation on the system and
this greatly reduces their usability. FireWire-based solutions
address this issue by allowing analysts to hot-plug them in
the target system; thus they can be carried in the toolkit
of an incident response team to be installed just after an
incident occurred.
Both techniques have limitations. First, they cannot ac-
cess the processor state (i.e., registers). Second, a knowl-
edgeable attacker, or an advanced malware, can perform a
scan of the PCI bus and detect the presence of such ad-hoc
devices and consequently decide to stop any malicious ac-
tivity and wipe every ﬁngerprinting left behind. Lastly, as
shown by Rutkowska in [16], DMA devices can be tricked
to provide split views of memory contents, thus making the
output of such devices unreliable.
80
2.2 Software-based Approaches
Software-based approaches vary greatly both in complex-
ity and reliability. Such solutions often rely on the OS in-
ternals of the host whose memory must be collected. As an
example, the simplest way to dump the memory via software
is to rely on special virtual devices, if present, like /dev/mem
on Linux or \Device\PhysicalMemory on diﬀerent Windows
systems. Such devices, in fact, allow user space programs to
read the whole physical memory of the running system. This
possibility leads to trivial memory collection operations, for
example through simple Unix utilities such as dd and net-
cat. The main drawback of all these solutions is that they
need to be loaded into memory in order to run, thus mod-
ifying the original state of the target machine. This causes
the captured data to be inconsistent and not reliable. An
alternative software solution, even if not always viable, is to
crash the system that needs to be analyzed. Indeed, Win-
dows automatically trigger a dump of the physical memory
on the hard disk whenever a crash occurs.
Other software memory collection solutions can be used
when dealing with virtualized environments. Indeed, virtu-
alization opened up many new possibilities for forensic anal-
yses. The execution of the virtualized system, commonly
referred to as the “guest” operating system, can be com-
pletely frozen for an arbitrary amount of time, allowing for
easy atomic collection operations.
One of the most advanced solutions in such a case has been
proposed in HyperSleuth [11], where the authors describe a
framework that leverages standard hardware support for vir-
tualization to gather memory contents without interrupting
the target services. The only drawbacks of this approach
are that some small changes in the memory of the target are
induced by the installation procedure and that a powerful
attacker in the same network of the target could interfere
with the packets containing the memory dump.
As previously mentioned, in the last years some authors
proposed solutions which exploit the characteristics of Sys-
tem Management Mode. Among them, the closest to our ap-
proach is that presented in [21], where a mechanism for RAM
collection leveraging SMM is presented. Such a mechanism
however has been mainly devised for malware detection and
thus does not address some critical issues required by digital
investigations. More precisely, these includes the following
problems: the integrity of the copy obtained, its adherence
to the original content and the possibility of dumping the
Physical Address Extension (if present). Furthermore, it
requires the installation of a dedicated PCI network card.
Our approach, as we will see, also requires a network card
to operate, but it leverages the one already installed on the
system and not a custom piece of hardware installed ad-hoc
on the target.
In a subsequent paper [23], an extension of Hypercheck to
comply with digital investigations has been proposed. How-
ever, no proof of concept has been provided and most of the
limitations mentioned above have not been addressed.
3. SYSTEM MANAGEMENT MODE
SMM is a special mode of operation of Intel CPUs, intro-
duced in the i386 processors, designed to handle system-wide
functionalities, such as power management and hardware
control.
The processors enters SMM in response to a System Man-
agement Interrupt (SMI), which has a higher priority com-
pared with other interrupts, and it is signaled through the
SMI# pin on the processor or through the APIC bus. When
SMM is invoked, the CPU saves the current state of the pro-
cessor, switches the System Management RAM (SMRAM)
address space and begins to execute the code present in it
(i.e., the SMI handler).
SMM code is not intended for general purpose applica-
tions, but it is limited to system ﬁrmware only. Indeed, the
main beneﬁt provided by SMM is the execution of the code