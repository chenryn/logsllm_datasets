另外`controller`需要接收的`request`参数(`@PathVariable`)的类型需要是`String`，否则将会出错。  
#### 复现
首先复现一下，测试版本 `1.5.2`。  
编写`Controller`
    @RequestMapping("/toJsonList/{name}")
        @ResponseBody
        public List toJsonList(@PathVariable String name){
            System.out.println("返回json集合数据");
            User user1 = new User();
            user1.setName("alter1");
            user1.setAge(15);
            User user2 = new User();
            user2.setName("alter2");
            user2.setAge(12);
            List userList = new ArrayList();
            userList.add(user1);
            userList.add(user2);
            return userList;
        }
配置对应的`shiro.ini`
    [urls]
    /toJsonList/* = authc
此时请求`/toJsonList/aaa`那么将会被禁止。  
但是这里我们可以通过url双编码的方式来绕过。
    / -> %2f ->%25%32%66
测试发现下面四种组合只有前两组可以绕过
    yes
    /toJsonList/a%25%32%66a
    /toJsonList/%25%32%66
    no
    /toJsonList/%25%32%66a
    /toJsonList/a%25%32%66
#### 分析
首先要清楚`Shiro`支持 `Ant` 风格的路径表达式配置。`ANT` 通配符有 `3` 种，如下所示：  
| 通配符 | 说明 |  
| ---- | ---- |  
| ? | 匹配任何单字符 |  
| * | 匹配0或者任意数量的字符 |  
| ** | 匹配0或者更多的目录 |
解释一下就是`/**` 之类的配置，匹配路径下的全部访问请求，包括子目录及后面的请求，如：`/admin/**` 可以匹配 `/admin/a` 或者
`/admin/b/c/d` 等请求。  
对于`/*`的话 ，单个 `*` 不能跨目录，只能在两个 `/` 之间匹配任意数量的字符，如 `/admin/*` 可以匹配 `/admin/a`
但是不能匹配 `/admin/b/c/d`。  
那么问题来了，如果我们将其配置为`/toJsonList/*`，但是我们访问形如`/toJsonList/a/b`这种路径，此时就会绕过访问权限。
我们还记得为了修复`CVE-2020-1957`,shiro在`1.5.2`版本进行了更新，将`request.getRequestURI()` 修改为
`request.getContextPath()`、`request.getServletPath()`、`request.getPathInfo()`
拼接构造`uri`。根据网上师傅们的总结，这几个方法的差异性如下：
  * `request.getRequestURL()`：返回全路径；
  * `request.getRequestURI()`：返回除去`Host`部分的路径；
  * `request.getContextPath()`：返回工程名部分，如果工程映射为`/`，则返回为空；
  * `request.getServletPath()`：返回除去`Host`和工程名部分的路径；
  * `request.getPathInfo()`：仅返回传递到`Servlet`的路径，如果没有传递额外的路径信息，则此返回`Null`；
第一次解码发生在`request.getServletPath()`  
第二次解码发生在`decodeAndCleanUriString()` -> `decodeAndCleanUriString()` ->
`decodeRequestString()` -> `URLDecoder.decode()`  
因此`org.apache.shiro.web.util.WebUtils#getRequestUri`进行了两次解码，将`/toJsonList/a%25%32%66a`解码成`/toJsonList/a/a`  
接着就走到`org.apache.shiro.util.AntPathMatcher#doMatch`进行权限验证，`/toJsonList/a/a`不满足配置中的`toJsonList/*`，因此成功绕过。
但还要看`Spring`是怎么对其进行解析的  
在`org.springframework.web.uti.UrlPathHelper#getPathWithinApplication`中，将`url`解析为`/toJsonList/a%2fa`，这样其实就表示`/toJsonList/{name}`中的`name`值为`a%2fa`。  
分析完之后， 也就解释了为什么下面四种组合只有前两组可以绕过  
（这种二次解码的方式我测试只适用于`1.5.2`的版本，之前的版本使用`a%25%32%66a`测试，因为只有一次解码，会跳转至登陆界面；`a%2fa`测试直接返回`400
Bad Request`,应该是请求的问题，希望能有师傅帮忙解答一下）
### 漏洞分析 —— 根路径差异化解析绕过
#### 限制
  1. 若 `Shiro >= 1.5.2` 的话，应用不能部署在根目录，如果为根目录则 `context-path` 为空， `CVE-2020-1957` 更新补丁将 `URL` 格式化。
  2. `Spring` 控制器中没有另外的权限校验代码  
#### 复现  
本次复现使用的是`1.4.2`版本的`shiro`所以应用根目录是什么都没有关系  
配置为
        /alter/* = authc
    /** = anon
新增一个`controller`
        @RequestMapping("/alter/test")
    @ResponseBody
    public List test(){
     User user1 = new User();
     user1.setName("alter");
     user1.setAge(15);
     List userList = new ArrayList();
     userList.add(user1);
     return userList;
    }
输入地址`http://localhost:8080/;/shirodemo/alter/test`，`org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain`会进行如下操作获取`uri`  
此时`uri`结果为`/`，绕过配置`/alter/* = authc`，符合配置`/** = anon`，达到绕过目的。  
`Spring`在处理`uri`时直接进行路径标准化，去掉了分号
`Shiro < 1.5.2`版本的话，根路径是什么没有关系  
### 漏洞修复
`Shiro` 在
[Commit](https://github.com/apache/shiro/commit/01887f645f92d276bbaf7dc644ad28ed4e82ef02)
中修改了 `URL` 获取的逻辑，不单独处理 `context-path`，这样不会导致绕过，同时也避免了二次 URL 解码的问题。  
回退了 `WebUtils#getRequestUri` 的代码，并将其标记为 `@Deprecated`  
可以看到，`shiro`建议使用 `getPathWithinApplication()` 方法获取路径减去上下文路径，或直接调用
`HttpServletRequest.getRequestURI()` 方法获取。
在 `WebUtils#getPathWithinApplication` 方法，修改了使用 `RequestUri` 去除 `ContextPath`
的方式，改为使用 `getServletPath(request) + getPathInfo(request))`。然后使用
`removeSemicolon` 方法处理分号问题，`normalize` 方法进行路径标准化。  
## CVE-2020-13933
### 漏洞信息
漏洞编号：[CVE-2020-13933](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13933) /
[CNVD-2020-46579](https://www.cnvd.org.cn/flaw/show/CNVD-2020-46579)  
影响版本：`shiro < 1.6.0`  
漏洞描述：`Shiro` 由于处理身份验证请求时存在权限绕过漏洞，特制的`HTTP`请求可以绕过身份验证过程并获得对应用程序的未授权访问。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/dc194fc977ab6cfbf3c1ecb085e2bac5db14af6d)
### 漏洞分析
这个CVE其实就是对`CVE-2020-11989 patch`的绕过。上一个CVE使用 `getServletPath(request) +
getPathInfo(request))` 获取`uri`，回顾一下：
  * `request.getServletPath()`：返回除去`Host`和工程名部分的路径；
  * `request.getPathInfo()`：仅返回传递到`Servlet`的路径，如果没有传递额外的路径信息，则此返回`Null`；
`Shiro`在`getChain`内进行权限验证，首先通过`getPathWithinApplication(request)`获得`uri`。从下图可以看到，更新后使用`HttpServletRequest.getRequestURI()`
方法获取`uri`；然后使用`removeSemicolon`去除`uri`中的分号，这里去除的是分号及分号后面的内容；然后使用`normalize`进行路径标准化。  
此时得到的路径为`/hello`，绕过了配置中的权限。  
接着看`Spring`是怎么处理路径的：  
在`org.springframework.web.util#UrlPathHelper`中的`getPathWithinApplication`方法内，使用`getRequestUri(request)`方法获取`uri`  
与`Shiro`处理的差异达到既绕过`Shiro`权限验证又成功访问的目的。  
### 漏洞修复
`shiro`在`1.6.0`版本中，`org.apache.shiro.spring.web#ShiroFilterFactoryBean`中增加了`/**`的默认路径配置，使其可以全局匹配进行过滤校验  
默认的`/**`配置对应一个全局的 `filter`：`InvalidRequestFilter`，这个类继承了
`AccessControlFilter`。用来过滤特殊字符（分号、反斜线、非ASCII码字符)，并返回 `400` 状态码。  
## CVE-2020-17510
### 漏洞信息
漏洞编号：[CVE-2020-17510](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-17510) /
[CNVD-2020-60318](https://www.cnvd.org.cn/flaw/show/CNVD-2020-60318)  
影响版本：`shiro < 1.7.0`  
漏洞描述：第三种`AntPathMatcher`的绕过方式  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/6acaaee9bb3a27927b599c37fabaeb7dd6109403)
### 漏洞分析
这个漏洞还是对 `AntPathMatcher` 的继续绕过,在`CVE-2020-11989`和`CVE-2020-13933`分别尝试了 `/` 的双重
`URL` 编码和 `;` 的 `URL` 编码绕过，归根到底这种方式还是因为`Shiro`与`Spring`对`URI`处理的差异化导致的。那么字符
`.` 是不是也可以进行绕过呢？其实是可以的（测试环境`Shiro 1.6.0`，`SpringBoot 2.5.3`）  
还是添加如下配置和`Controller`
    map.put("/hello/*", "authc");
    @GetMapping("/hello/{name}")
    public String hello(@PathVariable String name) {
        return "hello";
    }
当`Shiro`获得的`uri`为`/hello`时，是无法和`/hello/*`匹配的，所以就在`/hello`后面加上`%2e`，这样`Shiro`解码之后变成`/hello/.`，然后路径标准化成为`/hello`，绕过身份验证  
对于`Spring`来说，正如之前讲的，`Spring Boot` 版本在小于等于
`2.3.0.RELEASE`时，会对`uri`进行解码然后路径标准化，这样得到的路径为`/hello`，没有页面与之匹配。所以只有当 `Spring
Boot` 版本在大于 `2.3.0.RELEASE`时标准化路径后`/hello/%2e`，然后解码`/hello/.`  
下面的`payload`都可以使用：
    /%2e
    /%2e/