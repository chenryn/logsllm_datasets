把简历放到网上
确保雇主能够很容易访问你的简历。如果你申请Web开发的职位，这一点尤其重要
简历要有创意
简历样式不落俗套，别人一眼扫过去就会被深深吸引
使用“行动-结果”的描述
你的简历应该展现你都做了哪些工作及相应的结果。这样你的潜在雇主既能了解你会干什么，还能了解你能取得的成果，以及雇用你会给他们带来的收益
校对
即使是聘请专业的简历写手，你也要通篇校对。简历里有错别字或拼写错误会让人觉得你粗心大意
采取行动
不管你现在是否正在找工作，把你的简历给一些招聘人员，询问他们的意见。招聘人员看过大量的简历，他们是能告诉你是否需要改进你自己的简历的最佳人选。
查阅分析一些专业的简历代写服务，看看他们提供的简历样本。与之相比，你自己写的简历如何？
第18章 请勿陷入对技术的狂热之中
我不知道你是不是一位有宗教信仰的人。无论你信仰何种宗教，我肯定你会同意我的看法，历史上许多最血腥、最残酷的战争，在某种程度上都是为宗教而战的。
这里我并非是在抨击宗教，也并非以某种方式表明某种宗教与生俱来的善与恶。我只是希望你能清楚地意识到，恪守教条的信仰往往有很大的煽动性。
软件开发也是如此。软件开发和技术的虔诚很容易像信仰生命起源或至高无上的神的存在一样。尽管一般我们不会因为某个人喜欢iOS超过Android就杀死他，但是我们确实有一种倾向，总想在没人注意的时候给对方点颜色看看。
我坚信，如果你能让自己不成为某种技术的信徒，你会在职业生涯之路上走得更远。在本章中，我们将探讨为什么会是这样的情形。
我们都是技术的信徒
这是真的，你还是承认这一点吧。你对某种技术或编程语言存在偏见，认为它是最好的——至少大多数程序员是这样的。这很正常。我们总是对自己做的事情充满热情；只要是有激情、有热情，就很容易变得极度感性。来看看职业运动员。
对技术虔诚的一大问题是，我们中的大多数崇拜某项特定的技术，只是因为自己熟悉这种技术。我们很自然地会相信自己选择的是最好的，然而这会让我们经常忽略任何反对意见。我们不可能充分了解现存的所有技术，从而给“哪项技术最好”作出最英明、最睿智的判断，于是我们倾向于选择我们了解的技术并先入为主地认为它是最好的。人生多艰，无暇他顾。
尽管这一行为的起因合理又自然，但其实具有破坏性和局限性。当我们武断地只根据自身经验就固执己见时，很容易只与理念相同的人打交道而排斥其他人，最终我们只会固步自封、墨守陈规。我们自以为找到所有答案，却只是裹足不前。
在我职业生涯的相当长的一段时间里，我都是操作系统、编程语言甚至文本编辑器这些技术的忠实信徒。然后我才逐渐意识到，我没必要只是选择最好的而贬低其他的。
天生一物必有用
不是所有的技术都是“伟大的”，但多数被普遍应用的技术至少是“好的”。一样东西如果不好，就不会为人所知或使用，也不会成功。诚然，环境是随着时间而变化的，但重要的是，我们必须认识到：至少在历史的某个时间点，每项技术都被看作是那个时代里“好的”甚至是“伟大的”。
有了这样的视角会有助于你理解：在很多情况下，解决问题并不只有一个好的或是最好的方法。同理，最好的编程语言、框架、操作系统，甚至是文本编辑器不会只有一种。你可能会喜欢某项技术多过其他，或者用某种编程语言的效率要高过其他，但是称其最好并无必要。
发生在我身上的转变
让我自己相信这一点经历了一段漫长的艰难时间。我花了无数时间与人争论为什么Windows比Mac好得多。我为C#和其他静态类型语言大声疾呼，我认为它们可以把Perl或者Ruby这些动态语言甩开几条街。现在我讲起来都有些惭愧，我那时甚至会严厉斥责那些不这么认为的开发人员——他们怎么敢相信那些我都从来不用的技术？
令我大开眼界的是在我第一次担当一个Java项目的项目组长的时候。在此之前，我一直是.NET开发人员，专注C#语言。（好吧，其实也不尽然。在.NET技术出现以前我是C++的信徒。）我不能容忍用Java语言工作的想法。同优雅的C#相比，Java就是不入流。我甚至都不会使用Lambda表达式，我怎么可能喜欢用Java写代码呢？
最终我还是决定接受这份工作，因为这个机会实在是太好了，而且我认为这不过就是一个合同，我只要忍上区区一年而已。后来，我才发现，接下那份工作是我在职业生涯中所做出的最杰出的决策之一。使用自己一度厌恶的技术工作，让我从不同的视角审视所有的技术。事实证明，Java一点都不糟糕，我也能够理解为什么有些开发人员喜欢用Java而不用C#。
在做Java项目的那几年里，我学到的东西比之前工作中学到的都多。突然之间，我有了一个巨大的装满各式工具的工具箱，能用来解决任何问题，我再也不像以前那样死守着少数几个被过度使用的工具。
从那时起，面对其他编程语言，即使是动态语言，我都会抱有与面对Java时一样的开放心态，使用从中学到的任何知识和技能，使自己成为更好的程序员。我也放弃了对操作系统和框架的偏爱，努力尝试新东西之后再做评价。如果没有这段经历，我可能不会写这本书，又或者，我会写一本《为什么C#是最好的语言，其他语言都糟透了》。
不拘一格
不拘一格是本章的要点所在。没有理由去强烈坚持自己选择的技术就是最好的，而轻视甚至无视其他技术。如果固执己见，最终受损失的是你自己。
另一方面，如果你愿意对技术保持开放的心态，而不是固守自己已经了解的技术，声称它是最好的，你会发现有更多的机会为你敞开大门。
采取行动
列出你钟爱的所有技术，或者你觉得更胜一筹的技术。
针对这张列表里的每一项，想想它为什么吸引你。你都做了哪些比较来确定它确实是“更胜一筹”？你真的使用过它们的竞争对手吗？
挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公地讨论为什么他们喜欢这门技术。更进一步，你也试着用用它。
第二篇 自我营销
营销就是一场争夺人们注意力的竞赛。
——Seth Godin
在软件开发行业，营销的名声并不好。一般人提起营销人员都会皱眉头，因为很多营销人员会急功近利地使用不诚信的手段。似乎每天都有无良的营销人员为了一己私利而兜售新骗局。
其实在现实生活中，营销本身并没有那么糟糕。你的营销手段决定了你的营销对象是受益还是受损。营销需要人们的关注，以便让人们关注你，关注你的产品。优秀的营销会将人们的需要或者期待与能够满足此愿望的产品或服务关联起来。所以，营销追求的是“实现价值在先，要求回报在后”。
第19章 针对“码农”的营销基础课
你有去过酒吧夜店看过驻场乐队的演出吗？那些乐队的演唱水平丝毫不亚于原唱的艺术家们。你有没有想过，为什么这些乐队就只能在小小的夜店里做驻唱演出，而有些音乐才华并不比他们高多少的流行乐队就可以在全世界巡回演出，创造着一个又一个白金唱片？
很明显，两个乐队都很有才华，但是在生活中，仅仅拥有才华是远远不够的。伟大的音乐家和超级巨星之间的真正区别无非就是营销而已。对于有才华的人来说，营销就是一个“乘数效应”——你的营销越好，你的才华才能表现得越发淋漓极致。这就是对于软件开发人员来说，学习营销技能至关重要的原因。
自我营销意味着什么
营销的核心在于将一些人所需要的所期待的产品或者服务与产品或服务本身连接起来。所以“自我营销”也就是把希望得到你提供的产品或者服务的人和你自己连接起来。尽管营销经常声誉不佳，但如果你能以正确的方式营销自己并没有错。
自我营销的正确方式就是为他人提供价值。我们会在第21章对此进行深入的讨论。这里，你需要了解，成功进行自我营销的关键在于：如果想让别人喜欢你，想和你一起工作，你就必须要为他们提供价值。想想看，像Scott Hanselman [1]这样的牛人是怎么做的。Scott通过他自己的博客（http://www.hanselman.com）、演讲和播客为开发人员提供了相当多有价值的东西。在我们进入细节讨论之前，我们先从实践的角度谈谈自我营销是什么。作为一名软件开发人员，你怎样自我营销？
无论你是否意识到，其实你每时每刻都在营销自己。当你试图说服他人接受你的想法时，本质上，你就是在把自己的想法推销给他们。正如我们在关于人际关系的第4章中讨论过的，我们知道如何包装一个想法往往比想法本身更重要。
当你申请一份工作时，从本质上讲，你的简历就是推销自己服务的一份广告。甚至于，你在社交媒体或自己的博客上发布的内容（如果你有的话），其实也是在为你自己和你提供的服务和产品在做某种推销。
问题在于，即使我们都在推销自己，我们中大多数人并不是有意识地在做这件事情。我们将机会拱手相让，任由他人和环境来定义我们。