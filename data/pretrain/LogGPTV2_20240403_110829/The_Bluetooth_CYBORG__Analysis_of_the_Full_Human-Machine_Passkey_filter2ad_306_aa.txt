title:The Bluetooth CYBORG: Analysis of the Full Human-Machine Passkey
Entry AKE Protocol
author:Michael Troncoso and
Britta Hale
The Bluetooth CYBORG:
Analysis of the Full Human-Machine Passkey Entry
AKE Protocol
Michael Troncoso
Naval Postgraduate School
PI:EMAIL
Britta Hale
Naval Postgraduate School
PI:EMAIL
Abstract—In  this  paper,  we  computationally  analyze  Passkey 
Entry  in  its  entirety  as  a  cryptographic  authenticated  key 
exchange  (AKE)  –  including  user-protocol  interactions  that  are 
typically  ignored  as  out-of-band.  To achieve  this,  we  model  the 
user-to-device  channels,  as  well  as  the  typical  device-to-device 
channel,  and  adversarial  control  scenarios  in  both  cases.  In 
particular,  we  separately  capture  adversarial  control  of  device 
displays  on  the  initiating  and  responding  devices  as  well  as 
adversarial  control  of  user  input  mechanisms  using  what  we 
call  a  CYBORG  model.  The  CYBORG  model  enables  realistic 
real-world  security  analysis  in  light  of  published  attacks  on 
user-mediated protocols such as Bluetooth that leverage malware 
and  device  displays.  In  light  of  this,  we  show  that  all  versions 
of  Passkey  Entry  fail  to  provide  security  in  our  model.  Finally, 
we  demonstrate  how  slight  modiﬁcations  to  the  protocol  would 
allow  it  to  achieve  stronger  security  guarantees  for  all  current 
variants  of  passkey  generation,  as  well  as  a  newly  proposed 
twofold  mode  of  generation  we  term  Dual  Passkey  Entry. 
These  proof-of-concept  modiﬁcations  point  to  improved  design 
approaches for user-mediated protocols. Finally, this work points 
to  categories  of  vulnerabilities,  based  on  compromise  type,  that 
could  be  exploited  in  Bluetooth  Passkey  Entry.
Keywords: Bluetooth · Authenticated Key Exchange · CYBORG 
Protocols · Secure Connections · Secure Simple Pairing · Passkey 
Entry ·  Computational  Analysis
I.
INTRODUCTION
In traditional cryptographic protocols, user authentication is 
achieved via a trusted third party such as a certiﬁcate authority. 
However,  in  some  settings,  such  as  the  Internet  of  Things 
(IoT),  a  reliable  connection  to  such  an  authority  cannot  be 
guaranteed,  and  in  some  lightweight  cases  certiﬁcates  cannot 
be  used  or  reliably  updated.  Such  protocols  instead  rely  on 
the  human  user  to  afﬁrm  the  identities  of  communicating 
parties  via  an  out-of-band  (OOB)  channel,  usually  via  the 
user  inputting  a  PIN  code  or  password.  Among  these  is  the 
Bluetooth  protocol  [10].  Naturally,  if  we  assume  a  perfectly 
secure  OOB  channel,  analysis  of  the  direct  device-to-device 
communication  is  simpliﬁed,  and  consequently  the  approach 
was sensible in the earlier days of protocol design and analysis.
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25 February 2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24401
www.ndss-symposium.org
Assuming that an adversary cannot effect such channels is
no longer realistic, as demonstrated by recent attacks lever-
aging malware to target the user interface, as well as more
established social engineering attacks. Notably the Tap ‘n
Ghost attack [33], which speciﬁcally targets Bluetooth devices,
refutes the idea that user communications should be ignored
in protocol analysis. As a result, it is critical to analyze the
protocols in their entirety, accounting for both user interaction
the cyborg
and device-to-device communication – namely,
protocol.
Leading authenticated key exchange (AKE) models do not
capture user-to-device (UtD) attacks due to the sole focus
on device-to-device (DtD) communications. However user-
oriented attacks arise precisely from adversarial control of the
UtD channel, or from a combination of control on UtD and
DtD channels. While models capturing the UtD channel in the
analysis of authentication protocols have emerged [18], [23],
there has been a lack of such modeling for key exchange until
now despite the standarized use of such protocols in practice.
This is in stark contrast to the widespread implementation
and standardization of AKE protocols employing the UtD
channel [10], [25].
We model adversarial abilities against key exchange on
what is normally the OOB channel. As noted before, Tap ’n
Ghost is one attack which focuses heavily on vulnerabilities
in the (previously assumed to be perfect) OOB channel. The
attack is notable as it is a two-pronged assault on a user
interface (without actively attacking device memory itself).
The attacker ﬁrst executes a Tag-based Adaptive Ploy, which
forces a pop-up to display on a user’s device, and then
activates a Ghost Touch Generator, which spoofs touches
on unwanted areas of the screen,
to force pairing with a
corrupted device. Thus, the attack requires adversarial ability
to create messages to be sent to a user from a device, and
adversarial ability to modify communications back from the
user to the device (see Figure 1). We reference the Tap n’
Ghost attack as an illustrative example throughout, but
it
is not
the only attack leveraging the UtD communication
channel. Touchloggers [12], [16], the StrandHogg vulnerability
[24], social engineering, and shoulder-surﬁng attacks also fall
into this category. All such attack vectors are systematically
accounted for in our CYBORG model.
Bluetooth’s Passkey Entry [10] generates and shares a
random value (a passkey) via the user to effectively achieve
entity authentication via the user mediation. Passkey Entry was
primarily designed for pairing when at least one device has
a keyboard but not a numerical display, such as a Bluetooth
keyboard attempting to pair with a modern computer. In that
case, a user could input a computer-displayed passkey into
the keyboard for pairing. However, recently Passkey Entry has
seen additional application when both devices have numerical
keyboard and display capability, such as the manual pairing
method between an Apple Watch and iPhone [3]. Bluetooth
itself has enjoyed a long history of design advances [9],
[36] and analysis [14], [15], [32], [41], as well as published
attacks [1], [2], [8], [22], [31], [33]. The Secure Simple
Pairing mechanism, ﬁrst published in Bluetooth v2.1 and
updated to Secure Connections in v4.2, allowed for ﬂexibility
by providing four methods of authenticated key exchange
dependent on device input/output (IO) capabilities: Just Works,
Numeric Comparison, Out-of-Band, and Passkey Entry. Of
these, Numeric Comparison and Passkey Entry both rely on
the user playing an active role in an authenticated key ex-
change (AKE). While Numeric Comparison has been analyzed
computationally [32], [41], Passkey Entry has until now not
received a detailed analysis. This raises the question, as a
cyborg protocol, is Bluetooth Passkey Entry secure and, if so,
under what conditions?
Fig. 1. Tap ‘n Ghost. Adversary uses a Tag-based Adaptive Ploy to display
a message from device A to the user requesting to pair to a malicious device
Eve. When the user denies this request, a Ghost Touch Generator corrupts the
input and forces acceptance by device A. These actions map to a ShowUser
query and ControlUser query, respectively, in the CYBORG model.
We address this question, presenting a computational anal-
ysis of Bluetooth Basic Rate / Extended Data Rate (BR/EDR)
versions 2.1–5.2 Passkey Entry (henceforth abbeviated Passkey
Entry). The analysis applies to Passkey Entry under either
the Secure Simple Pairing or Secure Connections Bluetooth
security framework, and is based on transcript matching as
part of entity authentication. To achieve this, we ﬁrst present
a computational CYBORG AKE model, capturing adver-
saries capable of exploiting user-to-device transmissions. Our
CYBORG model systematically covers all combinations of
adversarial ability to create and modify messages from the
device to the user and vice versa. As a result, our analysis not
only demonstrates potential insecurities in Passkey Entry, but
clariﬁes under which conditions it is secure.
A. Attacking User-to-Device Communications.
Social engineering and shoulder-surﬁng are well-accepted
techniques for targeting user-device communication, but recent
attacks on the UtD channel of cyborg-style protocols extend
2
well beyond these and lead us to a baseline classiﬁcation
of attack vectors. For example, Touchloggers [12] attempt to
mimic the role of keyloggers by logging a user’s presses on a
screen and then predicting the buttons that were pressed. The
StrandHogg vulnerability [24] functions by disguising malware
as legitimate apps for the user to interact with and unknowingly
allow a hacker to compromise their device. Summarizing
known attacks, we have the following four baseline attack
vectors over the UtD channel: compromise of the commu-
nication channel from the initiating device to the user (type
iu), the responding device to the user (type ru), the user to
the initiating device (type ui), and the user to the responding
device (type ur). We illustrate these attacks in Fig. 2. We use
these classiﬁcations to model adversarial capabilities by allow-
ing for combinations of adversarial ShowUser and ControlUser
queries in Section III.
User
User
Initiating
Device: A
Responding
Device: B
Initiating
Device: A
Responding
Device: B
CompUser Initiator–User (iu)
CompUser Responder–User (ru)
User
User
Initiating
Device: A
Responding
Device: B
Initiating
Device: A
Responding
Device: B
CompUser User–Initiator (ui)
CompUser User–Responder (ur)
Fig. 2. Visual depiction of the baseline four possibilities of user compromise
(CompUser-freshness) where the adversary is allowed to corrupt only one
direction of the user-to-device channel at a time, denoted by a red dashed
line. We use the terms CompUser[iu], CompUser[ru], CompUser[ui], and
to describe the attack scenarios represented by Figure 2a,
CompUser[ur]
Figure 2b, Figure 2c, and Figure 2d respectively.
For an example, consider how these combinations capture
the Tap n’ Ghost attack: This attack involves compromising
communications between a single device and the user; both
from the device to the user and from the user to the same
device. Thus, we can model this attack as a simultaneous
combination of either both a type iu and type ui compromise
(CompUser[iu,ui]), if the initiating device is being targeted, or
a type ru and type ur compromise (CompUser[ru,ur]), if the
responding device is being targeted. Initiator and responder
roles become important depending on the protocol and attack,
such as in Initiator-Generated Passkey Entry where only the
initiator displays a string to the user. In our model,
this
correlates to both a ShowUser query and a ControlUser query,
as shown in Figure 1.
We allow for 16 different security frameworks (plus one to
model the null case where the adversary gains no additional
capabilities on the UtD channel) based on the possible com-
binations of the four baseline types {iu, ru, ui, ur} in Fig. 2.
All of these combinations are distinct due to the various forms
that cyborg protocols may take. For example, Passkey Entry
has three modes based on how the passkey is generated: by the
initiating device, responding device, or the user. The effects
of adversary action against a device display depends on the
initiator/responder role of the device in question. Allowing for
all possible combinations therefore enables analysis to not only
adapt itself based on the protocol being investigated, but also
pinpoint the exact circumstances under which a protocol fails
to maintain security. This is especially useful information for
those looking to assess where to devote security resources. If
a protocol provides weak security against attacks afﬂicting the
initiator device, for example, but is resistant to attacks against
a responder device, then developers and system administrators
can plan and make design choices accordingly to limit vul-
nerability. Thus, analysis in our model can assist in limiting
zero-day attacks against devices employing cyborg protocols.
B. Previous Work on Passkey Entry.
Passkey Entry is the primary version of Bluetooth authen-
ticated key exchange employed when two devices want to pair
and at least one does not have display capability [10]. In-
formally, it functions by having two devices exchange/receive
a passkey for a user-to-device channel and proceed to com-
mit to each bit of said passkey sequentially. This sequential
construction, ﬁrst proposed in [27], was devised to prevent
ofﬂine dictionary attacks [39], such as those that plague legacy
versions of Bluetooth authenticated key exchange.
Although Passkey Entry complicates an ofﬂine dictionary
attack by committing to each bit of the passkey sequentially,
it is more susceptible to other types of eavesdropping attacks
[31]. Other investigations into the security of Passkey Entry
have been largely ad-hoc [4], [31], [40], involving exploits
in the re-use of random values across multiple executions of
the protocol. A notable attack applicable to Passkey Entry
outside of this construction is the Fixed Coordinate Invalid
Curve Attack [8], which exploits devices not verifying the y-
coordinate of a received Elliptic Curve Difﬁe-Hellman (ECDH)
public key to insert an erroneous value and trivially compute
the agreed upon DH key. Research has been conducted on the
use of short, user-authenticated strings (i.e. a passkey no more
than 20 bits long) for the authentication of a Difﬁe-Hellman
key [21], [30], [42], which demonstrated that security of such
schemes is achievable in certain models and mainly dependent
on the length of the passkey.
Other published attacks against Bluetooth pairing that use
auxiliary mechanisms to compromise device communications
include the BT–Ni˜no–MITM attack [22], Bluetooth Imperson-
ation AttackS (BIAS) [1], and Key Negotiation of Bluetooth
(KNOB) [2]. BT–Ni˜no–MITM exploits the un-authenticated
exchange of IO capabilities to force a downgrade to Just
Works for pairing, a protocol which Bluetooth acknowledges
provides no protection against active adversaries [10]. Al-
though BT–Ni˜no–MITM was originally published in regards
to Bluetooth BR/EDR v2.1-3, the attack remains current and
recommendations to alleviate this vulnerability [22] include
setting mandatory pairing methods for devices and displaying
messages to the user conﬁrming the pairing method desired.
BIAS and KNOB both affect the Bluetooth BR/EDR v2.1-
5.0 standardization and apply strictly to resumption after
successful pairing.
The above attacks are relevant when discussing the holistic
security of Bluetooth, yet these attacks do not address the
underlying security achieved by Passkey Entry. While it is
possible to require ephemeral passkeys in keeping with Blue-
tooth’s recommendation, and veriﬁcation of the y-coordinate of
the ECDH public key, these changes alone do not provide guar-
antees of security, as a systematic analysis of Passkey Entry is
lacking. Furthermore, the above mentioned analyses all treat
user-to-device communications as secure OOB channels and
disallow adversary actions on such channels – an assumption
falsiﬁed by attacks like Tap ‘n Ghost, Touchloggers, etc.
C. Modeling User-mediated Protocols.
Including user interaction in analysis saw early work in the
symbolic setting, including an analysis of Bluetooth Numeric
Comparison [15]. The user as a central component of the
model was ﬁrst introduced in the symbolic setting under the
concept of ceremonies [20]. Ceremonies capture the intuition
that there is no out-of-band communication, whether through
the user, network, or other devices; all possible network
communications, user to device interaction, displays, etc., can
affect security. These ideas were later used for a second
analysis of Numeric Comparison, which expanded adversarial
capabilities over the user-to-device channel to include Eaves-
drop and Spoof [14].
Using the user-to-device channel to exchange short, authen-
ticated passkeys between devices saw security investigation
under a computational setting by Peyrin and Vaudenay [37].
Although the user-to-device channel was considered as a
secure OOB channel outside of adversarial attack abilities
in that research, the user was included as an active partic-
ipant with the ability to pick random numbers or compare
values. Vaudenay [42] extended these modeling choices in
a subsequent investigation of user-mediated protocols using
passkeys where the adversary was allowed to delete, replay,
or delay messages on the OOB channel, but not modify or
create them. Thus, such modeling would not capture attacks
such as Tap n’ Ghost, as message modiﬁcation is out-of-
scope and channels. Notably, the user-device channels were
also treated in a combined way, vs. allowing separate action
on each device. Vaudenay’s adversarial construction was also
mirrored in Laur and Nyberg’s security analysis of the MANA
IV protocol, a precursor to Numeric Comparison [30]. We
expand on these initial analyses by also giving the adversary
the capability to modify and create user-to-device messages
dependent on the CYBORG security framework in use, as