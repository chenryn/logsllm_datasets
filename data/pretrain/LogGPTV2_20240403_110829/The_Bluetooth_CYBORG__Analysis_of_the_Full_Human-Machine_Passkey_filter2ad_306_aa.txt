# Title: The Bluetooth CYBORG: Analysis of the Full Human-Machine Passkey Entry AKE Protocol

## Authors:
- Michael Troncoso, Naval Postgraduate School (Email: [PI_EMAIL])
- Britta Hale, Naval Postgraduate School (Email: [PI_EMAIL])

### Abstract
In this paper, we computationally analyze the Passkey Entry protocol in its entirety as a cryptographic authenticated key exchange (AKE), including user-protocol interactions that are typically ignored as out-of-band. To achieve this, we model the user-to-device channels, as well as the typical device-to-device channel, and adversarial control scenarios in both cases. Specifically, we capture adversarial control of device displays on the initiating and responding devices, as well as adversarial control of user input mechanisms, using a novel CYBORG model. This model enables realistic security analysis in light of published attacks on user-mediated protocols like Bluetooth, which leverage malware and device displays. We show that all versions of Passkey Entry fail to provide security in our model. Additionally, we demonstrate how slight modifications to the protocol can achieve stronger security guarantees for all current variants of passkey generation, including a newly proposed twofold mode of generation we term Dual Passkey Entry. These proof-of-concept modifications point to improved design approaches for user-mediated protocols. Finally, this work identifies categories of vulnerabilities based on compromise type that could be exploited in Bluetooth Passkey Entry.

**Keywords:** Bluetooth, Authenticated Key Exchange, CYBORG Protocols, Secure Connections, Secure Simple Pairing, Passkey Entry, Computational Analysis

## 1. Introduction
In traditional cryptographic protocols, user authentication is often achieved via a trusted third party, such as a certificate authority. However, in settings like the Internet of Things (IoT), a reliable connection to such an authority cannot always be guaranteed, and in some lightweight cases, certificates cannot be used or reliably updated. In such scenarios, protocols rely on the human user to affirm the identities of communicating parties via an out-of-band (OOB) channel, typically through the user inputting a PIN code or password. The Bluetooth protocol is one such example. Assuming a perfectly secure OOB channel simplifies the analysis of direct device-to-device communication, which was a sensible approach in the early days of protocol design and analysis.

However, assuming that an adversary cannot affect these channels is no longer realistic, as demonstrated by recent attacks leveraging malware to target the user interface, as well as established social engineering attacks. Notably, the Tap 'n Ghost attack, which specifically targets Bluetooth devices, refutes the idea that user communications should be ignored in protocol analysis. Therefore, it is critical to analyze protocols in their entirety, accounting for both user interaction and device-to-device communication.

Leading authenticated key exchange (AKE) models do not capture user-to-device (UtD) attacks due to their focus on device-to-device (DtD) communications. However, user-oriented attacks arise from adversarial control of the UtD channel or a combination of control over both UtD and DtD channels. While models capturing the UtD channel in the analysis of authentication protocols have emerged, there has been a lack of such modeling for key exchange until now, despite the standardized use of such protocols in practice.

We model adversarial abilities against key exchange on what is normally the OOB channel. The Tap 'n Ghost attack, for instance, focuses heavily on vulnerabilities in the (previously assumed perfect) OOB channel. This two-pronged assault on a user interface (without actively attacking device memory itself) first executes a Tag-based Adaptive Ploy, forcing a pop-up to display on a user's device, and then activates a Ghost Touch Generator, which spoofs touches on unwanted areas of the screen to force pairing with a corrupted device. Thus, the attack requires adversarial ability to create messages sent to a user from a device and to modify communications back from the user to the device. Other attacks, such as Touchloggers, the StrandHogg vulnerability, social engineering, and shoulder-surfing, also fall into this category and are systematically accounted for in our CYBORG model.

Bluetooth’s Passkey Entry generates and shares a random value (a passkey) via the user to effectively achieve entity authentication through user mediation. It was primarily designed for pairing when at least one device has a keyboard but not a numerical display, such as a Bluetooth keyboard attempting to pair with a modern computer. Recently, Passkey Entry has seen additional application when both devices have numerical keyboard and display capability, such as the manual pairing method between an Apple Watch and iPhone. Bluetooth has a long history of design advances and analysis, as well as published attacks. The Secure Simple Pairing mechanism, first published in Bluetooth v2.1 and updated to Secure Connections in v4.2, provides four methods of authenticated key exchange dependent on device input/output (IO) capabilities: Just Works, Numeric Comparison, Out-of-Band, and Passkey Entry. Of these, Numeric Comparison and Passkey Entry both rely on the user playing an active role in an authenticated key exchange (AKE). While Numeric Comparison has been analyzed computationally, Passkey Entry has not received detailed analysis. This raises the question: as a cyborg protocol, is Bluetooth Passkey Entry secure, and if so, under what conditions?

### 1.1 Attacking User-to-Device Communications
Social engineering and shoulder-surfing are well-accepted techniques for targeting user-device communication, but recent attacks on the UtD channel of cyborg-style protocols extend well beyond these and lead us to a baseline classification of attack vectors. For example, Touchloggers attempt to mimic the role of keyloggers by logging a user’s presses on a screen and then predicting the buttons that were pressed. The StrandHogg vulnerability functions by disguising malware as legitimate apps for the user to interact with, unknowingly allowing a hacker to compromise their device. Summarizing known attacks, we have the following four baseline attack vectors over the UtD channel: compromise of the communication channel from the initiating device to the user (type iu), the responding device to the user (type ru), the user to the initiating device (type ui), and the user to the responding device (type ur). We illustrate these attacks in Figure 2. We use these classifications to model adversarial capabilities by allowing for combinations of adversarial ShowUser and ControlUser queries in Section III.

### 1.2 Previous Work on Passkey Entry
Passkey Entry is the primary version of Bluetooth authenticated key exchange employed when two devices want to pair and at least one does not have display capability. Informally, it functions by having two devices exchange/receive a passkey for a user-to-device channel and proceed to commit to each bit of said passkey sequentially. This sequential construction, first proposed by [27], was devised to prevent offline dictionary attacks, such as those that plague legacy versions of Bluetooth authenticated key exchange.

Although Passkey Entry complicates an offline dictionary attack by committing to each bit of the passkey sequentially, it is more susceptible to other types of eavesdropping attacks. Other investigations into the security of Passkey Entry have been largely ad-hoc, involving exploits in the reuse of random values across multiple executions of the protocol. A notable attack applicable to Passkey Entry outside of this construction is the Fixed Coordinate Invalid Curve Attack, which exploits devices not verifying the y-coordinate of a received Elliptic Curve Diffie-Hellman (ECDH) public key to insert an erroneous value and trivially compute the agreed-upon DH key. Research has been conducted on the use of short, user-authenticated strings (i.e., a passkey no more than 20 bits long) for the authentication of a Diffie-Hellman key, demonstrating that security of such schemes is achievable in certain models and mainly dependent on the length of the passkey.

Other published attacks against Bluetooth pairing that use auxiliary mechanisms to compromise device communications include the BT–Niño–MITM attack, Bluetooth Impersonation AttackS (BIAS), and Key Negotiation of Bluetooth (KNOB). BT–Niño–MITM exploits the un-authenticated exchange of IO capabilities to force a downgrade to Just Works for pairing, a protocol which Bluetooth acknowledges provides no protection against active adversaries. Although BT–Niño–MITM was originally published in regards to Bluetooth BR/EDR v2.1-3, the attack remains current, and recommendations to alleviate this vulnerability include setting mandatory pairing methods for devices and displaying messages to the user confirming the pairing method desired. BIAS and KNOB both affect the Bluetooth BR/EDR v2.1-5.0 standardization and apply strictly to resumption after successful pairing.

While these attacks are relevant to the holistic security of Bluetooth, they do not address the underlying security achieved by Passkey Entry. Requiring ephemeral passkeys and verification of the y-coordinate of the ECDH public key, as recommended by Bluetooth, do not provide guarantees of security without a systematic analysis of Passkey Entry. Furthermore, the above-mentioned analyses all treat user-to-device communications as secure OOB channels and disallow adversary actions on such channels—an assumption falsified by attacks like Tap ‘n Ghost and Touchloggers.

### 1.3 Modeling User-mediated Protocols
Including user interaction in analysis saw early work in the symbolic setting, including an analysis of Bluetooth Numeric Comparison. The user as a central component of the model was first introduced in the symbolic setting under the concept of ceremonies, which capture the intuition that there is no out-of-band communication, whether through the user, network, or other devices; all possible network communications, user-to-device interactions, displays, etc., can affect security. These ideas were later used for a second analysis of Numeric Comparison, which expanded adversarial capabilities over the user-to-device channel to include Eavesdrop and Spoof.

Using the user-to-device channel to exchange short, authenticated passkeys between devices saw security investigation under a computational setting by Peyrin and Vaudenay. Although the user-to-device channel was considered a secure OOB channel outside of adversarial attack abilities in that research, the user was included as an active participant with the ability to pick random numbers or compare values. Vaudenay extended these modeling choices in a subsequent investigation of user-mediated protocols using passkeys where the adversary was allowed to delete, replay, or delay messages on the OOB channel, but not modify or create them. Thus, such modeling would not capture attacks such as Tap ‘n Ghost, as message modification is out of scope. Notably, the user-device channels were also treated in a combined way, versus allowing separate action on each device. Vaudenay’s adversarial construction was mirrored in Laur and Nyberg’s security analysis of the MANA IV protocol, a precursor to Numeric Comparison. We expand on these initial analyses by giving the adversary the capability to modify and create user-to-device messages dependent on the CYBORG security framework in use.