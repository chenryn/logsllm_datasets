clock match these patterns. Figure 10 shows an example of this
experiment performed on NVIDIA GTX 1080, where we use
a script to repeatedly generate a sequence of ‘a’, ‘b’, and ‘c’
in the search box of Google. After each ‘a’, there is a 200 ms
pause; after each ‘b’, there is a 350 ms pause; and, after each
‘c’, there is a 500 ms pause. The time series in Figure 10 is
derived using the techniques described in Section V. From this
ﬁgure, we can easily see that the appearance of peaks match
the ‘a’, ‘b’, ‘c’ keystroke timing pattern.
40
]
k
[
S
20
0
0
a
b
c
a
b
c
a
b
c
a
b
c
a
b
c
200ms
350ms
500ms
200ms
350ms
500ms
200ms
350ms
500ms
200ms
350ms
500ms
200ms
350ms
0.5
1
1.5
2
2.5
Time (s)
3
3.5
4
4.5
5
Fig. 10: Keystrokes generated using xdotool with a predeﬁned
pattern on Google (performed w.r.t. NVIDIA GTX 1080)
Next, we ask three people to quickly type “username”
and “password” in the corresponding boxes on the Facebook
login page. The keyboard is Dell L30U. Figure 11 illustrates
the processed EM signals of interest in terms of NVIDIA RTX
3060 when the fastest typist among the participants is typing.
From the results, we conﬁrm that the keystroke events can be
correctly detected and the inter-keystroke timing information
can be precisely derived. Notice that, even though we are able
to determine the time between the keystrokes by exploiting the
EM emanations of interest, we have not found any correlation
between the signal and the typed characters.
2
]
k
[
S
1
0
0
u
s
e r
n
a
m e
Tab
p
a
s
s
w
o
r
d
105ms 210ms 52ms
336ms
94ms 168ms 84ms
231ms
273ms
147ms
199ms 115ms 189ms
157ms
168ms
210ms
0.5
1
1.5
Time (s)
2
2.5
3
Fig. 11: Keystrokes typed by a user on Facebook (performed
w.r.t. NVIDIA RTX 3060)
We also need to mention that an attacker could have a hard
time to correctly detect keystroke events if a user were typing
on a webpage that is crowded with animations. Nevertheless,
this limitation does not restrict an attacker too much in reality
from learning the inter-keystroke timings related to typing very
valuable information like usernames and passwords, because it
is auspicious for the attacker that the login or sign-up pages of
many popular or important websites are deliberately designed
to be plain and simple (e.g., Google, Amazon, Twitter, PayPal,
Bank of America, and so forth).
B. Evaluation
In this evaluation, we mainly explore how close in time two
successive keystrokes can be such that they are still detectable
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1449
via exploiting the discovered DVFS-induced EM side-channel
vulnerability. To facilitate the evaluation, we use the keyboard
activity generation tools to create fake keystrokes, since they
are certainly much more precise in time than manual inputs.
As mentioned above, we focus on deriving the time between
successive keystrokes when typing on webpages in a browser.
Thus, the evaluation is primarily conducted in such a scenario.
Like in Section VI, we exclusively use Chrome as the browser.
We choose Google homepage and PayPal login page to be the
representative venues for the evaluation.
In terms of the setup of signal measurement (e.g., SDR
and antenna), it is the same as that described in Appendix A.
The captured EM signals are still processed using GNU Radio.
Currently, we do not use any automatic approach to identifying
the keystroke events in the processed data but only perform a
manual analysis.
TABLE VII: How close in time two keystrokes could be such
that they are still distinguishable from each other
Interval
RX 580
150 ms
RX 5600
N/A
RX 5700
N/A
GTX 1080
50 ms
GTX 1650
70 ms
RTX 3060
30 ms
We create sequences of keystrokes with the inter-keystroke
time interval being 10 ms, 20 ms, 30 ms, ··· , respectively.
We test each sequence on each GPU target machine listed in
Table I to check if all the keystrokes in the sequence can be
detected via the peak appearance and disappearance patterns in
the derived time series. Table VII shows the evaluation results.
From the results, we can see that NVIDIA RTX 3060 has the
highest time resolution, where keystrokes at 30 ms intervals
can be clearly recognized. (When it is lower than 30 ms, e.g.,
20 ms, more than 90% keystrokes can also be recognized.) In
terms of other NVIDIA GPUs, GTX 1080 and GTX 1650, a
high resolution can also be achieved.9
Compared to NVIDIA GPUs, the timing resolution in terms
of AMD RX 580 is much coarser, that is almost 150 ms.
The reason for this discrepancy is that when RX 580 is at
the second lowest performance level, it appears to stay there
longer than those tested NVIDIA GPUs. Hence, if two or more
keystrokes occur very closely in time, they can be treated as
one keystroke event. (Nevertheless, a recent study on human
typing behavior and performance has revealed that 250 ms
inter-keystroke time interval is already very fast for many
normal people [9].) The interesting cases are AMD RX 5600
and RX 5700, on which we cannot mount the discussed attack.
Even though their performance level changes correspondingly
when a webpage is being rendered (as shown in Section VI),
we ﬁnd that this switching behavior seldom happens when typ-
ing on webpages (namely, the GPU workloads due to normal
keystrokes do not always cause the DVFS of high-end AMD
GPUs to bump up their performance level). Therefore, we may
not exploit the DVFS-induced EM side-channel vulnerability
for this attack when these AMD GPUs are used.
9Additionally, we temporarily borrow two other NVIDIA GPUs, RTX 2060
Super and RTX 2080, from another group, and ﬁnd that they behave the same
as RTX 3060 and can reach 30 ms.
VIII. INEFFECTIVENESS OF DISABLING GPU DVFS
To mitigate the aforementioned exploitation possibilities, a
straightforward approach is to disable GPU DVFS by setting
the GPU to run at a speciﬁc performance level. However,
such a countermeasure has two major problems. The ﬁrst
one is that this countermeasure hurts either performance or
energy efﬁciency. If a relatively low performance level
is
selected, it will contradict with the purpose of using the GPU
for acceleration; yet, if a high performance level is selected,
it will be highly energy-inefﬁcient. The second and much
severer problem is that, when NVIDIA GPUs are used, this
countermeasure will unfortunately introduce another highly
exploitable EM side-channel vulnerability.
A. AM-Modulated EM Emanations
The reason for such ineffectiveness is that we have discov-
ered a new type of exploitable EM emanations appearing when
the performance level of an NVIDIA GPU is ﬁxed. Given an
NVIDIA GPU, a user may use tools included in the ofﬁcial
driver to set its performance level to be maximum. (Unlike
AMD GPUs whose driver allows us to ﬁx the performance
level at any deﬁned one, the performance level of NVIDIA
GPUs can only be ﬁxed at the highest.) We ﬁnd that when the
performance level is ﬁxed as such, there appears strong EM
emanations that are inadvertently AM-modulated by the GPU
memory accesses. In other words, the strength of these EM
emanations varies when the amount of data reads and writes
changes.
Interestingly, the EM emanations are around the frequency
that is one eighth the data rate in the cases of all NVIDIA
GPUs we have tested (i.e., GTX 1080, GTX 1650, and RTX
3060). Although we do not know the exact cause of such
EM signals at the moment, an educated guess is that they are
created by some clock driving certain components in the GPU
memory system. We leave the search for this clock to our
future work.
Since the emerging EM emanations will be AM-modulated
by the GPU memory accesses, even though the DVFS-induced
EM side-channel vulnerability were removed by using a ﬁxed
GPU memory clock frequency, information about the patterns
of GPU memory trafﬁc would be encoded into these new EM
emanations, which can be exploited to effectively identify the
high-level activities. Essentially, such EM emanations act as
a modulated carrier signal that bears the modulating activity
information and propagates to large distances.
As an example, Figure 12 shows the above-mentioned
carrier signal of interest that emerges when we set the per-
formance level of NVIDIA GTX 1650 to its maximum. Given
the 8 Gbps data rate of GTX 1650 at its maximum level, the
EM carrier signal on which we focus will be at 1000 MHz.
Yet, from Figure 12 (A), which illustrates the carrier signal of
interest in the frequency-domain, we can observe that it has a
number of spectral components in the frequency range from
996 MHz to 1000 MHz. Recall the discussion in Section IV-A
that SSC is used to vary the frequency of a clock over a range
for meeting EMC regulations. These components spread over
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1450
0
B
d
-2
-4
990
0.2
0
e
d
u
t
i
l
p
m
A
-0.2
0
(A) Frequency-domain representation
995
1000
Frequency (MHz)
1005
1010
(B) Time-domain representation
0.5
1
1.5
2
Time (s)
2.5
3
3.5
4
Fig. 12: Carrier signal emitted by NVIDIA GTX 1650 that
can be AM-modulated by GPU memory accesses
the 4 MHz range in Figure 12 (A) are caused by SSC, which
indicates that the carrier signal is due to a clock. Figure 12
(B) shows the signal in the time-domain and its amplitude will
change over time when AM-modulated.
e
d
u
t
i
l
p
m
A
0.2
0
-0.2
0
0.2
0
e
d
u
t
i
l
p
m
A
-0.2
0
e
d
u
t
i
l
p
m
A
0.2
0
-0.2
0
0.5
0.5
0.5
1
1
1
(A) Google
1.5
2
Time (s)
2.5
(B) Amazon
1.5
2
Time (s)
2.5
(C) Youtube
1.5
2
Time (s)
2.5
3
3
3
3.5
3.5
3.5
4
4
4
Fig. 13: The amplitude of carrier signal is modulated when
opening three websites in Chrome
To exemplify that the EM signal shown in Figure 12 can be
AM-modulated and exploitable, we examine the signal when
browsing different websites using Chrome. Like the example
demonstrated in Section VI-B, we use the three most popular
websites, Google, Amazon, and Youtube. As the performance
level is ﬁxed this time, we cannot exploit its switching patterns
to discern these websites. However, Figure 13 shows that the
EM signal arising after the DVFS-induced EM side-channel
vulnerability is mitigated can be exploited to infer the website
identities, as its amplitude is modulated by the GPU memory
accesses during webpage rendering, which should be different
in general if different pages are being rendered. Comparing
Figure 8 and Figure 13 with respect to the time axis, we can
note resemblances. For instance, the 1.67 Hz blinking cursor
behavior on Google search page is obvious in both cases. The
AM-modulated signal of interest certainly carries information
ﬁne-grained enough for being exploited.
Notice that, when GPU DVFS is disabled, we have found
this EM side-channel vulnerability only in NVIDIA GPUs
but not in AMD GPUs. Nevertheless, it does not mean that
disabling DVFS is a completely effective countermeasure in
terms of AMD GPUs. There may be some other undiscovered
EM vulnerabilities emerging when DVFS is disabled on AMD
GPUs. We will discuss some possible countermeasures in the
next section.
B. Evaluation and Discussion
To show the exploitability of such AM-modulated EM ema-
nations, we evaluate the performance of website ﬁngerprinting
attack on NVIDIA RTX 3060 with Windows being used as the
OS. The evaluation setting is exactly the same as the one used
in Table V, namely, the signals measured at N1, N2, N3, and
N4 are used to train a classiﬁcation model and the signals
measured at N5, N6, N7, and N8 are used for testing. At each
spot, it is still 50 signals being captured for each website.
The signal measurement setup is the same as that
in
Section VI-C with one exception – we tune the SDR to center
at 1875 MHz, as it is the frequency that is one eighth the
corresponding data rate when we set the performance level of
RTX 3060 to be the highest. We directly use the measured sig-
nal in the time-domain, as shown in Figure 13. Since it is also
time series data, we still use the same ResNet classiﬁcation
model. The evaluation results are shown in Figure 14.