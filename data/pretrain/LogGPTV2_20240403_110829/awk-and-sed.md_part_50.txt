在所有标记之前，一个特殊的序列将被插入，这又是由一个环境变量给出的。
匹配空行的正则表达式）。
分页符，
配这种行而不是其它的行（举例来说，如果你的源文件中的空行都可以解释
记的并不重要，你可以用你自己的约定，但它必须使一个正则表达式能恰好匹
“/*!”，在awk、nawk，shell和makefiles等中用“#!”）。这些点是如何标
最后一个特点是正确的得到分页符，这有点复杂。这里使用了一个技术，我称
这更适合于一个程序中经常有小的改变。
之间插入新的函数和这两个函数的次序改变了，那么匹配模式将无法工作。但
义的第一行和下一个函数定义的第一行。如果这个源文件改变了，在两个函数
很实用的：如果你只想显示C程序的一个特定的函数，你只需要给出这个函数定
关）来选择这部分。你必须标识要包含第--行或者不包含第一行。我发现这是
如果你希望只处理文件的一部分，你可以用两个正则表达式（用另外一个开
格式可以用一个环境变量来设置。
有一个转换），你可以在每行前面生成行的编号（可选的转换）。这些编号的
“\”被转变为“\e”
人则不然，我将给你一些线索。基本上，这个程序简单地监视一些字符，例如
程序用注释的形式给出了一个完整描述。但是这些描述对我来说太多而对其他
前文件；否则将通过它们的原始文件来生成新文件。
格式，因此如果我“安排”文档来打印，预处理源文件将检查他们是否仍为当
档中，并且根据这些预处理文件制定了格式。而这些文件又依赖于他们的原始
使用makefiles整个过程将更自动化。我将源文件的预处理版本放入到troff文
里就命名为readsource。）
文本中。我这封信发送的就是这个awk程序。（他没有给我这个程序的名字，这
（.DS）显示。完成这以后，troff将收集尽可能多的行以填充到当前页上。我
为“你可以在这里中断”。那些点被标记为特殊的行（我在C程序中用
# SH-SCRIPT: Source to Troff Pre-Formatter
# PROJECT: Printing Tools
# Copyright 190 by EDV-Beratung Martin Weitzel, D-6100 Darmstadt 
#! /bin/sh
，那么你就可以很简单的将这个方面贯彻下去，而所要做的仅仅是编写
QQ群：
，并在每行的前面写上“/&”。制表符被扩展为空格（它
50192241
第十三章
脚本的汇总
为
---
## Page 370
#
#
#
#
#
#
#
#
#
#
#
#
#
中
#
#
#
#！
#
[""· al!] [ed d-] [ed a-] [ed q-] [u-] [p x-] o$.=avsn 
包含一个%d格式的说明符
如果使用-n选择，
(在发现问题前，已经开始处理).
"pat"在使用前没有被测式过
警告：
普通的unix环境，包括 awk.
预处理：
PBRK string, to mark page breaks. (Default: see below)
NFMT specify format for line numbers (Default: see below)
下面是环境中使用的变量：
-p pat
-e
-b pat
-n 
-x d 
下面是提供的选项：
"pat"
提要：
包括行的个数及选择有趣的部分
可以处理一些其他的事 
当修改源文件上面的问题一个也不会出现时
相关的字符，此外从嵌入的反斜杠开始。
如果有修改，以点（）或单引号(’），或与其
包含任意的文件时将会在行中出现问题
被包含在nroff/troff-input中，当在nroff/troff-input中
这个程序是执行源文件的一个工具，所以它们能
 pat
QQ群：
是awk提供的“扩展正则表达式
将制表符扩展为"d"个空格
可能有分页符 (默认没有分页符)
在包含“pat”的行的前面
其中不包括这一行 (默认在结尾)
在包含“pat”的行结束输出
其中包含这一行 (默认开头)
从包含"pat"的行开始输出
源行的个数（参看：NFMT）
50192241
，"NFMT"必须
- 388-
第十三章
脚本的汇总
---
## Page 371
-x) shift;
case $p in
esac
1) shift; sk=0; continue
case $sk in 
for p 
xtabs=0 nfmt= bpat= epat= ppat=
中
中
#
#
中
#
#
#
测式/设置选项
! CSOPT
发行：25．Nov 1989，Version 1.00
作者：Martin Weitzel, D-6100 DA (PI:EMAIL)
如果有其他的错误，请发信给我
利用gsub ()这些是程序的环境限制于nawk中。
如何来处理它。如果你不需要制表符的扩展，你可以修改程序
但是制表符的扩展是更困难的，因为我无法想像用sed 
而这也可以用sed 的s/\\/\e/g’来处理。
现在处理反斜杠的代价是很昂贵的
但可能被作为一个更愉快实现的原型.
BUGS:
另外一个选择是
反斜杠要想被输入也必须用两个 
加上反斜杠作为转义符.
在“NFMT"和"PBRK"中，其中包含的双引号必须在前面
(后者只在一些特殊情况下是需要的，但对其他情况也没有伤害)
*)↑>&2 echo "$0: bad value for option -x: $1"; exit 1;↓
[1-9]|1[0-9]） xtabs=$1; sk=1;;
case $1 in 
QQ群：
50192241
389.
第十三章
脚本的汇总
---
## Page 372
BEGIN {
#.为制表符扩展，
awk’
#
#
#! MPROC
done
*) break 
#！限制选择范围
esac
#
b
(n)
下面是"真正的起作用的工作"
按要求处理一个输入行
line = ""; ll = 0; 
for 
’$[bpat:+’
’$lepat:+'
shift; ppat=$1; sk=1
if
shift; epat=$1; sk=1
nfmt="$ INFMT:-\·]"; shift ;; 
；
esac
(skip) next;
else
c = substr($0， i， 1);
(i = 1;i  /dev/null
gsub(/\V， "\le")
#！按要求处理一个输入行
sys 0.20
user 1.22
$ timex readsource -x 3 readsource > /dev/null
real 0.44
if ($o~ 
gsub(/\t/， sp)
if （xt && $O～"\t"）
real 1.56
但很不清楚。
QQ群：
50192241
392
第十三章
，使用substr（获得字符
脚本的汇总
---
## Page 375
是在很久以前做的。它向sed脚本传递参数的方式也很有趣。我知道，它本应该
从disktab中得到一个eagle条目。我现在知道它可以在C或者Perl中完成，但我
从termcap中抽取vt100条目，而：
的文件，例如，disktab。举例说明：
被写入sh而不是csh中。
这是一个sed脚本，我用它来提取termcap条目。它可以处理任何和termcap类似
由Tom Christiansen提供
#!/bin/csh -f
$ gent eagle /etc/disktab
$ gent vt100
rescan:
set argc = $#argv 
gsub(/\V, "\le")
if (index($O,
gsub(/\t/，sp)
if （xt && index($O，"\t") >0 ）
#！按要求处理一个输入行
set
set
set
set
if（$argc 〉0＆& $argc〈3） then
 noback=""
squeeze = 0 
dollar =’$'
 noglob
if （"$1" =~ -*） then 
QQ群：
if （"-squeeze" =~ $1*） then 
nospace=""
"1"）>0)
shift 
set squeeze = 1 
set noback=' 
50192241
- 393 -
s/\V//g'
自
第十三章 
脚本的汇总
---
## Page 376
/^[]*|$lentry][|:］/ {\
"/~$tentry] [l:]/ {\ 
sed -n -e \ 
八\\$[dollar}/{\
$[nospacel\
一
$[nospace}\
二
bxl
三
二
三
\\$[dollar}/ \
endif 
else
#
[noback}\
Xl
[termcapfi le]"
 exit 1
echo "usage:
usage:
endif 
else
set entry = "$1"
endif 
QQ群：
 set file = "$2"
endif 
else
 goto usage
echo "Bad switch: $1"
goto rescan
@ argc --
50192241
‘basename $O‘ [-squeeze] entry
394
第十三章 
脚本的汇总
---