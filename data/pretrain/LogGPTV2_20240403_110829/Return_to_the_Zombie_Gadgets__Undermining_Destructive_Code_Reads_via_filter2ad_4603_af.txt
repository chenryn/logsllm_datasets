### Work of Crane et al. on Execute-Only Primitives

The work by Crane et al. [16] introduces an execute-only primitive and fully separates code and data at the compiler level, thereby eliminating the need for destructive reads. However, these techniques require either recompiling open-source software (instead of using binary distributions) or relying on application developers to provide updated binaries for closed-source software. Binary-compatible mitigations, on the other hand, transparently protect both open and closed-source applications without requiring recompilation. The widespread adoption of tools like Microsoft's Enhanced Mitigation Experience Toolkit (EMET) [33] underscores the demand for such binary-compatible solutions.

### Security Analysis and Diversification Techniques

Moving forward, any security analysis of binary-level execute-only memory protections that rely on destructive code reads must consider the underlying guarantees of the code diversification technique in use. Achieving complete randomization coverage, such as through basic block reordering [47], is particularly challenging for complex closed-source applications. Systems like Heisenbyte [45] and NEAR [48] are designed to address this, but best-effort techniques like in-place code randomization remain the only viable options. Unfortunately, our results show that these schemes are insufficient when destructive reads are the primary protection against partial inference of code bytes. Additional protections are necessary. We hope this work motivates further research into advanced binary-level code diversification techniques that can withstand code association attacks, as discussed in this paper.

### Mitigating Attacks via Library Reloads

Simpler solutions are available to mitigate attacks that exploit code non-persistence through library reloads. One straightforward approach is to disallow the unloading of libraries, although this may increase memory utilization and reduce flexibility for complex applications. A more challenging but effective solution would be to re-randomize each time a library is loaded. This re-randomization must be performed in a way that does not hinder support for shared libraries. Even more difficult is the design and implementation of practical techniques for re-randomizing all libraries each time a process loads (e.g., in a new browser tab). The use of position-independent code [30] will likely be required to achieve this goal, though supporting shared libraries remains a significant challenge. Alternatively, frameworks suggested by Crane et al. [17] and Bigelow et al. [8] could serve as a basis for frequent re-randomizations, though they currently lack support for closed-source applications.

### Conclusion

The emergence of JIT-ROP attacks, which leverage memory leak vulnerabilities to bypass code diversification protections, has driven research into defenses that enforce execute-only memory. This prevents runtime disclosure of code by prohibiting read accesses on executable memory. From a practical perspective, only a few approaches [45, 4] can be applied to protect complex commercial off-the-shelf (COTS) programs, such as closed-source browsers and document viewers.

In this paper, we demonstrate that the recently proposed notion of destructive code reads [45, 48], which allows data reads from executable memory but prevents the subsequent execution of previously read data, is inherently fragile. Although this approach aims to balance compatibility with complex binaries and protection against runtime code disclosure, allowing an attacker to perform even destructive reads can undermine the provided protection.

To illustrate this, we presented four methods by which an attacker can pinpoint the location and state of gadgets. Specifically, code cloning via JIT code generation and code non-persistence via shared library or process reloading rely on destructively reading copies of generated or existing code, allowing the reuse of gadgets that have not been previously read. Code inference, on the other hand, relies on reading preceding bytes related to the randomized state of gadgets. These techniques highlight the need for further research into binary-compatible code randomization schemes that can be used in conjunction with execute-only memory protection to prevent gadget inference through code cloning or implicit reads.

### Acknowledgments

We express our gratitude to Nathan Otterness, Micah Morton, and Teryl Taylor for their insightful discussions. We also thank the anonymous reviewers for their valuable suggestions. This work is supported in part by the National Science Foundation under awards 1421703 and 1127361 (with a supplement from the Department of Homeland Security under its Transition to Practice program), and the Office of Naval Research under award N00014-15-1-2378. Any opinions, findings, and conclusions or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Department of Homeland Security, or the Office of Naval Research.

### References

[References listed here, formatted as per the original text]

---

This revised version enhances clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.