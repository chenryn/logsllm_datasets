# Debugging and Reversing ALPC

## Identifying ALPC Server and Client Processes

### Get ALPC Server Processes (Those that Create an ALPC Port)
```powershell
Get-ChildItem -Path "C:\Windows\System32\" -Include ('*.exe', '*.dll') -Recurse -ErrorAction SilentlyContinue | % {
    $out = & "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\dumpbin.exe" /IMPORTS:ntdll.dll $_.VersionInfo.FileName
    If ($out -like "*NtAlpcCreatePort*") {
        Write-Host "[+] Executable creating ALPC Port: $($_.VersionInfo.FileName)"
        Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out | % { "`n$_" })" | Out-File -FilePath NtAlpcCreatePort.txt -Append
    }
}
```

### Get ALPC Client Processes (Those that Connect to an ALPC Port)
```powershell
Get-ChildItem -Path "C:\Windows\System32\" -Include ('*.exe', '*.dll') -Recurse -ErrorAction SilentlyContinue | % {
    $out = & "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\dumpbin.exe" /IMPORTS:ntdll.dll $_.VersionInfo.FileName
    If ($out -like "*NtAlpcConnectPort*") {
        Write-Host "[+] Executable connecting to ALPC Port: $($_.VersionInfo.FileName)"
        Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out | % { "`n$_" })" | Out-File -FilePath NtAlpcConnectPort.txt -Append
    }
}
```

## Identifying Handles to ALPC Port Objects

### Using WinDbg
You can use the following WinDbg command to identify handles to ALPC port objects:
```shell
!handle 0 2 0 ALPC Port
```
Note that this method is very slow and may take several hours to complete.

### Using NtApiDotNet
James Forshaw's NtApiDotNet provides a more efficient way to identify ALPC port objects and gather statistics. You can find the tool [here](https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/main/NtApiDotNet/NtAlpcNative.cs).

## Event Tracing for Windows (ETW)

Although ALPC is undocumented, some ALPC events are exposed as Windows events and can be captured using ETW. One useful tool for this is ProcMonXv2 by zodiacon.

### Identify ALPC Communications with ETW using ProcMonXv2
After filtering for the five exposed ALPC events, you can see over 1000 events, indicating frequent ALPC usage. However, ETW does not provide deep insights into ALPC communication channels but helps in identifying ALPC targets.

## Impersonation in ALPC

### Impersonation and Non-Impersonation
In ALPC, impersonation routines are bound to messages, allowing both client and server to impersonate the user on the other side. For impersonation to occur, the impersonated party must allow it, and the impersonating party must hold the `SeImpersonate` privilege.

#### Conditions for Allowing Impersonation
1. **Through the PortAttributes**:
   ```c++
   // QOS
   SecurityQos.ImpersonationLevel = SecurityImpersonation;
   SecurityQos.ContextTrackingMode = SECURITY_STATIC_TRACKING;
   SecurityQos.EffectiveOnly = 0;
   SecurityQos.Length = sizeof(SecurityQos);

   // ALPC Port Attributes
   PortAttributes.SecurityQos = SecurityQos;
   PortAttributes.Flags = ALPC_PORTFLG_ALLOWIMPERSONATION;
   ```

2. **Through the ALPC_MESSAGE_SECURITY_ATTRIBUTE**:
   ```c++
   pMsgAttrSend = setup_sample_message_attributes(hSrvCommPort, NULL, ALPC_MESSAGE_SECURITY_ATTRIBUTE); // setup security attribute
   pMsgAttrSend->ValidAttributes |= ALPC_MESSAGE_SECURITY_ATTRIBUTE; // specify it to be valid for the next message
   NtAlpcSendWaitReceivePort(...); // send the message
   ```

### Server and Client Impersonation
- **Server Impersonating a Client**: The client must specify either of the two options above.
- **Client Impersonating a Server**: The server must provide the `ALPC_MESSAGE_SECURITY_ATTRIBUTE`.

### Finding Vulnerable Targets

#### Client Impersonation Attempt
I attempted to find clients trying to connect to non-existent server ports to check for impersonation conditions. While I managed to use breakpoints in the kernel to spot some cases, I haven't found any interesting ones that would allow client impersonation.

#### Server Impersonation Attempt
I located several ALPC connection ports and instructed my ALPC client to connect to them to verify if they:
1. Allow me to connect.
2. Send any actual messages back.
3. Send impersonation message attributes along with a message.

For all the ALPC connection ports I checked, I received short initialization messages with `ALPC_MESSAGE_CONTEXT_ATTRIBUTE`, which is not useful for impersonation.

## Other Attack Vectors

### Failed Impersonation Attempts
Finding such occasions involves:
1. A server process opening an ALPC port that your client can connect to.
2. The server accepting connection messages and attempting to impersonate the client.
3. The server not checking if the impersonation succeeds or fails.
4. The server running in a different security context than your client.

### Memory Exhaustion Attacks
ALPC message attributes, such as `ALPC_DATA_VIEW_ATTR`, can be used to send information about a mapped view. If the receiver fails to free a mapped view, the sender can fill the receiver's memory space with views of arbitrary data, leading to a heap spray attack.

### Unfreed Message Objects
Finding vulnerable targets involves:
1. Identifying processes using ALPC communication.
2. Checking how the target process handles ALPC message attributes.
3. Getting creative about abusing non-freed resources, such as exhausting process memory space.

### Example: Memory Spraying a Vulnerable ALPC Application
I flooded my sample ALPC server with 20KB views, which worked because I did not free any allocated attributes. This can lead to memory exhaustion and potentially crash the process or the OS.

### Interesting Side Note
Alex Ionescu mentions that the Windows Memory Manager allocates memory regions on 64KB boundaries. This allows attackers to create and map views of arbitrary size, leading to memory exhaustion.

## Conclusion

ALPC is complex and undocumented, but vulnerabilities within it can be powerful due to its ubiquity in Windows. To get started, use tools like ProcMonXv2 and explore ALPC client and server code. For a deeper understanding, watch Alex Ionescu's talk on LPC, RPC, and ALPC.

### Appendix A: The Use of Connection and Communication Ports
- **Connection Port**: Used by the server to listen and send messages to all connected clients.
- **Communication Port**: Used internally by the OS to tie messages to specific clients and for impersonation.

### References
- **Projects and Tools**:
  - [Microsoft Terminal ALPC Example](https://github.com/microsoft/terminal/blob/main/src/interactivity/onecore/ConIoSrvComm.cpp)
  - [DownWithUp ALPC Example](https://github.com/DownWithUp/ALPC-Example)
  - [DynamoRIO DrMemory](https://github.com/DynamoRIO/drmemory)
  - [PythonForWindows](https://github.com/hakril/PythonForWindows)
  - [NtApiDotNet](https://docs.rs/)
  - [Google Project Zero Sandbox Attack Surface Analysis Tools](https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools)
  - [Process Hacker NtLpcApi](https://processhacker.sourceforge.io/doc/ntlpcapi_8h.html)
  - [bnagy w32](https://github.com/bnagy/w32)
  - [ctftool](https://github.com/taviso/ctftool)

- **Talks and Slides**:
  - [SyScan'14 Singapore: All About The Rpc, Lrpc, Alpc, And Lpc In Your Pc By Alex Ionescu](https://www.youtube.com/watch?v=your-video-id)
  - [Hack.lu 2017 A view into ALPC-RPC by Clement Rouault and Thomas Imbert](https://www.youtube.com/watch?v=your-video-id)
  - [ALPC Fuzzing Toolkit Slides](https://your-link-to-slides.com)

- **Other Posts**:
  - [Debugging and Reversing ALPC](https://your-link-to-post.com)
  - [Offensive Windows IPC Internals 2: RPC](https://your-link-to-post.com)
  - [Offensive Windows IPC Internals 1: Named Pipes](https://your-link-to-post.com)