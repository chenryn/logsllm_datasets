title:Protecting Cryptographic Keys from Memory Disclosure Attacks
author:Keith Harrison and
Shouhuai Xu
Protecting Cryptographic Keys From Memory Disclosure Attacks
Keith Harrison and Shouhuai Xu
Department of Computer Science, University of Texas at San Antonio
{kharriso,shxu}@cs.utsa.edu
Abstract
Cryptography has become an indispensable mechanism
for securing systems, communications and applications.
While offering strong protection, cryptography makes the
assumption that cryptographic keys are kept absolutely se-
cret. In general this assumption is very difﬁcult to guarantee
in real life because computers may be compromised rela-
tively easily. In this paper we investigate a class of attacks,
which exploit memory disclosure vulnerabilities to expose
cryptographic keys. We demonstrate that the threat is real
by formulating an attack that exposed the private key of an
OpenSSH server within 1 minute, and exposed the private
key of an Apache HTTP server within 5 minutes. We pro-
pose a set of techniques to address such attacks. Experi-
mental results show that our techniques are efﬁcient (i.e.,
imposing no performance penalty) and effective — unless a
large portion of allocated memory is disclosed.
Keywords: cryptographic key security, memory disclosure.
1 Introduction
The utility of cryptography is based on the assumption
that cryptographic keys are kept absolutely secret. This as-
sumption is very difﬁcult to guarantee in real-life systems
due to various software bugs in operating systems and ap-
plications. In this paper we focus on a class of attacks that
exploit memory disclosure vulnerabilities, called memory
disclosure attacks. Such an attack can expose the content
of (a portion of) computer memory, and thus cryptographic
keys in the disclosed memory.
Our contributions. First, we thoroughly assess (Section 2)
the damage of memory disclosure attacks against the pri-
vate keys of OpenSSH servers and Apache HTTP servers.
The attacks exploit two reported vulnerabilities. Our exper-
iments show that such attacks effectively expose the RSA
private keys of the servers.
Second, we propose a method (Section 3) for helping un-
derstand the attacks (e.g., why are they so powerful?). The
core of the method is a software tool we developed to help
analyze the content of computer memory. Through our soft-
ware tool, we found that disclosure a portion of either allo-
cated memory or unallocated memory would effectively ex-
pose cryptographic keys. This is interesting because exist-
ing literature often emphasized the importance of clearing
unallocated memory (cf. Viega et al. [18, 19] and Chow et
al. [6]), but not necessarily taking care of allocated memory.
Third, our analyses on the attacks suggest that one
should ensure (i) a cryptographic key only appears in al-
located memory a minimal number of times (e.g., one), and
(ii) unallocated memory does not have a copy of crypto-
graphic keys. We thus proceed to propose a set of con-
crete solutions. In particular, our method for minimizing
the number of copies of a private key in allocated memory,
to our knowledge, is novel in the sense that it takes full ad-
vantage of the operating system “copy on write” memory
management policy [17] – a technique that was not origi-
nally motivated for security purpose. We conduct case stud-
ies by applying our solutions to protect the private keys of
OpenSSH servers and of Apache HTTP servers. Exper-
imental results show that our solutions can eliminate at-
tacks that disclose unallocated memory, and can mitigate
the damage due to attacks that disclose a small portion of
allocated memory. It is stressed, however, that if the portion
of disclosed memory is large (e.g., about 50% as shown in
our case study), the key is still exposed in spite of the fact
that our solutions can minimize the number of key copies in
memory. Therefore, our investigation may serve as an evi-
dence that in order to completely avoid key exposures due
to memory disclosures, special hardware is necessary.
Related work. The problem of ensuring the secrecy of
cryptographic keys (and their functionalities thereof) has
been extensively investigated by the cryptography commu-
nity. There have been many novel cryptographic meth-
ods that can mitigate the damage caused by the compro-
mise of cryptographic keys. Notable results include the no-
tions of threshold cryptosystems [8], proactive cryptosys-
tems [15], forward-secure cryptosystems [1, 2, 11], key-
insulated cryptosystems [9], and intrusion-resilient cryp-
tosystems [12]. The present paper falls into an approach
that is orthogonal to the cryptographic approach. Clearly,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:07 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007our mechanisms can be deployed to secure traditional cryp-
tosystems, as evidently shown in this paper. Equally, our
mechanisms can be utilized to provide another layer of pro-
tection for the afore-mentioned advanced cryptosystems.
It has been deemed as a good practice in developing
secure software to clear the sensitive data such as crypto-
graphic keys, promptly after use (cf. Viega et al. [18, 19]).
Unfortunately, as conﬁrmed by our experiments as well as
an earlier one due to Chow et al. [5], this practice has not
been widely or effectively enforced. Chow et al. [5] inves-
tigated the propagation of sensitive data within an operating
system by examining all places the sensitive data can re-
side. Their investigation was based on whole-system simu-
lation via a hardware simulator, namely the open-source IA-
32 simulator Bochs v2.0.2 [3]. More recently, Chow et al.
[6] presented a strategy for reducing the lifetime of sensitive
data in memory called “secure deallocation,” whereby data
is erased either at deallocation or within a short, predictable
period afterwards in general system allocators. As a re-
sult, their solution can successfully eliminate attacks that
disclose unallocated memory. However, their solution has
no effect in countering attacks that may disclose portions
of allocated memory. Whereas, our solutions can not only
eliminate attacks that disclose unallocated memory, but also
mitigate the damage due to attacks that disclose a small por-
tion of allocated memory. That is, our solutions provide
strictly better protections.
There is some loosely related work. Broadwell et al. [4]
explored the core dump problem to infer which data is sen-
sitive based on programmer annotations, so as to facilitate
the shipment of crash dumps to application developers with-
out revealing users’ sensitive data. Provos [16] investigated
a solution to use swap encryption for processes in posses-
sion of conﬁdential data. A cryptographic treatment on se-
curely erasing sensitive data via a small erasable memory
was presented by Jakobsson et al. [7].
Outline. In Section 2 we evaluate the severity of the mem-
ory disclosure problem. In Section 3 we show how to un-
derstand the attacks in detail based on our software tool. In
Section 4 we present a set of solutions to countering mem-
ory disclosure attacks, whose concrete instantiations to pro-
tect private keys of OpenSSH servers are explored in Sec-
tion 5. We conclude the paper in Section 6. Due to the
space limitation, we defer many details (including the treat-
ment on Apache HTTP servers) to the full version of the
present paper [13].
2 Threat Assessment: Initial Experiments
In this section we report our experiments that exploit two
speciﬁc memory disclosure vulnerabilities to expose the
RSA private keys of an OpenSSH Server and of an Apache
HTTP server. The ﬁrst vulnerability was reported in [14],
which states that Linux kernels prior to 2.6.12 and prior to
2.4.30 are vulnerable to the following attack: directories
created in the ext2 ﬁle systems could leak up to 4072 bytes
of (unallocated) kernel memory for every directory created.
The second vulnerability was reported in [10], which states
that a portion of memory of Linux kernels prior to 2.6.11
may be disclosed due to the misuse of signed types within
drivers/char/n tty.c. The disclosed memory may
have a random location and may be of a random amount.
Both vulnerabilities can be exploited without requiring the
root privilege.
Recall that the RSA cryptosystem has a public key
(e, N) and a private key (d, N), where N = P Q for some
large prime P and Q. In practice, a variation of the Chi-
nese Remainder Theorem (CRT) is utilized to speed up
the signing/decryption procedure, meaning that a RSA pri-
vate key actually consists of 6 distinct parts: d, P , Q, d
mod (P − 1), d mod (Q − 1), and Q−1 mod P . Notice
that there is a special PEM-encoded private key ﬁle, which
contains the whole private key. For simplicity, we only con-
sider d, P , Q, and the PEM-encoded ﬁle because disclose
of any of them immediately leads to the compromise of the
private key. Therefore, we call any appearance of any of
them “a copy of the private key.”
Our experiments ran in the following setting: the server
machine has a 3.2GHz Intel Pentium 4 CPU and 256MB
the operating system is Gentoo Linux with a
memory;
2.6.10 Linux kernel;
the OpenSSH server is OpenSSH
4.3 p2; the Apache HTTP server is Apache 2.0.55 (com-
piled using the prefork MPM); the OpenSSL library ver-
sion is 0.9.7i.
On the power of attacks exploiting the vulnerability re-
ported in [14]. Our experimental attacks proceeded as fol-
lows. (i) We plugged a small 16MB USB storage device
into the computer running OpenSSH (or Apache HTTP)
server.
(ii) We wrote a script to fulﬁll the following. In
the case of OpenSSH server, it ﬁrst created a large number
of SSH connections to localhost; whereas in the case of
Apache HTTP server, it ﬁrst instructed a remote client ma-
chine to create a large number of HTTP connections to the
server. Then, the script immediately closed all connections.
Finally, the script created a large number of directories on
the USB device, where each directory created revealed less
than 4,072 bytes of memory onto the USB device.
(iii)
We removed the USB device, and then simply searched the
USB device for copies of the private key. Experimental re-
sults are summarized as follows.
The case of OpenSSH server: Figure 1(a) depicts
the average (over 15 attacks) number of copies of private
keys found from the disclosed memory on the USB device,
with respect to the number of localhost SSH connec-
tions (the x-axis) and the number of created directories (the
y-axis). For example, by establishing 500 total connections
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:07 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007OpenSSH RSA Private Keys Found Per Run
OpenSSH RSA Private Keys Found Per Run
Apache RSA Private Keys Found Per Run
Apache RSA Private Keys Found Per Run
RSA Private Keys
RSA Private Keys
RSA Private Keys
RSA Private Keys
RSA Private Keys
RSA Private Keys
RSA Private Keys
RSA Private Keys
 30
 25
 20
 15
 10
 5
 30
 25
 20
 15
 10
 5
 0
 1
 0.8
 0.6
 0.4
 0.2
 1
 0.98
 0.96
 0.94
 0.92
 0.9
 0.88
 0.86
 20
 15
 10
 5
 18
 16
 14
 12
 10
 8
 6
 4
 2
 0
 1
 0.8
 0.6
 0.4
 0.2
 10000
 9000
 8000
 7000
 6000
Total Directories
 5000
 4000
 3000
 2000
 1000
 50
 100  150  200  250  300  350  400  450  500
Total Connections
 10000
 9000
 8000
 7000
 6000
Total Directories
 5000
 4000
 3000
 2000
 1000
 50
 100  150  200  250  300  350  400  450  500
Total Connections
 10000
 9000
 8000
 7000
 6000
Total Directories
 5000
 4000
 3000
 2000
 1000
 50
 100  150  200  250  300  350  400  450  500
Total Connections
 10000
 9000
 8000
 7000
 6000
Total Directories
 5000
 4000
 3000
 2000
 1000
 50
 100  150  200  250  300  350  400  450  500
Total Connections
 1
 0.98
 0.96
 0.94
 0.92
 0.9
 0.88
 0.86
 0.84
 0.82
 0.8
 0.78
(a) OpenSSH: # of key copies found
(b) OpenSSH: success rate of attacks
(c) Apache: # of key copies found
(d) Apache: success rate of attacks
Figure 1. OpenSSH vs. Apache with respect to the vulnerability reported in [14]
and creating 1,000 directories (i.e., disclosing up to about 4
MBytes memory), we were able to recover about 8 copies
of the private key. From a different perspective, Figure 1(b)
depicts the average success rate of attacks (i.e., the rate of
the number of successful attacks over the total number of 15
attacks), which clearly states that an attack almost always
succeeds. In this case, an attack took less than 1 minute.
The case of Apache HTTP server: Figure 1(c) shows
the average (over 15 attacks) number of copies of private
keys found on the USB device, with respect to the num-
ber of connections (the x-axis) and the number of created
directories (the y-axis). For example, by establishing 500
connections and creating 1,000 directories (i.e., disclosing
up to 4 MBytes memory), we were able to recover about 5
copies of the private key. From a different perspective, Fig-
ure 1(d) depicts the average success rate of attacks, which
clearly states that an attack almost always succeeds. In this
case, an attack took less than 5 minutes.
On the power of attacks exploiting the vulnerability re-
ported in [10]. Our experimental attack was orchestrated
by a script that fulﬁlls the following: (i) In the case of
OpenSSH server, it created a large number of SSH connec-
tions to localhost. In the case of Apache HTTP server,
it instructed a remote computer to establish a large number
of HTTP connections to the server. (ii) The script executed
a program (due to [10]) to dump a piece of memory to a ﬁle,
which was then searched for the private key. The size and
location of the disclosed memory varied, dependent on the
terminal running the exploit. The exploit disclosed about
50% of the memory (i.e., 128 MBytes) on average. Experi-
mental results are summarized as follows.
The case of OpenSSH server: Figure 2(a) shows the
average (over 20 attacks) number of copies of private keys