750
)
(
e
r
o
c
S
e
t
u
l
o
s
b
A
t
e
g
:
:
m
a
x
E
:
w
o
l
f
-
a
t
a
d
vptr 
size_t scoreA
size_t scoreB
size_t scoreC
...
char *topic
vptr
size_t score
char* buffer
size_t len
+
0
t
c
e
j
b
o
)
m
a
x
E
(
1
t
c
e
j
b
o
)
g
n
i
r
t
S
e
l
p
m
i
S
(
Fig. 5: Overlapping counterfeit objects of types Exam and
SimpleString
§V) operate on both ﬁelds and arguments as is the case for
SimpleString::set().
Due to divergent default calling conventions, we describe
different techniques for passing arguments to vfgadgets for
x64 and x86 in the following.
1) Approach Windows x64:
In the default x64 calling
convention on Windows, the ﬁrst four (non-ﬂoating point)
arguments to a function are passed through the registers rcx,
rdx, r8, and r9 [35]. In case there are more than four
arguments, the additional arguments are passed over the stack.
For C++ code, the this-ptr is passed through rcx as the
ﬁrst argument. All four argument registers are deﬁned to be
caller-saved; regardless of the actual number of arguments a
callee takes. Accordingly, virtual functions often use rdx, r8,
and r9 as scratch registers and do not restore or clear them
on returning. This circumstance makes passing arguments to
vfgadgets simple on x64: ﬁrst, a vfgadget is executed that
loads one of the corresponding counterfeit object’s ﬁelds into
rdx, r8, or r9. Next, a vfgadget is executed that interprets
the contents of these registers as arguments.
We refer to vfgadgets that can be used to load argument
registers as LOAD-R64-G. For the x64 arguments passing
concept to work, a ML-G is required that itself does not
pass arguments to the invoked virtual functions/vfgadgets. Of
course, the ML-G must also not modify the registers rdx,
r8, and r9 between such invocations. In our example, the
attacker can control the source pointer s of the write operation
(namely strncpy()) by invoking a LOAD-R64-G that loads
rdx before SimpleString::set().
an
As
example
consider
Exam::getWeightedScore() from Figure 4; MSVC
compiles this function to the following assembly code:
LOAD-R64-G,
for
a
xmm0, xmm0
mov rax, qword ptr [rcx+10h]
mov r8, qword ptr [rcx+18h]
xorps
lea rdx, [rax+rax*2]
mov rax, qword ptr [rcx+8]
lea rcx, [rax+rax*4]
lea r9, [rdx+r8*2]
add r9, rcx
cvtsi2ss
addss
divss
ret
xmm0, r9
xmm0, dword ptr [__real0]
xmm0, dword ptr [__real1]
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
In condensed from, this LOAD-R64-G provides the following
useful semantics to the attacker:
rdx ← 3 · [this + 10h]
r8 ← [this + 18h]
r9 ← 3 · [this + 18h] + 2 · [this + 10h]
Thus, by carefully choosing the ﬁelds at offsets 10h and
18h from the this-ptr of the corresponding counterfeit object,
the attacker can write arbitrary values to the registers rdx,
r8, and r9.
In summary, to control the source pointer in the writing
operation in SimpleString::set(), the attacker would
ﬁrst invoke Exam::getWeightedScore() for a counter-
feit object carrying the desired source address divided by 3
at offset 10h. This would load the desired source address to
rdx, which would next be interpreted as the argument s in
the vfgadget SimpleString::set().
a) Other Platforms:
In the default x64 C++ calling
convention used by GCC [32], e. g., on Linux, the ﬁrst six
arguments to a function are passed through registers instead of
only the ﬁrst four registers. In theory, this should make COOP
attacks simpler to create on Linux x64 than on Windows x64,
as two additional registers can be used to pass data between
vfgadgets. In practice, during the creation of our example
exploits (see §V), we did not experience big differences
between the two platforms.
Although we did not conduct experiments on RISC plat-
forms such as ARM or MIPS, we expect that our x64 approach
directly extends to these because in RISC calling conventions
arguments are also primarily passed through registers.
2) Approach Windows x86: The standard x86 C++ calling
convention on Windows is thiscall [35]: all regular arguments
are passed over the stack whereas the this-ptr is passed in the
register ecx; the callee is responsible for removing arguments
from the stack. Thus, the described approach for x64 does not
work for x86.
In our approach for Windows x86, contrary to x64, we rely
on a main loop (ML-G) that passes arguments to vfgadgets.
More precisely, a 32-bit ML-G should pass one ﬁeld of the
initial object as argument to each vfgadget. In practice, any
number of arguments may work; for brevity we only discuss
the simplest case of one argument here. We call this ﬁeld the
argument ﬁeld and refer to this variant of ML-G as ML-ARG-
G. For an example of an ML-ARG-G, consider the virtual
destructor of the class Course2 in Figure 6: the ﬁeld id is
passed as argument to each invoked virtual function. Given
such an ML-ARG-G, the attacker can employ one of the two
following approaches to pass chosen arguments to vfgadgets:
A-1 ﬁx the argument ﬁeld to point to a writable scratch area.
A-2 dynamically rewrite the argument ﬁeld.
In approach A-1,
the attacker relies on vfgadgets that
their ﬁrst argument not as an immediate value
interpret
but as a pointer to data. Consider for example the virtual
function Student2::getLatestExam() from Figure 6
that copies an Exam object; MSVC produces the optimized
class Student2 {
private:
   std::list exams;
public:
   /* ... */
   virtual void subscribeCourse(int id) { /* ... */ }
   virtual void unsubscribeCourse(int id) { /* ... */ }
   virtual bool getLatestExam(Exam &e) {
      if (exams.empty()) return false;
      e = exams.back();
      return true;
   }
};
class Course2 {
private:
   Student2 **students;
   size_t nStudents;
   int id;
public:
   /* ... */
   virtual ~Course2() {
      for (size_t i = 0; i unsubscribeCourse(id);
      delete students;
   }
};
W-COND-G
W-SA-G
ML-ARG-G
Fig. 6: Examples for W-SA-G, W-COND-G, ML-ARG-G
ebp
push
mov ebp, esp
cmp dword ptr [ecx+8], 0
jne copyExam
5 xor al, al
pop ebp
ret 4
copyExam:
mov eax, dword ptr [ecx+4]
10 mov ecx, dword ptr [ebp+8]
mov edx, dword ptr [eax+4]
mov eax, dword ptr [edx+0Ch]
mov dword ptr [ecx+4], eax
mov eax, dword ptr [edx+10h]
15 mov dword ptr [ecx+8], eax
mov eax, dword ptr [edx+14h]
mov dword ptr [ecx+0Ch], eax
mov eax, dword ptr [edx+18h]
mov dword ptr [ecx+10h], eax
20 mov al, 1
pop ebp
ret 4
Listing 1: Optimized x86 assembly code produced by
MSVC for Student2::getLatestExam().
x86 assembly code shown in Listing 1 for the function. In
condensed form, lines 9–22 of the assembly code provide the
following semantics:
[arg0 + 4] ← [[[this + 4] + 4] + Ch]
[arg0 + 8] ← [[[this + 4] + 4] + 10h]
[arg0 + Ch] ← [[[this + 4] + 4] + 14h]
[arg0 + 10h] ← [[[this + 4] + 4] + 18h]
751
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
Note that for approach A-1, arg0 always points to the scratch
area. Accordingly, this vfgadget allows the attacker to copy
16 bytes (corresponding to the four 32-bit ﬁelds of Exam)
from the attacker-chosen address [[this + 4] + 4+] + Ch to
the scratch area. We refer to this type of vfgadget that writes
attacker-controlled ﬁelds to the scratch area as W-SA-G.
Using Student2::getLatestExam() as W-SA-G in
conjunction with a ML-ARG-G allows the attacker, for exam-
ple, to pass a string of up to 16 characters as ﬁrst argument
to the vfgadget SimpleString::set().
In approach A-2, the argument ﬁeld of the initial object
is not ﬁxed as in approach A-1. Instead, it is dynamically
rewritten during the execution of a COOP attack. This allows
the attacker to pass arbitrary arguments to vfgadgets; as
opposed to a pointer to arbitrary data for approach A-1.
For this approach, naturally, a usable W-G is required. As
stated above, we found vfgadgets working solely with ﬁelds
to be rare. Hence, the attacker would typically initially follow
approach A-1 and implement A-2-style argument writing on
top of that when required.
a) Passing Multiple Arguments and Balancing the Stack:
So far, we have described how a single argument can be passed
to each vfgadget using a ML-ARG-G main loop gadget on
Windows x86. Naturally, it can be desirable or necessary to
pass more than one argument to a vfgadget. Doing so is simple:
the ML-ARG-G pushes one argument to each vfgadget. In
case a vfgadget does not expect any arguments, the pushed
argument remains on the top of the stack even after the
vfgadget returned. This effectively moves the stack pointer
permanently one slot up as depicted in Figure 7 3(cid:3). This
technique allows the attacker to gradually “pile up” arguments
on the stack as shown in Figure 7 4(cid:3) before invoking a
vfgadget that expects multiple arguments. This technique only
works for ML-ARG-Gs that use ebp and not esp to access
local variables on the stack (i.e., no frame-pointer omission)
as otherwise the stack frame of the ML-ARG-G is destroyed.
Analogously to how vfgadgets without arguments can be
used to move the stack pointer up under an ML-ARG-G,
vfgadgets with more than one argument can be used to move
the stack pointer down as shown in Figure 7 2(cid:3). This may
be used to compensate for vfgadgets without arguments or
to manipulate the stack. We refer to vfgadgets with little or
no functionality that expect less or more than one argument
as MOVE-SP-Gs. Ideally, a MOVE-SP-G is an empty virtual
function that just adjusts the stack pointer.
The described technique for passing multiple arguments to
vfgadgets in 32-bit environments can also be used to pass more
than three arguments to vfgadgets in 64-bit environments.
b) Other Platforms: The default x86 C++ calling con-
vention used by GCC, e. g., on Linux, is not thiscall but
cdecl [35]: all arguments including the this-ptr are passed over
the stack; instead of the callee, the caller is responsible for
cleaning the stack. The technique of “piling up” arguments
described in §III-D2a does thus not apply to GCC-compiled
(and compatible) C++ applications on Linux x86 and other
POSIX x86 platforms. Instead, for these platforms, we propose
using ML-ARG-Gs that do not pass one but many control-
lable arguments to vfgadgets. Conceptually, passing too many
arguments to a function does not corrupt the stack in the
cdecl calling convention. Alternatively, ML-ARG-Gs could be
switched during an attack depending on which arguments to
a vfgadget need to be controlled.
E. Calling API Functions
The ultimate goal of code reuse attacks is typically to
pass attacker-chosen arguments to critical API functions or
system calls, e. g., Windows API (WinAPI) functions such
as WinExec() or VirtualProtect(). We identiﬁed the
following ways to call a WinAPI function in a COOP attack:
W-1 use a vfgadget that legitimately calls the WinAPI function
of interest.
W-2 invoke the WinAPI function like a virtual function from