### WAPTXv2: Section 01, Module 04 - Caendra Inc. © 2020

#### 4.2.2.1.1 Character Escaping > Unicode
**Blocked!!**

Unicode escaping can be achieved using native functions. For instance, `eval` is just one of many methods that can be used for this purpose.

---

#### 4.2.2.1.2 Character Escaping > Decimal, Octal, Hexadecimal
**Blocked!!**

If the filtered vector is within a string, in addition to Unicode, there are multiple escape sequences we can use:

- **Octal Escape**
- **Hexadecimal Escape**

---

#### 4.2.2.1.2 Character Escaping > Decimal, Octal, Hexadecimal
**Blocked!!**

Other forms of numeric character references include:

- **Hexadecimal Numeric Character Reference (NCR)**
- **Decimal NCR**

Additionally, superfluous escape characters can also be utilized.

---

#### 4.2.2.1.2 Character Escaping > Decimal, Octal, Hexadecimal
**Blocked!!**

All character escaping techniques can be combined to create more complex and effective vectors.

---

#### 4.2.2.2 Constructing Strings
Understanding how to construct strings is a crucial skill for bypassing filters. For example, if the keyword "alert" is blocked, it is likely that `"ale" + "rt"` will not be detected. Here are some examples:

- `/ale/.source + /rt/.source`
- `String.fromCharCode(97, 108, 101, 114, 116)`
- `atob("YWxlcnQ=")`
- `17795081..toString(36)`

---

#### 4.2.2.3 Execution Sinks
To execute code, we have previously used the `eval` function and events associated with certain tags. Functions that parse and execute JavaScript code from strings are known as execution sinks. Analyzing these functions is essential because if we can control one of them, we can execute arbitrary JavaScript code.

Some common execution sinks include:

- `setTimeout("JSCode")` // All browsers
- `setInterval("JSCode")` // All browsers
- `setImmediate("JSCode")` // IE 10+
- `Function("JSCode")` // All browsers

For a comprehensive list, refer to the DOM XSS Wiki:
[DOM XSS Wiki - Execution Sinks](https://code.google.com/p/domxsswiki/wiki/ExecutionSinks)

An interesting variation of the `Function` sink is:
```javascript
[].constructor.constructor(alert(1))
```
This technique can be used to create an Object Array Function XSS Vector.

---

#### 4.2.2.4 Pseudo-protocols
The `javascript:` pseudo-protocol is an unofficial URI scheme used to invoke JavaScript code within a link. Filters often recognize the `javascript` keyword followed by a colon (`:`).

**Blocked!!**

Note: The `javascript:` pseudo-protocol is not necessary in event handlers, so it should be avoided. Since the pseudo-protocol is often introduced within a string, we can use all the variations seen before. Here are some examples:

- **data:** (RFC 2397)
- **vbscript:** (Internet Explorer exclusive)

For more information on the `data:` URI scheme, see:
[Data URI Scheme (RFC 2397)](http://tools.ietf.org/html/rfc2397)

---

#### 4.2.2.4.1 Pseudo-protocols > data:
The `data:` URI scheme allows for the inclusion of small data items served with different media types. The structure is as follows:
```plaintext
data:[<mediatype>][;base64],<data>
```
The media type of interest is `text/html`, and the `base64` indicator can be used to encode our data.

**Blocked!!**

If `javascript:` is blocked, we can use base64 encoding. If `data:` is also blocked, other encoding techniques can be employed.

---

#### 4.2.2.4.2 Pseudo-protocols > vbscript:
The `vbscript:` pseudo-protocol is less common and can only be used in Internet Explorer. VBScript support was discontinued in IE11 Edge mode.

- **vbscript:** (Works till IE8)
- **vbs:** (Works till IE Edge)

Unlike JavaScript, VBScript code is case-insensitive up to version 8, which is useful when the application transforms the input.

**Blocked!!**

If `vbscript:` is blocked, we can use standard encoding techniques. Additionally, Internet Explorer is friendly to NULL bytes, which can be used to obfuscate the code.

Microsoft provided the Script Encoder tool to obfuscate VBScript and JScript code. This tool was designed to prevent users from inspecting client-side script code. The command-line utility (srcenc) is available in older versions of Windows. Online tools like Scripts Encryptor can also be used for this purpose.

- [MSDN - Script Encoder](http://msdn.microsoft.com/en-us/library/cbfz3598(v=vs.84).aspx)
- [Scripts Encryptor](http://dennisbabkin.com/screnc/)

**Blocked!!**

If `vbscript:` is blocked, we can use the usual encoding techniques. Remember that Internet Explorer is friendly to NULL bytes, which can be used to obfuscate the code.

---

**You’ve been studying quite intently. We recommend taking a quick break and come back refreshed. ^_^**

---

#### 4.3 Bypassing Sanitization
Often, security mechanisms choose to sanitize potential XSS vectors instead of blocking the entire request. These are probably the most common filters encountered during testing. For example, HTML-encoding key characters such as `<` (&lt;), `>` (&gt;), etc., is a common practice. However, this may not always be sufficient, depending on where the untrusted data is injected.

---

#### 4.3.1 String Manipulations
In some cases, a filter may manipulate your vector by removing malicious keywords. For example, removing the `<script>` tags. A common mistake is that the rule removes only the first instance of the matched expression.

---

#### 4.3.1.1 Removing HTML Tags
For example, `<script>alert(1)</script>` is correctly sanitized to `alert(1)`, but since the check is not performed recursively, subsequent `<script>` tags may still be present. The filter checks the next tag without restarting from the beginning to ensure no more malicious strings remain.