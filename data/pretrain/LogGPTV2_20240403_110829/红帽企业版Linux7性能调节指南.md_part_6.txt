# echo 1 > /proc/sys/vm/overcommit_memory
要永久设置这个值，请运行以下指令：
23
红红帽帽企企业业版版 Linux 7 性性能能调调节节指指南南
# sysctl vm.overcommit_memory=1
暂时设置一个参数有利于决定此参数对系统的影响。用户可以在确定了参数值有预期的效果之后再将其设置为
永久值。
4.3.1. 配配置置大大页页面面
大页面依赖于连续的内存区域，因此最好在启动时，也就是在内存变为片段前就定义好大页面。为此，请添加
以下参数至内核启动命令行：
⁠hugepages
启动时在内核中定义 2MB 定值大页面的数量。默认值为 0。只有在系统拥有足够的物理持续性空闲
页面时才能进行分配（或是收回）大页面。此参数保留的页面不能用于其他目的。
此值可以在启动后通过改变 /proc/sys/vm/nr_hugepages 文件值来调节。
更多详情请参阅相关内核文档，默认安装于 /usr/share/doc/kernel-doc-
kernel_version/Documentation/vm/hugetlbpage.txt 中。
⁠/proc/sys/vm/nr_overcommit_hugepages
通过超量使用内存来定义系统所能创建和使用的最大数量的额外大页面。在此文件中写入任何非零
的值，表示系统包含此数目的大页面，在不变的页面池耗尽后，这些大页面便来自于内核的常规页
面池。由于这些额外的大页面是未使用过的，因此它们会释放并返回至内核的常规页面池中。
4.3.2. 配配置置系系统统内内存存容容量量
本章探讨与内存相关的内核参数，它们可能有助于提高用户系统的内存使用率。基于测试目的，可以通过改变
/proc 文件系统中相应的文件值来暂时设置这些参数。一旦决定了能提供最佳性能的值，就可以使用
sysctl 指令来进行永久设置。
4.3.2.1. 虚虚拟拟内内存存参参数数
此章中的参数都在 /proc/sys/vm 内，除非另有标明。
⁠dirty_ratio
一个百分比值。当整个系统内存的这一百分比值被修改时，系统会通过运行 pdflush 将改动写入
磁盘。默认值为 20%。
⁠dirty_background_ratio
一个百分比值。当整个系统内存的这一百分比值被修改时，系统会在后台将改动写入磁盘。默认值
为 10 %。
⁠overcommit_memory
定义用来决定接受或拒绝一个大内存请求的注意事项。
默认值为 0。默认情况下，内核执行探索法内存超量使用，是通过估算可用内存大小和由于太大而
失败的请求来进行处理的。但由于内存分配使用的是探索法而不是精确算法，这一设置导致超载内
存是可能的。
当这一参数设置成 1 时，内核不执行内存超量使用处理。这增加了内存超量的可能性，但提高了内
存密集型任务的性能。
24
第⁠第 4 章章 内内存存
当这一参数设置成 2 时，内核拒绝请求，即请求的内存等于或大于总的可用交换空间，以及在
overcommit_ratio 中指定的物理 RAM 的百分比。这减少了超量使用内存的风险，但仅在系统
交换空间大于物理内存时推荐此设置。
⁠overcommit_ratio
当 overcommit_memory 设置为 2 时，设定所考虑的物理 RAM 的百分比。默认值为 50。
⁠max_map_count
定义一个进程可以使用的最大内存映射区域数量。默认值（65530）适用于大部分情况。如果应用
程序需要映射超过此数量的文件，可增加此值。
⁠min_free_kbytes
指定千字节的最小数量，使之在整个系统中都保持空闲。这是用来给每一个低内存区决定一个合适
的值，每一个低内存区都按照其大小比例分配了大量保留的空闲页面。
警警告告
极值会损坏用户的系统。将 min_free_kbytes 设置为一个极小的值以防止系统回收内
存，回收内存会导致系统锁死，以及 OOM-killing 进程。但是，将 min_free_kbytes 设
置过高 （例如，整个系统内存的 5–10% ）会使系统立即进入一种内存不足的状态，导致系
统花太多时间来回收内存。
⁠oom_adj
在系统内存不足，并且 panic_on_oom 参数设置成 0 的情况下，oom_killer 功能会结束进
程，直至系统可以恢复，从最高的 oom_score 进程开始。
oom_adj 参数有助于确定一个进程的 oom_score。此参数以每一个进程标识符为单位进行设置。
值为 -17 时会禁用进程的 oom_killer。其他有效值是从 -16 到 15。
注注意意
由一个调整过的进程而产生的进程会继续该进程的 oom_score。
⁠swappiness
一个从 0 到 100 的值可以控制系统交换的程度。高值优先考虑系统效率，并在进程不活跃时主动
交换物理内存耗尽的进程。低值优先考虑响应度，并且尽可能久地避免交换物理内存耗尽的进程。
默认值为 60。
4.3.2.2. 文文件件系系统统参参数数
此章中的参数都在 /proc/sys/fs 内，除非另有标明。
⁠aio-max-nr
定义在异步输入/输出环境中允许的最大事件数量。默认值为 65536。修改此值不会预分配或改变
任何内核数据结构的大小。
⁠file-max
定义内核分配的最大的文件句柄数量。默认值与内核中的 files_stat.max_files 值相匹配，
25
红红帽帽企企业业版版 Linux 7 性性能能调调节节指指南南
将此值设为最大值 NR_FILE（8192，在红帽企业版 Linux 中）或是以下结果：
(mempages * (PAGE_SIZE / 1024)) / 10
增加此值可以解决由于缺少可用的文件句柄而引起的错误。
4.3.2.3. 内内核核参参数数
此章中的参数都在 /proc/sys/kernel 内，除非另有标明。
⁠msgmax
以字节为单位，定义任何一个在信息队列中的信息可能的最大值。该值不能超过队列的大小
（msgmnb）。默认值为 65536。
⁠msgmnb
以字节为单位，定义每一个信息队列的最大值。默认值为 65536。
⁠msgmni
定义信息队列标识符的最大数量（以及队列的最大数量）。在 64 位架构的系统中，默认值为
1985。
⁠shmall
定义页面上共享内存的总量，这些内存是系统可以同时使用的。
⁠shmmax
定义页面上内核允许的单个共享内存片段的最大值。
⁠shmmni
定义系统范围内最大的共享内存片段数量。在所有系统中的默认值为 4096。
⁠threads-max
定义系统范围内内核能同时使用的最大线程量。默认值与内核参数 max_threads 相同，或为以下
结果：
mempages / (8 * THREAD_SIZE / PAGE SIZE )
最小值为 20。
26
第⁠第 5 章章 存存储储和和文文件件系系统统
第第 5 章章 存存储储和和文文件件系系统统
此章节概述支持的文件系统和配置选项，此选项影响在红帽企业版 Linux 7 中 I/O 和文件系统的应用程序性
能。〈第 5.1 节 “注意事项” 〉讨论了影响性能的 I/O 和文件系统相关因素。〈第 5.2 节 “性能问题监控和诊
断”〉教授如何使用红帽企业版 Linux 7 工具诊断与 I/O 或者文件系统配置细节相关的性能问题。〈第 5.3 节
“配置工具” 〉讨论了为解决红帽企业版 Linux 7中 I/O 和文件系统相关的性能问题，您可使用的工具和策略。
5.1. 注注意意事事项项
存储和文件系统性能的合理设置在很大程度上取决于存储目的。 I/O 和文件系统性能会受到下列因素的影响：
数据写入或读取模式
数据重新排列与底层几何
块大小
文件系统大小
日记大小和位置
记录访问次数
确保数据可靠性
预取数据
预先分配磁盘空间
文件碎片
资源争用
阅读此章节可了解影响文件系统吞吐量、可伸缩性、响应能力、资源使用和可用性的格式和挂载选项。
5.1.1. 固固态态硬硬盘盘
SSD（固态硬盘）使用闪存芯片而非旋转磁盘存储永久数据。它们为逻辑块地址内的全部数据提供恒定访问时
间，且不会像它们旋转的对应物那样出现可测量的搜寻成本。每千兆字节的存储空间更昂贵且存储密度更小，
但比 HDD 延迟时间短、吞吐量更大。
当在 SSD 上使用的块接近磁盘容量，性能通常会降低。降低的程度因供应商的不同而异，在此情况下，所有
设备性能都会降低。启用放弃有助于缓解性能降低；更多细节，请参见〈第 5.1.4.3 节 “维护”〉 。
默认 I/O 调度器和虚拟内存选项适用于 SSD。
SSD 部署建议的更多信息，可从 《红帽企业版 Linux 7 存储管理指南》获得， 参见
http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/。
5.1.2. I/O 调调度度器器
I/O 调度器决定 I/O 操作何时运行在存储设备上以及运行多久。它也被称为 I/O elevator（I/O 升降机）。
红帽企业版 Linux 7 提供三种 I/O 调度器。
⁠deadline
27
红红帽帽企企业业版版 Linux 7 性性能能调调节节指指南南
除了 SATA 磁盘为所有块设备的默认 I/O 调度器。Deadline 尝试为指向到达 I/O 调度器的请求提
供有保障的延迟。该调度器适合大多数用例，尤其适用于读取操作比写入操作更频繁的请求。
将排队的 I/O 请求分类为读或者写批处理，并按照 LBA 递增顺序执行。默认设置下，读批处理优先
于写批处理，这是因为应用更可能阻止读取 I/O。批处理后，deadline 检查写入操作因等待处理
器时间而处于多久的“饥饿”状态，并且适当地调度下一个读批处理或写批处理。解决批处理的请求
数量、发出写批处理的读批处理数量、以及请求过期前的时间量都是可配置的，更多细节，请参见
〈第 5.3.4 节 “调整期限调度器”〉。
⁠cfq
默认调度器只适用于标识为 SATA 硬盘的设备。完全公平队列调度器，cfq，将进程分成三个独立
类别：实时、尽其所能和空闲。实时类别的进程总是先于尽其所能类别进程执行，而尽其所能类别
进程总是在空闲类别进程之前执行。这意味着实时类别的进程可以使尽其所能和空闲进程等待处理
器时间而忍受“饥饿”。默认设置下，分配进程到尽其所能类别。
Cfq 使用历史数据来预测应用是否会在不久之后发出更多 I/O 请求。如果将有更多 I/O 请求，cfq
空闲则会等待新的 I/O，即使有来自其他进程的 I/O 在等待处理。
因为有空闲的趋势，cfq 调度器不应用于连接不会引起大量搜寻 penalty（惩罚）的硬件，除非它为
此目的而被调整。cfq 调度器也不应用于连接其他断续工作型调度器，例如基于主机的硬件 RAID 控
制器，因为这些调度器的堆积有造成大量延迟的趋势。
Cfq 行为是可高度配置的，更多细节，请参见〈第 5.3.5 节 “调整 cfq 调度器” 〉。
⁠noop
noop I/O 调度器执行简单的 FIFO（先进先出）调度算法。请求通过简单的最后选中的缓存数据在
一般块层合并。对于使用最快存储的受 CPU 限制的系统，这是最佳调度器。
设置不同默认 I/O 调度器的细节，或为特定设备指定不同的调度器，请参见〈第 5.3 节 “配置工具”〉。
5.1.3. 文文件件系系统统
欲了解红帽企业版 Linux 7 中支持文件系统的细节、推荐用例、通常情况下的文件系统可用的格式和挂载选