Oct 12 08:50:54 docker4 systemd[1]: Starting Flannel Network Fabric...
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.409928 25161 main.go:126] Installing signal handlers
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.410384 25161 manager.go:133] Determining IP address of default interface
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.410793 25161 manager.go:163] Using 192.168.50.102 as external interface
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.411688 25161 manager.go:164] Using 192.168.50.102 as external endpoint
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.423706 25161 local_manager.go:179] Picking subnet in range 10.100.1.0 ... 10.100.255.0
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.429636 25161 manager.go:246] Lease acquired: 10.100.15.0/24
Oct 12 08:50:54 docker4 flanneld[25161]: I1012 08:50:54.430507 25161 network.go:98] Watching for new subnet leases
Oct 12 08:50:54 docker4 systemd[1]: Started Flannel Network Fabric.
user@docker4:/tmp$
```
您应该会在日志中看到类似的输出，表明 Flannel 在您在`etcd`中配置的全局范围分配中找到了租约。这些租约对每个主机都是本地的，我经常称它们为本地范围或网络。下一步是在其余主机上完成此配置。通过检查每台主机上的 Flannel 日志，我可以知道为每台主机分配了哪些子网。就我而言，这就是我的结局:
*   `docker1` : `10.100.93.0/24`
*   `docker2` : `10.100.58.0/24`
*   `docker3` : `10.100.90.0/24`
*   `docker4` : `10.100.15.0/24`
此时，Flannel 已完全配置完毕。在下一个食谱中，我们将讨论如何配置 Docker 来使用 Flannel 网络。
# 将 Flannel 与 Docker 融为一体
正如我们前面提到的，目前 Flannel 和 Docker 之间没有直接的集成。也就是说，我们需要找到一种方法，在 Docker 不直接知道发生了什么的情况下，将容器放到 Flannel 网络上。在本食谱中，我们将展示如何做到这一点，讨论导致我们当前配置的一些额外条件，并了解 Flannel 如何处理主机到主机的通信。
## 做好准备
假设您正在构建上一份食谱中描述的实验室。在某些情况下，我们所做的更改可能要求您拥有对系统的根级访问权限。
## 怎么做…
在前面的配方中，我们配置了 Flannel，但是我们没有从网络角度检查 Flannel 配置实际上做了什么。让我们快速查看一下我们的一台支持 Flannel 的主机的配置，看看发生了什么变化:
```
user@docker4:~$ ip addr
……
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether d2:fe:5e:b2:f6:43 brd ff:ff:ff:ff:ff:ff
    inet 192.168.50.102/24 brd 192.168.50.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::d0fe:5eff:feb2:f643/64 scope link
       valid_lft forever preferred_lft forever
3: flannel0:  mtu 1472 qdisc pfifo_fast state UNKNOWN group default qlen 500
 link/none
 inet 10.100.15.0/16 scope global flannel0
 valid_lft forever preferred_lft forever
4: docker0:  mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:16:78:74:cf brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 scope global docker0
       valid_lft forever preferred_lft forever 
user@docker4:~$
```
您会注意到添加了一个名为`flannel0`的新界面。您还会注意到，它在`/24`本地范围内有一个分配给该主机的 IP 地址。如果再深入一点，我们可以用`ethtool`判断这个界面是一个虚拟的`tun`界面:
```
user@docker4:~$ ethtool -i flannel0
driver: tun
version: 1.6
firmware-version:
bus-info: tun
supports-statistics: no
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no
user@docker4:~$
```
Flannel 在运行 Flannel 服务的每台主机上创建此接口。注意`flannel0`接口的子网掩码是一个`/16`，它覆盖了我们在`etcd`中定义的整个全局范围分配。尽管给主机分配了一个`/24`范围，但主机认为通过`flannel0`接口可以到达整个`/16`:
```
user@docker4:~$ ip route
default via 192.168.50.1 dev eth0
10.100.0.0/16 dev flannel0  proto kernel  scope link  src 10.100.93.0
172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1
192.168.50.0/24 dev eth0  proto kernel  scope link  src 192.168.50.102
user@docker4:~$
```
有了这个接口，就创建了这条路由，确保发往其他主机上任何指定本地范围的流量都要通过`flannel0`接口。我们可以通过 ping 其他主机上的其他`flannel0`接口来证明这一点:
```
user@docker4:~$ ping 10.100.93.0 -c 2
PING 10.100.93.0 (10.100.93.0) 56(84) bytes of data.
64 bytes from 10.100.93.0: icmp_seq=1 ttl=62 time=0.901 ms
64 bytes from 10.100.93.0: icmp_seq=2 ttl=62 time=0.930 ms
--- 10.100.93.0 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.901/0.915/0.930/0.033 ms
user@docker4:~$
```
由于物理网络不知道`10.100.0.0/16`网络空间，Flannel 必须在流量穿过物理网络时对其进行封装。为了做到这一点，它需要知道哪个物理 Docker 主机被分配了给定的范围。回想一下我们在之前的配方中检查的 Flannel 日志，Flannel 根据主机的默认路由为每台主机选择了一个外部接口:
```
I0707 09:07:01.733912 02195 main.go:130] Determining IP address of default interface
I0707 09:07:01.734374 02195 main.go:188] Using 192.168.50.102 as external interface
```
这些信息以及分配给每个主机的范围都被注册到键值存储中。使用这些信息，Flannel 可以确定哪个主机分配了哪个范围，并可以使用该主机的外部接口作为目的地来发送封装的流量。
### 注
Flannel 支持多个后端或传输机制。默认情况下，它将流量封装在端口`8285`的 UDP 中。在接下来的食谱中，我们将讨论其他后端选项。
现在我们知道了 Flannel 是如何工作的，我们需要理清如何将实际的 Docker 容器放到 Flannel 网络上。最简单的方法是让 Docker 使用分配的范围作为`docker0`桥的子网。Flannel 将范围信息写入保存在`/run/flannel/subnet.env`中的文件:
```
user@docker4:~$ more /run/flannel/subnet.env
FLANNEL_NETWORK=10.100.0.0/16
FLANNEL_SUBNET=10.100.15.1/24
FLANNEL_MTU=1472
FLANNEL_IPMASQ=false
user@docker4:~$
```
利用这些信息，我们可以配置 Docker 为其网桥接口使用正确的子网。Flannel 提供了两种方法。第一个涉及使用 Flannel 二进制文件附带的脚本生成一个新的 Docker 配置文件。该脚本允许您输出一个新的 Docker 配置文件，该文件使用来自`subnet.env`文件的信息。例如，我们可以使用脚本生成如下新配置:
```
user@docker4:~$ cd /tmp
user@docker4:/tmp$ ls
flannel-v0.6.2-linux-amd64.tar.gz  mk-docker-opts.sh  README.md  
user@docker4:~/flannel-0.5.5$ ./mk-docker-opts.sh -c -d \
example_docker_config
user@docker4:/tmp$ more example_docker_config
DOCKER_OPTS=" --bip=10.100.15.1/24 --ip-masq=true --mtu=1472"
user@docker4:/tmp$
```
在不利用`systemd`的系统中，在大多数情况下，Docker 会自动检查文件`/etc/default/docker`中的服务级别选项。这意味着我们可以简单地让 Flannel 将前面提到的配置文件写到`/etc/default/docker`，这将允许 Docker 在服务重新加载时使用新的设置。但是，由于我们的系统使用`systemd`，该方法需要更新我们的 Docker 插件文件(`/etc/systemd/system/docker.service.d/docker.conf`)如下所示:
```
[Service]
EnvironmentFile=/etc/default/docker
ExecStart=
ExecStart=/usr/bin/dockerd $DOCKER_OPTS
```
粗线表示服务应该检查文件`etc/default/docker`，然后加载变量`$DOCKER_OPTS`在运行时传递给服务。如果您使用这种方法，为了简单起见，在`etc/default/docker`中定义您的所有服务级别选项可能是明智的。
### 注
应该注意的是，第一种方法依赖于运行脚本来生成配置文件。如果您手动运行脚本来生成文件，如果 Flannel 配置发生变化，配置文件可能会过期。后面显示的第二种方法更加动态，因为`/run/flannel/subnet.env`文件是由 Flannel 服务更新的。
虽然第一种方法确实有效，但我更喜欢使用稍微不同的方法，我只是从`/run/flannel/subnet.env`文件加载变量，并在插入文件中使用它们。为此，我们将 Docker 插件文件更改如下:
```
[Service]
EnvironmentFile=/run/flannel/subnet.env
ExecStart=
ExecStart=/usr/bin/dockerd --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU}
```
通过将`/run/flannel/subnet.env`指定为`EnvironmentFile`，我们使文件中定义的变量在服务定义中可供使用。然后，我们只是将它们作为选项，在服务启动时传递给它。如果我们在 Docker 主机上进行这些更改，重新加载`systemd`配置，并重新启动 Docker 服务，我们应该会看到我们的`docker0`接口现在反映了 Flannel 子网:
```
user@docker4:~$ ip addr show dev docker0
8: docker0:  mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:24:0a:e3:c8 brd ff:ff:ff:ff:ff:ff
    inet 10.100.15.1/24 scope global docker0
       valid_lft forever preferred_lft forever
user@docker4:~$ 
```
您也可以根据 Flannel 配置自己手动更新 Docker 服务级别参数。只要确保使用`/run/flannel/subnet.env`文件中的信息即可。无论您选择哪种方法，请确保`docker0`网桥在所有四台 Docker 主机上使用 Flannel 指定的配置。我们的拓扑现在应该如下所示:
![How to do it…](img/B05453_08_02.jpg)
由于每台 Docker 主机仅使用 Flannel 分配的子网范围，因此每台主机都认为包括在全局 Flannel 网络中的其余子网仍然可以通过`flannel0`接口到达。只有指定本地范围的特定`/24`可以通过本地的`docker0`桥到达:
```
user@docker4:~$ ip route
default via 192.168.50.1 dev eth0 onlink
10.100.0.0/16 dev flannel0  proto kernel  scope link src 10.100.15.0
10.100.15.0/24 dev docker0  proto kernel  scope link src 10.100.15.1 
192.168.50.0/24 dev eth0  proto kernel  scope link src 192.168.50.102
user@docker4:~$
```
此时，我们可以通过在两台不同的主机上运行两个不同的容器来验证 Flannel 的运行情况:
```
user@docker1:~$ docker run -dP --name=web1 jonlangemak/web_server_1
7e44a55c7ea7704d97a8804bfa211344c66f9fb83b3ac17f697c504b3b193e2d
user@docker1:~$
user@docker4:~$ docker run -dP --name=web2 jonlangemak/web_server_2
39a47920588b5e0d77ca9d2838988e2d8de893dee6198759f9ddbd3b38cea80d
user@docker4:~$
```
我们现在可以通过 IP 地址直接到达在每个容器上运行的服务。首先，找到其中一个容器的 IP 地址:
```
user@docker1:~$ docker exec -it web1 ip addr show dev eth0
12: eth0@if13:  mtu 1472 qdisc noqueue state UP
    link/ether 02:42:0a:64:5d:02 brd ff:ff:ff:ff:ff:ff
    inet 10.100.93.2/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe64:5d02/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$