    0b 00000000`34f0f1a0 00007ffd`dab86e25 windows_storage!RegDataDrivenCommand::_Invoke+0x13d
    0c 00000000`34f0f210 00007ffd`dab85bba SHELL32!CRegistryVerbsContextMenu::_Execute+0xc9
    0d 00000000`34f0f280 00007ffd`dabc29c0 SHELL32!CRegistryVerbsContextMenu::InvokeCommand+0xaa
    0e 00000000`34f0f580 00007ffd`dab6ee1d SHELL32!HDXA_LetHandlerProcessCommandEx+0x118
    0f 00000000`34f0f690 00007ffd`dab5cfcf SHELL32!CDefFolderMenu::InvokeCommand+0x13d
    10 00000000`34f0f9f0 00007ffd`dab5cea9 SHELL32!CShellExecute::_InvokeInProcExec+0xff
    11 00000000`34f0faf0 00007ffd`dab5c3e6 SHELL32!CShellExecute::_InvokeCtxMenu+0x59
    12 00000000`34f0fb30 00007ffd`dabc830e SHELL32!CShellExecute::_DoExecute+0x156
    13 00000000`34f0fb90 00007ffd`dd3f3fb5 SHELL32!::+0x1e
    14 00000000`34f0fbc0 00007ffd`dc264034 shcore!_WrapperThreadProc+0xf5
    15 00000000`34f0fca0 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    16 00000000`34f0fcd0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
紧接着看这个API的执行结果，如下图所示：
这个结果是可以预见的，原因是“如果通过CreateProcess能创建成功，那么俺也可以模仿者它的参数来创建玩玩，哪里还有啥UAC的事情”。好，接下来就是接着找，到底是咋创建的，反正是跟AIS有关。
## 5、探寻提权的骚操作——大哥开始派活了
好了，上边的线索断了，也该断了，不然在错误的道路上越走越远，万劫不复。现在仅有的线索就是上边那个栈回溯，那就再多瞅一眼呗。截取了一段有意思的如下：
这个Try是啥意思？不是“尝试，试一下”的意思吗？它为何要尝试一下？难道不成功便成仁，有二手准备？
以上全部是鄙人猜测，那就在这几个Try处下断点，看看到底在干啥。
很不幸的是，一个断点都没有断下来，那就有可能是我猜错了，还有种可能就是“重试”的操作在上边进行了，那就试试后者吧。
【下边的很多线程号对不上，是因为调试explorer不方便操作，为了写文章截图，只能重复演示】
继续分析如下：
来简单看下传进去的参数
跟进去，一步一步看看，如下：
原来用的是RPC，现在具体分析下这个RPC的过程。
Ndr64AsyncClientCall的原型如下：
    CLIENT_CALL_RETURN RPC_VAR_ENTRY Ndr64AsyncClientCall( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ... );
    typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
        PMIDL_STUB_DESC                     pStubDesc;
        PFORMAT_STRING                      ProcFormatString;
        const unsigned short            *   FormatStringOffset;
        PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
        ULONG_PTR                           nCount;
        PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;
    typedef struct _MIDL_STUB_DESC
    {
        void  *    RpcInterfaceInformation;
        void  *    ( __RPC_API * pfnAllocate)(size_t);
        void       ( __RPC_API * pfnFree)(void  *);
        union
        {
            handle_t  *             pAutoHandle;
            handle_t  *             pPrimitiveHandle;
            PGENERIC_BINDING_INFO   pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;
        const NDR_RUNDOWN  *                    apfnNdrRundownRoutines;
        const GENERIC_BINDING_ROUTINE_PAIR  *   aGenericBindingRoutinePairs;
        const EXPR_EVAL  *                      apfnExprEval;
        const XMIT_ROUTINE_QUINTUPLE  *         aXmitQuintuple;
        const unsigned char  *                  pFormatTypes;
        int                                     fCheckBounds;
        /* Ndr library version. */
        unsigned long                           Version;
        MALLOC_FREE_STRUCT  *                   pMallocFreeStruct;
        long                                    MIDLVersion;
        const COMM_FAULT_OFFSETS  *             CommFaultOffsets;
        // New fields for version 3.0+
        const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;
        // Notify routines - added for NT5, MIDL 5.0
        const NDR_NOTIFY_ROUTINE  *             NotifyRoutineTable;
        // Reserved for future use.
        ULONG_PTR                               mFlags;
        // International support routines - added for 64bit post NT5
        const NDR_CS_ROUTINES *                 CsRoutineTables;
        void *                                  ProxyServerInfo;
        const NDR_EXPR_DESC *               pExprInfo;
        // Fields up to now present in win2000 release.
    } MIDL_STUB_DESC;
    typedef struct _MIDL_SYNTAX_INFO
    {
        RPC_SYNTAX_IDENTIFIER               TransferSyntax;
        RPC_DISPATCH_TABLE *                DispatchTable;
        PFORMAT_STRING                      ProcString;
        const unsigned short *              FmtStringOffset;
        PFORMAT_STRING                      TypeString;
        const void           *              aUserMarshalQuadruple;
        const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
        ULONG_PTR                           pReserved2;
    } MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;
    typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;
    typedef const unsigned char  * PFORMAT_STRING;
    typedef MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;
简单整理下Ndr64AsyncClientCall的函数参数，跟一下数据，如下：
gAppinfoRPCBandHandle是Appinfo的RPC的UUID，如下：
这把全清楚了，原来explorer把创建进程的骚操作通过RPC推给了AppInfo。
dwCreationFlags == 0x4080404，解释如下：
    #define CREATE_SUSPENDED                      0x00000004
    #define CREATE_UNICODE_ENVIRONMENT            0x00000400
    #define EXTENDED_STARTUPINFO_PRESENT          0x00080000
    #define CREATE_DEFAULT_ERROR_MODE             0x04000000
## 6、寂寞等待的大哥
多么淳朴的做法，地道！
## 7、总结
本篇主要讲解了explorer拉起需要提权的进程的第一步，涉及到好些个进程的调试，后续的还有深入分析，敬请期待！