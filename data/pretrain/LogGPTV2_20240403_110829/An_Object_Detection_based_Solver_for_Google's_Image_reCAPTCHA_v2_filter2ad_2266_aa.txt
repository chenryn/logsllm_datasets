title:An Object Detection based Solver for Google's Image reCAPTCHA v2
author:Md Imran Hossen and
Yazhou Tu and
Md Fazle Rabby and
Md. Nazmul Islam and
Hui Cao and
Xiali Sharon Hei
An Object Detection based Solver for Google’s Image reCAPTCHA v2
Md Imran Hossen∗ Yazhou Tu∗ Md Fazle Rabby∗ Md Nazmul Islam∗ Hui Cao† Xiali Hei∗
∗University of Louisiana at Lafayette
†Xi’an Jiaotong University
Abstract
Previous work showed that reCAPTCHA v2’s image chal-
lenges could be solved by automated programs armed with
Deep Neural Network (DNN) image classiﬁers and vision
APIs provided by off-the-shelf image recognition services.
In response to emerging threats, Google has made signiﬁ-
cant updates to its image reCAPTCHA v2 challenges that
can render the prior approaches ineffective to a great extent.
In this paper, we investigate the robustness of the latest ver-
sion of reCAPTCHA v2 against advanced object detection
based solvers. We propose a fully automated object detection
based system that breaks the most advanced challenges of
reCAPTCHA v2 with an online success rate of 83.25%, the
highest success rate to date, and it takes only 19.93 seconds
(including network delays) on average to crack a challenge.
We also study the updated security features of reCAPTCHA
v2, such as anti-recognition mechanisms, improved anti-bot
detection techniques, and adjustable security preferences. Our
extensive experiments show that while these security features
can provide some resistance against automated attacks, adver-
saries can still bypass most of them. Our experiment ﬁndings
indicate that the recent advances in object detection technolo-
gies pose a severe threat to the security of image captcha
designs relying on simple object detection as their underlying
AI problem.
1 Introduction
CAPTCHA is a defense mechanism against malicious bot
programs on the Internet by presenting users a test that most
humans can pass, but current computer programs cannot [49].
Often, CAPTCHA makes use of a hard and unsolved AI prob-
lem. Over the last two decades, text CAPTCHAs have be-
come increasingly vulnerable to automated attacks as the
underlying AI problems have become solvable by computer
programs [17, 19, 20, 27, 28, 34, 35, 51, 51–53]. As a result,
text CAPTCHAs are no longer considered secure. In fact, in
March 2018, Google shut down its popular text CAPTCHA
scheme reCAPTCHA v1 [23]. Image CAPTCHA schemes
have emerged as a superior alternative to text ones as they are
considered more robust to automated attacks.
reCAPTCHA v2, a dominant image CAPTCHA service
released by Google in 2014, asks users to perform an im-
age recognition task to verify that they are humans and not
bots. However, in recent years, deep learning (DL) algorithms
have achieved impressive successes in several complex image
recognition tasks, often matching or even outperforming the
cognitive ability of humans [30]. Consequently, successful
attacks against reCAPTCHA v2 that leverage Deep Neural
Network (DNN) image classiﬁer and off-the-shelf (OTS) im-
age recognition services have been proposed [44, 50].
The prior work advanced our understanding of the security
issues of image CAPTCHAs and led to better CAPTCHA
designs. However, recently, Google has made several major
security updates to reCAPTCHA v2 image challenges that
can render prior image classiﬁcation and recognition based
approaches ineffective to a great extent. For example, the
latest version of reCAPTCHA pulls challenge images from
relatively complex and common scenes as opposed to mono-
tonic and simple images in the past. Through a comprehensive
experiment, we show that both image classiﬁers and image
recognition APIs provide poor success rates against the latest
reCAPTCHA v2 challenges.
Our experiment also shows that the current version of re-
CAPTCHA v2 adopts several additional security enhance-
ments over the earlier versions. First, reCAPTCHA v2 has
introduced anti-recognition techniques to render the challenge
images unrecognizable to state-of-the-art image recognition
technologies. For example, it often presents noisy, blurry,
and distorted images. reCAPTCHA image challenges are
likely to be using adversarial examples [15, 46] as a part of
the anti-recognition mechanism as well. Second, it adapts
the difﬁculty-level for suspicious clients by presenting them
with harder challenges. Third, the improved anti-bot detec-
tion mechanism of reCAPTCHA can now detect the popular
web automation framework like Selenium. Apart from those,
reCAPTCHA v2 also added click-based CAPTCHA tests,
which are not explored in the prior studies. We suspect that
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    269
the click-based CAPTCHAs were not available at the time of
publication of the most recent attack on reCAPTCHA v2.
Taking reCAPTCHA v2 as an example, we investigate
the security of image CAPTCHA schemes against advanced
object detection technologies. To this end, we develop an
object detection based real-time solver that can identify and
localize target objects in reCAPTCHA’s most complex im-
ages with high accuracy and efﬁciency. Speciﬁcally, our sys-
tem can break reCAPTCHA image challenges with a suc-
cess rate of 83.25%, the highest success rate to date, and it
takes only 19.93 seconds (including network delays) on aver-
age to crack a challenge. Our economic analysis of human-
based CAPTCHA solving services shows that our automated
CAPTCHA solver provides comparable performance to hu-
man labor. Therefore, the scammers can exploit our system
as an alternative to human labor to launch a large-scale attack
against reCAPTCHA v2 for monetary or malicious purposes,
leaving millions of websites at the risk of being abused by
bots [11].
We also provide an extensive analysis of the security fea-
tures of the latest version of reCAPTCHA v2. First, we
ﬁnd that the anti-recognition mechanisms employed by re-
CAPTCHA can signiﬁcantly degrade the performance of both
image recognition and object detection based solvers. How-
ever, our extensive analysis shows that we can neutralize re-
CAPTCHA’s anti-recognition attempts by applying advanced
training methods to develop a highly effective object detection
based solver. Second, we also ﬁnd that our system can bypass
many other imposed security restrictions. For example, we can
bypass the browser automation framework restriction by using
the puppeteer-ﬁrefox [10] framework. Our ﬁndings reveal that
despite all the evident initiatives by Google, reCAPTCHA still
fails to meet the stringent security requirements of a secure
and robust CAPTCHA scheme.
Figure 1: A reCAPTCHA v2 challenge widget.
reCAPTCHA v2 background
2
reCAPTCHA v2 relies on an advanced risk analysis engine
to score users’ requests and let legitimate users bypass the
CAPTCHA test. Once the user clicks the reCAPTCHA – “I’m
not a robot” — checkbox, the advanced risk analysis engine
tries to determine whether the user is a human using various
signals collected by the system, including different aspects of
the user’s browser environment, and Google tracking cookies
[36, 44]. If the system ﬁnds the user suspicious, it asks the
user to solve one or more image CAPTCHA(s) to prove that
he/she is a human and not a bot. In general, a user with no
history with Google services will be assigned to relatively
difﬁcult challenges. In this paper, our system attempts to
solve these CAPTCHAs. Note that, Bock et al. followed a
similar approach to break reCAPTCHA’s audio challenges in
2017 [16].
It is important to note that the third version of reCAPTCHA,
reCAPTCHA v3, was released in October 2018. reCAPTCHA
v3 is intended to be frictionless, i.e., not requiring any users’
involvement in passing a challenge. However, it has raised
some serious security concerns due to the method it uses to
collect users’ information [21, 42]. In this paper, we only tar-
get reCAPTCHA v2’s most recent (as of March 2020) image
challenges because it is still the most popular and widely used
version of reCAPTCHA deployed on the Internet. From now
on, we will use the term reCAPTCHA to refer to reCAPTCHA
v2 unless otherwise speciﬁed.
Challenge widget. If reCAPTCHA requires the user to solve
a challenge, a new iframe gets loaded on the webpage af-
ter clicking on the “I’m not a robot” checkbox. The iframe
contains the actual reCAPTCHA challenge (Figure 1). The
challenge widget can be divided into three sections: top, mid-
dle, and bottom. The top section includes instructions about
In summary, we make the following contributions:
• Through extensive analysis, we show that prior DNN
image classiﬁers and off-the-shelf vision APIs based ap-
proaches are no longer effective against the latest version
of reCAPTCHA v2. We then propose an object detec-
tion based attack that can break the most advanced image
challenges provided by reCAPTCHA v2 with high accu-
racy and efﬁciency.
• We provide a comprehensive security analysis of differ-
ent security features employed by the latest version of re-
CAPTCHA v2. Our extensive study shows that these fea-
tures can provide some resistance to automated attacks.
However, adversaries can still bypass most of them.
• Our study indicates that the recent advances in object
detection algorithms can severely undermine the security
of image CAPTCHA designs. As such, the broader im-
pact of our attack is that any image CAPTCHA schemes
relying on simple object detection as their underlying AI
problem to make a distinction between bots and humans
might be susceptible to this kind of attack.
270    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
3 Threat model
We assume the attacker’s goal is to abuse Web applications
protected by reCAPTCHA using an automated program. We
also assume the attacker has access to a GPU enabled machine
to deploy an object detection system for cracking CAPTCHAs.
The attacker can launch the attack from a single IP address.
However, having access to a large IP pool will allow the at-
tacker to launch a large-scale attack. reCAPTCHA may occa-
sionally block an IP address for some time. In such a scenario,
the attacker may need to use a proxy service or anonymity
network such as Tor [24] to bypass the IP restriction. In sum-
mary, we consider a low-to-moderately resourced attacker
whose goal is to deploy a highly effective automated solver
to break reCAPTCHA challenges for malicious purposes.
4 Our approach
Our automated CAPTCHA breaker consists of a browser au-
tomation module and a solver module.
Browser automation module. The browser automation mod-
ule is responsible for automating different browser-speciﬁc
tasks while solving a CAPTCHA challenge. These tasks in-
clude locating the reCAPTCHA checkbox, initiating the re-
CAPTCHA challenge, and identifying the potential HTML
elements on the challenge widget. This module is also in
charge of fetching challenge images, submitting the solution
once the CAPTCHA is solved, monitoring the progress of the
challenge, and checking the reCAPTCHA veriﬁcation status.
Solver module. The solver module consists of two main com-
ponents: the base object detector and the bounding box to
grid mapping algorithm. The base object detector takes the
challenge image from the browser automation module and
identiﬁes and localizes objects in it. For each recognized ob-
ject instance, the base detector returns its class name, the
conﬁdence score, and coordinate information in terms of the
bounding box. The bounding box to grid mapping algorithm
then uses this data to map the bounding boxes holding the
target object back to the grids where they are present.
4.1 The browser automation module
The browser automation module ﬁrst visits a reCAPTCHA-
protected webpage and locates the frame element holding
“I am not a robot” checkbox. It then clicks on the check-
box, which is identiﬁed by recaptcha-anchor, to initiate
the challenge. Now our system switches to the challenge wid-
get. Then it primarily conducts the following steps to solve
the challenge.
Extracting
system lo-
cates
the element holding the challenge instruction
rc-imageselect-instructions. The challenge instruc-
tion is a multi-line string, and the second line always
refers to the name of the target object. Further, it indicates
the challenge type. For instance, in click-based image
instruction. Our
challenge
Figure 2: Representing a 400px × 400px challenge image as
an R×C grid. Here, R=No. of rows, and C=No. of cells per
row in the HTML table element holding the challenge image.
how to solve the challenge. The section in the middle holds
the candidate images. The user has to select or click on im-
ages that contain the target object mentioned in the instruction.
At the bottom, it has multiple buttons, including the “reload”
button, “audio CAPTCHA” button, and the “verify” button.
The images are located inside an HTML table element.
The table has multiple rows, and each row holds the same
number of cells. Each cell has an img tag in it and renders
an image from the URL speciﬁed in the tag. If the table has
4 rows and each row has 4 cells, then 16 candidate images
in total will be rendered, from which the user has to select
the right images. However, all these images are pulled from
a single source URL in the challenge widget initially, i.e., a
single image is split across multiple table cells in an equal
proportion. Therefore, this particular challenge image can be
treated as a 4 × 4 grid. Figure 2 illustrates the process of
representing a 400px × 400px challenge image as an R×C
grid. Here R and C correspond to the number of rows and the
number of cells per row in the table element.
reCAPTCHA CAPTCHA types. The current version of re-
CAPTCHA has two types of image CAPTCHAs: 1) selection-
based image CAPTCHA and 2) click-based image CAPTCHA.
The selection-based CAPTCHA requires the user to select
the correct grids containing the right object as speciﬁed in the
instruction to pass the challenge (see Figure 6 in Appendix
A). It is the common CAPTCHA type that the user would
encounter in a reCAPTCHA-protected site. The click-based
CAPTCHAs have been introduced only recently. In a click-
based image challenge, when the user clicks on a grid, the
image on the grid disappears, and a new image gets generated
in its place (see Figure 7 in Appendix A). The user has to
repetitively click on the potential grids until the target object
is no longer present in any of the grid while submitting a chal-
lenge. It takes a relatively long time to solve the click-based
CAPTCHAs than selection-based ones as there is a delay
between the click and image regeneration process.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    271
R=4C=4(0,0)(400,0)(400,400)(0,400)(300,100)w=h=(400,200)W=400H=400HRWCG0G1G2G3G4G5G6G7G8G9G10G11G12G13G14G15CAPTCHAs, the challenge instruction always holds the
phrase — “Click verify once there are none left” (See Figure
7). The name of the target object, for which we must solve
the challenge, may not always be in the singular form. If that
happens, we singularize it.
Determining the total number of rows (R) and the num-
ber of cells per rows (C). As discussed in Section 2, if we
know the total number of rows (R) and the number of cells
per row (C) in the HTML table holding the challenge image,
we can represent the challenge image as an R×C grid. We
use JavaScript methods to determine R and C.
Downloading
element
image.
rc-imageselect-tile
There will be multiple such elements based on the total
number of grids. Since all the elements link to the same
image, our system downloads the ﬁrst image only. However,
for click-based CAPTCHAs, it will need to download
dynamically loaded images on the selected grids as well.
Identifying buttons on the challenge widget. To submit the
challenge once it is solved, we need to click on the “verify”
button. Our system locates the “verify” button using its iden-
tiﬁers recaptcha-verify-button.
image.
the
challenge
holds
The
challenge
Implementation of the solver module
4.2
The solver module identiﬁes and localizes target objects in
reCAPTCHA challenge images. Further, the module is re-