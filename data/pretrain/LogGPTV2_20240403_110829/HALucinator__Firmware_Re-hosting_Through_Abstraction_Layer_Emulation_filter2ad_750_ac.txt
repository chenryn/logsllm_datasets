invoke the host system’s time() function. Most models,
however, merely act as a store or queue of events, such as
queuing received data for the serial port or Ethernet interface.
The I/O server is implemented as a publish-subscribe
system using the ZeroMQ [59] messaging library. In addition
to serving events to peripheral models from the host system,
the I/O server can also connect emulators’ peripheral models
together, allowing the emulation of multiple interconnected
systems. This is particularly useful when the host system
has no concept of the interface being shared, such as in the
6LoWPAN examples in Section 5.
Fuzzing with HALucinator. We created the ability to fuzz
ﬁrmware using HALucinator by replacing the full-system
QEMU engine at the center of HALucinator with AFL-
Unicorn [14]. AFL-Unicorn combines the ISA emulation
features of QEMU with a ﬂexible API, and provides the
coverage instrumentation and fork-server capabilities used
by AFL. It lacks any peripheral hardware support, making
it unable to fuzz ﬁrmware. Adding HALucinator’s high-level
emulation provides the needed peripheral hardware support.
Unicorn and AFL-Unicorn also deliberately remove the
concept of interrupts, which are necessary for emulating
ﬁrmware. Thus, we add a generalized interrupt controller
model, that supports ARM’s Cortex-M interrupt semantics.
AFL-Unicorn detects crashes by translating various execu-
tion errors (e.g., invalid memory accesses, invalid instructions,
etc.) into the equivalent process signal ﬁred upon the fuzzed
process (e.g., SIGSEGV), providing the appropriate signals
to AFL. Models and handlers can also explicitly send these
signals to AFL if their assumptions are violated.
1208    29th USENIX Security Symposium
USENIX Association
LibMatch Without Context Matching
LibMatch With Context Matching
Mfg.
Atmel
Atmel
Atmel
Atmel
Atmel
STM
STM
STM
STM
STM
STM
STM
NXP
NXP
NXP
NXP
Application
SD FatFS
lwIP HTTP
UART
6LoWPAN Receiver
6LoWPAN Sender
UART
UDP Echo Server
UDP Echo Client
TCP Echo Server
TCP Echo Client
SD FatFS
PLC
UART
UDP Echo Server
TCP Echo Server
HTTP Server
HAL
Syms
107
160
28
299
300
33
235
235
239
237
160
495
35
170
176
177
Correct
76 (71.0%)
128 (80.0%)
24 (85.7%)
224 (74.9%)
225 (75.0%)
15 (45.5%)
188 (80.0%)
186 (79.1%)
192 (80.3%)
190 (80.2%)
111 (69.4%)
358 (72.3%))
21 (60.0%)
133 (78.2%)
133 (75.5%)
133 (75.1%)
Collision
22
20
2
63
63
17
43
43
43
43
47
126
13
25
26
26
Incorrect Missing
9
12
2
10
10
1
4
4
4
4
2
11
1
12
17
18
0
0
0
2
2
1
0
0
0
0
0
0
0
0
0
0
Correct
98 (91.6%)
144 (90.0%)
26 (92.7%)
273 (91.3%)
275 (91.7%)
23 (69.7%)
207 (88.1%)
205 (87.2%)
211 (88.3%)
209 (88.2%)
140 (87.5%)
407 (82.2%)
21 (60.0%)
141 (83.0%)
142(80.7%)
145(82.0%)
Collision
2
9
1
17
17
9
24
24
24
24
20
79
13
16
16
16
Incorrect Missing
7
7
1
5
4
4
0
0
0
4
8
8
1
5
10
6
0
0
0
4
4
1
0
0
0
0
0
1
0
8
8
6
External
3
8
1
24
25
6
6
8
5
8
5
36
8
22
20
20
Table 1: LibMatch performance, with and without contextual matching.
5 Evaluation
For HALucinator to meet its goal of enabling scalable emu-
lation, it must accurately identify HAL functions in ﬁrmware,
and enable replacement of those functions with handlers. In
addition, the handlers must be created with reasonable effort,
and the emulation must be accurate to enable meaningful
dynamic analysis of the ﬁrmware. In this section, we show
that HALucinator meets these goals by evaluating LibMatch’s
ability to identify HALs in binaries, demonstrating interactive
emulation of 16 applications, and then utilizing HALucinator
to fuzz network-connected applications.
In our experiments, we use 16 ﬁrmware samples provided
with different development boards (STM32F479I-Eval [52],
STM32-Nucleo F401RE [51], SAM R21 Xplained Pro [48],
NXP FRDM-K64F [29]) from Atmel, NXP, and STM.
These samples were chosen for their diverse and complex
hardware interactions, including serial communication,
ﬁle systems on SD cards, Ethernet, 6LoWPAN, and WiFi.
They also contain a range of sophisticated application logic,
including wireless messaging over 6LoWPAN, a Ladder
Logic interpreter, and an HTTP Server with a Common
Gateway Interface (CGI). The set of included libraries is
also diverse, featuring STMicroelectronics’ STM32-Cube
HAL [53], NXP’s MCUXpresso [42], Atmel’s Advanced
Software Framework (ASF) [16], lwIP [37], FatFS [27],
and Contiki-OS [25], a commonly used OS for low-power
wireless sensors, with its networking stack µIP .
Experiment Setup. All STMicroelectronics ﬁrmware
was compiled using gcc -Os targeting a Cortex-M3. The
STMicroelectronics boards use Cortex-M4 microcontrollers,
however QEMU lacks support for some Cortex-M4 instruc-
tions (resulting in a runtime fault), thus these examples
were compiled using the Cortex-M3 instruction set. Atmel’s
example applications were compiled using Atmel Studio
7, using its release build conﬁguration that uses the -Os
optimization level and targets the Cortex-M0 ISA (a strict
subset of the Cortex-M3 ISA) as intended for their target
board. All NXP samples were compiled using the SDK’s
“release” conﬁguration, save for using the Cortex-M3 platform
instead of M4. All symbols were stripped from the binaries.
5.1 Library Identiﬁcation in Binaries
We ﬁrst explore the effectiveness of LibMatch in recovering
the addresses of functions in a binary ﬁrmware program.
As there are multiple locations within a ﬁrmware that may
be hooked, with various trade-offs in the complexity of
emulation, here we try to match the entire set of functions
provided by the HAL and its associated middleware. We
use symbol information in each target ﬁrmware sample to
provide the ground-truth address of each function. LibMatch
then tries to determine the address of each function in its
HAL database using a stripped version of this binary.
A comparison of the 16 ﬁrmware samples using LibMatch
with and without context matching is shown in Table 1.
LibMatch without context matching is comparable to what
is achievable with current matching algorithms (e.g., Bin-
Diff [28], or Diaphora [21]). However, a direct comparison is
not possible because these tools only perform a linked-binary
to linked-binary comparison and LibMatch must match
a linked binary to a collection of unlinked library objects
obtained from the HALs and middleware.
In Table 1, the number of HAL symbols is the number of
library functions present in the ﬁrmware, while the ‘Correct’
column shows the number of those functions correctly
identiﬁed. The ‘Collision’, ‘Incorrect’, and ‘Missing’
columns delineate reasons LibMatch was unable to correctly
identify the unmatched functions. The last column, ‘External’
is the number of functions external to the HAL libraries that
LibMatch with context matching labels correctly. Overall,
LibMatch without context matching averaged over the 16
applications matches 74.5% of the library functions, and
LibMatch with context matching increases this to an average
of 87.4%. Thus, nearly all of the HAL and middleware
libraries are accurately located within the binary.
Context matching identiﬁes many of the functions needed
for re-hosting ﬁrmware. The most dramatic example of
this is STMicroelectronics’s PLC application; it includes
STMicroelectronic’s WiFi
library, which communicates
USENIX Association
29th USENIX Security Symposium    1209
with the application using a series of callbacks called via
overridden symbols. In order to re-host this binary, the
handlers for this library must fulﬁll its contract with the
application, by calling these callbacks. Thus, recovering their
names, even when they are not part of the library database,
is necessary to enable their use during re-hosting. Resolved
collisions include various packet handling, timer, and external
interrupt functions of the Atmel 6LoWPAN stack, as well
as functions needed to enable fuzzing, such as lwIP’s IP
checksum calculation. One other important category of
functions resolved via context includes those that are neither
part of the vendor’s HAL, nor the application code, but come
from the compiling system’s standard C libraries, such as
malloc, free, and even the location of the program’s main.
Collisions are the most common causes of unlabeled
functions. Other common causes include C++ virtual function
call stubs, and functions that have multiple implementations
with different names. For example, the STM32 HAL contains
functions HAL_TIM_PWM_Init and HAL_TIM_OC_Init,
whose code is entirely identical, but operate on different data,
and have insufﬁcient context to distinguish them. Similarly, in
many C++-based HAL functions, a stub is used to lookup and
call a method on the object itself; identical code for this can
exist in many places. Those without actual direct calls cannot
be resolved through context. Finally, many unused interrupt
handlers contain the same default content (e.g., causing the de-
vice to halt) and thus collide. Since they are interrupt handlers,
they are never directly called, and thus cannot be resolved
via context. It is worth noting that these cases will confuse
any library-matching tool, as there is simply no information
on which to make a correct decision within the program.
The few “Incorrect” matches made by LibMatch stem from
cases where the library function name actually changed during
linking. In these cases, LibMatch has a single match for the
function—thus ﬁnding a match—but applies the wrong name
(i.e., the name before it was changed during linking). Our mea-
sure of correctness is the name, and therefore these are marked
as “Incorrect”. There are two main causes of ‘Missing‘ func-
tions: the application overrides a symbol and we are unable to
infer it as an External match via context, or bugs in the CFG
recovery performed by angr causing the functions’ content to
differ between the program and the library when they should
not. For example, most Cortex-M applications contain a sym-
bol SystemInit, which performs hardware speciﬁc initializa-
tion. Most HALs provide a default, but this symbol is very of-
ten overridden by the ﬁrmware to conﬁgure hardware timing
parameters, and it is only ever called from other application-
customized code. Thus we lack context to resolve it. None of
the unmatched or collided functions are functions needed to
perform high-level emulation, and thus, the less-than-100%
accuracy of LibMatch does not impact HALucinator.
5.2 Scaling of High-Level Emulation
We will examine the beneﬁts of HLE by exploring how the
simplicity of handlers and peripheral models allow emulation
with a minimum of human effort, and allow this effort to
scale to multiple systems.
Handlers and Human Effort. Implementing handlers is a
manual task; therefore it is important to quantify the amount
of effort required to emulate a system. While we could
perform this evaluation in terms of time, or in terms of an
objective measure of code complexity (which is given in Sec-
tion A.1), these measures do not factor in the amount the an-
alyst actually must understand about the code being replaced,
and thus do not fully convey the effort required. Therefore,
we divided the handlers used in our experiments into three
categories: Trivial handlers simply return a constant—usually
indicating the function executed correctly—and require no
knowledge of the implementation of the function being inter-
cepted. They are commonly used for hardware initialization
functions. Translating handlers translate the intercepted
function parameters to an action on a peripheral model. They
do not implement any logic, but just call a model after getting
the appropriate data for the model. This requires knowledge
of the function parameters, reading values to be passed to the
model, and then writing back values from the model to the
appropriate function parameters. For example, the handler
for the ENET_SendFrame from NXP’s HAL, simply reads the
frame buffer and length from the function parameters, and
passes them to the Ethernet model. The ﬁnal category, Inter-
nal Logic is the most complex for HALucinator and requires