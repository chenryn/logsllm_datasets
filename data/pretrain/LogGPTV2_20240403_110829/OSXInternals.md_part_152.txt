MDQueryRef queryRef = (MDQueryRef)object;
if (CFStringCompare(name, kMDQueryDidFinishNotification, 0)
== kCFCompareEqualTo) { // gathered results
// disable updates, process results, and reenable updates
MDQueryDisableUpdates(queryRef);
count = MDQueryGetResultCount(queryRef);
if (count > 0) {
for (idx = 0; idx kMDItemFSName
gimpprint.pdf
kMDItemFSNodeCount
0
kMDItemFSOwnerGroupID
501
...
Technically, the program in Figure 1128 does not necessarily list the contents of a smart folderit only
executes the raw query corresponding to the smart folder. The folder's contents will be different from the
query's result if the XML file contains additional search criteriasay, for limiting search results to the user's
home directory. We can extend the program to apply such criteria if it exists.
11.8.5. Spotlight Command-Line Tools
Mac OS X provides a set of command-line programs for accessing Spotlight's functionality. Let us look at
a summary of these tools.
mdutil is used to manage the Spotlight metadata store for a given volume. In particular, it can enable or
disable Spotlight indexing on a volume, including volumes corresponding to disk images and external
disks.
mdimport can be used to explicitly trigger importing of file hierarchies into the metadata store. It is also
useful for displaying information about the Spotlight system.
 The -A option lists all metadata attributes, along with their localized names and descriptions, known
to Spotlight.
 The -X option prints the metadata schema for the built-in UTI types.
 The -L option displays a list of installed metadata importers.
mdcheckschema is used to validate the given schema filetypically one belonging to a metadata importer.
mdfind searches the metadata store given a query string, which can be either a plain string or a raw query
expression. Moreover, mdfind can be instructed through its -onlyin option to limit the search to a given
directory. If the -live option is specified, mdfind continues running in live-update mode, printing the
updated number of files that match the query.
mdls retrieves and displays all metadata attributes for the given file.
11.8.6. Overcoming Granularity Limitations
An important aspect of Spotlight is that it works at the file levelthat is, the results of Spotlight queries are
files, not locations or records within files. For example, even if a database has a Spotlight importer that can
extract per-record information from the database's on-disk files, all queries that refer to records in a given
file will result in a reference to that file. This is problematic for applications that do not store their
searchable information as individual files. The Safari web browser, the Address Book application, and the
iCal application are good examples.
Safari stores its bookmarks in a single property list file (~/Library/Safari/Bookmarks.plist).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 69 of 90
Address Book stores its data in a single data file (~/Library/Application
Support/AddressBook/AddressBook.data). It also uses two Search Kit index files
(ABPerson.skIndexInverted and ABSubscribedPerson.sk-IndexInverted).
iCal maintains a directory for each calendar (~/Library/Application
Support/iCal/Sources/.calendar). Within each such directory, it maintains an index file
for calendar events.
Nevertheless, Safari bookmarks, Address Book contacts, and iCal events appear in Spotlight search results
as clickable entities. This is made possible by storing individual files for each of these entities and indexing
these files instead of the monolithic index or data files.
$ ls ~/Library/Caches/Metadata/Safari/
...
A182FB56-AE27-11D9-A9B1-000D932C9040.webbookmark
A182FC00-AE27-11D9-A9B1-000D932C9040.webbookmark
...
$ ls ~/Library/Caches/com.apple.AddressBook/MetaData/
...
6F67C0E4-F19B-4D81-82F2-F527F45D6C74:ABPerson.abcdp
80C4CD5C-F9AE-4667-85D2-999461B8E0B4:ABPerson.abcdp
...
$ ls ~/Library/Caches/Metadata/iCal//
...
49C9A25D-52A3-46A7-BAAC-C33D8DC56C36%2F-.icalevent
940DE117-47DB-495C-84C6-47AF2D68664F%2F-.icalevent
...
The corresponding UTIs for the .webbookmark, .abcdp, and .icalevent files are
com.apple.safari.bookmark, com.apple.addressbook.person, and com.apple.ical.bookmark,
respectively. The UTIs are claimed by the respective applications. Therefore, when such a file appears in
Spotlight results, clicking on the result item launches the appropriate application.
Note, however, that unlike normal search results, we do not see the filename of an Address Book contact in
the Spotlight result list. The same holds for Safari bookmarks and iCal events. This is because the files in
question have a special metadata attribute named kMDItemDisplayName, which is set by the metadata
importers to user-friendly values such as contact names and bookmark titles. You can see the filenames if
you search for these entities using the mdfind command-line program.
[View full width]
$ mdfind 'kMDItemContentType == com.apple.addressbook.person && kMDItemDisplayName ==
"Amit Singh"'
/Users/amit/Library/Caches/com.apple.AddressBook/Metadata/:ABPerson.abcdp
$ mdls /Users/amit/Library/Caches/com.apple.AddressBook/Metadata/:ABPerson.abcdp
...
kMDItemDisplayName = "Amit Singh"
...
kMDItemKind = "Address Book Person Data"
...
kMDItemTitle = "Amit Singh"
11.9. Access Control Lists
An access control list (ACL) is an ordered list of access control entries (ACEs). ACLs represent a popular
implementation approach[17] to the access control mechanism based on the Access Matrix model. In this
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 70 of 90
model, we have the following entities:
[17] Another common approach is the one using capability lists.
Objects, which are resources (such as files) that must be accessed in a protected manner
Subjects, which are active entities (such as user processes) that access objects
Rights, which represent operations (such as read, write, and delete) on objects
An ACL enumerates through its ACEs which objects may or may not access a particular object for one or
more rights. As we will see in Section 11.10, ACLs are evaluated by the kauth subsystem in the kernel.
Evaluation begins at the first ACE in the list, which may theoretically contain any number of ACEs. The
request is denied if an ACE denies any of the requested rights; the remaining ACEs, if any, are not
considered. Conversely, the request is granted if all requested rights are satisfied by the ACEs evaluated so
faragain, the remaining ACEs are not considered.
The Mac OS X chmod command can be used to insert or delete an ACE at a specific position in an ACL.
The Mac OS X ACL implementation requires extended attributes to be supported in the file system. As we
will see in Chapter 12, HFS+, which has native support for extended attributes, stores an ACL as the
attribute data of a special attribute named com.apple.system.Security. Before ACLs can be used on an
HFS+ volume, they must be enabled on the volumeeither through the fsaclctl command-line program or,
programmatically, by using the HFS_SETACLSTATE file system control operation.
...
int ret;
char volume_path[...];
u_int32_t aclstate = 1; // 1 enables, 0 disables
...
// HFS_SETACLSTATE is defined in bsd/hfs/hfs_fsctl.h
ret = fsctl(volume_path, HFS_SETACLSTATE, (void *)aclstate, 0);
...
The system library implements the POSIX.1e ACL security API, which is documented in the acl(3)
manual page. Figure 1129 shows a program thatgiven a file (or folder) pathnameuses the acl(3) API to
create an ACL, add an entry to it that denies deletion of that file to the calling user, and associate the ACL
with the file.
Figure 1129. A program to create and set an ACL
// aclset.c
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "aclset"
#define EXIT_ON_ERROR(msg, retval) if (retval) { perror(msg); exit((retval)); }
int
main(int argc, char **argv)
{
int ret, acl_count = 4;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 71 of 90
acl_t acl;
acl_entry_t acl_entry;
acl_permset_t acl_permset;
acl_perm_t acl_perm;
uuid_t uu;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
// translate Unix user ID to UUID
ret = mbr_uid_to_uuid(getuid(), uu);
EXIT_ON_ERROR("mbr_uid_to_uuid", ret);
// allocate and initialize working storage for an ACL with acl_count entries
if ((acl = acl_init(acl_count)) == (acl_t)NULL) {
perror("acl_init");
exit(1);
}