the user can also use FMK D to get access to FCC commands
such as GetRV, CompEPuK, GenPSK, DeriveSKey, and
VerP/ValT. As soon as a response of VerP/ValT execution is
received, FMK D sets state(IDA, sidA, A) := f inishedMKD.
• A user (ID, sid, l) with state(IDB , sidB , B) = startedMKD
can use FMK D to access FCC commands such as GetRV,
GetEPuK, GenPSK, DeriveSKey, and CompP&E. FMK D
forwards the responses it received from FCC to the user
while internally keeps track of all values, keys, and pointers
associated with the user. Furthermore, the user can use
(SecureTimestamps, t2, t3, ctimestamp, ptrii)
request
FMK D to secure the timestamps related to computation
time of cryptographic operations using timestamps t2 and
t3, cryptographic timestamp ctimestamp, and the preshared
key k to which the pointer ptrii points. If k is recorded in
the database as a preshared key of user IDB, FMK D uses the
Enc(.) and MAC(.) algorithms provided by the adversary
to compute y = Enck(ctimestamp, t2, t3) and z = MACk(y),
respectively. Then, FMK D returns (Timestamps, y, z) to the
user and sets state(IDB , sidB , B) := f inishedMKD.
to
445ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sani, et al.
• A user (ID, sid, l) with state(IDA, sidA, A) = f inishedMKD
can use (CompEED2, t4, t5) to request FMK D to compute the
EED eed2 of a data packet from its key derivation partner
(i.e., responder) using receiving time t5 and sending time of
the message t4. In this case, FMK D computes eed2 = t5 − t4,
and then checks whether eed2 ≤ max .eed2. If the check
succeeds, FMK D returns (EED2, eed2) to the user. Otherwise,
it returns (EED2, restricted) to the user.
• A user (ID, sid, l) with state(IDA, sidA, A) = f inishedMKD
can use (CompCCE, t0, t1, t2, t4, t5, t6) to request FMK D to
verify the computation time of cryptographic operations at
the responder cce2 and computation time of cryptographic
operations at the initiator cce1 using timestamps t0, t1, t2,
t4, t5, and t6, where t0 = tA is generated from execution of
GetRV command. In this case, FMK D computes cce2 = t4−t2
and cce1 = (t6−t5) +(t1−t0), and verifies that cce2 ≈ cce1. If
the verification succeeds, FMK D returns (CCE, cce2, cce1) to
the user. Otherwise, it returns (CCE, restricted) to the user.
• A user (ID, sid, l) with state(IDA, sidA, A) = f inishedMKD
can use (VerETimeMKD, cce2, cce1, eed1, eed2) to request
FMK D to verify the expected time of completing a mutual
authentication and key derivation session et .mkd using cce2,
cce1, eed1, and eed2. Upon receiving this request, FMK D
computes mkd = cce2 + cce1 + eed1 + eed2 and verifies
mkd ≤ et .mkd. If this verification succeeds, FMK D returns
Okay to the user and sets state(IDA, sidA, A) := closedMKD
to provide relay protection. Then, it notifies the adversary
via a restricting message (ClosedSession,(ID, sid, l)) and for-
wards the response to the user. Thus, the user loses access
to all values, keys, pointers, and commands.
• A user (ID, sid, l) with state(IDB , sidB , B) = f inishedMKD
can use FMK D to close her session by sending a re-
quest(CloseSession,(ID, sid, l)). Upon receiving this request,
FMK D sets state(ID, sid, l) := closedMKD, notifies the ad-
versary via a restricting message (CloseSession,(ID, sid, l))
and sends Okay to the user after receiving the adversary’s
response. As the session has been closed, the user no longer
has access to keys, pointers, values, and commands.
• A user (ID, sid, l) with state closedMKD or restricted can
be corrupted by the adversary since the user has no access
to any values, keys, pointers, and commands. Upon receiv-
ing m = (Corrupt,(ID, sid, l)), FMK D sets state(ID, sid, l) :=
corrupted. Furthermore, the user can ask for its corrup-
tion status and then FMK D sends a restricting message
(CorruptionStatus,(ID, sid, l)) to the adversary. In this case,
FMK D forwards the response to the user. Hence, these two
scenarios represent a simple corruption model of FMK D.
FMK D models relay resilience upon the successful execution of
VerETimeMKD since the attributes of the users and knowledge of
computation time of cryptographic operations and cryptographic
timestamps hold. Note that since the adversary does not have access
to any keys after mutual authentication and key derivation, FMK D
models perfect forward secrecy to enhance relay resilience.
An uncorrupted user can be paired with a corrupted user by
the adversary, however, the corrupted user will not get access to
the session key in FCC. Furthermore, we restrict the corruption
Figure 3: Mutual Authentication and Key Derivation Proto-
col (MKD).
model to improve the use of FMK D by real-world protocols in
smart vehicles. This restriction does not affect the expressivity of
our functionality as session keys derived from many real-world
protocols are usually short-lived and thus the chance for corruption
is negligible.
5 MUTUAL AUTHENTICATION AND KEY
DERIVATION PROTOCOL (MKD)
In this section, we present our mutual authentication and key deriva-
tion protocol MKD with relay-resilience security properties such as
mutual multi-factor authentication, key exchange, and key deriva-
tion as depicted in Figure 3. MKD is the first protocol to use a full-
fledged formal framework, i.e., Crypto-Chain, for relay resilience in
smart vehicles. Formally, MKD uses FCC to perform cryptographic
operations and realizes FMK D. We use two machines MA(MK D) and
MB(MK D) to model the role of key derivation initiator A and respon-
der B of our protocol. Only one instance of MA(MK D)/MB(MK D)
for every user (ID, sid) is available in the run of MKD to execute the
protocol from Figure 3. At the end of the protocol run, the instances
generate a preshared key k, derive a shared secret session key ki,
deliver pointers to these keys, and compute cryptographic proof
proo f and cryptographic timestamp ctimestamp. Furthermore, the
instances allow the user to use FCC to perform cryptographic opera-
tions with the keys in an ideal manner. We provide the theorem and
proof of MKD in Appendix D, which shows that MKD is a secure
QA , rA , t1IDAIDBCompEED1, t1, t2 :eed1GetRV :rB in {1,…,nr}, tB  CompEPuK, rB , tB : ptrB , QB GenPSK, ptrB ,rA ,QA , rB , QB :ptriiDeriveSKey, ptrii , rA , rB :ptriv CompP&E, ptriv , rA , rB  : proof, x, ctimestamp, t3 SecureTimestamps, t2 , t3 ,ctimestamp, ptrii  : y, z (where ptrii →  k , ptriv → ki , x = Encki (ki , rA , rB ) , proof = MACki (x) , ctimestamp = t3 . H(ki , rA , rB ), y = Enck(ctimestamp, t2 , t3 ), z = MACk (y))GetRV :rA in {1,…,nr}, tA  CompEPuK, rA , tA :ptrA , QA GenPSK, ptrA ,rB ,QB , rA , QA :ptriiDeriveSKey, ptrii , rB , rA :ptriv GetTimestamps, y, z, ptrii  : ctimestamp, t2 , t3VerP/ValE, ptriv , proof, x, ctimestamp, t3 : t6CompEED1, t2, t1 :eed1CompEED2, t4, t5 :eed2CompCCE, tA , t1 , t2 , t4 , t5 , t6   : cce2, cce1VerETimeMKD, cce2, cce1, eed1, eed2 : OkayQB , rB , proof, x, y, z, t4receive message at timestamp t2 send a message at timestamp t1 send a message at timestamp t4 receive message at timestamp t5446Crypto-Chain: A Relay Resilience Framework for Smart Vehicles
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
universally composable relay resilience mutual authentication and
key derivation protocol.
Table 1: Computation time of cryptographic algorithms in
Crypto-Chain
6 IMPLEMENTATION AND ANALYSES OF
MKD
In this section, we conduct some experiments to implement MKD
on Tmote Sky mote sensors [10], which are widely used in smart
vehicles, and then analyse the efficiency and relay resilience capa-
bilities of MKD. Tmote Sky mote sensors such as CM5000, XM1000,
and CM4000 are low power wireless sensors that are interopera-
ble with many IEEE 802.15.4 devices, offer a high data rate, and
support stability and implementation of time synchronization. We
implement MKD on the sensors to provide insights about its ac-
tual deployment in the smart vehicles as well as demonstrate the
efficiency of Crypto-Chain. We connect the sensors to a MacBook
Pro (2.3Ghz, Intel Core i5 processor, 8GM memory) for our im-
plementation as follows. Firstly, we implement Crypto-Chain’s
cryptographic algorithms such as the AES 128-bit encryption algo-
rithm. Note that the cryptographic algorithms are lightweight and
are used in this paper to support the practical implementation of
Crypto-Chain in smart vehicles. The components used in our exper-
iment are provided in Appendix E. All programs implementing the
cryptographic algorithms are written in nesC language [15] and we
implement the algorithms under the TinyOS operating system [16].
The computation time of each cryptographic algorithm is presented
in Table 1 for brevity. The breakdown of the number of bits and
computation time of cryptographic operations in our experiments
are given as follow: (I) Generate an ephemeral random value and
public key − 576 bits for 1.04002 s; (II) Compute End-to-End Delay
- 64 bits for 0.0146 ms; (III) Generate preshared secret key - 448
bits for 0.01823 s; (IV) Compute a cryptographic timestamp - 960
bits for 0.03824 s; (V) Validate a cryptographic timestamp - 960 bits
for 0.03819 s; (VI) Secure timestamps - 768 bits for 0.02909 s; (VI)
Get timestamps - 768 bits for 0.02908 s; and (VII) Verify expected
time of completing MKD - 224 bits for 0.05122 ms. Lastly, we as-
sess the maximum computational cost required for MKD execution
between two users (i.e., initiator and responder) and our results
show the following: (I) The responder requires ≈ 1.1255 s, which
can also be derived using (t4 − t2) as per the above computation
time; and (II) The initiator requires ≈ 1.1256 s, which can also be
derived using ((t6 − t5) + (t1 − t0)) as per the above computation
time. Thus, the computation time of cryptographic operations at
the responder cce2 is ≈ 1.1255 s and the computation time of all
cryptographic operations at the initiator cce1 is ≈ 1.1256 s.
We simulate MKD using the widely accepted network simulation
tool, Network Simulator 3 (NS-3) [9] to measure its EED and further
validate its relay resilience. The details of the simulation parameters
we used in NS-3 are as follows: i) Platform is Ubuntu 18.04 LTS;
ii) Communication medium is Wi-Fi; iii) Channel model is P2P;
iv) Transport layer is UDP; v) constant speed is ≈ 3 ∗ 108 ms−1
(speed of light); and vi) distance is 100 m. We also consider other
standard NS-3 parameters such as measuring network protocols
performance using a flow monitor. The maximum size of message
to be transmitted by the key derivation initiator and responder is
(QA, rA, t1) ≈ 384 bits and (QB , rB , proo f , x, y, z, t4) ≈ 1, 760 bits,
respectively. The EED of MKD is ≈ 8.2573 ms. We can see that the
Cryptographic Algorithm
AES 128-bit symmetric encryption
AES 128-bit symmetric decryption
SHA-256 hash algorithm
160-bit ECC point multiplication
keyed-Hash MAC-SHA256
32-bit random number
Tmote Sky mote sensors
0.00170 s
0.00167 s
0.0091 s
1.0400 s
0.0183 s
0.0073 ms
EED is less than our maximum 10 ms latency target of smart vehicles
applications systems such as cooperative driving and automated
overtaking [24, 33]. Hence, MKD is suitable and fit for the smart
vehicles and it further validates the efficiency of Crypto-Chain
(based on the transmitted messages). Furthermore, we consider
the impact of different distances on EED and our results show
that longer distances increase the EED. We recommended that
each of the initiator and responder should have a maximum EED
(supported by the size of the message) to verify the EED of the
message received and the responder should verify the computation
time of cryptographic operations (see below) to prevent an attacker
from tampering or shortening the distance of communication.
We utilize the EED result and computation time of cryptographic
operations to further mitigate relay attacks using MKD. Taking
values from our simulation, eed1, which represents the EED of the
data packet of size 384 bits from IDA to IDB, is 7.8374 ms, and eed2,
which represents the EED of the data packet of size 1, 536 bits from
IDB to IDA is 7.9066 ms. Recall, et .mkd = cce1 +cce2 +eed1 +eed2
(cf. Section 4). Hence, et .mkd = 1.1255 s + 1.1256 s + 7.8374 ms +
7.9066 ms = 2.2668 s. Note that the EED increases as the size of
a message increases. We consider the above results as the actual
EEDs required for mutual authentication and key derivation based
on our simulation settings, i.e., max .eed1 = 7.8374 ms, max .eed2 =
7.9066 ms, and et .mkd = 2.2668 s.
To show relay resilience using MKD, we use one our sensors (i.e.,
CM4000) as an attacker I to relay data packets between IDA (i.e.,
XM1000) and IDB (i.e., CM5000) in our simulation. The eed1I with
route IDA → I → IDB is 8.0086 ms and eed2I with route IDB →
I → IDA is 8.1293 ms. This shows that: (A) eed1I > max .eed1; (B)
eed2I > max .eed2; (C) eed1I is not directly proportional to eed2I
based on max .eed1 and max .eed2, respectively; (D) eed2I is not di-
rectly proportional to eed1I based on max .eed2 and max .eed1; and
(E) cce1 + cce2 + eed1I + eed2I > et .mkd. Thus, we conclude that
(i) since eed1I > max .eed1, CompEED1’s execution at IDB will
return restricted to provide relay resilience and that (ii) suppose
eed1I < max .eed1 and any of “B”, “C”, and “D” above holds true,
the mutual authentication and key derivation session will also be
restricted at IDA to provide relay resilience. The above simulation
and conclusion further validates the relay resilience capabilities of
Crypto-Chain based on the transmitted messages and EED values.
Note that: (I) Our implementation and analyses focus on demon-
strating the efficiency of our framework via satisfying our 10 ms
latency target and illustrating its relay resilience capability. (II) Our
framework can be supported by an NTP software that operates in
447ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sani, et al.
each hardware. Any software/hardware modifications will be based
on the NTP to provide the highest clock accuracy.
7 CASE STUDIES
In this section, we carry out two case studies to show the application
of our framework.
7.1 Megamos Crypto
The Megamos Crypto [5] is a symmetric cryptosystem. It is one of
the most widely deployed smart vehicle immobilizer systems used
in many Honda, Audi, Fiat, and Volkswagen cars. This system is
designed to act as a vehicle anti-theft solution between a vehicle
and a car key. These devices have a microprocessor chip that in-
corporates the Megamos Crypto. We extracted and described the
authentication protocol in the Megamos Crypto in Figure 1. It is
based on a pre-established shared secret key and PRF. We model the
Megamos Crypto in our framework using two machines MA(MC)
and MB(MC) to model the initiator (i.e., the vehicle) and responder
(i.e., the car key) roles, respectively. These machines have a sim-
ilar I/O interface as FMK D and each of them has a network tape.
They use FCC as a function to perform cryptographic operations.
In every run of the Megamos Crypto, there is only one instance of
MA(MC)/MB(MC) per user (ID, sid) executing the protocol as de-
picted in Figure 1 to negotiate a random number for authenticating
the identity of the responder.
The Megamos Crypto does not mitigate relay attacks and thus
cannot realize FMK D. To see this, we consider the following set-
ting: an honest initiator authenticates an honest responder that
provided a random value rB. The responder instance might have
received a genuine public key and a random value, say (QA, rA) in
the first message of the protocol. The Megamos Crypto does not
guarantee that (i) the initiator and responder sent (QA, rA) and rB,
respectively, and that (ii) an attacker did not relay (QA, rA) and
rB. The attacker can relay rB and (QA, rA) as a relay attack does
not manipulate the messages transmitted between the initiator
and responder. Thus, we have no security guarantee for the trans-
mitted messages and the attacker can easily let the initiator and
responder accept rB and (QA, rA), respectively. While this is not
a direct attack on the protocol, it shows that the security of the
Megamos Crypto is not sufficient to mitigate relay attacks. The
fixes for this problem in our setting are given as follows: i) enhance
the first message of the protocol with a timestamp, i.e., introduce
a timestamp t1 and equip the protocol with CompEED1 operation
of FMK D to compute EED; and ii) equip the protocol with all the
commands of FCC and VerETimeMKD operation of FMK D to avoid
the reliance on pre-established shared secret key for authentication
in the Megamos Crypto and provide mutual authentication and