图 3： 规避工具有时会被低价发售。一些卖家已经从互联网上购买或偷窃了多个crypters和packers然后打包出售。
图 4：其他卖家也会自己开发一些工具，并保留源代码以规避分析和检测。这些价格会因为其工具（据推测）不能被他人分销而比较昂高。
图 5：有些卖家会提供生产FUD文件的服务。服务会可能因为提供商使用的是高级的代码控制、高度混淆处理或其他自定义的加密器技巧而更昂贵。
图6：也有可能是购买一张证书来签发任何恶意软件，从而绕过操作系统的安全机制。
我们发现，如今在价格和销售服务上已发生了巨大的变化。某项服务会比那些只能提供一款容易被反恶意软件产品所检测到的编译工具，要昂贵许多。
**规避工具销售的黑市**
**被有组织的犯罪分子和安全公司所利用的规避技术**
黑客组织也对规避技术感兴趣。2015年，Hacking team透露了一些用于感染和监视系统的技术。他们强大的UEFI/BIOS
rootkit可以在不被检测的情况下进行传播。此外，Hacking team也开发了他们自己的FUD工具core-packer。
提供的渗透测试服务的安全公司了解并能使用这些技术，以允许其渗透测试人员模拟真正的黑客入侵。
Metasploit suite、Veil-Evasion和Shellter都允许渗透测试人员保护他们“恶意”的二进制文件。安全研究人员抢在攻击者发现之前，找到此类技术。我们已经发现最近的威胁”DoubleAgent”触发反恶意软件的解决方案。。
**规避技术正在行动**
在过去一年中，我们分析了很多具有规避能力的恶意软件样本。在典型的攻击中，攻击者在其攻击流程的许多步骤中会使用到规避技术。
下图是在一个典型的攻击序列中用到的规避技术：
**Dridex 银行木马**
Dridex（也被称为
Cridex）首次在2014年出现的知名的银行木马。这种恶意软件窃取银行凭据并通过包含恶意宏的Word文件，以电子邮件附件的形式进行传播。自2014
以来，发生过多起Dridex事件。在其每一次大获成功后，其对应的规避技术也相应的得到了增强。
Dridex深度依赖于病毒载体的免杀。我们分析了它的几个样本。
图 7：
我们可以看到函数名称和数据的混淆。这种混淆是很细微的，因为它使用ASCII数字。（哈希：610663e98210bb83f0558a4c904a2f5e）
其他变种则会用到更多先进的技术。
图8：这个样本使用字符串的规避和内容混淆技术，PowerShell绕过策略执行，并在maxmind.com上检查ip地址是否是反病毒软件供应商的黑名单。（哈希：e7a35bd8b5ea4a67ae72decba1f75e83）
在另一个样本中，Dridex的感染载体试图检测通过检查注册表的键值“HKLM
SYSTEMControlSet001ServicesDiskEnum”来搜索虚拟环境或沙箱的字符串“VMWARE”或“VBOX”。当虚拟机或沙箱被检测到时，Dridex就停止运行，伪装成无害的，或试图导致系统崩溃。
规避技术广泛用于感染载体，以避免检测和被分析师识别。在攻击的多个阶段，Dridex通过结合多种技术来避免检测和分析。
图9：在这个例子中，Dridex使用进程挖空的规避技术，将恶意代码注入到一个挂起的进程中。然后一个新的进程去调用rundll32.exe，将恶意的DLL加载到explorer.exe。
最近的”Dridex”样本使用了新的规避技术“AtomBombing”。这种技术使用Atom表，由操作系统提供，允许应用程序存储和访问数据。
Atom表也可用于在应用程序之间共享数据。。
将恶意代码注入Atom表，并强制使用合法的应用程序执行该代码。因为用于注入恶意代码的技术是众所周知、且容易被发现的，所以攻击者现在改变了他们的技术。
最后，Dridex的最终载荷通常使用混淆和加密来保护数据，例如控制服务器的URL、僵尸网络的信息和恶意二进制代码中包含的PC名称。
**Locky勒索软件**
在2016年新近加入的勒索软件家族之中，当属Locky最为突出。它使用许多方法感染系统。它的一些规避技术与Dridex类似。
图 10：Locky的感染载体用统一编码与随机字符串函数的基本混淆处理。（哈希： 2c01d031623aada362d9cc9c7573b6ab）
在前面的例子中，抗混淆几乎不起作用，因为它很容易会被反Unicode，即一种用于不同格式打印文本的编码标准。此代码段中的每个统一编码字符都对应一个ASCII字符。
图11— 12：在这个抗混淆的感染载体中，其代码从一个外部URL下载EXE文件到TEMP文件夹中。
其他Locky的样本在多个阶段使用XOR加密，来规避检测并绕过邮件过滤和web网关。
一些Locky的变种还使用到了Nullsoft Scriptable Install
System(NSIS)压缩文件。在恶意软件试图绕过反恶意软件引擎时，该合法的应用程序经常被使用到。NSIS文件可以直接被解压缩以获取其内容。
图
13：在此Locky样本中，我们可以看到很多旨在浪费分析时间的垃圾文件。所有这些文件被NSIS程序所压缩。其中只有一些被用来在目标系统上执行恶意操作。（哈希：
5bcbbb492cc2db1628985a5ca6d09613）
除了混淆可执行的格式，Locky还使用tricks来绕过防火墙和控制服务器的网络。一些Locky的变种会使用到Domain generation
algorithm，即一种允许动态创建域的技术。Locky作者在每一次攻击活动中都会更改和更新其规避技术。
在2016年8月，Locky开始使用一个命令行参数来规避自动化的沙盒分析。如果没有命令行，此样本将不会运行在系统之上和其载荷也将不会被解码成到内存之中。
图 14：在此样本中，命令行参数"123"通过感染载体被传递到JavaScript文件。然后，由 Windows API — GetCommandLine和
CommandLineToArgvW读取命令行参数。（哈希： 0fed77b29961c0207bb4b7b033ca3fd4）
此样本的参数被用于解密并解压载荷到内存之中。如果该参数不正确，该样本只会在其试图运行加密的代码时崩溃。
Locky和其他恶意软件的另一个技巧是通过读Read Time Stamp
Counter(RDTSC)的x86指令来检测虚拟环境。时间戳计数器记录着被重置以来的处理器周期的数量。RDTSC指令只是返回存储在寄存器edx:eax中的该计数器的数值。
在物理主机上，两个连续的RDTSC指令只占有少量的周期。而在虚拟主机上，此数量的周期将会变大。如果返回的值不是预期的值，该样本会进入休眠状态。
图 15： Windows
API调用GetProcessHeap和CloseHandle的指令用于增加处理器的周期（基于周期的指令IPC，可估算处理器的性能）。Locky比较其数值，如果执行CloseHandle比GetProcessHeap多10倍的周期，恶意软件则得出结论自己是运行在虚拟机中。（哈希：
0bf7315a2378d6b051568b59a7a0195a）
**Nymain下载者**
Nymain提供木马或勒索类型的恶意软件。Nymain使用多种规避机制以规避分析和检测。它是具有混淆处理和沙箱检测，以及活动计时器等多种反逆向工程技术的组合。
大多数恶意软件使用假的metadata以假装合法。metadata包括文件版本、公司名称和语言等程序有关的信息。而其他样本则使用被盗的证书来假装合法。
图 16：Nymain使用的metadata。（哈希： 98bdab0e8f581a3937b538d73c96480d）
图 17：Nymain使用反调试技巧，来规避调试器的动态分析。
最常见、也是最容易绕过的函数是IsDebuggerPresent。其代码调用Windows
API，并在寄存器中设置一个值。如果该值不是等于零，则该程序目前正在被调试。在这种情况下，恶意软件将很快终止与API
TerminateProcess的进程。另一种旁路调试器的技巧叫做 FindWindow。如果一个窗口与调试器有关，例如OllyDbg或Immunity
Debugger，则此API会检测到它并关闭其恶意软件。
Nymain还执行如下额外的检查，以规避分析：
检查日期，并在攻击结束后不再执行。
检查系统上是否有恶意软件文件名的哈希值。如果有，则分析可能正在进行中。
检查与虚拟环境相关的 MAC 地址。
检查注册表项HKLMHARDWAREDescriptionSystem”SystemBiosVersion”的键值，以查找字符串"VBOX"。