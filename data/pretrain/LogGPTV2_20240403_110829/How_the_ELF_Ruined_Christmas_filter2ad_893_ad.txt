6.2 Operating System Survey
To understand Leakless’ impact on real-world systems,
we performed a survey of all binaries installed in default
installations of several different Linux and BSD distribu-
tions. Speciﬁcally, we checked all binaries in /sbin, /bin,
/usr/sbin, and /usr/bin on these systems and classiﬁed
the binaries by the applicability of the techniques used
by Leakless. The distributions that we considered were
Ubuntu 14.10, Debian Wheezy, Fedora 20, and FreeBSD
10. We used both x86 and x86-64 versions of these sys-
tems. On Ubuntu and Debian, we additionally installed the
LAMP (Linux, Apache, MySQL, PHP) stack as an attempt
to simulate a typical server deployment conﬁguration.
The ﬁve categories that we based our ratings on are as
USENIX Association  
24th USENIX Security Symposium  651
9
Table 2: Gadgets required for the various approaches. The “Signature” column represents the name of the gadget and the
parameters it accepts, while “Implementation” presents the behavior of the gadget in C-like pseudo code. The last four
columns indicate whether a certain gadget is required for the corresponding approach presented in Section 4. Under
RELRO, “N” indicates RELRO is disabled, “P” means partial RELRO is used, “H” stands for the partial RELRO and
small 64 bit binaries using huge pages, and “F” denotes that full RELRO is enabled.
Signature
write memory (destination, value)
deref write(pointer, o f f set, value)
deref save (destination, pointer, o f f set)
copy to stack (o f f set, source)
Implementation
∗ (destination) =value
∗ (∗ (pointer) +o f f set ) =value
∗ (destination) =∗ (∗ (pointer) +o f f set )
∗ (stack pointer + o f f set) =∗ (source)
RELRO
N P H F
(cid:31) (cid:31) (cid:31) (cid:31)
(cid:31) (cid:31)
(cid:31)
(cid:31)
follows:
Unprotected. This category includes binaries that have
no RELRO or PIE. For these binaries, Leakless
can apply its base case technique, explained in Sec-
tion 4.1.
Partial RELRO. Binaries that have partial RELRO, but
lack PIE, fall into this category. In this case, Leakless
would apply the technique described in Section 4.2.
Partial RELRO (huge pages). Binaries in this category
have partial RELRO, use huge pages, and are very
small, therefore, they require Leakless to use the
technique described in Section 4.3. They are included
in this category.
Full RELRO. To attack binaries that use full RELRO,
which comprise this category, Leakless must apply
the technique presented in Section 4.4.
Not susceptible. Finally, we consider binaries that use
PIE to be insusceptible to Leakless (further discussion
on this in Section 7.2).
The results of the survey, normalized to the total number
of binaries in an installation, are presented in Figure 5.
We determined that, on Ubuntu, 84% of the binaries were
susceptible to at least one of our techniques and 16% were
protected with PIE. On Debian, Leakless can be used
on 86% of the binaries. Fedora has 76% of susceptible
binaries. Interestingly, FreeBSD ships no binaries with
RELRO or PIE, and is thus 100% susceptible to Leakless.
Additionally, we performed a survey on the shared
libraries of the systems we considered. We found that,
on average, only 11% of the libraries had full RELRO
protection. This has some interesting implications for
Leakless: for a given binary, the likelihood of ﬁnding a
loaded library without full RELRO is extremely high and,
even if a vulnerable binary employs RELRO, Leakless
can still apply its full RELRO attack to bypass this. This
has the effect of making RELRO basically useless as a
mitigation technique, unless it is applied system-wide.
Unprotected
Full RELRO
Partial RELRO
Not susceptible
Partial RELRO HP
100
s
e
i
r
a
n
i
B
f
o
e
g
a
t
n
e
c
r
e
P
80
60
40
20
0
Ubuntu
Debian
Fedora
FreeBSD
Ubuntu 64
Debian 64
Fedora 64
FreeBSD 64
Figure 5: Classiﬁcation of the binaries in default in-
stallations of target distributions. Binaries marked as
Unprotected, Partial RELRO, Partial RELRO HP and
Full RELRO require, respectively, to the attacks detailed in
Sections 4.1, 4.2, 4.3 and 4.4, while for Not susceptible
binaries, the Leakless approach is not applicable
6.3 Case Study: Wireshark
We carried out a case study in applying Leakless to a
vulnerability in a program that does not present a direct
line of communication to the attacker. In other words, the
exploit must be done in one-shot, with no knowledge of
the layout of the address space or the contents of libraries.
We picked a recent (April 2014) vulnerability [7], which
is a stack-based buffer overﬂow in Wireshark’s MPEG
protocol parser in versions 1.8.0 through 1.8.13 and 1.10.0
through 1.10.6. We carried out our experiments against a
Wireshark 1.8.2 binary compiled with partial RELRO and
one compiled with full RELRO. Both were compiled for
x86-64 on Debian Wheezy and used the GNU C Library,
without other protections such as PIE and stack canaries.
We used the manual Leakless backend to identify the
required gadgets to construct the four necessary primitives
(described in Section 5.1): write memory, deref write,
deref save and copy to stack. In the case of Wireshark, it
was trivial to ﬁnd gadgets to satisfy all of these primitives.
652  24th USENIX Security Symposium 
USENIX Association
10
Leakless was able to construct a one-shot exploit using
the attacks presented in Section 4.2 and Section 4.4. In
both cases, the exploit leverages the dynamic loader in
order to call the execve function from glibc to launch an
executable of our choice.
6.4 Case Study: Pidgin
We also applied Leakless to Pidgin, a popular multi-
protocol instant-messaging client, to build a more so-
phisticated exploit. Speciﬁcally, we wanted to perform a
malicious operation without calling any anomalous sys-
tem call (e.g. execve("/bin/sh")) which could trigger
intrusion detection systems. We used Pidgin 2.10.7, build-
ing it from the ofﬁcial sources with RELRO enabled and
targeting the x86 architecture.
To this end, we crafted an exploit designed to mas-
querade itself in legitimate functionality present in the
application logic: tunneling connections through a proxy.
The idea of the attack is that an IM service provider ex-
ploits a vulnerability such as CVE-2013-6487 [14] to
gain code execution, and, using Pidgin’s global proxy
settings, redirects all IM trafﬁc through a third-party server
to enable chat interception.
Once we identiﬁed the necessary gadgets to use Leak-
less with full RELRO protection, it was easy to invoke
functions contained in libpurple.so (where the core of
the application logic resides) to perform the equivalent of
the C code shown in Listing 2.
Listing 2: The Pidgin attack.
void *p , *a;
p = purple_proxy_get_setup (0) ;
purple_proxy_info_set_host (p , " legit . com ");
purple_proxy_info_set_port (p , 8080) ;
purple_proxy_info_set_type (p , PURPLE_PROXY_HTTP );
a = purple_accounts_find (" usr@xmpp " , " prpl - xmpp ");
purple_account_disconnect (a);
purple_account_connect (a);
Interestingly, some of this library-provided functionality
is not imported into the Pidgin executable itself, and
would be very challenging to accomplish in a single-stage
payload, without Leakless.
6.5 ROP chain size comparison
To prove the effectiveness of the Leakless approach, we
compared it with two existing techniques that allow an
attacker to call arbitrary library functions. The ﬁrst consists
in scanning a library backwards, starting from an address in
the .plt.got section, until the ELF header is found, and
then scan forward to ﬁnd a ﬁngerprint of the function the
attacker wants to invoke. This approach is feasible, but not
very reliable, since different versions (or implementations)
of a library might not be uniquely identiﬁed with a single
ﬁngerprint. The second technique is more reliable, since
it implements the full symbol resolution process, as it is
carried out by the dynamic loader.
Table 3: Size of the ROP chains generated by ROPC for
each technique presented in Section 6.5, and by Leakless’
manual backend (*). The second column represents the
size in bytes for the setup and the ﬁrst call, while the
third column shows the additional cost (in bytes) for each
subsequent call. Finally, the fourth column indicates the
percentage of vulnerabilities used in Metasploit that would
be feasible to exploit with a ROP chain of the First call
size.
Technique
First call
Subsequent
Feasibility
ROPC - scan library
ROPC - symbol resolution
Leakless partial RELRO
Leakless full RELRO
Leakless* partial RELRO
Leakless* full RELRO
3468 bytes +340 bytes
7964 bytes +580 bytes
+84 bytes
648 bytes
+84 bytes
2876 bytes
+48 bytes
292 bytes
448 bytes
+48 bytes
16.38%
8.67%
73.78%
17.44%
95.24%
88.9%
We implemented these two approaches using a Turing-
complete ROP compiler for x86, based on Q [34], called
ROPC [22]. We compare these approaches against that
of Leakless’ ROPC backend, in partial RELRO and full
RELRO modes. For completeness, we also include the
Leakless’ manual backend, with gadgets speciﬁed by the
user.
In fact, the size of a ROP payload is critical, vulnera-
bilities often involve an implicit limit on the size of the
payload that can be injected into a program. To measure
the impact of Leakless’ ROP chain size, we collected the
size limits imposed on payloads of all the vulnerability
descriptions included in the Metasploit Framework [31], a
turn-key solution for launching exploits against known
vulnerabilities in various software. We found that 946 of
the 1,303 vulnerability speciﬁcations included a maximum
payload size, with an average speciﬁed maximum payload
size of 1332 bytes. To demonstrate the increase in the
feasibility of automatically generating complex exploits,
we include, for each evaluated technique, the percentage
of Metasploit vulnerabilities for which the technique can
automatically produce short enough ROP chains.
The results, in terms of length of the ROP chain gener-
ated for ROPC’s test binaries and feasibility against the
vulnerabilities used in Metasploit, are shown in Table 3.
Leakless outperforms existing techniques, not only in the
absolute size of the ROP chain to perform the initial call,
but also in the cost of performing each additional call,
which is useful in a sophisticated attack such as the one
demonstrated in Section 6.4.
USENIX Association  
24th USENIX Security Symposium  653
11
7 Discussion
In this section, we will discuss several aspects relating to
Leakless: why the capabilities that it provides to attackers
are valuable, when it is most applicable, what its limitations
are, and what can be done to mitigate against them.
7.1 Leakless Applications
Leakless represents a powerful tool in the arsenal of
exploit developers, aiding them in three main areas: func-
tionality reuse, one-shot exploitation, and ROP chains
shortening.
One-shot exploitation. While almost any exploit can
be simpliﬁed by Leakless, we have designed it with the
goal of enabling exploits that, without it, require an infor-
mation disclosure vulnerability, but for which an informa-
tion disclosure is not feasible or desirable. A large class
of programs that fall under this category are ﬁle format
parsers.
Code that parses ﬁle formats is extremely complex and,
due to the complex, untrusted input that is involved, this
code is prone to memory corruption vulnerabilities. There
are many examples of this: the image parsing library
libpng had 27 CVE entries over the last decade [10], and
libtiff had 53 [11]. Parsers of complex formats suffer
even more: the multimedia library ffmpeg has accumu-
lated 170 CVE entries over the last ﬁve years alone [9].
This class of libraries is not limited to multimedia. Wire-
shark, a network packet analyzer, has 285 CVE entries,
most of which are vulnerabilities in network protocol
analysis plugins [12].
These libraries, and others like them, are often used
ofﬂine. The user might ﬁrst download a media or PCAP
ﬁle, and then parse it with the library. At the point where
the vulnerability triggers, an attacker cannot count on
having a direct connection to the victim to receive an
information disclosure and send additional payloads. Fur-
thermore, most of these formats are passive, meaning that
(unlike, say, PDF), they cannot include scripts that the
attacker can use to simulate a two-step exploitation. As a
result, even though these libraries might be vulnerable,
exploits for them are either extremely complex, unreliable,
or completely infeasible. By avoiding the information
disclosure step, Leakless makes these exploits simpler,
reliable, and feasible.
Functionality reuse. Leakless empowers attackers
to call arbitrary functions from libraries loaded by the
vulnerable application. In fact, the vulnerable application
does not have to actually import this function; it just needs
to link against the library (i.e., call any other function in
the library). This is brings several beneﬁts.
To begin with, the C Standard Library, which is linked
against by most applications, includes functions that wrap
almost every system call (e.g., read(), execve(), and so
on). This means that Leakless can be used to perform any
system call, in a short ROP chain, even without a system
call gadget.
Moreover, as demonstrated in Section 6.4, Leakless
enables easy reuse of existing functionality present in the
application logic. This is important for two reasons.
First, this helps an attacker perform stealthy attacks by
making it easier to masquerade an exploit as something
the application might normally do. This can be crucial
when a standard exploitation path is made infeasible by the
presence of protection mechanisms such as seccomp [2],
AppArmor [1], or SELinux [25].
Second, depending on the goals of the attacker, reusing
program functionality may be better than simply executing
arbitrary commands. Aside from the attack discussed
in our Pidgin case study, an attacker can, for example,
silently enable insecure cipher-suites, or versions of SSL,
in the Firefox web browser with a single function call to
SSL CipherPrefSetDefault [24].
Shorter ROP chains. As demonstrated in Section 6.5,
Leakless produces shorter ROP chains than existing tech-
niques. In fact, in many cases, Leakless is able to produce
ROP chains less than one kilobyte that lead to the execu-
tion of arbitrary functions. As many vulnerabilities have a
limit as to the maximum size of the input that they will
accept, this is an important result. For example, the vulner-
ability that we exploited in our Pidgin case study allowed
a maximum ROP chain of one kilobyte. Whereas normal
ROP compilation techniques would be unable to create au-
tomatic payloads for this vulnerability, Leakless was able
to call arbitrary functions via an automatically-produced
ROP chain that remained within the length limit.
7.2 Limitations
Leakless’ biggest limitation is the inability to handle
Position Independent Executables (PIEs) without a prior
information disclosure. This is a general problem to any
technique that uses ROP, as the absolute addresses of
gadgets must be provided in the ROP chain. Additionally,
without the base address of the binary, Leakless would be
unable to locate the dynamic loader structures that it needs
to corrupt.
When presented with a PIE executable, Leakless re-
quires the attacker to provide the application’s base ad-
dress, which is presumably acquired via an information
disclosure vulnerability (or, for example, by applying the
technique presented in BROP [5]). While this breaks Leak-
less’ ability to operate without an information disclosure,
Leakless is likely still the most convenient way to achieve
exploitation, as no library locations or library contents
have to be leaked. Additionally, depending on the situation,
the disclosure of just the address of the binary might be
more feasible than the disclosure of the contents of an
entire library. Unlike other techniques, which may need
654  24th USENIX Security Symposium 
USENIX Association
12
the latter, Leakless only requires the former.
In practice, PIEs are uncommon due to the associated
cost in terms of performance. Speciﬁcally, measurements
have shown that PIE overhead on x86 processors aver-
ages at 10%, while the overhead on x86-64 processors,
thanks to instruction-pointer-relative addressing, averages
at 3.6% [28].
Because of the overhead associated with PIE, most dis-
tributions ship with PIE enabled only for those applications
deemed “risky”. For example, according to their documen-
tation, Ubuntu ships only 27 of their ofﬁcially supported
packages (i.e., packages in the “main” repository) with
PIE enabled, out of over 27,000 packages [40]. As shown
in Section 6.1, PIE executables comprise a minority of the
executables on all of the systems that we surveyed.
7.3 Countermeasures
There are several measures that can be taken against