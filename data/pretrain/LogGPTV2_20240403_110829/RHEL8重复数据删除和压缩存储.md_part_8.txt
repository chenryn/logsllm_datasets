`TRIM`{.literal} 或 `DISCARD`{.literal}
命令，以便在不再需要逻辑块时通知存储系统。
有几种发送 `TRIM 或`{.literal} `DISCARD`{.literal} 命令的方法：
::: itemizedlist
-   通过 `discard`{.literal}
    挂载选项，无论何时删除块，文件系统都可发送这些命令。
-   您可以使用 `fstrim`{.literal}
    等实用程序以受控的方式发送命令。这些实用程序告诉文件系统检测哪些逻辑块未使用，并以
    `TRIM`{.literal} 或 `DISCARD`{.literal}
    命令的形式向存储系统发送信息。
:::
在未使用的块中使用 `TRIM`{.literal} `或 DISCARD`{.literal} 不是 VDO
的唯一需求。任何精简置备的存储系统也会遇到同样的问题。
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#increasing-the-logical-size-of-a-vdo-volume_increasing-the-size-of-a-vdo-volume}增大 VDO 卷的逻辑卷大小 {.title}
:::
这个过程会增加给定 VDO
卷的逻辑大小。它允许您首先创建具有逻辑大小足够小的 VDO
卷，使其安全而无法耗尽空间。段时间后，您可以评估实际的数据减少率，如果足够，您可以增大
VDO 卷的逻辑大小以利用空间节省。
不可能缩小 VDO 卷的逻辑卷大小。
::: itemizedlist
**流程**
-   要增大逻辑大小，请使用：
    ``` screen
    # vdo growLogical --name=my-vdo \
                      --vdoLogicalSize=new-logical-size
    ```
    当逻辑卷增大时，VDO 会报告有新的大小卷上的任何设备或文件系统。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#increasing-the-physical-size-of-a-vdo-volume_increasing-the-size-of-a-vdo-volume}增加 VDO 卷的物理大小 {.title}
:::
此流程增加 VDO 卷可以使用的物理存储量。
不可能以这种方式缩小 VDO 卷。
::: itemizedlist
**先决条件**
-   基础块设备的容量大于 VDO 卷的当前物理大小。
    如果没有，您可以尝试增加设备的大小。确切的步骤取决于设备的类型。例如：要调整
    MBR 或 GPT [*分区大小，请参阅管理存储设备指南中的
    [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/assembly_getting-started-with-partitions_managing-storage-devices#assembly_resizing-a-partition_assembly_getting-started-with-partitions](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/assembly_getting-started-with-partitions_managing-storage-devices#assembly_resizing-a-partition_assembly_getting-started-with-partitions){.link}
    重新定义分区大小部分*]{.emphasis}。
:::
::: itemizedlist
**流程**
-   为 VDO 卷添加新物理存储空间：
    ``` screen
    # vdo growPhysical --name=my-vdo
    ```
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#removing-vdo-volumes_maintaining-vdo}删除 VDO 卷 {.title}
:::
您可以删除系统中的现有 VDO 卷。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#removing-a-working-vdo-volume_removing-vdo-volumes}删除一个有效的 VDO 卷 {.title}
:::
此流程移除 VDO 卷及其关联的 UDS 索引。
::: orderedlist
**流程**
1.  卸载文件系统并停止使用 VDO 卷中的存储的应用程序。
2.  要从您的系统中删除 VDO 卷，请使用：
    ``` screen
    # vdo remove --name=my-vdo
    ```
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#removing-an-unsuccessfully-created-vdo-volume_removing-vdo-volumes}删除失败创建的 VDO 卷 {.title}
:::
此流程清理处于中间状态的 VDO
卷。如果在创建卷时发生故障，则卷处于中间状态。这可能会在以下情况发生，例如：
::: itemizedlist
-   系统崩溃
-   电源失败
-   管理员中断了 running `vdo create`{.literal} 命令
:::
::: itemizedlist
**流程**
-   要清理，请使用 `--force`{.literal} 选项删除创建失败的卷：
    ``` screen
    # vdo remove --force --name=my-vdo
    ```
    需要 `--force`{.literal}
    选项，因为管理员可能会通过更改系统配置造成冲突，因为卷创建失败。
    如果没有 `--force`{.literal} 选项，`vdo remove`{.literal}
    命令会失败并显示以下信息：
    ``` screen
    [...]
    A previous operation failed.
    Recovery from the failure either failed or was interrupted.
    Add '--force' to 'remove' to perform the following cleanup.
    Steps to clean up VDO my-vdo:
    umount -f /dev/mapper/my-vdo
    udevadm settle
    dmsetup remove my-vdo
    vdo: ERROR - VDO volume my-vdo previous operation (create) is incomplete
    ```
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#related-information-maintaining-vdo}相关信息 {.title}
:::
::: itemizedlist
-   您可以使用 [**Ansible**]{.strong} 工具自动部署和管理
    VDO。详情请查看：
    ::: itemizedlist
    -   Ansible 文档：
        [https://docs.ansible.com/](https://docs.ansible.com/){.link}
    -   VDO Ansible 模块文档：
        [https://docs.ansible.com/ansible/latest/modules/vdo_module.html](https://docs.ansible.com/ansible/latest/modules/vdo_module.html){.link}
    :::
:::
:::
:::
[]{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html}
::: chapter
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#testing-vdo-space-savings_deduplicating-and-compressing-storage}第 3 章 测试 VDO 空间节省 {.title}
:::
您可以执行一系列测试来确定可以使用 VDO 保存多少存储空间。
::: itemizedlist
**先决条件**
-   一个或多个物理块设备可用。
-   目标块设备大于 512 GiB。
-   已安装 VDO。
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#the-purpose-and-outcomes-of-testing-vdo_testing-vdo-space-savings}测试 VDO 的目的和结果 {.title}
:::
红帽提供的 VDO 测试可评估 VDO
整合到现有存储设备中。它们是为了提高而不是替换您的内部评估。
测试结果可帮助您了解特定存储环境中的 VDO
行为。原始设备制造商(OEM)可以了解如何设计其重复数据删除和压缩功能设备，以及他们的客户如何为这些设备调优他们的应用程序。
::: itemizedlist
**目标**
-   识别来自测试设备的优化响应的配置设置。
-   解释基本调优参数，以帮助避免产品错误配置。
-   创建性能结果参考与实际使用案例进行比较。
-   识别不同的工作负载对性能和数据效率的影响。
-   缩短了实施 VDO 的时间。
:::
::: title
**测试计划和测试条件**
:::
VDO 测试提供了可最大程度评估 VDO
的条件。更改测试步骤或参数可能会导致结果无效。红帽销售工程师可在修改测试计划时为您提供指导。
要有效的测试计划，您必须检查 VDO 架构并探索这些项目：
::: itemizedlist
-   高负载环境中的性能
-   用于性能调优终端用户应用程序的 VDO 的可配置属性
-   VDO 的影响是一个原生 4 KiB 块设备
-   对 deduplication 和压缩的访问模式和发行的响应
-   特定应用程序的成本和容量值和性能
:::
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#thin-provisioning-in-vdo_testing-vdo-space-savings}VDO 中的精简置备 {.title}
:::
VDO 是一个精简配置的块存储目标。VDO
卷使用的物理空间量可能与为存储用户显示的卷大小有所不同。您可以使用它来节约存储成本。
::: title
**没有可用空间条件**
:::
如果写入的数据没有达到预期的性能率，请小心会意外出现存储空间耗尽的问题。
每当逻辑块（虚拟存储）的数量超过物理块（实际存储）的数量时，文件系统和应用程序可能会意外地遇到没有存储空间的问题。因此，使用
VDO 的存储系统必须为您提供一个监控 VDO 卷中可用池大小的方法。
您可以使用 `vdostats`{.literal}
实用程序确定此可用池的大小。这个工具的默认输出列出所有运行 VDO
卷的信息，其格式与 Linux `df`{.literal} 程序类似。例如：
``` screen
Device                1K-blocks   Used        Available   Use%
/dev/mapper/vdo-name  211812352   105906176   105906176   50%
```
当 VDO 卷的物理存储容量接近满时，VDO 在系统日志中报告警告，如下所示：
``` screen
Oct  2 17:13:39 system lvm[13863]: Monitoring VDO pool vdo-name.
Oct  2 17:27:39 system lvm[13863]: WARNING: VDO pool vdo-name is now 80.69% full.
Oct  2 17:28:19 system lvm[13863]: WARNING: VDO pool vdo-name is now 85.25% full.
Oct  2 17:29:39 system lvm[13863]: WARNING: VDO pool vdo-name is now 90.64% full.
Oct  2 17:30:29 system lvm[13863]: WARNING: VDO pool vdo-name is now 96.07% full.
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
这些警告消息只有在 `lvm2-monitor`{.literal}
服务运行时才会出现。它会被默认启用。
:::
::: title
**如何防止没有空间的问题**
:::
如果可用池的大小低于一定级别，可以执行以下操作：
::: itemizedlist
-   删除数据。当删除的数据不再被重复时，可能重新获得可用空间。只有发出了签发后，删除数据才可以释放空间。
-   添加物理存储
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
监控 VDO 卷的物理空间，以防止出现空间不足的情况。物理块不足可能会导致
VDO 卷中最近写入的数据丢失。
:::
::: title
**精简配置以及 TRIM 和 DISCARD 命令**
:::
要从精简配置的存储节约中受益，物理存储层需要知道何时删除数据。使用精简配置存储运行的文件系统会发送
`TRIM`{.literal} 或 `DISCARD`{.literal}
命令，以便在不再需要逻辑块时通知存储系统。
有几种发送 `TRIM 或`{.literal} `DISCARD`{.literal} 命令的方法：
::: itemizedlist
-   通过 `discard`{.literal}
    挂载选项，无论何时删除块，文件系统都可发送这些命令。
-   您可以使用 `fstrim`{.literal}
    等实用程序以受控的方式发送命令。这些实用程序告诉文件系统检测哪些逻辑块未使用，并以
    `TRIM`{.literal} 或 `DISCARD`{.literal}
    命令的形式向存储系统发送信息。
:::
在未使用的块中使用 `TRIM`{.literal} `或 DISCARD`{.literal} 不是 VDO
的唯一需求。任何精简置备的存储系统也会遇到同样的问题。
:::
::: section
::: titlepage
# []{#testing-vdo-space-savings_deduplicating-and-compressing-storage.html#information-to-record-before-each-vdo-test_testing-vdo-space-savings}在每个 VDO 测试前记录的信息 {.title}
:::
您必须在每次测试开始时记录以下信息以确保测试环境被完全理解。您可以使用
`sosreport`{.literal} 工具捕获大部分所需信息。
::: itemizedlist
**所需信息**
-   使用的 Linux 构建，包括内核构建号
-   从 `rpm -qa`{.literal} 命令获取安装的软件包的完整列表
-   完整的系统规格
    ::: itemizedlist