Intuition – security.
It is clear that our shufﬂing process
does not generate a random permutation over the arrays
(cid:2)D2, . . . , (cid:2)DB. However, for cut-and-choose to work, it is seem-
ingly necessary to truly randomly permute the arrays so that
the adversary has the lowest probability possible of obtaining
a bucket with all-bad triples. Despite this, we formally prove
that our method does sufﬁce; we ﬁrst give some intuition.
1
Consider the simplistic case that the adversary generates one
bad triple in each array (cid:2)Dk. Then, for every k, the probability
that after the shufﬂing a bad triple in (cid:2)Dk will be located in
the same index as the bad triple in (cid:2)D1 is
L = 1
N
(after opening C triples, there are N/L in the subarray and L
subarrays; the bad triples will match if they match inside their
subarrays and the their subarrays are also matched). Observe
that this probability is exactly the same as in the naive shufﬂing
process where the entire array of N is shufﬂed in entirety.
N/L · 1
A subtle issue that arises here is the need to open C triples in
each of the sub-arrays (cid:2)Dk,j. As we have mentioned, this means
that the number of triples that need to be opened increases as
L increases. We stress that this is necessary, and it does not
sufﬁce to open C triples only in the entire array. In order to see
why, consider the following adversarial strategy: choose one
subarray in each (cid:2)Dk and make all the triples in the subarray
bad. Then, the adversary wins if no bad triple is opened
(which happens with probability 1 − C
N +C ) and if the B bad
2The protocol is highly efﬁcient when using vectorization techniques, as
described in Section IV. Thus, each item in the array is actual 256 triples and
the data itself is 96 bytes.
848
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply. 
opened). Thus, 512(B − 1) = 1024 triples overall are opened
when generating 220 triples, which is insigniﬁcant.
We start by deﬁning a combinatorial game which is equiv-
alent to the cut-and-bucket protocol using the optimized shuf-
ﬂing process. Recall that C denotes the number of triples that
are opened in each subarray, B denotes the size of the bucket,
L denotes the number of subarrays, and X = N/L+C denotes
the number of triples in each subarray.
Game1(A, X, L, B, C):
1) The adversary A prepares a set D1 of (X − C)L balls and
B − 1 sets D2, . . . , DB of X · L balls, such that each ball
can be either bad or good.
2) Each set Dk is divided into L subsets Dk,1, . . . , Dk,L of
size X. Then, for each subset Dk,j where k ∈ {2, . . . , B}
and j ∈ [L], C balls are randomly chosen to be opened. If
one of the opened balls is bad then output 0. Otherwise,
the game proceeds to the next step.
3) Each subset Dk,j where k ∈ {2, . . . , B} and j ∈ [L]
is randomly permuted. Then, for each set Dk where
k ∈ {2, . . . , B}, the subsets Dk,1, . . . , Dk,L are randomly
permuted inside Dk. Denote by N = L(X − C) the size
of each set after throwing the balls in the previous step.
Then, the balls are divided into N buckets B1, . . . , BN ,
such that Bi contains the ith ball from each set Dk where
k ∈ [B].
4) The output of the game is 1 if and only if there exists i
such that bucket Bi is fully bad, and all other buckets are
either fully bad or fully good.
We begin by deﬁning the bad-ball proﬁle Tk of a set
Dk to be the vector (tk,1, . . . , tk,L) where tk,j denotes the
number of bad balls in the j’th subarray of Dk. We say that
two sets Dk, D(cid:2) have equivalent bad-ball proﬁles is Tk is a
permutation of T(cid:2) (i.e., the vectors are comprised of exactly
the same values, but possibly in a different order). We begin
by proving that the adversary can only win if all sets have
equivalent bad-ball proﬁles.
Lemma 3.2: Let T1, . . . , Tk be the bad-ball proﬁles of
D1, . . . , DL. If Game1(A, X, L, B, C) = 1 then all the bad-
ball proﬁles of T1, . . . , Tk are equivalent.
Proof: This is straightforward from the fact the adversary
wins (and the output of the game is 1) only if for every i ∈ [n]
all the balls in the ith place of D1, . . . , DB are either bad or
good. Formally, assume there exist k, (cid:3) such that Tk and T(cid:2) are
not equivalent. Then, for every permutation of the subsets in
Dk and D(cid:2), there must exist some j such that tk,j (cid:2)= t(cid:2),j after
the permutation. Assume w.l.o.g that tk,j > t(cid:2),j. Then, for
every possible permutation of the balls in Dk,j and D(cid:2),j, there
must be a bad ball in Dk,j that is placed in the same bucket as
a good ball from D(cid:2),j, and the adversary must lose. Thus, if the
adversary wins, then all bad-ball proﬁles must be equivalent.
Next we prove that the best strategy for the adversary is to
choose bad balls so that the same number of bad balls appear in
every subset containing bad balls. Formally, we say that a bad-
ball proﬁle T = (t1, . . . , tL) is single-valued if there exists a
value t such for every i = 1, . . . , (cid:3) it holds that ti ∈ {0, t} (i.e.,
every subset has either zero or t bad balls). By Lemma 3.2 we
know that all bad-ball proﬁles must be equivalent in order for
the adversary to win. From here on, we can therefore assume
1, . . . , t(cid:2)
i = t if ti = t and setting t(cid:2)
that A works in this way and there is a single bad-ball proﬁle
chosen by A. Note that if the adversary chooses no bad balls
then it cannot win. Thus, the bad-ball proﬁle chosen by A
must have at least one non-zero value. The following lemma
states that the adversary’s winning probability is improved by
choosing a single-valued bad-ball proﬁle.
Lemma 3.3: Let T = (t1, . . . , tL) be the bad-ball proﬁle
chosen by A and let t be a non-zero value in T . Let
= (t(cid:2)
T (cid:2)
L) be the bad-ball proﬁle derived from T
by setting t(cid:2)
i = 0 otherwise
(for every i = 1, . . . , L). Then, Pr[Game1(A, X, L, B, C) =
1] ≤ Pr[Game1(AT (cid:2) , X, L, B, C) = 1], where AT (cid:2) chooses
the balls exactly like A except that it uses proﬁle T (cid:2).
Proof: Let T be the bad-ball proﬁle chosen by A and
deﬁne T (cid:2) as in the lemma. Let E1 denote the event that no
bad balls were detected when opening C balls in every subset,
that all subsets containing t bad balls are matched together,
and that all bad balls in these subsets containing t bad balls are
matched in the same buckets. By the deﬁnition of the game,
it follows that Pr[Game1(AT (cid:2) , X, L, B, C) = 1] = Pr[E1].
Next, deﬁne by E2 the probability that in the game with A,
the subsets with a number of bad balls not equal to t are
matched and bucketed together. Then,
We have that
Pr[Game1(A, X, L, B, C) = 1] = Pr[E1 ∧ E2].
Pr[Game1(A, X, L, B, C) = 1]
= Pr[E1 ∧ E2] = Pr[E2 | E1] · Pr[E1]
≤ Pr[E1] = Pr[Game1(AT (cid:2) , X, L, B, C) = 1]
and the lemma holds.
We are now ready to prove that the adversary can win in
the game with probability at most 1/N B−1 (independently of
C, N, as long as C > 0).
Theorem 3.4: For every adversary A, for every L > 0 and
0  0. Thus, we can use the fact that
for every 0  0 and X > 1 (as assumed in the
Pr[Game1(A, X, L, B, C) = 1]
1
(cid:9)B−1 =
−σ in Theorem 3.4, we conclude:
≤ max
(cid:8)
L(X − C)
N B−1 ≤ 2
By setting
Corollary 3.5: If L, X, C and B are chosen such that
σ ≤ (B − 1) log N where L > 0, X > C > 0 and
N = (X − C)L, then for every adversary A, it holds that
Pr[Game1(A, X, L, B, C) = 1] ≤ 2
(L · X)B−1
.
N B−1
(L · X)B−1
−σ.
=
1
1
1
Concrete parameters. Observe that for N = 220, it sufﬁces
to set B = 3 and C = 1 and for any L we have that
−40. This thus
the adversary wins with probability at most 2
achieves the tight analysis provided in [11] when a cache-
inefﬁcient shufﬂe is used. In our implementation, we take
N = 220 and L = 29; thus we have 512 subarrays of size
2048 each. Recall that we actually only shufﬂe the indices;
for a subarray of length 2048 we need indices of size 2 bytes
and so the entire subarray to be shufﬂed is 4096 bytes = 4KB.
This ﬁts into the L1 cache on most processors making the
shufﬂe very fast.
B. Reducing Bucket-Size and Communication
Clearly, the major cost of the protocol is in generating,
shufﬂing and checking the triples. If it were possible to reduce
the size of the buckets needed, this would in turn reduce the
number of triples to be generated and result in a considerable
saving. In particular, the protocol of [11] uses a bucket size
of 3 and requires that each party send 10 bits per AND gate;
this places a strict lower bound on performance dependent
on the available bandwidth. In this section, we show how
to reduce the bucket size by 1 (concretely from 3 to 2) and
thereby reduce the number of triples generated by 1/3, reduc-
ing computation and communication. Formally, we present an
improvement that reduces the cheating probability of the ad-
= B−1.
versary from 1
Thus, if previously we needed to generate approximately 3
million triples in order to compute 1 million AND gates, in
this section we show how the same level of security can be
achieved using only 2 million triples. Overall, this reduces
communication from 10 bits per AND gate to 7 bits per AND