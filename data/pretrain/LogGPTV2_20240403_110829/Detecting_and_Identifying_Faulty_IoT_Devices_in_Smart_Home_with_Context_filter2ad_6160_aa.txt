title:Detecting and Identifying Faulty IoT Devices in Smart Home with Context
Extraction
author:Jiwon Choi and
Hayoung Jeoung and
Jihun Kim and
Youngjoo Ko and
Wonup Jung and
Hanjun Kim and
Jong Kim
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Detecting and Identifying Faulty IoT Devices
in Smart Home with Context Extraction
Jiwon Choi, Hayoung Jeoung, Jihun Kim, Youngjoo Ko, Wonup Jung, Hanjun Kim and Jong Kim
Dept. of Computer Science and Engineering
Pohang University of Science and Technology (POSTECH)
{wldnjs7,danielle,jihun735,y0108009,wonup,hanjun,jkim}@postech.ac.kr
Pohang, Korea
Abstract—A fast and reliable method to detect faulty IoT
devices is indispensable in IoT environments. In this paper, we
present DICE, an automatic method to detect and identify faulty
IoT devices with context extraction. Our system works in two
phases. In a precomputation phase, the system precomputes
sensor correlation and the transition probability between sensor
states known as context. During a real-time phase, the system
ﬁnds a violation of sensor correlation and transition to detect and
identify the faults. In detection, we analyze the sensor data to
ﬁnd any missing or newly reacting IoT devices that are deviating
from already grouped correlated sensors, and state transition to
ﬁnd the presence of an abnormal sequence. Then, the system
identiﬁes the faulty device by comparing the problematic context
with the probable ones. We demonstrate that DICE identiﬁes
faulty devices accurately and promptly through the evaluation
on various fault types and datasets.
Index Terms—Context Extraction, Fault Detection, Identiﬁca-
tion, Internet of Things, Smart Home
I. INTRODUCTION
Internet of Things (IoT) has proliferated signiﬁcantly and
has pervaded various areas of human lives. IoT environments
such as Smart Homes and Smart Cities are becoming in-
creasingly popular and have received growing attention over
the past few years. Using sensors and actuators, these IoT
applications offer convenient services to users. However, IoT
devices are lightweight devices exposed to harsh environments
and have limited computational capabilities, which cause fre-
quent device failure [1]–[3]. Sensors in general suffer from
many types of faults due to hardware failure, limited battery
life, or human mistakes [4], [5]. These sensor faults in IoT
environments are particularly more critical and may lead to
dire consequences because their negative effects do not remain
in the cyber system, but extends to the physical domain. For
example, if a Smart Blind in a Smart Home is drawn up at
night due to a faulty light sensor, the privacy of the user may
be exposed to the neighbors. Thus, preserving the integrity of
the data is an essential requirement in IoT environments.
Recent studies have proposed solutions to detect faulty
sensors in an IoT environment [5]–[9] by using the correlation
either between activities and sensors [5], [6] or between
actuators and sensors [7]. However, such studies are not
suitable for actual IoT environments for the following reasons.
First, existing solutions require user intervention. They require
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00068
610
users to annotate each activity during the training period or
provide additional information such as the sensor location.
User intervention not only makes the system less usable, but
also increases chances of error due to user mistakes [1], [5],
[8]. Second, the experiment settings of the existing solutions
do not represent actual IoT environments, and thus have a
generalization fallacy. Real-world Smart Homes are generally
deployed with various sensors and actuators [10]. Device
faults in real-world often occur in an unpredictable manner.
However, existing solutions only consider a few speciﬁc types
of sensors or faults. Third, existing solutions require too
much computation cost or make unrealistic assumptions. Some
solutions require a considerable number of sensors to operate,
and yet the complexity of the system grows exponentially with
the types of sensors [5]. Last, the time to detect a faulty
sensor is overly long for some of the existing work. When
the detection time takes too much time, the failure may cause
serious problems [11]. For such reasons, all prior art is not
adequate for the IoT environments. A novel IoT device fault
detection method that resolves such problems is necessary.
In this paper, we propose DICE, an automatic faulty device
Detection and Identiﬁcation solution based on the Context
Extraction. Our devised method does not require recognition
of user’s activity, and works for various device and fault
types. Furthermore, our system is faster in detecting and
identifying a faulty device than state of the art. Our system
consists of two phases: a precomputation phase and a real-time
phase. During the precomputation phase, DICE precomputes
the correlations among sensors and estimates sensor states with
correlated sensors. Next, we calculate the transition probability
of the sensor states. During the real-time phase, DICE detects
the presence of device failure by performing a correlation
check that detects correlation violations among sensors and a
transition check that detects transition violations of the sensor
state sequence. Once a sensor fault is detected, DICE identiﬁes
which device has generated the faulty data by comparing the
problematic context with the most probable context.
To evaluate our system, we implemented a Smart Home
testbed that is deployed with various types of sensors and
actuators to represent real-world environments. Furthermore,
we not only tested our system on our own datasets, but
veriﬁed our system with the ﬁve publicly available Smart
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:10 UTC from IEEE Xplore.  Restrictions apply. 
Home datasets. The evaluation results show that our system
successfully detects faults with an average of 94.9% precision
and 92.5% recall from both the internal and public third
party datasets. Thus, adopting our system highly enhances the
reliability of IoT environments.
Our main contributions are summarized as follows:
• Novel design. We propose a novel faulty device detection
and identiﬁcation method that enhances the reliability of
Smart Homes.
• Usability. We devise a context extraction method that
does not require any form of user intervention. Using our
method, a user does not have to annotate the activities
or provide additional information about the deployment.
Our method automatically extracts the context (i.e., corre-
lation and transition probability) from Smart Home data.
• Generality. Our method works for both binary and
numeric values. Note that the more heterogeneous the
sensors are, the more challenging it is to extract the
correlation of sensors because different types of sensors
react differently to the same event. We have used datasets
with varying types of sensors and actuators. Thus, this
demonstrates that our system is easily adoptable to real-
world Smart Homes. We have tested our system on
various fault types that frequently occur in real-world
Smart Homes. Our experimental result conﬁrms that our
method can effectively detect and identify device faults
of different types with high accuracy.
• Feasibility. Our method requires a small computation
time. We eliminated any use of complex algorithms or
techniques to simplify the process.
• Promptness. Our method can detect device faults
promptly. Our method takes an average of 3 minutes to
detect sensor faults. This is much faster than the fastest
reported average detection time of prior art which is 12
hours. For identiﬁcation, our method takes an average
of 28 minutes. In optimal conditions, the time can be
reduced down to 7 minutes.
The rest of the paper is organized as follows. In Section II,
we review the prior art that performs sensor failure detection
and identiﬁcation. Section III presents the detailed architecture
and design of DICE. Section IV shows the datasets we used
and the deployment settings of our Smart Home testbed.
Section V explains the evaluation results of DICE, which is
followed by discussion and conclusion in Section VI and VII,
respectively.
II. RELATED WORK
Sensor failure detection and identiﬁcation have received
considerable attention in the research community. Particularly,
three streams of work have been conducted for automatic
sensor failure detection and identiﬁcation: network-level ap-
proach, homogeneous approach, and heterogeneous approach.
A. Network-level Approach
Network-level solutions have been proposed for sensor
failure detection. [12]–[14] develop a network management
611
system to detect anomaly in the network level by monitoring
packets. [12] devises a distributed sensor node failure detection
method, in which the sensor nodes in the network coopera-
tively monitor each other to detect problematic sensor nodes.
[15] aggregates distributed data at the sink and detects failure
by ﬁnding insufﬁcient ﬂow of incoming data. [16] uses Markov
models to characterize the normal behavior of sensor networks.
It builds a Markov model at each sensor node to estimate
anomaly-free probabilities from its past observation traces and
derives optimal anomaly detection rules for sensor failure
detection. These solutions are effective for ﬁnding sensor
failure in the network level, but the failure corresponds to fail-
stop sensor faults that stop generating values after the failure.
When there are non-fail-stop faults that continues to report
incorrect but technically reasonable values, such network-level
solutions cannot be enforced [4].
B. Homogeneous Approach
that
Homogeneous approach deploys multiple sensors of the
same type to detect and identify a sensor that shows an
anomalous behavior. Most work exploits the fact
the
same type of sensors that are spatially close to each other
generate similar values. In contrast, a faulty sensor will show
an uncorrelated behavior with other closely located sensors.
From this intuition, [17] detects an abnormal sensor if the
value of the sensor shows signiﬁcant deviation from the values
of other nearby sensors. [18], [19] apply the majority rule to
detect and localize faulty sensors in wireless sensor networks.
It locally performs majority voting, where each sensor node
makes a decision based on comparison between its own sensor
reading and sensor readings of one-hop neighbors.
Another body of work analyzes time-series data collected
from multiple sensors to identify the faulty sensor. [20], [21]
use Auto Regressive Integrated Moving Average (ARIMA),
a time-series model that compares the predicted measurement
with the reported measurement. [20] uses a previously reported
value of one sensor to estimate the future reading of another
sensor. [21] compares the sensor measurement against
its
predicted value using the time series forecasting method to
detect a fault.
There are several other solutions besides the majority-rule-
based or time-series-analysis based solutions. [22] proposes
a reputation-based framework, which uses the correlation
between neighboring sensors of the same type to detect non-
fail-stop sensor faults. [23] detects a non-fail-stop failure based
on the assumption that sensor readings reﬂect the distance
from the nodes to the event. [24] applies Dynamic Bayesian
Network (DBN) to analyze and diagnose anomalous wind
velocity data. It builds individual sensor models, on top of
which a coupled DBN model is learned to represent the joint
distribution of two sensors.
Substantial studies take the homogeneous approach to re-
solve sensor failure problems. However, the redundancy of
deploying multiple sensors of the same type spatially close
to each other increases the cost of deployment. Furthermore,
most of the majority voting solutions take threshold-based de-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:10 UTC from IEEE Xplore.  Restrictions apply. 
cisions, but ﬁnding an optimal threshold is difﬁcult. Improper
threshold values decrease the accuracy of the system. Such
limitations of the homogeneous approach restrain them from
being deployed to actual IoT environments.
C. Heterogeneous Approach
Heterogeneous approach combines different types of sensor
data to detect sensor failure. The approach has only become
popular recently with the emergence of IoT environments
that are deployed with various types of sensors. SMART [5]
develops a system that detects sensor failure based on the
classiﬁer outputs. It trains the classiﬁer to recognize the same
set of activities based on different subsets of sensors. At run-
time, its system detects failure by analyzing the relative be-
havior of multiple classiﬁer instances trained. FailureSense [7]
explores the relationship between the electrical appliances and
sensor data to detect a sensor failure at home. First,
the
system learns the regular behavior of a sensor with respect to
electrical appliance activation at home. Then it continuously
monitors the behavior of sensors and alarms users when
sensor reaction shows signiﬁcant deviation from the regular
behavior. IDEA [6] performs activity recognition based on
the sensor data and computes the sensor’s impact for each
activity. It computes the conditional probability of a sensor
not to be triggered with the given activities, and regards the
sensor as failure when the probability is lower than a certain
threshold. CLEAN [8] suggests a clustering-based outlier
detection technique to detect anomalies in event-driven binary
sensors. It uses Least Common Subsumer (LCS) to quantify
the similarity of any two sensor events. Based on the LCS
distance, it clusters sensors and detects outliers in clusters
as failure. 6thSense [9] devises a context-aware intrusion
detection system for smart devices by monitoring changes in
sensor data. It creates a contextual model to distinguish benign
and malicious behaviors of sensors and utilizes three different
machine learning based detection mechanisms (i.e., Markov
Chain, Naive Bayes, and LMT) to detect a malicious behavior
associated with sensors.
While these heterogeneous solutions effectively detect sen-
sor failure without using redundant homogeneous sensors, they
left future work. The followings are requirements a solution
should satisfy:
• Usability. Usability is the condition of which a system
does not require any user intervention in the form of
either requiring labeled training or supplying additional
information. For instance, requiring users to perform
different activities and annotate the start and end time
of each activity during the training period greatly harms
the usability.
• Generality. Generality is the condition of which a system
considers various sensor types and fault types that rep-
resent real-world settings. In real-world settings, Smart
Homes are equipped with not only binary sensors but
also numeric sensors. In fact, the most commonly used
sensors in Smart Homes are infrared sensors, RFID
sensors, motion sensors, accelerometers, cameras and
TABLE I: Analysis of Heterogeneous Approach
Usability
Generality
Feasibility
Promptness
SMART [5]
FailureSense [7]
IDEA [6]
CLEAN [8]
6thSense [9]
DICE




(cid:2)














–

–
–

microphones [10]. A solution should be able to cover both
binary and numeric values. Furthermore, sensor faults
in real-world often occur in an unpredictable manner.
A system that considers only speciﬁc sensor types or
faults is either inapplicable to real-world Smart Homes
or susceptible to real-world faults.
• Feasibility. Feasibility is the condition of which a system
does not require too expensive computation cost or not
make chimerical assumptions that are far from reality.
• Promptness. Promptness is the condition of which a
system detects or identiﬁes a faulty sensor promptly.
When a system takes too much time to identify the
faulty sensor, the fault may cause serious problems due
to propagation of the fault effect.
Table I shows whether the aforementioned heterogeneous
sensor failure detection methods meet
these requirements,
along with our proposed scheme. Most of the methods fail
to meet the usability requirement. SMART [5] and IDEA [6]
which detect sensor failure based on the activity and sensor
correlation require users to annotate each and every activity
during the training period. 6thSense [9] also uses labeled
training because Nave Bayes, one of the suggested method,
requires labeling. It also proposes a Markov Chain-based
method that does not require annotation. Thus, we mark them
as ‘(cid:2)’ in the table. CLEAN [8] eliminates the burden of
annotating activities, but
instead requires users to provide
information about the location and the hierarchy of sensors.
All heterogeneous solutions except 6thSense do not satisfy
the generality requirement since they only consider binary
sensors. Moreover,
they detect sensor failure by lack of
consideration of either sensor types or fault types. IDEA only
detects fail-stop faults, while SMART and CLEAN only detect
non fail-stop faults.
SMART, FailureSense [7], and 6thSense do not satisfy
the feasibility requirement. SMART requires a considerable
number of sensors to operate. However, the complexity of
constructing the classiﬁer proﬁle grows exponentially with
the number of sensors. FailureSense makes an assumption
that a sensor and an event in an appliance must always have
a connection. Thus, the detection accuracy of the sensors
unconnected to an appliance is 0% in its experiment result.
6thSense deﬁnes a set of activities composed of nine daily
activities humans perform while using a smartphone. Thus,
the false positive rate of 6thSense could be high for real-life
situations because it regards any activities that do not belong
612
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:47:10 UTC from IEEE Xplore.  Restrictions apply. 
IoT device (sensor or actuator)
Gateway
Aggregator
Cloud server
Context Extraction
Precomputation 
Phase
Correlation
Extraction
Transition
Extraction
Fig. 1: Typical Smart Home
to the existing nine activities as an error.
Only two among the ﬁve studies investigate the time re-
quired for sensor fault detection and identiﬁcation. We mark
the studies that do not perform any evaluations on the time as
‘–’ in the table. Two studies, SMART and IDEA, perform eval-
uations on time but do not meet the promptness requirement.
They require at least 12 hours for detecting and identifying a
faulty sensor. 6thSense detects the presence of a faulty sensor
but does not identify the sensor that has caused a failure, which
implies a manual inspection of the identiﬁcation of a faulty
sensor. Thus, these schemes that require too much time or
do not identify the faulty sensor are hard to ﬁx or replace the
faulty sensor promptly enough before serious problems occur.
III. DICE: DETECTION & IDENTIFICATION WITH
CONTEXT EXTRACTION
In this section, we present a detailed design and architecture
of DICE, an automatic detection and identiﬁcation method for
faulty IoT devices.
A. Overview
The typical Smart Home we consider (Fig. 1) consists
of diverse IoT devices, a home gateway, and a network