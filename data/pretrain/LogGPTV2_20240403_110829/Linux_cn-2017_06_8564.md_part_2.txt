```
package main
import "fmt"
func main() {  
  fmt.Println(keys(map[string]struct{}{
    "dog": struct{}{},
    "cat": struct{}{},
  }))
}
func keys(m map[string]struct{}) []string {  
  ret := make([]string, len(m))
  i := 0
  for key := range m {
    ret[i] = key
    i++
  }
  return ret
}
```
*[在 Go Playground 中运行](https://play.golang.org/p/kIKxkdX35B)*
这样做很好，因为我们知道我们返回的切片的长度将与 map 的长度相同，因此我们可以用该长度初始化我们的切片，然后将每个元素分配到适当的索引中。这种方法的缺点是我们必须跟踪 `i`，以便了解每个索引要设置的值。
这就让我们引出了第二种方法……
#### 使用 `0` 作为你的长度并指定容量
与其跟踪我们要添加的值的索引，我们可以更新我们的 `make` 调用，并在切片类型之后提供两个参数。第一个，我们的新切片的长度将被设置为 `0`，因为我们还没有添加任何新的元素到切片中。第二个，我们新切片的容量将被设置为 map 参数的长度，因为我们知道我们的切片最终会添加许多字符串。
这会如前面的例子那样仍旧会在背后构建相同的数组，但是现在当我们调用 `append` 时，它会将它们放在切片开始处，因为切片的长度是 0。
```
package main
import "fmt"
func main() {  
  fmt.Println(keys(map[string]struct{}{
    "dog": struct{}{},
    "cat": struct{}{},
  }))
}
func keys(m map[string]struct{}) []string {  
  ret := make([]string, 0, len(m))
  for key := range m {
    ret = append(ret, key)
  }
  return ret
}
```
*[在 Go Playground 中运行](https://play.golang.org/p/h5hVAHmqJm)*
### 如果 `append` 处理它，为什么我们还要担心容量呢？
接下来你可能会问：“如果 `append` 函数可以为我增加切片的容量，那我们为什么要告诉程序容量呢？”
事实是，在大多数情况下，你不必担心这太多。如果它使你的代码变得更复杂，只需用 `var vals []int` 初始化你的切片，然后让 `append` 函数处理接下来的事。
但这种情况是不同的。它并不是声明容量困难的例子，实际上这很容易确定我们的切片的最后容量，因为我们知道它将直接映射到提供的 map 中。因此，当我们初始化它时，我们可以声明切片的容量，并免于让我们的程序执行不必要的内存分配。
如果要查看额外的内存分配情况，请在 Go Playground 上运行以下代码。每次增加容量，程序都需要做一次内存分配。
```
package main
import "fmt"
func main() {  
  fmt.Println(keys(map[string]struct{}{
    "dog":       struct{}{},
    "cat":       struct{}{},
    "mouse":     struct{}{},
    "wolf":      struct{}{},
    "alligator": struct{}{},
  }))
}
func keys(m map[string]struct{}) []string {  
  var ret []string
  fmt.Println(cap(ret))
  for key := range m {
    ret = append(ret, key)
    fmt.Println(cap(ret))
  }
  return ret
}
```
*[在 Go Playground 中运行](https://play.golang.org/p/fDbAxtAjLF)*
现在将此与相同的代码进行比较，但具有预定义的容量。
```
package main
import "fmt"
func main() {  
  fmt.Println(keys(map[string]struct{}{
    "dog":       struct{}{},
    "cat":       struct{}{},
    "mouse":     struct{}{},
    "wolf":      struct{}{},
    "alligator": struct{}{},
  }))
}
func keys(m map[string]struct{}) []string {  
  ret := make([]string, 0, len(m))
  fmt.Println(cap(ret))
  for key := range m {
    ret = append(ret, key)
    fmt.Println(cap(ret))
  }
  return ret
}
```
*[在 Go Playground 中运行](https://play.golang.org/p/nwT8X9-7eQ)*
在第一个代码示例中，我们的容量从 `0` 开始，然后增加到 `1`、 `2`、 `4`, 最后是 `8`，这意味着我们不得不分配 5 次数组，最后一个容纳我们切片的数组的容量是 `8`，这比我们最终需要的要大。
另一方面，我们的第二个例子开始和结束都是相同的容量（`5`），它只需要在 `keys()` 函数的开头分配一次。我们还避免了浪费任何额外的内存，并返回一个能放下这个数组的完美大小的切片。
### 不要过分优化
如前所述，我通常不鼓励任何人做这样的小优化，但如果最后大小的效果真的很明显，那么我强烈建议你尝试为切片设置适当的容量或长度。
这不仅有助于提高程序的性能，还可以通过明确说明输入的大小和输出的大小之间的关系来帮助澄清你的代码。
### 总结
> 
> 你好！我写了很多关于Go、Web 开发和其他我觉得有趣的话题。
> 
> 
> 如果你想跟上最新的文章，请[注册我的邮件列表](https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/?utm_source=golangweekly&utm_medium=email#mailing-list-form)。我会给你发送我新书的样例、Go 的 Web 开发、以及每当有新文章（通常每周 1-2 次）会给你发送邮件。
> 
> 
> 哦，我保证不会发垃圾邮件。我像你一样讨厌它 :)
> 
> 
> 
本文并不是对切片或数组之间差异的详细讨论，而是简要介绍了容量和长度如何影响切片，以及它们在方案中的用途。
为了进一步阅读，我强烈推荐 Go 博客中的以下文章：
* [Go Slices：使用及内部](https://blog.golang.org/go-slices-usage-and-internals)
* [数组、切片（和字符串）：“append” 的机制](https://blog.golang.org/slices)
* [切片技巧](https://github.com/golang/go/wiki/SliceTricks)
---
作者简介：
Jon 是一名软件顾问，也是 《Web Development with Go》 一书的作者。在此之前，他创立了 EasyPost，一家 Y Combinator 支持的创业公司，并在 Google 工作。
---
via: 
作者：[Jon Calhoun](https://www.calhoun.io/hire-me) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出