These include Hugged, iSmile, and My Angels that allow friends
to exchange virtual hugs, smiles, or angels, respectively; as well
as Holiday Cheers (users can send virtual seasonal greetings to
friends), Pound Puppies (lets users adopt virtual pets), and The
Streets (similar to Fighters’ Club [10], where users pick ﬁghts with
other users).
Table 1 reports the average number of daily active users (DAU),
monthly active users (MAU), and the rank of the six applications
among Facebook third-party applications [11]. All six applica-
tions are in the top 5% of Facebook applications (ranked by DAU),
with Hugged, iSmile, and Holiday Cheers placed in the top 100
(out of over 57,000 applications). Hugged is both the most popu-
lar and the longest deployed, followed by iSmile. Holiday Cheers
was launched half a month before Thanksgiving, and was tailored
speciﬁcally towards the upcoming holiday season to achieve ‘viral’
growth. It attracted more than 1.4 million users in less than two
months. The Streets and Pound Puppies grew much slower as can
be seen by their metrics.
To gauge the extent our applications are representative of other
widely used third-party applications, we installed and manually ex-
plored workﬂows involved in interaction with the 200 most used
Facebook applications over a period of two weeks from Jan 10 to
Jan 24, 2009. Our ﬁndings regarding how our six applications com-
pare to the 200 most used Facebook applications along several di-
mensions are:
5All were developed using Ruby on Rails.
Application semantics: The decision to limit an application’s users’
interactions to their friends or non-friends impacts its virality as
well as user engagement. We refer to the type of interactions al-
lowed on an application as its semantics. In this regard, Hugged,
iSmile, My Angels, and Holiday Cheers are similar to 61% of the
top 200 applications in that they only allow users to interact with
their Facebook friends, while The Streets and Pound Puppies (like
the remaining 39%) do not impose such a restriction.
Delay requirements: Lower delays in rendering responses are cru-
cial to enhanced user experience on social (web) applications. How-
ever, lower delays might mean higher required processing power
for popular applications. We ﬁnd that a majority (70%) of the top
200 applications utilize the Facebook canvas design (as do these
six). The canvas design requires application responses to be ren-
dered by the Facebook server, and mandates that application servers
respond to a forwarded request within 8 seconds. The rest of the
applications are delay insensitive.
Engagement ratio: The last column of Table 1 (ratio of DAU
to MAU) shows the engagement ratio—an indicator of how many
users are returning users. The engagement ratio represents an ap-
plication’s overall ‘demand’ by its users. A higher value implies
more application visits per user. This ratio is high for The Streets
and Pound Puppies as these are point-based games that require mul-
tiple visits for users to increase their scores. By clustering the top
200 applications according to their engagement ratio, we found that
Hugged, Holiday Cheers, and iSmile are similar to 31.6%, The
Streets and Pound Puppies are similar to 19.2%, and My Angels is
similar to 13.5%, of all applications.
Hence, our six applications represent a diverse mix that is fairly
representative of top Facebook applications.
4.2 Passive Measurements
The application servers receive user requests forwarded by the
OSN and generate corresponding responses, thereby providing good
vantage points for passive measurements.
In our case, there are
three categories of requests that are forwarded by the Facebook
server: (1) Page View requests (PV)—regular requests from clients
that have installed the application, (2) Not Installed requests (NI)—
requests from clients that have not yet installed the application
(these are redirected to an installation page for the application), and
(3) Inline requests (IR)—AJAX-based queries for rendering con-
tent within the HTML pages.
We have access to both network and application-layer traces gath-
ered at the application server. Results presented here are based on
traces for the period from Nov 18, 2008 to Jan 05, 2009 for Hugged,
Holiday Cheers, and The Streets. The network layer traces log all
request and response packets using tcpdump. The payload informa-
tion contains ﬁelds specifying the ID of the request, the ID of the
client from which the request originated, and the type (PV/NI/IR)
of the request. The tcpdump logs have a time stamp (𝑡4 in Fig-
ure 2) for each request that records when a request is completely
received at the network layer. Less than 2.2% of all requests in our
network layer traces for Hugged, Holiday Cheers, and The Streets,
are IR requests. The fraction of NI requests depends upon how fast
an application grows. NI requests form 7.9% of all Hugged re-
quests, and 28.1% of the rapidly growing Holiday Cheers requests.
An NI request is re-directed to a Facebook application installation
page, and does not involve database access or signiﬁcant process-
ing at application servers. Thus, in order to minimize processing
overhead, the application servers record information only for PV
requests, which constitute most of the workload. The application
layer traces record time stamps when the server starts to process a
user request, and when the response is written to the TCP socket.
66Application
Launch Date Avg. DAU Avg. MAU Rank DAU/MAU
Hugged
iSmile
Holiday Cheers
My Angels
Pound Puppies
The Streets
Feb 2008
Aug 2008
Nov 2008
Aug 2008
Jun 2008
Nov 2008
131,292
120,361
75,283
14,016
1,545
1,232
2.3M
2.4M
1.1M
370K
14K
12.5K
50
65
97
339
1,368
1,520
0.057
0.05
0.068
0.038
0.11
0.099
Table 1: Application Usage Statistics. The average DAU and MAU statistics were calculated from Dec 20 to Jan 24. Application
ranks show how popular the six applications are among 81,000+ Facebook third-party applications.
Application layer Requests (PV only)
Network layer Requests (PV only)
Network layer Requests (all) 
 24000
 20000
 16000
 12000
 8000
 4000
r
u
o
h
r
e
p
s
t
s
e
u
q
e
R
f
o
#
 0
Sat 11/22
00:00
Sun 11/23
00:00
Mon 11/24
00:00
Tue 11/25
00:00
Wed 11/26
00:00
Thu 11/27
00:00
Fri 11/28
00:00
Sat 11/29
00:00
Time
Figure 3: Total and PV requests (per hour) for Hugged.
Network- and application-layer logs conform.
These serve as estimates of 𝑡5 and 𝑡6 in Figure 2, respectively.
For validation, we analyze the request arrival patterns observed
at both network and application layers. Figure 3 shows the total
number of requests seen at the network layer, and the number of PV
request arrivals at both network and application layers, for Hugged.
More than 89% of the total request arrivals are of type PV. Ideally,
the number of PV requests seen at both layers should be identi-
cal. However, we see slight discrepancy due to (1) tcpdump failing
to log a fraction (around 8.3%)6 of arriving requests during high
load periods (conﬁrmed by PV requests seen at application-layer
but not in tcpdump logs), and (2) a fraction of requests (around
2.6%) are dropped before being processed by the application layer,
which also coincides with high load periods. We, therefore, focus
on the application-layer PV request arrivals, which give a more ac-
curate representation of the application server workload.
In addition to the PV requests initiated by clients, the application
server can make certain API calls to the OSN server (see Figure 1,
3b*). Even though these API calls are not tightly synchronized with
client requests, they do impact the overall user-OSN experience.
An example of such an API call is a request to update a client’s
newsfeed based upon recent activity. Our application-layer traces
log the total duration between making an API call and receiving a
response, the sizes of the API call request, and the call response.
4.3 Active Tracing using PlanetLab
In order to collect data from multiple vantage points, we conduct
a large number of experiments using PlanetLab (PL) nodes spread
across the globe. We use these nodes to send active probes (in the
form of synthetic requests), via the OSN, to various application
servers. We model various characteristics of user PV requests to
6This is due to tcpdump’s sampling of logged packets, and does not
indicate dropped packets.
understand how they affect OSN request forwarding and response
processing delays.
To diversify user locations in our experiments, we selected two
PL nodes across 32 different countries, each in a different insti-
tution when possible. We launched a set of experiments on every
node, twice a day (10AM and 10PM), from Dec 27, 2008 to Jan 27,
2009. We used 3 different Facebook user accounts, User X, User Y,
and User Z, having 39, 4, and 208 Facebook friends, respectively.
Based on sampled friend-list sizes of users accessing our six ap-
plications, we estimate that the average number of friends per user
on Facebook is around 35, with a standard deviation of 65. Hence,
User X represents the average Facebook user, while users 𝑌 and 𝑍
represent users with very low and signiﬁcantly above average num-
ber of friends, respectively. From these accounts, we accessed all
the six Facebook applications described in Section 4.1.
We launched our experiments with the intention to answer ques-
tions listed in Section 1. For each of these concerns, we conducted
a set of experiments (coded in Java), which can be described on a
high level as follows:
1: A client sends an HTTP GET request to the OSN for a given
application, with a parameter specifying an experiment ID. The
client logs the time stamp of request departure (𝑇𝑑𝑒𝑝) from the PL
node and request size (𝑆𝑐𝑙𝑖𝑒𝑛𝑡−𝑟𝑒𝑞).
2: The given application’s server receives the user request (for-
warded by the OSN) and logs the arrival time stamp.
3: The application server responds with content speciﬁc to the
experiment ID, along with the response size (𝑆𝑎𝑝𝑝−𝑟𝑒𝑠𝑝), the re-
quest arrival, and departure time stamps.
4: The client receives the response (forwarded by the OSN), and
notes the time stamp of request arrival (𝑇𝑎𝑟𝑟) at the PL node, as
well as the response size (𝑆𝑜𝑠𝑛−𝑟𝑒𝑠𝑝).
A client is one of the PL nodes logged into the OSN as one of
our users, and the application is one of our six applications. As
shown in Figure 2, any interaction between a user and a third-party
application is subject to a certain OSN Request Forwarding Delay
(𝑑𝑓 ) and a Response Processing Delay (𝑑𝑔). We expected these
delays to vary with 𝑆𝑐𝑙𝑖𝑒𝑛𝑡−𝑟𝑒𝑞, 𝑆𝑎𝑝𝑝−𝑟𝑒𝑠𝑝, and response content.
Our goal was to quantify these delays for the different experiments.
To measure the effect of 𝑑𝑓 , we vary 𝑆𝑐𝑙𝑖𝑒𝑛𝑡−𝑟𝑒𝑞 from 0 Kb
to 50 Kb in our experiments. We achieve this by appending ran-
dom characters into a single junk parameter with the HTTP GET
request. The application response to this experiment is simply a
blank page (i.e., 𝑆𝑎𝑝𝑝−𝑟𝑒𝑠𝑝 = 0 Kb7).
Our experiments for measuring 𝑑𝑔 keep 𝑆𝑐𝑙𝑖𝑒𝑛𝑡−𝑟𝑒𝑞 = 0 Kb
(i.e., excluding the experiment’s ID, which is appended to the re-
quested URL), while 𝑆𝑎𝑝𝑝−𝑟𝑒𝑠𝑝 and the application response con-
tent vary. The response content and size will determine 𝑑𝑔. The
response content for different experiments may be:
7Excluding the value for 𝑅𝑎𝑝𝑝−𝑟𝑒𝑠𝑝, which is reported back to the
client for calculation of 𝑑𝑓 and 𝑑𝑔.
67∙ Non-User-Related: The response content either has random
HTML content or Javascript. Content may also be OSN-speciﬁc
tags or placeholders that target non-user OSN entities, such as Face-
book networks. For example, a Facebook network tag targeting a
certain network ID, is replaced with the target ID’s Facebook net-
work name during Response Processing at the OSN.
∙ User-Related: The response content will contain different types
of OSN-speciﬁc tags targeting OSN users. For our experiments,
these tags may be of the following types: (1) FBML name tags that
fetch target users’ real names, (2) FBML proﬁle picture tags that
fetch target users’ proﬁle picture URLs, (3) FBML user status tags
that display target users’ Facebook status messages.
We diversify the User-Related content experiments by targeting
users with differing characteristics, such as different number of
OSN friends (popularity), network memberships, and geographi-
cal locations. Furthermore, since many large Web sites cache re-
sponses, our experiments randomly select target OSN entities from
pools of thousands of IDs, gathered at the application servers. We
also repeat our experiments (with exactly the same application re-
sponses) to gauge the effect of caching more accurately.
Since PL nodes run on virtual machines, updating of hardware
clocks for synchronization with NTP was not possible. This meant
𝑑𝑓 and 𝑑𝑔 could not be decoupled cleanly through one-way com-
munication delays; we had to rely on round-trip delays. Calculating
𝑑𝑓 and 𝑑𝑔 requires elimination of the various network (propagation
and transmission) delays associated with each user-to-third-party-
application interaction. Propagation delays between two hosts are
measured using ping8. Transmission delays are estimated using
the CapProbe utility [13] that approximates bandwidth by employ-
ing ping to send/receive speciﬁc-sized packets (1,000 packets of
1,450 bytes each) to/from the target host. Note that CPU load on
PL nodes vary considerably, impairing CapProbe’s accuracy. How-
ever, we veriﬁed CapProbe’s results to be within 5-10kbps of actual
average data transfer rates observed on the nodes. We use these ap-
proximations to calculate 𝑑𝑓 and 𝑑𝑔. Note, also, that PL nodes are
not representative of all OSN clients, since end-users may have a
variety of connection speeds and a richer diversity of geographic
locations than PL nodes. However, PL nodes provide the best esti-
mate available to us at this time.
The following two sections report our results and ﬁndings from
measurements at the application servers (Section 5) and PL nodes
(Section 6).
5. OBSERVATIONS AND INFERENCES AT
APPLICATION SERVERS
As outlined in Section 3, the client-OSN interaction process faces
two types of delays at third-party application servers: request queu-
ing delay (𝑑𝑞) and request processing delay (𝑑𝑝). Hence, we ex-
pect resource provisioning at application servers to have an impact
on the overall experience of an OSN user. From the application
developer’s perspective, one important question is: Are exorbi-
tantly high resources needed to ensure satisfactory user experi-
ence (e.g., low latency) in case of popular and viral applications?
To answer this question, we need to understand the workload
characteristics (such as request arrival patterns and response sizes),
as seen by the application servers, and how they impact 𝑑𝑞 and 𝑑𝑝.
Furthermore, we need to analyze the delays involved when applica-
tion servers interact with OSN servers through API calls (described
in Section 4.2).
In this section, we summarize the key observa-
tions and the corresponding analysis of our data. We present results
8Most countries only have two PL nodes. This limits our ability to
estimate propagation delays for different geographical locations.
Hugged
 22000
 20000
 18000
 16000
 14000
 12000
 10000
 8000
 6000
 4000
 2000
Sat 11/15
00:00
Sat 11/22
00:00
Sat 11/29
00:00
Sat 12/06
00:00
Sat 12/13
00:00
Time
Sat 12/20
00:00
Sat 12/27
00:00
Sat 01/03
00:00
Sat 01/10
00:00
Holiday Cheers
 16000
 14000
 12000
 10000
 8000
 6000
 4000
 2000
 0
Sat 11/15
00:00
Sat 11/22
00:00
Sat 11/29
00:00
Sat 12/06
00:00
Sat 12/13
00:00
Time
Sat 12/20
00:00
Sat 12/27
00:00
Sat 01/03
00:00
Sat 01/10
00:00
The Streets
 800
 700
 600
 500
 400
 300
 200
 100
r
u