of this system in Meteor and used Verena to secure its most
relevant functions.
We speciﬁed three types of trust contexts as discussed in
§IV-B. In our measurements, we create 1000 patients per group,
totaling 4000 patients. We evaluated the average latency (over
1000 iterations) of some representative example views that are
displayed by the application to the physicians (summarized
in table V). For these particular views the integrity policy
can be captured with 4 IQPs, three of which were discussed
(simpliﬁed) in §IV-C and §IV-E. We describe these views
below.
Patient List. This view shows a list of patients across all
groups, limited to 20 patients per page. This is one of the
most complex views. The application has to ﬁrst perform a
query on the “admins” trust context in order to retrieve all the
patient groups and corresponding trust contexts. Then, for each
group it needs to perform a range query over that particular
trust context to fetch the patients of each group, and then
merge the results together. In other words, 5 read operations
are required, assuming 4 patient groups. The overall latency
for loading this view is 66ms (±7ms), the individual read
operation latency being 13ms (±2ms). In other words the total
latency for loading the page is approximately the sum of the
individual read operations. We note that, through the use of a
completeness chain (as described in §IV-E), the developer can
express the view using a single read query, and then Verena
automatically takes care of performing all ﬁve needed queries.
Patients for Review. This view displays all the patients that
are ﬂagged for review. This view performs similar operations
with the previous one. Assuming there are 50 patients from
each group that are ﬂagged for review, the overall latency for
loading this view is 82ms (±7ms).
Patient Proﬁle. This view displays the basic proﬁle information
of a single patient. This view requires a single read operation
to fetch the particular proﬁle. The overall latency for view is
14ms (±2ms).
EKG. This view displays a 30sec EKG recording of a particular
holter episode. The recording contains double precision values
of the measured heart electrical activity, sampled at 200 Hz,
thus having a size of approximately 50 KB. This view requires
a single read operation and the overall latency is 23ms (±4ms).
Average Heart Rate. This view displays the average heart
rate of a patient as measured by his monitoring device, over a
period of a few months. This view requires a read aggregation
operation on the average over a set of samples. The latency
for loading this view is 13ms (±3ms).
We summarize the end-to-end latency of the above views
in table V. We can see that Verena gives acceptable latencies
even for the most complex views that are implemented in this
web application. We argue that Verena can be used to protect
the integrity of an application such as this medical application,
without disrupting the experience of its users.
Fig. 6: Throughput evaluation on the main server when running
with Verena enabled, as well as without Verena.
Operation type Requests/second Std.Dev.
673
GET
92
PUT
Mixed
548
8420
2100
5890
TABLE IV: Hash server throughput.
reads for 1 write) the average throughput becomes 187 (±10)
requests/second.
Fig. 6 displays the above throughput measurements and
contrasts them with the throughput of the same server, but
without Verena. As expected, the throughput is higher in all
cases when Verena is not activated. We note that performing
operations to different ADS trees can be run in parallel and
independent of each other, which can increase the overall
throughput when using additional server machines.
Hash Server. We also measured the throughput of the hash
server, and the results are displayed in table IV. When the
hash server receives only GET requests, the average throughput
is 8420 (±673) requests/seconds. When it receives only PUT
requests the average throughput is 2100 (±92) requests/second.
This result is as expected because PUT requests perform an
additional signature veriﬁcation. When the hash server receives
a mix of requests (4 GET requests for 1 PUT) the average
throughput is 5890 (±548) requests/second.
It is important to note the signiﬁcant difference in perfor-
mance between the main server and the hash server. The hash
server, which provides a very simple functionality, compared
to the main sever, achieves an order of magnitude higher
throughput than the main server.
C. Evaluation on the Example Medical Application
As introduced in §IV-A, our running example is a remote
patient monitoring system, that is used to connect cardiac im-
plant (e.g., pacemaker) patients with their clinics and physicians.
After receiving access to the provider (clinic/physician) web
interface of a remote monitoring system and after discussions
with a cardiologist, we implemented an example application
908908
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
Application view Load time (ms) Std.Dev.
7
Patient list
7
Patient for review
2
Patient proﬁle
Episode EKG
4
3
Avg. heart rate
66
82
14
23
13
TABLE V: Latency for loading views in our example medical
application whose data integrity is protected by Verena.
D. More Applications
To further evaluate the expressivity of Verena’s integrity
API, we considered two other applications: a chat and a class
application. Both of these applications are written in Meteor,
existed before Verena, were written by other developers, and
have a multi-user setting that beneﬁts from Verena’s integrity
guarantees.
We investigated whether Verena’s API can express the write
access control policy of these applications and how many IQPs
need to be declared for this purpose. As we elaborate below,
we found that Verena can express these applications’ policy.
In a few cases, we found that Verena provides a time-bounded
freshness property as opposed to strict freshness. This happened
for queries ran via Meteor’s publish-subscribe mechanism. As
discussed in §X, these rely on the server to notify the client of
changes to a query result. Since the server cannot be trusted,
clients must instead poll and run this query periodically. Thus,
a freshness violation is conﬁned to the period’s duration.
Chat Application. In kChat, users can create rooms, the creator
of a room can invite users to the chat room, and users within
the room exchange messages. Each user is allowed to write
only in a chat room to which he was invited. In terms of
queries, users fetch all messages in a room, perform range
queries to select the latest messages, count the messages in
the room, fetch the list of people who are online, and so forth.
We found that Verena’s IQPs can capture the write-access
policy of this application. This means that Verena brings
freshness, completeness and correctness for kChat.
Interestingly, there are multiple natural integrity policies
for this application providing different integrity guarantees. A
common query in this application is fetching all the messages in
a room. If the developer trusts the users in the room and wants
to protect against users outside of the room, the developer can
specify the trust context to be all users in this room. In this case,
Verena won’t prevent a user in this room who colludes with
the server from changing the messages of another user in the
same room. The resulting integrity policy is short and consists
of 3 IQPs. If the developer wants stricter integrity, namely,
to prevent a user in the room from changing the message of
another user in the same room, the developer declares two IQPs
for this query: the ﬁrst IQP is for fetching the trust context
names of users in the room. The trust context for this IQP is
owned by the creator of each room. The second IQP is for
fetching the messages of a user in the room with a trust context
of that user. The second IQP has should be chained to the ﬁrst,
so that the Verena’s completeness chain mechanism can be
employed, when performing a read query to fetch messages of
a particular room. In this case, the kChat integrity policy can
be captured with 4 IQPs.
Homework Submission Application. We also examined a
web application used at MIT for managing student assignments,
homework and grades for a computer science class. Students
are allowed to submit their homework, as well as review and
grade the homework of other students. The staff (i.e., the
professor who teaches the course and the course assistants) are
responsible for managing the student accounts, the homework
assignments, the allocation of peer reviews for submitted
homework of each student, as well as the ﬁnal feedback and
grade for each submitted homework. Verena can capture the
integrity policy of this app with a total of 7 IQPs.
E. Storage and Memory Overhead
Main Server. We evaluated the overhead imposed by Verena
in terms of storage and memory and found it to be modest.
The memory footprint of adding Verena to the remote patient
monitoring application (§XI-C), is roughly 1.2× that of running
the application without Verena. This overhead is mostly due
to the memory required by the ADS storage service, as well
as additional data structures that are maintained by the server
for implementing the functionality of Verena.
Regarding the storage overhead, the main contributing factor
is the storage of the ADSes. The space required to store an
ADS (red-black Merkle binary tree, in our implementation)
depends on the cardinality of its nodes, which depends linearly
on the number of records that are protected by the ADS. An
ADS that contains 104 records needs ~1.64 MB (~1.95 MB
if the ADS also computes one aggregate value on the record).
The relative overhead in this case depends on the size of the
records under protection. Assuming an average record size of
0.5 KB, like the user messages in a chat application (§XI-D),
the overhead of storing the ADS that protects their integrity
is approximately 1.4× the storage required for simply storing
the messages themselves. For protecting larger records, as in
the medical application for example, the storage overhead of
protecting the 30sec EKG recordings (each recording amounts
to 50 KB of data, as described in §XI-C) is only ~1.003×
the storage needed for storing just the EKGs. Finally, Verena
requires approximately 1 KB per user for storing his wrapped
private key, public key, and IDP certiﬁcate.
Hash Server. The hash server storage requirements are minimal
compared to the rest of the system. The hash server stores only
one entry for each trust context and ADS that exists in the
system. Our hash server prototype stores the users’ ECDSA
public keys and the SHA-256 digests of the ADS roots as
hexadecimal strings, and each entry needs less than 200 bytes
of storage. This can be further reduced by using base64 or
binary encoding for storing keys and digests, and by reducing
the redundant storage of copies of public keys that may be
stored in multiple entries. As an example, for the medical
application (which we described and evaluated in terms of
performance in §XI-C), which contains thousands of users,
909909
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
trust contexts and ADSes, the storage requirements are less
than 5 MB.
XII. RELATED WORK
Verena is the ﬁrst web framework that provides integrity and
freshness of the data and query results contained in a webpage,
in the presence of a fully compromised web server.
A. Systems Providing Integrity
File Systems and File Storage. A few ﬁle systems, such
as SUNDR [32], Sirius [21], Plutus [25], SAFIUS [45],
Tresorium [27], CloudProof [39], Athos [22], and Caelus [26]
aim to provide integrity in the face of a corrupted server.
However, these are constructed for the simpler setting of a
ﬁle server, so they do not verify query computation results
(range queries or aggregations, as well as completeness and
freshness for these computations), and do not consider the web
setting which is stateless. Some of these systems (e.g., SUNDR)
make no trust assumption on the server, but as a result, they
either support only one client or do not provide freshness (e.g.,
SUNDR provides fork consistency which allows a server to
present different views to different users). Caelus [26] provides
time-bounded freshness by assuming a trusted always-online
attestor per client.
Trusted Hardware. Trusted hardware systems such as
Haven [12] promise conﬁdentiality and integrity against a
compromised server. Unlike Verena, Haven relies on trusted
hardware, and places the entire application code in the trusted
code base. The only server assumption in Verena is that the
hash and main servers are do not collude. Moreover, in Verena,
the server application code is not in the trusted code base:
in fact, if the application is buggy or exploitable, and thus
corrupts integrity protected query results, clients will be able
detect it.
B. Work Related to Verena’s Building Blocks
In recent years, there has been much progress in tools for
generic veriﬁable computation [14, 38, 46]. Nevertheless, for
the web setting considered here, such tools remain impractical.
Instead, work on authenticated data structures (ADS) [20, 23,
30, 31, 33, 37, 49] provides better performance and Verena
uses these as building blocks. This line of work targets a more
speciﬁc class of computation, such as aggregations on range
queries, thus being more efﬁcient. As discussed in §I, these
tools alone are not sufﬁcient for addressing all the challenges
of providing integrity protection for web applications.
Verena’s hash server is related to the trinket component
of TrInc [29]. The trinket is a piece of trusted hardware that
stores and increments a counter; it can sign the counter along
with a supplied string (e.g., a hash), and ensures that each
counter is signed only once. TrInc can be used to provide
freshness in SUNDR. Our hash server additionally stores the
hash, public key and the fixedPK ﬂag. These extra values
enable useful properties in Verena, while the hash server still
has high performance and small code base (§XI). Providing
freshness in SUNDR+TrInc requires clients to download and
verify a chunk of the history of changes to an item and to treat
each “get” operation as a “put”, which results in signiﬁcantly
lower performance.
C. Complementary Systems
A few systems can be used in complement to Verena, to
provide a wider range of security guarantees.
Language Approaches/Information Flow Control. A few
systems aim to help a developer not make programing mistakes
that can lead to integrity or conﬁdentiality violations. Using
information ﬂow control and/or language-based techniques,
systems such as SIF [19], [42], Urﬂow [18], and Resin [48]
ensure that an application obeys a security policy. However,
if an attacker takes control of the server in these systems, the
attacker can run any code of his/her desire, bypassing these
tools completely, and violating integrity. In contrast, Verena
protects against this situation. Nevertheless, these tools can be
used in conjunction with Verena to ensure that a developer
does not inadvertently leak data, as well as prevent against
various client-side attacks.
Conﬁdentiality. Mylar
[41], CryptDB [40], and Shad-
owCrypt [24] aim to provide conﬁdentiality against a corrupted
web server, but do not address most integrity properties, such