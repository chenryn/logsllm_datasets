//解法一，
单链表
func partition(head *ListNode, x int) *ListNode {
beforeHead := &ListNode{val: 0, Next: ni1}
before := beforeHead
afterHead := &ListNode{val: 0, Next: ni1}
after := afterHead
for head != nil {
if head.val= x && compareNode.Prev.val =0&&j >=0；k--{
if numsl[i]> nums2[j] {
nums1[k] =nums1[i]
i --
}else{
nums1[k] = nums2[j]
j--
for ; j >= 0; k--{
nums1[k] = nums2[j]
j--
---
## Page 202
89.Gray_Code
题目
The gray codle is a binary numeral system where two successive values difer in only one bit.
Given a non-negative integer n representing the total number of bits in the code, print the
o ym ugag ssnw auanbas apo e  apo Aee jo auanbas
Example 1:
Input: 2
Output : [0, 1,3,2]
Exp1anation:
00 - 0
01 - 1
11 - 3
10 - 2
For a given n, a gray code sequence may not be uniquely defined.
For example, [0,2,3,1] is also a valid gray code sequence.
00 - 0
10 - 2
11 - 3
01 - 1
Example 2:
Input: 0
output: [0]
Explanation: we define the gray code sequence to begin with 0.
A gray code sequence of n has size = 2n, which for n = 0 the size
is 20 = 1.
Therefore, for n = 0 the gray code sequence is [o].
题目大意
格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。给定一个代表编
码总位数的非负整数n，打印其格雷编码序列。格雷编码序列必须以0开头。
解题思路
·输出n位格雷码
·格雷码生成规则：以二进制为0值的格雷码为第零项，第一次改变最右边的位元，第二次改变右起
第一个为1的位元的左边位元，第三、四次方法同第一、二次，如此反复，即可排列出n个位元的
---
## Page 203
格雷码。
·可以直接模拟，也可以用递归求解。
代码
package leetcode
//解法一
递归方法，时间复杂度和空间复杂度都较优
func grayCode(n int) []int {
if n == 0 {
return []int{0}
res = []int{}
num := make([]int,n)
generateGrayCode(int(l= 0; index--{
if (*num)[index]== 1 {
break
if index
0
(*num) [1en(*num) -1]= f1ipGrayCode((*num) [1en(*num) -1])
}else{
(*num) [index-1] = flipGrayCode((*num) [index-1])
generateGrayCode(n-1, step+l, num, res)
return
func convertBinary(num []int) int {
res, rad := 0, 1
for i := 1en(num)
1;i >= 0; i--f
res += num[i] α rad
rad *= 2
---
## Page 204
return res
func flipGrayCode(num int) int{
if num == 0 {
return 1
return 0
//解法二直译
func grayCodel(n int)[]int{
var 1 uint = 1> 1) A i)
return out
90.Subsetsll
题目
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the
power set).
Note: The solution set must not contain duplicate subsets.
Example:
Input: [1,2,2]
Output:
[2],
[1],
[1,2,2] ,
[2,2],
[1,2],
[]
题目大意
给定一个可能包含重复元素的整数数组nums，返回该数组所有可能的子集（幂集）。说明：解集不能
包含重复的子集。
---
## Page 205
解题思路
这一题是第78题的加强版，比第78题多了一个条件，数组中的数字会出现重复。
·解题方法依旧是DFS，需要在回溯的过程中加上一些判断。
·这一题和第78题，第491题类似，可以一起解答和复习。
代码
package leetcode
import(
,4.
"sort"
func subsetswithDup(nums []int) [][]int {
C,res := []int{}, [][]int{}
sort.Ints（nums）//这里是去重的关键逻辑
for k := 0; k start&&nums[i]==nums[i-1]{//这里是去重的关键逻辑，本次不取重复数字，
下次循环可能会取重复数字
continue
C = append(c, nums[i])
generateSubsetswithDup(nums, k, i+1, c, res)
C = c[:1en(c)-1]
3
return
---
## Page 206
91.DecodeWays
题目
A message containing letters from A=z is being encoded to numbers using the following
mapping:
'A'-> 1
 26
Given a non-empty string containing only digits, determine the total number of ways to decode
it.
Example 1:
Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:
Input:"226"
Output: 3
Explanation: It could be decoded as “Bz" (2 26), "vF" (22 6), or “BBF" (2 2
6).
题目大意
一条包含字母A-Z的消息通过以下方式进行了编码：
A'->1
26
给定一个只包含数字的非空字符串，请计算解码方法的总数。
解题思路
·给出一个数字字符串，题目要求把数字映射成26个字母，映射以后问有多少种可能的翻译方法。
·这题思路也是DP。dp[n]代表翻译长度为n个字符的字符串的方法总数。由于题目中的数字可
能出现0，0不能翻译成任何字母，所以出现0要跳过。dp[0]代表空字符串，只有一种翻译方
法，dp[0]=1。dp[1]需要考虑原字符串是否是0开头的，如果是0开头的，dp[1]=0，如
---
## Page 207
果不是0开头的，dp[1]=1。状态转移方程是dp[i]+=dp[i-1]（当1≤s[i-1：i]≤
9）；dp[i]+=dp[i-2]（当10≤s[i-2：i]≤26）。最终结果是dp[n]。
代码
package leetcode
import (
"strconv"
func numDecodings(s string)int {
if len(s) == 0 {
return 0
dp := make([]int, len(s)+1)
dp[0] = 1
if s[:1] == "0" {
dp[1] = 0
}else{
dp[1] = 1
for i := 2; i = 1 && 1astNum = 10 && 1astNum 2->3->4->5->NULL, m = 2, n = 4
Output: 1->4=>3->2=>5>NULL
题目大意
给定2个链表中结点的位置m，n，反转这个两个位置区间内的所有结点。
解题思路
由于有可能整个链表都被反转，所以构造一个新的头结点指向当前的头。之后的处理方法是：找到第一
个需要反转的结点的前一个结点p，从这个结点开始，依次把后面的结点用“头插"法，插入到p结点的
后面。循环次数用n-m来控制。
这一题结点可以原地变化，更改各个结点的next指针就可以。不需要游标p指针。因为每次逆序以
后，原有结点的相对位置就发生了变化，相当于游标指针已经移动了，所以不需要再有游标p=p.Next
的操作了。
代码
package leetcode
#+/
* Definition for singly-linked list.
* type ListNode struct {
valint
Next *ListNode
*/
func reverseBetween(head *ListNode, m int, n int) *ListNode {
if head == nil 11 m >= n {
return head
newHead := &ListNode{Val: 0, Next: head}
pre := newHead
for count := 0; pre.Next != nil && count < m-l; count++ {
pre = pre.Next
3