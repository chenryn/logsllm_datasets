that best combined efﬁcient early guessing with success-
fully continuing to guess passwords into the trillions of
guesses. These conﬁgurations consist of four different
sets of mangling rules, each with two different wordlists.
The smaller wordlist was the same one we used in all
other tests (Section 3.2). The larger wordlist augmented
the same wordlist with all InsidePro wordlists1 in de-
scending frequency order and with duplicates removed.
Our four sets of mangling rules are the following:
Hashcat best64: Although Hashcat does not have a de-
fault set of mangling rules, the Best64 mangling rules are
often used analogously to JTR’s stock rules.
Hashcat generated2: Hashcat comes with a second set
of mangling rules, “generated2.” This set comprises
1http://www.insidepro.com/dictionaries.php
40%
30%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
10%
30%
JTR−Stock
JTR−SpiderLabs
JTR−SpiderLabs
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
10%
101
103
105
Guesses
107
109
1011
(a) Basic
JTR−Stock
JTR−SpiderLabs
0%
8%
6%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
4%
2%
0%
101
103
105
Guesses
107
109
(c) LongBasic
101
103
105
107
Guesses
109
1011
1013
JTR−Stock
(b) Complex
JTR−SpiderLabs
0%
15%
10%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
5%
0%
JTR−Stock
101
103
105
107
Guesses
109
1011
1013
(d) LongComplex
Figure 17: The guessing efﬁciency of JTR rules.
18
65,536 rules. Dustin Heywood of ATB Financial created
them by randomly generating and then testing hundreds
of millions of mangling rules over 6 months (2013-2014)
on a 42-GPU cluster. The rules were optimized by Hash-
cat developers by removing semantic equivalents.
101
103
105
101
103
105
1011
109
107
Guesses
(a) Basic
1011
109
107
Guesses
(b) Complex
HC−MWR−big
HC−MWR
HC−Generated2−big
HC−SpiderLabs−big
HC−Generated2
HC−SpiderLabs
HC−Best64−big
HC−Best64
1013
1015
HC−MWR−big
HC−MWR
HC−Generated2−big
HC−Generated2
HC−SpiderLabs−big
HC−SpiderLabs
HC−Best64−big
HC−Best64
1013
1015
HC−MWR−big
HC−MWR
HC−Generated2−big
HC−SpiderLabs−big
HC−Generated2
HC−Best64−big
HC−SpiderLabs
HC−Best64
101
103
105
107
Guesses
109
1011
1013
1015
(c) LongBasic
HC−MWR−big
HC−MWR
HC−Generated2−big
HC−SpiderLabs−big
HC−Generated2
HC−SpiderLabs
HC−Best64−big
HC−Best64
75%
d
e
s
s
e
u
g
50%
t
n
e
c
r
e
P
25%
0%
40%
30%
d
e
s
s
e
u
g
20%
t
n
e
c
r
e
P
10%
0%
20%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
10%
0%
30%
20%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
10%
0%
101
103
105
107
Guesses
109
1011
1013
1015
(d) LongComplex
Figure 18: The guessing efﬁciency of Hashcat using four
different sets of mangling rules. We tested each set with
the wordlist used elsewhere in this paper, as well as a
larger (-big) wordlist adding the InsidePro dictionaries.
480  24th USENIX Security Symposium 
USENIX Association
Hashcat SpiderLabs: We performed a manual transla-
tion to Hashcat of the SpiderLabs JTR rules (Section 3),
which entailed removing clauses mandating minimum
criteria; such rules are not permitted in oclHashcat.
Hashcat MWR: We collaborated with with Matt Marx
of MWR InfoSecurity to obtain the set of 1.4 million
mangling rules he uses for password auditing [25, 44].
Following his suggestion, we augmented these rules with
the aforementioned SpiderLabs rules.
Using the smaller wordlist, we exhausted all four sets
of mangling rules. With the larger wordlist, we did not
exhaust any set of rules. The curves in Figure 18 that use
this larger dictionary have -big appended to the name and
are graphed with dotted, rather than solid, lines.
We present the results of these eight conﬁgurations in
Figure 18. True to their name, the Hashcat best64 rules
were the most efﬁcient at guessing passwords. Unfortu-
nately, they ran out of guesses using the smaller wordlist
after only 109 guesses. For Complex and LongComplex
passwords, Hashcat best64 therefore guesses only a frac-
tion of the number possible using the other sets of man-
gling rules, albeit in far fewer guesses. While not the
most efﬁcient guess-by-guess, the Hashcat MWR rules
eventually guessed the largest proportion of the different
sets, most notably the Complex and LongComplex sets.
A.4 Ecological validity
To better understand how well our password sets, which
we collected for research studies, compare to real plain-
text passwords revealed in major password leaks, we
compared the efﬁciency of the four automated cracking
approaches in guessing Basic passwords, as well as the
following two comparable sets of leaked passwords:
Basicrockyou: 15,000 passwords randomly sampled from
those containing 8+ characters in the RockYou gaming
website leak of more than 32 million passwords [67]
Basicyahoo: 15,000 passwords randomly sampled from
those containing 8+ characters in the Yahoo! Voices leak
of more than 450,000 passwords [22]
We found a high degree of similarity in the guess-
ability of the Basic passwords collected for research and
the leaked passwords. As shown in Figure 19, the four
automated cracking approaches followed similar curves
across the research passwords and the leaked passwords.
This similar guessability is notable because our analy-
ses depend on using passwords collected by researchers
for two reasons. First, no major password leak has con-
tained passwords contained under strict composition re-
quirements. Furthermore, in contracting experienced hu-
mans to attack the passwords, it was important to have
them attack passwords they had not previously examined
or tried to guess. Presumably, these experienced analysts
would already have examined all major password leaks.
In the body of the paper, we reported how differ-
ent approaches were impacted differently by the num-
ber of character classes contained in Basic passwords.
When we repeated this analysis for Basicrockyou and
Basicyahoo passwords, we found similar behavior (Fig-
ure 20). PCFG was more successful at guessing pass-
words containing two character classes, as opposed to
only a single character class. PCFG only guesses strings
that were found verbatim in its training data, which we
hypothesize might be the cause of comparatively poor
behavior for passwords of a single character class.
80%
60%
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
0%
75%
101
103
105
107
Guesses
109
1011
1013
(a) Basic
d
e
s
s
e
u
g
t
n
e
c
r
e
P
50%
25%
101
103
105
107
Guesses
109
1011
1013
(b) Basicrockyou
0%
75%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
50%
25%
Min_auto
PCFG
Hashcat
JTR
Markov
Min_auto
PCFG
Hashcat
JTR
Markov
Min_auto
PCFG
Hashcat
JTR
Markov
0%
101
103
105
107
Guesses
109
1011
1013
(c) Basicyahoo
Figure 19: The four automated cracking approaches tar-
geting the Basic password set, 15,000 passwords sam-
pled from the RockYou leak, and 15,000 passwords sam-
pled from the Yahoo leak.
Figure 20: Combined percentage of Basicrockyou and
Basicyahoo passwords each approach guessed by the num-
ber of character classes in the password.
USENIX Association  
24th USENIX Security Symposium  481
19
1 class2 classes3 classes4 classes0102030405060708090100HashcatPCFGJTRMarkovPercentage of Passwords Guessed