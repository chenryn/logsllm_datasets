### Optimized Text

The most effective approach combined efficient early guessing with the capability to continue guessing passwords up to trillions of attempts. This configuration involved four distinct sets of mangling rules, each paired with two different wordlists. The smaller wordlist was consistent with those used in other tests (Section 3.2). The larger wordlist was augmented by incorporating all InsidePro wordlists in descending frequency order, with duplicates removed.

#### Mangling Rule Sets

1. **Hashcat Best64**: Although Hashcat does not have a default set of mangling rules, the Best64 rules are often used as an equivalent to John the Ripper's (JTR) stock rules.
2. **Hashcat Generated2**: Hashcat includes a second set of mangling rules, "generated2," which consists of 65,536 rules. These rules were created by Dustin Heywood of ATB Financial through random generation and testing over six months (2013-2014) on a 42-GPU cluster. The rules were further optimized by Hashcat developers to remove semantic equivalents.
3. **Hashcat SpiderLabs**: We manually translated the SpiderLabs JTR rules (Section 3) into Hashcat, removing clauses that mandate minimum criteria, as such rules are not permitted in oclHashcat.
4. **Hashcat MWR**: In collaboration with Matt Marx of MWR InfoSecurity, we obtained a set of 1.4 million mangling rules used for password auditing. We augmented these rules with the aforementioned SpiderLabs rules.

Using the smaller wordlist, we exhausted all four sets of mangling rules. With the larger wordlist, no set of rules was fully exhausted. The curves in Figure 18 that use the larger dictionary are labeled with "-big" and are represented by dotted lines.

#### Results

Figure 18 presents the results of these eight configurations. As expected, the Hashcat Best64 rules were the most efficient at guessing passwords. However, they ran out of guesses using the smaller wordlist after only 10^9 attempts. For Complex and LongComplex passwords, the Best64 rules guessed only a fraction of the possible passwords, albeit in far fewer guesses. While not the most efficient guess-by-guess, the Hashcat MWR rules eventually guessed the largest proportion of passwords, particularly in the Complex and LongComplex sets.

### Ecological Validity

To better understand how our research password sets compare to real plaintext passwords from major leaks, we compared the efficiency of the four automated cracking approaches in guessing Basic passwords and two comparable sets of leaked passwords:

1. **Basicrockyou**: 15,000 passwords randomly sampled from those containing 8+ characters in the RockYou gaming website leak of more than 32 million passwords.
2. **Basicyahoo**: 15,000 passwords randomly sampled from those containing 8+ characters in the Yahoo! Voices leak of more than 450,000 passwords.

We found a high degree of similarity in the guessability of the Basic passwords collected for research and the leaked passwords. As shown in Figure 19, the four automated cracking approaches followed similar curves across the research and leaked passwords. This similarity is significant because our analyses rely on passwords collected by researchers for two reasons: first, no major password leak has contained passwords under strict composition requirements, and second, experienced human analysts need to attack passwords they have not previously examined or tried to guess.

In the main paper, we reported how different approaches were impacted by the number of character classes in Basic passwords. When we repeated this analysis for Basicrockyou and Basicyahoo passwords, we found similar behavior (Figure 20). The PCFG approach was more successful at guessing passwords containing two character classes, likely because it only guesses strings found verbatim in its training data, which may explain its poorer performance on single-character-class passwords.

### Figures

**Figure 17: The guessing efficiency of JTR rules.**

**Figure 18: The guessing efficiency of Hashcat using four different sets of mangling rules. We tested each set with the wordlist used elsewhere in this paper, as well as a larger (-big) wordlist adding the InsidePro dictionaries.**

**Figure 19: The four automated cracking approaches targeting the Basic password set, 15,000 passwords sampled from the RockYou leak, and 15,000 passwords sampled from the Yahoo leak.**

**Figure 20: Combined percentage of Basicrockyou and Basicyahoo passwords each approach guessed by the number of character classes in the password.**

---

This optimized version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.