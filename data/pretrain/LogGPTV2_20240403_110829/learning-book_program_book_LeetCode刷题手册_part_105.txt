●0 =0{
right++
maxCost
-= abs(int(s[right]-'a') - int(t[right]-'a′))
}else{
res = max(res, right-1eft+1)
maxCost += abs(int(s[left]-'a') - int(t[left]-'a′))
1eft++
1
return res
上
1217.PlaywithChips
题目
There are some chips, and the i-th chip is at position chips [i] .
You can perform any of the two following types of moves any number of times (possibly zero)
on any chip:
●Move the i -th chip by 2 units to the left or to the right with a cost of 0.
●Move the i -th chip by 1 unit to the left or to the right with a cost of 1.
There can be two or more chips at the same position initially.
Return the minimum cost needed to move all the chips to the same position (any position).
Example 1:
Input: chips = [1,2,3]
output: 1
Explanation: Second chip wil1 be moved to positon 3 with cost 1. First chip
wil1 be moved to position 3 with cost 0. Total cost is 1.
Example 2:
Input: chips = [2,2,2,3,3]
Output: 2
Explanation: Both fourth and fifth chip wi11 be moved to position two with
cost 1. Total minimum cost will be 2.
Constraints:
●1 kll count['w']>k 1l count['E']>k ll count['R']>k {
if right+l o ==  == s => 
●1 <= startTime[i] < endTime[1] <= 10^9
●1 <= profit[] <= 10^4
解题思路
·给出一组任务，任务有开始时间，结束时间，和任务收益。一个任务开始还没有结束，中间就不能
再安排其他任务。问如何安排任务，能使得最后收益最大？
·一般任务的题目，区间的题目，都会考虑是否能排序。这一题可以先按照任务的结束时间从小到大
排序，如果结束时间相同，则按照收益从小到大排序。dp[i]代表前i份工作能获得的最大收
益。初始值，dp[o]=job[1].profit。对于任意一个任务i，看能否找到满足
jobs[j].enTime <= jobs[j].startTime &&j<i条件的 j]，即查找upper_bound 。由
于jobs被我们排序了，所以这里可以使用二分搜索来查找。如果能找到满足条件的任务]，那么
状态转移方程是：dp[i]=max（dp[i-1]，jobs[i].profit)。如果能找到满足条件的任务]，
那么状态转移方程是：dp[i]=max（dp[i-1]，dp[1ow]+jobs[i].profit)。最终求得的解在
dp[len(startTime)-1] 中。
代码
package leetcode
import "sort"
type job struct{
startTime int
endTime
int
profit
int
func jobscheduling(startTime []int, endTime []int, profit []int) int {
jobs, dp := []job{}, make([]int, len(startTime))
---
## Page 1078
for i:= 0;i <len(startTime);i++{
jobs = append(jobs, job{startTime: startTime[i], endTime: endTime[i],
profit: profit[i]})
sort.Sort(sortJobs(jobs))
dp[0] = jobs[0] -profit
for i := l; i < len(jobs); i++ {
low, high := 0, i-1
for low < high {