**作者：LoRexxar'@知道创宇404实验室**  
**英文版本：**
#### 0x01 前端防御的开始
对于一个基本的XSS漏洞页面，它发生的原因往往是从用户输入的数据到输出没有有效的过滤，就比如下面的这个范例代码。
    a=
对于这样的漏洞点来说，我们通常会使用htmlspecialchars函数来过滤输入，这个函数会处理5种符号。
    & (AND) => &amp;
    " (双引号) => &quot; (当ENT_NOQUOTES没有设置的时候) 
    ' (单引号) => &#039; (当ENT_QUOTES设置) 
     &lt; 
    > (大于号) => &gt; 
一般意义来说，对于上面的页面来说，这样的过滤可能已经足够了，但是很多时候场景永远比想象的更多。
    (没有引号)
对于这样的场景来说，上面的过滤已经没有意义了，尤其输入点在script标签里的情况，刚才的防御方式可以说是毫无意义。
一般来说，为了能够应对这样的xss点，我们会使用更多的过滤方式。
首先是肯定对于符号的过滤，为了能够应对各种情况，我们可能需要过滤下面这么多符号
    % * + , – / ;  ^ | `
但事实上过度的过滤符号严重影响了用户正常的输入，这也是这种过滤使用非常少的原因。
大部分人都会选择使用htmlspecialchars+黑名单的过滤方法
    on\w+=
    script
    svg
    iframe
    link
    …
这样的过滤方式如果做的足够好，看上去也没什么问题，但回忆一下我们曾见过的那么多XSS漏洞，大多数漏洞的产生点，都是过滤函数忽略的地方。
那么，是不是有一种更底层的防御方式，可以从浏览器的层面来防御漏洞呢？
CSP就这样诞生了...
#### 0x02 CSP（Content Security Policy）
Content Security Policy
（CSP）内容安全策略，是一个附加的安全层，有助于检测并缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入攻击。
CSP的特点就是他是在浏览器层面做的防护，是和同源策略同一级别，除非浏览器本身出现漏洞，否则不可能从机制上绕过。
CSP只允许被认可的JS块、JS文件、CSS等解析，只允许向指定的域发起请求。
一个简单的CSP规则可能就是下面这样
    header("Content-Security-Policy: default-src 'self'; script-src 'self' https://lorexxar.cn;");
其中的规则指令分很多种，每种指令都分管浏览器中请求的一部分。
每种指令都有不同的配置
简单来说，针对不同来源，不同方式的资源加载，都有相应的加载策略。
我们可以说，如果一个站点有足够严格的CSP规则，那么XSS or CSRF就可以从根源上被防止。
但事实真的是这样吗？
#### 0x03 CSP Bypass
CSP可以很严格，严格到甚至和很多网站的本身都想相冲突。
为了兼容各种情况，CSP有很多松散模式来适应各种情况。
在便利开发者的同时，很多安全问题就诞生了。
CSP对前端攻击的防御主要有两个：
1、限制js的执行。  
2、限制对不可信域的请求。
接下来的多种Bypass手段也是围绕这两种的。
##### 1
    header("Content-Security-Policy: default-src 'self '; script-src * ");
天才才能写出来的CSP规则，可以加载任何域的js
随意开火
##### 2
    header("Content-Security-Policy: default-src 'self'; script-src 'self' ");
最普通最常见的CSP规则，只允许加载当前域的js。
站内总会有上传图片的地方，如果我们上传一个内容为js的图片，图片就在网站的当前域下了。
    alert(1);//
直接加载图片就可以了
##### 3
    header(" Content-Security-Policy: default-src 'self '; script-src http://127.0.0.1/static/ ");
当你发现设置self并不安全的时候，可能会选择把静态文件的可信域限制到目录，看上去好像没什么问题了。
但是如果可信域内存在一个可控的重定向文件，那么CSP的目录限制就可以被绕过。
假设static目录下存在一个302文件
    Static/302.php
像刚才一样，上传一个test.jpg 然后通过302.php跳转到upload目录加载js就可以成功执行
##### 4
    header("Content-Security-Policy: default-src 'self'; script-src 'self' ");
CSP除了阻止不可信js的解析以外，还有一个功能是组织向不可信域的请求。
在上面的CSP规则下，如果我们尝试加载外域的图片，就会被阻止
      ->  阻止
在CSP的演变过程中，难免就会出现了一些疏漏
     (H5预加载)(only chrome)
     （DNS预加载）
在CSP1.0中，对于link的限制并不完整，不同浏览器包括chrome和firefox对CSP的支持都不完整，每个浏览器都维护一份包括CSP1.0、部分CSP2.0、少部分CSP3.0的CSP规则。
##### 5
无论CSP有多么严格，但你永远都不知道会写出什么样的代码。
下面这一段是Google团队去年一份关于CSP的报告中的一份范例代码
    // 
    var array = document.getElementById('cmd').value.split(',');
    window[array[0]].apply(this, array.slice(1));
机缘巧合下，你写了一段执行输入字符串的js。
事实上，很多现代框架都有这样的代码，从既定的标签中解析字符串当作js执行。
    angularjs甚至有一个ng-csp标签来完全兼容csp，在csp存在的情况下也能顺利执行。
对于这种情况来说，CSP就毫无意义了