# Enclave Shaking and ÆPIC Leak: A Comprehensive Overview

## Enclave Shaking
### Force Data into the SQ: Enclave Shaking
- **Technique**: Abuse the EWB and ELDU instructions for page swapping.
- **EWB Instruction**:
  - Encrypts and stores an enclave page to RAM.
- **ELDU Instruction**:
  - Decrypts and loads an enclave page from RAM.

#### System Components
- **Core**
- **RAM**
- **Thread Registers**
- **Execution Engine**
- **L1 Cache**
- **MOB (Memory Order Buffer)**
- **L2 Cache**
- **TLB (Translation Lookaside Buffer)**
- **Superqueue (SQ)**
- **LLC (Last Level Cache)**
- **Memory Controller**
- **EPC (Enclave Page Cache)**
- **P1, P2 (Pages)**

### Cache Line Freezing
### Keep Data in the SQ: Cache Line Freezing
- **Hyperthreading**: Not necessary but can be utilized.
- **Key Points**:
  - The Superqueue (SQ) is shared between hyperthreads.
  - A hyperthread affects the content of the SQ.
  - Theory: Zero blocks are not transferred over the SQ.
  - **Implementation**:
    - L1/L2 Caches
    - Superqueue
    - Memory
    - **Thread 1 Access**: 0xdeadbXXX
    - **Thread 2 Access**: 0x13370XXX
    - **Data**: SECRET, xxxxxxxx, 00000000000

## ÆPIC Leak
### Exploit ÆPIC Leak
- **Leakage Capability**:
  - Can leak 3/4 of even cache lines.
  - From any arbitrary SGX page.
  - Without the enclave running.
- **Memory Addresses**:
  - 0, 4, 8, 12
  - 0x00, 0x10, 0x20, 0x30

### Leaking Data and Code Pages
1. Start the enclave.
2. Stop when the data is loaded.
3. Move the page out (EWB) and perform Cache Line Freezing.
4. Leak via APIC MMIO.
5. Move the page in (ELDU).
6. Repeat until sufficient confidence is achieved.

### Leaking Register Content
1. Start the enclave.
2. Stop at the target instruction.
3. Move SSA page out (EWB) and perform Cache Line Freezing.
4. Leak via APIC MMIO.
5. Move SSA page in (ELDU).
6. Repeat until sufficient confidence is achieved.
- **Leakable Registers**:
  - **General Purpose**: rdi, r8, r9, r10, r11, r12, r13, r14
  - **SIMD**: xmm0-1, xmm6-9

## Intel Mitigation
- **Recommendations**:
  - Disable APIC MMIO.
  - Microcode update to flush SQ on SGX transitions.
  - Disable hyperthreading when using SGX.

## Timeline
- **December 7, 2021**: Discovery of ÆPIC Leak.
- **December 8, 2021**: Disclosure of the first PoC to Intel.
- **December 22, 2021**: Intel confirms the issue; embargo until August 9, 2022.
- **June 14, 2022**: Intel publishes their own research on MMIO leakage.
- **August 9, 2022**: ÆPIC Leak becomes public.
- **August 10, 2022**: Release of BH USA talk.

## Conclusion
- **ÆPIC Leak**: The first architectural CPU vulnerability that leaks data from the cache hierarchy.
- **No Hyperthreading Required**.
- **Affected CPUs**: 10th, 11th, and 12th generation Intel CPUs.
- **Website**: [aepicleak.com](http://aepicleak.com)

## Virtualized Environments
- **APIC Sensitivity**: Not exposed to VMs.
- **Hypervisor Safety**: No hypervisor maps the APIC directly to the VM.
- **Conclusion**: Virtualized environments are safe from ÆPIC Leak.

**Authors**:
- Pietro Borrello (@borrello_pietro)
- Andreas Kogler (@0xhilbert)