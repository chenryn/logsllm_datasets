### User Interface and Background Dynamics
The user interface (UI) of the application is continuously refreshing, with a dynamic background for the main activity. The minimal value recorded from the Google Search App is 38.5, indicating a very fast launch process without any animations, which is reasonable for a search engine app. The average and standard deviation of the interrupt amount are 237.3 and 114, respectively.

### Interrupt Variation and Threshold Setting
For a single application, the variation in the interrupt amount is relatively small. Among the 10 samples of each app in the training set, the average fluctuation is 20.8%. Therefore, we set the threshold θ to 25% to accommodate some redundancy.

### Application Inference Results
We use the k-Nearest Neighbors (k-NN) algorithm to classify testing apps, and the choice of k affects classification precision. Table VIII lists the results for different values of k. When k = 5, the success rate is the highest. On average, there is an 87% chance that the adversary can identify which app is running in the foreground with a one-time test. Additionally, some tested apps, such as `com.cleanmaster.mguard`, can be identified perfectly (Table IX).

### Similar Apps and Misclassification
We noticed that apps with similar names, such as:
- `com.google.android.apps.docs.editors.docs`
- `com.google.android.apps.docs.editors.sheets`
- `com.google.android.apps.docs.editors.slides`

cannot be distinguished. The primary reason for this misclassification is code reuse. Developers often maintain a uniform UI style across a series of apps, but such cases are limited among the most popular apps.

### Battery and Time Consumption
We primarily consider the battery usage for the interrupt sampling module, which periodically reads `/proc/interrupts`. When running in the background, it occupies 13% of CPU resources and consumes 1% of the battery every 6 minutes. One DTW distance calculation takes approximately 15.8 ms, but this time varies depending on the number of non-zero interrupt counts. A complete app identification (classification) takes about 4.1 seconds, which depends on the size of the training set. This value is not a simple multiple of the overhead from distance calculation, as the required calculations depend on the pre-filtering stage results.

To reduce battery and time consumption, one solution is to decrease the sampling frequency of the interrupt sampling module, which may impact inference accuracy. Experiments under different sampling frequencies show that a 1/10 sampling frequency of the default value (4899 Hz) still guarantees a 71% success rate, with the time overhead dropping to only 0.25 seconds. This configuration allows the adversary to perform malicious activities more timely.

### Heavy Workload Environment
In experiments with a heavy workload environment (available memory less than 30%), the app launching process and sampling frequency were affected. Despite this, the average identification rate for the 10 testing apps was still 72% for one guess (77% for top 2 and 84% for top 5).

### Discussion
Our attacks successfully exploit leaks from touchscreen and display interrupts, but the potential threats from other interrupts remain unclear. We discuss potential threats and suggest several defenses.

#### Leaks from Other Interrupts
Many peripheral devices have been introduced to Android, and many have access to private information. We believe the attack surface on interrupts is not fully explored, and new attacks may arise from other interrupt sources. For example, interrupt information from Bluetooth and NFC devices can be used to infer when these devices are running or sleeping, potentially leading to targeted phishing attacks.

#### Defense
Our attacks fall under the category of side-channel attacks, which are difficult to detect and mitigate due to their stealthy nature. Recent work by Zhang et al. [43] proposed a detection system against runtime side-channel attacks on Android, but our attacks were not detected or prevented by this system.

At the system level, fortifying Android is necessary. Removing or hiding the `/proc` filesystem would cause significant usability and compatibility issues. Instead, we suggest two alternative defenses:
- **Fine-grained Access Control on procfs**: Mediate access to the `/proc` filesystem, restricting access to certain files.
- **Decreasing the Resolution of Interrupt Data**: Reduce the resolution of logged interrupt data, either by grouping hardware interrupt information or updating the interrupt count after a number of interrupts.

### Related Work
Previous works have explored side-channel attacks using Linux `proc` filesystem, sensor data, and timing analysis. Our work is the first to exploit `/proc/interrupts` for inference attacks and proposes a new approach for general interrupt timing analysis.

### Conclusion
In this paper, we describe a new information leakage channel on Android—interrupt statistical information (`/proc/interrupts`). This channel can leak device status and be exploited to infer private information. We propose interrupt timing analysis as a general approach and demonstrate its practicality with two inference attacks. Our experimental studies show that interrupt statistics can indeed lead to the leakage of sensitive information or actions.

### Acknowledgements
We thank anonymous reviewers for their insightful comments. This work was partially supported by NSFC (Grant No. 61572415) and the General Research Funds (Project No. CUHK 4055047 and 24207815) established under the University Grant Committee of the Hong Kong Special Administrative Region, China.

### References
[References listed here as per the original text]