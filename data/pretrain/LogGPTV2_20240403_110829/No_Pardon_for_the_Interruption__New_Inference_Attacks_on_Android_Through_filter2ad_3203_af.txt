its UI is always refreshing and even the background of main
Activity is dynamic. The minimal value is 38.5 coming from
Google Search App: its launching process is very fast and no
animation is used, which is reasonable for a search engine
app. The average and standard deviation of interrupt amount
are 237.3 and 114 respectively.
For a single app, the interrupt amount has much less varia-
tion. Among the 10 samples of every app in the training set,
the average ﬂuctuation is 20.8 %. Thus, we set the threshold
θ to 25 % to accommodate some redundancy.
App Inference Result. We apply k-NN algorithm to classify
a testing app, and the selection of k affects the classiﬁcation
precision. Table VIII lists the result under different k. When k
= 5, the success rate is the highest. Even for a one-time test, on
average, there is 87 % chance for the adversary to know which
app runs in the foreground. Also, we can perfectly identify
some tested apps, such as com.cleanmaster.mguard
(Table IX).
We notice the launching patterns of some apps with similar
names can not be distinguished, like:
com.google.android.apps.docs.editors.docs
SUCCESS RATE OF APP IDENTIFICATION, K = 5
TABLE IX
App Name
tv.danmaku.bili
com.baidu.search
com.icoolme.android.weather
com.scb.breezebanking.hk
ctrip.android.view
com.lenovo.anyshare.gps
com.sometimesweﬂy.littlealchemy
io.silvrr.silvrrwallet.hk
com.cleanmaster.mguard
com.ted.android
Top 1
100 %
80 %
90 %
80 %
50 %
100 %
100 %
90 %
100 %
80 %
Top 2
100 %
90 %
90 %
90 %
50 %
100 %
100 %
100 %
100 %
90 %
Top 5
100 %
90 %
90 %
100 %
60 %
100 %
100 %
100 %
100 %
100 %
427427
com.google.android.apps.docs.editors.sheets
com.google.android.apps.docs.editors.slides
The main reason for such misclassiﬁcation is code reusing.
Clearly, a vendor or a developer prefers to keep the uniform UI
style for a series of apps. The number of such apps, however,
are limited among the most popular apps.
Battery and Time Consumption. We mainly consider the
battery usage for interrupt sampling module, which reads
/proc/interrupts periodically. When it is running in the
background, 13 % CPU resources will be occupied and 1 %
battery is consumed per 6 min.
In the above settings, one time DTW distance calculation
costs about 15.8 ms. However, this time consumption is not a
stable value and affected by the number of non-zero interrupt
count. One complete app identiﬁcation (classiﬁcation) costs
4.1 s, which depends on the size of the training set. This value
is not a simple multiple of overhead from distance calculation,
as the times required for distance calculation depends on the
result from the pre-ﬁltering stage.
In order to reduce the battery and time consumption, one
solution is to reduce the sampling frequency of interrupt
sampling module, which may impact the inference accuracy.
To quantify such relationship, we carried out experiments
under different sampling frequencies. The result is illustrated
in Fig. 16 and the time overhead decreases rapidly without
signiﬁcantly impacting the successful rate. For instance, 1/10
sampling frequency of the default value (4899 Hz) could still
guarantee 71 % successfully rate and the time overhead drops
to only 0.25 s. Under this conﬁguration, the adversary could
sneak the malicious activity into the screen more timely.
Discussion. In the experiments above, the testing phone is not
running many background apps. We repeated the experiments
under a heavy workload running environment to see if the
attack result is stable under different environment, i.e., the
available memory is less than 30 % when too many processes
are running. Such run-time environment affects the app launch-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
ing process and the sampling frequency of our attack app at
the same time. The result shows the average identiﬁcation rate
for the 10 testing apps could still reach 72 % for one guess
(77 % for top 2 and 84 % for top 5).
VI. DISCUSSION
Our attacks successfully exploit the leaks from touchscreen
and display interrupts, while whether other interrupts can be
exploited is unclear. We ﬁrst discuss the potential threats from
other interrupts and then suggest several defenses.
A. Leaks from Other Interrupts
A lot of peripheral devices have been introduced to Android,
among which a large portion has access to private information,
as described in Section II. We believe the attack surface on
interrupt is not exhausted, and new attacks may be sprung from
other interrupt sources. For example, we can acquire the inter-
rupt information from Bluetooth device (named bluetooth
hostwake) and NFC Controller device (named bcm2079x)
in the interrupt logs on Google Nexus 6 to infer when the
devices are running or sleeping. Furthermore, the size/timing
of the ﬁle/packet transmitted through these communication
channels can be inferred potentially. These could give the
attacker a big lift in information stealing. As an example, since
NFC is largely leveraged for in-store payment, an adversary
can do targeted phishing to steal user’s credit card number
when knowing the status of NFC device. What’s more, it is
also a reasonable speculation that such information leakage
exists on other operating system platforms and can be ex-
ploited. It is necessary to fully explore the attack surface via
interrupts, but the effort is, however, considerable. We believe
an approach based on automated testing can greatly reduce the
overhead and increase the chances of discovering new interrupt
leaks, and we leave it as the next step.
B. Defense
The attacks presented in our work belong to a big category
of side-channel attacks. It is known by the community that
side-channel attacks are hard to detect and mitigate, due
to their stealthy nature. Recent work by Zhang et al. [43]
proposed a new detection system against runtime side-channel
attacks on Android and also released an app on Google Play.
We tested this app against our attacks but found none of our
attacks were detected or prevented.
On the other hand, we believe Android needs to be for-
tiﬁed at the system level. Since the interrupt statistics leak
from proc ﬁlesystem (/proc/interrupts), the natural
idea is to remove the proc ﬁlesystem or make it
invis-
ible to processes. However,
these simple remedies would
cause big usability and compatibility issues as many utilities
rely on /proc to gain access to Linux kernel
informa-
tion [44]. For example, the Linux command ps relies on
the /proc// to obtain process status [45], and the
irqbalance service [46] uses interrupt statistics informa-
tion for balancing CPU load on a multiprocessor system.
Instead, we suggest two alternative defenses below:
Fine-grained Access Control on procfs. The access to
proc ﬁlesystem should be mediated. Linux has been moving
towards this direction and access to some ﬁles under proc
ﬁlesystem is restricted. For example, /proc/vmallocinfo
is not world-readable. Still, not all proc ﬁles are protected,
including the one we identiﬁed. In the long run, we believe
all ﬁles under proc ﬁlesystem should be scrutinized and
protected at different levels (accessed by system process only,
accessed based on granted permission, or open to public). Yet,
the decision should be made after measuring the impact on
legacy apps and OS components to ensure their functionalities
are not largely disrupted.
Decreasing the Resolution of Interrupt Data. Similar to the
defense proposed by Zhou et al. [21] which foils the attack by
rounding up or down the data value from exploitable sources
(e.g., the volume of network trafﬁc logged in public statistics),
we could reduce the resolution of logged interrupt data as
mitigation. Noise injection, proposed by Xiao et al. [47], is
also an alternative solution in the same direction.
As one option, /proc/interrupts can present
the
hardware interrupt information grouped by PIC (it connects
to multiple devices) instead of a single device. Another option
is to update the interrupt count after a number of interrupts
have been collected. Since the precision is degraded, different
touch movements or UI refreshes may share the same delta
of interrupts count, reducing the chance of ﬁnding the right
unlock pattern or the foreground app by attackers.
VII. RELATED WORK
A. Side-channel Attacks
Linux procfs. Zhang and Wang [6] were the ﬁrst to present
a side-channel attack by exploiting Linux proc ﬁlesystem,
which allows a malicious user to eavesdrop other users’
keystrokes. By tracking changes in the application’s memory
footprint (/proc//statm), Jana et al. [5] showed
that how a malicious Android app can infer which page
a user is browsing. Zhou et al. [21] demonstrated several
attacks to infer user’s identity, location using such side channel
information (e.g., /proc/uid_stat/). UI state can also be
read from proc ﬁlesystem, as described by Chen et al. [18].
Moreover, Lin et al. [48] exploited /proc//stat
to detect target apps activities. The TCP sequence number
inference attack of Qian et al. [49] and the ret2dir attacks
of Kemerlis et al. [50] exploited /proc information as
well. Compared with previous works, our work is the ﬁrst
one exploiting /proc/interrupts to implement inference
attacks and we proposed a new approach for general interrupt
timing analysis. In addition, our work makes the ﬁrst step to
investigate the security issues coming from the integration of
the emerging hardware components and the legacy kernel on
mobile platforms.
Leaks from Sensors. In addition to Linux procfs,
the
reading from sensors can also be exploited by malicious
apps for side-channel attacks. As demonstrated by previous
works [1], [2], [51], [52], [53], the data stream from the
428428
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
accelerometer can be leveraged by malicious apps to infer
mobile phone user’s tapping locations on screens or even
password. Michalevsky et al. [54] demonstrated an attack
which is able to identify the speaker information and parse the
speech through reading phone gyroscopes. More recently, the
leaks from the sensors on smartwatch were investigated. Wang
et al. [55] demonstrated that user’s keypresses on QWERTY
keyboard can be inferred using accelerometer and gyroscope
data. Liu et al. [56] showed that side-channel information
from accelerometer and microphone can be leveraged to infer
PIN typed on numeric keypad and text typed on QWERTY
keyboard.
B. Timing Analysis
Techniques for timing analysis have been extensively used
for inference attacks. Kocher et al. [57] showed that secret keys
used by DES algorithm can be decoded through analyzing
sequences of power consumption signals. Michalevsky et
al. [58] described an attack that allows a malicious app on
Android to learn information about the user’s location by
reading the phone’s aggregated power consumption over a
period of a few minutes. By measuring the intervals between
keystrokes, Song et al. [59] showed it is possible to recover
the password or other sensitive information typed by a victim
during SSH sessions. Hund et al. [60] implemented a practical
timing side channel attack against ASLR to infer information
about the protected address space layout. Andrysco et al. [61]
identiﬁed a timing channel in the ﬂoating point instructions
of modern x86 processors, which can be used to break the
isolation guarantees of Web browsers.
VIII. CONCLUSION
In this paper, we describe our ﬁnding of a new information
leakage channel on Android – interrupt statistical information
(/proc/interrupts). This channel could leak the running
status of devices and be exploited by attackers to infer private
information. We propose the interrupt timing analysis as a
general approach and demonstrate the practicality with two
inference attacks which can infer user’s unlock pattern and
the app running in the foreground. We implemented attack
prototype apps and evaluated them using the real-world data.
Our experimental studies show that indeed interrupt statistics
could lead to leaks of user’s sensitive information or actions.
We believe such security threat from the ill-conceived integra-
tion of hardware components and tailored kernel is not just an
isolated incident and call for the attention from the security
community.
ACKNOWLEDGEMENTS
We thank anonymous reviewers for their insightful com-
ments. This work was partially supported by NSFC (Grant
No. 61572415), and the General Research Funds (Project
No. CUHK 4055047 and 24207815) established under the
University Grant Committee of the Hong Kong Special Ad-
ministrative Region, China.
REFERENCES
[1] L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion,” in Proceedings of the 6th USENIX
Workshop on Hot Topics in Security (HotSec), 2011.
[2] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith, “Practicality of
Accelerometer Side Channels on Smartphones,” in Proceedings of the
28th Annual Computer Security Applications Conference (ACSAC),
2012.
[3] R. Templeman, Z. Rahman, D. J. Crandall, and A. Kapadia, “Plac-
eRaider: Virtual Theft in Physical Spaces with Smartphones,” in Pro-
ceedings of the 20th Annual Network and Distributed System Security
Symposium (NDSS), 2013.
[4] T. Fiebig, J. Krissler, and R. H¨ansch, “Security Impact of High Resolu-
tion Smartphone Cameras,” in Proceedings of the 8th USENIX Workshop
on Offensive Technologies (WOOT), 2014.
[5] S. Jana and V. Shmatikov, “Memento: Learning Secrets from Process
Footprints,” in Proceedings of the 2012 IEEE Symposium on Security
and Privacy (S&P), 2012.
[6] K. Zhang and X. Wang, “Peeping Tom in the Neighborhood: Keystroke
Eavesdropping on Multi-User Systems,” in Proceedings of the 18th
USENIX Security Symposium, 2009.
[7] W. Ogunwale, “Lockdown AM.getRunningAppProcesses API with
https://android.googlesource.com/
permission.REAL GET TASKS,”
platform/frameworks/base/+/aaa0fee, 2015.
[8] J. Corbet, A. Rubini, and G. Kroah-Hartman, “Interrupt Handling,” in
Linux Device Drivers, 3rd ed. O’Reilly Media, 2005.
[9] D. P. Bovet and M. Cesati, “Interrupts and Exceptions,” in Understand-
ing the Linux Kernel, 3rd ed. O’Reilly Media, 2005.
[10] P. Brady, “Anatomy & Physiology of an Android,” in Google I/O, 2008.
[11] “Android Interfaces and Architecture,” https://source.android.com/
devices/index.html.
[12] “Android Kernel Features,” http://elinux.org/Android Kernel Features.
[13] J. Levin, “I/O Kit Kernel Drivers,” in Mac OS X and iOS Internals: To
the Apple’s Core.
John Wiley & Sons, 2012.
[14] M. E. Russinovich, D. A. Solomon, and A. Ionescu, “Trap Dispatching,”
in Windows Internals, Part 1, 6th ed. Pearson Education, 2012.
[15] “Xperf Command-Line Reference,” https://msdn.microsoft.com/en-us/
library/windows/hardware/hh162920.aspx.
[16] R. Biddle, S. Chiasson, and P. C. van Oorschot, “Graphical Passwords:
Learning from the First Twelve Years,” ACM Computing Surveys, 2012.
[17] S. Uellenbeck, M. D¨urmuth, C. Wolf, and T. Holz, “Quantifying the
Security of Graphical Passwords: the Case of Android Unlock Patterns,”
in Proceedings of the 2013 ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2013.
[18] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking into Your App without
Actually Seeing It: UI State Inference and Novel Android Attacks,” in
Proceedings of the 23rd USENIX Security Symposium, 2014.
[19] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and
G. Vigna, “What the App is That? Deception and Countermeasures in the
Android User Interface,” in Proceedings of the 2015 IEEE Symposium
on Security and Privacy (S&P), 2015.
https://play.google.com/store/apps/details?id=com.lenovo.
[20] “SHAREit,”
anyshare.gps.
[21] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A.
Gunter, and K. Nahrstedt, “Identity, Location, Disease and More:
Inferring Your Secrets from Android Public Resources,” in Proceedings
of the 2013 ACM SIGSAC Conference on Computer & Communications
Security (CCS), 2013.
[22] “Capacitive VS Resistive Touch Panels,” http://www.newhavendisplay.
com/capacitive vs resistive.html.
[23] C. Ji, “Internal
input event handling in the Linux kernel and the
Android userspace,” http://seasonofcode.com/posts/internal-input-event-
handling-in-the-linux-kernel-and-the-android-userspace.html, 2011.
[24] “Linear Interpolation,” https://www.encyclopediaofmath.org/index.php/
Linear interpolation.
curveﬁtting/.
[25] “Curve
Fitting Toolbox™,”
http://www.mathworks.com/products/
[26] L. R. Rabiner and B.-H. Juang, “An Introduction to Hidden Markov
Models,” ASSP Magazine, IEEE, vol. 3, no. 1, pp. 4–16, 1986.
[27] G. D. Forney Jr, “The Viterbi Algorithm,” Proceedings of the IEEE,
vol. 61, no. 3, pp. 268–278, 1973.
[28] C. C. Aggarwal, “Probabilistic Models for Classiﬁcation,” in Data
Classiﬁcation: Algorithms and Applications. CRC Press, 2014.
[29] “XPIN Clip: Bruteforce PIN and PatternLock Solution,” http://xpinclip.
com/.
429429
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:05 UTC from IEEE Xplore.  Restrictions apply. 
[30] A. J. Aviv, K. L. Gibson, E. Mossop, M. Blaze, and J. M. Smith,
“Smudge Attacks on Smartphone Touch Screens,” in Proceedings of
the 4th USENIX Workshop on Offensive Technologies (WOOT), 2010.
[31] “Android NDK,” http://developer.android.com/ndk/index.html.
[32] M. Løge, “Tell me who you are and I will tell you your lock pattern,”
in DEFCON, 2015.
[33] A. J. Aviv and D. Fichter, “Understanding Visual Perceptions of Us-
ability and Security of Androids Graphical Password Pattern,” in Pro-
ceedings of the 30th Annual Computer Security Applications Conference
(ACSAC), 2014.
[34] C. Haase and R. Guy, “For Butter or Worse - Smoothing Out Perfor-
mance in Android UIs,” in Google I/O, 2012.
[35] “Implementing graphics,” https://source.android.com/devices/graphics/
implement.html.
[36] graﬁker, “Display Subsystem,” http://droid-graﬁker.blogspot.hk/2012/
07/display-subsystem.html, 2012.
[37] Android
Open
Source
Project,
“DispSync.cpp,”
https:
//android.googlesource.com/platform/frameworks/native/+/kitkat-
release/services/surfaceﬂinger/DispSync.cpp.
[38] J. B. Kruskal and M. Liberman, “The Symmetric Time Warping Prob-
lem: From Continuous to Discrete,” in Time Warps, String Edits and
Macromolecules: The Theory and Practice of Sequence Comparison.
Addison-Wesley, 1983.
[39] S. Salvador and P. Chan, “FastDTW: Toward Accurate Dynamic Time
the Third
Warping in Linear Time and Space,” in Proceedings of
SIGKDD Workshop on Mining Temporal and Sequential Data, 2004.
[40] “monkeyrunner,”
http://developer.android.com/tools/help/
monkeyrunner concepts.html.
[41] T. M. Cover and P. E. Hart, “Nearest Neighbor Pattern Classiﬁcation,”
IEEE Transactions on Information Theory, vol. 13, no. 1, pp. 21–27,
1967.
[42] T. Abeel, Y. V. de Peer, and Y. Saeys, “Java-ML: A Machine Learning
Library,” Journal of Machine Learning Research, vol. 10, pp. 931–934,
2009.
[43] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang, “Leave Me
Alone: App-Level Protection against Runtime Information Gathering on
Android,” in Proceedings of the 2015 IEEE Symposium on Security and
Privacy (S&P), 2015.
[44] C. Negus, “Managing Disks and Filesystems,” in Linux Bible, 8th ed.
John Wiley & Sons, 2012.
[45] “THE
/proc
FILESYSTEM,”
https://www.kernel.org/doc/
Documentation/ﬁlesystems/proc.txt, 2009.
[46] “irqbalance,” http://www.unix.com/man-page/linux/1/irqbalance/.
[47] Q. Xiao, M. K. Reiter, and Y. Zhang, “Mitigating Storage Side Channels
Using Statistical Privacy Mechanisms,” in Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security (CCS),
2015.
[48] C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker: How to Milk Your
Android Screen for Secrets,” in Proceedings of the 21st Annual Network
and Distributed System Security Symposium (NDSS), 2014.
[49] Z. Qian, Z. M. Mao, and Y. Xie, “Collaborative TCP Sequence Number
Inference Attack – How to Crack Sequence Number Under A Second,”
in Proceedings of the 2012 ACM Conference on Computer and Com-
munications Security (CCS), 2012.
[50] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, “ret2dir: Re-
thinking Kernel Isolation,” in Proceedings of the 23rd USENIX Security
Symposium, 2014.
[51] E. Owusu, J. Han, S. Das, A. Perrig, and J. Zhang, “ACCessory: Pass-
word Inference Using Accelerometers on Smartphones,” in Proceedings
of the 2012 Workshop on Mobile Computing Systems and Applications
(HotMobile), 2012.
[52] E. Miluzzo, A. Varshavsky, S. Balakrishnan, and R. R. Choudhury,
“TapPrints: Your Finger Taps Have Fingerprints,” in Proceedings of
the 10th International Conference on Mobile Systems, Applications, and
Services (MobiSys), 2012.
[53] Z. Xu, K. Bai, and S. Zhu, “TapLogger: Inferring User Inputs On Smart-
phone Touchscreens Using On-board Motion Sensors,” in Proceedings
of the Fifth ACM Conference on Security and Privacy in Wireless and
Mobile Networks (WiSec), 2012.
[54] Y. Michalevsky, D. Boneh, and G. Nakibly, “Gyrophone: Recognizing
Speech from Gyroscope Signals,” in Proceedings of the 23rd USENIX
Security Symposium, 2014.
[55] H. Wang, T. T. Lai, and R. R. Choudhury, “MoLe: Motion Leaks through
Smartwatch Sensors,” in Proceedings of the 21st Annual International
Conference on Mobile Computing and Networking (MobiCom), 2015.
[56] X. Liu, Z. Zhou, W. Diao, Z. Li, and K. Zhang, “When Good Becomes
Evil: Keystroke Inference with Smartwatch,” in Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2015.
[57] P. C. Kocher, J. Jaffe, and B. Jun, “Differential Power Analysis,”
in Advances in Cryptology - CRYPTO’99, 19th Annual International
Cryptology Conference, Santa Barbara, California, USA, August 15-19,
1999, Proceedings, 1999.
[58] Y. Michalevsky, A. Schulman, G. A. Veerapandian, D. Boneh, and
G. Nakibly, “PowerSpy: Location Tracking Using Mobile Device Power
Analysis,” in Proceedings of the 24th USENIX Security Symposium,
2015.
[59] D. X. Song, D. Wagner, and X. Tian, “Timing Analysis of Keystrokes
and Timing Attacks on SSH,” in Proceedings of the 10th USENIX