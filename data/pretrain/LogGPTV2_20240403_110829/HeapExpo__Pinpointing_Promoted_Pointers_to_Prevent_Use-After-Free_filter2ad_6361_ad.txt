pointers could evade detection.
The straightforward solution is to track all pointer variables.
However, that would incur 413% more instrumentation, and make
the overall overhead unacceptable. After applying our liveness
and call graph analyses, we reduce the instrumentation overhead
to 156%. This overhead is acceptable, but we can still do better
by removing further unnecessary instrumentation using the call
graph gathered during link time optimization. The number of in-
strumented instructions is consequently lowered to 86% more than
DangSan, and we still guarantee the safety of all pointer variables
under the thread-local assumption.
5 LIMITATIONS
The design of our work follows earlier research including FreeSen-
try, DangNull and DangSan. For this reason, our work shares their
common limitations. We discuss these limitations in this section.
Our system and other previous works are transformation passes
based on LLVM tool chain, which means that source code is re-
quired. Recalling other approaches in literature, source code is
Figure 4: Number of Instrumented Instructions Compared
to DangSan
9
often required to perform meaningful sanitizing with reasonable
overhead. After compiler and linker optimizations, binary code is
very different from its source, and meaningful information such
as variable types is lost during the process. Although it is possible
to retrieve a portion of the information through static analysis of
binary code, the information would not be helpful enough for pro-
tection because of the lack of completeness. We agree with prior
work that the limitation of requiring source code is an appropriate
trade-off.
Like most sanitizers, HeapExpo can only detect temporal safety
violations with instrumented code. That means the library source
code is also required to detect use-after-free bugs in libraries. The
linked libraries need to be compiled by the sanitizer as well. In
practice, this is implemented in OSS-Fuzz where all library code as
well as project code is compiled with the sanitizer flags.
We share another limitation with DangSan, where we do not
track pointers that are copied in type-unsafe ways. For example,
memcpy and memmove in glibc are not tracked because instru-
menting them can result in non-trivial overhead. Tracking these
functions is achievable with some overhead by using an implemen-
tation that also records outwards pointers. Although our prototype
does not implement this, we think the type information could be
recovered more easily with a pass closer to the front-end where all
type information remains.
We also note that the fact that LLVM often optimizes the mem-
cpy function to trackable instructions like store makes this false
negative less significant. In Listing 9, LLVM interprets line 11 as
a memcpy call which copies data from a local to a global, so
global.data is not registered at line 11. Thus, when the memory
is released at line 15, global.data is not invalidated by our instru-
mentation. The use of global.data at line 16 does not raise an alert.
However, LLVM will transform the memcpy call to two simpler
instructions shown in lines 13â€“14, where line 13 is instrumented
with a call to regptr in line 12. This occurs because we have a rel-
atively small structure, so the cost for calling memcpy exceeds
the two simple instructions. The idea is that one can customize the
memcpy optimization to recover more pointer propagation. We
did not implement this because of the limited number of bugs in
this case, as von der Kouwe et al. discuss [26].
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
struct str {
char* data;
int len;
};
struct str global;
int main () {
struct str local;
local.data = malloc(10);
strcpy(local.data, "string");
local.len = strlen(local.data);
global = local;
//regptr(&global.data,local.data);
//global.data = local.data
//global.len = local.len
free(local.data);
printf("%s\n", global.data);
}
Listing 9: False negative example
Finally like all current dangling pointer invalidation approaches,
our work does not support custom pointer manipulation. Compari-
son between a regular pointer with an invalidated pointer is broken,
but that between invalidated pointers is supported. Custom storage
for pointers such as compacting pointers to smaller sizes is not
trackable because type information is lost during the transforma-
tion. However, we believe this kind of direct pointer manipulation
is relatively rare: we only see one such case (in libaom [18]) among
our reproduced bugs from OSS-Fuzz.
6 RELATED WORK
In this section, we discuss how our work relates to prior work in the
literature. HeapExpo is an improvement on the dangling pointer
invalidation approach for detecting use-after-free vulnerabilities.
Although that is not the only approach, its combination of low over-
head and strong protection compared with other methods makes it
attractive.
Dangling Pointer Invalidation. The previous works using this
approach are DangNull [16], FreeSentry [28], DangSan [26] and
pSweeper [13]. Based on the LLVM toolchain, they all instrument
pointer propagation instructions at the IR level. The earliest works,
DangNull and FreeSentry, are conceptually similar but implemented
with different data structures. They both instrument store instruc-
tions in the LLVM IR as an LLVM optimization pass. DangNull
keeps a more complete data structure which records both inward
and outward pointers, but it only tracks pointers in global data and
on the heap. FreeSentry only registers inward pointers of an object,
but it extends dangling pointer detection to pointers stored on the
stack as well. Finally, DangSan extends FreeSentry by improving
the data structures used and supporting multi-threading; DangSan
uses a log-like data structure inspired by log-structured filesystems.
They also support multithreading by managing thread-local data
structures. In terms of overhead, DangSan is currently the state of
the art.
10
The instrumentation strategy has remained the same across the
four previous works, so none of them are able to track stack pointers
promoted to registers. We studied a number of bugs in OSS-Fuzz
database and found local variables and function arguments are the
sources of more than half of the use-after-free bugs. Previous works
cannot deal with such cases, so we target these false negatives in
this paper.
Secure allocators. To ensure temporal safety, some prior work
focuses on creating a more sophisticated allocator that can detects
access to freed memory. Dhurjati and Adve [11] put each allocation
on a different virtual page, so that reads and writes to released pages
raise an error. DieHarder [22] marks freed chunks of memory and
suppresses the reuse of those memory blocks so that dereferencing
dangling pointers is likely to cause an exception. Cling [3] is an
allocator that introduces type-safe memory reuse that prevents
corruption of control addresses by inferring object types from the
allocation stack trace, so that dangling pointers will end up pointing
to the same type of object even if the allocation is reused.
These three works all manage pointer propagation inline, while
pSweeper dedicates an extra thread to to manage the pointer meta-
data structures. It bookmarks the location of pointers and keeps
a list of pointers as a simple data structure. Concurrently, it runs
a separate thread that cycles through the bookmarked location to
register pointers and to clean out dangling ones. The use of extra
threads leverages idle CPU cycles in multicore systems to speed up
dangling pointer invalidation. However, it uses more computing
power overall due to extra worker threads.
Address-based checking. In this approach, metadata of point-
ers and memory addresses are stored and checked at dereference
time. Previous projects in the category include CETS [12] and
SafeC [4]. CETS is another compiler-based use-after-free detec-
tion. It also supports checking for local variables. CETS associates
pointers with the root object by pointing them to a key that indi-
cates the validity of the memory object. When memory objects are
released, these keys are invalidated. Access of the dangling pointer
would raise an alert during a key check. When combined with Soft-
Bound [19], it can achieve both spatial and temporal safety. As von
der Kouwe et al. [26] discussed, however, this approach has more
run-time overhead and compatibility issues than dangling pointer
invalidation approach. Lee et al. [16] also pointed that it has high
false positive rate, raising false alarms in 5 of 16 tested programs.
Safe C [4] is source-level instrumentation that adds extra meta-
data to raw pointers, including the actual raw pointer, size, and the
memory section it points to. It is able to perform bounds checking
and check temporal safety using these attributes. However, source-
level instrumentation can reduce the opportunities the compiler
has to optimize the program, and has a significant time overhead.
Debugging tools for use-after-free. The most widely used
tools for detecting memory errors are Valgrind [21] and Address
Sanitizer [25]. They also detect at the time of pointer dereference.
They are generally comprehensive, but come with high performance
overhead. Valgrind is built on a dynamic binary translation (DBT)
framework. It translates and instruments binary code one block
at a time. However, at the machine language level, the type of a
memory location or register is ambiguous. Although we know a
referenced register value has to be a pointer, pointers may also
be used in arithmetic. Thus, pointer checking can often require a
search through all of program memory, which is inefficient. Another
possible approach using DBT would be to use taint analysis to
track all the pointers. However, we argue that this approach has an
extra overhead from taint analysis, and is unsuitable for runtime
protection.
Address Sanitizer [25] is a very effective tool for detecting memory-
related errors. The essence of Address Sanitizer is using shadow
memory to mark the validity of every address. It postpones the
reuse of freed memory, so that use of a dangling pointer produces
access to memory marked invalid. Address Sanitizer overloads the
allocator functions and adds padding to memory blocks so that
access to the padding also raises alerts. Address Sanitizer shows
the effectiveness of shadow memory, but it cannot prevent sophis-
ticated attacks which force the reuse of memory. Moreover, the
run-time and memory overhead make it unsuitable for online pro-
tection use. Hardware Assisted Address Sanitizer, hwasan is an
optimization for memory usage on AArch64 and SPARC architec-
tures. With a low false-negative rate (99.61%), it probabilistically
detects UAF. Furthermore, its optimization makes dynamic memory
layout easier to predict, and thus the system is more exploitable if
probabilistic checking misses a dereference.
Garbage collection. MarkUs [2] introduces many optimization
techniques on top of garbage collection to tailor it for use-after-free
mitigation. During garbage sweeping, it scans memory for potential
pointers. Dynamic memory blocks are freed only when there is
no potential pointer referencing them. It is incapable of detecting
use-after-free by design and works only as a mitigation technique.
Unable to distinguish pointer types from raw data, conservative
garbage collection adds extra attack vector for memory exhaustion
where an attacker can put random heap addresses in controlled
buffers. Li and Tang [17] launched such attack against MemGC
[1, 27] to exploit Microsoft Edge.
Dangling pointer detection. Undangle [7] focuses on dangling
pointer detection that may result in use-after-free vulnerabilities.
Undangle works offline by processing the execution trace and allo-
cation log of the program. It applies taint analysis to track pointer
propagation during execution. Taint analysis significantly increases
the time overhead because every instruction must be instrumented
to propagate taint information, meaning that this approach can
only be used offline. We can provide similar functionality online by
recording and reporting invalidated pointers.
7 CONCLUSION
In conclusion, we improve on prior work on temporal safety analy-
sis. Focusing on dangling pointer invalidation, we support tracking
of a broader range of pointers including local variables and func-
tion arguments. Through a review of 19 real-world UAF bugs from
the OSS-Fuzz database, we found that 10 are ultimately caused by
dangling pointers stored in local variables and function arguments,
indicating that existing systems have significant gaps in coverage.
To close this gap, we introduced a novel approach that forces
such pointers to be stored on the stack, allowing them to be tracked.
However, tracking all such pointer variables and arguments can in-
troduce unacceptably high overheads, so we applied a static analysis
that identifies pointers that can never be involved in use-after-free
bugs and excludes them from instrumentation.
11
HeapExpo successfully closes an important gap in detection of
dangling pointers in C/C++ programs, and does so with reasonable
additional overhead compared to prior work.
To aid in future research, we choose to open source our prototype
HeapExpo at https://github.com/messlabnyu/heap-expo.
ACKNOWLEDGMENTS
This research was supported in part by National Science Founda-
tion (NSF) Award 1657199. Any opinions, findings, conclusions,
or recommendations expressed are those of the authors and not
necessarily of the NSF.
REFERENCES
[1] 2016. Triaging the exploitability of IE/EDGE crashes. https://msrc-blog.microsoft.
com/2016/01/12/triaging-the-exploitability-of-ieedge-crashes/
[2] S Ainsworth and TM Jones. [n.d.]. MarkUs: Drop-in Use-After-Free Prevention
for Low-Level Languages. In 2020 IEEE Symposium on Security and Privacy (SP).
860â€“860.
[3] Periklis Akritidis. 2010. Cling: A Memory Allocator to Mitigate Dangling Pointers.
In Proceedings of the 19th USENIX Conference on Security (Washington, DC)
(USENIX Securityâ€™10). USENIX Association, Berkeley, CA, USA, 12â€“12. http:
//dl.acm.org/citation.cfm?id=1929820.1929836
[4] Todd M. Austin, Scott E. Breach, and Gurindar S. Sohi. 1994. Efficient Detection
of All Pointer and Array Access Errors. In Proceedings of the ACM SIGPLAN
1994 Conference on Programming Language Design and Implementation (Orlando,
Florida, USA) (PLDI â€™94). ACM, New York, NY, USA, 290â€“301. https://doi.org/10.
1145/178243.178446
[5] Fabrice Bellard. 2019. QuickJS Javascript Engine. https://bellard.org/quickjs/.
[6] Emery D. Berger and Benjamin G. Zorn. 2006. DieHard: Probabilistic Memory
Safety for Unsafe Languages. SIGPLAN Not. 41, 6 (June 2006), 158â€“168. https:
//doi.org/10.1145/1133255.1134000
[7] Juan Caballero, Gustavo Grieco, Mark Marron, and Antonio Nappa. 2012. Un-
dangle: Early Detection of Dangling Pointers in Use-after-free and Double-free
Vulnerabilities. In Proceedings of the 2012 International Symposium on Software
Testing and Analysis (Minneapolis, MN, USA) (ISSTA 2012). ACM, New York, NY,
USA, 133â€“143. https://doi.org/10.1145/2338965.2336769
[8] CVE. 2019. CVE - Common Vulnerabilities and Exposures. https://cve.mitre.org/.
[9] Google developers. 2019. https://github.com/google/oss-fuzz.
[10] LLVM developers. 2019. https://llvm.org/docs/Passes.html#mem2reg-promote-
memory-to-register.
[11] Dinakar Dhurjati and Vikram Adve. 2006. Efficiently Detecting All Dangling
Pointer Uses in Production Servers. In DSN â€™06: Proceedings of the International
Conference on Dependable Systems and Networks. IEEE Computer Society, Wash-
ington, DC, USA, 269â€“280. https://doi.org/10.1109/DSN.2006.31
[12] Dinakar Dhurjati and Vikram Adve. 2006. Efficiently Detecting All Dangling
Pointer Uses in Production Servers. In DSN â€™06: Proceedings of the International
Conference on Dependable Systems and Networks. IEEE Computer Society, Wash-
ington, DC, USA, 269â€“280. https://doi.org/10.1109/DSN.2006.31
[13] Craig Disselkoen, John Renner, Conrad Watt, Tal Garfinkel, Amit Levy, and
Deian Stefan. 2019. Position Paper: Progressive Memory Safety for WebAssembly.
In Proceedings of the 8th International Workshop on Hardware and Architectural
Support for Security and Privacy. ACM, 4.
[14] John L. Henning. 2006. SPEC CPU2006 Benchmark Descriptions. SIGARCH
Comput. Archit. News 34, 4 (Sept. 2006), 1â€“17. https://doi.org/10.1145/1186736.
1186737
[15] Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for
Lifelong Program Analysis & Transformation. In Proceedings of the International
Symposium on Code Generation and Optimization: Feedback-directed and Run-
time Optimization (Palo Alto, California) (CGO â€™04). IEEE Computer Society,
Washington, DC, USA, 75â€“. http://dl.acm.org/citation.cfm?id=977395.977673
[16] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long
Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers
Nullification. In NDSS.
[17] Henry Li and Jack Tang. 2017. Cross the Wall - Bypass All Modern Mitigations
of Microsoft Edge. https://www.blackhat.com/asia-17/briefings.html#cross-the-
wall-bypass-all-modern-mitigations-of-microsoft-edge
[18] libaom developers. 2019. https://github.com/mozilla/aom.
[19] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.
2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C.
SIGPLAN Not. 44, 6 (June 2009), 245â€“258. https://doi.org/10.1145/1543135.1542504
[20] Nicholas Nethercote and Julian Seward. 2007. How to Shadow Every Byte of
Memory Used by a Program. In Proceedings of the 3rd International Conference
on Virtual Execution Environments (San Diego, California, USA) (VEE â€™07). ACM,
New York, NY, USA, 65â€“74. https://doi.org/10.1145/1254810.1254820
[21] Nicholas Nethercote and Julian Seward. 2007. Valgrind: A Framework for Heavy-
weight Dynamic Binary Instrumentation. SIGPLAN Not. 42, 6 (June 2007), 89â€“100.
https://doi.org/10.1145/1273442.1250746
[22] Gene Novark and Emery D. Berger. 2010. DieHarder: Securing the Heap. In
Proceedings of the 17th ACM Conference on Computer and Communications Security
(Chicago, Illinois, USA) (CCS â€™10). ACM, New York, NY, USA, 573â€“584. https:
//doi.org/10.1145/1866307.1866371
[23] OSS-Fuzz 2019. OSS-Fuzz: Fuzzing the planet. https://bugs.chromium.org/p/oss-
[24] QuickJS 0day Contest 2019. QuickJS 0day Contest. http://rce.party/cracksbykim-
fuzz.
quickJS.nfo.
[25] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitry
Vyukov. 2012. AddressSanitizer: A Fast Address Sanity Checker. In Proceed-
ings of the 2012 USENIX Conference on Annual Technical Conference (Boston,
MA) (USENIX ATCâ€™12). USENIX Association, Berkeley, CA, USA, 28â€“28. http:
//dl.acm.org/citation.cfm?id=2342821.2342849
[26] Erik van der Kouwe, Vinod Nigade, and Cristiano Giuffrida. 2017. DangSan: Scal-
able Use-after-free Detection. In Proceedings of the Twelfth European Conference
on Computer Systems (Belgrade, Serbia) (EuroSys â€™17). ACM, New York, NY, USA,
405â€“419. https://doi.org/10.1145/3064176.3064211
[27] Mark Yason. 2015. MemGC: Use-After-Free Exploit Mitigation in Edge and IE on
Windows 10. https://securityintelligence.com/memgc-use-after-free-exploit-
mitigation-in-edge-and-ie-on-windows-10/
[28] Yves Younan. 2015. FreeSentry: protecting against use-after-free vulnerabilities
due to dangling pointers. In NDSS.
12