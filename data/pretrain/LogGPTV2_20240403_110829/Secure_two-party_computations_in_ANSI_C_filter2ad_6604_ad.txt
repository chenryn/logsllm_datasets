### Hamming Distance Calculation

```c
void hammingDistance(void) {
    int tmp = 0;
    for (int i = 0; i < K; i++) {
        tmp += popcount32(a[i] ^ b[i]);
    }
    OUTPUT_hd = tmp;
}
```

**Figure 3: CBMC-GC Program for Computing the Hamming Distance Between Two Bit Arrays.**

In certain scenarios, it is desirable to consider an asymmetric situation where one party holds the function to be evaluated, and the other party holds the data on which the function should be applied. This is particularly relevant when the algorithm is considered the intellectual property of one party. In such cases, both parties can jointly evaluate the algorithm without revealing either the algorithm or the private input.

### Approaches to Asymmetric Secure Computation

Two different approaches to this problem have been reported in the literature:

1. **Universal Circuits:**
   - The first solution leverages the observation that code and data can be interchanged using universal programs (or interpreters).
   - Instead of directly evaluating the desired circuit, both parties run a universal circuit that takes as input a description of the program (in terms of a circuit) and the input.
   - Given that the size of the program is known to both parties, the garbled circuit technique can be straightforwardly applied to the universal circuit.
   - The asymptotic complexity of the universal circuit construction, given a secret program consisting of \( n \) Boolean gates, is \( O(n \log^2(n)) \).

2. **Direct Encryption of Circuits:**
   - A second solution, proposed in [23], involves encrypting the circuit directly while hiding the circuit topology.
   - This approach achieves an asymptotic complexity of \( O(n) \), but requires a large number of public key operations to garble the entire circuit.
   - Due to the potentially large size of the circuits, the required computational complexity may exceed typical computing resources. Unfortunately, no implementation is provided in [23] to experimentally verify this assumption.

### Implementing STC with Private Functions Using CBMC-GC

Solving the problem of secure two-party computation (STC) with private functions is surprisingly simple with CBMC-GC. One can write a simple interpreter in C to interpret a binary circuit of a given size. Below, we describe two such interpreters with different properties.

#### Interpreter 1

```c
#define CIRCUIT_SIZE 50
#define INPUT_SIZE 32

void interpreter_1() {
    _Bool INPUT_A_a[INPUT_SIZE];
    _Bool INPUT_B_b[INPUT_SIZE];
    _Bool INPUT_A_circuit_ops[2 * CIRCUIT_SIZE];
    short INPUT_A_circuit_left[CIRCUIT_SIZE];
    short INPUT_A_circuit_right[CIRCUIT_SIZE];
    _Bool results[CIRCUIT_SIZE + 2 * INPUT_SIZE];
    int i;

    for (i = 0; i < INPUT_SIZE; i++) {
        results[i] = INPUT_A_a[i];
    }
    for (i = INPUT_SIZE; i < 2 * INPUT_SIZE; i++) {
        results[i] = INPUT_B_b[i - INPUT_SIZE];
    }
    for (i = 2 * INPUT_SIZE; i < CIRCUIT_SIZE; i++) {
        results[i] = 0;
    }

    for (i = 0; i < CIRCUIT_SIZE; i++) {
        short left_index = INPUT_A_circuit_left[i];
        short right_index = INPUT_A_circuit_right[i];
        _Bool left_value = results[left_index];
        _Bool right_value = results[right_index];
        _Bool tmp = 0;

        if (INPUT_A_circuit_ops[2 * i] == 0) {
            if (INPUT_A_circuit_ops[2 * i + 1] == 0)
                tmp = left_value & right_value; // AND
            else
                tmp = left_value | right_value; // OR
        } else {
            if (INPUT_A_circuit_ops[2 * i + 1] == 1)
                tmp = !left_value; // NOT
            else
                tmp = left_value ^ right_value; // XOR
        }
        results[2 * INPUT_SIZE - 1 + i] = tmp;
    }

    _Bool OUTPUT_result = results[2 * INPUT_SIZE - 1 + CIRCUIT_SIZE];
}
```

**Figure 4: CBMC-GC Code for Interpreting Arbitrary Circuits.**

This interpreter takes as input a list of gates, where each gate is encoded with two bits representing the binary operation (AND, OR, XOR, NOT) and two additional integer values representing the indices of the operands. The result of each gate evaluation is stored in a separate array `results`.

#### Interpreter 2

```c
#define MEMORY_SIZE 3
#define INPUT_SIZE 32
#define CIRCUIT_SIZE 100

_Bool mem[INPUT_SIZE + MEMORY_SIZE];

typedef struct {
    _Bool opcode1;
    _Bool opcode2;
    short leftOperand;
    short rightOperand;
    short target;
} operation;

operation INPUT_A_ops[CIRCUIT_SIZE];
_Bool INPUT_B_mem[INPUT_SIZE];

void interpreter_2() {
    unsigned i = 0;
    _Bool opcode1 = 0, opcode2 = 0, result = 0;
    short lOp = 0, rOp = 0, target = 0;
    _Bool lOpValue = 0, rOpValue = 0;

    for (i = 0; i < INPUT_SIZE; i++) {
        mem[i] = INPUT_B_mem[i];
    }
    for (i = INPUT_SIZE; i < INPUT_SIZE + MEMORY_SIZE; i++) {
        mem[i] = 0;
    }

    for (i = 0; i < CIRCUIT_SIZE; i++) {
        opcode1 = INPUT_A_ops[i].opcode1;
        opcode2 = INPUT_A_ops[i].opcode2;
        lOpValue = mem[INPUT_A_ops[i].leftOperand];
        rOpValue = mem[INPUT_A_ops[i].rightOperand];
        target = INPUT_A_ops[i].target;

        if (opcode1) {
            if (opcode2)
                result = lOpValue & rOpValue;
            else
                result = lOpValue | rOpValue;
        } else {
            if (opcode2)
                result = lOpValue ^ rOpValue;
            else
                result = !lOpValue;
        }
        mem[target] = result;
    }

    _Bool OUTPUTmem[MEMORY_SIZE];
    for (i = 0; i < MEMORY_SIZE; i++) {
        OUTPUTmem[i] = mem[INPUT_SIZE + i];
    }
}
```

**Figure 5: CBMC-GC Code for Interpreting Circuits with Bounded Memory.**

This interpreter uses a small constant scratch memory to hold intermediate results, similar to a standard RAM. The memory initially holds the parties' input values and is updated during the computation.

### Conclusion and Future Work

This paper demonstrates that secure two-party computation can be realized for ANSI C programs, which is an important step towards practical use. Our experiments show good performance, and we expect further improvements through collaboration between programming language and compiler communities. We reused the CBMC tool chain for software model checking, providing a tight coupling between tools for STC and verification of code correctness. Future work will include full support for pointer arithmetic and floating-point arithmetic, integration with other STC implementations, and direct verification of circuits.

### Acknowledgments

This work was supported by the Austrian National Research Network S11403-N23 (RiSE) of the Austrian Science Fund (FWF), the Vienna Science and Technology Fund (WWTF) grant PROSEED, and CASED.

### References

[1] VIFF, the Virtual Ideal Functionality Framework. http://viff.dk/.

[2] T. Ball, R. Majumdar, T. Millstein, and S. K. Rajamani. Automatic Predicate Abstraction of C Programs. In Proceedings of the ACM SIGPLAN 2001 Conference on Programming Language Design and Implementation, PLDI ’01, pages 203–213. ACM Press, 2001.

[3] M. Barni, P. Failla, V. Kolesnikov, R. Lazzeretti, A.-R. Sadeghi, and T. Schneider. Secure Evaluation of Private Linear Branching Programs with Medical Applications. In Proceedings of the 14th European Conference on Research in Computer Security, ESORICS’09, pages 424–439. Springer, 2009.

[4] A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: A System for Secure Multi-Party Computation. In Proceedings of the 15th ACM Conference on Computer and Communications Security, CCS ’08, pages 17–21. ACM, 2008.

[5] D. Beyer, T. A. Henzinger, R. Jhala, and R. Majumdar. The software model checker Blast: Applications to software engineering. International Journal on Software Tools for Technology Transfer, 9(5-6):505–525, October 2007.

[6] A. Biere, A. Cimatti, E. M. Clarke, and Y. Zhu. Symbolic Model Checking without BDDs. In Proceedings of the 5th International Conference on Tools and Algorithms for Construction and Analysis of Systems, TACAS ’99, pages 193–207. Springer, 1999.

[7] A. Biere, M. Heule, H. van Maaren, and T. Walsh, editors. Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications. IOS Press, 2009.

[8] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A Framework for Fast Privacy-Preserving Computations. In Proceedings of the 13th European Symposium on Research in Computer Security: Computer Security, ESORICS ’08, pages 192–206. Springer, 2008.

[9] P. Bogetoft, I. Damgård, T. Jakobsen, K. Nielsen, J. Pagter, and T. Toft. A Practical Implementation of Secure Auctions Based on Multiparty Integer Computation. In Proceedings of the 10th International Conference on Financial Cryptography and Data Security, FC ’06, pages 142–147. Springer, 2006.

[10] E. Clarke, D. Kroening, and F. Lerda. A Tool for Checking ANSI-C Programs. In Proceedings of the 10th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS ’04, pages 168–176. Springer, 2004.

[11] E. Clarke, D. Kroening, and K. Yorav. Behavioral Consistency of C and Verilog Programs using Bounded Model Checking. In Proceedings of the 40th annual Design Automation Conference, DAC ’03, pages 368–371. ACM, 2003.

[12] E. Clarke, D. Kroening, and K. Yorav. Behavioral Consistency of C and Verilog Programs using Bounded Model Checking. Technical Report CMU-CS-03-126, Carnegie Mellon University, School of Computer Science, 2003.

[13] E. M. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Counterexample-Guided Abstraction Refinement. In Proceedings of the 12th International Conference on Computer Aided Verification, CAV ’00, pages 154–169. Springer, 2000.

[14] P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Miné, D. Monniaux, and X. Rival. The ASTRÉE analyzer. In Proceedings of the 14th European Conference on Programming Languages and Systems, ESOP ’05, pages 21–30. Springer, 2005.

[15] R. Cramer, I. Damgård, and J. B. Nielsen. Multiparty Computation from Threshold Homomorphic Encryption. In Proceedings of the International Conference on the Theory and Application of Cryptographic Techniques: Advances in Cryptology, EUROCRYPT ’01, pages 280–299, 2001.

[16] Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser, I. Lagendijk, and T. Toft. Privacy-Preserving Face Recognition. In Proceedings of the 9th International Symposium on Privacy Enhancing Technologies, PETS ’09, pages 235–253. Springer, 2009.

[17] M. K. Ganai, A. Gupta, and P. Ashar. DiVer: SAT-Based Model Checking Platform for Verifying Large Scale Systems. In Proceedings of the 11th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS’05, pages 575–580. Springer, 2005.

[18] B. Goethals, S. Laur, H. Lipmaa, and T. Mielikäinen. On Private Scalar Product Computation for Privacy-Preserving Data Mining. In Proceedings of the 7th International Conference on Information Security and Cryptology, ICISC’04, pages 104–120. Springer, 2004.

[19] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: Tool for Automating Secure Two-partY computations. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 451–462. ACM, 2010.

[20] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster Secure Two-Party Computation Using Garbled Circuits. In Proceedings of the 20th USENIX Security Symposium, USENIX ’11, 2011.

[21] G. Jagannathan and R. N. Wright. Privacy-Preserving Distributed k-Means Clustering over Arbitrarily Partitioned Data. In Proceedings of the eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, KDD ’05, pages 593–599. ACM, 2005.

[22] A. Karatsuba and Y. Ofman. Multiplication of Many-Digital Numbers by Automatic Computers. In Doklady Akad. Nauk SSSR, Vol. 145, Translation in Physics-Doklady, 7 (1963), pp. 595–596, 1962.

[23] J. Katz and L. Malka. Constant-Round Private Function Evaluation with Linear Complexity. In Proceedings of the 17th International Conference on the Theory and Application of Cryptology and Information Security, ASIACRYPT ’11, pages 556–571. Springer, 2011.

[24] V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved Garbled Circuit Building Blocks and Applications to Auctions and Computing Minima. In Proceedings of the 8th International Conference on Cryptology and Network Security, CANS ’09, pages 1–20. Springer, 2009.

[25] V. Kolesnikov and T. Schneider. A Practical Universal Circuit Construction and Secure Evaluation of Private Functions. In Proceedings of the 12th International Conference on Financial Cryptography and Data Security, FC ’08, pages 83–97. Springer, 2008.

[26] V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. In Proceedings of the 35th International Colloquium on Automata, Languages and Programming, Part II, ICALP ’08, pages 486–498. Springer, 2008.

[27] Y. Lindell and B. Pinkas. A Proof of Security of Yao’s Protocol for Two-Party Computation. Journal of Cryptology, 22:161–188, April 2009.

[28] L. Malka. VMCrypt: Modular Software Architecture for Scalable Secure Computation. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS ’11, pages 715–724. ACM, 2011.

[29] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — A Secure Two-Party Computation System. In Proceedings of the 13th Conference on USENIX Security Symposium, SSYM’04, pages 20–20. USENIX Association, 2004.

[30] B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams. Secure Two-Party Computation Is Practical. In Proceedings of the 15th International Conference on the Theory and Application of Cryptology and Information Security: Advances in Cryptology, ASIACRYPT ’09, pages 250–267. Springer, 2009.

[31] A. C.-C. Yao. Protocols for Secure Computations (Extended Abstract). In Proceedings of the 23rd Annual Symposium on Foundations of Computer Science, FOCS ’82, pages 160–164. IEEE Computer Society, 1982.

[32] A. C.-C. Yao. How to Generate and Exchange Secrets. In Proceedings of the 27th Annual Symposium on Foundations of Computer Science, FOCS ’86, pages 162–167. IEEE Computer Society, 1986.