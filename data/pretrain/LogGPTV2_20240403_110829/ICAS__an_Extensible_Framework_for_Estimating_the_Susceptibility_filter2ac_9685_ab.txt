and/or wiring into an existing design. Substitution Trojans
require removing logic with low observability to make room
for additional Trojan circuit components and/or wiring in an
existing circuit design. Lastly, subtractive Trojans require re-
moving circuit components and/or wiring to alter the behavior
of a existing circuit design. The focus of this paper is estimat-
ing the susceptibility of a circuit layout to additive Trojan
attacks. Substitution and subtractive Trojans, while intriguing,
remain largely unexplored by the community. We do not know
of any demonstrably stealthy and controllable substitution or
subtractive Trojans and when researchers do create such an
attack, there exists orthogonal mitigation strategies [31].
Inserting an additive Trojan at an untrusted foundry requires
modifying two fundamental characteristics of an IC’s physical
layout—placement and routing—regardless of how an attacker
implements the Trojan’s trigger and payload. We deﬁne Tro-
jan placement to be the act of placing additional hardware
components into an IC layout for the purpose of crafting
a Trojan trigger and payload, Victim/Trojan integration to
be wiring the Trojan’s payload to, or in the vicinity, of a
security-critical net in the victim IC layout, and intra-Trojan
routing to be the act of wiring the hardware Trojan together.
The most challenging aspect of inserting a hardware Trojan
at fabrication-time is ﬁnding empty space on the IC’s device
layer to insert the trigger and payload components (Trojan
placement), AND routing the payload to a security-critical net
(Victim/Trojan integration). ICAS estimates each of these
fundamental tasks, in turn identifying weak points in the IC
layout that an attacker might exploit.
III. THREAT MODEL
in 2005,
We adopt a threat model for untrusted foundry attacks
that assumes all steps in the IC design process can be
trusted, except for all of the processes—no matter if they
are outsourced—performed by a foundry (colloquially, fabri-
cation). Figure 1 depicts our threat model. This entails that
the RTL is designed, synthesized, and laid-out by trusted
parties. Post fabrication testing is also performed by a trusted
party. We adopt
this threat model since the astronomical
costs to fabricate ICs force most semiconductor companies
to outsource fabrication. To this point,
the U.S.
government identiﬁed the untrusted foundry threat as the most
signiﬁcant weakness of the microelectronics supply chain [32].
to fabrication-time attacks
involving additive Trojans,
i.e., hardware Trojans that re-
quire inserting additional circuitry into a physical IC design.
Previous work on substitution/subtractive hardware Trojans
shows that such Trojan insertion methods are addressable by
measuring the controllability and observability of logic at the
behavioral and/or structural level of the IC design, for which
several methods have already been proposed [17], [21], [22],
[33]–[35]. Orthogonally, this work ﬁlls the void of quantifying
the susceptibility of an IC design to additive hardware Trojan
insertion at the physical level of the IC design process by an
untrusted foundry.
We restrict our threat model
Focusing on additive hardware Trojans, an adversary can
only insert additional components/wires. They cannot increase
the size of the chip to make additional room for the implants
because this is readily caught by defenders. As a result, an
attacker has two choices: ﬁnd open space in the design large
enough to accommodate the additional circuitry, or create open
space in the design by moving circuitry around. The latter is
extremely challenging due to its recursive nature, it runs the
risk of violating fragile timing constraints and manufacturing
design rules, and it
increases fabrication turnaround time
(which is usually set to three months); any of which could
expose the Trojan. Therefore, our focus is identifying open
spaces suitable for hardware Trojan implementation.
IV. UNTRUSTED FOUNDRY DEFENSES
To protect IC layouts against insertion of a hardware Trojan
by attackers at an untrusted foundry, two classes of defenses
exist: undirected and directed. Undirected defenses leverage
existing tuning knobs available during the IC layout process,
but do not differentiate between security-critical and general-
purpose wires and logic. Thus, undirected approaches provide
probabilistic protection. On the other hand, directed defenses
require augmenting existing PaR tool ﬂows to harden the
resulting IC layout, focusing on deploying defenses systemat-
ically around security-critical wires and logic. Thus directed
approaches provide targeted protection, but increase the com-
plexity of the place-and-route process.
This section provides an overview of the landscape of
undirected and directed defenses. The focus is the mechanism
each defense uses to increase the complexity faced by a
foundry-level attacker. We use the results of the defensive
analysis in this section to develop a set of unifying coverage
metrics in the next section. Finally, in the evaluation, we
evaluate commercial IC layouts using the defense-inspired
metrics to quantify each defense’s coverage.
A. Undirected
The lowest cost approach for protecting an IC layout from a
foundry-level attacker is to take advantage of existing physical
layout parameters (e.g., core density, clock frequency, and max
transition time) offered by commercial CAD tools [15]. The
goal is to increase congestion across the component layer
and the routing layer. Ideally, this also results in increased
congestion around security-critical logic and wires. Practically,
increases in congestion around security-critical logic and wires
is probabilistic.
Increased congestion is a symptom of increased resource
utilization; hence, there are fewer resources available to the
attacker. The most obvious resource that an attacker cares
about are placement sites on the component layer. Increasing
the density, decreases unused placement sites. Without suf-
ﬁcient placement sites, the attacker cannot implement their
Trojan logic. A less obvious resource is attachment points on
security-critical wires that serve as victim/Trojan integration
points. Increasing routing layer congestion (via density and/or
timing constraints) increases the blockage around security-
critical wires, meaning there are less integration points.
B. Directed
To address the shortcoming of undirected approaches, recent
defenses advocate focusing on security-critical logic and wires.
Speciﬁcally, the approaches aim to prevent the attacker from
being able to implement their hardware Trojan by occupy-
ing unused placement sites (i.e., transistors) [13], [16]. The
challenge is that the ﬁller cells used by these defenses must
be tamper-evident, i.e., a defender must be able to detect if
an attacker removed ﬁller cells to implement their Trojan.
Previous work shows that ﬁlling the entire component layer
with tamper-evident ﬁller cells (e.g. [15]) is infeasible due to
routing congestion [16]. To make routing feasible, the most
recent placement-centric defense focuses on ﬁlling the unused
placement sites nearest security-critical logic ﬁrst [13], [16].
Such placement-centric defenses increase the complexity
faced by the attacker in two ways. First, it is harder for
the attacker to ﬁnd contiguous unused placement sites to
implement their Trojan’s logic. Second, an indirect compli-
cation is increased intra-Trojan routing complexity. The more
distributed the attacker’s placement sites, the more long (i.e.,
uses upper routing layers) routes the attacker must create.
Additionally, since the unused placement sites are far away
from security critical logic, the attacker must make a longer,
more complex, route to connect their hardware Trojan to the
victim security-critical wire.
V. UNIFIED ATTACK METRICS
Drawing from existing untrusted foundry defenses, we cre-
ate an extensible set of IC layout attack metrics. We unify
the objectives of existing defenses by decomposing the act of
inserting a hardware Trojan into ICs at an untrusted foundry
into three fundamental tasks and corresponding metrics:
1) Trojan logic placement: Trigger Space
2) Victim/Trojan integration: Net Blockage
3) Intra-Trojan routing: Route Distance
These tasks and accompanying metrics are the foundation
for our methodology of assessing defensive coverage of an
IC layout against an untrusted foundry. We implement our
methodology as ICAS.
A. Challenges of Trojan Placement
The ﬁrst phase of mounting a fabrication-time attack is
Trojan placement. This requires locating unused placement
sites on the placement grid to insert additional circuit com-
ponents. While prior work [13], [15], [16] employs the notion
of limiting the quantity of unused placement sites as a defense
against fabrication-time attacks, how can we characterize
unused placement sites to gain insight into the feasibility of a
fabrication-time attack on a given IC layout?
Only 60–70% of the placement cites are occupied in a
typical IC layout to allow space for routing [6]. To facilitate
intra-Trojan routing, an attacker prefers open placement sites
form contiguous (adjacent) regions. This allows the attacker
to drop-in a pre-designed Trojan, or if one had not been pre-
designed, it minimizes the intra-Trojan routing complexity by
conﬁning the intra-Trojan routing to the lowest routing layers,
i.e., reducing the jumping and jogging of nets. Such adjacency
is classiﬁed in image processing as “4-connected”. There-
fore, a key factor that determines the difﬁculty of mounting
fabrication-time attacks is the difﬁculty of inserting additional
circuit components into a ﬁnalized IC design. We rank this
difﬁculty in increasing order as follows.
1) Trivial: the Trojan components ﬁt within a single con-
tiguous group of 4-connected placement sites.
2) Difﬁcult: the Trojan components must be split across
multiple contiguous groups of 4-connected placement
sites. The more placement site groups required, the more
difﬁcult intra-Trojan routing becomes.
3) Not Possible: the total area required by the hardware
Trojan exceeds that of available placement sites.
Figure 4 illustrates these difﬁculty levels. The susceptibility
of an IC design to fabrication-time attack can therefore be
Fig. 4. Assume an attacker is attempting to insert 6 additional Trojan
components that consume a total of 9 placement sites (as shown). If inserting
these components on the Trivial placement grid (left), they can be placed
adjacent to each other to simplify intra-Trojan routing. If inserting these
components on the Difﬁcult placement grid (middle), they must be scattered
across the grid, making intra-Trojan routing more challenging. The Not
Possible placement grid (right) does not have enough empty placement sites
to accommodate the Trojan components.
partially quantiﬁed by the size and number of contiguous open
sites on the placement grid. This is the basis for ICAS’ Trigger
Space metric.
B. Challenges of Victim/Trojan Integration
Routing the Trojan payload to the targeted security-critical
net requires the attacker to locate the nets of interest in the IC
layout. We assume the worst case: the attacker has knowledge
of all security-critical nets in the design, particularly, the nets
they are trying to extract information from or inﬂuence. An
example of such a net in the OR1200 processor [36] is the
net
that holds the privilege bit. The attacker can acquire
this knowledge either through a design-phase co-conspirator
or through advanced reverse-engineering techniques [6]. No
matter how the attacker gains this information, we assume
they have it with zero additional effort.
We extend this threat to include nets that inﬂuence security-
critical nets. To increase stealth, an attacker could also trace
backwards from the targeted security-critical net,
through
logic gates, to identify nets that inﬂuence the value of the
targeted security-critical net. This is called the fan-in of the
targeted net. By connecting in this way, the attacker sacriﬁces
controllability for stealth as their circuit modiﬁcation is now
physically separated from the security-critical net. To gain
back controllability, attackers must create a more complex
(hence larger) trigger circuit—decreasing the Trigger Space
score, as well as increasing the likelihood of visual and/or
side-channel detection. This trade-off limits how many levels
back the attacker can integrate their payload.
No matter if the attacker is attacking the targeted security-
critical wire directly or indirectly, the attacker must attach to
some victim wire or route directly adjacent to it. Since an
IC layout is three-dimensional, it is possible for the attacker
to attach to any open point on the victim wire, either on
the same layer (i.e., North, South, East, West) or from an
adjacent layer (i.e., above or below). In the worst case, there
are no other nets blocking the attacker from attaching to the
targeted security-critical net or its N-level-deep inﬂuencers. In
the best case, all attachment points are blocked by other nets.
regarding routing. We classify these as component design rules
and routing design rules, respectively. As technology nodes
shrink, both rule sets are becoming increasingly complex [38].
It is vital for an attacker to comply with these design rules as
violating them risks exposure. If an attacker inserts additional
logic gates (standard cells) by making copies of existing com-
ponents in a design, they can avoid violating component design
rules involved with Trojan placement. However, to connect
a wire from the Trojan payload to security-critical
target
net(s), they must perform custom Trojan routing. Therefore,
complying with routing design rules is a concern. Routing
design rules include speciﬁcations for the minimum distance
between two nets on a speciﬁc routing layer, the minimum
width of nets on a given layer, etc. Complying with these
rules becomes easier for an attacker if security-critical net(s)
are not blocked by other wires or components. The higher
the Net Blockage score, the more difﬁcult it is to make a
connection, the more complex—and error prone—the route.
2) Meeting Timing Requirements: Every wire in an IC
has a resistance and a capacitance, making it behave like an
RC circuit, i.e., there is a time delay associated with driving
the wire high (logic 1) or low (logic 0). The longer the
wire, the more time delay there is [39]. If the security-critical
net(s) has timing constraints (e.g., setup and hold times) that
dictate when the payload signal must arrive for the attack to
be successful, the Trojan routing must meet these constraints.
Furthermore, the farther the security-critical net is from the
payload circuit, the more obstacles that must be routed around,
increasing the routing distance even further. This is the basis
for ICAS’ Route Distance metric. A natural limit for Route
Distance is dictated by the clock frequency of the victim
circuit, as most attacks must operate synchronously with their
victim.
VI. EXTENSIBLE COVERAGE ASSESSMENT FRAMEWORK
The ICAS framework is comprised of two tools, Nemo
and GDSII-Score, as shown in Figure 6. Nemo identiﬁes