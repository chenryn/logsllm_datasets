# Crocus: A Steganographic Filesystem Manager

**Author:** Hioki Hirohisa  
**Affiliation:** Center for Promotion of Excellence in Higher Education, Kyoto University  
**Address:** Yoshida-Nihonmatsu-cho, Sakyo-Ku, Kyoto, 606-8501, Japan  
**Email:** [Your Email Address]

## Abstract
Cryptographic filesystems are widely used to protect private files, but they do not conceal the existence of such files. Steganographic filesystems address this issue by embedding files imperceptibly into containers. However, most existing steganographic filesystems use apparently randomized containers, which may raise suspicion. This paper introduces Crocus, a new steganographic filesystem manager that embeds a filesystem piece by piece into a set of innocent-looking containers. The filesystem can be reconstructed, resized, or destroyed as needed. Using multiple containers allows for the construction of large filesystems. A prototype system for Linux has been developed, and preliminary experiments indicate the effectiveness of Crocus.

## Categories and Subject Descriptors
D.2.11 [Software Engineering]: Software Architectures | Information Hiding

## General Terms
Design

## Keywords
Filesystem Manager, Steganography

## 1. Introduction
Cryptographic filesystems are widely used to protect private files by making them unreadable. However, the presence of encrypted files is still evident. Steganographic filesystems [1, 3, 4, 6, 7, 8, 9] aim to hide files imperceptibly within containers such as disk partitions or files, making the files appear to disappear from local disks.

In most proposed steganographic filesystems, files are hidden in containers that appear randomized and are logically divided into multiple layers. This property, known as plausible deniability, allows users to disclose only a decoy layer containing non-sensitive files while keeping more sensitive layers secret. However, the presence of seemingly randomized volumes may raise suspicion.

Steganography involves hiding secrets behind something else to camouflage their existence. Common containers with their own contents should be used. Many steganographic methods have been proposed for embedding secrets into graphical images, sounds, and texts [5, 8]. However, these methods are limited to a single container, restricting the size of the filesystems that can be built.

This paper presents Crocus, a new steganographic filesystem manager. Crocus is an evolution of AshFS [4] and allows the embedding of a filesystem into a set of innocent-looking containers piece by piece. The filesystem can be reconstructed, resized, or destroyed as needed. Using multiple containers enables the construction of large filesystems, a key feature for building steganographic filesystems that do not rely on randomized volumes.

Although AshFS was designed under a similar framework, it has limitations in the number of containers per filesystem and does not support resizing. Crocus overcomes these limitations by allowing flexible selection of containers from different filesystems.

A prototype system of Crocus has been developed for Linux, and preliminary experiments have shown the effectiveness of the framework.

The rest of the paper is organized as follows: Section 2 presents the basic concepts of Crocus. Section 3 outlines the prototype system. Section 4 shows the experimental results, and Section 5 concludes the paper with directions for future work.

## 2. Basic Concepts
This section introduces the fundamental concepts of Crocus, including the overview of filesystem management methods, the payload embedding procedure, and the method for finding the layout of containers of a hidden filesystem.

### 2.1 Filesystem Management Methods
Crocus can create, open, close, resize, or destroy filesystems under its control. Figure 1 illustrates the filesystem model under Crocus, where the private filesystem represents a filesystem managed by Crocus.

![Figure 1: The filesystem model under Crocus](figure1.png)

Various files can be used as containers, and different types of containers are processed uniformly through the Virtual Steganographic Interface Module (VSIM). When a container is given to VSIM, it selects an appropriate steganographic engine for the container. Steganographic engines are registered with Crocus as plugins for VSIM and directly interact with containers for embedding or extracting payloads.

A file is accepted as a container if a suitable steganographic engine is registered and its capacity exceeds a predetermined threshold \( VT \).

To create a new filesystem, users provide containers and a password to Crocus. Crocus then requests the operating system to build a new filesystem image within a regular file and mount it. The size of the image is determined by the total capacity of the containers. Multiple containers can be allocated to a single filesystem, allowing for the creation of large filesystems.

While the filesystem is mounted, it is fully operated by the operating system, and files can be read or written as usual. A mounted filesystem is in the active state.

Closing a filesystem transitions it to the hidden state. Crocus unmounts the filesystem, embeds the filesystem image piece by piece into the containers, randomizes and deletes the file holding the filesystem image. The filesystem becomes imperceptible and temporarily unavailable. The imperceptibility depends on the steganographic engines.

To open a hidden filesystem, all pieces are extracted from the containers, and the filesystem image is reconstructed. Once reconstructed, the filesystem can be mounted and used. The reconstruction process requires knowledge of the containers and their arrangement, which is addressed in Section 2.3.

Resizing existing filesystems is possible by adding or removing containers. Shrinking is performed only when the filesystems are not damaged.

Hidden filesystems can be destroyed by filling all containers with dummy payloads, completely wiping out the filesystem and its contents.

### 2.2 Payload Embedding Procedure
On embedding, a payload is passed to VSIM from the filesystem. VSIM selects the appropriate steganographic engine based on the container type and embeds the payload. The details of this process will be discussed in the following sections.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.