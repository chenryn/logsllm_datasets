title:Crocus: a steganographic filesystem manager
author:Hioki Hirohisa
Crocus: A Steganographic Filesystem Manager
Center for Promotion of Excellence in Higher Education, Kyoto University
Yoshida-Nihonmatsu-cho, Sakyo-Ku, Kyoto, 606-8501, Japan
HIOKI Hirohisa
PI:EMAIL
ABSTRACT
Cryptographic ﬂlesystems are widely used to protect pri-
vate ﬂles. It is, however, impossible to hide the existence
of private information by such ﬂlesystems. Steganographic
ﬂlesystems attempt to address this problem by embedding
ﬂles imperceptibly into containers. In most steganographic
ﬂlesystems ever proposed, ﬂles are embedded into contain-
ers those apparently randomized. Their existence would,
however, imply that they include hidden ﬂles. This pa-
per presents a new steganographic ﬂlesystem manager called
Crocus. When a ﬂlesystem is to be hidden, it is embedded
separately into a set of innocent-looking containers piece by
piece. When the ﬂlesystem is to be used later, it is re-
constructed from the pieces. We can resize or destruct the
ﬂlesystem if required. Since more than one containers can be
used for one ﬂlesystem, we can build ﬂlesystems those large
enough. A prototype system of Crocus has been developed
for Linux and a preliminary experiment was performed. The
result indicates the eﬁectiveness of the framework of Crocus.
Categories and Subject Descriptors
D.2.11 [Software Engineering]: Software Architectures|
information hiding
General Terms
Design
Keywords
Filesystem manager, Steganography
1.
INTRODUCTION
Cryptographic ﬂlesystems are widely used to protect pri-
vate ﬂles. We can make ﬂles unreadable by storing them in
such ﬂlesystems; but even so, it is still evident that we have
unreadable encrypted ﬂles. Steganographic ﬂlesystems[1, 3,
4, 6, 7, 8, 9] attempt to address this problem by embed-
ding ﬂles imperceptibly into containers like disk partitions
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
or ﬂles. The ﬂles embedded there apparently disappear from
the local disks.
In most steganographic ﬂlesystems ever proposed, ﬂles
are hidden in containers those apparently randomized and
logically divided into more than one layers. This type of
steganographic ﬂlesystem is said to have the property of
plausible deniability. Assume that we are threatened to dis-
close all the hidden ﬂles under a ﬂlesystem. In such a case,
we can open a decoy layer that includes only not-really sen-
sitive ﬂles and say we have disclosed all. The more sensitive
layers are then kept secret, since the threatener cannot know
whether such layers exist from outside. This model of plau-
sible deniability is indeed useful.
It is, however, unusual
that we have randomized volumes those not used for any
purpose. Their existence might arise suspicion that they
include hidden ﬂles.
Steganography literally means the technique of hiding se-
crets behind something else that camou(cid:176)age their existence.
In this sense, we should use common containers with their
own contents. Many steganographic methods have been pro-
posed for embedding secret stuﬁ into containers like graphi-
cal images, sounds and texts[5, 8]. Unfortunately, they work
only for a single container, which limits severely the sizes of
ﬂlesystems we can build.
This paper presents a new steganographic ﬂlesystem man-
ager called Crocus.
It is a descendant of AshFS[4]. Cro-
cus allows us to embed one ﬂlesystem separately into a set
of innocent-looking containers piece by piece. When the
ﬂlesystem is to be used, it is reconstructed from the pieces.
We can resize or destruct ﬂlesystems if required.
Since more than one containers can be used for embedding
one ﬂlesystem, we can build ﬂlesystems those large enough.
This framework is a key feature for constructing stegano-
graphic ﬂlesystems those not based on randomized volumes.
Although AshFS has been designed under the same frame-
work, the number of containers that can be assigned to one
ﬂlesystem is actually limited. The (cid:176)exibility of AshFS is
also limited in the sense that ﬂlesystems managed under it
are not resizable. The containers should be selected from a
single ﬂlesystem in AshFS, while Crocus is not subject to
such a limitation.
A prototype system of Crocus has been developed for
Linux. A preliminary experiment was performed on the pro-
totype system. The result indicates the eﬁectiveness of the
framework of Crocus.
The rest of this paper is organized as follows. Section 2
presents the basic concepts of Crocus. Section 3 outlines
the prototype system. The experimental result is shown
344
in Section 4. Finally, Section 5 concludes this paper with
directions of future work.
2. BASIC CONCEPTS
This section presents the basic concepts of Crocus. The
overview of ﬂlesystem management methods is given ﬂrst.
Next, the procedure for embedding payloads (pieces of a
ﬂlesystem image and others) is described. We will then see
how to ﬂnd the layout of containers of a hidden ﬂlesystem.
2.1 Filesystem Management Methods
Figure 1: The ﬂlesystem model under Crocus
Crocus can create, open, close, resize or destroy ﬂlesys-
tems those under its control. Figure 1 shows the ﬂlesystem
model under Crocus. The private ﬂlesystem in the ﬂgure
represents a ﬂlesystem managed by Crocus.
We can use various ﬂles as containers. Diﬁerent types of
container are processed in a uniform way through the virtual
steganographic interface module (VSIM). When a container
is given to VSIM, it selects an appropriate steganographic
engine for the container. Steganographic engines are regis-
tered with Crocus as plugins for VSIM. They directly inter-
act with containers for embedding or extracting payloads.
A ﬂle is accepted as a container when a suitable stegano-
graphic engine is registered and its capacity is larger than a
predetermined threshold VT .
We can create a new ﬂlesystem by giving containers and
a password to Crocus. Crocus then requests the system OS
to build a new ﬂlesystem image within a regular ﬂle and to
mount it1. The size of the image is computed from the total
capacity of the containers. Since we can allocate more than
one containers for one ﬂlesystem, we can make a ﬂlesystem
as large as we like if we can provide enough containers and
have a space to write the ﬂle holding its image.
While a ﬂlesystem is mounted, it is fully operated by the
system OS. We can thus read or write ﬂles stored there as
usual. A ﬂlesystem which is mounted is said to be in the
active state.
Closing a ﬂlesystem brings it to the hidden state. Crocus
requests the system OS to unmount it ﬂrst. Right after it
is unmounted, the ﬂlesystem image is embedded separately
into containers piece by piece. The ﬂle holding the ﬂlesystem
image is then randomized and deleted2. The ﬂlesystem now
becomes imperceptible (and temporarily unavailable). Note
that the imperceptibility of the hidden ﬂlesystem depends
on the steganographic engines.
We can open the hidden ﬂlesystem later to bring it back
to the active state and use it again. On opening the hidden
ﬂlesystem, all the pieces are extracted from the containers
and the ﬂlesystem image is reconstructed from them. Once
the ﬂlesystem image is reconstructed, we are ready to mount
and use it. In order to perform this reconstruction, we must
know how to ﬂnd the containers and how to arrange them.
This problem is addressed in Section 2.3.
It is possible to resize existing ﬂlesystems by adding or
removing containers. Shrinking is performed only when
ﬂlesystems are not damaged.
We can destroy hidden ﬂlesystems to wipe out them. De-
struction is performed (without deleting containers) by ﬂll-
ing all the containers with dummy payloads steganographi-
cally. Since the ﬂlesystem image is destroyed completely, not
only the ﬂles in the hidden ﬂlesystem but also the ﬂlesystem
itself is revoked.
2.2 Payload Embedding Procedure
On embedding, a payload is passed to VSIM from the