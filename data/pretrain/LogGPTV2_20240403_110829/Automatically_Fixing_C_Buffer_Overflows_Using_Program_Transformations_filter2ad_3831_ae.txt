28/39
(71.8%)
72/115
(62.6%)
1/2
(50%)
0
0
1
0
8
0
6
0
4
0
2
0
strcpy
strcat
sprintf
vsprintf
memcpy
Function
Fig. 2. Changes in Unsafe Functions by SLR
the runtime overhead of the transformations. In practice,
this was happening in only one case and could be ignored.
(3) In one other case, the buffer pointer was part of an array of
buffers. We could not handle it because we do not support
shape analysis on arrays.
(4) There was a single case where the deﬁnition of the buffer
was the result of a ternary expression which contained heap
allocation in both branches. This is an easy structural ﬁx.
We ignored it because it happened only once in 300 tests.
STR was applied to all char pointers in local scope, i.e.,
declared within a function. There were 296 candidates in
the test programs. Of these 296 candidates, 59 were used
in a potentially unsafe manner in user deﬁned functions. We
perform an inter-procedural analysis of pointers used in user
deﬁned functions. SAFE TYPE REPLACEMENT replaces the
pointer when the it is not written to inside the user deﬁned
funciton. If it is, a detailed message is printed to the log
explaining to the user exactly why the transformation could
not be completed. The remaining 237 char pointers passed the
preconditions of STR (shown as ‘Buffers Replaced’ in Table
VI); these were locally declared and used. STR replaced all
237 char pointers (100%). Table VI summarizes the results.
TABLE VI.
RUNNING STR ON TEST PROGRAMS
#%+!
.+
.+1(

.+
$!"
1#7&1
$!"
 :+.1
(
(
$!"4+#
71#+""
!.17#7
(
$!"
 :+.1
(
$!"4+#
+""1!.17#7
 :+.1
(

























For all our transformations, we ran make test to run the
test suite for the programs. The results were the same for
before and after programs. Our transformations did not break
or change the functionality when executing unit tests.
C. RQ3: Effect on Performance
Our program transformations ﬁx buffer overﬂows, but
they may have performance overhead. We measured overhead
using the open source programs in our corpus. We modiﬁed
the programs after applying SLR and STR on all possible
132132132
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
)
c
e
s
(
e
m
T
i
6
0
.
0
5
0
.
0
4
0
.
0
3
0
.
0
2
0
.
0
1
0
.
0
0
0
.
0
Original
After SLR
OV=4.59% OV=3.01% OV=3.60% OV=1.22%
Original
After STR
OV=7.47% OV=7.88%
OV=9.66% OV=12.70%
)
c
e
s
(
e
m
T
i
0
2
5
1
0
1
5
0
−O0
−O1
−O2
Optimization Level
−O3
−O0
−O1
−O2
Optimization Level
−O3
)
c
e
s
(
e
m
T
i
0
1
.
0
8
0
.
0
6
0
.
0
4
0
.
0
2
0
.
0
0
0
.
0
Original
After STR
OV=3.37%
OV=5.38% OV=7.58% OV=18.83%
−O0
−O1
−O2
Optimization Level
−O3
Fig. 3.
libpng Perf. After SLR
OV=Percentage Overhead
Fig. 4. LibTIFF Perf. After STR
OV=Percentage Overhead
Fig. 5.
zlib Perf. After STR
OV=Percentage Overhead
targets. Each program (before and after) was compiled with
no optimization and then enabling optimization ﬂags (-O1, -
O2 and -O3). We ran the test suite accompanying the programs
100 times and averaged the runtimes to collect the performance
numbers. Our test results show that neither the STR transfor-
mation nor the SLR transformation signiﬁcantly altered the
runtime of the programs tested. We discuss the runtime results
of three programs.
Performance Overhead of SLR. SLR was tested on
libpng and LibTIFF, since these had a lot of changes (Table
V). Figure 3 shows the performance numbers for libpng. There
is no noticeable performance change after the transformation.
This makes sense because SLR replaces functions with safer
alternatives whose behavior matches the original function as
closely as possible. The authors of strlcpy family of functions
also reported minimal overhead [45].
For libpng, the transformed version took 4.59% longer to
run than the original when compiled with ﬂag -O0, 3.01%
longer when compiled with -O1, 3.60% longer when compiled
with -O2, and 1.22% longer when compiled with -O3. The tests
were run on a ThinkPad laptop with an Intel Core i5-3210M
2.50GHz x 4 CPU, 3.6GB of RAM, and Ubuntu 12.04 LTS
operating system. We used gcc-4.2 to compile.
Performance Overhead of STR. STR performance was
tested on three software, libpng, zlib, and LibTIFF. libpng
and zlib had few changes, but
they were executed inside
hot loops. On the other hand, LibTIFF had a lot of changes
(Table VI). Figures 4 and 5 show the performance numbers for
LibTIFF and zlib. The overhead from applying the the STR
transformations is relatively low.
After applying STR to LibTIFF, the -O3 optimized ver-
sions had approximately 12% overhead. The highest overhead
was for zlib’s -O3 optimized version (18.83%). Interestingly,
the transformed version was not optimized by the compiler
beyond -O0. This makes sense intuitively as our transformation
changed only in a few places. After the compiler optimizes
with -O1, there is very little left for it to do for -O2 and -O3
optimization levels.
For STR, the programs were tested on a MacBook machine
with a 2 GHz Intel Core 2 Duo Processor and 4GB 1067 MHz
DDR3 memory running Mac OS X Lion 10.7.4. We used llvm-
gcc 4.2.1 to compile the programs.
V. RELATED WORK
This section compares our transformation based approach
with the approaches of detecting and ﬁxing buffer overﬂow
vulnerabilities. First we compare our general approach; this is
followed by a discussion of the two transformations.
A. General Approach
Most of the research works on buffer overﬂow vulner-
abilities and static analysis concentrate on detecting buffer
overﬂows [10], [15], [18], [36], [38], [62], [63], [65]. On the
other hand, dynamic analysis approaches mostly concentrate
on preventing buffer overﬂow vulnerabilities, except for a few
detection approaches [46], [55], [57]. The static approaches
range from very simple lexical analyzer [62] to tools perform-
ing integer analysis to approximate the pointer arithmetic in C
source code [63] to applying abstract interpretation to prove the
absence of runtime errors [10]. Most of the early approaches
suffer from a high rate of false positives. But, approaches that
have used symbolic analysis to detect buffer overﬂow [2], [21],
[22], [36], [54], [63], [65] have reported better results. Our
program transformations, on the other hand, attempt to ﬁx
buffer overﬂows by replacing all instances of unsafe library
functions and char pointers.
Cowan and colleagues [13] identiﬁed four basic approaches
to defend against buffer overﬂow vulnerabilities: (1) writing
correct code; (2) making the stack segment non-executable; (3)
checking array bounds; and (4) checking the integrity of code