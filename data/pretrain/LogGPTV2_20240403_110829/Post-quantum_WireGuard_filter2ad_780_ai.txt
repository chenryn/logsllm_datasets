For the second case we ﬁrst establish that ri, while being
(potentially) known to the adversary is still fresh in the sense
that KDF(σi, ri) has never been evaluated: Since ri
is a
random value, there is a chance that it could be sampled in
another session. This probability can be upper-bounded by the
total number of sessions divided by the number of possible
values, namely nS
2|ri|
Given that, we initialize a prf challenger and replace all
computations of KDF(σi,·) with queries to the challenger. By
the deﬁnition of this case σi is a uniformly random and inde-
pendent value, therefore this replacement is sound. If the test
bit sampled by the prf challenger is 0, then ˆr ← KDF(σi, ri)
and we are in Game 4. If the test bit sampled by the prf
challenger is 1, then ˆr $← {0, 1}|KDF| is a truly random value.
Since we established furthermore that ri is not used with σi
in any other session, ˆr is furthermore independent of all other
ˆr in other sessions, therefore we are in Game 5a.
Thus any adversary A capable of distinguishing this change
the prf
can be turned into a successful adversary against
security or the prfswap security of KDF, and we ﬁnd:
Pr(abortaccept)
≤ nS
2|ri| + Advprf
KDF,R(λ) + Advprfswap
KDF,R(λ) + Pr (break5a)
In Game 5b we replace the computation of shk1 by
sampling the value uniformly at random from the space of
shared secrets of the KEM and ignoring the second output
of CCAKEM.Enc(spkr). To show that this is undetectable
under the IND-CCA-assumption of the used KEM, we interact
with an IND-CCA challenger in the following way: Note that
by Game 1, we know at the beginning of the experiment
the index of session πs
i such that Test(i, s) is issued by the
adversary. Similarly, by Game 2, we know at the beginning
of the experiment the index of the intended partner Pj of the
i . Thus, we initialize an IND-CCA challenger and use
session πs
the received public-key pk∗ as long-term public-key of party
Pj and give it with all other (honestly generated) public keys
to the adversary. Note that by Game 4 and the deﬁnition of
this case, A is not able to issue a CorruptASK(j) query, as we
i .α ← accept. Thus
abort if πs
we will not need to reveal the private key sk∗ of the challenge
public-key to A. However we must account for all sessions
t such that πt
j must use the private key for computations.
In PQ-WireGuard, the long-term private keys are used to
compute the following:
i .α ← reject and abort if πs
• In sessions where Pj acts as the initiator:
C8 ← KDF(C6, CCAKEM.Dec(sski, ct3))
• In sessions where Pj acts as the responder:
C3, κ3 ← KDF(C2, CCAKEM.Dec(sskr, ct1))
(Note that these are fewer cases than in the original proof
because we don’t combine static and ephemeral keys directly.)
Dealing with the challenger’s computation of these values will
be done in two ways:
• The encapsulation was created by another honest party.
The challenger can then use its own internal knowledge
of the encapsulated value to complete the computations.
• The encapsulation was not created by another honest
party, but by the adversary and the challenger is therefore
unaware of the encapsulated value.
In the second case,
the challenger can instead use the
decapsulation-oracle provided by the CCA-challenger, specif-
ically querying CCAKEM.Dec(ctX), (where ctX is the rele-
vant encapsulation) which will output shkX using the CCA
challenger’s internal knowledge of sk∗.
During session i we request a challenge consisting of a
ciphertext and a candidate shared secret (c∗
, k∗) from the
IND-CCA challenger and use those values in place of ct1
and shk1. Given the deﬁnition of the IND-CCA game, there
are two cases:
• If the test bit sampled by the IND-CCA challenger is 0,
then k∗ is indeed the shared secret encapsulated in c∗
and we are in Game 5a.
• If the test bit sampled by the IND-CCA challenger is 1,
then k∗ is not the shared secret encapsulated in c∗ but
sampled uniformly at random from the space of shared
secrets and we are in Game 5b.
Thus, any adversary A capable of distinguishing this change
can be turned into a successful adversary against the IND-CCA
security of the used KEM and we ﬁnd:
Pr(break5a) ≤ AdvIND-CCA
CCAKEM,R(λ) + Pr(break5b)
random and independent values (cid:8)C3,(cid:8)κ3
In Game 5c we replace the values of C3, κ3 with uniformly
$← {0, 1}|KDF| (where
{0, 1}|KDF|
is the output space of the KDF) used in the
a prfswap challenger and query shk1, and use the output (cid:8)C3,(cid:8)κ3
protocol execution of the test session. Speciﬁcally, we initialize
from the prfswap challenger to replace the computation of
C3, κ3. Since by Game 5b, shk1 is a uniformly random
bit sampled by the prfswap challenger is 0, then (cid:8)C3,(cid:8)κ3 ←
and independent value, this replacement is sound. If the test
by the prfswap challenger is 1, then (cid:8)C3,(cid:8)κ3
KDF(C2, shk1) and we are in Game 5b. If the test bit sampled
$← {0, 1}|KDF| and
we are in Game 5c.
Thus any adversary A capable of distinguishing this change
can be turned into a successful adversary against the prfswap
security of KDF, and we ﬁnd:
Pr(break5b) ≤ Advprfswap
KDF,R(λ) + Pr(break5c)
Regarding the other games that need to be replaced: Game 3
of Case 3.3 is very similar to Game 5 of Case 1. The biggest
difference is that the case-distinction in the ﬁrst sub-game is
no longer necessary since the deﬁnition of the case ensures
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
320
that the ephemeral key of the initiator is uncorrupted. As such
the ﬁrst case can be removed. Furthermore the references to
the surrounding games have to be updated as listed below.
Game 5 of Case 2 and Game 3 of Case 3.4, which are
again (except for the ﬁrst sub-game, their number and the
references) almost identical to each other, only differ slightly
from Game 5 of Case 1. In order to reﬁt the proof to them
perform the following changes, except for leaving the listing
after the ﬁrst paragraph in the second sub-game that lists the
uses of the uncorrupted static key alone:
• In the ﬁrst sub-game replace all occurrences of Xi with
Xr for all identiﬁers X.
• In Game 3 of Case 3.4 remove the ﬁrst case of the ﬁrst
sub-game (as in Case 3.3).
• Replace all occurrences of (cid:8)C3,(cid:8)κ3 with (cid:8)C8.
• Replace all occurrences of C3, κ3 with C8.
• Replace all occurrences of ct1 with ct3.
• Replace all occurrences of shk1 with shk3.
• In the third subhybrid replace C2 with C7
Game 3 of Case 3.5 is special in that it can be proven secure
in two slightly different ways by slightly modifying either the
proof for Case 1 or the proof for Case 2. For the sake of
brevity we will only explain the ﬁrst way: Take the proof for
Game 5 of Case 1 and only modify Game 5a be removing the
second case. After that, the entire argument works analogously.
Other than that only the following inconsequential changes
are required:
• Replace the phrase “by Game 4 and the deﬁnition” by
“by the deﬁnition” in all subcases of Case 3.
• The reference to Game 1 in Case 1 must be replaced by
a reference to Game 2 in all other games.
• The reference to Game 2 in Case 1 must be replaced by
a reference to Game 1 in Case 3.4 and by a reference to
Game 3 in all other games.
• The references to Pr(abortaccept) must be replaced with
Pr(break2) in all sub-cases of case 3.
• The
probabilities Pr(break5a), Pr(break5b)
and
Pr(break5c) must be
replaced with Pr(break3a),
Pr(break3b) and Pr(break3c) in all sub-cases of case 3.
• The games that follow our modiﬁed games must re-
place their references to Pr(break5)/ Pr(break3) by
Pr(break5c)/ Pr(break3c), respectively.
• Replace all uses of guv with psk, gy with ct2, gxy with
shk2, guy with shk3 and gz with shk2.
Game 3 is somewhat special in that both ephemeral keys
are assumed to be uncorrupted. In the original version this
meant that only the DDH-assumption was necessary, whereas
our version is ﬁne with an IND-CPA-secure KEM. We again
follow the original proof as closely as possible:
In this game, we replace the value shk2 computed in the
test session πs
i and its honest contributive keyshare session
with a random element from the same keyspace. Note that
since the initiator session and the responder session both
get key conﬁrmation messages that include derivations based
on the encapsulated shared key, both know that
the key
≤ n2
P nS
≤ n2
P nS
was received by the other session without modiﬁcation. We
explicitly interact with an IND-CPA challenger, and replace
the ephemeral epki and ct2 values sent in the InitiatorHello
and ResponderHello messages with the challenge public-key
and ciphertext from the IND-CPA challenger. We only require
the encapsulated key in one computation (as opposed to three
in the original proof): C7 ← KDF(c2, shk2)
Here we can replace shk2 with the supposed shared key
k∗ from the IND-CPA-challenger. When the test bit sampled
then k∗ is the actually
by the IND-CPA challenger is 0,
encapsulated shared key and we are in Game 2. When
the test bit sampled by the IND-CPA challenger is 1, then
k∗ $← KCPAKEM and we are in Game 3. Any adversary that
can detect that change can be turned into an adversary against
the IND-CPA problem and thus
Pr(break2) ≤ AdvIND-CPA
CPAKEM,R(λ) + Pr(break3).
Finally, in Game 3 of Case 3.1 replace all occurrences of
“prf ” with “prfswap ” during the entire hybrid.
After applying all these changes we can compute the com-
plete adversarial advantage AdveCK-PFS-PSK
pqWG,cleaneCK-PFS-PSK,nP ,nS ,A(λ).
As required by the security-deﬁnition, it is bounded by a
polynomial factor of A’s advantage in the dual-prf, IND-CCA,
IND-CPA and auth-aead games. Speciﬁcally:
AdveCK-PFS-PSK
pqWG,cleaneCK-PFS-PSK,nP ,nS ,A(λ)
⎞
⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
⎫⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎭
⎛
⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
⎛
⎜⎜⎜⎜⎜⎜⎜⎝
2λ
KDF,R(λ)
CPAKEM,R(λ)
+ nS · max
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
KDF,R(λ)
CCAKEM,R(λ)
CCAKEM,R(λ) + 9 · Advprf
KDF,R(λ)
KDF,R(λ) + 2 · Advauth-aead
AEAD,R (λ)
⎞
+ 2 · ns
⎟⎠ ,
⎞
⎟⎠ ,
⎞
⎟⎟⎟⎠
⎞
⎟⎟⎟⎟⎟⎟⎟⎠
2 · AdvIND-CCA
+ 4 · Advprfswap
⎛
⎜⎝ AdvIND-CPA
+ 4 · Advprf
⎛
+ Advprfswap
⎜⎝ AdvIND-CCA
+ 7 · Advprf
⎛
+ 2 · Advprfswap
⎜⎜⎜⎝
AdvIND-CCA
+ 7 · Advprf
+ Advprfswap
+ ns
2λ
· Advprf
(7nS + 9)
KDF,R(λ)
· Advprfswap
+ (2nS + 4)
KDF,R(λ)
· AdvIND-CCA
+ (nS + 2)
CCAKEM,R(λ)
· AdvIND-CPA
+
CPAKEM,R(λ)
nS
2 · Advauth-aead
+
AEAD,R (λ)
·
+ (nS + 2)
KDF,R(λ)
KDF,R(λ)
CCAKEM,R(λ)
KDF,R(λ)
KDF,R(λ)
ns
2λ
(The last term is slightly less tight, but we include it here
for the sake of simplicity.)
Overall the result is similar to that for WireGuard, except
that we have a slight tightness-loss relative to the prf-security
and replaced the pre-quantum assumptions with generic KEM-
security assumptions.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
321