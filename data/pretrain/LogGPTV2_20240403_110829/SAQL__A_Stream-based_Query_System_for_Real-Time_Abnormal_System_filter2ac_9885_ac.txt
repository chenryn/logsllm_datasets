which facilitates the speciﬁcation of complex system be-
havioral rules.
Global Constraint: The (cid:104)global cstr(cid:105) rule speciﬁes the
constraints for all event patterns (e.g., agentid = 1 in
Query 4 speciﬁes that all event patterns occur on the
same host).
Event Pattern: The (cid:104)evt patt(cid:105) rule speciﬁes an event
pattern, including the subject/object entity ((cid:104)entity(cid:105)), the
event operation ((cid:104)op exp(cid:105)), the event ID ((cid:104)evt(cid:105)), and the
optional sliding window ((cid:104)wind(cid:105)). The (cid:104)entity(cid:105) rule con-
sists of the entity type (ﬁle, process, network connec-
tion), the optional entity ID, and the optional attribute
constraints expression ((cid:104)attr exp(cid:105)). Logical operators
(&&, ||, !) can be used in (cid:104)op exp(cid:105) to form complex
operation expressions (e.g., proc p read || write file f
). The (cid:104)attr exp(cid:105) rule speciﬁes an attribute expression
which supports the use of the logical operators, the com-
parison operators (=, ! =, >, >=, evt2->evt3 in Query 1 spec-
iﬁes that evt1 occurs ﬁrst, then evt2, and ﬁnally evt3.
Finer-grained control of temporal distance can also be
provided. For example, evt1 ->[1-2 min] evt2 ->[1-2
min] evt3 indicates that the time span between the two
events is 1 to 2 minutes.
Event Attribute Relationship: Event attribute rela-
tionships can be included in the alert rule ((cid:104)alert(cid:105))
to specify the attribute dependency of event patterns
(e.g., alert evt1.agentid = evt2.agentid && evt1.dst_id
= evt2.src_id for two event patterns evt1 and evt2 in-
dicates that the two events occur at the same host and
(cid:104)temp rel(cid:105)
(‘[’
‘]’)?
(cid:104)int(cid:105)
(cid:104)id(cid:105)
‘{’
func(cid:105)) ‘(’
Stateful computation:
(cid:104)state(cid:105)
(cid:104)state def(cid:105)
(cid:104)state ﬁeld(cid:105)
(cid:104)state inv(cid:105)
::= (cid:104)state def(cid:105) (cid:104)state inv(cid:105)? (cid:104)state cluster(cid:105)?
::= ‘state’
(cid:104)state ﬁeld(cid:105) (cid:104)state ﬁeld(cid:105)*‘}’ (cid:104)groupby(cid:105)
::= (cid:104)id(cid:105) ‘:=’ ((cid:104)agg func(cid:105) | (cid:104)set
(cid:104)attr(cid:105) ‘)’ (cid:104)groupby(cid:105)?
(cid:104)int(cid:105)
‘[’
(cid:104)train type(cid:105)
‘]’?
‘{’
(cid:104)inv update(cid:105)+ ‘}’
::= (cid:104)id(cid:105) ‘:=’ ((cid:104)num(cid:105)|(cid:104)empty set(cid:105))
::= (cid:104)id(cid:105) ‘=’ (cid:104)attr exp(cid:105)
‘(’
::= ‘invariant’
(cid:104)inv init(cid:105)
(cid:104)inv update(cid:105)
(cid:104)state cluster(cid:105) ::= ‘cluster’
(cid:104)point def(cid:105)
(cid:104)distance def(cid:105) ::= ‘distance’ ‘=’ (cid:104)dist metric(cid:105)
(cid:104)method def(cid:105) ::= ‘method’ ‘=’ (cid:104)cluster method(cid:105) ‘(’ (cid:104)num(cid:105)
(cid:104)point def(cid:105)
(cid:104)distance def(cid:105) ‘,’ (cid:104)method def(cid:105) ‘)’
(cid:104)attr(cid:105))* ‘)’
‘,’
::= ‘points’ ‘=’ (cid:104)peer ref(cid:105) ‘(’ (cid:104)attr(cid:105) (‘,’
‘]’
‘[’
(cid:104)inv init(cid:105)+
(‘,’ (cid:104)num(cid:105))* ‘)’
::= ‘alert’ (cid:104)attr exp(cid:105)
Alert condition checking:
(cid:104)alert(cid:105)
Return and ﬁlters:
(cid:104)return(cid:105)
(cid:104)res pair(cid:105)
(cid:104)groupby(cid:105)
(cid:104)sortby(cid:105)
(cid:104)top(cid:105)
::= ‘return’ (cid:104)res pair(cid:105) (‘, ’ (cid:104)res pair(cid:105))*
::= (cid:104)attr exp(cid:105) (‘as’ (cid:104)id(cid:105))?
::= ‘group by’ (cid:104)attr(cid:105) (‘,’ (cid:104)attr(cid:105))*
::= ‘sort by’ (cid:104)attr(cid:105) (‘,’ (cid:104)attr(cid:105))* (‘asc’ |
‘desc’)?
::= ‘top’ (cid:104)int(cid:105)
Grammar 1: Representative BNF grammar of SAQL
are “physically connected”: the object entity of evt1 is
exactly the subject entity of evt2).
644    27th USENIX Security Symposium
USENIX Association
Context-Aware Syntax Shortcuts:
• Attribute inferences: (1) default attribute names will
be inferred if only attribute values are speciﬁed in an
event pattern, or only entity IDs are speciﬁed in event
return. We select the most commonly used attributes
in security analysis as default attributes: name for ﬁles,
exe_name for processes, and dst_ip for network con-
nections. For example, in Query 1, file f1["%gsecdump
.exe"] is equivalent to file f1[name="%gsecdump.exe"],
and return p1 is equivalent to return p1.exe_name; (2)
id will be used as default attribute if only entity IDs
are speciﬁed in the alert condition. For example, given
two processes p1 and p2, alert p1 = p2 is equivalent to
alert p1.id = p2.id.
• Optional ID: the ID of entity/event can be omitted if it
is not referenced in event relationships or event return.
For example, in proc p open file, we can omit the ﬁle
entity ID if we will not reference its attributes later.
• Entity ID Reuse: Reused entity IDs in multiple event
patterns implicitly indicate the same entity.
4.2 Stateful Computation
Based on the constructs of sliding windows, SAQL pro-
vides constructs for stateful computation, which consists
of two major parts: deﬁning states based on sliding win-
dows and accessing states of current and past windows
to specify time-series anomalies, invariant-based anoma-
lies, and outlier-based anomalies.
State Block: The (cid:104)state def(cid:105) rule speciﬁes a state block
by specifying the state count, block ID, and multiple state
ﬁelds. The state count indicates the number of states for
the previous sliding windows to be stored (e.g., Line 2
in Query 2). If not speciﬁed, only the state of the current
window is stored by default (e.g., Line 2 in Query 3). The
(cid:104)state ﬁeld(cid:105) rule speciﬁes the computation that needs to
be performed over the data in the sliding window, and
associates the computed value with a variable ID. SAQL
supports a broad set of numerical aggregation functions
(e.g., sum, avg, count, median, percentile, stddev, etc.)
and set aggregation functions (e.g., set, multiset). After
specifying the state block, security analysts can then ref-
erence the state ﬁelds via the state ID to construct time-
series anomaly models (e.g., Line 5 in Query 2 speciﬁes
a three-period simple moving average (SMA) [55] time-
series model to detect network spikes).
State Invariant: The (cid:104)state inv(cid:105) rule speciﬁes invari-
ants of system behaviors and updates these invariants us-
ing states computed from sliding windows (i.e., invari-
ant training), so that users can combine both states of
windows and invariants learned to detect more types of
abnormal system behaviors. For example, Lines 5-8 in
Query 3 speciﬁes an invariant a and trains it using the
ﬁrst 10 window results.
State Cluster: The (cid:104)state cluster(cid:105) rule speciﬁes clus-
ters of system behaviors, so that users can identify ab-
normal behaviors through peer comparison. The cluster
speciﬁcation requires the speciﬁcation of the points us-
ref(cid:105) (e.g., all), dis-
ing peer reference keywords (cid:104)peer
tance metric, and clustering method. SAQL supports
common distance metrics (e.g., Manhattan distance, Eu-
clidean distance) and major clustering algorithms (e.g.,
K-means [56], DBSCAN [48], and hierarchical cluster-
ing [56]). For example, Line 6 in Query 4 speciﬁes a
cluster of the one-dimensional points ss.amt using Eu-
clidean distance and DBSCAN algorithm. SAQL also
provides language extensibility that allows other cluster-
ing algorithms and metrics to be used through mecha-
nisms such as Java Native Interface (JNI) and Java Nam-
ing and Directory Interface (JNDI).
4.3 Alert Condition Checking
The (cid:104)alert(cid:105) rule speciﬁes the condition (a boolean ex-
pression) for triggering the alert. This enables SAQL to
specify a broad set of detection logics for time-series
anomalies (e.g., Line 5 in Query 2),
invariant-based
anomalies (e.g., Line 9 in Query 3), and outlier-based
anomalies (e.g., Line 7 in Query 4). Note that in addi-
tion to the moving average detection logic speciﬁed in
Query 2, the ﬂexibility of SAQL also enables the spec-
iﬁcation of other well-known logics, such as 3-sigma
rule [38] (e.g., alert ss.amt>3*stddev(all(ss.amt))+avg(
all(ss.amt))) and IQR rule [38] (e.g., alert ss.amt>1.5*
iqr(all(ss.amt))+q3(all(ss.amt))).
4.4 Return and Filters
The (cid:104)report(cid:105) rule speciﬁes the desired attributes of the
qualiﬁed events to return as results. Constructs such as
group by, sort by, and top can be used for further result
manipulation and ﬁltering. These constructs are useful
for querying the most active processes and IP addresses,
as well as specifying threshold-based anomaly models
without explicitly deﬁning states. For example, Query 5
computes the IP frequency of each process in a 1-minute
sliding window and returns the active processes with a
frequency greater than 100.
1 proc p start ip i as evt #time(1 min)
2 group by p
3 alert freq > 100
4 return p, count(i) as freq
Query 5: Threshold-based IP Frequency Anomaly
5 SAQL Execution Engine
The SAQL execution engine in Figure 2 takes the event
stream as input, executes the anomaly model contexts
USENIX Association
27th USENIX Security Symposium    645
generated by the parser, and reports the detected alerts.
To make the system more scalable in supporting mul-
tiple concurrent queries, the engine employs a master-
dependent-query scheme that groups semantically com-
patible queries to share a single copy of the stream data
for query execution. In this way, the SAQL system sig-
niﬁcantly reduces the data copies of the stream.
5.1 Query Execution Pipeline
The query engine is built upon Siddhi [20], so that our
SAQL can leverage its mature stream management engine
in terms of event model, stream processing, and stream
query. Given a SAQL query, the parser performs syntac-
tic analysis and semantic analysis to generate an anomaly
model context. The concurrent query scheduler inside
the query optimizer analyzes the newly arrived anomaly
model context against the existing anomaly model con-
texts of the queries that are currently running, and com-
putes an optimized execution schedule by leveraging the
master-dependent-query scheme. The multievent solver
analyzes event patterns and their dependencies in the
SAQL query, and retrieves the matched events by issuing
a Siddhi query to access the data from the stream. If the
query involves stateful computation, the state maintainer
leverages the intermediate execution results to compute
and maintain query states. Alerts will be generated if the
alert conditions are met for the queries.
5.2 Concurrent Query Scheduler
The concurrent query scheduler in Figure 2 schedules
the execution of concurrent queries. A straightforward
scheduling strategy is to make copies of the stream data
and feed the copies to each query, allowing each query
to operate separately. However, system monitoring pro-
duces huge amount of daily logs [69, 88], and such copy
scheme incurs high memory usage, which greatly limits
the scalability of the system.
Master-Dependent-Query Scheme: To efﬁciently sup-
port concurrent query execution, the concurrent query
scheduler adopts a master-dependent-query scheme. In
the scheme, only master queries have direct access to the
data stream, and the execution of the dependent queries
depends on the execution of their master queries. Given
that the execution pipeline of a query typically involves
four phases (i.e., event pattern matching, stateful com-
putation, alert condition checking, and attributes return),
the key idea is to maintain a map M from a master query
to its dependent queries, and let the execution of depen-
dent queries share the intermediate execution results of
their master query in certain phases, so that unnecessary
data copies of the stream can be signiﬁcantly reduced.
Algorithm 1 shows the scheduling algorithm:
Algorithm 1: Master-dependent-query scheme
Input: User submitted new SAQL query: newQ
Map of concurrent master-dependent queries:
M = {masQi → {depQi j}}
Output: Execution results of newQ
if M.isEmpty then
return execAsMas(newQ,M);
else
for masQi in M.keys do
covQ = constructSemanticCover(masQi,newQ);
if covQ (cid:54)= null then
if covQ (cid:54)= masQi then
replMas(masQi,covQ,M);
addDep(covQ,newQ);
return execDep(newQ,covQ);
return execAsMas(newQ,M);
Function constructSemanticCover(masQ,newQ)
if Both masQ and newQ deﬁne a single event pattern then
if masQ and newQ share the same event type, operation
type, and sliding window type then
Construct the event pattern cover evtPattCovQ by
taking the union of their attributes and agent IDs
and the GCD of their window lengths;
if Both masQ and depQ deﬁne states then
if masQ and depQ have the same sliding
window length and masQ deﬁnes a super set
of state ﬁelds of depQ then
Construct the state cover stateCovQ by
taking the union of their state ﬁelds;
return covQ by concatenating evtPattCovQ,
stateCovQ, and the rest parts of masQ;
return null;
Function execAsMas(newQ,M)
Make newQ as a new master and execute it;
Function addDep(masQ,depQ,M)
Add depQ to the dependencies of masQ;
Function replMas(oldMasQ,newMasQ,M)
Replace the old master oldMasQ with the new master
newMasQ and update dependencies;
Function execDep(depQ,masQ)