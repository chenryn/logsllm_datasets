# Blockchain CTF v2 write up
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前两天看到这个智能合约的[ctf](https://blockchain-ctf.securityinnovation.com)出了v2版本，第一版的时候题目不多，而且也比较基础，这次更了第二版加了四道题，而且对老版的题目进行了一定的改进，虽然考点没变，但代码是更加规范了，至少编译起来看着是舒服多了，不过更新后没法用以前的账号继续，只能重新做，所以顺手在这记录了一下
题目地址 
## 0x1.Donation
源码如下
    pragma solidity 0.4.24;
    import "../CtfFramework.sol";
    import "../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol";
    contract Donation is CtfFramework{
        using SafeMath for uint256;
        uint256 public funds;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            funds = funds.add(msg.value);
        }
        function() external payable ctf{
            funds = funds.add(msg.value);
        }
        function withdrawDonationsFromTheSuckersWhoFellForIt() external ctf{
            msg.sender.transfer(funds);
            funds = 0;
        }
    }
第一关，非常简单，在这一系列的题目了我们的目标都是清空合约的余额，此处直接调用`withdrawDonationsFromTheSuckersWhoFellForIt`函数即可，这里主要是让你熟悉操作，为了方便我都是直接使用[remix](http://remix.ethereum.org)进行调用，下面也一样，就不再赘述了
## 0x2.lock box
主要代码
    pragma solidity 0.4.24;
    import "./CtfFramework.sol";
    contract Lockbox1 is CtfFramework{
        uint256 private pin;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            pin = now%10000;
        }
        function unlock(uint256 _pin) external ctf{
            require(pin == _pin, "Incorrect PIN");
            msg.sender.transfer(address(this).balance);
        }
    }
很简单，考点就是EVM中storage存储的读取，为了调用unlock函数，我们要知道合约中保存的pin的值，尽管它是个private的变量，无法被外部call，但是可以直接使用getStorageAt读取其值，因为CtfFramework合约中有个mapping变量的声明占据了一个slot，所以此处pin所在的即第二个slot，即index为1
> web3.eth.getStorageAt(‘your challenge address’, 1, console.log);
使用获取到的pin去调用unlock函数即可
## 0x3.Piggy Bank
主要代码
    contract PiggyBank is CtfFramework{
        using SafeMath for uint256;
        uint256 public piggyBalance;
        string public name;
        address public owner;
        constructor(address _ctfLauncher, address _player, string _name) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            name=_name;
            owner=msg.sender;
            piggyBalance=piggyBalance.add(msg.value);
        }
        function() external payable ctf{
            piggyBalance=piggyBalance.add(msg.value);
        }
        modifier onlyOwner(){
            require(msg.sender == owner, "Unauthorized: Not Owner");
            _;
        }
        function withdraw(uint256 amount) internal{
            piggyBalance = piggyBalance.sub(amount);
            msg.sender.transfer(amount);
        }
        function collectFunds(uint256 amount) public onlyOwner ctf{
            require(amount 0, "Cannot Purchase Zero Tokens");
            require(_value 0, "Cannot Refund Zero Tokens");
            transfer(this, _value);
            etherCollection -= _value/2;
            msg.sender.transfer(_value/2);
        }
        function withdrawEther() external ctf{
            require(msg.sender == developer, "Unauthorized: Not Developer");
            require(balances[this] == 0, "Only Allowed Once Sale is Complete");
            msg.sender.transfer(etherCollection);
        }
    }
这题的考点主要在于溢出，虽然前面引入了safemath，却没有使用，这就导致合约中存在下溢，很明显`purchaseTokens`函数中
> balances[msg.sender] += _value – feeAmount;
只要传入一个小于`feeAmount`的`_value`，即可让我们的balances下溢，比如发送1gas，然后即可调用`refundTokens`函数将合约的余额清空，因为这里是将`_value`除2得到提取的余额，所以我们将合约的`etherCollection`乘2作为`_value`即可，这里面也包含我们前面调用`purchaseTokens`发送的ether。
## 0x5.Secure Bank
主要代码
    contract SimpleBank is CtfFramework{
        mapping(address => uint256) public balances;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            balances[msg.sender] = msg.value;
        }
        function deposit(address _user) public payable ctf{
            balances[_user] += msg.value;
        }
        function withdraw(address _user, uint256 _value) public ctf{
            require(_value string) public members;
        constructor(address _ctfLauncher, address _player) public payable
            SimpleBank(_ctfLauncher, _player)
        {
        }
        function register(address _user, string _username) public ctf{
            members[_user] = _username;
        }
        modifier isMember(address _user){
            bytes memory username = bytes(members[_user]);
            require(username.length != 0, "Member Must First Register");
            _;
        }
        function deposit(address _user) public payable isMember(_user) ctf{
            super.deposit(_user);
        }
        function withdraw(address _user, uint256 _value) public isMember(_user) ctf{
            super.withdraw(_user, _value);
        }
    }
    contract SecureBank is MembersBank{
        constructor(address _ctfLauncher, address _player) public payable
            MembersBank(_ctfLauncher, _player)
        {
        }
        function deposit(address _user) public payable ctf{
            require(msg.sender == _user, "Unauthorized User");
            require(msg.value = 1 ether, "Does Not Satisfy Minimum Requirement");
            super.deposit(_user);
        }
        function withdraw(address _user, uint8 _value) public ctf{
            require(msg.sender == _user, "Unauthorized User");
            require(_value = 1, "Does Not Satisfy Minimum Requirement");
            super.withdraw(_user, _value * 1 ether);
        }
        function register(address _user, string _username) public ctf{
            require(bytes(_username).length!=0, "Username Not Enough Characters");
            require(bytes(_username).length require(msg.sender == _user, “Unauthorized User”);
但是`MembersBank`中仅需要是注册用户即可，所以这题的流程就是先调用`register`函数注册一下，然后使用etherscan在挑战合约的创建交易里查看一下合约的创建者，因为合约的ether都存在了它的账户上，然后我们直接使用这个地址来调用`MembersBank`中的`withdraw`函数即可，也就是找到参数类型为uint256的函数，非常简单就不赘述了
## 0x6.Lottery
主要代码
    contract Lottery is CtfFramework{
        using SafeMath for uint256;
        uint256 public totalPot;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            totalPot = totalPot.add(msg.value);
        }
        function() external payable ctf{
            totalPot = totalPot.add(msg.value);
        }
        function play(uint256 _seed) external payable ctf{
            require(msg.value >= 1 finney, "Insufficient Transaction Value");
            totalPot = totalPot.add(msg.value);
            bytes32 entropy = blockhash(block.number);
            bytes32 entropy2 = keccak256(abi.encodePacked(msg.sender));
            bytes32 target = keccak256(abi.encodePacked(entropy^entropy2));
            bytes32 guess = keccak256(abi.encodePacked(_seed));
            if(guess==target){
                //winner
                uint256 payout = totalPot;
                totalPot = 0;
                msg.sender.transfer(payout);
            }
        }    
    }
一个很简单的随机数漏洞，直接部署攻击合约
    contract attack {
        Lottery target;
        constructor() public{
            target=Lottery(your challenge address);
        }
        function pwn() payable{
            bytes32 entropy = block.blockhash(block.number);
            bytes32 entropy2 = keccak256(this);
            uint256 seeds = uint256(entropy^entropy2);
            target.play.value(msg.value)(seeds);
        }
        function () payable{
        }
    }
首先在`ctf_challenge_add_authorized_sender`函数中将攻击合约注册一下，然后即可发起攻击
## 0x7.Trust Fund
    contract TrustFund is CtfFramework{
        using SafeMath for uint256;
        uint256 public allowancePerYear;
        uint256 public startDate;
        uint256 public numberOfWithdrawls;
        bool public withdrewThisYear;
        address public custodian;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            custodian = msg.sender;
            allowancePerYear = msg.value.div(10);        
            startDate = now;
        }
        function checkIfYearHasPassed() internal{
            if (now>=startDate + numberOfWithdrawls * 365 days){
                withdrewThisYear = false;
            } 