im)
uiηx+∑n
-
3.
the
li
Obviously, (U
x+ρi ) is a trapdoor for keyword query Qi.
Through
to
(g fi(x)li0, g fi(x)li1, . . . , g fi(x)lin, g fi(x)li ) to A as the correct trapdoor for the query Qi.
li2
x+ρi , . . . , U
obtain
tuple
{ρi, g fi(x)}, C sends
Challenge: Algorithm A produces a target keyword set W∗ which it wants to challenge on
and sends W∗ to C. Algorithm C chooses a random keyword set R and sets W0 = W∗ =
{w01, w02, . . . , w0n}, W1 = R = {w11, w12, . . . , w1n}. The only restriction is that the trapdoor
queried in previous phase can not distinguish W0 from W1. Let (w0i, h0i, σ0i) be the corresponding
tuples on the H1−list, for each i ∈ [1, n], if σ0i > n, then C reports failure and terminates.
After that, C selects a random bit β ∈ {0, 1} and runs the above algorithm for responding to
H1−queries to obtain the values hβ1, hβ2, . . . , hβn where H1(wβi|φ) = hβi, wβi ∈ Wβ, i ∈ [1, n].
Then, C generates the challenge SPE-CKS index Iβ as follows:
(1) C constructs f (z) = ∏n
i=1(z − hβi) = ∑n
x = Usjrβ for each j ∈ [0, n] and CWβ
rβ
x +aj
U ), observe that if R = ˆe(g, g)
j=0 ajzj. Then C computes Cβj = Xj
rβ
x ×
rβ
x = Urβ.
1
x . This means
) is a valid SPE-CKS index of keyword set Wβ when
1
x , then RU = ˆe(U, U)
= H2(Rrβ
U
Let DWβ
that (Cβ0, Cβ1, . . . , Cβn, CWβ, DWβ
R = ˆe(g, g)
x aj = Usjrβ−bj
rβ
rβ
x = V
= Z
1
x .
rβ
(2) C sends Iβ = (Cβ0, Cβ1, . . . , Cβn, CWβ, DWβ
) and two keyword sets W0 and W1 to A.
- More queries: A continues to issue index and trapdoor queries. The only restriction is that no
-
index and trapdoor query can distinguish W0 from W1.
Response: A outputs a guess β
Otherwise, C outputs 0 which means R is a random number where R ∈ G∗
2.
We analyze the probability that C does not abort in trapdoor queries phase and challenge phase.
= β, then C outputs 1 which means R = ˆe(g, g)
(cid:48) ∈ {0, 1} . If β
1
x .
(cid:48)
We deﬁne three events:
ω1: C does not abort in index quries phase for generating the IW.
ω2: C does not abort as a result of any of A’s trapdoor queries.
ω3: C does not abort in challenge phase for generating the Iβ.
If qI is sufﬁciently large, then the probability of event ω1 is at least (1 − 1
qI
nqI = 1
en . Suppose that
qT is sufﬁciently large. Therefore, the probability of event ω2 is at least (1 − 1
mqT = 1
em .
qT
The probability of event ω3 = 1
qn
T
)
)
.
1
x , A’s view is identical to its view in a real attack game and it must satisfy
2| ≥ . If R is a random number and R ∈ G∗
2, then it must have |Pr[β
(cid:48)
= β]| = 1
2.
|Pr[β
If R = ˆe(g, g)
= β] − 1
(cid:48)
Therefore, we have that:
|Pr[C(P, xP, x2P, . . . , xqT +1P, ˆe(p, p)
1
x ) = 1] − Pr[C(P, xP, x2P, . . . , xqT +1P, R) = 1]| ≥

enemqn
T
This means that C can solve the decision (qT + 1)-BDHI assumption with probability at least
enemqn
T
. We complete the proof of the theorem.
= 
(cid:48)

Appl. Sci. 2019, 9, 3655
11 of 16
The above security proof demonstrates that our scheme is secure against chosen keywords attack.
The following paragraph is showing that our scheme can defend against the keyword guessing attack.
As ﬁgured out by Shao and Yang in Reference [28], the reason SPE schemes inherently suffer from
the keyword guessing attacks by adversaries is that they have abilities to execute the IndexBuild
and Test algorithms simultaneously. If the capability of index building for adversaries is limited,
the adversaries fail to launch the keyword guessing attack. In the proposed scheme, for the IndexBuild
and Trapdoor algorithms, the adversaries only can obtain g0, gs
0. If the adversaries can calculate
the value of φ = gst
0 , then it means that the adversaries can solve the CDH problem [31] in a polynomial
probabilistic time. Considering that the CDH problem is hard for any polynomial probabilistic time
adversaries, the secret φ is unknown to anyone except the senders and the receiver. Based on this,
neither the outsider attacker nor the malicious insider server is able to produce a correct ciphertext for
any keyword set of theirs interest. Thus, we argue that our scheme can defend against the keyword
guessing attack.
0 and gt
5. Performance Evaluation
This section gives the performance evaluation of the proposed scheme through theoretical and
experimental analysis.
5.1. Theoretical Analysis
To reveal the performance of the proposed scheme, we compared it with the existing SPE-CKS
schemes. For simplicity, we denote these schemes introduced in References [7,8,10] by ZZ11, OT15
and ZLW19, respectively. Concretely, ZZ11 is a standard SPE-CKS scheme; OT15 is an efﬁcient IPE
scheme, which can be changed to a SPE-CKS scheme by using a method mentioned in Reference [21];
ZLW19 is a SPE scheme that supports disjunctive and conjunctive keywords search simultaneously.
Moreover, for simplicity, we combine the KeyGenR algorithm to the KeyGenS algorithm and denote
these two algorithms by KeyGen. Tables 1 and 2 show the comparison between our scheme and the
previous schemes in terms of the storage and time overhead.
Table 1. Comparison with previous searchable public key encryption supporting conjunctive keywords
search (SPE-CKS) schemes on time complexity.
Algorithm
KeyGen
IndexBuild
Trapdoor
Test
Denotation
ZZ11 [7]
P1
(n + 1)P1 + (n + 2)P2 + e
3(n + 2)P1 + P2
(2n + 3)e
OT15 [8]
O(n2)P1
(12n + 10)P1
(12n + 10)P1
11e + 5(n − 1)P1
ZLW19 [10]
Our Scheme
(2n + 3)P1 + P2
(3n2 + 4n)P1 + P2 + P
(2m + 2)P1
2n(m + 1)e
(n + 2)P1 + P2 + 2P
(n + 2)P1 + P2
(n + 2)P1 + P
(n + 2)e
P, P1, P2: The time cost of one exponentiation computation in G, G1 and G2, respectively.
e: The time cost of one pairing operation.
Because the time cost of exponentiation computation and pairing is much higher than that of
other operations, such as addition and multiplication operations, the comparison only considers these
two operations. Table 1 shows that the time cost of index building, trapdoor generation and test in our
scheme are all less than that in other three schemes. Although the time cost of “KeyGen” algorithm in
our scheme is not as good as that in ZZ11, our scheme is also practical since this algorithm only runs
when system initialization and key pair replacement. In addition, because the pairing operation and
exponentiation computation are big computation burden in the test process, we can argue that the test
efﬁciency is improved a lot in our scheme.
Appl. Sci. 2019, 9, 3655
12 of 16
Table 2. Comparison with previous SPE-CKS schemes on space complexity.
Parameters
ZZ11 [7]
OT15 [8]
ZLW19 [10]
Our Scheme
pk
sk
Index
Trapdoor
Denotation
(n + 2)L1 + 2L2
|Zq|
(n + 1)L1 + (n + 2)L2 + |Zq|
(n + 2)L1 + L2
(12n + 16)L1 + L2
(12n + 16)L1
(5n + 1)L1 + L2
11L1
(2n + 3)L1 + L2
(2n + 3)|Zq|
(2n2 + 4n)L1 + L2
(2m + 2)L1 + |Zq|
(n + 4)|Zq|
(n + 2)L1 + L2 + 3L
(n + 2)L1 + |Zq|
(n + 2)L1
L, L1, L2 and |Zq|: the size of an element of G, G1, G2 and Zq, respectively.