indicates that the application has no advice to give about its access
pattern for the specified data.
if no advice is given for an open file,
this is the default assumption.
.tp
.b posix_fadv_sequential
the application expects to access the specified data sequentially (with
lower offsets read before higher ones).
.tp
.b posix_fadv_random
the specified data will be accessed in random order.
.tp
.b posix_fadv_noreuse
the specified data will be accessed only once.
.ip
in kernels before 2.6.18, \fbposix_fadv_noreuse\fp had the
same semantics as \fbposix_fadv_willneed\fp.
this was probably a bug; since kernel 2.6.18, this flag is a no-op.
.tp
.b posix_fadv_willneed
the specified data will be accessed in the near future.
.ip
\fbposix_fadv_willneed\fp initiates a
nonblocking read of the specified region into the page cache.
the amount of data read may be decreased by the kernel depending
on virtual memory load.
(a few megabytes will usually be fully satisfied,
and more is rarely useful.)
.tp
.b posix_fadv_dontneed
the specified data will not be accessed in the near future.
.ip
\fbposix_fadv_dontneed\fp attempts to free cached pages associated with
the specified region.
this is useful, for example, while streaming large
files.
a program may periodically request the kernel to free cached data
that has already been used, so that more useful cached pages are not
discarded instead.
.ip
requests to discard partial pages are ignored.
it is preferable to preserve needed data than discard unneeded data.
if the application requires that data be considered for discarding, then
.i offset
and
.i len
must be page-aligned.
.ip
the implementation
.i may
attempt to write back dirty pages in the specified region,
but this is not guaranteed.
any unwritten dirty pages will not be freed.
if the application wishes to ensure that dirty pages will be released,
it should call
.br fsync (2)
or
.br fdatasync (2)
first.
.sh return value
on success, zero is returned.
on error, an error number is returned.
.sh errors
.tp
.b ebadf
the \fifd\fp argument was not a valid file descriptor.
.tp
.b einval
an invalid value was specified for \fiadvice\fp.
.tp
.b espipe
the specified file descriptor refers to a pipe or fifo.
.rb ( espipe
is the error specified by posix,
but before kernel version 2.6.16,
.\" commit 87ba81dba431232548ce29d5d224115d0c2355ac
linux returned
.b einval
in this case.)
.sh versions
kernel support first appeared in linux 2.5.60;
the underlying system call is called
.br fadvise64 ().
.\" of fadvise64_64()
library support has been provided since glibc version 2.2,
via the wrapper function
.br posix_fadvise ().
.pp
since linux 3.18,
.\" commit d3ac21cacc24790eb45d735769f35753f5b56ceb
support for the underlying system call is optional,
depending on the setting of the
.b config_advise_syscalls
configuration option.
.sh conforming to
posix.1-2001, posix.1-2008.
note that the type of the
.i len
argument was changed from
.i size_t
to
.i off_t
in posix.1-2001 tc1.
.sh notes
under linux, \fbposix_fadv_normal\fp sets the readahead window to the
default size for the backing device; \fbposix_fadv_sequential\fp doubles
this size, and \fbposix_fadv_random\fp disables file readahead entirely.
these changes affect the entire file, not just the specified region
(but other open file handles to the same file are unaffected).
.pp
the contents of the kernel buffer cache can be cleared via the
.ir /proc/sys/vm/drop_caches
interface described in
.br proc (5).
.pp
one can obtain a snapshot of which pages of a file are resident
in the buffer cache by opening a file, mapping it with
.br mmap (2),
and then applying
.br mincore (2)
to the mapping.
.ss c library/kernel differences
the name of the wrapper function in the c library is
.br posix_fadvise ().
the underlying system call is called
.br fadvise64 ()
(or, on some architectures,
.br fadvise64_64 ());
the difference between the two is that the former system call
assumes that the type of the \filen\fp argument is \fisize_t\fp,
while the latter expects \filoff_t\fp there.
.ss architecture-specific variants
some architectures require
64-bit arguments to be aligned in a suitable pair of registers (see
.br syscall (2)
for further detail).
on such architectures, the call signature of
.br posix_fadvise ()
shown in the synopsis would force
a register to be wasted as padding between the
.i fd
and
.i offset
arguments.
therefore, these architectures define a version of the
system call that orders the arguments suitably,
but is otherwise exactly the same as
.br posix_fadvise ().
.pp
for example, since linux 2.6.14, arm has the following system call:
.pp
.in +4n
.ex
.bi "long arm_fadvise64_64(int " fd ", int " advice ,
.bi "                      loff_t " offset ", loff_t " len );
.ee
.in
.pp
these architecture-specific details are generally
hidden from applications by the glibc
.br posix_fadvise ()
wrapper function,
which invokes the appropriate architecture-specific system call.
.sh bugs
in kernels before 2.6.6, if
.i len
was specified as 0, then this was interpreted literally as "zero bytes",
rather than as meaning "all bytes through to the end of the file".
.sh see also
.br fincore (1),
.br mincore (2),
.br readahead (2),
.br sync_file_range (2),
.br posix_fallocate (3),
.br posix_madvise (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/list.3
.\" copyright (c) 2012 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th delete_module 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
delete_module \- unload a kernel module
.sh synopsis
.nf
.br "#include " "            /* definition of " o_* " constants */"
.br "#include " "      /* definition of " sys_* " constants */"
.br "#include 
.pp
.bi "int syscall(sys_delete_module, const char *" name ", unsigned int " flags );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br delete_module (),
necessitating the use of
.br syscall (2).
.sh description
the
.br delete_module ()
system call attempts to remove the unused loadable module entry
identified by
.ir name .
if the module has an
.i exit
function, then that function is executed before unloading the module.
the
.ir flags
argument is used to modify the behavior of the system call,
as described below.
this system call requires privilege.
.pp
module removal is attempted according to the following rules:
.ip 1. 4
if there are other loaded modules that depend on
(i.e., refer to symbols defined in) this module,
then the call fails.
.ip 2.
otherwise, if the reference count for the module
(i.e., the number of processes currently using the module)
is zero, then the module is immediately unloaded.
.ip 3.
if a module has a nonzero reference count,
then the behavior depends on the bits set in
.ir flags .
in normal usage (see notes), the
.br o_nonblock
flag is always specified, and the
.br o_trunc
flag may additionally be specified.
.\"  	o_trunc == kmod_remove_force in kmod library
.\"  	o_nonblock == kmod_remove_nowait in kmod library
.ip
the various combinations for
.i flags
have the following effect:
.rs 4
.tp
.b flags == o_nonblock
the call returns immediately, with an error.
.tp
.b flags == (o_nonblock | o_trunc)
the module is unloaded immediately,
regardless of whether it has a nonzero reference count.
.tp
.b (flags & o_nonblock) == 0
if
.i flags
does not specify
.br o_nonblock ,
the following steps occur:
.rs
.ip * 3
the module is marked so that no new references are permitted.
.ip *
if the module's reference count is nonzero,
the caller is placed in an uninterruptible sleep state
.rb ( task_uninterruptible )
until the reference count is zero, at which point the call unblocks.
.ip *
the module is unloaded in the usual way.
.re
.re
.pp
the
.b o_trunc
flag has one further effect on the rules described above.
by default, if a module has an
.i init
function but no
.i exit
function, then an attempt to remove the module fails.
however, if
.br o_trunc
was specified, this requirement is bypassed.
.pp
using the
.b o_trunc
flag is dangerous!
if the kernel was not built with
.br config_module_force_unload ,
this flag is silently ignored.
(normally,
.br config_module_force_unload
is enabled.)
using this flag taints the kernel (taint_forced_rmmod).
.sh return value
on success, zero is returned.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebusy
the module is not "live"
(i.e., it is still being initialized or is already marked for removal);
or, the module has
an
.i init
function but has no
.i exit
function, and
.b o_trunc
was not specified in
.ir flags .
.tp
.b efault
.i name
refers to a location outside the process's accessible address space.
.tp
.b enoent
no module by that name exists.
.tp
.b eperm
the caller was not privileged
(did not have the
.b cap_sys_module
capability),
or module unloading is disabled
(see
.ir /proc/sys/kernel/modules_disabled
in
.br proc (5)).
.tp
.b ewouldblock
other modules depend on this module;
or,
.br o_nonblock
was specified in
.ir flags ,
but the reference count of this module is nonzero and
.b o_trunc
was not specified in
.ir flags .
.sh conforming to
.br delete_module ()
is linux-specific.
.sh notes
the
.br delete_module ()
system call is not supported by glibc.
no declaration is provided in glibc headers, but, through a quirk of history,
glibc versions before 2.23 did export an abi for this system call.
therefore, in order to employ this system call,
it is (before glibc 2.23) sufficient to
manually declare the interface in your code;
alternatively, you can invoke the system call using
.br syscall (2).
.pp
the uninterruptible sleep that may occur if
.br o_nonblock
is omitted from
.ir flags
is considered undesirable, because the sleeping process is left
in an unkillable state.
as at linux 3.7, specifying
.br o_nonblock
is optional, but in future kernels it is likely to become mandatory.
.ss linux 2.4 and earlier
in linux 2.4 and earlier, the system call took only one argument:
.pp
.bi "   int delete_module(const char *" name );
.pp
if
.i name
is null, all unused modules marked auto-clean are removed.
.pp
some further details of differences in the behavior of
.br delete_module ()
in linux 2.4 and earlier are
.i not
currently explained in this manual page.
.sh see also
.br create_module (2),
.br init_module (2),
.br query_module (2),
.br lsmod (8),
.br modprobe (8),
.br rmmod (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2003 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th strtoimax 3 2021-03-22 "" "linux programmer's manual"
.sh name
strtoimax, strtoumax \- convert string to integer
.sh synopsis
.nf
.b #include 
.pp
.bi "intmax_t strtoimax(const char *restrict " nptr ", char **restrict " endptr ,
.bi "                   int " base );
.bi "uintmax_t strtoumax(const char *restrict " nptr ", char **restrict " endptr ,
.bi "                   int " base );
.fi
.sh description
these functions are just like
.br strtol (3)
and
.br strtoul (3),
except that they return a value of type
.i intmax_t
and
.ir uintmax_t ,
respectively.
.sh return value
on success, the converted value is returned.
if nothing was found to convert, zero is returned.
on overflow or underflow
.b intmax_max
or
.b intmax_min
or
.b uintmax_max
is returned, and
.i errno
is set to
.br erange .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br strtoimax (),
.br strtoumax ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh see also
.br imaxabs (3),
.br imaxdiv (3),
.br strtol (3),
.br strtoul (3),
.br wcstoimax (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/ioprio_set.2
.so man3/strerror.3
.so man3/ptsname.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified mon apr 12 12:54:34 1993, david metcalfe
.\" modified sat jul 24 19:13:52 1993, rik faith (PI:EMAIL)
.th index 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
index, rindex \- locate character in string
.sh synopsis
.nf