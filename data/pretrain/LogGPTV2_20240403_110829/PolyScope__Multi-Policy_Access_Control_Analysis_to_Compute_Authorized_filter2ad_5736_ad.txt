### Challenges in File Access and Integrity Violations

The system encounters difficulties in accessing files located in certain directories, such as `/data`. According to Table 1 in their paper [22], approximately 75% of the DAC configurations in `/data` cannot be retrieved, which we extract using our scripts.

### TE IV Computation

To compute per-subject adversaries in Step 1 of Figure 2, PolyScope leverages the integrity wall [50] and Android privilege levels [17], as described in Section 5.2. We follow the procedure defined in the integrity wall paper for Linux [50], with the addition of objects that the Android kernel integrity depends on (e.g., `rootfs` and `selinuxfs`) to the set of kernel objects. Since the SEAndroid TE policy is immutable (i.e., it only changes with system upgrades), Step 2 of Figure 2 is not required. In Step 3, PolyScope computes the integrity violations authorized by the TE policy, as specified in Section 5.4.

### TE IV Validation

After identifying the TE IVs, PolyScope validates whether these IVs are also authorized by the remaining Android access control policies: Unix DAC, SEAndroid MLS, and Android permissions. Step 1 of Figure 2 is not rerun. In Step 2, PolyScope converts Android permissions to authorized DAC subgroups for adversary expansion and identifies the objects owned by each subject for victim expansion, as described in Section 5.3. In Step 3, PolyScope determines whether the SEAndroid MLS and DAC policies also authorize the victim and adversary of each IV. As mentioned, the set of TE IVs can be partitioned to validate them in parallel.

### Compute Attack Operations

PolyScope then computes the attack operations for the IVs using the filesystem and program configurations, as described in Section 5.5. It collects relevant filesystem configurations by parsing the associated mount options and relevant program configurations (e.g., whether the victim includes a recommended defense, the `FileProvider` class) by reverse engineering the application’s APK package to detect the presence of the `FileProvider` class. We validated the ability or inability to perform attack operations and found no discrepancies.

### Testing for Vulnerabilities

The ultimate goal is to determine whether the victim is vulnerable to any of the attack operations. A key challenge is to determine whether and when a victim may actually access a resource associated with an attack operation. Just because a potential victim may be authorized to use a resource does not mean it ever uses that resource. Even if a potential victim may use a resource associated with an attack operation, we need to determine the conditions under which such access is performed. Thus, detecting vulnerabilities often requires runtime testing.

The major challenge is to drive the victim subjects’ programs to cause all file usage operations, akin to fuzz testing. Developing a fuzz testing approach for file operations is outside the scope of this paper. Instead, we use available tools: (1) Android Exerciser Monkey; (2) Compatibility Testing Suite (CTS); and (3) Chizpurfle [23]. We use the Android Exerciser Monkey and CTS to emulate normal phone usage and Chizpurfle to drive Android system services. This approach allows us to find the vulnerabilities described in Section 7.6. We discuss how to employ runtime systematically in the future in Section 8.1.

### Evaluation

Table 2 summarizes the highlights of our evaluation for nine fresh installs of Android releases, demonstrating the importance of computing per-victim adversaries, permission expansion, and attack operations. Table 2 shows the relative effort to vet Android releases for vulnerabilities using the output of prior analyses [22, 10] (Authorized Data Flows), output of a past analysis [25, 50] using PolyScope’s method for computing adversaries (IVs for PolyScope Adversaries), and two new analyses performed by PolyScope (PolyScope IVs after Expansion and PolyScope IVs with Operations) that provide a more accurate accounting of the threats victims may face. The counts are shown in terms of subject-object pairs, as subjects and objects are defined in Section 5.1. For data flows, we sum the objects that each subject is authorized to use (i.e., in a read-like operation, see Section 2.2). For integrity violations (IVs), we only count the data flows to objects that another subject classified as an adversary is authorized to modify (i.e., in a write-like operation, see Section 2.2).

#### Table 2: Summary of Impact of PolyScope Analyses

| Device | Authorized Data Flows | IVs for PolyScope Adversaries | PolyScope IVs after Expansion | PolyScope IVs with Operations |
|--------|-----------------------|-------------------------------|--------------------------------|--------------------------------|
| Nexus 5x 7.0 | 204,241 | 167 | 297 | 80 |
| Nexus 5x 8.0 | 166,027 | 372 | 350 | 478 |
| Pixel3a 9.0 | 156,315 | 69 | 1,139 | 927 |
| Pixel3a 10.0 | 161,689 | 71 | 1,059 | 898 |
| Pixel3a 11.0 | 169,884 | 264 | 2,127 | 1,764 |
| Mate9 8.0 | 240,916 | 860,508 | 289,238 | 259,992 |
| Mate9 9.0 | 223 | 1,682 | 1,331 | 2,160 |
| Mix2 9.0 | 166 | 1,566 | 1,327 | 1,777 |
| Galaxy S8 9.0 | 192 | 2,304 | 1,979 | 2,137 |

- **Total Attack Operations**: Sum of Attack Operations (in Table 4)
- **Unit**: The relation {Subject, Object}, where subjects and objects are defined in Section 5.1
- **Notes**:
  - **1**: Objects authorized for use by Subjects
  - **2**: Authorized Data Flows where Object is modifiable by at least one PolyScope per-victim adversary, see Section 5.2
  - **3**: PolyScope Integrity Violations (sum for all types) as defined in Section 5.4
  - **4**: PolyScope Integrity Violations in at least one Attack Operation, see Section 5.5
  - **5**: Sum of Attack Operations (in Table 4)
  - **6**: Assumes opting out of Android scoped storage, see Section 8.2
  - **7**: Does not account for cases blocked by Android scoped storage, see Section 8.2

### Detailed Analysis

#### 7.1 TE IV Computation

**RQ1: How many integrity violations are found when using the SEAndroid MAC TE policy alone in TE IV Computation?**

PolyScope’s implementation computes IVs initially using only the SEAndroid MAC TE policy. Android has relied heavily on MAC TE to protect important daemons and system services since its introduction in Android 5.0, as shown by the number of MAC TE allow rules in Table 3. Due to its immutable nature, the MAC TE policy provides a foundation for Android access control that other policies can modify.

The three TE rows (rows 2-4) of Table 3 show the number of binding-IVs, write-IVs, and read-IVs for the MAC TE policy using the rules in Section 5.4. We note that in counting the TE IVs, we only use the MAC TE labels to identify subjects and objects, which results in coarser-grained subjects and objects than Section 5.1. Thus, the TE IV counts presented represent a lower bound. We found this sufficient for the qualitative comparison with IV counts after TE IV validation below. The pathname-IV count is not shown as it is the same as the binding-IV count, as the TE policy produces no additional pathname-IVs because permission expansion is not allowed for the MAC TE policy.

#### 7.2 TE IV Validation

**RQ2: How are the number of integrity violations (IVs) reduced after TE IV Validation from those found in the TE IV Computation?**

The next four rows (rows 5-8) in Table 3 show the number of IVs for the four IV types in Section 5.4 after considering TE IV Validation (Valid) using other Android access control policies. We see that the number of TE IVs (rows 2-4) is much greater than the number of valid IVs (rows 5-8), even accounting for the coarser subjects and objects applied in the TE IV counts.

Recall in Table 2 that the total IV counts after permission expansion are much higher across every release, showing that more testing to detect vulnerabilities is required than just testing IVs from the current policy. However, we observed that the SEAndroid MLS policy effectively prevents several opportunities for victim permission expansion for objects in application-private directories (e.g., `/data/data`). If MLS can be effectively applied to Android filesystems more broadly, it may greatly reduce the opportunities for victim permission expansion.

#### 7.3 IVs for OEM Customizations

**RQ3: How do OEM customizations impact the Android integrity violation counts across vendors?**

To make their products more attractive, OEMs customize Android images to provide vendor-specific, value-added functionality and more attractive user interfaces. We are interested in seeing how OEM customization affects the number of integrity violations created when the OEMs have to customize their Android access control policies. The devices of choice are as follows: Huawei Mate9 on Android O and Android P, Xiaomi Mix2 on Android O and Android P, and Samsung Galaxy S8 on Android P. The results are shown in the right half of Table 3.

We can see heavy customization of the MAC policy. Every OEM has a significantly greater number of MAC allow rules than the Google MAC policies in the left half of Table 3. This suggests that OEMs have introduced many new domains for their own services and apps and granted them a wide variety of permissions.

- **Note**: 25% of TE IVs cannot be validated because the MAC-to-DAC mapping for some subjects is not known, see Section 8.1. Although this is a large number of TE IVs, the combination of policies still reduces the Valid IV counts much more significantly.

### Table 3: Integrity Violations across Vendor Releases

| Device | Binding-IVs | Write-IVs | Read-IVs | Pathname-IVs |
|--------|-------------|-----------|----------|--------------|
| Nexus 5x 7.0 | 64,830 | 133,545 | 411 | 2,373 |
| Nexus 5x 8.0 | 438 | 19 | 80 | 22 |
| Pixel3a 9.0 | 398 | 478 | 191,556 | 1,130 |
| Pixel3a 10.0 | 4,296 | 693 | 56 | 85 |
| Pixel3a 11.0 | 32 | 1,054 | 1,139 | 38,845 |
| Mate9 8.0 | 1,513 | 3,940 | 705 | 63 |
| Mate9 9.0 | 87 | 37 | 972 | 1,059 |
| Mix2 8.0 | 1,342 | 3,369 | 513 | 913 |
| Mix2 9.0 | 1,014 | 190 | 1,113 | 2,127 |
| Galaxy S8 9.0 | 250,220 | 2,067 | 38,845 | 1,513 |

This comprehensive evaluation demonstrates the effectiveness of PolyScope in identifying and validating integrity violations, providing a more accurate and detailed understanding of the security landscape in Android.