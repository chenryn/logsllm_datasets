### Optionally Informing the Display Server of Drag Actions

When a drag action is initiated, the display server can be optionally informed. In this case, subsequent `MouseMove` events may be delivered to other windows as `DragOver` events. The final `MouseUp` event, which completes the drag-and-drop sequence, is delivered to both the originating and destination windows.

#### Points to Note Regarding Covert Channels and Multilevel Security:

1. **Display Server Awareness**: The display server recognizes that the drag-and-drop sequence is a precursor to a data transfer. `DragOver` and `MouseUp` events are only delivered to the window under the mouse if that window is permitted to receive the implied data transfer.
   
2. **Limited Covert Channel**: `DragOver` events do not constitute a significant covert channel because they are limited by the rate of user input.

### Memory Deallocation and Signaling

The deallocation of the memory region by the receiver can be used for signaling purposes through the observation of deallocation latency.

### 6.3 MLS Format Negotiation

In multilevel secure (MLS) systems, format negotiation can be a challenge for both "cut and paste" and "drag and drop" operations. The client is prepared to provide multiple formats but does not wish to render all of them, as most will not be used. The recipient has a (hopefully intersecting) set of formats it wishes to receive, including at least one common format and the native format for re-editing. The typical approach is for the sender to send a list of transmissible formats and the recipient to reply with the subset it wants. This is acceptable in a single-compartment environment but not in an MLS environment, where downward communication is not permitted.

#### Eliminating Downward Communication

In systems like EROS, which provide a confinement mechanism, an elegant solution is feasible. EROS includes a constructor service that instantiates new programs and verifies that they have no outward communication channels. This allows us to divide the problem into two parts:

1. **Transmitting the Native Format**: The main issue is durability. The memory region containing the native format must be available for an unbounded amount of time, and a higher-level recipient cannot inform the lower-level sender that it is done with the data. Our solution is to require every sender to supply a constructor for initially empty, confined memory regions built from sender storage. The native format is serialized to this region, frozen, and a capability to it is transferred to the recipient. The recipient is motivated to copy the content into its own memory region to retain it, as the sender can reclaim the storage at any time.

2. **Transmitting Converters**: We cannot simply transfer a vector of constructor capabilities for converter programs, as the sender could alter some vector elements. Instead, the sender transmits a constructor to a single, confined conversion agent. This agent can produce the desired formats, and the storage needed for conversion is provided by the recipient. All constructors are created when the application is installed, eliminating the need for paste-time instantiation of converters.

### Final Cut and Paste Transfer Protocol

1. **Memory Region Instantiation**: The display server creates a new memory region using the constructor supplied by the sender and provides the resulting capability to the sender.
2. **Native Format Writing**: The sender writes its native paste format to the new memory region and informs the display server. It also provides a capability to the converter constructor.
3. **Freezing the Memory Region**: The display server freezes the memory region, preventing further modifications.
4. **Capability Transfer**: The display server provides both the native memory region capability and the converter constructor capability to the recipient.

This protocol supports full format negotiation without downward communication.

### 7. User Interaction

The window system must mediate certain user interactions, primarily related to trusted paths. We consider three issues: title bars, window labeling, and pass phrase entry.

#### 7.1 The Title Bar

Title bar control is a matter of whether "minimize" means informing the application or telling it. In EWS, these functions are directives, and the display server handles them. Title bar and border rendering are performed by the display server using a fixed, compiled-in font to prevent font forgery.

#### 7.2 Window Labeling

In an MLS environment, window security labels are required. EWS addresses the issue of visual forgery by prominently featuring the focus window's border with a bright color and dimming non-focus windows. A band at the bottom of the display is reserved for labeling feedback.

#### 7.3 Pass Phrase Entry

Pass phrases in a windowed environment require trusted path interaction. In EROS, many operations that appear to need a trusted path do not, due to the capability system. Trusted path interactions are necessary for password prompts, cryptographic key pass phrases, and login authentication. These components must be trusted subsystems, and EWS provides a distinguished "trusted client session" interface for such interactions.

### 8. Vulnerability Analysis

The EROS Window System (EWS) has significantly reduced vulnerability compared to X11 and Trusted X due to several architectural decisions:

1. **Rendering Responsibility**: The display server only implements bitblt and rectfill operations, which have mature, well-tested implementations.
2. **Simplified Event Handling**: The event handling logic is simplified.
3. **Elimination of Authentication and Network Responsibilities**: These responsibilities are removed from the server.
4. **Accountable, Confined Information Transfer**: The X11 communication model is abandoned in favor of accountable, confined information transfer.

While these changes reduce server vulnerability, clients now carry additional content, including a rendering library and a font library. The rendering library does not introduce substantial new threats, but the font library is a greater concern. The current EWS prototype is vulnerable to resource exhaustion, and we plan to restrict the total number of simultaneous windows and reserve a subset for trusted applications.

### 9. Usability

A full usability test is beyond the scope of this paper, but an informal test was conducted using a paint program. The test subject, Wesley Vanderburgh, age 4, created a drawing, and his father reported that the delay in generating the image was due to the subject's fine motor function immaturity rather than any deficiency in the window system. The window system has been used in DARPA presentations without difficulty, and a port of the Gtk graphics toolkit is in progress to improve the EROS runtime environment.

### 10. Related Work

Despite the importance of window systems, there has been little work on their security. EWS mechanisms, combined with the capability underpinnings of EROS, eliminate many vulnerabilities. Ka Ping Yee's work on secure usability design has influenced EWS, and the PERSEUS project aims to provide security guarantees in mobile devices. However, the PERSEUS project faces challenges due to its implementation on the FIASCO kernel, which lacks sufficient security at the microkernel level. Collaboration between the L4 and EROS communities is ongoing to address these issues.