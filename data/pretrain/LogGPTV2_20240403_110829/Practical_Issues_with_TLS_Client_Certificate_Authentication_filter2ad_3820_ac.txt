certiﬁcate and it is being refused by the server at the TLS
handshake level (Firefox and IE do not prevent deadlock
in this situation). To implement CCA logout functionality
in Chrome, the behavior described above can be used as a
workaround. For example, by conﬁguring on the server side
and then requesting in the browser a speciﬁc server resource
that will fail the TLS CCA handshake if requested:
SSLVerifyClient require
SSLVerifyDepth 0
IE,
In the case of
the IE speciﬁc JavaScript
func-
tion document.execCommand() with the parameter
"ClearAuthenticationCache" can be used. However,
it should not be used by responsible web sites, since when
called, not only will the TLS session and client certiﬁcate
choice be deleted, but also all session information including
HTTP cookies and authentication, and not only for the site
that called it but all sites in the current browser session [25].
In our opinion the behavior provided by this function creates
a security issue itself.
Fig. 3: Chrome TLS CCA UI improvements proposed [26]
The lack of a standard JavaScript API that could be called by
web sites to clear the client certiﬁcate choice and TLS session
cache, prevents web sites using TLS CCA from exercising
login and logout functionality as currently available when
HTML form-based password authentication is used.
An alternative solution is to implement the logout functional-
ity in a browser’s user interface (UI). The suggested UI would
show in the browser address bar the client certiﬁcate that has
been used for TLS CCA to the server and would allow the
client certiﬁcate choice to be changed (see Fig. 3) [26].
Unfortunately, we ﬁnd little value in these UI improvements,
since this functionality will not be available in cases where
TLS CCA is used only in the authentication phase or when
TLS CCA is performed by a separate server, since in these
cases, an authenticated web session will be bound to the HTTP
cookie and not to the client certiﬁcate (see Section IV-B4).
Another signiﬁcant usability issue in the multiple client
certiﬁcate use scenario is that the client certiﬁcate selection
windows of the browsers provide client certiﬁcates sorted by
ﬁxed rules and not by their use frequency.
J. Client Certiﬁcate Enrollment
In Estonia, client certiﬁcates are distributed to residents by
including them in their ID card, which is a mandatory identity
document in the form of a smart card. The ID card contains a
public-key certiﬁcate signed by the state-supported CA and the
corresponding RSA key pair that can be used for TLS CCA.
However, it is a wrong assumption that TLS CCA requires
the use of PKI and CAs. A client certiﬁcate that is issued by
a trusted CA is required only in cases where the client has no
account on a server and where the server would be required to
know the user’s government issued identity for opening such
an account. Most service providers only care about a user’s
identity established after the registration process. Therefore,
in the process of account registration or after that, any service
provider can register a client’s certiﬁcate, and this can be used
to authenticate the user thereafter. The server can register the
client certiﬁcate by performing TLS CCA with a certiﬁcate
chosen by the user, or if the user does not have or does not
want to use an existing certiﬁcate, the server can request the
user’s browser to perform key pair generation and certiﬁcate
enrollment using the HTML5  element supported
by both Chrome and Firefox. If the user has a cryptographic
token (e.g., a smart card) and a proper PKCS#11 module
loaded into the browser, the RSA key pair can be generated
and the certiﬁcate loaded right into the token. In IE, similar
functionality exists using CertEnroll ActiveX control [27].
Using a client certiﬁcate just as a transport for a public key that
is bound to the user’s account does not beneﬁt from centralized
certiﬁcate revocation and replacement, but password-based
authentication does not have these beneﬁts either.
Compared to password authentication, CCA has a client
certiﬁcate portability problem. Client certiﬁcates loaded into
cryptographic tokens are portable; however, modern mobile
devices that are increasingly used for browsing do not have
interfaces for cryptographic tokens, or if they have, the use of
external hardware with mobile devices is rather inconvenient.
Certiﬁcates and their corresponding private keys which are
stored in a browser can be manually exported and imported
in other devices. Unfortunately, Firefox Sync3 – a secure
browser synchronization feature in Firefox, does not pro-
vide synchronization of client certiﬁcates. As an alternative,
password authentication could be used to authenticate to a
service provider in order to obtain a new device-speciﬁc client
certiﬁcate.
K. Security Against Server Impersonation
Recent incidents involving the compromise of trusted CAs
DigiNotar [28] and Comodo [29] and reported misbehavior
of the CAs Trustwave [30] and TURKTRUST [31] show that
MITM attacks using fraudulent certiﬁcates issued by trusted
CAs are very realistic. Even if an attacker is not powerful
enough to obtain a certiﬁcate issued by a trusted CA, he can
perform a MITM attack using a self-generated certiﬁcate and
if the victim clicks through browser security warnings, can
achieve successful impersonation of the legitimate server.
As was stated before,
if the TLS CCA is used, even
a very powerful attacker that can successfully imperson-
ate a legitimate server, cannot reuse the proof given in a
CertificateVerify message to impersonate a victim to
the legitimate server. Unfortunately, such an attacker can still
compromise the client’s account on the legitimate server by
exploiting the design features of modern web browsers, in
particular, the same-origin policy [32] which will not iso-
late client-side scripts that are served over an impersonated
TLS connection to the attacker and client authenticated TLS
connection to the legitimate server. As a result, such an
attacker will be able to execute a cross-site scripting attack
in the context of the legitimate server which is enough to
retrieve information available to the victim’s browser and to
execute actions chosen by the attacker [33]. While the cross-
site scripting exploitation brings additional complexity to the
MITM attack, an attack like this cannot be excluded in highly
targeted attacks.
Note that
this complicated cross-site scripting attack is
required only if the legitimate server requires TLS CCA also
after the authentication phase. If the legitimate server binds the
authenticated session only to an HTTP cookie, the attacker can
impersonate the client by obtaining the HTTP cookie, which
will be disclosed by the victim’s browser’s same-origin policy
sending it over the impersonated TLS connection.
In order to prevent these attacks, a browser’s same-origin
policy should be changed to isolate content that is served
over connections that are authenticated with different server
certiﬁcates. We encourage browser developers to implement
support for a strong locked same-origin-policy, as described
in [33] and enable web sites to opt-in, just as it is possible
to opt-in for the HTTP Strict Transport Security policy [34].
3https://www.mozilla.org/mobile/sync/
8
TABLE I: TLS CCA as deployed by the service providers
running Apache mod_ssl.
Spare
Request
Depth
Timeout
Privacy
Resume
Bind
Validity
0
5
2
4
0
0
4
0
0
0
0
0
4
0
0
5
0
0
105
0
31
2
0
0
2
1
0
31
7
73
9
0
0
0
2
0
0
2
0
0
1
2
3
0
0
0
2
0
1
0
9
1
2
0
0
0
0
0
0
0
0
0
2
0
0
optional
optional
optional
require
require
optional
optional
require
optional
require
require
optional
require
require
optional
require
optional
require
optional
require
require
optional
optional
optional
require
require
require
require
require
require
optional
require
require
require
require
require
optional
require
require
require
optional
require
require
require
require
optional
require
require
require
require
optional
optional
require
optional
require
require
require
optional
require
require
optional
optional
require
require
require
3
2
2
3
5
3
3
2
2
2
2
6
2
3
2
2
3
2
6
10
3
2
2
3
2
2
2
2
2
2
3
3
2
2
3
3
2
3
9
3
2
2
3
2
2
2
3
2
3
2
3
3
3
2
2
2
3
3
3
3
2
3
2
2
2
–
–
–
–
–
40 sec
–
–
–*
–
9 hour
–
–
–
–
–*
–
–*
–
–*
–
–
–
–*
–
–
–*
–
–
–
–
–
–
⇡30 min
⇡15 min
–
⇡15 min
9 hour
⇡30 min
–
–
–
–
–*
–*
–*
–
–
–*
–
–
–
–
–
–
–
–
–