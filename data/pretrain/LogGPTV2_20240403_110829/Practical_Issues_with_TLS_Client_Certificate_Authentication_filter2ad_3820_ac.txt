### Certificate and TLS Handshake Refusal

When a server refuses a certificate during the TLS handshake, browsers like Firefox and Internet Explorer (IE) do not prevent deadlock. To implement Client Certificate Authentication (CCA) logout functionality in Chrome, a workaround can be employed. This involves configuring the server to fail the TLS CCA handshake when a specific resource is requested, using the following settings:

```apache
SSLVerifyClient require
SSLVerifyDepth 0
```

In the case of IE, the JavaScript function `document.execCommand()` with the parameter `"ClearAuthenticationCache"` can be used. However, this method should be avoided by responsible websites because it clears not only the TLS session and client certificate choice but also all session information, including HTTP cookies and authentication, for all sites in the current browser session [25]. This behavior introduces a security risk.

### Proposed UI Improvements for Chrome

The lack of a standard JavaScript API to clear the client certificate choice and TLS session cache prevents websites from implementing login and logout functionality as seamlessly as with HTML form-based password authentication. An alternative solution is to implement the logout functionality in the browser's user interface (UI). The proposed UI would display the client certificate used for TLS CCA in the browser address bar and allow users to change their certificate choice (see Fig. 3) [26].

Unfortunately, these UI improvements have limited value in scenarios where TLS CCA is used only during the authentication phase or when TLS CCA is performed by a separate server. In such cases, an authenticated web session is bound to the HTTP cookie rather than the client certificate (see Section IV-B4).

Another usability issue is that the client certificate selection windows in browsers sort certificates by fixed rules rather than by their use frequency.

### Client Certificate Enrollment

In Estonia, client certificates are distributed to residents via their ID cards, which contain a public-key certificate signed by a state-supported CA and the corresponding RSA key pair for TLS CCA. However, it is a misconception that TLS CCA requires PKI and CAs. A client certificate issued by a trusted CA is only necessary if the client has no account on the server and the server needs to know the user’s government-issued identity.

Most service providers only care about a user’s identity established after registration. Therefore, any service provider can register a client’s certificate during or after the registration process. The server can register the client certificate by performing TLS CCA with a user-chosen certificate or, if the user does not have or does not want to use an existing certificate, the server can request the user’s browser to generate a key pair and enroll a certificate using the HTML5 `<keygen>` element, supported by both Chrome and Firefox. If the user has a cryptographic token (e.g., a smart card) and a proper PKCS#11 module loaded into the browser, the RSA key pair can be generated and the certificate loaded directly into the token. In IE, similar functionality exists using the CertEnroll ActiveX control [27].

Using a client certificate as a transport for a public key bound to the user’s account does not benefit from centralized certificate revocation and replacement, but neither does password-based authentication.

### Portability of Client Certificates

Compared to password authentication, CCA faces a portability issue. Client certificates stored in cryptographic tokens are portable, but modern mobile devices, increasingly used for browsing, often lack interfaces for cryptographic tokens or make their use inconvenient. Certificates and their private keys stored in a browser can be manually exported and imported on other devices. Unfortunately, Firefox Sync, a secure browser synchronization feature in Firefox, does not support the synchronization of client certificates. As an alternative, password authentication could be used to authenticate with a service provider to obtain a new device-specific client certificate.

### Security Against Server Impersonation

Recent incidents involving the compromise of trusted CAs, such as DigiNotar [28] and Comodo [29], and reported misbehavior by CAs like Trustwave [30] and TURKTRUST [31], demonstrate that Man-in-the-Middle (MITM) attacks using fraudulent certificates issued by trusted CAs are realistic. Even if an attacker cannot obtain a certificate from a trusted CA, they can perform a MITM attack using a self-generated certificate, and if the victim ignores browser security warnings, the attacker can impersonate the legitimate server.

If TLS CCA is used, even a powerful attacker who successfully impersonates a legitimate server cannot reuse the proof given in a `CertificateVerify` message to impersonate the victim to the legitimate server. However, such an attacker can still compromise the client’s account on the legitimate server by exploiting the same-origin policy of modern web browsers. This allows the attacker to execute a cross-site scripting (XSS) attack in the context of the legitimate server, enabling them to retrieve information and execute actions chosen by the attacker [33].

To prevent these attacks, the browser's same-origin policy should be changed to isolate content served over connections authenticated with different server certificates. We encourage browser developers to implement support for a strong locked same-origin policy, as described in [33], and enable websites to opt-in, similar to the HTTP Strict Transport Security (HSTS) policy [34].

### Deployment of TLS CCA by Service Providers

The table below summarizes the deployment of TLS CCA by service providers running Apache `mod_ssl`.

| Spare | Request | Depth | Timeout | Privacy | Resume | Bind | Validity |
|-------|---------|-------|---------|---------|--------|------|----------|
| 0     | 5       | 2     | 4       | 0       | 0      | 4    | 0        |
| 0     | 0       | 0     | 0       | 0       | 0      | 4    | 0        |
| 5     | 0       | 0     | 105     | 0       | 31     | 2    | 0        |
| 0     | 0       | 2     | 1       | 0       | 31     | 7    | 73       |
| 9     | 0       | 0     | 0       | 2       | 0      | 0    | 2        |
| 0     | 0       | 1     | 2       | 3       | 0      | 0    | 0        |
| 2     | 0       | 1     | 0       | 9       | 1      | 2    | 0        |
| 0     | 0       | 0     | 0       | 0       | 0      | 0    | 2        |
| 0     | 0       | 0     | 0       | 0       | 0      | 0    | 0        |
| 2     | 0       | 0     | 0       | 0       | 0      | 0    | 0        |

**Certificate Verification:**
- **Optional:** 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
- **Require:** 5, 5, 5, 5, 5, 5, 5, 5, 5, 5

**Timeout:**
- **40 sec:** 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
- **9 hour:** 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
- **30 min:** 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
- **15 min:** 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

This table provides an overview of how different service providers configure their TLS CCA settings.