(2)  the  application  executing  in  the  SIFT  environment  but 
without  fault  injection.    The  difference  between  these  two 
measures provides the overhead that the SIFT processes impose 
on the application.  Table 2 shows that the SIFT environment 
adds  less  than  two  seconds  to  the  perceived  application 
execution  time.    The  actual  execution  time  overhead  is  not 
statistically  significant.    The  sections  that  follow  add  a  third 
measurement,  namely  the  application  execution  time  in  the 
presence  of 
this 
measurement to the baseline measurement gives the amount of 
overhead as seen by the application due to recovery. 
  Comparing 
failures  and 
recovery. 
The mean application execution time and recovery time are 
calculated for each fault model. Ninety-five percent confidence 
intervals 
all 
measurements. 
(t-distribution) 
calculated 
also 
are 
for 
User  submits
app job
App starts
Setup the 
environment
Actual application
execution time
Perceived application
execution time
App ends
User notified
of termination
ARMORs
uninstalled
time
Figure 2: Perceived vs. actual execution time 
Table 2: Baseline application execution time 
Actual 
Without SIFT 
With  SIFT 
Perceived 
75.71 ± 0.65 
77.97 ± 0.48 
75.71 ± 0.65 
75.74 ± 0.48 
4  Crash and Hang Failures 
This  section  presents  results  from  SIGINT  and  SIGSTOP 
injections into the application and SIFT processes, which were 
used to evaluate the SIFT environment’s ability to handle crash 
and hang failures.  We first summarize the major findings from 
over 700 crash and hang injections: 
•
= All  injected  errors  into  both  the  application  and  SIFT 
processes were recovered. 
•
= Recovering from errors in SIFT processes imposed a mean 
overhead of 5% to the application’s actual execution time.  
This  5%  overhead  includes  25  cases  out  of  roughly  700 
runs in which the application was forced to block or restart 
because  of 
the  unavailability  of  a  SIFT  process.  
Neglecting those cases in which the application must redo 
lost  computation,  the  overhead  imposed  by  a  recovering 
SIFT process was insignificant. 
•
= Correlated  failures  involving  a  SIFT  process  and  the 
application  were  observed.    In  25  cases,  crash  and  hang 
failures  caused  a  SIFT  process  to  become  unavailable, 
prompting the application to fail when it did not receive a 
timely  response  from  the  failed  SIFT  process.    All 
correlated failures were successfully recovered. 
Results for 100 runs per target are summarized in Table 3.  
In  some  cases,  the  injection  time  (used  to  determine  when to 
inject the error) occurred after the application completed.  For 
these runs, no error was injected.  The row “Baseline” reports 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:44 UTC from IEEE Xplore.  Restrictions apply. 
the  application  execution  time  with  no  fault  injection4.    One 
hundred  runs  were  chosen  in  order  to  ensure  that  failures 
occurred  throughout  the  various  phases  of  an  application’s 
execution 
idle  SIFT  environment  before 
application execution, application submission and initialization, 
application execution, application termination, and subsequent 
cleanup of the SIFT environment). 
(including  an 
Table 3: SIGINT/SIGSTOP injection results 
Target 
Failures 
Successful 
Recoveries 
App. Exec. Time  (s) 
Actual 
Perceived 
Recovery 
Time (s) 
Baseline 
Application 
FTM 
Execution ARMOR 
Heartbeat ARMOR 
Baseline 
Application 
FTM 
Execution ARMOR 
Heartbeat ARMOR 
- 
100 
81 
100 
97 
- 
84 
97 
98 
77 
SIGINT 
74.78 ±  0.55 
89.80 ± 1.50 
79.60 ± 1.61 
77.91 ± 1.01 
75.26 ± 0.92 
72.68 ± 0.49 
87.88 ± 1.50 
73.89 ± 0.25 
75.98 ± 1.00 
74.39 ± 0.96 
SIGSTOP 
71.96 ± 0.32 
70.03 ± 0.27 
112.21 ± 1.87  110.21 ± 1.87 
70.09 ± 0.88 
76.20 ± 1.94 
85.01 ±  4.41 
82.21 ± 4.28 
71.88 ±  0.24   70.24 ± 0.24 
- 
100 
81 
100 
97 
- 
84 
97 
98 
77 
- 
0.48 ± 0.05 
0.64 ± 0.16 
0.61 ± 0.07 
0.47 ± 0.12 
- 
0.47 ± 0.05 
0.79 ± 0.15 
0.63 ± 0.15 
0.56 ± 0.21 
4.1  Application Recovery 
Hangs are the most expensive application failures in terms 
of lost processing time.  As discussed in section 2.3, application 
hangs  are  detected  using  a  polling  technique  in  which  the 
Execution  ARMOR  executes  a  thread  that  wakes  up  every  20 
seconds  to  check  the  value  of  a  counter  incremented  by 
progress  indicator messages sent by the application.  Because 
the  counter  is  polled  at  fixed  intervals,  the  error  detection 
latency for hangs can be up to twice the checking period5.  This 
latency can be decreased by instrumenting the application with 
progress indicators at a finer granularity, but the unavailability 
of source code for some of the libraries used by the Mars Rover 
application preclude fine-grained instrumentation. 
In  addition  to rollback recovery, the REE applications are 
expected  to  support  forward  recovery.    The  REE applications 
are designed to operate on new data each iteration cycle, so the 
application can either recompute the interrupted cycle or wait 
for  new  data  in  the  next  cycle  when  an  error  occurs.    Our 
experiments assume the former, since input data is available for 
reprocessing when the application restarts.  If the application is 
required 
to  complete  a  fixed  number  of  cycles  before 
completing,  however,  the  execution  time  will  be  the  same on 
average for both rollback and forward recovery. 
4.2  SIFT Environment Recovery 
FTM.  The perceived execution time for the application is 
extended if (1) the FTM fails while setting up the environment 
before  the  application  execution  begins  or  (2)  the  FTM  fails 
4   Although the processing boards were reserved for our experiments, the 
remote  disk  was  shared  with  other  users.    Approximately  30  baseline 
runs  were  conducted  between  each  set  of  experiments  for  the  fault 
model,  and  the  average  baseline  measurements  are  reported  for  each 
fault model.  When experiments across fault models were run during a 
timeframe in which the external workload was relatively constant, only 
one baseline measurement is given. 
5   Consider the case in which the application reports progress immediately 
after the last check by the Execution ARMOR and then hangs.  Progress 
will  appear  to  have  been  made  during  the  next  time  by  the Execution 
ARMOR  check—only  during  the  second  check  from  the  hang  will  the 
Execution ARMOR truly detect that no progress has been made. 
while cleaning up the environment and notifying the Spacecraft 
Control  Computer  that  the  application  terminated. 
  The 
application  is  decoupled  from  the  FTM’s  execution  after 
starting,  so  failures  in  the  FTM  do  not  affect  it.    The  only 
overhead in actual execution time originates from the network 
contention during the FTM’s recovery, which lasts for only 0.6-
0.7 s. 
failure. 
An  FTM-application  correlated 
  The  error 
injections also revealed a correlated failure in which the FTM 
failure  caused  the  application  to  restart  in  2  of  the  178  runs.  
Recall  that  during  the  setup  phase  the  FTM  installs  an 
Execution ARMOR and the MPI process with rank 0 on the first 
node.  The MPI process then installs the other MPI process on 
the second node.  The rank 0 process sends the process ID of 
the other MPI process to the Execution ARMOR on the second 
node via the FTM.  If the FTM fails during this period, then the 
rank 0 MPI process times out waiting for the other process to 
start (i.e., the MPI application aborts).  Once the FTM recovers, 
the application is restarted. 
The  SIFT  environment  is  able  to  recover  from  this 
correlated  failure  because  the  components  performing  the 
detection  (Heartbeat  ARMOR  detecting  FTM  failures  and 
Execution  ARMOR  detecting  application  failures)  are  not 
affected  by  the  failures.    The  Execution  ARMOR  resends  the 
“application-failed”  message  to  the  FTM  until  it  receives  an 
acknowledgment.    Once  recovered,  the  FTM  receives  the 
Execution ARMOR’s message and restarts the application.  
Execution  ARMOR.  Of the 198 crash/hang errors injected 
into the Execution ARMORs, 175 required recovery only in the 
Execution  ARMOR.    For  these  runs,  the  application  execution 
overhead was negligible.  The overhead reported in Table 3 (up 
to 10% for hang failures) resulted from the remaining 23 cases 
in which the application was forced to restart. 
An Execution ARMOR-application correlated failure.  If the 
application process attempted to contact the Execution ARMOR 
(e.g.,  to  send  progress  indicator  updates  or  to  notify  the 
Execution  ARMOR  that  it  is  terminating  normally)  while  the 
ARMOR  was  recovering,  the  application  process  blocked  until 
the Execution ARMOR completely recovered.  Because the MPI 
processes are tightly coupled, a correlated failure is possible if 
the  Execution  ARMOR  overseeing  the  other  MPI  process 
diagnosed  the  blocking  as  an  application  hang  and  initiated 
recovery. 
This  correlated  failure  occurred  most  often  when  the 
Execution  ARMOR  hung (i.e., due to SIGSTOP injections): 22 
correlated failures were due to SIGSTOP injections as opposed 
to 1 correlated failure resulting from an ARMOR crash (i.e., due 
to  SIGINT  injections).    This  is  because  an  Execution  ARMOR 
crash  failure  is  detected  immediately  by  the  daemon  through 
the  Execution  ARMOR 
operating  system  calls,  making 
unavailable for only a short time.  Hangs, however, are detected 
via a 10-second heartbeat.  Although increasing the daemon-to-
Execution ARMOR heartbeat frequency can reduce the detection 
latency, care must be taken to avoid false alarms. 
5  Register and Text-Segment Injections 
This section expands the scope of the injections to further 
stress the detection and recovery mechanisms by allowing for 
the possibility of checkpoint corruption and error propagation 
to another process.  Results from approximately 9,000 single-
bit  errors  into  the  register  set  and  text  segment  of  the 
application and SIFT processes show that: 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:44 UTC from IEEE Xplore.  Restrictions apply. 
•
= Most  register  and  text-segment  errors  led  to  crash  and 
the  SIFT 
recovered  by 
that  were 
failures 
hang 
environment. 
•
= Eleven of the approximately 700 observed failures led to 
system  failures  in  which  either  the  application  did  not 
complete or the SIFT environment did not detect that the 
application  successfully  completed.    These  11  system 
failures  resulted  from  injected  errors  that  corrupted  an 
ARMOR’s  checkpoint  or  propagated  outside  the  injected 
process. 
•
= Text-segment  errors  were  more likely than register errors 
to  lead  to  system  failures.    This  was  because  values  in 
registers  typically  had  a  shorter  lifetime  (i.e.,  they  were 
either never used or quickly overwritten) when compared 
to information stored in the text segment. 
Table  4  summarizes  the  results  of  approximately  6,000 
register injections and 3,000 text-segment injections into both 
the  application  and  ARMOR  processes.    Failures  are  classified 
into  four  categories:  segmentation  faults,  illegal  instructions, 
hangs, and errors detected via assertions.  The second column 
in  Table  4  gives  the  number  of  successful  recoveries  vs.  the 
number of failures for each set of experiments. Errors that were 
not successfully recovered led to system failures (4 due to FTM 
failures,  5  due  to  Execution  ARMOR  failures,  and  2  due  to 
Heartbeat ARMOR failures). 
Table 4: Register and text-segment injection results
to 
text-segment injections and four from register injections.  Both 
the  FTM  and  the  application  recovered  from  all  seven 
correlated failures. 
Execution ARMOR recovery.  Three register injections and 
two  text-segment  injections  into  the  Execution  ARMOR  led  to 
system failure.  In each of these cases, the error propagated to 
other  ARMOR  processes  or 
the  Execution  ARMOR’s 
checkpoint. 
One  text-segment  injection  and  three  register  injections 
caused errors in the Execution ARMOR to propagate to the FTM 
(i.e.,  the  error  was  not  fail-silent).    Although  the  Execution 
ARMOR did not crash, it sent corrupted data to the FTM when 
the  application  terminated,  causing  the  FTM  to  crash.    The 
FTM state in its checkpoint was not affected by the error, so the 
FTM was able to recover to a valid state.  Because the FTM did 
not  complete  processing  the  Execution  ARMOR’s  notification 
message, the FTM did not send an acknowledgment back to the 
Execution ARMOR.  The missing acknowledgment prompted the 
Execution  ARMOR  to  resend  the  faulty  message,  which  again 
caused the FTM to crash.  This cycle of recovery followed by 
the retransmission of faulty data continued until the run timed 
out. 
One  of  the  text-segment  injections  caused  the  Execution 
ARMOR to save a corrupted checkpoint before crashing.  When 
the  ARMOR  recovered,  it  restored  its  state  from  the  faulty 
checkpoint and crashed shortly thereafter.  This 
cycle repeated until the run timed out. 
Failure Classification 
App. Exec. Time (s) 