}
}
switch {
case len(a) > len(b):
return 1
case len(a)  b，则结果为 +1。
func Compare(a, b []byte) int {
for i := 0; i  b[i]:
return 1
case a[i]  len(b):
return 1
case len(a)  0 && err == nil {
var nr int
nr, err = r.Read(buf)
n += nr
buf = buf[nr:]
}
return
}
Defer
Go's defer statement schedules a function call (the deferred function) to be run immediately
before the function executing the defer returns. It's an unusual but effective way to deal with
situations such as resources that must be released regardless of which path a function takes
to return. The canonical examples are unlocking a mutex or closing a file.
Go 的 defer 语句用于预设一个函数调用（即推迟执行函数）， 该函数会在执行 defer 的函数
返回之前立即执行。它显得非比寻常， 但却是处理一些事情的有效方式，例如无论以何种路
径返回，都必须释放资源的函数。 典型的例子就是解锁互斥和关闭文件。
// Contents returns the file's contents as a string.
func Contents(filename string) (string, error) {
f, err := os.Open(filename)
if err != nil {
return "", err
}
defer f.Close() // f.Close will run when we're finished.
var result []byte
buf := make([]byte, 100)
for {
n, err := f.Read(buf[0:])
result = append(result, buf[0:n]...) // append is discussed later.
if err != nil {
if err == io.EOF {
break
}
return "", err // f will be closed if we return here.
}
}
return string(result), nil // f will be closed if we return here.
}
34
函数
// Contents 将文件的内容作为字符串返回。
func Contents(filename string) (string, error) {
f, err := os.Open(filename)
if err != nil {
return "", err
}
defer f.Close() // f.Close 会在我们结束后运行。
var result []byte
buf := make([]byte, 100)
for {
n, err := f.Read(buf[0:])
result = append(result, buf[0:n]...) // append 将在后面讨论。
if err != nil {
if err == io.EOF {
break
}
return "", err // 我们在这里返回后，f 就会被关闭。
}
}
return string(result), nil // 我们在这里返回后，f 就会被关闭。
}
Deferring a call to a function such as Close has two advantages. First, it guarantees that you
will never forget to close the file, a mistake that's easy to make if you later edit the function
to add a new return path. Second, it means that the close sits near the open, which is much
clearer than placing it at the end of the function.
推迟诸如 Close 之类的函数调用有两点好处：第一， 它能确保你不会忘记关闭文件。如果你
以后又为该函数添加了新的返回路径时， 这种情况往往就会发生。第二，它意味着 “关闭” 离
“打开” 很近， 这总比将它放在函数结尾处要清晰明了。
The arguments to the deferred function (which include the receiver if the function is a
method) are evaluated when the defer executes, not when the call executes. Besides
avoiding worries about variables changing values as the function executes, this means that
a single deferred call site can defer multiple function executions. Here's a silly example.
被推迟函数的实参（如果该函数为方法则还包括接收者）在推迟执行时就会求值， 而不是在
调用执行时才求值。这样不仅无需担心变量值在函数执行时被改变， 同时还意味着单个已推
迟的调用可推迟多个函数的执行。下面是个简单的例子。
for i := 0; i < 5; i++ {
defer fmt.Printf("%d ", i)
}
35
函数
Deferred functions are executed in LIFO order, so this code will cause 4 3 2 1 0 to be printed
when the function returns. A more plausible example is a simple way to trace function
execution through the program. We could write a couple of simple tracing routines like this:
被推迟的函数按照后进先出（LIFO）的顺序执行，因此以上代码在函数返回时会打印 4 3 2 1
0。一个更具实际意义的例子是通过一种简单的方法， 用程序来跟踪函数的执行。我们可以编
写一对简单的跟踪例程：
func trace(s string) { fmt.Println("entering:", s) }
func untrace(s string) { fmt.Println("leaving:", s) }
// Use them like this:
func a() {
trace("a")
defer untrace("a")
// do something....
}
func trace(s string) { fmt.Println("entering:", s) }
func untrace(s string) { fmt.Println("leaving:", s) }
// 像这样使用它们：
func a() {
trace("a")
defer untrace("a")
// 做一些事情....
}
We can do better by exploiting the fact that arguments to deferred functions are evaluated
when the defer executes. The tracing routine can set up the argument to the untracing
routine. This example:
我们可以充分利用这个特点，即被推迟函数的实参在 defer 执行时才会被求值。 跟踪例程可
针对反跟踪例程设置实参。以下例子：
36
函数
func trace(s string) string {
fmt.Println("entering:", s)
return s
}
func un(s string) {
fmt.Println("leaving:", s)
}
func a() {