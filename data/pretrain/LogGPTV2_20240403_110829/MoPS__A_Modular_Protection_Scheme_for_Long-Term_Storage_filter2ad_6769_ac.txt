are added are smaller than the validity periods of attesta-
tions. This is a reasonable assumption, for instance, when
using signature-based timestamps to securely store medical
records. Due to the employed signature schemes, the va-
lidity period of attestations holds at least two years while
2Although AS is an improved version of AdES, the main
observations still apply.
3Although MTS is an improved version of ERS, the main
observations still apply.
440most patients consult their doctors multiple times a year.
However, if the security of the proof of existence must be
prolonged without adding a new document, this can be per-
formed by using the algorithms described for AS. For the
pseudocode see Listing 3.
appended to the chain. This leads to a much longer chain
compared to the chain generated with the data structure
AS where attestations are only appended when the validity
period of old attestations is about to end.
Listing 3: Multiple Documents Sequence Proce-
dures (for 0 < j < n − 1, j denotes the penultimate
iteration HashRenewal was called)
Initialization(InputData d0, Time t0, HashFunction H0)
h0 = H0(d0)
a0 = Attest(H0||h0, t0)
Store a0 and H0 for veriﬁcation
Renewal(InputData d0, ..., dn, Attestations a0, ..., an−1,
VeriﬁcationData v0, ..., vn−1, AuthenticationPaths p0,0, ...,
pj,k−1, Time tn, HashFunctions Hn−1, Hn)
If Hn = Hn−1
AttestationRenewal(dn, an−1, vn−1, tn, Hn)
Else
HashRenewal(d0, ..., dn, a0, ..., an−1, v0, ..., vn−1,
p0,0, ..., pj,k−1, tn, Hn)
AttestationRenewal(dn, an−1, vn−1, tn, Hn)
hn = Hn(Hn(dn)||an−1||vn−1)
an = Attest(Hn||hn, tn)
Store an, vn−1, and Hn for veriﬁcation
HashRenewal(d0, ..., dn, a0, ..., an−1, v0, ..., vn−1,
p0,0, ..., pj,k−1, tn, Hn)
MTk = ComputeMerkleTree(d0||a0||v0||p0,0||...||p0,k−1,
..., dj||aj||vj||pj,k−1, ..., dn−1||an−1||vn−1) using Hn
rk = MTk.Root
hn = Hn(dn)
an = Attest(Hn||rk||hn, tn)
Store an, vn−1, and Hn for veriﬁcation
For i = 0, ..., n − 1
pi,k = MTk.AuthenticationPathi
Store pi,k with di for recomputing rk
Also CIS [5] allows generating one proof of existence for
a batch of sequentially archived documents. However, this
scheme uses WVM-based timestamps and a data structure
which looks like an unbalanced hash tree. There are two
signiﬁcant diﬀerences between both approaches: First, our
data structure also provides an attestation renewal proce-
dure which is needed for signature-based timestamps and
which is not provided by CIS. Second, during the hash re-
newal procedure we rehash the data contained in the se-
quence using a Merkle tree. Thus, if veriﬁers want to verify
a range of documents, they need only access to the docu-
ments that should be veriﬁed and the data added after the
oldest document of the range. Using CIS, access to all docu-
ments, attestations, and veriﬁcation data is needed in order
to verify a single document.
Pros and Cons. Our data structure MDS allows generat-
ing one proof of existence for a batch of sequentially stored or
archived documents. In contrast to the data structure MTS,
the documents are not protected as a single set, but added
sequentially to a common proof of existence. This is an
interesting technique for documents which have a content-
related dependency, e.g. when archiving folders or records.
In this case, opening a folder containing several documents
requires to verify only one chain of attestations where the
number of attestations equals the number of documents pro-
tected. However, if only single documents are opened, this
approach is less eﬃcient than the data structure AS, see
[10]4: Each time a document is added, a new attestation is
4Although MDS is an improved version of CIS, the main
observations still apply.
Skip-List Sequence (SLS)
3.2.5
The data structure skip-list sequence (SLS) allows an ef-
ﬁcient archiving solution for both access patterns, verifying
ranges of documents and verifying single documents. The
drawback of MDS is that a new attestation is generated each
time a document is added. It follows that when retrieving
a single document, several attestations with overlapping va-
lidity periods must be veriﬁed. A possible solution to avoid
this are append-only skip-lists [8] which maintain linked lists
on multiple levels called parallel hash chains allowing one
to eﬃciently traverse lists of elements. This allows at the
same time generating one proof of existence for a sequence
of documents and reducing the amount of attestations which
must to be checked during the veriﬁcation procedure. The
archiving scheme CISS [13] provides such a skip-list-based
solution. Since MoPS uses this scheme without any modi-
ﬁcation and the individual processes are very complex, we
refer for details to the original work.
Pros and Cons. SLS, like MDS, allows one to retrieve
and verify a batch of documents with a single attestation
sequence and in addition it also allows one to retrieve single
documents almost as eﬃcient as when using the data struc-
ture AS. However, this comes at the cost of additional com-
plexity regarding time when appending new elements (due
to the need of creating the links) and storage space (due
to the need of storing the links). A rigorous performance
analysis of this approach and a comparison with other data
structures can be found in [13]. The performance analysis
shows that using this data structure is only recommended
when it is known in advance that in the given scenario there
is a high probability that the validity periods of attestations
will overlap. In this case the beneﬁt of skipping attestations
during veriﬁcation is greater than the cost of the additional
complexity.
3.2.6 Notarial Attestation Wrapper (NAW)
In contrast to all data structures described so far, the data
structure notarial attestation wrapper (NAW) is a special
case. The attestation renewal procedure is performed by
an NA which checks the correctness of the old attestation
and if it is correct replaces it with a new attestation. Thus,
each proof of existence consists only of one single attestation.
During initialization, it must be clariﬁed which property the
NA is expected to verify. The NA can, for instance, verify
that the hash function H0 and the certiﬁcate c claimed to be
used by the document owner are still secure. Alternatively,
the NA could also be asked to verify whether the signature
key used to generate the signature s to document d indeed
belongs to certiﬁcate c and the signed document has been
hashed using H0. During the renewal, the NA can check
that the latest attestation an, i.e. its signature, is still valid
and that the hash function Hn−1 and, where applicable, also
the new hash function Hn is secure. The pseudocode for the
individual procedures can be found in Listing 4. Note that
except for the store and delete operations, it presents the
view of the NA since the client only sends and receives data.
441Listing 4: Notarial Attestation Wrapper Procedures
Initialization(HashValue H0(d), Certiﬁcate c, Time t0,
HashFunction H0)
If c is valid at t0 AND H0 is secure at t0
a0 = Attest(H0||H0(d)||c, t0)
Store a0 and H0 for veriﬁcation
Else
Abort
Renewal(HashValues H0(d), ..., Hn(d), Certiﬁcate c,
Attestation an−1, VeriﬁcationData vn−1, Times t0, tn,
HashFunctions H0, ..., Hn)
Verify an−1 with vn−1
If an−1 is valid AND Hn is secure at tn
If Hn = Hn−1
H0, ..., Hn−1)
AttestationRenewal(H0(d), ..., Hn−1(d), c, an−1, t0,
Else
HashRenewal(H0(d), ..., Hn(d), c, an−1, t0, tn,
H0, ..., Hn)
Else
Abort
AttestationRenewal(H0(d), ..., Hn−1(d), c, an−1, t0
H0, ..., Hn−1)
an = Attest(H0||H0(d)||...||Hn−1||Hn−1(d)||c, t0)
Store an for veriﬁcation
Delete an−1
HashRenewal(H0(d), ..., Hn(d), c, an−1, t0, tn, H0, ..., Hn)
If Hn−1 is secure at tn
an = Attest(H0||H0(d)||...||Hn||Hn(d)||c, t0)
Store an and Hn for veriﬁcation
Delete an−1
Else
Abort
CN [6] was the ﬁrst approach that used this idea of notar-
ial attestations. However, it made use of two trusted third
parties which are involved in the attestation generation pro-
cess, namely TSAs and notaries. Based on CN, an improved
scheme called AC [11] was developed. This approach uses
notarial attestations and a data structure which equals our
data structure NAW.
Pros and Cons. Since the veriﬁer only needs to verify
one attestation, this approach is by far the most eﬃcient
data structure, see [10]. However, the data structure NAW
can only be used together with the attestation technique
notarial attestation. Furthermore, the NA generating the
attestation should be a person with legal training who is
licensed by the government to witness signatures on docu-
ments, such as a notary. The proof of existence only con-
tains the information at what time the proof of existence
for a document has been initialized and who generated the
latest attestation. The information at what time and by
which party the individual attestations have been renewed
is lost. Thus, all NAs that are involved in prolonging the
security of the proof of existence must be trusted to ver-
ify the received data correctly and to include the correct
time in the new attestation. It follows that this data struc-
ture comes with much stronger trust assumptions compared
to the data structures generating sequences of attestations.
Thus, before using this data structure for a use case, it must
be evaluated whether these trust assumptions are feasible.
4. COMBINATION OF TECHNIQUES
The data structures presented in the last section aim at
providing eﬃcient solutions for initializing, renewing and
verifying proofs of existence. On the one hand, AS, MDS,
SLS, and NAW ensure eﬃcient veriﬁcation procedures for
diﬀerent access patterns. On the other hand, MTS provides
eﬃcient initialization and renewal procedures when proofs
of existence for huge amounts of documents are generated
at the same point in time. Thus, in the following we discuss
how for such large data sets MTS can be combined with
the remaining data structures in order to gain an eﬃcient
solution with respect to all procedures.
First, we construct a combined data structure by cumu-
lating the attestation requests of diﬀerent data structures in
one MTS. Then, we show that when large amounts of docu-
ments need to be archived, the data structures can be used
to generate proofs of existence for Merkle tree roots instead
of protecting single signed documents.
4.1 Merkle Tree Sequences Combining Multi-
ple Attestation Requests
MTS allows one to protect the integrity of a set of hash
values with a single attestation sequence. This technique
cannot only be used for the hashes of signed documents, but
also for the hash values generated during the initialization
and renewal procedures of all data structures.
Initialization Procedure. During the initialization, the
hash values which need to be attested are computed by run-
ning the initialization or renewal procedures of AS, MTS,
MDS, SLS, or NAW. Then, instead of calling Attest for the
individual hash values, they are input for the initialization
procedure of MTS which generates a Merkle tree and gener-
ates one attestation for the entire set of hash values. How-
ever, note that if the leaves of the Merkle tree contain a
hash generated with NAW, then the Merkle tree root must
be attested by an NA. Furthermore, the same hash func-
tion should be used for all data structures combined in the
Merkle tree in order to avoid executing the hash renewal
procedure more often than inevitable.
Renewal Procedure. Regarding the renewal of the at-
testation generated for the latest Merkle tree root, it must
be considered which data structures belong to the hashes in
the Merkle tree leaves. MDS and SLS automatically renew
attestations when new documents are added, while this is
not the case for AS, MTS, and NAW. Thus, we must distin-
guish three cases.
In the ﬁrst case, all hashes in the leaves are used for MDS
or SLS. Then, the attestation renewal procedure of MDS or,
respectively, SLS can be performed independently. This is
done as follows: The Merkle tree root, the authentication
path corresponding to the data structure, and the common
attestations are appended to each data structure. Then,
the attestation renewal procedure of MDS or, respectively,
SLS is executed as usual. Cumulating the attestation re-
quests when adding new documents to these data structures
is not reasonable, except when new documents are added
to all data structures at the same time. When the hash
renewal procedure instead of the attestation renewal proce-
dure is triggered, all data contained in the respective data
structures must be rehashed. In MoPS, the hash renewal is
performed for all data structures at the same time in order
to be able to cumulate the attestation requests. Since af-
ter the generation of the latest MTS new documents have
been added to the individual sequences, the old MTS can-
not simply be rehashed. Thus, a new MTS is initialized by
running the hash renewal procedures of the individual data
structures and using the resulting hash values as input for
the initialization procedure of the new MTS.
442In the second case, all hashes in the leaves are used for
AS, MTS, or NAW. Since these data structures do not re-
new attestations automatically, this is done by calling the
attestation or hash renewal procedure provided by MTS. In
case the hash renewal procedure is run and the Merkle tree
is rehashed using a new hash function Hn, also the hashes
in the leaves must be recomputed correspondingly. Thus,
the hash renewal procedure of AS, MTS, and, respectively,
NAW is triggered and the data is rehashed using Hn.
In the third case, the hashes in the leaves belong to both,
MDS or SLS and AS, MTS, or NAW. The data structures
MDS and SLS renew their attestations as described for the
ﬁrst case. The remaining data structures can use the attes-
tation renewal technique as described for the second case.
When it is necessary to run the hash renewal procedure for
all data structures, a new MTS is initialized as reasoned for
the ﬁrst case.
Veriﬁcation. Verifying a document protected by such
a combined solution requires to additionally recompute the
hash values added to MTS. Then, using the correspond-
ing authentication paths, the roots of the Merkle trees are
recomputed and the correctness of the attestations for the
roots is veriﬁed by calling the veriﬁcation procedure of MTS.
4.2 Data Structures Attesting Merkle Tree
Roots
Merkle trees can be combined with all data structures,
i.e. AS, MTS, MDS, SLS, and NAW. However, since MTS
results from combining the idea of Merkle trees with the
data structure AS, this combination will not be discussed
explicitly. Furthermore, the combination of MTS with MTS
in order to cumulate attestation requests has already been
discussed in the last section.
The data structures MDS, SLS, and NAW address the sce-
nario where at a given point in time only one new document
is attested. Considering medical records as a possible use
case, there are scenarios where this is not reasonable. As-
sume, for instance, that a person got injured in an accident.
In this case, various tests must be conducted, e.g. a blood
test, an x-ray scan, etc., and consequently a set of documents
must be added to the record. An eﬃcient archiving solution
for such a scenario can be provided by combining MDS, SLS,
and NAW with Merkle trees. Note that these data structures
aim at providing the integrity of a given hash value which
usually corresponds to a signed document. This trivially
allows protecting the root of a Merkle tree which contains
hashes of multiple documents in the leaves instead.
Assume, for instance, a set of documents is added after
an attestation an−1 which has been generated using the ini-
tialization and renewal procedures of MDS. Then, if hash
function Hn−1 used to generate an−1 is still secure, ﬁrst, the