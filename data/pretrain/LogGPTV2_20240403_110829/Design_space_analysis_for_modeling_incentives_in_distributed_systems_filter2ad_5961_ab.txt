For the expected number of games won against the lower classes,
using similar reasoning as above, we obtain
E[B → c] = Er[B → c] = NB/Nr.
The expected value for the number of games in which a peer
c gets reciprocation from peers in the same class is Ur minus the
number of ‘free game wins’ that peer c obtains from the higher
classes (to which c always reciprocates as per its dominant strategy,
thus breaking its relationship with a partner from the same class),
minus the expected number of ‘free game wins’ that at least one
of c’s current partners gets from the higher classes (to which the
partner reciprocates, thus breaking its relationship with c). This
leads to
Er[C → c] = Ur − E[A → c]− K,
(1)
E[C → c] = (NC − 1− Er[C → c])/Nr.
2.3 Is BitTorrent TFT a Nash equilibrium?
Under certain assumptions, it was shown in [26] that the TFT
strategy as implemented in BitTorrent is a Nash equilibrium. How-
ever, by modifying the abstraction to incorporate more detail in our
model, and taking a cue from formula (1), we ﬁnd that BT is not
a Nash equilibrium. In our model, the payoff structure in BitTor-
rent can be modiﬁed to devise a new protocol. This protocol can
individually, in a population of all BitTorrent peers, do better than
the BitTorrent peers, thereby showing that BitTorrent is not a Nash
equilibrium.
Next, we discuss how we devise a protocol improvement called
Birds1 by modifying the payoffs in the BitTorrent Dilemma.
Birds: Modifying BitTorrent’s payoffs. A fast peer upon being
optimistically unchoked by a slow peer does not reciprocate, as
given by Figure 1(a), because a fast peer realizes the opportunity
cost of reciprocating to a slow peer, which is a missed interaction
with another fast peer. A slow peer reciprocates to a fast peer be-
cause in its view there is an opportunity cost in defecting against a
fast peer, which is a missed chance to form a long-term relationship
with a fast peer. However, as stated, given the scenario described in
Figure 1(a), this does not happen. This suggests that the payoff as
calculated by a slow peer in the BitTorrent Dilemma could be mod-
iﬁed. There is no opportunity cost in defecting against a fast peer.
In fact there is an opportunity cost in cooperating with it: missing
out on a sustained relationship with another slow peer. Therefore,
in order to account for this fact, we modify the payoff structure of
the BitTorrent Dilemma according to Figure 1(c) so that the dom-
inant strategy of both slow and fast peers is to defect against each
other. This new payoff structure leads to a new protocol that we call
Birds and reﬂects the behavior of peers following this protocol.
Analytically, this leads to
and obviously
B[A → c] = Er
Er
B[B → c] = 0,
B[C → c] = Ur.
Er
For the ‘free game wins’, there is no change as compared to Bit-
Torrent. For the interactions of peers in the same class, we ﬁnd that
we can use the same argument as used for BitTorrent, thus
EB[C → c] = (NC − 1−Ur)/Nr.
1Birds of a feather stick together. Using this protocol peers try to
stick with others from their own bandwidth class.
cooperatedefectcooperatedefectfastslowss-f f0 s00 0 fastslowrespondsoptimistically unchokesoptimistically unchokescooperatedefectcooperatedefectfastslowss-f f-s0 f00 0 184For a proof of Birds being a Nash equilibrium and BitTorrent not
being a Nash equilibrium, we refer the reader to the Appendix.
A practical approach to deploy Birds. We provide a simple, prac-
tical approach to incorporate Birds in current BitTorrent clients. We
propose to change the peer selection policy of BitTorrent, so that it
reciprocates not to the fastest peers but to those peers that are clos-
est to its own upload bandwidth. Given Figure 1(c), a peer in Birds
needs to sort others in increasing order of their distance to its own
upload bandwidth.
We deﬁne a peer’s distance to another peer to be equal to the
absolute difference between its upload speed and the upload speed
of the other peer. We note that a similar approach has been used for
replica placement in P2P Storage Systems [30].
2.4 Discussion
We have applied a game-theoretic analysis to the popular P2P
protocol, BitTorrent. Considering BT as a strategy in iterated
games, and using the concept of ‘opportunity costs’, we were able
to unearth new protocol aspects. Using a different abstraction as
compared to previous work [26] under which BT is a Nash equi-
librium, we demonstrated that in our abstraction, BitTorrent is not
Nash equilibrium. We also devised a protocol variant that is a Nash
equilibrium under our assumptions.
We now need to consider what we gain from our equilibrium
analysis and what exactly is meant when a protocol is said to be
robust. It was only subsequent to the proof that BitTorrent is a Nash
equilibrium [26], that questions about BitTorrent’s robustness were
raised. Locher et al. [17] showed that BitTorrent’s TFT policy is
vulnerable to attack from an Always Defect strategy. Later on, yet
another BT exploit was devised based on an adaptive policy for
number of partners and variable rate of reciprocation [24]. Even
in our case, simply by choosing an abstraction that incorporates
the interactions between various classes of peers in more detail, we
showed that BT is not a Nash equilibrium.
The literature of game-theoretic modeling of distributed systems
often relies on the analytical analysis of simple models [30, 26].
The results of such analyses, as we have seen, can sometimes be
misleading.
In many other areas of networking, simulations are
used when a faithful model of the real system is far too compli-
cated, and it is not clear which details one can omit without chang-
ing the nature of the results. In the next section, we present Design
Space Analysis, an approach inspired by the work of Axelrod [1],
which uses a simulation based methodology for modeling incen-
tives in complex protocols.
3. DESIGN SPACE ANALYSIS
We wish to design distributed protocols that maximize perfor-
mance of the system under the assumption that protocol variants
may enter the system. We present Design Space Analysis (DSA), a
simulation based method, which emphasizes the speciﬁcation and
analysis of a design space, rather than proposing a single proto-
col. First, we list the key elements of DSA. Then we present the
Performance, Robustness, Aggressiveness (PRA) quantiﬁcation, a
solution concept within DSA.
3.1 Key elements of DSA
We consider the elements that are integral to Design Space Anal-
ysis.
Flexible behavioral assumptions. In DSA, we relax behavioral
assumptions. Speciﬁcally, we do not limit ourselves to the ratio-
nal framework, where nodes are supposed to be self-interested. By
foregoing the assumptions entailed in this framework, we consider
a great variety of protocols, which may not necessarily be ratio-
nal. Protocols may, in the words of Axelrod [1], “simply reﬂect
standard operating procedures, rules of thumb, instincts, habits, or
imitation”.
Speciﬁcation of design space. In DSA, keeping in view that com-
plex protocols have many elements that can be gamed by strategic
nodes, a design space should encompass relevant details that can
affect the incentive structure. Design space speciﬁcation occurs
at two levels: i) Parameterization, which involves determining the
salient dimensions of the design space, and ii) Actualization, which
involves specifying a host of actual values for every individual di-
mension.
The speciﬁcation of the design space can be inspired by consult-
ing the relevant literature and analyzing existing systems. As an
example, the Parameterization phase of the design space for Gos-
sip Protocols [13] could result in the following salient dimensions:
i) Selection function for choosing partners for exchanging data, ii)
Periodicity of data exchange iii) Filtering function for determining
data to exchange, iv) Record maintenance policy in local database.
The Actualization of this example design space for gossip pro-
tocols could be: For Selection Function, following policies could
be used : 1) Random: Choose partners randomly; 2) Best: Choose
partners who have given the best service; 3) Loyal: Choose most
loyal partners; 4) Similarity: Choose partners based on similarity;
etc. Similarly, different values could be chosen for each of the other
dimensions.
An example of specifying a design space, with both the param-
eterization and actualization phases, will be described in detail in
Sections 4.1 and 4.2 when we apply DSA to P2P ﬁle swarming
systems.
Systematic analysis of the design space. In DSA, a desired fea-
ture of all solution concepts is a systematic exploration of the de-
sign space. This exploration could either follow an exhaustive ap-
proach, e.g., a parameter sweep, or a heuristic based approach. By
a thorough scan of the space, DSA solution concepts can antic-
ipate strategic variants and predict their effects. Heuristic based
approaches can provide partial solutions relatively fast, however,
without any guarantees on the level of goodness of the measures.
3.2 The PRA quantiﬁcation
We now present the PRA quantiﬁcation, a solution concept
within DSA. We note that other solution concepts within DSA
could also be devised. Using PRA, we can characterize any pro-
tocol, from a given design space, over three measures (or dimen-
sions). For a given protocol Π, these three particular measures, are:
• Performance - the overall performance of the system when
all peers execute Π (where performance is determined by the
application);
• Robustness - the ability of a majority of the population exe-
cuting Π to outperform a minority executing a protocol other
than Π;
• Aggressiveness - the ability of a minority of the population
executing Π to outperform a majority executing a protocol
other than Π.
We formulate a way to assign values to each of the three mea-
sures normalized into the range [0,1]. Hence the properties of any
given Π can be characterized as a point within a three-dimensional
Performance, Robustness, Aggressiveness (PRA) space. The im-
portance of these three measures is evident from the literature. Per-
formance and Robustness have been studied extensively [2, 12, 24].
185Table 2: Existing protocols/designs mapped to our generic P2P protocol design space.
Protocol
Peer Discovery
Stranger Policy
Selection Function
P2P Replica Stor-
age [30]
Gossip based
Defect
partners full
Closest
to
proﬁle
if set of
own
GTG [21]
Maze [32]
Pulse [23]
BarterCast [20]
orthogonal
Unconditional co-
operation
Sort on Forward-
ing Rank
Central server
Initialized
points
Ranked on points
with
positive
Gossip based
Give
score
Missing list, For-
warding list
Gossip based
Unconditional co-
operation
Rank/Ban accord-
ing to reputation
Resource Allocation
Equal
Equal
Differentiated ac-
cording to rank
Equal
orthogonal
Private BT Com-
munities
Central server
Initial credit
Credits or sharing
ratio above certain
level
Equal / Differenti-
ated according to
credits
Aggressiveness has not been explicitly studied but the numerous
papers that present protocol variants [11, 15, 16] suggest the need
for an aggressiveness measure to determine the effectiveness of a
new protocol variant in a population of peers following some other
protocol(s).
It is desirable, in open systems in which strategic variants can en-
ter, to design protocols which maximize all three measures. How-
ever, it can be conjectured that there will often be a trade-off be-
tween them. For example, one may design protocols with high
performance but low robustness or conversely high robustness and
low performance.
We now deﬁne more precisely how we can map a given protocol
Π, which can be expressed as a point in the design space, to a point
in the PRA space; formally, we deﬁne a function S : D → [0,1]3,
where D is the design space.
We assume that for each peer in a system of peers we can calcu-
late a utility which quantiﬁes individual performance. The measure
of performance is application speciﬁc, such as download speed in
P2P ﬁle swarming systems. Given this we deﬁne the performance
P of protocol Π as the sum of all individual utilities in a population
of peers executing Π normalized over the entire protocol design
space. Hence, P = 1 indicates the best performance obtained from
any protocol in the design space.
We deﬁne the Robustness R for protocol Π as the proportion of
all other protocols from the design space that do not outperform Π
in a tournament. A tournament consists of multiple encounters in
which protocol Π plays against all other protocols in turn. An en-
counter is a mixed population of peers executing one of two proto-
cols. The winning protocol is that which obtains the higher average
utility for the peers executing it.
Aggressiveness A for protocol Π is deﬁned in the same way as
Robustness, but here Π is in the minority.
4. APPLYING DSA TO P2P FILE SWARM-
ING SYSTEMS
In this section, we describe our methodology for applying DSA
to P2P ﬁle swarming systems. First, we Parameterize a generic
P2P design space. Next, based on this generic space, we Actualize
a speciﬁc ﬁle swarming design space. Subsequently, we apply the
PRA quantiﬁcation on this space. Finally, we present the results of
our analysis.
4.1 Parameterization of a Generic P2P Proto-
col Design Space
We have identiﬁed the following salient dimensions applicable
to a large variety of P2P systems.
Peer Discovery: In order to perform productive peer interactions,
it is necessary to ﬁnd other partners. For example, when a
peer is new in the system, looking for better matching part-
ners or existing partners are unresponsive. The timing and
nature of the peer discovery policy are the important aspects
of this dimension.