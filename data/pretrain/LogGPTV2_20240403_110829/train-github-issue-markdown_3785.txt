### Version
2.6.11
### Reproduction link
data:,see-steps-below
### Steps to reproduce
Step 1:
Step 1:  
focus on the textarea and press Ctrl Enter
### What is expected?
the event handler `handleSubmit` would be invoked
### What is actually happening?
It doesn't work across browsers.
event \ working \ browser | Chrome 90 | Firefox 78  
---|---|---  
v-on:keypress.ctrl.enter | N | Y  
v-on:keypress.ctrl.10 | Y | N  
v-on:keypress.ctrl.13 | N | Y  
v-on:keypress.ctrl.10.13 | Y | Y  
* * *
    // v-on:keypress.ctrl.enter="handleInputEnter"
    on: {
      "keypress": function($event) {
        if (!$event.type.indexOf('key') && _k($event.keyCode, "enter", 13, $event.key, "Enter"))
          return null;
        if (!$event.ctrlKey)
          return null;
        return handleInputEnter($event)
      }
    }
Use `.enter` as an alias of `.13` is sometimes misleading. If event keyCode is
13, then you may say Enter key is pressed, but if Enter pressed, the keyCode
may also be 10 if Ctrl pressed in the mean time.
Currently I use `v-on:keypress.ctrl.10.13="handleInputEnter"` as a workaround.
So my idea is: either to add a caveat note in docuemtation section `.enter`,
or let the component template compiler handle `.enter` modifier correctly.