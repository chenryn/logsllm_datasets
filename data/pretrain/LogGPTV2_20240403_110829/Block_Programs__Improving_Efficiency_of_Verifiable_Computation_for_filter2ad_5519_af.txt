of the ACM Symposium on Principles of Distributed
Computing, PODC ’13. ACM, 2013.
APPENDIX
A. PROOF OF SOUNDNESS
To better illustrate the logical ﬂow of the soundness proof,
we ﬁrst provide the following simple experiment. Suppose
P must choose between two boxes (the left and the right
box), each containing a number of white balls and black
balls. The right box stands for the correct proof, while the
left box for the wrong proof. White balls represent tests
that pass, black balls represent tests that fail. By the com-
pleteness argument, we know that all the balls in the right
box are white. On the other hand, the left box contains
both white and black balls. The prover P chooses one of
the boxes, and places it in a dark room (the room stands
for the prover’s commitment). The veriﬁer V has to test
the box, to see whether the prover chose the wrong proof.
To accomplish this, V enters the dark room and picks a
ball from the box. Then V exits the room and looks at the
ball. Our proof ﬂows as follows. 1. We ﬁrst show that
if V were to randomly pick a ball from the left box, then
P r{the ball is white}  (cid:20)M
0 , then the box has
to be the right box.
0 , where (cid:20)M
0
Our soundness proof is a bit less straightforward. To
make it work, we have to ﬁrst condition our probabilities
on the event that all proofs provided by the prover are lin-
ear.
In Lemma 6, we show that, if the veriﬁer provides
the wrong result (and consequently the wrong proof), then
P r{V accepts |all purported proofs are linear }  (cid:20)M
0 ;
Finally, we bootstrap our argument as above, reasoning that
unless the results of the computation are correct, a contra-
diction ensues with Lemma 6.
∗
∗
∗
.
Let us proceed. For simplicity, we extract a part of purely
mathematical transformation from our proof into Lemma 5.
415( K∑
Lemma 5. In the context of loop circuits (as in Figure 3),
Z1;k · Ak((cid:28) ) + IN
· A1((cid:28) );··· ;
(1)
1
D((cid:28) ) · Hj((cid:28) ) =  (2)
K∑
j
ZM;k · Ak((cid:28) ) + IN
K∑
)
(1)
[(k−1)·Q]+Q
k=1
EX
k=2
··· ;
+ AK ((cid:28) ) · OUT
(1)
j
K∑
(K−1∑
k=1
EX
k=2
(1)
M
· A1((cid:28) );
)
· Ak((cid:28) )
−
(1)
[(k−1)·Q]+1
· Ak((cid:28) );
Zj;k+1 · Ak(t)
k=1
(A.1)
However, since the results are not correct, by Corollary 2, for
any j = 1; 2;··· ; M , there is no Hj(t) for which (A.4) holds.
Thus, V wrongly accepts only if (cid:28) is a root of (A.4). By
Schwartz-Zippel lemma, the probability that V wrongly ac-
cepts is bounded above by K·D|F| , where D is the degree of the
polynomial that the circuit of the loop body computes and
K is the number of loop iterations. If V uses Zaatar to check
(A.2), then the probability is bounded above by (cid:20)Zaatar (re-
fer to [24], Apdx. A.2). Notice the divisibility tests will run
M times. Thus, if the results of the computation are not cor-
rect, then, P r{V accepts| all purported proofs are linear }  (cid:20)
, then the purported results are correct.
(This statement is equivalent to the requirement for (cid:20).) The
probability is over the randomness of both V and P in both
phases our protocol.
P r{V accepts} > (cid:20)
implies that both linearity tests and
∗
.
the divisibility tests pass with probability greater than (cid:20)
Then, we know the linearity tests pass with probability greater
than (1 − 3(cid:14) + 6(cid:14)2)(cid:26)lin .
If the linearity tests pass with
probability greater than (1 − 3(cid:14) + 6(cid:14)2)(cid:26)lin , then the proof
is (cid:14)-close to linear; this follows from results of Bellare et
al.
[4, 3]; see the analysis in the extended version of [25],
Apdx. A.2. Suppose P r{V accepts} > (cid:20)
, then we also
have P r{V accepts} > 6M (cid:14) + (cid:20)M
0 . If we exclude the cases
that any of the queries in the divisibility tests “hit” the
non-linear part, the remaining cases are those that all the
queries in the divisibility tests “hit” the linear part of the
purported proofs. Let EH be the event that all the queries
in the divisibility tests “hit” the linear part of the purported
proofs. Since one query in the divisibility tests “hit” the non-
linear part is (cid:14), by union bound, P r{EH} ≤ 6M (cid:14). Thus,
P r{V accepts, EH}  6M (cid:14) + (cid:20)M
0 , we have
P r{V accepts; EH} > (cid:20)M
0 :
(A.6)
Then, we have P r{V accepts|EH} > P r{V accepts; EH} >
(cid:20)M
0 . Since the eﬀect of testing the divisibility using all the
queries that “hit” the linear part of the purported proofs is
exactly the same as testing the divisibility under the condi-
tion that all purported proofs are linear, we will have :
P r{V accepts|all purported proofs are linear} > (cid:20)M
0
(A.7)
(A.7) implies the purported results are correct. Otherwise, if
the purported results are not correct, by Lemma 6, we will
have P r{V accepts|all purported proofs are linear} < (cid:20)M
0 ;
which contradicts (A.7).
]:
(1)
j
is equivalent to OUT
for inputs IN
outputs OUT
1 ;··· ; IN
1 ;··· ; OUT
(1)
(1)
j
(2)
(2)
(IN
j =  (2)
1 ;··· ; IN
(1)
M , extra inputs EX
1 ;··· ; IN
(1)
M , and IN
1 ;··· ; EX
(2)
Q );
(1)
Q·K , and
1 ;··· ; EX
(2)
M are deﬁned in terms of (cid:28) as in Figure 5.
(2)
M ; EX
1 ;··· ; EX
(1)
(2)
M , EX
(2)
(2)
(2)
(2)
Q ,
(2)
1 ;··· ; OUT
OUT
A simple change of variable suﬃces to prove it.
Lemma 6. Let V and P run our protocol as in Figure 5.
If the results of the computation task are not correct, for the
cases that all purported proofs (cid:25)Gj (j = 1;··· ; M ), (cid:25)INi (i =
1;··· ; M ), (cid:25)Hj (j = 1;··· ; M ) are linear functions, we have
P r{V accepts |all purported proofs are linear} < (cid:20)M
0 ; where
(cid:20)0 = K·D|F| or (cid:20)Zaatar, D is the degree of the polynomial that
the circuit of the loop body computes and K is the number
of loop iterations. The probability is over the randomness of
both V and P in both phases our protocol.
Proof. Under the condition that all purported proofs
(cid:25)Gj (j = 1;··· ; M ), (cid:25)INi (i = 1;··· ; M ), (cid:25)Hj (j = 1;··· ; M )
are linear functions, all the linearity tests pass. Then, V ac-
cepts if
OUT
(2)
j =  (2)
j
(IN
(2)
M ; EX
(2)
1 ;··· ; EX
(2)
Q ):
(A.2)
This is checked by computing himself or using existing pro-
tocols, like Zaatar or Pinocchio. If he computes himself, by
Lemma 5, the veriﬁer accepts only when the following holds:
D((cid:28) ) · Hj((cid:28) ) =  (2)
K∑
K∑
Z1;k · Ak((cid:28) ) + IN
K∑
· A1((cid:28) );
)
K−1∑
−[
· Ak((cid:28) )
ZM;k · Ak((cid:28) ) + IN
Zj;k+1 · Ak((cid:28) ) + AK ((cid:28) ) · OUT
· A1((cid:28) );··· ;
· Ak((cid:28) );··· ;
(1)
[(k−1)·Q]+1
(1)
[(k−1)·Q]+Q
(1)
M
(1)
1
k=2
k=2
k=1
EX
EX
j
k=1
k=1
( K∑
j
This is a simple test of the following at the point t = (cid:28) :
· A1(t);··· ;
D(t) · Hj(t) =  (2)
K∑
K∑
Z1;k · Ak(t) + IN
K∑
· A1(t);
)
K−1∑
· Ak(t)
ZM;k · Ak(t) + IN
(1)
[(k−1)·Q]+1
Zj;k+1 · Ak(t) + AK (t) · OUT
· Ak(t);··· ;
−[
(1)
[(k−1)·Q]+Q
(1)
M
(1)
1
k=2
k=1
k=2
EX
EX
k=1
k=1
(A.4)
(1)
j
]:
(A.3)
(2)
1 ;··· ; IN
( K∑
416