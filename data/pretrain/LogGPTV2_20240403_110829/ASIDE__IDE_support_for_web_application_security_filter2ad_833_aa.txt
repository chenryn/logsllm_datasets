title:ASIDE: IDE support for web application security
author:Jing Xie and
Bill Chu and
Heather Richter Lipford and
John T. Melton
ASIDE: IDE Support for Web Application Security
Jing Xie, Bill Chu, Heather Richter Lipford, and John T. Melton
Department of Software and Information Systems
University of North Carolina at Charlotte
jxie2, billchu, PI:EMAIL, PI:EMAIL
9201 University City Blvd
Charlotte, NC, 28223, USA
ABSTRACT
Many of today’s application security vulnerabilities are in-
troduced by software developers writing insecure code. This
may be due to either a lack of understanding of secure pro-
gramming practices, and/or developers’ lapses of attention
on security. Much work on software security has focused on
detecting software vulnerabilities through automated anal-
ysis techniques. While they are eﬀective, we believe they
are not suﬃcient. We propose to increase developer aware-
ness and promote practice of secure programming by interac-
tively reminding programmers of secure programming prac-
tices inside Integrated Development Environments (IDEs).
We have implemented a proof-of-concept plugin for Eclipse
and Java. Initial evaluation results show that this approach
can detect and address common web application vulnerabil-
ities and can serve as an eﬀective aid for programmers. Our
approach can also eﬀectively complement existing software
security best practices and signiﬁcantly increase developer
productivity.
Categories and Subject Descriptors
D.2 [Software Engineering]:
[Software Security]; D.2.4
[Software/Program Veriﬁcation]: [Correctness Proofs];
D.2.6 [Programming Environments]:
[Integrated Envi-
ronments]
General Terms
Security
Keywords
Secure programming, application security, interactive sup-
port, secure software development
1.
INTRODUCTION
Software vulnerabilities originating from insecure code are
one of the leading causes of security problems people face
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
today [36]. Unfortunately, many developers have not been
adequately trained in writing secure programs that are re-
sistant from attacks violating program conﬁdentiality, in-
tegrity, and availability. We refer to this concept of writing
secure code as secure programming [4]. Programmer errors,
including security ones, are unavoidable even for well-trained
developers. One major cause of such errors is software de-
velopers’ heavy cognitive load in dealing with a multitude
of issues, such as functional requirements, runtime perfor-
mance, deadlines, and security. Consider Donald Knuth’s
analysis of 867 software errors he made while writing TEX
[19]. It is clear from the log that some of these errors could
have made TEX vulnerable to security breaches. The follow-
ing quote illustrates Knuth’s experience of heavy cognitive
burden as a major source of software errors:
“Here I did not remember to do everything I had
intended when I actually got around to writing
a particular part of the code.
It was a simple
error of omission, rather than commission. . . This
seems to be one of my favorite mistakes: I often
forget the most obvious things” [19].
Current tool support for secure programming, both from
tool vendors as well as within the research community, fo-
cuses on catching security errors after the program is writ-
ten. Static and dynamic analyzers work in a similar way as
early compilers: developers must ﬁrst run the tool, obtain
and analyze results, diagnose programs, and ﬁnally ﬁx the
code if necessary. Thus, these tools tend to be used to ﬁnd
vulnerabilities at the end of the development lifecycle. How-
ever, their popularity does not guarantee utilization; other
business priorities may take precedence. Moreover, using
such tools often requires some security expertise and can
be costly.
If programmers are removed from this analysis
process, these tools will also not help prevent them from
continuing to write insecure code.
We believe these vulnerability detection tools could be
complemented by interactive support that reminds develop-
ers of good secure programming practices in situ, helping
them to either close the secure programming knowledge gap
or overcome attention/memory lapses. This approach can
be justiﬁed based on cognitive theories of programmer errors
[20, 21, 38]. Our hypothesis is that by providing eﬀective
reminder support in an IDE, one can eﬀectively reduce com-
mon security vulnerabilities. Our approach is analogous to
word processor spelling and grammar support. While people
can run spelling and grammar checks after they have writ-
ten a document, today’s word processors also provide visual
(cid:1)(cid:2)(cid:3)
cues – colored lines drawn underneath potential errors – to
help writers notice and ﬁx problems while they are com-
posing text. Similarly, our approach proposes that an IDE
could interactively identify parts of the program where se-
curity considerations, such as input validation/encoding or
Cross-site Request Forgery (CRSF) protection, are needed
while programmers are writing code.
In this paper, we describe our interactive reminder ap-
proach through the Application Security IDE (ASIDE), an
Eclipse plugin for Java. ASIDE uses two key techniques to
help programmers prevent errors: interactive code refactor-
ing and interactive code annotation. While we have pre-
viously introduced this idea of an interactive approach to
secure programming [37], in this paper, we present our pro-
totype implementation, along with a detailed evaluation
of this plugin on two large-scale open source code bases,
demonstrating its potential feasibility and eﬀectiveness at
identifying and preventing important security vulnerabili-
ties. We also describe a user evaluation showing that users
embrace such unobtrusive and helpful reminder support, and
actively engage in the interaction with ASIDE. Thus, the
major contribution of this paper is the multi-aspect eval-
uation of our proposed approach. Through our evaluation
process, we also identify directions for future improvements
to ASIDE and research.
2. ASIDE: APPLICATION SECURITY IN IDE
The ASIDE plugin is a prototype implementation of our
interactive approach to reminding and helping programmers
to perform good secure programming practices. Our ap-
proach was based on a number of design considerations.
First, it is easiest and most cost eﬀective for developers to
write secure code and to document security implementation
during program construction. This means creating a tool
that integrates into the programmers’ development environ-
ment is promising. As a starting point, we chose the popu-
lar Eclipse platform, and implemented ASIDE to work with
Java. Our current implementation of ASIDE is primarily
designed to assist Web-based applications and to mitigate
commonly committed vulnerabilities due to improper input
validation and/or ﬁltering, broken access control, and Cross-
site Request Forgery (CSRF). ASIDE, once activated, con-
tinuously monitors Eclipse workspace changes in order to re-
spond to newly created projects, as well as modiﬁcations to
existing projects. ASIDE performs static analysis incremen-
tally on a small chunk of code under construction, thus en-
suring prompt response to developers’ immediate code edit-
ing. Such analysis is carried out “under the hood” without
requiring developers to understand its security implications.
Our second consideration is the interface design principle
that recognition is favored over recall [33]. Developers are
provided with appropriate visual alerts on secure program-
ming issues and oﬀered assistance to practice secure pro-
gramming. ASIDE provides these alerts as a colored icon on
the left hand side margin of the code editing window, accom-
panied with highlighted text, see Figure 1. A developer can
then either click on that icon or hover over the highlighted
text to interact with ASIDE to address the issue. Our two
key mechanisms for this interactive support are interactive
code refactoring and interactive code annotation, which are
discussed in detail in the following sections. There are no
additional steps a developer must remember, and they can
interact with ASIDE when they choose. Thus, the tool acts
as a helpful assistant and does not hinder developers’ cre-
ativity and productivity by dictating a rigid approach to
secure programming.
Third, an in-situ reminder tool can be an eﬀective train-
ing aid that either helps novices to learn secure program-
ming practices or reinforces developers’ secure programming
training, making security a ﬁrst class concern throughout
the development process. This will help developers learn to
reduce their programmer errors over time, reducing costly
analysis and testing after implementation.
Finally, we want to support sharing secure programming
knowledge and standards amongst development teams. In
an industrial setting, ASIDE could be conﬁgured by an orga-
nization’s software security group (SSG), which is responsi-
ble for ensuring software security as identiﬁed by best indus-
try practice [11]. Thus, a SSG could use ASIDE to communi-
cate and promote organizational and/or application-speciﬁc
programming standards. In addition, the plugin can gener-
ate logs of how security considerations were addressed dur-
ing construction, providing necessary information for more
eﬀective code review and auditing.
ASIDE ﬁrst must detect potential vulnerabilities in pro-
gram code, and alert programmers to those vulnerabilities.
Thus, to be eﬀective, ASIDE must exhibit a certain level
of precision in identifying vulnerable code in order to pro-
vide proper assistance to address it. Based on our prototype
implementation, a vulnerability can be easily eliminated by
either of the two interactive techniques if the correspond-
ing vulnerable code is correctly identiﬁed. Therefore, a key
measure of the eﬀectiveness of ASIDE is the measure of its
ability to ﬁnd vulnerable code. For each of the interactive
techniques presented below, we present the details of how
eﬀective ASIDE is at detecting the corresponding vulnera-
bilities. The eﬀectiveness of the interactive techniques to ad-
dress those vulnerabilities heavily depends on how the pro-
grammer responds to the warning. This we evaluate based
on a preliminary user study of programmer behaviors, pre-
sented in Section 7.
3.
INTERACTIVE CODE REFACTORING
Interactive code refactoring [37] works in a manner similar
to a word processor that corrects spelling and grammatical
errors. In this case, ASIDE automatically inserts necessary
code, with the help of the programmer. We believe code
refactoring can be appropriately applied to input validation
and/or ﬁltering types of vulnerabilities. In this section, we
discuss an example concerning input validation to illustrate
the key concepts.
A developer is alerted by a marker and highlighted text
in the edit window when input validation is needed. ASIDE
has a rule-based speciﬁcation language, which is also XML-
based, to specify sources of untrusted inputs which we for-
mally named as trust boundaries. Currently two types of
rules are supported: Method (API) invocations, for exam-
ple, method textttgetParameter(String parameter) in class
HttpServletRequest introduces user inputs from clients into
the system; and Parameter input, for instance, arguments of
the Java program entrance method main(String[] args).
With a mouse click, the developer has access to a list of
possible validation options, such as a ﬁle path, URL, date, or
safe text. Upon the selection of an option, appropriate input
validation code will be inserted and the red marker will be
dismissed. Figure 1 shows a screenshot of ASIDE facilitating
(cid:1)(cid:2)(cid:3)
a developer to select an appropriate input validation type for
an identiﬁed untrusted input. The library of input validation
options can be easily reconﬁgured by an individual developer
or an organization.
composite data type is unbound, ASIDE leaves the marker
shown in Figure 3 throughout the development to serve as
a continual reminder.
Figure 3: Visually softer marker that marks a
tainted input with composite data type: Map.
ASIDE supports two types of input validation rules: syn-
tactic rules and semantic rules. A syntactic rule deﬁnes the
syntax structure of an acceptable input and is often rep-
resented as a regular expression. Examples include valid
names, addresses, URLs, ﬁlenames, etc. Semantic rules de-
pend on the application context. For example, restricting
the domain of URLs, ﬁles under certain directories, date
range, or extentions for uploaded ﬁles. They can also be
used to validate inputs of special data types, such as certain
properties of a sparse matrix. While validation rules can be
declaratively speciﬁed by a SSG, a developer has the option
to address the identiﬁed input validation issue by writing
custom routines. This is then documented by ASIDE for
later security audit. A developer can also easily dismiss
ASIDE warnings if they are determined to be irrelevant. In
any case, once the alert has been addressed, the correspond-
ing red marker and text highlights will disappear in order to
reduce programmer distraction and annoyance.
Another beneﬁt of ASIDE is that it can help enforce secure
software development standards across the organization. For
example, a company may deploy a validation and/or encod-
ing library and clearly deﬁne a set of trust boundaries for
the purpose of performing input validation and/or encod-
ing. Once appropriatly conﬁgured with the deﬁned trust
boundaries and libraries, ASIDE can collect information as
to where in the source code an untrusted input was brought
into the system and what actions a developer took to address
validation and/or encoding. ASIDE can also eﬀectively sup-
plement the security audit process by generating rules for
traditional static analyzers. For example, once an untrusted
input has been validated, customized Fortify rules can be
generated to remove taints, thus avoiding unnecessary is-
sues being generated during the auditing process. This can
signiﬁcantly reduce the time of a software security audit.
4. EVALUATION OF CODE REFACTORING
We now evaluate the eﬀectiveness of ASIDE’s vulnerable
code detection for interactive code refactoring using an open
source project of realistic scale. Thus, in this section, we
focus on input validation and/or encoding vulnerabilities,
as the ones currently supported by code refactoring. Our
goals are to determine: (a) How eﬀective is ASIDE at dis-
covering exploitable software vulnerabilities and preventing
them? and (b) What constitutes false positives for ASIDE?
The signiﬁcance of this evaluation is the use of real world