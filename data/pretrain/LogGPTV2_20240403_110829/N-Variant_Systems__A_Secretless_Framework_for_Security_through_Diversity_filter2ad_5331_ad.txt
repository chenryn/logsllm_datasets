perform system call
save result and data in kernel buffer
wake up sibling
return result;
} else { DIVERGENCE ERROR! } // sibling used different parameters
} else { DIVERGENCE ERROR! } } } // sibling is in a different system call
Figure 2. Typical shared system call wrapper.
114
Security ’06: 15th USENIX Security Symposium
USENIX Association
N-variant processes. If the process is a variant process,
it records that it has entered this system call and checks
if its sibling variant has already entered a system call. If
it has not, it saves the parameters and sleeps until the
other variant wakes it up. Otherwise, it checks that the
system call and its parameters match those used by the
first variant to make the system call. If they match, the
actual system call is made. The result is copied into a
kernel buffer, and the sibling variant process (which
reached this system call first and went to sleep) is
awoken. The sibling process copies the result from the
kernel buffer back into its address space and continues
execution.
Reflective System Calls. We consider any system call
that observes or modifies properties of the process itself
a reflective system call. For these calls, we need to en-
sure that all observations always return the same value
regardless of which variant reaches the call first, and
that all modifications to process properties are done
equivalently on all variants. For observation-only re-
flective calls, such as getpid, we check that all variants
make the same call, and then just make the call once for
variant 0 and send the same result to all variants. This is
done using wrappers similar to those for shared system
calls, except instead of just allowing the last variant that
reaches the call to make the actual system call we need
to make sure that each time a reflective call is reached,
it is executed for the same process.
Another issue is raised by the system calls that create
child processes (sys_fork, sys_vfork, and sys_clone).
The wrappers for these calls must coordinate each vari-
ant’s fork and set up all the child processes as a child
N-variant system before any of the children are placed
on the run queue. These system calls return the child
process’ PID. We ensure that all the parents in the
N-variant system get the same PID (the PID of variant
0’s child), as with the process observation system calls.
The other type of reflective system call acts on the
process itself. These system calls often take parameters
given by the reflective observation system calls. In this
case, we make sure they make the same call with the
same parameters, but alter the parameters accordingly
for each variant. For example, sys_wait4 takes a PID as
an input. Each of the variants will call sys_wait4 with
the same PID because they were all given the same
child PID when they called sys_fork (as was required to
maintain normal equivalence). However, each variant
needs to clean up its corresponding child process within
the child system. The wrapper for sys_wait4 modifies
the PID value passed in and makes the appropriate call
for each variant with its corresponding child PID. Simi-
lar issues arise with sys_kill, sys_tkill, and sys_waitpid.
Finally, we have to deal with two system calls that ter-
minate a process: sys_exit and sys_exit_group. A termi-
nating process does not necessarily go through these
system calls, since it may terminate by crashing. To
ensure that we capture all process termination events in
an N-variant system we added a monitor inside the
do_exit function within the kernel which is the last func-
tion all terminating processes execute. This way, if a
process receives a signal and exits without going
through a system call, we will still observe this and can
terminate the other variants.
Dangerous System Calls. Certain calls would allow
processes to break assumptions on which we rely. For
example, if the process uses the execve system to run a
new executable, this will escape the N-variant protec-
tions unless we can ensure that each variant executes a
different executable that
is diversified appropriately.
Since it is unlikely we can establish this property, the
execve wrapper just disables the system call and returns
an error code. This did not pose problems for Apache,
but might for other applications.
Other examples of dangerous system calls are those for
memory mapping (old_mmap, sys_mmap2) which map
a portion of a file into a process’ address space. After a
file is mapped into an address space, memory reads and
writes are analogous to reads and writes from the file.
This would allow an attacker to compromise one vari-
ant, and then use the compromised variant to alter the
state of the uncompromised variants through the shared
memory without detection, since no system call is nec-
essary. Since many server applications
(including
Apache) use memory mapping, simply blocking these
system calls is not an option. Instead, we place restric-
tions on them to allow only the MAP_ANONYMOUS
and MAP_PRIVATE options with all permissions and to
permit MAP_SHARED mappings as long as write per-
missions are not requested. This eliminates the com-
munication channel between the variants, allowing
memory mapping to be used safely by the variants.
Apache runs even with these restrictions since it does
not use other forms of memory mapping, but other solu-
tions would be needed to support all services.
5.3 Performance
Table 1 summarizes our performance results. We meas-
ured the throughput and latency of our system using
WebBench 5.0 [65], a web server benchmark using a
variety of static web page requests. We ran two sets of
USENIX Association
Security ’06: 15th USENIX Security Symposium
115
Configuration
1
2
Description
Unsaturated
Saturated
Throughput (MB/s)
Latency (ms)
Throughput (MB/s)
Latency (ms)
Unmodified
Unmodified
Apache,
unmodified
kernel
Apache,
N-variant
kernel
2.36
2.35
9.70
17.65
2.32
2.40
9.59
17.80
3
2-variant
system,
address
partitioning
2.04
2.77
5.06
34.20
4
Apache
running
under
Strata
2.27
2.42
8.54
20.30
5
Apache
with
instruc-
tion tags
2.25
2.46
8.30
20.58
6
2-variant
system,
instruc-
tion tags
1.80
3.02
3.55
48.30
Table 1. Performance Results. 
experiments measuring the performance of our Apache
server under unsaturated and saturated load conditions.
In both sets, there was a single 2.2GHz Pentium 4
server machine with 1GB RAM running Fedora Core 3
(2.6.11 kernel) in the six different configurations shown
in Table 1. For the first set of experiences, we used a
single client machine running one WebBench client
engine. For the load experiments, we saturated our
server using six clients each running five WebBench
client engines connected to the same networks switch as
the server.
Configuration 1 is the baseline configuration: regular
apache running on an unmodified kernel. Configuration
2 shows the overhead of the N-variant kernel on a nor-
mal process. In our experiments, it was negligible; this
is unsurprising since the overhead is only a simple com-
parison at the beginning of each wrapped system call.
Configuration 3 is a 2-variant system running in our N-
variant framework where the two variants differ in the
address spaces according to the partitioning scheme
described in Section 4.1. For the unloaded server, the
latency observed by the client increases by 17.6%. For
the loaded server, the throughput decreases by 48% and
the latency nearly doubles compared to the baseline
configuration. Since the N-variant system executes all
computation twice, but all I/O system calls only once,
the overhead incurred reflects the cost of duplicating the
computation, as well as the checking done by the wrap-
pers. The overhead measured for the unloaded server is
fairly low, since the process is primarily I/O bound; for
the loaded server, the process becomes more compute-
bound, and the approximately halving of throughput
reflects the redundant computation required to run two
variants.
The instruction tagging variation is more expensive
because of the added cost of removing and checking the
instruction tags. Configuration 4 shows the performance
of Apache running on the normal kernel under Strata
with no transformation. The overhead imposed by Strata
reduces throughput by about 10%. The Strata overhead
is relatively low because once a code fragment is in the
fragment cache it does not need to be translated again
the next time it executes. Adding the instruction tagging
(Configuration 5) has minimal impact on throughput
and latency. Configuration 6 shows the performance of
a 2-variant system where the variants are running under
Strata with instruction tag variation. The performance
impact is more than it was in Configuration 3 because
of the additional CPU workload imposed by the instruc-
tion tags. For the unloaded server, the latency increases
28% over the baseline configuration; for the saturated
server,
the unmodified
server’s throughput.
the throughput
is 37% of
Our results indicate that for I/O bound services, N-
variant systems where the variation can be achieved
with reasonable performance overhead, especially for
variations such as the address space partitioning where
little additional work is needed at run-time. We antici-
pate there being many other interesting variations of this
type, such as file renaming, local memory rearrange-
ment, system call number diversity, and user id diver-
sity. For CPU-bound services, the overhead of our ap-
proach will remain relatively high since all computation
needs to be performed twice. Multiprocessors may alle-
viate some of the problem (in cases where there is not
enough load to keep the other processors busy nor-
mally). Fortunately, many important services are largely
I/O-bound today and trends in processor and disk per-
formance make this increasingly likely in the future.
6. Discussion
Our prototype implementation illustrates the potential
for N-variant systems to protect vulnerable servers from
important classes of attacks. Many other issues remain
to be explored, including how our approach can be ap-
plied to other services, what variations can be created to
detect other classes of attacks, how an N-variant system
can recover from a detected attack, and how composi-
tions of design and artificially diversified variants can
provide additional security properties.
116
Security ’06: 15th USENIX Security Symposium
USENIX Association
Applicability. Our prototype kernel
implementation
demonstrated the effectiveness of our approach using
Apache as a target application. Although Apache is a
representative server, there are a number of things other
servers might do that would cause problems for our
implementation. The version of Apache used in our
experiments on uses the fork system call to create sepa-
rate processes to handle requests. Each child process is
run as an independent N-variant system. Some servers
use user-level threading libraries where there are multi-
ple threads within a single process invisible to our ker-
nel monitor. This causes problems in an N-variant sys-
tem, since the threads in the variants may interleave
differently to produce different sequences of system
calls (resulting in a false detection), or worse, interleave
in a way that allows an attacker to exploit a race condi-
tion to carry out a successful attack without detection.
One possible solution to this problem is to modify the
thread scheduler to ensure that threads in the variants
are scheduled identically to preserve synchronization
between the variants.
The asynchronous property of process signals makes it
difficult to ensure that all variants receive a signal at the
exact same point in each of their executions. Although
we can ensure that a signal is sent to all the variants at
the same time, we cannot ensure that all the variants are
exactly at the same point within their program at that
time. As a result, the timing of a particular signal could
cause divergent behavior in the variants if the code be-
haves differently depending on the exact point when the
signal is received. This might cause the variants to di-
verge even though they are not under attack, leading to
a false positive detection. As with user-level threads, if
we modify the kernel to provide more control of the
scheduler we could ensure that variants receive signals
at the same execution points.
Another issue that limits application of our approach is
the use of system calls we classified as dangerous such
as execve or unrestricted use of mmap. With our cur-
rent wrappers, a process that uses these calls is termi-
nated since we cannot handle them safely in the N-
variant framework. In some cases, more precise wrap-
pers may allow these dangerous calls to be used safely
in an N-variant system. Some calls, however, are inher-
ently dangerous since they either break isolation be-
tween the variants or allow them to escape the frame-
work. In these situations, either some loss of security
would need to be accepted, or the application would
need to be modified to avoid the dangerous system calls
before it could be run as an N-variant system.
Other variations. The variations we have implemented
only thwart attacks that
require accessing absolute
memory addresses or injecting code. For example, our
current instruction tagging variation does not disrupt a
return-to-libc attack (since it does not involve injecting
code), and our address space partitioning variation pro-
vides no protection against memory corruption attacks
that only use relative addressing. One goal for our fu-
ture work is to devise variations that enable detection of
larger classes of attack within the framework we have
developed. We believe there are rich opportunities for
incorporating different kinds of variation in our frame-
work, although the variants must be designed carefully
to ensure the detection and normal equivalence proper-
ties are satisfied. Possibilities include variations involv-
ing memory layout to prevent classes of relative ad-
dressing attacks, file system paths to disrupt attacks that
depend on file names, scheduling to thwart race condi-
tion attacks, and data structure parameters to disrupt
algorithmic complexity attacks [21].
Composition. Because of the need to satisfy the normal
equivalence property, we cannot simply combine multi-
ple variations into two variants to detect the union of
their attack classes. In fact, such a combination risks
compromising the security properties each variation
would provide by itself. By combining variations more
carefully, however, we can compose variants in a way
that maintains the properties of the independent varia-
tions. To do this securely, we must ensure that, for each
attack class we wish to detect, there is a pair of variants
in the system that differs only in the transformation used
to detect that attack class. This is necessary to ensure
that for each variation, there is a pair of variants that
satisfy the normal equivalence property for that varia-