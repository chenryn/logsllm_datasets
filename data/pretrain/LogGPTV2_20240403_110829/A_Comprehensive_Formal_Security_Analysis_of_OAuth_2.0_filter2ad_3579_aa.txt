# A Comprehensive Formal Security Analysis of OAuth 2.0

**Authors:**
- Daniel Fett, University of Trier, Germany
- Ralf Küsters, University of Trier, Germany
- Guido Schmitz, University of Trier, Germany

## Abstract

OAuth 2.0 is one of the most widely deployed authorization and single sign-on (SSO) protocols, also serving as the foundation for the new SSO standard, OpenID Connect. Despite its popularity, previous security analyses have primarily focused on identifying bugs in specific implementations or were based on formal models that abstracted many web features.

In this paper, we present the first extensive formal analysis of the OAuth 2.0 standard within an expressive web model. Our analysis aims to establish strong guarantees for authorization, authentication, and session integrity, for which we provide formal definitions. We cover all four OAuth grant types: authorization code grant, implicit grant, resource owner password credentials grant, and client credentials grant. These grant types can run simultaneously across different relying parties (RPs) and identity providers (IdPs), including scenarios with malicious entities.

Our modeling and analysis assume adherence to security recommendations and best practices to avoid known attacks. During our security proof, we discovered four vulnerabilities in OAuth 2.0 that can be exploited in practice and are also present in OpenID Connect. We propose fixes for these vulnerabilities and prove the security of the fixed version of OAuth in our comprehensive web model. Specifically, we show that the fixed version of OAuth, when following security recommendations and best practices, provides the specified authorization, authentication, and session integrity properties.

## 1. Introduction

The OAuth 2.0 authorization framework [20] defines a web-based protocol allowing users to grant websites (relying parties, RPs) access to their resources (data or services) at other websites (identity providers, IdPs). In practice, OAuth 2.0 is also used for authentication, enabling users to log in at RPs using their identities managed by IdPs (single sign-on, SSO).

OAuth 2.0 has been widely adopted, with major identity providers such as Amazon, Facebook, Google, Microsoft, Yahoo, GitHub, LinkedIn, StackExchange, and Dropbox supporting it. This enables billions of users to log in at millions of RPs or share their data. OAuth 2.0 is also the foundation for OpenID Connect, a new SSO protocol already in use and supported by PayPal, Google, and Microsoft, among others.

OAuth 2.0 supports four grant types: authorization code grant, implicit grant, resource owner password credentials grant, and client credentials grant. Each grant type can be configured with various options, adding to the complexity of the protocol.

### Contributions of This Paper

- **Comprehensive Formal Analysis**: We perform the first extensive formal analysis of the OAuth 2.0 standard, covering all four grant types, which can run simultaneously within the same and different RPs and IdPs.
- **Expressive Web Model**: Our analysis is based on a comprehensive Dolev-Yao style web model proposed by Fett, Küsters, and Schmitz (FKS), which closely mimics real-world web standards and specifications.
- **Formalization of Security Properties**: We define three central security properties: authorization, authentication, and session integrity.
- **Vulnerability Discovery and Fixes**: We discovered four vulnerabilities in OAuth 2.0, verified them in actual implementations, and proposed easy-to-implement fixes. The identified vulnerabilities are also present in OpenID Connect.
- **Security Proof**: Using our model with the proposed fixes, we prove that OAuth 2.0 satisfies the defined security properties.

### Structure of This Paper

- **Section 2**: Detailed description of the OAuth 2.0 authorization code mode.
- **Section 3**: Presentation of the discovered attacks.
- **Section 4**: Overview of the FKS web model.
- **Section 5**: Formal analysis of OAuth 2.0.
- **Section 6**: Discussion of related work.
- **Section 7**: Conclusion.

Full details, including how the attacks apply to OpenID Connect, further details on our model, and the security proof, are available in our technical report [17].

## 2. OAuth 2.0

### Authorization Code Mode

OAuth 2.0 was initially designed for authorization, allowing users to grant RPs access to their data at IdPs. For example, a user can authorize IFTTT to access her private timeline on Facebook, where IFTTT is the RP and Facebook is the IdP.

In the authorization code mode, the process works as follows:

1. **User Initiation**: The user initiates the authorization process at the RP.
2. **Redirection to IdP**: The RP redirects the user's browser to the IdP's authorization endpoint with parameters such as `client_id`, `redirect_uri`, and `state`.
3. **User Authentication and Consent**: The user authenticates at the IdP and consents to the authorization request.
4. **Authorization Code Issuance**: The IdP issues an authorization code and redirects the user back to the RP's `redirect_uri` with the code and state.
5. **Token Request**: The RP exchanges the authorization code for an access token by sending a request to the IdP's token endpoint, including the `client_secret` if issued.
6. **Access Token Usage**: The RP uses the access token to access the user's protected resources at the IdP.

### Registration Process

Before interacting with an IdP, an RP must register with the IdP. During registration, the IdP assigns the RP a public `client_id` and, optionally, a `client_secret`. The RP also registers one or more `redirect_uri`s, which the IdP uses to redirect the user's browser during the authorization process.

### Other Grant Types

- **Implicit Grant**: Similar to the authorization code grant but without the intermediate step of exchanging an authorization code for an access token.
- **Resource Owner Password Credentials Grant**: The user provides their username and password directly to the RP, which then requests an access token from the IdP.
- **Client Credentials Grant**: Used for server-to-server interactions where the RP itself is the resource owner and directly requests an access token from the IdP.

For a detailed description of the remaining grant types, refer to our technical report [17].

## 3. Attacks on OAuth 2.0 and Fixes

During our security analysis, we discovered four attacks on OAuth 2.0:

1. **Credential Forwarding Attack**: An IdP inadvertently forwards user credentials (username and password) to the RP or an attacker, breaking authorization and authentication.
2. **IdP Mix-Up Attack**: A network attacker impersonating an IdP can impersonate any victim, breaking authorization and authentication.
3. **Session Integrity Attack**: An attacker can force a browser to log in under the attacker's name at an RP or force an RP to use the attacker's resource instead of the user's, breaking session integrity.

We verified these attacks on actual implementations of OAuth and OpenID Connect and proposed fixes. The fixes involve simple changes that can be implemented in both new and existing deployments. The IdP mix-up attack has already led to a draft of a new RFC [22].

## 4. Overview of the FKS Web Model

Our formal analysis is based on the FKS web model, which is a Dolev-Yao style model that closely mimics real-world web standards and specifications. It includes:

- **HTTP(S) Requests and Responses**: Modeling of headers such as cookies, location, strict transport security (STS), and origin.
- **Web Browsers**: Captures concepts like windows, documents, and iframes, including navigation rules and new technologies like web storage and web messaging.
- **JavaScript**: Modeled abstractly as scripts that can create iframes and initiate XMLHttpRequests (XHRs).
- **Adversary Model**: Browsers may be dynamically corrupted by the adversary.

Using this model, we build a formal model of OAuth 2.0, closely following the OAuth 2.0 standard (RFC6749 [20]) and incorporating security recommendations and best practices.

## 5. Formal Analysis of OAuth 2.0

Based on our model of OAuth 2.0, we formally define and prove the following security properties:

- **Authorization**: Ensuring that only authorized RPs can access protected resources.
- **Authentication**: Ensuring that users are correctly authenticated.
- **Session Integrity**: Ensuring that sessions remain secure and unaltered.

With the proposed fixes in place, we prove that OAuth 2.0 satisfies these properties in our comprehensive web model. This is the first proof establishing these central security properties for OAuth 2.0.

## 6. Related Work

Most previous analysis efforts on OAuth 2.0 have focused on finding bugs in specific implementations rather than providing a comprehensive analysis of the standard. The most detailed formal analysis to date is [6], but it does not account for all modes running simultaneously and lacks a comprehensive web model. Our work addresses these gaps and provides a thorough security analysis.

## 7. Conclusion

In this paper, we presented the first extensive formal analysis of OAuth 2.0, covering all four grant types and based on a comprehensive web model. We discovered and fixed four vulnerabilities, and proved the security of the fixed version of OAuth 2.0. Our results provide guidelines for secure OAuth implementations and serve as a foundation for future work on the security of OpenID Connect.

For full details, including the application of the attacks to OpenID Connect, further details on our model, and the security proof, see our technical report [17].