title:A Comprehensive Formal Security Analysis of OAuth 2.0
author:Daniel Fett and
Ralf K&quot;usters and
Guido Schmitz
A Comprehensive Formal Security Analysis of OAuth 2.0
Daniel Fett
University of Trier, Germany
PI:EMAIL
Ralf Küsters
University of Trier, Germany
PI:EMAIL
Guido Schmitz
University of Trier, Germany
PI:EMAIL
ABSTRACT
The OAuth 2.0 protocol is one of the most widely deployed au-
thorization/single sign-on (SSO) protocols and also serves as the
foundation for the new SSO standard OpenID Connect. Despite the
popularity of OAuth, so far analysis efforts were mostly targeted at
ﬁnding bugs in speciﬁc implementations and were based on formal
models which abstract from many web features or did not provide
a formal treatment at all.
In this paper, we carry out the ﬁrst extensive formal analysis of
the OAuth 2.0 standard in an expressive web model. Our analy-
sis aims at establishing strong authorization, authentication, and
session integrity guarantees, for which we provide formal deﬁni-
tions. In our formal analysis, all four OAuth grant types (autho-
rization code grant, implicit grant, resource owner password cre-
dentials grant, and the client credentials grant) are covered. They
may even run simultaneously in the same and different relying par-
ties and identity providers, where malicious relying parties, identity
providers, and browsers are considered as well. Our modeling and
analysis of the OAuth 2.0 standard assumes that security recommen-
dations and best practices are followed in order to avoid obvious
and known attacks.
When proving the security of OAuth in our model, we discovered
four attacks which break the security of OAuth. The vulnerabilities
can be exploited in practice and are present also in OpenID Connect.
We propose ﬁxes for the identiﬁed vulnerabilities, and then, for
the ﬁrst time, actually prove the security of OAuth in an expressive
web model. In particular, we show that the ﬁxed version of OAuth
(with security recommendations and best practices in place) pro-
vides the authorization, authentication, and session integrity proper-
ties we specify.
1.
INTRODUCTION
The OAuth 2.0 authorization framework [20] deﬁnes a web-based
protocol that allows a user to grant web sites access to her resources
(data or services) at other web sites (authorization). The former
web sites are called relying parties (RP) and the latter are called
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’16, October 24 – 28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978385
identity providers (IdP).1 In practice, OAuth 2.0 is often used for
authentication as well. That is, a user can log in at an RP using her
identity managed by an IdP (single sign-on, SSO).
Authorization and SSO solutions have found widespread adop-
tion in the web over the last years, with OAuth 2.0 being one of the
most popular frameworks. OAuth 2.0, in the following often sim-
ply called OAuth,2 is used by identity providers such as Amazon,
Facebook, Google, Microsoft, Yahoo, GitHub, LinkedIn, StackEx-
change, and Dropbox. This enables billions of users to log in at
millions of RPs or share their data with these [35], making OAuth
one of the most used single sign-on systems on the web.
OAuth is also the foundation for the new single sign-on protocol
OpenID Connect, which is already in use and actively supported
by PayPal (“Log In with PayPal”), Google, and Microsoft, among
others. Considering the broad industry support for OpenID Connect,
a widespread adoption of OpenID Connect in the next years seems
likely. OpenID Connect builds upon OAuth and provides clearly
deﬁned interfaces for user authentication and additional (optional)
features, such as dynamic identity provider discovery and relying
party registration, signing and encryption of messages, and logout.
In OAuth, the interactions between the user and her browser,
the RP, and the IdP can be performed in four different ﬂows, or
grant types: authorization code grant, implicit grant, resource owner
password credentials grant, and the client credentials grant (we refer
to these as modes in the following). In addition, all of these modes
provide further options.
The goal of this work is to provide an in-depth security analysis
of OAuth. Analyzing the security of OAuth is a challenging task,
on the one hand due to the various modes and options that OAuth
provides, and on the other hand due to the inherent complexity of
the web.
So far, most analysis efforts regarding the security of OAuth were
targeted towards ﬁnding errors in speciﬁc implementations [6, 10,
25, 33, 34, 36, 38], rather than the comprehensive analysis of the
standard itself. Probably the most detailed formal analysis carried
out on OAuth so far is the one in [6]. However, none of the existing
analysis efforts of OAuth account for all modes of OAuth running
simultaneously, which may potentially introduce new security risks.
In fact, many existing approaches analyze only the authorization
code mode and the implicit mode of OAuth. Also, importantly,
there are no analysis efforts that are based on a comprehensive
formal web model (see below), which, however, is essential to rule
1Following the OAuth 2.0 terminology, IdPs are called autho-
rization servers and resource servers, RPs are called clients, and
users are called resource owners. Here, however, we stick to the
more common terms mentioned above.
2Note that in this document, we consider only OAuth 2.0, which
is very different to its predecessor, OAuth 1.0(a).
1204out security risks that arise when running the protocol in the context
of common web technologies (see Section 6 for a more detailed
discussion of related work).
Contributions of this Paper. We perform the ﬁrst extensive formal
analysis of the OAuth 2.0 standard for all four modes, which can
even run simultaneously within the same and different RPs and IdPs,
based on a comprehensive web model which covers large parts of
how browsers and servers interact in real-world setups. Our analysis
also covers the case of malicious IdPs, RPs, and browsers/users.
Formal model of OAuth. Our formal analysis of OAuth uses an
expressive Dolev-Yao style model of the web infrastructure [14]
proposed by Fett, Küsters, and Schmitz (FKS). The FKS model has
already been used to analyze the security of the BrowserID single
sign-on system [14, 15] as well as the security and privacy of the
SPRESSO single sign-on system [16]. This web model is designed
independently of a speciﬁc web application and closely mimics
published (de-facto) standards and speciﬁcations for the web, for
instance, the HTTP/1.1 and HTML5 standards and associated (pro-
posed) standards. It is the most comprehensive web model to date.
Among others, HTTP(S) requests and responses, including several
headers, such as cookie, location, strict transport security (STS),
and origin headers, are modeled. The model of web browsers cap-
tures the concepts of windows, documents, and iframes, including
the complex navigation rules, as well as new technologies, such as
web storage and web messaging (via postMessage). JavaScript is
modeled in an abstract way by so-called scripts which can be sent
around and, among others, can create iframes and initiate XML-
HTTPRequests (XHRs). Browsers may be corrupted dynamically
by the adversary.
Using the generic FKS model, we build a formal model of OAuth,
closely following the OAuth 2.0 standard (RFC6749 [20]). Since
this RFC does not ﬁx all aspects of the protocol and in order to
avoid known implementation attacks, we use the OAuth 2.0 security
recommendations (RFC6819 [26]), additional RFCs and OAuth
Working Group drafts (e.g., RFC7662 [30], [8]) and current web
best practices (e.g., regarding session handling) to obtain a model of
OAuth with state-of-the-art security features in place, while making
as few assumptions as possible. Moreover, as mentioned above, our
model includes RPs and IdPs that (simultaneously) support all four
modes and can be dynamically corrupted by the adversary. Also,
we model all conﬁguration options of OAuth (see Section 2).
Formalization of security properties. Based on this model of OAuth,
we provide three central security properties of OAuth: authorization,
authentication, and session integrity, where session integrity in turn
is concerned with both authorization and authentication.
Attacks on OAuth 2.0 and ﬁxes. While trying to prove these proper-
ties, we discovered four attacks on OAuth. In the ﬁrst attack, which
breaks the authorization and authentication properties, IdPs inad-
vertently forward user credentials (i.e., username and password) to
the RP or the attacker. In the second attack (IdP mix-up), a network
attacker playing the role of an IdP can impersonate any victim. This
severe attack, which again breaks the authorization and authentica-
tion properties, is caused by a logical ﬂaw in the OAuth 2.0 protocol.
Two further attacks allow an attacker to force a browser to be logged
in under the attacker’s name at an RP or force an RP to use a re-
source of the attacker instead of a resource of the user, breaking the
session integrity property. We have veriﬁed all four attacks on actual
implementations of OAuth and OpenID Connect. We present our
attacks on OAuth in detail in Section 3. In our technical report [17],
we show how the attacks can be exploited in OpenID Connect. We
also show how the attacks can be ﬁxed by changes that are easy to
implement in new and existing deployments of OAuth and OpenID
Connect.
We notiﬁed the respective working groups, who conﬁrmed the at-
tacks and that changes to the standards/recommendations are needed.
The IdP mix-up attack already resulted in a draft of a new RFC [22].
Formal analysis of OAuth 2.0. Using our model of OAuth with
the ﬁxes in place, we then were able to prove that OAuth satisﬁes
the mentioned security properties. This is the ﬁrst proof which
establishes central security properties of OAuth in a comprehensive
and expressive web model (see also Section 6).
We emphasize that, as mentioned before, we model OAuth with
security recommendations and best practices in place. As discussed
in Section 5, implementations not following these recommendations
and best practices may be vulnerable to attacks. In fact, many such
attacks on speciﬁc implementations have been pointed out in the
literature (e.g., [6, 10, 20, 25, 26, 36, 37]). Hence, our results also
provide guidelines for secure OAuth implementations.
We moreover note that, while these results provide strong security
guarantees for OAuth, they do not directly imply security of OpenID
Connect because OpenID Connect adds speciﬁc details on top of
OAuth. We leave a formal analysis of OpenID Connect to future
work. The results obtained here can serve as a good foundation for
such an analysis.
Structure of this Paper. In Section 2, we provide a detailed de-
scription of OAuth 2.0 using the authorization code mode as an
example. In Section 3, we present the attacks that we found during
our analysis. An overview of the FKS model we build upon in our
analysis is provided in Section 4, with the formal analysis of OAuth
presented in Section 5. Related work is discussed in Section 6. We
conclude in Section 7. Full details, including how the attacks can be
applied to OpenID Connect, further details on our model of OAuth,
and our security proof, can be found in our technical report [17].
2. OAUTH 2.0
In this section, we provide a description of the OAuth authoriza-
tion code mode, with the other three modes explained only brieﬂy.
In our technical report [17], we provide a detailed description of the
remaining three modes (grant types).
OAuth was ﬁrst intended for authorization, i.e., users authorize
RPs to access user data (called protected resources) at IdPs. For
example, a user can use OAuth to authorize services such as IFTTT3
to access her (private) timeline on Facebook. In this case, IFTTT is
the RP and Facebook the IdP.
Roughly speaking, in the most common modes, OAuth works
as follows: If a user wants to authorize an RP to access some of
the user’s data at an IdP, the RP redirects the user (i.e., the user’s
browser) to the IdP, where the user authenticates and agrees to grant
the RP access to some of her user data at the IdP. Then, along with
some token (an authorization code or an access token) issued by the
IdP, the user is redirected back to the RP. The RP can then use the
token as a credential at the IdP to access the user’s data at the IdP.
OAuth is also commonly used for authentication, although it was
not designed with authentication in mind. A user can, for example,
use her Facebook account, with Facebook being the IdP, to log in at
the social network Pinterest (the RP). Typically, in order to log in,
the user authorizes the RP to access a unique user identiﬁer at the
IdP. The RP then retrieves this identiﬁer and considers this user to
be logged in.
3IFTTT (If This Then That) is a web service which can be used
to automate actions: IFTTT is triggered by user-deﬁned events (e.g.,
Twitter messages) and carries out user-deﬁned tasks (e.g., posting
on the user’s Facebook wall).
1205Browser
RP
IdP
1 POST /start
idp
2 Response
Redirect to IdP /authEP with client_id,
redirect_uri, state
3 GET /authEP
client_id, redirect_uri, state
4 Response
5 POST /authEP
username, password
6 Response
Redirect to RP redirect_uri with code,
7 GET redirect_uri
state
code, state
8 POST /tokenEP
code, client_id, redirect_uri, client_secret
9 Response
access_token
10 GET /resource
access_token
11 Response
protected resource
12 GET /introspectionEP
access_token
13 Response
user_id, client_id
Authorization:
Authentication:
14 Response
session_cookie
/Browser
/RP
/IdP
Figure 1: OAuth 2.0 authorization code mode. Note that data
depicted below the arrows is either transferred in URI parame-
ters, HTTP headers, or POST bodies.
Before an RP can interact with an IdP, the RP needs to be regis-
tered at the IdP. The details of the registration process are out of the
scope of the OAuth protocol. In practice, this process is usually a
manual task. During the registration process, the IdP assigns cre-
dentials to the RP: a public OAuth client id and (optionally) a client
secret. (Recall that in the terminology of the OAuth standard the
term “client” stands for RP.) The RP may later use the client secret
(if issued) to authenticate to the IdP.
Also, an RP registers one or more redirection endpoint URIs
(located at the RP) at an IdP. As we will see below, in some OAuth
modes, the IdP redirects the user’s browser to one of these URIs.
Note that (depending on the implementation of an IdP) an RP may
also register a pattern as a redirect URI and then specify the exact
redirect URI during the OAuth run.
In all modes, OAuth provides several options, such as those men-
tioned above. For brevity of presentation (and in contrast to our
analysis), in the following descriptions, we consider only a speciﬁc
set of options. For example, we assume that an RP always provides
a redirect URI and shares an OAuth client secret with the IdP.
Authorization Code Mode. When the user tries to authorize an
RP to access her data at an IdP or to log in at an RP, the RP ﬁrst