# 技术分享：使用GDB调试ARM代码

#### 译文声明
本文为翻译文章，原文来源于azeria-labs.com。具体内容及含义请以原文为准。
- 原文链接：[How-To](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)
- 译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至linwei#360.cn 或登录网页版在线投稿

在本篇文章中，我们将简要介绍如何使用GDB来编译和调试ARM二进制文件。如果您希望动手实践ARM汇编代码的调试，需要准备一个ARM设备或在虚拟机中设置相应的实验环境。更多关于如何设置环境的信息，请参考[这篇指南](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)。

此外，我们还将通过以下取自 [Part 7 – Stack and Functions](https://azeria-labs.com/functions-and-the-stack-part-7/) 的示例代码来演示GDB的基本调试功能：

```assembly
.section .text
.global _start
_start:
    push {r11, lr}    /* 开始序言部分。保存帧指针和LR到堆栈 */
    add r11, sp, #0   /* 设置堆栈帧底部 */
    sub sp, sp, #16   /* 序言结束。在堆栈上分配缓冲区 */
    mov r0, #1        /* 设置局部变量 (a=1)。同时作为max函数的第一个参数 */
    mov r1, #2        /* 设置局部变量 (b=2)。同时作为max函数的第二个参数 */
    bl max            /* 调用/分支到max函数 */
    sub sp, r11, #0   /* 序言开始。重新调整堆栈指针 */
    pop {r11, pc}     /* 序言结束。从堆栈恢复帧指针，直接加载PC跳转到之前保存的LR */

max:
    push {r11}        /* 序言开始。保存帧指针到堆栈 */
    add r11, sp, #0   /* 设置堆栈帧底部 */
    sub sp, sp, #12   /* 序言结束。在堆栈上分配缓冲区 */
    cmp r0, r1        /* 实现 if(a < b) */
```

### GDB基本命令

**启动GDB并加载文件**
- 调试二进制代码: `$ gdb ./file`
- 检查内核崩溃文件: `$ gdb -c ./core.3243`

**获取帮助**
- 显示帮助信息: `(gdb) h` 或 `apropos`
- 例如: `gef> apropos registers`

**断点管理**
- 设置断点: `break (or just b)`
- 删除编号为x的断点: `del x`
- 删除所有断点: `delete`
- 启用/禁用断点: `disable/enable`
- 继续执行直到下一个断点: `continue (or just c)`
- 忽略当前断点指定次数: `ignore x n`

**启动和停止程序**
- 从头开始执行: `run` 或 `r`
- 停止程序运行: `kill`
- 退出GDB: `quit` 或 `q`

**内存检查**
- 使用`x`命令以不同格式显示内存内容
  - 语法: `x/Nfmt address`
  - 格式单位:
    - `x` - 十六进制
    - `d` - 十进制
    - `w` - 字 (4字节)
    - `i` - 指令
    - `s` - 字符串
  - 示例: `gef> x/10i $pc`

**单步调试**
- 执行下一条指令并进入函数内部: `stepi`

通过以上命令，您可以在指定位置暂停程序，并逐步检查内存和寄存器的状态，从而有效地进行ARM代码的调试。