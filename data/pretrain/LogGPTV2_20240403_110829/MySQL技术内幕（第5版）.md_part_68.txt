---
## Page 289
些代码添加到 my_opts 数组定义的前面即可：
值。这些值的用途是充当短选项代码，并且必须由你的程序来定义。具体来讲，只要把下面这
enum options_client
#ifdef HAVE_OPENSSL
(4）sslopt-longopts.h 所定义的选项结构引用了 OPT_SSL_SSL、OPT_SSL_KEY 等多个
#endif/*HAVE_OPENSSL*/
#endif
#ifdef HAVE_OPENSSL
sslopt-longopts.h是一个公共的MySQL头文件。其内容如下所示（格式上稍有调整)：
#include 
：
GET_STR,REQUIRED_ARG,
GET_STR,REQUIRED_ARG,
{"ssl-ca"
GET_BOOL,
Disable
"Enable
{"ssl",
【NULL,O,NULL,NULL,NULL,NULL,GET_NO_ARG,NO_ARG,O,O,O,O,O,O}
(uchar
"ssl-cipher",OPT_SSL_CIPHER,
uchar
("ssl-capath",OPT_SSL_CAPATH,
"CAfile
GET_STR,REQUIRED_ARG，O,O,O,O,O,O}
GET_BOOL, NO_ARG,O,O,O,O,O,O},
=
["socket"
(uchar
"port",
(uchar **) &opt_host_name, NULL, NULL,
uchar
user"
with
SSL for connection (automatically enabled with other flags).
in PEM format
OPT_SSL_SSL,
OPT_ARG,
&opt_ssl_cipher,
OPT_SSL_CA,
&opt_use_ssl,
&opt_port_num, NULL, NULL,
OPT_SSL_KEY,
(check OpenSSL docs)
--skip-ssl."
"Port number",
0，
"Password"
0，
(check OpensSL docs, implies --ssl).",
0
0
0
0,
0，
0，0，0,0}，
(uchar
(uchar
(uchar **) &opt_use_ssl,0,
OPT_SSL_VERIFY_SERVER_CERT,
0，
Q.
(uchar
“X509
0，0，0，0，
(uchar
0，
(uchar
0，
0，0,0,0}
"SSL cipher to use (implies --ssl).",
0,0,0}，
0
0，
in its cert against hostname used
cert
**)&opt_ssl_cipher,
0，0}
&opt_ssl_ca, 0,
&opt_ssl_cert,
in PEM format（implies--ssl).",
0}，
&opt_ssl_capath, 0,
0}
7.6
编写支持SSL的客户端程序
0，
269
---
## Page 290
的变量
OPT_SSL_XXX符号所对应的值不相同。
270
里，并且是在 my_opts 数组的定义前面。sslopt-vars.h的内容如下所示：
sslopt-case.h 包含了 switch（)语句的另外几种情况，用于检测是否给定了 SSL选项。
（5）在sslopt-longopts.h里与SSL有关的选项结构，会引用一组用于保存这些选项值
#include 
(6）在 get_one_option()例程的末尾增加一行，用于包含 sslopt-case.h 文件：
static
量。为了声明这些变量，需要用一条#include指令把 sslopt-vars.h的内容包括在程序
在编写你自己的程序时，如果这些程序也为其他选项定义了代码，那么请确保这些代码与
get_one_option (int optid,const struct my_option *opt, char *argument)
staticmy_bool
#endif
#endif
static
#ifdef
static
static
static
static
static
#ifdef HAVE_OPENSSL
return（0);
#endif
case
switch(optid)
OPT_SSL_VERIFY_SERVER_CERT
OPT_SSL_CIPHER,
OPT_SSL_CAPATH,
OPT_SSL_CA,
OPT_SSL_CERT,
OPT_SSL_SSL=256,
break;
if(!argument)
exit（0）;
my_print_help（my_opts）;
第7章用C语言编写MySQL程序
else
ask_password=0;
while(*argument)
ask_password=1;
opt_password=strdup（argument);
:.d
my_bool opt_ssl_verify_server_cert=0;
MYSQL_CLIENT
char *opt_ssl_key
char
char
char *opt_ssl_capath
exit（1）;
print_error (NULL,
*opt_ssl_cipher
*opt_ssl_cert
x;
"could not allocate password buffer");
II
1*复制密码，改写原有密码*/
/*输出帮助消息*/
/*
￥
0
0
0
0
如果未给定值，则在随后提示输入它*/
密码*/
---
## Page 291
真如此，则可以执行下面这条语句：
适当使用了SSL选项，那么与服务器的通信便是通过加密连接进行的。如果想确定一下是否果
mysql_real_connect（）调用成功，那么继续执行各条语句。如果在调用 exec_stmt_ssl时，
调用 mysql_ssl_set（）来完成。整个操作序列如下所示：
发库。这个工作可以在调用mysql_init（）之后、调用mysql_real_connect（）之前，通过
选项表明用户想要建立SSL连接，那么需要在连接到服务器之前，把这些信息传递到客户端开
会负责解析SSL相关的选项，并自动设置它们的值。你唯一需要做的事情是，如果这些SSL
判断用户是否想要使用安全连接。
如果有 SSL选项，则设置 opt_use_ssl变量。此文件的内容如下所示：
SHOW STATUS LIKE 'Ssl_cipher
把exec_stmt_ssl.c编译成exec_stmt_ssl程序，
如果使用以上步骤,那么经常用到的两个例程1oad_defaults（）和handle_options（)
这段代码并没有通过测试mysql_ssl_set（）来判断它是否返回了错误。
#ifdef HAVE_OPENSSL
这种做法所造成的影响是：在选项处理工作结束后，程序可以通过检测opt_use_ssl值来
#ifdef HAVE_OPENSSL
#endif
mysql_options (conn,MYSQL_OPT_SSL_VERIFY_SERVER_CERT,
endif
/*连接服务器*/
/*把SSL信息传递到客户端开发库*/
if （conn == NULL)
conn = mysql_init (NULL);
1*初始化连接处理器*/
7￥
caSe OPT_SSL_CIPHER:
case OPT_SSL_CERT
caSe OPT_SSL_KEY:
exit (1);
mysql_close（conn);
print_error (conn,
(mysql_real_connect(conn,opt_host_name,
mysql_ssl_set
exit（1）;
opt_use_ssl= 1;
如果使用了ss1选项，则启用SSL功能
opt_db_name,opt_port_num, opt_socket_name,opt_flags) == NULL)
OPT_SSL_CA:
(char*)&opt_ssl_verify_server_cert);
(conn,opt_ssl_key,
"mysql_real_connect() failed");
7.6编写支持 SSL 的客户端程序
opt_user_name,opt_password,
然后运行它。
当你调用
如果
271
---
## Page 292
用于检索多个结果集：
其结果，或者显示受其影响的行数。通过把结果检索代码放入循环，并使用
你可以根据 mysql_next_result（)的返回值来判断是否还有更多的结果。
循环。根据循环语句具体结构的不同，你可能根本不需要调用 mysql_more_results（），因为
果之后，请记得检查一下是否还有结果需要检索。如果有，则再循环一次。如果没有，则退出
表明你启用了此选项。）
选项添加到 mysql_real_connect（）的标志参数里，这种做法更可取，因为它可以明白无误地
须启用，否则，当存储过程试图返回结果集时，会出现错误。（把CLIENT_MULTI_STATEMENTS
CLIENT_MULTI_STATEMENTS 选项会顺便打开CLIENT_MULTI_RESULTS 选项，后面这个选项必
了存储过程，并且调用了CALL语句来返回结果集，那么用第一种办法更好些。这是因为
器。有两种告知办法。第一种是，在连接服务器时，把CLIENT_MULTI_STATEMENTS 选项添加
多条语句构成的字符串，发送给服务器，然后依次检索各个结果集。
7.7一次执行多条语句
包含在 sampdb 发行版里的 exec_stmt_ssl，替你执行这条语句，并报告结果。）
272
在7.4.3节，我们编写了一个process_statement（）函数，它可以执行一条语句，并检索
在使用这些函数时，可以把结果检索代码放在某个循环里。在使用常规代码检索出一个结
在处理多个结果集时，可以使用下面这两个函数，对结果检索的当前状态进行基本的检查。
哪一种办法更好呢？如果程序没有使用存储过程，那么这两种办法都适用。如果程序使月
一次执行多条语句的功能，默认是禁用的，因此当你想要使用它时，必须明确地告诉服务
MySQL客户端开发库支持一次执行多条语句的功能。这样，你便可以把一个由分号隔开的
process_multi_statement (MYsQL *conn, char *stmt_str)
第二种是，用mysql_set_server_option（)来为现有连接启用这项功能。例如：
opt_flags I= CLIENT_MULTI_STATEMENTS;
如果 Ssl_cipher的值非空，则说明正在使用某种加密算法。（要想更简单点儿，可以使用
int
int.
MYSQL_RES *res_set;
void
口
口mysql_more_results（）。如果还有更多的结果，则返回非零值；否则，返回0。
print_error (conn,
if (mysql_query (conn, stmt_str）!= 0)
错误，则返回一个大于零的值。
果集的检索工作。如果还有更多的结果，则状态值为0；如果没有，则返回－1；如果发生了
mysql_next_result（）。如果还有更多的结果，则返回一个状态值，同时初始化下一个结
exit（1）;
mysql_close (conn）;
print_error (conn,