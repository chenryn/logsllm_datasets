ApplicationLogicVulnerabilities 152
Takeaways
Javascript source code provides you with actual source code from a target you
can explore. This is great because your testing goes from blackbox, having no
idea what the back end is doing, to whitebox (though not entirely) where you
have insight into how code is being executed. This doesn’t mean you have to
walkthrougheveryline,thePOSTcallinthiscasewasfoundonline20570with
asimplesearchforPOST.
8. Accessing PornHub’s Memcache Installation
Difficulty: Medium
Url: stage.pornhub.com
Report Link: https://hackerone.com/reports/11987111
Date Reported: March 1, 2016
Bounty Paid: $2500
Description:
Prior to their public launch, PornHub ran a private bug bounty program on HackerOne
with a broad bounty scope of *.pornhub.com which, to most hackers means all sub
domains of PornHub are fair game. The trick is now finding them.
In his blog post, Andy Gill @ZephrFish12 explains why this is awesome, by testing the
existing of various sub domain names using a list of over 1 million potential names, he
discovered approximately 90 possible hacking targets.
Now, visiting all of these sites to see what’s available would take a lot of time so he
automated the process using the tool Eyewitness (included in the Tools chapter) which
takes screenshots from the URLs with valid HTTP / HTTPS pages and provides a nice
report of the sites listening on ports 80, 443, 8080 and 8443 (common HTTP and HTTPS
ports).
According to his write up, Andy slightly switched gears here and used the tool Nmap
to dig deeper in to the sub domain stage.pornhub.com. When I asked him why, he
explained, in his experience, staging and development servers are more likely to have
misconfigured security permissions than production servers. So, to start, he got the IP
of the sub domain using the command nslookup:
nslookup stage.pornhub.com
Server: 8.8.8.8
11https://hackerone.com/reports/119871
12http://www.twitter.com/ZephrFish
ApplicationLogicVulnerabilities 153
Address: 8.8.8.8#53
Non-authoritative answer:
Name: stage.pornhub.com
Address: 31.192.117.70
I’ve also seen this done with the command, ping, but either way, he now had the IP
address of the sub domain and using the command sudo nmap -sSV -p- 31.192.117.70
-oA stage__ph -T4 & he got:
Starting Nmap 6.47 ( http://nmap.org ) at 2016-06-07 14:09 CEST
Nmap scan report for 31.192.117.70
Host is up (0.017s latency).
Not shown: 65532 closed ports
PORT STATE SERVICE VERSION
80/tcp open http nginx
443/tcp open http nginx
60893/tcp open memcache
Servicedetectionperformed.Pleasereportanyincorrectresultsathttp://nmap.org/submit/
. Nmap done: 1 IP address (1 host up) scanned in 22.73 seconds
Breaking the command down:
• the flag -sSV defines the type of packet to send to the server and tells Nmap to try
and determine any service on open ports
• the -p- tells Nmap to check all 65,535 ports (by default it will only check the most
popular 1,000)
• 31.192.117.70 is the IP address to scan
• -oA stage__ph tells Nmap to output the findings in its three major formats at once
using the filename stage__ph
• -T4 defines the timing for the task (options are 0-5 and higher is faster)
With regards to the result, the key thing to notice is port 60893 being open and running
what Nmap believes to be memcache. For those unfamiliar, memcache is a caching
servicewhichuseskey-valuepairstostorearbitrarydata.It’stypicallyusedtohelpspeed
up a website by service content faster. A similar service is Redis.
Finding this isn’t a vulnerability in and of itself but it is a definite redflag (though
installation guides I’ve read recommend making it inaccessible publicly as one security
ApplicationLogicVulnerabilities 154
precaution). Testing it out, surprising PornHub didn’t enable any security meaning Andy
couldconnecttotheservicewithoutausernameorpasswordvianetcat,autilityprogram
used to read and write via a TCP or UDP network connection. After connecting, he just
rancommandstogettheversion,stats,etc.toconfirmtheconnectionandvulnerability.
However, a malicious attacker could have used this access to:
• Cause a denial of service (DOS) by constantly writing to and erasing the cache
thereby keeping the server busy (this depends on the site setup)
• Cause a DOS by filling the service with junk cached data, again, depending on the
service setup
• Executecross-sitescriptingbyinjectingamaliciousJSpayloadasvalidcacheddata
to be served to users
• Andpossibly,executeaSQLinjectionifthememcachedatawasbeingstoredinthe
database
Takeaways
Subdomainsandbroadernetworkconfigurationsrepresentgreatpotentialfor
hacking.Ifyounoticethataprogramisincluding*.SITE.cominit’sscope,tryto
findsubdomainsthatmaybevulnerableratherthangoingafterthelowhanging
fruitonthemainsitewhicheveryonemaybesearchingfor.It’salsoworthyour
timetofamiliarizeyourselfwithtoolslikeNmap,eyewitness,knockpy,etc.which
willhelpyoufollowinAndy’sshoes.
9. Bypassing Twitter Account Protections
Difficulty: Easy
Url: twitter.com
Report Link: N/A
Date Reported: Bounty awarded October 2016
Bounty Paid: $560
Description:
In chatting with Aaron Ullger, he shared the following Twitter vulnerability with me so I
couldincludeitandshareithere.Whilethereportisn’tdisclosed(atthetimeofwriting),
Twitterdidgivehimpermissiontosharethedetailsandthere’stwointerestingtakeaways
from his finding.
In testing the account security features of Twitter, Aaron noticed that when you at-
tempted to log in to Twitter from an unrecognized IP address / browser for the first
ApplicationLogicVulnerabilities 155
time, Twitter may ask you for some account validation information such as an email or
phonenumberassociatedwiththeaccount.Thus,ifanattackerwasabletocompromise
yourusernameandpassword,theywouldpotentiallybestoppedfromloggingintoand
taking over your account based on this additional required information.
However, undeterred, after Aaron created a brand new account, used a VPN and tested
thefunctionalityonhislaptopbrowser,hethenthoughttousehisphone,connecttothe
same VPN and log into the account. Turns out, this time, he was not prompted to enter
additional information - he had direct access to the “victim’s” account. Additionally, he
could navigate to the account settings and view the user’s email address and phone
number, thereby allowing him desktop access (if it mattered).
In response, Twitter validated and fixed the issue, awarding Aaron $560.
Takeaways
Iincludedthisexamplebecauseitdemonstratestwothings-first,whileitdoes
reducetheimpactofthevulnerability,therearetimesthatreportingabugwhich
assumes an attacker knows a victim’s user name and password is acceptable
providedyoucanexplainwhatthevulnerabilityisanddemonstrateit’sseverity.
Secondly,whentestingforapplicationlogicrelatedvulnerabilities,considerthe
different ways an application could be accessed and whether security related
behaviours are consistent across platforms. In this case, it was browsers and
mobileapplicationsbutitalsocouldincludethirdpartyappsorAPIendpoints.
Summary
Application logic based vulnerabilities don’t necessarily always involve code. Instead,
exploitingtheseoftenrequiresakeeneyeandmorethinkingoutsideofthebox.Always
be on the lookout for other tools and services a site may be using as those represent a
newattackvector.ThiscanincludeaJavascriptlibrarythesiteisusingtorendercontent.
More often than not, finding these will require a proxy interceptor which will allow you
to play with values before sending them to the site you are exploring. Try changing
any values which appear related to identifying your account. This might include setting
up two different accounts so you have two sets of valid credentials that you know will
work. Also look for hidden / uncommon endpoints which could expose unintentionally
accessible functionality.
Also, be sure to consider consistency across the multiple ways the service can be ac-
cessed,suchasviathedesktop,thirdpartyapps,mobileapplicationsorAPIs.Protections
offered via one method may not be consistently applied across all others, thereby
creating a security issue.
ApplicationLogicVulnerabilities 156
Lastly,beonthelookoutfornewfunctionality-itoftenrepresentsnewareasfortesting!
And if/when possible, automate your testing to make better use of your time.
21. Getting Started
This chapter has been the most difficult to write, largely because of the variety of bug
bountyprogramsthatexistandcontinuetobemadeavailable.Tome,thereisnosimple
formula for hacking but there are patterns. In this chapter, I’ve tried to articulate how I
approach a new site, including the tools that I use (all of which are included in the Tools
chapter) and what I’ve learned of others. This is all based on my experience hacking,
interviewingsuccessfulhackers,readingblogsandwatchingpresentationsfromDefCon,
BSides, and other security conferences.
Butbeforewebegin,Ireceivealotofemailsaskingmeforhelpandguidanceonhowto
getstarted.Iusuallyrespondtothosewitharecommendationthat,ifyou’rejuststarting
out, choose a target which you’re likely to have more success on. In other words, don’t
target Uber, Shopify, Twitter, etc. That isn’t to say you won’t be successful, but those
programshaveverysmartandaccomplishedhackerstestingthemdailyandIthinkit’llbe
easiertogetdiscouragedifthat’swhereyouspendyourtimewhenyou’rejustbeginning.
I know because I’ve been there. Instead, I suggest starting out with a program that has
a broad scope and doesn’t pay bounties. These programs often attract less attention
becausetheydon’thavefinancialincentives.Now,Iknowitwon’tbeasrewardingwhen
a bug is resolved without a payment but having a couple of these under your belt will
helpmotivateyoutokeephackingandasyouimprove,you’llbeinvitedtoparticipatein
private programs which is where you can make some good money.
With that out of the way, let’s get started.
Information Gathering
As you know from the examples detailed previously, there’s more to hacking that just
openingawebsite,enteringapayloadandtakingoveraserver.Therearealotofthings
to consider when you’re targeting a new site, including:
• What’s the scope of the program? All sub domains of a site or specific URLs? For
example, *.twitter.com, or just www.twitter.com?
• How many IP addresses does the company own? How many servers is it running?
• What type of site is it? Software as a Service? Open source? Collaborative? Paid vs
Free?
• What technologies are they using? Python, Ruby, PHP, Java? MSQL? MySQL, Post-
gres, Microsoft SQL? Wordpress, Drupal, Rails, Django?
GettingStarted 158
These are only some of the considerations that help define where you are going to look
and how you’re going to approach the site. Familiarizing yourself with the program is a
first step. To begin, if the program is including all sub domains but hasn’t listed them,
you’regoingtoneedtodiscoverthem.Asdetailedinthetoolssection,KnockPyisagreat
tooltouseforthis.IrecommendcloningDanielMiessler’sSecListsGitHubrepositoryand
usingthesubdomainslistinthe/Discover/DNSfolder.Thespecificcommandwouldbe:
knockpydomain.com-w/PATH_TO_SECLISTS/Discover/DNS/subdomains-top1mil-110000.t\
xt
This will kick off the scan and save a csv file with the results. I recommend starting that
andletting itrun in thebackground. Next, I recommendusing Jason Haddix’s(Technical
Director of Bugcrowd and Hacking ProTips #5 interviewee) enumall script, available on
GitHubunderhisDomainrepo.ThisrequiresRecon-ngtobeinstalledandconfiguredbut
he has setup instructions in his readme file. Using his script, we’ll actually be scrapping
Google, Bing, Baidu, etc. for sub domain names. Again, let this run in the background
and it’ll create a file with results.
Usingthesetwotoolsshouldgiveusagoodsetofsubdomainstotest.However,if,after
they’re finished, you still want to exhaust all options, IPV4info.com is a great website
whichlistsIPaddressesregisteredtoasiteandassociatedsubdomainsfoundonthose
addresses. While it would be best to automate scrapping this, I typically will browse
this manually and look for interesting addresses as a last step during my information
gathering.
Whilethesubdomainenumerationishappeninginthebackground,nextItypicallystart
working on the main site of the bug bounty program, for example, www.drchrono.com.
Previously,IwouldjustjumpintousingBurpSuiteandexploringthesite.But,basedon
Patrik Fehrenbach’s advice and awesome write ups, I now start the ZAP proxy, visit the
siteandthendoaForcedBrowsetodiscoverdirectoriesandfiles.Again,Iletthisrunin
thebackground.Asanaside,I’musingZAPbecauseatthetimeofwriting,Idon’thavea
paid version of Burp Suite but you could just as easily use that.
Having all that running, it’s now that I actually start exploring the main site and
familiarizing myself with it. To do so, ensure you havethe Wappalyzer plug installed (it’s
available for FireFox, which I use, and Chrome). This allows us to immediately see what
technologiesasiteisusingintheaddressbar.Next,IstartBurpSuiteanduseittoproxy
allmytraffic.IfyouareusingthepaidversionofBurp,it’sbesttostartanewprojectfor
the bounty program you’ll be working on.
Atthisstage,ItendtoleavethedefaultsofBurpSuiteasisandbeginwalkingthroughthe
site. In other words, I leave the scope completely untouched so all traffic is proxied and
included in the resulting history and site maps. This ensures that I don’t miss any HTTP
calls made while interacting with the site. During this process, I’m really just exploring
while keeping my eyes out for opportunities, including:
GettingStarted 159
The Technology Stack
What is the site developed with, what is Wappalyzer telling me? For example, is the site
usingaFrameworklikeRailsorDjango?KnowingthishelpsmedeterminehowI’llbetest-
ing and how the site works. For example, when working on a Rails site, CSRF tokens are
usuallyembeddedinHTMLheadertags(atleastfornewerversionsofRails).Thisishelp-
fulfortestingCSRFacrossaccounts.RailsalsousesadesignpatternforURLswhichtypi-
callycorrespondsto/CONTENT_TYPE/RECORD_IDatthemostbasic.UsingHackerOneas
an example, if you look at reports, their URLs are www.hackerone.com/reports/12345.
Knowingthis,wecantrytopassrecordIDsweshouldn’thaveaccessto.There’salsothe
possibility that developers may have inadvertently left json paths available disclosing
information, like www.hackerone.com/reports/12345.json.
I also look to see if the site is using a front end JavaScript library which interacts with a
backendAPI.Forexample,doesthesiteuseAngularJS?Ifso,IknowtolookforAngular
Injection vulnerabilities and include the payload {{4*4}}[[5*5]] when submitting fields (I
usebothbecauseAngularcanuseeitheranduntilIconfirmwhichtheyuse,Idon’twant
to miss opportunities). The reason why an API returning JSON or XML to a template is
great is because sometimes those API calls unintentionally return sensitive information
which isn’t actually rendered on the page. Seeing those calls can lead to information
disclosure vulnerabilities as mentioned regarding Rails.
Lastly,andwhilethisbleedsintothenextsection,Ialsochecktheproxytoseethingslike
wherefilesarebeingservedfrom,suchasAmazonS3,JavaScriptfileshostedelsewhere,
calls to third party services, etc.
Functionality Mapping
There’sreallynosciencetothisstageofmyhackingbuthere,I’mjusttryingtounderstand
how the site works. For example:
• I set up accounts and note what the verification emails and URLs look like, being
on the lookout for ways to reuse them or substitute other accounts.
• I note whether OAuth is being used with other services.
• Istwofactorauthenticationavailable,howisitimplemented-withanauthenticator
app or does the site handle sending SMS codes?
• Does the site offer multiple users per account, is there a complex permissions
model?
• Is there any inter-user messaging allowed?
• Are any sensitive documents stored or allowed to be uploaded?
• Are any type of profile pictures allowed?
• Does the site allow users to enter HTML, are WYSIWYG editors used?
GettingStarted 160
These are just a few examples. During this process, I’m really just trying to understand
howtheplatformworks andwhatfunctionalityis availabletobe abused.Itryto picture
myself as the developer and imagine what could have been implemented incorrectly or
whatassumptionscouldhavebeenmade,preppingforactualtesting.Itrymybestnotto
starthackingrightawayhereasit’sreallyeasytogetdistractedorcaughtuptryingtofind
XSS, CSRF, etc. vulnerabilities submitting malicious payloads everywhere. Instead, I try
to focus on understanding and finding areas that may provide higher rewards and may