always succeeds.
.sh versions
this call is present since linux 2.5.48.
details as given here are valid since linux 2.5.49.
.sh conforming to
this system call is linux-specific.
.sh see also
.br clone (2),
.br futex (2),
.br gettid (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getcwd.3
.\" because getcwd(3) is layered on a system call of the same name
.so man3/xdr.3
.so man3/posix_memalign.3
.so man3/key_setsecret.3
.so man3/rpc.3
.so man3/getservent_r.3
.\" copyright (c) michael haardt (PI:EMAIL),
.\"     sun jan 15 19:16:33 1995
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified, sun feb 26 15:02:58 1995, PI:EMAIL
.th lp 4 2021-03-22 "linux" "linux programmer's manual"
.sh name
lp \- line printer devices
.sh synopsis
.nf
.b #include 
.fi
.sh configuration
\fblp\fp[0\(en2] are character devices for the parallel line printers;
they have major number 6 and minor number 0\(en2.
the minor numbers
correspond to the printer port base addresses 0x03bc, 0x0378, and 0x0278.
usually they have mode 220 and are owned by user
.i root
and group
.ir lp .
you can use printer ports either with polling or with interrupts.
interrupts are recommended when high traffic is expected, for example,
for laser printers.
for typical dot matrix printers, polling will usually be enough.
the default is polling.
.sh description
the following
.br ioctl (2)
calls are supported:
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lptime, int \fp\fiarg\fp\fb)\fp"
sets the amount of time that the driver sleeps before rechecking the printer
when the printer's buffer appears to be filled to
.ir arg .
if you have a fast printer, decrease this number;
if you have a slow printer, then increase it.
this is in hundredths of a second, the default 2
being 0.02 seconds.
it influences only the polling driver.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpchar, int \fp\fiarg\fp\fb)\fp"
sets the maximum number of busy-wait iterations which the polling driver does
while waiting for the printer to get ready for receiving a character to
.ir arg .
if printing is too slow, increase this number; if the
system gets too slow, decrease this number.
the default is 1000.
it influences only the polling driver.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpabort, int \fp\fiarg\fp\fb)\fp"
if
.i arg
is 0, the printer driver will retry on errors, otherwise
it will abort.
the default is 0.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpabortopen, int \fp\fiarg\fp\fb)\fp"
if
.i arg
is 0,
.br open (2)
will be aborted on error, otherwise error will be ignored.
the default is to ignore it.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpcareful, int \fp\fiarg\fp\fb)\fp"
if
.i arg
is 0, then the out-of-paper, offline, and error signals are
required to be false on all writes, otherwise they are ignored.
the default is to ignore them.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpwait, int \fp\fiarg\fp\fb)\fp"
sets the number of busy waiting iterations to wait before strobing the
printer to accept a just-written character, and the number of iterations to
wait before turning the strobe off again,
to
.ir arg .
the specification says this time should be 0.5
microseconds, but experience has shown the delay caused by the code is
already enough.
for that reason, the default value is 0.
.\" fixme . actually, since linux 2.2, the default is 1
this is used for both the polling and the interrupt driver.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpsetirq, int \fp\fiarg\fp\fb)\fp"
this
.br ioctl (2)
requires superuser privileges.
it takes an
.i int
containing the new irq as argument.
as a side effect, the printer will be reset.
when
.i arg
is 0, the polling driver will be used, which is also default.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpgetirq, int *\fp\fiarg\fp\fb)\fp"
stores the currently used irq in
.ir arg .
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpgetstatus, int *\fp\fiarg\fp\fb)\fp"
stores the value of the status port in
.ir arg .
the bits have the following meaning:
.ts
l l.
lp_pbusy	inverted busy input, active high
lp_pack	unchanged acknowledge input, active low
lp_poutpa	unchanged out-of-paper input, active high
lp_pselecd	unchanged selected input, active high
lp_perrorp	unchanged error input, active low
.te
.ip
refer to your printer manual for the meaning of the signals.
note that undocumented bits may also be set, depending on your printer.
.ip "\fbint ioctl(int \fp\fifd\fp\fb, lpreset)\fp"
resets the printer.
no argument is used.
.sh files
.i /dev/lp*
.\" .sh authors
.\" the printer driver was originally written by jim weigand and linus
.\" torvalds.
.\" it was further improved by michael k.\& johnson.
.\" the interrupt code was written by nigel gamble.
.\" alan cox modularized it.
.\" lpcareful, lpabort, lpgetstatus were added by chris metcalf.
.sh see also
.br chmod (1),
.br chown (1),
.br mknod (1),
.br lpcntl (8),
.br tunelp (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sun jul 25 10:41:34 1993 by rik faith (PI:EMAIL)
.\" modified wed oct 17 01:12:26 2001 by john levon 
.th strdup 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
strdup, strndup, strdupa, strndupa \- duplicate a string
.sh synopsis
.nf
.b #include 
.pp
.bi "char *strdup(const char *" s );
.pp
.bi "char *strndup(const char *" s ", size_t " n );
.bi "char *strdupa(const char *" s );
.bi "char *strndupa(const char *" s ", size_t " n );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br strdup ():
.nf
    _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
        || /* since glibc 2.12: */ _posix_c_source >= 200809l
        || /* glibc = 200809l
    before glibc 2.10:
        _gnu_source
.fi
.pp
.br strdupa (),
.br strndupa ():
.nf
    _gnu_source
.fi
.sh description
the
.br strdup ()
function returns a pointer to a new string which
is a duplicate of the string
.ir s .
memory for the new string is
obtained with
.br malloc (3),
and can be freed with
.br free (3).
.pp
the
.br strndup ()
function is similar, but copies at most
.i n
bytes.
if
.i s
is longer than
.ir n ,
only
.i n
bytes are copied, and a terminating null byte (\(aq\e0\(aq) is added.
.pp
.br strdupa ()
and
.br strndupa ()
are similar, but use
.br alloca (3)
to allocate the buffer.
they are available only when using the gnu
gcc suite, and suffer from the same limitations described in
.br alloca (3).
.sh return value
on success, the
.br strdup ()
function returns a pointer to the duplicated
string.
it returns null if insufficient memory was available, with
.i errno
set to indicate the error.
.sh errors
.tp
.b enomem
insufficient memory available to allocate duplicate string.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br strdup (),
.br strndup (),
.br strdupa (),
.br strndupa ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
.\" 4.3bsd-reno, not (first) 4.3bsd.
.br strdup ()
conforms to svr4, 4.3bsd, posix.1-2001.
.br strndup ()
conforms to posix.1-2008.
.br strdupa ()
and
.br strndupa ()
are gnu extensions.
.sh see also
.br alloca (3),
.br calloc (3),
.br free (3),
.br malloc (3),
.br realloc (3),
.br string (3),
.br wcsdup (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/vm86.2
.so man2/pciconfig_read.2
.so man3/hsearch.3
.\" copyright (c) 2014 kees cook 
.\" and copyright (c) 2012 will drewry 
.\" and copyright (c) 2008, 2014,2017 michael kerrisk 
.\" and copyright (c) 2017 tyler hicks 
.\" and copyright (c) 2020 tycho andersen 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th seccomp 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
seccomp \- operate on secure computing state of the process
.sh synopsis
.nf
.br "#include " "  /* definition of " seccomp_* " constants */"
.br "#include " "   /* definition of " "struct sock_fprog" " */"
.br "#include " "    /* definition of " audit_* " constants */"
.br "#include " "   /* definition of " sig* " constants */"
.br "#include " "     /* definition of " ptrace_* " constants */"
.\" kees cook noted: anything that uses seccomp_ret_trace returns will
.\"                  need 
.br "#include " "    /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "int syscall(sys_seccomp, unsigned int " operation ", unsigned int " flags ,
.bi "            void *" args );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br seccomp (),
necessitating the use of
.br syscall (2).
.sh description
the
.br seccomp ()
system call operates on the secure computing (seccomp) state of the
calling process.
.pp
currently, linux supports the following
.ir operation
values:
.tp
.br seccomp_set_mode_strict
the only system calls that the calling thread is permitted to make are
.br read (2),
.br write (2),
.br _exit (2)
(but not
.br exit_group (2)),
and
.br sigreturn (2).
other system calls result in the termination of the calling thread,
or termination of the entire process with the
.br sigkill
signal when there is only one thread.
strict secure computing mode is useful for number-crunching
applications that may need to execute untrusted byte code, perhaps
obtained by reading from a pipe or socket.
.ip
note that although the calling thread can no longer call
.br sigprocmask (2),
it can use
.br sigreturn (2)
to block all signals apart from
.br sigkill
and
.br sigstop .
this means that
.br alarm (2)
(for example) is not sufficient for restricting the process's execution time.
instead, to reliably terminate the process,
.br sigkill
must be used.
this can be done by using
.br timer_create (2)
with
.br sigev_signal
and
.ir sigev_signo
set to
.br sigkill ,
or by using
.br setrlimit (2)
to set the hard limit for
.br rlimit_cpu .
.ip
this operation is available only if the kernel is configured with
.br config_seccomp
enabled.
.ip
the value of
.ir flags
must be 0, and
.ir args
must be null.
.ip
this operation is functionally identical to the call:
.ip
.in +4n
.ex
prctl(pr_set_seccomp, seccomp_mode_strict);
.ee
.in
.tp
.br seccomp_set_mode_filter
the system calls allowed are defined by a pointer to a berkeley packet
filter (bpf) passed via
.ir args .
this argument is a pointer to a
.ir "struct\ sock_fprog" ;
it can be designed to filter arbitrary system calls and system call
arguments.
if the filter is invalid,
.br seccomp ()
fails, returning
.br einval
in
.ir errno .
.ip
if
.br fork (2)
or
.br clone (2)
is allowed by the filter, any child processes will be constrained to
the same system call filters as the parent.
if
.br execve (2)
is allowed,
the existing filters will be preserved across a call to
.br execve (2).
.ip
in order to use the
.br seccomp_set_mode_filter
operation, either the calling thread must have the
.br cap_sys_admin
capability in its user namespace, or the thread must already have the
.i no_new_privs
bit set.
if that bit was not already set by an ancestor of this thread,
the thread must make the following call:
.ip
.in +4n
.ex
prctl(pr_set_no_new_privs, 1);
.ee
.in
.ip
otherwise, the
.br seccomp_set_mode_filter
operation fails and returns
.br eacces
in
.ir errno .
this requirement ensures that an unprivileged process cannot apply
a malicious filter and then invoke a set-user-id or
other privileged program using
.br execve (2),
thus potentially compromising that program.
(such a malicious filter might, for example, cause an attempt to use
.br setuid (2)
to set the caller's user ids to nonzero values to instead
return 0 without actually making the system call.
thus, the program might be tricked into retaining superuser privileges
in circumstances where it is possible to influence it to do
dangerous things because it did not actually drop privileges.)
.ip
if
.br prctl (2)
or
.br seccomp ()
is allowed by the attached filter, further filters may be added.
this will increase evaluation time, but allows for further reduction of
the attack surface during execution of a thread.
.ip
the
.br seccomp_set_mode_filter
operation is available only if the kernel is configured with