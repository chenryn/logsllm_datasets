### Always Succeeds

#### Versions
This call has been present since Linux 2.5.48. The details provided here are valid from Linux 2.5.49 onwards.

#### Conformance
This system call is specific to Linux.

#### See Also
- `clone(2)`
- `futex(2)`
- `gettid(2)`

#### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).

### Line Printer Devices (lp)

#### Synopsis
```c
#include <sys/ioctl.h>
```

#### Configuration
The devices `/dev/lp[0-2]` are character devices for parallel line printers. They have a major number of 6 and minor numbers 0-2, corresponding to printer port base addresses 0x03bc, 0x0378, and 0x0278. Typically, these devices have mode 220 and are owned by the user `root` and the group `lp`.

You can use printer ports with either polling or interrupts. Interrupts are recommended for high-traffic scenarios, such as with laser printers. For typical dot matrix printers, polling is usually sufficient. The default mode is polling.

#### Description
The following `ioctl(2)` calls are supported:

- **lptime**
  ```c
  int ioctl(int fd, lptime, int arg);
  ```
  Sets the amount of time the driver sleeps before rechecking the printer when the printer's buffer appears to be full. The value is in hundredths of a second. The default is 2 (0.02 seconds). This setting only affects the polling driver.

- **lpchar**
  ```c
  int ioctl(int fd, lpchar, int arg);
  ```
  Sets the maximum number of busy-wait iterations the polling driver performs while waiting for the printer to be ready to receive a character. The default is 1000. This setting only affects the polling driver.

- **lpabort**
  ```c
  int ioctl(int fd, lpabort, int arg);
  ```
  If `arg` is 0, the printer driver will retry on errors; otherwise, it will abort. The default is 0.

- **lpabortopen**
  ```c
  int ioctl(int fd, lpabortopen, int arg);
  ```
  If `arg` is 0, `open(2)` will be aborted on error; otherwise, the error will be ignored. The default is to ignore the error.

- **lpcareful**
  ```c
  int ioctl(int fd, lpcareful, int arg);
  ```
  If `arg` is 0, the out-of-paper, offline, and error signals must be false on all writes; otherwise, they are ignored. The default is to ignore them.

- **lpwait**
  ```c
  int ioctl(int fd, lpwait, int arg);
  ```
  Sets the number of busy-wait iterations to wait before strobing the printer to accept a just-written character and the number of iterations to wait before turning the strobe off again. The default value is 0. This setting affects both the polling and interrupt drivers.

- **lpsetirq**
  ```c
  int ioctl(int fd, lpsetirq, int arg);
  ```
  Requires superuser privileges. It takes an integer containing the new IRQ as an argument. As a side effect, the printer will be reset. If `arg` is 0, the polling driver will be used, which is also the default.

- **lpgetirq**
  ```c
  int ioctl(int fd, lpgetirq, int *arg);
  ```
  Stores the currently used IRQ in `arg`.

- **lpgetstatus**
  ```c
  int ioctl(int fd, lpgetstatus, int *arg);
  ```
  Stores the value of the status port in `arg`. The bits have the following meanings:
  - `lp_pbusy`: Inverted busy input, active high
  - `lp_pack`: Unchanged acknowledge input, active low
  - `lp_poutpa`: Unchanged out-of-paper input, active high
  - `lp_pselecd`: Unchanged selected input, active high
  - `lp_perrorp`: Unchanged error input, active low

  Refer to your printer manual for the meaning of the signals. Note that undocumented bits may also be set, depending on your printer.

- **lpreset**
  ```c
  int ioctl(int fd, lpreset);
  ```
  Resets the printer. No argument is used.

#### Files
- `/dev/lp*`

#### Authors
- The printer driver was originally written by Jim Weigand and Linus Torvalds.
- It was further improved by Michael K. Johnson.
- The interrupt code was written by Nigel Gamble.
- Alan Cox modularized it.
- Chris Metcalf added `lpcareful`, `lpabort`, and `lpgetstatus`.

#### See Also
- `chmod(1)`
- `chown(1)`
- `mknod(1)`
- `lpcntl(8)`
- `tunelp(8)`

#### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).

### Duplicate a String (strdup, strndup, strdupa, strndupa)

#### Synopsis
```c
#include <string.h>

char *strdup(const char *s);
char *strndup(const char *s, size_t n);
char *strdupa(const char *s);
char *strndupa(const char *s, size_t n);
```

#### Feature Test Macro Requirements for glibc
- `strdup()`
  - `_XOPEN_SOURCE >= 500`
  - `_POSIX_C_SOURCE >= 200809L`
  - Before glibc 2.10: `_GNU_SOURCE`

- `strdupa()` and `strndupa()`
  - `_GNU_SOURCE`

#### Description
- **strdup()**
  Returns a pointer to a new string that is a duplicate of the string `s`. Memory for the new string is obtained with `malloc(3)` and can be freed with `free(3)`.

- **strndup()**
  Similar to `strdup()`, but copies at most `n` bytes. If `s` is longer than `n`, only `n` bytes are copied, and a terminating null byte (`'\0'`) is added.

- **strdupa()** and **strndupa()**
  Similar to `strdup()` and `strndup()`, but use `alloca(3)` to allocate the buffer. These functions are available only when using the GNU GCC suite and suffer from the same limitations described in `alloca(3)`.

#### Return Value
On success, the function returns a pointer to the duplicated string. It returns `NULL` if insufficient memory was available, with `errno` set to indicate the error.

#### Errors
- **ENOMEM**: Insufficient memory available to allocate the duplicate string.

#### Attributes
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface        | Attribute   | Value  |
|------------------|-------------|--------|
| `strdup()`       | Thread Safety | MT-Safe |
| `strndup()`      | Thread Safety | MT-Safe |
| `strdupa()`      | Thread Safety | MT-Safe |
| `strndupa()`     | Thread Safety | MT-Safe |

#### Conforming To
- `strdup()`: SVR4, 4.3BSD, POSIX.1-2001
- `strndup()`: POSIX.1-2008
- `strdupa()` and `strndupa()`: GNU extensions

#### See Also
- `alloca(3)`
- `calloc(3)`
- `free(3)`
- `malloc(3)`
- `realloc(3)`
- `string(3)`
- `wcsdup(3)`

#### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).

### Secure Computing (seccomp)

#### Synopsis
```c
#include <linux/seccomp.h>  /* definition of seccomp_* constants */
#include <linux/filter.h>   /* definition of struct sock_fprog */
#include <linux/audit.h>    /* definition of audit_* constants */
#include <signal.h>         /* definition of sig* constants */
#include <sys/ptrace.h>     /* definition of ptrace_* constants */
#include <linux/syscalls.h> /* definition of sys_* constants */
#include <unistd.h>

int syscall(SYS_seccomp, unsigned int operation, unsigned int flags, void *args);
```

#### Note
Glibc provides no wrapper for `seccomp()`, necessitating the use of `syscall(2)`.

#### Description
The `seccomp()` system call operates on the secure computing (seccomp) state of the calling process.

Currently, Linux supports the following `operation` values:

- **SECCOMP_SET_MODE_STRICT**
  The only system calls that the calling thread is permitted to make are `read(2)`, `write(2)`, `_exit(2)` (but not `exit_group(2)`), and `sigreturn(2)`. Other system calls result in the termination of the calling thread or the entire process with the `SIGKILL` signal when there is only one thread.

  Strict secure computing mode is useful for number-crunching applications that may need to execute untrusted byte code, perhaps obtained by reading from a pipe or socket.

  Note that although the calling thread can no longer call `sigprocmask(2)`, it can use `sigreturn(2)` to block all signals apart from `SIGKILL` and `SIGSTOP`. This means that `alarm(2)` is not sufficient for restricting the process's execution time. Instead, to reliably terminate the process, `SIGKILL` must be used. This can be done by using `timer_create(2)` with `sigev_signal` and `sigev_signo` set to `SIGKILL`, or by using `setrlimit(2)` to set the hard limit for `RLIMIT_CPU`.

  This operation is available only if the kernel is configured with `CONFIG_SECCOMP` enabled.

  The value of `flags` must be 0, and `args` must be `NULL`.

  This operation is functionally identical to the call:
  ```c
  prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);
  ```

- **SECCOMP_SET_MODE_FILTER**
  The system calls allowed are defined by a pointer to a Berkeley Packet Filter (BPF) passed via `args`. This argument is a pointer to a `struct sock_fprog`; it can be designed to filter arbitrary system calls and system call arguments. If the filter is invalid, `seccomp()` fails, returning `EINVAL` in `errno`.

  If `fork(2)` or `clone(2)` is allowed by the filter, any child processes will be constrained to the same system call filters as the parent. If `execve(2)` is allowed, the existing filters will be preserved across a call to `execve(2)`.

  In order to use the `SECCOMP_SET_MODE_FILTER` operation, either the calling thread must have the `CAP_SYS_ADMIN` capability in its user namespace, or the thread must already have the `NO_NEW_PRIVS` bit set. If that bit was not already set by an ancestor of this thread, the thread must make the following call:
  ```c
  prctl(PR_SET_NO_NEW_PRIVS, 1);
  ```

  Otherwise, the `SECCOMP_SET_MODE_FILTER` operation fails and returns `EACCES` in `errno`. This requirement ensures that an unprivileged process cannot apply a malicious filter and then invoke a set-user-id or other privileged program using `execve(2)`, thus potentially compromising that program.

  If `prctl(2)` or `seccomp()` is allowed by the attached filter, further filters may be added. This will increase evaluation time but allows for further reduction of the attack surface during execution of a thread.

  The `SECCOMP_SET_MODE_FILTER` operation is available only if the kernel is configured with `CONFIG_SECCOMP` and `CONFIG_BPF_SYSCALL` enabled.

#### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).