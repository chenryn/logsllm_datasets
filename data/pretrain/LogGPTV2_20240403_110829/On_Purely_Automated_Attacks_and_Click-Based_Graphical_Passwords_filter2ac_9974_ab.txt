of a segment in the corresponding image, its value is 1; oth-
erwise its value is 0. The distinguishable points map δ is a
binary map that is the logical (inclusive) “or” of the binary
104114
3 Experimental Methodology
We pursue attacks that use click-order patterns and im-
age processing methods for creating more efﬁcient, ordered
attack sub-dictionaries. We describe the speciﬁc click-order
patterns we examine and their speciﬁcation in Section 3.2.
The image processing methods which we used for further
optimization are described in Section 3.1, along with the
window clustering algorithm we use to optimize the dictio-
nary.
3.1 Image Processing Method
We used the Saliency Toolbox [29] implemented in Mat-
lab. The weights of all feature maps used by the toolbox
are set to one, to indicate that orientation, intensity and
colors have the same level of importance. All the other
settings of this toolbox are set to default except normal-
ization type, which can be either Iterative or LocalMax.
Since each of these two normalization types cause differ-
ent spatio-temporal attentional scan-paths, we tested both
in our experiments. For each, we examine two different
styles of generating a dictionary for use in a guessing attack
described below.
For each dictionary guessing style, we generate a map of
candidate click-points using our distinguishable points map
δ as a bitmask to the resulting attracted regions of the image
(i.e., using a logical “and”). We then reﬁne this binary map
of candidate points as follows.
Window Clustering Algorithm. We assume that an at-
tacker’s goal is to guess the largest number of passwords
with the fewest guesses. After creating a set of points for a
guessing dictionary (which might be used in passwords in
any ordering of ﬁve clicks), many of them may be within the
same tolerance region, and thus could be redundant (effec-
tively guessing the same point). We devised a “clustering”
method to normalize a set of points to a single value. The
intuition is that given the system error tolerance, one point
would be accepted as a correct entry for all others within
its tolerance region. A previous clustering algorithm [27]
centers each cluster on one of the original input points.
We introduce an alternative, Window Clustering, based
on setting a window of ﬁxed size (not necessarily the same
size as the tolerance region) over the largest number of
points it can cover. We then replace those candidate points
inside the window with the geometric center of the win-
dow. Thus, the center of the cluster is not necessarily one of
the original input points. Figure 3 shows an example set of
Figure 3. Window Clustering
candidate points with black squares, where each square rep-
resents a pixel. These 7 candidate points are covered with
two 3 × 3 windows and will be represented by the centers
of the two windows illustrated with grey squares.
Window Clustering is a greedy algorithm with a ﬁxed
window size. Starting with all candidate points, it ﬁnds the
next position for the window that covers the maximum num-
ber of remaining points (ties are broken arbitrarily). It then
stores the center of the window to represent the points in
the window, and erases the corresponding points. It con-
tinues this process until no candidate points remain. In our
105115
experiments, the candidate points we use are the points with
value 1 in Sb of Section 3.1.1 and Bi of Section 3.1.2. The
window size is set to 19 × 19 in our experiments.
3.1.1 Guessing Style: Ordered by Scan-Path
The hypothesis here is that users may choose their password
points from separate attracted regions, following the order
of the focus-of-attention scan-path. The ordered dictionary
described in this subsection is designed to test this hypoth-
esis.
Using the visual attention tool, we generate S, a set of
binary maps, where each binary map is generated in a sin-
gle step of the scan-path. S = {A1, A2, ..., An} where Ai
denotes the generated binary map in step i and n is the to-
tal number of steps. Pixels of a binary map Ai have value
1 if they belong to the attracted region of step i, otherwise
0. Sb = {A1 ∧ δ, A2 ∧ δ, ..., An ∧ δ}, and then the win-
dow clustering algorithm is run separately on each element
in Sb to create Sc. Sc contains n sets of candidate points,
each set containing the cluster centers produced from run-
ning the clustering algorithm on the corresponding element
of Sb . To create each entry of the dictionary, we choose all
sets of ﬁve elements of Sc and then order these elements by
increasing index. Finally, we choose one point from each
of these ﬁve elements, while retaining the element order-
ing, to put in the dictionary. Thus each dictionary entry is a
ﬁve-point graphical password, where each point belongs to
an element of Sc, and the ﬁve points (each belonging to a
distinct scan-path element) are ordered by the order of the 5
elements in the scan-path.
3.1.2 Guessing Style: Unordered Incremental
Here the hypothesis is that users may choose their click-
points based on points that fall along the focus-of-attention
scan-path, but not necessarily in the order of the scan-path.
The unordered incremental (UI) dictionary is designed to
test this hypothesis. We call the UI dictionary with Local-
Max normalization V A1, and with Iterative normalization
V A2.
Using the visual attention tool, we generate a set of
binary maps S(cid:3)
, where the ith binary map is generated
from all of the steps until step i in a scan-path: S(cid:3) =
{B1, B2, ..., Bn} where Bi = A1 ∨ A2 ∨ ... ∨ Ai.
In
other words, Bi = Bi−1 ∨ Ai and B1 = A1. Next, we
calculate {C1, C2, ..., Cn} where Ci = Bi ∧ δ, the in-
tersection (logical “and”) of each element Bi with δ, and
run the window clustering algorithm on each Ci to pro-
duce Di, the resulting set of cluster centers (which are
pixel locations on the image). A sub-dictionary Pi is all
5-permutations of the elements of Di, and so the ﬁnal dic-
tionary P = {P1, P2, . . . , Pn} is ordered by the number
of steps in the scan-path that are considered, e.g., all pass-
words from P2 are only guessed after those in P1 are ex-
hausted.
We denote a dictionary using a lazy or super-lazy τ with
superscripts + and ++ respectively.
3.2 Click-order Patterns and Relaxation
4 Experimental Results
We examine two click-order patterns alone (DIAG and
LINE), and with what we call lazy and super-lazy vari-
ations that relax the deﬁnition of the patterns alone. The
two click-order patterns are (1) DIAG and (2) LINE, a
subset of DIAG that we introduce herein. DIAG includes
any sequence of 5 click-points that follow both a consis-
tent vertical and horizontal direction (e.g., straight lines
in any direction, most arcs, and step-patterns). LINE in-
cludes any sequence of 5 click-points that follow either
a vertical or horizontal line. More speciﬁcally, DIAG =
LR T B ∪ LR BT ∪ RL T B ∪ RL BT . Thus DIAG is
the union of four sets of passwords.
In the descriptive
name of each set, the ﬁrst two letters show the horizon-
tal direction and the last two are related to vertical direc-
tion. LR and RL denote left-to-right and right-to-left re-
spectively; T B and BT denote top-to-bottom and bottom-
to-top respectively. Each of the four sets in DIAG consists
of all 5-point passwords whose successive pairs of points
(xi, yi), (xi+1, yi+1) satisfy the speciﬁed constraints. By
convention, the positive y axis extends downward from the
top-left pixel of the image.
LR BT : (xi ≤ xi+1 + τ) ∧ (yi ≥ yi+1 − τ)
RL BT : (xi ≥ xi+1 − τ) ∧ (yi ≥ yi+1 − τ)
LR T B: (xi ≤ xi+1 + τ) ∧ (yi ≤ yi+1 + τ)
RL T B: (xi ≥ xi+1 − τ) ∧ (yi ≤ yi+1 + τ)
Similarly, LINE = LR∪RL∪BT ∪T B, where the four sets
in LINE consist of all passwords whose successive pairs of
points satisfy analogous constraints as follows.
LR: (xi ≤ xi+1 + τ) ∧ (|yi − yi+1| ≤ τ)
RL: (xi ≥ xi+1 − τ) ∧ (|yi − yi+1| ≤ τ)
BT : (yi ≥ yi+1 + τ) ∧ (|xi − xi+1| ≤ τ)
T B: (yi ≤ yi+1 + τ) ∧ (|xi − xi+1| ≤ τ)
For both LINE and DIAG, the allowance τ serves the
purpose of relaxing the pattern, since although the user
might be inclined to select points along a line, the elements
of that line may be inﬂuenced by which click-points the user
otherwise prefers. If the image has many straight-line struc-
tures, it would seem reasonable to expect that users would
choose straighter lines, but in the absence of linear struc-
tures in the image, the lines may be more of an approxi-
mation. To this end, we introduce two variations on both
DIAG and LINE, that relax τ in their above deﬁnitions to
allow “lazier” lines: “lazy”, which uses τ = 19 and “super-
lazy”, which uses τ = 28. In the normal relaxation case,
we use τ = 9 (i.e., equal to the system error tolerance).
To allow meaningful comparison, we tested our methods
by trying to guess users’ graphical passwords, using a pre-
vious PassPoints user study password database which we
summarize below. Sections 4.1 and 4.2 report on the guess-
ing styles of Section 3.1.
Review of User Study. The ﬁeld study used to allow
comparison [27, 5] was 7-weeks or longer (depending on
the user), involving 223 user accounts on a web-based im-
plementation of PassPoints to gain access to course notes,
assignment solutions, and tutorials. We focus on the ﬁeld
study rather than the related lab study for increased conﬁ-
dence that the passwords we are studying have some degree
of long-term memorability. Participants were from three
undergraduate classes: two ﬁrst year courses for computer
science students, and a ﬁrst year course for non-computer
science students enrolled in a science degree. Participants
used one of two background images, pool or cars (see Fig-
ure 4), carefully preselected to be representative of highly
detailed usable images at 451 × 331 pixels.
Figure 4. cars (originally from [3]). See Figure
1 for pool (unmodiﬁed version from [32, 31]).
Passwords had 5 click-points, no two within t = 9 pixels
of another (vertically and horizontally). Consistent with the
previous study, we used only the ﬁnal passwords exercised
by each user (and recalled at least once). These 223 user
accounts mapped to 189 distinct users (34 users were in two
classes; all but one of them were assigned a different image
for each account). Overall, 114 user accounts used pool and
109 used cars as a background image.
106116
4.1 Ordered Scan-Path Results
We tested the hypothesis that users choose click-points
in the order of their focus-of-attention scan-path, using the
method of Section 3.1.1. We found that this method did
not guess any passwords correctly. This indicates that users
do not choose click-points along a partial ordering of the
scan-path elements the model produces (under the default
settings we used).
We see two possible reasons for this result: (1) users
do not choose their click-points entirely based on bottom-
up visual attention; or (2) the model of visual attention as
used does not accurately capture bottom-up visual attention.
Our results in Section 4.2 suggest that bottom-up visual at-
tention, according to this computational model, might be a
partial factor in user choice.
4.2 Incremental LocalMax and Patterns
We tested our hypothesis that users choose click points
based on bottom-up visual attention using V A1, the incre-
mental attack of Section 3.1.2 with LocalMax normaliza-
tion.1 The V A1 attack strategy uses the scan-path to pri-
oritize the dictionary entries; all 5-permutations of points
using only the ﬁrst scan-path element are considered before
all 5-permutations using both the ﬁrst and second elements,
etc. This method is applied in combination with the various
click-order patterns of Section 3.2, combining V A1 with
each of DIAG and LINE click-order patterns at all laziness
modes. The cumulative distribution function (CDF) of our
results (until each dictionary is exhausted) are provided in
Figure 5.
Dictionary
Entries
αDIAG
αDIAG+, αDIAG++
αLIN E
αLIN E+, αLIN E++
233.0
234.7
220.1
227.7
% guessed
pool
cars
21.1% 27.5%
48.2% 54.1%
3.5% 22.0%
23.7% 52.3%
Table 1. Results for click-order heuristics.
window compose the alphabet. Note that the T-region used
in creating α is only dependent upon the system error tol-
erance, and is independent of the τ used in our different re-
laxation modes. Table 1 presents our results. Note that the
values in Table 1 for the dictionaries marked ‘+’ and ‘++’
are the same because the T-regions are non-overlapping, and
the difference between τ = 19 and 28 is not sufﬁcient to in-
crease the number of included T-regions.
Many interesting points emerge from the graphs in Fig-
ure 5 and values in Table 1. The most notable in terms of
success rate is the αDIAG+ dictionary of Table 1, which
guesses 48% of passwords for pool and 54% of passwords
for cars with dictionaries of less than 235 entries. Previous
purely automated attacks [27] against these same images on
the same password database, with a dictionary of 235 en-
tries, guessed 9.1% of passwords on cars and 0.9% of pass-
words on pool. Similarly, αLIN E+ of Table 1 guesses
23.7% of passwords for pool, and 52.3% of passwords for
cars using a dictionary of about 227.7 entries. It is inter-
esting that when using αLIN E+ the percentage of pass-
words guessed for cars only drops by about 2%, while the
accuracy for pool only drops by about 24% (about half as
many passwords are guessed), despite a dictionary size re-
duction of 1
27 times. This implies that αLIN E+ is the most
efﬁcient (in terms of accuracy and dictionary size) click-
order pattern studied to date. It is not surprising that the
LINE variations work better on the cars, given the number
of straight line structures in the image and the orientation of
the cars in the parking lot. It seems more surprising to see
LINE variations working as well as they do for pool.
The V A1 optimization of Figure 5 does appear to cre-
ate a more efﬁcient dictionary: for the DIAG++ variation,
we are able to guess 15.8-16.5% in dictionaries of less than
231.3 entries, and for the LIN E++ variation, 7.9-14.7% of
passwords using a dictionary of less than 224.6 entries. The
relative “efﬁciency” of the dictionaries, however, cannot be
extended in their present form to guess a larger percentage
of passwords, because the full dictionaries are exhausted.
5 Discussion and Future Work
To examine the efﬁcacy of using click-order pattern
heuristics alone (i.e., without additional image processing
methods as in Figure 5), we also used the following alpha-
bet α with click-order patterns DIAG and LINE to generate
dictionaries αDIAG and αLINE. α is a set of points deﬁned
to partition an entire image into T-regions (recall Section
2.2) by placing a grid of 19 × 19 windows (i.e, the same
size as the T-region) over the image. The centers of each
1We also tried our attack using V A2; it did not perform very well,
indicating that the apparently small strategy change (global bias for V A2
vs. local bias for V A1 in the neural network algorithm) can have a large
effect
Our overall results indicate that although essentially no
users choose their click-points in the strict scan-path or-
der of Itti’s model of visual attention, when all permuta-
tions of points in the scan-path are considered, it models
a meaningful percentage (from an attacker viewpoint) of
user passwords. This raises interesting questions regarding
how visual attention relates to user choice in graphical pass-
words. Our results would be consistent with the hypothesis
that bottom-up visual attention is a factor in user choice for
some users (and/or for some images), but not necessarily
for all users.
It would be interesting to further explore whether there
107117
CDFs for VA1-DIAG Attacks (Pool)
CDFs for VA1-LINE Attacks (Pool)
VA1-DIAG    
VA1-DIAG+  
VA1-DIAG++
VA1-LINE    
VA1-LINE+  
VA1-LINE++
 20
 15
 10
 5
d
e
s
s
e
u
G
s
d
r
o
w