for learning responses.
Attack steps. As described in Figure 6, this attack is similar
to N3, but the attacker has different attack goal that it tries
to prevent the victim vehicle V2 from recording unknown
certiﬁcates. Since V1 broadcasts BSMs every 100 ms, V2 will
receive a trigger SPDU again in a few milliseconds. At this
time, V2 still cannot verify the incoming packet. However,
because the request active timer has been initialized in the
last communication round, and the timer is usually set to
250 ms [20], V2 believes that there is still an active learning
request in the ﬂy. Thus, V2 does not add anything into the
queue, which means that it will not attach any learning request
information in the next outgoing SPDU. V2 cannot recover
from this malicious state until the request active timer expires.
Discussion. N4 has the same fundamental reasons as N3. The
only difference is that the request active timer blocks the
victim vehicle from recording unknown certiﬁcates in that
the initial value (i.e., 250 ms) of the timer is around 3 times
larger than the broadcast interval (i.e., 100 ms). Fortunately,
P2PCD allows the user to conﬁgure the parameters for the
3226    30th USENIX Security Symposium
USENIX Association
receiving the malicious packet, the attacker will fail. However,
this is unlikely to happen based on our results.
Figure 7: The success rate of N1-4 under packet loss.
To have a deeper understanding how the network factor will
affect the success rate, we leverage packet loss to demonstrate
the capability of PMC. Figure 7 show that the success rate of
N1 decays much more than the other three attacks, because the
attacker of N1 needs to successfully send at least 4 malicious
packets to ensure success. As N2-4 target the same attack
time window, they have the same success rate. For N1-4, the
attacker should immediately launch the attack once the victim
vehicle enters her communication range. Bai et al. [7] show
that the packet loss rate (PLR) and the distance between two
CV devices are positively correlated in real-world settings. In
a freeway environment, the PLR is around 42% if two CV
devices are 450m apart, in which 450m is the longest commu-
nication distance presented in their study. Thus, we highlight
the success rate when the victim vehicle enters the attacker’s
communication range, which is the worst case for the attacker
(PLR: 42%). Although the packet loss decreases the attack
success rate, it also affects the transmission of normal packets,
leading to the loss of critical CV safety packets.
Besides, CV communication is time-sensitive [2, 3, 25], so
we would like to know the time delay caused by one round
of N1-4, which is deﬁned as the time duration from waiting
for the trigger SPDU to successfully processing an SPDU
from other vehicles. By knowing this, we can infer how long
the CV network will recover from the attack if the attacker
terminates attacking.
Table 4 shows that three of them can at least double the time
delay in packet processing. During the experiments, we notice
that there still exists 280 ms time delay even if we disable the
attacker, which is one-time delay introduced by P2PCD itself.
For N2, the extra time delay introduced by the attacker is
90 ms, around one broadcast interval, because the malicious
learning response cancels out the learning request process
triggered by the SPDU from V1. V2 thus needs to wait for
next SPDU from V1, which takes one more round of broadcast
interval. For N1, N3, and N4, the extra time delay caused by
the attack is about 300 ms. If the attacker stops attacking at
some time, it takes around three broadcast intervals (i.e., 300
ms) for V2 to recover from DoS.
In N1, the extra time delay comes from the long processing
time of P2PCD, due to the long time interval of the response
backoff timer, with a random timeout value between 0 and
250 ms. As shown in Figure 5, the attacker sends malicious
learning responses to V1 right after V1 initializing the response
backoff timer. Since the attack occurs at a very late stage,
all the time before the transmission of the learning request
Figure 6: N3 can stop V2 from sending learning requests to
V1 by sending a malicious learning request.. N4 can stop V2
from recording unknown certiﬁcates by sending one or more
malicious learning requests.
initial value of timers.
Table 3: Quantitative properties used by CVAnalyzer to quan-
tify the security consequences of N1-4
Quantitative properties
ID
ψ1 What is the success rate of the attack?
ψ2 What is the expected time delay of processing next SPDU?
5.1.4 Assessment
We observe that, N1-4 can succeed, only if the attacker deliv-
ers the malicious packets to the victim vehicle exactly within
the attack time window. However, one challenge for the at-
tacker is that she cannot precisely determine the start or end of
the attack time window but can only roughly estimate the time
window. Thus, we are motivated to quantify the probability
of successfully launching the attack by using the probabilistic
model checker in CVAnalyzer.
Table 4: Attack assessment results of N1-4.
ID
N1
N2
N3&4
Attack time
Attack
packet
window
RES-H3 0-250 ms
RES-H8 ≤ 100 ms
LR-H3 ≤ 100 ms
Time delay (ms)
Succ.
Rate
99.47% 580 (280 + 300)
99.99% 370 (280 + 90)
99.99% 570 (280 + 290)
Table 4 summarizes the quantiﬁcation results. Since N3 and
N4 use the same type of packet to attack the victim vehicles,
and the attack time window of them are the same, we merge
these two attacks together and quantify the probability results
based on the type of attack packet.
For N1, the success rate is 99.47%. We set the response
threshold as 3 in our experiments. To successfully launch
one attack, the attacker has at least send 4 malicious learning
responses, while the rest attacks only need to send one ma-
licious packet. This is why the success rate of N1 is slightly
lower than other three attacks. For N2-4, the success rates
are 99.99%. If V2 is able to send the learning request before
USENIX Association
30th USENIX Security Symposium    3227
Learning request:- m.lr == h3(ca1)AttackerVehicle 2q.add(h8(ca1))Vehicle 1Trigger SPDU:- Signer: ee1- (Issuer: ca1)If m.lr is unknown:- reqActiveTimer(m.lr).init(...)- isReqActive(m.lr) = true- For h in q, if h contains m.lr  - q.delete(h)q.empty()?Discard requestYAfter recording the unknown cert.Before sending a learning requestAttackAttack time windowNotes:- q: missing certificate queue- h3: get loworder 3-byte hash of the input- h8: get loworder 8-byte hash of the input- m: an SPDU- m.lr: learning request field of mq.add(h8(ca1))Trigger SPDU:- Signer: certA- (Issuer: ca1)isReqActive(h3(ca1))?NN3 happens!N4 happens!become useless. Also, a new P2PCD learning process to the
unknown certiﬁcate ca1 will not be initialized again until both
the response backoff timer of V1 and the request active timer
of V2 expire. After that, V2 needs to initialize P2PCD again;
thus, one round of N1 double the one-time delay of P2PCD. In
N3 and N4, V2 is unable to process incoming trigger SPDUs
until the request active timer expires. However, this timer is
usually set to 250 ms, which largely increase the time delay.
5.2 PMP Vulnerabilities
CVAnalyzer identiﬁes 15 attacks in the PMPs of VEN-
TOS [69] and PLEXE [56] (see Table 2). Among identiﬁed
vulnerabilities, A1-4 are not directly related to availability
issues but are building blocks of other attacks. Although the
PMPs analyzed in this paper are academic prototypes, our
main contribution is the veriﬁcation methodology, which can
be generally applied to future PMP protocols. Our results
demonstrate the necessity of such a systematic veriﬁcation
methodology: using manual efforts, a very recent work [1]
can only uncover 1 vulnerability (A1). In contrast, using CV-
Analyzer for the same PMP implementation, we are able to
automatically uncover not only the same one but also 14 more
(A1-15), which demonstrates both substantially improved ef-
ﬁciency and effectiveness.
In the following descriptions, V1 and V2 still stand for vehi-
cles. V1 is a platoon leader, and V2 is usually a follower. Their
relative positions differ case by case.
5.2.1 PMP Attack Prerequisites
A1 and A2 allow the attacker to become a valid platoon leader
and follower. Abdo et al. [1] have demonstrated that A1 can
lead to the trafﬁc collision and slow down the emergency
vehicle. Although they do not directly cause security or safety
breaches, we list A1 and A2 alone because they are prerequi-
sites of other attacks. As described in §2.2, a platoon leader
will send a merge request to a front platoon, if the combined
platoon size is no greater than the optimal platoon size. Thus,
the attacker can claim herself as a front platoon to take over
another platoon or initiate a merge maneuver to join a platoon,
leading to the success of A1 or A2 respectively.
5.2.2 Split Trigger Attacks
Both A3 and A4 (see §A for details on A4) can trigger the split
maneuver at any positions. Without sacriﬁcing her own speed
stability, in A3, the attacker can further lead to a high-rate
of vehicles entering and exiting a platoon, which decreases
efﬁciency and safety [5].
Attack steps. In A3, the attacker ﬁrst merges with V1 as a
malicious follower. Then, V2 sends a MERGE_REQ to V1 and
join the platoon. At this time, the attacker intentionally sends
a LEAVE_REQ with a wrong depth number of 2 to V1, in which
the depth number indicates the splitting vehicle is V2. V1 thus
wrongly initiates the split maneuver at the position of V2.
After the split process, V2 receives beacon messages from the
attacker and merges with the front platoon again, as described
in §2.2. By repeatedly triggering merge and split maneuver
of V2, the attacker downgrades the speed stability of V2.
Discussion. The reason for A3 is that the platoon leader
does not verify whether the platoon depth in the LEAVE_REQ
matches with the sender ID or not. Usually, if the sender ID
is related to unique signing certiﬁcates [32], it is difﬁcult for
the attacker to falsify the identity. However, the design of
PMP uses the depth information as the identity, which can be
easily modiﬁed by the attacker. Thus, PMP opens a door for
the attacker to trigger the leave maneuver, leading to a split
maneuver at arbitrary positions.
5.2.3 PMP Block Attacks
This is the most common type of vulnerabilities (A5-14) in
the current PMP design of both VENTOS and PLEXE, which
misleads the victim vehicle to stay at a busy state. We only
describe A7 here. Please refer to §A for more details on others.
Attack steps. In A7, the attacker ﬁrst joins the platoon by
launching A2 and aims at blocking the split maneuver. Usu-
ally, only the platoon leader can initiate the split maneuver,
but the platoon follower cannot. However, the attacker can
leverage A3 and A4 to mislead the platoon leader to send
a SPLIT_REQ to any speciﬁed platoon members. In A7, the
attacker receives a SPLIT_REQ from V1 but chooses not to
reply with a SPLIT_ACCEPT. Thereby, the platoon leader will
keep waiting for the split reply. At this time, if V2, which is
ahead of the attacker, approaches the destination and wants to
leave the platoon, the leader V1 will not be able to process the
leave request or manage the split process to create space for
V2. Without enough space at the front and rear of the vehicle,
it is dangerous for V2 to directly change the lane.
Discussion. The fundamental reason for A5-14 is the lack
of error recovery mechanism on communication failures. By
design, the CV network stack does not provide reliable com-
munication; it is the applications’ responsibility to handle
communication failures [34]. Researchers have already dis-
cussed the impact of communication failures on the CACC
controller [5, 47], but do not pay much attention to communi-
cation failures on PMP. Also, we observe that PMPs in both
VENTOS and PLEXE do not consider “ofﬂine” platoon mem-
bers; thus, they do not design any error recovery mechanisms
to reset the vehicle’s state. Although we understand the PMPs
of VENTOS and PLEXE are research prototypes, identiﬁed
PMP block attacks still emphasize the importance of error
recovery mechanisms in CV application design.
5.2.4
This attack aims at assigning a wrong depth number to a
victim follower, which is inconsistent with the index in the
platoon member list. The platoon depth is used in the split ma-
neuver, so the inconsistent depth number can lead to failures
of the split maneuver and the leader/follower leave maneuver.
Attack steps. In this attack, the attacker ﬁrst joins V1’s pla-
toon as a follower. Then, the attacker slows down to create
Inconsistency Attack
3228    30th USENIX Security Symposium
USENIX Association
large gap (e.g., 100 m) between herself and V1. At this time,
V2 change its lane and drives behind V1. V2 receives the bea-
con message from V1 and sends a MERGE_REQ to V1. After
merging with V1, V1 updates its local state by appending V2’s
ID to the platoon member list, indicating the real platoon
depth of V2 is 2. However, V2 only receives a beacon message
with the depth of 0 from the front vehicle V1; V2 thus wrongly
sets its platoon depth to 1. At this time, the attacker sends a
LEAVE_REQ to V1. Since, V1 thinks that the attacker is a middle
follower, and V2 is behind the attacker, it sends a SPLIT_REQ
to V2 to create rear space for the attacker. In VENTOS, we
observe that CHANGE_PL does not present the absolute depth
but carries the relative change of depth information, because
it is convenient for the platoon leader to send all followers one
CHANGE_PL rather than multiple different CHANGE_PL. During
the split maneuver, V2 receives a CHANGE_PL from V1 with the
depth change of −2. While updating the depth information
locally, PMP of V2 throws an error for the invalid new depth:
1− 2 = −1, which may compromise the availability of PMP,
as well as terminates the split maneuver.
Discussion. The reason for A15 can be attributed to the in-
consistent platoon view on the platoon leader and follower.
When joining a platoon, the vehicle relies on the depth infor-
mation in the beacon message from the front vehicle to set its
own depth number, while the platoon leader simply appends a
new member to the platoon member list without checking the
relative location information. If the front vehicle is a benign
last follower, no inconsistency will appear; otherwise, any
CHANGE_PL from the leader to the victim vehicle will lead to
a wrong new depth number. However, the attacker can either
create a large gap for the victim vehicle (A11), or can send a
beacon message with a wrong depth number if the attacker is
the last follower.
6 Evaluation
In this section, we conduct extensive experiments and answer
the following three research questions:
• RQ1: Are identiﬁed vulnerabilities practical in a real-
world setting?
• RQ2: What are the security/safety impact of identiﬁed
vulnerabilities?
• RQ3: What is the runtime performance of CVAnalyzer?
6.1 RQ1: Practicality of Identiﬁed Attacks
We implement and validate all attacks from both P2PCD and
PMP, detected by CVAnalyzer, in a real-world testbed, which
thus concretely demonstrates the effectiveness of CVAnalyzer.
Interestingly, we also ﬁnd some poor implementation details
in real-world CV devices that actually make our attacks easier.
6.1.1 Testbed Setup and Tool Preparation
As shown in Figure 8, we set up a CV network using three
Cohda OBUs [19] in our lab. Among these three OBUs, de-