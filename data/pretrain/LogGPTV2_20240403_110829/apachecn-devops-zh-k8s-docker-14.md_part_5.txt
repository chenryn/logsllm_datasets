      workspace: output
```
我们引用参数和任务结果，但没有硬编码。这使得我们的`Pipeline`可以重复使用。我们还在第二个和第三个任务中包含`runAfter`指令，以确保我们的任务按顺序运行。否则，任务将并行运行。鉴于每个任务都依赖于它之前的任务，我们不想同时运行它们。接下来，让我们部署并运行我们的管道:
1.  将`chapter14/yaml/tekton-source-git.yaml`文件添加到您的集群中；这告诉 Tekton 从哪里获取应用代码。
2.  编辑`chapter14/yaml/tekton-image-result.yaml`，用服务器 IP 地址的哈希表示替换`192-168-2-114`，并将其添加到集群中。
3.  编辑`chapter14/yaml/tekton-task1.yaml`，用 Docker 注册表的主机替换镜像主机，并将文件添加到集群中。
4.  将`chapter14/yaml/tekton-task2.yaml`添加到您的集群中。
5.  编辑`chapter14/yaml/tekton-task3.yaml`，用 Docker 注册表的主机替换镜像主机，并将文件添加到集群中。
6.  将`chapter14/yaml/tekton-pipeline.yaml`添加到您的集群中。
7.  将`chapter14/yaml/tekton-pipeline-run.yaml`添加到您的集群中。
您可以使用`kubectl`查看管道的进度，也可以使用泰克顿的命令行界面工具`tkn`([https://github.com/tektoncd/cli](https://github.com/tektoncd/cli))。运行`tkn pipelinerun describe build-hello-pipeline-run -n python-hello-build`会列出你的构建进度。您可以通过重新创建您的`run`对象来重新运行构建，但这不是很有效。此外，我们真正想要的是我们的管道在提交时运行！
## 自动建造
我们不想手动运行构建。我们希望构建自动化。Tekton 提供了触发器项目来提供 webhooks，因此每当 GitLab 收到提交时，它就可以告诉 Tekton 为我们构建一个`PipelineRun`对象。设置触发器需要创建一个 Pod，它有自己的服务帐户，可以创建`PipelineRun`对象、该 Pod 的服务和一个`Ingress`对象来托管 HTTPS 对 Pod 的访问。你也想用一个机密来保护网络钩子，这样它就不会被无意中触发。让我们将这些对象部署到我们的集群中:
1.  将`chapter14/yaml/tekton-webhook-cr.yaml`添加到您的集群中。这个`ClusterRole`将被任何想要为构建提供网络钩子的名称空间使用。
2.  编辑`chapter14/yaml/tekton-webhook.yaml`。文件底部是一个`Ingress`对象。更改`192-168-2-114`来表示你的集群的 IP，用破折号代替圆点。然后，将文件添加到您的集群中:
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: gitlab-webhook
      namespace: python-hello-build
      annotations:
        cert-manager.io/cluster-issuer: ca-issuer
    spec:
      rules:
      - host: "python-hello-application.build.192-168-2-114.nip.io"
        http:
          paths:
          - backend:
              serviceName: el-gitlab-listener
              servicePort: 8080
            pathType: ImplementationSpecific
      tls:
      - hosts:
        - "python-hello-application.build.192-168-2-114.nip.io"
        secretName: ingresssecret
    ```
3.  登录 GitLab。前往**管理区** | **网络**。点击**展开**出站请求**旁边的**。选中**允许从网络挂钩和服务请求本地网络**，点击**保存更改**。
4.  转到我们创建的`hello-python`项目，点击**设置** | **网页挂钩**。对于网址，使用 HTTPS 的`Ingress`主机，例如`https://python-hello-application.build.192-168-2-114.nip.io/`。对于**机密令牌**，使用`notagoodsecret`，对于**推送事件**，将分支名称设置为**主**。最后，点击**添加网钩**。
5.  添加完成后，点击**测试**，选择**推送事件**。如果一切配置正确，应该已经创建了一个新的`PipelineRun`对象。您可以运行`tkn pipelinerun list -n python-hello-build`查看运行列表；应该有一个新的运行。几分钟后，您将在`python-hello-operations`项目中拥有一个新的容器和一个补丁部署！
我们在这一节中花了很多时间来构建我们的应用，并使用 GitOps 部署它。好消息是一切都是自动化的；推送将创建我们应用的新实例！坏消息是我们不得不创建十几个 Kubernetes 对象，并在 GitLab 中手动更新我们的项目。在最后一部分，我们将自动化这个过程。首先，让我们部署 ArgoCD，这样我们就可以运行我们的应用了！
# 部署 ArgoCD
到目前为止，我们已经有了一个进入集群的方法，一个存储代码的方法，以及一个构建代码和生成映像的系统。我们平台的最后一个组件是我们的 GitOps 控制器。这是让我们将清单提交给 Git 存储库并对集群进行更改的部分。ArgoCD 是 Intuit 和 Weaveworks 之间的合作。它提供了一个很好的用户界面，并由自定义资源和 Kubernetes 本地`ConfigMap`和`Secret`对象的组合驱动。它有一个命令行界面工具，网络和命令行界面工具都与 OpenID Connect 集成在一起，所以用我们的 OpenUnison 添加单点登录将很容易。让我们部署 ArgoCD 并使用它来启动我们的`hello-python`网络服务:
1.  使用来自[https://argoproj.github.io/argo-cd/getting_started/](https://argoproj.github.io/argo-cd/getting_started/):
    ```
    $ kubectl create namespace argocd
    $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    ```
    的标准 YAML 进行部署
2.  通过编辑`chapter14/yaml/argocd-ingress.yaml`为蓉城创建`Ingress`对象。用你的 IP 地址替换`192-168-2-140`的所有实例，用破折号替换圆点。我的服务器的 IP 是`192.168.2.114`，所以我用的是`192-168-2-114`。完成后，将文件添加到集群中。
3.  通过运行`kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2`获取根密码。保存此密码。
4.  编辑`argocd`命名空间中的`argocd-server` `Deployment`。将`--insecure`添加到命令中:
    ```
        spec:
          containers:
          - command:
            - argocd-server
            - --staticassets
            - /shared/app
            - --repo-server
     - argocd-repo-server:8081
     - --insecure
    ```
5.  现在，您可以通过转到您在*步骤 2* 中定义的`Ingress`主机来登录蓉城。您还需要从 https://github.com/argoproj/argo-cd/releases/latest.下载 ArgoCD CLI 实用程序。下载完成后，通过运行`./argocd login grpc-argocd.apps.192-168-2-114.nip.io`登录，用服务器的 IP 替换`192-168-2-114`，用破折号代替点号。
6.  创建`python-hello`命名空间。
7.  在添加我们的 GitLab 存储库之前，我们需要告诉 ArgoCD 信任我们的 GitLab 实例的 SSH 主机。因为我们将让 ArgoCD 直接与 GitLab shell 服务对话，所以我们需要为该服务生成`known_host`。为了使这变得更容易，我们包含了一个脚本，该脚本将从集群外部运行`known_host`，但会像从集群内部一样重写内容。运行`chapter14/shell/getSshKnownHosts.sh`脚本，将输出导入`argocd`命令导入`known_host`。请记住更改主机名以反映您自己群集的 IP 地址:
    ```
    $ ./chapter14/shell/getSshKnownHosts.sh gitlab.apps.192-168-2-114.nip.io | argocd cert add-ssh --batch
    Enter SSH known hosts entries, one per line. Press CTRL-D when finished.
    Successfully created 3 SSH known host entries
    ```
8.  接下来，我们需要生成一个 SSH 密钥来访问`python-hello-operations`存储库:
    ```
    $ ssh-keygen -f ./argocd-python-hello
    ```
9.  进入项目，点击**设置** | **存储库**，将公钥添加到`python-hello-operations`存储库中。在**展开键**旁边，点击**展开**。对于**标题**，使用`argocd`。使用`argocd-python-hello.pub`的内容，点击**添加键**。然后，使用命令行界面将密钥添加到 ArgoCD，并用`gitlab-gitlab-shell` `Service`主机名:
    ```
    $ argocd repo add PI:EMAIL:root/hello-python-operations.git --ssh-private-key-path ./argocd-python-hello
    repository 'PI:EMAIL:root/hello-python-operations.git' added
    ```
    替换公共 GitLab 主机
10.  我们的最后一步是创建一个`Application`对象。您可以通过网络用户界面或命令行界面创建它。您也可以通过在`argocd`命名空间中创建一个`Application`对象来创建它，这就是我们将要做的。在集群中创建以下对象(`chapter14/yaml/argocd-python-hello.yaml` ):
    ```
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: python-hello
      namespace: argocd
    spec:
      destination:
        namespace: python-hello
        server: https://kubernetes.default.svc
      project: default
      source:
        directory:
          jsonnet: {}
          recurse: true
        path: src
        repoURL: PI:EMAIL:root/hello-python-operations.git
        targetRevision: HEAD
      syncPolicy:
        automated: {}
    ```
这是最基本的配置。我们正在处理简单的清单。ArgoCD 也可以通过 jsonet 和 Helm 工作。创建这个应用后，查看`python-hello`命名空间中的 Pods。你应该有一个运行！对代码进行更新将导致命名空间的更新。
我们现在有了一个可以通过提交自动部署的代码库。我们花了几十页，运行了几十个命令，创建了 20 多个对象来实现它。最好自动化这个过程，而不是手动创建这些对象。现在我们有了需要创建的对象，我们可以自动化入职。在下一节中，我们将采用手动过程来构建 GitLab、Tekton 和 ArgoCD 之间的链接，以与我们的业务流程保持一致。
# 使用 OpenUnison 自动化项目入职
在本章的前面，我们部署了 OpenUnison 自动化门户。该门户允许用户请求创建新的命名空间，并允许开发人员通过自助界面请求访问这些命名空间。该门户内置的工作流非常基本，但创建了名称空间和适当的`RoleBinding`对象。我们想要做的是构建一个工作流，集成我们的平台，并创建我们在本章前面手动创建的所有对象。目标是我们能够将新的应用部署到我们的环境中，而不必运行`kubectl`命令(或者至少最小化它的使用)。这需要仔细规划。下面是我们的开发人员工作流将如何运行:
![Figure 14.6 – Platform developer workflow ](img/Fig_14.6_B15514.jpg)
图 14.6–平台开发人员工作流程
让我们快速运行上图中看到的工作流程:
1.  应用所有者将请求创建应用。
2.  基础架构管理员批准创建。
3.  此时，OpenUnison 将部署我们手动创建的对象。我们将很快详细说明这些对象。
4.  一旦创建，开发人员就能够请求访问应用
5.  应用所有者批准对应用的访问。
6.  一旦获得批准，开发人员将分叉应用源代码库并完成他们的工作。他们可以在开发人员工作区启动应用。他们还可以分叉构建项目来创建管道，分叉开发环境操作项目来为应用创建清单。一旦工作完成并在本地测试，开发人员将把代码推入他们自己的分叉中，然后请求合并请求。
7.  应用所有者将批准该请求，并合并来自 GitLab 的代码。
一旦代码被合并，ArgoCD 将同步构建和操作项目。应用项目中的 webhook 将启动一个 Tekton 管道，该管道将构建我们的容器，并用最新容器的标签更新开发操作项目。ArgoCD 会将更新后的清单同步到我们应用的开发命名空间中。测试完成后，应用所有者从开发操作工作区向生产操作工作区提交一个合并请求，从而触发 ArgoCD 投入生产。
在这个流程中，没有一个步骤叫做“运营人员使用`kubectl`来创建名称空间。”这是一个简单的流程，不会完全避免你的运营人员使用`kubectl`，但应该是一个很好的起点。所有这些自动化都需要创建大量的对象:
![Figure 14.7 – Application onboarding object map ](img/Fig_14.7_B15514.jpg)
图 14.7–应用入职对象图
在 GitLab 中，我们为应用代码、操作和构建管道创建了一个项目。我们还将运营项目划分为开发运营项目。对于每个项目，我们生成部署密钥并注册 webhooks。我们还创建组来匹配我们在本章前面定义的角色。
对于 Kubernetes，我们为开发和生产环境创建名称空间。我们还为泰克顿管道创建了一个名称空间。我们根据需要将钥匙添加到`Secrets`。在构建命名空间中，我们创建所有的支架来支持触发自动构建的 webhook。这样，我们的开发人员只需要担心创建他们的管道对象。
在我们的最后一个应用 ArgoCD 中，我们将创建一个`AppProject`来承载我们的构建和操作名称空间。我们还将添加我们在创建 GitLab 项目时生成的 SSH 密钥。每个项目还在我们的`AppProject`中获得一个`Application`对象，该对象指示 ArgoCD 如何从 GitLab 同步。最后，我们将 RBAC 规则添加到 ArgoCD 中，这样我们的开发人员可以查看他们的应用同步状态，但是所有者和操作人员可以进行更新和更改。
你不需要自己建立这个！`chapter14/openunison`是实现这个流程的 OpenUnison 的源码。如果你想看到我们创造的每一个物体，请参考`chapter14/openunison/src/main/webapp/WEB-INF/workflows/30-NewK8sNamespace.xml`。这个工作流程完成了我们刚才描述的一切。我们还将`chapter14/python-hello`作为我们的示例应用，将`chapter14/python-hello-operations`作为我们的清单，将`chapter14/python-hello-build`作为我们的管道。您需要调整这三个文件夹中的一些对象来匹配您的环境，主要是更新主机名。
随着我们的开发人员工作流程的设计和示例项目的准备就绪，接下来我们将更新 OpenUnison、GitLab 和 ArgoCD，以使所有这些自动化工作！
## 整合 GitLab
当我们第一次部署 Helm 图表时，我们为单点登录配置了 GitLab。我们部署的`gitlab-oidc` `Secret`已经拥有了 GitLab 从 OpenUnison 访问 SSO 所需的所有信息。不过，我们仍然需要配置 OpenUnison。我们可以将单点登录配置硬编码到我们的 OpenUnison 源代码库中，或者我们可以将其作为自定义资源动态添加。在这种情况下，我们将通过自定义资源添加单点登录连接: