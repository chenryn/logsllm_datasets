39] discuss how a service authenticates the app that request per-
mission to use the service. However, from the case studies we have
come across, it is necessary for apps to authenticate the service to
which it is connecting. Since the adversary controls the domain
and can generate a valid HTTPS certificate, it would be better for
mobile developers that own private services or third-party libraries
to embed the published app with the server’s original certificate. In
this way, when the certificate is updated, the app should be updated
as well. In addition to using HTTPS, mobile developers who own
private service and third-party library developers should imple-
ment ways for the app to authenticate the backend service in order
to check whether it is connected to a legitimate service or not. We
leave the details of implementing this in future work.
6.2 Limitations
Static Analysis As we adopted static analysis for our study, there
are several known drawbacks. First, even though we can detect the
abandoned Internet resource used by mobile apps, there is no guar-
antee that the resource will be executed during run time. Second,
our methodology is vulnerable against obfuscated apps. Therefore,
this study is biased towards unobfuscated apps. Moreover, since
full URL (or even the base URL) can be constructed using various
string operation method [36], our approach cannot extract URL
constructed in such way. We are also realized that there is the
probability that not all URL are called in execution time. In future
work, when searching for abandoned Internet resources, we plan to
adopt more sophisticated approach such as the Tiger system [21]
approach for extracting network-related code and then using this
information to trigger network activities on the dynamic analysis.
We can thereby increase the validity and reliability of our analysis.
Tracking Hijacked Resources In this work, we were not able to
measure how many resources have been hijacked or how many of
them have changed their ownership since the publication of an app.
In future work, we intend to employ algorithm such as Alembic [28]
or Passive DNS service [9] to detect ownership change made in the
past.
Dataset Since we use Playdrone dataset, the experiment was biased
towards free app. Abandoned Internet resource used by mobile apps
should also apply to paid apps. Since the Playdrone dataset is only a
Figure 10: Image on the Left is the Original WebView App.
Image on the Right is the App Page for Phishing.
domains or CDNs by directly specifying the full URL in the code.
Once a malicious person re-registers the domain, malware can be
put into links disguised as picture links. Another case involved an IP
address used by a URL shortener startup service called fbshare.me.
This service provides a share button that shows the number of times
the URL of the current page appears on Facebook. This domain
was found inside a blogging app in our dataset. Users can manage
their blog by using such an app. After we launched instance on this
domain, we observe a lot of mobile user access the short URL, which
earlier on was provided by this service. The number of Android
users and iPhone users were 6,633 and 22,289 respectively. A
malicious person could distribute malicious software through the
URLs. We were aware that this was more a general problem of Dare.
If an adversary wants to specifically targeting mobile user, then
they can search for Dares used by mobile app.
6 DISCUSSION
Throughout this study, we highlighted the risk and the pervasive-
ness of abandoned Internet resource used by Android Apps. Since
the apps were fairly old, we were aware that not all apps still have
users. As we revealed in the previous section, however, 13 active
apps with abandoned Internet resources have had installed more
than a million of times and some abandoned Internet resources
are still accessed frequently from end users. We also believe that
regardless the number of users, developers and official marketplace
operators should take responsibility for addressing the problem and
preventing distribution of apps that contained abandoned Internet
resource. In this section, we discuss the possible mitigation of this
problem from the perspective of the developer and marketplace
operator. We conclude with addressing some of the limitations of
our work.
6.1 Countermeasures
As stated in former studies, the root problem is the change in
ownership of the resource. We propose the following mitigation
for cloud providers, mobile marketplace operator, and developers:
Allowing Inquiry of IP Address Ownership. Cloud providers
can provide a service that allows third parties to inquire about the
Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea156snapshot of Google Play free apps on 2014, all the apps are fairly old.
There is a possibility that more recent apps are using abandoned
Internet resources. Finally, while we focused on Android apps in
our study, our approach is applicable to other platforms such as
iOS.
6.3 Ethical Consideration
We conducted this study according to research ethics principles and
best practices [3, 17, 35]. Our scanning servers for dangling records
only generated a restricted amount of traffic (i.e., requests to HTTP
port 80, port 443, and custom port found in the URL), which did not
increase server workload. On resources we acquired, we simply col-
lected requests for resources, did not respond to anything harmful,
and did not receive sensitive or personal information. We acquired
abandoned Internet resources for the purpose of our research, we
followed procedures for responsible disclosure, and we are in the
process of reporting them to app/library/service developers.
7 RELATED WORK
7.1 Abandoned Internet Resource
Abandoned Internet resource and change of ownership have been
discussed in several studies before. Schlamp et al. [33] discussed
the problem in terms of abandoned public IP address prefix. One
major cause is that companies who go out of business do not clean
up their resource properly. In [30], abandoned Internet resource
was reported to be pervasive and vulnerable to abuse. It can also be
caused by unexpired domains and obtainable resources (Dangling
Records).
However, threats caused by abandoned Internet resource associ-
ated with mobile app are not discussed in these two studies. The
closest to our research is a study conducted by Mutchler et al. [32].
They did a large scale study about mobile web app and found several
expired domains used by the Android app. Whereas our research
is focused on abandoned Internet resources used by Android app
regardless of usage, meanwhile their research looked at the vulner-
ability in Android WebView system and the possibilities of loading
untrusted websites in WebView.
7.2 Domain Name Analysis
Previous studies analyzed abandoned and re-registered domain
names through the lens of domain registration and monetization
processes. Hao et al. focused on the registration process of spam-
mers’ domain names to explore the characteristics of domain regis-
trars and domain life cycles [25]. Their measurement showed that
spammers frequently re-registered expired domain names and they
preferred domain names that had recently expired. Moreover, Hao
et al. proposed a domain reputation system called PREDATOR [24]
to identify malicious domain names using the features derived from
the registration process. The argument is that attackers need to
register many domain names to enhance their attack agility, leading
to abnormal registration behaviors. Lever et al. introduced the con-
cept of residual trust, which relates to the historical reputation of a
domain name that is passed down through a change of owners [28].
It was observed that attackers exploited and abused residual trust.
Similarly, Lauinger et al. focused on residual trust and analyzed
large-scale WHOIS data for analysis of re-registrations [27]. They
showed that expiration processes differed substantially among do-
main names. Many re-registrations happened soon after deletion,
especially for older domain names. Lauinger et al. also conducted
empirical analysis of ownership changes of re-registered domain
names [26], demonstrating that a majority of re-registered domain
names used domain parking services and hosted only advertise-
ments. The domain names were predominantly used for speculation
and monetization purposes and relied on residual traffic. Alrwais et
al. reported the systematic measurement study on the dark side of
domain parking system based on infiltration analysis, meaning they
tracked end-to-end monetization chains on domain names hosted
by major domain parking services [17]. The results exposed the
practice of click fraud, traffic spam, and traffic stealing during the
monetization of parked domain names. Vissers et al. presented an
in-depth exploration of the domain parking’s ecosystem in terms
of the consequences of accessing parked domain names [38]. They
showed that users landing on websites hosted on domain parking
services were exposed to various types of malware distribution and
scam websites.
Our study brings a new perspective of abandoned domain names
resulting from ill-maintained mobile apps. We believe that our
study enhances understanding of abused domain names that were
discussed in previous studies.
7.3 Security Analysis of Mobile Apps
Many studies have revealed the security risks of third-party library
used in mobile apps. Program analysis of mobile apps requires iden-
tifying third-party libraries and separating them from the host app
in order to obtain accurate analysis results. LibRadar, LibScout, and
LibD are state-of-the-art library detection tools that do not rely
on whitelists and are publicly available [19, 29, 31]. We employed
LibRadar to classify the resources used by apps in Section 3.3 be-
cause it provided information on the package name of third-party
libraries.
The security risk of third-party libraries mentioned in the past
studies were typically classified into unwanted program and vul-
nerability. Potentially unwanted or harmful apps are known to
be attributed to third-party libraries. Andow et al. discovered that
more than 1% of the apps in randomly selected apps from the
PlayDrone dataset aggressively display advertisements and are
attributed to have malicious adware libraries [18]. Chen et al. pre-
sented the methodology for locating these libraries. They dissected
140 potentially harmful libraries collected across Android and iOS
marketplaces [20]. Backes et al. conducted a longitudinal study of
library usage and evolution in apps over time and discovered that
known vulnerabilities in popular libraries still remain unfixed in
the current top apps in that time [19]. Derr et al. conducted a survey
of app developers and performed a large-scale library updatability
analysis. They focused on the root causes of outdated libraries and
proposed actionable remediation for stakeholders [23].
Our study shed light on the availability of Internet resources
used by mobile apps, which is the new aspect of mobile library
analysis different from above studies.
Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea1578 CONCLUSION
This study focused on the threat of abandoned Internet resource
used by mobile apps. We conducted a large scale measurement
study using 1.1 M of Android apps. We found 3,628 abandoned
Internet resources from 7,331 apps that were published in the offi-
cial marketplace–Google Play. By acquiring and evaluating these
resources, we demonstrated that the threats of abandoned Internet
resources were real, serious, and pervasive. We proposed a practical
solution to be adopted by cloud providers, marketplace operators
and developers. As the problems appears to cross platforms, future
work intends to measure the problem on another mobile platform.
Finally, as we can see from the changes in the popularity of apps
in a marketplace, one app may gain tremendous popularity, but its
popularity may also be rapidly lost. As long as such a structural
property exists, the problem of abandoned Internet resources will
continue. It is expected that the problem addressed in this paper
will lead to further research towards a fundamental solution.
ACKNOWLEDGMENTS
We thank Dr. Bo Sun for his insightful and valuable advices to
this project. We also thank Dr. Mitsuhiro Hatada for letting us
use the commercial sandbox tool. We are also grateful to Dr. Dave
Plonka for his comments on abandoned Internet resources (RFC
4085). Thanks are to the anonymous reviewers for their thoughtful
feedback. A part of this work was supported by JSPS Grant-in-Aid
for Scientific Research B, Grant Number 16H02832. Lastly, special
thanks are to Indonesia Endowment Fund for Education (LPDP)
that has provided full scholarship for my master education.
REFERENCES
[1] 2011. UserAgentString. http://useragentstring.com/pages/api.php. (2011).
[2] 2012. Google Play Unofficial API. https://github.com/egirault/googleplay-api.
(2012).
[3] 2012. The Menlo Report: Ethical Principles Guiding Information and Communi-
cation Technology Research. https://www.caida.org/publications/papers/2012/
menlo_report_actual_formatted/. (2012).
[4] 2016. Androguard. https://github.com/androguard/androguard. (2016).
[5] 2016. Android Cloud to Device Messaging (C2DM). https://developers.google.
com/cloud-messaging/c2dm. (2016).
[6] 2017. Android Permissions.
permissions/requesting.html. (2017).
gr/aws-ip-ranges.html. (2017).
getting-started. (2017).
[7] 2017. AWS EC2 IP Address Range. http://docs.aws.amazon.com/general/latest/
[8] 2017. Facebook Android SDK. https://developers.facebook.com/docs/android/
https://developer.android.com/guide/topics/
[9] 2017. Farsight Passive DNS. https://www.farsightsecurity.com/solutions/dnsdb/.
(2017).
html. (2017).
[10] 2017. FuzzyMatching. https://pypi.python.org/pypi/fuzzywuzzy. (2017).
[11] 2017. Godaddy API. https://developer.godaddy.com/doc. (2017).
[12] 2017. Google Play ASI Program. https://developer.android.com/google/play/asi.
[13] 2017. Microsoft Azure IP Address Range. https://www.microsoft.com/en-us/
download/details.aspx?id=41653. (2017).
[14] 2017. MIT App Inventor. http://appinventor.mit.edu/explore/. (2017).
[15] 2017. Public Suffix List Python. https://pypi.python.org/pypi/publicsuffix/. (2017).
[16] 2017. SocialAuth. https://github.com/3pillarlabs/socialauth. (2017).
[17] Sumayah A. Alrwais, Kan Yuan, Eihal Alowaisheq, Zhou Li, and XiaoFeng Wang.
2014. Understanding the Dark Side of Domain Parking. In Proceedings of the 23rd
USENIX Security Symposium. 207–222.
[18] Benjamin Andow, Adwait Nadkarni, Blake Bassett, William Enck, and Tao Xie.
2016. A Study of Grayware on Google Play. In Proceedings of the 2016 IEEE
Security and Privacy Workshops (SPW’16). 224–233.
[19] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable Third-Party Library
Detection in Android and its Security Applications. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security (CCS’16).
356–367.
[20] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang,
Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following Devil’s
Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android
and iOS. In Proceedings of the IEEE Symposium on Security and Privacy (SP’16).
357–376.
[21] Yi Chen, Wei You, Yeonjoon Lee, Kai Chen, XiaoFeng Wang, and Wei Zou. 2017.
Mass Discovery of Android Traffic Imprints Through Instantiated Partial Ex-
ecution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (CCS’17). 815–828.
[22] S. Cheshire and M. Krochmal. 2013. Special-Use Domain Names. RFC 6761
(Proposed Standard). (Feb. 2013).
[23] Erik Derr, Sven Bugiel, Sascha Fahl, Yasemin Acar, and Michael Backes. 2017.
Keep me Updated: An Empirical Study of Third-Party Library Updatability on
Android. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (CCS’17). 2187–2200.
[24] Shuang Hao, Alex Kantchelian, Brad Miller, Vern Paxson, and Nick Feamster.
2016. PREDATOR: Proactive Recognition and Elimination of Domain Abuse
at Time-Of-Registration. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security (CCS’16). 1568–1579.
[25] Shuang Hao, Matthew Thomas, Vern Paxson, Nick Feamster, Christian Kreibich,
Chris Grier, and Scott Hollenbeck. 2013. Understanding the domain registration
behavior of spammers. In Proceedings of the 2013 Internet Measurement Conference
(IMC’13). 63–76.
[26] Tobias Lauinger, Abdelberi Chaabane, Ahmet Salih Buyukkayhan, Kaan Onarli-
oglu, and William Robertson. 2017. Game of Registrars: An Empirical Analysis
of Post-Expiration Domain Name Takeovers. In Proceedings of the 26th USENIX
Security Symposium. 865–880.
[27] Tobias Lauinger, Kaan Onarlioglu, Abdelberi Chaabane, William Robertson, and
Engin Kirda. 2016. WHOIS Lost in Translation: (Mis)Understanding Domain
Name Expiration and Re-Registration. In Proceedings of the 2016 Internet Mea-
surement Conference (IMC’16). 247–253.
[28] Chaz Lever, Robert J. Walls, Yacin Nadji, David Dagon, Patrick D. McDaniel,
and Manos Antonakakis. 2016. Domain-Z: 28 Registrations Later Measuring the
Exploitation of Residual Trust in Domains. In Proceedings of the IEEE Symposium
on Security and Privacy (SP’16). 691–706.
[29] Menghao Li, Wei Wang, Pei Wang, Shuai Wang, Dinghao Wu, Jian Liu, Rui Xue,
and Wei Huo. 2017. LibD: scalable and precise third-party library detection in
android markets. In Proceedings of the 39th International Conference on Software
Engineering (ICSE’17). 335–346.
[30] Daiping Liu, Shuai Hao, and Haining Wang. 2016. All Your DNS Records Point to
Us: Understanding the Security Threats of Dangling DNS Records. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security
(CCS’16). 1414–1425.
[31] Ziang Ma, Haoyu Wang, Yao Guo, and Xiangqun Chen. 2016. LibRadar: Fast and
Accurate Detection of Third-party Libraries in Android Apps. In Proceedings of
the 38th International Conference on Software Engineering Companion (ICSE’16).
653–656.
[32] Patrick Mutchler, Adam Doupé, John Mitchell, Christopher Kruegel, and Giovanni
Vigna. 2015. A Large-Scale Study of Mobile Web App Security. In Proceedings of
the Mobile Security Technologies Workshop (MoST).
[33] Johann Schlamp, Josef Gustafsson, Matthias Wählisch, Thomas C. Schmidt, and
Georg Carle. 2015. The Abandoned Side of the Internet: Hijacking Internet
Resources When Domain Names Expire. In Proceedings of the 7th International
Workshop on Traffic Monitoring and Analysis (TMA’15). 188–201.
[34] Ryan Stevens, Jonathan Crussell, and Hao Chen. 2016. On the Origin of Mobile
Apps: Network Provenance for Android Applications. In Proceedings of the 6th
ACM Conference on Data and Application Security and Privacy (CODASPY’16).
160–171.
[35] Brett Stone-Gross, Marco Cova, Lorenzo Cavallaro, Bob Gilbert, Martin Szyd-
lowski, Richard A. Kemmerer, Christopher Kruegel, and Giovanni Vigna. 2009.
Your botnet is my botnet: analysis of a botnet takeover. In Proceedings of the 2009
ACM Conference on Computer and Communications Security (CCS’09). 635–647.
[36] Justin Del Vecchio, Feng Shen, Kenny M. Yee, Boyu Wang, Steven Y. Ko, and
Lukasz Ziarek. 2015. String Analysis of Android Applications (N). In Proceedings
of the 30th IEEE/ACM International Conference on Automated Software Engineering
(ASE’15). 680–685.
[37] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A Measurement Study of
Google Play. In Proceedings of the 2014 ACM International Conference on Measure-
ment and Modeling of Computer Systems (SIGMETRICS’14). 221–233.
[38] Thomas Vissers, Wouter Joosen, and Nick Nikiforakis. 2015. Parking Sensors:
Analyzing and Detecting Parked Domains. In Proceedings of the 22nd Annual
Network and Distributed System Security Symposium (NDSS’15).
[39] Hui Wang, Yuanyuan Zhang, Juanru Li, and Dawu Gu. 2016. The Achilles Heel of
OAuth: A Multi-platform Study of OAuth-based Authentication. In Proceedings
of the 32nd Annual Conference on Computer Security Applications (ACSAC’16).
167–176.
Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea158