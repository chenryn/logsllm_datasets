由于同时对一个string类型和一个int类型使用了StaticDemo类，因此存在两组静态
字段：
    StaticDemo.x = 4;
    StaticDemo.x = 5;
    WriteLine(StaticDemo.x);   // writes 4
6.4 泛型接口
使用泛型可以定义接口，在接口中定义的方法可以带泛型参数。在链表的示例中，就
实现了IEnumerable接口，它定义了GetEnumerator（）方法，以返回
IEnumerator。.NET为不同的情况提供了许多泛型接口，例如，IComparable、
ICollection和IExtensibleObject。同一个接口常常存在比较老的非泛型版本，例
如，.NET 1.0有基于对象的IComparable接口。IComparable基于一个泛型类型：
    public interface IComparable
    {
      int CompareTo(T other);
    }
  注意： 不要混淆用于泛型参数的in和out关键字。参见“协变和抗变”一节。
比较老的非泛型接口IComparable需要一个带CompareTo（）方法的对象。这需要强制
转换为特定的类型，例如，Person类要使用LastName属性，就需要使用CompareTo（）方
法：
    public class Person: IComparable
    {
      public int CompareTo(object obj)
      {
        Person other = obj as Person;
        return this.lastname.CompareTo(other.LastName);
      }
      //
实现泛型版本时，不再需要将object的类型强制转换为Person：
    public class Person: IComparable
    {
      public int CompareTo(Person other) => LastName.CompareTo(other.LastName);
      //...
6.4.1 协变和抗变
在.NET 4之前，泛型接口是不变的。.NET 4通过协变和抗变为泛型接口和泛型委托添
加了一个重要的扩展。协变和抗变指对参数和返回值的类型进行转换。例如，可以给一个
需要Shape参数的方法传送Rectangle参数吗？下面用示例说明这些扩展的优点。
在.NET中，参数类型是协变的。假定有Shape和Rectangle类，Rectangle派生自Shape
基类。声明Display（）方法是为了接受Shape类型的对象作为其参数：
    public void Display(Shape o) { }
现在可以传递派生自Shape基类的任意对象。因为Rectangle派生自Shape，所以
Rectangle满足Shape的所有要求，编译器接受这个方法调用：
    var r = new Rectangle { Width= 5, Height=2.5 };
    Display(r);
方法的返回类型是抗变的。当方法返回一个Shape时，不能把它赋予Rectangle，因为
Shape不一定总是Rectangle。反过来是可行的：如果一个方法像GetRectangle（）方法那样
返回一个Rectangle，
    public Rectangle GetRectangle();
就可以把结果赋予某个Shape：
    Shape s = GetRectangle();
在.NET Framework 4版本之前，这种行为方式不适用于泛型。自C# 4以后，扩展后的
语言支持泛型接口和泛型委托的协变和抗变。下面开始定义Shape基类和Rectangle类（代
码文件Variance/Shape.cs和Rectangle.cs）：
      public class Shape
      {
        public double Width { get; set; }
        public double Height { get; set; }
        public override string ToString() => $"Width: {Width}, Height: {Height}";
      }
      public class Rectangle: Shape
      {
      }
6.4.2 泛型接口的协变
如果泛型类型用out关键字标注，泛型接口就是协变的。这也意味着返回类型只能是
T。接口IIndex与类型T是协变的，并从一个只读索引器中返回这个类型（代码文件
Variance/IIndex.cs）：
      public interface IIndex
      {
        T this[int index] { get; }
        int Count { get; }
      }
IIndex接口用RectangleCollection类来实现。RectangleCollection类为泛型类型T定
义了Rectangle：
  注意： 如果对接口IIndex使用了读写索引器，就把泛型类型T传递给方法，并
从方法中检索这个类型。这不能通过协变来实现——泛型类型必须定义为不变的。不
使用out和in标注，就可以把类型定义为不变的（代码文件
Variance/RectangleCollection）。
        public class RectangleCollection: IIndex
        {
          private Rectangle[] data = new Rectangle[3]
          {
            new Rectangle { Height=2, Width=5 },
            new Rectangle { Height=3, Width=7 },
            new Rectangle { Height=4.5, Width=2.9 }
          };
          private static RectangleCollection _coll;
          public static RectangleCollection GetRectangles() =>
            _coll ? ? (coll = new RectangleCollection());
          public Rectangle this[int index]
          {
            get
            {
            if (index  data.Length)
              throw new ArgumentOutOfRangeException("index");
            return data[index];
            }
          }
          public int Count => data.Length;
        }
  注意： RectangleCollection.GetRectangles（）方法使用了本章后面将会介绍的
合并运算符（coalescing 
operator）。如果变量col1为null，那么将会调用运算符的右
侧，以创建RectangleCollection的一个新实例，并将其赋给变量col1。之后，会从
GetRectangles（）方法中返回变量col1。这个运算符详见第8章。
RectangleCollection.GetRectangle（）方法返回一个实现IIndex接口的
RectangleCollection类，所以可以把返回值赋予IIndex类型的变量rectangle。因
为接口是协变的，所以也可以把返回值赋予IIndex类型的变量。Shape不需要
Rectangle没有提供的内容。使用shapes变量，就可以在for循环中使用接口中的索引器和
Count属性（代码文件Variance/Program.cs）：
    public static void Main()
    {
      IIndex rectangles = RectangleCollection.GetRectangles();
      IIndex shapes = rectangles;
      for (int i = 0; i 
    {
      void Show(T item);
    }
ShapeDisplay类实现IDisplay，并使用Shape对象作为输入参数（代码文件
Variance/ShapeDisplay.cs）：
    public class ShapeDisplay: IDisplay
    {
      public void Show(Shape s) =>
        WriteLine($"{s.GetType().Name} Width: {s.Width}, Height: {s.Height}");
    }
创建ShapeDisplay的一个新实例，会返回IDisplay，并把它赋予shapeDisplay变
量。因为IDisplay是抗变的，所以可以把结果赋予IDisplay，其中Rectangle
派生自Shape。这次接口的方法只能把泛型类型定义为输入，而Rectangle满足Shape的所有
要求（代码文件Variance/Program.cs）：
    public static void Main()
    {
      //...
      IDisplay shapeDisplay = new ShapeDisplay();
      IDisplay rectangleDisplay = shapeDisplay;
      rectangleDisplay.Show(rectangles[0]);
    }
6.5 泛型结构
与类相似，结构也可以是泛型的。它们非常类似于泛型类，只是没有继承特性。本节
介绍泛型结构Nullable，它由.NET Framework定义。
.NET Framework中的一个泛型结构是Nullable。数据库中的数字和编程语言中的
数字有显著不同的特征，因为数据库中的数字可以为空，而C#中的数字不能为空。Int32
是一个结构，而结构实现同值类型，所以结构不能为空。这种区别常常令人很头痛，映射
数据也要多做许多辅助工作。这个问题不仅存在于数据库中，也存在于把XML数据映射
到.NET类型。
一种解决方案是把数据库和XML文件中的数字映射为引用类型，因为引用类型可以
为空值。但这也会在运行期间带来额外的系统开销。
使用Nullable结构很容易解决这个问题。下面的代码段说明了如何定义
Nullable的一个简化版本。结构Nullable定义了一个约束：其中的泛型类型T必须是
一个结构。把类定义为泛型类型后，就没有低系统开销这个优点了，而且因为类的对象可
以为空，所以对类使用Nullable类型是没有意义的。除了Nullable定义的T类型之
外，唯一的系统开销是hasValue布尔字段，它确定是设置对应的值，还是使之为空。除此
之外，泛型结构还定义了只读属性HasValue和Value，以及一些运算符重载。把
Nullable类型强制转换为T类型的运算符重载是显式定义的，因为当hasValue为false
时，它会抛出一个异常。强制转换为Nullable类型的运算符重载定义为隐式的，因为
它总是能成功地转换：
    public struct Nullable
        where T: struct
    {
      public Nullable(T value)
      {
        _hasValue = true;
        _value = value;
      }
      private bool _hasValue;
      public bool HasValue => _hasValue;
      private T _value;
      public T Value
      {
        get
        {
        if (! _hasValue)
        {
          throw new InvalidOperationException("no value");
        }
        return _value;
        }
      }
      public static explicit operator T(Nullable value) => _value.Value;
      public static implicit operator Nullable(T value) => new Nullable(val
ue);
      public override string ToString() => ! HasValue ? string.Empty : _value.ToS
tring();
    }
在这个例子中，Nullable用Nullable实例化。变量x现在可以用作一个int，进
行赋值或使用运算符执行一些计算。这是因为强制转换了Nullable类型的运算符。但
是，x还可以为空。Nullable的HasValue和Value属性可以检查是否有一个值，该值是
否可以访问：
    Nullable x;
    x = 4;
    x += 3;
    if (x.HasValue)
    {
      int y = x.Value;
    }
    x = null;
因为可空类型使用得非常频繁，所以C#有一种特殊的语法，它用于定义可空类型的
变量。定义这类变量时，不使用泛型结构的语法，而使用“？”运算符。在下面的例子中，
变量x1和x2都是可空的int类型的实例：
    Nullable x1;
    int? x2;
可空类型可以与null和数字比较，如上所示。这里，x的值与null比较，如果x不是
null，它就与小于0的值比较：
    int? x = GetNullableType();
    if (x == null)
    {
      WriteLine("x is null");
    }
    else if (x 是如何定义的之后，下面就使用可空类型。可空类型还可以与算
术运算符一起使用。变量x3是变量x1和x2的和。如果这两个可空变量中任何一个的值是
null，它们的和就是null。
    int? x1 = GetNullableType();
    int? x2 = GetNullableType();
    int? x3 = x1 + x2;
  注意： 这里调用的GetNullableType（）方法只是一个占位符，它对于任何方
法都返回一个可空的int。为了进行测试，简单起见，可以使实现的
GetNullableType（）返回null或返回任意整数。
非可空类型可以转换为可空类型。从非可空类型转换为可空类型时，在不需要强制类
型转换的地方可以进行隐式转换。这种转换总是成功的：
    int y1 = 4;
    int? x1 = y1;
但从可空类型转换为非可空类型可能会失败。如果可空类型的值是null，并且把null
值赋予非可空类型，就会抛出InvalidOperationException类型的异常。这就是需要类型强制
转换运算符进行显式转换的原因：
    int? x1 = GetNullableType();
    int y1 = (int)x1;
如果不进行显式类型转换，还可以使用合并运算符从可空类型转换为非可空类型。合
并运算符的语法是“？？”，为转换定义了一个默认值，以防可空类型的值是null。这里，
如果x1是null, y1的值就是0。
    int? x1 = GetNullableType();
    int y1 = x1 ? ? 0;
6.6 泛型方法
除了定义泛型类之外，还可以定义泛型方法。在泛型方法中，泛型类型用方法声明来
定义。泛型方法可以在非泛型类中定义。
Swap（）方法把T定义为泛型类型，该泛型类型用于两个参数和一个变量temp：
    void Swap(ref T x, ref T y)
    {
      T temp;
      temp = x;
      x = y;
      y = temp;
    }
把泛型类型赋予方法调用，就可以调用泛型方法：
    int i = 4;
    int j = 5;
    Swap(ref i, ref j);
但是，因为C#编译器会通过调用Swap（）方法来获取参数的类型，所以不需要把泛
型类型赋予方法调用。泛型方法可以像非泛型方法那样调用：
    int i = 4;
    int j = 5;
    Swap(ref i, ref j);
6.6.1 泛型方法示例
下面的例子使用泛型方法累加集合中的所有元素。为了说明泛型方法的功能，下面使
用包含Name和Balance属性的Account类（代码文件GenericMethods/Account.cs）：
  注意： 在.NET Core中，这个示例需要引用NuGet包System. Collections。
    public class Account
    {
      public string Name { get; }
      public decimal Balance { get; private set; }
      public Account(string name, Decimal balance)
      {
        Name = name;
        Balance = balance;
      }
    }
其中应累加余额的所有账户操作都添加到List类型的账户列表中（代码文
件GenericMethods/Program.cs）：
    var accounts = new List()
    {
      new Account("Christian", 1500),
      new Account("Stephanie", 2200),
      new Account("Angela", 1800),
      new Account("Matthias", 2400)
    };
累加所有Account对象的传统方式是用foreach语句遍历所有的Account对象，如下所
示。foreach语句使用IEnumerable接口迭代集合的元素，所以AccumulateSimple（）方法的
参数是IEnumerable类型。foreach语句处理实现IEnumerable接口的每个对象。这样，