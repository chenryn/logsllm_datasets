# Winnti is Coming - Evolution after Prosecution

## TeamT5

### Presenters
- **Peter Syu**  
  *Title: 社长, Twice 推广社*  
  *Role: 工程师*  
  *UCCU ID: 001*
- **Tom Lai**  
  *Title: 研究员*  
  *Role: 工程师*  
  *UCCU ID: 456*
- **Aragorn Tseng**  
  *Title: 研究员*  
  *Role: 首席分析师*  
  *UCCU ID: Charles Li*

## Agenda
1. 初始访问
2. Cobalt Strike 加载器
3. APT41 的后门
4. C2 隐藏技术
5. 与其他操作的关系
6. 总结

## Who is Winnti?
- **Winnti = APT41?**
- **APT41 = Chengdu404?**
- APT41 可以根据不同的技术和目标分为多个小组。
- 目标范围广泛，怀疑中国国家安全部（MSS）整合了资源、攻击技术和工具，使这个组织看起来更大。

### APT 组织整合
- **APT41**
- **APT10**
- **APT17**
- **Fishmaster/TAG-22**
- **GroupCC**
- **Amoeba**
- **未知组**

### 目标国家与行业
- **目标国家**: 最后部分讨论
- **目标行业**:
  - 高科技
  - 医疗保健
  - 航空公司
  - 金融
  - 研究
  - 政府
  - 媒体
  - 游戏
  - 电信
  - 能源
  - 教育
  - 制造业

## 初始访问
- **CVE-2021-34527 (PrintNightmare)**
- **CVE-2021-26855 (ProxyLogon)**
- **SQL 漏洞**
- **phpMyAdmin 漏洞**
- **Web 漏洞**
- **Flash 安装程序**
- **伪造图标**

## Webshell 访问
- **探针插件**
- **Webshell 上传**
- **Catalina 日志**
- **Shodan 扫描**

### 使用情况
- **未使用的探针套件**: 12, 67%
- **使用的探针套件**: 6, 33%

## 后渗透
### 新的 TTPs
- **证书绕过**
- **DLL 中空技术**
- **InstallUtil**
- **早鸟代码注入**
- **CDN 服务和 Cloudflare Worker**
- **一些新的后门**

### Cobalt Strike 分发时间线
- **2020.7**: ChaCha20 shellcode 或加载器（Chatloader）出现，用于提取 Cobalt Strike Beacon
- **2020.11**: 在 Cobalt Strike 中使用 CDN 服务，特别是 DNS Beacon
- **2021.1**: 使用 Cloudflare Worker 隐藏真实的 C2 IP
- **2021.3**: 在 Chatloader 中使用证书绕过和 DLL 中空技术
- **2021.4**: 使用多个 .NET 加载器并滥用 InstallUtil 加载 Cobalt Strike
- **2021.6**: 使用 funnyswitch 加载 Cobalt Strike 并使用早鸟代码注入技术

### 证书绕过 (MS13-098)
- **有效证书**
- **Shellcode**

### Chatloader
- **使用 ChaCha20 算法解密负载**
- **大部分负载是 Cobalt Strike，但也看到其他后门**
- **ETW 绕过**
- **DLL 中空**

#### Chatloader 配置示例
- **配置 Nonce (12 字节)**: 0xb5 0x5e 0x14 0x8d 0x46 0xe1 0x2e 0x97 0x5d 0x3d 0x75 0xf1
- **配置 Nonce (base64)**: tV4UjUbhLpddPXXx
- **配置 CRC32**: 0xe 0xdc 0xac 0xad
- **配置 CRC32 (base64)**: DtysrQ==
- **密文长度**: 48
- **配置 Key**: 0xa2 0x42 0x99 0x5 0x5f 0x1f 0xc 0x14 0xcb 0xdd 0xb 0x1 0xdf 0xa6 0x4c 0x34 0xf5 0xfd 0x3 0x3c 0xa7 0xf1 0xaf 0x30 0xa0 0xc7 0x5c 0x57 0x35 0x9d 0x41 0xe0
- **配置 Key (base64)**: okKZBV8fDBTL3QsB36ZMNPX9Azyn8a8woMdcVzWdQeA=

### DLL 中空
- **签名文件**
- **DLL 劫持**
- **libEGL.dll**
- **wlbsctrl.dll**
- **在 System32 中找到目标 DLL**
- **Kernel32.dll**
- **User32.dll**
- **aaclient.dll**
- **DLL 中空: 在 aaclinet.dll 的 .text 段中注入恶意软件负载**
- **Synchost.exe**
- **创建进程**
- **Synchost.exe 的模块**
- **读取文件**
- **加载模块**
- **选择 aaclient.dll**
- **DLL 中空**

### .NET 加载器
- **InstallUtil.exe**
- **KBDHE475.dll**
- **kstvmutil.ax**
- **payload**
  1. **System.Configuration.Install.Installer**
  2. **读取文件并通过 AES 解密**
  3. **通过 Process Hollowing 注入 payload**
  - **sdiagnhost.exe**
  - **Payload: Cobalt Strike 或其他后门（例如 Natwalk）**
  - **使用 InstallUtil 绕过应用程序白名单限制**
  - **.NET 加载器（通过 ConfuserEx 混淆）**

### .NET 加载器结构
- **偏移量 38(h) – 47**: md5 哈希值
- **偏移量 48-53**: SHA256 作为 AES 密钥
- **偏移量 54-67**: MD5 作为 AES IV
- **偏移量 68 - end**: 用 AES(ECB) 加密的负载
- **偏移量 0-3**: 必须为 1F A4 3A AC
- **偏移量 4-7**: 负载长度
- **偏移量 8 - end**: 恶意软件负载

### Funnyswitch 加载器
- **名称来自 ptsecurity*，将在内存中注入 .NET 后门 funny.dll**
- **发现新版本加载器 (mcvsocfg.dll)，可能针对 McAfee 用户**
- **路径**: E:\VS2019_Project\while_dll_ms\whilte\x64\Release\macoffe.pdb
- **另一个路径**: E:\\VS2019_Project\\prewhiltedll\\x64\\Release\\prewhiltedll.pdb
- **发现新加载器注入 Cobalt Strike 和 funny.dll**

### Charlotte 加载器
- **简单的 .Net 加载器**
- **Charlotte 加载器**
- **加载**
- **注入**
- **Cobaltstrike**
- **check.dll (MD5: 8c5a174bbcd93e988bcb8681b542708f)**

### 早鸟代码注入加载器
- **使用开源 Alaris 加载器* 使用 syscalls 运行 Cobalt Strike**
- **将 PNG 资源作为负载并用 RC4 解密**
- **使用 Detour 钩住 launcher 的 Freelibrary API**
- **使用早鸟代码注入技术**
- **NtTestAlert**
- **KiUserApcDispatcher**

### 新版本加载器
- **msdtc.exe**
- **oci.dll**
- **获取计算机名 (SHA1) 作为 RC4 密钥解密负载**
- **Cobalt Strike (绑定 TCP)**
- **Fishmaster 加载器**
  - **PDB 路径**: C:\Users\test\Desktop\fishmaster\x64\Release\fishmaster.pdb
  - **某些字符串包含 "Bidenhappyhappyhappy"**
  - **两种方式解密负载**
    - **Xor 与硬编码密钥，例如 "Bsiq_gsus" 或 "miat_mg"**
    - **使用 UUIDShellcode 和回调函数**

### Fishmaster 操作 - TAG-22
- **由 GroupCC 使用的加载器**

### 签名文件
- **Temp.tmp**
- **winprint.exe**
- **rundll32.exe**
  1. **读取文件**
  2. **创建 rundll32.exe 进程**
  3. **注入 shellcode 到 rundll32**
  4. **再次读取文件**
  5. **解码 Cobalt Strike**
- **winprint.exe 首先从负载文件中读取一段 shellcode，然后打开 rundll32.exe，调用 RtlCreateUserThread 在 rundll32.exe 中运行第一阶段 shellcode。**
- **第一阶段 shellcode 将再次读取负载文件，使用 VirtualAlloc 在 rundll32.exe 中分配内存，并注入和解密负载，最后调用 EtwpCreateEtwThread 将线程移动到 Cobalt Strike 的起点。**

### APT41 在 2020-2021 年的后门
- **Natwalk**
- **HIGHNOON**
- **Funnydll**
- **Shadowpad**
- **Cobalt Strike**
- **PlugX**
- **Spyder**
- **Winnti**
- **Linux RAT**

### Funnydll
- **配置**
- **mcvsocfg.dll**
- **Stage_1.shellcode**
- **Funny.dll**
- **Base64+AES 解密**
- **JS 模块**

### Shadowpad
- **APT41 在 2021 年使用了新的 Shadowpad 构建器，该构建器在 Ptsecurity 的报告* 中提到，使用了新的混淆方法和配置解密方法**
- **我们认为这个构建器是一个共享工具，因为我们还看到 Naikon 团队使用了这个构建器**
- **加载器的 MD5**: 3520e591065d3174999cc254e6f3dbf5

### 解密字符串
```python
def decrypt_string(src):
    key = struct.unpack("<H", bytearray(src[0:2]))[0]
    data_len = struct.unpack("<H", bytearray(src[2:4]))[0]
    data = src[4:4+data_len]
    result = ""
    i = 0
    while i < data_len:
        tmp = key
        tmp += tmp
        key = key + ((tmp * 8) & 0xFFFFFFFF) + 0x107E666D
        result += chr(((HIBYTE(key) + BYTE2(key) + BYTE1(key) + LOBYTE(key)) ^ ord(data[i])) & 0xFF)
        i += 1
    return result
```

希望这些优化后的文本能更清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！