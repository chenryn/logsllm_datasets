最  简
简  函
函  数
数  
返回预定常量的函数，已经算得上是最简单的函数了。 
本章围绕下列函数进行演示： 
指令清单 2.1  C/C++ 代码 
int f()  
{ 
         return 123; 
}; 
2.1 x86 
在开启优化功能之后，GCC 编译器产生的汇编指令，如下所示。 
指令清单 2.2  Optimizing GCC/MSVC（汇编输出） 
f: 
        mov   eax, 123 
        ret 
MSVC 编译的程序和上述指令完全一致。 
这个函数仅由两条指令构成：第一条指令把数值 123 存放在EAX寄存器里；根据函数调用约定
①
2.2 ARM 
，后
面一条指令会把EAX的值当作返回值传递给调用者函数，而调用者函数（caller）会从EAX寄存器里取值，
把它当作返回结果。 
ARM 模式是什么情况？ 
指令清单 2.3  Optimizing Keil 6/2013 (ARM 模式) 
f PROC 
         MOV    r0,#0x7b ; 123 
         BX     lr  
         ENDP 
ARM 程序使用 R0 寄存器传递函数返回值，所以指令把数值 123 赋值给 R0。 
ARM 程序使用 LR 寄存器（Link Register）存储函数结束之后的返回地址（RA/ Return Address）。x86
程序使用“栈”结构存储上述返回地址。可见，BX LR 指令的作用是跳转到返回地址，即返回到调用者函
数，然后继续执行调用体 caller 的后续指令。 
如您所见，x86 和 ARM 指令集的 MOV 指令确实和对应单词“move”没有什么瓜葛。它的作用是复
制（copy），而非移动（move）。 
2.3 MIPS 
在 MIPS 指令里，寄存器有两种命名方式。一种是以数字命名（$0~$31），另一种则是以伪名称（pseudoname）
① Calling Convention，又称为函数的调用协定、调用规范。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
6 
逆向工程权威指南（上册） 
命名（$V0~VA0，依此类推）。在 GCC 编译器生成的汇编指令中，寄存器都采用数字方式命名。 
指令清单 2.4  Optimizing GCC 4.4.5（汇编输出） 
  j       $31 
  li      $2,123          # 0x7b 
然而 IDA 则会显示寄存器的伪名称。 
指令清单 2.5  Optimizing GCC 4.4.5（IDA） 
        jr      $ra 
        li      $v0, 0x7B 
根据伪名称和寄存器数字编号的关系可知，存储函数返回值的寄存器都是$2（即$V0）。此处 LI 指令
是英文词组“Load Immediate（加载立即数）”的缩写。 
其中，J 和 JR 指令都属于跳转指令，它们把执行流递交给调用者函数，跳转到$31 即$RA 寄存器中的
地址。这个寄存器相当于的 ARM 平台的 LR 寄存器。 
此外，为什么赋值指令 LI 和转移指令 J/JR 的位置反过来了？这属于 RISC 精简指令集的特性之一——
分支（转移）指令延迟槽 (Branch delay slot)的现象。简单地说，不管分支（转移）发生与否，位于分支指
令后面的一条指令（在延时槽里的指令），总是被先于分支指令提交。这是 RISC 精简指令集的一种特例，
我们不必在此处深究。总之，转移指令后面的这条赋值指令实际上是在转移指令之前运行的。 
MIPS 指令集与寄存器名称 
习惯上，MIPS 领域中的寄存器名称和指令名称都使用小写字母书写。但是为了在排版风格上与其他
指令集架构的程序保持一致，本书采用大写字母进行排版。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 33 章
章    HHeelllloo，
，wwoorrlldd！
！  
现在，我们开始演示《C语言编程》一书
①
3.1 x86 
中著名的程序： 
#include  
int main()  
{ 
    printf("hello, world\n"); 
    return 0; 
}; 
3.1.1 MSVC 
接下来我们将通过下述指令，使用 MSVC 2010 编译下面这个程序。 
cl 1.cpp /Fa1.asm 
其中/Fa 选项将使编译器生成汇编指令清单文件（assembly listing file），并指定汇编列表文件的文件名
称是 1.asm。 
上述命令生成的 1.asm 内容如下。 
指令清单 3.1  MSVC 2010 
CONST   SEGMENT 
$SG3830 DB       'hello, world', 0AH, 00H 
CONST   ENDS 
PUBLIC  _main 
EXTRN   _printf:PROC 
; Function compile flags: /Odtp 
_TEXT   SEGMENT 
_main   PROC 
         push    ebp 
         mov     ebp, esp 
         push    OFFSET $SG3830 
         call    _printf 
         add     esp, 4 
         xor     eax, eax 
         pop     ebp 
         ret     0 
_main   ENDP 
_TEXT   ENDS 
MSVC 生成的汇编清单文件都采用了 Intel 语体。汇编语言存在两种主流语体，即 Intel 语体和 AT&T
语体。本书将在 3.1.3 节中讨论它们之间的区别。 
在生成 1.asm 之后，编译器会生成 1.obj 再将之链接为可执行文件 1.exe。 
在 hello world 这个例子中，文件分为两个代码段，即 CONST 和_TEXT 段，它们分别代表数据段和代码段。
在本例中，C/C++程序为字符串常量“Hello，world”分配了一个指针（const char[]），只是在代码中这个指针的名
① Brian W. Kernighan. The C Programming Language. Ed. by Dennis M. Ritchie. 2nd. Prentice Hall Professional Tech- nical Reference, 
1988. ISBN: 0131103709。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
8 
逆向工程权威指南（上册） 
称并不明显（参照下列 Bjarne Stroustrup. The C++ Programming Language, 4th Edition. 2013 的第 176 页，7.3.2 节）。 
接下来，编译器进行了自己的处理，并在内部把字符串常量命名为$SG3830。 
因此，上述程序的源代码等效于： 
#include  
const char *$SG3830[]="hello, world\n"; 
int main()  
{ 
    printf($SG3830); 
    return 0;  
}  
在回顾 1.asm 文件时，我们会发现编译器在字符串常量的尾部添加了十六进制的数字 0，即 00h。依据
C/C++字符串的标准规范，编译器要为这个字符串常量添加结束标志（即数值为零的单个字节）。有关标准
请参照本书的 57.1.1 节。 
在代码段_TEXT 只有 1 个函数，即主函数 main()。在汇编指令清单里，主函数的函数体有标志性的函
数序言（function prologue）和函数尾声（function epilogue）。实际上所有的函数都有这样的序言和尾声。
在函数的序言标志之后，我们能够看到调用 printf()函数的指令: CALL _printf。 
通过 PUSH 指令，程序把字符串的指针推送入栈。这样，printf()函数就可以调用栈里的指针，即字符
串“hello, world!”的地址。 
在 printf()函数结束以后，程序的控制流会返回到 main()函数之中。此时，字符串地址（即指针）仍残
留在数据栈之中。这个时候就需要调整栈指针（ESP 寄存器里的值）来释放这个指针。 
下一条语句是“add ESP，4”，把 ESP 寄存器（栈指针/Stack Pointer）里的数值加 4。 
为什么要加上“4”？这是因为 x86 平台的内存地址使用 32 位（即 4 字节）数据描述。同理，在 x64
系统上释放这个指针时，ESP 就要加上 8。 
因此，这条指令可以理解为“POP某寄存器”。只是本例的指令直接舍弃了栈里的数据而POP指令还要
把寄存器里的值存储到既定寄存器
①
顾名思义，XOR就是“异或” 
。 
某些编译器（如 Intel C++编辑器）不会使用 ADD 指令来释放数据栈，它们可能会用 POP ECX 指令。
例如，Oracle RDBMS（由 Intel C++编译器编译）就会用 POP ECX 指令，而不会用 ADD 指令。虽然 POP ECX
命令确实会修改 ECX 寄存器的值，但是它也同样释放了栈空间。 
Intel C++编译器使用 POP ECX 指令的另外一个理由就是，POP ECX 对应的 OPCODE（1 字节 ）比 ADD 
ESP 的 OPCODE（3 字节）要短。 
指令清单 3.2  Oracle RDBMS 10.2 Linux (摘自 app.o) 
.text:0800029A      push    ebx 
.text:0800029B      call    qksfroChild 
.text:080002A0      pop     ecx 
本书将在讨论操作系统的部分详细介绍数据栈。 
在上述 C/C++程序里，printf()函数结束之后，main()函数会返回 0（函数正常退出的返回码）。即 main()
函数的运算结果是 0。 
这个返回值是由指令“XOR EAX, EAX”计算出来的。 
②
也有一些编译器会使用“SUB EAX,EAX”指令把 EAX 寄存器置零，其中 SUB 代表减法运算。总之，
。编译器通常采用异或运算指令，而不会使用“MOV EAX，0”指令。
主要是因为异或运算的opcode较短（2 字节:5 字节）。 
① 但是 CPU 标志位会发生变化。 
② 参见 http://en.wikipedia.org/wiki/Exclusive_or。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
9 
main()函数的最后一项任务是使 EAX 的值为零。 
汇编列表中最后的操作指令是RET，将控制权交给调用程序。通常它起到的作用就是将控制权交给操
作系统，这部分功能由C/C++的CRT
①
3.1.2 GCC 
实现。 
接下来，我们使用 GCC 4.4.1 编译器编译这个 hello world 程序。 
gcc 1.c -o 1 
我们使用反汇编工具 IDA（Interactive Disassembler）查看 main()函数的具体情况。IDA 所输出的汇编
指令的格式，与 MSVC 生成的汇编指令的格式相同，它们都采用 Intel 语体显示汇编指令。 
此外，如果要让 GCC 编译器生成 Intel 语体的汇编列表文件，可以使用 GCC 的选项“-S-masm=intel”。 
指令清单 3.3  在 IDA 中观察到的汇编指令 
Main    
proc near 
var_10    
= dword ptr -10h 
push    ebp 
mov     ebp, esp 
and     esp, 0FFFFFFF0h 
sub     esp, 10h 
mov     eax, offset aHelloWorld ; "hello, world\n" 
mov     [esp+10h+var_10], eax 
call    _printf 
mov     eax, 0 
leave 
retn 
main     
endp 
GCC 生成的汇编指令，与 MSVC 生成的结果基本相同。它首先把“hello, world”字符串在数据段的地
址（指针）存储到 EAX 寄存器里，然后再把它存储在数据栈里。 
其中值得注意的还有开场部分的“AND ESP, 0FFFFFFF0h”指令。它令栈地址（ESP的值）向 16 字节
边界对齐（成为 16 的整数倍），属于初始化的指令。如果地址位没有对齐，那么CPU可能需要访问两次内
存才能获得栈内数据。虽然在 8 字节边界处对齐就可以满足 32 位x86 CPU和 64 位x64 CPU的要求，但是主
流编译器的编译规则规定“程序访问的地址必须向 16 字节对齐（被 16 整除）”。人们还是为了提高指令的
执行效率而特意拟定了这条编译规范。
②
3.1.3 GCC:AT&T 语体 
“SUB ESP，10h”将在栈中分配 0x10 bytes，即 16 字节。我们在后文看到，程序只会用到 4 字节空间。
但是因为编译器对栈地址（ESP）进行了 16 字节对齐，所以每次都会分配 16 字节的空间。 
而后，程序将字符串地址（指针的值）直接写入到数据栈。此处，GCC 使用的是 MOV 指令；而 MSVC
生成的是 PUSH 指令。其中 var_10 是局部变量，用来向后面的 printf()函数传递参数。 
随即，程序调用 printf()函数。 
GCC 和 MSVC 不同，除非人工指定优化选项，否则它会生成与源代码直接对应的“MOV EAX, 0”指
令。但是，我们已经知道 MOV 指令的 opcode 肯定要比 XOR 指令的 opcode 长。 
最后一条 LEAVE 指令，等效于“MOV ESP, EBP”和“POP EBP”两条指令。可见，这个指令调整了
数据栈指针 ESP，并将 EBP 的数值恢复到调用这个函数之前的初始状态。毕竟，程序段在开始部分就对
EBP 和 EBP 进行了操作（MOVEBP, ESP/AND ESP, ...），所以函数要在退出之前恢复这些寄存器的值。 
AT&T 语体同样是汇编语言的显示风格。这种语体在 UNIX 之中较为常见。 
① C runtime library:sec:CRT，参见本书 68.1 节。 
② 参考 Wikipedia：Data structure alignment http://en.wikipedia.org/wiki/Data_structure_alignment。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
10 
逆向工程权威指南（上册） 
接下来，我们使用 GCC4.7.3 编译如下所示的源程序。 
指令清单 3.4  使用 GCC 4.7.3 编译源程序 
gcc –S 1_1.c 
上述指令将会得到下述文件。 
指令清单 3.5  GCC 4.7.3 生成的汇编指令 
        .file   "1_1.c" 
        .section       .rodata 
.LC0: 
        .string  "hello, world\n" 
        .text 
        .globl    main 
        .type     main, @function 
main:  
.LFB0: 
        .cfi_startproc 
        pushl    %ebp 
        .cfi_def_cfa_offset 8 
        .cfi_offset 5, -8 
        movl     %esp, %ebp 
        .cfi_def_cfa_register 5 
        andl     $-16, %esp 
        subl     $16, %esp 
        movl     $.LC0, (%esp) 
        call     printf 
        movl     $0, %eax 
        leave 
        .cfi_restore 5 
        .cfi_def_cfa 4, 4 
        ret 
        .cfi_endproc 
.LFE0: 
        .size   main, .-main 
        .ident  "GCC: (Ubuntu/Linaro 4.7.3-1ubuntu1) 4.7.3" 
        .section        .note.GNU-stack,"",@progbits 
在上述代码里，由小数点开头的指令就是宏。这种形式的汇编语体大量使用汇编宏，可读性很差。为了便于
演示，我们将其中字符串以外的宏忽略不计（也可以启用 GCC 的编译选项-fno-asynchronous-unwind-tables，直接
预处理为没有 cfi 宏的汇编指令），将会得到如下指令。 
指令清单 3.6  GCC 4.7.3 生成的指令 
.LC0: 
        .string "hello, world\n" 
main: 
        pushl   %ebp 
        movl    %esp, %ebp 
        andl    $-16, %esp 
        subl    $16, %esp 
        movl    $.LC0, (%esp) 
        call    printf 
        movl    $0, %eax 
        leave 
        ret 
在继续解读这个代码之前，我们先介绍一下 Intel 语体和 AT&T 语体的区别。 
 运算表达式（operands，即运算单元）的书写顺序相反。 
Intel 格式：。 
AT&T 格式：。 
如果您认为 Intel 语体的指令使用等号（＝）赋值，那么您可以认为 AT&T 语法结构使用右箭头（→）
进行赋值。应当说明的是，这两种格式里，部分 C 标准函数的运算单元的书写格式确实是相同的，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
11 
例如 memcpy()、strcpy()。 
 AT&T 语体中，在寄存器名称之前使用百分号（%）标记，在立即数之前使用美元符号（$）标记。
AT&T 语体使用圆括号，而 Intel 语体则使用方括号。 
 AT&T 语体里，每个运算操作符都需要声明操作数据的类型： 
－9－quad（64 位） 
－l 指代 32 位 long 型数据。 
－w 指代 16 位 word 型数据。 
－b 指代 8 位 byte 型数据。 
 其他区别请参考 Sun 公司发布的《x86 Assembly Language Reference Manual》。 
现在再来阅读 hello world 的 AT&T 语体指令，就会发现它和 IDA 里看到的指令没有实质区别。有些人
可能注意到，用于数据对齐的 0FFFFFFF0h 在这里变成了十进制的$-16——把它们按照 32byte 型数据进行
书写后，就会发现两者完全一致。 
此外，在退出 main()时,处理 EAX 寄存器的指令是 MOV 指令而不是 XOR 指令。MOV 的作用是给寄
存器赋值（load）。某些硬件框架的指令集里有更为直观的“LOAD”“STORE”之类的指令。 
3.2 x86-64 
3.2.1 MSVC-x86-64 
若用 64 位 MSVC 编译上述程序，则会得到下述指令。 
指令清单 3.7  MSVC 2012 x64 
$SG2989  DB      'hello, world', 00H 
main     PROC 
         sub     rsp, 40 
         lea     rcx, OFFSET FLAT:$SG2989 
         call    printf 
         xor     eax, eax 
         add     rsp, 40 
         ret     0 
main     ENDP 
在 x86-64 框架的 CPU 里，所有的物理寄存器都被扩展为 64 位寄存器。程序可通过 R-字头的名称直接调用整
个 64 位寄存器。为了尽可能充分地利用寄存器、减少访问内存数据的次数，编译器会充分利用寄存器传递函数参
数（请参见 64.3 节的 fastcall 约定）。也就是说，编译器会优先使用寄存器传递部分参数，再利用内存（数据栈）
传递其余的参数。Win64 的程序还会使用 RCX、RDX、R8、R9 这 4 个寄存器来存放函数参数。我们稍后就会看
到这种情况：printf()使用 RCX 寄存器传递参数，而没有像 32 位程序那样使用栈传递数据。 
在 x86-64 硬件平台上，寄存器和指针都是 64 位的，存储于 R-字头的寄存器里。但是出于兼容性的考
虑，64 位寄存器的低 32 位，也要能够担当 32 位寄存器的角色，才能运行 32 位程序。 
在 64 位 x86 兼容的 CPU 中，RAX/EAX/AX/AL 的对应关系如下。 
7th
（字节号） 
6th 
5th 
4th 
3rd 
2nd 
1st 
0th 
RAXx64 