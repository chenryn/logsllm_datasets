{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 70, 70, 70, 70}},
{0, {42, 70, 70, 70, 70, 70, 70, 70}},
{0, {43, 70, 70, 70, 70, 70, 70, 70}},
{0, {44, 70, 70, 70, 70, 70, 70, 70}},
{0, {45, 70, 70, 70, 70, 70, 70, 70}},
{0, {46, 70, 70, 70, 70, 70, 70, 70}},
{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 71, 71, 71, 71}},
{0, {42, 71, 72, 72, 72, 72, 64, 0}},
};
#else
struct canx {
  uint16_t sid;
  unsigned char data[8];
};
const canx cans[] PROGMEM = {
{1910, {18, 118, 48, 62, 65, 59, 66, 66}},
{0, {33, 0, 76, 74, 19, 55, 0, 141}},
{0, {34, 145, 33, 9, 73, 73, 0, 76}},
{0, {35, 70, 74, 74, 74, 74, 0, 78}},
{0, {36, 143, 67, 67, 67, 67, 67, 67}},
{0, {37, 67, 67, 67, 67, 67, 67, 67}},
{0, {38, 67, 67, 67, 67, 67, 67, 67}},
{0, {39, 67, 67, 67, 67, 67, 67, 67}},
{0, {40, 67, 67, 67, 67, 67, 67, 67}},
{0, {41, 67, 67, 1, 68, 68, 1, 69}},
{0, {42, 69, 49, 4, 50, 43, 110, 255}},
{0, {43, 255, 255, 255, 255, 255, 255, 255}},
{0, {44, 255, 255, 255, 255, 255, 255, 255}},
{0, {45, 255, 255, 255, 255, 255, 255, 1}},
{0, {46, 0, 0, 0, 0, 0, 0, 0}},
{0, {47, 0, 0, 0, 0, 0, 0, 0}},
{0, {32, 0, 0, 0, 0, 0, 0, 0}},
{0, {33, 0, 0, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 70, 70, 70, 70}},
{0, {42, 70, 70, 70, 70, 70, 70, 70}},
{0, {43, 70, 70, 70, 70, 70, 70, 70}},
{0, {44, 70, 70, 70, 70, 70, 70, 70}},
{0, {45, 70, 70, 70, 70, 70, 70, 70}},
{0, {46, 70, 70, 70, 70, 70, 70, 70}},
{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 70, 70, 70, 70}},
{0, {42, 70, 70, 70, 70, 70, 70, 70}},
{0, {43, 70, 70, 70, 70, 70, 70, 70}},
{0, {44, 70, 70, 70, 70, 70, 70, 70}},
{0, {45, 70, 70, 70, 70, 70, 70, 70}},
{0, {46, 70, 70, 70, 70, 70, 70, 70}},
{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 70, 70, 70, 70}},
{0, {42, 70, 70, 70, 70, 70, 70, 70}},
{0, {43, 70, 70, 70, 70, 70, 70, 70}},
{0, {44, 70, 70, 70, 70, 70, 70, 70}},
{0, {45, 70, 70, 70, 70, 70, 70, 70}},
{0, {46, 70, 70, 70, 70, 70, 70, 70}},
{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 70, 70, 70, 70}},
{0, {42, 70, 70, 70, 70, 70, 70, 70}},
{0, {43, 70, 70, 70, 70, 70, 70, 70}},
{0, {44, 70, 70, 70, 70, 70, 70, 70}},
{0, {45, 70, 70, 70, 70, 70, 70, 70}},
{0, {46, 70, 70, 70, 70, 70, 70, 70}},
{0, {47, 70, 70, 70, 70, 70, 70, 70}},
{0, {32, 70, 70, 70, 70, 70, 70, 70}},
{0, {33, 70, 70, 70, 70, 70, 70, 70}},
{0, {34, 70, 70, 70, 70, 70, 70, 70}},
{0, {35, 70, 70, 70, 70, 70, 70, 70}},
{0, {36, 70, 70, 70, 70, 70, 70, 70}},
{0, {37, 70, 70, 70, 70, 70, 70, 70}},
{0, {38, 70, 70, 70, 70, 70, 70, 70}},
{0, {39, 70, 70, 70, 70, 70, 70, 70}},
{0, {40, 70, 70, 70, 70, 70, 70, 70}},
{0, {41, 70, 70, 70, 71, 71, 71, 71}},
{0, {42, 71, 72, 72, 72, 72, 64, 0}},
};
#endif
long long N = 0xa59068ffLL;
long long p = 39971LL, q = 69493LL;
long long e = 31337;
long long phi = 2777595240;
long long d = 3467628713;
long long modinv(long long e, long long phi) {
	long long d = 0, x1 = 0, x2 = 1, y1 = 1, temp_phi = phi;
	while (e > 0) {
		long long temp1 = temp_phi / e;
		long long temp2 = temp_phi - temp1 * e;
		temp_phi = e;
		e = temp2;
		long long x = x2 - temp1 * x1;
		long long y = d - temp1 * y1;
		x2 = x1;
		x1 = x;
		d = y1;
		y1 = y;
	}
	return d + phi;
}
long long modpow(long long a, long long n, long long mod) {
	if (n == 0) return 1;
	long long half = modpow(a, n/2, mod);
	half *= half;
	half %= mod;
	if (n % 2) {
		half *= a;
		half %= mod;
	}
	return half;
}
unsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};
int which = 0;
unsigned char len = 0;
unsigned char buf[8];
void setup()
{