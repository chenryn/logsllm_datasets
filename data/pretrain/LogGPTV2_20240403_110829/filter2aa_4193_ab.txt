  if (buf1 == (undefined8 *)0x0) {
    free((void *)0x0);
  }
  if (hKey != 0) {
    CryptDestroyKey(hKey);
  }
  if (input_file_handle != (HANDLE *)0x0) {
    CloseHandle(*input_file_handle);
    free(input_file_handle);
  }
  pcVar2 = (char *)FUN_00401f78();
  return pcVar2;
}
```
It starts by calling WinAPI functions to setup the crypto context. It then:
1. Allocates a buffer of length 0xE
2. Copies the machine's MAC address into the buffer
3. Calls the `wmic bios get serialnumber` command to read the BIOS serial number
4. Copies the first four bytes to the buffer
5. Calls the `wmic diskdrive get serialnumber` command to read the disk drive's serial number
6. Copies the first four bytes of the result to the buffer
7. Uses the buffer to derive key material for AES_256 encryption
8. Encrypts the buffer with AES_256
9. Returns the encrypted buffer and size
Since the function uses standard AES-256 in order to encrypt the buffer, it looks like we won't be able to find any shortcuts when attempting to decrypt it - We'll have to reconstruct the same key and use AES-256 decryption.
Back to `encrypt` again to see what happens with the result:
```c
  if (encrypted_buf != (char *)0x0) {
    puVar3 = (ushort *)execute_command(L"wmic diskdrive get serialnumber");
    if (puVar3 == (ushort *)0x0) {
      diskdrive_serial = (undefined4 *)0x0;
    }
    else {
      diskdrive_serial = extract_serial(puVar3);
      free(puVar3);
      if (diskdrive_serial != (undefined4 *)0x0) {
        dd_serial_dword = lchar_to_dword((ushort *)diskdrive_serial);
        buffer = (undefined4 *)allocate(encrypted_size + 2992);
        if (buffer != (undefined4 *)0x0) {
          *buffer = 0x531b008a;
          puVar3 = (ushort *)execute_command(L"wmic bios get serialnumber");
          if (puVar3 != (ushort *)0x0) {
            puVar4 = extract_serial(puVar3);
            free(puVar3);
            if (puVar4 != (undefined4 *)0x0) {
              bios_serial_dword = lchar_to_dword((ushort *)puVar4);
              garble_buf(garble_buf,bios_serial_dword);
              src_offset = 0;
              limit = 625;
              counter = 0;
              uVar8 = (int)encrypted_size / 0x2e3 + ((int)encrypted_size >> 0x1f);
              p_current_src = garble_buf;
              p_current_dest = garble_buf_copy;
              while (limit != 0) {
                limit = limit + -1;
                *p_current_dest = *p_current_src;
                p_current_src = p_current_src + 1;
                p_current_dest = p_current_dest + 1;
              }
              iVar5 = (uVar8 >> 0x1f) + uVar8;
              uVar8 = iVar5 + 1;
                    // copy padded md5 starting from buf[4] (8 dwords)
              iVar7 = 8;
              p_current_padded_md5 = padded_md5;
              puVar4 = buffer;
              while (puVar4 = puVar4 + 1, iVar7 != 0) {
                iVar7 = iVar7 + -1;
                *puVar4 = *p_current_padded_md5;
                p_current_padded_md5 = p_current_padded_md5 + 1;
              }
              iVar7 = 0x24;
              iVar5 = encrypted_size + iVar5 * -0x2e3;
              do {
                uVar6 = other_garble(garble_buf_copy);
                *(uint *)(iVar7 + (int)buffer) = uVar6;
                if (counter == iVar5) {
                  uVar8 = uVar8 - 1;
                }
                copy_buffer((undefined8 *)(iVar7 + 4 + (int)buffer),
                            (undefined8 *)(encrypted_buf + src_offset),uVar8);
                sVar1 = encrypted_size;
                counter = counter + 1;
                src_offset = src_offset + uVar8;
                iVar7 = iVar7 + 4 + uVar8;
              } while (counter > 1 ^
           garbled_buf_copy[i + 0x18d] ^
           *(uint *)(&DAT_0041e8c0 + (garbled_buf_copy[i + 1] & 1) * 4);
      i = i + 1;
    }
    while (i > 1 ^
           garbled_buf_copy[i + -0xe3] ^
           *(uint *)(&DAT_0041e8c0 + (garbled_buf_copy[i + 1] & 1) * 4);
      i = i + 1;
    }
    garbled_buf_copy[0x26f] =
         (garbled_buf_copy[0x26f] & 0x80000000 | *garbled_buf_copy & 0x7fffffff) >> 1 ^
         garbled_buf_copy[0x18c] ^ *(uint *)(&DAT_0041e8c0 + (*garbled_buf_copy & 1) * 4);
    garbled_buf_copy[0x270] = 0;
  }
  uVar1 = garbled_buf_copy[garbled_buf_copy[0x270]];
  garbled_buf_copy[0x270] = garbled_buf_copy[0x270] + 1;
  uVar1 = uVar1 >> 0xb ^ uVar1;
  uVar1 = (uVar1 & 0x13a58ad) > 0x12 ^ uVar1;
}
```
`garble_buf` receives a buffer of size `0x271 * sizeof(uint)` and an initial value (DWORD). It copies the initial value to the first DWORD of the array, and then uses it to fill the rest of the array with a derived value. `buffer[0x270]` is used as an index to the current array member that the function is working on.
`other_garble` takes the product of `garble_buf` and garbles it a bit more. According to the last few lines of the function, it looks like the bit shifting will cause the result to lose information, and therefore it might be impossible to use the result to reconstruct the original value.
Now that we've reviewed the main functionality, we can start our attempt to decrypt the file. The file we've received is called `intel.txt.enc` and is 38,924 bytes long.
It starts with the following content:
![](images/hex_encrypted_xored.png)
The last thing that happens is a XOR operation being applied to the file, so we should start by performing the opposite operation in order to recover the contents before the XOR.
Since the first DWORD in the original buffer is a magic value (`0x531b008a`), we XOR the current value (`0x632B30BA`) with the magic value in order to recover the key used to XOR the file (which happens to be the first four bytes of the disk driver serial number):
```python
>>> hex(0x632B30BA ^ 0x531b008a)
'0x30303030'
```
This is good, since we got a result which looks like ASCII (`chr(0x30) = '0'`).
We can now use this value to un-XOR the complete file:
```python
def readXorInt(f, xor):
    b = f.read(4)
    if not b:
        return None
    res = int.from_bytes(b, byteorder="little")  ^ xor
    return res
with open(output_filename, "rb") as f, open("phase1.bin", "wb") as o:
    dd_serial = readXorInt(f, MAGIC)
    o.write(dd_serial.to_bytes(4, byteorder="little"))
    while True:
        res = readXorInt(f, dd_serial)
        if res is None:
            break
        o.write(res.to_bytes(4, byteorder="little"))
```
The result:
![](images/hex_encrypted.png)
The first 4 bytes are the magic value, and the 32 bytes that follow are the padded MD5:
```
00 09 04 09 0B 04 06 0B 07 03 0E 03 0A 0F 06 0F 05 0A 0F 0C 08 01 09 05 05 03 06 07 02 09 05 0C
```
If we remove the padding, the MD5 is:
```
0949b46b73e3af6f5afc81955367295c
```
We know that the MD5 is composed of `FileName + MAC`, and we know that `FileName` is (probably) `intel.txt`. We'd like to find the MAC address since it's used later on in the encryption key.
We can perform brute force in order to find a 6-byte value where `MD5("intel.txt" + ??????) == 0949b46b73e3af6f5afc81955367295c`, but that might take a while. Let's try to use what we know in order to reduce the search space.
1. We know that the file was encrypted on a machine manufactured by "Or... Po... Ltd." (from the description)
2. We know that MAC addresses are divided into two parts: The first three bytes are a manufacturer ID and the other three bytes are a unique device ID
3. If we can identify the manufacturer, we can reduce the search space to three bytes.
A large list of MAC manufacturers and IDs can be found [here](https://gist.github.com/aallan/b4bb86db86079509e6159810ae9bd3e4).
From that list, two seems to match the "Or... Po..." pattern:
```
8CF813 ORANGE POLSKA
001337 Orient Power Home Network Ltd.
```
Out of the two, the second options seems much more realistic, not only because it ends with "Ltd.", but also because it has the valuable ID of [1337](https://en.wikipedia.org/wiki/Leet).
Now we can brute force the remainder much faster:
```python
mac_prefix = (0x00, 0x13, 0x37)
with open("phase1.bin", "rb") as f:
        readXorInt(f, 0) # Dummy read, we already have the dd_serial
        padded_md5 = bytearray()
        for i in range(4 * 2):
            dword = readXorInt(f, 0)
            padded_md5 += dword.to_bytes(4, byteorder='little')
        padded_md5 = binascii.hexlify(padded_md5)
        assert (padded_md5[::2] == b"0" * 32)
        md5 = padded_md5[1::2]
        print("MD5: {}".format(md5))
        mac = mac_prefix + find_md5(input_filename, mac_prefix, 3, md5)
        mac_hex = binascii.hexlify(bytes(mac))
        print ("MAC Address: {}".format(mac_hex))
```
The result:
```
Disk drive serial: 0x30303030
MD5: b'0949b46b73e3af6f5afc81955367295c'
MAC Address: b'0013378eab66'
```
Another piece of information we can extract is the length of the AES-256 encrypted buffer.
```c
encrypted_size = 0;
encrypted_buf = do_encrypt((LPCWSTR)input_file_name,&encrypted_size);
//...
sVar1 = encrypted_size;
//...
iVar5 = sVar1 + 2988;
*output_len = iVar5;
```
The length of the output file is 2988 bytes larger than the length of the AES-256 input buffer (which is the size of the input file + AES block alignment).
```python
encrypted_length = os.fstat(f.fileno()).st_size - 2988
print ("Length of encrypted message: {}".format(encrypted_length))
```
Now it's time to start to extract the ciphertext, while skipping the garbled DWORDs.
We know that immediately after the padded MD5 we have a garbled DWORD, then a chunk of ciphertext, then another garbled DWORD, a chunk of ciphertext and so on.
The chunk size is calculated as follows:
```c
uVar8 = (int)encrypted_size / 0x2e3 + ((int)encrypted_size >> 0x1f);
//...
iVar5 = (uVar8 >> 0x1f) + uVar8;
uVar8 = iVar5 + 1;
//...
iVar5 = encrypted_size + iVar5 * -0x2e3;
//...
if (counter == iVar5) { // Happens within the copy loop
    uVar8 = uVar8 - 1;
}
```
If we calculate this for our encrypted size, we get:
```python
>>> encrypted_size = 35936
>>> uVar8 = encrypted_size // 0x2e3 + (encrypted_size >> 0x1f)
>>> iVar5 = (uVar8 >> 0x1f) + uVar8
>>> uVar8 = iVar5 + 1
>>> iVar5 = encrypted_size + iVar5 * -0x2e3
>>> uVar8
49
>>> iVar5
464
````
We use this to read the ciphertext:
```python
def get_size_and_decrement_index(encrypted_length):
    size = encrypted_length // 0x2e3 + (encrypted_length >> 0x1f)
    decrement_index = (size >> 0x1f) + size
    size = decrement_index + 1
    decrement_index = encrypted_length + decrement_index * -0x2e3
    return (size, decrement_index)
ciphertext = bytearray()
bytes_read = 0
i = 0
size, decrement_index = get_size_and_decrement_index(encrypted_length)
while bytes_read 
#include 
#include 
#include 
#include 
uint32_t DAT_0041e8c0[] = { 0x00, 0x00, 0x00, 0x00, 0xdf, 0xb0, 0x08, 0x99 };
void garble_buf(uint32_t *buffer, uint32_t initial_value)
{
	*buffer = initial_value;
	buffer[0x270] = 1;
	do {
		buffer[buffer[0x270]] = (buffer + buffer[0x270])[-1] * 0x17b5;
		buffer[0x270] = buffer[0x270] + 1;