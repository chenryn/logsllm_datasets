与`afl-gcc`相同，`afl-as`也在程序入口点设计了一系列的代码检查操作。那么，其主逻辑如下所示：
    gettimeofday(&tv, &tz);
    rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();
    srandom(rand_seed);
    edit_params(argc, argv);
    if (inst_ratio_str) {
        if (sscanf(inst_ratio_str, "%u", &inst_ratio) != 1 || inst_ratio > 100) 
          FATAL("Bad value of AFL_INST_RATIO (must be between 0 and 100)");
    }
    if (getenv(AS_LOOP_ENV_VAR))
        FATAL("Endless loop when calling 'as' (remove '.' from your PATH)");
    setenv(AS_LOOP_ENV_VAR, "1", 1);
    /* When compiling with ASAN, we don't have a particularly elegant way to skip
       ASAN-specific branches. But we can probabilistically compensate for 
       that... */
    if (getenv("AFL_USE_ASAN") || getenv("AFL_USE_MSAN")) {
        sanitizer = 1;
        inst_ratio /= 3;
    }
    if (!just_version) add_instrumentation();
    if (!(pid = fork())) {
        execvp(as_params[0], (char**)as_params);
        FATAL("Oops, failed to execute '%s' - check your PATH", as_params[0]);
    }
    if (pid     `。第一个参数一般是汇编器本身，已经在第二步处理；最后一个参数一般是输入文件，将在第五步处理；第三步第四步遍历处理的仅仅是选项。
  4. 随后，将当前参数加入`as_params`， **遍历下一个参数** 。
  5. 取最后一个参数，判断第一个字符是否为`-`。若是，继续判断后续字符是否为`-version`。若是，则将`just_version`标志位置位，随后将`--version`加入`as_params`，最后将`NULL`加入`as_params`， **函数结束** 。
  6. 若最后一个参数的第一个字符为`-`但后续字符不为`-version`且不为空，那么 **引发致命错误`Incorrect use (not called through afl-gcc?)`，中断`afl-gcc`**。
  7. 若最后一个参数的第一个字符为`-`但后续字符为空，那么将`/.afl--.s`(尖括号包围的内容用对应变量替换)加入`as_params`，最后将`NULL`加入`as_params`， **函数结束** 。
  8. 若最后一个参数的第一个字符不为`-`且最后一个参数不为`tmp_dir`的值、`/tmp`、`/var/tmp`三者之一，将`pass_thru`标志位置位。
  9. 将`/.afl--.s`(尖括号包围的内容用对应变量替换)加入`as_params`，最后将`NULL`加入`as_params`， **函数结束** 。
###  确认环境变量&相关设置
    if (inst_ratio_str) {
        if (sscanf(inst_ratio_str, "%u", &inst_ratio) != 1 || inst_ratio > 100) 
            FATAL("Bad value of AFL_INST_RATIO (must be between 0 and 100)");
    }
    if (getenv(AS_LOOP_ENV_VAR))
        FATAL("Endless loop when calling 'as' (remove '.' from your PATH)");
    setenv(AS_LOOP_ENV_VAR, "1", 1);
    /*  When compiling with ASAN, we don't have a particularly elegant way to skip
        ASAN-specific branches. But we can probabilistically compensate for
        that... */
    if (getenv("AFL_USE_ASAN") || getenv("AFL_USE_MSAN")) {
        sanitizer = 1;
        inst_ratio /= 3;
    }
  1. 首先检查`AFL_INST_RATIO`环境变量的值是否为空，若非空，将其以无符号数的形式写入`inst_ratio`中，并验证其是否小于等于`100`，若写入过程出错或其大于`100`， **引发致命错误`Bad value of AFL_INST_RATIO (must be between 0 and 100)`，中断`afl-gcc`**。
  2. 检查`__AFL_AS_LOOPCHECK`环境变量的值是否为空，若非空， **引发致命错误`Endless loop when calling 'as' (remove '.' from your PATH)`，中断`afl-gcc`**。
  3. 设置`__AFL_AS_LOOPCHECK`环境变量的值为`1`。
  4. 检查`AFL_USE_ASAN`或者`AFL_USE_MSAN`是否被设置，若二者之一被设置，则将`sanitizer`标志位置位，并将`inst_ratio`除三。 
    * `inst_ratio`代表插桩密度，密度越高插桩越多，对资源负担越大，当设置`AFL_USE_ASAN`或者`AFL_USE_MSAN`时，这个密度会被强制置为33左右。
接下来若`just_version`标志位未置位，进入`add_instrumentation`主逻辑
###  `add_instrumentation`函数(核心插桩函数)
####  检查文件权限
首先检查是否可以打开待插桩文件，以及确定可以将已插桩的文件写入目标位置
接下来进入插桩逻辑，打开待插桩文件 **循环** 读取一行(至多`8192`个字符)进`line`变量
#### 合法代码插桩——插入调用`__afl_maybe_log`的汇编码(Ⅰ)
若`pass_thru`、`skip_intel`、`skip_app`、`skip_csect`四个标志位均被清除，且`instr_ok`(这个标志位表征当前读入的行处于`.text`部分，将在后续设置，初始为清除状态)、`instrument_next`两个标志位均被设置，且
**当前行的第一个字符是`\t`且第二个字符是字母**，则向已插桩的文件写入`trampoline_fmt_64`/`trampoline_fmt_32`(取决于`use_64bit`标志位状态)
    static const u8* trampoline_fmt_32 =
      "\n"
      "/* --- AFL TRAMPOLINE (32-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leal -16(%%esp), %%esp\n"
      "movl %%edi,  0(%%esp)\n"
      "movl %%edx,  4(%%esp)\n"
      "movl %%ecx,  8(%%esp)\n"
      "movl %%eax, 12(%%esp)\n"
      "movl $0x%08x, %%ecx\n"
      "call __afl_maybe_log\n"
      "movl 12(%%esp), %%eax\n"
      "movl  8(%%esp), %%ecx\n"
      "movl  4(%%esp), %%edx\n"
      "movl  0(%%esp), %%edi\n"
      "leal 16(%%esp), %%esp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";