等），只能手动编译安装相应的 binutils，使用下面的脚本，注意将变量 V 和
ARCH 换成你需要的。binutils源码
284
2.4.1 pwntools
#!/usr/bin/env bash
V = 2.29 # binutils version
ARCH = arm # target architecture
cd /tmp
wget -nc https://ftp.gnu.org/gnu/binutils/binutils-$V.tar.xz
wget -nc https://ftp.gnu.org/gnu/binutils/binutils-$V.tar.xz.sig
# gpg --keyserver keys.gnupg.net --recv-keys C3126D3B4AE55E93
# gpg --verify binutils-$V.tar.xz.sig
tar xf binutils-$V.tar.xz
mkdir binutils-build
cd binutils-build
export AR=ar
export AS=as
../binutils-$V/configure \
--prefix=/usr/local \
--target=$ARCH-unknown-linux-gnu \
--disable-static \
--disable-multilib \
--disable-werror \
--disable-nls
make
sudo make install
测试安装是否成功：
>>> from pwn import *
>>> asm('nop')
'\x90'
>>> asm('nop', arch='arm')
'\x00\xf0 \xe3'
285
2.4.1 pwntools
模块简介
Pwntools 分为两个模块，一个是 pwn ，简单地使用 from pwn import * 即可
将所有子模块和一些常用的系统库导入到当前命名空间中，是专门针对 CTF 比赛
的；而另一个模块是 pwnlib ，它更推荐你仅仅导入需要的子模块，常用于基于
pwntools 的开发。
下面是 pwnlib 的一些子模块（常用模块和函数加粗显示）：
adb ：安卓调试桥
args ：命令行魔法参数
asm ：汇编和反汇编，支持 i386/i686/amd64/thumb 等
constants ：对不同架构和操作系统的常量的快速访问
config ：配置文件
context ：设置运行时变量
dynelf ：用于远程函数泄露
encoders ：对 shellcode 进行编码
elf ：用于操作 ELF 可执行文件和库
flag ：提交 flag 到服务器
fmtstr ：格式化字符串利用工具
gdb ：与 gdb 配合使用
libcdb ：libc 数据库
log ：日志记录
memleak ：用于内存泄露
rop ：ROP 利用模块，包括 rop 和 srop
runner ：运行 shellcode
shellcraft ：shellcode 生成器
term ：终端处理
timeout ：超时处理
tubes ：能与 sockets, processes, ssh 等进行连接
ui ：与用户交互
useragents ：useragent 字符串数据库
util ：一些实用小工具
使用 Pwntools
286
2.4.1 pwntools
下面我们对常用模块和函数做详细的介绍。
tubes
在一次漏洞利用中，首先当然要与二进制文件或者目标服务器进行交互，这就要用
到 tubes 模块。
主要函数在 pwnlib.tubes.tube 中实现，子模块只实现某管道特殊的地方。四
种管道和相对应的子模块如下：
pwnlib.tubes.process ：进程
>>> p = process('/bin/sh')
pwnlib.tubes.serialtube ：串口
pwnlib.tubes.sock ：套接字
>>> r = remote('127.0.0.1', 1080)
>>> l = listen(1080)
pwnlib.tubes.ssh ：SSH
>>> s = ssh(host='example.com , user='name', password='passwd')`
pwnlib.tubes.tube 中的主要函数：
interactive() ：可同时读写管道，相当于回到 shell 模式进行交互，在取
得 shell 之后调用
recv(numb=1096, timeout=default) ：接收指定字节数的数据
recvall() ：接收数据直到 EOF
recvline(keepends=True) ：接收一行，可选择是否保留行尾的 \n
recvrepeat(timeout=default) ：接收数据直到 EOF 或 timeout
recvuntil(delims, timeout=default) ：接收数据直到 delims 出现
send(data) ：发送数据
sendline(data) ：发送一行，默认在行尾加 \n
close() ：关闭管道
下面是一个例子，先使用 listen 开启一个本地的监听端口，然后使用 remote 开启
一个套接字管道与之交互：
>>> from pwn import *
>>> l = listen()
[x] Trying to bind to 0.0.0.0 on port 0
[x] Trying to bind to 0.0.0.0 on port 0: Trying 0.0.0.0
287
2.4.1 pwntools
[+] Trying to bind to 0.0.0.0 on port 0: Done
[x] Waiting for connections on 0.0.0.0:46147
>>> r = remote('localhost', l.lport)
[x] Opening connection to localhost on port 46147
[x] Opening connection to localhost on port 46147: Trying ::1
[x] Opening connection to localhost on port 46147: Trying 127.0.
0.1
[+] Opening connection to localhost on port 46147: Done
>>> [+] Waiting for connections on 0.0.0.0:46147: Got connection
from 127.0.0.1 on port 38684
>>> c = l.wait_for_connection()
>>> r.send('hello\n')
>>> c.recv()
'hello\n'
>>> r.send('hello\n')
>>> c.recvline()
'hello\n'
>>> r.sendline('hello')
>>> c.recv()
'hello\n'
>>> r.sendline('hello')
>>> c.recvline()
'hello\n'
>>> r.sendline('hello')
>>> c.recvline(keepends=False)
'hello'
>>> r.send('hello world')
>>> c.recvuntil('hello')
'hello'
>>> c.recv()
' world'
>>> c.close()
[*] Closed connection to 127.0.0.1 port 38684
>>> r.close()
[*] Closed connection to localhost port 46147
下面是一个与进程交互的例子：
288
2.4.1 pwntools
>>> p = process('/bin/sh')
[x] Starting local process '/bin/sh'
[+] Starting local process '/bin/sh': pid 26481
>>> p.sendline('sleep 3; echo hello world;')
>>> p.recvline(timeout=1)
'hello world\n'
>>> p.sendline('sleep 3; echo hello world;')
>>> p.recvline(timeout=1)
''
>>> p.recvline(timeout=5)
'hello world\n'
>>> p.interactive()
[*] Switching to interactive mode
whoami
firmy
^C[*] Interrupted
>>> p.close()
[*] Stopped process '/bin/sh' (pid 26481)
shellcraft
使用 shellcraft 模块可以生成对应架构和 shellcode 代码，直接使用链式调用的方法
就可以得到，首先指定体系结构，再指定操作系统：
289
2.4.1 pwntools
>>> print shellcraft.i386.nop().strip('\n')
nop
>>> print shellcraft.i386.linux.sh()
/* execve(path='/bin///sh', argv=['sh'], envp=0) */
/* push '/bin///sh\x00' */
push 0x68
push 0x732f2f2f
push 0x6e69622f
mov ebx, esp
/* push argument array ['sh\x00'] */
/* push 'sh\x00\x00' */
push 0x1010101
xor dword ptr [esp], 0x1016972
xor ecx, ecx
push ecx /* null terminate */
push 4
pop ecx
add ecx, esp
push ecx /* 'sh\x00' */
mov ecx, esp
xor edx, edx
/* call execve() */
push SYS_execve /* 0xb */
pop eax
int 0x80
asm
该模块用于汇编和反汇编代码。
体系结构，端序和字长需要在 asm() 和 disasm() 中设置，但为了避免重复，
运行时变量最好使用 pwnlib.context 来设置。
汇编：( pwnlib.asm.asm )
290
2.4.1 pwntools
>>> asm('nop')
'\x90'
>>> asm(shellcraft.nop())
'\x90'
>>> asm('nop', arch='arm')
'\x00\xf0 \xe3'
>>> context.arch = 'arm'
>>> context.os = 'linux'
>>> context.endian = 'little'
>>> context.word_size = 32
>>> context
ContextType(arch = 'arm', bits = 32, endian = 'little', os = 'li
nux')
>>> asm('nop')
'\x00\xf0 \xe3'
>>> asm('mov eax, 1')
'\xb8\x01\x00\x00\x00'
>>> asm('mov eax, 1').encode('hex')
'b801000000'
请注意，这里我们生成了 i386 和 arm 两种不同体系结构的 nop ，当你使用不同
与本机平台的汇编时，需要安装该平台的 binutils，方法在上面已经介绍过了。
反汇编：( pwnlib.asm.disasm )
>>> print disasm('\xb8\x01\x00\x00\x00')
0: b8 01 00 00 00 mov eax,0x1
>>> print disasm('6a0258cd80ebf9'.decode('hex'))
0: 6a 02 push 0x2
2: 58 pop eax
3: cd 80 int 0x80
5: eb f9 jmp 0x0
构建具有指定二进制数据的 ELF 文件：( pwnlib.asm.make_elf )
291
2.4.1 pwntools
>>> context.clear(arch='amd64')
>>> context
ContextType(arch = 'amd64', bits = 64, endian = 'little')
>>> bin_sh = asm(shellcraft.amd64.linux.sh())
>>> bin_sh
'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6
Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'
>>> filename = make_elf(bin_sh, extract=False)
>>> filename
'/tmp/pwn-asm-V4GWGN/step3-elf'
>>> p = process(filename)
[x] Starting local process '/tmp/pwn-asm-V4GWGN/step3-elf'
[+] Starting local process '/tmp/pwn-asm-V4GWGN/step3-elf': pid
28323
>>> p.sendline('echo hello')
>>> p.recv()
'hello\n'
这里我们生成了 amd64，即 64 位 /bin/sh 的 shellcode，配合上 asm 函数，即
可通过 make_elf 得到 ELF 文件。
另一个函数 pwnlib.asm.make_elf_from_assembly 允许你构建具有指定汇编代
码的 ELF 文件：
292
2.4.1 pwntools
>>> asm_sh = shellcraft.amd64.linux.sh()
>>> print asm_sh
/* execve(path='/bin///sh', argv=['sh'], envp=0) */
/* push '/bin///sh\x00' */
push 0x68
mov rax, 0x732f2f2f6e69622f
push rax
mov rdi, rsp
/* push argument array ['sh\x00'] */
/* push 'sh\x00' */
push 0x1010101 ^ 0x6873
xor dword ptr [rsp], 0x1010101
xor esi, esi /* 0 */
push rsi /* null terminate */
push 8
pop rsi
add rsi, rsp
push rsi /* 'sh\x00' */
mov rsi, rsp
xor edx, edx /* 0 */
/* call execve() */
push SYS_execve /* 0x3b */
pop rax
syscall
>>> filename = make_elf_from_assembly(asm_sh)
>>> filename
'/tmp/pwn-asm-ApZ4_p/step3'
>>> p = process(filename)
[x] Starting local process '/tmp/pwn-asm-ApZ4_p/step3'
[+] Starting local process '/tmp/pwn-asm-ApZ4_p/step3': pid 2842
9
>>> p.sendline('echo hello')
>>> p.recv()
'hello\n'
与上一个函数不同的是， make_elf_from_assembly 直接从汇编生成 ELF 文
件，并且保留了所有的符号，例如标签和局部变量等。
293
2.4.1 pwntools
elf
该模块用于 ELF 二进制文件的操作，包括符号查找、虚拟内存、文件偏移，以及修
改和保存二进制文件等功能。( pwnlib.elf.elf.ELF )
>>> e = ELF('/bin/cat')
[*] '/bin/cat'