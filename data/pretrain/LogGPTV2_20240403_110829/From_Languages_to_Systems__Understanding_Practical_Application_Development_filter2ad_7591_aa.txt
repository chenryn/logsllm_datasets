title:From Languages to Systems: Understanding Practical Application Development
in Security-typed Languages
author:Boniface Hicks and
Kiyan Ahmadizadeh and
Patrick D. McDaniel
From Languages to Systems: Understanding Practical Application Development
in Security-typed Languages
Boniface Hicks, Kiyan Ahmadizadeh and Patrick McDaniel
Systems and Internet Infrastructure Security Laboratory (SIIS)
Computer Science and Engineering, Pennsylvania State University
{phicks,ahmadiza,mcdaniel}@cse.psu.edu
Abstract
Security-typed languages are an evolving tool for imple-
menting systems with provable security guarantees. How-
ever, to date, these tools have only been used to build simple
“toy” programs. As described in this paper, we have devel-
oped the ﬁrst real-world, security-typed application: a se-
cure email system written in the Java language variant Jif.
Real-world policies are mapped onto the information ﬂows
controlled by the language primitives, and we consider the
process and tractability of broadly enforcing security policy
in commodity applications. We ﬁnd that while the language
provided the rudimentary tools to achieve low-level secu-
rity goals, additional tools, services, and language exten-
sions were necessary to formulate and enforce application
policy. We detail the design and use of these tools. We also
show how the strong guarantees of Jif in conjunction with
our policy tools can be used to evaluate security. This work
serves as a starting point–we have demonstrated that it is
possible to implement real-world systems and policy using
security-typed languages. However, further investigation of
the developer tools and supporting policy infrastructure is
necessary before they can fulﬁll their considerable promise
of enabling more secure systems.
1
Introduction
The exposure of private data is an increasingly critical
concern of online organizations [7, 8]. The huge costs
of exposure can be measured both in ﬁnancial and in hu-
man terms. The central cause is, of course, the systems
themselves. The security provided by existing systems is
largely due to secure design and implementation–practices
that have yet to fully mature. Furthermore, the subsequent
evaluation of these systems relies on ad hoc or inexact qual-
ity and assurance evaluations. What are needed are tools for
formulating and ensuring more precise notions of security.
Security-typed languages fulﬁll this need.
Security-typed languages annotate source code with se-
curity levels on types [28] such that the compiler can stati-
cally guarantee that the program will enforce noninterfer-
ence [11].
In a broader sense, these languages provide
a means of provably enforcing a security policy. The-
oretical models for security-typed languages have been
actively studied and are continuing to evolve. For ex-
ample, researchers are extending these models to include
new features, such as exceptions, polymorphism, objects,
inheritance, side-effects,
threads, encryption, and many
more [21].
Developer tools and programming experience have not
evolved in concert with language features. There are cur-
rently only two signiﬁcant language implementations, Flow
Caml [24] and Jif [18] and only two applications [1, 18],
both written in Jif. The literature frequently postulates on
practical, distributed applications with many principals and
complex policy models such as tax preparation [16], med-
ical databases [25] and banking systems [26]. However,
the only completed applications have both been “toy” ap-
plications with only two principals within a simplistic dis-
tributed environment. For this reason, many language fea-
tures such as dynamic principals and declassiﬁcation, as
well as integration with conventional security mechanisms
such as cryptography, certiﬁcates, certiﬁcate authorities and
network authentication protocols were yet to be explored
(prior to this work).
To address this lack of practical experience, we build
a realistic application in a security-typed language. We
sought to discover whether this tool for secure program-
ming could hold up to its promise of delivering real-world
applications with strong security guarantees. Two key cri-
teria we used for deﬁning “real-world” were that 1) the ap-
plication should interact with other non-security-typed, net-
worked components while still maintaining the security pol-
icy of its data and 2) the security policy should be easily
re-conﬁgurable such that the application could be of gen-
eral use (not just in a military, MLS setting, but also in a
corporate setting, for example). We conducted this experi-
ment by implementing an email system in the language Jif,
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006including policies from military multi-
need to enforce:
level security (MLS) [3] to organizational hierarchies [9].
Finally, email policy is naturally distributed, with unique
principals interacting across potentially distant clients. We
seek to support policies that involve these diverse and dy-
namic principals.
Illustrated in Figure 1,
the JPmail system (JP =
Jif/Policy) consists of three main components:
JPmail
clients, the Internet and public mail servers. Written in Jif,
the JPmail client (or just JPmail throughout) is a functional
email client implementing a subset of the MIME protocol.
The JPmail client software consists of three software com-
ponents: a POP3-based mail reader, an SMTP-based mail
sender and a policy store. The client provably enforces se-
curity policy from end to end (sender to recipient). Policy
is deﬁned with respect to a principal hierarchy. Each envi-
ronment deﬁnes principal hierarchies representative of their
organizational rights structure.
2.1 Security policy
The single real-world security policy we deﬁned at the
outset of this work was seemingly simple:
The body of an email should be visible only to the
authorized senders and receivers.
However, provably realizing this policy was more complex
than it would initially appear. We make two clariﬁcations
about this policy. Firstly, in this paper, we are only con-
cerned with privacy (conﬁdentiality). This is because until
June of 2006, Jif could only handle conﬁdentiality proper-
ties (the most recent release introduces integrity labels [5]).
Future revision of our work will also embrace integrity.
Secondly, our email client is not inherently limited to send-
ing email only to authorized receivers. The way JPmail han-
dles unauthorized recipients depends on the user-deﬁned
policy (see Section 5.1).
We make the following assumptions. The JPmail-local
ﬁle systems are trusted to store information securely, based
on the access control list on a given ﬁle (thus if a ﬁle is
readable only by the user, it is considered safe from leak-
age).
Internet communication is generally untrustworthy,
and is deemed as public channels throughout. The SMTP
and POP3 servers are not written in Jif, and do not enforce
any security policy save that which is provided by their im-
plementation and administration. For the purposes of this
work, we assume nothing about the servers’ ability to pre-
vent leakage of user data: i.e., any information sent to them
is deemed public.
Consider some dangers in email. 1) In the case of a
malicious insider, email was used to leak classiﬁed docu-
ments [20]. 2) In another case, a programmer mistake led to
a privacy violation for a list of patients using anti-depressant
medication [7]. 3) An email application also handles pass-
words for logging into remote servers and could leak a pass-
2
Figure 1. Sending email
a security-typed variant of Java. Throughout, we reﬂect on
the advantages and limitations of language-based security
tools and the requirements of future development.
A principal result of this study is that we succeeded in
developing a real-world application for which we can eas-
ily assess that there is no information leakage beyond what
is allowed by a clear, user-deﬁned, high-level policy. We
found that while language tools were robust and expressive,
additional development and runtime tools were necessary.
We extend the language with additional policy formulation
tools (a policy compiler [12]) and runtime support infras-
tructure (policy store) to enable the enforcement of policy
in a distributed environment. We also provide tools for se-
cure software engineering including a Jif integrated devel-
opment environment (IDE) in the Eclipse extensible devel-
opment platform. Finally, we provide a critical evaluation
of the Jif language, highlighting its effectiveness at carrying
out the promised security goals, the difﬁculties involved in
using it and the ways in which it still needs improvement.
The remainder of this paper is organized as follows. We
begin in the next section by providing a sketch of an email
system, the threats it faces and the kinds of security poli-
cies it requires. Section 3 discusses the security that can be
provided by Jif, the limitations of Jif and some solutions to
these limitations. Section 4 concisely describes the archi-
tecture of our JPmail system. Section 5 describes in detail
the tools we have built to overcome these challenges. Sec-
tion 6 provides a limited security evaluation of our email
client, discusses our experience with Jif, evaluates the dif-
ﬁculty and effectiveness of using Jif for building an email
client and indicates some areas of Jif which need improve-
ment. A number of related works are discussed in Section 7.
We conclude in Section 8.
2 Overview
An email system is particularly useful for the study of ap-
plication development in security-typed languages. This is
not only because email is ubiquitous, but also because it has
been a frequent avenue for security leaks [20, 7]. Moreover,
email has a wide variety of security policies that it might
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
SMTPServerPOP3ServerAlice'sJPmailMailSenderclientBob'sJPmailMailReaderclientTo:BobFrom:Aliceterminalinputterminaloutput1233No information should be leaked outside the companyInformation-ﬂowpolicyfilterfilterProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006word by sending it to the server as plaintext (a protocol that
some servers use, in fact). 4) An email client which uses
PGP or other systems could accidentally or maliciously leak
keys.
Given these threats, which involve both malice and mis-
takes (on the part of both the programmer and the user), how
can one be sure that an email client is safe to use? The an-
swer to this critical question lies in two realms: the proper
conﬁguration of an email policy and the application’s faith-
ful, veriﬁable implementation of that policy. How should
this veriﬁcation be done? It is not unreasonable to verify
some of this by hand, but the parts that are veriﬁed by hand
should be small and straight-forward. It would be desirable
to be able to verify the remainder of these complex systems
automatically.
Jif provides the basis for this in performing automated
veriﬁcation of information ﬂows through security-annotated
type-checking. For this reason, it promises to be a powerful,
key tool for developing secure applications. At the same
time, however, Jif has practical limitations when it is being
used to build components in a distributed system.
In the
next section, we explore these features and limitations.
3 Building a secure application with Jif
Jif is an object-oriented, strongly-typed language based1
on Java.
In Jif, the programmer labels types with secu-
rity annotations according to the decentralized label model
(DLM) [17]. The compiler uses these annotations during
type-checking to ensure noninterference. For example, as-
suming alice and bob are principals, {alice:} is a DLM-
label in Jif syntax indicating that a particular value is owned
and readable only by alice. Thus, the following code
would produce a type error, because it attempts an illegal
ﬂow of information from a sensitive string owned by alice
to a string owned by bob.
String{alice:} password = "1fth2;zg";
String{bob:} leak = password; // causes error
This provides the starting point for implementing a secure
email client in Jif. It suggests that if we properly label the
data we want to keep secret (the bodies of emails, passwords
and keys), then Jif will handle the rest. Jif implements a
single, strong, information-ﬂow policy—noninterference—
parameterized by principals and delegations. One of the ad-
vantages of noninterference is that it is an end-to-end policy
(the same policy applies for the whole lifetime of data—
from its creation to its destruction). Consider the following
code for an email data structure :
1Jif does not provide support for inner classes or threads, because of the
ways they complicate information ﬂow analysis. Jif is described most com-
pletely by Myers [15], has online documentation at www.cs.cornell.
edu/jif/ and a helpful, practical overview, along with expository exam-
ples, is given by Askarov and Sabelfeld [1].
public class Email {
String{} toAddress;
String{} fromAddress;
String{this} body;
public Email(String{} to, String{} from,
String{this} body) { ... }
}
If Alice wants to send an email to Bob, she could use the
following declaration:
Email{bob:} msgToBob = new Email(
"PI:EMAIL","PI:EMAIL","Hi Bob!");
Here, the email headers are public ({} is the Jif syntax for
a public label) and the body of the email will be labeled
{bob:} (since the {this} label in the class deﬁnition is
always replaced with whatever label is used when an in-
stance of this class is created). Suppose that a delegation
also exists from Bob to his wife Charlotte. Under a strict
noninterference policy, we could be certain, based solely
on this declaration, that no one but Bob (and Charlotte, to
whom he delegates) could ever read the body of this email.
Furthermore, Jif prevents the programmer from leaking in-
formation through email. For example, the following code
would generate an error, because password is labeled as
{alice:} while the constructor for Email requires that the
body be labeled {this} (which is {bob:} in this case):
Email{bob:} msgToBob = new Email(
"PI:EMAIL","PI:EMAIL",password); // error
Finally, observe one more important property of Jif: com-
positionality. Jif requires that a method’s information ﬂows
be accurately indicated on the method header and then veri-
ﬁes that the header and the information ﬂows in the body are
consistent. After that, the body never needs to be examined
again by the type checker. These analyses are used in the
later evaluation of calling functions. Thus, we recursively
build upon smaller analyses toward a total view of system
information ﬂow.
Detailed below, Jif presents several challenges as a tool
for system development.
3.1 A principal store
One challenge is in managing principals beyond the lim-
ited domain of a single Jif program execution. Principals
need to be deﬁned explicitly in the program, along with the
policies they enforce (whether they allow certain declassi-
ﬁers, e.g.). Furthermore, for our email client to be useful
in practice, the principals persist beyond a single execution
so that labeled data may leave one Jif application (through a
network socket, for example) and later re-enter another one.
Intuitively, these principals should be anchored in principals
in the real-world, e.g., users of the parent operating system.
This is a problem that the past simple Jif demonstration
applications [1, 18] did not face, because they did not com-
municate with the non-Jif world and they used trivially sim-
ple policies. Being merely games, they only had to deﬁne
3
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006principals “me” and “opponent” and those principals only
needed to have meaning for the duration of one execution
of the program. In our application, to the contrary, it is nec-
essary to utilize principals with persistent meaning across
multiple applications. Additionally, for these principals to
be robust, it should not be possible for the user to imperson-