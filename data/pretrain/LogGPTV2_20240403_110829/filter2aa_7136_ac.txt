  const sql = "SELECT * from some_table WHERE Id = ? and Name = ?";
  const sqlParams = [req.body.id, req.body.name];
  connection.query(sql, sqlParams, (err, result) => {
  	// handle err..
  });
  ```
- 对于表名、列名等无法进行预编译的场景，如：`__user_input__` 拼接到比如 `limit`, `order by`, `group by` , `from tablename`语句中。请使用以下方法：
  *方案1：使用白名单校验表名/列名*
  ```javascript
  // good
  const tableSuffix = req.body.type;
  if (["expected1", "expected2"].indexOf(tableSuffix)  {
  	// handle err..
  });
  ```
  *方案2：使用反引号包裹表名/列名，并过滤 `__user_input__` 中的反引号*
  ```javascript
  // good
  let { orderType } = req.body;
  // 过滤掉__user_input__中的反引号
  orderType = orderType.replace("`", "");
  const sql = util.format("SELECT * from t_business_feeds order by `%s`", orderType);
  connection.query(sql, (err, result) => {
  	// handle err..
  });
  ```
  *方案3：将 `__user_input__` 转换为整数*
  ```javascript
  // good
  let { orderType } = req.body;
  // 强制转换为整数
  orderType = parseInt(orderType, 10);
  const sql = `SELECT * from t_business_feeds order by ${orderType}`;
  connection.query(sql, (err, result) => {
  	// handle err..
  });
  ```
**1.9.2 【必须】安全的ORM操作**
- 使用安全的ORM组件进行数据库操作。如 `sequelize` 等
- 禁止`__user_input__`以拼接的方式直接传入ORM的各类raw方法
```javascript
//bad: adonisjs ORM
//参考：https://adonisjs.com/docs/3.2/security-introduction#_sql_injection
const username = request.param("username");
const users = yield Database
  .table("users")
  .where(Database.raw(`username = ${username}`));
//good: adonisjs ORM
const username = request.param("username");
const users = yield Database
  .table('users')
  .where(Database.raw("username = ?", [username]));
```
- 使用ORM进行Update/Insert操作时，应限制操作字段范围
```javascript
/*
good
假设该api用于插入用户的基本信息，使用传入的req.body通过Sequelize的create方法实现
假设User包含字段：username,email,isAdmin，
其中,isAdmin将会用于是否系统管理员的鉴权，默认值为false
*/
// Sequelize: 只允许变更username、email字段值
User.create(req.body, { fields: ["username", "email"] }).then((user) => {
	// handle the rest..
});
```
> **为什么要这么做？**
> 在上述案例中，若不限定fields值，攻击者将可传入`{"username":"boo","email":"PI:EMAIL","isAdmin":true}`将自己变为`Admin`，产生垂直越权漏洞。
*关联漏洞：高风险 - SQL注入，中风险 - Mass Assignment 逻辑漏洞*
#### 1.10 NoSQL操作
**1.10.1 【必须】校验参数值类型**
- 将HTTP参数值代入NoSQL操作前，应校验类型。如非功能需要，禁止对象（Object）类型传入。
```javascript
// bad：执行NOSQL操作前，未作任何判断
app.post("/", (req, res) => {
	db.users.find({ username: req.body.username, password: req.body.password }, (err, users) => {
	// **TODO:** handle the rest
	});
});
// good：在进入nosql前先判断`__USER_INPUT__`是否为字符串。
app.post("/", (req, res) => {
	if (req.body.username && typeof req.body.username !== "string") {
		return new Error("username must be a string");
	}
	if (req.body.password && typeof req.body.password !== "string") {
		return new Error("password must be a string");
	}
	db.users.find({ username: req.body.username, password: req.body.password }, (err, users) => {
		// **TODO:** handle the rest
	});
});
```
> **为什么要这么做？**
>
> JavaScript中，从http或socket接收的数据可能不是单纯的字符串，而是被黑客精心构造的对象(Object)。在本例中：
>
> - 期望接收的POST数据：`username=foo&password=bar` 
> - 期望的等价条件查询sql语句：`select * from users where username = 'foo' and password = 'bar'`
> - 黑客的精心构造的攻击POST数据：`username[$ne]=null&password[$ne]=null`或JSON格式：`{"username": {"$ne": null},"password": {"$ne": null}}`
> - 黑客篡改后的等价条件查询sql语句：`select * from users where username != null & password != null`
> - 黑客攻击结果：绕过正常逻辑，在不知道他人的username/password的情况登录他人账号。
**1.10.2 【必须】NoSQL操作前，应校验权限/角色**
- 执行NoSQL增、删、改、查逻辑前，应校验权限
```javascript
// 使用express、mongodb(mongoose)实现的删除文章demo
// bad：在删除文章前未做权限校验
app.post("/deleteArticle", (req, res) => {
	db.articles.deleteOne({ article_id: req.body.article_id }, (err, users) => {
		// TODO: handle the rest
	});
});
// good：进入nosql语句前先进行权限校验
app.post("/deleteArticle", (req, res) => {
	checkPriviledge(ctx.uin, req.body.article_id);
	db.articles.deleteOne({ article_id: req.body.article_id }, (err, users) => {
		// TODO: handle the rest
	});
});
```
*关联漏洞：高风险 - 越权操作，高风险 - NoSQL注入*
#### 1.11 服务器端渲染（SSR）
**1.11.1 【必须】安全的Vue服务器端渲染(Vue SSR)**
- 禁止直接将不受信的外部内容传入`{{{ data }}}`表达式中
- 模板内容禁止被污染
```javascript
// bad: 将用户输入替换进模板
const app = new Vue({
	template: appTemplate.replace("word", __USER_INPUT__),
});
renderer.renderToString(app);
```
- 对已渲染的HTML文本内容（renderToString后的html内容）。如需再拼不受信的外部输入，应先进行安全过滤，具体请参考**1.6.3**
```javascript
// bad: 渲染后的html再拼接不受信的外部输入
return new Promise(((resolve) => {
	renderer.renderToString(component, (err, html) => {
		let htmlOutput = html;
		htmlOutput += `${__USER_INPUT__}`;
		resolve(htmlOutput);
	});
}));
```
**1.11.2 【必须】安全地使用EJS、LoDash、UnderScore进行服务器端渲染**
- 使用render函数时，模板内容禁止被污染
  lodash.Template:
  ```js
  // bad: 将用户输入送进模板
  const compiled = _.template(`${__USER_INPUT__}`);
  compiled({ value: "hello" });
  ```
  ejs:
  ```javascript
  // bad: 将用户输入送进模板
  const ejs = require("ejs");
  const people = ["geddy", "neil", "alex"];
  const html = ejs.render(`${__USER_INPUT__}`, { people });
  ```
- Ejs、LoDash、UnderScore提供的HTML插值模板默认形似``，尽管在默认情况下``存在过滤，在编写HTML插值模板时需注意:
  1. 用户输入流入html属性值时，必须使用双引号包裹：`">`
  2. 用户输入流入``标签或on*的html属性中时，如`var id = ` ，须按照1.6.3中的做法或白名单方法进行过滤，框架/组件的过滤在此处不起作用
**1.11.3 【必须】在自行实现状态存储容器并将其JSON.Stringify序列化后注入到HTML时，必须进行安全过滤**
#### 1.12 URL跳转
**1.12.1【必须】限定跳转目标地址**
- 适用场景包括：
1. 使用30x返回码并在Header中设置Location进行跳转
2. 在返回页面中打印``
- 使用白名单，限定重定向地址的协议前缀（默认只允许HTTP、HTTPS）、域名（默认只允许公司根域），或指定为固定值；
```javascript
// 使用express实现的登录成功后的回调跳转页面
// bad: 未校验页面重定向地址
app.get("/login", (req, res) => {
	// 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录
  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:
	const { loginCallbackUrl } = req.query;
	if (loginCallbackUrl) {
    	res.redirect(loginCallbackUrl);
	}
});
// good: 白名单限定重定向地址
function isValidURL(sUrl) {
	return !!((/^(https?:\/\/)?[\w\-.]+\.(qq|tencent)\.com($|\/|\\)/i).test(sUrl) || (/^[\w][\w/.\-_%]+$/i).test(sUrl) || (/^[/\\][^/\\]/i).test(sUrl));
}
app.get("/login", (req, res) => {
	// 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录
  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:
	const { loginCallbackUrl } = req.query;
	if (loginCallbackUrl && isValidUrl(loginCallbackUrl)) {
    	res.redirect(loginCallbackUrl);
	}
});
// good: 白名单限定重定向地址，通过返回html实现
function isValidURL(sUrl) {
	return !!((/^(https?:\/\/)?[\w\-.]+\.(qq|tencent)\.com($|\/|\\)/i).test(sUrl) || (/^[\w][\w/.\-_%]+$/i).test(sUrl) || (/^[/\\][^/\\]/i).test(sUrl));
}
app.get("/login", (req, res) => {
	// 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录
  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:
	const { loginCallbackUrl } = req.query;
	if (loginCallbackUrl && isValidUrl(loginCallbackUrl)) {
		// 使用encodeURI，过滤左右尖括号与双引号，防止逃逸出包裹的双引号
		const redirectHtml = ``;
    	res.end(redirectHtml);
	}
});
```
*关联漏洞：中风险 - 任意URL跳转漏洞*
#### 1.13 Cookie与登录态
**1.13.1【推荐】为Cookies中存储的关键登录态信息添加http-only保护**
*关联漏洞：纵深防护措施 - 安全性增强特性*
### II. 配置&环境
#### 2.1 依赖库
**2.1.1【必须】使用安全的依赖库**
- 使用自动工具，检查依赖库是否存在后门/漏洞，保持最新版本
#### 2.2 运行环境
**2.2.1 【必须】使用非root用户运行Node.js**
#### 2.3 配置信息
**2.3.1【必须】禁止硬编码认证凭证**
- 禁止在源码中硬编码`AK/SK`、`数据库账密`、`私钥证书`等配置信息
- 应使用配置系统或KMS密钥管理系统。
**2.3.2【必须】禁止硬编码IP配置**
- 禁止在源码中硬编码`IP`信息
> **为什么要这么做？**
>
> 硬编码IP可能会导致后续机器裁撤或变更时产生额外的工作量，影响系统的可靠性。
**2.3.3【必须】禁止硬编码员工敏感信息**
- 禁止在源代码中含员工敏感信息，包括但不限于：`员工ID`、`手机号`、`微信/QQ号`等。