call       near ptr out_port 
seg030:0099 59               
pop       cx 
seg030:009A 68 C7 00         
push       0C7h 
seg030:009D 0E               
push       cs 
seg030:009E E8 93 FF         
call       near ptr out_port 
seg030:00A1 59               
pop       cx 
seg030:00A2 68 D3 00         
push      0D3h 
seg030:00A5 0E               
push      cs 
seg030:00A6 E8 8B FF         
call       near ptr out_port 
seg030:00A9 59                
pop       cx 
seg030:00AA BF FF FF         
mov        di, 0FFFFh 
seg030:00AD EB 40            
jmp       short loc_35A4F 
seg030:00AF 
seg030:00AF                loc_35A0F: ; CODE XREF: sent_pro+BDj 
seg030:00AF BE 04 00         
mov      si, 4 
seg030:00B2 
seg030:00B2                loc_35A12: ; CODE XREF: sent_pro+ACj 
seg030:00B2 D1 E7            
shl       di, 1 
seg030:00B4 8B 16 80 E7     
mov        dx, _in_port_2 ; 0x379 
seg030:00B8 EC                
in 
     al, dx 
seg030:00B9 A8 80            
test      al, 80h 
seg030:00BB 75 03            
jnz        short loc_35A20 
seg030:00BD 83 CF 01         
or        di, 1 
seg030:00C0 
seg030:00C0                loc_35A20: ; CODE XREF: sent_pro+7Aj 
seg030:00C0 F7 46 FE 08+    
test       [bp+var_2], 8 
seg030:00C5 74 05            
jz        short loc_35A2C 
seg030:00C7 68 D7 00         
push       0D7h ; '+' 
seg030:00CA EB 0B            
jmp       short loc_35A37 
seg030:00CC 
seg030:00CC                loc_35A2C: ; CODE XREF: sent_pro+84j 
seg030:00CC 68 C3 00         
push       0C3h 
seg030:00CF 0E               
push       cs 
seg030:00D0 E8 61 FF         
call       near ptr out_port 
seg030:00D3 59               
pop        cx 
seg030:00D4 68 C7 00         
push       0C7h 
seg030:00D7 
seg030:00D7                loc_35A37: ; CODE XREF: sent_pro+89j 
seg030:00D7 0E               
push       cs 
seg030:00D8 E8 59 FF         
call       near ptr out_port 
seg030:00DB 59               
pop       cx 
seg030:00DC 68 D3 00         
push       0D3h 
seg030:00DF 0E               
push       cs 
seg030:00E0 E8 51 FF         
call       near ptr out_port 
seg030:00E3 59               
pop       cx 
seg030:00E4 8B 46 FE         
mov       ax, [bp+var_2] 
seg030:00E7 D1 E0             
shl        ax, 1 
seg030:00E9 89 46 FE        
mov       [bp+var_2], ax 
seg030:00EC 4E               
dec       si 
seg030:00ED 75 C3            
jnz       short loc_35A12 
seg030:00EF        
seg030:00EF                loc_35A4F: ; CODE XREF: sent_pro+6Cj 
seg030:00EF C4 5E 06         
les       bx, [bp+arg_0] 
seg030:00F2 FF 46 06         
inc       word ptr [bp+arg_0] 
seg030:00F5 26 8A 07         
mov       al, es:[bx] 
seg030:00F8 98                 
cbw 
seg030:00F9 89 46 FE        
mov       [bp+var_2], ax 
seg030:00FC 0B C0            
or       ax, ax 
seg030:00FE 75 AF            
jnz       short loc_35A0F 
seg030:0100 68 FF 00         
push       0FFh 
seg030:0103 0E               
push       cs 
seg030:0104 E8 2D FF         
call       near ptr out_port 
seg030:0107 59               
pop        cx 
seg030:0108 8B 16 82 E7     
mov       dx, _in_port_1 ; 0x37A 
seg030:010C EC               
in        al, dx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
750 
逆向工程权威指南（下册） 
seg030:010D 8A C8            
mov       cl, al 
seg030:010F 80 E1 5F         
and       cl, 5Fh 
seg030:0112 8A C1            
mov       al, cl 
seg030:0114 EE               
out       dx, al 
seg030:0115 EC               
in         al, dx 
seg030:0116 8A C8            
mov       cl, al 
seg030:0118 F6 C1 20         
test       cl, 20h 
seg030:011B 74 08            
jz       short loc_35A85 
seg030:011D 8A 5E FD         
mov       bl, [bp+var_3] 
seg030:0120 80 E3 DF         
and       bl, 0DFh 
seg030:0123 EB 03            
jmp       short loc_35A88 
seg030:0125 
seg030:0125                loc_35A85: ; CODE XREF: sent_pro+DAj 
seg030:0125 8A 5E FD         
mov        bl, [bp+var_3] 
seg030:0128 
seg030:0128                loc_35A88: ; CODE XREF: sent_pro+E2j 
seg030:0128 F6 C1 80         
test       cl, 80h 
seg030:012B 74 03            
jz       short loc_35A90 
seg030:012D 80 E3 7F         
and        bl, 7Fh 
seg030:0130 
seg030:0130                loc_35A90: ; CODE XREF: sent_pro+EAj 
seg030:0130 8B 16 82 E7     
mov       dx, _in_port_1 ; 0x37A 
seg030:0134 8A C3            
mov       al, bl 
seg030:0136 EE               
out       dx, al 
seg030:0137 8B C7            
mov       ax, di 
seg030:0139 5F               
pop       di 
seg030:013A 5E                
pop        si 
seg030:013B C9                
leave 
seg030:013C CB               
retf 
seg030:013C               sent_pro endp 
可见，这个加密狗还是 Sentinel Pro 出品的“哈希验证”型加密狗。通过观察程序中传递的文本字符串，
我们能够查到这种加密狗信息。而且它的 16 位返回值最终要和固定值进行比较。 
输出端口地址通常是 0x378，即USB问世之前、老式打印机才用的打印终端LPT接口。在设计这种接口时，
恐怕没有人会想到要从打印机接收数据，因此这种接口是单向通信接口
①
① 本文指的是 LPT 并行接口。实际上，IEEE 1284 标准允许打印机回传数据。 
。应用程序能够通过 0x379 端口访问
打印机的状态寄存器，获取“缺纸”“确定/ack”“繁忙”之类的信号信息。也就是说，打印机的状态寄存器是主机
了解打印机工作状态的唯一途径。因此，加密狗肯定通过这个寄存器获取反馈信息，逐次轮训有关比特位罢了。 
源程序的_in_port_2 和_in_port_1 标签，分别访问了状态字寄存器（0x379）和控制寄存器（0x37A）。 
看来，通过 seg030:00B9 的指令，程序通过“繁忙”标志为获取返回信息：每个比特位都存储于 DI
寄存器，由函数尾部的指令返回。 
那么，发送给输出端口的这些字节都有什么涵义？笔者没有进行深究，只知道是发送给加密狗的指令。
而且就这种任务来说，也不必把各个控制指令搞清楚。 
检测加密狗的指令如下： 
00000000 struct_0          struc ; (sizeof=0x1B) 
00000000 field_0           db 25 dup(?)               ; string(C) 
00000019 _A                 dw? 
0000001B struct_0          ends 
dseg:3CBC 61 63 72 75+_Q   struct_0  
dseg:3CBC 6E 00 00 00+         ; DATA XREF: check_dongle+2Eo 
... skipped ... 
dseg:3E00 63 6F 66 66+      struct_0  
dseg:3E1B 64 6F 67 00+      struct_0  
dseg:3E36 63 61 74 00+      struct_0  
dseg:3E51 70 61 70 65+      struct_0  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
751 
dseg:3E6C 63 6F 6B 65+      struct_0  
dseg:3E87 63 6C 6F 63+      struct_0  
dseg:3EA2 64 69 72 00+      struct_0  
dseg:3EBD 63 6F 70 79+      struct_0  
seg030:0145                 check_dongle proc far ; CODE XREF: sub_3771D+3EP 
seg030:0145 
seg030:0145                 var_6 = dword ptr -6 
seg030:0145                 var_2 = word ptr -2 
seg030:0145 
seg030:0145 C8 06 00 00 
     enter    6, 0 
seg030:0149 56          
     push     si 
seg030:014A 66 6A 00      
     push     large 0   
    ; newtime 
seg030:014D 6A 00  
     push     0          
    ; cmd 
seg030:014F 9A C1 18 00+ 
     call     _biostime 
seg030:0154 52          
     push     dx 
seg030:0155 50           
     push     ax 
seg030:0156 66 58         
     pop      eax 
seg030:0158 83 C4 06     
     add      sp, 6 
seg030:015B 66 89 46 FA 
     mov      [bp+var_6], eax 
seg030:015F 66 3B 06 D8+        cmp      eax, _expiration 
seg030:0164 7E 44       
     jle      short loc_35B0A 
seg030:0166 6A 14        
     push     14h 
seg030:0168 90     
     nop 
seg030:0169 0E          
     push     cs 
seg030:016A E8 52 00    
     call     near ptr get_rand 
seg030:016D 59           
     pop      cx 
seg030:016E 8B F0        
     mov      si, ax 
seg030:0170 6B C0 1B   
     imul     ax, 1Bh 
seg030:0173 05 BC 3C    
     add      ax, offset _Q 
seg030:0176 1E       
     push     ds 
seg030:0177 50          
     push     ax 
seg030:0178 0E         
     push     cs 
seg030:0179 E8 C5 FE   
     call     near ptr sent_pro 
seg030:017C 83 C4 04     
     add      sp, 4 
seg030:017F 89 46 FE  
     mov      [bp+var_2], ax 
seg030:0182 8B C6      
     mov      ax, si 
seg030:0184 6B C0 12   
     imul     ax, 18 
seg030:0187 66 0F BF C0  
     movsx    eax, ax 
seg030:018B 66 8B 56 FA 
     mov      edx, [bp+var_6] 
seg030:018F 66 03 D0    
     add      edx, eax 
seg030:0192 66 89 16 D8+ 
     mov      _expiration, edx 
seg030:0197 8B DE       
     mov      bx, si 
seg030:0199 6B DB 1B    
     imul     bx, 27 
seg030:019C 8B 87 D5 3C 
     mov      ax, _Q._A[bx] 
seg030:01A0 3B 46 FE   
     cmp      ax, [bp+var_2] 
seg030:01A3 74 05      
     jz       short loc_35B0A 
seg030:01A5 B8 01 00    
     mov      ax, 1 
seg030:01A8 EB 02     
     jmp      short loc_35B0C 
seg030:01AA 
seg030:01AA                 loc_35B0A: ; CODE XREF: check_dongle+1Fj 
seg030:01AA                     
     ; check_dongle+5Ej 
seg030:01AA 33 C0       
     xor      ax, ax 
seg030:01AC 
seg030:01AC                 loc_35B0C: ; CODE XREF: check_dongle+63j 
seg030:01AC 5E       
     pop      si 
seg030:01AD C9            
     leave 
seg030:01AE CB          
     retf 
seg030:01AE                 check_dongle endp 
一般来说，应用程序在执行重要功能之前都会检验加密狗。受并行打印口和加密狗硬件特性的共同制
约，验证 LPT 加密狗的核实操作肯定非常非常慢。所以多数软件都会存储验证结果，在一段时间内免去验证
的烦恼。它们多数会通过 boiostime()函数获取当前时间。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
752 
逆向工程权威指南（下册） 
另外，程序还使用了标准 C 函数 get_rand()： 
seg030:01BF                 get_rand proc far ; CODE XREF: check_dongle+25p 
seg030:01BF 
seg030:01BF                 arg_0     =word ptr 6 
seg030:01BF 
seg030:01BF 55   
   push 