### 0x00 背景
文章记录了分析shiro反序列化漏洞的思路和过程，漏洞用的次数挺多，感觉不认真走一遍分析还是缺点什么。排版也是按照我所理解的分析1day的思路进行排版的，emm~
不太专业哈 见谅 ┭┮﹏┭┮
友情提示：文章写的感觉比较亲民，理论上有一些其他语言的基础都可以阅读，比较倾向于将东西写的详细(废话很多)，就是那种看帖按着步骤走跟着思考大概自行理解的程度（记性不好，不写可能会忘的）
### 0x01 梦开始的地方
一切都要从官方shiro的某个人提出的问题描述开始说起 ~ 下图为谷歌翻译结果
url: 
通过描述可知：
  *     1. shiro  AES加密函数 + 密钥位数(128/192.256) + iv(初始化向量) + 密钥(key) + 模式(CBC和GCM等) +
padding(填充方式)--> 密文
  * IDEA的Debug按钮功能：
Step Over : 单步执行,遇到方法直接获得返回值而不会进入  
Step Into : 单步执行,遇到方法会进入方法，不会进入jdk实现的方法中  
Force Step Into : 可以进入任何的方法，比如jdk,jar包  
Step Out : 在方法内会直接获得返回值跳出该方法  
Run To Cursor : 让程序运行到鼠标所在的位置  
Drop Frame : 返回上一步，摧毁当前方法获得的值  
Resume Program : 运行至下一个断点所在位置
### 0x03 分析独白
#### 1\. 环境配置
研究的前提自然是要搭建好环境
下载shiro的漏洞环境，这里使用war包，放在tomcat的webapps里，启动tomcat，然后war包自动解析成文件夹，使用IDEA打开此文件夹
顺便讲一下IDEA配置调试shiro
    Run -> Edit Configurations -> 点击+号添加TomcatServer(Local) -> Server中配置Tomcat路径 -> 选择JRE版本 ->Deployment中点击+号添加tomcat里生成的shiro文件夹 -> 点击Apply
运行起来
#### 2\. 分析过程
首先 **第一个目的** 是控制rememberMe参数的值,先找到参数所在位置，对环境的功能先正常使用一遍
当我访问 登录时勾选Remember
Me后，cookie中出现rememberMe参数，而shiro每次都会对cookie中的rememberMe来进行解密后反序列化操作来确定访问者权限，所以直接在cookie传输rememberMe参数就可以控制shiro反序列化的值
**第二个目的** 是获得加密解密的方法，以此来自行加密解密恶意payload进行传输
反编译此漏洞环境中的shiro组件jar包
`选中shiro-core-1.2.4.jar -> 右键 -> Add as Library -> ok`
`选中shiro-web-1.2.4.jar -> 右键 -> Add as Library -> ok`
IDEA中按两次shift
搜索咱们前面准备当做入口点的CookieRememberMeManager类，按着函数列表查看后并未发现有关加密的信息，so跟进父类AbstractRememberMeManager去看一下
进入此类可以发现一个很明显的key，根据参数名`DEFAULT_CIPHER_KEY_BYTES`也可以断定是AES加密中所使用的密钥，同时确实是直接写入了代码中，符合上面通过描述可知的AES密钥硬编码在源代码中的条件
这里我在AbstractRememberMeManager类函数名为encrypt(加密)中下了断点，然后在web端进行登录操作，开始debug，运行至encrypt函数传入参数serialized，然后点击Drop
Frame返回上个方法发现传入的serialized的值是我刚才web端登录的用户名root序列化后的数据，根据运行步骤函数名猜测流程是shiro验证完了登录的账号密码，然后根据用户名生成序列化数据准备进行加密了
    再次敲黑板
    Debug按钮功能：
      Step Over : 单步执行,遇到方法直接获得返回值而不会进入
      Step Into : 单步执行,遇到方法会进入方法，不会进入jdk实现的方法中
      Force Step Into : 可以进入任何的方法，比如jdk,jar包
      Step Out : 在方法内会直接获得返回值跳出该方法
      Run To Cursor : 让程序运行到鼠标所在的位置
      Drop Frame : 返回上一步，摧毁当前方法获得的值
      Resume Program : 运行至下一个断点所在位置
在调试的变量框里看到加密的设置为AES加密，模式为CBC，128位，填充方式为PKCS5Padding
继续Force Step
Into(下一步)，进入cipherService.encrypt的方法中，跳到了JcaCipherService类中的encrypt方法中,方法中有个ivBytes变量，值是随机生成的16个字节，然后跳到了此类中的另一个encrypt方法，就是图片框中下面那个encrypt方法
    【+】return this.encrypt(plaintext, key, ivBytes, generate);
    plaintext 为 序列化的用户名
    key 为 DEFAULT_CIPHER_KEY_BYTES 就是上面base64解码的那个密钥
    ivBytes 为 随机生成的长度为16的字节
    generate 为 true
跳入的encrypt方法，不清楚java的一些方法作用一定要看图片中的备注，这个方法就是真正的生成加密结果的地方，我会描述的详细一点，因为我是垃圾不写就忘
继续Step Over(下一步)，就回到了梦开始(下的断点)的地方 ~，value变量的值就是上面步骤的output变量的值
继续使用Force Step Into(下一步)和Step
Out(在方法内直接获得返回值并跳到下一步)调试，盯着存储着加密结果的变量，遇到没有对此变量操作的直接获得返回值下一步，最终到了CookieRememberMeManager类中的rememberSerializedIdentity方法又对存储着加密结果的变量进行了一次base64加密，然后赋值到了cookie的rememberMe参数中，到此加密过程结束。
**最终总结加密过程为** ：
设定： **密钥** = kPH+bIxk5D2deZiIxcaaaA==
1.获得明文 = 正常识序列化用户名后的字节(root)
2.以下步骤：
  * 科普知识：正常的AES加密所需参数 = 想加密的字符串 + iv + key + CBC + padding
  * shiro：AES加密 = 想加密的字符串 (`明文`) + iv(`随机生成的长度为16的字节`) + key(`base64解码**密钥**的结果`) + CBC + PKCS5Padding
3.随机生成的长度为16的字节 + AES加密结果 (就是拼接了一下)
4.base64加密
**那么解密过程为** :
设定： **密钥** = kPH+bIxk5D2deZiIxcaaaA==
1.获得密文 = base64解密rememberMe参数传过来的值
2.以下步骤：
  * 科普知识：正常的AES解密所需参数 = 想解密的字符串 + iv + key + CBC
  * shiro：AES解密 = 想解密的字符串(`删除密文前16个字节的剩余字节`)+iv(`密文的前16个字节`) + key(`base64解码**密钥**的结果`) + CBC + PKCS5Padding
3.对解密结果进行反序列化，触发payload
​
在进行第三个目的前看一下最终触发反序列化的地方在哪里，按照加密方法调试过程，在解密方法处添加断点，然后在网页上先登录后，开启调试，运行至decrypt方法停住后进行Force
Step Into(下一步)和Step
Out(在方法内直接获得返回值并跳到下一步)调试，直到DefaultSerializer的deserialize方法。
​
找到shiro进行序列化和反序列化的代码位置后，可以发现shiro的serialize方法使用ByteArrayOutputStream创建了字节数组缓冲区来存储序列化的字节码，而不是生成落地文件，回到deserialize方法，同样生成缓冲区存储传过来的序列化字节，进行反序列化，并最终运行了readObject方法，如果反序列化的是我们的payload，到这里就执行命令了。
**第三个目的** 是构造脚本进行利用，先将shiro的加密过程和解密过程写出来
    def encode(target):
        iv   =  uuid.uuid4().bytes  #用好看的方式随机生成16字节
        # iv = bytes('1111111111111111',encoding='utf-8')
        realkey = base64.b64decode(key)  #解密key
        mode = AES.MODE_CBC
        pad = lambda s: s + ((16 - len(s) % 16) * chr(16 - len(s) % 16)).encode() #CBC模式要求明文长度要是16的倍数，位数不足16位的添加字节补充
        resultAES = AES.new(realkey,mode,iv)
        nice = resultAES.encrypt(pad(target))
        nice = iv + nice
        nice = base64.b64encode(nice)
        print("加密目标:\n" + str(target) + "\n\n加密结果:\n" + nice.decode("utf-8") + "\n")