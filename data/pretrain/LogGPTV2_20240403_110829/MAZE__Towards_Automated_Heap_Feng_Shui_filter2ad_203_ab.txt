3.2 Memory Layout Manipulation
This part is the main focus of MAZE. Given the expected
layout (i.e., placing a switch->name at the freed switch ob-
ject’s position), simply invoking Create_Switch may yield
another uncontrollable switch object at the target location,
unable to control the memory write pointer (i.e. POC in Fig-
ure 1). Instead, the adversary could manipulate the heap layout
in another way to place a controllable switch->name at the
target position. MAZE aims at ﬁnding such a manipulation
scheme automatically. Figure 2 shows the overview of MAZE,
which consists of two major components discussed as follows.
3.2.1 Heap Layout Primitives Analysis
In this part, taking the program and POC as inputs, MAZE
will extract primitives in them. Heap layout primitives (e.g.,
Create_Switch) are the building blocks for heap layout ma-
nipulation. Different from existing solutions, we extend heap
layout primitives to reentrant code snippets.
Primitives Extraction: Reentrant code snippets usually ex-
ist in function dispatchers that are enclosed in loops. There-
fore, we could utilize the code structure characteristic to rec-
ognize candidate heap layout primitives, via static analysis.
Primitives Dependency Analysis: Some reentrant code snip-
pets may depend on other snippets. For instance, a snippet
responsible for freeing an object has to wait for another snip-
pet to create the object ﬁrst. By analyzing the pre-condition
and post-condition of each code snippet, we could recognize
such dependencies and merge them into one primitive.
Primitives Semantics Analysis: To better assemble primi-
tives, we have to understand the semantics of each primitive,
especially the size of objects (de)allocated in each primitive
using taint analysis and symbolic execution.
Example: In this example, given the program, by analyz-
ing its code structure, we could recognize several primitives
at line 3, 4 and 5. Further, we could infer that primitive
Delete_Switch depends on the primitive Create_Switch,
and therefore group them as a new primitive.
Given the POC, MAZE also extracts the heap primitives
used in POC’s execution trace (i.e. POC info in Figure 2), to
infer the original memory layout and the inserting points.
Intuition: The problem of generating an expected heap
layout could be modelled as placing a group of objects in a
group of memory addresses. Without loss of generality, we
will ﬁrst consider placing one object O into one target address
P. As shown in Figure 3, there are two cases to handle.
Dig case: As shown in Figure 3(a), at the time of allocating
the target object O, the target address P could be taken by
noise objects (e.g., O’). In this case, we will dig (multiple)
holes before allocating noise objects O’, by adding primitives
that could free objects of proper sizes, to accommodate noise
objects O’ and leave the hole P to the target object O.
Fill case: As shown in Figure 3(b), at the time of allocating
the target object O, the target address P could be empty, but O
still falls into other holes. In this case, we will ﬁll (multiple)
holes before allocating O, by adding primitives that could
allocate objects, and leave the hole P to the target object O.
Following this Dig & Fill guidance, we could add proper
heap layout primitives into the program execution trace to
yield expected layouts.
Standard ﬁll (or dig) operation If a ﬁll (or dig) operation
contains only one allocation (or deallocation), and the size
equals to the size of O (or P), we call it a standard ﬁll (or dig)
operation. Obviously, a standard ﬁll (or dig) operation can ﬁll
(or dig) only one hole with the same size of O (or P).
Figure 3: Intuition of the Dig & Fill algorithm. Hexagons
are heap layout primitives to invoke. Only one of free1 and
free2 exists (before or after the creator of the target hole), de-
pending on the heap allocator’s strategy (i.e., FIFO or LIFO).
1650    30th USENIX Security Symposium
USENIX Association
(cid:43)(cid:72)(cid:68)(cid:83)(cid:3)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)(cid:3)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:36)(cid:86)(cid:86)(cid:72)(cid:80)(cid:69)(cid:79)(cid:92)(cid:43)(cid:72)(cid:68)(cid:83)(cid:3)(cid:3)(cid:3)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)(cid:3)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:51)(cid:68)(cid:87)(cid:75)(cid:3)(cid:38)(cid:82)(cid:81)(cid:86)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:87)(cid:86)(cid:51)(cid:82)(cid:38)(cid:3)(cid:44)(cid:81)(cid:73)(cid:82)(cid:43)(cid:72)(cid:68)(cid:83)(cid:3)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)(cid:3)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)(cid:40)(cid:59)(cid:51)(cid:55)(cid:68)(cid:85)(cid:74)(cid:72)(cid:87)(cid:3)(cid:39)(cid:76)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)(cid:43)(cid:72)(cid:68)(cid:83)(cid:3)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)(cid:3)(cid:54)(cid:76)(cid:80)(cid:88)(cid:79)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:39)(cid:76)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)(cid:3)(cid:57)(cid:72)(cid:70)(cid:87)(cid:82)(cid:85)(cid:39)(cid:76)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)(cid:3)(cid:57)(cid:72)(cid:70)(cid:87)(cid:82)(cid:85)(cid:39)(cid:72)(cid:79)(cid:87)(cid:68)(cid:3)(cid:39)(cid:76)(cid:86)(cid:87)(cid:68)(cid:81)(cid:70)(cid:72)(cid:39)(cid:76)(cid:82)(cid:83)(cid:75)(cid:68)(cid:81)(cid:87)(cid:76)(cid:81)(cid:72)(cid:3)(cid:40)(cid:84)(cid:88)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:42)(cid:72)(cid:81)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:3)(cid:40)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:3)(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:72)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:3)(cid:54)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:86)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)(cid:39)(cid:92)(cid:81)(cid:68)(cid:80)(cid:76)(cid:70)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)(cid:3)(cid:51)(cid:79)(cid:68)(cid:87)(cid:73)(cid:82)(cid:85)(cid:80)(cid:54)(cid:87)(cid:68)(cid:87)(cid:76)(cid:70)(cid:3)(cid:36)(cid:81)(cid:68)(cid:79)(cid:92)(cid:86)(cid:76)(cid:86)(cid:40)(cid:84)(cid:88)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:54)(cid:82)(cid:79)(cid:89)(cid:72)(cid:85)(cid:51)(cid:82)(cid:38)(cid:51)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)(cid:51)(cid:68)(cid:87)(cid:75)(cid:3)(cid:72)(cid:71)(cid:76)(cid:87)(cid:54)(cid:48)(cid:55)(cid:3)(cid:86)(cid:82)(cid:79)(cid:89)(cid:72)(cid:85)(cid:40)(cid:91)(cid:83)(cid:72)(cid:70)(cid:87)(cid:72)(cid:71)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)MemoryfreeallocTarget holenoiseallocholesto digMemoryfreeallocTarget holenoisefree2holesto ﬁll(a)  Dig operation(b)  Fill operationfree2allocOPPOO’P’MemoryTarget holePMemoryTarget holeholesto ﬁllPP’allocfree1noisefree1afterbeforeafterTimelineTimelinebeforeTarget Distance Analysis As long as we add enough stan-
dard ﬁll (or dig) operations into the program execution trace,
the target object O can be placed into the target address P.
To analyse how many standard ﬁll (or dig) operations are
needed, we craft a shadow program with the same heap alloca-
tor, which only handles (de)allocations and takes commands
from the analyzer. According to the heap primitives in POC’s
execution trace (i.e. the POC info), the analyzer will instruct
the shadow program to free or allocate objects of speciﬁc
sizes. Therefore it will derive the original memory layout and
determine whether dig or ﬁll operation is required. Then the
analyzer will keep inserting standard ﬁll or dig operations
until the target object O is placed into the target address P. If d
standard dig operations are required, the Target Distance
is set to +d. Otherwise, if d standard ﬁll operations are re-
quired, the Target Distance is set to -d.
In this example, one standard dig operation is needed (i.e.,
one hole should be dug) so that Create_Switch can place
switch->name at the target position. In other words, the
Target Distance of original layout of POC is +1.
Delta Distance Analysis Heap layout primitives are usu-
ally not standard. And we evaluate how many standard dig or
ﬁll operations a primitive is equivalent to. We also utilize the
shadow program to evaluate the Target Distance. Assum-
ing the Target Distance before and after inserting a primi-
tive are d1 and d2 respectively, then the Delta Distance of
this primitive is d2-d1.
In this example, the Delta Distance of primitives
Create_Switch, Create_Router and Delete_Switch
(combining with its dependant Create_Switch) are +2, +3 and
-2 respectively.
Linear Diophantine Equation Generation Given the
Target Distance to reduce and the Delta Distance of
each primitive, we could set up a Linear Diophantine
Equation [12] to calculate the count of each primitive re-
quired to reduce the Target Distance to zero (i.e., satisfy-
ing the expected layout constraint).
In this example, assuming the count of these primitives are
x1, x2, x3, we could build a Linear Diophantine Equation
as follows:
(cid:26) 2x1 + 3x2 − 2x3 + 1 = 0
x1,x2,x3 ≥ 0
By querying solvers like Z3[33], we could get a solu-
tion: (x1 = 0,x2 = 1,x3 = 2). Therefore, we will add one
Create_Router and two Delete_Switch primitives to the
program execution trace. Lastly, we could get the heap layout
operation primitive sequence as shown in Figure 1.
Exploit Generation By inserting the inferred primitive se-
quence to the original program trace, MAZE can generate a
program trace that could yield an expected heap layout. As a
result, we can utilize techniques like symbolic execution and
constraint solving to generate exploit samples. And this is the
ﬁnal output of MAZE.
3.3 Full Chain Exploit Composition
Given the exploitable memory layout generated by MAZE,
several other challenges need to be addressed in order to
generate a full chain exploit. For instance, defenses like ASLR
do not hinder MAZE from manipulating heap layout but could
block it from generating working exploits. So we need to
ﬁnd a solution to bypass such deployed security mechanisms.
These challenges are out of the scope of MAZE.
4 Heap Layout Primitives Analysis
Heap layout primitives are the building blocks for heap
layout manipulation. However, applications usually do not
expose interfaces for users to directly interact with the un-
derlying heap allocators. Existing solutions utilize repeatable
input fragments and reentrant system calls as primitives to
manipulate the heap layout, having limited application scope.
Note that, most applications are driven by different forms of
events (e.g., messages, commands, connections), and usually
have loops to dispatch event handlers (code snippets). These
handlers are reentrant and could be utilized as primitives to
interact with underlying heap allocators. We therefore extend
heap layout primitives to such reentrant code snippets.
4.1 Primitives Extraction
Since primitives are reentrant code snippets in function
dispatchers enclosed in loops, we could analyze the code
structure (i.e., control ﬂow graph) to recognize primitives.
In practice, the loop body of a function dispatcher is a
switch statement or a group of nested if-else branch statements
with related conditions. Each one of such switch cases or
branches usually represents a reentrant event handler.
Following the algorithm [34], we could ﬁrst identify can-
didate loops in target applications. Then, we could recover
potential switch statements and nested if-else statements in
candidate loops, following [35, 36]. Lastly, we mark switch
cases or if-else branches that have memory (de)allocation
operations as candidate reentrant code snippets.
If the count of candidate snippets in a loop exceeds a thresh-
old, then this loop is a candidate function dispatcher and the
reentrant code snippets are marked as candidate primitives.
The threshold should be more than one, in order to distinguish
from simple loops, e.g., a loop for memory write or reads. In
our experiment, we take a heuristic value 5 as the threshold.
If the program is complicated and have many candidate loops,
we can increase the threshold to reduce candidate primitives.
Primitives Extraction for Interpreters. MAZE also sup-
ports extracting primitives for language interpreters, e.g., PHP
and Python. Similar to previous solutions, MAZE utilizes a
fuzzer to generate test cases, and extracts each sentence in
scripts as a potential heap layout primitive.
USENIX Association
30th USENIX Security Symposium    1651
4.2 Primitive Semantics Analysis
The semantics of each primitive, e.g., the size of heap
(de)allocation, is critical for precise heap layout manipulation.
Therefore, we need to analyze primitive semantics ﬁrst.
Path Symbolization: Note that, a primitive is a code snip-
pet, which could also have internal branches and form may
paths. It is infeasible to analyze all paths to compose the
semantics of a primitive. Fortunately, we only care about
heap (de)allocations, and many basic blocks do not have such
operations. We therefore propose a novel technique path sym-
bolization to merge paths with similar heap operations.
First, we remove exception handling paths, since they can-
not serve as heap layout operation primitives. Second, for
two basic blocks in a primitive, if all sub-paths between them
have no heap operations, we will merge all these sub-paths
together as a symbolic sub-path and mark their basic blocks
as symbolic. Therefore, all paths of a primitive could be dras-
tically reduced to several symbolized paths, each consists of
a sequence of non-symbolic blocks and symbolic sub-paths.
Symbolic Execution: For each symbolized path, we will
evaluate its semantics with symbolic execution. We ﬁrst uti-
lize symbolic execution to ﬁnd a path from the program start-
ing point to the entry of this path, then iterate basic blocks in
this path as follows. When a symbolic block is iterated, we
will perform path traversal for the corresponding symbolic
sub-path, and aggregate the symbolic execution results. When
a non-symbolic blocks is iterated, symbolic execution is per-
formed as normal. An aggregated symbolic execution result
will be yielded for each symbolized path.
Note that, loops will cause path explosion issue for sym-
bolic execution as well. We mitigate this issue by unfolding
loops up to a limited number, e.g., a heuristic value 4.
Heap Allocation Size Inferrence After performing sym-
bolic execution, we could get the primitive’s allocation size. If
the size is symbolic, then we utilize the Satisﬁability Modulo
Theories (SMT) solver Z3 [33] to derive its value range.
Note that, a primitive with variable heap allocation sizes
can be used as a set of different primitives. For instance, if
we could allocate objects of size 0x20, 0x40 and 0x60 in a
primitive P with different inputs, then we could get three dif-
ferent primitives P_0x20, P_0x40, and P_0x60, which share
the same code snippet but have different heap effects. They
could be used to satisfy different object layout constraints.
4.3 Primitives Dependency Analysis
Primitives may depend on other primitives. For instance, a
ﬁle read operation has to take place after a ﬁle open operation.
Therefore, we have to analyze such dependencies and group
primitives with dependencies together.
Pairing Allocation and Deallocation: Given an object, it
is useful to recognize when it is allocated and freed. We ap-
plied a customized taint analysis to pair heap allocations and
deallocations. More speciﬁcally, we assign a unique birthmark
Figure 4: Overview of Heap Layout Primitive Assembly
tag to the object at each heap allocation site, and propagate
the tags along program execution. At each heap dealloca-
tion site, we will examine the object’s tag, and link it to the
corresponding heap allocation site.
Recognizing Path Dependency: Some sub-paths of a
primitive may depend on another primitive. As shown in Fig-
ure 1, Delete_Switch relies on the global variable glist,
which is set by another primitive Create_Switch.
Since the primitives exist in a function dispatch, the most
common dependency is maintained by variables (including
global variables) visible to the function dispatcher. We there-
fore examine the branch conditions of each primitive, and
check if it relies on some variables that are modiﬁed by other
primitives. If so, the former primitive is likely to depend on
the latter. Further, we will execute the former dependent prim-
itive without the latter primitive, and validate whether it will
crash. If yes, we can conﬁrm that the dependent primitive
relies on the latter primitive.
5 Heap Layout Primitive Assembly
Given the set of recognized heap layout manipulation prim-
itives, the next step is assembling them in a speciﬁc way and
adding them to the original program path taken by the POC
sample, to generate the expected heap layout.
5.1 Overview
Figure 4 shows the workﬂow of our solution. At the core,
a Dig & Fill algorithm (§5.2) is applied to manipulate the
heap layout. To determine how many dig and ﬁll primitives
are needed, we will measure (§5.3) Target Distance of the
expected layout and Delta Distance of each primitive, and
setup a Linear Diophantine Equation (§5.4) accordingly,
then solve it deterministically to resolve the count of each
primitive. In some cases, we cannot simply add the distances
of two primitives together. Therefore, we will pre-process
primitives to guarantee their linear additivity (§5.4.2).
Given the count of each primitive, we will add them to the
original POC path in an order guided by the primitive timing
principle (§5.5), and yield a new path that is likely to have
expected layout. For language interpreters (e.g., PHP), MAZE
inserts primitives (e.g., sentences) to the original POC, and
adjusts variable names in sentences based on the dependency.
Lastly, we will utilize symbolic execution to generate path
constraints of the new path and collect data constraints of
primitives (e.g., allocation size), and then query the SMT
solver Z3 [33] to generate exploit samples when possible.
1652    30th USENIX Security Symposium
USENIX Association
DistanceMeasureLinear Additivity Process(cid:39)(cid:76)(cid:82)(cid:83)(cid:75)(cid:68)(cid:81)(cid:87)(cid:76)(cid:81)(cid:72)(cid:3)(cid:40)(cid:84)(cid:88)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:54)(cid:72)(cid:87)(cid:88)(cid:83)(cid:3)(cid:43)(cid:72)(cid:68)(cid:83)(cid:3)(cid:47)(cid:68)(cid:92)(cid:82)(cid:88)(cid:87)(cid:3)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:86)(cid:80)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:70)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)Primitive Group(cid:791)(cid:71)(cid:81)(cid:51)(cid:82)(cid:38)(cid:3)(cid:51)(cid:68)(cid:87)(cid:75)Shifting(cid:99)(cid:48)(cid:88)(cid:79)(cid:87)(cid:76)(cid:16)(cid:57)(cid:68)(cid:85)(cid:76)(cid:68)(cid:69)(cid:79)(cid:72)(cid:3)(cid:51)(cid:68)(cid:87)(cid:75)(cid:3)(cid:40)(cid:71)(cid:76)(cid:87)(cid:99)(cid:55)(cid:90)(cid:82)(cid:16)(cid:57)(cid:68)(cid:85)(cid:76)(cid:68)(cid:69)(cid:79)(cid:72)(cid:3)(cid:43)(cid:68)(cid:79)(cid:73)(cid:3)(cid:40)(cid:84)(cid:88)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:54)(cid:48)(cid:55)(cid:86)(cid:82)(cid:79)(cid:89)(cid:72)(cid:85)EXP(cid:335)DistanceCorrectingPrimitiveGrouping(cid:73)(cid:85)(cid:72)(cid:72)(cid:335)(cid:51)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:87)(cid:76)(cid:80)(cid:76)(cid:81)(cid:74)(cid:71)For simplicity, we will start from discussing one object lay-
out constraint, and extend it to multi-object layout constraints
later (§5.6). Moreover, we will discuss the factors that affect
the success rate of heap layout manipulation in §5.7.
5.2 Dig & Fill Algorithm
As explained in Section 3.2.2, we will manipulate the heap
layout following a Dig & Fill algorithm. At a high level,
there are three cases:
• Win: At the time of allocating the target object O, it could
be placed exactly in the target hole P.
• Dig: At the time of allocating O, P is occupied by other
objects. In this case, we will dig some holes, by invoking
proper primitives, before allocating the occupying objects.
As a result, the occupying objects will fall into the holes
we prepare, then leave the target hole P to object O.
• Fill: At the time of allocating O, P is empty, but O still
falls into other holes. In this case, we will ﬁll those trap
holes, by invoking proper primitives, before allocating O,
and drive it to take the target hole P.
Therefore, placing a target object at a target hole can be
simpliﬁed as digging or ﬁlling multiple memory holes. On the
other hand, each heap layout primitive could be modelled as
a combination of multiple dig operations and ﬁll operations.
So, to generate the expected layout, we just need to ﬁgure out
the number of each primitive required and their order.
5.3 Distance Measurement
To ﬁgure out how many holes have to be dug or ﬁlled, we
will evaluate the Target Distance of the target object to the
target hole. On the other hand, we will evaluate how many
holes could be dug or ﬁlled by each primitive by evaluating
its Delta Distance.