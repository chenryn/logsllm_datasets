to the instance to ListClass pointer type and passing it to
set_null_to_list.
To prevent this attack, FLEXDROID veriﬁes the type of
pointer which belongs to the second condition of the valid
pointer. In VAT, FLEXDROID maintains a type of pointer for
each address entry. With this information, FLEXDROID accepts
pointers only if the addresses to which they point exist in VAT
and their types match the corresponding type entries in VAT.
D. Dynamic Permission Management
Dynamic code execution through various Java features (re-
ﬂection, dynamic class loading, native methods, multithread-
7
(a) Pseudocode of class A:
registering a callback
(b) Call stack when the callback
method is executed
Fig. 3: Example of an attack using dynamic code generation and
execution
ing, callback, etc.) blurs the boundaries between modules at
run time. More importantly, dynamic code instrumentation via
reﬂection makes it difﬁcult to maintain the mapping between
modules and permissions accurately. Reﬂection is a powerful
and widely-adopted feature that allows programmers to inspect
or modify any code at run time across Java classes for various
beneﬁts (e.g., logging). At the same time, reﬂection also opens
a host of security threats. For instance, a malicious third-party
library may use reﬂection to generate code for an existing
host module, and dynamically load and run the code generated
to perform harmful actions in the name of the existing host
module. Or, it may even simply change its class name at run
time to pretend that it is a trusted host module class.
library
class
com.malicious.lib.A (A) generates a new code that
contains a harmful method. A then loads the new code
with the name of a trusted host class com.host.B (B) and
registers the harmful method of B as a callback method from
another trusted host class com.host.C (C) (see Figure 3a).
Afterwards, A may terminate its execution, disappearing out
of the call stack trace, before C invokes the harmful callback
method of B (see Figure 3b). This way, a malicious module
can perform harmful actions without its name appearing in
the call stack trace. This could happen as a result of the call
stack not capturing the context where the callback method
was registered during the execution of a callback.
a malicious
example,
suppose
For
Another example is related to Java thread creation, where
the call stack of a new thread created does not capture the
context of the parent thread. Suppose a malicious class A
invokes a method of a trusted class B and B creates a new
thread. Figure 4 shows the call stack trace of the parent thread
and the new child thread. Then, the call stack trace of the new
thread contains the method of B but no trace related to A. This
way, the malicious class A may perform the confused-deputy
attack to exploit the permissions of the trusted class B.
Note that the use of the callback does not affect the bound-
ary since when the callback method is called, the principal
of callback method can still be identiﬁed from the call stack.
Besides, even in the case where the callback is intertwined with
reﬂection and class loading, although it looks complicated, is
just another case of reﬂection.
As such, the boundaries between modules become unclear
with dynamic code generation and execution. If we keep
a static mapping between modules and permissions,
is
unlikely to prevent untrusted modules from exploiting dynamic
it
Fig. 4: Example of an attack using thread creation
code execution to help or perform malicious actions. Thus,
FLEXDROID enforces dynamic permission management for
modules to resolve the problem. A basic idea behind the man-
agement is that a runtime instance of a module is assigned a set
of permissions granted at app installation, except two cases of
dynamic class loading and thread creation. As explained above,
a malicious module can make use of reﬂection or dynamic
code generation along with dynamic class loading to take
harmful actions without leaving any trace on the call stack
(see Figure 3b). In addition, Java thread creation is another
feature that malicious modules can exploit for similar attacks,
as shown in Figure 4. Hence, in those two cases, FLEXDROID
sets the permissions of a runtime instance of a module with
respect to not only its installation-time permissions but also
the context at runtime.
For ease of presentation, let us deﬁne some terms before
presenting the rules for dynamic permission management.
Each module M has a set of installation-time permissions
(denoted by PI (M )). Let (cid:104)M, T(cid:105) indicate a runtime instance
of module M running on thread T and P ((cid:104)M, T(cid:105)) represent
its permissions. For each thread T , its permission Pτ (T ) is
deﬁned as the intersection of the permissions of all modules
on the call stack of T , i.e.,
(cid:92)
Pτ (T ) =
∀Mi∈CS(T )
P ((cid:104)Mi, T(cid:105)),
where CS(T ) is a set of modules on the call stack of thread
T .
(cid:104)M, T(cid:105)
When a new runtime
created,
FLEXDROID determines its permissions depending on how it
is created in the following way:
instance
is
• If (cid:104)M, T(cid:105) is created via dynamic class loading, its per-
missions are set to the intersection of its installation-time
permissions and the thread’s permissions. P ((cid:104)M, T(cid:105)) =
PI (M ) ∩ Pτ (T ).
• If (cid:104)M, T(cid:105) is created via thread creation,
its permis-
sion is determined as the intersection of its installation-
time permissions and the parent
thread’s permissions.
P ((cid:104)M, T(cid:105)) = PI (M ) ∩ Pτ (T (cid:48)), where a thread T
(cid:48) is a
parent thread of T.
• Otherwise, P ((cid:104)M, T(cid:105)) = PI (M ).
A similar reasoning to the above rules was used to address
the confused-deputy attack [24, 26, 29].
V.
IMPLEMENTATION
We implemented a prototype of FLEXDROID on Android
4.4.4 (KitKat) and Linux kernel 3.4.0. We have modiﬁed
various components of the Android framework, the Dalvik
8
package com.malicious.lib class A     method launch_attack         generateClass(“com.host.B”)         generateMethod(“com.host.B”, “malFunction”)         loadClass(“com.host.B”)         C.registerCallback(new B())     end method end class P Call stack ê H  com.host.C.runCallback L  com.host.B.malFunc P Call stack ê L  com.malicious.lib.A L  com.host.B P Call stack ê L  com.host.B   Child thread Parent thread Create #Files
Insertion Deletion
Kernel
Android Framework
Dalvik VM
Bionic
Others
Total
28
46
24
23
12
133
1,831
1,466
6,081
2,827
95
12,300
25
77
22
70
24
218
TABLE IV: FLEXDROID’s component-wise complexity in terms of
lines of code.
VM, the Bionic, the Linux kernel, the Java core library, the
Binder library (user layer interface of Binder IPC), and the
SELinux setting, which in total consists of 12,300 LoC across
133 ﬁles (see Table IV).
In the rest of this section, we ﬁrst describe the detailed
implementation of inter-process stack inspection. We then
present how FLEXDROID handles general Java techniques
(i.e., JNI and reﬂection) that can be used to bypass our
security mechanism. Next we share our experience to cope
with deadlocks and optimize performance further during the
implementation of FLEXDROID.
A. Inter-Process Stack Inspection
There are three key components involved in the inter-
process stack inspection; stack tracer, stack transmission chan-
nel, and permission checkers (e,g., the Android framework’s
Package Manager (PM) and the Linux kernel’s ACL) which
communicate with the stack tracer to obtain Dalvik call trace
and conduct access control.
Stack tracer. In order to send the Dalvik call trace to per-
mission checkers, FLEXDROID adds a unique stack tracer into
each app right after Zygote is forked at the app’s initialization
time. The stack tracer enrolls itself via the ioctl system
call in the stack transmission channel. After registration, the
channel stores it with its process ID (PID) as a key into the
RBTree and is inactivated until a request comes from either of
the permission checkers.
In detail, the stack tracer performs the stack inspection for
a target thread as follows. It ﬁrst holds Dalvik VM thread lock
to block garbage collection. It then suspends the target thread
and traces the stack frame pointer to get the call trace (utilizing
DVMFillInStackTraceRaw which is originally used to print
stack when an exception occurs). It resumes the thread and
releases the Dalvik VM thread lock.
Stack transmission channel. The stack transmission channel
is a special purpose device driver that is designed to handle
the communication between a permission checker and a stack
tracer. The communication gets started by the permission
checker when it leaves a stack inspection request for a target
thread of TID (Thread ID) and PID. The channel then ﬁnds
and wakes up the pre-registered stack tracer for the process of
PID and sends the target thread information (TID) to the stack
tracer. The channel waits for a response from the stack tracer
and forwards the call trace to the permission checker.
The length of Dalvik call traces are often longer than 1000
bytes, although it depends on the current depth of the call
sequence. To reduce the amount of exchanging data for a
inter-process stack inspection, FLEXDROID assigns a unique
integer key to each module speciﬁed by each app developer in
the manifest. At the initial time, PM determines the mapping
between a key and a module. A stack tracer receives part of
the mapping related to its app, when it is created. Afterwards,
a stack tracer sends only keys of the modules shown in the
call trace for inter-process stack inspection.
Although the use of keys reduce the amount of data to ex-
change, it requires additional costs to ﬁnd keys corresponding
to the modules in the call trace. A naive approach is to compare
the name of each module in the call trace with each module
name listed in the mapping table. This approach can incur a
signiﬁcant amount of string comparison overheads. We avoid
the overheads by caching memory addresses of modules. In
other words, each stack tracer creates a table, which maps the
address of a module to its key, so that the stack tracer simply
compares the address of each module in the call trace to each
address in the table.
There are two things worth mentioning in the imple-
mentation of the stack transmission channel. First, SELinux
(integrated since Android 4.3 (Jelly Bean)) enforces a strict
security policy that does not allow any user-space process to
access a device driver (e.g., stack transmission channel) by
default. We re-conﬁgured SELinux to allow all processes to
access the channel. Then, to prevent threads that are neither
a stack tracer nor a permission checker from intervening in
the communication between a permission checker and a stack
tracer, the stack transmission channel does not return anything
when the caller is not a permission checker and a stack
tracer, by checking its PID and TID. Second, since both the
permission checkers and the stack tracers access the channel
asynchronously through write and read system calls, it is
subject to race conditions. Thereby we enforce synchronized
access to the channel and employ a wake queue for waiting
and waking up for channel access.
Permission checker. During access control, the permission
checkers need to know authorized privileges of each module.
Thus at app install time, our modiﬁed PackageParser parses
a manifest of an app (i.e., flexdroid tags), and passes
permissions for user-space resources to PM and those for
kernel-space resources to the kernel, respectively. PM and the
kernel keep them as a key-value data structure, where a key is
a Java package name of each third-party library, and a value
is the granted permission set for the library. Because several
apps can have different permission sets for the same library, the
key-value storage is allocated to each app. Note that for a ﬁner-
grained permission management, FLEXDROID allows multiple
sub-packages of a single library to have different permission
sets.
To mediate access from third-party libraries, we modiﬁed
system services to check accesses to user-space resources
(Android permission model) and to kernel-space resources
(GID-controlled ACL routine). For user-space resources, An-
droid’s PM uses the checkUidPermission method to per-
form permission checks based on the app’s UID. Instead,
FLEXDROID’s PM provides the checkThreadPermission
9
method for access control in the granularity of the thread.
To enable this, we modiﬁed most Android system services to
invoke the checkThreadPermission method rather than the
checkUidPermission method. For kernel-space resources,
on the other hand, we modiﬁed Linux’s ACL to adopt the
inter-process stack inspection.
B. JNI Sandbox
As stated in §IV-C, we implement JNI sandbox on
FLEXDROID based on hardware-based fault isolation using
memory domain supported by ARM architecture. The goal of
our implementation is to conﬁne memory access by JNI to the
JNI sandbox. At the same time, it ensures that the JNI code
should maintain their functionality without any modiﬁcation.
Our implementation mainly consists of a sandbox switch,
custom linker, separate heap in JNI sandbox, and Java API
wrapper used in JNI.
In ARM architecture, each 1MB virtual memory, called
section, has a domain ID (from 0 to 15) as a ﬁeld in its page
directory entry. A domain is a collection of memory regions
having the same domain ID. Each domain has two bits in the
Domain Access Control Register (DACR). According to the
values in these bits, attempts to access regions belonging to
the domain can: 1) generate a domain fault (00); 2) be allowed
only if the permissions set in the page table allow (01); 3) be
allowed regardless of the permissions set in the page table (11)
3. For instance, the system can disallow the code to access a
speciﬁc domain by setting the corresponding its two bits to 00.
Since each core has its own DACR, it is possible to control
memory regions that a speciﬁc thread can access.
Sandbox switch. FLEXDROID uses domain 3 for JNI sandbox
in FLEXDROID, while three domains (0 to 2) are reserved for
kernel, user-space (Java domain in FLEXDROID), and device
memory, respectively. To assign a domain ID to speciﬁc con-
tiguous memory regions, we introduce a sys_mark_domain
system call which takes the base address and size of the regions
that will be used as a JNI sandbox. Assuming that JNIs and
shared libraries invoke malloc for memory allocation, rather
than mmap, FLEXDROID assigns 512MB to the JNI sandbox
for each process using mmap and sys_mark_domain. Then,
FLEXDROID allocates the stack, heap, text, and data of JNI
within the 512MB region.
When a thread in an app executes Java code, FLEXDROID
allows the thread to access both the Java and JNI domain by
setting its DACR. When the thread executes JNI, FLEXDROID
updates DACR to prevent the thread from accessing the Java
domain. However, switching DACR alone will
lead to a
domain fault since the thread can attempt to access memory
regions outside the JNI domain such as the stack, heap of the
process.
We deﬁne the context of sandbox as the combination
of DACR, Program Counter (PC), Stack Pointer (SP), and
Thread Local Storage (TLS), and we call switching those four
registers sandbox switch. It is worth noting that we do not
need to switch anything for the heap (acquired by malloc)
and shared libraries, since addresses of functions used in JNI
310 is reserved.
are determined at linking time of JNI, which are separate from
the ones used in Java domain.
For sandbox switch, we add two system calls named
sys_jni_enter and sys_jni_exit. Switching to JNI sand-
box invokes sys_jni_enter to save the current DACR, PC,
and SP and change them to new ones. It also updates TLS
using set_tls system call. Switching to Java domain involves
restoring the saved sandbox context. sys_jni_enter/exit
uses struct pt_regs* to modify PC and SP while special
ARM instructions (MCR and MRC) are used to update DACR
and TLS.
While JNI is executed, it can call Java APIs through the
JNIEnv structure to interact with the Java context. Since JNI
cannot directly call Java APIs located at the Java domain,
an interface between JNI and Java APIs is needed (i.e.,
trampoline). Also, as mentioned in §IV-C, the validity and type
of a pointer passed from JNI as an argument of a Java API
should be checked. To enable this, we implement wrappers
for all 228 Java APIs, two system calls, sys_java_enter
and sys_java_exit, and Java API handler. Each Java API
wrapper invokes sys_java_enter system call with the mar-
shalled arguments and the name of the API function, and then
the system call activates the Java API handler. The handler
validates the pointer arguments, calls the actual Java API, and
invokes sys_java_exit system call which restores the saved
JNI context. (see Java API handler below for details).
During the implementation, we found that a shared library
libjnigraphics.so in the Android framework layer directly
accesses the Java domain without calling Java APIs. It receives
an integer from a Java API and casts it to a pointer to access
the memory of the address. We implement trampolines for
AndroidBitmap_getInfo, AndroidBitmap_lockPixels,
AndroidBitmap_unlockPixels of libjnigraphics.so.
Since the SP and TLS switch need a stack in the JNI
sandbox, FLEXDROID provides an on-demand 1MB stack to
each thread running JNI. FLEXDROID supports 64 JNI stacks
at maximum, which are managed as a pool. Since JNI stack
grows upward from its bottom, FLEXDROID sets the highest
address of JNI stack as the base address of JNI’s TLS. A stack
for a newly created thread in JNI is also allocated from this
stack pool.
Right after the sandbox switch, Foreign Function Interface
(FFI) is called to invoke the JNI function as JVM usually does.
FLEXDROID marshals arguments in JNI’s stack that will be
passed to FFI.
Custom Linker. We implement a custom linker by modifying
the original linker in Android. We add dlopen_in_jni in the
linker to load JNI code to the JNI sandbox, while Dalvik VM
originally loads them using dlopen. dlopen maps each shared
library ﬁle (.so) to memory region using mmap system call.
Since mmap can allocate the memory region outside the JNI
sandbox, dlopen_in_jni should not use the mmap. Instead,
we implement a wrapper of mmap to map .so ﬁles to the
memory region inside the JNI sandbox.
The original Android linker manages information of shared
libraries loaded by dlopen using a linked list for reusability.
To reuse shared libraries loaded into the JNI sandbox, our
10
custom linker maintains another linked list which manages
information of shared libraries loaded by dlopen_in_jni.
Among shared libraries, the libc is required to be cus-
tomized to support the JNI sandbox. The libc provides a
process with important information for constructing JNI ex-
ecution environment, including system environment variables
and arguments of the created process. Because of this, when
initializing the libc, FLEXDROID copies the variables and
arguments from the Java domain into the JNI sandbox so that
the JNI code can access that information.