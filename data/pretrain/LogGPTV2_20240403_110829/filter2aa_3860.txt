## Sandbox (pwn, 5p)
	Escape from this broken sandbox
	notice: You have to solve the warmup task first. And try to get
	the flag at /home/sandbox/flag
We were given small [Linux binary](sandbox):
```
sandbox: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=d833f31d8d8592636906d44b40da9bcdbc0d686b, stripped
```
Based on task title and description we suspect that Warmup challenge solved previously may be part of this tasks.
We verify this by run Warmup exploit against new server.
As expected, exploit successfully retrieved flag from */home/warmup/flag* file.
The same exploit however fails to retrieve */root/home/sandbox/flag*.
We suspect that in order to solve the tasks, we need to bypass sandbox implemented by the provided binary.
### Sandbox Analysis
We used Radare2 to disassemble the binary.
The binary implements simple sandbox that inspects syscalls from monitored binary using ptrace.
This functionality is implemented by subroutine 0x00400b50.
Syscall inspection is as follows:
```
|           0x00400c3e      488d742410     lea rsi, [rsp + 0x10]       ; struct user ctx
|           0x00400c43      89df           mov edi, ebx
|           0x00400c45      e876010000     call fcn.ptrace_getregs
|           0x00400c4a      488b84248800.  mov rax, qword [rsp + 0x88] ; ctx.regs.orig_rax
|           0x00400c52      4883f805       cmp rax, 5                  ; = SYS32_open
|       ,= 0x00400b27      4889c7         mov rdi, rax
|       |   0x00400b2a      e8c1fbffff     call sym.imp.free
|       `-> 0x00400b2f      488b8424f810.  mov rax, qword [rsp + 0x10f8]
|           0x00400b37      644833042528.  xor rax, qword fs:[0x28]
|       ,= 0x00400b4b      e8c0fbffff     call sym.imp.__stack_chk_fail ;[9]
```
We discovered potential issue with the above, where results of *realpath* subroutine may change depending on process.
Typical example is accessing **/proc/self** that links to different location depending on PID of calling process.
We didn't find any other issues in provided binary.
### Bypass Approach
We spent some time experimenting with different pathnames that may be interpreted differently for different processes.
Finally we decided to use following pathname:
```
/proc/self/task/[MONITORED_PROCESS_PID]/root
```
The above pathname:
* points to root directory when referred by monitored process and
* does not exists when referred by sandbox process, allowing for syscall to continue without modification.
As we don't know PID of monitored process, we will attempt to bruteforce this PID from within our exploit.
### Exploit Implementation
Out exploit is based on code from Warmup flag, were we modified ROP chain and added new stage.
The ROP chain has the following steps:
1. read next stage into data area of exploited binary
2. write *SYS_mprotect* bytes using 0x08048135 to set eax register
3. execute 0x08048122 that performs syscall using pre-set eax, this will modify permission of data area to READ+WRITE+EXECUTE
4. jump to next stage
The next stage has the following steps:
1. bruteforces MONITORED_PROCESS_PID to open */proc/self/task/[MONITORED_PROCESS_PID]/root/home/sandbox/flag*
2. read the flag into memory
3. write content of buffer to standard output
Attached [exploit.py](exploit.py) was used to retrieve flag during CTF.