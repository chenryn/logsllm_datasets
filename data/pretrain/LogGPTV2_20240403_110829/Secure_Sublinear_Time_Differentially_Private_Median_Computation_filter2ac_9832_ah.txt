swaps elements such that every element of one half is greater
than every element of the other half.
F. Random Draw
We implemented RANDOMDRAW, see Algorithm 7, with
rejection sampling using efﬁcient operations, namely XOR,
OR, AND, comparison. Rejection sampling is unbiased, how-
ever, for a ﬁxed input size of k nonces it might abort with
probability at most 2−k11. Rejection sampling (without abort)
is used in Apple’s macOS [37]. For our evaluation in Sec-
tion VI we used k = 20.
An alternative to rejection sampling is a slightly biased
sampling algorithm without abort requiring only one nonce
instead of k per party: If the masked XOR of nonces (r) is
larger than M one uses r − M as the sampled output. We
compared biased sampling with rejection sampling (k = 20)
using the median of 20 runs for our largest circuit ( =
0.25,|D| = 2 · 106) with approximately 100 ms delay and
11We now consider the worst-case rejection rate, i.e., comparison r  ds
e
2
Algorithm 7 Algorithm RANDOMDRAW with parties A, B
based on [37].
Input: Max. value M, lists of k nonces NA, NB from A, B.
Output: Uniform random integer in [0, M )
bits to 1 in mask
//Find most significant 1-bit in M , set following
1: c ← 0
2: mask ← 0
3: for i ← bitlength b to 1 do
4:
5:
6: end for
//Rejection sampling with abort
c ← c OR ith bit of M
ith bit of mask ← c
7: s ← ⊥
8: for i ← 1 to k do
r ← NA[i] XOR NB[i]
9:
r ← r AND mask
10:
if r 100 INDICATES NONE WERE FOUND FOR UP TO 100 CHANGES.
DB
DA
Wages [51]
Transactions [54]
Times [54]
Payments [11]
Weights [33]
Quantities [33]
Wages
[51]
58.6 ± 0.26
76.6 ± 9.59
63.7 ± 0.22
68.9 ± 0.35
55.0 ± 1.77
68.3 ± 0.63
Transactions
[54]
50.7 ± 0.25
50 ± 0.18
64.9 ± 0.20
59.8 ± 0.19
49.6 ± 0.15
64.7 ± 0.31
Times
[54]
49.7 ± 0.13
50.5 ± 0.26
50.3 ± 0.18
>100
50.9 ± 0.18
51 ± 0.25
Payments
[11]
50.0 ± 0.17
48.5 ± 0.18
50 ± 0.25
50 ± 0.15
50.7 ± 0.14
51 ± 0.25
Weights
[33]
53.9 ± 0.26
72.3 ± 0.52
61.2 ± 0.20
71.4 ± 1.26
61.2 ± 0.20
54.5 ± 0.18
Quantities
[33]
50.9 ± 0.24
55.6 ± 0.16
62.5 ± 0.10
57.9 ± 0.13
50.5 ± 0.24
59.6 ± 0.13
AVERAGE & MINIMUM CHANGES IN DB TO SAMPLE A
TABLE V.
NEIGHBOR THAT IS NOT A PRUNE-NEIGHBOR W.R.T. DA, WHERE DA
CONSITS OF 284K CREDIT CARD TRANSACTIONS [54]. EVALUATED FOR
52 000 NEIGHBORS (ALL COMBINATIONS OF UP TO 50 REMOVALS AND 50
ADDITIONS WITH 20 SAMPLES PER COMBINATION) EVALUATED FOR
 ∈ {0.25, 0.5, 1, 2} (WITH 95% CONFIDENCE INTERVAL FOR AVERAGE),
AND >100 INDICATES NO VIOLATION WAS FOUND FOR UP TO 100
CHANGES.
DB
Open Payments [11]
(6M payments)
California public salaries [51]
(71k wages)
Walmart supply chain [33]
(175k shipment weights)
Walmart supply chain [33]
(175k shipment quantities)
Credit card [54]
(284k transaction times)

0.25
0.5
1
2
0.25
0.5
1
2
0.25
0.5
1
2
0.25
0.5
1
2
0.25
0.5
1
2
Avg.
Min.
>100 >100
>100 >100
37
30
50.1 ± 0.26
48.5 ± 0.18
>100 >100
>100 >100
65
65
76.6 ± 25.38
76.6 ± 9.59
>100 >100
>100 >100
36
36
72.3 ± 0.73
72.3 ± 0.52
>100 >100
>100 >100
23
23
55.6 ± 0.23
55.6 ± 0.16
>100 >100
>100 >100
>100 >100
20
50.5 ± 0.26
changes for  ∈ {0.25, 0.5, 1, 2} where DA consists of credit
card transactions from [54]. Note that we list the minimum
over all pruning steps (i.e., the value for minimum changes can
be the same for different pruning steps and their corresponding
epsilon value).
18