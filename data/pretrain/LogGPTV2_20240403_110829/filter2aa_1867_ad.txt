换 fixedFastReq 的url
7. 设置  fixedFastReq  的 headers   method 
8. 如果请求的类型是  multipart/form-Data  通过 util.DealMultipart  处理body后 更新到  fixedFastReq 
9. 替换完后发起请求通过  util.DoFasthttpRequest  返回  proto.Response 
// 根据原始请求 + rule 生成并发起新的请求 
func (controller *PocController) DoSingleRuleRequest(rule *Rule) (*proto.Response, error) { 
fastReq := controller.Request.Fast 
// fixReq : 根据规则对原始请求进行变形 
fixedFastReq := fasthttp.AcquireRequest() 
fastReq.CopyTo(fixedFastReq) 
curPath := string(fixedFastReq.URI().Path()) 
affects := controller.Plugin.Affects 
switch affects { 
// param级 
case AffectAppendParameter, AffectReplaceParameter: 
for k, v := range rule.Headers { 
fixedFastReq.Header.Set(k, v) 
} 
return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects) 
// 
content级 
case AffectContent: 
return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects) 
// dir级 
case AffectDirectory: 
// 目录级漏洞检测 判断是否以 "/"结尾 
if curPath != "" && strings.HasSuffix(curPath, "/") { 
// 去掉规则中的的"/" 再拼 
curPath = fmt.Sprint(curPath, strings.TrimPrefix(rule.Path, "/")) 
} else { 
curPath = fmt.Sprint(curPath, "/" ,strings.TrimPrefix(rule.Path, "/")) 
} 
// server级 
case AffectServer: 
curPath = rule.Path 
// url级 
case AffectURL: 
//curPath = curPath, strings.TrimPrefix(rule.Path, "/")) 
default: 
} 
// 兼容xray: 某些 POC 没有区分path和query 
curPath = strings.ReplaceAll(curPath, " ", "%20") 
curPath = strings.ReplaceAll(curPath, "+", "%20") 
fixedFastReq.URI().DisablePathNormalizing= true 
fixedFastReq.URI().Update(curPath) 
for k, v := range rule.Headers { 
fixedFastReq.Header.Set(k, v) 
} 
fixedFastReq.Header.SetMethod(rule.Method) 
// 处理multipart 
contentType := string(fixedFastReq.Header.ContentType()) 
if strings.HasPrefix(strings.ToLower(contentType),"multipart/form-Data") && strings.Contains(rule.Body,"\n\n") { 
multipartBody, err := util.DealMultipart(contentType, rule.Body) 
if err != nil { 
return nil, err 
} 
fixedFastReq.SetBody([]byte(multipartBody)) 
}else { 
fixedFastReq.SetBody([]byte(rule.Body)) 
} 
return util.DoFasthttpRequest(fixedFastReq, rule.FollowRedirects) 
} 
raw接口
 scanRoutes.POST("/raw/", scan2.Raw)  
 api\routers\v1\scan\scan\scan.go#92 
1. 会先将raw存成文件
2. 读取raw文件生成req  http.ReadRequest(bufio.NewReader(bytes.NewReader(raw))) 
3. 之后也是创建任务到管道 只是从原来的根据目标生成一个req包变成解析raw转成一个req
func Raw(c *gin.Context) { 
scanType := c.PostForm("type") 
vulList := c.PostFormArray("vul_list") 
remarks := c.PostForm("remarks") 
if scanType != "multi" && scanType != "all" { 
c.JSON(msg.ErrResp("扫描类型为multi或all")) 
return 
} 
target, err := c.FormFile("target") 
if err != nil { 
c.JSON(msg.ErrResp("文件上传失败")) 
return 
} 
// 存文件 
filePath := file.UploadTargetsPath(path.Ext(target.Filename)) 
err = c.SaveUploadedFile(target, filePath) 
oreq, err := http.ReadRequest(bufio.NewReader(bytes.NewReader(raw))) 
if err != nil || oreq == nil { 
c.JSON(msg.ErrResp("生成原始请求失败")) 
return 
} 
if !oreq.URL.IsAbs() { 
scheme := "http" 
oreq.URL.Scheme = scheme 
oreq.URL.Host = oreq.Host 
} 
plugins, err := rule.LoadDbPlugin(scanType, vulList) 
if err != nil || plugins == nil { 
c.JSON(msg.ErrResp("插件加载失败" + err.Error())) 
return 
} 
oReqUrl := oreq.URL.String() 
token := c.Request.Header.Get("Authorization") 
claims, _ := util.ParseToken(token) 
task := db.Task{ 
Operator: claims.Username, 
Remarks: remarks, 
Target:  oReqUrl, 
} 
db.AddTask(&task) 
taskItem := &rule.TaskItem{ 
OriginalReq: oreq, 
Plugins:     plugins, 
Task:        &task, 
} 
c.JSON(msg.SuccessResp("任务下发成功")) 
go rule.TaskProducer(taskItem) 
go rule.TaskConsumer() 
return 
} 
List
 scanRoutes.POST("/list/", scan2.List)  
 api\routers\v1\scan\scan\scan.go#175  
将目标文件存下来 解析遍历创建多个task任务 
后续也是一样的创建的任务到管道
func List(c *gin.Context) { 
scanType := c.PostForm("type") 
vulList := c.PostFormArray("vul_list") 
remarks := c.PostForm("remarks") 
if scanType != "multi" && scanType != "all" { 
c.JSON(msg.ErrResp("扫描类型为multi或all")) 
return 
} 
target, err := c.FormFile("target") 
if err != nil { 
c.JSON(msg.ErrResp("文件上传失败")) 
return 
} 
// 存文件 
filePath := file.UploadTargetsPath(path.Ext(target.Filename)) 
err = c.SaveUploadedFile(target, filePath) 
if err != nil || !file.Exists(filePath) { 
c.JSON(msg.ErrResp("文件保存失败")) 
return 
} 
// 加载poc 
plugins, err := rule.LoadDbPlugin(scanType, vulList) 
if err != nil{ 
c.JSON(msg.ErrResp("插件加载失败" + err.Error())) 
return 
} 
if len(plugins) == 0 { 
c.JSON(msg.ErrResp("插件加载失败" + err.Error())) 
return 
} 
targets := file.ReadingLines(filePath) 
token := c.Request.Header.Get("Authorization") 
claims, _ := util.ParseToken(token) 
var oReqList []*http.Request 
var taskList []*db.Task 
for _, url := range targets { 
oreq, err := util.GenOriginalReq(url) 
if err != nil { 
continue 
} 
task := db.Task{ 
Operator: claims.Username, 
Remarks: remarks, 
Target:  url, 
} 
db.AddTask(&task) 
oReqList = append(oReqList, oreq) 
taskList = append(taskList, &task) 
} 
if len(oReqList) == 0 || len(taskList) ==0 { 
c.JSON(msg.ErrResp("url列表加载失败")) 
return 
} 
c.JSON(msg.SuccessResp("任务下发成功")) 
for index, oreq := range oReqList { 
taskItem := &rule.TaskItem{ 
OriginalReq: oreq, 
Plugins:     plugins, 
Task:        taskList[index], 
} 
go rule.TaskProducer(taskItem) 
go rule.TaskConsumer() 
} 
return 
} 
对于cel-go的使用理解
这里抄了 pocassist的cel-go的代码 加上自己的注释理解 写了一个demo 
简单对cel-go进行一个使用
/* 
 * @Date: 2022-03-15 16:20:30 
 * @LastEditors: recar 
 * @LastEditTime: 2022-03-16 10:29:56 
 */ 
package main 
import ( 
"crypto/md5" 
"fmt" 
"math/rand" 
"strings" 
"cel/proto" 
"github.com/google/cel-go/cel" 
"github.com/google/cel-go/checker/decls" 
"github.com/google/cel-go/common/types" 
"github.com/google/cel-go/common/types/ref" 
"github.com/google/cel-go/interpreter/functions" 
exprpb "google.golang.org/genproto/googleapis/api/expr/v1alpha1" 
) 
// 定义一个自定义函数 
// 判断s1是否包含s2, 忽略大小写 
// 描述 
var iContainsDec = decls.NewFunction("icontains", decls.NewInstanceOverload("string_icontains_string", []*exprpb.Type{decl
// 实现 
// 这里的Operator 是运算符 即 字符串.icontains(字符串) 
// Binary 是定义这个函数 通过ref反射动态执行 先判断类型是否是字符串 然后再执行 strings.Contains 
var iContainsFunc = &functions.Overload{ 
Operator: "string_icontains_string", 
Binary: func(lhs ref.Val, rhs ref.Val) ref.Val { 
v1, ok := lhs.(types.String) 
if !ok { 
return types.ValOrErr(lhs, "unexpected type '%v' passed to icontains", lhs.Type()) 
} 
v2, ok := rhs.(types.String) 
if !ok { 
return types.ValOrErr(rhs, "unexpected type '%v' passed to icontains", rhs.Type()) 
} 
return types.Bool(strings.Contains(strings.ToLower(string(v1)), strings.ToLower(string(v2)))) 
}, 
} 
// 自定义函数 randomInt 
var randomIntDec = decls.NewFunction("randomInt", decls.NewOverload("randomInt_int_int", []*exprpb.Type{decls.Int, decls.I
var randomIntFunc = &functions.Overload{ 
Operator: "randomInt_int_int", 
Binary: func(lhs ref.Val, rhs ref.Val) ref.Val { 
from, ok := lhs.(types.Int) 
if !ok { 
return types.ValOrErr(lhs, "unexpected type '%v' passed to randomInt", lhs.Type()) 
} 
to, ok := rhs.(types.Int) 
if !ok { 
return types.ValOrErr(rhs, "unexpected type '%v' passed to randomInt", rhs.Type()) 
} 
min, max := int(from), int(to) 
return types.Int(rand.Intn(max-min) + min) 
}, 
} 
//  字符串的 md5 
var md5Dec = decls.NewFunction("md5", decls.NewOverload("md5_string", []*exprpb.Type{decls.String}, decls.String)) 
var md5Func = &functions.Overload{ 
Operator: "md5_string", 
Unary: func(value ref.Val) ref.Val { 
v, ok := value.(types.String) 
if !ok { 
return types.ValOrErr(value, "unexpected type '%v' passed to md5_string", value.Type()) 
} 
return types.String(fmt.Sprintf("%x", md5.Sum([]byte(v)))) 
}, 
} 
// 初始化 cel的环境变量即自定义的函数和变量 
// 是 Library接口的实现 
/* 
type Library interface { 
// CompileOptions returns a collection of funcitional options for configuring the Parse / Check 
// environment. 
CompileOptions() []EnvOption 
// ProgramOptions returns a collection of functional options which should be included in every 
// Program generated from the Env.Program() call. 
ProgramOptions() []ProgramOption 
} 
*/ 
type CustomLib struct { 
// 声明 
envOptions []cel.EnvOption 
// 实现 
programOptions []cel.ProgramOption 
} 
func (c *CustomLib) CompileOptions() []cel.EnvOption { 
return c.envOptions 
} 
func (c *CustomLib) ProgramOptions() []cel.ProgramOption { 
return c.programOptions 
} 
// 第一步定义 cel options
func InitCelOptions() CustomLib { 
custom := CustomLib{} 
custom.envOptions = []cel.EnvOption{ 
cel.Container("proto"), 
// 
注入一种类型 
cel.Types( 
&proto.UrlType{}, 
&proto.Request{}, 
&proto.Response{}, 
), 
// 定义变量 
cel.Declarations( 
decls.NewVar("request", decls.NewObjectType("pkg.proto.Request")), 
decls.NewVar("response", decls.NewObjectType("pkg.proto.Response")), 
), 
// 定义函数 
cel.Declarations(iContainsDec, randomIntDec, md5Dec), 
} 
// 实现的函数 
custom.programOptions = []cel.ProgramOption{cel.Functions(iContainsFunc, randomIntFunc, md5Func)} 
return custom 
} 
// 第二步 根据cel options 创建 cel环境 
func InitCelEnv(c *CustomLib) (*cel.Env, error) { 
// cel.Lib 的参数是Library 是 CustomLib 的接口 
return cel.NewEnv(cel.Lib(c)) 
} 
// 
如果有set：追加set变量到 cel options 
// 这里的set 就是yaml的set 定义的一些变量 
func (c *CustomLib) AddRuleSetOptions(args []map[string]string) { 
for _, arg := range args { 
// 在执行之前是不知道变量的类型的，所以统一声明为字符型 
// 所以randomInt虽然返回的是int型，在运算中却被当作字符型进行计算，需要重载string_*_string 
for k := range arg { 
v := arg[k] 
var d *exprpb.Decl 
// 下面设置了这三种字符串设置类型 
if strings.HasPrefix(v, "randomInt") { 
d = decls.NewVar(k, decls.Int) 
} else if strings.HasPrefix(v, "newReverse") { 
d = decls.NewVar(k, decls.NewObjectType("proto.Reverse")) 
} else { 
d = decls.NewVar(k, decls.String) 
} 
// 追加到 envOpt中 
c.envOptions = append(c.envOptions, cel.Declarations(d)) 
} 
} 
} 
// 
计算单个表达式 
func Evaluate(env *cel.Env, expression string, params map[string]interface{}) (ref.Val, error) { 
ast, iss := env.Compile(expression) 
if iss.Err() != nil { 
return nil, iss.Err() 
} 
prg, err := env.Program(ast) 
if err != nil { 
return nil, err 
} 
out, _, err := prg.Eval(params) 
if err != nil { 
return nil, err 
} 
return out, nil 
} 
func main() { 
// 
1.生成cel env环境
option := InitCelOptions() 
// 
动态添加变量到env里 这里即对poc里的set 
set := []map[string]string{} 
rad := map[string]string{"rad": "randomInt(1,10)"} 
set = append(set, rad) 
option.AddRuleSetOptions(set) 
env, err := InitCelEnv(&option) 
if err != nil { 
fmt.Println("[rule/cel.go:Init init cel env error]", err) 
} 
// icontains 
expression1 := `"aaa".icontains("aaa")` 
params := make(map[string]interface{}) 
out, err := Evaluate(env, expression1, params) 
if err != nil { 
fmt.Println(err) 
} 
fmt.Printf("expression1: %v\n", out) 
// set 
setMap := make(map[string]interface{}) 
for _, s := range set { 
for k := range s { 
expression2 := s[k] 
out, err = Evaluate(env, expression2, params) 
if err != nil { 
fmt.Println(err) 
} 
setMap[k] = out.Value() 
} 
} 
//print set变量 
for k, v := range setMap { 
fmt.Printf("expression2 set k: %s v: %d\n", k, v) 
// 将set的变量添加的env里 
params[k] = v 
} 
// 把set替换request中的body或者headers 
// eval 表达式 匹配关键字返回true或者false 
expression3 := `string(rad)` 
out, err = Evaluate(env, expression3, params) 
if err != nil { 
fmt.Println(err) 
} 
fmt.Printf("expression3: %s\n", out) 
// 自定义一个变量如下 
params["recar"] = "cel-go" 
expression4 := `recar` 
// 定义添加变量的类型 
recar := decls.NewVar("recar", decls.String) 
option.envOptions = append(option.envOptions, cel.Declarations(recar)) 
env, err = InitCelEnv(&option) 
if err != nil { 
fmt.Println("[rule/cel.go:Init init cel env error]", err) 
} 
out, err = Evaluate(env, expression4, params) 
if err != nil { 
fmt.Println(err) 
} 
fmt.Printf("expression4: %s\n", out) 
} 
参考
cel-go https://codelabs.developers.google.com/codelabs/cel-go#0 
pocassist https://pocassist.jweny.top/