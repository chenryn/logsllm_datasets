# 上期问题时间上期的问题是：为什么不能用 rename 修改临时表的改名。在实现上，执行 rename table 语句的时候，要求按照"库名 /表名.frm"的规则去磁盘找文件，但是临时表在磁盘上的 frm 文件是放在 tmpdir目录下的，并且文件名的规则是"#sql{进程 id}\_{线程 id}\_序列号.frm"，因此会报"找不到文件名"的错误。评论区留言点赞板：> \@poppy 同学，通过执行语句的报错现象推测了这个实现过程。![](Images/48edcb93fb03e3e52d7e7099be6b5cb3.png){savepage-src="https://static001.geekbang.org/resource/image/09/77/09c1073f99cf71d2fb162a716b5fa577.jpg"}
# 38 \| 都说InnoDB好，那还要不要使用Memory引擎？我在上一篇文章末尾留给你的问题是：两个 group by 语句都用了 order bynull，为什么使用内存临时表得到的语句结果里，0这个值在最后一行；而使用磁盘临时表得到的结果里，0 这个值在第一行？今天我们就来看看，出现这个问题的原因吧。
# 内存表的数据组织结构为了便于分析，我来把这个问题简化一下，假设有以下的两张表 t1 和t2，其中表 t1 使用 Memory 引擎， 表 t2 使用 InnoDB 引擎。    create table t1(id int primary key, c int) engine=Memory;create table t2(id int primary key, c int) engine=innodb;insert into t1 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);insert into t2 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);然后，我分别执行 select \* from t1 和 select \* from t2。![](Images/dea4f91e099b60043fabbee922a25384.png){savepage-src="https://static001.geekbang.org/resource/image/3f/e6/3fb1100b6e3390357d4efff0ba4765e6.png"}```{=html}```图 1 两个查询结果 -0 的位置]{.reference}```{=html}```可以看到，内存表 t1 的返回结果里面 0 在最后一行，而 InnoDB 表 t2的返回结果里 0 在第一行。出现这个区别的原因，要从这两个引擎的主键索引的组织方式说起。表 t2 用的是 InnoDB 引擎，它的主键索引 id的组织方式，你已经很熟悉了：InnoDB表的数据就放在主键索引树上，主键索引是 B+ 树。所以表 t2的数据组织方式如下图所示：![](Images/0190c42da6fb2d6deff1c5661252c261.png){savepage-src="https://static001.geekbang.org/resource/image/4e/8d/4e29e4f9db55ace6ab09161c68ad8c8d.jpg"}```{=html}```图 2 表 t2 的数据组织]{.reference}```{=html}```主键索引上的值是有序存储的。在执行 select \*的时候，就会按照叶子节点从左到右扫描，所以得到的结果里，0就出现在第一行。与 InnoDB 引擎不同，Memory 引擎的数据和索引是分开的。我们来看一下表 t1中的数据内容。``{=html}![](Images/1e8e0939d2944d3450a84377dc479457.png){savepage-src="https://static001.geekbang.org/resource/image/dd/84/dde03e92074cecba4154d30cd16a9684.jpg"}```{=html}```图 3 表 t1 的数据组织]{.reference}```{=html}```可以看到，内存表的数据部分以数组的方式单独存放，而主键 id索引里，存的是每个数据的位置。主键 id 是 hash 索引，可以看到索引上的 key并不是有序的。在内存表 t1 中，当我执行 select \*的时候，走的是全表扫描，也就是顺序扫描这个数组。因此，0就是最后一个被读到，并放入结果集的数据。可见，InnoDB 和 Memory 引擎的数据组织方式是不同的：-   InnoDB 引擎把数据放在主键索引上，其他索引上保存的是主键    id。这种方式，我们称之为**索引组织表**（Index Organizied Table）。-   而 Memory    引擎采用的是把数据单独存放，索引上保存数据位置的数据组织形式，我们称之为**堆组织表**（Heap    Organizied Table）。从中我们可以看出，这两个引擎的一些典型不同：1.  InnoDB    表的数据总是有序存放的，而内存表的数据就是按照写入顺序存放的；2.  当数据文件有空洞的时候，InnoDB    表在插入新数据的时候，为了保证数据有序性，只能在固定的位置写入新值，而内存表找到空位就可以插入新值；3.  数据位置发生变化的时候，InnoDB    表只需要修改主键索引，而内存表需要修改所有索引；4.  InnoDB    表用主键索引查询时需要走一次索引查找，用普通索引查询的时候，需要走两次索引查找。而内存表没有这个区别，所有索引的"地位"都是相同的。5.  InnoDB 支持变长数据类型，不同记录的长度可能不同；内存表不支持 Blob    和 Text 字段，并且即使定义了 varchar(N)，实际也当作    char(N)，也就是固定长度字符串来存储，因此内存表的每行数据长度相同。由于内存表的这些特性，每个数据行被删除以后，空出的这个位置都可以被接下来要插入的数据复用。比如，如果要在表t1 中执行：    delete from t1 where id=5;insert into t1 values(10,10);select * from t1;就会看到返回结果里，id=10 这一行出现在 id=4 之后，也就是原来 id=5这行数据的位置。需要指出的是，表 t1 的这个主键索引是哈希索引，因此如果执行范围查询，比如    select * from t1 where id```图 4 表 t1 的数据组织 \-- 增加 B-Tree 索引]{.reference}```{=html}```新增的这个 B-Tree 索引你看着就眼熟了，这跟 InnoDB 的 b+树索引组织形式类似。作为对比，你可以看一下这下面这两个语句的输出：![](Images/763d90dd2221e013b427e1a938231b85.png){savepage-src="https://static001.geekbang.org/resource/image/a8/8a/a85808fcccab24911d257d720550328a.png"}```{=html}```图 5 使用 B-Tree 和 hash 索引查询返回结果对比]{.reference}```{=html}```可以看到，执行 select \* from t1 where id\```图 6 内存表的表锁 \-- 复现步骤]{.reference}```{=html}```在这个执行序列里，session A 的 update 语句要执行 50秒，在这个语句执行期间 session B 的查询会进入锁等待状态。session C 的show processlist 结果输出如下：![](Images/e936d01be36f7473e8b21b93b651c217.png){savepage-src="https://static001.geekbang.org/resource/image/14/16/14d88076dad6db573f0b66f2c17df916.png"}```{=html}```图 7 内存表的表锁 \-- 结果]{.reference}```{=html}```跟行锁比起来，表锁对并发访问的支持不够好。所以，内存表的锁粒度问题，决定了它在处理并发事务的时候，性能也不会太好。
# 数据持久性问题接下来，我们再看看数据持久性的问题。数据放在内存中，是内存表的优势，但也是一个劣势。因为，数据库重启的时候，所有的内存表都会被清空。你可能会说，如果数据库异常重启，内存表被清空也就清空了，不会有什么问题啊。但是，在高可用架构下，内存表的这个特点简直可以当做bug 来看待了。为什么这么说呢？**我们先看看 M-S 架构下，使用内存表存在的问题。**![](Images/f857dde661da9d0a9659b98f9894bef9.png){savepage-src="https://static001.geekbang.org/resource/image/5b/e9/5b910e4c0f1afa219aeecd1f291c95e9.jpg"}```{=html}```图 8 M-S 基本架构]{.reference}```{=html}```我们来看一下下面这个时序：1.  业务正常访问主库；2.  备库硬件升级，备库重启，内存表 t1 内容被清空；3.  备库重启后，客户端发送一条 update 语句，修改表 t1    的数据行，这时备库应用线程就会报错"找不到要更新的行"。这样就会导致主备同步停止。当然，如果这时候发生主备切换的话，客户端会看到，表t1 的数据"丢失"了。在图 8 中这种有 proxy的架构里，大家默认主备切换的逻辑是由数据库系统自己维护的。这样对客户端来说，就是"网络断开，重连之后，发现内存表数据丢失了"。你可能说这还好啊，毕竟主备发生切换，连接会断开，业务端能够感知到异常。但是，接下来内存表的这个特性就会让使用现象显得更"诡异"了。由于 MySQL知道重启之后，内存表的数据会丢失。所以，担心主库重启之后，出现主备不一致，MySQL在实现上做了这样一件事儿：在数据库重启之后，往 binlog 里面写入一行DELETE FROM t1。**如果你使用是如图 9 所示的双 M 结构的话：**![](Images/c85e7ba88e7a59302bdb1e3b7c55198a.png){savepage-src="https://static001.geekbang.org/resource/image/40/57/4089c9c1f92ce61d2ed779fd0932ba57.jpg"}```{=html}```图 9 双 M 结构]{.reference}```{=html}```在备库重启的时候，备库 binlog 里的 delete语句就会传到主库，然后把主库内存表的内容删除。这样你在使用的时候就会发现，主库的内存表数据突然被清空了。基于上面的分析，你可以看到，内存表并不适合在生产环境上作为普通数据表使用。有同学会说，但是内存表执行速度快呀。这个问题，其实你可以这么分析：1.  如果你的表更新量大，那么并发度是一个很重要的参考指标，InnoDB    支持行锁，并发度比内存表好；2.  能放到内存表的数据量都不大。如果你考虑的是读的性能，一个读 QPS    很高并且数据量不大的表，即使是使用 InnoDB，数据也是都会缓存在 InnoDB    Buffer Pool 里的。因此，使用 InnoDB 表的读性能也不会差。所以，**我建议你把普通内存表都用 InnoDB表来代替。**但是，有一个场景却是例外的。这个场景就是，我们在第 35 和 36篇说到的用户临时表。在数据量可控，不会耗费过多内存的情况下，你可以考虑使用内存表。内存临时表刚好可以无视内存表的两个不足，主要是下面的三个原因：1.  临时表不会被其他线程访问，没有并发性的问题；2.  临时表重启后也是需要删除的，清空数据这个问题不存在；3.  备库的临时表也不会影响主库的用户线程。现在，我们回过头再看一下第 35 篇 join语句优化的例子，当时我建议的是创建一个 InnoDB 临时表，使用的语句序列是：    create temporary table temp_t(id int primary key, a int, b int, index(b))engine=innodb;insert into temp_t select * from t2 where b>=1 and b=1 and b```图 10 使用内存临时表的执行效果]{.reference}```{=html}```可以看到，不论是导入数据的时间，还是执行 join的时间，使用内存临时表的速度都比使用 InnoDB 临时表要更快一些。
# 小结今天这篇文章，我从"要不要使用内存表"这个问题展开，和你介绍了 Memory引擎的几个特性。可以看到，由于重启会丢数据，如果一个备库重启，会导致主备同步线程停止；如果主库跟这个备库是双M 架构，还可能导致主库的内存表数据被删掉。因此，在生产上，我不建议你使用普通内存表。如果你是 DBA，可以在建表的审核系统中增加这类规则，要求业务改用 InnoDB表。我们在文中也分析了，其实 InnoDB表性能还不错，而且数据安全也有保障。而内存表由于不支持行锁，更新语句会阻塞查询，性能也未必就如想象中那么好。基于内存表的特性，我们还分析了它的一个适用场景，就是内存临时表。内存表支持hash 索引，这个特性利用起来，对复杂查询的加速效果还是很不错的。最后，我给你留一个问题吧。假设你刚刚接手的一个数据库上，真的发现了一个内存表。备库重启之后肯定是会导致备库的内存表数据被清空，进而导致主备同步停止。这时，最好的做法是将它修改成InnoDB 引擎表。假设当时的业务场景暂时不允许你修改引擎，你可以加上什么自动化逻辑，来避免主备同步停止呢？你可以把你的思考和分析写在评论区，我会在下一篇文章的末尾跟你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。