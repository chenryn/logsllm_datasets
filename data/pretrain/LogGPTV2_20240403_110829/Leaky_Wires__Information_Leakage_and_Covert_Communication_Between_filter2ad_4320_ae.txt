can also be used to transmit information by causing changes in
temperature [11]. This technique allows communications between
blocks on the same device, under a threat model similar to ours.
Ring oscillators have also been used in security-sensitive appli-
cations, including True Random Number Generators (TRNGs) [33]
and Physically Unclonable Functions (PUFs) [20]. Consequently,
any mechanism which can be used to manipulate or bias their fre-
quency can also be used to attack these applications. Besides the
technique introduced in this paper, prior work has influenced the
delays of ROs by altering the power supply [21] and by injecting
EM signals [4], resulting in low entropy and cloneability.
As explained in Section 11.2, a switching pattern in sync with
the RO’s signal increases the RO’s oscillation frequency by 1-9%
compared to a pattern that opposes it [8]. To achieve this synchro-
nization, however, requires the transmitter to be connected to the
output of one of the RO’s stages. As a result, as presented, this
mechanism cannot be used directly for side-channel communica-
tion or to reliably attack the ring oscillator, due to the high accuracy
of prediction required for the frequency and phase of the oscillator.
Emphasis has also been placed on using networks of ROs to
detect Hardware Trojans on a device [12, 35]. The dynamic power
consumed by HTs results in a voltage drop that lowers the RO fre-
quencies compared to those in the Trojan-free “golden” IC, making
them detectable. Such prior work depends on the effect switch-
ing activity has on the frequency of ROs to detect HTs. As shown
in Figure 7, when using short wires, we were able to reproduce
the prior effect, where only the number of bit transitions, and not
the actual bits themselves, were the cause for the RO frequency
drop. However, this no longer holds for long wires: the frequency
increases based on the duration for which a 1 is transmitted, irre-
spective of the dynamic activity. As a result, the channel depends
on a fundamentally different phenomenon, which uses the values
carried on the wires themselves, and not their transitions.
ASIACCS’18, June 4–8, 2018, Songdo, Korea
Ilias Giechaskiel, Kasper B. Rasmussen, and Ken Eguro
Prior work [23] has shown that to detect slowly-changing sig-
nals, very large circuits (over 14k registers) or long measurement
times (2.5h) are needed, in addition to external measurement equip-
ment, and special modifications to the device. By contrast, our work
only uses small on-chip circuits, without any special control over
voltage or temperature conditions. We can distinguish between the
values of signals which remain constant (i.e., have no switching
activity) during our period of measurement, which is as low as 82µs,
a measurement period which is also a lower bound for on-chip HT
detection using ROs [18].
13 CONCLUSION
We demonstrated the existence of a previously unexplored phe-
nomenon on FPGA devices, that causes the delay of so called “long
wires” to depend on the logical state of nearby long wires, even
when the driven value remains constant. The effect is small, but
surprisingly resilient, and measurable within the device by small
circuits even in the presence of environmental noise, and without
any modifications to the FPGA. We use this phenomenon to create
a communication channel between circuits that are not physically
connected. As designs often incorporate circuits from multiple
third-parties, this channel can break separation of privilege be-
tween IP cores of different trust levels, or enable communication
between distinct cores in multi-user setups. Such use-cases are in-
creasingly common as FPGAs and CPUs become integrated, and as
FPGAs become available on public cloud infrastructures. The same
mechanism can also be used to eavesdrop and recover keys with
high probability even when the signals change during the period
of measurement, or to implement a no-contact debugging tap or
watermark scheme. In our prototype implementation, the channel
has a bandwidth of up to 6kbps, and we can recover over 99% of
the transmitted bits correctly using a Manchester encoding scheme.
We showed that the phenomenon is present in three generations
of Xilinx FPGAs, and that the channel can be implemented in a
variety of arrangements, including different locations, orientations,
and with multiple transmitting circuits present. The strength of the
phenomenon scales linearly with the number of wires used, and
also dominates a competing effect caused by switching activity.
REFERENCES
[1] W. K. Al-Assadi and S. Kakarla. 2008. A BIST Technique for Crosstalk Noise
Detection in FPGAs. In Defect and Fault Tolerance of VLSI Systems.
[2] Jason H. Anderson and Farid N. Najm. 2004. Interconnect Capacitance Estimation
for FPGAs. In Asia and South Pacific Design Automation Conference (ASP-DAC).
[3] J. Bauer, S. Schinzel, F. Freiling, and A. Dewald. 2016. Information leakage behind
the curtain: Abusing anti-EMI features for covert communication. In Hardware
Oriented Security and Trust (HOST).
[4] Pierre Bayon, Lilian Bossuet, Alain Aubert, Viktor Fischer, François Poucheret,
Bruno Robisson, and Philippe Maurine. 2012. Contactless Electromagnetic Active
Attack on Ring Oscillator Based True Random Number Generator. In Constructive
Side-Channel Analysis and Secure Design (COSADE).
[5] G. T. Becker, M. Kasper, A. Moradi, and C. Paar. 2010. Side-channel based water-
marks for integrated circuits. In Hardware-Oriented Security and Trust (HOST).
[6] Eduardo Boemo and Sergio López-Buedo. 1997. Thermal monitoring on FPGAs
using ring-oscillators. In Field-Programmable Logic and Applications (FPL).
[7] R. S. Chakraborty, I. Saha, A. Palchaudhuri, and G. K. Naik. 2013. Hardware
Trojan Insertion by Direct Modification of FPGA Configuration Bitstream. IEEE
Design Test 30, 2 (April 2013), 45–54.
[8] M. Gag, T. Wegner, A. Waschki, and D. Timmermann. 2012. Temperature and
on-chip crosstalk measurement using ring oscillators in FPGA. In Design and
Diagnostics of Electronic Circuits Systems (DDECS).
[9] A. Hajimiri, S. Limotyrakis, and T. H. Lee. 1999. Jitter and phase noise in ring
oscillators. IEEE Journal of Solid-State Circuits 34, 6 (Jun 1999), 790–804.
[10] T. Huffmire, B. Brotherton, T. Sherwood, R. Kastner, T. Levin, T. D. Nguyen, and
C. Irvine. 2008. Managing Security in FPGA-Based Embedded Systems. IEEE
Design Test of Computers 25, 6 (Nov 2008), 590–598.
[11] T. Iakymchuk, M. Nikodem, and K. Kepa. 2011. Temperature-based covert channel
in FPGA systems. In Reconfigurable Communication-Centric Systems-on-Chip
(ReCoSoC).
[12] Shane Kelly, Xuehui Zhang, Mohammed Tehranipoor, and Andrew Ferraiuolo.
2015. Detecting Hardware Trojans using On-chip Sensors in an ASIC Design.
Journal of Electronic Testing 31, 1 (2015), 11–26.
[13] S. Korf, D. Cozzi, M. Koester, J. Hagemeyer, M. Porrmann, U. RÃĳckert, and M. D.
Santambrogio. 2011. Automatic HDL-Based Generation of Homogeneous Hard
Macros for FPGAs. In Field-Programmable Custom Computing Machines (FCCM).
[14] Christian Krieg, Clifford Wolf, and Axel Jantsch. 2016. Malicious LUT: A Stealthy
FPGA Trojan Injected and Triggered by the Design Flow. In International Confer-
ence on Computer-Aided Design (ICCAD).
[15] Christopher Lavin, Brent Nelson, and Brad Hutchings. 2013. Impact of hard
macro size on FPGA clock rate and place/route time. In Field Programmable Logic
and Applications (FPL).
[16] Christopher Lavin, Marc Padilla, Subhrashankha Ghosh, Brent Nelson, Brad
Hutchings, and Michael Wirthlin. 2010. Using Hard Macros to Reduce FPGA
Compilation Time. In Field Programmable Logic and Applications (FPL).
[17] Christopher Lavin, Marc Padilla, Jaren Lamprecht, Philip Lundrigan, Brent Nelson,
and Brad Hutchings. 2011. HMFlow: Accelerating FPGA Compilation with
Hard Macros for Rapid Prototyping. In Field-Programmable Custom Computing
Machines (FCCM).
[18] M. Lecomte, J. J. A. Fournier, and P. Maurine. 2015. Thoroughly analyzing the
use of ring oscillators for on-chip hardware trojan detection. In ReConFigurable
Computing and FPGAs (ReConFig).
[19] Lang Lin, Markus Kasper, Tim Güneysu, Christof Paar, and Wayne Burleson. 2009.
Trojan Side-Channels: Lightweight Hardware Trojans through Side-Channel
Engineering. In Cryptographic Hardware and Embedded Systems (CHES).
[20] A. Maiti, J. Casarona, L. McHale, and P. Schaumont. 2010. A large scale charac-
terization of RO-PUF. In Hardware-Oriented Security and Trust (HOST).
[21] A. Theodore Markettos and Simon W. Moore. 2009. The Frequency Injection
Attack on Ring-Oscillator-Based True Random Number Generators. In Crypto-
graphic Hardware and Embedded Systems (CHES).
[22] Dominik Merli, Frederic Stumpf, and Claudia Eckert. 2010. Improving the Quality
of Ring Oscillator PUFs on FPGAs. In Workshop on Embedded Systems Security
(WESS).
[23] Amir Moradi. 2014. Side-Channel Leakage through Static Power. In Cryptographic
Hardware and Embedded Systems (CHES).
[24] Y. Ran and M. Marek-Sadowska. 2003. Crosstalk noise in FPGAs. In Design
[25] Ettus Research. 2017. N200/N210. https://kb.ettus.com/N200/N210. (2017). Ac-
Automation Conference (DAC).
cessed: 2017-05-17.
[26] Ettus Research. 2017. The USRP Hardware Driver FPGA Repository. https:
//github.com/EttusResearch/fpga. (2017). Accessed: 2017-05-17.
[27] P. Samarin, K. Lemke-Rust, and C. Paar. 2016. IP core protection using voltage-
controlled side-channel receivers. In Hardware Oriented Security and Trust
(HOST).
[28] Devu Manikantan Shila, Vivek Venugopalan, and Cameron D. Patterson. 2015.
Unraveling the Security Puzzle: A Distributed Framework to Build Trust in FPGAs.
In Network and System Security (NSS).
[29] J.R. Smith and S.T. Ventrone. 2011. Multi-processor chip with shared fpga execu-
tion unit and a design structure thereof. (Dec. 15 2011). https://www.google.co.
uk/patents/US20110307661 US Patent App. 12/796,990.
[30] Chauchin Su, Yue-Tsang Chen, Mu-Jeng Huang, Gen-Nan Chen, and Chung-Len
Lee. 2000. All digital built-in delay and crosstalk measurement for on-chip buses.
In Conference on Design, Automation and Test in Europe (DATE).
[31] Ji Sun, Ray Bittner, and Ken Eguro. 2011. FPGA Side-channel Receivers. In Field
Programmable Gate Arrays (FPGA).
[32] M. Tehranipoor and F. Koushanfar. 2010. A Survey of Hardware Trojan Taxonomy
and Detection. IEEE Design Test of Computers 27, 1 (Jan 2010), 10–25.
[33] Ihor Vasyltsov, Eduard Hambardzumyan, Young-Sik Kim, and Bohdan Karpinskyy.
2008. Fast Digital TRNG Based on Metastable Ring Oscillator. In Cryptographic
Hardware and Embedded Systems (CHES).
[34] Steven J. E. Wilton. 2001. A Crosstalk-aware Timing-driven Router for FPGAs.
In Field Programmable Gate Arrays (FPGA).
[35] X. Zhang and M. Tehranipoor. 2011. RON: An on-chip ring oscillator network
for hardware Trojan detection. In Design, Automation and Test in Europe (DATE).
[36] Kenneth M. Zick and John P. Hayes. 2012. Low-cost Sensing with Ring Oscillator
Arrays for Healthier Reconfigurable Systems. ACM Trans. Reconfigurable Technol.
Syst. 5, 1 (March 2012), 1–26.
[37] D. Ziener, F. Baueregger, and J. Teich. 2010. Using the Power Side Channel of
FPGAs for Communication. In Field-Programmable Custom Computing Machines
(FCCM).
Leaky Wires: Information Leakage and Covert Communication Between FPGA Long Wires ASIACCS’18, June 4–8, 2018, Songdo, Korea
A GENERALIZING SIGNAL EXFILTRATION
In this section we explain how to remove the assumption that the
key size N is a multiple of the window size w, and how to fully
recover keys by varying the window size.
To start with, if N = nw + m, with 0 ≤ m < w, the probability
for 0 ≤ r < m, since |Sr | = n + 1. For m ≤ r < w this probability is
1/2n−1, as |Sr | = n. This allows us to adjust Equation (2) to
that the bits in Sr =(cid:0)Kr , Kw +r , K2w +r , . . .(cid:1) are the same is 1/2n
(cid:18)
(cid:19)m(cid:18)
(cid:19)w−m
P =
1 − 1
2n
1 − 1
2n−1
(3)
In particular, if N is a multiple of w, then m = 0, so the above
expression reduces to (2).
The expression is valid for any length N ≥ 2w − 1, removing the
requirement that N is an integer multiple of w. The lower bound
on N is necessary if we wish to recover the first w bits of the key,
as we need to have r + w ≤ N for each r with 0 ≤ r ≤ w − 1 in
order to have elements in Sr .
Suppose that the original measurements were not able to re-
cover the bits in Sr because they were all identical. By repeating
measurements with a window of size w + 1, the algorithm either
recovers all bits in the sequence S′
or shows that they too are identical (here, under the assumption
that N ≥ 2w + 1).
r =(cid:0)Kr , Kw +1+r , K2(w +1)+r , . . .(cid:1)
In the first case, the algorithm recovers Kr , and hence Sr since
all its bits are identical. In the second case, where all bits in S′
r are
also identical, the entire key consists of a single repeated bit (i.e., all
ones or all zeroes). This is because Kr = Kw +1+r = Kr +1 (mod w),
and Kr = K2(w +1)+r = Kr +2 (mod w), etc. Note that the size of S′
r
might be too small to cover the all the residues modw by itself, but
varying r allows us to recover all of K0, . . . , Kw−1 with probability 1
if there are at least 2 different bits in the key, or to determine that
the key consists of the same repeated bit.
For a window of size w, we need N −w +1 measurements, but this
can be accomplished in only w independent runs of the experiment.
Run r is responsible for collecting the measurements for the parts
of the key that start with Kr +w·i for some i. For example, run 1
measures the Hamming weight of the key bits(cid:0)K1, . . . , Kw(cid:1), and
(cid:0)Kw +1, . . . , K2w(cid:1), etc. As there is no overlap in the bits used, these
measurements can be completed in a single run. Thus, using both
window sizes, and to fully determine all the bits of a key, one needs
to take
(N − w + 1) + (N − (w + 1) + 1) = 2N − 2w + 1
measurements over just
w + (w + 1) = 2w + 1
runs, showing that this key-recovery algorithm is efficient. In other
words, the key only needs to be repeated 2w + 1 times to be fully
leaked.