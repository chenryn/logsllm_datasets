●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
s
n
o
i
t
p
y
r
c
n
e
y
e
K
0
0
0
0
2
0
0
0
0
1
0
0
0
5
0
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0
7
0
.
5
7
0
.
0
8
0
.
5
8
0
.
0
9
0
.
5
9
0
.
0
0
1
.
0
7
0
.
5
7
0
.
0
8
0
.
5
8
0
.
Add bias
Add bias
●
●
IBE encryptions
Asymmetric encryptions
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
● ●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0
9
0
.
5
9
0
.
0
0
1
.
(d) File rekeys per user revoked
(e) File rekeys for user revoc. vs. add bias
(f) Key encryptions vs. add bias (ﬁrewall1)
Fig. 4: Results of running 100 one-month simulations on each dataset (each data point is a simulation)
re-encrypted by the administrator multiple times per month.
Finally, we note that the costs for our IBE/IBS- and PKI-
based constructions for RBAC0 are not notably different. For
instance, Fig. 4f compares, for scenario ﬁrewall1, the number
of IBE encryptions with the number of asymmetric encryptions
executed over each simulated month and reveals the same
distribution in both IBE/IBS- and PKI-based constructions.
Given the similarity in the cost of these classes of operations,
we can conclude that these constructions are similarly expensive
from a computational standpoint.
E. Converting Experimental Results to Real Costs
We now demonstrate how the costs of generic IBE encryp-
tions turn into actual computational costs for given schemes.
Since any implementation’s running time is contingent on
a myriad of variables (e.g., processor speed, memory, etc.)
we focus on the number of (pairing friendly) elliptic curve
cryptographic operations that need to be performed. We assume
schemes are implemented using an asymmetric (Type 3) pairing:
e : G × ˆG → GT , where G, ˆG, GT are groups of prime order;
this is more efﬁcient than a symmetric (Type 1) pairing [25].
Additive notation is used in G and ˆG, while multiplicative
notation is used in GT .
We use multiplication in G as our cost unit, expressing the
relative costs of other operations in terms of this operation. The
relative costs should be somewhat stable across hardware and
830830
reasonable implementations. These relative costs are given in
Table III and are based on data provided by Ayo Akinyele, an
ABE/pairing implementation expert at Zeutro LLC (personal
communication). Costs of addition in G, ˆG, and multiplication
in GT are so low that we ignore them. These relative costs
are based on the implementation of RELIC v0.4 [2], using
a Barreto-Naehrig curve with a 256-bit base ﬁeld, GMP for
big number operations, and standard conﬁguration options for
prime ﬁeld arithmetic. For a point of reference, a reasonable
modern workstation running RELIC v0.4 on such curves
will take approximately 0.2 ms on average to compute a
multiplication in G.
Operation
G Multiplies
ˆG Multiply GT Exp.
4.5
9
Pairing (e)
9
TABLE III: Relative cost of Type 3 pairing operations in terms
of multiplication in G in RELIC v0.4
To determine concrete costs, we consider three representative
combinations of IBE and IBS algorithms:
BF+CC: The IBE scheme from [11, Sec. 4.1] and the IBS
scheme from [13, Sec. 2]. Both are efﬁcient and are proven
secure in the random oracle model.
BB1+PS: The IBE scheme from [9, Sec. 4] and the IBS
scheme from [54, Sec. 4]. These schemes are less efﬁcient
than BF+CC but are proven secure in the standard model.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
LW+PS: The IBE scheme from [44, App. C] and the IBS
scheme from [54, Sec. 4]. The IBE scheme here is less efﬁcient
but has stronger security properties.
Table IV lists the cost of each additive RBAC0, read and
write operation in terms of total “multiplication units” in G.
That is, we sum the cost of cryptographic operations in terms
of multiplication units using the conversion factor in Table III.
Table IV speciﬁes the costs incurred by the invoker of the
operation (either the admin or the user) as well as the reference
monitor. For completeness, a table documenting the individual
costs of each basic IBE/IBS operation for these schemes can
be found in [28], an accompanying technical report.
Incurred by Operation BF+CC BB1+PS
LW+PS
addU
addP
addR
assignU
assignP3
read
write
addP
write
5.5
15
18.5
41
41
56
58
38
38
14.5
25
33
63.5
63.5
90
96.5
54
54
32.5
29
55
103.5
103.5
162
168.5
54
54
Invoker
R.M.
TABLE IV: Costs of operations in terms of G multiplications
The cost to delete a user/role or to revoke a user/permission
depends on the RBAC state at the time of revocation, so we
cannot give deﬁnite costs for these operations. Instead, we
use the experimental results from Section V-D to get an idea
of how expensive revocation can be. The results of this are
in Fig. 5, where we plot the costs for each dataset using the
three IBE/IBS combinations listed above. Figure 5a shows
the cost of revoking a user in terms of multiplications in G;
Fig. 5b does the same for revoking a permission. Note that for
our datasets, a single user revocation usually costs more than
10,000 multiplications in G (≈ 2 s. on a modern workstation),
and often costs more than 100,000 multiplications (≈ 20 s.)
for some datasets. While not exceedingly huge, we remind the
reader that our costing does not account for many costs, such
as concurrency, communication, and storage costs. Further, our
construction minimizes other costs through the use of lazy
re-encryption and hybrid encryption.
VI. DISCUSSION
There is no doubt that IBE and ABE can enable various
forms of cryptographic access control for data in the cloud.
In fact, the results presented in Figs. 4c, 4e and 4f show
that in situations in which the system grows in a monotonic
manner (i.e., users and ﬁles are added to the system and roles
are provisioned with new permissions), there is no need for
revocation, re-keying, or complicated metadata management:
IBE alone can enforce RBAC access controls on the cloud.
In fact, there are even implications or direct claims in the
literature that, in the static setting, the reference monitor can
be removed entirely (e.g., [30], [31], [49]). However, this does
not imply that IBE or ABE alone can entirely replace the use
of a reference monitor when implementing outsourced access
controls: it is not the case when dynamic controls are required.
Speciﬁcally, this paper shows that IBE and PKI systems
are well-suited for implementing point states of an RBAC0
system. However, managing transitions between these states—
speciﬁcally, supporting the removal of a user from a role, the
revocation of a permission from a role, and efﬁcient updates to
ﬁles shared with multiple roles—requires non-trivial metadata
management and a small, minimally-trusted reference monitor
that veriﬁes signatures prior to ﬁle deletion and replacement.
In some of the datasets that we analyzed, this could lead to
thousands of IBE encryptions (Fig. 4a) and over one hundred
ﬁle re-keys/re-encryptions (Fig. 4d) when a single user is
removed from a role.
The above considerations lead to a tradeoff between con-
ﬁdentiality and efﬁciency that must be weighed by both
cryptographers and system designers. There are two obvious
ways that this can be accomplished: by altering the threat
model assumed, or developing cryptographic approaches that
are more amenable to the dynamic setting. We now discuss
both of these approaches, and comment on lessons learned
during our analysis that can be applied to richer cryptographic
access control, such as using HIBE to support RBAC1, or ABE
to support ABAC.
A. Alternate Threat Models
Many of the overheads that we report on in the previous
section result from the threat model often implied by the
cryptographic literature (i.e., untrusted storage server, minimal
client-side infrastructure). Altering this model can reduce the
cryptographic costs of enforcing dynamic access controls on
the cloud. Here we consider two such alternate models.
Encryption/Decryption Proxy. A large amount of overhead
comes from relying the cloud storage provider to act as a
(cryptographic) metadata broker, as well as a ﬁle store. An al-
ternative approach might make use of an encryption/decryption
proxy server situated within an organization, using the cloud
provider solely as a backing store for encrypted ﬁles. This proxy
would act as a traditional reference monitor, mediating all ﬁle
access requests, downloading and decrypting ﬁles for authorized
readers4, and returning plaintext to the user. This would obviate
the need for any cryptography beyond authenticated symmetric
key encryption, and could make use of tried-and-true access
control reference monitors. However, this approach carries an
extra infrastructure overhead (the proxy server, itself) that could
make it unappealing to individuals hoping to enforce access
controls over cloud hosted ﬁles. Large organizations may also
have to deal with synchronizing access control policies and
key material across multiple proxies in the event that ﬁle I/O
demands outpace the abilities of a single server.
Trusted Hardware. A more extreme approach to simplify-
ing the cryptographic overheads of access control enforcement
would be to use, e.g., an SGX enclave [39], [47] to carry out
the work of the encryption/decryption proxy discussed above.
3Assumes permission is for new ﬁle; cost is per version of the ﬁle
4Writes could be handled symmetrically.
831831
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
d
e
k
o
v
e
r
r
e
s
u
r
e
p
G
n
i
s
n
o
i
t
a
c
i
l
p
i
t
l
u
M
0
0
0
0
5
2
0
0
0
0
0
2
0
0
0
0
5
1
0
0
0
0
0
1
0
0
0
0
5
0
G
G
G
G
G
G
BF+CC
BB+PS
LW+PS
GGGG
GGGG
GGGG
G
G