When using the spread operator with native promises in Chrome, you may encounter an error. Here's a more detailed and clear explanation:

### Issue Description
The following code results in a `TypeError` when run in Chrome:
```javascript
let args = [(resolve, reject) => resolve()];
let promise = new Promise(...args);
```
**Error:**
```
Uncaught TypeError: [object Object] is not a promise
```

### Explanation
The `Promise` constructor expects a single argument, which is a function that takes two parameters: `resolve` and `reject`. The spread operator (`...`) is used to expand an array into individual arguments. However, in this case, the spread operator is incorrectly expanding the array `args`, resulting in the `Promise` constructor receiving multiple arguments instead of a single function.

### Corrected Code
To fix this issue, you should pass the function directly to the `Promise` constructor without using the spread operator:
```javascript
let executor = (resolve, reject) => resolve();
let promise = new Promise(executor);
```

### Example on Babel
You can test the corrected code in the Babel REPL:
- **Babel REPL Link:** [https://babeljs.io/repl/#?experimental=true&playground=false&evaluate=true&loose=false&spec=false&code=let%20executor%20%3D%20(resolve%2C%20reject)%20%3D%3E%20resolve()%3B%0Alet%20promise%20%3D%20new%20Promise(executor)%3B](https://babeljs.io/repl/#?experimental=true&playground=false&evaluate=true&loose=false&spec=false&code=let%20executor%20%3D%20(resolve%2C%20reject)%20%3D%3E%20resolve()%3B%0Alet%20promise%20%3D%20new%20Promise(executor)%3B)

This approach ensures that the `Promise` constructor receives the correct single function argument, avoiding the `TypeError`.