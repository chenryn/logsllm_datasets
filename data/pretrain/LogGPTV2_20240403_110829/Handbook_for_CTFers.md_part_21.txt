194
36
null
404
口
194
null
404
194
44
null
404
1.94
52
404
1.94
65
1.94
L110
1.94
Fig, 2.155 Result
Fig, 2.156 Result
$ curl http://localhost/book/hello.php
Hello Wor
1f (Szip->extractTo (Sdir.Stemp_dir) == false) {
check_dir ($dix) ;
exit (*Unzip Failed′) ;
In the above scenario, if the decompressed file name can contain the “. ""
character when decompressing the ZIP file, then the directory can be traversed to
jump out of the upload directory. The decompressed script file will not be deleted by
“check_dir". PHP has two common methods for decompressing ZIP files, the one is
the extension °ZipArchive” that comes with PHP, and the other one is the third-party
extension “PelZip".
First, test °ZipArchive", construct a compressed package containing “." char-
Kpou o1 ospo 010, asn ua pue ‘a3exed passauduoo euou e ajeuaua siape
the compressed package file, as shown in Fig. 2.160.
After uploading the ZIP file, the decompressed file is still in the random directory,
and directory traversal is not achieved, as shown in Fig. 2.161.
In the "/ext/zip/php_zip.c” file, the "ZIPARCHIVE_METHOD(extractTo)"
method calls the “php_zip_ extract_file” method to extract the file.
static ZIPARCHIVE_METHOD (extractTo){
struct zip *intern;
else {
/+ Extract all files */
int filecount = zip_get_num_files (intern) ;
if (filecount = -1) {
php_error_docref (NULL, _HARNING, "I1legal archive*) ;
---
## Page 204
188
2 Advanced Web
Sname = sfile[name′];
1./peodn,=ps
$ext = strtolower(substr(strrchr(sname，“.*)， 1));
Spath= $dir.Sname;
function check_dir(sdir)
shandle = cpendir(Sdir);
while(($f =readdir($handle)） I== false）
if（!in_array（$f，array（"-，'.）））
if（is_dir（sdir.sf)）
check_dtr(sdir.sf./');
Jelsef
$ext = strtolouer(substr(strrchr（$f，*.)， 1));
if（!in_array（$ext，array（’jg'，'gtf，‘png））
unlink(sdtr.sf);
if(in_array($ext, array('zip′））
move_uploded_file(sfile[′tmp_name′], $path);
$temp_dir=md5（rand(1800,9999）);
$zip= nev ZipArchive();
if($zip->open(Spath)
if($zip->extractTo(sdir.stemp_dir)= fal.se）{
true）{
exit（“航压失致’）；
$zip->close();
check_dir($dir);
exit("ok');
}else{
echo“error';
Jelset
exit（*仅允许上传zip文件'）；
Fig, 2.157 PHP code
---
## Page 205
2.4  File Upload Vulnerability
189
$echo“"
>1.
1.:.:7
.....
..
S zip a.zip *
adding:2.php (stored %)
adding:1.php (stored 0%)
World*;7>.PK...
0060h:
00000T3T080V330096390000000000
0890220000000000000
.....n--se@o....
0080h:
0070h1
T
.........2.phpyy
0090h:
EEFEFEFFFEFFFEFEFEFEFFFFFFFFEF
FF
6556656556656556
8999797979797999
00B0h:
DOAOh1
TFYFFFFFFFFFFFFFFF
TYTYITTYTYTTYTTTTT
9999799979999999
oocoh:
00
995999999999999.
ooDoh:
：05001C00332E
706B
7055
540900
03B2
04>*024989959020699000200000000001000
**\uK........
Fig, 2.158 The content of zip
Resslts TargetPosi
nsPy
F
Peyload
916b57bod4400066a33cd8
200
72707838617
bk37esidedfeso9ele3
d39243449a87a
2019 12+19:21 c
Belle worl4
Fig, 2.159 Execution process
---
## Page 206
190
2 Advanced Web
Name
Value
Strt
Siae
Coler
ushort delVensionMadeBy
798
ushort deVersionTeExtract
0
Bg
sea o
营品
enum COMPTYPEdeCompreson
20:59:50
73h
Fg
05/13/2019
75h
int deCre
IE30D8EAN
77h
int deu
78h
Fh
4h
4h
F
Fg
g
ushort deFileNam
nBua
17
83h
Fg
Bg:
ushort deExtraFied
ength
24
ushort deFieComn
F
ushort deDiskNumberStart
2h
ng
ushort delnternalAmributes
88h
80h
Fg
g
char deFleName/2)
uchar oREtraFl0[24]
95h
11h
 struet ZIPENDLOCATOR endLocator
BEN
18h
fg
Fig, 2.160 010 editor
k
yuteg-y-
q7453a5fe26fb6831d68bdc9cbeedcoe
oooo.jpg
1 directory, 1 file
Fig, 2.161 Execution process
RETURN_FALSE;
for (1 = 0; 1  mydir/foo.txt)
virtua1_file_ex (&new_state, file, NULL, CHD_EXPAND) ;
*/
path_cleaned = php_zip_make_relative_path (new_state .cwd,
new_state .cwd_length) ;
if {1path_cleaned) {
retuzn 0;
pzpps on ,xaoyen, asn isny po ayenxadzdyd, o u
the path, and you can see the standardized result from the comments. Then call
“php_zip_make_relative_path" to process the path to a relative path.
For example, the compressed package contains the */./aaaaaaaa.phpa file, which
is processed by “tsrm_realpath_r" in the *virtual_file_ex" method to become “/
aaaaaaa.php*", and then processed by “php_zip_make_relative_path" to become
a relative path °aaaaaaaa.php", so directory traversal cannot be achieved . However,
the processing of "virtual_file_ex” under Windows is different from that of Linux.
The *tsrm_realpath_r" method is not used to process paths in Windows, so this
method can be used under Windows. The whole code can be viewed in the “zend/
zend_virtual_cwd.c file.
pps e aeu nou sp dzid, ie s! d ssandoap on Aem sou
path, so directory traversal can be achieved. The test code is shown in Fig. 2.162.
function privDirCheck (Sp_dir, Sp_is_dir=false) 
Sv_result = 1;
/ / ---- Remove the fina1 1/ 
if ( (Sp_is_dir) && (substx (Sp_dir, -1) ==′/*11 {
Sp_dir = substr ($p_dir, 0, str1en ($p_dir) -1) ;
/ / ---- Check the directory availability
if ((is_diz (Sp_dir) 1 11(Sp_dir == **) > {
return 1;
/ / ---- Extract pazent directory
Sp_parent_dir = dirname (Sp_dir) ;
/ / -.-- Just a check
if (Sp_parent_dix != $p_dir) {
/ / ---- Look for parent directory
if ($p_parent_diz != "") {
if ((Sv_result = $thia->privDirCheck (Sp_parent_dir)1 1= 1) {
return Sv_result;
When constructing a compresed package by *PelZip", you need to pay attention
that the first file in the package should be a normal file. If the first file is a directory,
---
## Page 208
192
qPM pooumapy
nghude
Spath-setrt.ore
sdlr=“upload/*;
bstr[strrchr($nane, *,*3, 11);
check.drsdr.sf.
Lf!in_
unttnk(sdtr-sf))
tnrster
step.dir
1.spath);
Delsef
Fig, 2.162 PHP code
the traversal file will fail to use under Linux. The main reason is that when a file is
written to a temporary directory, the “privDirCheck?" method will be used to judge
whether the directory exists, and if it does not exist, the directory will be recursively
created.
26ef", and the first file in the compressed package is */.././a.php. Start to enter the
“privDirCheck”" method for directory detection and creation process. Because the
“dd409260aea46a90e61b9a69fb-9726ef’ directory does not exist. the directory that
does not exist under Linux cannot be traversed, so the method will retum false.
is_dix( . /upload/dd409260aea46a90e61b9a69fb9726ef / . / . . *)
The flow of the “privDirCheck" method is as follows:
 is_dir("-/upload/dd409260aea46a90e61b9a69fb9726ef/./.') return false, get the
 1e pue /96969619069ae09760p/peodn/, Xxo1oap uaed
“privDirCheck” method.
---
## Page 209
2.4 File Upload Vulnerability
193
 is_dir('./upload/dd409260aea46a90e61b9a69fb9726ef/.') still returns false, get
 eo °J3969696919069pea09760pp/peodn/, X1o1oap 1uared a
“privDirCheck" method.
 is_dir(" /upload/d409260aea46a90e61b9a69fb9726ef) still returns false, get
the parent directory “/upload ° call the °privDirCheck" method.
 is_dir(./upload'), the directory exists, returns true, then starts to recursively
create subdirectories that does not exist.
 mkdir(./upload/dd409260aea46a90e61b9a69fb9726ef), sucessfully created
the “dd40)......" directory.
 mkdir('./upload/dd409260aea46a90e61b9a69fb9726ef/.'), the directory tra-
versal is successful, and the actual execution is *mkdir?./upload')". Because the
upload directory already exists, an error thrown and the error number is returmed,
and finally the file extraction from the compressed package fails.
In summary, if the first file that needs to be compressed is a normal file, create a
temporary directory first, and there will be no problems with the following file
directory traversal. Of course, even if the directory does not exist under Windows,
the directory can be traversed, so there is no need to consider this issue.
Construct a compressed package containing special files for uploading, as shown
in Fig. 2.163, and finally realized exploit, as shown in Fig. 2.164.
Fig, 2.163 010 editor
char deFileName[17]
/aaaaaa.php
uchardeExtraField[24]
struct ZIPENDLOCATOR endLocator
$ cur1-F file=e/tmp/zip/a.zip*X“POST" http://locolhost/book/uplood.php
pThe requested URL/book/aoo.ph wasnot found on this server./p
.
okg
$curl-F “file=e/tmp/zip/a.zip*-X“POST" http://Locolhost/book/uplood.php
yul.v..m.,..
HelloWorld
Fig, 2.164 Execution process
---
## Page 210
Chapter3
AdvancedWeb Challenges
The first two chapters focus on traditional Web vulnerabilities. This chapter mainly
vulnerabilities of these two mainstream Web languages in CTF competition, namely
starts from the language features of PHP and Python, and introduces the common
deserialization vulnerabilities and Python security issues. Meanwhile, it introduces
Web vulnerabilities and Web logic vulnerabilities related to cryptograpby, so that
readers can have a more comprehensive understanding of the vulnerabilities in the
direction of Web.
3.1Deserialization Vulnerabilities
In various languages,the process of converting the state information of an object into
something that can be stored or transferred is serialization, and the inverse process of
serialization is deserialization, mainly to facilitate the transfer of the object, the
serialized string is transferred by means of files, networks, etc., and eventually the
previous object can be accessed through deserialization.
d a od se ns s ue u ix s os
.NET, and so on. PHP deserialization is often seen in CTF due to the rich magic
that PHP provides, along with the use of auto-loading classes, to facilitate the
construction of EXP. As the most popular Web knowledge point at present, this
section will introduce PHP serialization vulnerability step by step, through some
cases, let readers have a deeper understanding of PHP anti-sequence vulnerability.
3.1.1PHP Deserialization
This section introduces the fundamentals of PHP deserialization and the common
techniques to utilize it. Of course, these are not only common for CTF competitions,
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
195
Nu1L Team, Handbook for CTFers,
htps:/doi.crg/10.1007/978-981-19-0336-6_3
---
## Page 211
196
3 Advanced Web Challenges
but also essential for code audits. The following is the basic type expression after
PHP serialization.
•Boolean value (bool): b:value => b:0.
▪ Integer type (int): i:value => i:1.
,s :{(key, value pairs); => a:1: {i:1;s:1:"a").
Object: O:.
*NULL type: N.
The data format of the final serialized data is as follows:
:: {} :
The following is a simple example to explain deserialization. The object before
serialization is as follows:
class person{
public Snane;
publie Sage=19;
public Saex;
Serialization by serialize( ) function:
O:6 :*person* :3: {s:4 : "name";N;s :3 :"age";1 : 19;s:3 : *sex";; )
Where O indicates that this is an object, 6 indicates the length of the object name,
person is the serialized object name, and 3 indicates that there are three properties in
the object. The first attribute s is a string, and 4 is the length of the attribute name.
The attribute name is name, and its value is N (null). The second attribute is age,
whose value is an integer of type 19; The third property, sex, is also null.
So the question is, how do you attack with deserialization? There are magic
methods in PHP, which PHP calls automatically, but there are call conditions, for
example, _destruct is called when the object is destroyed. Normally, PHP does
garbage collection at the end of the block execution, which destroys the object, and
then triggers the _destruct magic method automatically. If the magic method still