# Linux PWN入门学习总结
**发布日期：2020/7/27**
**作者：队员编号002，酒仙桥六号部队**
**文章编号：2**
**字数：11,470 字**
**预计阅读时长：30 分钟**

## 引言
PWN是一个源自黑客术语的俚语，由“own”一词引申而来，意指在游戏对战中处于胜利优势。本文记录了我作为初学者学习Linux PWN的过程，详细介绍了Linux上的保护机制，分析了一些常见的漏洞（如栈溢出、堆溢出和Use-After-Free等），并介绍了一些常用的工具。

## 程序的常用保护机制

### Linux保护措施
操作系统提供了多种安全机制以降低或阻止缓冲区溢出攻击带来的风险，包括DEP（数据执行保护）和ASLR（地址空间布局随机化）等。我们可以使用`checksec`工具来检查可执行文件的安全属性，例如架构（Arch）、RELRO、栈保护（Stack Canary）、NX位（不可执行内存区域）和PIE（位置无关可执行文件）等。`pwntools`库自带`checksec`功能，可以通过以下命令安装：

```bash
pip install pwntools
```

然后运行：

```bash
checksec xxxx.so
```

示例输出：

```
Arch: aarch64-64-little
RELRO: Full RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
```

对于macOS用户，可能需要额外安装一些Linux命令，比如`readelf`，可以使用Homebrew进行安装：

```bash
brew install binutils
```

或者单独安装`checksec`工具：

```bash
wget https://github.com/slimm609/checksec.sh/archive/2.1.0.tar.gz
tar xvf 2.1.0.tar.gz
./checksec.sh-2.1.0/checksec --file=xxx
```

此外，在GDB中使用PEDA插件也可以查看这些信息：

```bash
gdb level4
(gdb-peda)$ checksec
CANARY : disabled
FORTIFY : disabled
NX : ENABLED
PIE : disabled
RELRO : Partial
```

### 栈保护 (Canary)
栈溢出保护是一种缓解缓冲区溢出攻击的方法。当启用栈保护后，函数开始执行时会在栈中插入一个cookie值；返回前会验证该cookie是否合法，如果不合法则停止程序运行。攻击者覆盖返回地址的同时通常也会破坏cookie值，从而导致栈保护机制生效，阻止恶意代码执行。

GCC从4.2版本起支持`-fstack-protector`编译选项来开启栈保护，4.9版本新增了`-fstack-protector-strong`进一步扩大了保护范围。相关编译命令如下：

```bash
gcc -o test test.c # 默认启用Canary
gcc -fno-stack-protector -o test test.c # 禁用栈保护
gcc -fstack-protector -o test test.c # 启用栈保护，但仅针对局部变量中含有数组的情况
gcc -fstack-protector-all -o test test.c # 为所有函数插入保护代码
```

### FORTIFY_SOURCE
FORTIFY_SOURCE提供了一种轻量级检查机制，用于检测潜在的缓冲区溢出错误。它主要应用于大量使用字符串或内存操作函数的场景。通过设置`FORTIFY_SOURCE=1`并在编译时启用优化级别1 (`-O1`) ，可以在不改变程序功能的前提下增强安全性。

编译命令示例：

```bash
gcc -o test test.c # 默认情况下不启用此检查
gcc -D_FORTIFY_SOURCE=1 -o test test.c # 启用较弱的检查
```

### ASLR
地址空间布局随机化能够将进程中的关键地址（如堆、栈、mmap基址等）随机化，增加攻击难度。可以通过修改`/proc/sys/kernel/randomize_va_space`文件来控制ASLR的行为：

```bash
echo 2 > /proc/sys/kernel/randomize_va_space
```

其中，`2`表示完全启用ASLR，包括堆、栈及vdso页面随机化。

### PIE与PIC
PIE（Position Independent Executable）允许生成的位置无关可执行文件，而PIC（Position Independent Code）则生成位置无关的代码段。这两个特性都依赖于全局偏移表（GOT）。不同之处在于PIE适用于整个可执行文件，而PIC主要用于共享库。两者均需配合ASLR使用才能达到最佳效果。

编译选项如下：

```bash
gcc -o test test.c # 默认不开启PIE
gcc -fpie -pie -o test test.c # 开启PIE，强度较低
gcc -fPIE -pie -o test test.c # 开启PIE，最高强度
gcc -fpic -o test test.c # 开启PIC，不启用PIE
gcc -fPIC -o test test.c # 开启PIC，不启用PIE
```

### RELRO
RELRO技术旨在通过将符号重定位表设为只读或尽早绑定动态符号来减少对GOT表的攻击机会。根据配置的不同，可以实现部分或全部保护。

编译命令：

```bash
gcc -o test test.c # 默认为Partial RELRO
gcc -z norelro -o test test.c # 关闭RELRO
gcc -z lazy -o test test.c # 部分启用
gcc -z now -o test test.c # 完全启用
```

## 工具整合

### pwntools
`pwntools`是一个强大的二进制利用框架，广泛应用于漏洞研究领域。它可以用来编写基于Python的漏洞利用脚本，并且集成了许多方便的功能。

### PyCharm
PyCharm是一款优秀的IDE，支持实时调试和编写攻击脚本，有助于提高开发效率。

### IDA Pro
IDA Pro是业界领先的反汇编工具之一，非常适合逆向工程和漏洞分析工作。

### GDB插件
推荐使用PEDA和GEF两款GDB插件，它们分别提供了丰富的辅助功能，如清晰地显示寄存器状态、反汇编代码等，极大地简化了调试过程。

希望这篇文章能帮助你更好地理解Linux PWN的基础知识！