title:Verena: End-to-End Integrity Protection for Web Applications
author:Nikolaos Karapanos and
Alexandros Filios and
Raluca Ada Popa and
Srdjan Capkun
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Verena: End-to-End Integrity Protection
for Web Applications
Nikolaos Karapanos1, Alexandros Filios1, Raluca Ada Popa1, 2, and Srdjan Capkun1
1Dept. of Computer Science
ETH Zurich
2Dept. of Electrical Engineering and Computer Science
UC Berkeley
Abstract—Web applications rely on web servers to protect the
integrity of sensitive information. However, an attacker gaining
access to web servers can tamper with the data and query
computation results, and thus serve corrupted web pages to the
user. Violating the integrity of the web page can have serious
consequences, affecting application functionality and decision-
making processes. Worse yet, data integrity violation may affect
physical safety, as in the case of medical web applications
which enable physicians to assign treatment to patients based
on diagnostic information stored at the web server.
This paper presents Verena, a web application platform that
provides end-to-end integrity guarantees against attackers that
have full access to the web and database servers. In Verena, a
client’s browser can verify the integrity of a web page by verifying
the results of queries on data stored at the server. Verena provides
strong integrity properties such as freshness, completeness, and
correctness for a common set of database queries, by relying on
a small trusted computing base. In a setting where there can
be many users with different write permissions, Verena allows a
developer to specify an integrity policy for query results based
on our notion of trust contexts, and then enforces this policy
efﬁciently. We implemented and evaluated Verena on top of the
Meteor framework. Our results show that Verena can support
real applications with modest overhead.
I. INTRODUCTION
Web applications store a wide range of data including
sensitive personal, medical and ﬁnancial information, as well
as system control and operational data. Users and companies
rely on these servers to protect the integrity of their data and
to answer queries correctly. Unfortunately, web application
servers are compromised frequently [28], thus enabling an
attacker to tamper with data or computation results displayed
in a webpage, thus violating their integrity.
The integrity of webpage content is especially important in
applications in which displayed data affects decision making.
This is well exempliﬁed by medical web platforms where
patient diagnostic data is stored on web servers and remotely
accessed by physicians. Modiﬁcation of this data might result
in miss-diagnosis, lead to incorrect treatment and even death.
A recent study estimates that millions of people are miss-
diagnosed every year in the US with a half of these cases
potentially causing severe harm [44]. Another study estimates
that miss-diagnoses causes 40,000 deaths annually [47]. Some
of the main reasons for miss-diagnoses were related to failure
by the patients to provide accurate medical history, and errors
made by a physician in interpreting test results [43]. If web
applications with patient and test result data are corrupted,
treatment decisions will therefore be made based on incorrect
data, likely resulting in substantial harm. In §IV-A, we discuss a
concrete medical web application used to monitor patients with
implanted cardiac devices, where a web server compromise
can lead to serious patient harm.
In addition to physical safety, webpage integrity is important
for basic security properties such as conﬁdentiality against
active attackers, for example, by providing integrity protection
to data structures deﬁning access control.
An uncompromised web server protects end-to-end integrity
in a few ways. Many web applications involve multiple users
and therefore enforce access control policies (e.g., a particular
patient’s data may be manipulated only by his physician).
Furthermore, the web server ensures that clients’ data requests
and queries are executed correctly on data that is complete and
up-to-date (i.e., fresh). An attacker who compromises the web
server could therefore violate some or all of these properties.
In this work, we propose Verena, the ﬁrst web framework that
provides end-to-end integrity for web applications, enforcing
the properties above. Using Verena, the application developer
speciﬁes an integrity policy and a user’s browser checks that a
webpage received from a web server satisﬁes this policy, even
when the server is fully compromised by an attacker. Verena
checks the integrity of code, data, and query computation
results within a webpage by ensuring that these results are
complete, correct, and up-to-date.
Verifying query results efﬁciently in the web setting is
challenging. While much progress has been made in generic
tools for veriﬁable computation [14, 38, 46], using these
tools for database queries and web server execution remains
far too slow. Instead, work on authenticated data structures
(ADS) [20, 23, 30, 31, 33, 37, 49] provides better performance
by targeting a more speciﬁc, yet still wide class of functionality.
These tools enable efﬁcient veriﬁcation without downloading
data on the client and re-executing the computation. However,
such tools are far from providing a sufﬁcient system for web
applications; work on ADS assumes that a single client owns
all the data and this client has persistent state to store some
hashes. Web applications are inherently multi-user and stateless.
Different users can change different portions of data and a
query computation can span data modiﬁed by multiple users.
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Nikolaos Karapanos. Under license to IEEE.
DOI 10.1109/SP.2016.58
DOI 10.1109/SP.2016.58
895
895
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 
The ﬁrst challenge for Verena is determining an API for
developers that captures the desired query integrity properties,
such as correctness, completeness and freshness, at the same
time with multi-user access control. To address this issue, within
Verena’s API, we introduce the notion of query trust contexts
(TC) coupled with integrity query prototypes (IQPs). A trust
context refers to the group of users who are allowed to affect
some query result, e.g., by inserting, modifying or deleting data
used in a query. An IQP is a declared query pattern associated
with one or more trust contexts. Each query runs within a
speciﬁed trust context; Verena prevents a malicious server or
a user outside of the trust context from affecting the results of
this query. Queries may also span a set of trust contexts not
known a priori; a mechanism called the completeness chain
ensures that the returned result is complete, i.e., all the results
of all the relevant trust contexts were included. The integrity
policy is hence associated with queries and not with the data –
nevertheless, the policy implicitly carries over to data because
data is accessed through queries.
The second challenge is verifying query results in a multi-
user setting. To address this challenge, Verena builds on ADS
work [20, 23, 30, 31, 33, 37, 49], and maintains a forest of
ADS trees, by automatically mapping trust contexts to ADSes.
To ensure completeness on queries spanning multiple trust
contexts, as speciﬁed by completeness chains, Verena logically
nests trees within other trees. Currently, Verena implements
an ADS that can verify range and equality queries as well as
aggregations, such as sum, count, and average. By substituting
the underlying ADS, Verena can be extended to support a
wider range of queries.
The third challenge, also brought by the multi-user and
web setting, is a known impossibility result: when there are
no assumptions on the trustworthiness of the server and the
connectivity of clients, one cannot prevent fork attacks [32, 34]
and hence cannot guarantee freshness. To provide freshness,
one must use some trust server-side. Verena manages to use
a small trusted base - a hash server that runs less than 650
lines of code. The hash server may also be compromised, as
long as it does not collude with the main server. The hash
server stores a small amount of information (mostly hashes and
version numbers), based on which Verena constructs freshness
for the entire database in an efﬁcient way. The hash server
also addresses the problem of web clients being stateless and
not always online.
We implemented Verena on top of the Meteor framework [36]
and evaluated it on a remote patient monitoring application,
as well as two other existing applications. Our evaluation
results show that Verena incurs a modest overhead in terms of
latency and throughput. Our measurements also demonstrate
the simplicity of the hash server, compared to the main server;
the hash server achieves signiﬁcantly higher throughput than
the main server.
A. System Model
II. MODEL
We consider a typical web application scenario, where clients
access a web server through web browsers. The clients could
be browsers, operated by human users, or any device capable
of communicating with the web server over the network. The
main server, sometimes simply referred to as server, is a typical
web server consisting of a web application front-end and a
database server.
Our setup further consists of the following parties: a hash
server, an identity provider (IDP), and the developer who
creates and maintains the web application code. The hash
server and IDP can be colocated on the same machine. They
each have a public-key pair and their public key is hardcoded
in Verena applications. In §III we describe the role of the
different parties in the Verena architecture.
Moreover, for describing Verena’s API in §IV, we use a
No-SQL API, which is typical in modern web applications.
For consistency, we use a syntax and terminology similar
to MongoDB [5], which we simplify for brevity. This is
also compatible with the Meteor framework [36], which we
use to implement our Verena prototype (described in §X).
Nevertheless, Verena’s API could be easily cast in a variety of
other database syntaxes (both SQL and No-SQL).
The web application’s database consists of collections
(equivalent of tables in SQL), each having a set of documents
(equivalents of rows in SQL), and each document has a set
of ﬁelds (which are similar to columns in SQL). A developer
can issue queries to this database from the web application:
“insert” (to insert documents), “update” (to update documents),
“remove” (to delete documents), “ﬁnd” (to read document data)
and “aggregate” (to compute sum, average and other aggregate
functions). The ﬁnd and aggregate operations can read data
based on ﬁlters, also called selectors, on certain ﬁelds using
range or equality. Queries are deﬁned using a JavaScript-like
syntax. For example, “patients.ﬁnd({patientID:2})” fetches all
documents from the collection “patients” whose “patientID”
ﬁeld equals 2.
B. Threat Model
Verena considers a strong attacker at the main server; the
server can be corrupted arbitrarily. This means that an attacker
can modify the data in the database and modify query or
computation results returned by the server. There are numerous
ways in which an attacker could modify query results. For
example, a malicious server can return partial results to a range
query, it can return old data items, it can compute aggregates
incorrectly or on partial or old data. Worse, the server can
create fake user accounts or collude with certain users.
This strong threat model addresses powerful attackers in
the following use cases: a web application server runs in a
cloud and a malicious cloud employee attempts to manipulate
unauthorized information. Alternatively, an attacker hacks into
the web application server through vulnerability exploitation
and even obtains root access to the web and database servers,
so she can change the server’s behavior.
896896
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:13 UTC from IEEE Xplore.  Restrictions apply. 



	
	


	





		 
	
	










		




	



		 		
	


		
		

Fig. 1: System overview. Grey-shaded components are modules introduced by Verena on top of a basic client-side architecture setup.
An attacker can also corrupt the hash server, but importantly,
we assume that an attacker can corrupt at most one of the main
and hash server. In other words, we assume that at least one of
the hash server and main server behave correctly. For example,
these two servers could be hosted on different clouds such that
the employee of one cloud does not have access to the second
cloud. Alternatively, the hash server, which we show to be
very lightweight compared to the main server, could be hosted
in-house, while the resource-intensive main server could be
outsourced to a cloud provider. We also stress that, given that
the hash server runs a very small code base, and answers to a
very narrow interface, it will be signiﬁcantly less likely to be
compromised by a remote attacker.
The same threat model applies to the IDP server. We use
the IDP for the task of certifying each pair of username and
public key. Verena requires that only one of the IDP and main
server to behave correctly. Hence, the IDP and the hash server
can be colocated, as depicted in Fig. 1, where the mutually
distrustful servers are separated by a dashed line.
Clients are also not fully trusted. They may attempt to
bypass their write permissions by modifying data they are not
allowed to change. They might even collude with either the
main server or the hash server (but not with both of them at
the same time). Nevertheless, clients are allowed to arbitrarily
manipulate the data they legitimately have access to. If the
main server colludes with a client, the server cannot affect the
integrity of data owned by other clients that was not shared
with the corrupted client.
Finally, we assume that
the developer wrote the web
application faithfully and followed Verena’s API to specify an
integrity policy. In contrast, the service provider and server