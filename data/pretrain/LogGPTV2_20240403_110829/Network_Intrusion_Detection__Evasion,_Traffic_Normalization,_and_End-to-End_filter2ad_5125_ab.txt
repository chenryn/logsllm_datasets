performance decreases both for the normalizer and for
end-to-end ﬂows; and we impact end-to-end semantics
more. Our goal is not to determine a single “sweet spot,”
but to understand the character of the tradeoffs, and, ide-
ally, design a system that a site can tune to match their
local requirements.
Normalization vs. protection. As a normalizer is a
“bump in the wire,” the same box performing normal-
ization can also perform ﬁrewall functionality. For ex-
ample, a normalizer can prevent known attacks, or shut
down access to internal machines from an external host
when the NIDS detects a probe or an attack. In this pa-
per we concentrate mainly on normalization functional-
ity, but will occasionally discuss protective functionality
for which a normalizer is well suited.
End-to-end semantics. As much as possible, we would
like a normalizer to preserve the end-to-end semantics of
well-behaved network protocols, whilst cleaning up mis-
behaving trafﬁc. Some packets arriving at the normalizer
simply cannot be correct according to the protocol spec-
iﬁcation, and for these there often is a clear normaliza-
tion to apply. For example, if two copies of an IP frag-
ment arrive with the same fragment offset, but contain-
ing different data, then dropping either of the fragments
or dropping the whole packet won’t undermine the cor-
rect operation of the particular connection. Clearly the
operation was already incorrect.
However, there are other packets that, while perfectly
legal according to the protocol speciﬁcations, may still
cause ambiguities for the NIDS. For example, it is per-
fectly legitimate for a packet to arrive at the normalizer
with a low TTL. However, per the discussion in the In-
troduction, the NIDS cannot be sure whether the packet
will reach the destination. A possible normalization for
such packets is to increase its TTL to a large value.1 For
most trafﬁc, this will have no adverse effect, but it will
break diagnostics such as traceroute, which rely on
the semantics of the TTL ﬁeld for their correct operation.
Normalizations like these, which erode but do not bru-
tally violate the end-to-end protocol semantics, present
a basic tradeoff that each site must weigh as an individ-
ual policy decision, depending on its user community,
performance needs, and threat model. In our analysis of
different normalizations, we place particular emphasis
on this tradeoff, because we believe the long-term util-
ity of preserving end-to-end semantics is often underap-
preciated and at risk of being sacriﬁced for short-term
1Clearly, this is dangerous unless there is no possibility of the
packet looping around to the normalizer again.
expediency.
Impact on end-to-end performance. Some normal-
izations are performed by modifying packets in a way
that removes ambiguities, but also adversely affects the
performance of the protocol being normalized. There is
no clear answer as to how much impact on performance
might be acceptable, as this clearly depends on the pro-
tocol, local network environment, and threat model.
host might be able to exploit such ambiguities to evade
the local NIDS. If the site’s threat model includes such
attacks, either two normalizers may be used, one on ei-
ther side of the NIDS, or a NIDS integrated into a single
normalizer. Finally, we note that if both internal and ex-
ternal hosts in a connection are compromised, there is
little any NIDS or normalizer can do to prevent the use
of encrypted or otherwise covert channels between the
two hosts.
Stateholding. A NIDS system must hold state in or-
der to understand the context of incoming information.
One form of attack on a NIDS is a stateholding attack,
whereby the attacker creates trafﬁc that will cause the
NIDS to instantiate state (see  4.2 below). If this state
exceeds the NIDS’s ability to cope, the attacker may well
be able to launch an attack that passes undetected. This
is possible in part because a NIDS generally operates
passively, and so “fails open.”
A normalizer also needs to hold state to correct ambigu-
ities in the data ﬂows. Such state might involve keep-
ing track of unacknowledged TCP segments, or holding
IP fragments for reassembly in the normalizer. How-
ever, unlike the NIDS, the normalizer is in the forward-
ing path, and so has the capability to “fail closed” in the
presence of stateholding attacks. Similarly, the normal-
izer can perform “triage” amongst incoming ﬂows:
if
the normalizer is near state exhaustion, it can shut down
and discard state for ﬂows that do not appear to be mak-
ing progress, whilst passing and normalizing those that
do make progress. The assumption here is that without
complicity from internal hosts (see below), it is difﬁcult
for an attacker to fake a large number of active connec-
tions and stress the normalizer’s stateholding.
But even given the ability to perform triage, if a normal-
izer operates fail-closed then we must take care to assess
the degree to which an attacker can exploit statehold-
ing to launch a denial-of-service attack against a site, by
forcing the normalizer to terminate some of the site’s le-
gitimate connections.
Inbound vs. outbound trafﬁc. The design of the Bro
network intrusion detection system assumes that it is
monitoring a bi-directional stream of trafﬁc, and that ei-
ther the source or the destination of the trafﬁc can be
trusted [12]. However it is equally effective at detecting
inbound or outbound attacks.
The addition of a normalizer to the scenario potentially
introduces an asymmetry due to its location—the nor-
malizer protects the NIDS against ambiguities by pro-
cessing the trafﬁc before it reaches the NIDS (Figure 2).
Thus, an internal host attempting to attack an external
Whilst a normalizer will typically make most of its mod-
iﬁcations to incoming packets, there may also be a num-
ber of normalizations it applies to outgoing packets.
These normalizations are to ensure that the internal and
external hosts’ protocol state machines stay in step de-
spite the normalization of the incoming trafﬁc. It is also
possible to normalize outgoing trafﬁc to prevent unin-
tended information about the internal hosts from escap-
ing ([17], and see  5.1 below).
Protection vs. ofﬂoading work. Although the primary
purpose of a normalizer is to prevent ambiguous trafﬁc
from reaching the NIDS where it would either contribute
to a state explosion or allow evasion, a normalizer can
also serve to ofﬂoad work from the NIDS. For example,
if the normalizer discards packets with bad checksums,
then the NIDS needn’t spend cycles verifying check-
sums.
4 Real-world Considerations
Due to the adversarial nature of attacks, for security sys-
tems it is particularly important to consider not only the
principles by which the system operates, but as much
as possible also the “real world” details of operating the
system. In this section, we discuss two such issues, the
“cold start” problem, and attackers targeting the normal-
izer’s operation.
4.1 Cold start
It is natural when designing a network trafﬁc analyzer
to structure its analysis in terms of tracking the progres-
sion of each connection from the negotiation to begin it,
through the connection’s establishment and data trans-
fer operations, to its termination. Unless carefully done,
however, such a design can prove vulnerable to incor-
rect analysis during a cold start. That is, when the ana-
lyzer ﬁrst begins to run, it is confronted with trafﬁc from
already-established connections for which the analyzer
lacks knowledge of the connection characteristics nego-
tiated when the connections were established.
For example, the TCP scrubber [8] requires a connec-
tion to go through the normal start-up handshake. How-
ever, if a valid connection is in progress, and the scrub-
ber restarts or otherwise loses state, then it will terminate
any connections in progress at the time of the cold start,
since to its analysis their trafﬁc exchanges appear to vio-
late the protocol semantics that require each newly seen
connection to begin with a start-up handshake.
The cold-start problem also affects the NIDS itself. If
the NIDS restarts, the loss of state can mean that previ-
ously monitored connections are no longer monitorable
because the state negotiated at connection setup time is
no longer available. As we will show, techniques re-
quired to allow clean normalizer restarts can also help a
NIDS with cold start ( 6.2).
Finally, we note that cold start is not an unlikely “corner
case” to deal with, but instead an on-going issue for nor-
malizers and NIDS alike. First, an attacker might be able
to force a cold start by exploiting bugs in either system.
Second, from operational experience we know that one
cannot avoid occasionally restarting a monitor system,
for example to reclaim leaked memory or update conﬁg-
uration ﬁles. Accordingly, a patient attacker who keeps
a connection open for a long period of time can ensure a
high probability that it will span a cold start.
4.2 Attacking the Normalizer
Inevitably we must expect the normalizer itself to be the
target of attacks. Besides complete subversion, which
can be prevented only though good design and coding
practice, two other ways a normalizer can be attacked
are stateholding attacks and CPU overload attacks.
Stateholding attacks. Some normalizations are state-
less. For example, the TCP MSS option (Maximum Seg-
ment Size) is only allowed in TCP SYN packets. If a
normalizer sees a TCP packet with an MSS Option but
no SYN ﬂag, then this is illegal; but even so, it may
be unclear to the NIDS what the receiving host will do
with the option, since its TCP implementation might in-
correctly still honor it. Because the use of the option is
illegal, the normalizer can safely remove it (and adjust
the TCP checksum) without needing to instantiate any
state for this purpose.
Other normalizations require the normalizer to hold
state. For example, an attacker can create ambiguity by
sending multiple copies of an IP fragment with differ-
ent payloads. While a normalizer can remove fragment-
based ambiguities by reassembling all fragmented IP
packets itself before forwarding them (and if neces-
sary re-fragmenting correctly), to do this, the normalizer
must hold fragments until they can be reassembled into
a complete packet. An attacker can thus cause the nor-
malizer to use up memory by sending many fragments
of packets without ever sending enough to complete a
packet.
This particular attack is easily defended against by sim-
ply bounding the amount of memory that can be used
for fragments, and culling the oldest fragments from the
cache if the fragment cache ﬁlls up. Because fragments
tend to arrive together, this simple strategy means an at-
tacker has to ﬂood with a very high rate of fragments
to cause a problem. Also, as IP packets are unreliable,
there’s no guarantee they arrive anyway, so dropping the
occasional packet doesn’t break any end-to-end seman-
tics.
More difﬁcult to defend against is an attacker causing
the normalizer to hold TCP state by ﬂooding in, for ex-
ample, the following ways:
1. Simple SYN ﬂooding with SYNs for multiple
connections to the same or to many hosts.
2. ACK ﬂooding. A normalizer receiving a packet
for which it has no state might be designed to
then instantiate state (in order to address the “cold
start” problem).
3. Initial window ﬂooding. The attacker sends a
SYN to a server that exists, receives a SYN-ACK,
and then ﬂoods data without waiting for a re-
sponse. A normalizer would normally temporarily
store unacknowledged text to prevent inconsistent
retransmissions.
Our strategy for defending against these is twofold.
First, the normalizer knows whether or not it’s under at-
tack by monitoring the amount of memory it is consum-
ing. If it’s not under attack, it can instantiate whatever
state it needs to normalize correctly. If it believes it’s
under attack, it takes a more conservative strategy that is
designed to allow it to survive, although some legitimate
trafﬁc will see degraded performance.
In general our aim when under attack is to only instanti-
ate TCP connection state when we see trafﬁc from an in-
ternal (and hence trusted) host, as this restricts statehold-
ing attacks on the normalizer to those actually involving
real connections to internal hosts. Note here that the nor-
malizer is explicitly not attempting to protect the inter-
nal hosts from denial-of-service attacks; only to protect
itself and the NIDS.
CPU overload attacks. An attacker may also attempt
to overload the CPU on the normalizer. However, un-
like stateholding attacks, such an attack cannot cause the
normalizer to allow an ambiguity to pass. Instead, CPU
overload attacks can merely cause the normalizer to for-
ward packets at a slower rate than it otherwise would.
In practice, we ﬁnd that most normalizations are rather
cheap to perform ( 7.2), so such attacks need to concen-
trate on the normalizations where the attacker can uti-
lize computational complexity to their advantage. Thus,
CPU utilization attacks will normally need to be com-
bined with stateholding attacks so that the normalizer
performs an expensive search in a large state-space. Ac-
cordingly, we need to pay great attention to the imple-
mentation of such search algorithms, with extensive use
of constant-complexity hash algorithms to locate match-
ing state. An additional difﬁculty that arises is the need
to be opportunistic about garbage collection, and to ap-
ply algorithms that are low cost at the possible expense
of not being completely optimal in the choice of state
that is reclaimed.
5 A Systematic Approach
For a normalizer to completely protect the NIDS, in prin-
ciple we must be able to normalize every possible se-
quence of packets that the NIDS might treat differently
from the end-system. Given that the NIDS cannot pos-
sibly know all the application state at the end-system
for all applications, we focus in this work on the more
tractable problem of normalizing the internetwork (IP,
ICMP) and transport (TCP, UDP) layers.
Even with this somewhat more restricted scope, we ﬁnd
there are still a very large number of possible protocol
ambiguities to address. Consequently, it behooves us
to develop a systematic methodology for attempting to
identify and analyze all of the possible normalizations.
The methodology we adopt is to walk through the packet
headers of each protocol we consider. This ensures that
we have an opportunity to consider each facet of the se-
mantics associated with the protocol.
For each header element, we consider its possible range
of values, their semantics, and ways an attacker could
exploit the different values; possible actions a normal-
izer might take to thwart the attacks; and the effects
these actions might have on the protocol’s end-to-end se-
mantics. Whilst our primary intention is to explore the
possible actions a normalizer can take, the exercise also
raises interesting questions about the incompleteness of
the speciﬁcations of error handling behavior in Internet
protocols, and about the nature of the intentional and un-
intentional end-to-end semantics of Internet protocols.
For reasons of space, we conﬁne our analysis here to a
single protocol; we pick IP (version 4) because it is sim-
ple enough to cover fairly thoroughly in this paper, yet
has rich enough semantics (especially fragmentation) to
convey the ﬂavor of more complicated normalizations.
In  6 we then present some particularly illuminating
examples of TCP normalizations. We defer our method-
ical analysis of TCP (and UDP and ICMP) to [4].
Note that many of the normalizations we discuss below
appear to address very unlikely evasion scenarios. How-
ever, we believe the right design approach is to normal-
ize everything that we can see how to correctly normal-
ize, because packet manipulation and semantic ambigu-
ity is sufﬁciently subtle that we may miss an attack, but
still thwart it because we normalized away the degrees
of freedom to express the attack.
Figure 3 shows the ﬁelds of the IP packet header. For
each ﬁeld we identify possible issues that need normal-
ization and discuss the effects of our solutions on end-to-
end semantics. The reader preferring to delve into only
more interesting normalizations may choose to jump
ahead to  5.1.
Version. A normalizer should only pass packets with IP
version ﬁelds which the NIDS understands.
Header length. It may be possible to send a packet with
an incorrect header length ﬁeld that arrives at an end-
systems and is accepted. However, other operating systems
or internal routers may discard the packet. Thus the NIDS
does not know if the packet will be processed or not.
Solution: If the header length ﬁeld is less than 20 bytes,
the header is incomplete, and the packet should be dis-
carded. If the header length ﬁeld exceeds the packet length,
the packet should be discarded. (See Total length below for
a discussion of exactly what constitutes the packet length.)
Effect on semantics: Packet is ill-formed—no adverse ef-
fect.
Note: If the header length is greater than 20 bytes, this
indicates options are present. See IP option processing be-
low.
Type Of Service/Diffserv/ECN. These bits have re-
cently been reassigned to differentiated services [11] and
explicit congestion notiﬁcation [15].
Issue: The Diffserv bits might potentially be used to
deterministically drop a subset of packets at an internal
Diffserv-enabled router, for example by sending bursts of
packets that violate the conditioning required by their Diff-
serv class.
Solution: If the site does not actually use Diffserv mecha-
nisms for incoming trafﬁc, clear the bits.
Effect on semantics: If Diffserv is not being used inter-
nally, the bits should be zero anyway, so zeroing them is
safe. Otherwise, clearing them breaks use of Diffserv.
0
0
1 2 3 4 5 6 7 8 9
1
0
1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
2
3
Version
Head len
TOS/Diffserv/ECN
Total Length
IP Identifier
0
DFMF
Fragment Offset
Time to Live
Protocol
Header Checksum
Source Address
Destination Address
Options
Padding
Figure 3: IP v4 Header
Don’t Fragment (DF) ﬂag.
If DF is set, and the Maxi-
mum Transmission Unit (MTU) anywhere in the internal
network is smaller than the MTU on the access link to
the site, then an attacker can deterministically cause some
packets to fail to reach end-systems behind the smaller
MTU link. This is done by setting DF on packets with
a larger MTU than the link.
Note: The NIDS might be able to infer this attack from