title:HADES-IoT: A Practical Host-Based Anomaly Detection System for IoT
Devices
author:Dominik Breitenbacher and
Ivan Homoliak and
Yan Lin Aung and
Nils Ole Tippenhauer and
Yuval Elovici
HADES-IoT: A Practical Host-Based Anomaly Detection System
for IoT Devices (Extended Version)
Dominik Breitenbacher
Singapore University of Technology
and Design
Ivan Homoliak
and Design
PI:EMAIL
PI:EMAIL
Singapore University of Technology
Singapore University of Technology
Yan Lin Aung
and Design
PI:EMAIL
9
1
0
2
y
a
M
3
]
R
C
.
s
c
[
1
v
7
2
0
1
0
.
5
0
9
1
:
v
i
X
r
a
Nils Ole Tippenhauer
CISPA Helmholtz Center for
Information Security
tippenhauer@cispa.saarland
Yuval Elovici
Singapore University of Technology
and Design
PI:EMAIL
ABSTRACT
Internet of Things (IoT) devices have become ubiquitous and are
spread across many application domains including the industry,
transportation, healthcare, and households. However, the prolifera-
tion of the IoT devices has raised the concerns about their security,
especially when observing that many manufacturers focus only
on the core functionality of their products due to short time to
market and low cost pressures, while neglecting security aspects.
Moreover, it does not exist any established or standardized method
for measuring and ensuring the security of IoT devices. Conse-
quently, vulnerabilities are left untreated, allowing attackers to
exploit IoT devices for various purposes, such as compromising
privacy, recruiting devices into a botnet, or misusing devices to
perform cryptocurrency mining.
In this paper, we present a practical Host-based Anomaly DE-
tection System for IoT (HADES-IoT) that represents the last line of
defense. HADES-IoT has proactive detection capabilities, provides
tamper-proof resistance, and it can be deployed on a wide range
of Linux-based IoT devices. The main advantage of HADES-IoT
is its low performance overhead, which makes it suitable for the
IoT domain, where state-of-the-art approaches cannot be applied
due to their high-performance demands. We deployed HADES-IoT
on seven IoT devices to evaluate its effectiveness and performance
overhead. Our experiments show that HADES-IoT achieved 100%
effectiveness in the detection of current IoT malware such as VP-
NFilter and IoTReaper; while on average, requiring only 5.5% of
available memory and causing only a low CPU load.
KEYWORDS
Host-Based Anomaly Detection, Intrusion Detection, IoT, System
Call Interception, Loadable Kernel Module, Tamper-Proof
1 INTRODUCTION
In recent years, the number of IoT devices connected to the Inter-
net reached seven billion [16] and is expected to grow. Gartner
estimates that more than 20 billion IoT devices will be connected
to the Internet by 2020 [19]. There are two reasons for this trend:
ubiquitous Internet connectivity and decreasing cost of embed-
ded computing technology. Currently, IoT devices are utilized in
various application domains including healthcare, transportation,
entertainment, industrial control, smart buildings/homes, and oth-
ers. Nevertheless, the advent of the IoT has brought challenges in
many areas, including data storage, maintenance, and particularly,
privacy and security [26], [13], [22]. Many IoT devices are designed
with a particular purpose in mind, so their software and hardware
is solely chosen to satisfy the requirements of core functionalities,
e.g., using just the fastest processor needed to meet certain real-
time constraints and nothing faster. When it comes to security, the
preference is put on fast time to market and budget constraints at
the expense of more expensive and possibly more comprehensive
security solutions. Therefore, embedded technology results in a
trade-off between cost and security [26]; real-time requirements,
computing capabilities, and energy consumption are also part of
this trade-off.
For these reasons, IoT devices are often released with serious vul-
nerabilities, and this issue is further exacerbated by the fact that IoT
devices are, in many cases, exposed on the Internet, and thus easily
accessible to attackers. Once a vulnerable device is compromised, it
can be exploited for various purposes. Currently, the most common
scenario is that the compromised device becomes a part of a botnet
that performs DDoS attacks [7], [9], [23]. However, recently, attack-
ers have started to utilize IoT devices for cryptocurrency mining
as well [6], [17]. Most IoT devices were exploited due to opera-
tions security (OPSEC) issues, such as the use of weak or default
passwords [3], [29]; however, they are also exploited due to buffer
overflow, command injection, etc., [30]. These practical examples
raise the question of how to achieve greater security in IoT devices
while minimizing the requirements on cost and the utilization of
computational resources? One way to raise the bar against attackers
is to improve preventive OPSEC countermeasures, such as employ-
ing strong passwords and conservative access control. However, in
the case of more sophisticated attacks that cannot be prevented by
OPSEC countermeasures, IoT devices must be protected by other
dedicated means, such as host-based intrusion detection systems or
IoT-specific antivirus systems. As discussed above, there might not
be enough economic incentives for companies developing low-cost
competitive IoT devices to invest in security countermeasures that
are also computationally expensive. On the other hand, as we have
learned after many years of discussion regarding the security of IT
and software in general, serious vulnerabilities can remain hidden
due to the complexity of modern systems and the inherent difficulty
to reveal such vulnerabilities. For example, even a securely written
application might be vulnerable due to bugs in third-party libraries,
compiler, or even an operating system.
Given the abovementioned constraints, we make the following
fundamental observation: in contrast to general computing devices
such as laptops or mobile devices, IoT devices have, by design, a
well-defined and stable functionality. Moreover, this functionality is
usually provided by a small set of system processes that have mostly
stable behavior, as IoT devices are rarely updated. However, when
an IoT device is compromised by malware, its behavior changes
significantly. Therefore, intrusion detection and anomaly detection
systems are promising options for securing IoT devices. Although,
these systems might be deployed outside of the device and perform
inspection of network traffic [11], they might be evaded by various
payload-based [8, 31] and non-payload-based obfuscations [5, 12].
Hence, we argue that behavioral changes are best observed from
“within” a device, for instance, by monitoring which processes are
running and what actions they perform. For this reason, we consider
host-based behavior analysis as an effective last line of defense.
In particular, we aim at process-based adaptation of an anomaly
detection approach that profiles the normal behavior of an IoT
device and strictly detects all anomalies deviating from this profile.
In this paper, we propose a lightweight Host-based Anomaly DE-
tection System for IoT devices (HADES-IoT) that monitors process
spawning and stops any unauthorized program before its execution,
thus providing proactive detection and prevention functionalities.
To achieve real-time detection, HADES-IoT has been developed
in the form of a loadable kernel module of Linux-based operating
systems. Such a design decision allows us to make HADES-IoT
tamper-proof resistant against an attacker (with superuser privi-
leges) trying to disable it. Since IoT devices are significantly resource
constrained, HADES-IoT was created in a lightweight fashion, en-
suring that primary functionality provided by the device is not
affected. Also, as most IoT devices are based on the Linux operating
system [33], HADES-IoT supports various types of IoT devices.
Contributions: In summary, our contributions are as follows:
• We present a novel host-based anomaly detection and pre-
vention approach that is based on whitelisting legitimate
processes on an IoT device.
• We develop a proof-of-concept of our approach and evalu-
ate its effectiveness on several IoT devices, including very
resource-restricted devices.
• We show that HADES-IoT can be easily adapted to any Linux
• We demonstrate that HADES-IoT is resilient against attacks
that focus on disabling its protection mechanisms, and thus
providing tamper-proof feature.
kernel version, which makes it generic.
The rest of this paper is organized as follows. We describe the
problem statement in Section 2. In Section 3 we explain prelimi-
naries of our work. Then in Section 4, we explain details of our
approach; we perform evaluation in Section 6. Section 7 discusses
limitations and possible extensions of the approach. Section 8 is
dedicated to related work and Section 9 concludes the paper.
2 PROBLEM STATEMENT
The main objective of this work is to propose a security solution
that protects the bulk of the existing IoT devices against remote
exploitation of any vulnerabilities (including zero-day ones).
2.1 Assumptions
This work is aimed at Linux-based IoT devices. We argue that ac-
cording to [33], the market share of Linux-based IoT devices is over
80%, and hence in this paper we are targeting the vast majority
of existing IoT devices. Furthermore, we assume that (1) all of the
executables installed on an IoT device are benign, and (2) an at-
tacker does not tamper with the device either before or during the
bootstrapping of our proposed approach. However, we assume that
the default executables of an IoT device may contain a vulnera-
bility enabling execution of arbitrary executable binaries – either
binaries that already exist on a device or binaries delivered by an
attacker who exploits such a vulnerability. Finally, to the best of our
knowledge, it is not common practice for manufacturers to enable
security features, such as SELinux, Auditd, or Access Control Lists
on their IoT devices mainly due to performance reasons. Therefore,
we assume that our approach is the only security solution deployed
on an IoT device.
2.2 Attacker Model
We assume that an IoT device is protected by our approach and is
connected to the Internet (i.e., has a public IP address). Therefore,
an attacker is able to find it using a custom scanner or any publicly
available services such as Shodan.1 The attacker is also capable
to scan an IoT device in order to reveal open ports and identify
running network services. Finally, we consider that an attacker is
capable of exploiting a (potential zero-day) vulnerability on an IoT
device through one of the network services running on the device.
This can be accomplished, for example, by brute-forcing passwords
or using default passwords to services such as Telnet or SSH. How-
ever, according to the creator of Sora and Owari IoT malware [4],
Telnet service is currently abused by attacks brute-forcing pass-
words to such a large extent that there is a growing trend to target
services that are not as heavily exploited. Therefore, the developers
of IoT malware have begun to integrate exploit scanning tool into
their malware and scanners more frequently. Such vulnerability
exploitation provides them with an additional attack vector (beyond
Telnet misuse), and improves their ability to compromise exposed
and vulnerable IoT devices, even when the devices are protected
with strong passwords. For example, VPNFilter takes advantage of
19 vulnerabilities, enabling this malware to compromise about 70
models from 10 different vendors [30].
To accurately reflect real-world attack scenarios, we further
consider that once an attacker “is inside” an IoT device, the attacker
is granted superuser privileges, since it is quite common for an IoT
device to have just a superuser account.
1https://www.shodan.io/
HADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
2.3 Requirements for an IoT Defense Solution
In this section, we specify desirable properties and requirements
for a host-based IoT defense solution resistant against the above-
mentioned attacker models. In particular, a defense solution should
meet the following requirements:
Real-Time Detection: Since we aim to prevent any unknown
action on an IoT device, a defense solution must be capable
of detecting any unknown program upon its execution.
Lightweight Overhead: IoT devices are extremely resource con-
strained, and thus provide only limited processing and stor-
age resources. Therefore, it is not possible to utilize conven-
tional security approaches used in PC environments (e.g., ma-
chine learning or complex heuristics approaches). With this
in mind, a defense solution should be conservative in terms
of resource consumption and should only utilize existing
dependencies.
Tamper-Proof Protection: Since the attacker has superuser priv-
ileges, he may terminate or bypass a defense solution de-
ployed on an IoT device. Therefore, a defense solution should
be resilient against such a powerful attacker.
Wide Coverage: It is important to protect a wide range of IoT
devices (e.g., printers, IP cameras, Wi-Fi routers, etc.), taking
into account the fact that a significant portion of the existing
IoT devices is already considered legacy and moreover may
lack updates from manufacturers.
Independence: The deployment of a defense solution must not
be dependent on a manufacturer; both the user and a manu-
facturer must be capable of deploying the defense solution.
Ease of Bootstrapping: With regard to the deployment of a de-
fense solution mentioned above, we further argue that a