               ->  Nested Loop  (cost=0.00..0.59 rows=1 width=160)  
                     ->  Nested Loop  (cost=0.00..0.56 rows=1 width=152)  
                           ->  Nested Loop  (cost=0.00..0.53 rows=1 width=144)  
                                 ->  Nested Loop  (cost=0.00..0.50 rows=1 width=136)  
                                       ->  Nested Loop  (cost=0.00..0.47 rows=1 width=128)  
                                             ->  Nested Loop  (cost=0.00..0.44 rows=1 width=120)  
                                                   ->  Nested Loop  (cost=0.00..0.41 rows=1 width=112)  
                                                         ->  Nested Loop  (cost=0.00..0.38 rows=1 width=104)  
                                                               ->  Nested Loop  (cost=0.00..0.35 rows=1 width=96)  
                                                                     ->  Nested Loop  (cost=0.00..0.32 rows=1 width=88)  
                                                                           ->  Nested Loop  (cost=0.00..0.29 rows=1 width=80)  
                                                                                 ->  Nested Loop  (cost=0.00..0.26 rows=1 width=72)  
                                                                                       ->  Nested Loop  (cost=0.00..0.23 rows=1 width=64)  
                                                                                             ->  Nested Loop  (cost=0.00..0.20 rows=1 width=56)  
                                                                                                   ->  Nested Loop  (cost=0.00..0.17 rows=1 width=48)  
                                                                                                         ->  Nested Loop  (cost=0.00..0.14 rows=1 width=40)  
                                                                                                               ->  Nested Loop  (cost=0.00..0.11 rows=1 width=32)  
                                                                                                                     ->  Nested Loop  (cost=0.00..0.08 rows=1 width=24)  
                                                                                                                           ->  Nested Loop  (cost=0.00..0.05 rows=1 width=16)  
                                                                                                                                 ->  CTE Scan on a9  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                                 ->  CTE Scan on a13  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                           ->  CTE Scan on a3  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                                     ->  CTE Scan on a23  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                               ->  CTE Scan on a18  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                         ->  CTE Scan on a14  (cost=0.00..0.02 rows=1 width=8)  
                                                                                                   ->  CTE Scan on a6  (cost=0.00..0.02 rows=1 width=8)  
                                                                                             ->  CTE Scan on a5  (cost=0.00..0.02 rows=1 width=8)  
                                                                                       ->  CTE Scan on a11  (cost=0.00..0.02 rows=1 width=8)  
                                                                                 ->  CTE Scan on a15  (cost=0.00..0.02 rows=1 width=8)  
                                                                           ->  CTE Scan on a4  (cost=0.00..0.02 rows=1 width=8)  
                                                                     ->  CTE Scan on a19  (cost=0.00..0.02 rows=1 width=8)  
                                                               ->  CTE Scan on a2  (cost=0.00..0.02 rows=1 width=8)  
                                                         ->  CTE Scan on a8  (cost=0.00..0.02 rows=1 width=8)  
                                                   ->  CTE Scan on a10  (cost=0.00..0.02 rows=1 width=8)  
                                             ->  CTE Scan on a21  (cost=0.00..0.02 rows=1 width=8)  
                                       ->  CTE Scan on a20  (cost=0.00..0.02 rows=1 width=8)  
                                 ->  CTE Scan on a16  (cost=0.00..0.02 rows=1 width=8)  
                           ->  CTE Scan on a1  (cost=0.00..0.02 rows=1 width=8)  
                     ->  CTE Scan on a17  (cost=0.00..0.02 rows=1 width=8)  
               ->  CTE Scan on a7  (cost=0.00..0.02 rows=1 width=8)  
         ->  CTE Scan on a22  (cost=0.00..0.02 rows=1 width=8)  
   ->  CTE Scan on a12  (cost=0.00..0.02 rows=1 width=8)  
(183 rows)  
with           
a0 as (select count(*) from ccc0) ,   
a1 as (select count(*) from ccc1) ,   
a2 as (select count(*) from ccc2) ,  
a3 as (select count(*) from ccc3) ,  
a4 as (select count(*) from ccc4) ,  
a5 as (select count(*) from ccc5) ,  
a6 as (select count(*) from ccc6) ,  
a7 as (select count(*) from ccc7) ,  
a8 as (select count(*) from ccc8) ,  
a9 as (select count(*) from ccc9) ,  
a10 as (select count(*) from ccc10) ,   
a11 as (select count(*) from ccc11) ,   
a12 as (select count(*) from ccc12) ,  
a13 as (select count(*) from ccc13) ,  
a14 as (select count(*) from ccc14) ,  
a15 as (select count(*) from ccc15) ,  
a16 as (select count(*) from ccc16) ,  
a17 as (select count(*) from ccc17) ,  
a18 as (select count(*) from ccc18) ,  
a19 as (select count(*) from ccc19) ,  
a20 as (select count(*) from ccc20) ,   
a21 as (select count(*) from ccc21) ,   
a22 as (select count(*) from ccc22) ,  
a23 as (select count(*) from ccc23)    
select * from a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23;  
-[ RECORD 1 ]---  
count | 40624767  
count | 46873456  
count | 35414828  
count | 42693087  
count | 39586204  
count | 40630959  
count | 43742717  
count | 39059426  
count | 39591163  
count | 43758867  
count | 34373867  
count | 53126827  
count | 43757571  
count | 51033662  
count | 39577526  
count | 41137744  
count | 43748296  
count | 52085114  
count | 34378790  
count | 41676297  
count | 26046083  
count | 43743785  
count | 41675706  
Time: 3328.141 ms (00:03.328)  
```              
## 其他知识                                                
1、优化器自动并行度算法 CBO                  
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                                  
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                                  
2、function, op 识别是否支持parallel                                                
```                                                
postgres=# select proparallel,proname from pg_proc;                                                
 proparallel |                   proname                                                                    
-------------+----------------------------------------------                                                
 s           | boolin                                                
 s           | boolout                                                
 s           | byteain                                                
 s           | byteaout                                                
```                                                
3、subquery mapreduce unlogged table                                                
对于一些情况，如果期望简化优化器对非常非常复杂的SQL并行优化的负担，可以自己将SQL拆成几段，中间结果使用unlogged table保存，类似mapreduce的思想。unlogged table同样支持parallel 计算。                                                
4、vacuum，垃圾回收并行。                                                
5、dblink 异步调用并行                                                
[《PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒》](../201802/20180210_01.md)                                                  
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)                                                  
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例 - 含dblink VS pg 11 parallel hash join VS pg 11 智能分区JOIN》](../201802/20180201_02.md)                                                  
暂时不允许并行的场景(将来PG会继续扩大支持范围)：                                                
1、修改行，锁行，除了create table as , select into, create mview这几个可以使用并行。                                                
2、query 会被中断时，例如cursor , loop in PL/SQL ，因为涉及到中间处理，所以不建议开启并行。                                                 
3、paralle unsafe udf ，这种UDF不会并行                                                
4、嵌套并行(udf (内部query并行))，外部调用这个UDF的SQL不会并行。（主要是防止large parallel workers ）                                                
5、SSI 隔离级别                                                
## 参考                                                
https://www.postgresql.org/docs/11/parallel-plans.html                                                
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                                  
[《PostgreSQL 11 preview - 并行计算 增强 汇总》](../201805/20180519_02.md)                                                  
[《PostgreSQL 10 自定义并行计算聚合函数的原理与实践 - (含array_agg合并多个数组为单个一元数组的例子)》](../201801/20180119_04.md)                                                  
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                                  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")