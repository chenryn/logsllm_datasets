### 3. No Dynamic Symptoms
The weapon is activated with the `-hei` flag of WAP.

### 4. SQLI for WordPress Weapon
WordPress includes a set of functions designed to sanitize and validate different data types, which are utilized in some add-ons. Additionally, it has its own sinks to handle SQL commands (via the `$wpdb` class). To analyze, for example, WordPress plugins for SQL Injection (SQLI) vulnerabilities using WAP, we need a weapon that can recognize these functions. Therefore, we configured the weapon generator with:
1. The sensitive sinks and sanitization functions from `$wpdb`.
2. A PHP sanitization fix template to sanitize user inputs that reach those sinks, resulting in the `san wpsqli` fix.
3. Dynamic symptoms, including validation functions from `$wpdb` and their corresponding static symptoms.

The weapon is activated by the `-wpsqli` flag.

### V. Experimental Evaluation
The objective of the experimental evaluation was to answer the following questions:
1. Can the new version of WAP detect the new vulnerabilities? (Sections V-A and V-B)
2. Does it retain the ability to detect the same vulnerabilities as WAP v2.1? (Section V-A)
3. Is it more accurate and precise in predicting false positives than WAP v2.1? (Section V-A)
4. Can it be equipped with weapons configured with non-native PHP functions and detect vulnerabilities? (Section V-B)

For convenience, in this section, we refer to the new version of the WAP tool as WAPe.

#### A. Real Web Applications
To assess the new version of the tool and to answer the first three questions, we ran WAPe on 54 web application packages written in PHP and compared the results with the prior version of the tool (v2.1).

WAPe analyzed a total of 8,374 files, corresponding to 2,065,914 lines of code across the 54 packages. It detected 413 real vulnerabilities in 17 applications. The largest packages analyzed were Play SMS v1.3.1 and phpBB v3.1.6 Es, with 248,875 and 185,201 lines of code, respectively.

Table V summarizes this analysis, presenting the 17 packages where these vulnerabilities were found and some information about the analysis. These 17 packages contain 4,714 files, corresponding to 1,196,702 lines of code. The total execution time for the analysis was 123 seconds, with an average of 7.2 seconds per application. This average time indicates that the tool performs well, as it searches for 15 vulnerability classes in one execution.

We also ran the same 54 packages with WAP v2.1. The tool flagged the same 17 applications as vulnerable. Table VI presents the detection made by both tools, distributed by the 10 classes of vulnerabilities and the false positives predicted and not predicted.

| Web Application | Version | Files | Lines of Code | Analysis Time (s) | Vuln. Files | Vuln. Found |
|-----------------|---------|-------|---------------|-------------------|-------------|-------------|
| Admin Control Panel Lite 2 | 0.10.2 | 14 | 1,984 | 1 | 9 | 81 |
| Anywhere Board Games | 0.150215 | 3 | 501 | 1 | 1 | 3 |
| Clip Bucket | 2.7.0.4 | 597 | 148,129 | 11 | 16 | 22 |
| Clip Bucket | 2.8 | 606 | 149,830 | 12 | 18 | 26 |
| Community Mobile Channels | 0.2.0 | 372 | 119,890 | 8 | 116 | 47 |
| divine | 0.1.3a | 5 | 706 | 1 | 2 | 9 |
| Ldap address book | 0.22 | 18 | 4,615 | 2 | 4 | 1 |
| Minutes | 0.42 | 19 | 2,670 | 1 | 2 | 10 |
| Mle Moodle | 0.8.8.5 | 235 | 59,723 | 18 | 4 | 7 |
| Php Open Chat | 3.0.2 | 249 | 83,899 | 7 | 9 | 11 |
| Pivotx | 2.3.10 | 254 | 108,893 | 6 | 1 | 6 |
| Play sms | 1.3.1 | 1,420 | 248,875 | 19 | 7 | 13 |
| RCR AEsir | 0.11a | 8 | 396 | 1 | 6 | 48 |
| Refbase | 0.9.6 | 171 | 109,600 | 10 | 18 | 48 |
| SAE | 1.1 | 150 | 47,207 | 7 | 39 | 3 |
| Tomahawk Mail | 2.0 | 155 | 16,742 | 3 | 3 | 77 |
| vfront | 0.99.3 | 438 | 93,042 | 15 | 25 | 413 |

**Table V: Summary of results for the new version of WAP with real web applications.**

| Web Application | Version | SQLI | XSS | Files* | SCD | LDAPI | SF | HI | CS | Total | WAP FP | WAPe FP |
|-----------------|---------|------|-----|--------|-----|-------|----|----|----|-------|--------|---------|
| Admin Control Panel Lite 2 | 0.10.2 | 9 | 4 | 14 | 1 | 1 | 1 | 1 | 1 | 28 | 255 | 11 |
| Anywhere Board Games | 0.150215 | 2 | 2 | 3 | 2 | 2 | 1 | 1 | 1 | 11 | 1 | 2 |
| Clip Bucket | 2.7.0.4 | 14 | 9 | 597 | 2 | 2 | 1 | 1 | 1 | 23 | 2 | 23 |
| Clip Bucket | 2.8 | 14 | 9 | 606 | 2 | 2 | 1 | 1 | 1 | 23 | 2 | 23 |
| Community Mobile Channels | 0.2.0 | 72 | 1 | 372 | 1 | 1 | 1 | 1 | 1 | 78 | 1 | 1 |
| divine | 0.1.3a | 1 | 1 | 5 | 1 | 1 | 1 | 1 | 1 | 6 | 1 | 1 |
| Ldap address book | 0.22 | 10 | 10 | 18 | 1 | 1 | 1 | 1 | 1 | 24 | 1 | 1 |
| Minutes | 0.42 | 27 | 10 | 19 | 1 | 1 | 1 | 1 | 1 | 30 | 1 | 1 |
| Mle Moodle | 0.8.8.5 | 4 | 4 | 235 | 1 | 1 | 1 | 1 | 1 | 12 | 1 | 1 |
| Php Open Chat | 3.0.2 | 4 | 4 | 249 | 1 | 1 | 1 | 1 | 1 | 12 | 1 | 1 |
| Pivotx | 2.3.10 | 6 | 6 | 254 | 1 | 1 | 1 | 1 | 1 | 16 | 1 | 1 |
| Play sms | 1.3.1 | 10 | 10 | 1,420 | 1 | 1 | 1 | 1 | 1 | 24 | 1 | 1 |
| RCR AEsir | 0.11a | 6 | 6 | 8 | 1 | 1 | 1 | 1 | 1 | 16 | 1 | 1 |
| Refbase | 0.9.6 | 9 | 9 | 171 | 1 | 1 | 1 | 1 | 1 | 20 | 1 | 1 |
| SAE | 1.1 | 46 | 25 | 150 | 1 | 1 | 1 | 1 | 1 | 74 | 1 | 1 |
| Tomahawk Mail | 2.0 | 25 | 1 | 155 | 1 | 1 | 1 | 1 | 1 | 29 | 1 | 1 |
| vfront | 0.99.3 | 1 | 1 | 438 | 1 | 1 | 1 | 1 | 1 | 6 | 1 | 1 |

**Table VI: Vulnerabilities found and false positives predicted and reported by the two versions of WAP in web applications.**

*DT & RFI, LFI vulnerabilities

The third to sixth columns show the number of real vulnerabilities that the tools found for the classes that both detect, i.e., the 386 vulnerabilities of classes SQLI, XSS, RFI, LFI, DT, and SCD. This provides a positive answer to the second question: WAPe still discovers the vulnerabilities detected by WAP v2.1.

The next four columns correspond to the new vulnerabilities that WAPe was equipped to detect, and the following column is the total of vulnerabilities detected by WAPe (413 vulnerabilities). WAPe detected 26 zero-day vulnerabilities of the LDAPI, HI, and CS classes, plus one known SF vulnerability. The vulnerabilities found in the Pivotx v2.3.10 and refbase v0.9.6 (for XSS) packages were previously discovered and registered in Packet Storm [18] and CVE-2015-7383.

The Community Mobile Channels v0.2.0 application was the most vulnerable mobile application, with 47 vulnerabilities (mostly SQLI and XSS). This seems to confirm the general impression that the security of mobile applications is not always the best. Also interesting is the fact that the most recent version of Clip Bucket contains 4 more SQLI vulnerabilities and the same 22 vulnerabilities as the previous version.

WAP v2.1 reported more vulnerabilities than WAPe, but they were false positives. The last four columns of the table show the number of false positives predicted (FPP) and not predicted (FP) by WAP (the first two columns) and WAPe (the next two columns). The original tool correctly predicted 62 false positives and incorrectly 60 as not being so. WAPe predicted 104 false positives: the same as WAP plus 42 that WAP classified as not being false positives. This means that the data mining improvements proposed in this paper made the tool more accurate and precise in predicting false positives and detecting real vulnerabilities.

We analyzed the 18 cases reported by WAPe as not being false positives; some of them had function calls that we did not consider as symptoms, such as calls to functions `sizeof` and `md5`, whereas others contained sanitization functions developed by the applicationsâ€™ programmers. For example, the vfont v0.99.3 application contains 6 of these cases, using a function named `escape` to sanitize the user inputs. To demonstrate the extensibility of the tool for such functions, we fed it with that non-native PHP function (`escape`) as being an external sanitization function and belonging to the sanitization list (see Section III-A), and we ran the tool again for that application.