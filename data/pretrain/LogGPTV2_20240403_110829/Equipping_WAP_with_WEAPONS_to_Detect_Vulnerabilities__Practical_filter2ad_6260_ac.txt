(3) no dynamic symptoms. The weapon is activated with the
-hei ﬂag of WAP.
3) SQLI for WordPress weapon: WordPress has a set of
functions that sanitize and validate different data types, which
are used in some add-ons. It has also its own sinks to handle
SQL commands ($wpdb class). If we want to analyze, for
example, WordPress plugins with WAP for SQLI vulnera-
bilities, we need a weapon that recognizes these functions.
Therefore, we conﬁgured the weapon generator with: (1)
the sensitive sinks and sanitization functions from $wpdb;
(2) the PHP sanitization ﬁx template to sanitize the user
inputs that reach those sinks with those sanitization functions,
resulting in the san wpsqli ﬁx; and (3) dynamic symptoms,
with validation functions from $wpdb and their corresponding
static symptoms. The weapon is activated by the ﬂag -wpsqli.
V. EXPERIMENTAL EVALUATION
The objective of the experimental evaluation was to answer
the following questions: (1) Is the new version of WAP able
to detect the new vulnerabilities (Sections V-A and V-B)?; (2)
Does it remain able to detect the same vulnerabilities as WAP
v2.1 (Section V-A)?; (3) Is it more accurate and precise in
predicting false positives than WAP v2.1 (Section V-A)?; (4)
Can it be equipped with weapons conﬁgured with non-native
PHP functions and detect vulnerabilities (Section V-B)? For
convenience, in this section we designate the new version of
the WAP tool by WAPe.
A. Real web applications
To assess the new version of the tool and to answer the
ﬁrst three questions, we run WAPe with 54 web application
packages written in PHP and compare it with the prior version
of the tool (v2.1).
WAPe analyzed a total of 8,374 ﬁles corresponding to
2,065,914 lines of code of the 54 packages. It detected 413
real vulnerabilities from several classes in 17 applications.
The largest packages analyzed were Play sms v1.3.1 and
phpBB v3.1.6 Es with 248,875 and 185,201 lines of code.
Table V summarizes this analysis presenting the 17 packages
where these vulnerabilities were found and some information
about
the analysis. These 17 packages contain 4,714 ﬁles
corresponding to 1,196,702 lines of code. The total execution
time for the analysis was 123 seconds, with an average of 7.2
seconds per application. This average time indicates that the
tool has a good performance as it searches for 15 vulnerability
classes in one execution.
We run the same 54 packages with WAP v2.1. The tool
ﬂagged as vulnerable the same 17 applications. Table VI
presents the detection made by the two tools distributed by the
10 classes of vulnerabilities and the false positives predicted
Web application
Admin Control Panel Lite 2
Anywhere Board Games
Clip Bucket
Clip Bucket
Community Mobile Channels
divine
Ldap address book
Minutes
Mle Moodle
Php Open Chat
Pivotx
Play sms
RCR AEsir
Refbase
SAE
Tomahawk Mail
vfront
0.10.2
0.150215
2.7.0.4
2.8
0.2.0
0.1.3a
0.22
0.42
0.8.8.5
3.0.2
2.3.10
1.3.1
0.11a
0.9.6
1.1
2.0
0.99.3
Total
9
4
14
9
72
1
10
10
27
4
6
10
6
9
46
25
1
28
255
11
2
23
72
1
11
11
2
1
3
3
1
1
1
10
1
1
3
1
1
1
3
1
2
1
16
55
4
2
1
5
10
19
81
3
22
26
47
9
1
10
7
11
1
6
13
48
48
3
77
413
8
2
2
4
2
9
1
7
1
26
62
8
6
6
4
2
9
2
1
11
12
3
40
104
4
4
1
2
4
23
2
20
60
1
11
6
18
Web application
Version
Admin Control Panel Lite 2
Anywhere Board Games
Clip Bucket
Clip Bucket
Community Mobile Channels
divine
Ldap address book
Minutes
Mle Moodle
Php Open Chat
Pivotx
Play sms
RCR AEsir
refbase
SAE
Tomahawk Mail
vfront
0.10.2
0.150215
2.7.0.4
2.8
0.2.0
0.1.3a
0.22
0.42
0.8.8.5
3.0.2
2.3.10
1.3.1
0.11a
0.9.6
1.1
2.0
0.99.3
Total
Files
14
3
597
606
372
5
18
19
235
249
254
1,420
8
171
150
155
438
4,714
Lines of
code
1,984
501
148,129
149,830
119,890
706
4,615
2,670
59,723
83,899
108,893
248,875
396
109,600
47,207
16,742
93,042
1,196,702
Analysis
time (s)
1
1
11
12
8
1
2
1
18
7
6
19
1
10
7
3
15
123
Vuln.
ﬁles
9
1
16
18
116
2
4
2
4
9
1
7
6
18
39
3
25
280
Vuln.
found
81
3
22
26
47
9
1
10
7
11
1
6
13
48
48
3
77
413
TABLE V: Summary of results for the new version of WAP
with real web applications.
Version WAP & WAPe real vuls.
WAP FP WAPe FP
SQLI XSS Files* SCD LDAPI SF HI CS Total FPP FP FPP FP
WAPe real vuls.
*DT & RFI, LFI vulnerabilities
TABLE VI: Vulnerabilities found and false positives predicted
and reported by the two versions of WAP in web applications.
and not predicted. The third to sixth columns show the number
of real vulnerabilities that the tools found for the classes that
both detect, i.e., the 386 vulnerabilities of classes SQLI, XSS,
RFI, LFI, DT and SCD. This provides a positive answer to
the second question: WAPe still discovers the vulnerabilities
detected by WAP v2.1.
The next four columns correspond to the new vulnera-
bilities that WAPe was equipped to detect and the following
column is the total of vulnerabilities detected by WAPe (413
vulnerabilities). WAPe detected 26 zero-day vulnerabilities of
the LDAPI, HI, and CS classes, plus one known SF vulner-
ability. The vulnerabilities found in the Pivotx v2.3.10 and
refbase v0.9.6 (for XSS) packages were previously discovered
and registered in Packet storm [18] and CVE-2015-7383.
The Community Mobile Channels v0.2.0 application was the
most vulnerable mobile application with 47 vulnerabilities
(SQLI and XSS mostly). This seems to conﬁrm the general
impression that
the security of mobile applications is not
always the best. Also interesting is the fact that the most recent
version of Clip Bucket contains more 4 SQLI and the same 22
vulnerabilities than the previous version.
WAP v2.1 reported more vulnerabilities than WAPe, but
they were false positives. The last four columns of the table
show the number of false positives predicted (FPP) and not
predicted (FP) by WAP (the ﬁrst two columns) and WAPe
(the next two columns). The original tool correctly predicted
635
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:52 UTC from IEEE Xplore.  Restrictions apply. 
62 false positives and incorrectly 60 as not being so. WAPe
predicted 104 false positives: the same as WAP plus 42 that
WAP classiﬁed as not being false positives. This means that
the data mining improvements proposed in this paper made the
tool more accurate and precise in prediction of false positives
and detection of real vulnerabilities.
We analyzed the 18 cases reported by WAPe as not being
false positives; some of them had function calls that we did not
consider as symptoms, such as calls to functions sizeof and
md5, whereas others contained sanitization functions devel-
oped by the applications’ programmers. For example, the vfont
v0.99.3 application contains 6 of these cases, using a function
named escape to sanitize the user inputs. To demonstrate the
extensibility of the tool for such functions, we fed it with
that non-native PHP function (escape) as being an external
sanitization function and belonging to the sanitization list (see
Section III-A), and we run the tool again for that application.