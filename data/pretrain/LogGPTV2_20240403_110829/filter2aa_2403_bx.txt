SXTW 指令把 32 位有符号数据扩展为 64 位有符号数据，并将之存储于 X0 寄存器。ADRP/ADD 指令
对则负责数组寻址。ADD 指令中的 LSL 后缀用于进行乘法运算。 
18.7.3 MIPS 
指令清单 18.37  Optimizing GCC 4.4.5 (IDA) 
.globl get_month2 
get_month2: 
; $a0=month 
sll     $v0, $a0, 3 
; $v0 = $a0 
.byte 0, 0 
aFebruary:       .ascii "February" 
.byte    0 
aMarch:          .ascii "March" 
.byte 0, 0, 0, 0 
aApril:          .ascii "April" 
.byte 0, 0, 0, 0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
255 
aMay:            .ascii "May" 
.byte 0, 0, 0, 0, 0, 0 
aJune:           .ascii "June" 
.byte 0, 0, 0, 0, 0 
aJuly:           .ascii "July" 
.byte 0, 0, 0, 0, 0 
aAugust:         .ascii "August" 
.byte 0, 0, 0 
aSeptember:      .ascii "September" 
aOctober:        .ascii "October" 
.byte 0, 0 
aNovember:       .ascii "November" 
.byte    0 
aDecember:       .ascii "December" 
.byte 0, 0, 0, 0, 0, 0, 0, 0, 0 
18.7.4 总结 
字符串存储技术属于经典的数组技术。Oracle RDBMS 的程序中就大量使用了这种技术。虽然当代计
算机程序中可能很少应用这种数组技术了，但是字符串型数据可充分演示数组的各方面特点。 
18.8 本章小结 
在内存中，数组就是依次排列的一组同类型数据。数组元素可以是任意类型的数据，甚至可以是结构
体型的数据。如果要访问数组中的特定元素，首先就要计算其地址。 
18.9 练习题 
18.9.1 题目 1 
请描述下述代码的功能。 
指令清单 18.38  MSVC 2010+/O1 
_a$ = 8          ; size = 4 
_b$ = 12         ; size = 4 
_c$ = 16         ; size = 4 
?s@@YAXPAN00@Z PROC; s, COMDAT 
    mov   
eax, DWORD PTR _b$[esp-4] 
    mov     ecx, DWORD PTR _a$[esp-4] 
    mov     edx, DWORD PTR _c$[esp-4] 
    push    esi 
    push    edi 
    sub     ecx, eax 
    sub     edx, eax 
    mov     edi, 200     ; 000000c8H 
$LL6@s: 
    push    100          ; 00000064H 
    pop     esi 
$LL3@s: 
    fld     QWORD PTR [ecx+eax] 
    fadd    QWORD PTR [eax] 
    fstp    QWORD PTR [edx+eax] 
    add     eax, 8 
    dec     esi 
    jne     SHORT $LL3@s 
    dec     edi 
    jne     SHORT $LL6@s 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
256 
逆向工程权威指南（上册） 
    pop     edi 
    pop     esi 
    ret     0 
?s@@YAXPAN00@Z  ENDP   ; s 
/O1 代表 minimize space，即生成最小长度的程序。 
通过 Keil 5.03 （启用优化选项-O3）编译而得的 ARM 模式代码如下所示。 
指令清单 18.39  Optimizing Keil 6/2013 (ARM mode) 
  PUSH      {r4-r12,lr} 
  MOV       r9,r2 
  MOV       r10,r1 
  MOV       r11,r0 
  MOV       r5,#0 
|L0.20| 
  ADD       r0,r5,r5,LSL #3 
  ADD       r0,r0,r5,LSL #4 
  MOV       r4,#0 
  ADD       r8,r10,r0,LSL #5 
  ADD       r7,r11,r0,LSL #5 
  ADD       r6,r9,r0,LSL #5 
|L0.44| 
  ADD       r0,r8,r4,LSL #3 
  LDM       r0,{r2,r3} 
  ADD       r1,r7,r4,LSL #3 
  LDM       r1,{r0,r1} 
  BL        __aeabi_dadd 
  ADD       r2,r6,r4,LSL #3 
  ADD       r4,r4,#1 
  STM       r2,{r0,r1} 
  CMP       r4,#0x64 
  BLT       |L0.44| 
  ADD  
r5,r5,#1 
  CMP       r5,#0xc8 
  BLT       |L0.20| 
  POP       {r4-r12,pc} 
指令清单 18.40  Optimizing Keil 6/2013 (Thumb mode) 
  PUSH      {r0-r2,r4-r7,lr} 
  MOVS      r4, #0 
  SUB       sp, sp, #8 
|L0.6| 
  MOVS      r1,#0x19 
  MOVS      r0,r4 
  LSLS      r1,r1,#5 
  MULS      r0,r1,r0 
  LDR       r2,[sp,#8] 
  LDR       r1,[sp,#0xc] 
  ADDS      r2,r0,r2 
  STR       r2,[sp,#0] 
  LDR       r2,[sp,#0x10] 
  MOVS      r5,#0 
  ADDS      r7,r0,r2 
  ADDS      r0,r0,r1 
  STR       r0,[sp,#4] 
|L0.32| 
  LSLS      r6,r5,#3 
  ADDS      r0,r0,r6 
  LDM       r0!,{r2,r3} 
  LDR       r0,[sp,#0] 
  ADDS      r1,r0,r6 
  LDM       r1,{r0,r1} 
  BL        __aeabi_dadd 
  ADDS      r2,r7,r6 
  ADDS      r5,r5,#1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
257 
  STM       r2!,{r0,r1} 
  CMP       r5,#0x64 
  BGE       |L0.62| 
  LDR       r0,[sp,#4] 
  B         |L0.32| 
|L0.62| 
  ADDS      r4,r4,#1 
  CMP       r4,#0xc8 
  BLT      |L0.6| 
  ADD      sp,sp,#0x14 
  POP      {r4-r7,pc} 
指令清单 18.41  Non-optimizing GCC 4.9 (ARM64) 
s: 
  sub      sp, sp, #48 
  str      x0, [sp,24] 
  str      x1, [sp,16] 
  str      x2, [sp,8] 
  str      wzr, [sp,44] 
  b        .L2 
.L5: 
  str      wzr, [sp,40] 
  b        .L3  
.L4: 
  ldr      w1, [sp,44] 
  mov      w0, 100 
  mul      w0, w1, w0 
  sxtw     x1, w0 
  ldrsw    x0, [sp,40] 
  add      x0, x1, x0 
  lsl      x0, x0, 3 
  ldr      x1, [sp,8] 
  add      x0, x1, x0 
  ldr      w2, [sp,44] 
  mov      w1, 100 
  mul      w1, w2, w1 
  sxtw     x2, w1 
  ldrsw    x1, [sp,40] 
  add      x1, x2, x1 
  lsl      x1, x1, 3 
  ldr      x2, [sp,24] 
  add      x1, x2, x1 
  ldr      x2, [x1] 
  ldr      w3, [sp,44] 
  mov      w1, 100 
  mul      w1, w3, w1 
  sxtw     x3, w1 
  ldrsw    x1, [sp,40] 
  add      x1, x3, x1 
  lsl      x1, x1, 3 
  ldr      x3, [sp,16] 
  add      x1, x3, x1 
  ldr      x1, [x1] 
  fmov     d0, x2 
  fmov     d1, x1 
  fadd     d0, d0, d1 
  fmov     x1, d0 
  str      x1, [x0] 
  ldr      w0, [sp,40] 
  add      w0, w0, 1 
  str      w0, [sp,40]  
.L3: 
  ldr      w0, [sp, 40] 
  cmp      w0, 99 
  ble      .L4 
  ldr      w0, [sp,44] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
258 
逆向工程权威指南（上册） 
  add      w0, w0, 1 
  str      w0, [sp,44] 
.L2: 
  ldr      w0, [sp,44] 
  cmp      w0, 199 
  ble      .L5 
  add      sp, sp, 48 
  ret 
指令清单 18.42  Optimizing GCC 4.4.5 (MIPS) (IDA) 
sub_0: 
  li       $t3, 0x27100 
  move     $t2, $zero 
  li       $t1, 0x64  # 'd' 
loc_10:  
# CODE XREF: sub_0+54 
  addu     $t0, $a1, $t2 
  addu     $a3, $a2, $t2 
  move     $v1, $a0 
  move     $v0, $zero 
loc_20:  
# CODE XREF: sub_0+48 
  lwc1     $f2, 4($v1) 
  lwc1     $f0, 4($t0) 
  lwc1     $f3, 0($v1) 
  lwc1     $f1, 0($t0) 
  addiu    $v0, 1 
  add.d    $f0, $f2, $f0 
  addiu    $v1, 8 
  swc1     $f0, 4($a3) 
  swc1     $f1, 0($a3) 
  addiu    $t0, 8 
  bne      $v0, $t1, loc_20 
  addiu    $a3, 8 
  addiu    $t2, 0x320 
  bne      $t2, $t3, loc_10 
  addiu    $a0, 0x320 
  jr       $ra 
  or       $at, $zero 
18.9.2 题目 2 
请描述下述程序的功能。 
通过 MSVC 2010 （启用 /O1 选项）编译而得的代码如下所示。 
指令清单 18.43  MSVC 2010 + /O1 
tv315 = -8           
; size = 4 
tv291 = -4              ; size = 4 
_a$ = 8             
; size = 4 
_b$ = 12             
; size = 4 
_c$ = 16             
; size = 4 
?m@@YAXPAN00@Z PROC; m, COMDAT 
    push  ebp 
    mov     ebp, esp 
    push    ecx 
    push    ecx 
    mov     edx, DWORD PTR _a$[ebp] 
    push    ebx 
    mov     ebx, DWORD PTR _c$[ebp] 
    push    esi 
    mov     esi, DWORD PTR _b$[ebp] 
    sub     edx, esi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
259 
    push    edi 
    sub     esi, ebx 
    mov     DWORD PTR tv315[ebp], 100  ; 00000064H 
$LL9@m: 
    mov     eax, ebx 
    mov     DWORD PTR tv291[ebp], 300  ; 0000012cH 
$LL6@m: 
    fldz 
    lea     ecx, DWORD PTR [esi+eax] 
    fstp    QWORD PTR [eax] 
    mov     edi, 200                     ; 000000c8H 
$LL3@m: 
    dec     edi 
    fld     QWORD PTR [ecx+edx] 
    fmul    QWORD PTR [ecx] 
    fadd    QWORD PTR [eax] 
    fstp    QWORD PTR [eax] 
    jne     HORT $LL3@m 
    add     eax, 8 
    dec     DWORD PTR tv291[ebp] 
    jne     SHORT $LL6@m 
    add     ebx, 800                     ; 00000320H 
    dec     DWORD PTR tv315[ebp] 
    jne     SHORT $LL9@m 
    pop     edi 
    pop     esi 
    pop     ebx 
    leave 
    ret     0 
?m@@YAXPAN00@Z ENDP                    ; m 
指令清单 18.44  Optimizing Keil 6/2013 (ARM mode) 
  PUSH      {r0-r2,r4-r11,lr} 
  SUB       sp,sp,#8 
  MOV       r5,#0 
|L0.12| 
  LDR       r1,[sp,#0xc] 
  ADD       r0,r5,r5,LSL #3 
  ADD       r0,r0,r5,LSL #4 