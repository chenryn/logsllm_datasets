    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   要查询命令 [*command*]{.emphasis} 是否在允许列表中，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
    如果为真，该命令将打印 `yes`{.literal}，且退出状态为
    `0`{.literal}。否则，将打印 `no`{.literal} ，且退出状态为
    `1`{.literal}。
-   要列出允许列表中的所有安全上下文，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-contexts
    ```
-   要在允许列表中添加上下文 [*context*]{.emphasis}，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-context=context
    ```
-   要从允许列表中删除上下文 [*context*]{.emphasis}，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-context=context
    ```
-   要查询上下文 [*context*]{.emphasis} 是否在允许列表中，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-context=context
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户 ID，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-uids
    ```
-   要在允许列表中添加用户 ID [*uid*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-uid=uid
    ```
-   要从允许列表中删除用户 ID [*uid*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-uid=uid
    ```
-   要查询用户 ID [*uid*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-uid=uid
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户名，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-users
    ```
-   要在允许列表中添加用户名 [*user*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-user=user
    ```
-   要从允许列表中删除用户名 [*user*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-user=user
    ```
-   要查询用户名 [*user*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-user=user
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-lockdown-allow-list-options-with-configuration-files_configuring-firewall-lockdown}使用配置文件配置锁定的 allowlist 选项 {.title}
:::
默认的允许列表配置文件包含 `NetworkManager`{.literal} 上下文和
`libvirt`{.literal} 的默认上下文。用户 ID 0 也位于列表中。
\+ allowlist 配置文件存储在 `/etc/firewalld/`{.literal} 目录中。
``` screen
```
以下是一个允许列表配置文件示例，为 `firewall-cmd`{.literal}
工具启用所有命令，对于名为 [*user*]{.emphasis} 的用户，其用户 ID 为
`815`{.literal} ：
``` screen
```
此示例显示了`user id`{.literal} 和
`user name`{.literal}，但只需要其中一个选项。Python
是程序解释器，它位于命令行的前面。您还可以使用特定的命令，例如：
``` literallayout
/usr/bin/python3 /bin/firewall-cmd --lockdown-on
```
在该示例中，只允许 `--lockdown-on`{.literal} 命令。
在 Red Hat Enterprise Linux 中，所有实用程序都放置在
`/usr/bin/`{.literal} 目录中，`/bin/`{.literal} 目录则被符号链接到
`/usr/bin/`{.literal} 目录中。换句话说，尽管以 `root`{.literal}
身份输入的 `firewall-cmd`{.literal} 的路径可能会被解析为
`/bin/firewall-cmd`{.literal}，但现在 `/usr/bin/firewall-cmd`{.literal}
可以使用。所有新脚本都应该使用新位置。但请注意，如果以 `root`{.literal}
身份运行的脚本被写为使用 `/bin/firewall-cmd`{.literal}
路径，那么除了通常只用于非`root`{.literal} 用户的
`/usr/bin/firewall-cmd`{.literal}
路径外，还必须在允许列表中添加该命令的路径。
命令的 name 属性末尾的 `*`{.literal}
表示所有以这个字符串开头的命令都匹配。如果没有
`*`{.literal}，则包括参数的绝对命令必须匹配。
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#assembly_enabling-traffic-forwarding-between-different-interfaces-or-sources-within-a-firewalld-zone_using-and-configuring-firewalld}启用 firewalld 区域中不同接口或源之间的流量转发 {.title}
:::
区内转发是 `firewalld`{.literal} 的一种功能，它允许
`firewalld`{.literal} 区域内接口或源之间的流量转发。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#con_the-difference-between-intra-zone-forwarding-and-zones-with-the-default-target-set-to-accept_assembly_enabling-traffic-forwarding-between-different-interfaces-or-sources-within-a-firewalld-zone}区域内部转发与默认目标设置为 ACCEPT 的区域之间的区别 {.title}
:::
启用区内部转发时，单个 `firewalld`{.literal}
区域中的流量可以从一个接口或源流到另一个接口或源。区域指定接口和源的信任级别。如果信任级别相同，则接口或源之间的通信是可能的。
请注意，如果您在 `firewalld`{.literal}
的默认区域中启用了区域内部转发，则它只适用于添加到当前默认区域的接口和源。
`firewalld`{.literal} 的 `trusted`{.literal} 区域使用设为
`ACCEPT`{.literal}
的默认目标。这个区域接受所有转发的流量，但不支持区域内转发。
对于其他默认目标值，默认情况下会丢弃转发的流量，这适用于除可信区域之外的所有标准的区域。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#proc_using-intra-zone-forwarding-to-forward-traffic-between-an-ethernet-and-wi-fi-network_assembly_enabling-traffic-forwarding-between-different-interfaces-or-sources-within-a-firewalld-zone}使用区域内部转发来在以太网和 Wi-Fi 网络间转发流量 {.title}
:::
您可以使用区域内部转发来转发同一 `firewalld`{.literal}
区域内接口和源之间转发流量。例如，使用此功能来转发连接到
`enp1s0`{.literal} 以太网和连接到 `wlp0s20`{.literal} Wi-Fi
网络之间的流量。
::: orderedlist
**步骤**
1.  在内核中启用数据包转发：
    ``` literallayout
    # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
    # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
    ```
2.  确保要在其之间启用区域内部转发的接口没有被分配给与
    `internal`{.literal} 区域不同的区域：
    ``` literallayout
    # firewall-cmd --get-active-zones
    ```
3.  如果接口当前分配给了 `internal`{.literal}
    以外的区域，请对其重新分配：
    ``` literallayout
    # firewall-cmd --zone=internal --change-interface=interface_name --permanent
    ```
4.  将 `enp1s0`{.literal} 和 `wlp0s20`{.literal} 接口添加到
    `internal`{.literal} 区域：
    ``` literallayout
    # firewall-cmd --zone=internal --add-interface=enp1s0 --add-interface=wlp0s20
    ```
5.  启用区域内部转发：
    ``` literallayout
    # firewall-cmd --zone=internal --add-forward
    ```
:::
::: title
**验证**
:::
以下验证步骤要求 `nmap-ncat`{.literal} 软件包在两个主机上都已安装。
::: orderedlist
1.  登录到与您启用了区域转发的主机的 `enp1s0`{.literal}
    接口位于同一网络的主机。
2.  使用 `ncat`{.literal} 启动 echo 服务来测试连接：
    ``` literallayout
    # ncat -e /usr/bin/cat -l 12345
    ```
3.  登录到与 `wlp0s20`{.literal} 接口位于同一网络的主机。
4.  连接到运行在与 `enp1s0`{.literal} 在同一网络的主机上的 echo 服务器：
    ``` literallayout
    # ncat  12345
    ```
5.  输入一些内容，并按 [Enter]{.guibutton}，然后验证文本是否发送回来。
:::
::: itemizedlist
**其他资源**
-   `firewalld.zones(5)`{.literal} 手册页
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#assembly_using-rhel-system-roles-with-ansible-to-configure-firewalld-settings_using-and-configuring-firewalld}在 Ansible 中使用 RHEL 系统角色配置 firewalld 设置 {.title}
:::
您可以使用 Ansible 防火墙系统角色一次性在多个客户端上配置
`firewalld`{.literal} 服务的设置。这个解决方案：
::: itemizedlist
-   提供具有有效输入设置的接口。
-   保留所有预期的 `firewalld`{.literal} 参数。
:::
在控制节点上运行 `防火墙`{.literal} 角色后，系统角色会立即将
`firewalld`{.literal} 参数应用到受管节点，并使其在重启后持久保留。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
请注意，通过 RHEL 频道提供的 RHEL 系统角色可在默认
[**AppStream**]{.strong} 软件仓库中作为 RPM 软件包提供给 RHEL 客户。RHEL
系统角色还可以通过 Ansible Automation Hub 为客户提供 Ansible
订阅的集合。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#con_introduction-to-the-firewall-rhel-system-role_assembly_using-rhel-system-roles-with-ansible-to-configure-firewalld-settings}防火墙 RHEL 系统角色简介 {.title}
:::
RHEL 系统角色是 Ansible 自动化实用程序的一组内容。此内容与 Ansible
自动化实用程序相结合，提供了一致的配置界面，用于远程管理多个系统。
RHEL 系统角色中的 `rhel-system-roles.firewall`{.literal} 角色是为
`firewalld`{.literal}
服务的自动配置而引入的。`rhel-system-roles`{.literal}
软件包包含这个系统角色以及参考文档。
要以自动化的方式在一个或多个系统上应用 `firewalld`{.literal} 参数，请在
playbook 中使用 `防火墙`{.literal} 系统角色变量。playbook
是一个或多个以基于文本的 YAML 格式编写的 play 的列表。
您可以使用清单文件来定义您希望 Ansible 配置的一组系统。
使用 `firewall`{.literal} 角色，您可以配置许多不同的
`firewalld`{.literal} 参数，例如：
::: itemizedlist
-   区域.
-   应允许哪些数据包的服务。
-   授予、拒绝或丢弃对端口的流量访问。
-   为区转发端口或端口范围。
:::
::: itemizedlist
**其他资源**
-   `README.md`{.literal} 和 `README.html`{.literal} 文件位于
    `/usr/share/doc/rhel-system-roles/firewall/`{.literal} 目录中
-   [使用
    playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [如何构建清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#proc_forwarding-incoming-traffic-from-one-local-port-to-a-different-local-port_assembly_using-rhel-system-roles-with-ansible-to-configure-firewalld-settings}将传入的流量从一个本地端口转发到不同的本地端口 {.title}
:::
使用 `rhel-system-roles.firewall`{.literal} 角色，您可以远程配置
`firewalld`{.literal} 参数，同时对多个受管主机产生持久性。
::: itemizedlist
**先决条件**