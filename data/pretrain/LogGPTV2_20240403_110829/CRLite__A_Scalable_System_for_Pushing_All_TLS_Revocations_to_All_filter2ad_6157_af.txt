0.1
Date
% Change Between Filters
Fig. 5: Sizes of ﬁlter cascades and delta updates based
on all valid certiﬁcates and revocations collected between
November 17, 2016 and January 30, 2017.
Fig. 6: Delta update sizes as a function of percentage change
in the certiﬁcate universe (i.e., the sum of changes in R and
S), and line of best-ﬁt.
processing, CRL crawling, and ﬁlter creation take less than 4
hours to perform. Making ∼12M requests to OCSP responders
takes ∼11 hours. Since performing HTTP requests requires
no special infrastructure and our data processing hardware is
relatively modest, the barrier of entry to deploying a CRLite
aggregator is quite low.
We use the Murmerhash3 function in our implementation
because it is designed for speed. We evaluated other hash
functions (e.g., the DOM Webcrypto SHA functions) but none
were faster in practice.
immediately, so in the following sections, we evaluate the
security and the performance of CRLite as described thus far.
VII. EVALUATION
In this section, we evaluate our CRLite prototype. First, we
parameterize our ﬁlter cascade by choosing the revoked and
non-revoked certiﬁcate capacity, as well as the false positive
rates. Second, we investigate the size of ﬁlters and delta
updates for CRLite using empirical and simulated data. Third,
we benchmark our client-side implementation of CRLite for
Firefox. Fourth, we use data-driven simulations to compare
the overhead of CRL, OSCP, and CRLite. Finally, we compare
CRLite to CRLSet and OneCRL.
A. Bloom Filter Parameters
We begin by selecting the parameters for CRLite’s ﬁlter cas-
cade. For this analysis, we leverage data on all valid certiﬁcates
and all revocations that we gathered between November 17,
2016 and January 30, 2017.
To maintain stable parameters for the ﬁlter cascade and
minimize disruption for CRLite clients, we choose |R| and
|S| at the beginning of each month based on (1) the number
of revoked and non-revoked certiﬁcates at that time, and (2)
the rate of change in the certiﬁcate universe. For example,
on January 1, 2017 there were 12M revoked and 30M non-
revoked certiﬁcates. To leave additional room for both sets to
grow, we set r = |R| = 13M and s = |S| = 35M. Assuming
that the sets of certiﬁcates do not outgrow r and s during
January, CRLite clients will only need to download delta
updates; otherwise the ﬁlter cascade must be reparameterized,
and clients will need to download a new complete ﬁlter.
After choosing the capacities, we must calculate the optimal
false positive rates p1 and p. Given r and s, we empirically
p/s, as given in § III-C)
locate the value of p (and p1 = r
that minimize the size of the ﬁlter cascade. For example, when
r = 13M and s = 35M, p1 = 0.2652 and p = 0.5099.
√
Figure 5 shows the sizes of all the daily ﬁlters we generate
between November 17, 2016 and January 30, 2017. During
this time interval, the number of revoked certiﬁcates remains
very stable ∼12M, while the number of valid non-revoked
certiﬁcates grows from 24M to 32M. Thus, in keeping with the
strategy outlined above, we reparameterize the ﬁlter cascade
To demonstrate that CRLite is feasible on the client side,
we have implemented a proof-of-concept Firefox extension.
After installation, the extension downloads the latest daily
ﬁlter, and keeps it up-to-date by downloading and applying
delta updates each day. Furthermore, the extension inspects
each leaf and intermediate certiﬁcate presented to the browser,
and kills the corresponding TLS connection if the certiﬁcate
hits the ﬁlter cascade. Our prototype does not attempt to alter
Firefox’s default OCSP checking behavior, although this could
be achieved through deeper integration with the browser.
As a performance optimization, our Firefox extension in-
cludes a Least Recently Used (LRU) cache of recent lookups
in the ﬁlter cascade. In practice, users tend to visit popular
websites repeatedly, thus subsequent visits to these sites only
require an LRU lookup, as opposed to a (relatively slower)
ﬁlter cascade lookup. The LRU is cleared each time the ﬁlter
cascade is updated.
We chose to implement our prototype for Firefox because
it offers low-level APIs for inspecting TLS certiﬁcate chains.
Unfortunately, these APIs are deprecated [57]: Chrome, Edge,
and Firefox are adopting the WebExtensions API, which does
not have TLS APIs. In the future, we envision that CRLite
should be integrated directly into browsers and cryptographic
libraries, similar to how CRLSet and OneCRL are integrated
into Chrome and Firefox. Fortunately, this integration can
occur incrementally, i.e., there is no requirement that all clients
adopt CRLite for the system to function or provide beneﬁts.
Our implementation demonstrates that it is feasible to de-
ploy CRLite in today’s web without requiring buy-in from CAs
or websites. In § VIII, we describe a slightly altered design that
shows that CA participation could remove the necessity for
audits. However, our primary focus is on what can be achieved
550
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
on November 17 (r = 13M, s = 30M), December 1 (r = 13M,
s = 35M), and January 1 (r = 13M, s = 35M). Despite the
growth in overall certiﬁcates, the sizes of the daily ﬁlters
remains very stable, varying between 9 MB and 10 MB.
B. Delta Updates
Next, we examine the size of delta updates to the CRLite ﬁl-
ter. Recall that the CRLite server produces a new ﬁlter cascade
each day, and then computes a delta update between the new
ﬁlter and the previous day’s ﬁlter. This delta update contains
a compressed bitwise diff between each corresponding level
of the ﬁlter cascade.
Figure 5 shows the sizes of all the delta updates we generate
between November 17, 2016 and January 30, 2017. Their
sizes vary between 176 KB and 1 MB, with an average size of
580 KB. These daily updates are quite modest, and are even
feasible for mobile users with restrictive data caps (e.g., 2 GB
of bandwidth per month). In § VII-D, we compare the sizes of
delta updates to the cost of performing traditional revocation
checks using CRL and OCSP.
Figure 6 further examines the sizes of delta updates as a
function of percentage change in the certiﬁcate universe day-
to-day. The points show the relationship based on our mea-
sured data. However, since we do not observe days with large
changes in the universe (e.g., due to an event like Heartbleed),
we show a line of best-ﬁt based on linear regression.
As expected, Figure 6 shows that delta update sizes grow as
the change rate increases. Under normal circumstances, delta
updates are an order of magnitude smaller than a full ﬁlter. In
the worst case scenario, when the certiﬁcate universe changes
by 0.1% in 24 hours, delta updates can grow up to 10 MB.
In this case, clients are better served by simply downloading
a fresh ﬁlter. However, events of this size are extremely rare:
for example, CloudFlare revoked 19,384 certiﬁcates in one day
immediately after HeartBleed [76].
C. Microbenchmarks
We now analyze the overhead of our Firefox implementa-
tion of CRLite. Using Firefox’s built-in proﬁler, we observe
that CRLite uses 11.9 MB of memory for the ﬁlter cascade
parameters given above. Most of the memory usage comes
from the JavaScript ArrayBuffer objects containing the binary-
encoded ﬁlters, which demonstrates that CRLite’s memory
requirements almost perfectly mirror the size of the ﬁlter.
We also measured the CPU overhead of our CRLite exten-
sion. As we describe in the next section, we can simulate a
normal user’s browsing behavior by browsing websites from
the Alexa Top-1M using a Zipf distribution. After visiting
1K sites we observed that, on average, it took CRLite 10
milliseconds to verify a chain of certiﬁcates. Note that this
includes the time to parse the ASN.1 certiﬁcates (since
Firefox’s API only provides unparsed certiﬁcates) and check
them against the ﬁlters. However, a simple 300-element LRU
cache in the extension reduces the average lookup time to 6
milliseconds. In practice, if CRLite was integrated directly into
the browser both overheads would be signiﬁcantly lower, since
the certiﬁcate would already be parsed, and the code would
be native (i.e., not JavaScript). However, even as an extension,
the delay induced by CRLite is low in absolute terms, and two
orders of magnitude lower than traditional CRL and OCSP
checks (which we examine in the next section).
D. Comparison with CRLs and OCSP
In this section, we compare CRLite with CRLs and OCSP.
We ask the questions: how much delay would a typical
user experience per day while browsing the web under each
revocation checking strategy? and how many bytes would a
typical user download per day while browsing under each
strategy? We assume that users are using an ideal browser
that performs revocation checks on all observed certiﬁcates.
Experimental Setup.
To answer these questions, we con-
duct data-driven simulations that mimic a typical user’s brows-
ing behavior. We adopt the browsing model from Burklen et
al. [9], which gives empirically-validated statistical distribu-
tions and associated parameters that describe users’ brows-
ing behavior. Speciﬁcally, our simulated users visit domains
from the Alexa Top-1M based on a Zipf distribution, view
pages following a Pareto distribution (exponent = 1.3, range
= 10–310 seconds), and leave domains following a Pareto
distribution (exponent = 3.0). When a simulated user visits a
domain that uses HTTPS, their browser checks all certiﬁcates
for revocations using one of the following three strategies:
• OCSP and CRL: This browser checks for revocations
using OCSP or CRL, but prioritizes OCSP if it is avail-
able. This strategy approximates how modern browsers
actually behave [49].
• CRL Only: This browser only checks for revocations
using CRL. The rationale behind this strategy is that
it (a) prioritizes privacy over network performance by
eschewing OCSP, and (b) potentially ends up avoiding
future CRL requests, as CRLs contain information for a
large number of certiﬁcates.
• CRLite: This browser uses CRLite. We assume the
browser already has the ﬁlter downloaded, and only pays
the cost of delta updates each day.
the simulator
When our simulated user visits a domain,
actually contacts that domain, performs a TLS handshake, and
validates the certiﬁcates. In the case of CRLs and OCSP, the
simulator contacts the relevant CAs and records the time to
complete the requests, as well as the size of the CRL/OCSP
responses. Additionally, the simulator caches CRLs and OCSP
responses for their validity period, and uses cached informa-
tion to fulﬁll future requests whenever possible. In the case
of CRLite, the simulated user either incurs a 10 millisecond
delay to check the chain in the ﬁlter cascade, or a 6 millisecond
delay if the certiﬁcate is in the LRU cache (see § VII-C).
To make our simulator tractable, it assumes a simpliﬁed
model of the web where pages do not embed HTTPS content
from third parties. Thus, our results should be viewed as a
conservative lower bound on the amount of trafﬁc and delay
that users will incur as they browse.
551
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
e
l
i
t
n
e
c
r
e
P
h
t
5
9
d
n
a
)
s
d
n
o
c
e
s
(
y
a
e
D
l
l
t
a
o
T
h
t
5
 100
 10
 1
 0.1
 0.01
CRL Only
OCSP and CRL
CRLite
 0
 100  200  300  400  500  600  700  800  900  1000
Contacted Domains
e
l
i
t
n
e
c
r
e
P
h
t
5
9
d
n
a
)
B
M
t
(
a
a
D
d
e
d
a
o
n
w
o
D
l
h
t
5
 100
 10
 1
 0.1
 0.01
 0.001
 0.0001
CRL Only
OCSP and CRL
CRLite Delta Update
 0
 100  200  300  400  500  600  700  800  900  1000
Contacted Domains
Fig. 7: 5th and 95th percentile cumulative delay experienced
by clients using different revocation checking strategies.