time, called an epoch. We pick an epoch according to the granular-
ity of the statistics we wish to collect—for our example ACN, Tor,
we have chosen one hour as the epoch.
We introduce two PrivEx scheme variants that provide secure
and private aggregate statistics of events collected by the DCs. They
differ in the cryptographic primitives used to protect the data while
it is in storage and in the protection that they offer against malicious
actors.
The ﬁrst scheme, based on secret sharing (PrivEx-S2), is secure
in the honest-but-curious setting but can be disrupted by a misbe-
having actor.
The second scheme, based on distributed decryption (PrivEx-
D2), is secure in the covert adversary setting in that misbehaving
servers can be identiﬁed. Most importantly, however, in both sche-
mes, the disruption of the protocol by malicious parties does not
result in information leakage.
4.1 PrivEx based on Secret Sharing
There are three types of participants in PrivEx-S2: Data Collec-
tors (DCs), Tally Key Servers (TKSs), and a Tally Server (TS). The
DCs relay trafﬁc between the ACN and the destination; they col-
lect the statistics we are interested in. TKSs are third parties who
combine and store the secret shares received from DCs and relay
aggregates of those secret shares to the TS. The TS simply adds up
the secret shares provided by the DCs and the TKSs to produce the
aggregated results. Figure 2 depicts an overview of our scheme.
Setup. At the beginning of every epoch, each pair of DC (i) and
TKS (j) share a secret key (Kij). This key can be the result of
an ephemeral Difﬁe-Hellman exchange, or more simply, each DC
i can seed each TKS j with a shared key through a secure channel
(e.g., TLS 1.2 using a ciphersuite that provides forward secrecy).
Each DC maintains a number of secure counters, each crypto-
graphically storing the count of accesses to a speciﬁc destination
(wID). The DC cryptographically initializes a database of records,
each representing a secure counter, with the following schema:
TallyServerDataCollectorDataCollectorTally KeyServerDC 1TKS jTKS 2TKS 1DC iDC 2Tally KeyServerDC 1DC 2DC iTKS 1TKS 2TKS j[wID, CwID] where
(cid:32)
CwID =
nwID −(cid:88)
j
(cid:33)
PRF(Kij; wID)
mod p
Here, nwID is the noise for this counter (see §4.4), PRF is a keyed
pseudorandom function, and p is a smallish prime (such as p =
231 − 1). After this step, the DCs securely delete their shared keys
Kij and the noise nwID.
Each TKS (j) also uses Kij to compute its contribution to the
count for each wID as:
(cid:32)(cid:88)
i
(cid:33)
SwID =
PRF(Ki,j; wID)
mod p
Figure 3: PrivEx, distributed decryption variant
and then securely deletes its copy of the Kij. Alternatively, in order
to mitigate failing DCs, the TKSs can store the keys until the tally
phase but this opens up the TKSs to compulsion attacks to reveal
the keys, and hence the individual DC statistics.
Counting. Upon a DNS lookup event, the DC simply adds 1 to
the appropriate secure counter as follows: [wID, C(cid:48)
wID = (CwID +
1) mod p]. We choose p large enough to expect no overﬂow of
counting events—we can only reliably aggregate up to p events per
counter.
Aggregation. At the end of every epoch, all the DCs and all the
TKSs send their databases of secure counters to the TS.
The TS simply adds up all the shares received from the DCs and
TKSs and publishes the results, which are the aggregated destina-
tion visit totals from all the DCs plus the total of the noise added
by each DC at the setup stage in each counter. Once the results are
published for the current epoch the tally server deletes the received
data and awaits the next epoch’s data to tally.
After sending their data for the epoch to the tally server, all
the DCs and TKSs securely delete their databases and reinitialize
through the setup phase, starting the cycle again.
4.2 PrivEx based on Distributed Decryption
We now describe PrivEx-D2, depicted in Figure 3. PrivEx-D2
utilizes the Benaloh encryption scheme [5]—a distributed addi-
tive homomorphic encryption scheme. This scheme is a variant
on ElGamal: a (private,public) key pair is (a, A = ga) and an
encryption of a message m ∈ Zq with randomness r ∈ Zq is
EA(r; m) = (gr, Ar·hm), where g and h are generators of a cryp-
tographic group G of order q. Note the additive homomorphism:
EA(r1; m1) · EA(r2; m2) = EA(r1 + r2; m1 + m2), where the
multiplication is componentwise. Decryption is Da(C1, C2) =
1 ). Note that decryption requires the taking of a dis-
DLh(C2/C a
crete log, but if the message space M is small (as is the case for
counts of website visits, or in Benaloh’s original application, counts
of votes), this can be done with the kangaroo [28] or baby-step-
giant-step [30] methods in time O((cid:112)|M|), or even faster if more
space is consumed by a pre-computation table.
Note that PrivEx-D2 uses a public bulletin board (PBB) instead
of a Tally Server; the PBB is used as a repository of results and
public keys from the DCs and TKSs. We can instantiate it with
a database server which maintains tables for the TKS public keys
and intermediate decryption results, and the ﬁnal statistics of the
epoch. To mitigate misbehaviour by an untrusted PBB, the mes-
sages stored thereon should be digitally signed by their authors us-
ing long-term authentication keys.
Setup. At the beginning of every epoch, each TKS (j) picks a
random (ephemeral) private key aj ∈ Zq and computes its pub-
lic key Aj = gaj . They publish the public keys to the PBB,
taking the product of all the published keys: A = (cid:81)
along with a non-interactive zero-knowledge proof of knowledge
(using the Fiat-Shamir heuristic) of the private key aj. Each DC
then checks each proof, and calculates the compound key A by
j Aj. Now
each DC, for each secure counter for website w in its table, com-
putes the amount of noise nw to be added (see §4.4), and stores
EA(rw; nw) = (grw , Arw · hnw ). Note that the randomness rw
will be freshly chosen for each counter, and discarded immediately
after encryption, along with the plaintext nw.
Counting. When the DC observes a visit to a website under ob-
servation, it multiplies (component wise) the appropriate encrypted
counter by EA(r; 1) = (gr, Ar · h) where r is random.3 After
cw visits, the secure counter will hold (gr, Ar · hcw +nw ) for some
r. It can optionally also re-randomize the all the other counters to
ensure that two subsequent snapshots of the database do not reveal
which counter has been incremented.
Aggregation. At the end of the epoch, each DC (i) publishes to
the PBB a commitment to its encrypted counters for each website
(w) under observation: C(cid:0)(cid:104)(gr
i,w, Ari,w · hci,w +ni,w )(cid:105)w
(cid:1), where
w , TKS j’s share of the decryption, as α(j)
dates the openings by computing αw =(cid:81)
C is an appropriate commitment function. After all DCs have
posted their commitments to the PBB, each posts the opening of
its commitment (the list of encrypted counters (cid:104)(αi,w, βi,w)(cid:105)w =
(cid:104)(gr
i,w, Ari,w · hci,w +ni,w )(cid:105)w). Each TKS j then checks that the
DCs’ openings are consistent with their commitments, and consoli-
i αi,w. It then computes
α(j)
w = (αw)aj , and posts
that back to the PBB, along with a non-interactive zero-knowledge
proof of equality of discrete logarithms to (g, Aj) to show that
the computation was correct. Everyone can then check the proofs
, where
i ni,w. From here, cw + nw can
be computed using one of the discrete logarithm algorithms men-
tioned above. A proof of security for PrivEx-D2 can be found in
the extended version of this paper [12, Appendix A].
and compute the value hcw +nw =(cid:0)(cid:81)
cw = (cid:80)
i ci,w and nw = (cid:80)
(cid:16)(cid:81)
(cid:1) /
j α(j)
i βi,w
(cid:17)
w
4.2.1 Filtering Statistics by Client Origin
So far, we have assumed there is a single list of censored web-
sites whose visits we are interested in counting. However, different
websites are censored in different countries, and we may wish to
count a visit to, say, Wikipedia if the user is in China, but not in
3For a slight efﬁciency gain, r can be 0, so that the multiplica-
tion is by (1, h). The downside is that this can leak information to
an attacker that can observe the internal state of a DC at two dif-
ferent times within one epoch, yet cannot observe that DC’s DNS
lookups.
TKS 1TKS jTKS 2TKS 1TKS 2TKS jDataCollectorDataCollectorDC 1DC iDC 2DC 1DC 2DC iTally Key ServerTally KeyServerthe UK, a visit to the Pirate Bay if the user is in the UK, but not in
Sweden, etc.
In this section, we present an extension to the PrivEx-D2 pro-
tocol that allows us to maintain per-country lists of censored web-
sites, and only count a visit by an ACN user to a given website if
that website appears on that user’s country’s list.
To do this, we of course need to determine what country the user
is in. This is best done at the ingress point to the ACN, where the
true IP address of the user is visible. Indeed, Tor already collects
this information so that it can display per-country counts of num-
bers of users. [35] It is of course vital that the DC not learn this po-
tentially identifying information about the client. The ingress node
will therefore forward to the DC an encrypted vector encoding the
country. The length of the vector is the number of countries NC for
which we are monitoring accesses to censored websites, plus one
for “Other”. The vector is then V = (cid:104)EA(rc; δc,c∗ )(cid:105)NC
c=0 where c∗
is the country the user is in and δc,c∗ is 1 if c = c∗ and 0 otherwise.
The rc are uniform random elements of Zq. The ingress node also
provides a zero-knowledge proof that each element of the vector is
an encryption of either 0 or 1, and that the sum of the plaintexts
is 1. We note this is the same proof as used in electronic voting
schemes, for example. [5]
not EA(r; 1), as above, but rather(cid:81)
The DC will check the zero-knowledge proof, and when it ob-
serves a connection to, say, Wikipedia, will multiply into its count
c Vc, where the product is over
those countries c that censor Wikipedia. The remainder of the pro-
tocol is unchanged. Each vector V is associated to a circuit at cir-
cuit construction time and the DC knows which circuit requested
the website.
4.3 PrivEx Scheme Comparison
Both schemes provide the security features we desire, but in
some settings one may be preferable over the other.
In volunteer-resourced ACNs, such as Tor, some nodes will in-
evitably have low computation and bandwidth resources and it is
best to minimize their computational, memory, and bandwidth over-
head. In such cases, PrivEx-S2 is preferable since some messages
are overall shorter and the computational overhead of frequent op-
erations is smaller.
The length of the epoch can affect our choice of scheme since
the relative time to set up and process the statistics increases for
shorter epochs. While it is not a current requirement, if we wanted
more near-real-time statistics, say every 5 seconds, then we would
prefer PrivEx-S2 since the overhead is nearly negligible compared
to PrivEx-D2. There are limits to how short the epoch can be, how-
ever, due to network latency affecting protocol communication.
On the other hand, PrivEx-D2 provides traitor detection of the
TKSs and Denial of Service (DoS) resistance. In PrivEx-S2, any
DC or TKS can DoS the system for the epoch if it does not report
its statistics, whereas in PrivEx-D2 only DCs that report statistics
for the epoch are included in the aggregation process and misbe-
having TKSs (traitors) can be detected using cryptographic proofs
ensuring that the computations were done correctly. Furthermore,
PrivEx-D2 can optionally enjoy stronger perfect forward secrecy—
against node seizure and adversaries that can view the memory con-
tents multiple times in an epoch—by re-randomizing even those
counters that have not been changed with every increment opera-
tion.
4.4 Calculating and Applying Noise
We introduce noise to our results to mitigate the risk of the cor-
relation attack that reporting exact results may introduce. A more
thorough discussion of the correlation issue is found in §5.2. In
Figure 4: The advantage is 0.5% (shaded area) of the adversary
in guessing the correct value of the statistic. Note the almost
total overlap of the two probability distributions.
this section, we present the details of how the appropriate amount
of noise is computed and added to the tallies.
4.4.1 How Much Noise?
We add noise to protect the privacy of users, but at the same
time, if we add too much noise, it will hamper the utility of PrivEx;
after all, we are deploying PrivEx to answer certain questions about
ACN usage. We adopt a principled approach to adding noise to
our statistics—one that allows the level of privacy and utility to be
set to desired levels. For this purpose we have selected the model
of differential privacy that can provide (, δ)-differential privacy
through the addition of noise using a Gaussian mechanism with
mean 0 and a standard deviation σ selected for the level of privacy
and utility we require.
We wish to protect information about whether any individual
user’s information is in the published data set, or is not in it. To do
this, we need to set an upper bound—called the sensitivity (S)—
on the maximum contribution one user can make to the count in
any epoch. For Tor, we use the fact that, by default, one circuit
is created every ten minutes, so that if our epoch length is, say,
one hour, and we always ignore repeated visits to the same website
by the same circuit, we can set S = 6—the security implications
of implementing this are discussed in §5.1.1. For other ACNs, an
appropriate sensitivity can be similarly selected.
As we are interested in practical applications of PrivEx, we pro-
vide the means to calculate the exact values of  and δ through the
lens of the privacy and utility levels we desire.
What we are interested in controlling is the advantage (over ran-
dom guessing) of an adversary in guessing whether a particular
user’s data is contained in the published (noisy) statistics, even if
the adversary knows all the other inputs to the statistics. That is,
discounting the known information, the adversary is trying to deter-
mine whether the published statistics are more likely to represent
a true measurement of 0 (the user is not present) or S (the user is
present).
Therefore, the adversary’s task is to tell if a given statistic is
drawn from the distribution N (0, σ) or N (S, σ). Given a reported
2 , the adversary’s best guess is that the true
statistic, if it is less then S
statistic is 0, and S otherwise. It is easy to see that the advantage of
the adversary is then given by the area under the N (0, σ) normal
curve between 0 and S
2 , as depicted in Figure 4.
The adversary’s advantage can then be minimized by selecting
2 ] = P r[0 <
σ large enough such that P r[0 < N (0, σ) < S
00.0010.0020.0030SS/2σPrivacy Loss (S=6)N(µ=0,σ=240)N(µ=6,σ=240)Adversary's Advantagethe expense of requiring an increase in λ by a factor of H−2 (an
increase of about 56% for H = 0.8) to achieve the same level of
utility as before.
A Worked Example. Using Tor as our ACN, and one-hour epochs,
so S = 6, we want to ﬁnd σ given a desired privacy adversary
advantage of at most 0.005. Consulting a z-table, we ﬁnd that we
2σ ≤ 0.0125, so σ ≥ 240. Then, if we want utility error
want S
√
2σ ≥ 2.33, so for σ = 240,
√
U = 0.01, the z-table says we need K
λ