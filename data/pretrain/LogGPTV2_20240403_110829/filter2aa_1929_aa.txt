1
Vista Log Forensics
Dr. Rich Murphey, ACS
Background
Case Study
 Engagement
 Preliminary Report
 Final Report
Vista Event Logging
 Logging Service
 Vista Event Encoding
 Undocumented Internals
Event Log Analysis
 Recovery
 Correlation
 Interpretation
Shadow Copy Services
Provider C
Provider C
Provider B
Provider B
Provider A
Provider A
Controller
Controller
Log files
Log files
Controller
Controller
…
Consumer
Consumer
Real time 
delivery
Logged Events
Session 1
Buffers
Session 2
Session 64
Events
Events
Enable/Disable
Session Control
Consumer
Consumer
Windows Kernel
Repair
Correlate
Recover
2
Acknowledgements
Shouts out to:
MD5, Caesar
HTA
Fednaughty
DT
Thanks to:
Jerlyn Mardis, ACS
Josh Pennell, IO Active 
Matthew Geiger, CERT
Dedicated to: 
BitMonk (HTA/Ad Hoc)
3
Special Thanks To
Sponsor:
Forensics
In-depth Analysis, Expert Witness
Data Recovery
Complex RAID, Exotic File Systems
Consulting
Information Security
This is not:
Legal Advice
Suitable for testimony
4
Rich Murphey
Experience:
Rice University
Ph.D. Electrical and 
Computer Engineering
UTMB Med. School
Faculty, Physiology & 
Biophysics
Pentasafe Security
Chief Scientist
Applied Cognitive Soln.
Chief Scientist
Expert Witness
CISSP, ACE, EnCE
An Author of:
GNU Graphics
Asterisk VOIP
 See “Authors”
FreeBSD
 Founding Core Team
XFree86
 man xorg | grep Rich
5
For More Info
C. R. Murphey, “Automated Windows 
Event Log Forensics,” Digital 
Investigation, August 2007
A peer-reviewed paper on a
new tool for automating XP
log recovery and analysis
Digital Forensic Research 
Workshop, 8/13/07
HTCIA National 8/27/07
6
Roadmap
Background
Case Study
 Engagement
 Preliminary Results
 Revised Scope
Vista Event Logging
 Events
 Logging Service
 Undocumented Internals
Event Log Analysis
 Recovery
 Correlation
 Report
Shadow Copy Services
Provider C
Provider C
Provider B
Provider B
Provider A
Provider A
Controller
Controller
Log files
Log files
Controller
Controller
…
Consumer
Consumer
Real time 
delivery
Logged Events
Session 1
Buffers
Session 2
Session 64
Events
Events
Enable/Disable
Session Control
Consumer
Consumer
Windows Kernel
Repair
Correlate
Recover
7
Case Study Steps
Step 1: Define Preliminary Scope
Define feasibility of the engagement.
Step 2: Preliminary Report
Uncover and mitigate surprises.
Define capability to answer questions.
Step 3: Final Report
In-depth coverage.
Adapt methods to answer questions.
8
1st Hurdle: Define a Scope
Officer/Director calls
Something bad happened….
Possible contract violation.
Outgoing transfer of proprietary documents.
#1: Define a scope of work.
Can we identify file transfer?
Examine hard drives
Email attachments
File transfer, uploads
Anything else?
9
2nd Hurdle: Preliminary Report
Good news:
We know what to look for.
Well defined keywords, file names
#2: Preliminary Report
D:\OfInterest.doc
In unallocated space….
Bad News:
IT deleted the user profile, and 
gave laptop to a new employee,
six months ago,
after they reformatted and 
reinstalled Windows Vista.
10
Shortcuts
Shortcuts may contain IDs, label, size
A snapshot of file’s attributes, media’s attributes
Shortcut File
Read-only
File attributes
N/A
Last access time (UTC)
11/3/2006 10:12:34 AM
Last write time (UTC)
11/11/2006 3:21:14 PM
Creation time (UTC)
1643743
File size
E2C3-F184
Volume Serial Number
Nov 11 2006
Volume Label
CD-ROM
Volume Type
D:\OfInterest.doc
Local Path
Link target information
11
3rd Hurdle: Final Report
How to identify outgoing 
file transfer?
Data carve for file path, time….
Where to find time stamps?
Event logs
Internet history
Shortcuts
Any where else?
12
Roadmap
Background
Case Study
 Engagement
 Preliminary Results
 Revised Scope
Vista Event Logging
 Events
 Logging Service
 Undocumented Internals
Event Log Analysis
 Recovery
 Correlation
 Report
Shadow Copy Services
Provider C
Provider C
Provider B
Provider B
Provider A
Provider A
Controller
Controller
Log files
Log files
Controller
Controller
…
Consumer
Consumer
Real time 
delivery
Logged Events
Session 1
Buffers
Session 2
Session 64
Events
Events
Enable/Disable
Session Control
Consumer
Consumer
Windows Kernel
Repair
Correlate
Recover
13
Shortcuts
Shortcuts may contain IDs, label, size
A snapshot of file’s attributes, media’s attributes
Shortcut File
Read-only
File attributes
N/A
Last access time (UTC)
11/3/2006 10:12:34 AM
Last write time (UTC)
11/11/2006 3:21:14 PM
Creation time (UTC)
1643743
File size
E2C3-F184
Volume Serial Number
Nov 11 2006
Volume Label
CD-ROM
Volume Type
D:\OfInterest.doc
Local Path
Link target information
14
Event Logging
Windows Vista/2008
Time, SID, Source, Severity, Message
More than 50 logs by default.
C:/Windows/system32/winevt/Logs/
Application.evtx
HardwareEvents.evtx
Internet Explorer.evtx
Security.evtx
Setup.evtx
System.evtx
….  50 more!
15
hardware interfaces (buses, I/O devices, interrupts, 
interval timers, DMA, memory cache control, etc., etc.)
System Service Dispatcher
Task Manager
Explorer
SvcHost.Exe
WinMgt.Exe
SpoolSv.Exe
Service
Control Mgr.
LSASS
Object
Mgr.
Windows
USER,
GDI
File
System
Cache
I/O Mgr
Environment 
Subsystems
User
User
Application
Application
Subsystem DLLs
OS/2
System Processes
Services
Applications
System
Threads
User
Mode
Kernel
Mode
Windows
NTDLL.DLL                                                       
Device &
File Sys.
Drivers
WinLogon
Session  
Manager
Services.Exe
POSIX
Plug and
Play Mgr.
Power
Mgr.
Security
Reference
Monitor
Virtual
Memory
Processes
& Threads
Local
Procedure
Call
Graphics
Drivers
Kernel
Hardware Abstraction Layer (HAL)
(kernel mode callable interfaces)
Component Architecture
Configura-
tion Mgr
(registry)
PDC 06
Events
Backward 
Compatibility 
Occurs Here
16
Backward Compatibility
Backward Compatibility?
17
Vista Event Logging
 5% CPU for 20K events/sec,  200K w/Transactions
 Logging and WMI are now just layers on top of ETW 
 Unified: kernel/app, tracing/logging, remote/local
Provider C
Provider C
Provider B
Provider B
Provider A
Provider A
Log files
Log files
Controller
Controller
…
Consumer
Consumer
Real time 
delivery
Logged Events
Session 1
Buffers
Session 2
Session 64
Events
Events
Enable/Disable
Session Control
Consumer
Consumer
Windows Kernel
PDC 06
18
Vista Logging Service 
High performance tracing
Event Tracing for Windows (ETW)
Events from both apps and kernel
Events are forwarded to a Collector Service
and stored in local log for consumption
Buffered in kernel
Dynamically enable/disable
No reboot or restart
Selected events are delivered as they arrive
Choose either push or pull subscription
Provider C
Provider C
Provider B
Provider B
Provider A
Provider A
Controller
Controller
Log files
Log files
Controller
Controller
…
Consumer
Consumer
Real time 
delivery
Logged Events
Session 1
Buffers
Session 2
Session 64
Events
Events
Enable/Disable
Session Control
Consumer
Consumer
Windows Kernel
19
Vista Events
Events are XML!
Standards encoding
System: standard properties
EventData: app. defined
Get events via:
Query live logs & log files
Subscribe to live logs
Filter using XPath
Internals:
New, different encoding
Arbitrary structure defined 
by each application
310
2 
0
7664
Application 
Desktop9237 
Service Started.
PDC 06
Events are encoded not as XML, but rather BXML!
20
Vista Events
310
2 
0
7664
Application 
Desktop9237 
Service Started.
PDC 06
Record Header
Section Descriptor
Section Header
Section Body
Section Header
Section Body
Section Header
Section Body
Section Descriptor
Section Descriptor
On the outside
On the inside
21
Undocumented Event Structure
Record header
Common attributes
Timestamp, severity
Number of sections
Section descriptors
Source
Offset, length
Section headers
Specifies encoding of body
Section body
event specific data
Record Header
Section Descriptor
Section Header
Section Body
Section Header
Section Body
Section Header
Section Body
Section Descriptor
Section Descriptor
22
Binary XML
BXML (Binary eXtensible Markup Lang.)
A binary serialization of an XML document.
developed by CubeWerx for OpenGIS Consortium.
Higher performance in both space and time.
More compact.
String table for tags and values.
Gzip whole doc or just body.
Avoids resource exhaustion of DOM.
10 to 100 times faster to parse.
100 times faster for dense numeric data due to 
binary encoding of numbers alone.
http://www.cubewerx.com
23
What is BXML?
Serialized numbers begins a one byte code that 
identifies the data type.
byte enum ValueType {
BoolCode = 0xF0,
// boolean value
ByteCode = 0xF1,
// 'byte' numeric value
IntCode = 0xF4,
// 'int' numeric value
}
IntNum {
// 32-bit integer value
ValueType type = IntCode;
int num;
// value
}
http://www.cubewerx.com
24
What is BXML?
XML tags are serialized as a byte code for 
the type of tag, followed by a reference to 
the tag name in the string table.
ContentElementToken {
// 
TokenType type = ContentElementCode; 
Count stringRef; 
// index of 
element name
}
ElementEndToken { 
// 
TokenType type = ElementEndCode;
}
http://www.cubewerx.com
25
What is BXML?
Strings are preceeded by their length.
String tables are preceeded by type code 
and table size.
String {
// raw character string
Count byteLength;
// length in bytes
byte chars[byteLength]; // characters in proper encoding
}
StringTableToken {              // string table (fragment)
TokenType type = StringTableCode;
Count nStrings;
// number of strings
String strings[nStrings]; // values
}
26
Why the changes?
Performance, scalability, and security
New event publishing API
Schematized, discoverable, 
structured events
Unified API
logging uses tracing framework