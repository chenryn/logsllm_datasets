itself. The channel qoslets implement communication be-
tween the proxy front and back end using protocols such
as UDP, TCP, SSL, Java RMI, or JMS (Java Message Ser-
vice). The different protocols provide different QoS prop-
erties that are used in providing the needed guarantees. For
example, an SSL channel provides security, reliability, and
ordered delivery, while a UDP channel only provides best-
effort delivery. Furthermore, channels may be connected to
different back-end proxies that provide different QoS. For
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
Request/Reply Interface
Scheduling
Leaky
Bucket
DES
Statistics
Policy
Determination
Policy
Enforcement
History
PriQueue
AES
. . .
. . .
. . .
Channel
Manager
TCP
Channel
UDP
Channel
SSL
Channel
Logging
. . .
JMS
Channel
Figure 4. Structure of a QBox
example, some proxies may have more processing power
or the network bandwidth to some proxies may be larger.
These properties may also vary over time, especially band-
width and response time. The Channel Manager maintains
the status of the channels and chooses the appropriate chan-
nel based on the speciﬁed QoS requirements. The Channel
Manager also creates and deletes channels.
Customizing dependability. This QoS architecture is very
general and can be used to implement a variety of QoS
policies and mechanisms. Here, however, we focus on de-
pendability attributes. Speciﬁcally, we consider policies that
specify the following three attributes for each request:
(cid:0) Timeliness, deﬁned as (cid:0)(cid:0), the desired end-to-end la-
tency for processing the request.
(cid:0) Reliability, deﬁned as (cid:1), the target probability that
the request is processed within (cid:0)(cid:0).
(cid:0) Security, deﬁned as (cid:2), the security level required for
the request (low, medium, high).
In this paper, we consider an architecture in which mobile
clients send requests to a single front-end proxy that in-
teracts with multiple back-end proxies executing on proxy
servers. The back-end proxies in turn interact with the tar-
get services executing on application servers. For simplic-
ity, we assume a 1-1 relationship between back-end prox-
ies and application servers, i.e., each back-end proxy inter-
acts with only one application server and vice versa. Fur-
thermore, we assume the mobile service platform only pro-
vides information services (read-only) such as phone num-
ber/address lookup, product inventory, or driving directions.
Based on our experience with iMobile, this is a reasonable
assumption. We assume that all the trafﬁc to the application
servers arrives through the proxies and thus, the proxies can
limit the load on the application servers. Finally, we assume
that proxy and application servers can suffer from crash,
omission, or timing failures. For simplicity, we assume here
that the host executing the front-end proxy does not fail;
standard techniques such as passive replication could be ap-
plied in a straightforward way to address this if desired.
The goal of the QoS architecture is to satisfy the time-
liness, reliability and security requirements for all requests
submitted to the front-end proxy. To do this, the architec-
ture addresses a number of issues, including:
(cid:0) Increasing the reliability and timeliness of requests by
using selective retransmission and selective replication
of requests to multiple application servers implement-
ing the identical service.
(cid:0) Optimizing resource usage so that as many requests as
possible can meet their requirements.
(cid:0) Regulating the load on application servers using ﬂow
control so that they do not get overloaded and their re-
sponse time remains predictable.
Speciﬁcally, the architecture uses the QoS techniques of
deadline-based scheduling [10], windowed ﬂow control, re-
transmission, redundant execution, and cryptography. These
are implemented as a collection of qoslets that are con-
ﬁgured into QBoxes—primarily the QBox at the front-end
proxy—to provide the desired attributes.
3. Policy Determination and Enforcement
QoS policy can be deﬁned using many different meth-
ods and languages [8]. In this paper, however, we assume
that the timeliness, reliability, and security QoS require-
ments for a request are speciﬁed for each (cid:3)user, service,
device(cid:4) tuple as a database record. Note that policy spec-
iﬁcation and determination, including policy reconciliation
[11], is in general a complex subject.
Policy Enforcement takes the requirement attributes as-
sociated with a request and devises a strategy for meet-
ing these requirements in a resource-efﬁcient manner. The
core of this strategy is to use a dynamic combination of re-
quest retransmission and redundant execution of a request
on multiple independent instances of a service depending on
the current system conditions. Retransmission is used when
possible since it requires extra resources only when a ser-
vice fails to reply in time. Given our system assumptions,
a request can be executed more than once and the ﬁrst suc-
cessful reply can be returned to the client. Minimizing re-
source usage in this way allows the system to meet the re-
quirements of a larger number of requests. However, decid-
ing when retransmission should be used versus redundant
execution is a balancing act. For example, more time is left
for possible retransmissions before a deadline expires if a
request is sent quickly, but at the potential cost of delaying
other requests. Similarly, having a short timeout for generat-
ing a retransmission increases the likelihood of a timely re-
sponse, but uses network, proxy, and service resources that
could be used for other requests.
To implement this strategy, Policy Enforcement requires
information on the likelihood that the service will reply via
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
the back-end proxy within a speciﬁed time period. This like-
lihood is estimated by collecting a history of the response
times and calculating a cumulative distribution function
(CDF) of the response time distribution. We use a sliding-
window based techniques similar to the one described in
[9]. For Policy Enforcement, we use the combined CDF of
all the service instances, since at this point it is not known
which server(s) will actually process this request. Based on
the CDF, we can calculate (cid:0), the (cid:2) percentile response
time, and  , the probability that response time is less
or equal to . The system also collects the average queu-
ing time, (cid:0)	, before the request is sent out (see section 4).
The strategy is realized by setting the following request
attributes governing qoslet execution:
(cid:0) (cid:0)(cid:4): deadline, the clock time by which the gateway
should return a reply to the user.
(cid:0) (cid:0)(cid:5): the clock time used as the deadline for our mod-
iﬁed earliest deadline ﬁrst (EDF) [10] scheduling
heuristic; this time approximates the time by which
the request should be sent to a back-end proxy for the
ﬁrst time.
(cid:0) Transforms: the set of transformation to be performed
on the request (e.g., encryption, compression).
The deadline attribute is calculated as (cid:0)(cid:4) = (cid:0)(cid:6)(cid:8)(cid:9)(cid:10) +
(cid:0)(cid:11) - 2*(cid:0)(cid:12), where (cid:0)(cid:6)(cid:8)(cid:9)(cid:10) is the time the request arrives at
the QBox in the front-end proxy and (cid:0)(cid:12) is the estimated
one-way transport latency between the user device and the
proxy. We have to estimate (cid:0)(cid:12) because the user device of-
ten cannot be modiﬁed to include the sending time in the re-
quest. For those devices where the sending time (cid:0)(cid:10)(cid:11) can
in fact be included, the calculation would be (cid:0)(cid:4) = (cid:0)(cid:6)(cid:8)(cid:9)(cid:10)
+ (cid:0)(cid:11) - 2*((cid:0)(cid:6)(cid:8)(cid:9)(cid:10) - (cid:0)(cid:10)(cid:11)) under the assumption that the
clocks are reasonably synchronized.
The (cid:0)(cid:5) attribute determines the order in which differ-
ent requests are processed by the QBox and is the key to
implementing our retransmission strategy. This strategy is
based on scheduling the sending of requests early—before
dictated by a strict EDF policy—to allow the opportunity
for a later retransmission if necessary. The following heuris-
tic is used to determine (cid:0)(cid:5). Let  (possible retransmis-
sion slots) be the number of times the request could be re-
transmitted before the deadline, and  (retransmissions
needed) be the estimated number of retransmissions needed
to reach the reliability goal. This latter value  is esti-
mated by assuming the retransmission requests are indepen-
dent, that is,  (cid:2) (cid:0) (cid:9)(cid:3)   (cid:4)(cid:10) (cid:9)(cid:3)   (cid:15)(cid:0)(cid:1)(cid:2) and
 (cid:2) (cid:3)(cid:0)(cid:11)(cid:10)(cid:0)	  (cid:0)(cid:15)(cid:0)(cid:1)(cid:4). Note that (cid:0)(cid:15)(cid:0)(cid:1) is used as a time-
out value in this calculation, which minimizes the number
of unnecessary retransmissions. Let (cid:11) (cid:2) (cid:13)(cid:5)(cid:14) (cid:6),
that is, a value at most the number of retransmission slots
and at most the number of required transmissions. Given
this, (cid:0)(cid:5) can be calculated as
(cid:0)(cid:5) (cid:2) (cid:0)(cid:1)
(cid:2)
(cid:0)(cid:4)   (cid:0)(cid:0)
(cid:0)(cid:4)   (cid:0)(cid:0)
(cid:0)(cid:4)   (cid:11)  (cid:0)	  (cid:0)(cid:15)(cid:0)(cid:1) otherwise
if (cid:0)(cid:11) (cid:15) (cid:5)  (cid:0)(cid:15)(cid:0)(cid:1)
if (cid:4) (cid:15)  (cid:0)(cid:11)
The ﬁrst case corresponds to no time left for retransmis-
sions, the second to no need for a retransmission, and the
third to the case where there is both the time and the need
for a retransmission. Operational details of how this value is
then used in qoslets is found below in section 4. That section
also describes how redundant execution of a request at mul-
tiple service instances is used when, for example, no time is
available for retransmissions.
Since we considers only security transformations, the
Transforms attribute can be set, for example, to “AES” (Ad-
vanced Encryption Standard) if (cid:16) is high and to “DES” if (cid:16)
is medium. The added latency caused by cryptography can
be factored in by deducting the measured encryption and de-
cryption overhead from (cid:0)(cid:5).
4. QoS Mechanisms
Overview. As noted above, qoslets are software compo-
nents that implement different QoS enhancement algo-
rithms such as encryption, retransmission, and trafﬁc shap-
ing. Implementing such enhancements requires qoslets to
be able to drop (reject), delay, reorder, re-transmit, trans-
form, and change the destinations of messages, in this
case requests and replies. Furthermore, qoslets must be de-
signed and implemented so that different combinations of
qoslets can be used together (conﬁgurability), and so that
the set of available qoslets can be extended (extensibil-
ity). All these features should be achieved without impos-
ing a high performance overhead. We achieve these goals
by implementing qoslets using an event-driven program-
ming paradigm, where qoslets do not interact with one an-
other directly, but rather raise and handle events. The event
mechanism decouples the qoslets and facilitates conﬁgura-
bility and extensibility.
A QBox is implemented using Cactus, a framework and
implementation platform for highly-customizable and dy-
namically adaptive protocols and distributed services. A
service or protocol in Cactus is implemented as a com-
posite protocol, with each service property or other func-
tional component implemented as a software module called
a micro-protocol. A micro-protocol is structured as a collec-
tion of event handlers, which are procedure-like segments
of code that are executed when a speciﬁed event occurs. A
customized version of a protocol or service is constructed
by selecting the micro-protocols that implement the desired
features.
Cactus provides a variety of operations for managing
events and event handlers. In particular, it provides a bind
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
operation for binding a handler to be executed when the
speciﬁed event occurs and a raise operation for indicating
the occurrence of an event. Events are raised either implic-
itly by the runtime system or explicitly by micro-protocols.
The relative execution order of handlers can be speciﬁed
in the bind operation. When an event is raised, all han-
dlers bound to that event are executed. The raise opera-
tion also supports a delay parameter, which can be used to
implement time-driven execution, and dynamic arguments
that are passed to the handlers upon invocation. An event
raise may be blocking (synchronous), where the caller is
blocked until all the handlers have been executed, or non-
blocking (asynchronous), where the caller continues execu-
tion concurrently with handler execution. Other operations
are available for unbinding handlers, creating and deleting
events, halting the execution of an event, and canceling a de-
layed event. Cactus also supports data structures shared by
micro-protocols in a composite protocol and a message ab-
straction designed to facilitate development of conﬁgurable
services.
A QBox is implemented as a Cactus composite proto-
col, while micro-protocols are used for qoslets. Our proto-
type implementation uses Cactus/J, the Java-based imple-
mentation of the Cactus framework [17].
QBox event structure. The set of main events in QBox is
illustrated in ﬁgure 5. Note that the same events are used
both at the front and back-end proxies. The dashed lines
represent the logical ﬂow of control in processing a re-
quest or a reply. These events are either raised by qoslets
or, in the case of events caused by interaction at the inter-
faces, by the QBox composite protocol. The names of the
events are intended to suggest how they are used. The Re-
ceivedRequest/Reply events indicate the arrival of a new re-
quest/reply at the QBox. The AcceptedRequest/Reply events
indicate that the new request/reply has been approved by the
Policy Enforcement. The ReadyRequest/Reply events indi-
cate that a request/reply is ready to be sent out of the QBox;
this event is only raised when all qoslets that may want to
delay a message have taken action. The SendFailure event
indicates that a failure has occurred in the attempt to send
a request/reply out of the QBox. Each event has the re-
quest/reply message in question as the parameter. In addi-
tion to these main events, some qoslets use private events.
Given the basic event structure of the composite protocol,
each qoslet is designed by determining what (if anything)
the qoslet needs to do when the event occurs.
The execution of qoslets is governed by the attributes as-
signed to the request and reply messages by Policy Enforce-
ment. When executed, the event handlers in the qoslets in-
spect the appropriate attributes to determine what (if any-
thing) the qoslet should do with that particular message.
Basic qoslets. A number of basic qoslets implement the
main control ﬂow and transmission of requests and replies.
Request from front end/channel
Reply from back end/channel
ReceivedRequest
AcceptedRequest
ReadyRequest
ReceivedReply
AcceptedReply
ReadyReply
SendFailure
Request to channel/back end
Reply to channel/front end
Figure 5. Main event sequences in a QBox
implement
The Channel qoslets