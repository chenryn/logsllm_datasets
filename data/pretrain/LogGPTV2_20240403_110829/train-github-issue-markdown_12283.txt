I cooked up a minimal example (a modified example from the julia docs) in
order to show my problem:
    func_dict = Dict{Int,Function}()
    function mycustomsort{T}(a::T, b::T)
      return func_dict[1](a,b)
    end
    # Last chance to define mycompare here(!!)
    const mycustomsort_c = cfunction(mycustomsort, Cint, (Ref{Cdouble}, Ref{Cdouble}) )
    # Too late; the world has changed!
    function mycompare{T}(a::T, b::T)
      return convert(Cint, ab ? +1 : 0)::Cint
    end
    func_dict[1] = mycompare
    A = [1.0,5,2,3]
    ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}), 
            A, length(A), sizeof(eltype(A)), mycustomsort_c)
    println(A)
One gets the output:
> ERROR: LoadError: MethodError: no method matching mycompare(::Float64,
> ::Float64)  
>  The applicable method may be too new: running in world age 20393, while
> current world is 20394.
Yes in the (constructed) example above, one can use the workaround to define
`mycompare` before `mycustomsort_c`. But in real world examples this is not
always possible.
_Real world example:_ I'm the author of the ODEInterface package (available
for Julia v0.4, v0.5, and trunk before 23.12.2016). There the idea is, that
the user can write julia functions (e.g. the right-hand side of an ODE) and
give this julia-functions to the ODEInterface. Inside the ODEInterface Fortran
codes are called. These Fortran-Codes call Callback-functions that (in my
case) are cfunctions of the ODEInterface that in turn try to call the user-
given Julia function. Since Pull #17057 this is not possible anymore, because
the ODEInterface (and hence the cfunctions) are typically loaded/compiled
before the user defines the problems he/she wants to solve.
Any idea how I can solve this problem?
    Julia Version 0.6.0-dev.1704
    Commit 0a0c41c* (2016-12-27 16:34 UTC)
    Platform Info:
      OS: Linux (x86_64-redhat-linux)
      CPU: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz
      WORD_SIZE: 64
      BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Haswell)
      LAPACK: libopenblas64_
      LIBM: libopenlibm
      LLVM: libLLVM-3.7.1 (ORCJIT, haswell)