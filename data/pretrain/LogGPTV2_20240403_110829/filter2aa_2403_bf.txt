var_20  
= dword  
ptr -20h 
var_4   
= dword  
ptr –4 
push   
ebp 
mov   
ebp, esp 
and   
esp, 0FFFFFFF0h 
sub   
esp, 20h 
mov   
[esp+20h+var_4], 2 ; (i) initializing 
jmp   
short loc_8048476 
loc_8048465: 
mov   
eax, [esp+20h+var_4] 
mov   
[esp+20h+var_20], eax 
call   
printing_function 
add   
[esp+20h+var_4], 1 ; (i) increment 
loc_8048476: 
cmp   
[esp+20h+var_4], 9 
jle   
short loc_8048465 ; if i<=9, continue loop 
mov   
eax, 0 
leave 
retn 
main   
endp 
在开启优化选项（/Ox）后，MSVC 的编译结果如下。 
指令清单 14.3  Optimizing MSVC 
_main    PROC 
     push   esi 
     mov    esi, 2 
$LL3@main: 
     push   esi 
     call   _printing_function 
     inc    esi 
     add    esp, 4 
     cmp    esi, 10     ; 0000000aH 
     jl     SHORT $LL3@main 
     xor    eax, eax 
     pop    esi 
     ret    0 
_main    ENDP 
在开启优化选项后，ESI 寄存器成为了局部变量 i 的专用寄存器；而在通常情况下，局部变量都应当
位于栈。可见，编译器会在局部变量为数不多的情况下进行这样的优化。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
154 
逆向工程权威指南（上册） 
进行这种优化的前提条件是：被调用方函数不应当修改局部变量专用寄存器的值。当然，在本例中编
译器能够判断函数 printing_function ()不会修改 ESI 寄存器的值。在编译器决定给局部变量分配专用寄存器
的时候，它会在函数序言部分保存这些专用寄存器的初始状态，然后在函数尾声里还原这些寄存器的原始
值。因此，您可以在本例 main()函数的序言和尾声中分别看见 PUSH ESI/POP ESI 指令。 
现在启用 GCC 4.4.1 的最深程度优化选项-O3，看看生成的汇编指令。 
指令清单 14.4  Optimizing GCC 4.4.1 
main           
proc near 
var_10           = dword ptr -10h 
push    ebp 
mov     ebp, esp 
and     esp, 0FFFFFFF0h 
sub     esp, 10h 
mov     [esp+10h+var_10], 2 
call    printing_function 
mov     [esp+10h+var_10], 3 
call    printing_function 
mov     [esp+10h+var_10], 4 
call    printing_function 
mov     [esp+10h+var_10], 5 
call    printing_function 
mov     [esp+10h+var_10], 6 
call    printing_function 
mov     [esp+10h+var_10], 7 
call    printing_function 
mov     [esp+10h+var_10], 8 
call    printing_function 
mov     [esp+10h+var_10], 9 
call    printing_function 
xor     eax, eax 
leave 
retn 
main   
endp 
GCC 把我们的循环指令给展开（分解）了。 
编译器会对选代次数较少的循环进行循环分解（Loop unwinding）对处理。展开循环体以后代码的执
行效率会有所提升，但是会增加程序代码的体积。 
编译经验表明，展开循环体较大的循环结构并非良策。大型函数的缓存耗费的内存占有量（cache 
footprint）较大。
①
① 请参阅 Dre07，及 Int14, 3.4.1.7 节。 
我们把变量 i 的最大值调整到 100，看看 GCC 是否还会分解循环。 
指令清单 14.5  GCC 
public main 
main  
proc near 
var_20  
= dword  
ptr -20h 
push   
ebp 
mov   
ebp, esp 
and   
esp, 0FFFFFFF0h 
push   
ebx 
mov   
ebx, 2 ; i=2 
sub   
esp, 1Ch 
; aligning label loc_80484D0 (loop body begin) by 16-byte border: 
nop 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
155 
loc_80484D0: 
; pass (i) as first argument to printing_function(): 
mov   
[esp+20h+var_20], ebx 
add   
ebx, 1 ; i++ 
call   
printing_function 
cmp   
ebx, 64h ; i==100? 
jnz   
short loc_80484D0 ; if not, continue 
add   
esp, 1Ch 
xor   
eax, eax ; return 0 
pop   
ebx 
mov   
esp, ebp 
pop   
ebp 
retn 
main   
endp 
这就与 MSVC 2010 /Ox 编译出来的代码差不多了。唯一的区别是，GCC 使用 EBX 寄存器充当变量 i 的
专用寄存器。因为 GCC 能够判断后面的被调用方函数不会修改这个专用寄存器的值，所以它才会这样分配
寄存器。在 GCC 不能进行相应判断，但是还决定给局部变量分配专用寄存器的时候，它就会在使用局部变量
的那个函数的序言和尾声部分添加相应指令，利用数据栈保存和恢复专用寄存器的原始值。我们可以在 main()
函数里看到这种现象：它在函数的序言和尾声部分分别存储和恢复了局部变量专用寄存器 ebx 的原始值。 
14.1.2 x86:OllyDbg 
我们启用 MSVC 2010 的优化选项“/Ox”和“/Ob0”来编译上述程序，然后使用 OllyDbg 调试生成的
可执行文件。 
如图 14.1 所示，OllyDbg 能够识别简单的循环语句，并用方括号进行标注。 
图 14.1  OllyDbg：main()函数的启动代码 
我们按 F8 键进行单步调试，将会看到 ESI 寄存器的值不断递增。我们运行到 ESI 的值（变量 i）为 6 的时
刻，如图 14.2 所示。 
图 14.2  OllyDbg：i＝6 时的循环体 
当 i=9 的时候，循环语句会做最后一次迭代。进行了这次迭代之后，i 值变为 10，不会再触发条件转
移指令 JL。main()函数结束时的情况如图 14.3 所示。 
图 14.3  OllyDbg：ESI＝10 之后，循环结束 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
156 
逆向工程权威指南（上册） 
14.1.3  x86:跟踪调试工具 tracer 
您可能也注意到了，直接使用OllyDbg这样的调试工具跟踪调试程序并不方便。所以我自己写了个调试
工具tracer。
①
① 如果您有兴趣，可以到作者的网站上下载。http://yurichev.com/tracer-en.html。 
使用 IDA 打开编译后的可执行文件，找到 PUSH ESI（这条指令把参数传递给 printing_function()函数），
记下其地址 0x401026，然后通过下述指令启动 tracer 程序： 
tracer.exe -l:loops_2.exe bpx=loops_2.exe!0x00401026 
上述指令会在 BPX 设置的断点地址处中断，输出此时各寄存器的状态。 
tracer 工具会把寄存器的状态输出到 tracer.log: 
PID=12884|New process loops_2.exe 
(0) loops_2.exe!0x401026 
EAX=0x00a328c8 EBX=0x00000000 ECX=0x6f0f4714 EDX=0x00000000 
ESI=0x00000002 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=PF ZF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000003 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF PF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000004 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF PF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000005 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000006 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF PF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000007 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000008 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF AF SF IF 
(0) loops_2.exe!0x401026 
EAX=0x00000005 EBX=0x00000000 ECX=0x6f0a5617 EDX=0x000ee188 
ESI=0x00000009 EDI=0x00333378 EBP=0x0024fbfc ESP=0x0024fbb8 
EIP=0x00331026 
FLAGS=CF PF AF SF IF 
PID=12884|Process loops_2.exe exited. ExitCode=0 (0x0) 
从中可以看到 ESI 寄存器的值从 2 递增到 9。 
tracer 工具能够追查函数中任意地址处的寄存器状态。它名字中的 trace 就强调了其独首的追查功能。
它能够在任意指令处设置断点，以记录指定寄存器的变化过程。此外，它还可以生成可被 IDA 调用的.idc
脚本文件，并为指令添加注释。例如，我们知道 main()函数的地址是 0x00401020，就可以执行 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
157 
tracer.exe -l:loops_2.exe bpf=loops_2.exe!0x00401020,trace:cc 
BPF 的意思就是在函数执行前设置断点。 
这条指令可以生成两个脚本文件，即 loops_2.exe.idc 和 loops_2.exe_clear.idc。我们使用 IDA 加载脚本
文件 loops_2.exe.idc 之后的情形如图 14.4 所示。 
图 14.4  IDA 加载.idc 脚本文件 
根据 Tracer 给循环体进行的注释可知：ESI 的值首先会从 2 递增到 9。在递增指令结束之后，ESI 的值
再从 3 递增到 0xA（10）。另外，在 main()函数结束的时候，EAX 的值会是零。 
在生成注释文件的同时，tracer 还会生成 loops_2.ext.txt。这个文件会统计每条指令被执行的次数，并且
标注了各寄存器数值的变化过程。 
指令清单 14.6  loops_2.exe.txt 
0x401020 (.text+0x20), e=      1 [PUSH ESI] ESI=1 
0x401021 (.text+0x21), e=      1 [MOV ESI, 2] 
0x401026 (.text+0x26), e=      8 [PUSH ESI] ESI=2..9 
0x401027 (.text+0x27), e=      8 [CALL 8D1000h] tracing nested maximum level (1) reached, skipping  
this CALL 8D1000h=0x8d1000 
0x40102c (.text+0x2c), e=      8 [INC ESI] ESI=2..9  
0x40102d (.text+0x2d), e=      8 [ADD ESP, 4] ESP=0x38fcbc  
0x401030 (.text+0x30), e=      8 [CMP ESI, 0Ah] ESI=3..0xa 
0x401033 (.text+0x33), e=      8 [JL 8D1026h] SF=false,true OF=false  
0x401035 (.text+0x35), e=      1 [XOR EAX, EAX] 
0x401037 (.text+0x37), e=      1 [POP ESI] 
0x401038 (.text+0x38), e=      1 [RETN] EAX=0 
我们可以使用 grep 指令搜索特定的关键字。 
14.1.4 ARM 
Non-optimizing Keil 6/2013 (ARM mode) 
main 
         STMFD    SP!, {R4,LR} 
         MOV      R4, #2 
         B        loc_368 
loc_35C  ; CODE XREF: main+1C 
         MOV      R0, R4 
         BL       printing_function 
         ADD      R4, R4, #1 
loc_368  ; CODE XREF: main+8 
         CMP      R4, #0xA 
         BLT      loc_35C 
         MOV      R0, #0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
158 
逆向工程权威指南（上册） 
         LDMFD    SP!, {R4,PC} 
上述代码中的 R4 寄存器用于存储循环计数器（即变量 i）。 
“MOV R4, #2”给变量 i 进行初始化赋值。 
“MOV R0, R4”和“BL printing_function”指令构成循环体。前者负责向被调用方函数传递参数，后者
则直接调用 printing_function ()函数。 
“ADD R4, R4, #1”指令在每次迭代之后进行 i++的运算。 
“CMP R4, #0xA”指令会比较变量 i 和数字 10（十六进制的 0xA）。下一条指令 BLT（Branch Less Than）
会在 i<10 的情况下进行跳转；否则执行“MOV R0，＃0”（处理返回值），并且退出当前函数。 
Optimizing Keil 6/2013 (Thumb mode) 
_main 
PUSH     
{R4,LR} 
MOVS     
R4, #2 
loc_132                   
; CODE XREF: _main+E 
MOVS     
R0, R4 
BL       
printing_function 
ADDS     
R4, R4, #1 
CMP      
R4, #0xA 
BLT      
loc_132 
MOVS     
R0, #0 
POP   
{R4,PC} 
这段代码似乎不需更多解释。 
Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
_main 
      PUSH             {R4,R7,LR} 
        MOVW             R4, #0x1124 ; "%d\n" 
        MOVS             R1, #2 
        MOVT.W           R4, #0 
        ADD              R7, SP, #4 
        ADD              R4, PC 
        MOV              R0, R4 
        BLX              _printf 
        MOV              R0, R4 
        MOVS             R1, #3 
        BLX              _printf 
        MOV              R0, R4 
        MOVS             R1, #4 
        BLX             
_printf 
        MOV              R0, R4 
        MOVS             R1, #5 
        BLX              _printf 