BL 
Branch with Link 
Always branches 
XX XX XX EB 
BLEQ  
BL if = equal 
BL if Z flag = 0 
XX XX XX 0B 
BLNE 
BL if not equal 
BL if Z flag = 1 
XX XX XX 1B 
Examples: 
BL      AYGSHELL_34  
7E 00 00 EB 
BLEQ    mfcce300_699  
5E 3E 00 0B 
3.3.2.3 Move (MOV) 
A program is constantly moving data around. To facilitate this, registers are updated with 
values from other registers and with hard coded integers. These values will then be used 
by other operations to make decisions or perform calculations. This is the purpose of the 
MOV opcode. 
MOV does just what its name implies; it moves information. In addition to basic moves, 
this opcode also has the same conditional variants as the B and BL opcode. However, by 
this point you should have the general understanding of what the EQ/NE/etc. means to an 
instruction set, so it will not be discussed further. Note, most every opcode includes some 
form of a conditional variant.  
It is important to understand how the MOV instruction works. This command can move 
the value of one register into another, or it can move a hard coded value into a register. 
However, you should note that the item receiving the data is always a register. The 
following will list several examples of the MOV command, what it will do, and its hex 
equivalent. 
MOV 
R2, #1 
01 20 A0 E3  
Moves the value 1 into register 2 
MOV 
R3, R1 
01 30 A0 E1  
Moves value in R1 into R3 
MOV 
LR, PC 
0F E0 A0 E1 
Moves value of R15 into R14*  
MOV 
R1, R1 
01 10 A0 E1  
Moves value R1 into R1** 
* When a call is made to another function, the value of the PC register, which is the 
current address location, needs to be stored into the Lr (14) register. This is needed, as 
previously mentioned, to hold the address from which BL instruction will need to return. 
Page 14 of 14                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
** When RVE, you will need ways to create a non-operation. The infamous NOP slide 
using 0x90 will not work (as explained later). Instead, you will need to use the MOV 
opcode to move a registers value into itself. Nothing is updated, and no flags are changed 
when this operation is executed.  
3.3.2.4 Compare (CMP) 
In a program, a need often arises in which two pieces of information have to be 
compared. The results of the comparison are used in numerous ways, from validation of a 
serial number, to continuation of a counting loop. The assembler instruction that is 
responsible for this is CMP. 
The CMP operation can be used to compare the values in two registers with each other, 
or a register value and a hard coded value. The results of the comparison do not ouput 
any data, but it does change the status flags. As previously discussed, if the two values 
are equal, the Zero flag is set to 0, if the values are not equal, the flag is set to 1. This 
Zero value is then used by a following opcode to control how or what is executed. 
The CMP operation is used in almost every serial number validation. This is 
accomplished in two ways. The first is the actual check of the entered serial number with 
a hard coded serial number, which can also be done using system functions (i.e. strcmp). 
The second is used after the validation check when the program is deciding what piece of 
code is to be executed next. Typically, there will be a BEQ or BNE operation that uses 
the status of the Zero flag to either send a 'Wrong Serial Number' message to the screen 
or to accept the entered serial and allow access to the protected program. This use of the 
CMP operation will be discussed further in the example part of this paper.  
Another use of the CMP is in a loop function. These are very common because they are 
used to assist in counting, string comparisons, file loads, and more. As a result, being able 
to recognize a loop in a sequence of assembler programming is an important part of 
successfully reverse engineering. The following will provide you with an example of how 
a loop looks when debugging a program.  
00002AEC                  
ADD      
R1, R4, R7 
00002AF0                  
MOV      
R0, R6 
00002AF4                 
BL       
sub_002EAC 
00002AF8                  
ADD      
R5, R5, #20 
00002AFC                  
ADD      
R2, R5, #25 
00002A00                  
CMP      
R3, R2 
00002A04                  
BEQ     
loc_002AEC 
This is a simple loop included in an encryption scheme. In memory address 2A04 you 
can see a Branch occurs if the Zero flag is set. This flag is set, or unset, by the CMP 
operation at memory address 2A00, which compares the values between R3 and R2. If 
the values match, the code execution will jump back to memory address 2AEC.  
Page 15 of 15                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
The following is an example of two CMP opcodes and their corresponding hex values. 
CMP 
R2, R3 
03 00 52 E1 
CMP  
R4, #1 
01 00 54 E3 
3.3.2.5 Load/Store (LDR/STR) 
While the registers are able to store small amount of information, the processor must 
access the space allotted to it in the RAM to store larger chunks of information. This 
includes screen titles, serial numbers, colors, settings, and more. In fact, most everything 
that you see when you use a program has at one time resided in memory. The LDR and 
STR opcodes are used to write and read this information to and from memory. 
While related, these two commands do opposite actions. The LDR instruction loads data 
from memory into a register and the STR instruction is used to store the data from the 
registry into memory for later usage. However, there is more to this instruction than the 
simple transfer of data. In addition to defining where the data is moved, the LDR/STR 
command have variations that tell the processor how much data is to be moved. The 
follow is a list of these variants and what they mean. 
LDR/STR: Move a Words (four bytes) worth of data to or from memory. 
LDRB/STRB: Move a Bytes worth of data to or from memory. 
LDRH/STRH: Move two Bytes worth of data to or from memory. 
LDR/STR commands are different from the other previously discussed instructions in 
that they almost always have three pieces of information included with them. This is due 
to the way in which the load and store instructions work. Since only a few bytes of data 
are moved at best, the program must keep track of where it was last writing to or reading 
from. It must then append or read from where it left of from the last read/write. For this 
reason, you will often find LDR/STR commands in a loop where they will read in or 
write out large amounts of data, one byte at a time.  
The LDR/STR instructions are also different from other instructions in that they typically 
have three variables controlling where and what data is manipulated. The first variable is 
the data that is actually being transferred. The second and third determine where the data 
is written, and if it is manipulated before it is permanently stored or loaded. The follow 
lists several examples of how these instruction set are used.  
STR 
R1, [R4, R6]  
Store R1 in R4+R6 
STR 
R1, [R4,R6]! 
Store R1 in R4+R6 and write the address in R4 
STR 
R1, [R4], R6  
Store R1 at R4 and write back R4+R6 to R4 
STR 
R1, [R4, R6, LSL#2] 
Store R1 in R4+R6*2 (LSL discussed next) 
LDR 
R1, [R2, #12] 
Load R1 with value at R2+12. 
LDR 
R1, [R2, R4, R6] 
Load R1 with R2+R4+R6 
While this provides a good example of how the LDR/STR are used, you should have 
Page 16 of 16                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
noted two new items that impacted how the opcode performed. The first is the “!” 
character that is used to tell the instruction to write back the new information into one of 
the registers. The second is the use of the LSL command, which is discussed following 
this segment. 
Also related to this instruction is the LDM/STM instructions. These are also used to store 
or load register values, only they do it on a larger scale. Instead of just moving one value, 
like LDR/STR, the LDM/STM instruction stores or loads ALL the register values. This is 
most commonly used when a BL occurs. When this happens, the program must be able to 
keep track of the original register values, which will be overwritten with values used by 
the BL code. So, the STM opcode is used to store key registers onto the stack memory, 
and when the branches code is completely executed, the original register values are 
loaded back into the registers from memory using the LDM opcode. See the following 
chunk of code for an example. 
STMFD   SP!, {R4,R5,LR} 
MOV     R0, R4  and more code 
LDMFD   SP!, {R4,R5,LR} 
In this example, R4, R5, and the LR values are placed into memory using the stack 
pointer address, which is then updated with the new memory address to account for the 
growth of the stack. At then end of the algorithm, R4, R5, and LR are loaded back from 
the stack pointer, which is again updated, and the program execution continues. 
You should be getting slightly confused at this point. If you are not, then you probably 
have had previous experience with assembler, or are just a borne programmer. Don't be 
discouraged if you are feeling overwhelmed, for learning how to program in assembler 
typically takes months of dedicated study. Fortunately, in the case of reverse engineering, 
you don't have to know how to program, but just need to be able to figure out what a 
program is doing. 
3.3.2.6 Shifting 
The final instruction sets we will look at are the shifting operations. These are somewhat 
complicated, but a fundamental part of understanding assembler. They are used to 
manipulate data held by a register at the binary level. In short, they shift the bit values left 
or right (depending on the opcode), which changes the value held by the register. The 
follow illustrates how this works with the two most common shifting instruction sets; 
LSL and LSR. For the sake of space, we will only be performing shifts on bits 0-7 of a 32 
bit value.  
LSL: Logical Shift Left – Shift the binary values left by x number of places, using zeros 
to fill in the empty spots. 
Page 17 of 17                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
LSR: Logical Shift Right – Shift the 32 bit values right by x number of places, using 
zeros to fill in the empty spots. 
While these are the most common shift instructions, there are three others that you may 
see. They are Arithmetic Shift Left (ASL), Arithmetic Shift Right (ASR), and Rotate 
Right Extended (ROR). All of these shift operations perform the same basic function as 
LSL/LSR, with some variations on how they work. For example, the ASL/ASR shifts fill 
in the empty bit places with the bit value of register 31. This is used to preserve the sign 
bit of the value being held in the register. The ROR shift, on the other hand, carries the 
bit value around from bit 0 to bit 31. 
3.4 Summary 
The previous pages have given you an inside look at the assembler programming 
language. You will need this information later in this paper when we practice some of our 
RVE skills on a test program. This information is invaluable to you as you attempt to 
 debug software, looking for holes and security risks. 
4 Reverse-Engineering Tools 
Reverse engineering software requires several key tools. Each tool allows its user to 
interact with the target program in one specific way, and without these tools the reverse 
engineering process can take much longer. The following is a breakdown of the types of 
tools, and an example of each. 
4.1 Hex Editor 
As previously described, all computer data is processed as binary code. However, this 
code is rather difficult to follow for the human eye, which lead to the creation of hex. 
Using the numbers between 0-9 and the letters A-F, any eight digit binary value can be 
quickly converted to a one or two character hex value, and vise versa.  
While it is importance that a hex editor can convert the program file to its hex equivalent, 
3 
11 
Rsl #4 
110000 
48 
6 
110 
Rsl #3 (9)
110000 
48 
12 
1100 
Rsl #2 (4)
110000 
48 
27 
11000 
Rsl #1 (2)
110000 
48 
48 
110000 
Lsl #4 
0011 