➥ Hash=0d352f0688d3a686e56a72852a217ae461a594ef22e54cb
➥ 551af5ca6d70951bc,By=spiffe://api.natter.local/ns/       
➥ natter-api/sa/natter-api-service;Hash=b26f1f3a5408f7
➥ 61753f3c3136b472f35563e6dc32fefd1ef97d267c43bcfdd1
The original client certificate presented to the gateway is the first entry in the header,
and the certificate presented by the Istio sidecar proxy is the second. The gateway
itself will strip any existing header from incoming requests, so the append behavior is
only for internal sidecar proxies. The sidecar proxies also strip the header from new
outgoing requests that originate inside the service mesh. These features allow you to
use client certificate authentication in Istio without needing to generate or manage
your own certificates. Within the service mesh, this is entirely managed by Istio, while
external clients can be issued with certificates using an external CA.
11.4.5 Mutual TLS with OAuth2
OAuth2 can also support mTLS for client authentication through a new specification
(RFC 8705 https://tools.ietf.org/html/rfc8705), which also adds support for certifi-
cate-bound access tokens, discussed in section 11.4.6. When used for client authenti-
cation, there are two modes that can be used:
 In self-signed certificate authentication, the client registers a certificate with the
AS that is signed by its own private key and not by a CA. The client authenti-
cates to the token endpoint with its client certificate and the AS checks that it
exactly matches the certificate stored on the client’s profile. To allow the certifi-
cate to be updated, the AS can retrieve the certificate as the x5c claim on a JWK
from a HTTPS URL registered for the client.
 In the PKI (public key infrastructure) method, the AS establishes trust in the
client’s certificate through one or more trusted CA certificates. This allows the
client’s certificate to be issued and reissued independently without needing to
update the AS. The client identity is matched to the certificate either through
the Subject DN or SAN fields in the certificate.
Unlike JWT bearer authentication, there is no way to use mTLS to obtain an access
token for a service account, but a client can get an access token using the client cre-
dentials grant. For example, the following curl command can be used to obtain an
access token from an AS that supports mTLS client authentication:
curl -d 'grant_type=client_credentials&scope=create_space' \
    -d 'client_id=test' \    
    --cert test-client.pem \                
    --key test-client-key.pem \             
    https://as.example.org/oauth2/access_token
The client_id parameter must be explicitly specified when using mTLS client authen-
tication, so that the AS can determine the valid certificates for that client if using the
self-signed method.
The comma 
separates the two 
certificate entries.
Specify the
client_id
explicitly.
Authenticate using the client 
certificate and private key.
410
CHAPTER 11
Securing service-to-service APIs
 Alternatively, the client can use mTLS client authentication in combination with
the JWT Bearer grant type of section 11.3.2 to obtain an access token for a service
account while authenticating itself using the client certificate, as in the following curl
example, which assumes that the JWT assertion has already been created and signed
in the variable $JWT:
curl \
  -d 'grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer' \    
  -d "assertion=$JWT&scope=a+b+c&client_id=test" \                 
  --cert test-client.pem \                        
  --key test-client-key.pem \                     
  https://as.example.org/oauth2/access_token
The combination of mTLS and JWT bearer authentication is very powerful, as you’ll
see later in section 11.5.3.
11.4.6 Certificate-bound access tokens
Beyond supporting client authentication, the OAuth2 mTLS specification also describes
how the AS can optionally bind an access token the TLS client certificate when it is
issued, creating a certificate-bound access token. The access token then can be used to
access an API only when the client authenticates to the API using the same client cer-
tificate and private key. This makes the access token no longer a simple bearer token
because an attacker that steals the token can’t use it without the associated private key
(which never leaves the client).
DEFINITION
A certificate-bound access token can’t be used except over a TLS con-
nection that has been authenticated with the same client certificate used
when the access token was issued.
To obtain a certificate-bound access token, the client simply authenticates to the
token endpoint with the client certificate when obtaining an access token. If the AS
Proof-of-possession tokens
Certificate-bound access tokens are an example of proof-of-possession (PoP) tokens,
also known as holder-of-key tokens, in which the token can’t be used unless the client
proves possession of an associated secret key. OAuth 1 supported PoP tokens using
HMAC request signing, but the complexity of implementing this correctly was a factor
in the feature being dropped in the initial version of OAuth2. Several attempts have
been made to revive the idea, but so far, certificate-bound tokens are the only pro-
posal to have become a standard.
Although certificate-bound access tokens are great when you have a working PKI, they
can be difficult to deploy in some cases. They work poorly in single-page apps and
other web applications. Alternative PoP schemes are being discussed, such as a JWT-
based scheme known as DPoP (https://tools.ietf.org/html/draft-fett-oauth-dpop-03),
but these are yet to achieve widespread adoption.
Authorize using a JWT bearer
for the service account.
Authenticate the 
client using mTLS.
411
Mutual TLS authentication
supports the feature, then it will associate a SHA-256 hash of the client certificate with
the access token. The API receiving an access token from a client can check for a cer-
tificate binding in one of two ways:
 If using the token introspection endpoint (section 7.4.1 of chapter 7), the AS
will return a new field of the form "cnf": { "x5t#S256": "…hash…" } where the
hash is the Base64url-encoded certificate hash. The cnf claim communicates a
confirmation key, and the x5t#S256 part is the confirmation method being used.
 If the token is a JWT, then the same information will be included in the JWT
claims set as a "cnf" claim with the same format.
DEFINITION
A confirmation key communicates to the API how it can verify a
constraint on who can use an access token. The client must confirm that it has
access to the corresponding private key using the indicated confirmation
method. For certificate-bound access tokens, the confirmation key is a SHA-256
hash of the client certificate and the client confirms possession of the private
key by authenticating TLS connections to the API with the same certificate.
Figure 11.7 shows the process by which an API enforces a certificate-bound access
token using token introspection. When the client accesses the API, it presents its
access token as normal. The API introspects the token by calling the AS token intro-
spection endpoint (chapter 7), which will return the cnf claim along with the other
token details. The API can then compare the hash value in this claim to the client cer-
tificate associated with the TLS session from the client.
 In both cases, the API can check that the client has authenticated with the same
certificate by comparing the hash with the client certificate used to authenticate at the
TLS layer. Listing 11.9 shows how to calculate the hash of the certificate, known as a
thumbprint in the JOSE specifications, using the java.security.MessageDigest class
that you used in chapter 4. The hash should be calculated over the full binary encod-
ing of the certificate, which is what the certificate.getEncoded() method returns.
Open the OAuth2TokenStore.java file in your editor and add the thumbprint method
from the listing.
DEFINITION
A certificate thumbprint or fingerprint is a cryptographic hash of
the encoded bytes of the certificate.
private byte[] thumbprint(X509Certificate certificate) {
    try {
        var sha256 = MessageDigest.getInstance("SHA-256");    
        return sha256.digest(certificate.getEncoded());      
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
Listing 11.9
Calculating a certificate thumbprint
Use a SHA-256 
MessageDigest 
instance.
Hash the bytes 
of the entire 
certificate.
412
CHAPTER 11
Securing service-to-service APIs
To enforce a certificate binding on an access token, you need to check the token
introspection response for a cnf field containing a confirmation key. The confirma-
tion key is a JSON object whose fields are the confirmation methods and the values
are the determined by each method. Loop through the required confirmation meth-
ods as shown in listing 11.9 to ensure that they are all satisfied. If any aren’t satisfied,
or your API doesn’t understand any of the confirmation methods, then you should
reject the request so that a client can’t access your API without all constraints being
respected.
TIP
The JWT specification for confirmation methods (RFC 7800, https://tools
.ietf.org/html/rfc7800) requires only a single confirmation method to be
specified. For robustness, you should check for other confirmation methods
and reject the request if there are any that your API doesn’t understand.
Listing 11.9 shows how to enforce a certificate-bound access token constraint by check-
ing for an x5t#S256 confirmation method. If a match is found, Base64url-decode the
AS
Client
API
1. Get cert-bound access token
2. Access API
3. Introspect token
{"cnf":
{"x5t#S256":"..."}}
The client obtains a certiﬁcatebound
access token from the AS.
The API introspects the
access token to discover
the certiﬁcate binding.
4. Check client cert matches
certiﬁcate binding
The API compares the certiﬁcate
binding to the certiﬁcate the client
has authenticated the connection with.
Figure 11.7
When a client obtains a certificate-bound access token and then uses it 
to access an API, the API can discover the certificate binding using token introspection. 
The introspection response will contain a "cnf" claim containing a hash of the client 
certificate. The API can then compare the hash to the certificate the client has used to 
authenticate the TLS connection to the API and reject the request if it is different.
413
Mutual TLS authentication
confirmation key value to obtain the expected hash of the client certificate. This can
then be compared against the hash of the actual certificate the client has used to
authenticate to the API. In this example, the API is running behind the NGINX ingress
controller, so the certificate is extracted from the ssl-client-cert header. 
CAUTION
Remember to check the ssl-client-verify header to ensure
the certificate authentication succeeded; otherwise, you shouldn’t trust the
certificate.
If the client had directly connected to the Java API server, then the certificate is avail-
able through a request attribute:
var cert = (X509Certificate) request.attributes(
        "javax.servlet.request.X509Certificate");
You can reuse the decodeCert method from the UserController to decode the certif-
icate from the header and then compare the hash from the confirmation key to the
certificate thumbprint using the MessageDigest.isEqual method. Open the OAuth2-
TokenStore.java file and update the processResponse method to enforce certificate-
bound access tokens as shown in the following listing.
private Optional processResponse(JSONObject response,
        Request originalRequest) {
    var expiry = Instant.ofEpochSecond(response.getLong("exp"));
    var subject = response.getString("sub");
    var confirmationKey = response.optJSONObject("cnf");    
    if (confirmationKey != null) {
        for (var method : confirmationKey.keySet()) {            
            if (!"x5t#S256".equals(method)) {                      
                throw new RuntimeException(                        
                        "Unknown confirmation method: " + method); 
            }                                                      
            if (!"SUCCESS".equals(                                   
                   originalRequest.headers("ssl-client-verify"))) {  
                return Optional.empty();                             
            }                                                        
            var expectedHash = Base64url.decode(               
                    confirmationKey.getString(method));        
            var cert = UserController.decodeCert(                   
                    originalRequest.headers("ssl-client-cert"));    
            var certHash = thumbprint(cert);                        
            if (!MessageDigest.isEqual(expectedHash, certHash)) {   
                return Optional.empty();                            
            }                                                       
        }
    }
    var token = new Token(expiry, subject);
Listing 11.10
Verifying a certificate-bound access token
Check if a 
confirmation key 
is associated 
with the token.
Loop through the
confirmation
methods to
ensure all are
satisfied.
If there are any 
unrecognized 
confirmation 
methods, then 
reject the request.
Reject the request if
no valid certificate
is provided.
Extract the expected 
hash from the 
confirmation key.
Decode the client
certificate and
compare the hash,
rejecting if they
don’t match.
414
CHAPTER 11
Securing service-to-service APIs
    token.attributes.put("scope", response.getString("scope"));
    token.attributes.put("client_id",
            response.optString("client_id"));
    return Optional.of(token);
}
An important point to note is that an API can verify a certificate-bound access token
purely by comparing the hash values, and doesn’t need to validate certificate chains,
check basic constraints, or even parse the certificate at all!6 This is because the author-
ity to perform the API operation comes from the access token and the certificate is
being used only to prevent that token being stolen and used by a malicious client.
This significantly reduces the complexity of supporting client certificate authentica-
tion for API developers. Correctly validating an X.509 certificate is difficult and has
historically been a source of many vulnerabilities. You can disable CA verification at
the ingress controller by using the optional_no_ca option discussed in section 11.4.2,
because the security of certificate-bound access tokens depends only on the client
using the same certificate to access an API that it used when the token was issued,
regardless of who issued that certificate.
TIP
The client can even use a self-signed certificate that it generates just
before calling the token endpoint, eliminating the need for a CA for issuing
client certificates.
At the time of writing, only a few AS vendors support certificate-bound access tokens,
but it’s likely this will increase as the standard has been widely adopted in the financial
sector. Appendix A has instructions on installing an evaluation version of ForgeRock
Access Management 6.5.2, which supports the standard.
6 The code in listing 11.9 does parse the certificate as a side effect of decoding the header with a Certificate-
Factory, but you could avoid this if you wanted to. 
Certificate-bound tokens and public clients
An interesting aspect of the OAuth2 mTLS specification is that a client can request
certificate-bound access tokens even if they don’t use mTLS for client authentication.
In fact, even a public client with no credentials at all can request certificate-bound
tokens! This can be very useful for upgrading the security of public clients. For exam-
ple, a mobile app is a public client because anybody who downloads the app could
decompile it and extract any credentials embedded in it. However, many mobile
phones now come with secure storage in the hardware of the phone. An app can gen-
erate a private key and self-signed certificate in this secure storage when it first
starts up and then present this certificate to the AS when it obtains an access token
to bind that token to its private key. The APIs that the mobile app then accesses with
the token can verify the certificate binding based purely on the hash associated with
the token, without the client needing to obtain a CA-signed certificate.
415
Managing service credentials
11.5
Managing service credentials
Whether you use client secrets, JWT bearer tokens, or TLS client certificates, the cli-
ent will need access to some credentials to authenticate to other services or to retrieve
an access token to use for service-to-service calls. In this section, you’ll learn how to
distribute credentials to clients securely. The process of distributing, rotating, and
revoking credentials for service clients is known as secrets management. Where the
secrets are cryptographic keys, then it is alternatively known as key management.
DEFINITION
Secrets management is the process of creating, distributing, rotat-
ing, and revoking credentials needed by services to access other services.
Key management refers to secrets management where the secrets are cryp-
tographic keys.
11.5.1 Kubernetes secrets
You’ve already used Kubernetes’ own secrets management mechanism in chapter 10,
known simply as secrets. Like other resources in Kubernetes, secrets have a name and
live in a namespace, alongside pods and services. Each named secret can have any num-
ber of named secret values. For example, you might have a secret for database creden-
tials containing a username and password as separate fields, as shown in listing 11.11.
Just like other resources in Kubernetes, they can be created from YAML configuration
files. The secret values are Base64-encoded, allowing arbitrary binary data to be
included. These values were created using the UNIX echo and Base64 commands:
echo -n 'dbuser' | base64
TIP
Remember to use the -n option to the echo command to avoid an extra
newline character being added to your secrets.
Pop quiz
8
Which of the following checks must an API perform to enforce a certificate-bound
access token? Choose all essential checks.
a
Check the certificate has not expired.
b
Ensure the certificate has not expired.
c
Check basic constraints in the certificate.
d
Check the certificate has not been revoked.
e
Verify that the certificate was issued by a trusted CA.
f
Compare the x5t#S256 confirmation key to the SHA-256 of the certificate the
client used when connecting.
9
True or False: A client can obtain certificate-bound access tokens only if it also
uses the certificate for client authentication.
The answers are at the end of the chapter.
416
CHAPTER 11
Securing service-to-service APIs
WARNING
Base64 encoding is not encryption. Don’t check secrets YAML files
directly into a source code repository or other location where they can be eas-
ily read.
apiVersion: v1
kind: Secret     
metadata:
  name: db-password        
  namespace: natter-api    
type: Opaque
data:
  username: ZGJ1c2Vy     
  password: c2VrcmV0     
You can also define secrets at runtime using kubectl. Run the following command to
define a secret for the Natter API database username and password:
kubectl create secret generic db-password -n natter-api \
    --from-literal=username=natter \
    --from-literal=password=password
TIP
Kubernetes can also create secrets from files using the --from-file
=username.txt syntax. This avoids credentials being visible in the history of
your terminal shell. The secret will have a field named username.txt with the
binary contents of the file.
Kubernetes defines three types of secrets:
 The most general are generic secrets, which are arbitrary sets of key-value pairs,
such as the username and password fields in listing 11.11 and in the previous
example. Kubernetes performs no special processing of these secrets and just
makes them available to your pods.
 A TLS secret consists of a PEM-encoded certificate chain along with a private key.
You used a TLS secret in chapter 10 to provide the server certificate and key to
the Kubernetes ingress controller. Use kubectl create secret tls to create a
TLS secret.
 A Docker registry secret is used to give Kubernetes credentials to access a private
Docker container registry. You’d use this if your organization stores all images