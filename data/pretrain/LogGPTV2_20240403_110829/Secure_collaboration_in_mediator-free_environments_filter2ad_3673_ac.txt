# Path Discovery and Security in a Mediator-Free Collaboration Environment

## 1. On-Demand Path Discovery

### 1.1 Overview
On-demand path discovery is a method used to dynamically discover secure paths between domains in a collaboration environment. This process is initiated when a domain (the home domain) needs to determine the roles reachable at another domain (the target domain).

### 1.2 Cross Links and Path Discovery Messages
- **Cross Links**: These are the connections between different domains.
- **Path Discovery Messages**: These messages are sent across cross links to discover a valid path.

### 1.3 Example of On-Demand Path Discovery
Figure 5(b) illustrates an example where domain A initiates a path discovery to reach role \( rD3 \) in domain D. The solid arrows represent the path discovery messages. 

- **Domain B** does not forward the request on the cross link \((rB2, rA1)\) because domain A is already in the computed path.
- **Domain D** does not forward the request on the cross link \((rD3, rB2)\) because domain B is in the computed path.

### 1.4 Algorithm for Path Request Handling
When a domain \( j \) receives a path request from a neighboring domain, it follows the algorithm shown in Figure 6:

1. **Check Path Signature**: Verify the path signature \( S.P \). If invalid, drop the request.
2. **Check Path Linking Rules**: Ensure the path \( P \) and the incoming cross link \((rX_i, rE_j)\) follow the basic path linking rules. If insecure, drop the request.
3. **Path Length Check**: If the path length exceeds \( P_{max} \), drop the request.
4. **Target Domain Check**: If domain \( j \) is the target domain:
   - Update the path \( P_{new} = P \circ rE_j \).
   - Generate a new path signature \( S.P_{new} = SIGN_{ej}(S.P \oplus h(rE_j)) \).
   - Send a Path Request Reply \((P_{new}, S.P_{new})\) to the home domain.
5. **Forward Request**: For all outgoing cross links \( L = (rX_j, rE_k) \in F_O_j \) and \((rE_j, rX_j) \propto A_j\) and domain \( k \notin D.P \):
   - Update the path \( P_{new} = P \circ rE_j \circ rX_j \).
   - Generate a new path signature \( S.P_{new} \).
   - Send the request \((T, P_{new}, S.P_{new})\) to domain \( k \).
6. **End**.

### 1.5 Timeout and No Secure Path
- The home domain waits for a timeout period \( T_{max} \) after sending the path request.
- If no reply arrives, it indicates there are no secure paths from the home domain to the target domain.
- \( T_{max} \) is determined based on the number of collaborating domains.
- Path authenticity is ensured using the path signature scheme discussed in Section 6.

### 1.6 Advantages and Disadvantages
- **Advantages**:
  - Saves network bandwidth by limiting the exchange of path discovery information.
  - Reduces path discovery traffic by including constraints on the requested path.
  - Eliminates the need for periodic dissemination of path discovery information.
- **Disadvantages**:
  - Large latency at the beginning of the collaboration due to the propagation of path request messages.

## 2. Path Selection
Both proactive and on-demand path discovery algorithms can return multiple secure paths. The home domain selects one path based on the following criteria:

- **Path Length**: Choose the shortest path in terms of the number of visited domains.
- **Visited Domains**: Select the path that includes specific domains or follows a certain sequence.
- **Composite Domain Reputation**: Compute the path reputation using the reputations of the included domains and select the path with the highest reputation.

## 3. Security Analysis
This section discusses potential security attacks and how the framework mitigates them.

### 3.1 Path Corruption
- **Path Insertion Attack**: An attacker attempts to insert a domain into the path. The attacker cannot generate the new path signature, making this attack ineffective.
- **Path Deletion Attack**: An attacker tries to delete a domain from the path. The attacker cannot generate the new path signature, rendering this attack ineffective.

### 3.2 Path Replay Attacks
- An attacker captures a valid session request and tries to replay it. This is prevented by using a new seed for each session, making the captured request invalid.

### 3.3 Denial of Service
- An attacker requests a role via a path with a loop, causing infinite path growth. This is mitigated by setting a bound on the permissible path size, typically double the number of domains in the collaboration.

### 3.4 Violations of Restricted Relation R
- A malicious domain may violate restricted access relations. This is detected by neighboring domains, as such violations are recorded in the user’s access path.

## 4. Related Work
- **Secure Interoperation in Multi-Domain Environments**: Li Gong et al. [11] and Bonatti et al. [4] have addressed the problem of secure interoperation, requiring a trusted third party with a global view.
- **Mediator-Based Approaches**: Dawson et al. [7] and other works [20, 15, 24, 25] propose mediator-based approaches, which are less flexible and not suitable for dynamic distributed environments.

## 5. Conclusions
This paper presents a mediator-free collaboration environment where domains make localized access control decisions. The framework ensures secure collaboration without a trusted mediator or a global view. It uses the user’s access path and path authentication to make secure access control decisions. Proactive and on-demand path discovery algorithms enable domains to discover multi-hop collaborations, and the framework effectively handles various security attacks.

## 6. Acknowledgments
The research was supported by CERIAS at Purdue University and the National Science Foundation under NSF Grant IIS-0209111. Elisa Bertino's research was also supported by the NSF and IBM.

## 7. References
[References listed as provided in the original text]

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.