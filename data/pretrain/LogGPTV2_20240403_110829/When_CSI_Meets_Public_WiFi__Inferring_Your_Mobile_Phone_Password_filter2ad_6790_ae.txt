volunteers are required to access to this free WiFi access
1076Antennas 
Intel 5300 NIC 
Hidden 
Devices 
1m   
Target 
Start   
Time 
End 
Time 
… 
(a) Sensitive Input Windows Recog-
nition Module
40
35
e
d
u
t
i
l
30
p
m
25
A
I
S
C
20
15
10
0
2
1
0.5
2.5
1.5
A CSI sequence containing a Sensitive (cid:58)(cid:76)(cid:81)(cid:71)(cid:82)(cid:90) (cid:3)
(b) Original CSI
3.5
3
4
4.5
x 10 4
Figure 13: Real Case Scenario
points and perform the following three phases: 1) Online
Training Phase: the volunteers are required to input some
randomly generated numbers by following a similar way as
Text Captchas. This phase is designed to collect the user’s
input number and the corresponding CSI data to ﬁnish the
data training. 2) Normal Use Phase: the volunteers perform
the online browsing or use the applications as a normal user.
3) Mobile Payment Phase: when the users use the online
shopping applications, it will be ended with the mobile pay-
ment. All of the online shopping and mobile payments are
secured with HTTPS protocol. According to Alipay mobile
payment policy, the mobile users must input the password
to ﬁnish an mobile payment transactions. The goal of the
attacker is to recover the mobile payment password of the
volunteers.
6.2 Operations of WindTalker
After the volunteers connect to the authentication-free
WiFi hotspot, WindTalker triggers ICMP based CSI Ac-
quirement Module to collect the CSI data at the sampling
rate of 800 packets/s. WindTalker records the timestamp
per one hundred CSI data. Simultaneously, WindTalker
utilizes Wireshark to capture and record WiFi traﬃc pack-
ets and their corresponding timestamp. During the real-
world experiment, WindTalker collects WiFi traﬃc data and
CSI data in the online phase. After collecting the data,
WindTalker infers the user’s mobile payment password in
the oﬄine phase.
6.3 Recognizing The Sensitive Input Windows:
To determine the sensitive input windows, WindTalker
runs in a real-time fashion to collect the meta data (e.g., IP
address) of the targeted sensitive mobile payment applica-
tions (e.g., Alipay). For example, in the experiment, Alipay
applications will always route their data to the server of
some speciﬁc IP address such as “110.75.xx.xx”. This IP
address will be kept to be relatively stable for one or two
weeks. With the traﬃc meta data, as shown in Fig.14(a),
WindTalker obtains the rough start time and end point of
Sensitive Input Window via searching packets whose desti-
nation is “110.75.xx.xx”. Then WindTalker begins to ana-
lyze the corresponding CSI data in that period of time.
6.4 CSI based Password Inference
Fig.14(b) shows the original 12th subcarrier CSI data in
Sensitive Input Window. After data preprocessing, Fig.14(c)
shows the ﬁrst three principal components of CSI data af-
ter PCA. It is found that in the real-world experiment that
besides input payment password, victim may have other op-
erations such as selecting credit card for payment in period
Sensitive Input Window 
1 
Keystroke Extraction 
Keystroke Inference  7 
7 
3 
9 
9 
(c) Keystroke Inference Module
Figure 14: WindTalker in Case Study
of time of Sensitive Input. In order to handle this situation,
WindTalker only needs to ﬁnd a continuous keystroke of cer-
tain length. In our case, we are interested in continuous 6-bit
password input since Alipay chooses 6-digit mobile payment
password. Thus after keystroke extraction and recognition
process, WindTalker is able to list possible password can-
didates according to probability. The top three password
candidates in this case is 773919, 773619, 773916 while the
actual password is 773919. We carry out the real-world ex-
periment ten times, each time the password is diﬀerent. Our
experiment results show that the attacker can successfully
recover 2, 4, 7 and 9 passwords if allowing to try the pass-
word input for 5, 10, 50 and 100 times (or Top 5, 10, 50, and
100 candidates). This further demonstrates the practicality
of the proposed attack in the practical environment.
7. DISCUSSIONS
7.1 Limitations
In this section, we discuss the main limitations of WindTalker.
WindTalker’s high performance is achieved in an experiment
environment. However, if we try to apply WindTalker in
anytime and anyplace, we need to overcome the limitations
as follows.
Hardware Limitations.
In WindTalker, we use Intel
5300 NIC and Linux 802.11n CSI Tool[8].
In our experi-
ments, it is observed that the system will crash when we
perform ICMP based CSI data collection for iPhone or some
version of android smart phones. This is because, according
to the statement of the author of CSI Tool, it is very easy to
crash when one Intel 5300 NIC works with other NICs (e.g.,
an iPhone). However, our implementation and evaluation
on a wide range of smart phones (including XiaoMi phones,
Nexus and Samsung phones) demonstrate the practicality
of the proposed CSI based keystroke inference method. We
will leave the issues of improving the compatibility of Intel
5300 NIC with a wider range of mobile devices to our future
work.
1077Table 2: Recovery Rate and Loop Times
Loop Times
Ten
One
68.3% 73.3% 78.3% 81.7%
Recovery Rate
Three
Five
Fixed Typing Gesture. Currently, WindTalker can
only work for the situation that the victim can only touch
the screen with a relatively ﬁxed gesture and the phone needs
to be placed in a relative stable environment (e.g., a table).
In reality, the user may type in an ad-hoc way (e.g., the vic-
tim may hold and shake the phone, or even perform some
other actions while typing). We argue that is a common
problem for most of the side channel based keystroke in-
ference schemes such as [2, 13, 16]. This problem can be
partially circumvented by proﬁling the victim ahead or per-
forming a targeted attack by applying the relevant move-
ment model as pointed out by [13].
User Speciﬁc Training. Using WindTalker, the vic-
tim’s input can be recognized via the classiﬁers trained from
the same user. In the real-world experiments, it is hard to
adopt the classiﬁers trained by other people to infer the vic-
tim’s input. This is because diﬀerent people have diﬀerent
ﬁnger coverage and clicking model. A large number of train-
ing data based on a wide range of training samples may over-
come this limitation. In practice, the attackers have more
choices to achieve the user speciﬁc training. For example, it
can simply oﬀer the user free WiFi access and, as the return,
the victim should ﬁnish the online training by clicking the
designated numbers. It can also mimic a Text Captchas to
require the victim to input the chosen numbers. We further
analyze the impact of the number of training data on re-
covery rate in WindTalker. Table.2 shows the recovery rate
increases with the training loop increases. Even if there is
only one training sample for one keystroke, WindTalker can
still achieve whole recovery rate of 68.3%.
7.2 Defending Strategies
One of the most straightforward defense strategies is to
randomize the layouts of the PIN keypad, such that the
attacker cannot recover the typed PIN number even if he can
infer the keystroke positions on the touchscreen. As pointed
out by [23], randomizing the keyboards is the eﬀective at the
cost of the user experience since the user needs to ﬁnd every
key on a random keyboard layout for every key typing.
A more practical defense strategy is preventing the collec-
tion of CSI data. For example, the user refuses to connect
to free public WiFi or pays attention to the deployed WiFi
devices nearby. Note that, to have the successful CSI based
keystroke inference, the sender WiFi device should be de-
ployed close enough to the victim (e.g., 30 cm as shown in
[2]). To prevent the accurate CSI data collection, another
strategy is obfuscating the CSI data by adding some ran-
domized noises to CSI data.
In particular, the user can
intentionally change his typing gestures or clicking patterns,
since ﬁnger coverage and click pattern are considered as two
major factors that aﬀect CSI value for the keystroke. Fur-
ther, since CSI reﬂects the change of multi-path propagation
of WiFi signals, the users can take some actions to introduce
the unexpected interferences to the CSI data. For example,
the randomized human behaviors (e.g., human mobility) or
wireless signals will reduce the successful chance of the ad-
versary. Lastly, for the proposed ICMP based CSI collection
approach, CSI based typing inference requires collecting CSI
data with a high frequency. Therefore, detecting and pre-
venting a high-frequency ICMP ping represent a practical
and ease of use countermeasure.
8. RELATED WORK
In this section, we review two domains of prior works that
are tightly related to WindTalker.
8.1 Public free Wi-Fi with malicious behav-
iors
Free Wi-Fi services provided by public hotspots are at-
tractive to users in a mobile environment when their mobile
devices have limited Cellular connection. Existing works
[5, 6, 11, 21] have demonstrated it is feasible to deploy
a malicious Wi-Fi hotspot in a public area. For exam-
ple, an iPhone can turn itself into a Wi-Fi hotspot. If the
iPhone user changes the session ID to “Starbucks Free Wi-
Fi”, other people may connect their phones to the iPhone
while wrongly believe they are using free WiFi services from
a nearby Starbucks.
In our considered scenarios, attackers may make use of
user’s trusts on pubic WiFi and lure the the users to con-
nect their devices to a fake access point. Then, the attacker
eavesdrops the WiFi traﬃc to identify the sensitive win-
dows and selectively analyzes the CSI information to infer
the keystroke information.
8.2 Keystroke Inference methods
Prior keystroke inference methods have been developed
based on the information from various sensors and commu-
nication channels, such as motion, camera, acoustic signals,
and WiFi signals.
Motion: Owusu et al.
[16] presented an accelerometer-
based keystroke inference method, which aims to recover
six-character passwords on smartphones. Later, Liu et al.
[13] applied a similar idea to the smartwatch scenario. Their
objective is to track user’s hand movement over the keyboard
using the accelerometer readings from the smartwatch, and
the keystroke inference achieves 65% recognition accuracy.
[25] presented a context-
free and geometry-based keystroke inference. They use the
microphones at a smartphone to record keystrokes’ acoustic
emanations. Liu et al.
[12] further proposed a keystroke
snooping system by exploiting the audio hardware to dis-
tinguish mm-level position diﬀerence. Their experiments
showed the system can recover 94% of keystrokes.
Acoustic signals: Zhu et al.
Camera based: Yue et al.
[23] introduces a camera-
based keystroke inference using Google Glass or oﬀ-the-shelf
webcam. This method can achieve a per-input success rate
of over 90%. Shukla et al. [18] also presented a video-based
attack relies on the spatio-temporal dynamics of the hands
during typing. The paper can breaks an average of over
50% of the PINs. Sun et al. [19] use camera to record tablet
backside motion and infer the victim’s typing content.
WiFi signal based: Using Wi-Fi signals to infer the
keystroke recently draws a large research attention because
it oﬀers device-free and non-invasion advantages. The chan-
nel state information (CSI) are obtained from the commer-
cial Wi-Fi network interface cards. Many research works
have demonstrated such ﬁne-grained information can be very
eﬀective in detecting the ambient physical movement be-
cause it well captures the reﬂected multi-path WiFi signals.
1078Liu et al. [2] proposed a keystroke inference systems called
WiKey, which uses the CSI waveform pattern generated by
ﬁnger’s unique motion to distinguish keystrokes on a exter-
nal keyboard. Compared with our work, WiKey works on
the OKI keystroke inference model and it can not recognize
the sensitive input windows. Zhang et al.
[24] also pre-
sented WiPass, which can work in mobile device to detect
the graphical unlock passwords.
9. CONCLUSION AND FUTURE WORK
In this paper, we have designed and evaluated a novel
side-channel attack based on CSI which can infer victim’s
input on smartphone via WiFi signals. Our evaluation shows
that our attack can work well in recognizing the victim’s
password on smart phones. Compared with the previous
side channel based keystroke inference work, WindTalker
neither deploys external devices close to the target device
nor compromises the target device. It can even be launched
behind the victim without the requirement of visually seeing
the smart phone user’s input process, backside motion, or
installing any malware on the tablet. Due to the limitation
of Intel 5300 NIC, the current WindTalker cannot work for
iOS smartphones, which will be a part of our future work.
We will investigate how to further improve the inference
accuracy of WindTalker under diﬀerent environments.
Acknowledgments
This work is supported by National Science Foundation of
China (No. 61272444, U1401253, U1405251, 61411146001)
and National Science Foundation (No. 1527144, No. 1553304,
No. 1618893).
10. REFERENCES
[1] IEEE Std. 802.11n-2009: Enhancements for higher
throughput. http://www.ieee802.org, 2009.
[2] Ali, K., Liu, A. X., Wang, W., and Shahzad, M.
Keystroke recognition using wiﬁ signals. In Proceedings of
the 21st Annual International Conference on Mobile
Computing and Networking (2015), ACM, pp. 90–102.
[3] Balzarotti, D., Cova, M., and Vigna, G. Clearshot:
Eavesdropping on keyboard input from video. In Security
and Privacy, 2008. SP 2008. IEEE Symposium on (2008),
IEEE, pp. 170–183.
[4] Benko, H., Wilson, A. D., and Baudisch, P. Precise
selection techniques for multi-touch screens. In Proceedings
of the SIGCHI conference on Human Factors in computing
systems (2006), ACM, pp. 1263–1272.
[5] Cheng, N., Wang, X., Cheng, W., Mohapatra, P., and
Seneviratne, A. Characterizing privacy leakage of public
wiﬁ networks for users on travel. In INFOCOM, 2013
Proceedings IEEE (2013), IEEE, pp. 2769–2777.
[6] Fan, Y., Jiang, Y., Zhu, H., and Shen, X. S. An eﬃcient
privacy-preserving scheme against traﬃc analysis attacks in
network coding. In INFOCOM 2009, IEEE (2009), IEEE,
pp. 2213–2221.
[7] Forlines, C., Wigdor, D., Shen, C., and Balakrishnan,
R. Direct-touch vs. mouse input for tabletop displays. In
Proceedings of the SIGCHI conference on Human factors
in computing systems (2007), ACM, pp. 647–656.
[8] Halperin, D., Hu, W., Sheth, A., and Wetherall, D.
Tool release: gathering 802.11 n traces with channel state
information. ACM SIGCOMM Computer Communication
Review 41, 1 (2011), 53–53.
[9] Hamed, K. H., and Rao, A. R. A modiﬁed mann-kendall
trend test for autocorrelated data. Journal of Hydrology
204, 1 (1998), 182–196.
[10] Holt, C. C. Forecasting seasonals and trends by
exponentially weighted moving averages. International
journal of forecasting 20, 1 (2004), 5–10.
[11] Konings, B., Bachmaier, C., Schaub, F., and Weber,
M. Device names in the wild: Investigating privacy risks of
zero conﬁguration networking. In Mobile Data Management
(MDM), 2013 IEEE 14th International Conference on
(2013), vol. 2, IEEE, pp. 51–56.
[12] Liu, J., Wang, Y., Kar, G., Chen, Y., Yang, J., and
Gruteser, M. Snooping keystrokes with mm-level audio
ranging on a single phone. In Proceedings of the 21st
Annual International Conference on Mobile Computing
and Networking (2015), ACM, pp. 142–154.
[13] Liu, X., Zhou, Z., Diao, W., Li, Z., and Zhang, K. When
good becomes evil: Keystroke inference with smartwatch.
In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security (2015), ACM,
pp. 1273–1285.
[14] Lozowski, E., Charlton, R., Nguyen, C., and Wilson,
J. The use of cumulative monthly mean temperature
anomalies in the analysis of local interannual climate
variability. Journal of Climate 2, 9 (1989), 1059–1068.
[15] Marquardt, P., Verma, A., Carter, H., and Traynor,
P. (sp) iphone: decoding vibrations from nearby keyboards
using mobile phone accelerometers. In Proceedings of the
18th ACM conference on Computer and communications
security (2011), ACM, pp. 551–562.
[16] Owusu, E., Han, J., Das, S., Perrig, A., and Zhang, J.
Accessory: password inference using accelerometers on
smartphones. In Proceedings of the Twelfth Workshop on
Mobile Computing Systems & Applications (2012), pp. 1–6.
[17] Sen, S., Lee, J., Kim, K.-H., and Congdon, P. Avoiding
multipath to revive inbuilding wiﬁ localization. In
Proceeding of the 11th annual international conference on
Mobile systems, applications, and services (2013), ACM,
pp. 249–262.
[18] Shukla, D., Kumar, R., Serwadda, A., and Phoha,
V. V. Beware, your hands reveal your secrets! In
Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (2014), ACM,
pp. 904–917.
[19] Sun, J., Jin, X., Chen, Y., Zhang, J., Zhang, R., and
Zhang, Y. Visible: Video-assisted keystroke inference from
tablet backside motion.
[20] Wang, F., Cao, X., Ren, X., and Irani, P. Detecting and
leveraging ﬁnger orientation for interaction with
direct-touch surfaces. In Proceedings of the 22nd annual
ACM symposium on User interface software and
technology (2009), ACM, pp. 23–32.
[21] Xia, N., Song, H. H., Liao, Y., Iliofotou, M., Nucci,
A., Zhang, Z.-L., and Kuzmanovic, A. Mosaic:
Quantifying privacy leakage in mobile networks. In ACM
SIGCOMM Computer Communication Review (2013),
vol. 43, ACM, pp. 279–290.
[22] Xie, Y., Li, Z., and Li, M. Precise power delay proﬁling
with commodity wiﬁ. In Proceedings of the 21st Annual
International Conference on Mobile Computing and
Networking (New York, NY, USA, 2015), MobiCom ’15,
ACM, pp. 53–64.
[23] Yue, Q., Ling, Z., Fu, X., Liu, B., Ren, K., and Zhao,
W. Blind recognition of touched keys on mobile devices. In
Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (2014), ACM,
pp. 1403–1414.
[24] Zhang, J., Zheng, X., Tang, Z., Xing, T., Chen, X.,
Fang, D., Li, R., Gong, X., and Chen, F. Privacy leakage
in mobile sensing: your unlock passwords can be leaked
through wireless hotspot functionality.
[25] Zhu, T., Ma, Q., Zhang, S., and Liu, Y. Context-free
attacks using keyboard acoustic emanations. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and
Communications Security (2014), ACM, pp. 453–464.
1079