### Volunteers and Free WiFi Access

Volunteers are required to connect to a free WiFi hotspot for the purposes of this experiment. The setup includes 1076 antennas and an Intel 5300 NIC, which is configured to be hidden from devices within a 1-meter range.

### Sensitive Input Windows Recognition Module

- **Start Time**
- **End Time**

The module is designed to recognize sensitive input windows, as illustrated in Figure 13. The figure shows the original CSI sequence containing sensitive input points.

### Experimental Phases

The experiment involves three main phases:

1. **Online Training Phase:**
   - Volunteers are asked to input randomly generated numbers, similar to a Text Captcha. This phase collects the user's input number and corresponding CSI data for training.

2. **Normal Use Phase:**
   - Volunteers use their devices for regular online browsing or application usage.

3. **Mobile Payment Phase:**
   - During mobile payment transactions, users must enter a password. All online shopping and mobile payments are secured with HTTPS. The attacker's goal is to recover the mobile payment password.

### Operations of WindTalker

After connecting to the free WiFi hotspot, WindTalker uses an ICMP-based CSI Acquisition Module to collect CSI data at a rate of 800 packets per second. It records timestamps for every 100 CSI data points and simultaneously captures and records WiFi traffic packets using Wireshark. In the offline phase, WindTalker infers the userâ€™s mobile payment password from the collected data.

### Recognizing Sensitive Input Windows

WindTalker identifies sensitive input windows by collecting metadata (e.g., IP addresses) of targeted mobile payment applications. For example, Alipay routes its data to specific IP addresses, such as "110.75.xx.xx," which remain stable for one to two weeks. By analyzing traffic metadata, WindTalker determines the start and end times of sensitive input windows and then analyzes the corresponding CSI data.

### CSI-Based Password Inference

Figure 14(b) shows the original 12th subcarrier CSI data during the sensitive input window. After preprocessing, Figure 14(c) displays the first three principal components of the CSI data after PCA. In real-world experiments, besides entering the payment password, users may perform other actions like selecting a credit card. To handle this, WindTalker focuses on continuous keystrokes of a certain length, specifically 6-digit passwords for Alipay. After extraction and recognition, WindTalker lists possible password candidates based on probability. The top three candidates in one case were 773919, 773619, and 773916, with the actual password being 773919. The recovery success rates for different attempts are shown in Table 2.

### Discussions

#### Limitations

1. **Hardware Limitations:**
   - WindTalker uses an Intel 5300 NIC and Linux 802.11n CSI Tool. The system can crash when used with iPhones or some Android smartphones. However, it works well with a wide range of smartphones, including Xiaomi, Nexus, and Samsung phones. Future work will focus on improving compatibility.

2. **Fixed Typing Gesture:**
   - WindTalker currently requires the victim to type with a relatively fixed gesture and in a stable environment. Ad-hoc typing or device movement can affect performance. This issue is common in side-channel keystroke inference schemes and can be partially mitigated by profiling the victim or using relevant movement models.

3. **User-Specific Training:**
   - Classifiers trained on one user's data may not generalize well to others due to differences in finger coverage and clicking patterns. A large amount of training data can help, but even with minimal training, WindTalker achieves a 68.3% recovery rate.

#### Defending Strategies

1. **Randomize PIN Keypad Layouts:**
   - Randomizing the layout of the PIN keypad makes it difficult for attackers to infer typed PINs, though it can degrade user experience.

2. **Prevent CSI Data Collection:**
   - Users can avoid connecting to public WiFi or be cautious about nearby WiFi devices. Adding randomized noise to CSI data can also obfuscate it. Changing typing gestures or introducing unexpected interferences can reduce the success rate of attacks.

3. **Detect and Prevent High-Frequency ICMP Pings:**
   - Since high-frequency ICMP pings are required for CSI-based typing inference, detecting and preventing these pings is a practical countermeasure.

### Related Work

#### Public Free WiFi with Malicious Behaviors

Public hotspots can be attractive targets for malicious activities. Attackers can deploy fake access points and eavesdrop on WiFi traffic to identify sensitive windows and infer keystrokes.

#### Keystroke Inference Methods

- **Motion-Based:**
  - Accelerometer-based methods have been used to infer keystrokes on smartphones and smartwatches.
  
- **Acoustic Signals:**
  - Microphones can capture keystroke sounds, and systems like Liu et al.'s can distinguish mm-level position differences.

- **Camera-Based:**
  - Camera-based methods, such as those using Google Glass or webcams, can achieve high success rates in keystroke inference.

- **WiFi Signal-Based:**
  - Using WiFi signals to infer keystrokes is gaining attention due to its non-invasive nature. Systems like WiKey and WiPass use CSI waveforms to detect keystrokes and unlock patterns.

### Conclusion and Future Work

This paper presents WindTalker, a novel side-channel attack that infers user input on smartphones via WiFi signals. Compared to previous work, WindTalker does not require external devices or compromise the target device. Future work will focus on improving compatibility with iOS devices and enhancing inference accuracy in different environments.

### Acknowledgments

This work was supported by the National Science Foundation of China and the National Science Foundation.

### References

[References listed here as provided in the original text]