title:Bounded vector signatures and their applications
author:Lei Wei and
Scott E. Coull and
Michael K. Reiter
Bounded Vector Signatures and their Applications
Lei Wei
University of North Carolina
Chapel Hill, NC, USA
PI:EMAIL
Scott E. Coull
RedJack, LLC.
Silver Spring, MD, USA
PI:EMAIL
Michael K. Reiter
University of North Carolina
Chapel Hill, NC, USA
PI:EMAIL
ABSTRACT
Although malleability is undesirable in traditional digital
signatures, schemes with limited malleability properties en-
able interesting functionalities that may be impossible to
obtain otherwise (e.g., homomorphic signatures). In this pa-
per, we introduce a new malleable signature scheme called
bounded vector signatures. The proposed scheme allows a
user to sign a multi-dimensional vector of values, along with
a description of the context within which the vector should
be interpreted. The scheme includes a unique malleability
property, which we refer to as the stretch property, that al-
lows the components of the signed vector to be increased
up to a pre-deﬁned limit without access to the signing key.
Decreasing these values, however, remains computationally
infeasible. We prove the security of our construction under
the strong RSA and decisional Diﬃe-Hellman assumptions
in the random oracle model. Finally, we underscore the util-
ity of bounded vector signatures by discussing their use in
distributed systems security applications.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption; K.6.5 [Management of Com-
puting and Information Systems]: Security and Protec-
tion
General Terms
Security
Keywords
Algebraic Signatures, Malleable Signatures, Vectors
1.
INTRODUCTION
Typically, digital signature schemes must remain secure
against existential forgeries to achieve their purpose of ver-
ifying the authenticity of data. Therefore, it would seem as
though any malleability allowed by a signature scheme would
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
be strictly harmful. However, several malleable signature
schemes, including homomorphic signatures, have been pro-
posed to achieve functionalities by allowing arbitrary parties
to perform a limited set of operations to alter the signed data
in logical ways. Transitive signatures [32, 6, 33, 23], for in-
stance, allow a user with signatures on graph edges (x, y)
and (y, z) to produce a third signature on the transitive clo-
sure, (x, z), without access to the signing key.
Here, we propose a new type of malleable signature, called
bounded vector signatures.
Intuitively, our scheme allows
a user to sign a vector of natural numbers, and includes
a unique malleability property that allows components of
these signed vectors to be increased, or stretched, up to a
pre-deﬁned bound without access to the signing key. Fur-
thermore, each vector is associated with an arbitrary string,
which we refer to as the context, that describes the way to
interpret the values within the signed vector. To capture
the security of our scheme, we deﬁne shrink unforgeability,
which captures the inability of a computationally bounded
adversary to decrease the value of any of the signed vector
components.
The malleability property of our bounded vector signature
scheme is particularly useful in multiparty settings, which
are the primary focus of this paper.
In such a setting, n
signers may produce partial signatures on vectors, and any
t ≤ n of those partial signatures can be eﬃciently combined
to form a full signature on a vector representing all signers.
In a typical, non-malleable signature scheme, these partially
signed vectors would have to be exactly the same for the
combiner to create a full signature. The malleability prop-
erty of our bounded vector signatures, however, allows the
signers to sign diﬀerent vectors. In particular, the combiner
receives t partial signatures on diﬀerent vectors, applies the
stretch operation to those signed vectors until all of them
are the same, and then combines them as before.
This form of malleability leads to very eﬃcient solutions to
many problems that arise in the area of distributed systems
security.
In these distributed systems problems, informa-
tion must be securely aggregated from multiple (potentially
untrusted) parties while simultaneously limiting communi-
cations overhead and interaction among the parties. To that
end, we show how our bounded vector signatures can be used
to sign a number of interesting data structures commonly
used in distributed environments, such as sets and inter-
vals, with just a small constant number of elements (e.g.,
at most four) of the underlying multiplicative group. More-
over, for each of these data structures we describe how the
malleability of our bounded vector signatures enables us to
non-interactively compute a full signature on exactly the
intersection or union of given partially signed sets or inter-
vals. We also discuss the application of these methods to
distributed systems problems, including distributed cache
reconciliation in content delivery networks [19, 9, 35], fault
tolerant computation in sensor networks [31], and group key
management [34, 41].
Related Work Malleable signatures, which can include ho-
momorphic signature schemes and are sometimes referred to
as algebraic signatures, were ﬁrst discussed by Rivest during
a series of talks at Cambridge University. The concept was
later formalized by Johnson et al.
[26], who described ho-
momorphic signature schemes for redacted documents and
set operations. Since then, new homomorphic signature
schemes have been introduced, including transitive signa-
ture schemes on graphs [23, 6, 32, 33] and signatures for
network coding [8, 22, 1]. Additionally, Kiltz et al. [28] in-
troduced a malleable signature scheme that allows a user to
append a message to a signature without requiring a signa-
ture on the appended message itself. Our bounded vector
signatures, like the append-only signatures of Kiltz et al.,
do not require a speciﬁc homomorphic property of the sig-
nature and instead rely upon a limited form of malleability.
We note that the functionality allowed by our vector signa-
tures is orthogonal to that provided by Kiltz et al.
The limited malleability allowed by our bounded vector
signatures is achieved through an RSA-like signature con-
struction, where the components of the vector being signed
are encoded in the exponent of the signature, rather than
the base. The ﬁrst such construction was proposed by De
Jonge and Chaum [16] in a study of several RSA signa-
ture variations. Gennaro et al. [21], and Hohenberger and
Waters [25] have since used the construction, along with
division-intractable and chameleon hashes, to build hash-
and-sign signatures without random oracles. Perhaps the
most closely related construction to our own is the dynamic
accumulator scheme of Camenisch and Lysyanskaya [10],
where identities are encoded as random primes in the ex-
ponent of the accumulator. None of these constructions,
however, were developed with the goal of malleability in the
form we pursue here, nor were they developed for use in
multiparty settings typical of distributed systems problems.
2. PRELIMINARIES
To begin, we introduce bounded vector signatures, and
deﬁne a new notion of unforgeability, called shrink unforge-
ability. Throughout the paper, we denote a d-dimensional
vector of natural numbers as v =, where the
kth component is denoted as v[k]. Scalar values are denoted
by non-bolded variables. Furthermore, we use the symbol
$← to indicate sampling uniformly at random from a set of
values, and the symbol ← to indicate the output of an algo-
rithm.
2.1 Bounded Vector Signatures
A bounded vector signature scheme is a malleable signa-
ture on d-dimensional vectors wherein the components of
the signed vector may be altered, within a predetermined
bound, without access to the associated signing key. Specif-
ically, we consider a signature on a pair (v, c), where v ∈ Nd
is a d-dimensional vector in the natural numbers and c is a
context (i.e., a text description) within which the vector is
interpreted. As an example, v may represent distances in
d independent dimensions and c may describe the starting
point of the vector within that space. Furthermore, bounded
vector signatures have a unique property that allows arbi-
trary parties to increase the values of any component of the
signed vector up to a predeﬁned limit without access to the
signing key. For the remainder of this paper, we refer to this
property as the stretch property.
Since we are most interested in distributed applications,
we present a multiparty version of our scheme. The mul-
tiparty bounded vector signature scheme follows the typi-
cal threshold signature paradigm wherein n signers, which
we denote as P1, . . . , Pn, may produce partial signatures on
vector-context pairs. Any subset of t distinct partial sig-
natures can then be combined to produce a full signature
that can be veriﬁed using a single veriﬁcation key. Both the
partial and full signatures in the multiparty version of our
bounded vector signature scheme inherit the stretch prop-
erty. Therefore, it is possible to combine partial signatures
on diﬀerent vectors by stretching them until they are iden-
tical, as long as their contexts are the same. In particular,
the resultant vector in the full signature will be equal to (at
least) the component-wise maximum from among all t vec-
tor signatures. For ease of exposition, we present the formal
description of our scheme and its instantiation in a multi-
party setting, and note that the single signer case may be
trivially instantiated by setting n = t = 1.
More formally, a bounded vector signature scheme is de-
ﬁned by a tuple of algorithms BVS = (KeyGen, Sign, Stretch,
Combine, Verify) run by n signers P1, . . . , Pn. The input-
output speciﬁcations of these algorithms are as follows:
KeyGen(1κ, t, n, ˆv): The key generation function takes as
input a security parameter 1κ, the threshold number t of
partial signatures necessary to form a ﬁnal signature, the
number of signers n, and a d-dimensional vector ˆv containing
the maximum value (i.e., bound) for each dimension. The
algorithm outputs signing keys sk 1, . . . , sk n for each of the
signers P1, . . . , Pn, and a single veriﬁcation key pk used to
verify the ﬁnal signatures.
Sign(sk i, (v, c)): The signing algorithm takes in a signing
key sk i, along with a vector-context pair (v, c), where 0 ≤
v[k] ≤ ˆv[k] for each dimension k. The context describes how
the veriﬁer should interpret the signed value, such as the
starting point of the vector. The signing algorithm outputs
a partial signature on vector v associated with context c for
signer Pi, which we denote as σi.
Stretch((σ, v, c), k, a): The stretch algorithm takes a par-
tial or full signature σ on vector-context pair (v, c) and an
amount a to increment the value of the kth component. The
output of the algorithm is a new (partial or full) signature
σ(cid:48) on (v(cid:48), c), where v(cid:48)[k] = min(v[k] + a, ˆv[k]).
Combine((σi1 , vi1 , ci1 ), . . . , (σit , vit , cit )): The combine al-
gorithm takes as input a set of t partial signatures on vec-
tor context pairs (vij , cij ) from distinct signers. These sig-
natures must be associated with the same context c (i.e.,
cij = c), but may sign t diﬀerent vectors. The algorithm
outputs a full signature σ on the component-wise maximum
values among the input signatures and their associated con-
text (i.e., (v(cid:48), c)), where v(cid:48)[k] = max(vi1 [k], . . . , vit [k]) for
all dimensions k.
Verify(pk , σ, (v(cid:48), c(cid:48))): The verify algorithm takes in the veri-
ﬁcation key pk , a full signature σ, and a vector-context pair
(v(cid:48), c(cid:48)) that is to be veriﬁed as being signed. If the signa-
ture is valid for the vector-context pair, then the algorithm
outputs 1. Otherwise, the algorithm outputs 0.
2.2 Security for Bounded Vector Signatures
Due to the malleable nature of our proposed signature
scheme, the traditional deﬁnition of existential unforgeabil-
ity under chosen message attack does not appropriately cap-
ture its security. Instead, we propose the notion of shrink
unforgeability under chosen message attack. This deﬁnition
captures the ability of untrusted parties to increase, but not
decrease, the values of any component of the signed vector
without access to the signing key. In the multiparty setting,
this restriction translates to a limitation on the values within
each component of the fully signed vector output from the
Combine procedure. Speciﬁcally, the adversary should not
be able to produce a full signature on a vector where the
value in the kth dimension is less than the tth smallest value
in that dimension from among all partial signatures given
as input to the Combine algorithm. The intuition here is
simply that the adversary would have to decrease at least
one value in order to create a full signature on a vector con-
taining values less than the tth smallest in each dimension,
which is disallowed by shrink unforgeability. This security
notion is formalized as follows.
Definition 1
(Shrink Unforgeability). Let BVS be
a bounded vector signature scheme, and let A be an algo-
rithm with oracle access to n signing oracles representing the
signers P1, . . . , Pn. Each query (v, c) to oracle Oraclesk i re-
turns Sign(sk i, (v, c)). For any context c and dimension k,
n[k] denote the minimum values queried by A
let vc
with context c to the n oracles, listed in nondecreasing or-
der. If A made queries on context c to only s < n oracles,
then we let vc
n[k] = ˆv[k] + 1. The experi-
ment for shrink unforgeability under chosen message attack
is then deﬁned as follows:
s+1[k] = ··· = vc
1[k], . . . , vc
Experiment ExpSU-CMA
BVS
(A):
(pk , sk 1, . . . , sk n) ← KeyGen(1κ, t, n, ˆv)
(v(cid:48), c(cid:48), σ(cid:48)) ← AOraclesk1 ,...,Oraclesk n (pk )
Return 1 if Verify(pk , σ(cid:48), (v(cid:48), c(cid:48))) = 1 and either:
(1) A queried (∗, c(cid:48)) to less than t signing oracles, or
(2) A queried (∗, c(cid:48)) to at least t signing oracles and
for some dimension k, v(cid:48)[k] < vc(cid:48)
t [k].
(A) = Prˆ ExpSU-CMA
(A) = 1˜, and deﬁne
BVS
Let AdvSU-CMA
(A) where the maximum
AdvSU-CMA
is taken over all adversaries A running in time at most T .