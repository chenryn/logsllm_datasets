## Page 197
### 9.1 使用RabbitMQ REST API 能做什么

RabbitMQ 的 REST API 是完全 REST 化的，这意味着所有操作的项目名称都包含在 URL 中。例如，如果你想查看虚拟主机 `oak` 下名为 `branches` 的队列的数据统计，可以构造如下 URL 并以 HTTP GET 请求的方式发送给服务器：
```
http://localhost:55672/api/queues/oak/branches
```

使用 cURL 发送请求时，会看到如下响应：
```sh
$ curl -i -u guest:guest http://localhost:55672/api/queues/oak/branches
HTTP/1.1 200 OK
Server: MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date: Tue, 05 Jul 2011 22:55:25 GMT
Content-Type: application/json
Content-Length: 739
Cache-Control: no-cache

{
  "memory": 9136,
  "messages": 0,
  "consumer_details": [],
  "idle_since": "2011-7-5 16:55:1",
  "exclusive_consumer_pid": "",
  "exclusive_consumer_tag": "",
  "messages_ready": 0,
  "backing_queue_status": {
    "ql": 0,
    "q2": 0
  }
}
```

**注意**：cURL 是一个命令行工具，允许你在命令行上发送和接收 HTTP 请求。大多数 Linux/UNIX 发行版中都预装了 cURL，也可以从 [http://curl.haxx.se/download.html](http://curl.haxx.se/download.html) 下载。

除了简单的 HTTP 头信息外，响应内容是 JSON 格式的。JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，常用于替代 XML 来编码数据。JSON 允许你使用编程语言能够理解的结构（如哈希表、数组、字符串和整数）来编码数据。如果你熟悉 JavaScript，可能会发现该 API 返回的是哈希表格式的队列数据。例如，哈希表中的 `memory` 字段表示队列当前消耗的内存大小（以字节为单位）。

使用 Management API 时，每次调用要么返回空的内容（创建或删除条目的动作），要么返回一个 JSON 格式的哈希表，包含你请求的数据（列表或展示条目的动作）。

对于本章示例，假设 RabbitMQ 运行在 localhost 上，并且如果没有修改 Management 插件，默认监听端口是 55672。

## Page 198
### 9.1 继续探讨 RabbitMQ REST API

与 API 返回的数据同样重要的是发起请求的 HTTP 动作。此处使用的是 GET 请求。RabbitMQ API 将 GET 解释为“给我展示位于 /api/queues/oak/branches 的数据”。其他常用的 HTTP 动作包括 POST、PUT 和 DELETE。POST 和 PUT 用于创建条目，而 DELETE 用于删除条目。POST 和 PUT 不可互换使用。某些 API 调用需要 POST 来创建条目，而另一些则使用 PUT（查阅本节末尾的参考链接，了解何时使用 PUT 和 POST）。

假设 `branches` 队列尚不存在，你想通过 API 创建它。可以通过将动作更改为 PUT 并添加 JSON 哈希表到正文中来实现：
```sh
$ curl -i -u guest:guest -H "Content-Type: application/json" \
  -d '{"auto_delete": false, "durable": false}' \
  http://localhost:55672/api/queues/oak/branches
HTTP/1.1 204 No Content
Server: MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date: Tue, 05 Jul 2011 23:24:46 GMT
Content-Type: application/json
Content-Length: 0
```

在这个请求中，不仅将动作更改为 PUT，还添加了 JSON 哈希表 `{"auto_delete": false, "durable": false}` 到正文中，并设置了 `Content-Type` 头，使 API 知道正文中的数据是 JSON 编码的。请求正文告诉 API 关闭 `auto_delete` 和 `durable` 标志。这两个参数与之前本书中 Python 示例创建队列时指定的标志相同。事实上，API 在创建队列时也需要这些标志。如果将正文留空，会收到 API 错误。无论使用 API 创建队列还是设置权限，每当使用 PUT 或 POST 动作时，都需要将函数参数编码为 JSON 格式的哈希表并添加到请求正文中。

现在你已经能够创建队列并查看它们的数据统计，但还能做更多事情。以下是一些 API 能做的其他事情：

- 查看当前连接列表和详情：`/api/connections`
- 下载或上传完整的 RabbitMQ 服务器配置，包括队列、交换器和绑定：`/api/all-configuration`
- 列出集群中的所有节点及其数据统计：`/api/nodes`
- 查看或创建虚拟主机：`/api/vhosts/`
- 为用户设置权限：`/api/permissions/`

Management API 及其插件总是在不断更新增强，这里提到的只是众多功能中的一小部分。你可以通过浏览器访问 `http://localhost:55672/api` 查看当前可用的完整 API 列表和支持的 HTTP 动作。接下来，让我们创建一些凭证，以便你能使用 API 编写脚本！

## Page 199
### 9.2 对客户端授权访问

为了使用 API，你需要为客户端授权访问。这类似于通过 AMQP 访问 RabbitMQ 的应用。例如，如果你有一个监控脚本仅用于检查队列数据统计，可以创建一个新的 RabbitMQ 用户，并将其在虚拟主机上的权限设置为：

- Read: `.*`
- Write: (empty)
- Config: (empty)

这样设置将允许该脚本（以及知道该脚本的 RabbitMQ 用户名和密码的人）只能对队列进行监控，而不能发布消息或更改配置。

如何为 API 访问创建用户？这很简单：通过 `rabbitmqctl` 创建用户并将 `admin` 属性设置为 `true`。让我们创建一个名为 `monitor` 的用户，脚本可以使用该用户来监控默认（`/`）虚拟主机的数据统计（但不能写入或更改任何东西）。在 RabbitMQ 目录下运行以下命令：
```sh
$ sbin/rabbitmqctl add_user monitor monitorMe
Creating user "monitor" ...
...done.
$ sbin/rabbitmqctl set_admin monitor
Setting administrative status for user "monitor" ...
...done.
$ sbin/rabbitmqctl set_permissions -p / monitor "" "" ".*"
Setting permissions for user "monitor" in vhost "/".
...done.
```

`set_admin` 命令至关重要。如果没有为用户设置 `admin` 标记，无论其权限如何设置，都无法访问 API。最后一条命令赋予 `monitor` 用户在默认（`/`）虚拟主机下的完整读权限，但没有配置或写权限。准备好 `monitor` 用户后，你可以开始编写第一个 API 脚本来查看队列数据统计。

## Page 200
### 9.3 访问数据统计

在日常工作中，经常需要反复查看特定队列上有多少条消息。有时是为了调试新应用程序，有时则是为了监控生产环境中等待消费的消息和投递给消费者但尚未确认的消息之间的比率（后者对于发现导致消费者崩溃的原因非常有用）。虽然你可以使用 `rabbitmqctl` 列出队列的消息总数，但这有两个主要缺点：

1. `rabbitmqctl` 只能在安装了 Erlang 并且与 RabbitMQ 服务器具有相同 Erlang cookie 的计算机上运行。
2. `rabbitmqctl` 只会显示队列的消息总数，不会区分等待确认的已投递消息和等待消费的消息。

Rabbit Management API 是解决这个问题的完美方案。你将使用 Python 内置的 `httplib` 和 `json` 库与 RabbitMQ 通信，并对请求和响应进行编码/解码。由于你希望从命令行运行数据统计查询脚本，因此需要解析命令行参数，如下所示。

#### 清单 9.1 queue_stats.py — 获取初始设定
```python
import sys, json, httplib, urllib, base64

if len(sys.argv) < 5:
    print("Usage: %s <host> <port> <user> <password> <vhost> <queue>" % sys.argv[0])
    sys.exit(1)

host, port, user, password, vhost, queue = sys.argv[1:7]
```

这段脚本首先建立了到 API 服务器的 HTTP 连接。此时，服务器等待 API 请求和授权凭证。由于 RabbitMQ API 使用 HTTP Basic 认证，你需要将用户名和密码封装为 `username:password` 格式并进行 Base64 编码。然后，创建一个字典来包含 HTTP 头。其中之一是 `Authorization` 头，它包含了基于 Base64 编码的凭证，添加在 ASCII 字符串 `Basic` 之后。另一个重要的头是 `Content-Type`，因为它让 API 服务器知道请求正文（如果有）是以 JSON 格式编码的。由于这里只发送 GET 请求，请求正文总是空的。但设置 `Content-Type` 是一个好习惯，以免在需要的时候（如 PUT 或 POST 请求）忘记。最后，你将请求发送到 API 服务器并接收响应。如果在完成请求之前发生问题，API 服务器会将 HTTP 响应代码设置为 4xx 或 5xx。任何高于 299 的响应代码都是非正常情况，所以检测代码时应小于 299。如果发生错误，需要将错误报告给用户并退出程序；否则就解析响应并将队列详情展现给用户，如下所示。

#### 清单 9.2 queue_stats.py — 构造请求
```python
conn = httplib.HTTPConnection(host, port)
auth = base64.b64encode(f"{user}:{password}".encode()).decode()
headers = {
    "Authorization": f"Basic {auth}",
    "Content-Type": "application/json"
}

url = f"/api/queues/{urllib.parse.quote(vhost, safe='')}/{queue}"
conn.request("GET", url, headers=headers)
response = conn.getresponse()

if response.status >= 299:
    print(f"Error executing API call ({response.status}): {response.read()}")
    sys.exit(2)

payload = json.loads(response.read())
print(f"\tMessages:")
print(f"\t\tUnack'd: {payload['messages_unacknowledged']}")
print(f"\t\tTotal: {payload['messages']}")
sys.exit(0)
```

API 服务器总是以 JSON 哈希表的格式返回信息，因此第一步要做的是将响应内容用 JSON 进行解码。这一步将 JSON 编码的哈希表转换成编程语言支持的哈希表类型。对于 Python 来说，这意味着响应被转换成一个 Python 字典。响应被编码为 JSON 格式的美妙之处在于一旦解码完成，你就可以像访问其他字典一样访问 `payload` 中的字段。例如，获取队列占用的内存量。

那么，程序运行起来是什么样子呢？
```sh
$ python queue_stats.py localhost:55672 guest guest / test
'test' Queue Stats
Memory Used (bytes): 9104
Consumer Count: 3
Messages:
Unack'd: 3
Ready: 4
Total: 7
```

从输出可以看到，默认（`/`）虚拟主机内的 `test` 队列消耗了 9104 字节的内存，拥有三个消费者，并且包含了总共七条消息。除了这七条消息之外，你还能看到其中的三条消息已经发送给了消费者，并等待确认，同时另外的四条正等待发送给下一个消费者。只用了不到 60 行的代码，并且可以从基础设施中的任何地方进行访问！这就是 Rabbit Management API 的强大之处。它使得你可以在任何能够访问网络的地方监控并控制 RabbitMQ。到目前为止我们所做的是读取数据统计，这对于控制和管理 RabbitMQ 非常有用。