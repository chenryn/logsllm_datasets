### Reduction Rate and Eviction Set Analysis

**Reduction Rate:**
- **Definition:** The reduction rate is defined as the relative frequency of our reduction algorithm successfully reducing randomly selected sets of a fixed size to a minimal eviction set.
- **Success Criteria:** A reduction is deemed successful if the elements it returns are congruent, meaning they coincide on both the set bits and the slice bits. This verification relies on the reverse-engineered slice function for Intel CPUs [19].

**Theoretical Predictions:**
- With perfect tests and correct algorithms, both the eviction rate and the reduction rate should align with the theoretical predictions provided in Section III. Our analysis focuses on deviations from these predictions.

### Experimental Results

**Specific Address x:**
- **Skylake (Figures 5 and 6a):** 
  - **Eviction and Reduction Rates:** The rates for a specific address \( x \) targeting cache set zero are compared to our binomial model. Each point represents the average of 1000 reductions for sets of \( N \) randomly chosen addresses.
  - **Findings:** Under idealized conditions, where we mitigate the effects of TLBs, complex replacement policies, prefetching, and jitter, the eviction and reduction rates closely match the theoretical predictions for small pages. For huge pages, however, the rates remain below the theoretical prediction, attributed to the non-uniform selection of physical pages from a pre-allocated pool.

- **Haswell (Figure 7a):**
  - **Eviction and Reduction Rates:** Similar to Skylake, the rates for a specific address \( x \) are compared to the binomial model.
  - **Findings:** The rates decrease significantly, likely due to the mismatch between the cache replacement policy and our models, and the influence of accesses to other cache sets.

**Arbitrary Addresses:**
- **Skylake (Figure 6b) and Haswell (Figure 7b):**
  - **Eviction and Reduction Rates:** The rates for arbitrary addresses are compared to our multinomial model.
  - **Findings:** The rates show significant deviations, particularly due to the impact of the cache replacement policies and the influence of accesses to other cache sets.

### Impact of Cache Replacement Policies and TLB Thrashing

- **Cache Replacement Policies:**
  - **Effect:** The eviction and reduction rates decrease significantly on Haswell and Skylake when targeting cache sets different from zero. This is due to the replacement policy not matching our models and the influence of accesses to other cache sets.
  - **Evidence:** Further evidence of this effect is provided in Section VI.

- **TLB Thrashing:**
  - **Effect:** Virtual memory translations are more frequent with small pages than with huge pages, leading to false positives in the eviction rate, especially for large sets. The reduction rate, however, declines due to these false positives.
  - **Observations:** In Figure 5, the reduction rate on small pages declines for \( N > 1500 \), coinciding with the TLB capacity of Skylake (1536 entries). Similarly, in Figure 7b, the reduction rate declines after \( N > 1000 \) for Haswell (TLB capacity of 1024 entries).

### Performance Evaluation

**Reduction Algorithm Performance:**
- **Comparison:** We evaluate the performance of our novel reduction algorithm against the baseline from the literature by measuring the average time required to reduce eviction sets of different sizes to their minimal core.
- **Idealized Conditions:** We first focus on idealized conditions that closely match the assumptions of the theoretical analysis in Section IV.

**Initial Eviction Set Effort:**
- **Context:** To contextualize the performance of the reduction, we also evaluate the effort required to find an initial eviction set. We consider attackers with different capabilities to control the set index bits, based on huge pages (\(\gamma = 10\)), 4 KB pages (\(\gamma = 6\)), and no control over the set index bits (\(\gamma = 0\)).

**Experimental Results:**
- **Skylake (Figure 8):** 
  - **Focus:** We focus on cache set zero to mitigate the effect of the replacement policy and use techniques described in Section V-A.2 to mitigate the influence of TLBs and prefetching.
  - **Data Points:** Each data point is based on the average execution time of 10 successful reductions. The sizes of the initial sets (x-axis) are chosen to depict the range where finding an initial eviction set does not require picking too many candidate sets.
  - **Observations:**
    - The orange curve shows the quadratic growth of the naive reduction's execution time, while the blue curve shows the linear growth of our novel algorithm.
    - For large set sizes, our novel reduction outperforms the quadratic baseline, with a performance improvement of a factor of 10 for sets of size 3000.
    - For small set sizes, the practical advantage is less relevant, but the number of repetitions required to find a real eviction set grows, as illustrated by the green bars.

**Optimal Initial Set Size:**
- **Evaluation:** We rely on an expression for the overall number of memory accesses required to find a minimal eviction set, which is the sum of the expected number of memory accesses for finding an eviction set and the memory accesses for the respective reductions.
- **Table I:**
  - **Comparison:** Table I compares the linear and quadratic reductions on sets of optimal size for three different attackers: with huge pages, with 4KB pages, and in the limit.
  - **Observations:**
    - For huge pages, computing eviction sets is cheap, and the optimal set sizes and execution times are provided.

By systematically analyzing the reduction and eviction rates, we provide a comprehensive evaluation of the performance and practical implications of our novel reduction algorithm.