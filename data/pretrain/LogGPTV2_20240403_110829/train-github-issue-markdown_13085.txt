### Suggestion: Introduce Generic Parameter Overloads in TypeScript

This suggestion, originally proposed on CodePlex, aims to enable the use of generic parameter overloads in TypeScript. This feature would allow for more flexible and type-safe code without breaking existing non-generic consumer code.

#### Proposed Implementation

Consider the following example using Backbone.js:

```typescript
declare module Backbone {
    class Model {}
    class Events {}
    class ViewOptions {}
    class Collection {}

    // Generic parameter overload
    class View<TModel extends Model = Model> extends Events {
        constructor(options?: ViewOptions);
        model: TModel;
        collection: Collection;
    }
}

// Existing non-generic consumer code remains unchanged
class MyView extends Backbone.View {
}

const myView = new MyView();
const model = myView.model; // model is of type Backbone.Model

// Gradually introducing generic parameters to Views
class DerivedModel extends Backbone.Model {}

const myView2 = new Backbone.View<DerivedModel>();
const model2 = myView2.model; // model2 is of type DerivedModel
```

#### Importance and Benefits

1. **Backward Compatibility**: This approach allows developers to introduce generics into their library declarations without breaking large amounts of existing code. Non-generic consumers can continue to use the library as before.
2. **Type Safety**: By using generics, developers can ensure that the types are correctly managed, leading to fewer runtime errors and more maintainable code.
3. **Gradual Adoption**: Developers can gradually introduce generic parameters to their views and other components, making it easier to transition to a more type-safe codebase.

#### Comparison with C#

This feature is similar to how generics are used in C#. It aligns well with TypeScript's design principles, as it does not alter the resulting JavaScript code. Instead, it works much like method overloads in TypeScript, providing a more flexible and type-safe way to handle different types.

#### Related Discussion

For more information and discussion, please refer to the related thread on the TypeScript CodePlex forum:
- [Discussion Link](https://typescript.codeplex.com/discussions/452741)

By implementing this feature, TypeScript can offer a more robust and flexible typing system, benefiting both library authors and consumers.