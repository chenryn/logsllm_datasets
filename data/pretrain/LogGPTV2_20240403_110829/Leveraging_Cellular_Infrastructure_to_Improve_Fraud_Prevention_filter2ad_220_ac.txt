can accurately prove the secrecy and equivalency of the
protocols by translating them to Horn clauses. Using this tool,
we can positively verify if the secrecy of the information
transmitted as deﬁned by the proposed protocol is preserved.
We present sample output from our evaluation of the reactive
protocol to provide additional insight into the process; how-
ever, both protocols provide the same guarantees.
354
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:39 UTC from IEEE Xplore.  Restrictions apply. 
CCVendorBankProvider1. Swipe2. Check5. Loc Resp6. Conﬁrm/Deny5. Loc. Resp.5. Loc Response4. Loc. Req3. Location?4. Loc. Req.CCVendorBankProvider2. Swipe2. Check1. Login4. Conﬁrm/Deny1. Login1. Login3. Approval3. Approval3. Approval1.
2.
3.
4.
5.
6.
C → V : CC
V → B : (cid:104)CC, T(cid:105)kB,V
B → P : (cid:104)C,(cid:104)T(cid:105)kB,C(cid:105)kB,P
P → C : (cid:104)LC(cid:105)kC,P ,(cid:104)T(cid:105)kB,C
C → B : (cid:104)R, LC, HM ACkB,C (T|LC)(cid:105)kB,C
B → V : (cid:104)Approved or Declined ,
T ransactionID(cid:105)kB,V
B, C, P, V
: Bank, Client, Provider, Vendor
CC : Credit Card
HM ACkA (R|S)
: HMAC with key kA on R and S
kA,B : Secret key between A and B
LA : Location from A’s perspective
SIGk ¯A (M )
: Digital Signature of M
using A’s private key
R : Response (Approval, LP ,
(cid:104)S(cid:105)k
T
SIGk ¯P (LP ), LA, T )
: S encrypted with key k
: Transaction (amount, timestamp,
vendor location, id)
Fig. 5. Reactive Protocol and Variable Deﬁnition: The formal deﬁnition of the Reactive Protocol. We assume that there exists an encrypted channel (e.g.
IPsec connection) between the vendor and bank and the bank and the provider.
1.
2.
3.
4.
5.
6.
7.
C → B : LIC
B → C : LRC
C → V : (cid:104)CC(cid:105)kC,V
V → B : (cid:104)CC, T(cid:105)kB,V
B → C : (cid:104)LV , T(cid:105)kB,C
C → B : (cid:104)R, LC, HM ACkB,C (T|LC)(cid:105)kB,C
B → V : (cid:104)Approved or Declined , TransactionID(cid:105)kB,V
B, C, V
: Bank, Client, Vendor
LIA, LRA : Login Information, Login Response of A
CC : Credit Card
HM ACkA (R|S)
: HMAC with key kA on R and S
kA,B : Secret key between A and B
LA : Location from A’s perspective
R : Response (Approval, LP ,
SIGk ¯A (M )
(cid:104)S(cid:105)k
T
SIGk ¯P (LP ), LA, T )
: Digital Signature of M
using A’s private key
: S encrypted with key k
: Transaction (amount, timestamp,
vendor location, id)
Fig. 6. Proactive Protocol and Variable Deﬁnition: The formal deﬁnition of the Proactive Protocol. We assume that there exists an encrypted channel (e.g.
IPsec connection) between the vendor and bank and the bank and the provider.
The reactive protocol, which consists of six messages being
exchanged as deﬁned in Figure 5, requires 22 rules to be
deﬁned. An example is shown in Figure 7.
ProVerif operates on the assumption that an adversary is
able to intercept every message between the vendor, the bank,
the cellular provider, and the client. Here, an attacker captures
the message carrying the phone number (deﬁned as part of
T ) as it is transmitted between the bank B and provider
P in Step 3 of Figure 5. In particular, the above rule says
that if the attacker can understand the third message in this
protocol, it will be able to deduce {T EL}kBP . Assuming that
an adversary does not know the symmetric cryptographic key
used to encrypt the content in all of the messages, ProVerif
was able to conﬁrm that an adversary cannot derive any of the
information exchanged, which includes the credit card number,
mobile telephone number, location and transaction data.
VI. DEPLOYMENT
In this section, we discuss our observations from the imple-
mentation and testing of a prototype mobile application. We
have also developed software executing the necessary back
end functionality required of the bank, telecommunications
provider and the PoS terminal. After swiping a card through
a Posh MX3 card reader,
the PoS terminal forwards the
transaction information to the bank, which automatically ﬂags
all requests. Our provider emulator then transmits a text
message that is received by our test phone. We discuss the
details of the mobile application and provider emulator herein.
A. User Agent Platform
We selected the Android platform to serve as the ba-
sis of our mobile application [21]. We ran Android on an
OpenMoko FreeRunner GTA02 [31], a Linux 2.66 kernel
tri-band GSM/GPRS phone with 400MHz ARM4 processor,
128MB of SDRAM, and 256MB of integrated ﬂash memory
which was expanded with 512MB external microSD card.
The FreeRunner also provides GPS, Bluetooth and 802.11
b/g support. Each application in Android is run as its own
process within its own instance of the Dalvik virtual machine.
FrauVent required over 2,000 lines of code in Java and XML
using the Android SDK 1.1 release 2.
Running Android on an OpenMoko phone is challenging
in and of itself. In particular, Android is designed to run on
phones with an ARM5 processor, whereas our FreeRunner was
355
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:39 UTC from IEEE Xplore.  Restrictions apply. 
Rule 19:
attacker:encrypt((TEL_97,T_98),kBP_8[]) -> attacker:encrypt(TEL_97,kBP_8[])
(If the message encrypt((TEL_97,T_98),kBP_8[]) is received from the
attacker at input {9}, then the message encrypt(TEL_97,kBP_8[]) may be
sent to the attacker at output {12}.)
Fig. 7. One of 22 rules deﬁned in ProVerif.
equipped with an ARM4 chip. Through the assistance of the
open source community, a number of opcodes were added to
ARM4 to allow this device to understand ARM5 opcodes in
the pre-compiled libraries. Android also lacked on screen and
external keyboard interfaces at the beginning of this work.1
We eventually were able to ﬂash Koolu’s beta 7 version of
Android onto the device and gain support for basic cellular
capabilities necessary to implement FrauVent.
Using the standard Android SDK, FrauVent’s user interface
incorporates Google Map and SMS/MMS trigger functional-
ities. Once initialized, FrauVent deploys an SMS trigger to
capture all incoming text messages that are specially format-
ted. A text message is used for initial communication during
reactive mode in order to wake-up the device when the device
is in stand-by mode. This provides the application with a push
technology, enabling the requests to be alerted to the user
in real-time. When a transaction request is received by the
device, FrauVent’s dashboard opens with the pending request
information. A user noticing this request is then presented with
an interactive map, shown in Figure 8, depicting the location
of its mobile device relative to that of the vendor. With this
given information, the user can determine if the transaction
is originating from the expected vendor, eliminating the pos-
sibility of relay attack. Once the location is conﬁrmed, the
user is provided with the textual information of the requested
transaction, similar to the screen shown in Figure 8, for
further veriﬁcation of the request. A user authorizing the
transaction would be required to provide an authentication
token to complete the request. Although we have currently
implemented a PIN pad for authentication, we believe that
it should eventually be replaced with a less intrusive way of
generating the token.
B. WhereAmI
In order to approximate the role of the cellular provider, we
modiﬁed a localization service deployed on our campus. De-
veloped by the Research Network Operations Center (RNOC),
WhereAmI [35] is a location discovery service for devices
connected to the campus network. It uses the associate and
disassociate records along with various other available infor-
mation from more than 2,700 WiFi access points on campus.
Currently WhereAmI uses two discovery methods. The ﬁrst
method incorporates the proprietary discovery method of the
Cisco Location Appliance [11], enabling the directional and
distance discovery relative to the access point. This appliance
is deployed in limited parts of the campus and can determine
the location of the device with 10-meter accuracy. The other
1Android has since introduced an onscreen keyboard.
method simply uses the association of the access points and
the signal strength of the associated devices to estimate the
location. In both cases,
the location server calculates the
longitude and latitude values of the device using the known
relative location of the associated access points.
WhereAmI’s third-party lookup feature enables location
query of other connected devices on the network. This speciﬁc
feature is used for our implementation to emulate the location
discovery function of the cellular provider. In addition to what
is expected from the providers location function, WhereAmI’s
output will not only return the longitude and latitude values,
but also the discovery method, error margin, and any other
location labels such as the building name, room number, and
access point name.
C. Performance
We investigate the performance of FrauVent for three dif-
ferent components of operation: delivery of the text message
during the reactive phase, application overhead during user
interaction and impact on deployed credit card infrastructure
(i.e., PoS terminals).
The activity requiring the most time and effort was the
location of the mobile device and subsequent delivery of our
text message. While such messaging is generally viewed as a
highly reliable, real-time communications channel, this store-
and-forward architecture does not provide any actual delivery
guarantees. A performance test [24] conducted in 2002 over
the period of three months has shown that the average delivery
time by all major cellular providers is 11.8 seconds with AT&T
and Verizon Wireless being the top two carriers with 7.1
and 7.8 seconds respectively. The reliability of the delivery
is also important and the study showed an average of 94.7%
reliability rate with Verizon Wireless being the most reliable at
98.5%. Over the course of months dedicated to designing and
implementing FrauVent, 100% of the text messages sent by our
server arrived within 10 seconds with no dropped messages.
While mobile devices are becoming increasingly capable,
they are still largely considered to be computationally limited
devices when compared to desktop machines. Applications
requiring a large amount of memory or computational effort
may therefore function poorly on this platform. We used
the Android process dump and the Eclipse memory analyzer
to better characterize the footprint of our application. Frau-
Vent uses approximately 30.8 KB of heap memory out of
a maximum possible 16 MB per process. Because we used
a number of native applications (e.g., Google Maps),
the
user experience remained interactive and did not display any
noticeable latency.
356
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:39 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 8. Sample Phone Interface: This is a preliminary version of the map interface. In the left image, the user is asked to conﬁrm their location. After doing
so, they are given details about the transaction (vendor, amount) and asked to conﬁrm this as well. If the user conﬁrms both checks, they will be asked to
enter a PIN/password.
Although the majority of credit card authorization requests
occur in under 15 seconds, the majority of PoS terminals allow
transactions to hang for as long as 45 seconds. Accordingly,
the extra time to deliver a text message (7-10 seconds) and for
the user to respond is well within the default timeout period,
meaning that the currently deployed PoS infrastructure can
be augmented with an application such as FrauVent without
requiring any changes. However, should our user study (see
Section VII for a discussion of future work) reveal that more
time is necessary, the bank can simply use mechanisms such
as TCP KEEPALIVE messages to extend this time period.
VII. DISCUSSION
Protocol designers are often required to make a number of
tradeoffs based on practical issues. In this section, we brieﬂy
discuss some of those decisions. While we have designed
our system to be easily adopted, we note that there are a
number of mechanisms that real deployments could consider
to individually strengthen or weaken the guarantees offered by
our current system.
Chief among these tradeoffs is the use of public key
cryptography. In their current form, our protocols have opted
for the use of a symmetric key between banks and customers
to protect the conﬁdentiality of communications. While the use
of public/private pairs by both sides would provide additional
guarantees (e.g., non-reputability for both parties), overcoming
the challenges of fully deploying a public key infrastructure is
beyond the scope of this work [15]. We instead argue that users
can easily learn the public keys of their bank and their provider