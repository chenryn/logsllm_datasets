### Reducing User Interaction and Roaming Authentication Frameworks

McCann et al. [41] have described methods to reduce the required user interaction to simply opening a web browser. Salgarelli et al. [53] proposed a general roaming authentication framework based on shared keys, which can be implemented as an EAP (Extensible Authentication Protocol) method. Their protocol extends the classical Needham-Schroeder technique [46] to accommodate the authentication servers of both the foreign and home networks while minimizing the communication rounds between them.

Previously, Molva et al. [45] described another roaming protocol based on shared keys, designed for integration into IBM’s KryptoKnight authentication and key distribution framework. Merino et al. [42] introduced a Single Sign-On (SSO) authentication architecture based on 802.1X and EAP-TLS [57], relying on Public Key Infrastructure (PKI). This method can be combined with any web-based authentication method, such as UAM. However, this approach assumes that the mobile device can check the validity of the foreign network's certificate while offline, which may be impractical. Additionally, the use of public-key operations can be performance-intensive for resource-constrained mobile devices. Similar drawbacks are present in the authentication protocols from [9, 33].

Long et al. [40] suggested a roaming protocol based on a modified SSL handshake, assuming that mobile devices are equipped with public-key certificates, allowing the protocol to be executed without active involvement of the home network. Ribeiro et al. [49] described a roaming authentication approach using IPsec VPNs and a hierarchy of certification authorities. The problems with validating public-key certificates by the mobile device were addressed by Meyer et al. [44] using a secret sharing technique [55]. In their protocol, each foreign network holds a share of the home network's secret key, and the home network's public-key certificate is pre-installed on the mobile device. During the protocol execution, which is a modified TLS handshake, the foreign and home networks must cooperate to perform the required signature and decryption operations.

### Commercial Systems

The commercial system Fon [30] sells Wi-Fi routers that mediate the authentication of mobile devices to a Fon server using MAC/IP address filtering. However, this technique is vulnerable to address spoofing attacks [54]. Another commercial system, Wisher [60], requires foreign networks to distribute WPA keys to authorized guests, but this approach does not protect against the redistribution of keys by potentially malicious guests.

### Wireless Non-Tunnel-Based Roaming Solutions

The solutions proposed for wireless non-tunnel-based roaming in mobile phone and wireless IP networks aim to authenticate the mobile and foreign networks and provide a session key, with some approaches requiring interaction with the home network. The only currently available solution for tunnel-based roaming, proposed by Sastry et al. [54], has been discussed in Section 2.1.

### Authentication and Key Establishment Model for WRT

In this section, we model the authentication and key establishment goals of a WRT (Wireless Roaming Tunnel) protocol, denoted as Π within the model. Our definitions extend the classical two-party model from [13].

#### Communication Model

**Protocol Participants and Long-Lived Keys:**
- We consider a home network \( H \), a mobile device \( M \) registered with \( H \), and a foreign network \( F \) as participants of Π.
- In practice, \( H \) and \( F \) can be seen as corresponding authentication servers.
- We do not distinguish between the participants and their identities, which are assumed to be unique.
- The identity of a mobile device \( M \) is unique within its home network \( H \).
- All protocol participants are modeled as probabilistic polynomial time (PPT) machines.
- Each participant \( P \in \{M, F, H\} \) possesses long-lived keys \( LL_P \), used in different executions of Π.
- All long-lived keys and further secrets used in Π are polynomially bounded with respect to a security parameter \( \kappa \).

**Instances and Protocol Sessions:**
- To model the participation of \( M \), \( F \), and \( H \) in distinct sessions of Π, we consider an unlimited number of instances.
- By \([P, s]\), we denote the \( s \)-th instance of \( P \in \{M, F, H\} \), where \( s \in \mathbb{N} \).
- Instances of \( M \), \( F \), and \( H \) that hold identical session IDs \( sid_s^M = sid_s^F = sid_s^H \) are partnered, i.e., they participate in the same session.
- An instance \([P, s]\) may be invoked for one session. Throughout the protocol execution, \([P, s]\) may learn additional information.
- Upon invocation, the instance \([P, s]\) is initialized with the long-lived key \( LL_P \) and transitions into a processing state where it follows the protocol specification until it collects enough information to decide whether the protocol execution was successful (the instance accepts) or not (the instance aborts).
- Finally, the instance terminates, meaning it stops processing any further protocol messages.
- In a WRT protocol, different participants have different acceptance criteria. For example, an instance of \( F \) accepts when it is ready to create the tunnel, particularly after computing the session tunnel key \( K_t \in \{0, 1\}^\kappa \). The instances of \( M \) and \( H \) accept when they are ready to communicate over the tunnel, particularly after computing the session end-to-end key \( K_{M,H} \in \{0, 1\}^\kappa \) (in addition to \( K_t \)).

#### Security Model

**Security Associations and Commitments:**
- The mobile device \( M \) and its home network \( H \) maintain a security association resulting from the initialization and accept the provided tunnel connection if they can successfully authenticate each other upon tunnel establishment.
- There is no prior security association between \( M \) and \( F \); thus, \( M \) and \( F \) rely on \( H \) for authorized WRT participation.
- As part of their contract, \( F \) creates a tunnel to \( H \) if it successfully authenticates \( H \), and \( H \) accepts the provided tunnel after successfully authenticating \( F \) (in addition to authenticating \( M \)).
- This does not rule out attacks by malicious \( F \) trying to impersonate \( M \) towards \( H \).

**Adversarial Model:**
- The adversary \( A \), modeled as a PPT machine, has complete control over the protocol invocation and communication channels.
- \( A \) can also corrupt parties, but this ability will be restricted in a meaningful way when defining the actual security goals.
- Possible actions of \( A \) are modeled through the following set of queries:
  - **Invoke(\( P, m \)):** This query initiates a new instance \([P, s]\) and returns the first outgoing message. The optional input \( m \) indicates the message expected by the instance to start the execution; for the initiator, \( m \) is supposed to be empty.
  - **Send(\( P, s, m \)):** This query models communication control by \( A \) and contains a message \( m \) to be delivered to the \( s \)-th instance of \( P \). \( A \) can either forward protocol messages honestly to eavesdrop (passive) or manipulate or inject messages (active). In response, \( A \) receives the outgoing message of \([P, s]\), or an empty message if \([P, s]\) terminates after processing \( m \).
  - **Corrupt(\( P \)):** This query models the corruption of \( P \). In response, \( A \) receives \( LL_P \). Once \( P \) is corrupted, all instances of \( P \) are treated as corrupted.
  - **RevealKey(\( P, s \)):** This query models the independence of end-to-end keys computed by the instances of \( P \in \{M, H\} \) in different sessions. In response, \( A \) is given \( K_{M,H} \) held by the instance; the query is answered only if \([P, s]\) has accepted.
  - **RevealTunnelKey(\( P, s \)):** This query models the independence of tunnel keys computed by the instances of \( P \in \{M, F, H\} \) in different sessions. In response, \( A \) is given \( K_t \) held by the instance; the query is answered only if \([P, s]\) has accepted.

**Correctness:**
- The following definition of correctness, given from the perspective of one particular session, specifies the purpose of Π with respect to tunnel creation and key establishment.

**Definition 1 (Correctness):**
- An authentication and key establishment protocol for WRT Π is correct if, in the presence of a passive adversary \( A \), the invoked instances of \( M \), \( F \), and \( H \) terminate having accepted, and all of the following hold:
  - \( M \) and \( H \) hold the same end-to-end key \( K_{M,H} \).
  - \( M \), \( F \), and \( H \) hold the same tunnel key \( K_t \).

**Security Goals:**
- We define the requirement of mutual authentication (MA) between the instances of \( M \) and \( H \). Definition 2 captures additional sub-goals related to the agreement on the session end-to-end and tunnel keys computed by the instances of \( M \) and \( H \).

**Definition 2 (MA between \( M \) and \( H \)):**
- Given a correct protocol Π, we denote the interaction between the instances of \( M \), \( F \), and \( H \) with a PPT adversary \( A \) that is allowed to query Invoke, Send, Corrupt, RevealKey, and RevealTunnelKey. \( A \) wins if at some point during the interaction:
  1. An uncorrupted instance of \( M \) accepts, but there is no uncorrupted partnered instance of \( H \).
  2. An uncorrupted instance of \( H \) accepts, but there is no uncorrupted partnered instance of \( M \).
  3. Uncorrupted partnered instances of \( M \) and \( H \) accept without holding the same session end-to-end key \( K_{M,H} \).
  4. \( F \) is uncorrupted, and uncorrupted partnered instances of \( M \) and \( H \) accept without holding the same session tunnel key \( K_t \).

- The maximum probability of this event over all adversaries (running in time \( \kappa \)) is denoted as \( \text{Succ}_{\text{ma-m-h}}^\Pi(A, \kappa) = \max_A | \Pr[A \text{ wins in } \text{Game}_{\text{ma-m-h}}^\Pi(A, \kappa)] | \).
- Π provides mutual authentication between \( M \) and \( H \) if this probability is negligible in \( \kappa \).

**Definition 3 (MA between \( F \) and \( H \)):**
- Given a correct protocol Π, we denote the interaction between the instances of \( M \), \( F \), and \( H \) with a PPT adversary \( A \) that is allowed to query Invoke, Send, Corrupt, RevealKey, and RevealTunnelKey. \( A \) wins if at some point during the interaction:
  1. An uncorrupted instance of \( F \) accepts, but there is no uncorrupted partnered instance of \( H \).
  2. An uncorrupted instance of \( H \) accepts, but there is no uncorrupted partnered instance of \( F \).
  3. \( M \) is uncorrupted, and uncorrupted partnered instances of \( F \) and \( H \) accept without holding the same session tunnel key \( K_t \).

- The maximum probability of this event over all adversaries (running in time \( \kappa \)) is denoted as \( \text{Succ}_{\text{ma-f-h}}^\Pi(A, \kappa) = \max_A | \Pr[A \text{ wins in } \text{Game}_{\text{ma-f-h}}^\Pi(A, \kappa)] | \).
- Π provides mutual authentication between \( F \) and \( H \) if this probability is negligible in \( \kappa \).

**Observations:**
- According to our model, instances of protocol participants are seen as partnered if they hold the same session IDs. Any protocol Π that satisfies both defined mutual authentication requirements ensures that if an uncorrupted instance of \( H \) accepts, there are uncorrupted instances of \( M \) and \( F \) that are also partnered. This implies that \( H \) treats \( M \) and \( F \) as authorized participants of a WRT session.
- Since our model does not consider malicious \( M \), \( F \), or \( H \) aiming to disrupt the agreement on \( K_t \), the "transitive" partnering between the instances of \( M \) and \( F \) ensures that all partnered instances that accept in some protocol session hold the same session tunnel key \( K_t \).

**Secrecy of \( K_{M,H} \) and \( K_t \):**
- We focus on the secrecy of \( K_{M,H} \) and \( K_t \) using the classical notion of authenticated key exchange (AKE) security (cf. [13, 21, 22]), adapted to our model.
- The basic idea of AKE-security in WRT is to model the indistinguishability of \( K_{M,H} \) and \( K_t \) computed in some test session from some randomly chosen values by any outsider adversary. For \( K_{M,H} \), a possibly malicious foreign network \( F \) should also be treated as such an adversary.

**Definition 4 (e2e-Freshness):**
- In the execution of Π, an instance \([P, s]\) with \( P \in \{M, H\} \) is e2e-fresh if none of the following holds:
  - \( A \) asks Corrupt(\( P \)).
  - If \( P = M \): \( A \) asks RevealKey(\( M, s \)) after \([M, s]\) has accepted or RevealKey(\( H, t \)) after \([H, t]\) has accepted and \([M, s]\) and \([H, t]\) are partnered.
  - If \( P = H \): \( A \) asks RevealKey(\( H, s \)) after \([H, s]\) has accepted or RevealKey(\( M, t \)) after \([M, t]\) has accepted and \([H, s]\) and \([M, t]\) are partnered.

**Definition 5 (t-Freshness):**
- In the execution of Π, an instance \([P, s]\) with \( P \in \{M, F, H\} \) is t-fresh if none of the following holds:
  - \( A \) asks Corrupt(\( P \)).
  - If \( P = M \): \( A \) asks RevealTunnelKey(\( M, s \)) after \([M, s]\) has accepted or RevealTunnelKey(\( P', t \)) for \( P' \in \{H, F\} \) after \([P', t]\) has accepted and \([M, s]\) and \([P', t]\) are partnered.
  - If \( P = F \): \( A \) asks RevealTunnelKey(\( F, s \)) after \([F, s]\) has accepted or RevealTunnelKey(\( P', t \)) for \( P' \in \{M, H\} \) after \([P', t]\) has accepted and \([F, s]\) and \([P', t]\) are partnered.
  - If \( P = H \): \( A \) asks RevealTunnelKey(\( H, s \)) after \([H, s]\) has accepted or RevealTunnelKey(\( P', t \)) for \( P' \in \{M, F\} \) after \([P', t]\) has accepted and \([H, s]\) and \([P', t]\) are partnered.

**Additional Queries:**
- We introduce two additional queries: TestKey(\( P, s \)) and TestTunnelKey(\( P, s \)).
- The query TestKey(\( P, s \)) can be asked to an instance of \( P \in \{M, H\} \) and is answered only if the instance \([P, s]\) has already accepted. The answer is based on a secret bit \( b \in \{0, 1\} \) chosen in advance. In response to TestKey(\( P, s \)), \( A \) is given either \( K_{M,H} \) (if \( b = 1 \)) or a randomly chosen value from \(\{0, 1\}^\kappa\) (if \( b = 0 \)).
- The only difference between TestKey(\( P, s \)) and TestTunnelKey(\( P, s \)) is that for the latter, we assume \( P \in \{M, F, H\} \) and the key returned when \( b = 1 \) is the tunnel key \( K_t \).

**Formal Definition of AKE-Security:**
- Using the auxiliary definitions of e2e- and t-freshness, we can provide a single definition for the AKE-security of both the end-to-end and tunnel keys computed in Π.