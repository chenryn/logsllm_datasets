# 十一、Kubernetes 上的模板代码生成和 CI/CD
本章讨论了一些更简单的方法来模板化和配置具有许多资源的大型 Kubernetes 部署。还详细介绍了在 Kubernetes 上实现**持续集成** / **持续部署** ( **CI** / **CD** )的多种方法，以及每种可能方法的优缺点。具体来说，我们讨论集群内配置项/光盘，其中一些或所有配置项/光盘步骤在我们的 Kubernetes 集群中执行，以及集群外配置项/光盘，其中所有步骤都在我们的集群之外执行。
本章的案例研究将包括从头开始创建一个 Helm 图表，并解释 Helm 图表的每一部分及其工作原理。
首先，我们将介绍 Kubernetes 资源模板生成的概况，以及应该使用模板生成工具的原因。然后，我们将介绍如何在 Kubernetes 上实现 CI/CD，首先使用 AWS 代码构建，然后使用 FluxCD。
在本章中，我们将涵盖以下主题:
*   了解在 Kubernetes 上生成模板代码的选项
*   用 Helm 和 Kustomize 在 Kubernetes 上实现模板
*   了解集群内和集群外 Kubernetes 的配置项/配置项范例
*   用 Kubernetes 实现集群内和集群外 CI/CD
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes 的通讯*，了解几种快速启动和运行 Kubernetes 的方法，以及如何安装 Kubernetes 工具的说明。此外，您还需要一台支持 Helm CLI 工具的机器，该工具通常具有与 kubectl 相同的先决条件–有关详细信息，请查看位于[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)的 Helm 文档。
本章中使用的代码可以在本书的 GitHub 存储库中找到，网址为
[https://github . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 11](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter11)。
# 了解 Kubernetes 上模板代码生成的选项
正如在 [*第 1 章*](01.html#_idTextAnchor016)*中所讨论的，与 Kubernetes* 通信，Kubernetes i 最大的优势之一是它的 API 可以在声明性资源文件方面进行通信。这允许我们运行诸如`kubectl apply`这样的命令，并让控制平面确保集群中运行的任何资源都与我们的 YAML 或 JSON 文件相匹配。
然而，这种能力带来了一些不便。由于我们希望在配置文件中声明所有工作负载，因此任何大型或复杂的应用，尤其是包含许多微服务的应用，都可能导致需要编写和维护大量配置文件。
多种环境进一步加剧了这个问题。假设我们想要开发、试运行、UAT 和生产环境，这将需要每个 Kubernetes 资源有四个独立的 YAML 文件，假设我们想要保持每个文件一个资源的清洁度。
解决这些问题的一种方法是使用支持变量的模板系统，通过注入不同的变量集，允许单个模板文件适用于多个应用或多个环境。
为此，有几个流行的社区支持的开源选项。在这本书里，我们将集中讨论两个最受欢迎的:
*   舵
*   定制
还有很多其他的选择，包括 Kapitan、Ksonnet、Jsonnet 等等，但是对它们的全面回顾不在本书的范围之内。让我们先来回顾一下 Helm，它在很多方面都是最受欢迎的模板工具。
## 头盔
Helm 实际上扮演双重角色，一个模板/代码生成工具，一个 CI/CD 工具。它允许您创建基于 YAML 的模板，这些模板可以与变量结合，允许代码和模板跨应用和环境重用。它还附带了一个 Helm CLI 工具，可以根据模板本身推出对应用的更改。
由于这个原因，您可能会看到整个 Kubernetes 生态系统都将 Helm 作为安装工具或应用的默认方式。在本章中，我们将使用 Helm 来实现这两个目的。
现在，让我们继续讨论 Kustomize，它与 Helm 有很大不同。
## Kustomize
与 Helm 不同，Kustomize 由 Kubernetes 项目官方支持，支持直接集成到`kubectl`中。与 Helm 不同，Kustomize 使用无变量的普通 YAML 操作，而是推荐一种*分叉和补丁*工作流程，根据所选的补丁，YAML 的部分地区被新 YAML 取代。
既然我们已经基本了解了这些工具的不同之处，我们就可以在实践中使用它们了。
# 用 Helm 和 Kustomize 在 Kubernetes 上实现模板
既然知道了我们的选项，我们就可以用一个示例应用实现每一个选项。这将允许我们理解每个工具如何处理变量和模板化过程的细节。让我们从 Helm 开始。
## 将头盔与 Kubernetes 一起使用
如前所述，Helm 是一个开源项目使得在 Kubernetes 上模板化和部署应用变得很容易。出于本书的目的，我们将关注最新版本(在撰写本文时)，Helm V3。之前的版本，Helm·V2，有更多的活动部件，包括一个名为*蒂勒*的控制器，可以在集群上运行。Helm V3 经过简化，仅包含 Helm CLI 工具。但是，它使用集群上的自定义资源定义来跟踪发布，我们很快就会看到。
让我们从安装 Helm 开始。
### 安装舵
如果你想使用特定版本的 Helm，可以按照[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)的特定版本文档进行安装。对于我们的用例，我们将简单地使用`get helm`脚本，它将安装最新版本。
您可以获取并运行脚本，如下所示:
```
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
```
现在，我们应该可以运行`helm`命令了。默认情况下，Helm 会自动使用您现有的`kubeconfig`集群和上下文，所以为了切换 Helm 的集群，您只需要使用`kubectl`来更改您的`kubeconfig`文件，就像您通常会做的那样。
要使用 Helm 安装应用，请运行`helm install`命令。但是 Helm 如何决定安装什么和如何安装呢？我们需要讨论 Helm 图表、Helm 存储库和 Helm 版本的概念。
### 掌舵图、存储库和发行版
Helm 为提供了一种在 Kubernetes 上用变量模板化和部署应用的方法。为了做到这一点，我们通过一组模板指定工作负载，这被称为*舵图*。
Helm 图表由一个或多个模板、一些图表元数据和一个用最终值填充模板变量的`values`文件组成。在实践中，每个环境(或者应用，如果您正在为多个应用重用您的模板)将有一个`values`文件，这将使共享模板具有新的配置。模板和值的这种组合将用于在集群中安装或部署应用。
那么，在哪里可以存储 Helm 图表呢？您可以将它们放在 Git 存储库中，就像您可以放在任何其他 Kubernetes YAML(适用于大多数用例)一样，但是 Helm 也支持存储库的概念。一个 Helm 存储库由一个 URL 表示，可以包含多个 Helm 图表。例如，Helm 在 https://hub.helm.sh/charts 有自己的官方存储库。同样，每个 Helm 图表由一个包含元数据文件的文件夹、`Chart.yaml`文件、一个或多个模板文件以及可选的值文件组成。
为了安装带有本地值文件的本地 Helm 图表，您可以为每个图表传递一个路径到`helm install`，如下命令所示:
```
helm install -f values.yaml /path/to/chart/root
```
但是，对于通常安装的图表，您也可以直接从图表存储库中安装图表，并且可以选择向本地 Helm 添加自定义存储库，以便能够从非官方来源轻松安装图表。
例如，为了通过官方的 Helm 图表安装 Drupal，您可以运行以下命令:
```
helm install -f values.yaml stable/drupal
```
这段代码从官方的 Helm 图表库中安装图表。要使用自定义存储库，您只需要首先将其添加到 Helm。例如，要安装`jetstack` Helm 存储库中托管的`cert-manager`，我们可以执行以下操作:
```
helm repo add jetstack https://charts.jetstack.io
helm install certmanager --namespace cert-manager jetstack/cert-manager
```
这段代码将`jetstack` Helm 存储库添加到本地 Helm CLI 工具中，然后通过那里托管的图表安装`cert-manager`。我们也将这次发布命名为`cert-manager`。Helm 发行版是一个使用 Helm V3 中的 Kubernetes 机密实现的概念。当我们在 Helm 中创建一个 Release 时，它将作为一个机密存储在同一个命名空间中。
为了说明这一点，我们可以使用前面的`install`命令创建一个 Helm 版本。现在就开始吧:
```
helm install certmanager --namespace cert-manager jetstack/cert-manager
```
该命令应产生以下输出，根据证书管理器的当前版本，该输出可能与略有不同。为了可读性，我们将把输出分成两部分。
首先，命令的输出给出了 Helm 版本的状态:
```
NAME: certmanager
LAST DEPLOYED: Sun May 23 19:07:04 2020
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
```
如您所见，这一部分包含部署的时间戳、名称空间信息、版本和状态。接下来，我们将看到输出的注释部分:
```
NOTES:
cert-manager has been deployed successfully!
In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).
More information on the different types of issuers and how to configure them
can be found in our documentation:
https://cert-manager.io/docs/configuration/
For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:
https://cert-manager.io/docs/usage/ingress/
```
如您所见，我们的 Helm `install`命令产生了一条成功消息，这也给了我们一些来自`cert-manager`的关于如何使用它的信息。这个输出在安装 Helm 包时会很有帮助，因为包有时包含文档，比如前面的代码片段。现在，为了查看我们的发布对象在 Kubernetes 中的外观，我们可以运行以下命令:
```
Kubectl get secret -n cert-manager
```
这将产生以下输出:
![Figure 11.1 – Secrets List output from kubectl](img/B14790_11_001.jpg)
图 11.1–kube CTL 的机密列表输出
如你所见，其中一个机密的类型是`helm.sh/release.v1`。这是 Helm 用来跟踪证书管理器发布的机密。
最后，要查看 Helm CLI 中列出的版本，我们可以运行以下命令:
```
helm ls -A
```
该命令将在所有名称空间中列出 Helm 版本(就像`kubectl get pods -A`将在所有名称空间中列出 pods 一样)。输出如下:
![Figure 11.2 – Helm Release List output](img/B14790_11_002.jpg)
图 11.2–舵释放列表输出
现在，Helm 有了更多的运动部件，包括`upgrades`、`rollbacks`等，我们将在下一节回顾这些。为了展示 Helm 能做什么，我们将从头开始创建和安装一个图表。
### 创建掌舵图
因此，我们想为我们的应用创建一个 Helm 图表。让我们做好准备。我们的目标是将一个简单的 Node.js 应用轻松部署到多个环境中。为此，我们将使用应用的组件创建一个图表，然后将其与三个单独的值文件(`dev`、`staging`和`production`)组合，以便将我们的应用部署到我们的三个环境中。
让我们从 Helm 图表的文件夹结构开始。正如我们前面提到的，Helm 图表由模板、元数据文件和可选值组成。我们将在实际安装图表时注入这些值，但是我们可以这样构造我们的文件夹:
```
Chart.yaml
charts/
templates/
dev-values.yaml
staging-values.yaml
production-values.yaml
```
我们还没有提到的一件事是，你实际上可以在一个现有的图表中有一个 Helm 图表文件夹！这些子部分可以很容易地将复杂的应用分解成组件。出于本书的目的，我们将不使用子部分，但是如果您的应用对于单一图表来说变得过于复杂或模块化，这是一个有价值的特性。
此外，您可以看到，我们为每个环境准备了不同的环境文件，我们将在安装命令中使用这些文件。
那么，`Chart.yaml`文件是什么样子的呢？该文件将包含一些关于图表的基本元数据，通常至少如下所示:
```
apiVersion: v2
name: mynodeapp
version: 1.0.0
```
`Chart.yaml`文件支持许多可选字段，您可以在[https://helm.sh/docs/topics/charts/](https://helm.sh/docs/topics/charts/)上看到，但是出于本教程的目的，我们将保持简单。必填字段为`apiVersion`、`name`和`version`。
在我们的`Chart.yaml`文件中，`apiVersion`对应于图表对应的 Helm 版本。有点混乱的是，目前版本的 Helm，Helm V3 使用`apiVersion` `v2`，而包括 Helm V2 在内的旧版 Helm 也使用`apiVersion` `v2`。
接下来，`name`字段对应我们图表的名称。这是非常不言自明的，尽管请记住，我们有能力命名一个图表的特定版本，这对于多种环境来说都很方便。
最后，我们有`version`字段，它对应于图表的版本。该字段支持**版本**(语义版本控制)。
那么，我们的模板实际上是什么样子的呢？掌舵图使用引擎盖下的 Go 模板库(更多信息请参见[https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/))，支持各种强大的操作、辅助功能等等。现在，我们将保持事情极其简单，让您了解基本知识。对 Helm 图表创作的全面讨论可能会成为一本书！
首先，我们可以使用一个 Helm CLI 命令来自动生成我们的`Chart`文件夹，其中包含所有之前为您生成的文件和文件夹，减去子部分和值文件。让我们尝试一下——首先使用以下命令创建一个新的 Helm 图表:
```
helm create myfakenodeapp
```
该命令将在名为`myfakenodeapp`的文件夹中创建一个自动生成的图表。让我们使用以下命令检查`templates`文件夹的内容:
```
Ls myfakenodeapp/templates
```
该命令将产生以下输出:
```
helpers.tpl
deployment.yaml