节我们先介绍firewalld的特性和使用方法，下一节再介绍iptables。
3.4.1 firewalld 特性
1. firewalld和iptables的关系
firewalld仅仅是替代了iptables service部分，底层还是使用iptables作为防火墙规则管理
入口。firewalld使用Python语言编写，提供了一个daemon和service，还提供命令行和图形界
面配置工具。
2. 静态防火墙和动态防火墙
iptables 一般称为静态防火墙，也就是即使只修改一条规则也要把所有规则都重新载入，
这样做会在修改规则的时候对整个系统的网络造成影响。firewalld一般称为动态防火墙，它的
出现就是为了解决iptables的这一问题，任何规则的变更都只需要将变更部分保存并更新到运
行中的iptables就可以了，这样也不会影响到整个系统的网络，只会影响到使用规则的应用的
网络。
3. 采用xml作为配置文件
firewalld的配置文件被放置在不同的xml文件当中，这使得对规则的维护变得更加容易和
可读、有条理。相比于iptables的规则配置文件而言，这显然可以算作是一个进步。
4. 区域模型定义
有点类似Windows的防火墙，firewalld通过对iptables自定义链的使用，抽象出一个区域
模型的概念。针对各种规则统一成一套默认的标准使用规范和流程，使得防火墙在易用性和通
用性上得到提升。
58
第3章 运维必备的网络管理技能
3.4.2 firewalld 基本术语
1. 网络区域zone
网络区域 zone 定义了网络连接的可信等级。这是一个一对多的关系，这意味着一次连接
可以仅仅是一个区域的一部分，而一个区域可以用于很多连接。firewalld将网卡对应到不同的
区域（zone）。zone默认共有9个：block、dmz、drop、external、home、internal、public、trusted、
work。不同区域之间的差异，是其对待数据包的默认行为不同。
根据区域名字，我们可以很直观地知道该区域的特征。在 CentOS 7.5 系统中，默认区域
被设置为public。
所有可用zone的xml配置文件被保存在/usr/lib/firewalld/zones/目录，该目录中的配置为默
认配置，不允许管理员手动修改。
自定义zone配置需保存到/etc/firewalld/zones/目录。
2. 服务service
服务 service 是端口和/或协议入口的组合。服务所使用的 TCP/UDP 端口的配置文件存放
在 /usr/lib/firewalld/services/目录中，如SSH服务等。最新版本的firewalld中默认已经定义了
70多种服务供我们使用。
当默认提供的服务不够用或者需要自定义某项服务的端口时，需要将 service 配置文件放
置在/etc/firewalld/services/目录中。
service 配置的优势：
 通过服务名字来管理规则更加人性化。
 通过服务来组织端口分组的模式更加高效，如果一个服务使用了若干个网络端口，则
服务的配置文件就相当于提供了到这些端口的规则管理的批量操作快捷方式。每加载
一项service配置就意味着开放了对应的端口访问。
3.4.3 firewalld 使用
1. 管理firewalld服务
#设置开机启动服务
[root@CentOS ~]# systemctl enable firewalld.service
#设置开机禁用服务
[root@CentOS ~]# systemctl disable firewalld.service
#开启服务
[root@CentOS ~]# systemctl start firewalld.service
#停止服务
[root@CentOS ~]# systemctl stop firewalld.service
#查看firewalld状态
[root@CentOS ~]# systemctl status firewalld
# 查看版本
59
CentOS 7.5系统管理与运维实战
[root@CentOS ~]# firewall-cmd --version
# 查看帮助
[root@CentOS ~]# firewall-cmd --help
# 显示状态
[root@CentOS ~]# firewall-cmd --state
2. zone管理
#列出所有支持的 zone
[root@CentOS ~]# firewall-cmd --get-zones
#查看当前的默认 zone
[root@CentOS ~]# firewall-cmd --get-default-zone
3. service管理
# 分别列出所有支持的 service
[root@CentOS ~]# firewall-cmd --get-services
#查看当前 zone 中加载的 service
[root@CentOS ~]# firewall-cmd --list-services
4. 基本操作
# 查看所有打开的端口
[root@CentOS ~]# firewall-cmd --zone=public --list-ports
# 更新防火墙规则
[root@CentOS ~]# firewall-cmd --reload
# 查看区域信息
[root@CentOS ~]# firewall-cmd --get-active-zones
# 查看指定接口所属区域
[root@CentOS ~]# firewall-cmd --get-zone-of-interface=eth0
# 拒绝所有包
[root@CentOS ~]# firewall-cmd --panic-on
# 取消拒绝状态
[root@CentOS ~]# firewall-cmd --panic-off
# 查看是否拒绝
[root@CentOS ~]# firewall-cmd --query-panic
5. 添加端口
# 添加80端口
[root@CentOS ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent
（--permanent永久生效，没有此参数，重启后失效）
# 重新载入
60
第3章 运维必备的网络管理技能
[root@CentOS ~]# firewall-cmd --reload
# 查看80端口
[root@CentOS ~]# firewall-cmd --zone= public --query-port=80/tcp
# 删除端口
[root@CentOS ~]# firewall-cmd --zone= public --remove-port=80/tcp --permanent
# 为 public 区添加持久性的 HTTP 和 HTTPS 规则
[root@CentOS ~]# firewall-cmd --zone=public --add-service=http --permanent
[root@CentOS ~]# firewall-cmd --zone=public --add-service=https --permanent
# 列出所有的规则
[root@CentOS ~]# firewall-cmd –list-all
3.5
Linux 防火墙 iptables
在CentOS 7之前的版本均使用iptables，因此本书也介绍iptables的使用。要使用iptables
防火墙，必须要先了解TCP/IP网络的基本原理，理解Linux防火墙的工作原理。本节主要介
绍Linux防火墙方面的知识。
3.5.1 Linux 内核防火墙的工作原理
Linux内核提供的防火墙功能通过netfiter框架实现，并提供了iptables工具配置和修改防
火墙的规则。
netfilter 的通用框架不依赖于具体的协议，而是为每种网络协议定义一套钩子函数。这些
钩子函数在数据包经过协议栈的几个关键点时被调用，在这几个点中，协议栈将数据包及钩子
函数作为参数，传递给netfilter框架。
对于每种网络协议定义的钩子函数，任何内核模块都可以对每种协议的一个或多个钩子函
数进行注册，实现挂接。这样当某个数据包被传递给netfilter框架时，内核能检测到是否有有关
模块对该协议和钩子函数进行了注册。若发现注册信息则调用该模块在注册时使用的回调函数，
然后对应模块去检查、修改、丢弃该数据包及指示netfilter将该数据包传入用户空间的队列。
从以上描述可以得知钩子提供了一种方便的机制，以便在数据包通过Linux内核的不同位
置上截获和操作处理数据包。
1. netfilter的体系结构
网络数据包的通信主要经过以下相关步骤对应netfilter定义的钩子函数，更多信息可以参
考源代码。
 NF_IP_PRE_ROUTING：网络数据包进入系统，经过了简单的检测后，数据包转交给
该函数进行处理，然后根据系统设置的规则对数据包进行处理，如果数据包不被丢弃
61
CentOS 7.5系统管理与运维实战
就交给路由函数进行处理。在该函数中可以替换IP 包的目的地址，即DNAT。
 NF_IP_LOCAL_IN：所有发送给本机的数据包都要通过该函数的处理，该函数根据系
统设置的规则对数据包进行处理，如果数据包不被丢弃就交给本地的应用程序。
 NF_IP_FORWARD：所有不是发送给本机的数据包都要通过该函数进行处理，该函数
会根据系统设置的规则对数据包进行处理，若数据包不被丢弃则转到
NF_IP_POST_ROUTING 进行处理。
 NF_IP_LOCAL_OUT：所有从本地应用程序出来的数据包必须通过该函数的处理，该函数
根据系统设置的规则对数据包进行处理，如果数据包不被丢弃就交给路由函数进行处理。
 NF_IP_POST_ROUTING：所有数据包在发给其他主机之前需要通过该函数的处理，该
函数根据系统设置的规则对数据包进行处理，如果数据包不被丢弃，就将数据包发给
数据链路层。在该函数中可以替换IP 包的源地址，即SNAT。
图3.3显示了数据包在通过Linux防火墙时的处理过程。
图3.3 数据包在通过Linux防火墙时的处理过程
2. 包过滤
每个函数都可以对数据包进行处理，最基本的操作为对数据包进行过滤。系统管理员可以
通过iptables工具来向内核模块注册多个过滤规则，并且指明过滤规则的优先权。设置完以后
每个钩子按照规则进行匹配，如果与规则匹配，函数就会进行一些过滤操作，这些操作主要是
以下几个：
 NF_ACCEPT：继续正常地传递包。
 NF_DROP：丢弃包，停止传送。
 NF_STOLEN：已经接管了包，不要继续传送。
 NF_QUEUE：排列包。
 NF_REPEAT：再次使用该钩子。
62
第3章 运维必备的网络管理技能
3. 包选择
在netfilter框架上已经创建了一个包选择系统，这个包选择工具默认已经注册了3个表，
分别是过滤（filter）表、网络地址转换（NAT）表和mangle表。
在调用钩子函数时是按照表的顺序来调用的。例如，在执行NF_IP_PRE_ROUTING时，
首先检查filter表，然后检查Mangle表，最后检查NAT表。
过滤（filter）表过滤包而不会改变包，仅仅是过滤的作用，实际上由网络过滤框架来提供
NF_IP_FORWARD 钩子的输出和输入接口使得很多过滤工作变得非常简单。从图 3.3 中可以
看出，NF_IP_LOCAL_IN和NF_IP_LOCAL_OUT也可以做过滤，但是只是针对本机。
网络地址转换（NAT）表分别服务于两套不同的网络过滤挂钩的包，对于非本地包，
NF_IP_PRE_ROUTING 和 NF_IP_POST_ROUTING 挂钩可以完美地解决源地址和目的地址的
变更。
NAT表与filter表的区别在于只有新建连接的第1个包会在表中传送，结果将被用于以后
所有来自这一连接的包。例如，某一个连接的第1个数据包在这个表中被替换了源地址，那么
以后这条连接的所有包都将被替换源地址。
mangle表被用于真正的改变包的信息，mangle表和所有的5个网络过滤的钩子函数都有关。
4. 切换至iptables
在正式学习iptables之前，还需要将默认使用的firewalld停止，并让系统将iptables作为
默认防火墙。其命令如下：
#关闭并禁用firewalld
[root@CentOS ~]# systemctl stop firewalld
[root@CentOS ~]# systemctl disable firewalld
#启动并启用iptables
[root@CentOS ~]# systemctl start iptables
[root@CentOS ~]# systemctl enable iptables
#如果使用了IPv6，还需要开启ip6tables
#启动并启用ip6tables
[root@CentOS ~]# systemctl start ip6tables
[root@CentOS ~]# systemctl enable ip6tables
使用上述命令之后就可以在CentOS 7.5中使用iptables了。
3.5.2 Linux 软件防火墙 iptables
iptables 工具用来设置、维护和检查 Linux 内核的 IP 包过滤规则。filter、NAT 和 mangle
表可以包含多个链（chain），每个链可以包含多条规则（rule）。iptables主要对表（table）、链