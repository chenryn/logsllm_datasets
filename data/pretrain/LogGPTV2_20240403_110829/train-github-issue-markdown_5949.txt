##### System information (version)
  * OpenCV => 3.4 branch ( `0101fa7` )
  * Operating System / Platform => Windows 10 64bit
  * Compiler => Visual Studio 2015
  * CUDA => 10.0
##### Summarized description
  * The `opencv_test_imgproc` passes, but when I ran it from target `RUN_TESTS`, it says `Segfault`
        Start 9: opencv_test_imgproc
    1/1 Test #9: opencv_test_imgproc ..............***Exception: SegFault137.81 sec
  * I ran `opencv_test_imgproc` separately, but all the test passes (!)
  * To reproduce what gtest was seeing, I need to ran it in Debug mode
  * When running `opencv_test_imgproc` with "Start debug" on Visual Studio 2015, the test passed but at the end, it did cause an `Segfault` at ocl.cpp  
opencv/modules/core/src/ocl.cpp
Lines 4322 to 4329 in 0101fa7
|  void _releaseBufferEntry(const BufferEntry& entry)  
---|---  
|  {  
|  CV_Assert(entry.capacity_ != 0);  
|  CV_Assert(entry.clBuffer_ != NULL);  
|  LOG_BUFFER_POOL("OpenCL release buffer: %p, %lld (0x%llx) bytes\n",  
|  entry.clBuffer_, (long long)entry.capacity_, (long long)entry.capacity_);  
|  CV_OCL_DBG_CHECK(clReleaseMemObject(entry.clBuffer_));  
|  }  
##### Detailed description
  * I narrowed down the test case, and the test case was from `OCL_ImgProc/CvtColor8u32f`
  * Furthermore, it was related to test of either HSV/Lab/Luv conversion.
  * Also, although I put a break point at where it causes `Segfault`, it doesn't reproduce the situation.
  * I have to exit from the main routine call and it was happening after that exit call. Mysterious...
  * After watching the source code, I realized that some of the static `UMat` was used in a wrong scope, such like here   
opencv/modules/imgproc/src/color_hsv.cpp
Lines 1483 to 1486 in 0101fa7
|  {  
---|---  
|  static UMat sdiv_data;  
|  static UMat hdiv_data180;  
|  static UMat hdiv_data256;  
  * These `UMat` were passed as a parameter of the OpenCL kernel but the scope was closed before it was actually used  
opencv/modules/imgproc/src/color_hsv.cpp
Lines 1516 to 1521 in 0101fa7
|  h.setArg(ocl::KernelArg::PtrReadOnly(sdiv_data));  
---|---  
|  h.setArg(hrange == 256 ? ocl::KernelArg::PtrReadOnly(hdiv_data256) :  
|  ocl::KernelArg::PtrReadOnly(hdiv_data180));  
|  }  
|  
|  return h.run();  
  * Looking back the history, it seems that color convert was splitted in early 2018, and before the split, the scope was aligned with the actual use.
  * I moved the `UMat` declarations and also, I removed the `static`
  * Now the test passed without `Segfault`
##### Steps to reproduce
  * Build under environment explained above.
  * Run with CUDA 10.0 and run the OpenCL kernel on dGPU
  * `OPENCV_OPENCL_DEVICE=:dgpu opencv_test_imgproc --gtest_filter=OCL_ImgProc/CvtColor8u32f*`
  * Also, there I'm not sure why this doesn't happen on `CPU` and `igpu` on my laptop.
  * Still, the scope difference seems bad, so I think it has meaning to fix the scope.