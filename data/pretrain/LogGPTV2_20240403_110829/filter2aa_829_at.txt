# Layer Data Structure and Stream Actions

The layer data structure includes a `streamAction` member, which is an `FWPS_STREAM_ACTION_TYPE` value. This value specifies the action recommended by the callout for the stream-layer shim to take. The possible actions include:

- **No Action (FWPS_STREAM_ACTION_NONE):** Do nothing.
- **Allow Connection (FWPS_STREAM_ACTION_ALLOW_CONNECTION):** Allow all future data segments in the flow without further inspection.
- **Request More Data (FWPS_STREAM_ACTION_NEED_MORE_DATA):** Request additional data. The callout must specify the number of bytes required in the `countBytesRequired` member.
- **Drop Connection (FWPS_STREAM_ACTION_DROP_CONNECTION):** Terminate the connection.
- **Defer Processing (FWPS_STREAM_ACTION_DEFER):** Defer processing until `fwpkclnt!FwpsStreamContinue0()` is called. This is used for flow control to manage the rate of incoming data.

It's important not to confuse the `streamAction` member with the `classifyOut` parameter, which is used in the classify function to indicate the result of the filtering operation.

## Evading Network Filters

Evading network filters is often necessary to ensure that command-and-control traffic reaches the internet. However, other types of traffic, such as lateral movement and network reconnaissance, are also subject to filtering.

### Challenges in Evading WFP Callout Drivers

Compared to other sensor components, there are fewer options for evading Windows Filtering Platform (WFP) callout drivers. The process is similar to performing a standard firewall rule assessment. Some filters may explicitly permit or deny traffic, or they may send the contents for inspection by a callout.

### Enumerating Filters and Sublayers

To evade network filters, you need to enumerate the various filters on the system, their configurations, and their rulesets. Tools like `netsh` and `NtObjectManager` can help with this process.

#### Using `netsh` to Export Filters

You can use the `netsh` command to export the currently registered filters as an XML document. For example:

```powershell
PS > netsh
netsh> wfp
netsh wfp> show filters
Data collection successful; output = filters.xml
netsh wfp> exit
```

#### Parsing XML with NtObjectManager

Parsing XML can be cumbersome, so you might prefer using `NtObjectManager`. This tool includes cmdlets for collecting information related to WFP components, including sublayer identifiers and filters.

#### Listing Non-Default Sublayers

To list all non-default sublayers, you can use the following commands:

```powershell
PS > Import-Module NtObjectManager
PS > Get-FwSubLayer | 
>> Where-Object {$_.Name -notlike 'WFP Built-in*'} |
>> select Weight, Name, keyname | 
>> Sort-Object Weight -Descending | fl
```

#### Inspecting Filters and Callouts

Once you have identified interesting sublayers, you can use the `Get-FwFilter` cmdlet to return filters associated with a specific sublayer. For example:

```powershell
PS > Get-FwFilter | 
>> Where-Object {$_.SubLayerKeyName -eq '{3c1cd879-1b8c-4ab4-8f83-5ed129176ef3}'} | 
>> Where-Object {$_.IsCallout -eq $true} |
>> select ActionType,Name,LayerKeyName,CalloutKeyName,FilterId | 
>> fl
```

#### Investigating Callouts

You can inspect callouts by passing their key names to the `Get-FwCallout` cmdlet. For instance:

```powershell
PS > Get-FwCallout |
>> Where-Object {$_.KeyName -eq '{d67b238d-d80c-4ba7-96df-4a0c83464fa7}'} |
>> select *
```

### Finding Gaps in Filter Configurations

To evade detection, look for configuration gaps in the filter rules. For example, if a callout only monitors IPv4 traffic, IPv6 traffic will not be inspected. Additionally, look for outdated or environment-specific rules that allow certain traffic.

### Conclusion

Evading WFP filters involves identifying gaps in the rulesets, configurations, and inspection logic implemented by an EDR’s network filter driver. This can range from reviewing filtering rules to deeply analyzing the driver’s inspection logic.

---

# Event Tracing for Windows (ETW)

Event Tracing for Windows (ETW) is a logging facility that allows developers to emit, consume, and control event-tracing sessions. This is useful for tracing code execution and monitoring or debugging issues. In a security context, ETW provides valuable telemetry for endpoint agents.

### Architecture

ETW consists of three main components: providers, consumers, and controllers.

- **Providers:** Emit events. These can be system components, third-party applications, or the kernel itself.
- **Consumers:** Consume events. They can be tools, applications, or services that process and analyze the emitted events.
- **Controllers:** Manage event-tracing sessions. They control the start, stop, and configuration of tracing sessions.

### Relevant ETW Providers for Security Monitoring

Table 8-1 lists some default ETW providers relevant to security monitoring:

| Provider Name                       | GUID                                      | Description                                                                 |
|-------------------------------------|-------------------------------------------|-----------------------------------------------------------------------------|
| Microsoft-Antimalware-Scan-Interface | {2A576B87-09A7-520E-C21A-4942F0271D67}   | Supplies details about data passed through the Antimalware Scan Interface (AMSI). |
| Microsoft-Windows-DotNETRuntime     | {E13C0D23-CCBC-4E12-931B-D9CC2EEE27E4}   | Provides events related to .NET assemblies executing on the local host.      |
| Microsoft-Windows-Audit-CVE         | {85A62A0D-7E17-485F-9D4F-749A287193A6}   | Reports attempts to exploit known vulnerabilities.                          |
| Microsoft-Windows-DNS-Client        | {1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}   | Details domain name resolution results on the host.                         |
| Microsoft-Windows-Kernel-Process     | {22FB2CD6-0E7B-422B-A0C7-2FAD1FD0E716}   | Provides information about process creation and termination.                |
| Microsoft-Windows-PowerShell        | {A0C1853B-5C40-4B15-8766-3CF1C58F985A}   | Provides PowerShell script block-logging functionality.                     |
| Microsoft-Windows-RPC               | {6AD52B32-D609-4BE9-AE07-CE8DAE937E39}   | Contains information related to RPC operations on the local system.         |
| Microsoft-Windows-Security-Kerberos | {98E6CFCB-EE0A-41E0-A57B-622D4E1B30B1}   | Provides information related to Kerberos authentication on the host.        |
| Microsoft-Windows-Services          | {0063715B-EEDA-4007-9429-AD526F62696E}   | Emits events related to service installation, operation, and removal.       |
| Microsoft-Windows-SmartScreen       | {3CB2A168-FE34-4A4E-BDAD-DCF422F34473}   | Provides events related to Microsoft Defender SmartScreen.                  |

This table highlights some of the key ETW providers that can provide valuable insights for security monitoring and analysis.