calculations. However, it is clear from the CPU usage displayed by Task
Manager that the application is not making full use of the processing
resources available. On a dual-core machine, it is using just over half of the
CPU power, and on a quad-core machine, it is employing a little more than a
quarter of the CPU. This phenomenon occurs because the application is
single-threaded, and in a Windows application, a single thread can provide
work only to a single core on a multicore processor. To spread the load over
Download from finelybook PI:EMAIL
782
all the available cores, you need to divide the application into tasks and
arrange for each task to be executed by a separate thread, each running on a
different core. This is what you will do next.
Using Performance Explorer to identify CPU
bottlenecks
The GraphDemo application was specifically designed to create a CPU
bottleneck at a known point (in the generateGraphData method). In the
real world you might be aware that something is causing your
application to run slowly and become unresponsive, but you might not
know where the offending code is located. This is where the Visual
Studio Performance Explorer and Profiler can prove invaluable.
The Profiler can sample the run-time state of the application
periodically and capture information about which statement was
running at the time. The more frequently a particular line of code is
executed and the longer this line takes to run, the more frequently this
statement will be observed. The Profiler uses this data to generate a run-
time profile of the application and produce a report that details the
hotspots in your code. These hotspots can be useful in identifying areas
on which you should focus your optimizations. The following optional
steps walk you through this process.
Note Performance Explorer and the Profiler are not available in
Visual Studio 2017 Community Edition.
1. In Visual Studio, on the Debug menu, point to Profiler, point to
Performance Explorer, and then click New Performance Session.
The Performance Explorer window should appear in Visual Studio:
Download from finelybook PI:EMAIL
783
2. In Performance Explorer, right-click Targets and then click Add
Target Project. The GraphDemo application will be added as a
target.
3. In the Performance Explorer menu bar, click Actions, and then
click Start Profiling. The GraphDemo application starts running.
4. Click Plot Graph and wait for the graph to be generated. Repeat
this process several times, and then close the GraphDemo
application.
5. Return to Visual Studio and wait while the Profiler analyzes the
sampling data collected and generates a report that should look
similar to this:
Download from finelybook PI:EMAIL
784
This report shows the CPU utilization (which should be similar to
that which you observed using Task Manager earlier, with peaks
whenever you clicked Plot Graph), and the Hot Path for the
application. This path identifies the sequence through the
application that consumed the most processing. In this case, the
application spent 93.46 percent of the time in the plotButton_Click
method, 80.08 percent of the time was spent executing the
generateGraphData method, and 33.85 percent of the time was
spent in the plotXY method. A considerable amount of time (22.20
percent) was also consumed by the runtime (coreclr.dll).
Note that you can zoom in on particular areas of the CPU
utilization graph (click and drag using the mouse), and filter the
report to cover only the zoomed-in part of the sampled data.
6. In the Hot Path part of the report, click the
GraphDemo.MainPage.generateGraphData method. The Report
window displays the details of the method, together with the
proportion of the CPU time spent executing the most expensive
statements:
Download from finelybook PI:EMAIL
785
In this case, you can see that the code in the for loop should be
the primary target for any optimization effort.
Modify the GraphDemo application to use Task objects
1. Return to Visual Studio 2017, and display the MainPage.xaml.cs file in
the Code and Text Editor window, if it is not already open.
2. Examine the generateGraphData method.
The purpose of this method is to populate the items in the data array. It
iterates through the array by using the outer for loop based on the x loop
control variable, highlighted in bold here:
Click here to view code image
private void generateGraphData(byte[] data)
{
    double a = pixelWidth / 2;
    double b = a * a;
    double c = pixelHeight / 2;
Download from finelybook PI:EMAIL
786
    for (double x = 0; x  generateGraphData(data, 0,
pixelWidth / 4));
...
The task runs the code specified by the lambda expression. The values
for the partitionStart and partitionEnd parameters indicate that the Task
object calculates the data for the first half of the graph. (The data for the
complete graph consists of points plotted for the values between 0 and
pixelWidth / 2.)
7. Add another statement that creates and runs a second Task object on
another thread, as shown in the following bold-highlighted code:
Click here to view code image
...
Task first = Task.Run(() => generateGraphData(data, 0,
pixelWidth / 4));
Task second = Task.Run(() => generateGraphData(data, pixelWidth
/ 4, pixelWidth / 2));
...
This Task object invokes the generateGraphData method and calculates
the data for the values between pixelWidth / 4 and pixelWidth / 2.
8. Add the following statement shown in bold that waits for both Task
objects to complete their work before continuing:
Click here to view code image
...
Task second = Task.Run(() => generateGraphData(data, pixelWidth
Download from finelybook PI:EMAIL
788
/ 4, pixelWidth / 2));
Task.WaitAll(first, second);
...
9. On the Debug menu, click Start Without Debugging to build and run the
application. Adjust the display to ensure that you can see the Task
Manager window displaying the CPU utilization.
10. In the GraphDemo window, click Plot Graph. In the Task Manager
window, wait for the CPU utilization to level off.
11. Repeat step 10 several more times, waiting for the CPU utilization to
level off between clicks. Make a note of the duration recorded each time
you click the button, and then calculate the average.
You should see that the application runs significantly quicker than it did
previously. On my computer, the typical time dropped to 735
milliseconds—a reduction in time of approximately 40 percent.
In most cases, the time required to perform the calculations will be cut
by nearly half, but the application still has some single-threaded
elements, such as the logic that actually displays the graph after the data
has been generated. This is why the overall time is still more than half
the time taken by the previous version of the application.
12. Switch to the Task Manager window.
You should see that the application uses more CPU resources than
before. On my quad-core machine, the CPU usage peaked at
approximately 40 percent each time I clicked Plot Graph. This happens
because the two tasks were each run on separate cores, but the remaining
two cores were left unoccupied. If you have a dual-core machine, you
will likely see processor utilization briefly approach 80–90 percent each
time the graph is generated.
Download from finelybook PI:EMAIL
789
Note You should take the graph of CPU utilization in Task
Manager as a general guide only. The accuracy is determined by
the sampling rate of Windows. This means that if a CPU spends a
very short time with high usage, it might not always be reported; it
could fall between samples. This phenomenon also accounts for
why some peaks appear to be truncated plateaus rather than tall
points.
You should also notice that the taken reported to generate the data by the
GraphDemo application drops considerably, to approximately 60
Download from finelybook PI:EMAIL
790
percent of that reported when it was running single-threaded.
13. Close the GraphDemo application and return to Visual Studio 2017.
Note If you have a quad-core computer, you can increase the CPU
utilization and reduce the time further by adding two more Task objects
and dividing the work into four chunks in the plotButton_Click method,
as shown here in bold:
Click here to view code image
...
Task first = Task.Run(() => generateGraphData(data, 0,
pixelWidth / 8));
Task second = Task.Run(() => generateGraphData(data, pixelWidth
/ 8,
pixelWidth / 4));
Task third = Task.Run(() => generateGraphData(data, pixelWidth /
4,
pixelWidth * 3 / 8));
Task fourth = Task.Run(() => generateGraphData(data, pixelWidth
* 3 / 8,
pixelWidth / 2));
Task.WaitAll(first, second, third, fourth);
...
If you have only a dual-core processor, you can still try this
modification, and you should notice a small beneficial effect on the
time. This is primarily because of the way in which the algorithms used
by the CLR optimize the way in which the threads for each task are
scheduled.
Abstracting tasks by using the Parallel class
By using the Task class, you have complete control over the number of tasks
your application creates. However, you had to modify the design of the
application to accommodate the use of Task objects. You also had to add
code to synchronize operations; the application can render the graph only
Download from finelybook PI:EMAIL
791
when all the tasks have completed. In a complex application, the
synchronization of tasks can become a nontrivial process that is easily prone
to mistakes.
With the Parallel class, you can parallelize some common programming
constructs without having to redesign an application. Internally, the Parallel
class creates its own set of Task objects, and it synchronizes these tasks
automatically when they have completed. The Parallel class is located in the
System.Threading.Tasks namespace and provides a small set of static
methods that you can use to indicate that code should be run in parallel if
possible. These methods are as follows:
Parallel.For You can use this method in place of a C# for statement.
It defines a loop in which iterations can run in parallel by using tasks.
This method is heavily overloaded, but the general principle is the
same for each: you specify a start value, an end value, and a reference
to a method that takes an integer parameter. The method is executed for
every value between the start value and one below the end value
specified, and the parameter is populated with an integer that specifies
the current value. For example, consider the following simple for loop
that performs each iteration in sequence:
for (int x = 0; x  You can use this method in place of a C#
foreach statement. Like the For method, ForEach defines a loop in
which iterations can run in parallel. You specify a collection that
implements the IEnumerable generic interface and a reference to a
method that takes a single parameter of type T. The method is executed
for each item in the collection, and the item is passed as the parameter
to the method. Overloads are available with which you can provide
private local thread data and specify options for creating the tasks run
by the ForEach method.
Parallel.Invoke You can use this method to execute a set of
parameterless method calls as parallel tasks. You specify a list of
delegated method calls (or lambda expressions) that take no parameters
and do not return values. Each method call can be run on a separate
thread, in any order. For example, the following code makes a series of
method calls:
doWork();
doMoreWork();
doYetMoreWork();
You can replace these statements with the following code, which
invokes these methods by using a series of tasks:
Parallel.Invoke(
    doWork,
    doMoreWork,
    doYetMoreWork
);
You should bear in mind that the Parallel class determines the actual
degree of parallelism appropriate for the environment and workload of the
computer. For example, if you use Parallel.For to implement a loop that
performs 1,000 iterations, the Parallel class does not necessarily create 1,000
concurrent tasks (unless you have an exceptionally powerful processor with
1,000 cores). Instead, the Parallel class creates what it considers to be the
optimal number of tasks that balances the available resources against the
requirement to keep the processors occupied. A single task might perform
Download from finelybook PI:EMAIL
793
multiple iterations, and the tasks coordinate with each other to determine
which iterations each task will perform. An important consequence of this is
that you cannot guarantee the order in which the iterations are executed, so
you must ensure that there are no dependencies between iterations; otherwise,
you might encounter unexpected results, as you will see later in this chapter.
In the next exercise, you will return to the original version of the
GraphDemo application and use the Parallel class to perform operations
concurrently.
Use the Parallel class to parallelize operations in the GraphDemo
application
1. Using Visual Studio 2017, open the GraphDemo solution, which is
located in the \Microsoft Press\ VCSBS\Chapter 23\Parallel GraphDemo
folder in your Documents folder.
This is a copy of the original GraphDemo application. It does not use
tasks yet.
2. In Solution Explorer, in the GraphDemo project, expand the
MainPage.xaml node, and then double-click MainPage.xaml.cs to
display the code for the form in the Code and Text Editor window.
3. Add the following using directive to the list at the top of the file:
using System.Threading.Tasks;
4. Locate the generateGraphData method. It looks like this:
Click here to view code image
private void generateGraphData(byte[] data)
{
    double a = pixelWidth / 2;
    double b = a * a;
    double c = pixelHeight / 2;
    for (double x = 0; x  calculateData(x,
data));
}
This code is the parallel equivalent of the original for loop. It iterates
through the values from 0 to pixelWidth / 2 – 1 inclusive. Each
invocation runs by using a task, and each task might run more than one
iteration. The Parallel.For method finishes only when all the tasks it has
created complete their work. Remember that the Parallel.For method
expects the final parameter to be a method that takes a single integer
parameter. It calls this method passing the current loop index as the
parameter. In this example, the calculateData method does not match
the required signature because it takes two parameters: an integer and a
byte array. For this reason, the code uses a lambda expression that acts
as an adapter that calls the calculateData method with the appropriate
arguments.
7. On the Debug menu, click Start Without Debugging to build and run the