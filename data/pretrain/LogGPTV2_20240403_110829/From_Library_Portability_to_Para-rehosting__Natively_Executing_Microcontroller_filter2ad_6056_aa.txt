title:From Library Portability to Para-rehosting: Natively Executing Microcontroller
Software on Commodity Hardware
author:Wenqiang Li and
Le Guan and
Jingqiang Lin and
Jiameng Shi and
Fengjun Li
From Library Portability to Para-rehosting:
Natively Executing Microcontroller Software
on Commodity Hardware
†‡§(cid:107)Wenqiang Li∗, ‡Le Guan, ¶Jingqiang Lin, ‡Jiameng Shi, (cid:107)Fengjun Li
†State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences
‡Department of Computer Science, the University of Georgia, USA
§School of Cyber Security, University of Chinese Academy of Sciences
¶School of Cyber Security, University of Science and Technology of China
(cid:107)Department of Electrical Engineering and Computer Science, the University of Kansas, USA
PI:EMAIL, {leguan, jiameng}@uga.edu, PI:EMAIL, ﬂPI:EMAIL
Abstract—Finding bugs in microcontroller (MCU) ﬁrmware
is challenging, even for device manufacturers who own the
source code. The MCU runs different instruction sets than x86
and exposes a very different development environment. This
invalidates many existing sophisticated software testing tools on
x86. To maintain a uniﬁed developing and testing environment,
a straightforward way is to re-compile the source code into the
native executable for a commodity machine (called rehosting).
However, ad-hoc re-hosting is a daunting and tedious task and
subject to many issues (library-dependence, kernel-dependence
and hardware-dependence). In this work, we systematically ex-
plore the portability problem of MCU software and propose para-
rehosting to ease the porting process. Speciﬁcally, we abstract and
implement a portable MCU (PMCU) using the POSIX interface.
It models common functions of the MCU cores. For peripheral
speciﬁc logic, we propose HAL-based peripheral function re-
placement, in which high-level hardware functions are replaced
with an equivalent backend driver on the host. These backend
drivers are invoked by well-designed para-APIs and can be reused
across many MCU OSs. We categorize common HAL functions
into four types and implement templates for quick backend
development. Using the proposed approach, we have successfully
rehosted nine MCU OSs including the widely deployed Amazon
FreeRTOS, ARM Mbed OS, Zephyr and LiteOS. To demonstrate
the superiority of our approach in terms of security testing, we
used off-the-shelf dynamic analysis tools (AFL and ASAN) against
the rehosted programs and discovered 28 previously-unknown
bugs, among which 5 were conﬁrmed by CVE and the other 19
were conﬁrmed by vendors at the time of writing.
I.
INTRODUCTION
It is commonly believed that the Internet of Things (IoT)
is emerging as the third wave in the development of the
Internet. By the year 2020, the world will have 50 billion
connected devices [23]. Among them, microcontroller units
(MCUs) make up the majority. It is projected that by 2020,
∗Work was primarily done while visiting the University of Georgia.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24308
www.ndss-symposium.org
there will be more than 35 billion MCU shipments [6]. These
small, resource-constraint devices are enabling ubiquitous con-
nections and have changed virtually every aspect of our lives.
However, all of these beneﬁts and conveniences come with
broader and acute security concerns. IoT devices are connected
into the Internet, which directly exposes them to attackers.
Since these devices process and contain conﬁdential data such
as people’s health data, home surveillance video, company
secrets, etc., once compromised, devastating consequences can
happen. For example, FreeRTOS [5], the leading operating
system (OS) for MCUs, was reported that
its 13 critical
vulnerabilities put a wide range of devices at risk of comprom-
ise [33]. In July 2019, urgent11, a set of 11 vulnerabilities hit
VxWorks, another popular MCU OS. Once exploited, these
bugs allow for remote code execution [51].
In-house software testing is crucial for the security of
the MCU software ecosystem. However, the development and
test environment for MCU devices is very different from that
for commodity hardware. Notably, the programs are cross-
compiled and downloaded to the target device by ﬂashing
the on-chip ROM. To debug a program, a hardware dongle
called in-circuit emulator (ICE) is used to bridge the target
device with the host via the JTAG interface. The host machine
then starts a GDBServer daemon that
interprets the ICE-
speciﬁc control commands to the commands understandable
by GDB. Software testing of MCU software highly depends
on the debugging features integrated in the chip. For example,
in ARM Cortex-M based MCUs, the Data Watch and Trace
(DWT) unit [7] can be used to proﬁle the ﬁrmware execution,
and the Embedded Trace Macrocell (ETM) unit [9] can be used
to collect the execution trace. However, it is clear that standard
software testing tools such as Valgrind [44], AddressSanitizer
(ASAN) [50] cannot be supported due to the very different
run-time environment. We argue that the tools designed for
x86 programs are more sophisticated and superior to those
designed for MCU ﬁrmware; indeed, binary rewriting and
instrumentation provide us with unprecedented insights to the
program execution, which enables us to ﬁnd software problems
more efﬁciently.
Based on this observation, this work explores the idea of re-
hosting MCU software and running them natively on commod-
ity hardware. There are at least three beneﬁts of this approach.
First, off-the-shelf dynamic analysis tools for x86 can be
readily used out-of-the-box. Second, compared with running
on real MCU devices, multiple instances can be launched
simultaneously, allowing for a scalable and paralleled analysis.
Third, the commodity hardware is much more powerful than
MCU devices. We can execute more testcases within a time
period.
Intuitively, with some manual efforts, we could possibly
port a particular library for MCU to the host machine and
efﬁciently analyze its security. However, this is ad-hoc, in-
accurate, and sometimes extremely difﬁcult. In particular, 1)
the libc used in MCU toolchains (such as newlib and redlib)
has different designs compared with a full ﬂedged libc imple-
mentation such as the GNU libc. For example, the ARM Mbed
OS makes use of the function software_init_hook() to
perform some target-speciﬁc early initialization, which is not
deﬁned in the GNU libc; 2) More importantly, a single library
is sometimes mingled with a set of supporting OS routines,
which must also be ported; 3) To make things worse, these
routines are subject to scheduling. Without considering the
invocation sequence, the intended logic can be easily violated;
4) If the rehosted code needs to access real hardware on MCU,
the behavior on the host becomes unpredictable. All of these
make ad-hoc porting a daunting task.
We propose para-rehosting, a new technique aiming at
making re-hosting of MCU software to commodity hardware
smoother. Different from ad-hoc library porting, we support
porting the MCU OS core entirely and allow for incremental
plug-and-play library porting. Speciﬁcally, we abstract
the
whole machine model that most MCU OSs follow and imple-
ment it (named PMCU) with the Portable Operating System
Interface (POSIX). Through a thin OS-speciﬁc glue layer,
PMCU can be compiled with upper-layer source code (includ-
ing libraries and tasks) into a normal user-space program on
the host. PMCU accurately models the common behaviors of
real MCUs. As such, basic OS primitives including scheduling,
preemption, atomicity, etc. can be supported automatically.
PMCU also models the memory layout of a real ﬁrmware
image. An MCU often has a ﬁxed memory map. MCU OSs
correspondingly provide a linker script
to control how a
memory region should be mapped into the physical address
space. To model the memory layout, we developed a template
linker script based on a popular MCU. It essentially squeezes
the whole run-time memory into a continuous memory region
in the address space of a host process.
To support hardware-speciﬁc peripherals, such as UART,
Ethernet, SD card and CRC, we propose HAL-based peripheral
function replacement. An HAL layer allows upper-layer OS
libraries to interact with the hardware device at an abstract
level rather than at the hardware level. We identify high-level
HAL functions and replace them with equivalent handlers
on the host. This simpliﬁes the porting effort as well as
improves I/O performance. Per HAL function, a set of para-
APIs are deﬁned for the HAL library to invoke. Correspond-
ingly, backend drivers are implemented on the host. It can be
shared among multiple HALs from different vendors. In this
sense, our design follows the spirit of para-virtualization in
which the guest OS has to be explicitly modiﬁed to beneﬁt
from optimized I/O implementation in the backend (thus the
name para-rehosting). To speedup backend development for
new peripherals, we categorize common HAL functions into
four types (IO, storage, computing accelerator, and dummy)
and implement the corresponding templates. Developers only
need to ﬁgure out the appropriate peripheral categorization and
quickly customize the implementation.
We have evaluated our approach against nine MCU OSs
including the widely deployed Amazon FreeRTOS, ARM
Mbed OS, Zephyr, LiteOS, etc. We successfully compiled
and executed 84.21%, 76.47%, 89.47% and 63.64% of all
the libraries shipped with FreeRTOS, ARM Mbed OS, Zephyr
and LiteOS respectively. Moreover, our HAL backends support
most peripherals in the SDKs of the NXP and STMicroelec-
tronics devices. To demonstrate the superiority of our approach
in terms of security testing, we further leveraged AFL [61] and
ASAN [50] to test several popular libraries in the ecosystems
of Amazon FreeRTOS, ARM Mbed OS, Zephyr and LiteOS.
Our tool has helped us ﬁnd 28 previously-unknown bugs. We
have responsibly reported all of them to the inﬂuenced vendors.
At the time of writing, 5 were conﬁrmed by CVE and the other
19 were conﬁrmed by vendors.
In summary, we made the following contributions.
• We proposed para-rehosting to natively port MCU
software on commodity hardware. It accurately mod-
els common MCU behaviors and depends on para-
APIs to support HAL-enabled hardware logic.
• We implemented the idea of para-rehosting by proto-
typing a portable MCU based on POSIX and a set of
para-APIs (and the backends). Our prototype supports
nine MCU OSs, including FreeRTOS, ARM Mbed
OS, Zephyr, and LiteOS currently.
• We used fuzz testing to analyze several popular lib-
raries used in MCU and identiﬁed 28 previously-
unknown bugs. Our tool is open source available at
https://github.com/MCUSec/para-rehosting.
II. BACKGROUND
A. Microcontroller Units
Until recent years, MCUs were considered as specialized
computer systems that are embedded into some other devices,
as contrary to general-purpose commodity computing systems
such as personal computers (PCs) or mobile devices. With
the emergence of IoT, now MCUs have been tasked with
more diverse missions and are at
the center of many of
the innovations in the cost- and power-efﬁcient IoT space.
Examples include home automation, wearable devices, smart
city, smart manufacturing, etc. [11].
MCUs have evolved from 8-bit design to 16-bit design.
Now, 32-bit MCUs have dominated the market, accounting for
55% of the total MCU sales [38]. In the MCU segment, the
major players include the ARM Cortex-M family MCUs, MIPS
MCUs, and Atmel AVR, etc. To keep energy-efﬁcient, MCUs
are equipped with limited computing and memory resources.
For example, the state-of-the-art ARM Cortex-M4 processor
often runs at a frequency of around 100 MHz and the size of
SRAM is about 200 KB.
2
software stack of the FreeRTOS as shown in Figure 1. Other
RTOS ecosystems follow a very similar design.
Amazon FreeRTOS provides both a RTOS kernel as well
as many libraries/middleware that make it easy to securely
connect to the cloud or other devices. At the core is a RTOS
kernel which is responsible for task management, scheduling,
memory management, interrupt management, message deliv-
ery, etc. Task is the basic scheduling unit in a RTOS, similar
to a thread in the Linux OS. Different from Linux threads, all
tasks in the RTOS share the same address space with kernel.
There are several built-in tasks that are automatically started
by the kernel. They are mainly used for system-level event
management.
There are three types of libraries, namely common libraries,
application libraries and portable layer libraries. Common lib-
raries extend the kernel functionality with additional data struc-
tures and functions, such as atomic operations. Application
libraries are standalone libraries for connectivity and remote
management, such as MQTT and device shadow. Typically, an
application library also acts as a dedicated system task, serving
for other tasks. Lastly, the portable layer libraries handle device
speciﬁcs. They serve as an adaptor layer for processors (e.g.,
ARM and MIPS) and peripherals (e.g., network). Many ports
for different hardware have been provided ofﬁcially or unofﬁ-
cially. In developing a port, developers are only responsible for
implementing a number of downstream APIs that the upper-
layer libraries rely on. Conversely, these downstream APIs
have to invoke certain upstream APIs provided by the RTOS
kernel to fulﬁll their functionality.
Hardware Abstraction Layer. Another important piece of
software in MCU ﬁrmware is provided chip vendors. For
example, STM32 provides each kind of chip with an SDK
that includes low-level hardware drivers as well as a hardware
abstraction layer (HAL) [55]. An HAL layer acts as a bridge
between software and hardware. It allows upper-layer libraries
to interact with a hardware device at a general and abstract
level rather than at the hardware level. Therefore, it is invoked
by the portable layer to interact with the peripherals.
III. OVERVIEW
Our work explores the portability problem of open-source
MCU OSs for the purpose of ﬁnding software bugs in them.
We ﬁrst present a motivating example. Then we give an
overview of the proposed para-rehosting technique.
A. Motivating Example
There has been a bunch of advanced dynamic analysis tech-
niques to test the security of software, such as fuzz testing [61],
memory checker [50], and dynamic instrumentation [36]. In
practice, a prerequisite of using these tools is that the target
binary must be executable on a PC. If we attempt to port a
particular MCU library, taking the MQTT library of FreeRTOS
as an example, many problems arise.
void IotMqtt_ReceiveCallback( ... )
{
...
_getIncomingPacket( pNetworkConnection, ..., &
incomingPacket );
}
3
Figure 1: FreeRTOS software stack
From the viewpoint of a programmer, the most remarkable
difference between PC/mobile processors and MCUs is that
MCUs do not support MMU. As a result, the application code
and the OS kernel code have to be mingled together in a
ﬂat memory address space. We call the resulting executable
binary as a ﬁrmware image. Without virtual memory sup-
port, the Linux kernel cannot run on top of MCUs. Another
characteristic of MCUs is that they are highly heterogeneous.
Each MCU could support a distinct set of peripherals. The
peripherals could be custom-made and thus have different
speciﬁcations.
B. Software Ecosystem for MCUs
Due to the lack of the MMU support, traditional OSs
such as Linux cannot run atop MCUs. Instead, since MCUs
have a long history of being used in safety-critical real-time
applications, many real-time operating systems (RTOSs) have
been developed for them. Given that MCUs have become
the driving hardware for the emerging IoT technology, big
companies have quickly begun to invest on building their
ecosystems for MCU devices. FreeRTOS [5], arguably the
most widely deployed RTOS for MCUs, has been acquired
by Amazon in 2017. As an essential part of the Amazon Web
Service (AWS), FreeRTOS has been extended with libraries
that enable local and cloud connectivity, security, and over-
the-air (OTA) updates. ARM Mbed OS [8], backed by ARM,
is another IoT RTOS dedicated for ARM MCU devices.
It includes all the needed features to develop a connected
product, including security, connectivity, an RTOS, and drivers
for sensors and I/O devices. Zephyr [57], backed by the Linux
Foundation, is an IoT RTOS that integrates all the necessary
components and libraries required to develop a full application.
Finally, LiteOS [30], backed by Huawei, is a lightweight IoT
RTOS that receives wide adoption in China. Based on a recent
IoT developer survey [20], FreeRTOS continues to be the
dominating RTOS for constrained IoT devices, while ARM
Mbed OS, Zephyr and LiteOS are creating successful open
source communities.
Software Stack. It is quite clear from the aforementioned facts
that big companies are developing their own IoT ecosystems.
They aim to create a smooth and pleasant experience for
developers by providing a comprehensive software stack and
an active community. Eventually, the developers would stick
to their ecosystem. In what follows, we brieﬂy introduce the
TasksRTOS KernelCommon LibsHardware DriversProcessorPeripheralsPeripheral Portable LayerApplication LibsProcessor Portable LayerHALHardware Independent CodePortable Layer CodeHardware Dependent CodeThird-party and Manufacturer ProvidedThird-party ProvidedChip Vendor ProvidedFigure 2: Para-rehosting overview
Figure 3: MCU OS execution with two tasks
This function is invoked whenever the MQTT task receives
data from the network (recall
that MQTT is an applica-
tion library). The function _getIncomingPacket actually
fetches the data from the network connection maintained in
pMqttConnection->pNetworkInterface. More spe-
ciﬁcally, the NetworkInterface is also manipulated by
another task called IP-task. The MQTT task and the
IP-task synchronize with each other through the Queue
mechanism deﬁned by the FreeRTOS kernel. To port
the
MQTT library, it becomes essential to also port the IP-task
(library-dependence) and the kernel (kernel-dependence).
In the IP-task, if we continue to track down the source
code, it will eventually call the MAC driver level function
SPI_WIFI_ReceiveData() (on the STM32f756 chip),
which in turn uses the SPI protocol to transfer data. Under
the hook, it receives an amount of data in no-blocking mode
with interrupt. To enable interrupt, the following statement is
invoked.
__HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
The macros is actually deﬁned as
#define __HAL_SPI_ENABLE_IT(__HANDLE__, __INTERRUPT__)
SET_BIT((__HANDLE__)->Instance->CR2, (__INTERRUPT__))
It sets certain bits of a hardware register at a ﬁx address
to enable interrupt. Na¨ıvely compiling this code will lead to
unpredictable behaviors or even crash the program (hardware-
dependence). Due to the aforementioned library-dependence,
kernel-dependence and hardware-dependence issues, port-
ing an MCU library to another host is regarded as a very
daunting and tedious task.
B. Para-rehosting
We propose para-rehosting to ease the complexity of port-
ing MCU software. In para-rehosting, we provide common
backend implementations in the host machine that simulate
processor and peripheral behaviors. The upper-layer software
only needs slight modiﬁcations to accommodate the backend.
With para-rehosting, we can compile the whole RTOS logic,
including the kernel, built-in tasks, normal tasks altogether into
a single host program. They share the same virtual address
space of a process on the host, just as they share the same ﬂat
physical address space on a real MCU.
As shown in Figure 2, the proposed system is comprised
of two major components. The portable MCU (PMCU) is
a host backend that models the common functions of an
MCU and the available memory resources on it. It can be
easily ported to different MCU OSs. Speciﬁcally, PMCU
simulates task scheduling and the system tick. It also provides
basic synchronization primitives to MCU OSs. All of these
functions are essential for an MCU OS. Our implementation
is modularized. Each abstract module is placed in a separate C
source ﬁle and included in the project during compilation on
demand. For each supported MCU OS, there is a thin glue layer
to accommodate speciﬁc OS requirements. Moreover, we use
a linker script to manage the layout of the resulting program
so that it resembles that on a real device. With PMCU, we can
accurately re-host an MCU ﬁrmware that does not rely on any
hardware-speciﬁc peripherals.
The other component, called HAL-based peripheral func-
tion replacement, handles hardware-speciﬁc peripheral logic.
As such, it addresses the hardware-dependence issue. Since
HALs abstract away low-level hardware details from the
programmer, we can easily replace its high-level function with
an equivalent handler. Note that the HALs for devices from
different vendors are typically different. We cannot simply
implement a high-level replacement and use it for all the
devices. We solve this problem by implementing the HAL
function’s semantics as a common backend, and require some
manual work for each HAL library to invoke the backend
drivers. Correspondingly, the parameters need to be adjusted
and return values need to be captured properly.
IV. PORTABLE MCU
Portable MCU (PMCU) models the common functions
of an MCU and the available memory resources on it. Our
prototype uses the widely adopted POSIX interface to simulate
the abstract common functions. In this way, the rehosted ﬁrm-
ware can be executed and analyzed in all UNIX-like systems
(including Linux). In Table VII, we summarize the needed
changes to port PMCU to popular MCU OSs. It includes
the upstream functions that portable layer libraries rely on,
the downstream functions that they provide, and the common
backend functions that they invoke to actually simulate the
abstract MCU.
A. Abstracting Machine Functions
1) Task Management: Different from traditional MCU sys-
tems in which a single task monopolizes the processor, in the
IoT era, a variety of tasks run simultaneously. This necessit-
ates a multi-programming environment. Multi-task support has
become a standard feature in major MCU OSs, which PMCU
needs to simulate correspondingly.
We use a process in Linux to simulate the entire MCU
ﬁrmware, and a thread to simulate a task. The thread-process
4
Task ManagementPMCU GlueRTOSMQTTFATFSlwipSynchronization PrimitiveSystem TickIO with STDIO and PcapSimulationPMCUComputing Accelerator with OpenSSL SimulationStorage with Memory and File SimulationHAL BackendsComputing Accelerator HALIO HALStorageHALPeripherals GlueTask1Task2KernelPMCUt0t1t2t3t4t5t6t7model of Linux provides the basis for simulating the task-
ﬁrmware model of MCU. In particular, in Linux, all threads
share the same virtual memory space of a process, and have
their own stacks. In MCU ﬁrmware, all tasks share the same
physical memory space of a MCU, and have their own stacks.
In PMCU, when a task is created by the MCU OS, a pthread
is created, with the start_routine initialized to be the
starting function of the task. Task switch is also supported
transparently because the pthread library is responsible for
saving and restoring the context. In most MCU OSs, at a
particular time, only one thread can be executed due to the
immature multi-core support [41], [48]. As a result, we need
to ensure that a thread exclusively occupies the current process.
That is, although conceptually there are multiple threads, only
one is runnable. This is achieved by using a combination of the
signal and mutex mechanisms in POSIX. Only the thread
holding the mutex is allowed to execute. When the current
thread yields or is preempted, it unlocks the mutex to allow
others to execute and suspends itself by calling sig_wait().
To resume, it must receive a signal SIGUSR1 and grab the
same mutex in the corresponding signal handler.
By default, when creating a thread, the pthread library
allocates a memory region used for stack, which is out of the
control. In Section IV-B, we explain how to make sure the
location of a task stack is within the memory map of a real
MCU.
2) System Tick: The MCU’s time is shared among multiple
tasks simultaneously. A timer, called system tick is usually
used to invoke the scheduler to switch tasks periodically. To
support preemption, the RTOS kernel is periodically awakened
by a system timer, which is often implemented by a counter
hardware in a real MCU. Naturally, we leverage the system
timer in POSIX to periodically raise a timer signal to simulate
this process. In particular, we use setitimer() to deliver a
SIGVTALRM signal of type ITIMER_VIRTUAL periodically.
ITIMER_VIRTUAL timer counts down against the user-mode
CPU time consumed by all threads in the process. As such,
it avoids issues caused by unpredictable time allocated to
a process. Inside the SIGVTALRM signal handler, PMCU
invokes the scheduler to resume the next task. Note that the
scheduling algorithm and task priority are totally transparent
to PMCU. Note that due to the unpredictable behavior of
the timer on the Linux machine, we cannot guarantee that
each simulation yields exactly the same execution path. This
is also the case on a real device. We demonstrate that this
nondeterministic behavior does not inﬂuence bugs ﬁnding in
practice later.
the execution is subject
3) Synchronization Primitive: Synchronization is a basic
OS primitive. Once violated,
to
crashes. For example, when a task enters the critical section,
some RTOSs need to disable interrupts (including the system
tick). If PMCU allows system tick (and thus task scheduling)
in a critical section, race condition may happen. PMCU
simulates disabling interrupt by keeping track of the current
interrupt status in a global variable PMCU_INT_ENABLED.
When a SIGVTALRM signal occurs, if PMCU_INT_ENABLED
is cleared, the handler returns immediately with the PMCU_-
pending variable set which indicates the scheduler should be
called after exiting the critical section. Otherwise, the handler
performs a normal scheduling process. Additionally, PMCU
ensures that it does not interfere with the RTOS kernel itself,
since PMCU also needs to access critical RTOS data structures.
4) A Running Example: In Figure 3, we showcase a run-
ning example for an MCU OS execution with two task. Task1
is executing until t0 when a SIGVTALRM signal occurs
requesting for a potential task switch. The handler then kicks
in (represented by PMCU) to invoke the systick handler in
the kernel (t0-t1). The handler in the kernel selects the next
task and sends a signal SIGUSR1 (t1-t2). The signal handler
simply schedules the thread corresponding to the selected task
(Task2) to be runnable (t2-t3). As a result, Task2 begins
to execute starting from t3. The execution sequence from t4
to t7 is self-explanatory.
B. Memory Layout Enforcement
As mentioned before, the memory layout of the rehosted
program (including code, data, stack, bss, etc.) is different
from that in a real device. For example, the default linker
on a Linux machine places the code segments starting from
0x08048000 on x86-32 and from 0x400000 on x86-64 (if
PIE is not enabled), while the linker for an MCU compiler
typically places the code segment starting from zero. This is
controlled by a ﬁle called linker script. Typically, an MCU
has a ﬂash memory starting from zero and an separate SRAM
at another offset. To be able to more accurately capture the
program misbehavior caused by memory errors, we need to
place the code and data segments following the memory map
in the MCU. We could simply reuse the linker script available
for an MCU ﬁrmware, however, three problems arise.
First, the stack of a Linux program is allocated by the
kernel rather than based on the linker script. Speciﬁcally, the
stack grows downwards from 0x7FFFFFFF on x86-32 and
0x7fbFFFFFFF on x86-64 (without regard to randomization).
Moreover, the default stack size of a thread is limited to 2 MB.
This number is even beyond the total SRAM size on many
MCUs. To solve this problem, we implemented a trampo-
line function called stack_switching(void *newSP,
void *newFun) in assembly that explicitly manipulates the
SP register so that the thread uses a newly speciﬁed stack.
It then jumps to the function newFun(). We wrapped the
start routine of new tasks (say start_routine()) into
stack_switching(newSP,start_routine), so that
the function switches the stack to the one allocated based
on the MCU linker script and then jumps to the real start
function start_routine(). We note that similar results
can be achieved by using the makecontext/setcontext
APIs.
Second, the heap management in MCU OSs conﬂicts with
that in Linux. The MCU libc allocator does not implement
the underlying _sbk() but relies on the developer to provide
a device-speciﬁc implementation according to the heap range
speciﬁed in the linker script. Therefore, the provided _sbk()
conﬂicts with that in the Linux libc allocator. We have two
choices here. First, we could suppress the Linux allocator. In
this way, we can precisely simulate the heap layout as speciﬁed
in the linker script. Second, we could suppress the ﬁrmware-
provided _sbk() and use the Linux version. In this way,
we sacriﬁce the accurate emulation of memory layout. This
might cause problems in bug re-production and exploitation.