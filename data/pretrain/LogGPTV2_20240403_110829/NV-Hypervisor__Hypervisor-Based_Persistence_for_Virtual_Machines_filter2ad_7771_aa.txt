title:NV-Hypervisor: Hypervisor-Based Persistence for Virtual Machines
author:Vasily A. Sartakov and
R&quot;udiger Kapitza
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
NV-Hypervisor: Hypervisor-based Persistence
for Virtual Machines
Vasily A. Sartakov
TU Braunschweig
PI:EMAIL
Rüdiger Kapitza
TU Braunschweig
PI:EMAIL
Abstract—Power outages and subsequent recovery are major
causes of service downtimes. This issue is ampliﬁed by the
ongoing trend of steadily growing in-memory state of Internet-
based services which increases the risk of data loss and extends
recovery time. Protective measures against power outages, such
as uninterruptible power supply are expensive, maintenance-
intensive and often fragile. With the advent of non-volatile
random-access memory (NVRAM) provided by commodity
servers, there is a scalable, less costly and robust alternative
to recover from power outages and other failures. However, as
of today, off-the-shelf software is not ready for beneﬁting from
NVRAM.
We present NV-Hypervisor a lightweight hypervisor ex-
tension that
transparently provides persistence for virtual
machines. NV-Hypervisor paves the way for utilizing NVRAM
in virtualized environments (i.e.,
infrastructure-as-a-service
clouds) and protects stateful services such as key-value stores
and databases from data loss and time-consuming recovery.
Keywords-NV-RAM; Hypervisor; Operating Systems; Cloud
Computing;
I. INTRODUCTION
In today’s rapidly progressing information society, we rely
on the availability of Internet-based services of all kinds.
Increasingly often services are delivered on top of virtualized
environments such as provided by infrastructure-as-a-service
clouds. To cope with the demand for providing services
that are available 24/7, service implementations as well as
hosting infrastructure should be resilient to faults. One cause
of service disruptions is power outages that can be addressed
by fault tolerance features of service implementations (i.e.,
a crash-tolerant design) and additional infrastructure, such
as uninterruptible power supply. In the ﬁrst case, typically, a
time-consuming recovery operation is required once power
resumes and there is still a risk of data loss. In the second
case, additional infrastructure is required which is expensive,
maintenance-intensive and nevertheless fragile [1].
With the advent of non-volatile random-access memory
(NVRAM) provided by commodity servers, in-memory data
can be retained without an external source of power. It not
only enables to tolerate power outages without data loss but
also provides additional beneﬁts such as preserving data in
case of crashes in general. Thus, it offers the opportunity to
implement measures for persistence and fault-tolerance in
main memory. The latter simpliﬁes service implementations
and provides potential for performance improvements, e.g.
write ahead logging to disk can be skipped [2].
Over the recent years multiple technical variants of how
to implement NVRAM have been proposed. For example,
byte-addressable memory, based on phase-change random-
access memory [3] or spin-transfer torque random-access
memory [4], has a read/write latency similar to commodity
DRAM but promises beside persistence as well as higher
capacity. While these technologies are already in a stable state,
initial solutions that are already available on the market utilize
commodity memory technology [5]. For example, in form
of Non-Volatile Dual In-line Memory Modules (NVDIMMs)
which are DRAM memory modules that are backed by a
ﬂash memory of the same size and a capacitor. In case of a
voltage drop the module uses the capacitor energy to mirror
DRAM state to the ﬂash memory. At recovery time, the state
stored in ﬂash memory is written back to volatile memory.
The availability of persistent main memory needs to be
reﬂected throughout the whole software stack. So far a
number of different approaches have been proposed: at
the user-space level as a new memory allocator [6], at the
kernel level [7], where persistence becomes a new feature of
processes [8], and system-wide [9]. All of these approaches
require software modiﬁcations to utilize the support of
NVRAM, thus legacy systems cannot proﬁt right away from
the introduction of NVRAM.
In this paper, we propose hypervisor-based persistence as a
means to enable NVRAM-usage for legacy virtual machines.
Thereby, neither system nor application software of a virtual
machine which has to be adapted as NVRAM-support is
transparently provided by the virtualization layer. We have
implemented hypervisor-based persistence as part of NV-
Hypervisor, which builds a lightweight extension to the
QEMU 1 virtualization platform. For evaluating our approach,
we have used a market available capacitor-backed NVDIMM
solution [5] and measured the time to recover a database after
a power outage. Results are promising, while a server without
NVRAM support recovers slightly faster, our NV-Hypervisor-
based implementation enables services to continue request
1QEMU - www.qemu.org
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.64
654
COMPARISON OF NV-RAM INTEGRATION ABSTRACTIONS
Table I
Type of Persistence
Memory Connection
Language/library-based
Process-based
System-wide
Hypervisor-based
Hybrid, Parallel
Hybrid, Parallel
NV-RAM
NV-RAM
NV-RAM Abstraction
Variables and objects
Whole programs
All programs and kernel
All programs and kernel
Modiﬁcation
Kernel, libc, programs
Kernel
Kernel
No modiﬁcation for VMs
processing at full speed, immediately after recovery, without
any data loss.
In the remainder of this paper, we ﬁrst provide an overview
of related approaches. Next, Section III and Section IV
describe the design and implementation of NV-Hypervisor,
respectively. In Section V we present initial evaluation results
and in Section VI we discuss about future improvements.
Finally, Section VII concludes the paper.
II. USES OF NON-VOLATILE MEMORY
As NVRAM support builds on hardware that is integrated
by software, we give a brief introduction to NVRAM. Next,
we focus on related approaches by detailing how to utilize
NVRAM to provide persistence at certain abstraction levels.
A. Basics of non-volatile memory
Data that are stored in NVRAM persist without an external
source of power. Thus, it is preserved in case of a power
outage or a system crash that causes a reboot.
As of today, NVRAM is implemented by multiple compet-
ing technologies. In particular spin-transfer torque random-
access memory and phase-change random-access memory as
well as capacitor-based solutions combined with traditional
memory technology [5] are gaining ground. As each of
them having individual strengths and weaknesses,
is
unclear which technology will gain wide-spread acceptance.
Due to its read/write performance and because it is byte
addressable, it can be integrated as main memory or as an
extension/replacement for classical storage. In this paper, we
focus on how NVRAM can be utilized as main memory.
Fortunately most existing proposals about how to integrate
NVRAM support in system and application software are
fairly independent from the actual hardware implementation
and demand only for support of ordered, atomic writes and
persistence.
it
Besides the technical realization of NVRAM, its hardware
integration is an important aspect. Some researchers envision
future systems as a hybrid architecture, where NVRAM
and DRAM share the same system bus and the responsible
memory controller maps the different types of memory
to distinct address ranges [10]. Alternatively, a system
could purely rely on NVRAM and omit volatile memory
altogether [9].
In our work and in the midterm, we consider a hy-
brid architecture as more realistic. Despite recent progress,
NVRAM comes as attached with additional costs that hinder
an immediate and complete supersession of conventional
volatile memory.
B. Software-based integration
The software support of NVRAM determines at which
abstraction level main memory persistence is provided.
Language- and library-based persistence: Persistent
memory can be offered to user-space applications as a new
type of memory provided by a special allocator that manages
the available persistent memory. In this way, programs only
beneﬁt from non-volatile memory, if they are explicitly
programmed against a speciﬁc API offered by approaches
implementing language- or library-based persistence. Such
an approach is beneﬁcial for systems where NVRAM and
DRAM co-exist, e.g. due to limited availability of non-volatile
memory.
NV-Heaps [7] and Mnemosyne [6] are examples for
NVRAM abstractions at the application level. While the
former provides a set of primitives to manage persistent
objects offered by so-called NV-Heaps, the latter introduces
beside other things a special keyword to C in order to make
variables persistent.
Such a language- or library-based persistence requires
modiﬁcation to the kernel, the system libraries (i.e, the libc-
environment) and the applications themselves.
Process-based persistence: More coarse-grained is the
idea of providing the abstraction of process-based NVRAM
support as proposed by NV-process [8]. At creation time
of a process, it is either mapped to volatile or non-volatile
memory (i.e. as a NV-process). In case of a power fail-
ure, the NV-process instances persist in NVRAM and can
continue running from where they were left off as soon as
power returns and the operating system reboots. NV-process
uses independent virtual and physical memory organization
mechanisms implemented by the operating system, which
guarantees the same mapping between physical and virtual
addresses of the process after reboots.
Legacy and proprietary user-space software can take
it requires
advantage of process-based persistence, but
modiﬁcations to the kernel.
System-wide persistence: Alternatively, an entire system
can run solely based on non-volatile memory. Whole-system
persistence [9] involves all parts of the system being executed
directly in non-volatile memory. Volatile data in CPU is
protected against loss by use of a ﬂush-on-fail mechanism
which works at the time of power failure and saves volatile
655














+
%#
"& 

"


(

#

	
(



$
,

#

Figure 1. System overview



















*
)



data such as registers and caches stored in the CPU to
NVRAM.
System-wide persistence transparently supports legacy and
proprietary user-space software, but it requires modiﬁcations
to the kernel.
Hypervisor-based persistence: In this paper, we propose
hypervisor-based persistence. It introduces NVRAM at the
level of virtual machines. On creation of a virtual machine
it is decided to be volatile or non-volatile. In the latter case
it can be recovered from a power outage or a system crash.
Hypervisor-based persistence requires integration of non-
volatile memory at the virtualization layer, but otherwise it
is transparent to virtual machines.
Comparison: Table I summarizes the discussed related
approaches. While language- and process-based persistence
explicitly introduces a hybrid system, where volatile and non-
volatile state co-exist, whole-system and hypervisor-based
persistence only relies on non-volatile memory. In the latter
case this is of course restricted to virtual machines. Finally,
hypervisor-based persistence is fully transparent to virtual
machines, as NVRAM is integrated at the virtualization
layer. Therefore, it is well-suited for legacy systems and
can be easily integrated in virtualized environments, such as
infrastructure-as-a-service clouds.
III. NV-HYPERVISOR
In order to provide hypervisor-based persistence for virtual
machines, we developed NV-Hypervisor as a lightweight
layer that extends a commodity hypervisor by integration of
non-volatile memory. In the following, we detail our system
assumptions and the architecture of NV-Hypervisor as well
as basic operations like handling a power outage and the
subsequent recovery procedure.
A. Assumptions and hardware support
We assume a commodity server system that is equipped
with DRAM and NVRAM, both connected to a shared system
bus. Such a hybrid system architecture is in line with market
available system designs. Furthermore, in our system model
all CPU state such as registers and caches are volatile and
will be lost in case of a power outage.
To preserve recent execution results that only reside in
the volatile CPU state, as well as to implement essential
housekeeping functionalities regarding the management of
non-volatile memory, we assume the availability of a
power outage detector (POD). This detector measures the
current voltage of the external power supply and generates
an interrupt if power fails (see Heiser et al. [11] for a
possible design). Thereby, we assume that the residual energy
contained in capacitors of the power supply is enough to
save relevant volatile CPU state to NVRAM after detecting
a power outage. In fact, recent experiments indicate that
these capacitors provide residual energy for generating
stable voltage between 40 to 60 ms after detecting a power
outage [11], which sufﬁces our demands (see Section V).
B. System architecture
NV-Hypervisor builds a lightweight extension to an exist-
ing virtualization platform. Our architecture assumes a host
operating system that manages the hardware and a hypervisor
providing support for executing virtual machines.
Figure 1 outlines a system overview aligned with our
QEMU-based implementation. The host operating system is
extended by a POD-driver. This driver handles interrupts
indicating an imminent power outage, detected by the
POD. The NVRAM-driver provides support for non-volatile
memory and is responsible for adding physical NVRAM
addresses to the memory map ().
Beside these kernel-level extensions, a special memory
allocator for managing the NVRAM is provided as a library
(). The hypervisor uses this library to allocate VMs in
NVRAM (). Furthermore, the hypervisor is equipped with
a power outage handler that is triggered by the POD-driver
in case of power drop. It is responsible for saving volatile
management state of persistent virtual machines, e.g. CPU
state, to NVRAM. Finally, internal management functions
and the user interface of the hypervisor are extended to
enable the management of persistent virtual machines.
C. Creation of a persistent virtual machine
Creation and startup of a persistent virtual machine is very
similar to an ordinary volatile virtual machine but requires
two modiﬁcations:
• If the user instructs the hypervisor to create a persistent
virtual machine, our memory allocator has to assign
space in NVRAM.
• Information about the assigned memory and other long-
lived state needs to be made persistent, e.g. by using a
conﬁguration ﬁle, to enable a recovery.
D. Handling of a Power Fault
Imminent power outage is handled by the following four
consecutive steps:
 The POD ﬁres a non-maskable interrupt, once a drop
of the input voltage is detected.
656
 The interrupt is caught by the POD-driver, which
notiﬁes the NV-Hypervisor about the upcoming power
outage.
 The NV-Hypervisor saves volatile state of virtual