1: load accumulator1 0
a1: 0, a2: 0, stack: []
5: push accumulator1
a1: 0, a2: 0, stack: [0]
7: load accumulator1 17488
a1: 17488, a2: 0, stack: [0]
15: push accumulator1
a1: 17488, a2: 0, stack: [0, 17488]
17: load accumulator1 16758
a1: 16758, a2: 0, stack: [0, 17488]
25: push accumulator1
a1: 16758, a2: 0, stack: [0, 17488, 16758]
```
The first interesting part, after all the values are loaded to the stack, is:
```
366: load accumulator2 1
370: --- label ---
371: pop accumulator1
373: push accumulator2
375: push accumulator1
377: load accumulator1 389
383: push accumulator1
385: push accumulator2
387: jmp 1040
389: xor 
390: print_top 
```
Let's add comments to this section:
```
366: load accumulator2 1 
370: --- label ---
371: pop accumulator1           ; load next value from stack to acc1
373: push accumulator2          ; push local variable #1 (1 for the first iteration, based on line 366)
375: push accumulator1          ; push local variable #2
377: load accumulator1 389      ; load return address
383: push accumulator1          ; push return address to stack
385: push accumulator2          ; push parameter to upcoming function
387: jmp 1040                   ; call function at 1040
389: xor                        ; XOR value returned by function via stack with local variable #2
390: print_top                  ; print the result
```
Here's the runtime data for this logic:
```
// Iteration #1
370: --- label ---
371: pop accumulator1
a1: 106, a2: 1, stack: [339, 208, 216, 242, 172, 74, 49, 119, 113, 119]
373: push accumulator2
a1: 106, a2: 1, stack: [208, 216, 242, 172, 74, 49, 119, 113, 119, 1]
375: push accumulator1
a1: 106, a2: 1, stack: [216, 242, 172, 74, 49, 119, 113, 119, 1, 106]
377: load accumulator1 389
a1: 389, a2: 1, stack: [216, 242, 172, 74, 49, 119, 113, 119, 1, 106]
383: push accumulator1
a1: 389, a2: 1, stack: [242, 172, 74, 49, 119, 113, 119, 1, 106, 389]
385: push accumulator2
a1: 389, a2: 1, stack: [172, 74, 49, 119, 113, 119, 1, 106, 389, 1]
387: jmp 1040
a1: 389, a2: 1, stack: [172, 74, 49, 119, 113, 119, 1, 106, 389, 1]
// Function 1040 runs
a1: 2, a2: 389, stack: [242, 172, 74, 49, 119, 113, 119, 1, 106, 2]
389: xor
a1: 2, a2: 389, stack: [216, 242, 172, 74, 49, 119, 113, 119, 1, 104]
390: print_top
h
a1: 2, a2: 389, stack: [208, 216, 242, 172, 74, 49, 119, 113, 119, 1]
// Iteration #2
371: pop accumulator1
a1: 119, a2: 2, stack: [264, 339, 208, 216, 242, 172, 74, 49, 119, 113]
373: push accumulator2
a1: 119, a2: 2, stack: [339, 208, 216, 242, 172, 74, 49, 119, 113, 2]
375: push accumulator1
a1: 119, a2: 2, stack: [208, 216, 242, 172, 74, 49, 119, 113, 2, 119]
377: load accumulator1 389
a1: 389, a2: 2, stack: [208, 216, 242, 172, 74, 49, 119, 113, 2, 119]
383: push accumulator1
a1: 389, a2: 2, stack: [216, 242, 172, 74, 49, 119, 113, 2, 119, 389]
385: push accumulator2
a1: 389, a2: 2, stack: [242, 172, 74, 49, 119, 113, 2, 119, 389, 2]
387: jmp 1040
a1: 389, a2: 2, stack: [242, 172, 74, 49, 119, 113, 2, 119, 389, 2]
// Function 1040 runs
a1: 3, a2: 389, stack: [216, 242, 172, 74, 49, 119, 113, 2, 119, 3]
389: xor
a1: 3, a2: 389, stack: [208, 216, 242, 172, 74, 49, 119, 113, 2, 116]
390: print_top
t
a1: 3, a2: 389, stack: [339, 208, 216, 242, 172, 74, 49, 119, 113, 2]
// Iteration #3
371: pop accumulator1
a1: 113, a2: 3, stack: [344, 264, 339, 208, 216, 242, 172, 74, 49, 119]
373: push accumulator2
a1: 113, a2: 3, stack: [264, 339, 208, 216, 242, 172, 74, 49, 119, 3]
375: push accumulator1
a1: 113, a2: 3, stack: [339, 208, 216, 242, 172, 74, 49, 119, 3, 113]
377: load accumulator1 389
a1: 389, a2: 3, stack: [339, 208, 216, 242, 172, 74, 49, 119, 3, 113]
383: push accumulator1
a1: 389, a2: 3, stack: [208, 216, 242, 172, 74, 49, 119, 3, 113, 389]
385: push accumulator2
a1: 389, a2: 3, stack: [216, 242, 172, 74, 49, 119, 3, 113, 389, 3]
387: jmp 1040
a1: 389, a2: 3, stack: [216, 242, 172, 74, 49, 119, 3, 113, 389, 3]
// Function 1040 runs
a1: 5, a2: 389, stack: [208, 216, 242, 172, 74, 49, 119, 3, 113, 5]
389: xor
a1: 5, a2: 389, stack: [339, 208, 216, 242, 172, 74, 49, 119, 3, 116]
390: print_top
t
a1: 5, a2: 389, stack: [264, 339, 208, 216, 242, 172, 74, 49, 119, 3]
// Iteration #4
371: pop accumulator1
a1: 119, a2: 4, stack: [267, 344, 264, 339, 208, 216, 242, 172, 74, 49]
373: push accumulator2
a1: 119, a2: 4, stack: [344, 264, 339, 208, 216, 242, 172, 74, 49, 4]
375: push accumulator1
a1: 119, a2: 4, stack: [264, 339, 208, 216, 242, 172, 74, 49, 4, 119]
377: load accumulator1 389
a1: 389, a2: 4, stack: [264, 339, 208, 216, 242, 172, 74, 49, 4, 119]
383: push accumulator1
a1: 389, a2: 4, stack: [339, 208, 216, 242, 172, 74, 49, 4, 119, 389]
385: push accumulator2
a1: 389, a2: 4, stack: [208, 216, 242, 172, 74, 49, 4, 119, 389, 4]
387: jmp 1040
a1: 389, a2: 4, stack: [208, 216, 242, 172, 74, 49, 4, 119, 389, 4]
// Function 1040 runs3
a1: 7, a2: 389, stack: [339, 208, 216, 242, 172, 74, 49, 4, 119, 7]
389: xor
a1: 7, a2: 389, stack: [264, 339, 208, 216, 242, 172, 74, 49, 4, 112]
390: print_top
p
a1: 7, a2: 389, stack: [344, 264, 339, 208, 216, 242, 172, 74, 49, 4]
```
These are the first four iterations which print out "http". We can see that the variable passed to `func_1040` is a counter.
The return value from the function is `[2, 3, 5, 7]` and if we go on, `[2, 3, 5, 7, 11, 101, 131, 151, 181, 191]`.
This return value is XORed with the original value from the stack, producing the plaintext.
Let's perform a quick test for this theory:
```python
>>> a = [2, 3, 5, 7, 11, 101, 131, 151, 181, 191]
>>> b = [106, 119, 113, 119, 49, 74, 172, 242, 216, 208]
>>> for x, y in zip(a, b):
...     sys.stdout.write(chr(x^y))
http://emo
```
Looks good! So, if we could predict what the function will return, we can use this to XOR with the values pushed to the stack and get the message.
If it isn't obvious from just staring at it, we can always search for the sequence in Google and come up with the official name: [Palindromic Primes](https://oeis.org/A002385): Prime numbers whose decimal expansion is a palindrome. The only catch: The program uses 99 as the index into the sequence for the second chunk of values (see line 544) and 765 for the third chunk (see line 997).
The following code decodes all three chunks:
```python
from itertools import *
from itertools import count
#https://stackoverflow.com/questions/34853034/find-palindromic-primes-in-python
                                         # ideone.com/aVndFM
def postponed_sieve():                   # postponed sieve, by Will Ness      
    yield 2; yield 3; yield 5; yield 7;  # original code David Eppstein, 
    sieve = {}                           #   Alex Martelli, ActiveState Recipe 2002
    ps = postponed_sieve()               # a separate base Primes Supply:
    p = next(ps) and next(ps)            # (3) a Prime to add to dict
    q = p*p                              # (9) its sQuare 
    for c in count(9,2):                 # the Candidate
        if c in sieve:               # c's a multiple of some base prime
            s = sieve.pop(c)         #     i.e. a composite ; or
        elif c 
Humans + Cauliflower network
  Browse through dozens! of profiles
  Some of our most active users:
    Jade
    Amber
    SarahH
  Register now!
```
After visiting several pages, we finally find the flag in Amber's profile:
![](images/amber.png)
The flag: CTF{Peace_from_Cauli!} ðŸ˜„