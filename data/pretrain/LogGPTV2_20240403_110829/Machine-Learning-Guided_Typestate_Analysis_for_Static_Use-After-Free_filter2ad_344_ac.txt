(i.e., ϕ-node) n ∈ JointNode has two incoming edges InEdдe0 (n)
and InEdдe1 (n), and a single outgoing edge; (2) a branch node
3.2.1
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue
Table 2: 35 Features used by the SVM classifier for a UAF sample ⟨f ree (p), use (q)⟩, where o ∈ pt (p) ∩ pt (q).
Container Boolean o is a container (e.g., vector or map) or an element of a container
Type Description
Feature
Array Boolean o is an array or an element of an array
Struct Boolean o is a struct or an element of a struct
IsLoad Boolean use(q) is a load instruction
IsStore Boolean use(q) is a store instruction
IsExtCall Boolean use(q) is an external call
GlobalFree Boolean free(p), where p is a global pointer
GlobalUse Boolean use(q), where q is a global pointer
CompatibleType Boolean p and q are type-compatible at free(p) and use(q)
InSameLoop Boolean free(p) and use(q) are in the same loop
InSameRecursion Boolean free(p) and use(q) are in the same recursion cycle
Integer number of functions in the shortest path from free(p) to use(q) in the program’s call graph
DiffIteration Boolean use(q) appears after free(p) via a loop back-edge
Dom Boolean free(p) dominates use(q)
PostDom Boolean use(q) post-dominates free(p)
#IndCalls
Integer number of indirect calls in the shortest path from free(p) to use(q) in the program’s call graph
UseBeforeFree Boolean a UAF pair, free(p) and use(q), is also a use-before-free
Group
Type Information
Control Flow
Common
Programming
Practices
Points-to
Information
#FunctionInBetween
ID
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26 SizeOfPointsToSetAtFree
27
SizeOfPointsToSetAtUse
#UAFSharingSameFree
28
#UAFSharingSameUse
29
30
#Aliases
31
32
33
34
35
ReAllocAfterFree Boolean p is redefined to point to a newly allocated object immediately after free(p)
NullifyAfterFree Boolean p is set to null immediately after free(p)
ReturnConstInt Boolean a const integer is returned after free(p)
ReturnBoolean Boolean a Boolean value is returned after free(p)
Casting Boolean pointer casting is applied to q at use(q)
RefCounting Boolean o is an reference-counted object
ValidatedFreePtr Boolean null checking for p before free(p)
ValidatedUsePtr Boolean null checking for q before use(q)
Integer number of objects pointed to by p at free(p)
Integer number of objects pointed to by q at use(q)
Integer number of UAF pairs sharing the same free(p)
Integer number of UAF pairs sharing the same use(q)
Integer number of pointers pointing to o
AllocInLoop Boolean o is allocated in a loop
AllocInRecursion Boolean o is allocated in recursion
LinkedList Boolean o is in a points-to cycle (signifying its presence in a linked-list)
SamePointer Boolean p and q at free(p) and use(q) are the same pointer variable
DefinedBeforeFree Boolean q at use(q) is defined before free(p)
Table 3: Program statements in the LLVM-like SSA form.
p, q, i ∈ T (Top-level Vars), a, o∈A (Address-taken Objs), c, f ld ∈ C (Consts)
uop
bop
E
use (p)
∈
∈
::= p, q | c | E1 bop E2 | uop E
::= ∗p =q | q =∗p | p[i] =q | q =p[i]
{++,−−, !}
{+,−,×, /, &&, ||, ==, (cid:44), , ≤, ≥}
unary operators
binary operators
scalar expressions
| p→ f ld =q | q =p→ f ld
memory access
scalar statement
StmtNode::= p = E
| p =&a | p =malloco | use (p) | f ree (p) memory statements
nE ∈ BranchNode with a branch condition expression E has a single
incoming edge InEdдe0 (n) and two outgoing edges, OutEdдe1 (n) if
E evaluates to true and OutEdдe0 (n) otherwise; and (3) a statement
node n∈ StmtNode has a single incoming edge and a single outgoing
edge.
Program Representation. Table 3 gives all the statements put on
an LLVM-like SSA form for a function [23, 30, 34, 58].
The set of variables is separated into two subsets: T containing
all top-level variables, including pointers and non-pointer scalars,
and A containing all possible targets, i.e., address-taken objects of
a pointer. C is a set of all constants. We use use (p) to denote a
memory access via a pointer p, including a pointer dereference ∗p,
a field access p→ f ld, and an array access p[i]. Complex statements
like ∗p =∗q are simplified to t =∗q and ∗p =t by introducing a top-
level pointer t. Accessing a multi-dimensional array as in q =p[i][j]
is transformed into q =p[k], where k =i ∗ n + j and n represents the
size of the second dimension of the array. We consider UAF only
for the objects o in the heap allocated via p = malloco (but not for
the objects a on the stack allocated via p = &a).
Given a CFG = (N , E), our typestate analysis computes and main-
tains the data-flow facts in DF (e) for every edge e ∈ E, where DF (e)
maps e to a set of symbolic states S with each element s =⟨ρ, σ⟩ con-
sisting of a property state ρ ∈ Properties = {live, dead, error}
and an execution state σ. The notation σ (E) is used to evaluate
the expression E in σ. As is standard, σ[v ←v′] denotes the state
obtained by updating the value of v in σ with v′ and leaving the
values of all other variables in σ unchanged.
Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Fjnt (n, S1, S2) = α (S1 ∪ S2)
Fbr (n, S, E) = α ({⟨ρ, σ ′⟩ | σ ′=σ∪{E} ∧ Feasible (σ ′) ∧ ⟨ρ, σ⟩∈ S})
Fstmt (n, S, o) = α ({T F (n,⟨ρ, σ⟩, o) | ⟨ρ, σ⟩∈ S})
(a) Flow functions for three types of CFG nodes
where
S[d] = {⟨ρ, σ⟩ ∈ S | d = ρ}
(b) Grouping function for merging symbolic states
α (S ) = {⟨d,(cid:70)⟨ρ,σ⟩∈S[d] σ⟩ | d ∈ Properties ∧ S[d] (cid:44) ∅}
 ⟨live, σ[q←σ (E)]⟩
⟨dead, σ⟩
⟨live, Γ(σ , n)⟩
⟨dead, σ[q←σ (E)]⟩
⟨error, Γ(σ , n)⟩
⟨error, σ⟩
(cid:40)
⟨dead, Γ(σ , n)⟩
n, ⟨live, σ⟩, o
n, ⟨dead, σ⟩, o
(cid:16)
(cid:16)
=
=
(cid:17)
(cid:17)
T F
T F
Statement n
q = ∗p
q = p→f ld
q = p[i]
∗p = q
p→f ld = q
p[i] = q
p = &a
p = malloco
if pt (p) = {o′}
and o′∈ Sinдleton
σ[q ← σ (o′)]
σ[q ← σ (o′.f ld )]
σ[q ← σ (o′[σ (i)])]
σ[o′←σ (q)]
σ[o′.f ld ←σ (q)]
σ[o′[σ (i)]←σ (q)]
otherwise
σ[q ← ⊥]
σ[q ← ⊥]
σ[q ← ⊥]
σ[∀o′∈ pt (p) : o′←⊥]
σ[∀o′∈ pt (p) : o′.f ld ← ⊥]
σ[∀o′∈ pt (p) : o′[σ (i)] ← ⊥]
σ[p ← ⊥]
(d) Γ(σ , n) : Updating execution states for memory statements
n is q = E
if
else if n is free(p) ∧ o ∈ pt (p)
otherwise
n is q = E
if
else if n is use(q) ∧ o ∈ pt (q) ∧ predict (n)
else if n is free(q) ∧ o ∈ pt (q) ∧ predict (n)
otherwise
if ∃ m ∈ Fo : ⟨m, n⟩ ∈ XML
otherwise
where
predict (n) =
True
False
(c) Transfer function for program statement (with Fo defined in Figure 5)
Figure 4: The data-flow functions for Tac’s machine-learning-guided intraprocedural typestate analysis.
S := Fjnt (n, DF (InEdдe0 (n)), DF (InEdдe1 (n)))
Add (OutEdдe0 (n), S )
case: nE ∈ BranchNode
ST := Fbr (n, DF (InEdдe0 (n)), E)
SF := Fbr (n, DF (InEdдe0 (n)),¬E)
Add (OutEdдe1 (n), ST )
Add (OutEdдe0 (n), SF )
Remove a node n from W orklist
switch (n)
case: n ∈ JointNode
1: procedure Solve (nmalloco , CFG = (N , E))
foreach e ∈ E DF (e) (cid:66) ∅
2:
DF (OutEdдe (nmalloco )) (cid:66) {[live,⊤]}
3:
4: W orklist (cid:66) {dst (OutEdдe (nmalloco ))}
5: while(W orklist (cid:44) ∅)
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end procedure
21: procedure Add (e, S)
22:
23:
24:
25: end procedure
DF (e) (cid:66) S
W orklist (cid:66) W orklist ∪ {dst (e)}
case: n ∈ StmtNode
if(DF (e) (cid:44) S)
S := Fstmt (n, DF (InEdдe0 (n)))
Add (OutEdдe0 (n), S )
if(n is f ree (p)) Fo := Fo ∪ { f ree (p)}
Figure 5: Tac’s intraprocedural typestate analysis.
Machine-Learning-Guided Typestate Analysis. Figure 5 gives
a standard worklist algorithm for the typestate analysis that com-
putes and updates the data-flow facts on the CFG of a function for
a given UAF candidate object o (determined by pre-analysis) until a
fixed point. Unlike ESP [17], which starts its path-sensitive analysis
from the entry of a CFG, our analysis starts from the allocation
statement nmalloco (line 3) of o to trade precision for efficiency.
Our analysis handles three types of CFG nodes, JointNode (lines
8 – 10), BranchNode (lines 11 – 15) and StmtNode (lines 16 – 19)
using the flow functions given in Figure 4(a), mapping an input state
to an output state for every node. At line 19, we record the current
free sites for object o in Fo found during the control-flow traversal
so that we can pair them with uses of o in order to validate their
associated aliases using our SVM classifier. Figure 4(b) gives the
typestate grouping function α (S ) that reorganizes a set of symbolic
states S by merging the execution states of two symbolic states s1
and s2 ∈ S if s1 and s2 have the same property state.