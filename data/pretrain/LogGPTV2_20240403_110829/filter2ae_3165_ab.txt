有漏洞的函数如下：
1.函数fts3GetVariant32，该函数最多返回0x7fffffff的整数(输入数据为Little-endian，输入ff ff ff ff
07将产生输出0x7fffffff)。
代码将从BLOB(zNode)中提取nPrefix和nSuffix，BLOB可由攻击者控制。
2.第一次检查，将检查zCsr+nSuffix-1是否超过zEnd。
但在32位机器(如Google
Home)中，堆通常位于大于0x7fffffff的地址中，当加上另一个较大的数字(如0x7fffffff)时，必然存在整数溢出，结果可能非常小，此检查将通过。
zCsr是表示BLOB中当前位置的指针，zEnd是指向BLOB的最后一个字符的指针。
如zCsr=0xe00000000，zEnd=0xe0002000，nSuffix=0x20000001，zCsr+nSuffix的结果为0x1，小于zEnd，可以通过此检查。
总而言之，可能有2个条件：
a).nSuffix小于未处理的实际数据量。
b).nSuffix是一个巨大的数字，导致zCsr+nSuffix的整数溢出，我们认为b在Google Home中是可利用的。
选择的值将对下一次验证产生影响，我们将在此处将该值命名为“X”。
3、第二次检查
变量nAlloc是分配的缓冲区数量，通常每次值增加两倍。
请注意，nAlloc可以大于实际数据，并且不能保证重新分配的内存区内的数据是从原始BLOB获得的，因此我们可以在这里泄漏一些堆信息。
d）如果nSuffix满足上述条件(a)，但nPrefix大于buf持有的实际数据，则下一步可能存在信息泄漏问题。
(因为sqlite3_realloc调用libc的realloc，这不会将内存初始化为零)。
e）如果(nPrefix+nSuffix)*2大于0x1`0000
0000(仅保留低32位)，则在realloc之后，buf将被设置为非常小的缓冲区，这可能使缓冲区溢出。
攻击者可以将nPrefix设置为较大的值，而将nSuffix设置为较小的值，这将导致越界写。
f)如果我们选择利用a)或b)，将nSuffix(我们称其为“Y”)设置为Y=0x80000000-X(你可能不想将Y设置为80000000-X，你可以这么做，但如果这样做，则很可能会在memcpy期间崩溃)。
例如,
  * 我们有zCsr=0xa0000000，nPrefix=7ffff001来触发zCsr+nPrefix-1，结果是0x1 1FFF000，较高的0x1被截断，因此它实际上是0x1ffff000。
  * 我们将nSuffix设置为0xfff，因此nPrefix+nSuffix整数溢出，结果是0x0，0x0小于nalloc，因此我们不会进入realloc部分。(if( nPrefix+nSuffix>nAlloc ) {realloc…})
  * 因此，最后，将会有一个写大小为0xfff的对0x1ffff000的越界写入。
4、触发缓冲区相关漏洞的代码h)
memcpy(&zBuffer[nPrefix]，zCsr，nSuffix)；
这将复制数据，并且nPrefix、zCsr、nSuffix是可控制的。nPrefix，nSuffix的最大值为0x7fffffff。
5、信息泄漏i )
我们可以使用SELECT来获取匹配的数据，以获取泄漏的数据。
(我们现在没有足够的时间来编写PoC，但我们认为这是可利用的。)
**6.3 CVE-2018-20506**
fts3扩展中的fts3SegReaderNext可能允许攻击者泄漏堆数据或导致堆缓冲区溢出。
有漏洞的函数
此代码位于fts3SegReaderNext中，此漏洞原理与6.2相同。
### **0x07 远程攻破Google Home**
本节将会介绍如何结合Google CAST协议安全风险与Magellan漏洞，对Google
Home发起攻击并最终实现远程代码执行。第一部分主要是编写与调试CVE-2018-20346的漏洞利用代码，这包含了寻找劫持控制流的函数指针，寻求触发函数指针的调用路径，堆内存布局及RCE。第二部分是通过CAST协议在局域网及互联网远程环境下推送payload到Google
Home中实现恶意代码执行。
**7.1可利用函数指针**
首先，需要找到在堆上使用的函数指针用于劫持控制流。在创建fts3表时，默认情况下会创建tokenizer其默认值为simple_tokenizer。具体结构如下图所示：
simple_tokenizer是堆上分配的结构，其成员base指向sqlite3_tokenizer结构，sqlite3_tokenizer结构的成员pModule指向tokenizer_module，而tokenizer_module包含了许多回调函数，例如xCreate
/ xOpen。分析调用流程后，我们了解到在对fts3表进行插入操作时将触发xOpen回调函数，若将xOpen的地址修改为任意地址，则可以劫持PC。
**7.2 劫持PC**
在漏洞触发后的路径上，若要完成前述的PC劫持需要满足两个条件。第一，在堆溢出后能够操作fts3表；另外，还需要在内存释放前完成劫持，否则就会导致crash从而中断利用过程。通过分析memcpy到free代码路径，存在函数fts3TruncateSegment，该函数会执行一次SQL
update操作，正如下图蓝色标记的代码。既然能够执行SQL语句，那么就可以利用SQL Trigger在执行该update操作前执行fts3表的操作
最终，我们通过Trigger在SQL update操作和free内存之前执行了fts3 表的插入操作，进而触发xOpen回调完成劫持PC。
**7.3 堆内存布局**
完成了前述两步后，接下来将会介绍进行内存布局的思路。具体思路如下图：
  1. 通过创建多个fts3表，即可在堆上创建多个simple_tokenizer结构；
  2. 选择适当的时机删除之前创建的fts3表，对应simple_tokenizer结构也会随之释放；
  3. 由于simple_tokenizer结构体在堆上会连续存储且分配与simple_tokenizer相同大小的内存将会重用已经释放的simple_tokenizer结构。因此，通过调整payload大小，可以将fts3表的simple_tokenizer结构覆盖掉；
  4. 最后，利用SQL Trigger执行fts3表的操作，触发被覆盖的回调函数来劫持PC。
**7.4绕过ASLR**
当具备劫持PC和控制寄存器的能力后，我们还需要信息泄露漏洞绕过ASLR。同样还是利用漏洞CVE-2018-20346，通过调节nDoclist和pNode->a，就能够泄露以下两类地址：
  1. 泄露cast_shell加载基址，根据该地址和偏移计算出需要的ROP gadgets；
  2. 泄露最后堆的基址，根据这个地址和偏移，较大概率能计算出堆喷地址。
**7.5 cast_shell渲染进程RCE**
cast_shell是一个很大的二进制程序，包含了很多可用的ROP
gadget。结合堆喷和ROP技术，便可以在cast_shell的renderer中远程执行代码，下图为ROP和堆喷内存状况：
一个堆喷单元里面包含伪造的sqlite3_tokenizer_module和ROP
gadgets。伪造的sqlite3_tokenizer_module结构体里的xCreate/xOpen地址将会被赋值为stack
pivot地址。堆喷的过程就是把多个这样的单元插入到数据库的表中。经过多次尝试，可以把其放置在和最后堆基址相对固定的偏移上；而溢出后覆盖的simple_tokenizer结构里包含了stack
pivot所需的寄存器数据。一切顺利的话，将能在cast_shell的renderer里实现远程代码执行，效果如下图所示:
左图表示可以完成了PC劫持和控制的寄存器。右图则是ShellCode的运行结果（正常情况下，navigator.appName是只读数据，为”Netscape”，Shellcode代码执行后将其改成了”AAAAcape”。
**7.6 局域网内与远程攻击链**
**局域网攻击链**
局域网内，攻击者可以直接发送CAST协议完成攻击。
  1. 通过"Launch APPID=1"的指令，Google Home会根据APPID拉取应用市场上的Leak.html并加载，可利用该恶意网页用于泄露内存数据； 
  2. 接着，发送"Launch APPID=2"的指令，Google Home就会加载Exp.html，从而远程代码执行，整个过程不需要用户交互。 
**互联网远程攻击链**
  1. 攻击者诱导用户通过Chrome浏览器访问Sender Application的url，这时Chrome浏览器会提示用户选择设备，用户确认后将会开始攻击流程； 
  2. 参考Cast Hack的攻击思路，通过扫描网络上存在UPnP Forwarding的路由器，尝试发起远程攻击；
### **0x08 后记**
在向Google报告漏洞后，Google在2018年12月的Chrome安全补丁中修复了我们提交的所有漏洞。
本文是Tencent Blade Team物联网安全系列的第一篇，主要内容整理自团队在BlackHat USA
2019及DEFCON27的演讲，由于篇幅限制部分内容无法详细叙述，大家可以参考附录中的whitepaper，同时也欢迎大家同我们进行技术交流，联系方式参见Blade
Team官网： （）
参考：
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
* * *