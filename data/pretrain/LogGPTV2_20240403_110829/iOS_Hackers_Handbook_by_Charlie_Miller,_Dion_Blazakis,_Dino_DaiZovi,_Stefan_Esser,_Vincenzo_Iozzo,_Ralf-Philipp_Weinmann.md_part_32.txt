clobbering into account and use a gadget before the “perform syscall” gadget
to save the contents of the register and restore it after the system call.
To streamline this process, you can use a compiler. A ROP compiler is a piece
of software that automatically chains gadgets together, taking into account
side effects for each gadget that is used. One of the most common techniques
to implement such a compiler is to use an, Satisfi ability Modulo Theory (SMT),
solver that will go through each available gadget for an operation and verify
whether the conditions on the previous chain of gadgets are verifi ed by that one.
Although this process of fi nding all the gadgets, annotating them with side
effects, and using a compiler to create payloads, is the formally correct way of
solving the payload creation problem, it can be time-consuming and not worth
it depending on the attacker’s needs. For these reasons, a simpler approach was
proposed.
If the binary is large enough to include multiple gadgets for a given operation,
you can handpick the ones that are mostly side-effect free, so that you don’t need
to worry about possible problems when chaining them together. Once you have
done so, you can write a simple wrapper around those gadgets in your favorite
programming language and use it to construct the payload.
Two great examples of this approach are comex’s Saffron ROP payload for
ARM and Dino Dai Zovi’s BISC for x86. To give you a sense of how this idea
works in practice, you can examine one of the Python functions found in Saffron
to load R0 from an address:
def load_r0_from(address):
gadget(R4=address, PC=(‘+ 20 68 90 bd’, ‘- 00 00 94 e5 90 80 bd e8’),
a=’R4, R7, PC’)
What this function does is to search the available gadget sources for one of the
two-byte sequences. The fi rst one, in Thumb mode, 20 68 90 db, corresponds
to the following instructions:
6820 ldr r0, [r4, #0]
bd90 pop {r4, r7, pc}
The second one in ARM mode corresponds to:
e5940000 ldr r0, [r4]
e8bd8090 ldmia sp!, {r4, r7, pc}
cc0088..iinndddd 223311 44//1166//22001122 55::4466::3399 PPMM
232 Chapter 8 n Return-Oriented Programming
This approach obviously has some drawbacks. In fact, it is in general
possible to perform the same operations with a huge number of different
instruction sequences. Therefore, if you forget a valid binary pattern you
might wrongly assume that a given operation is not possible given the
gadgets available.
On the other hand, writing such a tool is much faster than the approach
using an SMT solver, and in the cases where a huge library or set of libraries is
available, it is pretty much all an attacker needs. In the iOS case, if you are able
to leak the address of one of the libraries in the dyld_shared_cache, you have
at your disposal the entire cache, which is roughly 200 MB in size and contains
virtually all the gadgets you might need.
What Can You Do with ROP on iOS?
iOS employs code signing for all the applications present on the device. Code
signing can be seen as an enhanced version of DEP-like countermeasures. In
fact, on most OSs even when the protection is enabled, it is possible in one way
or another to allocate memory pages that are writable, readable, and executable.
This results in a defeat of the countermeasure, and for that reason, most of the
ROP shellcodes are very simple snippets that aim at disabling the non-executable
protection and then pivot to a standard shellcode.
Unfortunately, this is not possible on iOS because no known ways of disabling
code signing from userland exist. The attacker is therefore left with three options.
The fi rst one is to write the entire payload using ROP. Later in this chapter
you see a real-life example of such a payload.
The second one is to use ROP to chain together two different exploits, a
remote one and a local one for the kernel. By doing this the attacker can bypass
the userland code signing and execute a normal payload in either kernel space
or userland. A famous example of such a combination is shown at the end of
the chapter.
Finally, if the exploit targets a recent version of MobileSafari, a ROP payload
can write a standard payload to the memory pages reserved for JIT code. In fact,
to speed up the browser performances most JavaScript engines employ Just-in-
time compilation that requires pages to be readable, writable, and executable
(see Chapter 4 for more information on this topic for iOS).
Testing ROP Payloads
It is clear by now that the process of writing and testing a ROP payload can
be quite long and cumbersome. The problem is augmented by the fact that
applications cannot be debugged on a factory (non-jailbroken) device. This
means that the only way for an attacker to test with an exploit (for example, one
cc0088..iinndddd 223322 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 233
for MobileSafari) on a factory phone is looking at the crash reports obtained
through iTunes.
Debugging a ROP payload is by itself tricky, let alone when the only debug-
ging capability you have are crash logs. To ease this problem and grant some
degree of debugging capabilities, it is desirable to have a testing application that
enables you to verify the proper functioning of your shellcode.
The following testing harness is pretty simple. You create a server that receives
a payload and executes it. The core component is shown here:
void restoreStack()
{
__asm__ __volatile__(“mov sp, %0\t\n”
“mov pc, %1”
:
:”r”(stack_pointer), “r”(ip + 0x14)
);
//WARNING: if any code is added to read_and_exec the ‘ip + 0x14’
has to be recalculated
}
int read_and_exec(int s)
{
int n, length;
unsigned int restoreStackAddr = &restoreStack;
fprintf(stderr, “Reading length... “);
if ((n = recv(s, &length, sizeof(length), 0)) != sizeof(length)) {
if (n > 8) &0xff)+((port&0xff)PC (thumb)
// next chunk executed: set LR
// 32986a40 e8bd4080 pop {r7, lr}
// 32986a44 b001 add sp, #4
// 32986a46 4770 bx lr
ropvalues[i++]=0x12345566; // dummy r7
ropvalues[i++]=0x32988673; // LR (thumb mode)
ropvalues[i++]=0x11223344; // padding, skipped over by add sp, #4
// next chunk executed: call single-parameter function
// 32988672 bd01 pop {r0, pc}
ropvalues[i++]=0x00000fff; // r0
ropvalues[i++]=0x30b663cd; // PC
// LIBRARY CALL
// 0x30b663cc 
cc0088..iinndddd 223377 44//1166//22001122 55::4466::4400 PPMM