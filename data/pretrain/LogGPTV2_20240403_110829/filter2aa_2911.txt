优雅的使⽤Dnslog平台
0x01 强迫症难受的需求点
在可⽤的 dnslog 平台越来越多之后，各种 burpsuite 插件、主动被动扫描满天⻜，去公开的的 dnslog 平台把信息
填过来就没美滋滋的刷洞，但是⼜有⼏个问题：
公开的 dnslog 地址容易被 ban
⼄⽅公司⾃建的 dnslog ⼜不让我⽤
⾃建的⼜可能被溯源
0x02 癞蛤蟆想吃天鹅⾁
就没有可能⼜稳定、⼜不怕溯源、⼜不被 ban 吗，接着这个想法找到了⼀种⽩嫖别⼈的 dnslog 服务器的可能性
Github 上已经有了很多师傅们开发的各种⼀键 dnslog 平台，观摩了⼏个后发现⼤部分的⾯板加上了token或者密
码验证，找到了也没办法嫖
摸了⼀圈之后还是有可⽤的，⽐如 https://github.com/yumusb/DNSLog-Platform-Golang 的 dnslog 平台，他的 
demo 是 https://dig.pm ，公开的⾯板可以直接⽤
他还做了特征在 header ⾥：
Fofa 的结果不算多，但是够⽤了：
简单看了⼀哈他的接⼝
获取⼦域名：https://dig.pm/new_gen （不需要验证）
获取结果：
同样不需要验证，传递⼀哈 token 就好，那就稳的
不过看了⼀圈 fofa 上的之后发现有好多张这个样⼦，Github上瞧了⼀眼 releases 应该是不同版本的平台，不过好
在接⼝ api 都是⼀样的，问题不⼤
0x03 魔改 Log4j2 的插件
在 https://github.com/whwlsfb/Log4j2Scan 的基础上开始添加⽀持 DNSLog-Platform-Golang 的格式
照着他原有的 DnslogCN 的调⽤格式新增了⼀个 DnslogPlatform 
获取 api 的域名和 token
刷新 dnslog 结果出来判断拼接的域名字符
UI 也是向他原有的框架⾥添加新的选项
    private void initDomain() {
        try {
            Utils.Callback.printOutput("Get domain...");
            Response resp = client.newCall(GetDefaultRequest(baseUrl + 
"/new_gen").build()).execute();
            JSONObject jObj = JSON.parseObject(resp.body().string());
            rootDomain = jObj.getString("domain");
            token = jObj.getString("token");
            Utils.Callback.printOutput(String.format("Domain: %s", rootDomain));
            Utils.Callback.printOutput(String.format("Token: %s", token));
            startSessionHeartbeat();
        } catch (Exception ex) {
            Utils.Callback.printError("initDomain failed: " + ex.getMessage());
        }
    }
    public boolean flushCache() {
        try {
            Response resp = client.newCall(HttpUtils.GetDefaultRequest(baseUrl + "/" 
+token).build()).execute();
            dnsLogResultCache = resp.body().string().toLowerCase();
            Utils.Callback.printOutput(String.format("Get Result: %s", 
dnsLogResultCache));
            return true;
        } catch (Exception ex) {
            Utils.Callback.printOutput(String.format("Get Result Failed: %s", 
ex.getMessage()));
            return false;
        }
    }
最后的样⼦
PS：我随便找的⼀个 dnslog ，他这个域名是有点意思的
0x04 扫描效果
被动扫描⼀个 vulfocus 的 log4j2 
Dnslog 地址不想⽤了就可以去 fofa 上换别⼈的⽩嫖了～
Fork 改好的源码放在 https://github.com/zhzyker/Log4j2Passive