single move (i.e. a single transformation). To do so, in
each iteration, we choose the child node with the highest
average classiﬁer score. This process is repeated until the
attack succeeds or a stop criterion is fulﬁlled (we reach
a ﬁxed number of outer iterations or we do not observe
any improvement over multiple iterations) (line 3).
• The procedure MCTS represents the inner loop. It it-
eratively builds and extends the search tree under the
current root node r. As this procedure is the main build-
ing block of our attack, we discuss the individual steps
in more detail in the following.
r ← r0
while not SUCCESS(r) and not STOPCRITERION(r) do
MCTS(r)
r ← CHILDWITHBESTSCORE(r)
(cid:46) Extend the search tree under r
(cid:46) Perform next move
Algorithm 1 Monte-Carlo Tree Search
1: procedure ATTACK(r0)
2:
3:
4:
5:
6: procedure MCTS(r)
7:
8:
9:
10:
11:
u ← SELECTION(r, i)
T ← SIMULATIONS(u)
EXPANSION(u, T )
BACKPROPAGATION(T )
for i ← 1,N do
Selection. Algorithm 2 shows the pseudocode to ﬁnd the
next node which is evaluated. The procedure recursively
selects a child node according to a selection policy. We stop if
the current node has no child nodes or if we have not marked
it before in the current procedure SELECTION. The procedure
ﬁnally returns the node that will be evaluated next.
As the number of possible paths grows exponentially (we
have up to 36 transformations as choice at each node), we
cannot evaluate all possible paths. The tree creation thus
crucially depends on a selection policy. We use a simple
heuristic to approximate the Upper Conﬁdence Bound for
Trees algorithm that is often used as selection policy (see [7]).
Depending on the current iteration index i of SELECTION, the
procedure SELECTIONPOLICY alternately returns the decision
rule to choose the child with the highest average score, the
lowest visit count or the highest score standard deviation.
This step balances the exploration of less-visited nodes and
the exploitation of promising nodes with a high average score.
Simulations. Equipped with the node u that needs to be
evaluated, the next step generates a set of transformation
USENIX Association
28th USENIX Security Symposium    493
D ← SELECTIONPOLICY(i)
u ← r
while u has child nodes do
Algorithm 2 Selection Procedure of MCTS
1: procedure SELECTION(r, i)
2:
3:
4:
5:
6:
7:
8:
9:
10:
v ← SELECTCHILD(u,D)
if v not marked as visited then
Mark v as visited
return v
u ← v
else
(cid:46) Child of u w.r.t. to D
sequences T that start at u:
T = {T j | j = 1, . . . ,k and |T j| ≤ M} ,
(2)
where |T j| is the number of transformations in T j. The se-
quences are created randomly and have a varying length
which is, however, limited by M. In our experiments, we
set M = 5 to reduce the number of possible branches.
In contrast to the classic game use-case, we can use the
returned scores g(x) as early feedback and thus we do not
need to play out a full game. In other words, it is not necessary
to evaluate the complete path to obtain feedback. For each
sequence, we determine the classiﬁer score by passing the
modiﬁed source code at the end of each sequence to the
attribution method. We further pinpoint a difference to the
general MCTS algorithm. Instead of evaluating only one path,
we create a batch of sequences that can be efﬁciently executed
in parallel. In this way, we reduce the computation time and
obtain the scores for various paths.
Expansion. We continue by inserting the respective trans-
formations from the sequences as novel tree nodes under u
(see Algorithm 3). For each sequence, we start with u and the
ﬁrst transformation. We check if a child node with the same
transformation already exists under u. If not, a new node v
is created and added as child under u. Otherwise, we use the
already existing node v. We repeat this step with v and the
next transformation. Figure 10 from Section 5 exempliﬁes
this expansion step.
for T in T do
z ← u
for T in T do
Algorithm 3 Expansion Procedure of MCTS
1: procedure EXPANSION(u, T )
2:
3:
4:
5:
6:
7:
8:
9:
10:
v ← CREATENEWNODE(T )
z.add child(v)
v ← z.GETCHILDWITH(T )
if z has no child with T then
else
z ← v
(cid:46) For each sequence
(cid:46) For each transformer
Backpropagation. Algorithm 4 shows the last step that
backpropagates the classiﬁer scores to the root. For each
sequence, the procedure ﬁrst determines the last node n of the
current sequence and the observed classiﬁer score s at node
n. Next, all nodes on the path from n to the root node of the
search tree are updated. First, the visit count of each path
node is incremented. Second, the ﬁnal classiﬁer score s is
added to the score list of each path node. Both statistics are
used by SELECTCHILD to choose the next promising node for
evaluation. Furthermore, CHILDWITHBESTSCORE uses the score
list to obtain the child node with the highest average score.
for T in T do
Algorithm 4 Backpropagation Procedure of MCTS
1: procedure BACKPROPAGATION(T )
2:
3:
4:
5:
6:
7:
8:
s ← GETSCORE(T)
get n as tree leaf of current sequence
while n is not None do
n.visitCount ← n.visitCount + 1
n.scores = n.scores ∪ s
n ← n.parent
(cid:46) Backpropagate to root
(cid:46) Increase visit count
(cid:46) Append score
(cid:46) Will be None for root node
We ﬁnally note a slight variation for the scenario with a
substitute model (see Section 3.1). To improve the transfer-
ability rate from the substitute to the original model, we do
not terminate at the ﬁrst successful adversarial example. In-
stead, we collect all successful samples and stop the outer
loop after a predeﬁned number of iterations. We choose the
sample with the highest score on the substitute to be tested
on the original classiﬁer.
B List of Developers For Impersonation
Table 7 maps the letters to the 20 randomly selected program-
mers from the 2017 GCJ contest.
Table 7: List of developers for impersonation
Letter
Author
Letter
Author
A
B
C
D
E
F
G
H
I
J
4yn
ACMonster
ALOHA.Brcps
Alireza.bh
DAle
ShayanH
SummerDAway
TungNP
aman.chandna
ccsnoopy
K
L
M
N
O
P
Q
R
S
T
chocimir
csegura
eugenus
fragusbot
iPeter
jiian
liymouse
sdya
thatprogrammer
vudduu
C List of Code Transformations
A list of all 36 developed code transformations is presented
in Table 8. The transformers are grouped accordingly to the
family of their implemented transformations, i.e, transforma-
tions altering the control ﬂow, transformations of declarations,
transformations replacing the used API, template transforma-
tions, and miscellaneous transformations.
494    28th USENIX Security Symposium
USENIX Association
Table 8: List of Code Transformations
Control Transformations
Transformer
For statement transformer
While statement transformer
Function creator
Deepest block transformer
If statement transformer
Description of Transformations
Replaces a for-statement by an equivalent while-statement.
Replaces a while-statement by an equivalent for-statement.
Moves a whole block of code to a standalone function and creates a call to the new function at the respective position.
The transformer identiﬁes and passes all parameters required by the new function. It also adapts statements that change
the control ﬂow (e.g. the block contains a return statement that also needs to be back propagated over the caller).
Moves the deepest block in the AST to a standalone function.
Split the condition of a single if-statement at logical operands (e.g., && or ||) to create a cascade or a sequence of two
if-statements depending on the logical operand.
Transformer
Array transformer
String transformer
Integral type transformer
Floating-point type transformer
Boolean transformer
Typedef transformer
Include-Remove transformer
Unused code transformer
Init-Decl transformer
Declaration Transformations
Description of Transformation
Converts a static or dynamically allocated array into a C++ vector object.
Array option: Converts a char array (C-style string) into a C++ string object. The transformer adapts all usages in the
respective scope, for instance, it replaces all calls to strlen by calling the instance methods size.
String option: Converts a C++ string object into a char array (C-style string). The transformer adapts all usages in the
respective scope, for instance, it deletes all calls to c str().
Promotes integral types (char, short, int, long, long long) to the next higher type, e.g., int is replaced by long.
Converts float to double as next higher type.
Bool option: Converts true or false by an integer representation to exploit the implicit casting.
Int option: Converts an integer type into a boolean type if the integer is used as boolean value only.
Convert option: Convert a type from source ﬁle to a new type via typedef, and adapt all locations where the new type
can be used.
Delete option: Deletes a type deﬁnition (typedef) and replace all usages by the original data type.
Removes includes from source ﬁle that are not needed.
Function option: Removes functions that are never called.
Variable option: Removes global variables that are never used.
Move into option: Moves a declaration for a control statement if deﬁned outside into the control statement. For instance,
int i; ...; for(i = 0; i < N; i++) becomes for(int i = 0; i < N; i++).
Move out option: Moves the declaration of a control statement’s initialization variable out of the control statement.
API Transformations
Transformer
Input interface transformer
Output interface transformer
Input API transformer
Output API transformer
Sync-with-stdio transformer
Description of Transformations
Stdin option: Instead of reading the input from a ﬁle (e.g. by using the API ifstream or freopen), the input to the
program is read from stdin directly (e.g. cin or scanf).
File option: Instead of reading the input from stdin, the input is retrieved from a ﬁle.
Stdout option: Instead of printing the output to a ﬁle (e.g. by ofstream or freopen), the output is written directly to
stdout (e.g. cout or printf).
File option: Instead of writing the output directly to stdout, the output is written to a ﬁle.
C++-Style option: Substitutes C APIs used for reading input (e.g., scanf) by C++ APIs (e.g., usage of cin).
C-Style option: Substitutes C++ APIs used for reading input (e.g., usage of cin) by C APIs (e.g., scanf).
C++-Style option: Substitutes C APIs used for writing output (e.g., printf) by C++ APIs (e.g., usage of cout).
C-Style option: Substitutes C++ APIs used for writing output (e.g., usage cout) by C APIs (e.g., printf).
Enable or remove the synchronization of C++ streams and C streams if possible.
USENIX Association
28th USENIX Security Symposium    495
Table 8: List of Code Transformations (continued)
Template Transformers
Transformer
Identiﬁer transformer
Include transformer
Global declaration transformer
Include-typedef transformer
Description of Transformations
Renames an identiﬁer, i.e., the name of a variable or function. If no template is given, default values are extracted from
the 2016 Code Jam Competition set that was used by Caliskan et al. [9] and that is not part of the training- and test set.
We test default values such as T, t, . . ., i.
Adds includes at the beginning of the source ﬁle. If no template is given, the most common includes from the 2016
Code Jam Competition are used as defaults.
Adds global declarations to the source ﬁle. Defaults are extracted from the 2016 Code Jam Competition.
Inserts a type using typedef, and updates all locations where the new type can be used. Defaults are extracted from the
2016 Code Jam Competition.
Miscellaneous Transformers
Transformer
Compound statement transformer
Return statement transformer
Literal transformer
Description of Transformations
Insert option: Adds a compound statement ({...}). The transformer adds a new compound statement to a control
statement (if, while, etc.) given their body is not already wrapped in a compound statement.
Delete option: Deletes a compound statement ({...}). The transformer deletes compound statements that have no
effect, i.e., compound statements containing only a single statement.
Adds a return statement. The transformer adds a return statement to the main function to explicitly return 0 (meaning
success). Note that main is a non-void function and is required to return an exit code. If the execution reaches the end
of main without encountering a return statement, zero is returned implicitly.
Substitutes a return statement returning an integer literal, by a statement that returns a variable. The new variable is
declared by the transformer and initialized accordingly.
496    28th USENIX Security Symposium
USENIX Association