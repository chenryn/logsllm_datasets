title:Perspectives on network calculus: no free lunch, but still good value
author:Florin Ciucu and
Jens B. Schmitt
Perspectives on Network Calculus –
No Free Lunch, but Still Good Value
Florin Ciucu
T-Labs / TU Berlin
Jens Schmitt
University of Kaiserslautern
ABSTRACT
ACM Sigcomm 2006 published a paper [26] which was per-
ceived to unify the deterministic and stochastic branches
of the network calculus (abbreviated throughout as DNC
and SNC) [39]. Unfortunately, this seemingly fundamental
uniﬁcation—which has raised the hope of a straightforward
transfer of all results from DNC to SNC—is invalid. To
substantiate this claim, we demonstrate that for the class of
stationary and ergodic processes, which is prevalent in traﬃc
modelling, the probabilistic arrival model from [26] is quasi-
deterministic,
i.e., the underlying probabilities are either
zero or one. Thus, the probabilistic framework from [26] is
unable to account for statistical multiplexing gain, which is
in fact the raison d’ˆetre of packet-switched networks. Other
previous formulations of SNC can capture statistical multi-
plexing gain, yet require additional assumptions [12, 22] or
are more involved [14, 9, 28], and do not allow for a straight-
forward transfer of results from DNC. So, in essence, there
is no free lunch in this endeavor.
Our intention in this paper is to go beyond presenting a
negative result by providing a comprehensive perspective on
network calculus. To that end, we attempt to illustrate the
fundamental concepts and features of network calculus in a
systematic way, and also to rigorously clarify some key facts
as well as misconceptions. We touch in particular on the re-
lationship between linear systems, classical queueing theory,
and network calculus, and on the lingering issue of tight-
ness of network calculus bounds. We give a rigorous result
illustrating that the statistical multiplexing gain scales as
Ω(√N ), as long as some small violations of system perfor-
mance constraints are tolerable. This demonstrates that the
network calculus can capture actual system behavior tightly
when applied carefully. Thus, we positively conclude that it
still holds promise as a valuable systematic methodology for
the performance analysis of computer and communication
systems, though the uniﬁcation of DNC and SNC remains
an open, yet quite elusive task.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
Copyright 2012 ACM 978-1-4503-1419-0/12/08 ...$10.00.
Categories and Subject Descriptors
C.4 [Computer Systems Organization]: Performance of
Systems—Modeling techniques
General Terms
Theory, Performance
Keywords
Network Calculus, Statistical Multiplexing Gain
1.
INTRODUCTION
Queueing theory is an important theory for the perfor-
mance analysis of resource sharing systems such as commu-
nication networks. One of the success stories of queueing
theory is Erlang’s formula for the computation of the block-
ing probability that some shared resource is occupied [20];
this formula has been used for nearly a century to dimen-
sion telephone networks. Concomitantly, queueing theory
has been generalized from Erlang’s primordial single queue
model with Poisson arrivals and exponential service times
to the class of product-form queueing networks which can
account for multiple service time distributions, scheduling,
or routing (e.g., [3, 29]).
Notwithstanding the advances made in the classical branch
of queueing theory [25], which is primarily concerned with
exact models and solutions, the class of tractable queueing
networks is largely constrained by the technical assumption
of Poisson arrivals. This apparent limitation has motivated
the development of alternative theories to queueing, espe-
cially over the past three decades witnessing a rapid growth
of high-speed data networks. The relevance of the emerging
theories, especially for the Internet community, has become
evident with the discovery that Internet traﬃc is fundamen-
tally diﬀerent from Poisson [32, 40]. Moreover, as it became
clear that improper traﬃc models can lead to bogus results,
the necessity to overcome the Poisson assumption limitation
has reached a wide consensus.
One of the alternatives to the classical queueing theory
is the network calculus. This was conceived by Cruz [16]
in the early 1990s in a deterministic framework, and ex-
tended soon after by Chang [11], Kurose [30], and Yaron and
Sidi [49] in a probabilistic or stochastic framework. Subse-
quently, many researchers have contributed to both formu-
lations of the network calculus (see the books of Chang [12],
Le Boudec and Thiran [5], and Jiang [28]). While DNC
was motivated by the need for a theory to compute deter-
ministic (worst-case) bounds on performance metrics, the
311raison d’ˆetre of SNC was to additionally capture statistical
multiplexing gain when some violations of the determinis-
tic bounds are tolerable. This feature enables a much more
eﬃcient dimensioning of resource sharing systems, such as
packet-switched networks, and continues to play a pivotal
role in the evolution of SNC.
The promise of the combined branches of network calcu-
lus is to jointly overcome the technical barriers of queueing
networks on all fronts. Achieving this rather daunting task
is enabled by two key features:
• Scheduling abstraction. At a single queue with mul-
tiplexed arrival ﬂows, the speciﬁc properties of many
scheduling algorithms, and also of many arrival classes,
can be abstracted away by suitably constructing the
so-called service processes (technical details are de-
ferred to Section 3).
• Convolution-form networks. The service processes from
single queues can be convolved across a network of
queues, and thus a multi-node network analysis can
be drastically simpliﬁed by reducing it to a single-node
analysis.
Equipped with these two features, the network calculus
can analyze many scheduling algorithms and arrival classes,
over a multi-node network, in a uniform manner. That
means that the Poisson model, in particular, plays no spe-
cial role anymore in facilitating the analytical tractability
of a whole network. Compared to classical queueing theory,
which separately analyzes various combinations of arrivals
and scheduling, network calculus conceivably oﬀers a much
more simpliﬁed and uniform framework. For this reason, the
network calculus has been applied in many recent areas such
as IntServ [6], switched Ethernets [44], systems-on-chip [10],
avionic networks [41], the smart grid [48], etc.
This versatile applicability, however, is only possible at
the expense of providing bounds on performance metrics.
The bounds are a manifestation of resorting to inequali-
ties, whenever exact derivations become intractable. The
tightness of the bounds is certainly a major concern, since
loose bounds may be more misleading than wrongly ﬁtted
Poisson models. The tightness issue has several dimen-
sions depending on the nature of the bounds (determinis-
tic or probabilistic) or the number of ﬂows/queues. Deter-
ministic bounds are generally tight for single queues ([5],
p. 27), but can be very loose in some queueing networks
with arbitrary multiplexing [43]. Moreover, the determinis-
tic bounds can be very ineﬃcient for network dimensioning
when some violation probabilities are tolerable (e.g., running
IntServ for many ﬂows could result in very low network uti-
lization). Probabilistic bounds are generally asymptotically
tight (in terms of scaling laws in the number of queues) [8,
34], whereas numerical tightness ranges from reasonable [13]
to quite loose [34], depending on the arrival model.
In this paper we touch on the lingering issue of tight-
ness, as part of a broader perspective on network calculus.
Concretely, we address the asymptotic tightness of proba-
bilistic bounds, in the number of ﬂows N , and demonstrate
that such bounds improve upon corresponding determinis-
tic bounds by a factor of Ω(cid:16)√N(cid:17). That means that, e.g.,
implementing a probabilistic extension of IntServ could sig-
niﬁcantly increase the network utilization. Our result not
only rigorously reveals the magnitude of the statistical mul-
tiplexing gain achieved with SNC, but clearly highlights the
fundamental advantage of SNC over DNC.
Our broader goal is to deliver an intuitive and yet com-
prehensive perspective of the two core concepts in network
calculus, i.e., service and envelope processes, by focusing on
subtleties and raising awareness of inherent pitfalls. Along
the discussion we attempt to make a suggestive statement
that there is no free lunch in the framework of the network
calculus, yet it brings good value as a companion/alternative
to the classical queueing theory. This perspective is moti-
vated by a large eﬀort in the literature to develop SNC for-
mulations which reproduce in particular the ‘convolution-
form networks’ feature from DNC. Arguably the simplest
of such formulations has appeared in a Sigcomm 2006 pa-
per [26], and has since raised the hope that DNC results can
be transferred into SNC in a straightforward manner. Un-
fortunately, the formulation from [26] is based on a quasi-
deterministic arrival model1, which roughly means that the
proposed SNC cannot capture statistical multiplexing gain.
We believe that exposing this pitfall, through a rigorous
analysis, is essential to the comprehensive understanding of
SNC arrival models.
After introducing notations, the rest of the paper is struc-
tured as follows. In Section 3 we provide a comprehensive
perspective on service processes by making a multilateral
analogy of network calculus with linear systems and classi-
cal queueing theory. In Section 4 we present representative
envelope processes and elaborate on the quasi-deterministic
aspects of the one from [26]. In Section 5 we lead together
envelope and service processes in order to shed some light
on the often raised concern about the tightness of network
calculus bounds. We conclude the paper in Section 6.
2. NOTATIONS
The time model is discrete starting from zero. The time
indices are denoted by the symbols i, k, n. The cumula-
tive arrivals and departures at/from a (queueing) node up
to time n are denoted by non-decreasing processes A(n)
and D(n). The doubly-indexed extensions are A(k, n) =
A(n) − A(k) and D(k, n) = D(n) − D(k). The associ-
ated instantaneous arrival and departure processes are an =
A(n − 1, n) and dn = D(n − 1, n), respectively; by conven-
tion, a0 = d0 = A(0) = D(0) = 0. The vector represen-
tations are A = (A(0), A(1), . . . ) and a = (a0, a1, . . . ) for
the arrivals, and D = (D(0), D(1), . . . ) and d = (d0, d1, . . . )
for the departures. These processes have primarily a spatial
interpretation, e.g., an quantiﬁes the number of data units
(referred to as bits throughout) arrived at time n; with abuse
of notation, a and d will also have a temporal meaning to
be made locally clear.
The sets of natural, integer, real, and positive real num-
bers are denoted by N, Z, R, and R+, respectively; their re-
striction to non-zero numbers are denoted by N∗, Z∗, R∗, and
R∗+. The integer part of a number x ∈ R is denoted by ⌊x⌋.
For x ∈ R, the positive part is denoted by [x]+ = max{x, 0}.
For some boolean expression E, the indicator function is de-
noted by 1E and takes the values 1 or 0 depending whether
E is true or false, respectively.
1The authors of [9] also point out the quasi-determinism
issue in [26], but for a service model and without proof; as a
further side remark, we have ourselves experienced a similar
quasi-determinism pitfall in SNC [42].
312For two functions f, g : N → R, the (min, +) convolution
operator ‘∗’ is deﬁned as
f ∗ g(n) := min
0≤k≤n {f (k) + g(n − k)} ∀n ≥ 0 .
If the function g is bivariate, i.e., g : N × N → R, then
f ∗ g(n) := min0≤k≤n {f (k) + g(k, n)} ∀n ≥ 0.
3. SERVICE PROCESSES
Network calculus operates by reducing a ‘complex’ non-
linear (queueing) system into a ‘somewhat looking’ linear
system. Because the reduced system is often analytically
tractable—linearity conceivably implies simplicity—network
calculus is regarded as an attractive approach to analyze
complex queueing systems. In this section we elaborate on
this key reduction operation by exploring conceptual simi-
larities with the more traditional linear system and queueing
theories, as well as on its main diverging point from the two.
The ﬁnal goal is to highlight the emergence of the concept of
a service process, which is instrumental for abstracting away
some of the technical challenges characteristic of non-linear
systems.
The ‘complex’ system is a node, or a network of nodes,
in which bits arrive and depart according to various fac-
tors such as probability distributions for arrival processes,
scheduling, routing, etc. A fundamental networking and
queueing problem which is at the core of the philosophy
of network calculus is the following:
System Identiﬁcation (SI) Problem: Is it possible to
characterize a random process (the departures) based on
another random process (the arrivals) while accounting for
yet another random process determined by other arrivals,
scheduling, routing, etc. (the noise)?
To answer, let us formalize the system by an operator
(a.k.a. ﬁlter)
T : F → F , T (a) = d ,
i.e., F =
where F is the set of discrete-time sequences,
{a = (a0, a1, . . . ) : ai ∈ N}. The physical interpretation of
T is that it takes a = (a0, a1, . . . ) as input, it accounts for
the noise, and outputs d = (d0, d1, . . . ). The sequences a
and d have two networking interpretations, depending on
the type of information they quantify:
1. Spatial quantiﬁcation (SQ): an and dn quantify the
number of bits which arrive and depart from the net-
work system at time n.
2. Temporal quantiﬁcation (TQ): an and dn quantify the
arrival and departure times of the nth bit.
The SI problem requires thus the construction of T such
that for any input a, the output d can be completely de-
termined as d = T (a). The problem is diﬃcult not only
because all inputs must be accounted for by a single expres-
sion of T , but also because T should account for noise and
its correlations with output and possibly input as well.
The next two sections, 3.1 and 3.2, present two partial
solutions for the SI problem by exploiting key properties
from linear system and queueing theories, respectively. Then
Section 3.3 combines the ideas from these partial solutions
into a more general, though approximative solution.
3.1 Linear System Theory
The SI problem has a direct correspondent in linear sys-
tem theory [31]. Assume that T is linear and time-invariant
(LTI), i.e.,
(cid:26) T (c1a1 + c2a2) = c1T (a1) + c2T (a2)
T (cid:0)a(−k)(cid:1) = T (a)(−k)
(1)
for all signals a, a1, a2, scalars c1, c2, and integers k. Here
we tacitly assume ‘signal’ interpretations of the input and
output sequences, and also their extension to doubly inﬁ-
nite sequences such that the shifted version a(−k) of a, i.e.,
a(−k)n := an−k ∀n, k ∈ Z, is well deﬁned. Deﬁne the Kro-
necker input signal u (also called impulse signal) and its
corresponding output signal v (also called impulse-response)
un = (cid:26) 0 , n 6= 0
1 , n = 0
, v = T (u) .
(2)
The impulse signal u is (technically) motivated by the con-
volution property an = Pk akun−k ∀a, n.
With these assumptions, it can be shown that for any
input signal a, the corresponding output signal d can be
completely determined by the following convolution
dn =
∞
Xk=−∞
akvn−k ∀n ∈ Z .
(3)
This result is central in linear system theory, as it simply