/ /
11
i f ( foo ( u16 ( i n p u t +18) ) = = . . . ) { bug4 ( ) ; }
12
/ /
13
i f ( u32 ( i n p u t +20) == . . . ) {
14
15
16 }
17
18
19
/ / v a r 1 may change
/ / FTI
i f ( v a r 1 == . . . ) {
i n d i r e c t copy o f
i n p u t [ 1 8 : 2 0 ]
v a r 1 = . . . ;
bug5 ( ) ; }
i n p u t [ 2 0 : 2 4 ] c h a n g e s
i n f e r s : v a r 1 depends on i n p u t [ 2 0 : 2 4 ]
i f
i m p l i c i t dependency : v a r 1 depends on i n p u t [ 2 0 : 2 4 ]
i n p u t [ 1 6 : 1 8 ] vs .
c o n s t a n t
As
shown in Listing 1, which is extended from
REDQUEEN [4], we could detect the value of variable var1
used in the branch at Line 20 changes, when we mutate either
the 20th, 21st, 22nd or 23rd byte of the input. Therefore, var1
depends on these four bytes.
2.1.2 Comparison with Traditional Taint Analysis.
Comparing to traditional taint analysis, FTI requires fewer
manual efforts, and is much more lightweight and accurate.
Manual Efforts. Traditional taint analysis (e.g., [20]) re-
quires labor-intensive efforts. In general, each instruction/s-
tatement has to be either interpreted with custom instruction-
speciﬁc taint propagation rules, or lifted/translated to an inter-
mediate representation form and then analyzed with general
taint propagation rules. FTI is architecture independent and
requires no extra efforts to port to new platforms.
Speed. FTI is very fast. First, it is based on static code
instrumentation, rather than dynamic binary instrumentation.
Second, it only monitors values of variables used in path
constraints, not all program variables. Third, it does not need
to interpret individual instructions with custom rules.
Accuracy. FTI is more accurate than traditional taint anal-
ysis solutions. Its inference rule is sound. If a variable is
reported to depend on a speciﬁc input byte, then it is most
likely to be true. In other words, it has no over-taint issues.
It also has fewer under-taint issues. In practice, most under-
taint issues are caused by ubiquitous implicit data ﬂows and
loss in external functions or system calls. FTI is immune to
these cases. However, FTI may still have under-taint issues
due to incomplete fuzzing caused by byte-level mutation.
Figure 2 demonstrated how FTI works. Unlike traditional
dynamic taint analysis, which focuses on instructions and suf-
fers from over-taint and under-taint issues, FTI could improve
the accuracy with fewer efforts.
Head-to-Head Comparison. Note that, several recent
works have similar ideas or comparable results. TaintIn-
2580    29th USENIX Security Symposium
USENIX Association
Figure 2: Illustration of the procedure for FTI, along with a
sample program with over-taint and under-taint issues.
duce [46]could infer taint propagation rules for each instruc-
tion without manual efforts. But it is extremely slow in taint
rule inferring stage, due to its mutation on each instruction.
ProFuzzer [42] mutates one input byte at a time too. But it
monitors the coverage changes rather than value changes,
unable to infer taint dependency. MutaFlow [26] monitors
changes in sink APIs and could tell whether a parameter is
tainted. But it focuses on APIs rather than variables, and can-
not provide precise taint information for variables. Further-
more, it lacks a systematic testing, such as the pilot fuzzing
performed by FTI, and thus has much more under-taint issues.
2.1.3 Identify Direct Copies of Inputs.
It is common that, some input bytes will be directly copied to
variables, and compared against expected constants or com-
puted values in branch instructions, as shown at Line 2 (magic
number), Line 6 (checksum) and Line 10 (length check) in
Listing 1. These input bytes should be replaced with the ex-
act values (or with minor variations like ±1) expected in the
branches, to bypass the hard-to-reach path constraints.
FTI could identify all direct copies of inputs in an efﬁcient
way. For each tainted variable used in branch instructions,
we could match it against its dependent input bytes. If their
values are equal, we report the variable as a direct copy of
input. Otherwise, we report it as an indirect copy of input.
2.2 Taint-Guided Mutation
Mutation-based fuzzers will mutate seed inputs in certain
ways and generate new test cases, to explore new code and
trigger potential vulnerabilities. GREYONE utilizes taint pro-
vided by FTI to prioritize which bytes to mutate and which
branch to explore, as well as determine how to mutate.
Figure 3: Dependency between inputs, variables and branches.
2.2.1 Prioritize Bytes to Mutate
As pointed by [29], not all inputs bytes are equal. Some bytes
should be prioritized to mutate, to get a better fuzzing yields.
We argue that, if an input byte could affect more untouched
branches, then it should be prioritized over other input bytes,
because mutating this input byte is more likely to trigger
untouched branches, and trigger more complicated program
behaviors since more branch states have changed.
As shown in Figure 3, each input byte at offset pos of a
seed input S may affect multiple variables, and then affect
multiple branches among which some are not explored by any
test case. We deﬁne a byte’s weight as the count of untouched
branches depending on this byte, as follows.
Wbyte(S, pos) = ∑
br∈Path(S)
IsUntouched(br)∗ DepOn(br, pos) (2)
where, IsUntouched returns 1 if the branch br is not explored
by any test case so far, otherwise 0. And the function DepOn
returns 1 if the branch br depends on the pos-th input byte,
according to FTI, otherwise 0.
2.2.2 Prioritize Branches to Explore
As shown in Figure 3, a program path may have multiple
untouched neighbour branches. Similarly, some untouched
branches should be prioritized to explore in order to get a
better fuzzing yields. We argue that, an untouched branch that
depends on more high-weight input bytes should be prioritized
over other untouched branches.
If an untouched branch depends on more high-weight input
bytes, to explore this branch, we will mutate its dependent
input bytes. As aforementioned, mutating these high-weight
input bytes is more likely to trigger untouched branches (in-
cluding branches different from the one to explore).
Accordingly, for a seed S, we evaluate the weight of an
untouched branch br in the according path as the sum of all
its dependent input bytes’ weight, as follows.
Wbr(S,br) = ∑
pos∈S
DepOn(br, pos)∗Wbyte(S, pos)
(3)
USENIX Association
29th USENIX Security Symposium    2581
Sample program with over-taint and under-taintProcedure of FTI00 00 00 00 01 00 00 00 var1=0var2=0var3=0var1=1var2=1var3=1{0}∈br1.taint{0}∈br2.taint{0}∈br3.taint00 00 00 00 00 01 00 00 var1=0var2=0var3=0var1=16var2=16var3=16{1}∈br1.taint{1}∈br2.taint{1}∈br3.taint00 00 00 00 00 00 01 00 var1=0var2=0var3=0var1=255var2=0var3=0{2}∈br1.taint00 00 00 01 var1=0var2=0var3=0var1=4096var2=0var3=0{3}∈br1.taint{0,1,2,3}∈br1.taint{0,1}∈br2.taint{0,1}∈br3.taintunion00 00 00 00Byte 0Byte 1Byte 2Byte 3Byte 4……Byte Nvar 1br 1br 2br 3br Kvar 2var 3var 4var Mexploredexploredunexploredunexplored(a) Seed Input(b) Program Variables(c) Branches in Path2.2.3 Determine Where and How to Mutate
With the weight of input bytes and unexplored branches, we
could further determine the seed mutation policy.
Where to mutate? Given a seed and the program path it
exercises, we will explore the untouched neighbor branches
along this path one by one, in descending order of branch
weight according to Equation 3.
When exploring a speciﬁc untouched neighbor branch, we
will mutate its dependent input bytes one by one, in descend-
ing order of byte weight according to Equation 2.
How to mutate direct copies of input? As aforemen-
tioned, direct copies of inputs should match the values ex-
pected in untouched branches. Thus, during mutation we re-
place the direct copy of input bytes with the exact expected
values (for magic number and checksum etc.) and values with
minor variations (e.g., ±1 for length checks etc.).
The core question left is how to get the expected values.
There are two cases. If a constant value (e.g., magic number) is
expected, we record this constant value with FTI. If a runtime-
computed value (e.g., checksum) is expected, we ﬁrst feed a
malformed input to test, and get the expected runtime value
with FTI. Then we use the recorded value (and with minor
variations) to patch the dependent input bytes.
Note that, REDQUEEN [4] could also mutate direct copies
of input bytes. Unlike GREYONE, REDQUEEN could not
precisely locate the exact position of dependent bytes. It has
to mutate the seed hundreds of times to get a colorized version
with higher entropy, which exercises the same path. The col-
orized version is tested again, and compared with the original
seed, to locate the potential positions of dependent bytes. The
colorization process is very slow, and the number of candidate
positions could be large too. As a result, it wastes more time
to precisely mutate the dependent bytes than GREYONE.
How to mutate indirect copies of input? If some input
bytes affect an untouched branch but their direct copy is not
used in the branch, we will mutate these bytes one by one, in
descending order of byte weight according to Equation 2.
More speciﬁcally, we will apply random bit ﬂipping and
arithmetic operations on each dependent byte. Different from
the byte-level mutation used in FTI, multiple dependent bytes
could be mutated together in this phase.
As discussed later, our conformance-guided evolution so-
lution will rebase the mutation onto better seeds on-the-ﬂy,
which could greatly improves the mutation of indirect copies.
Mitigate the under-taint issue. As aforementioned, FTI
may have under-taint issues due to incomplete testing. Thus,
for any untouched branch, its dependent input bytes reported
by FTI could be incomplete. In order to explore that branch,
we have to mutate the missing dependent input bytes as well.
More speciﬁcally, in addition to mutate the dependent input
bytes reported by FTI, we also randomly mutate their adjacent
bytes with a small probability.
2.3 Conformance-Guided Evolution
A wide range of fuzzers (e.g., AFL) use control ﬂow features,
e.g., code coverage, to guide evolution direction of fuzzing. To
efﬁciently explore hard-to-reach branches (e.g., those related
to indirect copies of inputs), we propose to use complementary
data ﬂow features to tune the evolution direction of fuzzing.
We note that, for each tainted variable used in untouched
branches, we need to ﬂip some bits of its dependent input
bytes to make it match the expected value. Some test cases re-
quire fewer efforts (i.e., bit ﬂipping) than others. The amount
of efforts required is related to the constraint conformance,
i.e., the distance of tainted variables to the values expected
in untouched branches. Seeds with higher conformance are
more likely to yield test cases exercising untouched branches.
Based on this observation, we use the seed’s constraint
conformance to tune the evolution direction of fuzzing. We
modify the seed updating and seed selection policies accord-
ingly, to drive the fuzzer towards this direction. The test cases
generated during fuzzing are more likely to have higher con-
formance and eventually satisfy the hard-to-reach constraints.
2.3.1 Conformance Calculation
The constraint conformance indicates how much the target
(e.g., seed) matches with the path constraints.
Conformance of an untouched branch. Given an un-
touched branch br, which relies on two operands var1 and
var2, we deﬁne its constraint conformance as follows.
Cbr(br,S) = NumEqualBits(var1,var2)
(4)
where, the function NumEqualBits returns the number of
equal bits between the two arguments. Note that, for a branch
in a switch statement, the two variables it relies on are the
switch condition and the case value.
Conformance of a basic block. Given a seed S and a basic
block bb it has explored, bb may have multiple untouched
neighbor branches (e.g., switch statements). We deﬁne the
constraint conformance of bb as the maximum conformance
of all its untouched neighbor branches:
CBB(bb,S) = MAX
br∈Edges(bb)
IsUntouched(br)∗Cbr(br,S)
(5)
Conformance of a test case. Given a test case S, its con-
straint conformance is deﬁned as the sum of the conformance
score of all basic blocks it has explored.
Cseed(S) = ∑
bb∈Path(S)
CBB(bb,S)
(6)
Note that, seeds with higher constraint conformance are
likely to have (1) more untouched neighbor branches, and
(2) individual untouched branches with higher constraint con-
formance. Further mutations could thus quickly trigger more
untouched branches or target individual untouched branches.
2582    29th USENIX Security Symposium
USENIX Association
comparable to the gradient descent algorithm used in An-
gora [10]. But it could avoid getting stuck in local minimum
like Angora, and brings long-term stable improvements.
Note that, honggfuzz [38] also compares the equality of
operands in branch statements. If a branch’s equality in-
creases, it adds the test case to the seed queue. However,
it does not exclude compare instructions related to touched
branches, which are useless to branch exploration. Further, a
basic block may have multiple compare instructions inside,
but not all of them are related to branches. Lastly, it lacks the
efﬁcient two-dimensional seed queue structure proposed in
this paper, limiting its efﬁciency as well.
2.3.3 On-the-ﬂy Mutation Rebase
Once we ﬁnd a test case exercising the same program path
as previous seeds but has a higher conformance, i.e., case B
as aforementioned, we not only add this test case to the seed
queue by replacing the corresponding node with a new node,
but also replace all uses to the seeds being replaced.
Especially, if the seed being replaced is used by an ongoing
mutation, we will rebase the mutation onto the new seed, since
the new seed is better. This operation could be done on-the-ﬂy,
as illustrated in red line in Figure 1. Experiments showed that,
this optimization technique is very effective. For example, it
promotes the speed of ﬁnding the same number of bugs in the
LAVA data set by three times.
2.3.4 Conformance-Guided Seed Selection
Many works [6, 14] have proved that seed selection policies
could accelerate the evolution of fuzzing. We propose to pri-
oritize seeds with higher conformance during seed selection.
More speciﬁcally, we iterate the linked list of the seed
queue, and select linked nodes that have higher conformance
with a higher probability. Then a random seed in this linked
node will be selected for further mutation.
With this scheme, seeds with higher conformance are more
likely to be selected. Further mutations are more likely to
yield test cases with higher conformance, which could satisfy
the hard-to-reach constraints of untouched branches.
3
Implementation
Figure 4: Dynamics of seed queue updating.
2.3.2 Conformance-Guided Seed Updating
In addition to test cases that ﬁnd new code, we also add test
cases with higher constraint conformance to the seed queue.
In order to efﬁciently support this new seed updating scheme,
we proposed a novel seed queue structure.
Two-Dimensional Seed Queue. Traditional seed queues
are usually kept in a linked list, where each node represents
a seed that explores a unique path4. We extend each node to
include multiple seeds that explore the same path and have
the same conformance but different block conformance, to
form a two-dimensional seed queue, as shown in Figure 4.
Seed queue Updates. Figure 4 also shows how we update
the seed queue, in the following three cases.
• A. New path. If the test case ﬁnds new code, then it will
be added to the seed queue as a new node, same as other
coverage-guided fuzzers (e.g., AFL).
• B. Same path but higher conformance. If the test case
does not ﬁnd any new code, but has a higher conformance
than seeds in the corresponding node (with same path)
in the queue, then this node will be replaced with a new
node consisting of only this test case.
• C. Same path and conformance, but different basic
block conformance. If the test case explores the same
path and has the same conformance as seeds in the cor-
responding node in the queue, but has a distribution of
basic block conformance different from seeds in that
node, then we will append this test case to that node.
It is worth noting that, in the last case, since the test case
has a unique distribution of basic block conformance, it could
derive new test cases to quickly trigger untouched neighbor
branches of some basic blocks, and thus is useful.
Comparison. This seed updating policy makes the fuzzer
gradually improve the overall conformance, and satisﬁes the
constraints of untouched branches with a fast pace, at a speed
4In AFL, it represents a unique edge hit or a new edge hit count range
We implemented a prototype of GREYONE with over 20,000
lines of C/C++ code. The current prototype supports analyz-
ing applications with LLVM bytecode. Here, we present some
of its implementation details.
3.1 Modularized Framework
As shown in Figure 1, GREYONE consists of several core
components, e.g., seed updating, seed selection, seed mutation
USENIX Association
29th USENIX Security Symposium    2583
Path1seed11seed12seed13Path2seed21seed22Path3seed31seed32seed33Seed QueuePath1seed11seed12seed13Path2seed21seed22Path3seed31seed32seed33Seed QueuePath4seed41Path1seed11seed12seed13Path2seed21’Path3seed31seed32seed33Seed QueuePath1seed11seed12seed13Path2seed21seed22Path3seed31seed32seed33Seed Queueseed231. NewPath2. Higer Conformance3. Same Coverage/Conformance,Diﬀerent Branch Confromanceand testing. We implemented a set of extensible interfaces to
support various policies and future improvements.
Test Case Scoring. Evolutionary fuzzers usually put some
test cases to a seed pool for further mutation according to a
certain test case scoring algorithm. We implemented a gen-
eral interface of test case scoring, able to support both the
coverage-guided seed updating policy adopted by AFL and
the conformance-guided policy adopted by GREYONE.
Coverage Tracking. As pointed by CollAFL [14], there is
a serious hash collision issue in traditional coverage tracking
solutions (e.g., AFL). We reproduce the mitigation solution
of CollAFL in GREYONE.
Conformance Tracking. To support conformance track-
ing, we instrument each branch statement (including con-
ditional branches and switch statements) to count
the
number of equal bits of its operands (by operations like
__builtin_popcount).
Seed Prioritization. Fuzzers usually prioritize seeds to se-
lect and assign different energy to mutate according to a cer-
tain seed scoring algorithm. We implemented a general inter-
face of seed scoring, able to support the conformance-guided
seed selection policy adopted by GREYONE and policies used
by other fuzzers (e.g., CollAFL [14] and AFLfast [6]).
Variable Value Monitoring FTI relies on variable value
monitoring during fuzzing. We instrument the application to
record the values of variables used in path constraints. More
speciﬁcally, we assign unique IDs to all such variables, and
store their values in a bitmap (with the ID as key), similar to
the bitmap storing code coverage used by AFL.
Seed Mutation Algorithms.
In addition to the mutation
operators (e.g., byte ﬂipping) implemented by other fuzzers
(e.g., AFL), we also add supports to byte-level mutation used
by FTI, and direct-copy mutation in which the fuzzer is told
the exact offset and exact value to use.
State Manager. The fuzzer usually requires special data
structures to support efﬁcient communication between com-
ponents and efﬁcient decision making. We constructed many
tree-based and hash-table-based structures to store these in-
formation, including control ﬂow graph, code coverage, seed
conformance, variables’ taint attributes and variables’ values.
Selective Testing.
In addition to code coverage tracking,
GREYONE has two more modes during testing: (1) variable
value monitoring mode used for FTI; (2) conformance-guided