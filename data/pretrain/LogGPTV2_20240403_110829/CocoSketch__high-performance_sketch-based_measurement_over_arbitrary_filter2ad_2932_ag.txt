1 − 𝑝
𝑗
𝑤2
𝑝
=
= 2𝑤 𝑓𝑗
− 𝑓 2
𝑗
□
CocoSketch: High-Performance Arbitrary Partial Key Measurement
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
otherwise. We define
𝐶𝑖,𝑗 (𝑒) =
We have
Var(cid:104)(cid:100)𝐶𝑖,𝑗 (𝑒)(cid:105)
Lemma 5. For any flow 𝑒 of any key 𝑘 ≺ 𝑘𝐹 , in the hardware-
friendly CocoSketch,
Proof. In the 𝑖𝑡ℎ array, let 𝐼𝑖,𝑗 (𝑒) be 1 if 𝑘(𝐵𝑖[ 𝑗].𝐾) = 𝑒 and 0
𝑙
=
𝑘(𝑎)=𝑒
ℎ𝑖 (𝑎)=𝑗
𝑓 (𝑒) · 𝑓 (𝑒)
Var(cid:104)(cid:98)𝑓𝑖(𝑒)(cid:105)

𝑓 (𝑎), (cid:100)𝐶𝑖,𝑗 (𝑒) = 𝐼𝑖,𝑗 (𝑒) · 𝐵𝑖[ 𝑗].𝑉
= 𝐶𝑖,𝑗 (𝑒) · E(cid:2)𝐵𝑖[ 𝑗].𝑉 − 𝐶𝑖,𝑗 (𝑒)(cid:3) = 𝐶𝑖,𝑗 (𝑒) · 𝑓 (𝑒)
Cov(cid:104)(cid:100)𝐶𝑖,𝑗 (𝑒),(cid:100)𝐶𝑖,𝑘(𝑒)(cid:105)
 𝑙
Var(cid:104)(cid:98)𝑓𝑖(𝑒)(cid:105)
(cid:100)𝐶𝑖,𝑗 (𝑒)
𝑗=1
𝐶𝑖,𝑗 (𝑒) · 𝑓 (𝑒)
= 0, 𝑗 ≠ 𝑘
𝑙
= Var
𝑙
E
A.2 Error Bound
In this section, we first prove the unbiasedness of both basic Co-
coSketch and hardware-friendly CocoSketch. Then, we prove the
error bound of Theorem 3 shown in §5.2.
ketch,
= 𝑓 (𝑒)
Lemma 3. For any flow 𝑒 of any key 𝑘 ≺ 𝑘𝐹 , in the basic CocoS-
(cid:104)(cid:98)𝑓 (𝑒)(cid:105)
= 𝑓 (𝑒). Let(cid:98)𝑓 𝑡 (𝑒) be the estimated size
the expected increment to(cid:98)𝑓 𝑡 (𝑒) is 𝑤 if 𝑒 = 𝑒𝑖 and 0 otherwise.
basic CocoSketch, E
of 𝑒 before 𝑡𝑡ℎ insertion. Suppose that the incoming packet is (𝑒𝑖, 𝑤)
for the 𝑡𝑡ℎ insertion. We prove the unbiasedness by showing that
Proof. We first prove that, for any flow 𝑒 of full key 𝑘𝐹 , in the
(cid:104)(cid:98)𝑓 (𝑒)(cid:105)
If 𝑒 = 𝑒𝑖, there are two cases. Case 1: If 𝑒 is recorded, the estimated
size will be increased by 𝑤. Case 2: If 𝑒 is not recorded, suppose
that the mapped bucket whose value is the smallest is in the 𝑘𝑡ℎ
array. The expected increment is
(𝐵𝑘 [ℎ𝑘(𝑒)].𝑉 + 𝑤) ·
𝑤
If 𝑒 ≠ 𝑒𝑖, there are two cases. Case 1: If 𝑒 is recorded and the
corresponding bucket will be updated, the expected increment is
(𝐵𝑘 [ℎ𝑘(𝑒)].𝑉 + 𝑤) = 𝑤
(cid:16)(cid:98)𝑓 𝑡 (𝑒) + 𝑤(cid:17) ·
Therefore, the expected increment to(cid:98)𝑓 𝑡 (𝑒) is 𝑤 if 𝑒 = 𝑒𝑖.
(cid:98)𝑓 𝑡 (𝑒)
(cid:16)(cid:98)𝑓 𝑡 (𝑒) + 𝑤(cid:17) −(cid:98)𝑓 𝑡 (𝑒) = 0
the expected increment to(cid:98)𝑓 𝑡 (𝑒) is 0 if 𝑒 ≠ 𝑒𝑖.
 =

full key. Then, for any flow 𝑒 of any key 𝑘 ≺ 𝑘𝐹 , we have
(cid:104)(cid:98)𝑓 (𝑒)(cid:105)
𝑓 (𝑎) = 𝑓 (𝑒)
(cid:98)𝑓 (𝑎)

𝑘(𝑎)=𝑒
𝑘(𝑎)=𝑒
= E
E
Case 2: Otherwise, the estimated size does not change. Therefore,
As a result, the basic CocoSketch achieves unbiasedness for the
Let(cid:98)𝑓𝑖(𝑒) be the estimated size of flow 𝑒 in the 𝑖𝑡ℎ array of the
□
hardware-friendly CocoSketch.
Lemma 4. For any flow 𝑒 of any key 𝑘 ≺ 𝑘𝐹 , in the hardware-
friendly CocoSketch,
E
(cid:104)(cid:98)𝑓𝑖(𝑒)(cid:105)
= 𝑓 (𝑒)
Proof. Note that in a bucket, the probability of occupying the
bucket is proportional to the size of each flow. Therefore, after the
insertion process,
P [𝐵𝑖[ℎ𝑖(𝑒)].𝐾 = 𝑒] =
𝑓 (𝑒)
𝐵𝑖[ℎ𝑖(𝑒)].𝑉
Based on the probability, we can get the expectation of the estimated
size in each array.
(cid:104)(cid:98)𝑓𝑖(𝑒)(cid:105)
E
𝑓 (𝑒)
𝐵𝑖[ℎ𝑖(𝑒)].𝑉
=
· 𝐵𝑖[ℎ𝑖(𝑒)].𝑉 = 𝑓 (𝑒)
Then, we can get the variance for the 𝑖𝑡ℎ array is that
𝑙
=
=
𝑗=1
𝑓 (𝑒) · 𝑓 (𝑒)
𝑙
(cid:115)
(cid:35)
𝑓 (𝑒)
𝑓 (𝑒)
⩽ 𝛿
(cid:34)
𝑅(𝑒) ⩾ 𝜖 ·
P
□
Theorem 3. Let 𝑙 = 3 · 𝜖−2 and 𝑑 = 𝑂(log 𝛿−1). For any flow 𝑒 of
arbitrary partial key 𝑘𝑃 ≺ 𝑘𝐹 ,
P
(cid:35)
(cid:115)
𝑅𝑖(𝑒) ⩾ 𝜖 ·
Proof. Let 𝑅𝑖(𝑒) be the relative error of flow 𝑒 based on its
coSketch. According to the variance and Chebyshev’s inequality,
we have
estimated size(cid:98)𝑓𝑖(𝑒) in the 𝑖𝑡ℎ array of the hardware-friendly Co-
(cid:34)
(cid:104)(cid:12)(cid:12)(cid:12)(cid:98)𝑓𝑖(𝑒) − 𝑓 (𝑒)(cid:12)(cid:12)(cid:12) ⩾ 𝜖 ·(cid:112)𝑓 (𝑒) · 𝑓 (𝑒)(cid:105)
Var(cid:104)(cid:98)𝑓𝑖(𝑒)(cid:105)
(cid:115)
(cid:35)
By setting 𝑙 = 3 · 𝜖−2, we have
⩽
= 𝜖−2 · 𝑙−1
𝜖2 · 𝑓 (𝑒) · 𝑓 (𝑒)
𝑓 (𝑒)
𝑓 (𝑒)
= P
(cid:34)
𝜖·(cid:112)𝑓 (𝑒)/𝑓 (𝑒), at least 𝑑/2 𝑅𝑖(𝑒) must be larger than 𝜖·(cid:112)𝑓 (𝑒)/𝑓 (𝑒).
Because the final estimated size is the median result, if the 𝑅(𝑒) ⩾
Based on the Chernoff’s inequality, setting 𝑑 = 𝑂(log 𝛿−1) can make
such probability reduce to 𝛿.
□
Let 𝑀 = 𝑑·𝑙. Then we analyze 𝑀 needed for different 𝑑 to achieve
given 𝜖 and 𝛿. Based on the proof above, we have
𝑓 (𝑒)
𝑓 (𝑒)
⩽
1
3
𝑅𝑖(𝑒) ⩾ 𝜖 ·
P
(cid:19)𝑂(𝑑)
(cid:18)
𝑑
𝜖2 · 𝑀
□
𝛿 =
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
If two configuration 𝑀1, 𝑑1 and 𝑀2, 𝑑2 achieve the same error bound,
we have
𝑀2 ≈ 𝑑2 · 𝛿− 1
𝑑1 · 𝛿− 1
We can get that, 𝑑 ≈ ln 𝛿−1 can achieve the smallest 𝑀 for given 𝛿.
For other 𝑑, we need around 𝑑·(1/𝛿)1/𝑑
times more memory, where
𝑒·ln(1/𝛿)
𝑒 is the Euler’s number.
· 𝑀1
𝑑2
𝑑1
A.3 Recall Rate
In this section, we prove Theorem 4 shown in §5.3.
Theorem 4. For any flow 𝑒 of full key 𝑘𝐹 ,
1 + 𝑙 · 𝑓 (𝑒)
𝑓 (𝑒)
P [𝑍(𝑒) = 1] ⩾ 1 −
(cid:18)
(cid:19)−𝑑
Proof. In the 𝑖𝑡ℎ array, let 𝑍𝑖(𝑒) be a 0-1 function. 𝑍𝑖(𝑒) = 1
if and only if 𝑒 is recorded in the 𝑖𝑡ℎ array of the CocoSketch.
According to the Jensen’s inequality, we have
P [𝐵𝑖[ℎ𝑖(𝑒)].𝑉 = 𝑚]
P [𝑍𝑖(𝑒) = 1] =

𝑓 (𝑒)
Because the hash functions are independent,
𝐵𝑖[ℎ𝑖(𝑒)].𝑉
𝑙 · 𝑓 (𝑒)
𝑓 (𝑒) + 𝑙 · 𝑓 (𝑒)
𝑚
𝑓 (𝑒)
⩾
E [𝐵𝑖[ℎ𝑖(𝑒)].𝑉] =
P [𝑍(𝑒) = 1] = 1 − 𝑑
(cid:18)
𝑖=1
(cid:18)
1 −
1 + 𝑙 · 𝑓 (𝑒)
𝑓 (𝑒)
⩾ 1 −
= 1 −
𝑓 (𝑒) + 𝑙 · 𝑓 (𝑒)
𝑙 · 𝑓 (𝑒)
(cid:19)−𝑑
(1 − P [𝑍𝑖(𝑒) = 1])
(cid:19)𝑑
Y. Zhang et al.
□
B BASIC COCOSKETCH IMPLEMENTATION
CPU Implementation: We implement the basic CocoSketch (§4.1)
using C++. The hash functions are implemented using the 32-bit Bob
Hash [83] with different hash seeds. We implement and evaluate
them on a machine with one 4-core processor (8 threads, Intel(R)
Core(TM) i5-8259U CPU @ 2.30GHz) and 16 GB DRAM memory.
The processor has 64KB L1 cache, 256KB L2 cache for each core,
and 6MB L3 cache shared by all cores.
OVS Implementation: We implement CocoSketch on OVS v2.12.1
with DPDK 18.11.10. We use ring buffers as the shared memory to
connect the datapath in OVS and the measurement process of the
CocoSketch. When a packet enters the datapath, its packet header
will be written into ring buffers. The measurement process continu-
ously reads packet header information from ring buffers by polling.
Our testbed has two servers that are directly connected. One server
runs OVS, and another server generates high-speed TCP traffic
using pktgen-dpdk (version 3.7.2). Each server is equipped with a
Mellanox ConnectX-3 40G NIC, an Intel Core PI:EMAIL
CPU, and 16GB DRAM. To accelerate the process, we assign multi-
ple (e.g., 4) Rx queues for the DPDK receive port in OVS. Different
Rx queues are pinned to different cores and are polled by different
Poll Mode Driver threads.