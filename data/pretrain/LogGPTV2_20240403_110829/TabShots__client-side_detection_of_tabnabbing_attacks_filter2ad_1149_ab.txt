update the contents of their pages. Ideally, a tab could be
captured right before it loses focus, but since Google Chrome
does not oﬀer such an event, this feature cannot be imple-
mented without a severe usability and performance penalty.
Comparing Tab Snapshots.
When a tab regains focus, TabShots needs to compare
the current snapshot data with the stored data and detect
any diﬀerences. Favicons are compared by source, and the
screenshots are compared visually. Each screenshot is di-
vided in a raster of ﬁxed-size tiles (e.g., 10x10 pixels). Each
tile is compared to its counterpart in the stored snapshot
data.
If the tiles do not match exactly, the area covered
by it is marked as changed. The rastering and comparison
algorithms are implemented using the recently introduced
HTML5 canvas element, which oﬀers extensive image ma-
nipulation capabilities.
One potential disadvantage of the screenshot analysis is
the diﬃculty to detect a small change in a page that results
in a visible shifting of contents (e.g. adding one message
in front of a list). Such false positives may be addressed
by a smarter comparison algorithm, that is able to detect
movements within a screenshot.
The evaluation section (Section 4) discusses the chosen tile
size and performance of the comparison algorithm in more
detail.
Highlighting Differences.
Once the diﬀerences for a focused tab are calculated, Tab-
Shots injects an overlay into the page. This overlay is com-
pletely transparent, except for the diﬀerences, which are
shown in semi-transparent red. The overlay is positioned in
the top left corner and covers the entire visible part of the
site. Setting the CSS directive pointer-events: none ensures
that the overlay does not cause any unwanted interactions,
and allows mouse and keyboard events to “fall through” the
overlay onto the original content.
In order to detect a malicious page from actively trying to
remove the overlay from the DOM, we implement a mutation
event listener that is triggered when an element is removed.
It then checks whether the overlay is still present and if not,
immediately warns the user of this active malicious behavior.
Security Indicator.
In addition to the overlay of the changes on the current
page, TabShots also has a browser toolbar icon, indicating
the current status of the site. The icon’s background color
indicates how much of the site has changed, ranging from
almost nothing ( 40%, shown as red).
Clicking on the icon shows a miniature view of the current
tab combined with the overlay of detected changes. Having
a security indicator as part of the browser environment en-
sures that even if a malicious page somehow manipulates or
removes the overlay, the user still has a trustworthy notiﬁ-
cation mechanism.
The current notiﬁcation mechanism is quite subtle, but
follows other commonly accepted and implemented notiﬁca-
tion mechanisms, such as displaying a padlock when using
a secure connection. If desired, the notiﬁcation mechanism
can be easily extended to something more visible, such as
the warnings given in case of an invalid SSL certiﬁcate.
3.3 Alternative Design Decisions
During the design and development of TabShots, we con-
sidered diﬀerent paths and options, leading to the outcome
described here. For completion, we want to discuss two top-
ics that drove the design and workings of TabShots in a bit
more detail.
JavaScript-based Detection.
Instead of visually comparing screenshots, we might at-
tempt to detect the malicious JavaScript code actually car-
rying out the tabnabbing attack. This is not a trivial task,
since JavaScript’s dynamic nature makes script analysis dif-
ﬁcult. Furthermore, there are a multitude of ways to actu-
ally implement a tabnabbing attack. The attack example
discussed earlier uses the window.onBlur event, but a tab-
nabbing attack is certainly not limited to only this event.
Similarly, there are numerous ways to actually change the
displayed content, ranging from the use of JavaScript to ex-
tensive use of available CSS techniques.
Regularly Capturing Tabs.
Currently, TabShots makes a capture of a tab at regu-
lar intervals, so it can compare the capture taken when the
user returns to a fairly recent capture from before. Ideally,
we would make a capture when the user leaves, and a cap-
ture when the user returns. Unfortunately, Chrome does
not trigger an event when a user leaves a tab, only when a
user focuses a new tab. At the moment this event is received,
the new tab is already displayed. To take a screenshot of the
tab that was just left, TabShots has to switch it back into
display, take a capture and switch back to the new tab. Un-
fortunately, this cannot be implemented without very brieﬂy
revealing this process visually to the user, with a degraded
user experience as a consequence.
4. EVALUATION
As discussed before, a tabnabbing attack takes place when
a user leaves a innocuous-looking malicious tab unfocused.
Tabnabbing is diﬀerent from traditional phishing, since it
exploits trust placed in a previously opened tab, whereas
phishing simply tries to mislead the user.
450Figure 5: Breakdown of the average performance
with a resolution of 1366x768.
Our evaluation of TabShots consists of three parts. First
we discuss how TabShots eﬀectively protects against all tab-
nabbing attacks. Second, we discuss the performance impact
of TabShots. The third part elaborates on the setup and re-
sults of an experimental compatibility study using Alexa’s
1000 most popular sites.
4.1 Security
The security guarantees oﬀered by TabShots follow di-
rectly from its design. We recapitulate the three most im-
portant security properties here: (i) zero false negatives, (ii)
user-friendly and clear overlay and (iii) secure toolbar indi-
cator.
TabShots can not miss a tabnabbing attack by design,
since it visually captures screenshots from a tab and com-
pares them. In order for a tabnabbing attack to occur unde-
tected, it has to ensure that the screenshots before and after
losing focus are identical, meaning the page did not change
while out of focus. This case is considered a classic phishing
attack, and not a speciﬁc tabnabbing attack.
Second, TabShots injects an overlay of the focused tab, in-
dicating which parts of the page have changed since its last
focus. Using mutation events, TabShots detects if a mali-
cious page actively tries to remove the overlay, and notiﬁes
the user with a strong security message.
Third, TabShots also adds an icon to the browser toolbar.
Using a three-level color indication system, it notiﬁes the
user of how much a tab did change. The strength of this
toolbar icon is that it runs in the context of the extension,
and is completely out of reach to any page-speciﬁc code.
This eﬀectively prevents any manipulation by a malicious
page.
4.2 Performance
In order to prevent tabnabbing attacks, TabShots must
be capable of warning the user of any changes before she
enters any sensitive information. Furthermore, since Tab-
Shots’s algorithm is executed when a user switches tabs, it
is crucial that there is no noticeable performance impact.
The performance measurements and analysis of the main
algorithm, discussed below, show that TabShots succeeds in
quickly processing the captures and warning the user of any
changes that occurred.
One important advantage of TabShots is that it fully op-
erates in the background, without any blocking impact on
any browser action or processing. When a user switches
tabs, TabShots will perform the following steps:
1. Capture a screenshot of the newly focused tab
2. Cut the previously captured image of this tab (before
it lost focus) into tiles
3. Cut the newly acquired screenshot into tiles
4. Compare the tiles of both screenshots and mark the
diﬀerences
5. Inject the calculated overlay into the page and update
the TabShots icon
For a browsing window with a resolution of 1366x768, the
most common resolution at the time of this writing [18],
TabShots is capable of performing these steps within an av-
erage time of 284ms after receiving the browser event ﬁred
by switching tabs. Fig. 5 shows a breakdown of this time
into the steps mentioned before. Note that of these 284ms,
160ms are consumed by browser APIs, which are out of our
control.
Currently, a large chunk of time is consumed by the com-
parison algorithm, which is a pixel-by-pixel comparison of
each tile. The time used by this algorithm is strongly corre-
lated to the number of changes within a page. If a diﬀerence
between tiles is detected at the ﬁrst pixel, there is no need to
check the remaining pixels. Consequently, if a tabnabbing
attack occurs, a lot of changes will be detected and Tab-
Shots’s algorithm will perform even faster. Table 1 presents
the number of milliseconds spent on comparison on our test-
ing pages, where we use a div to change a certain percentage
of a page, clearly showing the correlation between amount
of changes and required processing time.
% changes ms spent on comparison
0
25
50
75
100
126
86
60
32
4
Table 1: Correlation between amount of changes on
a page and number of milliseconds consumed by the
comparison algorithm.
Overall, one can see that TabShots is eﬃcient enough to
prevent tabnabbing attacks, before the user discloses her cre-
dentials to the phishing page and without a negative eﬀect
on the user’s browsing experience. Moreover, if TabShots
was to be implemented directly within the browser instead
of through the browser’s extension APIs, we expect that its
overhead would be signiﬁcantly lower.
4.3 Compatibility
Apart from the security guarantees oﬀered by TabShots,
its compatibility with existing sites is another important
evaluation criterion. When using non-malicious web appli-
cations, the number of changes detected by TabShots, i.e.
false positives, should be limited, even though the user can
quickly determine whether a change is legitimate or not.
To determine the compatibility with current web applica-
tions, we ran TabShots on the top 1000 Alexa sites. Each
site was loaded in a separate tab, and captured before and
after it lost focus. These two captures were compared and
analyzed for the number of changed blocks. Through our
preliminary experimentation with TabShots, we discovered
that a 10x10 tile-size strikes the desired balance between
performance and precision. Smaller tiles would incur extra
overhead, since as the number of tiles increase, so do the
  CaptureCut baseCut captureCompareShow result107ms141ms231ms284ms0msTabShots codeBrowser APIs451Figure 6: Compatibility analysis of the visual com-
parison algorithm with Alexa’s top 1000 sites.
Domain
facebook.com
google.com
youtube.com
yahoo.com
baidu.com
wikipedia.org
live.com
twitter.com
qq.com
amazon.com
blogspot.com
linkedin.com
taobao.com
google.co.in
yahoo.co.jp
sina.com.cn
msn.com
google.com.hk
google.de
bing.com
% of changed tiles
0.38
0.00
4.05
5.31
0.00
0.73
2.65
2.91
6.00
2.57
0.32
0.26
0.49
0.00
4.13
1.24
23.22
0.00
0.00
0.00
Table 2: Compatibility analysis of the Alexa top 20
sites
checks between the old versions and the new ones, without
a distinguishable improvement in pin-pointing the modiﬁed
content.
Table 2 shows the results for the top 20 sites, and Fig. 6
shows a histogram of the entire top 1000, grouped by integer
percentage values. The results show that 78% of sites fall
within the safe threshold of less than 5% changed blocks,
meaning there are no compatibility issues here. About 19%
of sites have moderate changes, but still less than 40%. Man-
ual veriﬁcation shows that these changes are mainly caused
by changing content such as image slideshows or dynamic ad-
vertisements. A typical example of an overlay of a dynamic
advertisement is shown in Fig. 9. Finally, 3% of sites has
more than 40% of changed blocks, which seem to be caused
by changing background graphics. Fig. 7 and 8 respectively
show the worst case scenario for the sites with moderate
changes (less than 40%) and sites with heavy changes (more
than 40%).
Note that even though certain sites have a high number
of changed blocks, TabShots never interferes with a page,
Figure 9: Screenshot of a typical dynamic advertise-
ment being recognized by TabShots.
preventing any loss of functionality. If desired, a user can
easily whitelist known trusted sites, to prevent needless over-
laying of changed content. Additionally, a future extension
of TabShots can incorporate a learning algorithm to iden-
tify dynamic parts of a site while the tab is in focus, which
reduces the number of false positives.
The automated analysis gives a good idea of the impact on
Alexa’s top 1000, but is unfortunately not able to cover the