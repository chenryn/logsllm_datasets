measurement of time. MALT satisﬁes the ﬁrst requirement by
running the analysis code in SMM with ring -2. We enumerate
all the side effects introduced by MALT in Section VII-A and
attempt to meet the second requirement in our system. Since
MALT runs on bare metal, it immediately meets the third and
fourth requirements. Lastly, MALT partially satisﬁes the ﬁfth
requirement by adjusting the local timers in the SMI handler.
We further discuss the timing attacks below.
A. Side Effects Introduced by MALT
MALT aims to transparently analyze malware with mini-
mum footprints. Here we enumerate the side effects introduced
by MALT and show how we mitigate them. Note that achiev-
ing the highest level of transparency requires MALT to run in
single-stepping mode.
CPU: We implement MALT in SMM, another CPU mode in
the x86 architecture, which provides an isolated environment
for executing code. After recognizing the SMI assertion, the
processor saves almost the entirety of its state to SMRAM. As
previously discussed, we rely on the performance monitoring
registers and LAPIC to generate SMIs. Although these regis-
ters are inaccessible from user-level malware, attackers with
6262
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
ring 0 privilege can read and modify them. LAPIC registers in
the CPU are memory-mapped, and its base address is normally
at 0xFEE00000. In MALT, we relocate LAPIC registers
to another physical address by modifying the value in the
24-bit base address ﬁeld of the IA32 APIC BASE Model
Speciﬁc Register (MSR) [24]. To ﬁnd the LAPIC registers,
attackers need to read IA32 APIC BASE MSR ﬁrst
that
we can intercept. Performance monitoring registers are also
MSRs. RDMSR, RDPMC, and WRMSR are the only instructions
that can access the performance counters [51] or MSRs. To
mitigate the footprints of these MSRs, we run MALT in the
instruction-by-instruction mode and adjust the return values
seen by these instructions before resuming Protected Mode.
If we ﬁnd a WRMSR to modify the performance counters, the
debugger client will be notiﬁed.
Memory and Cache: MALT uses an isolated memory re-
gion (SMRAM) from normal memory in Protected Mode. Any
access to this memory in other CPU modes will be redirected
to VGA memory. Note that this memory redirection occurs
in all x86 machines, even without MALT; this is not unique
to our system. Intel recently introduced System Management
Range Registers (SMRR) [24] that limits cache references of
addresses in SMRAM to code running in SMM. This is the
vendor’s response to the cache poisoning attack [53]; MALT
does not ﬂush the cache when entering and exiting SMM to
avoid cache-based side-channel detection.
IO Conﬁgurations and BIOS: MALT reroutes a serial
interrupt to generate an SMI to initialize a debugging session,
and the modiﬁed redirection table entry in I/O APIC can
be read by malware with ring 0 privilege. We change the
redirection table entry back to its original value to remove this
footprint in the ﬁrst generated SMI handler. Once SMM has
control of the system, the SMIs are triggered by conﬁguring
performance counters. MALT uses a custom BIOS, Coreboot,
to program the SMM code. An attacker with ring 0 privilege
can check the hash value of the BIOS to detect the presence
of our system. To avoid this ﬁngerprint, we ﬂash the BIOS
with the original image before the debugging process using
the tool Flashrom [54], and it takes about 28 seconds to ﬂash
the Coreboot with the original AMI BIOS. At that time, the
SMI handler, including the MALT code, has been loaded into
SMRAM and locked. Note that we also need to reﬂash the
Coreboot image for the next system restart.
this problem, we adjust the return values of these timers in
the instruction-level stepping mode. For example, the RDTSC
instruction reads the TSC register and writes the value to the
EAX and EDX registers. While debugging, we can check if the
current instruction is RDTSC and adjust the values of EAX and
EDX before leaving the SMI handler.
Unfortunately, MALT cannot defend against timing attacks
involving an external timer. For instance, malware can send a
packet to a remote server to get correct timing information
(e.g., NTP service). In this case, malware can detect
the
presence of our system and alter its behavior accordingly. One
potential solution to address this problem is to intercept the
instruction that reaches out for timing information and prepare
a fake time for the OS. Naturally, this would not be foolproof
as an attacker could retrieve an encrypted time from a remote
location. Such attacks are difﬁcult to contend with because
we cannot always know when a particular packet contains
timing information. To the best of our knowledge, all existing
debugging systems with any measurable performance slow-
down suffer from this attack. As stated in Ether [4], defending
against external timing attacks for malware analysis systems is
Turing undecidable. However, external timing attacks require
network communications and thus dramatically increase the
probability that the malware will be ﬂagged. We believe that
malware will avoid using external timing attacks precisely
because it wants to minimize its footprint on the victim’s
computer, including using spin loops. We can also analyze
portions of the malware separately and amortize the analysis
time.
B. Analysis of Anti-debugging, -VM, and -emulation Tech-
niques
To analyze the transparency of MALT system, we employ
anti-debugging, anti-virtualization and anti-emulation tech-
niques from [10], [12], [13], [14], [15] to verify our sys-
tem. Since MALT runs on a bare-metal machine, these anti-
virtualization techniques will no longer work on it. Addi-
tionally, MALT does not change any code or the running
environments of operating systems and applications so that
normal anti-debugging techniques cannot work against it. For
example, the debug ﬂag in the PEB structure on Windows
will not be set while MALT is running. Table V summarizes
popular anti-debugging, anti-virtualization, and anti-emulation
techniques, and we have veriﬁed that MALT can evade all
these detection techniques.
C. Testing with Packers
Packing is used to obfuscate the binary code of a program.
It is typically used to protect the executable from reverse-
engineering. Nowadays, malware writers also use packing
tools to obfuscate their malware. Packed malware is more
difﬁcult for security researchers to reverse-engineer the binary
code. In addition, many packers contain anti-debugging and
anti-VM features, further increasing the challenge of reverse-
engineering packed malware.
Timing: There are many timers and counters on the moth-
erboard and chipsets, such as the Real Time Clock (RTC),
the Programmable Interval Timer (8253/8254 chip), the High
Precision Event Timer (HPET), the ACPI Power Management
Timer, the APIC Timer, and the Time Stamp Counter (TSC).
Malware can read a timer and calculate its running time. If
the time exceeds a certain threshold, malware can conclude
that a debugger is present. For the conﬁgurable timers, we
record their values after switching into SMM. When SMM
exits, we set the values back using the recorded values minus
the SMM switching time. Thus, malware is unaware of the
time spent in the SMI handler. However, some of the timers
and counters cannot be changed, even in SMM. To address
6363
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
SUMMARY OF ANTI-DEBUGGING, ANTI-VM, AND ANTI-EMULATION TECHNIQUES
TABLE V
Anti-debugging [11], [12]
API Call
PEB Field
Detection
Kernel32!IsDebuggerPresent returns 1 if a target process is being debugged
ntdll!NtQueryInformationProcess: ProcessInformation ﬁeld set to -1 if the process is being debugged
kernel32!CheckRemoteDebuggerPresent returns 1 in debugger process
NtSetInformationThread with ThreadInformationClass set to 0x11 will detach some debuggers
kernel32!DebugActiveProcess to prevent other debuggers from attaching to a process
PEB!IsDebugged is set by the system when a process is debugged
PEB!NtGlobalFlags is set if the process was created by a debugger
ForceFlag ﬁeld in heap header (+0x10) can be used to detect some debuggers
UnhandledExceptionFilter calls a user-deﬁned ﬁlter function, but terminates in a debugging process
TEB of a debugged process contains a NULL pointer if no debugger is attached; valid pointer if some
debuggers are attached
Ctrl-C raises an exception in a debugged process, but the signal handler is called without debugging
Inserting a Rogue INT3 opcode can masquerade as breakpoints
Trap ﬂag register manipulation to thwart tracers
If entryPoint RVA is set to 0, the magic MZ value in PE ﬁles is erased
ZwClose system call with invalid parameters can raise an exception in an attached debugger
Direct context modiﬁcation to confuse a debugger
0x2D interrupt causes debugged program to stop raising exceptions
Some In-circuit Emulators (ICEs) can be detected by observing the behavior of the undocumented 0xF1
instruction
Searching for 0xCC instructions in program memory to detect software breakpoints
TLS-callback to perform checks
Anti-virtualization
VMWare
Xen
Other
Virtualized device identiﬁers contain well-known strings [10]
checkvm software [55] can search for VMWare hooks in memory
Well-known locations/strings associated with VMWare tools
Checking the VMX bit by executing CPUID with EAX as 1 [29]
CPU errata: AH4 erratum [29]
LDTR register
IDTR register (Red Pill [28])
Magic I/O port (0x5658, ‘VX’) [17]
Invalid instruction behavior
Using memory deduplication to detect various hypervisors including VMware ESX server, Xen, and Linux
KVM [56]
[13]
[14]
Anti-emulation
Bochs
QEMU
Other
Visible debug port [10]
cpuid returns less speciﬁc information [7]
Accessing reserved MSR registers raises a General Protection (GP) exception in real hardware; QEMU does
not [15]
Attempting to execute an instruction longer than 15 bytes raises a GP exception in real hardware; QEMU
does not [15]
Undocumented icebp instruction hangs in QEMU [7], while real hardware raises an exception
Unaligned memory references raise exceptions in real hardware; unsupported by QEMU [15]
Bit 3 of FPU Control World register is always 1 in real hardware, while QEMU contains a 0 [7]
Using CPU bugs or errata to create CPU ﬁngerprints via public chipset documentation [15]
RUNNING PACKED NO T E P A D.E X E UNDER DIFFERENT ENVIRONMENTS
TABLE VI
MALT OllyDbg V1.10
Packing Tool
OK
UPX V3.08
OK
Obsidium V1.4
OK
ASPack V2.29
OK
Armadillo V2.01
OK
Themida V2.2.3.0
OK
RLPack V1.21
OK
PELock V1.0694
OK
VMProtect V2.13.5
OK
eXPressor V1.8.0.1
PECompact V3.02.2 OK
OK
Access violation at 0x00000000
OK
Access violation at 0x42434847
Privileged instruction exception
OK
Display message and terminate
Message: a debugger was found
Message: unknown executable format
Access violation at 0x00000000
6464
VMware Fusion V6.0.2
OK
OK
OK
Crash
DynamoRIO V4.2.0-3
OK
Segmentation fault
OK
Crash
Exception at 0x10a65d7 Message: cannot run under a VM
OK
Segmentation fault
OK
Segmentation fault
OK
OK
OK
Crash
Crash
OK
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
To demonstrate the transparency of MALT, we use pop-
ular packing tools to pack the Notepad.exe application
in a Windows environment and run this packed application
in MALT with near return stepping mode, OllyDbg [31],
DynamoRIO [57], and a Windows virtual machine, respec-
tively. Ten packing tools are used, including UPX, Obsidium,
ASPack, Armadillo, Themida, RLPack, PELock, VMProtect,
eXPressor, and PECompact. All these packing tools enable
the settings for anti-debugging and anti-VM functions if they
have them. After running the packed Notepad.exe, if the
Notepad window appears, we know that it has launched suc-
cessfully. Table VI lists the results. All the packing tools except
UPX, ASPack, and RLPack can detect OllyDbg. Obsidium,
Armadillo, Themida, PELock, and eXPressor are able to detect
DynamoRIO, and the VM can be detected by Armadillo,
Themida, VMProtect, and eXpressor. In contrast, MALT re-
mains transparent to all these packing tools as we expected.
D. Transparency of MALT
Functions and Code Added by MALT: Section VII-B
and VII-C show that existing anti-debugging, anti-VM, anti-
emulation, and packing techniques cannot detect the presence
of MALT. This is because the current techniques are not
targeting MALT’s functions or code, so it is possible that
future malware could detect MALT due to the ever-present
cat-and-mouse game between attackers and defenders. As
for ‘tomorrow’s malware,’ we enumerate and mitigate the
side effects introduced by MALT in Section VII-A. Note
that mitigating all footprints requires stepping instructions
granularity. As with other debugging systems, MALT cannot
defend against external timing attacks.
Running Environment Used by MALT: MALT is built
on SMM so that the transparency of MALT depends on the
implications of SMM usage. Since SMM is not intended for
debugging, the hardware and software on the system may not
expect this usage, which may introduce side-channel footprints
for attackers to detect MALT (e.g., performance slowdown and
frequent switching). However, we believe using SMM is more
transparent than using virtualization or emulation as done in
previous systems due to its minimal TCB and attack surface.
Towards True Transparency: Debugging transparency is
a challenging and recently active problem in the security
community. Unlike previous solutions that use virtualization
or emulation, MALT isolates the execution in the CPU, which
provides a novel idea of addressing the transparency problem.
Although MALT is not fully transparent, we would like to
draw the attention of the community to this hardware-based
approach because the running environment of the debugger
is more transparent
than those of previous systems (i.e.,
virtualization and emulation). Moreover, we further argue
hardware support for truly transparent debugging. For instance,
there could be a dedicated and well-designed CPU mode for
debugging, perhaps with performance counters that are inac-
cessible from other CPU modes, which provides a transparent
switching method between CPU modes.
VIII. EVALUATION