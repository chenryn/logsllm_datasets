参见
实例2.9讲解编号捕获分组。
实例2.11讲解命名捕获分组。
3.10获取所有匹配的列表
问题描述
使用正则表达式编程
143
www.TopSage.com
---
## Page 160
配。但是在许多情形下，正则表达式在部分匹配了一个字符事之后，还能在字符串的
剩余部分找到其他匹配。而且在第二个匹配之后还可能会存在第三个匹配，以此类推。
例如，正则表达式d+>会在目标字符串Theluckynumbersare7，13，16，42，65，and99
中找到6个匹配，分别是：7、13、16、42、65和99。
解决方案
#
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
MatchCollection matchlist = Regex.Matches(subjectString, @"\d+");
如果想要把同一个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
+p@)xabaymau=aoxabaIxaba
VB.NET
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
Dim matchlist = Regex.Matches(SubjectString, "\d+")
如果想要把同一个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
Dim MatchList = RegexObj.Matches (SubjectString)
Java
>
Pattern regex = Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
while (regexMatcher.find()){
resultList.add(regexMatcher.group ());
JavaScript
var 1ist = subject.match(/\d+/g) ;
PHP
preg_match_a11('/\d+/`,$subject, $result,PREG_PATTERN_ORDER);
$result = $result[0];
Perl
@result=$subject a~m/\d+/g;
144
第3章
www.TopSage.com
---
## Page 161
这个解答只能用于不包含捕获分组的正则表达式，因此我们使用的是非捕获分组。更
多细节请参考实例2.9。
Python
如果你打算只使用同一个正则表达式处理少量字符串，可以使用如下的全局函数：
result = re.findall(r"\d+",subject)
要想重复使用同一个正则表达式，那么就需要使用一个编译好的对象：
reobj = re.compile(r"\d+")
result = reobj.findall(subject)
Ruby
result= subject.scan(/\d+/)
讨论
.NET
Regex类中的Matches(O方法会把正则表达式反复应用到字符串之上，直至找到所有的
匹配为止。它会返回一个MatchCollection对象，其中会包含所有的匹配。目标字符串
总是它的第一个参数。这个字符串，也就是正则表达式，要尝试去寻找匹配的字符串。
第一个参数不能是null。否则，MatchesO会产生一个ArgumentNullException例外。
如果你只想获得在少量字符串之上的正则表达式匹配，那么可以使用MatchesO的静态
重载。把目标字符串作为第一个参数，而你的正则表达式作为第二个参数。你还可以
把正则选项作为可选的第三个参数。
如果要处理大量字符串，那么你可以先通过构造一个Regex对象，然后用这个对象
来调用MatchesO函数。此时，目标字符串就成了唯一必需的参数。你还可以使用一
个可选的第二个参数来说明正则表达式应当开始进行查找的目标字符串中的位置
(字符索引)。实质上，你传递给第二个参数的数值，也就是你想要正则表达式忽略
的目标字符串开始字符的数量。当你已经处理了这个字符串的一部分，而想要检查
剩余部分是否会有匹配的时候，会用到这样的方式。如果你指定了一个数量，它必
须大于或等于0，而且要小于或者等于目标字符串的长度。否则，IsMatch(会产生一
个ArgumentOutOfRangeException例外。
静态重载并不支持使用参数来指定正则表达式应该在字符串中开始尝试的位置。也不
存在一个重载函数支持你告知IsMatchO在字符串结束之前停止。如果你需要这样做，
解），然后把所有找到的匹配都添加到一个自已的列表中。
使用正则表达式编程145
www.TopSage.com
---
## Page 162
Java
Java没有提供一个函数来获取所有匹配的列表。但是你可以轻松地在自已的代码中通
过修改实例3.7的代码完成这样的功能。要改动的地方是不再使用if语句，而是用一个
while循环来调用findO。
这个例子中用到了List和ArrayList两个类，因此需要在代码的开始添加一个import语
句：importjava.util.*;
JavaScript
这里的代码也会调用string.matchO，就像在实例3.7中给出的JavaScript解答一样。但
是这里有一个很小但是却很重要的区别：g标志。实例3.4中讲解了正则表达式标志。
/g标志会告知matchO函数在字符串中反复查找所有的匹配，并把它们都放到一个数组
中。在上面的代码示例中，list[0]会保存第一个正则匹配，list[1]包含第二个，以此类推。
检查list.length就可以得知匹配的个数。如果没有找到任何匹配，那么string.match会
照常返回null。
在返回数组中的所有元素都是字符串。当你使用一个包含/g标志的正则式时，
string.matchO不会提供关于正则表达式匹配的更多细节。如果想要得到关于所有正则匹
配的匹配细节，那么就需要按照在实例3.11中的解答来循环访问所有匹配。
PHP
中查找第一个正则匹配。函数preg_match_allO也非常类似。主要的区别是它会找到一个
字符串中的所有匹配。它会返回一个整数，说明正则表达式能找到的所有匹配的个数。
preg_match_allO的前3个参数同preg_matchO的前3个参数是完全一样的：-个正则表
达式的字符串，你要查找的目标字符串，以及用来接受查找结果数组的变量。唯一的
区别是第三个参数现在是必需的，而且这个数组总是多维的。
至于第4个参数，可以使用常量PREG_PATTERN_ORDER或者PREG_SET_ORDER。
如果你没有给出第4个参数，那么默认值是PREG_PATTERN_ORDER。
如果使用了PREG_PATTERN_ORDER，你会得到一个数组，其中第O个元素保存的是
总的匹配的详细信息，而从第1个元素开始则会分别保存捕获分组的详细信息。数组
的长度是捕获分组的个数加1。这样的顺序与preg_matchO所使用的顺序是一样的。区
别是这里每个元素保存的不再是preg_matchO所找到的正则匹配的字符串，而是
preg_matches(找到的所有匹配构成的一个子数组。每个子数组的长度与preg_matchesO)
的返回值是一样的。
要想得到字符串中所有正则匹配的一个列表，并把捕获分组匹配的文本丢掉，那么可
146第3章
www.TopSage.com
---
## Page 163
以使用PREG_PATTERN_ORDER作为第4个参数，然后提取数组中的第0个元素。如
果你只对某个特定捕获分组匹配到的文本感兴趣，那么可以使用PREG_
PATTERN_ORDER和捕获分组的编号。例如，在调用preg_match（%http://（[a-z0-9.-]+)%
Ssubject，Sresult)之后使用Sresult[1]就可以得到在你的目标字符串中所有URL的域名
列表。
PREG_SET_ORDER会在数组中填充相同的字符串，但是方式却有所不同。数组的长
度是preg_matchesO的返回值。数组中的每个元素是一个子数组，其中子元素0中是总
的正则匹配，而子元素1之后则保存的是捕获分组。如果你使用了PREG_SET_ORDER，
那么中Sresult[o]保存的数组与你调用preg_matchO时得到的数组是一样的。
你可以把PREG_OFFSET_ORDER同PREG_PATTERN_ORDER或PREG_SET_ORDER
组合起来使用。这样做的效果就好像把PREGOFFSET_ORDER作为第4个参数传递
给了preg_match0。这样数组中的每个元素不再是一个字符串，而是包含2个元素的数
组，一个是字符事，另外一个是在原始的目标字符事中匹配并始的位置索引。
Perl
实例3.4中讲到，需要添加/g修饰符，才能用正则表达式在目标字符串中找到多于一个
匹配。如果在列表的上下文中使用一个全局正则表达式，那么它会找到使用的匹配并
把它们返回来。在这个实例中，赋值操作符左边的列表变量提供了一个列表上下文。
如果正则表达式中不包含任何捕获分组，该列表中会只包含总的正则匹配。如果正则
表达式中包含捕获分组，那么列表中会包含对每个正则匹配来说的所有捕获分组匹配
的文本。总的正则匹配却不在其中，除非把整个正则表达式声明成一个捕获分组。如
果你只是想获得总的正则匹配的一个列表，那么可以把所有捕获分组都替换成非捕获
分组。实例2.9中介绍了这两种分组。
Python
在re模块中的findallO函数会重复搜索一个字符串，来查找正则表达式的所有匹配。把
正则表达式当作第一个参数，而目标字符事作为第二个参数。你还可以把正则表达式
选项作为可选的第三个参数。
re.findallO函数会调用re.compileO，然后编译好的正则表达式对象会调用findallO方法。
这个方法只有一个必需的参数，也就是目标字符串。
findallO方法还接受2个在全局的re.findall0函数中不支持的可选参数。在目标字符串
之后，你可以传递一个findallO应当在字符串中开始进行搜索的字符位置。如果没有
使用这个参数，那么findall0会处理整个字符串。如果指定了一个起始位置，那么你
还可以指定一个结束位置。如果没有指定结束位置，那么搜索会一直执行到字符串的
结束。
使用正则表达式编程147
www.TopSage.com
---
## Page 164
不管如何调用findallO，得到的结果总是包含找到的所有匹配的列表。如果正则式
中不包含捕获分组，那么你就会得到一个学符事列表。如果它包含捕获分组，那么
你会得到一个元组列表，每个元组中包含每个正则匹配对应的所有捕获分组匹配到
的文本。
Ruby
String类中的scanO方法接受一个正则表达式作为唯一参数。它会在字符串中重复找到
所有的正则表达式匹配。当不使用块（block）来调用它的时候，scanO会返回包含所有
正则匹配的一个数组。
如果正则表达式中不包含任何捕获分组，scan()会返回一个字符串数组。数组中的每个
元素是一个正则匹配，其中保存的是匹配到的文本。
当存在捕获分组的时候，scanO会返回一个数组的数组。数组中每个元素对应一个正则
匹配。每个元素都是所有捕获分组匹配到的文本的一个数组。子元素0保存第一个捕
获分组匹配到的文本，子元素1保存第二个捕获分组，以此类推。整体的正则匹配并
不包含在该数组中。如果想要把整体匹配包含进来，那么可以添加一个捕获分组来把
整个正则表达包起来。
Ruby中没有提供选项可以让scanO在正则表达式中包含捕获分组的情况下返回一个
字符串数组。唯一解决方案只能是把所有命名的和编号的捕获分组都替换成非捕获
分组。
参见
实例3.7、3.11和3.12。
3.11遍历所有匹配
问题描述
上一个实例讲解了如何把-个正则表达式反复应用到字符串之上以得到匹配的一个列
表。现在，我们要求你在代码中遍历所有的匹配。
解决方案
C#
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
Match matchResult = Regex.Match(subjectString, @"\d+");
while (matchResult.Success)(
//Here you can process the match stored in matchResult
148第3章
www.TopSage.com
---
## Page 165
matchResult = matchResult.NextMatch() ;
如果想要把同一个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
+p)xaba auaoxabaxba
matchResult = regexObj.Match(subjectString);
while (matchResult.Success){
// Here you can process the match stored in matchResult
matchResult = matchResult.NextMatch();
VB.NET
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
Dim MatchResult = Regex.Match(SubjectString,"\d+")
While MatchResult.Success
'Here you can process the match stored in MatchResult
MatchResult = MatchResult.NextMatch
End while
如果想要把同一个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("\d+")
Dim MatchResult = RegexObj.Match(SubjectString)
While MatchResult.Success
'Here you can process the match stored in MatchResult
MatchResult = MatchResult.NextMatch
End while
Java
Pattern regex =Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
while (regexMatcher.find()){
//Here you can process the match stored in regexMatcher
JavaScript
如果你的正则表达式可能会产生一个长度为0的匹配，或者你无法确切知道这一点，
那么就要注意，在遇到长度为0匹配和execO时可能会遇到跨浏览器的问题：
var regex =/\d+/g;