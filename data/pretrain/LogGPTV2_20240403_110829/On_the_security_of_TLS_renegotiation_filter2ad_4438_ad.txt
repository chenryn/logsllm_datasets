and probabilistic computations under the negotiated key.
The secure multi-phase ACCE deﬁnition when limited to a
phase per session and a single key pair per party (nph = nke =
1) collapses to an extension of the original ACCE deﬁnition,
the extension being support for server-only authentication.
2.3.3 Secure renegotiable ACCE.
We next strengthen the authentication notion to include
renegotiation. Intuitively, an adversary should not be able
to cause a phase to accept unless there exists a phase at the
peer with a matching pre-accept handshake transcript and
all previous phases’ handshake and record layer transcripts
match, provided she has not impersonated the parties in the
current phase. We will show in Section 5 that TLS with our
proposed countermeasure satisﬁes this deﬁnition.
Definition 4
(Secure renegotiable ACCE).
A.d = πt
A with πs
Suppose an algorithm A with running time τ interacts with
a multi-phase ACCE protocol Π in the above execution envi-
ronment and terminates. If, with probability at least , there
B and a phase (cid:96)∗ such that
exists an oracle πs
A1–A5 as in Deﬁnition 3 with (cid:96)∗, and either
B.phases[(cid:96)∗].T is not a matching conversation to
M(cid:48)(a) πt
A.phases[(cid:96)∗].T or
πs
A.phases[(cid:96)].T(cid:107)RTs(cid:107)RTr (cid:54)= πt
M(cid:48)(b) for some (cid:96) < (cid:96)∗, πs
B.
phases[(cid:96)].T(cid:107)RTr(cid:107)RTs;
we say A (τ, )-breaks renegotiation authentication of Π.
A protocol Π is a (τ, )-secure renegotiable ACCE protocol
if there exists no algorithm A that (τ, )-breaks conﬁden-
tiality/integrity (Def. 2) or renegotiation authentication (as
deﬁned above) of Π.
2.3.4 Weakly secure renegotiable ACCE.
Unfortunately, TLS with SCSV/RIE does not meet Def. 4
because, as we will see in Section 4.1, revealing session keys
in earlier phases allows the adversary to change the messages
on the record layer in earlier phases, but SCSV/RIE will not
detect this.
Of course, revealing earlier phases’ session keys while that
phase is active and still expecting detection when renego-
tiating later is a strong security property, and the lack of
this property does not imply an attack in most scenarios.
Our desire to characterize the renegotiable security of the
SCSV/RIE countermeasure motivates a slightly weaker rene-
gotiation notion: when previous phases’ session keys are not
revealed while that phase is active and the current phase’s
long-term secret keys are not corrupted, no adversary should
be able to cause a phase to accept unless there exists a
phase at the peer with a matching pre-accept handshake
transcript and all previous phases’ handshake and record
layer transcripts match.
Definition 5
(Weakly secure renegotiable ACCE).
Suppose an algorithm A with running time τ interacts with
a multi-phase ACCE protocol Π in the above execution envi-
ronment and terminates. If, with probability at least , there
B and a phase (cid:96)∗ such that
exists an oracle πs
all conditions from Def. 4, as well as the following additional
conditions are satisﬁed:
A with πs
A.d = πt
A accepted
A, (cid:96)) query before πs
B, (cid:96)) query before πs
in phase (cid:96) + 1, for every (cid:96) < (cid:96)∗, and
in phase (cid:96) + 1, for every (cid:96) < (cid:96)∗;
A6. A did not issue a Reveal(πs
A7. A did not issue a Reveal(πt
A accepted
then we say that A (τ, )-breaks weak renegotiation authenti-
cation of Π.
A protocol Π is a (τ, )-weakly secure renegotiable ACCE
protocol if there exists no algorithm A that (τ, ) breaks
conﬁdentiality/integrity (Def. 2) or weak renegotiation au-
thentication (as deﬁned above) of Π.
Remark 3. While conditions A6 and A7 prohibit the
adversary from revealing encryption keys of previous phases
while active for the purposes of breaking authentication, the
conﬁdentiality/integrity aspect of Def. 5 still places no such
restriction on previous encryption keys being revealed.
Remark 4. The chain of implications between Defns. 3–5
is as follows: secure renegotiable ACCE protocol (Defn. 4)
=⇒ weakly secure renegotiable ACCE (Defn. 5) =⇒ secure
multi-phase ACCE (Defn. 3) =⇒ ACCE protocol [16]. The
separations are strict, as seen in Table 1.
3. TLS RENEGOTIATION (IN)SECURITY
We now discuss how the original TLS protocol, without
SCSV/RIE countermeasures, ﬁts into our model, and show
how the attack of Ray and Dispensa is captured in the model.
Jager et al. [16] in their full version described how to map
TLS into the ACCE model. We highlight a few components
of that mapping, and the alterations needed for renegotiation.
Oracles generally respond to Send, Encrypt, and Decrypt
queries as speciﬁed by the TLS handshake and record layer
protocols. The Send control message m = (newphase, pk)
when sent to a client causes the client to send a new Client-
Hello message, and when sent to a server causes the server
to send a new HelloRequest message. For the Encrypt and
Decrypt queries, we use a content type ﬁeld ctype that corre-
sponds to the ContentType ﬁeld of the TLSPlaintext data
type in the TLS record layer speciﬁcation [9, §6.2.1]:
Packets with ContentType=change_cipher_spec (20) or
handshake (22) are considered in our model to have ctype =
control and packets with ContentType=application_data
(23) are considered in our model to have ctype = data. We
do not explicitly handle ContentType=alert (21) messages.
The Reveal query reveals the encryption and MAC keys
derived from the master secret key, not the master secret
key itself.
3.1 TLS without countermeasures is not a
(weakly) secure renegotiable ACCE
Recall the TLS renegotiation attack by Ray and Dispensa
[24], as described previously in Figure 1 on page . The
attacker Eve observes Alice attempting to establish a TLS
session with Bob. Eve delays Alice’s initial ClientHello and
instead establishes her own TLS session with Bob and trans-
mits a message m0 over that record layer. Then Eve passes
Alice’s initial ClientHello to Bob over the Eve–Bob record
layer. Bob views this as a valid renegotiation and responds
accordingly; Eve relays the handshake messages between
Alice and Bob, who will eventually establish a new record
layer to which Eve has no access. Alice then transmits a
message m1 over the Alice–Bob record layer. Intuitively, this
is a valid attack: Alice believes this is the initial handshake,
but Bob believes this is a renegotiated handshake.
393Formally, this attack is captured in our weakly secure
renegotiable ACCE model of Deﬁnition 5 as follows. Assume
Alice and Bob each have a single oracle instance, and Eve
has carried out the above attack. Then for Bob’s oracle π1
Bob,
the value of (cid:96)∗ is 2: the last entry in phases where Bob has a
matching handshake transcript to some handshake transcript
in Alice’s oracle π1
Alice is the second (and last) phases entry.
The attacker has broken renegotiation authentication at both
Alice and Bob’s instances. At Alice by satisfying condition
M(cid:48)(a) (Alice’s ﬁrst handshake transcript does not match
Bob’s ﬁrst handshake transcript), and at Bob by satisfying
both M(cid:48)(a) (Bob’s second handshake transcript does not
match Alice’s second handshake transcript) and M(cid:48)(b) (for
every (cid:96) < 2, Bob’s (cid:96)th handshakes/record layer transcripts
do not match Alice’s). Thus TLS without countermeasures
is not a weakly secure or secure renegotiable ACCE.
4. RENEGOTIATION SECURITY OF TLS
WITH SCSV/RIE COUNTERMEASURE
In this section we analyze the security of TLS with the
SCSV/RIE countermeasures proposed in RFC 5746 [26]. We
ﬁrst see, in Section 4.1, that the SCSV/RIE countermeasures
are not enough to prove that TLS satisﬁes our strongest
notion, a secure renegotiable ACCE (Defn. 4).
Our goal will be to show that TLS with the SCSV/RIE
countermeasures is a weakly secure renegotiable ACCE. Ide-
ally, we would do so generically, with a result saying some-
thing like “If a TLS ciphersuite is a secure ACCE, then
that TLS ciphersuite with SCSV/RIE is a weakly secure
renegotiable ACCE.” As noted in the introduction, we do
so generically since the protocol is modiﬁed to include the
countermeasure values in the ClientHello and ServerHello
messages, and thus we cannot make use of the ACCE secu-
rity of the particular TLS ciphersuite in a black-box way.
Moreover, we must ensure that revealing the Finished values
from the previous handshake does not impact its security.
Although these barriers prevent a generic black-box result, a
white-box examination of the proof details of TLS_DHE_DSS_
[16] ﬁnds that only small changes are needed in the proof.
We will provide a sequence of deﬁnitions and results that
justiﬁes the security of the SCSV/RIE countermeasure.
1. Deﬁne a modiﬁed ACCE security model, called tagged-
ACCE-ﬁn, speciﬁc to TLS, in which the adversary can
reveal Finished messages after the handshake com-
pletes and supply tags to be used in extensions.
2. Deﬁne tagged TLS as a modiﬁcation of a standard ci-
phersuite in which arbitrary opaque data can be placed
in an extension ﬁeld in the ClientHello and Server-
Hello messages.
3. Explain how the existing proof of that TLS_DHE_DSS_
is ACCE secure can be modiﬁed in a very minor way
to show that tagged TLS_DHE_DSS_ is tagged-ACCE-
ﬁn-secure.
4. Show that, if a TLS ciphersuite is tagged-ACCE-ﬁn
secure, then that TLS ciphersuite with SCSV/RIE is a
secure multi-phase ACCE.
5. Show that, if a TLS ciphersuite with SCSV/RIE is
a secure multi-phase ACCE, then it is also a weakly
secure renegotiable ACCE.
Combined, these results yield (a) a general result justifying
the security of the SCSV/RIE countermeasure, and (b) that
TLS_DHE_DSS_ with SCSV/RIE countermeasures is a weakly
secure renegotiable ACCE.
4.1 TLS with SCSV/RIE is not a secure rene-
gotiable ACCE
Deﬁnition 4 requires that, even when the adversary can
reveal previous phases’ session keys, the parties will not
successfully renegotiate if the attacker has manipulated the
record layer. The SCSV/RIE countermeasures do not protect
against this type of adversary. They only provide assurance
that handshake transcripts from previous phases match ex-
actly. TLS itself of course provides integrity protection for
record layer transcripts via the message authentication codes,
but Deﬁnition 4 allows the adversary to reveal the encryption
and MAC keys of previous phases. Thus, an adversary who
reveals the current encryption and MAC keys can modify
record layer messages but Alice and Bob will still successfully
renegotiate a new phase (although the adversary must not
alter the number of messages sent, as the number of record
layer messages sent in the previous phase happens to be
protected by SCSV and RIE countermeasures).
We emphasize that while this demonstrates a theoretical
weakness in TLS renegotiation countermeasures compared
to our very strong security model, it does not translate into
an attack on TLS renegotiation countermeasures when inter-
mediate phases’ encryption and MAC keys are not revealed.
SCSV/RIE meets its original goal of authenticating the pre-
vious handshake.
4.2 Tagged-ACCE model and tagged TLS
In this section we introduce a variant of the ACCE model
from which we can prove a generic result on the renegotiable
security of TLS with countermeasures. In our models, the
tag can be an arbitrary string. For our purpose of analyzing
TLS with SCSV/RIE countermeasures, the tag will be the
previous phase’s Finished messages.
4.2.1 Tagged-ACCE security model
The tagged-ACCE security model is an extension of the
ACCE security model to allow arbitrary tags as follows. Since
the original ACCE deﬁnition of Jager et al. [16] does not sup-
port server-only authentication, while our deﬁnition allows
both authentication modes, we extend the ACCE deﬁnition
implied by limiting multi-phase ACCE (Deﬁnition 3) to a
single phase (nph = 1) and at most one public key per party
(nke = 1).
per-phase variable tag.
The phases log phases is extended with an additional
• Send(πs
A, m). The adversary can specify an arbitrary
tag during session initialization.
– If m = (newphase, ω, tag), the party sets its inter-
nal variable ρ ← Client, sets authentication mode
ω, stores tag, and responds with the ﬁrst protocol
message.
– If m = (ready, ω, tag), the party sets ρ ← Server,
authentication mode ω, stores tag, and responds
with the next protocol message, if any.
The freshness and winning conditions of tagged-ACCE are
unchanged from ACCE.
4.2.2 Tagged-ACCE-ﬁn security model
We will work with a further variant, tagged-ACCE-ﬁn,
which is not a fully general security model but instead is
394tied speciﬁcally to generic TLS protocols of the form given
in Figure 2. It adds the following query:
• RevealFin(πs
A): If α = accept, then return the f inC
and f inS values sent/received by the queried oracle.
Return ∅ otherwise.
The following queries are modiﬁed:
• Encrypt(πs
• Decrypt(πs
A, ctype, m0, m1, len, hd): The adversary is
not prevented from querying with ctype = control.
A, C, hd): No semantic meaning is associated
with ctype = control messages. In other words, line 5
of Decrypt is removed.
We extend the Encrypt- and Decrypt-queries to allow the
adversary to send and receive messages on the encrypted
channel with content type control. The freshness and win-
ning conditions of tagged-ACCE-ﬁn are as in ACCE.
Remark 5. Revealing the Finished messages is very spe-
ciﬁc to the TLS protocol family and is not necessarily relevant
for other protocols. Imagine, for example, a variant of the
SCSV/RIE countermeasure where a separate hash of the com-
plete transcript as it was sent over the channel is used as
an authenticator. Since this value can be computed by any
passive adversary, leaking this value could not aﬀect security.
4.2.3 Tagged TLS
Figure 2 shows a generic TLS ciphersuite, along with
the SCSV/RIE extensions denoted in green with a dagger.
By tagged TLS, we mean the generic TLS ciphersuite from
Figure 2, without any of the SCSV/RIE extensions shown
in green, but where an arbitrary string can be placed in the
extC and extS ﬁelds. In other words, it is a normal TLS
ciphersuite, but with an arbitrary extension ﬁeld that just
carries strings that are not being interpreted as having any