角色1、角色2需要事先沟通好nonce、fee，其中nonce在合约中定义，从 0 开始自增，可调用合约的getNonce(address
addr)函数查询。
**攻击示例**
图片来源慢雾科技
由于合约所有的调用数据（函数参数）都在链上公开可查，所以可从 Transaction 中提取所有签名信息。
图片来源慢雾科技
在智能合约重放攻击中，基于椭圆曲线加密数字签名(ECDSA)和验签的逻辑，可利用不同合约中相同的transferProxy实现，把 A 合约
Transaction 中的签名信息提取出来，在 B 合约中进行重放，由于涉及签名的所有参数都是一样的，所以可以直接调用 B 合约并广播到链上。
攻击成功的前提是 _from 账户在两个合约中的 nonce 值是一样的，这样才能保证签名后的 hash 值相同。
**测试工具：**
此漏洞参考[2]整理。
**规避建议**
nonce 生成算法不采用从 0 开始自增的设计，避免和场景的做法相同；
去除 transferProxy 函数，改成其他方式实现代理的需求。
### **随机数可预测漏洞**
随机数问题也是各区块链平台常见的问题，区别在于各个平台被用作随机源的数据不同。
**漏洞介绍**
以太坊数据块里有一些属性，如：
·block.number (uint): current block number
·block.timestamp (uint): current block timestamp as seconds since unix epoch
·blockhash(uint blockNumber) returns (bytes32): hash of the given block - only
works for 256 most recent, excluding current, blocks
某些合约会使用这些属性作为随机数种子，如使用时间戳作为开奖语句的条件。矿工有能力微调时间戳，使之满足中奖条件而中奖。相似的场景还可以用
block.number 来当作随机源。使用可预测的随机源作为随机数的种子属于危险操作。
**漏洞示例**
    contract Roulette {    
      uint public pastBlockTime; // Forces one bet per block
        constructor() public payable {} // initially fund contract
        // fallback function used to make a bet
        function () public payable {        
          require(msg.value == 10 ether); // must send 10 ether to play
            require(now != pastBlockTime); // only 1 transaction per block
            pastBlockTime = now;        
            if(now % 15 == 0) { // winner
                msg.sender.transfer(this.balance);
            }
        }
    }
**攻击步骤**
这份合约表现得像一个简单的彩票。转入 10 ether
有赢得合约余额的机会。这里的假设是，block.timestamp关于最后两位数字是均匀分布的。如果是这样，那么将有1/15的机会赢得这个彩票。但正如我们所知，矿工可以根据需要时间调整。
在这种特殊情况下，如果合约中有足够的ether，解决某个区块的矿工将被激励选择一个模 15 为 0 的 block.timestamp 或
now。这样做他们就会赢得这个合约的余额。
相似的场景还可以用 block.number 来当作随机源。也属于危险操作。
**规避建议**
通行的做法是采用链外off-chain 的第三方服务，比如 Oraclize 来获取随机数）。
**整数溢出漏洞**
数溢出是各类语言的常见问题，Solidity 也不例外。
**漏洞介绍**
整整数溢出是指经过一些运算之后超过该类型所表示的最大值或者最小值，产生溢出。整数常见的运算有 + - * / ，每一种运算都可能产生溢出。
**加法溢出**
以 8 位无符整型为例，8 位无符号整型可表示的范围为 [0, 255]，255 在内存中存储按位存储的形式为（下图左）：
图片来源seebug
如果是 8 位有符整型，其可表示的范围为 [-128, 127]，127 在内存中存储按位存储的形式为（下图左）：
图片来源seebug
在这里因为高位作为了符号位，当 127 加上 1 时，由于进位符号位变为 1（负数），因为符号位已翻转为 1，通过还原此负数值，最终得到的 8 位有符整数为
-128。
**小结：最大值+1会发生反转成最小值**
**减法溢出**
减法溢出的原理和加法溢出类似 uint8 integer 0000 0000 -1 ------> 1111 1111 = 255 （0-1） int8
integer 1000 0000 -1 ------> 0111 1111 = 127 （-128-1）
**小结：最小值-1会发生反转成最大值**
**乘法溢出**
乘法溢出和加法溢出类似，两数相乘之后，超过数值类型所表示的最大值或者最小值，产生溢出。如：
    function testMul(int8 m, int8 n) returns (int8){
            int8 num = m*n;
            return num;
        }
在 remix 平台上，验证返回结果是：
    输入
    {
        "int8 m": 100,
        "int8 n": 2
    }
    输出
    {
        "0": "int8: -56"
    }
由于 int8 能表示的最大值是 127，100x2 运算之后的值是 200，超过了 int8 表示的最大值，产生溢出，溢出为 -56。
**除法溢出**
除法运算除了常见的除 0 错误之外，还有可能发生溢出。有符号数的最小值除 -1 导致溢出：
    function test() returns (int8) {
            int8 i = -128;
            return i/int8(-1);
        }   }
在 remix 平台上，验证返回结果是：
    {
        "0": "int8: -128"
    }
溢出情况分析：-128/-1 = 128 超出 int8 表示的最大值，溢出为 -128。
**漏洞示例**
    pragma solidity ^0.4.10;
    contract MyToken {
        mapping (address => uint) balances;
        event balancesAndAmount(uint, uint);
        function balanceOf(address _user) returns (uint) { return balances[_user]; }
        function deposit() payable { balances[msg.sender] += msg.value; }
        function withdraw(uint _amount) {
            balancesAndAmount(balances[msg.sender], _amount);
            require(balances[msg.sender] - _amount > 0);  // 存在整数溢出
            msg.sender.transfer(_amount);
            balances[msg.sender] -= _amount;
        }
    }
**攻击步骤**
1.account A 发布合约
2.account A deposit 1 ether 到合约
3.account B 取 1 ether。uint 默认是 u256。因为 account B 账号的余额是 0，balances[msg.sender]
- amount 会发生下溢出，0-1 = 2256-1 > 0，能够满足 require 条件，顺利执行到
msg.sender.transfer(amount); 能够成功获得 1 ether。之后 account B 在合约里的余额也变成 2256 -1。
    2^256 = 
    115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,
    639,936 (78 digits)
4.balance of account A 的余额不会变。因为没有操作过 account A 的余额。
思考：那转给 account B 的钱从哪里出的？是不是合约自己背锅？
5.进一步尝试把 amount 的类型改成 int8，执行相同的攻击步骤，依然会发生溢出，且 account B 的 balance 依然按照
uint256 类型反转。
**规避建议**
使用 SafeMath 进行四则运算，或者交与专业团队进行代码审计。
### **浮点数精度**
**漏洞介绍**
solidity 的最新版本是 0.8.1，截止到这个版本，solidity
依然不支持浮点型，也不完全支持定长浮点型。其中定长浮点型在Solidity中可以用来声明变量，但是并不能用来赋值。
在除法运算中，如果无法整除，小数部分会被舍弃。这样，如果在代币的运算中出现运算结果小于1Ether的情况，那么0.XXX就会被约等于0。1.9个代币会被约等于1个，带来一定程度上的精度流失。由于代币的经济属性，精度的流失就相当于资产的流失。
**漏洞示例**
看如下代码片段：
    function buyToken() public payable{
       uint tokens = msg.value/weiPerEth * tokensPerEth;
       balance[msg.sender] += tokens;
    }
**攻击步骤**
代码采用了先除后乘的方式，如果 msg.value > weiPerEth，tokens 会为 0，造成买家损失。
**规避建议**
推荐的做法是先做乘法，再做除法。
## **小结**
本文主要关注的是以太坊平台的智能合约面临的安全威胁，同样地，EOS
平台也面临类似的威胁类型，相信这些漏洞梳理可以为读者们带去更深刻的思考和启发，对以太坊平台也有了更进一步的了解，欢迎大家继续关注本系列后续的文章。
## 参考文献
1.
2.[https://mp.weixin.qq.com/s?__biz=MzU4ODQ3NTM2OA==&mid=2247483952&idx=1&sn=e09712da8b943b983a847878878b5f70&chksm=fddd7cb7caaaf5a1e3d4d781ee785e25dcef30df5c2c050fd581e4c4d5fb1027c1bbe02961e9&scene=21](https://mp.weixin.qq.com/s?__biz=MzU4ODQ3NTM2OA==&mid=2247483952&idx=1&sn=e09712da8b943b983a847878878b5f70&chksm=fddd7cb7caaaf5a1e3d4d781ee785e25dcef30df5c2c050fd581e4c4d5fb1027c1bbe02961e9&scene=21)
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.《区块链安全入门与实战》第3 章. 刘林炫. 北京. 机械工业出版社.
扫码关注蚂蚁安全实验室微信公众号，干货不断！
* * *