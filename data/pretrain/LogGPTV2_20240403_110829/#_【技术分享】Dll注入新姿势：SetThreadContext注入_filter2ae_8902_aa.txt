# 【技术分享】Dll注入新姿势：SetThreadContext注入
##### 译文声明
本文是翻译文章，文章来源：microsoft.co.il
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[blueSky](http://bobao.360.cn/member/contribute?uid=1233662000)
预估稿费：190RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
目前，有多种方法可用于将DLL注入到进程中，但每个都有其优点和缺点。在这些方法中，最简单的是使用[
**CreateRemoteThread**](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682437\(v=vs.85\).aspx)函数在目标进程中创建一个新线程，并将线程的启动函数指向
**LoadLibrary**
函数。这种方法最容易实现，但也是最容易被检测到，因为可以通过多种方式“感知”到创建的新线程，例如使用ETW事件。如果系统中存在一个驱动程序，并且该驱动程序正在hooking使用[
**PsSetCreateThreadNotifyRoutine**](https://msdn.microsoft.com/library/windows/hardware/ff559954)创建的线程，那么该行为自然会被安全检测工具识别到。
一种隐蔽的方法是使用现有的线程来执行DLL注入，其中一种方法是使用[APC](http://blogs.microsoft.co.il/pavely/2017/03/14/injecting-a-dll-without-a-remote-thread/)通过[调用QueueUserApc](https://msdn.microsoft.com/EN-US/library/windows/desktop/ms684954\(v=vs.85\).aspx) 将APC附加到目标进程的线程队列中去，并使用
**APC**
调用LoadLibrary函数。使用APC执行DLL注入存在的问题是被注入线程必须进入可唤醒状态才能“处理”APC并执行我们的LoadLibrary调用，但要保证一个线程永远处于可唤醒状态是很困难的。为了增加成功的机会，可以向指定进程的每一个线程都插入一个APC，但这种做法在某些情况下是不起作用的。一个典型的例子就是
**cmd.exe** ，据我所知其单线程从不进入可唤醒状态。
这篇文章将阐述另一种使目标进程调用 **LoadLibrary**
函数的方法，但这次我们将通过操作现有线程的上下文来执行DLL注入，线程的指令指针被转移到一个自定义的代码段，然后被重定向回来。这种方法很难检测，因为这些操作看起来就像是一个正常线程正在做的事情，下面让我来阐述如何在x86和x64平台中完成这种DLL注入。
**DLL注入**
****
首先，我们需要做的第一件事就是找到一个目标进程并在该进程中选择一个线程，从技术上来讲，它可以是目标进程中的任何线程，但是一个处于“等待”状态的线程将不会运行我们的代码，所以最好还是选择一个正在运行或可能马上就要运行的线程来尽可能早地加载我们的DLL。一旦我们选定了进程中的目标线程，那么可以使用下面的代码来访问它们：
    //
    // open handle to process
    //
    auto hProcess = ::OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, pid);
    if (!hProcess)
        return Error("Failed to open process handle");
    //
    // open handle to thread
    //    
    auto hThread = ::OpenThread(THREAD_SET_CONTEXT | THREAD_SUSPEND_RESUME | THREAD_GET_CONTEXT, FALSE, tid);
    if (!hThread)
        return Error("Failed to open thread handle");
对于进程，由于我们将在进程中编写目标代码，因此我们在打开进程的函数中使用了 **PROCESS_VM_OPERATION** 和
**PROCESS_VM_WRITE**
这两个参数。对于线程，由于我们需要改变它的上下文，因此我们需要在改变其上下文的时候使它处于“悬挂”状态。这种DLL注入方法需要几个步骤：
首先，由于我们的代码需要在进程中执行，因此我们在目标进程中分配内存：
    const auto page_size = 1 (::VirtualAllocEx(hProcess, nullptr, page_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));
在上述的代码中我们分配一整页RWX内存，实际上并不需要这么大的内存空间，但是内存管理器是以页为单位来分配内存空间，因此我们可以分配到一个完整的内存页面。我们使用下面的代码使线程处于“悬挂”状态，然后捕获执行线程的上下文：
    if (::SuspendThread(hThread) == -1)
        return false;
    CONTEXT context;
    context.ContextFlags = CONTEXT_FULL;
    if (!::GetThreadContext(hThread, &context))
        return false;
接下来，我们需要在目标进程中添加一些代码，这些代码必须使用汇编语言来写，并且必须与目标进程的bitness匹配（在任何情况下，注入的DLL必须与目标进程的bitness匹配）。对于x86而言，我们可以在Visual
Studio中编写以下内容，并复制生成的汇编代码：
    void __declspec(naked) InjectedFunction() {
        __asm {
            pushad
            push        11111111h   ; the DLL path argument 
            mov         eax, 22222222h  ; the LoadLibraryA function address
            call        eax
            popad
            push        33333333h   ; the code to return to
            ret
        }
    }
该函数使用[ **__declspe** c(naked)](https://docs.microsoft.com/en-us/cpp/cpp/naked-cpp)属性进行修饰， **该属性用来告诉编译器函数代码中的汇编语言是我们自己写的，不需要编译器添加任何汇编代码**
。在将代码添加到目标进程之前，我们需要修改代码中的的占位符。在这个演示的源代码中，我将所生成的机器代码转换成一个字节数组，如下所示：
    BYTE code[] = {
        0x60,
        0x68, 0x11, 0x11, 0x11, 0x11,
        0xb8, 0x22, 0x22, 0x22, 0x22,
        0xff, 0xd0,
        0x61,
        0x68, 0x33, 0x33, 0x33, 0x33,
        0xc3
    };
字节数组对应于上述的指令，现在我们修改虚拟地址：
    auto loadLibraryAddress = ::GetProcAddress(::GetModuleHandle(L"kernel32.dll"), "LoadLibraryA");
    // set dll path
    *reinterpret_cast(code + 2) = static_cast(buffer + page_size / 2);    
    // set LoadLibraryA address
    *reinterpret_cast(code + 7) = static_cast(loadLibraryAddress);
    // jump address (back to the original code)
    *reinterpret_cast(code + 0xf) = context.Eip;
首先，我们得到 **LoadLibraryA** 的地址，因为这是我们用来在目标地址中加载DLL的函数。 **LoadLibraryW**
也可以正常工作，但是ASCII版本的使用更简单一些。 接下来，我们将修改后的代码和DLL路径写入目标进程：
    //
    // copy the injected function into the buffer
    //