# 七、持续交付
我们到目前为止讨论的主题使我们能够在 Kubernetes 中运行我们的服务。有了监控系统，我们对服务更有信心了。要使我们的服务走上正轨，我们希望实现的下一件事是如何在 Kubernetes 中持续提供我们的最新功能以及对我们服务的改进，我们将在本章的以下主题中了解这一点:
*   更新 Kubernetes 资源
*   设置交付管道
*   改进部署过程的技术
# 更新资源
持续交付的属性与我们在[第 1 章](01.html#KVCC0-6c8359cae3d4492eb9973d94ec3e4f1e)、*介绍 DevOps* 中描述的一样，一套操作包括**持续集成** ( **CI** )和后续部署任务。配置项流程包括版本控制系统、建筑和不同级别的自动化测试等元素。实现 CI 功能的工具通常在应用层，它可以独立于底层基础设施，但是当涉及到实现部署时，理解和处理基础设施是不可避免的，因为部署任务与我们的应用运行的平台紧密相关。在软件在物理或虚拟机上运行的环境中，我们会利用配置管理工具、协调器和脚本来部署我们的软件。然而，如果我们在像 Heroku 这样的应用平台上运行服务，或者甚至在无服务器模式下运行服务，那么设计部署管道将是完全不同的情况。总之，部署任务的目标是确保我们的软件在正确的地方正常工作。在 Kubernetes 中，它是关于如何正确地更新资源，尤其是 PODS。
# 触发更新
在[第 3 章](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e)、*开始使用 Kubernetes* 中，我们已经讨论了部署的 Pod 滚动更新机制。让我们回顾一下触发更新过程后会发生什么:
1.  部署根据更新的清单创建一个带有`0`Pod 的新`ReplicaSet`。
2.  新的`ReplicaSet`逐渐放大，而之前的`ReplicaSet`不断缩小。
3.  在所有旧的 PODS 被替换后，该过程结束。
这样的机制是由 Kubernetes 自动完成的，它免除了我们对更新过程的监督。要触发它，我们只需要通知 Kubernetes 部署的 pod 规范已经更新，也就是说，修改 Kubernetes 中一个资源的清单。假设我们有一个部署`my-app`(参见本节示例目录下的`ex-deployment.yml`)，我们可以使用`kubectl`的子命令修改清单，如下所示:
*   `kubectl patch`:根据输入的 JSON 参数，部分修补对象的清单。如果我们想将`my-app`的形象从`alpine:3.5`更新为`alpine:3.6`，那就是:
```
$ kubectl patch deployment my-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"app","image":"alpine:3.6"}]}}}}'
```
*   `kubectl set`:对对象的某些属性进行更改。这是直接更改某些属性的快捷方式，部署的映像是它支持的属性之一:
```
$ kubectl set image deployment my-app app=alpine:3.6
```
*   `kubectl edit`:打开一个编辑器，转储当前的清单，这样我们就可以交互编辑了。修改后的版本将在保存后立即生效。
*   `kubectl replace`:用另一个提交的模板文件替换一个清单。如果资源尚未创建或包含无法更改的属性，则会产生错误。例如，在我们的示例模板`ex-deployment.yml`中有两个资源，即部署`my-app`及其服务`my-app-svc`。让我们用一个新的规范文件来替换它们:
```
$ kubectl replace -f ex-deployment.yml
deployment "my-app" replaced
The Service "my-app-svc" is invalid: spec.clusterIP: Invalid value: "": field is immutable
$ echo $?
1
```
在它们被替换后，我们会看到错误代码将是`1`，即使结果是预期的，即更新部署而不是服务。当为配置项/光盘流编写自动化脚本时，尤其应该注意这种行为。
*   `kubectl apply`:还是应用清单文件。换句话说，如果一个资源存在于 Kubernetes 中，那么它将被更新，否则它将被创建。当`kubectl apply`用于创建资源时，在功能上大致相当于`kubectl create --save-config`。应用的规范文件将相应地保存到注释字段`kubectl.kubernetes.io/last-applied- configuration`，我们可以使用子命令`edit-last-applied`、`set-last-applied`和`view-last-applied`来操作它。例如，我们可以查看之前提交的模板，无论`ex-deployment.yml`的实际内容是什么:
```
$ kubectl apply -f ex-deployment.yml view-last-applied
```
保存的清单信息将与我们发送的信息完全相同，不像我们通过`kubectl get -o yaml/json`检索的信息，除了规范之外，它还包含对象的实时状态。
虽然在本节中，我们只关注于操作部署，但是这里的命令也用于更新所有其他 Kubernetes 资源，如服务、角色等。
Changes to `ConfigMap` and secret usually take seconds to propagate to pods.
推荐的与 Kubernetes 的应用编程接口服务器交互的方式是`kubectl`。如果你在一个受限的环境中，也有 REST APIs 来操纵 Kubernetes 的资源。例如，我们之前使用的`kubectl patch`命令将如下所示:
```
$ curl -X PATCH -H 'Content-Type: application/strategic-merge-patch+json' --data '{"spec":{"template":{"spec":{"containers":[{"name":"app","image":"alpine:3.6"}]}}}}' 'https://$KUBEAPI/apis/apps/v1beta1/namespaces/default/deployments/my-app'
```
这里变量`$KUBEAPI`是 API 服务器的端点。更多信息参见 API 参考:[https://kubernetes.io/docs/api-reference/v1.7/](https://kubernetes.io/docs/api-reference/v1.7/)。
# 管理推广
一旦推出过程被触发，Kubernetes 将默默完成背景后面的所有任务。让我们尝试一些动手实验。同样，即使我们用前面提到的命令修改了一些东西，滚动更新过程也不会被触发，除非相关 pod 的规范被更改。我们准备的示例是一个简单的脚本，它会用主机名和运行它的 Alpine 版本来响应任何请求。我们首先创建部署，并在另一个终端中不断检查其响应:
```
$ kubectl apply -f ex-deployment.yml
deployment "my-app" created
service "my-app-svc" created
$ kubectl proxy
Starting to serve on 127.0.0.1:8001
// switch to another terminal #2
$ while :; do curl localhost:8001/api/v1/proxy/namespaces/default/services/my-app-svc:80/; sleep 1; 
done
my-app-3318684939-pwh41-v-3.5.2 is running...
my-app-3318684939-smd0t-v-3.5.2 is running...
...
```
现在我们把它的映像换成另一个版本，看看有什么反应:
```
$ kubectl set image deployment my-app app=alpine:3.6
deployment "my-app" image updated
// switch to terminal #2
my-app-99427026-7r5lr-v-3.6.2 is running...
my-app-3318684939-pwh41-v-3.5.2 is running...
...
```
来自 3.5 版和 3.6 版的消息是交错的，直到更新过程结束。为了从 Kubernetes 中立即确定更新过程的状态，而不是轮询服务端点，有`kubectl rollout`用于管理滚动更新过程，包括检查正在进行的更新的进度。让我们看看带有子命令`status`的“表演”卷展栏:
```
$ kubectl rollout status deployment my-app
Waiting for rollout to finish: 3 of 5 updated replicas are available...
Waiting for rollout to finish: 3 of 5 updated replicas are available...
Waiting for rollout to finish: 4 of 5 updated replicas are available...
Waiting for rollout to finish: 4 of 5 updated replicas are available...
deployment "my-app" successfully rolled out
```
此时，终端#2 的输出应该全部来自 3.6 版本。子命令`history`允许我们查看`deployment`之前的更改:
```
$ kubectl rollout history deployment my-app
REVISION    CHANGE-CAUSE
1           
2             
```
但是`CHANGE-CAUSE`字段没有显示任何有助于我们了解修订细节的有用信息。为了利用它，在每个导致变化的命令后添加一个标志`--record`，比如我们前面介绍的。当然，`kubectl create`也支持记录旗。
让我们对部署做一些改变，比如修改`my-app`的 Pod 的环境变量`DEMO`。因为它导致了 pod 规范的改变，所以将立即开始部署。这种行为允许我们在不构建新映像的情况下触发更新。为了简单起见，我们使用`patch`来修改变量:
```
$ kubectl patch deployment my-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"app","env":[{"name":"DEMO","value":"1"}]}]}}}}' --record
deployment "my-app" patched
$ kubectl rollout history deployment my-app
deployments "my-app"
REVISION    CHANGE-CAUSE
1           
2           
3           kubectl patch deployment my-app --
patch={"spec":{"template":{"spec":{"containers":
[{"name":"app","env":[{"name":"DEMO","value":"1"}]}]}}}} --record=true  
```
`REVISION 3`的`CHANGE-CAUSE`清楚地记录了提交的命令。尽管如此，只有命令会被记录下来，这意味着`edit` / `apply` / `replace`的任何修改都不会被明确标记下来。如果我们想获得以前版本的清单，只要我们的更改是通过`apply`进行的，我们就可以检索保存的配置。
出于各种原因，有时我们希望回滚我们的应用，即使在一定程度上推广是成功的。可以通过子命令`undo`实现:
```
$ kubectl rollout undo deployment my-app
deployment "my-app" rolled back
```
整个过程基本上与更新相同，即应用以前的清单，并执行滚动更新。此外，我们可以利用标志`--to-revision=`回滚到特定的版本，但是只有保留的修订才能回滚。Kubernetes 根据部署对象中的`revisionHistoryLimit`参数确定它将保留多少修订。
更新的进度由`kubectl rollout pause`和`kubectl rollout resume`控制。正如他们的名字所示，他们应该成对使用。部署的暂停不仅意味着停止正在进行的部署，还意味着冻结任何滚动更新，即使规范被修改，除非它被恢复。
# 正在更新 DaemonSet 和 StatefulSet
Kubernetes 支持为不同类型的工作负载编排 pods 的各种方法。除了部署，还有用于长时间运行的非批处理工作负载的`DaemonSet`和`StatefulSet`。由于它们产生的 Pod 比部署有更多的限制，我们应该知道处理它们更新的注意事项
# daemmonset
`DaemonSet`顾名思义，是为系统守护进程设计的控制器。因此，一个`DaemonSet`在每个节点上恰好启动并维护一个 Pod ，也就是说，一个`DaemonSet`的 Pod 总数被附加到一个集群中的多个节点上。由于这些限制，更新`DaemonSet`并不像更新部署那样简单。例如，部署有一个`maxSurge`参数(`.spec.strategy.rollingUpdate.maxSurge`)，用于控制在更新过程中可以创建多少超过所需数量的冗余 Pod 。但是我们不能对 pod 采用与`DaemonSet`通常占用主机资源(如端口)相同的策略。如果我们在一个节点上同时有两个或多个系统单元，这可能会导致错误。因此，更新的形式是在主机上终止旧 pod 后创建新 pod。
Kubernetes 为`DaemonSet`实现了两种更新策略，即`OnDelete`和`rollingUpdate`。一个演示如何编写`DaemonSet`模板的例子在`7-1_updates/ex-daemonset.yml`。更新策略设置在路径`.spec.` `updateStrategy` `.type`处，在 Kubernetes 1.7 中默认为`OnDelete`，从 Kubernetes 1.8 开始变为`rollingUpdate`:
*   `OnDelete` : Pods 只有手动删除后才会更新。
*   `rollingUpdate`:实际上和`OnDelete`一样工作，但是 PODS 的删除是由 Kubernetes 自动执行的。有一个可选参数`.spec.updateStrategy.rollingUpdate.maxUnavailable`，类似于部署中的参数。它的默认值是`1`，这意味着 Kubernetes 一个节点一个节点地替换一个 pod。
滚动更新过程的触发器与部署的触发器相同。此外，我们还可以利用`kubectl rollout`来管理我们的`DaemonSet`的推出。但是不支持`pause`和`resume`。
Rolling updates for `DaemonSet` are only available at Kubernetes 1.6 and onward.
# StatefulSet