Groups with the same name
Perl 5.10, Ruby 1.9, and .NET allow multiple named capturing groups to share the
same name. We take advantage of this in the solutions for recipes 4.5, 8.7, and 8.19
When a regular expression uses alternation to find different variations of certain text,
using capruring groups with the same name makes it easy to extract parts from the
match, regardless of which alternative actually matched the text. The section *Pure
regular expression" on page 262 in Recipe 4.5 uses alternation to separately match
dates in months of different lengths. Each alternative matches the day and the month.
By using the same group names °day” and *month" in all the altermatives, we only need
to query rwo capruring groups to rerrieve the day and the month after the regular ex-
pression finds a match.
All the other flavors in this book that support named capture treat multiple groups with
the same name as an error
2.11 Capture and Mame Parts of the Match | 71
---
## Page 88
Using multiple capturing groups with the same name only works relia-
bly when only one of the groups participates in the match. That is the
case in al the recipes in this book that use capturing groups with the
same name. The groups are in separate alternatives, and the alternatives
are not inside a group that is repeated. Perl 5.10, Ruby 1.9, and .NET
But then the behavior of backreferences and the text retained for the
group after the match will difer significantly between these flavors. It
is confusing enough for us to recommend to use groups with the same
name only when they're in separate alternatives in the regular
cxpression.
See Also
Recipe 2.9 on numbered capturing groups has more fundamental information on how
grouping works in regular expressions.
Recipe 2.10 explains how to make a regex match the same text that was matched by a
named capturing group.
Recipe 2.11 explains named capturing groups. Naming the groups in your regex makes
the regex easier to read and maintain.
Recipe 2.21 explains how to make the replacement text reinsert text matched by a
capturing group when doing a search-and-replace.
Recipe 3. 9 explains how to retrieve the text matched by a capruring group in procedural
code.
ways of matching a group.
Recipe 2.15 explains how to make sure the regex engine doesn’t needlessly try different
Many of the recipes in the later chapters use named capture to make it easier to retrieve
parts of the text that was matched. Recipes 4.5, 8.7, and Recipe 8.19 show some of the
more interesting solutions.
2.12RepeatPartoftheRegexaCertainNumberofTimes
Problem
Create regular expressions that match the following kinds of numbers:
*A googol (a decimal number with 100 digits).
•A 32-bit hexadecimal number.
• A 32-bit hexadecimal number with an optional h sufix.
•A floating-point number with an optional integer part,a mandatory fractional part,
and an optional exponent. Each part allows any number of digits.
72 | Chapter 2: Basic Regular Expression Skils
---
## Page 89
Solution
[06009
q\(0ot}pq
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Hexadecimal number
\b[a-f0-9]{1,8}\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Hexadecimal number with optional suffix
\b[a-f0-9]{1,8}h?\b
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Floating-point number
\d*\, \d+(e\d+)?
Regexoptions: Case insensitive
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
Fixed repetition
The quantifier {}, where n is a nonnegative integer, repeats the preceding regex token
n number of times. The \d{1oo} in  is the same regex as (ac>,
Variable repetition
For variable repetition, we use the quantifier (n,a), where  is a nonnegative integer
and m is greater than n. ,
Infinite repetition
The quantifier (n,), where n is a nonnegative integer, allows for nfnite repetition.
Essentially, infinite repetition is variable repetition without an upper limit.
uxo xaan e aaje snqd v atues at saop +p> pue *s8ap auou no suo saqpieu {°t)p
that's not a quantifier means “one or more." Recipe 2.13 shows the meaning of a plus
after a quantitier.
\d{o,}> matches zero or more digits, and \d* does the same. The asterisk always
means *zero or more.~ In addition to allowing infinite repetition, (o,  and the asterisk
also make the preceding token optional.
Making something optional
If we use variable repetition with n set to zero, we’re effectively making the token that
precedes the quantifier optional. hfo, 1 matches the ch once or not at all. If there is
no h, h(o,1 results in a zero-length match. If you use ch{o,1} as a regular expression
all by itself, it will find a zero-length match before each character in the subject text
that is not an h. Each h will result in a match of one character (the h).
h?> does the same as ho,1. A question mark after a valid and complete regex token
that is not a quantifier means *zero or once.” The next recipe shows the meaning of a
question mark after a quantifier.
A question mark, or any other quantifier, after an opening parenthesis
is a syntax error, Pel and the flavorsthat copy it use this to ad Perl
groups and named capturing groups, which all use a question mark after
an opening parenthesis as part of their syntax. These question marks
turing, groups and named capturing,groups. Following ecipes willshow
are not quantifiers at all; they're simply part of the syntax for noncap-
more styles of groups using the  is the same as cabcabcabc.
Quantifiers can be nested. (e\d+)? matches an g follwed by one or more digits, or a
zero-length match. In our floating-point regular expression, this is the optional
exponent.
Capturing groups can be repeated. As explained in Recipe 2.9, the group's match is
caprured each time the ngine exits the group, verwriting any text previously matched
74 | Chapter 2: Basic Regular Expression Skils
---
## Page 91
by the group.  matches a string of two, four, or six digits. The engine exits
the group three times. When this regex matches 123456, the capturing group will hold
56, because 56 was stored by the last iteration of the group. The other two matches by
the group, 12 and 34, cannot be retrieved.
 captures the same text as \√dd\d\d(\d\d), If you want the capturing group
to capture all wo, four, or six digits rather than just the last wo, you have to place the
capturing group around the quantifier instead of repeating the capruring group: (?:
\d)(1,3}). Here we used a noncapturing group to take over the grouping function
from the capturing group. We also could have used rwo capruring groups: (\d\d)
{1,3))>. When this last regex matches 123456, \1> holds 123456 and  holds 56.
.NET's regular expression engine is the only one that allows you to retrieve all the
iterations of a repeated capruring group. If you directly query the group's Value prop-
erty, which returns a string, you'll get 56, as with every other regular expression engine.
Backreferences in the regular expression and replacement text also substitute 56, but if
you use the group's CaptureCollection, you'll get a stack with 56, 34, and 12.
See Also
Recipe 2.9 explainshowtogrouppart of aregex, sothat part canbe repeatedas a whole.
Recipe 2.13 explains how to choose between minimal repetition and maximal
repetition.
Recipe 2.14 explains how to make sure the regex engine doesn’t needlessly try different
amounts of repetition.
2.13ChooseMinimalorMaximalRepetition
Problem
Match a pairof  and  XHTML tags and the text between them. The text berween
the tags can include other XHTML tags.
Solution
Regexoptions: Dot matches line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
All the quantifiers discussed in Recipe 2.12 are greedy, meaning they try to repeat as
many times as possible, giving back only when required to allow the remainder of the
regular expression to match.
2.13 Choose Minimal or Maximal Repetition | 75
---
## Page 92
This can make it hard to pair tags in XHTML (which is a version of XML and therefore
requires every opening tag to be matched by a closing tag). Consider the following
simple excerpt of XHTML:
The very first task is to find the beginning of a paragraph.
Then you have to find the end of the paragraph
There are two opening  tags and two closing  tags in the excerpt. You want to
match the first  with the first , because they mark a single paragraph. Note that
this paragraph contains a nested  tag, so the regex can’t simply stop when it en-
counters a .*
Regexoptions: Dot matches line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
The only difference is that this incorrect solution lacks the extra question mark after
the asterisk. The incorrect solution uses the same greedy asterisk explained in
Recipe 2.12.
Aftermatching thefirst  tag in the subjct, the engine reaches ,*, The dot matches
any character, including line breaks. The asterisk repeats it zero or more times. The
asterisk is greedy, and so  *) matches everything all the way to the end of the subject
text. Let me say that again:  fails, the engine backtracks by making the ,*> give up one character of its
match. Then  succeeds. If  is attempted. If  fails
the engine backtracks again. This repeats until > can be matched entirely.
76 | Chapter2: Basit RegularExpression Skils
---
## Page 93
So what's the problem? Because the asterisk is greedy, the incorrect regular expression
matches everything from the first  in the XHTML file to the last . But to correctly
match an XHTML paragraph, we need to match the first  with the first  that
follows it.
That's where lazy quantifiers come in. You can make any quantifier lazy by placing a
question mark after it: *?>, , ??>, and {7,42}?> are all lazy quantifiers.
Lazy quantifiers backtrack too, but the other way around. A lazy quantifier repeats as
few times as it has to, stores one backtracking position, and allows the regex to con-
tinue. If the remainder of the regex fails and the engine backtracks, the lazy quantifier
repeats once more. If the regex keeps backtracking, the quantifier will expand until its
maximum number of repetitions, or until the regex token it repeats fails to match.
(,*? uses a lazy quantifier to correctly match an XHTML paragraph. When
> matches, the  *?>, lazy as it is, initially does nothing but procrastinate. If )
immediatrely occurs after s2, an empty paragraph is matched. If not, the engine back-
tracks to , *?>, which matches one character. If > still fails,  matches the next
dot matches everything, failure won’ occur until the  *? has matched everything up
character. This continues until either > succeeds or , *? fails to expand. Since the
to the end of the XHTML file.
The quantifiers *) and (*?> allow all the same regular expression matches. The only
difference is the order in which the possible matches are tried. The greedy quantifier
will find the longest possible match. The lazy quantifier will find the shortest possible
match.
If possible, the best solution is to make sure there is only one possible match. The
regular expressions for matching numbers in Recipe 2.12 will still match the same
numbers if you make all their quantifiers lazy. The reason is that the parts of those
regular expressions that have quantifiers and the parts that follow them are mutually
exclusive.  and ^\d+?\b> act on a couple of different subject texts. The greedy and lazy
versions produce the same resulrs, but test the subject text in a different order.
If we use  on 1234,  will match all the digits.  then matches, and an
overall match is found. If we use ,  first matches only 1. \b> fails between
1 and 2.  still fails. This continues until \d+?> matches
1234, and  match 1234. But then
\b fails.  backtracks to 123.  still fails. Then the whole match attempt fails
If we use  on 1234X,  first matches only 1.  fails berween 1 and 2
\d+? expands to 12.  matches 1234, and \b)
2.13 Choose Minimal orMaximal Repetition | 77
---
## Page 94
still fails. The regex engine attempts to expand \d+? once more, but \√d) does not
match x. The overall match attempt fails.
If we put *√d+) berween word boundaries, it must match all the digits in the subject
text, or it fails. Making the quantifier lazy won’t affect the final regex match or its
eventual failure. In fact, \b\d+\b would be better off without any backtracking at all.
The next recipe explains how you can use a posessive quantifier b\d++\b to achieve
that, at least with some flavors.
See Also
Recipe 2.8 describes how the regex engine attempts different altematives when you use
altermation. That is also a form of backtracking.
Recipe 2.12 shows the different alemation operators supported byregularexpressions.
Recipe 2.9 explains how to group part of a regex, so that part can be repeated as a whole.
Recipe 2.14 explains how to make sure the regex engine doesn’t needlessly try different
amounts of repetition.
ways of matching a group.
Recipe 2.15 explains how to make sure the regex engine doesn’t needlessly try different
2.14 Eliminate Needless Backtracking
Problem
how they backtrack. In some situations, this backtracking is unnecessary.
The previous recipe explains the difference between greedy and lazy quantifiers, and
\b^\d+\b) uses a greedy quantifier, and  uses a lazy quantifier. They both
match the same thing: an integer. Given the same subject text, both will find the exact
same matches. Any backtracking that is done is unnecessary. Rewrite this regular ex-
pression to explicitly eliminate all backtracking, making the regular expression more
efficient.
Solution
q\++p\q\
Regexoptions: None
Regexflavers: Java, PCRE, Perl 5.10, Ruby 1.9
The easiest solution is to use a possesve quanrifier. But it is supported only in a few
recent regex flavors.
q\(+p\), where -) is any regular expression. An atomic group is essen-