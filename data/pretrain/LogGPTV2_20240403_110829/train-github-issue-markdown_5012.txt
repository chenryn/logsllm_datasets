When integrating JSON content directly into template HTML, we encounter template parsing errors in our Angular v1 application. These errors arise because the Angular parser misinterprets the JSON as part of the template syntax. Our current approach involves using JSON content extensively to inject locale-specific text labels into directive HTML.

### Error Details
The specific error message is:
```
_Template parse errors:  
Unexpected character "EOF" (Do you have an unescaped "{" in your template? Use "{{ '{' }}" to escape it.) ("  
}
```

### Example Usage
- **Page Template HTML**:
  ```html
  <div>
    { "lblFName": "xyz" }
  </div>
  ```

- **Custom Directive Template HTML**:
  ```html
  <div>{{::vm.content.lblFName}}</div>
  ```

  In this example, the JSON content is transcluded into the custom directive, and the `vm.content` variable is used to access the JSON properties within the directive template.

### Upgrading to Angular 2
We are currently researching the upgrade to Angular 2 (RC5 version) but are facing similar template parsing issues when including JSON content. The error message suggests escaping the `{` character with `{{ '{' }}`, but this would be impractical for complex JSON structures.

### Seeking Alternatives
We are looking for alternative solutions or ways to customize the Angular 2 template parser to handle JSON content without requiring extensive escaping. Specifically, we need a solution that allows us to:

1. **Inject JSON content into templates** without causing parsing errors.
2. **Maintain the current workflow** of using JSON for locale-specific text labels.
3. **Avoid manual escaping** of JSON content, which would be time-consuming and error-prone.

### Possible Solutions
1. **Use a Custom Pipe**: Create a custom pipe to process and display JSON content.
2. **Component Property Binding**: Bind JSON content to a component property and use it in the template.
3. **Custom Template Parser**: Explore the possibility of extending or overriding the Angular 2 template parser to handle JSON content.

### Example of Using a Custom Pipe
```typescript
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({ name: 'jsonContent' })
export class JsonContentPipe implements PipeTransform {
  transform(value: any, key: string): string {
    return value ? value[key] : '';
  }
}
```

- **Usage in Template**:
  ```html
  <div>{{ vm.content | jsonContent: 'lblFName' }}</div>
  ```

### Conclusion
We need a robust and maintainable solution to handle JSON content in Angular 2 templates. Any suggestions or best practices for achieving this would be greatly appreciated.