mated by the Poisson distribution: P0K (k) = e−¯k¯kk/k! [11].
The 0K stochastic algorithm can produce a graph with a dif-
ferent 1K-distribution, e.g., the power-law P (k) ∼ k−γ with
extremely low probability. Indeed, suppose n ∼ 104, ¯k ∼ 5,
and γ ∼ 2.1, so that the characteristic maximum degree is
kmax ∼ 2000 (we chose these values to reﬂect measured val-
ues for Internet AS topologies). In this case, the probabil-
ity that a Gn,p-graph contains at least one node with de-
gree equal to kmax is dominated by 1/2000! ∼ 10
−6600, and
the probability that the remaining degrees simultaneously
match those required for a power law is much lower.
It is thus natural to introduce a set of graphs that corre-
spond to the graphs most likely to be generated by dK-
graph constructing algorithms. We call such graphs the
dK-random graphs. These graphs have property Pd but
are unbiased with respect to any other more constraining
property. In this sense, the dK-random graphs are the max-
imally random or maximum-entropy dK-graphs. Our term
maximum entropy here has the following justiﬁcation. As
we have just seen, 0K-random graphs have the maximum-
entropy value of the 1K-distribution since their node de-
gree distribution is the distribution with the maximum en-
tropy among all the distributions with a ﬁxed average.2
The 1K-random graphs have the maximum-entropy value
of the 2K-distribution since their joint degree distribution,
P1K (k1, k2) = ˜P (k1) ˜P (k2), where ˜P (k) = kP (k)/¯k [11], is
the distribution with the maximum joint entropy (minimum
mutual information)3 among all the joint distributions with
ﬁxed marginal distributions.4
The main point we extract from these observations is that
in trying to construct dK-graphs, we generally obtain graphs
from subsets of the dK-space. We call these subsets dK-
random graphs and schematically depict them as centers
of the dK-circles in Figure 2. These graphs do have prop-
erty Pd and, consequently, properties Pi with i  d since the jK-
distributions has speciﬁc, maximum-entropy values in the
jK-space that may not overlap with dk-random graphs.
4.3
dK-space explorations
Often we wish to analyze the topological constraints a
given graph G appears to obey. In other cases, we are inter-
ested in exploring the structural diversity among dK-graphs.
If we are attempting to determine the minimum d such that
all dK-graphs are similar to G, we can start with a small
value of d, generate dK-graphs, and measure their “dis-
tance” from G. If the distance is too great, we can increase d
and repeat the process. On the other hand, to explore struc-
tural diversity among all dK-graphs, we must generate dK-
graphs that are not random. These non-random dk-graphs
are still constrained by Pd but have extremely low proba-
bilities of being generated unperturbed by dK-graph con-
structing algorithms.
We cannot construct all dK-graphs, so we need to use
heuristics to generate some dK-graphs and adjust them ac-
cording to a distance metric that draws us closer to the types
of dK-graphs we seek. One such heuristic is based on the in-
clusion feature of the dK-series. Because all dK-graphs have
the same values of dK- but not of (d + 1)K-distributions,
we look for simple metrics fully deﬁned by Pd+1 but not
by Pd. While identifying such metrics can be challenging
for high d’s, we can always retreat to the following two sim-
ple extreme metrics:
• the correlation of degrees of nodes located at distance d;
• the concentration of d-simplices (cliques of size d + 1).
These metrics are “extreme” in the sense that they cor-
respond to the (d + 1)-sized subgraphs with, respectively,
the maximum (d) and minimum (1) possible diameter. We
can then construct dK-graphs with extreme values, e.g., the
smallest or largest possible, for these (extreme) metrics. The
dK-random graphs have the values of these metrics lying
somewhere in between the extremes.
If the goal is to ﬁnd the smallest d that results in suﬃ-
ciently constraining graphs, we can compute the diﬀerence
between the extreme values of these metrics, as well as of
other metrics we might consider.
If this diﬀerence is too
large, then the selected value of d is not constraining enough
and we will need to increase it. dK-space exploration may
further be used to move beyond the relatively small circle
of dK-random graphs and generate graphs that lie on the
edges of the dK-circle.
To illustrate this approach in practice, we consider 1K-
and 2K-space explorations. For 1K, the simplest metric
deﬁned by P2 is any scalar summary statistics of the 2K-
distribution, such as likelihood S (cf. Section 2). To con-
struct graphs with the maximum value of S, we can run a
form of targeting 1K-preserving rewiring that accepts each
rewiring step only if it increases S. We can perform the op-
posite to minimize S. This type of experiment was at the
core of recent work that led the authors of [19] to conclude
that d = 1 was not constraining enough for the topology
they considered.
To perform 2K-space explorations, we need to ﬁnd simple
scalar metrics deﬁned by P3. Since the 3K-distribution is
actually two distributions, P∧(k1, k2, k3) and P(cid:4)(k1, k2, k3),
we should have two independent scalar metrics. The second-
order likelihood S2 is one such metric for P∧(k1, k2, k3).
S2 ∼ P
k1k3P∧(k1, k2, k3); we deﬁne S2 as the sum
of the products of degrees of nodes located at the ends of
wedges, so that any two graphs with the same P∧(k1, k2, k3)
have the same S2. For the P(cid:4)(k1, k2, k3) component, av-
erage clustering ¯C ∼ P
k1P(cid:4)(k1, k2, k3) is an ap-
propriate candidate. We note that these two metrics are
also the two extreme metrics in the sense deﬁned above:
S2 measures the properly normalized correlation of degrees
of nodes located at distance 2, while ¯C describes the con-
centration of 2-simplices (triangles). The 2K-explorations
amount then to performing the following two types of tar-
geting 2K-preserving rewiring: accept a 2K-rewiring step
only if it maximizes or minimizes: 1) S2, or 2) ¯C.
k1,k2,k3
k1,k2,k3
5. EVALUATION
In this section, we conduct a number of experiments to
demonstrate the ability of the dK-series to capture impor-
tant graph properties. We implemented all the dK-graph-
constructing algorithms from Section 4.1, applied them to
both measured and modeled Internet topologies, and calcu-
lated all the topology metrics from Section 2 on the resulting
graphs.
We experimented with three measured AS-level topolo-
gies, extracted from CAIDA’s skitter traceroute [5], Route-
Views’ BGP [26], and RIPE’s WHOIS [17] data for the
month of March 2004, as well as with a synthetic router-
level topology—the HOT graph from [19]. The qualitative
results of our experiments are similar for the skitter and
BGP topologies, while the WHOIS topology lies somewhere
in-between the skitter/BGP and HOT topologies.
In the
case of skitter comprising of 9204 nodes and 28959 edges,
we will see that its degree distribution places signiﬁcant con-
straints upon the graph generation process. Thus, even 1K-
random graphs approximate the skitter topology reasonably
well. The HOT topology with 939 nodes and 988 edges is
It is the least constrained; 1K-
at the opposite extreme.
random graphs approximate it poorly, and dK-series’ con-
vergence is slowest. We thus report results only for these
two extreme cases, skitter and HOT.
Our results represent averages over 100 graphs generated
with a diﬀerent random seed in each case, using the notation
in Table 2.
5.1 Algorithmic Comparison
We ﬁrst compare the diﬀerent graph generation algorithms
discussed in Section 4.1. All the algorithms give consistent
results, except the stochastic approach, which suﬀers from
the problems related to high statistical variance discussed
in Section 4.1.1. This conclusion immediately follows from
Table 2: Scalar graph metrics notations.
Metric
Average degree
Assortativity coeﬃcient
Average clustering
Average distance
Standard deviation of distance distribution
Second-order likelihood
Smallest eigenvalue of the Laplacian
Largest eigenvalue of the Laplacian
Notation
¯k
r
¯C
¯d
σd
S2
λ1
λn−1
Table 3: Scalar metrics for 2K-random HOT graphs
generated using diﬀerent techniques.
Met-
ric
¯k
r
¯d
σd
Stoch- Pseu- Match-
astic
2.87
-0.22
4.99
0.85
dogr.
2.19
-0.24
6.25
0.75
ing
2.22
-0.21
6.22
0.74
2K-
rand.
2.18
-0.23
6.32
0.70
2K- Orig.
targ. HOT
2.18
2.10
-0.22
-0.24
6.81
6.35
0.70
0.57
Figure 5 and Tables 3 and 4 showing graph metric values for
the diﬀerent 2K and 3K algorithms described in Section 4.1.
In our experience, we ﬁnd that dK-randomizing rewiring
is easiest to use. However, it requires the original graph as
If only the target dK-distribution is available and
input.
if d (cid:3) 2, we ﬁnd the pseudograph algorithm most appropri-
ate in practice. We note that our 2K version results in fewer
pseudograph “badnesses”, i.e., (self-)loops and small con-
nected components (CCs), than PLRG [1], its commonly-
known 1K counterpart. This improvement is due to the
additional constraints introduced by the 2K case. For ex-
ample, if there is only one node of high degree x and one
node of another high degree y in the original graph, then
there can be only one link of type (x, y). Our 2K mod-
iﬁcation of the pseudograph algorithm must consequently
produce exactly one link between these two x- and y-degree
nodes, whereas in the 1K case, the algorithm tends to cre-
ate many such links. Similarly, a 1K generator would tend
to produce many isolated degree−1 nodes connected to one
another. Since the original graph does not have such pairs
of 1-degree nodes, our 2K generator, as opposed to 1K, does
not form these small 2-node CCs either.
While the pseudograph algorithm is a good 2K-random
graph generator, we could not generalize it for d (cid:2) 3 (see
Section 4.1.2). Therefore, to generate dK-random graphs
with d (cid:2) 3 when an original graph is unavailable, we use dK-
targeting rewiring. We ﬁrst bootstrap the process by con-
structing 1K-random graphs using the pseudograph algo-
rithm and then apply 2K-targeting 1K-preserving rewiring
Table 4: Scalar metrics for 3K-random HOT graphs
generated using diﬀerent techniques.
Metric
¯k
r
¯d
σd
3K-randomizing
rewiring
2.10
-0.22
6.55
0.84
3K-targeting Original
rewiring
2.13
-0.23
6.79
0.72
HOT
2.10
-0.22
6.81
0.57
100
g
n
i
r
e
t
s
u
C
l
10−1
10−2
10−3
100
2K Matching
2K Randomizing rewiring
2K Pseudograph
2K Targeting rewiring
2K Stochastic
0.35
0.3
0.25
0.2
0.15
0.1
0.05
F
D
P
2K Matching
2K Randomizing rewiring
2K Pseudograph
2K Targeting rewiring
2K Stochastic
101
102
Node degree
103
104
0
0
2
4
6
Distance in hops
8
10
12
14
F
D
P
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0
0
3K Randomizing rewiring
3K Targeting rewiring
2
4
6
Distance in hops
8
10
12
(a) Clustering in skitter for diﬀerent
2K algorithms
(b) Distance distribution in HOT for
diﬀerent 2K algorithms
(c) Distance distribution in HOT for
diﬀerent 3K algorithms
Figure 5: Comparison of 2K- and 3K-graph-constructing algorithms.
Table 5: Numbers of possible initial dK-randomizing
rewirings for the HOT graph.
Table 7: Scalar metrics for 2K-space explorations
for skitter.
d
0
1