可以看到，AuthenticationProvider中只有2个方法：
  * authenticate完成具体的认证逻辑，如果认证失败，抛出AuthenticationException异常
  * supports判断是否支持传入的Authentication认证信息
    /**
     * Indicates a class can process a specific
     * {@link org.springframework.security.core.Authentication} implementation.
     *
     * @author Ben Alex
     */
    public interface AuthenticationProvider {
        // ~ Methods
        // ========================================================================================================
    ​
        /**
         * Performs authentication with the same contract as
         * {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)}
         * .
         *
         * @param authentication the authentication request object.
         *
         * @return a fully authenticated object including credentials. May return
         * null if the AuthenticationProvider is unable to support
         * authentication of the passed Authentication object. In such a case,
         * the next AuthenticationProvider that supports the presented
         * Authentication class will be tried.
         *
         * @throws AuthenticationException if authentication fails.
         */
        Authentication authenticate(Authentication authentication)
                throws AuthenticationException;
    ​
        /**
         * Returns true if this AuthenticationProvider supports the
         * indicated Authentication object.
         * 
         * Returning true does not guarantee an
         * AuthenticationProvider will be able to authenticate the presented
         * instance of the Authentication class. It simply indicates it can
         * support closer evaluation of it. An AuthenticationProvider can still
         * return null from the {@link #authenticate(Authentication)} method to
         * indicate another AuthenticationProvider should be tried.
         * 
         * 
         * Selection of an AuthenticationProvider capable of performing
         * authentication is conducted at runtime the ProviderManager.
         * 
         *
         * @param authentication
         *
         * @return true if the implementation can more closely evaluate the
         * Authentication class presented
         */
        boolean supports(Class authentication);
    }
**DaoAuthenticationProvider**
DaoAuthenticationProvider是Spring
Security提供的最简单的一个AuthenticationProvider的实现，也是框架中最早支持的。它使用UserDetailsService作为一个DAO来查询用户名、密码以及用户的权限GrantedAuthority。它认证用户的方式就是简单的比较UsernamePasswordAuthenticationToken中由用户提交的密码和通过UserDetailsService查询获得的密码是否一致。
下面我们来看一下DaoAuthenticationProvider的源码，对于源码的说明也写在了注释中。
DaoAuthenticationProvider继承了AbstractUserDetailsAuthenticationProvider，而后者实现了AuthenticationProvider接口。
    public class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {
        /**
         * The plaintext password used to perform
         * PasswordEncoder#matches(CharSequence, String)}  on when the user is
         * not found to avoid SEC-2056.
         */
        private static final String USER_NOT_FOUND_PASSWORD = "userNotFoundPassword";
        private PasswordEncoder passwordEncoder;
        /**
         * The password used to perform
         * {@link PasswordEncoder#matches(CharSequence, String)} on when the user is
         * not found to avoid SEC-2056. This is necessary, because some
         * {@link PasswordEncoder} implementations will short circuit if the password is not
         * in a valid format.
         */
        private volatile String userNotFoundEncodedPassword;
        private UserDetailsService userDetailsService;
        private UserDetailsPasswordService userDetailsPasswordService;
        public DaoAuthenticationProvider() {
            setPasswordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder());
        }
        @SuppressWarnings("deprecation")
        protected void additionalAuthenticationChecks(UserDetails userDetails,
                UsernamePasswordAuthenticationToken authentication)
                throws AuthenticationException {
            // 用户未提交密码，抛出异常BadCredentialsException
            if (authentication.getCredentials() == null) {
                logger.debug("Authentication failed: no credentials provided");
                throw new BadCredentialsException(messages.getMessage(
                        "AbstractUserDetailsAuthenticationProvider.badCredentials",
                        "Bad credentials"));
            }
            // 从传入了Authentication对象中获取用户提交的密码
            String presentedPassword = authentication.getCredentials().toString();
            // 用passwordEncoder的matches方法，比较用户提交的密码和userDetails中查询到的正确密码。
            // 由于用户密码的存放一般都是hash后保密的，因此userDetails获取到的密码一般是一个hash值，而用户提交
            // 的是一个明文密码，因此需要对用户提交的密码进行同样的hash计算后再进行比较。
            if (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) {
                logger.debug("Authentication failed: password does not match stored value");
                throw new BadCredentialsException(messages.getMessage(
                        "AbstractUserDetailsAuthenticationProvider.badCredentials",
                        "Bad credentials"));
            }
        }
        protected void doAfterPropertiesSet() throws Exception {
            Assert.notNull(this.userDetailsService, "A UserDetailsService must be set");
        }
        protected final UserDetails retrieveUser(String username,
                UsernamePasswordAuthenticationToken authentication)
                throws AuthenticationException {
            prepareTimingAttackProtection();
            try {
                UserDetails loadedUser = this.getUserDetailsService().loadUserByUsername(username);
                if (loadedUser == null) {
                    throw new InternalAuthenticationServiceException(
                            "UserDetailsService returned null, which is an interface contract violation");
                }
                return loadedUser;
            }
            catch (UsernameNotFoundException ex) {
                mitigateAgainstTimingAttack(authentication);
                throw ex;
            }
            catch (InternalAuthenticationServiceException ex) {
                throw ex;
            }
            catch (Exception ex) {
                throw new InternalAuthenticationServiceException(ex.getMessage(), ex);
            }
        }
        @Override
        protected Authentication createSuccessAuthentication(Object principal,
                Authentication authentication, UserDetails user) {
            boolean upgradeEncoding = this.userDetailsPasswordService != null
                    && this.passwordEncoder.upgradeEncoding(user.getPassword());
            if (upgradeEncoding) {
                String presentedPassword = authentication.getCredentials().toString();
                String newPassword = this.passwordEncoder.encode(presentedPassword);
                user = this.userDetailsPasswordService.updatePassword(user, newPassword);
            }
            return super.createSuccessAuthentication(principal, authentication, user);
        }
        private void prepareTimingAttackProtection() {
            if (this.userNotFoundEncodedPassword == null) {
                this.userNotFoundEncodedPassword = this.passwordEncoder.encode(USER_NOT_FOUND_PASSWORD);
            }
        }
        private void mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken authentication) {
            if (authentication.getCredentials() != null) {
                String presentedPassword = authentication.getCredentials().toString();
                this.passwordEncoder.matches(presentedPassword, this.userNotFoundEncodedPassword);
            }
        }
        /**
         * Sets the PasswordEncoder instance to be used to encode and validate passwords. If
         * not set, the password will be compared using {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}
         *
         * @param passwordEncoder must be an instance of one of the {@code PasswordEncoder}
         * types.
         */
        public void setPasswordEncoder(PasswordEncoder passwordEncoder) {
            Assert.notNull(passwordEncoder, "passwordEncoder cannot be null");
            this.passwordEncoder = passwordEncoder;
            this.userNotFoundEncodedPassword = null;
        }
        protected PasswordEncoder getPasswordEncoder() {
            return passwordEncoder;
        }
        public void setUserDetailsService(UserDetailsService userDetailsService) {
            this.userDetailsService = userDetailsService;
        }
        protected UserDetailsService getUserDetailsService() {
            return userDetailsService;
        }
        public void setUserDetailsPasswordService(
                UserDetailsPasswordService userDetailsPasswordService) {
            this.userDetailsPasswordService = userDetailsPasswordService;
        }
    }
**AbstractUserDetailsAuthenticationProvider**
可以看到DaoAuthenticationProvider继承自AbstractUserDetailsAuthenticationProvider,
而一个provider最核心的authenticate方法，便写在了AbstractUserDetailsAuthenticationProvider中，下面我们只关注一下authenticate这个方法的源码。
    public Authentication authenticate(Authentication authentication)
                throws AuthenticationException {
            Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,
                    () -> messages.getMessage(
                            "AbstractUserDetailsAuthenticationProvider.onlySupports",
                            "Only UsernamePasswordAuthenticationToken is supported"));
            // 从传入的Authentication对象中获取用户名
            String username = (authentication.getPrincipal() == null) ? "NONE_PROVIDED"
                    : authentication.getName();
            // 根据用户名，从缓存中获取用户的UserDetails
            boolean cacheWasUsed = true;
            UserDetails user = this.userCache.getUserFromCache(username);
            if (user == null) {
                cacheWasUsed = false;
                // 如果从缓存中没有获取到用户，则通过方法retrieveUser来获取用户信息
                // retrieve方法为一个抽象方法，不同的子类中有不同的实现，而在子类中，一般又会通过UserDetailService来获取用户信息，返回UserDetails
                try {
                    user = retrieveUser(username,
                            (UsernamePasswordAuthenticationToken) authentication);
                }
                catch (UsernameNotFoundException notFound) {
                    logger.debug("User '" + username + "' not found");
                    if (hideUserNotFoundExceptions) {
                        throw new BadCredentialsException(messages.getMessage(
                                "AbstractUserDetailsAuthenticationProvider.badCredentials",
                                "Bad credentials"));
                    }
                    else {
                        throw notFound;
                    }
                }
                Assert.notNull(user,
                        "retrieveUser returned null - a violation of the interface contract");
            }
            try {
                preAuthenticationChecks.check(user);
                // additionalAuthenticationChecks为具体的认证逻辑，是一个抽象方法，在子类中实现。
                // 比如前文中DaoAuthenticationProvider中，便是比较用户提交的密码和UserDetails中的密码
                additionalAuthenticationChecks(user,
                        (UsernamePasswordAuthenticationToken) authentication);
            }
            catch (AuthenticationException exception) {
                if (cacheWasUsed) {
                    // There was a problem, so try again after checking
                    // we're using latest data (i.e. not from the cache)
                    cacheWasUsed = false;
                    user = retrieveUser(username,
                            (UsernamePasswordAuthenticationToken) authentication);
                    preAuthenticationChecks.check(user);
                    additionalAuthenticationChecks(user,
                            (UsernamePasswordAuthenticationToken) authentication);
                }
                else {
                    throw exception;
                }
            }
            postAuthenticationChecks.check(user);
            if (!cacheWasUsed) {
                this.userCache.putUserInCache(user);
            }
            Object principalToReturn = user;
            if (forcePrincipalAsString) {
                principalToReturn = user.getUsername();
            }
            return createSuccessAuthentication(principalToReturn, authentication, user);
        }
可以看到在DaoAuthenticationProvider中还用到UserDetailsService来查询用户的密码权限信息，并包装为UserDetails返回，然后与用户提交的用户名密码信息进行比较来完成认证。UserDetailsService和UserDetails在不同的provider中都会被用到，关于这两个接口的说明，在下一篇文章中介绍。
## 总结
最后我们总结一下这几个接口和类
这些类和接口之间的关系，大致可以用下图进行表示