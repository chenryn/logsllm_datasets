User: I'm trying to make a python script run in the background, and listen to commands. For example if I run my script:
python my_script.py it will start running (and wait for commands).
Then I wish to run:
python my_script.py --do_something, open a different python process, and it will run a function do_something() in the previous process.
I've seen this works on programs like PDPlayer where the flag --play causes the player to start playing a video. Can this also be done in python?
I know how to handle the command line arguments using argparse. I need help regarding the communication between the two python processes.
Also, I plan to cx_freeze the app, so the PID of the app can be found using psutil by searching the executable name.
Thanks.
btw, I'm using Windows...
Assistant: There are two things this needs to do: you need to handle command-line flags, and you need to send signals to another process. For the flags, you could use the argparse library, or simply sys.argv.
For sending signals, you will need the Process ID (pid) of the already running process. Under Linux you can call ps, and check to see if there is another instance of the script running. If there is, send it a signal.
Another alternative to signal handling is DBus. This is less cross-platform capable, though.