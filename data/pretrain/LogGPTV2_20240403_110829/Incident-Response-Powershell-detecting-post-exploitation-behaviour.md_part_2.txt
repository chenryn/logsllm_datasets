| extend CommandLineIpv4 = extract(IPRegex, 0, InitiatingProcessCommandLine)
// If you only want to filter on Invoke-Webrequest that retrieves information direct from IPv4 addresses
//| where isnotempty(CommandLineIpv4)
| where not(RemoteUrl in (AllowedDomains))
| where ActionType == "ConnectionSuccess"
// Filter line below if you also want to return private requests
| where RemoteIPType == "Public"
// If you only want to include servers in this detection use line below
//| where DeviceId in (Servers)
| project-reorder Timestamp, InitiatingProcessCommandLine, RemoteUrl, ActionType, CommandLineIpv4
```
:::
## Sensitive Group Addition
Once threat actors know what permissions they have, they might need to
elevate them since the current ones are not permissive enough. The
example seen in the case of ScreenConnect is related to sensitive group
additions of users from the commandline.
![Detecting Sensitive Group Additions](/svg/loading.min.svg){.lazyload
data-src="/images/post-exploitation/HuntingGroupAdditions.png"
data-srcset="/images/post-exploitation/HuntingGroupAdditions.png, /images/post-exploitation/HuntingGroupAdditions.png 1.5x, /images/post-exploitation/HuntingGroupAdditions.png 2x"
data-sizes="auto"}
This behaviour can be translated to a KQL query to hunt for similar
activities. Add the custom sensitive groups that you have in your Active
Directory environment to the *SensitiveGroupName* list to make the
detection more complete. This query detects when multiple sensitive
group additions have been initiated from the commandline within a
certain timeframe. This timeframe can be configured using the
*BinTimeFrame* variable. The *AlertThreshold* can be used to tweak the
detection to meet a certain threshold that you want to aim for, if this
behaviour is not normal in your environment the threshold should be set
to 1.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let BinTimeFrame = 1h;
let AlertThreshold = 3;
// Source Sensitive Groups: https://techcommunity.microsoft.com/t5/security-compliance-and-identity/alert-when-a-group-is-added-to-a-sensitive-active-directory/ba-p/3436868
let SensitiveGroupName = pack_array(  // Declare Sensitive Group names. Add any groups that you manually tagged as sensitive
    'Account Operators',
    'Administrators',
    'Domain Admins',
    'Backup Operators',
    'Domain Controllers',
    'Enterprise Admins',
    'Enterprise Read-only Domain Controllers',
    'Group Policy Creator Owners',
    'Incoming Forest Trust Builders',
    'Microsoft Exchange Servers',
    'Network Configuration Operators',
    'Print Operators',
    'Read-only Domain Controllers',
    'Replicator',
    'Schema Admins',
    'Server Operators'
);
DeviceProcessEvents
| where FileName in ("net.exe", "net1.exe")
| where ProcessCommandLine has_all ("add", "group")
| extend GroupIsSentitive = iff(ProcessCommandLine has_any (SensitiveGroupName), 1, 0)
| summarize TotalCommands = dcount(ProcessCommandLine), ExecutedCommands = make_set(ProcessCommandLine), arg_max(Timestamp, *) by DeviceName, bin(Timestamp, BinTimeFrame)
| where TotalCommands >= AlertThreshold
```
:::
> **Defender For Identity TIP!** If you have MDI Configure Sensitive
> Groups, do not only use default groups but more importantly your
> important groups. Link to
> [DOCS](https://learn.microsoft.com/en-us/defender-for-identity/entity-tags){target="_blank"
> rel="noopener noreffer"}
## Database Discovery
Once the adversary has established a foothold in your network, they want
to gather valuable information, and access to your crown jewels as the
ultimate goal. This reconnaissance phase is performed after persistence
is established. Databases are of particular interest to adversaries
because they often contain sensitive data, which is valuable for
exfiltration/encryption. The detection below uses a subset of default
ports that are used by a variety of database applications. The threshold
in the detection can be adjusted to fill your needs. Additionally, there
is a list of benign devices that are allowed to connect to multiple
database servers such as the database management server. This will
result in a behaviour-based detection to identify hosts that suddenly
scan for multiple open database ports.
The database ports defined in the query:
-   1433: MSSQL
-   1434: MSSQL
-   1583: Pervasive SQL
-   3050: Firebird & Interbase
-   3306: MySQL
-   3351: Pervasive SQL
-   5432: PostgreSQL
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let DatabasePorts = dynamic([1433, 1434, 1583, 3050, 3306, 3351, 5432]);
// Device List with devices that perform benign connections to SQL machines
let BenignDeviceList = dynamic(['DeviceName1']);
// Threshold for the number of unique connections
let AlertThreshold = 10;
DeviceNetworkEvents
| where Timestamp > ago(24h)
// Filter Database ports
| where RemotePort in (DatabasePorts)
// Filter Benign Devices
| where not(DeviceName in~(BenignDeviceList))
// Summarize results and get statistics
| summarize TotalIPsAccessed = dcount(RemoteIP), IPList = make_set(RemoteIP), PortList =  make_set(RemotePort), arg_max(Timestamp, *) by DeviceId, bin(Timestamp, 1h)
| where TotalIPsAccessed >= AlertThreshold
| project DeviceName, Timestamp, TotalIPsAccessed, IPList, PortList
```
:::
## Related queries
Mentioned in this blog:
-   [Certutil Remote
    Download](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/Living%20Off%20The%20Land/CertutilRemoteDownload.md){target="_blank"
    rel="noopener noreffer"}
-   [Multiple Sensitive Group Additions From
    commandline](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/MultipleSentitiveGroupAdditions.md){target="_blank"
    rel="noopener noreffer"}
-   [Discovery - Database
    Services](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/Discovery%20-%20DatabaseServices.md){target="_blank"
    rel="noopener noreffer"}
-   [PowerShell
    Invoke-Webrequest](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellInvokeWebrequest.md){target="_blank"
    rel="noopener noreffer"}
Other:
-   [Commandline User
    Addition](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/CommandlineUserAddition.md){target="_blank"
    rel="noopener noreffer"}
-   [WMIC Remote Command
    Execution](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/Living%20Off%20The%20Land/WMICRemoteCommand.md){target="_blank"
    rel="noopener noreffer"}
-   [Anomalous Amount of LDAP
    traffic](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Identity/AnomalousLDAPTraffic.md){target="_blank"
    rel="noopener noreffer"}
A complete overview of mapped detections to MITRE ATT&CK can be found
[here](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/MITRE%20ATT%26CK/Mapping.md){target="_blank"
rel="noopener noreffer"}.
## Tweaking
There is no one-size-fits-all when it comes to detection engineering,
thus tweaking the detections to your environment is a must. Take the
baseline of the environment into account when tweaking detections. As an
example for the KQL query for multiple sensitive group additions from
the commandline, if this is not standard behaviour in your environment
the threshold can be set to 1. If it is common behaviour first try to
filter the account that normally assigns the permissions to the account
instead of increasing the threshold for all devices/users. The
aggregation function summarize can be used to get a quick overview of
which entity triggers the behaviour normally
`| summarize Total = count() by DeviceName`.
## Response
Detecting threats is the first step, but now you know there might be a
threat you need to mitigate it. This can be done in multiple ways
depending on your organisation; Internal (Security) Team, MSSP or
potentially using your incident response retainer. There is some
documentation to help you respond to security incidents or create the
process to do so:
1.  [Navigating the Maze of Incident
    Response](https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MS-IR-Playbook-Final.pdf){target="_blank"
    rel="noopener noreffer"}
2.  [MS DART Incident Response
    Playbooks](https://learn.microsoft.com/en-us/security/operations/incident-response-playbooks){target="_blank"
    rel="noopener noreffer"}
3.  [Computer Security Incident Handling
    Guide](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf){target="_blank"
    rel="noopener noreffer"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [From Threat Report to (KQL) Hunting
    Query](https://kqlquery.com/posts/from-threat-report-to-hunting-query/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 1: IR on Microsoft Security Incidents (KQL
    edition)](https://kqlquery.com/posts/kql-incident-response/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 2: What about the other
    logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 3: Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2024-02-29
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/detecting-post-exploitation-behaviour/"
data-title="Detecting Post-Exploitation Behaviour" via="BertJanCyber"
hashtags="KQL"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/detecting-post-exploitation-behaviour/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/detecting-post-exploitation-behaviour/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/detecting-post-exploitation-behaviour/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[Incident Response PowerShell
V2](/posts/incident-response-powershell-v2/ "Incident Response PowerShell V2"){.prev
rel="prev"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::