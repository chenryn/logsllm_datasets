    *buffer = 0xdc00 | (cvalue & 0x3ff);
    return 2;
    /* Convert to UTF-32 */
    #else
    *buffer = (PCRE2_UCHAR)cvalue;
    return 1;
    #endif
    }
总结下这两个crash：  
第一个crash由harness中的`regexech`函数的匹配逻辑触发`stack_overflow`，位于`pcre2_match.c:5968:11`；第二个crash由`regcomp`函数的编译逻辑触发`heap_overflow`，位于`pcre2_ord2utf.c:92:12`。  
一层层的函数调用关系分析得让人头大，但这也正体现了漏洞挖掘中的“挖掘”二字的含义。
## fuzzing re2
这一个例子将让我们意识到`max_len`的选择对于fuzz效率的影响。  
re2是一个高效的、原则性的正则表达式库。是由两位来在Google的大神用C++实现的。Go中的regexp正则表达式包也是由re2实现的。workshop提供的是re2-2014-12-09的版本。  
先源码编译：
    tar xzf re2.tgz
    cd re2
    export FUZZ_CXXFLAGS="-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope"
    make clean
    CXX=clang++ CXXFLAGS="$FUZZ_CXXFLAGS"  make -j
接着研究harness：
    // Copyright (c) 2016 The Chromium Authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.
    #include 
    #include 
    #include 
    #include "re2/re2.h"
    #include "util/logging.h"
    using std::string;
    void Test(const string& buffer, const string& pattern,
              const RE2::Options& options) {
      RE2 re(pattern, options);
      if (!re.ok())
        return;
      string m1, m2;
      int i1, i2;
      double d1;
      if (re.NumberOfCapturingGroups() == 0) {
        RE2::FullMatch(buffer, re);
        RE2::PartialMatch(buffer, re);
      } else if (re.NumberOfCapturingGroups() == 1) {
        RE2::FullMatch(buffer, re, &m1);
        RE2::PartialMatch(buffer, re, &i1);
      } else if (re.NumberOfCapturingGroups() == 2) {
        RE2::FullMatch(buffer, re, &i1, &i2);
        RE2::PartialMatch(buffer, re, &m1, &m2);
      }
      re2::StringPiece input(buffer);
      RE2::Consume(&input, re, &m1);
      RE2::FindAndConsume(&input, re, &d1);
      string tmp1(buffer);
      RE2::Replace(&tmp1, re, "zz");
      string tmp2(buffer);
      RE2::GlobalReplace(&tmp2, re, "xx");
      RE2::QuoteMeta(re2::StringPiece(pattern));
    }
    // Entry point for LibFuzzer.
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
      if (size (data);
      {
        string pattern(data_input, size);
        string buffer(data_input, size);
        Test(buffer, pattern, options);
      }
      if (size >= 3) {
        string pattern(data_input, size / 3);
        string buffer(data_input + size / 3, size - size / 3);
        Test(buffer, pattern, options);
      }
      return 0;
    }
可以看到harness用到了很多re2里的方法，最后使用FullMatch和PartialMatch接口进行匹配buffer和re。其中buffer是由`data_input`和`size`初始化得到（data_input由输入的data经无关类型转换得到），re是由pattern和options建立的RE2对象。  
注意到harness里有几个条件分支语句，首先是size=3时，初始化pattn和buffer用的是size/3和size-size/3说明它对我们的输入的size进行了切割，初始化pattern用到的是`data_input + size /
3`，而初始化buffer是用的之后的data_input。这样使得我们样例的size会对fuzz的过程产生影响。如果size很短，可能无法触发crash，而如果size很大，对harness的执行匹配过程就会更加耗时，影响fuzz寻找覆盖点的效率。下面做几个测试，比较一下max_len对fuzz过程的影响：  
编译链接harness：
    clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=gnu++98 target.cc -I re2/ re2/obj/libre2.a -fsanitize=fuzzer -o re2_fuzzer
由于使用的re2版本较老了，编译的时候使用了c++98标准。
首先我们设置max_len为10，执行时间为100秒,-print_final_stats=1打印最后的结果，corpus1作为语料库的存放处：
    ➜  10 git:(master) ✗ ./re2_fuzzer ./corpus1 -print_final_stats=1 -max_len=10 -max_total_time=100
    Done 643760 runs in 101 second(s)
    stat::number_of_executed_units: 643760
    stat::average_exec_per_sec:     6373
    stat::new_units_added:          36
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              456
只探测到了36个代码单元。  
接着设置max_len为100，执行时间为100秒,-print_final_stats=1打印最后的结果，corpus2作为语料库的存放处：
    ./re2_fuzzer ./corpus2 -print_final_stats=1 -max_len=100 -max_total_time=100
    Done 233437 runs in 101 second(s)
    stat::number_of_executed_units: 233437
    stat::average_exec_per_sec:     2311
    stat::new_units_added:          50
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              675
探测到了50个代码单元,感觉差别不大。  
然年设置max_len为1000，执行时间为100秒,-print_final_stats=1打印最后的结果，corpus3作为语料库的存放处：
    ./re2_fuzzer ./corpus3 -print_final_stats=1 -max_len=1000 -max_total_time=100
    Done 105935 runs in 101 second(s)
    stat::number_of_executed_units: 105935
    stat::average_exec_per_sec:     1048
    stat::new_units_added:          97
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              830
这次探测到了97个代码单元，是第二个的2倍，第一个的3倍左右。  
最后再设置max_len为500，执行时间为100秒,-print_final_stats=1打印最后的结果，corpus4作为语料库的存放处
    ./re2_fuzzer ./corpus4 -print_final_stats=1 -max_len=500 -max_total_time=100
    Done 119361 runs in 101 second(s)
    stat::number_of_executed_units: 119361
    stat::average_exec_per_sec:     1181
    stat::new_units_added:          117
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              827
结果也比较明显，不同的max_len对fuzz的效率有着不同的影响，当然这也和你写的harness有关。因此在执行fuzzer的时候选择合适的max_len(如本例中的max_len在100~1000比较合适)会使得我们fuzzer探测到更多的代码块，得到crash的概率也就越大。
## 总结
libfuzzer
workshop到此就全部学习完了。libfuzzer作为最常用的fuzz工具，它所涉及到的一些使用方法在workshop里都有相应的lesson。就我个人而言，在逐步学习libfuzzer的过程中感觉到libfuzzer对于开源库提供的接口函数的fuzz是十分强力的，而这也是我们在学习libfuzzer中的难点:如何能够设计出合理的harness，这需要我们对要fuzz的开源库提供的方法有一定的了解，经过攻击面分析等去逐步改善我们的harness，使得我们与获得crash更近一步。
初学libfuzzer，有错误疏忽之处烦请各位师傅指正。