        function withdraw() public {
            require(balances[msg.sender] > 0);
            require(now > lockTime[msg.sender]);
            balances[msg.sender] = 0;
            msg.sender.transfer(balances[msg.sender]);
        }
    }
请注意，所有标准的数学运算已被SafeMath库中定义的数学运算所取代。该TimeLock合约不再执行任何能够进行一个 向下/越界的操作。
###
实际示例：PoWHC和批量传输溢出（[CVE-2018-10299](https://nvd.nist.gov/vuln/detail/CVE-2018-10299)）
一个4chan小组决定用Solidity编写一个在Ethereum上构建庞氏骗局的好主意。他们称它为弱手硬币证明（PoWHC）。不幸的是，似乎合约的作者之前没有看到过/不足的流量，因此，866Ether从合约中解放出来。在[Eric
Banisadar的文章](https://blog.goodaudience.com/how-800k-evaporated-from-the-powh-coin-ponzi-scheme-overnight-1b025c33b530)中，我们很好地概述了下溢是如何发生的（这与上面的Ethernaut挑战不太相似）。
一些开发人员还batchTransfer()为一些[ERC20](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md)令牌合约实施了一项功能。该实现包含溢出。[这篇文章](https://medium.com/@peckshield/alert-new-batchoverflow-bug-in-multiple-erc20-smart-contracts-cve-2018-10299-511067db6536)对此进行了解释，但是我认为标题有误导性，因为它与ERC20标准无关，而是一些ERC20令牌合约batchTransfer()实施了易受攻击的功能。
## 意外的Ether
通常，当Ether发送到合约时，它必须执行回退功能或合约中描述的其他功能。这有两个例外，其中ether可以存在于合约中而不执行任何代码。依赖代码执行的合约发送给合约的每个以太可能容易受到强制发送给合约的攻击。
关于这方面的进一步阅读，请参阅[如何保护您的智能合约：6](https://medium.com/loom-network/how-to-secure-your-smart-contracts-6-solidity-vulnerabilities-and-how-to-avoid-them-part-2-730db0aa4834)和[Solidity security patterns - forcing ether to a
contract](http://danielszego.blogspot.com.au/2018/03/solidity-security-patterns-forcing.html)
### 漏洞
一种常用的防御性编程技术对于执行正确的状态转换或验证操作很有用，它是不变检查。该技术涉及定义一组不变量（不应改变的度量或参数），并且在单个（或多个）操作之后检查这些不变量保持不变。这通常是很好的设计，只要检查的不变量实际上是不变量。不变量的一个例子是totalSupply固定发行[ERC20](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md)令牌。由于没有函数应该修改此不变量，因此可以在该transfer()函数中添加一个检查以确保totalSupply保持未修改状态，以确保函数按预期工作。
不管智能合约中规定的规则如何，特别是有一个明显的“不变”，可能会诱使开发人员使用，但事实上可以由外部用户操纵。这是合约中存储的当前以太。通常，当开发人员首先学习Solidity时，他们有一种误解，认为合约只能通过付费功能接受或获得以太。这种误解可能会导致合约对其内部的以太平衡有错误的假设，这会导致一系列的漏洞。此漏洞的吸烟枪是（不正确）使用this.balance。正如我们将看到的，错误的使用this.balance会导致这种类型的严重漏洞。
有两种方式可以将ether（强制）发送给合约，而无需使用payable函数或执行合约中的任何代码。这些在下面列出。
#### 自毁/自杀
任何合约都能够实现该[selfdestruct(address)](http://solidity.readthedocs.io/en/latest/introduction-to-smart-contracts.html#self-destruct)功能，该功能从合约地址中删除所有字节码，并将所有存储在那里的ether发送到参数指定的地址。如果此指定的地址也是合约，则不会调用任何功能（包括故障预置）。因此，selfdestruct()无论合约中可能存在的任何代码，该功能都可以用来强制将Ether
发送给任何合约。这包括没有任何应付功能的合约。这意味着，任何攻击者都可以与某个selfdestruct()功能创建合约，向其发送以太，致电selfdestruct(target)并强制将以太网发送至target合约。Martin
Swende有一篇出色的[博客文章](http://martin.swende.se/blog/Ethereum_quirks_and_vulns.html)描述了自毁操作码（Quirk＃2）的一些怪癖，并描述了客户端节点如何检查不正确的不变量，这可能会导致相当灾难性的客户端问题。
#### 预先发送Ether
合约可以不使用selfdestruct()函数或调用任何应付函数就可以获得以太的第二种方式是使用ether
预装合约地址。合约地址是确定性的，实际上地址是根据创建合约的地址的哈希值和创建合约的事务现时值计算得出的。即形式：（address =
sha3(rlp.encode([account_address,transaction_nonce]))请参阅[Keyless
Ether](https://github.com/sigp/solidity-security-blog#keyless-eth)的一些有趣的使用情况）。这意味着，任何人都可以在创建合约地址之前计算出合约地址，并将Ether发送到该地址。当合约确实创建时，它将具有非零的Ether余额。
根据上述知识，我们来探讨一些可能出现的缺陷。 考虑过于简单的合约，
EtherGame.sol：
    contract EtherGame {
        uint public payoutMileStone1 = 3 ether;
        uint public mileStone1Reward = 2 ether;
        uint public payoutMileStone2 = 5 ether;
        uint public mileStone2Reward = 3 ether; 
        uint public finalMileStone = 10 ether; 
        uint public finalReward = 5 ether; 
        mapping(address => uint) redeemableEther;
        // users pay 0.5 ether. At specific milestones, credit their accounts
        function play() public payable {
            require(msg.value == 0.5 ether); // each play is 0.5 ether
            uint currentBalance = this.balance + msg.value;
            // ensure no players after the game as finished
            require(currentBalance  0); 
            redeemableEther[msg.sender] = 0;
            msg.sender.transfer(redeemableEther[msg.sender]);
        }
     }    
这个合约代表一个简单的游戏（自然会引起条件竞争），玩家0.5
ether可以将合约发送给合约，希望成为第一个达到三个里程碑之一的玩家。里程碑以ether计价。当游戏结束时，第一个达到里程碑的人可能会要求其中的一部分。当达到最后的里程碑（10
ether）时，游戏结束，用户可以申请奖励。
EtherGame合约的问题来自this.balance两条线[14]（以及协会[16]）和[32] 的不良使用。一个调皮的攻击者可以0.1
ether通过selfdestruct()函数（上面讨论过的）强行发送少量的以太，以防止未来的玩家达到一个里程碑。由于所有合法玩家只能发送0.5
ether增量，this.balance不再是半个整数，因为它也会0.1 ether有贡献。这可以防止[18]，[21]和[24]行的所有条件成立。
更糟糕的是，一个错过了里程碑的Ethereum的攻击者可能会强行发送10
ether（或者等同数量的以太会将合约的余额推到上面finalMileStone），这将永久锁定合约中的所有奖励。这是因为该claimReward()函数总是会回复，因为[32]上的要求（即this.balance大于finalMileStone）。
### 预防技术
这个漏洞通常是由于滥用this.balance。如果可能，合约逻辑应该避免依赖于合约余额的确切值，因为它可以被人为地操纵。如果基于逻辑应用this.balance，确保考虑到意外的余额。
如果需要确定的沉积ether值，则应使用自定义变量，以增加应付功能，以安全地追踪沉积的ether。这个变量不会受到通过selfdestruct()调用发送的强制以太网的影响。
考虑到这一点，修正后的EtherGame合约版本可能如下所示：
    contract EtherGame {
        uint public payoutMileStone1 = 3 ether;
        uint public mileStone1Reward = 2 ether;
        uint public payoutMileStone2 = 5 ether;
        uint public mileStone2Reward = 3 ether; 
        uint public finalMileStone = 10 ether; 
        uint public finalReward = 5 ether; 
        uint public depositedWei;
        mapping (address => uint) redeemableEther;
        function play() public payable {
            require(msg.value == 0.5 ether);
            uint currentBalance = depositedWei + msg.value;
            // ensure no players after the game as finished
            require(currentBalance  0); 
            redeemableEther[msg.sender] = 0;
            msg.sender.transfer(redeemableEther[msg.sender]);
        }
     }    
在这里，我们刚刚创建了一个新变量，depositedEther它跟踪已知的以太存储，并且这是我们执行需求和测试的变量。请注意，我们不再有任何参考this.balance。
### 真实世界的例子：未知
我还没有找到这个在野被利用的例子。然而，在弱势群体竞赛中给出了一些[可利用的合约的例子](https://github.com/Arachnid/uscc/tree/master/submissions-2017/)。
## Delegatecall
在CALL与DELEGATECALL操作码是允许Ethereum开发者modularise他们的代码非常有用。对契约的标准外部消息调用由CALL操作码处理，由此代码在外部契约/功能的上下文中运行。该DELEGATECALL码是相同的标准消息的调用，但在目标地址执行的代码在调用合约的情况下与事实一起运行msg.sender，并msg.value保持不变。该功能支持实现库，开发人员可以为未来的合约创建可重用的代码。
虽然这两个操作码之间的区别很简单直观，但是使用DELEGATECALL会导致意外的代码执行。
有关进一步阅读，请参阅[Stake
Exchange上关于以太坊的这篇提问](https://ethereum.stackexchange.com/questions/3667/difference-between-call-callcode-and-delegatecall)，[官方文档](http://solidity.readthedocs.io/en/latest/introduction-to-smart-contracts.html#delegatecall-callcode-and-libraries)以及[如何保护您的智能合约：6](https://medium.com/loom-network/how-to-secure-your-smart-contracts-6-solidity-vulnerabilities-and-how-to-avoid-them-part-1-c33048d4d17d)。
### 漏洞
保护环境的性质DELEGATECALL已经证明，构建无脆弱性的定制库并不像人们想象的那么容易。库中的代码本身可以是安全的，无漏洞的，但是当在另一个应用程序的上下文中运行时，可能会出现新的漏洞。让我们看一个相当复杂的例子，使用斐波那契数字。
考虑下面的库可以生成斐波那契数列和相似形式的序列。 FibonacciLib.sol[^ 1]
    // library contract - calculates fibonacci-like numbers;
    contract FibonacciLib {
        // initializing the standard fibonacci sequence;
        uint public start;
        uint public calculatedFibNumber;
        // modify the zeroth number in the sequence
        function setStart(uint _start) public {
            start = _start;
        }
        function setFibonacci(uint n) public {
            calculatedFibNumber = fibonacci(n);
        }
        function fibonacci(uint n) internal returns (uint) {
            if (n == 0) return start;
            else if (n == 1) return start + 1;
            else return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
该库提供了一个函数，可以在序列中生成第n个斐波那契数。它允许用户更改第0个start数字并计算这个新序列中的第n个斐波那契数字。
现在我们来考虑一个利用这个库的合约。