qT ∆ with ∆ being the time it took to mine
The main theorem of Garay et al. [31] states that given
sufﬁciently constraint parameters, a blockchain is secure, i.e.,
satisﬁes the persistence and liveness properties (see Theorem
26 and 27 of [31]). The proof relies on sufﬁciently large epochs
m and a properly selected dampening factor τ. For FlyClient,
we adopt parameters such that the blockchain satisﬁes liveness
and persistence. This guarantees that there exists a single chain
adopted by all honest full nodes, otherwise there would exist
contradicting proofs for separate valid chains.
Attacks Using Variable Difﬁculty. As ﬁrst shown by Ba-
hack [26], there are attacks on PoW blockchains that take
advantage of the variable difﬁculty model. The main intuition
for these attacks is that an adversary can mine fewer but higher
difﬁculty weight blocks such that, because of the increased
variance, they can get lucky and exceed the more powerful
honest miners. Assume that an adversary who controls a third
of the honest parties mining power could mine a single block
of arbitrary high difﬁculty. The probability that the adversary
can mine a single high difﬁculty block with more weight
than the expected weight of the honest chain is roughly 28%.
This is clearly not negligible. Bitcoin prevents these attacks
by slowly adjusting the difﬁculty and using a dampening
ﬁlter as explained in Section III-A. Garay et al. [10] show
1The security parameter in [10] is κ. We use λ for consistency. Also we
use µ = 1 − δ to denote the adversary’s mining power.
2Bitcoin currently operates with τ = 4, m = 2016 and f = 0.03.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
932
that Bitcoin’s difﬁculty recalculation rule sufﬁces to defend
against these attacks. For a super-light client that only checks
a small subset of the blocks, it is important that all difﬁculty
transitions are valid, e.g., that they adhere to the dampening
ﬁlter. Otherwise, these difﬁculty raising attacks would allow
even a bounded adversary to succeed.
Other Difﬁculty Transitions. We note that the FlyClient pro-
tocol does depend on the speciﬁc difﬁculty transition rules.
Bitcoin’s transition rule can be expressed as a parameterization
of the variable difﬁculty model. However, other blockchains
such as Ethereum use a different type of transition rule, where
the next block’s difﬁculty is a moving average of the previous
blocks. It remains an open problem to show that Ethereum
as a whole is secure using this rule. Similarly, our security
proof only applies to the variable difﬁculty model described
above, and therefore, does not cover Ethereum. One can still
use an adapted version of FlyClient on Ethereum but only with
heuristic security guarantees.
B. Adversarial Model
The Bitcoin backbone analysis considers a rushing adver-
sary who can reorder the delivery of all messages in a round,
and can make tr · q queries to the oracle function H(·) in
each round where tr  µ, is negligible. This can be done either
numerically or using a simple Chernoff bound.
Lemma 1. In the constant difﬁculty backbone setting, let X
be a random variable denoting the number of blocks mined
by any adversary while the honest chain adopts L blocks.
Further, assume that the adversary ﬁnds blocks at a rate which
is bounded by µ of the rate at which the honest chain adopts
blocks. The probability that X ≥ c · L for c > µ is bounded
by eL(c−µ) c
−c·L, where e is Euler’s number.
µ
The proof is in Appendix B-A
Corollary 1. For n = Θ(λ) and for every µ, there exists a
c < 1 such that the (c, n)-adversary assumption holds in the
constant difﬁculty backbone.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
933
C. NIPoPoWs for Variable Difﬁculty Chains
FlyClient works similarly to the prover-veriﬁer model of
NIPoPoWs, where the prover wants to convince the veriﬁer
that some predicate over the honest chain is true. For sim-
plicity, in FlyClient we consider the predicate to be that the
prover knows a blockchain at round r that ends with block
Bn and has cumulative difﬁculty D. In the SPV model, this
proof would consist of all block headers of the chain, i.e.,
enough information for the veriﬁer to check all PoWs. We
refer to this as the SPV predicate.
Deﬁnition 2 (SPV Predicate). The SPV predicate for a chain
C ending with block Bn is 1 if all blocks in C contain correct
PoW which follow the difﬁculty adjustment function and the
hash of each block is contained in the header of the block
directly succeeding it.
From this and given the FlyClient use of MMR in the next
section, a prover can with little (i.e., logarithmic in the length
of the chain) overhead, prove further properties of the chain
including that any particular block is included in the chain
since Bn commits to all previous blocks before it. We note that
since persistence cannot be guaranteed for the last k blocks
of the chain, no predicates should be considered for the last
k blocks. Thus, the veriﬁer treats all valid proofs for chains
differing in at most the last k blocks to be proofs for the
same chain and takes the one with the highest difﬁculty as the
representative proof.
Similar to the NIPoPoW model, the veriﬁer is a light client
with less storage/computation capacity than a full node and
who can therefore not store the entire blockchain. The only
a priori information the veriﬁer has is the genesis block and
access to the oracle function H(·) to be able to verify PoWs. A
veriﬁer receives a set of proofs P from multiple provers, with
the assumption that at least one proof came from an honest
prover, and accepts the SPV predicate for the proof of a block
Bn with most cumulative difﬁculty. Our assumption that the
client is connected to at least one honest node implies that
the client is not vulnerable to eclipse attacks [32]. Defending
against such attacks is orthogonal to our work and has been
addressed by recent work [32], [33].
In the following, we adapt the NIPoPoW security deﬁnition
for our SPV predicate for chains of variable difﬁculty.
Deﬁnition 3 (Security). A blockchain proof protocol (P ,V)
for the SPV predicate is secure if for all environments, for
any PPT adversary and for all rounds r, if V receives a set
of proofs P at the beginning of round r, at least one of which
has been generated by an honest prover, then
1) V outputs the SPV predicate with the highest difﬁculty at
the end of round r for some block B, and;
2) All honest full nodes at time r hold a chain with the
common preﬁx of the chain committed by Bn except for
up to the last k blocks.
We use a slightly-different version of the succinctness
deﬁnition as follows.
Deﬁnition 4 (Succinctness – Deﬁnition 4 from [14]). A
blockchain proof protocol (P ,V) for a predicate Q is succinct
if for any PPT prover A, any proof π produced by A at some
round r, is of size O(polylog(N )), where N is the number of
blocks in the honest chain.
Following the above two deﬁnitions and for the adversarial
model described in the previous subsection, we present the
main theorem of our work.
Theorem 1 (FlyClient). Assuming a variable difﬁculty back-
bone protocol such that all adversaries are limited to be (c, L)-
adversaries as per Assumption 2 and assuming a collision-
resistant hash function H (Deﬁnition 8), the FlyClient protocol
is a secure NIPoPoW protocol in the random oracle model as
per Deﬁnition 3 with all but negligible probability. The proto-
col is succinct with proof size O(L + λ · log1/c(n) · log2(n)).
IV. FLYCLIENT DESIGN
In PoW cryptocurrencies the valid chain is the one with
the highest cumulative proof of work, i.e., the most difﬁcult
one to create. For simplicity, in this section we assume blocks
have the same difﬁculty and thus the valid chain is the longest
one. Later in Section VI, we extend our protocol to handle the
more realistic scenario where blocks have variable difﬁculty
throughout the chain.
A. Design Components
FlyClient consists of three main building blocks. First, we
leverage the MMR construction (see Appendix ??) to allow
for veriﬁcation of any previous block header with only the
latest block header. Each MMR commits to previous blocks
efﬁciently using a single hash value written in every block
header. The MMR leaves are the block headers of all previous
blocks and each block’s MMR is built from the previous
MMR. This construction ensures that the i-th block header,
contains the root of the (i − 1)-th MMR. This allows an
efﬁcient update process resulting in only a small overhead for
full nodes when adding new blocks to the chain. Once a block
is veriﬁed, we can then verify any transaction included in that
block with simple SPV Merkle proofs.
Second, to reduce the number of block headers that light
clients need to download to verify the latest block header,
FlyClient employs a probabilistic veriﬁcation mechanism by
which it randomly samples only a logarithmic number of block
headers; if these block headers are valid, then we show that the
latest block belongs to the longest chain with overwhelming
probability. Which block headers to sample are chosen by the
light clients to prevent the adversary from avoiding sampling
fake blocks. If an adversarial prover is trying to convince the
veriﬁer that they know a chain that is the same length as the
honest chain, there is a maximal number of blocks in the
adversary’s chain which are valid (have a valid PoW) since
the adversary has limited computing power. Our probabilistic
veriﬁcation guarantees that after randomly sampling an enough
number of blocks, we can detect at least one invalid block
in the adversary’s chain with overwhelming probability. We
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
934
present our sampling protocol and it’s optimization in Sec-
tion V. We outline our interactive protocol in Protocol 1.
Our third building block is the application of the Fiat-
Shamir heuristic to remove the interaction between the light
client and the full nodes. Instead of having the randomness be
provided by the veriﬁer, the random blocks will be determined
from the hash of the latest block. This allows a full node to
ﬁgure out on its own which random blocks it should send to the
clients for the veriﬁcation without any initial randomness from
the light client, yet the light client can verify the correctness of
the proof and is guaranteed that the full node is not cheating.
We discuss in detail how to make FlyClient non-interactive in
Section VI-B.
Algorithm 1 FlyClient Protocol
A client (the veriﬁer) performs the following steps speaking with
two provers who want to convince the client that they hold a valid
chain of length n + 1. At least one of the provers is honest. (If the
provers claim different lengths for their chains then the longer
chain is checked ﬁrst. This is described in the generic veriﬁer for
NIPoPoW [14].)
1) The provers send to the client the last block header in their
chains. Each header includes the root of an MMR created
over the ﬁrst n blocks of the corresponding chain.
2) The veriﬁer queries k random block headers from each prover
based on the probabilistic sampling algorithm described in
Section V.
3) For each queried block, Bi, the prover sends the header of Bi
along with an MMR proof ΠBi∈C that Bi is the i-th block in
C.