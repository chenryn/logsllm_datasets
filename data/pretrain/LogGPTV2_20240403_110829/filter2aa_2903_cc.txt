### 老雷评点
2010年底，英特尔在与台湾某OEM厂商联合开发新款平板电脑时遇到了多个技术难题。老雷临危受命，携带ITP前往台北解决问题。某天，当老雷正在使用ITP时，一位台湾同行看到了这个神秘的小盒子，非常激动地说道：“哇，你在用ICE啊！”并立即叫来同伴一起观看。这位同行对ICE的敬重让老雷对他刮目相看。

### 7.4.6 直接连接接口
大约从2016年开始，英特尔逐步对外公布了一种名为直接连接接口（Direct Connect Interface, DCI）的新技术。简单来说，DCI技术可以复用USB3接口来访问处理器内部的各种调试功能（DFx），包括JTAG逻辑。DCI技术的最大优点是利用了日益普及的USB3接口，不再像ITP/XDP那样需要专门的硬件接口（大多数电子产品只有在开发阶段才有这个接口）。此外，使用USB3接口还意味着无需打开机箱即可进行访问，因此英特尔公司自己的DCI调试仪被称为Intel® Silicon View Technology Closed Chassis Adapter（为英特尔硅观察技术设计的不需开机箱适配器）（见图7-9）。DCI调试仪的价格也比ITP便宜许多（390美元）。

**图7-9 英特尔公司的DCI调试仪**

然而，DCI的便捷性也带来了安全风险——黑客可能通过DCI协议控制和访问计算机系统。因此，DCI功能通常默认禁用，使用时应在BIOS设置中启用。

### 7.4.7 典型应用
正如本章开头所述，硬件调试工具通常用于解决软件调试器难以解决的问题。以下是使用JTAG方式进行调试的一些典型场景：

1. **调试系统固件代码**：包括BIOS代码、EFI代码以及支持AMT技术的ME（Management Engine）代码。
2. **调试操作系统的启动加载程序**：以及系统临界状态的问题，例如进入睡眠和从睡眠状态恢复过程中发生的问题。
3. **其他软件调试器无法调试的情况**：如开发软件调试器时调试实现调试功能的代码（例如Windows的内核调试引擎），以及调试操作系统内核的中断处理函数、任务调度函数等。
4. **观察CPU的微观状态**：例如CPU的ACPI状态（C State）。

### 7.5 ARM处理器的JTAG支持
1992年发布的ARM6系列处理器是最早实现JTAG支持的ARM架构处理器之一。其中最著名的是苹果公司牛顿PDA（Newton PDA）产品所使用的ARM610芯片。如第2章所述，ARM6系列处理器属于ARMv3架构。不过，当时的JTAG支持尚未被纳入ARM架构中，只是一种可选实现。这种情况一直持续到ARM7和ARM9系列。例如，著名的ARM7TDMI中的D代表实现了JTAG调试支持，I代表ICE。直到2002年ARMv6架构推出时，才将名为ARM调试接口（ADI）的调试支持纳入架构定义，并推荐实现ARMv6的处理器支持ADIv4。简而言之，ARMv3架构的某些ARM处理器最早实现了JTAG支持，但不是架构性特征；而在ARMv6时，ADI支持被定义为架构的一部分。

### 7.5.1 ARM调试接口
ARM调试接口（ADI）全称是ARM调试接口架构规约（ARM Debug Interface Architecture Specification）。ADI的1至3版本实现在某些ARM核心中，而ADIv4则被纳入ARMv6，正式成为ARM架构的一部分。目前较新的版本是ADIv6。

简单来说，ADI为使用ARM架构的设备定义了调试子系统，详细规划了其组成和每个部件的角色，确定了它们的职责，并定义了它们之间的连接方式。

当使用硬件调试器调试ARM目标系统时，需要一台主机（通常是Windows或Linux系统）、一个硬件调试器和一条连接线（一般是USB或网线，较旧的方式还有串行端口）。硬件调试器通过特殊的电缆连接到目标系统的调试连接插口（Debug Connector）。表面上看，使用一个调试器就可以将主机和目标系统连接在一起。接下来的问题是，调试器是如何访问和控制调试目标的呢？这就涉及SoC芯片的内部设计，而这正是ADI要解决的问题。

**图7-10 ADI调试系统互联关系示意图**

进一步来说，ADI定义了SoC芯片内部应该如何设计，以便可以与调试器通信，实现各种调试功能。为了实现这一目标，ADI定义了三个角色：DP（调试端口）、AP（访问端口）和被调试器件。图7-10展示了这些角色在SoC中的位置。

### 7.5.2 调试端口
调试端口（Debug Port, DP）负责与调试器通信，接受调试器的命令和参数，并将结果返回给调试器。ADI定义了以下三种DP：

1. **JTAG-DP**：与IEEE 1149.1标准兼容的通信方式，通过扫描链读写寄存器信息和传递数据。
2. **SW-DP**：ARM公司定义的标准，通过两根线进行串行通信，称为串行线（Serial Wire, SW）技术。
3. **SWJ-DP**：可以动态选择使用串行线或JTAG方式进行通信。

通常，一个支持ADI的SoC芯片至少要实现一个调试端口，可以选择上述三种实现方式之一。

### 7.5.3 访问端口
访问端口（Access Port, AP）负责访问被调试的目标器件，从中读取信息或将数据写入目标器件。ADI定义了以下两种AP：

1. **MEM-AP**：全称为内存访问端口（Memory Access Port），通过内存映射的方式访问目标器件及其资源。
2. **JTAG-AP**：使用JTAG方式访问被调试的目标器件。

一个支持ADI的SoC中至少有一个AP。考虑到SoC系统中包含多个需要调试的组件，通常会实现多个AP。AP的类型应根据被调试目标的特征来选择。

### 7.5.4 被调试器件
在ADI中，支持两种调试器件：一种是CoreSight器件，另一种是JTAG器件。CoreSight是ARM公司设计的一套调试技术，我们在第5章曾介绍过（见5.7.4节）。

当一个SoC内部有多个AP和被调试组件时，每个被调试组件应该配备一块只读内存（ROM），以表格形式记录器件的ID信息，以便调试器可以通过这些信息区分不同的器件。

在ADIv6的规约文档中，分A、B、C、D四个部分详细介绍了ADI总体结构、DP、AP和器件识别机制[9]，希望了解更多详细信息的读者可以查阅。

### 7.5.5 调试接插口
ADI定义的是SoC芯片内部的规范。实际调试时，必须解决的一个问题是如何将硬件调试器与目标系统连接起来。通常，在设计设备的主板时会考虑提供何种接插口（connector）供调试器连接。

需要注意的是，我们这里讨论的调试接插口与前面提到的调试端口虽然有关联，但并不相同。调试端口定义的是内部设计，而调试接插口涉及物理连接。本书将英文中的interface、port、connector分别翻译为接口、端口、接插口，以便区分。

由于使用ARM芯片的系统通常是小型设备，主板较小，“寸土寸金”，因此必须根据实际情况决定提供何种接插口。好在有多种不同尺寸的调试接插口可供选择。

首先介绍ARM-20接口，其形状和针脚编号如图7-11所示。

**图7-11 ARM JTAG 20（ARM-20）接口**

ARM-20接口由ARM公司定义，共有20个针脚，既支持标准的JTAG信号（TDI、TDO、TMS、TCK等），也支持前面介绍过的串行通信标准信号（SWDIO、SWCLK），因此ARM-20支持上述三种DP。表7-5描述了ARM-20接口的各个针脚信号名称和功能。

**表7-5 ARM-20接口信号定义**

| 针脚 | 信号名称 | I/O | 描述 |
| --- | --- | --- | --- |
| 1 | VTREF | 输入 | 目标电压参考 (Voltage Target Reference) |
| 2 | NC | — | 不连接或者用作电源 |
| 3 | nTRST | 输出 | 对目标系统发起复位请求 (Test Reset) |
| 4 | GND | — | 地 |
| 5 | TDI | 输出 | JTAG的测试数据输入 (Test Data In) 信号 |
| 6 | GND | — | 地 |
| 7 | TMS | 输出 | 测试模式选择 (Test Mode Select) |
| 8 | SWDIO | 输入/输出 | 在SWD模式时用作接收和发送串行数据 |
| 9 | GND | — | 地 |
| 10 | TCK | 输出 | 测试时钟 |
| 11 | SWCLK | 输出 | 在SWD模式时用作时钟信号 |
| 12 | GND | — | 地 |
| 13 | RTCK | 输入 | 测试时钟信号回显 (Return Test Clock) |
| 14 | GND | — | 地 |
| 15 | TDO | 输入 | 测试数据输出 |
| 16 | SWO | 输入 | 在SWD模式时供调试器接收数据 |
| 17 | GND | — | 地 |
| 18 | nSRST | 输入/输出 | 系统复位，彻底重启目标系统 |
| 19 | GND | — | 地 |
| 20 | DBGRQ | 输入/输出 | 调试请求 |

希望以上优化后的文本更加清晰、连贯和专业。