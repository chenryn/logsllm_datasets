SELECT name,phone, emai1 FROM people WHERE name LIKE *$′+@@version+′*
该查询将寻找名称中含有存储在@@version中的字符串的那些名称，其结果很可能为0；
但最终页面会包含我们正在寻找的所有信息（在本例中假定目标数据库服务器是Microsof SQL
Server 2000):
0 results found for Microsoft SQL Server 2000 - 8.00.194 (Intel x86)
Aug 6 2000 00:57:48 Copyright (c) 1988 - 2000 Microsoft Corporation Standard
Edition on Windows NT 5.0 (Build 2195: Service Pack 4)
还可以重复该技术以获取其他对实现精确跟踪有帮助的信息。下面是一些最有用的
Microsof SQL Server 内置变量：
·@@version：数据库服务器版本。
@@servermame：安装SQLServer的服务器名称。
·@@language：当前所使用语言的名称。
·@@spid：当前用户的进程ID。
可以使用下列查询获取详细的版本信息：
●SELECT SERVERPROPERTY(productversion):例如 100.1600.22。
118
---
## Page 133
第4章利用SQL注入
●SELECT SERVERPROPERTY(productlevel)：例如 RTM。
SELECT SERVERPROPERTY(edition):例如I Enterprise。
·EXECmaster.msver：更多详细信息，包括处理器数量、处理器类型、物理内存等。
4.3.2盲跟踪
如果应用不直接在响应中返回您所需要的信息，那么要想了解后台使用的技术，就需要采
用一种间接方法。这种间接方法基于不同数据库服务器所使用的SQL方言上的细微差异。最常
用的技术是利用不同产品在连接字符串方式上的差异。我们以下面的简单查询为例：
SELECT *somestring'
该查询对大多数主流数据库服务器都是有效的，但如果想将其中的字符串分成两个子串，
不同产品间便会出现差异。具体来讲，可以利用表42列出的差异来进行推断。
表4-2从字符串推断数据库服务器版本
数据库服务器
查询
Microsoff SQL Server
SELECT 'some' + 'string
MySQL
SELECT 'some’'string’
SELECT CONCAT('some', string")
Oracle
SELECT 'some' 'string’
SELECT CONCAT('some', string")
PostgreSQL
SELECT 'some′ I'string’
SELECT CONCAT('some', string)
因此，如果拥有一个可注入的字符串参数，便可以尝试不同的连接语法。通过判断哪一个
请求会返回与原始请求相同的结果，您可以推断出远程数据库的技术。
假使没有可用的易受攻击字符串参数，则可以使用与数字参数类似的技术。具体来讲，您
需要一条针对特定技术的SQL语句，经过计算后它能成为一个数字。表4-3中的所有表达式在
正确的数据库下经过计算后都会成为整数，面在其他数据库下将产生一个错误。
表4-3从数字函数推断数据库服务器版本
数据库服务器
查
Microsoft SQL Server
@@pack_received
@@rowcount
connection_id()
MySQL
last_insert_id0
row_count()
Oracle
BITAND(1,1)
PostgreSQL
SELECT EXTRACT(DOW FROM NOWO)
最后，使用一些特定的SQL结构（只适用于特定的SQL方言)也是一种有效技术，并且在
大多数情况下均能工作良好。例如，成功地注入WAITFORDELAY也可以很清楚地从侧面反映
出服务器端使用的是 Microsoft SQLServer。而成功注入 SELECT pg_sleep(10)则是一个明显的
信号，说明服务器端使用的是PostgreSQL(并且版本至少是8.2)。
119
---
## Page 134
SQL注入攻击与防御（第2版）
如果面对的是MySQL，可以使用一个有趣的技巧米确定其准确版本，我们知道，对于MySQL，
可使用三种不同方法来包含注释：
1)在行尾加一个#字符。
业（
3）在一个“”序列后再跟一个“*/”序列，位于两者之间的即为注释。
可对第三种方法做进一步调整：如果在注释的开头部分添加一个感叹号并在后面跟上数据
库版本编号，那么该注释将被解析成代码，只要安装的数据库版本高于或等于注释中包含的版
本，代码就会被执行。听起来有些复杂！请者下列MySQL查询：
/+t + 60i/ 13T3S
该查询将返回下列结果：
●2（如果MySQL版本为4.01.19或更高版本）
●1（其他情况）
不要忘记，某些SQL注入工具也提供了一些在某种程度上对识别远程数据库服务器有帮
数据库，可帮助您实现跟踪任务。我们将在本章结尾详细介绍Sqlmap。如果已经知道数据库是
MicrosoftSQLServer，那么可以使用Sqlninja（将在本章末尾进行介绍）来跟踪数据库服务器的版
本、数据库用户及权限、数据库服务器所使用的认证类型（混合模式或仅Windows认证)，以及
SQLSERVR.EXE是否以SYSTEM系统账户运行。
4.4使用UINON语句提取数据
到目前为止，读者应该对自己面对的数据库服务器技术有了清晰的了解。接下来我们将继
续学习使用UNION的SQL注入技术。UNION操作符是数据库管理员经常使用且最有用的工
具之一。可以使用它合并两条或多条SELECT语句的查询结果。其基本语法如下所示：
SELECT column-1, column-2,..-, column-N FROM table1
UNION
SELECT column-1, column-2,..·, column-N FROM table-2
执行该查询后，得到的结果与我们预想的完全相同：返回一张由两个SELECT语句查询结
果组成的表。默认情况下，结果中只包含不同的值。如果想在最终的表中包含重复的值，就需
要对语法稍微做些修改：
SELECT column-1, column-2,..-, column-N FROM table1
UNION ALL
SELECT column-1, column-2,.+·, column-N FROM table-2
在SQL注入攻击中，UNION运算符的潜在价值非常明显：如果应用程序返回了第一个（原
始）查询得到的所有数据，那么通过在第一个查询后面注入一个UNION运算符，并添加另外
个任意查询，便可以读取到数据库用户访问过的任何一张表。听起来很容易，是吧？是的，事
实的确如此，但需要遵循一些规则。接下来将介绍这些规则，
120
---
## Page 135
第4章利用SQL注入
4.4.1匹配列
要想UNION操作符正确工作，需满足下列要求：
·两个查询返回的列数必须相同。
·两个SELECT语句对应列所返回的数据类型必须相同（或至少是兼容的）。
如果无法满足上述两个约束条件，查询便会失败并返回一个错误。当然，具体是什么错误
消息则取决于后台所使用的数据库服务器技术。该错误消息在应用向用户返回完整的消息时可
作为一种非常有用的跟踪工具。表4-4列出了当UNION查询包含错误的列数时一些主流数据
库服务器返回的错误消息。
表4-4从基于UNION的错误中推断数据库服务器版本
数据库服务器
返回的错误消息
Microsoft SQL Server
All queries combined using a UNION, INTERSECT or EXCEPT operator must
have an equal number of expressions in their target lists
MySQL
The used SELECT statements have a different number of columns
Oracle
ORA-01789:query block has incorrect number of result columns
PostgreSQL
ERROR: Each UNION query must have the same number of columns
错误消息中并未提供任何与所需要列数相关的线索，因而要想得到正确的列数，唯一的方
法就是反复试验。主要有两种方法可用来得到准确的列数。第一种方法是将第二条查询注入多
次，每次逐渐增大列数直到查询正确执行。对于大多数比较新的数据库服务器（注意，不包括
Oracle8i或更早的版本）来说，由于NULL值会被转换成任何数据类型，因此可以为每一列都
注入NULL值，这样便能避免因相同列的数据类型不同而引发的错误。
举例来说，如果想找到由products.asp页面执行的查询所返回的准确列数，可以按下列方
式请求URL，直到不返回错误为止：
http: //www,victim.com/products.asp?id=12+union+select+nu11--
http: / /vww.victim. com/products. asp?id=12+union+select+nu11, nu11--
http: / /w.victim.com/products asp?id=12+union+select+nu1l, nul1, nu11--
请注意，Oracle要求每个SELECT查询包含一个FROM属性。因此，如果面对的是Oracle，
就应该将上面的URL修改成下列格式：
http: / /ww, victim,com/products.asp?id=12+union+select+nu11+from+dua1--
dual是一张所有用户都能访间的表，即便不想从特定的表中提取数据（比如本例的情况），
也可以对dual使用SELECT语句。
获取准确列数的另一种方法是使用ORDERBY子句而非注入另外一个查询。ORDERBY
子句既可以接收一个列名作为参数，也可以接收一个简单的、能标识特定列的数字。可以通过
增大ORDERBY子句中代表列的数字来识别查询中的列数，如下所示：
http: / /vaw, victim. com/products.asp?id=12+order+by+1
http: / /vww, victim, com/products.asp?id=12+ordex+by+2
http://wmw,victim,com/products.asp?id=12+order+by+3 etc,
如果在使用ORDERBY6时收到第一个错误，就意味着查询中包含5列。
121
---
## Page 136
SQL注入攻击与防御（第2版）
到底应该选择哪一种方法呢？通常第二种方法更好些，主要有两个原因。首先，ORDERBY
方法速度更快，尤其是当表中包含大量的列时。假设准确的列数为n，使用第一种方法找到正
确的列数需要n个请求。因为只有使用正确的值时，该方法才不会产生错误。第二种方法则只
有在使用的值比正确的值大时才会产生错误。这意味着可以使用二分查找法(binary search)米找
到正确的值。例如，假设表中包含13列，则可以按下列步骤进行判断：
（1）首先使用ORDERBY8，它不返回错误。这意味着正确的列数为8或更大的值。
(2）尝试ORDERBY16，它返回一个错误。这样就知道正确的列数介于8和15之间。
(3）尝试ORDERBY12，它不返回错误。现在知道正确的列数介于12和15之间。
（4）尝试ORDERBY14，它返回一个错误，现在知道正确的列数为12或13。
(5）尝试ORDER BY13，它不返回错误。因此13即为正确的列数。
这样就只使用了5个请求而非13个。对于喜欢数学表达式的读者来说，使用二分查找法
从数据库中检索值为n的列数需要O（log（n))个连接。选用ORDERBY方法的第二个原因是：
它留下的痕迹更小，通常在数据库日志中只留下很少的错误。
4.4.2匹配数据类型
识别出准确的列数后，现在是时候选择其中的一列或几列来查看一下是否是正在寻找的数
据了。前面提到过，对应列的数据类型必须是相互兼容的。因此，如果想提取一个字符串值（例
如，当前的数据库用户），那么至少需要找到一个数据类型为字符串的列以便通过它来存储正
在寻找的数据。使用NULL来实现会很容易，只需一次一列地使用示例字符串替换NULL即
可。例如，如果发现原始查询包含4列，那么应尝试下列URL：
http: //www.victim com/products . asp?id=12+union+select+ * test , NULL, NULL, NULL
http: //www,victim. com/products , asp?id=12+union+select+NULL, *test*, NULL, NULL
http://www,victim, com/products , asp7id=12+union+select+NULL, NULL, *test*, NULL
http://www,victim, com/products. asp?id=12+union+select+NULL, NULL, NULL, *test*
对于无法使用NULL的数据库来说（比如Oracle 8i)，如果想要得到该信息，就只能通过暴
力猜测(brute force guessing)了。由于该方法必须尝试所有可能的数据类型组合，因此会非常耗
时，只适合于列数较少的情况。可以使用Unibrute工具自动实现这种列猜测，该工具可从
https://github.com/GDSSecurity/Unibrute 上: 下载。
只要应用程序不返回错误，即可知道刚才存储test值的列可以保存一个字符串，因面可用
它来显示需要的值。例如，如果第二列能够保存一个字符串字段（假设想获取当前用户的名称），
只需请求下列URL：
http://vwr,victim, com/products,asp?id=12+union+select+NuLL, system_user,
NULL, NULL
该请求产生的结果类似于图44展示的截图。
成功了！不难发现，现在表中包含一个薪行，其中包含了正在寻找的数据！可以按同样方
式很容易地利用该攻击一次一条地提取整个数据库中的数据，正如您稍后将会看到的那样。但
在这之前，我们先说明一些使用UNION提取数据时很有用的小技巧。在上例中，我们可操纵
4个不同的列：其中两个包含字符串，两个包含整数。对于这样的情况，可以使用多列来提取
数据。例如，下列URL将同时检索当前用户名和当前数据库名：
http: //vww,victim, com/products asp?id12+union+select+NvL,, system_user,
db_name () , NULL
122
---
## Page 137
第4章利用SQL注入
VICTIM.COM
Price
Bk
SQI, Iajet
50
app-dberes
Do
图 4-4
一个成功的基于UNION的SQL注入示例
不过我们可能没那么幸运，因为我们只得到了一个包含想要数据的列以及供提取的几条数
据。很明显，对于每一条信息，只能执行一个请求。幸运的是，我们有一种更好（更快）的方案。
请看下列请求，它使用了SQLServer的连接运算符（请参考表4-2以获取其他数据库服务器平
台的连接运算符）：
SELECT NULL, system_user + * 1 * + db_name (), NULL, NULL
该查询将system_user的值和db_nameO的值连接（中间使用附加的“”字符来提高可读性）
到一列中，并转换为下列URL：