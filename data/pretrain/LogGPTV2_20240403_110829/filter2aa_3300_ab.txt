# Copyright © 2011 Juniper Networks, Inc. - www.juniper.net

## Importance of Bidirectional Inspection
- **Issue**: If an application firewall (AppFW) does not inspect both client-to-server and server-to-client traffic, it may produce inaccurate results, leading to potential security vulnerabilities.

## Reversing Protocol Traffic
- **Challenge**: An AppFW might not distinguish between client and server directions, which can be exploited to deceive the firewall and other Layer 7 services.
- **Question**: What happens if you switch the client-to-server and server-to-client traffic? Can this lead to an improper match?
- **Answer**: For this particular AppFW, no, but it may be possible with other implementations.

## Port-Based Detection
- **Concern**: Not all detection methods are based on actual application identification. Some may only inspect certain ports or assume a specific application based on the port number.
- **Example**:
  - **DNS Traffic on Port 53**: Properly identified.
  - **Exact same traffic on any other port**: May not be correctly identified.

## Application Cache Poisoning
- **Scenario 1/6**: A simple policy blocks SMTP on any port but allows other traffic.
- **Scenario 2/6**: Sending SMTP over port 80 is blocked as expected.
  - **Server Response**: `220 smtp.example.com ESMTP Postfix`
- **Scenario 3/6**: Poison the cache with HTTP traffic (20 separate connections to 192.168.2.13 on port 80).
- **Scenario 4/6**: Subsequent SMTP traffic on the same port is now permitted.
- **Scenario 5/6**: The cache hit occurs, allowing the SMTP traffic.
- **Scenario 6/6**: All new connections are detected as HTTP. This was tested at 5 AM.

## Caching Nested Applications
- **Risk**: Caching nested applications is risky because multiple applications can be hosted on the same host, protocol, and port, both maliciously and legitimately.
- **Attack Vector**: Attackers can exploit this more easily than port-based application cache attacks.
- **Recommendation**: Perform AppID on all nested applications or block access to the server, protocol, or port altogether.

## Conflict Resolution
- **Problem**: When a traffic stream has characteristics of multiple applications, how should the AppFW select the correct application?
- **Challenges**:
  - Similar applications (e.g., SMTP and FTP) can be difficult to differentiate.
  - Evasive applications and malicious attackers may try to compromise accurate detection.
- **Example**:
  - **HTTP Patterns**: `GET|POST|HTTP`
  - **SIP Patterns**: `Request|Register|Status`
  - **Custom Protocol**: `GET /Request Register 1.1` (Could be detected as HTTP, SIP, or unknown).

## Application Layer Gateways with Application Firewalls
- **Functionality**: ALGs inspect control channels of certain protocols (e.g., FTP, MSRPC, SUNRPC, RTSP, SIP) to open additional pinhole sessions for auxiliary data channels.
- **Impact**: The impact on AppFWs varies based on implementation and protocols.
- **Limitations**:
  - Some data channels (e.g., FTP data, RTP) cannot be accurately inspected due to being pure byte streams, encrypted, compressed, or transient in nature.

## Unknown Application Protocols
- **Scenario 1/4**: What happens when the AppID cannot identify an application?
  - **Step 1**: Open session.
- **Scenario 2/4**: Initially, Layer 7 processing is enabled for the session.
- **Scenario 3/4**: After sending some traffic, once AppID completes, no further Layer 7 processing occurs, even with Full IPS enabled.
  - **Further Analysis**: Traffic is fast-pathed in the ASIC NPU, bypassing the processor where FW/IPS is handled.
- **Scenario 4/4**: Application Level Exchange.

## Obfuscation Techniques
- **Encryption**:
  - **Detection**: Measure the randomness of data (entropy) to determine if it is encrypted.
  - **Limitation**: Cannot identify the application, only that it is an unknown encrypted application.
- **Steganography**:
  - **Challenge**: Hiding messages in plain sight, very hard to detect.
  - **Solution**: Bayesian-like filtering can improve detection.
- **Tunneling**:
  - **Examples**: GRE, IPinIP, SSL, etc.
  - **Challenge**: AppFW may not detect inner protocols.

## AppID Without Pattern Matching
- **Alternative Methods**:
  - **IP Address**: Classify known P2P supernodes or TOR exit points.
  - **Combination**: IP-based matching and pattern matching for other aspects of the traffic.

## Role of Application Firewalls
- **Improvement**: Better than stateful firewalls alone, but a subset of real IPS.
- **Cost-Effective**: Lightweight way to keep honest applications honest.
- **Integration**: Can save IPS time by not inspecting unwanted "honest" applications.
- **Limitations**: Can block unknown encrypted communication, but obfuscation methods like steganography may evade.

## Future Trends for Applications
- **Increased Use of HTTP and SSL**: More applications running over HTTP and using SSL encryption.
- **Efficient Applications**: Smarter and more efficient applications, including encryption and compression.
- **Evasion Techniques**: Custom encryption and encryption within SSL, blending in with regular traffic using standard and advanced mechanisms like steganography.

## Solving Limitations in AppFW
- **Anomaly Detection**: Detect application and protocol anomalies.
- **Full IPS**: Implement full IPS for exploit protection.
- **Disable Caching**: Prevent caching issues.
- **Default Settings**: Check and adjust default settings.
- **Stateful Firewall**:
  - **Deploy**: With full stateful firewall.
  - **Leverage**: L3/L4 IPS protections and session control.
  - **Strict Rulebase**: Use a tight rulebase with strict control on source/destination IP addresses and L4 protocol/ports.
- **Network Access Control**:
  - **Access Control**: Strict control over network access.
  - **Quarantine**: Isolate guest or compromised hosts.
- **Full IPS**:
  - **Policy Tuning**: Use appropriately tuned policy on top of stateful firewall and AppFW.
  - **Anomaly Protection**: Detect evasion techniques.
  - **Avoid IDS Mode**: Ensure full IPS mode is used.
- **Malware Protection**:
  - **Network-Based**: Network-based malware protection and URL filtering.
  - **Desktop**: Desktop malware protection for advanced threats.

## Questions and Answers
- **Contact**: PI:EMAIL – Twitter: @bradmatic517
- **Q&A Session**: Open for questions and answers.