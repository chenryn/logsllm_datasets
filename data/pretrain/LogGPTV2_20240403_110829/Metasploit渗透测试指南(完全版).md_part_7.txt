# 优化后的文本

## 3.1.2 使用Netcraft查找特定网站的服务器IP地址
通过使用Netcraft工具，我们可以找出承载某个特定网站的服务器IP地址。例如，我们查询了`secmaniac.net`，发现其IP地址为75.118.185.142。接下来，我们对这个IP地址进行了whois查询：

```bash
msf> whois 75.118.185.142
[*] exec: whois 75.118.185.142
```

查询结果如下：
- **WideOpenWest Finance LLC** (NET-75-118-0-0-1)
  - IP范围: 75.118.0.0 - 75.118.255.255
- **WIDEOPENWEST OHIO WOW-CL11-1-184-118-75** (NET-75-118-184-0-1)
  - IP范围: 75.118.184.0 - 75.118.191.255

从whois查询结果中，我们发现`WIDEOPENWEST`似乎是该网站的服务提供商。由于真实的子网范围并未注册在`secmaniac.net`或`secmaniac.com`名下，我们可以推断该网站可能运行在其所有者的家中，因为该IP地址看起来属于家庭用户段。

## 3.1.3 使用NSLookup获取更多信息
为了获取关于服务器的附加信息，我们使用BackTrack中的`nslookup`工具来挖掘更多关于`secmaniac.net`的信息。大多数操作系统都集成了这个工具。

```bash
root@bt:~# nslookup
set type=mx
> secmaniac.net
Server: 172.16.32.2
Address: 172.16.32.2#53
Non-authoritative answer:
secmaniac.net  mail exchanger = 10 mailstore1.secureserver.net.
secmaniac.net  mail exchanger = 0 smtp.secureserver.net
```

从上述列表中，我们看到邮件服务器的DNS记录指向`mailstore1.secureserver.net`和`smtp.secureserver.net`。这些邮件服务器由第三方运维，不在我们的渗透测试范围内。

到目前为止，我们已经搜集到了一些有价值的被动信息。然而，最终我们还需要借助主动信息搜集技术对目标IP地址（75.118.185.142）进行更准确的信息探测。

### 提示
被动信息搜集是一门艺术，需要不断学习和实践。可以参考“渗透测试执行标准（PTES；http://www.pentest-standard.org/）”上的方法，拓展你的被动信息搜集工作。

## 3.2 主动信息搜集
通过主动信息搜集，我们可以执行端口扫描来确定目标系统开放了哪些端口、运行了哪些服务。多发现一个存活的主机或运行中的服务，就多一些渗透成功的机会。但是请注意：如果你在主动信息搜集过程中不够小心，可能会被入侵检测系统（IDS）或入侵防御系统（IPS）检测到。

### 3.2.1 使用Nmap进行端口扫描
通过被动信息搜集确定了目标的IP范围后，我们可以开始使用端口扫描来获取目标开放的端口。端口扫描的过程是逐个对远程主机的端口发起连接，从而确定哪些端口是开放的。

#### 示例
我们将以附录A中描述的IP地址为172.16.32.131的虚拟机为例，演示如何使用Nmap进行端口扫描。

```bash
root@bt:~# nmap -sS -Pn 172.16.32.131
Nmap scan report for 172.16.32.131
Host is up (0.00057s latency).
Not shown: 990 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
25/tcp   open  smtp
80/tcp   open  http
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
443/tcp  open  https
445/tcp  open  microsoft-ds
1025/tcp open  NFS-or-IIS
1433/tcp open  ms-sql-s
3389/tcp open  ms-term-serv
```

如你所见，Nmap会报告一个开放端口的列表，并且在每个端口后面附上其绑定服务的描述。

为了获取更多信息，可以尝试使用`-A`选项，它将尝试进行深入的服务枚举和旗标获取。下面是我们使用`-sS`和`-A`选项，对相同的目标扫描得到的结果：

```bash
Nmap scan report for 172.16.32.131
Host is up (0.0035s latency).
Not shown: 993 closed ports
PORT     STATE SERVICE       VERSION
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds  Microsoft windows XP microsoft-ds
777/tcp  open  unknown
1039/tcp open  unknown
1138/tcp open  msrpc         Microsoft Windows RPC
1433/tcp open  ms-sql-s      Microsoft SQL Server 2005 9.00.1399; RTM
...
Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 or Windows Server 2003
Network Distance: 1 hop
Service Info: OS: Windows
Host script results:
|_nbstat: NetBIOS name: V-MAC-XP, NetBIOS user: , NetBIOS MAC: 00:0c:29:c9:38:4c (VMware)
|_smbv2-enabled: Server doesn't support SMBv2 protocol
| smb-os-discovery: 
|   OS: Windows XP (Windows 2000 LAN Manager)
|   Name: WORKGROUP\V-MAC-XP
```

### 3.2.2 在Metasploit中使用数据库
如果你正在执行一项复杂的渗透测试工作，有大量的测试目标，那么记录所有的操作是非常重要的。Metasploit提供了对多种数据库的支持，包括MySQL、PostgreSQL和SQLite3。我们在本次讨论中将使用PostgreSQL作为例子，因为它是Metasploit默认的数据库。

#### 启动数据库
首先，我们使用集成在BackTrack中的init.d脚本启动数据库子系统。

```bash
root@bt:~# /etc/init.d/postgresql-8.3 start
```

PostgreSQL启动后，我们让Metasploit框架连接到这个数据库实例上。连接到数据库需要用户名、密码、运行数据库系统的主机名以及想要使用的数据库名。BackTrack中PostgreSQL默认的用户名是`postgres`，密码是`toor`，我们将使用`msfbook`作为数据库名。输入如下命令建立与数据库的连接：

```bash
msf > db_connect postgres:toor@127.0.0.1/msfbook
```

如果是第一次连接到`msfbook`数据库，我们会看到一堆冗长的输出，这是由于Metasploit在生成所有必需的数据表。如果不是第一次连接，这条命令会直接返回到MSF终端提示符，等待下一步的指令。

#### 数据库交互
Metasploit提供一系列的命令让我们能与数据库进行交互。如果需要一个完整的数据库命令列表，可以在MSF终端中输入`help`来查看。

现在，我们使用`db_status`命令来确认数据连接是正确的。

```bash
msf > db_status
[*] postgresql connected to msfbook
```

#### 将Nmap输出导入Metasploit
当你与其他组员一起协同进行渗透测试工作时，不同的人可能在不同的时间和地点进行扫描。应当了解如何将每个人独立运行的Nmap扫描结果导入到Metasploit框架中。

首先，我们对这台Windows虚拟机使用`-oX`选项进行扫描，生成一个名为`Subnet1.xml`的文件：

```bash
t/01.891z61 14auqn9 xo-v-Ss-ud- deu
```

XML文件生成后，我们使用`db_import`命令将文件导入到数据库中。操作完毕后，可以使用`db_hosts`命令核实导入的结果。

```bash
msf > db_connect postgres:toor@127.0.0.1/msfbook
msf > db_import Subnet1.xml
msf > db_hosts -C address
Hosts
address
192.168.1.1
192.168.1.10
192.168.1.101
192.168.1.102
192.168.1.109
192.168.1.116
192.168.1.142
192.168.1.152
192.168.1.154
192.168.1.171
192.168.1.155
192.168.1.174
192.168.1.180
192.168.1.181
192.168.1.2
192.168.1.99
```

当我们执行`db_hosts`命令后，返回了一个主机的IP地址列表，证明我们已经成功地将Nmap输出导入到了Metasploit中。

#### 高级Nmap扫描技巧：TCP空闲扫描
一种更加高级的Nmap扫描方式是TCP空闲扫描，这种扫描能让我们冒充网络上另一台主机的IP地址，对目标进行更为隐秘的扫描。进行这种扫描之前，我们需要在网络上定位一台使用递增IP帧标识（IPID）机制的空闲主机（空闲是指该主机在一段特定时间内不向网络发送数据包）。当我们发现这样一台主机后，它的IP帧标识是可以被预测的，利用这一特性可以计算出它下一个IP帧的标识。当我们冒充这台空闲主机的IP地址对目标主机的某个端口进行探测后，如果该空闲主机实际的IP帧标识与预测得出的IP帧标识发生断档，那么意味着该端口可能是开放的。

可以使用Metasploit框架的`auxiliary/scanner/ip/ipidseq`模块来寻找能够满足TCP空闲扫描要求的空闲主机，如下所示：

```bash
msf > use auxiliary/scanner/ip/ipidseq
msf auxiliary(ipidseq) > show options
Module options:
Name              Current Setting  Required  Description
----              ---------------  --------  -----------
GWHOST            no               The gateway IP address
INTERFACE         no               The name of the interface
LHOST             no               The local IP address
RHOSTS            yes              The target address range or CIDR identifier
RPORT             0                yes       The target port
SNAPLEN           65535            yes       The number of bytes to capture
THREADS           1                yes       The number of concurrent threads
TIMEOUT           500              yes       The reply read timeout in milliseconds
```

这个列表显示了执行ipidseq扫描所需的所有参数。重点对`RHOSTS`参数进行说明，此参数可以使用IP地址段（如192.168.1.20-192.168.1.30）、CIDR（无类型域间选路）地址块（如192.168.1.0/24）、使用逗号分隔的多个CIDR地址块（如192.168.1.0/24,192.168.3.0/24），以及每行包含一个IP地址的IP列表文本文件（如file:/tmp/hostlist.txt）。这些选项让我们在设定扫描目标时具有很大的灵活性。

在`THREADS`参数中设定扫描的线程数。所有的扫描模块默认线程数为1。增加参数值可以提高扫描速度，降低参数值可以减少网络上的数据流量。一般来说，在Windows平台上运行Metasploit，线程数最好不要超过16，在类UNIX平台运行不要超过128。

现在我们设定好参数值并执行扫描模块。我们将`RHOSTS`参数设置为192.168.1.0/24，将线程数设置为50，然后运行扫描。

```bash
msf auxiliary(ipidseq) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(ipidseq) > set THREADS 50
THREADS => 50
msf auxiliary(ipidseq) > run
[*] 192.168.1.1's IPID sequence class: All zeros
[*] 192.168.1.10's IPID sequence class: Incremental!
[*] Scanned 030 of 256 hosts (011% complete)
[*] 192.168.1.116's IPID sequence class: All zeros
[*] 192.168.1.109's IPID sequence class: Incremental!
[*] Scanned 128 of 256 hosts (050% complete)
[*] 192.168.1.154's IPID sequence class: Incremental!
[*] 192.168.1.155's IPID sequence class: Incremental!
```

通过这种方式，我们可以找到适合进行TCP空闲扫描的空闲主机。