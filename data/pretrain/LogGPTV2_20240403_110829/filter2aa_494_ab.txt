31, 23, 12, 0, 27, 4, 18, 30, 29, 24, 20, 5, 25]
pbox2 = [17, 6, 7, 27, 4, 20, 11, 22, 2, 19, 9, 24, 23, 31, 15, 10, 18, 28, 5, 
0, 16, 29, 25, 8, 3, 21, 30, 12, 14, 13, 1, 26]
def p(data,pbox):
    tmp = bin(data)[2:].rjust(32,'0')
    out = [ tmp[x] for x in pbox ]
    return int(''.join(out),2)
def encrypt(key,msg):
    tmp1 = p(msg^key,pbox1)
    tmp2 = p(tmp1^key,pbox2)
    return tmp2^key
def bruteforce(ranges):
    start, end = ranges
    for key in range(start, end):
能够得到4个key：1991722937, 2091272121, 1390799730, 1492446066
解密就完事了：
        if key % 10000000 == 0:
            print(key)
        if encrypt(key, 3972024911) == 3661089527:
            print("find: 1", key)
            if encrypt(key, 722713049) == 756849098:
                print("find: 2", key)
def main():
    CPU_CORE_NUM = 48
    with mp.Pool(CPU_CORE_NUM) as pool:
        reslist = pool.imap_unordered(bruteforce, [(i, i+89478487) for i in 
range(0, 2**32, 2**32//48)])
        for res in reslist:
            pool.wait()
if __name__ == "__main__":
    main()
from Crypto.Util.number import long_to_bytes
pbox1 = [22, 28, 2, 21, 3, 26, 6, 14, 7, 16, 15, 9, 17, 19, 8, 11, 10, 1, 13, 
31, 23, 12, 0, 27, 4, 18, 30, 29, 24, 20, 5, 25]
pbox2 = [17, 6, 7, 27, 4, 20, 11, 22, 2, 19, 9, 24, 23, 31, 15, 10, 18, 28, 5, 
0, 16, 29, 25, 8, 3, 21, 30, 12, 14, 13, 1, 26]
def inv_pbox(data, pbox):
    tmp = bin(data)[2:].rjust(32,'0')
    out = [tmp[pbox.index(i)] for i in range(32)]
    return int(''.join(out),2)
def dec(key, c):
    tmp1 = inv_pbox(c ^ key, pbox2)
    tmp2 = inv_pbox(tmp1 ^ key, pbox1)
    return tmp2 ^ key
enc_flag = [2670163133, 2168059145, 2670163133, 2168059145, 2640667901, 
1361473960, 4285198444, 1462920522, 1669035357, 1836344829, 292090312, 
1735062728, 2338346668]
keys = [1991722937, 2091272121, 1390799730, 1492446066]
for key in keys:
    plain = b""
    for enc in enc_flag:
        plain += long_to_bytes(dec(key, enc))
    print(plain)
# b'flag{843flag{843f4cf5-8edc-49e7-9fd2-7cb31840c10f}\x00\x00'
# b'flag{843flag{843f4cf5-8edc-49e7-9fd2-7cb31840c10f}\x00\x00'
# b'flag{843flag{843f4cf5-8edc-49e7-9fd2-7cb31840c10f}\x00\x00'
# b'flag{843flag{843f4cf5-8edc-49e7-9fd2-7cb31840c10f}\x00\x00'
Re
5G
# https://github.com/albusSimba/pyPolar/tree/master/polarcodes5G
from polarcodes5G import *
if __name__ == '__main__':
    snr = 4
    n = 1024
    k = n // 2
    myPC = Construct(n, k)
    myPC.llrs = 
np.array([-1.756208,1.027628,-0.952465,-1.638855,-1.462390,0.208588,0.591268,-0.
179454,1.095095,0.447900,0.947692,1.350273,-1.155633,-1.938154,0.046054,1.175568
,-0.007052,1.220866,1.890119,1.539061,0.677526,-0.493938,1.113000,1.148966,0.437
962,-1.025365,-1.001201,-0.274902,0.545109,-1.125495,-1.112381,0.214771,0.635569
,-1.382093,0.053726,-0.196021,1.320305,-1.337450,0.422620,0.553210,0.785358,-0.6
78043,-0.368721,1.188093,-0.338528,-1.537577,1.670443,-0.885858,0.070331,-1.2159
92,1.823989,-0.929618,-0.727060,2.505745,-1.036676,-0.280815,2.160959,1.733216,-
1.889883,-0.109916,1.367643,1.077257,1.312840,1.304816,1.097788,-0.926799,-1.469
581,0.996823,0.467300,1.904864,1.661034,0.435124,0.383811,-0.786075,-0.330117,1.
344677,1.444533,0.003463,-0.926323,-0.978224,-0.226969,1.102106,0.226237,-0.3843
20,-0.466343,-0.498517,1.842003,0.942432,-1.294573,1.018581,1.164019,-0.128555,0
.020977,-1.208346,-1.123887,-0.032598,-1.408865,0.524717,0.321672,0.852049,-1.98
8844,0.746240,-1.961841,1.564997,1.804899,-0.908426,0.896699,1.734691,-0.999090,
-0.642587,-0.406924,-1.165598,1.083971,-2.301489,1.351427,0.980320,0.417626,0.61
6401,1.134201,-0.563215,-0.877332,1.501646,0.681555,-1.702605,0.523019,-1.081125
,0.107362,2.058186,0.326459,-1.787194,1.086192,-1.055046,-1.685858,-0.930215,-0.
894009,-0.677912,0.511197,-1.098572,-0.788927,0.177513,2.140012,0.966361,0.86581
9,0.819131,-1.699320,1.568498,1.525463,-0.655758,-0.581384,-1.229248,2.183221,0.
335959,-2.642757,1.013924,-1.168649,-1.458181,-1.138616,1.700769,-0.382989,-1.72
6020,-1.532635,-0.541429,-0.968800,-0.192087,-0.507234,0.543382,1.457708,-0.0755
56,1.669304,-2.206753,-0.921022,0.900948,-0.924948,0.040101,0.633460,-1.306462,-
0.804734,0.755951,-0.342759,1.752969,-1.201860,0.799820,0.219841,3.060129,1.5517
59,1.246884,1.430198,1.411848,2.321447,-2.062636,0.958560,-0.646293,-0.980863,-0
.387100,2.045299,0.567460,-2.215653,-1.403319,0.556241,2.651569,0.292166,-0.6983
75,0.832029,-2.139115,2.283352,-1.264334,-2.478704,0.270772,-0.142261,1.136285,-
1.642062,2.994728,0.482550,-1.129786,1.177546,-0.834284,0.712862,1.140268,0.2384
46,0.362353,1.575962,-1.355559,-1.180508,1.677377,-2.135500,-2.669384,-1.522473,
0.875878,-1.008801,-0.618179,0.555532,-0.406354,-0.318404,-0.630576,1.610498,-0.
477984,0.164362,-0.830112,-1.618440,0.886848,-1.226787,-1.135281,-0.954352,-0.99
7209,1.752468,-1.700439,-1.117883,-1.989664,1.488250,-0.569408,-0.814622,-0.9165
72,1.091514,0.165200,-0.153607,2.313688,1.527322,0.994576,1.399933,0.158282,-0.1
25025,0.429315,0.516940,0.672170,1.749239,0.822672,1.568959,2.138455,-2.220479,-
0.936637,-0.634800,0.167569,-0.665847,-1.437416,-1.280923,-0.400447,1.498225,1.0
53262,-0.320818,-1.868225,-1.496732,-0.201518,0.034030,-1.689186,0.614880,0.4277
27,-1.621376,-0.546353,-0.321909,-0.611334,-0.587016,-2.244846,-0.323138,-2.0808
39,-0.953925,2.650594,-0.162808,-1.376487,-0.924629,-1.691688,0.856848,1.097273,
-1.544046,-0.646544,0.317479,-1.250199,-1.017597,1.060770,2.751512,-1.258838,-1.
488311,-1.143038,-1.744919,1.170522,0.839760,1.910438,0.995595,-0.787186,1.42375
3,-0.880153,0.862203,-1.500974,-1.260939,-1.803650,0.943106,-1.368411,1.251217,-
0.557028,0.652139,-0.203996,1.187680,-0.416745,0.581558,-2.265760,-0.474873,0.08
0722,0.446179,-0.639327,-1.647740,-0.858419,-1.402387,-1.525324,1.104080,-1.6400
21,-0.647639,0.401717,-0.708741,1.263550,-0.275298,-2.248850,-0.774760,-0.636558
,0.562457,0.608792,-1.490242,1.013421,0.278254,-0.781737,1.277366,-0.138126,-1.1
45646,-1.050219,0.291015,0.928961,0.018285,1.004116,2.008026,1.663652,0.840205,1
.424996,0.025048,-0.621860,-0.606348,-0.535632,1.306148,-0.050246,0.503134,0.975
046,1.150712,0.578937,0.213607,-1.477498,-0.974311,-0.985866,1.014662,-0.377609,
-0.888818,-0.157905,-0.662982,-0.023800,-1.711486,-0.533030,0.483448,1.421968,-2
.673275,1.159374,-0.940826,-0.491770,0.951219,-0.416862,2.044601,-1.385406,1.740
491,0.929469,1.990168,0.754986,0.493125,0.315357,2.287613,0.947665,0.981003,-0.0
81702,1.255644,-0.777866,0.239122,1.275812,-0.636307,-0.966732,-1.012288,-0.5020
24,-0.879887,0.827306,-1.783475,-0.860583,0.353817,0.168019,-1.668560,0.639837,-
0.569348,0.387230,-1.952601,-0.039584,1.421421,0.157275,-0.895116,0.686452,-0.13
2425,-1.078567,1.616315,0.187555,-1.789372,1.171706,-0.989204,1.267153,0.731109,
1.130974,1.013797,-1.417835,-0.366101,0.438512,0.175359,0.853008,1.330899,1.3720
95,-0.052560,1.212500,0.748895,-0.449058,0.549911,0.182876,0.442336,1.084044,-1.
253650,-1.216360,2.299248,0.949407,0.956618,-1.152720,1.548854,-1.217456,-0.6026
14,-1.319584,-1.529696,1.540484,0.085620,-0.259641,-1.169200,-1.316670,1.516454,
1.483575,-1.333522,-0.343909,2.483338,1.936281,1.029471,0.360799,1.331956,-1.821
326,1.351405,-1.601415,0.524290,1.610703,1.691951,0.163450,-1.426074,1.286014,1.
070039,-1.825795,0.345390,0.219903,0.242906,-2.677871,0.952509,0.676549,-1.49237
0,1.547383,0.842538,0.608756,1.544244,0.872889,1.056120,-0.815245,0.111029,1.119
361,1.297144,-0.816438,1.573819,-0.848893,-2.928262,1.679499,1.159596,1.162540,-
1.863993,-1.254509,0.235468,-1.995178,0.604137,0.418380,0.708372,-1.183634,-0.97
1074,-1.223639,-0.919511,1.732817,-1.438610,1.545408,0.773104,-0.665660,-2.85787
4,1.415942,0.318007,-1.460877,1.478659,1.770448,0.975247,-0.079748,0.294747,0.43
9699,-0.877530,-1.121686,-1.710442,-0.498951,-1.236182,1.044201,-0.663160,1.0558