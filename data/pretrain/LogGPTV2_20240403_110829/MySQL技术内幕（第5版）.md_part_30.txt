--------
一
red
tan
green
blue
1k
200
100
---
## Page 127
此外，表t3有两个行包含'2004-01-01‘和200，而其中的一个也被剔除了。
最后的结果都是一个字符串列。
第一个列选取的类型是整数和日期，而第二个列选取的类型是字符串和整数。对于这两种情况，
里
回不同结果的原因，尽管它们从两个表里查询到的是相同的值：
会进行必要的类型转换。）列是根据位置，而不是根据名字来匹配。这也正是下面两条语句会返
如果你想保留重复的行，则需要把所有的UNION改为UNIONALL：
UNIONDISTINCT是UNION的同义词，它们都只会保留不同的行。
表t1和t2都有一个行包含的值是1和'red"，
（2）重复行处理。在默认情况下，UNION会将结果集里的重复行剔除掉：
我们为第二个列选取的类型是字符串和日期。而结果是一个字符串列。在第二条语句里，
在各条语句的结果里，
mySql> SELECT i, c FROM t1 UNION SELECT d, i FROM t3;
mySql> SELECT i,C FROM t1 UNION SELECT i,d FROM t3;
2004-01-01
2004-01-01
1904-01-01
2
一
i
2004-01-01
1904-01-01
2004-01-01
1904-01-01
m
i
i
-1
2001
100
2
2004-01-01
1904-01-01
green
blue
red
01
200
200
100
red
red
100
red
green
blue
200
100
tan
green
red
0
200
blue
，每一列的数据类型都是根据所选值的类型来确定的。在第一条语句
，但在输出结果里只存在一行这样的记录。
2.10使用UNION实现多表检索
107
---
## Page 128
操作。这些类型的语句都会大量用到那些用于连接操作的概念，因此你一定要熟悉前面 2.8节
用一个表里的内容去更新另一个表。本节将讨论如何完成涉及多个表的 DELETE 操作和UPDATE
2.11
将作用于哪些行。此时，它不会影响 UNION 的最终结果行的先后顺序。
SELECT语句起作用：
形式指定的列来进行排序，那么必须为此列取一个别名，并在ORDERBY子句里引用此别名。
而不能引用最后那个SELECT语句里的列名：
句。因为UNION会使用第一个 SELECT语句里的列名，所以ORDER BY子句必须引用那些名字，
作都会比其左边的所有UNION ALL 操作获得更高的优先级。
108
有时，需要根据某些行是否与另一个表里的行相匹配来删除它们。类似地，也可能需要使
在用括号括起来的单个 SELECT语句里，ORDERBY只能与LIMIT一起使用，用以确定LIMIT
类似地，如果想要限制UNION所返回行的数量，那么可以在语句末尾加上LIMIT子句：
如果某个排序列是别名，那么在UNION 末尾的ORDER BY子句必须引用这个别名。此外，
(3）ORDERBY和LIMIT处理。
如果把 UNION或 UNION DISTINCT 与 UNION ALL 混合使用，那么所有的“不同联合”操
mySql>(SELECT *FROM t1 ORDER BY i LIMIT 2)
mySql>(SELECT i, c FROM t1) UNION (SELECT i, d FROM t3)
2004-01-011
1904-01-01
10011904-01-01
多表删除和更新
200
第2章使用SQL管理数据
->LIMIT 2;
->ORDER BY C;
V
3
L
UNION
TC
blue
red
blue
red
green
2004-01-01
(SELECT
200
blue
red
C
FROMt2
。如果想将UNION 结果作为一个整体进行排序，那么需要用
ORDER BYj
LIMIT 1)
---
## Page 129
使用多表UPDATE语句，可以做到这一点，如下所示：
准答案弄错了，所以才会出现那样的情况。
23日对学生进行的一次测验中，有一道题，所有学生都没有答对，后来你却发现是因为你把标
很相似。即同样需要列出所有涉及的表，同样需要用表名来限定列名。假设你在2012年9月
种语法，可以将前面那几条多表DELETE语句改写成下面这个样子：
删除行的表；并使用一个USING子句来连接这些表，从而确定出哪些行是需要删除的。采用这
例如，想要从表t1里把在表t2中没有匹配的行找出来，那么可以编写下面这样的SELECT
表里不匹配行的 SELECT 语句时所采用的方法。也就是说，使用LEFT JOIN 或者 RIGHT JOIN。
意一种SELECT语句支持的连接操作，因此，按照相同的策略，同样可以使用在编写查找多个
相匹配的行都删掉，那么必须在DELETE关键字的后面写出这两个表的名字：
加以限定。
一个表t2里找到的所有行全部删掉：
匹配表中各行的检索条件写在WHERE子句里。下面这条语句，将从表t1里把其id值可以在另
找到(或者不在这个表里)，该怎么做呢？
来删除它们，那该怎么办呢？假设要从表t里删除这样一些行，其id值可以在另一个表t2里
来限定列名。例如，下面这条语句会将表t里的id值大于100 的所有行删除掉：
里讨论过的那些内容。
DELETE语句还支持一种语法，可以一次性删除多个表里的行。
在编写涉及多表的DELETE语句时，需要把所有涉及的表全部列在FROM子句里，并把用来
要完成单个表的 DELETE 和 UPDATE 操作，只需要引用一个表的列即可，并不需要使用表名
但其他情况的更新操作则不能使用子查询来改写。例如，你不仅想要根据另外一个表的内
WHERE event_id = (SELECT event_id FROM grade_event
对于这个问题，使用单表更新和子查询同样可以达到目的：
WHERE score.event_id= grade_event.event_id
那些编写
DELETE FROM
MySQL还支持另一种多表DELETE 语法。这种语法会使用一个FROM子句，列出那些需要
同样地，从表t1找出并删除那些行的 DELETE 语句，也要用到LEFT JOIN操作：
SELECT t1.* FROM t1 LEFT JOIN t2 ON t1.id= t2.id WHERE t2.id IS NULL;
如果想要删除不匹配的行，又该怎么办呢？在涉及多个表的 DELETE语句里，可以使用任
DELETE t1, t2 FROM t1 INNER JOIN t2 ON t1.id = t2.id;
请注意，如果某个列名出现在多个表里，则可能导致歧义问题，这时必须用表的名字对它
DELETE t1 FROM t1 INNER JOIN t2 ON t1.id = t2.id;
如果需要根据一个表里的行与另一个表里的行之间的关系，而不是根据它们自身的特性，
UPDATE score SET score = score + 1
DELETE FROM
DELETE FROM t WHERE id> 100;
DELETEFROMt
写多个表的UPDATE语句所涉及的原则，与编写多个表的DELETE语句所涉及的原则
t1 USING t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;
t1 USING t1 INNER JOIN t2 ON t1.id =t2.id;
。于是，你决定为每位学生的考试成绩都加上1分。
score.score+1
2.11
。如果要从两个表里把id值
多表删除和更新
109
---
## Page 130
互干扰。事务把多条语句定义为一个执行单位，便可以防止在多客户端环境里可能会发生的并
改。MySQL在执行每一条SQL语句时，会自动对该语句所涉及的资源进行锁定，以避免各个
不用担心那些未能完全成功执行的事务会损害到数据库的完整性。）
（你可能还需要确定出哪些事务不能再输入，以及哪些事务需要再次执行。但不管怎样，你至少
你正确地处理好这样的状况，只需把发生错误之前已经执行完的语句所产生的效果还原即可。
都有哪些操作正在进行，从而确定出要如何还原或继续完成这些操作。事务的回滚功能可以让
确。如果没有使用事务机制，那么你将不得不以手动方式分析你的日志，以便查明在出故障时
户金额没增加；或者Bob的账户多了100美元，而Bill的账户金额没减少。这两种情况都不正
执行时的具体顺序不同，可能出现这样一些情况：Bill的账户可能少了100美元，而Bob的账
存款：
现这个支票。这时，Bill的账户里就应该减少100美元，而Bob的账户则应该增加相同数量的
是一个涉及事务处理的典型例子。
数据库处于部分更新的（不一致）状态。财务转账，即把钱从一个账户转移到另一个账户，
事务开始执行之前的那个状态。
滚操作取消该事务。在事务里，所有在出错之前执行的语句都将被还原；而数据库也会恢复到
可以把它提交到数据库永久性地记录下来。如果在事务执行过程中发生了错误，则可以通过回
并非所有的语句每次都能执行成功，也可能它们都没什么影响。事务处理是通过使用提
2.12
ON UPDATE CASCADE。更多详细信息请参考 2.13节。
好的办法是，在这些表之间建立一个外键关系，并让它包含约束条件ON DELETECASCADE
可以把id列值相匹配的各行从t1.a列复制到t2.a列：
容来标识需要更新的那些行，而且还想要把另一个表的列值复制到这个表里来。下面这条语句
(独立性）和Durable（持久性）。对各个特性的具体描述如下。
发问是
为有些
（commit）和回滚（rollback）功能来实现的。如果某个事务里的所有语句都成功执行，那么你
110
事务系统通常具有“ACID”的四种特性，即Atomic（原子性）、Consistent（一致性）、Isolated
提交和回滚所提供的功能，能够确保尚未全部完成的操作不会影响到数据库，而且不会让
事务（transaction）指的是一组 SQL语句，它们是一个执行单位，且在必要时还可以取消。
如果要对InnoDB类型的表进行多表删除和更新操作，那么可以不使用刚才介绍的语法。
UPDATE t1, t2 SET t2.a = t1.a WHERE t2.id= t1.id;
口一致性。数据库在事务的执行前后都必须是一致的。例如，对于在某个表里的各行，其
口原子性。构成事务的所有语句应该是一个独立的逻辑单元。你不能只执行它们当中的一
题。
些数据库操作需要多条语句才能完成。在这种情况下，不同的客户端之间就有可能出现相
端之间相互干扰。但这仍不足以保证每一个数据库操作都总是能够得到其预想的结果，因
事务的另一个用途是，确保某个操作所涉及的行不会在你正在使用它们时被其他客户端修
如果在执行这两条语句时正好发生了故障，那么这个操作就不能算完成。
UPDATE account
UPDATE account SET balance =
失败，然后会执行回滚操作。
ID 必须能在另外一个表里找到；否则，一个事务在试图插入带有无效ID的行时会出现
部分。
第2章使用SQL管理数据
事务处理
balance-100 WHERE name=
'Bill';
。根据这些语句
或
在
便
交
更
---
## Page 131
COMMIT语句之前，对第二个mysql进程来说是不可见的。
最后来看看表变成了什么样子：
开始下一个事务。
的，那么事务结束时还会回到自动提交模式。如果它原来是禁用的，那么在结束当前事务时会
该模式又会恢复到执行STARTTRANSACTION之前的那个状态。如果自动提交模式原来是启用
的更改。STARTTRANSACTION语句会挂起当前的自动提交模式，因此在事务被提交或回滚之后，
所有修改持久化。如果在事务处理过程中发生错误，那么可以调用 ROLLBACK 语句来撤销所有
提交模式；接着，再执行构成本次事务的各条语句；最后，用COMMIT语句结束事务，从而让
滚更改。
要显式地执行事务，那么需要禁用自动提交模式，并主动告知MySQL何时提交更改或何时回
库，并永久保存下来。事实上，这相当于每条语句都被隐式地当作了一个事务来执行。如果想
请参考2.6.1.1节。
MEMORY这样的存储引擎就不行。如果不太清楚自己的MySQL服务器是否支持事务存储引擎
2.12.1
产生的额外开销。
行记录，这是可以接受的。在这种情况下，使用非事务存储引擎则可以避免因事务处理所需而
面，对于需要将网页的访问情况记录到数据库表的应用，在服务器主机崩溃时会损失少量的几
业务通常需要事务，并且对保证数据完整性的需求远大于对额外开销所占成本的顾虑。另一方
不可少的，但对于其他应用来说则没那么重要。你可以根据自己的具体情况来进行选择。金融
InnoDB），有的则不是（如MyISAM和MEMORY）。事务的这四个特性对于有些应用来说是必