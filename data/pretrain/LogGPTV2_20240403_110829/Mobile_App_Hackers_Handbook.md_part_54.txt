include an application’s downloading a JavaScript file and executing it, for example. Notably, this sort of
behavior is allowed in iOS apps, for example, but not in WP8.x apps at the present time.
Although Windows Phone 8 and 8.1 fully support native code applications (such as C, C++), restrictions are
imposed on the use of native-like features in C# applications. In particular, Store applications are not allowed to
contain “unsafe” code, meaning code that uses the unsafe and fixed keywords to deal ‘directly’ with pointers.
Microsoft also forbids calling into certain (but not all) Win32 APIs via C#’s P/Invoke interface, presumably for
security reasons. See http://msdn .microsoft.com/en-us/library/windowsphone/develop/jj207198(v=vs.105)
.aspx for an exhaustive list of “allowed” APIs for invocation via P/Invoke.
Despite such restrictions on use of native code and features by managed apps (such as C#), rather interestingly
there are technically no restrictions on the use of APIs such as strcpy(), *sprintf(), strcat(), and so on.
Although the use of potentially unsafe APIs may be flagged as errors by Visual Studio, such deprecation errors
can be disabled, and Microsoft has not explicitly banned dangerous API usage in WP native apps at this time.
Equally, as with iOS apps, for example, behavior such as storing the user’s app password in cleartext is not
actually prohibited, despite its being a bad security practice. In this sense, although the Store does vet for certain
insecurities, the Store’s vetting process could be considered more of a screening for deliberate malware than for
apps that are poorly written from a security perspective. The vetting process aims to catch attempts to engage in
disallowed activity, but the process does not have heavy emphasis on preventing an app from being insecure in
itself.
A notable difference in the submission procedure for WP8.1 apps versus WP8 apps is that APPX packages must
pass the tests in the Windows App Certification Kit (WACK). This includes several security-related tests
including BinScope binary analyzer tests, which test for the presence of security-related binary protections such
as Address Space Layout Randomization (ASLR). Security checks that must pass for WP8.1 certification are
available on MSDN (http://msdn.microsoft.com/en-
us/library/windowsphone/develop/dn629257.aspx#background_security).
To conclude this discussion of submission processes, it’s worth discussing and considering how successful
Microsoft’s procedures and policies are at keeping malicious apps out of the Store in comparison to other
mobile operating systems. As of May 2014, information on confirmed cases of malware is scarce. Based on
Windows Phone 8’s initial release date, around October 2012, we could conclude that this is a good track record.
This number fares slightly better than iOS, and very similarly to BlackBerry; both of these platforms also have
proper submission vetting processes.
This number is also in stark comparison to Android, where some sources estimate that around 97% of mobile
malware is targeted at the Android platform (http://www.forbes.com/sites/gordonkelly/2014/03/24/report-
97-of-mobile-malware-is-on-android-this-is-the-easy-way-you-stay-safe/). This statistic presents little
surprise when one considers that the Google Play Store (formerly Marketplace) does not have genuine approval
procedures.
Somewhat similarly, there have been several high profile malware outbreaks that have targeted jailbroken iOS
devices in recent years. There are no comparable incidents that concerned Windows Phone devices, though
absence of evidence does not constitute evidence of absence.
In addition to security requirements for certification a whole host of other non-security related dos and don’ts
exist, many of which revolve around performance and management of the app’s resources, and not impeding the
owner’s normal usage of the phone. For the interested reader a full list of certification requirements for
Windows Phone 8/8.1 applications is available on MSDN at http://msdn.microsoft.com/en-
us/library/windowsphone/develop/hh184844(v=vs.105).aspx.
Exploring Exploit Mitigation Features
Similarly to most modern operating systems, the Windows Phone 8 and 8.1 platforms both feature a number of
exploit mitigation technologies. Such technologies aim to raise the difficulty associated with exploiting memory
corruption vulnerabilities. The days of simply overwriting a return address or Structured Exception Handler
(SHE) entry in a stack overflow are all but gone, as are the days of exploiting the “write-what-where” primitive
in a classic safe unlinking heap overflow.
Exploit mitigation features are present not only to stop buggy apps from being exploited, but also to try to
prevent apps (such as malware and community home brew apps) from exploiting vulnerabilities in the
underlying OS and kernel to carry out “jailbreak”-like attacks.
This section briefly discusses the portfolio of exploit mitigation features present in WP8 and 8.1, some details
on how they work, and techniques that are used to sometimes bypass or overcome the protections each
technology aims to provide. These discussions are only applicable to native code, because managed code is
generally immune to memory corruption bugs in the traditional sense.
Bear in mind, however, that some Windows Phone 8 and 8.1 applications are written in a managed language but
also call into native code modules. Consider a C# application, for example, that calls into native code via the
P/Invoke interface.
Later this section also covers how you can check whether third-party applications have these mitigation features
enabled on their binaries for when you are carrying out security assessments; see “Analyzing Application
Binaries” later in this chapter.
Stack Canaries
Stack canaries, also known as stack cookies, are random values that are placed prior to critical data such as stack
metadata (for example, return addresses). When the executing function returns, the value is checked to see
whether it matches the expected value. If it does, the program execution continues, and if it does not, it has
clearly been overwritten at some point during the function’s execution, and the application terminates
immediately.
Stack canaries are placed between the last local stack variable and the padding that precedes the saved frame
pointer (SFP). Figure 10.2 demonstrates the setup.
Figure 10.2 Stack frame with cookies
Clearly, if a stack overrun occurs (such as via an unsafe strcpy() call), and the stack buffer’s bounds are
breached, the cookie value will be overwritten, and the cookie check prior to function return will inevitably
result in program termination, unless the attacker was extremely lucky and managed to guess the correct cookie
value.
Stack cookie protection is enabled via the /GS compiler flag. This option was first introduced in Visual Studio
2002, and is on by default, thus there is no need to manually enable it when compiling applications.
Although stack canary technology protects against traditional stack overflow exploitation techniques, the
feature, in principle, wouldn’t guard against consequences of an overflow that may be exploitable before the
application terminates. For example, an important pointer may be overwritten and written to before the cookie
check happens. In practice, however, /GS may also do variable reordering, precisely for the purpose of trying to
prevent important pointers and variables from being overwritten and the protections being ineffective.
Address Space Layout Randomization
Address Space Layout Randomization (ASLR) is an exploit mitigation feature that revolves around randomizing
the memory location of a process’s image and its various loaded DLL modules. That is to say, the base address of
an application or loaded module will not stay constant between runs or loads, respectively.
The whole purpose of ASLR is to make accurately predicting the layout and overall structure of memory within a
process very difficult for attackers. The value of doing this, though, is made apparent by considering how several
classes of memory corruption vulnerabilities were traditionally exploited.
Take stack-based buffer overflows as an example. Before the advent of ASLR in highly targeted applications,
exploit writers most often overwrote a stack frame’s return address with a hard-coded, predetermined address.
The nature of the data at this address generally varies by the operating system being exploited. Most exploits for
UNIX-like systems overwrite the return address in question with the location of their shellcode on the stack, or
the address of a library function (so-called return-to-libc).
The majority of Windows exploits writers tended to overwrite return addresses with the location of a CALL ESP
or JMP ESP instruction for which they had predetermined the address on particular versions of Windows.
In both cases, return addresses (or function pointers) were overwritten with addresses that were known to be
stable; hence, exploits had a good chance of succeeding even though the overwrite address was hard-coded.
However, with the introduction of ASLR into mainstream OSes, exploitation techniques have necessarily
changed somewhat. When an application has ASLR enabled on its binary, attempts to redirect execution flow
into stack-based shellcode via a hard-coded address is likely to fail, because the location in memory of the stack
buffer in question will be randomized, and guessing it would be potluck.
In Windows exploits, where an attacker would often hardcode a return address that pointed to JMP ESP or CALL
ESP instructions in KERNEL32.DLL (for example), such an attack would be hard to use with ASLR, because the
location of the function containing the JMP ESP or other desired instruction would no longer be stable or even
predictable.
Although this would appear to be a solid and unforgiving mitigation against fairly trivial memory corruption
exploits, adoption problems have limited its range of effectiveness in the past.
When ASLR was introduced in Windows Vista Beta 2 (circa mid-2006), only Microsoft applications had ASLR
support compiled into them, and this included applications and DLL modules. Software written by third-party
developers had to opt into ASLR, by choosing to compile support into their binaries. So, if a hacker were trying
to write an exploit for a stack overflow in Microsoft Office, the location of his previously predictable JMP ESP (or
whatever) instruction was now randomized, and his job as an exploit writer became somewhat more difficult.
In third-party software on the other hand, where ASLR was frequently not compiled in, the exploit writer’s job
was often just as easy as before ASLR was even introduced into Windows. Applications and their modules would
be loaded at their preferred, stable base address, and an attacker’s exploit methodology would remain the same
as before.
Since then, however, Microsoft has standardized ASLR’s adoption of third-party native applications. Indeed,
Visual Studio now enables ASLR’s compiler flag, /DYNAMICBASE, by default, and a developer would have to
deliberately disable it for the distributed binary to be unprotected (and there are legitimate reasons for doing
so). Moreover, since a certain Windows 7 update, there has been a feature known as “Force ASLR,” which
applications can opt into to ask the kernel to load modules at randomized addresses even when they have been
built with the /DYNAMICBASE flag. These features are also common to the more recent Microsoft mobile operating
systems, WP8 and WP8.1.
This is definitely good news from a security perspective and means that native applications in Windows Phone 8
and 8.1 are likely to be in good shape in regard to thwarting the use of stable memory addresses in exploits.
That’s not to say that ASLR is perfect and can’t be effectively bypassed (for example, using pointer leaks or heap
spraying/JIT spraying), but its implementation in Windows 8.x operating systems has seen various
improvements since its introduction in Windows Vista, and as such, its use in WP8 and WP8 native applications
by default (in Visual Studio compilation options) definitely makes exploitation efforts a bit harder from the
attacker’s perspective. WP8.1 native modules must have ASLR enabled on binaries to pass the certification
process (see http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh184844(v=vs.105).aspx).
Data Execution Prevention
Data Execution Prevention, known commonly as DEP, is an exploit mitigation feature whose job it is to prevent
the processor from executing code that resides in memory regions known to contain data rather than code.
This is a desirable thing, because many exploits rely on redirecting program execution flow into shellcode that
resides in stack or heap buffers. It is intuitively quite obvious that legitimate executable code should not reside
in stack and heap memory regions (among others), because these memory areas are intended for application
data. Hence, no good reason exists to allow code execution in these areas. This is the concept behind DEP:
preventing code execution in memory spaces that are known to house data rather than code.
DEP is not exclusively a compiler-based and kernel-based option; its enforcement relies on CPU support as well.
With binaries that are compiled for x86 processors, the /NXCOMPAT flag informs the kernel to enforce DEP on the
app if the host CPU supports the no-execute page-protection feature—No eXecute (NX) on AMD, and the
Execute Disable Bit (XD) on Intel. In the context of Windows Phone 8 and 8.1 devices, whose processors are
either ARMv6 or ARMv7, this bit is known as XN—eXecute Never.
When running on 64-bit architectures, the /NXCOMPAT flag has no effect; all applications run with DEP enabled,
unless the app is running in WOW64 mode—Windows 32-bit on Windows 64-bit, as documented by the Visual
C++ team (http://blogs.msdn.com/b/vcblog/archive/2009/05/21/dynamicbase-and-nxcompat.aspx).
Because DEP generally prevents immediate execution of shellcode given that it usually resides in pages with the
NX or XD flags enabled, exploit writers have had to employ alternative routes to achieve meaningful code
execution.
The methods most often used revolve around reusing code fragments that are already loaded into memory and
reside in pages that do not have NX/XD/XN flags enabled on them. This is known as Return-Oriented
Programming (ROP), and the basis of this method involves chaining together small fragments of already-
present code (known as ROP gadgets) until a useful task has been carried out. Some ROP chains are skillfully
constructed (or via a tool such as ROPGadget; see http://shell-storm.org/project/ROPgadget/) to make up
complete shellcode-like instruction chains, whereas some result in a call to VirtualProtect() to remove the
NX/XD bit from the page(s) containing the attacker’s shellcode, which will then be jumped into and executed,
thereby bypassing DEP’s protection.
The ROP technique relies on non-ASLR modules being loaded into the process being exploited to use a source of
ROP gadgets, but as noted earlier, this has been commonplace with third-party applications.
At present, OEM-supplied Windows Phone hardware is ARMv6- and ARMv7-based, and therefore 32-bit
architectures. Visual Studio enables the /NXCOMPAT compiler flag by default, thus third-party WP8 applications
are likely to be built with DEP enabled. WP8.1 must necessarily be compiled with DEP enabled, as per
Microsoft’s Store certification requirements for Windows Phone 8.1 apps (as per
http://msdn.microsoft.com/en-us/library/windowsphone/develop/dn629257.aspx).
The likely presence of DEP, especially when combined with ASLR, is a positive thing for WP security and adds
another level of difficulty to real-world exploitation on the platform.
Safe Structured Exception Handling
When Microsoft introduced stack cookie protection into its compiler (via the /GS flag) in 2003, it soon became
clear that the standard return address overwrite was no longer going to be reliable as a stack overrun
exploitation method.
The core of the technique revolved around overwriting structured exception handling (SEH) metadata, and then
causing an exception to be thrown. Each thread in a process has at least one SEH record on its stack; each
exception handler is represented by an EXCEPTION_REGISTRATION_RECORD structure, which consisted of a “Next”
pointer and a function pointer to an exception handler. Figure 10.3 represents this concept graphically.
Figure 10.3: SEH chain
Because EXCEPTION_REGISTRATION_RECORD structures are also located on the stack, along with the overflowable
stack buffer, the idea was to overflow the susceptible buffer and keep overwriting until an
EXCEPTION_REGISTRATION_RECORD structure was reached, which would be at some pointer further down the stack.
The function pointer in the EXCEPTION_REGISTRATION_RECORD would then be overwritten with a value of the
attacker’s choice. The attacker would then have to cause an exception to be thrown; a popular way to do this was
to keep writing data until a guard page at the end of the stack was hit, causing a write access violation. The
exception dispatcher would enumerate the list of exception handlers for the thread, and as a result the
overwritten function pointer would be called into, giving execution flow control to the attacker.
This lead to Microsoft’s introducing the Safe Structured Exception Handling (SafeSEH) functionality into Visual
Studio 2003, via the /SAFESEH compiler flag. This exploit mitigation flag prevents the simple technique just
summarized from succeeding by inserting code (at compile time) that validates that each SEH handler is found
in a table of known exception handlers before being executed. Due to peculiarities in the protection, however,
overwritten exception handlers will still be called if they do not point into the stack, and do not point into the
memory space of a loaded module.
David Litchfield published a paper (available at http://www.blackhat.com/presentations/bh-asia-03/bh-asia-
03-litchfield.pdf) soon after the introduction of /SAFESEH documenting a generic method for its bypass. The
solution was to find a suitable instruction on the heap to overwrite the EXCEPTION_REGISTRATION_RECORD
function pointer that would, with details omitted for brevity, cause execution to end up in the attacker’s
shellcode.
Given /SAFESEH’s shortcomings, an accompanying exploit mitigation was introduced to further protect against
SEH exploitation: SEHOP, which stands for Structured Exception Handling Overwrite Protection. SEHOP
places a cookie at the end of the SEH chain, and then verifies that no EXCEPTION_REGISTRATION_RECORDs have
been modified by walking the chain and verifying that the cookie is the value expected. If this chain validation
and cookie check fail, the exception handler is not allowed to execute. This works because each
EXCEPTION_REGISTRATION_RECORD’s Next pointer is situated in front of its function pointer, meaning that any
overwrite of the structure trashes the Next pointer and the SEH chain is broken. Coupled with ASLR, guessing
the correct Next pointer value could prove very difficult. No bypasses are known for SEHOP at the time of
writing.
/SAFESEH is enabled by default in all versions of Visual Studio that are used to compile WP apps, and SEHOP is
also implemented in WP8 and 8.1.
In addition, WP8.1 native applications must be built with /SAFESEH to pass the Store certification requirements,
see http://msdn.microsoft.com/en-us/library/windowsphone/develop/dn629257.aspx.
Userland Heap Safe Unlinking
Prior to Windows XP SP2 (2004) and Windows 2003, heap overflow vulnerabilities were most often exploited
by taking advantage of the unsafe unlinking by tactically overwriting doubly linked list back and forward
pointers in an adjacent chunk’s metadata. This general method offered a powerful “write-what-where”
exploitation primitive.
Since then, the various versions of Windows have seen progressive improvements to their heap manager
implementations to the point where the comparatively simple heap overflow exploitation techniques from
several years ago are no longer applicable in the more recent versions of Windows, except perhaps in custom
heap manager implementations.
There are known exploitation techniques against the Windows 8 (and by extension, Windows Phone 8) heap
manager, as discovered and presented by Chris Valasek and Tarjei Mandt (paper available at
http://illmatics.com/Windows%208%20Heap%20Internals.pdf), though these are understood to be non-trivial
and the protection offered by Windows 8’s heap manager is far and away superior to those of yesteryear.
The heap manager in Windows 8.1 (and Windows Phone 8.1) addresses at least one of Valasek’s and Mandt’s
techniques (according to http://blogs .technet.com/b/srd/archive/2013/10/29/software-defense-
mitigation-heap-corruption-vulnerabilities.aspx), and further hardens the userland heap against successful
attacks.
Mitigations in Kernel Space
Although an in-depth discussion on kernel exploit mitigations in Windows Phone 8 and 8.1 is beyond the scope
of this book, it’s worth mentioning briefly that the 8 and 8.1 operating systems actually implement equivalent
exploitation mitigation technologies that we’ve already discussed for protection against kernel space
exploitation as well. There are also some protection features that are unique to the kernel, and in fact, the
Windows 8 kernel.
Several of the anti-exploit features present in the WP8 and WP8.1 kernels are:
NX (for non-paged pools)
ASLR
Stack cookies
Kernel heap (pool) integrity checks
NULL pointer dereference protection
Understanding Windows Phone 8.x Applications
We’ve discussed the security model and features of the WP8 and 8.1 platform; now let’s look at some of the
details of how applications are developed, the language options available to developers, how apps are distributed
and installed, and how you as the reader can take advantage of these aspects in helping with analysis and
security testing of WP8 and 8.1 third-party software.
Application Packages
On Windows 7 and Windows 8, XAP packages are the standard means of distributing the installing applications.
An XAP file generally contains all the files required by the application for installation and operation, including
its code in binary or .NET assembly form (DLLs), its resources (images, sound files, etc.), and the manifest file
(WMAppManifest.xml and/or Package.appxmanifest), among other possible files. Although Windows Phone 7 and
Windows Phone 8.x both use XAP files, they are not completely compatible across the two OS versions; a
Windows Phone 7 XAP can be installed on Windows Phone 8.x, but a Windows Phone 8.x XAP cannot be
installed on Windows Phone 7. XAP files are backward compatible.
Similarly to the distribution packages of other mobile platforms such as iOS (IPA) and Android (APK), XAP files
are fundamentally zip files.
With the initial releases of Windows Phone 8.1, Microsoft has introduced the APPX package format, exclusively,
however, for Windows Phone 8.1 and not Windows Phone 8. Although APPX is WP8.1’s preferred package
format, WP8.1 is backward compatible and can install XAP packages intended for WP8.
Unzipping XAP and APPX files that have been downloaded from the Store is no trivial task, however, because
they are DRM protected, and therefore encrypted. XAP and APPX files that are not Microsoft signed and DRMed
can be unzipped and their contents inspected, including the application’s binaries themselves. (See Figure 10.4.)
Figure 10.4 Unzipped non-Store XAP package
The introduction of a package format just for WP8.1 and later, APPX, is due to the addition of new features in
WP8.1 that are simply not available in WP8 (such as new APIs) but also to standardize package distribution
between Windows Phone and standard Windows.
Programming Languages and Types of Applications
The Windows Phone 8 and 8.1 platforms support multiple programming languages as standard—and more. In
fact, than all the other mainstream mobile OSes. Developers have the choice between using native code and
writing their applications in managed languages.
The majority of applications can be placed in at least one of the following general categories:
Standard applications