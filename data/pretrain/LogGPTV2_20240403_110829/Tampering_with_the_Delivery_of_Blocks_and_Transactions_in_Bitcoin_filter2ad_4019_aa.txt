title:Tampering with the Delivery of Blocks and Transactions in Bitcoin
author:Arthur Gervais and
Hubert Ritzdorf and
Ghassan O. Karame and
Srdjan Capkun
Tampering with the Delivery of Blocks and Transactions
in Bitcoin
Arthur Gervais
ETH Zurich, Switzerland
PI:EMAIL
Ghassan O. Karame
NEC Laboratories, Europe
PI:EMAIL
Hubert Ritzdorf
ETH Zurich, Switzerland
PI:EMAIL
Srdjan ˇCapkun
ETH Zurich, Switzerland
PI:EMAIL
ABSTRACT
Given the increasing adoption of Bitcoin, the number of
transactions and the block sizes within the system are only
expected to increase. To sustain its correct operation in
spite of its ever-increasing use, Bitcoin implements a number
of necessary optimizations and scalability measures. These
measures limit the amount of information broadcast in the
system to the minimum necessary.
In this paper, we show that current scalability measures
adopted by Bitcoin come at odds with the security of the
system. More speciﬁcally, we show that an adversary can
exploit these measures in order to eﬀectively delay the prop-
agation of transactions and blocks to speciﬁc nodes for a con-
siderable amount of time—without causing a network par-
titioning in the system. Notice that this attack alters the
information received by Bitcoin nodes, and modiﬁes their
views of the ledger state. Namely, we show that this allows
the adversary to considerably increase its mining advantage
in the network, and to double-spend transactions in spite of
the current countermeasures adopted by Bitcoin. Based on
our results, we propose a number of countermeasures in or-
der to enhance the security of Bitcoin without deteriorating
its scalability.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General
– Security and protection.
Keywords
Bitcoin; Preventing object delivery; Countermeasures.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813655.
1.
INTRODUCTION
Bitcoin has received more adoption and popularity than
any other digital currency proposed to date. Currently, Bit-
coin holds the largest market share amongst all existing digi-
tal currencies, with a market cap exceeding 3 billion USD [5].
There are also numerous businesses [1], exchange platforms,
and banks [14] that are currently built around the Bitcoin
ecosystem.
Transaction security is ensured in Bitcoin by means of
blocks which instantiate a hash-based Proof of Work (PoW)
mechanism; Bitcoin’s PoW requires 10 minutes on average
to be solved and 6 consecutive blocks are recommended to
conﬁrm any single transaction in the system. This suggests
that transactions will be conﬁrmed in the system after al-
most one hour—provided that the majority (>50%) of the
computing power in the network is honest.
Given the growing investments in Bitcoin, and the increas-
ing adoption by users, the security, scalability, and reliability
of Bitcoin has received considerable attention in the litera-
ture. Recently, several studies have challenged the security
assumptions adopted by Bitcoin [13, 19, 20]. For instance,
Eyal and Sirer [15] showed that selﬁsh miners that com-
mand more than 33% of the total computing power of the
network can acquire a considerable mining advantage in the
network. Additionally, Karame et al. [20] showed that the
measures adopted in Bitcoin to handle fast payments are
not enough to deter double-spending attacks, and proposed
a countermeasure which is currently integrated in Bitcoin.
Recently, Heilman et al. showed how to attack the Bitcoin
mining protocol by monopolizing the connections of nodes
in the system.
Given that the Bitcoin overlay network is densely con-
nected, most of these studies assume that all transactions
and blocks (and their order of execution) advertised in the
system will be almost immediately available to the majority
of Bitcoin nodes soon after their release into the network.
Recently, a number studies brieﬂy hinted on the possibil-
ity of delaying blocks [3] and transactions [2, 22] for a short
amount of time (e.g., for 2 minutes).
In this paper, we extend these observations and we show
analytically and experimentally that an adversary can deny
the delivery of blocks and transactions to victim Bitcoin
nodes for a considerable amount of time. By doing so, this
attack enables the adversary to alter the information re-
ceived by Bitcoin nodes, and to modify their views of the
ledger state. This is achieved by exploiting Bitcoin band-
692width optimization techniques and the measures that are in
place to tolerate network delays and congestion. The mini-
mal requirement for this attack to succeed in practice is sim-
ply that the attacker can establish at least one connection
to the victim. An even more powerful attack resulting in al-
most indeﬁnite delays at the victim node only requires that
the attacker can ﬁll the victim’s remaining open connection
slots—without necessarily causing any network partitioning
in the Bitcoin network.
Our results therefore motivate the need for a careful de-
sign of the scalability mechanisms adopted in Bitcoin. While
existing mechanisms limit the amount of propagated infor-
mation in the system to the minimum necessary, we show
that these techniques come at odds with security and reduce
the ability of the network to e.g., detect double-spending
attacks, resolve, or prevent blockchain forks. For instance,
our ﬁndings suggest that the 33% bound outlined by Eyal
and Sirer [15] might be even further reduced. Namely, if a
considerable fraction of miners does not rely on alternative
relay networks to receive network updates [4], then malicious
miners can temporarily prevent the propagation of recently
mined blocks in the network, in order to further increase
their advantage—while commanding less than 33% of the
total computing power in the network. In this respect, we
propose a modiﬁcation of the block request process in Bit-
coin to deter this misbehavior.
Our ﬁndings additionally uncover new vulnerabilities in
the Bitcoin network’s ability to handle fast payments. Fast
payments refer to payments where the time between the ex-
change of currency and goods is short (in the order of a
minute).
In light of the vulnerabilities discovered in [20],
Bitcoin incorporated a new countermeasure which consists
of relaying the ﬁrst double-spent transaction in order to en-
hance the security of fast payments [7]. In this respect, we
show analytically and experimentally that an adversary can
leverage our ﬁndings to circumvent this countermeasure and
double-spend fast payments without bearing any risk of los-
ing her money. We also show that payments which were only
conﬁrmed by few blocks might be reverted by the adversary.
Based on our ﬁndings, we explore a number of solutions to
deter this misbehavior and we estimate a lower-bound on
the waiting time required to ensure the security of fast pay-
ments.
More speciﬁcally, our contributions in this paper can be
summarized as follows:
• We analytically and experimentally conﬁrm that a resou-
rce-constrained adversary can abuse existing scalabil-
ity measures adopted in Bitcoin clients in order to deny
information about newly generated blocks and trans-
actions to Bitcoin nodes for at least 20 minutes. We
then extend this basic attack and show how an adver-
sary can continuously deny the delivery of such infor-
mation.
• We validate our analysis by means of implementation
using a handful of hosts located around the globe. Our
results demonstrate the feasibility and easy realization
of our attacks in current Bitcoin client implementa-
tions.
• We show that our results allow the adversary to con-
siderably increase its mining advantage in the net-
work, double-spend transactions in spite of the current
countermeasures adopted by Bitcoin, and easily mount
Denial-of-Service attacks.
• We propose a number of mitigations for hardening the
security of the network against such a misbehavior
without deteriorating the scalability of Bitcoin. Namely,
we propose a modiﬁcation of the block request man-
agement system in Bitcoin in order to detect any mis-
behavior in the delivery of blocks. Additionally, we
leverage our ﬁndings to estimate the minimum amount
of waiting time required to ensure, with considerable
probability, the security of fast payments in Bitcoin.
The remainder of the paper is organized as follows. In Sec-
tion 2, we overview Bitcoin and summarize the measures de-
ployed in the system to minimize the amount of propagated
information. In Section 3, we show how an adversary can
eﬀectively delay information propagation in the network. In
Section 4, we extend our analysis and discuss possible tech-
niques to continuously prevent the delivery of Bitcoin blocks.
In Section 5, we discuss the impact of our ﬁndings on the
security of Bitcoin, and we outline possible countermeasures
in Section 6. In Section 7, we overview related work in the
area, and we conclude the paper in Section 8.
2. SCALABILITY MEASURES IN BITCOIN
In this section, we overview Bitcoin, and summarize the
main scalability measures integrated in the system.
Background.
Bitcoin is a loosely-connected P2P network, where nodes
can join and leave the network at any moment. Bitcoin
nodes are connected to the overlay network over TCP/IP.
Initially, peers bootstrap to the network by requesting peer
address information from Domain Name System (DNS) seeds
which provide a list of current Bitcoin node IP addresses.
Newly connected nodes advertise peer IP addresses via Bit-
coin addr messages. Notice that a default full Bitcoin client
establishes a maximum of 125 TCP connections, of which
up to 8 are outgoing TCP connections.
Bitcoin transactions transfer coins (BTCs) among peers;
these peers are referenced in each transaction by means of
virtual pseudonyms—referred to as Bitcoin addresses. Each
address maps to a unique public/private key pair; these keys
are used to transfer the ownership of BTCs among addresses.
A Bitcoin transaction is formed by digitally signing a hash of
the previous transaction where this coin was last spent along
with the public key of the future owner and incorporating
this signature in the coin. Transactions take as input the
reference to an output of another transaction which spends
the same coins, and outputs the list of addresses which can
collect the transferred coins. A transaction output can only
be redeemed once, after which the output is no longer avail-
able to other transactions. Once ready, the transaction is
signed by the user and broadcast in the P2P network. Any
peer can verify the authenticity of a BTC by checking the
chain of signatures.
The diﬀerence between the input and output amounts of
a transaction is collected in the form of fees by Bitcoin min-
ers. Miners are peers, which participate in the generation
of Bitcoin blocks. These blocks are generated by solving a
hash-based proof-of-work (PoW) scheme; miners must ﬁnd
a nonce value that, when hashed with additional ﬁelds (e.g.,
the Merkle hash of all valid transactions, the hash of the pre-
vious block), the result is below a given target value. If such
a nonce is found, miners then include it in a new block thus
allowing any entity to verify the PoW. Since each block links
693to the previously generated block, the Bitcoin blockchain
grows upon the generation of a new block in the network.
A Bitcoin block is mined on average every 10 minutes and
currently awards 25 BTCs to the generating miner. It was
shown in [20] that Bitcoin block generation follows a shifted
geometric distribution with parameter 0.19. This also sug-
gests that there is considerable variability in the generation
times; for example, one of the longest block generation time
so far lasted almost 99 minutes (this corresponds to block
152,218).
During normal operations, miners typically work on ex-
tending the longest blockchain in the network. Due to the
underlying PoW scheme, however, diﬀerent miners can po-
tentially ﬁnd diﬀerent blocks nearly at the same time—in
which case a fork in the blockchain occurs. Forks are inher-
ently resolved by the Bitcoin system; the longest blockchain
which is backed by the majority of the computing power in
the network will eventually prevail.
Scalability Measures.
Currently, almost 1 transaction per second (tps) [1] is ex-
ecuted in Bitcoin; this results in an average block size of al-
most 400 KB1. In an experiment that we conducted, we mea-
sured the amount of traﬃc observed by a full Bitcoin node2;
our results show that Bitcoin nodes in- and outbound traﬃc
heavily depends on the number of connections of the node.
For instance, a node with about 70 connections witnesses
on average 8.5 GB daily traﬃc3, while a node with about
25 connections witnesses on average 3 GB traﬃc within 24
hours4. Given the increasing adoption of Bitcoin, the num-
ber of transactions, and the block sizes are only expected to
increase. For example, if Bitcoin were to handle 1% of the
transactional volume of Visa5, then Bitcoin needs to scale to
accommodate almost 500 tps—requiring considerably larger
blocks to be broadcasted in the network.
Motivated by these factors, the current Bitcoin protocol
implements various bandwidth optimizations, and measures
in order to sustain its scalability and correct operation in
spite of ever-increasing use. In what follows, we detail the
existing measures taken by Bitcoin developers.
Measure 1. Bitcoin combats the broadcasting of ill-formed
blocks and transactions by maintaining an internal reputa-
tion management system.
Whenever a node receives objects (e.g., blocks, transac-
tions), it checks their correctness before forwarding them
to other peers in the network. First, objects are validated
based on their respective syntax and sizes, e.g., oversized ob-
jects are discarded. If this veriﬁcation passes, the contents
of the objects are subsequently validated. For transactions,
this includes verifying the signature, the input and output
coins used in the transaction; similarly, the PoW included in
block headers is veriﬁed with respect to the current network
diﬃculty.
1The maximum block size is currently limited to 1 MB which
corresponds to less than 7 transactions per second.
2Our measurements were conducted over a period of 18 days,
during which our node had on average 70 active connections.
3Measured over 20 days.
4Measured over 2 days.
5Currently, the Visa network is designed to handle peak
volumes of 47,000 tps [9].
Node A
Node V
Node A
Node V
new block arrival
new transaction arrival
inv
s
g e t h e a d e r
a
t
g e t d a
headers
block
inv
a
t
g e t d a
transaction
Block transmission
Transaction transmission
Figure 1: Summary of the request management sys-
tem in Bitcoin.
To prevent any abuse of the Bitcoin overlay network (e.g.
Denial of Service attacks), a receiving node locally assigns
a penalty to peers who broadcast ill-formed objects. Once
a node has reached 100 penalty points, the receiving node
disconnects from the misbehaving node for 24 hours. For
example, if a node broadcasts invalid alerts, then it will be
given 10 penalty points. Nodes which attempt more serious
misbehavior, such as inserting invalid transaction signatures,
are immediately assigned 100 points, and therefore directly
banned. Penalties also apply to ill-formed control messages
such as inv (inventory) or addr commands. Notice that
locally assigned penalties are not transmitted to other peers.
Measure 2. Bitcoin uses an advertisement-based request
management system to minimize the information spread in
the network.
To minimize information spread in the network, messages
are propagated in the Bitcoin network with the help of an
advertisement-based request management system. Namely,
if node A receives information about a new Bitcoin object
(e.g., a transaction or a block) from another node, A will
advertise this object to its other connections (e.g. node V)
by sending them an inv message; these messages are much
smaller in size than the actual objects, because they only
contain the hash and the type of object which is advertised.
Only if node V has not previously received the object adver-
tised by the inv message, V will request the object from A
with a getdata request. Following the Bitcoin protocol, node
A will subsequently respond with a Bitcoin object, e.g., the
contents of a transaction or a block.
By doing so, inventory messages limit the amount of data
broadcast in the network. Notice that in case the object
advertised corresponds to a block, neighbor V ﬁrst requests
the block header before the actual block data. Here, when
a block header is advertised via a headers message, the re-
ceiving node internally stores the highest block known by the
sending peer. The receiving node also validates any received
header, by verifying its corresponding PoW. Transactions,
on the other hand, are requested directly using a transac-
tion inv message. This process is summarized in Figure 1.
To minimize bandwidth consumption, Bitcoin nodes re-
quest a given object only from a single peer, typically the
ﬁrst peer which ﬁrst advertises the object.
In an experi-
ment that we conducted, we measured the traﬃc (cf. Fig-
ure 2) witnessed by a default Bitcoin client over a period
694140
120
100
80
60
40
20
r
u
o
h
r
e
p
s
e
t
y
b
a
g
e
M
0
1
inv
tx
block
3
5
7
9
11 13 15 17 19 21 23
Hours of trafﬁc capture
)