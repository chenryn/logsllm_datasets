these inputs are received from untrusted devices. In particular, it
ensures two security property of user-provided inputs: i) if the
user-provided input matches the input sent to the server; ii) if the
user-provided input violates the movement rule dictated by the
game map. First, it latches raw inputs from the client (e.g., fraction
of key-down time) for each invocation of prediction. Before the
client forwards the input to the server, BlackMirror computes
the MAC of the latched inputs, and send it along with the inputs.
Therefore, the server-side simulation and local predictions are us-
ing the same inputs, which prevents discrepancy between the two,
which may give attackers chances of fooling the BlackMirror
to reveal more information. Second, BlackMirror checks if the
user-provided input violates the movement rule in the game. To this
end, BlackMirror performs simple collision detection in order to
Trusted
State
Self
Occluders
Opponents
Client
BlackMirror
Trusted
Transforms
worldToClip
localToWorld
Trusted
Geometry
BMTest
Geometry
Vertex
Processor
Primitive
Assembly
Rasterization
depth map
Rasterizer
Untrusted
State
U
P
G
Figure 9: The workflow of BlackMirror’s visibility testing
clip the predicted position against the environment, e.g., preventing
the entities going through the walls during prediction.
6.4 Trusted Visibility Testing
In this section, we describe how BlackMirror performs trusted vis-
ibility testing in an enclave with respect to those entities. Through
trusted visibility testing, BlackMirror can securely determine
which entities are visible in the current frame, and only declassify
those entities outside the enclave, allowing them to be sent to the
GPU. This declassification mechanism allows BlackMirror to still
leverage GPU-based rendering pipelines, thereby overcoming the
severe performance limitation of software-only rendering (§9.2).
More specifically, BlackMirror implements BMTest, a stripped-
down version of graphics rendering pipeline, which is dedicated for
visibility testing for a given game scene. Instead of implementing
full-fledged rendering pipeline in software, BMTest only computes
the necessary functions for visible volume-based clipping and depth-
testing, and leaves the rest for the GPU to compute. In particular,
BMTest performs vertex processing, primitive assembly and ras-
terization in software, (refer Figure 9) Additionally, BlackMirror
can leverage SIMD instruction sets, e.g. AVX2, in the enclave to
exploit parallel computations.
In the following, we explain the overall visibility-testing mecha-
nism of BMTest including details about each step of its execution:
i) preparation of transformations and rendering data, ii) Depth map
construction with occluders, iii) Clipping by visible volume and iv)
Depth-testing against the depth map.
Preparation of Transformations and Rendering Data.
Ini-
tially, BlackMirror prepares inputs that are used by BMTest, i.e.,
transformations, and the geometry. Recall that we have discussed
different coordinate systems (e.g., local space, world space, clip
space, etc.) in §2.2. Similar coordinate transformations are also per-
formed within BMTest, yet these transformations are derived from
trusted state. In particular, BlackMirror derives worldToClip
transformation from the self-player’s state, and it is used to de-
termine the visible volume of the self-player at this frame. Then,
it computes localToWorld transformations using the origin and
view angles of occluders and sensitive entities.
Other than these transformations, BMTest requires the geome-
try (e.g., size and shape) of sensitive entities to perform accurate
visibility testing. It is worth noting that since the geometry can be
huge, BlackMirror stores only a simplified model of an entity’s ge-
ometry, i.e., ignoring the details not relevant to determining shape
and size. The reason for this is that EPC memory is limited and
exhausting it can result in bad performance for enclaves [43, 44].
Furthermore, such a simplified model is commonly-used by game
applications (e.g., for collision-detection) and should therefore, be
trivial to implement for BlackMirror. We show the impact of dif-
ferent Level-of-Details (LoDs) on the accuracy of BMTest in §9.1.
After preparing the transforms and the rendering data (includ-
ing trusted geometry), BlackMirror passes them to BMTest for
performing visibility testing.
Depth Map Construction with Occluders. First, BMTest con-
structs a depth map, to accumulate depth-values of each occluder
entity. The depth map later is used for depth-testing for the enemy
entities. During this stage, BlackMirror iterates over the list of
occluders in the trusted state, and passes the associated transfor-
mations and geometry to the BMTest to update the depth map.
For each occluder, BMTest transforms it into clip space, and then
screen space to compute its depth values, and incrementally update
the depth map. In particular, resolution of the depth map (i.e. the
resolution of the screen space) is configured by the BlackMirror.
We discuss the performance and security implications of the depth
map resolution in §9.1.
In the following steps, enemy entities are handled according to
the player’s visible volume and recorded depth map values.
Clipping Sensitive Entities by Visible Volume. First, the geom-
etry pipeline of BMTest discards enemy entities outside the visible
volume. Similar to depth-map construction step, BlackMirror
passes each sensitive entity in the trusted state, and its relevant ren-
dering data to BMTest. After transforming the entity from the local
space to the clip space with the geometry pipeline, BMTest can
determine whether the enemy entity is outside the visible volume.
The entities within the visible volume are passed to the rasterization
pipeline for more precise depth testing.
Determining Visibility of Sensitive Entities. Finally, the raster-
ization pipeline tests each entity within the visible volume against
the depth map. In particular, entities in the clip space are mapped
to the screen space and BMTest compares the depth values of each
entity against the values in the depth map. If the depth values of
pixels in the entity are farther than the value in the depth map, it
must be hidden behind some occluder, and therefore, should not be
declassified. Lastly, BlackMirror declassifies the entities that are
considered to be visible by the BMTest to the untrusted state. In
particular, BlackMirror discloses their current trusted state to the
untrusted state via shared memory, so that they can be rendered
by the GPU.
Table 1: A list of possible attacks for a wallhack-motivated
attacker and defenses provided by BlackMirror.
BlackMirror Defenses
Sensitive entities protected in BlackMirror (§6.2)
Trusted visibility testing for each frame (§6.4)
Only visible entities disclosed outside
Attacks
Accessing sensitive entities
Compromising game client
Malicious rendering requests
Using CPU-GPU channel
Inside GPU memory
Compromising visibility testing
Tampering entity geometry
Providing malicious input
Undermining server communication
Impersonate server
Replay attacks
Trusted geometry stored in BlackMirror (§6.2)
Synchronize states with server (§6.3)
SGX attestation using public key (§6.1)
Non-repeating sequences (§6.3)
7 SECURITY ANALYSIS
Table 1 provide an overview of possible attacks and we provide
further details below.
7.1 Accessing Sensitive Entities
BlackMirror protects the identified sensitive entities from all at-
tack surfaces that we have discussed in §3.2. In particular, given
that the game client (running on the attacker’s machine) can be
easily compromised, BlackMirror identifies and then stores all
sensitive game entities (and their corresponding states) in the en-
clave. Afterwards, these entities cannot be accessed by the attacker,
until explicitly disclosed by declassify operation, preceded by
BlackMirror’s trusted visibility testing which filters out all entities
not relevant to the current frame. As a result of filtering, the entity
states are not disclosed outside the enclave, and therefore, attacks
compromising CPU-GPU communication or the GPU memory are
useless. In §9.1, we show that BMTest is highly accurate.
7.2 Compromising Visibility Testing
An attacker may attempt to tamper with inputs (i.e., entity geome-
try data and keyboard/mouse input) provided to BlackMirror to
manipulate declassification of sensitive entities.
Tampering Entity Geometry. BlackMirror has to ensure the
integrity of the geometry parameters of its sensitive entities to
prevent manipulation of visibility testing results. For example, if
the attacker can shrink the size of a wall, the opponents behind
the wall will be classified as visible by BMTest. BlackMirror
defeats such attacks by downloading geometry data via trusted
channel with server during bootstrapping, and storing it within the
enclave during game execution. Lastly, BlackMirror seals [13]
the downloaded geometry data within the protected file system
provide by SGX [45], to avoid offline tampering.
Providing Malicious Keyboard/Mouse Inputs. The attacker
might try to manipulate BlackMirror’s predict operation using
malicious keyboard or mouse inputs from untrusted devices. As a
result, they night be able to fool BMTest.
To prevent this, BlackMirror synchronizes sensitive entity
states with the states sent to the game server through its secure
communication channel. To understand why this is sufficient, con-
sider that the attacker claims that it has moved beyond an occluder
and therefore, should be able to see enemy characters beyond the
occluder. While the attacker can lie to BlackMirror, if they do
Configuration
# Keyframes
# Vertices
Visualization
Bounding Box
Precise
198
198
8
473
Figure 10: The changes in the number of vertices depending
on geometry’s level of details (i.e., bounding box and precise)
not propagate this lie to the server, BlackMirror will be alerted to
this discrepancy and terminate the game. On the other hand, if the
attacker also lies to the game server, the server will update its global
game state and propagate that state to all other players. As a result,
the attacker’s character will become visible to their opponents on
their screens. Therefore, the end result of such a tampering will not
be advantageous to the attacker beyond an honest gameplay.
7.3 Undermining Server Communication
The attacker might attempt to impersonate the game server or use
replay attacks to undermine BlackMirror-server communication
channel. To prevent impersonation, BlackMirror is provided with
the server’s public key and only establishes communication chan-
nels with the proper server after mutual authentication. To prevent
replay attacks, the server should append non-repeating and increas-
ing sequences to all update messages, and therefore, BlackMirror
can verify that they are not replayed. It is worth mentioning that
BlackMirror can adopt well established techniques [46] to address
potential problems due to lossy UDP communications, for example,
out-of-order arrival or packet losses.
8 IMPLEMENTATION
We develop a prototype of our design on top of an open source
3D FPS game, Quake II. While being quite old, Quake series have
been studied by many previous research works [47–50]. Notably,
NVIDIA has recently open sourced Q2RTX [51] to showcase real-
time ray tracing, which is implemented atop Quake II. We argue
that the choice of Quake II is quite reasonable for demonstrating our
design. We choose Q2PRO [52] as our baseline, which comprises
about 100K LoC. We use Intel SGX SDK version 2.7 for creating
enclave, and software-based rendering functionalities, e.g., vertex
processing and rasterization are taken from Masked Occlusion
Culling library [53]. Additionally, we use AES128-GCM and AES-
CMAC for encryption/decryption and MAC, respectively, which
are available from SGX SDK and OpenSSL.
9 EVALUATION
Experimental Setup. We run both of BlackMirror-protected
Quake II server and client on a desktop machine with Intel i7-8700 (6
core), 16 GB RAM, NVIDIA GeForce RTX 2080 Ti with 11GB GDDR6.
Both run Ubuntu 18.04. We intentionally restrict BlackMirror to
a single thread, expecting most CPU cores are occupied by the
rest of the game client, namely networking, handling inputs, and
rendering. [34, 54]
9.1 Accuracy and Overhead of BMTest
In this section, we evaluate how accurately and efficiently BMTest
can perform visibility testing. We analyze the accuracy of visibility
testing with a publicly available demo 1 with different configura-
tions. In particular, we experiment with i) two different Level of
Defails (LoDs); bounding boxes and precise models shown in Fig-
ure 10, and ii) different enclave depth map resolutions: 360p, 720p
and 1080p to evaluate their impact on security and performance.
Accuracy of Visibility Testing. BlackMirror can be configured
to have different geometry’s level of details (LODs), which may
affect the accuracy of declassification. In the following, we measure
the accuracy and the false negative rate of BMTest with two differ-
ent LODs, namely with bounding boxes and with precise models. As
shown in Figure 10, both bounding box and precise model have the
same 198 key frames while having 8 and 473 vertices, respectively.
Note that the precise model has 59 times more vertices enabling
the detailed rendering compared to the bounding box.
To evaluate the accuracy of BlackMirror’s visibility testing, we
replay the demo and measured (A) the total number of rendering
attempts for enemy entities in all the frames (i.e., the number of
enemy entities, including the visible and invisible ones), (B) the
number of visible entities that passes BMTest with the bounding
box and precise model, respectively, (C) the number of entities
that are not declassified by BMTest, though it should have, and
(D) the true number of visible entities (the ground truth). Note
that to measure D, we leverage the occlusion query extension [55],
which allows a developers to count that number of triangles that
are drawn without being occluded, thus providing the true number
of entities that are rendered to the final scene. The accuracy and
the false negative rate of visibility testing is defined to be 1 − 𝐷−𝐵
and 𝐶
𝐴 , respectively.
The results are shown in Figure 11. Overall the accuracy of
BlackMirror’s visibility testing ranges from 0.973 to 0.986, impli-
cating that BlackMirror effectively filters out non-visible entities.
On the other hand, there exist few false negatives, due to low reso-
lution of enclave depth map, and different algorithms being used
by CPU and GPU. The false negative rate turns out to be small, and
we expect it can be further reduced by combining techniques such
as path-tracing, i.e., casting a ray from the camera to the entity,
nevertheless we leave specific implementations to be future works.
Performance Impact of Visibility Testing. The performance
of BlackMirror’s visibility testing depends on: 1) what is the
resolution of the depth map? and 2) how detailed the provided
geometry is?
𝐴
Figure 12 shows the performance overhead of the depth map
preparation. Depending on the resolution, for each frame it takes
from 0.36 millisecond (for 360p resolution) to 0.50 millisecond (for
1080p resolution). Since most games require 60fps, the time gap
between frames is about 16 millisecond. In this regard, the overhead
of depth map construction (i.e., 0.36 to 0.50 millisecond) only takes
about 0.02% to 0.03%, we believe such overhead should be acceptable
to meet gaming requirements for user’s experience.
Figure 13 shows a comparison of the depth testing performance
while varying i) the number of sensitive entities to test and ii)
1http://acmectf.com/downloads/demos-tricks/_unsorted/challenge-tv/ffadm1.dm2.
zip
Enclave
Depth Map
Resolution
Total #
of Frames
Total #
Entities
of
(𝐴)
360p
720p
1080p
299,832
295,044
283,293
708,907
693,976
658,824
# of Visible
Entities
w/ Bbox (B)
(1 − 𝐷−𝐵
𝐴 )
182,944 (97.3%)
176,832 (97.6%)
166,007 (97.8%)
# of Visible
Entities
w/ Precise (B)
(1 − 𝐷−𝐵
𝐴 )
176,686 (98.2%)
170,606 (98.5%)
160,560 (98.6%)
# of False
Negative
w/ Bbox (C) w/ Precise (C)
# of False
Negative
( 𝐶
𝐴 )
( 𝐶
𝐴 )
Ground Truth
# of Visible
Entities
(𝐷)
13 (0.0018%)
12 (0.0017%)
10 (0.0015%)