Among the various controls that shapes the memory layout, there
are two MSRs that can be controlled by the system software when
the system is operational. They are TOM and IORR.
Though TOM registers can be modiﬁed after the system boots
up, any modiﬁcation of the TOM registers can greatly affect the
Figure 1: Physical Address Layout on AMD Architecture
mapped to DRAM in the north bridge. Any access to these areas
will be forwarded to the DRAM Controller (DCT). These registers
are conﬁgured by the BIOS with the result of system memory prob-
ing during hardware initialization. Therefore they are designed to
be lock-once (i.e., write-once). The values cannot be changed until
the next system reset.
The next set of registers that shapes the memory layout consists
of two Mode Speciﬁc Registers (MSR) Top Of Memory (TOM)
registers. AMD processors allow system software to use TOM reg-
isters to specify where memory accesses are directed for a given ad-
dress range [2]. There are two TOM registers, TOP_MEM1 (TOM1)
and TOP_MEM2 (TOM2). Figure 1 shows that the address range
from 0 to TOM1 as well as the address range from 4GB to TOM2
are set as system memory on this AMD system. Access requests
within these two ranges are directed to the DRAM, while requests
outside these two ranges are directed to the I/O space. The pur-
pose of these two registers is to offer the operating system software
the ability to carve out large memory space to organize DRAM
and I/O devices. Even though they can be changed even when the
system is operational, unlike the DRAM Base/Limit register, it is
rare to change the memory address allocation after the system starts
up. This is because the DRAM boundaries, governed by DRAM
Base/Limit registers, have already been determined. Lastly, sys-
tems usually stop functioning if these registers are changed, since
the OS kernel was not expecting the change of hardware conﬁgura-
tion while the system is running.
The last set of registers that shapes the layout is also MSR in
the processor. They are the Input Output Remap Registers (IORR).
These set of registers can create a special mapping beyond the base
setting to direct speciﬁc read/write access of any address space be-
tween the I/O space and the DRAM space. This set of registers
are designed to enable system software to shadow ROM device in
memory to improve the system performance.
Figure 2: Architecture of HIveS
system stability, since the OS kernel uses the TOM registers in
many default system settings. Furthermore, TOM modiﬁcations
can only change the boundary between the default I/O area and the
DRAM area. Even if system instability was not an issue, the ma-
nipulation would be very limited.
We instead use I/O range registers (IORRs) to adaptively prevent
all processor cores from accessing the HIveS memory. IORRs are
variable-range memory type range registers (MTRRs). They can
be used to specify if reads and writes in any physical address range
should map to system memory or memory-mapped I/O (MMIO).
In AMD architecture [2], up to two address ranges of varying sizes
can be controlled using IORRs. Figure 1 shows an example that
maps an area of system RAM between 4GB and 5GB into MMIO
using one IORR.
Each IORR has a pair of registers, IORR base register and IORR
mask register. The IORR mask register contains the length of the
region and a valid bit indicating whether the IORR conﬁguration
pair is active. IORR base register contains the starting address of
the IORR region, as well as two important ﬂag bits, WrMem and
RdMem [2]. When these two bits are set to 1, the north bridge
directs read/write requests for this physical address range to system
memory. When these bits are cleared to 0, all reads/write requests
are directed to memory-mapped I/O.
The RdMem and WrMem bits in IORR are originally designed
for shadowing ROMs of I/O devices in DRAM memory to improve
system performance. The system can create a shadow region by
setting W rM em = 1 and RdM em = 0 for a dedicated memory
range and then copy the ROM from I/O device into DRAM mem-
ory. Once the copy operation is completed, the system changes the
bit value to W rM em = 0 and RdM em = 1. Now the memory
reads are directed to the faster copy in the DRAM memory instead
of ROM of the device; write requests are still being directed to the
ROM, but the ROM simply ignores any write request.
The I/O shadowing provided by IORRs can be misused to redi-
rect processor requests of a valid system memory area to the I/O
space. When both RdMem and WrMem bits are set to 0 in the
IORR, all read and write requests to the HIveS memory will be
redirected to the I/O space. With this conﬁguration, the HIveS
memory becomes inaccessible for all processor cores. Since both
Windows and Linux operating systems make no assumptions on
the default conﬁgurations and usages of IORRs, the modiﬁcation
of unused IORR registers has no impact on the OS reliability. In
addition, IORR registers offers great adaptability in both the loca-
tion and size of the HIveS memory.
3.2 Exclusive Access in the Unlocked State
The HIveS memory in the unlocked state is designed to allow
an exclusive access from the processor core controlled by the at-
tacker, while preventing acquisition by the processor cores that per-
form memory forensics. IORRs are registers shared by all proces-
sor cores, so any modiﬁcation on one IORR register affects all the
processor cores in the system. When an attackers needs to access
the HIveS memory in a single core system, she can simply unlock
HIveS memory by disabling the I/O shadowing, read or modify
contents in the HIveS memory, and then lock it by enabling the I/O
shadowing. However, it becomes a challenge to ensure an exclusive
access to HIveS memory with parallel execution in a multi-core
system, since the forensic examiner can be collecting memory with
the other running core. We develop two new techniques, Blackbox
Write and TLB Camouﬂage, to solve this problem.
3.2.1 Blackbox Write
When an attacker with an active keylogger uses HIveS memory
to store the collected sensitive data, it will be writing to the HIveS
memory most of the time and does not need to frequently read it
back. On the other hand, forensic examiners are interested only
on reading the memory contents. In order to preserve the integrity
of the evidence, memory forensic tools always read the memory
contents and never write to the memory.
Based on the above asymmetric operations between the attack-
ers and the examiners, we develop Blackbox Write to redirect all
Figure 3: Blackbox Write
Algorithm 1: TLB Camouﬂage
begin
allocate a new memory page;
pause all other running cores;
all cores ﬂush TLBs;
modify the new page PTE to point to the HIveS memory;
malicious core read/write the virtual address;
malicious core TLB entry loaded;
modify the new page PTE back to regular address;
resume all other cores;
memory read requests to the I/O space by setting RdM em = 0 in
IORR and send all the memory write requests to the HIveS mem-
ory by setting W rM em = 1. With this setting, attackers can write
new contents into the HIveS memory while preventing forensic ex-
aminers from reading and analyzing it. Because there is no real
I/O device in the I/O hub to respond to the memory reads, a default
value (e.g, 0xF F in AMD FX processor [4]) is returned instead.
Note the examiner can also write into the HIveS memory, however
actively modifying memory is a an act of compromising evidence,
which is against the principle of digital forensics.
The attacker eventually needs to send the data in the HIveS mem-
ory to a remote machine. For instance, after a ﬁx amount of user
key strokes have been stealthily recorded, the keylogger can send
the data to a remote server using network packets. Instead of un-
locking processor’s read access to the HIveS memory, the attacker
can manage to read the HIveS memory by a peripheral device via
DMA. To prevent random peripheral devices from reading the HIveS
memory, HIveS can set the IOMMU to only allow a designated pe-
ripheral device to access the HIveS memory. Thus, a network in-
terface adapter can read the key stoke logs from the HIveS memory
via DMA and exﬁltrate them.
3.2.2 TLB Camouﬂage
Blackbox write is an effective technique for malware that contin-
uously stores sensitive data in a secret place with little need to read
back, such as keyloggers. However, when the malware needs to un-
lock the HIveS memory for continuous read and write, it leaves a
large time window for memory forensic tools to acquire the HIveS
memory. We propose TLB Camouﬂage technique to mitigate this
problem. Figure 4 shows the basic idea of TLB camouﬂage, where
the unlocked HIveS memory can only be accessed by the malicious
Core 1 that is controlled by the attacker, while the read and write
requests from Core 2 for memory forensics are redirected to an-
other memory space. TLB camouﬂage enables exclusive access to
HIveS memory by creating an incoherent view of memory mapping
between cores, allowing the HIveS memory contents be accessed
only by the processor core that is running the malicious software.
Modern operating systems enable paging mechanism to translate
virtual memory address into physical memory address before pass-
ing the memory access request to DRAM Controller (DCT) [9].
Translation-Lookaside Buffer (TLB), also known as page-translation
caches, is designed to reduce the performance penalty during the
time-consuming address translation process [2]. Only one memory
access per virtual memory request is required when the translation
for the demanding page is present in the TLB (a TLB hit). When
there is no entry in the TLB for the demanding page, a TLB miss
occurs. And the translation information for the page is copied from
a page table entry (PTE) into the TLB (a TLB reload).
Each processor core has its own TLB [2, 3]. When the operating
system changes a page mapping, the TLB won’t be automatically
updated to reﬂect the new virtual to physical address translation.
TLB camouﬂage exploits this property to create a page translation
incoherence among different processor cores.
A pseudo code of TLB Camouﬂage is shown in Algorithm 1.
The idea is to create an incoherent cache entry in the TLB caches
among the running processor cores. A new page is allocated in the
kernel for the page translation manipulation, such that the rest of
the system would not be affected. Then, all the other processor
cores are paused. At this point, the malicious core can ﬂush the
TLB and to make sure that there is no preexisting translation stored
for the our newly allocated page already. The PTE of the allocated
page is then modiﬁed to point to HIveS memory, and several LDR
instructions are then used to force a translation table walk and TLB
reload. And the malicious core would have a TLB entry mapping
to HIveS memory. Then the PTE is modiﬁed back to the original
values, and the other cores are resumed. Technically, the TLB entry
for the allocated page of malicious core is incoherent, and contains
Figure 4: TLB Camouﬂage
a false mapping. And this is exactly what we need. In Figure 4,
when Core 2 requests to access the virtual page of the HIveS mem-
ory, it will get the content in the regular memory. On the other hand,
since the malicious Core 1 has an incoherrent TLB entry pointed to
the HIveS memory address, it can access the HIveS memory if the
TLB entry has not been ﬂushed out.
TLB camouﬂage technique greatly increases the usability of HIveS
memory, which can be used not only as a temporary storage with
few interactions, but also as an interactive memory storage to sup-
port more malicious operations.
However, TLB Camouﬂage has some limitations. First, not all
forensic tools rely on the existing kernel page tables to map virtual
addresses to physical addresses [35]. In this case, TLB camouﬂage
won’t work since it depends on manipulating the kernel page tables.
Second, the TLB entry should be sustained all the time; otherwise,
the malicious core cannot access the HIveS memory either. Since
TLB locking capability is not supported by the latest x86 architec-
ture, malicious code has to freshen the TLB entry periodically in
order to keep it active in TLB depending on the processor imple-
mentation.
3.3 HIveS Memory Access Property
When the HIveS memory is in the locked state by applying the
I/O shadowing technique, none of processor cores can read or write
the HIveS memory. Most of the time, the attacker does not need to
access the HIveS memory at all, so it can lock the memory for a
better protection. However, the attacker has to unlock the memory
eventually to access it. When the attacker only needs to write to the
HIveS memory, it can use the Blackbox Write technique. More-
over, if the attacker also needs to frequently read the memory con-
tents, it can use the TLB Camouﬂage technique. Table 1 shows the
different access privileges to the HIveS memory for both attackers
and forensic examiners when applying different anti-forensic tech-
niques.
HIveS is operating system agnostic, so the HIveS memory can
be concealed on x86 platforms for both Windows and Linux. How-
ever, we need to develop a kernel module on Linux or a device
driver on Windows with the root privilege to set the hardware regis-
ters. Contrary to current rootkits that modify kernel data structures
or routines in the operating system, HIveS does not leave any trace
in the memory or hard disk, so it cannot be detected by checking
the integrity of the OS image in the memory and the hard disk.
4. HIVES EXTENSION
HIveS is mainly developed to defeat software based memory ac-
quisition methods that rely on a trusted software module in the op-
erating system to acquire the physical memory through the pro-
cessor to memory interface. Both I/O Shadowing and Blackbox
Write rely on modifying the IORR registers, and TLB Camouﬂage
creates an incoherent page translation in TLB caches of multiple
processor cores. All the modiﬁcations are made on the proces-
sor, and thus only affect processing of memory request originated
from the processor. On the other hand, hardware based memory
acquisition solutions can detect HIveS, since a dedicated I/O de-
vice can capture physical memory image via direct memory ac-
cess, which totally bypasses the processor hardware conﬁgurations
made by HIveS. Moreover, the Cold Boot technique [18] exploits
the physical remanence property of memory chips to directly ex-
tract sensitive data from the chips. Cold boot technique resets the
system and invalidates all conﬁgurations prior to system reset. To
enhance the capability of HIveS against the hardware based foren-
sics tools, we propose to retroﬁt a number of existing techniques in
HIveS, including IOMMU, RAM-less encryption, and Cache based
I/O storage.
4.1 Hiding from I/O Devices
We propose to use IOMMU to evade physical memory foren-
sics by I/O devices via DMA. Similar to the translation from vir-
tual memory address to physical memory address performed by
MMU, IOMMU is a hardware device that translates device DMA
addresses into proper physical memory addresses. Each I/O de-
vice is assigned a protected domain with a set of I/O page tables
that deﬁne the corresponding memory addresses. During a DMA
transfer, the IOMMU intercepts the access message from the I/O
bus and checks its cache (IOTLB) for the I/O to memory address
translation along with the access right. IOMMU is controlled with
in-memory tables and memory-mapped registers. Once a DMA
request passes IOMMU, it is then processed by the north bridge.
Table 1: Comparison of Access to HIveS Memory
Attacker Read Attacker Write Regular Read Regular Write
I/O Shadowing
Blackbox Write
TLB Camouﬂage
no
no