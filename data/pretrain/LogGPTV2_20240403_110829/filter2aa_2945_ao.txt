For example:
Click here to view code image
if (seconds == 59)
{
seconds = 0;
    minutes++;
}
Associate different statements with
different values of a controlling
expression
Use a switch statement. For
example:
Click here to view code image
switch (current)
{
    case 0:
        ...
        break;
    case 1:
        ...
        break;
    default :
        ...
        break;
}
Download from finelybook PI:EMAIL
200
CHAPTER 5
Using compound assignment and
iteration statements
After completing this chapter, you will be able to:
Update the value of a variable by using compound assignment
operators.
Write while, for, and do iteration statements.
Step through a do statement and watch as the values of variables
change.
Chapter 4, “Using decision statements,” demonstrates how to use the if and
switch constructs to run statements selectively. In this chapter, you’ll see how
to use a variety of iteration (or looping) statements to run one or more
statements repeatedly.
When you write iteration statements, you usually need to control the
number of iterations that you perform. You can achieve this by using a
variable, updating its value as each iteration is performed, and stopping the
process when the variable reaches a particular value. To help simplify this
process, you’ll start by learning about the special assignment operators that
you should use to update the value of a variable in these circumstances.
Using compound assignment operators
Download from finelybook PI:EMAIL
201
You’ve already seen how to use arithmetic operators to create new values.
For example, the following statement uses the plus operator (+) to display to
the console a value that is 42 greater than the variable answer:
Console.WriteLine(answer + 42);
You’ve also seen how to use assignment statements to change the value of
a variable. The following statement uses the assignment operator (=) to
change the value of answer to 42:
answer = 42;
If you want to add 42 to the value of a variable, you can combine the
assignment operator and the plus operator. For example, the following
statement adds 42 to answer. After this statement runs, the value of answer is
42 more than it was before:
answer = answer + 42;
Although this statement works, you’ll probably never see an experienced
programmer write code like this. Adding a value to a variable is so common
that C# provides a way for you to perform this task in a shorthand manner by
using the operator +=. To add 42 to answer, you can write the following
statement:
answer += 42;
You can use this notation to combine any arithmetic operator with the
assignment operator, as the following table shows. These operators are
collectively known as the compound assignment operators.
Don’t write this
Write this
variable = variable * number;
variable *= number;
variable = variable / number;
variable /= number;
variable = variable % number;
variable %= number;
variable = variable + number;
variable += number;
Download from finelybook PI:EMAIL
202
variable = variable - number;
variable -= number;
Tip The compound assignment operators share the same precedence
and right associativity as the simple assignment operator (=).
The += operator also works on strings; it appends one string to the end of
another. For example, the following code displays “Hello John” on the
console:
Click here to view code image
string name = "John";
string greeting = "Hello ";
greeting += name;
Console.WriteLine(greeting);
You cannot use any of the other compound assignment operators on
strings.
Tip Use the increment (++) and decrement (--) operators instead of a
compound assignment operator when incrementing or decrementing a
variable by 1. For example, replace
Click here to view code image
count += 1;
   with
count++;
Writing while statements
Download from finelybook PI:EMAIL
203
You use a while statement to run a statement repeatedly for as long as some
condition is true. The syntax of a while statement is as follows:
Click here to view code image
while ( booleanExpression )
    statement
The Boolean expression (which must be enclosed in parentheses) is
evaluated, and if it is true, the statement runs and then the Boolean expression
is evaluated again. If the expression is still true, the statement is repeated, and
then the Boolean expression is evaluated yet again. This process continues
until the Boolean expression evaluates to false, at which point the while
statement exits. Execution then continues with the first statement that follows
the while statement. A while statement shares the following syntactic
similarities with an if statement (in fact, the syntax is identical except for the
keyword):
The expression must be a Boolean expression.
The Boolean expression must be written within parentheses.
If the Boolean expression evaluates to false when first evaluated, the
statement does not run.
If you want to perform two or more statements under the control of a
while statement, you must use braces to group those statements in a
block.
Here’s a while statement that writes the values 0 through 9 to the console.
Note that as soon as the variable i reaches the value 10, the while statement
finishes and the code in the statement block does not run:
Click here to view code image
int i = 0;
while (i < 10)
{
    Console.WriteLine(i);
    i++;
}
All while statements should terminate at some point. A common
beginner’s mistake is to forget to include a statement to cause the Boolean
expression eventually to evaluate to false and terminate the loop, which
Download from finelybook PI:EMAIL
204
results in a program that runs forever. In the example, the statement i++;
performs this role.
Note The variable i in the while loop controls the number of iterations
that the loop performs. This is a common idiom, and the variable that
performs this role is sometimes called the sentinel variable. You can
also create nested loops (one loop inside another), and in these cases, it
is common to extend this naming pattern to use the letters j, k, and even
l as the names of the sentinel variables used to control the iterations in
these loops.
Tip As with if statements, it is recommended that you always use a
block with a while statement, even if the block contains only a single
statement. This way, if you decide to add more statements to the body
of the while construct later, it is clear that you should add them to the
block. If you don’t do this, only the first statement that immediately
follows the Boolean expression in the while construct will be executed
as part of the loop, resulting in difficult-to-spot bugs such as this:
Click here to view code image
int i = 0;
while (i < 10)
    Console.WriteLine(i);
    i++;
This code iterates forever, displaying an infinite number of zeros,
because only the Console.WriteLine statement—and not the i++;
statement—is executed as part of the while construct.
In the following exercise, you will write a while loop to iterate through the
Download from finelybook PI:EMAIL
205
contents of a text file one line at a time and write each line to a text box in a
form.
Write a while statement
1. Using Microsoft Visual Studio 2017, open the WhileStatement solution,
which is located in the  \Microsoft Press\VCSBS\Chapter
5\WhileStatement folder in your Documents folder.
2. On the Debug menu, click Start Debugging.
Visual Studio 2017 builds and runs the application. The application is a
simple text file viewer that you can use to select a text file and display
its contents.
3. Click Open File.
The Open File picker appears and displays the files in the Documents
folder, as shown in the following screenshot (the list of files and folders
might be different on your computer).
Download from finelybook PI:EMAIL
206
You can use this dialog to move to a folder and select a file to display.
4. Move to the \Microsoft Press\VCSBS\Chapter
5\WhileStatement\WhileStatement folder in your Documents folder.
5. Select the file MainPage.xaml.cs, and then click Open.
The name of the file, MainPage.xaml.cs, appears in the text box at the
top of the form, but the contents of the file do not appear in the large text
box. This is because you have not yet implemented the code that reads
the contents of the file and displays it. You will add this functionality in
the following steps.
6. Return to Visual Studio 2017 and stop debugging.
7. Display the code for the file MainPage.xaml.cs in the Code and Text
Editor window, and locate the openFileClick method.
This method runs when the user clicks the Open button to select a file in
the Open dialog box. It is not necessary for you to understand the exact
Download from finelybook PI:EMAIL
207
details of how this method works at this point—simply accept the fact
that this method prompts the user for a file (using a FileOpenPicker or
OpenFileDialog window) and opens the selected file for reading.
The final two statements in the openFileClick method are important,
however. They look like this:
Click here to view code image
TextReader reader = new
StreamReader(inputStream.AsStreamForRead());
displayData(reader);
The first statement declares a TextReader variable called reader.
TextReader is a class provided by the Microsoft.NET Framework that
you can use for reading streams of characters from sources such as files.
It is located in the System.IO namespace. This statement makes the data
in the file specified by the user in the FileOpenPicker available to the
TextReader object, which can then be used to read the data from the file.
The final statement calls a method named displayData, passing reader
as a parameter to this method. The displayData method reads the data by
using the reader object and displays it on the screen (or it will do so
once you have written the code to accomplish this).
8. Examine the displayData method. It currently looks like this:
Click here to view code image
private void displayData(TextReader reader)
{
    // TODO: add while loop here
}
You can see that, other than the comment, this method is currently
empty. This is where you need to add the code to fetch and display the
data.
9. Replace the // TODO: add while loop here comment with the following
statement:
source.Text = "";
The source variable refers to the large text box on the form. Setting its
Text property to the empty string (“”) clears any text that is currently
Download from finelybook PI:EMAIL
208
displayed in this text box.
10. Add the following statement after the previous line that you added to the
displayData method:
string line = reader.ReadLine();
This statement declares a string variable called line and calls the
reader.ReadLine method to read the first line from the file into this
variable. This method returns either the next line of text from the file or
a special value called null when there are no more lines to read.
11. Add the following statements to the displayData method after the code
you have just entered:
Click here to view code image
while (line != null)
{
    source.Text += line + '\n';
    line = reader.ReadLine();
}
This is a while loop that iterates through the file one line at a time until
there are no more lines available.
The Boolean expression at the start of the while loop examines the value
in the line variable. If it is not null, the body of the loop displays the
current line of text by appending it to the Text property of the source
text box, together with a newline character (‘\n’—the ReadLine method
of the TextReader object strips out the newline characters as it reads
each line, so the code needs to add it back in again). The while loop then
reads in the next line of text before performing the next iteration. The
while loop finishes when there is no more text to read in the file, and the
ReadLine method returns a null value.
12. Type the following statement after the closing brace at the end of the
while loop:
reader.Dispose();
This statement releases the resources associated with the file and closes
it. This is good practice because it makes it possible for other
Download from finelybook PI:EMAIL
209
applications to use the file and also frees up any memory and other
resources used to access the file.
13. On the Debug menu, click Start Debugging.
14. When the form appears, click Open File.
15. In the Open file picker, move to the \Microsoft Press\VCSBS\Chapter
5\WhileStatement\WhileStatement folder in your Documents folder,
select the file MainPage.xaml.cs, and then click Open.
Note Don’t try to open a file that does not contain text. If you
attempt to open an executable program or a graphics file, for
example, the application will simply display a text representation
of the binary information in this file. If the file is large, it might
hang the application, requiring you to terminate it forcibly.
This time, the contents of the selected file appear in the text box—you
should recognize the code that you have been editing. The following
image shows the application running:
Download from finelybook PI:EMAIL
210
16. Scroll through the text in the text box and find the displayData method.
Verify that this method contains the code you just added.
17. Return to Visual Studio and stop debugging.
Writing for statements
In C#, most while statements have the following general structure:
Click here to view code image
initialization
while (Boolean expression)
{
  statement
  update control variable
}
The for statement in C# provides a more formal version of this kind of
construct by combining the initialization, Boolean expression, and code that
updates the control variable. You’ll find the for statement useful because in a
for statement, it is much harder to accidentally leave out the code that
initializes or updates the control variable, so you are less likely to write code
Download from finelybook PI:EMAIL
211
that loops forever. Here is the syntax of a for statement:
Click here to view code image
for (initialization; Boolean expression; update control variable)
statement
The statement that forms the body of the for construct can be a single line
of code or a code block enclosed in braces.
You can rephrase the while loop shown earlier that displays the integers
from 0 through 9 as the following for loop:
Click here to view code image
for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}
The initialization occurs just once, at the very beginning of the loop. Then,
if the Boolean expression evaluates to true, the statement runs. The control
variable update occurs, and then the Boolean expression is reevaluated. If the
condition is still true, the statement is executed again, the control variable is
updated, the Boolean expression is evaluated again, and so on.
Notice that the initialization occurs only once, that the statement in the
body of the loop always executes before the update occurs, and that the
update occurs before the Boolean expression reevaluates.
Tip As with the while statement, it is considered a good practice to
always use a code block even if the body of the for loop contains just a
single statement. If you add additional statements to the body of the for
loop later, this approach will help to ensure that your code is always
executed as part of each iteration.
You can omit any of the three parts of a for statement. If you omit the
Boolean expression, it defaults to true, so the following for statement runs
forever:
Download from finelybook PI:EMAIL
212
Click here to view code image
for (int i = 0; ;i++)
{
    Console.WriteLine("somebody stop me!");
}
If you omit the initialization and update parts, you have a strangely spelled
while loop:
Click here to view code image
int i = 0;
for (; i < 10; )
{
    Console.WriteLine(i);
    i++;
}
Note The initialization, Boolean expression, and update control variable
parts of a for statement must always be separated by semicolons, even
when they are omitted.
You can also provide multiple initializations and multiple updates in a for
loop. (You can have only one Boolean expression, though.) To achieve this,
separate the various initializations and updates with commas, as shown in the
following example:
Click here to view code image
for (int i = 0, j = 10; i <= j; i++, j--)
{
    ...
}
As a final example, here is the while loop from the preceding exercise
recast as a for loop:
Click here to view code image
for (string line = reader.ReadLine(); line != null; line =
reader.ReadLine())
{
Download from finelybook PI:EMAIL
213
    source.Text += line + '\n';
}
Understanding for statement scope
You might have noticed that you can declare a variable in the initialization
part of a for statement. That variable is scoped to the body of the for
statement and disappears when the for statement finishes. This rule has two
important consequences. First, you cannot use that variable after the for
statement has ended because it’s no longer in scope. Here’s an example:
Click here to view code image
for (int i = 0; i < 10; i++)
{
    ...
}
Console.WriteLine(i); // compile-time error
Second, you can write two or more for statements that reuse the same
variable name because each variable is in a different scope, as shown in the
following code:
Click here to view code image
for (int i = 0; i < 10; i++)
{
    ...
}
for (int i = 0; i < 20; i += 2) // okay
{
    ...
}
for (int i = 0; i < 10; i++)
{
    ...
}
for (int i = 0; i < 20; i += 2) // okay
{
    ...
}
Writing do statements
Download from finelybook PI:EMAIL
214
Both the while and for statements test their Boolean expression at the
beginning of the loop. This means that if the expression evaluates to false on
the first test, the body of the loop does not run—not even once. The do
statement is different: its Boolean expression is evaluated after each iteration,
so the body always executes at least once.
The syntax of the do statement is as follows (don’t forget the final
semicolon):
Click here to view code image
do
    statement
while (booleanExpression);
You must use a statement block if the body of the loop contains more than
one statement (the compiler will report a syntax error if you don’t). Here’s a
version of the example that writes the values 0 through 9 to the console, this
time constructed by using a do statement:
Click here to view code image
int i = 0;
do