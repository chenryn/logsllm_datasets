Question: Consider the following code snippets. Which of the following code snippets correctly manage memory to prevent the vulnerability associated with freeing memory not on the heap?
"A": "void processRecords() { 
  int recordCount = 10; 
  record_t records[recordCount]; 
  /* Process records */ 
  ... 
  free(records); 
}",
"B": "void allocateRecords() { 
  record_t *records = (record_t*)malloc(sizeof(record_t) * MAX_SIZE); 
  /* Use the allocated records */ 
  ... 
  free(records); 
}",
"C": "record_t *globalRecords; 
void initRecords() { 
  globalRecords = (record_t*)malloc(sizeof(record_t) * MAX_SIZE); 
} 
void clearRecords() { 
  free(globalRecords); 
}",
"D": "void createRecords() { 
  record_t *records = new record_t[MAX_SIZE]; 
  /* Populate records */ 
  ... 
  delete[] records; 
}"
Answer: BC