blocks from the stash can be evicted, 2 evictions are performed for
each access. The additional eviction, although forcing the ORAM
to fetch and write back 3 paths per access, allows to keep the stash
about 1 order of magnitude smaller than Path and Ring ORAMs.
3 DOUBLY OBLIVIOUS RAMS
In this section, we describe the design of oblivious clients for the
three ORAMs described in Section 2.2, obtaining three correspond-
ing DORAMs. In doing this, we employ two operations: oblivious
write OblWrite and oblivious swap OblSwap. The former (resp.
the latter), given three input parameters cond, a and b, writes the
Efficient Oblivious Substring Search via Architectural Support
ACSAC 2020, December 7–11, 2020, Austin, USA
Algorithm 2: FindBlock in Path/Circuit DORAMs
Input: bid: id of the block to be retrieved from the DORAM
lid: id of the path where block bid may be located
lid′: id of the path where block bid will be evicted
Output: The block with id bid
Data: Stash: S blocks not evicted to the DORAM yet
1 Blks ← ReadPath(lid) , dest.bid ← ⊥
2 foreach blk ∈ Blks do
OblSwap(blk.bid = bid, dest, blk)
3
4 write ← dest.bid = bid
5 foreach blk ∈ Stash do
6
7
8
9
10 WritePath(Blks, lid)
11 return dest
OblWrite(bid = blk.bid, dest, blk)
OblWrite(blk.bid = ⊥ ∧ write, blk, dest)
OblWrite(bid = blk.bid, blk.lid, lid′)
write ← write ∧ blk.bid (cid:44) bid
content of b to a (resp. swaps the content of b and a) if and only
the boolean expression cond is true. To implement OblWrite, we
employ the x86_64 assembly instruction CMOVNZ, which moves the
content of the source operand to the destination one if the zero flag
is not set. CMOVNZ is oblivious as its operands are always loaded
in the CPU and written back regardless of the status of the flag.
The OblSwap operation, given the input parameters cond, a, b, first
computes OblWrite(cond, tmp, a ⊕ b), where tmp is initially set to
0; then, it updates a and b with a ⊕ tmp and b ⊕ tmp, respectively.
In all our DORAMs, the stash cannot have a dynamic size, lest
the number of blocks moved between the DORAM and the stash is
leaked. Thus, in all our DORAMs the stash has a fixed size S, and an
overflow error occurs if the number of blocks in the stash is higher
than S. Empty entries in the stash are filled with dummy blocks.
The stash analysis of Path, Ring and Circuit ORAMs provides upper
bounds for S making the probability of overflows negligible.
If a recursive position map is employed, the ORAMs that store
the position map must be doubly oblivious too. Once a block from
each of these DORAMs is fetched, the client obliviously swaps
each one of the C entries in the block with a memory location
dest, initialized with the new leaf id lid′, actually performing the
swap only for the entry corresponding to the block to be retrieved
from the next DORAM in the recursion. Eventually, dest stores
the id of the path to be fetched from the next DORAM, while the
corresponding entry in the block stores the updated id lid′.
3.1 Path DORAM
We start with a description of the oblivious Eviction procedure
proposed in ZeroTrace [40] and employed with minor modifica-
tions in all existing works. This procedure, for each block of the
stash (even dummy ones), sweeps over the evicted path, which is
initialized with dummy blocks, from the leaf to the root bucket,
obliviously swapping each block with the entry of the stash at
hand; the block of the stash is actually swapped with a dummy
block found in the deepest non-full bucket that can store the block
at hand. The computational cost of ZeroTrace Eviction is thus
O((S+log(N)·Z) log(N)·Z·B), since both the blocks of the stash and
the blocks of the path fetched by the FindBlock procedure must
be evicted.
Table 1: Format of the bucket metadata in Ring ORAM.
Field
Bids
Lids
IV
Invalid
Cnt
Bit width
log(N +1)
log(N +1)
λ
1
log D
Size
Z +D
Z
1
Z +D
1
Description
Block ids of all blocks
Leaf ids of real blocks
IV for bucket decryption
Flags keeping track of invalid blocks
Count accesses to bucket
In our Path DORAM, we modify this Eviction procedure by
introducing an optimization, called in-place eviction, that allows
to approximately halve its cost. Indeed, instead of appending all
the blocks of the evicted path to the stash and then evict them as
all other blocks in the stash, the client tries to push these blocks
as down as possible in the path before performing stash eviction.
This optimization allows to swap a block in the path only with
deeper buckets instead of swapping it with all the buckets in the
path. Even with this optimization, our oblivious Eviction still
exhibits an O(log(N)·Z)) computational overhead with respect to
the non oblivious Eviction of Path ORAM. To reduce this overhead,
which severely affects the performance of DORAM accesses, in our
Path DORAM we aim at making evictions less frequent. To make
evictions unnecessary after each FindBlock, as in Ring ORAM, we
need to ensure that only one block is appended to the stash for
each access. We achieve this employing the FindBlock procedure
of Circuit ORAM, which actually moves to the stash only the block
bid, if found in the fetched path, and writes back the fetched path
to the tree, replacing the block bid with a dummy one. We note
that, although we add a write back operation for each access, this
strategy allows our Path DORAM to perform evictions every A≥1
accesses; since a write back costs O(log(N)·Z·B), it is asymptotically
faster than an eviction, thus improving the performance of our Path
DORAM. To choose which path to evict, Path DORAM employs the
same deterministic schedule of Ring ORAM; thus the same values
of Z, S and A suggested by authors of Ring ORAM [36] can be
employed in our Path DORAM.
Our oblivious FindBlock procedure (see Alg. 2) starts by fetching
the path with id lid from the DORAM tree (line 1) and it obliviously
looks for the block with id bid over the fetched path (lines 2- 3). If the
block is found, it is moved to dest and replaced by a dummy block
in the fetched path (line 3), otherwise neither dest nor the fetched
path are modified. Then, the FindBlock procedure obliviously
sweeps (lines 4-9) over the stash to either write to the stash the
block bid, if found in the fetched path, or to search the block in the
stash. In the former case, the proper update of write flag (line 9)
ensures that the block bid is written to the first empty entry in the
stash (line 7); in the latter case, the block bid found in the stash
is written to dest (line 6). In both cases, the leaf id of the block
bid in the stash is updated to lid′ (line 8). Finally, the FindBlock
procedure writes back the fetched path to the DORAM tree (line 10).
3.2 Ring DORAM
We recall that Ring ORAM enriches each bucket with metadata
that are employed by the SelectOffset procedure to choose, for
each bucket, one block to be retrieved from the ORAM tree. The
structure of the bucket metadata employed in our Ring DORAM is
outlined in Tab. 1. The first field of the metadata stores the ids of the
ACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
Algorithm 3: SelectOffset in Ring DORAM
Input: bid: id of the block to be fetched from the ORAM
Output: off: position in the bucket of the block with id bid, if found,
Meta: metadata of a bucket of the path where block bid may reside
otherwise the position of a randomly chosen valid dummy
1 found ← false, max ← −1
2 for i ∈ {0, . . . , Z + D − 1} do
if ¬Meta.invalid[i] then
R← {0, . . . , 255}
3
4
5
6
7
8
9 return off
rnd
max_dummy ← Meta.bids[i]=⊥ ∧ rnd > max
sel ← Meta.bids[i]=bid ∨ (max_dummy ∧ ¬found)
OblWrite(sel, off, i), OblWrite(max_dummy, max, rnd)
found ← found ∨ Meta.bids[i] = bid
blocks found in the Z +D slots of the bucket. We store also the ids of
dummy blocks to allow the proper computation of the offset of the
block chosen in the SelectOffset procedure. The last two fields
of the metadata are needed to ensure two fundamental properties
about Ring DORAM: i) each block is fetched from its bucket at most
once since the last time the bucket was written back to the DORAM
tree; ii) each bucket must be accessed at most D times since the
last time it was written to the DORAM tree. The first property is
needed to prevent the adversary from distinguishing dummy blocks
from real ones from their access frequencies. Indeed, a real block
is chosen by SelectOffset procedure, and fetched from a bucket,
only when it corresponds to the block bid that must be retrieved
by FindBlock, while a dummy block may be chosen in all other
cases. To ensure this property, the SelectOffset procedure must
always choose a valid block, with a block being marked as invalid
in the bucket metadata as soon as it is chosen by SelectOffset.
The second property ensures that there are always enough dummy
blocks to be chosen in a bucket by SelectOffset: indeed, after
D accesses to the bucket, no valid dummy blocks may have left
in the bucket. To this extent, the bucket metadata keeps track of
the number of accesses to the bucket with a counter cnt; when D
accesses are reached, a maintenance task called EarlyReshuffle
must be invoked. This procedure, upon receiving the Z valid blocks
of the bucket, randomly shuffles them with D dummy blocks; then,
the bucket is encrypted and written back to the DORAM tree. As
the blocks are re-shuffled, they can all be marked as valid, and cnt
is reset as the bucket has at least D valid dummy blocks available.
We now describe the oblivious procedures of our Ring DORAM.
The SelectOffset procedure (Alg. 3) iterates over all the blocks in
the bucket, skipping invalid ones (line 3) as they cannot be chosen.
Note that there is no need to hide which blocks are skipped, as
the adversary can easily know which blocks are invalid by logging
blocks chosen in previous accesses to the bucket at hand. For each
valid block, a number rnd is uniformly sampled from a fixed do-
main (e.g., {0, . . . , 255} in line 4) and the offset of the valid block
is obliviously written to the variable off (line 7). The update of
max_dummy (line 5), sel (line 6) and found (line 8) flags ensures
that eventually the variable off stores the position in the bucket of
the block with id bid, if found in the bucket; otherwise, off stores
the position of the valid dummy block with the highest random
number among the ones sampled for all the dummy valid blocks.
As all these numbers are sampled from the same distribution, each
one of them has the same probability of being the highest, thus this
Algorithm 4: FindBlock in Ring DORAM
Input: bid: id of the block to be retrieved from the DORAM
lid: id of the path where block bid may be located
lid′: id of the path where block bid will be evicted
Output: the block with id bid
Data: Stash: S real/dummy blocks not evicted to the DORAM yet
OblSwap(blk.bid = bid, dest, blk)