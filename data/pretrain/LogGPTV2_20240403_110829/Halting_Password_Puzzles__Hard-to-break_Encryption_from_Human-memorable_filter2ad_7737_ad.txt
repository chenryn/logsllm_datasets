π(t) =(cid:18)2 t1 + ... + tk−1
(cid:19) ≈ α + 1
+ tk
t
γ = tk
t
α − 1 γ ,
∈ [1, α) .
t
for some
Applying the scale invariance principle, we know that the
expected π(t) should be constant for varying t, which
requires that γ be distributed with density ∝ γ−1:
(x−1/ln α for 1 ≤ x  crypt.aes
In the Bourne shell (/bin/sh), the string 4 decrypted.bin
This command works similarly.
If the passphrase is
good, hkdf will feed the right key to aespipe; oth-
erwise, it will run forever until interrupted by Control-C.
The hkdf tool is even easier to interface with other
programs, e.g., gpg [15]:
# hkdf -k crypt.v | gpg --passphrase-fd 0 \
-o crypt.gpg -c plain.bin
# hkdf < crypt.v | gpg --passphrase-fd 0 \
-o decrypted.bin crypt.gpg
This is merely suggestive; more sophisticated scripts
could merge the ciphertext into a single ﬁle.
GnuPG Key-rings. Since the user passphrase is the
Achilles’ heel of the system, an excellent use of the
hkdf/gpg synergy is to replace gpg’s default key-
ring encryption with something stronger. To quote the
gpg(1) manual page:
WARNINGS
Use a *good* password for your user ac-
count and a *good* passphrase to protect
your secret key. This passphrase is the
weakest part of the whole system. Pro-
grams to do dictionary attacks on your se-
cret keyring are very easy to write and so
you should protect your ”˜/.gnupg/” di-
rectory very well.
HKDFs are an excellent way to add protection with or
without changing the passphrase. Our hkdf tool and a
small script to bind it to gpg are all that is needed.
4.3 Concrete Security Gains
We now quantify the security gained by upgrading True-
Crypt and GnuPG from KDF to HKDF. Our test plat-
form is a 1.5 GHz single-core x86 laptop running Debian
Linux.
Baseline Measurements. First we clock the various
built-in KDFs to establish the benchmark: cf. Table 1.
These timings were obtained by instrumenting the rel-
evant sections of code, in order to suppress overheads
and obtain an accurate indication of the amount of work
needed for a brute-force attack.
HKDF Performance. Next, we measure the perfor-
mance of the HKDF implementation, and the rate at
which the size of the state is increased: cf. Table 2. As
we would expect, the raw throughput is very close to but
slightly less than a “pure” implementation of the corre-
sponding hash function (e.g., compare the SHA1 instan-
tiation with gpg above). The discrepancy is caused by
the modular reduction in the inner loop of the HKDF al-
gorithm.
USENIX Association
16th USENIX Security Symposium
131
Attainable Security Gains. We now ﬁnd the actual
key derivation complexity (time and space) for several
user-programmed delays, and what this entails for an
optimal attacker. We ﬁx q = 57600: cf. Table 3.
The last column shows the actual security gain provied
by HKDFs in comparison to the benchmarks. For the
most casual uses (where the HKDF preparation is ﬁn-
ished without deliberate delay), we expect a steady se-
curity gain of about ∼ 7 bits over TrueCrypt, and about
∼ 11 bits over GnuPG. For more sensitive uses, gains of
∼ 15–20 bits can be attained with a few minutes of pa-
tience. For long-term backups where two-hour waits can
be justiﬁed, the gain reaches ∼ 23 bits over GnuPG. The
security gain further increases by ∼ log2(N) bits in all
cases if the user’s machine has N CPUs.
To give a very concrete example, a GnuPG secret key
ﬁle will be equally well protected with an 11-letter all-
lowercase password (∼ 51 bits of entropy) by gpg it-
self, as by our hkdf system with a 6-letter password
(∼ 28 bits of entropy) plus a two-hour wait—or eight-
minute on a sixteen-core machine. An infrastructure the
scale of Google (∼ 105 CPUs) would take two years to
crack either.