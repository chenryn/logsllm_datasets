periments and Technologies (CoNEXT), 2017.
[23] Sanjam Garg, Craig Gentry, Shai Halevi, Mariana
Raykova, Amit Sahai, and Brent Waters. Candidate
indistinguishability obfuscation and functional encryp-
tion for all circuits. SIAM Journal on Computing, 45(3),
2016.
[12] Hyunwoo Lee, Zach Smith, Junghwan Lim, and
Gyeongjae Choi.
maTLS: How to make TLS
middlebox-aware? In Network and Distributed System
Security Symposium (NDSS), 2019.
[13] Nicolas Desmoulins, Pierre-Alain Fouque, Cristina
Onete, and Olivier Sanders. Pattern matching on en-
In International Conference on the
crypted streams.
Theory and Application of Cryptology and Information
Security (ASIACRYPT), 2018.
[14] Justine Sherry, Chang Lan, Raluca Ada Popa, and
Sylvia Ratnasamy. Blindbox: Deep packet inspection
over encrypted trafﬁc. In ACM SIGCOMM, 2015.
[15] S´ebastien Canard, A¨ıda Diop, Nizar Kheir, Marie Pain-
BlindIDS: Market-
davoine, and Mohamed Sabt.
compliant and privacy-friendly intrusion detection sys-
In ACM Asia Conference
tem over encrypted trafﬁc.
on Computer & Communications Security (ASIACCS),
2017.
[16] Chang Lan, Justine Sherry, Raluca Ada Popa, Sylvia
Ratnasamy, and Zhi Liu. Embark: Securely outsourc-
In Symposium on Net-
ing middleboxes to the cloud.
worked Systems Design and Implementation (NSDI),
2016.
[17] Yossi Gilad, Amir Herzberg, Michael Sudkovitch, and
Michael Goberman. CDN-on-demand: An affordable
In Network and
DDoS defense via untrusted clouds.
Distributed System Security Symposium (NDSS), 2016.
[18] ModSecurity: Open Source Web Application Firewall.
https://modsecurity.org/.
[19] OWASP: The Open Web Application Security Project.
https://www.owasp.org.
[20] Amit A. Levy, Henry Corrigan-Gibbs, and Dan Boneh.
Stickler: Defending against malicious content distribu-
tion networks in an unmodiﬁed browser. In IEEE Sym-
posium on Security and Privacy, 2016.
[21] Chris Lesniewski-Laas and M. Frans Kaashoek. SSL
splitting: Securely serving data from untrusted caches.
In USENIX Annual Technical Conference, 2003.
[22] Craig Gentry. Fully homomorphic encryption using
ideal lattices. In ACM Symposium on Theory of Com-
puting (STOC), 2009.
[24] Pierre-Louis Aublin, Florian Kelbert, Dan OKeeffe,
Divya Muthukumaran, Christian Priebe, Joshua Lind,
Robert Krahn, Christof Fetzer, David M. Eyers, and Pe-
ter R. Pietzuch. TaLoS : Secure and transparent TLS
termination inside SGX enclaves. Technical Report,
2017.
[25] Andrew Baumann, Marcus Peinado, and Galen Hunt.
Shielding applications from an untrusted cloud with
In Symposium on Operating Systems Design
Haven.
and Implementation (OSDI), 2014.
[26] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas
Knauth, Andre Martin, Christian Priebe, Joshua Lind,
Divya Muthukumaran, Dan O’Keeffe, Mark L Still-
well, David Goltzsche, Dave Eyers, R¨udiger Kapitza,
Peter Pietzuch, and Christof Fetzer. SCONE: Secure
In Symposium on
Linux containers with Intel SGX.
Operating Systems Design and Implementation (OSDI),
2016.
[27] Chia-Che Tsai, Donald E. Porter, and Mona Vij.
Graphene-SGX: A practical library OS for unmodiﬁed
In USENIX Annual Technical
applications on SGX.
Conference, 2017.
[28] Hongliang Liang, Mingyu Li, Qiong Zhang, Yue Yu,
Lin Jiang, and Yixiu Chen. Aurora: Providing trusted
system services for enclaves on an untrusted system.
arXiv preprint arXiv:1802.03530, 2018.
[29] Juhyeng Han, Seongmin Kim, Jaehyeong Ha, and
Dongsu Han. SGX-Box: Enabling visibility on en-
crypted trafﬁc using a secure middlebox module.
In
Proceedings of the First Asia-Paciﬁc Workshop on Net-
working, 2017.
[30] Dmitrii Kuvaiskii, Somnath Chakrabarti, and Mona Vij.
Snort intrusion detection system with Intel Software
Guard Extension (Intel SGX). CoRR, 2018.
[31] Rishabh Poddar, Chang Lan, Raluca Ada Popa, and
Sylvia Ratnasamy. Safebricks: Shielding network func-
tions in the cloud. In Symposium on Networked Systems
Design and Implementation (NSDI), 2018.
[32] Bohdan Trach, Alfred Krohmer, Franz Gregor, Sergei
Arnautov, Pramod Bhatotia, and Christof Fetzer.
Shieldbox: Secure middleboxes using shielded execu-
tion. In Symposium on SDR Research (SOSR), 2018.
USENIX Association
29th USENIX Security Symposium    749
[33] David Goltzsche, Signe R¨usch, Manuel Nieke,
S´ebastien Vaucher, Nico Weichbrodt, Valerio Schi-
avoni, Pierre-Louis Aublin, Paolo Cosa, Christof Fet-
zer, Pascal Felber, et al. Endbox: scalable middlebox
functions using client-side trusted execution. 2018.
[34] Huayi Duan, Xingliang Yuan, and Cong Wang. Light-
box: SGX-assisted secure network functions at near-
native speed. CoRR, abs/1706.06261, 2017.
[35] Ketan Bhardwaj, Ming-Wei Shih, Ada Gavrilovska,
Taesoo Kim, and Chengyu Song. SPX: Preserving end-
arXiv preprint
to-end security for edge computing.
arXiv:1809.09038, 2018.
[36] Devdatta Akhawe, Frederik Braun, Franc¸ois Marier,
Subresource integrity, 2016.
and Joel Weinberger.
https://www.w3.org/TR/SRI/.
[37] Mike West. Content security policy level 3, 2018.
https://www.w3.org/TR/CSP3/.
[38] Craig Gentry. Computing arbitrary functions of en-
crypted data. Communications of the ACM, 53(3),
2010.
[39] Intel Software Guard Extensions (Intel SGX). https:
//software.intel.com/en-us/sgx.
[40] Frank McKeen, Ilya Alexandrovich, Alex Berenzon,
Carlos V Rozas, Hisham Shaﬁ, Vedvyas Shanbhogue,
and Uday R. Savagaonkar. Innovative instructions and
software model for isolated execution. In International
Workshop on Hardware and Architectural Support for
Security and Privacy (HASP), 2013.
[41] Simon Johnson, Vinnie Scarlata, Carlos Rozas, Ernie
Brickell, and Frank Mckeen.
Intel Software Guard
Extensions: EPID Provisioning and Attestation Ser-
vices. Available from https://software.intel.
com/sites/default/files/managed/ac/40/
2016%20WW10%20sgx%20provisioning%20and%
20attesatation%20final.pdf, 2016.
[42] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent
Scarlata. Innovative technology for CPU based Attesta-
tion and Sealing. In International Workshop on Hard-
ware and Architectural Support for Security and Pri-
vacy (HASP), 2013.
[43] Alexander B.
Introduction to Intel SGX Sealing.
Available at https://software.intel.com/en-
us/blogs/2016/05/04/introduction-to-
intel-sgx-sealing, 2016.
[44] Intel Corporation.
tensions SDK for Linux OS.
https://01.org/sites/default/files/
Intel Software Guard Ex-
Available from
documentation/intel_sgx_sdk_developer_
reference_for_linux_os_pdf.pdf, 2016.
[45] Shanwei Cen and Bo Zhang. Trusted Time and Mono-
tonic Counters with Intel Software Guard Extensions
Platform Services. Technical report, Intel Corporation,
2017.
[46] Jethro Gideon Beekman. Improving cloud security us-
ing secure enclaves. PhD thesis, UC Berkeley, 2016.
[47] Rufaida Ahmed, Zirak Zaheer, Richard Li, and Robert
Ricci. Harpocrates: Giving out your secrets and keep-
ing them too. In IEEE/ACM Symposium on Edge Com-
puting (SEC), 2018.
[48] Changzheng Wei, Jian Li, Weigang Li, Ping Yu, and
Haibing Guan. Styx: a trusted and accelerated hierar-
chical SSL key management and distribution system for
cloud based CDN application. In ACM Symposium on
Cloud Computing (SoCC), 2017.
[49] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel
Genkin, Baris Kasikci, Frank Piessens, Mark Silber-
stein, Thomas F Wenisch, Yuval Yarom, and Raoul
Strackx. Foreshadow: Extracting the keys to the Intel
SGX kingdom with transient out-of-order execution. In
USENIX Security Symposium, 2018.
[50] Oﬁr Weisse, Jo Van Bulck, Marina Minkin, Daniel
Genkin, Baris Kasikci, Frank Piessens, Mark Silber-
stein, Raoul Strackx, Thomas F Wenisch, and Yuval
Yarom. Foreshadow-NG: Breaking the virtual memory
abstraction with transient out-of-order execution. Tech-
nical report, 2018.
[51] Intel SGX and Side-Channels. https://software.
intel.com/en-us/articles/intel-sgx-and-
side-channels.
[52] Intel Software Guard Extensions (Intel SGX) Devel-
opers Guide. https://software.intel.com/en-
us/download/intel-software-guard-
extensions-intel-sgx-developer-guide.
[53] L1 Terminal Fault.
https://software.intel.
com/security-software-guidance/software-
guidance/l1-terminal-fault.
[54] Claudio Canella, Jo Van Bulck, Michael Schwarz,
Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank
Piessens, Dmitry Evtyushkin, and Daniel Gruss. A sys-
tematic evaluation of transient execution attacks and de-
fenses. arXiv preprint arXiv:1811.05441, 2018.
[55] Mengjia Yan, Jiho Choi, Dimitrios Skarlatos, Adam
Morrison, Christopher Fletcher, and Josep Torrellas. In-
visispec: Making speculative execution invisible in the
750    29th USENIX Security Symposium
USENIX Association
cache hierarchy.
sium on Microarchitecture (MICRO), 2018.
In IEEE/ACM International Sympo-
[56] Oleksii Oleksenko, Bohdan Trach, Robert Krahn, Mark
Silberstein, and Christof Fetzer. Varys: Protecting
SGX enclaves from practical side-channel attacks. In
USENIX Annual Technical Conference, 2018.
[71] Oﬁr Weisse, Valeria Bertacco, and Todd Austin. Re-
gaining lost cycles with HotCalls: A fast interface for
SGX secure enclaves. In International Symposium on
Computer Architecture (ISCA), 2017.
[72] BearSSL: A Smaller SSL/TLS Library.
bearssl.org/.
https://
[57] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Mar-
cus Peinado. T-SGX: Eradicating controlled-channel
attacks against enclave programs. In Network and Dis-
tributed System Security Symposium (NDSS), 2017.
[73] Nico Weichbrodt, Pierre-Louis Aublin, and R¨udiger
Kapitza. sgx-perf: A performance analysis tool for Intel
SGX enclaves. In ACM/IFIP International Middleware
Conference (Middleware), 2018.
[58] Free Software Foundation. GNU Hurd. http://www.
gnu.org/software/hurd/hurd.html.
[74] Intel Corporation. Linux SGX Kernel Driver. https:
//github.com/intel/linux-sgx-driver.
[59] J. Mark Stevenson and Daniel P. Julin. Mach-US:
UNIX on generic OS object servers. In USENIX Tech-
nical Conference, 1995.
[60] Available from MITRE, CVE-ID CVE-2014-0160,
2014. CVE-2014-0160 (Heartbleed bug).
[61] Lars L¨uhr. ayeks’ SGX Hardware github repository.
https://github.com/ayeks/SGX-hardware.
[75] Jens Axboe. Fio 3.13. git:git.kernel.dk/fio.
git.
[62] Thomas Knauth, Michael
Somnath
Chakrabarti, Li Lei, Cedric Xing, and Mona Vij.
Integrating remote attestation with transport
layer
security. CoRR, abs/1801.05863, 2018.
Steiner,
[63] R. Barnes et al. Automatic certiﬁcate management en-
vironment (ACME). daft-ietf-acme-acme-18, Decem-
ber 2018.
[64] HAProxy: The Reliable, High Performance TCP/HTTP
Load Balancer. https://www.haproxy.org/.
[65] Grzegorz Kostka.
gkostka/lwext4.
lwext4. https://github.com/
[66] The XTS-AES Tweakable Block Cipher.
1619-2007, 2008.
IEEE Std
[67] Morris J. Dworkin. Recommendation for Block Cipher
Modes of Operation: The XTS-AES Mode for Conﬁ-
dentiality on Storage Devices. NIST Special Publica-
tion 800-38E, 2010.
[68] Roughtime
protocol.
https://roughtime.
googlesource.com/roughtime/+/HEAD/
PROTOCOL.md.
[69] Dmitrii Kuvaiskii. Graphene-SGX Exitless. https://
github.com/dimakuv/graphene/tree/exitless.
[70] Meni Orenbach, Pavel Lifshits, Marina Minkin, and
Mark Silberstein. Eleos: ExitLess OS services for SGX
In European Conference on Computer Sys-
enclaves.
tems (EuroSys), 2017.
USENIX Association
29th USENIX Security Symposium    751