same functionality with different implementations), there will
be inherent limitations in enhancing the security.
C. Redundancy
Redundancy techniques provide multiple replicas of system
or network components providing the same functionality at
the network/application layer. In this section, we discuss how
these techniques are studied in the existing approaches.
1) Redundancy of Software Components: Yuan et al. [159]
proposed a redundancy method for web servers to prevent ma-
licious code injection attacks on a web server by developing a
self-protection model, including architectural adaptation threat
detection and mitigation. They used the so-called agreement-
based redundancy that provides replicas of software compo-
nents at runtime. However, this work did not investigate the
effectiveness of the proposed MTD mechanism.
2) Redundancy of Network Sessions: Li et al. [95] proposed
a trafﬁc morphing mechanism by adopting the concept of
MTD in terms of redundancy for cyber-physical system (CPS)
environments. The proposed trafﬁc morphing algorithm is
designed to protect CPS sessions by maintaining a number
of redundant network sessions which have the distributions of
inter-packet delays indistinguishable from those observed in
normal network sessions. A CPS message will be disseminated
via one of these sessions to meet its given time constraint. In
the process of dynamically adjusting the morphing process,
this work showed the low complexity of the proposed work
and high adaptivity to the dynamics of CPS sessions.
Pros and Cons: Unlike shufﬂing or diversity based MTD,
redundancy-based MTD has a greater bearing on service
availability to users, which is often measured by some concept
of system dependability (e.g., availability or reliability) in
which the availability (or reliability) can be easily interrupted
by performing shufﬂing or diversity based MTD, particularly
incurring interrupted services. Note that redundancy-based
MTD can be well-mingled with the other two techniques
with the aim of increasing both security and performance.
However, creating additional replicas of system components
(e.g., servers or paths) incurs an extra cost. In addition, if
redundancy-based MTD is not properly executed, it provides
an even greater chance for an attacker to perform attacks on a
larger attack surface (i.e., another server to attack or another
path to reach a target) than the system without the redundancy-
based MTD.
D. Hybrid
Hybrid MTD combines multiple MTD techniques among
the types (i.e., shufﬂing, diversity, and redundancy) to work in
cooperation. In this section, we discuss how MTD techniques
can be integrated to enhance system security and performance.
1) Diversity + Redundancy (D+R): Gorbenko et al. [59]
developed a web service based on the concept of redundancy
and diversity by providing diverse replicas of web services for
maximizing system dependability, which is assessed by avail-
ability, reliability, and/or service response time. However, this
work does not conduct an in-depth investigation of security
analysis.
2) Shufﬂing + Redundancy (S+R): Alavizadeh et al. [4]
combined shufﬂing with redundancy by developing shufﬂing-
based VM Live-Migration (VM-LM) and generating VM repli-
cas to enhance both security and dependability of a system.
The authors assessed the performance of the developed MTD
technique based on the metrics of System Risk (Risk) and
Reliability (R) to show how effective the combined MTD
technique is in a cloud environment. Similarly, Alavizadeh
et al. [6] conducted a substantial analysis to evaluate the
effectiveness of two other combinations of MTD techniques
through considering three key metrics, including Risk (Risk),
Attack Cost (AC), and Return on Attack (RoA). Based
on their deﬁnition, an appropriate MTD technique should
decrease Risk and RoA while increasing AC. The authors
showed that combining shufﬂing and diversity can optimally
meet these multiple objectives, whereas a single solution with
either shufﬂing or diversity cannot.
3) Shufﬂing + Diversity + Redundancy (S+D+R): Alav-
izadeh et al. [5] combined the three MTD techniques (i.e.,
S+D+R) in the virtualization layer of a cloud, in order to
quantify the cloud’s security level
through comprehensive
security analysis. Similar to [6], the authors investigated the
performance of the combined MTD techniques based on
formal graphical security models for the cloud environment
using the three metrics (i.e., Risk, RoA, and AC) plus system
availability (SA).
Pros and Cons: Hybrid MTD approaches based on more
than one MTD technique can introduce additional beneﬁts of
enhancing security, which may not possible under a single
technique based MTD solution. In particular, diversity or
redundancy combined with shufﬂing can signiﬁcantly increase
security while decreasing defense cost or service interruptions.
For example, MTD combining shufﬂing with diversity may not
require shufﬂing as frequent as an MTD with a shufﬂing only
solution because the diversity of system components can make
it harder for attackers to ﬁgure out their vulnerabilities. In
addition, redundancy can increase system availability leading
to high service quality provided to users with fewer interrup-
tions. However, as discussed earlier, it may introduce a larger
attack surface than a single MTD. It also requires additional
overhead and/or complexity in combining multiple techniques
as a single solution and encounters a complex, multi-objective
optimization problem with multiple operational constraints,
which is known to be an NP-hard problem [29].
E. Discussions on Operation-based MTD Techniques
From our literature review on MTD techniques based on the
three MTD classes (shufﬂing, diversity, and redundancy), we
observed the following:
• A large volume of shufﬂing-based MTD techniques:
Many shufﬂing-based MTD techniques, such as platform
migration or network topology changing, are combined with
diversity-based techniques so that their positive effect is
maximized to enhance security. However, critical tradeoffs
between security (e.g., security vulnerabilities reduced) and
performance (e.g., defense cost or service availability) have
not been thoroughly investigated.
• The improvement of security bounded by the vulner-
abilities of existing technologies leveraged by MTD:
Due to the nature of MTD leveraging existing technologies,
12
there is an inherent limitation in achieving security if the
existing technologies do not have a sufﬁcient
level of
security robustness. For example, the vulnerabilities in the
leveraged technologies (e.g., software vulnerabilities) cannot
be removed even if a diverse software stack is used.
• Redundancy-based MTD combined with other tech-
niques to ensure service availability: We noticed that
the redundancy-based MTD does not play a signiﬁcant
role as proactive MTD defense compared to the other
two techniques. Rather, redundancy-based MTD is used
to enhance service availability (or reliability), which can
be easily excluded when shufﬂing/diversity techniques are
solely used without consideration of the critical tradeoff
between enhanced security and defense cost introduced.
• Highly promising hybrid MTD with further investigation
to optimize its deployment: Hybrid MTD approaches are
very promising because they can achieve multiple objec-
tives of maximizing security with minimum defense cost
or maximum service availability when they are properly
implemented. However, additional overhead or complex-
ity introduced by combining multiple techniques is not
avoidable and it is necessary to conduct a very careful
examination about a hybrid MTD before it is deployed.
We summarize the key techniques under each class (i.e.,
shufﬂing, diversity, redundancy, or hybrid) of MTD techniques
and their pros and cons in Table IV.
V. KEY ATTACKS MITIGATED BY MTD AND LIMITATIONS
OF ATTACK MODELING IN MTD
In this section, we discuss the characteristics of attacks con-
sidered in the state-of-the-art MTD techniques. To be speciﬁc,
we discuss: (1) the characteristics of advanced attacks; (2) the
cyber kill chain model; (3) attack types mainly considered
in the existing MTD approaches; and (4) limitations of the
existing threat models.
A. Characteristics of Advanced Attacks
MTD techniques have been developed in order to deal
with increasingly more sophisticated, intelligent, and persistent
attacks equipped with more advanced tools. We discuss the key
characteristics of these advanced attackers as follows:
• Persistent attackers: In the existing MTD works, we found
that attackers are persistent, not performing an one-time
attack (e.g., APT attacks [20, 43, 46, 71]). This persistent
attack behavior is well observed in multi-stage attacks that
start from scanning attacks in the reconnaissance stage prior
to attacks obtaining access into a system (i.e., outside attack-
ers) and continue to the attack delivery and/or exploitation
stage after they break into the system (i.e., inside attackers).
• Adaptive attackers: Attackers are adaptive to dynamically
changing system conditions and external environmental
conditions, as they take into consideration both physical
and cyber accessibility. These attackers also have intelli-
gence with regard to their resources, executing adaptive at-
tacks [82, 155, 158] that wisely manage their resource limits
and at the same time opportunistically seek to compromise
an entire system.
• Stealthy attackers: Attackers do not exhibit an identiﬁable
attacking behavior all the time. They perform attacks in a
highly stealthy manner [3, 79], even showing well-behaved
features of good citizens. However, at a time when an attack
is calculated to inﬂict serious harm or damage to the system,
they exhibit attack behaviors. But they stay stealthy until the
time comes.
type of sophisticated attacks,
• Incentive-driven attackers: MTD is developed to deal
with smart attackers. In particular, attackers are intelligent
enough to execute attacks efﬁciently, such that the attack
has a minimal cost but maximal outcome. Therefore, we can
consider the attacker to be a rational actor that is sensitive to
incentives, such as attack success with minimum cost [49].
the Advanced
As a typical
Persistent Threat (APT) has been commonly considered as
an attack type techniques need to countermeasure [20, 43, 46,
71, 125, 168]. More or less, APT attackers show the above
features in performing their attacks and are often described
under the scenario of the Cyber Kill Chains [74]. In the next
section, we discuss an overview of the cyber kill chain and
the behavior of an APT attack at each stage of the chain so
as to understand how MTD techniques needs to consider APT
attacks.
B. Cyber Kill Chain
A new class of adversaries with sufﬁcient resources and
high intelligence has emerged, which is the so-called ‘Ad-
vanced Persistent Threat (APT),’ as mentioned in Section V-A.
APT is capable of multi-year intrusion campaigns to obtain
highly sensitive information, such as corporate proprietary
information or national security secrets [74]. In order to defend
against APTs, an intelligence-based defense model is critical
to defenders for mitigating risk and/or vulnerability of attacks
to a system. Hutchins et al. [74] developed the intelligence-
based defense model, called the Cyber Kill Chain (CKC),
based on multiple phases of a cyber attack. The CKC model
provides: (1) the description of intrusion phases; (2) mapping
the indicators of adversary kill chain to the courses of defense
actions; (3) the pattern identiﬁcation associating individual
intrusions with broader campaigns; and (4) the understanding
of iterative intelligence gathering.
The CKC model consists of the following phases [74]:
1) Reconnaissance: This phase involves researching, iden-
tifying, or selecting targets, often by crawling Internet
websites to obtain target
information, such as email
addresses, social relationships, or information regarding
particular technologies the target system uses.
2) Weaponization: This phase uses a remote access trojan
to be coupled with an exploit into a deliverable payload
(e.g., Adobe Portable Document Format or Microsoft
Ofﬁce documents) using an automated tool, called a
weaponizer.
3) Delivery: In this phase, the weapon is transmitted to a
targeted system using delivery vectors for weaponized
payload by APT actors (e.g., email attachments, website,
and/or USB removable media).
13
4) Exploitation: After the delivery of the weapon to a victim
host, the intruders’ code is triggered by exploitation, com-
monly targeting for an application or OS vulnerabilities.
5) Installation: The adversary can stay inside the target envi-
ronment by installing a remote access trojan or backdoor
on the target (or victim) system.
6) Command & Control (C2): Compromised hosts try to
establish a C2 channel by beaconing outbound to an
Internet controller server. Upon the establishment of the
C2 channel, the intruders can take control of the target
system (e.g., ‘hands on the keyboard’).
7) Actions on Objectives: After the previous six phases
are successfully performed, adversaries launch attacks
to breach security goals (e.g., data integrity, availability,
conﬁdentiality).
MIT Lincoln lab used a shorter version of the CKC model with
the phases of reconnaissance, access, exploit development,
attack launch, and persistence [113, 157]. In this MIT Lincoln
Lab version, the ‘access’ phase incorporates the ‘weaponiza-
tion’ and ’delivery’ phases from [74] and the ‘attack launch’
phase incorporates ‘installation’ and ‘C2’ [74] as well.
Limitations of Considering APT attacks: Existing MTD
approaches heavily consider attackers in the stage of recon-
naissance when the attackers are outside attackers. However,
in many cases, stealthy, undetected inside attackers are more
serious threats to the system when they are not properly
handled, such as detecting them by an IDS. But considering
a high volume of false detection, MTD can signiﬁcantly help
intrusion detection by adding another layer of defense against
the inside attackers.
C. Attack Types
In this section, we discuss more concrete examples of attack
behaviors considered in the existing MTD approaches.
• Reconnaissance (or scanning) attacks: Scanning attacks
are used by attackers to gather information and intelligence
about a target system before an actual attack is launched.
The attackers usually use a customized set of software tools
(e.g., Nmap [99]) to scan the target system (or network)
to ﬁnd information, such as OS types, IP addresses, port
numbers, running services, protocols, network topology, and
exploitable vulnerabilities. An attacker/scanner performs
scanning by sending probe packets (e.g., ICMP echo request
message or TCP SYN, TCP ACK, TCP Xmas, UDP port
scanning, etc.) to the target host(s) in the networks. To
counter reconnaissance attacks, several network address-
based approaches have been proposed [1, 3, 23, 44, 79, 88,
97, 138].
• DoS (or DDoS) attacks: A DDoS attack uses a large num-
ber of botnets (i.e., a set of bots, consisting of compromised
machines, or zombie machines) to attack a targeted system
by ﬂooding trafﬁc messages (e.g., UDP ﬂoods, ICMP ﬂoods,
and/or SYN ﬂoods) from multiple sources to force it to shut
down or to deny services to legitimate users. DDoS often
involve time-based attacks that can cause targeted systems
to miss critical deadlines for updates or to fail to complete
critical tasks. Common MTD approaches to handle these
Shufﬂing
Diversity
Redundancy
12
10
14
10
5
8
1
0
2
-
0
1
0
2
r
o
f
s
e
i
d
u
t
s
D
T
M
f
o
r
e