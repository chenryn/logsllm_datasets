Since SigGraph may be used for online live memory
analysis, we measure the overhead of memory scanning us-
ing SigGraph signatures. We run both SigGraph-generated
struct dentry {
    [0] atomic_t d_count;
    [4] unsigned int d_flags;
    [8] raw_spinlock_t raw_lock;
   [12] unsigned int magic;
   [16] unsigned int owner_cpu;
   [20] void *owner;
   [24] struct inode *d_inode;
   [28] struct hlist_node d_hash;
   [36] struct dentry *d_parent;
   ...
   [84] long unsigned int d_time;
   [88] struct dentry_operations *d_op;
   ...
}
fp1
0xc72bdf48: 0x00000000  0x00000010  0x00000001  0xdead4ead
0xc72bdf58: 0xffffffff  0xffffffff  0x00000000  0x00000000
0xc72bdf68: 0x00200200  0xc710e1c8  0x57409b84  0x00000009
0xc72bdf78: 0xc72bdfb4  0xc72bdf7c  0xc72bdf7c  0xc72bdef4
0xc72bdf88: 0xc017b72e  0xc72bdf8c  0xc72bdf8c  0xc72bdf94
0xc72bdf98: 0xc72bdf94  0x00000000  0x00000000  0xcf91fe00
fp2
0xcb1d5088: 0x00000000  0x00000010  0x00000001  0xdead4ead
0xcb1d5098: 0xffffffff  0xffffffff  0x00000000  0x00000000
0xcb1d50a8: 0x00200200  0xcb80ebc8  0xe50e3f24  0x0000000a
0xcb1d50b8: 0xcb1d50f4  0xcb1d50bc  0xcb1d50bc  0xcb1dcf84
0xcb1d50c8: 0xc017b72e  0xcb1d50cc  0xcb1d50cc  0xcb1d50d4
0xcb1d50d8: 0xcb1d50d4  0x026a0005  0x00000000  0xcf91fe00
true
0xc001c0a8: 0x00000000  0x00000000  0x00000001  0xdead4ead
0xc001c0b8: 0xffffffff  0xffffffff  0x00000000  0xc67617f4
0xc001c0c8: 0xc12a0e7c  0xc727faa8  0xbfbb9195  0x00000009
0xc001c0d8: 0xc001c114  0xc001c16c  0xc05b9f5c  0xc001c174
0xc001c0e8: 0xc727faec  0xc001c0ec  0xc001c0ec  0xc001c0f4
0xc001c0f8: 0xc001c0f4  0x8bfffff9  0x00000000  0xcf91fe00
struct sysfs_dirent {
   [0] atomic_t s_count;
   [4] struct list_head s_sibling;
  [12] struct list_head s_children;
  [20] void *s_element;
  [24] int s_type;
  [28] umode_t s_mode;
  [32] struct dentry *s_dentry;  [pruned]
  [36] struct iattr *s_iattr;    [pruned]
  [40] atomic_t s_event; }
fp1
0xcffaeffc: 0x00000000  0xcffa3800  0xcffaf800  0xcffa3808
0xcffaf00c: 0xcffaf808  0xcffc2800  0x00000000  0x00000000
0xcffaf01c: 0xcfd9bde0  0x00000008  0x70008086
fp2
0xcffaf7fc: 0x00000000  0xcffaf000  0xc03709a8  0xcffaf008
0xcffaf80c: 0xcffc2814  0xcffc2800  0x00000000  0x00000000
0xcffaf81c: 0xcfd9be60  0x00000000  0x12378086      
fp3
0xcffa37fc: 0x00000000  0xcffa3000  0xcffaf000  0xcffa3008
0xcffa380c: 0xcffaf008  0xcffc2800  0x00000000  0x00000000
0xcffa381c: 0xcfd9bd60  0x00000009  0x70108086  
fp4
0xcffa2ffc: 0x00000000  0xcffa2800  0xcffa3800  0xcffa2808
0xcffa300c: 0xcffa3808  0xcffc2800  0x00000000  0x00000000
0xcffa301c: 0xcfd9bce0  0x0000000b  0x71138086     
fp5
0xcffa27fc: 0x00000000  0xcffa2000  0xcffa3000  0xcffa2008
0xcffa280c: 0xcffa3008  0xcffc2800  0x00000000  0x00000000
0xcffa281c: 0xcfd9bc60  0x00000010  0x00b81013     
fp6
0xc037099c: 0x00000000  0xcffc2800  0xcffc2800  0xcffaf800
0xc03709ac: 0xcffa2000  0xc0327d79  0x00000000  0x00000124
0xc03709bc: 0xc01de4bc  0x00000000  0x00000000      
(a) False positives of dentry
(b) False positives of sysfs dirent
Figure 7. False positive analysis of dentry and sysfs dirent
scanners and the value invariant-based scanners on the test-
ing image (256MB) in a machine with 3GB RAM and
an Intel Core 2 Quad CPU (2.4GHz) running Ubuntu-9.04
(Linux kernel 2.6.28-17). The ﬁnal result of the normalized
overhead is shown in Figure 8.
As expected, value-invariant scanners always outper-
form SigGraph scanners. The main reason is that: A Sig-
Graph scanner needs to conduct address translation when-
ever there is a memory de-reference, which is not needed
by the value invariant scanner. If the depth of a SigGraph
signature is relatively low (e.g., D = 2), the SigGraph
scanner will be roughly 10-20 times slower than the cor-
responding value invariant scanner. Greater depth often
leads to higher overhead because more nodes will need to
be examined and more address translation needs to be per-
formed. The cases of inode security (D = 7) and
mb cache entry (D = 6) are such examples. Thus, for
data structures with low-depth signatures, their SigGraph
scanners can be used online. For example, in our exper-
iment, it takes only a few seconds to scan fs struct,
thread info, and files struct, and less than one
minute to scan task struct.
For data structures with a greater depth (due to iso-
morphism elimination) such as inode security and
mb cache entry, the scanning time is longer (e.g., about
15 minutes when we scan a 256MB memory image using
the scanner for inode security). However, we argue
that such cost is acceptable in the context of computer foren-
sics, where accuracy and completeness is more important
than efﬁciency. Moreover, the scanning time can be reduced
by various optimizations such as parallelization or having a
pre-scanning phase to preclude unlikely cases.
8 Security Applications
SigGraph is naturally applicable to memory image anal-
ysis/forensics. Besides, we have applied SigGraph to two
other security applications: kernel rootkit detection and ker-
nel version inference.
8.1 Kernel Rootkit Detection
By uncovering the kernel objects in a kernel memory im-
age, SigGraph provides the semantic view of kernel mem-
ory for kernel rootkit detection. We note the convenience
of using SigGraph: The user simply runs the data structure-
speciﬁc scanners on a subject memory image to uncover
kernel objects of interest.
Based on the kernel objects revealed by SigGraph, we
then follow the existing “view comparison” methodology
[10, 18, 33] for kernel rootkit detection: For a certain type
of kernel object (data structure), we compare (1) the num-
ber and values of its instances revealed by SigGraph with
(2) the relevant information returned by a corresponding
system utility (e.g., lsmod and ps for kernel modules and
processes, respectively). If a discrepancy between the two
i
e
m
T
n
o
i
t
u
c
e
x
E
d
e
z
i
l
a
m
r
o
N
 800
 700
 600
 500
 400
 300
 200
 100
 0
t
a
t
h
k
e
m
v
s
k
m
h
m
fil
e
f
s
_
fil
s
k
_
r
e
a
y
, 
m
_
s
tr
u
d
D
_
i
n
f
o
=
4
c
t, 
D
, 
D
=
2
=
2
_
m
e
e
m
s
tr
a
r
e
u
a
m
_
_
i
n
c
a
_
c
t, 
D
s
tr
u
o
d
e
=
2
c
t, 
D
s
_
s
tr
u
s
tr
u
c
h
c
t, 
=
5
y
, 
D
c
t, 
D
=
2
d
e
p
r
e
o
c
x
t
3
e
, 
D
n
tr
v
f
s
i
n
o
m
D
e
, 
D
=
3
=
3
_
i
n
f
o
=
4
, 
D
=
2
 Value-Invariant Scanner
 SigGraph Scanner
s
s
s
s
b
m
y
o
o
o
d
_
i
n
_
i
n
o
u
o
o
n
=
5
d
d
e
e
, 
D
d
e
s
f
s
_
_
s
t, 
e
c
d
ir
e
u
n
c
c
c
k
k
e
v
k
, 
D
=
2
D
=
5
e
t
_
e
t, 
a
ll
o
t, 
c
, 
D
_
i
n
f
o
=
4
rit
=
3
, 
y
, 
D
D
D
=
4
=
2
=
7
D
=
2
si
g
u
s
b
_
n
_
i
n
c
a
a
l
_
c
o
h
d
e
e
r
_
s
tr
u
s
tr
u
e
, 
_
e
D
n
tr
=
2
c
t, 
D
c
t, 
D
y
, 
D
=
2
=
6
=
6
Figure 8. Memory scanning performance
views is observed, we know that certain kernel object(s) is
being hidden, indicating a kernel rootkit attack.
Many kernel rootkits engage in kernel data hiding at-
tacks [10, 18, 33]. Among those, we experiment with
8 representative real-world kernel rootkits (which cover
the spectrum of data hiding techniques) and the results
are presented in the ﬁrst 8 rows in Table 4.
Sig-
Graph helps detect all of them. Speciﬁcally, we use the