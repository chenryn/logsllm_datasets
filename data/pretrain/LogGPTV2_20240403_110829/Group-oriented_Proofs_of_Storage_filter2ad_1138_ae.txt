# 优化后的文本

## 数学符号部分
原始文本中的数学符号部分似乎存在一些编码问题，导致显示不正确。以下是根据上下文推测的可能正确的数学表达式：

\[ g^{\varphi(\tilde{\pi}_i(α))}, \quad g \sum_{g} g^{\varphi(\tilde{\mu}(α))}, \quad g \sum_{i \in Q} \beta_i \varphi(\tilde{\pi}_i(α)), \quad g^{\psi(\tilde{\omega}(α))}, \quad g^{\alpha} \]

如果这些表达式与您的意图不符，请提供更详细的上下文或修正后的表达式。

## 性能评估
在本节中，我们对我们的GPoS实例化方案进行性能评估和比较。

### 理论分析
为了比较两种GPoS实例化的效率（见第4节），我们首先分析它们在每个阶段的计算成本。我们只考虑最耗时的计算操作，如指数运算和配对运算（在群 \( G \)、\( G_T \) 和 \( Z_p \) 中），而忽略加法和乘法等轻量级操作。表中，H表示哈希函数 \( H \) 或 \( H' \) 的一次评估，E表示在 \( G \) 或 \( Z_p \) 中的一次指数运算。D和P分别表示多项式长除法和配对运算的时间。随机从一个群或环中采样元素的时间也被忽略，因为这比一次指数运算所需的时间要少得多。我们将文件标签的数字签名方案 \( St \) 视为黑盒，并用 \( O(Skgen) \)、\( O(Ssign) \) 和 \( O(Svrfy) \) 分别表示该方案中密钥生成、签名和验证算法的计算复杂度。

表2总结了两个提议实例化方案中每种算法的计算成本。两种GPoS实例化都依赖于相同的密钥提取算法来为组成员创建私钥。每次密钥提取需要一次哈希评估和一次在 \( G \) 中的指数运算。对于文件处理算法，在优化的GPoS实例化中，组成员可以预先计算秘密值 \( \alpha_i (2 \leq i \leq s - 1) \)，从而使两种实例化在处理文件时具有大致相同的计算复杂度。在优化的GPoS实例化中，有两种方法可以生成 \( u_i \)，即通过计算 \( u_i = u^{\alpha_{i-1}} \) 或将 \( g \) 提升到预计算的值 \( \alpha_i \) 的幂。这两种情况在准备这些值 \( u_i \) 时具有相同的复杂度。

从表2可以看出，基本GPoS实例化中的PrFile算法需要在 \( G \) 中进行 \( (r + s + 1) \) 次指数运算，这决定了处理文件的整体效率。实际上，\( r \) 次指数运算是为了生成 \( r \) 个文件块的元数据，而其他 \( (s + 1) \) 次指数运算是为了准备公共参数 \( u_0, \ldots, u_s \)。考虑一个大小为 \( L \) 字节的文件 \( F \)，如果将其分割成每个扇区 \( l \) 字节（作为 \( Z_p \) 中的一个元素），则处理该文件总共需要：

\[ T = (r + s + 1) \]

次指数运算。优化的GPoS实例化的情况类似，但只需 \( T' = T - 1 \) 次指数运算。此外，对于任一GPoS实例化，处理文件 \( F \) 的一种优选方法是设置 \( s \) 为 \( \sqrt{L/l} \)，因为这样会使得指数运算次数最少。

对于优化实例化中的外包文件审计，云存储服务器将执行比基本实例化略多的操作。这是因为不仅需要在线计算系数 \( \beta_i (i \in Q) \) 通过指数运算，还需要进行额外的多项式求值。验证方程 (4) 是否成立。

### 定理6
假设用于文件标签的签名方案 \( St \) 是存在性不可伪造的。如果 \( s \)-SDH 假设成立，则优化的GPoS实例化对任何概率多项式时间对手 \( A \) 都是健全的。

**证明：**
假设有一个概率多项式时间对手 \( A \) 破坏了改进的GPoS实例化的健全性。类似于定理2，在安全游戏结束时，对手输出一个关于已查询处理的文件 \( F' \) 的挑战/证明对 \( (C', R') \)，其中文件 \( F' \) 具有标签 \( \tau' \) 和成员ID \( \ell \)。假设挑战 \( C' = (f_id, Q, z, δ) \) 和证明 \( R' = (ζ', κ', σ') \)。因此，这对 \( (C', R') \) 满足方程 (4)。然而，由于这对是伪造的，\( R' \) 必须不同于模拟器维护的信息生成的 \( R \)。这意味着 \( (ζ', κ') ≠ (ζ, κ) \)，否则 \( σ' \) 将等于 \( σ \) 由于方程 (4)。然后模拟器获得了同一个多项式的两个承诺 \( (z, ζ', κ') \) 和 \( (z, ζ, κ) \)，并且都是在 \( z \) 处的评估。根据Kate, Zaverucha和Goldberg的多项式承诺方案的安全结果 [12]，模拟器可以找到 \( s \)-SDH 实例 \( (G, u_0, u_1, \ldots, u_{s-1}) \) 的解 \( (-z, g^{(α-z)^{-1}}) \)，这与安全假设矛盾。

对于 \( κ \) 的多项式长除法和 \( ζ \) 的多指数运算需要计算。这不会降低实例化的实用性，因为通常假设云服务器足够强大。在审核方的验证过程中，效率取决于参数 \( |Q| \) 和 \( s \)。如果审核方挑战的文件块数少于 \( s \)，则优化的GPoS实例化优于基本实例化。注意，优化实例化中审核方进行的大多数指数运算都是由于计算系数 \( β_i (i ∈ Q) \)。这些计算可以在发送挑战 \( C \) 后和接收响应 \( R \) 之前完成。这样，审核方只需进行 \( ((|Q|+1)H+4E+3P) \) 次操作，远优于基本实例化。

接下来，我们比较两种实例化在审核外包文件完整性方面的通信开销。详细信息总结在表3中，其中SG表示 \( G \) 中元素的大小。在优化实例化中，系数 \( β_i (i ∈ Q) \) 不像在基本实例化中那样直接在网络上传输，而是由云存储服务器和审核方共同生成。因此，这些额外的计算大大减少了审核方与云服务器之间的通信。类似的通信减少也发生在避免直接传输聚合文件块的情况下。如第4.2节所示，这是通过在随机点 \( z \) 上的多项式承诺实现的。从表中可以看出，多项式承诺技巧带来了显著的通信开销节省。

### 结论
在本文中，我们介绍了GPoS，它保证了云中外包组文件的完整性。我们首先形式化了GPoS方案的系统框架和安全模型，然后提出了一个通用的GPoS构造。该构造基于某些数字签名方案的新识别属性和陷门技巧。通过双线性群上的两个具体实例化展示了这种通用构造的有效性。第二个实例化展示了在审核外包文件方面具有更低的通信开销的优势。我们提供了正式的安全证明和全面的性能评估。分析表明，所提出的方案和实例化在实际应用中是安全且实用的。

### 致谢
感谢匿名审稿人的宝贵意见。这项工作得到了中国国家基础研究计划（973）（项目编号2012CB315905）、国家自然科学基金（项目编号61370190, 61173154, 61272455, 61202450, 61472083, 61272501, 61402029, 61472429, 61202465）以及北京市自然科学基金的支持。

### 参考文献
[此处列出参考文献]

希望这些优化能使您的文本更加清晰、连贯和专业。如果有进一步的需求或修改，请随时告知。