gβiφ(cid:126)πi
(α), g
(cid:80)
g
gφ(cid:126)µ(α), g
i∈Q βiφ(cid:126)πi
(cid:17)
(cid:16)
gψ(cid:126)ω (α), gα(cid:17)
(cid:17)
(cid:17)
and
In this section, we evaluate and compare the performance
of our GPoS instantiations.
5.1 Theoretical Analysis
For comparing the eﬃciency of both GPoS instantiation-
s (see Section 4), we ﬁrst analyse their computation costs
in each stage. We only consider the most time-consuming
computations, i.e., exponentiation and pairing in G, GT and
Zp, etc., while the other light-weight operations such as addi-
tions and multiplications are omitted. In the table, H denotes
one hash evaluation for both H and H0, and E represents one
exponentiation in G or Zp. That is, these evaluations are not
discriminated in diﬀerent groups or ring. The computation
times for polynomial long division and a pairing evaluation
are denoted by D and P, respectively. The time to randomly
sample an element from a group or a ring is also omitted
in the analysis, since it is in fact much less than that taken
by an exponentiation. We also treat the digital signature
scheme St for ﬁle tag as a black-box. Speciﬁcally, we let
O(Skgen), O(Ssign) and O(Svrf y) denote the computation
complexity of each algorithm in St, that is, St.KGen, St.Sign
and St.Vrfy.
Table 2 summarizes the computational costs of every al-
gorithm of both proposed instantiations. Both GPoS in-
stantiations rely on the same key extracting algorithm to
create secret keys for group members. Each key extraction
takes one hash evaluation and one exponentiation in G. Re-
garding the ﬁle processing algorithm, the secret values αi
(2 ≤ i ≤ s − 1) can be pre-computed by the group member
in the optimized GPoS instantiation, then both instantia-
tions take roughly the same computational complexity for
processing a ﬁle. There are two ways for producing ui in
optimized GPoS instantiation. That is, either by computing
ui = uα
i−1 or by raising g to the power of a pre-computed val-
ue αi. Both cases bring the identical complexity for prepar-
ing these values ui. It can be seen from Table 2 that the al-
gorithm PrFile in basic GPoS instantiation requires (r+s+1)
exponentiations in G, which determines the overall eﬃciency
for processing a ﬁle. In fact, r exponentiations are carried
out for producing meta-data for r ﬁle blocks, while the other
(s + 1) exponentiations are due to preparing public param-
eters u0,··· , us. Consider a ﬁle F of L bytes. If it is split
such that each sector has l bytes (as an element in Zp), then
processing this ﬁle would take in total
T =
+ s + 1
(5)
exponentiations. The case for the optimized GPoS instanti-
ation is similar, that is, it would take T (cid:48) = T − 1 exponen-
tiations in G. Furthermore, for processing ﬁle F with either
GPoS instantiation, a preferable way is to set s as (cid:112)L/l
since it would cost the minimum exponentiation operations.
For auditing an outsourced ﬁle in optimized instantiation,
the cloud storage sever will carry out a bit more operations
than the basic one. This is because that not only the co-
eﬃcients βi (i ∈ Q) should be online calculated through
exponentiations, but also an addition polynomial evaluation
(cid:109)
(cid:108) L
s · l
the veriﬁcation equation (4) is satisﬁed.
Theorem 6. Suppose that the signature scheme St for
ﬁle tags is existentially unforgeable. The optimized GPoS
instantiation is sound for any PPT adversary A if the s-
SDH assumption holds.
Proof. Suppose that there is a PPT adversary A break-
ing the soundness of the improved GPoS instantiation. Sim-
ilarly to Theorem 2, at the end of security game, the adver-
sary outputs a (forged) valid pair of challenge/proof (C(cid:48), R(cid:48))
with regard to a ﬁle F (cid:48) with tag τ(cid:48) and member id(cid:96), where ﬁle
F (cid:48) has been queried for processing. Suppose the challenge
C(cid:48) = (f id, Q, z, δ) and the proof R(cid:48) = (ζ(cid:48), κ(cid:48), σ(cid:48)) Hence, the
pair (C(cid:48), R(cid:48)) satisﬁes Equation (4). However, since this pair
is forged, R(cid:48) must be unequal to that generated from the
maintained information by the simulator. It further means
that (ζ(cid:48), κ(cid:48)) (cid:54)= (ζ, κ), since otherwise, σ(cid:48) would be equal to σ
due to Equation (4). Then the simulator obtains two com-
mitments (z, ζ(cid:48), κ(cid:48)) and (z, ζ, κ) for the same polynomial and
both for the evaluation at z. According to the security re-
sults [12] of polynomial commitment scheme due to Kate,
Zaverucha and Goldberg, the simulator can ﬁnd a solu-
α−z ) for the s-SDH instance (G, u0, u1,··· , us−1)
tion (−z, g
which contradicts the security assumption.
1
82for κ, polynomial long division and multi-exponentiation for
ζ need to be computed. This would not degrade practicality
of the instantiations as the cloud servers are usually assumed
to be powerful enough. At the auditor side for veriﬁcation,
the eﬃciency depends on the parameters |Q| and s. If the
auditor challenges a number of ﬁle blocks less than s, then
the optimized GPoS instantiation is superior to the basic
one. Note that most exponentiations taken by the auditor
in optimized instantiation are due to computing the coeﬃ-
cients βi (i ∈ Q). These computations can be carried out
after sending out the challenge C and before receiving the
response R from the cloud storage server. In this way, the
auditor will take only ((|Q|+1)H+4E+3P) operations, which
is much superior to that of basic instantiation.
We proceed to compare the communication overheads for
both instantiations in auditing the integrity of the outsourced
ﬁles. The details are summarized in Table 3 where SG de-
notes the element size of G. In optimized instantiation, the
coeﬃcients βi (i ∈ Q) are not transmitted directly across the
network as in basic instantiation, but generated by both the
cloud storage server and the auditor. Thus, these additional
computations greatly reduce the communications from the
auditor to the cloud server. The similar communication re-
duction occurs for avoiding directly transmitting the aggre-
gated ﬁle block from the cloud server to auditor. As shown
in Section 4.2, this is realized by polynomial commitment to
commit at a random point z. It can be seen from the Table
that, the polynomial commitment trick brings great savings
about the overall communication overheads.
Table 3: Communication overheads of auditing in-
tegrity in both instantiations
Instantiation Communication overheads
Section 4.1
Section 4.2
(2|Q| + s)l + 1SG
(|Q| + 3)l + 2SG
6. CONCLUSION
In this paper, we introduced GPoS which guarantees the
integrity of the outsourced group’s ﬁles in clouds. We ﬁrst
formalized the system framework and the security model
for GPoS schemes, and then proposed a generic GPoS con-
struction. The construction is based on the newly identi-
ﬁed properties of some digital signature schemes and a trap-
door trick. The eﬀectiveness of this generic construction
was showcased with two concrete instantiations over bilin-
ear groups. The second instantiation illustrates extra ad-
vantageous features of lower communication overheads for
auditing the outsourced ﬁles. We provided formal securi-
ty proof and comprehensive performance evaluations. The
analyses show that the proposed scheme and instantiations
are secure and practical for real-world applications.
Science Foundation (Grant Nos.
4132056 and 4122041),
the Research Funds of Renmin University of China through
project 14XNLF02 and the Open Research Fund of Beijing
Key Laboratory of Trusted Computing.
8. REFERENCES
[1] G. Ateniese, R. Burns, R. Curtmola, J. Herring,
L. Kissner, Z. Peterson, and D. Song. Provable Data
Possession at Untrusted Stores. In Proceedings of the
14th ACM Conference on Computer and
Communications Security, CCS’07, pages 598–609,
New York, NY, USA, 2007. ACM.
[2] G. Ateniese, R. Di Pietro, L. V. Mancini, and
G. Tsudik. Scalable and Eﬃcient Provable Data
Possession. In Proceedings of the 4th International
Conference on Security and Privacy in
Communication Networks, SecureComm’08. ACM,
2008.
[3] G. Ateniese, S. Kamara, and J. Katz. Proofs of
Storage from Homomorphic Identiﬁcation Protocols.
In M. Matsui, editor, Advances in
Cryptology–ASIACRYPT 2009, volume 5912 of LNCS,
pages 319–333. Springer, Heidelberg, 2009.
[4] D. Boneh and X. Boyen. Short Signatures Without
Random Oracles and the SDH Assumption in Bilinear
Groups. Journal of Cryptology, 21(2):149–177, 2008.
[5] D. Cash, A. K¨up¸c¨u, and D. Wichs. Dynamic Proofs of
Retrievability via Oblivious RAM. In T. Johansson
and P. Nguyen, editors, Advances in
Cryptology–EUROCRYPT 2013, volume 7881 of
LNCS, pages 279–295. Springer, Heidelberg, 2013.
[6] H. Deng, Q. Wu, B. Qin, S. S. M. Chow,
J. Domingo-Ferrer, and W. Shi. Tracing and Revoking
Leaked Credentials: Accountability in Leaking
Sensitive Outsourced Data. In Proceedings of the 9th
ACM Symposium on Information, Computer and
Communications Security, ASIA CCS ’14, pages
425–434, New York, NY, USA, 2014. ACM.
[7] H. Deng, Q. Wu, B. Qin, J. Mao, X. Liu, L. Zhang,
and W. Shi. Who Is Touching My Cloud. In
M. Kuty(cid:32)lowski and J. Vaidya, editors, Computer
Security–ESORICS 2014, volume 8712 of LNCS, pages
362–379. Springer International Publishing, 2014.
[8] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of
Retrievability via Hardness Ampliﬁcation. In
O. Reingold, editor, Theory of Cryptography, volume
5444 of LNCS, pages 109–127. Springer, Heidelberg,
2009.
[9] C. Erway, A. K¨up¸c¨u, C. Papamanthou, and
R. Tamassia. Dynamic Provable Data Possession. In
Proceedings of the 16th ACM Conference on Computer
and Communications Security, CCS’09, pages
213–222, New York, NY, USA, 2009. ACM.
7. ACKNOWLEDGMENTS
We thank the anonymous reviewers for their valuable com-
ments. This work was supported by the National Key Basic
Research Program of China (973) (Grant No. 2012CB315905),
National Natural Science Foundation of China (Grant Nos.
61370190, 61173154, 61272455, 61202450, 61472083, 61272501,
61402029, 61472429, and 61202465), and Beijing Natural
[10] R. Gennaro, S. Halevi, and T. Rabin. Secure
Hash-and-Sign Signatures Without the Random
Oracle. In J. Stern, editor, Advances in
Cryptology–EUROCRYPT’99, volume 1592 of LNCS,
pages 123–139. Springer, Heidelberg, 1999.
[11] A. Juels and B. S. Kaliski Jr. PoRs: Proofs of
Retrievability for Large Files. In Proceedings of the
14th ACM Conference on Computer and
83Table 2: Computation costs of each algorithm in both instantiations
Optimized instantiation
Basic instantiation
1E
1E
Algorithm
Setup
KeyExt
PrFile
Chall
PrfGen
Verify
rH + (r + s + 1)E + O(Skgen) + O(Ssign)
rH + (r + s)E + O(Skgen) + O(Ssign)
n(1H + 1E)
O(Svrf y)
|Q|E
(|Q| + 1)H + (s + 2)E + 2P
n(1H + 1E)
O(Svrf y)
(2|Q| + 2s − 3)E + 1D
(|Q| + 1)H + (|Q| + 4)E + 3P
Communications Security, CCS’07, pages 584–597,
New York, NY, USA, 2007. ACM.
[12] A. Kate, G. Zaverucha, and I. Goldberg.
Constant-Size Commitments to Polynomials and
Their Applications. In M. Abe, editor, Advances in
Cryptology–ASIACRYPT 2010, volume 6477 of LNCS,
pages 177–194. Springer, Heidelberg, 2010.
[13] H. Shacham and B. Waters. Compact Proofs of
Retrievability. Journal of Cryptology, 26(3):442–483,
2013.
[14] E. Shi, E. Stefanov, and C. Papamanthou. Practical
Dynamic Proofs of Retrievability. In Proceedings of
the 2013 ACM SIGSAC Conference on Computer and
Communications Security, CCS’13, pages 325–336,
New York, NY, USA, 2013. ACM.
[15] B. Wang, S. S. M. Chow, M. Li, and H. Li. Storing
Shared Data on the Cloud via Security-Mediator. In
Distributed Computing Systems (ICDCS), 2013 IEEE
33rd International Conference on, pages 124–133, July
2013.
[16] B. Wang, B. Li, and H. Li. Knox: Privacy-Preserving
Auditing for Shared Data with Large Groups in the
Cloud. In F. Bao, P. Samarati, and J. Zhou, editors,
Applied Cryptography and Network Security, volume
7341 of LNCS, pages 507–525. Springer, Heidelberg,
2012.
[17] B. Wang, B. Li, and H. Li. Oruta: Privacy-Preserving
Public Auditing for Shared Data in the Cloud. In
Cloud Computing (CLOUD), 2012 IEEE 5th
International Conference on, pages 295–302, June
2012.
[18] B. Wang, B. Li, and H. Li. Public auditing for shared
data with eﬃcient user revocation in the cloud. In
INFOCOM, 2013 Proceedings IEEE, pages 2904–2912,
April 2013.
[19] B. Wang, H. Li, and M. Li. Privacy-preserving public
auditing for shared cloud data supporting group
dynamics. In Communications (ICC), 2013 IEEE
International Conference on, pages 1946–1950, June
2013.
[20] C. Wang, S. S. M. Chow, Q. Wang, K. Ren, and
W. Lou. Privacy-Preserving Public Auditing for
Secure Cloud Storage. Computers, IEEE Transactions
on, 62(2):362–375, Feb 2013.
[21] H. Wang, Q. Wu, B. Qin, and J. Domingo-Ferrer.
Identity-based remote data possession checking in
public clouds. Information Security, IET,
8(2):114–121, March 2014.
[22] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou.
Enabling Public Veriﬁability and Data Dynamics for
Storage Security in Cloud Computing. In M. Backes
and P. Ning, editors, Computer Security–ESORICS
2009, volume 5789 of LNCS, pages 355–370. Springer,
Heidelberg, 2009.
[23] Y. Wang, Q. Wu, D. S. Wong, B. Qin, S. S. M. Chow,
Z. Liu, and X. Tan. Securely Outsourcing
Exponentiations with Single Untrusted Program for
Cloud Storage. In M. Kuty(cid:32)lowski and J. Vaidya,
editors, Computer Security–ESORICS 2014, volume
8712 of LNCS, pages 326–343. Springer International
Publishing, 2014.
[24] J. Xu and E.-C. Chang. Towards Eﬃcient Proofs of
Retrievability. In Proceedings of the 7th ACM
Symposium on Information, Computer and
Communications Security, ASIACCS ’12, pages 79–80,
New York, NY, USA, 2012. ACM.
[25] K. Yang and X. Jia. Data storage auditing service in
cloud computing: challenges, methods and
opportunities. World Wide Web, 15(4):409–428, 2012.
[26] Y. Yu, Y. Mu, J. Ni, J. Deng, and K. Huang. Identity
Privacy-Preserving Public Auditing with Dynamic
Group for Secure Mobile Cloud Storage. In M. H. Au,
B. Carminati, and C. C. J. Kuo, editors, Network and
System Security, volume 8792 of LNCS, pages 28–40.
Springer International Publishing, 2014.
[27] J. Yuan and S. Yu. Proofs of Retrievability with
Public Veriﬁability and Constant Communication
Cost in Cloud. In Proceedings of the 2013
International Workshop on Security in Cloud
Computing, Cloud Computing ’13, pages 19–26, New
York, NY, USA, 2013. ACM.
[28] J. Yuan and S. Yu. Eﬃcient public integrity checking
for cloud data sharing with multi-user modiﬁcation. In
INFOCOM, 2014 Proceedings IEEE, pages 2121–2129,
April 2014.
[29] Y. Zhang and M. Blanton. Eﬃcient Dynamic Provable
Possession of Remote Data via Balanced Update
Trees. In Proceedings of the 8th ACM SIGSAC
Symposium on Information, Computer and
Communications Security, ASIA CCS’13, pages
183–194, New York, NY, USA, 2013. ACM.
[30] Q. Zheng and S. Xu. Secure and Eﬃcient Proof of
Storage with Deduplication. In Proceedings of the
Second ACM Conference on Data and Application
Security and Privacy, CODASPY ’12, pages 1–12,
New York, NY, USA, 2012. ACM.
84