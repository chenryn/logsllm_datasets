listen(server_sockfd, 5):
signa1 (SIGCHLD. SIG_IGN);
while[1){
char ch;
printf(*server waiting\n*1;
3）接受连接。
client_len = sizeof (client_address] :
c.11ent_socktd = accept (server_sockfd,
(struct sockaddr *)&client_address.&claent_len);
4）通过fork调用为这个客户创建一个子进程，然后测试我们是在父进程里还是在子进程里。
加入java编程群：524621833
---
## Page 459
第14章套楼字
441
if{fork(1 =a 0) {
5）如果我们是在子进程里，就可以对client_sockfd上的客户进行读写。那个五秒钟的休眠时
间纯粹出于演示的目的。
read(client_soekfd, &ch, 1) ;
write(client_sockfd, &ch, 11;
ch++:
close(client_sockfd);
(0)Txe
6）否则，我们一定是在父进程里，而在此需要我们为这个客户做的事情就是关闭它。
else{
close(client_sockfd):
我们在客户请求的处理过程中增加的五秒钟休眠时间是为了模仿服务器的计算工作或数据
库的查询工作。如果我们在前面的服务器里这样做，client3的每次运行就都将花费五秒钟的时
间。而我们的新服务器可以同时处理多个client3程序，所花费的总时间将只有五秒钟多一点。
如下所示：
S serverek
Sserver waiting
[7] 1571
cllent3&client3&client3&p4-ax
[8] 1572
[9]  1573
[10]  1574
server waiting
server waiting
server waiting
PID TTY STAT
s0dd6551
TIME COMMAND
1572
Pp0
0:00 server4
1573
S
S
0:00 client3
1574
pp0
Pp0
S
0:00
SL51
pp0
R
0:00
client3
1576
Pp0
S
00:0
ps *ax
1577
0:00
server4
1578 ppo
pp0
S
S
110800:0
$ char from server
char from server
=B
=B
P-8X
PID TTY STAT
1557pp0 S
TIME COMMAND
1580pp0R
0:00 server4
[8]
Done
0:00 ps -ax
[9]-
client3
[10]+
Done
Done
client3
client3
操作注释：
服务器程序现在会新创建一个子进程来处理每一个客户，所以我们会看到好几个服务器等
待消息，而主程序将继续等待新的连接。ps命令的输出（我们进行了删节）显示PID是1557的
server4主进程正等待着新客户的到来，而同时有三个client3进程正在被该务器的三个子进程服
加入jaVa编程群：524621833
---
## Page 460
442
2Linux程序设计
务着。在经过了一个五秒钟的暂停之后，所有客户都得到了它们的结果并结束了运行。子服务
器进程也都退出了，只留下了主服务器还等在那里。
服务器程序利用fork函数来处理多个客户。在一个数据库软件里，这可能不是最佳的解决方
案，因为服务器程序可能会相当的大，在数据库访问方面还存在着需要协调多个服务器进程的
问题。事实上，我们真正需要的解决之道是怎样才能让一个服务器在不阻塞、不等待客户请求
到达的前提下完成对多个客户的处理。这个问题的解决方案涉及到如何同时处理多个打开着的
文件描述符，并且不仅仅局限于套接字应用程序。请继续学习select系统调用：
14.5select系统调用
当我们在编写UNIX软件的时候，经常会出现需要检查好几个输人才能确定下一步行动的情
况。就拿一个终端仿真器这样的通信程序来说吧，它至少需要能够同时读取键盘和串行口这两
种设备上的状态。如果是在一个单用户系统里，运行一个“繁忙等待”循环米进行这种检查还
是可以接受的，它会不停地扫摘输人设备上是否有数据，数据一出现就会被读取。但这种做法
用CPU时间来衡量开销就太大了。
select系统调用允许程序同时在多个底层文件描述符上等待输人的到达（或等待输出的结束）
这就意味着终端仿真器程序可以阻塞直到有事情可做为止。类似地，服务器也可以通过同时在
多个打开着的套接字上等待请求到来的办法来应付多个客户。
select函数是在数据结构fd_set上完成操作的，它们是由open调用返回的文件描述符所构成的
集合。为了对这些集合进行处理，人们定义了下面这些宏：
#include
#include 
vold rD_cLR（int td，Ed_set *tdaet))
int rD_Isser(int fd,fd_aet *tdset);
void vD_smr（int td,fd_set *fdset);
这些宏定义的作用从它们各自的名称上就可以看出米：FD_ZERO会把一个fd_set初始化为
一个空白的集合：FD_SET和FD_CLR对与参数fd指定的文件描述符相对应的那个集合中的元素
进行置位和清除；FD_ISSET是一个布尔类型的宏，如果参数fd对应的文件描述符是参数fdset指
向的fd_set中的一个元素，它就返回一个非零值。一个fd_set结构里所能容纳的文件描述符的最
大个数是由常数FD_SETSIZE限定的。
select函数还可以使用一个倒计时值以防止无限期阻塞现象的发生。这个倒计时时间值是用
个“struct timeval”结构给出的。这个结构的定义在sys/time.h文件里，由以下几个成员组成：
struct timeval (
time_t
tv_usec)
tv_800:
/*mlcroseconds*/
/*seconds */
time_I类型在sys/time.h文件里被定义为一个整数类型。
select系统调用的定义情况如下所示：
加入jaVa编程群：524621833
---
## Page 461
第14章套接字443
#include 
int solect(int nfds, fd_set *readfds,fd_set *writofds, fd_aet *errorfds,struct
timeval *timeout);
select调用的作用是检查那个文件描述符集合里是否有一个文件描述符已经处于读操作就绪
状态、写操作就绪状态或有-个错误排队的状态；如果都没有，就阻塞到这些状态有一个出现
为止。
nfds参数给出了需要进行测试的文件描述符个数，测试将对第0到第（nfds-1）个描述符进行。
三个描述符集合都可以是一个空指针，这表示不进行相应的测试。
select函数会在以下情况返回：rcadfds集合里有描述符处于读操作就绪状态、writefds集合里
有描述符处于写操作就绪状态、errorfds集合里有描述符遇到一个错误条件。如果这三种情况都
不成立，select就会在timeout指定的倒计时时间经过之后返回。如果timeout参数是一个空指针，
套接字上又没有任何活动，这个调用就会一直阻寨下去。
当select返回时，描述符集合会被修改为指示着那个描述符正处于读就绪、写就绪或有错误
状态。你需要使用FD_ISSET对它们进行测试，找出需要关照的那些个描述符。某些系统还会把
timeout值修改为倒计时的剩余时间，但这并不是X/Open技术规范里的规定行为。如果select是因
为倒计时时间到而返回的话，所有描述符集合都将被设置为空。
select调用的返回值是这些集合里状态发生了变化的描述符的总数。如果失败，它将返回“
1"，并且会设置errno来描述那个错误。可能出现的错误情况包括表示无效描述符的EBADF、表
示因中断而返回的EINTR、表示nfds或timeout取值错误的EINVAL等。
Linux会把参数timeout指向的结构修改为指示倒计时的剩余时间，但UNIX的大多
数版本都不这么做。许多现有的使用了select函数的代码的做法是初始化-个timeval结
构，然后就一直用下去，不再对它的内容重新进行初始化。这类代码在Linux上的操作
可能会不正确，这是因为Linux会随着例计时的进行而对那个timeval结构做出相应的修
改。如果读者正在编写或者移植使用了select函数的代码，就要注意这个差异，并且永
远要初始化这个倒计时时间值。这两种行为都是正确的，只是有所不同而已！
下面这个select.c程序演示了select函数的使用方法。我们稍后还会看到和讨论一个更完整的
例子。这个程序以2.5秒为倒计时时间来读键盘（即标准输人一它的文件描述符是“0”）。它只
有在输人就绪的时候才会去读键盘。它很容易通过添加其他的描述符而得到扩展，比如串行线、
管道、套接字等，具体做法要取决于应用软件的需要。
动手试试：select系统调用
1）开始部分都是老套路，必要的头文件和定义。然后，对inputs进行初始化，准备处理来自
键盘的输人。
#include 
include 
加入jaVa编程群：524621833
---
## Page 462
444
Linux程序设计
#include 
#include 
#include 
int main{)
char buffer[128];
int result, nread;
fd_set inputs, testfds;
FD_ZERO(&inputs};
PD_S8T(0,&inputs) ;
2)在stdin上最多等待输人2.5秒钟。
while(1)(
testfds s inputs;
tineout.tv_sec = 2:
tineout.tv_usec ± 500000;
result = select(Pp_SBTsIzE, &testfds, Ifd_set *)NULL, (fd_set *)NULL,
&tineout):
3）在经过了这段时间之后，我们对result进行测试。如果还没有输人，程序将再次循环。如
果出现了一个错误，程序退出运行。
switch(result)(
printf(*timeout\n*);
break;
case -1:
perror(*seleet*);
exit {1) ;
4）如果在倒计时等待期间里这个文件描述符上有所动作，我们就在stdin上读取输入数据并
在接收到一个“”（文本行尾）字符后把它们都回显到屏幕上去。如果输入字符是
“Ctrl-D”，就退出整个程序。
default:
if (FD_ISSET(0,&testfds))(
1oct1(0,FIONREAD,&nread);
if(nread == 0)(
printf(*keyboard done\n*):
exit(0) :
nread s read(0,butfer,nread):
ptintt(*read ts from keyboard: &s*. nread, buffer):
buffer[nread]=0:
break;
当我们运行这个程序的时候，它会每隔2.5秒显示一个“timeout”字样。如果我们敲击键盘，
它就会去读标准输人并报告敲人的内容。对大多数shell来说，输入会在用户按下回车键或某个
控制序列键时被发送到这个程序去，所以这个程序会在我们按下回车键的时候把输人内容显示
出来。需要注意的是回车字符本身也算是一个字符，它会象其他字符一样被读取和处理（你可
以不按回车键试试，看看输人几个字符再按下“Curl-D”组合键会是什么样）。
加入jaVa编程群：524621833
---
## Page 463
第14章套楼字445
5./select
timeout
hello
read 5 trcm keyboard: fred
timeout
keybourd done
D
5
操作注释：
这个程序使用select调用来检查标准输人的状态。程序通过事先安排的倒计时时间值每隔2.5
秒显示一个“timeout”消息——如果select的返回值是零，就表示倒计时结束了一次。在文件的
末尾，我们给标准输人描述符的输入就绪标志置位，但没有读到任何字符。
多客户
如果我们那个简单的服务器程序使用了select来实现对多个客户同时进行的处理，它就不必
再依赖于子进程了。在把这个技巧实际运用到应用程序中去的时候，一定要注意不要在处理第
个连接时让其他进程等待太长的时间。