### Protocol Versions

- **kTLSProtocol12**: This configuration specifies that TLSv1.2 is the preferred protocol version for the application, but it allows negotiation to lower versions if necessary. This is the recommended configuration.
- **kDTLSProtocol1**: This configuration specifies that DTLSv1.0 is the preferred protocol version for the application. However, the use of this constant is discouraged.

### Cipher Suite Negotiation

A cipher suite is a combination of authentication, encryption, message authentication code (MAC), and key exchange algorithms used to establish a secure network connection using SSL/TLS. A wide range of cipher suites with varying levels of security are available.

The choice of cipher suites can significantly impact the security of iOS applications. Both the Secure Transport and CFNetwork APIs allow developers to explicitly configure the cipher suite for an SSL/TLS session. This means that a developer, through a lack of awareness, might configure an application to use a cipher suite that is not cryptographically secure.

The full list of available cipher suites is extensive. The suites supported by CFNetwork and the Secure Transport API are documented in the `SSLCipherSuite` enum, which can be found in Apple's documentation:
- [Secure Transport Reference](https://developer.apple.com/documentation/security/secure_transport)

For information on strong ciphers, refer to the OWASP documentation:
- [Transport Layer Protection Cheat Sheet](https://owasp.org/www-project-transport-layer-protection-cheat-sheet/)

#### Example Configuration

To configure an SSL/TLS session that supports only a single cipher suite, you might find the following code in an application:

```c
SSLCipherSuite *ciphers = (SSLCipherSuite *)malloc(1 * sizeof(SSLCipherSuite));
ciphers[0] = SSL_RSA_WITH_RC4_128_MD5;
SSLSetEnabledCiphers(sslContext, ciphers, 1);
```

In this example, the application supports only the `SSL_RSA_WITH_RC4_128_MD5` cipher suite, which has known vulnerabilities.

#### Determining Negotiated Cipher Suites

Without access to the source code, you can still determine the negotiated cipher suites using standard methods applicable to any SSL/TLS-enabled client. Tools like Wireshark can capture and dissect the client "hello" packet to reveal the list of negotiable ciphers, as shown in Figure 3.3.

### Intercepting Encrypted Communications

In the previous section, you learned about the types of vulnerabilities that can affect the security of an SSL/TLS session. However, sometimes the security of the SSL/TLS session is intact, and you need to intercept encrypted communications. For example, if an application communicates with a web service over HTTPS, you may want to intercept the communications to assess the security of the web service. In this scenario, you can configure your mobile device to use a proxy, but if the application rejects the certificate presented by your proxy (likely because it is self-signed and untrusted), you will see no HTTPS traffic.

#### Installing a Proxy Certificate

To intercept encrypted traffic, you can install your proxy’s certificate into your device’s certificate store. Here are the steps using Burp Suite as the intercepting proxy:

1. **Start the Proxy**:
   - Ensure your local firewall is disabled.
   - Start a proxy on your workstation and have it listen on the external network interface (e.g., Burp Suite proxy).

2. **Configure Device to Use Proxy**:
   - Set your device to use a manual HTTP proxy and enter the IP address and port of your workstation.

3. **Install the Certificate**:
   - In MobileSafari, browse to `http://burp` and select the CA Certificate option.
   - Install the PortSwigger CA certificate by clicking the "Install" button and then "Install Now" to trust the CA.

If successful, the PortSwigger CA profile will be installed and trusted on your device, allowing you to intercept HTTPS communications via your Burp Suite proxy.

#### Dangers of Installing Profiles

Be aware that trusting a profile such as the PortSwigger CA means that any host presenting a certificate signed by this CA can potentially perform man-in-the-middle attacks on your device. Remove the profile from your device (Settings > General > Profiles) after testing, especially if you plan to use the device on untrusted networks.

### Bypassing Certificate Pinning

If you followed the steps for intercepting encrypted communications and still cannot intercept HTTPS traffic, the application may be using certificate pinning. Certificate pinning involves embedding the expected public key or x509 certificate within the application and validating it against the server’s certificate.

#### Overriding Certificate Validation

If you are using a jailbroken device, you can override the APIs used for certificate validation by setting the `kSSLSessionOptionBreakOnServerAuth` option whenever the `SSLSetSessionOption()` function is called. This can be done using a substrate tweak, such as:

- **iOS SSL Kill Switch**: [GitHub](https://github.com/iSECPartners/ios-ssl-kill-switch)
- **iOS TrustMe**: [GitHub](https://github.com/intrepidusgroup/trustme)

#### Dangers of Installing Trust Bypass Tools

By installing these tools, you effectively disable certificate validation on your device, potentially allowing an attacker to man-in-the-middle any SSL/TLS or HTTPS connection your device makes.

### Identifying Insecure Storage

Mobile application security requires that data should not be persistently stored on the device unless absolutely necessary. Devices are frequently lost or stolen, and even with a complex passcode, data can be compromised. Considerations include remote exploitation, default credentials on jailbroken devices, and physical attacks.

#### Data Protection Classes

When searching for insecurely stored content, look for:

- Sensitive content stored in plaintext.
- Sensitive content encrypted using a custom implementation with an insecure key or format.
- Sensitive content stored without a suitable data protection class.
- Sensitive content inadvertently stored by the application.

This section focuses on the third possibility and describes how to identify the data protection classes applied to individual files or keychain items.

#### Determining Protection Classes

- **Using iTunes Backup**:
  - Back up your device and use the `ios-dataprotection` tool to parse the backup files and determine the protection class for each file.
  
- **Using keychain_dump**:
  - Run `keychain_dump` as root with the device unlocked to retrieve all keychain items and their protection classes.

- **Dynamic Analysis**:
  - Use a runtime manipulation framework like Cydia Substrate to instrument the application and monitor filesystem and keychain access.

### Patching iOS Applications with Hopper

Patching compiled iOS applications can be useful for security assessments. This section provides a brief introduction and walk-through of the process using Hopper disassembler.

#### Example: Bypassing Jailbreak Detection

1. **Load the Binary**:
   - Load the binary into Hopper and disassemble it.

2. **Locate the Jailbreak Check**:
   - Find the string "This device is jailbroken; please remove the jailbreak and try again."
   - Use the cross-reference feature to locate where the string is used in the code.

3. **Patch the Code**:
   - Modify the code to bypass the jailbreak detection check.
   - Use the "Produce New Executable" feature to create a patched binary.

This process only applies to applications running on jailbroken devices, as modifying an application invalidates its code signature.