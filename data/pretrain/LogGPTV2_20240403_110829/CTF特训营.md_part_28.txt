中比较重要的四部分数据是程序数据、堆、库数据、栈。另外，内核
空间也会映射到程序内存中，但是CTF中很少会涉及，为了简化，这
部分不再叙述，读者掌握了最基本的PWN知识后，可以自行扩展。
程序数据一般映射在内存的较低地址处，然后依次为堆块数据
库数据及栈等，其中还映射了一部分起保护作用的不可访问区域，布
局图如图11-11所示。
低地址
TextSeg
Proc
DataSeg
Heap
Bss Seg
MemoryMapping
library
Stack
高地址
---
## Page 352
CTF特训营：技术详解、解题方法与
11.5程序内存布局
352/1144
图11-11程序内存布局
程序内存布局中的各部分的主要内容说明如下。
程序数据（Proc）
程序数据主要包含三部分，其中代码段（Tex段）主要用来存放
可执行文件的代码指令，是可执行程序在内存中的镜像，代码段一般
是只读的；数据段（Data段）则用来存放可执行文件中已经初始化的
变量，包括静态分配的变量和全局变量等；BSS段主要包含程序中未
初始化的全局变量，在内存中BSS段全部置零。
堆（Heap）
堆主要用于存放进程运行过程中动态申请的内存段。进程调用
malloc、alloca、new等函数来申请内存，利用free、delete等函数释
放内存。这部分的大小不固定，以方便程序灵活使用内存。有关于堆
的更多知识，请参考第13章。
库数据（MemoryMapping）
这部分数据很多是映射的系统库文件，其中比较重要的就是libc
库，很多程序所使用的系统函数都会动态地链接到ibc库中去
---
## Page 353
CTF特训营：技术详解、解题方法与
11.5程序内存布局
353/1144
栈（Stack）
栈存放程序临时创建的局部变量，包括函数内部的临时变量和调
用函数时压入的参数。由于栈具有后进先出的特点，因此可以很方便
地用来保存和恢复函数调用现场。关于栈的更多相关知识，请参照第
12章。
x86程序的内存布局实例如图11-12所示。
x64程序的内存布局实例如图11-13所示。
start
dx-J0006b080x000080080x0
End
Perm
Nane
/tmp/example_x86
9x088490600x0804a080
d--J
/tmp/exanple_x86
proc
9x0884a0600x0804b888rw-p
/tmp/exanple_x86
xf7e120000xf7e13000rw-p
axf7e13000 0xf7fba000r-xp
napped
/lib/i386-linux-gnu/libc-2.19.so
9xf7fba0o60xf7fbc000
r--p
/ltb/i386-linux-gnu/libc-2.19.s0
9xf7fbc0o60xf7fbdoo0
rw-p
/lib/i386-linux-gnu/libc-2.19.so
xf7fbdee6exf7fc0860
rw-p
napped
xf7fd70e60xf7fd9060
rw-p
napped
9xf7fd90e0 0xf7fda060
r-xp
[vdso]
lib
9xf7fda0o00xf7fdc000
r--p
[vvar]
xf7fdcoo0exf7ffc000
r-xp
/lib/i386-linux-gnu/ld-2.19.so
9xf7ffcoo60xf7ffdo00
r--p
/lib/i386-linux-gnu/ld-2.19.so
axf7ffdoo0 0xf7ffeo00rw-p
/lib/i386-1inux-gnu/ld-2.19.s0
oxfffddooo oxffffeoo0rw-p
stack]
stack
图11-12x86程序内存布局
---
## Page 354
CTF特训营：技术详解、解题方法与
11.5程序内存布局
354/1144
start
End
Perm
9X88400080
0X00401008
r--p
r-xp
/tmp/exampte_x64
9x80600080
0x00601000
/tmp/example_x64
/tmp/example_x64
proc
9x80601080
0x60602000
rw-p
9x00602000
0x00623000
rw-p
Theap]
heap
ox00007ffff7a16000
0x06007ffff7bd6000
r-xp
/ltb/x86_64-Ltnux-gnu/Ltbc-2.19.so
x89e07ffff7bde0e0
0xeo007ffff7dcfoo0
-P
/lib/x86_64-linux-gnu/libc-2.19.so
0x00007ffff7dd3000
-p
/ltb/x86_64-ltnux-gnu/libc-2.19.so
x89ee7ffff7dd3068
0xe6887ffff7dd5006
d-MJ
/lib/x86_64-linux-gnu/ltbc-2.19.so
9x00oo7ffff7dd5000
0x000o7ffff7dda000
rw-p
napped
9x89e07ffff7dda006
exe8887ffff7dfdoo6
r-xp
/lib/x86_64-linux-gnu/ld-2.19.so
9x89e67ffff7fdc0e00x06887ffff7fdfoo0
rw-p
paddeu
ex80007ffff7ff4068
0x00007ffff7ff8000
rw-p
ox86087ffff7ffa000
napped
9x89ee7ffff7ff8068
r-xp
[vdso]
lib
9x89oo7ffff7ffaoo0
ex0e0o7ffff7ffcooo
0xo0007ffff7ffdooo
r-
-P
/ltb/x86_64-ltnux-gnu/ld-2.19.so
[vvar]
rw-P
r.
x89o07ffff7ffdoo00x00007ffff7ffe0o0
P
/lib/x86_64-linux-gnu/ld-2.19.s0
ox00007ffff7ffeoo0 0x00007ffff7fffooo
rw-p
mapped
Bx80o07ffffffde0o00xo0007ffffffffoo0rw-p
[stack]
oxffffffffff60ooo0 0xffffffffff6010o0r-xp
stack
[vsyscall]
图11-13x64程序内存布局
---
## Page 355
CTF特训营：技术详解、解题方法与
11.6真题解析
355/1144
11.6真题解析
接下来主要介绍关于dl_resolve的各种真题及其解析。
使用dl_resolve解题的主要情景是找不到对应的libc.so文件（例如
出题者使用自已编译的libc.so文件），因此即使能够泄露信息也无法
计算出libc.so的基址。这里共分析了3个例子，其中两个逻辑较为简
单，一个逻辑较为复杂，对这3个例子分别尝试了d_resolve和其他解
法，以便于对比分析。
1.x86的情况（2015-sctf之PWN200）
这道题的逻辑较为简单，IDA反编译结果如图11-14所示。
---
## Page 356
CTF特训营：技术详解、解题方法与
11.6真题解析
356/1144
ssize_t result;// eax@3
char stack_buff[128];// [sp+1ch] [bp-9ch]@1
char buf[16];// [sp+9ch][bp-1ch]@1
size_t nbytes;// [sp+Ach][bp-Chj@1
nbytes= 16;
*（_DWORD )buf=θ;
*（_DW0RD*）&buf[4]=0;
*（_DW0RD *）&buf[8]=θ;
*（_DW0RD *）&buf[12]=0；
nemset(stack_buff,θ,sizeof(stack_buff));
urite(1，"input nane:",0xCu）;
read（θ,buf，nbytes+1）;
if（strlen(buf)-1r_info)>>8)]
#i.e.*sym=DT_SYMTAB+（reloc->r_info)*4*4
#assert（(（reloc->r_info)&Oxff)==0x7)type
#if（sym->st_other)&3==0）if not resolved
#uint16_t ndx =VERSYM[(reloc->r_info) >> 8]ndx=0-> local symbol
#r_found_versionversion=&l->l_version[ndx]
#name= STRTAB+sym->st_name
def generate_x86_reloc_data(index,got_plt):
return|32(got_plt)+132(0x07+(index<<8)
defgenerate x86 sym data（name offset）
returnI32（name_offset)+132（0)+132（0)+132（0x12)
DT_JMPREL=0x80482f8#offset,info
DT_STRTAB=0x8048260#strings array
DT_SYMTAB=0x80481e0#st_name,...st_info,s_other
DTVERSYM=0x80482c0
PLT0=0x08048350
bss_addr = 0x08049870
#x86
system_got=0x08049a10