      prev_timed_out = child_timed_out;
      /* Report outcome to caller. */
      if (WIFSIGNALED(status) && !stop_soon) {
        kill_signal = WTERMSIG(status);
        if (child_timed_out && kill_signal == SIGKILL) return FAULT_TMOUT;
        return FAULT_CRASH;
      }
      /* A somewhat nasty hack for MSAN, which doesn't support abort_on_error and
         must use a special exit code. */
      if (uses_asan && WEXITSTATUS(status) == MSAN_ERROR) {
        kill_signal = 0;
        return FAULT_CRASH;
      }
      if ((dumb_mode == 1 || no_fork server) && tb4 == EXEC_FAIL_SIG)
        return FAULT_ERROR;
      /* It makes sense to account for the slowest units only if the testcase was run
      under the user defined timeout. */
      if (!(timeout > exec_tmout) && (slowest_exec_ms exec_us * q->len;
      // 首先计算case的fav_factor，计算方法是执行时间和样例大小的乘积
      /* For every byte set in trace_bits[], see if there is a previous winner,
         and how it compares to us. */
      for (i = 0; i  top_rated[i]->exec_us * top_rated[i]->len) continue; // 判断哪个计算结果更小
             // 如果top_rated[i]的更小，则代表它的更优，不做处理，继续遍历下一个路径；
             // 如果q的更小，就执行以下代码：
             /* Looks like we're going to win. Decrease ref count for the
                previous winner, discard its trace_bits[] if necessary. */
             if (!--top_rated[i]->tc_ref) {
               ck_free(top_rated[i]->trace_mini);
               top_rated[i]->trace_mini = 0;
             }
           }
           /* Insert ourselves as the new winner. */
           top_rated[i] = q; // 设置为当前case
           q->tc_ref++;
           if (!q->trace_mini) { // 为空
             q->trace_mini = ck_alloc(MAP_SIZE >> 3);
             minimize_bits(q->trace_mini, trace_bits);
           }
           score_changed = 1;
         }
    }
#### 3\. 主循环
##### 3.1 主循环之前
###### 3.1.1 cull_queue 函数
在前面讨论的关于case的 `top_rated` 的计算中，还有一个机制是检查所有的 `top_rated[]`
条目，然后顺序获取之前没有遇到过的byte的对比分数低的“获胜者”进行标记，标记至少会维持到下一次运行之前。在所有的fuzz步骤中，“favorable”的条目会获得更多的执行时间。
函数的控制流程图如下：
结合源码解析如下：
    static void cull_queue(void) {
      struct queue_entry* q;
      static u8 temp_v[MAP_SIZE >> 3];
      u32 i;
      if (dumb_mode || !score_changed) return;  // 如果处于dumb模式或者score没有发生变化（top_rated没有发生变化），直接返回
      score_changed = 0;
      memset(temp_v, 255, MAP_SIZE >> 3);
      // 设置temp_v大小为MAP_SIZE>>3，初始化为0xff，全1，表示还没有被覆盖到，为0表示被覆盖到了。
      queued_favored  = 0;
      pending_favored = 0;
      q = queue;
      while (q) { // 进行队列遍历
        q->favored = 0; // 所有元素的favored均设置为0
        q = q->next;
      }
      /* Let's see if anything in the bitmap isn't captured in temp_v.
         If yes, and if it has a top_rated[] contender, let's use it. */
      // i从0到MAP_SIZE进行迭代，筛选出一组队列条目，它们可以覆盖到所有现在已经覆盖的路径
      for (i = 0; i > 3] & (1 > 3;
          /* Remove all bits belonging to the current entry from temp_v. */
          // 从temp_v中，移除所有属于当前current-entry的byte，也就是这个testcase触发了多少path就给tempv标记上
          while (j--) 
            if (top_rated[i]->trace_mini[j])
              temp_v[j] &= ~top_rated[i]->trace_mini[j];
          top_rated[i]->favored = 1;
          queued_favored++;
          if (!top_rated[i]->was_fuzzed) pending_favored++;
        }
      q = queue;
      while (q) { // 遍历队列，不是favored的case（冗余的测试用例）被标记成redundant_edges
        mark_as_redundant(q, !q->favored); // 位置在/queue/.state/redundent_edges中
        q = q->next;
      }
    }
这里根据网上公开的一个例子来理解该过程：
现假设有如下tuple和seed信息：
  * **tuple** : t0, t1, t2, t3, t4
  * **seed** : s0, s1, s2 
  * 初始化 `temp_v = [1,1,1,1,1]`
  * s1可覆盖t2, t3，s2覆盖t0, t1, t4，并且top_rated[0] = s2，top_rated[2]=s1
将按照如下过程进行筛选和判断：
  1. 首先判断 temp_v[0]=1，说明t0没有被覆盖；
  2. top_rated[0] 存在 (s2) -> 判断s2可以覆盖的范围 -> `trace_mini = [1,1,0,0,1]`；
  3. 更新 `temp_v=[0,0,1,1,0]`， 标记s2为 "favored"；
  4. 继续判断 temp_v[1]=0，说明t1此时已经被覆盖，跳过；
  5. 继续判断 temp_v[2]=1，说明t2没有被覆盖；
  6. top_rated[2] 存在 (s1) -> 判断s1可以覆盖的范围 -> `trace_mini=[0,0,1,1,0]`；
  7. 更新 `temp_v=[0,0,0,0,0]`，标记s1为 "favored"；
  8. 此时所有tuple都被覆盖，具备"favored'标记的为s1, s2，过程结束。
###### 3.1.2 show_init_stats 函数
进入主循环前的准备工作使用的函数之一，主要作用为在处理输入目录的末尾显示统计信息，警告信息以及硬编码的常量；
###### 3.1.3 find_start_position 函数
进入主循环前的准备工作使用的函数之一，主要作用为在resume时，尝试查找要开始的队列的位置。
###### 3.1.4 write_stats_file 函数
也是准备工作函数之一，主要作用为更新统计信息文件以进行无人值守的监视。
###### 3.1.5 save_auto 函数
该函数主要保存自动生成的extras。
##### 3.2 主循环
这里是seed变异的主循环处理过程，我们将结合流程图和源码进行详细解读。
主循环的控制流程图如下（将while部分单独设置为了一个函数，只看循环部分即可）：
主循环源码：
    while (1) {
      u8 skipped_fuzz;
      cull_queue(); // 调用cull_queue进行队列精简
      if (!queue_cur) { // 如果queue_cure为空（所有queue都被执行完一轮）
        queue_cycle++; // 计数器，所有queue执行的轮数
        current_entry     = 0;
        cur_skipped_paths = 0;
        queue_cur         = queue; // 准备开始新一轮fuzz
        while (seek_to) { // 如果seek_to不为空
          current_entry++;
          seek_to--;
          queue_cur = queue_cur->next; // 从seek_to指定的queue项开始执行
        }
        show_stats(); // 刷新展示界面
        if (not_on_tty) { 
          ACTF("Entering queue cycle %llu.", queue_cycle);
          fflush(stdout);
        }
        /* If we had a full queue cycle with no new finds, try
             recombination strategies next. */
        if (queued_paths == prev_queued) { // 如果一轮执行后queue中的case数与执行前一样，表示没有发现新的case
          if (use_splicing) cycles_wo_finds++; else use_splicing = 1; // 是否使用splice进行case变异
        } else cycles_wo_finds = 0;
        prev_queued = queued_paths;
        if (sync_id && queue_cycle == 1 && getenv("AFL_IMPORT_FIRST"))
          sync_fuzzers(use_argv);
      }
      skipped_fuzz = fuzz_one(use_argv); // 对queue_cur进行一次测试
      if (!stop_soon && sync_id && !skipped_fuzz) {
       // 如果skipped_fuzz为0且存在sync_id，表示要进行一次sync
        if (!(sync_interval_cnt++ % SYNC_INTERVAL))
          sync_fuzzers(use_argv);
      }
      if (!stop_soon && exit_1) stop_soon = 2;
      if (stop_soon) break;
      queue_cur = queue_cur->next;
      current_entry++;
    }
总结以上内容，该处该过程整体如下：
  1. 判断 `queue_cur` 是否为空，如果是则表示已经完成队列遍历，初始化相关参数，重新开始一轮；
  2. 找到queue入口的case，直接跳到该case；
  3. 如果一整个队列循环都没新发现，尝试重组策略；
  4. 调用关键函数 `fuzz_one()` 对该case进行fuzz；
  5. 上面的变异完成后，AFL会对文件队列的下一个进行变异处理。当队列中的全部文件都变异测试后，就完成了一个”cycle”，这个就是AFL状态栏右上角的”cycles done”。而正如cycle的意思所说，整个队列又会从第一个文件开始，再次进行变异，不过与第一次变异不同的是，这一次就不需要再进行“deterministic fuzzing”了。如果用户不停止AFL，seed文件将会一遍遍的变异下去。
##### 3.3 主循环后
###### 3.3.1 fuzz_one 函数
该函数源码在1000多行，出于篇幅原因，我们简要介绍函数的功能。但强烈建议通读该函数源码，
函数主要是从queue中取出entry进行fuzz，成功返回0，跳过或退出的话返回1。
整体过程：
  1. 根据是否有 `pending_favored` 和`queue_cur`的情况，按照概率进行跳过；有`pending_favored`, 对于已经fuzz过的或者non-favored的有99%的概率跳过；无pending_favored，95%跳过fuzzed&non-favored，75%跳过not fuzzed&non-favored，不跳过favored；
  2. 假如当前项有校准错误，并且校准错误次数小于3次，那么就用calibrate_case进行测试；
  3. 如果测试用例没有修剪过，那么调用函数trim_case对测试用例进行修剪；
  4. 修剪完毕之后，使用calculate_score对每个测试用例进行打分；
  5. 如果该queue已经完成deterministic阶段，则直接跳到havoc阶段；
  6. deterministic阶段变异4个stage，变异过程中会多次调用函数common_fuzz_stuff函数，保存interesting 的种子：
  7. bitflip，按位翻转，1变为0，0变为1
  8. arithmetic，整数加/减算术运算
  9. interest，把一些特殊内容替换到原文件中
  10. dictionary，把自动生成或用户提供的token替换/插入到原文件中
  11. havoc，中文意思是“大破坏”，此阶段会对原文件进行大量变异。
  12. splice，中文意思是“绞接”，此阶段会将两个文件拼接起来得到一个新的文件。
  13. 该轮完成。
这里涉及到AFL中的变异策略，不在本次的讨论中，感兴趣的小伙伴可以结合源码自行进行研究。
###### 3.3.2 sync_fuzzers 函数
该函数的主要作用是进行queue同步，先读取有哪些fuzzer文件夹，然后读取其他fuzzer文件夹下的queue文件夹中的测试用例，然后以此执行。如果在执行过程中，发现这些测试用例可以触发新路径，则将测试用例保存到自己的queue文件夹中，并将最后一个同步的测试用例的id写入到
`.synced/fuzzer文件夹名` 文件中，避免重复运行。
## 四、总结
分析完源码，可以感受到，AFL遵循的基本原则是简单有效，没有进行过多的复杂的优化，能够针对fuzz领域的痛点，对症下药，拒绝花里胡哨，给出切实可行的解决方案，在漏洞挖掘领域的意义的确非同凡响。后期的很多先进的fuzz工具基本沿用了AFL的思路，甚至目前为止已基本围绕AFL建立了“生态圈”，涉及到多个平台、多种漏洞挖掘对象，对于安全研究员来说实属利器，值得从事fuzz相关工作的研究员下足功夫去体会AFL的精髓所在。
考虑到篇幅限制，我们没有对AFL中的变异策略进行源码说明，实属遗憾。如果有机会，将新开文章详细介绍AFL的变异策略和源码分析。
## 五、参考文献
  1. 
  2. 
  3. 
  4. 
* * *