value of b, and succeeds if b(cid:48) is equal to b.
Definition 4. An RFID authentication protocol is said
to be (q, T, )-private iﬀ any (q, T )-privacy adversary has an
advantage at most :
˛˛Pr[A succeeds] − 1
˛˛ ≤  .
2
3. DEFINITIONS AND PROPERTIES
3.1 Pseudo Random Number Generators
Consider a pseudo-random number generator (a PRNG)
g : {0, 1}n −→ {0, 1}L with input and output lengths n and
L = n + k > n, used to expand an n-bit secret random seed
into an L-bit sequence. A distinguisher for g is a probabilis-
tic testing algorithm A which when input an L-bit string
outputs either ‘0’ or ‘1’. We deﬁne the advantage of A for
distinguishing g from a perfect random generator as
˛˛˛PrˆA(g(x)) = 1˜ − PrˆA(y) = 1˜˛˛˛ ,
Adv
prng
g
(A) =
where the probabilities are taken over the random value
x ∈ {0, 1}n (resp. y ∈ {0, 1}n+k) and over the random
choices made by the probabilistic algorithm A. (The value
x is obviously concealed to A.) We deﬁne the advantage for
distinguishing the function g in time T as:
Adv
prng
g
(T ) = max
A
˘Adv
prng
g
(A)¯ ,
where max is taken over all A running in time at most T .
Definition 5. A PRNG g is said to be (T, )-secure iﬀ
Adv
prng
g
(T ) ≤ .
In the security model considered in this paper, the deﬁni-
tion of a secure PRNG thus involves concrete thresholds that
depend on the current perception of an acceptable security
level, for instance  = 2−40 and T = 280 or T = 2128.
Iteration of a PRNG. Let g : {0, 1}n −→ {0, 1}n+k be
a PRNG and Tg the time required to compute g. In order
to deﬁne the PRNG associated with λ ≥ 1 iterations of g,
we let g1 : {0, 1}n −→ {0, 1}n and g2 : {0, 1}n −→ {0, 1}k
denote the functions that respectively map the input of g
to the ﬁrst n output bits of g and to the last k output bits
of g. Thus: g = (g1, g2). The PRNG Gλ associated with λ
iterations of g is eventually deﬁned as:
Gλ : {0, 1}n −→ {0, 1}n+λk,
x (cid:55)−→`g2(x), g2(g1(x)), . . . , g2
`gλ−1
1
(x)´, gλ
1 (x)´ .
Our next theorem, which proof is given in Appendix A,
essentially states that if g is a PRNG, then so is Gλ provided
that some conditions involving λ and the indistinguishability
parameters of g are met.
Theorem 1. If g : {0, 1}n → {0, 1}n+k is a (T, g)-secure
PRNG, then for any λ ≥ 1 the associated iterated PRNG Gλ
is (T − (λ + 1)Tg, λg)-secure.
Duplication of a PRNG. For any PRNG G : {0, 1}n →
{0, 1}L, we let GN denote the duplicated generator GN :
{0, 1}nN → {0, 1}LN , (x1, . . . , xN ) (cid:55)−→ (G(x1), . . . , G(xN )).
The following lemma, which (simple) proof is given in Ap-
pendix B, essentially states that if G is a PRNG, then GN
also is a PRNG.
Lemma 2. If G is a (T (cid:48), G)-secure PRNG, then GN is a
(T (cid:48), N G)-secure PRNG.
We denote by GN
λ the duplicated iterated number gener-
ator associated with N > 1 independent instances of Gλ:
λ : {0, 1}nN −→ {0, 1}(n+λk)N ,
GN
(x1, . . . , xN ) (cid:55)−→ (Gλ(x1), . . . , Gλ(xN )) .
The following theorem, which is a simple consequence of
Theorem 1 and Lemma 2, is used in the sequel:
Theorem 3. For any (T, g)-secure PRNG g : {0, 1}n →
{0, 1}n+k and any λ ≥ 1 and N ≥ 1, the associated dupli-
λ is (T − (λ + 1)Tg, N λg)-secure.
cated iterated PRNG GN
3.2 Universal hash functions families
hash functions is called -almost strongly universal iﬀ:
Definition 6. A family ˘hs : {0, 1}l → {0, 1}m¯
ˆhs(a) = b˜ = 2
˜ ≤  .
ˆhs(a2) = b2|hs(a1) = b1
∀a1 (cid:54)= a2 ∈ {0, 1}l, ∀b1, b2 ∈ {0, 1}m,
∀a ∈ {0, 1}l, ∀b ∈ {0, 1}m,
−m ,
Pr
s∈S
and:
s∈S
of
Pr
s∈S
A 2−m-almost strongly universal hash functions family is
called a strongly universal hash functions family. It is easy
to see that the former inequality is then actually an equality.
45The following lemma upper-bounds the probability that
an adversary predicts the value of some unknown instance
hs∗ of a universal hash function family on a randomly chosen
input, given the value of hs∗ on at most one input and p non-
equalities—that is pairs of values (a, b) such that hs∗ (a) (cid:54)= b.
The proof is given in Appendix C.
Lemma 4. Let {hs}s∈S an -almost strongly universal hash
functions family, s∗ be a (secret) value randomly chosen
in S, and A be a computationally unbounded adversary who
tries to predict the value of hs∗ on a randomly chosen input
value a. Suppose that A is given at most one pair (a0, b0)
and at most p ≤ 1
2 pairs (aj, bj) such that:
hs∗ (a0) = b0 ,
hs∗ (aj) (cid:54)= bj ,
then: Pra∈{0,1}l,s∗ˆA(a) = hs∗ (a)˜ ≤ 2−l + (1 + 2p).
0 < j ≤ p,
Let us also state the following simple property:
Lemma 5. When s and s(cid:48) are chosen independently:
ˆhs(a) = hs(cid:48) (a)˜ = 2
−m .
Pr
s,s(cid:48)∈S
P
b Prˆhs(a) = b, hs(cid:48) (a) = b˜, and since each of the 2m terms
Proof. The above probability can also be written as
of the sum equals 2−2m, the probability equals 2−m.
4. FORWARD PRIVATE SCHEMES
In this section, we ﬁrst brieﬂy describe the OSK proto-
col and improved variants proposed so far. We proceed by
discussing the interactions between the forward privacy re-
quirements and the resistance to denial of service (or DoS)
before discussing the eﬃciency in the back-end system.
4.1 The OSK protocol
Ohkubo, Suzuki, and Kinoshita introduced in [29] the ﬁrst
forward private protocol—that is, ensuring the privacy of
previous traces of its execution even when the attacker is
provided with the internal state of the tag. This scheme,
OSK, is based on a hash chain that refreshes the secret state
contained in a tag at each identiﬁcation exchange. More pre-
cisely, each tag embeds an internal state σi, which is initial-
ized to a secret identiﬁer σ0 stored as usual by the back-end
systems for further identiﬁcation. When an identiﬁcation
request is received, the tag outputs an image of its internal
state σi through a hash function H2 (i.e. sends H2(σi) to
the reader) and updates its internal state by using another
hash function H1: σi+1 = H1(σi). To recover the identity of
a tag, the system computes the hash functions H1 and H2
at most τ times on each of the N possible identiﬁers until
the received value is found or the limit τ is reached.
Figure 1: The hash chain behind OSK’s scheme
Although it achieves its goal of forward privacy, the scheme
has several drawbacks. A ﬁrst issue is that cryptographic
hash functions cannot be eﬃciently implemented in hard-
ware [15], hindering the adoption of this scheme and more
generally of derivate forward private protocols as [12, 9, 6].
Another issue is that the scheme is susceptible to a very
simple denial of service: an adversary can invalidate a tag
by sending it τ + 1 random queries, eﬀectively pushing the
tag out of the veriﬁcation window of the back-end system.
Finally, OSK’s seminal scheme [29] does not prevent from
replay attacks, that is, only provides identiﬁcation and not
authentication. Variants of OSK were later proposed that
protect against replay attacks [12, 9, 6, 33]. These variants
share the feature that the identiﬁcation information H2(σi)
is augmented with an authentication information derived
from σi and a random challenge sent by the reader.
4.2 Forward privacy and DoS
As we outlined above, forward private schemes for RFID
are especially susceptible to denial of service attacks which
desynchronize tags from the back-end system. This results
from an attacker querying a tag too many times—forcing it
to refresh its internal state—for the back-end system to be
able to locate it in the one-way chain.
In an attempt to thwart these DoS attacks, some au-
thors [12, 9] proposed that the reader be authenticated by
the tag to prevent its update through non-legitimate reads.
Unfortunately, if such a counter-measure appears successful
against DoS attacks, it also impacts the forward privacy: be-
tween two legitimate executions of the protocol, a tag does
not update its internal state and can then be traced by its
static answers. To see this, note that the tags cannot all use
the same key κ to authenticate the reader: the whole system
would be compromised as soon as a single tag is tampered
with and leaks κ. The key material has therefore to be tag
dependent which implies that the reader has to identify a tag
before being able to authenticate to it. This is exactly this
preliminary identiﬁcation of the tag to the reader that re-
mains static when the tag does not update its internal state
and allows an attacker to trace it. One can check that the
scheme in [9] is not fully forward private as its internal state
is not updated at each authentication attempt, although it
oﬀers a stronger privacy than Dimitriou’s scheme [12] in
which consecutive failed authentication attempts of a tag
can be correlated without accessing its internal state.
To summarize, it is impossible to reach the highest level
of forward privacy and unlimited DoS resistance simulta-
neously: either the tags do not systematically update their
internal states and the scheme is not forward private, or they
systematically update their internal states and the scheme is
then potentially susceptible to DoS attacks, as for instance
the seminal OSK scheme and its variants [6, 33]. Moreover,
being vulnerable to DoS attacks compromises the forward
privacy of these schemes under the deﬁnition of Section 2.
These schemes however keep part of the forward privacy:
the scheme in [33] is proven (in the random oracle model)
to oﬀer a weaker form of forward privacy named narrow pri-
vacy, i.e. it remains private if tags can be tampered with by
a privacy adversary, but the adversary has no access to the
authentication outcome (success or failure) in the reader for
authentication exchanges he disturbs. We propose in the
next section an RFID scheme that can be claimed to of-
fer the strongest achievable forward privacy given the above
situation, namely forward privacy under the deﬁnition of
Section 2 provided that the maximum number q of authen-
tications an adversary can disturb is not too large.
H2H1H1H1H1H2H2σiσi−1σi+1464.3 Back-end system efﬁciency
Although far less critical than for tags, the eﬃciency of the
back-end system is also very important in practice. OSK and
derivate protocols have to search through the hash chains
seeded by the initial state of all the tags in the system to
ﬁnd a potential match with the submitted authentication
value. This operation is obviously quite time consuming:
searching through N chains of length ω requires ωN hash
function evaluations. Avoine and Oechslin proposed in [6, 5]
to use time/memory trade-oﬀs (originally used for breaking
block-ciphers) to perform faster lookups after an adequate
pre-computation. This idea improved a lot the back-end
system eﬃciency in the OSK protocol and its derivatives.
5. A FORWARD PRIVATE PROTOCOL
WITHOUT HASH FUNCTIONS: PFP
This section exposes our new scheme PFP, an eﬃcient and
Provably Forward Private authentication scheme for RFIDs
built on a PRNG and a universal hash functions family: it
provably achieves forward privacy while addressing a major
eﬃciency shortcoming of previous schemes by removing the
need for cryptographic hash functions. Contrary to former
proposals [4, 33], we do not rely on random oracles but prove
concrete security bounds for PFP in the standard model.
5.1 The PFP protocol
As explained above, all previously proposed forward pri-
vate RFID protocols make use of cryptographic hash func-
tions to refresh the internal state of the tag in a one-way
fashion. The nice side-eﬀect is that the security proofs are
eased by the random oracle model. Cryptographic hash
functions properties however are too strong for the appli-
cation at hand (collision resistance is useless) and give a
huge performance penalty in practice [15]. We thus propose
a new way to update the internal state of the tags which
is much more eﬃcient. The idea is to rely on a PRNG to
refresh the internal state of the tag with some part of the
sequence it produces and use another part for the purpose of
authentication. As we show in the following, the properties
of PRNGs suﬃce to prove the security and forward privacy
of the scheme in the standard security model. Moreover,
some PRNGs admit highly eﬃcient—i.e. about 1500 GE—
hardware implementations [16].
Recall that g1 is the mapping corresponding to the ﬁrst
part of the PRNG g and that g2 is the mapping correspond-
ing to the second part of g so that: g = (g1, g2). Then,