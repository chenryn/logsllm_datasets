User: How to use socket programming in Python to achieve simple network communication?
Assistant: The following is a simple example that demonstrates how to implement basic network communication using socket programming in Python: Server-side code: ```python import socket HOST = '127.0.0.1' PORT = 8888 s = socket.socket(socket. AF_INET, socket. SOCK_STREAM) s. bind((HOST, PORT)) s. listen(1) print('Waiting for connection...') conn, addr = s. accept() print('Connected by', addr ) while True: data = conn.recv(1024) if not data: break conn.sendall(data) conn.close() ``` client code: ```python import socket HOST = '127.0.0.1' PORT = 8888 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) while True: message = input("Enter message to send: ") s.sendall(message.encode()) data = s.recv(1024) print('Received', repr(data.decode())) s.close() ``` In this example, we create a TCP socket and bind it to the local IP address and port 8888. The server waits for the client to connect, and once the connection is established, it prints out the client's address and port number, and starts receiving and sending data. The client connects to the server's IP address and port number, once the connection is established, sends the message entered by the user, and waits for the server to reply. When the client closes, the connection is terminated. This example is just a simple example that demonstrates how to establish network communication using socket programming in Python. In practical applications, you need to write more complete codes according to your specific needs.