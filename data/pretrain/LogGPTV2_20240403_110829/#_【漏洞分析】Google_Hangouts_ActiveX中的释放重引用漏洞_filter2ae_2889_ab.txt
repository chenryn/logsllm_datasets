ActiveX控件中的回调函数可能会触发释放重引用漏洞。如果控件在调用回调函数之前没有调用AddRef（），则会发生这种情况。回调函数拥有对控件的引用,但控件并没有考虑这种情况。
我通过创建一个将删除控件的回调函数来测试这个场景。
     sdr  
     bp OLEAUT32!DispCallFunc "u poi(poi(poi(esp+4))+(poi(esp+8))) L1;gc"  
我在调试器中遇到以下崩溃。
     (13b4.24a8): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
     *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:UsersSeanAppDataLocalGoogleGoogle Talk Plugingoogletalkax.dll -   
     eax=00000001 ebx=00000001 ecx=0aabe8b7 edx=00161078 esi=00000000 edi=407a2fb0  
     eip=13e70ca5 esp=0a13c1b8 ebp=0a13c2cc iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00210246  
     googletalkax!DllUnregisterServer+0x6385:  
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:407a2fcc=????????
EDI寄存器指向无效的内存。
     0:008> r  
     eax=00000001 ebx=00000001 ecx=0aabe8b7 edx=00161078 esi=00000000 edi=407a2fb0  
     eip=13e70ca5 esp=0a13c1b8 ebp=0a13c2cc iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00210246  
     googletalkax!DllUnregisterServer+0x6385:  
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:407a2fcc=????????  
     0:008> dd edi  
     407a2fb0 ???????? ???????? ???????? ????????  
     407a2fc0 ???????? ???????? ???????? ????????  
     407a2fd0 ???????? ???????? ???????? ????????  
     407a2fe0 ???????? ???????? ???????? ????????  
     407a2ff0 ???????? ???????? ???????? ????????  
     407a3000 ???????? ???????? ???????? ????????  
     407a3010 ???????? ???????? ???????? ????????  
     407a3020 ???????? ???????? ???????? ????????
进一步的分析表明，它指向已释放的内存。
     0:008> !heap -p -a edi  
       address 407a2fb0 found in  
       _DPH_HEAP_ROOT @ 161000  
       in free-ed allocation ( DPH_HEAP_BLOCK:     VirtAddr     VirtSize)  
                       40751ccc:     407a2000       2000  
       51f990b2 verifier!AVrfDebugPageHeapFree+0x000000c2  
       77691564 ntdll!RtlDebugFreeHeap+0x0000002f  
       7764ac29 ntdll!RtlpFreeHeap+0x0000005d  
       775f34a2 ntdll!RtlFreeHeap+0x00000142  
       75f514ad kernel32!HeapFree+0x00000014  
       13e88310 googletalkax!DllUnregisterServer+0x0001d9f0  
       13e6e407 googletalkax!DllUnregisterServer+0x00003ae7  
       13e6218a googletalkax+0x0000218a  
       13e6572f googletalkax+0x0000572f  
       61d0fe01 +0x0000001d  
       61d24fd6 MSHTML!CBase::PrivateRelease+0x000000bc  
       61d0d8ee MSHTML!CTxtSite::Release+0x0000001a  
       61d0d986 MSHTML!CBase::ReleaseInternalRef+0x0000001f  
       5e6586d3 jscript9!Js::CustomExternalObject::Dispose+0x00000023  
       5e65869c jscript9!SmallFinalizableHeapBlock::DisposeObjects+0x00000134  
       5e659880 jscript9!HeapInfo::DisposeObjects+0x000000b0  
       5e659750 jscript9!Recycler::DisposeObjects+0x0000004a  
       5e6596fe jscript9!Recycler::FinishDisposeObjects+0x0000001a  
       5e74f64c jscript9!Recycler::CollectOnConcurrentThread+0x00000087  
       5e655f36 jscript9!DefaultRecyclerCollectionWrapper::ExecuteRecyclerCollectionFunction+0x00000026  
       5e655eeb jscript9!ThreadContext::ExecuteRecyclerCollectionFunctionCommon+0x0000003b  
       5e655e6d jscript9!ThreadContext::ExecuteRecyclerCollectionFunction+0x000000ad  
       5e656a46 jscript9!Recycler::DoCollectWrapped+0x00000079  
       5e7fc8dc jscript9!Recycler::Collect+0x0000004b  
       5e64c06d jscript9!Js::InterpreterStackFrame::Process+0x00001940  
       5e64c7ab jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x000001ce
**测试利用**
下一步是检查错误的可利用性。我们需要用自己分配的内存替换释放的内存，看看数据是如何处理的，以测试它可以执行代码。
我用.dvalloc（ ）来实现这一点。
我们看下面的代码，我们可以看到有一个路径导致代码执行。edi +
1ch指向的已释放内存放入EAX寄存器中。然后引用此内存，并将eax指向的数据放入ESI寄存器中。然后有一些其他操作和函数调用，之后调用ESI + 4。
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch]  
     13e70ca8 8b30      mov   esi,dword ptr [eax] ds:002b:00000000=????????  
     13e70caa 8d850cffffff  lea   eax,[ebp-0F4h]  
     13e70cb0 50       push  eax  
     13e70cb1 8d45e4     lea   eax,[ebp-1Ch]  
     13e70cb4 50       push  eax  
     13e70cb5 e8768e0000   call  googletalkax!DllUnregisterServer+0xf210 (13e79b30)  
     13e70cba 8b4f1c     mov   ecx,dword ptr [edi+1Ch]  
     13e70cbd 83c408     add   esp,8  
     13e70cc0 50       push  eax  
     13e70cc1 ff5604     call  dword ptr [esi+4]
我们需要确保函数调用不会改变ESI寄存器的值，以确保我们有一条代码执行的路径。下面的windbg会话显示我如何分配新的内存来替换释放的内存，并通过这段代码来确保这个路径可以执行代码。
     (11cc.2728): Access violation - code c0000005 (first chance)  
     First chance exceptions are reported before any exception handling.  
     This exception may be expected and handled.  
     *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:UsersSeanAppDataLocalGoogleGoogle Talk Plugingoogletalkax.dll -   
     eax=00000001 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=111e2fb0  
     eip=59d80ca5 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00010246  
     googletalkax!DllUnregisterServer+0x6385:  
     59d80ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:111e2fcc=????????  
     0:008> .dvalloc 2000h  
     Allocated 2000 bytes starting at 0c690000  
     0:008> r @edi = 0c690000  
     0:008> dd edi+1c  
     0c69001c 00000000 00000000 00000000 00000000  
     0c69002c 00000000 00000000 00000000 00000000  
     0c69003c 00000000 00000000 00000000 00000000  
     0c69004c 00000000 00000000 00000000 00000000  
     0c69005c 00000000 00000000 00000000 00000000  
     0c69006c 00000000 00000000 00000000 00000000  
     0c69007c 00000000 00000000 00000000 00000000  
     0c69008c 00000000 00000000 00000000 00000000  
     0:008> p  
     eax=00000000 ebx=00000001 ecx=ef97dd9c edx=02c51078 esi=00000000 edi=0c690000  
     eip=59d80ca8 esp=09d7c4f0 ebp=09d7c604 iopl=0     nv up ei pl zr na pe nc  
     cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b       efl=00000246  
     googletalkax!DllUnregisterServer+0x6388:  
     59d80ca8 8b30      mov   esi,dword ptr [eax] ds:002b:00000000=????????  
     0:008> .dvalloc 200  
     Allocated 1000 bytes starting at 0cbd0000  
     0:008> r @eax = 0cbd0000  
     0:008> dd eax  
     0cbd0000 00000000 00000000 00000000 00000000  
     0cbd0010 00000000 00000000 00000000 00000000  
     0cbd0020 00000000 00000000 00000000 00000000  
     0cbd0030 00000000 00000000 00000000 00000000  