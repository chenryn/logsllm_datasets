        new_co_consts = []
        for co_const in decryptor.co_consts:
            if type(co_const) == type(decryptor):
                co_const = convert(co_const,mapping)
                new_co_consts.append(co_const)
            else:
                new_co_consts.append(co_const)
        new_co_code = b''
        for i in range(len(decryptor.co_code)):
            if i & 1:
                new_co_code += decryptor.co_code[i].to_bytes(1, byteorder='little')
            else:
                if decryptor.co_code[i] in mapping:
                    new_co_code += mapping[decryptor.co_code[i]].to_bytes(1,byteorder= 'little')
                else:
                    print("no find")
                    new_co_code += decryptor.co_code[i].to_bytes(1,byteorder= 'little')
        return decryptor.replace(co_code=new_co_code, co_consts=tuple(new_co_consts))
    final = convert(decryptor,mapping)
    with open('backup_decryptor_converted.pyc', 'wb') as fc:
        fc.write(b"\x55\x0d\x0d\x0a" + b"\0"*12) # 文件头
        marshal.dump(final, fc)
    print('ok')
到这里还是使用uncompyle6失败，回去检查发现名为`EXTENDED_ARG`和`LOAD_METHOD`的opcode后面紧跟着的字节不是0xE9，要以硬编码方式补上
    mapping[109] = 144
    mapping[90] = 160
这样得到的pyc就可以使用uncompyle6转化为py文件了
###  分析py文件
得到py文件，它直接从最底层的内建函数builtins出发，所以代码还是很难看的
    import builtins as bi
    def sc(s1, s2):
        if getattr(bi, 'len')(s1) != getattr(bi, 'len')(s2):
            return False
        res = 0
        for x, y in getattr(bi, 'zip')(s1, s2):
            res |= getattr(bi, 'ord')(x) ^ getattr(bi, 'ord')(y)
        else:
            return res == 0
    def ds(s):
        k = [80, 254, 60, 52, 204, 38, 209, 79, 208, 177, 64, 254, 28, 170, 224, 111]
        return ''.join([getattr(bi, 'chr')(c ^ k[(i % getattr(bi, 'len')(k))]) for i, c in getattr(bi, 'enumerate')(s)])
    rr = lambda v, rb, mb: (v & 2 ** mb - 1) >> rb % mb | v > rb % mb | v << mb - rb % mb & 2 ** mb - 1
    def rs(s):
        return [rr(c, 1, 16) for c in s]
    f = getattr(bi, ds(rs([114, 288, 152, 130, 368])))(ds(rs([42, 288, 144, 162, 380, 12, 322, 92, 326, 388, 110, 290, 220, 412, 436, 158])))
    # f = input("Enter password")
    # 输入justCTF{1234567890aaaa}
    ch01 = [
     100, 410]
    ch02 = [206, 402]
    ch03 = [198, 280]
    ch04 = [30, 280]
    ch05 = [198, 300]
    ch06 = [194, 280]
    ch07 = [198, 322]
    ch08 = [206, 300]
    ch09 = [194, 406]
    ch10 = [30, 400]
    ch11 = [74, 270]
    if f.startswith(ds(rs([116, 278, 158, 128, 286, 228, 302, 104]))):
        if f.endswith(ds(rs([90]))):
            ff = f[{}.__class__.__base__.__subclasses__()[4](ds(rs([208]))):{}.__class__.__base__.__subclasses__()[4](ds(rs([250, 414])))]
            print(ff)
            # 输出了 1234567890aaaa，说明ff就是我们的input
            rrr = True
            # 每两个字符比较一次，这样是可以爆破的
            if len(ff) == 0:
                rrr = False
            chr_array = [ch01,ch02,ch03,ch04,ch05,ch06,ch07,ch08,ch09,ch10,ch11]
            for i in range(11):
                for char1 in  range(32,0x7f):
                    for char2 in range(32,0x7f):
                        tmp = list(ff)
                        tmp[2 * i] = chr(char1)
                        tmp[2 * i + 1] = chr(char2)
                        ff = ''.join(tmp)
                        if sc(ds(rs(chr_array[i])), ff[2*i:2*i+2]):
                            print(ff[2*i:2*i+2],end='')
                            break
            if not sc(ds(rs(ch01)), ff[0:2] if ff[0:2] != '' else 'c1'):
                rrr = False
            if not sc(ds(rs(ch02)), ff[2:4] if ff[2:4] != '' else 'kl'):
                rrr = False
            if not sc(ds(rs(ch03)), ff[4:6] if ff[4:6] != '' else '_f'):
                rrr = False
            if not sc(ds(rs(ch04)), ff[6:8] if ff[6:8] != '' else '7f'):
                rrr = False
            if not sc(ds(rs(ch05)), ff[8:10] if ff[8:10] != '' else 'd0'):
                rrr = False
            if not sc(ds(rs(ch06)), ff[10:12] if ff[10:12] != '' else '_a'):
                rrr = False
            if not sc(ds(rs(ch07)), ff[12:14] if ff[12:14] != '' else 'jk'):
                rrr = False