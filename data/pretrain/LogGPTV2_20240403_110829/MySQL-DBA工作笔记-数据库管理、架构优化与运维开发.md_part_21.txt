--defaults-file=/etc/my.cnf
，每次插入2条。
Mar
/incre/20170322/2017-03-22_18-07-38
18:08 test2.ibd.meta
22 18:08 test2.ibd.delta
22
test2.frm
--user=root
--copy-back
-user=root
---
## Page 133
相当不给力了。
文件。
就意味着备份出来的情况和全备的目录结构是一样的，但是指定的表会备份出 ibd，frm
/home/databak/fu11/20170322_2
操作如何来实现呢。
stream 选项，slave-info 选项能够方便搭建从库，生成偏移量的信息，比如并行 parallel
/home/databak/fu11/20170322
程。这个路径需要注意，还是 merge 到全备中。
--incremental-dir=/home/databak/incre/20170322/2017-03-22_18-11-26
这里有几点需要注意，工具还是会逐个去扫描，只是那些不符合的会被忽略掉，也
 innobackupex --defaults-file=/etc/my.cnf --user=root --include='test.test2
而且有一点值得吐槽一下的是，ibdata 也会完整备份出来，如果这个文件很大，那就
备份中的常用场景很多时候其实我不想备份整个库，我只想备份一个表，那么这个
不过也别对这种备份失去信心，有一个场景还是很实用的，那就是迁移表。
total"0
innobackupex
还可以根据LSN 来备份，选项是 incremental-lsn。
4 rows in set (0.06 sec)
 innobackupex
total 1036
[test]# 1l
对于 stream 选项，默认是打包，可以结合管道来实现压缩，比如：
备份中的选项补充 innobackupex 中的选项很多，有几个还是比较有特色的，比如
>select *from test2;
再次查看数据，我们要恢复的4条数据都恢复回来了。
继续还原恢复。
test]# cd
idl
1234
11
1 mysql mysql 8556 Mar 22 18:34 test2.frm
T
../mysql
--defaults-file=/etc/my.cnf
-defaults-file=/etc/my.cnf
--user=root
--user=root
第3章MySQL 基础运维面面观丨111
gzip
--stream=tar
--copy-back
---
## Page 134
112丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
量来恢复；另外一类是通过解析binlog 来恢复，前提条件是日志格式为 row。
成了一个.exp 文件，在 MySQL 原生版本中是.cfg 文件。
用 Innobackupex 来做物理备份，然后还原导入，达到迁移的目的。
如果需要手工恢复数据，其实有两种思路，
下面的命令会声明指定目录下的备份需要导出对象。，innobackupex--apply-log
恢复方法3：使用mysqlbinlog手工恢复
4 rows in set (0.00 sec)
查看数据的情况，发现数据还是回来了。
然后拷贝 ibd 文件到指定目录，赋权限，导入表空间信息。
同时删除刚刚拷贝过来的.exp 文件。
Query OK，0 rows affected (0.03 sec)
我们只拷贝ibd文件也照样可以。可能在新版本中会有一些警告提示，我们重新来做一下。
有另外一点值得说的是，这个.exp 文件是不是必须的呢，其实也不是。
Query OK,0 rows affected (0.00 sec)
>alter table test2 import tablespace;
接下来使用 import 的方式即可完成导入。
然后就是物理拷贝，复制.exp 文件和.ibd 文件到指定目录下，修改属主权限。
> alter table test2 discard tablespace;
对表 test2 做数据信息截断。
-rw-r--r--
-rw-r--r--
[test]# 1l
迁移表还是刚刚的这个场景，如果表 test2 需要拷贝到另外一套环境中，我们可以使
当然这个过程中还是有很多需要注意的地方，不可大意。
[test]> select *from test2;
[test]>alter table test2
3
12
id
一
root root 16384 Mar 22 19:29 test2.exp
2 discard tablespace;
一种就是通过全备+binlog 的时间、偏移
---
## Page 135
varchar(50)） ENGINE=InnoDB
>insert into test values(6,'name6','memo6');
>update test set memo='new'where id in(2,4);
>delete from test where
我们开始模拟 DML 的操作。
为了测试方便，先标记一个时间戳。
>select *from test;
查看一下数据的基本情况：
再插入几条数据。
create table
创建表test。
为了方便模拟，我们可以切换一下日志，flush logs 之后得到的日志情况如下：
> show binary logs;
先看一看 binlog 的情况，
我们来简单模拟解析 binlog 的恢复方式。
2017-02-0604:14:33
select current_timestamp();
id丨name
mysql-bin.000015
Log_name
mysql-bin.000014
Log_name
S
3
2
insert
name2
namel
name5
name4
|memo
|memol
into
test
memo4
memo
memo5
IFile_size
File_size
test
999120424
1073742219
998953054
，可以看到当前的 binlog 是序号为 15 的日志文件。
auto_increment=100 default charset=utf8;
id in (1,3);
6722
values(1,'name1','memo1'),(2,'name2','memo2'),
 not null
 primary key,name varchar(20),memo
第3章MySQL基础运维面面观丨113
---
## Page 136
114丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
就是单向的加减法。
的部分变化前后的数据都一览无余。其实 DML 中难度较大的就是 update,而 insert,delete
数据变更，但是语句和执行的还是有一些出入，我们直接拷贝一份bimlog 到/tmp 目录下解析。
mysqlbinlog
insert 操作对应 binlog 日志中的 SQL。
update 操作对应 binlog 日志中的 SQL。
delete 操作对应 binlog 日志中的 SQL。
下面我们来解读一下 binlog，根据时间戳得到一个基本可读的日志，
> select current_timestamp();
这些操作在 binlog 中都有了很详细的标记，
做完上面三个DML 操作之后，我们标记一下时间。
at 998971422
##
#
at 998969666
#
current_timestamp()
#
#
#
WHERE
SET
WHERE
UPDATE
SET
WHERE
DELETE FROM
@2='name4'
@1=4
@3='memo4'
@2='name4'
@1=2
@1=2
@1=3
@3='memo1
=1
'new
'name3
`test`.`test`
`test`.`test
="2017-02-06
"test`.`test
"test`.`test
-no-defaults
04:15:44"
--start-datetime="2017-02-06  04:14:33'
数据的情况基本都是一目了然，update
/tmp/mysql-bin.00001
里面还有如下的这些
---
## Page 137
们限定数据为 test。
是多了一些辅助功能。
或者通过中控的方式进行部署。
具是Python开发，当然有一些依赖的库和环境需要配置，两个步骤即可完成。
得工具化一些，可以使用开源工具来完成，本方法使用 binlog2sql来进行恢复演示，这个工
接出可运行的SQL语句，然后按照逆向的顺序执行即可。
到更详细的信息可以使用-vv选项，这样可以包含一些数据类型和元信息的注释内容。
admin'@'127.0.0.1'
完成了环境的配置，工具使用起来和 mysqlbinlog 还是有一些相似之处，好的地方就
比如我们使用如下的命令来解析 binlog 得到指定时间戳范围内的 SQL 情况，在此我
GRANT
我们创建一个用户 admin来解析。
pip install -r requirements.txt
（2）使用 pip 安装，如下：
git clone https://github.com/danfengcao/binlog2sql.git && cd binlog2sql
（1）下载源码
方法3在恢复数据量不大的情况使用手工方式解析是可行的，但是如果想把这个工作做
恢复方法4：使用开源工具恢复数据binlog2sql
###DELETE FROMteSt.teSt
###
###
### INSERT INTO test`.`test`
得到的文件内容如下：
注：线上环境可能没有网络连接，
回到数据恢复的问题，如果手工恢复就需要做几件事情，
##
-Vv的结果：
比如：
#
WHERE
SET
@2=
@1=6
SELECT,
'namel
IDENTIFIED BY
REPLICATION
￥7
VARSTRING(60)
SLAVE,
，我们可以统一下载需要的依赖包，可以统一部署
'admin';
>/tmp/tmp.1og
REPLICATION
CLIENTON*.*
一个就是根据字段标示拼
第3章MySQL基础运维面面观丨115
TO
---
## Page 138
116丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
测试的前提下，进行符合自己业务特点和需求的定制。
name3');
2017-02-06 04:15:29
04:14:331
了解析和顺序调整。
memo
--flashback
'name6'); #start 12062 end 12239 time
cime
time 2017-02-06 04:15:29
namel');
name`='name6'
name='namel
当然在实际使用过程中肯定会碰到各种小问题，
5
> select *from test;
运行了如上的语句之后，
INSERT
INSERT
UPDATE
得到的内容如下：
如果希望得到闪回的语句，
其实看起来还是很省事了。
INSERT
UPDATE
UPDATE
DELETE
DELETE
rows in set (0.oo sec)
idlname
45
123
/tmp/tmp.1og
namel
#start
#start
--stop-datetime='2017-02-06 04:15:44'
name5
name4
name3
name2
INTO
04:15:29
INTO
INTO
test
test
FROM
test
test
FROM
FROM
LIMIT1;
AND
LIMIT1;
LIMIT 1; #start 11127
memo
11127
memo1
test
memo5
memo4
memo3
memo2
test
test`
test