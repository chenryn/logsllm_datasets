title:SSARES: Secure Searchable Automated Remote Email Storage
author:Adam J. Aviv and
Michael E. Locasto and
Shaya Potter and
Angelos D. Keromytis
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
SSARES: Secure Searchable Automated Remote Email Storage∗†
Department of Computer and Information Science
Department of Computer Science
Adam J. Aviv
Michael E. Locasto
University of Pennsylvania
PI:EMAIL
Columbia University
PI:EMAIL
Shaya Potter
Angelos D. Keromytis
Department of Computer Science
Department of Computer Science
Columbia University
PI:EMAIL
Columbia University
PI:EMAIL
Abstract
1 Introduction
The increasing centralization of networked services
places user data at considerable risk. For example, many
users store email on remote servers rather than on their lo-
cal disk. Doing so allows users to gain the beneﬁt of reg-
ular backups and remote access, but it also places a great
deal of unwarranted trust in the server. Since most email
is stored in plaintext, a compromise of the server implies
the loss of conﬁdentiality and integrity of the email stored
therein. Although users could employ an end–to–end en-
cryption scheme (e.g., PGP), such measures are not widely
adopted, require action on the sender side, only provide
partial protection (the email headers remain in the clear),
and prevent the users from performing some common oper-
ations, such as server–side search.
To address this problem, we present Secure Searchable
Automated Remote Email Storage (SSARES), a novel system
that offers a practical approach to both securing remotely
stored email and allowing privacy–preserving search of that
email collection. Our solution encrypts email (the head-
ers, body, and attachments) as it arrives on the server us-
ing public–key encryption. SSARES uses a combination of
Identity Based Encryption and Bloom Filters to create a
searchable index. This index reveals little information about
search keywords and queries, even against adversaries that
compromise the server. SSARES remains largely transpar-
ent to both the sender and recipient.
∗
This work was partially supported by the National Science Foundation
through Grant ITR CNS-04-26623.
†
all work done at the Network Security Lab at Columbia University
Department of Computer Science
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.30
DOI 10.1109/ACSAC.2007.30
129
129
Most email is both sent and stored in a plaintext format.
During transmission, encryption standards, such as SSL,
can protect a message from eavesdroppers. However, email
“at rest” (stored on the server) remains at risk. Servers that
store email and provide remote access and easy backups of
a user’s mailbox are also trusted to protect the email’s con-
tents; a compromised server implies the compromise of the
users’ email, and a user cannot easily prevent such a sit-
uation. Even though email content can be secured using
public-key encryption (e.g., PGP), this solution alone is not
viable for two reasons. First, PGP preserves the headers
of the email so that the message can be properly delivered.
Consequently, an attacker can still partially compromise the
users’ privacy by determining who the user is communicat-
ing with. More importantly, PGP-style protection relies on
the correspondents actively employing the tool. Unfortu-
nately, the use of public-key encryption is not widespread
among the general public.
The ﬁrst step toward a solution to the email ”at rest”
problem involves the construction of an email system that
provides conﬁdentiality protection without the direct inter-
action of the user. Having a transparent procedure would
allow for the average user to not change his/her normal
email practices while still being assured of the protection
provided. Incoming email can be completely encrypted on
the email server as it arrives. More precisely, the email
body, headers, and attachments are entirely encrypted using
a RSA-style public key so that once encrypted, the email
can not be read except by the appropriate recipient. Doing
so assures that, regardless of who the sender is, the content
will be protected once it arrives. The users’ email practices
need not change, and they do not need to convince their cor-
respondents to alter theirs.
Since the server encrypts the entire message with a pub-
lic key upon arrival, it cannot access any content in the
email once the message is encrypted, limiting the amount
of data exposure to an attacker that compromises the sys-
tem. However, the server also cannot provide search ca-
pabilities like those supported by email protocols such as
POP or IMAP. Although we could move the search process
to the client, doing so requires extra processing and band-
width, since every message must be transferred, decrypted,
and then searched. If the client is working from a mobile
device or has a large amount of email, this choice involves
serious delay. It seems that we have arrived at an impasse:
we gain conﬁdentiality protection but must relinquish the
ability to search the archive of encrypted emails.
A ﬁrst approach to remote searches of the encrypted
email archive uses a hash table to reference keywords within
a message. A user sends a hash of the keyword, and the
server uses the hash table to determine which messages
matches the request without decrypting any messages or
needing knowledge of the keyword being searched. If an at-
tacker compromises the server, however, the attacker would
have access to the hash table and could perform a dictionary
attack using keywords that are relevant to the victim. The
attacker could also watch the user perform searches and ini-
tiate a dictionary attack against the hash requests. Both the
emails and the search mechanism require protection.
To solve the problem of simultaneously protecting email
”at rest” and allowing for keyword-based searching, we
present Secure Searchable Automated Remote Email Stor-
age (SSARES). Our system completely encrypts incom-
ing messages and also allows a user to search their email
without revealing identiﬁable information about either the
keywords of the messages or the keywords in the search
queries. The system is built using a combination of PEKS
(Public Key Encryption with Keyword Search) [5], a form
of Identity Based Encryption (IBE) that works with a pub-
lic/private key architecture, and Bloom Filters [4].
Our threat model focuses on two types of attackers. The
ﬁrst can break into the server and download the contents of
the mailbox for ofﬂine analysis. The second observes the
system in action and watches how messages are matched to
try and determine the contents. Of course, once the server
becomes compromised, all subsequent arriving unencrypted
messages are trivially exposed.
2 Related Work
the keywords using the searchable format.
Goh presented an encrypted Bloom Filter, Z-IDX, that
is secure against adaptive chosen keyword attack [10]. The
document is encrypted with a public key on the server, but a
Z-IDX is attached to the message only after the client con-
nects, downloads new messages, decrypts them, creates the
Z-IDX, and returns it to the server. Once the Z-IDX is cre-
ated by the user, the user can produce trapdoors, an encryp-
tion of the keyword. The server can use the trapdoor to test
whether that keyword is contained in the ﬁlter. Bellovin et
al. presented a similar technique, but their scheme requires
an independent third party [3]. The system is designed such
that two or more parties may share data when they do not
fully trust each other. It is geared toward database queries,
and as such it does not match our needs because the third
party can be considered as untrustworthy as the server it-
self.
Ballard et al. developed a correlation-resistant storage
technique for a ”survivable” storage network capable of us-
ing untrusted nodes [2]. Curtomola et al. describe a search-
able symmetric encryption scheme with properties similar
to Goh [9]. Although their approach is more efﬁcient than
SSARES, the system still requires the user to encrypt con-
tent locally in order to protect the secret key, and thus would
not ﬁt our goal for transparent operations. Other work in
this area has been done for a remote ﬁle system [8] and for
a distributed storage system [1].
Boneh et al. introduced a new method to perform IBE
with a Weil Pairing [6]. Although a number of papers have
leveraged this work, the work most relevant to SSARES is
by Boneh et al. [5], which introduced the PEKS process.
Park et al. enhanced the PEKS concept for use as device-
speciﬁc private keys and describes an application for email
gateways [13]. Park also introduced a mode of PEKS that
allows for conjunctive keyword searching [14]. Although
not currently implemented in SSARES, conjunctive key-
word searching would be a valuable feature to add. Gu et
al. showed how to remove covert channels from the PEKS
encryption, and presented an efﬁcient scheme that removed
the pairing operation from the encryption procedure [11].
Waters et al. used a form of the PEKS procedure to build
an encrypted searchable audit log [16]. It uses a three-party
system, an encrypted database with PEKS referencing, an
audit escrow agent that managed key distribution, and an
authentication system.
2.1 PEKS
Song et al. studied the problem of searching encrypted
data by using asymmetric key techniques [15]. Their system
requires the user to perform keyword encryption locally so
that no information is leaked to the untrusted server. For
newly arriving email, the keywords must be stored in an
unsearchable format until the user can connect and encrypt
The PEKS process consists of four functions. They are
as follows:
1. KeyGen(s): generates a public/private-key pair, Apub
and Apriv, given a security parameter s
130130
2. P EKS(Apub, W ): given a public-key, Apub, and a
word, W , produces the searchable encryption, or the
PEKS, called S
3. T rapdoor(Apriv, W ): given the private key Apriv and
a word W, it produces an encrypted trapdoor TW
4. T est(Apub, S, TW ): given the public key Apub, a
(cid:1)), outputs
trapdoor TW , and S = P EKS(Apub, W
match if W = W
(cid:1)
and no match otherwise
The construction of PEKS that SSARES uses is based on
a bilinear map of elliptic curves. It uses two groups G1, G2
of prime order p with a bilinear map e : G1XG1 → G2
between them. There are also two hash functions that ﬁt the
following criteria:
1. H1 : {0, 1}∗ → G1
2. H2 : G2 → {0, 1} logp
The more detailed construction is as follows:
1. KeyGen(p): The security parameter determines the
size, p, of the groups G1 and G2.
It next picks a
random α and a generator g of G1, and it outputs
Apub = [g, h = gα] and Apriv = α.
2. P EKS(Apub, W ):
computes t = e(H1(W ), hr)
where r is randomly generated, and outputs
P EKS(Apub, W ) = [gr, H2(t)] = S[A, B]
3. T rapdoor(Apriv, W ): TW = H1(W )α which is con-
tained in G1
4. T est(Apub, S, TW ): if H2(e(TW , A)) = B then it is a
match otherwise it is no match
A message is parsed for keywords. The original message
can be encrypted and each keyword i can be encrypted
using the PEKS public-key, Apub, to create a searchable
encryption Si. Each Si can then be appended to the end
of the encrypted message in a list form. For a message M
and a public-key encryption algorithm Epub, the resulting
remote searchable message M
can be visualized like this:
(cid:1)
(cid:1) = [Epub(M), S1, S2, ..., Si, ..., Sn]
M
To search for a keyword, a trapdoor can be created using
the PEKS private key, Apriv, and the keyword. The trap-
door can then be tested against the PEKS list using Apub,
and if any match, then the keyword is contained in the mes-
sage.
This construction is non-interactive and can thus be
used autonomously between client and server due to the
public/private-key structure.
131131
2.2 Bloom Filter
A Bloom Filter is an array, B, of m bits that are ini-
tialized to zeros. There is also a set of k independent hash
functions that are uniformly distributed between [0, m− 1].
To add an entry into the Bloom Filter for a word W ,
calculate
b1 = H1(W )
b2 = H2(W )
...
bk = Hk(W )
Each bi represents an index into B, and each corre-
sponding location in B is set to 1. To check if a word W
is represented in the index, the same hashing procedure
If for each bi there is a corresponding 1 at the
is used.
location B[bi], then W is probabilistically represented in
If any of the bi locations have 0, then
the Bloom Filter.
W is deﬁnitively not represented in the Bloom Filter. The
probability of a false-positive, or the error of the ﬁlter, can