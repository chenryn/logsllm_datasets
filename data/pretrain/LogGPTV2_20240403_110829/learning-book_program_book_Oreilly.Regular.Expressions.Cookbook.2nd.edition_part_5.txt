### myregexp.com

Sergey Evdokimov has developed several regular expression testers for Java developers. The homepage, accessible at [http://www.myregexp.com](http://www.myregexp.com) (Figure 1-8), provides an online regex tester in the form of a Java applet that runs directly in your browser. To use this applet, you need to have Java 4 (or a later version) installed on your computer. The applet leverages the `java.util.regex` package, which was introduced in Java 4, to evaluate your regular expressions. Throughout this book, "Java regex flavor" refers to this package.

To test a regular expression, enter it into the "Regular Expression" box and use the "Flags" menu to set the desired options. Three of these options also have direct checkboxes for easy selection.

If you have a regular expression as a string in Java code, you can copy the entire string to your clipboard. In the myregexp.com tester, navigate to the "Edit" menu and select "Paste Regex from Java String." After editing, you can use the "Copy Regex for Java Source" option in the same menu to copy the modified expression back into your Java code. Similar commands are available for JavaScript and XML.

Below the regular expression input, there are four tabs that perform different tests:
- **Find**: Highlights all matches of the regular expression in the sample text, similar to the `Matcher.find()` method in Java.
- **Match**: Tests if the regular expression matches the entire sample text. If it does, the whole text is highlighted, mimicking the behavior of the `String.matches()` and `Matcher.matches()` methods.
- **Split**: Displays the array of strings returned by `String.split()` or `Pattern.split()` when applied to your regular expression and sample text.
- **Replace**: Allows you to enter replacement text, and shows the result of using `String.replace()` or `Matcher.replaceAll()`.

At the top of the page, you can find a link to download Sergey's regex tester as a plug-in for Eclipse.

### More Desktop Regular Expression Testers

#### Expresso
Expresso (not to be confused with the caffeinated drink) is a .NET application for creating and testing regular expressions. You can download it from [http://www.ultrapico.com/Expresso.htm](http://www.ultrapico.com/Expresso.htm). Ensure that the .NET Framework 2.0 or a later version is installed on your computer.

The download offers a free 60-day trial. After the trial period, you must register to continue using the application. Registration is free but requires providing your email address to receive the registration key.

Expresso features a user interface with a permanently visible "Regular Expression" box for typing your expression. There is no syntax highlighting, but the "Regex Analyzer" box provides a brief, English-language analysis of your regular expression, which is also always visible.

In Design Mode, you can set matching options such as "Ignore Case" at the bottom of the screen. Most of the screen space is occupied by a row of tabs for selecting and inserting regular expression tokens. If you have multiple monitors or a large monitor, you can undock the tab row to float it and build your regular expression in Test Mode.

In Test Mode, enter or paste your sample text in the lower-left corner and click the "Run Match" button to see a list of all matches in the "Search Results" box. Clicking on a match in the results will select that match in the sample text.

#### The Regulator
The Regulator, available at [http://sourceforge.net/projects/regulator/](http://sourceforge.net/projects/regulator/), is another .NET application for creating and testing regular expressions. The latest version requires .NET 2.0 or later, but older versions for .NET 1.x are still available. The Regulator is open source and does not require payment or registration.

The Regulator operates within a single screen (Figure 1-10). The "New Document" tab is where you enter your regular expression, with automatic syntax highlighting. Right-click to insert regex tokens from a menu, and set options via the main toolbar buttons. The icons may be cryptic, so use the tooltips for guidance.

Click the "Input" button to display a dialog for entering sample text and, if needed, replacement text. Results are displayed below the regex and to the left, and must be manually updated by clicking the "Match," "Replace," or "Split" button in the toolbar. No highlighting is applied to the input, but clicking a match in the results selects it in the subject text.

The "Regex Analyzer" panel provides a simple, non-interactive English-language analysis of your regular expression. To update the analysis, select "Regex Analyzer" in the View menu, even if it is already visible.

#### SDL Regex Fuzzer
SDL Regex Fuzzer, available at [https://www.microsoft.com/en-us/download/details.aspx?id=20095](https://www.microsoft.com/en-us/download/details.aspx?id=20095), is a tool designed to test regular expressions for potential denial-of-service vulnerabilities. It requires .NET 3.5 to run.

SDL Regex Fuzzer checks if there is a subject string that causes your regular expression to execute in exponential time, a condition known as "catastrophic backtracking." This can cause your application to run indefinitely or crash, and if your application is a server, it could be exploited in a denial-of-service attack.

Figure 1-11 shows the results of a test in SDL Regex Fuzzer. Step-by-step, you can paste a regular expression, select options, and start the test. Unfortunately, the tool supports only a limited subset of .NET regex syntax, limiting its usefulness. For more details, refer to Recipe 2.15 in the book.

### grep

The name "grep" comes from the `g/re/p` command in the Unix text editor `ed`, one of the first applications to support regular expressions. Today, all Unix systems include a dedicated `grep` utility for searching files with regular expressions. On Unix, Linux, or OS X, type `man grep` in a terminal window for more information.

#### PowerGREP
PowerGREP, developed by Jan Goyvaerts, one of the book's authors, is a feature-rich grep tool for Microsoft Windows (Figure 1-13). It uses a custom regex flavor that combines the best of the flavors discussed in the book, labeled "JGsoft" in RegexBuddy.

To run a quick search, select "Clear" in the Action menu, enter your regular expression in the Search box, and choose a folder in the File Selector panel. Select "Include File or Folder" or "Include Folder and Subfolders" in the File Selector menu, and then "Execute" in the Action menu to run the search.

For search-and-replace, select "search-and-replace" in the "Action Type" dropdown list after clearing the action. Enter your replacement text in the Replace box. Follow the same steps as for searching.

PowerGREP can use up to five lists of regular expressions simultaneously, each with any number of expressions. The comprehensive documentation provides detailed instructions for advanced use. PowerGREP runs on Windows 2000, XP, Vista, 7, and 8. A free evaluation copy is available at [http://www.powergrep.com/PowerGREPCookbook.exe](http://www.powergrep.com/PowerGREPCookbook.exe), fully functional for 15 days except for saving results and libraries.

#### Windows Grep
Windows Grep, available at [http://www.wingrep.com](http://www.wingrep.com), is one of the oldest grep tools for Windows. Its user interface (Figure 1-14) is somewhat dated, but it functions well. It supports a limited regular expression flavor called POSIX ERE, using the same syntax as the flavors in the book. Windows Grep is shareware, allowing free downloads but requiring payment for continued use.

To prepare a search, select "Search" in the Search menu. The interface differs based on whether you are in Beginner Mode or Expert Mode. Set up the search, and Windows Grep will execute it, displaying a list of files with matches. Click on a file to see its matches in the bottom panel, and double-click to open the file. Select "All Matches" in the View menu to show all matches.

For search-and-replace, select "Replace" in the Search menu.

#### RegexRenamer
RegexRenamer (Figure 1-15) is not a traditional grep tool; instead, it searches and replaces through file names. Download it at [http://regexrenamer.sourceforge.net](http://regexrenamer.sourceforge.net). RegexRenamer requires .NET Framework 2.0 or later.

Enter your regular expression in the "Match" box and the replacement text in the "Replace" box. Use the `/i` flag for case-insensitive matching, `/g` to replace all matches in each filename, and `/x` for free-spacing syntax (though it's less useful here).

Use the tree on the left to select the folder containing the files you want to rename. You can set a file mask or a regex filter in the top-right corner to restrict the list of files. Using separate regexes for filtering and replacing is often more practical than trying to do both with a single regex.

### Popular Text Editors

Most modern text editors support regular expressions. In the search or search-and-replace panel, you typically find a checkbox to enable regular expression mode. Some editors, like EditPad Pro, also use regular expressions for other text processing features such as syntax highlighting or class and function lists. Documentation for each editor explains these features. Some popular text editors with regular expression support include:

- BBEdit (PCRE)
- Boxer Text Editor (PCRE)
- Dreamweaver (JavaScript)
- EditPad Pro (custom flavor combining the best of the flavors discussed in the book; labeled "JGsoft" in RegexBuddy)
- Multi-Edit (PCRE, if you select the "Perl" option)
- Nisus Writer Pro (Ruby 1.9 [Oniguruma])
- Notepad++ (PCRE)
- NoteTab (PCRE)
- UltraEdit (PCRE)
- TextMate (Ruby 1.9 [Oniguruma])

### Chapter 2: Basic Regular Expression Skills

This chapter addresses technical problems encountered while creating and editing regular expressions. The first recipe, for example, explains how to match literal text and handle special characters in regular expressions. While this isn't a standalone goal, it is essential when constructing regular expressions.

The recipes start with basic techniques. If you are familiar with regular expressions, you can skim or skip them. Later recipes in this chapter will likely introduce new concepts, unless you have read "Mastering Regular Expressions" by Jeffrey E.F. Friedl (O'Reilly) cover to cover.

Each recipe in this chapter focuses on a specific aspect of regular expression syntax, forming a comprehensive tutorial. Read it from start to finish for a solid understanding, or dive into the real-world examples in Chapters 4 through 9, referring back to this chapter as needed.

This tutorial chapter focuses solely on regular expressions, ignoring programming considerations. The next chapter includes code listings. Refer to "Programming Languages and Regex Flavors" in Chapter 3 to determine the regular expression flavor used by your programming language. The flavors themselves were introduced in "Regex Flavors Covered by This Book" on page 3.

### 2.1 Match Literal Text

**Problem:**
Create a regular expression to exactly match the following sentence: "The punctuation characters in the ASCII table are: !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~."

**Solution:**
This regular expression matches the sentence stated in the problem:
```
The\ punctuation\ characters\ in\ the\ ASCII\ table\ are:\ !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~
```

**Regex options: None**

**Regex flavors: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby**

**Discussion:**
This regular expression uses backslashes to escape special characters, ensuring they are matched literally. Characters that do not have special meanings in regular expressions, such as letters and numbers, do not need to be escaped.