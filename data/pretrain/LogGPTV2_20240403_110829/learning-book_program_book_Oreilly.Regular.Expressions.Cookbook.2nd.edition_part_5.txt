myregexp.com
Sergey Evdokimov created several regular expression testers for Java developers. The
home page at lhzrp://www.myregexp.co (Figure 1-8) offers an online regex tester. It's
a Java applet that runs in your browser. The Java 4 (or later) runtime needs to be
installed on your computer. The applet uses the Java.util.regex package to evaluate
your regular expressions, which is new in Java 4. In this book, the *Java regex flavor
refers to this package.
Type your regular expression into the Regular Expression box. Use the Flags menu to
set the regex options you want. Three of the options also have direct checkboxes.
If you want to test a regex that already exists as a string in Java code, copy the whole
string to the clipboard. In the myregexp.com tester, click on the Edit menu, and then
*Paste Regex from Java String. In the same menu, pick “Copy Regex for Java Source”
when you're done editing the regular expression. The Edit menu has similar commands
for JavaScript and XML as well.
Below the regular expression, there are four tabs that run four different tests:
18 |  Chapter 1: Introduction to Regular Expressions
---
## Page 35
Find
Highlights all regular expression matches in the sample text. These are the matches
found by the Matcher . find() method in Java.
Match
Tests whether the regular expression matches the sample text entirely. If it
does, the whole text is highlighted. This is what the String.matches() and
Matcher ,matches () methods do.
Split
The second box at the right shows the array of strings returned by
String-split() or Pattern,split() when used with your regular expression and
sample text.
Replace
Type in a replacement text, and the box at the right shows the text returned by
String-replaceAl1() or Matcher .replaceA11()
At the top of the page at http://www.yregexp.com,youcan click the link to get Sergey's
regex tester as a plug-in for Eclipse.
More Desktop Regular Expression Testers
Expresso
Expresso (not to be confused with caffeine-laden espresso) is a .NET application for
creating and testing regular expressions. You can download it at Ptrtp://www.aefrrapico
com/Expresso.htm. The .NET Framework 2.0 or later must be installed on your
computer.
The download is afree 60-daytrial. After the tral, you have to register or Expresso will
(mostly) stop working. Registration is free, but requires you to give the Ultrapico folks
your email address. The registration key is sent by email.
Expresso displays a screen like the one shown in Figure 1-9. The Regular Expression
box where you type in your regular expression is permanently visible. No syntax high-
lighting is available. The Regex Analyzer box automatically builds a brief
English-language analysis of your regular expression. It too is permanently visible,
In Design Mode, you can set matching options such as *Ignore Case* at the bottom of
the screen. Most of the screen space is taken up by a row of tabs where you can select
the regular expression token you want to insert. If you have two monitors or one large
monitor,click the Undock buon to float the row of tabs. Then you can build up your
regular expression in the other mode (Test Mode) as well.
In Test Mode, type or paste your sample text in the lower-left corner. Then, click the
Run Match button to get a list of all matches in the Search Results box. No highlighting
is applied to the sample text. Click on a match in the results to select that match in the
sample text.
Tools for Werking with Regular Expresions | 19
---
## Page 36
spo]ipG
[ea| Ane
XiZiptlpusl] draf srde
Dude tes
e]rdsk)
Hghonyr@州T
0 aydanor
Agarunelcw
6 Oergre+
 eofe danoer
0gmare?
Ngrelgew wfCax
6 Sefe Sm[HI]
6 fgalynH
0 O Ss
m|(wo]
ECWSoitlpoeYhte Sryeine
MiDorekd
t[tZoAjwtr
fltCgiun
Figure 1-9. Expresso
The Expression Library shows a list of sample regular expressions and a list of recent
regular expressions. Your regex is added to that list each time you press Run Match.
You can edit the library through the Library menu in the main menu bar.
The Regulator
The Regulator, which you can download from Fattp://soeerceforge.rtet/projects/regaela
for/, is not safe for SCUBA diving or cooking-gas canisters; it is another .NET applica-
tion for creating and testing regular expressions. The latest version requires .NET 2.0
or later. Older versions for .NET 1.x can still be downloaded. The Regulator is open
source, and no payment or registration is required.
The Regulator does everything in one screen (Figure 1-10). The New Document tab is
where you enter your regular expression. Syntax highlighting is automatically applied,
but syntax errors in your regex are not made obvious. Right-click to select the regex
token you want to insert from a menu. You can set regular expression options via the
buttons on the main toolbar. The icons are a bit cryptic. Wait for the tool tip to see
which option you’re setting with each button.
20 | Chapter 1: Introduction to Regular Expressions
---
## Page 37
Figure 1-10. T'he Regulator
Below the area for your regex and to the right, click on the Input button to display
a u ad1 on uonq qm aoeda, au xo ixa adues smo u gused 1og eaae au1
replacement text, if you want to do a search-and-replace. Below the regex and to the
left, you can see the results of your regex operation. Results are not updated automat-
ically; you must click the Match, Replace, or Split button in the toolbar to update the
results. No highlighting is applied to the input. Click on a match in the results to select
it in the subject text.
The Regex Analyzer panel shows a simple English-language analysis of your regular
expression, but it is not automatic or interactive. To update the analysis, select Regex
Analyzer in the View menu, even if it is already visible. Clicking on the analysis only
moves the text cursor.
SDL Regex Fuzzer
SDL Regex Fuzzer’s fuzzy name does not make its purpose obvious. Microsoft bills it
as °a tool to help test regular expressions for potential denial of service vulnerabilities.*
You can download it for free at http://www.icrosofL.co/en-s/downfoad/details.spx
?id20095. It requires .NET 3.5 to run.
What SDL Regex Fuzzer really does is to check whether there exists a subject string
that causes your regular expression to execute in exponential time. In our book we call
this “catastrophic backtracking.~ We explain this in detail along with potential solu-
tions in Recipe 2.15. Basically, a regex that exhibits catastrophic backtracking will cause
your application to run forever or to crash. If your application is a server, that could be
exploited in a denial-of-service attack.
Figure 1-11 shows the results of a test in SDL Regex Fuzzer. In Step 1 we pasted in a
regular expression from Recipe 2.15. Since this regex can never match non-ASCII char-
acters, there's no need to select that option in Step 2. Otherwise, we should have. We
Z1 sugssaxg enag pem uom oj goo
---
## Page 38
SOLFrgxFuerer .30
Step 1.
Step 2.
 AUneote
ASC1ch
Step 3.
Step 4.
tanyn
Ssat]
Sep 1.
Step 6.
Step 7. (0ptl
Teahp.
Figure 1-11. SDL. Regex Fuzzer
left Step 3 set to the default of 100 iterations. About five seconds after clicking the Start
button in Step 4, SDL Regex Fuzzer showed a sample string that will cause our regex
to fail in .NET 3.5.
Unfortunately, the usefulness of this toolis greatly lmited because it only supports a
small subset of the .NET regex syntax. When we tried to test the naive solution from
Recipe 2.15, which would definitely fail this test, we received the error message shown
the only way to make sure you don't bring down your applications with overly complex
in Figure 1-12. Proper understanding of the concepts discussed in Recipe 2.15 is still
regular expressions.
grep
The name grep is derived from the g/re/p command that performed a regular expression
search in the Unix text editor ed, one of the first applications to support regular
22 1 Chapter 1: Introduction to Regular Expressions
---
## Page 39
X
thynet
honG6n
OK
Figure 1-I2. SDL Regex Fuzzer Limitations
expressions. This command was so popular that all Unix systems now have a dedicated
grep utility for searching through files using a regular expression. If you're using Unix,
Linux, or OS X, type man grep into a terminal window to learn all about it.
The following three tools are Windows applications that do what grep does, and more.
PowerGREP
PowerGREP, developed by Jan Goyvaerts, one of this book's authors, is probably the
most feature-rich grep tool available for the Microsoft Windows platform (Fig-
ure 113). PowerGREP uses a custom regex flavor that combines the best of the flavors
discussed in this book. This flavor is labeled *JGsoft* in RegexBuddy.
To run a quick regular expression search, simply select Clear in the Action menu and
type your regular expression into the Search box on the Action panel. Click on a folder
in the File Selector panel, and select *Include File or Folder” or “Include Folder and
Subfolders" in the File Selector menu. Then, select Execute in the Action menu to run
your search.
To run a search-and-replace, select °search-and-replace” in the *action type* drop-
down list at the top-left cormer of the Action panel after clearing the action. A Replace
box will appear below the Search box. Enter your replacement text there. All the other
steps are the same as for searching.
PowerGREP has the unique ability to use up to five lists of regular expressions at the
same time, with any number of regular expressions in each list. While the previous two
paragraphs provide all you need to run simple searches like you can in any grep tool,
unleashing PowerGREP's full potential will take a bit of reading through the tool’s
comprehensive documentation.
PowerGREP runs on Windows 2000, XP, Vista, 7, and 8. You can download a free
evaluation copy at hrtp://www.powergrep.com/PowerGREPCookbook.exe. Except for
saving results and libraries, the trial is fully functional for 15 days of actual use. Though
the trial won’t save the results shown on the Results panel, it will modify all your files
for search-and-replace actions, just like the full version does.
Tools for Working with Regular Expressions | 23
---
## Page 40
Figure 1-I3. PowerGREP
Figure 1-I4. Windows Grep
24 | Chapter 1: Introduction to Regular Expressions
---
## Page 41
Windows Grep
Windows Grep (http:/www.wingrep.co) is one of the oldest grep tools for Windows.
Its age shows a bit in its user interface (Figure 1-14), but it does what it says on the tin
just fine. It supports a limited regular expression flavor called POSIX ERE. For the
features that it supports, it uses the same syntax as the flavors in this book. Windows
Grep is shareware, which means you can download it for free, but payment is expected
if you want to keep it.
To prepare a search, select Search in the Search menu. The scren that appears differs
menu. Beginners get a step-by-step wizard, whereas experts get a tabbed dialog.
depending on whether you’ve selected Beginner Mode or Expert Mode in the Options
When you've set up the search, Windows Grep immediately executes it, presenting
you with a list of files in which matches were found. Click once on a file to see its
matches in the bottom panel, and double-click to open the file. Select °All Matches*
in the View menu to make the botom panel show everything.
To run a search-and-replace, select Replace in the Search menu.
RegexRenamer
RegexRenamer (Figure 1-15) is not really a grep tool. Instead of searching through the
contents of files, it searches and replaces through the names of files. You can download
it at Fartp://regexrenamer.sourceforge.ner. RegexRenamer requires version 2.0 or later of
the Microsoft .NET Framework.
Ntch
[ -]+
A
*,
p
Hep
Figure 1-I5. RegexRenamer
S 1 suojssaadxg ejnag qpem bupm o go
---
## Page 42
Type your regular expression into the Match box and the replacement text into the
Replace box. Click /i to tum on case insensitivity, and /g to replace all matches in each
filename rather than just the first. /x turms on free-spacing syntax, which isn’t very
useful, since you have only one line to type in your regular expression.
Use the tree at the left to select the folder that holds the files you want to rename. You
can set a file mask or a regex filter in the top-right corner. This restricts the list of files
to which your search-and-replace regex will be applied. Using one regex to filter and
another to replace is much handier than rying to do both tasks with just one regex.
PopularText Editors
Most moderm text editors have at least basic support for regular expressions. In the
search or search-and-replace panel, you'll typically find a checkbox to turn on regular
expression mode. Some editors, such as EditPad Pro, also use regular expressions for
The documentation with each editor explains al these features. Some popular text
various features that process text, such as syntax highlighting or class and function lists.
editors with regular expression support include:
•BBEdit (PCRE)
•Boxer Text Editor (PCRE)
•Dreamweaver (JavaScript)
• EditPad Pro (custom flavor that combines the best of the flavors discussed in this
book; labeled *JGsoft" in RegexBuddy)
Multi-Edit (PCRE, if you select the *Perl" option)
Nisus Writer Pro (Ruby 1.9 [Oniguruma])
•Notepad++ (PCRE)
•NoteTab (PCRE)
•UltraEdit (PCRE)
▪TextMate (Ruby 1.9 [Oniguruma])
26 | Chapter 1: Introduction to Regular Expressons
---
## Page 43
CHAPTER2
BasicRegularExpressionSkills
The problems presented in this chapter aren’t the kind of real-world problems that your
boss or your customers ask you to solve. Rather, they're technical problems you'll
encounter while creating and editing regular expressons to solve real-world problems.
The first recipe, for example, explains how to match literal text with a regular expres-
sion, and how to deal with characters that have special meanings in regularexpressions.
This isn't a goal on its own, because you don't need a regex when all you want to do
is to search for literal text. But when creating a regular expression, you'll likely need it
to match certain text lierally, and you'll need to know which characters to escape.
Recipe 2.1 tells you how.
The recipes start out with very basic regular expression techniques. If you’ve used reg-
ular expressions before, you can probably skim or even skip them. The recipes further
along in this chapter will surely teach you something new, unless you have already read
Mastering Regular Expressios by Jeffrey E.F. Friedl (O'Reilly) cover to cover.
We devised the recipes in this chapter in such a way that each explains one aspect of
the regular expression syntax. Together, they form a comprehensive tutorial to regular
expressions. Read it from start to finish to get a firm grasp of regular expressions. Or
dive right in to the real-world regular expressions in Chapters 4 through 9, and follow
the references back to this chapter whenever those chapters use some syntax you're not
familiar with.
This tutorial chapter deals with regular expressions only and completely ignores any
programming considerations. The next chapter is the one with all the code listings. You
can peek ahead to *Programming Languages and Regex Flavors" in Chapter 3 to find
out which regular expression flavor your programming language uses. The flavors
themselves, which this chapter talks about, were introduced in *Regex Flavors Covered
by This Book'* on page 3.
---
## Page 44
2.1 Match Literal Text
Problem
Create a regular expression to exactly match this gloriously contrived sentence: The
punctuation characters in the ASCII table are: !“#s%&′ ()*+, --/:;?@[\]^_ {1}~.
This is intended to show which characters have special meaning in regular expressions,
and which characters always match themselves literally.
Solution
This regular expression matches the sentence stated in the problem:
The#punctuation#charactersinthe+ASCII+tableare:*
、：/-+\,gx$\#i
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion