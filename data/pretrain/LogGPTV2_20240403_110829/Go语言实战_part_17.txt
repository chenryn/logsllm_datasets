借助内部类型提升，notify方法也可以直接通过ad变量来访问，如代码清单5-55所示。
代码清单5-55 listing50.go：第43行到第45行
43 // 内部类型的方法也被提升到外部类型
44 ad.notify()
45 }
代码清单5-55的第44行中展示了直接通过外部类型的变量来调用notify方法。由于内部
类型的标识符提升到了外部类型，我们可以直接通过外部类型的值来访问内部类型的标识符。让
我们修改一下这个例子，加入一个接口，如代码清单5-56所示。
代码清单5-56 listing56.go
01 // 这个示例程序展示如何将嵌入类型应用于接口
02 package main
03
04 import (
05 "fmt"
06 )
07
08 // notifier是一个定义了
09 // 通知类行为的接口
10 type notifier interface {
11 notify()
12 }
13
14 // user在程序里定义一个用户类型
15 type user struct {
16 name string
17 email string
18 }
19
20 // 通过user类型值的指针
21 // 调用的方法
22 func (u *user) notify() {
23 fmt.Printf("Sending user email to %s\n",
24 u.name,
25 u.email)
26 }
27
28 // admin代表一个拥有权限的管理员用户
29 type admin struct {
30 user
31 level string
32 }
33
34 // main是应用程序的入口
35 func main() {
36 // 创建一个admin用户
37 ad := admin{
38 user: user{
39 name: "john smith",
40 email: "PI:EMAIL",
41 },
42 level: "super",
43 }
44
45 // 给admin用户发送一个通知
46 // 用于实现接口的内部类型的方法，被提升到
47 // 外部类型
48 sendNotification(&ad)
49 }
50
51 // sendNotification接受一个实现了notifier接口的值
52 // 并发送通知
53 func sendNotification(n notifier) {
54 n.notify()
55 }
代码清单 5-56所示的示例程序的大部分和之前的程序相同，只有一些小变化，如代码清
单 5-57所示。
代码清单5-57 第08行到第12行，第51行到第55行
08 // notifier是一个定义了
09 // 通知类行为的接口
10 type notifier interface {
11 notify()
12 }
51 // sendNotification接受一个实现了notifier接口的值
52 // 并发送通知
53 func sendNotification(n notifier) {
54 n.notify()
55 }
在代码清单 5-57 的第 08 行，声明了一个 notifier 接口。之后在第 53 行，有一个
sendNotification函数，接受notifier类型的接口的值。从代码可以知道，user类型之
前声明了名为 notify 的方法，该方法使用指针接收者实现了 notifier 接口。之后，让我们
看一下main函数的改动，如代码清单5-58所示。
110 第5章 Go语言的类型系统
代码清单5-58 listing56.go：第35行到第49行
35 func main() {
36 // 创建一个admin用户
37 ad := admin{
38 user: user{
39 name: "john smith",
40 email: "PI:EMAIL",
41 },
42 level: "super",
43 }
44
45 // 给admin用户发送一个通知
46 // 用于实现接口的内部类型的方法，被提升到
47 // 外部类型
48 sendNotification(&ad)
49 }
这里才是事情变得有趣的地方。在代码清单5-58的第37行，我们创建了一个名为ad的变
量，其类型是外部类型admin。这个类型内部嵌入了user类型。之后第48行，我们将这个外
部类型变量的地址传给 sendNotification 函数。编译器认为这个指针实现了 notifier 接
口，并接受了这个值的传递。不过如果看一下整个示例程序，就会发现 admin 类型并没有实现
这个接口。
由于内部类型的提升，内部类型实现的接口会自动提升到外部类型。这意味着由于内部类型的
实现，外部类型也同样实现了这个接口。运行这个示例程序，会得到代码清单5-59所示的输出。
代码清单5-59 listing56.go的输出
20 // 通过user类型值的指针
21 // 调用的方法
22 func (u *user) notify() {
23 fmt.Printf("Sending user email to %s\n",
24 u.name,
25 u.email)
26 }
Output:
Sending user email to john smith
可以在代码清单5-59中看到内部类型的实现被调用。
如果外部类型并不需要使用内部类型的实现，而想使用自己的一套实现，该怎么办？让我们
看另一个示例程序是如何解决这个问题的，如代码清单5-60所示。
代码清单5-60 listing60.go
01 // 这个示例程序展示当内部类型和外部类型要
02 // 实现同一个接口时的做法
03 package main
异步社区会员 database(13669188751) 专享 尊重版权
5.5 嵌入类型 111
04
05 import (
06 "fmt"
07 )
08
08 // notifier是一个定义了
09 // 通知类行为的接口
11 type notifier interface {
12 notify()
13 }
14
15 // user在程序里定义一个用户类型
16 type user struct {
17 name string
18 email string
19 }
20
21 // 通过user类型值的指针
22 // 调用的方法
23 func (u *user) notify() {
24 fmt.Printf("Sending user email to %s\n",
25 u.name,
26 u.email)
27 }
28
29 // admin代表一个拥有权限的管理员用户
30 type admin struct {
31 user
32 level string
33 }
34
35 // 通过admin类型值的指针
36 // 调用的方法
37 func (a *admin) notify() {
38 fmt.Printf("Sending admin email to %s\n",
39 a.name,
40 a.email)
41 }
42
43 // main是应用程序的入口
44 func main() {
45 // 创建一个admin用户
46 ad := admin{
47 user: user{
48 name: "john smith",
49 email: "PI:EMAIL",
50 },
51 level: "super",
52 }
53
54 // 给admin用户发送一个通知
55 // 接口的嵌入的内部类型实现并没有提升到
56 // 外部类型
57 sendNotification(&ad)
112 第5章 Go语言的类型系统
58
59 // 我们可以直接访问内部类型的方法
60 ad.user.notify()
61
62 // 内部类型的方法没有被提升
63 ad.notify()
64 }
65
66 // sendNotification接受一个实现了notifier接口的值
67 // 并发送通知
68 func sendNotification(n notifier) {
69 n.notify()
70 }
代码清单5-60所示的示例程序的大部分和之前的程序相同，只有一些小变化，如代码清
单5-61所示。
代码清单5-61 listing60.go：第35行到第41行
35 // 通过admin类型值的指针
36 // 调用的方法
37 func (a *admin) notify() {
38 fmt.Printf("Sending admin email to %s\n",
39 a.name,
40 a.email)
41 }
这个示例程序为 admin 类型增加了 notifier 接口的实现。当 admin 类型的实现被调用
时，会显示"Sending admin email"。作为对比，user类型的实现被调用时，会显示"Sending
user email"。
main函数里也有一些变化，如代码清单5-62所示。
代码清单5-62 listing60.go：第43行到第64行
43 // main是应用程序的入口
44 func main() {
45 // 创建一个admin用户
46 ad := admin{
47 user: user{
48 name: "john smith",
49 email: "PI:EMAIL",
50 },
51 level: "super",
52 }
53
54 // 给admin用户发送一个通知
55 // 接口的嵌入的内部类型实现并没有提升到
56 // 外部类型
57 sendNotification(&ad)
58
59 // 我们可以直接访问内部类型的方法
60 ad.user.notify()
61
62 // 内部类型的方法没有被提升
63 ad.notify()
64 }
代码清单5-62的第46行，我们再次创建了外部类型的变量ad。在第57行，将ad变量的
地址传给sendNotification函数，这个指针实现了接口所需要的方法集。在第60行，代码
直接访问 user 内部类型，并调用 notify 方法。最后，在第 63 行，使用外部类型变量 ad 来
调用notify方法。当查看这个示例程序的输出（如代码清单5-63所示）时，就会看到区别。
代码清单5-63 listing60.go的输出
Sending admin email to john smith
Sending user email to john smith
Sending admin email to john smith
这次我们看到了admin 类型是如何实现notifier 接口的，以及如何由sendNotification
函数以及直接使用外部类型的变量 ad 来执行 admin 类型实现的方法。这表明，如果外部类型
实现了notify方法，内部类型的实现就不会被提升。不过内部类型的值一直存在，因此还可以
通过直接访问内部类型的值，来调用没有被提升的内部类型实现的方法。