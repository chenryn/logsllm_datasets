### Data Summary
- **Design 1:**
  - Arbiter with 4 cores and 1 shared unit: 338 bits
- **Design 2:**
  - Arbiter with 4 cores and 3 shared units: 1014 bits

### Properties
- **WISHBONE [32]:**
  - WISHBONE with priority for core 1
  - Priority-based access
  - WISHBONE with no access for core 1
  - TDMA
  - Non-interference between all cores
  - Non-interference between cores 1 & 2
  - U1: Non-interference
  - U2: Non-interference between cores 1 & 2
  - U3: WISHBONE
  - U1: Non-interference
  - U2: Non-interference between cores 1 & 3
  - U3: WISHBONE without access for cores 2 & 3
  - U1: WISHBONE without access for core 3
  - U2: Priority-based access
  - U3: WISHBONE

### Synthesis Time (seconds)
- 248
- 162
- 616
- 171
- 128
- 157
- 113
- 312
- 278
- 719

### Thread Traits
Each thread has specific characteristics, including:
- Hard real-time or soft real-time requirements
- Sensitivity of the information it carries
- Active or asleep status at a given cycle

### Scheduler Sketch
The scheduler sketch consists of:
- Two Finite State Machines (FSMs) and one combinational function.
- The first FSM outputs a `thread_id` based on given frequencies (`freq`).
- The second FSM generates a new `thread_id` according to the result of the first FSM and the `mode` signal.
- The combinational function selects between the outputs of these two FSMs, implementing two interleaving schedulers.

### Constraints and Properties
- **Real-time properties:**
  - Timing predictability for hard real-time threads (exact frequency as requested).
  - Guaranteed expected frequency for soft real-time threads (at least the requested frequency, allowing them to execute even if their expected frequency is zero).

- **Fairness:**
  - Modeled as soft constraints for the extra quota given to soft real-time threads.

- **Confidentiality:**
  - Ensures that the activity status of sensitive threads is not revealed. This is modeled as an Information Flow Tracking (IFT) property by assigning `High` labels to the active/asleep bit of sensitive threads and asserting that the scheduler output should maintain a `Low` label.

- **Efficiency:**
  - Synthesizes a scheduler that selects active threads for execution. If written as a hard constraint, the problem becomes unsatisfiable due to cases where no active thread is available for scheduling.

### Synthesized Designs
To demonstrate how sketch size affects synthesis time, we generate the circuitry from three different templates, gradually adding sketch constructs and decreasing manually specified details. The results are shown in Table 4, with property abbreviations as follows:
- V: Valid thread id
- C: Confidentiality for sensitive threads
- P: Predictability for hard real-time threads
- G: Guaranteed frequency
- E: Only Scheduling available threads
- F: Fairness between soft real-time threads

### SoC Arbiter
System-on-chip (SoC) arbiters, which mediate accesses in bus architectures, are vulnerable to timing side-channel attacks. We model timing side-channel elimination as IFT properties to enforce non-interference between mutually untrusted cores. We also specify various functional properties and synthesize multiple SoC arbiters from generic FSM sketches.

### Arbiter Sketches and Properties
- **Sketches:**
  - Three FSMs with unspecified state transitions.
  - One-hot encoded `req` and `grant` signals indicate incoming requests and granted access.
  - The first FSM takes `req` and `grant` as inputs.
  - The second FSM models a smaller FSM where state transitions are independent of incoming requests.
  - The third sketch groups different cores in disjoint sets.
  - A combinational logic selects one of the FSMs.

- **Properties:**
  - Access control
  - Non-interference
  - Priority-based scheduling

### Synthesized Arbiter Designs
Table 5 shows the results of synthesizing different arbiters by combining different sets of properties. The first four designs are synthesized by the most generic template, the next two by the second template, and the last design uses the third template with non-interference properties between two cores. Adding IFT properties speeds up the synthesis procedure by constraining the high-level structure of the design.

### Conclusion
This work presents a semi-automated and security-oriented methodology for designing hardware with formal proof of security. The proposed framework includes language support for sketching digital circuitry and techniques for translating partially written HDL codes into complete designs that comply with functional and security specifications. This approach simplifies and accelerates the hardware design and verification process, ensuring security properties are enforced automatically.

### Acknowledgments
This work was supported by the National Science Foundation under grant numbers CNS-1527631 and CNS-1563767.

### References
[References listed as provided]

This optimized version of your text aims to be more structured, clear, and professional, making it easier to read and understand.