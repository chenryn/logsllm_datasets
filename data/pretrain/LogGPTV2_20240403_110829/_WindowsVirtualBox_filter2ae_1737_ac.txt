      ]]>
如果你在JScript或者VBScript语言方面造诣颇深，那么你可能会注意到一个问题，如果这些语言不是通过COM对象来实现，那么它们就无法达成我们的目的。在上面这个Scriptlet文件中，如果我们不加载WScript.Shell这个COM对象，然后调用其Exec方法，那么我们就不能创建新的进程。为了与VBOX驱动交流（这是注入代码的必经之地），我们必须需要能够提供该功能的一个COM对象。我们不能在另一个COM对象中实现具体代码，因为这样就无法绕过镜像签名检查过程。当然，脚本引擎中存在许多[内存破坏漏洞](https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=javascript)，但我个人并不喜欢利用内存破坏漏洞，因此我们需要其他方法来实现任意代码执行。这时该轮到
.NET Framework上场了。
.NET运行时使用了常规的DLL加载方法来将代码加载到内存中。因此我们不能加载未签名的 .NET
DLL，因为VBOX加固代码会拦截这种行为。然而，.NET提供了一种[Assembly::Load](https://msdn.microsoft.com/en-us/library/h538bck7\(v=vs.110\).aspx)方法，利用这种方法可以通过内存中的数组来加载任意代码，并且一旦加载完成，这段代码看起来就如同原生代码（native
code）一样，可以调用任意API、检查或修改内存。由于
.NET平台经过微软的签名，因此我们需要做的就是从我们的Scriptlet文件中调用Load方法，然后我们就可以在进程内部获得完整的任意代码执行权限。
为了实现这个目标，我们应该从哪里开始呢？根据之[前一篇文章](https://googleprojectzero.blogspot.co.uk/2017/04/exploiting-net-managed-dcom.html)的研究结果，我们可以通过注册方式将.NET对象导出为COM对象，再通过二进制序列化（Binary
Serialization）方法，从字节数组中加载任意代码。许多.NET核心运行时类已经被自动注册为COM对象，脚本引擎可以加载并修改这些对象。现在，我们需要确定的是，BinaryFormatter究竟有没有导出为COM对象？
事实证明的确如此。BinaryFormatter是一个.NET对象，脚本引擎可以通过COM来加载这个对象并与之交互。现在，我们可以直接使用上一篇文章的二进制流，从内存中执行任意代码。在上一篇文章中，不可信代码的执行必须在反序列化过程中完成，在本文案例中，我们可以与脚本中的反序列化结果交互，这样一来，我们需要做的序列化操作就会大大简化。
最后我选择反序列化一个[Delegate](https://msdn.microsoft.com/en-us/library/system.delegate\(v=vs.110\).aspx)（委托）对象，当脚本引擎执行这个对象时，就会从内存中加载一个[Assembly](https://msdn.microsoft.com/en-us/library/system.reflection.assembly\(v=vs.110\).aspx)（程序集），并返回Assembly实例。然后，脚本引擎可以实例化Assembly中的一个Type实例，运行任意代码。原理上听起来很简单，实际操作起来还是有许多事项需要注意。我不想在这篇文章里面讲述具体的细节，以免打断整体节奏，你可以访问此链接获取[DotNetToJScript](https://github.com/tyranid/DotNetToJScript)这个工具，顺便了解工具的工作原理。此外，你可以访问[此链接](https://bugs.chromium.org/p/project-zero/issues/attachment?aid=268607)获取PoC代码。从JSciprt组件到调用VBOX驱动的过程大概如下所示：
现在你已经可以在受保护进程中运行任意代码，我不会详细介绍利用VBOX驱动可以做哪些事情，这是另一个话题。当然你可以参考Jann写的[另一篇文章](https://bugs.chromium.org/p/project-zero/issues/detail?id=1091)，其中介绍了这种情况下，你可以在Linux系统上做的一些操作。
Oracle如何修复这个问题？他们添加了一个DLL黑名单，在[黑名单](https://www.virtualbox.org/browser/vbox/trunk/src/VBox/HostDrivers/Support/win/SUPHardenedVerifyImage-win.cpp?rev=67954#L146)中的DLL无法被受保护的VBOX进程加载。目前，这个名单中仅包含scrobj.dll这个文件。当开始验证文件时，程序就会验证文件是否位于黑名单中，程序会对当前文件名及版本资源内部的原始文件名（Original
Filename）进行检查。这样就能防止用户通过重命名文件绕过黑名单，并且版本资源数据位于签名的PE数据中，攻击者无法在不破坏签名的前提下修改内部的原始文件名。坦诚说来，除了DLL黑名单机制，我也想不出来有其他较好的方法能够阻止这类攻击。
**四、利用用户模式下的DLL加载方式**
我想介绍的第二个[漏洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=1257)为
**CVE-2017-10204** 漏洞，这个漏洞在VBOX 5.1.24版本中被修复。该漏洞利用了Windows
DLL加载器以及VBOX中的某些错误，诱导VBOX加固代码将未经验证的DLL加载到内存中并加以执行。
虽然这个漏洞不需要依赖前面描述过的COM加载逻辑，但用户模式下的COM加载技术的确非常好用，可以使用任意路径来调用[LoadLibrary](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175\(v=vs.85\).aspx)函数。因此我们会继续利用这种技术来劫持VirtualBoxClient
COM对象，利用进程内的服务器路径来加载DLL。
LoadLlibrary是一个Windows
API，该函数存在大量已知的非常奇怪的行为。就我们看来，其中最为有趣的一个行为就是该函数在文件扩展名方面的处理逻辑。根据具体扩展名的不同，LoadLibrary
API在加载文件之前，可能会添加或移除相应的扩展名。为此，我用一个表稍微总结了一下，表中显示了传递给LoadLibrary的具体扩展名以及该函数真正尝试加载的那个文件。
在上表中，我用绿色高亮了两种比较重要的情况。这两种情况下，传递给LoadLibrary的文件名与最终加载的文件名不一致。这里的问题在于，任何程序想在加载DLL之前验证该文件的话，就会用到CreateFile函数，而该函数并不会遵循我们高亮的那两种情况。因此在这两种情况下，如果我们使用原始文件名来打开文件并做签名校验，实际上我们最终加载的是另一个文件，因此我们要对另一个文件做签名校验。
在Windows中，普通代码与Kernel32代码之间通常 **存在明显的分离界限**
，Kernel32代码主要是负责处理Win32平台上已存在多年的许多奇怪行为，也负责处理内核通过 **NTDLL**
对外提供的“纯净”的NT逻辑层。由于LoadLibrary的实现位于Kernel32中，而LdrLoadDll的实现位于NTDLL中（LdrLoadDll也是VBOX加固代码所hook的那个函数），因此，前面提到的扩展名处理逻辑应该由前者来负责。我们可以分析一下简化版的LoadLibrary，看情况是否如此：
    HMODULE LoadLibrary(LPCWSTR lpLibFileName)
    {
      UNICODE_STRING DllPath;
      HMODULE ModuleHandle;
      ULONG Flags = // Flags;
      RtlInitUnicodeString(&DllPath, lpLibFileName);  
      if (NT_SUCCESS(LdrLoadDll(DEFAULT_SEARCH_PATH, 
          &Flags, &DllPath, &ModuleHandle))) {
        return ModuleHandle;
      }
      return NULL;
    }
从这段代码中可知，不论具体情况如何， **LoadLibrary** 只是 **LdrLoadDll**
的一个封装函数。虽然实际代码比上述代码更为复杂，但简而言之，当LdrLoadDll将文件路径传递给LdrLoadDll时，LoadLibrary并没有作修改，只是将其转换为
**UNICODE_STRING**
形式的字符串而已。因此，如果我们传入一个没有扩展名的DLL时，VBOX会检查无扩展名的文件的签名，而LdrLoadDll会使用.DLL扩展名来加载文件。
在我们开始测试之前，我们需要解决另一个问题，即文件的所有者需为 **TrustedInstaller**
。为了让VBOX检查我们所提供的文件的签名，我们只需要将某个已有的、经过合法签名的文件重命名即可，这个任务可以交给硬链接（hard
links）来完成。我们可以在某个可控的目录中创建一个不同的文件名，该文件实际上指向的是某个经过签名的系统文件，同时还可以维持文件的原始安全描述符属性（包括文件所有者属性）。正如我在两年前的[一篇文章](https://googleprojectzero.blogspot.co.uk/2015/12/between-rock-and-hard-link.html)中提到的那样，硬链接存在的问题是，虽然Windows支持创建指向系统文件的链接（当然你无法以写权限打开这些系统文件），然而Win32
API以及在CMD命令行中使用的“[mklink](https://technet.microsoft.com/en-us/library/cc753194\(v=ws.11\).aspx)”命令都需要以 **FILE_WRITE_ATTRIBUTES**
访问权限打开目标文件。我们不想使用其他程序来创建硬链接，因此我们复制了目标文件，但复制操作会修改文件的原始安全描述符，使得该文件所有者不再为TrustedInstaller。为了解决这一问题，我们来检查一下验证代码，看有没有方法能绕过这个难题。
文件所有者的检查主要在 **supHardenedWinVerifyImageByLdrMod** 函数中完成。这个函数做的第一件事情基本上就是调用
**supHardNtViCheckIsOwnedByTrustedInstallerOrSimilar**
函数，后者我们在之前已经见到过。然而，正如在源码中注释部分说明的那样，这段代码还允许使用System32以及WinSxS目录下所有者不为TrustedInstaller的那些文件。这些位置对检查过程来说简直是非常广阔的可利用点，我们要做的只是找到System32下可写入的一个目录。我们可以利用我开发的NtObjectManager
PS模块中的 **Get-AccessibleFile cmdlet** 来找到这些目录。
如上所述，有很多目录可以为我们所用，我们选择了Tasks目录作为目标，因为这个目录肯定会存在。因此，漏洞利用过程包含如下步骤：
1、将某个已签名的程序拷贝到 **%SystemRoot%System32TasksDummyABC**
2、将某个未签名的程序拷贝到 **%SystemRoot%System32TasksDummyABC.DLL**
3、注册COM劫持，将进程内的服务器指向步骤1中的已签名的文件路径。
如果你启动虚拟机，你会发现上述步骤的确能够成功。VBOX加固代码会检查ABC文件的签名，但LdrLoadDll最终加载的是ABC.DLL。为了确认我们没有利用涉及其他操作，我们来检查一下加固代码的日志：
    ..TasksdummyABC: Owner is not trusted installer 
    ..TasksdummyABC: Relaxing the TrustedInstaller requirement for this DLL (it's in system32).