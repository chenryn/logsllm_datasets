title:Flexible Byzantine Fault Tolerance
author:Dahlia Malkhi and
Kartik Nayak and
Ling Ren
Flexible Byzantine Fault Tolerance
Dahlia Malkhi∗
PI:EMAIL
Calibra
Kartik Nayak∗
PI:EMAIL
Duke University
Ling Ren∗
PI:EMAIL
University of Illinois,
Urbana-Champaign
ABSTRACT
This paper introduces Flexible BFT, a new approach for BFT con-
sensus solution design revolving around two pillars, stronger re-
silience and diversity. The first pillar, stronger resilience, involves
a new fault model called alive-but-corrupt faults. Alive-but-corrupt
replicas may arbitrarily deviate from the protocol in an attempt to
break safety of the protocol. However, if they cannot break safety,
they will not try to prevent liveness of the protocol. Combining
alive-but-corrupt faults into the model, Flexible BFT is resilient to
higher corruption levels than possible in a pure Byzantine fault
model. The second pillar, diversity, designs consensus solutions
whose protocol transcript is used to draw different commit deci-
sions under diverse beliefs. With this separation, the same Flexible
BFT solution supports synchronous and asynchronous beliefs, as
well as varying resilience threshold combinations of Byzantine and
alive-but-corrupt faults.
At a technical level, Flexible BFT achieves the above results using
two new ideas. First, it introduces a synchronous BFT protocol in
which only the commit step requires to know the network delay
bound and thus replicas execute the protocol without any syn-
chrony assumption. Second, it introduces a notion called Flexible
Byzantine Quorums by dissecting the roles of different quorums in
existing consensus protocols.
CCS CONCEPTS
• Security and privacy → Distributed systems security.
KEYWORDS
Distributed computing, Byzantine Fault Tolerance, Synchrony
ACM Reference Format:
Dahlia Malkhi, Kartik Nayak, and Ling Ren. 2019. Flexible Byzantine Fault
Tolerance. In 2019 ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS ’19), November 11–15, 2019, London, United Kingdom.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3319535.3354225
1 INTRODUCTION
Byzantine fault tolerant (BFT) protocols are used to build replicated
services [24, 33, 34]. Recently, they have received revived interest
* The work was done when the authors were working at VMware Research.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354225
as the algorithmic foundation of what is known as decentralized
ledgers, or blockchains.
In the classic approach to BFT protocol designs, a protocol de-
signer or a service administrator first picks a set of assumptions (e.g.,
the fraction of Byzantine faults and certain timing assumptions) and
then devises a protocol (or chooses an existing one) tailored for that
particular setting. The assumptions made by the protocol designer
are imposed upon all parties involved — every replica maintaining
the service as well as every client using the service (also known
as the “learner” role). Such a protocol collapses if deployed under
settings that differ from the one it is designed for. In particular,
optimal-resilience partially synchronous solutions [11, 14] break
(lose safety and liveness) if the fraction of Byzantine faults exceeds
1/3. Similarly, optimal-resilience synchronous solutions [1, 18] do
not obtain safety or liveness if the fraction of Byzantine faults
exceeds 1/2 or if the synchrony bound is violated.
In this work, we introduce a new approach for BFT protocol
design called Flexible BFT, offering advantages in the two aspects
above. We elaborate on the two aspects below.
Stronger resilience. We introduce a mixed fault model with a
new type of fault called alive-but-corrupt (a-b-c for short) faults.
Alive-but-corrupt replicas actively try to disrupt the system from
maintaining a safe consensus decision and they might arbitrarily
deviate from the protocol for this purpose. However, if they cannot
break safety, they will not try to prevent the system from reaching
a (safe) decision. The rationale for this new type of fault is that
violating safety may provide the attacker gains (e.g., a double spend
attack) but preventing liveness usually does not. In fact, a-b-c repli-
cas may gain rewards from keeping the replicated service live, e.g.,
by collecting service fees. We show a family of protocols that toler-
ate a combination of Byzantine and a-b-c faults that exceeds 1/3 in
the partially synchronous model and exceeds 1/2 in the synchro-
nous model. Our results do not violate existing resilience bounds
because the fraction of Byzantine faults is always smaller than the
respective bounds.
Diversity. The Flexible BFT approach further provides certain sep-
aration between the fault model and the protocol. The design ap-
proach builds a protocol whose transcript can be interpreted by
learners with diverse beliefs, who draw different consensus commit
decisions based on their beliefs. Flexible BFT guarantees safety
(agreement) and liveness for all learners that have correct beliefs.
Each learner specifies (i) the fault threshold it needs to tolerate,
and (ii) the message delay bound, if any, it believes in. For example,
one instance of Flexible BFT can support a learner that requires
tolerance against 1/5 Byzantine faults plus 3/10 a-b-c faults, while
simultaneously supporting another learner who requires tolerance
against 1/10 Byzantine faults plus 1/2 a-b-c faults, and a third
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1041learner who believes in synchrony and requires 3/10 Byzantine
plus 2/5 a-b-c tolerance.
This novel separation of fault model from protocol design can
be useful in practice in several ways. First, different learners may
naturally hold different assumptions about the system. Some learn-
ers may be more cautious and require a higher resilience than
others; some learners may believe in synchrony while others do
not. Moreover, even the same learner may assume a larger fraction
of faults when dealing with a $1M transaction compared to a $5
one. The rationale is that more replicas may be willing to collude
to double spend a high-value transaction. In this case, the learner
can wait for more votes before committing the $1M transaction.
Last but not least, a learner may update its assumptions based on
certain events it observes. For example, if a learner receives votes
for conflicting values, which may indicate an attempt at attacking
safety, it can start requiring more votes than usual; if a learner
who believes in synchrony notices abnormally long message delays,
which may indicate an attack on network infrastructure, it can
update its synchrony bound to be more conservative or switch to a
partial-synchrony assumption.
The notion of “commit” needs to be clarified in our new model.
Learners in Flexible BFT have different assumptions and hence
different commit rules. It is then possible and common that a value is
committed by one learner but not another. Flexible BFT guarantees
that any two learners whose assumptions are correct (but possibly
different) commit to the same value. If a learner’s assumption is
incorrect, however, it may commit inconsistent values which may
later be reverted. While this new notion of commit may sound
radical at first, it is the implicit behavior of existing BFT protocols.
If the assumption made by the service administrator is violated in
a classic BFT protocol (e.g., there are more Byzantine faults than
provisioned), learners may commit to different values and they have
no recourse. In this sense, Flexible BFT is a robust generalization
of classic BFT protocols. In Flexible BFT, if a learner performs
conflicting commits, it should update its assumption to be more
cautious and re-interpret what values are committed under its new
assumption. In fact, this “recovery” behavior is somewhat akin to
Bitcoin. A learner in Bitcoin decides how many confirmations are
needed (i.e., how “deeply buried”) to commit a block. If the learner
commits but subsequently an alternative longer fork appears, its
commit is reverted. Going forward, the learner may increase the
number of confirmations it requires.
Key techniques. Flexible BFT centers around two new techniques.
The first one is a novel synchronous BFT protocol with replicas exe-
cuting at network speed; that is, the protocol run by the replicas does
not assume synchrony. This allows learners in the same protocol to
assume different message delay bounds and commit at their own
pace. The protocol thus separates timing assumptions of replicas
from timing assumptions of learners. Note that this is only possible
via Flexible BFT’s separation of protocol from the fault model: the
action of committing is only carried out by learners, not by replicas.
The other technique involves a breakdown of the different roles
that quorums play in different steps of partially synchronous BFT
protocols. Once again, made possible by the separation in Flexible
BFT, we will use one quorum size for replicas to run a protocol,
and let learners choose their own quorum sizes for committing in
the protocol.
Contributions. To summarize, our work has the following contri-
butions.
(1) Alive-but-corrupt faults. We introduce a new type of fault,
called alive-but-corrupt fault, which attack safety but not
liveness.
(2) Synchronous BFT with network speed replicas. We
present a synchronous protocol in which only the commit
step requires synchrony. Since replicas no longer perform
commits in our approach, the protocol simultaneously sup-
ports learners assuming different synchrony bounds.
(3) Flexible Byzantine Quorums. We deconstruct existing
BFT protocols to understand the role played by different
quorums and introduce the notion of Flexible Byzantine
Quorums. A protocol based on Flexible Byzantine Quorums
simultaneously supports learners assuming different fault
models.
(4) One BFT consensus solution for the populace. Putting
the above together, we present a new approach for BFT de-
sign, Flexible BFT. Our approach has stronger resilience
and diversity: Flexible BFT tolerates a fraction of com-
bined (Byzantine plus a-b-c) faults beyond existing resilience
bounds. And learners with diverse fault and timing beliefs
are supported in the same protocol.
Organization. The rest of the paper is organized as follows. Sec-
tion 2 defines the Flexible BFT model where replicas and learners
are separated. We will describe in more detail our key techniques
for synchrony and partial-synchrony in Sections 3 and 4, respec-
tively. Section 5 puts these techniques together and presents the
final protocol. Section 6 discusses the result obtained by the Flexible
BFT design and Section 7 describes related work.
2 MODELING FLEXIBLE BFT
The goal of Flexible BFT is to build a replicated service that takes
requests from learners and provides learners an interface of a single
non-faulty server, i.e., it provides learners with the same totally
ordered sequence of values. Internally, the replicated service uses
multiple servers, also called replicas, to tolerate some number of
faulty servers. The total number of replicas is denoted by n. In this
paper, whenever we speak about a set of replicas or messages, we
denote the set size as its fraction over n. For example, we refer to a
set of m replicas as “q replicas” where q = m/n.
Borrowing notation from Lamport [23], such a replicated service
has three logical actors: proposers capable of sending new values,
acceptors who add these values to a totally ordered sequence (called
a blockchain), and learners who decide on a sequence of values
based on the transcript of the protocol and execute them on a state
machine. Existing replication protocols provide the following two
properties:
- Safety. Any two learners learn the same sequence of values.
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1042- Liveness. A value proposed by a proposer will eventually be
executed by every learner.
In existing replication protocols, the learners are assumed to
be uniform, i.e., they interpret a transcript using the same rules
and hence decide on the same sequence of values. In Flexible BFT,
we consider diverse learners with different assumptions. Based on
their own assumptions, they may interpret the transcript of the
protocol differently. We show that so far as the assumptions of two
different learners are both correct, they will eventually learn the
same sequence of values. In the Flexible BFT approach, safety and
liveness guarantees are defined with respect to learners.
- Safety for diverse learners. Any two learners with correct but
potentially different assumptions learn the same sequence
of values.
- Liveness for diverse learners. A value proposed by a proposer
will eventually be executed by every learner with a correct
assumption.
Fault model. We assume two types of faults within the replicas:
Byzantine and alive-but-corrupt (a-b-c for short). Byzantine replicas
behave arbitrarily. On the other hand, the goal of a-b-c replicas is
to attack safety but to preserve liveness. These replicas will take
any actions that help them break safety of the protocol. However,
if they cannot succeed in breaking safety, they will help provide
liveness. Consequently, in this new fault model, the safety proof
should treat a-b-c replicas similarly to Byzantine. Then, once safety
is proved, the liveness proof can treat a-b-c replicas similarly to
honest. We assume that the adversary is static, i.e., the adversary
determines which replicas are Byzantine and a-b-c before the start
of the protocol.
Other assumptions. We assume hash functions, digital signatures
and a public-key infrastructure (PKI). We use ⟨x⟩R to denote a mes-
sage x signed by a replica R. We assume pair-wise communication
channels between replicas. We assume that all replicas have clocks