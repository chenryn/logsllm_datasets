Momigari
Overview of the latest Windows OS kernel exploits 
found in the wild
Boris Larin
@oct0xor
30-May-19
Anton Ivanov
@antonivanovm
$whoweare
Senior Malware Analyst (Heuristic Detection and Vulnerability Research Team)
Boris Larin
Head of Advanced Threats Research and Detection Team
Anton Ivanov
Twitter: @oct0xor 
Twitter: @antonivanovm
3
What this talk is about
Momigari: the Japanese tradition 
of searching for the most beautiful 
leaves in autumn
Jiaohe city, Jilin province, Northeast China. [Photo/Xinhua]
http://en.safea.gov.cn/2017-10/26/content_33734832_2.htm
4
What this talk is about
1) We will give brief introduction about how we find zero-day exploits and challenges that we face
2) We will cover three Elevation of Privilege (EOP) zero-day exploits that we found exploited in the wild
•
It is becoming more difficult to exploit the Windows OS kernel
•
Samples encountered ITW provide insights on the current state of things and new techniques
•
We will cover in detail the implementation of two exploits for Windows 10 RS4
3) We will reveal exploitation framework used to distribute some of these exploits
5
What this talk is about
Kaspersky Lab detection technologies
6
We commonly add this detail to our reports:
This two technologies are behind all exploits that we found last year
Technology #1 - Exploit Prevention
7
Delivery
Memory
manipulation
Exploitation
Shellcode
execution
Exploitation
prevented 
Detection and 
blocking
Payload 
execution 
start
Technology #2 - The sandbox
Artifacts assembled 
for analysis
A file / URL for testing
- Execution logs
- Memory dumps
- System / registry changes
- Network connections
- Screenshots
- Exploit artifacts
Verdict and rich data on activity
Test VMs
The file / URL is sent to several test VMs
Artifacts logged
Detection of exploits
Find
Develop
Research
How-to:
Exploits caught in the wild by Kaspersky Lab
• May 2018 - CVE-2018-8174 (Windows VBScript Engine Remote Code Execution 
Vulnerability)
• October 2018 - CVE-2018-8453 (Win32k Elevation of Privilege Vulnerability)
• November 2018 - CVE-2018-8589 (Win32k Elevation of Privilege Vulnerability)
• December 2018 - CVE-2018-8611 (Windows Kernel Elevation of Privilege 
Vulnerability)
• March 2019 - CVE-2019-0797 (Win32k Elevation of Privilege Vulnerability)
• April 2019 - CVE-2019-0859 (Win32k Elevation of Privilege Vulnerability)
One year: 
What keeps us wake at night
Six exploits found just by one company in one year
One exploit is remote code execution in Microsoft Office
Five exploits are elevation of privilege escalations 
While these numbers are huge it got to be just a tip of an iceberg
Example of payouts for single exploit acquisition program
https://zerodium.com/program.html:
Why don’t we see many exploits targeting web browsers, other 
applications or networks with ‘zero-click’ RCE being caught?
Even if an exploit was detected, most case analysis requires more data than can be acquired by the detection 
alone
Zero-day finding complications
Our technologies are aimed at detection and prevention of exploitation
But to find out whether or not detected exploit is zero-day requires additional analysis
Some exploits are easy to detect
Sandboxed process starts to perform weird stuff
Some exploits are hard to detect
False Alarms caused by other software
Example: two or more security software installed on same machine
Field for improvement (web browsers)
Script of exploit is required for further analysis
Scanning the whole memory for all scripts is still impractical
Possible solution:
Browser provides interface for security applications to ask for loaded scripts (similar to Antimalware Scan 
Interface (AMSI))
Problems:
If implemented in the same process it can be patched by exploit
Detection of escalation of privilege
Escalation of privilege exploits are commonly used in late stages of exploitation 
Current events provided by operating system often are enough to build detection for them
As they are usually implemented in native code - they are can be analyzed easily
Escalation of privilege exploits are probably the most suitable for analysis
15
Case 1
CVE-2018-8453
Exploitation module was distributed in encrypted form.
Sample that we found was targeting only x64 platform
•
But analysis shows that x86 exploitation is possible
Code is written to support next OS versions:
•
Windows 10 build 17134
•
Windows 10 build 16299
•
Windows 10 build 15063
•
Windows 10 build 14393
•
Windows 10 build 10586
•
Windows 10 build 10240
•
Windows 8.1
•
Windows 8
•
Windows 7
16
Win32k
Three of four vulnerabilities we are going to talk about today are present in Win32k 
Win32k is a kernel mode driver that handles graphics, user input, UI elements…
It present since the oldest days of Windows
At first it was implemented in user land and then the biggest part of it was moved to kernel level
•
To increase performance
Really huge attack surface
•
More than 1000 syscalls
•
User mode callbacks
•
Shared data 
More than a half of all kernel security bugs in windows are found in win32k.sys
https://github.com/Microsoft/MSRC-Security-Research/blob/master/presentations/2018_10_DerbyCon/2018_10_DerbyCon_State_of%20_Win32k_Security.pptx
17
Security improvements
In past few years Microsoft made a number of improvements that really complicated kernel exploitation and 
improved overall security:
Prevent abuse of specific kernel structures commonly used to create an R/W primitive 
•
Additional checks over tagWND
•
Hardening of GDI Bitmap objects (Type Isolation of SURFACE objects)
•
…
Improvement of kernel ASLR
•
Fixed a number of ways to disclose kernel pointers through shared data
CVE-2018-8453 was the first known exploit targeting Win32k in Windows 10 RS4
Results of this work really can be seen from exploits that we find. Newer OS build = less exploits.
18
CVE-2018-8453
From code it feels like the exploit did not initially support Windows 10 build 
17134, and the support was added later
There is a chance that the exploit was used prior to the release of this build, 
but we do not have any proof
19
CVE-2018-8453
win32k!tagWND (Windows 7 x86)
Vulnerability is located in syscall
NtUserSetWindowFNID
Microsoft took away win32k!tagWND from debug 
symbols but FNID field is located on same offset in 
Windows 10 (17134)
FNID (Function ID) defines a class of window
(it can be ScrollBar, Menu, Desktop, etc.)
High bit also defines if window is being freed
•
FNID_FREED = 0x8000
20
CVE-2018-8453
In NtUserSetWindowFNID syscall tagWND->fnid is 
not checked if it equals to 0x8000 (FNID_FREED)
Possible to change FNID of window that is 
being released 
21
CVE-2018-8453
Microsoft patched vulnerability with call to 
IsWindowBeingDestroyed() function
22
CVE-2018-8453
At time of reporting, MSRC was not sure that exploitation was possible in the latest version build of 
Windows 10 and asked us to provide the full exploit 
The following slides show pieces of the reverse engineered exploit for Windows 10 build 17134
For obvious reasons we are not going to share the full exploit
23
CVE-2018-8453
Exploitation happens mostly from hooks set on usermode callbacks
Hooked callbacks:
To set hooks:
•
Get address of KernelCallbackTable from PEB
•
Replace callback pointers with our own handlers
fnDWORD
fnNCDESTROY
fnINLPCREATESTRUCT
Patch Table
24
CVE-2018-8453
Exploit creates window and uses ShowWindow()
callback will be triggered
*Shadow will be needed later for exploitation
fnINLPCREATESTRUCT
SetWindowPos() will force ShowWindow() to call AddShadow() and create shadow
25
CVE-2018-8453
Exploit creates scrollbar and performs heap groom
•
Its performed with message WM_LBUTTONDOWN sent to scrollbar window
•
Leads to execution of win32k!xxxSBTrackInit() in kernel
A left mouse button click on the scrollbar initiates scrollbar track
Prepare memory layout
Send message to scrollbar window for initiation
26
CVE-2018-8453
In exploit there are five (!) different heap groom tactics
What distinguish zero-day exploits from regular public exploits? 
Usually it’s the amount of effort put into to achieve best reliability 
27
CVE-2018-8453
fengshui_17134: Blind heap groom
fengshui_16299:
•
Register 0x400 classes (lpszMenuName = 
0x4141…)
•
Create windows
•
Use technique described by Tarjei Mandt to leak 
addresses 
NtCurrentTeb()->Win32ClientInfo.ulClientDelta
fengshui_15063 is similar to fengshui_16299
fengshui_14393:
•
Create 0x200 bitmaps
•
Create accelerator table
•
Leak address with gSharedInfo
•
Destroy accelerator table
•
Create 0x200 bitmaps
fengshui_simple: CreateBitmap & GdiSharedHandleTable
Windows 10 Mitigation Improvements
28
CVE-2018-8453
xxxSBTrackInit() will eventually execute xxxSendMessage(, 0x114,…)
0x114 is WM_HSCROLL message
Translate message to callback
WM_HSCROLL         fnDWORD callback
How callbacks are executed?
29
CVE-2018-8453
In exploit there is state machine inside the fnDWORD usermode callback hook
•
State machine is required because fnDWORD usermode callback is called very often 
•
We have two stages of exploitation inside fnDWORD hook
Stage 1 - Destroy window inside fnDWORD usermode callback during WM_HSCROLL message 
First thing that is going to be released is shadow (that’s why shadow is required to be initialized)
It will lead to execution of fnNCDESTROY callback
30
CVE-2018-8453
During fnNCDESTROY usermode callback find freed shadow and trigger vulnerability
FNID of shadow window is no longer FNID_FREED!
Call stack:
31
CVE-2018-8453
Due to changed FNID message WM_CANCELMODE will lead to freeing of USERTAG_SCROLLTRACK!
Stage 2 (inside the fnDWORD hook)
This will eventually result in Double Free
Call stack:
32
CVE-2018-8453
Freeing USERTAG_SCROLLTRACK with WM_CANCELMODE gives opportunity to reclaim just freed memory 
Free bitmats allocated in Fengshui(), and allocate some more
33
CVE-2018-8453
xxxSBTrackInit() will finish execution with freeing USERTAG_SCROLLTRACK
But it will result in freeing GDITAG_POOL_BITMAP_BITS instead
Free USERTAG_SCROLLTRACK
Free GDITAG_POOL_BITMAP_BITS
Double free:
34
CVE-2018-8453
New mitigation: GDI objects isolation (Implemented in Windows 10 RS4)
Good write-up by Francisco Falcon can be found here:
https://blog.quarkslab.com/reverse-engineering-the-win32k-type-isolation-mitigation.html
New mitigation eliminates common exploitation technique of using Bitmaps:
•
SURFACE objects used for exploitation are now not allocated aside of pixel data buffers
Use of Bitmap objects for kernel exploitation was believed to be killed
But as you can see it will not disappear completely
35
CVE-2018-8453
Exploit creates 64 threads
Each thread is then converted to GUI thread after using win32k functionality
THREADINFO is undocumented but structure is partially available through win32k!_w32thread
GetBitmapBits / SetBitmapBits is used to overwrite THREADINFO data
It leads to THREADINFO to be allocated in place of dangling bitmap
36
CVE-2018-8453
Control over THREADINFO allows to use SetMessageExtraInfo gadget
Peek and poke *(u64*)((*(u64*) THREADINFO+0x1A8)+0x198)
0x1A8 - Message queue
0x198 - Extra Info
37
CVE-2018-8453
Replace message queue pointer with arbitrary address
Read quadword, but overwrite it with zero
Restore message queue pointer
Replace message queue pointer with arbitrary address
Set quadword at address
Restore message queue pointer
Restore original value
38
CVE-2018-8453
THREADINFO also contains pointer to process object
Exploit uses it to steal system token
39
Case 2
CVE-2018-8589
Probably the least interesting exploit presented 
today but it led to far greater discoveries
Race condition in win32k
Exploit found in the wild was targeting only 
Windows 7 SP1 32-bit 
At least two processor cores are required
40
CVE-2018-8589
CVE-2018-8589 is a complex race condition in win32k due to improper locking of messages sent 
synchronously between threads
Found sample exploited with the use of MoveWindow() and WM_NCCALCSIZE message
41
CVE-2018-8589
Both threads have the same window procedure
Second thread initiates recursion
Thread 1
Thread 2
42
CVE-2018-8589
Window procedure