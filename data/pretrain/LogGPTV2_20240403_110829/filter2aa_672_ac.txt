You should configure your terminal before attaching it to the serial port,
the settings are 19200 baud rate, 8 data bits, 2 stop bits, no parity.
# stty -F /dev/ttyS0 19200 cs8 cstopb -parenb
speed 19200 baud; rows 0; columns 0; line = 0; intr = ^C; quit = ^\; 
erase = ^?; kill = ^H; eof = ^D; eol = ; eol2 = ;
swtch = ; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R;
werase = ^W; lnext = ^V; flush = ^O; min = 100; time = 2; -parenb -parodd 
cs8 -hupcl cstopb cread clocal crtscts -ignbrk brkint ignpar -parmrk -inpck
-istrip -inlcr -igncr -icrnl -ixon -ixoff -iuclc -ixany -imaxbel -iutf8
-opost -olcuc -ocrnl -onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 
vt0 ff0 -isig -icanon iexten -echo echoe echok -echonl -noflsh -xcase 
-tostop -echoprt echoctl echoke
# screen /dev/ttyS0 19200
1010100100001100000000101000*000101001+11101111011111111110000001011011100
10101001++000001100101100*110100101001000011000000111010000100101001111111
0011101100010011000100000+000000000 ... 
As you can see we get '0' and '1' as well as '*' and '+', this is because
the circuit estimates the quality of the signal. '*' and '+' are bad
quality '0' and '1' data. We ignore bad data and only accept good quality.
Bad quality data should be ignored, and if you see a relevant amount of '*'
and '+' in your stream verify the tuner settings.  
In order to identify the beginning of an RDS message and find the right
offset we "lock" against the PI code, which is present at the beginning of
every RDS group. PI codes for every FM radio station are publicly available
on the Internet, if you know the frequency you are listening to then you
can figure out the PI code and look for it. If you have no clue about what
the PI code might be a way for finding it out is seeking the most recurring
16 bit string, which is likely to be the PI code.
Here's a single raw RDS Group with PI 5401 (hexadecimal conversion of
101010000000001):
0101010000000001111101100100000100001010001100101100000000100001010000001100
1001010010010000010001101110
Let's separate the different sections:
0101010000000001 1111011001 0000  01 0  0001 01000    1100101100 
0000001000010100 0000110010 0101001001000001 0001101110
PI code          Checkword  Group B0 TP PTY   Checkword  Data 
Checkword  Data             Checkword
So we can isolate and identify RDS messages, now you can either parse them
visually by reading the specs (not a very scalable way we might say) or use
a tool like our Simple RDS Decoder.
--[ 6. Simple RDS Decoder 0.1
The tool parses basic RDS messages and 0A Group (more Group decoding will
be implemented in future versions) and performs full decoding of Single
group RDS-TMC messages (Multi Group support is also planned for future
releases).
Here's the basic usage:
# ./srdsd -h
Simple RDS-TMC Decoder 0.1     || http://dev.inversepath.com/rds
Copyright 2007 Andrea Barisani || 
Usage: ./srdsd.pl [-h|-H|-P|-t] [-d ] [-p ] 
   -t display only tmc packets
   -H HTML output (outputs to /tmp/rds-*.html)
   -p PI number
   -P PI search
   -d location db path
   -h this help
Note: -d option expects a DAT Location Table code according to TMCF-LT-EF-
MFF-v06 
      standard (2005/05/11)
As we mentioned the first step is finding the PI for your RDS stream, if you
don't know it already you can use '-P' option:
# ./srdsd -P rds_dump.raw | tail
0010000110000000: 4140 (2180)
1000011000000001: 4146 (8601)
0001100000000101: 4158 (1805)
1001000011000000: 4160 (90c0)
0000110000000010: 4163 (0c02)
0110000000010100: 4163 (6014)
0011000000001010: 4164 (300a)
0100100001100000: 4167 (4860)
1010010000110000: 4172 (a430)
0101001000011000: 4185 (5218)
Here 5218 looks like a reasonable candidate being the most recurrent
string. Let's try it:
# ./srdsd -p 5218 -d ~/loc_db/ rds_dump.raw
Reading TMC Location Table at ~/loc_db/:
 parsing NAMES: 13135 entries
 parsing ROADS: 1011 entries
 parsing SEGMENTS: 15 entries
 parsing POINTS: 12501 entries
done.
Got RDS message (frame 1)
Programme Identification: 0101001000011000 (5218)
Group type code/version: 0000/0 (0A  - Tuning)
Traffic Program: 1
Programme Type: 01001 (9  - Varied Speech)
Block 2: 01110
Block 3: 1111100000010110
Block 4: 0011000000110010
Decoded 0A group:
Traffic Announcement: 0
Music Speech switch: 0
Decoder Identification control: 110 (Artificial Head / PS char 
5,6)
Alternative Frequencies: 11111000, 00010110 (112.3, 89.7)
Programme Service name: 0011000000110010 (02)
Collected PSN: 02
...
Got RDS message (frame 76)
Programme Identification: 0101001000011000 (5218)
Group type code/version: 1000/0 (8A  - TMC)
Traffic Program: 1
Programme Type: 01001 (9  - Varied Speech)
Block 2: 01000
Block 3: 0101100001110011
Block 4: 0000110000001100
Decoded 8A group:
Bit X4: 0 (User message)
Bit X3: 1 (Single-group message)
Duration and Persistence: 000 (no explicit duration given)
Diversion advice: 0
Direction: 1 (-)
Extent: 011 (3)
Event: 00001110011 (115 - slow traffic (with average speeds Q))
Location: 0000110000001100 (3084)
Decoded Location:
Location code type: POINT
Name ID: 11013 (Sv. Grande Raccordo Anulare)
Road code: 266 (Roma-Ss16)
GPS: 41.98449 N 12.49321 E
Link: 
http://maps.google.com/maps?ll=41.98449,12.49321&spn=0.3,0.3&q=41.98449,12.4
9321
...and so on.
The 'Collected PSN' variable holds all the character of Programme Service
name seen so far, this way we can track (just like RDS FM Radio do) the
name of the station:
# ./srdsd -p 5201 rds_dump.raw | grep "Collected PSN" | head
Collected PSN: DI
Collected PSN: DIO1
Collected PSN: DIO1  
Collected PSN: RADIO1  
Collected PSN: RADIO1  
Check out '-H' switch for html'ized output in /tmp (which can be useful for
directly following the Google Map links). We also have a version that plots
all the traffic on Google Map using their API, if you are interested in it
just email us.
--[ 7. Injection circuitry
              MiniRDS                               
             (encoder) 
            --------------                 
           |              |        I2C BUS cable          
           |      o---------------->-------- PC - parallel
           |              |           RDS-TMC              port
           |   (i2c BUS)  |      raw packet (104 bit)
           |    in/out    |
           |              |
           | RDS output   |
           |  o           |
           |  |           |
            --|----------- 
              |                                        \       /
              | 57 kHz                                  \     /
              | amplitude modulated                      \   /
              | signal                                    \ /
              |                                            *
              |                                            |
              |                                            |
              |          FM Transmitter                    |
            __|_________________________________           | FM signal
           |  |                                 |          |     +
           |  o RDS/MPX input                   |          |    RDS
           |                                    |          | sub-carrier
           |          ^           RF part       |          |
           |__________|________                 |          |   
           |          |        |        Antenna |          |      
           | PLL      v        |           o    |          | 
           | Digital Tuning    |           |_______________|
           |___________________|________________|
The hardware injection setup is composed by a PC, a RDS encoder and a FM
transmitter.
We performed the RDS encoding using a single chip encoder[9] available from
Piratske Radio[10], the core of this encoder is a programmed microcontroller
type 18F12[11]. The chip holds a RAM memory and an EEPROM memory for data
storage during power-off, both memory areas are accessible using the serial
I2C protocol since the PIC fully implements an I2C BUS specifications.
Commands and control byte sequences are described in the product data-sheet.
Here we show the schema for the cable needed to connect I2C BUS in/out pins
on the encoder to the PC parallel port, the pinning here is consistent with 
the our driver code[12].
                                                     (*)
   [ i2c cable connector ]                      -----|>|---o pin 6  SDA out
                                               |
                  SDA o------------------------o-----------o pin 12 SDA in 
                  SCL o------------------------------------o pin 5  SCL
                  GND o------------------------------------o pin 25 GND
             ( RDS ENCODER )                          ( PC - LPT )
                                                    DB-25  connector
(*) switching diode - 1N4148
Our *CRUDE* (Code Rushed and Ugly due to unexpected DEadline) driver code
allows easy write and read access of the encoder memory and command sending
to the device. You can use the information gathered from our decoder
application for crafting whatever RDS-TMC packet you might need.
The output of the encoder module is an amplitude modulated signal centered
on 57 kHz, this signal is ready to be attached as MPX/RDS input to the FM
transmitter.
Almost every FM transmitter is suitable for TMC injection, the only
important requirement is frequency stability. An unstable transmitter
doesn't allow proper broadcasting of the RDS data stream, this is because a
sensible frequency spreading of the RDS sub-carrier will result in a great
number of corrupted data blocks on the receiving demodulator.
Thus, if you plan to build your own transmitter we advice you to integrate
in your device a PLL circuit to properly lock on the selected frequency.
The transmitter we built includes a digital tuner based on the SAA1057[13]
Radio tuning PLL frequency synthesizer. Our transmitter also offers an
audio part suitable to hook external MICs or other audio peripherals, that's
very useful to testing purposes.
Moreover the RF part holds an MPX/RDS input suitable to attach directly the
RDS encoder module signal, it's also possible to mix together an extra
audio component with the RDS signal using a simple mixer circuit.
Detailed scheme for a sample FM transmitter is available from the Piratske
Radio website. In the site you can also find useful information if you plan
to build your own TX antenna. This is not the only FM transmitter you can
use, there are many resource available on the Internet that can easily allow
whatever FM transmitter you might need for any purpose.
--[ I. References
[1] - Italian RDS-TMC Location Table Database
      https://www2.ilportaledellautomobilista.it/info/infofree?idUser=1&idBody=14
[2] - Philips FM1216 DataSheet
      http://pvr.sourceforge.net/FM1216.pdf
[3] - PVR Hardware Database
      http://pvrhw.goldfish.org
[4] - SGS-Thompson Microelectronics TDA7330
      http://www.datasheetcatalog.com/datasheets_pdf/T/D/A/7/TDA7330.shtml
[5] - Philips SAA6579
      http://www.datasheetcatalog.com/datasheets_pdf/S/A/A/6/SAA6579.shtml
[6] - uJDM PIC Programmer
      http://www.semis.demon.co.uk/uJDM/uJDMmain.htm
[7] - Maxim RS-232
      http://www.maxim-ic.com/getds.cfm?qv_pk=1798&ln=en
[8] - Xcircuit
      http://xcircuit.ece.jhu.edu 
[9] - MiniRDS encoder chip (MRDS192)
      http://www.pira.cz/rds/mrds192.pdf
[10] - Piratske Radio website - RDS section
      http://www.pira.cz/rds/index.htm
[11] - Microchip PIC 18F1220
       http://ww1.microchip.com/downloads/en/DeviceDoc/39605F.pdf
[12] - MiniRDS driver code
       http://dev.inversepath.com/rds/i2c_minirds.tar.gz
[13] - Philips SAA1057 - Radio tuning PLL frequency synthesizer
       http://www.datasheetcatalog.net/de/datasheets_pdf/S/A/A/1/SAA1057.shtml
--[ II. Links
- Project directory
  http://dev.inversepath.com/rds
|=[ EOF ]=---------------------------------------------------------------=|