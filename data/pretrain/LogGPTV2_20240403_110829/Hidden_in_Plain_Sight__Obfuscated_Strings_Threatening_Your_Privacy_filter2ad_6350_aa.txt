title:Hidden in Plain Sight: Obfuscated Strings Threatening Your Privacy
author:Leonid Glanz and
Patrick M&quot;uller and
Lars Baumg&quot;artner and
Michael Reif and
Sven Amann and
Pauline Anthonysamy and
Mira Mezini
0
2
0
2
p
e
S
9
]
R
C
.
s
c
[
2
v
0
4
5
4
0
.
2
0
0
2
:
v
i
X
r
a
Hidden in Plain Sight:
Obfuscated Strings Threatening Your Privacy
Leonid Glanz
PI:EMAIL
Technical University of Darmstadt
Patrick Müller
PI:EMAIL
Technical University of Darmstadt
Michael Reif
PI:EMAIL
Technical University of Darmstadt
Sven Amann
PI:EMAIL
CQSE GmbH
Mira Mezini
PI:EMAIL
Technical University of Darmstadt
Lars Baumgärtner
PI:EMAIL
Technical University of Darmstadt
Pauline Anthonysamy
PI:EMAIL
Google Inc.
ABSTRACT
String obfuscation is an established technique used by proprietary,
closed-source applications to protect intellectual property. Further-
more, it is also frequently used to hide spyware or malware in appli-
cations. In both cases, the techniques range from bit-manipulation
over XOR operations to AES encryption. However, string obfus-
cation techniques/tools suffer from one shared weakness: They
generally have to embed the necessary logic to deobfuscate strings
into the app code.
In this paper, we show that most of the string obfuscation tech-
niques found in malicious and benign applications for Android can
easily be broken in an automated fashion. We developed StringHound,
an open-source tool that uses novel techniques that identify obfus-
cated strings and reconstruct the originals using slicing.
We evaluated StringHound on both benign and malicious An-
droid apps. In summary, we deobfuscate almost 30 times more ob-
fuscated strings than other string deobfuscation tools. Additionally,
we analyzed 100,000 Google Play Store apps and found multiple ob-
fuscated strings that hide vulnerable cryptographic usages, insecure
internet accesses, API keys, hard-coded passwords, and exploitation
of privileges without the awareness of the developer. Furthermore,
our analysis reveals that not only malware uses string obfuscation
but also benign apps make extensive use of string obfuscation.
CCS CONCEPTS
• Security and privacy → Privacy protections; Mobile platform
security; Software security engineering.
KEYWORDS
string (de-)obfuscation; Android apps; slicing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3384745
ACM Reference Format:
Leonid Glanz, Patrick Müller, Lars Baumgärtner, Michael Reif, Sven Amann,
Pauline Anthonysamy, and Mira Mezini. 2020. Hidden in Plain Sight: Ob-
fuscated Strings Threatening Your Privacy. In 15th ACM Asia Conference on
Computer and Communications Security (ASIA CCS’20), October 5–9, 2020,
Taipei, Taiwan. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/
3320269.3384745
1 INTRODUCTION
Obfuscation protects applications against abusive practices (e.g.,
repackaging) but also hides malicious intent (e.g., malware) [17, 38].
It significantly impedes the analysis of apps to check their com-
pliance with privacy regulations or to inspect them for detecting
malware [37, 46]. In particular, string obfuscation, which is applied
by most existing obfuscators [12, 16, 41, 52, 62], can hide paths,
URLs, and intents to track user activities, thus compromising the
user’s privacy, or opening shells for remote command execution to
execute a malicious payload.
Opposing prior work [17, 38, 56], which have stated that strings
are often not obfuscated in the wild, in this paper, we provide
strong empirical evidence (cf. Section 4.2.1) that it is widely used
in both malicious and benign apps. The usage of string obfuscation
in the benign apps is to a significant extent due to integrated ad
libraries – hence, even the app developer may not be aware of
their presence. Under these conditions, approaches that analyze
plain strings [21, 35, 40, 42, 60, 63, 65] are deemed to be ineffective,
and techniques for automatically uncovering obfuscated strings are
highly needed.
Given that the deobfuscation logic usually is part of the applica-
tion [58], an analyst can try to debug or to run the application with
a monkey script. However, such "brute-force" testing has serious
drawbacks. First, given that there is no guarantee that all execu-
tion paths are covered and that the appropriate execution point to
deobfuscate a string is unknown, the latter maybe not triggered.
Second, obfuscated applications could detect the debugging mode
and avoid to execute the deobfuscation [46] since deobfuscation
functionality is often protected by guards trying to defend against
artificial runtime environments [54].
Several dedicated approaches [5, 14, 15, 26, 46, 49, 61, 64] have
been proposed to address obfuscation. But, they suffer from limited
scalability and generality. Many of the existing approaches [5, 46,
61] typically alter if statements of the target program and then run
the code with all combinations of values to circumvent defenses and
force the execution of all branches. Given that many obfuscators
perform automatic string obfuscation on millions of apps, the above
approaches are not suited for large-scale analyses. The approach by
Zhou et al. [64] slightly reduces the number of executions, but at the
cost of generality, as its emulator is fitted to string operations only.
In fact, to the best of our knowledge, all works lack a systematic
analysis of existing automatic obfuscators and their scope.
To address the above problems of state-of-the-art deobfuscators,
we propose StringHound, a novel string deobfuscation technique
for automatically obfuscated strings in Java bytecode. StringHound
generalizes to different string obfuscations and executes only the
code necessary for their deobfuscation to ensure scalability.
Additionally, we performed a comprehensive study of existing
obfuscation techniques and used the gained insights to guide the
design of StringHound to ensure generality. Therefore, we systemat-
ically studied how strings are obfuscated in ad libraries (cf. Section
2). These libraries often employ string obfuscation [10, 13, 47, 50, 51]
and are, hence, a good source for systematically surveying string
obfuscation techniques used in the wild. To ensure that only code
necessary for deobfuscation is executed, StringHound (a) locates
the usage of obfuscated strings within the application code, (b)
extracts the deobfuscation logic alongside with all the context it
needs to perform, and (c) executes the extracted code directly on
a Java Virtual Machine (JVM) to yield the plain-text versions of
obfuscated strings.
For a fast location, we propose two classifiers, one that uses
decision trees [45] to identify potentially obfuscated strings, and
another one that uses Spearman correlation [39] to identify code of
deobfuscation methods. Given that the deobfuscation logic usually
is part of the application [58], we propose a specifically targeted
slicing technique that includes all program statements which affect
the state of an obfuscated string sink located within a given method.
Additionally, StringHound extracts the execution context of the de-
obfuscation logic and injects the slice into it. Through the injection
of the slice, countermeasures, potentially introduced by obfusca-
tors, are rendered ineffective. Finally, StringHound executes the
resulting slice within the extracted context to obtain deobfuscated
strings.
We evaluated StringHound and four state-of-the-art deobfusca-
tion tools [14, 15, 26, 49] by applying them to a set of apps that we
obfuscated with 21 different techniques. The evaluation shows that
StringHound yields significantly better results than other tools. We
also applied StringHound to four sets of benign and malicious real-
world apps: (a) a random sample of 100,000 apps, (b) popular apps
based on AndroidRank Top 500 [2], (c) malware from Contagio [9],
and (d) apps from the Google Play Store in 2018 classified as mali-
cious by VirusTotal. StringHound’s classifiers were key to enabling
a study of more than 100,000 apps by using them to filter out apps
that do not contain any obfuscated strings to avoid unnecessary
slicing and deobfuscation steps. A brute-force approach that tries
to deobfuscate each string in all apps would be infeasible, given
that an app such as, WhatsApp [59] contain 17,176 strings.
Our study shows that string obfuscation is used at least 12 times
more often than previous studies stated [17, 38, 56]. We categorize
our findings and give insights on how string-obfuscation is used in
different kinds of apps. Besides expected results, e.g., obfuscated
URLs and commands in malware sets, we surprisingly found that
76% of the 100,000 apps contain obfuscated strings. An in-depth anal-
ysis revealed that several strings are commonly found in ad libraries
integrated into apps. Moreover, we identified two apps in the Top
500 set that conceal suspicious behavior through string obfuscation.
They collect sensitive information from a user’s mobile phone, such
as call logs and location information, to build a user profile for track-
ing. Furthermore, they also check for the SuperUser.apk, which
grants root access to the mobile phone. These apps are installed over
20 million times and are not flagged as malicious by VirusTotal [55].
In summary, this work makes the following contributions:
(1) A study which identified 21 unique string obfuscation tech-
niques used by state-of-the-art obfuscators (Section 2).
(2) Two novel techniques for locating string obfuscation (Sec-
tion 3.1.2 & 3.1.3).
(3) StringHound1, an novel open-source string deobfuscator
that integrates the proposed classifier and slicing techniques.
It yields significantly better results than other deobfusca-
tors on our evaluation data set and renders intra-procedural
obfuscation techniques ineffective.
(4) A study of string obfuscation in four real-world data sets
(Section 4.2.2) containing more than 100,000 apps and pro-
viding valuable insights into the prevalence of obfuscation
usage in the wild.
2 EXISTING STRING OBFUSCATION
TECHNIQUES
We systematically analyzed string obfuscation in ad libraries, since
these libraries have been shown to use it in various forms and
quantities [10, 13, 47, 50, 51] The knowledge gained from the fol-
lowing analysis was used as a basis for designing our approach and
conducting controlled experiments for evaluation purposes.
Methodology. As there is no publicly available set of ad libraries
that use string obfuscation, we sampled our own collection of ad
libraries by analyzing apps which integrate them. First, we collected
a list of package names of frequently used ad libraries [30] and a
list of URLs of ad networks [3]. We reversed the internet domain
name [11] (e.g., youmi.net ⇒ net.youmi) of the URLs to guess
package names of ad libraries. Next, we searched for code with
the respective package names by analyzing 100,000 randomly sam-
pled apps from AndroZoo [25] and found 640 unique ad libraries
distributed across 81,008 individual apps.
To identify string obfuscation techniques, we manually inspected
obfuscated strings and analyzed their flows until they reached meth-
ods that are not modifiable by the obfuscator (e.g., System.println).
Nevertheless, we did not focus only on string constants because, in
the obfuscated form, they are often also stored in byte arrays [48].
Hence, we considered any data structure which can be used to
hide string representations and refer to such data structures in the
following as obfuscated strings.
1https://github.com/stg-tud/StringHound
Table 1: String Obfuscation Techniques in Ad Libraries
Example Package
com.chamspire
com.intentsoftware
com.ironsource
com.youmi
com.adcolony
a.a.a
com.google.android
cn.pro.sdk
br.com.tempest
com.applovin