(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:17)
R← G(cid:17)
p · R3
(cid:105)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) − 1
2
(cid:105)
D3, T3 = gb
= 1
D3, T3
= 1
AdvA(λ) =
561where the probability is over the random bits used by G, the
random choice of T3 ∈ G, and the random bits used by A.
Deﬁnition 3. The (t, , l)-decision cDH assumption in G
states that there exists no t-time algorithm that has advan-
tage at least  in solving the decision l-cDH problem in G.
l-composite Diﬃe-Hellman Exponent assumption (
l-cDHE). This assumption is the transformation of l-cDH
assumption in composite-order bilinear groups . Picks two
random exponents a, b R← ZN , and three random elements
R1, R2, R3
R← Gq. Given the input as
 (N, G, GT , e), gp, gq, ga
gal+1
p
· R1, gal+1·b
p
p , ga2
· R2, gal+2
p ,··· , gal
p ,
,··· , ga2l
p ,
p
D4 ←
the decision l-cDHE problem is to determine whether the
p · R3, or a random element in G.
given element T4 equals gb
The advantage of an algorithm A that outputs b ∈ {0, 1} in
solving the decision l-cDHE problem is deﬁned as
(cid:104)A(cid:16)
(cid:104)A(cid:16)
− Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:17)
R← G(cid:17)
p · R3
(cid:105)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) − 1
2
= 1
(cid:105)
D4, T4
= 1
D4, T4 = gb
AdvA(λ) =
where the probability is over the random bits used by G, the
random choice of T4 ∈ G, and the random bits used by A.
Deﬁnition 4. The (t, , l)-decision cDHE assumption in G
states that there exists no t-time algorithm that has advan-
tage at least  in solving decision l-cDHE problem in G.
3. SYSTEM MODEL
3.1 System Architecture
The system architecture is depicted in Figure 1. In the
system, Trusted Keying Authority (TKA) is responsible for
generating and distributing system parameters, rooting mas-
ter keys and authorizing the top-level medical staﬀ and pa-
tient. Top-level medical staﬀ delegate keys to his subordi-
nates, which implies a tree-like organization. Each staﬀ is
identiﬁed by a role consisting of ordered atom roles. For
example, the role of a nurse consisting of the ordered atom
roles“dept.surgery, chief doctor, head nurse, nurse”, is ad-
ministrated by the head nurse whose role is “dept.surgery,
chief doctor, head nurse”. The head nurse is then adminis-
trated by the chief doctor and so on. We group the chief
doctor, the head nurse and the nurse in one Access Policy,
where all of them are responsible for a certain patient. The
patient is identiﬁed by his own name or identity related in-
formation. Each user can encapsulate the patient’s EHR,
while only the one whose role satisﬁes the corresponding ac-
cess policy or the patient himself can decapsulation it. Be-
sides, we blind all the identities in the system such that no
one can infer personal information of patients. The system
works as follows.
(P K, M SK) ← Setup(λ, n). The setup algorithm takes as
inputs the security parameter λ and the maximal size n of
users. It outputs a masker key M SK and a public key P K.
SK (cid:126)R ← KeyGenM(P K, M SK, (cid:126)R). The medial staﬀ key
generation algorithm takes as inputs the public key P K,
(cid:126)R(cid:48)
(cid:126)R(cid:48)
the master key M SK, and a role (cid:126)R for a medical staﬀ. It
outputs a secret key SK (cid:126)R for the medical staﬀ with role (cid:126)R.
,R). The medical staﬀ key
SK (cid:126)R ← KeyDelegM(P K, SK
delegation algorithm takes as inputs the public key P K, the
for a medical staﬀ with role (cid:126)R(cid:48) and an atom
secret key SK
role R. It returns a secret key SK (cid:126)R for the medical staﬀ
with role (cid:126)R = ( (cid:126)R(cid:48),R).
SK Id ← KeyGenP(P K, M SK, Id). The patient key gen-
eration algorithm takes as inputs the public key P K, the
master key M SK, and a patient’s identity Id. It outputs a
secret key SK Id for that patient.
(Hdr, En) ← EHREnc(P K, Id,P, EHR). The EHR encap-
sulation algorithm takes as inputs the public key P K, a
patient’s identity Id, an access policy P for a group of en-
titled medical staﬀ, and the EHR ﬁle EHR. The algorithm
outputs the ciphertext (Hdr, En), where En is the encap-
sulated EHR data by a session key K hidden in the header
Hdr. We assume that the access policy P assigned to the
EHR ﬁle is also included in the header Hdr.
EHR ← EHRDecM(P K, Id, (Hdr, En), SK (cid:126)R). The medi-
cal staﬀ decapsulation algorithm takes as inputs the public
key P K, the patient’s identity Id, the ciphertext (Hdr, En),
and the secret key SK (cid:126)R for a medical staﬀ with role (cid:126)R. If
(cid:126)R /∈ P ref (P), the algorithm outputs ⊥ representing a de-
capsulation failure. Otherwise, (cid:126)R ∈ P ref (P) so that the
secret key SK (cid:126)R is able to be used to decapsulate En. The
algorithm does it by ﬁrst recovering the session key K from
the Hdr and then decapsulating EHR from En with K.
EHR ← EHRDecP(P K, Id, (Hdr, En), SK Id). EHRDecP
algorithm takes as inputs the public key P K , a patien-
t’s identity Id, a ciphertext (Hdr, En), and a secret key
SK Id for that patient. If the ciphertext (Hdr, En) is not
for that patient, the algorithm simply outputs ⊥ to report a
decapsulation failure. Otherwise, the ciphertext (Hdr, En)
is encapsulated by the identity Id. The algorithm recover-
s the session key K using the secret key SK Id. Then, it
decapsulates EHR from En with the session key K.
3.2 Security Model
We use the selective security notion [20] in which the ad-
versary must commit ahead of time the set of roles of medi-
cal staﬀ and the identity of patient it wishes to attack. The
security model includes two parts: semantic security mod-
el on data conﬁdentiality and anonymity model on identity
privacy. We deﬁne them by the security games played with
a challenger and an adversary A as followings.
3.2.1
Init. The adversary outputs a challenge access policy set P
and a challenge patient’s identity Id.
Semantic security model
Setup. The challenger runs Setup algorithm to obtain pub-
lic key P K and gives it to the adversary A.
Query Phase 1. The adversary A adaptively issues two
kinds of queries:
• Secret key query for a medical staﬀ associated with role
(cid:126)R(cid:63) such that (cid:126)R(cid:63) /∈ P ref (P). The challenger generates
a secret key for (cid:126)R(cid:63) and gives it to the adversary.
562• Secret key query for a patient with identity Id(cid:63) such
that Id(cid:63) (cid:54)= Id. The challenger generates a secret key
for Id(cid:63) and gives it to the adversary.
Challenge. When adversary A decides that it obtains e-
nough secret keys, it outputs two equal-length EHR0, EHR1
on which it wishes to be challenged. The challenger picks
a random bit b ∈ {0, 1}, and encapsulates the EHRb under
the challenge access policy set P and the challenge identity
Id. It gives the challenge ciphertext (Hdr, En) to the ad-
versary A. En is the output of the encapsulation of EHRb.
Query Phase 2. Phase 1 is repeated adaptively.
Guess. The adversary A outputs a guess b(cid:48) ∈ {0, 1} and
wins the game if b(cid:48) = b.
We require that no polynomial time adversary can dis-
tinguish a ciphertext of challenge EHR with the challenge
access policy set P and the challenge patient’s identity Id,
from a ciphertext of random message with the challenge ac-
cess policy set P and the challenge patient’s identity Id.
3.2.2 Anonymity model
The phases of Init, Setup, Query are the same as those
in Semantic security model.
Challenge. When adversary A decides that it obtains e-
nough secret keys, it outputs two equal-length EHR0, EHR1
on which it wishes to be challenged. The challenger picks
a random bit b ∈ {0, 1}. If b = 0, it generates the header
Hdr of ciphertext under the challenge access policy set P
and the challenge identity Id, and encapsulates EHR0. If
b = 1, it generates the header Hdr of ciphertext under a
random access policy set and a random patient’s identity,
and encapsulates EHR1. It gives the challenge ciphertex-
t (Hdr, En) to the adversary A. En is the output of the
encapsulation of EHRb.
Guess. The adversary A outputs a guess b(cid:48) and wins the
game if b(cid:48) = b.
We require that no polynomial time adversary can dis-
tinguish a ciphertext of challenge EHR with the challenge
access policy set P and the challenge patient’s identity Id,
from a ciphertext of challenge EHR with a random access
policy set and a random patient’s identity.
4. PROPOSED APPROACH
4.1 The Construction
In this section, we propose an anonymous role-based ac-
cess control scheme. The scheme is based on the HIBE
scheme proposed by Boneh et al. [6] and RBAC scheme pro-
posed by Liu et al. [20] which oﬀers an eﬃcient approach to
support hierarchical access control. The anonymous prop-
erty is motivated by Seo et al.
[27], where anonymity is
achieved by leveraging bilinear groups with composite order
N = p · q. Elements in the public parameters are utilized in
two separate layers: “key generation layer” and “anonymi-
ty layer”. Elements in the “key generation layer” are in the
subgroup Gp. They provide the secret key and master se-
cret key functionality. Elements in the “anonymity layer” are
blinded by the elements in the subgroup Gq. They help to
ensure anonymity. In this way, we oﬀer information about
the subgroup Gp in “key generation layer”, while keep our
scheme’s anonymity by the help of “anonymity layer”.
Setup(λ, n). It is run by TKA to establish the system. We
assume that the patient identity and the medical staﬀ roles
are elements in ZN . A secure symmetric encryption scheme
with algorithms SymEnc(K, EHR) and SymDec(K, En), and
a collision resistant hash H : {0, 1}∗ → ZN are employed
in our scheme. TKA picks a random exponent α R← ZN ,
random elements ω, gp, g, f, u, gh,{hi}i∈[1,n]
R← Gp, and ran-
R← Gq. Next,
dom elements gq, Rg, Rf , Ru, Rh,{Rhi}i∈[1,n]
it computes
E = e(g, ω), G = g · Rg, F = f · Rf , U = u · Ru,
H = gh · Rh,
{Hi = hi · Rhi}i∈[1,n]
The public key P K includes the description of composite-
order bilinear groups (N, G, GT , e), as well as
P K =(cid:8)gp, gq, G, F, U, H,{Hi}i∈[1,n], E(cid:9)
The master key is M SK = (cid:8)ω, p, q, g, f, u, gh,{hi}i∈[1,n]
(cid:9),
which is kept by TKA.
KeyGenM(P K, M SK, (cid:126)R). For a medical staﬀ associated
with role (cid:126)R = (R1, ...,Rd), denote I = {i : Ri ∈ S (cid:126)R}. When
the medical staﬀ wants to join the hospital system, he should
be authenticated by TKA ﬁrstly. Next, if he is the top-level
medical staﬀ, TKA generate a secret key SK (cid:126)R for him. It
R← ZN satisfying
picks random exponents r1, r2, s1, s2, t1, t2
that s1 · t2 − s2 · t1 (cid:54)= 0 mod p and s1 · t2 − s2 · t1 (cid:54)= 0 mod q.
If the equations do not hold, TKA picks other random ex-
ponents and repeats the procedure.
It outputs the secret
key SK (cid:126)R that consists of two sub-keys: the sub-key SK (cid:126)R
is used for decryption and delegation, and the sub-key SK (cid:126)R
is used for re-randomization.
d
ω
u
Ri
i
h
f r2 , gr1 , gr2 , gr1
h ,{hr1
j }j∈[1,n]\I
(cid:126)R
d =
SK
(cid:126)R
r =
SK
(cid:33)r1
(cid:33)s1
(cid:33)t1
(cid:32)
(cid:32)
(cid:32)
(cid:40)
i∈I
(cid:89)
(cid:89)
(cid:89)
i∈I
i∈I
Ri
i
Ri
i
r
(cid:41)
(1)
(2)
u
h
f s2 , gs1 , gs2 , gs1
h ,{hs1
j }j∈[1,n]\I ,
u
h
f t2 , gt1 , gt2 , gt1
(cid:110)
h ,{ht1
j }j∈[1,n]\I
(cid:111)
Finally TKA outputs SK (cid:126)R =
for the med-
ical staﬀ. Actually, TKA can generate secret keys for any
medical staﬀ with authorized roles by running KeyGenM.
d , SK (cid:126)R
SK (cid:126)R
r
(cid:126)R(cid:48)
,R). The secret key for a low-level
KeyDelegM(P K, SK
medical staﬀ associated with role (cid:126)R = ( (cid:126)R(cid:48),R) is derived
from a given secret key of his supervisor at a higher-level
SK
r ) associated with role (cid:126)R(cid:48), where
(cid:126)R(cid:48)
d =(cid:8)ad,0, ad,1, ad,2, ad,3,{bd,j}j∈[1,n]\I(cid:48)(cid:9)
(cid:40) ar,0, ar,1, ar,2, ar,3,{br,j}j∈[1,n]\I(cid:48) ,
(cid:41)
= (SK
(cid:126)R(cid:48)
(cid:126)R(cid:48)
d , SK
SK
(cid:126)R(cid:48)
(cid:126)R(cid:48)
r =
SK
(cid:48)
r,0, a
a
(cid:48)
r,1, a
(cid:48)
r,2, a
r,3,{b
(cid:48)
r,j}j∈[1,n]\I(cid:48)
(cid:48)
and I(cid:48) = {i : Ri ∈ S (cid:126)R(cid:48)}. The high-level medical staﬀ gen-
erates a secret key SK (cid:126)R for the low-level one that consists
of two parts as well: the decryption part SK (cid:126)R
d and the re-
randomization part SK (cid:126)R
r .
563
(cid:17)δ1(cid:19)
d , the high-level medical staﬀ
R← ZN and delegates the se-
For the decryption part SK (cid:126)R
picks random exponents γ1, δ1
cret key for the low-level one by using
d =(cid:8)d1, d2, d3, d4,{dj}j∈[1,n]\I
(cid:18)(cid:16)
(cid:17)γ1 ·(cid:16)
(cid:17) ·(cid:16)
SK
(cid:126)R
(cid:48)
(cid:9) =
ad,0(b
ad,1 · aγ1
R
d,i)
r,1 · a
R
ar,0(b
R
r,i)
r,2 · a
r,1, ad,2 · aγ1
(cid:48)δ1
{bd,j · bγ1
r,j}j∈[1,n]\I
(cid:48)δ1
r,j · b
(cid:48)
r,0(b