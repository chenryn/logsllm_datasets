备用沟通方法
复杂的测试
1.3首选快速、简单的测试，而不是缓慢、复杂的测试
简单的测试，而不是缓慢、
L
---
## Page 15
题越多，你就越能成为一个更好、更快的故障排除人员。
缆是否接通，快速查看线缆连接比坐在电脑前一分钟等待端口扫描
让服务器断开网络连接。如果你离系统设备非常近，可以查看下线
很简单。网络和电源线的连接经常会松动，非常轻微的推动就足以
是提交一个工单或者给支持人员发送某种通知，当启动这些流程之
几乎无人监视的情况下执行，那么做一下慢测试也无妨。因为启动
短、更简单的测试是合理的。只要团队成员之间具备良好的沟通
在这种情况下，让一个员工做缓慢、复杂的测试而其他人专注更
第1章故障排除的最佳实践
似的症状时就采用使用过的解决方案去解决问题，完全不再听取任
个症状，就能非常快速地解决问题。俗话说得好，如果它走起路来
况下，问题症状一样，造成问题的原因也相同，如果你能识别出这
么原因造成的这个问题，采取了什么样的步骤来隔离问题。多数情
题根源能力的原因是他们以前多次碰到过同样的问题。你接触的问
的结果要好得多。
后，你就可以将注意力转移到其他更需要关注的任务当中。
用于那些需要花费时间的故障排除过程。例如，故障排除中有一步
慢测试之后，测试运行期间你可以去做别的事情。同样的思路也适
你们就能迅速定位到问题的根本原因。
像鸭子且叫声也像鸭子，那它很可能就是只鸭子。
1.4多尝试过去的解决方案
然而，有时候它并不是鸭子。我曾经见过某些人在听到任何相
解决问题时经常会遇到以前碰到过的症状。努力回忆上次是什
尽管应该首选快速、简单的测试，但如果有缓慢的测试可以在
事实上大部分问题都发生了不止一次。某些人拥有快速划分问
另外一个大问题是，网络是否接通？通常一些大问题的原因都
在团队合作的情景下有个优势是可以很容易同时进行多个测试。
---
## Page 16
的最好方法之一是记录问题及其解决方案。许多人将这个过程称为
1.5记录问题和解决方案
准备好采取别的解决方法吧。
这次你应该能用一个测试很快的验证问题，如果测试结果不同，就
也务必验证你的假设。如果你记得上次隔离问题的一些方法，那么
自己对问题产生偏见，从而更难找到造成问题的真正原因。
错误的话。如果过早地把注意力放到过去的某个解决方案中，会让
一个端口被过滤，如果防火墙阻塞了这个端口或者某个路由器配置
都会出现这样的情况。Nmap（一个很好用的端口扫描工具）会报告
且看起来非常缓慢。在服务器负载很高或者网络连接不佳的情况下
的症状。尤其是那些表面症状。例如，登人服务器的会话有延迟并
何其他的描述。实际情况是，完全不同的问题经常也可以产生相同
习新的工具和技术。更重要的是，如果问题的解决方法记录下来
决者。团队中的初级成员从资深成员的经历中受益，每个人一起学
经碰到过这个问题。如果你能找到相应的事后析误记录，就会立即
解决这个问题时做的每一件事情。情急之下，你能记起的只有你曾
是，实施进一步的方案去防止此类问题再发生。
果是什么。事后剖析的最后确定问题的根本原因，更理想的情况
哪里出了差错，每个人分别采取了什么步骤来隔离问题，相应的结
事后析误。一个问题解决以后，参与解决问题的人聚集在一起记录
找到一个排除故障的步骤列表去隔离问题。
去做。主要原因是，如果同样的症状下次再出现，会很难想起上次
记录问题的过程也会让团队中的每一位成员成为更好的问题解
关键的一点是即使你用之前的解决方案指导故障的排除过程
尽管事后析误会占用每个人的时间，但是有很多理由值得这么
如我所说过的，大部分问题都发生了不止一次。利用这个事实
1.5记录问题和解决方案·
9
---
## Page 17
10
问题的根源还为时尚早，追问“我们怎么做才能让这样的事不再发
?
因在于你，而不是我。
关注点不是解决手边的问题，而是做很多工作去证明出现问题的原
是可能并没有找到问题的根本原因。当你不得不排除一个新问题的
到这个问题。最坏的情形是，你会认为从根本上解决问题从而一劳
题的人员。这说起来容易，但若不了解问题的根源，可能会再次碰
一旦你掌握了问题的根源，就可以想出解决问题的方法和能解决问
到相同的问题。
决了问题。如果不能隔离问题的根源，很可能会一次又一次地遇
什么措施消除了这个问题。团队经常通过重启系统或者服务就解
或者睡觉时就会少被打扰了。
团队中的初级成员很容易自己就能解决问题。这意味着，你在度假
在手上的问题和你要隔离问题而采用的故障排除手段。这时候了解
开始这么做了。当你身处于一个危机当中的时候，你的关注点应该
时候，这就形成了一个更加乱的环境。在这样的环境中，人们的
其是问题可能牵连到自己时。最后，即使你发现应该责备某人，但
误变得只有指责，人们不大可能去参与它，而很可能隐瞒事实，九
有防御性，且常带有侵略性，这最终会起到相反的效果。当事后析
源，但只是为了知道应该责备谁，事后析误在这种环境下就会变得
永逸的努力是白费的。
源。很多时候一个团队只能做到描述问题的症状是什么，采取了
题消失，确实要花费很多时间和努力去查阅日志来追查问题的根
除方法与过程非常棒，但你必须追溯到问题的根本原因。一旦问
当，则它们引发的问题会比能解决的还要多。讨论和记录故障排
最后，有些人非常喜欢事后析误以至于他们在问题解决之前就
第1章
当然，找到问题的根源仅在你想采取措施防止问题重现时有用
若运用得当，事后析误将成为一笔有价值的财富。倘若运用不
一些团队会有相反的问题。他们喜欢用事后析误去分析问题根
故障排除的最佳实践
---
## Page 18
时间提交了代码”，这可以迅速跟踪到问题。没有比在稳定的系统上
到更改，就很可能无法更快地解决问题。如果你缺乏追踪所做更改
之一。但是对于运行一向稳定的系统来说，在所有其他因素相同的
见，这将要么推迟问题的解决，要么造成比他们解决的问题还多的
刚才发生了什么。缺少那些额外的时间，你很可能会碰到反对意
冷静下来，镇定一下，在你计划长期的解决问题方案之前认真思考
候，任何注意力分散都意味着解决问题的时间会更久。
障压力很大，需要极度的专注，尤其是当故障花费公司的金钱的时
生”也没有意义。如果你解决过复杂的问题，你就知道，在解决问
很容易隔离问题。若同时更改了10段代码和3个配置文件就很难
每次只做一个改动。如果能在问题发生时指出之前的一个改动，会
发现一个问题，当想要知道对系统做了什么改动时却无从得知更糟
很稳定时。没有比收到问题报警更好的了，
的方法，
排除对系统的改动将会显著加快排除故障的过程。
情况下，改动的内容应该作为你进行故障排除的第一目标。鉴定和
改动？如果系统一直都不稳定，就不必把新的改动作为问题的来源
很久，突然出现了一个问题，你首先应该问的问题是：哪里发生了
问题。
题过程中，你认为可能的问题根源会不断地发生改变。通常排除故
糕的事情了。
1.6
即使通过某些方法能了解到改动的内容，你最好还是要求自己
尽管对系统的更改可能是问题的来源，但你如果没有办法追踪
系统问题的一个最大来源是改动。如果系统已经流畅地运行了
即使你已经鉴定出问题的根本原因，最好给每个人足够的时间
了解改动
，就应该认真地考虑寻找一个方法，尤其是当你的系统曾经
“Jim在问题发生的那段
1.6了解改动11
---
## Page 19
12第1章故障排除的最佳实践
会是一个高效的问题解决者。从解决Linux问题的角度讲，这意味
再指责DNS（但少数未参加该课程的人仍然是老样子）。
我注意到指责DNS 有问题的人就是那些对 DNS了解最少的人。我
人员和其他人也有。如果你知道所排查故障的系统如何工作，你将
的解决方案是在公司内部开设一个自愿参加的课程，主讲DNS如
样的局面，不过自打我在那里起，我们的DNS服务器一直都很稳
期内，DNS成了所有网络问题的替罪羊。我不知道为什么会出现这
时，每个人都会指责他们知之甚少的技术。在我职业生涯的一段时
题的假设，而不要在刚碰到问题时就回滚全部改动。
何工作。在那之后，我注意到参加过课程的人在遇到网络问题时不
定，但出现网络问题的时候，人们总会问：“是不是DNS岩机了？
意力。像所有其他故障排除哲学一样，验证你认为是改动造成的问
最好仍然每次只做一个改动。回滚多个改动可能会解决问题，但你
要的假设，然后可以继续做其他测试。即使你能回滚所有的改动，
还允许回滚那些引发问题的更改。如果没有别的问题，若你能把所
结果很多不相关的信息都涌了出来。问题在于在这样的维护窗口下
隔离问题。我曾经遇到一些团队用维护窗口作为追踪变更的方法，
仍然不得不遍历每个改动去找到问题的源头。
有的改动回滚到问题发生之前，而问题依旧存在，就排除了一个主
发生问题的时候，很难隔离问题的根本原因。
1.7
如果有一个系统专门用来记录改动那就太棒了，这个系统最好
要点是，本能地去指责自己不熟悉的技术这个毛病排除故障的
上面说了这么多，但改动不总是造成问题的原因。事实上，我
这么多年来，作为一个系统管理员我了解到的一点是遇到问题
了解系统如何工作
---
## Page 20
的范围，并且对问题有了更清晰的认识，就能使用具体、有针对性
能不会得到有用的结果。一旦你采取某些故障排除措施缩小了问题
是在搜索引擎中输人“server not on network”（服务器脱机），很可
问题有正确、清晰的理解。假如你的服务器没有连人网络，而你只
样的问题，而且你有可能搜索到可行的解决方法。
者没有使用特定的关键词搜索，你就会得到大量无价值的信息，并
易搜索到相关信息，即使你不了解错误码的含义。一般在某个论坛
的搜索词条帮助你解决问题。
系列原因。
免做无用功。你将不用执行很多测试就可以排除引起某个问题的一
就越快，同时也会发现你对问题的预感更加准确。这也能帮助你避
错的主题，即使不为了排除故障也应该了解。
本书将以故障排除为上下文来解释这些主题，不过这些都是非常不
着对TCP/IP、DNS、Linux进程、编程和内存管理都要有较深的理解。
且错误的问题诊断步骤将会让你离产生问题的根源更远。你还可能
库。如果程序输出的错误信息足够详尽，那么它们也可以作为帮助
能找到为你解释错误码含义以及应该如何处理这些错误的人或知识
Intermet是最有帮助的。描述特定问题的错误码特别方便，因为很容
上第一个看到某条错误消息的人。很有可能有人已经碰到过和你一
1.8
你解决问题的一个很好的来源。
使用Intermet 排除故障的挑战是在开始网络搜索之前，需要对
排除故障时，Intermet是一个非常宝贵的资源。你可能不是世界
使用网络搜索的另一个危险是：如果对问题了解得不够深人或
你会发现，对系统如何工作了解得越多，解决系统问题的速度
谨慎使用Internet
1.8谨慎使用Internet13
---
## Page 21
14
?
修复了问题，你仍然不能识别出问题的根本原因。因为问题消失了
尤其是要确保在复制、粘贴任何命令或代码之前对它们了如指掌。
会从一群一无所知的人那里得到很多建议。总是从问题本身出发，
问题再次出现时再说吧。
是，请坚持立场，如果你觉得老板或者客户不高兴，那就等同样的
且你的老板或者客户尖叫着让你重启机器看看问题是否解决时。但
题消失。这可能是一个取巧的策略，尤其是在问题需要花费金钱并
开始问题诊断之前，尝试获得所有与排除故障相关的数据，以防问
设备或者重启服务。我的意思是你应该把重启作为最后的手段。在
题的根本原因，几乎可以保证你在晚些时候还会遇到相同的问题。
存在的情况下，
无法继续测试，
有时候重启系统确实修复了故障。危险之处在于如果通过重启操作
件设备。
固，当发生故障的时候，他们的第一反应就是重启服务或者重启硬
Windows 作为服务器，但是重启操作在一些人的脑海中已经根深蒂
法。虽然Windows 95时代已经久远，甚至现在我们都不再使用
1.9
第1章故障排除的最佳实践
使用重启操作修复问题最危险之处不在于它不能工作，而在于
不要误解我的意思，我不是说排除故障时，永远不能重启硬件
在Windows 95时代，重启系统通常是修复问题的最好办
抵制重启
，寻找问题的原因确实非常困难。如果你不能找出问
，所以可能再也不能找出产生问题的原因。在问题不
---
## Page 22
故障排除工具，借助这些工具可以分辨出网络过载和机器过载之
还是需要确定是否应该购买更多RAM、CPU或运行速度更快的磁
的主机，不论是试图查出为什么最近一次提交比之前慢很多的开发
导致网络问题，反过来也一样。本章将会介绍专门出现在本机上的
应。通常，网络故障会引发这个问题，但本章将会介绍一些本地
的负载问题。
盘的系统管理员。这些技术甚至可以帮助你排除Linux 桌面系统中
者，在代码部署到生产环境之前努力执行负载测试的QA工程师，
问题，而将影响网络的问题留到第5章介绍。
和网络问题经常表现出相同的征兆。事实上，服务器本地的问题会
仅与本地服务器相关。让这个问题变得棘手的是：本地服务器问题
间的区别。
几乎 DevOps 团队中的所有成员都遇到过性能不好或响应缓慢
服务器为什么这么慢？耗尽了CPU
机器运行缓慢通常是由于消耗了太多系统特定的资源。系统的
关于主机最常见的一个问题可能是性能太差，甚至都无法响
尽管服务器的绝大部分问题都与网络相关，但是还有一类问题
RAM和磁盘I/O资源
第2章
---
## Page 23