        direct[1] = direct[2];
        direct[2] = direct[3];
        direct[3] = a;
    }
    void rightmv()
    {
        char b = direct[3];
        direct[3] = direct[2];
        direct[2] = direct[1];
        direct[1] = direct[0];
        direct[0] = b;
    }
    void downmv()
    {
        char a = direct[1];
        direct[1] = direct[3];
        direct[3] = a;
        char b = direct[0];
        direct[0] = direct[2];
        direct[2] = b;
    }
    void upmv()
    {
        char b = direct[0];
        direct[0] = direct[2];
        direct[2] = b;
    }
    char input[] = "SSSSDDDWWWDDSSSSSAAAASSDDDDSSSDDWWWWDDDSSSSD";
    int main()
    {
        for (int i = 0; i  密码：8jjj6q
**出题思路**
本题其实是校内CTF校队淘汰赛的原题，上次没有静态和去符号表，这次静态加去符号表，但是难度也不算很大，还是基础的异或和加减（在考虑撸了这套VM是不是也可以出VMpwn了）
**解题思路**
本题出现了非预期解，这个思路是非常好的（而且出题人出题的时候没想到的），本题因为对于flag的每一个字符都进行单独验证和回显，所以可以直接采用爆破，这样这道题目的难度就基本为0了（不过头刚的可以按照正常的虚拟机分析）
    PSH,80,
        PSH,123,
        PSH,102,
        PSH,113,
        PSH,94,
        PSH,79,
        PSH,96,
        PSH,114,
        PSH,103,
        PSH,80,
        PSH,123,
        PSH,102,
        PSH,113,
        PSH,94,
        PSH,75,
        PSH,66,
        PSH,89,
        PSH,75,
        PSH,117,
        PSH,95,
        PSH,75,
        PSH,95,
        PSH,123,
        PSH,75,
        PSH,113,
        PSH,109,
        PSH,95,
        PSH,101,
        PSH,45,
        PSH,105,
        SET,DR1,64,
        SET,DR2,30,
        CALL,WRITE,
        GET,DR1,0,
        GET,DR2,64,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,1,
        GET,DR2,65,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,2,
        GET,DR2,66,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,3,
        GET,DR2,67,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,4,
        GET,DR2,68,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,5,
        GET,DR2,69,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,6,
        GET,DR2,70,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,7,
        GET,DR2,71,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,8,
        GET,DR2,72,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,9,
        GET,DR2,73,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,10,
        GET,DR2,74,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,11,
        GET,DR2,75,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,12,
        GET,DR2,76,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,13,
        GET,DR2,77,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,14,
        GET,DR2,78,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,15,
        GET,DR2,79,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,16,
        GET,DR2,80,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,17,
        GET,DR2,81,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,18,
        GET,DR2,82,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,19,
        GET,DR2,83,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,20,
        GET,DR2,84,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,21,
        GET,DR2,85,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,22,
        GET,DR2,86,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,23,
        GET,DR2,87,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,24,
        GET,DR2,88,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,25,
        GET,DR2,89,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,26,
        GET,DR2,90,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,27,
        GET,DR2,91,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,28,
        GET,DR2,92,
        XOR,DR1,DR2,
        ERR,
        GET,DR1,29,
        GET,DR2,93,
        XOR,DR1,DR2,
        ERR,
        HLT
爆破脚本的话pwntools直接写就ok
###  easy_num
**题目描述**
让我们快乐的解方程（可能出现多解，但是最终flag为有意义的文字）  
链接： 密码：d8hd8q
**出题思路**
本题主要是因为看到了前段时间看雪CTF里面的一道题目，利用与非门实现的RSA，看完wp连喊了好几句wc，的确思路厉害，所以本题的所有运算基本上都是使用与和非来实现的，然后就是利用与非实现了所有的方程，大家愉快的解方程就可以了。
    int nots(int x){
        int data=~(x & x);
        return data;
    }
    int ands(int x,int y)
    {
        int data=~(~(x&y));
        return data;
    }
    int xors(int x,int y)
    {
        int a=~(x&y);
        int b=~(~x&~y);
        int c=~(a&b);
        return ~c;
    }
    #define POPULATE_RIGHT(X) 
        X |= X >>1; 
        X |= X >>2; 
        X |= X >>4; 
        X |= X >>8; 
        X |= X >>16;
    #define REPLICATE_LSB(X) 
        X |= X >1));
        POPULATE_RIGHT(greate);
        REPLICATE_LSB(greate);
        uint32_t non_zero = ands(diff,1);
        REPLICATE_LSB(non_zero);
        return SELECT(non_zero,SELECT(greate,1,-1),0);
    }