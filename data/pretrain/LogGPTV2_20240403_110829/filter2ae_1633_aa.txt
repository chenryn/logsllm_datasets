翻译自“[CVE-2018-11776: How to find 5 RCEs in Apache Struts with Semmle
QL](https://lgtm.com/blog/apache_struts_CVE-2018-11776 "CVE-2018-11776: How to
find 5 RCEs in Apache Struts with Semmle QL")”  
译者（Ph0rse@d0g3）注：人在北京，已穷到吃土。修洞之余，翻一下大佬的文章，向这种优秀的思路学习~
## 正文：
2018年4月，Man You
Mo向Struts安全团队提交了一个新的远程执行代码漏洞编号为[CVE-2018-11776](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11776
"CVE-2018-11776")（[S2-057](https://struts.apache.org/docs/s2-057.html
"S2-057")），当Struts2使用了危险配置是，远程访问即可触发。影响版本为  
Struts 2.3 - Struts 2.3.34, Struts 2.5 - Struts
2.5.16，详情请移步官方公告，公告博客[文章](https://semmle.com/news/apache-struts-CVE-2018-11776
"研究")。  
这是Man You Mo对Apache
Struts安全特性的一部分研究内容。在这篇文章中，作者将介绍如何发现CVE-2018-11776。作者通过之前的旧洞信息，研究Struts的内部安全防护机制，通过创建Semmle
QL运行那些可能有问题的代码。查询结果已分享在[Github](https://github.com/Semmle/SecurityQueries
"Github")上，在后续的研究中也会向这个项目中添加更多的内容，以辅助Struts2以及其它项目的安全审计。
### 识别攻击面
很多漏洞都是接收了危险的数据输入，随后数据流向了某些危险的功能函数中，比如执行SQL语句、反序列化以及其它的解析方式。QL可以很轻松地搜索这种漏洞，只需要我们配置好出各种数据源和危险功能函数，然后让DataFlow库来完成遍历操作。对于某个特定的程序，想要挖掘这种危险数据流的最好方法是查看它的历史漏洞，跟踪历史漏洞的过程中，就可以让我们理解这个程序的安全运作机制，从而更容易发现新的漏洞。
审计之前，作者先跟进调试了[S2-032](https://struts.apache.org/docs/s2-032.html
"S2-032")/[S2-033](https://struts.apache.org/docs/s2-033.html
"S2-033")/[S2-037](https://struts.apache.org/docs/s2-037.html
"S2-037"),这些漏洞都将可控输入进行了[OGNL](https://commons.apache.org/proper/commons-ognl/
"OGNL")表达式解析，从而导致任意代码执行。而最有意思的地方是，同一类漏洞、同样的问题，但确要修复3次，这或许意味着，这个隐患可能仍然存在。
上面的三个RCE漏洞，都是远程通过[OgnlUtil::getValue()](https://lgtm.com/projects/g/apache/struts/snapshot/02518d8149ff0b60863b4012cd3268cf0f2942b7/files/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java?#L301
"OgnlUtil::getValue\(\)")将数据赋予了[methodName](https://lgtm.com/projects/g/apache/struts/snapshot/02518d8149ff0b60863b4012cd3268cf0f2942b7/files/core/src/main/java/com/opensymphony/xwork2/DefaultActionInvocation.java?sort=name&dir=ASC&mode=heatmap&showExcluded=true#L419
"methodName")变量：
    String methodName = proxy.getMethod();    // context, final Object root) throws OgnlException {
      return compileAndExecuteMethod(name, context, new OgnlTask() {
        public Object execute(Object tree) throws OgnlException {
          return Ognl.getValue(tree, context, root);