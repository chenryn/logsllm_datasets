context does not automatically transfer to the other context. A
practical solution that provides a uniﬁed environment with a
single set of apps and still isolates work from personal data
would greatly enhance usability while also reducing resource
overheads.
Employee-employee: corporate-level secure data exchange.
At enterprises, mobile devices are commonly used to bring
rich corporate-related content and documents to employees by
the company managers or other employees. In practice, the
employees often have various levels of security clearance or
roles within the company. Therefore, they should be allowed
to access only particular sets of corporate content with speciﬁc
security levels. As a more generic case, an employee may
decide to share a document with a subset of other employees,
e.g., sharing a sensitive project-related pdf ﬁle with teammates.
Traditionally, such data separation is enforced at a human level:
the employees share the received sensitive contents only with
other colleagues working on the same project. However, data
leakage may occur due to human error or due to permissive
corporate containers that may mix different corporate data.
A system-wide BYOD data protection would enable em-
ployees to securely publish the signed sensitive content along
with the corresponding policies. The policy-authorized em-
ployees could then access data through standard third-party
apps, e.g., an Acrobat Reader for shared pdf documents or an
MP4 player for video. The solution would enforce the poli-
cies across the system, and deny certain unauthorized action
requests such as an employee emailing a plaintext protected
ﬁle to an out-of-context contact. Currently, Android does not
provide ﬁned-grained functionalities to access and protect data
from several contexts with speciﬁc security clearances. Solu-
tions like Bluebox [8] provide speciﬁc security measures such
as data encryption for corporate apps. However, such coarse-
grained measures cannot effectively support secure data trans-
fer use-cases where ﬁne-grained security requirements need to
be enforced. Additionally, the solution should support more
complex time- and location-variant policies for when/where
the sensitive data may be accessed. Speciﬁcally, the virtual
micro security perimeter boundaries may change as a function
of time and/or location. For instance, the attendees of a Federal
conference may be asked access the sensitive shared contents
only within the perimeter of the conference and during working
hours. SWIRLS allows deﬁnition of temporal and location-
dependent policies within capsules and controls the sensitive
content movements. A capsule could deﬁne contexts and the
corresponding policies based on time ranges and geographic
locations when/where the capsule data is valid and can be
accessed.
III. SWIRLS OVERVIEW
Figure
1
high-level
shows SWIRLS’s
architecture.
SWIRLS’s main objective is to facilitate data separation
through deployment of virtual micro security perimeters that
we call capsules. Each capsule is an encrypted and signed
package that
includes sensitive data and policies. These
policies deﬁne how data should be treated when merged
with data from other capsules. Figure 1’s left block presents
a simpliﬁed capsule policy. Every capsule is packaged and
signed by its corresponding data owner who could be i)
corporate admins who do not want the high-proﬁle corporate
data transferred from the device or mixed with other data; ii)
app developers who intend to prevent uncertiﬁed parties from
accessing speciﬁc ﬁles on the device; and iii) third-parties
who may wish to control access to their data. SWIRLS veriﬁes
the integrity of the installed capsule signatures on the device
before enforcing its associated policies. In the ﬁrst case, the
corporate admins protect their sensitive data, against outsiders,
whereas in the second and third cases, the external parties
(i.e., developers and third-parties) attempt to protect against
curious and potentially careless device users.
We describe the three major steps in SWIRLS to realize
BYOD use-cases. First, for distribution and installation of
a capsule, SWIRLS implements a secure protocol to prevent
malicious capsule modiﬁcation and/or interception attacks.
Second, to protect sensitive data, SWIRLS employs dynamic
taint analysis to keep track of the installed capsule bound-
aries while data moves within the system. Third, SWIRLS
implements efﬁcient mandatory access control at various data
propagation points within Android to prevent unauthorized
data accesses.
Capsule distribution and installation. SWIRLS implements
a secure capsule distribution and installation interface for
nontechnical users and capsule owners. Upon the deﬁnition
of a capsule, the capsule owner signs and encrypts it. The
signatures and encryption keys are pushed to SWIRLS’s remote
server. Capsules can be either downloaded as standalone ﬁles
or packaged in Android app ﬁles, and hence are distributable
via the Google Play market. The user downloads a signed
and encrypted capsule, which is then installed by the SWIRLS
system app on the smartphone. The installation consists of
two steps. First, during a platform veriﬁcation procedure,
SWIRLS’s remote server veriﬁes the authenticity of the local
agent on the system to ensure that capsule policies will be
enforced correctly. Second, the SWIRLS system app veriﬁes
the signature, decrypts the capsule, enforces the capsule policy
and installs the capsule data. During the capsule installation,
SWIRLS allocates a new and unique taint label and dynamically
marks the capsule objects as sources. The objects can be apps
and data ﬁles included in the capsule or sensitive data sources
such as network connections.
As a clariﬁcation, the SWIRLS server does not distribute
capsules: it stores decryption keys for capsules. Thus, the
phone must authenticate with the server to get the keys in
order to decrypt a capsule and access its contents. This design
ensures that a phone has SWIRLS data protection in place
before the content owner makes the content available (demo:
[33]). The need for OS veriﬁcation is based on the security
requirements of the content owner. Lightweight alternatives
such as use of a hardware counter to track ﬂash/root attempts
(like Samsung KNOX does) could be used, or checking could
be eschewed altogether, as is done for many BYOD apps today.
Capsule boundary tracking. To guarantee data protection,
SWIRLS keeps track of capsule boundary growth by tracing the
sensitive data propagation starting from the capsule’s source
objects. SWIRLS deploys system-wide taint tracking techniques
across various layers of Android to monitor data ﬂow among
the following system entities1: ﬁles, Android content providers,
apps, system processes and services, account entries, secure
socket connections, interprocess data exchanges, system ser-
vice calls, incoming network trafﬁc, as well as accounts data.
To retain capsule boundary information across smartphone
reboots, SWIRLS stores references to tainted objects for each
capsule in a global database and keeps its information up-to-
date whenever new objects are tainted.
1TaintDroid [15] does not support policy enforcement at any level, dynamic
taint source assignment, and taint analysis across reboots, and among ﬁles,
content providers, system services, accounts, syscalls, and network sockets.
528
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. SWIRLS’s High-Level Architecture
Capsule policy enforcement. The capsule policies mandate
how SWIRLS should handle access requests to different cap-
sules’ data throughout the system. SWIRLS’s runtime policy
enforcement uses the real-time information from the afore-
mentioned capsule boundary database through a three level
instrumentation of the Android framework. First, SWIRLS con-
trols data accesses within the Linux kernel to ensure that the
low-level capsule data propagation complies with the installed
policies. This includes ﬁlesystem operations and inter-process
communications among apps. Unlike previous work [15],
SWIRLS’s kernel-level support makes it resilient against ma-
licious access control evasions through Java Native Interface
(JNI) code segments. Second, SWIRLS instruments the Dalvik
virtual machine (VM) layer with policy enforcement modules
to control ﬁne-grained access requests to variables within
individual apps. SWIRLS’s kernel-level enforcement is more
lightweight than its Dalvik VM counterpart; however, it uses
Dalvik layer enforcement for ﬁne-grained access controls when
a multi-context app includes data from different capsules
simultaneously (SWIRLS’s kernel-level implementation cannot
distinguish different taints within an app). Finally, SWIRLS
enhances and controls data interactions among several key
system services, e.g., the clipboard service, that are accessed
by multiple resources in the system and aggregate data from
various sources.
SWIRLS’s data ﬂow-sensitive and policy-based access con-
trol modules at various layers of Android enable BYOD
scenarios by providing i) the corporations with easy-to-use
and dynamic policy deﬁnition, secure capsule distribution, and
its veriﬁed on-device installation without the need to develop
speciﬁc policy-aware apps; and ii) the employees with a uniﬁed
interface for multi-context sensitive data accesses, and user-
transparent and lightweight system-wide policy enforcement.
SWIRLS provides app developers with an API to develop a new
app or refactor an existing one to manage data from different
capsules at once. The API allows developers to check the
policy compliance of any data interaction between variables
within third-party apps.
IV. THREAT MODEL
SWIRLS’s trusted computing base (TCB) contains the An-
droid system (kernel, Dalvik VM, system services) and the
SWIRLS server. For security, the server could be maintained
by the company. SWIRLS is primarily a system for preventing
unforeseen mixing of data in apps. SWIRLS does not trust
app developers to follow a data owner’s desired data isolation
policies. With perfect information ﬂow tracking (IFT), apps
would be completely untrusted. However, because of current
practical limitations of data-ﬂow tracking to support covert
channels, our current implementation of SWIRLS cannot pro-
tect against malicious apps that actively circumvent isolation
using covert channels and implicit ﬂows. Fortunately,
that
requires deliberate effort from the developer, thus tagging them
as bad actors if caught. In practice, for perfect protection
against advanced malicious app, SWIRLS should be coupled
with some mechanism to establish basic trustworthiness of
app developers, e.g., through a developer certiﬁcation pro-
gram. SWIRLS’s primary use-case is to help the overwhelming
majority of non-malicious apps that fail to meet user privacy
and data isolation expectations in speciﬁc circumstances. For
example, the Mac email client defaults to using an outgoing
server associated with another account if the primary server
associated with an account failed,
thus allowing sensitive
email on an enterprise account to be unknowingly sent via
an untrusted public cloud-mail provider.
V. DESIGN AND IMPLEMENTATIONS
We discuss SWIRLS’s capsules (Section V-A), their distri-
bution and on-device installation (Section V-B), how SWIRLS
keeps track of each capsule boundary at runtime (Section V-C),
and how it enforces the capsule policies dynamically system-
wide (Section V-D).
A. Virtual Micro Security Perimeters
Figure 2 presents SWIRLS’s capsule policy grammar. Cap-
sule identiﬁers, contexts, policies and objects are listed by
section. Each object can be part of a speciﬁc context and be
subject to a policy action when leaving its context. Figure 1’s
left-side box shows an example of a simpliﬁed capsule policy.
Upon capsule installation, the policy entries are read and
enforced on the system. Speciﬁcally, each policy contains
the following (possibly empty) entries. ID: A unique capsule
ID for its corresponding data owner; Apps: The set of apps
that SWIRLS initially marks with the capsule context. For
apps that are not tagged by any installed capsule, SWIRLS
launches them as taint-free initially. However, they may get
tainted afterwards if they are destined by a data ﬂow with
a data context source. Data: The ﬁles and directories are
linked with the capsule context and are considered as context
sources. For instance, an app may come with its own sensitive
ﬁles and directories that need to be protected. Accounts: The
accounts in Android’s Account Manager service corresponding
to the target capsule. Once an app establishes a connection
529
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:45 UTC from IEEE Xplore.  Restrictions apply. 
(cid:3)capsule(cid:4)
::= (cid:3)capsule-id(cid:4)
(cid:3)context(cid:4)
(cid:3)policy(cid:4)
[[(cid:3)ﬁle(cid:4)][(cid:3)application(cid:4)][(cid:3)connection(cid:4)][(cid:3)account(cid:4)]]
::= contexts { (cid:3)geo-context(cid:4) | (cid:3)time-context(cid:4) }
::= policy { (cid:3)capsule-id(cid:4) (cid:3)capsule-id(cid:4) (cid:3)action(cid:4) }
::= ALLOW | DENY | ALLOW LOG | DELETE
::= ﬁles { (cid:3)path(cid:4) (cid:3)context-id(cid:4) }
(cid:3)capsule-id(cid:4) ::= capsule (cid:3)cap-name(cid:4) (cid:3)cap-version(cid:4)
(cid:3)context(cid:4)
(cid:3)policy(cid:4)
(cid:3)action(cid:4)
(cid:3)ﬁle(cid:4)
(cid:3)application(cid:4) ::= applications { (cid:3)package-name(cid:4) (cid:3)context-id(cid:4) }
(cid:3)connection(cid:4) ::= connections { (cid:3)ssl-cname(cid:4) (cid:3)context-id(cid:4) }
(cid:3)account(cid:4)
::= accounts { (cid:3)account-id(cid:4) (cid:3)context-id(cid:4) }
Fig. 2. Simpliﬁed Capsule Policy Grammar.
through a speciﬁc account, SWIRLS labels incoming data
with the capsule context. Connections: The connections, e.g.,
SSL certiﬁcates, that SWIRLS considers as context sources.
Contrary to existing mandatory access control policies syntax,
such as SEAndroid, SWIRLS policies are simple to read and
to write. Solutions like SEAndroid realize ﬁne grained access
control
to the cost of usually complex policies. Solutions
like EASEAndroid[35] have explored solutions to automate
the policy writing process for the Android platform but such
a system still require human intervention and thus a good
knowledge of the policy structure. By comparison our structure
is simple enough so that even non-specialist users can express
their data protection requirements in a few lines. Geo/time
contexts: Time intervals and geographic locations that deter-
mine when or where the capsule data should be considered
valid. The capsule also includes an action (possibly NOP)
that SWIRLS should take when leaving/entering the context,
e.g., deletion or encryption of sensitive BYOD corporate data
objects when the smartphone leaves the company location. The
geographic locations are deﬁned as circles (the center points
to latitude and longitude information along with a radius).