\"2\"
192.168.4.56:6356\> append a 3
(integer) 2
192.168.4.56:6356\> get a
\"23\"
### Setbit 命令(设置位上的值)
-   对key所存储字串,设置或清除特定偏移量上的位(bit)
-   Value值可以为1或0,offset为0\~2\^32之间
-   Key不存在,则创建新key
192.168.4.56:6356\> setbit key offset value
192.168.4.56:6356\> setbit bit 1
(error) ERR wrong number of arguments for \'setbit\' command
192.168.4.56:6356\> SETBIT zdd 1 1
(integer) 0
192.168.4.56:6356\> SETBIT zdd 2 2 #Value值只能为1或0
(error) ERR bit is not an integer or out of range
192.168.4.56:6356\> SETBIT zdd 2 0
(integer) 0
192.168.4.56:6356\> SETBIT zdd 3 1
(integer) 0
192.168.4.56:6356\> SETBIT zdd 4 0
(integer) 0
192.168.4.56:6356\> SETBIT zdd 5 1
(integer) 0
192.168.4.56:6356\> SETBIT zdd 6 1
(integer) 0
192.168.4.56:6356\> SETBIT zdd 7 0
(integer) 0
192.168.4.56:6356\> SETBIT zdd 8 1
(integer) 0
192.168.4.56:6356\> BITCOUNT zdd
(integer) 5
![](media/image5.png){width="4.499305555555556in"
height="0.4270833333333333in"}
### Bitcount命令(统计1的比特位数量)
![LINUXNSD_V01NOSQLDAY03_036](media/image6.png){width="5.760416666666667in"
height="3.5541666666666667in"}
统计字串中被设置为1的比特位数量
192.168.4.56:6356\> bitcount key \[start end\]
192.168.4.56:6356\> setbit zdd 8 0
(integer) 1
192.168.4.56:6356\> bitcount zdd
(integer) 4
### decr和decrby命令(自减)
![LINUXNSD_V01NOSQLDAY03_037](media/image7.png){width="5.760416666666667in"
height="3.4590277777777776in"}
192.168.4.56:6356\> decr key
192.168.4.56:6356\> set test 10
OK
192.168.4.56:6356\> decr test #自减1
(integer) 9
192.168.4.56:6356\> get test
\"9\"
192.168.4.56:6356\> decr test
(integer) 8
192.168.4.56:6356\> get test
\"8\"
192.168.4.56:6356\> decrby test 2 #自减2
(integer) 6
192.168.4.56:6356\> get test
\"6\"
192.168.4.56:6356\> decrby test -2 #自减-2(加2)
(integer) 8
192.168.4.56:6356\> get test
\"8\"
### getrange命令(截取字符)
![LINUXNSD_V01NOSQLDAY03_038](media/image8.png){width="5.760416666666667in"
height="2.446527777777778in"}
192.168.4.56:6356\> set x abcdef
OK
192.168.4.56:6356\> get x
\"abcdef\"
192.168.4.56:6356\> getrange x 0 0
\"a\"
192.168.4.56:6356\> getrange x 2 3
\"cd\"
### Incr和incrby命令(自加)
![LINUXNSD_V01NOSQLDAY03_039](media/image9.png){width="5.760416666666667in"
height="2.5305555555555554in"}
192.168.4.56:6356\> set y 7
OK
192.168.4.56:6356\> incr y #自加1
(integer) 8
192.168.4.56:6356\> incr y
(integer) 9
192.168.4.56:6356\> incr y 3
(error) ERR wrong number of arguments for \'incr\' command
192.168.4.56:6356\> incrby y 3 #自加3
(integer) 12
192.168.4.56:6356\> incrby y -2
(integer) 10
### Incrbyfloat 命令(自加浮点数)
![LINUXNSD_V01NOSQLDAY03_040
2](media/image10.png){width="5.760416666666667in"
height="1.6416666666666666in"}
192.168.4.56:6356\> incrbyfloat y 0.2
\"10.2\"
192.168.4.56:6356\> get y
\"10.2\"
192.168.4.56:6356\> incrbyfloat y 0.3
\"10.5\"
### mset(批量赋值)与 mget (批量查看)命令
![LINUXNSD_V01NOSQLDAY03_040
2](media/image10.png){width="5.760416666666667in"
height="1.3291666666666666in"}
192.168.4.56:6356\> set a1 1
OK
192.168.4.56:6356\> set a2 2
OK
192.168.4.56:6356\> mget a1 a2
1\) \"1\"
2\) \"2\"
192.168.4.56:6356\> mset b1 1 b2 2 b3 3
OK
192.168.4.56:6356\> mget b1 b2 b3
1\) \"1\"
2\) \"2\"
3\) \"3\"
## 4 List列表类型
-   Redis的list是一个字符队列
-   先进后出
-   一个key可以存多个赋值
### lpush命令(列表赋值)
192.168.4.56:6356\> lpush key value \[value \...\]
192.168.4.56:6356\> lpush name a1 a2 a3 a4 a5
(integer) 5
192.168.4.56:6356\> lpush name a6 a7
(integer) 7
### lrange命令(输出列表值)
192.168.4.56:6356\> lrange key start stop
192.168.4.56:6356\> lrange name
(error) ERR wrong number of arguments for \'lrange\' command
192.168.4.56:6356\> lrange name 0 -1
1\) \"a7\"
2\) \"a6\"
3\) \"a5\"
4\) \"a4\"
5\) \"a3\"
6\) \"a2\"
7\) \"a1\"
192.168.4.56:6356\> lrange name 2 3
1\) \"a5\"
2\) \"a4\"
192.168.4.56:6356\> lrange name -2 -1
1\) \"a2\"
2\) \"a1\"
### lpop 命令(移除并返回头元素数据)
移除并返回列表头元素数据,key不存在则返回nil
192.168.4.56:6356\> lpop bame
(nil)
192.168.4.56:6356\> lpop name
\"a7\"
192.168.4.56:6356\> lrange name 0 -1
1\) \"a6\"
2\) \"a5\"
3\) \"a4\"
4\) \"a3\"
5\) \"a2\"
6\) \"a1\"
### llen 命令(返回key长度)
返回列表key的长度
192.168.4.56:6356\> llen name
(integer) 6
### lindex 命令(返回指定位置值)
返回列表中第index个值
192.168.4.56:6356\> lindex key index
192.168.4.56:6356\> lindex name 2
\"a4\"
192.168.4.56:6356\> lindex name 7
(nil)
192.168.4.56:6356\> lindex name 6
(nil)
192.168.4.56:6356\> lindex name 5
\"a1\"
192.168.4.56:6356\> lindex name 4
\"a2\"
### lset命令(修改指定位置的值)
192.168.4.56:6356\> lset key index value
将key中index位置的值修改为value
192.168.4.56:6356\> lset name 5 a111
OK
192.168.4.56:6356\> lrange name 0 -1
1\) \"a6\"
2\) \"a5\"
3\) \"a4\"
4\) \"a3\"
5\) \"a2\"
6\) \"a111\"
### rpush 命令(末尾插入值)
将value插入到key的末尾
192.168.4.56:6356\> rpush key value \[value \...\]
192.168.4.56:6356\> rpush name a7
(integer) 7
192.168.4.56:6356\> rpush name a8
(integer) 8
192.168.4.56:6356\> lrange name 0 -1
1\) \"a6\"
2\) \"a5\"
3\) \"a4\"
4\) \"a3\"
5\) \"a2\"
6\) \"a111\"
7\) \"a7\"
8\) \"a8\"
### rpop命令(删除末尾的值)
删除并返回key末尾的值
192.168.4.56:6356\> rpop key
192.168.4.56:6356\> rpop name
\"a8\"
192.168.4.56:6356\> rpop name
\"a7\"
192.168.4.56:6356\> lrange name 0 -1
1\) \"a6\"
2\) \"a5\"
3\) \"a4\"
4\) \"a3\"
5\) \"a2\"
6\) \"a111\"
## Hash表类型
Redis hash
-   是一个string类型的field(字段,列)和value(值)的映射表
-   一个key可对应多个field(列).一个field对应一个value
-   将一个对象存储为hash类型,较于每个字段都存储成string类型.更能节省内存
### hset命令(设置值)
将hash表中field值设置为value
192.168.4.56:6356\> hset key field value
例如存储一个公司信息
公司名 tarena
地址 address beijing
电话 tel 888888
法人 person hsy
注册资金 pay 100000
192.168.4.56:6356\> hset tarena address beijing
(integer) 1
192.168.4.56:6356\> hset tarena tel 888888
(integer) 1
### hget 命令(输出值)
获取hash表中field值
192.168.4.56:6356\> hget key field
192.168.4.56:6356\> hget tarena address
\"beijing\"
192.168.4.56:6356\> hget tarena tel
\"888888\"
### hmset 命令(给多个field赋值)
同时给hash表中的多个field赋值
192.168.4.56:6356\> hmset key field value \[field value \...\]
192.168.4.56:6356\> hmset tarena person hsy pay 100000
OK
### hmget命令(同时输出多个值)
返回hash表中多个field的值
192.168.4.56:6356\> hmget key field \[field \...\]
192.168.4.56:6356\> hmget tarena address tel person
1\) \"beijing\"
2\) \"888888\"
3\) \"hsy\"
### hkeys 命令(显示所有field名称)
返回hash表中所有field名称
192.168.4.56:6356\> hkeys key
192.168.4.56:6356\> hkeys tarena
1\) \"address\"
2\) \"tel\"
3\) \"person\"
4\) \"pay\"
### hgetall 命令(显示所有field及对应的值)
返回hash表中所有key名和对应的值列表
192.168.4.56:6356\> hgetall key
192.168.4.56:6356\> hgetall tarena
1\) \"address\"
2\) \"beijing\"
3\) \"tel\"
4\) \"888888\"
5\) \"person\"
6\) \"hsy\"
7\) \"pay\"
8\) \"100000
#### hvals 命令(显示key中所有的值)
返回hash表中所有key的值,不显示field
192.168.4.56:6356\> hvals key
192.168.4.56:6356\> hvals tarena
1\) \"beijing\"
2\) \"888888\"