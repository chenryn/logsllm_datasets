Nevil Johansson
98430
nevilsscore.gif
1
24
2008-05-0120:37:23
PacoJastorius
127650
pacosscore.gif
25
2008-05-01 20:37:40
Phiz Lairston
186580
phizsscore.gif
1
26
2008-05-0120:38:00
Kenny Lavitz
64930
kennysscore.gif
1
27
2008-05-0120:38:23
Jean Paul Jones
243260
jeanpaulsscore.gif
1
28
2008-05-01 21:14:56
Leddy Gee
308710
leddysscore.gif
一
29
2008-05-01 21:15:17
T-Bone Taylor
354190
tbonesscore.gif
1
31
2008-05-02 20:32:54
Biff Jeck
314340
biffsscore.gif
1
32
2008-05-0220:36:38
PezLaw
322710
pezsscore.gif
1
33
2008-05-05 14:58:59
Ethel Heckel
1000000
ethelsscore2.gif
仲载人从来没有批准
过这个分数，不过它
的approved列确实设置
BRAIN
为1.导致这个分数最
POWER
后会显示在主页上。
你认为Ethel提交的伪造分数是如何绕过仲裁人的？
你现在的位置》
331
---
## Page 368
尝试Ethel的攻击
BRAIN
BARBELL
可以看出，Ethel的百万分攻击并未对ApproveScore表单做任何手脚。
完全可以把她的破坏隔离到AddScore表单，也就是说，问题出在Add
Score表单。以下是Ethel输入到AddScore表单的具体表单数据，她就
是利用这个数据完成攻击的。在你自己的表单中输入同样的表单数据
来增加分数。你认为会发生什么？
不要忘记这里“-”后面
的空格。
Ethel Heckel
100oooo'，'ethelsscore2.gif',
1)
GuitarWars-Add YourHigh Score
GuitarWars-AddYourHigh/Score
Name:
Score:
Screen shot:ChooseFile
Add
100l
llloloc
这可以是任何小于32KB的CF或
o01010
PEG图像文件。
Lololl
ethelsscore2.gif
PDG
332
第6章
---
## Page 369
保证应用安全
她到底做了什么？
为了了解这个狡猎的表单攻击究竞做了什么，下面来跟踪表单数据流经
过AddScore脚本的全过程。
CatrWars-AddYoHgh
Ethel输入了她的高分……另
GuitarWars-AddYourHighScore
外还有一惟奇怪的东西！
Name: Cthel lecke
Sco:10o00.2.g
Sn soc CT
Add
$score=$PoST['score'];
s,]sod S[.oeu.]sod S
shot']
Score表单域中的奇怪内容
INSERT INTO guitarwars
VALUES （O,Now()，'$name'，'$score'，'$screenshot'，0)
存储在Sscote变量中，最
后这金直接放在3NSERT查
询中。
Score表单域希望收到一个数字值，如1000000，但实际上它收到了用
单引号包围的多个值，各个值之间用逗号分隔，然后在最后有一个奇
怪的双横线。确实非常奇怪。
这个奇怪的数据首先存储在scOre变量中，之后加人INSERT查询。
这只是一个没有意义的分数，是吗？或者这里是不是发生了更险恶的
事情？
Sharpenyour
penci
使用上一页显示的表单数据，写出百万分攻击的完整Add
ScoreSQL查询。要将查询中的变量替换为具体的表单数据。
增加标注说明你认为发生了什么。
你现在的位置
333
---
## Page 370
SQL注入如何工作
rben
使用上一页显示的表单数据，写出百万分攻击的完整Add
ScoreSQL查询。要将查询中的变量替换为具体的表单数据。
增加标注说明你认为发生了什么。
NSERT JNTO sitatwats
VALuES（O.NOwO.‘EthelHeckel.‘（oooooo'.‘ethelsscote2.sif.1)
'ethelsscore2.sif,0)
EthelW某种方式创建了她自己的
由于approved列是数据库结
查询，究全取代了原来的查询。
构中的最后一列，而且强
这是一个看起来很奇慢的查询。截
制值为…….得到批准！
屏图文件名出现了两次，另外我不知
道达个双连字号做什么用这个查询
D
能顺利执行吗？
用注释欺骗MySQL
让人非常奇怪的是，Ethel的百万分攻击中真正的罪魁祸首居然是SQL
注释。双连字号（--）在SQL中用于注释一行SQL代码的余下部分。
双连字号后面跟有一个空格（--）它才能起作用，不过空格之后的所
有内容都将被忽略。现在来看利用了这个小技巧的完整的Ethel查询。
一注释导致SQL代码行
的余下部分被忽略。
INSERT INTO guitarwars
VALUES (0,NOw(),'Ethel Heckel','1000000','ethelsscore2.gif
是不是更清楚了？注释有效地擦除了余下的SQL代码，这样一来就不
会生成错误，而允许Ethel的查询毫无阻碍地通过。最终结果就是立即
批准了这个新的高分，而仲裁人根本没有机会捕获。
Ethel骗过了查询，使她的分数
得到批准。
date
name
score
screenshot
POAoddo
33
2008-05-05 14:58:59
Ethel Heckel
1000000
ethelsscore2.gif
334
第6章
---
## Page 371
保证应用安全
AddScore表单遭到了SQL注入攻击
Ethel的攻击被称为一种SQL注人攻击，这里用到一种极其狡猾的手
表单域是Web应
段，使用表单数据作为一种途径来修改查询的基本操作。所以表单域
用的一个安全漏
并不只是提供一段信息，如用户名或分数，它还会扰乱SQL查询本身。
对于GuitarWars，Ethel的SQL注入使用了Score域作为手段，不仅提供
洞，因为它们允
分数，还提供了截屏图文件名和批准值，以及最后的一个注释来防止
许用户输入数据。
原SQL代码生成一个错误。
Guitar Wars-Add Your H
Score:
Screen sbot:
ethelsscore2.gif
Ethel Heckel
1000000'，'ethelsscore2.gif'，1)--
INSERT INTO guitarars
VALUES（O，NOw()，'$name'，'$score','$screenshot'，O)
theregareno
DumbQuestions
的SQL注入攻击还能起作用吗？
过它同样会将注释之后直到行末的SQL代码注释掉。SQL
还支持多行注释，与PHP的多行注释相似，也是将注释代
查询依赖于表中列的默认顺序。在查询的最后增加1之所以
码包困在/*和*/之间。
恰好能生效，其原因就在于approved是最后一列，就在
screenshot列后面。
你现在的位置
335
---
## Page 372
防范SQL注入
保护数据避免SQL注入
SQL注人所利用的漏洞是没有验证表单域中可能出现的危险字
符。“危险字符”就是任何有可能改变一个SQL查询实质的字符，
如逗号、引号或--注释字符，甚至一段数据最后的空格也可能是
有害的。利用内置PHP函数trim（）可以很容易地去除前导或末尾
空格，只需在SQL查询中加人表单数据之前先对所有表单数据运
行trim（）函数。
tzim）西数去除这个表单数
Sname = trim($_POST['name']);
据的前导或末尾空格。
$score = trim($_PoST['score']);
$screenshot = trim($_FILES['screenshot']['name']);
SQL注入可以通
过适当地处理表
不过前导和末尾空格并不是问题的全部。还可能有逗号、引号、注释
单数据来避免。
字符等很多其他字符。所以除了去除表单域中的额外空格，还需要一
种方法能够找出其他有问题的字符，并以安全的方式显示。PHP为此
提供了另一个内置函数mysqli_real_escape_string（)，它会
将可能有危险的字符进行转义，使它不能有意地影响查询的执行。这
些字符仍可以作为数据出现在表单域中，但是它们再无法干扰查询。
结合trim()和mysqli_real_escape_string（）函数，就对SQL
mysqli_eal_escape_strins()面数
注入建立了一道强有力的防线。
将有危险的字符转换为一种转
义格式，从而无法有意地影响
SQL奎询。
Sname = mysgli_real_escape_string($dbc, trim(S_PosT['name']));
$score =mysqli_real_escape_string(Sdbc,trim($_PosT['score']));
$screenshot=mysqli_real_escape_string(Sdbc, trim($_FILES['screenshot']['name′]));
mysqli_teal_escape_string(）波认为是一
个数据库西数，正因如此，需要为它
用trim（)和mysqli_real_escape_string（）函数处理3个Guitar
传入一个数据库连接变量，即提交查
过这两个函数还不够，可能还有一种方法能够让查询本身不那么脆
336第6章
---
## Page 373
保证应用安全
一个更安全的INSERT（利用参数）
除了利用了表单域的保护较弱这一漏洞，Ethel的SQL注入攻击还依赖于
可以将INSERT查
approved列恰好位于数据库结构中screenshot列的后面。正是由于
询编写为准确地
这一点，她只需要在INSERT的最后增加“1”，就能将这个“1”设置
到aPProVed列。这里的问题在于构建INSERT查询所采用的做法是必须
指定哪些值要放
向所有列插人数据，而这增加了不必要的风险。
在哪些列中。
理想情况下，我们不金设置id
和approved列，因为它们可以
有款认值。
INSERT INfo guitarwars
像这样在表中插入数据时，数据的顺序必须与表结构中列的顺序完全一
致。所以第5个数据会进人screenshot列，因为这是表的第5列。不过
实际上没有必要显式地插入id或approved列，因为id是自增的，而
approved初始时总是o。更好的办法是只插入新分数明确需要的数
据。id和aPprOVed列则可以分别默认为AUTO_INCREMENT和O。
我们需要重新构造INSERT查询，在指定数据的一个列表之前先指定列的
一个列表，各个列分别对应一个数据。这样就消除了意外设置approved
列的风险，它不再作为查询的一部分。这个查询看起来可能很熟悉，因
为我们已经在其他例子中使用过多次。
INSERT INTO guitarwars (date,name,score,screenshot)
不金向apptoved列插入
任何数据，因为它不作
为查询的一部分。
id可以省略，因为不管怎样它都
是自增的。
这个新版本的INSERT查询准确地指出了各个数据要存
储在哪个列中，从而充许你插入数据而不必担心底层
表结构。实际上，一般认为使用这种INSERT查询是一
NOW()
种更好的编码风格，这样一来数据可以准确地插入到
'$score
你希望的位置，而不再依赖于表的结构布局。
'$name
'$screenshot'
你现在的位置
337
---
## Page 374
DEFAULT命令
先等等。这是我第一次听说MySQL表中
的默认值。可能有默认值吗？
不仅可能，而且尽可能指定DEFAULT值是一种很好的想法。
利用SQLDEFAULT命令就可以为一个列指定默认值。如果一个列有
默认值，就不必再在INSERT查询中设置，而且完全可以相信它会自
动取其默认值。这对于guitarwars表中的approved列就极为合适。
现在我们只需再一次修改表，将approved的默认值设置为o（表示
未批准）。
由于apptoved列已经存在，在这个ALTERTABLE
语句中必须使用MODJFYCOLUMN而不是ADD
COLUMN.
ALTER TABLE guitarwars
DEFAULT0
7
还必须指定列的类型，要确保与
第一次增加列时的类型相同。
DEFAULT使得apptoved列自动赋为一
个值0.除非JNSERT壹询显式地将这
一一列设置为其他值。
approved列现在修改为取一个默认值，所以在AddScore脚本中，改
进的新INSERT查询可以插入高分而不必提到approved列。这是一
个很好的设计，因为没有必要显式插入一个可以默认的值，而且由于
没有暴露approved列而招致可能的攻击，因此还额外增加了一点安
全性。
338
第6章
---
## Page 375
保证应用安全
表单验证再聪明也不为过
要最小化SQL注人攻击的风险，最后一步需要在AddScore脚本中加入
表单验证。查看截屏图文件类型或截屏图文件大小是否在应用定义的
限制范围内之前，需要检查3个AddScore表单域来确保它们非空。
if (!empty($name)&& !empty($score)&& !empty($screenshot)){
这条i语句检壹所有表单域来
确定它们都非室。
这个代码本身并没有任何问题，不过要保证一个应用的安全，这样一
个调用通常远远不够。由于Score域需要一个数字，所以合理的做法是
不只是检查值非空，还要检查这是一个数字值。PHPis_numeric（)
函数就可以完成这个工作，如果传入的值是一个数字则返回true，否
则返回false。坚持一贯地做这种小工作，比如需要一个数字时就检
查它是否是一个数字，最后会让你的应用尽可能安全而免受数据攻击。
is_numeric(465730)
True或salse取决于用户
is_numeric('one million!')
在Score域中是否输入一
True!
个数字。
7
False!
is_numeric(0)
is_numeric($score)
尽可能保证表单数据采用
你要求的格式。
重写AddScore表单验证的if语句，使用isnumeric（）函数从而只允许为分数输人数
ExeRciSe
字值。
你现在的位置
339
---
## Page 376
测试新的addscore.php
重写AddScore表单验证的if语句，使用isnumeric（）函数从而只允许为分数输人数
xeRciSe
字值。
SOLUtiON
it(empty（Sname)&&is_numetic(Sscote)&&empty（Sscreenshot)）(
运行测试
增强AddScore脚本中对表单数据的处理。
addscore.php脚本中将表单数据赋值到变量，需要对这些赋值进行调整，使用trim（）
和mysqli_real_escape_string（)函数清理表单数据。然后修改INSERT查询，同时
指定列名和值，而不再需要为id和approved列提供值。另外修改验证表单域的if语句，
检查分数确保它们确实是数字值。
最后，使用一个MySQL工具运行ALTER查询将aPproved列默认设置为O。
将这个新的AddScore脚本上传到你的Web服务器，在Web浏览器中导航到这个脚本，然后
再次尝试这个SQL注人攻击。
当然，这个错误消息可以
更有针对性，不过它也能
达到目的，而且无需在脚
GuitarWars-AddYourHighScore