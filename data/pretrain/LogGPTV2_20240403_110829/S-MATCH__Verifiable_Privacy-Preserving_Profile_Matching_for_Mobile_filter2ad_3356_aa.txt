title:S-MATCH: Verifiable Privacy-Preserving Profile Matching for Mobile
Social Services
author:Xiaojing Liao and
A. Selcuk Uluagac and
Raheem A. Beyah
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
S-MATCH: Veriﬁable Privacy-preserving Proﬁle
Matching for Mobile Social Services
Xiaojing Liao†, Selcuk Uluagac‡, Raheem A. Beyah†
†School of Electrical and Computer Engineering, Georgia Institute of Technology
‡Department of Electrical and Computer Engineering, Florida International University
†PI:EMAIL, ‡suluagac@ﬁu.edu, †PI:EMAIL
Abstract—Mobile social services utilize proﬁle matching to help
users ﬁnd friends with similar social attributes (e.g., interests,
location, background). However, privacy concerns often hinder
users from enabling this functionality. In this paper, we introduce
S-MATCH, a novel
framework for privacy-preserving proﬁle
matching based on property-preserving encryption (PPE). First,
we illustrate that PPE should not be considered secure when
directly used on social attribute data due to its key-sharing
problem and information leakage problem. Then, we address
the aforementioned problems of applying PPE to social network
data and develop an efﬁcient and veriﬁable privacy-preserving
proﬁle matching scheme. We implement both the client and
server portions of S-MATCH and evaluate its performance
under three real-world social network datasets. The results show
that S-MATCH can achieve at least one order of magnitude
better computational performance than the techniques that use
homomorphic encryption.
Keywords-proﬁle matching; privacy; property-preserving en-
cryption; symmetric encryption;
I. INTRODUCTION
With the explosive growth of social networks and mobile
devices, mobile social service has become a popular method
among traditional online social network users to build social
relationships and to share interests. For instance, Groupon,
Yelp, Wechat are among the most popular mobile social
services in the market, through which users can share their lo-
cation information, share their interests, and chat with friends
nearby. To build social relationships and share interests, proﬁle
matching is a fundamental and signiﬁcant step for mobile
social services. During the proﬁle matching process, users’
social proﬁles are compared in an outsourced server owned by
social network application providers to ﬁnd other users with
similar social attributes (e.g., interests, location, background)
in the social networks. An effective proﬁle matching process
beneﬁts users and social network providers alike. Users enjoy
a more pleasant experience while social network providers see
increased user activities in their social networks.
However, social proﬁle attributes used in the proﬁle match-
ing process include sensitive information about users. For
instance, even though the ‘public’ attributes such as an Interest
(or ‘Like’) in Facebook are regarded as harmless, they can
reveal some basic ‘private’ social attributes (e.g., age, health
condition, or religion [1]). In mobile social services, the viola-
tion of the privacy of the users’ social proﬁles can pose serious
problems. Using social proﬁle information, attackers can ﬂood
users with unwanted advertisements [2] or easily crack weak
user passwords [3]. Hence,
the privacy concerns must be
addressed when developing proﬁle matching techniques for
mobile social networks [4], [5]. In addition to security, clients
of mobile social networks run on resource-constrained mobile
devices. Therefore, a privacy-preserving and power-efﬁcient
proﬁle matching scheme is needed for mobile social services.
To preserve the privacy of the proﬁle matching computation,
homomorphic encryption [6], [7] has been widely used for
privacy-preserving proﬁle matching [8]–[12]. In homomorphic
encryption, certain types of computations are allowed on
ciphertext and the computation results retain some relationship
among plaintexts. For instance, in homoPM [8], after users
encrypt plaintexts, which are blinded by a random number
δ, with homomorphic encryption and upload the ciphertexts
onto the server of the mobile social networks,
the server
can conduct some computations (e.g., modular multiplication)
on the ciphertexts and obtain the comparison relationship
among plaintexts. However, while functional, homomorphic
encryption is not practical for mobile social services because
of the two following reasons: First, homomorphic encryption
is computationally intensive and slow. Second, the schemes
based only on homomorphic encryption faces the result veri-
ﬁcation problem that fake proﬁle matching results can be sent
to the querying user from the server without being detected.
A better candidate for the privacy-preserving proﬁle match-
ing process for mobile social services is property-preserving
encryption (PPE). A naive approach utilizing PPE [13] to
match the proﬁle secretly is that each user encrypts their
social attributes with the PPE separately and sends all of the
encrypted attributes to the server. As the ciphtexts preserve
some information of the plaintexts such as relative distance and
order between the plaintexts in PPE, comparison operations on
the ciphertexts are possible. Therefore, the untrusted server
is able to process the proﬁle matching algorithms based
on comparison operations without knowing the plaintexts.
However, as we analyze in Section IV, PPE can cause high
information leakage if it is directly used on low entropy social
attribute data, and the secret proﬁle attribute values can be
deciphered. Also, to guarantee the property such as relative
distance and order among all the ciphertexts, the plaintexts
should be encrypted by the same key. However, it is not
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.37
DOI 10.1109/DSN.2014.37
DOI 10.1109/DSN.2014.37
287
287
287
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
practical for all the users share the same secret key. Because
when a malicious user colludes with the untrusted server, all
the data face the threat of plaintext recovery.
In this paper, we propose S-MATCH, a privacy-preserving
proﬁle matching technique for mobile social services in which
the privacy-preserving operations are achieved utilizing PPE.
The main contributions are summarized as follows:
• We show the challenges of using PPE directly on so-
cial attribute data for proﬁle matching. Speciﬁcally, we
highlight the key-sharing problem and the information
leakage problem by analyzing the entropy of three real-
world datasets.
• We address the information leakage problem by providing
a technique to increase the entropy of the user proﬁles
so that PPE can be used in our privacy-preserving proﬁle
matching scheme. Also, we present a key generation pro-
tocol for users, which addresses the key-sharing problem.
• We present a veriﬁcation protocol for users to verify the
proﬁle matching results, but learn nothing about other
users’ proﬁle attributes.
• We show the provable security of S-MATCH, which indi-
cates that S-MATCH is protected from plaintext recovery
under ordered known plaintext attack and known key
attack (i.e., PR-OKPA and PR-KK).
• We demonstrate a prototype implementation of S-
MATCH with an application on an Android-based mobile
testbed and evaluate its performance using three real-
world datasets. Our results indicate the efﬁciency and
validity of our scheme.
This paper proceeds as follows. We discuss the related work
in Section II. In Section III, we describe the cryptographic
primitives in this work. We present the challenges of using
PPE for privacy-preserving proﬁle matching in Section IV. In
Section V, we show the problem formulation. In Section VI,
our approach is described in detail. Section VII presents the
security analysis of S-MATCH. In Section IX, our scheme
is evaluated using real-world datasets and compared with
a representative scheme based on homomorphic encryption.
Finally, in Section X, the conclusion and future work are
presented.
II. RELATED WORK
Private Proﬁle Matching. Proﬁle matching is critical for
social networks. Recently, Zhang et al. [14] improved the
performance of the earlier proﬁle matching schemes by in-
troducing the symmetric cryptosystem to conduct operations.
Also, the scheme they proposed is veriﬁable. However, the
scheme is designed in the two-party matching scenario, which
introduce large communication cost when extended to a
proﬁle matching scheme in large scale. In [9], a privacy-
preserving personal proﬁle matching scheme was proposed,
where minimal information about the users’ social attribute
is exchanged. In [10], Arb et al. proposed a mobile social
networking platform called VENETA to secretly detect friends
of friends. In [11], Wang et al. proposed a secure and privacy-
preserving social networks group matching scheme Gmatch.
In [15], Nagy et al. developed an efﬁcient friend-ﬁnder ap-
plication. However, all of these schemes are attribute-level
proﬁle matching based on Private Set Intersection [16], [17],
which means that they are not able to differentiate users with
different attribute values. Zhang et al. [8] proposed a ﬁne-
grained proﬁle matching protocol to differentiate users with
different attribute values. Li et al. [12] improved the scheme
in [8] by introducing a novel blind vector transformation
technique to protect the proﬁle matching process against the
runaway attack. These proﬁle matching schemes are conducted
through homomorphic encryption [6], [7] such as Paillier’s
cryptosystem [18]. However,
the privacy-preserving proﬁle
matching schemes only based on homomorphic encryption are
too computationally expensive for mobile devices and are not
veriﬁable. Table I shows the difference of our paper from the
previous works. The category of the schemes includes sym-
metric encryption (SE) and homomorphic encryption (HE).
Security of the schemes includes malicious model (M) and
honest-but-curious model (HBC). Veriﬁcation means that the
proﬁle matching results from the server are veriﬁable. Fine-
grained match means that the proﬁle matching is processed on
the attribute-value-level, compared to the attribute-level. And
fuzzy match means that the proﬁle matching results include not
only the perfect matching result but also the top-k matching
results. As illustrated by Table I, S-MATCH is the most full-
featured and efﬁcient scheme.
Security of OPE. Motivated by the ﬁrst OPE scheme
proposed by Agrawal et al. [19], Boldyreva [20] initiated the
cryptographic study of OPE and ﬁrst present the security goal
of OPE, i.e., releasing nothing but order (indistinguishability
under ordered chosen plaintext attack (IND-OCPA)). In [20],
Boldyreva et al. indicated that IND-OCPA cannot be achieved.
They proved that the OPE scheme they proposed was POPF-
CCA secure (i.e., pseudorandom order-preserving function un-
der chosen-ciphertext attack), which means that the adversary
cannot distinguish the OPE scheme from the random order
A COMPARISON OF RELATED WORKS WITH OUR S-MATCH.
TABLE I
Category
Security
Veriﬁcation
Fine-grained Match
Fuzzy Match
S-MATCH
ZLL13 [14]
SE
M/HBC
SE
M/HBC
!
!
!
!
%
!
ZZS12 [8]
HE
HBC
%
!
!
LCY11 [9]
HE
HBC
%
%
%
NCD13 [15]
HE
HBC
%
%
%
LGD12 [12]
HE
HBC
%
!
!
288288288
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
preserving function. mOPE proposed by Popa et al. [21] was
the ﬁrst OPE scheme to achieve IND-OCPA. However, mOPE
is an interactive scheme, which is not suitable for the privacy-
preserving proﬁle matching scenario in our work.
III. CRYPTOGRAPHIC PRIMITIVES
PPE. A deterministic property-preserving encryption (PPE)
is a tuple P P E = (Keygen, Enc, Dec). In PPE, the ci-
phertexts preserve the property P of a set of plaintexts M
such as distance or order. To encrypt a set of plaintexts
{mi : mi ∈ M}, the user generates a PPE key K
$← Keygen
and the ciphertexts {ci ← Enc(K, mi) : mi ∈ M}. The
property P which the ciphertexts preserve is formally deﬁned
as follows:
Deﬁnition 1: P P E is an encryption scheme, which has
property P with parameters of ﬁxed number k and a publicly
computable algorithm Test, such that
Test(c1, . . . , ck) = P (m1, . . . , mk)
where ci is the ciphertext of the plaintext mi, i ∈ {1, . . . , k}.
Order-preserving symmetric encryption (OPE) [19]–[21] is
an example of a PPE with the property of order and k = 2.
OPE, which was ﬁrst proposed by Agrawal et al. [19], pre-
serves the order of plaintexts and allows any comparison oper-
ations to be applied on ciphertexts. Given plaintexts mi, mj,
corresponding ciphertexts ci, cj satisfy the relationship that
mi ≥ mj ⇒ ci ≥ cj. Distance-preserving encryption (DPE)
proposed by Ozsoyoglu et al. [22] is an another example
of a PPE scheme. DPE preserves the distance of the two
numeric data after encryption such that for any three values
mi, mj, mk, |mi−mj| ≥ |mj−mk| ⇒ |ci−cj| ≥ |cj−ck| and
k = 3. PPE techniques are widely used in database indexes
over encrypted tables [19], identifying similarities on sensitive
data [23], and spam-email detection [24].
OPRF. An oblivious pseudo-random function scheme is a
tuple OP RF = (Keygen, F ). In OPRF, the user is able to
obtain a pseudo-random number r, but the random number
generator learns nothing about
the user input m and the
pseudo-random number r. To generate the pseudo-random
number r, a public key and a secret key are generated
$← Keygen, where the random number generator
(pk, sk)
owns the secret key sk and the users utilize public key pk. An
OPRF is an interactive protocol, and a pseudo-random number
r ← F (sk, m) is generated on the user side after a round of
secure communication with the random number generator.
RSA-OPRF is an example of an OPRF. The key generation
function utilizes RSA key generation results ((N, e), (N, d)),
where ed ≡ 1 mod φ(N ) and outputs (N, d) as the public-
secret key pair. A pseudo-random number r is generated by
ﬁrst hashing the input m and encoding it as x = h(m) ·
se mod N, where s is a random number and h() is a
hash function. After interacting with the random number
generator and obtaining y = xd mod N, the user outputs
−1 mod N ) as the pseudo-random number, where
(cid:2)
r = h
(cid:2)
h
() is another hash function.
(y · s
IV. CHALLENGES OF USING PPE FOR PRIVATE PROFILE
MATCHING
In this section, we ﬁrst present the key sharing problem and
the information leakage problem of PPE, which is exacerbated
when the message space is small. Then, we indicate that the
social networks data have low entropy and landmark attributes
by analyzing three real-world social networks datasets. Finally,
we conclude PPE cannot be directly used to encrypt social
networks data.
A. Key Sharing in PPE
Similar to the homomorphic encryption, the ciphertexts can
only preserve the property of the plaintexts if the plaintexts
are encrypted by the same property-preserving key in PPE.
Even though there is not an all-accessible public key like that
in homomorphic encryption, sharing of the same property-
preserving secret key among all users in PPE is still unaccept-
able and not practical. In the worst case, when an honest-but-
curious user colludes with the untrusted server, all the users’
data will be leaked. Hence, the key sharing problem should be
addressed, when PPE is utilized for privacy-preserving proﬁle
matching.
B. Information Leakage of PPE
In PPE, ciphertexts leak the property information associated
with the plaintexts, which makes it vulnerable when the
number of the plaintexts is limited. For example, in OPE, an
attacker can learn the order of the plaintext from the cipher-
text, making a chosen-ciphertext attack signiﬁcantly easier.
Furthermore, when the number of the plaintexts encrypted by
OPE is small, the vulnerability is exacerbated. Assume that
there is an untrusted server with n pairs of known plaintexts
and ciphertexts along with the set of ciphertexts it stored.
Given a plaintext pi, the untrusted server can recover ci from
the decryption D(ci, k) using the known plaintext-ciphertext
pairs and by analyzing the property, where D(ci, k) is the
decryption of the PPE with ciphertext ci and key k.
We illustrate this with a simple example shown in Figure 1
assuming that an OPE scheme is utilized. In our illustration,
an untrusted server tries to obtain the ciphertext of 5 using
the known ciphertext-plaintext (ci, pi) pairs of (30, 3) and
(70, 7). As the ciphertexts stored in the untrusted server are
derived from the OPE scheme, the order relationships among
the ciphertexts can be easily obtained by the server. Then, the
untrusted server is able to prune the search space to ﬁnd the
ciphertext of 5 by analyzing the property of the ciphertext
values (e.g., order). With ciphertext-plaintext pairs ((30, 3)
and (70, 7), the server can infer that the ciphertext of 5 is
between 30 and 70. As a result, the size of the search space
is 3 (Figure 1(a)). However, the search space is larger, 39,
for a conﬁguration with more entries as shown in Figure 1(b).
Hence, when the number of plaintexts is small, the time to
break the ciphertext and obtain the corresponding plaintexts is
shorter than that when the number of plaintext values is large.
289289289
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:17)
(cid:17)
(cid:17)
(cid:28)
(cid:50)(cid:51)(cid:40)
(cid:20)(cid:19)
(cid:21)(cid:19)
(cid:22)(cid:19)
(cid:23)(cid:19)
(cid:24)(cid:19)
(cid:25)(cid:19)
(cid:26)(cid:19)
(cid:17)
(cid:17)
(cid:17)
(cid:28)(cid:19)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:17)
(cid:17)
(cid:17)
(cid:28)
Property
Analysis
(cid:3)(cid:11)(cid:22)(cid:19)(cid:15)(cid:3)(cid:22)(cid:12)
(cid:3)(cid:11)(cid:26)(cid:19)(cid:15)(cid:3)(cid:26)(cid:12)
(cid:20)(cid:19)
(cid:21)(cid:19)
(cid:22)(cid:19)
(cid:23)(cid:19)
(cid:24)(cid:19)
(cid:25)(cid:19)
(cid:26)(cid:19)
(cid:17)
(cid:17)
(cid:17)
(cid:28)(cid:19)
(cid:20)
(cid:21)
(cid:22)
(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:26)(cid:26)(cid:26)(cid:26)(cid:26)(cid:26)(cid:26)