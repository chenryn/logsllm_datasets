establishing thresholds and defining control policy. 
As  long  as  the  distances  are  less  than  the  epsilon 
radius, 
is  normal.  
Administrators  may  choose  to  label  distances  slightly 
greater  than  the  epsilon  normal  also,  because  they  are 
nearly  normal.   A threshold  distance can be established 
which  separates  normal  and  allowed  behavior  from 
abnormal behavior.  Enforcing normal behavior requires 
that abnormal behavior be stopped. 
The threshold value is a variable under the control of 
the  administrator.    In  periods  of  heightened  threat,  the 
threshold  can  be  lowered  for  more  rigid  behavioral 
control.  In periods of reduced threat, the threshold can 
be  raised,  creating  a  less  restrictive,  but  less  secure, 
behavioral environment for the program. 
5.7. Policy 
in 
addition to the behavioral information.  After calculating 
the distance the tag information becomes very useful.  If 
the distance for a profile is over the anomaly threshold, 
the  behavior  may  need  to  be  stopped.    If  the  tag  is  a 
process  ID,  the  process  can  be  stopped  or  killed  by 
sending it a signal.  If the tag is a socket's file descriptor, 
shutdown(2) can be called to close the socket.  If the 
tag is a source IP address, incoming packets from that IP 
can be ignored in a number of ways. 
Each  profile  contains 
the  behavior  of 
the  program 
information 
tagging 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply. 
The actions taken in response to anomalous behavior 
are  determined  by  a  variety  of  factors.    For  critical 
programs or servers, the responses chosen will probably 
be  draconian.    The  responses  are  controlled  by  the 
administrator.  The  behavioral  measurement  techniques 
we  have  developed  address  the  question  of  where  and 
when to take action. 
This  approach  can  spot  and  stop  attacks  that  share 
two  key characteristics.  First, the attack  must effect  the 
execution of the program.  Second, the attacked program 
must generate enough behavior to fill more than a single 
profile.  If an attack can completely express itself in less 
than  a  single  profile,  our  approach  will  spot  the 
abnormality and the cause, but will not be able to prevent 
computer connected to the Internet.   We then published 
the  URL  for  the  machine  to  various  sites  to  attract  the 
attention  of  crackers  to  the  machine.    As  additional 
incentive  we  published  the  fact  that  we  would  ship  the 
computer to the first person who succeeded in rooting the 
operating  system  on  this  computer.    The  challenge 
provided intensive interest from a number of commercial 
organization and individual crackers.   
To  prepare  victim  for  its  role  as  a  web  server,  we 
generated  an  "Everything" 
install  of  RedHat  6.2;  
installed Watcher kernel plug-in  with the 2.2.18 kernel; 
put a test web site on victim;  requested pages from the 
test  web  site;    turned  on  nearly  every  service  listed  in 
inetd.conf;  set up cron jobs to restart services that 
1
1 0
1 9
2 8
3 7
4 6
5 5
6 4
7 3
8 2
9 1
1 0 0
1
0 .8
0 .6
0 .4
0 .2
0
Figure 2. Nominal Behavior of Linux Kernel 
attacks 
that 
can 
of 
completely 
the  attack.    However,  we  have  yet  to  observe  any 
successful 
express 
themselves in a single profile. 
If an attack is simply ignored by the program, then 
its behavior is not likely to be effected.  If an attack does 
not require that the execution of a program be changed, 
then  behavioral  analysis  is  unlikely  to  spot  it.    For 
example,  ftpd  does  not  behave  differently  when 
downloading  /etc/passwd  as  opposed  to  any  other 
file,  say,/tmp/harmless.  Other  security  techniques 
address 
but 
programmatically  allowed  behavior.    Access  Control 
Lists (ACLs) seem to be the  most powerful  method for 
addressing this class of security problem. 
6. Experimental Results:  Victim 
For  experimental  purposes,  we  have  chosen  to 
demonstrate the capabilities presented through execution 
behavioral  measurement  and  control  by  connecting  a 
highly  vulnerable  version  of  the  Linux  kernel  on  a 
unauthorized 
problem 
the 
get killed;  set up cron jobs to build log summary files; 
and  set up a cron job to force httpd and inetd to be 
restarted.    While  other  security  systems  rely  on  either 
specific  or  general  knowledge  about  attacks,  our 
approach is very different.  We calibrated the system for 
its  normal  behavior  as  a  web  server  and  also  some 
standard  system  administration  activity  are  what 
constitute normal behavior.  The behavior of the system 
was  compared 
the  behavior 
expressed by the baseline.  
  Watcher  was  the  only  security  control  on  victim.  
Victim  demonstrated  that  this  technology  is  not  only 
viable, but directly applicable when it comes to rejecting 
intrusion attempts.  The victim challenge was equivalent 
to  parking  a  car  in  New  York  city  with  the  keys  in  it, 
windows rolled down the doors unlocked and open, and 
the car running with a sign on it saying "Steal Me", and 
an  ad  in  the  paper  saying  where  the  car  is  and  to  how 
steal  it.    In  our  security  metaphor,  when  an  attempt  is 
made  to  steal  this  car  (trash  victim)  the  car  simply 
vanishes  from  their  sight.    The  security  vulnerabilities 
real-time  against 
in 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply. 
100% 
100% 
100% 
Attack   
Rejection rate 
Port Scans 
Buffer Overflows  
are not the problem.  Dealing effectively with the assault 
is the solution. 
Anomalous and  normal behaviors are a function of 
the role a system has been deployed in.  For victim, the 
normal behavior is serving web pages.  Additionally, it is 
normal  for  system  administrator  to  be  tailing  log  files, 
and  building  the  auto-generated  portions  of  the  victim 
site.  That is essentially the extent of "normal" behavior. 
Abnormal  behavior  is  anything  else.    The  difference 
between  normal  and  abnormal  is  not  a  bold  black  line 
though.    What  is  really  of  interest  is  the  difference 
between  normal  behavior,  and  the  behavior  currently 
occurring.    This  is  where  the  behavioral  measurement 
aspect  of  our  approach  applies. 
  Thresholds  are 
established  on  the  allowed  difference  from  normal; 
anything over the thresholds is stopped.  For victim these 
were clearly set thresholds rather low. 
There  have  now  been  several  thousand  assaults  on 
the victim machine.  The results of this experiment look 
like this: 
  Worms   
Within the domain of behavior control and vulnerability 
exploits, the software on victim can easily manage 100% 
of the misuses to which it has been subjected to date. 
7. Summary 
  While  the  existing  paradigms  of  computer  security 
are  still  very  useful  and  serve  perfectly  well  in  their 
capacities,  there  has  existed  a  gap  in  the  computer 
security  space.    Our  technology  and  approach  fills  that 
gap  by  providing  procedural  based  intrusion  detection 
and  response.    We  suggest  that  this  gives  Watcher  the 
unique ability to detect and halt completely novel attacks 
that  have  yet  to  be  seen  on  the  Internet,  and  better  yet, 
we  have  the  ability  to  protect  the  first  person  to  see  a 
new attack or exploit.  No one needs to be sacrificed to 
the new virus or worm anymore. 
In  essence,  we  have  learned  to  solve  the  right 
problem.      Removing  all  software  vulnerabilities  is 
clearly an unsolvable problem.  Providing restrictive and 
onerous  barriers  to  software  use  makes  the  software 
uncomfortable  and  difficult  to  use.    Monitoring  and 
controlling  program  execution  at  run  time  through 
behavioral  control  is  the  missing  piece  in  the  security 
puzzle.    The  complete  puzzle  has  three  pieces;  data 
control  (encryption),  access  control,  and  behavioral 
control. 
8. References 
[1] J. Alves-Foss, D. Frincke and J. Munson. Measuring 
Security:  A  Methodological  Approach,  International 
Workshop  on  Enterprise  Security,  Stanford,  CA,  June 
1996.  
[2]  D.  Anderson,  T.  Frivold  and  A.  Valdez:  Next-
generation  intrusion  detection  expert  system  (NIDES). 
Technical  Report,  Computer  Science  Laboratory,  SRI 
International,  Menlo  Park,  CA,  SRI-CSL-95-07,  May 
1995. 
[3]  M.  Bishop:  A  Taxonomy  of  UNIX  and  Network 
Security  Vulnerabilities,"  M.  Bishop,  Technical  Report 
95-10,  Department  of  Computer  Science,  University  of 
California at Davis, May 1995.  
[4]  D.  Denning:  An  intrusion-detection  model.  IEEE 
Transactions  on  Software  Engineering,  Vol.13,  No:2, 
pp.222-232, February 1987. 
[5] S. G. Elbaum and J. C. Munson, "Intrusion Detection 
through  Dynamic  Software  Measurement", Proceedings 
of  the  USENIX  Workshop  on  Intrusion  Detection  and 
Network Monitoring , Santa Clara, CA, April 1999. 
[6] A.K. Ghosh, C. Michael and M. Schatz:  A real-time 
intrusion  detection  system  based  on  learning  program 
behavior,  Proceedings  of 
International 
Workshop,  RAID  2000  ,  Springer-Verlag,  Toulouse, 
France, pp. 93-109, October 2000. 
[7]  A.  K.  Ghosh,  A.  Schwartzbard  and  M.  Schatz:  
Learning  program  behavior  profiles 
intrusion 
detection.    Proceeding  of  the  USENIX  Workshop  on 
Intrusion  Detection  and  Network  Monitoring,  Santa 
Clara, CA, April 1999.  
[8] L. R. Halme and R. K. Bauer: AINT misbehaving - a 
taxonomy of anti-intrusion techniques. Proc. of the 18th 
National  Information  Systems  Security  Conference,  pp. 
163-172, October 1995.  
[9] J. Hochberg, K. Jackson, C. Stallings, J. F. McClary, 
D.  DuBois  and  J.  Ford:  NADIR:  An  automated  system 
for  detecting  network  intrusion  and  misuse.  Computers 
& Security, Vol.12, No:3, pp.235-248, May 1993.  
[10] H. S. Javitz and A. Valdes: The SRI IDES statistical 
anomaly  detector.  Proc.  of  the  IEEE  Symposium  on 
Research  in  Security  and  Privacy,  pp.316-326,  May 
1991.  
theThird 
for 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply. 
[11]  A.  P.  Kosoresow  and  S.  A.  Hofmeyr,  "Intrusion 
Detection  via  System  Call  Traces",  IEEE  Software, 
Septemeber/October 1997, pp. 35-42. 
[12]  S.  Kumar  and  E.  H.  Spafford:  A  pattern  matching 
model  for  misuse  intrusion  detection.  Proc.  of  the  17th 
National  Computer  Security  Conference,  pp.  11-21, 
October 1994.  
[13]  S.  Kumar  and  E.  H.  Spafford:  A  Software 
Architecture  to  Support  Misuse  Intrusion  Detection, 
Proc.  18th  National  Information  Systems  Security 
Conference, pp.194-204, 1995. 
[14]  The  Linux  Kernel 
http://sourceforge.net/projects/kip/ 
[15]  J.  C.  Munson,  “A  Software  Blackbox  Recorder.” 
Proceedings  of  the  1996  IEEE  Aerospace  Applications 
Instrumentation  Project, 
IEEE  Computer  Society  Press,  Los 
Conference, 
Alamitos, CA, November, pp. 309-320, 1996. 
[16]  A.  P.  Porras  and  G.  P.  Neumann:  EMERALD: 
Event  Monitoring  Enabling  Responses  to  Anomalous 
Live  Disturbances.  National 
Information  Systems 
Security Conference, 1997. 
[17]  M.  Sobirey,  Richter  and  H.  Konig.  The  intrusion 
detection  system  AID.  Architecture,  and  experiences  in 
automated  audit  analysis.  Proc.  of  the  International 
Conference  on  Communications  and  Multimedia 
Security, pp. 278-290, September 1996.  
[18]  C.  Warrender,  S.  Forrest,  and  B.  Pearlmutter:  
Detecting intrusions using system calls:  alternative data 
models, IEEE Symposium on Security and Privacy, IEEE 
Computer Society Press, pp. 133-145, 1999. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:32 UTC from IEEE Xplore.  Restrictions apply.