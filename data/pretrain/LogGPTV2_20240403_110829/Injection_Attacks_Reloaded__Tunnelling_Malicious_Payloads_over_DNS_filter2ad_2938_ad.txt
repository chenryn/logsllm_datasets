main name is decoded from DNS line format into a (zero-
terminated) string; (3) domain name is validated. We explain
these steps next.
DNS decompression and decoding into a string. These
two steps are typically done simultaneously in one func-
tion, e.g., dn_expand for glibc, or __decode_dotted for uClibc.
When decoding a domain name into a string, the resolver must
ensure that the characters which cannot be represented in an
ASCII string, must be escaped appropriately [RFC4343] [18].
This also applies to zero-bytes (which would otherwise be in-
terpreted as string terminators) and period characters (which
would otherwise be interpreted as label-separators). Escap-
ing values outside the range of 0x21 ("!") to 0x7E ("~") is
required by [18].
In our example in Figure 7 this means that to avoid con-
fusion with label separators the second byte (0x3e) of the
ﬁrst label must be expressed as "\." instead of ".". The ﬁnal
decoded domain name is then "a\.b.<>.com." if decoded
correctly applying escaping to non-printable characters, or
"a.b.<>.com." if decoded incorrectly when escaping is not
applied.
Our analysis shows that glibc applies escaping to the de-
coded domain name, while uClibc does not. This means that
any record which contains zero-bytes or dots inside labels
will be misinterpreted during decoding when processed by
uClibc and other non-printable characters will be included in
the returned string unescaped. Such incorrect decoding logic
can allow cache-injection attacks when the misinterpreted
record for the domain a.b.<>.com. is cached and re-used in
another context, as we show in Section 3.2.
Domain name validation. After the record has been de-
coded, it should be validated to check that it represents a
valid hostname. The POSIX standard deﬁnes getnameinfo()
to return ‘hostnames’, not ‘domain names’. Notice that do-
main names are deﬁned in [RFC1034, RFC2181] [22, 30] as
a list of binary labels that can contain any value. The only
limitation over domain names is on the length of the name
4The GNU’s project implementation of the C standard Library
5The Linux standard library for mobile and embedded devices.
3174    30th USENIX Security Symposium
USENIX Association
Figure 7: DNS record processing.
[RFC2181] [22]: 63 octets per component, 255 octets for a
domain name. Values like, brackets ([, ]), colons, NULs
(\000), newlines, backslashes, and so on are all legal. In
contrast, hostnames are only allowed to contain alphanu-
meric characters ("A-Z","a-z","0-9"), hyphens ("-") and
dots (".") to separate labels, as deﬁned in [RFC952] [16],
this speciﬁcation is referenced by newer standards [RFC1123,
RFC2181, RFC3492] [17, 22, 31]. As a result the system li-
brary should validate that all the returned values represent
valid hostnames, not domains. Our evaluation shows that most
stub resolvers use a naive domain name decoding logic which
misinterprets "\." for "." and "\000" as a string delimiter;
we show how to exploit this for cache poisoning attacks in
Section 3.2.
In our example in Figure 7 step 2, we assume that the
library has decoded the domain name correctly, hence the
value a\.b.<>.com. is passed on to the validation step. Based
on the logic that the POSIX standard deﬁnes the return value
of gethostbyname() as a hostname the library should ensure
that the hostname does not contain invalid characters, and if it
ﬁnds any, it should signal an error to the application. If this is
not done, the string a\.b.<>.com. is passed to the application
unchanged and exposes to a range of vulnerabilities as shown
in Sections 3.6. Again we review the functions in glibc and
uClibc and ﬁnd that only glibc implements this validation
correctly, uClibc does not validate the decoded domain name
at all.
Notice that the steps 1-3 are always needed to transform
a domain name from its line format to a (zero-terminated)
ASCII string. An implementation might choose to switch the
order of steps 2 (decoding) and 3 (validation), or combine
these steps into one, but this does not change the fact that
both steps are needed to correctly implement parsing of a
line-format domain names into a hostname string. Therefore,
our analysis of glibc and uClibc can be extended to other
resolver implementations. We validated this assumption ex-
perimentally and via code review in popular system resolver
implementations, and summarise the results in Table 5. Our
results indicate that most stub resolvers do not check that
domain names constitute valid hostnames. The other libc im-
plementations, such as dietlibc and windows, all result in the
same incorrectly processed output. We show how to exploit
Figure 8: Attack ﬂow against OpenWRT.
lack of validation to attack applications which do not expect
special characters inside hostnames, launching different in-
jection attacks, such as XSS or ANSI terminal escape code
injection.
3.6.2 Attacks Against Administrative Utilities
We demonstrate attacks against two vulnerable example
applications from different contexts: Windows 10’s ping as
an example of an simple command-line utility and OpenWRT
LuCi as an example of a integrated web-based administration
interface.
• Attack #1: Windows ping. Ping shows the CNAME
alias of the ping-ed host without checking the alias for disal-
lowed characters. We use this to inject arbitrary bytes into the
output of ping, which is then displayed by the terminal. By
including ANSI terminal escape codes in the CNAME record,
an attacker controlling the DNS response can manipulate
the terminal output by moving the cursor, replacing already
printed data or changing the Window title6.
We tested a similar attack against linux ping, traceroute
and openssh. Different than windows ping, these applications
query the reverse PTR record of the remote address. We found
that none of the applications perform input validation of the
returned domain name and therefore allow the same kind of
attack.
• Attack #2: Cross-site scripting (XSS) attack in Open-
WRT LuCi. OpenWRT is an aftermarket operating system
for residential-gateway routers based on linux. It uses uClibc
as its standard C library. This means that any application
included in OpenWRT which does not check CNAME or
reverse-DNS responses itself is vulnerable to our attacks. We
explore the web-based LuCi [34] administration interface
which can be used to conﬁgure all of a router’s settings via a
web-browser.
Apart from letting the user change the router’s settings,
LuCi also contains a status page listing all currently ac-
tive connections through the router at /cgi-bin/luci/admin/
status/realtime/connections. When a user opens this page,
LuCi performs reverse-DNS lookups for all IP addresses cur-
rently connected to or through the router. The attacker abuses
this to trigger reverse queries for its own IP addresses in the
6Terminal-escape injection vulnerabilities were found in applications like
web-servers [32, 33], however they were exploitable via direct input over
HTTP.
USENIX Association
30th USENIX Security Symposium    3175
SystemerrorBad: Do novalidationa\.b.<>.com.Passedtoappin hostent.h_aliasesStep1&2:Decompress+ Decode03612e62023c3e03636f6d00labela.blabel<>labelcomlabela\.b.<>.com.a.b.<>.com.Good: ApplyescapingBad: 2emisinterpretedfornewlabelStep3: ValidateGood: Detectbadcharacters: \<>Use-Case
Address
Lookup
Service
discovery
Authenti-
cation
Apps
Chrome, Firefox, Opera,
Edge, unscd, java
ldapsearch
policyd-spf + postﬁx
no
CNAME aliases for indexing
attack prevented by
vali-
dates
no Cache does not evaluate
no Generated URL not used
to specify LDAP query
postﬁx resets connection
if second answer is injected
Table 4: Non-validating applications without meaningful ex-
ploits.
reverse-DNS tree and delivers malicious DNS records from
there. The attacker also maintains a connection to or through
the OpenWRT router when the victim opens the ‘Connections
page’, by continuously sending ICMP echo-request (‘ping’)
messages to the router. Using the 6.6.6.6.in-addr.arpa
record shown in Figure 9 we were able to successfully launch
this attack by placing javascript code inside the PTR record of
the attacker’s IP address which is not validated by the LuCi
web interface. This record is queried when the user views the
‘Connections page’ and is placed in the page’s HTML code
which executes the malicious code. A successful attack allows
different exploits, as an example we created a record which,
when injected, loads a third party script from an external
HTTP server. This script then issues various requests to the
OpenWRT conﬁguration interface in name of the user which
ﬁnally results in replacing the OpenWRT ﬁrmware running
on the device with a malicious attacker-provided ﬁrmware.
We show an example of a full attack ﬂow against OpenWRT
using this vulnerability in Figure 8.
Impact of the Attacks
3.7
Our analysis of the attacks shows that none of the tested ap-
plications perform DNS input validation. Some attacks do not
result in meaningful exploits, see examples in Section 3.7.1,
the causes are not defences against potentially malicious in-
puts, but rather not security related implementation decisions.
We also showed attacks with limited impact, such as the ping
exploit, to demonstrate that the problem (lack of DNS-input
validation) is systematic and prevalent, affects different sys-
tems, services and tools and is not limited to isolated cases or
a speciﬁc application. These examples show that developers
do not check DNS results, which contain untrusted data. Fur-
thermore, using such tools in certain scenarios could expose
to the exploitable attack. For instance, output of utilities like
Ping, can also be saved in a format which allows command
injection, like an HTML report, or SQL database, this allows
for a much more severe attack.
3.7.1 Non-validating applications without exploits
In this section we provide examples (listed in Table 4)
where DNS input validation vulnerability does not lead to
meaningful attacks. We caution that the factors preventing
meaningful attacks are not security related, but are due to
different implementation considerations: (1) in browsers and
app-caches, the cached records are only indexed by their query
domain, not by additional domain aliases inside the response.
(2) in ldapsearch, a potentially vulnerable peer discovery algo-
rithm is used to generate an LDAP URL, but depending on the
conﬁguration this URL may not be used to specify the LDAP
query, which would prevent the attacker from changing the
query. (3) in policyd-spf if implementations are conﬁgured
to check for additional data on unix socket, the result will be
discarded to prevent desynchronisation with the policyd-spf
daemon.
4
Internet Evaluation on Open Resolvers
In Section 3 we examined how the popular DNS resolvers
and stub resolver implementations built into operating sys-
tems and programming languages handle control characters
in domain names and if they modify any of the maliciously
crafted payloads needed to conduct our application-speciﬁc
exploits. In this section we extend our evaluation to open DNS
resolvers in the Internet, and conﬁrm the results of our in-lab
study in the Internet. Speciﬁcally, we evaluate behaviour when
processing a set of crafted DNS records designed to trigger
classic input validation vulnerabilities like SQL injection, as
well as DNS-speciﬁc special cases like handling of period
characters inside DNS labels. We do not evaluate attacks
against the applications using the vulnerable resolvers, since
this would result in an attack against an application or ser-
vice in the network which we do not own. We do not risk
evaluating even the ‘more benign’ attacks, which when run
against the servers that we setup do not cause critical dam-
age. This is since our attacks can trigger unexpected outcome
when evaluated against the servers in the Internet, e.g., due
to differences in conﬁgurations. We observe this phenomena
during the DNS cache poisoning evaluation of domains that
we control against open resolvers in the Internet – some of
the DNS software which was found secure when running the
cache poisoning attack against our servers, resulted in cache
poisoning vulnerabilities in the Internet.
4.1 Methodology
We run the same set of queries as for the in-lab evalua-
tion, but employ additional logging at the nameserver-level
to gain knowledge about the nature of the resolvers we test.
As this study targets the same class of resolver as our in-lab
evaluation, the expected behaviour is the same as described
in Section 2.
Dataset. To conduct the study, we use a dataset from Cen-
sys [35] with 3M open resolvers. We include baseline tests for
each record type (A, CNAME, SRV, TXT) to ensure that the
resolver supports the record type we use in our payloads and
only consider resolvers who respond to our queries and return
the correct result for all of these baseline tests. This results in
1,328,146 open resolvers from 228 different countries.
Tests are conducted by using custom test applications
which send DNS queries to the resolvers over the network
3176    30th USENIX Security Symposium
USENIX Association
or by calling the respective stub resolvers using the ap-
propriate API, by calling the POSIX gethostbyname() and
getnameinfo() functions. To test handling of commonly
used control characters like slash ("/"), at ("@"), zero-byte
("\000"), etc. we use the CNAME and PTR records with
the injection payloads. We furthermore test all the resolvers
against the applications’-speciﬁc records listed in Section 3
whenever applicable. All tested payloads are listed in Figure 9
in the order they appear in Table 5 and 6.
Forward-lookups. We evaluate hostname-to-address
records for all 3 groups of resolvers (resolver, stub and open
resolver) by triggering a query to the domain name of the
payload (e.g., cnameslash.example.com) and observing the
response from the resolver.
Injection payloads. For the DNS-speciﬁc injection pay-
loads, the test takes place in two stages: First we trig-
ger a query to the domain name of the injection pay-
load (i.e., injectzero.example.com) twice and observe if
the result was misinterpreted, ie.
if the result CNAME
is www.target.com\000.example.com (marked ) or just
www.target.com (marked 5). We then trigger a query to the
potentially misinterpreted domain name (i.e., www.target.com
instead of www.target.com\000.example.com) and observe if
the IP address was successfully injected into the resolvers’
cache (marked or given in % for open resolvers). We test
each payload (inject\000 and inject\.) in both scenarios: via
a CNAME-record which points to the malicious record (i.e.,
injectzero.attacker.com) and by triggering a query to the
malicious domain (i.e., victim.com\000.attacker.com) di-
rectly.
Reverse-lookups. Reverse-DNS lookups (PTR) were
tested against system stub resolvers only by setting the up-
stream DNS server to a custom controlled nameserver directly
providing the records under in-addr.arpa-tree and trigger-
ing a reverse PTR lookup for the respective IP address, e.g.,
1.1.1.1.in-addr.arpa and observing the response.
Additional considerations. To enhance the robustness of
our tests, we randomise all the queried domain names by
prepending a random subdomain to ensure that the query is
not cached before the test is conducted and processed by all
the components of the DNS lookup chain. This also allows
us to link the open resolver we sent the query to, to the ﬁnal
recursive resolver which connects back to our nameserver
by matching these random preﬁxes. To prevent other users
of the resolver to be negatively affected by our tests, we run
these tests only against domains we own, which allows us to
validate the full injection attack without performing an attack
against any other domain.
4.2 Evaluation Results
We present the results for forward-lookups in Table 5 and
the results of reverse-lookups in Table 6. For each test, ticks
() mark that the resolver is vulnerable to this kind of payload
and crosses () mark that the resolver is not vulnerable. Note
cnamebase.example.com CNAME works.cnameslash.example.com
cnameslash.example.com CNAME t/t.cnameslash.example.com
cnameat.example.com
cnamexss.example.com
CNAME t\@t.cnameat.example.com
CNAME .
cnamexss.example.com
cnamesql.example.com
cnameansi.example.com CNAME \027[31\;1\;4mHello\027[0m.
CNAME ’OR’’=’’--.cnamesql.example.com
cnameansi.example.com
injectdot.example.com. CNAME www\.target.com.
www\.target.com.
injectzero.example.com CNAME www.target.com\000.example.com
www.target.com\000.example.com A 6.6.6.6
A 6.6.6.6
_ldap._tcp.example.com.
_radsec._tcp.example.com IN SRV 6.6.6.6\\n\\ttype\\tTCP\\n\\t
secret\\tsomething\\n}\\n%%p.
IN SRV /dc=example,dc=com.
exp.example.com
IN TXT "AAAAA..." (510 times)
1.1.1.1.in-addr.arpa
2.2.2.2.in-addr.arpa
3.3.3.3.in-addr.arpa
4.4.4.4.in-addr.arpa
5.5.5.5.in-addr.arpa
6.6.6.6.in-addr.arpa
7.7.7.7.in-addr.arpa
8.8.8.8.in-addr.arpa
PTR
PTR
PTR
PTR
PTR
PTR
PTR
PTR
works.test
te/st.test
te\@st.test
t\000t.test
t\.t.test
.test
’OR’’=’’--.test
\027[31\;1\;4mHello\027[0m.test
Figure 9: Injection payloads based on CNAME and PTR records.
however that depending on the test, ‘vulnerable‘ means that
the resolver performs as expected and conforms to the DNS
standard (in case of non-stub resolvers and special character
tests like cnameslash) or that it misinterprets a domain name
which allows for a cache-poisoning attack (in case of injec-
tion payloads, such as inject\000). For injection payloads, we
only call a resolver vulnerable () when the malicious IP
address was cached, otherwise we use (5) to show that the
misinterpretation occurs, but can only exploited in conjunc-
tion with a caching downstream resolver like dnsmasq (See
Section 3.2.3). We list the percentage and absolute number
of open resolvers vulnerable to each payload in the bottom of
Table 5.
Transparent handling of DNS records. The results from
Internet evaluation of open resolvers correspond to our in-lab
evaluation: Around 96% of all tested open DNS resolvers are
transparent for application-speciﬁc payloads in DNS records.