### Table 6: Model-Independent Upper Bound for % Cracked

| V/k | 7 | 10 |
| --- | --- | --- |
| 61.38 | 5 | 10 |
| 37.46 | 42.64 | 26.30 |

### Figure 5: Memory Hard Functions: % Cracked by Value \( v \in \{ \$4, \$30 \} \)

**Description:**
- This figure shows the percentage of passwords cracked by an adversary with different values of \( v \) (adversary's budget) against an ideal memory-hard function (MHF) with a running time parameter \( \tau \).
- The x-axis represents \( \log_2(\tau) \), and the y-axis represents the percentage of cracked passwords.

### 7. Related Work

#### 7.1. Password Cracking
The issue of offline password cracking has been known for decades [40]. Researchers have continuously improved password cracking tools by exploring various probabilistic models, including:
- Probabilistic password models [41]
- Probabilistic Context-Free Grammars (PCFGs) [42, 43, 44]
- Markov chain models [45, 46, 47, 48]
- Neural networks [49]

Attackers also use public resources, such as quotes from the Internet Movie Database or Project Gutenberg, to crack sentence-based passwords [50, 51]. Additionally, they leverage 'training data' from previous breaches (e.g., RockYou, Tianya) to enhance their cracking algorithms [52].

#### 7.2. Improving Password Strength
Efforts to encourage or enforce stronger password selection have had limited success [53, 54, 55, 56, 57, 58] and often result in high usability costs [59]. Some methods to improve password strength include:
- Providing feedback during password creation [60, 61, 62]
- Offering clear instructions for creating strong passwords [50, 63]
- Implementing password composition policies [53, 54, 55, 56, 58, 64]

However, these policies can also introduce high usability costs [57, 65, 66, 59] and may not significantly increase password strength. In some cases, they can even result in weaker passwords [67, 54]. Password strength meters often provide inconsistent feedback [61, 62] and fail to persuade users to select strong passwords.

Another approach is to help users generate and remember strong passwords. For example, turning a phrase or sentence into a password has been claimed to be as strong as random passwords [50, 51], and this method is promoted by NIST and security experts like Bruce Schneier [68]. However, subsequent research suggests that these methods are less secure than previously thought [69, 70].

#### 7.3. Other Defenses Against Offline Attacks
To defend against offline attacks, organizations can:
- Distribute storage and computation of password hashes across multiple servers [75, 22, 23, 24]
- Store hashes of fake passwords (honeywords) and use an auxiliary server to detect authentication attempts with honeywords [76]

These defenses, however, require significant investment in additional servers and still necessitate the use of secure key-stretching mechanisms. Another line of research involves including solutions to hard artificial intelligence problems in the password hash, requiring human assistance to verify each guess [77, 78, 79]. This approach increases user workload during authentication, such as solving CAPTCHAs [77, 79].

#### 7.4. Modeling the Distribution of User-Selected Passwords
Malone and Kevin initially explored modeling the distribution of user password choices using Zipf's law [80]. Wang et al. [32] and Wang and Wang [11] provided improved techniques to fit Zipf's law parameters to a dataset. Bonneau [12] collected and analyzed a massive password frequency corpus with permission from Yahoo! [13]. We elaborate on Zipf's law and the Yahoo! frequency corpus in the body of the paper.

### 7.5. Key-Stretching
Key-stretching was proposed as early as 1979 [40] to protect lower-entropy secrets like passwords against offline attacks by making it economically infeasible for attackers to try millions or billions of guesses. Traditional key-stretching methods, such as PBKDF2 [2] and BCRYPT [1], are vulnerable to customized hardware attacks [81]. Memory-hard functions (MHFs), first introduced by Percival [9], are a promising alternative. MHFs are designed to be moderately expensive to compute, with most of the cost related to memory operations. Ideally, the Area x Time complexity of computing an MHF should scale with \( \tau^2 \), where \( \tau \) denotes the running time on a standard PC. This ensures that the cost of computing the function is equitable across different computer architectures. Almost all entrants in the recent Password Hashing Competition (PHC) [8] claimed some form of memory-hardness.

#### 7.5.1. Data (In)dependent Memory Hard Functions
Data-independent MHFs (iMHFs) are designed to resist side-channel attacks such as cache timing [82, 83]. These functions have a data access pattern independent of the input. However, several iMHFs have been shown to be vulnerable to attacks [30, 84, 31, 85, 86, 87, 88]. Data-dependent MHFs, such as SCRYPT [9], have side-channel vulnerabilities but are optimally memory-hard in terms of AT complexity [39, 89].

### 8. Discussion
Our economic analysis shows that traditional key-stretching tools like PBKDF2 and BCRYPT do not provide adequate protection for user passwords, while memory-hard functions offer meaningful protection against offline attackers. Organizations should upgrade their password hashing algorithms and adopt modern key-stretching methods such as memory-hard functions [9, 8]. Alternatively, organizations could consider using customized Bitcoin mining rigs, such as the Antminer S9 [81], to validate passwords by quickly enumerating over a large space of secret pepper values [90, 10].

While memory-hard functions can significantly reduce the fraction of cracked passwords, the damage from an offline attack can still be significant. Therefore, we recommend that organizations adopt distributed password hashing [75, 22, 23, 24] whenever feasible. Additionally, they should implement measures to detect password breaches, such as using honey accounts or honey passwords [76], multi-factor authentication, and fraud detection/correction algorithms [91].

Despite the availability of solid options for password hashing and key-derivation [9, 8, 18, 87], many organizations and developers select suboptimal password hashing functions [92, 19]. There is a clear need to provide developers with clear guidance on selecting secure password hash functions. Recent 2017 NIST guidelines suggest the use of memory-hard functions but still allow for the use of PBKDF2 with just 10,000 hash iterations. Based on our analysis, we advocate that password hashing standards should be updated to require the use of memory-hard functions and disallow the use of non-memory-hard functions such as BCRYPT or PBKDF2. Policy makers should audit and penalize organizations that fail to follow appropriate standards for password hashing.

We recommend that users focus on selecting passwords strong enough to resist targeted online attacks [27], as there is often a vast gap between the required entropy to resist online and offline attacks [7]. Extra user effort to memorize a high-entropy password might be wasted if an organization uses poor password hashing algorithms like SHA1, MD5 [36], or the identity function [92]. This effort would be better spent on reducing password reuse [72].

### 9. Acknowledgments
We thank the reviewers for their insightful comments. We also thank Ding Wang for sharing code for computing Zipf fittings. This work was supported by the National Science Foundation under NSF Awards #1649515 and #1704587. Ben Harsha was partially supported by an Intel Graduate Research Assistantship through CERIAS at Purdue. The opinions expressed in this paper are those of the authors and do not necessarily reflect those of the National Science Foundation or Intel.

### References
[References listed here, formatted according to the original text.]

---

This optimized version aims to make the text more coherent, professional, and easier to read. It includes clearer section headings, improved formatting, and more concise language.