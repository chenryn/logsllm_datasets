% cracked
22.24
TABLE 6: Model Independent Upper Bound % cracked
7
10
61.38
5
10
37.46
42.64
26.30
V/k
past 1 second. This is particularly, impressive when one
considers that an attacker only needs a single guess to
achieve success rate 1%!
% Cracked for Memory Hard Functions
d
e
k
c
a
r
c
%
100
80
60
40
20
0
v = $4
v = $30
τ = 107 (1 sec)
18
20
22
24
log2(τ)
Fig. 5: Memory Hard Functions: % cracked by value v$ ∈
{$4, $30} adversary against an ideal MHF with running time
parameter τ.
7. Related Work
7.0.1. Password Cracking. The issue of ofﬂine password
cracking has been known for decades [40]. Password crack-
ing tools have improved steadily as researchers have ex-
plored probabilistic password models
[41], Probabilistic
Context Free Grammars for passwords [42], [43], [44],
Markov chain models [45], [46], [47], [48] and even neural
networks [49]. Attackers may also use public resources
(e.g., quotes from the Internet Movie Database or project
Gutenberg to crack sentence based passwords [50], [51]) as
well as ‘training data’ from previous breaches at companies
like RockYou or Tianya to improve cracking algorithms.
Improved password cracking tools make it all the more
crucial to develop secure tools for key-stretching (e.g., data-
independent MHFs) to minimize the number of guesses an
attacker can try. Allodi has studied the economics of the
black market for certain attacks and malware, which may
be useful in understanding how password cracking markets
may work [52].
7.0.2. Improving Password Strength. Efforts to encourage
(or force) users to select stronger passwords have shown
865
limited success [53], [54], [55], [56], [57], [58] and often
induce high usability costs [59]. Users can be encouraged
to select stronger passwords by providing feedback during
the password creation policy (e.g.,
[60], [61], [62]) or by
providing clear instructions for the user to follow when
creating passwords [50], [63]. Another extensive line of
research explored the use of password composition policies
in which a user is required to select a password satisfying
certain requirements e.g., contains numbers and/or capital
letters [53], [54], [55], [56], [58], [64]. Password compo-
sition policies also introduce a high usability cost [57],
[65], [66], [59], and they typically do not increase password
strength signiﬁcantly. In fact, sometimes these policies result
in weaker user passwords [67], [54]. Similarly, password
strength meters often provide inconsistent feedback [61],
[62] and they often fail to persuade users to select strong
passwords.
Another line of research has focused on helping users to
generate and remember passwords. One prominent sugges-
tion is to turn a phrase or a sentence into a password. It has
been claimed that these passwords are as strong as random
ones [50], [51], and this has been promoted by NIST and
by security experts such as Bruce Schneier [68]. However,
subsequent research indicates that these suggestions are less
secure than previously believed [69], [70]. Another line of
research seeks to develop and promote secure and usable
strategies for password management when the user needs
to create and remember multiple passwords [71], [72], [73],
[74]. However, all of these schemes require a motivated user.
Bonneau and Schechter [29] and Blocki et al. [63] showed
that users are capable of memorizing higher entropy secrets
(e.g., 56 bits) by following spaced repetition schedules.
7.0.3. Other Defenses Against Ofﬂine Attacks. If an
organization has multiple authentication servers then they
could distribute storage and/or computation of the password
hashes across multiple servers [75], [22], [23], [24]. Juels
and Rivest [76] proposed storing the hashes of fake pass-
words (honeywords) and using a second auxiliary server to
detect authentication attempts with honeywords (alerting the
organization that an breach has occurred). The expensive
requirement to purchase and maintain extra servers may pre-
vent widespread adoption of these proposals. Even if these
defenses were adopted there is still a clear need to use secure
key-stretching mechanisms — an adversary who breaches
both servers can still mount an ofﬂine attack. Another line
of research has sought to include the solution(s) to hard
artiﬁcial intelligence problems in the password hash so that
an ofﬂine attacker needs human assistance to verify each
password guess [77], [78], [79]. These solutions increase
user workload during authentication e.g., by requiring the
user to solve a CAPTCHA puzzle [77], [79].
7.0.4. Modeling the Distribution of User Selected Pass-
words. Malone and Kevin initially explored the feasibility
of modeling the distribution of user password choices using
Zipf’s law [80]. Wang et al. [32] and Wang and Wang [11]
continued this line of work by providing improved tech-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
niques to ﬁt Zipf’s law parameters to a dataset. Bonneau [12]
took a different approach: collect and analyze a massive
password frequency corpus with permission from Yahoo!
The Yahoo! dataset was recently released using a differen-
tially private algorithm [13]. We elaborate on Zipf’s law
and the Yahoo! frequency corpus at length in the body of
the paper.
7.1. Key-Stretching
Key-stretching was proposed as early as 1979 [40] with
the goal of protecting lower-entropy secrets like passwords
against ofﬂine attacks by making it economically infeasible
for an ofﬂine attacker to try millions or billions of guesses.
Traditionally key stretching has been performed using hash
iteration e.g., PBKDF2 [2] and BCRYPT [1]. However,
password hash functions like PBKDF2 and BCRYPT require
minimal memory to evaluate and thus passwords protected
by these hash functions are highly vulnerable to attackers
with customized hardware [81]. Memory hard functions
(MHFs), ﬁrst explicitly introduced by Percival [9], are a
promising tool for constructing an ideal key-stretching func-
tion. MHFs are motivated by the observation that the cost of
storing/retrieving items from memory is relatively constant
across different computer architectures. At a high level a
memory hard function is moderately expensive to compute
and most of the costs associated with computing the function
are memory related (e.g., storing/retrieving items from mem-
ory). Ideally we want the Area x Time complexity of com-
2, where τ denotes the running
puting a MHF to scale with τ
time on a standard PC. Intuitively, to compute the MHF once
the attacker must dedicate τ blocks of memory for τ time
steps, which ensures that the cost of computing the function
is equitable across different computer architectures (memory
on an ASIC is still expensive). By contrast, Area x Time
complexity to compute BCRYPT or PBKDF2 is simply τ.
Recall that we want to increase costs quickly to minimize
2 then
delay during authentication. If costs scale with τ
we can rapidly drive up costs, and if computation requires
memory then an adversary will not be able to signiﬁcantly
reduce guessing costs by constructing an ASIC. Almost all
of the entrants to the recent Password Hashing Competition
(PHC) [8] claimed some form of memory-hardness.
7.1.1. Data (In)dependent Memory Hard Functions.
There is a type of MHF called a data-independent MHF
(iMHF) which is designed to be resistant to side-channel
attacks such as cache timing [82], [83]. These functions
have a data access pattern independent of the input. Multi-
ple attacks have been shown in several iMHFs [30], [84],
[31], [85], [86], [87], [88]. Data dependent MHFs such as
SCRYPT [9] have the previously mentioned side-channel
vulnerabilities. Even so, SCRYPT has been found to be
optimally memory hard in respect to AT complexity [39],
[89].
8. Discussion
Our economic analysis decisively shows that traditional
key-stretching tools like PBKDF2 and BCRYPT fail to pro-
vide adequate protection for user passwords, while memory
hard functions do provide meaningful protection against
ofﬂine attackers. It is time for organizations to upgrade
their password hashing algorithms and adopt modern key-
stretching such as memory hard functions [9], [8]. Alter-
natively, could a creative organization adapt customized
Bitcoin mining rigs for use in password authentication?
For example, the Antminer S9 [81], currently available on
Amazon for approximately $3, 000, is capable of computing
SHA256 14 trillion times per second. If the organization
stored salted and peppered [90], [10] password hash values
u, su, SHA256(pwdu|su|pu) then it could potentially use
the Antminer S9, or a similar Bitcoin mining rig, to validate
a password by quickly enumerating over a (very) large space
of secret pepper values p (brieﬂy, a secret salt value that is
not stored which even an honest party must brute force).
While our analysis demonstrates that the use of mem-
ory hard functions can signiﬁcantly reduce the fraction of
cracked passwords, the damage of an ofﬂine attack may
still be signiﬁcant. Thus, we recommend that organizations
adopt distributed password hashing [75], [22], [23], [24]
whenever feasible so that an attacker who only breaches
one authentication server will not be able to mount an
ofﬂine attack. Furthermore, we recommend that organiza-
tions take additional measures to mitigate the affect of an
authentication server breach. Solutions might include mech-
anisms detect password breaches through the use of honey
accounts or honey passwords[76], multi-factor authentica-
tion and fraud detection/correction algorithms to prevent
suspicious/harmful behavior [91].
While solid options for password hashing and key-
derivation exist [9], [8], [18], [87] the reality is that many
organizations and developers select suboptimal password
hashing functions [92], [19]. Thus, there is a clear need
to provide developers with clear guidance about selecting
secure password hash functions. On a positive note recent
2017 NIST guidelines do suggest the use of memory hard
functions. However, NIST guidelines still allows for the
user of PBKDF2 with just 10, 000 hash iterations. Based
on our analysis we advocate that password hashing stan-
dards should be updated to require the use of memory hard
functions for password hashing and disallow the use of non-
memory hard functions such as BCRYPT or PBKDF2. It
may be expedient for policy makers to audit and/or penalize
organizations that fail to follow appropriate standards for
password hashing.
We recommend that users primarily focus on selecting
passwords that are strong enough to resist targeted online
attacks [27] as there is a often a vast gap between the
required entropy to resist online and ofﬂine attacks [7]. Extra
user effort to memorize a high entropy password might be
completely wasted if an organization adopts poor password
hashing algorithms like SHA1, MD5 [36] or the identity
866
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
function [92]. This effort would likely be more productively
spent on trying to reduce password reuse [72].
9. Acknowledgments
We would like the thank the reviewers for their insightful
comments. We would also like to thank Ding Wang for
sharing code for computing Zipf ﬁttings. The work was
supported by the National Science Foundation under NSF
Awards #1649515 and #1704587. Ben Harsha was par-
tially supported by a Intel Graduate Research Assistantship
through CERIAS at Purdue. The opinions expressed in this
paper are those of the authors and do not necessarily reﬂect
those of the National Science Foundation or Intel.
References
[1] N. Provos and D. Mazieres, “Bcrypt algorithm.” USENIX, 1999.
[2] B. Kaliski, “Pkcs# 5: Password-based cryptography speciﬁcation ver-
sion 2.0,” 2000.
[3] L. Breech, “Lastpass security notice,” https://blog.lastpass.com/2015/
06/lastpass-security-notice.html/ (retrieved 11/10/2016), 2015.
[4] D. Meyer, “How to check if you were caught up in the dropbox
http://fortune.com/2016/08/31/dropbox-breach-passwords/
breach,”
(retrieved 11/10/2016).
J. Bonneau, C. Herley, P. C. Van Oorschot, and F. Stajano, “The
quest to replace passwords: A framework for comparative evaluation
of web authentication schemes,” in Security and Privacy (SP), 2012
IEEE Symposium on.
IEEE, 2012, pp. 553–567.
[5]
[7]
[6] C. Herley and P. C. van Oorschot, “A research agenda acknowledging
the persistence of passwords,” IEEE Security & Privacy, vol. 10,
no. 1, pp. 28–36, 2012.
J. Bonneau, C. Herley, P. C. van Oorschot, and F. Stajano, “Passwords
and the evolution of imperfect authentication,” Communications of the
ACM, vol. 58, no. 7, pp. 78–87, 2015.
J.-P. A. et al., “Password hashing competition,” 2015, https://
password-hashing.net/.
[8]
[9] C. Percival, “Stronger key derivation via sequential memory-hard
functions,” in BSDCan 2009, 2009.
[10] J. Blocki and A. Datta, “CASH: A cost asymmetric secure hash
algorithm for optimal password protection,” in IEEE 29th Computer
Security Foundations Symposium, 2016, pp. 371–386.
[11] D. Wang and P. Wang, “On the implications of zipf’s law in pass-
words,” in Computer Security - ESORICS 2016 - 21st European
Symposium on Research in Computer Security, 2016, pp. 111–131.
[12] J. Bonneau, “The science of guessing: analyzing an anonymized cor-
pus of 70 million passwords,” in 2012 IEEE Symposium on Security
and Privacy.
IEEE, 2012, pp. 538–552.
[13] J. Blocki, A. Datta, and J. Bonneau, “Differentially private password
frequency lists,” in 23rd Annual Network and Distributed System
Security Symposium, NDSS 2016, 2016.
[14] W. Yang, N. Li, I. M. Molloy, Y. Park, and S. N. Chari, “Comparing
password ranking algorithms on real-world password datasets,” 2016,
pp. 69–90.
[15] W. Melicher, B. Ur, S. M. Segreti, S. Komanduri, L. Bauer,
N. Christin, and L. F. Cranor, “Fast, lean and accurate: Modeling
password guessability using neural networks,” in Proceedings of
USENIX Security, 2016.
[16] M. Fossi, E. Johnson, D. Turner, T. Mack, J. Blackbird, D. McKinney,
M. K. Low, T. Adams, M. P. Laucht, and J. Gough, “Symantec report
on the underground economy,” November 2008, retrieved 1/8/2013.
867
[17] R. B. Miller, “Response time in man-computer conversational transac-
tions,” in Proceedings of the December 9-11, 1968, fall joint computer
conference, part I. ACM, 1968, pp. 267–277.
[18] A. Biryukov, D. Dinu, and D. Khovratovich, “Argon2: New gen-
eration of memory-hard functions for password hashing and other
applications,” in IEEE European Symposium on Security and Privacy,
EuroS&P 2016, Saarbr¨ucken, Germany, March 21-24, 2016, 2016,
pp. 292–302, http://dx.doi.org/10.1109/EuroSP.2016.31.
[19] A. Naiakshina, A. Danilova, C. Tiefenau, M. Herzog, S. Dechand,
and M. Smith, “”why do developers get password storage wrong”,”
in Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’17, 2017.
[20] P. A. Grassi, E. M. Newton, R. A. Perlner, A. R. Regenscheid,
W. E. Burr, J. P. Richer, N. B. Lefkovitz, J. M. Danker, Y.-Y.
Choong, K. Greene et al., “Digital identity guidelines: Authentication
and lifecycle management,” Special Publication (NIST SP)-800-63B,
2017.
[21] M. S. Turan, E. B. Barker, W. E. Burr, and L. Chen, “Sp 800-132.
recommendation for password-based key derivation: Part 1: Storage
applications,” 2010.
[22] J. Camenisch, A. Lysyanskaya, and G. Neven, “Practical yet univer-
sally composable two-server password-authenticated secret sharing,”
in Proceedings of
the 2012 ACM conference on Computer and
Communications Security. ACM, 2012, pp. 525–536.
[23] A. Everspaugh, R. Chaterjee, S. Scott, A. Juels, and T. Risten-
part, “The pythia prf service,” in 24th USENIX Security Symposium
(USENIX Security 15), 2015, pp. 547–562.
[24] R. W. F. Lai, C. Egger, D. Schr¨oder, and S. S. M. Chow, “Phoenix:
Rebirth of a cryptographic password-hardening service,” in 26th
USENIX Security Symposium (USENIX Security 17). Vancouver,
BC: USENIX Association, 2017, pp. 899–916.
[25] M. Stockley, “What your hacked account is worth on the dark web,”
Aug 2016.
[26] C. Herley and D. Florˆencio, “Nobody sells gold for the price of silver:
Dishonesty, uncertainty and the underground economy,” Economics
of information security and privacy, pp. 33–53, 2010.
[27] D. Wang, Z. Zhang, P. Wang, J. Yan, and X. Huang, “Targeted online
password guessing: An underestimated threat,” in Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2016, pp. 1242–1254.
[28] Y. Zhang, F. Monrose, and M. K. Reiter, “The security of modern
password expiration: an algorithmic framework and empirical analy-
sis,” in ACM CCS 10: 17th Conference on Computer and Commu-
nications Security, E. Al-Shaer, A. D. Keromytis, and V. Shmatikov,
Eds. Chicago, Illinois, USA: ACM Press, Oct. 4–8, 2010, pp. 176–
186.
[29] J. Bonneau and S. E. Schechter, “Towards reliable storage of 56-
bit secrets in human memory,” in Proceedings of the 23rd USENIX
Security Symposium, 2014, pp. 607–623.
[30] A. Biryukov and D. Khovratovich, “Tradeoff cryptanalysis of
memory-hard functions,” in International Conference on the Theory
and Application of Cryptology and Information Security. Springer,
2014, pp. 633–657.
[31] J. Alwen and J. Blocki, “Efﬁciently computing data-independent
memory-hard functions,” in Advances in Cryptology CRYPTO’16.
Springer, 2016.
[32] X. H. Ding Wang, Gaopeng Jian and P. Wang, “Zipfs law in pass-
words,” Cryptology ePrint Archive, Report 2014/631, 2014, http:
//eprint.iacr.org/2014/631.
[33] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu, “A density-based
algorithm for discovering clusters in large spatial databases with
noise,” in KDD, 1996, pp. 226–231.
[34] K. Conger, “Yahoo discloses hack of 1 billion accounts,” 2016,
retrieved 1/13/2017.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
and E. Weise,
[35] M. Snider
breached,”
report-yahoo-may-conﬁrm-massive-data-breach/90824934/,
Today, 2016, retrieved 5, Dec. 2016.
accounts
http://www.usatoday.com/story/tech/2016/09/22/
USA
“500 million
yahoo
[36] CynoSurePrime, “How we cracked millions of ashley madison