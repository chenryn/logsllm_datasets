### Overview of `scanf` with Dynamic Allocation and POSIX.1-2008 Modifier

The `scanf` function in the GNU C Library (glibc) has supported dynamic allocation for input strings since at least glibc 2.0. This feature allows `scanf` to allocate a buffer for an input string and return a pointer to that buffer. For example:

```c
char *buf;
scanf("%as", &buf);
```

However, using the letter `a` as a modifier for this purpose is problematic because `a` is also specified by the ISO C standard as a synonym for `f` (floating-point input). To address this, POSIX.1-2008 introduced the `m` modifier for assignment allocation.

### Usage of the `m` Modifier

The `m` modifier is available in glibc starting with version 2.7 and should be used in new programs instead of `a`. The `m` modifier has several advantages:

- It can be applied to `%c` conversion specifiers (e.g., `%3mc`).
- It avoids ambiguity with the `%a` floating-point conversion specifier.
- It is unaffected by compiler flags such as `-std=c99` or `-d_isoc99_source`.

To use the `m` modifier, specify it as a length modifier (e.g., `%ms` or `%m[range]`). The caller must free the returned string after use. Here is an example:

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    char *p;
    int n;
    errno = 0;
    n = scanf("%m[a-z]", &p);
    if (n == 1) {
        printf("read: %s\n", p);
        free(p);
    } else if (errno != 0) {
        perror("scanf");
    } else {
        fprintf(stderr, "no matching characters\n");
    }
    return 0;
}
```

### Limitations and Considerations

- The `a` modifier is not available if the program is compiled with `gcc -std=c99` or `gcc -d_isoc99_source` unless `_GNU_SOURCE` is also specified.
- Some combinations of type modifiers and conversion specifiers defined by ANSI C may not make sense (e.g., `%ld`). It is generally better to use modifiers not defined by ANSI C, such as `q` instead of `l` with `d`, `i`, `o`, `u`, `x`, and `X` conversions, or `ll`.

### Bugs and Conformance

- All functions are fully C89 conformant but provide additional specifiers `q` and `a`, as well as an additional behavior for the `l` specifier. This may be considered a bug as it changes the behavior of specifiers defined in C89.
- Some combinations of type modifiers and conversion specifiers may have well-defined behavior on Linux but not on other architectures.

### Example

To use the dynamic allocation conversion specifier, specify `m` as a length modifier (e.g., `%ms` or `%m[range]`). The caller must free the returned string. Here is an example:

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    char *p;
    int n;
    errno = 0;
    n = scanf("%m[a-z]", &p);
    if (n == 1) {
        printf("read: %s\n", p);
        free(p);
    } else if (errno != 0) {
        perror("scanf");
    } else {
        fprintf(stderr, "no matching characters\n");
    }
    return 0;
}
```

### See Also

- `getc(3)`
- `printf(3)`
- `setlocale(3)`
- `strtod(3)`
- `strtol(3)`
- `strtoul(3)`

### Colophon

This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

### Copyright and License

Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies. Permission is also granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.

Since the Linux kernel and libraries are constantly changing, this manual page may be incorrect or out-of-date. The author(s) assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. Formatted or processed versions of this manual, if unaccompanied by the source, must acknowledge the copyright and authors of this work.