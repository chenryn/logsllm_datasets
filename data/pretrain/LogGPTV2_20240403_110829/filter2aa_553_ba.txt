327
6.3 用关系运算符和表达式比较大小
while循环经常依赖测试表达式作比较，这样的表达式被称为关系表达
式（relational expression），出现在关系表达式中间的运算符叫做关系运算
符（relational operator）。前面的示例中已经用过一些关系运算符，表 6.1
列出了 C 语言的所有关系运算符。该表也涵盖了所有的数值关系（数字之
间的关系再复杂也没有人与人之间的关系复杂）。
表6.1 关系运算符
关系运算符常用于构造while语句和其他C语句（稍后讨论）中用到的关
系表达式。这些语句都会检查关系表达式为真还是为假。下面有3个互不相
关的while语句，其中都包含关系表达式。
while (number 。因为浮点数的舍入误差会导致在逻辑上应该相等的两数却
不相等。例如，3乘以1/3的积是1.0。如果用把1/3表示成小数点后面6位数
字，乘积则是.999999，不等于1。使用fabs()函数（声明在math.h头文件中）
可以方便地比较浮点数，该函数返回一个浮点值的绝对值（即，没有代数符
号的值）。例如，可以用类似程序清单6.5的方法来判断一个数是否接近预
期结果。
程序清单6.5 cmpflt.c程序
// cmpflt.c -- 浮点数比较
#include 
#include 
int main(void)
{
const double ANSWER = 3.14159;
329
double response;
printf("What is the value of pi?\n");
scanf("%lf", &response);
while (fabs(response - ANSWER) > 0.0001)
{
printf("Try again!\n");
scanf("%lf", &response);
}
printf("Close enough!\n");
return 0;
}
循环会一直提示用户继续输入，除非用户输入的值与正确值之间相差
0.0001：
What is the value of pi?
3.14
Try again!
3.1416
Close enough!
6.3.1 什么是真
330
这是一个古老的问题，但是对C而言还不算难。在C中，表达式一定有
一个值，关系表达式也不例外。程序清单6.6中的程序用于打印两个关系表
达式的值，一个为真，一个为假。
程序清单6.6 t_and_f.c程序
/* t_and_f.c -- C中的真和假的值 */
#include 
int main(void)
{
int true_val, false_val;
true_val = (10 > 2);    // 关系为真的值
false_val = (10 == 2); // 关系为假的值
printf("true = %d; false = %d \n", true_val, false_val);
return 0;
}
程序清单6.6把两个关系表达式的值分别赋给两个变量，即把表达式为
真的值赋给true_val，表达式为假的值赋给false_val。运行该程序后输出如
下：
true = 1; false = 0
原来如此！对C而言，表达式为真的值是1，表达式为假的值是0。一些
C程序使用下面的循环结构，由于1为真，所以循环会一直进行。
while (1)
331
{
...
}
6.3.2 其他真值
既然1或0可以作为while语句的测试表达式，是否还可以使用其他数
字？如果可以，会发生什么？我们用程序清单6.7来做个实验。
程序清单6.7 truth.c程序
// truth.c -- 哪些值为真
#include 
int main(void)
{
int n = 3;
while (n)
printf("%2d is true\n", n--);
printf("%2d is false\n", n);
n = -3;
while (n)
printf("%2d is true\n", n++);
printf("%2d is false\n", n);
332
return 0;
}
该程序的输出如下：
3 is true
2 is true
1 is true
0 is false
-3 is true
-2 is true
-1 is true
0 is false
执行第1个循环时，n分别是3、2、1，当n等于0时，第1个循环结束。与
此类似，执行第2个循环时，n分别是-3、-2和-1，当n等于0时，第2个循环结
束。一般而言，所有的非零值都视为真，只有0被视为假。在C中，真的概
念还真宽！
也可以说，只要测试条件的值为非零，就会执行 while 循环。这是从数
值方面而不是从真/假方面来看测试条件。要牢记：关系表达式为真，求值
得1；关系表达式为假，求值得0。因此，这些表达式实际上相当于数值。
许多C程序员都会很好地利用测试条件的这一特性。例如，用while
(goats)替换while (goats !=0)，因为表达式goats != 0和goats都只有在goats的值
为0时才为0或假。第1种形式（while (goats != 0)）对初学者而言可能比较清
楚，但是第2种形式（while (goats)）才是C程序员最常用的。要想成为一名
333
C程序员，应该多熟悉while (goats)这种形式。
6.3.3 真值的问题
C对真的概念约束太少会带来一些麻烦。例如，我们稍微修改一下程序
清单6.1，修改后的程序如程序清单6.8所示。
程序清单6.8 trouble.c程序
// trouble.c -- 误用=会导致无限循环
#include 
int main(void)
{
long num;
long sum = 0L;
int status;
printf("Please enter an integer to be summed ");
printf("(q to quit): ");
status = scanf("%ld", &num);
while (status = 1)
{
sum = sum + num;
printf("Please enter next integer (q to quit): ");
334
status = scanf("%ld", &num);
}
printf("Those integers sum to %ld.\n", sum);
return 0;
}
运行该程序，其输出如下：
Please enter an integer to be summed (q to quit): 20
Please enter next integer (q to quit): 5
Please enter next integer (q to quit): 30
Please enter next integer (q to quit): q
Please enter next integer (q to quit):
Please enter next integer (q to quit):
Please enter next integer (q to quit):
Please enter next integer (q to quit):
（„„屏幕上会一直显示最后的提示内容，除非强行关闭程序。也许你根
本不想运行这个示例。）
这个麻烦的程序示例改动了while循环的测试条件，把status == 1替换成
status = 1。后者是一个赋值表达式语句，所以 status 的值为 1。而且，整个
赋值表达式的值就是赋值运算符左侧的值，所以status 
= 
1的值也是1。这
里，while (status = 1)实际上相当于while (1)，也就是说，循环不会退出。虽
然用户输入q，status被设置为0，但是循环的测试条件把status又重置为1，进
335
入了下一次迭代。
读者可能不太理解，程序的循环一直运行着，用户在输入q后完全没机
会继续输入。如果scanf()读取指定形式的输入失败，就把无法读取的输入留
在输入队列中，供下次读取。当scanf()把q作为整数读取时失败了，它把 
q
留下。在下次循环时，scanf()从上次读取失败的地方（q）开始读取，scanf()
把q作为整数读取，又失败了。因此，这样修改后不仅创建了一个无限循
环，还创建了一个无限失败的循环，真让人沮丧。好在计算机觉察不出来。
对计算机而言，无限地执行这些愚蠢的指令比成功预测未来10年的股市行情
没什么两样。
不要在本应使用==的地方使用=。一些计算机语言（如，BASIC）用相
同的符号表示赋值运算符和关系相等运算符，但是这两个运算符完全不同
（见图 6.2）。赋值运算符把一个值赋给它左侧的变量；而关系相等运算符
检查它左侧和右侧的值是否相等，不会改变左侧变量的值（如果左侧是一个
变量）。
图6.2 关系运算符==和赋值运算符=
示例如下：
336
要注意使用正确的运算符。编译器不会检查出你使用了错误的形式，得
出也不是预期的结果（误用=的人实在太多了，以至于现在大多数编译器都
会给出警告，提醒用户是否要这样做）。如果待比较的一个值是常量，可以
把该常量放在左侧有助于编译器捕获错误：
可以这样做是因为C语言不允许给常量赋值，编译器会把赋值运算符的
这种用法作为语法错误标记出来。许多经验丰富的程序员在构建比较是否相
等的表达式时，都习惯把常量放在左侧。
总之，关系运算符用于构成关系表达式。关系表达式为真时值为1，为
假时值为0。通常用关系表达式作为测试条件的语句（如while和if）可以使
用任何表达式作为测试条件，非零为真，零为假。
6.3.4 新的_Bool类型
在C语言中，一直用int类型的变量表示真/假值。C99专门针对这种类型
的变量新增了_Bool类型。该类型是以英国数学家George 
Boole的名字命名
的，他开发了用代数表示逻辑和解决逻辑问题。在编程中，表示真或假的变
量被称为布尔变量（Boolean variable），所以_Bool是C语言中布尔变量的类
型名。_Bool类型的变量只能储存1（真）或0（假）。如果把其他非零数值
赋给_Bool类型的变量，该变量会被设置为1。这反映了C把所有的非零值都
视为真。
程序清单6.9修改了程序清单6.8中的测试条件，把int类型的变量status替
换为_Bool类型的变量input_is_good。给布尔变量取一个能表示真或假值的
变量名是一种常见的做法。
337
程序清单6.9 boolean.c程序
// boolean.c -- 使用_Bool类型的变量 variable
#include 
int main(void)
{
long num;
long sum = 0L;
_Bool input_is_good;
printf("Please enter an integer to be summed ");
printf("(q to quit): ");
input_is_good = (scanf("%ld", &num) == 1);
while (input_is_good)
{
sum = sum + num;
printf("Please enter next integer (q to quit): ");
input_is_good = (scanf("%ld", &num) == 1);
}
printf("Those integers sum to %ld.\n", sum);
return 0;
338
}
注意程序中把比较的结果赋值给_Bool类型的变量input_is_good：
input_is_good = (scanf("%ld", &num) == 1);
这样做没问题，因为==运算符返回的值不是1就是0。顺带一提，从优
先级方面考虑的话，并不需要用圆括号把
括起来。但是，这样做可以提高代
码可读性。还要注意，如何为变量命名才能让while循环的测试简单易懂：
while (input_is_good)
C99提供了stdbool.h头文件，该头文件让bool成为_Bool的别名，而且还
把true和false分别定义为1和0的符号常量。包含该头文件后，写出的代码可
以与C++兼容，因为C++把bool、true和false定义为关键字。
如果系统不支持_Bool类型，导致无法运行该程序，可以把_Bool替换成
int即可。
6.3.5 优先级和关系运算符
关系运算符的优先级比算术运算符（包括+和-）低，比赋值运算符高。
这意味着x > y + 2和x > (y+ 2)相同，x = y > 2和x = (y > 2)相同。换言之，如
果y大于2，则给x赋值1，否则赋值0。y的值不会赋给x。
关系运算符比赋值运算符的优先级高，因此，x_bigger = x > y;相当于
x_bigger = (x > y);。
关系运算符之间有两种不同的优先级。
高优先级组： >=
低优先级组： == !=
339