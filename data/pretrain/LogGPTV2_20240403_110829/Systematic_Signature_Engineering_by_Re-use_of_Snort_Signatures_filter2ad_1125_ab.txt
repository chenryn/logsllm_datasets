T3 
T4 
AS3 
AS4 
.........       ASn 
T1 
T2 
T3 
T4 
.............................. 
AS5 
AS8 
.........       ASm 
AS6 
AS7 
Fig. 1: Abstraction tree and manifestation sets 
After  deriving  the  abstraction  tree,  the  abstracted 
signatures need to be tested in order to check to what 
extent  they  identify  the  traces  T  of  the  given  attack. 
These tests can be supported by the use of an IDS. The 
test applies a breadth-first search. It stops, when an ab-
stracted signature is found that detects the traces T and 
if there is no other untested signature which has a closer 
similarity to the root signature. As a result we get the 
abstracted signature(s) of lowest abstraction degree that 
match(es) the given traces. 
2.3 Similarity Measures of Signatures 
In order to estimate  the similarities of different ab-
stracted signatures the edges of the abstraction tree are 
weighted using a metric δ. This metric maps the type of 
the transformation onto real numbers. If a signature AS 
is generated from signature S by transformation X then 
the  related  edge  between  nodes  S  and  AS  is  weighted 
with  δ(X).  The  metric  expresses  the  degree  of  the  se-
mantic  abstraction  of  each 
transformation.  After 
weighting the edges of the tree the similarities of differ-
ent abstracted signatures related to the basic signature S 
can  be  assessed.  This  is  done  by  cumulating  the  edge 
weights on the path from the root node to the abstracted 
signature,  i.e.  the  abstraction  degree  of  a  signature  is 
determined by the sum of the edge weights.  
2.4 Signature Selection 
Now we describe how signatures are selected from a 
set  K  of  known  signatures  for  a  new  attack.  First,  the 
traces T of the given attack, which are received by exe-
cuting the exploit on a system, are logged. Next, the ab-
straction degree of each signature S in K is determined. 
It measures the abstractions which need to be applied to 
S to match the traces T. The procedure comprises five 
steps: (1) Successive application of transformations to S 
in order to derive all possible signature abstractions. (2) 
Generation  of  the  abstraction  tree.  (3)  Weighting  the 
edges in the tree using a metric δ. (4) Applying the ab-
stracted signatures of S to the traces T by using an IDS 
and identifying all signatures matching T. (5) Selecting 
the abstracted signature with the lowest abstraction de-
gree.  This  abstraction  degree  is  assigned  to  the  signa-
ture S. After accomplishing this procedure for all signa-
1525
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
tures  in  K,  the  abstraction  degree  of  each  signature  is 
known. The signatures in K with the lowest abstraction 
degrees are suggested to the signature engineer for re-
use. The signature engineer may use these signatures as 
well as the original signatures to understand the nature 
of the attack and to determine the differences to the cur-
rent  variant  of  the  attack.  The  selection  steps  may  be 
optimized  as  indicated  in  Section  2.2  and  executed  in 
parallel. 
3  Application to Snort 
Here we consider the application of our approach to 
the  Snort  signature  specification  language.  Snort  is  a 
network-based  IDS  that  is  deployed  by  over  100.000 
active users world-wide. It is the most widely used IDS 
and  provides  an  extensive  signature  knowledge  base. 
We start with a brief overview of the signature specifi-
cation  language  of  Snort  and  proceed  with  defining 
suitable transformations.  
3.1 Modeling Signatures for Snort 
Snort  allows  modeling  single-step  signatures  by 
rules (see [1] for a detailed manual). In Snort parlance, 
signatures  are  also  denoted  as  rules.  Snort  rules  com-
prise  a  header  and  option  conditions.  The rule  header 
specifies the basic parameters of the signature such as 
the  inspected  protocol  (IP,  UDP,  TCP,  or  ICMP),  the 
observed  communication  directions 
(uni-  or  bi-
directional)  as  well  as  source  and  destination  IP  ad-
dresses and port numbers. In addition, actions may be 
optionally  specified  that  are  executed  when  the  rule 
matches, e.g. generating alarms (msg) or dropping data-
grams (drop). The rule option part specifies the identi-
fier  of  the  signature  and  the  constraints  for  matching 
payload  and  header  fields  of  the  datagrams.  Payload 
constraints may be used to match values or patterns in 
datagrams or transport streams. Header constraints are 
used to match datagram header fields, where the avail-
able fields depend on the protocol selected in the rule 
header. For example, sequence number fields can only 
be matched for TCP segments. 
If Snort identifies a datagram or transport stream that 
matches all constraints of a rule header and of the pay-
load  and  header  constraints,  the  action  defined  in  the 
rule header will be executed. Since actions are not re-
lated to rule abstraction, we refrain from going into the 
details here. An example rule is given in Fig. 2, point-
ing out the rule header and the header and payload con-
straints in the option part of the rule. 
//rule header 
alert tcp any any −> 141.43.3.0/24 445 ( 
  //header options 
  tos: 1; 
  flow: to_server, established; 
  //payload options 
  content: "|FF|SMB%"; depth: 5; offset: 4; 
  content: "&|00|"; within: 2; distance: 56; 
  content: "|05|"; within: 1; distance: 2; 
  content: "|0B|"; within: 1; distance: 1; 
  byte_test: 1,&,1,0,relative; 
  content: "|00|"; within: 1; distance: 21; 
  //actions 
  msg: " Netbios access"; 
  //rule ID 
  sid: 2191;)   
Fig. 2: Example of a Snort signature 
3.2 Transformations for Snort Signatures 
For the construction of the signature abstraction tree 
for  Snort  rules  we  use  nine  primary  transformations. 
These transformations can be classified as follows: ab-
straction of the rule header, abstraction of the rule op-
tion  part,  i.e.  the  datagram  header  and  payload  con-
straints.  In  the  following  we  describe  the  transforma-
tions for transformable rule elements in detail, also giv-
ing  the  possible  pre-conditions.  These  pre-conditions 
have  a  two-fold  function.  First,  they  ensure  that  the 
given  transformation  produces  a  syntactically  correct 
rule.  Second,  they  ensure  that  the  abstracted  rules  AS 
accept a super-set MAS of the manifestations MS of the 
original rule S, i.e. MS ⊆ MAS (see Sect. 2.1).  
Further we specify hints for each of the transforma-
tions  that  will  be  offered  to  the  signature  engineer  to-
gether with the proposed rules. If a rule is proposed to 
the  engineer  due  to  the  fact  that  after  applying  trans-
formations t to this rule the resulting abstracted signa-
ture matches the given attack trace, then the hints speci-
fied for all transformations t are given to the engineer. 
These hints identify the elements of a rule that were ab-
stracted and that need adjustment or extension. Hints do 
not  offer  advice  towards  entirely  new  elements  that 
need to be added to the rule in order to match the new 
attack; they are rather intended to support the engineer 
in refining re-used rule fragments. 
The  following  options  are  frequently  used  in  the 
Snort-VRT  Certified  Rules  (dating  back  to  May  15, 
2007) rule base (in % of the total number of rules): con-
tent  (98%),  flow  (90%),  pcre  (66%),  byte_test  (50%), 
byte_jump  (44%),  uricontent  (26%),  and 
isdataat 
(2.5%).  Each  of  the  remaining  options  is  used  in  less 
than 2% of the rules. Due to space limitations we pre-
sent  the  transformations  for  a  selection  of  these  fre-
quently used Snort options. 
3.2.1 Transformations of the Rule Header. The Snort 
rule  header  can  be  used  to  restrict  the  network  traffic 
being matched against the rule option part. This is done 
by specifying concrete source and/or destination IP ad-
dresses,  network  masks  and/or  port  numbers.  The  op-
tion part of the rule will then only be matched against 
datagrams that meet the constraints of the rule header.  
1626
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
Transformation:  Concrete  IP  addresses,  network 
masks,  and/or  port  numbers  are  replaced  by  the  key-
word any in the rule header. When applying this trans-
formation to the rule given in Fig. 2, the constraint for 
port  number  445  is  removed,  resulting  in  the  rule  de-
picted  in  Fig.  3.  Alternatively,  it  is  feasible  to  take  a 
more  fine-grained  approach  by  dropping  only  parts  of 
an 
fashion,  e.g. 
141.43.3.0/24 (cid:198) 141.43.0.0/16.  
alert tcp any any  −> 141.43.3.0/24 any (  
  tos: 1; flow: to_server, established;  
  content: "|FF|SMB%"; depth: 5; offset: 4; 
  … 
  msg: "Netbios access"; 
  sid: 2191;) 
in  a  subnet-wise 
IP  address 
Fig. 3: Transformation of the rule header 
Note that if there do not exist any constraints in the 
rule option part then such a rule will just activate when 
any traffic is observed between the specified addresses 
and ports. Such rules in general are not part of generic 
rule  bases  as  distributed  to  the  community.  They  are 
rather of site-specific interest. Since they do not specify 
a specific kind of attack, they would be excluded from 
the process of rule abstraction. 
Transformation  hints:  The  signature  engineer  may 
restrict the rule to specific ports or IP addresses in order 
to  reduce  false  alarms  and  improve  the  run-time  effi-
ciency of Snort. 
3.2.2 Transformations of the IP Options.  In  the  op-
tion  part  of  the  Snort  rules  we  define  constraints  for 
matching  the  datagram  header  fields  of  the  network 
traffic  selected  by  the  rule  header.  Exactly  speaking, 
constraints can be defined for the fields TTL, TOS, ID, 
Fragbits,  Fragoffset,  datagram  size,  protocol,  and  IP 
options. If a given rule specifies constraints for one or 
more  of  these  fields,  all  traffic  that  does  not  meet  the 
constraints  will  not  be  considered  any  further  by  the 
rule. As an example, requiring the Fragbits option will 
focus the rule to fragmented datagrams only. Removing 
the option will widen the focus of the rule to also con-
sider non-fragmented datagrams. 
Transformation:  Simple  constraints  with  regard  to 
datagram header fields such as TTL, TOS, ID, Fragbits, 
Fragoffset, datagram size, and transport protocol, will 
be removed from the rule one by one. Alternatively, it 
is feasible to take a more fine-grained approach by re-
ducing the TTL and datagram size in a step-wise fash-
ion. Fig. 4 exemplarily depicts the abstracted rule after 
removing the TOS option from the original rule in Fig. 
2.  In  contrast  to  the  original  rule,  the  abstracted  rule 
will also consider datagrams that are not tagged as ur-
gent by the sender.  
Transformation hints: If the transformation removed 
Fragbits  or  Fragoffset  options,  the  signature  engineer 
might look into fragmentation issues that the given at-
tack may exploit. The other options are usually merely 
used  to  corroborate  other  constraints  by  looking  for 
known anomalies in the context of the given attack, e.g. 
TTL > 64. 
alert tcp any any  −> 141.43.3.0/24 any (  
  flow: to_server, established;  
  content: "|FF|SMB%"; depth: 5; offset: 4; 
  … 
  msg: "Netbios access"; 
  sid: 2191;) 
Fig. 4: Transformation of an IP option 
3.2.3 Transformations of the TCP Options. Similar to 
Snort IP options for datagram IP header fields we can 
use  TCP  options  for  TCP  header  fields  in  TCP  seg-
ments. Snort offers the following TCP options. The op-
tion  flags  is  used  for  testing  the  TCP  header  control 
flags FIN, SYN, RST, PUSH, ACK, and URG. The flow 
option focuses the rule on open, established or stateless 
TCP  connections.  Additionally,  the  rule  can  be  con-
strained to only one direction of a TCP connection by 
using the to_client or the to_server option. The options 
seq, ack, or window restrict the rule to segments with a 
specific  sequence  number,  acknowledgement  number, 
or window size, respectively. Like IP options, TCP op-
tions may also restrict the rule to traffic that meets the 
respective  constraints.  Hence,  if  such  an  option  is  re-
moved the rule focus is widened to traffic that does not 
meet the respective constraint. 
Transformation: TCP options are removed from the 
rule, one  by one. Alternatively,  it  is  feasible  to  take  a 
more  fine-grained  approach  by  adapting  the  sequence 
numbers or the window size in a step-wise fashion. Fig. 
5 depicts the abstracted rule after removing the flow op-
tion to_server from the original rule in Fig. 2. In con-
trast  to  the  original  rule,  the  abstracted  rule  will  also 
consider datagrams that are sent by a machine that acts 
as a server in the context of a TCP connection. 
alert tcp any any  −> 141.43.3.0/24 any (  
  flow: established; 
  content: "|FF|SMB%"; depth: 5; offset: 4; 
  … 
  msg: "Netbios access"; 
  sid: 2191;) 
Fig. 5: Transformation of a TCP option 
Transformation hints: If constraints on the commu-
nication direction have been removed, the signature en-
gineer can investigate the server and the client for being 
vulnerable to the given attack, and then restrict the rule 
accordingly to look only for traffic directed towards the 
vulnerable  machine,  thereby  improving  the  run-time 
efficiency of Snort. If the transformation removed con-
straints on sequence numbers or window sizes, the sig-
nature  engineer  can  look  into  the  TCP  segment  re-
assembly issues that the given attack may exploit. 