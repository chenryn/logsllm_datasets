### 基于关键词(Term)的次级索引进行分割槽
我们可以构建一个覆盖所有分割槽资料的 **全域性索引**，而不是给每个分割槽建立自己的次级索引（本地索引）。但是，我们不能只把这个索引储存在一个节点上，因为它可能会成为瓶颈，违背了分割槽的目的。全域性索引也必须进行分割槽，但可以采用与主键不同的分割槽方式。
[图 6-5](../img/fig6-5.png) 描述了这可能是什么样子：来自所有分割槽的红色汽车在红色索引中，并且索引是分割槽的，首字母从 `a` 到 `r` 的颜色在分割槽 0 中，`s` 到 `z` 的在分割槽 1。汽车制造商的索引也与之类似（分割槽边界在 `f` 和 `h` 之间）。
![](../img/fig6-5.png)
**图 6-5 基于关键词对次级索引进行分割槽**
我们将这种索引称为 **关键词分割槽（term-partitioned）**，因为我们寻找的关键词决定了索引的分割槽方式。例如，一个关键词可能是：`color:red`。**关键词（Term）** 这个名称来源于全文搜寻索引（一种特殊的次级索引），指文件中出现的所有单词。
和之前一样，我们可以透过 **关键词** 本身或者它的杂凑进行索引分割槽。根据关键词本身来分割槽对于范围扫描非常有用（例如对于数值类的属性，像汽车的报价），而对关键词的杂凑分割槽提供了负载均衡的能力。
关键词分割槽的全域性索引优于文件分割槽索引的地方点是它可以使读取更有效率：不需要 **分散 / 收集** 所有分割槽，客户端只需要向包含关键词的分割槽发出请求。全域性索引的缺点在于写入速度较慢且较为复杂，因为写入单个文件现在可能会影响索引的多个分割槽（文件中的每个关键词可能位于不同的分割槽或者不同的节点上） 。
理想情况下，索引总是最新的，写入资料库的每个文件都会立即反映在索引中。但是，在关键词分割槽索引中，这需要跨分割槽的分散式事务，并不是所有资料库都支援（请参阅 [第七章](ch7.md) 和 [第九章](ch9.md)）。
在实践中，对全域性次级索引的更新通常是 **非同步** 的（也就是说，如果在写入之后不久读取索引，刚才所做的更改可能尚未反映在索引中）。例如，Amazon DynamoDB 声称在正常情况下，其全域性次级索引会在不到一秒的时间内更新，但在基础架构出现故障的情况下可能会有延迟【20】。
全域性关键词分割槽索引的其他用途包括 Riak 的搜寻功能【21】和 Oracle 资料仓库，它允许你在本地和全域性索引之间进行选择【22】。我们将在 [第十二章](ch12.md) 中继续关键词分割槽次级索引实现的话题。
## 分割槽再平衡
随著时间的推移，资料库会有各种变化：
* 查询吞吐量增加，所以你想要新增更多的 CPU 来处理负载。
* 资料集大小增加，所以你想新增更多的磁碟和 RAM 来储存它。
* 机器出现故障，其他机器需要接管故障机器的责任。
所有这些更改都需要资料和请求从一个节点移动到另一个节点。将负载从丛集中的一个节点向另一个节点移动的过程称为 **再平衡（rebalancing）**。
无论使用哪种分割槽方案，再平衡通常都要满足一些最低要求：
* 再平衡之后，负载（资料储存，读取和写入请求）应该在丛集中的节点之间公平地共享。
* 再平衡发生时，资料库应该继续接受读取和写入。
* 节点之间只移动必须的资料，以便快速再平衡，并减少网路和磁碟 I/O 负载。
### 再平衡策略
有几种不同的分割槽分配方法【23】，让我们依次简要讨论一下。
#### 反面教材：hash mod N
我们在前面说过（[图 6-3](../img/fig6-3.png)），最好将可能的杂凑分成不同的范围，并将每个范围分配给一个分割槽（例如，如果 $0 ≤ hash(key)< b_0$，则将键分配给分割槽 0，如果 $b_0 ≤ hash(key) < b_1$，则分配给分割槽 1）
也许你想知道为什么我们不使用 ***取模（mod）***（许多程式语言中的 % 运算子）。例如，`hash(key) mod 10` 会返回一个介于 0 和 9 之间的数字（如果我们将杂凑写为十进位制数，杂凑模 10 将是最后一个数字）。如果我们有 10 个节点，编号为 0 到 9，这似乎是将每个键分配给一个节点的简单方法。
模 N（$mod N$）方法的问题是，如果节点数量 N 发生变化，大多数键将需要从一个节点移动到另一个节点。例如，假设 $hash(key)=123456$。如果最初有 10 个节点，那么这个键一开始放在节点 6 上（因为 $123456\ mod\  10 = 6$）。当你增长到 11 个节点时，键需要移动到节点 3（$123456\ mod\ 11 = 3$），当你增长到 12 个节点时，需要移动到节点 0（$123456\ mod\ 12 = 0$）。这种频繁的举动使得再平衡的成本过高。
我们需要一种只移动必需资料的方法。
#### 固定数量的分割槽
幸运的是，有一个相当简单的解决方案：建立比节点更多的分割槽，并为每个节点分配多个分割槽。例如，执行在 10 个节点的丛集上的资料库可能会从一开始就被拆分为 1,000 个分割槽，因此大约有 100 个分割槽被分配给每个节点。
现在，如果一个节点被新增到丛集中，新节点可以从当前每个节点中 **窃取** 一些分割槽，直到分割槽再次公平分配。这个过程如 [图 6-6](../img/fig6-6.png) 所示。如果从丛集中删除一个节点，则会发生相反的情况。
只有分割槽在节点之间的移动。分割槽的数量不会改变，键所指定的分割槽也不会改变。唯一改变的是分割槽所在的节点。这种变更并不是即时的 — 在网路上传输大量的资料需要一些时间 — 所以在传输过程中，原有分割槽仍然会接受读写操作。
![](../img/fig6-6.png)
**图 6-6 将新节点新增到每个节点具有多个分割槽的资料库丛集。**
原则上，你甚至可以解决丛集中的硬体不匹配问题：透过为更强大的节点分配更多的分割槽，可以强制这些节点承载更多的负载。在 Riak 【15】、Elasticsearch 【24】、Couchbase 【10】和 Voldemort 【25】中使用了这种再平衡的方法。
在这种配置中，分割槽的数量通常在资料库第一次建立时确定，之后不会改变。虽然原则上可以分割和合并分割槽（请参阅下一节），但固定数量的分割槽在操作上更简单，因此许多固定分割槽资料库选择不实施分割槽分割。因此，一开始配置的分割槽数就是你可以拥有的最大节点数量，所以你需要选择足够多的分割槽以适应未来的增长。但是，每个分割槽也有管理开销，所以选择太大的数字会适得其反。
如果资料集的总大小难以预估（例如，可能它开始很小，但随著时间的推移会变得更大），选择正确的分割槽数是困难的。由于每个分割槽包含了总资料量固定比率的资料，因此每个分割槽的大小与丛集中的资料总量成比例增长。如果分割槽非常大，再平衡和从节点故障恢复变得昂贵。但是，如果分割槽太小，则会产生太多的开销。当分割槽大小 “恰到好处” 的时候才能获得很好的效能，如果分割槽数量固定，但资料量变动很大，则难以达到最佳效能。
#### 动态分割槽