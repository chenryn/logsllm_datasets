## 我们学到的
本部分根据我们在 g3doc 和 EngPlay
方面的经验，概述了我们围绕文档的一些核心原则。
###   在可能的情况下，文档应与源代码相关的代码一起存在于源代码管理中
这使 SWE 和 SRE
能够使用与创建和编辑代码的相同工具编辑其文档、发送以供审阅和提交到源代码管理。因此，工程师更有可能维护他们创建的文档。此外，文档的可预测位置使文档更容易被人类和系统发现。
但是，我们还发现，将文档与其关联的代码放在一起，可以启用新的特性和功能，从而消除了创建和维护文档的大部分工作。例如：
-   引入 Markdown 语法的自动整理和格式处理器，这些都集成到我们的 IDE
    和预提交管道中，无需手动修补 Markdown
-   可以用文档站点上的代码配置文件来公开项目的元数据（如项目代码位置和关键联系人）
-   能够自动检测文档库中的问题链接并通知所有者
-   能够在文档中包括实时代码，而不再依赖静态代码块（随着基础代码更改而注定会变得陈旧）
我们的经验告诉我们，最好的解决方案是让文档与代码并肩而居；然而，我们意识到它并不总是可能的。如果这个
g3doc
风格的系统不适合你的项目，最关键的步骤是*为文档选择一个规范的存储库*。
### 选用最简单标记语言来实现你的需求
   我们的 g3doc 决定使用 Markdown
的两个核心原则是，*内容的源文件必须易于编辑和阅读*，并且*内容应该与显示分开*。在我们的系统中，g3doc
服务器处理渲染和格式化。但是应始终可以绕过渲染环节直接读取源文件中的内容，事实上，在某些故障情况下，SRE
行动手册在源中可读是至关重要的。允许使用原始
HTML，但出于可读性的原因，不鼓励使用原始 HTML。
但是，根据你的要求可能有不同的指导原则。[DocBook](https://en.wikipedia.org/wiki/DocBook)是阅读源文件爱好者的噩梦，但它支持大量灵活的输出。不是每个人都分享我们对
Markdown 的喜爱。人们经常选择它，因为 GitHub 支持它，但 GitHub
也支持大量其他格式，如重组文本 （RST） 和 ASCIIdoc。另外有很多不同风格的
Markdown（g3doc 使用 GitHub 风格与一些添加的自定义，我们的渲染器是基于
Hoedown）。请记住，你的目标是尽可能消除创建和编辑文档任务中的阻力。选择标记语言的带来的任何复杂性都必须以你从中获得的实际好处来验证。
### 集成是推广的关键
  我们的第一次集成非常简单：在文档提交到源代码管理之前预览文档的呈现版本。而将链接添加到我们的代码评审工具对于推广可以说是至关重要，g3doc
的使用量在推出后立即激增。同样，我们可以很容易地直接从代码搜索和浏览工具查看文档的呈现版本。许多较小的集成（例如支持内部
URL
的短链接和语法突出显示）随后出现；它们本身都不重要，但每个改进都消除了一些使用上的阻力，因此使平台更具吸引力。较新的集成侧重于从文档编写过程中去除大部分辛劳。例如，如果清理器在检查文件时发现存在样式和格式设置问题，格式化文件会自动设置
Markdown 文件的格式，从而使它们符合 g3doc
样式指南。这两种工具都可以从内部使用的所有 IDE 中调用。 
从本质上讲，我们学到的最重要的一课是，*工程师其实愿意创建和维护文档，只要你让它们尽可能简单*   。
# 更好的文档：最佳实践
 在本节中，我们将介绍有关文档实践的建议，以提高组织的文档质量。
## 为每个文档类型创建模板
 确定服务提供的每个文档的功能要求和质量指标后，通过将这些要求构建到一组模板中来强化这些要求。
模板使文档更易于创建和使用。
-   通过提供清晰的结构，*使作者能够轻松地创建文档*，以便快速填充相关信息。使用良好的模板，创建简单的文档与填写表单一样简单。
-   通过包含所有文档必需部分的章节*来确保文档完整*。如果某条信息尚未提供或不适用，最好将其标记为"TBD"或"N/A"，但应在每个部分都写点什么。
-   *使读者能够轻松且快速*理解文档的主题、可能包含的信息类型以及文档的组织方式。此外，模板应确保读者知道文档上次更新的时间以及更新者。
[*站点可靠性工程*一书](https://landing.google.com/sre/book/index.html)包含几个文档模板示例。下面是一个示例
Playbook 模板，该模板为工程师填写内容提供了结构和指导：
    Title
    The title should be the name of the alert (e.g., Generic Alert_AlertTooGeneric).
    Author:
    Last updated:
    Overview
    Address the following:
    What does this alert mean?
    Is it a paging or an email-only alert?
    What factors contributed to the alert?
    What parts of the service are affected?
    What other alerts accompany this alert?
    Who should be notified?
    Alert Severity
    Indicate the reason for the severity (email or paging) of the alert 
    and the impact of the alerted condition on the system or service.
    Verification
    Provide specific instructions on how to verify that the condition is ongoing.
    Troubleshooting
    List and describe debugging techniques and related information sources here.
    Include links to relevant dashboards. Include warnings. Address the following:
    What shows up in the logs when this alert fires?
    What debug handlers are available?
    What are some useful scripts or commands? What sort of output do they generate?
    What are some additional tasks that need to be done after the alert is resolved?
    Solution
    List and describe possible solutions for addressing this alert. 
    Address the following:
    How do I fix the problem and stop this alert?
    What commands should be run to reset things?
    Who should be contacted if this alert happened due to user behavior?
    Who has expertise at debugging this issue?
    Escalation
    List and describe paths of escalation. Identify whom to notify (person or team) 
    and when. If there is no need to escalate, indicate that.
    Related Links
    Provide links to relevant related alerts, procedures, and overview documentation.
## 更好 \> 最佳：为质量设定现实标准
 Google 提出 SRE
理念的核心原则是，努力使我们的系统足够可靠，从而让用户满意，但没有必要无止境的追求可靠性。提高可靠性是有代价的：最大限度地提高稳定性，这会限制新功能的开发速度以及产品交付用户的速度，并大大增加其成本，进而减少团队可以支持的功能数量。
要求高标准的写作可能会适得其反，使工程师懒得创建文档。同样，如果能保证关键信息始终得到更新、可发现且清晰，再花额外精力对文档进行美化就是浪费时间，这些时间本来可以用来改进文档的其他部分（或改进服务本身）。正如代码是一个迭代过程一样，文档也是如此。
学会接受 安妮·拉莫特所说的"肮脏的初稿"：一个不完美的文件比一个尚不存在的完美文件更有用。问问自己：此文档是否满足其功能要求，以及所需的信息是否存在并清楚地传达？如果答案为"是"，则只需要对文档进行最低程度的合理更改。一旦文档达到质量要求后，就可以*接受*。文档质量是*好事*，但不要因为作者在文档中使用被动语气而阻止文档提交，不要做那种律法主义的工程师。
## 要求将文档作为代码评审的一部分
  文档就像测试：好事情，但没有人真的想动手。但是要记住，代码审查员有权力：他们可以不批准发布，直到文档足够。这样做很有必要！
当然，并非所有更改都需要文档更新。下面是一个很好的经验法则：
> 如果项目的开发人员、SRE
> 或用户需要在此更改后更改其行为，则更新列表中应包括文档更改。
但是，如果更改不需要测试，那么文档可能*也不必*更新。比如只是简单代码重构和实验性的微调。这需要运用你的判断力来决定。
与往常一样，尽可能简化和自动化此过程。在
Google，团队可以强制执行预提交检查，除非发现了指示不需要文档更新的标志（对样式问题进行预提交检查也能避免许多麻烦）。我们还允许文件的所有者提交更改，且无需审阅。
如果你的团队对要求犹豫不决，请提醒成员，简单的项目文档其实就是将头脑中的信息保存下来，以便其他人以后可以访问这些信息，*而不必打扰你*。文档更新通常并不繁琐；通常，文档的大小会随代码变动的多少而变化。如果包含一千行代码变动，则可能需要编写几百行文档。如果只是单行更改，可能只需要更改一两个单词。