# MACAO: A Maliciously-Secure and Client-Efficient Active ORAM Framework

**Authors:**
- Thang Hoang, CSE, University of South Florida
- Jorge Guajardo, Robert Bosch LLC — RTC
- Attila A. Yavuz, CSE, University of South Florida

**Abstract:**
Oblivious Random Access Machine (ORAM) allows a client to hide access patterns, providing strong privacy for data outsourcing. An ideal ORAM scheme should offer low client bandwidth, low server computation overhead, and the ability to compute over encrypted data. S3ORAM (CCS'17) is an efficient active ORAM scheme that uses secret sharing to achieve these properties. However, S3ORAM only provides security in the semi-honest setting, which is insufficient in the presence of malicious adversaries.

In this paper, we introduce MACAO, a new multi-server ORAM framework that ensures integrity, access pattern obliviousness against active adversaries, and secure computation over accessed data. MACAO leverages authenticated secret sharing techniques and the tree-ORAM paradigm to achieve low client communication, efficient server computation, and low storage overhead. We fully implemented MACAO and conducted extensive experiments on real cloud platforms (Amazon EC2) to validate its performance. Our results show that MACAO can match the performance of S3ORAM while offering security against malicious adversaries, making it a suitable candidate for integration into distributed file systems with encrypted computation capabilities.

## 1. Introduction

Oblivious Random Access Machine (ORAM), first introduced in [30], provides strong privacy for data outsourcing by ensuring data confidentiality and access pattern obliviousness. Since its introduction, numerous ORAM schemes have been proposed for both single-server and distributed settings [30, 59, 64, 51, 63, 9, 66]. ORAM is a fundamental building block for privacy-preserving data outsourcing applications in both single-client and multi-client settings [45, 15, 10] for passive and active security [70, 41, 44, 56, 62, 69, 45].

### 1.1 ORAM Challenges and Desired Properties

As a core component of any oblivious data storage service, ORAM should ideally offer the following properties:

- **Low Communication and Storage Overhead:** Efficient ORAM constructions (e.g., Tree-ORAM [59], Path-ORAM [64], Circuit-ORAM [66], rORAM [14]) often focus on the passive setting, where the server provides only storage. These schemes typically have a logarithmic communication lower bound [40, 31, 12], which can be costly in standard client-server settings [70, 41, 62, 69]. For practical oblivious file systems, the underlying ORAM scheme should provide both low communication and low storage overhead at the client.
  
- **Low Computational Overhead:** To reduce communication, active ORAM schemes allow the server to perform computations on behalf of the client [5, 22, 25, 47, 46, 21, 53]. However, most of these schemes still face the logarithmic communication bound unless they use advanced cryptographic primitives like partially/somewhat/fully Homomorphic Encryption (HE) [50, 27] (e.g., Onion-ORAM [22]). While HE has improved, it still incurs high computational overhead, increasing access latency and degrading service quality.

- **Secure Computation over Encrypted Data:** An ideal ORAM should not only provide oblivious access but also support secure computation over outsourced data, similar to secure multi-party computation. Most ORAM schemes do not offer this feature. To our knowledge, only Onion-ORAM [22] and S3ORAM [33] support secure computation on accessed data. However, Onion-ORAM is inefficient, and S3ORAM only offers security against passive adversaries.

- **Security Against Active Adversaries:** S3ORAM [33] offers advantages in terms of computational overhead, low bandwidth, and client storage but only provides security in the semi-honest model. In practice, ORAM protocols may face active adversaries who can inject malicious inputs to compromise client privacy. While malicious security can be achieved in passive ORAMs (e.g., using Merkle trees or authentication techniques), it has not been extensively explored in the active ORAM setting. Devadas et al. [22] proposed a solution for malicious security in active ORAM, but it requires significant client-side bandwidth and computation, leading to increased access delay.

Our goal is to create an active ORAM framework that achieves low client communication and storage overhead, efficient computation, and security against active adversaries. This framework integrates various secure multi-party computation techniques, information-theoretic message authentication codes, and the tree-ORAM paradigm to achieve these properties while naturally extending to secure computation over encrypted data. The overall aim is to develop ORAM schemes suitable for privacy-preserving distributed applications, such as oblivious distributed file systems.

### 1.2 Our Contributions

In this paper, we propose MACAO, a comprehensive MAliciously-secure and Client-efficient Active ORAM framework. MACAO utilizes appropriate secret sharing techniques, efficient eviction strategies, and information-theoretic Message Authentication Codes (MACs) to ensure integrity, prevent malicious behaviors, and achieve comparable efficiency to state-of-the-art ORAM schemes. Our MACAO framework includes two main multi-server ORAM schemes: Πrss and Πspdz. Πrss is based on replicated secret sharing [35], requiring three non-colluding servers (privacy level t = 1). Πspdz is built on SPDZ secret sharing [20] following the preprocessing model, operating in the (cid:96)-server setting ((cid:96) ≥ 2) with optimal privacy (t = (cid:96) − 1). We construct authenticated PIR protocols based on RSS and SPDZ and prove their security against malicious adversaries. Additionally, we propose optimizations to reduce bandwidth overhead, albeit at the cost of reducing information-theoretic to computational security. Table I summarizes key characteristics of MACAO compared to state-of-the-art ORAM schemes.

In summary, our main contributions are:

- **Multi-server active ORAM with security against active adversaries:** MACAO provides data confidentiality and integrity, access pattern obliviousness, and the ability to detect, with high probability, if malicious servers have tampered with the protocol inputs/outputs.
- **Oblivious distributed file system applications and secure computation:** MACAO relies on secret sharing, which offers additive and multiplicative homomorphic properties. After a block is accessed, it can be further computed directly on the servers, making MACAO a core building block for designing a full-fledged Oblivious Distributed File System (ODFS) with secure computation capabilities.
- **Full-fledged implementation and performance evaluation:** We fully implemented MACAO and compared its performance with state-of-the-art ORAM schemes on real cloud platforms (Amazon EC2). Our experimental results confirm MACAO's efficiency, showing it to be up to seven times faster than single-server ORAMs, with comparable delay to S3ORAM [33] while offering malicious security. Detailed cost analysis is provided in §V-B4.

It is important to note that in the context of a multi-server active ORAM scheme with malicious security, client-bandwidth overhead is a critical consideration.