title:MACAO: A Maliciously-Secure and Client-Efficient Active ORAM
Framework
author:Thang Hoang and
Jorge Guajardo and
Attila A. Yavuz
MACAO: A Maliciously-Secure and Client-Efﬁcient
Active ORAM Framework
Thang Hoang
Jorge Guajardo
Attila A. Yavuz
CSE, University of South Florida
Robert Bosch LLC — RTC
CSE, University of South Florida
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Oblivious Random Access Machine (ORAM) allows
a client to hide the access pattern and thus, offers a strong level of
privacy for data outsourcing. An ideal ORAM scheme is expected
to offer desirable properties such as low client bandwidth, low
server computation overhead and the ability to compute over
encrypted data. S3ORAM (CCS’17) is an efﬁcient active ORAM
scheme, which takes advantage of secret sharing to provide ideal
properties for data outsourcing such as low client bandwidth, low
server computation and low delay. Despite its merits, S3ORAM
only offers security in the semi-honest setting. In practice, an
ORAM protocol is likely to operate in the presence of malicious
adversaries who might deviate from the protocol to compromise
the client privacy.
In this paper, we propose MACAO, a new multi-server ORAM
framework, which offers integrity, access pattern obliviousness
against active adversaries, and the ability to perform secure
computation over the accessed data. MACAO harnesses authen-
ticated secret sharing techniques and tree-ORAM paradigm to
achieve low client communication, efﬁcient server computation,
and low storage overhead at the same time. We fully implemented
MACAO and conducted extensive experiments in real cloud
platforms (Amazon EC2) to validate the performance of MACAO
compared with the state-of-the-art. Our results indicate that
MACAO can achieve comparable performance to S3ORAM while
offering security against malicious adversaries. MACAO is a
suitable candidate for integration into distributed ﬁle systems
with encrypted computation capabilities towards enabling an
oblivious functional data outsourcing infrastructure.
I.
INTRODUCTION
Originally introduced in [30], Oblivious Random Access
Machine (ORAM) offers a strong level of privacy for data
outsourcing by enabling data conﬁdentiality and access pat-
tern obliviousness simultaneously. Since then, many ORAM
schemes have been proposed in both the single-server and
distributed settings [30], [59], [64], [51], [63], [9], [66].
ORAM is accepted as a fundamental building block of privacy-
preserving data outsourcing applications in the single client
or multi-client setting [45], [15], [10] for passive and active
security [70], [41], [44], [56], [62], [69], [45].
A. ORAM Challenges and Desired Properties
As a core building block of any oblivious data storage ser-
vice, ORAM is expected to offer the following ideal properties:
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24313
www.ndss-symposium.org
it
is desirable that
• Low communication and storage overhead: Some of the
most efﬁcient ORAM constructions (e.g., Tree-ORAM [59],
Path-ORAM [64], Circuit-ORAM [66], rORAM [14]) focused
on the passive setting, where the server exclusively offers a
storage-only service (i.e., no computation). It has been shown
that there is a logarithmic communication lower bound in
passive ORAM [40], [31], [12]. This overhead, however, can
be costly in the standard client-server setting [70], [41], [62],
[69]. In particular, most efﬁcient passive ORAM schemes must
transmit 40×-80× extra blocks from the server to the client
and vice versa to access a block [64], [66], [59]. Given a large
block size, this overhead makes ORAM often unsuitable for
bandwidth-constrained clients (e.g., home Internet, mobile data
plans). Other works (e.g., [61]) offer low client communication
overhead at the expense of large client storage. For practical
oblivious ﬁle systems,
the underlying
ORAM scheme provides both, low communication and low
storage overhead at the client.
• Low computational overhead: To achieve low communica-
tion, active ORAM schemes have been proposed, in which the
server can perform some computation on behalf of the client
[5], [22], [25], [47], [46], [21], [53]. However, most of these
constructions cannot surpass the logarithmic communication
bound, unless sophisticated cryptographic primitives such as
partially/somewhat/fully Homomorphic Encryption (HE) [50],
[27] are used (e.g., Onion-ORAM [22]). While recent years
have seen considerable improvements in the performance of
HE implementations, the use of HE still incurs high computa-
tional overhead at the client and server during the online ac-
cess. As a result, the access latency may signiﬁcantly increase,
thereby degrading the quality of service.
• Secure computation over encrypted data: It is highly de-
sirable for an oblivious data outsourcing service to offer not
only oblivious access but also secure computation over the out-
sourced data. Akin to the services offered by secure multi-party
computation, such an ORAM offers an ideal cryptographic
framework to construct privacy-persevering and functional data
outsourcing services. Most proposed ORAM schemes do not
offer this computation feature. To the best of our knowledge,
only Onion-ORAM [22] and S3ORAM [33] support secure
computation on accessed data. Unfortunately, Onion-ORAM is
known to be inefﬁcient, while S3ORAM only offers security
against passive adversaries.
• Security against active adversaries: As previously men-
tioned, S3ORAM [33] offers advantages in terms of com-
putational overhead, low bandwidth and client storage but it
only offers security in the semi-honest model (i.e., passive
adversaries). In practice, an ORAM protocol
is likely to
operate in the presence of active adversaries, who might inject
malicious inputs into the protocol to compromise the client
TABLE I: Summary of state-of-the-art ORAM schemes.
Scheme
Bandwidth Overhead†
Server-server
Client
Block Storage‡
# servers§
Security
Comp. over
Enc. Data
Block
Size∗
Ω(1)
Client-server
O(log N )
O(log N )
O(log N )
O(log N )
O(log N )
O(log N )
O(1)
-
-
-
-
-
-
-
Ω(log2 N )
Ω(1)
Ω(log2 N )
Ω(1)
Ω(1)
O(log N )
O(log N )
O(1)
O(1)
O(1)
O(1)
O(1)
O(log N )
O(log N )
O(log N )
O(log N )
√
O(
N )
O(1)
O(1)
Semi-Honest
Semi-Honest
Semi-Honest
Semi-Honest
Ring-ORAM [53]
CKN+18 [16]
GKW18 [32]
S3ORAM [33]
Path-ORAM [64]
Circuit-ORAM [66]
SS13 [61]
LO13 [42]
Onion-ORAM [22]
MACAO (Πrss)
MACAO (Πspdz)
• We refer reader to §V-B for the detail experimental comparisons between MACAO schemes and some of these counterparts.
†Bandwidth overhead denotes the number of blocks being transmitted between the client and the server(s) or between the servers.
∗This indicates the minimal block size needed to absorb the transmission cost of the retrieval query and the eviction instructions, thereby
achieving the desirable client-bandwidth overhead.
‡Client block storage is deﬁned as the number of data blocks being temporarily stored at the client. This is equivalent to the stash component
used in [64], [53], which, therefore, does not include the cost of storing the position map of size O(N log N ). Notice that all the ORAM
schemes in this table, except [42], [32], require such a position map component. However, we can apply recursive technique in [59] to store
the position map on the server at the cost of increasing a small number of communication rounds [61], [59].
§S3ORAM and Πspdz offer the property that allows a certain number of colluding servers in the system (privacy level t ≥ 1) by increasing the
number of servers. Other multi-server ORAM schemes do not offer this scalability (t = 1) efﬁciently, and require a ﬁxed number of servers.
Malicious
Malicious
Malicious
Malicious
Malicious
×
×
×
(cid:88)
×
×
×
×
(cid:88)
(cid:88)
O(log N )
O(log N )
Ω(log2 N )
Ω(1)
Ω(log6 N )
1
3
2
1
1
2
2
1
3
Malicious
Ω(log N )
2t + 1
t + 1
access pattern and data integrity. While malicious security can
be easily achieved with passive ORAMs (e.g., using Merkle
tree or authentication techniques), it has not been extensively
explored in the active ORAM setting. Devadas et al. [22]
proposed a solution to achieve malicious security for active
ORAM. However, it requires the client to transmit a large
portion of data and perform homomorphic computations to
verify the integrity of server computation. This strategy may
signiﬁcantly increase the access delay due to the increase of
bandwidth and computation overhead at the client.
Our objective is to create an active ORAM framework
that achieves low client communication and storage over-
head, efﬁcient computation, and security against active ad-
versaries simultaneously. Our framework creates synergies
among various secure multi-party computation techniques,
information-theoretic message authentication codes and tree-
ORAM paradigm to achieve these properties while offering a
natural extension for secure computation over the encrypted
data. The overall goal is to develop ORAM schemes that are
suitable for privacy-preserving distributed applications such
as oblivious distributed ﬁle systems.
B. Our Contributions
In this paper, we propose MACAO, a comprehensive
MAliciously-secure and Client-efﬁcient Active ORAM frame-
work. MACAO harnesses suitable secret sharing techniques, ef-
ﬁcient eviction strategy along with information-theoretic Mes-
sage Authentication Code (MAC), which (i) offers integrity
check, (ii) prevents malicious behaviors and (iii) achieves
a comparable efﬁciency to state-of-the-art ORAM schemes
simultaneously. Our MACAO framework comprises two main
multi-server ORAM schemes: Πrss and Πspdz. We design Πrss
based on replicated secret sharing [35], which requires three
servers and there is no collusion among the servers (privacy
level t = 1). On the other hand, Πspdz is built on SPDZ
secret sharing [20] following the preprocessing model, which
can operate in the (cid:96)-server setting ((cid:96) ≥ 2) with the optimal
level of privacy (i.e., t = (cid:96) − 1). We construct a series of
authenticated PIR protocols based on RSS and SPDZ and
prove that they are secure against the malicious adversary.
Additionally, we propose several optimization tricks to reduce
the bandwidth overhead at the cost of reducing information-
theoretic to computational security. Table I outlines some
key characteristics of MACAO compared with state-of-the-art
ORAM schemes.
In summary, our main contributions are as follows.
• Multi-server active ORAM with security against active
adversaries: MACAO offers data conﬁdentiality and integrity,
access pattern obliviousness in the presence of malicious
adversaries. MACAO enables the client to detect, with high
probability, if the malicious server(s) has tampered with the
inputs/outputs of the protocol.
• Oblivious distributed ﬁle system applications and secure
computation: Our MACAO framework relies on secret sharing
as the core building block, which offers additive and multi-
plicative homomorphic properties. Therefore, after a block is
accessed, it can be computed further directly on the server(s).
This property permits MACAO to serve as a core building
block towards designing a full-ﬂedged Oblivious Distributed
File System (ODFS) with secure computation capacity.
• Full-ﬂedged implementation and performance evaluation:
We fully implemented MACAO framework and compared its
performance with state-of-the-art ORAM schemes on real-
cloud platforms (i.e., Amazon EC2). Our experimental results
conﬁrmed the efﬁciency of MACAO, in which it is up to
seven times faster than single-server ORAMs. The delay of
MACAO schemes is comparable to S3ORAM [33] while
offering malicious security. We provide detail cost analysis
of MACAO schemes in §V-B4.
In addition, it is important to point out that in the context of
a multi-server active ORAM scheme with malicious security,
2
client-bandwidth overhead,