browser kernel. Likewise, the interposition layer receives
browser kernel’s upcalls, such as keyboard or mouse
events, and synthesizes them in the Trident instance.
For example, suppose a user navigates to a web page
a.com, which embeds a cross-principal frame b.com.
First, the browser kernel will fetch a.com’s HTML con-
tent, create a new a.com process with a Trident compo-
nent, and pass the HTML to Trident for rendering. Dur-
ing the rendering process, we intercept the frame naviga-
tion event for b.com, determine that it is cross-principal,
and cancel it. The frame’s DOM element in a.com’s
DOM is left intact as a placeholder, making the interpo-
Call Name
getSameOriginContent(URL)
getCrossOriginContent(URL)
delegate(URL, delegatedWindowSpec)
postMessage(windowID, msg, targetOrigin)
display(windowID, bitmap)
back()
forward()
navigate (windowID, URL)
createTopLevelWindow (URL)
changeWindow (windowID, position, size)
Type
syscall
syscall
syscall
syscall
syscall
syscall
syscall
syscall
syscall
syscall
syscall writePersistentState (type, state)
syscall
syscall
upcall
upcall
upcall
upcall
upcall
readPersistentState (type)
lockPersistentState (type)
destroy(windowID)
resize(windowID, windowSpec)
createPlugin(windowID, URL, content)
createDocument(windowID, URL, content)
sendEvent(windowID, eventInfo)
Description
retrieves same origin content
retrieves script or css content
delegates screen area to a different principal
cross-frame messaging
sets the display buffer for the window
steps back in the window history
steps forward in the window history
navigates a window to URL
creates a new browser tab for the URL speciﬁed
updates the location and size of a window
allows writing to origin-partitioned storage
allows reading of origin-partitioned storage
locks one type of origin-partitioned storage
closes a browser instance
changes the dimensions of the browser instance
creates a plugin instance
creates a browser instance
passes an event to the browser instance
Table 3: Some Gazelle System Calls
sition transparent to a.com. We extract the frame’s po-
sition, dimensions, and CSS properties from this element
through DOM-related COM interfaces, and send this in-
formation in a delegate system call to the browser ker-
nel to allow the landlord a.com to “rent out” part of its
display area to the tenant b.com. The browser kernel
then creates a new b.com process (with a new instance
of Trident), and asks it to render b.com’s frame. For any
rendered display updates for either a.com or b.com,
our interposition code obtains a bitmap of display con-
tent from Trident using the IViewObject interface and
sends it to the browser kernel for rendering.
One intricacy we faced was in rerouting all network
requests issued by Trident instances through the browser
kernel. We found that interposing on all types of fetches,
including frame, script, and image requests, to be very
challenging with COM hooks currently exposed by Tri-
dent. Instead, our approach relies on a local web proxy,
which runs alongside the browser kernel. We conﬁgure
each Trident instance to use our proxy for all network
requests, and the proxy converts each request into a cor-
responding system call to the browser kernel, which then
enforces our security policy and completes the request.
One other implementation difﬁculty that we encoun-
tered was to properly manage the layout of cross-origin
images. It is easy to render a cross-origin image in a sep-
arate process, but difﬁcult to extract the image’s correct
layout information from the host page’s Trident instance.
We anticipate this to be an overcomable implementation
issue.
In our current prototype, we are keeping cross-
origin images in the same process as their host page for
proper rendering of the pages.
Our interposition layer ensures that our Trident com-
ponents are never trusted with sensitive operations, such
as network access or display rendering. However, if a
Trident renderer is compromised, it could bypass our in-
terposition hooks and compromise other principals using
the underlying OS’s APIs. To prevent this, we are in the
process of implementing an OS-level sandboxing mecha-
nism, which would prevent Trident from directly access-
ing sensitive OS APIs. The feasibility of such a browser
sandbox has already been established in Xax [15] and
Native Client [47].
To verify that such an implementation does not cause
rendering problems with popular web content, we used
our prototype to manually browse through the top 20
Alexa [5] web sites. We checked the correctness of
Gazelle’s visual output against unmodiﬁed Internet Ex-
plorer and brieﬂy veriﬁed page interactivity, for exam-
ple by clicking on links. We found that 19 of 20 web
sites rendered correctly. The remaining web site exposed
a (ﬁxable) bug in our interposition code, which caused
it to load with incorrect layout. Two sites experienced
crashes (due to more bugs) when trying to render em-
bedded cross-principal ’s hosting ads. How-
ever, the crashes only affected the  processes;
the main pages rendered correctly with the exception of
small blank spaces in place of the failed ’s.
This illustrates a desirable security property of our archi-
tecture, which prevents malicious or misbehaving cross-
origin tenants from affecting their landlords or other
principals.
Gazelle
Time
668 ms
602 ms
939 ms
955 ms
Memory
Used
9 MB
14 MB
16 MB
6 MB
Internet Explorer 7
Memory
Time
635 ms
115 ms
499 ms
1139 ms
Used
14 MB
0.7 MB
1.4 MB
3.1 MB
Google Chrome
Time
500 ms
230 ms
480 ms
1020 ms
Memory
Used
25 MB
1.8 MB
7.6 MB
1.4 MB
5773 ms
88 MB
3213 ms
53 MB
3520 ms
19.4 MB
1. Browser startup (no page)
2. New tab (blank page)
3. New tab (google.com)
4. Navigate from google.com
to google.com/ads
5. Navigate to nytimes.com
(with a cross-origin frame)
Table 4: Loading times and memory overhead for a sequence of typical browser operations.
8 Evaluation
In this section, we measure the impact of our architecture
on browser performance. All tests were performed on an
Intel 3.00Ghz Core 2 Duo with 4GB of RAM, running
32-bit Windows Vista with a gigabit Ethernet connec-
tion. To evaluate Gazelle’s performance, we measured
page loading latencies, the memory footprint, and re-
sponsiveness of our prototype in comparison with IE7,
a monolithic browser, and Google Chrome v1, a multi-
process browser. We found that while Gazelle performs
on-par with commercial browsers while browsing within
an origin, it introduces some overhead for cross-origin
navigation and rendering embedded cross-origin princi-
pals (e.g., frames). Nevertheless, our main sources of
overhead stem from our interposition layer, various ini-
tialization costs for new browser instances, and the un-
optimized nature of our prototype. We point out simple
optimizations that would eliminate much of the overhead
along the way.
Page load latency. Table 4 shows the loading times
for a series of browser operations a typical user might
perform using our prototype, IE7, and Google Chrome.
The operations are repeated one after another within the
same browser. A web page’s loading time is deﬁned as
the time between pressing the “Go” button and seeing the
fully-rendered web page. All operations include network
latency.
Operation 1 measures the time to launch the browser
and is similar for all three browsers. Although Gazelle’s
browser kernel is small and takes only 225 ms to start,
Gazelle also initializes the local proxy subsystem (see
Section 7), which takes an additional 443 ms. Operations
2 and 3 each carry an overhead of creating a new process
in Gazelle and Chrome, but not IE7. Operation 4 reuses
the same google.com process in Gazelle to render a
same-origin page to which the user navigates via a link
on google.com. Here, Gazelle is slightly faster than
both IE7 and Chrome, possibly because Gazelle does not
yet manage state such as browsing history between nav-
igations. Finally, operation 5 causes Gazelle to create a
new process for nytimes.com to render the popular
news page 3. In addition, NYTimes contains an embed-
ded cross-principal , which triggers window
delegation and another process creation event in Gazelle.
Gazelle’s overall page load latency of 5773 ms includes
the rendering times of both the main page and the em-
bedded , with the main page becoming visi-
ble and interactive to the user in 5085 ms.
Compared to both IE7 and Chrome, it is expected that
Gazelle will have a performance overhead due to ex-
tra process creation costs, messaging overhead, and the
overhead of our Trident interposition layer as well as Tri-
dent itself. Table 5 breaks down the major sources of
overhead involved in rendering the three sites in Table 4.
Our Trident interposition layer is a big source of
overhead, especially for larger sites like NYTimes.com,
where it consumes 813 ms. Although we plan to op-
timize our use of Trident’s COM interfaces, we are also
limited by the Trident host’s implementation of the hooks
that we rely on, and by the COM layer which exposes
these hooks. Nevertheless, we believe we could mitigage
most of this latency if Trident were to provide us with a
direct (non-COM) implementation for a small subset of
its hooks that Gazelle requires.
Our local proxy implementation for network interpo-
sition constitutes another large source of overhead, for
example 541 ms for NYTimes.com. Much of this over-
head would disappear if Trident were to make direct net-
work system calls to the browser kernel, rather than go-
ing through an extra proxy indirection. Another part of
this overhead stems from the fact that the browser kernel
currently releases web page data only when a whole net-
work transfer ﬁnishes; instead, it could provide browser
instances with chunks of data as soon as they arrive (e.g.,
by changing getContent system calls to the semantics
of a UNIX read() system call), allowing them to better
overlap network transfers with rendering.
Process creation is an expected source of overhead that
3In contrast, Chrome reuses the tab’s old google.com process
increases whenever sites embed cross-principal content,
such as NYTimes’s cross-origin . As well,
each process must instantiate and initialize a new Trident
object, which is expensive. As an optimization, we could
use a worker pool of a few processes that have been pre-
initialized with Trident. This would save us 275 ms on
NYTimes’s load time and 134 ms on google.com’s
load time.
We encountered an unexpected performance hit when
initializing named pipes that we use to transfer system
calls: a new process’s ﬁrst write to a pipe stalls for a con-
siderable time. This could be caused by initialization of
an Interop layer between .NET and the native Win32 pipe
interfaces, on which our implementation relies. We can
avoid this overhead by either using an alternate imple-
mentation of a system call transfer mechanism, or pre-
initializing named pipes in our worker pool. This would
save us 439 ms in NYTimes’s render time.
Retrieving bitmap display updates from Trident and
sending them to the browser kernel is expensive for large,
complex sites such as NYTimes.com, where this takes
422 ms. Numerous optimizations are possible, including
image compression, VNC-like selective transfers, and a
more efﬁcient bitmap sharing channel between Trident
and the browser kernel. Our mechanism for transferring
bitmap updates currently performs an inefﬁcient .NET-
based serialization of the image’s data (which takes 176
ms for NYTimes); passing this data directly would fur-
ther improve performance.
Overall, we believe that with the above optimizations,
Gazelle’s performance would be on par with production
browsers like Chrome or IE8; for example, we anticipate
that NYTimes.com could be rendered in about 3.6 s.
Memory overhead. As a baseline measurement, the
browser kernel occupies around 9MB of memory after
a page load. This includes the user interface compo-
nents of the browser to present the rendered page to the
user and the buffers allocated for displaying the rendered
page. Memory measurements do not include shared li-
braries used by multiple processes.
Table 4 shows the amount of memory for perform-
ing various browsing operations. For example, to open
a new tab to a blank page, Gazelle consumes 14MB, and
to open a new tab for google.com, Gazelle consumes
an additional 16MB. Each empty browser instance uses
1.5MB of internal storage plus the memory required for
rendered content. Given our implementation, the lat-
ter closely corresponds to Trident’s memory footprint,
which at the minimum consists of 14MB for a blank
page.
In the case of NYTimes, our memory footprint
further increases because of structures allocated by the
interposition layer, such as a local DOM cache.
Responsiveness. We evaluated the response time of a
user-generated event, such as a mouse click. When the
browser kernel detects a user event, it issues a sendEvent
upcall to the destination principal’s browser instance.
Such calls take only 2 ms on average to transfer, plus
1 ms to synthesize in Trident. User actions might lead
to display updates; for example, a display update for
google.com would incur an additional 77 ms. Most
users should not perceive this overhead and will experi-
ence good responsiveness.
Process creation. In addition to latency and memory
measurements we also have tested our prototype on the
top 100 popular sites reported by Alexa [5] to provide an
estimate of the number of processes created for different
sites. Here, we place a cross-origin image into a separate
process to evaluate our design. The number of processes
created is determined by the use of different-origin con-
tent on sites, which is most commonly image content.
For the top 100 sites, the median number of processes re-
quired to view a single page is 4, the minimum is 1, and
the maximum is 28 (caused by skyrock.com, which
uses an image farm). Although creation of many pro-
cesses introduces additional latency and memory foot-
print, we did not experience difﬁculties when Gazelle
created many processes during normal browsing. Our
test machine easily handles a hundred running processes,
which are enough to keep 25 average web sites open si-
multaneously.
9 Discussions on compatibility vs. security
While Gazelle’s architecture can be made fully backward