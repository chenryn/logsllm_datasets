Effectiveness in RO2. Similar to passive IDSs detecting
malicious activities, we redeﬁne false positive and negative (FP
and FN), to quantify the effectiveness of the disruption policy
in identifying and isolating proactive attacks.
Deﬁnition 3. RO2 FN: adversaries successfully obtain the
measurements from real devices.
Deﬁnition 4. RO2 FP: legitimate applications access inacces-
sible virtual nodes. Note that there are no FPs for properly-
conﬁgured applications that know the identities of real devices.
In Appendix A, we present FPs for applications that are
misconﬁgured or unaware of DefRec.
The proposed probabilistic dropping protocol makes FN
rate of RO2 very low, e.g., less than 10−10 even for a small
24-bus power grid (see Figure 21 in Appendix A). To better
interpret those results, we estimate the time for adversaries to
learn real measurements through proactive attacks against the
inaccessible-virtual-node to real-device ratio. Similar to the
evaluation of RO1, we assume that adversaries can actively
probe control networks with a throughput of 10 Gigabytes per
second. In practice, probing a network with such or bigger
11
24-bus30-bus73-bus118-bus406-bus1153-bus05%10%15%20%Accessible-Virtual-Node to Real-Device Ratio100 years1,000 years10,000 years100,000 years24-bus30-bus73-bus118-bus406-bus1153-bus02%4%6%8%10%Inaccessible-Virtual-Nodeto Real-Device Ratio100 years1,000 years10,000 years100,000 yearsFig. 13: Virtual nodes vs. com-
promised data when FN rate is
less or equal to 0.5%.
the overhead of state estimation, but require DefRec to craft a
different set of decoy data.
Fig. 14: FP/FN rates of decoy
data.
In Figure 13, we show that decoy data can restrict adver-
saries’ capability in active attacks. For each amount of decoy
data in the x-axis (measured by the virtual-node to real-device
ratio), we mark a ratio of compromised measurements used in
successful active attacks, above which FN rates become less
than or equal to 0.5%. Based on the results, we can see that
even if adversaries become very careful and compromise less
than 10% of measurements in their active attacks on a normal
scale power grid, the attack-misleading policy can still expose
their malicious activities in state estimation.
In Figure 14, we combine FP and FN rates of decoy data.
Because there were no FPs and FNs in most evaluation cases,
we only present the case when either FP or FN rate is not
zero. For the small 24-bus system, we observe less than 0.5%
FN rate. We found that even in an FN event, Equation (6) did
not hold, but residual errors were accidentally small, especially
when a small ratio of measurements were compromised. As the
size of a power grid and the number of decoy data increase,
residual errors increase dramatically, at least 5,000 times of
a|| ≥ 5000τ (see Figure 22
detection threshold or ||z(cid:48)
in Appendix A).
a − H ˆx(cid:48)
As shown in the ﬁgure, we only found FP for the 73-
bus RTS96 system with less than 2% occurrences. This is
mainly because physical components of this system are closely
correlated (e.g., with some transmission lines delivering a large
amount of active/reactive power). Consequently, as we add
virtual nodes, adjusting the value of decoy data can have
comparatively more impact on real devices than other systems.
B. Performance Evaluation
According to the security evaluations in Section VII-A, it
is sufﬁcient to achieve RO1 and RO2 by varying the ratio
of accessible and inaccessible virtual nodes to real devices
from 5% to 20%. Consequently, we focus on performance
evaluation by varying the ratio of virtual nodes in this range.
The accessible virtual nodes are periodically accessed by
randomized requests, consuming network bandwidth. The in-
accessible virtual nodes introduce minimal runtime overhead,
as DefRec isolates proactive attacks after a few attempts.
1) The Capability of PFV: Two factors affect PFV’s per-
formance: the capability of virtualizing physical devices and
overhead of device proﬁles and caching network interactions.
Overhead of Packet Hooking. To quantify PFV’s capabil-
ity to hook network packets, we measured the goodput of the
SDN controller application implementing the packet hooking
component. In Figure 15, we show the average goodput (in
Megabits per second, Mbps) with 99% conﬁdence interval.
We use the x-axis to separate results of six evaluation cases
and the ratio of virtual nodes.
Fig. 15: Capability of packet hooking. The goodput is between 1.5
and 3.0 Mbps.
The results show that the goodput is at least 1.5 Mbps
and does not vary signiﬁcantly with the ratio of virtual nodes.
PFV’s performance beneﬁts from the fact that its SDN ap-
plication performs simple tasks, compared to SDN controllers
that perform complicated tasks in general-purpose networks,
such as determining network topology and identifying machine
locations. For a DNP3 packet of 256 bytes, which can contain
more than 64 32-bit measurements, PFV can process around
600 packets per second, which is equivalent to processing
30,000 decoy data on a single site.
Overhead of Device Proﬁles & Caching. The storage
overhead of device proﬁles is closely related to the number of
physical state of a power grid and the number of virtual nodes,
while caching overhead is related to the types of network
requests and responses used by power grids. In Table II and
Table III in Appendix C, we present the estimated storage
overhead based on power system cases used in evaluations.
We expect to occupy around 370 KB to proﬁle data of a large
power grid and 10 KB to cache network interactions with real
devices.
2) Impact of the Disruption Policy: The disruption policy
speciﬁed in DefRec introduces additional network trafﬁc from
virtual nodes. We conducted experiments to understand the
impact of the injected packets on the performance of existing
networks.
We measured and compared round-trip time (RTT) of all
data acquisitions and control operations with and without
DefRec enabled. In Figure 16, we show average RTT (with
99% conﬁdence interval) in milliseconds; we group results by
different evaluation cases, within which we use different bar
patterns to represent the ratio of virtual nodes.
Fig. 16: Comparing RTT with and without DefRec enabled. The
x-axis speciﬁes evaluation cases and the ratio of virtual nodes; the
y-axis indicates RTT in milliseconds (ms).
As shown in Figure 16, we observed a negligible impact on
the RTT of normal communication. For each case, variations
are within ±3%, which is on the same order of magnitude as
normal jitters that we can observe in communication networks.
12
05%10%15%20%24%30%Virtual-Node to Real-Device Ratio(in Reconnaissance)020%40%60%80%100%Ratio of Compromised Data(in Active Attacks)24-bus30-bus73-bus118-bus406-bus1153-bus00.5%1.0%1.5%2.0%00.5%1.0%1.5%2.0%False Positive RateFalse Negative Rate24-bus (5% Virtual nodes)24-bus (10% Virtual nodes)73-bus (5% Virtual nodes)73-bus (10% Virtual nodes)73-bus (20% Virtual nodes)3) Performance of
Also because of those jitters, we found that average RTTs are
slightly smaller when DefRec randomizes network packets in
some networks. The results also suggest that RTT is not only
affected by the size of a network but also by its topology. For
example, even though “Cesnet” network has fewer nodes than
“Forthnet” network, the former has more paths with a longer
latency than the latter, which needs more time to deliver data.
the Attack-Misleading Policy: The
attack-misleading policy crafts decoy data; a long execution
time to craft them can make it less feasible to deploy DefRec
in power grids. In Figure 17, we show the execution time to
craft 20% decoy data (with 99% conﬁdence interval that is
hardly noticeable). While constructing decoy data takes less
than 0.3 seconds for most power systems, it takes around 4.7
seconds for Poland 1153-bus system. In practice, we determine
a new set of decoy data when real data in a site experience
signiﬁcant changes. Because of mechanical inertia in many
power grids and other ICSs, real data usually change slowly,
e.g., on the order of minutes [54]. Therefore, the execution
time is acceptable in practice for deploying DefRec in a real
utility environment.
Fig. 17: The execution time to craft decoy data. We can craft the
decoy data within 5 seconds for large-scale Poland 1,153-bus system.
In Figure 17, we also compare the result with the execution
time of state estimation performed on the same power system.
Because we construct decoy data by using components in state
estimation (see Algorithm 1), the time to craft decoy data
is on the same order of magnitude as the execution time of
state estimation. In future smart grids, when state estimation
algorithm evolves, we can expect that decoy data construction
can take less time.
VIII. RELATED WORK
Network Function Virtualization (NFV). NFV is an
emerging technology to virtualize network nodes according
to speciﬁc functionality, such as load balancing and access
control [48]. NFV is not necessarily dependent on SDN, but
SDN’s network programmability and visibility can signiﬁ-
cantly beneﬁt its design. Recent work has applied NFV to
improve performance and ﬂexibility of security designs. Li
et al. propose to use NFV to virtualize detection logic of
network IDSs, allowing efﬁcient and ﬂexible state sharing
and resource migration. Deng et al. leverage SDN and NFV
to overcome resource limitations of hardware-based ﬁrewall
applications, enabling elastic and scalable access control for
virtual computing environments. Inspired by NFV, PFV aims
at virtualizing physical devices by using SDN to hook network
packets from them and to tailor the packets with intelligently
crafted decoy data. By following actual behavior of real
devices, PFV can signiﬁcantly disrupt passive and proactive
attacks.
system and network conﬁgurations, e.g., IP addresses and port
numbers [3], [30], [33], [76]. Some recent work leverages
similar designs to disrupt control operations in ICSs. Rahman
et al. randomly change the set of physical data used for power
system analysis, attempting to remove some compromised data
and to reduce the effectiveness of FDIAs [51]. Another group
of MTD approaches intentionally disrupt physical process in an
ICS and use deviations from expected consequences to detect
attacks [2], [14], [46], [71]. Those approaches require physical
perturbations, which can harm the existing physical process. In
PFV, we require no modiﬁcation on existing cyber and physical
infrastructures of a power grid; security policies included in
DefRec are preemptive, not passive, disrupting reconnaissance
before malicious activities occur.
Among current MTD approaches, RAINCOAT is the most
similar one to our approach, as it also manipulates net-
work packets to disrupt adversaries’ reconnaissance in power
grids [40]. However, RAINCOAT spoofs network packets from
existing physical devices and delivers both spoofed data and
real data from the same device in a time-sharing manner. This
approach can signiﬁcantly increase the amount of network
trafﬁc by at least 50%. DefRec, on the other hand, relies on
a small amount of decoy data from virtual nodes to disrupt
reconnaissance of both cyber and physical
infrastructures,
signiﬁcantly reducing interference in real devices.
Honeypots for ICSs. Honeypots or honeynets interact
with adversaries with simulated network packets [56], [68].
Several honeypot projects aim at building separate computing
or network environments to trace adversaries’ activities on ICS
devices, e.g., PLCs [6], [11], [72]. Han et al. further propose
to use SDN to automate interactions with adversaries [22].
Those ICS honeypots can mimic a cyberinfrastructure of an
ICS. However, in their constructed networks, the honeypots
lack supports for constructing meaningful application-layer
payloads, e.g., measurements exchanged between ICS devices.
Instead of mimicking and simulating network packets, we
design PFV, a completely different technique, by virtualizing
physical devices. PFV is not a honeypot for ICSs: it does not
require interactions with adversaries to disrupt their reconnais-
sance. Adversaries that passively monitor network packets can
be signiﬁcantly delayed; they can end up using decoy data to
design damage-free attack strategies.
Masquerading Attacks in Remote Attestations. Remote
attestation is a technique used by a device (veriﬁer) to verify
properties of another remote device (prover), such as its
software integrity [53], policy enforcement [67], or physi-
cal locations [13]. Remote attestation can be vulnerable to
masquerading or relay attacks, in which a malicious prover
forwards requests from a veriﬁer to another legitimate device
(victim) and then use the responses from this victim device as a
proof [44]. To disable masquerading attacks, it is necessary to
include device-speciﬁc information in the response, such that
the veriﬁer can distinguish between responses from the victim
and the ones from the prover. This device-speciﬁc information
can be secret keys for a TPM (Trusted Platform Module) [67]
or round trip times used in distance bounding protocols [13],
[43].
Moving Target Defense (MTD)
in ICSs. Traditional
MTD approaches disrupt adversaries by randomly changing
In PFV, the packet hooking component forwards requests
destined to virtual nodes to real devices; this procedure is sim-
13
024Latency (second)24-bus30-bus73-bus118-bus406-bus1153-bus5.310-35.010-36.310-36.110-32.310-21.610-23.310-23.410-23.210-12.910-14.74.6Decoy Data ConstructionState Estimationilar to masquerading attacks. However, in PFV, virtual nodes
and real devices are working collaboratively, e.g., allowing
virtual nodes to cache or tailor packets sent from real devices.
Also, communication channels between them can be encrypted
to avoid adversaries’ eavesdropping. Consequently, it is chal-
lenging for adversaries, playing a similar role as a veriﬁer, to
use existing protection mechanisms for masquerading attacks
to distinguish between responses from virtual nodes and ones
from real devices.
Increasing SDN’s resilience. Rich capabilities provided
by SDN also make SDN controllers a popular target of
attacks [24], [57], [63], [69]; therefore, SDN-based approaches
require more complex protections. DefRec makes a very light
use of SDN’s network programmability, i.e., hooking a small
number of packets (this can be implemented by other network
manipulation techniques). Monitoring DefRec’s behavior and
verifying its integrity is efﬁcient, compared to verifying full-
ﬂedged SDN controllers.
IX. CONCLUSION
In this paper, we propose the concept of PFV, which hooks
network interactions with real devices to build virtual nodes.
Lightweight virtual nodes built by PFV follow actual imple-
mentations of network stacks, system invariants, and physical
state variations of real devices. Based on PFV, DefRec spec-
iﬁes two security policies, randomizing communications and
crafting decoy data for virtual nodes, to disrupt adversaries’
reconnaissance of power grids’ cyber-physical infrastructures.
Based on evaluations on real devices and large-scale power
grids, we ﬁnd that DefRec can successfully delay passive and
proactive attacks for 100 years with a small number of virtual
nodes, and successfully mislead adversaries into designing
ineffective attacks. In addition, DefRec introduces negligible
overhead on existing network communications (e.g., less than
3% on RTTs) and control operations.
In future work, we will provide formal coverage analysis of
PFV’s functionalities and apply it into more ICS environments,
including parsers and encoders for protocols used in different
ICS networks. Also, we will extend PFV with other IDS
techniques to evaluate its performance on attacks requiring no
reconnaissance or targeting on data privacy.
ACKNOWLEDGMENT
This material is based upon work partially supported by
the National Science Foundation under Award No. CNS-
1850377 and the National Science Foundation under Award
No. CNS-1717313. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of
the author(s) and do not necessarily reﬂect the views of the
National Science Foundation.
REFERENCES
[1]
Bradley
controller
“Allen
logic
https://ab.rockwellautomation.com/Programmable-
Controllers/MicroLogix-1400.
[Online]
MicroLogix
systems,”
1400
programmable
at:
Available
[2] M. Q. Ali and E. Al-Shaer, “Randomization-based intrusion detection
system for advanced metering infrastructure,” ACM Transactions on
Information and System Security, vol. 18, no. 2, pp. 1–30, 2015.
14
[3] S. Antonatos, P. Akritidis, E. Markatos, and K. Anagnostakis, “Defend-
ing against hitlist worms using network address space randomization,”
Computer Networks, vol. 51, no. 12, pp. 3471–3490, 2007.
[4] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, and others, “ONOS:
towards an open, distributed SDN OS,” in Proceedings of the 3rd
workshop on Hot topics in software deﬁned networking. ACM, 2014,
pp. 1–6.
[5] R. B. Bobba, K. M. Rogers, Q. Wang, H. Khurana, K. Nahrstedt,
and T. J. Overbye, “Detecting false data injection attacks on DC state
estimation,” in Preprints of
the First Workshop on Secure Control
Systems, CPSWEEK, 2010, pp. 18–26.
[6] D. I. Buza, F. Juh´asz, G. Miru, M. F´elegyh´azi, and T. Holczer,
“CryPLH: Protecting smart energy systems from targeted attacks with
a PLC honeypot,” in Smart Grid Security, J. Cuellar, Ed.