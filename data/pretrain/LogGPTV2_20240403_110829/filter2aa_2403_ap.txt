xor      
eax, eax 
add   
rsp, 40 
ret      
0 
main     
ENDP 
_TEXT   
ENDS 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
69 
这段 x64 代码与 x86 的代码没有明显区别。请注意变量 x 的传递过程：scanf()函数通过 LEA 指令获取
x 变量的指针；而 printf()函数则是通过 MOV 指令获取 x 变量的值。“DWORD PTR”与机器码无关，它是
汇编语言的一部分，用来声明后面的变量为 32 位的值，以便 MOV 指令能够正确处理数据类型。 
7.2.5 ARM: Optimizing Keil 6/2013 (Thumb 模式) 
.text:00000000 ; Segment type: Pure code 
.text:00000000   
AREA .text, CODE 
... 
.text:00000000 main 
.text:00000000   
PUSH     {R4,LR} 
.text:00000002   
ADR      R0, aEnterX   
; "Enter X:\n" 
.text:00000004   
BL      __2printf 
.text:00000008   
LDR      R1, =x 
.text:0000000A   
ADR      R0, aD   
; "%d" 
.text:0000000C   
BL       __0scanf 
.text:00000010   
LDR      R0, =x 
.text:00000012   
LDR      R1, [R0] 
.text:00000014   
ADR      R0, aYouEnteredD___  
; "You entered %d...\n" 
.text:00000016    
BL       __2printf 
.text:0000001A   
MOVS     R0, #0 
.text:0000001C   
POP     {R4,PC} 
... 
.text:00000020 aEnterX  
DCB "Enter X:",0xA,0  
; DATA XREF: main+2 
.text:0000002A   
DCB 0 
.text:0000002B   
DCB 0 
.text:0000002C off_2C  
DCD x  
; DATA XREF: main+8 
.text:0000002C   
; main+10 
.text:00000030 aD  
DCB "%d",0  
; DATA XREF: main+A 
.text:00000033   
DCB 0 
.text:00000034 aYouEnteredD___  DCB "You entered %d...",0xA,0  ; DATA XREF: main+14 
.text:00000047   
DCB 0 
.text:00000047 ; .text  
ends 
.text:00000047 
... 
.data:00000048 ; Segment type:  Pure data 
.data:00000048   
AREA .data, DATA 
.data:00000048   
; ORG 0x48 
.data:00000048   
EXPORT x 
.data:00000048 x  
DCD 0xA  
; DATA XREF: main+8 
.data:00000048   
; main+10 
.data:00000048 ; .data  
ends 
因为变量 x 是全局变量，所以它出现于数据段的“.data”字段里。有的读者可能会问，为什么文本字符串出
现在代码段（.text），但是 x 变量却出现于数据段（.data）？原因在于 x 是变量。顾名思义，变量的值可变、属于
一种频繁变化的可变数据。在 ARM 系统里，代码段的程序代码可存储于处理器的 ROM（Read-Only Memory），
而可变变量存储于 RAM（Random-Access Memory）中。与 x86/x64 系统相比，ARM 系统的内存寻址能力很有限，
可用内存往往十分紧张。在 ARM 系统存在 ROM 的情况下，使用 RAM 内存存储常量则明显是一种浪费。此外，
ARM 系统在启动之后 RAM 里的值都是随机数；想要使用 RAM 存储常量，还要单独进行初始化赋值才行。 
在后续代码段的指令中，程序给变量 x 分配了个指针（即 off_2c）。此后，程序都是通过这个指针对 x
变量进行的操作。不这样做的话变量 x 可能被分配到距离程序代码段很远的内存空间，其偏移量有可能超
过有关寻址指令的寻址能力。Thumb 模式下，ARM 系统的 LDR 指令只能够使用周边 1020 字节之内的变
量；即使在 32 位 ARM 模式下，它也只能调用偏移量在±4095 字节之内的变量。这个范围就是变量地址（与
调用指令之间）的偏移量的局限。为了保证它的地址离代码段足够近、能被代码调用，就需要就近分配 x
变量的地址。由于在链接阶段（linker）x 的地址可能会被随意分配，甚至可能被分配到外部内存的地址，
所以编译器必须在前期阶段就把 x 的地址分配到就近的区域之内。 
另外，如果声明某变量为常量/const，Keil 编译程序会把这个变量分配到.constdata 字段。这可能是为
异步社区会员 dearfuture(15918834820) 专享 尊重版权
70 
逆向工程权威指南（上册） 
了便于后期 linker 把这个字段与代码段一起放入 ROM。 
7.2.6 ARM64 
指令清单 7.7  Non-optimizing GCC 4.9.1 ARM64 
 1  
.comm    x,4,4 
 2 .LC0: 
 3  
.string "Enter X:" 
 4 .LC1: 
 5  
.string "%d" 
 6 .LC2: 
 7  
.string "You entered %d...\n" 
 8 f5: 
 9 ; save FP and LR in stack frame: 
10  
stp      x29, x30, [sp, -16]! 
11 ; set stack frame (FP=SP) 
12  
add       x29, sp, 0 
13 ; load pointer to the "Enter X:" string: 
14  
adrp      x0, .LC0 
15  
add       x0, x0, :lo12:.LC0 
16  
bl        puts 
17 ; load pointer to the "%d" string: 
18  
adrp      x0, .LC1 
19  
add       x0, x0, :lo12:.LC1 
20 ; form address of x global variable: 
21  
adrp      x1, x 
22  
add       x1,  x1, :lo12:x 
23  
bl        __isoc99_scanf 
24 ; form address of x global variable again: 
25  
adrp     x0, x 
26  
add      x0, x0, :lo12:x 
27 ; load value from memory at this address: 
28  
ldr      w1, [x0] 
29 ; load pointer to the "You entered %d...\n" string: 
30  
adrp     x0, .LC2 
31  
add      x0, x0, :lo12:.LC2 
32  
bl       printf 
33 ; return 0 
34  
mov      w0, 0 
35 ; restore FP and LR: 
36  
ldp      x29, x30, [sp], 16 
37  
ret 
在上述代码里变量 x 被声明为全局变量。程序通过 ADRP/ADD 指令对（第 21 行和第 25 行）计算它的指针。 
7.2.7 MIPS 
无未初始值的全局变量 
以变量 x 为全局变量为例。我们把它编译为可执行文件，然后使用 IDA 加载这个程序。因为程序在声明变
量 x 的时候没有对它进行初始化赋值，所以在 IDA 中变量 x 出现在.sbss ELF 里（请参见 3.5.1 节的全局指针）。 
指令清单 7.8  Optimizing GCC 4.4.5 (IDA) 
.text:004006C0 main: 
.text:004006C0 
.text:004006C0 var_10  
= -0x10 
.text:004006C0 var_4   
= -4 
.text:004006C0 
; function prologue: 
.text:004006C0     
lui     $gp, 0x42 
.text:004006C4     
addiu  $sp, -0x20 
.text:004006C8     
li      $gp, 0x418940 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
71 
.text:004006CC     
sw      $ra, 0x20+var_4($sp) 
.text:004006D0     
sw      $gp, 0x20+var_10($sp) 
; call puts(): 
.text:004006D4     
la      $t9, puts 
.text:004006D8     
lui     $a0, 0x40 
.text:004006DC     
jalr    $t9 ; puts 
.text:004006E0     
la      $a0, aEnterX  # "Enter X:" ; branch delay slot 
; call scanf(): 
.text:004006E4     
lw      $gp, 0x20+var_10($sp) 
.text:004006E8     
lui     $a0, 0x40 
.text:004006EC     
la      $t9, __isoc99_scanf 
; prepare address of x:  
.text:004006F0     
la      $a1, x 
.text:004006F4     
jalr    $t9 ; __isoc99_scanf 
.text:004006F8     
la      $a0, aD          # "%d" ; branch delay slot 
; call printf(): 
.text:004006FC     
lw      $gp, 0x20+var_10($sp) 
.text:00400700     
lui     $a0, 0x40 
; get address of x: 
.text:00400704     
la      $v0, x 
.text:00400708     
la      $t9, printf 
; load value from "x"  variable and pass it to printf() in $a1: 
.text:0040070C     
lw      $a1, (x - 0x41099C)($v0) 
.text:00400710     
jalr    $t9 ; printf 
.text:00400714     
la      $a0, aYouEnteredD___ # "You entered %d...\n" ; branch delay slot 
; function epilogue:  
.text:00400718     
lw      $ra, 0x20+var_4($sp) 
.text:0040071C     
move    $v0, $zero 
.text:00400720     
jr      $ra 
.text:00400724     
addiu  $sp, 0x20  ; branch delay slot 
... 
.sbss:0041099C  #  Segment type: Uninitialized 
.sbss:0041099C     
.sbss 
.sbss:0041099C     
.globl x 
.sbss:0041099C x:  
.space 4 
.sbss:0041099C 
IDA 会精简部分指令信息。我们不妨通过 objdump 观察上述文件确切的汇编指令。 
指令清单 7.9  Optimizing GCC 4.4.5 (objdump) 
 1 004006c0 : 
 2 ; function prologue: 
 3   4006c0:  
   3c1c0042  
lui   
gp,0x42 
 4   4006c4:  
   27bdffe0  
addiu  
sp,sp,-32 
 5   4006c8:  
   279c8940  
addiu  
gp,gp,-30400 
 6   4006cc:  
   afbf001c  
sw   
ra,28(sp) 
 7   4006d0:  
   afbc0010  
sw   
gp,16(sp) 
 8 ; call puts(): 
 9   4006d4:  
   8f998034  
lw   
t9,-32716(gp) 
10   4006d8:  
   3c040040  
lui   
a0,0x40 
11   4006dc:  
   0320f809  
jalr   
t9 
12   4006e0:  
   248408f0  
addiu  
a0,a0,2288 ; branch delay slot 
13 ; call scanf(): 
14   4006e4:  
   8fbc0010  
lw   
gp,16(sp) 
15   4006e8:  
   3c040040  
lui   
a0,0x40 
16   4006ec:  
   8f998038  
lw   
t9,-32712(gp) 
17 ; prepare address of x: 
18   4006f0:  
   8f858044  
lw   
a1,-32700(gp) 
19   4006f4:  
   0320f809  
jalr   
t9 
20   4006f8:  
   248408fc  
addiu     a0,a0,2300 ; branch delay slot 