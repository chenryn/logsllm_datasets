562    26th USENIX Security Symposium
USENIX Association
...cmp $0, raxje 0xc2inc rbx...jmp 0x4cdec rbx...mov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶Take branch and store history❷Interrupt❹Affect branch prediction (will take)...cmp rax, raxje 0xc2nop...nopnop...TakeFrom → To†PredictedYes❺Disable LBR andcheck branch informationInformation flowExecution flowMispredicted flowNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯620:0x004⋯5f2:0xff4⋯530:0xff4⋯5f4:0xff4⋯532:0xff4⋯5f5:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯5f4↓...0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)0x4⋯5f4Take?Yesincorrect target❺Disable LBR andcheck the branch information...cmp $0, raxje 0xc2inc rbx...jmp 0x4cdec rbx...mov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶No branch anddelete history❷Interrupt❹Affect branch prediction (will not take)...cmp rax, raxje 0xc2nop...nopnop...From → To†PredictedNoNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯620:0x004⋯5f2:0xff4⋯530:0xff4⋯5f4:0xff4⋯532:0xff4⋯5f5:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯5f4↓...n/a0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)incorrectTake?NoTake2 Enclave execution is interrupted, and the OS takes
control. 3 The OS enables the LBR and then executes
the shadow code. 4 The BPU correctly predicts the
shadowed unconditional branch’s target, because the tar-
get unconditional branch has never been executed. 5
The shadow code executes an additional branch to mea-
sure the elapsed cycles. 6 By disabling and retrieving
the LBR, we learn that no branch target misprediction
occurred because of the small number of elapsed cycles.
No misprediction of unconditional branch. We found
that the LBR always reports that every taken uncondi-
tional branch has been predicted irrespective of whether
it mispredicted the target (undocumented behavior). We
think that this is because the target of an unconditional
branch is fixed such that, typically, target mispredictions
should not occur. Also, the LBR was for facilitating
branch profiling to reduce mispredictions for optimization.
However, programmers have no way to handle mispre-
dicted unconditional branches that result from the execu-
tion of the kernel or another process—i.e., it does not help
programmers improve their program and just reveals side-
channel information. We believe these are the reasons
the LBR treats every unconditional branch as correctly
predicted.
3.5
Indirect Branch Shadowing
We explain how we can infer whether a target indirect
branch inside an enclave has been executed by shadowing
its branch history. Like an unconditional branch, an indi-
rect branch is always taken when it is executed. However,
unlike an unconditional branch, an indirect branch has
no fixed branch target. If there is no history, the BPU
predicts that the instruction following the indirect branch
instruction will be executed; this is the same as the indi-
rect branch not being taken. To recognize its behavior, we
make a shadowed indirect branch jump to the instruction
immediately following it to monitor a branch target mis-
prediction because of the history. The LBR reports the
mispredictions of indirect branches such that we do not
need to rely on elapsed cycles to attack indirect branches.
Attack procedure. Figure 4 shows a procedure of indi-
rect branch shadowing. We make the shadowed indirect
branch jump to its next instruction to observe whether a
branch misprediction occurs because of the branch history.
We first explain the case in which an indirect branch has
been executed (Case 5). 1 An indirect branch of the vic-
tim code is executed and the corresponding information
is stored into the BTB and BPU. 2 Enclave execution is
interrupted, and the OS takes control. 3 The OS enables
the LBR and then executes the shadow code. 4 The
BPU mispredicts that the shadowed indirect branch will
be taken to an incorrect target address, so the execution
is rolled back to not take the branch. 5 Finally, by dis-
abling and retrieving the LBR, we learn that the shadow
(a) Case 3: The target unconditional branch has been taken.
The LBR does not report the misprediction of unconditional
branches, but we can infer it by using the elapsed cycles.
(b) Case 4: The target unconditional branch has not been taken.
Figure 3: Branch shadowing attack against an unconditional
branch inside an enclave.
ditional branch to recognize a branch target misprediction.
We first explain the case in which an unconditional branch
has been executed (Case 3). 1 An unconditional branch
of the victim code is executed and the corresponding in-
formation is stored into the BTB and BPU. 2 Enclave
execution is interrupted, and the OS takes control. 3 The
OS enables the LBR and then executes the shadow code.
4 The BPU mispredicts the branch target of the shad-
owed unconditional branch because of the mismatched
branch history, so execution is rolled back to jump to the
correct target. 5 The shadow code executes an additional
branch to measure the elapsed cycles of the mispredicted
branch. 6 Finally, by disabling and retrieving the LBR,
we learn that a branch target misprediction occurred be-
cause of the large number of elapsed cycles.
Next, we explain the case in which an unconditional
branch has not been taken (Case 4). 1 The enclave has
not yet executed the unconditional branch in the victim
code, so the BTB has no information about the branch.
USENIX Association
26th USENIX Security Symposium    563
❺Additional branch ❻Disable LBR andcheck the branch information...jmp 0xc2inc rbx...dec rbxmov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶Take branch and store history❷Interrupt❹Affect branch target prediction incorrecttargetFrom → To†PredictedYesInformation flowExecution flowMispredicted flowNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯5f2:0xff4⋯530:0xff4⋯5f4:0xff4⋯532:0xff4⋯620:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯620↓...0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)0x004⋯532:...jmp 0xeenop...nop...nopjmp 0x4...nop...0xff4⋯621:0xff4⋯627:0xff4⋯6210xff4⋯627Yes350Cycles0x4⋯5f4Take?YesTakeTake↓❻Disable LBR and check the branch information❺Additional branch...jmp 0xc2inc rbx...dec rbxmov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶No execution❷Interrupt❹Do not affect branch prediction From → To†PredictedNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯5f2:0xff4⋯530:0xff4⋯5f4:0xff4⋯532:0xff4⋯620:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯620↓...n/a0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)0x004⋯532:...jmp 0xeenop...nop...nopjmp 0x4...nop...0xff4⋯621:0xff4⋯627:0xff4⋯6210xff4⋯627Yes250CyclesTakeYesTake?n/aTake↓Branch
State
BTB/BPU
Cond.
Uncond.
Indirect
Taken
Not-taken
Exec.
Not-exec.
Exec.
Not-exec.
✓
-
✓
-
✓
-
Pred.
✓
✓
-
-
✓
✓
LBR
Elapsed Cycl.
Inferred
-
-
✓
✓
-
-
✓
✓
✓
✓
✓
✓
Table 2: Branch types and states the branch shadowing attack
can infer by using the information of BTB, BPU, and LBR.
branch multiple times while changing candidate target
addresses to eventually know the real target address by
observing a correct branch target prediction.
Table 2 summarizes the branch types and states our
attack can infer and the necessary information.
3.6 Frequent Interrupting and Probing
The branch shadowing attack needs to consider cases
that change (or even remove) BTB entries because they
make the attack miss some branch histories. First, the
size of the BTB is limited such that a BTB entry could
be overwritten by another branch instruction. We empiri-
cally identified that the Skylake’s BTB has 4,096 entries,
where the number of ways is four and the number of sets is
1,024 (§5.1). Because of its well-designed index-hashing
algorithm, we observed that conflicts between two branch
instructions located at different addresses rarely occurred.
But, no matter how, after more than 4,096 different branch
instructions have been taken, the BTB will overflow and
we will lose some branch histories. Second, a BTB entry
for a conditional or an indirect branch can be removed
or changed because of a loop or re-execution of the same
function. For example, a conditional branch has been
taken at its first run and has not been taken at its sec-
ond run because of the changes of the given condition,
removing the corresponding BTB entry. A target of an
indirect branch can also be changed according to condi-
tions, which change the corresponding BTB entry. If the
branch shadowing attack could not check a BTB entry
before it has been changed, it would lose the information.
To solve this problem, we interrupt the enclave process
as frequently as possible and check the branch history by
manipulating the local APIC timer and the CPU cache.
These two approaches slow the execution of a target en-
clave program a lot such that an attacker needs to carefully
use them (i.e., selectively) to avoid detection.
Manipulating the local APIC timer. We manipulate
the frequency of the local APIC timer in a recent version
of Linux (details are in Appendix A.) We measured the
frequency of our manipulated timer interrupts in terms of
how many ADD instructions can be executed between two
timer interrupts. On average, about 48.76 ADD instructions
were executed between two timer interrupts (standard
(a) Case 5: The target indirect branch has been taken.
(b) Case 6: The target indirect branch has not been taken
Figure 4: Branch shadowing attack against an indirect branch
inside an enclave.
code’s indirect branch has been incorrectly predicted—it
has not been taken, unlike the branch prediction.
Next, we explain the case in which an indirect branch
has not been taken (Case 6). 1 The enclave does not
execute the indirect branch of the victim code, so that the
BTB has no information about the branch. 2 Enclave
execution is interrupted, and the OS takes control. 3 The
OS enables the LBR and then executes the shadow code.
4 The BPU correctly predicts that the shadowed indirect
branch will not be taken because there is no branch history.
5 Finally, by disabling and retrieving the LBR, we learn
that the shadow code’s indirect branch has been correctly
predicted—it has not been taken, as predicted.
Inferring branch targets. Unlike conditional and un-
conditional branches, an indirect branch can have multiple
targets such that just knowing whether it has been exe-
cuted would be insufficient to know the victim code’s
execution. Since the indirect branch is mostly used for
representing a switch-case statement, it is also related
to a number of unconditional branches (i.e., break) as an
if-else statement does. This implies that an attacker can
identify which case block has been executed by probing
the corresponding unconditional branch. Also, if an at-
tacker can repeatedly execute a victim enclave program
with the same input, he or she can test the same indirect
564    26th USENIX Security Symposium
USENIX Association
❺Disable LBR andcheck the branch information...jmpq *rdxinc rbx...dec rbxmov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶Take branch and         store history❷Interrupt❹Affect branch prediction (will take)...mov 0xff4⋯532,rdxjmpq *rdxnop...From → To†PredictedNoInformation flowExecution flowMispredicted flowNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯5f2:0xff4⋯530:0xff4⋯532:0xff4⋯533:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯532↓...0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)0x004⋯532:0x4⋯5f4incorrectTake?YesDoes not take❺Disable LBR andcheck the branch information...jmpq *rdxinc rbx...dec rbxmov rbx, rdx...EnclaveBTB and BPUAddrTargetLast Branch Record❶No execution❷Interrupt❹Do not affect branch prediction ...mov 0xff4⋯532,rdxjmpq *rdxnop...From → To†PredictedYesNon-enclave0x004⋯530:0x004⋯5f4:0x004⋯5f2:0xff4⋯530:0xff4⋯532:0xff4⋯533:ShadowedcodeShared by enclave and non-enclave❸Enable LBR and run shadow code0xff4⋯5300xff4⋯532↓...0x**4⋯530...Only for non-enclaveMemoryCPU(isolated)0x004⋯532:Does not taken/an/aTake?deviation: 2.75)1. ADD takes only one cycle in the Skylake
CPU [25] such that our frequent timer can interrupt a
victim enclave per every ∼50 cycles.
Disabling the cache.
If we have to attack a branch in-
struction in a short loop taking p[nblimbs] >> bufsize) & 1;
1 /* Sliding-window exponentiation: X = A^E mod N */
2 int mbedtls_mpi_exp_mod(mbedtls_mpi *X, const mbedtls_mpi *A,
3
4
5
6
7
8
9
10
11
12
13 ⋆
14
15
16
17 ⋆
18 +
19
20
21
22
23
24
25 +
26
27 +
28
29
30
31
32 }
// cmpq 0x0,-0xc68(%rbp); jne 3f371; ...
if (ei == 0 && state == 1)
mpi_montmul(X, &W[wbits], N, mm, &T);
state--; nbits = wbits = 0;
if (nbits == wsize) {
for (i = 0; i < wsize; i++)
mpi_montmul(X, X, N, mm, &T);
mpi_montmul(X, X, N, mm, &T);
state = 2; nbits++;
wbits |= (ei << (wsize-nbits));
...
state = 0;
while (1) {
continue;
}
}
...
Figure 5: Sliding-window exponentiation of mbed TLS. Branch
shadowing can infer every bit of the secret exponent.
process runs in the core under the branch shadowing at-
tack, its execution would affect the overall attack results.
To avoid this problem, we use the isolcpus boot parame-
ter to specify an isolated core that will not be scheduled
without certain requests. Then, we use the taskset com-
mand to run a victim enclave with the isolated core.
4 Evaluation
In this section, we demonstrate the branch shadow-
ing attack against an implementation of RSA and also
describe our case studies of various libraries and applica-
tions that are vulnerable to our attack but mostly secure
against the controlled-channel attack [60]. The branch
shadowing attack’s goal is not to overcome countermea-
sures against branch-prediction side-channel attacks, e.g.,
exponent blinding to hide an exponent value, not branch
executions [34]. Thus, we do not try to attack applications
without branch-prediction side channels.