terval functions applied to x1 and x2 respectively, the class
F1 · F2 is the class of all two-dimensional intervals. Com-
pared with the solution based on decision trees, we will get
better eﬃciency (linear in the bit-length of the input instead
of quadratic) at the cost of using a larger number of parties.
The following theorem captures the basic FSS product
operator. (Here we use (m, t)-FSS as an abbreviation for
an m-party t-secure FSS.) In the full version we describe an
alternative product operator that converts (m, m − 1)-FSS
schemes for classes Fi, 1 ≤ i ≤ m − 1, into an (m, 1)-FSS
i=1 Fi, where the key size for sharing
f1 · f2 ··· fd is m − 1 times the total key sizes required for
sharing fi.
(Gen, Eval) for F =(cid:81)m−1
Theorem 3.6. Let (Gen1, Eval1) be an (m1, t)-FSS for F1
and (Gen2, Eval2) be an (m2, t)-FSS for F2. Then there ex-
ists an (m1m2, t)-FSS (Gen, Eval) for F = F1 · F2 in which
the size of the key produced by Gen on f1 · f2 is the sum of
the key sizes of Gen1 on f1 and Gen2 on f2.
As a concrete instance, using a 3-party PRG-based DPF
construction from [7] (which achieves a quadratic improve-
ment over a naive solution), one can get a nontrivial PRG-
based (3, 1)-FSS that supports private searches involving a
conjunction of two keywords or ranges.
4. VERIFIABLE FSS: HANDLING MALICIOUS
CLIENTS
As discussed in the Introduction, FSS schemes are mo-
tivated by two types of applications: ones that involve pri-
vately reading from a database stored at two or more servers,
and ones that involve privately writing into a secret-shared
array. In both types of applications, badly formed FSS keys
can enable a malicious client to gain an unfair advantage.
1297Consider, for example, an application of DPF for main-
taining a secret data histogram, say for the purpose of web-
site traﬃc analytics. The histogram count of each bin x ∈
[N ] is additively secret-shared between two servers over a
large group G = Zp. A valid “increment α” query for a (hid-
den) bin α should correspond to secret shares of the point
function fα,1 that evaluates to 1 at α and 0 at all other
points. However, since each server sees only one share of
the function (to hide the identity of α), neither server on its
own has a way of verifying that the given shares really do
encode such a “proper” point function. A malicious client
may just as easily encode a function that increments item
α by 100, eﬀectively casting a “heavy” vote. Even worse,
it may encode a “garbage” function f∗ that increments ev-
ery bin by some random amount—eﬀectively erasing all the
prior existing counts. We seek eﬃcient procedures for the
servers to verify the validity of the function shared by the
client before it is being processed, by using a small amount
of server-to-server communication.
4.1 Modeling Veriﬁable FSS
We consider an FSS scheme where m the keys are gen-
erated by a potentially malicious client, but are processed
by semi-honest servers, to which we refer from here on as
parties. That is, the parties honestly follow the prescribed
protocol, but try to infer as much information as possible
about an honest client’s secret function f from their view.
We allow the parties to communicate over secure point-to-
point channels, but try to minimize the communication to
the extent possible. (Some form of communication between
the parties is clearly necessary for verifying the consistency
of the keys.) Finally, we make the simplifying assumption
that parties can generate a common source of randomness
which is unpredictable to the clients, and do not count this
randomness towards the communication.
In practice, this
common source of randomness can be realized by having
one of the parties pick a random PRF key and communicat-
ing it to all other parties. The same PRF key can be used
to verify many FSS instances, as long as it is independent
of the FSS keys.
We are interested in veriﬁcation protocols that minimize
communication between parties, do not involve the client
beyond the initial key distribution, and do not involve any
additional parties. This should be contrasted with a veriﬁ-
cation protocol from [11] that involves an additional party
and requires communication linear in the domain size.
Similarly to the veriﬁcation protocol from [11], we would
like our protocols to only make a black-box use of the un-
derlying FSS scheme (which in our case translates into a
black-box use of a PRG). The latter requirement is meant
to rule out protocols that involve a generic use of secure
computation for verifying that the keys form a valid output
of Gen. To the end of realizing such a black-box veriﬁcation,
we are willing to slightly relax the goal by settling for the va-
lidity of the keys with respect to a given set of inputs. That
is, the veriﬁcation protocol is given a subset D(cid:48) of the input
domain D as an additional input. The set D(cid:48) represents
the set of inputs on which the function f will actually be
evaluated, and hence may not be known to the client. The
distinction between D and D(cid:48) is motivated by applications
such as secure keyword search or range queries, where D(cid:48)
is typically a tiny subset of D. However, in other applica-
tions of FSS, including PIR and distributed histograms, it
is typically the case that D(cid:48) = D.
We allow the running time of the veriﬁcation protocol, but
not its communication complexity, to grow with the size of
D(cid:48). In fact, all veriﬁcation protocols we present invoke Eval
on every x ∈ D(cid:48). This is typically not an eﬃciency bottle-
neck, since these evaluations are anyway necessary for the
application. We expect our solutions to beat the concrete
eﬃciency of applying practical general-purpose MPC proto-
cols to the function deﬁned by Gen except, perhaps, when
D(cid:48) is very large.
The veriﬁcation protocol should have the following sound-
ness property: If the veriﬁcation protocol is successful, then
the parties are essentially convinced that the function f∗
eﬀectively shared by the client is consistent with some f ∈
F on the domain D(cid:48). Of course, the veriﬁcation protocol
should not reveal to the parties any information about the
function f∗ beyond its validity.
We formalize the above requirements below. For simplic-
ity we do not explicitly treat general leakage, since we will
present veriﬁcation protocols for FSS with standard leak-
age, namely where only the input domain Df and output
domain Rf are leaked. However, the deﬁnitions extend in a
straightforward way to the general case.
Definition 4.1
(Verifiable FSS). Let F be a class
of functions. An (m, t)-veriﬁable FSS (VFSS) for F is a
triplet of algorithms (Gen, Eval, Ver) such that (Gen, Eval) are
an FSS for F as in Deﬁnition 2.2, and there exists a negligi-
ble function negl for which the following additional require-
ments hold.
• Syntax of Ver: Ver is an m-party interactive proto-
col. In the beginning of the protocol, each party i has
a local input ki (presumably an output of Gen). In ad-
dition, all parties share the following common inputs:
a security parameter 1λ, an input domain D for (an
unknown) f ∈ F, output domain R for f , and a subset
D(cid:48) ⊆ D of relevant evaluation points. (An empty D(cid:48)
is interpreted as D(cid:48) = D.) We also assume that the
parties have access to a common source of randomness
picked independently of the inputs, and do not count
this randomness towards the communication complex-
ity. In the end of the protocol, each party outputs “Ac-
cept” or “Reject.”
• Completeness: If (k1, . . . , km) are valid outputs of
Gen(1λ, f ) for some f ∈ F with input domain D and
output domain R, then for all D(cid:48) ⊆ D, in the execution
of Ver on local inputs (k1, . . . , km) and common inputs
D, D(cid:48), R, all parties output “Accept” with probability 1.
• Soundness: Consider the following security experi-
ment deﬁned by a PPT adversary A running on in-
put 1λ:
1: A(1λ) outputs a description of FSS input domain
D, FSS output domain R, FSS keys (k∗
m),
and a set D(cid:48) ⊆ D (represented by an explicit list
of elements).
2: The protocol Ver is executed on local inputs (k∗
and common inputs 1λ, D, R, D(cid:48).
3: A wins if at least one party outputs “Accept” and
moreover there is no function f ∈ F with input do-
main D∗ and output domain R∗ for which f∗
1 (x) +
m(x) = f (x) for all x ∈ D(cid:48) (where f∗
. . . + f∗
i (x) :=
Eval(i, k∗
i , x)).
1 , . . . , k∗
1 , . . . , k∗
m)
1298The soundness requirement is that every PPT A can
only win the above game with negligible probability in λ.
• Secrecy: Following the (honest) execution of Ver on
keys (k1, . . . , km) generated by Gen(1λ, f ) (with an ar-
bitrary D(cid:48) ⊆ Df ), the joint view of any t parties should
not reveal anything about f except Df and Rf . This
is formalized as in the secrecy requirement of Deﬁni-
tion 2.2, except that the output of Real includes the
entire view of parties in S. When t is unspeciﬁed, it is
understood to be m − 1.
Selective failure attacks. While allowing D(cid:48) to be a
strict subset of D is useful, it may also give rise to secu-
rity vulnerabilities. First, the above soundness requirement
does not rule out a correlation between the set D(cid:48) of relevant
evaluation points and the event of rejecting.1 While selec-
tive failure attacks can often be problematic, we would like
to argue that they are not a major concern in the context
of natural applications of veriﬁable FSS. First, as discussed
earlier, veriﬁable FSS is most strongly motivated by “writ-
ing” scenarios, where we typically have D(cid:48) = D and the
client learns nothing from the event of rejection. Even if we
use D(cid:48) ⊂ D, in such scenarios the client does not need to
be directly informed that an error has been detected, and
his vote can be silently discarded. In any case, the price of
being caught cheating typically outweighs the advantage of
learning one bit of information about D(cid:48).
A second type of attack that may apply to the case where
D(cid:48) ⊂ D is when an invalid function shared by a malicious
client coincides with a valid function when restricted to D(cid:48).
For instance, in a veriﬁable DPF protocol, a malicious client
can share a function that has a nonzero output on many
points (say, simultaneously voting for many candidates) in
the hope that the function will have only one nonzero output
on the (unknown) subset D(cid:48). Both types of attacks are
irrelevant to the case D(cid:48) = D, and they can be mitigated by
incurring a penalty for being caught cheating.
4.2 Template for Veriﬁable FSS Protocols
We assume that the output domain G is of the form Z(cid:96)
p,
for a prime p and positive integer (cid:96), and view it as the ad-
ditive group of the (large) ﬁnite ﬁeld F
p(cid:96) . Our veriﬁcation
protocols typically achieve soundness error of O(1/|F|) by
communicating just a constant number of ﬁeld elements. To
verify FSS over a small group, such as G = Z2, one can
view G as a subgroup of the additive group of a suﬃciently
large ﬁeld, say F = F
2λ , and apply a veriﬁcation scheme for
an FSS over F. (This does not require any changes to Gen
or Eval, only to make Ver view each output of Eval as an
element of F.)
The high level idea of our veriﬁable protocols is the follow-
ing. Let N = |D(cid:48)|. Consider the function family F(cid:48) deﬁned
by restricting F to the evaluation points in D(cid:48). By locally
applying Eval on the inputs in D(cid:48), the parties obtain an ad-
ditive secret sharing of a (long) vector y ∈ FN consisting of
the values (f∗(x))x∈D(cid:48) . The parties need to verify that y
1In fact, such correlations are inherent to any solution that
only makes a black-box access of Eval, which includes all of
the eﬃcient solutions we present next. Indeed, there is no
way to eﬃciently distinguish between, say, a random point
function on λ-bit inputs and a function that has a nonzero
value on two random inputs.
is valid, namely it is consistent with F(cid:48), using only a small
amount of communication and without revealing informa-
tion about y. For instance, in the case of point functions
the vector y should satisfy the requirement that it has at
most one nonzero entry.
The veriﬁcation that y is well-formed is achieved via the
following combination of randomized linear sketching and
special-purpose MPC. The parties use their common source
of randomness to pick a linear function L : FN → Fd, where
d is a small constant. The function L (also referred to as a
“linear sketch”) is picked from a carefully chosen distribution
L that has the following properties:
1. Given z = L(y), one can decide (with negligible error
probability over the choice of L) whether y is valid,
namely it is consistent with F;
2. This decision procedure is “MPC friendly” in the sense
that there is a very eﬃcient MPC protocol ΠMPC for
verifying that a secret-shared vector z ∈ Fd is of the
right form.
Given a distribution L and an MPC protocol ΠMPC as above,
the protocol Ver proceeds as follows. Party i, holding a
(long) additive share yi of y, locally compresses yi into zi =
L(yi). Then the parties run ΠMPC for deciding whether to
accept y as being consistent with F(cid:48).
To further improve the eﬃciency of ΠMPC, we let the FSS
client distribute between the parties correlated randomness
that is consumed by ΠMPC. This correlated randomness can
be incorporated into the keys produced by Gen and does not
require additional interaction with the client. However, it
is critical that the soundness of the veriﬁcation hold even
if this correlated randomness is distributed by a malicious
client. Our solutions for this type of “client-assisted MPC”
problems can be useful beyond the context of veriﬁable FSS.
To fully instantiate the above template, we need to specify