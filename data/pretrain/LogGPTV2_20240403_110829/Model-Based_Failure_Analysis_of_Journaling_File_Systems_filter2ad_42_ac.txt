Ext3 is a journaling ﬁle system based on the ext2 ﬁle
system [21]. By default, ext3 logs the ﬁle system meta-
data blocks in the journal. It uses different types of journal
metadata blocks to keep track of the transactions and the
blocks that are logged. Journal descriptor blocks store the
ﬁxed location block numbers of the journaled data. Journal
revoke blocks prevent the ﬁle system from replaying some
data that should not be replayed during recovery. Journal
commit blocks mark the end of transactions. Journal super
block stores information about the journal such as the head,
tail, next transaction ID and so on. Apart from these journal
metadata blocks, the log also stores journal data blocks that
are journaled versions of the ﬁxed location blocks.
Ext3 is designed such that its journal metadata blocks
such as the journal super block, descriptor block, revoke
block and commit block contain a magic number that iden-
tiﬁes them as journal metadata blocks. The journal meta-
data block also contains a sequence number that denotes the
transaction number of the particular transaction in which it
occurs. During recovery, if the block read from the journal
does not have the correct magic number, it is treated as a
journal data block. If it has the magic number and if its se-
quence number does not match the next transaction id that is
expected, then those blocks are skipped. Based on our ext3
analysis, we found the following design ﬂaws in handling
write failures.
4.1.1 Committing Failed Transactions
When a write in a transaction fails, ext3 continues to write
the transaction to the log and commits it. This can affect ﬁle
system integrity. For example, when an ordered data write
fails in ordered journaling mode, we expect the ﬁle system
to abort the transaction, because if it commits the transac-
tion, the metadata blocks will end up pointing to wrong or
old data contents on the disk. This problem occurs in ext3
where failure of an ordered write can cause data corruption.
4.1.2 Checkpointing Failed Transactions
When a write in a transaction fails, the ﬁle system must not
checkpoint the blocks that were journaled as part of that
transaction, because during checkpointing if a crash occurs,
the ﬁle system cannot recover the failed transaction. This
can result in a corrupted ﬁle system. Ext3 commits a trans-
action even after a transaction write fails. After committing
the failed transaction, ext3 checkpoints the blocks that were
journaled in that transaction. Depending on the journaling
mode, the checkpointing can be either partial or complete
as described below.
Partial Checkpointing: In certain cases, ext3 only check-
points some of the blocks from a failed transaction. This
happens in data journaling mode when a journal descriptor
block or journal commit block write fails. In these cases,
during checkpointing, only the ﬁle system metadata blocks
of the transaction are checkpointed and the data blocks are
not checkpointed. For example, in data journaling mode,
when a ﬁle is created with some data blocks, if the transac-
tion’s descriptor block fails, then only the metadata blocks
like the ﬁle’s inode, data bitmap, inode bitmap, directory
data, and directory inode blocks are written to their ﬁxed
locations. The data blocks of the ﬁle, which are also jour-
naled in data journaling mode, are not written. Since the
data blocks are not written to their ﬁxed locations, the meta-
data blocks of the ﬁle end up pointing to old or incorrect
contents on the disk.
Complete Checkpointing: In ordered and writeback jour-
naling mode, only ﬁle system metadata blocks are journaled
and no data blocks are written to the log. In these modes,
ext3 checkpoints all the journaled blocks even from a failed
transaction. Below we describe a generic case where it can
cause ﬁle system corruption.
Let there be two transactions T1 and T2, where T1 is
committed ﬁrst followed by T2. Let block B1 be journaled
in T1 and blocks B1 and B2 be journaled in T2. Assume
transaction T2 fails and that the ﬁle system continues to
checkpoint blocks B1 and B2 of the failed transaction T2.
If a crash occurs after writing blocks B1 and B2 to their
ﬁxed locations, the ﬁle system log recovery runs during next
mount. During the recovery only transaction T1 will be re-
covered because T2 is a failed transaction. When T1 is re-
covered, the contents of block B1 will be overwritten by old
contents from T1. After the recovery, the ﬁle system will be
in an inconsistent state where block B1 is from transaction
T1 and block B2 is from transaction T2.
The above explained problem can occur in ext3 when
the write of a journal metadata block like descriptor block,
revoke block, or commit block fails. This can lead to ﬁle
system corruptions resulting in loss of ﬁles, inaccessible di-
rectories and so on.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:10:16 UTC from IEEE Xplore.  Restrictions apply. 
4.1.3 Not Replaying Failed Checkpoint Writes
4.1.6 Ext3 Summary
Checkpointing is the process of writing the journaled blocks
from the log to their ﬁxed locations. When a checkpoint
write fails, the ﬁle system must either attempt to write again
or mark the journal such that the checkpoint write will hap-
pen again during the next log replay. Ext3 does not replay
failed checkpoint writes. This can cause data corruption,
data loss, or loss of ﬁles and directories.
4.1.4 Not Replaying Transactions
Journaling ﬁle systems maintain a state variable to mark the
log as dirty or clean. When the ﬁle system is mounted, if
the log is dirty, the transactions from the log are replayed
to their ﬁxed locations. Usually journaling ﬁle systems up-
date this state variable before starting a transaction and af-
ter checkpointing the transaction. If the write to update this
state variable fails, two things can possibly happen; one, the
ﬁle system might replay a transaction that need not be re-
played; two, it might fail to replay a transaction that needs
recovery. Replaying the same transaction again does not
cause any integrity problems. But the second possibility
(i.e., not replaying the journal contents) can lead to corrup-
tion, or loss of data.
Ext3 maintains its journal state in the journal super
block. Ext3 clears this ﬁeld and writes the journal super
block to indicate a clean journal. To mark the journal as
dirty, the journal super block is written with a non-zero
value in this ﬁeld. When the journal super block write fails,
ext3 does not attempt to write it again or save the super
block in other locations. Moreover, even after the journal
super block failure, ext3 continues to commit transactions
to the log. If the journal super block written to mark the
journal as dirty is failed, the journal appears clean on next
mount. If any transaction needs replay due to a previous
crash, ext3 fails to replay them. This can result in lost ﬁles
and directories.
4.1.5 Replaying Failed Transactions
When a journal data block write fails, that transaction must
be aborted and not replayed. If the transaction is replayed,
journal data blocks with invalid contents might be read and
written to the ﬁxed location. If not handled properly, this
can lead to serious ﬁle system errors.
As said earlier, ext3 does not abort failed transactions. It
continues to commit them to the log. Therefore during re-
covery, it can write invalid contents to ﬁle system ﬁxed loca-
tion blocks. This can corrupt important ﬁle system metadata
and even result in an unmountable ﬁle system.
Overall, we ﬁnd that ext3 is designed only with the whole
system crash in mind; ext3 does not effectively handle sin-
gle block write failures. Some features in ext3 are well de-
signed. First, ext3 does not crash the entire system on failed
writes. Second, by using magic numbers and transaction
IDs on journal metadata blocks, ext3 prevents replay of in-
valid contents. The main weakness in the ext3 design is that
it does not abort failed transactions but continues to commit
them. This can lead to serious ﬁle system errors ranging
from data corruption to unmountable ﬁle systems. We also
found that ext3 sometimes logs empty transactions – trans-
actions that do not have any blocks in them other than the
commit block. Although it does not affect integrity, this can
result in unnecessary disk trafﬁc.
4.2 Reiserfs Analysis
Journaling in Reiserfs is similar to that of ext3 [15].
Reiserfs uses a circular log to capture journal writes and
logs ﬁle system writes at block level. Reiserfs supports all
the three different journaling modes.
It also uses journal
metadata blocks like the journal descriptor block, journal
commit block, and journal super block to describe the trans-
actions and the ﬁxed location blocks. The journal metadata
blocks in Reiserfs also contain a magic number and a trans-
action number similar to that of ext3. Based on our analysis,
we found the following design ﬂaws in Reiserfs.
4.2.1 Crashing File System
When a write fails in Reiserfs, most of the time it crashes
the whole ﬁle system by issuing a panic call. This ne-
cessitates the entire system to be rebooted before using it
again. Not only does this affect processes using Reiserfs,
but it also affects all other processes running in the same
system.
However, crashing the entire ﬁle system on single write
error also has a beneﬁt. When a journal write (journal data
or journal metadata) fails, the system crashes and therefore
the failed transaction does not get committed to the disk.
When the system boots up and mounts the ﬁle system, Reis-
erfs performs recovery. During recovery, it replays all trans-
actions that were successfully committed before the failed
transaction. Since no failed transactions are committed,
they are not replayed and the ﬁle system remains in a consis-
tent state after recovery. This avoids some of the problems
that we saw in ext3 such as checkpointing failed transac-
tions, not replaying successful transactions, and replaying
failed transactions.
In other words, Reiserfs converts all
failures, whether transient or sticky, local or global, into en-
tire disk failure. However, if a particular journal block write
always fails, Reiserfs repeatedly crashes the whole system.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:10:16 UTC from IEEE Xplore.  Restrictions apply. 
Reiserfs also crashes the system when a checkpoint write
fails. After the crash, recovery takes place and the failed
checkpoint write is replayed properly. Note that this works
correctly for transient write failures but for permanent write
errors, Reiserfs requires fsck to be run to handle replay fail-
ures. Crashing on checkpoint write failures prevents the
problem of not replaying failed checkpoint writes that hap-
pens in ext3.
4.2.2 Committing Failed Transactions
On certain write failures, Reiserfs does not crash but con-
tinues to commit the failed transaction. In ordered journal-
ing mode, when an ordered data block write fails, Reiserfs
journals the transaction and commits it without handling the
write error. This can result in corrupted data blocks be-
cause on such failed transactions the metadata blocks of the
ﬁle system will end up pointing to invalid data contents.
Reiserfs does not have a uniform failure handling policy; it
crashes on some write failures and not on others. File sys-
tem corruption would have been prevented if Reiserfs was
crashing the system even on ordered write failures.
4.2.3 Reiserfs Summary
Overall, we ﬁnd that Reiserfs avoids many of the mistakes
done by ext3, but expensively at the cost of crashing the en-
tire ﬁle system. Basically, Reiserfs converts a fail-stutter
system in to a fail-stop one to handle the write errors. We
ﬁnd that not committing a failed transaction, as done in
Reiserfs, is a desirable design decision because it would
solve many of the problems that we saw in ext3. However,
if the block write errors are permanent, then Reiserfs might
make the system unusable by repeated crashing. We also
used our model to ﬁnd a bug in Reiserfs on Linux 2.6.7.
The data journaling mode in that version was behaving like
ordered journaling mode. Thus our journaling model can
also be used to ﬁnd such bugs where the semantics of jour-
naling is violated.
4.3 JFS Analysis
record from other journal records as most of the transactions
are small and so can ﬁt in a single journal block. We modi-
ﬁed our ordered journaling model to work under JFS record
level journaling. We performed the same failure analysis on
JFS and found the following problems.
4.3.1 Crashing File System
Similar to Reiserfs, JFS also crashes the ﬁle system on cer-
tain write failures. For example, the system crashes when
the journal super block write fails during the mount opera-
tion. As said earlier, crashing the whole system affects all
the processes running in that system. Also, crashing the
whole system is not a graceful way to provide fault toler-
ance if the write errors are permanent.
4.3.2 Not Replaying Failed Checkpoint Writes
When a checkpoint write fails, JFS does not rewrite it or
mark the transaction for a replay. JFS simply ignores this
error, which can lead to a corrupted ﬁle system. This behav-
ior is similar to that of ext3. Since both these ﬁle systems
do not record failed checkpoint writes, they have no way of
identifying which transactions must be replayed again.
4.3.3 Committing Failed Transactions
We found that all the three journaling ﬁle systems commit
a transaction on an ordered block write failure. JFS does
not notify the application of an ordered write failure and
commits the transaction. This can lead to data corruption.
4.3.4 Failing to Recover
When a journal block write fails, JFS does not abort the
failed transaction but commits it. If a crash happens after
a journal write failure, the logredo routine of JFS fails
because of unrecognized log record type. This can lead to
unmountable ﬁle system.
IBM JFS works only in ordered journaling mode [2].
Unlike ext3 and Reiserfs, it does not support data and write-
back journaling modes. JFS also differs from ext3 and Reis-
erfs by the information that is written to the log. While
ext3 and Reiserfs log whole blocks in to the journal, JFS
writes records of modiﬁed blocks to the log. However, or-
dered data block writes are written as whole blocks similar
to other ﬁle systems.
Since JFS does record level journaling, log blocks can-
not be classiﬁed as journal data blocks or journal commit
blocks. A single log write can contain both the journal data
records and commit records. It is hard to separate commit
4.3.5 JFS Summary
JFS has some of the design ﬂaws we saw in ext3 and Reis-
erfs. For example, JFS commits failed transactions and does
not replay failed checkpoint writes. It also crashes the ﬁle
system like Reiserfs on journal super block write failures.
We also found a bug in JFS. JFS does not ﬂush the blocks
associated with a ﬁle even after a sync call. We created
a zero sized ﬁle and called fsync on the ﬁle descriptor.