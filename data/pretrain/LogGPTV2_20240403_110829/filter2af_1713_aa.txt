**作者：天融信阿尔法实验室  
公众号：**
### 一、前言
模糊测试（Fuzzing）技术作为漏洞挖掘最有效的手段之一，近年来一直是众多安全研究人员发现漏洞的首选技术。AFL、LibFuzzer、honggfuzz等操作简单友好的工具相继出现，也极大地降低了模糊测试的门槛。笔者近期学习漏洞挖掘过程中，感觉目前网上相关的的资源有些冗杂，让初学者有些无从着手，便想在此对学习过程中收集的一些优秀的博文、论文和工具进行总结与梳理、分享一些学习过程中的想法和心得，同时对网上一些没有涉及到的内容做些补充。
由于相关话题涉及的内容太广，笔者决定将所有内容分成一系列文章，且只围绕AFL这一具有里程碑意义的工具展开，从最简单的使用方法和基本概念讲起，再由浅入深介绍测试完后的后续工作、如何提升Fuzzing速度、一些使用技巧以及对源码的分析等内容。因为笔者接触该领域也不久，内容中难免出现一些错误和纰漏，欢迎大家在评论中指正。
第一篇文章旨在让读者对AFL的使用流程有个基本的认识，文中将讨论如下一些基本问题：
  1. AFL的基本原理和工作流程；
  2. 如何选择Fuzzing的目标?
  3. 如何获得初始语料库?
  4. 如何使用AFL构建程序？
  5. AFL的各种执行方式；
  6. AFL状态窗口中各部分代表了什么意义？
### 二、AFL简介
AFL（American Fuzzy Lop）是由安全研究员Micha?
Zalewski（[@lcamtuf](https://twitter.com/lcamtuf)）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。
①从源码编译程序时进行插桩，以记录代码覆盖率（Code Coverage）；  
②选择一些输入文件，作为初始测试集加入输入队列（queue）；  
③将队列中的文件按一定的策略进行“突变”；  
④如果经过变异文件更新了覆盖范围，则将其保留添加到队列中;  
⑤上述过程会一直循环进行，期间触发了crash的文件会被记录下来。
### 三、选择和评估测试的目标
开始Fuzzing前，首先要选择一个目标。 AFL的目标通常是接受外部输入的程序或库，输入一般来自文件（后面的文章也会介绍如何Fuzzing一个网络程序）。
#### 1\. 用什么语言编写
AFL主要用于C/C++程序的测试，所以这是我们寻找软件的最优先规则。（也有一些基于AFL的JAVA
Fuzz程序如[kelinci](https://github.com/isstac/kelinci)、[java-afl](https://github.com/Barro/java-afl)等，但并不知道效果如何）
#### 2\. 是否开源
AFL既可以对源码进行编译时插桩，也可以使用AFL的`QEMU
mode`对二进制文件进行插桩，但是前者的效率相对来说要高很多，在Github上很容易就能找到很多合适的项目。
#### 3\. 程序版本
目标应该是该软件的最新版本，不然辛辛苦苦找到一个漏洞，却发现早就被上报修复了就尴尬了。
#### 4\. 是否有示例程序、测试用例
如果目标有现成的基本代码示例，特别是一些开源的库，可以方便我们调用该库不用自己再写一个程序；如果目标存在测试用例，那后面构建语料库时也省事儿一点。
#### 5.项目规模
某些程序规模很大，会被分为好几个模块，为了提高Fuzz效率，在Fuzzing前，需要定义Fuzzing部分。这里推荐一下源码阅读工具Understand，它`treemap`功能，可以直观地看到项目结构和规模。比如下面ImageMagick的源码中，灰框代表一个文件夹，蓝色方块代表了一个文件，其大小和颜色分别反映了行数和文件复杂度。
#### 6\. 程序曾出现过漏洞
如果某个程序曾曝出过多次漏洞，那么该程序有仍有很大可能存在未被发现的安全漏洞。如[ImageMagick](https://github.com/ImageMagick/ImageMagick)每个月都会发现难以利用的新漏洞，并且每年都会发生一些具有高影响的严重漏洞，图中可以看到仅2017年就有357个CVE！(图源[medium.com](https://medium.com/@ilja.bv/yet-another-memory-leak-in-imagemagick-or-how-to-exploit-cve-2018-16323-a60f048a1e12))
### 四、构建语料库
AFL需要一些初始输入数据（也叫种子文件）作为Fuzzing的起点，这些输入甚至可以是毫无意义的数据，AFL可以通过启发式算法自动确定文件格式结构。lcamtuf就在博客中给出了一个有趣的[例子](https://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html)——对djpeg进行Fuzzing时，仅用一个字符串”hello”作为输入，最后凭空生成大量jpge图像！
尽管AFL如此强大，但如果要获得更快的Fuzzing速度，那么就有必要生成一个高质量的语料库，这一节就解决如何选择输入文件、从哪里寻找这些文件、如何精简找到的文件三个问题。
#### 1\. 选择
##### (1) 有效的输入
尽管有时候无效输入会产生bug和崩溃，但有效输入可以更快的找到更多执行路径。
##### (2) 尽量小的体积
较小的文件会不仅可以减少测试和处理的时间，也能节约更多的内存，AFL给出的建议是最好小于1
KB，但其实可以根据自己测试的程序权衡，这在AFL文档的`perf_tips.txt`中有具体说明。
#### 2\. 寻找
  1. 使用项目自身提供的测试用例
  2. 目标程序bug提交页面
  3. 使用格式转换器，用从现有的文件格式生成一些不容易找到的文件格式：
  4. afl源码的testcases目录下提供了一些测试用例
  5. 其他大型的语料库
  6. [afl generated image test sets](http://lcamtuf.coredump.cx/afl/demo/)
  7. [fuzzer-test-suite](https://github.com/google/fuzzer-test-suite)
  8. [libav samples](https://samples.libav.org/)
  9. [ffmpeg samples](http://samples.ffmpeg.org/)
  10. [fuzzdata](https://github.com/MozillaSecurity/fuzzdata)
  11. [moonshine](https://gitlab.anu.edu.au/lunar/moonshine)
#### 3\. 修剪
网上找到的一些大型语料库中往往包含大量的文件，这时就需要对其精简，这个工作有个术语叫做——语料库蒸馏（Corpus
Distillation）。AFL提供了两个工具来帮助我们完成这部工作——`afl-cmin`和`afl-tmin`。
##### (1) 移除执行相同代码的输入文件——AFL-CMIN
`afl-cmin`的核心思想是： **尝试找到与语料库全集具有相同覆盖范围的最小子集**
。举个例子：假设有多个文件，都覆盖了相同的代码，那么就丢掉多余的文件。其使用方法如下：
    $ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params]
更多的时候，我们需要从文件中获取输入，这时可以使用“@@”代替被测试程序命令行中输入文件名的位置。Fuzzer会将其替换为实际执行的文件：
    $$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@
下面的例子中，我们将一个有1253个png文件的语料库，精简到只包含60个文件。
##### (2) 减小单个输入文件的大小——AFL-TMIN
整体的大小得到了改善，接下来还要对每个文件进行更细化的处理。afl-tmin缩减文件体积的原理这里就不深究了，有机会会在后面文章中解释，这里只给出使用方法（其实也很简单，有兴趣的朋友可以自己搜一搜）。
`afl-tmin`有两种工作模式，`instrumented mode`和`crash mode`。默认的工作方式是`instrumented
mode`，如下所示：
     $ afl-tmin -i input_file -o output_file -- /path/to/tested/program [params] @@ 
如果指定了参数`-x`，即`crash mode`，会把导致程序非正常退出的文件直接剔除。
    $ afl-tmin -x -i input_file -o output_file -- /path/to/tested/program [params] @@
`afl-tmin`接受单个文件输入，所以可以用一条简单的shell脚本批量处理。如果语料库中文件数量特别多，且体积特别大的情况下，这个过程可能花费几天甚至更长的时间！
     for i in *; do afl-tmin -i $i -o tmin-$i -- ~/path/to/tested/program [params] @@; done; 
下图是经过两种模式的修剪后，语料库大小的变化：
这时还可以再次使用`afl-cmin`，发现又可以过滤掉一些文件了。
### 五、构建被测试程序
前面说到，AFL从源码编译程序时进行插桩，以记录代码覆盖率。这个工作需要使用其提供的两种编译器的wrapper编译目标程序，和普通的编译过程没有太大区别，本节就只简单演示一下。
#### 1\. afl-gcc模式
`afl-gcc`/`afl-g++`作为`gcc`/`g++`的wrapper，它们的用法完全一样，前者会将接收到的参数传递给后者，我们编译程序时只需要将编译器设置为`afl-gcc`/`afl-g++`就行，如下面演示的那样。如果程序不是用autoconf构建，直接修改`Makefile`文件中的编译器为`afl-gcc/g++`也行。
    $ ./configure CC="afl-gcc" CXX="afl-g++" 
在Fuzzing共享库时，可能需要编写一个简单demo，将输入传递给要Fuzzing的库（其实大多数项目中都自带了类似的demo）。这种情况下，可以通过设置`LD_LIBRARY_PATH`让程序加载经过AFL插桩的.so文件，不过最简单的方法是静态构建，通过以下方式实现：
    $ ./configure --disable-shared CC="afl-gcc" CXX="afl-g++"
下面libtiff这个例子中，加上`--disable-shared`选项后，`libtiff.so`被编译进了目标程序中。
#### 2\. LLVM模式
LLVM Mode模式编译程序可以获得更快的Fuzzing速度，用法如下所示：
    $ cd llvm_mode
    $ apt-get install clang
    $ export LLVM_CONFIG=`which llvm-config` && make && cd ..
    $ ./configure --disable-shared CC="afl-clang-fast" CXX="afl-clang-fast++"
笔者在使用高版本的clang编译时会报错，换成clang-3.9后通过编译，如果你的系统默认安装的clang版本过高，可以安装多个版本然后使用`update-alternatives`切换。
### 六、开始Fuzzing
`afl-fuzz`程序是AFL进行Fuzzing的主程序，用法并不难，但是其背后巧妙的工作原理很值得研究，考虑到第一篇文章只是让读者有个初步的认识，这节只简单的演示如何将Fuzzer跑起来，其他具体细节这里就暂时略过。
#### 1\. 白盒测试
##### (1) 测试插桩程序
编译好程序后，可以选择使用`afl-showmap`跟踪单个输入的执行路径，并打印程序执行的输出、捕获的元组（tuples），tuple用于获取分支信息，从而衡量衡量程序覆盖情况，下一篇文章中会详细的解释，这里可以先不用管。
    $ afl-showmap -m none -o /dev/null -- ./build/bin/imagew 23.bmp out.png
    [*] Executing './build/bin/imagew'...
    -- Program output begins --    23.bmp -> out.png
    Processing: 13x32
    -- Program output ends --    [+] Captured 1012 tuples in '/dev/null'.
使用不同的输入，正常情况下`afl-showmap`会捕获到不同的tuples，这就说明我们的的插桩是有效的，还有前面提到的`afl-cmin`就是通过这个工具来去掉重复的输入文件。
    $ $ afl-showmap -m none -o /dev/null -- ./build/bin/imagew 111.pgm out.png
    [*] Executing './build/bin/imagew'...
    -- Program output begins --    111.pgm -> out.png
    Processing: 7x7
    -- Program output ends --    [+] Captured 970 tuples in '/dev/null'.
##### (2) 执行FUZZER
在执行`afl-fuzz`前，如果系统配置为将核心转储文件（core）通知发送到外部程序。
将导致将崩溃信息发送到Fuzzer之间的延迟增大，进而可能将崩溃被误报为超时，所以我们得临时修改`core_pattern`文件，如下所示：
    echo core >/proc/sys/kernel/core_pattern
之后就可以执行`afl-fuzz`了，通常的格式是：