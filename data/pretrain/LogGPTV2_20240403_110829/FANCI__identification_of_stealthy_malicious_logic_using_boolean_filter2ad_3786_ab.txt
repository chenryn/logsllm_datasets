tool and underlying algorithm.
Our goal is to identify suspicious circuits, and a suspicious cir-
cuit is one that is nearly unused. In prior related work [5], suspi-
cious circuitry was deﬁned as circuits that are not used or otherwise
activated during design veriﬁcation tests. Our deﬁnition contrasts
in two key ways. First, we do not care about veriﬁcation tests. Sec-
ond, we consider wires to be suspicious if they are activated rarely
rather than never at all. In other words, we are not simply looking
for unused logic. We are looking for logic that is used rarely or
in situations that have a low probability of being exercised during
regular testing.
Dependence: We distinguish between two distinct dependence re-
lations that can exist between wires. These are physical dependence
and value dependence. A wire w2 is physically dependent on an-
other wire w1 if the signal in w2 receives signal from the wire w1.
In other words, there is a path of combinational logic connecting
w1 to w2. Thus, the value that w2 carries comes from computation
that makes use of the value carried by w1. We can also think of w2
as the output of a small circuit for which w1 is an input. Outputs
are dependent on inputs. When we say that w2 is dependent on w1,
we refer to physical dependency. If w2 is dependent on w1, then we
say w1 is a dependency of w2. Thus, dependent and dependency
are dual notions. A is a dependent of B when B is a dependency
of A.
Value dependence means that there is functional dependence. A
wire w2 is value dependent on w1 if the digital value taken on by w2
changes depending on the value of w1. Given that w2 is physically
dependent on w1, w1 potentially determines the value of w2, but it
is not guaranteed. For example, in the case of a circuit that always
outputs digital one, the input values do not affect the output at all.
We break down value dependence into three relevant types. These
terms convey the notion of how much one wire affects or inﬂu-
ences another. They are unaffecting, always-affecting and weakly-
affecting.
Unaffecting Dependency: A dependency of a wire is unaffecting
if it never determines the value of its dependent wire. An example
of this is shown in Table 1. The truth table shown represents a small
circuit with three inputs (A, B, C) and one output (O). There are
Table 2: An example of an always-affecting input dependency.
C inﬂuences the value of the output O in every row.
Output O
Input A Input B
Input C
1
1
1
1
0
0
0
0
1
1
0
0
1
1
0
0
1
0
1
0
1
0
1
0
1
0
0
1
0
1
1
0
eight possible cases, broken into four pairings. Within each pairing,
the value of C can be zero or one. However, that choice does not
matter, because the value of the output O is ﬁxed with respect to C.
The truth table is equivalent to a circuit where O is equal to the
logical XOR of A and B. Within each pair of rows, the set of values
for O is either all ones or all zeros. Thus, we say that the input C
is an unaffecting dependency of the dependent output wire O.
Always-Affecting Dependency: The opposite of unaffecting is
always-affecting. A dependency of a wire is always-affecting if
the value of that dependency always inﬂuences the value of its de-
pendent wire. An example is shown in Table 2. The circuit being
represented is similar to the one from Table 1. In this case, how-
ever, every pair of rows is affected by the value of the input C.
The truth table is equivalent to a circuit where the output O is
computed as the logical XOR of all three of its inputs. In this case,
no matter what the values of A and B are, the value of C determines
the computed value of the output.
Weakly-Affecting Dependency: Weakly-affecting dependencies
are the ones we care about the most in this paper. This is because
malicious backdoor triggers rely on weakly-affecting input depen-
dencies for the implementation of nearly useless logic.
A weakly-affecting dependency is a case where one input wire
affects an output but only very rarely. One example of this could
be a large comparator. Consider a circuit that compares a 64-bit
array of wires against the value 0xcafebeefcafebeef. Consider one
of those 64 input wires, say the least signiﬁcant bit. The output
wire takes on the value one only if all 64 input wires match the
speciﬁed comparison value. This means that the least signiﬁcant
bit only matters if the 63 other bits already match. In that case, the
least signiﬁcant bit would make the difference between 0xcafebeef-
cafebeee and 0xcafebeefcafebeef and thus the difference between
and output of zero or one. However, in the other 263 − 1 cases, that
least signiﬁcant bit is irrelevant. For example, it does not matter if
the input is 0xaaaaaaaaaaaaaaaa or 0xaaaaaaaaaaaaaaab. Thus, out
of the 263 total input case pairs, there is only a single one in which
that input bit matters. Thus, it is a weakly-affecting dependency for
the output wire.
In general, a wire w2 has a weakly-affecting dependency w1 if in
nearly all cases the value of w1 does not determine the value of w2.
In other words, for some threshold value ǫ > 0 such that ǫ ≪ 1,
the control value of w1 on w2 is less than ǫ.
If we consider the example from Section 1, of a backdoor where
a comparator on the memory bus ﬁres for one unique large data
value on the bus, all of the input wires to that comparator are clear
examples of weakly-affecting dependencies for the output wire that
serves as the backdoor trigger.
699Algorithm 2 Compute Control Value
1: count ← 0
2: c ← Column(w1)
3: T ← TruthTable(w2)
4: for all Rows r in T do
5:
6:
7:
8:
9:
end if
10: end for
11: result ← count
size(T )
x0 ← Value of w2 for c = 0
x1 ← Value of w2 for c = 1
if x0 6= x1 then
count++
3.2 Computing Control Values
In this section, we discuss how to compute control values for the
dependencies of wires that are the outputs of circuits. The discus-
sion thus far has motivated why weakly-affecting dependencies are
stealthy wires of interest. They are necessary for the implemen-
tation of malicious backdoors. In other words, if the output of a
circuit or gate is carrying a stealthy, malicious signal, then some or
all of its inputs are weakly-affecting. We compute control value to
quantify how weak or strong the degree of effect is.
Roughly speaking, the control value of an input w1 on an out-
put w2 quantiﬁes how much the truth table representing the com-
putation of w2 is inﬂuenced by the column corresponding to w1.
Speciﬁcally, the control value is a number between zero and one
quantifying what fraction of the rows in the truth table for a cir-
cuit are directly inﬂuenced by w1. Note that this is independent
of particular tests inputs that might be supplied during validation.
Even with high quality test suites, most tests fail to exercise all of
the internal circuits because input coverage and code coverage are
not equivalent to internal state or value coverage. This provides
attackers with an obvious way to hide their backdoors. By oper-
ating statically and looking at the truth tables, we can observe the
behaviors of every gate in the design.
The algorithm to compute the control value of w1 on w2 is pre-
sented as Algorithm 2. We note that in step 3, we do not actually
construct the exponentially large truth table. We instead construct
the corresponding function, which is equivalent to a BDD.
There is one further and necessary optimization we make. Since
the sizes of truth tables grow exponentially (with respect to the
number of input wires), computing control values deterministically
is exponentially hard. Thus, in our evaluation we approximate con-
trol values by only evaluating a constant-sized subset of the rows in
the truth table. We choose the subset of rows uniformly at random
at runtime to make it impossible for attackers to know which rows
we will choose. This algorithm is depicted in Algorithm 3.
To take a simple example, suppose we have a wire w2 that is
dependent on an input wire w1. Let w2 have n other dependencies.
From the set of possible values for those n wires (2n-many), we
choose a constant number, let us say for instance 10,000. Then for
those 10,000 cases, we set w1 to zero and then to one. For each of
the 10,000 cases, we see if changing w1 changes the value of w2.
If w2 changes m times, then the approximate control value of w1
on w2 is m
10,000 .
The fact that we choose the inputs at random is important. Back-
doors can be designed to evade known validation test suites. Only
by choosing at random can we guarantee that the attacker will not
know what part of the truth table is going to be explored. Our
hypothesis, which is supported by our results in Section 5, is that
choosing a constant, large number of inputs at random is sufﬁcient
2n
Algorithm 3 Compute Approximate Control Value
1: numSamples ← N (usually 215)
2: n ← number of inputs
3: rowF raction ← numSamples
4: count ← 0
5: c ← Column(w1)
6: T ← TruthTable(w2)
7: for all Rows r in T do
8:
9:
10:
11:
12:
13:
14:
end if
15: end for
16: result ← count
x0 ← Value of w2 for c = 0
x1 ← Value of w2 for c = 1
if x0 6= x1 then
if rand() < rowF raction then
count++
end if
numSamples
for the weak law of large numbers to take effect, resulting in small
statistical deviations and high quality approximations.
3.3 Heuristics for Identifying Backdoors from
Control Values
When we are ﬁnished computing approximate control values for
each input, we have a vector of values for each output of each gate
in the design. In this section we describe the heuristics that we use
for making ﬁnal decisions about wires in designs. Given a vector of
control values, these heuristics determine whether or not a wire is
suspicious enough to be ﬂagged for inspection. For example, hav-
ing only one weakly-affecting wire or a wire that is only borderline
weakly-affecting might not be sufﬁciently suspicious. This might
be a wire that is in the same module as a backdoor but has no re-
lation to it. Or it could simply be a benign but slightly inefﬁcient
circuit. This is why we need heuristics for taking into account all
of the control values in the vector.
Going back to the example where w2 is our output, w2 has a
vector of n + 1 control values from its inputs (w1 and the n others),
each between zero and one. These n + 1 numbers are the n + 1
control values from the dependencies of w2. In this section, we
discuss options for processing these vectors to make a distinction
between suspicious and non-suspicious output wires.
For a small but real example of what these vectors can look like,
consider a standard, backdoor-free multiplexer with two selection
bits that are used to select between four data inputs. This common
circuit is depicted in Figure 1. The output M of the multiplexer is
dependent on all four data inputs and both selection bits. Seman-
tically, the selection bits choose which of the four data values is
consumed.
We can see intuitively what the control values are for the six
input wires (computation for one input is shown explicitly in Fig-
ure 1). The situation is symmetric for each of the four data wires
(A, B, C and D). They directly control the output M in the cases
when the selection bits are set appropriately. This occurs in one
fourth of the cases, and each of these data inputs has control value
0.25. This can also be conﬁrmed by writing out the truth table and
counting the rows.
The two selection bits have higher control values. A given se-
lection bit chooses between two of the data values. For example, if
S1 = 1 then S2 chooses between B and D. In that case S2 matters
if and only if B 6= D, which occurs in half of the cases. So the
control values for the two selection bits are 0.50. The full vector of
700Figure 1: A standard 4-to-1 multiplexer. The output M takes on the value of one of the four data inputs (A, B, C, D) depending on
the values of the two selection bits (S1, S2).
Figure 2: A malicious 4-to-1 multiplexer. The output M takes on the value of one of the four data inputs (A, B, C, D) depending on
the values of the two selection bits (S1, S2). There are also 64 extra selection bits ({S3, · · · S66}) that only change the output if they
match a speciﬁc key.
control values for the output M contains six values, one for each of
the six inputs. The values are:
[0.25, 0.25, 0.25, 0.25, 0.50, 0.50]
Intuitively, this is a benign circuit, as we would expect. All of the
inputs are in the middle of the spectrum (not close to zero and not
close to one) which is indicative of a common and efﬁcient circuit.
Figure 2 depicts a malicious version of a multiplexer. There are
64 additional select bits. When those 64 bits match a speciﬁc 64-
bit key, then the output of the multiplexer is changed to a malicious
payload. In terms of the truth table, this affects only an exponen-
tially small fraction of the output rows. The vector of control values
we would get for the output M would include 64 additional values
for those 64 extra input wires. Each of those control values would
be on the order of 2−63. Intuitively, this is an suspicious circuit, as
it is a textbook backdoor. We next discuss heuristics for interpret-
ing these vectors.
From a large circuit or large design, we get a variety of these
control value vectors, one each per intermediate output within the
circuit. The guarantee we have about the distribution of control
values is at least one or a few of them will be zero or nearly zero for