title:Anycast In context: a tale of two systems
author:Thomas Koch and
Ethan Katz-Bassett and
John S. Heidemann and
Matt Calder and
Calvin Ardi and
Ke Li
Anycast in Context: A Tale of Two Systems
Thomas Koch
Columbia University
Ethan Katz-Bassett
Columbia University
Ke Li
Columbia University
Matt Calder
Microsoft/Columbia University
Calvin Ardi
USC/ISI
John Heidemann
USC/ISI
ABSTRACT
Anycast is used to serve content including web pages and DNS, and
anycast deployments are growing. However, prior work examining
root DNS suggests anycast deployments incur significant inflation,
with users often routed to suboptimal sites. We reassess anycast
performance, first extending prior analysis on inflation in the root
DNS. We show that inflation is very common in root DNS, affecting
more than 95% of users. However, we then show root DNS latency
hardly matters to users because caching is so effective. These find-
ings lead us to question: is inflation inherent to anycast, or can
inflation be limited when it matters? To answer this question, we
consider Microsoft’s anycast CDN serving latency-sensitive con-
tent. Here, latency matters orders of magnitude more than for root
DNS. Perhaps because of this need, only 35% of CDN users experi-
ence any inflation, and the amount they experience is smaller than
for root DNS. We show that CDN anycast latency has little inflation
due to extensive peering and engineering. These results suggest
prior claims of anycast inefficiency reflect experiments on a sin-
gle application rather than anycast’s technical potential, and they
demonstrate the importance of context when measuring system
performance.
CCS CONCEPTS
• Networks → Network performance analysis.
KEYWORDS
Anycast, root DNS, routing, latency, CDN.
ACM Reference Format:
Thomas Koch, Ke Li, Calvin Ardi, Ethan Katz-Bassett, Matt Calder, and John
Heidemann. 2021. Anycast in Context: A Tale of Two Systems. In ACM
SIGCOMM 2021 Conference (SIGCOMM ’21), August 23–27, 2021, Virtual
Event, USA. ACM, New York, NY, USA, 20 pages. https://doi.org/10.1145/
3452296.3472891
1 INTRODUCTION
IP anycast is an approach to routing in which geographically diverse
servers known as anycast sites all use the same IP address. It is
used by a number of operational Domain Name System (DNS) [1, 7,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472891
31, 39, 65] and Content Delivery Network (CDN) [16, 21, 30, 65, 75]
deployments today, in part because of its ability to improve latency
to clients and decrease load on each anycast server [45, 55, 64].
However, studies have argued that anycast often provides sub-
optimal performance compared to the lowest latency one could
achieve given deployed sites [51, 54, 67]. Notably, the SIGCOMM
2018 paper "Internet Anycast: Performance, Problems, & Potential"
has drawn attention to the fact that anycast can inflate latency by
hundreds of milliseconds [51], leaving readers of the paper with
a poor impression of anycast. Conversely, other work has shown
inflation is quite low in Microsoft’s anycast CDN [16] and Google
Public DNS [50], but used different coverage, metrics, and method-
ology, so it is difficult to directly compare results. Perhaps because
of the very different takeaways of these studies, we have found that
some experts in the community have negative opinions of anycast.
In particular, it seems surprising that anycast continues to see more
adoption and growth in production systems – why continue to use
anycast if it causes inflation?
To understand the impact of anycast inefficiency, and its wide
use in spite of inflation, we step back and evaluate anycast as a com-
ponent of actual applications/services. User-affecting performance
depends on the anycast deployment, how anycast is used within
the service, and how users interact with the service. To see these
effects, we consider anycast’s role within two real-world systems:
the root DNS and Microsoft’s anycast CDN serving web content.
These applications have distinct goals, they are key components
of the Internet, and they are two of the dominant, most studied
anycast use cases.
We analyze root DNS [39] packet traces which are available
via DITL [26] and which are featured in existing anycast studies
[23, 51, 54, 58, 69], with increased coverage compared to prior work.
The 13 root letters operate independently with diverse deployment
strategies, enabling the study of different anycast deployments
providing the same service. We analyze two days of unsampled
packet captures from nearly all root DNS letters, consisting of tens
of billions of queries from millions of recursive resolvers querying
on behalf of all users worldwide, giving us broad coverage.
We also examine Microsoft’s CDN using the same methodol-
ogy we use for the root DNS so we can directly compare results.
Microsoft’s CDN configures subsets of sites into multiple anycast
“rings” of different sizes, providing deployment diversity, but all
operated by one organization. We analyze global measurements
from over a billion Microsoft users in hundreds of countries/regions,
giving us a complete view of CDN performance.
With these measurements, we present the largest study of any-
cast latency and inflation to date. We first validate and extend prior
work on inflation in anycast deployments [51]. Whereas that work
focused primarily on a single root letter, we analyze almost the
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
whole root DNS. By joining root DNS captures with global-scale
traces of user behavior, we find that more users than previously
thought experience some inflation (on average, more than 95%), and
as many as 40% of users experience more than 100 ms of inflation
to some root letters (§3). However, average inflation per query to
the roots is lower than previously thought, since each recursive
resolver can preferentially query its best performing root letter
– on average, only 10% of users experience more than 100 ms of
inflation.
Do recursives have to implement preferential querying strategies
for their users so that inflation does not hurt user performance?
The answer is a resounding “no” – using new methodology that
amortizes DNS queries over users who benefit from cached query
results, we find differences in latency and inflation among root
letters are hardly perceived by users – most users interact with the
root DNS once per day (§4). Delay is minimal due to caching of
root DNS records with long TTLs at recursive resolvers.
The inflated anycast routes to root DNS could be a result of
latency not mattering, causing root operators to not optimize for
it, or inflation could be inherent in anycast routing as suggested in
prior work. To determine which is the case, we use measurements
from Microsoft’s CDN and find that, were latency to Microsoft’s
CDN to be hypothetically inflated as to individual root letters, it
would result in hundreds of milliseconds of additional latency per
page load. This increased latency would negatively affect the user’s
overall experience, especially when compared to root DNS. The
key difference is that users incur several RTTs to Microsoft’s CDN
when fetching web content, whereas users rarely wait for a query
to the root DNS because of DNS caching (§5.1).
With this context, we then measure actual inflation in Microsoft’s
CDN and find that inflation is kept comparatively small (§5.2), espe-
cially compared to individual root letters. To explain why inflation
is so different in these deployments, we contrast AS-level connec-
tivity and inflation between the users, Microsoft’s CDN, and roots.
We find that Microsoft is able to control inflation through extensive
peering and engineering investment (§7.1), even though inefficiency
increases with larger deployments (§7.2). Through discussions with
operators of root DNS and CDNs, we find recent root DNS expan-
sion has (surprisingly) been driven by a desire to reduce latency and
mitigate DDoS attacks, while CDN expansion is driven by market
forces (§7.3).
The comparison between performance in these two deployments
allows us to put results from prior work in perspective [16, 23, 51,
69]. Even though root inflation is large, users rarely experience it,
making its impact on the average query quite small. In contrast,
users frequently interact with the CDN, and inflation there is small.
These inflation results make sense, given the economic incentives
of the organizations running Microsoft’s CDN and the root DNS.
While we expect these results to hold for other latency-sensitive
services using anycast, as they have similar economic incentives,
a key takeaway from our work is that anycast must be analyzed
in the context of the service in which it is used (§7.3), and so we
cannot make definitive statements about generalizability. Hence,
we do not refute past claims that anycast can inflate latencies, but
we expand on these studies to show that, where it counts, anycast
performance can be quite good.
This paper poses no ethical issues.
2 METHODOLOGY AND DATASETS
We use a combination of DNS packet captures and global CDN
measurements to measure latency and inflation. Root DNS data
is readily available [26], while CDN data is proprietary. We sup-
plement these datasets with measurements from RIPE Atlas [71].
We summarize our many data sets’ characteristics, strengths, and
weaknesses in Appendix A.
2.1 Root DNS
The first of the two systems we discuss, the root DNS, is a criti-
cal part of the global DNS infrastructure. DNS is a fundamental
lookup service for the Internet, typically mapping hostnames to IP
addresses [22, 56]. To resolve a name to its result, a user sends DNS
requests to a recursive resolver (recursive). The recursive queries
authoritative DNS servers as it walks the DNS tree from root, to
top-level domain (TLD), and down the tree. Recursives cache results
to answer future requests according to TTLs of records. The root
DNS server is provided by 13 letters [39], each with a different
anycast deployment with 6 to 254 anycast sites (as of July 2021),
run by 12 organizations. A root DNS site can be local or global –
local sites serve small geographic areas or certain ASes (controlled
by restricting the propagation of the anycast BGP announcement
from the site), while global sites are globally reachable.
We use three datasets: for end-users, we use long-term packet
captures from the Information Sciences Institute (ISI) at USC,
and DNS and browser measurements from daily use of two of the
authors. For DNS servers, we use 48-hour packet captures at most
root servers from Day in the Life of the Internet (DITL) [26].
Packet captures from ISI provide a local view of root DNS queries.
The recursive resolver runs BIND v9.11.14. The captures, from 2014
to the present, reflect all traffic (incoming and outgoing) traversing
port 53 of the recursive resolver. We use traces from 2018 (about
100 million queries), as they overlap temporally with our other
datasets. This recursive resolver received queries from hundreds
of users on laptops, and a number of desktop and rack-mounted
computers of a network research group, so the results may deviate
from a typical population. We found no measurement experiments
or other obvious anomalies in the period we use.
We use the 2018 DITL captures, archived by DNS-OARC [26], to
obtain a global view of root DNS use. DITL occurs annually, with
each event including data from most root servers. The 2018 DITL
took place 2018/04/10-12 and included 12 root letters (all except
G root). Traces from I root are fully anonymized, so we did not
use them. Traces from B root are partially anonymized, but only at
the /24 level. Our analysis does not rely on addresses more specific
than /24, so we use all data from B root and all other roots except
G and I. Although the 2018 DITL is older than the most recently
available, it is significantly more complete than recent DITLs; in
Appendix B.3 we conduct analysis on the 2020 DITL and find none
of our main conclusions change.
Since we aim to understand in part how root DNS latency affects
users, we filter queries in DITL that do not affect user latency and
queries generated by recursives about which we have no user data.
We describe this pre-processing of DITL and subsequent joining of
root query volumes with Microsoft’s CDN user population counts.
Of the 51.9 billion daily queries to all roots, we discard 31 billion
queries to non-existing domain names and 2 billion PTR queries.
About 28% of non-existing domain name queries are NXDomain
hijacking detection from Chromium-based browsers [4, 34, 73], and
so involve machine startup and not browsing latency. Prior work
suggests the remainder are generated by other malfunctioning,
automated software [28]. Similarly, while PTR queries have some
uses (traceroutes and confirming hostnames during authentication),
they are not part of typical user web latency. In Appendix B.1,
we find that including invalid TLD queries significantly changes
the conclusions we can draw about how users interact with the
root DNS, and we provide more justification for this step. We next
remove queries from prefixes in private IP space [38] (7% of all
queries). Finally, we analyze only IPv4 data and exclude IPv6 traffic
(12% of queries) because we lack v6 user data.
Sources of DNS queries in DITL are typically recursive resolvers,
so the captures alone provide no information about how many
DNS queries each user makes. To estimate per-user latency, we
augment these traces with the approximate number of Microsoft
users of each recursive, gathered in 2019 (the oldest user data we
have). This user data is from Microsoft DNS data, which counts
unique IP addresses as “users”. This definition undercounts multiple
human users that use a single IP address with Network Address
Translation. Microsoft maps recursives to user IP addresses with an
existing technique that instruments users to request DNS records
for domains Microsoft controls when users fetch content [17, 53].
We join the DITL captures and Microsoft user counts by the
recursive resolver /24, aggregating DITL query volumes and Mi-
crosoft user IP counts, each grouped by /24 prefix1 to increase the
amount of recursives for which we have user data. This aggregation
is justified since many organizations use colocated servers within
the same /24 as recursives [31, 63]. Prior work has also found that
up to 80% of /24’s are collocated [29]. We provide additional justifi-
cation for this preprocessing step in Appendix B.2, by showing all
addresses in a /24 in DITL are almost always routed to the same