tiation/nullification, resource release, memory cleaning, refcount
operations, unlock, and some other critical APIs. As for the impact
of these missed security operations, they could lead to DoS, memory
corruption, information leak, overflow, privilege gaining, and code
execution. 25 of these vulnerabilities have a CVSS score more than
7, and six have a CVSS core of 10 (the highest security level).
2.3 Causes of Missing Security Operations
Based on our study of existing bugs, the causes of missing security
operations can be roughly classified into two categories. (1) Com-
plicated program logic. With the growth of the program scale, its
execution paths increase exponentially, which makes it difficult for
developers to carefully review all the paths. According to our analy-
sis, even a single function in Linux kernel could have hundreds lines
of source code. The longest bug function detected by IPPO contains
613 lines of code, which is difficult for manual review. Therefore, it is
easy for developers to forget to apply necessary security operations
or fixing-patches while developing such complicated program logic.
(2) Poorly designed security related APIs. The misleading designs of
security related APIs could easily make developers misuse them
and introduce bugs due to missed security operations. Among the
refcount leak bugs found by IPPO, 87% bugs are caused by poorly de-
signed refcount APIs (mainly pm_runtime_get_sync()), even though
such APIs have a sound document. We will discuss the details of this
problem in §6.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea16292.4 Detecting Missed Security Operations
To determine whether a missed security operation is necessary, the
easiest way is to compare the missed cases with existing bug samples,
which is known as bug localization [34, 47]. Such approaches are
mainly used to pick out bugs in different program versions and
is incapable to detect new bugs. Collecting a large number of bug
samples itself is also a challenging task.
Another method is to utilize statistical information to infer the
necessity of the missed security operations [24, 48], where the major-
ity cases are considered as correct, known as cross-checking. Usually
this approach needs a large amount of use cases as its samples and
may not work well when dealing with uncommon cases. Some other
works [17, 26, 36, 50] direct their efforts at specific kinds of missed
security operations, which, unfortunately, limits their scalability and
portability.
3 Overview
The goal of IPPO is to identify the missed essential security opera-
tions in a target program as security bugs. The key challenge is to
determine whether a security operation is really indispensable in the
context, which requires the understanding of code semantics and
contexts. IPPO addresses this challenge by modeling the similarity of
different paths: if two paths share similar functionality with respect
to a specific object, then their usages of security operations against
that object are supposed to be consistent. Our approach could work
under the scenarios where there is only a very limited number of
code pieces available (e.g., the code piece in Figure 1). The overall
architecture of IPPO is outlined in Figure 4. At a high level, IPPO’s
workflow contains three phases:
In the first phase, IPPO generates a global call graph for the target
program with the provided LLVM IR files, which is used to assist
the security operation identification in the second phase. IPPO also
builds control-flow graphs (CFGs) and unroll loops for one level for
every function, which lays the base for path analysis.
In the second phase, IPPO analyzes the target program and accom-
plishes three tasks: (1) detecting all security operations in the target
program; (2) extracting critical variables (objects) from the security
operations; (3) identifying and collecting all similar-path pairs based
on the critical objects in each function. After that, IPPO constructs
similar-path pairs that may have inconsistent security operations.
These paths should be similar with respect to the contexts and se-
mantics. To this end, we present the idea of object-based similar-path
pair (OSPP) to characterize the similarity of such paths. IPPO adopts
several new path-sensitive and semantic-sensitive techniques to col-
lect OSPP within a function effectively, which is discussed in detail
in §4.2.
In the third phase, IPPO checks the missed security operations in
the collected OSPPs, and generates bug reports for further manual
confirmation.
4 Object-based Similar-Path Pairing
In this section, we present the design principles of object-based
similar-path pairs (OSPP), together with the related analysis tech-
niques. Other techniques and implementation details will be pre-
sented in §5.
4.1 Extracting Objects
One key component of constructing OSPP is object. In this paper,
we extract critical variables from security operations as our target
objects. Currently, we aim at four kinds of widely used security
operations: security checks, resource alloc/release, reference count op-
erations, and lock/unlock. They represent the most common cases
and missing them has contributed to the most common and critical
classes of bugs. The target critical objects extracted from these secu-
rity operations are the checked variables, resource variables, reference
counters, and lock variables respectively. The first kind of objects
could be extracted from the if statements, while the last three kinds
of objects could be extracted from the function arguments directly.
4.2 Design Principles of OSPP
Code representation. The granularity of code representation de-
termines the upper bound of bug detection. We need to choose a
fine-grained code representation to make up for lacking subsequent
similar code slices. In this paper, we select the control-flow path as
the basic unit while modeling similar code pieces. It contains rela-
tively more abundant semantic information and makes our analysis
path-sensitive. Specifically, a control-flow path consists of a series
of coherent basic blocks in a control-flow graph (CFG).
Key insights. The most important component in IPPO is the con-
struction of similar-path pairs. The path-pair construction is chal-
lenging for the following reasons. First, if the similarity analysis is
too permissive, non-similar paths may be paired, resulting in many
false positives; if the similarity analysis is too strict, valuable similar
path pairs can be missed, leading to many false negatives in bug
detection. Therefore, we need to design a new similarity analysis
method that can precisely and broadly identify similar-path pairs.
Our insight is that the ultimate goal of IPPO is to identify a missed
security operation against an object, so the similarity should be based
on the particular object. As long as two code paths have similar se-
mantics for the object, object-irrelevant semantics in the code paths
should not be considered while modeling the similarity. This way,
we improve both the precision and coverage. Based on this insight,
we propose object-based similar-path pairs. Second, we still lack a
concrete criteria for determining whether two paths have the similar
semantics and contexts for an object. To address this problem, we
develop a set of rules for constructing OSPP.
Rules for constructing OSPP. Our intuition for determining the
object-based path similarity is that whether a security operation should
be enforced against an object depends on (1) the semantics against
the object and (2) the contexts of the semantics. Therefore, we study
existing bugs and empirically develop a set of rules that ensure
the similarity of semantics and contexts of an object. Each rule is
described and justified as follows.
For illustration purpose, we introduce a real bug as an example
(Figure 5). In function snd_echo_resume(), there are four error han-
dling paths (end at line 10, 17, 24, and 32 respectively) adopting
inconsistent release operations against variable chip, a member of
variable dev. Paths which return at line 17 and line 32 free chip while
the other two paths do not. Actually, freeing a non-local variable in
the resume error paths here is redundant because it could lead to
double-free at the next time the system goes to resume and crash the
system. From the perspective of a developer, the aforementioned four
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1630Figure 4: The overview of IPPO. IPPO has three analysis phases. It takes as input the LLVM IRs of the target program. It reports as output the
potential bugs due to missing security operations.
return -ENOMEM;
err = init_hw(chip, chip->pci->device, chip->pci->subsystem_device);
if (err comm_page;
commpage_bak = kmemdup(commpage, sizeof(*commpage), GFP_KERNEL);
if (commpage_bak == NULL)
1 /* sound/pci/echoaudio/echoaudio.c */
2 static int snd_echo_resume(struct device *dev)
3 {
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36 }
Figure 5: A double-free vulnerability in the Linux kernel identified
by IPPO.
}
...
err = restore_dsp_rettings(chip);
chip->pipe_alloc_mask = pipe_alloc_mask;
if (err card->dev, "cannot grab irq\n");
snd_echo_free(chip);
return -EBUSY;
}
...
return 0;
paths are similar with respect to variable chip while determining if
we should release it before returning. There is no special reason to
enforce different treatments against chip in them, which could be
used to detect security bugs. To model such object-based similarity,
we extract four rules for constructing OSPP.
Rule 1: The two paths start at the same block and end at the same
block in CFG. Put differently, the two paths share the same start point
and end point. We observed that the closer two paths are, the more
likely of existing one object be used similarly in them. Therefore, we
aim at the nearest paths in a program: paths which share the same
start and end blocks. In addition, the same start and end blocks also
guarantee the semantic-integrity of the two paths. For example, in
Figure 5, both error paths that start at line 22 and return at line 24
and line 32 (though the return line number is different, they exactly
end at the same return block in CFG) have released commpage_bak
and there is no bug here. However, if we consider these two paths
having different start blocks (e.g., one starts at line 22 and the other
one starts at line 29), then we may lose important information (e.g.,
releasing commpage_bak at line 27) and get wrong conclusion on bug
analysis.
Rule 2: The object has the same state in two paths. Since the similarity
we considered is object-based, we expect the object itself is equiv-
alent across different paths. One of the most direct measurements
is to evaluate the object’s initialization point, namely, source. If the
object’s source is inside/outside both paths, we consider the state of
the object in such paths are the same. The source of chip (sources
from dev at line 4) in Figure 5 is outside all aforementioned error
paths, which satisfies Rule 2. If the allocation (initialization) of chip
is at line 26, then the error path returns at line 24 does not need to
release it since the resource is even non-existent at that time.
Rule 3: The two paths have the same SO-influential operations. To
further ensure that two paths have similar semantics with respect to
both target objects and target security operations, we put forward
the idea of security operation-influential operations (SO-influential
operations): the operations that have an impact on whether we
should enforce a specific security operation on a specific object.
Table 1 shows the detailed definition of SO-influential operations.
Specifically, security check is mainly used to terminate the execution
flow on failure and returning an unchecked value usually does not
constitute a bug. Therefore, we expect that there are other calculation
tasks (function calls, arithmetic operations, memory operations, etc.)
after the checked object. Resource alloc/release is under the influence
of resource propagating operations (e.g., the resource variable is
propagated to global variables and there is a specialized callback
function to release it). Refcount and lock/unlock is influenced by any
other reference counter adjustment or lock state adjustment. SO-
influential operations could determine whether a security operation
Program AnalysisSecurity operation detection - Security checks - Resource alloc/release - Reference count inc/dec - Lock/unlockEnv PreparationCall graph generationLoop unrolling- Global call graph- Control-flow graphsCompileLLVM IRsSource CodeDifferential CheckingCheck missed security operations in path pairs Bug ReportsSuggest potential bugs and generate bug reportsObject extraction Object-based similar-path pair collectionSession 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1631is necessary in a path, thus are required to be used consistently in
OSPP.
Table 1: SO-influential operations.
Security operation
Security check
Resource alloc/release
Refcount
Lock/unlock
SO-influential operation
Function calls, arithmetic and memory oper-
ations after the object (checked variable)
Resource propagation
Reference counter adjustment
Lock state adjustment
Rule 4: The two paths have the same sets of pre- and post-conditions
against the object. Pre- and post-conditions are the assumptions
before and after we executing a path, which are expected to be the
same for OSPP. APISan [48] uses them to characterize API usage
patterns. We redefine them in this paper to characterize the semantics
of paths. The pre-condition of a path is its branch condition (e.g.,
variable err is the pre-condition of the path starts at line 13 in
Figure 5), while the post-condition is the path’s impact on the return
value. We require that the pre-condition of OSPP must be object-
irrelevant, otherwise the semantic against the object is obviously
diverse. For example, in Figure 5, there is another inconsistency
besides releasing chip: releasing compage_bak. The error path ends
at line 9 misses release against compage_bak while all the following
paths contain such release. However, the release operation is not
necessary in this error path since its pre-condition is the null check
result against compage_bak (the target object), and a null pointer
needs no further release. The same post-condition ensures two paths
share the same functionality (either normal functionality or error
handling).
Analysis challenges—path and pair explosion. While the rules
define the object-based path similarity, checking against these rules
is still hard for the following problems. (1) Path explosion. Analyzing
OSPP requires us to collect paths as pairs first. A direct idea of path
collection is to collect all paths start at the entry and end at the
exit in a function (which satisfies Rule 1 of OSPP). Nevertheless,
such an approach will result in path explosion in large functions
and make further analysis impractical. There could also be a lot of
redundant information if all paths are collected in this way. (2) Pair
explosion. Some path pairs may only satisfy partial OSPP rules, but
we could not simply discard them because it is possible that they
can be paired with other paths. Given the large number of paths, it
is hard to comprehensively analyze all possible valid OSPPs.
Our solution—path reduction and graph partitioning. To ad-
dress the aforementioned challenges, we come up with the following
techniques. (1) We observed that the main cause of path explosion is
the redundant common messages. Hence, we collect path pairs that
satisfy Rule 1 in a new way: we only collect paths that share no com-
mon basic blocks besides the start block and the end block, which is
referred to as reduced similar paths (RSPs) in this paper. We design
a two-phase RSP collection algorithm to collect RSPs efficiently. (2)
We choose to divide the CFG of a function into different parts, and
paths in each part share the same return value, which are referred
to as return value–based graphs (RVGs) in this paper. Paths collected
from RVGs inherently satisfy the post-condition of Rule 4. The two
strategies can effectively address both the path explosion and the
pair explosion.
OSPP construction flow. To construct OSPPs in a function, we
need to construct path pairs that satisfy Rules 1∼4 of OSPP. We first
generate return value-based graphs (RVGs) from a given CFG. Then,
we collect the reduced similar paths (RSPs) from RVGs and pair them.
The definitions of RSP and RVG inherently guarantee Rule 1 and
the post-condition of Rule 4. Finally, we check the rest OSPP rules
(Rule 2, Rule 3, and the pre-condition of Rule 4) against the RSPs and
extract valid OSPPs from them. The following sections will present
the technical details of OSPP construction.
4.3 Generating Return Value-based Graphs
Identifying Error Edges. Error edges are the key components
4.3.1
for return value-based graph (RVG) generation. In this paper, we
mainly consider two kinds of return values as post-conditions: nor-
mal values and error values, which indicate two most common func-
tionalities: normal functionality and error handling functionality. If
a path returns an error code or calls an error handling function, it
is considered as an error handling path. An error CFG edge should
satisfy one of the following conditions: (1) it connects to an error
return value or error handling function, or (2) all its following edges
connect to some error return values or error handling functions.
Existing researches (Crix [24], EECatch [30]) have studied error han-
dling functions. We will discuss error return value in detail in §5.2.1.
IPPO uses a backward data-flow analysis starting from the return
instruction to find the source of error return values and then uses
a forward data-flow analysis starting from the source to collect all
error edges of a CFG. These error edges are recorded in a global set
(ErrEdgeSet).
4.3.2 Generating Sub-CFGs based on Return Values. Since we only
consider two kinds of return values, IPPO generates two RVGs for
each function: one graph contains all error handling paths and the
other contains all normal paths without any error handling path.
Algorithm 1 shows how to generate these two RVGs. It takes as in-
put the CFG of the target function and an error edge set (ErrEdgeSet).
The algorithm generates two graphs as output: NormalRVG and ErrRVG,
the normal RVG and error handling RVG, respectively.
Generating normal RVG. The strategy to generate a normal RVG
is simple: pruning all error edges from the original CFG (lines 4-
6) and the pruned graph is the normal RVG. Given an input edge,
the PruneEdge() method breaks the connection between the two
endpoints of this edge. If the tail end block of the edge has no prede-
cessor after pruning, which means it cannot be accessed from the
entry anymore, PruneEdge() recursively prunes its successor edges.
Since this pruned graph contains no error edges, all paths in this
graph must be normal paths.
Generating error handling RVG. The basic idea of this part is to
generate a complete graph from a part of discrete error edges. For
each edge in ErrEdgeSet, Algorithm 1 adds it to the output ErrRVG
(lines 8-9) and checks if this edge has reached the entry block (line
12) or the end block (line 15) of the CFG. If not, IPPO selects one
predecessor or one successor edge and adds it to the next loop (line
13 and line 16). The ErrRVG will be extended in this procedure and
finally reaches both the entry block and the end block of the CFG.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1632Algorithm 1: Generate error RVGs
1 GenErr RV G(Err EdдeSet);
Input: CFG: Control-flow graph of the target function;
Err EdдeSet: Error edge set of the target function
Err RV G: Error handling RVG
Output: N ormalRV G: Normal RVG;
2 Err RV G ← ∅;
3 N ormalRV G ← CFG;
4 foreach edдe ∈ Err EdдeSet do
N ormalRV G .PruneEdge(edдe);
5
6 end
7 while Is_N ot_Empty(Err EdдeSet) do
CE ← pop top element from ErrEdgeSet;
Err RV G .add_edge(CE);
F B ← front end block of CE;
T B ← tail end block of CE;
if ∃(edдe ∈ CFG) ends at F B and edдe (cid:60) Err RV G then
Err EdдeSet .push_back(edдe);
8
9
10
11