(c) Network manipulation. These attack effects can manipulate
arbitrary network elements or alter the controller’s knowledge
about the network.
We claim that the D2C2 attack is able to introduce multi-
ple attack effects which can cover almost every previously
1There are existing studies that target the data plane to launch attacks [36],
[26], [13]; however, such attacks are not the focus of this paper.
2Many real-world networks take this in-band operation approach due to its
cost-efﬁciency [12], [42].
3 Note that the control channel does not enforce SSL/TLS by default [9],
[8], and it can be very complex to manage in real-world deployments
especially when there are multiple controllers [32].
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1514
COMMON SDN ATTACK EFFECTS AGAINST CONTROLLERS FOR DATA PLANE ATTACKERS
TABLE II
Category
Denial-of-Service
Data Leakage
Network Manipulation
Attack Effect
Congest SDN architectural
bottleneck
Disrupt network services
Install false ﬂow rules
Corrupt critical conﬁguration
Probe sensitive network
information
Steal important network
conﬁguration
Manipulate network view
Install arbitrary ﬂow rules
Examples
A remote attacker generates a large number of events
to congest the bottleneck of controller [39].
A remote attacker exploits SDN service logic ﬂaws (e.g.,
harmful race conditions) [42] to crash core SDN services.
N/A
N/A
A remote attacker steals sensitive information (e.g.,
physical IP) from the controller by violating network policy [42]
N/A
A remote attacker alters the controller’s knowledge
about the network by sending fake LLDP packets [19]
N/A
achieved attack effect
in Table II. In addition, our attack
can also introduce previously unachieved attack effects, such
as install false/arbitrary ﬂow rules and corrupt/steal critical
conﬁguration, listed as “N/A” in Table II.
IV. D2C2
ATTACK
In this section, we introduce D2C2, a novel attack that
employs a data poisoning strategy to abuse previously unreach-
able sensitive methods in the controller.
The D2C2 attack leverages two important insights to abuse
sensitive methods/APIs in the controller. The ﬁrst
insight
is that some SDN design features, e.g., custom ﬁeld, can
be abused to help attackers send malicious data into the
control plane. By abusing custom ﬁelds in SDN protocol (e.g.,
OpenFlow) messages, the attacker is able to manipulate the
sensitive methods/APIs in the message-handling components.
Another important new insight of D2C2 is that the data
dependencies among the many seemingly-separated SDN ser-
vices/applications can actually be created in unexpected ways
(i.e., data item poisoning) to result in the exposure of previ-
ously unreachable sensitive methods/APIs to attackers. To take
advantage of this, the attacker should realize that his intended
attack effect is supposed to result from the execution of a
partial order of sensitive methods which belong to multiple
services or applications. Hence, to achieve such attack effects
in SDN networks, the attacker needs to perform a multi-
stage attack which directly or indirectly poisons several control
plane data items to ﬁnally attack the target component.
A. Example Attack Scenario
We illustrate such an attack by analyzing a real exploit chain
of the D2C2 attack we mentioned in Section I. The attack
effect of this exploit chain is to manipulate arbitrary ﬂow
tables in the data plane. To introduce this effect, the exploit
chain attacks the core service component FlowRuleManager,
which manages ﬂow tables in data plane devices (e.g., network
switches). As shown in Fig. IV-A, the exploit chain starts
from the data plane, where a poisoned protocol message (e.g.,
custom ﬁeld) is sent into the control plane via legitimate
protocol interactions. In Phase 1, the core service OpenFlow
Provider parses the poisoned protocol message and generates
a poisoned network state. In Phase 2, the sensitive method
s
p
p
A
Load 
Balancer
Diagnostic
WEB UI
(getDevice)
...
Application X
(sensitive method)
FlowRuleStore
s
e
c
i
v
r
e
S
e
r
o
C
Control Plane
Data Plane
FlowRule
Manager
(applyflowRules)
(cid:659)
Flow Rules
OpenFlow
Provider
(handlePacket)
(cid:658)
Device Objects
Switch
Host
...
...
...
Core Service Y
(sensitive method)
Internal Data Z
        Switch
Fig. 2. A real-world exploit chain of the D2C2 attack. The exploit chain
poisons several control plane data items to create malicious data dependencies
(red edges) via existing data dependencies (blue edges).
getDevice in the Web UI application is abused by the
poisoned network state. By abusing method getDevice, the
poisoned network state is able to manipulate the Web UI
application to launch HTTP requests to access the northbound
APIs (i.e., Restful APIs) belonging to the FlowRuleManager.
Hence, a malicious data dependency is established from the UI
application to the sensitive method applyflowRules in the
FlowRuleManager. By abusing the newly reachable sensitive
method, a malicious ﬂow rule is inserted. In the end, the
core service FlowRuleStore handles poisoned ﬂow rules and
updates the ﬂow tables in correspond data plane devices. This
is a typical exploit chain of the D2C2 attack. By employing
such data poisoning strategy, the D2C2 exploit chain is able to
send malicious data to the target sensitive method via existing
and newly created data dependencies.
B. Problem Formulation
In this paper, we focus on four categories of internal
data items (i.e., protocol messages, network states, databases,
conﬁgure ﬁles) according to our discovered attack surface. Part
of these data is stored as a runtime variable in the controller
while others are stored persistently in the ﬁle system (e.g.,
databases and conﬁguration ﬁles). The D2C2 attack poisons
these different kinds of internal data by abusing different kinds
of sensitive methods/APIs that modify these data items. For
example, in one of the cases we found, the File.read() method
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1515
is vulnerable and can be abused to poison conﬁguration ﬁles.
To investigate how control plane components will be affected
if one data item is poisoned, we study a list of methods that
collect data from the four categories of data items. Most of
the methods are critical SDN APIs (e.g., southbound APIs and
northbound APIs) and some of them are dangerous Java lib
methods (e.g., File.read()). In this paper, we call these methods
as data collecting methods. We observe the data collecting
methods and sensitive methods have intersections since some
data collecting methods are also sensitive methods that can be
abused to leak data.
To launch D2C2 attacks, we need an exploit chain that
consists of several events in which several control plane data
items are handled by different sensitive methods. In this
paper, we denote such an event as a poisoning event since its
consequence is to poison the data item in the control plane.
However, not all such chains can be regarded as harmful, since
only part of them can create exploitable data dependencies
between the attacker and the target sensitive method in the
SDN control plane. In this paper, our goal is to identify such
D2C2 chains from numerous seemly exploitable chains.
D2C2 chains. There are several requirements that should
be met before a chain can be exploitable. (1) Every two
neighbor events in such D2C2 chain should have the following
relationships: (1a) The prior event must be able to create at
least one data dependency to the later one. (1b) The prior one
does not have to call the later one, which means they can be
called separately. (2) The ﬁrst event and the last event should
have additional requirements: (2a) The attacker should be able
to trigger the ﬁrst event from the data plane (e.g., through the
custom ﬁeld). (2b) The last event in the D2C2 chain should
be abused on a destructive sensitive method which can fulﬁll
the attacker’s objective.
The attacker faces a knotty problem when he wants to
launch such an attack. That is how to ﬁnd all D2C2 chains from
the SDN controller. To address this problem, we introduce our
tool, SVHunter, which pinpoints poisoning events in the SDN
control plane and generates D2C2 chains through backward
taint analysis and logic reasoning.
V. TOOL DESIGN AND IMPLEMENTATION
In this section, we present our tool, SVHunter, for identify-
ing and exploiting the D2C2 vulnerabilities in SDN controllers.
As shown in Fig. 3, SVHunter comprises three main compo-
nents: the Tracer pinpoints poisoning events in the controller
by utilizing backward data ﬂow tracking. The Reasoning En-
gine reasons the causality relationships between the identiﬁed
poisoning events to create and chain data dependencies in
order to generate D2C2 chains. The Exploit Engine eases the
process of synthesizing D2C2 exploits.
A. Pinpointing Poisoning Events
In this section, we describe the design of the Tracer, which
pinpoints poisoning events in the controller as well as its appli-
cations at the Java bytecode level. The Tracer ﬁrst identiﬁes
the usages of sensitive methods in the controller according
Controller 
Bytecode
Data Flow 
Backtracking
Poisoning Event 
Extraction
i
g
n
n
o
s
i
o
P
s
t
n
e
v
E
Causality 
Generation
Causality 
Reasoning
2
C
2
D
i
s
n
a
h
C
Payload Crafting 
Guide Generator
Custom Field
Data Injector
Tracer
Reasoning Engine
Exploit Engine
Fig. 3. SVHunter Overview.
Payload  Crafting  
Guide
(cid:20)(cid:20)(cid:20)
(cid:540)(cid:20)
(cid:20)(cid:20)(cid:20)
(cid:20)(cid:20)(cid:20)
(cid:20)(cid:20)(cid:20)
(cid:20)(cid:20)(cid:20)
(cid:20)(cid:20)(cid:20)
(cid:20)(cid:20)(cid:20)
Malicious Protocol 
Messages
to a particular list of method names. Second,
it employs
static analysis techniques to backward trace data ﬂows from
each parameter of each identiﬁed sensitive method to its data
sources (i.e., data collecting methods). Finally,
the Tracer
associates sensitive method usages with their corresponding
data collecting methods as well as certain context information.
Detecting sensitive method usages. The Tracer detects the
usages of sensitive methods with a particular list of method
names. We follow two principles to choose sensitive methods.
First, according to the essence of the D2C2 attack,
i.e.,
data poisoning, we choose from the methods that perform
read/write operations on the four categories of control plane
internal data mentioned in Section II-C. Second, to introduce
destructive attack effects with D2C2, we also choose some
widely targeted methods (similar to the process of choosing
sinks in taint analysis research [41], [33]) that can be abused
to introduce destructive effects from both Java library methods
(e.g., exec()) and SDN APIs (e.g., ﬁrewall switches). Similar
to other vulnerability discovery research [28], [11], we made
our best effort to collect as many sensitive APIs as possible.4
Using the list of method names, the Tracer locates the usages
of sensitive methods in the controller through keyword match-
ing and marks them as the data sinks of backward tracing.
Backtracking. In this step, the Tracer reversely traces the data
ﬂows from each parameter of each located sensitive method.
The Tracer is implemented on top of Soot [22]. To backward
trace the potentially harmful data ﬂows, the Tracer marks
the data collecting methods as data sources and marks the
parameters of each located sensitive method as tainted data
(data sinks).
To improve tracing efﬁciency, we optimize the tracing
design as follows. (i) Before tracing, the Tracer will ﬁrst
construct a mapping table which records the caller-callee
relationships. (ii) During tracing, all the being-traced paths
will be saved temporarily so that they can be reused if another
sensitive method usage is traced to any of the saved paths.
Identifying poisoning events. After backtracking, the Tracer
identiﬁes poisoning events by identifying all the data ﬂows that
start from data collecting methods and end at those sensitive
methods. Note that
if a data ﬂow starting from one data
collecting method contains more than one sensitive methods,
multiple poisoning events will be identiﬁed separately so that
4 A full list can be found on our project website (https://github.com/
xiaofen9/SVHunter). We acknowledge the list might not be complete but can
be expanded over time.
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1516
Variables to trace
createFlow
public Response
...
@Path("flows")
public class FlowsWebResource extends AbstractWebResource {
   ...
    @Path("{deviceId}")
    public Response createFlow(String deviceId, String appId, 
InputStream stream) {
        ...
stream
(mapper()
        ObjectNode jsonTree = readTreeFromStream(mapper(),stream);