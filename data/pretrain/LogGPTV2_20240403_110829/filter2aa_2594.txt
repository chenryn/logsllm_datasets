Fasten your seatbelts: 
We are escaping iOS 11 sandbox!
Min(Spark) Zheng & Xiaolong Bai
@ Alibaba Security Lab
Whoami
Alibaba Security
•
SparkZheng @ Twitter，蒸米spark @ Weibo
•
Alibaba Security Expert 
•
CUHK PhD, Blue-lotus and Insight-labs
•
iOS 9.3.4 & iOS 11.3.1 OverSky Jailbreak (Private)
Alibaba Security
•
Xiaolong Bai (bxl1989 @ Twitter&Weibo)
•    Alibaba Security Engineer
•    Ph.D. graduated from Tsinghua University
•
Published papers on S&P, Usenix Security, CCS, NDSS
iOS System Overview
Alibaba Security
•
Application
- in sandbox
- few attack surfaces to kernel
- only basic system info
- memory info(e.g., sharedcache)
•
Userland
- all system info
- more attack surfaces to kernel
•
Kernel
- Control the device
System
System Libs
Kernel
Frameworks
IPC
System Services
Sandbox
Alibaba Security
•
Apple‘s Sandbox was introduced as “SeatBelt” in MacOS 10.5 which 
provides the first full fledged implementation of a MACF policy. 
•
From its inception, the policy hooked dozens of operations. The number of 
hooks has been growing steadily when new system calls or newly discovered 
threats appeared (tables from *OS internals):
Version
XNU
System Version
Hook Count
34
1510
macOS 10.6
92
120
1699
macOS 10.7
98
211/220
2107
iOS 6/macOS 10.8
105
300
2422
iOS 7/macOS 10.9
109
358
2782
iOS 8/macOS 10.10
113
459
3216
iOS 9/macOS 10.11
119
592
3789
iOS 10/macOS 10.12
126/124
763
4570
iOS 11/macOS 10.13
132/131
Sandbox Profiles
Alibaba Security
•
In MacOS, profiles are visible and stored in /System/Library/Sandbox/Profiles. In iOS, the profiles 
were hard-compiled into /usr/libexec/sandboxd. It’s hard to decode the sandbox profiles, but 
we can traverse all mach services to get the mach-lookup list according to the return value (e.g., 
through sbtool by Jonathan Levin).
Mach Service Name -> Binary
Alibaba Security
•
In order to find vulnerabilities, we need to disassemble and analyze the binaries which contain 
the handler functions of related mach services. /System/Library/LaunchDaemons contains the 
configuration plist of most mach services. In the plist files, “ProgramArguments” shows the 
path of the binary and “MachServices”shows the related mach services. 
Mach, XPC and NSXPC
Alibaba Security
•
Mach messages contain typed data, which can include port rights and references to large 
regions of memory. XPC msg is built on top of Mach msg and NSXPC msg is built on top of 
XPC msg.
•
Through Mach msg, sandboxed app can communicate with unsandboxed Mach (MIG) services, 
XPC services and NSXPC services. 
APP
sandbox
Mach Services
XPC services
APP
sandbox
NSXPC 
services
XPC: Arbitrary File Move CVE-2015-7037
Alibaba Security
•
com.apple.PersistentURLTranslator.Gatekeeper
（/System/Library/Frameworks/AssetsLibrary.framework/Support/assetsd）
•
This service has path traversal vulnerability that an app can mv folders outside the 
sandbox with mobile privilege (used in Pangu9 for jailbreak).
NSXPC: Arbitrary SQLite File Query Outside the Sandbox
Alibaba Security
•
com.apple.medialibraryd.xpc
(/System/Library/PrivateFrameworks/MusicLibrary.framework/Support/medialibra
ryd)
•
The sandboxed app can use [[connection remoteObjectProxy]     
beginTransactionForDatabaseAtPath] method to connect arbitrary SQLite files on 
the system and then use [[connection remoteObjectProxy] executeQuery] to 
execute SQL commands. 
POC:
NSXPC: Code Execution Through fts3_tokenizer()
Alibaba Security
•
Medialibraryd service has SQLite fts3_tokenizer vulnerability.
•
Use fts3_tokenizer('simple') to leak information:
•
Use fts3_tokenizer('simple’, addr) to register a callback address for the tokenizer:
NSXPC: Code Execution Through fts3_tokenizer()
Alibaba Security
•
Use ``PRAGMA soft_heap_limit=0x4141414141414141”to control PC:
•
This vulnerability is used in our private iOS 9.3.4 jailbreak.
Mach Service: Bluetoothd
Alibaba Security
•
There are 132 functions (start from 0xFA300) in the “com.apple.server.bluetooth” 
Mach service of bluetoothd.
•
Bluetoothd communicate with sandboxed apps and other unsandboxed processes 
(e.g., SpringBoard) through “com.apple.server.Bluetooth”.
Bluetoothd
Apps
SpringBoard
sharingd
Mach Service: Bluetoothd
Alibaba Security
•
A process can use BTSessionAttach to create a session_token for bluetoothd and 
then use BTLocalDeviceAddCallbacks to register a callback for event notification.
Bluetoothd
Apps
SpringBoard
ses_token_1
0xFA300 BTSessionAttach
0xFA303 BTLocalDeviceAddCallbacks
with ses_token_1 and callback1 addr
invoke callback1
ses_token_2
0xFA300 BTSessionAttach
0xFA303 BTLocalDeviceAddCallbacks
with ses_token_2 and callback2 addr
invoke callback2
Mach Service: Bluetoothd CVE-2018-4087 by @raniXCH
Alibaba Security
•
However, Bluetoothd only uses the session token to identify the process which 
means we can use a sandboxed app to hijack a communication between bluetoothd
and unsandboxed processes through the session token.
Bluetoothd
Apps
SpringBoard
0xFA303 BTLocalDeviceAddCallbacks
with ses_token_2 and callback2 addr
ses_token_2
0xFA300 BTSessionAttach
0xFA303 BTLocalDeviceAddCallbacks
with ses_token_2 and callback2 addr
invoke callback2
PC control!
Mach Service: Bluetoothd CVE-2018-4087
Alibaba Security
•
The problem is the ses_token is too easy to be brute forced. It only has 0x10000
(0x0000 - 0xFFFF) possible values.
•
Apple fixed this problem by adding a user_id (=arc4random()) to each session, 
only the process knows the user_id and bluetoothd will check the map[ses_token] 
== user_id.
Bluetoothd
SpringBoard
ses_token_1
0xFA300 BTSessionAttach with user_id
0xFA303 BTLocalDeviceAddCallbacks
with ses_token_1 , user_id and callback1 addr
invoke callback1
User_id?
Mach Service: Bluetoothd 0-day bugs
Alibaba Security
•
As we mentioned before, a user_id = arc4random() = [0x00000000-0xFFFFFFFF]. If 
we know the session_token, we can still hijack the communication through the 
user_id brute force. 
•
But it takes a very long long time (about 12 hours) …
•
Wait…what if there are other callback registration functions without a user_id?
•
Bingo! 0xFA365 BTAccessoryManagerAddCallbacks()!
Mach Service: Bluetoothd 0-day bugs
Alibaba Security
•
However, after sending message to bluetoothd through 
BTAccessoryManagerAddCallbacks(), nothing happened!
•
Finally, I found the problem. The callback event can be triggered only when the iOS
device connects to a new device which means we need to trigger the callback by 
click the Bluetooth device manually.
Click!
Mach Service: Bluetoothd 0-day bugs
Alibaba Security
•
CallBacks 1(a long long time), CallBacks 2(hard to trigger), CallBacks 3 Again! Yes, 
we found a new function with callbacks and it’s easy to trigger!
•
0xFA329 BTDiscoveryAgentCreate() can create a callback for the discovery agent 
and then we can use 0xFA32B BTDiscoveryAgentStartScan() to trigger the callback 
without manual click!
PC Control -> Control the Process in a Classic Way
Alibaba Security
•
The goal is not only control the PC pointer but the process as well.
•
Next step is to create a ROP chain and do a heap spray for the target process. 
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
ROP
PC
Memory
•
In this case, we use 
MACH_MSGH_BITS_COMPLEX Mach 
msg with 
MACH_MSG_OOL_DESCRIPTOR memory.
•
If we send the msg and don’t receive 
the msg, the ROP chain will stay in the 
target’s memory space persistently.
•
After several tests, we can find a  
MAGIC_ADDR which is 0x105400000.
PC Control -> Control the Process in a Classic Way
Alibaba Security
•
Controlled registers: X3,X4,X5,X19,X20. And last BR is X4:
•
Until now, we can only do BOP (JOP). But it’s hard for us to control the program 
flow. So, we need a stack pivot to control the stack and change BOP -> ROP.
Stack pivot ?
PC Control -> Control the Process in a Classic Way
Alibaba Security
•
A great stack pivot gadget can be found at libsystem_platform.dylib:
•
If we can control x0, then we can control sp. 
Control X0 -> x19 & x20
Control X0 -> x2 & x29
Control X2 -> SP
RET!
PC Control -> Control the Process in an Elegant Way
Alibaba Security
•
Now we can ROP (e.g., steal files, open a sandboxed IOKit userclient)!
•
But ROP is not elegant. We want the task port to control everything!
Task port?
Mach Port 101
Alibaba Security
•
A port provides an endpoint for IPC. Messages can be sent to a port or received 
from it:
•
Ports can contain rights and port rights can be passed in messages.
•
The most important port for one process is mach_task_self(). One can control the 
memory and all registers of the process through its task port. 
Mach Port 101
Alibaba Security
•
We can use mach_vm_allocate(target_task_port, 
&remote_addr, remote_size, 1) to allocate memory 
in a remote process.
•
mach_vm_write(target_task_port, remote_address, 
local_address, length) can be used to copy data into 
a remote process.
•
thread_create_running(target_task_port, 
ARM_THREAD_STATE64, &thread_state, stateCnt, 
&thread_port) can be use to create a new thread in 
a remote process.
•
Therefore, if we can get one process’s task port. 
We can easily control the whole process through 
mach msg.
task_port
mach_msg
process
Get the task port!
Alibaba Security
•
Let’s try to get the task port of the remote process.  
Pwn app
Bluetoothd
Control the target process through its task port
Send 0x1000 ports with pwn apps’s send right
Launchd
BTd port
Use vulnerability to control the pc of BTd
Use ROP to send mach msgs contain mach_task_self()
Send ROP through heap spray
Get the task port!
Alibaba Security
Some tricks learn from Mach_portal:
•
We can use mach_port_insert_right(mach_task_self(), port, port, 
MACH_MSG_TYPE_MAKE_SEND) to insert a send right to the port. And this 
port can be send by OOL message with MACH_MSG_PORT_DESCRIPTOR 
type. 
•
In most time, mach_task_self() returns 0x103, so we can just use 0x103 
without ROP (to call mach_task_self()).
•
In order to send the task port to our pwn app, we need to know the port 
number of our pwn app. But we cannot use launchd to help us. Luckily, the 
port number can be guessed by (0x103+0x100*N). That’s why we send 
0x1000 ports to the remote process (in order to increase the successful rate).
DEMO
Alibaba Security
Remotely malloc memory in the target process:
Remotely execute functions in the target process:
iOS 11 mitigation
Alibaba Security
iOS 11 (not in macOS 10.13) extended the limit to the use of all task ports for 
app processes:
But ROPs always work in user mode.
Function Call Primitive
Alibaba Security
A generic primitive for function calls with arbitrary parameters in CoreFoundation:
0-N parameters :
X0-X7 and stack
X8->Function Call 
Return to X30
DEMO
Alibaba Security
•
Attack iOS kernel through unsandboxed IOKit userclient on iOS 11.3：
•
Break Kernel slide and gain arbitrary kernel R/W ability on iOS 11.3:
DEMO
Alibaba Security
•
Achieve root shell and jailbreak on iOS 11.3: 
https://www.youtube.com/watch?v=Kt5JXBvRJ5o
Conclusion
Alibaba Security
•
We introduce the basic conception of iOS sandbox and summarize 
several classic ways to escape the iOS sandbox.
•
Based on an old bluetoothd vulnerability, we find two new zero-day 
sandbox escape vulnerabilities on the latest iOS version.
•
We present a classic way to do heap spray , stack pivot and ROP in the 
iOS userland. 
•
We show how to get and control the task port of the remote process 
during the exploit.
Reference
Alibaba Security
•
*OS Internals & Jtool: http://newosxbook.com/
•
Pangu 9 Internals: https://www.blackhat.com/docs/us-16/materials/us-
16-Wang-Pangu-9-Internals.pdf
•
triple_fetch by IanBeer: https://bugs.chromium.org/p/project-
zero/issues/detail?id=1247
•
CVE-2018-4087: https://blog.zimperium.com/cve-2018-4087-poc-
escaping-sandbox-misleading-bluetoothd/
Thanks