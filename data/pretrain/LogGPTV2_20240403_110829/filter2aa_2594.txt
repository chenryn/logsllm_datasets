# Escaping the iOS 11 Sandbox: A Comprehensive Guide

## Authors
- **Min (Spark) Zheng** & **Xiaolong Bai**
- @ Alibaba Security Lab

### About the Authors
- **Min (Spark) Zheng**
  - **Alibaba Security Expert**
  - CUHK PhD, Blue-lotus and Insight-labs
  - Twitter: SparkZheng
  - Weibo: 蒸米spark
  - Notable Achievements: 
    - Private Jailbreaks: iOS 9.3.4 & iOS 11.3.1 (OverSky)

- **Xiaolong Bai**
  - **Alibaba Security Engineer**
  - Ph.D. from Tsinghua University
  - Twitter: bxl1989
  - Weibo: bxl1989
  - Published papers in S&P, Usenix Security, CCS, NDSS

## Overview of the iOS System
- **Application Layer**: 
  - Runs in a sandboxed environment.
  - Limited attack surfaces to the kernel.
  - Access to basic system information and memory details (e.g., shared cache).

- **Userland**: 
  - Full access to system information.
  - More attack surfaces to the kernel.

- **Kernel**: 
  - Controls the device.

## Apple's Sandbox Implementation
- **Introduction**: 
  - The sandbox, initially introduced as "SeatBelt" in macOS 10.5, provides a comprehensive MACF (Mandatory Access Control Framework) policy.
  - Over time, the number of hooks has increased with new system calls and discovered threats.

- **Hook Count Evolution**:
  | Version       | XNU | System Version | Hook Count |
  |---------------|-----|----------------|------------|
  | macOS 10.6    | 34  | 1510           | 92         |
  | macOS 10.7    | 92  | 1699           | 98/211/220 |
  | iOS 6/macOS 10.8 | 105 | 2107          | 300        |
  | iOS 7/macOS 10.9 | 109 | 2422          | 358        |
  | iOS 8/macOS 10.10 | 113 | 2782         | 459        |
  | iOS 9/macOS 10.11 | 119 | 3216         | 592        |
  | iOS 10/macOS 10.12 | 126/124 | 3789   | 763        |
  | iOS 11/macOS 10.13 | 132/131 | 4570   |            |

- **Sandbox Profiles**:
  - In macOS, profiles are stored in `/System/Library/Sandbox/Profiles`.
  - In iOS, profiles are compiled into `/usr/libexec/sandboxd`.
  - Decoding profiles is challenging, but mach services can be traversed using tools like `sbtool` by Jonathan Levin.

## Mach, XPC, and NSXPC Services
- **Mach Messages**:
  - Contain typed data, including port rights and memory references.
  - XPC messages are built on top of Mach messages, and NSXPC messages are built on top of XPC messages.
  - Sandboxed apps can communicate with unsandboxed Mach (MIG) services, XPC services, and NSXPC services.

- **Vulnerabilities**:
  - **XPC**: Arbitrary File Move (CVE-2015-7037)
    - Service: `com.apple.PersistentURLTranslator.Gatekeeper`
    - Path: `/System/Library/Frameworks/AssetsLibrary.framework/Support/assetsd`
    - Vulnerability: Path traversal allowing folder movement outside the sandbox.

  - **NSXPC**: Arbitrary SQLite File Query (Outside the Sandbox)
    - Service: `com.apple.medialibraryd.xpc`
    - Path: `/System/Library/PrivateFrameworks/MusicLibrary.framework/Support/medialibraryd`
    - Vulnerability: Allows execution of SQL commands on arbitrary SQLite files.

  - **NSXPC**: Code Execution Through `fts3_tokenizer()`
    - Service: `Medialibraryd`
    - Vulnerability: Allows control over the program counter (PC) and code execution.

## Bluetoothd Mach Service
- **Overview**:
  - `com.apple.server.bluetooth` Mach service in `bluetoothd` contains 132 functions starting from `0xFA300`.
  - Communicates with sandboxed apps and other processes (e.g., SpringBoard) through `com.apple.server.Bluetooth`.

- **Vulnerabilities**:
  - **CVE-2018-4087**:
    - Session tokens are easy to brute force, leading to communication hijacking.
    - Apple fixed this by adding a `user_id` (randomly generated) to each session.

  - **0-day Bugs**:
    - Even with `user_id`, session tokens can still be brute-forced, though it takes a long time.
    - New function `BTAccessoryManagerAddCallbacks()` found, which does not require `user_id` and is easier to trigger.

## Exploitation Techniques
- **Control the Process**:
  - Goal: Control both the PC pointer and the process.
  - Steps: Create a ROP chain and perform a heap spray.
  - Use `MACH_MSGH_BITS_COMPLEX` Mach message with `MACH_MSG_OOL_DESCRIPTOR` memory.
  - Find a `MAGIC_ADDR` (e.g., `0x105400000`) for persistent ROP chain.

- **Stack Pivot**:
  - Use a gadget in `libsystem_platform.dylib` to control the stack and change BOP to ROP.

- **Elegant Control**:
  - Use the task port to control everything.
  - Allocate memory, copy data, and create threads in a remote process.

- **Getting the Task Port**:
  - Send 0x1000 ports with the pwn app’s send right.
  - Use vulnerabilities to control the PC of `bluetoothd` and send mach messages containing `mach_task_self()`.

- **Tricks from Mach_portal**:
  - Use `mach_port_insert_right` to insert a send right to the port.
  - Guess the port number of the pwn app (e.g., `0x103 + 0x100 * N`).

## Demo and Mitigations
- **Demo**:
  - Remotely allocate memory and execute functions in the target process.
  - Attack iOS kernel through unsandboxed IOKit userclient.
  - Break Kernel slide and gain arbitrary kernel R/W ability.
  - Achieve root shell and jailbreak on iOS 11.3.

- **iOS 11 Mitigations**:
  - Extended limits to the use of all task ports for app processes.
  - ROPs work in user mode, but mitigations are in place.

## Conclusion
- **Summary**:
  - Introduced the basics of the iOS sandbox.
  - Summarized classic ways to escape the sandbox.
  - Found two new zero-day sandbox escape vulnerabilities.
  - Presented techniques for heap spray, stack pivot, and ROP.
  - Showed how to get and control the task port of a remote process.

## References
- ***OS Internals & Jtool**: [http://newosxbook.com/](http://newosxbook.com/)
- **Pangu 9 Internals**: [https://www.blackhat.com/docs/us-16/materials/us-16-Wang-Pangu-9-Internals.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Wang-Pangu-9-Internals.pdf)
- **triple_fetch by IanBeer**: [https://bugs.chromium.org/p/project-zero/issues/detail?id=1247](https://bugs.chromium.org/p/project-zero/issues/detail?id=1247)
- **CVE-2018-4087**: [https://blog.zimperium.com/cve-2018-4087-poc-escaping-sandbox-misleading-bluetoothd/](https://blog.zimperium.com/cve-2018-4087-poc-escaping-sandbox-misleading-bluetoothd/)

Thank you!