# Old (PHP-5) Zvals

- **Zval is a Pointer**: In PHP-5, a `zval` is a pointer to a structure.
- **Zval Creation**: Allocating a new `zval` involves allocating a struct.
- **Garbage Collection (GC)**: GC includes reference counting and cycle detection.
- **References**: References point to the same struct.

# New Zvals Motivation

- **Less Dereferences**: Reducing the number of dereferences improves performance.
- **Fewer Allocations**: Minimizing memory allocations enhances efficiency.
- **Designed for Embedding**: 
  - Can be embedded in structs.
  - Can be used in arrays.
  - Can be stored on the stack.

# New Zvals

- **Zval is a Struct**: A `zval` is now a struct instead of a pointer.
- **Only Value & Type**: The struct contains only the value and its type.
- **zend_value Union**:
  - Holds primitive values directly.
  - Points to complex types (e.g., strings, objects).

### Example: Integer

```php
$x = 1337;
```

- **Zval Struct**:
  - **value**: 1337
  - **type**: `IS_LONG`

### Example: String

```php
$x = "apple";
```

- **Zval Struct**:
  - **value**: `_zend_string`
  - **type**: `IS_STRING`

- **_zend_string**:
  - **refcount**: 1
  - **hash**: 0
  - **len**: 5
  - **val[]**: `a`, `p`, `p`, `l`, `e`, `\0`

# New Zvals - Garbage Collection

- **Reference Counting Depends on Type**:
  - **Not Refcounted**: Primitives (e.g., integers, floats).
  - **Refcounted**: Complex types (e.g., strings, objects).

### Example: String

```php
$x = "apple";
```

- **Zval Struct**:
  - **value**: `_zend_string`
  - **type**: `IS_STRING`

- **_zend_string**:
  - **refcount**: 1
  - **hash**: 0
  - **len**: 5
  - **val[]**: `a`, `p`, `p`, `l`, `e`, `\0`

# New Zvals - References

- **New Type: Reference**:
  - A reference is a new type that points to another `zval`.

### Example: Integer Reference

```php
$x = 1337;
$y = &$x;
```

- **Zval Struct ($x)**:
  - **value**: 1337
  - **type**: `IS_LONG`

- **Zval Struct ($y)**:
  - **value**: `_zend_reference`
  - **type**: `IS_REFERENCE`

- **_zend_reference**:
  - **refcount**: 2
  - **val**: Points to the `zval` of `$x`

# Zvals Take Away

- **Designed for Embedding**: Easier to embed in various data structures.
- **Less Dereferences and Heap Use**: Improved performance and reduced memory usage.
- **References - Complicated**: Managing references can be more complex.

# Vulnerabilities (AKA Vulns)

## Use Uninitialized Value

- **SplObjectStorage::unserialize**: This can lead to using uninitialized values.
  - **Example**: `rval = &inf`

## Type Confusion

- **Making a Reference and Changing Type**: This can lead to type confusion.
  - **Example**: `SplObjectStorage::unserialize`

### Example: Type Confusion

```c
php_var_unserialize(&entry);
if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ }
```

- **Zval Struct (entry)**:
  - **value**: `_zend_object`
  - **type**: `IS_OBJECT`

- **After Modification**:
  - **Zval Struct (entry)**:
    - **value**: `_zend_reference`
    - **type**: `IS_REFERENCE`
    - **_zend_reference**:
      - **refcount**: 2
      - **val**: Points to a `zval` with `IS_OBJECT` type

## Use After Free

- **Pointing to Dynamic Struct**: This can lead to use-after-free vulnerabilities.
  - **Example**: `var_unserializer.c:process_nested_data`
  - **Data Points to Hash Table (ht)**: Data is stored in `var_hash`.
  - **When ht Resized**: `ht` is reallocated, leading to potential use-after-free.

### Example: Use After Free

- **var_hash**:
  - **Zval Struct**:
    - **value**: `_zend_object`
    - **type**: `IS_OBJECT`

- **Properties**:
  - **Zval Struct**:
    - **value**: 0
    - **type**: `IS_LONG`

- **Not Very Common**: Unserialize ensures the size of `ht`.
  - **Yet**: `__wakeup` can define properties, and `DateInterval` can add properties.

# Bugs Take Away

- **More Unserialize Vulnerabilities**: Various vulnerabilities related to unserialize.
- **Different Vulnerabilities**: Different types of bugs.
- **Use Freed Values**: Using freed values can lead to security issues.

# Memory Allocation

## Old (PHP-5) Allocator

- **Heap**: Uses a heap.
- **Metadata per Slot**:
  - **Size**
  - **Flags**
- **Free List**: Manages free slots.

## PHP-7 Allocator

- **Complete Rewrite**: Completely rewritten allocator.
- **Bins**: Uses bins for different sizes.
- **Free Lists**: Maintains free lists for each bin.

### Allocator Details

- **Allocate CHUNK from OS (2MB)**: Allocates a chunk of memory from the OS.
- **Divide into PAGES (4096B)**: Divides the chunk into pages.
- **First Page - Descriptor**:
  - **List of Allocated and Free Pages**
  - **Pointers to Bins**

### New CHUNK

- **CHUNK**:
  - **chunk descriptor**
  - **free_slots**
  - **page_info**

### New BIN

- **CHUNK**:
  - **chunk descriptor**
  - **free_slots**
  - **page_info**
  - **Bins by Size**

### emalloc(size)

```c
bin_num = size2bin(size);
if (NULL == heap->free_slots[bin_num]) {
    init_bin(heap, bin_num);
}
return pop(heap->free_slots[bin_num]);
```

- **CHUNK**:
  - **chunk descriptor**
  - **free_slots**
  - **page_info**
  - **Bins by Size**

### efree(ptr)

This function frees the memory allocated by `emalloc`.

By following this structured and detailed format, the text becomes more organized, clear, and professional.