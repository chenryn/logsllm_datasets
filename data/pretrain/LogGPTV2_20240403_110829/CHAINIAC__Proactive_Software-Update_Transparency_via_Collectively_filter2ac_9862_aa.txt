title:CHAINIAC: Proactive Software-Update Transparency via Collectively
Signed Skipchains and Verified Builds
author:Kirill Nikitin and
Eleftherios Kokoris-Kogias and
Philipp Jovanovic and
Nicolas Gailly and
Linus Gasser and
Ismail Khoffi and
Justin Cappos and
Bryan Ford
CHAINIAC: Proactive Software-Update 
Transparency via Collectively Signed Skipchains 
and Verified Builds
Kirill Nikitin, Eleftherios Kokoris-Kogias, Philipp Jovanovic, Nicolas Gailly, and Linus Gasser, 
École polytechnique fédérale de Lausanne (EPFL); Ismail Khoffi, University of Bonn; Justin 
Cappos, New York University; Bryan Ford, École polytechnique fédérale de Lausanne (EPFL)
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/nikitin
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXCHAINIAC: Proactive Software-Update Transparency via
Collectively Signed Skipchains and Veriﬁed Builds
Kirill Nikitin1, Eleftherios Kokoris-Kogias1, Philipp Jovanovic1, Linus Gasser1, Nicolas Gailly1,
Ismail Khofﬁ2, Justin Cappos3, and Bryan Ford1
1École polytechnique fédérale de Lausanne (EPFL)
2University of Bonn
3New York University
Abstract
Software-update mechanisms are critical to the security
of modern systems, but their typically centralized design
presents a lucrative and frequently attacked target. In this
work, we propose CHAINIAC, a decentralized software-
update framework that eliminates single points of fail-
ure, enforces transparency, and provides efﬁcient veriﬁ-
ability of integrity and authenticity for software-release
processes. Independent witness servers collectively ver-
ify conformance of software updates to release policies,
build veriﬁers validate the source-to-binary correspon-
dence, and a tamper-proof release log stores collectively
signed updates, thus ensuring that no release is accepted
by clients before being widely disclosed and validated.
The release log embodies a skipchain, a novel data struc-
ture, enabling arbitrarily out-of-date clients to efﬁciently
validate updates and signing keys. Evaluation of our
CHAINIAC prototype on reproducible Debian packages
shows that the automated update process takes the average
of 5 minutes per release for individual packages, and only
20 seconds for the aggregate timeline. We further eval-
uate the framework using real-world data from the PyPI
package repository and show that it offers clients security
comparable to verifying every single update themselves
while consuming only one-ﬁfth of the bandwidth and hav-
ing a minimal computational overhead.
1
Software updates are essential to the security of comput-
erized systems as they enable the addition of new se-
curity features, the minimization of the delay to patch
disclosed vulnerabilities and, in general, the improve-
ment of their security posture. As software-update sys-
tems [17,24,34,35,48] are responsible for managing, dis-
tributing, and installing code that is eventually executed
on end systems, they constitute valuable targets for attack-
Introduction
ers who might, e.g., try to subvert the update infrastruc-
ture to inject malware. Furthermore, powerful adversaries
might be able to compromise a fraction of the developers’
machines or tamper with software-update centers. There-
fore, securing update infrastructure requires addressing
four main challenges:
First, the integrity and authenticity of updates tradition-
ally depends on a single signing key, prone to loss [53]
or theft [29, 32, 70]. Having proper protection for sign-
ing keys to defend against such single points of failure is
therefore a top priority. Second, the lack of transparency
mechanisms in the current infrastructure of software dis-
tribution leaves room for equivocation and stealthy back-
dooring of updates by compromised [15,46], coerced [11,
28, 66], or malicious [36] software vendors and distribu-
tors. Recent work on reproducible software builds [49,59]
attempts to counteract this deﬁcit by improving on the
source-to-binary correspondence. However, it is unsuit-
able for widespread deployment in its current form, as re-
building packages puts a high burden on end users (e.g.,
building the Tor Browser bundle takes 32 hours on a mod-
ern laptop [60]). Third, attackers might execute a man-in-
the-middle attack on the connections between users and
update providers (e.g., with DNS cache poisoning [67] or
BGP hijacking [6]), thus enabling themselves to mount
replay and freeze attacks [15] against their targets. To pre-
vent attackers from exploiting unpatched security vulner-
abilities as a consequence of being targeted by one of the
above attacks [72], clients must be able to verify timeli-
ness of updates. Finally, revoking and renewing signing
keys (e.g., in reaction to a compromise) and informing all
their clients about these changes is usually cumbersome.
Hence, modern software-update systems should provide
efﬁcient and secure means to evolve signing keys and
should enable client notiﬁcation in a timely manner.
To address these challenges, we propose CHAINIAC,
a decentralized software-update framework that removes
USENIX Association
26th USENIX Security Symposium    1271
single points of failure, increases transparency, ensures in-
tegrity and authenticity, and retains efﬁcient veriﬁability
of the software-release process.
First, CHAINIAC introduces a decentralized release
sign-off model for developers which retains efﬁcient sig-
nature veriﬁability by using a multi-signature scheme. To
propose a software release, a threshold of the developers
has to sanity-check1 and sign off on it to express their ap-
proval. Third-party witness servers then validate the pro-
posal against a release policy. These witnesses are chosen
by the developers and are trusted collectively but not in-
dividually. If the proposed release is valid, the witnesses
produce a collective signature [69], which is almost as
compact and inexpensive to verify as a conventional digi-
tal signature. Although improving security, this approach
does not place a burden on clients who otherwise would
have to verify multiple signatures per updated package.
Second, CHAINIAC introduces collectively veriﬁed
builds
to validate source-to-binary correspondence.
CHAINIAC’s veriﬁed builds are an improvement over re-
producible builds, in that they ensure that binaries are not
only reproducible in principle, but have indeed been iden-
tically reproduced by multiple independent veriﬁers from
the corresponding source release. Concretely, this task is
handled by a subset of the witness servers, or build veri-
ﬁers, that reproducibly build the source code of a release,
compare the result with the binary provided by the devel-
opers, and attest this validation to clients upon success.
An additional advantage of this approach is that compa-
nies, in order to provide the source-to-binary guarantee to
customers, can reveal source code only to third-party build
veriﬁers who sign appropriate non-disclosure agreements.
Third, CHAINIAC increases transparency and ensures
the accountability of the update process by implement-
ing a public update-timeline that comprises a release log,
freshness proofs, and key records. The timeline is main-
tained collectively by the witness servers such that each
new entry can only be added – and clients will only ac-
cept it – if appropriate thresholds of the witnesses and
build veriﬁers approve it. This mechanism ensures the
source-to-binary binding to protect clients from compile-
time backdoors or malware, and it guarantees that all users
have a consistent view of the update history, preventing
adversaries from stealthily attacking targeted clients with
compromised updates. Even if an attacker manages to slip
a backdoor into the source code, the corresponding signed
binary stays publicly available for scrutiny, thereby pre-
venting secret deployment against targeted users.
1Precise details of this review process depend on the developers’ en-
gineering disciplines, which are also security-critical but are beyond the
scope of this paper.
Finally, to achieve tamper evidence, consistency, and
search efﬁciency of the timeline, and to enable a secure
rotation of signing keys, CHAINIAC employs skipchains,
novel authenticated data structures inspired by skip
lists [55, 61] and blockchains [41, 56]. The skipchains
enable clients to efﬁciently navigate arbitrarily long up-
date timelines, both forward (e.g., to validate a new soft-
ware release) and backward (e.g., to downgrade or ver-
ify the validity of older package-dependencies needed for
compatibility). Back-pointers in skipchains are crypto-
graphic hashes, whereas forward-pointers are collective
signatures. Due to skipchains, even resource-constrained
clients (e.g., IoT devices) can obtain and efﬁciently val-
idate binary updates, using a hard-coded initial software
version as a trust anchor. Such clients do not need to con-
tinuously track a release chain, like a Bitcoin full-node
does, but can privately exchange, gossip, and indepen-
dently validate on-demand newer or older blocks due to
the skipchain’s forward and backward links being ofﬂine-
veriﬁable. Although blockchains are well-known tools, to
our knowledge the skipchain structure is novel and can be
useful in other contexts, besides software updates.
The evaluation of our prototype implementation of
CHAINIAC on reproducible Debian packages shows that,
in a group of more than a hundred veriﬁers, the end-
to-end cost per witness of release attestation is on av-
erage ﬁve minutes per package, with the veriﬁed builds
dominating this overhead. Furthermore, skipchains can
increase the security of PyPI updates with minimal over-
head, whereas a strawman approach would incur the in-
crease of 500%. Finally, creating a skipblock of the ag-
gregate update timeline for the full Debian repository of
about 52,000 packages requires only 20 seconds of CPU
time for a witness server, whereas receiving the latest
skipblock on a client introduces only 16% of overhead to
the usual communication cost of the APT manager [23].
In summary, our main contributions are as follows:
(cid:15) We propose CHAINIAC (Sections 3 and 5), a software-
update framework that enhances security and trans-
parency of the update process via system-wide decen-
tralization and efﬁciently veriﬁable logging.
(cid:15) We introduce skipchains (Section 4), a novel authenti-
cated data structure that enables secure trust delegation
and efﬁcient bi-directional timeline traversal, and we
discuss their application in the context of CHAINIAC.
(cid:15) We conduct an informal security analysis (Section 6) of
CHAINIAC, justifying its resilience in common attack
scenarios.
(cid:15) We implement CHAINIAC (Section 7) and evalu-
ate (Section 8) a prototype on real-world data from the
Debian and PyPI package repositories.
1272    26th USENIX Security Symposium
USENIX Association
2 Background
In this section, we give an overview of the concepts and
notions CHAINIAC builds on, this includes scalable col-
lective signing, reproducible builds, software-update sys-
tems, blockchains, and decentralized consensus.
2.1 Collective Signing and Timestamping
CoSi [69] is a protocol for large-scale collective signing.
Aggregation techniques and communication trees [25,73]
enable CoSi to efﬁciently produce compact Schnorr multi-
signatures [64] and to scale to thousands of participants.
A complete group of signers, or witnesses, is called a col-
lective authority or cothority. CoSi assumes that signa-
ture veriﬁers know the public keys of the witnesses, all of
which are combined to form an aggregate public key of
the cothority. If witnesses are ofﬂine during the collective
signing process or refuse to sign a statement, the resulting
signature includes metadata that documents the event.
In CHAINIAC, we rely on CoSi for efﬁcient collective
signing among a large number of witnesses. Furthermore,
we use the witness-cosigned timestamp service [69] as a
building block in our design for the protection of clients
against replay and freeze attacks [15] (where clients are
blocked from learning about the availability of new soft-
ware updates by an adversary). We describe the design of
the protection mechanism in Section 5.6.
2.2 Reproducible Builds
Ensuring that source code veriﬁably compiles to a cer-
tain binary is difﬁcult in practice, as there are often non-
deterministic properties in the build environment [49,59],
which can inﬂuence the compilation process. This is-
sue poses a variety of attack vectors for backdoor inser-
tion and false security-claims [36]. Reproducible builds
are software development techniques that enable users
to compile deterministically a given source code into
one same binary, independent of factors such as system
time or build machines. An ongoing collaboration of
projects [62] is dedicated to improving these techniques,
e.g., Debian claims that 90% of its packages in the testing
suite are reproducible [22], amounting to (cid:24)21,000 pack-
ages. To provide a source-to-binary attestation as one of
the guarantees, CHAINIAC relies on software projects to
adopt the practices of reproducible builds.
2.3 Roles in Software-Update Systems
The separation of roles and responsibilities is one of the
key concepts in security systems. TUF [63] and its succes-
sor, Diplomat [44], are software-update frameworks that
make update systems more resilient to key compromise
by exploiting this concept. In comparison to classic sys-
tems, these frameworks categorize the tasks that are com-
monly involved in software-update processes and specify
a responsible role for every category. Each of these roles is
then assigned a speciﬁc set of capabilities and receives its
own set of signing keys, which enables TUF and Diplomat
to realize different trade-offs between security and usabil-
ity. For example, frequently used keys with low-security
risks are kept online, whereas rarely needed keys with a
high-security risk are kept ofﬂine, making it harder for
attackers to subvert them. To achieve, for each role, the
sweet-spot between security and usability, we follow a
similar delegation model in our multi-layered architecture
in Section 5.6. However, we decentralize all these roles,
use a larger number of keys, and log their usage and evo-
lution to further enhance security and add transparency.
2.4 Blockchains and Consensus
Introduced by Nakamoto [56], blockchains are a form of
a distributed append-only log that is used in cryptocur-
rencies [56, 75] as well as in other domains [41, 74].
Blockchains are composed of blocks, each typically con-
taining a timestamp, a nonce, a hash of the previous
block, and application-speciﬁc data such as cryptocur-
rency transactions. As each block includes a hash of the
prior block, it depends on the entire prior history, thus
forming a tamper-evident log.
CHAINIAC uses BFT-CoSi,
introduced in Byz-
Coin [42], as a consensus algorithm to ensure a single
timeline, e.g., while rotating signing keys.
consistent
BFT-CoSi implements PBFT [16] by using collective
signing [69] with two CoSi-rounds to realize PBFT’s
prepare and commit phases. CHAINIAC’s skipchain
structure is partly inspired by blockchains [41]: Whereas
ByzCoin also uses collective signatures to enable light-
client veriﬁcation, skipchains extend this functionality
with skiplinks to enable clients to efﬁciently track and
validate update timelines, instead of downloading and
validating every signature. As a result skipchains can be
used for more efﬁcient ofﬂine veriﬁcation of transactions
in distributed ledger systems that work with consensus
committees [2, 42, 43].
3 System Overview
In this section, we state high-level security goals that
a hardened software-update system should achieve, we in-
troduce a system and threat model, and we present an ar-
chitectural overview of our proposed framework.
3.1 Security Goals
To address the challenges listed in Section 1, we formulate
the following security goals for CHAINIAC:
USENIX Association
26th USENIX Security Symposium    1273
Figure 1: Architectural overview of CHAINIAC
1. No single point of failure: The software-update sys-
tem should retain its security guarantees in case any sin-
gle one of its components fails (or gets compromised),
whether it is a device or a human.
2. Source-to-binary afﬁrmation: The software-update
system should provide a high assurance-level to its
clients that the deployed binaries have been built from
trustworthy and untampered source code.
3. Efﬁcient
release-search and veriﬁability: The
software-update system should provide means to its
clients to ﬁnd software release (the latest or older ones)
and verify its validity in an efﬁcient manner.