User: Please write a Java program to implement word segmentation and word frequency statistics for text files, and output the results.
Assistant: In order to realize the functions of word segmentation and word frequency statistics, we can use a third-party word segmentation library and hash table (HashMap). The steps are as follows: 1. Use a third-party word segmentation library to segment the text file and return a word list after word segmentation. 2. Traverse the list of words and use the hash table to count the number of occurrences of each word. 3. Output statistical results, sorted by word frequency from large to small. The code is as follows: import java.io.*; import java.util.*; import org.ansj.domain.Term; import org.ansj.splitWord.analysis.*; public class WordCount { public static void main(String[] args ) { // Read the text file String fileName = "test.txt"; String content = readFile(fileName); // Use the word segmentation library to segment the text and return the word list List<Term> terms = getTerms(content); // Count the word frequency and store it in the hash table Map<String, Integer> wordCount = countWords(terms); // Sort the hash table according to the word frequency from large to small List<Map.Entry<String, Integer>> sortedList = sortWords(wordCount); // output statistical results System.out.println("word\t\t\tword frequency"); System.out.println("--------------- ---------"); for (Map.Entry<String, Integer> entry : sortedList) { System.out.println(entry.getKey() + "\t\t" + entry.getValue( )); } } // Read text file public static String readFile(String fileName) { StringBuilder content = new StringBuilder(); try { BufferedReader br = new BufferedReader(new FileReader(fileName)); String line; while ((line = br.readLine()) != null) { content.append(line); } br.close(); } catch (IOException e) { e.printStackTrace(); } return content.toString(); } // Use the word segmentation library to segment the text and return the word list public static List<Term> getTerms(String content) { return ToAnalysis.parse(content).getTerms(); } // Count the word frequency and store it in the hash table public static Map<String, Integer> countWords(List<Term> terms) { Map<String, Integer> wordCount = new HashMap<>(); for (Term term : terms) { String word = term.getName(); if (wordCount .containsKey(word)) { wordCount.put(word, wordCount.get(word) + 1); } else { wordCount.put(word, 1); } } return wordCount; } // Change the hash table from Sort public static List<Map.Entry<String, Integer>> sortWords(Map<String, Integer> wordCount) { List<Map.Entry<String, Integer>> sortedList = new ArrayList<>(wordCount.entrySet( )); Collections.sort(sortedList, new Comparator<Map.Entry<String, Integer>>() { @Override public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) { return o2.getValue().compareTo(o1.getValue()); } }); return sortedList; } } An open source word segmentation library Ansj is used here, and readers can download and configure it by themselves. After running the program, the output should be similar to the following: Word frequency ------------------------ Java 5 programming 3 program 3 a 2 implementation 2 statistics 2 word segmentation 2 function 2 output 2 file 2 pair text 1 text 1 this program 1 sequence 1 line division 1 concurrent 1 seek two 1 number 1 sum 1 example 1 etc. 1