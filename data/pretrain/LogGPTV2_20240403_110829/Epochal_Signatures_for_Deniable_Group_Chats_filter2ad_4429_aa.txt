title:Epochal Signatures for Deniable Group Chats
author:Andreas H&quot;ulsing and
Florian Weber
2021 IEEE Symposium on Security and Privacy (SP)
Epochal Signatures for Deniable Group Chats
Andreas H¨ulsing∗, Florian Weber†
∗TU Eindhoven, E-mail: PI:EMAIL
†TU Eindhoven, E-mail: mail@ﬂorianjw.de
8
5
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—In this work we take a formal look at deniability in
group chat applications and introduce the concept of “epochal
signatures” that allows to turn many secure group chat protocols
into deniable ones. Intuitively, the transform works for protocols
that use signatures for authentication and that become deniable if
the signatures are removed. In contrast to previous proposals that
use signatures for entity authentication, like mpOTR (CCS’09),
our construction does not require pairwise key establishment of
participants and allows to add and remove participants without
requiring to re-initialize the chat. These properties allow the
deployment in protocols that are also designed to scale to very
large groups. Finally, we construct a practical epochal signature
scheme from generic primitives and prove it secure.
Index Terms—Deniability, Signature, Epochal Signature,
Group Chat
I. INTRODUCTION
In this work we take a formal look at deniability in group
chat applications and introduce a new primitive that allows to
turn many secure group chat protocols into deniable ones.
Deniability is a property of social conversation: As long as
nobody is recording a conversation it is generally not possible
to prove to someone not part of the conversation what was
said (or even if the conversation happened at all). Recording
a conversation without the consent of the other person (or a
judge) is considered immoral in most societies and even illegal
in many jurisdictions.
Nowadays, we are moving large parts of our social con-
versations online. In this setting we are facing a dilemma.
Communication tools that provide the traditional security
properties of conﬁdentiality, integrity, and authentication, often
also provide a transferable proof of authenticity for messages
or metadata that proves participation in the conversation. For
example, modern tools for messaging in large groups, like
MLS (in its current internet draft version 05 [1]), sign every
message to provide authentication in the presence of malicious
insiders. This renders communication undeniable and changes
things in a social setting: Suddenly, it is not one word against
the other, but there is undeniable proof. Even more, it is
now sufﬁcient to leak a transcript which allows everyone to
verify what was being said without the leaking party coming
forward. In group communication this might even allow to
make somewhat anonymous accusations. While this might be
intended in some settings, it is obviously not intended in many
others as we do not record most of our real life conversations
and would be suspicious if someone else would do this. There
is a long debate that one can have about the settings in which
deniability might be useful and the degree of usefulness; see
Author
leaders/culture/CultureStatement04.pdf.
list
in alphabetical order; see https://www.ams.org/profession/
for example the discussion about deniability in MLS [2].
Instead of discussing this question, our work focuses on the
technical aspects of deniability and its technical feasibility.
Hence, in the following deniability is to be understood as
technical deniability if not explicitly stated otherwise.
Probably the ﬁrst work on deniability is “Undeniable Signa-
tures” [3] by Chaum and van Antwerpen where they introduce
signatures that can only be veriﬁed by a chosen recipient.
This idea was further developed as chameleon signatures [4].
More explicitly, deniability of secure messaging appeared in
the work on “deniable encryption” [5] which considered the
deniability of encrypted messages even if the random coins,
and possibly the secret key get corrupted.
The notion of deniability gained new relevance in the
context of secure chat protocols. It ﬁrst reappeared as plausible
deniability in the proposal of the “Off-the-Record” protocol [6]
and was kept as an important privacy property of secure chat
ever since [7], [8]. Consequently, the Signal-protocol [9] that
is now widely deployed in chat-software such as Signal and
WhatsApp provides (some form of) deniability. The generic
approach for two-party chat protocols to achieve deniability is
to use a deniable key-exchange to setup a shared secret key.
That shared secret key is then used to encrypt messages with
an authenticated encryption scheme. Since everyone who can
verify the authenticity of the ciphertext has the key necessary
to create it, a ciphertext cannot serve as proof. While it is
still not known how to achieve extremely strong notions of
deniability efﬁciently [10], the above approach provides a
practical solution for deniability of two-party chats.
A similar solution does not exist for group-chats: Using
authenticated encryption with a shared group secret for sym-
metric authentication is insecure for the same reason for which
it is deniable in the two-party case: All parties that have the
key could have created a message, but since there are multiple
parties, it could have come from any of them. In addition to
that deniable key-exchanges don’t necessarily scale well with
more than two parties: Using a pairwise-approach works but
requires a quadratic number of key exchanges in the number
of parties.
Because of this most protocols either sacriﬁce deniability
over authenticity (for example the current MLS-draft [1]) or
implement groups as essentially pairwise two-party-chats [11],
[12] which is inefﬁcient in terms of communication complex-
ity. Consequently, many protocols share further downsides,
such as message-sizes linear in the group-size [13], [14] or
the requirement that there is at least one universally trusted
user in every group [15]. A partial exception is “Multi-Party
OTR” (mpOTR) [16] which uses a shared secret key for
conﬁdentiality but ephemeral signature keys for authenticity.
© 2021, Andreas Hülsing. Under license to IEEE.
DOI 10.1109/SP40001.2021.00058
1677
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
This leads to an efﬁcient protocol for message exchange but
the setup phase still has quadratic complexity in the group
size. While the setup cost alone might be acceptable, there is
a major downside to mpOTR. Any join or leave of a party
requires the setup of a new chat. Given that for example
MLS has the “aim to scale to groups as large as 50,000
members” [1], considering frequent join and leave operations,
this renders mpOTR largely impractical for this scenario. A
further issue is that deniability is only guaranteed after a chat
ended which also requires to frequently re-initialize chats even
without join or leave operations.
Furthermore we note that most of the existing work on
deniability in chat protocols does not use formal models with
generally agreed upon formal security notions but rather stay
on an informal level. A notable exception is the work on
online deniability [10] but the model is limited to two parties.
Hence, existing schemes often just argue via the intractability
of speciﬁc attacks [17] in place of a formal security argument.
In summary, there neither exists any satisfying solution for
deniability in group chat nor a formal model that describes
what deniability in a group chat setting actually means.
A. Our Contribution
In this work we solve the above problem. First, we introduce
a formal framework for ofﬂine deniability in group-chats
(to our knowledge the ﬁrst one). For this, we build on the
recent model for chats by R¨osler et al. [18] and extend it
(see Sections III and V). Our notion is parameterized by a
predicate that states at what point in the execution deniability
is achieved. Based on different such predicates we introduce
three notions of different strength for ofﬂine deniability. We
show that our notions form a strict hierarchy and argue that the
intermediate notion is the best choice for practical applications.
We argue that our strongest notion, which asks for immediate
deniability of messages, is likely not achievable by practical
protocols and discuss attack scenarios not covered by our
weakest notion.
Second, we introduce the concept of epochal signatures
which can be used to easily convert many existing, non-
deniable protocols for group chat into deniable ones (Sec-
tion IV). Our solution scales well to large group sizes and
the resulting protocols are almost as efﬁcient as the original
ones. The idea is somewhat similar to mpOTR but avoids the
requirement of pairwise exchange of temporary signature keys.
Instead, epochal signatures evolve over time and allow for
efﬁcient forgeries of old messages after a ﬁxed period of time.
Essentially, they are the opposite of forward-secure signatures:
Publishing a secret key allows to forge signatures valid in the
past but not in the future. We remark here that these resolve a
previously brought-up issue [19] with just publishing old keys,
namely that the owner of said keys might be unable to do so.
Readers that are not interested in the formal modelling should
be able skip forward to this part without too many issues.
Third, we present an efﬁcient generic construction for
epochal signature schemes whose security we prove secure
in the standard model (Section VI). Our construction relies
only on well established primitives, namely forward secure
signatures, pseudorandom functions, and timelock puzzles.
Since our proof works in the standard-model and avoids prob-
lematic techniques like rewinding, an instantiation with post-
quantum schemes would immediately give us post-quantum
epochal signatures. While unintended,
it seems as if our
epochal signature proposal also constitutes an instantiation for
a TimeForge Signature, a recently [20] proposed primitive for
deniable E-Mail in the presence of DKIM.
II. SECURITY MODEL FOR CHATS
The model we use for group chats is a slight extension of
that of R¨osler, Mainka and Schwenk [18]. To stay consistent
with our own conventions we adjust
the names of some
variables slightly, but other than that the following subsection
is an almost verbatim copy of the original description:
A. Base Model
The model assumes a central server, that receives messages
from the respective senders, caches them, and forwards them
as soon as the receivers are online. Hence the protocols are
executed in an asynchronous environment in which only the
server has to always be online.
Groups are deﬁned as tuples gr = (IDgr, Ggr, G∗
gr,
gr ⊆ Ggr ⊆ U where U is the set of all users
inf ogr), G∗
of the protocol, Ggr is the set of all members of the group gr,
G∗
gr is the set of administrators of gr. The group is uniquely
referenced by IDgr. Additionally, a title and other usability
information can be conﬁgured in inf ogr.
We denote communicating users with uppercase letters in
the calligraphic font (. . . ,U,V,··· ∈ U) and administrators
with an asterisk (U∗ ∈ G∗
gr) where relevant. Every user
maintains long-term secrets for initial contact with other
users and a session state for each group in which she is
member. The session state contains housekeeping variables
and secrets for the exclusive usage in the group. Messages
delivered in a group are not stored in the session state. By
distinguishing between delivery and receiving of messages, we
want to emphasize that a received message is ﬁrst processed
by algorithms before the result is presented to the user.