2578
（我们注意到这个脚本并不完美：特别是它无法保留原始目录的所有权与使用权限）.COIm1
如果输人单词多于变量时，最后剩下的单词全部被指定给最后一个变量。理想的行为应
转义这个法则：使用read搭配单一变量，将一整行的输入读取到该变量中。
很早以前，read默认的行为便是将输入行的结尾反斜杠看作续行（linecontinuation）
的指示字符。这样的一行会使得read舍弃反斜杠与换行字符的结合，且继续读取下一
个输入行：
S printf “Bnter same, rank, serial number:*;read same rank serno
Enter name, rank, serial number: Jones \
>Major \
$ printf "Name: %s, Rank: %s, Serial nunber: %s\n" $name $rank $serno
>123-45-6789
Name: Jones, Rank: Major, Seria1 number: 123-45-6789
偶尔你还是会想要读取一整行的时候，而不管那一行包含了什么。-r选项可以实现此目
的（-r选项是特定于POSIX的，许多BourneShell并不支持），当给定-r选项时，read
不会将结尾的反斜杠视为特殊字符：
S read -z name rank serno
S echo Snane $rank $serno
只提供两个字段
tolstoy\
7.3
关于重定向
我们已经介绍且使用过基本的输出入重定向运算符：>，以及1。在本节，我们
要看看还有哪些运算符可以使用，并介绍文件描述符（file-descriptor）处理的重要话题。
7.3.1额外的重定向运算符
这里是Shell提供的额外运算符：
使用set-C搭配
POSIXShell提供了防止文件意外截断的选项：执行set-C命令可打开Shell所
谓的禁止覆盖（noclobber）选项，当它在打开状态下时，单纯的>重定向遇到目标
文件已存在时，就会失败。>1运算符则可令noclobber选项失效。
提供行内输人（inlineinput）的> eueus 5ururen efesn xstp。 s- tteu
Greetings. You are one of the top 10 consumers of disk space
on the system.
Your home directory uses Sanount disk blocks.
Please clean up unneeded files, as soon as possible.
Thanks,
-
Your friendly neighborhood system administrator.
BOF
done
根目录（以我们的经验来说，这种信息多半没有用，不过这么做会让系统管理人员
觉得好过些）。
如果定界符以任何一种形式的引号括起来，Shel1便不会处理输入的内文：
$ 1=5
设置变业
S cat  This 1s tbe value of 1: $1
定界符已被引用
> Here 1s a command substitutlon: $(echo bello, world)
会试变量参照
命令替换
> SOF
This is the value of i: $i
完长式地显示文字
Here is a command substitution: $(echo hello, world)
嵌入文件重定向器的第二种形式有一个负号结尾，这种情况下，所有开头的制表符
（Tab）在传递给程序作为输人之前，都从嵌人文件与结束定界符（closing
delimiter）中删除（注意：只有开头的制表字符会被删除，开头的空格则不会删除）。
这么做，让Shel1脚本更易于阅读了，让我们来看看例7-1的通知程序修正版：
例7-1：给砸盘贪娄户的一封信
cd /hone
客目
du -8 *
sort -nr
1
以数字排序，最高的在第一个
产生原始碰盘使用登
sed 10q
找到前10行就停下来
vhile read amount nane
do
nai1 -g *disk usage warning* $nane 打开一个文件作为输人与输出之用
使用program<>file，可供读取与写人操作。默认是在标准输入上打开file。
一般来说，以只写模式打开文件，<>运算符则是以读
取与写人两种模式打开给定的文件。这交由program确定并充分利用：实际上，
使用这个操作符井不需要太多的支持。
.
普告：<>最初是出现在最早的V7BourneShell上，不过并没有形成文档，且经验告诉我们，在
很多环境下，它的运行会有点问题。募于此，它井未被大家广泛了解或使用，虽然它已在
1992年的POSIX标准中标准化，但得多系统里的/bin/sh并不支持它，因此如果你对程
序可移植性的要求很高，最好退免使用。
对于使用>1我们也有相同的警告，此功能来自于Korn Shell，并在1992年已标准化，不
过至今仍有一些系统不支持。
7.3.2文件描述符处理
在系统内部，UNIX是以一个小的整数数字，称为文件描述符（file descriptors），表示
每个进程的打开文件，数字由零开始，至多到系统定义的打开文件数目的限制。传统上，
Shell允许你直接处理至多10个打开文件：文件描述符从0至9（POSIX标准将是否可
以处理大于9的文件描述符，保留给各实现自行定义。bash可以，但ksh则否）。
文件描述符0、1与2，各自对应到标准输入、标准输出以及标准错误输出。如前所述，
如Xwindow）。到当前为止，最常见的操作便是变更这三个文件描述符其中一个的位置，
不过也可能处理其他的变动。首先来看的是：将程序的输出传送到一个文件，并将其错
误信息传到另一个文件：
nake 1> results 2> ERRS
上面的命令是将make（注1）的标准输出（文件描述符为1）传给results，井将标准
错误输出（文件描述符为2）传给ERRS（make不会知道这之间的差异：它不知道也不
关心，也并未传送输出或错误信息到终端）。将错误信息捕提在一个单独的文件里是一
种很实用的微法，你之后可以使用分页程序查阅它们，或使用编辑器修正问题。否则，
注 1;
make程序用于控制原始文件童新骗译为目标文件（object file）。不过它的用法相步多，
要了解史多信息，可参考《Managing Projects with GNU make）（O'Reilly）。
www.TopSage.com
---
## Page 172
160
大量输出的错误信息会快速地卷过屏幕画面，你会很难找到需要的信息，另一种不同的（Im1
方式就更利露了，直接舍弃错误信息：
make 1> results 2> /dev/nu11
1>results里的1其实没有必要，供输出重定向的默认文件描述符是标准输出：也就
是文件描述符1。下个例子会将输出与错误信息送给相同的文件：
nake' > results 2>61
重定向>results让文件描述符1（标准输出）作为文件results，接下来的重定向
2>&1有两部分。2>重定向文件描述符2，也就是标准错误输出。而&1是Shell的语法：
无论文件描述符I在哪里。在本例中，文件描述符1是results文件，所以那里就是文
件描述符2要附加的地方。需特别留意的一点是：在命令行上，这4个字符2>&1必须
连在一起，中间不能有任何空格。
在此，顺序格外重要：Shell处理重定向时，由左至右，来看看此例：
make 2>61 > results
上述命令，Shell会先传送标准错误信息到文件描述符1，这是仍为终端，然后文件描述
符1（标准输出）被改为results。更进一步，Shell会在文件描述符重定向之前处理管
道，使我们得以将标准输出与标准错误输出都传递到相同的管道：
make, 2>61 1...?
最后要介绍的是可用来改变Shell本身I/O设置的exec命令。使用时，如果只有I/O重
定向面没有任何参数时，exec会改变Shell的文件描述符：
exec 2>/tmp/s0.1og
重定向Shel1本身的标准错误输出
exec 3&2
把原来的标准错误输出保存到文件摘述符5（fd5）上
exec2>/tmp/$0.1og重定向标准错误输出
...
执行各种操作
exec 2>&5
将原始文件复制到文件描述符2
exec 5>&-
关闭文件描述符5，因为不再需要了
www.TopSage.com
---
## Page 173
输入/输出、文件与命令执行
161
exec
语法
exec [ program [ arguments ... ]]
用途
以新的程序取代Shell：或改变Shell本身的I/O设置。
主委选项
无
行为
普配参数一也就是使用指定的程序取代Shell，以传递参数给它。如果只使用
I/O重定向，则会改变Shell本身的文件描述符。
搭配上参数，exec还能起到另一个作用，即在当前Shell下执行指定的程序。换句话说，
就是Shell在其当前进程中启动新程序，例如，想使用Shell做选项处理但大部分工作仍
要由一些其他程序来完成时，你可以用这个方式：
whi1e [ $# -gt 1 ]
循环遍历参数
case $1 in
处理速项
-f1
# code for -f here
-q)
 code for -q here
break :1
没有选项，中断播环
esac
shift
移到下-个参数
done
e$.,sbzegs。 J- ,exebs。 b-dde-Teex ooxo
执行程序
echo real-app failed, get help! 1>&2
紧急信息
使用此法时，exec为单向操作。也就是说：控制权不可能会国到脚本，唯一的例外只
有在新程序无法被调用时，在该情况下，我们会希望有“紧急”代码，可显示信息，再
完成其他可能的清除工作。
7.4
printf的完整介绍
我们曾在2.5.4节中介绍过printf命令.本节我们将完整地介绍它。
www.TopSage.com
---
## Page 174
162
第7章
printf命令的完整语法有两个部分：
Printf format-atring [arguments...]
第一个部分为描述格式规格的字符串，它的最佳提供方式是放在引号内的字符串常数。
第二个部分为参数列表，例如字符串或变量值的列表，该列表需与格式规格相对应。格
式字符串结合要以字面意义输出的文本，它使用的规格是描述如何在printf命令行上
格式化一连申的参数。一般字符都按照字面上的意义输出。转义序列会被解释（与echo
相似），然后输出为相对应的字符。格式指示符（format specifier）是以字符开头且
由已定义的字母集之一作为结尾，用来控制接下来相对应参数的输出。printf的转义
序列见表7-1。
printf
语法
printf format [string ...)
为了从Shell脚本中产生输出，由于printf的行为是由POSIX标准所定义，
国此使用printE的脚本比使用echo更具可移桂性。
主委选项
无
行为
printf使用format字将事拉制输出.字基串重的纯字将都如实打印。echo
的转义序列会被解释。也括与一个宇母的格式指示算（Format specifier），
用来指示相对应的参数字异串的格式化，详见内文介绍。
表7-1：printf的转义序列
序列
说明
\a
警告字符，通常为ASCII的BEL字符
1b
后退
1c
抑制（不显示）输出结果中任何结尾的换行字符“，而且，任何留在参数里的