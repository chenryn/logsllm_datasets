are too variable to reliably determine the age of a victim. It
should also be noted that these experiments were conducted
in optimal network conditions, and network jitter may fur-
ther decrease the basic attack. The measurements for the
unauthorized posts in the Service Workers attack are, ex-
cept for a few outliers, consistently lower than the post that
is only visible to the age-range to which the victim belongs
(23-32). These results serve as an additional indicator that
an attacker can obtain sensitive information much faster by
using the newly introduced timing attacks.
4.2 LinkedIn: Contact Search
LinkedIn is a business-oriented social network with over
347 million users, and is mainly used for professional net-
working [23]. Similar to other social networking services,
users on LinkedIn can create bi-directional relations with
others, which are called connections.
In order to browse
through your contacts, LinkedIn oﬀers the functionality to
ﬁlter connections based on their name, location, employer, or
Figure 4: Timing attack against Facebook age-
limited posts.
even their current job title. If the intuitive notion that users
connect with colleagues, business partners, or friends in the
same geographic location, holds true, then it is possible to
infer a user’s location, employer, and other private aspects,
on the basis of the number of connections that match cer-
tain ﬁlters. For instance, if a user has over 100 connections
originating from Germany, and only a handful from other
countries, it is likely that the user, just as his connections,
is living in Germany.
We found that the matching contacts for a certain query
are sent as a JSON stream, in response to an XMLHttpRe-
quest request. For each connection that matches the query,
we found that the response size grows approximately 0.5kB.
As the JSON resource does not contain a token speciﬁc to
the user, and can be accessed using a normal GET request,
we found that, by using timing attacks, it is possible for
an attacker to estimate the number of connections returned
for a certain ﬁlter. By combining the outcome of several
queries, the adversary can learn the geographic distribution
of a user’s professional network, with a granularity of coun-
try or even city. In a similar fashion, the adversary could
extract information on the companies the victim works with,
allowing him to leverage this information to, for instance,
launch a personalized phishing attack.
4.3 Twitter: Protected Accounts
With 288 million active users, and 500 million Tweets sent
per day, Twitter is one of the largest online microblogging
networks [36]. By default, Twitter makes all Tweets publicly
available. However, Twitter also provides the possibility to
make your account protected, in which case Tweets are only
visible to the list of approved followers. This means that the
visibility of protected Tweets depends on the state of the
user: the protected Tweet is only shown if the user follows
its author. By exploiting the diﬀerence in size returned for
a protected account’s proﬁle page, an adversary can detect
which protected Twitter accounts the victim is following.
In their research, Wondracek et al. [42] describe how the
combination of the groups a social-network user is mem-
ber of, can be used in a de-anonymization attack. Using a
similar approach, but replacing the notion of “groups” with
1389“protected Twitter accounts”, an adversary can use timing
attacks to compose the list of protected accounts a user is
following, and subsequently use that information to ﬁnd the
user’s unique identity. Contrary to Wondracek’s proposed
attack, where history stealing techniques are leveraged to
extract group membership information, our attack is based
on the user’s state on the social network. As such, our at-
tack provides much more reliable results since it does not
rely on a user’s browsing behavior.
Composing the complete list of protected accounts a user
is following, poses the major practical limitation in this at-
tack. Over 10% of Twitter users, i.e., approximately 30
million users, have opted to protect their Tweets [6], and
checking these one by one would be impractical. However,
we argue that a motivated attacker could employ a more so-
phisticated algorithm, e.g., by ﬁrst checking accounts with
the most followers, to considerably improve this attack. By
using the newly introduced timing attacks, an adversary can
easily reveal a user’s following information since there is a
diﬀerence of more than 100kB in resource size. Interestingly,
classic timing attacks will be highly inaccurate since after
the gzip compression (typically used by web servers to re-
duce the size of HTTP responses), there is only a diﬀerence
in ﬁle size of approximately 5kB.
4.4 Google and Amazon: Search History
So far, we discussed various attack scenarios on several
social networks, which leverage cross-site timing techniques.
To demonstrate that the consequences of timing attacks are
not limited to social networks, in this section, we describe an
attack on the most-used online service, namely the Google
search engine. With over a trillion searches per year, the
majority of people on the web are using Google’s search re-
sults as a starting point for browsing websites related to their
interests. In addition to responding to new search queries,
Google provides the ability to navigate through all search
queries users have made in the past, and shows which re-
sults they have clicked.
One way of navigating through the search history is by
searching for a speciﬁc keyword, which will return up to
1,000 search queries and corresponding search results that
match that keyword. The resource containing the results is
an HTML ﬁle that can be acquired by making a GET re-
quest. Naturally, this resource grows larger as more results
are returned. An adversary is able to extract information
on a user’s interests, based on the response size of various
queries. In Figure 5, we show the measurements obtained
during two timing attacks that target various keywords. We
ﬁnd that the timing measurements for the basic attack are
distributed unequally, preventing an attacker from learning
the user’s interests within the allotted time frame. How-
ever, when Service Workers are leveraged to measure the
time required to place a resource in the cache, an attacker
can quickly estimate the number of search results that are
returned for a speciﬁc query.
This particular issue is not just limited to Google’s search
engine, but can also be applied to other online web services
that provide the functionality of viewing one’s own browsing
history. For example Amazon, one of the largest e-commerce
services, oﬀers users the ability to ﬁlter their own browsing
history based on product category. We found that the page
oﬀering this functionality is vulnerable to timing attacks,
Figure 5: Timing attack against several queries in
Google Search History.
which can provide an adversary with valuable information
that could be used for targeted advertising.
5. DISCUSSION
In the previous sections we introduced various timing tech-
niques, and described how these can be leveraged to discover
a broad range of personal information in a variety of social
networks and other online services. We found that these
techniques can be applied to the majority of modern web
browsers, and that a large fraction of the most popular on-
line services fail to protect their users against cross-site tim-
ing attacks. Defense mechanisms that have been proposed
to counter timing attacks include adding a random delay
that requires an attacker to obtain more timing measure-
ments [20], or implementing a ﬁxed response time for all
server responses [7]. To reduce the performance impact of
these countermeasures, other researchers have proposed to
just keep the execution time of sensitive processes ﬁxed [28],
or to add a ﬁxed and unpredictable delay to the server’s
response time [31].
These defense mechanisms can adequately prevent both
direct timing attacks, i.e., attacks where the adversary learns
secrets about the state of the website, and basic timing at-
tacks, where the adversary learns secrets about the state of a
particular user on a third-party website. Unfortunately, they
are fully bypassed by our newly introduced cross-site timing
attacks, as our attacks exploit various browser mechanisms
which expose information on the size of an external resource.
In our timing attacks, a resource is downloaded just once,
and consequently delays imposed by the web server do not
impact the cross-site timing performance.
It could be argued that the side-channel information, which
is used in the new timing techniques, is exposed by modern
browsers, and therefore these browsers should be patched
in order to prevent this from happening. A straightforward
solution would be to add a random delay to the ﬁring of
events. As a result, an attacker would have to collect more
measurements and apply statistical methods in order to ac-
1390curately determine the size of a resource. However, since
hundreds of measurements can be obtained in just a few
seconds, and because this solution would negatively impact
the performance of many websites, we do not consider this a
viable solution. Alternatively, browser vendors could opt to
ﬁx the time when events are ﬁred to the worst-case execution
time (WCET). However, in this case an attacker could still
use performance information, e.g., by continuously monitor-
ing the writing speed, to infer the time it took to perform a
certain action, e.g., writing a resource to the cache.
In light of the arduous task of eradicating timing side-
channels from modern browsers, we argue that a server-side
solution is more appropriate.
In essence, the timing side-
channels exist because the browser allows web pages to in-
clude cross-origin resources that were not meant to be in-
cluded by an untrusted party. As such, mitigating the tim-
ing attacks presented in Section 3 has various similarities
with protecting against CSRF attacks. For both CSRF and
timing attacks, an adversary will typically need to trick the
browser in sending out speciﬁc requests to a vulnerable web-
site. In contrast to CSRF attacks, where the requests result
in a state-change of the logged in user, the requests that are
sent when a timing side-channel is exploited, are aimed for
resources that simply contain state-speciﬁc content. Conse-
quently, blocking illicit cross-origin requests allows a website
administrator to prevent an adversary from leveraging tim-
ing attacks against his website.
A well-known defense strategy against CSRF attacks, pro-
posed by Barth et al. [5], is to analyze the Referer and
Origin headers for endpoints that may trigger a modiﬁca-
tion of the user’s state. Unfortunately, it is not possible
to straightforwardly apply the same technique to prevent
timing attacks, because landing pages, i.e. web pages the
user lands on after clicking a link, may also contain state-
speciﬁc content. When navigating to such a landing page,
the Referer header in the request will be set to the URL of
a remote, and possibly untrusted, web page. As a result, it
becomes impossible for a website to diﬀerentiate between le-
gitimate requests to a landing page, and requests that were
triggered from a malicious web page.
We propose to employ a placeholder web page as an addi-
tional mechanism to address this obstacle. More precisely,
when the Referer header is missing, or originates from an
untrusted domain, the placeholder is served instead of the
actual content. When loaded, this placeholder page initiates
an authenticated XHR request to the URL that was initially
requested. Since the Origin header in this request is set to
the same domain, the web server can verify that this is a
same-origin request and will send the actual resource. When
the XHR request completes, the placeholder writes the con-
tent to the DOM, and the actual page content is loaded. All
requests that originate from this page load, e.g. images that
are included by img elements, will have the Referer header
set to the current URL, and thus will be permitted by the
web server. Because only same-origin requests are allowed,
an attacker will not be able to trick a victim into loading a
state-dependent resource from the protected website.
Limitations.
As Barth et al. indicate, requests that lack a Referer header,
something that may happen out of privacy concerns, pose a
conundrum: either the website accepts the request, render-
ing the defense ineﬀective, or rejects it, which may prevent
legitimate users from accessing the website. In our defense
scenario, the check of the Referer header can only pass if the
domain matches the protected domain. As such, the Ref-
erer header only needs to be present in same-origin requests.
Additionally, because no sensitive information is leaked in
these same-origin requests, there is no reason for browsers,
extensions or network conﬁgurations to omit the Referer
header for these requests.
By design, this defense mechanism prohibits cross-origin
web pages from including resources of the protected website.
However, several legitimate cases exist where a website may
want to allow certain resources to be included by other web-
sites. This poses a problem when a non-HTML resource, e.g.
a dynamically generate image, is included cross-origin, and
lacks the Referer header. In this case, the defense mecha-
nism will be unable to uncover which domain triggered the
request, and will not be able to serve the placeholder, as no
HTML content will be rendered. As a result, the including
website will need to resort to an alternative way of loading
the image, for instance by using XHR in combination with
the CORS mechanism.
6. RELATED WORK
Timing attacks are one of the oldest types of side-channel
attacks in computer systems, ﬁrst introduced almost two
decades ago. In the context of the web, previous work fo-
cused mainly on the network download time [7], or the pres-
ence of certain resources in the cache [12] as timing side-
channels. We believe this paper is the ﬁrst to present web-
based timing attacks that leverage timing side-channels in
various browser features to estimate the size of a cross-origin
resource, regardless of a victim’s network condition. In ad-
dition, we extend prior research on the potential privacy-
intrusive consequences of timing attacks. Previous research
has indicated that cross-site timing attacks can be used to
obtain the number of products in a victim’s shopping bas-
ket, or to uncover the websites a victim recently visited, or
is currently logged in at. In our research, we extended prior
work by describing how an adversary can employ various
attacks in the modern web to obtain private and personal
information, such as age, gender, location, and personal in-
terests, based on the state of an unwitting visitor. In the
rest of this section, we review related work on all types of
timing attacks in the context of the web, and describe other
side-channel leaks in browsers that threaten a user’s security
and privacy.
6.1 Timing attacks in the web
In their research, Bortz et al. introduced the notion of two
types of timing attacks: direct timing attacks, and cross-site
timing attacks [7]. Other researchers mainly focused on the
former type, where an adversary tries to extract secret infor-