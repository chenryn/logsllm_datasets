$L74639: 
    mov  
esp, DWORD PTR __$SEHRec$[ebp] 
    push  OFFSET FLAT:$SG74621 ; 'access violation, can''t recover' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; inner try block exited. set previous try level back to 0 
$L74615: 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -1 ; outer try block exited, set previous try level back to -1 
    jmp  
SHORT $L74633 
; outer block filter: 
$L74634: 
$L74651: 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov  
edx, DWORD PTR [ecx] 
    mov  
eax, DWORD PTR [edx] 
    mov  
DWORD PTR $T74642[ebp], eax 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    push  ecx 
    mov  
edx, DWORD PTR $T74642[ebp] 
    push  edx 
    call  _filter_user_exceptions 
    add  
esp, 8 
$L74636: 
$L74649: 
    ret  
0 
; outer block handler: 
$L74635: 
    mov  
esp, DWORD PTR __$SEHRec$[ebp] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
688 
逆向工程权威指南（下册） 
    push  OFFSET FLAT:$SG74623 ; 'user exception caught' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -1 ; both try blocks exited. set previous try level back to -1 
$L74633: 
    xor  
eax, eax 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+8] 
    mov  
DWORD PTR fs:__except_list, ecx 
    pop  
edi 
    pop  
esi 
    pop  
ebx 
    mov  
esp, ebp 
    pop  
ebp 
    ret  
0 
_main     ENDP 
只要在 handler 中调用 printf()函数的指令那里设置一个断点，就可以观测到 SEH handler 的添加过程。 
或许 SEH 的内部处理机制与众不同。而这里我们可以看到 scope table 包含着两个元素： 
tracer.exe -l:3.exe bpx=3.exe!printf --dump-seh 
指令清单 68.9  tracer.exe 输出 
(0) 3.exe!printf 
EAX=0x0000001b EBX=0x00000000 ECX=0x0040cc58 EDX=0x0008e3c8 
ESI=0x00000000 EDI=0x00000000 EBP=0x0018f840 ESP=0x0018f838 
EIP=0x004011b6 
FLAGS=PF ZF IF 
* SEH frame at 0x18f88c prev=0x18fe9c handler=0x771db4ad (ntdll.dll!ExecuteHandler2@20+0x3a) 
* SEH frame at 0x18fe9c prev=0x18ff78 handler=0x4012e0 (3.exe!_except_handler3) 
SEH3 frame. previous trylevel=1 
scopetable entry[0]. previous try level=-1, filter=0x401120 (3.exe!main+0xb0) handler=0x40113b  
     (3.exe!main+0xcb) 
scopetable entry[1]. previous try level=0, filter=0x4010e8 (3.exe!main+0x78) handler=0x401100  
     (3.exe!main+0x90) 
* SEH frame at 0x18ff78 prev=0x18ffc4 handler=0x4012e0 (3.exe!_except_handler3) 
SEH3 frame. previous trylevel=0 
scopetable entry[0]. previous try level=-1, filter=0x40160d (3.exe!mainCRTStartup+0x18d)  
     handler=0x401621 (3.exe!mainCRTStartup+0x1a1) 
* SEH frame at 0x18ffc4 prev=0x18ffe4 handler=0x771f71f5 (ntdll.dll!__except_handler4) 
SEH4 frame. previous trylevel=0 
SEH4 header:     GSCookieOffset=0xfffffffe GSCookieXOROffset=0x0 
                EHCookieOffset=0xffffffcc EHCookieXOROffset=0x0 
scopetable entry[0]. previous try level=-2, filter=0x771f74d0 (ntdll.dll!  
     ___safe_se_handler_table+0x20) handler=0x771f90eb (ntdll.dll!_TppTerminateProcess@4+0x43) 
* SEH frame at 0x18ffe4 prev=0xffffffff handler=0x77247428 (ntdll.dll!_FinalExceptionHandler@16) 
SEH4  
在遭受缓冲区溢出攻击（请参见本书第 18 章第 2 节）以后，地址表 scope table 的地址可能被重写。
MSVC 2005 编译器为 SEH 帧增加了一些缓冲区溢出保护，把 SEH3 升级成了 SEH4。SEH4 的 scope table
表的指针会与 security cookie 进行异或运算，然后才被写到相应的数据结构里。此外 Scope table 新
增了一个双指针表头，这两个 EH cookie 指针都是 security cookies 的指针（GS cookies 只有在编译时
打开/GS 参数才会出现）。EH Cookie 的偏移量（offset）都是基于栈帧（EBP）的相对地址，其与
security_cookie 的异或运算结果会被保存在栈里，充当校验码。异常处理函数的加载过程会读取这个值
并检查其正确性。  
由于栈内的 security cookie 是一次性随机值，因此远程攻击者是无法事先预测这个值。 
在 SEH4 中最外层的级别（previous try level）是-2，而不是 SEH3 的-1。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
689 
这里列出了两个由 MSVC 2012 编译的 SEH4 函数。 
指令清单 68.10  MSVC 2012：一个 try 块的例子 
$SG85485 DB  
'hello #1!', 0aH, 00H 
$SG85486 DB  
'hello #2!', 0aH, 00H 
$SG85488 DB  
'access violation, can''t recover', 0aH, 00H 
; scope table: 
xdata$x  
SEGMENT 
__sehtable$_main DD 0fffffffeH  ; GS Cookie Offset 
    DD  
00H   
; GS Cookie XOR Offset 
    DD  
0ffffffccH  
; EH Cookie Offset 
    DD  
00H   
; EH Cookie XOR Offset 
    DD  
0fffffffeH  
; previous try level 
    DD  
FLAT:$LN12@main ; filter 
    DD  
FLAT:$LN8@main  ; handler 
xdata$x  
ENDS 
$T2 = -36   
; size = 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
690 
逆向工程权威指南（下册） 
_p$ = -32   
; size = 4 
tv68 = -28   
; size = 4 
__$SEHRec$ = -24 ; size = 24 
_main     PROC 
    push   ebp 
    mov  
ebp, esp 
    push  -2 
    push  OFFSET __sehtable$_main 
    push  OFFSET __except_handler4 
    mov  
eax, DWORD PTR fs:0 
    push  eax 
    add  
esp, -20 
    push  ebx 
    push  esi 
    push  edi 
    mov  
eax, DWORD PTR ___security_cookie 
    xor  
DWORD PTR __$SEHRec$[ebp+16], eax ; xored pointer to scope table 
    xor  
eax, ebp 
    push  eax   
   ; ebp ^ security_cookie 
    lea  
eax, DWORD PTR __$SEHRec$[ebp+8] ; pointer to VC_EXCEPTION_REGISTRATION_RECORD 
    mov  
DWORD PTR fs:0, eax 
    mov  
DWORD PTR __$SEHRec$[ebp], esp 
    mov  
DWORD PTR _p$[ebp], 0 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; previous try level 
    push  OFFSET $SG85485 ; 'hello #1!' 
    call  _printf 
    add  
esp, 4 
    mov  
eax, DWORD PTR _p$[ebp] 
    mov  
DWORD PTR [eax], 13 
    push  OFFSET $SG85486 ; 'hello #2!' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -2 ; previous try level 
    jmp  
SHORT $LN6@main 
; filter: 
$LN7@main: 
$LN12@main: 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov  
edx, DWORD PTR [ecx] 
    mov  
eax, DWORD PTR [edx] 
    mov  
DWORD PTR $T2[ebp], eax 
    cmp  
DWORD PTR $T2[ebp], -1073741819 ; c0000005H 
    jne  
SHORT $LN4@main 
    mov  
DWORD PTR tv68[ebp], 1 
    jmp  
SHORT $LN5@main 
$LN4@main: 
    mov  
DWORD PTR tv68[ebp], 0 
$LN5@main: 
    mov  
eax, DWORD PTR tv68[ebp] 
$LN9@main: 
$LN11@main: 
    ret  
0 
; handler: 
$LN8@main: 
    mov  
esp, DWORD PTR __$SEHRec$[ebp] 
    push  OFFSET $SG85488 ; 'access violation, can''t recover' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -2 ; previous try level 
$LN6@main: 
    xor  
eax, eax 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+8] 
    mov  
DWORD PTR fs:0, ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
691 
    pop  
ecx 
    pop  
edi 
    pop  
esi 
    pop  
ebx 
    mov  
esp, ebp 
    pop  
ebp 
    ret  
0 
_main     ENDP 
指令清单 68.11  MSVC 2012：两个 try 块的例子 
$SG85486 DB  
'in filter. code=0x%08X', 0aH, 00H 
$SG85488 DB  
'yes, that is our exception', 0aH, 00H 
$SG85490 DB  
'not our exception', 0aH, 00H 
$SG85497 DB  
'hello!', 0aH, 00H 
$SG85499 DB  
'0x112233 raised. now let''s crash', 0aH, 00H 
$SG85501 DB  
'access violation, can''t recover', 0aH, 00H 
$SG85503 DB  
'user exception caught', 0aH, 00H 
xdata$x     SEGMENT 
__sehtable$_main DD 0fffffffeH   
     ; GS Cookie Offset 
 DD    00H  
     ; GS Cookie XOR Offset 
 DD    0ffffffc8H  
     ; EH Cookie Offset 
 DD    00H  
     ; EH Cookie Offset 
 DD    0fffffffeH  
     ; previous try level for outer block 
 DD    FLAT:$LN19@main    ; outer block filter 
 DD    FLAT:$LN9@main     ; outer block handler 
 DD    00H  
     ; previous try level for inner block 
 DD    FLAT:$LN18@main    ; inner block filter 
 DD    FLAT:$LN13@main    ; inner block handler 
xdata$x ENDS 
$T2 = -40   
; size = 4 
$T3 = -36   
; size = 4 
_p$ = -32   
; size = 4 
tv72 = -28   
; size = 4 
__$SEHRec$ = -24 ; size = 24 
_main     PROC 
    push 
ebp 
    mov  
ebp, esp 
    push  -2 ; initial previous try level 
    push  OFFSET __sehtable$_main 
    push  OFFSET __except_handler4 
    mov  
eax, DWORD PTR fs:0 
    push  eax ; prev 
    add  
esp, -24 