upon the observation that their values, once altered, do not change
the outcomes of the test. Speci(cid:2)cally, we (cid:2)rst pick up from P or
D a permission vector (cid:151) a conjunction of the (cid:2)elds which makes
the test transaction either succeed or fail. Then, we examine every
permission (cid:2)eld on that vector. For a speci(cid:2)c (cid:2)eld, its content is
changed to all other values it can take one by one for checking
whether any of these changes also causes the vector to be moved
to the set other than its origin. For example, in Figure 2, once we
change ‘Yes’ at Line C3 to ‘No’, the (cid:2)eld that holds these values
will be moved from the permit set to the denial set. If this does
not happen to that (cid:2)eld for all the values it can take, and for every
vector from both sets that involves that (cid:2)eld, we conclude that its
value is not important for an access-control decision, and therefore
remove the (cid:2)eld from P and D. In this way, all the (cid:2)elds unrelated
to permission can be eliminated from both sets. As a result, the
permission structure can be represented as the disjunction of all the
vectors in P for allow and the disjunction from D for denial.
Discussion. As we described above, an internal node and its sub-
tree can be taken away from a con(cid:2)guration (cid:2)le during the rerun
to determine whether it is a permission (cid:2)eld. This, however, could
cause a subject or object (cid:2)eld to be removed when the (cid:2)eld happens
to be the node’s descendent. An example is ‘Allow’ in Figure 3.
When this happens, some permission vectors will no longer relate
to any subject or object in the con(cid:2)guration (cid:2)le.
In our research,
we drop all the vectors that are not associated with objects, because
they do not re(cid:3)ect the targets of access control. On the other hand, a
permission not attached to a speci(cid:2)ed subject can be interpreted as
being applied to the unknown (or anonymous) user, and therefore
is kept in our permission structures.
Our permission analysis technique can also help detect special
subjects such as ‘All’. Such subjects may not be detected by
data(cid:3)ow analysis, and instead, they could be annotated as candi-
date permission (cid:2)elds because they could affect branch conditions
of a transaction, as a permission (cid:2)eld does. The semantic meanings
of these (cid:2)elds can be uncovered in the step for detecting alternative
values, which observes that the values these (cid:2)elds accept are actu-
ally used like subjects: for example, they can be the parameter for
gethostbyname().
3.4 Generation of Speciﬁcation Languages
The last step of Con(cid:2)gRE is to convert the knowledge about
subjects, objects and permission structures acquired from previ-
ous steps into a means for identifying security policies speci(cid:2)ed
in other instances of the applications. This is achieved in our re-
search through automatically generating a language that parses the
con(cid:2)guration (cid:2)les of these instances to recognize the (cid:2)elds related
to a policy de(cid:2)nition, which are used to identify a security policy.
Since the language is for scanning a con(cid:2)guration (cid:2)le, it should
include a suf(cid:2)cient amount of syntactic information for connecting
semantically related (cid:2)elds together. To generate such a language,
our approach correlates two connected nodes in a semantic tree
with delimiters, and then creates a BNF grammar for recognizing
these nodes’ semantic relations, as described by the tree, from their
syntactic relations, as revealed by these delimiters. For example,
consider the semantic tree in Figure 2. Two semantically-related
nodes ‘FileAccess’ and ‘Yes’ are connected through the delim-
iter ‘nn’, and ‘FileAccess’ is further linked to ‘Directory’
through a delimiter pair ‘f’ and ‘g’. The language we generated for
this example, as illustrated in the Figure, describes such a relation
for every pair of connected nodes in the tree.
Preprocessing. To prepare for language generation, Con(cid:2)gRE makes
the following moves. For every node annotated as subject, object
or con(cid:2)rmed permission, our approach (cid:2)rst extracts from the se-
mantic tree all its ancestor nodes to build a new tree. The tree is
further generalized: the speci(cid:2)c contents of subject or object nodes
are removed and alternative values for leaves are added.
In ad-
dition, the subtrees of the root’s child nodes can also be merged
if two such nodes are identical. For example, Figure 3 illustrates
a subtree built from a merger between the subtrees for directory
‘/web/doc1’ and ‘/web/doc2’. Our approach further exam-
ines every edge of the tree and tries to identify a set of delimiters
that connect its two end nodes: for example, in Figure 3, the new
line character ‘nn’ connects all the (cid:2)elds on a line together, and
the paired delimiters, ‘Directory’ and ‘h/Directory’, links
the node ‘hDirectory’ with ‘Order’, ‘Allow’ and ‘Deny’.
If there exist multiple such delimiters or pairs, we select the one
with the shortest range, which is de(cid:2)ned as the interval the ap-
plication scanned for the delimiter. In some cases, the syntactic
relation between two nodes is established by more than one delim-
iter or delimiter pair. Consider the example in Figure 2. The node
‘Directory’ is connected to ‘IPPrefix’ and ‘FileAccess’
by multiple delimiters: (cid:2)rst, ‘nn’ is used to combine ‘Directory’,
‘/usr/www’ and ‘f’ togather, and then, the paired delimiters ‘f’
and ‘g’ connects the root to other (cid:2)elds. Con(cid:2)gRE adopts an al-
gorithm that (cid:2)rst tries to establish a direct relation between two
nodes, and if fails, continues to seek indirect relations: it (cid:2)nds the
delimiter whose range includes the parent node of these two nodes
(‘nn’ in the example); then, our approach searches within the range
for the head of paired delimiters that can be used to link the parent
node to its child. Such delimiters are annotated to the edge. In ad-
dition to the delimiters that embrace two nodes, we also add onto
the edge the delimiters between these two nodes. As a result, we
get a tree for language generation, which we call knowledge tree or
K-tree. Figure 2 gives an example.
Language generation. From a K-tree, Con(cid:2)gRE automatically
generates a speci(cid:2)cation language. The grammar of the language
can be described as a 3-tuple h(cid:6); V; Ri, where (cid:6) is a (cid:2)nite set of
terminal symbols, V a set of nonterminals and R a set of produc-
tion relations. Con(cid:2)gRE (cid:2)rst adds the delimiters and the values of
the (cid:2)elds in the K-tree to (cid:6). Note that for the (cid:2)elds representing
subjects or objects, their speci(cid:2)c contents are removed and replaced
with labels subject or object. Also placed into (cid:6) is a special ter-
minal, " for empty.
The rest of the grammar is built through a breadth-(cid:2)rst traver-
sal of the K-tree. Starting from the root n0;0, our approach des-
ignates a nonterminal Ai;j to ni;j, the jth node on the ith level
of the K-tree, if the node is not a leaf. The production relation of
the symbol is in the following form: Ai;j ! Si;j Ui;j Ti;j, where
Si;j represents a start symbol, Ui;j is a nonterminal for describ-
ing the relations among the non-leaf children of ni;j, and Ti;j is
an end symbol. Con(cid:2)gRE determines the start symbol using the
(cid:2)eld of node ni;j, the leaf directly attached to that node and the
delimiters connecting them. If there is a pair of delimiters that em-
braces the node’s subtree, the head of the pair also becomes part
of Si;j. The end symbol Ti;j is a delimiter (or the tail of a de-
limiter pair) that connects the node to all its children. The pro-
duction relation of Ui;j is determined by the relations among the
non-leaf children of ni;j as described by the permission structure.
For the example in Figure 3, let A2;1, A2;2 and A2;3 be the nonter-
minals for ‘Order’, ‘Allow’ and ‘Deny’ respectively; according
to the permission vectors that contain the combinations of the (cid:2)elds
(‘Order’, ‘Allow’), (‘Order’, ‘Deny’), (‘Order’), (‘Allow’),
(‘Deny’) and empty, following production relation is constructed:
U10 ! A2;1A2;2jA2;1A2;3jA2;1jA2;2jA2;3j". For simplicity of
presentation, we also assign a nonterminal to the leaf with multiple
alternative values. This process continues until every node of the
K-tree has been described by the language.
As an example, we present in Figure 2 a grammar for the con(cid:2)g-
uration of the HTTP server. The grammar is constructed in the fol-
lowing way. After Con(cid:2)gRE encounters the node ‘Directory’,
it gives the node a nonterminal A1;0, determines the start symbol
S1;0 !Directory object f nn, the end symbol T1;0 !‘g’,
and the production of U1;0 that describes the relation among the
node’s internal child nodes. These children include ‘IPPrefix’
and ‘FileAccess’, which are given new nonterminals A2;0 and
A2;1 respectively. The production rule is U1;0 ! A2;0IA2;1,
where I is a nonterminal for ignoring all delimiter terminals be-
tween two nonterminals. Note this is suf(cid:2)cient for skipping all
the con(cid:2)guration settings unrelated to access control, because a
lexicon analyzer used in a language parser can automatically by-
pass all the characters not in the terminal set. ‘IPPrefix’ and
‘FileAccess’ only have leaf nodes as their children, and the end
symbols associated with them is ‘nn’. The production of A2;1 also
involves a nonterminal B, as the child of ‘FileAccess’ has al-
ternative values ‘Yes’ and ‘No’. The grammar for Apache con(cid:2)g-
urations is described in Section 4.
Conﬁguration scanning. A language can be conveniently con-
verted into a con(cid:2)guration scanner using the standard parser gener-
ator such as BISON [12]. Such a scanner recognizes terminals from
a con(cid:2)guration (cid:2)le using a lexicon analyzer such as FLEX [1], and
then identi(cid:2)es the access control components related to a policy
de(cid:2)nition. These components are used to determine an access con-
trol policy.
4. EVALUATION
In this section, we describe our experimental study of Con(cid:2)gRE.
The objective of this study is to evaluate the effectiveness of our
technique in recovering the speci(cid:2)cations for applications’ security
con(cid:2)gurations. To this end, we ran our prototype system against 6
real applications as demonstrated in Table 1. Our study involves ex-
traction of the semantic information of these applications’ access-
control settings, generation of speci(cid:2)cation languages and evalua-
tion of the con(cid:2)guration scanners automatically constructed from
the languages. The experiments were conducted on a Linux work-
station installed with Rehat Enterprise 4. The host has 2.40GHz
Core 2 Duo processor and 3GB memory. Due to the space limit,
here we use Apache and Bftpd as two examples to explicate this
apache
D: Directory paired delimiter
F: Files paired delimiter
\n (cid:148)
object
D
D
Order
\n  space
<Directory
D
Allow
\n  space \n  space
from
Deny
from
space
subject
space
subject
allow,deny
deny,allow
mutual-failure
\n (cid:148)
<Files
F
object
Order
\n  space
allow,deny
deny,allow
mutual-failure
F
Allow
\n  space
from
space
subject
bftpd
bftpd.conf     
C1   global{
C2       DENY_LOGIN=(cid:148)no(cid:148)
C3       RATIO=(cid:148)none(cid:148)
            ...
C4   }
C5    user temp{
C6        ROOTDIR=(cid:148)/root/temp(cid:148)
C7        DENY_LOGIN=(cid:148)no(cid:148)
             ...
C8    }
DENY_LOGIN
global
\n  {}
\n   {}
user
\n  {} \n  {}
\n  {}
RATIO
\n  = (cid:148)
none
DENY_LOGIN
\n  =(cid:148)
yes
no
ROOTDIR
subject
\n  =(cid:148)
object
\n  =(cid:148)
yes
no
Figure 4: K-trees for Apache and Bftpd.
study. The results for other applications can be found in a longer
version of the paper [28].
Programs
Apache
pServ
Null-HTTPd
vsftpd
Bftpd
Napster
Test req
Table 1: Effectiveness of ConﬁgRE.
Types
HTTPD GET
HTTPD GET
HTTPD GET
FTPD
FTPD
P2P