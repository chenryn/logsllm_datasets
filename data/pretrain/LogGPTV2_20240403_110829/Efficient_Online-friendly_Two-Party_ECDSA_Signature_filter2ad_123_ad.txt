where the parameters of elliptic curve (G; 𝑃; 𝑞) are implicit public
parameters. We use the standard Schnorr proof [29] for R𝐷𝐿, ap-
ply the Fiat-Shamir [18] transformation to get a non-interactive
ZKPoK. Denote by nizkPoK the proof generator and Verifzk the
verify algorithm for R𝐷𝐿.
3 TWO-PARTY SIGNATURES FOR ECDSA
In this section, we present a two-party protocol 2ECDSA. We first
describe the distributed key generation phase that is executed once,
followed by the signing phase which may run multiple times. The
process is also illustrated in Fig. 3.
Let MtA be the multiplicative-to-additive functionality, nizkPoK
be the NIZK proof for discrete logarithm relation R𝐷𝐿. Let H :
{0, 1}∗ → {0, 1}𝜅 be a hash function.
Although we make a logical presentation of the signing proce-
dure in four phases, in the actual protocol they are intertwined. We
could reorder the messages in the instantiations such that messages
of MtA from 𝑃2 to 𝑃1 come first, followed by all messages from 𝑃1
to 𝑃2, which results in a 3-pass signing protocol.
Distributed Key Generation Phase Keygen(G, 𝑃, 𝑞).
Given the joint input (G, 𝑃, 𝑞) and security parameter 𝜆:
(1) 𝑃1’s first message:
• 𝑃1 chooses a random 𝑥1 ← Z𝑞, and computes 𝑄1 = 𝑥1 · 𝑃
and nizk1 = nizkPoK(𝑄1, 𝑥1)
• 𝑃1 sends f1 = H(𝑄1, nizk1) to 𝑃2
(2) 𝑃2’s first message:
(3) 𝑃1’s second message:
• 𝑃2 chooses a random 𝑥2 ← Z𝑞, and computes 𝑄2 = 𝑥2 · 𝑃
and nizk2 = nizkPoK(𝑄2, 𝑥2)
• 𝑃2 sends 𝑄2, nizk2 to 𝑃1
• On receiving 𝑄2, nizk2 from 𝑃2, 𝑃1 verifies nizk2. If Ver-
ifzk(nizk2)=0, abort
• Else, 𝑃1 sends 𝑄1, nizk1 to 𝑃2
• On receiving 𝑄1, nizk1 from 𝑃1, 𝑃2 verifies nizk1.
• If f1 ≠ H(𝑄1, nizk1) or Verifzk(nizk1)=0, abort.
• 𝑃1 computes 𝑄 = 𝑄1 + 𝑄2, stores (𝑄, 𝑥1, 𝑄1, 𝑄2).
• 𝑃2 computes 𝑄 = 𝑄2 + 𝑄1, stores (𝑄, 𝑥2, 𝑄1, 𝑄2).
(5) Compute output:
(4) 𝑃2’s verification:
Distributed Sign Phase Sign(sid, 𝑚). They begin with the session
id sid, 𝑚 the message to be signed, and additive share of secret key.
The protocol is divided into 4 logical steps, and only the last one is
online.
• 𝑃1 has (𝑄, 𝑥1, 𝑄1, 𝑄2) as the output of Keygen, message 𝑚
and session id sid.
• 𝑃2 has (𝑄, 𝑥2, 𝑄1, 𝑄2) as the output of Keygen, message 𝑚
and session id sid.
(1) Commitment of 𝑃2’s nonce:
• 𝑃2 chooses a random 𝑘2 ← Z𝑞, and computes 𝑅2 = 𝑘2 · 𝑃
with nizk3 = nizkPoK(𝑅2, 𝑘2)
• 𝑃2 computes and sends f2 = H(𝑅2, nizk3) to 𝑃1.
(2) MtA and Consistency Check:
• 𝑃1 chooses a random 𝑥′1 ← Z𝑞, and computes 𝑄′1 = 𝑥′1 · 𝑃.
• 𝑃1 and 𝑃2 invoke the MtA functionality with input 𝑥′1 and
𝑘2 respectively and receives 𝑡𝐴, 𝑡𝐵 such that
𝑡𝐴 + 𝑡𝐵 = 𝑥′1𝑘2 mod 𝑞.
• 𝑃1 chooses a random 𝑟1 ← Z𝑞, and computes 𝑐𝑐 := 𝑡𝐴 +
𝑥′1𝑟1 − 𝑥1 mod 𝑞 and sends (𝑟1, 𝑐𝑐) to 𝑃2.
• 𝑃2 checks the consistency by checking
?
= (𝑟1 + 𝑘2) · 𝑄′1 − 𝑄1.
(𝑡𝐵 + 𝑐𝑐) · 𝑃
• if the consistency check passes, 𝑃2 computes
𝑥′2 = 𝑥2 − (𝑡𝐵 + 𝑐𝑐) mod 𝑞.
(3) Nonce Key Exchange:
• 𝑃1 chooses a random 𝑘1 ← Z𝑞, computes and sends 𝑅1 =
𝑘1 · 𝑃 with nizk4 = nizkPoK(𝑅1, 𝑘1) to 𝑃2.
• 𝑃2 aborts if Verifzk(nizk4)=0, otherwise sends (𝑅2, nizk3)
to 𝑃1 and computes 𝑅 = (𝑟𝑥, 𝑟𝑦) = (𝑘2+𝑟1)·𝑅1, and 𝑟 = 𝑟𝑥
mod 𝑞.
• 𝑃1 aborts if f2 ≠ H(𝑅2, nizk3) or Verifzk(nizk3)=0, other-
wise computes 𝑅 = (𝑟𝑥, 𝑟𝑦) = 𝑘1 · 𝑅2 + 𝑘1𝑟1 · 𝑃 and 𝑟 = 𝑟𝑥
mod 𝑞.
(4) Online Signature:
• Given 𝑚, 𝑃2 computes ℎ = 𝐻(𝑚) and sends
𝑠2 = (𝑘2 + 𝑟1)−1(ℎ + 𝑟𝑥′2) mod 𝑞
to 𝑃1.
• On receiving 𝑠2, 𝑃1 computes
𝑠 = 𝑘−1
1 (𝑠2 + 𝑟𝑥′1) mod 𝑞.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea563• 𝑃1 aborts if Verify(𝑚; (𝑟, 𝑠)) = 0, else returns (𝑟, 𝑠) as the
final signature.
Correctness. By the definition of 𝑥′2, we have
𝑥′2 = 𝑥2 − (𝑡𝐵 + 𝑐𝑐)
= 𝑥2 − (𝑡𝐵 + 𝑡𝐴 + 𝑥′1𝑟1 − 𝑥1)
= 𝑥2 − (𝑥′1𝑘2 + 𝑥′1𝑟1) + 𝑥1
over Z𝑞, thus 𝑥′1(𝑟1 + 𝑘2) + 𝑥′2 = 𝑥1 + 𝑥2 mod 𝑞.
Let 𝑘 := 𝑘1(𝑟1 + 𝑘2) mod 𝑞, then 𝑅 = 𝑘 · 𝑃. We have
(cid:2)
1 (𝑟1 + 𝑘2)−1(cid:2)𝐻(𝑚) + 𝑟(𝑥′2 + 𝑥′1𝑟1 + 𝑥′1𝑘2)
(𝑟1 + 𝑘2)−1(𝐻(𝑚) + 𝑟𝑥′2) + 𝑟𝑥′1
(cid:3)
(cid:3)
𝑠 = 𝑘−1
1 (𝑠2 + 𝑟𝑥′1)
= 𝑘−1
1
= 𝑘−1
= 𝑘−1
= 𝑘−1
1 (𝑟1 + 𝑘2)−1 [𝐻(𝑚) + 𝑟(𝑥1 + 𝑥2)]
1 (𝑟1 + 𝑘2)−1(𝐻(𝑚) + 𝑟𝑥)
over Z𝑞. Thus, (𝑟, 𝑠) is a valid signature of 𝑚.
3.1 Security of 2ECDSA
Theorem 3.1. The two-party 2ECDSA protocol in Figure 3 securely
computes FECDSA in the random oracle model in the presence of a
malicious static adversary under the real/ideal definition. Concretely,
there exists a simulator for the scheme such that any probabilistic
polynomial time adversary, who corrupted 𝑃1 or 𝑃2, can distinguish a
real execution of the protocol from a simulated one with only negligible
probability.
We present a sketch of the proof here. Please refer to Appendix
B for the full proof.
Simulator S could only access an ideal functionality FECDSA for
computing ECDSA signatures. All S learns in the ideal world is
the public key 𝑄 generated in the key generation phase and several
signatures (𝑟, 𝑠) for messages 𝑚 of its choice in the signing phase. In
the real world, the adversary, having either corrupted 𝑃1 or 𝑃2 will
also see all the interactions with the non-corrupted party. Thus S
must be able to simulate the adversary’s view of these interactions,
while only knowing the expected output.
The proof proceeds in two cases: the adversary corrupts 𝑃1, and
the adversary corrupts 𝑃2.
S simulates 𝑃2- Corrupted 𝑃1. In the key generation phase, after
receiving public key 𝑄 from FECDSA and receiving f1 from A, S
could extract 𝑄1, nizk1 such that f1 = H(𝑄1, nizk1) in the random
oracle model with overwhelming probability. Furthermore, if nizk1
is accepted, there exists knowledge extractor to successfully output
𝑥1. Then, S computes 𝑄2 = 𝑄 − 𝑄1 and generates nizk2 by query-
ing the zero knowledge simulator Sim. The indistinguishability
between the simulated and real key generation is obvious.
During the signing phase, S could receive a signature (𝑟, 𝑠) of
message 𝑚 from FECDSA, and recover 𝑅 via verification algorithm.
(1) S invokes A with a totally random f2.
(2) S interacts with A on behave of FMtA and in doing so re-
ceives its input 𝑥′1 and output shares 𝑡𝐴. S checks the consis-
?
tency of 𝑄′1, 𝑟1, 𝑐𝑐 received from A by verifying 𝑄′1
= 𝑥′1 · 𝑃
and 𝑐𝑐
?
= 𝑡𝐴 + 𝑥′1𝑟1 − 𝑥1 mod 𝑞.
(3) On receiving 𝑅1, nizk4, S sets 𝑅2 = 𝑘−1
1
· 𝑅 − 𝑟1 · 𝑃 (where 𝑘1
is extracted from accepting proof nizk4). S generates nizk3
to A by querying zero knowledge simulator Sim. Then, it
puts (𝑅2||nizk3, f2) into the hash list of H to indicate that
f2 = H(𝑅2, nizk3).
(4) After extracting 𝑘1 from nizk4, 𝑠2 = 𝑘1𝑠 − 𝑥′1𝑟 mod 𝑞 could
be easily computed from 𝑠, 𝑥′1 and 𝑘1.
Note that S would abort if any of the checks does not pass.
The difference between a real execution and the simulation is
how 𝑅2 and 𝑠2 are computed, and the consistency of 𝑄′1 and 𝑥′1
is check. In the simulation, 𝑅2 is 𝑘−1
· 𝑅 − 𝑟1 · 𝑃 whereas in the
1
real execution 𝑅2 = 𝑘2 · 𝑃 where 𝑘2 ← Z𝑞. Since FECDSA samples
𝑅 uniformly at random from G, the distribution in both cases is
identical. Ext extracts 𝑘1 with knowledge error 1/𝑞. Conditional on
the correctness of 𝑘1, in the simulation
𝑠2 = 𝑘1𝑠 − 𝑥′1𝑟 = (𝑟1 + 𝑘2)−1(𝐻(𝑚) + 𝑟𝑥′2) mod 𝑞
which is identical to that in the real execution. The conditions
𝑄′1 = 𝑥′1 · 𝑃 and 𝑐𝑐 = 𝑡𝐴 + 𝑥′1𝑟1 − 𝑥1 mod 𝑞 in the simulation are
equivalent to (𝑡𝐵 + 𝑐𝑐) · 𝑃 = (𝑟1 + 𝑘2) · 𝑄′1 − 𝑄1 in the real game.
This implies that the view of a corrupted 𝑃1 in the real execution
is indistinguishable from that of the simulation, i.e., the advantage of
any PPT adversary who corrupts 𝑃1 to distinguish the real execution
and simulated execution given by S is negligible.
S simulates 𝑃1- Corrupted 𝑃2. After receiving public key 𝑄
from FECDSA, S invokes A with a totally random f1, and receives
(𝑄2, nizk2). After extracting 𝑥2 from the accepting proof nizk2, S
computes 𝑄1 = 𝑄 − 𝑄2 and nizk1 by querying zero knowledge
simulator Sim. Then S fixes the computation of f1 with random
oracle, and sends 𝑄1, nizk1 to A. The indistinguishability between
the simulated and real key generation is obvious.
During the signing phase, S could receive a signature (𝑟, 𝑠) of
message 𝑚 from FECDSA, and recover 𝑅 via verification algorithm.
(1) S invokes A with Sign(sid, 𝑚) and receives f2 from A. Then,
S could extract 𝑅2, nizk3 and further 𝑘2 such that f2 = H(𝑅2, nizk3)
and 𝑅2 = 𝑘2 · 𝑃 with overwhelming probability with the help
of random oracle and knowledge extractor (if the proof is
accepted).
(2) S interacts with A on behave of FMtA and in doing so re-
ceives its input 𝑘′2 and output shares 𝑡𝐵. S samples a random
𝑟1 ← Z𝑞 and a random 𝑐𝑐 ← Z𝑞, computes
𝑄′1 = (𝑘′2 + 𝑟1)−1[(𝑡𝐵 + 𝑐𝑐) · 𝑃 + 𝑄1],
and sends 𝑄′1, 𝑟1, 𝑐𝑐 to A.
zero knowledge simulator Sim, and sends them to A.
of 𝑘′2 with 𝑅2
(3) S computes 𝑅1 = (𝑟1+𝑘2)−1·𝑅, generates nizk4 by querying
(4) On receiving (𝑅2, nizk3) from A, S checks the consistency
(5) S checks the correctness of 𝑠2 by verifying
𝑠2 · (𝑟1 · 𝑃 + 𝑅2)
?
= ℎ · 𝑃 + 𝑟 · (𝑥2 − 𝑡𝐵 − 𝑐𝑐) · 𝑃,
where ℎ = 𝐻(𝑚). If all the check conditions pass, S would
output (𝑟, 𝑠) as output.
Note that S would abort if any of the checks does not pass.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea564Figure 3: Two-party protocol 2ECDSA from a single MtA.
𝑃1𝑃2............................................Keygen(G,𝑃,𝑞)............................................𝑥1←Z𝑞,𝑄1=𝑥1·𝑃nizk1:=nizkPoK(𝑄1,𝑥1)f1:=H(𝑄1,nizk1)−−−−−−−−−−−−−−−−−−−−−−−−−−−−→𝑥2←Z𝑞,𝑄2=𝑥2·𝑃ifVerifzk(nizk2)=0,return⊥𝑄2,nizk2←−−−−−−−−−−−−−−−−−−−−−−−−−−−−nizk2:=nizkPoK(𝑄2,𝑥2)𝑄1,nizk1−−−−−−−−−−−−−−−−−−−−−−−−−−−−→iff1≠H(𝑄1,nizk1),return⊥ifVerifzk(nizk1)=0,return⊥𝑄=𝑄1+𝑄2𝑄=𝑄1+𝑄2..............................................Sign(sid,𝑚)..............................................(1)Commit𝑃2’sNonce𝑘2←Z𝑞,𝑅2=𝑘2·𝑃f2:=H(𝑅2,nizk3)←−−−−−−−−−−−−−−−−−−−−−−−−−−−−nizk3:=nizkPoK(𝑅2,𝑘2)(2)MtAandConsistency𝑥′1←Z𝑞,𝑄′1=𝑥′1·𝑃𝑥′1−−−−−−−→𝑘2←−−−−−−−MtA𝑡𝐴←−−−−−−−𝑡𝐵−−−−−−−→𝑟1←Z𝑞𝑐𝑐=𝑡𝐴+𝑥′1𝑟1−𝑥1mod𝑞𝑄′1,𝑟1,𝑐𝑐−−−−−−−−−−−−−−−−−−−−−−−−−−−−→if(𝑡𝐵+𝑐𝑐)𝑃=(𝑟1+𝑘2)𝑄′1−𝑄1𝑥′2=𝑥2−(𝑡𝐵+𝑐𝑐)mod𝑞(3)NonceKE𝑘1←Z𝑞,𝑅1=𝑘1·𝑃nizk4:=nizkPoK(𝑅1,𝑘1)𝑅1,nizk4−−−−−−−−−−−−−−−−−−−−−−−−−−−−→ifVerifzk(nizk4)=0,return⊥iff2≠H(𝑅2,nizk3),return⊥𝑅2,nizk3←−−−−−−−−−−−−−−−−−−−−−−−−−−−−𝑅:=(𝑟1+𝑘2)·𝑅1ifVerifzk(nizk3)=0,return⊥𝑅:=𝑘1·𝑅2+𝑘1𝑟1·𝑃(4)OnlineSign𝑠=𝑘−11(𝑠2+𝑟𝑥′1)mod𝑞𝑠2←−−−−−−−−−−−−−−−−−−−−−−−−−−−−𝑠2=(𝑟1+𝑘2)−1(𝐻(𝑚)+𝑟𝑥′2)mod𝑞ifVerify(𝑚;(𝑟,𝑠))=0,return⊥elsereturn(𝑟,𝑠)Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea565The difference between a real execution and the simulation is
how 𝑅1 and 𝑄′1 are computed, and the condition that (𝑟, 𝑠) is output
or not.
In the simulation, 𝑅1 is 𝑅1 = (𝑟1 + 𝑘2)−1 · 𝑅 whereas in the
real execution 𝑅1 = 𝑘1 · 𝑃 where 𝑘1 ← Z𝑞. Since FECDSA samples
𝑅 uniformly at random from G, the distribution in both cases is
identical. In the simulation, 𝑄′1 is (𝑘′2 + 𝑟1)−1[(𝑡𝐵 + 𝑐𝑐) · 𝑃 + 𝑄1]
whereas in the real execution 𝑄′1 = 𝑥′1 · 𝑃 for 𝑥′1 ← Z𝑞. Since 𝑟1 and
𝑐𝑐 are sampled randomly and the consistency check always passes,
the distribution in both cases is identical.
In the real execution, the Verify algorithm checks that 𝑠 · 𝑅
ℎ · 𝑃 + 𝑟 · 𝑄, which holds if and only if the following holds,
?
=
𝑃1
Setup
Multiplication