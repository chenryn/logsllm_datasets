# Title: PrivateDrop: Practical Privacy-Preserving Authentication for Apple AirDrop

## Authors:
- Alexander Heinrich
- Matthias Hollick
- Thomas Schneider
- Milan Stute
- Christian Weinert

## Abstract
Apple's offline file-sharing service, AirDrop, is integrated into over 1.5 billion end-user devices globally. We have identified two design flaws in the underlying protocol that allow attackers to discover the phone numbers and email addresses of both sender and receiver devices. To address these vulnerabilities, we explore the use of private set intersection (PSI) for mutual authentication, a technique similar to contact discovery in mobile messengers. We propose a novel, optimized PSI-based protocol called PrivateDrop, which addresses the specific challenges of offline, resource-constrained operation and integrates seamlessly into the current AirDrop protocol stack. Our native implementation for iOS and macOS demonstrates that PrivateDrop maintains AirDrop’s exemplary user experience with an authentication delay well below one second. We responsibly disclosed our findings to Apple and have open-sourced our PrivateDrop implementation.

## 1. Introduction
Apple AirDrop, a file-sharing service integrated into over 1.5 billion end-user devices worldwide, has been operational since 2011. It operates entirely offline, using a direct Wi-Fi connection in combination with Bluetooth Low Energy (BLE) between two devices. We discovered two severe privacy vulnerabilities in the underlying authentication protocol. Specifically, these flaws allow an adversary to learn contact identifiers (phone numbers and email addresses) of nearby AirDrop senders and receivers. The vulnerabilities stem from the exchange of hash values of contact identifiers during the discovery process, which can be easily reversed using brute-force or dictionary attacks.

### Challenge
During authentication, two AirDrop devices perform a form of contact discovery to determine if they are mutual contacts, i.e., whether they have each other's contact information stored in their address books. A connection is deemed authentic only if this check is positive. Privacy-preserving contact discovery is often addressed via PSI, a cryptographic protocol that allows two parties to securely compute the intersection of their input sets without leaking additional data. PSI is already used in real-world applications, such as compromised credential checking in Google Chrome and calculating ad conversion rates with Google.

However, the AirDrop scenario presents unique challenges:
- The solution must run completely offline without third-party server support.
- It must handle malicious parties that may lie about their address book entries or contact identifiers.
- It must operate on mobile devices with limited energy and computational resources.
- It must preserve the user experience by not introducing noticeable authentication delays.

### Our Contributions
We study the applicability of PSI for realizing private mutual authentication in AirDrop. We systematically explore all possible design options and available building blocks from the literature. Our final solution, PrivateDrop, is based on a Diffie-Hellman-style PSI protocol, which is secure even against malicious actors. We apply a two-way variant of this protocol and optimize online performance by minimizing communication rounds and allowing precomputation of expensive operations. To handle malicious inputs, we propose using signed PSI inputs that complement AirDrop’s current validation records and can be issued using Apple’s existing certification infrastructure.

We integrate PrivateDrop into the original AirDrop protocol stack, including the BLE-based discovery mechanism and the HTTPS-based authentication phase. We implement both the original AirDrop protocol and our PrivateDrop extension in native code for iOS and macOS, which we have open-sourced on GitHub.

In an extensive performance evaluation, we demonstrate that PrivateDrop incurs negligible overhead. Specifically, the authentication delay remains well below one second, even for large address books with over 10,000 entries, which humans perceive as an "immediate response." In realistic scenarios, the delay stays below 500 ms, only a 2x increase compared to the original insecure AirDrop protocol.

We disclosed both vulnerabilities and our proposed mitigation to the Apple Product Security team and are awaiting their feedback. Our contributions can be summarized as follows:
- We discovered and disclosed two distinct design flaws in the AirDrop authentication protocol that enable an attacker to learn contact identifiers (phone numbers and email addresses) of nearby devices.
- We propose PrivateDrop, a new PSI-based mutual authentication protocol that integrates seamlessly into the current AirDrop protocol stack. Our design is based on a Diffie-Hellman-style PSI protocol and protects against malicious adversaries and inputs.
- We re-implement the original AirDrop protocol stack, integrate our PSI-based protocol for iOS and macOS, and open-source our code.
- We experimentally show that PrivateDrop provides immediate responses with less than one-second authentication delay.

## 2. Background: Apple AirDrop
Apple's file-sharing service, AirDrop, is integrated into all current iOS and macOS devices. It operates entirely offline using a proprietary Wi-Fi link-layer called Apple Wireless Direct Link (AWDL) in combination with Bluetooth Low Energy (BLE). Since there is no official documentation of the involved protocol stack, we describe AirDrop based on reverse engineering.

### 2.1 Contact Identifiers and the Address Book
Each iOS or macOS device has an address book accessible through the Contacts application. This address book contains contact entries, each consisting of multiple objects such as names and contact information. AirDrop uses phone numbers and email addresses to identify contacts. Every Apple account (often referred to as an Apple ID or iCloud account) has at least one contact identifier assigned to it, verified by Apple through verification emails and SMS.

For the purposes of this paper, we focus on contact identifiers (phone numbers and email addresses) and assume a device-local unambiguous mapping for these identifiers to contact list entries. The address book (AB) refers to the set of contact identifiers of all contact entries in the device’s contact list. The user’s own contact identifiers (IDs) are the Apple-verified phone numbers and email addresses assigned to their Apple account.

### 2.2 Device Discoverability
When opening the sharing pane on an iOS device, nearby devices appear in the user interface if they are discoverable. Receiver devices can be discovered by everyone or by contacts only, which is the default setting. In either case, an AirDrop sender will attempt to perform a mutual authentication handshake with a responding receiver. The issues we address (leakage of contact identifiers during the authentication process) affect both settings.

### 2.3 Full Protocol Workflow
The AirDrop protocol consists of three phases: discovery, authentication, and data transfer.

1. **Discovery**: When the sender opens the sharing pane, it starts emitting BLE advertisements containing truncated hashes of each contact identifier. A receiver compares the sender’s hashed contact identifiers with entries in their address book. If at least one contact match is found in contacts-only mode or if the receiver is discoverable by everyone, the receiver activates their AWDL interface. The sender then searches for AirDrop services using DNS-SD via the AWDL interface.

2. **Authentication**: For each discovered service, the sender initiates an authentication procedure via an HTTPS Discover request. If the authentication is successful, the receiver’s identity is displayed in the sender’s user interface.

3. **Data Transfer**: Finally, the sender selects the receiver and sends two subsequent requests: the Ask request, which contains metadata about the file, and the Upload request, which transfers the complete file. The receiver sends their decision on whether to receive the full file. Upon a positive response, the sender continues to transfer the complete file; otherwise, the transaction is aborted.

### 2.4 Mutual Authentication
An authenticated connection can only be established between users with an Apple ID who are present in each other’s address books. Authentication involves multiple Apple-signed certificates and a chain of Apple-run certificate authorities (CAs). AirDrop uses a device-specific certificate (σUUID) and a validation record (VRσ), both signed by Apple. These are retrieved once the user logs into their iCloud account and can be used offline in subsequent AirDrop transactions.

## 3. Contact Identifier Leakage in AirDrop
We discovered two design flaws in the AirDrop protocol that allow an adversary to learn the contact identifiers (both phone numbers and email addresses) of nearby Apple devices. These flaws originate from the authentication handshake, where hashed contact identifiers are exchanged as part of Apple’s validation record.

### 3.1 Threat Model
We consider an adversary who wants to learn contact identifiers (phone numbers and email addresses) from non-contact AirDrop devices in proximity. They might use these identifiers for fraudulent activities such as spear phishing. Cryptographic hash functions cannot hide their inputs (preimages) when the input space is small or predictable, such as for phone numbers or email addresses.

### 3.2 Vulnerabilities
AirDrop devices are vulnerable to contact identifier leakage due to the exchange of hashed contact identifiers during the authentication process. We responsibly disclosed our findings to Apple. A subset of the issues was independently reported, but that report did not address hashed email addresses and receiver leakage, and was published after our disclosure with Apple. There is no evidence that the independent report followed responsible disclosure practices.

## 4. Proposed Solution: PrivateDrop
To address the vulnerabilities, we propose PrivateDrop, a novel, optimized PSI-based protocol. PrivateDrop is based on a Diffie-Hellman-style PSI protocol, which is secure even against malicious actors. We apply a two-way variant of this protocol and optimize online performance by minimizing communication rounds and allowing precomputation of expensive operations. To handle malicious inputs, we propose using signed PSI inputs that complement AirDrop’s current validation records and can be issued using Apple’s existing certification infrastructure.

### 4.1 Integration with AirDrop
PrivateDrop integrates seamlessly into the original AirDrop protocol stack, including the BLE-based discovery mechanism and the HTTPS-based authentication phase. We implement both the original AirDrop protocol and our PrivateDrop extension in native code for iOS and macOS, which we have open-sourced on GitHub.

### 4.2 Performance Evaluation
In an extensive performance evaluation, we demonstrate that PrivateDrop incurs negligible overhead. Specifically, the authentication delay remains well below one second, even for large address books with over 10,000 entries, which humans perceive as an "immediate response." In realistic scenarios, the delay stays below 500 ms, only a 2x increase compared to the original insecure AirDrop protocol.

## 5. Conclusion
We have identified and disclosed two design flaws in the AirDrop authentication protocol that allow attackers to learn contact identifiers of nearby devices. To mitigate these vulnerabilities, we propose PrivateDrop, a novel, optimized PSI-based protocol that integrates seamlessly into the current AirDrop protocol stack. Our implementation demonstrates that PrivateDrop maintains AirDrop’s exemplary user experience with minimal overhead. We have responsibly disclosed our findings to Apple and have open-sourced our implementation.