title:PrivateDrop: Practical Privacy-Preserving Authentication for Apple
AirDrop
author:Alexander Heinrich and
Matthias Hollick and
Thomas Schneider and
Milan Stute and
Christian Weinert
PrivateDrop: Practical Privacy-Preserving 
Authentication for Apple AirDrop
Alexander Heinrich, Matthias Hollick, Thomas Schneider, 
Milan Stute, and Christian Weinert, TU Darmstadt
https://www.usenix.org/conference/usenixsecurity21/presentation/heinrich
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.PrivateDrop: Practical Privacy-Preserving Authentication for Apple AirDrop
Alexander Heinrich
Matthias Hollick
Thomas Schneider
Milan Stute
Christian Weinert
Technical University of Darmstadt, Germany
Abstract
Apple’s ofﬂine ﬁle-sharing service AirDrop is integrated into
more than 1.5 billion end-user devices worldwide. We dis-
covered two design ﬂaws in the underlying protocol that
allow attackers to learn the phone numbers and email ad-
dresses of both sender and receiver devices. As a reme-
diation, we study the applicability of private set intersec-
tion (PSI) to mutual authentication, which is similar to contact
discovery in mobile messengers. We propose a novel opti-
mized PSI-based protocol called PrivateDrop that addresses
the speciﬁc challenges of ofﬂine resource-constrained op-
eration and integrates seamlessly into the current AirDrop
protocol stack. Using our native PrivateDrop implementa-
tion for iOS and macOS, we experimentally demonstrate
that PrivateDrop preserves AirDrop’s exemplary user experi-
ence with an authentication delay well below one second. We
responsibly disclosed our ﬁndings to Apple and open-sourced
our PrivateDrop implementation.
1 Introduction
Apple AirDrop is a ﬁle-sharing service integrated into more
than 1.5 billion end-user devices worldwide [5], includ-
ing iPhone, iPad, and Mac systems, and has been in oper-
ation since 2011. AirDrop runs fully ofﬂine and only uses a
direct Wi-Fi connection in combination with Bluetooth Low
Energy (BLE) between two devices. We discovered two se-
vere privacy vulnerabilities in the underlying authentication
protocol. In particular, the ﬂaws allow an adversary to learn
contact identiﬁers (i.e., phone numbers and email addresses)
of nearby AirDrop senders and receivers. The ﬂaws originate
from the exchange of hash values of such contact identiﬁers
during the discovery process, which can be easily reversed
using brute-force or dictionary attacks [35, 42, 66].
Challenge. During authentication, two AirDrop devices
run a form of contact discovery where they determine if they
are mutual contacts, i.e., whether or not they have stored each
others’ contact information in their address book [92]. A
connection is only deemed authentic if the result is positive.
Privacy-preserving contact discovery is commonly ad-
dressed via private set intersection (PSI) in the litera-
ture (e.g., [55, 59]). PSI protocols, in general, are crypto-
graphic protocols that allow two interacting parties to securely
compute the intersection of their respective input sets without
leaking any additional data. PSI is already deployed in the real
world, e.g., for compromised credential checking in Google’s
browser Chrome [93] in a business-to-consumer (B2C) con-
text and for calculating ad conversion rates with Google in
a business-to-business (B2B) context [51]. In a consumer-
to-consumer (C2C) context, PSI has been proposed for pre-
venting cheating in online gaming [20] and most recently for
contact tracing in light of the COVID-19 pandemic (e.g., [94]).
With our work, we aim to facilitate the deployment of PSI in
a C2C context for mutual authentication.
However, the AirDrop scenario poses a unique set of chal-
lenges: a solution needs to (a) run completely ofﬂine without
any third-party server support, (b) consider malicious parties
that lie about their address book entries or own contact iden-
tiﬁers, (c) run on mobile devices with restricted energy and
computational resources, and (d) preserve the user experience
by not adding noticeable authentication delays.
Our contributions. We study the applicability of PSI to
realize private mutual authentication for AirDrop. For this,
we ﬁrst systematically explore all possible design options
and available building blocks from the literature. Our ﬁnal
solution, called PrivateDrop, is based on a Difﬁe-Hellman-
style PSI protocol [53], which is even secure in the presence of
malicious actors that actively try to extract sensitive informa-
tion. We apply a two-way variant of [53] and optimize online
performance by minimizing the number of communication
rounds and by allowing to precompute expensive operations,
e.g., when the device charges overnight. To accommodate
malicious inputs, especially attackers lying about their contact
identiﬁers, we propose to use signed PSI inputs [21, 31, 33]
that complement AirDrop’s current validation records and can
be issued using Apple’s existing certiﬁcation infrastructure.
Furthermore, we integrate PrivateDrop into the origi-
nal AirDrop protocol stack, including the BLE-based discov-
USENIX Association
30th USENIX Security Symposium    3577
ery mechanism as well as the HTTPS-based authentication
phase. We implement both the original AirDrop protocol and
our PrivateDrop extension in native code for iOS and macOS,
which we open-sourced on GitHub [45].
Finally, in an extensive performance evaluation, we demon-
strate that PrivateDrop incurs only negligible overhead in
practice. In particular, we experimentally show that the au-
thentication delay stays well below 1 s even for large address
books with > 10k entries, which humans perceive as an “im-
mediate response” [22]. In realistic scenarios, the delay even
stays below 500 ms—only a 2× increase compared to the au-
thentication delay in the original insecure AirDrop protocol.
We disclosed both vulnerabilities and our proposed miti-
gation to the Apple Product Security team and are awaiting
their feedback. We summarize our contributions as follows:
(a) We discover and disclose two distinct design ﬂaws in
the AirDrop authentication protocol that enable an at-
tacker to learn contact identiﬁers (phone numbers and
email addresses) of nearby devices.
(b) We propose PrivateDrop, a new PSI-based mutual au-
thentication protocol that integrates seamlessly into the
current AirDrop protocol stack. Our design is based on
a Difﬁe-Hellman-style PSI protocol [53] and protects
against malicious adversaries as well as inputs.
(c) We re-implement the original AirDrop protocol stack,
integrate our PSI-based protocol for iOS and macOS,
and open-source our code [45].
(d) We experimentally show that PrivateDrop provides im-
mediate responses [22] with < 1s authentication delay.
Outline. Our paper is structured as follows: We ﬁrst de-
scribe the currently deployed AirDrop protocol (§ 2) and dis-
cuss the vulnerabilities we discovered (§ 3). Then, we present
our novel PSI-based mutual authentication protocol (§ 4).
We furthermore describe our implementation (§ 5), followed
by our extensive experimental evaluation (§ 6). Finally, we
discuss related work (§ 7) before concluding (§ 8).
2 Background: Apple AirDrop
Apple’s ﬁle-sharing service AirDrop is integrated in all cur-
rent iOS and macOS devices. It runs completely ofﬂine using
a proprietary Wi-Fi link-layer called Apple Wireless Direct
Link (AWDL) [90] in combination with Bluetooth Low En-
ergy (BLE). As there exists no ofﬁcial documentation of the
involved protocol stack, we describe AirDrop based on the re-
verse engineering of [92]. In particular, we ﬁrst deﬁne contact
identiﬁers and discuss the available discoverability settings.
Then, we describe the complete technical protocol ﬂow and
explain the authentication process as presented in [92].
2.1 Contact Identiﬁers and the Address Book
Each iOS or macOS device has an address book that is ac-
cessible through the Contacts application. This address book
contains several contact entries that in turn consist of multiple
objects such as name or contact information. AirDrop lever-
ages the user’s own contact identiﬁers and their address book
entries for authentication purposes. In particular, AirDrop
uses phone numbers and email addresses to identify a contact.
This is possible as every Apple account (often referred to
as Apple ID or iCloud account) has at least one such con-
tact identiﬁer assigned to it. Apple uses veriﬁcation emails
and SMS to verify the ownership of the email address or
phone number, respectively, thus assuring the correctness of
the identiﬁers.
Within the context of this paper, we will only deal with
contact identiﬁers, i.e., phone numbers and email addresses,
and disregard the notion of “contacts” that might—in turn—
consist of multiple identiﬁers. We assume there exists a
device-local unambiguous mapping for contact identiﬁers
to contact list entries. We use the term address book (AB) to
refer to the set of contact identiﬁers of all contact entries in the
device’s contact list. Note that the AB is controlled by the user
and not veriﬁed by Apple. In addition, the user’s own contact
identiﬁers (IDs) are the Apple-veriﬁed phone numbers and
email addresses that are assigned to the user’s Apple account.
We use the notation c to refer to an address book entry and ID
to refer to an Apple-veriﬁed contact identiﬁer.
2.2 Device Discoverability
When opening the sharing pane on an iOS device, nearby de-
vices appear in the user interface if they are discoverable [10].
In particular, receiver devices can be discovered by everybody
or by contacts only, which is the default setting. In either
case, an AirDrop sender will attempt to perform a mutual au-
thentication handshake with a responding receiver. Note that
the issues addressed in our paper (i.e., the leakage of contact
identiﬁers of sender and receiver during the authentication
process) affect both settings.
2.3 Full Protocol Workﬂow
The AirDrop protocol allows a sender to transmit a ﬁle or link
to a receiver. It consists of the three phases discovery, authen-
tication, and data transfer, which we explain based on [92]
and depict in Fig. 1: (a) When the sender opens the sharing
pane, it starts emitting BLE advertisements that contain a
truncated hash for each contact identiﬁer. A receiver com-
pares the sender’s hashed contact identiﬁers with entries in
their address book. The receiver activates their AWDL inter-
face if at least one contact match was found in contacts-only
mode or if it is discoverable by everyone. The sender then
proceeds by searching for AirDrop services with DNS ser-
vice discovery (DNS-SD) via the AWDL interface. (b) For
each discovered service, the sender initiates an authentica-
tion procedure via an HTTPS Discover request that we detail
in § 2.4. If the authentication procedure completes success-
fully, the receiver’s identity is displayed in the sender’s user
interface. (c) Finally, the sender selects the receiver and sends
two subsequent requests: The Ask request contains metadata
3578    30th USENIX Security Symposium
USENIX Association
The certiﬁcate σUUID contains an account-speciﬁc univer-
sally unique identiﬁer (UUID).1 The certiﬁcate is used as a
client or server certiﬁcate (depending on the role) in the TLS
connection. As the UUID in the certiﬁcate does not link
any contact identiﬁers, AirDrop uses an Apple-signed Ap-
ple ID validation record (VRσ). The validation record con-
tains the UUID from the TLS certiﬁcate and all contact iden-
tiﬁers SHA-256 (ID1) , . . . ,SHA-256 (IDm) that are registered
with the user’s Apple ID in hashed form. Also, VRσ includes a
signature and the certiﬁcate of the signing CA σVR.2 Formally,
we deﬁne VRσ as follows:
VR = (UUID,SHA-256 (ID1) , . . . ,SHA-256 (IDm))
VRσ = (VR,sign (σVR,VR) ,σVR) ,
(1)
(2)
where sign (σVR,VR) is the signature of VR for certiﬁ-
cate σVR. During authentication, AirDrop (a) veriﬁes the
signature on the received validation record, (b) veriﬁes that
the UUID in the certiﬁcate matches the one in the validation
record, and (c) computes the SHA-256 hash over each normal-
ized3 address book entry and compares them with the hashes
contained in the validation record. Authentication succeeds
if all checks pass. If authentication fails on the receiver side,
the receiver aborts the connection. However, if authentication
fails on the sender side, AirDrop continues the transaction but
treats the connection as unauthenticated and the peer as a non-
contact. AirDrop shows contacts with their name and picture
from the address book in the user interface. Non-contacts are
displayed using the device name without a picture instead.
3 Contact Identiﬁer Leakage in AirDrop
We discovered two design ﬂaws in the AirDrop protocol that
allow an adversary to learn the contact identiﬁers (both phone
numbers and email addresses) of nearby Apple devices. The
two ﬂaws originate from AirDrop’s authentication handshake,
where hashed contact identiﬁers are exchanged as part of Ap-
ple’s validation record. First, we deﬁne the threat model and
discuss that cryptographic hash functions cannot hide their
inputs (called preimages) when the input space is small or
predictable, such as for phone numbers or email addresses.
Second, we explain where and to what extent AirDrop devices
are vulnerable to contact identiﬁer leakage. We responsibly
disclosed our ﬁndings to Apple (cf. § 8). A subset of the
issues presented in the following was independently reported
in [25]. However, that report does not address hashed email
addresses and receiver leakage (cf. § 3.4), and was published
one month after our disclosure with Apple. Moreover, there
are no signs that [25] followed responsible disclosure.
1As an addition to [92], we found that the UUID is not device-speciﬁc
but equal for all devices using the same Apple account.
2We hide the fact that VRσ contains the complete certiﬁcate chain up
to Apple’s root CA [92] to keep our description short and concise.
3Phone numbers are hashed in a normalized digit-only form, e.g., the
string “+1 (234) 567-8901” is hashed as “12345678901”.
Figure 1: AirDrop protocol (simpliﬁed version from [92]). The
orange message parts leak the sender’s and receiver’s contact identi-
ﬁers, as discussed in § 3.3 and § 3.4, respectively.
about the ﬁle, including a thumbnail. The receiver sends their
decision on whether to receive the full ﬁle. Upon a positive
response, the sender continues to transfer the complete ﬁle in
an Upload request or aborts the transaction otherwise.
2.4 Mutual Authentication
An authenticated connection can only be established between
users with an Apple ID who are present in each others’ address
books. In order to authenticate, a device needs to prove that it
has registered a certain contact identiﬁer IDi such as phone
number or email address associated with its Apple ID, while
the verifying device checks whether IDi is an address book
entry. Authentication involves multiple Apple-signed certiﬁ-
cates and a chain of Apple-run certiﬁcate authorities (CAs).
In particular, AirDrop uses a device-speciﬁc certiﬁcate σUUID
and a validation record VRσ, which are both signed by Apple.
The devices retrieve them both from Apple once the user logs
in to their iCloud account. They can then be used ofﬂine in
any subsequent AirDrop transaction.
USENIX Association
30th USENIX Security Symposium    3579
Sender SReceiver RregularlyperformBLE scansif in everyone mode or contact identifier hash matches,activate AWDL(1b) AWDL synchronization(1a) AirDrop BLE advertisementwith S’s hashed identifiers (short)HTTPS POST /Discoverwith S’s validation recordHTTPS POST /Askwith S’s validation recordHTTPS POST /Uploadwith fileEstablish TLS connection withclient and server certificatesAll subsequentcommunication  uses AWDLHTTPS 200 OKwith R’s validation recordFor every service discovered, start HTTPS discoverySelect receiverPrompt to decide whether to accept fileEstablish TLS connection withclient and server certificatesReceiver appears in sharing pane (as contact if R’s validation record  is valid)HTTPS 200 OKStart file transfer TLS teardownTLS teardownHTTPS 200 OKif S’s validation record is valid, include own validation record in response(1c) Ask for service AirDropService informationService discovery via mDNS(1) DISCOVERY(2) AUTHENTICATION(3) DATA TRANSFER3.1 Threat Model
In this paper, we consider an adversary that wants to learn
contact identiﬁers (phone numbers and email addresses) from
non-contact AirDrop devices in proximity. They might then
use these identiﬁers for fraudulent activities such as (spear)