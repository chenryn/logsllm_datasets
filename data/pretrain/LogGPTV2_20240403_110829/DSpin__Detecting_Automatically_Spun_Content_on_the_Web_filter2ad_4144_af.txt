### Size of Each Spun Cluster in the GoArticles Data Set

#### Time Difference Between Wiki and GoArticles Post
**Figure 17.** This figure illustrates the posting times in overlapping clusters that contain one page from GoArticles and the remaining pages from the wiki set. The low number of pages from GoArticles in these clusters is independent of the number of wiki pages in the clusters.

### Timing as an Indication of Spamming Behavior
If spammers are using articles from directories like GoArticles as seeds for spinning, the posting times from the article directory should precede those on the wiki pages. Otherwise, the post times would be uncorrelated. **Figure 17** explores this in detail. For each cluster containing one GoArticles page and at least one wiki page, it shows two points on the y-axis connected by a line. The bottom point represents the earliest posting time of a wiki page relative to the GoArticles page, and the top point represents the latest posted wiki page's relative posting time.

- **Observation:** Most wiki pages (92%) are posted well after the GoArticles page, often with a gap of weeks to months. This suggests that spammers are taking articles from GoArticles, spinning them, and then posting them on wiki pages.
- **Exceptions:** Clusters with negative y values indicate that the GoArticles post time precedes the wiki pages. In these cases, spammers likely used seed articles from other sources, and GoArticles was just another target site for posting spun content.

### Discussion

#### Automated Spinning as a Response to Defensive Measures
Automated spinning is a direct response to defensive measures such as near-duplicate document detection by services like Google. As shown in Section IV, spinning undermines shingle-based approaches and plagiarism detectors like CopyScape. If services deploy defenses like DSpin against automated spinning, spammers will adapt to evade detection. Possible responses include changing how the tool spins content, where it spins the content, or how much of the content it spins.

- **Dictionary Changes:** One potential spammer response is to frequently change the synonym dictionary. TBS, for example, does not currently change its dictionary much over time (94% of the words remained the same over four months). Frequent changes could reduce the quality of spun content, but it might still be sufficient for link spam. DSpin is somewhat insensitive to dictionary variations, but if frequent changes were made, it would need to track these changes, which could be challenging.

- **Remote Computation:** Another strategy could be to compute spun content remotely, making the dictionary inaccessible to clients. While this increases costs, the availability of cheap compromised hosts makes it feasible. Defenses like DSpin could counter this by reverse-engineering immutables through generated spun content, similar to techniques for inferring botnet email spam templates.

#### Generality and Scalability of DSpin
- **Generality:** DSpin should be able to detect output from any dictionary-based spinning tool. Manual spinning may also have immutable words that can be used as anchors, but this remains an open question for future work.
- **Scalability:** Given that Google has scaled its systems for detecting near-duplicate content to the entire web, there is no fundamental reason why DSpin's immutable method cannot scale similarly. DSpin might be integrated into Google’s simhash-based approach by using immutables as features in document hashes.

### Conclusion
In this paper, we propose a method for detecting automatically spun content on the web. We use the synonym dictionary from spinning tools to filter crawled pages, reducing them to a smaller set of "anchor" words that remain unchanged. DSpin, our tool, successfully identifies and clusters spun content. Applying DSpin to two data sets—wiki pages and a popular article directory—we find that spinning is a prevalent spamming technique, with significant amounts of posted content being automatically spun. Additionally, some clusters span both wikis and the article directory, indicating that spammers use article directories as seed pages.

### Acknowledgements
We thank Richard Strong, Chris Grier, Steve Checkoway, David Kohlbrenner, and Damon McCoy for their contributions. We also appreciate the feedback from anonymous reviewers. This work was supported by the Office of Naval Research MURI grant N000140911081, National Science Foundation grant NSF-1237264, and the UCSD Center for Networked Systems (CNS).

### References
[References listed as provided, with proper formatting and citations.]