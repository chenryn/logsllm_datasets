app is available. However, as this method was being used by malicious app as a way to enumerate installed apps,
from iOS 9.0 the URL schemes passed to it must be also declared by adding the LSApplicationQueriesSchemes key to
the app's Info.plist file and an array of up to 50 URL schemes.
LSApplicationQueriesSchemes
url_scheme1
url_scheme2
453
iOS Platform APIs
canOpenURL will always return NO for undeclared schemes, whether or not an appropriate app is installed. However,
this restriction only applies to canOpenURL , the openURL:options:completionHandler: method will still open any URL
scheme, even if the LSApplicationQueriesSchemes array was declared, and return YES / NO depending on the
result.
As an example, Telegram declares in its Info.plist these Queries Schemes, among others:
LSApplicationQueriesSchemes
dbapi-3
instagram
googledrive
comgooglemaps-x-callback
foursquare
here-location
yandexmaps
yandexnavi
comgooglemaps
youtube
twitter
...
Testing URL Handling and Validation
In order to determine how a URL path is built and validated, if you have the original source code, you can search for
the following methods:
application:didFinishLaunchingWithOptions: method or application:will-FinishLaunchingWithOptions: : verify
how the decision is made and how the information about the URL is retrieved.
application:openURL:options: : verify how the resource is being opened, i.e. how the data is being parsed, verify
the options, especially if the calling app ( sourceApplication ) is being verified or checked against a white- or
blacklist. The app might also need user permission when using the custom URL scheme.
In Telegram you will find four different methods being used:
func application(_ application: UIApplication, open url: URL, sourceApplication: String?) -> Bool {
self.openUrl(url: url)
return true
}
func application(_ application: UIApplication, open url: URL, sourceApplication: String?,
annotation: Any) -> Bool {
self.openUrl(url: url)
return true
}
func application(_ app: UIApplication, open url: URL,
options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
self.openUrl(url: url)
return true
}
func application(_ application: UIApplication, handleOpen url: URL) -> Bool {
self.openUrl(url: url)
return true
}
We can observe some things here:
The app implements also deprecated methods like application:handleOpenURL: and
application:openURL:sourceApplication:annotation: .
The source application is not being verified in any of those methods.
454
iOS Platform APIs
All of them call a private openUrl method. You can inspect it to learn more about how the URL request is
handled.
Testing URL Requests to Other Apps
The method openURL:options:completionHandler: and the deprecated openURL: method of UIApplication are
responsible for opening URLs (i.e. to send requests / make queries to other apps) that may be local to the current app
or it may be one that must be provided by a different app. If you have the original source code you can search directly
for usages of those methods.
Additionally, if you are interested into knowing if the app is querying specific services or apps, and if the app is well-
known, you can also search for common URL schemes online and include them in your greps. For example, a quick
Google search reveals:
Apple Music — music:// or musics:// or audio-player-event://
Calendar — calshow:// or x-apple-calevent://
Contacts — contacts://
Diagnostics — diagnostics:// or diags://
GarageBand — garageband://
iBooks — ibooks:// or itms-books:// or itms-bookss://
Mail — message:// or mailto://emailaddress
Messages — sms://phonenumber
Notes — mobilenotes://
...
We search for this method in the Telegram source code, this time without using Xcode, just with egrep :
$ egrep -nr "open.*options.*completionHandler" ./Telegram-iOS/
./AppDelegate.swift:552: return UIApplication.shared.open(parsedUrl,
options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
completionHandler: { value in
./AppDelegate.swift:556: return UIApplication.shared.open(parsedUrl,
options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],
completionHandler: { value in
If we inspect the results we will see that openURL:options:completionHandler: is actually being used for universal links,
so we have to keep searching. For example, we can search for openURL( :
$ egrep -nr "openURL\(" ./Telegram-iOS/
./ApplicationContext.swift:763: UIApplication.shared.openURL(parsedUrl)
./ApplicationContext.swift:792: UIApplication.shared.openURL(URL(
string: "https://telegram.org/deactivate?phone=\(phone)")!
)
./AppDelegate.swift:423: UIApplication.shared.openURL(url)
./AppDelegate.swift:538: UIApplication.shared.openURL(parsedUrl)
...
If we inspect those lines we will see how this method is also being used to open "Settings" or to open the "App Store
Page".
When just searching for :// we see:
if documentUri.hasPrefix("file://"), let path = URL(string: documentUri)?.path {
if !url.hasPrefix("mt-encrypted-file://?") {
guard let dict = TGStringUtils.argumentDictionary(inUrlString: String(url[url.index(url.startIndex,
offsetBy: "mt-encrypted-file://?".count)...])) else {
parsedUrl = URL(string: "https://\(url)")
if let url = URL(string: "itms-apps://itunes.apple.com/app/id\(appStoreId)") {
455
iOS Platform APIs
} else if let url = url as? String, url.lowercased().hasPrefix("tg://") {
[[WKExtension sharedExtension] openSystemURL:[NSURL URLWithString:[NSString
stringWithFormat:@"tel://%@", userHandle.data]]];
After combining the results of both searches and carefully inspecting the source code we find the following piece of
code:
openUrl: { url in
var parsedUrl = URL(string: url)
if let parsed = parsedUrl {
if parsed.scheme == nil || parsed.scheme!.isEmpty {
parsedUrl = URL(string: "https://\(url)")
}
if parsed.scheme == "tg" {
return
}
}
if let parsedUrl = parsedUrl {
UIApplication.shared.openURL(parsedUrl)
Before opening a URL, the scheme is validated, "https" will be added if necessary and it won't open any URL with the
"tg" scheme. When ready it will use the deprecated openURL method.
If only having the compiled application (IPA) you can still try to identify which URL schemes are being used to query
other apps:
Check if LSApplicationQueriesSchemes was declared or search for common URL schemes.
Also use the string :// or build a regular expression to match URLs as the app might not be declaring some
schemes.
You can do that by first verifying that the app binary contains those strings by e.g. using unix strings command:
$ strings  | grep "someURLscheme://"
or even better, use radare2's iz/izz command or rafind2, both will find strings where the unix strings command
won't. Example from iGoat-Swift:
$ r2 -qc izz~iGoat:// iGoat-Swift
37436 0x001ee610 0x001ee610 23 24 (4.__TEXT.__cstring) ascii iGoat://?contactNumber=
Testing for Deprecated Methods
Search for deprecated methods like:
application:handleOpenURL:
openURL:
application:openURL:sourceApplication:annotation:
For example, here we find those three:
$ rabin2 -zzq Telegram\ X.app/Telegram\ X | grep -i "openurl"
0x1000d9e90 31 30 UIApplicationOpenURLOptionsKey
0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:
0x1000dee71 29 28 application:openURL:options:
0x1000dee8e 27 26 application:handleOpenURL:
0x1000df2c9 9 8 openURL:
0x1000df766 12 11 canOpenURL:
0x1000df772 35 34 openURL:options:completionHandler:
456
iOS Platform APIs
...
Dynamic Analysis
Once you've identified the custom URL schemes the app has registered, there are several methods that you can use
to test them:
Performing URL requests
Identifying and hooking the URL handler method
Testing URL schemes source validation
Fuzzing URL schemes
Performing URL Requests
Using Safari
To quickly test one URL scheme you can open the URLs on Safari and observe how the app behaves. For example, if
you write tel://123456789 in the address bar of Safari, a pop up will appear with the telephone number and the
options "Cancel" and "Call". If you press "Call" it will open the Phone app and directly make the call.
You may also know already about pages that trigger custom URL schemes, you can just navigate normally to those
pages and Safari will automatically ask when it finds a custom URL scheme.
Using the Notes App
As already seen in "Triggering Universal Links", you may use the Notes app and long press the links you've written in
order to test custom URL schemes. Remember to exit the editing mode in order to be able to open them. Note that
you can click or long press links including custom URL schemes only if the app is installed, if not they won't be
highlighted as clickable links.
Using Frida
If you simply want to open the URL scheme you can do it using Frida:
$ frida -U iGoat-Swift
[iPhone::iGoat-Swift]-> function openURL(url) {
var UIApplication = ObjC.classes.UIApplication.sharedApplication();
var toOpen = ObjC.classes.NSURL.URLWithString_(url);
return UIApplication.openURL_(toOpen);
}
[iPhone::iGoat-Swift]-> openURL("tel://234234234")
true
Or as in this example from Frida CodeShare where the author uses the non-public API
LSApplicationWorkspace.openSensitiveURL:withOptions: to open the URLs (from the SpringBoard app):
function openURL(url) {
var w = ObjC.classes.LSApplicationWorkspace.defaultWorkspace();
var toOpen = ObjC.classes.NSURL.URLWithString_(url);
return w.openSensitiveURL_withOptions_(toOpen, null);
}
Note that the use of non-public APIs is not permitted on the App Store, that's why we don't even test these but
we are allowed to use them for our dynamic analysis.
Using IDB
457
iOS Platform APIs
For this you can also use IDB:
Start IDB, connect to your device and select the target app. You can find details in the IDB documentation.
Go to the "URL Handlers" section. In "URL schemes", click "Refresh", and on the left you'll find a list of all custom
schemes defined in the app being tested. You can load these schemes by clicking "Open", on the right side. By
simply opening a blank URI scheme (e.g., opening myURLscheme:// ), you can discover hidden functionality (e.g.,
a debug window) and bypass local authentication.
Using Needle
Needle can be used to test custom URL schemes, the following module can be used to open the URLs (URIs):
[needle] >
[needle] > use dynamic/ipc/open_uri
[needle][open_uri] > show options
Name Current Value Required Description
---- ------------- -------- -----------
URI yes URI to launch, eg tel://123456789 or http://www.google.com/
[needle][open_uri] > set URI "myapp://testpayload'"
URI => "myapp://testpayload'"
[needle][open_uri] > run
Manual fuzzing can be performed against the URL scheme to identify input validation and memory corruption bugs.
Identifying and Hooking the URL Handler Method
If you can't look into the original source code you will have to find out yourself which method does the app use to
handle the URL scheme requests that it receives. You cannot know if it is an Objective-C method or a Swift one, or
even if the app is using a deprecated one.
Crafting the Link Yourself and Letting Safari Open It
For this we will use the ObjC method observer from Frida CodeShare, which is an extremely handy script that allows
you to quickly observe any collection of methods or classes just by providing a simple pattern.
In this case we are interested into all methods containing "openURL", therefore our pattern will be *[* *openURL*] :
The first asterisk will match all instance - and class + methods.
The second matches all Objective-C classes.
The third and forth allow to match any method containing the string openURL .
$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer
[iPhone::iGoat-Swift]-> observeSomething("*[* *openURL*]");
Observing -[_UIDICActivityItemProvider activityViewController:openURLAnnotationForActivityType:]
Observing -[CNQuickActionsManager _openURL:]
Observing -[SUClientController openURL:]
Observing -[SUClientController openURL:inClientWithIdentifier:]
Observing -[FBSSystemService openURL:application:options:clientPort:withResult:]
Observing -[iGoat_Swift.AppDelegate application:openURL:options:]
Observing -[PrefsUILinkLabel openURL:]
Observing -[UIApplication openURL:]
Observing -[UIApplication _openURL:]
Observing -[UIApplication openURL:options:completionHandler:]
Observing -[UIApplication openURL:withCompletionHandler:]
Observing -[UIApplication _openURL:originatingView:completionHandler:]
Observing -[SUApplication application:openURL:sourceApplication:annotation:]
...
458
iOS Platform APIs
The list is very long and includes the methods we have already mentioned. If we trigger now one URL scheme, for
example "igoat://" from Safari and accept to open it in the app we will see the following:
[iPhone::iGoat-Swift]-> (0x1c4038280) -[iGoat_Swift.AppDelegate application:openURL:options:]
application: 
openURL: igoat://
options: {
UIApplicationOpenURLOptionsOpenInPlaceKey = 0;
UIApplicationOpenURLOptionsSourceApplicationKey = "com.apple.mobilesafari";
}
0x18b5030d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke
0x18b502a94 UIKit!-[UIApplication _applicationOpenURLAction:payload:origin:]
...
0x1817e1048 libdispatch.dylib!_dispatch_client_callout
0x1817e86c8 libdispatch.dylib!_dispatch_block_invoke_direct$VARIANT$mp
0x18453d9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__
0x18453d698 FrontBoardServices!-[FBSSerialQueue _performNext]
RET: 0x1
Now we know that:
The method -[iGoat_Swift.AppDelegate application:openURL:options:] gets called. As we have seen before, it is
the recommended way and it is not deprecated.
It receives our URL as a parameter: igoat:// .
We also can verify the source application: com.apple.mobilesafari .
We can also know from where it was called, as expected from -[UIApplication
_applicationOpenURLAction:payload:origin:] .
The method returns 0x1 which means YES (the delegate successfully handled the request).
The call was successful and we see now that the iGoat app was open:
459
iOS Platform APIs
Notice that we can also see that the caller (source application) was Safari if we look in the upper-left corner of the
screenshot.
Dynamically Opening the Link from the App Itself
It is also interesting to see which other methods get called on the way. To change the result a little bit we will call the
same URL scheme from the iGoat app itself. We will use again ObjC method observer and the Frida REPL:
$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer
[iPhone::iGoat-Swift]-> function openURL(url) {
var UIApplication = ObjC.classes.UIApplication.sharedApplication();
var toOpen = ObjC.classes.NSURL.URLWithString_(url);
return UIApplication.openURL_(toOpen);
}
[iPhone::iGoat-Swift]-> observeSomething("*[* *openURL*]");
[iPhone::iGoat-Swift]-> openURL("iGoat://?contactNumber=123456789&message=hola")