### RMI
#### 前言
Remote Method Invocation(远程方法调用)，它是一种机制，能够让在某个 Java虚拟机上的对象调用另一个 Java
虚拟机中的对象上的方法。可以用此方法调用的任何对象必须实现该远程接口。调用这样一个对象时，其参数为 "marshalled"
并将其从本地虚拟机发送到远程虚拟机（该远程虚拟机的参数为
"unmarshalled"）上。该方法终止时，将编组来自远程机的结果并将结果发送到调用方的虚拟机。如果方法调用导致抛出异常，则该异常将指示给调用方。它主要是为java分布式而设计的，但由于在数据传输时采用了序列化，并且没有做一定的过滤所以导致了一系列安全问题。
#### 服务端创建Registry
    Registry registry = LocateRegistry.createRegistry(1099);
RMI提供了一个静态方法用来创建和获取Registry，跟进源码可以看到new了一个RegistryImpl对象。
    public static Registry createRegistry(int port) throws RemoteException {
        return new RegistryImpl(port);
    }
继续跟进
    public RegistryImpl(int port)
        throws RemoteException
    {
        if (port == Registry.REGISTRY_PORT && System.getSecurityManager() != null) {
            // grant permission for default port only.
            try {
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Void run() throws RemoteException {
                        LiveRef lref = new LiveRef(id, port);
                        setup(new UnicastServerRef(lref));
                        return null;
                    }
                }, null, new SocketPermission("localhost:"+port, "listen,accept"));
            } catch (PrivilegedActionException pae) {
                throw (RemoteException)pae.getException();
            }
        } else {
            LiveRef lref = new LiveRef(id, port);
            setup(new UnicastServerRef(lref));
        }
    }
前面If判断主要是安全检查，然后创建了一个LiveRef对象和UnicastServerRef对象，然后转入setup方法。我们首先来看LiveRef对象的创建。
    public LiveRef(ObjID objID, int port) {
        this(objID, TCPEndpoint.getLocalEndpoint(port), true);
    }
    public LiveRef(ObjID objID, Endpoint endpoint, boolean isLocal) {
        ep = endpoint;
        id = objID;
        this.isLocal = isLocal;
    }
其中调用了两次构造方法，在第一次通过port创建了Endpoint对象，然后传入后面的构造方法对变量赋值。  
继续跟进TCPEndpoint.getLocalEndpoint(port)
    public static TCPEndpoint getLocalEndpoint(int port) {
        return getLocalEndpoint(port, null, null);
    }
    public static TCPEndpoint getLocalEndpoint(int port,
                                                RMIClientSocketFactory csf,
                                                RMIServerSocketFactory ssf)
    {
        TCPEndpoint ep = null;
        synchronized (localEndpoints) {
            TCPEndpoint endpointKey = new TCPEndpoint(null, port, csf, ssf);
            LinkedList epList = localEndpoints.get(endpointKey);
            String localHost = resampleLocalHost();
            if (epList == null) {
                ep = new TCPEndpoint(localHost, port, csf, ssf);
                epList = new LinkedList();
                epList.add(ep);
                ep.listenPort = port;
                ep.transport = new TCPTransport(epList);
                localEndpoints.put(endpointKey, epList);
                if (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) {
                    TCPTransport.tcpLog.log(Log.BRIEF,
                        "created local endpoint for socket factory " + ssf +
                        " on port " + port);
                }
            } else {
                synchronized (epList) {
                    ep = epList.getLast();
                    String lastHost = ep.host;
                    int lastPort =  ep.port;
                    TCPTransport lastTransport = ep.transport;
                    // assert (localHost == null ^ lastHost != null)
                    if (localHost != null && !localHost.equals(lastHost)) {
                        if (lastPort != 0) {
                            epList.clear();
                        }
                        ep = new TCPEndpoint(localHost, lastPort, csf, ssf);
                        ep.listenPort = port;
                        ep.transport = lastTransport;
                        epList.add(ep);
                    }
                }
            }
        }
        return ep;
    }
这里创建了一个TCPEndpoint对象，然后加入静态变量localEndpoints集合中，它存放了不同端口的TCPEndpoint对象。每次创建TCPEndpoint都会先检查localEndpoints是否存在与之端口一致的对象，如果存在，且绑定的host与当前的localhost相同则直接使用该对象。这就是为什么当我们创建多个远程对象时，他们监听的都是一个端口。  
TCPEndpoint中除了host，port等变量外还有一个真正负责网络传输的TCPTransport对象，TCPEndpoint只是一个抽象的网络连接对象，实际的socket相关的工作交给了TCPTransport对象负责。TCPTransport的初始化比较简单，就设置了变量值，就不贴源码了。  
再回到LiveRef构造函数中设置了ep，id,isLocal变量值后就结束了。  
然后进入UnicastServerRef对象的初始化。
    public UnicastServerRef(LiveRef ref) {
        super(ref);
    }
        public UnicastRef(LiveRef liveRef) {
        ref = liveRef;
    }
他初始化就赋了个值，然后继续跟进RegistryImpl的setup函数。
    private void setup(UnicastServerRef uref)
        throws RemoteException
    {
        ref = uref;
        uref.exportObject(this, null, true);
    }
可以看到这给把UnicastServerRef赋给了ref变量，现在大致的对象关系是RegistryImpl  implClass = impl.getClass();
        Remote stub;
        try {
            stub = Util.createProxy(implClass, getClientRef(), forceStubUse);
        } catch (IllegalArgumentException e) {
            throw new ExportException(
                "remote object implements illegal remote interface", e);
        }
        if (stub instanceof RemoteStub) {
            setSkeleton(impl);
        }
        Target target =
            new Target(impl, this, stub, ref.getObjID(), permanent);
        ref.exportObject(target);
        hashToMethod_Map = hashToMethod_Maps.get(implClass);
        return stub;
    }
这里首先调用Util.createProxy()方法创建了一个Stub。
    public static Remote createProxy(Class implClass,
                                      RemoteRef clientRef,
                                      boolean forceStubUse)
        throws StubNotFoundException
    {
        Class remoteClass;
        try {
            remoteClass = getRemoteClass(implClass);
        } catch (ClassNotFoundException ex ) {
            throw new StubNotFoundException(
                "object does not implement a remote interface: " +
                implClass.getName());
        }
        if (forceStubUse ||
            !(ignoreStubClasses || !stubClassExists(remoteClass)))
        {
            return createStub(remoteClass, clientRef);
        }
        final ClassLoader loader = implClass.getClassLoader();
        final Class[] interfaces = getRemoteInterfaces(implClass);
        final InvocationHandler handler =
            new RemoteObjectInvocationHandler(clientRef);
        /* REMIND: private remote interfaces? */
        try {
            return AccessController.doPrivileged(new PrivilegedAction() {
                public Remote run() {
                    return (Remote) Proxy.newProxyInstance(loader,
                                                            interfaces,
                                                            handler);
                }});
        } catch (IllegalArgumentException e) {
            throw new StubNotFoundException("unable to create proxy", e);
        }
    }
首先调用getRemoteClass()方法，检查是否继承了Remote接口，若没继承则产生ClassNotFoundException异常，返回实现了Remote接口的类。  
然后判断是否存在以_Stub结尾的类，如果存在则调用createStub(),可以发现rmi包中存在RegistryImpl_Stub类，所以调用createStub创建RegistryImpl_Stub类，这个方法比较简单，就是通过反射实例化了RegistryImpl_Stub类，同时将上面创建的LiveRef对作为参数传入。  
如果不存在以_Stub结尾的类则继续往下调用Proxy.newProxyInstance()创建一个代理类。创建完Stub后再回到UnicastServerRef中下面判断Stub是否是RemoteStub实例，这里可以看到RegistryImpl_Stub是继承了RemoteStub类的，所以这里继续跟进setSkeleton()方法。
    public void setSkeleton(Remote impl) throws RemoteException {
        if (!withoutSkeletons.containsKey(impl.getClass())) {
            try {
                skel = Util.createSkeleton(impl);
            } catch (SkeletonNotFoundException e) {
                withoutSkeletons.put(impl.getClass(), null);
            }
        }
    }
判断withoutSkeletons集合中是否包含RegistryImpl。如果对于一个类C，不存在存在C_Skel类则将类C放入该集合，这里可以看到是存在RegistryImpl_Skel类的，所以调用Util.createSkeleton()方法，该方法和前面的Util.createProxy()类似，就不再继续跟进了。  
然后再把前面创建的RegistryImpl,
UnicastRef,RegistryImpl_Stub类封装到Target对象中，继续调用LiveRef.exportObject() ->
TCPEndpoint.exportObject() ->
TCPTransport.exportObject(),最后调用了TCPTransport的exportObject方法。
    public void exportObject(Target target) throws RemoteException {
        synchronized (this) {
            listen();
            exportCount++;
        }
        boolean ok = false;
        try {
            super.exportObject(target);
            ok = true;
        } finally {
            if (!ok) {
                synchronized (this) {
                    decrementExportCount();
                }
            }
        }
    }
这里调用了listen()创建socket并监听，下面调用super.exportObject(),将target添加到objTable。
#### 客户端获取Registry
上面讲了服务端创建Registry的过程，下面再说一下客户端获取Registry的过程。客户端调用如下代码即可获取到服务端的Registry。
    LocateRegistry.getRegistry("127.0.0.1", 1099);
然后跟进代码
    public static Registry getRegistry(String host, int port)
        throws RemoteException
    {
        return getRegistry(host, port, null);
    }
    public static Registry getRegistry(String host, int port,
                                        RMIClientSocketFactory csf)
        throws RemoteException
    {
        Registry registry = null;
        if (port  implClass = impl.getClass();
        Remote stub;
        try {
            stub = Util.createProxy(implClass, getClientRef(), forceStubUse);