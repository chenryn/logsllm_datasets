– though in principle this can be done on a source code
level – in that this design principle can provide software
developers and security analysts with the following bene-
ﬁts. Without having POMP tie to a set of programs written
in a particular programming language, our design prin-
ciple ﬁrst allows software developers to employ a single
tool to analyze the crashes of programs written in vari-
ous language (e.g., assembly code, C/C++ or JavaScript).
Second, our design choice eliminates the complication
introduced by the translation between source code and
binaries in that a post-crash artifact carries an execution
trace in binaries which can be directly consumed by anal-
ysis at the binary level. Third, with the choice of our
design, POMP can be generally applied to software failure
triage or categorization in which a post-crash artifact is
20    26th USENIX Security Symposium
USENIX Association
A1: push ebpA2: movebp, espA3: sub esp, 0x14A4: mov[ebp-0xc], testA5: lea eax, [ebp-0x10]A6: push eax;argument of &varA7: call childA8: push ebpA9: movebp, espA10: moveax, [ebp+0x8]A11: mov[eax], 0x1 ;a[0]=1A12: moveax, [ebp+0x8]A13: add eax, 0x4A14: mov[eax], 0x2 ;a[1]=2A15: moveax, 0x0A16: pop ebpA17: retA18: add esp, 0x4A19: moveax, [ebp-0xc]A20: call eax;crash siteTimeT20T19T18T17T16T15T14T13T12Registereax0x00020x00020x00000x00000x00000x00000xff1c0xff1c0xff18ebp0xff280xff280xff280xff280xff280xff080xff080xff080xff08esp0xff140xff140xff140xff100xff0c0xff080xff080xff080xff08Memory Address0xff1c0x00020x00020x00020x00020x00020x00020x0002testtest0xff180x00010x00010x00010x00010x00010x00010x00010x00010x00010xff140x00000x00000x00000x00000x00000x00000x00000x00000x00000xff100xff180xff180xff180xff180xff180xff180xff180xff180xff180xff0cA18A18A18A18A18A18A18A18A180xff080xff280xff280xff280xff280xff280xff280xff280xff280xff28Execution traceT1T2T3T4T5T6T7T8T9T10T11T12T13T14T15T16T17T18T19T20TimeCrashing memoryMemory footprints reconstructed across timethe only resource for analysis and the source code of a
crashing program is typically not available [16, 18].
3.3 Technical Approach
As is mentioned earlier in Section 1, it is signiﬁcantly con-
venient to identify the instructions pertaining to a program
crash if software developers and security analysts can ob-
tain the control and data ﬂows that a program followed
prior to its crash.
We rely on Intel PT to trace the control ﬂow of a pro-
gram and integrate it into the post-crash artifact. PT
is a low-overhead hardware feature in recent Intel pro-
cessors (e.g., Skylake series). It works by capturing in-
formation about software execution on each hardware
thread [6]. The captured information is orgranized in
different types of data packets. Packets about program
ﬂow encodes the transfers of control ﬂow (e.g., targets of
indirect branches and taken/not-taken indications of con-
ditional direct branches). With the control ﬂow transfers
and the program binaries, one is able to fully reconstruct
the trace of executed instructions. Details of our conﬁgu-
ration and use with PT are presented in Section 5.
Since a post-crash artifact has already carried the con-
trol ﬂow that a crashing program followed, the main focus
is to reconstruct the data ﬂow from the post-crash artifact
that a crashing program left behind.
To reconstruct the data ﬂow pertaining to a program
failure, POMP introduces a reverse execution mechanism
to restore the memory footprints of a crashing program.
This is due to the fact that the data ﬂow can be easily
derived if machine states prior to a program crash are all
available. In the following, we brieﬂy describe how to
recover memory footprints and build a data ﬂow through
reverse execution, and how to utilize that data ﬂow to
reﬁne instructions that truly pertain to a program crash.
Our reverse execution mechanism is an extension of
the aforementioned forward-and-backward analysis. Not
only does it automate the forward-and-backward analysis,
making the inverse operations for instructions effortless,
but also automatically veriﬁes memory aliases and en-
sures an inverse operation does not introduce errors or
uncertainty.
With this reverse execution mechanism, POMP can eas-
ily restore the machine states prior to the execution of
each instruction. Here, we illustrate this with the example
shown in Figure 1. After reverse execution completes
the inverse operation for instruction A19 through the
aforementioned forward and backward analysis, it can
easily restore the value in register eax and thus the mem-
ory footprint prior to the execution of A19 (see memory
footprint at time T18). With this memory footprint, the
memory footprint prior to instruction A18 can be easily
recovered because arithmetical instructions do not intro-
duce non-invertible effects upon memory (see the memory
footprint at time T17).
Since instruction A17 can be treated as mov eip,
[esp] and then add esp, 0x4, and instruction A16
is equivalent
to mov ebp, [esp] and then add
esp, 0x4, reverse execution can further restore mem-
ory footprints prior to their execution by following the
scheme of how it handles mov and arithmetical instruc-
tions above. In Figure 1, we illustrate the memory foot-
prints prior to the execution of both instructions.
Recall that performing an inverse operation for instruc-
tion A15, forward and backward analysis cannot deter-
mine whether the use of [ebp+0x8] speciﬁed in instruc-
tion A12 can reach the site prior to the execution of in-
struction A15 because [eax] in A14 and [ebp+0x8]
in A12 might just be different symbolic names that access
data in the same memory location.
To address this issue, one instinctive reaction is to use
the value-set analysis algorithm proposed in [11]. How-
ever, value-set analysis assumes the execution complies
with standard compilation rules. When memory corrup-
tion happens and leads to a crash, these rules are typically
violated and, therefore, value-set analysis is very likely to
be error-prone. In addition, value-set analysis produces
less precise information, not suitable for reverse execu-
tion to verify memory aliases. In this work, we employ
a hypothesis test to verify possible memory aliases. To
be speciﬁc, our reverse execution creates two hypotheses,
one assuming two symbolic names are aliases of each
other while the other assuming the opposite. Then, it tests
each of these hypotheses by emulating inverse operations
for instructions.
Let’s continue the example shown in Figure 1. Now,
reverse execution can create two hypotheses, one assum-
ing [eax] and [ebp+0x8] are aliases of each other
while the other assuming the opposite. For the ﬁrst
hypothesis, after performing the inverse operation for
instruction A15, the information carried by the mem-
ory footprint at T14 would have three constraints, in-
cluding eax = ebp + 0x8, eax = [ebp + 0x8] + 0x4 and
[eax] = 0x2. For the second hypothesis, the constraint set
would include eax (cid:54)= ebp + 0x8, eax = [ebp + 0x8] + 0x4
and [eax] = 0x2. By looking at the memory footprint at
T14 and examining these two constraint sets, reverse exe-
cution can easily reject the ﬁrst hypothesis and accept the
second because constraint eax = ebp + 0x8 for the ﬁrst
hypothesis does not hold. In this way, reverse execution
can efﬁciently and accurately recover the memory foot-
print at time T14. After the memory footprint recovery
at T14, reverse execution can further restore earlier mem-
ory footprints using the scheme we discussed above, and
Figure 1 illustrates part of these memory footprints.
With memory footprints recovered, software develop-
ers and security analysts can easily derive the correspond-
USENIX Association
26th USENIX Security Symposium    21
4.1.1 Use-Deﬁne Chain Construction
In the ﬁrst step, the algorithm ﬁrst parses an execution
trace reversely. For each instruction in the trace, it extracts
uses and deﬁnitions of corresponding variables based on
the semantics of that instruction and then links them to
a use-deﬁne chain previously constructed. For example,
given an initial use-deﬁne chain derived from instructions
A20 and A19 shown in Figure 1, POMP extracts the use
and deﬁnition from instruction A18 and links them to the
head of the chain (see Figure 2).
As we can observe from the ﬁgure, a deﬁnition (or
use) includes three elements – instruction ID, use (or def-
inition) speciﬁcation and the value of the variable. In
addition, we can observe that a use-deﬁne relation in-
cludes not only the relations between operands but also
those between operands and those base and index regis-
ters enclosed (see the use and deﬁnition for instruction
A19 shown in Figure 2).
Every time appending a use (or deﬁnition), our algo-
rithm examines the reachability for the corresponding
variable and attempts to resolve those variables on the
chain. More speciﬁcally, it checks each use and deﬁ-
nition on the chain and determines if the value of the
corresponding variable can be resolved. By resolving,
we mean the variable satisﬁes one of the following con-
ditions – x the deﬁnition (or use) of that variable could
reach the end of the chain without any other intervening
deﬁnitions; y it could reach its consecutive use in which
the value of the corresponding variable is available; z a
corresponding resolved deﬁnition at the front can reach
the use of that variable; { the value of that variable can
be directly derived from the semantics of that instruction
(e.g., variable eax is equal to 0x00 for instruction mov
eax, 0x00).
To illustrate this, we take the example shown in
Figure 2. After our algorithm concatenates deﬁnition
def:esp=esp+4 to the chain, where most variables
have already been resolved, reachability examination in-
dicates this deﬁnition can reach the end of the chain.
Thus, the algorithm retrieves the value from the post-
crash artifact and assigns it to esp (see the value in cir-
cle). After this assignment, our algorithm further prop-
agates this updated deﬁnition through the chain, and at-
tempts to use the update to resolve variables, the values
of which have not yet been assigned. In this case, none
of the deﬁnitions and uses on the chain can beneﬁt from
this propagation. After the completion of this propaga-
tion, our algorithm further appends use use:esp and
repeats this process. Slightly different from the process
for deﬁnition def:esp=esp+4, for this use, variable
esp is not resolvable through the aforementioned reach-
ability examination. Therefore, our algorithm derives
the value of esp from the semantics of instruction A18
Figure 2: A use-deﬁne chain before and after appending new
relations derived from instruction A18. Each node is partitioned
into three cells. From left to right, the cells carry instruction
ID, deﬁnition (or use) speciﬁcation and the value of the variable.
Note that symbol ?? indicates the value of that variable is
unknown.
ing data ﬂow and thus pinpoint instructions that truly
contribute to a crash. In our work, POMP automates this
procedure by using backward taint analysis. To illustrate
this, we continue the aforementioned example and take
the memory footprints shown in Figure 1. As is described
earlier, in this case, the bad value in register eax was
passed through instruction A19 which copies the bad
value from memory [ebp-0xC] to register eax. By
examining the memory footprints restored, POMP can eas-
ily ﬁnd out that the memory indicated by [ebp-0xC]
shares the same address with that indicated by [eax]
in instruction A14. This implies that the bad value is ac-
tually propagated from instruction A14. As such, POMP
highlights instructions A19 and A14, and deems they
are truly attributable to the crash. We elaborate on the
backward taint analysis in Section 4.
4 Design
Looking closely into the example above, we reﬁne an
algorithm to perform reverse execution and memory foot-
print recovery. In the following, we elaborate on this
algorithm followed by the design detail of our backward
taint analysis.
4.1 Reverse Execution
Here, we describe the algorithm that POMP follows when
performing reverse execution. In particular, our algorithm
follows two steps – use-deﬁne chain construction and
memory alias veriﬁcation. In the following, we elaborate
on them in turn.
22    26th USENIX Security Symposium
USENIX Association
BeforeAfterA19use: ebp 0xff28A19use: [ebp-0xc] 0x0002A19use: eax ??A19def: eax = [ebp-0xc]0x0002A20use: eax 0x0002A18use: esp 0xff10A18def: esp = esp+40xff14A19use: ebp 0xff28A19use: [ebp-0xc] 0x0002A19use: eax ??A19def: eax = [ebp-0xc]0x0002A20use: eax0x0002As we can observe from the example shown in Fig-
ure 3, when this situation appears, a deﬁnition like A14
def:[eax] may potentially interrupt the reachability
of the deﬁnitions and uses of other variables represented
by memory accesses. For example, given that memory
indicated by [ebp+0x08] and [eax] might be an alias
of each other, deﬁnition A14 def:[eax] may block
the reachability of A12 use:[ebp+0x08]. As such,
in the step of use-deﬁne chain construction, our algorithm
treats those unknown memory writes as an intervening
tag and blocks previous deﬁnitions and uses accordingly.
This conservative design principle ensures that our al-
gorithm does not introduce errors to memory footprint
recovery.
The above forward-and-backward analysis is mainly
designed to discover the use-deﬁne reltaions. Other tech-
niques, such as static program slicing [34], can also iden-
tify use-deﬁne relations. However, our analysis is novel.
To be speciﬁc, our analysis discovers the use-deﬁne re-
lations and use them to perform the restoration of mem-
ory footprints. In turn, it leverages recovered memory
footprints to further ﬁnd use-deﬁne relations. This inter-
leaving approach leads more use-deﬁne relations to being
identiﬁed. Additionally, our analysis conservatively deals
with memory aliases and veriﬁes them in an error-free
manner. This is different from previous techniques that
typically leverage less rigorous methods (e.g., value-set
analysis). More details about how we resolve memory
alias are presented in the next section.
4.1.2 Memory Alias Veriﬁcation
While the aforementioned design principle prevents intro-
ducing errors to memory footprint recovery, this conser-
vative strategy hinders data ﬂow construction and limits
the capability of resolving variables (see the ﬂow block
and non-recoverable variables shown in Figure 3). As a
result, the second step of our algorithm is to minimize the
side effect introduced by the aforementioned strategy.
Since the conservative design above roots in “undecid-
able” memory alias, the way we tackle the problem is to
introduce a hypothesis test mechanism that examines if a
pair of symbolic names points to the same memory loca-
tion. More speciﬁcally, given a pair of symbolic names,
this mechanism makes two hypotheses, one assuming
they are alias of each other and the other assuming the
opposite. Based on the hypotheses, our algorithm ad-
justs the use-deﬁne chain as well as constraints accord-
ingly. For example, by assuming [eax] is not aliased
to [ebp+0x8], our algorithm extracts inequility con-
straint eax(cid:54)=ebp+0x8 and releases the block shown in
Figure 3, making A12 use:[ebp+0x8] further prop-
agated.
During the propagation, our algorithm walks through
Figure 3: A use-deﬁne chain with one intervening tag conser-
vatively placed. The tag blocks the propagation of some data
ﬂows. Note that  represents the block of a data ﬂow.
(i. e., esp=esp-4).
During use-deﬁne chain construction, our algorithm
also keeps track of constraints in two ways. In one way,
our algorithm extracts constraints by examining instruc-
tion semantics. Take for example instruction A19 and
dummy instruction sequence cmp eax, ebx; ⇒ ja
target; ⇒ inst_at_target . Our algorithm
extracts equality constraint eax=[ebp-0xc] and in-
equality constraint eax>ebx, respectively. In another
way, our algorithm extracts constraints by examining use-
deﬁne relations. In particular, x when the deﬁnition of a
variable can reach its consecutive use without intervening
deﬁnitions, our algorithm extracts a constraint indicat-
ing the variable in that deﬁnition shares the same value
with the variable in the use. y When two consecutive
uses of a variable encounters no deﬁnition in between,
our algorithm extracts a constraint indicating variables
in both uses carry the same value. z With a variable re-
solved, our algorithm extracts a constraint indicating that
variable equals to the resolved value. The reason behind
the maintenance of these constraints is to be able to per-
form memory alias veriﬁcation discussed in the following
section.
In the process of resolving variables and propagating
deﬁnitions (or uses), our algorithm typically encounters a
situation where an instruction attempts to assign a value
to a variable represented by a memory region but the
address of that region cannot be resolved by using the
information on the chain. For example, instruction A14
shown in Figure 1 represents a memory write, the address
of which is indicated by register eax. From the use-deﬁne
chain pertaining to this example shown in Figure 3, we
can easily observe the node with A13 def:eax does
not carry any value though its impact can be propagated
to the node with A14 def:[eax] without any other
intervening deﬁnitions.
USENIX Association
26th USENIX Security Symposium    23
A11def: [eax] 0x0001A12use: ebp 0xff08A11use: [eax] ??A11use: eax ??A10def: eax ??A10use: eax ??A10use: [ebp+0x8] ??A10use: ebp 0xff08A9def: ebp 0xff08A9use: ebp ??A9use: esp 0xff08A12use: [ebp+0x8] ??A12use: eax ??A12def: eax ??A13use: eax ??A13def: eax ??A14use: eax ??A14use: [eax] ??A14def: [eax] 0x2.........XData ﬂowData ﬂoweach of the nodes on the chain and examines if the newly
propagated data ﬂow results in conﬂicts. Typically, there
are two types of conﬂicts. The most common is incon-
sistence data dependency in which constraints mismatch
the data propagated from above (e.g., the example dis-
cussed in Section 3). In addition to the conﬂict commonly
observed, another type of conﬂict is invalid data depen-
dency in which a variable carries an invalid value that is
supposed to make the crashing program terminate earlier
or follow a different execution path. For example, given
a use-deﬁne chain established under a certain hypothe-
sis, the walk-through discovers that a register carries an
invalid address and that invalid value should have the
crashing program terminate at a site ahead of its actual
crash site.
It is indisputable that once a constraint conﬂict is ob-
served, our algorithm can easily reject the corresponding
hypothesis and deem the pair of symbolic names is alias
(or non-alias) of each other. However, if none of these
hypotheses produce constraint conﬂicts, this implies that
there is a lack of evidence against our hypothesis test.
Once this situation appears, our algorithm holds the cur-
rent hypothesis and performs an additional hypothesis test.
The reason is that a new hypothesis test may help remove
an additional intervening tag conservatively placed at the
ﬁrst step, and thus provides the holding test with more
informative evidence to reject hypotheses accordingly.
To illustrate this, we take a simple example shown in
Figure 4. After the completion of the ﬁrst step, we assume
that our algorithm conservatively treats A2 def:[R2]
and A4 def:[R5] as intervening tags which hinder data
ﬂow propagation. Following the procedure discussed
above, we reversely analyze the trace and make a hy-
pothesis, i. e., [R4] and [R5] are not alias. With this
hypothesis, the data ﬂow between the intervening tags
can propagate through, and our algorithm can examine
conﬂicts accordingly. Assume that the newly propagated
data ﬂow is insufﬁcient for rejecting our hypothesis. Our
algorithm holds the current hypothesis and makes an ad-
ditional hypothesis, i. e., [R1] and [R2] are not alias of
each other. With this new hypothesis, more data ﬂows
pass through and our algorithm obtains more information
that potentially helps reject hypotheses. It should be noted
that if any of the hypotheses fail to reject, our algorithm
preserves the intervening tags conservatively placed at the
ﬁrst step.
It is not difﬁcult to spot that our hypothesis test can
be easily extended as a recursive procedure which makes
more hypotheses until they can be rejected. However,
a recursive hypothesis test introduces computation com-
plexity exponentially. In the worse case, when performing
execution reversely, the inverse operation of each instruc-
tion may require alias veriﬁcation and each veriﬁcation
may require further alias examination. When this situa-
(a) The execution trace.
(b) The use-deﬁne chain.
Figure 4: A dummy use-deﬁne chain and execution trace with
two pairs of memory aliases. Note that R0,R1,···R5 represent
registers in which the values of R2 and R5 are unknown. Note
that  represents the block of a data ﬂow.