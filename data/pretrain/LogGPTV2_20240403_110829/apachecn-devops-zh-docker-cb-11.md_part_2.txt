# 它是如何工作的...
在这个食谱中，我们创建了两个新的服务。一个是为另一个 web 服务存储信息的数据库。我们使用秘密来保护我们的密码，我们使用这些秘密，而不是在映像中硬编码我们的密码，或者将它们作为环境变量传入。
我们还为我们的应用创建了一个定制的覆盖网络，这样两个服务就可以在集群中相互通信，并且流量默认是加密的，这意味着我们两个服务之间的所有通信都是安全的。
AWS 的 Docker 有一个服务，可以侦听添加到 Swarm 的新服务，当一个新服务暴露了端口时，它会自动配置外部负载平衡器来接受该服务的流量。当有人遇到负载平衡器时，它会将流量发送到其中一个 Swarm 管理器，然后 Swarm 会将流量路由到正确的主机和容器。
# 还有更多...
在前面的方法中，我们只接受 HTTP 上的流量。使用 AWS，您可以使用 **AWS 证书管理器** ( **ACM** 获得免费的 SSL/TLS 证书，如果您有其中之一，您还可以为 AWS 配置负载平衡器和 Docker 来支持 SSL/TLS 流量。请按照以下说明获取更多信息:[https://docs.docker.com/docker-for-aws/load-balancer/](https://docs.docker.com/docker-for-aws/load-balancer/)。
要破坏这些服务，我们只需将它们从 Swarm 中移除，它就会关闭网站:
```
$ docker service rm wp
$ docker service rm mariadb
```
![](img/4b216328-92c1-4193-89c1-5190d2defe96.png)
# 蓝色 Docker
微软 Azure 是微软为构建、测试、部署和管理应用而创建的云计算平台。它是目前仅次于亚马逊的第二大热门云平台。在这个食谱中，我们将讨论如何为 Azure 安装 Docker，这是 Docker 的一个产品，它使得在 Azure 上安装和运行 Docker 本机栈变得容易。
# 准备好
在我们开始之前，您需要一些东西:
*   具有管理员权限的 Microsoft Azure 帐户的访问权限
*   一个 SSH 密钥，您将在访问 Azure 管理器节点的 Docker 时使用它
*   一个 Azure **服务主体** ( **服务点**)，它被 Azure 的 Docker 用来向 Azure 应用接口进行身份验证
Docker 通过使用他们提供的 Docker 映像，使得创建服务主体变得很容易。按照以下步骤创建服务主体。您要做的第一件事是运行 Docker 映像，传递一些参数:
```
$ docker container run -ti docker4x/create-sp-azure [sp-name] [rg-name rg-region]
```
*   `sp-name`:服务主体的名称(例如:`sp1`)。
*   `rg-name`:新资源组的名称，将在为 Azure 部署 Docker 时使用(例如:`swarm1`)。
*   `re-region`:将在其中创建资源组的 Azure 区域的名称(例如，`eastus`)。有关可用区域的完整列表，请访问以下页面:[https://azure . Microsoft . com/en-us/global-infra structure/regions/](https://azure.microsoft.com/en-us/global-infrastructure/regions/):
![](img/f73c4351-3601-4d8e-a508-660b584c8fa7.png)
然后，它会要求您访问一个网页，并输入一个代码进行身份验证。这将验证您的帐户并将其链接到 Docker 容器，这将使其完成服务主体的创建:
![](img/0f25860f-9c60-4a84-8313-ae8b23ae5872.png)
完成后，您应该会看到您的服务主体凭据。将此信息保存在安全的地方；你马上就需要它:
![](img/72e5bcfa-7b09-4ba7-a327-7ea5dab95576.png)
# 怎么做...
Azure 的 Docker 使用 Azure 资源管理器(ARM)来创建所有需要的资源
打开以下网页，选择稳定频道版本:[https://docs.docker.com/docker-for-azure/](https://docs.docker.com/docker-for-azure/#docker-community-edition-ce-for-azure):
![](img/6a326cb3-69bd-414f-a662-b28fb5e90278.png)
这将带您进入 Azure 门户，并使用 Azure ARM 的 Docker 模板开始自定义部署。添加您以前拥有的服务主体凭据，并回答其他问题。别忘了包括你的 SSH 公钥。完成表格后，选择我同意...复选框并点击购买按钮:
![](img/e3264ffe-26ac-4bfd-8b7b-9a39775847ce.png)
这将开始创建您需要的资源，并向您显示部署的进度:
![](img/05c2718d-c1ed-4f34-b771-9c5bacb16677.png)
完成后，单击输出选项卡，记下三个输出。稍后你会需要这些。复制 SSH TARGETS 的值，并在新的浏览器窗口中打开该网址:
![](img/ed6e183e-6cbc-4641-99f7-09b43fcb4990.png)
这是群集中管理器节点的列表。要连接到此节点，我们可以 SSH 到自定义 TCP 端口上的目标 IP 地址:
![](img/bdd8f433-7f68-435a-a6db-7c8fe7f354ca.png)
使用这些信息，让我们将 SSH 引入该管理器，并通过列出群中的节点来确保它正常工作:
```
$ ssh -p 50000 PI:EMAIL
$ docker node ls
```
![](img/4e44f873-3bef-4c0a-a4e2-4d65f5f2b299.png)
如果一切正常，您应该会看到所有经理和工作人员节点的列表，其`Status`为`Ready`。
When you SSH into the swarm manager, you are not actually logging into the Azure host directly, you are logging into a special SSH container that is running on that host.
# 它是如何工作的...
Azure 的 Docker 有一个 **Azure 资源管理器** ( **ARM** )模板，当应用该模板时，将在 Azure 上创建所有需要的资源，并将它们一起配置以创建 Swarm 集群。Azure 的 Docker 使用服务主体进行所需的应用编程接口调用来配置所有节点，并在集群启动和运行后对其进行管理。
# 还有更多...
当删除 Azure Docker 的时候，您需要进入 Azure 门户，找到部署，选择所有资源，然后删除它们:
![](img/d2e5cdd6-81b2-4462-9fac-54057a8b2a29.png)
确认要删除的资源:
![](img/38178318-4976-4e07-a5c8-85688d621677.png)
Due to some resource dependencies, you might have some resources that can't be removed until their dependent resources are deleted. This means you will probably need to delete the resources a few times before they will all be removed.
# 请参见
*   蔚蓝文档记录员:[https://docs.docker.com/docker-for-azure/](https://docs.docker.com/docker-for-azure/)
*   如何升级天蓝色的 Docker:[https://docs.docker.com/docker-for-azure/upgrade/](https://docs.docker.com/docker-for-azure/upgrade/)
*   使用持久数据存储:[https://docs . docker . com/docker-for-azure/持久数据卷/](https://docs.docker.com/docker-for-azure/persistent-data-volumes/)
# 部署 Joomla！蓝色 Docker
现在我们已经为 Azure 安装设置了一个活动的 Docker，让我们部署一个应用来看看它是如何工作的。在这个食谱中，我们将安装 Joomla！，一个流行的开源内容管理系统，在 Azure 的 Docker 之上。
# 准备好
在我们开始之前，您需要一些东西:
1.  你将需要有你的 Docker 为 AWS 栈和运行从以前的食谱。
2.  SSH 进入其中一个管理器节点。如何做到这一点的说明也可以在之前的食谱中找到。
# 怎么做...
一旦我们登录到其中一个管理器节点，我们需要做的第一件事就是为我们的数据库密码创建一些 Swarm 机密:
```
$ echo "DbP@SSwod1" | docker secret create root_db_password -
$ echo "myJ000mlaPw" | docker secret create jm_db_password -
```
![](img/36ad19a6-eef3-41f1-ab67-4e7f1b5df7e0.png)
让我们确认我们正确地添加了它们:
```
$ docker secret ls
```
![](img/2ee32715-6430-4db5-88ae-e3aa427f81b2.png)
它们看起来不错。让我们创建一个自定义覆盖网络，以便我们的服务可以通过群集上的加密连接相互通信:
```
$ docker network create -d overlay joomla
$ docker network ls
```
![](img/f820cf83-3be2-4c21-a650-2639e729a0e0.png)
现在，我们准备添加我们的服务。Joomla！需要一个数据库，因此我们将创建一个 MariaDB 服务，我们将使用之前为密码创建的网络和机密:
```
$ docker service create \
 --name mariadb \
 --replicas 1 \
 --constraint=node.role==manager \
 --network joomla \
 --secret source=root_db_password,target=root_db_password \
 --secret source=jm_db_password,target=jm_db_password \
 -e MYSQL_ROOT_PASSWORD_FILE=/run/secrets/root_db_password \
 -e MYSQL_PASSWORD_FILE=/run/secrets/jm_db_password \
 -e MYSQL_USER=joomla \
 -e MYSQL_DATABASE=joomla \
 mariadb:10.3
```
![](img/605c0b8f-b82f-4b0d-bbb0-13d2519723d9.png)
现在我们已经创建了所有的依赖项，我们可以添加我们的 Joomla 了！服务。我们将使用与以前相同的网络，但是您会注意到我们将数据库密码作为环境变量传递，而不是使用我们之前创建的 Docker Secret。这是因为 Joomla！image 目前不支持 secrets，但希望不久的将来会增加支持，我们可以切换到当时使用的 secrets:
```
$ docker service create \
 --name joomla \
 --constraint=node.role==manager \
 --replicas 1 \
 --network joomla \
 --publish 80:80 \
 -e JOOMLA_DB_USER=joomla \
 -e JOOMLA_DB_PASSWORD="myJ000mlaPw" \
 -e JOOMLA_DB_HOST=mariadb \
 -e JOOMLA_DB_NAME=joomla \
 joomla:3.8
```
![](img/1e6200b5-1671-4b1e-a2a9-7e85d36e5d01.png)
我们现在应该有两个服务启动并运行。让我们检查一下:
```
$ docker service ls
```
![](img/88fc2d69-8740-41f6-a5a9-7335e8fefe19.png)
它们看起来不错。让我们看看是否可以连接到该服务。如果你还记得，当我们为 Azure 部署 Docker 时，有一些输出。其中两个输出是`APPURL`和`DEFAULTDNSTARGET`。第一个是负载平衡器 URL，而另一个是栈的公共 IP 地址。在为您的站点配置 DNS 记录时，您可以使用这些值:
![](img/15975aa9-0572-4e95-ad22-b99bf9049bc4.png)
如果你在网络浏览器中输入上述地址之一，你应该可以看到 Joomla！配置页面。如果是这样，我们的安装是成功的:
![](img/8e4521b9-4bfe-4ff7-8ec1-b968937995f6.png)
If you are not going to be completing the configuration wizard right away, please remove or stop the service, or else someone else could come by and do it for you, and take over your Joomla! install.
# 它是如何工作的...
在这个食谱中，我们创建了两个新的服务。一个是存储 Joomla 信息的数据库！服务。我们使用秘密来保护我们的密码，并且我们将这些秘密用于数据库服务，而不是将我们的密码硬编码在映像中，或者将它们作为环境变量传入，就像我们对 Joomla 所做的那样！服务。
我们还为我们的应用创建了一个定制的覆盖网络，这样两个服务就可以在集群中相互通信。默认情况下，流量是加密的，这意味着我们两个服务之间的所有通信都是安全的。
Azure 的 Docker 有一个服务，可以监听加入 Swarm 的新服务。当一个新服务有公开的端口时，它将自动配置外部负载平衡器来接受该服务的流量。当有人遇到负载平衡器时，它会将流量发送到其中一个 Swarm 管理器，然后 Swarm 会将流量路由到正确的主机和容器。
# 请参见
*   Azure 部署文档记录人:[https://docs.docker.com/docker-for-azure/deploy/](https://docs.docker.com/docker-for-azure/deploy/)