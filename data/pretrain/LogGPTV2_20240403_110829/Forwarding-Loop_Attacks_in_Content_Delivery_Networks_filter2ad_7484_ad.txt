### A Loop Among CloudFront, CDN77, and KeyCDN Nodes

A loop was created involving one CloudFront node, one CDN77 node, and one KeyCDN node. The CDN77 node resets the `Via` header used by CloudFront for loop detection. The KeyCDN node resets the `X-Forwarded-For` header, which would otherwise steadily increase in size due to CloudFront and CDN77. KeyCDN itself does not detect loops or increase header sizes. Additionally, because CDN77 does not implement abort forwarding, forwarding timeouts do not terminate the loop. In principle, such loops could persist indefinitely.

### Experiments

We created a forwarding loop among four systems: CloudFlare, CDN77, MaxCDN, and a server under our control. We configured MaxCDN to delete any headers that detect loops or increase header size. We utilized the no-abort-forwarding feature of the CDN77 node to counter the effect of forwarding timeouts. Our server acted as a transparent HTTP proxy with a 0.6-second delay to collect data and limit the resource load imposed by the loop. The loop was initiated with a single request and lasted over 5 hours, passing 17,266 requests through our server. When the loop finally stopped, a 522 error was received, indicating that CloudFlare could not connect to our server. Our server also received many retransmitted TCP packets, suggesting that the loop ceased due to network connectivity issues between CloudFlare and our server.

### The CDN Dam Flooding Attack

As discussed in Section III-A, HTTP streaming enhances forwarding-loop attacks by "filling the pipe" with traffic. However, Azure (China) is the only applicable target for streaming loops, as it is the only CDN that supports streaming requests and lacks loop detection (as per Tables III and VII). Since all CDNs support HTTP streaming for responses, we can extend the attacks by using responses instead of requests to create streaming loops. We call this attack "CDN Dam Flooding" because it involves two phases: filling and flooding, analogous to the filling and bursting of a dam.

**Filling Phase:**
The attacker launches multiple forwarding loops using domain names as forwarding destinations, as described in Sections III-C and III-D.

**Flooding Phase:**
The attacker changes the DNS resolution of these domain names to direct the forwarding destinations to their server, which responds with a large file transmitted via HTTP streaming. For each forwarding loop, a streaming response flows along the CDN nodes in reverse order, repeating until a broken connection occurs due to a forwarding timeout at some CDN node or the client that initiated the loop. While the filling phase generates some attacking traffic, the flooding phase amplifies the traffic by utilizing HTTP streaming with large, continuous chunks, magnified by the number of turns around the forwarding loop. The attacker can coordinate DNS resolution to flood all filled loops simultaneously, further enlarging the traffic burst.

**Experiments:**
To assess the efficacy of this attack without unduly stressing a production CDN, we set up our own VPS as the victim CDN node, imposing a strict traffic limitation of no more than 100Mb/s. On CDN77, we configured the forwarding destination to a domain under our control. On our VPS, we configured the forwarding destination to a CDN77 IP address, creating a forwarding loop between our VPS and the CDN77 node. Note that our VPS has the abort-forwarding feature, does not support request streaming, but does support response streaming.

In the filling phase, we responded to DNS queries with the IP address of our VPS and sent three 366-byte requests to the CDN77 node, spaced 10 seconds apart. We then waited for the three requests to loop between the CDN77 node and our VPS for 30 seconds.

In the flooding phase, we changed the DNS replies to direct the three loops to our web server, which responded to any request with a 1 MB file, sent using HTTP streaming. Figure 7 shows the HTTP traffic on our VPS during the filling and flooding phases. The burst attack lasted about 69 seconds. During the first phase, the three forwarding loops slowly increased the traffic volume from zero to 7 KB/s over 50 seconds. In the second phase, the traffic volume immediately peaked, reaching about 9.2MB/s. While the attacker sent out three requests and three responses totaling about 3MB of traffic, our VPS as a victim received about 224MB, an amplification factor of 74.

### Combining with Gzip Bombs

This attack can be significantly enhanced if the attacker incorporates gzip bombs. In step 7 of Figure 6, the attacker needs to send a large response to the CDN as quickly as possible to increase the peak burst of the attack. Gzip bombs, which are small compressed files easy to transport across a network, can help achieve this goal. When unpacked by a CDN, they balloon into extremely large output.

To assess whether CDNs decompress gzip'd responses, we conducted a measurement of 16 commercial CDNs. Our client sent a request to the CDN indicating that it does not accept gzip-encoded HTTP replies, and our original server returned a gzip'd response. If the client receives decompressed content, the CDN will decompress gzip'd responses. We found that 3 out of the 16 CDNs (Akamai, Baidu, and CloudFlare) decompress gzip'd responses for clients that do not support "gzip" encoding.

Although only 3 CDNs can be exploited by gzip bombs, adding one gzip-decompressing node into a loop suffices to attack all involved nodes with the effect of gzip bombs, even if the other nodes do not support gzip decompression. For example, in the scenario of Figure 6, even if the three nodes A, B, and C do not support gzip decompression, the attacker can direct step 6 to a gzip-decompressing node, which forwards the request to the attack server and is fed a gzip bomb in return. The gzip-decompressing node then forwards the large unpacked response to node A, where it further loops among the three nodes.

To estimate the maximum amplification factor a gzip bomb can provide, we performed a local experiment. We generated a 100GB file containing only the character '1' and compressed it using gzip with compression level 9, yielding a 96.2MB file, reflecting a compression ratio of 1,064. This compression ratio serves as an extra amplification factor, significantly enlarging the attack traffic.

With Baidu's permission, we used the Baidu CDN to conduct two experiments to verify the feasibility and efficacy of dam flooding attacks with gzip bombs. We set up two local CDN servers using Nginx, created a forwarding loop between them, and set their network latency to 200 ms. In the filling phase, we sent a single GET request into the loop. After 10 seconds, we pointed the forwarding destination to our web server, sited behind Baidu. In the first experiment, our server replied to the request with an uncompressed 1MB file consisting of a single repeated character. We then repeated the procedure with a 1KB file reflecting a gzip'd version of the previous 1MB file.

In the first experiment, the 1MB response looped 16 times, with the traffic received at one local server totaling 16.6MB, an amplification factor of approximately 17. In comparison, in the second experiment, the 1KB response looped 17 times, inducing a total traffic volume of 17.7MB at one server. This results in an amplification factor of approximately 17,000â€”1,000 times that of the first experiment.

### Other CDN Quirks

We observed two rare behaviors that can further enhance the efficacy of forwarding-loop attacks:

**Aggressive Active Probing:**
Azure (China) proactively and frequently issues HTTP requests to forwarding destinations, presumably for availability testing. We configured a forwarding destination on Azure (China) and monitored for 36 hours, receiving 106,764 requests from 69 different IP addresses. This behavior, if intentional, allows attackers to generate forwarding loops without an initiator.

**Forwarding Retries:**
When the origin does not respond within a certain time, CloudFront and Akamai retransmit requests to the origin websites. Upon receiving a request from a client, a CloudFront server forwards the request to its forwarding destination. If it does not receive a response, it retransmits the request twice, 30 seconds and 60 seconds after first sending it, respectively, before returning a timeout error to the client after 90 seconds. Akamai servers also retry once at 120 seconds before a final timeout at 240 seconds. In forwarding-loop attacks, each request retransmission kicks off a new loop. Even if the server closes the previous forwarding connection before issuing a retransmission, the original loop will still continue if any node in the loop does not implement abort forwarding. These behaviors can cause the number of loops to increase exponentially.

To examine these possibilities, we created a forwarding loop between a CloudFront server and our HTTP forwarder. Our forwarder did not support abort forwarding or request streaming. We sent a single request (376 bytes) to the CloudFront server and captured HTTP traffic at our forwarder. After 156 seconds, we manually stopped the loop by killing the process of our forwarder to avoid adversely affecting the CloudFront platform. Figure 8 shows the results. The number of requests started to increase at 30 seconds and continued to do so every subsequent 30 seconds, reaching 200 at the end of the experiment. During the experiment, our forwarder received a total of 3,096 requests sent by the CloudFront server, even though we only sent one request.

### CDN Registration Requirements and Cost

Table VIII summarizes the registration requirements and costs for various CDNs. Eleven out of 16 CDNs require only a valid email address. Akamai and CloudFront require valid credit cards (which could be gift cards or stolen), Azure (China) requires a valid phone number (which could be anonymous), and Alibaba and Tencent require users to verify their identity through a valid bank card, which takes more effort to keep anonymous.

### Disclosure and Response

We attempted to contact all 16 CDN vendors. For 4 CDNs (CDNlion, CDN.net, CDNsun, and KeyCDN), we could not find specific security contacts, and our messages to general email addresses did not receive any reply. For the other 12 CDNs, we provided detailed reports to their security contacts, and 9 replied (all but Incapsula, Level3, and MaxCDN). Verizon (EdgeCast) contacted us to discuss the problem after learning of the issue from one of their clients, even though we did not include their service in our study because they do not offer anonymous customer accounts. We also reported the problem to CNCERT/CC and the CERT coordination center (CERT/CC) through the HackerOne platform. Below, we summarize the discussions.

**CloudFlare:**
Acknowledged our report and particularly thanked us for reporting the problem of gzip bombs. They actively discussed with us the potential consequences and steps to mitigate the issue.