ƐĞƚƚŝŶŐ
ĞǆƚƌĂĐƚŽƌ
ǀĞĐƚŽƌŝǌĞƌ
ƉƌŝǀĂĐǇ
ĐůĂƐƐŝĨŝĞƌ
/Z
ƉƌŝǀĂĐǇ
ƐĞƚƚŝŶŐ
ŚŝĚĚĞŶĨĞĂƚƵƌĞĞǆƚƌĂĐƚŽƌ
h/ͲƉĂƚŚ
ƚƌĂĐĞƌ
ůĂǇŽƵƚ
ĂŶĂůǇǌĞƌ
ŝĐŽŶ
ƌĞƐŽůǀĞƌ
ŚŝĚĚĞŶŶĞƐƐ
ĐůĂƐƐŝĨŝĞƌ
ŚŝĚĚĞŶ
ƐĞƚƚŝŶŐƐ
Fig 5: Architecture of Hound.
received in the second user study (Section II-B). Each feature
is designed to capture one aspect of the UI design that makes
a privacy setting difﬁcult to ﬁnd. They are elaborated in
Section III-B.
Extracting these features from an app’s code turns out to be
yet another challenge, due to their dependence on the UI-path
is nontrivial to construct statically. Our solution is semantics-
based UI tracing that connects the views involved in a UI
transition based upon the semantics of their content, particularly
between the text description of an UI element and the title of
the view that the element invokes once it is triggered. This
allows us to build an accurate UI-path automatically and further
extract features from the path, as elaborated in Section III-C.
B. Features of Hidden Privacy Settings
As mentioned earlier, we have summarized six causes
that render a privacy setting difﬁcult to locate by the user
(Section II-B). They are further quantiﬁed into 14 features as
shown in Table X (in Appendix X-B) to characterize a setting,
which could further be utilized to determine hidden settings.
Below we detail the features.
Cause 1: Users could get lost when a privacy setting that
they are looking for does not follow a typical UI-path (e.g.,
home view → Settings → P rivacy Settings). Thus, we
measure the similarities between a given setting’s UI-path and
a set of typical privacy-setting UI-paths, as identiﬁed by the
participants of our user study from 200 popular apps, through
calculating the Jaccard indices [14] between the sets of nodes on
the two given UI-paths u1 and u2. The maximum value of such
similarity scores is chosen as the ﬁrst feature F1. Also, since
most users look for a privacy setting on P rivacy Settings or
Settings, we utilize F2 and F3 to describe whether a given
privacy setting is on the two views, respectively.
Cause 2: Developers sometimes use uncommon text or
icons as indicators on UI-paths, which may not help users ﬁnd
a given privacy setting. We design three features (F4 ∼ F6) to
characterize these situations. For the uncommon text indicators,
we measure the similarities between each text indicator on
a given UI-path and a set of most common indicator terms
(e.g., Me, Settings, Privacy Settings, etc.), which have been
collected manually from 200 popular apps. The similarity here
is calculated as the maximal Jaccard Index between the words
in an indicator text and those in the common term set. The
average similarity of all the indicators along a UI-path becomes
a feature F4. Secondly, we utilize the privacy classiﬁer to
determine whether an indicator is related to privacy. The total
number of those unrelated to privacy is used as the feature
F5. Finally, from the feedbacks of our user study, people only
consider gears (standing for Settings) and portraits (standing
for Proﬁles) as icon indicators (in Figure 3) for conﬁgurations.
If developers use other icons on a UI-path, the users probably
will not click on them to seek privacy settings. So we count
the number of the icons down a UI-path that are neither gears
or portraits as the sixth feature F6. Since the developers may
come up with an icon in very diverse ways, we cannot use
image comparison for determining whether an icon is similar to
a commonly used gear icon. Our solution is to leverage “Best
Guess” in Google, which could give the semantic meaning of
the icon, for accurate comparison. An example of such a “Best
Guess” is shown in Figure 6.
Cause 3: Too many icons on a UI-path without text
descriptions could confuse users. We count the number of
icons in a UI-path as a feature F7.
Cause 4: A long UI-path may let users lose patience to
ﬁnd a privacy setting. So we count the number of views on a
UI-path as another feature F8.
Cause 5: Too many UI elements on a view could also
cause one to lose patience. After carefully analyzing the users’
feedbacks, we use ﬁve features to describe this cause. Since the
key view (the one displaying the privacy setting) is important
for users to locate the privacy setting they are looking for,
we count the number of the UI elements on the key view as
the feature F9. Sometimes, users complain that when privacy
settings and other settings are mixed together, it becomes hard
for them to single out the privacy ones. So we calculate the
percentage of the privacy settings on the key view as F10.
Besides the key view, a similar problem also happens to other
views on a UI-path. So we count the number of the settings
for each of the view on the UI-path and choose the maximum
one as F11. Normally, users browse a view from the top to
the bottom and thus the settings located close to the bottom
may have a higher possibility to be missed. So, we use the
privacy setting’s position from the top of the key view as
F12. Similarly, across other views on the UI-path, we use the
average of the individual indicator’s positions on them as F13.
Cause 6: A very long text description of a privacy setting
may also cause the users to lose patience. So we count the
number of words in the descriptions as F14.
With all these features, we are able to quantify the difﬁculty
of locating a privacy setting, and identify the hidden ones from
users’ perspective. However, to automate this process at a large
scale, Hound has to build UI-paths for given privacy settings
in an app, which turns out to be more challenging than we
thought. Particularly, to the best of our knowledge, no prior
approach can be directly applied to precisely extract UI-paths
(cid:22)(cid:24)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:00 UTC from IEEE Xplore.  Restrictions apply. 
ůĂǇĞƌϯ
ůĂǇĞƌϭ
^ĞƚƚŝŶŐƐ
^ĞƚƚŝŶŐƐ
ůĂǇĞƌϭ
ůĂǇĞƌϮ
ůĂǇĞƌϮ
ůĂǇĞƌϯ
;ĂͿ
;ďͿ
ZĞƉůĂĐĞŵĞŶƚtŽƌĚ>ŝƐƚ
ƐŚĂƌĞ
ƐŚŽǁ͕ŚŝĚĞ͕͙
ůŽĐĂƚŝŽŶ
ƉůĂĐĞ͕ĂĚĚƌĞƐƐ͕ĐŝƚǇ͕͙
ƵƐĞƌƐ͕ƉĞŽƉůĞ͕ƐƚƌĂŶŐĞƌƐ͕͙
ĨƌŝĞŶĚƐ
'ĞŶĞƌĂƚŝŽŶĞǆĂŵƉůĞ
ƐŚĂƌĞŵǇůŽĐĂƚŝŽŶƚŽĨƌŝĞŶĚƐ
Æ ƐŚŽǁ ŵǇƉůĂĐĞ ƚŽƵƐĞƌƐ
Æ ŚŝĚĞ ŵǇĐŝƚǇ ƚŽƐƚƌĂŶŐĞƌƐ
Æ
͙͙
Fig. 6: Example of Google “Best Guess”
Fig. 7: Example of overlapped widgets
Fig. 8: Example of synthetic sampling
from an app. Our solution to this problem is semantics-based
UI tracing.
C. Semantics-based UI Tracing
As mentioned earlier, Hound has to recover UI-paths before
quantifying the features along the path. A UI-path connects an
app’s views using indicators, which ends with the given privacy
setting. To generate a UI-path, one may think of dynamic
analysis (i.e., enumerating all the UI-paths by triggering various
events in the app). However, this approach is time-consuming
and can only ﬁnd a limited number of UI-paths. Our idea is
to statically ﬁnd views and indicators in the app, and then to
link them together for building UI-paths. This is also very
challenging due to the complexity of the layouts and the
limitation of static analysis, as elaborated below.
Challenges. The ﬁrst challenge is that the indicator clicked
by users may not be correctly identiﬁed by simply analyzing
app code. From the users’ perspective, they focus on the texts
displayed on a view, and regard the widget [15] holding the
texts as the indicators. However, code analysis may view the
widget that handles the user’s click as the indicator, that is not
the one seen by the user. For example, in Figure 7 (a), there
are several overlapped widgets. The widget displaying the text
(in layer 1) is not the one (on layer 2) handling users’ click.
Another example is shown in Figure 7 (b). The widget with
the text (layer 1) and an indicating arrow on the right side (in
layer 2) are both on the same widget (in layer 3). Users click
the arrow on layer 2 because of seeing the text on layer 1, but
in fact, layer 3 handles the click. Similar situations commonly
exist in today’s apps due to the gap between users’ perceptions
and code implementations. We analyzed 100 privacy settings in
the top 100 apps from Google Play and found 89% (89/100) of
them have this problem, which makes it hard for static analysis
to identify indicators from the users’ perspective.
The second challenge is the dynamic features of Java, which
are hard to handle by static analysis. For example, inheritance
is an important Java feature where the child class can extend
the properties (methods and ﬁelds) of its parent class. This
feature is widely used by Activity [16] which is the main
implementation of a view in Android app development. Child
Activities can inherit basic properties from their parent class,
and implement their own properties. Using inheritance, when a
developer wants to call a function in a subclass, what he does
is to call the corresponding function in the superclass, without
indicating the subclass to reduce the workload of programming.
Java Runtime Environment [17] will decide the correct subclass
according to dynamic running environments. Therefore, it is
very hard for static analysis to know the correct child class for
capturing the connection between indicators and views.
Our idea. To address the two challenges, we design a
novel semantics-based approach to extract UI-paths, avoiding
heavyweight static analysis (e.g., traditional data ﬂow and
control ﬂow analysis). Our idea is based on an observation
that the title of a view has a semantic connection with the
indicator that the user clicks. For example, in Figure 2, the
title of the third view “Settings” matches the text of the
second indicator text (also “Settings”). This observation actually
follows Google’s guidelines [18] for app design: developers
should let users be aware of the navigation positions in the app.
We analyze 300 UI-paths in the top 100 apps from Google
Play, only two views in the two UI-paths do not follow the
observation (which actually may not be a good design). Hence,
the connection between the title of a view and its indicator is
exactly the hint for us to construct UI-paths.
Based on the observation, our idea is to leverage the
semantics of indicators and views to build the connections
between them, and further to construct UI-paths. Basically,
Hound ﬁrst extracts all the indicators and views including their
semantics from an app. Then it connects an indicator and a
view if they have similar semantics. By tracing from a privacy
setting (i.e., the end of a UI-path) to the home view (i.e., initial
activity), Hound is able to build the full UI-path step by step.
In this way, we can avoid the static code analysis, and naturally
address the challenges above. We detail how to extract the
semantics and how to build connections as follows.
Semantics of indicators and views. There are two types
of indicators: texts and icons. Both of them have semantics
that guides users in the process of UI navigation. For text
indicators, the texts themselves can provide enough semantics.
For icon indicators, our idea is to leverage Google’s “Best
Guess” that we use for obtaining the semantic meaning of an
icon previously (see Section III-B). By uploading an icon to
Google, the semantics of the icon could be returned in the
form of texts automatically. Besides using Google, we also
take a look at the resource name that refers to an icon in code
which may contain semantics. In this way, Hound is able to
extract the semantics of all the text and icon indicators in a
given app.
Regarding views, most developers choose meaningful titles
to give users clear guidance on views’ contents. Thus, the text
of the title can be used for a view’s semantics. To extract
(cid:22)(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:00 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Semantic sources for title determine
layout
smali
Source
string name
widget id name
style name
method name
class name
parameter/ﬁeld type
annotation
Example
android:text=’@string/setting title’
android:id=’@id/title’
android:style=’@style/center title’
setTitle, initTitle, setCaption()
titleBar, headBar
progress title, actionBar head
.annotation runtime AcitivtyCenterTitleRes
the titles, considering developers usually use the standard
Android API “setTitle” for assigning titles to views, Hound can
directly extract them from the API’s parameters in app code.
However, developers sometimes build their own title layout
style without using the API. How to determine the text for
a view’s title becomes non-trivial. Our idea is based on an
observation that developers would name resources, classes and
methods with certain semantics to help themselves develop
apps. Such semantics is a good hint for us to identify a view’s
title. For example, when a text’s id is “@id/title” in a view
layout ﬁle, we believe that the text has a high possibility to
be the title of the view. We summarize the semantic sources
we use to determine a title in Table III. In the worst case,
even if we fail to ﬁnd the title text using the above approach,
the name of a view’s layout ﬁle and its classname may also
contain semantics. For example, the classname of a view for
privacy setting is often named PrivacySettingsActivity, and the
layout ﬁle is usually named privacy settings.layout, which give
semantics for establish the connection.
Build the connection. Hound connects the indicators and
views with similar semantics and starts to build a UI-path
backward from privacy settings. The basic idea is, given a
privacy setting, Hound ﬁrst locates the view which contains
the setting. Then it searches for the indicator which has
the most similar semantics as the view and puts both of
them onto the UI-path. Later, Hound continues this process
until the home view is reached. In particular, to compare
the semantics of two texts, we deﬁne a similar semantics
degree d(text1, text2) = Jaccard(Wtext1 , Wtext2
), Wtext1
and Wtext2 are the word sets of the text1 and text2 respectively.
For example, when Hound calculates the degree for the view
titled “Privacy Settings Activity” and an indicator named “Pri-
vacy Settings”, Wtext1 is {“privacy”, “settings”, “activity”},
Wtext2 is {“privacy”, “settings”}. So the similar semantics