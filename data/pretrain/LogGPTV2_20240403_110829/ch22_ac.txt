容量规划和需求预测
    通常，软件工程师无法准确理解他们的软件在实践中的使用方式。设计使用与实际使用之间的差距会对实施和维护服务的 资本支出（CapEx）和 运维支出（OpEx）产生巨大影响和影响。SRE团队可以很好地衡量，报告和预测系统可以提供的内容（容量），以及在进行业务讨论和持续设计策略时，可以了解未来的使用趋势（需求）。
性能分析和优化性能分析和优化
    理解能力的很大一部分涉及了解服务（或多项服务的搭配）如何执行，无论是否有压力（又称失败）。通过可用的测量框架，SRE 可以帮助他们的开发合作伙伴汇总服务的性能，并使用他们的系统级观点来建议可以提高容量或性能的优化。
预配、更改管理和速度
      虽然不同的组织将拥有不同的方法来配置硬件和服务以及管理其环境中的变更，但 SRE 团队通过尽可能提高自动化程度来发挥关键作用，以最大化变更速度，同时在已建立的服务级别范围内保持性能。有时这意味着 SRE 团队帮助建立或加强 CI/CD 框架和管道，或者他们将自动化工具的想法应用于“货架和堆叠”或可靠运行的仓库和其他物流实体。
 资源分配的一个同样重要的部分是拆除（取消配置）过时的服务。不幸的是，没有人善于计划退休（哪怕他们的服务也好）。所以 SRE 团队在照看功能和服务的同时，往往也必须通过有效的工程支持来推动删除“行尸走肉”的僵尸服务，因为消耗资源而不会为业务带来好处。SRE 执行阶段
  许多组织将经历三到四个主要阶段参见Benjamin Purgason 的演讲，“站点可靠性工程的演变”，以获取更多有关该主题的信息。才能完成必要的企业文化转变，以实现跨越服务的整个生命周期的功能性 SRE 实践。 这一进展是从价值链的反应性结束回到服务生命周期的早期阶段。随着 SRE 团队在此范围内变得更加有效，他们与相应开发团队的互动质量得到提高，他们的参与变得更加受欢迎和追捧。
第 1 阶段：灭火/反应
   在第一阶段，团队从反应姿态开始。太多的活动部件、压倒性的复杂性、以意想不到的方式级联的意外交互，这些都导致团队感觉永远不会再看到光明，更不用说希望能够将任何“工程”应用于混乱的情况。
在这个灭火/反应阶段，团队几乎没有追索权，只能继续努力应对每一次危机，同时努力保留足够的注意力和精力，以便在难以维持的情况下获得影响力。叫停功能开发，以便团队能够共同专注于将系统中的错误摔到可管理的水平，这是获得一些缓解的一种策略。团队还可以补充额外的人员，以帮助结构自动化，以减少手动工作的负担。对于一个团队来说，这个阶段是最难克服的阶段，因为它需要双重视角：一方面“保持灯亮”，另一方面通过自动化构建新方法，也同时帮助相关团队。
作为反应性的阶段，此阶段还反映了在发布新服务的过程中后期参与的 SRE 团队。也许他们被叫来清理已经投入生产但性能不佳的服务的混乱，或者那些在设计阶段（服务即将投入生产前）没有考虑站点可靠性问题的服务。
第 2 阶段：守门员
  随着危机驱动的方法逐渐减弱，团队越过最糟糕的反应性劳动，团队进化的守门阶段就会发生。在这个阶段，SRE 团队面对的诱惑是将自己定位为一个看门人，一个生产系统变更必须通过并获得批准的阻塞点。在小规模公司来说，这可能大部分都是功能性的，但随着规模的增加，团队将面临越来越大的压力，必须通过授权开发团队做正确的事情来放弃控制。这个阶段的 SRE 需要成为合作伙伴，而不是门。对于希望在早期与开发合作伙伴接触的团队来说，守门阶段也是常见的下一步。它可以作为“启动控制”、“操作就绪性审查”或“释放到生产”流程实现。尽管这些术语可以反映与开发团队的积极参与，但它们通常表明一种守门人的心态，这种心态可以锁定团队在我们与开发团队的争斗中。如果 SRE 将自己定位为网守，则会与功能开发团队成为对立面，于是开发团队在感到开发受阻时会考虑如何绕多发布流程（和 SRE 团队）。
第3阶段：倡导者/合作伙伴
   通过建立共同商定的框架，例如 The SRE Book第3章中解释的错误预算概念，SRE 能够将他们的团队从服务发布的关键路径中移除，并依赖客观测量。当每个人都同意遵守这一措施时，SRE 团队可以自由地与开发团队合作，帮助他们达到商定的目标，然后继续满足。SRE 团队还参与不断改进所测量服务的组件，以包括影响用户体验的所有重要方面。合作伙伴阶段看到 SRE 团队更早地参与到即将推出的服务的开发过程中。它们努力确保设计在其体系结构中考虑可靠性，并针对最可能或最昂贵的故障构建防御。
SRE 团队变得更加有效，因为与开发团队的对抗性较小，并且早期引入的设计更改实施成本较低，并能提供长期价值。团队的成员往往满意度要高得多，因为他们觉得他们的工作受到合作伙伴的重视。SRE 团队已成为重要的贡献者，而不是被视为“清理人员”或守门路障。SRE 服务受到认识到这一价值的开发团队的追捧。
第4阶段：催化
  SRE 在其组织内运作的最后阶段具有催化作用。 正如化学催化剂促进反应并且可以指导这些反应的过程一样，SRE 为开发团队提供建议，将业务目标，可靠性和安全性的一致性记录到每个服务组件的整个生命周期中。SRE 应该从每项服务的开始到终止全程陪伴，并帮助提供正确的工具，以便开发团队非常熟悉其代码对整个站点或服务功能的影响。在此级别执行 SRE 为可靠性团队提供了最大的优势，使他们能够超越员工数量增长的影响力。与开发团队的 SRE 参与已完全转变为“拉取”模型，开发人员团队寻求 SRE 输入，而不是通常由管理层强加的第 1 阶段和第 2 阶段“推送”模型。自愿的、基于价值的参与，这对所有参与者来说都更令人愉快，并且可以维持公司内部和外部持续利益的良性循环。
不同阶段的并发症
 处于不同执行阶段的团队具有显著不同的优先级，并且以非常不同的方式分配注意力。这会引起很多摩擦，因为团队似乎会讲不同的语言。了解团队的背景以避免误解非常重要。如果第 4 阶段团队与第 1 阶段团队讨论在设计阶段与其开发对手进行接洽，则第 1 阶段团队可能会认为这完全不现实。从与业内不同人士的讨论来看，似乎很少有捷径能够让团队从第 1 阶段的救火队直接提升到第 4 阶段的足智多谋，企图跳过逐步成长的漫长过程。有了高级管理支持，SRE 团队可能只能参与第 3 阶段和以上项目，但即便如此，也需要从苦苦挣扎的开发团队中保留支持。这种毅力通常只存在于相当成熟的 SRE 组织中，这些组织曾体验过与愿意的发展伙伴合作的好处。  
关注成功的细节全面了解每个服务以及整个站点，了解大多数面向功能的开发人员理所当然的网络和系统性能方面，并能够开发和执行降低站点风险的计划及其服务是 SRE 的日常方面。最有效的 SRE 集中体现了一种成长思维。Dweck, Carol. (2007)心态：新的成功心理学，新版。纽约：Ballantine Books；https://hbr.org/2016/01/what-having-a-growth-mindset-actually-means或https://mindsetonline.com/SRE 需要能够在大背景下分析问题相关的业务指标。像攀岩者或登山者一样，他们需要能够解决看似无法克服的问题，并逐步克服这些问题。SRE 还需要能够发现和解决大多数开发团队不想知道或担心的所有泄漏抽象边缘出现的问题，只要这些都是为了追求站点可靠性。如果该网站没有“在线”，那么没有其他重要事项。在线服务的商业成功从根本上依赖于有效的工作以及通过工程注意力和技能持续关注站点可靠性，同时产生令用户满意的功能。延伸阅读
Victor Chircu, "Understanding the 8 fallacies of Distributed Systems".
Carol Dweck at TEDxNorrkoping, "The power of believing that you can improve".
Carol Dweck, "What Having a 'Growth Mindset' Actually Means", Harvard Business Review.
Senge, Peter M. (1990) The Fifth Discipline. The Art and Practice of the Learning Organization. London: Random House.McChrystal, Stanley (2015). Team of Teams: New Rules of Engagement for a Complex World. New York: Penguin Group.
将 SRE 视为侧重于成功而不是失败的模式转变与其他行业的变化（如空中交通管理）相似；见 Erik Hollnagel 等著“From Safety-I to Safety-II: A White Paper”. EUROCONTROL 2013。
编者介绍
库尔特·安德森在NASA喷气推进实验室开始处理大数据的职业生涯。自 90 年代初开始，他就开始参与共享标准，并教授 PERL DBD/DBI 规范，现在他致力于各种 IETF 标准。Kurt 目前是 LinkedIn 产品 SRE 团队的高级个人贡献者。他还担任消息、恶意软件和移动反滥用工作组的项目委员会主席之一。他在 M3AAWG、Velocity、SREcon 和 SANOG 就可靠性、身份验证和安全性发表了演讲。