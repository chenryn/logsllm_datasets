### 容量规划与需求预测

软件工程师通常难以准确理解其软件在实际使用中的情况。设计意图与实际使用之间的差距会对资本支出（CapEx）和运维支出（OpEx）产生重大影响。SRE团队能够有效衡量、报告并预测系统容量，同时在业务讨论和持续设计策略中提供未来使用趋势的洞察。

### 性能分析与优化

理解服务性能的关键在于了解其在各种压力条件下的表现。通过现有的测量框架，SRE可以帮助开发伙伴汇总服务性能数据，并利用其系统级视角提出提高容量或性能的优化建议。

### 配置管理、变更控制及速度

尽管各组织在硬件和服务配置以及环境变更管理方面的方法各异，SRE团队通过最大化自动化程度来加速变更过程，同时确保在既定的服务级别内保持性能。这可能包括构建或强化CI/CD框架和管道，或将自动化工具应用于物理基础设施如数据中心等场景。资源分配还包括退役不再需要的服务，以释放被无效占用的资源。SRE团队在此过程中扮演着推动者角色，帮助识别并淘汰那些不再为业务创造价值的服务。

### SRE实践演进阶段

许多组织在实现全面覆盖服务生命周期的功能性SRE实践中会经历三到四个主要阶段。这一演变是从价值链末端的反应性姿态向更早介入设计阶段转变的过程。随着SRE团队效能提升，他们与开发团队的合作质量也得到改善，从而使得SRE参与变得更为受欢迎。

#### 第一阶段：应急响应
初期，团队处于高度反应状态，面对复杂性和意外交互带来的挑战，几乎只能专注于处理当前危机。此时，暂停新功能开发以便集中精力降低错误率是一种常见策略。此外，增加人手以促进自动化也是缓解压力的有效方法之一。

#### 第二阶段：守门员
当紧急情况逐渐减少时，SRE团队可能会倾向于成为生产系统变更审批的瓶颈。虽然这种做法在小规模环境中可行，但随着组织扩张，必须鼓励开发团队自主采取正确行动。此阶段强调SRE作为合作伙伴而非障碍物的重要性。

#### 第三阶段：倡导者/合作者
通过建立共同认可的标准（例如《SRE手册》第三章介绍的错误预算概念），SRE可以从关键路径上移除自身，并依赖客观度量标准。这样可以与开发团队更好地协作，确保设计时就考虑到了可靠性因素，并针对潜在故障点进行防护。

#### 第四阶段：催化剂
最终，SRE应发挥类似于化学催化剂的作用——不仅促进变革发生，还指导整个过程。从服务诞生至终结，SRE全程陪伴左右，为开发人员提供必要工具，使其深刻理解代码对整体服务质量的影响。在这个层次上运作的SRE能够超越单纯的人力投入，实现更大范围内的积极变化。

### 不同发展阶段的挑战

不同成熟度级别的团队有着截然不同的优先事项和关注焦点，这可能导致沟通上的障碍。认识到这一点对于避免误解至关重要。直接从初级阶段跃升至高级别往往不可行；即使有高层支持，也需要经过一定时间的成长才能达到理想状态。

### 成功要素

有效的SRE具备全局视角，能够分析业务指标并解决看似棘手的问题。他们还需擅长发现并修复那些大多数开发者可能忽视但却影响网站稳定性的边缘案例。在线服务的成功依赖于持续不断地通过工程技术保证高水平的可用性和用户体验。

---

**参考资料**

- Victor Chircu, "Understanding the 8 fallacies of Distributed Systems"
- Carol Dweck, "The power of believing that you can improve" (TEDxNorrkoping)
- Peter M. Senge, *The Fifth Discipline: The Art and Practice of the Learning Organization*
- Stanley McChrystal, *Team of Teams: New Rules of Engagement for a Complex World*
- Erik Hollnagel et al., "From Safety-I to Safety-II: A White Paper", EUROCONTROL 2013

**编者简介**

Kurt Anderson的职业生涯始于NASA喷气推进实验室的大数据处理工作。自90年代初以来，他一直致力于共享标准制定，并教授相关技术规范。目前，Kurt是LinkedIn产品SRE团队的一员，并担任消息、恶意软件和移动反滥用工作组项目委员会主席之一。他在多个行业会议上发表过关于可靠性、身份验证和安全性的演讲。