new approach called differential slicing. Figure 4 presents
an overview of our approach. It comprises three phases:
preparation, trace alignment, and Slice-Align.
The preparation phase has two steps. First, the program
is executed twice, on the given input(s), inside the execution
monitor [23]. The execution monitor tracks the program
execution for each run and produces execution traces, Tf
and Tp, containing all executed instructions and the contents
of each instruction’s operands. In addition, it also produces
allocation logs Af and Ap that capture information about
the heap allocation/deallocation operations performed by the
program during each run. The second preparation step is
Figure 4: System architecture. The darker box was previ-
ously available.
post-dominator extraction, which takes as input the program
and the execution traces, computes the control-ﬂow graph
(CFG) for each function that appears in the execution traces,
and outputs the immediate post-dominator information for
those functions. Intuitively, immediate post-dominance is
analogous to the re-convergence point of a branch in struc-
tured programming (e.g., the closing curly bracket in C).
Post-dominance can be computed efﬁciently using compiler
algorithms [17].
After the preparation completes, the next phase is trace
alignment, which is required for identifying the execution
differences that form the causal difference graph. This phase
uses an efﬁcient trace alignment algorithm that we have
developed based on Execution Indexing [29]. It outputs the
aligned/disaligned regions in a single pass over the traces.
The ﬁnal phase is Slice-Align, which is needed because
many execution differences identiﬁed using the alignment re-
sults may not be relevant to the target difference. Slice-Align
focuses the analysis on the execution differences that are
causally relevant to the target difference. Slice-Align builds
the causal difference graph dynamically as the execution
traces are scanned backwards in lockstep, starting from
the target difference. It alternately employs dynamic slicing
and the alignment results. While no ﬂow differences are
found, it uses dynamic slicing to establish the sequence
of value differences that affect the target. When a ﬂow
350
difference is encountered, e.g., an execution omission, it
uses the alignment results to identify the divergence point
that dominates the disaligned regions. Once found, dynamic
slicing is used to capture the value differences that caused
that divergence point until another ﬂow difference is found.
This sequence repeats until the input differences are reached.
trace algorithm that requires just a single pass over the traces
and works directly on binaries without access to source code.
In this section, we ﬁrst provide background information
on the Execution Indexing technique in Section III-A and
then we describe our trace alignment algorithm in Sec-
tion III-B.
Graph layers. The resulting Basic graph contains only the
execution differences that are relevant to the target differ-
ence. Disaligned regions in the Basic graph are summarized
as a single node to help the analyst quickly understand which
ﬂow differences are relevant to the target difference and
why they happened. An analyst who is interested in what
happened in those disaligned regions can request what we
call an Enhanced graph, which expands the Basic graph
by incorporating the relevant dependencies in a disaligned
region. Such multi-layer approach gives the analyst a small
Basic graph that often sufﬁces for analysis as well as the
ability to produce ﬁner-grained Enhanced graphs for speciﬁc
divergence regions.
Address normalization. An important feature for the scal-
ability of our approach is the ability to prune edges in the
graph when an operand of an aligned instruction is not a
value difference. Without pruning, the graph can quickly
explode in size because the nodes that explain how those
identical values were generated need to be included, even
if identical values cannot be the cause of an execution
difference. However, many operands in the execution contain
pointers that may have different values across runs but are
still equivalent to each other (e.g., the objects pointed to
are equivalent). We have developed an address normaliza-
tion technique that identiﬁes operands that hold equivalent
pointers. By pruning those operands we obtain graphs that
are in some cases one to two orders of magnitude smaller
than without the address normalization.
Implementation. We have implemented differential slicing
in approximately 6k lines of Objective Caml code. The
trace alignment and post-dominator modules are written in
4k lines of code (excluding the call stack code and APIs
for creating control ﬂow graphs, which we adapted for our
system from previous work). The Slice-Align module is
written in 2k lines of code. The execution monitor was
previously available [23].
III. TRACE ALIGNMENT
The ﬁrst step in our differential slicing approach is to
align the failing and passing execution traces to identify
similarities and differences between the executions. Our
trace alignment algorithm builds on the previously proposed
Execution Indexing technique [29], where an execution
index uniquely identiﬁes a point in an execution and can be
used to establish correspondence across executions. Unlike
previous work, we propose an efﬁcient ofﬂine alignment
A. Background: Execution Indexing
Execution Indexing captures the structure of the program
at any given point in the execution, uniquely identifying
the execution point, and uses that structure to establish a
correspondence between execution points across multiple
executions of the program [29]. Compared to using static
program points to establish a correspondence, Execution
Indexing is able to align points inside loops and functions
with multiple call sites.
Xin et al. propose an online algorithm to compute the
current execution index as the execution progresses, which
uses an indexing stack, where an entry is pushed to the
stack when a branch or method call is seen in the execution,
and an entry is popped from the stack if the immediate
post-dominator of the branch is executed or the method
returns. Note that a statement may be the immediate post-
dominator of multiple branches or call statements and can
thus pop multiple entries from the stack. For example, a
return instruction is the immediate post-dominator of all the
branches in the stack for the current function invocation. Xin
et al. also propose optimizations to minimize the number
of push and pop operations for cases that include, among
others, avoiding instrumenting instructions with a single
static control dependence and using counters for loops or
repeated predicates.
Execution Indexing captures the structure of the execution
starting at an execution point that is called an anchor point.
To compare the structure of two executions, Execution In-
dexing requires as input a point in each execution considered
semantically equivalent (i.e., already aligned). These can be
automatically deﬁned or provided by the analyst. We explain
our anchor point selection in Section III-B.
B. Trace Alignment Algorithm
Our trace alignment algorithm compares two execution
traces representing different runs of the same program. There
are two main issues in pairwise trace alignment: designing
an efﬁcient algorithm that scales to large traces, and selecting
anchor points. We discuss both issues next.
Algorithm. In this paper we propose an efﬁcient
trace
alignment implementation that performs a single pass over
both traces in parallel, computing the execution index and
the alignment along the way. Our trace alignment algorithm
is shown in Figure 5. The function updateIndex updates
the Execution Indexing stack for each trace. If the current
instruction is a control-transfer instruction, it selects the
correct post-dominator by looking at the current and next
351
Input: A0, A1 // anchor points
Output: RL // list of aligned and disaligned regions
EI0, EI1 : execution index stacks ← Stack.empty();
insn0, insn1 ← A0, A1; // current instructions
RL ← ∅;
while insn0, insn1 6=⊥ do
cr ← regionBegin(insn0, insn1, aligned)
// Aligned-Loop: Traces aligned. Walk until disaligned
while EI0 = EI1 do
foreach i ∈ 0, 1 do
EIi ← updateIndex(EIi, insni);
cr ← regionExtend(insni, cr);
insni++;
end
end
RL ← RL ∪ cr;
cr ← regionBegin(insn0, insn1, disaligned)
// Disaligned-Loop: Traces disaligned. Walk until realigned
while EI0 6= EI1 do
while |EI0| 6= |EI1| do
j ← (|EI0| > |EI1|) ? 0 : 1;
while |EIj | ≥ |EI1−j | do
EIj ← updateIndex(EIj , insnj );
cr ← regionExtend(insnj , cr);
insnj ++;
end
end
end
RL ← RL ∪ cr;
end
Figure 5: Algorithm for trace alignment.
instruction (i.e.,
the target of the control ﬂow transfer)
and pushes the post-dominator into the stack. While the
current instruction corresponds to the post-dominator at the
top of the stack,
it pops it. Our experience shows that
it is important to handle unstructured control ﬂow (e.g.,
setjmp/longjmp), which requires building robust call
stack tracking code [5].
The trace alignment algorithm proceeds as follows. It
starts with both anchor points being processed in the
Aligned-Loop. This loop creates an aligned region by
stepping through both traces until a disaligned instruction
is found. While the Execution Index (EI) for the cur-
rent instruction in each trace (insn0,insn1) is the same,
both instructions are added to the current alignment region
(cr) and the Execution Index is updated for each trace
(updateIndex).
At a divergence point, the current region is added to the
output (RL), a new disaligned region is created (cr) and
Disaligned-Loop is entered. This loop searches for the
realignment point in the two traces. Realignment can only
happen after the top entry (at the time of disalignment)
on the stack has been popped, because in order for the
Execution Indexes to match, any additional entries added
to the stack after this point will ﬁrst need to be popped.
Intuitively, this means that when the executions diverge, the
ﬁrst possible place they can realign is at the post-dominator
of the divergence point.
352
The Disaligned-Loop walks both traces individually
until the top entry in the stack at the time the disalignment
point was found has been removed. If the stacks are equal
at this point, it means that the traces have realigned at the
immediate post-dominator. The current disalignment region
ends and Aligned-Loop continues at this new aligned
point. If the call stacks are unequal in size, the trace with
the larger call stack is traversed until its call stack matches
or falls below the size of the other trace’s call stack. This
process is repeated until the two call stacks are equal in
size. Then, the current Execution Indexes are compared. If
not equal, the Disaligned-Loop repeats, popping the
current top entry until the two stacks are equal in size, then
recomparing the Execution Indexes.
Anchor point selection. To use Execution Indexing for
alignment, we need an anchor point: two instructions (one
in each trace) that are considered aligned. While this may
seem like a circular problem, there are some points in the
execution where we are conﬁdent that both executions are
aligned. For example, if we always start tracing a program
at
the ﬁrst
then we
instruction in both traces as anchor
can select
points, as they are guaranteed to be the same program point.
Sometimes, starting execution traces from process creation
may produce execution traces that are too large. In those
cases, we can start the traces when the program reads its
ﬁrst input byte, so the ﬁrst instruction in each trace is an
anchor point.
instruction for the created process,
the ﬁrst
IV. SLICE-ALIGN
The trace alignment results capture all ﬂow differences
between both executions and establish instruction correspon-
dence so that value differences in corresponding instructions
can be identiﬁed. However, the total number of execution
differences can be large and many of those differences
may not be relevant to the target difference. In this section
we present Slice-Align, a technique to produce the causal
difference graph, which captures only the causal sequences
of execution differences that affected the target difference.
The root differences in the graph correspond to the input
differences that induced the target difference.
A. The Causal Difference Graph
The causal difference graph is a directed graph where
each node in the graph represents an instruction in an
execution trace. The graph has two sets of nodes and
edges: Np, Ep from the passing trace and Nf , Ef from
the failing trace. There are two types of edges: directed
edges representing immediate data and control dependencies
between two instructions in the same trace, and undirected
edges representing that two instructions in different traces
are aligned. Directed edges are labeled to indicate whether
they represent a control or data dependency and, for data
dependencies, which operand the edge corresponds to as
well as the value of the operand in the execution.
Note that an instruction has at most one immediate dy-
namic control dependency, but can have multiple immediate
data dependencies, e.g., one for each operand that it uses
(including memory addressing registers). An operand can
also depend on multiple instructions, for example when each
byte in a 32-bit register was deﬁned at a different instruction.
In these cases, operands are broken into individual bytes
and the edges labeled accordingly, so that the analyst can
differentiate the multiple out-edges of a node.
Layers. The graph has two levels of granularity, depending
on how much information the analyst wants about
the
dependencies inside disaligned regions. The Basic graph
summarizes each disaligned region with a single node that
represents all execution differences inside that region. This
layer is intended to help the analyst quickly understand
which disaligned regions are causally related to the target
difference and why they happened.
An analyst may be interested in “zooming in” on one of
those disaligned regions to understand the ﬂow differences
that it contains. For example, for an execution omission
error, the disaligned region in the passing trace may in-
clude the initialization statement that was not executed in
the failing trace. Although the Basic graph captures the
cause of the execution omission, the analyst may also be
interested in looking at the missing initialization. To handle
these situations, Slice-Align provides an option to explicitly
include the causal sequences of execution differences from
one or more speciﬁc disaligned regions into the Basic graph,
creating an Enhanced graph.
In the next section we describe the Slice-Align algorithm.
We ﬁrst describe the algorithm that builds the Basic graph
and then the different handling of the disaligned regions that
is used to build the Enhanced graph.
B. Basic Graph Algorithm
At a high level,
the Slice-Align algorithm combines
dynamic slicing with trace alignment. In particular, it uses
backwards dynamic slicing techniques [1], [14], [31] to
identify immediate data dependencies of value differences,
while using the trace alignment results to identify execution
differences. As it
it adds
to the graph the value and ﬂow differences with a causal
relationship to the target difference.
traverses the execution traces,
Overview. We present the pseudocode for the Slice-Align
algorithm in Figure 6. The algorithm loops over a worklist of
pairs of instructions, for which it needs to ﬁnd dependencies.
The worklist is initialized with the instructions that form the
target difference. In each iteration the algorithm pops a pair
from the worklist, processes it (potentially adding new nodes
to the worklist), and repeats until the worklist is empty.
When a pair of instructions (insnp,insnf ) is popped from
the worklist, a new node is added to the graph for each
353
Input: TD /* target difference */, RL /* alignment results */
Output: N, E // nodes and edges in causal difference graph
worklist : stack of instruction-pairs ← (TDp, TDf );
processed : boolean lookup table ← ∅;
while !worklist.isEmpty() do
(insnp, insnf ) ← worklist.pop();
Np,f ← Np,f ∪ insnp,f ;
processed(insnp, insnf ) ← true;
if isAligned(insnp, insnf , RL) then
slice operands ← valDifferences(insnp, insnf );
forall operand ∈ slice operands do
dep ← immDataDeps(operand);
Ep,f ← Ep,f ∪ newEdge(insnp,f → depp,f );
if !processed(depp, depf ) then
worklist.push(depp, depf );
end
end
else
dtype ← divRegionType(insnp, insnf , RL);
switch dtype do
// See Table I for explanation of divergence types
case ExtraExec or ExecOmission or ExecDiff
div ← domDivPt(dtype, insnp, insnf , RL);
Ep,f ← Ep,f ∪ newEdge(insnp,f → divp,f );
if !processed(divp, divf ) then
worklist.push(divp, divf );
end
case InvalidPointer
if wildWrite(insnp, insnf ) then
alignedp ← alignedInsn(insnf , RL);
if !processed(alignedp, insnf ) then
worklist.push(alignedp, insnf );
end
end
end
end
end
Figure 6: Algorithm for Basic graph.
instruction. Then, the isAligned function checks whether
the pair of instructions is aligned, using the results of the
trace alignment step. If so, the algorithm looks for value
differences in its operands using the valDifferences
function, which given two corresponding operands, checks
whether their values are identical or, if they are pointers,
compares their normalized values (Section IV-E). For each
operand that differs in value, the function immDataDeps
obtains its immediate (non-transitive) data dependencies,
i.e., the instructions in the same trace that set the value of
any byte in the operand. For each data dependency returned
by immDataDeps, the algorithm adds an edge between the
current instruction and the instruction that it depends on. If
the immediate dependencies have not been processed yet,
they are added to the worklist.
If the current pair of instructions are not aligned with
each other, a divergence has been found. At this point the
Basic graph algorithm switches to ﬁnding the dominant
divergence point, which is the closest divergence point
that dominates the disaligned instructions. Intuitively, this
dominant divergence point is the cause of the divergence
and corresponds to a ﬂow-transfer instruction that leads to
Case
1
2
3
4
Name
Extra Execution
Execution Omission
Execution Difference Disaligned Disaligned
Invalid Pointer
Passing
Aligned
Disaligned
Disaligned
Aligned
Failing
4a Wild Read
4b Wild Write
Aligned
Aligned
Aligned
Aligned
Aligned
Aligned
Table I: The divergence types.
two different targets in both executions, for which following
each branch would eventually lead to each of the disaligned
instructions, and for which there is no earlier realignment