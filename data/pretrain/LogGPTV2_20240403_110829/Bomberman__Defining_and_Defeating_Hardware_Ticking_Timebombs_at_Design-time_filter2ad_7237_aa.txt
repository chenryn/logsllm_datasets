title:Bomberman: Defining and Defeating Hardware Ticking Timebombs at Design-time
author:Timothy Trippel and
Kang G. Shin and
Kevin B. Bush and
Matthew Hicks
2
5
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
¬©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Bomberman: DeÔ¨Åning and Defeating
Hardware Ticking Timebombs at Design-time
Timothy Trippel‚àó, Kang G. Shin
Computer Science & Engineering
University of Michigan
Ann Arbor, MI
{trippel,kgshin}@umich.edu
Kevin B. Bush
Cyber-Physical Systems
MIT Lincoln Laboratory
Lexington, MA
PI:EMAIL
Matthew Hicks‚àó‚Ä†
Computer Science
Virginia Tech
Blacksburg, VA
PI:EMAIL
Abstract‚ÄîTo cope with ever-increasing design complexities,
integrated circuit designers increase both the size of their design
teams and their reliance on third-party intellectual property (IP).
Both come at the expense of trust: it is computationally infeasible
to exhaustively verify that a design is free of all possible malicious
modiÔ¨Åcations (i.e., hardware Trojans). Making matters worse,
unlike software, hardware modiÔ¨Åcations are permanent: there is
no ‚Äúpatching‚Äù mechanism for hardware; and powerful: they serve
as a foothold for subverting software that sits above.
To counter this threat, prior work uses both static and dynamic
analysis techniques to verify hardware designs are Trojan-free.
Unfortunately, researchers continue to reveal weaknesses in
these ‚Äúone-size-Ô¨Åts-all‚Äù, heuristic-based approaches. Instead of
attempting to detect all possible hardware Trojans, we take
the Ô¨Årst step in addressing the hardware Trojan threat in a
divide-and-conquer fashion: deÔ¨Åning and eliminating Ticking
Timebomb Trojans (TTTs), forcing attackers to implement larger
Trojan designs detectable via existing veriÔ¨Åcation and side-
channel defenses. Like many system-level software defenses (e.g.,
Address Space Layout Randomization (ASLR) and Data Execu-
tion Prevention (DEP)), our goal is to systematically constrict the
hardware attacker‚Äôs design space.
First, we construct a deÔ¨Ånition of TTTs derived from their
functional behavior. Next, we translate this deÔ¨Ånition into fun-
damental components required to realize TTT behavior in
hardware. Using these components, we expand the set of all
known TTTs to a total of six variants‚Äîincluding unseen variants.
Leveraging our deÔ¨Ånition, we design and implement a TTT-
speciÔ¨Åc dynamic veriÔ¨Åcation toolchain extension, called Bomber-
man. Using four real-world hardware designs, we demonstrate
Bomberman‚Äôs ability to detect all TTT variants, where previous
defenses fail, with <1.2% false positives.
Index Terms‚ÄîHardware Trojans, Ticking Timebombs, 3rd
Party IP, VeriÔ¨Åcation
I. INTRODUCTION
As microelectronic hardware continues to scale, so too
have design complexities. To design an Integrated Circuit
(IC) of modern complexity targeting a 7 nm process requires
500 engineering years [1], [2]. Because it is impractical to
take 500 years to create a chip, semiconductor companies
reduce time-to-market by adding engineers: increasing both
the size of their design teams and their reliance on 3rd-party
Intellectual Property (IP). Namely, they purchase pre-designed
* Work completed at MIT Lincoln Laboratory.
‚Ä† Corresponding faculty author


	














		
	
	

		

Fig. 1. Ticking Timebomb Trojan (TTT). A TTT is a hardware Trojan that
implements a ticking timebomb trigger. Ticking timebomb triggers monotoni-
cally move closer to activating as the system runs longer. In hardware, ticking
timebomb triggers maintain a non-repeating sequence counter that increments
upon receiving an event signal.
blocks for inclusion in their designs, such as CPU cores and
cryptographic accelerators (e.g., AES). This year, analysts
estimate that a typical System-on-Chip (SoC) will contain over
90 IP blocks [3]. From a security perspective, this reduces trust
in the Ô¨Ånal chip: with an increased number of (both in-house
and external) designers molding the design, there is increased
opportunity for an attacker to insert a hardware Trojan.
Hardware Trojans inserted during design time are both
permanent and powerful. Unlike software, hardware can-
not be patched in a general-purpose manner; repercussions
of hardware Ô¨Çaws echo throughout the chip‚Äôs lifetime. As
hardware vulnerabilities like Meltdown [4], Spectre [5], and
Foreshadow [6] show, replacement is the only comprehensive
mitigation, which is both costly and reputationally damaging.
Moreover, vulnerabilities in hardware cripple otherwise secure
software that runs on top [7]. Thus, it is vital that hardware
designers verify their designs are Trojan-free.
Prior work attempts to detect hardware Trojans at both
design and run time. At design time, researchers propose
static (FANCI [8]) and dynamic (VeriTrust [9] and UCI [10])
analyses of the Register Transfer Level (RTL) design and
gate-level netlists to search for rarely-used circuitry,
i.e.,
potential Trojan circuitry. At run time, researchers: 1) employ
hardware-implemented invariant monitors that dynamically
verify design behavior matches speciÔ¨Åcation [11], [12], and
2) scramble inputs and outputs between trusted and untrusted
components [13] to make integration of a hardware Trojan
into an existing design intractable. These attempts to develop
general, ‚Äúone-size-Ô¨Åts-all‚Äù, approaches inevitably leave chips
¬© 2021, Timothy Trippel. Under license to IEEE.
DOI 10.1109/SP40001.2021.00052
970
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
vulnerable to attack [14]‚Äì[16].
Verifying a hardware design is Trojan-free poses two
technical challenges. First, hardware Trojan designs use the
same digital circuit building blocks as non-malicious circuitry,
making it difÔ¨Åcult to differentiate Trojan circuitry from non-
malicious circuitry. Second, it is infeasible to exhaustively
verify, manually or automatically, even small hardware de-
signs [17], let alone designs of moderate complexity. These
challenges are the reason why ‚Äúone-size-Ô¨Åts-all‚Äù approaches
are incomplete and akin to proving a design is bug-free.
Instead of verifying a design is free of all Trojan classes, we
advocate for a divide-and-conquer approach, breaking down
the RTL Trojan design space and systematically ruling out
each Trojan class. We begin this journey by eliminating the
most pernicious RTL hardware Trojan threat: the TTT. As
Waksman et al. state [11], [13], when compared with other
stealthy design-time Trojans (i.e., data-based Trojans), TTTs
provide ‚Äúthe biggest bang for the buck [to the attacker] ...
[because] they can be implemented with very little logic, are
not dependent on software or instruction sequences, and can
run to completion unnoticed by users.‚Äù Moreover, TTTs are
a Ô¨Çexible Trojan design in terms of deployment scenarios.
An attacker looking to deploy a TTT does not require
any a priori knowledge of how the victim circuit will be
deployed at the system level, nor post-deployment (physical
or remote) access to the victim circuit [11], [13]. By
eliminating the threat of TTTs, we mimic the attack-speciÔ¨Åc
nature of system-level software defenses like DEP and ASLR
in hardware, i.e., we force RTL attackers to implement Trojan
designs that require post-deployment attacker interaction. This
is the hardware analog to defending against data injection
attacks in software, forcing attackers to employ more complex
data reuse attacks; a necessary part of a comprehensive,
layered defense.
To ensure our defense is systematic and avoids implicit
assumptions based on existing TTTs, we Ô¨Årst deÔ¨Åne an abstract
TTT based on its behavior. At the heart of any TTT is a trigger
that tracks the progression of values that form some arbitrary
sequence. The simplest concrete example is a down-counter
that releases the attack payload when it reaches zero. Thus,
we deÔ¨Åne TTTs as devices that track an arbitrary sequence of
values constrained by only two properties:
‚Ä¢ the sequence never repeats a value,
‚Ä¢ the sequence is incomplete.
Fig. 1 shows the basic hardware components required to
implement such a sequence counter in hardware. It has three
building blocks: 1) State-Saving Components (SSCs), 2) an
increment value, and 3) an increment event.
To understand the power our deÔ¨Ånition gives to attackers,
we use it to enumerate the space of all possible TTT triggers.
We deÔ¨Åne a total of six TTT variants, including distributed
TTTs that couple together SSCs scattered across the design to
form a sequence counter and non-uniform TTTs that conceal
their behavior by incrementing with inconsistent values, i.e.,
expressing what looks like a random sequence.
We leverage our deÔ¨Ånition of TTTs to locate SSCs in a
design that behave like TTT triggers during functional veriÔ¨Å-
cation. SpeciÔ¨Åcally, we reduce the Trojan search space of the
Design Under Test (DUT) by analyzing only the progression of
values expressed by SSCs of potential TTT triggers. We design
and implement an automated extension to existing functional
veriÔ¨Åcation toolchains, called Bomberman, for identifying
the presence of TTTs in hardware designs. Bomberman com-
putes a Data-Flow Graph (DFG) from a design‚Äôs Hardware
Description Language (HDL) (either pre- or post- synthesis)
to identify the set of all combinations of SSCs that could
construct a TTT. Initially, Bomberman assumes all SSCs
are suspicious. As Bomberman analyzes the results obtained
from functional veriÔ¨Åcation, it marks any SSCs that violate
our deÔ¨Ånition as benign. Bomberman reports any remaining
suspicious SSCs to designers, who use this information to
create a new test case for veriÔ¨Åcation, or manually inspect
connected logic for malice.
We demonstrate the effectiveness of Bomberman by im-
planting all six TTT variants into four different open-source
hardware designs: a RISC-V CPU [18], an OR1200 CPU [19],
a UART [19] module, and an AES accelerator [20]. Even with
veriÔ¨Åcation simulations lasting less than one million cycles,1
Bomberman detects the presence of all TTT variants across
all circuit designs with a false positive rate of less than 1.2%.
This paper makes the following contributions:
‚Ä¢ An abstract deÔ¨Ånition and component-level breakdown of
TTTs (¬ßIV).
‚Ä¢ Design of six TTT variants (¬ßIV-C), including new vari-
ants that evade existing defenses (¬ßVI-C1).
‚Ä¢ Design and implementation of an automated veriÔ¨Åcation
extension, Bomberman, that identiÔ¨Åes TTTs implanted in
RTL hardware designs (¬ßV).
‚Ä¢ Evaluation of Bomberman‚Äôs false positive rate (¬ßVI-B)
and a comparative security analysis against a range
of both TTT-focused and ‚Äúone-size-Ô¨Åts-all‚Äù design-time
hardware Trojan defenses (¬ßVI-C); Bomberman is the
only approach capable of detecting all TTT variants,
including state-of-the-art pseudo-random [21] and non-
deterministic [22] TTTs.
‚Ä¢ Algorithmic complexity analysis (¬ßVI-D) of Bomber-
man‚Äôs SSC Enumeration and SSC ClassiÔ¨Åcation stages.
‚Ä¢ Open-source release of Bomberman and TTTs [23].
II. BACKGROUND
A. IC Development Process
Developing complex ICs, like the Apple A13 Bionic chip
that contains 8.5 billion transistors [24], employs several de-
sign phases (Fig. 2) that are heavily augmented with Computer
Aided Design (CAD) tools. First, to minimize time-to-market,
hardware designers often purchase existing IP blocks from
third parties to integrate into their designs. Next, designers
integrate all third-party IP, and describe the behavior of any
custom circuitry at the RTL, using a Hardware Description
Language (HDL) like Verilog. Next, CAD tools synthesize
1Typical veriÔ¨Åcation simulations last ‚âà millions of cycles [11].
971
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 







 














	







