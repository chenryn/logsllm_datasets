title:Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded
Computer Architectures
author:Albert Meixner and
Daniel J. Sorin
Dynamic Veriﬁcation of Memory Consistency in Cache-Coherent
Multithreaded Computer Architectures
Albert Meixner
Dept. of Computer Science
Duke University
PI:EMAIL
Abstract
Multithreaded servers with cache-coherent shared mem-
ory are the dominant type of machines used to run criti-
cal network
services and database management
systems. To achieve the high availability required for
these tasks, it is necessary to incorporate mechanisms
for error detection and recovery. Correct operation of
the memory system is deﬁned by the memory consistency
model. Errors can therefore be detected by checking if
the observed memory system behavior deviates from the
speciﬁed consistency model. Based on recent work, we
design a framework for dynamic veriﬁcation of memory
consistency (DVMC). The framework consists of mecha-
nisms to verify three invariants that are proven to guar-
antee that a speciﬁed memory consistency model is
obeyed. We describe an implementation of the frame-
work for the SPARCv9 architecture and experimentally
evaluate its performance using full-system simulation of
commercial workloads.
1.  Introduction
Computer system availability is crucial for the multi-
threaded (including multiprocessor) systems that run
critical
infrastructure. Unless architectural steps are
taken, availability will decrease over time as implemen-
tations use larger numbers of increasingly unreliable
components in search of higher performance. Backward
error recovery (BER) is a cost-effective mechanism [26,
21] to tolerate such errors, but it can only recover from
errors that are detected in a timely fashion. Tradition-
ally, most systems employ localized error detection
mechanisms, such as parity bits on cache lines and
memory buses, to detect errors. While such specialized
mechanisms detect the errors that they target, they do
not comprehensively detect whether the end-to-end [24]
behavior of the system is correct. Our goal is end-to-end
error detection for multithreaded memory systems,
which would subsume localized mechanisms and pro-
vide comprehensive error detection.
Daniel J. Sorin
Dept. of Electrical and Computer Engineering
Duke University
PI:EMAIL
Our previous work [16] achieved end-to-end error
detection for a very restricted class of multithreaded
memory systems. In that work, we designed an all-hard-
ware scheme for dynamic veriﬁcation (online checking)
of sequential consistency (DVSC), which is the most
restrictive consistency model. Since the end-to-end cor-
rectness of a multithreaded memory system is deﬁned
by its memory consistency model, DVSC comprehen-
sively detects errors in systems that implement sequen-
tial consistency (SC). However, DVSC’s applications
are limited because SC is not frequently implemented.
In this paper, we contribute a general framework for
designing dynamic veriﬁcation hardware for a wide
range of memory consistency models,
including all
those commercially implemented. Relaxed consistency
models, discussed in Section 2., enable hardware and
software optimizations to reorder memory operations to
improve performance. Our framework for dynamic veri-
ﬁcation of memory consistency (DVMC), described in
Section 3., combines dynamic veriﬁcation of
three
invariants to check memory consistency. Section 4. con-
tains a sketch of the framework correctness proof. In
Section 5. we describe a checker design for each invari-
ant and give a SPARCv9 based implementation of
DVMC. Section 6. introduces the experimental method-
ology used to evaluate DVMC. We present and analyze
our results in Section 7.. Section 8. compares our work
with prior work on dynamic veriﬁcation.
2.  Background
This work addresses dynamic veriﬁcation of shared
memory multithreaded machines,
including simulta-
neously multithreaded microprocessors [27], chip multi-
processors, and traditional multiprocessor systems. For
brevity, we will use the term processor to refer to a
physical processor or a thread context on a multi-
threaded processor. We now describe the program exe-
cution model and consistency models.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:31:09 UTC from IEEE Xplore.  Restrictions apply. 
2.1.  Program Execution Model
A simple model of program execution is that a single
thread of instructions is sequentially executed in pro-
gram order. Modern microprocessors maintain the illu-
sion of sequential execution, although they actually
process instructions in parallel and out of program order.
To capture this behavior and the added complexity of
multi-threaded execution, we must be precise when
referring to the different steps necessary to process a
memory operation (an instruction that reads or writes
memory). A memory operation executes when its results
(e.g., load value in destination register) become visible
to instructions executed on the same processor. A mem-
ory operation commits when the state changes are ﬁnal-
ized and can no longer be undone. In the instant at
which the state changes become visible to other proces-
sors, a memory operation performs. A more formal deﬁ-
nition of performing a memory operation can be found
in Gharachorloo et al. [9].
2.2.  Memory Consistency Models
An architecture’s memory consistency model [1]
speciﬁes the interface between the shared memory sys-
tem and the software. It speciﬁes the allowable soft-
ware-visible interleavings of the memory operations
(loads, stores, and synchronization operations) that are
performed by the multiple threads. For example, SC
speciﬁes that there exists a total order of memory opera-
tions that maintains the program orders of all threads
[12]. Other consistency models are less restrictive than
SC, and they differ in how they permit memory opera-
tions to be reordered between program order and the
order in which the operations perform. These reorder-
ings are only observed by other processors, but not by
the processor executing them due to the in-order pro-
gram execution model.
We specify a consistency model as an ordering
table, similar to Hill et al. [11]. Columns and rows are
labeled with the memory operation types supported by
the system, such as load, store, and synchronization
operations (e.g., memory barriers). When a table entry
contains the value true, the operation type OPx in the
entry’s row label has a performance ordering constraint
with respect to the operation type in the entry’s column
label OPy. If an ordering constraint exists between two
operation types, OPx and OPy, then all operations of
type OPx that appear before any operation Y of type
OPy in program order must also perform before Y.
Consistency
2nd
Table 1
shows
Table 1. Processor
an
ordering table for proces-
sor consistency (PC). In
PC, an ordering require-
ment exists between a load
and all stores that follow it
in program order. That is,
any load X that appears before any store Y in the pro-
gram order also has to perform before Y. However, no
ordering requirement exists between a store and subse-
quent loads. Thus, even if store Y appears before load X
in program order, X can still perform before Y.
1st
Load
Store
Load
true
false
Store
true
true
A truth table is not sufﬁcient to express all conceiv-
able memory consistency models, but a truth table can
be constructed for all commercially implemented con-
sistency models.
3.  Dynamic Veriﬁcation Framework
Based on the deﬁnitions in Section 2. we devise a
framework that breaks the veriﬁcation process into three
invariants that correspond to the three steps necessary
for processing a memory operation (shown in Figure 1).
First, memory operations are read from the instruction
stream in program order (<p) and executed by the pro-
cessor. At this point, operations impact microarchitec-
tural state but not committed architectural state. Second,
operations access the (highest level) cache in a possibly
different order, which we call cache order (<c). Consis-
tency models that permit reordering of cache accesses
enable hardware optimizations such as write buffers.
Some time after accessing the cache, operations perform
and become visible in the globally shared memory. This
occurs when the affected data is written back to memory
or accessed by another processor. At the global memory,
cache orders from all processors are combined into one
global memory order (<m).
Node
Node
Pipeline
<p
U
P
C
Pipeline
<p
U
P
C
Write Buffer
Write Buffer
<c
Caches
<c
Caches
<m
Global Memory
Figure 1. Operation Orderings in the System
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:31:09 UTC from IEEE Xplore.  Restrictions apply. 
Each of the three steps described above introduces
different error hazards, which can be dealt with efﬁ-
ciently at the time an operation takes the respective step.
The basic idea of the presented framework is to dynami-
cally verify an invariant for every step to guarantee it is
done correctly and thus verify that the processing of the
operation as a whole is error-free. The three invariants
(Uniprocessor Ordering, Allowable Reordering, and
Cache Coherence) described below are sufﬁcient
to
guarantee memory consistency as deﬁned below, which
we derive from Gharachorloo et. al [9]. We outline a
proof that these three invariants ensure memory consis-
tency in Section 4..
Deﬁnition 1: An execution is consistent with respect to
a consistency model with a given ordering table if there
exists a global order <m such that
• for X and Y of type OPx and OPy, it is true that if X
<p Y and there exists an ordering constraint
between OPx and OPy, then X <m Y, and
• a load Y receives the value from the most recent of
all stores that precede Y in either the global order
<m or the program order <p.
Uniprocessor Ordering. On a single-threaded sys-
tem, a program expects that the value returned by a load
equals the value of the most recent store in program
order to the same memory location. In a multithreaded
system, obeying Uniprocessor Ordering means that
every processor should behave like a uniprocessor sys-
tem unless a shared memory location is accessed by
another processor.
Allowable Reordering. To improve performance,
microprocessors often do not perform memory opera-
tions in program order. The consistency model speciﬁes
which reorderings between program order and global
order are legal. For example, SPARC’s Total Store
Order allows a load to be performed before a store to a
different address that precedes it in program order, while
this reordering would violate SC. In our framework,
legal reorderings are speciﬁed in the ordering table.
Cache Coherence. A memory system is coherent if
all processors observe the same history of values for a
given memory location. DVMC further requires that the
system observes
the Single-Writer/Multiple-Reader
(SWMR) property. This requirement is stronger than
coherence, but virtually all coherence protocols use
SWMR to ensure coherence. Relaxed consistency mod-
els do not strictly require coherence, but all shared-
memory systems of which we are aware (including
those made by Intel, Sun, IBM, AMD, and HP) are
based on a coherent memory system independent of the
consistency models that they implement. We do not con-
sider systems without coherent memory in this paper.
A system that dynamically veriﬁes all three invari-
ants in the DVMC framework obeys the consistency
model speciﬁed in the ordering table, regardless of the
mechanisms used to verify each invariant. Our approach
is conservative in that these conditions are sufﬁcient but
not necessary for memory consistency. General consis-
tency veriﬁcation without the possibility of false posi-
tives is NP-hard [10] and therefore not feasible at
runtime. DVMC’s goal is to detect transient errors, from
which we can recover with BER. DVMC can also detect
design and permanent errors, but for these errors for-
ward progress cannot be guaranteed. Errors in the
checker hardware added by DVMC can lead to perfor-
mance penalties due to unnecessary recoveries after
false positives, but do not compromise correctness.
4.  Proof Outline
Due to space constraints, we cannot include a formal
proof that DVMC’s three invariants ensure consistency,
but we provide the proof in a separate technical report
[17] and present a sketch of the argument here.
A key observation for understanding DVMC is that
in a system with the SWMR property (i.e., virtually all
current cache coherent systems) a memory operation
performs globally as soon as it accesses the highest level
of the local cache hierarchy. Therefore the global order-
ing of operations from a given processor is identical to
the cache access order at that processor. Thus, we can
dynamically verify the consistency model ordering
requirement in Deﬁnition 1 by checking that reorderings
between program order and cache access order are valid
and that the SWMR property was not violated. The
former is ensured by the Allowable Reordering invari-
ant, while the latter is guaranteed by the Cache Coher-
ence invariant.
To check that the data propagation requirement of
Deﬁnition 1 is satisﬁed, we need to determine if the
value for a given load matches that of the most recent
eligible store. We again leverage the SWMR property,
which guarantees that the value currently in a cache was
written by the most recent globally performed store to
that address under the assumption of correct value prop-
agation. The Cache Coherence invariant ensures that the
SWMR property holds and also guarantees that the data
in the cache matches that written by the store. Finally,
the Uniprocessor Ordering invariant ensures that a load
will receive the correct value when it is preceded in pro-
gram order by a store that accesses the same address and
performs after the load.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:31:09 UTC from IEEE Xplore.  Restrictions apply. 
Fetch
Decode
Issue
Execute
Verify
Retire
Execute
Memory
Controller
History
Veriﬁer
k
r
o
w
t
e
N
n
o
i
t
c
e
n
n
o
c
r
e
t
n
I
Execute
D
L
Cache
Controller
S
T
r
e
p
l
a
y
y
a
l
p
e
r
D
L
VC
L
D
p
e
r
f
o
r
m
e
d
c
h
a
n
g
e
S
t
a
t
e
Write
Buffer
S
T
p
e
r
f
o
r
m
e
d
CET
Check
Ordering Table
Check
Base System
Uniprocessor
Ordering
Checker
Allowable
Reordering
Checker
Coherence
Checker
Figure 2. Simpliﬁed pipeline for DVMC. Single node shown. Several structures (memory, caches, ...) omitted for clarity.
Table 2. Total Store Order
2nd
1st
Load
Store
Load
true
false
Store
true
true
Table 3. Partial Store Order
2nd
Stbar