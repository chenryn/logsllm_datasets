To connect from a Windows Server 2008 in a secure network to an Ubuntu server and read/write files easily using Python, you are considering using NFS (Network File System) with pynfs. However, you have some concerns about the stability and maintenance of pynfs, especially on Windows. 

### Key Points:
1. **NFS and pynfs on Windows:**
   - **pynfs** is primarily designed for Linux and may not be fully compatible or stable on Windows. There is limited information and community support for using pynfs on Windows.
   - The project does not appear to be actively maintained, as it is not available on PyPI and cannot be installed via pip. This raises concerns about its reliability and future updates.

2. **Alternatives:**
   - **Samba:** You mentioned that you prefer to avoid Samba, but it is a well-maintained and widely used solution for file sharing between Windows and Linux. It is also well-documented and has good support for Python.
   - **SSHFS (Secure Shell File System):** Another option is to use SSHFS, which allows you to mount a remote filesystem over SSH. This can be done using libraries like `paramiko` in Python, which is more actively maintained and supported.

3. **Recommendation:**
   - Given the lack of support and maintenance for pynfs, and the potential issues with running it on Windows, it might be better to consider other, more reliable solutions.
   - **Samba** is a robust and well-supported option, even though you initially wanted to avoid it.
   - **SSHFS** is another viable alternative, providing a secure and easy-to-use method for file access.

### Example with SSHFS and Paramiko:
Hereâ€™s a brief example of how you can use `paramiko` to read and write files over SSH:

```python
import paramiko

# Define the SSH connection parameters
hostname = 'your-ubuntu-host'
username = 'your-username'
password = 'your-password'

# Create an SSH client
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Connect to the Ubuntu server
ssh.connect(hostname, username=username, password=password)

# Define the remote and local file paths
remote_path = '/path/to/remote/file.txt'
local_path = 'C:\\path\\to\\local\\file.txt'

# Use SFTP to transfer files
sftp = ssh.open_sftp()

# Download a file from the remote server
sftp.get(remote_path, local_path)

# Upload a file to the remote server
sftp.put(local_path, remote_path)

# Close the SFTP session and SSH connection
sftp.close()
ssh.close()
```

### Conclusion:
While pynfs might seem like a good option, its lack of support and compatibility with Windows make it less desirable. Consider using Samba or SSHFS with `paramiko` for a more stable and maintainable solution. If you have any further questions or need more detailed guidance, feel free to ask!