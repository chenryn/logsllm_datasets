III. DESIGN CONSIDERATIONS
TABLE I: SeGShare’s access control model.
In this section, we ﬁrst describe an ideal ﬁle sharing system
to illustrate the features we expect from such a system, to
introduce notation, and to introduce a formal access control
model. Then, we describe the attacker model. Based on those
steps, we deduce a set of functional, performance and security
objectives. Finally, we present related work showing that no
existing solution fulﬁlls these objectives.
A. Ideal File Sharing System
A ﬁle system owner (FSO) has many users (U). Those
users want to share ﬁles via a ﬁle sharing system hosted at a
cloud provider. The FSO has an authentication service, which
provides an authentication token with identity information
to all users. W.l.o.g., we use a certiﬁcate authority (CA)
as authentication service and certiﬁcates as authentication
tokens throughout this paper. To use the system, users only
have to store the authentication token. They use this token
for authentication while establishing a secure channel with
an enclave running at the cloud provider. Without any spe-
cial hardware, users use the established secure channel for
the following requests: create/update/move/download/remove
ﬁles; create/list/move/remove directories; set ﬁle/directory per-
missions for an individual user or a group; create groups;
and change group memberships. All requests do not require
interaction with other users and authorization is done with
the identity information contained in the authentication token,
which leads to a separation of authentication and authorization.
As a result, as long as the identity information is preserved,
Element
U
G
P
FC
FD
F S
rG ⊂ U × G
rP ⊂ P × G × F S
rI ⊂ F S
rF O ⊂ G × F S
rGO ⊂ G × G
Description
Set of individual users u
Set of individual groups g; each user u has
a default group gu
Set of individual permissions p ∈ {pr, pw,
pdeny}
Set of stored individual content ﬁles fC
Set of stored individual directory ﬁles fD
File system F S = FC ∪ FD
(u, g) ∈ rG: user u is member of group g
(p, g, f ) ∈ rP : group g has permission p
for ﬁle f
f ∈ rI: ﬁle f inherits permissions from
its parent
(g, f ) ∈ rF O: group g owns ﬁle f
(g1, g2) ∈ rGO: group g1 owns group g2
We also expect the following features from the service.
(1) Immediate revocation, i.e., ﬁle permission or membership
updates, especially revocations, are enforced instantly without
time-consuming re-encryptions of ﬁles f ∈ F S. (2) A constant
number of ciphertexts for each f ∈ F S,
independent of
permissions and group memberships. (3) Conﬁdentiality and
integrity protection of all content ﬁles, the ﬁle system struc-
ture, permissions, existing groups, and group memberships.
(4) Storage space reduction by deduplicating ﬁles and using
the same encrypted ﬁles for different groups. (5) Rollback
protection for individual ﬁles and the whole ﬁle system.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
478
B. Attacker Model
We consider the CA trusted, i.e., it securely creates certiﬁ-
cates for users and securely provisions them. All users know
and trust the CA, more speciﬁcally its public key, which is
given in many corporate environments. An attacker controlling
multiple users should only have permissions according to the
union of permissions of the individual controlled users. At
the cloud provider, we assume a malicious attacker, i.e., an
attacker that does not need to follow the protocol and tries
to gain as much information as possible. Only the enclave
data and code are protected by a TEE and not accessible
by the attacker. The code is assumed not to have intentional
data leakage and it contains a hard-coded copy of the CA’s
public key. All other software is controlled by the attacker.
As a result, she can monitor and/or change data on disk
or in memory; rollback individual ﬁles or the whole ﬁle
system; send arbitrary requests to the enclave; view all network
communications; and monitor communication between the
untrusted and trusted software part. We do not protect the
number of ﬁles, the ﬁle sizes, and the ﬁle access pattern.
We note that research has shown that SGX is vulnerable to
various side-channel attacks, e.g., timing attacks [36], cache
attacks [37], or page faults [38]. Other research mitigates side-
channel attacks [39]–[41], detects side-channel attacks [42], or
proposes a data oblivious ﬁle system [43]. Side-channel attacks
and mitigations are orthogonal to our research and thus, we
do not consider them further. Hardware attacks and Denial of
Service (DoS) are out of scope.
C. Design objectives
Based on the ideal ﬁle sharing system and the attacker
model, Table II shows the functional, performance and security
objectives that we expect from a secure and ﬂexible ﬁle sharing
system.
D. Related Work
Conceptually, TEE-based key-value stores [44]–[47] are re-
lated as they also use enclaves to authenticate users; to receive
and send encrypted data over a secure channel; and to guar-
antee conﬁdentiality and integrity of data stored in untrusted
storage. However, they do not support the (overwhelming)
majority of objectives deﬁned in Table II. Especially they do
not support data sharing and dynamic (user- or group-based)
access control, which is the main focus of this paper.
In the remainder of this section, we discuss related ﬁle
sharing systems, which we distinguish between pure crypto-
graphically protected and TEE-supported ﬁle sharing systems.
In Table III, we present to which extent those systems fulﬁll
the deﬁned objectives. If applicable, the table shows on which
cryptographic access control mechanisms the systems are
based on. In the following, we ﬁrst describe those mechanisms
and then discuss highlights of Table III.
Cryptographic Access Control Mechanisms. A simple
access control mechanism is Hybrid Encryption (HE): a ﬁle is
encrypted with a unique, symmetric ﬁle key, and the ﬁle key
is encrypted with the public key of each user that should have
access. HE requires public-key management, e.g., by a PKI, to
establish a trusted connection between users and public keys.
Identity Based Encryption (IBE) [11], [12], [48] allows to
use arbitrary strings as public key for each user.
Attribute Based Encryption (ABE) [13], [14], [49] enables
ﬁne-grained access control by deﬁning a set of attributes for
users and ﬁles. Files can only be decrypted if a deﬁned number
of attributes match [13],
the policy deﬁned in the user’s
secret key matches the ciphertext’s attribute [14], or the policy
deﬁned in the ciphertext matches the user’s attributes [49].
The idea of Broadcast Encryption (BE) [15], [16], [50]
is that a broadcaster encrypts messages, sends them via a
broadcast channel, and only a permitted subset of users is
able to decrypt the messages. BE can be used for ﬁle sharing
by considering the ﬁles as messages and the ﬁle system
as broadcast channel. BE schemes have various tradeoffs
regarding private key, public key and ciphertext size, but no
scheme is constant in all sizes.
Identity-Based Broadcast Encryption (IBBE) [17], [18], [51]
is a combination of IBE and BE. Messaged are encrypted
under a public key for receivers that are identiﬁed by an
arbitrary string, and receivers can decrypt messages with their
private keys if their identity is part of the receiver set. As with
BE schemes, IBBE schemes are not constant in all keys.
File Sharing Systems. Cryptographically protected ﬁle
sharing systems use the just presented cryptographic access
control mechanisms and enrich them to ﬁle systems with,
e.g., key regression [19],
integrity proofs [20], and data
deduplication [22]. Some TEE-based ﬁle sharing systems also
use the cryptographic access control mechanisms to design an
anonymous ﬁle sharing system [24] or an IBBE scheme with
reduced encryption complexity [25]. NEXUS [26], Pesos [27]
and SeGShare are not based on the cryptographic access
control mechanisms.
All ﬁle sharing systems that are based on a cryptographic
access control mechanism use HE or a combination of HE
and IBE, ABE, BE, or IBBE. This, e.g., allows to remove
the public-key management, reduces the number of keys,
and/or increase the expressiveness of access control policies.
However, permitted users gain plaintext access to the ﬁle key
on each ﬁle access. Therefore, the following process has to be
executed to enforce immediate permission revocation: a new
ﬁle key is generated, the ﬁle is re-encrypted with the new key,
the new key is encrypted for each user or group still having
access. On membership revocation, the just mentioned process
has to be performed for every ﬁle the group has access to.
Objective P3 is not fulﬁlled by those ﬁle sharing systems.
Additionally, Garrison et al. [23] state that (1) most IBE
schemes are pairing-based, which is an order of magnitude
slower than public-key encryption used at HE, (2) ABE
incurs substantially higher costs than IBE, even for simple
access control policies, (3) existing schemes for proxy re-
encryption [52], [53] do not solve the problem, and (4) crypto-
graphic access controls lead to prohibitive computational cost
for practical, dynamic workloads.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
479
TABLE II: Expected functional (Fx), performance (Px) and security objectives (Sx).
Separate read and write permissions
obj. Description
F1
File sharing with individual users / groups
F2 Dynamic permissions / group memberships
F3 Users set permissions
F4
F5 Users (and administrators) do not need special hardware
F6 Non-interactive permission / membership updates
F7 Multiple ﬁle owners / group owners
F8
F9 Deduplication of encrypted ﬁles
F10 Permissions can be inherited from parent directory
P1 Constant client storage
P2 Group-based permission deﬁnition
Separation of authentication and authorization
obj. Description
P3
File permissions / group membership revocations do not
require re-encryption of content or directory ﬁles
P4 Constant number of ciphertexts for content and directory ﬁles
P5 Different groups can access the same encrypted ﬁle
Protect conﬁdentiality of content ﬁles / ﬁle system
S1
structure / permissions / existing groups / group memberships
Protect integrity of content ﬁles / ﬁle system structure /
permissions / existing groups /group memberships
S2
S3 End-to-end protection of user ﬁles
S4
S5
Immediate revocation
Protection against rollback of individual ﬁles / whole ﬁle system
TABLE III: Classiﬁcation of SeGShare and related work based on objectives deﬁned in Table II. The symbols represent that an
), or not part of the design (–). Note that some objectives
objective is supported (
in Table II have multiple sub-objectives separated by /, which are also used in this table.
), partially supported (
), not supported (
system
based
on
F1
F2 F3 F4 F5 F6
F7 F8 F9 F10 P1 P2 P3 P4 P5
S1
S2
S3 S4 S5
Pure Cryptographically Protected File Sharing Systems
[10]
[19]
[16]
[23]
[20]
[22]
[24]
[25]
[26]
[27]
SeGShare
IBE, ABE
HE
HE
BE
BE
ABE
HE
IBBE
/–
/–
/–
/
/–
/–
/
/
/
/
/
/–
/–
/–
/
/–
/–
/
/
/
/
/
TEE-Supported File Sharing Systems
/–
/–