L
m
u
m
x
a
M
i
6
4
2
●
10
a) All-to-one routing and random link failures
b) Permutation routing and random link failures
80
60
i
k
n
L
a
n
o
d
a
o
L
m
u
m
x
a
M
i
40
20
●
●
method
● DEST
BIBD
●
●
●
●
●
●
●
0
10
100
●
●
|F|
1000
10000
i
k
n
L
a
n
o
d
a
o
L
m
u
m
x
a
M
i
●
●
●
●
Method
● OPODIS
BIBD
4
2
0
20
40
|F|
60
80
c) All-to-one routing and random link failures
d) All-to-one routing and targetted link failures
Fig. 5. Comparison of maximum link load induced by our BIBD scheme, a random permutation scheme [3] (OPODIS) and a random destination-based
scheme [3] (DEST) for a network of 183 nodes. The x-axis represents the number of random link failures, the y-axis the maximum link load. The dots
represent the mean of the maximum link load over 100 experiments, the bars indicate the standard deviation.
.
The works closest to ours are by Feigenbaum et al. [10],
Chiesa et al. [6], Stephens et al. [24], [25], and Borokhovich et
al. [3]. Feigenbaum et al. [10] introduces the notion of perfect
resilience, resilience to arbitrary failures.
Chiesa et al. [6] focus on “scalable” static failover schemes
that rely only on the destination address, the packets incoming
link, and the set of nonfailed links incident to the router.
The authors ﬁnd that per-incoming link destination-based
forwarding tables are a necessity as destination-based routing
alone is unable to achieve resilience against even a single link
failure, and, moreover, entails computationally hard problems.
In [5], Chiesa et al. consider randomized algorithms for static
routing schemes whose rules depend only on the inport (where
the packet arrives) and the destination.
Stephens et al. [24], [25] present a new forwarding table
compression algorithm called Plinko, which however cannot
provide resilience guarantees in all possible failure scenarios.
However, in contrast to our paper, none of these paper
study the implication on the network load of different failover
mechanisms: an important concern in trafﬁc engineering.
Moreover, existing work often focuses on destination-based
routing algorithms only, ignoring one of the key advantages
of software-deﬁned networks in terms of trafﬁc engineering.
Finally, much existing work (e.g., based on randomized or
stateful routing) is not OpenFlow-compatible.
In this respect, the closest work to ours is [3]. The authors
focus on the All-to-One model only and present a deterministic
failover scheme which achieves an optimal tradeoff between
resilience and network load for up to a logarithmic number
of failures. For a larger number of failures, a randomized but
non-constructive mechanism is proposed. Moreover, the authors
prove the following two statements: i) no local failover scheme
can tolerate n − 1 or more link failures without disconnecting
source-destination pairs, even though the remaining graph (i.e.,
after the link failures) is still n/2-connected, and ii) for any
local failover scheme tolerating ϕ link failures (0 < ϕ < n)
without disconnecting any source-destination pair, there exists
(cid:10)
λ ≥ √
a failure scenario which results in a link load of at least
ϕ, although the minimum edge cut (mincut) of the
network is still at least n − ϕ − 1. In this paper, we provide
a deterministic approach that matches these lower bounds
asymptotically, thus solving this open problem. We also show in
simulations, that we outperform their approach in all considered
scenarios while additionally providing deterministic guarantees.
More importantly, our results apply to general trafﬁc matrices,
beyond the All-to-One model.
One contribution of our paper is to observe a connection to
the ﬁeld of local algorithms without coordination. Accordingly,
in terms of techniques, the paper closest to ours is by Malewicz
et al. [18], as well as the seminal work by Dolev et al. [7].
354
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
The authors study scheduling for “disconnected cooperation”:
in their setting, a set of initially isolated, distributed processors
need to schedule their work before starting communication.
The goal is to come up with a deterministic schedule which
minimizes the number of redundantly executed tasks: the
so-called waste. This model is motivated by decentralized
environments where processors may meaningfully carry on
with the computation regardless of any other component (e.g.,
due to the idempotency of tasks). Given a set of n nodes
and n < t tasks, where n is a prime power, Malewicz et
al. present a deterministic, design-theoretic construction of an
optimal schedule.
The routing algorithms presented in this paper are oblivious:
failover paths are independent of other packets. Accordingly, we
believe that our work provides an interesting new perspective
on oblivious routing: a ﬁeld which to the best of our knowledge
has so far mostly been studied for scenarios without failures.
Oblivious routing schemes are attractive for their simplicity,
but it is also known that such schemes come at an optimality
price, if only a single path for every source-destination pair
can be chosen: the famous Borodin-Hopcroft lower bound [2]
states that for permutation routing, given a maximal node
degree d, there is a permutation in which a node is traversed
n/d paths. While this lower bound also applies
by at least
to our setting, due to the limited number of failures we can
tolerate and the high remaining connectivity, it only provides
weak bounds. On the positive side, it is known that if multiple
paths are allowed, e.g., using Valiant’s trick [29], lower loads
can be achieved. We refer the reader to [2], [17], [22], [29] for
more details. Interestingly, we show in this work that oblivious
routing strategies can actually be asympotically optimal for
fast failover routing.
(cid:11)
VII. CONCLUSION
A highly available connectivity is the prerequisite for any
dependable network-based application and service. Indeed,
according to the CAP theorem,
if and only if network
connectivity is ensured, it is possible to provide both availability
and consistency in a distributed system.
In order to guarantee connectivity, this paper leveraged an
intriguing connection between local failover mechanisms and
combinatorial block designs. In particular, we developed a
failover scheme deﬁning an almost optimal tradeoff between
resilience and network load: the resulting bounds are off by
a constant factor of the optimal bound derived in prior work.
Our work hence settles an open question: while mechanisms
such as Fast Reroute have been in place for many years, the
fundamental tradeoffs regarding their level of resiliency and
resource overheads such as load were long not well understood.
Regarding the impact on ﬂow table rules, one nice aspect
of our approach is that the required number of failover rules
is low: they only depend linearly on the number of failed
links incident to the switch (whereas in principle one could
imagine a scenario where there is a different failover strategy
for each subset of failed ports). Interestingly, as we prove,
despite this compact representation, we do not lose anything
in terms of failover optimality with respect to the overhead
load and fault-tolerance).
Nevertheless, our work leaves open several
interesting
directions for future research. For example, there remain many
interesting opportunities to improve our approach in practice,
and tailor it to speciﬁc use cases. For instance, we have so
far treated all ﬂows equally. However, in practice, it may
make sense to use our rigorous routing scheme only for high-
priority and critical ﬂows, while low-priority ﬂows could be
routed in a best effort manner. Such a prioritization and the
study of its tradeoffs is interesting but orthogonal to our
work. At the same time, it holds that additional knowledge
about the bandwidth and trafﬁc matrix, also creates additional
optimization opportunities, which we aim to explore in the
future.
Acknowledgments. Research in part supported by the Danish
Villum project ReNet.
REFERENCES
[1] A. K. Atlas and A. Zinin. Basic speciﬁcation for ip fast-reroute: loop-free
alternates. IETF RFC 5286, 2008.
[2] A. Borodin and J. E. Hopcroft. Routing, merging and sorting on
parallel models of computation. In Proc. ACM Symposium on Theory of
Computing (STOC), pages 338–344, 1982.
[3] M. Borokhovich and S. Schmid. How (not) to shoot in your foot
with sdn local fast failover: A load-connectivity tradeoff. In Proc. 17th
International Conference on Principles of Distributed Systems (OPODIS),
2013.
[4] M. Canini, P. Kuznetsov, D. Levin, and S. Schmid. A Distributed and
Robust SDN Control Plane for Transactional Network Updates. In Proc.
IEEE INFOCOM, 2015.
[5] M. Chiesa, A. V. Gurtov, A. Madry, S. Mitrovic, I. Nikolaevskiy,
M. Schapira, and S. Shenker. On the resiliency of randomized routing
against multiple edge failures. In Proc. 43rd International Colloquium on
Automata, Languages, and Programming (ICALP), pages 134:1–134:15,
2016.
[6] M. Chiesa, I. Nikolaevskiy, S. Mitrovic, A. Panda, A. Gurtov, A. Madry,
M. Schapira, and S. Shenker. The quest for resilient (static) forwarding
tables. In Proc. IEEE INFOCOM, 2016.
[7] S. Dolev, R. Segala, and A. Shvartsman. Dynamic load balancing with
group communication. In Proc. SIROCCO, pages 111–125, 1999.
[8] T. Elhourani, A. Gopalan, and S. Ramasubramanian. Ip fast rerouting
for multi-link failures. In Proc. IEEE INFOCOM, pages 2148–2156.
IEEE, 2014.
[10] J. F. et al. Ba: On the resilience of routing tables.
[9] G. Enyedi, G. R´etv´ari, and T. Cinkler. A novel loop-free ip fast reroute
algorithm. In Dependable and Adaptable Networks and Services. 2007.
In Proc. ACM
Symposium on Principles of Distributed Computing (PODC), pages
237–238, 2012.
[11] E. Gafni and D. Bertsekas. Distributed algorithms for generating loop-free
routes in networks with frequently changing topology. Communications,
IEEE Transactions on, 29(1):11–18, Jan 1981.
[12] P. Gill, N. Jain, and N. Nagappan. Understanding network failures in data
centers: measurement, analysis, and implications. In ACM SIGCOMM
Computer Communication Review, volume 41, pages 350–361, 2011.
[13] P. Hande, M. Chiang, R. Calderbank, and S. Rangan. Network pricing
and rate allocation with content-provider participation. In Proc. IEEE
INFOCOM, 2010.
[14] C.-Y. Hong, S. Kandula, R. Mahajan, M. Zhang, V. Gill, M. Nanduri,
and R. Wattenhofer. Achieving High Utilization with Software-Driven
WAN. In Proc. ACM SIGCOMM, 2013.
[15] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh, S. Venkata,
J. Wanderer, J. Zhou, M. Zhu, J. Zolla, U. H¨olzle, S. Stuart, and A. Vahdat.
B4: Experience with a Globally-Deployed Software Deﬁned WAN. In
Proc. ACM SIGCOMM, 2013.
[16] H. H. Liu, S. Kandula, R. Mahajan, M. Zhang, and D. Gelernter. Trafﬁc
engineering with forward fault correction. In Proc. ACM SIGCOMM
Computer Communication Review, volume 44, pages 527–538, 2014.
355
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
[17] B. M. Maggs, F. M. auf der Heide, B. Vocking, and M. Westermann.
Exploiting locality for data management in systems of limited bandwidth.
In Proc. Annual IEEE Symposium on Foundations of Computer Science
(FOCS), pages 284–293, 1997.
[18] G. Malewicz, A. Russell, and A. A. Shvartsman. Distributed scheduling
for disconnected cooperation. Distributed Computing, 18(6):409–420,
2005.
[19] A. Markopoulou, G. Iannaccone, S. Bhattacharyya, C.-N. Chuah, and
C. Diot. Characterization of failures in an ip backbone. In Proc. IEEE
INFOCOM, volume 4, pages 2307–2317, 2004.
[20] S. Nelakuditi, S. Lee, Y. Yu, Z.-L. Zhang, and C.-N. Chuah. Fast local
rerouting for handling transient link failures. IEEE/ACM Transactions
on Networking (ToN), 15(2):359–372, 2007.
[21] Z. A. Qazi, C.-C. Tu, L. Chiang, R. Miao, V. Sekar, and M. Yu. Simple-
fying middlebox policy enforcement using sdn. In Proc. SIGCOMM,
pages 27–38, 2013.
[22] H. Racke. Minimizing congestion in general networks. In Proc. Annual
IEEE Symposium on Foundations of Computer Science (FOCS), pages
43–52, 2002.
[23] H. R¨acke. Survey on oblivious routing strategies. In Proc. of the 5th
Conference on Computability in Europe (CiE), pages 419–429, 2009.
[24] B. Stephens, A. L. Cox, and S. Rixner. Plinko: Building provably resilient
forwarding tables. In Proc. 12th ACM HotNets, 2013.
[25] B. Stephens, A. L. Cox, and S. Rixner. Scalable multi-failure fast failover
via forwarding table compression. SOSR. ACM, 2016.
[26] D. R. Stinson. Combinatorial designs: constructions and analysis.
Springer Science & Business Media, 2007.
[27] D. Turner, K. Levchenko, A. C. Snoeren, and S. Savage. California fault
lines: understanding the causes and impact of network failures. ACM
SIGCOMM Computer Communication Review, 41(4):315–326, 2011.
[28] A. Vahdat, D. Clark, and J. Rexford. A purpose-built global network:
Google’s move to sdn. Commun. ACM, 59(3):46–54, Feb. 2016.
[29] L. G. Valiant. A scheme for fast parallel communication. SIAM journal
on computing, 11(2):350–361, 1982.
[30] M. Walraed-Sullivan, A. Vahdat, and K. Marzullo. Aspen trees: balancing
data center fault tolerance, scalability and cost. In Proc. ACM CONEXT,
pages 85–96, 2013.
[31] J. Wang and S. Nelakuditi. Ip fast reroute with failure inferencing. In
Proc. SIGCOMM Workshop on Internet Network Management, pages
268–273, 2007.
[32] B. Zhang, J. Wu, and J. Bi. Rpfp: Ip fast reroute with providing complete
protection and without using tunnels. In Proc. IWQoS, pages 1–10, 2013.
356
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply.