**轮函数拆解：列混合（Mix Columns）**
列混合是通过将state矩阵与常矩阵C相乘以达成在列上的扩散，属于代替变换。列混合是Rijndael算法中最复杂的一步，其实质是在有限域GF(256)上的多项式乘法运算。
    void aes_mix_columns(AES_CYPHER_T mode, uint8_t *state)
    {
        uint8_t y[16] = { 2, 3, 1, 1,  1, 2, 3, 1,  1, 1, 2, 3,  3, 1, 1, 2};
        uint8_t s[4];
        int i, j, r;
        for (i = 0; i  6 && (i % g_aes_nk[mode]) == 4) {
                t = aes_sub_dword(w[i - 1]);
            } else {
                t = w[i - 1];
            }
            w[i] = w[i - g_aes_nk[mode]] ^ t;
        } while (++i < g_aes_nb[mode] * (g_aes_rounds[mode] + 1));
        /* key can be discarded (or zeroed) from memory */
    }
以AES-128为例，从128位种子密钥生成11组轮密钥（每组128位）：
    Input:
        key :  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
    Key Expansion:
        00:  rs: 00010203
        01:  rs: 04050607
        02:  rs: 08090a0b
        03:  rs: 0c0d0e0f
        04:  rot: 0d0e0f0c sub: d7ab76fe rcon: 01000000 xor: fe76abd6 rs: d6aa74fd
        05:  equ: d6aa74fd rs: d2af72fa
        06:  equ: d2af72fa rs: daa678f1
        07:  equ: daa678f1 rs: d6ab76fe
        08:  rot: ab76fed6 sub: 6238bbf6 rcon: 02000000 xor: f6bb3860 rs: b692cf0b
        09:  equ: b692cf0b rs: 643dbdf1
        10:  equ: 643dbdf1 rs: be9bc500
        11:  equ: be9bc500 rs: 6830b3fe
        12:  rot: 30b3fe68 sub: 046dbb45 rcon: 04000000 xor: 45bb6d00 rs: b6ff744e
        13:  equ: b6ff744e rs: d2c2c9bf
        14:  equ: d2c2c9bf rs: 6c590cbf
        15:  equ: 6c590cbf rs: 0469bf41
        16:  rot: 69bf4104 sub: f90883f2 rcon: 08000000 xor: f28308f1 rs: 47f7f7bc
        17:  equ: 47f7f7bc rs: 95353e03
        18:  equ: 95353e03 rs: f96c32bc
        19:  equ: f96c32bc rs: fd058dfd
        20:  rot: 058dfdfd sub: 6b5d5454 rcon: 10000000 xor: 54545d7b rs: 3caaa3e8
        21:  equ: 3caaa3e8 rs: a99f9deb
        22:  equ: a99f9deb rs: 50f3af57
        23:  equ: 50f3af57 rs: adf622aa
        24:  rot: f622aaad sub: 4293ac95 rcon: 20000000 xor: 95ac9362 rs: 5e390f7d
        25:  equ: 5e390f7d rs: f7a69296
        26:  equ: f7a69296 rs: a7553dc1
        27:  equ: a7553dc1 rs: 0aa31f6b
        28:  rot: a31f6b0a sub: 0ac07f67 rcon: 40000000 xor: 677fc04a rs: 14f9701a
        29:  equ: 14f9701a rs: e35fe28c
        30:  equ: e35fe28c rs: 440adf4d
        31:  equ: 440adf4d rs: 4ea9c026
        32:  rot: a9c0264e sub: d3baf72f rcon: 80000000 xor: 2ff7ba53 rs: 47438735
        33:  equ: 47438735 rs: a41c65b9
        34:  equ: a41c65b9 rs: e016baf4
        35:  equ: e016baf4 rs: aebf7ad2
        36:  rot: bf7ad2ae sub: 08dab5e4 rcon: 1b000000 xor: e4b5da13 rs: 549932d1
        37:  equ: 549932d1 rs: f0855768
        38:  equ: f0855768 rs: 1093ed9c
        39:  equ: 1093ed9c rs: be2c974e
        40:  rot: 2c974ebe sub: 71882fae rcon: 36000000 xor: ae2f8847 rs: 13111d7f
        41:  equ: 13111d7f rs: e3944a17
        42:  equ: e3944a17 rs: f307a78b
        43:  equ: f307a78b rs: 4d2b30c5
**加密过程实例**
    Encrypting block ...
     Round 0:
       input:  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
       round:  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
       state:  00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0
     Round 1:
       input:  00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0
         sub:  63 ca b7 04 09 53 d0 51 cd 60 e0 e7 ba 70 e1 8c
       shift:  63 53 e0 8c 09 60 e1 04 cd 70 b7 51 ba ca d0 e7