# Mac 环境下 PWN入门系列（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0 前言
一个菜🐔web狗的转型之路,记录下自己学习PWN的过程。
## 0x1 简单介绍PWN概念
主要参考下: [wiki pwn](https://ctf-wiki.github.io/ctf-wiki/pwn/readme-zh/)
我们可以看到PWN具体细分话有好几个种类。
这里笔者重点研究的是: Window Kernal and Linux Kernal (window 内核 和 Linux内核)
CTF 的题目多是 关于两种系统内核的模块漏洞,自写一些漏洞代码的程序,然后通过pwn技术获取到相应程序的完全控制权限等操作。
关于Linux 和 Windows,其实利用原理是一样的,只是在实现的过程存在差异,所以入门的话，我们可以直接选择从Linux Pwn入手开始学习。
## 0x2 环境搭建
由于笔者是MAC环境,所以环境安装这块就多点笔墨了。
1.MAC PD虚拟机 Ubuntu 16.04 x64
2.pwntools
3.pwndbg
4.ida
###  0x1 mac安装pwntools
采用`homebrew` 安装很方便
    1.安装pwntools
    brew install pwntools
    2.安装bintuils 二进制工具
    brew install https://raw.githubusercontent.com/Gallopsled/pwntools-binutils/master/osx/binutils-amd64.rb
命令执行完之后,我们要导入我们pwntools的包放到环境变量。
    1./usr/local/Cellar/pwntools/3.12.2_1/libexec/lib/python2.7/site-packages 
    2.在系统默认安装包的site-packages写个.pth文件写入上面的地址就可以了
之后我们就可以使用常用的工具
`checksec /Users/xq17/Desktop/bf743d8c386f4a83b107c49ac6fbcaaf`
最后测试下python的pwn模块
    import pwn
    pwn.asm("xor eax,eax")
这样就代表可以了。
参考链接:[mac下安装pwntools](https://herm1t.tk/MAC/mac%E4%B8%8B%E5%AE%89%E8%A3%85pwntools/)
###  0x2 mac配置 sublime 交互运行
我们首先需要设置sublime的 `Tools ->Build System -> New Build System`
    {
    "path": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin",
    "cmd": ["/usr/bin/python2.7", "-u", "$file"],
    "file_regex": "^[ ]*File "(...*?)", line ([0-9]*)",
    "selector": "source.python"
    }
我再运行的时候,发现命令行可以执行,但是st3上面执行报这个错误
后面问了下vk师傅和google之后发现是设置环境变量的问题: [Reference
solve](https://stackoverflow.com/questions/9485699/setupterm-could-not-find-terminal-in-python-program-using-curses)
我们修改下上面的配置为
    {
    "path": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin",
    "env":
    {
        "TERM":"linux",
        "TERMINFO":"/etc/zsh"
    },
    "cmd": ["/usr/bin/python2.7", "-u", "$file"],
    "file_regex": "^[ ]*File "(...*?)", line ([0-9]*)",
    "selector": "source.python"
    }
这样就能解决错误啦。 但是我们还得继续解决下交互执行的问题。
我们首先下载
`command + shift + p` 输入 `install Package`
然后在弹出的框输入 `SublimeREPL` 等待下载安装。
(1) 配置快捷键
`preferences` -> `Key Binding` 添加一条
    {
            "keys": ["command+n"],
            "caption": "SublimeREPL: Python - RUN current file",
            "command": "run_existing_window_command",
            "args": {
                "id": "repl_python_run",
                "file": "config/Python/Main.sublime-menu"}
            },
            {
            "keys": ["command+m"],
            "caption": "SublimeREPL: Python - PDB current file",
            "command": "run_existing_window_command",
            "args": {
                "id": "repl_python_pdb",
                "file": "config/Python/Main.sublime-menu"}
            }
(2) 配置 `SublimeREPL` 环境变量
`sudo find / -iname "Main.sublime-menu"`
找到路径
`/Users/xq17/Library/Application Support/Sublime Text
3/Packages/SublimeREPL/config/python`
编辑 `Main.sublime-menu`
这样我们直接 `command + n` 就能在st3直接进入交互模式
**小彩蛋: sublime 的快捷键**
`新建一个group: shift + option + command + 2`
`切换group: ctrl + 1 ctrl+2 切换到第几个窗口`
[解决方案链接](https://www.cnblogs.com/JackyXu2018/p/8821482.html)
**当时我还折腾了下pycharm的解决方案(pycharm很适合开发项目,可以用来当作高效开发的选择)**
首先我们要建立python2.7作为解释器
这样配置我们的
`Environment variables: TERM=linux;TERMINFO=/etc/zsh`
这样我们的运行环境就配置好了
###  0x3 MAC 安装 IDA
这个吾爱很多,有针对mac系列的解决方案。
学习二进制吾爱破解账号应该是标配吧。
[ida帖子](https://www.52pojie.cn/search.php?mod=forum&searchid=36355&orderby=lastpost&ascdesc=desc&searchsubmit=yes&kw=ida)
###  0x4 pwndocker一体化环境
我比较懒惰,直接上docker, 推荐一个githud:
[**pwndocker**](https://github.com/skysider/pwndocker)
常用工具基本都集成了,非常方便
也有其他镜像
`docker search pwndocker`
**搭建过程:**
我们自己新建一个专门用来存放pwn文件的目录。
`/Users/xq17/Desktop/pwn`
然后在当前目录执行:
    docker run -d 
        --rm 
        -h mypwn 
        --name mypwn 
        -v $(pwd):/ctf/work 
        -p 23946:23946 
        --cap-add=SYS_PTRACE 
        skysider/pwndocker
然后进入:
    docker exec -it mypwn /bin/bash
这样基本就ok拉.
###  0x5 参考链接
[Linux pwn入门教程(0)——环境配置](https://zhuanlan.zhihu.com/p/38639740)
## 0x3 工具介绍篇
###  0x1 pwntools
参考链接: [一步一步学pwntools (看雪论坛)](https://bbs.pediy.com/thread-247217.htm)
###  0x2 gdb+pwndbg
####  0x2.1 启动gdb
  1. `gdb program` //直接gdb+文件名开始调试, frequent
  2. `gdb program pid` //gdb调试正在运行的程序
  3. `gdb -args programs` 解决程序带命令行参数的情况 或者 `run`之后再加上参数
####  0x2.2 退出gdb
`quit or q`
####  0x2.3 在gdb调试程序带适合执行shell命令
`shell command args`
####  0x2.4 一些基础参数的介绍
>  
>  gdb的命令分别有:(这里我只说几个重点和常用的)  
>  **breakpoints(断点) stack(栈)**  
> `help breakpoints` 可以查看该命令的详细帮助说明  
> `help all` 列出所有命令详细说明  
> `info` 用来获取被调试应用程序的相关信息  
> `show` 用来获取gdb本身设置的信息
更多内容,参考一下链接([GDB命令基础，让你的程序bug无处躲藏](https://deepzz.com/post/gdb-debug.html))
我很少记忆,都是需要就去查
pwndbg的学习可以参考官方文档: 
###  0x3 ida 常用快捷键
F5: 反编译出c语言的伪代码,这个基本是我这种菜鸡特别喜欢用的。
空格: IDA VIEW 窗口中 文本视图与图形视图的切换, 好看。 直观，哈哈哈
shift + f12:查找字符串 逆向的时候能快速定位
n: 重命名 整理下程序的命名，能理清楚逻辑
x: 查看交叉引用
###  0x4 checksec简单介绍
保护机制介绍:
> DEP(NX) 不允许执行栈上的数据  
>  RELRO 这个介绍有点长分为两种:  
>  1.Partial RELRO GOT表仍然可写  
>  2.Full RELRO GOT表只读  
>  ASLR(PIE 随机化系统调用地址  
>  stack 栈溢出保护
下面我会针对这些保护继续介绍的,先了解下基本作用和概念。
更细内容可以参考下面的文章
[缓冲区溢出保护机制——Linux](https://www.cnblogs.com/clingyu/p/8546619.html)
## 0x4 实践篇
###  0x4.1 学习使用pwndpg来理解程序流程