VPNs, Lantern, Psiphon) or provide strong privacy on all
connections and for all users (e.g., as in Tor). By contrast,
MassBrowser allows its users to adjust their privacy protection
for different connections based on their needs, offering a
more usable privacy-QoS tradeoff. Speciﬁcally, by default,
MassBrowser connections are established through one-hop
(fast) MassBrowser relays; however, a client can choose to
tunnel some or all of her connections through MassBrowser’s
Tor interface. MassBrowser’s Tor interface is run by some
Buddies that act as Tor bridges [14]. Therefore, MassBrowser’s
Buddy software can be used as a pluggable transport [57]
by Tor bridges. We evaluate MassBrowser’s cost of operation
when used as a Tor pluggable transport, showing that it is
drastically cheaper than meek [45], while both offering similar
blocking resistance properties (both meek and MassBrowser
aim at increasing the censors’ collateral damage by making
use of shared IP addresses). We will provide a more detailed
privacy discussion in Section VII.
5) Deployment feasibility: Unlike approaches like decoy rout-
ing systems [32], [84], [38] and tunneling systems [33], [35],
[44], MassBrowser does not require cooperation/deployment
from third-party Internet operators. Also, while MassBrowser’s
Operator is hosted as a domain-fronted service,
it can be
deployed using any low-bandwidth, high-latency covert com-
munication mechanism [35], [33] if domain fronting is widely
disabled [27], [3]. Our system is currently in beta release
mode with user-friendly GUI software for both volunteers and
clients.
IV. TECHNICAL DESIGN DECISIONS
In this section, we discuss our design decisions aimed at
designing MassBrowser as a reliable circumvention system
6
with practical a tradeoff between QoS, cost of operation, and
user privacy.
A. Blocking Resistance
We use the following core techniques to provide strong
blocking resistance in MassBrowser.
Use of shared, dynamic proxy IPs to resist IP enumeration:
As MassBrowser proxies are run by normal Internet users
(either censored clients or non-censored volunteers), blocking
them is costly and prone to collateral damage. First, a typical
Buddy will most likely have a NAT IP address, therefore
sharing a public IP address with other users/services in the
same network. For instance, a Buddy connecting from a coffee
shop will share a public IP with other users in the area (we
will describe how MassBrowser enables connections despite
NAT). Additionally, a typical Buddy will frequently change
IP addresses, e.g., by moving across networks, amplifying the
collateral damage. Second, the number of MassBrowser’s relay
IPs scales with the number of its users as it deploys client-
to-client proxying. Also, we have employed various social
engineering techniques to attract a large number of volunteer
proxies.
Trafﬁc Obfuscation and Encryption: All MassBrowser com-
munications are encrypted to prevent deep-packet inspection.
Speciﬁcally, MassBrowser deploys trafﬁc obfuscation mecha-
nisms to remove protocol ﬁngerprints and prevent censors from
detecting MassBrowser trafﬁc based on trafﬁc characteristics
like packet timings and sizes.
Domain Fronting the Operator: MassBrowser’s Operator
runs as a domain fronted service [20]. As discussed earlier, a
domain fronted service runs behind a network infrastructure
with shared IPs (e.g., CDNs), therefore blocking it will cause
signiﬁcant collateral damage to the censors. Although domain
fronting is a relatively expensive technique, the costs of domain
fronting MassBrowser’s Operator is very low due to the small
volume of the control trafﬁc generated by the Operator, as
shown in Section VI-C. Note that while MassBrowser’s Oper-
ator is hosted as a domain-fronted service, it can be deployed
using any low-bandwidth, high-latency covert communication
mechanism [35], [33] if domain fronting is widely disabled in
the wild [27], [3]. Furthermore, with the ongoing adoption of
TLS1.3 [59] and encrypted SNI [60] by CDNs (e.g., Cloudﬂare
and Google CDN), domain fronting can be performed with
no need to modifying the SNI ﬁeld of TLS connections
(therefore it can not be disabled by CDN providers who
support encrypted SNI).
B. Optimizing Cost and QoS
As discussed earlier in Section III, blocking resistant cir-
cumvention systems suffer from either low QoS or high cost
of operation (or both). We argue that the main reason for the
poor QoS/high cost of existing circumvention systems is the
extreme disproportion between available proxying throughput
and the bandwidth demand from censored clients. We therefore
take the following two complimentary approaches to alleviate
such disproportion.
Optimizing load on proxies through selective proxying: We
use the following techniques to minimize the trafﬁc load on
MassBrowser proxies.
a) Whitelisting censored content only: Existing circumvention
tools like Tor and VPNs tunnel all network trafﬁc of a censored
client through circumvention proxy, including censored and
non-censored content. This is done in Tor to provide anonymity
on all connections, but even non-anonymous tools like VPNs,
Lantern, and Psiphon tunnel all trafﬁc through circumvention
proxies for the ease of operation. We believe that this is one
of the key reasons constituting to high bandwidth pressure
on in-the-wild circumvention proxies (causing their low QoS).
We evaluated the list of top bandwidth-consuming domains
provided to us by a major non-anonymous circumvention tool2
for the day of Feb 21, 2008. Our evaluation ﬁnds that 48% of
the proxied trafﬁc belongs to websites that are not censored in
Iran (total proxied trafﬁc is 3.56 TB).
Tunneling non-censored content through a circumvention
system not only puts additional burden on the proxies, it also
lowers the quality of service for most of the non-censored
websites, e.g., a Chinese user will have to access a (non-
censored) China-based website through a US-based proxy,
therefore increasing the latency. Basing our design on the
SoP principle, we restrict the use of MassBrowser Buddies
to censored-content only. Therefore, our Client software only
proxies censored content through Buddies and retrieves non-
censored content directly with no proxy, and the Buddies
deploy whitelists to proxy only censored content. Needless to
say, a MassBrowser client can divert her privacy-sensitive (but
not censored) connections to MassBrowser’s Tor interface.
b) CacheBrowsing: MassBrowser uses a recent circumvention
technique called CacheBrowsing [30], [85] to further minimize
the load on the proxies. In CacheBrowsing, a client directly
fetches a censored object hosted on CDN from the hosting
CDN’s edge servers, without using proxies. However, a limi-
tation of CacheBrowsing is that it can only retrieve censored
content hosted on a CDN and accessible through HTTPS,3
therefore it can not be used as a standalone circumven-
tion system. We integrate CacheBrowsing into MassBrowser’s
client software. That is, a MassBrowser client will fetch the
CDN-hosted censored content directly from CDNs using the
CacheBrowsing technique, and only use MassBrowser Buddies
for the censored content not hosted on CDNs. Based on our
analysis, this saves 41% of bandwidth on the Buddies for Alexa
top 1000 websites.
c) Strategic proxy assignment: MassBrowser’s Operator is re-
sponsible for matchmaking Clients and Buddies. The Operator
considers various factors, including the regions, bandwidths,
and the preferences of the clients and relays in pairing them
together.
Incentivizing volunteer proxies: We use the following
approaches to increase the number of volunteer proxies. We
envision a large fraction of MassBrowser Buddies to be from
typical Internet users with little technical background. We
therefore design a GUI-based client software for Buddies to
2We do not disclose their identity per their request.
3We call such webpages CacheBrowsable.
7
offer a user-friendly experience, transparency, and full, ﬁne-
grained control over what they proxy. Our Buddy GUI offers
the following features.
a) Imperceptible operation: Our Buddy GUI runs imper-
ceptibly and does not interfere with the volunteer’s normal
activities. The volunteer user will only need to perform a one-
time installation and setup of the relay software, and may then
let it operate until she needs to adjust her preferences.
b) Transparency on usage: Our Buddy GUI offers the volun-
teer with information on how the proxy is being used.
c) Enable relays to limit proxied bandwidth: The Buddy
software enables a volunteer Buddy operator to specify how
much bandwidth she is willing to donate to MassBrowser. Even
a small donated bandwidth can help MassBrowser clients due
to the bandwidth minimization mechanisms discussed above.
d) Enable relays to whitelist destinations: Our MassBrowser
relay software enables a volunteer to proxy trafﬁc only to
Internet destinations she is comfortable with. A major set-back
for volunteers is the potential legal consequences of relaying
trafﬁc to controversial destinations (such as those experienced
by Tor exit relay operators [4], [6]). In MassBrowser, relays
whitelist the categories of destinations they are willing to proxy
trafﬁc to, e.g., a relay can decide to relay trafﬁc only to news
websites or scientiﬁc websites.
e) Optional ﬁnancial incentives: Future versions of Mass-
Browser may incorporate ﬁnancial incentives for volunteers,
either as the form of a service like Bitcoin mining by clients,
or monetary compensation. We leave the investigation of
incorporating such economic incentives with MassBrowser to
future work.
Client to client proxying: As discussed earlier in Sec-
tion III-C, censored users in various regions are subject to dif-
ferent censorship blacklists. Therefore, we leverage censored
clients to proxy trafﬁc for other censored clients in different
regions, which improves the overall QoS of the connections
by scaling the number of proxies with the number of clients.
The matchmaking between the clients is performed by the
Operator based on client preferences, locations, and bandwidth
resources. Note that in our system, a client is able to opt out
of being used as a proxy for other clients. To encourage client
participation, we only allow oped-in Clients to beneﬁt from
other Clients as proxies.
C. User-adjustable privacy
We have integrated a Tor interface in MassBrowser Client
and Buddy software. This enables MassBrowser clients to
divert
their privacy-sensitive connections to this interface,
while performing their non-sensitive communications through
MassBrowser’s regular network (expectedly, with much better
QoS). MassBrowser’s Tor interface is run by volunteer Buddies
who opt in to serve as Tor bridges [14] for MassBrowser
Clients. We envision that existing Tor bridges can also add
support for MassBrowser, as a new type of pluggable trans-
port [57]. We will provide a more detailed privacy discussion
in Section VII.
V. MASSBROWSER’S IMPLEMENTATION
In this section, we discuss the implementation of Mass-
Browser’s key technical components. We present further im-
plementation details (including our backend services, browser
bundle, GUI software, etc.) in Appendix A.
A. Connecting Users Behind NAT
As MassBrowser Clients and Buddies are regular Internet
users, most of them will likely be connecting to the Internet
using NATed IP addresses. Therefore, an important challenge
to MassBrowser’s operation is enabling communication be-
tween NATed Clients and Buddies, i.e., MassBrowser needs
to deploy NAT traversal techniques [80], [43]. Typical NAT
traversal techniques, however, may not be applicable for all
transport protocols depending on the type of a peer’s NAT,
i.e., depending on how the underlying NAT maps local IPs to
public IPs. Matthews et al. [43] perform a thorough analysis
of different NAT deployments in the Internet and how NAT
traversal techniques may apply to them. We categorize Mass-
Browser peers (i.e., Clients and Buddies) into three categories
based on the type of their NATs.
TCP Reachable: These are the peers with whom it is possible
to initiate a TCP connection, either directly or via some
existing NAT traversal technique.
UDP Reachable: For such peers, we are not able to initiate
TCP connections, but are still able to send UDP packets to
them via some NAT traversal technique. These peers reside
behind Restricted NATs as deﬁned by Wing et al. [80].
Unreachable:
prevent
al. [80] classify these NATs as Symmetric NATs.
Such peers are located behind NATs that
technique. Wing et
the use of any NAT traversal
MassBrowser’s Operator serves as a STUN server to dis-
cover the NAT type of each peer. The Operator then uses the
discovered NAT type of the peers to match Clients and Bud-
dies, and to decide which party should initiate the connection,
as shown in Table II. For any pair of a Client and a Buddy,
they can communicate if at least one of them is reachable
from behind NAT. As can be seen, when both of the peers
are reachable, the Client initiates the connection. When both
peers are UDP reachable, MassBrowser’s software tunnels a
TCP connection through an established UDP tunnel. If none
of the peers are reachable, a MassBrowser connection can not
be established between these peers, and therefore the Operator
will not map an unreachable Client to an unreachable Buddy.
Note that MassBrowser’s Operator does not deploy a
TURN server; a TURN server will need to proxy the con-
nections between (unreachable) Clients and Buddies, which
is signiﬁcantly expensive and bandwidth-extensive for a free
circumvention system like ours. Additionally, a circumvention
TURN server can easily get blocked by the censors unless
it is deployed as a (prohibitively expensive) domain fronted
service.
B. Assigning Buddies to Clients by the Operator
The Operator is in charge of coordinating Client and Buddy
communications and providing Clients with online Buddies to
8
TABLE II.
CONNECTION INITIATION FOR A MATCHED PAIR OF
CLIENTS AND BUDDIES. IF BOTH THE CLIENT AND BUDDY ARE
UNREACHABLE, THE OPERATOR WILL NOT MATCH THEM TOGETHER.
t TCP-Reach
UDP-Reach
Unreach
n
e
i
l
C
Client
Client
Client
Buddy
Buddy
Client
Client
TCP-Reach UDP-Reach Unreach
Buddy
Buddy

use as relays. The Operator assigns Buddies to Clients with
the following considerations.
Buddy destination whitelists: Buddies can whitelist des-
tinations they are willing to proxy trafﬁc to based on their
content types. The Operator actively maintains Buddy whitelist
preferences. When a Client queries the Operator for new
Buddies, the Operator will respond with Buddies that allow
the intended destinations in their whitelists.
Buddy loads: The MassBrowser system is a heterogeneous
network composed of machines with varying processing pow-
ers and network bandwidths. The Operator approximates a
Buddy’s available throughput based on the bandwidth limit
set by the Buddy owner, the number of active Clients assigned
to that Buddy, Buddy’s reliability over time. This is used to
balance the load on Buddies when assigning Buddies to new
Clients.
Parties’ NAT types: The Operator also considers the NAT
types of the peers in matching Clients and Buddies, as de-
scribed above.
Sybil attack protection: As discussed in Section VII, a censor
can not block the Buddies that she obtains from the Operator,
nor can she identify their clients (since Buddy IPs are NATed).
However, a resourceful censor may overload the identiﬁed
Buddies in order to consume their circumvention capacity
(i.e., DoS the Buddies). Note that this will be a costly DoS
attack due to the symmetry between the load on the attacker
and the target. Nonetheless, our Operator can deploy standard
Sybil protection mechanisms against such an expensive DoS
attack. We have particularly implemented the Sybil protection
mechanism of Nasr et al. [48], which uses a strategic reputation
system to pair clients and proxies.
C. Selective Proxying Through Whitelisting
As discussed earlier in Section IV-B, MassBrowser deploys
selective proxying to optimize the load on the Buddies as
well as to enable them to enforce their proxying preferences.