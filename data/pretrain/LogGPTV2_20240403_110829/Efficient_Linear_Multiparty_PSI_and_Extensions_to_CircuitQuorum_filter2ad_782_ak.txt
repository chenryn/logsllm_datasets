[69] Peter Rindal and Mike Rosulek. 2017. Improved Private Set Intersection Against
Malicious Adversaries. In Advances in Cryptology - EUROCRYPT 2017 - 36th
Annual International Conference on the Theory and Applications of Cryptographic
Techniques, Paris, France, April 30 - May 4, 2017, Proceedings, Part I (Lecture Notes
in Computer Science, Vol. 10210), Jean-Sébastien Coron and Jesper Buus Nielsen
(Eds.). 235–259. https://doi.org/10.1007/978-3-319-56620-7_9
[70] Peter Rindal and Mike Rosulek. 2017. Malicious-Secure Private Set Intersection via
Dual Execution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November
03, 2017, Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu
(Eds.). ACM, 1229–1242. https://doi.org/10.1145/3133956.3134044
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1196[71] Yingpeng Sang and Hong Shen. 2007. Privacy Preserving Set Intersection
Protocol Secure against Malicious Behaviors. In Eighth International Confer-
ence on Parallel and Distributed Computing, Applications and Technologies (PD-
CAT 2007), 3-6 December 2007, Adelaide, Australia, David S. Munro, Hong Shen,
Quan Z. Sheng, Henry Detmold, Katrina E. Falkner, Cruz Izu, Paul D. Coddington,
Bradley Alexander, and Si-Qing Zheng (Eds.). IEEE Computer Society, 461–468.
https://doi.org/10.1109/PDCAT.2007.59
[72] Yingpeng Sang and Hong Shen. 2008. Privacy preserving set intersection based
on bilinear groups. In Computer Science 2008, Thirty-First Australasian Computer
Science Conference (ACSC2008), Wollongong, NSW, Australia, January 22-25, 2008
(CRPIT, Vol. 74), Gillian Dobbie and Bernard Mans (Eds.). Australian Computer
Society, 47–54. https://dl.acm.org/citation.cfm?id=1378290
[73] Adi Shamir. 1979. How to Share a Secret. Commun. ACM 22, 11 (1979), 612–613.
[74] Adi Shamir. 1980. On the Power of Commutativity in Cryptography. In Automata,
Languages and Programming, 7th Colloquium, Noordweijkerhout, The Netherlands,
July 14-18, 1980, Proceedings (Lecture Notes in Computer Science, Vol. 85), J. W.
de Bakker and Jan van Leeuwen (Eds.). Springer, 582–595. https://doi.org/10.
1007/3-540-10003-2_100
[75] Kang Yang, Chenkai Weng, Xiao Lan, Jiang Zhang, and Xiao Wang. 2020. Ferret:
Fast Extension for Correlated OT with Small Communication. In Proceedings
of the 2020 ACM SIGSAC Conference on Computer and Communications Security
(Virtual Event, USA) (CCS ’20). Association for Computing Machinery, New York,
NY, USA, 1607–1626. https://doi.org/10.1145/3372297.3417276
[76] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
Abstract). In 27th Annual Symposium on Foundations of Computer Science, Toronto,
Canada, 27-29 October 1986. IEEE Computer Society, 162–167. https://doi.org/10.
1109/SFCS.1986.25
[77] Moti Yung. 2015. From Mental Poker to Core Business: Why and How to De-
ploy Secure Computation Protocols?. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security, Denver, CO, USA, October
12-16, 2015, Indrajit Ray, Ninghui Li, and Christopher Kruegel (Eds.). ACM, 1–2.
https://doi.org/10.1145/2810103.2812701
[78] Yihua Zhang, Aaron Steele, and Marina Blanton. 2013. PICCO: a general-purpose
compiler for private distributed computation. In 2013 ACM SIGSAC Conference
on Computer and Communications Security, CCS’13, Berlin, Germany, November
4-8, 2013, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung (Eds.). ACM,
813–826. https://doi.org/10.1145/2508859.2516752
[79] Yongjun Zhao and Sherman S. M. Chow. 2017. Are you The One to Share? Secret
Transfer with Access Structure. Proc. Priv. Enhancing Technol. 2017, 1 (2017),
149–169. https://doi.org/10.1515/popets-2017-0010
[80] Yongjun Zhao and Sherman S. M. Chow. 2018. Can You Find The One for Me?. In
Proceedings of the 2018 Workshop on Privacy in the Electronic Society, WPES@CCS
2018, Toronto, ON, Canada, October 15-19, 2018, David Lie, Mohammad Mannan,
and Aaron Johnson (Eds.). ACM, 54–65. https://doi.org/10.1145/3267323.3268965
A REMARK ON AUGMENTED SEMI-HONEST
MPSI PROTOCOL OF [51]
Here, we describe how the augmented semi-honest mPSI protocol
of [51] leaks intersection of the honest parties’ sets to the adversary.
Consider the following setting: Let 𝑃1 and 𝑃2 be the two corrupt
parties and let element 𝑥 be present in the input set of all parties
except 𝑃2. In augmented semi-honest protocol of [51], the relation
of zero-sharing phase with OPPRF outputs received by 𝑃1 will leak
that 𝑥 belongs to the intersection of honest party sets, even when it
clearly doesn’t belong to the intersection. Note that, as mentioned
before, such leakage is disallowed in standard semi-honest security.
B INSTANTIATIONS OF THE WPSM
FUNCTIONALITY
The wPSM functionality from Section 2.4 can be instantiated us-
ing an oblivious programmable pseudorandom function (OPPRF),
which was first introduced in [51]. More specifically, we can instan-
tiate this functionality using any of the three OPPRF: polynomial-
based batch OPPRF, table-based OPPRF and relaxed-batch OPPRF,
each of which offer a different trade-off in parameters. We infor-
mally describe these variants below, and explain how they can
be used to realize the F 𝛽,𝜎,𝑁
wPSM
to [13, 51, 65] for detailed definitions.
functionality. We refer the reader
Batch PPRF. [51] Informally, a pseudorandom function (PRF) [38],
sampled with a key from a function family, is guaranteed to be com-
putationally indistinguishable from a uniformly random function,
to an adversary (who does not have the key), given oracle access to
the function. In a programmable PRF (PPRF), the PRF function out-
puts “programmed" values on a set of “programmed" input points.
A “hint", which is also given to the adversary, helps in encoding
such programmed inputs and outputs. The guarantee is that the
hint leaks no information about the programmed values (but can
leak the number of programmed points). When 𝛽 instances of a
PPRF are used, then the corresponding 𝛽 hints can be combined
into a single hint, that hides all the programmed values (but not
the number of programmed points). This variant of PPRF is called
a Batch PPRF [65].
OPRF and Batch OPPRF. An oblivious PRF (OPRF) functional-
ity [30] is a two-party functionality, where the sender learns a
PRF key 𝑘 and the receiver learns the PRF outputs on its queries
𝑞1, · · · , 𝑞𝑡. An oblivious PPRF (OPPRF) is a two-party functionality,
Fopprf, similar to the OPRF, where now the sender specifies the
programmed inputs/outputs, the receiver specifies the evaluation
points 𝑞1, · · · , 𝑞𝑡, and the sender gets the PPRF key 𝑘 and the hint,
while the receiver gets the hint and the PPRF outputs on 𝑞1, · · · , 𝑞𝑡.
The OPPRF functionality defined with respect to a Batch PPRF is
called a Batch OPPRF, denoted by Fb−opprf.
Relaxed Batch OPPRF. [13] A relaxed batch PPRF is a variant of
PPRF, where now the function outputs a set of 𝑑 pseudorandom
values corresponding to every input point, with the constraint that
for a programmed input, the programmed output is one of these 𝑑
elements. The corresponding relaxed batch OPPRF functionality,
denoted by F 𝑑
, uses the relaxed batch PPRF to respond to
the sender and receiver. The sender inputs the programmed in-
puts/outputs and gets the relaxed batch PPRF keys and the hint,
while the receiver inputs the evaluation points and gets the hint
and the relaxed batch PPRF outputs on its queries.
rb−opprf
We now describe the three variants of OPPRFs, which can be
used to instantiate the F 𝛽,𝜎,𝑁
wPSM
functionality:
• Using the Batch OPPRF functionality [65]: On sender’s in-
puts {𝑋 𝑗} 𝑗 ∈[𝛽] and receiver’s input 𝑞1, · · · , 𝑞𝛽, the protocol
proceeds as follows: the sender picks 𝑤 𝑗 at random for each
𝑗 ∈ [𝛽], sets 𝑇𝑗 as a set of size |𝑋 𝑗|, all equal to 𝑤 𝑗, and the
sender and receiver invoke the Fb−opprf functionality on in-
puts {(𝑋 𝑗 ,𝑇𝑗)} 𝑗 ∈[𝛽] and {𝑞 𝑗} 𝑗 ∈[𝛽], respectively. The receiver
gets its output {𝑦 𝑗} 𝑗 ∈[𝛽] from the OPPRF functionality and the
sender sets its output as {𝑤 𝑗} 𝑗 ∈[𝛽] (and ignores its output from
the OPPRF functionality). By the property of the batch OPPRF,
it is guaranteed that 𝑦 𝑗 = 𝑤 𝑗 for each 𝑗 ∈ [𝛽] such that 𝑞 𝑗 ∈ 𝑋 𝑗
and 𝑦 𝑗 is random otherwise. Hence, this protocol securely real-
izes the F 𝛽,𝜎,𝑁
functionality in the Fb−opprf-hybrid model.
wPSM
Specifically, the polynomial-based batch-OPPRF from [65] can
be used to instantiate Fb−opprf in the above construction, which
gives a concrete communication cost of 3.5𝜆𝛽 + 𝑁 𝜎 and has a
round complexity of 2.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1197functionality in the Fopprf-hybrid model.
• Using the OPPRF functionality [51]: On sender’s inputs
{𝑋 𝑗} 𝑗 ∈[𝛽] and receiver’s input 𝑞1, · · · , 𝑞𝛽, the protocol pro-
ceeds as follows: the sender picks 𝑤 𝑗 at random for each 𝑗 ∈ [𝛽],
sets 𝑇𝑗 as a set of size |𝑋 𝑗|, all equal to 𝑤 𝑗. Let max𝛽 be the
application specific upper-bound on the size of the input sets.
The sender pads set 𝑋 𝑗 with dummy elements and set 𝑇𝑗 with
random elements, up to the upper-bound max𝛽, ∀𝑗 ∈ [𝛽]. The
sender and receiver invoke the Fopprf functionality on inputs
(𝑋 𝑗 ,𝑇𝑗) and 𝑞 𝑗 respectively, ∀𝑗 ∈ [𝛽]. The receiver gets output
𝑦 𝑗 from 𝑗th OPPRF functionality invocation. The sender sets its
output as {𝑤 𝑗} 𝑗 ∈[𝛽] (and ignores its output from the invoca-
tions of OPPRF functionalities). By the property of OPPRF, it is
guaranteed that 𝑦 𝑗 = 𝑤 𝑗 for each 𝑗 ∈ [𝛽] such that 𝑞 𝑗 ∈ 𝑋 𝑗 and
𝑦 𝑗 is random otherwise. Hence, this protocol securely realizes
the F 𝛽,𝜎,𝑁
wPSM
Specifically, the table-based OPPRF from [51] can be used to
instantiate Fopprf in the above construction, which gives a
concrete communication cost of (4.5𝜆 + 2⌈log(max𝛽)⌉𝜎)𝛽 and
a round complexity of 2. For the application of PSI, max𝛽 is
𝑂(log 𝑚/log log 𝑚), where 𝑚 denotes the size of the input sets.
• Using the Relaxed Batch OPPRF functionality [13]: Fix
𝑑 = 3 in the relaxed batch OPPRF functionality, F 𝑑
. Let
rb−opprf
𝑃1 and 𝑃2 be the sender and receiver of F 𝛽,𝜎,𝑁
functionality
respectively. On 𝑃1’s input {𝑋 𝑗} 𝑗 ∈[𝛽] and 𝑃2’s input 𝑞1, · · · , 𝑞𝛽,
wPSM
the protocol proceeds as follows: 𝑃1 picks 𝑤 𝑗 at random for each
𝑗 ∈ [𝛽], sets 𝑇𝑗 as a set of size |𝑋 𝑗|, all equal to 𝑤 𝑗, and 𝑃1 and
𝑃2 invoke the F 𝑑
functionality with 𝑃1 as sender with
inputs {(𝑋 𝑗 ,𝑇𝑗)} 𝑗 ∈[𝛽] and 𝑃2 as receiver with inputs {𝑞 𝑗} 𝑗 ∈[𝛽].
𝑃2 gets its output {𝑊𝑗} 𝑗 ∈[𝛽] from the relaxed batch OPPRF
functionality. By the property of relaxed batch OPPRF, it is
guaranteed that 𝑤 𝑗 ∈ 𝑊𝑗 and the other elements in 𝑊𝑗 are
random if 𝑞 𝑗 ∈ 𝑋 𝑗, else 𝑊𝑗 is completely random. Observe that
|𝑊𝑗| = 3, ∀𝑗 ∈ [𝛽].
In the next phase, 𝑃2 picks 𝑣 𝑗 at random for each 𝑗 ∈ [𝛽],
sets target set 𝑉𝑗 as a set of size |𝑊𝑗|, all equal to 𝑣 𝑗. 𝑃1 and
𝑃2 invoke 𝛽 many instances of OPPRF functionality, where
𝑃2 plays the role of sender with inputs (𝑊𝑗 , 𝑉𝑗) and 𝑃1 plays
the role of receiver with input 𝑤 𝑗 in the 𝑗th OPPRF instance.
𝑃1 gets output 𝑦 𝑗 from 𝑗th OPPRF functionality invocation.
𝑃2 sets output as {𝑣 𝑗} 𝑗 ∈[𝛽]. By the property of OPPRF, it is
guaranteed that 𝑦 𝑗 = 𝑣 𝑗 for each 𝑗 ∈ [𝛽] such that 𝑤 𝑗 ∈ 𝑊𝑗 and
𝑦 𝑗 is random otherwise. Using transitivity of implication, this
implies that 𝑦 𝑗 = 𝑣 𝑗 for each 𝑗 ∈ [𝛽] such that 𝑞 𝑗 ∈ 𝑋 𝑗 and 𝑦 𝑗
is random otherwise. Hence, this protocol securely realizes the
functionality in the (F 𝑑
F 𝛽,𝜎,𝑁
, Fopprf)-hybrid model.
wPSM
Specifically, using the solution proposed in [13] to instantiate
and table-based OPPRF [51] to instantiate Fopprf gives
F 𝑑
rb−opprf
a concrete communication cost of (8𝜆 + 4𝜎)𝛽 + 1.31𝑁 𝜎 and a
round complexity of 4.
rb−opprf
rb−opprf
C INSTANTIATION OF THE
CONVERTSHARES FUNCTIONALITY
To instantiate ConvertShares𝑛,𝑡, we make use of a functionality