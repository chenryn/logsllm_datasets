# 开篇词：这一次，我们从“丑”代码出发

大家好，我是郑晔。很高兴再次与大家见面！在极客时间平台上，我已经推出了两个专栏：《10x 程序员工作法》和《软件设计之美》，分别探讨了程序员的工作原则和设计原则，帮助读者构建了一个开启程序员精进之路的框架。

然而，无论你掌握了多少理论知识，最终还是要回归到实际编码工作中来。因此，这次我将带领大家一起从代码的坏味道出发，深入探讨如何编写高质量的代码。

## 为什么要讨论这个话题？

让我们先从一次代码评审说起。在这次评审中，我注意到了以下这段代码：

```java
public void approve(final long bookId) {
    ...
    book.setReviewStatus(ReviewStatus.APPROVED);
    ...
}
```

这段代码的主要逻辑是从仓库中找到一本书，并将其状态设置为审核通过，然后再保存回去。虽然前后的代码都很常规，但设置审核状态的部分引起了我的关注，于是有了下面这段对话：

- 我：这个地方为什么要这么写？
- 同事：我要将书的审核状态设置为审核通过。
- 我：我知道，但为什么要在服务类里直接使用 setter 呢？
- 同事：你的意思是？
- 我：审核状态是书的一个内部状态，服务类不应该直接操作它。通过 setter 暴露内部实现细节是一种破坏封装的做法。

同事听后表示认同，并将代码修改为如下形式：

```java
public void approve(final long bookId) {
    ...
    book.approve();
    ...
}
```

### 封装的重要性

在我看来，setter 的存在常常意味着对封装的破坏。面向对象编程的核心在于行为封装，而过度依赖 setter 通常只是简单地聚合数据，缺乏对行为的设计。此外，setter 往往还暗示着状态的变化，而在函数式编程中，追求不变性是一个好的设计原则。因此，setter 可以作为一个信号，提示我们此处的设计可能存在缺陷。

一个小小的 setter 背后隐藏着诸多问题，这些问题最终会导致代码变得难以维护，从而使得整个软件项目陷入困境。我一直强调，编写代码时不仅要关注正确性，还要注重可维护性。能够写出易于维护的代码，是一名程序员从业余走向职业的重要一步。

## 将坏味道重构为整洁代码

或许你也认同代码需要具备良好的可维护性，并且阅读过诸如《程序设计实践》、《代码整洁之道》等经典书籍。这些书籍无疑提供了宝贵的知识，但在实际工作中，我发现了一个现实问题：尽管大多数程序员都认同这些观点，但他们对于具体实施的理解却千差万别。

例如，“命名要有意义”这一条，不同人对其理解可能大相径庭。有些人认为只要不使用像 xyz 这样的无意义名称即可，但实际上，他们所起的名字依然可能难以理解。这是因为许多人虽然知道好的代码应该是什么样子，但却不清楚糟糕的代码长什么样。

Martin Fowler 在《重构》一书中提出了“代码的坏味道”这一概念。在我二十多年的编程生涯中，一直非常重视识别和处理代码中的坏味道。只有具备敏锐的嗅觉，才能发现并修复这些坏味道，进而逐步将代码打磨成整洁的代码。

Linux 内核开发者 Linus Torvalds 因其对坏味道的零容忍态度而闻名。因此，我也推荐那些希望提升编程水平的人们阅读《重构》一书，特别是第三章“代码的坏味道”。不过，《重构》中的内容往往要求读者具备深厚的理解力才能识别出具体的坏味道。为此，我决定开设一个专门讲解坏味道的专栏，用实际代码示例来展示最常见的坏味道。

在这个专栏中，我会提供一些即学即用的方法，不仅告诉你典型的坏味道是什么，还能教你如何在实际编程过程中发现它们。比如前面提到的 setter，一旦出现就需要立即警觉。我还整理了一份“坏味道自查表”，列出了一些明显的坏味道信号，你可以对照自己的代码进行检查。

除了列举坏味道外，我还会解释它们之所以成为坏味道的原因。例如，长方法和大类违背了单一职责原则。此外，我还将介绍一些重构手法，如重命名（Rename）、提取方法（Extract Method）等。现代 IDE 已经支持许多自动化的重构功能，但在进行任何重构之前，请务必确保有充分的测试覆盖，以保证改动前后功能的一致性。

如果你曾订阅过我的《10x 程序员工作法》和《软件设计之美》，你会发现这三个专栏之间有着密切的联系。三个专栏一起学习，效果更佳。

## 最后的自我介绍

我叫郑晔，拥有超过二十年的编程经验。我从事过各种与软件开发相关的工作，包括编写代码、管理团队、提供咨询以及参与开源项目。十年前，我在 InfoQ 上撰写了一个名为《代码之丑》的专栏，展示了真实世界中的一些丑陋代码。不少读者反馈说从中受益匪浅。这个新专栏就是在那个系列的基础上进行了系统化整理，即使你已经读过《代码之丑》，也能在这里学到新的东西。

这是一条通往代码精进的道路，我愿意与你同行，成为你在这条路上的向导。如果你想摆脱平庸的小白程序员状态，成为一个更优秀的程序员，欢迎加入我的专栏，让我们共同修炼，不断提升编写代码的技艺！