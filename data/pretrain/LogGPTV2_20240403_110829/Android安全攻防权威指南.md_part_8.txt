谷歌所认证的Android设备。它的目的是尽早揭示出兼容性问题，以确保软件在整个开发过程中
保持统一的兼容性。
正如前面提到的那样，OEM往往会深度修改Android框架层的代码。CTS工具可以确保指
定版本平台的API不被修改，即使经过厂商的修改之后。这确保了无论是谁生产的设备，应用开
发者都拥有一致的开发体验。
在CTS中进行的测试都是开源的，而且自2011年5月以来一直在不停地发展。CTS中包含
了一个名为security的测试目录，该目录集中了对安全问题的测试。可以在AOSP主代码树中看
到当前的安全测试用例：https://android.googlesource.com/platform/cts/+/master/tests/tests/security
1.3.3更新问题
毫无疑间，Android生态圈中最重要的复杂性问题当属对软件更新（尤其是安全补丁）的处
理。由于受到生态圈几个复杂性问题的影响，这一问题变得更加棘手。其中包括第三方软件、
OEM定制、移动通信运营商参与、不同的代码所有权等。上游开源项目安全问题、部署操作系
统更新的技术挑战、缺少后向移植机制（back-porting）以及瓦解的联盟等问题是目前的焦点。整
---
## Page 30
14第1章纵观Android生态图
体面言，这是导致目前Android生态图中存在着大量不安全设备的主要原因。
1.更新机制
这个问题的根源在于Android系统中存在着多个更新软件的渠道。更新应用与更新操作系统
有所不同，应用开发者可以通过GooglePlay商店来部署对应用安全漏洞的更新补丁—无论这
个应用是由谷歌、OEM、运营商，还是由独立开发者编写的。与之相反，修补操作系统中的一
个安全缺陷则需要部署一次固件升级或OTA更新。创建和部署这类更新的流程甚为艰巨。
例如，考虑在核心Android操作系统中修补一个安全缺陷。要修补这一安全问题，首先需要
谷歌修补它，然后事情就开始变得棘手，并且依赖于具体设备。对于Nexus设备，可以直接将更
新后的固件推送给终端用户。然而，如果要更新OEM品牌的设备，则还需要OEM开发一个包
含谷歌补丁的系统版本。当然，这里还有一种特殊情况，即OEM可以直接把更新后的固件推送
给未锁定设备的终端用户。对于运营商补贴的设备，运营商必须先准备好含有补丁的定制版本，
然后分发给它的客户群。即使在这个简单的例子中，操作系统安全漏洞的更新路径也远比应用更
新复杂。此外，还可能会发生与第三方开发者或底层硬件制造商相关的其他问题。
2.更新频率
前面提到，Android新版本的推行速度相当慢。事实上，该问题已经好儿次激起公愤。2013
年4月，美国公民自由联盟（ACLU）向美国联邦贸易委员会（FTC）提起投诉，称美国的四家
主要移动运营商并没有为他们所售出的Android智能手机提供及时的安全更新。他们进一步指出，
即便谷歌已经发布了安全漏洞补丁，运营商仍然没有及时提供安全更新。不能及时地安装安全更
新，Android就无法成为一种成熟且安全的操作系统。毫无疑问，人们正在期待政府对这种问题
采取一定的行动。
漏润报告、补丁开发和补丁实施之间的时间间隔也很长。漏洞报告和补丁开发之间的时间间
隔通常比较短，一般耗时儿天或几周。然面，从补丁开发，到将补丁部署在终端用户设备上，整
个时间周期就可能要从几周到几个月不等，甚至根本就不会有补丁实麓。依不同的安全漏润而异，
整个修补周期会涉及生态圈中多方利益相关者。遗撼的是，终端用户最终会为设备上所存在的漏
润埋单。
对于Android生态圈中所有的安全补丁来说，复杂性对它们的影响是不同的。举例来说，应
用由它们的作者直接更新。应用开发者及时推出更新的能力使过去几个安全漏洞得以快速修复。
此外，谷歌也证明了他们可以在一个合理的时间段内为Nexus设备部署固件更新。最后，高级用
户有时会自己承担风险来给自己的设备打补丁。
通常，谷歌会在发现漏洞儿天或几周内，即开始修补AOSP主代码树中的安全漏润。在这之
后，OEM才可以把这些“补丁”应用到其内部代码树中。然面，OEM在应用补丁时往往动作缓
慢。没有贴牌的设备通常会比运营商贴牌设备更快得到更新，因为它们无须经过运营商定制和运
营商的审批程序。运营商设备通常需要几个月才能得到安全更新，或者永远也得不到更新。
3.后向移植
术语“后向移植”指的是将当前软件版本的补丁应用至一个较旧的版本上。在Android生态
圈中，对安全补丁进行后向移植的情况几乎不存在。考虑这样一个假想的场景，Android的最新
---
## Page 31
1.3理解生态图的复条性15
版本是4.2；如果一个安全漏润被发现影响了Android4.0.4及以后版本，谷歌只会在4.2.x及以后
版本中修复这个漏洞，而之前版本（如4.0.4和4.1.x）的用户肯定将面临长期的安全风险。我们
相信，如果发生大范围的攻击事件，可以对安全补丁进行后向移植。然面到本书写作之时，还没
有对这种攻击的公开报道。
4.Android更新联盟
2011年5月，在Google I/O大会上，Android的产品经理Hugo Barra宜告了Android更新联
盟的成立。这一举措的既定目标是鼓励合作伙伴们作出承诺：在官方版本发布后18个月内更新
他们的Android设备-这个更新联盟由HTC、LG、摩托罗拉、三星、索尼爱立信、AT&T、T-Mobile、
Spint、Verizon和Vodafone公司共同创立。遗撼的是，在这次声明之后，再也没有人提起过Android
更新联盟。时间已经证明，开发新的固件版本，老旧设备的安全问题，最新发布硬件所带来的问
题，以及在新版本上的测试与开发问题等，都对及时更新版本造成阻碍。对那些销售不好的设备，
这个问题会特别严重，因为运营商和制造商再也没有动力对此有所投入。
5.更新的依赖关系
紧跟上游的开源项目是一项繁重的任务，在Android生态圈中更是如此，因为补丁的生命周
期拉得很长。例如，Android框架层中包含了一个Web浏览器引擎WebKit，好儿个其他项目也都
使用这个引擎，包括谷歌自己的Chrome浏览器。Chrome浏览器有着一个短到令人敬佩的补丁生
命周期，更新频率大概保持在儿周左右。与Android不同，Chrome浏览器还有一个非常成功的
安全漏洞奖励计划，即谷歌会在每次更新补丁时对安全漏润的发现者进行奖励并对安全漏润予以
公开披露。遗撼的是，在Chrome浏览器中发现并得到修补的安全漏润很多依然存在于Android
代码中。这些漏洞经常被称为half-day漏洞。这个术语是从half-life（半衰期）演变而来的，半
衰期用于测量放射性元素的衰变速度。类似地，half-day漏润也在衰变。令人痛心的是，当它衰
变时，Android用户都暴露在利用这类漏润的攻击风险中。
1.3.4安全性与开放性
Android生态阁中一个最为深刻的复杂性在于高级用户与有着较高安全意识厂商之间的关
系。高级用户想要并且需要不受阻碍地访问他们的设备。第3章会讨论这些用户动机背后的理念。
与此相反，一款非常安全的设备符合供应厂商和日常最终用户的最大利益。高级用户与厂商的不
同需求为研究者提供了非常有趣的问题。
作为所有高级用户的一个子集，安全研究人员面临着更具挑战性的决定。当研究人员发现安
全问题后，他们必须决定如何处理这些信息。是向供应商报告这些问题，还是应该公开披露？如
果研究人员报告了问题，供应商进行了修补，那就可能会阻碍高级用户获得他们所期望的完全控
制权。最终，每个研究人员的决定是由各自的动机驱动的。例如，当存在一个公开可行的能够获
①2012年2月15日、索尼公司全数收购爱立信公司所持有的索尼爱立信股份，并将索尼爱立信更名为“索尼移动
通信”，品牌改为“索尼”（Somy）编者注
---
## Page 32
16第1章级观Android生态图
露的漏洞后，他们仍能进行必要的访问。这也意味着，这些安全问题仍然未得到修补，恶意攻击
者仍会利用这些漏洞。在某些情况下，研究人员会选择公布经过深度混淆的漏洞攻击代码，这样
让厂商难以发现被利用的安全漏洞，而高级用户也可以更长时间地使用这些漏洞攻击。很多时候。
这些漏洞攻击代码中使用的安全漏洞只有在对设备进行物理访问时有用，这也有助于平衡两大利
益相关者群体各自具有冲突性的需求。
厂商也在努力地在安全性和开放性之间寻求平衡。所有的厂商都希望满足客户需求。前面提
到过，厂商修改Android是为了取悦用户，并试图差异化自己的产品。Bug可能会在这个过程中
被引入，从面有损整体的安全性。厂商必须决定是否作出这样的修改。另外，厂商在卖出设备后
要承担设备的质保。然而高级用户的修改会让系统变得不稳定，从面导致了一些原本不必要的技
术支持。保持技术支持的低成本以及防止欺诈性的保修更换显然更符合厂商们的最大利益。为了
处理这些问题，厂商采取了引导加载程序锁定机制。遗撼的是，这些机制也让有技术能力的高级
用户难以修改他们的设备。出于妥协，许多厂商会问终编用户提供解锁设备的方法。你可以在第
3章中阅读到更多有关的方法。
1.3.5公开披露
最后要提及的一项复杂性跟安全漏洞的公开披露或声明有关。在信息安全领域，这些公告的
作用在于提醒系统管理员和精明的消费者更新软件以消除已有漏润。有几个指标（包括是否充分
参与了安全漏洞披露过程）可以用来衡量一个厂商的安全成熟度。遗撼的是，这样的披露在
Android生态圈中是极其罕见的。这里我们记录了已知的儿次公开披露，并探讨如此发生的可能
原国。
2008年，谷歌在Google Groups 中启用了android-security-announce邮件列表，但很遗撼，这
个邮件列表仅包含一个介绍列表的帖子。你可以查看这个帖子，网址是https:/groups.google
com/d/msg/android-security-announce/aEba217U23A/vOyOllbBxw8J。在这个帖子发布之后。甚至没
有一个正式的官方公告。于是，跟踪Android安全问题的唯一方法是阅读AOSP的修改日志，跟
踪 Gerrit 的修改记录，或者从Android问题跟踪服务器（https://code.google.com/p/android/issues/list）
上大海捞针。这些方法都非常消耗时间，而且容易出错，因此不太可能成为安全漏洞评估的最佳
尽管目前尚不清楚为何谷歌没能坚持发布安全性公告，但可能存在以下几个原因。一种可能
性是担心这种做法会更大程度地暴露Android生态圈中的安全漏洞。基于此，可能谷歌也认为公
开接露已修补的安全漏润是不负责任的。但是许多安全专家（包指笔者）都认为，通过这种途径
披露安全漏洞所造成的危险远比让漏洞自己逐步曝光要小得多。另一种可能性则涉及谷歌与设备
制造商、运营商的复杂合作关系。很容易理解，披露一个仍然在业务合作伙伴产品中存在的安全
漏洞，可能会被视为不友好的举动。如果是这种情况，那就意味着谷歌将业务关系的优先级摆在
了公众利益之上。
撤开谷歌不论，很少有厂商会对安全漏润进行公开披露。许多OEM都完全避免公开披露、
---
## Page 33
1.4小结17
甚至回避媒体关于热点安全漏洞的问询。例如，HTC尽管在上张贴了披露政策，但却从未公开披
露过任何安全漏洞。在少数情况下，运营商会提到在他们的更新中包含了“重要的安全补丁”
他们几乎不会引用安全问题的CVE（通用漏润与披露）编号。
CVE项目旨在创建一个集中的、标准化的安全漏洞跟踪编号。安全专业人员，特别是安全
漏洞研究专家，会使用这些编号来跟踪软件或硬件中的安全问题。使用CVE编号极大地提升了
跨越组织边界识别与讨论同一个安全问题的能力。接受CVE项目的公司通常会被认为是非常成
熟的企业，因为他们意识到了在产品中记录和分类安全漏洞的必要性。
在利益相关者中的厂商这一边，已经有一家公司站出来认真地对安全漏洞进行公开披露，这
就是高通公司。高通公司通过CodeAurora论坛公开披露漏洞。这个小组由儿家服务移动无线业
界的厂商联合成立，由高通公司运营。CodeAurora网站提供了安全公告页面（htps:/www.codeaurora
org/projects/security-advisories），其中包含了关于安全问题与CVE编号的详细信息。这种安全成
熟度应该是其他利益相关者学习的榜样，这样才能让Android生态圈的整体安全性得到提升。
总体面言，安全研究人员是Android生态圈中对安全漏洞公开披露的最大支持者。尽管并非
所有研究人员都会尽心尽力，但他们还是会让安全问题受到所有其他利益相关者的关注。安全问
题的披露往往是由独立研究人员或安全公司操作的，他们会在邮件列表、安全会议或其他公开论
坛上对这些问题进行公开披露。越来越多的研究人员正在与厂商一方的利益相关者协调有关安全
漏洞披露的事项，意图能在不知不觉间改善Android的安全性。
1.4小结
在本章中，你看到了Android操作系统是如何经过多年的发展，由零开始逐渐征服移动操作
系统市场的。本章介绍了Android生态圈的主要利益相关者，解释了他们各自的角色及参与动机。
本章详细介绍了困扰Android生态圈的各种复杂性问题，以及它们是如何影响Android安全性的。
有了对Android生态圈复杂性的深刻理解，你就可以很容易地找出关键问题领域，进而更有效地
致力于解决Android安全性问题。
下一章将概述Android的安全设计与架构，揭开Android工作原理以及实施安全机制的技术
内幕。
---
## Page 34
第2章
Android的安全设计与架构
Android系统由许多承担安全检查与策略执行任务的机制构成。与任何现代操作系统一样，
Android中的这些安全机制互相交互，交换关于主体（应用、用户）、客体（其他应用、文件和设
备）以及将要执行操作（读、写、删除等）的各种信息。安全策略执行通常不会发生故障，但偶
尔也会出现一些裂缝，为滥用提供了机会。本章将讨论Android系统的安全设计与架构，为分析
Android平台的整体攻击面打好基础。
2.1
理解Android系统架构
Android的总体架构有时被描述为“运行在Linux上的Java”，然面这种说法不够准确，并不
能完全体现出这一平台的复杂性和架构。Android的总体架构由5个主要层次上的组件构成，这
5层是：Android应用层、Android框架层、Dalvik虚拟机层、用户空间原生代码层和Linux内核
层。图2-1显示了这些层是如何构成Android软件栈的。
电子邮件
电话
主安装的
AP
ndroid.,
电管理
挂服务
面09
秋态柜管理器
动管理器
管
来额：加识共享（相间方式其享）3.0版协设
图2-1Android系统的总体架构
---
## Page 35
2.2理解安全边界和安全策略执行19
Android应用层允许开发者无须修改底层代码就对设备的功能进行扩展和提升，而Android
框架层则为开发者提供了大量的用来访问Android设备各种必需设备的API，也就是充当应用层
与Dalvik虚拟机（DalvikVM）层之间的“粘合剂”。API中包含各种构件（building block）以允
许开发者执行通用任务，比如管理UI元素、访问共享数据存储，以及在应用组件间传递信息等。
Android应用和 Android框架都是用Java语言开发的，并在DalvikVM中运行。DalvikVM的