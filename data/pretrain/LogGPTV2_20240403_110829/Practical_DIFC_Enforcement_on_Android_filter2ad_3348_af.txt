### 实验：在WPS Office应用中共享文档至K-9 Mail

**实验步骤：**
1. 在WPS Office应用程序中打开一个BCloud中的文档。
2. 通过WPS Office应用将该文档分享给K-9 Mail，此时K-9 Mail的“撰写”窗口出现。
3. 选择使用工作账户发送邮件，并从联系人列表中选取一位收件人添加到“收件人”字段。
4. 尝试附加另一文件，点击“附加”操作后打开了Android系统的文件浏览器。
5. 选择一个文件并返回K-9 Mail的撰写界面，但未立即发送工作邮件，而是切换到了主屏幕。
6. 重复上述整个过程，但这次是在默认（即无标签）上下文中进行，并设置发送者为个人账户。
7. 最后，分别发送了两封邮件。在整个实验过程中，我们监控系统日志以记录重要事件（如网络拒绝访问）。

**观察结果：**

1. **上下文特定实例：**
   当我们将工作数据（在上下文{t}中）与WPS Office及随后的K-9 Mail共享时，这些应用程序的实例（即进程和组件）在工作上下文{t}中启动，并连接到内部和外部（SD卡）存储层Layer(t)。而无标签上下文则创建了带有空标签（{}）的独立实例，并连接到默认存储层。两种上下文中的实例同时存在，且没有崩溃或异常行为。

2. **上下文特定的数据分离：**
   - 在工作({t})实例中使用K-9 Mail附加另一个文档时，可以看到默认存储层上的所有文档（即无标签文件）以及工作Layer(t)中的文档（来自BCloud）。
   - 在默认上下文中，只能看到默认层上的文件。此外，在默认上下文中，K-9 Mail会从用户的所有无标签联系人中推荐，但在工作上下文中，则仅推荐工作联系人以及在BCloud同步其标签之前存在的无标签联系人。也就是说，K-9 Mail无法看到在默认层联系人数据库中新创建的记录，即使这些记录已被复制到Layer(t)。

3. **域降级：**
   在工作上下文中，K-9 Mail无法连接到gmail.com的SMTP和IMAP子域名，只能连接到由标签t降级后的域名。未经修改的K-9 Mail默默处理了这些网络访问异常，既没有崩溃也没有显示错误消息。

### 折衷与限制
本节描述了我们的方法所涉及的一些折衷与局限性，部分基于案例研究中的观察结果。

1. **集中视角：**
   用户无法同时查看有标签和无标签的数据，除非应用程序在有标签的上下文中启动（例如，在{t}上下文中的K-9 Mail）。我们设想对应用程序启动器和手机设置进行修改，允许用户默认以某个标签启动应用程序（如文件浏览器），以便同时访问有标签和无标签的数据。测试应用已采用类似技术，因此这样的启动器应该不难创建。然而，对于多个非默认上下文（例如，{t1, t2, t3, ...}）的集中视角可能需要一个受信任的操作系统应用程序，该程序不受多实例化的影响（但只受浮动标签的约束），因为浮动标签本身容易导致信息泄露（见第6节）。

2. **默认层更新：**
   虽然特定上下文版本的文件通常是可以接受的，但对于数据库文件（如K-9 Mail在工作上下文中读取的联系人），用户可能会期望无标签上下文中的新记录被传播到有标签上下文中的副本。缺乏更新主要是由于我们的文件级写时复制实现（即OverlayFS）。正如第5节所述，块级写时复制文件系统（如BTRFS [32]）可能会缓解这一问题，因为它只会复制由有标签上下文修改的块，并且默认上下文中新分配的块对有标签上下文是可访问的，尽管这一点还需要进一步探索。

3. **访问控制拒绝：**
   浮动标签确保了组件间通信不会被拒绝，并且资源（如文件、其他组件）在所有保密上下文中都是可用的。虽然应用程序可能被拒绝网络访问，但已有研究解决了这个问题（如AppFence [17]）。此外，大多数IDE（如Eclipse）强制编译时检查适当的异常处理，因网络拒绝而导致应用程序崩溃的情况非常少见，正如案例研究所示。

4. **实例爆炸：**
   Weir为使用的上下文创建单独的上下文特定K-9 Mail实例。理论上，最坏情况下组件实例的数量等于组件数量乘以所有现有上下文的数量（不仅仅是正在使用的上下文）。我们的事件驱动和“懒惰”实例化使得这种情况实际上不太可能发生，不像那些执行所有现有上下文的方法（见第10节）。另一方面，针对特定应用程序组件的拒绝服务攻击是可行的，通过在短时间内启动大量实例来显著影响该组件的查找时间。我们的实现可以修改以检测并防止不寻常的组件实例化速率。请注意，组件的多实例化仅影响其自身的查找时间（如第7.1节所述），不能用于具有全设备范围影响的攻击。

5. **资源开销：**
   多实例化可能导致内存、电池和存储方面的资源开销。内存开销是可控的，因为Android的内存管理器会自动从低优先级组件回收内存。此外，任何关于电池或存储使用的测量都必然取决于标签数量、应用程序/组件数量、应用程序类型（如游戏与文本编辑器）、用户场景方面（如用户发起的流、场景特定的存储访问）。未来将进行大规模客观研究。

6. **一致性问题：**
   对于远程服务器而言，Weir中的应用程序实例类似于运行在不同设备上的实例（例如，用户从两个设备登录）。因此，此类场景中的数据一致性问题并不是由多实例化引起的。

7. **隐蔽通道：**
   Weir中介了主体与对象之间的显式通信，但并未解决Android中存在的隐蔽通道问题。可以通过使用权限标签[6, 40, 44]来防御利用隐蔽通道的对手，通过阻止访问某些受污染的数据。虽然权限标签可以很容易地集成到Weir中，但为具有不可预测用例的第三方应用程序设置权限策略较为困难，需要从策略规范的角度进一步探索。最后，与专注于防止程序内不受信任代码外泄数据的信息流控制系统（如安全多重执行[11]）不同，Weir的重点在于应用程序间的数据共享。因此，使用权限标签对应用程序进行分隔不在本文讨论范围内。

8. **消息和文件的显式标记：**
   在Android上，必须通过操作系统间接传递消息（如意图消息），才能在两个实例之间建立双向Binder连接。Weir允许在间接通信中使用浮动标签（但不允许直接Binder调用），并且多实例化确保双向Binder连接两端的两个实例具有相同的标签，这对于同步Binder消息来说已经足够。因此，对单个Binder消息进行标记并不会提供额外的灵活性，与显式标记DIFC系统（如COWL [41]、Flume [21]）不同。请注意，Weir允许对间接消息（即意图标记）进行显式标记。此外，如果将文件显式标记为与其创建进程实例不同的标签，则会将其放在错误的层上。这种错误存储的文件将不会对将来以匹配标签启动的实例可见，可能导致不可预测的应用程序行为。因此，我们的设计牺牲了显式标记文件的灵活性，以换取稳定的上下文敏感存储。

### 相关工作
在第3.1节中，我们描述了先前针对Android提出的DIFC提案（即Aquifer [28]、Jia等[19]和Maxoid [46]）。现在我们描述其他相关的先前研究。

#### DIFC
Myers和Liskov提出了去中心化标记模型（DLM）[26]，允许安全主体定义自己的标签。此后，提出了许多DIFC系统，提供了有价值的策略和执行模型[20,21,25–27,33,44,49,50]。基于语言的DIFC方法（如JFlow [25]和Jif [27]）在程序内提供了精确度，但依赖于操作系统对操作系统对象（如进程、文件、套接字）的DIFC执行。相反，粗粒度的操作系统级方法（如HiStar [49]和Asbestos [44]）为操作系统对象之间的流提供了安全性，但无法在编程语言变量的粒度上推理流。虽然Weir也是一种操作系统级DIFC方法，意味着它无法在程序变量级别上达到精度，但上下文敏感的执行确保Weir始终比传统的操作系统级DIFC具有更高的精度。此外，尽管Laminar [30, 33]提供了语言级和操作系统级的双重执行，但它要求应用程序进行修改以使用精确的语言级执行。这对Android的向后兼容DIFC来说不是一个选项。最后，Weir不要求通用应用程序像Laminar、HiStar和Flume [20, 21]那样明确定义流，因为Android上的应用程序间通信往往是不可预测的。

#### 安全多重执行
安全多重执行[11]被提出以确定并执行程序的执行是非干扰的，即消除程序内不受信任代码的非法数据流。该方法通过在所有点上进行多次并发执行来实现非干扰，移除不符合特定执行标签的语句。相反，懒惰多实例化只在调用者的安全上下文中创建一个实例。与安全多重执行将多个执行视为同一程序实例的一部分不同，多实例化将多个执行视为在内存和存储中分离的无关上下文特定实例。我们的方法更适合Android的应用程序间数据共享抽象，而安全多重执行可能对证明一般程序的非干扰性有用。此外，安全多重执行假设标签集是有限且预先定义的。这个假设在DIFC系统中被违反，其中标签集通常是大的且事先未知的，一次性执行所有标签是不切实际的。

#### 面向面执行
Jeeves [48]和Jaqueline [47]通过一种称为面向面执行的技术，确保安全主体根据其保密上下文看到不同的数据视图。Weir方法的结果与此类似，即每个安全主体只能看到其自身保密上下文中的数据。对于面向面执行，程序员必须预先指定数据的副本，这在需要定义单个程序中不同用户的安全性时是可接受的（如会议提交网站）。相反，在Android上，Weir允许应用程序无需修改即可运行，并按需创建上下文特定副本，更为实用。具体来说，Weir中的数据不是编程语言变量的值，而是每种标签下的组件实例和文件系统层。最后，就像安全多重执行一样，面向面执行在IFC格较小（如两个标签）或有限的情况下更为适用，而在DIFC中，标签可以在运行时创建，这种方法可能不可行。

#### 粗粒度容器
诸如Samsung Knox [34]和Android for Work [2]之类的方法通过将一组应用程序隔离到不同的容器中来保护企业数据。容器无法弥补数据保密性的不足，因为它们无法应对容器内的威胁，即受信任应用程序意外导出机密数据或潜在的受信任应用程序被破坏。虚拟手机（如Cells [4]）同样不足以保证数据保密性。

#### Android上的传递执行
Android权限缺乏传递执行，并且容易受到特权提升攻击[7, 16]。IPC Inspection [14]通过将调用者的有效权限减少到调用链中最不特权组件的权限来强制传递执行。Quire [12]向被调用的应用程序提供调用链信息，以防止混淆代理攻击。像浮动标签一样，权限减少是累加的，可能会严重限制共享组件。

#### Android上的细粒度污点跟踪
TaintDroid [13]通过细粒度污点跟踪检测Android上的私有数据泄露，但易受隐式流的影响。CleanOS [43]和Pebbles [38]使用细粒度污点跟踪来管理和驱逐私有数据。对于数据库中的数据跟踪，这两种方法都依赖于对数据库库的修改，这可能并不安全，因为库在执行主体的内存中运行。

### 结论
Android的组件和存储抽象使得安全且实用的DIFC执行变得具有挑战性。为了解决这些挑战，我们提出了懒惰多实例化和域降级。我们设计并实现了一个DIFC系统Weir，并展示了其对性能的微小影响以及与遗留应用程序的兼容性。通过这样做，我们展示了如何在Android上实现安全且向后兼容的DIFC执行。

### 致谢
这项工作得到了北卡罗来纳州立大学国家安全局安全科学实验室、NSF CAREER拨款CNS-1253346、NSF-SaTC拨款CNS-1228782和CNS-1228620以及美国空军和国防高级研究计划局（DARPA）合同编号FA8650-15-C-7562的部分支持。本文表达的观点、发现和结论或建议仅代表作者观点，并不一定反映资助机构的观点。

### 参考文献
[1] ALJURAIDAN, J., FRAGKAKI, E., BAUER, L., JIA, L., FUKUSHIMA, K., KIYOMOTO, S., AND MIYAKE, Y. Run-Time Enforcement of Information Flow Properties on Android. Tech. Rep. CMY-CyLab-12-015, CyLab, Carnegie Mellon University, 2012.
[2] ANDROID. Android for Work. https://www.android.com/work/.
[3] ANDROID DEVELOPERS. Tasks and Back Stack. https://developer.android.com/guide/components/tasks-and-back-stack.html.
[4] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND NIEH, J. Cells: a virtual mobile smartphone architecture. In Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles (2011), ACM, pp. 173–187.
[5] BAUER, L., CAI, S., JIA, L., PASSARO, T., STROUCKEN, M., AND TIAN, Y. Run-time Monitoring and Formal Analysis of Information Flows in Chromium. In Proceedings of the ISOC Network and Distributed Systems Security Symposium (NDSS) (Feb 2015).
[6] BELL, D. E., AND LAPADULA, L. J. Secure Computer Systems: Mathematical Foundations. Tech. Rep. MTR-2547, Vol. 1, MITRE Corp., 1973.
[7] DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., AND WINANDY, M. Privilege Escalation Attacks on Android. In Proceedings of the 13th Information Security Conference (ISC) (2010).
[8] DENNING, D. E. A Lattice Model of Secure Information Flow. Communications of the ACM (1976).
[9] DEVELOPERS, K.-. M. K-9 Mail. https://github.com/k9mail, 2015.