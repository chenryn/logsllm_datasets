服务
器证书
客户端 因特网 服务器
（2）服务器发送选中的密码和证书
服务器
客户端 因特网 服务器
SSL安全参数的握手
客户端 因特网 服务器
（3）客户端发送保密信息；客户端和服
务器生成密钥
客户端 因特网 服务器
（4）客户端和服务器互相告知，开始加密过程
图14-16 （简化版）SSL握手
这是SSL握手的简化版本。根据SSL的使用方式，握手过程可能会复杂一些，但总
的思想就是这样。 325
14.7.5 服务器证书
SSL支持双向认证，将服务器证书承载回客户端，再将客户端的证书回送给服务器。
而现在，浏览时并不经常使用客户端证书。大部分用户甚至都没有自己的客户端证
书。11服务器可以要求使用客户端证书，但实际中很少出现这种情况。12
另一方面，安全HTTPS事务总是要求使用服务器证书的。在一个Web服务器上执行
安全事务，比如提交信用卡信息时，你总是希望是在与你所认为的那个组织对话。由
知名权威机构签发的服务器证书可以帮助你在发送信用卡或私人信息之前评估你对服
务器的信任度。
注11： 在某些公司的网络设置中会将客户端证书用于Web浏览，客户端证书还被用于安全电子邮件。未来，
客户端证书可能会更经常地用于Web浏览，但现在它们发展的速度非常慢。
注12：有些组织的内部网络会使用客户端证书来控制雇员对信息的访问。
安全HTTP ｜ 343
服务器证书是一个显示了组织的名称、地址、服务器DNS域名以及其他信息的
X.509 v3派生证书（参见图14-17）。你和你所用的客户端软件可以检查证书，以确
326 保所有的信息都是可信的。
服务
客户端 器证书 因特网 服务器
证书序列号 35:DE:F4:CF
证书过期时间 Wed,Sep 17,2003
站点的组织名 Joe’s Hardware Online
站点的DNS主机名 www.joes-hardware.com
站点的公开密钥
证书颁发者的名称 RSA Data Security
证书颁发者的签名
图14-17 HTTPS证书是带有站点信息的X.509证书
14.7.6 站点证书的有效性
SSL自身不要求用户检查Web服务器证书，但大部分现代浏览器都会对证书进行简
单的完整性检查，并为用户提供进行进一步彻查的手段。网景公司提出的一种Web
服务器证书有效性算法是大部分浏览器有效性验证技术的基础。验证步骤如下所述。
• 日期检测
首先，浏览器检查证书的起始日期和结束日期，以确保证书仍然有效。如果证书
过期了，或者还未被激活，则证书有效性验证失败，浏览器显示一条错误信息。
• 签名颁发者可信度检测
每个证书都是由某些证书颁发机构（CA）签发的，它们负责为服务器担保。证
书有不同的等级，每种证书都要求不同级别的背景验证。比如，如果申请某个电
子商务服务器证书，通常需要提供一个营业的合法证明。
任何人都可以生成证书，但有些CA是非常著名的组织，它们通过非常清晰的流
程来验证证书申请人的身份及商业行为的合法性。因此，浏览器会附带一个签
名颁发机构的受信列表。如果浏览器收到了某未知（可能是恶意的）颁发机构
344 ｜ 第14章
签发的证书，那它通常会显示一条警告信息。有些证书会携带到受信CA的有效
签名路径，浏览器可能会选择接受所有此类证书。换句话说，如果某受信CA为
“Sam的签名商店”签发了一个证书，而Sam的签名商店也签发了一个站点证
书，浏览器可能会将其作为从有效CA路径导出的证书接受。 327
• 签名检测
一旦判定签名授权是可信的，浏览器就要对签名使用签名颁发机构的公开密钥，
并将其与校验码进行比较，以查看证书的完整性。
• 站点身份检测
为防止服务器复制其他人的证书，或拦截其他人的流量，大部分浏览器都会试着
去验证证书中的域名与它们所对话的服务器的域名是否匹配。服务器证书中通常
都包含一个域名，但有些CA会为一组或一群服务器创建一些包含了服务器名称
列表或通配域名的证书。如果主机名与证书中的标识符不匹配，面向用户的客户
端要么就去通知用户，要么就以表示证书不正确的差错报文来终止连接。
14.7.7 虚拟主机与证书
对虚拟主机（一台服务器上有多个主机名）站点上安全流量的处理有时是很棘手的。
有些流行的Web服务器程序只支持一个证书。如果用户请求的是虚拟主机名，与证
书名称并不严格匹配，浏览器就会显示警告框。
比如，我们来看以路易斯安那州为主题的电子商务网站Cajun-Shop.com。站点的托
管服务提供商提供的官方名称为cajun-shop.securesites.com。用户进入http://www.
cajun-shop.com时，服务器证书中列出的官方主机名（*.securesites.com）与用户浏
览的虚拟主机名（www.cajun-shop.com）不匹配，以致出现图14-18中的警告。
为防止出现这个问题，Cajun-Shop.com的所有者会在开始处理安全事务时，将所有
用户都重定向到cajun-shop.securesites.com。虚拟主机站点的证书管理会稍微棘手
一些。
14.8 HTTPS客户端实例
SSL是个复杂的二进制协议。除非你是密码专家，否则就不应该直接发送原始的
SSL流量。幸运的是，借助一些商业或开源的库，编写SSL客户端和服务器并不十
分困难。
安全HTTP ｜ 345
（a）由于站点是虚拟主
机站点，而证书的主机名
为*.securesites.com，所以
这个URL（www.cajun-shop.com）
中的主机名与证书中的名称不匹配。
(b)对话框警告用户站点证书的日期有效，
而且来自有效的证书颁发机构，但证书
中所列名称与URL所请求的站点不相符。
（c）为了获取更详细的信息，用户点击了“查看
证书”按钮，看到证书是一个通配证书，主机
名为*.securesites.com。有此信息之后，用户就
可以判定是该接受还是该拒绝这个证书了。
(d)接受证书，通过安全HTTPS
协议装载页面。为避免此类用
户错误，这个特定的站点将所
有 HTTPS流量都导向了主机
别名cajun-shop.securesites.com。
这个虚拟主机名与ISP在其商业
包中提供的证书名字相符。
图14-18 证书名不匹配引发的证书错误对话框
14.8.1 OpenSSL
OpenSSL是SSL和TLS最常见的开源实现。OpenSSL项目由一些志愿者合作开发，
目标是开发一个强壮的、具有完备功能的商业级工具集，以实现SSL和TLS协议以
及一个全功能的通用加密库。可以从http://www.openssl.org上获得OpenSSL的相
328 关信息，并下载相应软件。
346 ｜ 第14章
你可能还听说过SSLeay（读作S-S-L-e-a-y）。OpenSSL是SSLeay库的后继者，接
口非常相似。SSLeay最初是由Eric A. Young（就是SSLeay中的“eay”）开发的。
14.8.2 简单的HTTPS客户端
本节我们将用OpenSSL包来编写一个非常初级的HTTPS客户端。这个客户端与服
务器建立一条SSL连接，打印一些来自站点服务器的标识信息，通过安全信道发送 329
HTTP GET请求，接收HTTP响应，并将响应打印出来。
下面显示的C程序是普通HTTPS客户端的OpenSSL实现。为了保持其简洁性，程
序中没有包含差错处理和证书处理逻辑。
这个示例程序中删除了差错处理功能，所以只能将其用于示例。在一般的有差错存
在的环境中，软件会崩溃或者无法正常运行。 330
/**********************************************************************
* https_client.c --- very simple HTTPS client with no error checking
* usage: https_client servername
**********************************************************************/
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
void main(int argc, char **argv)
{
SSL *ssl;
SSL_CTX *ctx;
SSL_METHOD *client_method;
X509 *server_cert;
int sd,err;
char *str,*hostname,outbuf[4096],inbuf[4096],host_header[512];
struct hostent *host_entry;
struct sockaddr_in server_socket_address;
struct in_addr ip;
/*========================================*/
/* (1) initialize SSL library */
/*========================================*/
安全HTTP ｜ 347
SSLeay_add_ssl_algorithms( );
client_method = SSLv2_client_method( );
SSL_load_error_strings( );
ctx = SSL_CTX_new(client_method);
printf("(1) SSL context initialized\n\n");
/*=============================================*/
/* (2) convert server hostname into IP address */
/*=============================================*/
hostname = argv[1];
host_entry = gethostbyname(hostname);
bcopy(host_entry->h_addr, &(ip.s_addr), host_entry->h_length);
printf("(2) '%s' has IP address '%s'\n\n", hostname, inet_ntoa(ip));
/*=================================================*/
/* (3) open a TCP connection to port 443 on server */
/*=================================================*/
sd = socket (AF_INET, SOCK_STREAM, 0);
memset(&server_socket_address, '\0', sizeof(server_socket_address));
server_socket_address.sin_family = AF_INET;
server_socket_address.sin_port = htons(443);
memcpy(&(server_socket_address.sin_addr.s_addr),
host_entry->h_addr, host_entry->h_length);
err = connect(sd, (struct sockaddr*) &server_socket_address,
sizeof(server_socket_address));
if (err < 0) { perror("can't connect to server port"); exit(1); }
printf("(3) TCP connection open to host '%s', port %d\n\n",
hostname, server_socket_address.sin_port);
/*========================================================*/
/* (4) initiate the SSL handshake over the TCP connection */
/*========================================================*/
ssl = SSL_new(ctx); /* create SSL stack endpoint */
SSL_set_fd(ssl, sd); /* attach SSL stack to socket */
err = SSL_connect(ssl); /* initiate SSL handshake */
printf("(4) SSL endpoint created & handshake completed\n\n");
/*============================================*/
/* (5) print out the negotiated cipher chosen */
/*============================================*/
printf("(5) SSL connected with cipher: %s\n\n", SSL_get_cipher(ssl));
/*========================================*/
/* (6) print out the server's certificate */
/*========================================*/
server_cert = SSL_get_peer_certificate(ssl);
printf("(6) server's certificate was received:\n\n");
str = X509_NAME_oneline(X509_get_subject_name(server_cert), 0, 0);
printf(" subject: %s\n", str);
348 ｜ 第14章
str = X509_NAME_oneline(X509_get_issuer_name(server_cert), 0, 0);
printf(" issuer: %s\n\n", str);
/* certificate verification would happen here */
X509_free(server_cert);
/*********************************************************/
/* (7) handshake complete --- send HTTP request over SSL */
/*********************************************************/
sprintf(host_header,"Host: %s:443\r\n",hostname);