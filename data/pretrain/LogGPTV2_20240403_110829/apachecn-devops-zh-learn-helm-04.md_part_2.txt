以`.Values`开头的 Go 模板将引用在`values.yaml`文件中定义的值，或者在安装或升级过程中使用`--set`或`--values`标志传递的值。
以下示例表示处理之前的模板:
```
env:
  - name: CHAPTER_NUMBER
    value: {{ .Values.chapterNumber }}
  - name: CHAPTER_NAME
    values: {{ .Values.chapterName }}
```
在模板被处理后，YAML 资源的一个片段被渲染如下:
```
env:
  - name: CHAPTER_NUMBER
    value: 4
  - name: CHAPTER_NAME
    values: Understanding Helm Charts
```
用于引用图表值的`.Values`构造是一个可用于参数化的内置对象。在 Helm docume [目录(https://helm.sh/docs/chart_template_guide/builtin](https://helm.sh/docs/chart_template_guide/builtin_objects/)_ objects/)中可以找到内置对象的完整列表，但最常见的对象如下表所示:
![](img/new04.jpg)
每个对象前面的点(`.`)代表对象范围。后跟对象名称的点将范围限制在该对象上。例如，`.Values`范围仅使图表的值可见；`.Release`范围仅使`Release`对象下的字段可见；`.`范围代表全局范围，使所有这些对象可见，加上上表中定义的公共对象。
### values.schema.json 文件
在值和参数化的话题上，让我们花点时间讨论一下`values.schema.json`文件，它是图表目录中可能包含的文件之一。`values.schema.json`文件用于实施`values`文件中的特定模式。此模式可用于在安装或升级过程中验证提供的值。
以下片段显示了`values.schema.json`文件的样子:
```
{
  '$schema': 'https://json-schema.org/draft-07/schema#',
  'properties': {
    'replicas': {
      'description': 'number of application instances to deploy',
      'minimum': 0
      'type' 'integer'
    },
    . . .
  'title': 'values',
  'type': 'object'
}
```
有了这个模式文件，`replicas`值至少应该设置为`0`。添加到该文件的附加值对可以提供的值施加了附加限制。该文件是确保用户只提供图表模板中支持的参数值的好方法。
虽然 Go 模板允许图表开发人员参数化 Helm 图表，但它们也允许开发人员将条件逻辑提供到 YAML 文件中。接下来我们将探讨这一特性。
### 具有流控制的细粒度模板处理
虽然参数化允许图表开发人员用某些值替换字段，但 Go 模板化也为开发人员提供了控制其模板的流程和结构的能力。这可以使用以下关键词(在 Go 中称为`actions`)来完成:
![](img/04.jpg)
在图表模板化过程中，有时可能需要包含或排除某些 Kubernetes 资源或资源的某些部分。`if…else`动作可用于此目的。部署模板的以下片段包含一个条件块:
```
readinessProbe:
{{- if .Values.probeType.httpGet }}
  httpGet:
    path: /healthz
    port: 8080
    scheme: HTTP
{{- else }}
  tcpSocket:
    port: 8080
{{- end }}
  initialDelaySeconds: 30
  periodSeconds: 10
```
`if`块用于有条件地设置`readinessProbe`小节。如果`probeType.httpGet`值评估为`true`或非空，则将模板化`httpGet` `readinessProbe`。否则，创建的`readinessProbe`将是`tcpSocket` `readinessProbe`类型。花括号中使用的破折号用于指示空白应在处理后删除。左大括号后使用的破折号删除大括号前的空白，右大括号前使用的破折号删除大括号后的空白。
图表开发人员也可以使用`with`操作来修改值的范围。当引用的值块深度嵌套时，此操作非常有用。通过减少引用深度嵌套值所需的字符数量，它可以简化模板文件的可读性和可维护性。
下面的代码描述了一个`values`文件，它包含深度嵌套的值:
```
application:
  resources:
    limits:
      cpu: 100m
      memory: 512Mi
```
如果没有`with`动作，这些值将在`template`文件中引用，如下所示:
```
cpu: {{ .Values.application.resources.limits.cpu }}
memory: {{ .Values.application.resources.limits.memory }}
```
`with`动作允许开发人员修改这些值的范围，并使用简短的语法引用它们:
```
{{- with .Values.application.resources.limits }}
cpu: {{ .cpu }}
memory: {{ .memory }}
{{- end }}
```
最后，开发人员可以使用`range`动作执行重复的动作。此操作允许开发人员在值列表中循环。假设图表具有以下值:
```
servicePorts:
  - name: http
    port: 8080
  - name: https
    port: 8443
  - name: jolokia
    port: 8778
```
前面的代码提供了一个`servicePorts`列表，可以循环，如下例所示:
```
spec:
  ports:
{{- range .Values.servicePorts }}
  - name: {{ - name }}
  port: {{ .port }}
{{- end }}
```
`with`和`range`动作将范围限制在所提供的对象上。在`range`示例中，`range`作用于`.Values.servicePorts`对象，限制了点(。)符号转换为此对象下定义的值。要在`range`下制定一个引用所有值和内置对象的全局范围，开发人员应该在引用前加上美元符号(`$`)符号，如图所示:
```
{{- range .Values.servicePorts }}
  - name: {{ $.Release.Name }}-{{ .name }}
  port: {{ .port }}
{{- end }}
```
除了图表的值，开发人员还可以创建变量来帮助呈现资源。我们将在下一节探讨这个问题
### 模板变量
虽然它们不如其他模板功能常用，但图表开发人员可以在其图表模板中创建变量，以提供额外的处理选项。这种方法的一个常见用途是流控制，但是模板变量也可以服务于其他用例。
图表模板中的变量定义如下:
```
{{ $myvar := 'Hello World!' }}
```
这会将`myvar`变量设置为`Hello World!`字符串。变量也可以分配给对象，例如图表的值:
```
{{ $myvar := .Values.greeting }}
```
设置的变量随后会以下列方式在模板中引用:
```
data:
  greeting.txt: |
    {{ $myvar }}
```
使用变量的最佳情况之一是在范围块中，其中变量被设置为捕获列表迭代的索引和值:
```
data:
  greetings.txt: |
{{- range $index, $value := .Values.greetings }}
    Greeting {{ $index }}: {{ $value }}
{{- end }}
```
结果可以呈现如下:
```
data:
  greetings.txt: |
    Greeting 0: Hello
    Greeting 1: Hola
    Greeting 2: Hallo
```
变量也可以简化地图迭代的处理，如图所示:
```
data:
  greetings.txt: |
{{- range $key, $val := .Values.greetings }}
    Greeting in {{ $key }}: {{ $val }}
{{- end }}
```
可能的结果如下:
```
data:
  greetings.txt: |
    Greeting in English: Hello
    Greeting in Spanish: Hola
    Greeting in German: Hallo
```
最后，变量可以用来引用当前范围之外的值。
考虑以下`with`块:
```
{{- with .Values.application.configuration }}
My application is called {{ .Release.Name }}
{{- end }}
```
像这样的模板将无法处理，因为`.Release.Name`不在`.Values.application.configuration`的范围内。纠正这种情况的一种方法是将变量设置为`with`块上方的`.Release.Name`:
```