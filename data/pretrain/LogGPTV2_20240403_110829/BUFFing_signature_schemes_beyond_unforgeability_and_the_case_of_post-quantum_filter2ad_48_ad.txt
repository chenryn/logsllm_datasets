∗ is equal to KGen. For any message m the signature is
KGen
derived by appending a hash of the message, i.e., Sig
(sk, m) =
(Sig(sk, m), H(m)). For any signature of the form σ∗ = (σ, y)
∗ simply accepts the signature if
the veriﬁcation algorithm Vf
σ is accepted by Vf and y = H(m). Assuming that the hash
function is collision resistant, this ensures that each signature
is exclusive to the message that was signed and thus provides
DEO as well as S-DEO.
, Sig
, Vf
∗
∗
Observe that this transformation achieves MBS: the transfor-
mation binds the message through the hash function evaluation
to the signature, and hence (due to the collision resistance of
the hash function) the adversary is prevented from outputting
a second message that the signature also veriﬁes for. However,
this transformation does not provide CEO because the signature
is not necessarily exclusive to the public key. NR is in general
not achieved since the signature of the original scheme σ may
contain the message directly, allowing the adversary to re-sign
this message under a new key.
Pornin and Stern transformation 2. The second trans-
formation adds both CEO and DEO (and also the strong
variants) to any signature scheme. The construction itself
works similar to the previous one with the difference that
one appends the hash of the public key to the signature,
i.e., Sig
(sk, m) = (Sig(sk, m), H(pk)), and veriﬁes this hash
explicitly during veriﬁcation. Again by relying on the collision
∗
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
71702
resistance of the hash function the scheme provides M-S-UEO
since the signature cannot be reused with any other public key.
However, this transformation does neither achieve MBS nor
NR: MBS is not guaranteed because the signature is not bound
to the message that was signed and hence the transformation
cannot prevent the attacker from outputting two different
messages which both verify for the same signature. It does not
provide NR for the same reason as the ﬁrst transformation.
∗
Pornin and Stern transformation 3. The third transformation
adds CEO and DEO to any signature scheme without expanding
the signature size. This requires a speciﬁc property, namely
resistance to existential forgeries for all possible keys, i.e.,
also the possibly weak and incorrect keys the adversary might
use. Assuming this property, the transformation derives the
signature from the hash function evaluation of the message
concatenated with the public key instead of the plain message,
i.e., Sig
(sk, m) = Sig(sk, H(m, pk)). Pornin and Stern pro-
vide a proof in the random oracle model assuming the above
property showing that it achieves CEO and DEO. Note that a
similar transformation was previously proposed by Menezes
and Smart [6], who prepended the message with the public
key in an unambiguous way to achieve a security notion that
is equivalent to CEO. We expect that this transformation also
achieves S-CEO and S-DEO with a similar argument under
the same assumption. Without assuming the above mentioned
property, the transformation achieves none of the ﬁve security
properties, since a signature scheme may have a public key
under which the verify algorithm unconditionally accepts.
The BUFF transformation We propose a transformation
that simultaneously adds all ﬁve properties (S-CEO, S-DEO,
M-S-UEO, MBS and NR) and only relies on standard properties
of the hash function. Our BUFF transformation builds on
transformation 3, but adds the computed hash of the signed
data to the resulting signature similar to transformation 1.
Out of the many possible variants, it turns out that this
particular combination provides protection against weak keys
and achieves message-bound signatures and non re-signability.
Similar to transformations 1 and 2, the signature size is
increased by the output size of the hash function, but we show
in Figure 6 that for the NIST round 3 schemes the relative
size increase is typically negligible.
∗
∗
∗
∗
, Sig
The formal details of the BUFF transformation are given
from a signature scheme Π =
in Figure 5. We start
(KGen, Sig, Vf) and transform it into a new signature scheme
∗ is equal to KGen. We
Π∗ = (KGen
derive the signature for any message m as Sig
(sk, m) =
(Sig(sk, H(m, pk)), H(m, pk)). For any signature of the form
∗ simply accepts the
σ∗ = (ˆσ, ˆh) the veriﬁcation algorithm Vf
signature if ˆh = H(m, pk) and ˆσ is accepted by Vf for the
message H(m, pk).
) where KGen
, Vf
Our design follows the argument order of previous trans-
formations, but the order does not play a role in the proof.
We added the hash to the signature (increasing its size) to
enable a generic proof for all properties that is independent
of the underlying signature scheme details. However, it is
known that at least for some schemes (e.g., [4]) the same
∗
∗
(1λ):
(sk, pk) ←$ KGen(1λ)
return (sk, pk)
(sk, m):
KGen
11 :
12 :
Sig
21 : h ← H(m, pk)
22 : σ ←$ Sig(sk, h)
23 : σ
24 :
∗ ← (σ, h)
∗
return σ
∗
(pk, m, σ∗):
(ˆσ, ˆh) ← σ
∗
Vf
31 :
32 : h ← H(m, pk)
33 : d ← Vf(pk, h, ˆσ)
34 :
return
(cid:104)
d = 1 ∧ ˆh = h
(cid:105)
Figure 5: The BUFF (Beyond UnForgeability Features) transfor-
mation, which turns any EUF-CMA-secure signature scheme
Π into an EUF-CMA-secure scheme Π∗ that also achieves
M-S-UEO, MBS, and NR, even in the presence of weak keys.
properties can be achieved without increasing the signature
size by performing appropriate checks on the public keys and
providing a scheme-speciﬁc security analysis. However, we do
not know of a generic way to achieve this.
Jumping ahead, we note that in some schemes a hash value
with the same inputs already appears as part of the signature.
Speciﬁcally, for Fiat-Shamir signatures the hash value usually
appears in the signatures. In this case the transformation does
not even require a hash function invocation nor does it bear
the size penalty.
Theorem IV.5. Let Π be an EUF-CMA-secure signature
scheme. Then the application of the BUFF transformation
in Figure 5 produces an EUF-CMA-secure signature scheme
Π∗ that additionally also provides the properties of M-S-UEO,
MBS and NR assuming that the hash function H is collision
(cid:48) ∈ K} and
resistant and Φ-non-malleable where Φ = {φpk(cid:48)|pk
(cid:48)
φpk(cid:48)(m, pk) = (m, pk
).
Because the public key part pk in the input to φpk(cid:48) is known,
δ(m, pk) = (m, δ ⊕ pk)
we can rewrite the functions φpk(cid:48) as φ(cid:48)
for δ = pk ⊕ pk
(cid:48)
if the key length is ﬁxed, leaving the
message part untouched. Technically we therefore require
⊕-non-malleability which is known to hold for example for
Merkle–Damgård constructions with ideal round functions [17],
and with the same argument can be easily seen to hold also
for Sponge-based constructions with ideal permutations. As
such, the deployed hash functions in the signature schemes
considered here, namely, SHAKE-256 (Dilithium, FALCON,
Picnic, SPHINCS+), SHA-2 (Rainbow, SPHINCS+), and SHA-
3 (GeMSS) should be considered to provide non-malleability
in the above sense.
We note that Dilithium and Picnic, the two schemes which
already include a hash value in their signatures, slightly deviate
from the hash input pattern in the theorem and require a
different class Φ = {φpk(cid:48),ψ} for non-malleability. Dilithium
uses (pk, m, w1) as the input to the hash function where w1 is
part of the signature and which can thus potentially be modiﬁed
by the adversary via some function ψ, such that the operation
(cid:48)
is of the form φpk(cid:48),ψ(pk, m, x) = (pk
, m, ψ(x)). We note that
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
81703
Table II: Comparing transformations and known results if weak keys may be possible.  indicates that a property holds and 
indicates an attack. A property is marked with () if we know that it holds if there are no weak keys.
Transform.
[2]-1
[2]-2
[2]-3
BUFF
Signature
Sig(sk, m), H(m)
Sig(sk, m), H(pk)
Sig(sk, H(m, pk))
Sig(sk, H(m, pk)), H(m, pk) 
S-CEO S-DEO M-S-UEO MBS
NR


 ()


 ()













iterated hash functions with ideal round functions still obey
this form of non-malleability where one needs to modify the
ﬁxed-size public key, and the transformation theorem holds for
this case as well. This is also true for Picnic where the hash
input (a, pk, m) starts with a circuit description a which could
be potentially mauled by the adversary to a(cid:48) = ψ(a).
We provide some intuition why BUFF indeed achieves
the discussed properties. Intuitively, we achieve the exclusive
ownership properties by assuming the hash function to be
collision resistant which ensures that the signature is exclusive
to the public key that was used to generate it. Similarly, the
transformation provides message-bound signatures since the
hash function is collision resistant and hence the attacker cannot
output two different messages that the signature both veriﬁes.
The proofs for those properties can be found in Appendix B.
We provide the proof of non re-signability below. Intuitively,
the signature of the original scheme may leak at most the hash
digest of the message bound to the public key and not the
message itself. To formally reduce NR to Φ-non-malleability
we rely on the explicitly appended hash digest.
Proof. In this proof we show that the signature scheme Π∗
obtained from transforming Π according to Figure 5 achieves
non re-signability, assuming that the hash function is Φ-non-
malleable for Φ = {φpk(cid:48)} and φpk(cid:48)(m, pk) = (m, pk
(cid:48)
We start with assuming a successful attacker pair (A, D)
against NR of Π∗. We construct an efﬁcient reduction B =
(Bd,By) against the Φ-non-malleability of the hash function
H running A and D as a sub-routine. The adversary Bd upon
receiving the hash key hk starts with initializing the parameters
for the NR game. It computes the signing key pair which is
then coded into the state information st which will be passed
to the second stage. Further given the distribution D algorithm
Bd creates (the description of) a new distribution X that works
as D with the only difference that each sampled message of
this distribution gets the public key pk appended. Note that
the distribution X is required to be non-trivial by demanding
sufﬁcient min-entropy. This is simply ensured by the fact that
the underlying distribution D is by deﬁnition unpredictable
since its min-entropy grows strictly faster than logarithmic in
the security parameter.
The challenger for B now samples a message from X of the
form (m, pk) as well as some auxiliary information aux about
the message part (which is captured in the Φ-non-malleability
game through the hint function). Next, the challenger evaluates
the hash function H on input (m, pk) obtaining the digest h
and provides the second-stage adversary By with the input
).
(h, aux, st). The adversary By begins with parsing the state
information st obtaining the initial key pair. Next, it uses the
secret key to sign the hash digest obtaining the signature σ.
Then, it prepares the ﬁnal signature σ∗ as (h, σ). The adversary
A receives (pk, aux, σ∗) and outputs (σ(cid:48), pk
(cid:48)
) where σ(cid:48) has
(cid:48) (cid:54)= pk. Then By parses the signature
the form (˜h, ˜σ) and pk
(cid:48)
σ(cid:48) and deﬁnes a function φpk(cid:48) with φpk(cid:48)(m, pk) = (m, pk
).
Finally it outputs (˜h, φpk(cid:48)).
We observe that B has faithfully simulated the NR game
and since A was successful then also B is successful. This
(cid:48)
is true since σ(cid:48) is a valid signature on ˜h = H(m, pk
) which
in turn equals H(φpk(cid:48)(m, pk)) and hence the ﬁrst part of the
winning condition of B is fulﬁlled. The second condition,
namely φpk(cid:48)(x) (cid:54)= x, is also satisﬁed with x = (m, pk) and
(cid:48) (cid:54)= pk. Hence the
(cid:48)
φpk(cid:48)(m, pk) = (m, pk
attacker has successfully mauled the input of the hash function.
However this contradicts our assumption that H is Φ-non-
malleable and therefore such an adversary cannot exist.
) (cid:54)= (m, pk) due to pk
V. ANALYZING NIST’S ROUND 3 SIGNATURE SCHEMES
In this section, we analyze the six signature schemes submit-
ted to round 3 of NIST’s call to standardize quantum-resistant
schemes [22]. Our goal is to check whether these signature
schemes achieve the security properties beyond unforgeability
as presented in Sections III and IV. We expand on the
three ﬁnalists CRYSTALS-Dilithium [23], FALCON [24], and
Rainbow [25], and summarize our analysis of the three alternate
candidates GeMSS [26], Picnic [27], and SPHINCS+ [28]. We
give full details for the alternates in Appendix C.
Anticipating our results, we prove that all three properties
hold for Dilithium and Picnic, and we show that some properties
do not hold for FALCON, Rainbow, and GeMSS. We provide
an overview of our results in Table I. We visualize the relative
cost for signature size of provably achieving all three properties
using our transformation in Figure 6.
A. CRYSTALS-Dilithium
Dilithium [23] is a lattice-based signature scheme whose
security is based on the hardness of the Learning with Errors
(LWE) problem and a variant of the shortest integer solution
(SIS) problem, and employs Fiat-Shamir with Aborts. Figure 7
gives an algorithmic description of Dilithium.
In the following we provide a short description of Dilithium.
In order to derive the key pair, the key generation algorithm
starts with generating an initial string that is given as an input to
an extendable output function (XOF) H generating initial strings
(ρ, ς, K). Inputting ς to H generates two short vectors s1, s2
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
91704
// s1, s2 are short vectors
(cid:48) ← CRH(K, µ)
ζ ←${0, 1}256
(ρ, ς, K) ← H(ζ)
(s1, s2) ← H(ς)
KGen(1λ)
11 :
12 :
13 :
14 : A ← ExpandA(ρ), t ← (As1 + s2)
(t0, t1) ← (LowBits(t), HighBits(t))