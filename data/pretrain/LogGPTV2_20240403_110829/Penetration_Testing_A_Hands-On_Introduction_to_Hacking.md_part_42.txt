to gather the packets to crack the WEP key. Your own setup’s information is
likely different, of course, but here’s what we’ll work with:
• Base Station MAC Address: 00:23:69:F5:B4:2B
• SSID: linksys
• Channel: 6
Injecting Packets
Although the Airodump-ng output in Listing 15-7 shows some traffic from
the access point, to crack a 64-bit WEP key, we need about 250,000 IVs, and
for a 148-bit WEP key, about 1,500,000. Rather than idly listen for packets,
we’ll capture and retransmit packets to the access point to generate unique
IVs quickly. We need to authenticate, because if our MAC address isn’t
authenticated with the access point, any packets we send will be dropped,
and we’ll receive a deauthentication request. We’ll use Aireplay-ng to fake
authentication with the access point and trick it into responding to our
injected packets.
When using fake authentication, we tell the access point we’re ready to
prove we know the WEP key, as shown in Listing 15-8. Of course, because
we don’t know the key yet, we don’t send it, but our MAC address is now on
the list of clients that can send packets to the access point, hence the fake
authentication.
Wireless Attacks 347
root@kali:~# aireplay-ng -1 0 -e linksys -a 00:23:69:F5:B4:2B -h 00:C0:CA:1B:69:AA mon0
20:02:56 Waiting for beacon frame (BSSID: 00:23:69:F5:B4:2B) on channel 6
20:02:56 Sending Authentication Request (Open System) [ACK]
20:02:56 Authentication successful
20:02:56 Sending Association Request [ACK]
20:02:56 Association successful :-) (AID: 1) u
Listing 15-8: Fake authentication with Aireplay-ng
We fake authentication using the following flags with their associated data:
• -1 tells Aireplay-ng to fake authentication.
• 0 is the retransmission time.
• -e is the SSID; in my case linksys.
• -a is the MAC address of the access point we want to authenticate with.
• -h is the MAC address of our card (which should be on a sticker on the
device).
• mon0 is the interface to use for the fake authentication.
After sending the Aireplay-ng request, you should receive a smiley face
and indication that authentication was successful u.
Generating IVs with the aRP Request Relay attack
With the base station willing to accept packets from us, we can capture
and rebroadcast legitimate packets. While the access point won’t allow us
to send traffic without first sending the WEP key to authenticate, we can
rebroadcast traffic from properly authenticated clients.
We’ll use the attack technique known as ARP Request Replay to gener-
ate IVs quickly by having Aireplay-ng listen for an ARP request and then
retransmit it back to the base station. (When the access point receives an
ARP request, it rebroadcasts it with a new IV.) Aireplay-ng will rebroadcast
the same ARP packet repeatedly, and each time it’s broadcast, it will have a
new IV.
Listing 15-9 shows the attack in action. Aireplay-ng reads packets look-
ing for an ARP request. You won’t see any data until Aireplay-ng sees an
ARP request it can rebroadcast. We will see that next.
root@kali:~# aireplay-ng -3 -b 00:23:69:F5:B4:2B -h 00:C0:CA:1B:69:AA mon0
20:14:21 Waiting for beacon frame (BSSID: 00:23:69:F5:B4:2B) on channel 6
Saving ARP requests in replay_arp-1142-201521.cap
You should also start airodump-ng to capture replies.
Read 541 packets (got 0 ARP requests and 0 ACKs), sent 0 packets...(0 pps)
Listing 15-9: Rebroadcasting ARP packets with Aireplay-ng
348 Chapter 15
We use these options:
• -3 performs the ARP request replay attack.
• -b is the base station MAC address.
• -h is our Alfa card MAC address.
• mon0 is the interface.
Generating an aRP Request
Unfortunately, as you can see in Listing 15-9, we don’t see any ARP requests.
To generate an ARP request, we’ll use the host system as a simulated client
by pinging an IP address on the network from the connected host system.
Aireplay-ng will see the ARP request and retransmit it to the access point
over and over.
As you can see in the Airodump-ng screen, shown in Listing 15-10, the
#Data u number, indicating captured IVs, increases rapidly as Aireplay-ng
continues to retransmit the ARP packet, causing the access point to gener-
ate more IVs. (If your aireplay-ng -3 says "Got adeauth/disassoc" or something
similar and your #Data number is not quickly rising, run the fake association
command from Listing 15-8 again to reassociate with the access point. Your
#Data field should again start rising rapidly.)
CH 6 ][ Elapsed: 14 mins ][ 2015-11-22 20:31
BSSID PWR RXQ Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
00:23:69:F5:B4:2B -63 92 5740 85143u 389 6 54 . WEP WEP OPN linksys
Listing 15-10: IVs being captured in Airodump-ng
Cracking the Key
Remember, we need about 250,000 IVs to crack a 64-bit WEP key. As long
as you remain associated with the base station, as shown in Listing 15-8,
(rerunning the command if it becomes necessary) and have generated an
ARP request on the network, it should only take a few minutes to collect
enough IVs. Once we’ve gathered enough IVs, we can use Aircrack-ng to do
the math to turn the collected IVs into the correct WEP key. Listing 15-11
shows how we crack the key by using the -b flag and providing the filename
we used in Airodump-ng followed by *.cap u. This tells Aircrack-ng to read
from all .cap files saved by Airodump-ng.
root@kali:~# aircrack-ng -b 00:23:69:F5:B4:2B book*.capu
Opening book-01.cap
Attack will be restarted every 5000 captured ivs.
Starting PTW attack with 239400 ivs.
KEY FOUND! [ 2C:85:8B:B6:31 ] v
Decrypted correctly: 100%
Listing 15-11: Recovering the WEP key with Aircrack-ng
Wireless Attacks 349
After a few seconds of analysis Aircrack-ng returns the correct key v.
We can now authenticate with the network. If this were a pentest client’s
network, we could now directly attack any systems on the network.
Challenges with WEP Cracking
As with many topics discussed in this book, information about wireless
attacks could fill a book, and I’ve shown you only one attack. One thing
to keep in mind when attacking WEP is that clients may use filters in an
attempt to thwart attacks like this. For example, access points could use
MAC filtering to allow only wireless cards with certain MAC addresses to
connect, and if your Alfa card isn’t on the list, your fake authentication
attempt will fail. To bypass MAC filtering, you could use a tool like MAC
Changer in Kali to spoof a MAC address and create an accepted value.
Keep in mind that WEP keys are always crackable if we can gather enough
packets, and for security reasons, WEP encryption should not be used in
production.
It’s worth noting that the Wifite tool, installed by default in Kali Linux,
behaves as a wrapper around the Aircrack-ng suite and will automate the
process of attacking wireless networks, including cracking WEP. But while
you are learning how Wi-Fi attacks work, it is better to walk through the
process step by step instead of using an automation wrapper.
We now turn our attention to the stronger wireless encryption proto-
cols, WPA and WPA2.
wi-Fi Protected access
As weaknesses in WEP came to light, a more robust wireless security system
was needed and a new system (which ultimately became WPA2) was built
to replace WEP. However, the creation of a secure cryptographic system for
wireless took time, and in the meantime, additional security was needed
that was compatible with deployed wireless hardware. Thus, Wi-Fi Protected
Access (WPA), also known as Temporal Key Integrity Protocol (TKIP), was born.
WPA uses the same underlying algorithm as WEP (RC4) but seeks to
address WEP’s weaknesses by adding keystream randomness to IVs and
integrity to ICV. Unlike WEP, which uses a 40- or 104-bit key combined with
weak IVs for each packet, WPA generates a 148-bit key for each packet to
ensure that each packet is encrypted with a unique keystream.
Additionally, WPA replaces WEP’s weak CRC-32 message integrity check
with a message authentication code (MAC) algorithm called Michael, to pre-
vent attackers from easily calculating the resulting changes to the ICV when
a bit is flipped. Though both WPA and even WPA2 have their weaknesses,
the most common vulnerability (which we’ll exploit later in this chapter)
is the use of weak passphrases.
350 Chapter 15
wPa2
WPA2 was built from the ground up to provide a secure encryption system
for wireless networks. It implements an encryption protocol built specifi-
cally for wireless security called Counter Mode with Cipher Block Chaining
Message Authentication Code Protocol (CCMP). CCMP is built on the Advanced
Encryption Standard (AES).
WPA and WPA2 support both personal and enterprise setups. WPA/
WPA2 personal uses a pre-shared key, similar to WEP. WPA/WPA2 enter-
prise adds an additional element called a Remote Authentication Dial-In User
Service (RADIUS) server to manage client authentication.
The Enterprise Connection Process
In WPA/WPA2 enterprise networks, the client connection process com-
prises four steps, as shown in Figure 15-6. First the client and the access
point agree on mutually supported security protocols. Then, based on the
authentication protocol chosen, the access point and the RADIUS server
exchange messages to generate a master key. Once a master key is gener-
ated, a message that authentication was successful is sent to the access point
and passed on to the client, and the master key is sent to the access point.
The access point and the client exchange and verify keys for mutual authen-
tication, message encryption, and message integrity via a four-way hand-
shake, as discussed in “The Four-Way Handshake” on this page. Following
key exchange, traffic between the client and the access point is secured with
WPA or WPA2.
protocol agreement
authentication
key distribution
access point
master key distribution
encryption
client RADIUS server
Figure 15-6: WPA/WPA2 enterprise connection
The Personal Connection Process
The WPA/WPA2 personal connection process is slightly simpler than the
enterprise one: No RADIUS server is required, and the entire process is
between the access point and the client. No authentication or master key step
occurs, and instead of a RADIUS server and master key, WPA/WPA2 per-
sonal use pre-shared keys, which are generated using pre-shared passphrases.
The WPA/WPA2 personal passphrase that you enter when you connect
to a secured network is static, whereas enterprise setups use dynamic keys
generated by the RADIUS server. Enterprise setups are more secure, but most
personal networks and even most small businesses lack RADIUS servers.
Wireless Attacks 351
The Four-Way Handshake
In the first phase of the connection between an access point and supplicant
(client), a pairwise master key (PMK), which is static throughout the entire
session, is created. This is not the key that will be used for encryption itself,
but it will be used during the second phase, where a four-way handshake
will take place between access point and client, with the purpose of estab-
lishing a channel of communication and exchanging the encryption keys
used for further data communication, as shown in Figure 15-7.
ANonce
SNonce + MIC
GTK + MIC
Ack
Figure 15-7: WPA/WPA2 four-way handshake
This PMK is generated from the following:
• The passphrase (pre-shared key, or PSK)
• The access point’s SSID
• The SSID length
• The number of hashing iterations (4096)
• The resulting length in bits (256) of the generated shared key (PMK)
These values are fed into a hashing algorithm called PBKDF2, which
creates a 256-bit shared key (PMK). While your passphrase (PSK) may be
GeorgiaIsAwesome, this is not the PMK that will be used in a second phase.
That said, anyone who knows the passphrase and the access point’s SSID
can use the PBKDF2 algorithm to generate the correct PMK. During the
four-way handshake, a pairwise transient key (PTK) is created and used to
encrypt traffic between the access point and the client; a group transient
key (GTK) is exchanged and used to encrypt broadcast traffic. The PTK is
made up of the following:
• The shared key (the PMK)
• A random number (nonce) from the access point (ANonce)
• A nonce from the client (SNonce)
• The MAC address of the client
• The MAC address of the access point
These values are fed into the PBKDF2 hashing algorithm to create
the PTK.
To generate the PTK, the access point and the client exchange MAC
addresses and nonces (random values). The static shared key (PMK) is never
sent over the air, because both the access point and the client know the pass-
phrase (PSK) and, thus, can generate the shared key independently.
352 Chapter 15
The shared nonces and MAC addresses are used by both the client and
the access point to generate the PTK. In the first step of the four-way hand-
shake, the access point sends its nonce (ANonce). Next, the client chooses
a nonce, generates the PTK, and sends its nonce (SNonce) to the access
point. (The S in SNonce stands for supplicant, another name for the client
in a wireless setup.)
In addition to sending its nonce, the client sends a message integrity
code (MIC) to guard against forgery attacks. In order to compute the correct
MIC, the passphrase used to generate the pre-shared key must be correct, or
the PTK will be wrong. The access point independently generates the PTK
based on the SNonce and MAC address sent by the client, then checks the
MIC sent by the client. If it’s correct, the client has authenticated successfully,
and the access point sends over the GTK plus the MIC to the client.
In the fourth part of the handshake, the client acknowledges the GTK.
Cracking WPA/WPA2 Keys
Unlike WEP, the cryptographic algorithms used in WPA and WPA2 are
robust enough to stop attackers from recovering the key simply by captur-
ing enough traffic and performing cryptanalysis. The Achilles’ heel in
WPA/WPA2 personal networks lies in the quality of the pre-shared key
(passphrase) used. If the Windows Administrator password you found during
post exploitation is the same as the WPA or WPA2 personal passphrase or
the passphrase is written on a whiteboard in the front office of the organi-
zation, it’s game over.
To try to guess a weak password, we first need to capture the four-way
handshake for analysis. Recall that given the correct passphrase and the
SSID of the access point, the PBKDF2 hashing algorithm can be used to
generate the shared key (PMK). Given the PMK, we still need the ANonce,
SNonce, and the MAC addresses of the access point and client to calculate
the PTK. Of course, the PTK will differ for each client, because the nonces
will differ in each four-way handshake, but if we can capture a four-way
handshake from any legitimate client, we can use its MAC addresses and
nonces to calculate the PTK for a given passphrase. For example, we can
use the SSID and the passphrase password to generate a PMK, then com-
bine the generated PMK with the captured nonces and MAC addresses to
calculate a PTK. If the MICs comes out like the ones in the captured hand-
shake, we know that password is the correct passphrase. This technique can
be applied to a wordlist of possible passphrases to try to guess the correct
passphrase. Luckily, if we can capture a four-way handshake and supply a
wordlist, we have Aircrack-ng to take care of all the math.
Using aircrack-ng to Crack WPa/WPa2 Keys
To use Aircrack-ng to crack WPA/WPA2, first set up your wireless access
point for WPA2 personal. Choose a pre-shared key (passphrase) and then
connect your host system to your access point to simulate a real client.
Wireless Attacks 353
To use a wordlist to try to guess the WPA2 pre-shared key (passphrase),
we need to capture the four-way handshake. Enter airodump-ng -c 6 for the
channel, --bssid with the base station MAC address, -w to specify the filename
for output (use a different filename than you used in the WEP cracking
example), and mon0 for the monitor interface, as shown in Listing 15-12.
root@kali:~# airodump-ng -c 6 --bssid 00:23:69:F5:B4:2B -w pentestbook2 mon0
CH 6 ][ Elapsed: 4 s ][ 2015-05-19 16:31
BSSID PWR RXQ Beacons #Data, #/s CH MB ENC CIPHER AUTH E
00:23:69:F5:B4:2B -43 100 66 157 17 6 54 . WPA2 CCMP PSK l
BSSID STATION PWR Rate Lost Frames Probe
00:23:69:F5:B4:2B 70:56:81:B2:F0:53 -33 54-54 15 168 u
Listing 15-12: Airodump-ng for WPA2 cracking
As you can see the host is connected u. To capture a four-way hand-
shake, we can either wait for another wireless client to sign on or speed up
the process by kicking a client off the network and forcing it to reconnect.
To force a client to reconnect, use Aireplay-ng to send a message to a
connected client telling it that it is no longer connected to the access point.
When the client reauthenticates, we’ll capture the four-way handshake