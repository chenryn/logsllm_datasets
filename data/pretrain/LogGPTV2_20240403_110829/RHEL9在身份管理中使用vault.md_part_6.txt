2.  可选：如果不存在，创建一个清单文件（如
    [**inventory.file**]{.strong}）。
    ``` literallayout
    $ touch inventory.file
    ```
3.  打开清单文件并定义以下主机：
    ::: itemizedlist
    -   在 `[ipaserver]`{.literal} 部分中定义您的 IdM 服务器。
    -   在 `[webservers]`{.literal}
        部分中定义要检索机密的主机。例如，要指示 Ansible 获取到
        [**webserver1.idm.example.com**]{.strong}、[**webserver2.idm.example.com**]{.strong}
        和 [**webserver3.idm.example.com**]{.strong} 的 secret，请输入：
    :::
    ``` literallayout
    [ipaserver]
    server.idm.example.com
    [webservers]
    webserver1.idm.example.com
    webserver2.idm.example.com
    webserver3.idm.example.com
    ```
4.  生成 [**retrieve-data-asymmetric-vault.yml**]{.strong} Ansible
    playbook 文件的副本。例如：
    ``` literallayout
    $ cp retrieve-data-asymmetric-vault.yml retrieve-data-asymmetric-vault-copy.yml
    ```
5.  打开 [**retrieve-data-asymmetric-vault-copy.yml**]{.strong}
    文件进行编辑。
6.  通过在 `ipavault`{.literal} 任务部分设置以下变量来修改该文件：
    ::: itemizedlist
    -   将 `ipaadmin_password`{.literal} 变量设置为 IdM 管理员密码。
    -   将 `name`{.literal} 变量设置为 vault 的名称，如
        [**secret_vault**]{.strong}。
    -   将 `service`{.literal} 变量设置为密码库的服务所有者，如
        [**HTTP/webserver1.idm.example.com**]{.strong}。
    -   将 `private_key_file`{.literal} 变量设置为用于检索服务 vault
        secret 的私钥的位置。
    -   将 `out`{.literal} 变量设置为 IdM 服务器上您要检索
        [**private-key-to-an-externally-certificate.pem**]{.strong}
        机密的位置，如当前工作目录。
    -   将 `action`{.literal} 变量设置为 `member`{.literal}。
        对于当前示例为修改过的 Ansible playbook 文件：
    :::
    ``` literallayout
    ---
    - name: Retrieve data from vault
      hosts: ipaserver
      become: no
      gather_facts: false
      tasks:
      - name: Retrieve data from the service vault
        ipavault:
          ipaadmin_password: Secret123
          name: secret_vault
          service: HTTP/webserver1.idm.example.com
          vault_type: asymmetric
          private_key: "{{ lookup('file', 'service-private.pem') | b64encode }}"
          out: private-key-to-an-externally-signed-certificate.pem
          state: retrieved
    ```
7.  在 playbook 中添加一个部分，它将从 IdM 服务器检索数据文件到 Ansible
    控制器：
    ``` literallayout
    ---
    - name: Retrieve data from vault
      hosts: ipaserver
      become: no
      gather_facts: false
      tasks:
    [...]
      - name: Retrieve data file
        fetch:
          src: private-key-to-an-externally-signed-certificate.pem
          dest: ./
          flat: yes
          mode: 0600
    ```
8.  在 playbook 中添加一个部分，将检索到的
    [**private-key-to-an-externally-signed-certificate.pem**]{.strong}
    文件从 Ansible 控制器所在的地方传输到清单文件的
    `webservers`{.literal} 部分所列出的 webserver 中：
    ``` literallayout
    ---
    - name: Send data file to webservers
      become: no
      gather_facts: no
      hosts: webservers
      tasks:
      - name: Send data to webservers
        copy:
          src: private-key-to-an-externally-signed-certificate.pem
          dest: /etc/pki/tls/private/httpd.key
          mode: 0444
    ```
9.  保存这个文件。
10. 运行 playbook：
    ``` literallayout
    $ ansible-playbook -v -i inventory.file retrieve-data-asymmetric-vault-copy.yml
    ```
:::
:::
::: section
::: titlepage
# []{#using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets_working-with-vaults-in-identity-management.html#changing-an-idm-service-vault-secret-when-compromised-using-ansible_using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets}在使用 Ansible 泄露时更改 IdM 服务 vault secret {.title}
:::
本节演示了 Identity Management(IdM)管理员可以重复使用 Ansible
playbook，在服务实例被破坏时更改存储在服务密码库中的
secret。以下示例中，假设获取的机密在
[**webserver3.idm.example.com**]{.strong} 上已被破坏，而存储机密的非对称
vault
存储的密钥没有被破坏。在示例中，管理员重复利用[在非对称库中存储一个
secret](#using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets_working-with-vaults-in-identity-management.html#storing-an-idm-service-secret-in-an-asymmetric-vault-using-ansible_using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets "使用 Ansible 将 IdM 服务 secret 存储在非对称库中"){.link}
时，以及[从非对称库中获取一个 secret 导入到 IdM
主机](#using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets_working-with-vaults-in-identity-management.html#retrieving-a-service-secret-for-an-idm-service-using-ansible_using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets "使用 Ansible 为 IdM 服务检索服务 secret"){.link}
时使用的 Ansible playbook。在流程开始时，IdM 管理员将新的
`PEM`{.literal}
文件存储在非对称的密码库中，对清单文件进行调整，以便不会从已被侵入的 Web
服务器（[**webserver3.idm.example.com**]{.strong}）检索新机密，，然后重新运行这两个过程。
::: itemizedlist
**先决条件**
-   您已在 Ansible 控制器上安装了
    [ansible-freeipa](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/installing_identity_management/index#installing-the-ansible-freeipa-package_server-ansible){.link}
    软件包。这是执行流程中步骤的主机。
-   您知道 [**IdM 管理员**]{.strong}密码。
-   您已[创建了非对称密码库](#using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets_working-with-vaults-in-identity-management.html#ensuring-the-presence-of-an-asymmetric-service-vault-in-idm-using-ansible_using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets "使用 Ansible 在 IdM 中存在非对称服务库"){.link}用于存储服务机密。
-   您已为 IdM 主机上运行的 web 服务生成了新的 `httpd`{.literal}
    密钥，以替换损坏的旧密钥。
-   新 `httpd`{.literal} 密钥存储在本地 Ansible 控制器上，例如
    [**/usr/share/doc/ansible-freeipa/playbooks/vault/private-key-to-an-externally-certificate.pem**]{.strong}
    文件中。
:::
::: orderedlist
**步骤**
1.  导航到 `/usr/share/doc/ansible-freeipa/playbooks/vault`{.literal}
    目录：
    ``` literallayout
    $ cd /usr/share/doc/ansible-freeipa/playbooks/vault
    ```
2.  打开清单文件并确保正确定义了以下主机：
    ::: itemizedlist
    -   `[ipaserver]`{.literal} 部分中的 IdM 服务器。
    -   要在 `[webservers]`{.literal} 部分中检索机密的主机。例如，要指示
        Ansible 获取到 [**webserver1.idm.example.com**]{.strong} 和
        [**webserver2.idm.example.com**]{.strong} 的 secret，请输入：
        ``` literallayout
        [ipaserver]
        server.idm.example.com
        [webservers]
        webserver1.idm.example.com
        webserver2.idm.example.com
        ```
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    确保列表没有包含被破坏的 webserver，在当前的示例
    [**webserver3.idm.example.com**]{.strong} 中。
    :::
3.  打开 [**data-archive-in-asymmetric-vault-copy.yml**]{.strong}
    文件进行编辑。
4.  通过在 `ipavault`{.literal} 任务部分设置以下变量来修改该文件：
    ::: itemizedlist
    -   将 `ipaadmin_password`{.literal} 变量设置为 IdM 管理员密码。
    -   将 `name`{.literal} 变量设置为 vault 的名称，如
        [**secret_vault**]{.strong}。
    -   将 `service`{.literal} 变量设置为 vault 的服务所有者，如
        [**HTTP/webserver.idm.example.com**]{.strong}。
    -   将 `in`{.literal} 变量设置为 [**\"{{ lookup(\'file\',
        \'new-private-key-to-an-externally-signed-certificate.pem\')\|
        b64encode }}\"**]{.strong}。这可确保 Ansible 使用私钥从 Ansible
        控制器上的工作目录检索文件，而不是从 IdM 服务器检索。
    -   将 `action`{.literal} 变量设置为 `member`{.literal}。
        对于当前示例为修改过的 Ansible playbook 文件：
    :::
    ``` literallayout
    ---
    - name: Tests
      hosts: ipaserver
      become: true
      gather_facts: false
      tasks:
      - ipavault:
          ipaadmin_password: Secret123
          name: secret_vault
          service: HTTP/webserver.idm.example.com
          in: "{{ lookup('file', 'new-private-key-to-an-externally-signed-certificate.pem') | b64encode }}"
          action: member
    ```
5.  保存这个文件。
6.  运行 playbook：
    ``` literallayout
    $ ansible-playbook -v -i inventory.file data-archive-in-asymmetric-vault-copy.yml
    ```
7.  打开 [**retrieve-data-asymmetric-vault-copy.yml**]{.strong}
    文件进行编辑。
8.  通过在 `ipavault`{.literal} 任务部分设置以下变量来修改该文件：
    ::: itemizedlist
    -   将 `ipaadmin_password`{.literal} 变量设置为 IdM 管理员密码。
    -   将 `name`{.literal} 变量设置为 vault 的名称，如
        [**secret_vault**]{.strong}。
    -   将 `service`{.literal} 变量设置为密码库的服务所有者，如
        [**HTTP/webserver1.idm.example.com**]{.strong}。
    -   将 `private_key_file`{.literal} 变量设置为用于检索服务 vault
        secret 的私钥的位置。
    -   将 `out`{.literal} 变量设置为 IdM 服务器上您要检索
        [**new-private-key-to-an-externally-signed-certificate.pem**]{.strong}
        机密的位置，如当前工作目录。
    -   将 `action`{.literal} 变量设置为 `member`{.literal}。
        对于当前示例为修改过的 Ansible playbook 文件：
    :::
    ``` literallayout
    ---
    - name: Retrieve data from vault
      hosts: ipaserver
      become: no
      gather_facts: false
      tasks:
      - name: Retrieve data from the service vault
        ipavault:
          ipaadmin_password: Secret123
          name: secret_vault
          service: HTTP/webserver1.idm.example.com
          vault_type: asymmetric
          private_key: "{{ lookup('file', 'service-private.pem') | b64encode }}"
          out: new-private-key-to-an-externally-signed-certificate.pem
          state: retrieved
    ```
9.  在 playbook 中添加一个部分，它将从 IdM 服务器检索数据文件到 Ansible
    控制器：
    ``` literallayout
    ---
    - name: Retrieve data from vault
      hosts: ipaserver
      become: yes
      gather_facts: false
      tasks:
    [...]
      - name: Retrieve data file
        fetch:
          src: new-private-key-to-an-externally-signed-certificate.pem
          dest: ./
          flat: yes
          mode: 0600
    ```
10. 在 playbook 中添加一个部分，将检索到的
    [**new-private-key-to-an-externally-signed-certificate.pem**]{.strong}
    文件从 Ansible 控制器所在的地方传输到清单文件的
    `webservers`{.literal} 部分所列出的 webserver 中：
    ``` literallayout
    ---
    - name: Send data file to webservers
      become: yes
      gather_facts: no
      hosts: webservers
      tasks:
      - name: Send data to webservers
        copy:
          src: new-private-key-to-an-externally-signed-certificate.pem
          dest: /etc/pki/tls/private/httpd.key
          mode: 0444
    ```
11. 保存这个文件。
12. 运行 playbook:
    ``` literallayout
    $ ansible-playbook -v -i inventory.file retrieve-data-asymmetric-vault-copy.yml
    ```
:::
:::
::: section
::: titlepage
# []{#using-ansible-to-manage-idm-service-vaults-storing-and-retrieving-secrets_working-with-vaults-in-identity-management.html#_additional_resources_3}其他资源 {.title}
:::
::: itemizedlist
-   请参阅 `/usr/share/doc/ansible-freeipa/`{.literal} 目录中的
    README-vault.md Markdown 文件。
-   请参阅 `/usr/share/doc/ansible-freeipa/playbooks/vault/`{.literal}
    目录中的示例 playbook。
:::
:::
:::