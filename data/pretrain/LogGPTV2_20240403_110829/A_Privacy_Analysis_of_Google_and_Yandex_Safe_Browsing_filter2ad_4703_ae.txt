goog-malware-shavar
googpub-phish-shavar
ydx-malware-shavar
ydx-adult-shavar
ydx-mobile-only-malware-shavar
ydx-phish-shavar
ydx-mitb-masks-shavar
ydx-porno-hosts-top-shavar
ydx-sms-fraud-shavar
ydx-yellow-shavar
Malware list
18785 (5.9)
632 (0.2)
44232 (15.6)
29 (6.6)
19 (0.9)
58 (0.1)
20 (22.9)
1682 (1.6)
66 (0.6)
43 (20)
Phishing list
351 (0.1)
11155 (3.5)
417 (0.1)
1 (0.2)
0 (0)
1568 (4.9)
0 (0)
220 (0.2)
1 (0.01)
1 (0.4)
BigBlackList
6208 (1.9)
816 (0.26)
11288 (3.9)
33 (7.6)
17 (0.8)
153 (0.47)
1 (1.1)
11401 (11.40)
22 (0.20)
8 (3.8)
DNS Census-13
63271 (20)
7858 (2.5)
88299 (31)
201 (46.3)
790 (37.5)
1761 (5.6)
9 (10.3)
55775 (55.7)
1028 (9.7)
76 (36.4)
TABLE X: Distribution of preﬁxes as the number of full hashes per preﬁx. Collision with the Alexa list is also given.
GOOGLE
YANDEX
list name
goog-malware-shavar
googpub-phish-shavar
ydx-malware-shavar
ydx-adult-shavar
ydx-mobile-only-malware-shavar
ydx-phish-shavar
ydx-mitb-masks-shavar
ydx-porno-hosts-top-shavar
ydx-sms-fraud-shavar
ydx-yellow-shavar
#full hash per preﬁx
0
36
123
4184
184
130
31325
87
240
10162
209
1
317759
312494
279015
250
1977
268
0
99750
447
0
2
12
4
12
0
0
0
0
0
0
0
Total
317807
312621
283211
434
2107
31593
87
99990
10609
209
#Coll. with Alexa list
0
2
0
0
0
0
0
73
0
38
0
2
22
0
0
2
0
43
0
76
15
0
1
572
88
2614
43
22
0
0
17541
3
0
Total
572
88
2687
81
24
22
2
17584
79
15
TABLE XI: A subset of URLs from the Alexa list with multiple matching preﬁxes in the GOOGLE and YANDEX database.
URL
GOOGLE
http://wps3b.17buddies.net/wp/cs_sub_7-2.pwf
http://www.1001cartes.org/tag/emergency-issues
matching decomposition
17buddies.net/wp/cs_sub_7-2.pwf
17buddies.net/wp/
1001cartes.org/tag/emergency-issues
1001cartes.org/tag/
http://fr.xhamster.com/user/video
http://nl.xhamster.com/user/video
YANDEX
http://m.wickedpictures.com/user/login
http://m.mofos.com/user/login
fr.xhamster.com/
xhamster.com/
nl.xhamster.com/
xhamster.com/
m.wickedpictures.com/
wickedpictures.com/
m.mofos.com/
mofos.com/
http://mobile.teenslovehugecocks.com/user/join
mobile.teenslovehugecocks.com/
teenslovehugecocks.com/
preﬁx
0x18366658
0x77c1098b
0xab5140c7
0xc73e0d7b
0xe4fdd86c
0x3074e021
0xa95055ff
0x3074e021
0x7ee8c0cc
0xa7962038
0x6e961650
0x00354501
0x585667a5
0x92824b5c
IX. RELATED WORK AND MITIGATIONS
To the best of our knowledge no prior work has studied
SB services from a privacy perspective. Due to the purpose
and similarity of the service, our work is strongly related
to web-search privacy. Indeed, URLs visited by a user and
searched keywords reveal extensive information (see [33]).
Several solutions to improve web-search privacy can be applied
to our case and most notably dummy requests (see [34] for a
survey). This solution is currently deployed in Firefox. Each
time Firefox makes a query to GSB, some dummy queries
are also performed to hide the real one. The dummy requests
are deterministically determined with respect to the real re-
quest to avoid differential analysis [35]. This countermeasure
can improve the level of k-anonymity for a single preﬁx
match. However, re-identiﬁcation is still possible in the case
of multiple preﬁx match because the probability that
two
given preﬁxes are included in the same request as dummies
is negligible. Another possible countermeasure consists in
redirecting full hash requests through an anonymizing proxy.
The essential limitation here is that the client must trust the
proxy. Apparently, some proxy services keep server logs of
user activity that can be subpoenaed.
Fixing GSB and YSB to prevent any information leak-
age would ideally require private information retrieval [36].
However, none of the existing constructions can scale to
the level of SB [37], [38]. Hence, to reduce the amount of
information leakage, we propose to query the server one-preﬁx-
at-a-time. When a URL has several decompositions matching
in the preﬁxes’ database, the preﬁx corresponding to the root
node/decomposition is ﬁrst queried. Meanwhile, the targeted
URL is pre-fetched by the browser and crawled to ﬁnd if
it contains Type I URLs. If the answer from GOOGLE or
YANDEX is positive, a warning message is displayed to the
user. Otherwise, if Type I URLs exist, then the browser can
query the server for the other preﬁxes. In this case, GOOGLE
and YANDEX can only recover the domain but not the full
URL. In case no Type I URLs exists, a message can be
displayed to warn the user that the service may learn the URL
he intends to visit.
In order to evaluate this countermeasure, we have de-
357
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
veloped a proof-of-concept implementation in Python using
SCRAPY [39], a popular web crawler. Among other param-
eters, SCRAPY allows to conﬁgure the timeout
to process
DNS queries, using the parameter DNS_TIMEOUT and the
waiting time to download, using DOWNLOAD_TIMEOUT. We
set these parameters to 30s and measure the cost incurred
for 100 random URLs. The tests were performed on a 64-
bit processor laptop computer powered by an Intel Core
i7-4600U CPU at 2.10GHz with 4MB cache, 8GB RAM
and running Linux 3.13.0-36-generic. In a sequential
setting, fetching and processing of a web page took on an
average of 0.17s (for pages which do not cause timeout). We
however note that this extra processing incurs no overhead
when done in parallel while the client makes a full hash request
to the SB server.
We note that the crawler is conﬁgured to follow a restricted
crawling strategy: it can only recover links on the target web
page. As a consequence, the crawler may fail to ﬁnd a Type
I URL even when it actually exists. In our experiments, this
strategy found Type I URLs in 90% of the cases. A thorough
albeit costlier approach would consist in crawling the SLD of
the target URL. This ensures that the crawler never errs. The
same experiment with a complete SLD crawl required roughly
3 times more time. The underlying crawling strategy hence
presents a trade-off between privacy and robustness achieved
by the countermeasure.
X. CONCLUSION
Safe Browsing services are valuable tools to ﬁght malware,
phishing and other online frauds. Unlike other Safe Browsing
vendors, GOOGLE and YANDEX have made sincere efforts to
render their services as private as possible. However, the effect
of their anonymization efforts has been largely unclear. We
have quantiﬁed the privacy provided by these services and have
shown that the underlying anonymization technique of hashing
and truncation fails when the server receives multiple preﬁxes
for certain classes of URLs.
Our observations on the YANDEX database and to a lesser
extent on that of GOOGLE show that it is possible to tamper
these databases. These instances could either be deliberate
attempts or the results of development errors/misconﬁgurations
or latency. Irrespective of the underlying cause, the service
readily transforms into an invisible tracker that is embedded in
several software solutions. As future work, we want to design
a plugin for Firefox and Chrome to make users aware of the
associated privacy issues.
Acknowledgment. This research was partially supported
by the Labex PERSYVAL-LAB (ANR-11-LABX-0025-01)
funded by the French program Investissement d’avenir.
REFERENCES
[1] G.
Inc., “Safe Browsing API,” https://developers.google.com/safe-
browsing/.
[2] ——, “Google Transparency Report,” Google, Tech. Rep., June 2014,
https://bit.ly/1A72tdQ.
[3] Google, “Google Chrome Privacy Notice,” https://www.google.com/intl/
en/chrome/browser/privacy/, November 2014.
[4] G. Inc., “Google Safe Browsing Service in Mozilla Firefox Version 3,”
http://bit.ly/1igzX4v, April 2012.
358
[5] L. Sweeney, “k-Anonymity: A Model for Protecting Privacy,” Interna-
tional Journal of Uncertainty, Fuzziness and Knowledge-Based Systems,
vol. 10, no. 5, pp. 557–570, 2002.
“Common Crawl,” Online, 2015, http://commoncrawl.org/.
[6]
[7] M. Corporation, “Microsoft Security Intelligence Report,” Microsoft,
Tech. Rep., December 2013, https://bit.ly/1qAfTgt.
[8] L. WOT Services, “Web of Trust,” https://www.mywot.com.
[9] Symantec, “Norton Safe Web,” https://safeweb.norton.com/.
[10] McAfee, “McAfee Site Advisor,” http://www.siteadvisor.com/.
[11] F. Inc., “Link Shim,” http://on.fb.me/1he2yEB.
[12] N. Provos, “Safe Browsing - Protecting Web Users for 5 Years and
Counting,” http://bit.ly/208ra6P.
[13] T. Berners-Lee, R. Fielding, and L. Masinter, “Uniform Resource Iden-
tiﬁer (URI): Generic Syntax,” RFC 3986 (INTERNET STANDARD),
Internet Engineering Task Force, Jan. 2005.
[14] T. Berners-Lee, L. Masinter, and M. McCahill, “Uniform Resource
Locators (URL),” Internet Requests for Comments, RFC Editor, RFC
1738, December 1994, https://www.ietf.org/rfc/rfc1738.txt.
[15] National institute of standards and technology, “Secure Hash Standard
(SHS),” National Institute of Standards & Technology, Tech. Rep. FIPS
PUB 180-4, march 2012.
[16] B. H. Bloom, “Space/Time Trade-offs in Hash Coding with Allowable
[17]
Errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, 1970.
J. Mogul, B. Krishnamurthy, F. Douglis, A. Feldmann, Y. Goland,
A. van Hoff, and D. Hellerstein, “Delta encoding in HTTP,” Internet
Requests for Comments, RFC Editor, RFC 3229, January 2002.
[18] P. D. Kennedy, “Google’s Safe Browsing Service is Killing Your
Privacy,” Online, http://bit.ly/1P2EEMk.
“Chromium bug,” Online, http://bit.ly/1Ha458a.
“Mozilla bug,” https://bugzilla.mozilla.org/show bug.cgi?id=368255.
[19]
[20]
[21] Yandex, “Yandex Safe Browsing,” http://api.yandex.com/safebrowsing/.
[22] G. Ercal-Ozkaya, “Routing in Random Ad-Hoc Networkds: Provably
Better than Worst-case,” Ph.D. dissertation, 2008.
[23] M. Raab and A. Steger, ““Balls into Bins” - A Simple and Tight
Analysis,” in Proceedings of the Second International Workshop on
Randomization and Approximation Techniques in Computer Science,
ser. RANDOM ’98. London,UK: Springer-Verlag, 1998, pp. 159–170.
[24] G. Inc., “We knew the web was big...” http://bit.ly/1P4jKwe.
[25] V. Inc., http://verisigninc.com/en US/innovation/dnib/index.xhtml.
[26] L. WOT Services, “Privacy Policy,” https://www.mywot.com/en/privacy.
[27]
[28] B. A. Huberman and L. A. Adamic, “Internet: Growth dynamics of the
“Alexa 1M Global Sites,” Online, 2015, http://bit.ly/1yhXcgL.
World-Wide Web,” Nature, vol. 401, no. 6749, pp. 131–131, 1999.
“BigBlackList,” Online, http://urlblacklist.com/.
“DNS Census,” Online, 2013, https://dnscensus2013.neocities.org/.
“BPJM Modul,” Online, http://bpjmleak.neocities.org/.
[29] Z. S. Corp, https://zeltser.com/malicious-ip-blocklists/.
[30]
[31]
[32]
[33] R. Jones, R. Kumar, B. Pang, and A. Tomkins, ““I know what you
did last summer”: query logs and user privacy,” in ACM Conference
on Information and Knowledge Management, CIKM 2007, Lisbon,
Portugal, November 6-10, 2007. ACM, 2007, pp. 909–914.
[34] A. Gervais, R. Shokri, A. Singla, S. Capkun, and V. Lenders, “Quanti-
fying Web-Search Privacy,” in ACM SIGSAC Conference on Computer
and Communications Security, Scottsdale, AZ, USA, November 3-7,
2014. ACM, 2014, pp. 966–977.
[35] D. Veditz, Personal Communication, 2015.
[36]
I. Goldberg, “Improving the Robustness of Private Information Re-
trieval,” in IEEE Symposium on Security and Privacy, S&P ’07, 2007.
[37] R. Sion and B. Carbunar, “On the Practicality of Private Information
Retrieval,” in Proceedings of
the Network and Distributed System
Security Symposium – NDSS 2007. San Diego, CA, USA: The Internet
Society, February 2007.
[38] F. Olumoﬁn and I. Goldberg, “Revisiting the Computational Practicality
of Private Information Retrieval,” in Financial Cryptography and Data
Security. Springer Berlin Heidelberg, 2012.
“Scrapy,” http://scrapy.org/.
[39]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply.