# A Portable User-Level Approach for System-Wide Integrity Protection

## Authors
Wai-Kit Sze and R. Sekar  
Stony Brook University, Stony Brook, NY, USA

## Abstract
In this paper, we present a novel approach for protecting system integrity against untrusted code that may contain sophisticated malware. Our method employs a dual-sandboxing architecture to confine both untrusted and benign processes, while imposing minimal restrictions to ensure most applications function normally. The implementation is entirely at the user level, eliminating the need for kernel modifications, which allows for easy portability across different operating systems, such as from Linux to BSD. Our experimental results demonstrate that our approach maintains application usability while providing strong protection and good performance. Additionally, policy development is almost entirely automated, reducing the burden on users and administrators.

## 1. Introduction
Current malware defense strategies primarily rely on reactive measures like virus scanning and software patches. However, these methods are insufficient against today's sophisticated malware, which uses complex evasion and subversion techniques to bypass deployed defenses. Therefore, it is crucial to develop principled defenses that offer reliable protection regardless of malware sophistication.

### 1.1 Sandboxing and Isolation
A proactive defense strategy is to sandbox potentially malicious code. This can be applied to software from untrusted sources, which may be inherently malicious, or to software from trusted sources that becomes malicious due to an exploit. However, sandboxing faces several challenges:

- **Policy Development**: Developing policies requires significant expertise and effort. Even modestly restrictive policies can break many legitimate applications.
- **Subversion Attacks**: Malware can co-opt benign applications to perform prohibited operations, either by tricking users into running applications insecurely or by exploiting vulnerabilities in benign applications.
- **Secure Policy Enforcement**: Non-bypassable policies typically require kernel-level enforcement, which is more challenging to develop and less portable across different operating systems.

An alternative to sandboxing is isolated execution of untrusted code. One-way isolation allows untrusted software to read anything, but its outputs are held in isolation. Two-way isolation limits both reads and writes, holding the inputs and outputs of untrusted applications in an isolated environment. Examples include the app models on Android, Apple iOS, and Windows 8.

Isolation provides stronger protection by blocking all interactions between untrusted and benign software, preventing subversion attacks. It also offers better usability by allowing sufficient access for most applications to work. However, isolation has significant drawbacks, especially in desktop environments:

- **Fragmentation of User Data**: Unlike sandboxing, isolation partitions user data into multiple containers, each with a disjoint namespace.
- **Inability to Compose Applications**: Strict isolation prevents applications from interacting with each other, precluding common forms of composition like UNIX pipelines.
- **No Protection When Isolation is Breached**: If isolation is breached through policy relaxation or manual file copying, malware can damage the system.

### 1.2 Our Approach
Our approach combines the strengths of sandboxing and isolation while mitigating their weaknesses. It provides a unified view of user data within a single namespace, preserves application usability, and does not require significant policy development. It also allows typical interactions between applications without compromising system security. An open-source implementation of our system is available [26].

#### 1.2.1 Key Terminology
- **Malicious**: Intentionally violates policy and evades enforcement.
- **Untrusted**: Possibly malicious.
- **Benign Program**: Non-malicious but may contain vulnerabilities.
- **Benign Process**: Process whose code and inputs are benign, hence non-malicious.

### 1.3 Approach Overview and Salient Features
Sophisticated malware often uses multi-step attacks, where each step appears innocuous. For example, malware might deposit a shortcut on the desktop or files containing exploits for popular applications. To counter such attacks, we use integrity labels to track the influence of untrusted sources on all files. Files from trusted sources (e.g., OS vendor) are labeled "benign," while others are labeled "untrusted." Benign programs can turn malicious if exploited, but only untrusted programs can be inherently malicious.

The core of our approach is information-flow-based integrity preservation, similar to the Biba integrity model. Our main contributions are:

- **Secure Information-Flow Tracking and Policy Enforcement Without Kernel Changes**: This simplifies implementation, reduces the Trusted Computing Base (TCB), and enhances portability.
- **Preserving User Experience**: We refine the basic information flow policy to preserve functionality without degrading integrity.
- **Automating Policy Development**: We present techniques to automate policy development, reducing the need for manual effort.

#### 1.3.1 Secure Enforcement and Tracking Without OS Changes
We encode integrity labels into file ownership and permissions. Untrusted files are owned by newly created untrusted user IDs, and untrusted processes run with these user IDs. This leverages existing OS mechanisms for tracking and propagating integrity labels. Benign files have write permissions that make them unwritable by untrusted user IDs, ensuring correct label propagation.

#### 1.3.2 Preserving User Experience
Stronger security policies often deny some operations, impacting functionality. We overcome this with a dual-sandbox architecture. The first sandbox (U) enforces eager policy enforcement, blocking only irreparably damaging operations. The second sandbox (B) observes subsequent effects to determine if an action should be stopped, preserving functionality.

#### 1.3.3 Automating Policy Development
We developed a procedure to classify files into categories (code, configuration, preference, data) and provide a detailed policy that works without manual analysis of applications or files.

### 1.4 Paper Organization
- **Section 2**: Details our approach for information-flow tracking and describes the untrusted sandbox U.
- **Section 3**: Describes the benign sandbox B.
- **Section 4**: Discusses policy inference.
- **Section 5**: Presents our implementation and evaluation.
- **Section 6**: Reviews related work.
- **Section 7**: Concludes the paper.

## 2. Containing Untrusted Processes
Our untrusted sandbox, illustrated in Figure 2, consists of a simple inner sandbox UI based on OS-provided access control mechanisms and an outer sandbox realized using a library UL and a user-level helper process UH.

### 2.1 Inner Sandbox UI
The inner sandbox UI enforces an isolation policy that limits untrusted processes to writing only untrusted files. This strict policy can cause many untrusted applications to fail. The transparency library UL masks these failures, remapping or relaying requests to allow applications to operate as if they were executing directly on the underlying OS.

### 2.2 Outer Sandbox
The outer sandbox includes a transparency library UL and a user-level helper process UH. UL remaps failed requests to be permitted by UI or forwards them to UH, which runs with the privileges of a normal user. UH uses a more permissive policy but still ensures information-flow-based integrity.

#### 2.2.1 Remapping and Relaying
- **Example 1**: When a benign application runs with untrusted inputs, UL redirects accesses to untrusted private copies of preference files.
- **Example 2**: When untrusted applications attempt to create files in a user's home directory, UL forwards the request to UH, which can perform the access.

Whether a file access is remapped or relayed is determined by security policies, discussed in Section 4.

### 2.3 Implementation
We repurpose existing access control mechanisms to realize the inner sandbox. Our design minimizes changes to file permissions, requiring changes to fewer than 60 files on Ubuntu Linux. It preserves the ability of users to share access to files.

For each non-root user ID R in the original system, we add a corresponding untrusted user ID Ru. Similarly, for each existing group G, we create an untrusted group Gu that includes all user IDs in G and their corresponding untrusted user IDs.