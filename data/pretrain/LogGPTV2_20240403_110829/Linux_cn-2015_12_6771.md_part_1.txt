---
author: Floyd Smith
category: 系统运维
comments_data:
- date: '2015-12-22 16:07:14'
  message: 国人开发的有一个插件叫super static cache，是完全把页面缓存成静态网页的，性能也不错，推荐一下
  postip: 45.32.21.48
  username: 来自美国的 Chrome 46.0|Windows 7 用户
count:
  commentnum: 1
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 10546
date: '2015-12-21 18:57:00'
editorchoice: false
excerpt: 在建站和 web 应用程序交付方面，WordPress 是全球最大的一个平台。全球大约四分之一 的站点现在正在使用开源 WordPress 软件，包括
  eBay、 Mozilla、 RackSpace、 TechCrunch、 CNN、 MTV、纽约时报、华尔街日报 等等。 最流行的个人博客平台 WordPress.com，其也运行在
  WordPress 开源软件上。而 NGINX 则为 WordPress.com 提供了动力。在 WordPress.com 的用户当中，许多站点起步于 WordPress.com，然后换成了自己运行
  WordPress 开源软件；它们中越来越多的站点也使用了 NGINX 软件。 WordPress 的吸引力源于其简单性，无论是对于最终
fromurl: https://www.nginx.com/blog/9-tips-for-improving-wordpress-performance-with-nginx/
id: 6771
islctt: true
largepic: /data/attachment/album/201512/21/185659seueice60zn5n5c6.jpg
permalink: /article-6771-1.html
pic: /data/attachment/album/201512/21/185659seueice60zn5n5c6.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在建站和 web 应用程序交付方面，WordPress 是全球最大的一个平台。全球大约四分之一 的站点现在正在使用开源 WordPress 软件，包括
  eBay、 Mozilla、 RackSpace、 TechCrunch、 CNN、 MTV、纽约时报、华尔街日报 等等。 最流行的个人博客平台 WordPress.com，其也运行在
  WordPress 开源软件上。而 NGINX 则为 WordPress.com 提供了动力。在 WordPress.com 的用户当中，许多站点起步于 WordPress.com，然后换成了自己运行
  WordPress 开源软件；它们中越来越多的站点也使用了 NGINX 软件。 WordPress 的吸引力源于其简单性，无论是对于最终
tags:
- nginx
- lemp
- wordpress
thumb: false
title: 深入浅出讲述提升 WordPress 性能的九大秘笈
titlepic: false
translator: strugglingyouth
updated: '2015-12-21 18:57:00'
---
在建站和 web 应用程序交付方面，WordPress 是全球最大的一个平台。全球大约[四分之一](http://w3techs.com/technologies/overview/content_management/all) 的站点现在正在使用开源 WordPress 软件，包括 eBay、 Mozilla、 RackSpace、 TechCrunch、 CNN、 MTV、纽约时报、华尔街日报 等等。
最流行的个人博客平台 WordPress.com，其也运行在 WordPress 开源软件上。[而 NGINX 则为 WordPress.com 提供了动力](https://www.nginx.com/press/choosing-nginx-growth-wordpresscom/)。在 WordPress.com 的用户当中，许多站点起步于 WordPress.com，然后换成了自己运行 WordPress 开源软件；它们中越来越多的站点也使用了 NGINX 软件。
WordPress 的吸引力源于其简单性，无论是对于最终用户还是安装架设。然而，当使用量不断增长时，WordPress 站点的体系结构也存在一定的问题 - 这里有几个方法，包括使用缓存，以及将 WordPress 和 NGINX 组合起来，可以解决这些问题。
在这篇博客中，我们提供了九个提速技巧来帮助你解决 WordPress 中一些常见的性能问题：
* 缓存静态资源
* 缓存动态文件
* 迁移到 NGINX
* 添加 NGINX 静态链接支持
* 为 NGINX 配置 FastCGI
* 为 NGINX 配置 W3*Total*Cache
* 为 NGINX 配置 WP-Super-Cache
* 为 NGINX 配置安全防范措施
* 配置 NGINX 支持 WordPress 多站点
![深入浅出讲述提升 WordPress 性能的九大秘笈](/data/attachment/album/201512/21/185659seueice60zn5n5c6.jpg)
### 在 LAMP 架构下 WordPress 的性能
大多数 WordPress 站点都运行在传统的 LAMP 架构下：Linux 操作系统，Apache Web 服务器软件，MySQL 数据库软件（通常是一个单独的数据库服务器）和 PHP 编程语言。这些都是非常著名的，广泛应用的开源工具。在 WordPress 世界里，很多人都用的是 LAMP，所以很容易寻求帮助和支持。
当用户访问 WordPress 站点时，浏览器为每个用户创建六到八个连接来连接到 Linux/Apache 上。当用户请求连接时，PHP 即时生成每个页面，从 MySQL 数据库获取资源来响应请求。
LAMP 或许对于数百个并发用户依然能照常工作。然而，流量突然增加是常见的，并且通常这应该算是一件好事。
但是，当 LAMP 站点变得繁忙时，当同时在线的用户达到数千个时，它的瓶颈就会被暴露出来。瓶颈存在主要是两个原因：
1. Apache Web 服务器 - Apache 的每个/每次连接需要消耗大量资源。如果 Apache 接受了太多的并发连接，内存可能会耗尽，从而导致性能急剧降低，因为数据必须交换到磁盘了。如果以限制连接数来提高响应时间，新的连接必须等待，这也导致了用户体验变得很差。
2. PHP/MySQL 的交互 - 一个运行 PHP 和 MySQL 数据库服务器的应用服务器上每秒的请求量有一个最大限制。当请求的数量超过这个最大限制时，用户必须等待。超过这个最大限制时也会增加所有用户的响应时间。超过其两倍以上时会出现明显的性能问题。
LAMP 架构的网站出现性能瓶颈是常见的情况，这时就需要升级硬件了 - 增加 CPU，扩大磁盘空间等等。当 Apache 和 PHP/MySQL 的架构超载后，在硬件上不断的提升却跟不上系统资源指数增长的需求。
首选替代 LAMP 架构的是 LEMP 架构 – Linux, NGINX, MySQL, 和 PHP。 (这是 LEMP 的缩写，E 代表着 “engine-x.” 的发音。) 我们在 技巧 3 中会描述 LEMP 架构。
### 技巧 1. 缓存静态资源
静态资源是指不变的文件，像 CSS，JavaScript 和图片。这些文件往往在网页的数据中占半数以上。页面的其余部分是动态生成的，像在论坛中评论，性能仪表盘，或个性化的内容（可以看看 Amazon.com 产品）。
缓存静态资源有两大好处：
* 更快的交付给用户 - 用户可以从它们浏览器的缓存或者从互联网上离它们最近的缓存服务器获取静态文件。有时候文件较大，因此减少等待时间对它们来说帮助很大。
* 减少应用服务器的负载 - 从缓存中检索到的每个文件会让 web 服务器少处理一个请求。你的缓存越多，用户等待的时间越短。
要让浏览器缓存文件，需要在静态文件中设置正确的 HTTP 首部。看看 HTTP Cache-Control 首部，特别是设置了 max-age 参数，Expires 首部，以及 Entity 标记。[这里](http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/) 有详细的介绍。
当启用本地缓存，然后用户请求以前访问过的文件时，浏览器首先检查该文件是否在缓存中。如果在，它会询问 Web 服务器该文件是否改变过。如果该文件没有改变，Web 服务器将立即响应一个304状态码（未改变），这意味着该文件没有改变，而不是返回状态码200 OK 并检索和发送已改变的文件。
要在浏览器之外支持缓存，可以考虑下面讲到的技巧，以及考虑使用内容分发网络（CDN）。CDN 是一​​种流行且​​强大的缓存工具，但我们在这里不详细描述它。在你实现了这里讲到的其它技术之后可以考虑 CDN。此外，当你的站点从 HTTP/1.x 过渡到 HTTP/2 协议时，CDN 的用处可能不太大；根据需要调查和测试，找到你网站需要的正确方法。
如果你转向 NGINX Plus 或将开源的 NGINX 软件作为架构的一部分，建议你考虑 技巧 3，然后配置 NGINX 缓存静态资源。使用下面的配置，用你 Web 服务器的 URL 替换 www.example.com。
```
server {
    ### 将 www.example.com 替换为你的 URL
    server_name www.example.com;
    root /var/www/example.com/htdocs;
    index index.php;
    access_log /var/log/nginx/example.com.access.log;
    error_log /var/log/nginx/example.com.error.log;
    location / {
        try_files $uri $uri/ /index.php?$args;
    }
    location ~ \.php$ {
        try_files $uri =404;
        include fastcgi_params;
        ### 使用你 WordPress 服务器的套接字，地址和端口来替换
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        #fastcgi_pass 127.0.0.1:9000;
    }   
    location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
        expires max;
        log_not_found off;
        access_log off;
    }
}
```
### 技巧 2. 缓存动态文件
WordPress 动态地生成网页，这意味着每次请求时它都要生成一个给定的网页（即使和前一次的结果相同）。这意味着用户随时获得的是最新内容。
想一下，当用户访问一个帖子时，并在文章底部有用户的评论时。你希望用户能够看到所有的评论 - 即使评论刚刚发布。动态内容就是处理这种情况的。
但现在，当帖子每秒出现十几二十几个请求时。应用服务器可能每秒需要频繁生成页面导致其压力过大，造成延误。为了给用户提供最新的内容，每个访问理论上都是新的请求，因此它们不得不在原始出处等待很长时间。
为了防止页面由于不断提升的负载而变得缓慢，需要缓存动态文件。这需要减少文件的动态内容来提高整个系统的响应速度。
要在 WordPress 中启用缓存中，需要使用一些流行的插件 - 如下所述。WordPress 的缓存插件会请求最新的页面，然后将其缓存短暂时间 - 也许只有几秒钟。因此，如果该网站每秒中会有几个请求，那大多数用户获得的页面都是缓存的副本。这也有助于提高所有用户的检索时间：
* 大多数用户获得页面的缓存副本。应用服务器没有做任何工作。
* 用户会得到一个之前的崭新副本。应用服务器只需每隔一段时间生成一个崭新页面。当服务器产生一个崭新页面（对于缓存过期后的第一个用户访问），它这样做要快得多，因为它的请求并没有超载。
你可以缓存运行在 LAMP 架构或者 LEMP 架构 上 WordPress 的动态文件（在 技巧 3 中说明了）。有几个缓存插件，你可以在 WordPress 中使用。运用到了最流行的缓存插件和缓存技术，从最简单到最强大的：
* [Hyper-Cache](https://wordpress.org/plugins/hyper-cache/) 和 [Quick-Cache](https://wordpress.org/plugins/quick-cache/) – 这两个插件为每个 WordPress 页面创建单个 PHP 文件。它支持绕过多个 WordPress 与数据库的连接核心处理的一些动态功能，创建一个更快的用户体验。它们不会绕过所有的 PHP 处理，所以并不会如下面那些取得同样的性能提升。它们也不需要修改 NGINX 的配置。
* [WP Super Cache](https://wordpress.org/plugins/wp-super-cache/) – 最流行的 WordPress 缓存插件。在它易用的界面易用上提供了许多功能，如下所示。我们在 技巧 7 中展示了一个简单的 NGINX 配置实例。
* [W3 Total Cache](https://wordpress.org/plugins/w3-total-cache/) – 这是第二流行的 WordPress 缓存插件。它比 WP Super Cache 的功能更强大，但它有些配置选项比较复杂。样例 NGINX 配置，请看 技巧 6。
* [FastCGI](http://www.fastcgi.com/) – CGI 的意思是 通用网关接口   （    Common Gateway Interface    ） ，在因特网上发送请求和接收文件的一种通用方式。它不是一个插件，而是一种与缓存交互缓存的方法。FastCGI 可以被用在 Apache 和 Nginx 上，它也是最流行的动态缓存方法；我们在 技巧 5 中描述了如何配置 NGINX 来使用它。
这些插件和技术的文档解释了如何在典型的 LAMP 架构中配置它们。配置方式包括数据库和对象缓存；最小化 HTML、CSS 和 JavaScript；集成流行的 CDN 集成环境。对于 NGINX 的配置，请看列表中的提示技巧。
**注意**：缓存不会用于已经登录的 WordPress 用户，因为他们的 WordPress 页面都是不同的。（对于大多数网站来说，只有一小部分用户可能会登录）此外，大多数缓存不会对刚刚评论过的用户显示缓存页面，因为当用户刷新页面时希望看到他们的评论。若要缓存页面的非个性化内容，如果它对整体性能来说很重要，可以使用一种称为 [碎片缓存（fragment caching）](https://css-tricks.com/wordpress-fragment-caching-revisited/) 的技术。
### 技巧 3. 使用 NGINX
如上所述，当并发用户数超过某一数量时 Apache 会导致性能问题 – 可能是数百个用户同时使用。Apache 对于每一个连接会消耗大量的资源，因而容易耗尽内存。Apache 可以配置连接数的值来避免耗尽内存，但是这意味着，超过限制时，新的连接请求必须等待。
此外，Apache 为每个连接加载一个 mod\_php 模块副本到内存中，即使只有服务于静态文件（图片，CSS，JavaScript 等）。这使得每个连接消耗更多的资源，从而限制了服务器的性能。
要解决这些问题，从 LAMP 架构迁到 LEMP 架构 – 使用 NGINX 取代 Apache 。NGINX 在一定的内存之下就能处理成千上万的并发连接数，所以你不必经历颠簸，也不必限制并发连接数到很小的数量。
NGINX 处理静态文件的性能也较好，它有内置的，容易调整的 [缓存](https://www.nginx.com/resources/admin-guide/content-caching/) 控制策略。减少应用服务器的负载，你的网站的访问速度会更快，用户体验更好。
你可以在部署环境的所有 Web 服务器上使用 NGINX，或者你可以把一个 NGINX 服务器作为 Apache 的“前端”来进行反向代理 - NGINX 服务器接收客户端请求，将请求的静态文件直接返回，将 PHP 请求转发到 Apache 上进行处理。
对于动态页面的生成，这是 WordPress 核心体验，可以选择一个缓存工具，如 技巧 2 中描述的。在下面的技巧中，你可以看到 FastCGI，W3\_Total\_Cache 和 WP-Super-Cache 在 NGINX 上的配置示例。 （Hyper-Cache 和 Quick-Cache 不需要改变 NGINX 的配置。）