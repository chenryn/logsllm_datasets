packet with a valid ICV, and that it can be obtained by di-
rectly applying the modiﬁcation to the encrypted shortened
packet C.
This technique can be used to decrypt TKIP packets sent
towards the client as follows. An attacker tries all 28 possi-
ble values of the removed byte. For each guess the modiﬁ-
cation D is applied and the resulting packet is injected with
a diﬀerent priority y. Assuming that QoS channel y has a
lower TSC it will pass the TSC check, and the client will
decrypt the packet. Then the ICV is veriﬁed. If the guess
of the attacker was wrong the ICV is invalid and packet will
silently be dropped (without generating a MIC failure). On
the other hand, if the guess was correct, the ICV will be
valid. However, with high probability the MIC value of the
shortened packet will be wrong. As a result the client sends
a MIC failure report. Thus a correct guess can be detected
by listening for the corresponding MIC failure. Note that
an AP isn’t vulnerable to the attack because it never sends
MIC failure reports. To avoid triggering the TKIP counter-
measures at most one byte can be decrypted each minute.
Because we must wait one minute after decrypting a byte,
it is infeasible to decrypt all bytes using this method. In-
stead the Beck and Tews attack targets an ARP reply packet
and decrypts only the ICV and the MIC value. This takes
on average 12 to 15 minutes. The remaining content of the
packet is guessed. A particular guess can be veriﬁed by
checking if the calculated ICV of the predicted packet equals
the decrypted ICV. If they match, the guess is very likely
correct. Once the ARP reply has been decrypted we can
use the inverse Michael algorithm to calculate the MIC key
used for AP to client communication [20]. Combined with
the keystream of the decrypted ARP reply, an attacker can
now forge 3 to 7 packets having a length smaller or equal to
the ARP reply. The precise number of packets that can be
forged depends on the number of supported QoS channels.
3. DENIAL OF SERVICE
This section describes a novel attack we discovered. When
closely inspecting the QoS extension to TKIP we notice that
the keystream is independent of the priority (i.e., QoS chan-
nel) used to transmit the frame. On the other hand the
calculated MIC value does depend on the priority of the
MSDU. Say that we capture a packet sent with priority x
and replay it with a diﬀerent priority y. Assuming QoS
channel y has a lower TSC it will pass the TSC check, and
the receiver will use the correct keystream to decrypt the
packet. As a result it will also pass the ICV check. How-
ever, the changed priority will cause the receiver to expect
a diﬀerent MIC value. Hence a MIC failure occurs. Re-
playing this packet a second time will trigger a second MIC
failure. After these two MIC failures the AP will shut down
all TKIP traﬃc for 1 minute. Repeating this process every
minute will prevent any TKIP protected communication, ef-
fectively causing a DoS. If the network does not use QoS we
can forge the QoS header when replaying the packet. As
discovered by Morii and Todo, most clients will not check
whether the network is actually using QoS and simply ac-
cept the packet [17]. Therefore the only requirement is that
one or more clients support the QoS extension, which is true
for most modern wireless adapters [17].
To implement the attack we had to patch the compat-
wireless drivers of Linux. The original driver modiﬁed the
QoS header when in monitor mode, which interfered with
our attack. Monitor mode is a feature supported by some
wireless adapters and drivers allowing one to capture all
wireless traﬃc. It also enables injection of arbitrary 802.11
frames. Our tool monitors the traﬃc of a network and shows
whether it supports TKIP or QoS. Additionally it shows a
list of connected clients and basic statistics such as the ci-
pher suite it is using, number of MIC failures, number of
association failures, etc. When a vulnerable TKIP packet is
captured its priority is changed and the packet is replayed.
If the network isn’t using QoS our tool will forge the QoS
header. We show in Sect. 6 that our implementation was
found to be very reliable.
Our attack appears to be one of the more eﬀective DoS at-
tacks that can be launched against a networking using TKIP.
The simplicity of the attack not only makes it easy to im-
plement and debug, it also assures it is applicable in many
real world environments. In Section 7 a thorough compari-
son is given to currently known DoS attacks. Disabling the
TKIP countermeasures prevents the attack. However, most
APs do not provide this option, and with good reason. As
mentioned in Sect. 2.3 the countermeasures were included to
detect active attacks against the weak Michael algorithm [6].
Another option to prevent the attack is to make the key-
stream dependent on the priority. This entails a change in
the protocol, meaning all devices implementing TKIP would
have to be updated. Though preventing the attack, such a
modiﬁcation does not appear feasible in practice.
4. MORE AND BIGGER PACKETS
The Beck and Tews attack allows forging 3 to 7 packets of
at most 28 bytes [20]. Our goal is twofold: we want to inject
both more and bigger packets. In this section we assume the
Beck and Tews attack has already been executed, meaning
we have obtained the MIC key for AP to client communica-
tion. Our technique is similar to the fragmentation attack
on WEP [4] and an improvement of a suggested attack by
Beck [1]. To the best of our knowledge, this is the ﬁrst time
such an attack on TKIP has been implemented and proved
to be possible.
4.1 Exploiting Fragmentation
Since we know the MIC key, sending additional packets
only requires obtaining new keystreams. Recall that each
TSC corresponds to a diﬀerent keystream. Because RC4
is used, XORing an encrypted packet with its correspond-
ing unencrypted packet unveils the keystream used during
encryption. Hence, ﬁnding new keystreams reduces to pre-
dicting the content of encrypted packets.
All 802.11 packets start with a LLC and SNAP header of
8 bytes. If we know whether it is an ARP, IP, or EAPOL
packet, this header can be predicted. Fortunately we can
identify ARP and EAPOL packets based on their length,
and can consider everything else to be IP. The ﬁrst byte of
an IP packet consists of the version and the header length,
which is generally equal to 0x45. The second byte contain-
ing the Diﬀerentiated Services Field can be predicting based
on the priority of the 802.11 frame [18]. Finally the next 2
bytes, representing the length of the IP packet, can be de-
rived from the length of the 802.11 frame. As a result we
can predict the ﬁrst 4 bytes of an IP packet. Predicting
the ﬁrst 14 bytes of ARP packets is also possible. These
bytes consist of the hardware type and size, protocol type
and size, request type, and ﬁnally the MAC address of the
sender. All these ﬁelds can be predicted in an IPv4 network.
Because EAPOL packets are rarely transmitted we simply
ignore them. Our predictions can then be XORed with the
encrypted packets, revealing the ﬁrst 12 bytes or more of the
keystream.
These short keystreams are combined using fragmentation
at the 802.11 layer. As mentioned in Sect. 2.2 the 802.11
protocol allows a frame to be fragmented into at most 16
MPDUs. Each MPDU must have a unique TSC value and
is encrypted with the keystream corresponding to that TSC.
All fragments must include an ICV, though the MIC value
is calculated over the complete MSDU and can be spread
over multiple MPDUs. Using fragmentation to combine the
keystreams we can inject packets with 112 bytes of payload.
Assuming there is enough traﬃc on the network, we can
inject an arbitrary amount of packets. Compared to the
Beck and Tews attack this is a signiﬁcant improvement.
Implementation: Performing a Portscan
4.2
Implementing the fragmentation attack required patching
the compat-wireless drivers of Linux. The original driver
failed to correctly inject MPDUs, which caused the attack
to fail. Using our patched driver we successfully tested the
fragmentation attack against several devices, and found that
our heuristics to predict the ﬁrst bytes of packets were very
accurate (see Sect. 6). To reduce packet loss we also detect
whether the client acknowledged receiving the MPDU, oth-
erwise the MPDU is retransmitted. As a proof of concept we
implemented a port scanner. This requires injecting a large
amount of packets and is thus ideal to test our fragmentation
attack.
The port scanner is given a ﬁle containing the ports to scan
and works by injecting TCP SYN request to each port. The
SYN packets do not contain any options, assuring there is
enough keystream to inject them. The encrypted TCP SYN-
ACK reply is detected by its length. In practice most packets
are larger than a SYN-ACK packet, meaning it has a distinc-
tive short length. After scanning a port a TCP RST packet
is always sent, even if no SYN-ACK was detected. This is
done to prevent the client from retransmitting a potentially
undetected SYN-ACK packet. Note that if the replies of the
client can be sent to an IP under our control, we essentially
have bidirectional communication and can connect to open
ports.
The attack can be mitigated by preventing the Beck and
Tews attack. This means disabling the client from send-
ing MIC failure reports, or using a short rekeying time of 2
minutes or less [20].
5. DECRYPTING ARBITRARY PACKETS
In this section we describe a state reset attack on the
Michael algorithm and we show how it can be used to de-
crypt arbitrary packets sent towards the client.
5.1 The Michael Algorithm
The state of the Michael algorithm is deﬁned by two 32-
bit words (L, R) called left and right. To calculate the MIC
value of an 802.11 packet the state is ﬁrst initialised to the
MIC key. Then the data shown in Fig. 2 is processed, which
is padded so that its length is a multiple of 4 bytes. Fi-
nally the calculation is ﬁnalised and resulting MIC value is
outputted. All data is processed in 32-bit words by a block
function.
The block function B(L, R) is an unkeyed 4-round Feistel-
type construction, taking as input a Michael state and re-
turning a new state [14, §11.4.2.3.3]. When processing an
input word M the next state is given by B(L ⊕ M, R). We
will let L(cid:48) stand for L ⊕ M . The block function can be in-
verted [22], and its inverse is denoted by B−1. Note that we
can predictably inﬂuence L at the start of the block function
using M . For convenience the notation B((L, R), M ) is used
to represent B(L ⊕ M, R), denoting the new internal state
after processing M .
5.2 Michael State Reset
If the Michael state ever returns to the initial state, all
data processed so far has no inﬂuence on the MIC value.
This idea can be used to construct a preﬁx packet which
resets the state, allowing us to append a packet whose MIC
value is calculated only over the appended data. As sug-
gested by Beck [1] this could be done by appending two
magic words to the preﬁx. These so-called magic words are
ordinary 32-bits data words, but chosen in such a way so
they reset the internal state of the Michael algorithm. Us-
ing them an attacker can append any encrypted packet to
the preﬁx without invalidating the MIC value of the com-
plete packet. Unfortunately Beck didn’t provide a thorough
theoretical analysis. We generalise the problem to ﬁnding a
list of magic words that will transform a start state (Ls, Rs)
to an end state (Le, Re).
We could try to use just one magic word M1 to reset the
state. In that case B(Ls ⊕ M1, Rs) must return (Le, Re).
Assuming that processing a random word M using the block
function results in a random state, a guess for M1 can be
modelled as a Bernoulli trial with a success probability of
2−64. Since we can try at most 232 values for M , ﬁnding a
solution reduces to having the ﬁrst success after 232 trails.
This follows a geometric distribution. We get
Pr[X ≤ 232] = 1 −(cid:0)1 − 2
−64(cid:1)232 ≈ 2, 328 · 10
−10
(4)
A better option is to use two magic words, denoted by
M1 and M2. This gives us one intermediate state (Li, Ri) to
work with. We begin by calculating B−1(Le, Re) = (L(cid:48)
i, Ri).
Note that we cannot calculate Li because M2 is still un-
known. Nevertheless, this teaches us the required value for
Ri. Then we brute force the ﬁrst magic word M1. For each
possible value we apply the block function.
If we obtain
the required value for Ri we have found a valid intermedi-
ate state (Li, Ri), since using the guessed value for M1 and
setting M2 to Li ⊕ L(cid:48)
i results in a solution:
B(B((Ls, Rs), M1), M2) = B(Li ⊕ M2, Ri)
(cid:48)
= B(L
i, Ri)
= (Le, Re)
(5)
(6)
(7)
The ﬁrst equation is trivial. The second equation follows
from our choice of M2. Finally, the third equation follows
from the calculation B−1(Le, Re) = (L(cid:48)
A solution is found if the guess for M1 results in the re-
quired value for Ri, which has a probability of 2−32. Similar
to the previous case, the probability of ﬁnding a solution
can be modelled by a geometric distribution:
i, Ri).
Pr[Y ≤ 232] = 1 −(cid:0)1 − 2
−32(cid:1)232
= 0, 6321 . . .
(8)
where Y follows a geometric distribution with a success
probability of 2−32. This implies that roughly 27% of the
time 232 calculations are performed yet no solution is found.
As an experiment we ran 50000 runs where random Michael
states had to be connecting using two magic words. In 31518
runs a solution was found, resulting in a success probability
of 63,036%. This closely matches our analyses. On an 3,10
GHz Intel Core i5-2400 it took on average 11,14 seconds to
ﬁnd a solution, with a standard deviation of 6,33 seconds.
Another strategy is to use three magic words M1, M2,
and M3. This gives us two intermediate states (Li1, Ri1)
and (Li2, Ri2) to work with. Again we start by calculating
B−1(Le, Re) = (L(cid:48)
i2, Ri2). Next we take 216 random values
for the ﬁrst magic word and compute the list of resulting
intermediate states (Li1, Ri1). We then try to brute-force
the second magic word by applying the reverse Michael al-
gorithm to the state (L(cid:48)
If the resulting value for
Ri1 is in the list of earlier calculated states we have found
a solution. Let Li1 be the value accompanying Ri1, then
i1, and M3 = Li2 ⊕ L(cid:48)
the magic words M1, M2 = Li1 ⊕ L(cid:48)
provide a solution:
i2, Ri2).
i2
B(B(B((Ls, Rs),M1), M2), M3)
= B(B(Li1 ⊕ M2, Ri1), M3)
= B(Li2 ⊕ M3, Ri2)
= (Le, Re)
(9)
(10)
(11)
The ﬁrst equation is trivial. The second and third follow
from our choice of M2 and M3, and the usage of the reverse
block function to calculate L(cid:48)
The probability that the result of a guess for M2 is in the