### Today’s Session
- **Design Failures in Embedded Systems**
  - Examples of Design Failures
  - Exploiting a Design Failure
- **Software Vulnerabilities in Embedded Systems**
  - Examples of Software Vulnerabilities
  - Exploiting a Common Embedded System

### Design Failures
- **Undocumented Functionality**
- **Developer Backdoors**
- **Auto-Something Features**
- **Legacy Functions**
- **Ignored Standards**
- **Uncontrolled Increase of Complexity**
- **New Subsystems**
- **Additional Access Methods**
- **Inconsistent Access Restrictions**

### Case Studies of Design Failures

#### Case 1: Lucent Brick
- **Layer 2 Firewall Running Inferno OS**
  - **ARP Cache Design Failure**: The ARP cache does not time out.
  - **ARP Reply Poisoning**: ARP replies are forwarded regardless of firewall rules, leading to potential security breaches.
- **Network Diagram**:
  - **LSMS Management Server**
  - **DMZ**
  - **ARP Reply with LSMS IP**

#### Case 2: Ascend Router
- **Undocumented Discovery Protocol**
  - **Special Packet Format to UDP Discard Port**
  - **Information Leakage**: Leaks IP address, netmask, MAC address, serial number, device type, and features.
  - **IP Address Configuration**: Can set the IP address using SNMP write community.

### Exploiting a Design Failure: HP Printers
- **Access Methods**:
  - Telnet, HTTP, FTP, SNMP, PJL
- **Access Restrictions**:
  - Admin password on HTTP and Telnet
  - IP access restriction on FTP, PJL, Telnet
  - PJL security password
- **Inconsistent Access Restriction Interworkings**:
  - SNMP read reveals admin password in hex at `.iso.3.6.1.4.1.11.2.3.9.4.2.1.3.9.1.1.0`
  - HTTP interface can be used to disable other restrictions (username: laserjet)

#### PJL (Port 9100)
- **Printer Configuration Access**:
  - Number of copies, size, etc.
  - Locking panel
  - Input and output trays
  - Eco mode and power save
  - I/O Buffer
- **Security**:
  - Relies on PJL password with a key space of 65535.
  - Maximum 6 hours for remote brute force.

#### PJL File System Access
- **File Systems on DRAM and FLASH**:
  - Spool directory contains jobs
  - PCL macros on printer
  - More file system content (later models)
  - Firmware
  - Web server content
  - Subsystem configuration
- **PJL-Based File Server**:
  - Printer can be used as a PJL-based file server.

#### Phenoelit vs. PJL: PFT
- **Tool for Direct PJL Communication**:
  - Reading, modifying, and writing environment variables
  - Full filesystem access
  - Changing display messages
  - PJL "security" removal
- **Availability**:
  - Linux and Windows, including libPJL for both platforms
  - Windows GUI version "Hijetter" by FtR
  - Open source

### HP Printers: ChaiVM
- **Java Virtual Machine for Embedded Systems**:
  - Officially supported on HP Printers 9000, 4100, and 4550
  - Also runs on HP 8150
- **Web Server and Static Files**:
  - Everything lives on the printer's file system.
- **HP Chai Embedded Software**:
  - "In 2001 alone, millions of information appliances will ship with the capability to deliver rich, powerful, and dynamic services via the World Wide Web. These appliances are powered by HP Chai embedded software."

#### Chai Standard Loader Service
- **URL**: `http://device_ip/hp/device/this.loader`
- **Loader Validation**: Validates JAR signature from HP to ensure security
- **EZloader**:
  - HP signed JAR
  - No signatures required for upload
  - Adding services via printer file system access to `0:\default\csconfig`
  - HP Java classes, documentation, and tutorials available

#### Getting Code on the Printer
- **Flash File System**:
  - `0:\default\csconfig`
  - `http://1.2.3.4/hp/device/this.loader` (Upload class files and new csconfig)
  - `http://1.2.3.4/hp/device/hp.ez` (Upload EZloader and your JAR)

#### ChaiVM Stability
- **Instability Issues**:
  - Too many threads can kill the printer
  - Connect() to unreachable hosts or closed ports kills the VM
  - Not always throws exceptions
  - Huge differences between simulation environment and real-world printers
  - Unavailability of all instances of a service kills the VM
- **Resetting the Printer**:
  - Use SNMP set: `.iso.3.6.1.2.1.43.5.1.1.3.1 = 4`

#### Things You Can Do with HP Printers
- **Phenoelit ChaiPortScan**:
  - Web-based port scanner daemon for HP Printers with fixed firmware
- **Phenoelit ChaiCrack**:
  - Web-based crypt() cracking tool for HP Printers
- **Backdoor Servers**:
  - Binding and listening is allowed
  - Chai services have access to authentication
  - Anything is possible (but who wants to code in Java anyway?)

#### ChaiVM Services
- **Fully Trusted Between Each Other**
- **ChaiAPNP Service**:
  - Supports Service Location Protocol (SLP) to find other devices and services
- **Notifier Service**:
  - Notifies by HTTP or Email of "interesting events"
- **ChaiOpenView**:
  - Enables ChaiVM configuration via SNMP
- **ChaiMail Service**:
  - Designed to work across firewalls
  - Issue commands to your Chai service via Email

### Software Vulnerabilities
- **Common Mistakes**:
  - Input validation
  - Format strings
  - Buffer overflows
  - Cross Site Scripting
- **Embedded HTTP Daemons**:
  - Most are vulnerable due to limited resources leading to the removal of sanity checks

#### Buffer Overflows
- **Xedia Router (now Lucent Access Point)**:
  - Long URL in HTTP GET request crashes the router
- **Brother Network Printer (NC-3100h)**:
  - Password variable in HTTP GET request with 136 characters crashes the printer
- **HP ProCurve Switch**:
  - SNMP set with 85 characters in `.iso.3.6.1.4.1.11.2.36.1.1.2.1.0` crashes the switch
- **SEH IC-9 Pocket Print Server**:
  - Password variable in HTTP GET request with 300 characters crashes the device

### Common Misconceptions
- **Embedded Systems**:
  - Harder to exploit than multipurpose OSs
  - No shell, so no useful shell code
  - Unknown addressing and elements make it nearly impossible to write exploits
  - The worst that can happen is a device crash or reboot

### Proving It Wrong: A Cisco IOS Exploit
- **Goal**:
  - Exploiting an overflow condition in Cisco Systems IOS to take over the router
- **Considerations**:
  - Tightly integrated process into the OS, likely to crash the OS
  - Variety of different platforms, need a generic approach
  - IOS is closed source

#### Step 1: Memory Corruption
- **According to Cisco**:
  - Memory corruption is the most common bug in IOS.
  - Assumption: Dealing with heap overflows
  - Vulnerability: Buffer overflow in IOS (11.1.x – 11.3.x) TFTP server for long file names

#### Step 2: Taking It Apart
- **Understanding Memory Layout**:
  - Without reverse engineering IOS
  - Correlating debug output and memory dumps
  - Troubleshooting pages at cisco.com

#### Step 3: Memory Maps
- **Memory Areas**:
  - NVRAM, Code, Data, Model
  - Validate using IOS commands on the systems

#### Step 4: Putting It Together
- **Block Structure**:
  - MAGIC, PID, RAM Address, Code Address, NEXT ptr, PREV ptr, Size + Usage, REDZONE

#### Step 5: Theory of the Overflow
- **Filling the "Host Block"**:
  - Overwriting the following block header to create a "fake block"
  - Let IOS memory management use the fake block information
  - Desired result: Writing to arbitrary memory locations

#### Step 6: A free() on IOS
- **Double Linked Pointer List**:
  - Upon free(), an element of the list is removed
  - Pointer exchange operation, similar to Linux or Windows

#### Step 7: The Requirements
- **MAGIC, PREV ptr, Size, and Usage Bit**:
  - Must be correct
  - PID, pointers, and NEXT ptr do not need to be correct
  - "Check heaps" process validates MAGIC and REDZONE

#### Step 8: Taking the First: 2500
- **Cisco 2500**:
  - Allows anyone to write to the NVRAM memory area
  - NEXT ptr is not checked, allowing 0x02000000 (NVRAM) to be placed there
  - Pointer exchange leads to a write to NVRAM and invalidates it (checksum error)

#### Review of the Attack
- **Disadvantages**:
  - Only works because NVRAM is always writable (only on 2500)
  - Attacker must be in the same subnet to provide config
- **Advantages**:
  - [To be filled in based on specific context]