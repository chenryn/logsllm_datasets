Today‘s Session
! Design failures in embedded systems
! Examples of design failures
! Exploiting a design failure
! Software vulnerabilities in embedded 
systems
! Examples software vulnerabilities
! Exploiting a common embedded system
Design failures
! Undocumented functionality
! Developer backdoors
! Auto-something features
! Legacy functions
! Ignored standards
! Uncontrolled increase of complexity
! New subsystems
! Additional access methods
! Inconsistent access restrictions
Design failures
Case 1: Lucent Brick
! Layer 2 Firewall running Inferno OS
! ARP cache design failures
! ARP cache does not time out
! ARP reply poisoning of firewall
! ARP forwarded regardless of firewall rules
LSMS Management Server
DMZ
ARP reply
with LSMS IP
Design failures
Case 2: Ascend Router
! Undocumented discovery protocol
! Special packet format to UDP discard port
! Leaks information remotely
! IP address/Netmask
! MAC address
! Serial number
! Device type
! Features
! Can set IP address using SNMP write 
community
Exploiting a design failure: 
Exploiting a design failure: 
HP Printers
HP Printers
! Various access methods:
! Telnet,HTTP,FTP,SNMP,PJL
! Various access restrictions
! Admin password on HTTP and Telnet
! IP access restriction on FTP, PJL, Telnet
! PJL security password
! Inconsistent access restriction interworkings
! SNMP read reveals admin password in hex at 
.iso.3.6.1.4.1.11.2.3.9.4.2.1.3.9.1.1.0
! HTTP interface can be used to disable other 
restrictions (username: laserjet)
HP Printers: PJL
! PJL (Port 9100) allows access to printer 
configuration
! Number of copies, size, etc.
! Locking panel
! Input and output trays
! Eco mode and Power save
! I/O Buffer
! Security relies on PJL password 
! key space of 65535.
! max. 6 hours for remote brute force
HP Printers: PJL
! PJL (Port 9100) allows access to printer file 
systems on DRAM and FLASH
! Spool directory contains jobs
! PCL macros on printer
! More file system content (later models)
! Firmware
! Web server content
! Subsystem configuration
! Printer can be used as PJL-based file server
Phenoelit vs. PJL: PFT
! Tool for direct PJL communication
! Reading, modifying and writing environment 
variables
! Full filesystem access
! Changing display messages
! PJL „security“ removal
! Available for Linux and Windows including 
libPJL for both platforms
! Windows GUI version „Hijetter“ by FtR
! ... and of course it‘s open source
HP Printers: ChaiVM [1]
! ChaiVM is a Java Virtual Machine for 
embedded systems
! HP Printers 9000, 4100 and 4550 are 
officially supported. 
! HP 8150 also runs it.
! ChaiVM on printers comes completely 
with web server, static files and objects.
! Everything lives on the printer‘s file 
system.
„In 2001 alone, millions of 
information appliances will ship with 
the capability to deliver rich, 
powerful and dynamic services via 
the World Wide Web. 
These appliances are powered by 
HP Chai embedded software.“
HP Printers: ChaiVM [2]
! Chai standard loader service
! http://device_ip/hp/device/this.loader
! Loader is supposed to validate JAR 
signature from HP to ensure security
! HP released new EZloader
! HP signed JAR 
! No signatures required for upload
! Adding services via printer file system 
access to 0:\default\csconfig
! HP Java classes, documentation and 
tutorials available
HP Printers: ChaiVM [3]
! Getting code on 
the printer
Printer
Flash file system
0:\default\csconfig
http://1.2.3.4/hp/
device/this.loader
Upload class files
And new csconfig
http://1.2.3.4/hp/
device/hp.ez
Upload EZloader
Upload your JAR
HP Printers: ChaiVM [4]
! ChaiVM is quite instable
! Too many threads kill printer
! Connect() to unreachable 
hosts or closed port kills VM
! Not always throws Exceptions
! Huge differences between simulation 
environment and real-world printers
! Unavailability of all instances of a service 
kills VM
! To reset printer use SNMP set:
.iso.3.6.1.2.1.43.5.1.1.3.1 = 4
HP Printers: 
Things you can do...
! Phenoelit ChaiPortScan
! Web based port scanner daemon for HP 
Printers with fixed firmware
! Phenoelit ChaiCrack
! Web based crypt() cracking tool for HP 
Printers
! Backdoor servers 
! Binding and listening is allowed 
! Chai services have access to authentication
! Anything is possible 
(but who wants to code in Java anyway?)
HP Printers: ChaiVM [5]
! ChaiServices are fully trusted between each 
other
! ChaiAPNP service supports Service Location 
Protocol (SLP) 
! find other devices and services
! Notifier service can notify you by HTTP or 
Email of „interesting events“
! ChaiOpenView enables ChaiVM configuration 
via SNMP
! ChaiMail service is „designed to work across 
firewalls“. 
! Issue commands to your Chai service via Email!
Software Vulnerabilities
! Classic mistakes are also made on 
embedded systems
! Input validation
! Format strings
! Buffer overflows
! Cross Site Scripting
! Most embedded HTTP daemons 
vulnerable
! Limited resources lead to removal of 
sanity checks
Buffer overflows
! Xedia Router 
(now Lucent Access Point) 
! long URL in HTTP GET request crashes router
! Brother Network Printer (NC-3100h)
! Password variable in HTTP GET request with 136 
chars crashes printer
! HP ProCurve Switch 
! SNMP set with 85 chars in 
.iso.3.6.1.4.1.11.2.36.1.1.2.1.0 crashes switch
! SEH IC-9 Pocket Print Server
! Password variable in HTTP GET request with 300 
chars crashes device
Common 
misconceptions
! Embedded systems are harder to 
exploit than multipurpose OS’s
! Since there is no shell, you can not 
create useful shell code
! Unknown addressing and elements 
make it nearly impossible to write 
exploits
! The worst thing that can happen is a 
device crash or reboot
Proving it wrong:
A Cisco IOS Exploit
! The Goal:
Exploiting an overflow condition in Cisco 
Systems IOS to take over the Router.
! Things to keep in mind:
! The process you crash is tightly integrated 
into the OS, so you probably crash the OS 
as well
! Cisco uses a variety of different platforms, 
so try to find a generic way of doing it
! IOS is closed source
IOS Exploit: Step 1
! According to Cisco*, memory corruption 
is the most common bug in IOS.
! Assumption: 
We are dealing with heap overflows
! Vulnerability for research:
Buffer overflow in IOS (11.1.x – 11.3.x) 
TFTP server for long file names
%SYS-3-OVERRUN: Block overrun at 20F1680 (red zone 
41414141)
%SYS-6-BLKINFO: Corrupted redzone blk 20F1680,
words 2446,alloc 80F10A6,InUse,dealloc 0,rfcnt 1
* http://www.cisco.com/warp/public/122/crashes_swforced_troubleshooting.html
IOS Exploit: Step 2
Taking it apart
! Understanding memory layout without 
reverse engineering IOS
! Correlating debug output and mem dumps
! Troubleshooting pages at cisco.com
0x20F1680: 0xAB1234CD 0x2 0x2059C9C 0x81A3022
0x20F1690: 0x80F10A6 0x20F29C4 0x20F0350 0x8000098E
0x20F16A0: 0x1 0x80F1A52 0x0 0x0
Block MAGIC
NEXT Memory Block
PID
Previous Memory Block
Size with
usage Bit 31
IOS Exploit: Step 3
Memory Maps
! So which memory areas are used for what? 
Asking Cisco at: 
www.cisco.com/warp/public/112/appB.html
! Validate these using IOS commands on the 
systems
NVRAM
Code
Data
Model
0x67000000
0x80000000
0x80000000
2600
0x02000000
0x03000000
0x00000000
2500
0x0E000000
0x08000000
0x02000000
1600
0x0E000000
0x02000000
0x02000000
1005
IOS Exploit: Step 4
Putting it together
MAGIC
PID
RAM Address
Code Address
Code Address
NEXT ptr
PREV ptr
Size + Usage
mostly 0x01
REDZONE
0xAB1234CD
unknown
String ptr for ‚show mem alloc‘
unknown
rfcnt
(may be „reference count“ ?)
0xFD0110DF
IOS Exploit: Step 5
Theory of the overflow
! Filling the „host block“
! Overwriting the following 
block header – hereby 
creating a „fake block“
! Let IOS memory 
management use the 
fake block information
! Desired result:
Writing to arbitrary 
memory locations
Host block
Header
Next block
Header
Data
Data
Fake Header
IOS Exploit: Step 6
A free() on IOS
Host block
NEXT2 PREV2
Next block
NEXT3 PREV3
Previous block
NEXT1 PREV1
! Double linked pointer list 
of memory blocks
! Upon free(), an element 
of the list is removed
! Pointer exchange 
operation, much like on 
Linux or Windows
Host->prev=next2;
(Host->next2)+prevofs=prev2;
delete(Host_block);
IOS Exploit: Step 7
The requirements
MAGIC
PID
RAM Address
Code Address
Code Address
NEXT ptr
PREV ptr
Size + Usage
mostly 0x01
REDZONE
! MAGIC is required
! PREV ptr has to be correct
! Size and Usage bit have to be 
correct
! The PID, these 3 pointers 
(wasting 12 bytes) and the 
NEXT ptr dont have to be 
correct
! „Check heaps“ process 
validates MAGIC and REDZONE
! Therefore: 
Performing an overflow up to 
the NEXT ptr is possible.
IOS Exploit: Step 8
Taking the first: 2500
0xAB1234CD
0xFFFFFFFE
0xCAFECAFE
0xCAFECAFE
0xCAFECAFE
0x02000000
0xFD0110DF
! Cisco 2500 allows anyone to 
write the the NVRAM memory 
area
! Since NEXT ptr is not checked, 
we can put 0x02000000 
(NVRAM) in there
! The 0x00 bytes don‘t get 
written because we are doing a 
string overflow here
! The pointer exchange leads to a 
write to NVRAM and invalidates 
it (checksum error)
Overflow AAA...
...AAAA
IOS Exploit: Step 8 [2]
Taking the first: 2500
! NVRAM gets invalidated by exploit
! Device reboots after discovering issue in 
memory management („Check heaps“ 
process)
! Boot without valid config leads to BOOTP 
request and TFTP config retrieval
! Result: Attacker provides config
(1) Exploit
(3) Bootp / TFTP
(2) Reboot
(4) New config
IOS Exploit: Step 8 [3]
Review of the Attack
! Disadvantages
! Attack only works because NVRAM is 
always writeable (only on 2500)
! Attacker has to be in the same 
subnet to provide config
! Advantages