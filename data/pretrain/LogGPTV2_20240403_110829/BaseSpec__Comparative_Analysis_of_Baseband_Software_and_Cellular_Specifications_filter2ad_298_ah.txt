other studies focused on different layers, protocols, or domains
on cellular networks such as VoLTE [38], SS7/Diameter [32],
uplink messages [39], [18], or lower layers [55], [40], [67].
These approaches are advantageous for finding service-
related bugs on specifications instead of software bugs such as
memory corruption. Nevertheless, they require real hardware
and considerable domain knowledge for cellular networks and
specifications. Therefore, testing every implemented messages
on diverse devices or building a bug oracle requires huge efforts.
BASESPEC tackles this by directly matching the documented
specification with the binary-embedded one, thereby discovering
hundreds of mismatches that may break the compliance with
the specification on multiple devices (§VII-C). Currently,
BASESPEC cannot discover bugs identified by these studies;
however, its methodology can be extended as discussed in §IX.
XI. CONCLUSION
In this study, we conducted the first systematic comparative
analysis of cellular baseband software and specifications.
By leveraging the natural characteristics of the baseband
as a real-time embedded device and a network modem,
we designed BASESPEC that automatically extracts binary-
embedded specification and compares it with the documented
one syntactically and semantically. By running an automated
prototype of BASESPEC on 18 baseband firmware images
from one of the top three vendors, we discovered hundreds
of mismatches that are non-compliant with the specification.
By analyzing the mismatches, we discovered a total of 9 bugs,
of which 5 are functional errors and 4 are memory-related
vulnerabilities including two critical RCE 0-days. Further, we
applied BASESPEC to another vendor and discovered several
mismatches, two of which cause a buffer overflow bug.
ACKNOWLEDGMENT
This work was supported by Institute of Information &
communications Technology Planning & Evaluation (IITP)
grant funded by the Korea government (MSIT) (No.2018-0-
00831, a study on physical layer security for heterogeneous
wireless network)
REFERENCES
3GPP, “3GPP Partners,” https://www.3gpp.org/about-3gpp/partners.
[1]
[2] ——, “3GPP Releases,” https://www.3gpp.org/specifications/releases.
[3] ——, “TS 24.007; Mobile radio interface signalling layer 3; General
aspects,” 2018.
[4] ——, “TS 24.008; Mobile radio interface Layer 3 specification; Core
network protocols; Stage 3,” 2019.
[5] ——, “TS 24.011; Point-to-Point (PP) Short Message Service (SMS)
support on mobile radio interface,” 2019.
[6] ——, “TS 24.301; Non-Access-Stratum (NAS) protocol for Evolved
Packet System (EPS); Stage 3,” 2019.
[7] ——, “TS 44.018; Mobile radio interface layer 3 specification;
GSM/EDGE Radio Resource Control (RRC) protocol,” 2019.
[8] M. Arapinis, L. Mancini, E. Ritter, M. Ryan, N. Golde, K. Redon, and
R. Borgaonkar, “New Privacy Issues in Mobile Telephony: Fix and
Verification,” in Proceedings of the 19th ACM Conference on Computer
and Communications Security (CCS), Raleigh, NC, Oct. 2012.
[9] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, “BYTEWEIGHT:
Learning to Recognize Functions in Binary Code,” in Proceedings of
the 23rd USENIX Security Symposium (Security), San Diego, CA, Aug.
2014.
16
[10] D. Basin, J. Dreier, L. Hirschi, S. Radomirovic, R. Sasse, and V. Stettler,
“A Formal Analysis of 5G Authentication,” in Proceedings of the 25th
ACM Conference on Computer and Communications Security (CCS),
Toronto, ON, Canada, Oct. 2018.
[11] D. Berard and V. Fargues, “How to design a baseband debugger,”
in Information and Communication Technology Security Symposium
(SSTIC), Rennes, France, jun 2020.
[12] P. Boonstoppel, C. Cadar, and D. Engler, “Rwset: Attacking path
explosion in constraint-based test generation,” in Proceedings of the 14th
International Conference on Tools and Algorithms for the Construction
and Analysis of Systems (TACAS), Budapest, Hungary, Mar.–Apr. 2008.
[13] S. Bugrara and D. Engler, “Redundant state detection for dynamic
symbolic execution,” in Proceedings of the 2013 USENIX Annual
Technical Conference (ATC), San Jose, CA, Jun. 2013.
[14] D. A. Burgess and H. S. Samra, “The OpenBTS Project,” Open Source
Cellular Infrastructure, 2008. [Online]. Available: http://openBTS.org
[15] A. Cama, “A walk with Shannon,” in OPCDE, 2018.
[16] S. K. Cha, M. Woo, and D. Brumley, “Program-Adaptive Mutational
Fuzzing,” in Proceedings of the 36th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2015, pp. 725–741.
[17] S. Chin, “Top-tier smartphone makers going to in-house processors: re-
port,” https://www.fierceelectronics.com/electronics/top-tier-smartphone-
makers-going-to-house-processors-report.
[18] M. Chlosta, D. Rupprecht, T. Holz, and C. Pöpper, “LTE Security
Disabled: Misconfiguration in Commercial Networks,” in Proceedings
of the 12th Conference on Security and Privacy in Wireless and Mobile
Networks (WiSec), Miami, FL, May 2019.
[19] E. Coppa, D. C. D’Elia, and C. Demetrescu, “Rethinking Pointer Rea-
soning in Symbolic Execution,” in Proceedings of the 32rd IEEE/ACM
International Conference on Automated Software Engineering (ASE),
Urbana-Champaign, IL, Oct. 2017.
[20] A. Costin, A. Zarras, and A. Francillon, “Towards Automated Classi-
fication of Firmware Images and Identification of Embedded Devices,”
in IFIP International Conference on ICT Systems Security and Privacy
Protection. Springer, 2017, pp. 233–247.
[21] G. Delugré, “Reverse engineering a Qualcomm baseband,” in 28th Chaos
Communication Congress, Berlin, Germany, dec 2011.
[22] U. Ettus, “B210.” [Online]. Available: https://www.ettus.com/all-
products/ub210-kit/
[23] K. Fang and G. Yan, “Emulation-Instrumented Fuzz Testing of 4G/LTE
Android Mobile Devices Guided by Reinforcement Learning,” in
Proceedings of the 23th European Symposium on Research in Computer
Security (ESORICS), Barcelona, Spain, Sep. 2018.
[24] Glyph & Cog, LLC, “pdftotext(1) - Linux man page,” https://linux.die.
net/man/1/pdftotext.
[26]
[25] N. Golde and D. Komaromy, “Breaking Band: reverse engineering and
exploiting the shannon baseband,” REcon, 2016. [Online]. Available:
https://comsecuris.com/slides/recon2016-breaking_band.pdf
I. Gomez-Miguelez, A. Garcia-Saavedra, P. D. Sutton, P. Serrano,
C. Cano, and D. J. Leith, “srsLTE: An Open-Source Platform for
LTE Evolution and Experimentation,” in Proceedings of the 10th ACM
International Workshop on Wireless Network Testbeds, Experimental
Evaluation, and Characterization (WiNTECH), New York City, NY, Oct.
2016.
[27] N. Group et al., “A linux system call fuzzer using TriforceAFL,” https:
//github.com/nccgroup/TriforceAFL, 2017.
[28] W. Hengeveld, “IDA processor module for the hexagon (QDSP6v55)
processor,” https://github.com/gsmk/hexagon, 2013.
[29] C. Heres, A. Etemadieh, M. Baker, and H. Nielsen, “Hack all the things:
20 devices in 45 minutes,” in DEFCON, 2014.
[30] S. Hex-Rays, “IDA FLIRT Technology: In-Depth,” https://www.hex-
rays.com/products/ida/tech/flirt/in_depth/.
[31] ——, “IDA: Hex-Rays,” https://www.hex-rays.com/products/ida.
[32] S. Holtmanns, S. P. Rao, and I. Oliver, “User Location Tracking Attacks
for LTE Networks Using the Interworking Functionality,” in Proceedings
of the 15th International Federation for Information Processing (IFIP)
Networking Conference, Vienna, Austria, May. 2016.
[33] X. Hu, C. Liu, S. Liu, W. You, Y. Li, and Y. Zhao, “A Systematic
Analysis Method for 5G Non-Access Stratum Signalling Security,” IEEE
Access, vol. 7, pp. 125 424–125 441, 2019.
[34] S. Hussain, O. Chowdhury, S. Mehnaz, and E. Bertino, “LTEInspector: A
Systematic Approach for Adversarial Testing of 4G LTE,” in Proceedings
of the 2018 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb. 2018.
[35] S. R. Hussain, M. Echeverria, I. Karim, O. Chowdhury, and E. Bertino,
“5GReasoner: A Property-Directed Security and Privacy Analysis Frame-
work for 5G Cellular Network Protocol,” in Proceedings of the 26th
ACM Conference on Computer and Communications Security (CCS),
London, UK, Nov. 2019.
[36] M. Jiang, Y. Zhou, X. Luo, R. Wang, Y. Liu, and K. Ren, “An empirical
study on arm disassembly tools,” in Proceedings of the International
Symposium on Software Testing and Analysis (ISSTA), Online, Jul. 2020.
I. Karim, F. Cicala, S. R. Hussain, O. Chowdhury, and E. Bertino,
“Opening Pandora’s Box through ATFuzzer: Dynamic Analysis of AT
Interface for Android Smartphones,” in Proceedings of the Annual
Computer Security Applications Conference (ACSAC), Dec. 2019.
[37]
[38] H. Kim, D. Kim, M. Kwon, H. Han, Y. Jang, D. Han, T. Kim, and
Y. Kim, “Breaking and Fixing VoLTE: Exploiting Hidden Data Channels
and Mis-implementations,” in Proceedings of the 22nd ACM Conference
on Computer and Communications Security (CCS), Denver, CO, Oct.
2015.
[39] H. Kim, J. Lee, E. Lee, and Y. Kim, “Touching the Untouchables:
Dynamic Security Analysis of the LTE Control Plane,” in Proceedings
of the 40th IEEE Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2019.
[40] M. Lichtman, R. P. Jover, M. Labib, R. Rao, V. Marojevic, and J. H.
Reed, “LTE/LTE-A Jamming, Spoofing, and Sniffing: Threat Assessment
and Mitigation,” IEEE Communications Magazine, vol. 54, no. 4, pp.
54–61, 2016.
[41] H. Lin, “LTE REDIRECTION: Forcing Targeted LTE Cellphone into
Unsafe Network,” in Hack In The Box Security Conference (HITBSec-
Conf), 2016.
[42] D. Maier, L. Seidel, and S. Park, “BaseSAFE: Baseband SAnitized
Fuzzing through Emulation,” in Proceedings of the 13th Conference on
Security and Privacy in Wireless and Mobile Networks (WiSec), Virtual,
Jul. 2020.
[43] Marc Heuse, Heiko Eißfeld, Andrea Fioraldi, and Dominik Maier,
“AFLplusplus (AFL++),” https://github.com/vanhauser-thc/AFLplusplus,
2020.
[44] L. Miras, “Baseband playground,” in Proceedings of the 7th Ekoparty
Security Conference, Buenos Aires, Argentina, Sep. 2011.
[45] G. Miru, “Path of Least Resistance: Cellular Baseband to Application
Processor Escalation on Mediatek Devices,” https://comsecuris.com/blog/
posts/path_of_least_resistance/, 2017.
[46] C. Mulliner, N. Golde, and J.-P. Seifert, “SMS of Death: From Analyzing
to Attacking Mobile Phones on a Large Scale.” in Proceedings of the
20th USENIX Security Symposium (Security), San Francisco, CA, Aug.
2011.
[47] C. Mulliner and C. Miller, “Fuzzing the Phone in your Phone,” in Black
Hat USA Briefings (Black Hat USA), Las Vegas, NV, Jul. 2009.
[48] N. Nikaein, R. Knopp, F. Kaltenberger, L. Gauthier, C. Bonnet,
D. Nussbaum, and R. Ghaddab, “OpenAirInterface: An Open LTE
Network in a PC,” in Proceedings of the 20th Annual international
conference on Mobile computing and networking (MobiCom), Maui,
Hawaii, Sep. 2014.
[49] L. Nuand, “bladeRF.” [Online]. Available: https://www.nuand.com/
bladerf-2-0-micro/
[50] D. A. Ramos and D. Engler, “Under-Constrained Symbolic Execution:
Correctness Checking for Real Code,” in Proceedings of the 24th
USENIX Security Symposium (Security), Washington, DC, Aug. 2015.
[51] M. T. Raza, F. M. Anwar, and S. Lu, “Exposing LTE Security
Weaknesses at Protocol Inter-Layer, and Inter-Radio Interactions,” in
International Conference on Security and Privacy in Communication
Systems. Springer, 2017, pp. 312–338.
[52] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, and
D. Brumley, “Optimizing Seed Selection for Fuzzing,” in Proceedings
of the 23rd USENIX Security Symposium (Security), San Diego, CA,
Aug. 2014.
17
[53] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-
Oriented Programming: Systems, Languages, and Applications,” ACM
Transactions on Information and System Security (TISSEC), vol. 15,
no. 1, Mar. 2012.
[54] D. Rupprecht, K. Jansen, and C. Pöpper, “Putting LTE Security Functions
to the Test: A Framework to Evaluate Implementation Correctness,” in
Proceedings of the 25th USENIX Security Symposium (Security), Austin,
TX, Aug. 2016.
[55] D. Rupprecht, K. Kohls, T. Holz, and C. Pöpper, “Breaking LTE on
Layer Two,” in Proceedings of the 40th IEEE Symposium on Security
and Privacy (Oakland), San Francisco, CA, May 2019.
[56] A. Shaik, R. Borgaonkar, N. Asokan, V. Niemi, and J.-P. Seifert,
“Practical Attacks Against Privacy and Availability in 4G/LTE Mobile
Communication Systems,” in Proceedings of the 2016 Annual Network
and Distributed System Security Symposium (NDSS), San Diego, CA,
Feb. 2016.
[57] A. Shaik, R. Borgaonkar, S. Park, and J.-P. Seifert, “New vulnerabilities
in 4G and 5G cellular access network protocols: exposing device
capabilities,” in Proceedings of the 12th Conference on Security and
Privacy in Wireless and Mobile Networks (WiSec), Miami, FL, May
2019.
[58] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher,
J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, “SoK: (State
of) The Art of War: Offensive Techniques in Binary Analysis,” in
Proceedings of the 37th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2016.
[59] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
Fuzzing Through Selective Symbolic Execution.” in Proceedings of
the 2016 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb. 2016.
[60] D. J. Tian, G. Hernandez, J. I. Choi, V. Frost, C. Raules, P. Traynor,
H. Vijayakumar, L. Harrison, A. Rahmati, M. Grace, and K. R.
Butler, “Attention Spanned: Comprehensive Vulnerability Analysis of AT
Commands Within the Android Ecosystem,” in Proceedings of the 27th
USENIX Security Symposium (Security), Baltimore, MD, Aug. 2018.
[61] G.-H. Tu, Y. Li, C. Peng, C.-Y. Li, H. Wang, and S. Lu, “Control-Plane
Protocol Interactions in Cellular Networks,” ACM SIGCOMM Computer
Communication Review, vol. 44, no. 4, pp. 223–234, 2014.
“URL Anonymized due to vendor’s request.”
[62]
[63] F. Van Den Broek, B. Hond, and A. C. Torres, “Security Testing of
GSM Implementations,” in International Symposium on Engineering
Secure Software and Systems (ESSoS). Springer, 2014, pp. 179–195.
[64] R.-P. Weinmann, “Baseband Attacks: Remote Exploitation of Memory
Corruptions in Cellular Protocol Stacks,” in Proceedings of the 6th
USENIX Workshop on Offensive Technologies (WOOT), Bellevue, WA,
Aug. 2012.
[65] ——, “Baseband exploitation in 2013: Hexagon challenges,” in PACSEC
2013, Tokyo, Japan, 2013.
[66] B. Wojtowicz, “OpenLTE,” An open source 3GPP LTE implementation,
2016. [Online]. Available: http://openlte.sourceforge.net
[68]
[67] H. Yang, S. Bae, M. Son, H. Kim, S. M. Kim, and Y. Kim, “Hiding
in Plain Signal: Physical Signal Overshadowing Attack on LTE,” in
Proceedings of the 28th USENIX Security Symposium (Security), Santa
Clara, CA, Aug. 2019.
I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A Practical Concolic
Execution Engine Tailored for Hybrid Fuzzing,” in Proceedings of the
27th USENIX Security Symposium (Security), Baltimore, MD, Aug. 2018,
pp. 745–761.
J. Zaddach, L. Bruno, A. Francillon, D. Balzarotti et al., “AVATAR:
A Framework to Support Dynamic Security Analysis of Embedded
Systems’ Firmwares,” in Proceedings of the 2014 Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2014.
[69]
[70] M. Zalewski, “American fuzzy lop (AFL),” http://lcamtuf.coredump.cx/
afl, 2017.
[71] Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and L. Sun,
“FIRM-AFL: High-Throughput Greybox Fuzzing of IoT Firmware via
Augmented Process Emulation,” in Proceedings of the 28th USENIX
Security Symposium (Security), Santa Clara, CA, Aug. 2019.
18
CASE STUDIES ON OTHER MIS-IMPLEMENTATIONS
APPENDIX A
E2: Redundant IEs in the SS protocol. We found that
several messages in the SS protocol have redundant IEs, thereby
resulting in unknown mismatches. We believe that it happens
because of blind copy-and-paste; a developer seems to copy the
structure of the RELEASE COMPLETE message in the CS protocol
to implement the REGISTER and RELEASE COMPLETE messages in
the SS protocol. They are almost same; however, the RELEASE
COMPLETE message in the CS protocol has an additional IE called
User-user, which is unspecified in the other two messages.
Such a redundant IE makes the firmware non-compliant with the
specification. In addition, it can cause unintentional behaviors
in the firmware because its handler can receive unexpected
messages. We found this mistake in all models in our dataset.
E4: Incorrect IEI value in the EMM protocol. We also
discovered that the NAS message container IE of the Control
plane service request message in the EMM protocol has an
incorrect IEI, thereby resulting in both missing and unknown
mismatches. Because there is only one missing mismatch and
one unknown mismatch with the same length, we can determine
that the incorrect IEI value is the root cause of those mismatches.
The IE should have 0x67 as its IEI, but 0xff is stored in the
firmware. In fact, the NAS message container IE is used in
other messages as imperative IEs, which do not require an IEI
value. However, when the Control plane service request
message is added in the specification of version v13.6.1, which
is released in August 2016, the IE is first used as a non-
imperative IE with the IEI of 0x67 in the message. Therefore,
this mismatch implies that developers missed changing the IEI
when adding this new message. Since Model H and Model I
do not have the message, they are not affected by this mistake.
E5: Unknown IE in the GMM protocol. We discovered that
the Routing area update accept and Attach accept mes-
sages in the GMM protocol share one unknown non-imperative
IE, whose IEI is 0xB and length is 2 bytes. These messages
have many unimplemented yet non-imperative IEs. We believe
that this buggy IE is one of them with a misconfigured IEI.
This error affects all models except Model H and Model I.
E7: Buffer overflow in the EMM protocol. Similar to E6, the
handler function for the EMM information message in the EMM
protocol mishandled the Network daylight saving time IE.
In the 6 oldest firmware images in our dataset, the handler
copies this IE into a global buffer without checking its length.
This buffer overflow can corrupt nearby configuration variables
and cause unintended behaviors. We found that recent firmware
contains a routine to limit its length to 7 bytes at maximum.
E9: Invalid pointer dereference in the CS protocol. We
found invalid pointer dereference while analyzing START DTMF
ACKNOWLEDGE message in the CS protocol. To decode this
message, the L3 decoder function first initializes a pointer
with -1 and later sets it to other data. If the message has
invalid IEs, this pointer can hold the initial value (i.e., -1) until
dereferencing. Therefore, the decoder should check whether the
pointer has a valid address before dereferencing. Unfortunately,
it fails to check the pointer properly, and it compares the pointer
with NULL instead of -1. Therefore, the firmware accesses
memory at -1, which results in access violation. This bug
is discovered in all models (i.e., from Model A to Model I).