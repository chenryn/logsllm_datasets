### Inconsistencies and Hidden Methods

When an event is inconsistent with previous events, the methods to access it are hidden, undocumented, and not set in any of our observed attacks.

### Application Limitations

Our design and implementation impose certain limitations on applications. For example, since unrestricted use of reflection can allow an application to bypass secure libraries, we require developers who use reflection to annotate their applications accordingly. Additionally, a human verifier must inspect any usage of reflection. While alternative static analysis approaches may remove such restrictions, methods without OS support are more likely to face these challenges.

### 6. Evaluations

We demonstrate the feasibility of integrating our implementation with real applications and test its effectiveness against malicious code. We also evaluate the performance impacts of different random check frequencies and how frequently applications create and modify events in practice.

#### 6.1 Aiding Good: Porting Applications

To evaluate the development impact, we integrate AUDACIOUS into existing applications. Our findings include:

- Integrating ACGs slightly increases code size in some applications but decreases it in others.
- Some applications already have ACG-like UI elements, making integration straightforward.
- Flexibility in permission models is desirable, as some applications have permission uses for which ACGs may not be ideal.
- Increased customization and interaction with ACGs benefit applications.
- Following best practices can reduce the burden of information flow analysis.

##### 6.1.1 Applications

We integrated AUDACIOUS into five open-source applications from the F-Droid repository, selected for their non-trivial use of permissions and varying complexity. These applications are summarized in Table 3.

##### 6.1.2 Development Impact

We evaluated the impact of integrating AUDACIOUS in three areas: the library, event analysis, and information flow analysis. We used SLOCCount to measure Java LOC. The results are summarized in Tables 4 and 5.

- **ACG Library**: Integrating the library requires minimal code changes. Three out of five applications already include unverified UI elements that function like ACGs, leading to a decrease in code size. For the two applications without ACG-like UI elements, the code size increased only slightly.
- **Event Analysis**: The event analysis takes at most 24 seconds and reports no false positives in four out of five applications. Two false positives were reported in the `rotateTouchEvent` method of a map class in a dependency of WikiJourney, which is not malicious behavior and can be verified by a human.
- **Information Flow**: The annotation burden is low for simple applications but higher for complex ones. Pinpoi, for instance, has a particularly complex flow due to its heavy use of Intents. We used a tool in SPARTA to infer annotations, which generated 487 annotations. Overall, the developer is best positioned to reduce this burden.

##### 6.1.3 Lessons and Observations

- **Encapsulation of Existing Behavior**: When applications already have ACG-like UI elements, integrating the library simply involves swapping those elements, reducing code size. Even when ACG-like elements are absent, the increase in code size is minimal.
- **Flexibility of Permission Models**: All five applications have permission uses where user-driven access control may not be ideal. For example, Speed of Sound saves songs while the user is driving, but the user cannot interact with the application at that time.
- **Customization and Interaction**: Applications benefit from increased customization and interaction with ACGs. The original model for ACGs [23] introduced three types: one-time, session, and permanent. However, applications often require further customization and interaction, such as configuration, communication, and updates.

### 6.2 Fighting Evil: Security Analysis

We tested our tool against various classes of attacks outlined in Section 3. We created a testing framework and implemented 57 attacks in a test application, EvilApp. AUDACIOUS prevented 55 of these attacks, with the remaining two limited by lack of OS support.

- **UI Modification Attacks**: These attacks change the ACG UI after creation to trick the user. Library design decisions prevent these attacks from having any effect.
- **Event Forgery Attacks**: These attacks create or modify events. The static event analysis catches all such attacks.
- **Cover Attacks**: These add application-level elements that overlap with the ACG UI. The bitmap check stage of the dynamic UI context check catches these.
- **Tapjacking Attacks**: These use system-level pop-up notifications (Toasts) to cover the ACG UI. The dynamic UI context check catches all but one attack, which partially obscures the ACG UI due to a known Android bug.
- **Replay Attacks**: These capture events from the ACG location and schedule them for later. The UI consistency stage of the dynamic UI context check catches these.
- **Bait-and-Switch Attacks**: These cover the ACG UI and then, at the last minute, put the ACG UI on top. The random bitmap check stage of the dynamic UI context check catches all but one attack, which uses a Toast.
- **Resource Flow Attacks**: These circumvent the library by calling resource-accessing APIs directly. AUDACIOUS catches these attacks statically using SPARTA.

### 6.3 Random Check Frequency

AUDACIOUS uses random checks to ensure the user has enough time to perceive the UI before interacting with an ACG. Smaller frequencies provide better protection against timing-based attacks but add performance overhead. More sensitive ACGs, such as those handling payment methods, may use smaller frequencies at the cost of performance.

We evaluated the performance impact of different validation frequencies on Solar Compass. Over 40 seconds, we toggled the LocationACG button 30 times and computed the total time from the beginning of the first event to the end.