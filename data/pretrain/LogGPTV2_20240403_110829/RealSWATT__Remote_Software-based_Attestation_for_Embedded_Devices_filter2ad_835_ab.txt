10, 19, 40] and sensor networks [53], as they offload the verification
of the device (prover) to an external party (verifier).
In a typical attestation protocol, the verifier sends a challenge to
the prover who responds with a message that indicates a measure-
ment of the state of the prover device, usually software state. The
main challenge in attestation schemes is to obtain trustworthy mea-
surements about the prover’s state. There are different approaches
to achieve this: (1) hardware-based solutions use trusted computing
modules [2], (2) hybrid attestation uses custom hardware exten-
sions [10, 19, 40], and (3) software-based attestation (SWATT) [46]
does not need any hardware support. In the following we focus on
software-based attestation, in the related work in Section 9, we also
elaborate on other attestation approaches.
Software-based attestation (SWATT) can be used on commod-
ity hardware and legacy devices. However, SWATT poses strict
timing assumptions on the response of the prover and the verifier.
SWATT builds upon the core assumption that an attacker cannot
replace or alter the attested device. Hence, the verifier relies on the
integrity of the prover’s computing capabilities, i.e., the memory
and processing speed cannot be manipulated. Based on these as-
sumptions the verifier precisely measures the response times for
the attestation requests, this includes the time it takes for the prover
to compute the attestation report as well as the communication
overhead between prover and verifier. If the response times differ
from the expected values, the prover device is assumed to be com-
promised. Furthermore, it is important that all memory, both used
and unused memory, is covered in the attestation. We discuss these
requirements in the Security Considerations in Section 8.
These assumptions are however, very strong and pose many
hard requirements on the implementation of attestation logic and
communication channels [7, 46]. In the real world an attacker can
circumvent the attestation in various ways [12].
3 PROBLEM STATEMENT
Detecting software attacks on devices in a connected system is a
highly challenging task, in particular if the adversary has gained full
control over a subset of devices. Even more so, if the connected de-
vices have high requirements with respect to their timing behavior
due to the execution of realtime tasks.
Existing solutions to detect and report attacks in connected sys-
tems are either heuristic [23] or pose assumptions that are unreal-
istic for many critical realtime tasks [46]. Monitoring solutions at
the network level are heuristic in nature and suffer from high false-
positive rate [63]. Hardware-assisted security mechanisms [34]
rely on extensions and components, such as a TEE architecture
or cryptographic co-processor (TPM), that are not available is the
vast majority of deployed legacy embedded devices. Software-based
attestation approaches target legacy devices that cannot provide a
trust anchor; however, their approach to ensure integrity of the mea-
surement function inherently conflicts with the execution timing
demands of realtime application: Software-based attestation asserts
integrity of the measurement procedure by demanding all system
resources, to prevent the adversary from using free resources, while
precisely measuring its execution time. Beside the inherent conflicts
when applied to realtime systems, software-based attestation is the
only option (to enable heuristic detection of complete software
compromise) for legacy systems.
A secure software-based attestation for realtime embedded sys-
tems poses a number of challenges on the underlying design and
implementation:
Challenge 1: A secure attestation scheme — without any trust an-
chor — running tasks with realtime execution requirements needs
to overcome the inherent conflict between realtime execution guar-
antees and integrity guarantees for the measurement procedure to
capture the prover device’s state.
Challenge 2: Allowing the measurement procedure to respect the
realtime demands of the system’s tasks could be easily misused by
an adversary, e.g., to restore a benign state while the measurement
is performed [11]. Therefore, the measurement procedure must be
able to capture the system state independent of the execution of
realtime tasks.
Challenge 3: Permitting the execution of potential malicious tasks
in parallel to the measurement procedure provides the adversary
with the option to dynamically adapt and move to itself between
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2892memory areas, always restoring the currently measured section of
memory.
Challenge 4: In remote scenarios software-based attestation faces
the challenge to account for the jitter in network transmission,
which prevents the verifier from precisely measuring of the ex-
ecution time: To avoid false positives the verifier has to tolerate
considerable time gaps, which might be exploited by an adversary
to manipulate the measurement and hide its existence on the prover
device.
Challenge 5: Remote attestation, and in particular software-based
attestation, face the Time-of-Check Time-of-Use problem (TOC-
TOU) [64], i.e., an attestation report only presents a snapshot of
the prover’s state. The verifier learns no information whether the
prover has been compromised (and restored) before the attestation
or will be immediately after.
RealSWATT overcomes these challenges by executing the mea-
surement procedure on a dedicated CPU core, while allowing the
continuous execution of realtime tasks on another CPU core. Our
approach deploys novel techniques to tackle all challenges (C1–C5)
in order to design and implement a secure attestation solution.
4 SYSTEM AND THREAT MODEL
RealSWATT attestation is designed to work with legacy IoT devices
in real-world network environments. The network architecture is
sketched in Figure 1. It targets scenarios with untrusted embedded
systems running critical realtime tasks that should be attested by
the remote verifier.
4.1 System Model
We consider a system of connected low-end embedded devices ex-
ecuting realtime tasks. We assume an untrusted system running
tasks with realtime deadlines, the so-called prover, which is being
attested by the remote verifier. Furthermore, we assume that the
prover is running a realtime operating system (RTOS), which en-
sures correct scheduling and proper realtime operation. The RTOS
is no mandatory requirement, however, it simplifies the integration
of the RealSWATT framework into legacy devices. Without an op-
erating system, the attestation logic has to be manually integrated
and ensured, that the added methods do not influence the other
tasks running on the device.
The system features a multicore processor, of which one core is
not utilized and not required for correct realtime operation. The
attested device is connected to a remote verifier via a wired or
wireless network. There are no strict timing requirements towards
the connection. Bandwidth and timing requirements are elaborated
in Section 7.
All devices of the network are known to the verifier device. They
can communicate to each other and the verifier directly, however,
all communication with other entities is routed through a gateway.
We assume an IoT network structure consisting of multiple IoT
devices that are being attested, a trusted verifier, and an IoT gate-
way for external communication, as sketched in Figure 1. The IoT
gateway monitors external communication to detect abnormalities
to prevent offloading of attestation tasks. Offloading remote attes-
tation tasks to an external party requires frequent communication
Figure 1: Architecture of the Realtime-Attestation Approach.
to a dedicated remote instance which clearly differs from normal
behavior of IoT devices. Monitoring traffic by its origin, goal, packet
size, frequency, or content is a common method to secure internal
or dedicated IoT networks. For example, the National Institute of
Standards and Technology (NIST) suggests to use such gateways
to secure communication of embedded devices [9, 54]. In recom-
mendation ITU-T Y.2060 [33], the International Telecommunication
Union (ITU) also considers such gateways for IoT networks.
The configuration manager, as shown in Figure 1, is a common
component in modern IoT architectures. It keeps track of the de-
vices and their applied configuration. Configuration management
software for IoT devices is commercially available [50]. Recent re-
search also considers the use of such a configuration manager to
set and organize security features on IoT devices on demand [14].
With the help of such a configuration manager, attestation can be
enabled on large scale without the need to setup attestation on each
device individually. A further benefit is that the configuration can
be easily provided to a verifier and included into the attestation
reports.
4.2 Threat Model
The adversary can compromise all embedded devices in the net-
work via software attacks. The adversary knows the benign state
and configuration of every device. It can observe all network com-
munication.
The adversary is able to modify program as well as configuration
data. Furthermore, the adversary can compromise an embedded
device at each point in time as well as restore a devices benign state
at any point in time.
The verifier and the gateway are assumed to be immune, i.e., the
adversary cannot compromise them. All communication, except
between devices and/or the verifier, are routed through the gateway.
The adversary cannot introduce additional devices into the network.
The devices’ hardware cannot be modified or manipulated by the
adversary, e.g., by a more powerful device with more memory or a
faster processor.
5 CONCEPT OF REALSWATT ATTESTATION
Our design introduces two new concepts: (1) Using a separate pro-
cessor core for attestation to separate the normal operation and the
attestation tasks from each other, and (2) Continuous attestation,
i.e., attesting the system continuously during runtime. Multicore
processors have many advantages in processing speed and energy
consumption [31] and are becoming increasingly widespread [18],
even if the development of realtime applications for multicore pro-
cessors is challenging [45, 57]. We leverage a multicore processor
IoT devicesIoT gatewayConfigurationmanagerWANSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2893Figure 2: A system with multiple processor cores can use one core
for realtime tasks and one core to run the attestation in parallel.
Figure 3: Merkle–Damgård construction of hash values. The process
cannot be parallelized for speedup.
design, which is nowadays commonly available on popular IoT
platforms, but often not fully utilized.
We observed that in many IoT devices and especially realtime
systems with multicore architecture not all cores are fully utilized.
In some specific application areas, e.g., avionics systems, there are
even regulations that limit the use of additional cores for realtime
operation [13]. In realtime computing, there exist several security
frameworks that use a separate processor core of a multicore system
to implement new security features [47, 61]; for instance, Yoon
et al. [61] utilizes it for intrusion detection and other follow-up
works leverage it to cover memory usage [62] and analyze system
call traces [60].
Software-based attestation (SWATT) relies on precise prediction
of the response times of the attested device. The verifier sends a
challenge and measures the response time of the prover which
includes the execution time of the attestation and the transmission
time. Hence, SWATT also relies on direct and undisturbed commu-
nication between the prover and the verifier. That is, if the response
to an attestation request is delayed, the prover cannot distinguish
between a false alarm caused by a transmission delay and an attack.
For the latter the delay is caused by the attacker covering her traces.
However, the assumption of undisturbed communication is unre-
alistic in practice. Nowadays, IoT devices communicate via wired or
wireless networks that are shared with many other devices. These
devices influence each others transmissions; especially in wireless
network like Wi-Fi. Wireless networks inherently use a shared
medium that is not only shared between the devices within the
network, but also with all other devices using the same frequency
band. Hence, traditional software-based attestation [46] cannot be
applied to these communication networks. We tackle this limitation
by developing continuous attestation that eliminates the transmis-
sion time from the timing measurements of the attestation. We
leverage this by continuously running the attestation, such that
the verifier can safely assume that at all time the prover is running
an attestation. To do so, we use a dedicated processor core for the
attestation.
Separate processor core for attestation. Figure 2 shows the dis-
tribution of the realtime tasks and the attestation on different pro-
cessor cores. The RealSWATT framework requires at least two
processor cores but supports more cores without any changes. A
single processor core is selected to execute the attestation. Both the
attestation runs and realtime jobs are time-critical. Missing timing
deadlines for the normal operation results in device malfunction as
realtime properties are not met, timing problems for the attestation
make the verification fail, as the verifier assumes the device to be
compromised as it does not respond in time.
Continuous attestation. As a dedicated processor core can solely
be used to perform the attestation, this allows to introduce contin-
uous attestation, where attestation runs constantly in background.
In traditional software-based attestation (SWATT) [46], integrity of
the prover code is based on the response between sending the at-
testation request and receiving the attestation report of the prover,
where the attestation request contains a nonce to ensure freshness
and preventing replay attacks. As a consequence, the transmission
time between verifier and prover needs to be included in the timing
assumptions, which makes SWATT impractical for all communica-
tions with varying transmission times, e.g., wireless networks or
the Internet.
Our continuous attestation relaxes these timing assumptions
as the attestation is constantly running so that even though the
response is delayed, the verifier can safely assume that the prover
has been running the attestation task. In RealSWATT, the verifier
sends a new nonce while the prover is not yet finished calculating
the attestation report for the verifier (Section 5.2). So, the prover can
continue with the next attestation request directly after the last one
was finished. We call this attestation method continuous attestation
as it removes the gap between attestation runs. In contrast to the
communication delay, the time required for the attestation can
be determined precisely. In Section 7, we measure the runtime of
attestation processes.
In the following, we describe the challenges that emerge when
implementing a continuous attestation scheme.
5.1 Design Considerations
While the usage of a separate processor core for remote attesta-
tion seems like a straightforward solution, it requires careful de-
sign decisions to ensure coverage of a variety of security aspects.
Software-based attestation has many strict requirements that have
to be fulfilled to reliably verify the prover besides the accurate
timing of the responses. It is of utmost importance that an attacker
cannot accelerate the attestation run itself. There are multiple ways
how an attacker could speedup the attestation. Each of them has to
be addressed accordingly.
Parallelization. An attacker can potentially use all processor cores
for attestation and ignore realtime-critical jobs, while the genuine
attestation can only use a single processor core. If the attacker is