also marks two events; one for composing the message and
one for sending the email to LT. In the second part of the
process when a message is received from LT we use a pattern
matching construct: let (=hashM1,=KeyRequest,=receiver)
= getmess(receipt) in ... A pattern (p1, p2, ..., pn) matches a
tuple of arity n, when p1, ..., pn match the components of the
tuple. So, the destructor application of Step 4/5.5 succeeds
if and only if the receipt from LT matches the expected key
request from the receiver where LT’s signature on the receipt
was veriﬁed in the previous step. Once this match succeeds,
processS executes the event endLTDeliveryReceipt concluding
that the given receiver has read the email (weak fairness).
The process then forwards this delivery receipt to Schannel
so that another session of S can get it. We assume that this
is a fair execution so that all sessions of S can get delivery
receipts from all receivers; i.e., from all list subscribers.
The process processLT, in the ﬁrst part, accepts a message
from the sender after verifying the sender’s signature on the
message. processLT then forwards the message on Rchannel
In the second part, pro-
after signing the sender’s name.
cessLT accepts a message from the receiver and veriﬁes that
it is a valid key request. The process then transforms the
shared key (that was used to encrypt the email message)
so that it is encrypted with the receiver’s public key and
sends the key delivery message on Rchannel. The process
also composes a delivery receipt for the sender by co-signing
the receiver’s key request and sends the delivery receipt on
Schannel. As the process executes various steps of the pro-
tocol it triggers events to denote success in those steps.
The process processR, in the ﬁrst part, accepts a message
from LT after verifying the signature on the message. The
process then veriﬁes that this is a new email by verifying
the sender’s signature on the encrypted email message. The
process then composes a key request by signing the hash
and sends the key request on LTchannel. In the second part,
the process accepts a message from LT after verifying the
signature on the message. processR then veriﬁes that the
key delivery corresponds to the key request, decrypts the
emails message, and veriﬁes the sender’s signature on the
plaintext. If the key delivery does not correspond to the key
request, the process forwards it on Rchannel so that other
sessions of R can have the chance to get it. As the process
executes various steps of the protocol it triggers events to
denote success in those steps.
A.2 Results: Veriﬁcation of Weak Fairness
The correctness property for weak fairness is that a re-
ceiver Ri gets message m if and only if S gets a receipt. The
proof should be such that, if S goes to a judge, then the
judge can deﬁnitely state that Ri has received the message.
This property holds only when the delivery of messages is
guaranteed on the channels between S and LT, R and LT, and
between S and Judge. The following deﬁnitions are from [1].
Deﬁnition 2 A message m sent on a channel c reaches its
destination if and only if it is eventually received by an input
on channel c in the initial process P0 or a process derived
from it. If the adversary receives the message, it reemits the
message on channel c.
Deﬁnition 3 Fairness Hypothesis. If a reduction step can
be inﬁnitely often executed, then it will eventually be exe-
cuted. If a message m is sent on channel c, and some inputs
on channel c reemit it while some don’t, then m will even-
tually be received by an input that does not reemit it.
These deﬁnition of message delivery and fairness hypoth-
esis cannot be taken into account by the veriﬁer so the weak
fairness property cannot be proved in a fully automatic way.
However, a correspondence assertion that constitutes the
most important part of the proof can be proven using the
veriﬁer. That is, instead of proving that if some event e1
has been executed then some event e2 must have been exe-
cuted, the veriﬁer shows that some event e2 must have been
executed. A short manual proof is then needed to show that
e2 will be executed after e2.
The following process represents the judge.
private free JudgeChannel.
let processJudge =
in(JudgeChannel,(SnameM6,descM6,mesgM6,skeyM6,sencM6,
aencInM6,signedMesg,signedHashM6,signedM6In));
(* Verify sender’s signature on message and hash *)
let hashM6 = hash((SnameM6,descM6,sencM6)) in
let (=SnameM6,=descM6,=mesgM6) =
checksign(signedMesg,verSKey) in
let (=hashM6,=Give) = checksign(signedHashM6,verSKey) in
(* Verify LT’s signature on receiver’s key request *)
let (request,=aencInM6,=DeliveryReceipt,receiver) =
checksign(signedM6In,verLTKey) in
(* Verify receiver’s request *)
let (=hashM6,=KeyRequest,=receiver) =
checksign(request,verRKey) in
(* Verify that the transformation was done correctly; if so, the
judge says that receiver got mesgM6. *)
let (=mesgM6) = sdecrypt(sencM6,skeyM6) in
let (=aencInM6) = encrypt(skeyM6,eRKey) in
event JudgeSays(Delivered,receiver,mesgM6).
In this process, the judge receives a certiﬁcate from S and
veriﬁes it. If the veriﬁcation succeeds, the judge says that
the receiver has received the message. At the end of the
process processS, S sends to the judge:
out(JudgeChannel,(Sname,desc,mesg,skey,sencM1,aencM1,aencIn,
signedMesg,signedHashM1,signedM5In);
The requirement for weak fairness translates into the fol-
lowing two propositions; the ﬁrst in which the receiver at-
tempts to cheat (i.e. Ri is included in the adversary) and
the second in which the sender attempts to cheat (i.e. S is
included in the adversary).
Proposition 1. Assume that messages from LT sent to

S and from S sent to Judge reach their destination. If Ri
has received message m, then the judge says that Ri has
received m.
sign((hash((Sname,desc,sencrypt((Message(Mx),sign((Sname,desc,
Message(Mx)),sigSKey)),Mk))),Give),sigSKey))
are executed in this trace for some terms Mk, Mp, Mq.
Here R is included in the adversary; i.e., R tries to get a
message without S obtaining the corresponding delivery re-
ceipt. The process for R then becomes:
out(c, dRKey); out(c, sigRKey); in(Rchannel, m); out(LTchannel,m);
! in(Rchannel,m2); event endSMesg(m2).
The modiﬁed process now reveals all the information avail-
able to R. The adversary can now execute the event endSMes-
g(m2) after obtaining message m2 and sending it on c. Writ-
ing P0 for the resulting process that represents the whole
system, the proposition can be more formally stated as:
Proposition 1’ Assume that the messages from LT sent
on Schannel and from S sent on JudgeChannel reach their
destinations. Let Init = { Sname, Schannel, JudgeChannel,
LTname, LTchannel, c, desc }. For any Init-adversary Q,
if the event endSMesg( Message(Mx)) is executed in a re-
duction trace of P0|Q for some term Mx, then the event
JudgeSays(Delivered, Mx, Message(Mx)) is executed in all
continuations of this trace.
In processLT we have deﬁned an event beginLTDeliveryRe-
ceipt( LTname, sign((signedRM5, aencM4, DeliveryReceipt,
receiver), sigLTKey))) to note that LT has sent the receipt to
S. In processS we have deﬁned an event beginSGive(Sname,
desc, sencM1, aencM1, signedHashM1) to note that S is ready
to send the message to LT and obtain a receipt.
Automatic part of the proof: The tool was invoked
with the query endSMesg(Message(x)), to determine under
which conditions an instance of the corresponding event may
be executed. The tool then returns a clause after computing
solveP0,Init(endSM esg(M essage(x))) of the form:
begin:beginLTDeliveryReceipt(LTname,sign((sign((hash((Sname,
desc,sencrypt((Message(px),sign((Sname,desc,Message(px),
sigSKey)),pk))),KeyRequest,pq),sigRKey), encrypt(pk,pq),
DeliveryReceipt,pq),sigLTKey)) ∧
begin:beginSGive(Sname,desc,sencrypt((Message(px),sign((Sname,
desc,Message(px),sigSKey)),pk),encrypt(pk,eLTKey),
sign((hash((Sname,desc,sencrypt((Message(px), sign((Sname,
desc,Message(px)), sigSKey)),pk))),Give),sigSKey)) ∧
H → endSMesg(Message(px))
for some patterns px, pq and some hypothesis H. So, by
Theorem 1 if endSMesg(Message(px)) is executed in a trace
of P0—Q then the events
beginLTDeliveryReceipt(LTname,sign((sign((hash((Sname,desc,
sencrypt((Message(Mx),sign((Sname,desc,Message(Mx),sigSKey)),
Mk))),KeyRequest,Mq),sigRKey),encrypt(Mk,Mq),
DeliveryReceipt,Mq),sigLTKey))
Manual part of the proof: Since LT executes beginLTKey-
Delivery(LTname, sign((signedRM5, aencM4, DeliveryReceipt,
receiver),sigLTKey) as proved above,
it will then execute
out(Schannel, (LTname, sign( (signedRM5, aencM4, Deliv-
eryReceipt, receiver), sigLTKey)). This message will be re-
ceived by an input on Schannel from P0 (we assume that
messages reach their destination). In fact, this message will
be received by a session of S that does not reemit it (by the
fairness hypothesis). Such a session successfully checks the
signed receipt and sends it to the judge on JudgeChannel.
The message will be received by the input on processJudge,
which will check it successfully (the check always succeeds
when S’s check succeeds). processJudge will then execute
JudgeSays(Delivered, Mx, Message(Mx)).
Proposition 2. Assume that messages sent from L/T
If the judge says that Ri has re-
reach their destination.
ceived m, then Ri has received m.
Here S is included in the adversary as it may try to get the
judge to say that R has received a message it does not have;
i.e., processS is simply out(c, sigSkey); out(c, dSkey).. Writ-
ing P0 for the resulting process that represents the whole
system, the proposition can be more formally stated as:
Proposition 2’ Assume that messages from LT reach their
destination. Let Init = {Sname, Schannel LTname, LTchan-
nel, JudgeChannel, c, desc }. For any Init-adversary Q,
if JudgeSays(Delivered, Rname, Mm) is executed in a re-
duction trace of P0|Q for some term Mm, then the event
endSMesg(Message(Mm)) is executed in all continuations of
this trace.
In processR we have deﬁned an event beginRKeyRequest(sign
((hash(Sname,desc,sencM1)),sigRKey)) to note that R has re-
ceived the encrypted message and wants to obtain the de-
In processLT we have deﬁned an event be-
cryption key.
ginLTKeyDelivery(LTname, sign((aencM4,hashInM2,KeyDeliv-
ery,receiver),sigLTKey)) to denote that LT sends the key to R.
Automatic part of the proof: We invoked the veriﬁer
with the query JudgeSays(Delivered,Rname,m). The tool
then computed a set of clauses solveP0,Init(JudgeSays(Del−
ivered, Rname, m)) and returns a clause of the form:
begin:beginLTKeyDelivery(LTname,sign((encrypt(py,eRKey),
hash((pw,pz,sencrypt(m,py))),KeyDelivery,Rname),sigLTKey)) ∧
begin:beginRKeyRequest(sign((hash((pw,pz,sencrypt(m,py))),
KeyRequest,Rname),sigRKey)) ∧
H → end:JudgeSays(Delivered,Rname,m)
for some patterns py, pw, pz and some hypothesis H. There-
fore, by Theorem 1, if the event JudgeSays(Delivered, Rname,
Mm) is executed in a reduction trace of P0—Q for some term
Mm, then the events
beginSGive(Sname,desc,sencrypt((Message(Mx),sign((Sname,
desc,Message(Mx),sigSKey)),Mk),encrypt(Mk,eLTKey),
beginLTKeyDelivery(LTname,sign((encrypt(My,eRKey),
hash((Mw,Mz,sencrypt(Mm,My))),KeyDelivery,Rname),sigLTKey))

beginRKeyRequest(sign((hash((Mw,Mz,sencrypt(Mm,My))),
KeyRequest,Rname),sigRKey))
some terms My, Mw, Mz.
are executed in this trace for
Manual part of the proof: After LT executes event
beginLTKeyDelivery(LTname, sign((aencM4, hashInM2, Key-
Delivery, receiver), sigLTkey)) it will execute out(Rchannel,(L-
Tname, sign ((aencM4, hashInM2, KeyDelivery, receiver), sigL-
Tkey))). This message reaches its destination, so it will
be received by an input derived from P0. Since the value
of receiver must correspond, the session of R that receives
this message is also the one that executed beginRKeyRe-
quest(sign((hash(Sname, desc, sencM1)), sigRKey)). This ses-
sion will then execute endSMesg(Message(Mm)).
B. CMLP ENCRYPTION SCHEME
Theorem 1 - Let E = (IGen, U Gen, AEnc, ADec, Γ) be
the CMLP encryption scheme. E is CPA secure against the
List Server and any Probabilistic Polynomial Time (PPT)
adversary A, if El Gamal is CPA secure against such adver-
saries.
Deﬁne,
SuccLT,E
Prb = ˆb
def
=
(g, p, q, KLM , gKLM , KL/T , gKL/T ) ← IGen(1k),
(Ku, Ku) ← U serGen(1k, KL/T , KLM ),
b ← {0, 1}, (m0, m1) ← L/T (gKu , Ku),
ˆb ← L/T (gKu , Ku, EncgKu (mb))
Then E is CPA (Chosen Plaintext Attack) secure against
L/T if |SuccL/T,E − 1
2| is negligible for L/T . A similar for-
mulation can be made for other adversaries with slight no-
tational changes.
Proof: We have two types of adversaries to consider: the
L/T and users outside the list. (List subscribers and LM
receive emails from the sender, and, therefore, are not ad-
versaries.) We ﬁrst consider L/T and assume that it can
break the CMLP encryption scheme E. Then |SuccL/T,E− 1
2|
is non-negligible. Based on L/T ’s algorithm to break E,
we create a probabilistic, polynomial time (PPT) algorithm
B to mount a successful chosen plaintext attack against
the standard El Gamal encryption scheme. However, our
premise is that El Gamal is CPA secure. This fact will
provide the contradiction to our assumption that L/T can
mount a successful CPA attack against E.
We note that L/T has knowledge of multiple proxy keys.
Intuitively, we see that L/T cannot decrypt any e-mails with
these keys, and cannot gain any knowledge of the list key
KLK because its view of the proxy keys can be made con-
sistent with any value of KLK . However, we formally prove
that L/T cannot break E without breaking El Gamal. To
prove this we use the idea that an adversary can simulate
the role of LM and subscribers since all that L/T receives
from them are randomly chosen integers.
An oracle executes IGen and U Gen with L/T to gener-
ate private and proxy keys KLM , KL/T , Ku, and Ku. The
oracle then gives B keys KLM and gKu (where gKu is the
El Gamal challenge public key). B then simulates the sub-
scribing and unsubscribing of (polynomial many) users for
L/T by repeated execution of U Gen and sending of “unsub-
scribe” messages. L/T now chooses two messages (m0, m1)
to challenge the security of our encryption scheme E. B
considers these messages as the challenge to standard El
Gamal and receives the challenge EncgKu (mb) from a left-
right oracle. This EncgKu (mb) = AEncgKu (mb) challenge
is forwarded to L/T who has a distinguisher able to deter-
mine b with probability greater than .5 by the assumption
that |SuccL/T,E − 1
2| is non-negligible. However, this is a
contradiction to the assumption that El Gamal is CPA se-
cure. Therefore, if El Gamal is CPA secure, our encryption
system E is CPA secure against L/T .
We now consider adversaries outside of the list. It is triv-
ial to see that outsiders would have to break El Gamal to
decrypt a message. This is because both messages from the
sender to L/T and messages from L/T to the receivers are
encrypted with valid El Gamal keys which are unknown in
part or whole to any outsider. The formal proof is similar
to the previous one. The main diﬀerence is that an outsider
does not participate in the protocol at all. In fact, the al-
gorithm B simply simulates an entire CMLP system for the
adversary giving him access to the communications and to
all public-keys. At some point in time the adversary breaks
E, and we can show that B can break El Gamal for the same
messages.
