# 命名容器
命名容器有两个很好的理由:便利性和自动化的可能性:
*   方便，因为对容器进行按名称寻址的操作比检查哈希或自动生成的名称更简单
*   自动化，因为有时我们希望依赖于容器的特定命名
例如，我们希望拥有相互依赖的容器，并且希望一个容器链接到另一个容器。因此，我们需要知道他们的名字。
要命名容器，我们使用`--name`参数:
```
$ docker run -d --name tomcat tomcat
```
我们可以(通过`docker ps`)检查容器是否有一个有意义的名称。此外，因此，可以使用容器的名称执行任何操作，例如:
```
$ docker logs tomcat
```
请注意，当容器被命名时，它不会失去其身份。我们仍然可以像以前一样，通过它的自动生成的散列标识来寻址容器。
The container always has both ID and name. It can be addressed by any of them and both of them are unique.
# 标记映像
映像可以被标记。我们已经在创建自己的映像时做到了这一点，例如，在构建`hello-world_python`映像的情况下:
```
$ docker build -t hello-world_python .
```
`-t`标志描述映像的标签。如果我们不使用它，那么映像将在没有任何标签的情况下构建，因此，为了运行容器，我们必须通过它的标识(散列)来寻址它。
映像可以有多个标签，它们应该遵循命名约定:
```
/:
```
标签由以下部分组成:
*   `registry_address`:注册表或别名的 IP 和端口
*   `image_name`:构建的映像名称，例如`ubuntu`
*   `version`:任何形式的映像版本，例如 16.04，20170310
我们将在[第 5 章](05.html)、*自动化验收测试*中介绍 Docker 注册管理机构。如果映像保存在正式的 Docker Hub 注册表中，那么我们可以跳过注册表地址。这就是为什么我们运行了没有任何前缀的`tomcat`映像。最后一个版本总是被标记为最新的，也可以跳过，所以我们运行了没有任何后缀的`tomcat`映像。
Images usually have multiple tags, for example, all four tags are the same image: `ubuntu:16.04`, `ubuntu:xenial-20170119`, `ubuntu:xenial`, and `ubuntu:latest.`
# Docker 清除
在本章中，我们创建了许多容器和映像。然而，这只是你在现实生活场景中看到的一小部分。即使容器目前没有运行，它们也需要存储在 Docker 主机上。这可能会很快导致超出存储空间并停止机器。我们如何解决这个问题？
# 清理容器
首先，让我们看看存储在我们机器上的容器。要打印所有容器(无论其状态如何)，我们可以使用`docker ps -a`命令:
```
$ docker ps -a
CONTAINER ID IMAGE  COMMAND           STATUS  PORTS  NAMES
95c2d6c4424e tomcat "catalina.sh run" Up 5 minutes 8080/tcp tomcat
a9e0df194f1f ubuntu:16.04 "/bin/bash" Exited         jolly_archimedes
01bf73826624 ubuntu:16.04 "/bin/bash" Exited         suspicious_feynman
078e9d12a1c8 tomcat "catalina.sh run" Up 14 minutes 0.0.0.0:32772->8080/tcp nauseous_fermi
0835c95538ae tomcat "catalina.sh run" Created        distracted_heyrovsky
03d1e6dc4d9e tomcat "catalina.sh run" Up 50 minutes 0.0.0.0:8080->8080/tcp drunk_ritchie
d51ad8634fac tomcat "catalina.sh run" Exited         jovial_kare
95f29bfbaadc ubuntu:16.04 "/bin/bash" Exited         kickass_stonebraker
34080d914613 hello_world_python_name_default "python hello.py" Exited lonely_newton
7ba49e8ee677 hello_world_python_name "python hello.py" Exited mad_turing
dd5eb1ed81c3 hello_world_python "python hello.py" Exited thirsty_bardeen
6ee6401ed8b8 ubuntu_with_git "/bin/bash" Exited      grave_nobel
3b0d1ff457d4 ubuntu_with_git "/bin/bash" Exited      desperate_williams
dee2cb192c6c ubuntu:16.04 "/bin/bash" Exited         small_dubinsky
0f05d9df0dc2 mongo  "/entrypoint.sh mongo" Exited    trusting_easley
47ba1c0ba90e hello-world "/hello"     Exited         tender_bell
```
为了删除停止的容器，我们可以使用`docker rm`命令(如果容器正在运行，我们需要先停止它):
```
$ docker rm 47ba1c0ba90e
```
如果我们想删除所有停止的容器，我们可以使用以下命令:
```
$ docker rm $(docker ps --no-trunc -aq)
```
`-aq`选项指定只传递所有容器的标识(无附加数据)。此外，`--no-trunc`要求 Docker 不要截断输出。
我们也可以采用不同的方法，当容器停止使用`--rm`标志时，要求容器自行移除，例如:
```
$ docker run --rm hello-world
```
在大多数现实场景中，我们不使用停止的容器，它们只用于调试目的。
# 清理映像
映像和容器一样重要。它们会占用大量空间，尤其是在持续交付过程中，当每个构建都以新的 Docker 映像结束时。这可能会很快导致设备上没有剩余空间的错误。要检查 Docker 容器中的所有映像，我们可以使用`docker images`命令:
```
$ docker images
REPOSITORY TAG                         IMAGE ID     CREATED     SIZE
hello_world_python_name_default latest 9a056ca92841 2 hours ago 202.6 MB
hello_world_python_name latest         72c8c50ffa89 2 hours ago 202.6 MB
hello_world_python latest              3e1fa5c29b44 2 hours ago 202.6 MB
ubuntu_with_python latest              d6e85f39f5b7 2 hours ago 202.6 MB
ubuntu_with_git_and_jdk latest         8464dc10abbb 2 hours ago 610.9 MB
ubuntu_with_git latest                 f3d674114fe2 3 hours ago 259.7 MB
tomcat latest                          c822d296d232 2 days ago  355.3 MB
ubuntu 16.04                           f49eec89601e 7 days ago  129.5 MB
mongo latest                           0dffc7177b06 11 days ago 402 MB
hello-world latest                     48b5124b2768 2 weeks ago 1.84 kB
```
要删除映像，我们可以调用以下命令:
```
$ docker rmi 48b5124b2768
```
对于映像，自动清理过程稍微复杂一些。映像没有状态，所以我们不能要求它们在不使用时移除自己。常见的策略是设置 Cron 清理作业，删除所有旧的和未使用的映像。我们可以使用以下命令来实现这一点:
```
$ docker rmi $(docker images -q)
```
为了防止移除带有标签的映像(例如，不移除所有最新的映像)，使用`dangling`参数是非常常见的:
```
$ docker rmi $(docker images -f "dangling=true" -q)
```
If we have containers that use volumes, then, in addition to images and containers, it's worth to think about cleaning up volumes. The easiest way to do this is to use the `docker volume ls -qf dangling=true | xargs -r docker volume rm` command.
# Docker 命令概述
所有 Docker 命令都可以通过执行以下`help`命令找到:
```
$ docker help
```
要查看任何特定 Docker 命令的所有选项，我们可以使用`docker help `，例如:
```
$ docker help run
```
在 Docker 官方页面[https://docs . Docker . com/engine/reference/command line/Docker/](https://docs.docker.com/engine/reference/commandline/docker/)上也有对所有 Docker 命令非常好的解释。真的值得一读或者至少略读。
在本章中，我们已经介绍了最有用的命令及其选项。作为一个快速提醒，让我们浏览一下它们:
| **命令** | **解释** |
| `docker build` | 从 Dockerfile 构建映像 |
| `docker commit` | 从容器创建映像 |
| `docker diff` | 显示容器中的更改 |
| `docker images` | 列出映像 |
| `docker info` | 显示 Docker 信息 |
| `docker inspect` | 显示 Docker 映像/容器的配置 |
| `docker logs` | 显示容器的日志 |
| `docker network` | 管理网络 |
| `docker port` | 显示容器的所有暴露端口 |
| `docker ps` | 列出容器 |
| `docker rm` | 移除容器 |
| `docker rmi` | 移除映像 |
| `docker run` | 从映像运行容器 |
| `docker search` | 搜索 Docker 中心中的 Docker 映像 |
| `docker start/stop/pause/unpause` | 管理容器的状态 |
# 练习
这一章我们已经讲了很多材料。为了让大家记住，我们推荐两个练习。
1.  将`CouchDB`作为 Docker 容器运行，并发布其端口:
You can use the `docker search` command to find the `CouchDB` image.
2.  创建一个 Docker 映像，REST 服务回复`Hello World!`到`localhost:8080/hello`。使用您喜欢的任何语言和框架:
The easiest way to create a REST service is to use Python with the Flask framework, [http://flask.pocoo.org/](http://flask.pocoo.org/). Note that a lot of web frameworks start the application on the localhost interface only by default. In order to publish a port, it's necessary to start it on all interfaces (`app.run(host='0.0.0.0')` in the case of a Flask framework).
# 摘要
在本章中，我们已经介绍了足以构建映像和作为容器运行应用的 Docker 基础知识。本章的要点如下:
*   容器化技术利用 Linux 内核特性解决了隔离和环境依赖性的问题。这是基于过程分离机制，因此没有观察到真正的性能下降。
*   Docker 可以安装在大多数系统上，但只在 Linux 上受本机支持。
*   Docker 允许从互联网上可用的映像运行应用，并构建自己的映像。
*   映像是一个包含所有依赖项的应用。
*   Docker 提供了两种构建映像的方法:Dockerfile 或提交容器。在大多数情况下，使用第一个选项。
*   Docker 容器可以通过发布它们公开的端口在网络上进行通信。
*   Docker 容器可以使用卷共享持久存储。
*   为了方便起见，应命名 Docker 容器，并标记 Docker 映像。在 Docker 的世界里，有一个特定的如何标记映像的约定。
*   为了节省服务器空间，避免*设备上没有剩余空间*错误，应不时清理 Docker 映像和容器。
在下一章中，我们将介绍 Jenkins 配置以及 Jenkins 与 Docker 一起使用的方式。