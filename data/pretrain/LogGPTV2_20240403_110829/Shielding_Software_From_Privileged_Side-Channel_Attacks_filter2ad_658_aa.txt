# Shielding Software From Privileged Side-Channel Attacks

**Authors:**
- Xiaowan Dong, University of Rochester
- Zhuojia Shen, University of Rochester
- John Criswell, University of Rochester
- Alan L. Cox, Rice University
- Sandhya Dwarkadas, University of Rochester

**Publication:**
- Proceedings of the 27th USENIX Security Symposium
- August 15–17, 2018, Baltimore, MD, USA
- [Link to Paper](https://www.usenix.org/conference/usenixsecurity18/presentation/dong)

## Abstract

Commodity operating system (OS) kernels, such as Windows, macOS, Linux, and FreeBSD, are susceptible to various security vulnerabilities. Their monolithic design allows successful attackers complete access to all application data and system resources. Shielding systems like InkTag, Haven, and Virtual Ghost protect sensitive application data from compromised OS kernels. However, these systems remain vulnerable to side-channel attacks. Compromised OS kernels can leverage their control over privileged hardware state to exacerbate existing side channels, enabling them to steal entire documents via side channels.

This paper presents defenses against page table and last-level cache (LLC) side-channel attacks launched by a compromised OS kernel. Our page table defenses restrict the OS kernel’s ability to read and write page table pages and defend against page allocation attacks. Our LLC defenses utilize Intel's Cache Allocation Technology (CAT) along with memory isolation primitives. We prototype our solution in a system called Apparition, building on an optimized version of Virtual Ghost. Our evaluation shows that our side-channel defenses add 1% to 18% (with up to 86% for one application) overhead to the optimized Virtual Ghost (relative to the native kernel) on real-world applications.

## 1. Introduction

Bugs in commodity OS kernels, such as Windows, macOS, Linux, and FreeBSD, render them vulnerable to security attacks like buffer overflows and information leaks. Furthermore, their monolithic architecture provides high performance but poor protection: a single vulnerability may give an attacker control over the entire OS kernel, allowing the attacker to steal and corrupt any data on the system. To reduce the size of the trusted computing base (TCB) on commodity systems, software solutions (such as InkTag and Virtual Ghost) and hardware solutions (such as Intel SGX, ARM TrustZone, and Haven) prevent the OS kernel from reading and corrupting application data.

Despite these protections, attackers can still steal application data using side-channel attacks that exploit shared hardware resources or interactions between application code and the OS kernel. A compromised OS kernel can exacerbate these side channels by manipulating software state (e.g., via CPU scheduling) and configuring privileged hardware resources (e.g., the processor’s interrupt timer and memory management unit). Shielding systems must mitigate side-channel attacks to protect the confidentiality of application data.

In this paper, we present methods to defend against page table and LLC side-channel attacks launched by a compromised OS kernel. Our methods require no changes to existing processors. A malicious OS kernel may infer victims’ memory access patterns and recover secret information via tracing page table updates or page faults, or measuring the victims’ cache usage patterns. To eliminate page table side channels, our key insight is that trusted software should prevent the OS kernel from reading or manipulating page table entries (PTEs) for memory holding application secrets. To thwart LLC side-channel attacks, we leverage Intel’s Cache Allocation Technology (CAT) in concert with techniques that prevent physical memory sharing.

Since our solution must prevent physical memory sharing, control the configuration of the Intel CAT feature, and prevent reading and writing of page table pages, we implement our solution by enhancing Virtual Ghost. Virtual Ghost already controls an OS kernel’s access to page tables and to privileged hardware registers. It also provides private memory in which an application can store sensitive information and prevents sharing of physical memory containing application secrets. As Virtual Ghost is based on Secure Virtual Architecture (SVA), we can combine our solution with other security policies enforced by SVA (such as memory safety). Our solution does not change the Virtual Ghost paravirtualization interface and therefore requires no changes to existing SVA software and hardware.

We prototype our changes in a new version of Virtual Ghost called Apparition. Apparition is optimized relative to the original Virtual Ghost by using Intel Memory Protection Extensions (MPX) to reduce software fault isolation (SFI) overheads and by eliminating serializing instructions added by the original Virtual Ghost to control page table access.

To summarize, our contributions are as follows:
- We show that using MPX for SFI and eliminating serializing instructions when accessing page table pages improves performance by up to 2× relative to the original Virtual Ghost.
- We design, implement, and evaluate a defense against page table side-channel attacks in Apparition that leverages Apparition’s control over the page table pages.
- We show how Apparition’s control over privileged hardware state can partition the LLC to defeat cache side-channel attacks. Our defense combines Intel’s CAT feature (which cannot securely partition the cache by itself) with existing memory protections from Virtual Ghost to prevent applications from sharing cache lines with other applications or the OS kernel.
- We present a design that eliminates side-channel attacks that infer code memory accesses by controlling interrupt, trap, and system call dispatch, context switching, and native code generation.
- We evaluate the performance of Apparition, study the sources of its overheads, and compare it to the performance of Virtual Ghost enhanced with our new optimizations. Using native FreeBSD as the baseline, we find that Apparition adds 1% to 18% overhead to this version of Virtual Ghost on the real-world applications we tested, except for one real-world program that experiences up to 86% additional overhead.

The rest of the paper is organized as follows. Section 2 describes our attack model. Section 3 provides background on memory management side channels and potential attacks. Section 4 provides background on Virtual Ghost and explains how we improved its performance. Section 5 describes the design of our mitigations against page table and cache-based side-channel attacks, and Section 6 discusses how our work mitigates some of the recent speculative execution side-channel attacks. Section 7 describes our prototype implementation. Section 8 presents the results of our experimental evaluation. Section 9 discusses related work, and Section 10 summarizes our contributions.

## 2. Attack Model

Our attack model assumes a strong attacker who controls the OS kernel and wishes to steal application data. Due to defenses like Virtual Ghost, this attacker cannot directly read application memory. We assume that the application and the libraries it uses are part of the TCB for that application’s security policy. The application author has taken measures to ensure that the application and its libraries are safe from direct attack, e.g., by using security hardening tools or type-safe programming languages, and that the application and its libraries protect themselves from Iago attacks by distrusting return values from the OS. We also assume that the attacker cannot gain physical access to the machine. Under such conditions, side-channel attacks become attractive.

We assume that the attacker will attempt to use side channels, either via a malicious user-space process or via malicious code within the OS kernel itself. We focus on page table side-channel and LLC side channel attacks launched by software because of their practicality. These side channels may leak information on the program’s accesses to data and/or code memory. Speculative execution side channels are outside our attack model’s scope, but we discuss how our system can mitigate some of the Meltdown and Spectre side channels in Section 6. Side-channel attacks launched by hardware are outside the scope of our attack model.

## 3. Side-Channel Attacks

Side-channel attacks exploit implicit information flows within modern processors to steal sensitive application data. Memory management side channels fall into two categories: those resulting from shared architectural states and those due to the OS’s control of memory management.

Modern systems share architectural states across processes, including translation lookaside buffers (TLBs), translation caches, CPU caches, memory controllers, memory channels, DIMMs, and DRAM ranks and banks. The shared state allows one process to indirectly infer another process’s behavior without direct access to the victim process’s data. Observing which code or data a victim process accesses allows attackers to infer protected application data.

A compromised OS can leverage its complete control over privileged processor state to create additional side channels. For example, the OS can steal a victim process’s secret information by tracing page faults, page table updates, and cache activities. It can control system events to alleviate noise and use a side channel to steal an application’s secret data with a single execution of the victim’s code.

Systems that protect applications from the OS kernel, like Virtual Ghost, Overshadow, InkTag, and Haven, do not mitigate these side channels; the architectural states are still shared among processes, and the OS kernel has access to or even controls the page table on these systems. In this section, we explain the page table, LLC, and instruction tracing side-channel attacks that Apparition mitigates.

### 3.1 Page Table Side Channels

Commodity OS kernels can configure page tables, intercept and process page faults, and query the virtual address causing a page fault. With these abilities, a compromised OS can monitor which virtual addresses a victim process accesses and, with knowledge of the application’s source code, infer its secret information. Recent research shows that a compromised OS can use its ability to configure the page table to launch page fault side-channel attacks to acquire sensitive application data protected by Intel SGX. The attack is powerful enough to steal a document and outlines of JPEG images from a single execution of applications protected by InkTag and Haven.

More specifically, the OS kernel can use the following methods to infer information about an application’s memory access patterns via the virtual-to-physical address translation mechanism:

- **Swapping:** If the OS kernel cannot directly modify the PTEs for pages containing private application data, it can indirectly mark the pages inaccessible if the shielding system provides the OS with a mechanism to swap pages out and back in. The OS can use the mechanism to swap a page out and then infer the memory access patterns of applications by monitoring when the shielding system requests the OS to swap the page back in. Systems such as InkTag and Virtual Ghost provide mechanisms for swapping that prevent direct data theft via encryption but do not mitigate swapping side channels.
- **Reading PTEs:** If the OS kernel cannot modify PTEs and cannot swap out pages, it can still infer an application’s memory access patterns by reading PTEs as the application executes. Many processors set a dirty bit in the PTE when they write to a page. Processors may also set an accessed bit when they read from or write to a page. By continually examining PTEs, the OS can learn when an application first reads from and writes to various memory locations. On multi-processor and multi-core systems, the compromised OS can scan the page tables (which reside in memory) on one core while the application executes on another core.
- **Inferring Caching of Translations:** A compromised OS can potentially infer a victim’s memory access patterns using PRIME+PROBE and FLUSH+RELOAD cache side-channel attacks on caches holding virtual-to-physical address translations. Processors cache virtual-to-physical address translations in TLBs, on-chip translation caches, and CPU caches in the memory hierarchy. If a compromised OS can use the same virtual-to-physical translation caches as the application or determine if a PTE is already cached in the processor’s memory caches, it can infer information on whether the application has used that page.

We observe that successfully mitigating page table side channels requires protecting both the confidentiality and integrity of virtual-to-physical address translations.

### 3.2 Cache Side Channels

Cache side-channel attacks infer secret data by measuring the cache usage patterns of the victim. Two common cache side-channel attacks are PRIME+PROBE and FLUSH+RELOAD, both of which can be applied on private caches and shared LLC.

- **PRIME+PROBE Attack:** This attack fills the monitored cache set with its own cache lines, busy-waits for a set time, and measures the time it takes to access its cache lines again. A longer access time indicates that the attacker’s cache line has been evicted by a victim’s access to data mapping to the same cache set.
- **FLUSH+RELOAD Attack:** This variant of the PRIME+PROBE attack relies on the victim and the attacker sharing pages containing target cache lines. Page sharing is common for shared libraries. The attacker first flushes the target cache line, busy-waits for a set time, and measures the time it takes to access the target cache line. A shorter access time indicates that the victim has already reloaded this target cache line.

LLC side-channel attacks can achieve a high attack resolution without requiring the attacker and the victim to share the same core. Cache partitioning can help mitigate these attacks, but it requires careful configuration and management.