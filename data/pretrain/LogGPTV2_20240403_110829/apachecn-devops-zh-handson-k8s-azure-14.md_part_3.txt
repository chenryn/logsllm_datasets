    mkdir js 队列
    js queue CD-js 伫列
2.  Now we can create the function. We will start with the initialization:
    func init Docker
    这会问你两个问题。对于运行时，选择节点(选项 2)，对于语言，选择 JavaScript(选项 1)。这会产生如图 14.23 所示的输出:
    ![Creating a new javaScript function of type javaScript](img/B17338_14_23.jpg)
    图 14.23:初始化一个新函数
    初始化之后，您可以创建实际的函数:
    新功能
    这将要求你触发。选择 Azure 队列存储触发器(选项 10)。给新函数命名 **js-queue** 。这将产生如图 14.24*所示的输出:*
    ![Creating a new function using the Azure Queue Storage trigger](img/B17338_14_24.jpg)
    图 14.24:创建队列触发函数
3.  You will now need to make a couple of configuration changes. You need to provide the function you created the connection string on to Azure Storage and provide the queue name. First, open the **local.settings.json** file to configure the connection strings for storage:
    vi local.settings.json
    要进行更改，请遵循以下说明:
    *   点击 *I* 进入插入模式。
    *   用您之前复制的连接字符串替换**AzureBjobstorage**的连接字符串。在这一行的末尾加一个逗号。
    *   添加新行，然后在该行上添加以下文本:
    " quecuconstring ":
    结果应该如图*图 14.25* :
    ![Editing the Queue connection string in the local.settings.json file ](img/B17338_14_25.jpg)
    图 14.25:编辑 local.settings.json 文件
    *   点击 *Esc* 键保存并关闭文件，输入 **:wq！**，然后按*进入*。
4.  The next file you need to edit is the function configuration itself. Here, you will refer to the connection string from earlier, and provide the queue name we chose in the *Creating a queue* section. To do that, use the following command:
    vi js-queue/function.json
    要进行更改，请遵循以下说明:
    *   点击 *I* 进入插入模式。
    *   将队列名称更改为您创建的队列名称(**功能**)。
    *   接下来，在**连接**字段中添加**排队连接字符串**。
    您的配置现在应该如图 14.26 所示:
    ![Editing the js-queue/function.json file](img/B17338_14_26.jpg)
    图 14.26:编辑 js 队列/函数文件
    *   点击 *Esc* 键保存并关闭文件，输入 **:wq！**，然后按*进入*。
5.  You are now ready to publish your function to Kubernetes. You will start by setting up KEDA on your Kubernetes cluster:
    kubectl create ns keda
    func kubernetes install --keda --namespace whom
    这将返回类似于图 14.27 的输出:
    ![Setting up KEDA on your Kubernetes cluster](img/B17338_14_27.jpg)
    图 14.27:在 Kubernetes 上安装 KEDA
    这将在您的集群上设置 KEDA。安装不会花很长时间。要验证安装是否成功，请确保 KEDA pod 正在 **keda** 命名空间中运行:
    kubectl get pod -n keda
    这将返回类似于图 14.28 的输出:
    ![Ensuring that the KEDA pod is running in the keda namespace](img/B17338_14_28.jpg)
    图 14.28:验证 KEDA 安装成功
6.  You can now deploy the function to Kubernetes. You will configure KEDA to look at the number of queue messages every 5 seconds (**polling-interval=5**) to have a maximum of 15 replicas (**max-replicas=15**), and to wait 15 seconds before removing pods (**cooldown-period=15**). To deploy and configure KEDA in this way, use the following command:
    func kuble deploy 名称 js queue \
    -注册表 .azurecr.io \
    -轮询间隔=5 -最大-副本=15 -冷却周期=15
    这将返回类似于图 14.29 的输出:
    ![Deploying the queue-triggered function](img/B17338_14_29.jpg)
    图 14.29:部署队列触发的功能
    要验证安装是否成功完成，您可以运行以下命令:
    kubectl get all
    这将向您展示所有已部署的资源。正如您在*图 14.30* 中看到的，这个设置创建了一个部署、复制集和一个 HPA。在 HPA 中，您应该看到当前没有运行的副本:
    ![Verifying that the setup created a deployment, a ReplicaSet, and an HPA](img/B17338_14_30.jpg)
    图 14.30:验证设置创建的对象
7.  Now you will create a message in the queue to trigger KEDA and create a pod. To see the scaling event, run the following command:
    忽必烈得到 hpa -w
8.  为了在队列中创建一条消息，我们将使用 Azure 门户。要创建新邮件，请打开您之前创建的存储中的队列。单击屏幕顶部的+添加消息按钮，创建一条测试消息，然后单击确定。这在*图 14.31* 中显示:
![Adding a message to the queue](img/B17338_14_31.jpg)
图 14.31:向队列添加消息
创建此消息后，查看您发出的前一个命令的输出。这可能需要几秒钟，但很快，您的 HPA 应该可以扩展到一个副本。之后，它还应该缩减到零个副本:
![KEDA scaling from 0 to 1 and back to 0 replicas](img/B17338_14_32.jpg)
图 14.32: KEDA 从 0 扩展到 1，再回到 0 副本
这向您展示了，当队列中有消息时，KEDA 使 Kubernetes HPA 能够从零扩展到一个 Pod ，当这些消息被处理时，也能从一个 Pod 扩展到零。
您现在已经创建了一个由添加到队列中的消息触发的函数。当您在队列中创建一条消息时，您能够验证 KEDA 将 pods 从 0 缩放到 1，当没有剩余消息时，将 pods 缩小到 0。在下一节中，您将执行一个规模测试，您将在队列中创建多个消息，并查看函数的反应。
### 刻度测试功能
在前一节中，您看到了当队列中只有一条消息时，函数是如何反应的。在本例中，您将向队列中发送 1，000 条消息，并查看 KEDA 将如何首先扩展该函数，然后再扩展，最后缩减到零:
1.  In the current Cloud Shell, watch the HPA using the following command:
    忽必烈得到 hpa -w
2.  To start pushing the messages, you are going to open a new Cloud Shell session. To open a new session, select the Open new session button in Cloud Shell:
    ![Opening a new Cloud Shell instance](img/B17338_14_33.jpg)
    图 14.33:打开一个新的云外壳实例
    为了将 1000 条消息发送到队列中，在本书随附的 GitHub repo 中的代码示例的第 15 章*中提供了一个名为 **sendMessages.py** 的 Python 脚本。要使脚本工作，您需要使用 pip 安装 **azure 存储队列包:***
    pip 安装 azure-存储-队列==12.1.5
    安装完成后，您需要向该脚本提供您的存储帐户连接字符串。为此，请使用以下命令打开文件:
    sendMessages.py 代码
    将*第 8 行*上的存储连接字符串编辑为您的连接字符串:
    ![Pasting in your connection string for your storage account on line 8](img/B17338_14_34.jpg)
    图 14.34:在第 8 行粘贴存储帐户的连接字符串
3.  Once you have pasted in your connection string, you can execute the Python script and send 1,000 messages to your queue:
    python sendMessages.py
    发送消息时，切换回以前的 Cloud Shell 实例，观察 KEDA 从 0 扩展到 1，然后观察 HPA 扩展到副本数量。HPA 使用 KEDA 提供的指标来做出扩展决策。默认情况下，Kubernetes 不知道 KEDA 向 HPA 提供的 Azure 存储队列中的消息数量。
    #### 注意
    根据集群中 KEDA 扩展应用的速度，您的部署可能无法扩展到图 14.29 中所示的 15 个副本。
    一旦队列为空，KEDA 将缩减到零个副本:
![KEDA will scale from 0 to 1, and the HPA will scale to 15 pods . When the load has decreased, KEDA scaled down to 0 again](img/B17338_14_35.jpg)
图 14.35: KEDA 将从 0 扩展到 1，HPA 将扩展到 15 个 Pod 
如您在该命令的输出中所见，部署首先从零扩展到一个副本，然后逐渐扩展到最多 15 个副本。当队列中没有更多消息时，部署再次缩减到零个副本。
以上就是在 Kubernetes 上运行无服务器函数的例子。让我们确保清理创建的对象。在您创建的虚拟机中运行以下命令(最后一步将删除该虚拟机；如果您想保留虚拟机，不要运行最后一步):
忽必烈删除机密 js 队列
忽必烈删除 scaledoble object js queue
kubectl 删除部署 js-queue
func kubernetes remove --namespace keda
az 组删除-n 功能-KEDA -是
在本节中，您运行了一个由 Kubernetes 之上的存储队列中的消息触发的函数。您使用了一个名为 KEDA 的组件来实现基于队列消息数量的伸缩。你看到了 KEDA 是如何从 0 到 1，再回到 0 的。您还看到了 HPA 如何使用 KEDA 提供的指标来扩展部署。
## 总结
在本章中，您在 Kubernetes 集群上部署了无服务器功能。为此，您首先创建了一个虚拟机和一个 ACR。
您通过部署使用 HTTP 触发器的函数来启动函数部署。Azure 函数核心工具用于创建该函数并将其部署到 Kubernetes。
之后，您在 Kubernetes 集群上安装了一个名为 KEDA 的附加组件。KEDA 允许在 Kubernetes 进行无服务器扩展。它允许部署到零 Pod 和从零 Pod 部署，还为 HPA 提供了额外的指标。您使用了对 Azure 存储队列中的消息触发的函数。
在本书的下一章(也是最后一章)，您将学习如何使用 GitHub Actions 在**连续集成和连续交付** ( **CI/CD** )管道中集成容器和 Kubernetes。