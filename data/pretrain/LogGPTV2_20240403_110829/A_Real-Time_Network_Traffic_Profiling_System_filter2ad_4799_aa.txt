title:A Real-Time Network Traffic Profiling System
author:Kuai Xu and
Feng Wang and
Supratik Bhattacharyya and
Zhi-Li Zhang
A Real-time Network Trafﬁc Proﬁling System
Kuai Xu, Feng Wang, Supratik Bhattacharyya, and Zhi-Li Zhang
∗
Abstract
This paper presents the design and implementation of
a real-time behavior proﬁling system for high-speed Inter-
net links. The proﬁling system uses ﬂow-level information
from continuous packet or ﬂow monitoring systems, and
uses data mining and information-theoretic techniques to
automatically discover signiﬁcant events based on the com-
munication patterns of end-hosts. We demonstrate the oper-
ational feasibility of the system by implementing it and per-
forming extensive benchmarking of CPU and memory costs
using a variety of packet traces from OC-48 links in an In-
ternet backbone network. To improve the robustness of this
system against sudden trafﬁc surges such as those caused by
denial of service attacks or worm outbreaks, we propose a
simple yet effective ﬁltering algorithm. The proposed algo-
rithm successfully reduces the CPU and memory cost while
maintaining high proﬁling accuracy.
1 Introduction
Recent years have seen signiﬁcant progress in real-time,
continuous trafﬁc monitoring and measurement systems in
IP backbone networks [2]. However, real-time trafﬁc sum-
maries reported by many such systems focus mostly on
volume-based heavy hitters (e.g., top N ports or IP ad-
dresses that send or receive most trafﬁc) or aggregated met-
rics of interest (total packets, bytes, ﬂows, etc) [6], which
are not sufﬁcient for ﬁnding interesting or anomalous be-
havior patterns. In this paper, we explore the feasibility of
building a real-time trafﬁc behavior proﬁling system that
analyzes vast amount of trafﬁc data in an IP backbone net-
work and reports comprehensive behavior patterns of sig-
niﬁcant end hosts and network applications.
Towards this end, we answer a speciﬁc question in this
paper: is it feasible to build a robust real-time trafﬁc be-
havior proﬁling system that is capable of continuously ex-
tracting and analyzing “interesting” and “signiﬁcant” traf-
ﬁc patterns on high-speed (OC48 or higher speed) Internet
∗
Kuai Xu is with Yahoo! Inc, Feng Wang and Zhi-Li Zhang are with
the University of Minnesota, Supratik Bhattacharyya is with SnapTell Inc.
links, even in the face of sudden surge in trafﬁc (e.g., when
the network is under a denial-of-service attack)? We ad-
dress this question in the context of a trafﬁc behavior pro-
ﬁling methodology we have developed for IP backbone net-
works [9]. The behavior proﬁling methodology employs a
combination of data-mining and information-theoretic tech-
niques to build comprehensive behavior proﬁles of Internet
backbone trafﬁc in terms of communication patterns of end
hosts and applications. It consists of three key steps: signif-
icant cluster extraction, automatic behavior classiﬁcation,
and structural modeling for in-depth interpretive analysis.
This three-step proﬁling methodology extracts hosts or ser-
vices that generate signiﬁcant trafﬁc, classiﬁes them into
different behavior classes that provide a general separation
of various common “normal” (e.g., web server and service
trafﬁc) and “abnormal” (e.g., scanning, worm or other ex-
ploit trafﬁc) trafﬁc as well as rare and anomalous trafﬁc be-
havior patterns (see Section 2 for more details). The proﬁl-
ing methodology has been extensively validated off-line us-
ing packet traces collected from a variety of backbone links
in an IP backbone network [9].
To demonstrate the operational feasibility of perform-
ing on-line trafﬁc behavior proﬁling on high-speed Internet
backbone links, we build a prototype system of the afore-
mentioned proﬁling methodology using general-purpose
commodity PCs and integrate it with an existing real-time
trafﬁc monitoring system operating in an Internet backbone
network. The real-time trafﬁc monitoring system captures
packets on a high-speed link (from OC12 to OC192) and
converts them into 5-tuple ﬂows (based on source IP, des-
tination IP, source port, destination port, protocol ﬁelds),
which are then continuously fed to the real-time trafﬁc pro-
ﬁling system we build. The large volume of trafﬁc ﬂows
observed from these links creates great challenges for the
proﬁling system to process them quickly on commodity PCs
with limited memory capacity. We incorporate several op-
timization features in our implementation such as efﬁcient
data structures for storing and processing cluster informa-
tion to address these challenges.
After designing and implementing this real-time trafﬁc
proﬁling system, we perform extensive benchmarking of
CPU and memory costs using packet-level traces from In-
ternet backbone links to identify the potential challenges
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007and resource bottlenecks. We ﬁnd that CPU and memory
costs increase linearly with number of ﬂows seen in a given
time interval. Nevertheless, resources on a commodity PC
are sufﬁcient to continuously process ﬂow records and build
behavior proﬁles for high-speed links in operational net-
works. For example, on a dual 1.5 GHz PC with 2048 MB
of memory, building behavior proﬁles once every 5 minutes
for an 2.5 Gbps link loaded at 209 Mbps typically takes 45
seconds of CPU time and 96 MB of memory.
However, resource requirements are much higher un-
der anomalous trafﬁc patterns such as sudden trafﬁc surges
caused by denial of service attacks, when the ﬂow arrival
rate can increase by several orders of magnitude. We study
this phenomenon by superposing “synthetic” packet traces
containing a mix of known denial of service (DoS) attacks
[1] on real backbone packet traces. To enhance the robust-
ness of our proﬁling system under these stress conditions,
we propose and develop sampling-based ﬂow ﬁltering algo-
rithms and show that these algorithms are able to curb steep
increase in CPU and memory costs while maintaining high
proﬁling accuracy.
The contributions of this paper are two-fold:
• We present the design and implementation of a real-
time behavior proﬁling system for link-level Internet
trafﬁc, and demonstrate its operational feasibility by
benchmarking CPU and memory costs using packet
traces from an operational backbone.
• We propose a new ﬁltering algorithm to improve the
robustness of the proﬁling system against trafﬁc surges
and anomalous trafﬁc patterns, and show that the pro-
posed algorithm successfully reduces CPU and mem-
ory costs while maintaining high proﬁling accuracy.
2 Behavior Proﬁling Methodology
In light of wide spread cyber attacks and frequent emer-
gence of disruptive applications, we have developed a gen-
eral trafﬁc proﬁling methodology that automatically discov-
ers signiﬁcant behaviors with plausible interpretations from
vast amount of trafﬁc data. This methodology employs a
combination of data mining and information-theoretic tech-
niques to classify and build behavior models and structural
models of communication patterns for end hosts and net-
work applications.
The proﬁling methodology uses (uni-directional) 5-tuple
ﬂows, i.e., source IP address (srcIP), destination IP ad-
dress (dstIP), source port number (srcPrt), destination
port number (dstPrt), and protocol, collected in a time in-
terval (e.g., 5 minutes) from Internet backbone links. Since
our goal is to proﬁle trafﬁc based on communication pat-
terns of end hosts and applications, we focus on the ﬁrst four
feature dimensions in 5-tuples, and extract clusters along
each dimension. Each cluster consists of ﬂows with the
same feature value in a given dimension. The value and its
dimension are denoted as cluster key and cluster dimension.
This leads to four groups of clusters, i.e., srcIP, dstIP,
srcPrt and dstPrt clusters. The ﬁrst two represent a
collections of host behavior, while the last two yield a col-
lection of port behaviors that aggregate ﬂows on the corre-
sponding ports.
2.1 Extracting Signiﬁcant Clusters
Due to massive trafﬁc data and wide diversity of end
hosts and applications observed in backbone links, it is im-
practical to examine all end hosts and applications. Thus,
we attempt to extract signiﬁcant clusters of interest,
in
which the number of ﬂows exceeds a threshold. In extract-
ing such clusters, we have introduced an entropy-based al-
gorithm [9] that ﬁnds adaptive thresholds along each dimen-
sion based on trafﬁc mix and cluster size distributions.
By applying this algorithm on a variety of backbone
links, we see that the number of signiﬁcant clusters ex-
tracted along each dimension is far less than the total num-
ber of values. For example, in a 5-min interval on an OC-48
link, the algorithm extracts 117 signiﬁcant srcIP clusters,
273 dstIP clusters, 8 srcPrt clusters and 12 dstPrt
clusters from over a total of 250,000 clusters with the re-
sulting thresholds being 0.0626%, 0.03125%, 0.25% and
1%, respectively. This observation suggests that this step is
very useful and necessary in reducing trafﬁc data for analy-
sis while retaining most interesting behaviors.
2.2 Behavior Classiﬁcation
Given the extracted signiﬁcant clusters, the second step
of the methodology is to classify their behaviors based on
communication patterns. The ﬂows in each signiﬁcant clus-
ter, e.g., a srcIP cluster, share the same feature value in
srcIP dimension, thus most behavior information is con-
tained in the other features including dstIP, srcPrt,
dstPrt, which might take any possible values.
Traditional approaches mostly focus on volume-based
information, e.g., unique number of dstIP’s or dstPrt’s
in examining the patterns of such clusters. However, the
trafﬁc volume often is unable to uncover comprehensive
communication patterns. For example, if two hosts commu-
nicate with 100 unique dstIP’s, we cannot safely conclude
that their communication patterns from dstIP feature are
the same without further investigation. A simple example is
that one host could be a web server talking to 100 clients,
while another is an infected host randomly scanning 100
targets. More importantly, the number of ﬂows associated
with each dstIP is very likely to be different. For the case
of the web server, the numbers of ﬂows between clients and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007the server tend to be diverse. On the other hand, the number
of probing ﬂows between the scanner and each target is of-
ten uniform, e.g., one in most cases. This insight motivates
us to use relative uncertainty [9] to measure the feature dis-
tribution of free dimensions for all signiﬁcant clusters.
We use relative uncertainty to measure feature distribu-
tions of three free dimensions. As a result, we obtain a rel-
ative uncertainty vector for each cluster, e.g., [RUsrcP rt,
RUdstP rt and RUdstIP ] for srcIP clusters. Recall that
RU is in the range of [0,1], so we could represent the RU
vector of each srcIP cluster as a single point in a 3-
dimensional space. Fig. 1 represents each srcIP cluster
extracted in each 5-minute time slot over an 1-hour period
from an OC-48 backbone link as a point in a unit cube. We
see that the points are “clustered”, suggesting that there are
few underlying common patterns among them. Such obser-
vation holds for other dimensions as well. This leads to a
behavior classiﬁcation scheme which classiﬁes all srcIP’s
into behavior classes based on their similarity/dissimilarity
in the RU vector space.
)
P
I
t
s
d
(
U
R
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
RU(dstPort)
0.2
0
0
0.2
1
0.8
0.6
0.4
RU(srcPort)
Figure 1. The distribution of relative uncer-
tainty on free dimensions for srcIP’s from an
OC-48 backbone link during an 1-hour period.
By applying the behavior classiﬁcation on backbone
links and analyzing their temporal properties, we ﬁnd this
scheme is robust and consistent in capturing behavior sim-
ilarities among signiﬁcant clusters. Such similarities are
measured on the feature distribution of free dimensions of
these clusters, hence provide useful insight into communi-
cation patterns of end hosts and applications [5, 9].
2.3 Structural Modeling
To provide a plausible interpretation for behavior pat-
terns, we adopt dominant state analysis technique for mod-
eling and characterizing the interaction of various feature
dimensions in a cluster. The idea of dominant state analysis
comes from structural modeling or reconstructability analy-
sis in system theory ([11]) as well as more recent graphical
models in statistical learning theory [3].
The objective of dominant state analysis is to explore
the interaction or dependence among the free dimensions
by identifying “simpler” subsets of values or constraints
(called structural models in the literature [7]) to represent
the original data in their probability distribution. Consider
a simple example, a srcIP cluster consists of 98% scans
(with a ﬁxed srcPrt 220) to over 1200 random destina-
tions on dstPrt 6129. Then the values in the srcPrt,
dstPrt and dstIP dimensions these ﬂows take are of the
form (cid:1)220, 6129,∗(cid:3), where ∗ (wildcard) indicates random
values. Clearly this cluster is dominated by the ﬂows of the
form (cid:1)220, 6129,∗(cid:3). We refer to such forms as states of a
cluster. Hence given the information about the states, we
can not only approximately reproduce the original ﬂow pat-
terns, but also explain the dominant activities of end hosts
or applications.
2.4 Properties of Behavior Proﬁles
We have applied the proﬁling methodology on trafﬁc
data collected from a variety of links at the core of the
Internet through off-line analysis. We ﬁnd that a large
fraction of clusters fall into three typical behavior proﬁles:
server/service behavior proﬁle, heavy hitter host behav-
ior, and scan/exploit behavior proﬁle. These behavior pro-
ﬁles are built based on various aspects, including behavior
classes, dominant states, and additional attributes such as
average packets and bytes per ﬂow. These behavior proﬁles
are recorded in a database for further event analysis, such as
temporal properties of behavior classes and individual clus-
ters, or behavior change detection based on RU vectors.
The proﬁling methodology is able to ﬁnd various inter-
esting and anomalous events. First, it automatically de-
tects novel or unknown exploit behaviors that match typ-
ical exploit proﬁles, but exhibit unusual dominant states
(e.g., dstPrt’s). Second, any atypical behavior is worth
close examination, since they represent as “outliers” or
“anomaly” among behavior proﬁles. Third, the methodol-
ogy could point out deviant behaviors of end hosts or appli-
cations that deviate from previous patterns.
To summarize, the proﬁling methodology has demon-
strated the applicability of the proﬁling methodology to
critical problem of detecting anomalies or the spread of
unknown security exploits, proﬁling unwanted trafﬁc, and
tracking the growth of new applications. However, the prac-
tical value of the proﬁling framework largely depends on the
operational feasibility of this system in a real-time manner.
In the rest of this paper, we will demonstrate the fea-
sibility of designing and implementing a real-time trafﬁc
proﬁling system that uses ﬂow-level information generated
from “always-on” packet monitors and reports signiﬁcant
online events based on communication patterns of end hosts
and applications even faced with anomalous trafﬁc patterns,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007e.g., denial of service attacks or worm outbreaks.
3 Real-time Proﬁling System
3.1 Design Guidelines
Four key considerations guide the design of our proﬁling
system:
• scalability: The proﬁling system is targeted at high-
speed (1 Gbps or more) backbone links and hence must
scale to the trafﬁc load offered by such links. Speciﬁ-
cally, if the system has to continuously build behavior
proﬁles of signiﬁcant clusters once every time inter-
val T (e.g, T = 5 minutes), then it has to take less than
time T to process all the ﬂow records aggregated in ev-
ery time interval T . And this has to be accomplished
on a commodity PC platform.
• robustness: The proﬁling system should be robust to
anomalous trafﬁc patterns such as those caused by de-
nial of service attacks, ﬂash crowds, etc. These traf-
ﬁc patterns can place a heavy demand on system re-
sources. At the same time, it is vital for the proﬁling
system to be functioning during such events since it
will generate data for effective response and forensic
analysis. Therefore the system must adapt gracefully
to these situations and achieve a suitable balance be-
tween proﬁling accuracy and resource utilization.
• modularity: The proﬁling system should be designed
in a modular fashion with each module encapsulating
a speciﬁc function or step in the proﬁling methodol-
ogy. Information exchange between modules should
be clearly speciﬁed. In addition, the system should be
designed to accept input from any packet or ﬂow mon-
itoring system that exports a continuous stream of ﬂow
records. However, the ﬂow record export format has to
be known to the system.
• usability: The proﬁling system should be easy to con-
ﬁgure and customize so that a network operator can
focus on speciﬁc events of interest and obtain vary-
ing levels of information about these events. At the
same time, it should expose minimal details about the
methodology to an average user. Finally it should gen-