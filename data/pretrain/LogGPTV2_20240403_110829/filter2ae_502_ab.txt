首先fork出一个子进程，然后调用ptrace将子进程附加到父进程。随后进入while循环，不断判断子进程是否还存在，如果子进程被杀死则调用exit结束掉主进程。这也就解释了为什么之前会看到两个同名的进程，并且杀掉子进程后父进程也会一起被杀掉。查资料后知道了由于程序使用了ptrace将子进程提前附加到父进程(相当于子进程调试父进程)，所以我们再用frida附加到父进程调试的话就会报错，因为一个父进程只允许附加一个调试进程。这也是最简单的反调试机制。
frida提供了参数-f FILE，可以在程序运行之前就将脚本注入Zygote，从而绕过了程序自带的反调试检测
编写frida脚本：
    setImmediate(function() {
        //hook exit函数，防止点击OK后进程被结束
        Java.perform(function() {
            console.log("[*] Hooking calls to System.exit");
            const exitClass = Java.use("java.lang.System");
            exitClass.exit.implementation = function() {
                console.log("[*] System.exit called");
            }
            //得到libfoo中所有关于strncmp的调用
            var strncmp = undefined;
            var imports = Module.enumerateImportsSync("libfoo.so");
            for( var i = 0; i **
****