# MOSE: Using Configuration Management for Evil
## Presented By: Jayson Grace

### Legal Disclaimer
- I am not speaking on behalf of my current or previous employers.
- My opinions are solely my own and do not reflect those of my current or previous employers.

---

### About Me
- **Death Metal Vocalist**
- **Former DevOps Engineer and Sysadmin**
- **Penetration Tester at Splunk**
- **Automator of Things**

---

### Agenda
1. **Introduction to Configuration Management Tools**
2. **Using Configuration Management Tools for Malicious Purposes**
3. **What is MOSE, Why Do We Need It, and How to Run It?**
4. **Demos**
5. **Future Plans**

---

### Poll
- **Who enjoys post-exploitation?**
- **Who feels they have enough time to do it properly?**

---

### Story Time
- **Automation** is the best way to optimize post-exploitation efforts.
- **MOSE** will enhance your post-exploitation game when you compromise Configuration Management (CM) servers.

---

### What are Configuration Management Tools?
- **Tools to provision systems** and manage assets in networked environments.

---

### Common Features of CM Tools
- **Idempotency**: Ensures consistency across deployments.
- **Scalability**: Supports large-scale operations.
- **Guaranteed State**: Maintains a consistent state.
- **Modularity and Repeatability**: Supports various operating systems.
- **Native Secrets Management**: Securely manages secrets.
- **Deployment Options**: Client/Server or Standalone.

---

### Popular CM Tools
- **Puppet**
- **Chef**
- **Salt**
- **Ansible**

---

### Key Differences Among CM Tools
- **Puppet**:
  - **Language**: Proprietary DSL
  - **Architecture**: Master/Agent
  - **Packaging**: Manifests & Modules
  - **Secrets Management**: Hiera-eyaml

- **Chef**:
  - **Language**: Ruby-based
  - **Architecture**: Master/Agent/Workstation
  - **Packaging**: Recipes & Cookbooks
  - **Secrets Management**: Chef Vault

- **Salt**:
  - **Language**: YAML
  - **Architecture**: Master/Minion
  - **Packaging**: States & Formulas
  - **Secrets Management**: Encrypted Pillar

- **Ansible**:
  - **Language**: YAML
  - **Architecture**: Agentless
  - **Packaging**: Roles & Playbooks
  - **Secrets Management**: Ansible Vault

---

### Advantages of CM Tools
- **No More Bash Scripts from Hell**: Simplifies complex automation tasks.

---

### Demo 1
- **Kubernetes and Containers**:
  - **Great Technology, Super Useful**
  - **Limitations**:
    - Not everything can be cloud-based.
    - Difficult to migrate older monoliths to containers.
    - Need tools to manage Kubernetes deployments.
  - **Conclusion**: CM tools aren’t going anywhere.

---

### Using CM Tools for Evil
- **Powerful Hacking Resource**:
  - **Run Commands on All Connected Systems**
  - **Built-in Persistence**
  - **Manage a Variety of Secrets** (credentials, keys, etc.)

---

### Accessing CM Secrets
- **All CM Tools Manage Secrets**:
  - **Various Methods**
  - **Easy Access if You’re on a CM Server**
  - **Decryption Required**: Get on the right system and run the decrypt command.

---

### MOSE (Master of Servers)
- **Why Can’t I Just Work with CM Tools?**
  - **Time-Consuming**
  - **Different Workflows, Syntax, and Architectures**
  - **Severe Consequences if Misused**

---

### Existing Tools
- **Pwnsible**:
  - **Bash Script** that creates an msfvenom-generated payload and provides instructions for running it with Ansible.
- **Pwnpet**:
  - **Bash Script** that creates an msfvenom-generated payload and all necessary components for execution.

---

### Limitations of Existing Tools
- **Bash Scripts Don’t Scale Well**
- **Limited to msfvenom Payloads**
- **Lots of Manual Work**
- **We Want Secrets and We Want Them Now**

---

### MOSE to the Rescue
- **Automates Creation and Placement** of everything needed to run CM tools.
- **Allows Users to Upload and Run Existing Tools**.
- **Specifies Behaviors for Targets Based on Functionality**.
- **Saves Us from Ourselves** (e.g., prevents accidental `rm -rf /`).

---

### MOSE for Both Beginners and Experts
- **User-Friendly Interface**:
  - **Avoids CM Tool-Specific Implementation Details**
  - **Tool-Agnostic Interface** for beginners.
  - **High Level of Customizability** for advanced users.

---

### MOSE’s Current Functionality
- **Supports Puppet and Chef**

---

### Basic MOSE Workflow
1. **Specify the Command and CM Tool Type**:
   - Example: `./mose -c ls -t puppet`
   - Additional options via `settings.json` config file.
2. **Generate the Payload as a Binary**.
3. **Transfer Payload to Remote Server**:
   - Default: Served via web server.
   - Manual: Specify binary location and transfer manually.
4. **Run Binary on Target CM Server**.
5. **Profit**.

---

### MOSE + Puppet
- **Puppet Environment**: Master and Agents
- **Step-by-Step Process**:
  1. **Specify Command and Parameters**
  2. **Download Payload onto Target System**
  3. **Run Payload on Server**
  4. **Agents Check In, Command is Executed**

---

### MOSE + Chef
- **Chef Components**: Server, Workstation, and Nodes
- **Step-by-Step Process**:
  1. **Specify Command and Parameters**
  2. **Download Payload onto Target System**
  3. **Run Payload on Server**
  4. **Agents Check In, Command is Executed**

---

### Plan of Attack for Chef Server
- **Steps 1-4**: Post-exploitation on Chef Server
- **Step 5**: Exfiltrate Data and Keys
- **Steps 6a-c**: Run MOSE from Chef Workstation
- **Step 6**: Execute Commands

---

### Demos
- **Demo 2**
- **Demo 3**

---

### Testing MOSE
- **Want to Try This Out?**
  - **Test Labs** available based on Docker and Vagrant:
    - [Puppet Test Lab](https://github.com/master-of-servers/puppet-test-lab)
    - [Chef Test Lab](https://github.com/master-of-servers/chef-test-lab)

---

### Future Plans
- **Support for Ansible, Salt, and Jenkins**
- **Integration with Metasploit for Payload Generation and Listener Setup**
- **Backdooring Existing Recipes/Modules/Playbooks/States**
- **Metasploit Module Development**
- **Community-Driven Improvements**

---

### Thank You
- **Amanda Minnich**
- **Aleksandar Straumann**
- **Michael Wyatt**
- **Ron Minnich**
- **Defcon Staff**

---

### DR.ROBOT
- **Awesome Recon Tool**
- **Session Details**: Saturday from 12:00 - 13:50 in Sunset 5 at Planet Hollywood

---

### Contact Information
- **Twitter**: @Jayson_Grace
- **Blog**: [techvomit.net](https://techvomit.net/)
- **MOSE Repo**: [GitHub](https://github.com/master-of-servers/MOSE)
- **Puppet Test Lab Repo**: [GitHub](https://github.com/master-of-servers/puppet-test-lab)
- **Chef Test Lab Repo**: [GitHub](https://github.com/master-of-servers/chef-test-lab)

---

Thank you for your attention!