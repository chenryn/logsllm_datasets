MOSE: Using 
Configuration 
Management for Evil
Presented By: Jayson Grace
Legal Stuff
I am not speaking on behalf of my employer (or any 
previous employers), nor am I here as a representative of 
my current or previous employers.
My opinions do not reflect those of my current or 
previous employer, and are solely my own.
2
$ whoami
●
Death Metal Vocalist
●
Former DevOps engineer and Sysadmin
●
Penetration Tester at Splunk
●
Automator of things
3
Agenda
●
What are Configuration Management Tools?
●
How can we use them for evil?
●
What is MOSE, why do we need it, and how do we run it?
●
Demos
●
Future Plans
4
Poll
Who enjoys post exploitation?
5
Poll Pt. 2
Who feels like they have enough time to do it properly?
6
Story Time
●
Automation is best way to optimize post exploitation 
efforts
●
MOSE will level up your postex game when you compromise 
CM servers
7
What are Configuration Management Tools?
●
Tools to provision systems
●
Helpful for managing assets in networked environments
8
CM tools share many common features
●
Idempotency
●
Ensure consistency across deployments
●
Scalable
●
Guaranteed state
●
Modular, repeatable, supports variety of OS’s
●
Native Secrets Management Solution
●
Client/Server or Standalone deployment
9
These tools are used a lot of places
10
Some of the more popular options
11
These tools do have key differences
12
Puppet
Chef
Salt
Ansible
Language Used
Proprietary 
DSL
Ruby-based 
Proprietary 
DSL
YAML
YAML
Architecture
Master / 
Agent
Master / 
Agent / 
Workstation
Master / 
Minion
Agentless
Packaging
Manifests & 
Modules
Recipes & 
Cookbooks
States & 
Formulas
Roles & 
Playbooks
Secrets
Hiera-eyaml
Chef Vault
Encrypted 
Pillar
Ansible 
Vault
CMs Pro: no more bash scripts from hell
13
14
Demo 1
“But what about Kubernetes/containers?”
●
Yep, great technology, super useful
●
However, have limitations:
●
Not everything can be cloud-based
●
Difficult to migrate older monoliths to containers
●
Need tools to manage Kubernetes deployments
●
So CM tools aren’t going anywhere
15
CM for evil
16
CM tools are a powerful hacking resource
●
They allow you to run any command on every connected 
system
●
Built-in and basically free persistence
●
Manage a variety of secrets, which can include creds, 
keys, etc.
17
CM secrets are not out of reach
●
All of these tools can manage your secrets
●
Done in variety of ways
●
They are often easy to access if you’re on a CM server
●
Need to decrypt somewhere, so comes down to getting on 
the right system and running the right decrypt command
18
MOSE (Master of SErvers)
19
“Why can’t I just work with CM tools?”
●
You can, it’s just a time suck
●
Each tool has a different workflow, syntax, and 
architecture, so there’s a learning curve
●
Very powerful, so can be severe repercussions if misused
20
Hope you like reading
21
Another tool?
22
Some existing tools *are* available
● Pwnsible
○
Bash script that creates a msfvenom-generated payload 
and tells you how to run it with Ansible
● Pwnpet
○
Bash script that creates a msfvenom-generated payload, 
as well as all necessary components to run this 
payload (once put into place by the user)
23
However, they have limitations
●
Bash scripts don’t scale very well
●
Limited to msfvenom payloads
●
Lots of manual work to be done
●
We want secrets and we want them now
24
MOSE is here to help
●
Automates creation and placement of everything you need to 
run the CM tools
●
Allows the user to upload and run existing tools
●
Specifies behaviors for targets based on their 
functionality
●
Saves us from ourselves (don’t rm -rf / all the systems)
25
MOSE is good for both n00bs and experts
●
User can ignore CM tool-specific implementation details
●
Tool-agnostic interface allows beginners avoid CM tool 
learning curve
●
Still high level of customizability to let users get 
deeper in the weeds
26
MOSE has Puppet and Chef functionality
27
Basic MOSE workflow
1.
Specify the command to run and the type of CM tool 
○
For example: ./mose -c ls -t puppet
○
More options available via settings.json config file
2.
MOSE generates the payload as a binary 
3.
Transfer payload to remote server
○
By default served via web server 
○
Or specify binary location and transfer manually
4.
Run binary on target CM server
5.
Profit
28
MOSE + Puppet
29
Puppet environment: Master and Agents
Resource: 
https://banner2.kisspng.com/20180529/kqc/kisspng-brand-logo-organization-pup
pet-master-5b0d94418dcc33.6894967215276165775808.jpg
30
Step 1: specify command + params
31
Step 2: dl payload onto target system
32
Step 3: run payload on server
33
Agent(s) check in, command is executed
34
MOSE + Chef
35
Chef has Server, Workstation, and Nodes
Resource: 
https://gspann.cdn.prismic.io/gspann/77ba86c0653abb3017c60b4d1fa854ce8218a7
8e_chef-components.jpg
36
First we will look at Chef Workstation
Resource: 
https://gspann.cdn.prismic.io/gspann/77ba86c0653abb3017c60b4d1fa854ce8218a7
8e_chef-components.jpg
37
Step 1: specify command + params
38
Step 2: dl payload onto target system
39
Step 3: run payload on server
40
Agent(s) check in, command is executed
41
“Wow, postex on a Chef Workstation 
machine is pretty straightforward!”
42
…That was easy
Enter: Chef Server
43
Reminder of the Chef Setup
Resource: 
https://gspann.cdn.prismic.io/gspann/77ba86c0653abb3017c60b4d1fa854ce8218a7
8e_chef-components.jpg
44
Server can’t directly provision systems
Has resources needed to attack Chef agents but...
How do we use this info to deploy our code?
Where do we run Chef Workstation?
How do we automate it so it’s not your problem?
45
Solution
46
Plan of Attack for Chef Server
47
Steps 1-4: postex on Chef Server
48
Step 1: specify command + params
49
Step 2: dl payload onto Chef Server
50
Step 3: run payload on server
51
Step 4: specify Chef Server as target
52
Step 5: exfil data
53
Step 5: exfil keys and needed info
54
Steps 6a-c: run MOSE from Chef Workstation
55
Step 6: drive it like you stole it
56
57
Demo 2
58
Demo 3
But how I test before I buy?
Want to try some of this on your own?
Don’t have an environment to do it in?
Fear not! I’ve created test labs for you, based on Docker 
and Vagrant, which can be found here:
https://github.com/master-of-servers/puppet-test-lab 
and here:
https://github.com/master-of-servers/chef-test-lab 
59
Test lab is useful for blue teams too
These labs could also be used in conjunction with MOSE for 
fire drilling and building detection mechanisms
60
Future Plans
●
Ansible, Salt, and Jenkins Support
●
Interfacing with tools like Metasploit via containers to 
generate payloads and set up listeners
●
Backdooring existing recipes/modules/playbooks/states
●
Turn some of this functionality into Metasploit modules?
●
Whatever great ideas you folks have
61
Thank You
Amanda Minnich
Aleksandar Straumann
Michael Wyatt
Ron Minnich
Defcon Staff
62
DR.ROBOT
Awesome Recon Tool
Saturday from 12:00 - 13:50 in Sunset 5 at Planet Hollywood
63
Jayson Grace
Twitter: @Jayson_Grace
Blog: https://techvomit.net/
MOSE Repo: 
https://github.com/master-of-servers/MOSE 
Puppet Test Lab Repo: 
https://github.com/master-of-servers/puppet-test-lab
Chef Test Lab Repo: 
https://github.com/master-of-servers/chef-test-lab 
64