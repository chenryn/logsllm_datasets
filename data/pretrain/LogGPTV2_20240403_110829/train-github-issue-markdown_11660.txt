`Promise` is assignable to `Promise` (good), but
`Promise` is also assignable to `Promise` (bad - should require
a cast)
This weakens type checking, especially since it's so easy to accidentally
create `Promise` which is assignable to any other `Promise`:
    function f() {
        return new Promise(resolve => { resolve(1); });
        // oops, this has a return type of Promise
    }
    function g(p: Promise) { /* ... */ }
    g(f()); // Allowed due to contravariance!
It's possible to work around this by extending the Promise interface with a
dummy property:
    interface Promise { _assignabilityHack: T }