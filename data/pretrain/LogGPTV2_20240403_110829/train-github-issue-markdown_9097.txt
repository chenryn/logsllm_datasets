### Describe your issue.
The function `scipy.stats.nbinom.logcdf` returns wrong results for some
arguments. By trying out (and looking at the implementation), this seems to
happens when the input arguments would lead to an array result that mixes
values larger and smaller than log(0.5). (In the implementation, there is a
`cond = cdf > 0.5` mask).
For example, for
    n=np.array([2, 100])
    p=np.array([0.1, .8])
    k=np.array([ 17, 12])
we have CDF-values of
    In [49]: nbinom.cdf(n=np.array([2, 100]), p=np.array([0.1, .8]), k=np.array([ 17, 12]) )
    Out[49]: array([0.57973502, 0.00662863])
So we expect to find the logarithm of these two values as output of
`nbimon.logcdf`, i.e.
    In [50]: np.log(nbinom.cdf(n=np.array([2, 100]), p=np.array([0.1, .8]), k=np.array([ 17, 12]) ))
    Out[50]: array([-0.54518414, -5.0163566 ]) 
However, something in the masking seems to be off, as the result turns out to
be an array with two identical numbers:
    In [48]: nbinom.logcdf(n=np.array([2, 100]), p=np.array([0.1, .8]), k=np.array([ 17, 12]) )
    Out[48]: array([-0.54518414, -0.54518414])
That is, the first value has been rolled out on the entire array.
In this second example, the last two values of k have CDF  0.5:
    In [55]: nbinom.cdf(n=4, p=0.3, k=np.array([ 17, 12, 8, 4, 2]) )
    Out[55]: array([0.9143943 , 0.75414414, 0.50748423, 0.19410435, 0.07047   ])
    In [56]: nbinom.logcdf(n=4, p=0.3, k=np.array([ 17, 12, 8, 4, 2]) )
    Out[56]: array([-0.0894934 , -0.28217177, -0.67828965, -0.0894934 , -0.28217177])
    In [57]: np.log(nbinom.cdf(n=4, p=0.3, k=np.array([ 17, 12, 8, 4, 2]) ))
    Out[57]: array([-0.0894934 , -0.28217177, -0.67828965, -1.63935938, -2.65256819])
There was recently a PR modifying `scipy.stats.nbinom.logcdf`, which might be
related : #16159  
but I can't reproduce the above issue with scipy v1.6.3. I.e. in scipy v
1.6.3, this issue does not occur; it seems that in 1.7.x the issue is present.
### Reproducing Code Example
    import numpy as np
    from scipy.stats import nbinom
    np.testing.assert_array_almost_equal(nbinom.logcdf(n=np.array([2, 100]), p=np.array([0.1, .8]), k=np.array([ 17, 12]) ), np.log(nbinom.cdf(n=np.array([2, 100]), p=np.array([0.1, .8]), k=np.array([ 17, 12]) )))
### Error message
    840         err_msg += '\n' + '\n'.join(remarks)
        841         msg = build_err_msg([ox, oy], err_msg,
        842                             verbose=verbose, header=header,
        843                             names=('x', 'y'), precision=precision)
    --> 844         raise AssertionError(msg)
        845 except ValueError:
        846     import traceback
    AssertionError:
    Arrays are not almost equal to 6 decimals
    Mismatched elements: 1 / 2 (50%)
    Max absolute difference: 4.47117246
    Max relative difference: 0.8913187
     x: array([-0.545184, -0.545184])
     y: array([-0.545184, -5.016357])
### SciPy/NumPy/Python version information
1.8.1 1.22.4 sys.version_info(major=3, minor=8, micro=5, releaselevel='final',
serial=0)