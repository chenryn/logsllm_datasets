    }
}
Listing 13-4: Validating that the file is a PNG file (/ch-13/imgInject/pnglib/commands.go)
Although this method may not seem overly complex, it introduces a 
couple of new items. The first, and the most obvious one, is the binary.Read() 
function u that copies the first 8 bytes from the bytes.Reader into the Header 
struct value. Recall that you declared the Header struct field as type uint64 
(Listing 13-1), which is equivalent to 8 bytes. It’s also noteworthy that the 
binary package provides methods to read Most Significant Bit and Least 
Significant Bit formats via binary.BigEndian and binary.LittleEndian, respec-
tively v. These functions can also be quite helpful when you’re performing 
binary writes; for example, you could select BigEndian to place bytes on the 
wire dictating the use of network byte ordering.
The binary endianness function also contains the methods that facili-
tate the marshaling of data types to a literal data type (such as uint64). Here, 
you’re creating a byte array of length 8 and performing a binary read neces-
sary to copy the data into a unit64 data type. You can then convert the bytes 
to their string representations and use slicing and a simple string compari-
son to validate that bytes 1 through 4 produce PNG, indicating that you 
have a valid image file format w. 
To improve the process of checking that a file is a PNG file, we encour-
age you to look at the Go bytes package, as it contains convenience func-
tions that you could use as a shortcut to compare a file header with the PNG 
magic byte sequence we mentioned earlier. We’ll let you explore this on 
your own.
Reading the Chunk Sequence
Once you validated that your file is a PNG image, you can write the code 
that reads the chunk sequence. The header will occur only once in a PNG 
file, whereas the chunk sequence will repeat the SIZE, TYPE, DATA, and CRC 
chunks until it reaches the EOF. Therefore, you need to be able to accom-
modate this repetition, which you can do most conveniently by using a 
Go conditional loop. With this in mind, let’s build out a ProcessImage() 
method, which iteratively processes all the data chunks up to the end of 
file (Listing 13-5).
func (mc *MetaChunk) ProcessImage(b *bytes.Reader, c *models.CmdLineOpts)u {
// Snip code for brevity (Only displaying relevant lines from code block)
      count := 1 //Start at 1 because 0 is reserved for magic byte
      v chunkType := ""
      w endChunkType := "IEND" //The last TYPE prior to EOF
      x for chunkType != endChunkType {
          fmt.Println("---- Chunk # " + strconv.Itoa(count) + " ----")
          offset := chk.getOffset(b)
          fmt.Printf("Chunk Offset: %#02x\n", offset)
          chk.readChunk(b)
300   Chapter 13
          chunkType = chk.chunkTypeToString()
          count++
      }
}
Listing 13-5: The ProcessImage() method (/ch-13 /imgInject/pnglib/commands.go)
You first pass a reference to a bytes.Reader memory address pointer 
(*bytes.Reader) as an argument to ProcessImage() u. The validate() method 
(Listing 13-4) you just created also took a reference to a bytes.Reader pointer. 
As convention dictates, multiple references to the same memory address 
pointer location will inherently allow mutable access to the referenced 
data. This essentially means that as you pass your bytes.Reader reference 
as an argument to ProcessImage(), the reader will have already advanced 
8 bytes as a result of the size of the Header because you’re accessing the 
same instance of bytes.Reader.
Alternatively, had you not passed a pointer, the bytes.Reader would 
have either been a copy of the same PNG image data or separate unique 
instance data. That’s because advancing the pointer when you read the 
header would not have advanced the reader appropriately elsewhere. You 
want to avoid taking this approach. For one, passing around multiple cop-
ies of data when unnecessary is simply bad convention. More importantly, 
each time a copy is passed, it is positioned at the start of the file, forcing 
you to programmatically define and manage its position in the file prior 
to reading a chunk sequence.
As you progress through the block of code, you define a count variable 
to track how many chunk segments the image file contains. The chunkType v 
and endChunkType w are used as part of the comparative logic, which evalu-
ates the current chunkType to endChunkType’s IEND value designating an EOF 
condition x. 
It would be nice to know where each chunk segment starts—or rather, 
each chunk’s absolute position within the file byte construct, a value known 
as the offset. If you know the offset value, it will be much easier to implant a 
payload into the file. For example, you can give a collection of offset loca-
tions to a decoder—a separate function that collects the bytes at each known 
offset—that then unwinds them into your intended payload. To get the off-
sets of each chunk, you’ll call the mc.getOffset(b) method (Listing 13-6).
func (mc *MetaChunk) getOffset(b *bytes.Reader) {
    offset, _ := b.Seek(0, 1)u
    mc.Offset = offset
}
Listing 13-6: The getOffset() method (/ch-13 /imgInject/pnglib/commands.go)
The bytes.Reader contains a Seek() method that makes deriving the cur-
rent position quite simple. The Seek() method moves the current read or 
write offset and then returns the new offset relative to the start of the file. 
Hiding Data with Steganography   301
Its first argument is the number of bytes by which you want to move the 
offset and its second argument defines the position from which the move 
will occur. The second argument’s optional values are 0 (Start of File), 1 
(Current Position), and 2 (End of File). For example, if you wanted to shift 
8 bytes to the left from your current position, you would use b.Seek(-8,1). 
Here, b.Seek(0,1) u states that you want to move your offset 0 bytes 
from the current position, so it simply returns the current offset: essentially 
retrieving the offset without moving it.
The next methods we detail define how you read the actual chunk 
segment bytes. To make things a bit more legible, let’s create a readChunk() 
method and then create separate methods for reading each chunk subfield 
(Listing 13-7).
func (mc *MetaChunk) readChunk(b *bytes.Reader) {
    mc.readChunkSize(b)
    mc.readChunkType(b)
    mc.readChunkBytes(b, mc.Chk.Size) u
    mc.readChunkCRC(b)
}
func (mc *MetaChunk) readChunkSize(b *bytes.Reader) {
    if err := binary.Read(b, binary.BigEndian, &mc.Chk.Size); err != nil { v
        log.Fatal(err)
    }
}
func (mc *MetaChunk) readChunkType(b *bytes.Reader) {
    if err := binary.Read(b, binary.BigEndian, &mc.Chk.Type); err != nil {
        log.Fatal(err)
    }
}
func (mc *MetaChunk) readChunkBytes(b *bytes.Reader, cLen uint32) {
    mc.Chk.Data = make([]byte, cLen) w
    if err := binary.Read(b, binary.BigEndian, &mc.Chk.Data); err != nil {
        log.Fatal(err)
    }
}
func (mc *MetaChunk) readChunkCRC(b *bytes.Reader) {
    if err := binary.Read(b, binary.BigEndian, &mc.Chk.CRC); err != nil {
        log.Fatal(err)
    }
}
Listing 13-7: Chunk-reading methods (/ch-13 /imgInject/pnglib /commands.go)
The methods readChunkSize(), readChunkType(), and readChunkCRC() are all 
similar. Each reads a uint32 value into the respective field of the Chunk struct. 
However, readChunkBytes() is a bit of an anomaly. Because the image data is 
of variable length, we’ll need to supply this length to the readChunkBytes() 
function so that it knows how many bytes to read u. Recall that the data 
length is maintained in the SIZE subfield of the chunk. You identify the SIZE 
value v and pass it as an argument to readChunkBytes() to define a slice of 
302   Chapter 13
proper size w. Only then can the byte data be read into the struct’s Data 
field. That’s about it for reading the data, so let’s press on and explore writ-
ing byte data. 
Writing Image Byte Data to Implant a Payload
Although you can choose from many complex steganography techniques 
to implant payloads, in this section we’ll focus on a method of writing to a 
certain byte offset. The PNG file format defines critical and ancillary chunk 
segments within the specification. The critical chunks are necessary for 
the image decoder to process the image. The ancillary chunks are optional 
and provide various pieces of metadata that are not critical to encoding or 
decoding, such as timestamps and text. 
Therefore, the ancillary chunk type provides an ideal location to either 
overwrite an existing chunk or insert a new chunk. Here, we’ll show you 
how to insert new byte slices into an ancillary chunk segment. 
Locating a Chunk Offset
First, you need to identify an adequate offset somewhere in the ancillary 
data. You can spot ancillary chunks because they always start with lowercase 
letters. Let’s use the hex editor once again and open up the original PNG 
file while advancing to the end of the hex dump. 
Every valid PNG image will have an IEND chunk type indicating the final 
chunk of the file (the EOF chunk). Moving to the 4 bytes that come before 
the final SIZE chunk will position you at the starting offset of the IEND chunk 
and the last of the arbitrary (critical or ancillary) chunks contained within 
the overall PNG file. Recall that ancillary chunks are optional, so it’s pos-
sible that the file you’re inspecting as you follow along won’t have the same 
ancillary chunks, or any for that matter. In our example, the offset to the 
IEND chunk begins at byte offset 0x85258 (Figure 13-3). 
Figure 13-3: Identifying a chunk offset relative to the IEND position
Writing Bytes with the ProcessImage() Method
A standard approach to writing ordered bytes into a byte stream is to use 
a Go struct. Let’s revisit another section of the ProcessImage() method we 
started building in Listing 13-5 and walk through the details. The code in 
Listing 13-8 calls individual functions that you’ll build out as you progress 
through this section. 
Hiding Data with Steganography   303
func (mc *MetaChunk) ProcessImage(b *bytes.Reader, c *models.CmdLineOpts) u {
    --snip--
    v var m MetaChunk
    w m.Chk.Data = []byte(c.Payload)
    m.Chk.Type = m.strToInt(c.Type)x
    m.Chk.Size = m.createChunkSize()y
    m.Chk.CRC = m.createChunkCRC()z
    bm := m.marshalData(){
    bmb := bm.Bytes()
    fmt.Printf("Payload Original: % X\n", []byte(c.Payload))
    fmt.Printf("Payload: % X\n", m.Chk.Data)
    | utils.WriteData(b, c, bmb)
}
Listing 13-8: Writing bytes with the ProcessImage() method (/ch-13/imgInject/pnglib 
/commands.go)
This method takes a byte.Reader and another struct, models.CmdLineOpts, 
as arguments u. The CmdLineOpts struct, shown in Listing 13-9, contains flag 
values passed in via the command line. We’ll use these flags to determine 
what payload to use and where to insert it in the image data. Since the bytes 
you’ll write follow the same structured format as those read from preexist-
ing chunk segments, you can just create a new MetaChunk struct instance v 
that will accept your new chunk segment values. 
The next step is to read the payload into a byte slice w. However, you’ll 
need additional functionality to coerce the literal flag values into a usable 
byte array. Let’s dive into the details of the strToInt() x, createChunkSize() y, 
createChunkCRC() z, MarshalData() {, and WriteData() | methods.
package models
//CmdLineOpts represents the cli arguments
type CmdLineOpts struct {
    Input    string
    Output   string
    Meta     bool
    Suppress bool
    Offset   string
    Inject   bool
    Payload  string
    Type     string
    Encode   bool
    Decode   bool
    Key      string
} 
Listing 13-9: The CmdLineOpts struct (/ch-13 /imgInject/models/opts.go)
304   Chapter 13
The strToInt() Method
We’ll start with the strToInt() method (Listing 13-10).
func (mc *MetaChunk) strToInt(s string)u uint32 {
    t := []byte(s)
    v return binary.BigEndian.Uint32(t)
}
Listing 13-10: The strToInt() method (/ch-13 /imgInject/pnglib/commands.go)
The strToInt() method is a helper that consumes a string u as an argu-
ment and returns uint32 v, which is the necessary data type for your Chunk 
struct TYPE value. 
The createChunkSize() Method
Next, you use the createChunkSize() method to assign the Chunk struct SIZE 
value (Listing 13-11).
func (mc *MetaChunk) createChunkSize() uint32 {
return uint32(len(mc.Chk.Data)v)u
}
Listing 13-11: The createChunkSize() method (/ch-13 /imgInject/pnglib/commands.go)
This method will obtain the length of the chk.DATA byte array v and 
type-convert it to a uint32 value u.
The createChunkCRC() Method 
Recall that the CRC checksum for each chunk segment comprises both the 
TYPE and DATA bytes. You’ll use the createChunkCRC() method to calculate this 
checksum. The method leverages Go’s hash/crc32 package (Listing 13-12).
func (mc *MetaChunk) createChunkCRC() uint32 {
    bytesMSB := new(bytes.Buffer) u
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Type); err != nil { v
    log.Fatal(err)
    }
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Data); err != nil { w
        log.Fatal(err)
    }
    return crc32.ChecksumIEEE(bytesMSB.Bytes()) x
}
Listing 13-12: The createChunkCRC() method (/ch-13/imgInject/pnglib /commands.go)
Prior to arriving at the return statement, you declare a bytes.Buffer u 
and write both the TYPE v and DATA w bytes into it. The byte slice from the 
buffer is then passed as an argument to the ChecksumIEEE, and the CRC-32 
Hiding Data with Steganography   305
checksum value is returned as a uint32 data type. The return statement x is 
doing all the heavy lifting here, actually calculating the checksum on the 
necessary bytes.
The marshalData() Method
All necessary pieces of a chunk are assigned to their respective struct fields, 
which can now be marshaled into a bytes.Buffer. This buffer will provide 
the raw bytes of the custom chunk that are to be inserted into the new 
image file. Listing 13-13 shows what the marshalData() method looks like.
func (mc *MetaChunk) marshalData() *bytes.Buffer {
    bytesMSB := new(bytes.Buffer) u
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Size); err != nil { v
        log.Fatal(err)
    }
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Type); err != nil { w
        log.Fatal(err)
    }
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.Data); err != nil { x
        log.Fatal(err)
    }
    if err := binary.Write(bytesMSB, binary.BigEndian, mc.Chk.CRC); err != nil { y
        log.Fatal(err)
    }
    return bytesMSB 
}
Listing 13-13: The marshalData() method (/ch-13/imgInject/pnglib /commands.go)
The marshalData() method declares a bytes.Buffer u and writes the 
chunk information to it, including the size v, type w, data x, and check-
sum y. The method returns all the chunk segment data into a single con-
solidated bytes.Buffer.
The WriteData() Function
Now all you have left to do is to write your new chunk segment bytes into 
the offset of the original PNG image file. Let’s have a peek at the WriteData() 
function, which exists in a package we created named utils (Listing 13-14). 
//WriteData writes new Chunk data to offset
func WriteData(r *bytes.Readeru, c *models.CmdLineOptsv, b []bytew) {
    x offset, _ := strconv.ParseInt(c.Offset, 10, 64)
    y w, err := os.Create(c.Output)
    if err != nil {
        log.Fatal("Fatal: Problem writing to the output file!")
    }
    defer w.Close()
    z r.Seek(0, 0)
306   Chapter 13
    { var buff = make([]byte, offset)
    r.Read(buff)
    | w.Write(buff)
    } w.Write(b)
    ~ _, err = io.Copy(w, r)
    if err == nil {
        fmt.Printf("Success: %s created\n", c.Output)
    }
}
Listing 13-14: The WriteData() function (/ch-13 /imgInject/utils/writer.go)
The WriteData() function consumes a bytes.Reader u containing the 
original image file byte data, a models.CmdLineOpts v struct inclusive of the 
command line argument values, and a byte slice w holding the new chunk 
byte segment. The code block starts with a string-to-int64 conversion x in 
order to obtain the offset value from the models.CmdLineOpts struct; this will 
help you write your new chunk segment to a specific location without cor-
rupting other chunks. You then create a file handle y so that the newly 
modified PNG image can be written to disk.
You use the r.Seek(0,0) function call z to rewind to the absolute begin-
ning of the bytes.Reader. Recall that the first 8 bytes are reserved for the 
PNG header, so it’s important that the new output PNG image include these 
header bytes as well. You include them by instantiating a byte slice with a 
length determined by the offset value {. You then read that number of 
bytes from the original image and write those same bytes to your new image 
file |. You now have identical headers in both the original and new images.
You then write the new chunk segment bytes } into the new image 
file. Finally, you append the remainder of the bytes.Reader bytes ~ (that is, 
the chunk segment bytes from your original image) to the new image file. 
Recall that bytes.Reader has advanced to the offset location, because of the 
earlier read into a byte slice, which contains bytes from the offset to the 