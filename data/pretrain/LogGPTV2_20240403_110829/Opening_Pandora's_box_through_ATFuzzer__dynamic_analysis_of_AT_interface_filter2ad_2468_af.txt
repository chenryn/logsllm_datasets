of the primary objectives of our work is to test the robustness of the
AT interface, which is a different and complimentary end objective
than theirs.
BlueBug [24] exploits a Bluetooth security loophole on few
Bluetooth-enabled cell phones and issues AT commands via a covert
channel. It, however, relies on the Bluetooth security loophole to
attack and does not apply to all phones. In contrast, we have demon-
strated a variety of attacks using valid and invalid AT commands
running over Bluetooth which do not rely on any specific Bluetooth
assumptions and also applicable to all the modern smartphones
we had in our corpus. Injecting AT commands on android base-
band was previously discussed on the XDA forum [23]. Pereira
et al. [43, 45] used AT commands to flash malicious images on
Samsung phones. Hay [29] discovered that AT interface can be
exploited from Android bootloader and discovered new commands
and attacks using the AT interface. AT commands have been used to
exploit modems other than smartphones as well. Most prominently,
USBswitcher [44, 49] and [43] demonstrate how these commands
expose actions potentially causing security vulnerabilities in smart-
phones. Some other work use AT commands as a part of their tool,
for instance, Mulliner et al. [42] use the AT commands as feedback
while fuzzing SMS of phones. Xenakis et al. [57, 58] devise a tool
using AT commands to steal sensitive information from baseband.
None of them, however, actually analyzes or discovers bugs in the
AT parser itself.
Mutation based fuzzers. Initial mutation-based fuzzers [41] used
to mutate the test inputs randomly. To make this type of fuzzers
more effective, a huge amount of work has been carried out to de-
velop sophisticated techniques to improve mutation strategies— cov-
erage information through instrumenting the binary [28, 36, 37, 59];
resource usage information [35, 46]; control and data flow features
[48]; static vulnerability prediction models [38]; data-driven seed
generation [55]; high-level structural representation of seed file
[47]. There are also a few mutation-based fuzzers that incorporate
the idea of grammars rather than inputs. Wang et al. [56] use gram-
mars to guide mutation whereas Aschermann et al. [26] rely on
code coverage feedback. Simulated annealing power schedule with
genetic fuzzing has also been incorporated in [27]. However, due
to the black-box nature of our system and structural pattern of AT
command inputs, none of the existing concepts suffice fuzzing AT
parser.
Generation-based fuzzers. Generation based fuzzers generate
inputs based on a model [19, 20, 31, 54], specification or defined
grammars. However, to the best of our knowledge, no fuzzer discov-
ers a class of bugs at the grammar-level, rather generates concrete
input instances. There are also some generation-based, more pre-
cisely, defined grammar-based fuzzers [16] [15] which use manually
specified grammars as inputs. For instance, Mangeleme is an auto-
mated broken HTML generator and fuzzer, and Jsfunfuzz [15] uses
specific knowledge about past and present vulnerabilities and uses
grammar rules to produce inputs that may cause problems. Both of
them are, however, random fuzzers.
7 DISCUSSION
Defenses. Our findings show that current implementations of base-
band processors and AT command interfaces fail to correctly parse
and filter out some of the possible anomalous inputs. In this pa-
per, we do not explicitly explore defenses for preventing malicious
users from exploiting these flaws. However, our findings signify
that restricting the AT interface through access control policies,
black-listing may not work due to the parsing bugs and invalid AT
commands that the parser executes. Completely removing the ex-
posure of AT modem interface over Bluetooth and USB can resolve
the problem. Other than that, at a conceptual level, having a formal
grammar specification of the supported AT command grammar
may provide a better way to test the AT interface. Another aspect
that particularly requires attention is the deployment of stricter
policies that filter out anomalous AT commands.
Responsible disclosure. Given the sensitive nature of our find-
ings, we have reported these to the relevant stakeholders (e.g.,
respective modems and devices vendors and manufacturers). More-
over, following the responsible disclosure policy, we have waited
90 days before making our findings public. Currently, to our knowl-
edge, Samsung has been working to issue a patch to mitigate the
vulnerabilities.
5418 CONCLUSION AND FUTURE WORK
The paper proposes ATFuzzer for testing the correctness of the AT
interface exposed by the baseband processor in a smartphone. To-
wards this goal, ATFuzzer leverages a grammar-guided evolutionary
fuzzing-based approach. Unlike generational fuzzers which use the
input grammar to generate syntactically correct inputs, ATFuzzer
mutates the production rules in the grammar itself. Such an ap-
proach enables ATFuzzer to not only efficiently navigate the input
search space but also allows it to exercise a diverse set of input AT
commands. In our evaluation with ATFuzzer on 10 Android smart-
phones from 6 vendors revealed 4 invalid AT command grammars
that are processed by the Bluetooth AT interface and can induce
DoS, downgrade connectivity, and privacy leaks. For the USB AT
interface, on the other hand, ATFuzzer identified 13 invalid AT com-
mand grammars which are equally damaging as the ones found
for the Bluetooth AT interface. Our findings have been responsibly
shared with the relevant stakeholders among which Samsung has
acknowledged our findings and are working towards a patch. Two
of our findings have also been assigned CVEs (CVE-2019-16400 and
CVE-2019-16401).
Future work. In the future, we want to apply hybrid fuzzing in
our problem domain. In the hybrid fuzzing paradigm, a black-box
fuzzer’s capabilities are enhanced through the use of lightweight
static analysis (e.g., dynamic symbolic execution, taint analysis).
Such an approach would, however, require us to address the issues
concerning firmware binaries’ practice of employing obfuscation
and encryption.
ACKNOWLEDGEMENT
We thank the anonymous reviewers for their suggestions. This
work is supported by NSF grants CNS-1657124 and CNS-1719369,
Intel, and a grant by Purdue Research Foundation.
REFERENCES
[1] [n.d.]. AT Commands For CDMA Wireless Modems. http://www.canarysystems.
com/nsupport/CDMA_AT_Commands.pdf.
[2] [n.d.]. CVE-2016-4030.
https://nvd.nist.gov/vuln/detail/CVE-2016-4030.
[3] [n.d.]. CVE-2016-4031.
[4] [n.d.]. CVE-2016-4032.
https://nvd.nist.gov/vuln/detail/CVE-2016-4031.
https://nvd.nist.gov/vuln/detail/CVE-2016-4032.
[5] [n.d.]. CVE-2019-16400.
[6] [n.d.]. CVE-2019-16401.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16400.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16401.
[7] [n.d.]. CWE-325: Missing Required Cryptographic Step - CVE-2018-5383. In
Cernegie Mellon University ,CERT Coordination Center. https://www.kb.cert.org/
vuls/id/304725/.
[8] [n.d.]. Digital cellular telecommunications system (Phase 2+); AT Command
set for GSM Mobile Equipment (ME) (3GPP TS 07.07 version 7.8.0 Release
1998).
https://www.etsi.org/deliver/etsi_ts/100900_100999/100916/07.08.00_
60/ts_100916v070800p.pdf.
[9] [n.d.]. Digital cellular telecommunications system (Phase 2+) (GSM); Universal
Mobile Telecommunications System (UMTS); LTE; AT command set for User
Equipment (UE) (3GPP TS 27.007 version 13.6.0 Release 13). https://www.etsi.
org/deliver/etsi_ts/127000_127099/127007/13.06.00_60/ts_127007v130600p.pdf.
[10] [n.d.]. Digital cellular telecommunications system (Phase 2+); Specification of
the Subscriber Identity Module -Mobile Equipment (SIM-ME) interface (3GPP TS
51.011 version 4.15.0 Release 4). https://www.etsi.org/deliver/etsi_TS/151000_
151099/151011/04.15.00_60/ts_151011v041500p.pdf.
[11] [n.d.]. Digital cellular telecommunications system (Phase 2+), Universal Mobile
Telecommunications System UMTS, LTE, AT command set for User Equipment
UE. https://www.etsi.org/deliver/etsi_ts/127000_127099/127007/10.03.00_60/ts_
127007v100300p.pdf.
[12] [n.d.]. Digital cellular telecommunications system (Phase 2+); Use of Data Ter-
minal Equipment - Data Circuit terminating; Equipment (DTE - DCE) interface
for Short Message Service (SMS) and Cell Broadcast Service (CBS) (GSM 07.05
version 5.3.0). https://www.etsi.org/deliver/etsi_gts/07/0705/05.03.00_60/gsmts_
0705v050300p.pdf.
[13] [n.d.]. EVDO and CDMA AT Commands Reference Guide.
multitech.com/documents/publications/manuals/s000546.pdf.
[14] [n.d.]. HUAWEI MU609 HSPA LGA Module Application Guide.
https://www.paoli.cz/out/media/HUAWEI_MU609_HSPA_LGA_Module_
Application_Guide_V100R002_02(1).pdf.
https://www.
[15] [n.d.]. jsfunfuzz [online].
https://github.com/MozillaSecurity/funfuzz/tree/master/src/funfuzz/js/
jsfunfuzz.
[16] [n.d.]. Mangleme [Online].
https://github.com/WebKit/webkit/tree/master/Tools/mangleme.
[17] [n.d.].
Motorola AT Command Set.
https://ipfs.io/ipfs/
QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Motorola_
phone_AT_commands.html.
[18] [n.d.]. Neo 1973 and Neo FreeRunner GSM modem, AT Command set. http:
//wiki.openmoko.org/wiki/Neo_1973_and_Neo_FreeRunner_gsm_modem.
[19] [n.d.]. Peach Fuzzer Platform [online]. https://www.peach.tech/.
[20] [n.d.]. Radamsa [online]. https://gitlab.com/akihe/radamsa.
[21] [n.d.]. Sony Erricsson AT Command set. https://www.activexperts.com/sms-
component/at/sonyericsson/.
[22] [n.d.]. Wikipedia.
https://en.wikipedia.org/wiki/Hayes_command_set.
[23] [n.d.]. XDA Forum [online].
https://forum.xda-developers.com/galaxy-s2/help/how-to-talk-to-modem-
commands-t1471241.
[24] M.Herfurt A. Laurie, M. Holtmann. [n.d.]. The bluebug. AL Digital Ltd. https:
//trifinite.org/trifinite_stuff_bluebug.html#introduction.
[25] Iosif Androulidakis. 2011. Intercepting mobile phone calls and short messages
using a gsm tester. In International Conference on Computer Networks. Springer,
281–288.
[26] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig,
Ahmad-Reza Sadeghi, and Daniel Teuchert. 2019. NAUTILUS: Fishing for Deep
Bugs with Grammars. In Proceedings of the Network and Distributed System
Security Symposium (NDSS).
[27] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury.
2017. Directed greybox fuzzing. In Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2329–2344.
[28] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen. [n.d.]. CollAFL: Path
Sensitive Fuzzing. In 2018 IEEE Symposium on Security and Privacy (SP), Vol. 00.
660–677. https://doi.org/10.1109/SP.2018.00040
[29] Roee Hay. 2017. fastboot oem vuln: android bootloader vulnerabilities in vendor
customizations. In 11th {USENIX} Workshop on Offensive Technologies ({WOOT}
17).
[30] Roee Hay and Michael Goberman. 2017. Attacking Nexus 6 & 6P Custom
Bootmodes.
https://www.docdroid.net/dxKUj5c/attacking-nexus-6-
6p-custom-bootmodes.pdf.
[31] Christian Holler, Kim Herzig, and Andreas Zeller. [n.d.]. Fuzzing with Code
(2017).
[32] Syed Rafiul Hussain, Omar Chowdhury, Shagufta Mehnaz, and Elisa Bertino.
2018. LTEInspector: A Systematic Approach for Adversarial Testing of 4G LTE.
In 25th Annual Network and Distributed System Security Symposium, NDSS, San
Diego, CA, USA, February 18-21.
[33] Syed Rafiul Hussain, Mitziu Echeverria, Omar Chowdhury, Ninghui Li, and Elisa
Bertino. 2019. Privacy Attacks to the 4G and 5G Cellular Paging Protocols Using
Side Channel Information. (2019).
[34] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. 2018.
Evaluating Fuzz Testing. In Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’18). ACM, New York, NY, USA,
2123–2138. https://doi.org/10.1145/3243734.3243804
[35] Caroline Lemieux, Rohan Padhye, Koushik Sen, and Dawn Song. 2018. PerfFuzz:
Automatically Generating Pathological Inputs. In Proceedings of the 27th ACM
SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2018).
ACM, New York, NY, USA, 254–265. https://doi.org/10.1145/3213846.3213874
[36] Caroline Lemieux and Koushik Sen. 2018. FairFuzz: A Targeted Mutation Strat-
egy for Increasing Greybox Fuzz Testing Coverage. In Proceedings of the 33rd
ACM/IEEE International Conference on Automated Software Engineering (ASE 2018).
ACM, New York, NY, USA, 475–485. https://doi.org/10.1145/3238147.3238176
[37] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu,
and Alwen Tiu. 2017. Steelix: Program-state Based Binary Fuzzing. In Proceedings
of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE
2017). ACM, New York, NY, USA, 627–637. https://doi.org/10.1145/3106237.
3106295
Fragments.
542Some of the devices we tested expose their modem functional-
ity by default and therefore required no additional configuration
(also listed in Table 1). On the other hand, for the devices that do
not expose any modem, it was necessary to root them and set a
specific type of USB configuration. The USB configuration can be
changed by setting sys.usb.config property. All the devices can be
accessed through ADB (Android Debug Bridge) and Fastboot tools.
With ADB it is possible to access the device’s file system, reboot
it in different modes, such as bootloader mode, rooting it, and
finally change the device’s properties directly with the command
setprop  . With fastboot, it is possible
to operate the device in bootloader mode, install new partitions
and change pre-boot settings required for rooting. For LG Nexus 5,
we had to set sys.usb.config from the default “mnt,adb” to “diag,adb”
through adb shell. This setting allows to access the phone in
diagnostic mode and therefore to communicate with the AT com-
mand interface. For Motorola Nexus 6 and Huawei Nexus 6P, the
USB configuration can be changed by first rebooting the phone in
bootloader mode and then issuing the command “fastboot oem
bp-tools-on” and “fastboot oem enable-bp-tools” to Nexus 6
and Nexus 6P, respectively as reported in [30]. After establishing
serial communication with the device, it is possible to communicate
with the smartphone through the AT interface.
[38] Yuwei Li, Shouling Ji, Chenyang Lv, Yuan Chen, Jianhai Chen, Qinchen Gu, and
Chunming Wu. 2019. V-Fuzz: Vulnerability-Oriented Evolutionary Fuzzing. CoRR
abs/1901.01142 (2019). arXiv:1901.01142 http://arxiv.org/abs/1901.01142
[39] Angela Lonzetta, Peter Cope, Joseph Campbell, Bassam Mohd, and Thaier Haya-
jneh. 2018. Security vulnerabilities in Bluetooth technology as used in IoT. Journal
of Sensor and Actuator Networks 7, 3 (2018), 28.
[40] Ulrike Meyer and Susanne Wetzel. 2004. A man-in-the-middle attack on UMTS.
In Proceedings of the 3rd ACM workshop on Wireless security. ACM, 90–97.
[41] Barton P. Miller, Louis Fredriksen, and Bryan So. 1990. An Empirical Study
of the Reliability of UNIX Utilities. Commun. ACM 33, 12 (Dec. 1990), 32–44.
https://doi.org/10.1145/96267.96279
[42] Collin Mulliner and Charlie Miller. 2009. Fuzzing the Phone in your Phone (Black
Hat USA 2009).
[43] André Pereira, Manuel Correia, and Pedro Brandão. 2014. Charge your device
with the latest malware.. In BlackHat Europe.
[44] André Pereira, Manuel Correia, and Pedro Brandão. 2014. USB Connection
Vulnerabilities on Android Smartphones: Default and Vendors’ Customizations.
In Communications and Multimedia Security, Bart De Decker and André Zúquete
(Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 19–32.
[45] André Pereira, Manuel Correia, and Pedro Brandão. 2014. USB connection
vulnerabilities on android smartphones: Default and vendorsâĂŹ customizations.
In IFIP International Conference on Communications and Multimedia Security.
Springer, 19–32.
[46] Theofilos Petsios, Jason Zhao, Angelos D. Keromytis, and Suman Jana. 2017.
SlowFuzz: Automated Domain-Independent Detection of Algorithmic Complexity
Vulnerabilities. CoRR abs/1708.08437 (2017). arXiv:1708.08437 http://arxiv.org/
abs/1708.08437
[47] Van-Thuan Pham, Marcel Böhme, Andrew E. Santosa, Alexandru Razvan Caci-
Smart Greybox Fuzzing. CoRR
[48] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida,
and Herbert Bos. 2017. Vuzzer: Application-aware evolutionary fuzzing. In
Proceedings of the Network and Distributed System Security Symposium (NDSS).
[49] P. Roberto and F. Aristide. 2014. Modem interface exposed via USB.. In BlackHat
Europe. https://github.com/ud2/advisories/tree/master/android/samsung/nocve-
2016-0004.
[50] David Rupprecht, Katharina Kohls, Thorsten Holz, and Christina Pöpper. [n.d.].
ulescu, and Abhik Roychoudhury. 2018.
abs/1811.09447 (2018). arXiv:1811.09447 http://arxiv.org/abs/1811.09447
[51] Mike Ryan. 2013. Bluetooth: With low energy comes low security. In Presented
[52] Wireless Solutions Telit.
AT Commands Reference Guide.
Breaking LTE on layer two.
as part of the 7th {USENIX} Workshop on Offensive Technologies.
https://www.telit.com/wp-content/uploads/2017/09/Telit_AT_Commands_
Reference_Guide_r24_B.pdf.
[53] Dave (Jing) Tian, Grant Hernandez, Joseph I. Choi, Vanessa Frost, Christie
Raules, Patrick Traynor, Hayawardh Vijayakumar, Lee Harrison, Amir Rahmati,
Michael Grace, and Kevin R. B. Butler. 2018. ATtention Spanned: Comprehen-
sive Vulnerability Analysis of AT Commands Within the Android Ecosystem. In
27th USENIX Security Symposium (USENIX Security 18). Baltimore, MD, 273–290.
https://www.usenix.org/conference/usenixsecurity18/presentation/tian.
[54] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos. 2016. IFuzzer:
An Evolutionary Interpreter Fuzzer Using Genetic Programming. In Computer
Security – ESORICS 2016, Ioannis Askoxylakis, Sotiris Ioannidis, Sokratis Katsikas,
and Catherine Meadows (Eds.). Springer International Publishing, Cham, 581–
601.
[55] J. Wang, B. Chen, L. Wei, and Y. Liu. 2017. Skyfire: Data-Driven Seed Generation
for Fuzzing. In 2017 IEEE Symposium on Security and Privacy (SP). 579–594. https:
//doi.org/10.1109/SP.2017.23
[56] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2018. Superion: Grammar-
Aware Greybox Fuzzing. CoRR abs/1812.01197 (2018). arXiv:1812.01197 http:
//arxiv.org/abs/1812.01197
[57] Christos Xenakis and Christoforos Ntantogian. 2015. Attacking the baseband
modem of mobile phones to breach the users’ privacy and network security.
In Cyber Conflict: Architectures in Cyberspace (CyCon), 2015 7th International
Conference on. IEEE, 231–244.
[58] Christos Xenakis, Christoforos Ntantogian, and Orestis Panos. 2016. (U) SimMon-
itor: A mobile application for security evaluation of cellular networks. Computers
& Security 60 (2016), 62–78.
[59] M. Zalewski. [n.d.]. American fuzzy lop. [online]. http://lcamtuf.coredump.cx/afl/.
[n.d.].
A APPENDIX
A.1 Target Devices Configuration.
In this section, we provide additional detailed information about
the required set up for the devices we tested.
543