### Primary Objectives

One of the primary objectives of our work is to test the robustness of the AT interface. This objective is distinct and complementary to the goals of other studies. 

### BlueBug Exploit

BlueBug [24] exploits a Bluetooth security vulnerability on a few Bluetooth-enabled cell phones, allowing it to issue AT commands via a covert channel. However, this method relies on the Bluetooth security loophole and is not applicable to all phones. In contrast, we have demonstrated a variety of attacks using both valid and invalid AT commands over Bluetooth, which do not depend on any specific Bluetooth assumptions and are applicable to all modern smartphones in our corpus.

### Previous Work on AT Commands

Injecting AT commands into the Android baseband was previously discussed on the XDA forum [23]. Pereira et al. [43, 45] used AT commands to flash malicious images on Samsung phones. Hay [29] discovered that the AT interface can be exploited from the Android bootloader and identified new commands and potential attacks. AT commands have also been used to exploit modems other than smartphones. For example, USBswitcher [44, 49] and [43] demonstrate how these commands can expose actions that potentially cause security vulnerabilities in smartphones. Other works, such as Mulliner et al. [42], use AT commands as feedback while fuzzing SMS on phones. Xenakis et al. [57, 58] developed a tool using AT commands to steal sensitive information from the baseband. However, none of these studies analyze or discover bugs in the AT parser itself.

### Mutation-Based Fuzzers

Initial mutation-based fuzzers [41] randomly mutated test inputs. To enhance the effectiveness of these fuzzers, significant research has focused on developing sophisticated techniques to improve mutation strategies. These include:
- Coverage information through binary instrumentation [28, 36, 37, 59]
- Resource usage information [35, 46]
- Control and data flow features [48]
- Static vulnerability prediction models [38]
- Data-driven seed generation [55]
- High-level structural representation of seed files [47]

Some mutation-based fuzzers incorporate grammars to guide mutations, such as Wang et al. [56] and Aschermann et al. [26], who rely on code coverage feedback. Simulated annealing power schedules with genetic fuzzing have also been incorporated [27]. However, due to the black-box nature of our system and the structural pattern of AT command inputs, existing concepts are insufficient for fuzzing the AT parser.

### Generation-Based Fuzzers

Generation-based fuzzers generate inputs based on a model [19, 20, 31, 54], specification, or defined grammars. To our knowledge, no fuzzer discovers a class of bugs at the grammar level; instead, they generate concrete input instances. Some generation-based fuzzers, such as Mangleme [16] and Jsfunfuzz [15], use manually specified grammars as inputs. For instance, Mangleme is an automated broken HTML generator and fuzzer, and Jsfunfuzz uses specific knowledge about past and present vulnerabilities to produce problematic inputs. Both of these tools are random fuzzers.

### Discussion

#### Defenses

Our findings indicate that current implementations of baseband processors and AT command interfaces fail to correctly parse and filter out some anomalous inputs. We do not explicitly explore defenses against these flaws, but our results suggest that restricting the AT interface through access control policies or blacklisting may not be effective due to parsing bugs and the execution of invalid AT commands. Completely removing the exposure of the AT modem interface over Bluetooth and USB could resolve the problem. Additionally, having a formal grammar specification for supported AT commands may provide a better way to test the AT interface. Stricter policies that filter out anomalous AT commands are also necessary.

#### Responsible Disclosure

Given the sensitive nature of our findings, we reported them to relevant stakeholders, including modem and device vendors and manufacturers. Following responsible disclosure policy, we waited 90 days before making our findings public. Currently, Samsung is working on issuing a patch to mitigate the vulnerabilities.

### Conclusion and Future Work

This paper proposes ATFuzzer, a tool for testing the correctness of the AT interface exposed by the baseband processor in smartphones. ATFuzzer leverages a grammar-guided evolutionary fuzzing approach, mutating production rules in the grammar to efficiently navigate the input search space and exercise a diverse set of AT commands. Our evaluation of ATFuzzer on 10 Android smartphones from 6 vendors revealed 4 invalid AT command grammars processed by the Bluetooth AT interface, which can induce DoS, downgrade connectivity, and privacy leaks. For the USB AT interface, ATFuzzer identified 13 invalid AT command grammars with similar effects. Our findings have been responsibly shared with relevant stakeholders, and Samsung has acknowledged them and is working on a patch. Two of our findings have been assigned CVEs (CVE-2019-16400 and CVE-2019-16401).

#### Future Work

In the future, we plan to apply hybrid fuzzing in our problem domain. Hybrid fuzzing enhances black-box fuzzers' capabilities through lightweight static analysis, such as dynamic symbolic execution and taint analysis. However, this approach will require addressing issues related to firmware binaries employing obfuscation and encryption.

### Acknowledgements

We thank the anonymous reviewers for their suggestions. This work is supported by NSF grants CNS-1657124 and CNS-1719369, Intel, and a grant by the Purdue Research Foundation.

### References

[References are listed as provided in the original text.]

### Appendix

#### A.1 Target Devices Configuration

In this section, we provide additional detailed information about the required setup for the devices we tested. Some devices expose their modem functionality by default and require no additional configuration (also listed in Table 1). For devices that do not expose any modem, it was necessary to root them and set a specific type of USB configuration. The USB configuration can be changed by setting the `sys.usb.config` property. All devices can be accessed through ADB (Android Debug Bridge) and Fastboot tools. With ADB, it is possible to access the device’s file system, reboot it in different modes, root it, and change the device’s properties directly with the `setprop` command. With Fastboot, it is possible to operate the device in bootloader mode, install new partitions, and change pre-boot settings required for rooting. For LG Nexus 5, we had to set `sys.usb.config` from the default "mnt,adb" to "diag,adb" through ADB shell. This setting allows access to the phone in diagnostic mode and communication with the AT command interface. For Motorola Nexus 6 and Huawei Nexus 6P, the USB configuration can be changed by first rebooting the phone in bootloader mode and then issuing the commands "fastboot oem bp-tools-on" and "fastboot oem enable-bp-tools" to Nexus 6 and Nexus 6P, respectively, as reported in [30]. After establishing serial communication with the device, it is possible to communicate with the smartphone through the AT interface.