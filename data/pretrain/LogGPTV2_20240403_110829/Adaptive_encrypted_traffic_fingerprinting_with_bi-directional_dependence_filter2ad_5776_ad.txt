i
s
b
e
w
#
VNG++
77.8
66.6
61.0
58.7
65.8
TOR
OSAD BINDSVM
82.3
77.6
72.3
69.9
68.7
68.5
58.5
51.2
42.6
39.3
P
81.3
74.9
70.3
67.6
65.8
Table 8: Accuracy (in %) of closed-world website ﬁngerprinting
on Tor dataset with Trafﬁc Morphing.
the average accuracy obtained on the HTTPS dataset when TM is
applied on all websites in the closed-world setting. It is important to
note that for every experiment, we apply TM by selecting a random
target website. BINDSVM performs with signiﬁcant improvement
in average accuracy on all experiment settings compared to other
competing methods. For instance, BINDSVM reports an average
accuracy of 73.2% with 100 closed-world websites. This is better
than the average accuracy of 67.4% reported by OSAD, which is the
second highest accuracy in this setting.
Similarly, Table 8 shows the average accuracy obtained on the TOR
dataset when TM is applied on all websites. From the table, we can
observe that the BINDSVM method outperforms other methods.
In the open-world setting, we apply TM on the HTTPS dataset. The
TPR and FPR results are shown in Table 9. The BINDRF method reports
an average TPR of 98.5%. However, it also reports an undesirable high
FPR of 72.4%. This high FPR indicates that more false alarms are
reported by this classifer. In contrast, the BINDWKNN method reports
82% average TPR, which is greater than 74% reported by the WKNN
method. Moreover, it also reports the lowest average FPR of 24% on
the dataset. This shows the effectiveness of this defense on HTTPS
dataset. It also indicates that BIND features aid the weighted k-Nearest
Neighbors algorithm to classify more accurately than merely using
Uni-Burst features.
Table 9 also shows the average TPR and FPR obtained on the TOR
dataset when using competing methods while applying the Tamaraw
defense mechanism. In the case of methods that use the weighted k-NN
Dataset
HTTPS
Tor
Score
TPR
FPR
TPR
FPR
Method
WKNN BINDWKNN BINDRF
98.5
72.4
100.0
0.0
74.0
29.0
2.7
0.0
82.0
24.0
2.7
0.0
Table 9: TPR and FPR (in %) in open-world setting for website
ﬁngerprinting on HTTPS dataset with Trafﬁc Morphing, and
Tor dataset with Tamaraw.
algorithm, i.e., WKNN and BINDWKNN, we obtain a low TPR of 2.7%.
This result agrees with that reported by Wang et al. [36] who use the
WKNN method on the same dataset. Yet rather remarkably, we obtain a
TPR of 100% and an FPR of 0% from the BINDRF method. This
highly accurate classiﬁcation is a result of a combination of BIND
features and random forest classiﬁers, where features of monitored
websites are morphed by Tamaraw. Moreover, the morphing scheme
involves changing packet time and size values. In the BIND feature set,
we consider quantized tuple counts as features (Bi-Burst), along with
other Uni-Burst features. Changing the packet time information by a
constant may not successfully destroy characteristic information in a
trace. Furthermore, the tree structure of weak learners (decision trees)
in the random forest classiﬁer aids in a better classiﬁcation as illustrated
in Table 6. This combination provides a perfect classiﬁcation of the
morphed dataset in this case.
4.3.3 Trafﬁc Analysis with Defenses for App Finger-
printing
We evaluated our proposed data analysis technique in an adversarial
environment for WFIN. A user may visit any website s/he desires
using an anonymity network to protect against surveillance from
external adversaries on the network. However, this case may not
be directly applicable to AFIN. An app is typically deployed on a
well-recognized app store such as Google Play. These apps typically
may not provide users an ability to conﬁgure network trafﬁc to use a
user-desired anonymity network such as Tor. They use the default
network conﬁguration set on the host device. However, the goal of an
adversary in AFIN might be to identify vulnerable apps or malware
installed on a device in order to perform attacks such as privilege
escalation [13] targeted on the user. Therefore, we perform experiments
on app trafﬁc when defenses such as TM are applied to reduce chances
of app identiﬁcation.
We assume that defenses like packet padding could be applied to app
trafﬁc and evaluate the data analysis techniques when the padding
technique of TM is used. Instead of morphing the packet distribution of
a website with another one in the case of WFIN, packet distribution of
184
Dataset
Method
20
40
60
80
100
s
p
p
A
#
VNG++
71.5
58.3
50.2
44.6
42.9
APP-FIN
P
68.3
59.1
51.7
44.8
42.1
OSAD BINDSVM
77.0
67.0
59.2
53.8
50.4
77.6
61.0
56.0
49.3
49.2
Table 10: Accuracy (in %) of closed-world app ﬁngerprinting
while using Trafﬁc Morphing.
Dataset
APP-FIN
APP-COMM
APP-SOCIAL
Score
TPR
FPR
TPR
FPR
TPR
FPR
Method
WKNN BINDWKNN BINDRF
20.5
5.1
66.8
4.1
68.6
1.2
22.0
13.0
46.0
5.0
68.0
4.0
16.0
14.0
41.0
7.0
67.0
5.0
Table 11: TPR and FPR (in %) of open-world app ﬁngerprint-
ing while using Trafﬁc Morphing.
an app is morphed to appear similar to another app. Table 10 shows the
accuracy of this scenario in the closed-world setting on the APP-FIN
dataset with the morphed trafﬁc. Similar to the results in Table 7,
the average accuracy reported by BINDSVM method is higher than
other competing methods in most cases. Results of the open-world
setting are given in Table 11. Clearly, BIND performs better than other
competing methods. A low FPR with a high TPR are reported by the
BINDRF method compared to WKNN. Another important observation
is that the TPR resulting from the APP-FIN dataset is lower than other
categories. This shows that intra-category differentiating characteristic
features may be affected more than inter-category features while using
morphing techniques. Overall, these results reinforce our hypothesis
that BIND methods provide good characteristic properties from traces
which can be used for a better entity identiﬁcation.
However, we realize that TPR is low when compared to that of the
WFIN datasets in Table 9. The network signature of an app is different
from that of a website. Apps use the Internet to connect to services
and communicate minimal amount of data as necessary. In contrast,
browsing a website could potentially generate a larger network trace
since all the components of a website have to be downloaded to the
browser. A smaller network footprint may affect the ﬁngerprinting
process.
4.3.4 Execution Time
Figure 6 shows the execution time for experiments in Table 5 on
the TOR dataset, where OSAD outperforms the other methods. The
x-axis in the ﬁgure represents the number of websites, while the y-axis
represents the execution time (in seconds) in logarithmic scale (base
10). The execution times of VNG++, P, and BINDSVM classiﬁers are
low compared to that of OSAD. For instance, with 60 websites, OSAD
takes 2340 sec while VNG++, P, and BINDSVM take 25, 31, and 39
sec, respectively. This shows how OSAD incurs extra overhead which
may render it impractical in some scenarios. In the case of open-world
setting, we observed that WKNN and BINDWKNN (> 30 mins) took
signiﬁcantly longer time than BINDRF (< 60 secs), due to weight
computations. Yet, BINDRF outperformed BINDWKNN (or WKNN) in
Table 6 and Table 11 on most cases.
4.3.5 Base Detection Rate Analysis
In this section, for the open-world scenario, we study the effect of
BIND in a more realistic scenario which considers the probability of a
client visiting a website or using an app in the monitored set, referred to
185
i
)
e
m
T
(
0
1
g
o
l
 5
 4
 3
 2
 1
 0
 20
VNG++
P
OSAD
BIND
 40
 60
Number of websites
 80
 100
Figure 6: Running time (in seconds) for the experiments in Ta-
ble 5, on TOR dataset. Note that time axis is in logarithmic
scale to the base 10.
as prior or base rate. This has been recently raised as a concern in the
research community in WFIN [23].
The base detection rate (BDR) is the probability of a trace being
actually monitored, given that the classiﬁer predicted (detected) it as
monitored. Using the Bayes Theorem, BDR is formulated as:
P (M|D) =
P (M ) P (D|M )
P (M ) P (D|M ) +P (¬M ) P (D|¬M )]
,
(1)
where M and D are random variables denoting the actual monitored
and the detection as monitored by the classiﬁer, respectively. We
use TPR and FPR, from Table 6, as approximations of P (D|M ) and
P (D|¬M ), respectively.
Table 12 presents the BDR computed for the open-world classiﬁers.
We assume P (M ) or prior is calculated as the size of the monitored set
divided by the world size (the size of the monitored and non-monitored
set), i.e., P (M ) =
. The table shows
the BDR for the different datasets.
|monitored|+|non−monitored|
|monitored|
Although BIND methods ourperform other methods, as the results in
Table 12 indicate, the numbers expose a practical concern in ﬁngerprint-
ing research: despite having high accuracy values, typical ﬁngerprinting
detection methods are rendered ineffective when confronted with
their staggeringly low base detection rates. This is in part due to their
intrinsic inability to eliminate false positives in operational contexts.
However, we follow a similar approach to the results of a recent
study [16] in Anomaly Detection to approximate the prior for the
speciﬁc scenario of a targeted user. The study assumes a model
with a determined attacker leveraging one or more exploits of known
vulnerabilities to penetrate a typical organization’s internal network, and
approximates the prior of a directed attack to 6% (using threat statistics
from 2011). Similarly, we model a targeted user where the prior
increases given other estimates. For example, consider a government
tracking a suspicious user (targeted) with a prior knowledge or estimate
that increases the probability of such user visiting certain websites or
using certain apps (monitored) or carrying out speciﬁc online activities
(e.g. suspicious activities).
Figure 7 depicts this process using TPR and FPR obtained from
Table 6 with the TOR dataset. In this ﬁgure, we show the effect of
increasing the prior, starting from 2% which is the actual P (M ).
Similarly, Figure 8 shows the effect of increasing this prior on the same
dataset while applying the Tamaraw defense, using TPR and FPR
from Table 9. The ﬁgures show how increasing the prior improves
the BDR signiﬁcantly. As our conﬁdence about the prior raises, the
corresponding BDR increases to practical values.
Method
WKNN
BINDWKNN
BINDRF
HTTPS
7.4
15.3
14.6
Dataset
TOR APP-FIN APP-COMM APP-SOCIAL
22.5
46.4
49.2
47.1
68.6
37.4
27.14
54.4
25.3
6.7
13.1
38.7
Table 12: Base detection rate percentages in the open-world
setting.
)
%
(
R
D
B
 100
 90
 80
 70
 60
 50
 40
 30
WKNN
BINDWKNN
BINDRF
 2
 4
 6
 10  12  14  16  18
 8
Prior Probability (%) 
Figure 7: Increasing prior effect on BDR using the Tor dataset