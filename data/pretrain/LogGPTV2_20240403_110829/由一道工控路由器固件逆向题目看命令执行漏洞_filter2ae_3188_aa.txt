# 由一道工控路由器固件逆向题目看命令执行漏洞
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
2019 工控安全比赛第一场的一道固件逆向的题目，好像也比较简单，好多人都做出来了。这里就分别从静态和动态调试分析复现一下这个命令执行的洞。
## 赛题说明
题目给的场景倒是挺真实的：路由器在处理 tddp 协议时出现了命令注入，导致了远程命令执行。就是后面做出来的这个答案的格式咋提交都不对…
题目给了一个压缩文件，解压出来时一个 bin 文件。
使用 binwalk -Me 直接解压，得到了与一个标准的 linux 风格的文件系统：
  * 后来知道这个固件其实就是 tp_link SR20 路由器 v1 版本的固件，在 seebug 上有相应的分析文章：  
  * 固件下载地址：
拿到文件系统之后，需要定位到相应的漏洞点，也就是在处理 tddp 协议的二进制文件中。
题目要求时找到 CMD _?_? 格式的消息类型，那么就使用 `grep -rnl "CMD_." *` 命令，再根据 tddp 协议定位到
usr/bin/tddp 这个文件，接着开始进行静态分析。
## 环境搭建
###  准备工具
  * binwalk
  * IDA
  * qemu-arm
这里尝试在 qemu 的用户模式下进行动态调试发现有问题，所以 **需要在系统模式下将固件跑起来** ，因此就要进行系统环境的搭建。
qemu arm 的环境：  
 提取码：xpnl
[安装方法](https://paper.seebug.org/879/#arm-qemu)在那篇文章中已经说的很清楚了，就不重复造轮子了。
## 静态分析
将 ./usr/bin/tddp 加载到 IDA 中， **搜索关键字符串** ，这些关键字都在同一个函数中，回溯可以找到漏洞的函数。
函数的代码比较长，所以中间省略了一部分，这个函数就是对通过运行在 1040 端口上的 tddp
协议接收到的数据进行解析，并执行相应的分支操作。（函数中使用了 switch case 来实现）
    int __fastcall CMD_handle(_BYTE *a1, _DWORD *a2)
    {
      uint32_t v2; // r0
      __int16 v3; // r2
      uint32_t v4; // r0
      __int16 v5; // r2
      _DWORD *v7; // [sp+0h] [bp-24h]
      _BYTE *v8; // [sp+4h] [bp-20h]
      _BYTE *v9; // [sp+Ch] [bp-18h]
      _BYTE *v10; // [sp+10h] [bp-14h]
      int v11; // [sp+1Ch] [bp-8h]
      v8 = a1;
      v7 = a2;
      v10 = a1 + 0xB01B;
      v9 = a1 + 0x52;
      a1[0x52] = 1;
      switch ( a1[0xB01C] )
      {
        case 4:
          printf("[%s():%d] TDDPv1: receive CMD_AUTO_TESTn", 103928, 697);
          v11 = sub_AC78(v8);
          break;
        case 6:
          printf("[%s():%d] TDDPv1: receive CMD_CONFIG_MACn", 103928, 638);
          v11 = sub_9944(v8);
          break;
        case 7:
          printf("[%s():%d] TDDPv1: receive CMD_CANCEL_TESTn", 103928, 648);
          v11 = sub_ADDC(v8);
          if ( !v8 || !(*(v8 + 11) & 4) || !v8 || !(*(v8 + 11) & 8) || !v8 || !(*(v8 + 11) & 0x10) )
            *(v8 + 11) &= 0xFFFFFFFD;
          *(v8 + 8) = 0;
          *(v8 + 11) &= 0xFFFFFFFE;
          break;
        case 8:
          printf("[%s():%d] TDDPv1: receive CMD_REBOOT_FOR_TESTn", 103928, 702);
          *(v8 + 11) &= 0xFFFFFFFE;
          v11 = 0;
          break;
        case 0xA:
          printf("[%s():%d] TDDPv1: receive CMD_GET_PROD_IDn", 103928, 643);
          v11 = sub_9C24(v8);
          break;
        case 0xC:
          printf("[%s():%d] TDDPv1: receive CMD_SYS_INITn", 103928, 615);
         .....
        case 0xD:
          printf("[%s():%d] TDDPv1: receive CMD_CONFIG_PINn", 103928, 682);
          v11 = sub_A97C(v8);
          break;
        case 0x30:
          printf("[%s():%d] TDDPv1: receive CMD_FTEST_USBn", 103928, 687);
          v11 = sub_A3C8(v8);
          break;
        case 0x31:
          printf("[%s():%d] TDDPv1: receive CMD_FTEST_CONFIGn", 103928, 692);
          v11 = vuln(v8);           // 漏洞点在此
          break;
        default:
         ....
      }
      *v7 = ntohl((v9[7]  0 )
      {
        sleep(1u);
        if ( !access(&name, 0) )
          break;
        --v19;
      }
      if ( !v19 )
      {
        printf("[%s():%d] lua file [%s] don't exsit.n", 98236, 574, &name);
        goto LABEL_20;
      }
      if ( v17 )
      {
        luaL_openlibs(v17);
        if ( !luaL_loadfile(v17, &name) )
          lua_pcall(v17, 0, -1, 0);
        lua_getfield(v17, -10002, 94880);
        lua_pushstring(v17, &v12);
        lua_pushstring(v17, v18);
        lua_call(v17, 2, 1);
        v6 = lua_tonumber(v17, -1);
        v20 = sub_16EC4(v6, v7);
        lua_settop(v17, -2);
      }
      lua_close(v17);
      if ( v20 )
        goto LABEL_20;
      v14[3] = 0;
      return 0;
    }
  * sscanf 函数作用时将第一个参数的值，根据格式化字符串解析到后面的参数中。
###  run_exec 函数
这里直接调用了 execve 函数进行命令执行。
    signed int run_exec(const char *a1, ...)
    {
      char *argv; // [sp+8h] [bp-11Ch]
      int v4; // [sp+Ch] [bp-118h]
      char *v5; // [sp+10h] [bp-114h]
      int v6; // [sp+14h] [bp-110h]
      int stat_loc; // [sp+18h] [bp-10Ch]
      char s; // [sp+1Ch] [bp-108h]
      __pid_t pid; // [sp+11Ch] [bp-8h]
      const char *varg_r0; // [sp+128h] [bp+4h]
      va_list varg_r1; // [sp+12Ch] [bp+8h]
      va_start(varg_r1, a1);
      varg_r0 = a1;
      pid = 0;
      stat_loc = 0;
      argv = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      vsprintf(&s, a1, varg_r1);
      printf("[%s():%d] cmd: %s rn", 94112, 72, &s);
      pid = fork();
      if ( pid < 0 )
        return -1;
      if ( !pid )
      {
        argv = "sh";
        v4 = 0x16F4C;
        v5 = &s;
        v6 = 0;
        execve("/bin/sh", &argv, 0);
        exit(127);
      }
      while ( waitpid(pid, &stat_loc, 0) == -1 )
      {
        if ( *_errno_location() != 4 )
          return -1;
      }
      return 0;
    }
根据函数的调用链交叉引用，回溯分析传进来 CMD_handle 函数的参数。
###  调用链分析
在 函数名称处按下 X 键，定位到 data_handle 函数。函数中有一个 recvfrom 函数用来接收 socket 数据， **存放到
v16+0xB01B 地址中** ，之后将 v16 传入 CMD_handle 函数。
    int __fastcall data_handle(int a1)
    {
      int v1; // r3
      int v2; // r3