Table 5. Asus ZenFone 3 Vulnerability Timeline for Command Execution as system user. 
Target 
Market 
Release 
Date 
Status 
Build Fingerprint 
Japan 
05/21/18 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1804.60-0:user/release-keys 
Worldwide 
05/16/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1804.60-0:user/release-keys 
Worldwide 
05/03/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1803.55-0:user/release-keys 
Worldwide 
04/19/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1803.53-0:user/release-keys 
Japan 
04/19/18 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1803.52-0:user/release-keys 
China 
03/23/18 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1801.
197-20180302:user/release-keys 
Worldwide 
03/15/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1802.44-0:user/release-keys 
Worldwide 
02/12/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1801.40-0:user/release-keys 
China 
02/12/18 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1801.
196-20180108:user/release-keys 
Worldwide 
01/29/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.026/15.0
410.1801.40-0:user/release-keys 
Japan 
01/11/18 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1712.85
-20171228:user/release-keys 
Worldwide 
01/08/18 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1712.85
-20171228:user/release-keys 
Worldwide 
12/22/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1711.83
-20171220:user/release-keys 
Worldwide 
12/15/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1711.79
-20171206:user/release-keys 
19 https://www.asus.com/support/Download-Center/ 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Japan 
11/22/17 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1711.75
-20171115:user/release-keys 
Worldwide 
11/21/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1711.75
-20171115:user/release-keys 
Worldwide 
10/13/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1709.68
-20171003:user/release-keys 
China 
09/06/17 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1706.
184-20170817:user/release-keys 
Japan 
08/08/17 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1708.56
-20170719:user/release-keys 
Worldwide 
08/03/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1708.56
-20170719:user/release-keys 
China 
07/24/17 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1706.
181-20170710:user/release-keys 
Worldwide 
07/14/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1706.53
-20170628:user/release-keys 
Italy 
06/29/17 
Vulnerable 
asus/TIM_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1704.4
1-20170526:user/release-keys 
Japan 
05/17/17 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1703.33
-20170424:user/release-keys 
Worldwide 
04/21/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.1703.28
-20170410:user/release-keys 
China 
03/31/17 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1701.
170-20170323:user/release-keys 
Italy 
03/28/17 
Vulnerable 
asus/TIM_Phone/ASUS_Z012D:7.0/NRD90M/14.2015.1701.1
3-20170310:user/release-keys 
Worldwide 
03/08/17 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2015.1701.8-
20170222:user/release-keys 
Japan 
02/24/17 
Not 
Vulnerable 
asus/JP_Phone/ASUS_Z012D:6.0.1/MMB29P/13.2010.1612.
161-20170205:user/release-keys 
China 
01/09/17 
Not 
Vulnerable 
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20.10.150-
20161214:user/release-keys 
Worldwide 
12/28/2016 
Not 
Vulnerable 
asus/WW_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20.10.152-
20161222:user/release-keys 
Worldwide 
12/08/2016 
Not 
vulnerable 
asus/WW_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20.10.140-
20161117:user/release-keys 
4.5 Oppo F5 Command Execution as the system User 
The Oppo F5 Android device contains a platform app with a package name of com.dropboxchmod that 
executes as the system user. The Oppo F5 device we examined had a build fingerprint of 
OPPO/CPH1723/CPH1723:7.1.1/N6F26Q/1513597833:user/release-keys. The Oppo F5 does not come 
with the Dropbox Android app pre-installed with a standard package name of com.dropbox.android, 
although this could also be for the service named DropBoxService in the Android framework. The 
com.dropboxchmod app contains only a single application component named DropboxChmodService. This 
service app component is implemented by a single class and an anonymous class. Below is the 
AndroidManifest.xml of the app showing that the app has an android:sharedUserId attribute with a 
value of android.uid.system. In addition, the manifest shows that the DropBoxChmodService is 
explicitly exported and not permission-protected, making it accessible to any app on the device. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The primary class named DropBoxChmodService creates an anonymous java.lang.Thread object that 
has access to the intent that was received in the onStartCommand(Intent, int, int) lifecycle method. 
The anonymous thread objects will obtain the action string from the intent and execute it as the system user 
if the action string is not null and not an empty string. Since the DropBoxChmodService app component is 
exported and not permission-protected, any app co-located on the device can execute commands as the 
system user. Unlike the others, the DropBoxChmodService does not print the output of the executed 
command to the logcat log, although the approach detailed in Section 4.1.1 can be used to obtain the output 
of a command. Below is the code to execute as the system user on the Oppo F5 device where the action 
string to the intent will be executed. 
Intent i = new Intent(); 
i.setClassName("com.dropboxchmod", "com.dropboxchmod.DropboxChmodService"); 
i.setAction("chmod -R 777 /data"); 
startService(i); 
In the source code snippet above, a vulnerable Oppo Android device will recursively change the file 
permissions starting from the /data directory. This is useful to examine for non-standard files on the data 
partition. We examined an Intermediate Representation (IR) of the app code for the com.dropboxchmod 
platform app and recreated the source code for the onStartCommand service lifecycle method of the 
DropBoxChmodService class that is provided below. The onStartCommand method receives the intent sent 
from the attacking app. 
@Override 
public int onStartCommand(final Intent intent, int flags, int startId) { 
    new Thread() { 
        public void run() { 
            if (intent == null) { 
                stopSelf(); 
                return; 
            } 
            String action = intent.getStringExtra("action"); 
            if (action.isEmpty()) { 
                action = intent.getAction(); 
            } 
            Log.i("DropboxChmodService", "action = [" + action + "]"); 
            if (action.isEmpty()) { 
                stopSelf(); 
                return; 
            } 
            try { 
                Process process = Runtime.getRuntime().exec(action); 
                Log.i("DropboxChmodService", "wait begin"); 
                process.waitFor(); 
                Log.i("DropboxChmodService", "wait end"); 
            } catch (Exception e) { 
                e.printStackTrace(); 
            } 
        } 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
    }.start(); 
    return super.onStartCommand(intent, flags, startId); 
} 
4.5.1 Affected Oppo Android Devices 
We examined a range of Oppo devices from the markets in which they operate to estimate the scope of 
affected devices. Oppo makes their most recent firmware images for each device available on their website. 
The firmware images are segmented by country, where each country appears to have a different set of 
devices available to it. The Chinese market20 appears to have the most available firmware images to 
download, whereas the Australian market21 has less firmware images available to download. Table 6 
provides a chronologically-ordered listing of Oppo devices and whether or not they are vulnerable. This is 
not an exhaustive listing of the firmware images for Oppo Android devices. At a certain point, Oppo started 
to use an ozip file format to encapsulate their firmware images instead of the standard zip file format they 
used previously. We found a tool on XDA Developers from a member named cofface that helped to decrypt 
some of the ozip files22. Due to the new ozip file format, we were not able to examine all the firmware 
images we downloaded. The Oppo firmware images do not directly provide the ro.build.fingerprint 
property in the default properties file (i.e., /system/build.prop); therefore, we used the 
ro.build.description property instead. This property is similar and contains some of the same fields. 
Specifically, Table 6 is ordered by the date provided in ro.build.description property corresponding 
to the ro.build.date property (sometimes as a UNIX timestamp). The earliest date we witnessed where 
for the vulnerability was June 07, 2016 in the Oppo R7S device available to the Chinese market.  