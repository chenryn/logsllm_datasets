some legacy environments, this could still be required and so this should be applied with
some care.
Similarly, there are many recommendations around having separate filesystems for
important paths such as /tmp and /var, and also special mount options. All of these will
work in a large number of cases but, again, it would be too bold to state that this will work
for everyone, especially in preexisting environments, and so these should be applied but
with an understanding of the environmental requirements.
Having looked at the implications of the CIS Benchmarks on how filesystems are mounted,
we will proceed to look at the recommendations around intrusion detection using file
checksumming.
Installing Advanced Intrusion Detection
Environment (AIDE)
Benchmark 1.3.1 concerns the installation of Advanced Intrusion Detection Environment
(AIDE)—a modern replacement for the venerable Tripwire utility that can scan the
filesystem and checksum all the files, thus providing a reliable way of detecting
modifications to the filesystem.
On the face of it, installing and using AIDE is a very good idea—however, if you have an
environment with 100 machines in it and you update all of them, you will get 100 reports,
each containing details of a large number of file changes. There are other solutions to this
problem, including the open source OSSEC project (https:/​/​www.​ossec.​net/​), but this is
not checked for as part of the CIS Benchmark and so it is left for you to decide what the
right solution is for your enterprise.
This, of course, is not to say that AIDE should not be used—far from it. Rather, it is to say
that, if you choose to use AIDE, make sure you have processes in place to process and
understand the reports, and to ensure that you can distinguish false positives (for example,
a change in the checksum of a binary due to a package update) from genuinely malicious
and unexpected modifications (for example, /bin/ls changes even though no package
update has been performed).
[ 357 ]
Using CIS Benchmarks Chapter 13
Having looked at whether AIDE is a viable tool to install on your Linux infrastructure, we
will proceed to look at how the CIS Benchmarks impact the default configuration of
services at boot time.
Understanding CIS Service benchmarks
Section 2.2 of the benchmark details a number of scored level 1 benchmarks around services
that are to be disabled. Again, the rationale behind this is that the attack surface should be
minimized, and so, for example, httpd should not be running unless a server is intended to
be a web server.
While logical in itself, a review of this section turns up a large number of services that could
be vital for your environment, including squid, httpd, and snmpd. For all of these
benchmarks, they should only be applied if it makes sense to do so. You would not turn off
Apache on a web server, and neither would you disable squid on a proxy server.
However, good guidance is given with regard to these benchmarks about when they
should be applied and, in the case of snmpd, there is even guidance on securing the service
if your environment relies on this for monitoring purposes.
X Windows
Benchmark 2.2.2 goes as far as ensuring that the X Windows server is actually uninstalled
from your systems. Most servers are headless and it would be possible to do
this—however, you would not do this for a workstation or for a system that performs
remote desktop functions.
Be sure to apply this benchmark to your servers, but only when you know it is safe to apply
it.
Allowing hosts by network
Benchmarks 3.4.2 and 3.4.3 ensure that /etc/hosts.allow and /etc/hosts.deny are
configured—this means that, for all services that process these two files, only connections
from networks that are allowed are actually processed.
[ 358 ]
Using CIS Benchmarks Chapter 13
This is generally a good idea—however, many organizations have good firewalls and some
actually have policies of not allowing local firewalls on their servers because it complicates
the process of debugging. If a connection is denied, the more firewalls you have, the more
you have to check to find out where it was denied.
Thus, it is recommended you apply these two benchmarks in accordance with your
corporate security policy.
Local firewalls
The same applies for the benchmarks in section 3.6 that concern the installation and
configuration of iptables. Although this local firewall increases your level of server security,
it is in contrast to many corporate security policies of having fewer, more centralized,
firewalls rather than many localized ones. Apply these benchmarks in accordance with
corporate policy.
Overall guidance on scoring
You will note that many of the benchmarks I have advised you to exercise caution over
applying are actually scored. This brings us to a wider point regarding scoring—the aim of
applying CIS Benchmarks is not to achieve a 100% score. Rather, it is to achieve the highest
possible score that is right for your environment and enables your enterprise to function
correctly.
Scoring should instead be used to establish your own baseline—once you have worked
through all benchmarks in the manner discussed in this chapter, you will know which are
right for your enterprise and, hence, what your target score is.
Through a process of auditing the results of repeated applications of the benchmark,
repeated scoring exercises can be performed to track overall environment compliance and
drift over time. For example, if repeated audits show an ever-decreasing score, then you
know you have a problem with regards to compliance, for the root cause must be
established—whether that is users making unauthorized changes to systems, or even
rolling out new servers that have not been correctly secured.
Either way, your CIS Benchmark score will become a useful tool in monitoring the
compliance of your Linux estate with your security policy. In the next section of this
chapter, we will explore scripted approaches to CIS Benchmark application and
compliance.
[ 359 ]
Using CIS Benchmarks Chapter 13
Scripted deployment of server hardening
We have spent some time exploring the CIS Benchmarks and how they are intended to be
worked with. Now, let us turn our attention to more practical matters—how to audit them
and how to implement them. In this book, we have focused on Ansible as our chosen tool
for automating such tasks, and indeed Ansible is an excellent solution for this purpose.
With that said, of course, you will have noticed that the examples in the CIS Benchmark
document itself are often shell commands or, in some cases, are simply statements
regarding configuration lines that should exist (or not exist) in a given file.
In order to clearly explain the auditing and implementation of the CIS Benchmark on a
Linux system, I have split the examples into two. In this part of this chapter, we will
develop traditional shell scripts for checking for CIS Benchmark compliance, and then for
implementing the recommendations if required. This will look very similar to the CIS
Benchmark document itself and thus will help with generating an understanding of how to
implement them. Then, in the next chapter, we will develop these shell script-based
examples into Ansible roles so that we can use our favorite automation tool to manage our
CIS Benchmark compliance.
Let's work through some examples to demonstrate how to develop such scripts, starting
with our root login over SSH example.
Ensuring SSH root login is disabled
CIS recommendation 5.2.8 in version 2.2.0 of the RHEL 7 benchmark is that we should
disable remote root logins. We have visited this example already in other guises, and here
we will look specifically at the recommendations in the CIS Benchmark document to help
us understand how this should be implemented.
The document states that, to audit for this requirement (and thus score this item), the
following test result should be observed:
# grep "^PermitRootLogin" /etc/ssh/sshd_config
PermitRootLogin no
[ 360 ]
Using CIS Benchmarks Chapter 13
Note that the command is intended for a human being to interpret the output of it—this
command will return the PermitRootLogin line from this file, regardless of whether it is
enabled or disabled. The text shows the desired output, but assumes that the person
running the test will read the output and check whether it is enabled or not—workable on a
small scale, but not viable for automation purposes. The remediation suggested is to edit
/etc/ssh/sshd_config to set the following parameter:
PermitRootLogin no
So far, so good—the CIS Benchmark document is quite descriptive, and even gives us a
head start with our coding. However, as stated previously, these snippets don't really help
us to either check or implement this recommendation in an automated manner.
Suppose we want to audit for this condition using a shell script. In this instance, we would
want to run the grep command mentioned in the benchmark document, but use a more
precise pattern to ensure we only match the PermitRootLogin line when it is set to no. We
would then check for the desired output and echo a suitable message to the console,
depending on the result of the check. This script might look like this (noting that there are
multiple ways to achieve the same end result in shell scripting!):
#!/bin/sh
#
# This file implements CIS Red Hat Enterprise Linux 7 Benchmark
# Recommendation 5.2.8 from version 2.2.0
echo -n "Ensure root logins are disabled on SSH... "
OUTPUT=$(grep "^PermitRootLogin no" /etc/ssh/sshd_config)
if [ "x$OUTPUT" == "x" ]; then
echo FAILED!
else
echo OK
fi
The script is fairly straightforward for anyone familiar with shell scripts, but in brief, here
are the steps:
1. We put some useful documentation in the comments at the top of the file so that
we know which recommendation we are testing for. Note that recommendation
numbers might change between document versions and so it is important to
record both.
2. We echo a line of informative text about the test we are running.
3. Then, the suggested audit command from the CIS Benchmark is run, only this
time we are checking for the presence of the PermitRootLogin no line. The
output is captured in an OUTPUT variable.
[ 361 ]
Using CIS Benchmarks Chapter 13
4. If the contents of OUTPUT are blank, then we know the line we are checking for
does not exist in the file and the test is assumed to have failed. We can safely
assume this because root logins are enabled by default in the OpenSSH server,
and so if this line is absent from the configuration file, then provided there were
no issues with our grep pattern, root logins are enabled. We echo this to the
Terminal so that the user knows to take action.
5. The only condition under which the OUTPUT variable should contain text is when
the grep command finds the desired pattern. If this condition is achieved, then
we echo a different message for the user so that they know that this test has
passed and no further action is required.
Let's see this script in action, along with an attempt to fix the problem by hand:
Here, we can see a prime example of the manual process, which many system
administrators and engineers will be familiar with when managing their estates. We ran the
check script defined previously and it yielded the response FAILED!. Thus, our first step
was to take a look at the config file to see why the test failed. There were one of two
possibilities that would have caused this result—either the line containing
PermitRootLogin was not present at all, or it was commented out. In this case, the former
proved to be true.
[ 362 ]
Using CIS Benchmarks Chapter 13
If the line had been present, but commented out, we could have used sed (or another inline
editing tool) to uncomment the line and set the parameter to no. However, as the line was
not present, we needed to append the line to the file, which we have done in the previous
screenshot using the tee -a command. Note that this was needed in conjunction with
sudo because only root can write to this file. We then run the test a second time and it
passes. Of course, you will note that it would have been entirely possible to simply open
this file with vim (or your favorite editor) and correct the issue manually; however, the
previous example could lend itself to a scripted solution.
As shown from the preceding example, this is an incredibly slow and manual process. This
would be bad enough to perform on a single server (for example, the template image), but
imagine scaling this up across an entire estate of Linux servers, and then to all the
recommendations in the CIS Benchmark document. The task would be a full-time (and very
tedious) job for someone.
It's better to automate the process and you will note that, in the CIS Benchmark document,
there is not only a test case for auditing the recommendation on a server, but also a
recommended alteration. In most cases, this is simply a statement of the line(s) that should
be present in the given configuration file(s). In this case, we want to assert the following:
PermitRootLogin no
If we were to try and remedy this issue by developing our shell script further, we would
need to perform the following steps when the test results are in a FAILED! state (on an OK
result, no further action is necessary):
1. As we have failed to match the desired pattern in the file, we know that the line
is either present, but has the wrong setting, or is not present at all (either absent
or commented out). We can ignore the difference between the last two
possibilities as it will do no harm to leave the commented out line in place and
add the correct line in. Thus, our first task is to test for the presence of the
PermitRootLogin line, regardless of its setting:
OPTPRESENT=$(grep -e "^PermitRootLogin.*" /etc/ssh/sshd_config)
if [ "x$OPTPRESENT" == "x" ]; then
...
else
...
fi
[ 363 ]
Using CIS Benchmarks Chapter 13
2. In the previous screenshot, we are looking for any line in the configuration file
that begins with PermitRootLogin. If we get nothing back (our positive test
case), then we know we must add the line to the file by adding the following
directly under the if statement:
echo "Configuration not present - attempting to add"
echo "PermitRootLogin no" | sudo tee -a /etc/ssh/sshd_config
1>/dev/null
3. So far, so good. However, if our grep command did return some output, we
know the line is present and the value is incorrect, and so we can use a tool such
as sed to modify the line in place:
echo "Configuration present - attempting to modify"
sudo sed -i 's/^PermitRootLogin.*/PermitRootLogin no/g'
/etc/ssh/sshd_config
4. When we have modified the file (regardless of the route taken), we know we
must restart sshd for the changes to be picked up. Thus, under the closing fi
statement of the inner if construct, we add the following:
sudo systemctl restart sshd
5. When we run this with an SSH configuration where this setting is not present, we
see the following behavior—note that a second run of the script shows that the
modifications were successful:
6. Similarly, if we run it and the line is present and not correct according to the CIS
Benchmark, we see the following:
[ 364 ]
Using CIS Benchmarks Chapter 13
This is excellent—we have just used shell scripts to automate one of the recommendations
in the CIS Benchmark document. However, you will note that the shell script we developed
contains a lot of repetition and would not be easy to pick up by someone else.
Further, this recommendation is one of the more simple ones—there is only one line to
modify in one file in this case. What if the recommendation is more in depth? Let's take a
look at that in the next section.
Ensuring packet redirect sending is disabled
Recommendation 3.1.2 of the version 2.2.0 RHEL benchmark is somewhat more
detailed—this is a scored level 1 benchmark that ensures that your servers do not send
routing information to other hosts. Unless they have been configured as a router, there
should be no good reason for them to do this.
From the documentation itself, we can see that the recommended audit commands (and
results) are as follows:
$ sysctl net.ipv4.conf.all.send_redirects
net.ipv4.conf.all.send_redirects = 0
$ sysctl net.ipv4.conf.default.send_redirects
net.ipv4.conf.default.send_redirects = 0
$ grep "net\.ipv4\.conf\.all\.send_redirects" /etc/sysctl.conf
/etc/sysctl.d/*
net.ipv4.conf.all.send_redirects = 0
$ grep "net\.ipv4\.conf\.default\.send_redirects" /etc/sysctl.conf
/etc/sysctl.d/*
net.ipv4.conf.default.send_redirects= 0
The commands to be run begin with the $ character, while the desired results are shown on
the following line. We can already see that developing this into a shell script is going to
take some work—we need to validate the output of the two sysctl commands, and then
also check the configuration files to ensure that the parameters will persist across reboots
and kernel parameter reloads.
[ 365 ]
Using CIS Benchmarks Chapter 13
We can check for the current kernel parameter setting quite easily using some shell code
such as this:
echo -n "Ensure net.ipv4.conf.all.send_redirects = 0... "
OUTPUT=$(sysctl net.ipv4.conf.all.send_redirects | grep
"net.ipv4.conf.all.send_redirects = 0" 2> /dev/null)
if [ "x$OUTPUT" == "x" ]; then
echo FAILED!
else
echo OK
fi
You will note that the code structure is almost identical to that which we used to check the
PermitRootLogin parameter for SSH—hence, although the code to automate our auditing
process is getting easier, it is also getting highly repetitious and inefficient. A similar block
of code would then be used to check the value of
the net.ipv4.conf.default.send_redirects parameter.
We can also check the persistent configuration of these parameters, again, by building the
audit commands from the CIS Benchmark document into a conditional structure similar to
what we did previously:
echo -n "Ensure net.ipv4.conf.all.send_redirects = 0 in persistent
configuration..."
OUTPUT=$(grep -e "^net\.ipv4\.conf\.all\.send_redirects = 0"
/etc/sysctl.conf /etc/sysctl.d/*)
if [ "x$OUTPUT" == "x" ]; then
echo FAILED!
else
echo OK
fi
Once again, we would replicate this block for
the net.ipv4.conf.default.send_redirects parameter. Thus, once again, we have
successfully built up a script to audit this benchmark—running it on our system looks
something like this:
[ 366 ]
Using CIS Benchmarks Chapter 13
That's 35 lines of shell script (albeit with a few comments at the top of the file), much of it
repetitious, and all just to know that we have completely failed to meet this requirement!
Once again, if we are to expand this example to resolve the issues, we need to expand our