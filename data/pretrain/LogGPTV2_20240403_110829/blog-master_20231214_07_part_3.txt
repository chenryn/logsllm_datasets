  ) as local_pool,        
  (      
    select array_agg(vid) from       
    (      
      -- VIP视频池     
      select vid from t_videos_vip_pool t1       
      where t1.tag=t.tag       
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)      
      and abs(mod(hashint8(vid),64)) = 0      
      order by t1.score desc       
      limit ceil(t.limits*0.2)      
    ) x    -- vip池limit占比 20%        
  ) as vip_pool            
from     
(      
  -- 从用户表取出用户的喜好标签, 以及每个标签的返回条数      
  select (unnest(tag_scores1)).tag as tag, (unnest(tag_scores1)).limits as limits from       
    users where uid=1      
) t;      
```      
返回结果例子:   
`uid=1`时:  
```
-[ RECORD 1 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1790916,1132216,1774280,1952156,1160239,1548536,1318177,1702917,1434362,1409981,1860373,1028987,1178555,1116453,1968401,1023390,1260664,1463697,1946324,1291647}
local_pool | {346579,987432}
vip_pool   | {2794676,2065227,2732550,2000259,2815806,2957527,2631995,2395876}
-[ RECORD 2 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1908886,1899793,1411568,1929364,1246641,1251799,1314424,1823510,1300298,1251984}
local_pool | {204181,790982,760401}
vip_pool   | {2252375,2009571,2816666,2335909}
-[ RECORD 3 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1908886,1899793,1411568,1929364,1246641,1251799,1314424,1823510}
local_pool | {204181,790982,760401}
vip_pool   | {2252375,2009571,2816666}
-[ RECORD 4 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1784058,1228510,1439057,1302993,1697334,1233058,1950055,1404547}
local_pool | {227295}
vip_pool   | {2975383,2865416,2815158}
-[ RECORD 5 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1026596,1956755,1897653,1391852,1610438}
local_pool | {755830,930305,269404}
vip_pool   | {2144222,2556698}
```
`uid=10000000`时:  
```
-[ RECORD 1 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1790916,1132216,1774280,1952156,1160239,1548536,1318177,1702917,1434362,1409981,1860373,1028987,1619263,1178555,1413056,1440524,1116453,1968401,1023390,1260664}
local_pool | {420726,101788,787444}
vip_pool   | {2794676,2065227,2732550,2000259,2815806,2957527,2631995,2395876}
-[ RECORD 2 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1180991,1899128,1769344,1714725,1384724,1868715,1153425,1852447,1206311,1272872}
local_pool | {217365,795102}
vip_pool   | {2406797,2459297,2914047,2450752}
-[ RECORD 3 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1341596,1257155,1918176,1913171,1082175,1972329,1920133,1062190}
local_pool | {858336}
vip_pool   | {2043662,2683512,2065115}
-[ RECORD 4 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1566363,1900979,1975859,1776285,1207471,1037560,1177909,1033851}
local_pool | {516241,517531,419669,644382,319791}
vip_pool   | {2871970,2389006,2693050}
-[ RECORD 5 ]-----------------------------------------------------------------------------------------------------------------------------------------------------------------
top_pool   | {1711028,1908184,1411025,1769915,1306077}
local_pool | {242174,581692,876193}
vip_pool   | {2254656,2434176}
```
PS: 这条SQL有可能会返回重复的vid, 因为同一个视频有多个tag, 当同一个视频的多个tag匹配到同一个用户tag_scores1内的多个tag时, 有一定的概率多次返回这个vid. 这个情况如果是小概率, 建议在服务端进行去重, 减少数据库去重带来的CPU开销.  (毕竟应用是无状态的, 更好扩容)。    
5、性能测试.   在2022年的macbook pro上测试, 每秒可推荐视频267622个, 已经达到掀桌子的效果.        
创建测试脚本, 推荐数据覆盖1000万个用户, 所有的视频分区. 每次从某个随机的hash mod中取100条未读视频:      
```    
vi ~/test.sql      
```
```
\set uid random(1,10000000)      
\set mod random(0,63)      
select       
  (      
    select array_agg(vid) from       
    (      
      -- 全国视频池     
      select vid from t_videos_top_pool t1       
      -- 取出与用户喜爱的标签匹配的视频     
      where t1.tag=t.tag       
      -- 过滤已读VID , 使用partian index 0号分区      
      and t1.vid not in (select jsonb_array_elements_text( readlist[:mod] )::int8 from users where uid=:uid)      
      -- 使用partian index 0号分区      
      and abs(mod(hashint8(vid),64)) = :mod      
      -- 按视频推荐权重逆序取出视频      
      order by t1.score desc       
      -- limit 条数来自tag_scores1.limits, 其中全国池占比 50%      
      limit ceil(t.limits*0.5)        
    ) x   -- 全国池limit占比 50%      
  ) as top_pool,         
  (      
    select array_agg(vid) from       
    (      
      -- 本地视频池    
      select vid from t_videos_local_pool t1       
      where t1.tag=t.tag       
      -- 本地池, 增加一个查询条件: 查询与本地用户地域匹配的视频      
      and t1.lid = (select lid from users where uid=:uid)      
      and t1.vid not in (select jsonb_array_elements_text( readlist[:mod] )::int8 from users where uid=:uid)      
      and abs(mod(hashint8(vid),64)) = :mod      
      order by t1.score desc       
      limit ceil(t.limits*0.3)      
    ) x   -- 本地池limit占比 30%       
  ) as local_pool,        
  (      
    select array_agg(vid) from       
    (      
      -- VIP视频池     
      select vid from t_videos_vip_pool t1       
      where t1.tag=t.tag       
      and t1.vid not in (select jsonb_array_elements_text( readlist[:mod] )::int8 from users where uid=:uid)      
      and abs(mod(hashint8(vid),64)) = :mod      
      order by t1.score desc       
      limit ceil(t.limits*0.2)      
    ) x    -- vip池limit占比 20%        
  ) as vip_pool            
from     
(      
  -- 从用户表取出用户的喜好标签, 以及每个标签的返回条数      
  select (unnest(tag_scores1)).tag as tag, (unnest(tag_scores1)).limits as limits from       
    users where uid=:uid      
) t;      
```      
开启压测:    
```      
pgbench -M prepared -n -r -P 1 -f ~/test.sql -c 6 -j 6 -T 120       
```    
压测结果:    
```
transaction type: /root/test.sql
scaling factor: 1
query mode: prepared
number of clients: 6
number of threads: 6
duration: 120 s
number of transactions actually processed: 321112
latency average = 2.242 ms
latency stddev = 1.101 ms
initial connection time = 15.783 ms
tps = 2676.227495 (without initial connection time)
statement latencies in milliseconds:
         0.000  \set uid random(1,10000000)      
         0.000  \set mod random(0,63)      
         2.241  select ......
```    
 2022款 macbook pro 13寸 (M2芯片, 16g mem, 512G ssd).  docker容器分配资源:4c 6g, 每秒可以推荐多少个视频ID?       
-  267622 个       
我这个测试镜像是PG14版本, PG15对not in做了优化, 所以有兴趣的小伙伴使用PG 15测试性能一定还会飙升. 
- [《PostgreSQL 15 preview - Use a hash table to speed up NOT IN(values)》](../202107/20210707_02.md)    
这是个读多写少的场景. 因为刷新用户标签和视频的权重都可以异步进行, 所以查询占比较高, 可以非常容易的通过增加PG只读节点来提升查询qps吞吐.      
而如果你使用PolarDB, 则更省成本, 因为多个计算节点共享一份存储. 而传统PostgreSQL增加只读实例都需要复制一份完整的数据.       
6、降级处理方法(预处理 或 随机采样)      
如果资源不足导致雪崩了怎么办? 简单: 降级到随机推荐即可.  使用随机采样, 不管数据量多大, 1毫秒以内就可以返回.       
重新发现PG之美 - 4 随机漫步踏浪而来:       
- 在一些论坛、短视频业务中, 编辑精选和地域或大范围精选的内容会采用随机推荐的方式推送给客户.      
- 随机查询就有了高并发、低延迟的需求, 然而通用的order by random()随机方法性能太烂, 无法满足需求.      
- PG 提供了tablesample method(para)方法, 能够以几千倍的性能满足高并发需求.      
视频回放:  https://www.bilibili.com/video/BV1cy4y137WU/      
降级处理的 SQL 如下:      
```      
-- 安装插件      
create extension tsm_system_rows ;      
create extension tsm_system_time ;      
-- 随机采样SQL , 可根据实际的数据量, 块数量调整数值      
-- system (5) 表示采样5%的数据块      
-- random() < ? 用来增加随机性, 避免同一个数据块的数据全部被取出. 如果你无所谓, 可以去掉这个条件, 性能将更好.       
select * from (
select ctid,vid from t_videos_top_pool TABLESAMPLE system (5) where random()<0.01 limit 50 ) t    
union all    
select * from (
select ctid,vid from t_videos_local_pool TABLESAMPLE system (5) where random()<0.01 limit 30 ) t    
union all    
select * from (
select ctid,vid from t_videos_vip_pool TABLESAMPLE system (5) where random()<0.01 limit 20) t;       
或     
-- system_time (5) 表示采样5毫秒      
-- random() < ? 用来增加随机性, 避免同一个数据块的数据全部被取出.    
select * from (
select ctid,vid from t_videos_top_pool TABLESAMPLE system_time (5) where random()<0.02 limit 50 ) t   
union all   