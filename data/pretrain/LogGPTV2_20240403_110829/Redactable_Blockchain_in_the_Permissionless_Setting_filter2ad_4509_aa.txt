title:Redactable Blockchain in the Permissionless Setting
author:Dominic Deuber and
Bernardo Magri and
Sri Aravinda Krishnan Thyagarajan
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Redactable Blockchain in the Permissionless Setting
∗
†
, Bernardo Magri
∗
and Sri Aravinda Krishnan Thyagarajan
Friedrich-Alexander University Erlangen-N¨urnberg, Germany
E-mail: {deuber, thyagarajan}@cs.fau.de
Dominic Deuber
∗
†
Aarhus University, Denmark
E-mail: PI:EMAIL
Abstract—Bitcoin is an immutable permissionless blockchain
system that has been extensively used as a public bulletin
board by many different applications that heavily relies on its
immutability. However, Bitcoin’s immutability is not without its
fair share of demerits. Interpol exposed the existence of harmful
and potentially illegal documents, images and links in the Bitcoin
blockchain, and since then there have been several qualitative
and quantitative analysis on the types of data currently residing
in the Bitcoin blockchain. Although there is a lot of attention
on blockchains, surprisingly the previous solutions proposed for
data redaction in the permissionless setting are far from feasible,
and require additional trust assumptions. Hence, the problem of
harmful data still poses a huge challenge for law enforcement
agencies like Interpol (Tziakouris, IEEE S&P’18).
We propose the ﬁrst efﬁcient redactable blockchain for the
permissionless setting that
is easily integrable into Bitcoin,
and that does not rely on heavy cryptographic tools or trust
assumptions. Our protocol uses a consensus-based voting and
is parameterised by a policy that dictates the requirements and
constraints for the redactions; if a redaction gathers enough votes
the operation is performed on the chain. As an extra feature,
our protocol offers public veriﬁability and accountability for the
redacted chain. Moreover, we provide formal security deﬁnitions
and proofs showing that our protocol is secure against redactions
that were not agreed by consensus. Additionally, we show the
viability of our approach with a proof-of-concept implementation
that shows only a tiny overhead in the chain validation of our
protocol when compared to an immutable one.
Index Terms—Blockchain, Bitcoin, Redactable Blockchain,
GDPR
I. INTRODUCTION
Satoshi Nakamoto’s 2008 proposal of Bitcoin [38] has
revolutionised the ﬁnancial sector. It helped realise a monetary
system without relying on a central trusted authority, which has
since then given rise to hundreds of new systems known as
cryptocurrencies. Interestingly however, a closer look into the
basics of Bitcoin sheds light on a new technology, blockchains.
Ever since, there has been a lot of ongoing academic re-
search [21], [28], [14], [16] on the security and applications of
blockchains as a primitive. A blockchain in its most primitive
form is a decentralised chain of agreed upon blocks containing
timestamped data.
A consensus mechanism supports the decentralised nature
of blockchains. There are different types of consensus mech-
anisms that are based on different resources, such as Proof of
Work (PoW) based on computational power, Proof of Stake
†Work done while the author was afﬁliated with Friedrich-Alexander
University Erlangen-N¨urnberg.
(PoS) based on the stake in the system, Proof of Space based
on storage capacity, among many others. Typically, users in
the system store a local copy of the blockchain and run
the consensus mechanism to agree on a uniﬁed view of the
blockchain. These mechanisms must rely on non-replicability
of resources to be resilient against simple sybil attacks where
the adversary spawn multiple nodes under his control.
Apart from its fundamental purpose of being a digital
currency, Bitcoin exploits the properties of its blockchain,
as in being used as a tool for many different applications,
such as timestamp service [23], [22], to achieve fairness and
correctness in secure multi-party computation [9], [7], [15],
[31], and to build smart contracts [30]. It acts as an immutable
public bulletin board, supporting the storage of arbitrary data
through special operations. For instance, the OP RETURN code,
can take up to 80 bytes of arbitrary data that gets stored
in the blockchain. With no requirement for centralised trust
and its capability of supporting complex smart contracts,
communication through the blockchain has become practical,
reasonably inexpensive and very attractive for applications.
Blockchain and Immutability. The debate about the im-
mutability of blockchain protocols has gained worldwide at-
tention lately due to the adoption of the new General Data
Protection Regulation (GDPR) by European states. Several
provisions of the GDPR regulation are inherently incompatible
with current permissionless immutable blockchain proposals
(e.g., Bitcoin and Ethereum) [26] as it is not possible to
remove any data (addresses,
timestamp
information) that has stabilised1 in the chain in such protocols.
Since permissionless blockchains are completely decentralised
and allow for any user to post
transactions to the chain
for a small fee, malicious users can post
transactions to
the system containing illegal and/or harmful data, such as
(child) pornography, private information or stolen private keys,
etc. The existence of such illicit content was ﬁrst reported
in [2] and has remained a challenge for law enforcement
agencies like Interpol [47]. Moreover, quantitative analysis in
the recent work of Matzutt et al. [34] shows that it is not
feasible to “ﬁlter” all data from incoming transactions to check
for malicious contents before the transaction is inserted into
the chain. Therefore, once it becomes public knowledge that
malicious data was inserted (and has stabilised) into the chain,
transaction values,
1A transaction (or data) is considered stable in the blockchain when it is
“deep” enough into the chain. We formally deﬁne this property in Section II-B.
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:37)(cid:80)(cid:78)(cid:74)(cid:79)(cid:74)(cid:68)(cid:1)(cid:37)(cid:70)(cid:86)(cid:67)(cid:70)(cid:83)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:20)(cid:26)
(cid:18)(cid:19)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
the honest users are faced with the choice of either, willingly
broadcast illicit (and possibly illegal [34], [5]) data to other
users, or to stop using the system altogether.
This effect greatly hinders the adoption of permissionless
blockchain systems, as honest users that are required to com-
ply with regulations, such as GDPR, are forced to withdraw
themselves from the system if there is no recourse in place to
deal with illicit data inserted into the chain.
A. State of the Art
Speciﬁcally to tackle the problem of arbitrary harmful
data insertions in the blockchain, the notion of redacting the
contents of a blockchain was ﬁrst proposed by Ateniese et
al. [13]. The authors propose a solution more focused on
the permissioned blockchain setting2 based on chameleon
hashes [18]. In their protocol, a chameleon hash function
replaces the regular SHA256 hash function when linking
consecutive blocks in the chain. When a block is modiﬁed,
a collision for the chameleon hash function can be efﬁciently
computed (with the knowledge of the chameleon trapdoor key)
for that block, keeping the state of the chain consistent after
arbitrary modiﬁcations.
In a permissioned setting where the control of the chain
is shared among a few semi-trusted parties,
the solution
from [13] is elegant and works nicely, being even commer-
cially adopted by a large consultancy company [4], [3], [11].
However, in permissionless blockchains such as Bitcoin, where
the inﬂux of users joining and leaving the system is ever
changing and without any regulation, their protocol clearly
falls short in this scenario, as their techniques of secret sharing
the chameleon trapdoor key and running a MPC protocol
to compute a collision for the chameleon hash function do
not scale to the thousands of users in the Bitcoin network.
Moreover, when a block is removed in their protocol it is
completely unnoticeable to the users, leaving no trace of the
old state. Although this could make sense in a permissioned
setting, in a permissionless setting one would like to have
some public accountability as to when and where a redaction
has occurred.
Later, Puddu et al. [42] proposed a blockchain protocol
where the sender of a transaction can encrypt alternate ver-
sions of the transaction data, known as “mutations”; the only
unencrypted version of the transaction is considered to be
the active transaction. The decryption keys are secret shared
among the miners, and the sender of a transaction establishes
a mutation policy for his transaction, that details how (and by
whom) his transaction is allowed to be mutated. On receiving
a mutate request, the miners run a MPC protocol to reconstruct
the decryption key and decrypt the appropriate version of the
transaction. The miners then publish this new version as the
active transaction. In case of permissionless blockchains, they
propose the usage of voting for gauging approval based on
computational power. However, in a permissionless setting
It
a malicious user can simply not include a mutation for his
transaction, or even set a mutation policy where only he
himself is able to mutate the transaction. Moreover, to tackle
transaction consistency, where a mutated transaction affects
other transactions in the chain, they propose to mutate all
affected transactions through a cascading effect. This however,
completely breaks the notion of transaction stability, e.g., a
payment made in the past to a user could be altered as a
result of this cascading mutation. The proposal of [42] also
suffers from scalability issues due to the MPC protocol used
for reconstructing decryption keys across different users.
is clear that for a permissionless blockchain without
centralised trust assumptions, a practical solution for redacting
harmful content must refrain from employing large-scale MPC
protocols that hinders the performance of the blockchain. It
also must accommodate public veriﬁability and accountability
such that rational miners are incentivised to follow the proto-
col.
B. Our Contributions
Editable Blockchain Protocol. We propose the ﬁrst editable
blockchain protocol for permissionless systems in Section III,
which is completely decentralised and does not rely on heavy
cryptographic primitives or additional trust assumptions. This
makes our protocol easily integrable in systems like Bitcoin (as
described in Section V). The edit operations can be proposed
by any user and they are voted in the blockchain through
consensus; the edits are only performed if approved by the
blockchain policy (e.g., voted by the majority). The protocol
is based on a PoW consensus, however,
it can be easily
adapted to any consensus mechanism, since the core ideas
are inherently independent of the type of consensus used. Our
protocol also offers accountability for edit operations, where
any edit in the chain can be publicly veriﬁed.
Formal Analysis. We build our protocol on ﬁrm theoretical
grounds, as we formalise all the necessary properties of an
editable blockchain in Section IV, and later show that our
generic protocol of Section III-C satisﬁes these properties.
We borrow the fundamental properties of a secure blockchain
protocol from [21] and adapt them to our setting.
Implementation. We demonstrate the practicality of our pro-
tocol with a proof-of-concept implementation in Python. We
ﬁrst show in Section VI that adding our redaction mechanism
incurs in just a small overhead for chain validation time com-
pared to that of the immutable protocol. Then, we show that
for our protocol the overhead incurred for different numbers
of redactions in the chain against a redactable chain with
no redactions is minimal (less than 3% for 5, 000 redactions
on a 50, 000 blocks chain). Finally, we analyse the effect of
the parameters in our protocol by measuring the overhead
introduced by different choices of the system parameters when
validating chains with redactions.
C. Our Protocol
2The permissioned blockchain setting is when there is a trusted third party
(TTP) that deliberates on the users’ entry into the system.
Our protocol extends the immutable blockchain of Garay et
al. [21] to accommodate for edit operations in the following
(cid:18)(cid:19)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
way: We extend the block structure to accommodate another
copy of the transaction’s Merkle root, that we denote by old
state. We also consider an editing policy for the chain, that
determines the constraints and requirements for approving edit
operations. To edit a block in the chain, our protocol (Fig. 1)
executes the following steps:
a) A user ﬁrst proposes an edit request to the system. The
request consists of the index of the block he wants to
edit, and a candidate block to replace it.
b) When miners in the network receives an edit request,
they ﬁrst validate the candidate block using its old state
information and verifying the following conditions: (1)
it contains the correct information about the previous
block, (2) it has solved the proof of work and (3) it
does not invalidate the next block in the chain. If the
candidate block is valid, miners can vote for it during
the request’s voting period by simply including the hash
of the request in the next block they mine. The collision
resistance property of the hash function ensures that a
vote for an edit request cannot be considered as a vote
for any other edit request.
c) After the voting period for a request is over, everyone in
the network can verify if the edit request was approved
in accordance to the policy (e.g., by checking the number
of votes it received). If the request was approved, then
the edit operation is performed by replacing the original
block with the candidate block.
To validate an edited chain, the miners validate each block
exactly like in the immutable protocol; if a “broken” link is
found between blocks, the miner checks if the link still holds
for the old state information3. In the afﬁrmative case, the miner
ensures that the edited block has gathered enough votes and
is approved, according to the policy of the chain.
The process of a redaction in our generic protocol as
described in Fig. 2 is pictorially presented in Fig. 1.
II. PRELIMINARIES
Throughout this work we denote by κ ∈ N the security
parameter and by a ← A(in) the output of an algorithm
A on input in. We also use the terms “redact” and “edit”
interchangeably in this paper.
the notation of
A. Blockchain Basics
to describe a
We make use of
blockchain. A block is a triple of the form B := (cid:4)s, x, ctr(cid:5),
where s ∈ {0, 1}κ, x ∈ {0, 1}∗ and ctr ∈ N. Here s is the
state of the previous block, x is the data and ctr is the proof
of work of the block. A block B is valid iff
[21]
validateBlockD(B) := H(ctr , G(s, x)) < D.
Here, H : {0, 1}∗ → {0, 1}κ and G : {0, 1}∗ → {0, 1}κ are
cryptographic hash functions, and the parameter D ∈ N is the
block’s difﬁculty level.
The blockchain is simply a chain (or sequence) of blocks,
that we call C. The rightmost block is called the head of
the chain, denoted by Head(C). Any chain C with a head
Head(C) := (cid:4)s, x, ctr(cid:5) can be extended to a new longer chain
C(cid:3) := C||B(cid:3) by attaching a (valid) block B(cid:3) := (cid:4)s(cid:3), x(cid:3), ctr(cid:3)(cid:5)
such that s(cid:3) = H(ctr , G(s, x)); the head of the new chain C(cid:3)
is Head(C(cid:3)) := B(cid:3). A chain C can also be empty, and in such a
case we let C := ε. The function len(C) denotes the length of
a chain C (i.e., its number of blocks). For a chain C of length
n and any q ≥ 0, we denote by C(cid:4)q the chain resulting from
removing the q rightmost blocks of C, and analogously we
denote by q(cid:5)C the chain resulting in removing the q leftmost
blocks of C; note that if q ≥ n (where len(C) = n) then
C(cid:4)q := ε and q(cid:5)C := ε. If C is a preﬁx of C(cid:3) we write C ≺ C(cid:3).
We also note that the difﬁculty level D can be different among
blocks in a chain.
B. Properties of a Secure Blockchain
In this section we detail the relevant aspects of the under-