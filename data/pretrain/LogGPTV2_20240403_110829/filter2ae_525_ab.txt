class name | Parent class name | All interfaces | Is interface? | member  
---|---|---|---|---  
com/sun/deploy/jardiff/JarDiffPatcher | java/lang/Object |
com/sun/deploy/jardiff/JarDiffConstants,com/sun/deploy/jardiff/Patcher | false
| newBytes!2![B  
com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl
| com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl |
com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable
| false |
stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl  
the first class `com/sun/deploy/jardiff/JarDiffPatcher`：
Corresponding to the table information above, it is consistent.
  * class name：com/sun/deploy/jardiff/JarDiffPatcher
  * Parent class： java/lang/Object，If a class does not explicitly inherit other classes, the default implicitly inherits java/lang/Object, and java does not allow multiple inheritance, so each class has only one parent class.
  * All interfaces：com/sun/deploy/jardiff/JarDiffConstants、com/sun/deploy/jardiff/Patcher
  * is interfaces or not：false
  * member：newBytes!2![B，newBytes member，Byte type。Why didn't the static/final type members be added? I haven't studied how to manipulate bytecode here, so the author's judgment implementation here is skipped. But guessing that this type of variable should not be a **taint** so ignore.
The second class
`com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl`:
Corresponding to the table information above, it is also consistent.
  * class name：com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl，it is an inner class
  * Parent class：com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl
  * All interfaces：com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable
  * is interfaces or not：false
  * member：stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl，!*! can be temporarily understood as a separator，it has a member stub，type is com/sun/corba/se/spi/presentation/rmi/DynamicStub。Because it is an inner class, so there is a more `this` member, `this` points to the outer class.
**methods.dat**
two more characteristic ones:
class name | method name | method info | is static method  
---|---|---|---  
sun/nio/cs/ext/Big5 | newEncoder | ()Ljava/nio/charset/CharsetEncoder; | false  
sun/nio/cs/ext/Big5_HKSCS$Decoder | \ |
(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V | false  
sun/nio/cs/ext/Big5#newEncoder：
  * class name：sun/nio/cs/ext/Big5
  * method name： newEncoder
  * method info：()Ljava/nio/charset/CharsetEncoder; no params，return java/nio/charset/CharsetEncoder object
  * is static method：false
sun/nio/cs/ext/Big5_HKSCS$Decoder#\：
  * class name：sun/nio/cs/ext/Big5_HKSCS$Decoder
  * method name：\
  * method info： `(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V` Parameter 1 is java/nio/charset/Charset type, parameter 2 is sun/nio/cs/ext/Big5_HKSCS$1 type, and the return value is void.
  * is static method：false
**Generate Inheritance relationship**
The inheritance relationship is used later to determine whether a class can be
serialized by a library and searched for subclass methods.
    public class InheritanceDeriver {
        private static final Logger LOGGER = LoggerFactory.getLogger(InheritanceDeriver.class);
        public static InheritanceMap derive(Map classMap) {
            LOGGER.debug("Calculating inheritance for " + (classMap.size()) + " classes...");
            Map> implicitInheritance = new HashMap<>();
            for (ClassReference classReference : classMap.values()) {
                if (implicitInheritance.containsKey(classReference.getHandle())) {
                    throw new IllegalStateException("Already derived implicit classes for " + classReference.getName());
                }
                Set allParents = new HashSet<>();
                getAllParents(classReference, classMap, allParents);//Get all the parent classes of the current class
                implicitInheritance.put(classReference.getHandle(), allParents);
            }
            return new InheritanceMap(implicitInheritance);
        }
        ...
        ...
        private static void getAllParents(ClassReference classReference, Map classMap, Set allParents) {
            Set parents = new HashSet<>();
            if (classReference.getSuperClass() != null) {
                parents.add(new ClassReference.Handle(classReference.getSuperClass()));//父类
            }
            for (String iface : classReference.getInterfaces()) {
                parents.add(new ClassReference.Handle(iface));//Interface class
            }
            for (ClassReference.Handle immediateParent : parents) {
                //Get the indirect parent class, and recursively get the parent class of the indirect parent class
                ClassReference parentClassReference = classMap.get(immediateParent);
                if (parentClassReference == null) {
                    LOGGER.debug("No class id for " + immediateParent.getName());
                    continue;
                }
                allParents.add(parentClassReference.getHandle());
                getAllParents(parentClassReference, classMap, allParents);
            }
        }
        ...
        ...
    }
The result of this step is saved to inheritanceMap.dat:
class | Direct parent class + indirect parent class  
---|---  
com/sun/javaws/OperaPreferencesPreferenceEntryIterator |
java/lang/Object、java/util/Iterator  
com/sun/java/swing/plaf/windows/WindowsLookAndFeel$XPValue |
java/lang/Object、javax/swing/UIDefaults$ActiveValue  
#### Step2 Generate Passthrough Data Flow
The passthrough data flow here refers to the relationship between the return
result of each method and the method parameters. The data generated in this
step will be used when generating the passthrough call graph.
Take the demo given by the author as an example, first judge from the macro
level:
The relationship between FnConstant.invoke return value and parameter
`this`(Parameter 0, because all members of the class can be controlled during
serialization, so all member variables are treated as 0 arguments):
  * relationship with this param: returned this.value, which is related to 0
  * relationship with arg param: The return value has no relationship with arg, that is, it has no relationship with 1 parameter.
  * The conclusion is that FnConstant.invoke is related to parameter 0 and is represented as FnConstant.invoke()->0
The relationship between the Fndefault.invoke return value and the parameters
this (parameter 0), arg (parameter 1): \- relationship with this param: The
second branch of the return condition has a relationship with this.f, that is,
it has a relationship with 0. \- relationship with arg param: The first branch
of the return condition has a relationship with arg, that is, it has a
relationship with 1 argument \- The conclusion is that FnConstant.invoke has a
relationship with 0 parameters and 1 parameter, which is expressed as
Fndefault.invoke()->0, Fndefault.invoke()->1
In this step, the gadgetinspector uses ASM to analyze the method bytecode. The
main logic is in the classes PassthroughDiscovery and
TaintTrackingMethodVisitor. In particular, TaintTrackingMethodVisitor, which
traces the stack and localvar of the JVM virtual machine when it executes the
method, and finally returns whether the returned result can be contaminated by
the parameter marker.
Core implementation code (TaintTrackingMethodVisitor involves bytecode
analysis, temporarily ignored):
    public class PassthroughDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(PassthroughDiscovery.class);
        private final Map> methodCalls = new HashMap<>();
        private Map> passthroughDataflow;
        public void discover(final ClassResourceEnumerator classResourceEnumerator, final GIConfig config) throws IOException {
            Map methodMap = DataLoader.loadMethods();//load Methods.dat
            Map classMap = DataLoader.loadClasses();//load classes.dat
            InheritanceMap inheritanceMap = InheritanceMap.load();//load inheritanceMap.dat
            Map classResourceByName = discoverMethodCalls(classResourceEnumerator);//Find the submethod contained in a method
            List sortedMethods = topologicallySortMethodCalls();//Perform inverse topology sorting on graphs composed of all methods
            passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,
                    config.getSerializableDecider(methodMap, inheritanceMap));//Compute and generate passthrough data flow, involving bytecode analysis
        }
        ...
        ...
        private List topologicallySortMethodCalls() {
            Map> outgoingReferences = new HashMap<>();
            for (Map.Entry> entry : methodCalls.entrySet()) {
                MethodReference.Handle method = entry.getKey();
                outgoingReferences.put(method, new HashSet<>(entry.getValue()));
            }
            // Perform inverse topology sorting on graphs composed of all methods
            LOGGER.debug("Performing topological sort...");
            Set dfsStack = new HashSet<>();
            Set visitedNodes = new HashSet<>();
            List sortedMethods = new ArrayList<>(outgoingReferences.size());
            for (MethodReference.Handle root : outgoingReferences.keySet()) {
                dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);
            }
            LOGGER.debug(String.format("Outgoing references %d, sortedMethods %d", outgoingReferences.size(), sortedMethods.size()));
            return sortedMethods;
        }
        ...
        ...
        private static void dfsTsort(Map> outgoingReferences,
                                        List sortedMethods, Set visitedNodes,
                                        Set stack, MethodReference.Handle node) {
            if (stack.contains(node)) {//Prevent entry into the loop in a method call chain of dfs
                return;
            }
            if (visitedNodes.contains(node)) {//Prevent reordering of a method and submethod
                return;
            }
            Set outgoingRefs = outgoingReferences.get(node);
            if (outgoingRefs == null) {
                return;
            }
            stack.add(node);
            for (MethodReference.Handle child : outgoingRefs) {
                dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);
            }
            stack.remove(node);
            visitedNodes.add(node);
            sortedMethods.add(node);
        }
    }
**Topological sorting**
Topological sorting is only available for directed acyclic graphs (DAGs), and
non-DAG graphs have no topological sorting. When a directed acyclic graph
meets the following conditions: \- every vertex appears and only appears once
\- If A is in front of B in the sequence, there is no path from B to A in the
figure.
Such a graph is a topologically ordered graph. Tree structures can actually be
transformed into topological sorting, while topological sorting does not
necessarily translate into trees.
Take the above topological sorting diagram as an example, use a dictionary to
represent the graph structure：
     graph = {
         "a": ["b","d"],
         "b": ["c"],
         "d": ["e","c"],
         "e": ["c"],
         "c": [],
     }
Implementation code:
    graph = {
        "a": ["b","d"],
        "b": ["c"],
        "d": ["e","c"],
        "e": ["c"],
        "c": [],
    }
    def TopologicalSort(graph):
      degrees = dict((u, 0) for u in graph)
      for u in graph:
          for v in graph[u]:
              degrees[v] += 1
      #Insert queue with zero degree of entry
      queue = [u for u in graph if degrees[u] == 0]
      res = []
      while queue:
          u = queue.pop()
          res.append(u)
          for v in graph[u]:
              # Remove the edge, the intrinsic degree of the current element related element -1
              degrees[v] -= 1
              if degrees[v] == 0:
                  queue.append(v)
      return res
    print(TopologicalSort(graph)) # ['a', 'd', 'e', 'b', 'c']
But in the method call, we hope that the final result is c, b, e, d, a, this
step requires inverse topological sorting, forward sorting using BFS, then the
opposite result can use DFS. Why do we need to use inverse topology sorting in
method calls, which is related to generating passthrough data streams. Look at
the following example:
    ...
        public String parentMethod(String arg){
            String vul = Obj.childMethod(arg);
            return vul;
        }
    ...
So is there any relationship between arg and the return value? Suppose
Obj.childMethod is:
    ...
        public String childMethod(String carg){
            return carg.toString();
        }
    ...
Since the return value of childMethod is related to `carg`, it can be
determined that the return value of parentMethod is related to parameter arg.
So if there is a submethod call and passed the parent method argument to the
submethod, you need to first determine the relationship between the submethod
return value and the submethod argument. Therefore, the judgment of the
submethod needs to be preceded, which is why the inverse topological sorting
is performed.
As you can see from the figure below, the data structure of outgoingReferences
is:
    {
        method1:(method2,method3,method4),
        method5:(method1,method6),
        ...
    }
And this structure is just right for inverse topological sorting.
But the above said that the topology can not form a ring when sorting, but
there must be a ring in the method call. How is the author avoided?
In the above dfsTsort implementation code, you can see that stack and
visitedNodes are used. Stack ensures that loops are not formed when performing
reverse topology sorting, and visitedNodes avoids repeated sorting. Use the
following call graph to demonstrate the process:
From the figure, we can see that there are rings med1->med2->med6->med1, and
there are repeated calls to med3. Strictly speaking, it cannot be sorted by
inverse topology, but it can be realized by the method of stack and visited
records. For the convenience of explanation, the above diagram is represented
by a tree:
Perform inverse topology sorting (DFS mode) on the above image:
Starting from med1, first add med1 to the stack. At this time, the status of
stack, visited, and sortedmethods is as follows:
Is there a submethod for med1? Yes, continue deep traversal. Put med2 into the
stack, the state at this time:
Does med2 have submethods? Yes, continue deep traversal. Put med3 into the
stack, the state at this time:
Does med3 have submethods? Yes, continue deep traversal. Put med7 into the
stack, the state at this time:
Does med7 have submethods? No, pop med7 from the stack and add visited and
sortedmethods, the state at this time:
Going back to the previous level, is there any other submethod for med3? Yes,
med8, put med8 into the stack, the state at this time:
Is there a submethod for med8? No, pop up the stack, add visited and
sortedmethods, the state at this time:
Going back to the previous level, is there any other submethod for med3? No,
pop up the stack, add visited and sortedmethods, the state at this time:
Going back to the previous level, is there any other submethod for med2? Yes,
med6, add med6 to the stack, the state at this time:
Is there a submethod for med6? Yes, med1, med1 in the stack? Do not join,
discard. The state is the same as the previous step.
Going back to the previous level, is there any other submethod for med6? No,
pop up the stack, add visited and sortedmethods, the status at this time:
Going back to the previous level, is there any other submethod for med2? No,
pop up the stack, add visited and sortedmethods, the status at this time:
Going back to the previous level, is there any other submethod for med1? Yes,
med3, med3 in visited? In, abandon.
Going back to the previous level, is there any other submethod for med1? Yes,
med4, add med4 to the stack, the state at this time:
Is there any other submethod for med4? No, pop up the stack, add the visited
and sortedmethods, the status at this time:
Going back to the previous level, is there any other submethod for med1? No,
pop up the stack, join the visited and sortedmethods, the state at this time
(ie the final state):
So the final inverse topological sorting results are: med7, med8, med3, med6,
med2, med4, med1.
**Generate passthrough data stream**
The sortedmethods are traversed in calculatePassthroughDataflow, and through
the bytecode analysis, the passthrough data stream of the method return value
and parameter relationship is generated. Note the following serialization
determiner, the author built three: JDK, Jackson, Xstream, according to the
specific serialization determiner to determine whether the class in the
decision process meets the deserialization requirements of the corresponding
library, jumps if it does not match Over:
  * For JDK (ObjectInputStream), class inherits the Serializable interface.
  * For Jackson, does the class have a 0 parameter constructor?
  * For Xstream, can the class name be a valid XML tag?
Generate passthrough data stream code:
    ...
        private static Map> calculatePassthroughDataflow(Map classResourceByName,
                                                                                              Map classMap,
                                                                                              InheritanceMap inheritanceMap,
                                                                                              List sortedMethods,
                                                                                              SerializableDecider serializableDecider) throws IOException {
            final Map> passthroughDataflow = new HashMap<>();
            for (MethodReference.Handle method : sortedMethods) {//The sortedmethods are traversed in turn, and the submethod of each method is always evaluated before this method, which is achieved by the above inverse topological sorting.。
                if (method.getName().equals("")) {
                    continue;
                }
                ClassResourceEnumerator.ClassResource classResource = classResourceByName.get(method.getClassReference().getName());
                try (InputStream inputStream = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(inputStream);
                    try {
                        PassthroughDataflowClassVisitor cv = new PassthroughDataflowClassVisitor(classMap, inheritanceMap,
                                passthroughDataflow, serializableDecider, Opcodes.ASM6, method);
                        cr.accept(cv, ClassReader.EXPAND_FRAMES);//Determine the relationship between the return value of the current method and the parameter by combining the classMap, the inheritanceMap, the determined passthroughDataflow result, and the serialization determiner information.
                        passthroughDataflow.put(method, cv.getReturnTaint());//Add the determined method and related pollution points to passthroughDataflow
                    } catch (Exception e) {
                        LOGGER.error("Exception analyzing " + method.getClassReference().getName(), e);
                    }
                } catch (IOException e) {
                    LOGGER.error("Unable to analyze " + method.getClassReference().getName(), e);
                }
            }
            return passthroughDataflow;
        }
    ...