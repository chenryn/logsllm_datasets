## 游戏引擎是怎么工作的？ {#04.html#-}说完了游戏引擎是什么，我们来看游戏引擎具体是怎么工作的。我先从代码层面来说。这里是一段伪代码：``{=html}    int DrawLine(const Surface& s, int sx, int sy, int fx, int fy, int fit, const Color& color);这段伪代码提供了一个在屏幕上画一个线条的函数。该函数提供了 7个传入参数，分别是：-   目标图层-   线（在游戏窗口内）的起始 x 点-   线（在游戏窗口内）的起始 y 点-   线（在游戏窗口内）的终止 x 点-   线（在游戏窗口内）的终止 y 点-   线条粗细-   线条颜色在调用了这个函数之后，你就能很容易在屏幕上画出一个线条。同时，在这个函数背后，引擎做了一系列这样的动作：-   判断传入的 Surface 图层对象是否正确、是否存在；-   判断传入的起始点、终止点是不是存在负数；-   判断颜色是不是正确；-   拆分 Color 变量为 RGB 值，填入到 SDL 绘图接口，调用 SDL    绘图接口绘制一条线。关于绘图接口，我会在下一节的内容中详细讲解。这里，你只需要知道，画线的接口函数在背后分解、组合、计算，然后会将绘制工作交给底层绘图接口就可以了。之所以要拿这个画线函数举例，是因为它展示了引擎中函数的使用方式。如果我们用一般的画线函数画圆，那首先要知道圆的直径和计算方式；如果画矩形，那就要知道哪里是起始点和终结点。这一系列动作等于将引擎所做的工作包含在了画线函数里，你只需要关心画线的这一系列参数如何使用就可以了。说完了代码层面，我们来说说非代码层面的东西。**游戏引擎其实也包括游戏开发的一系列工具，也就是诸如地图编辑器、关卡编辑器、人物编辑器、资源编辑器等。**美术、策划、制作人等，这些开发流程中的责任人，可以往工具内填入需要的东西，制作出需要的内容。我们拿人物编辑器来举例。如果我们使用通用编辑工具（比如 3DMAX、Maya等）编辑出来内容，需要经过格式的转换才能应用到游戏中，但是这样不仅耗费转换时间，也耗费调试时间。因为通用工具可能并不适合引擎本身所定义的格式，需要不停修正和更改。如果引擎本身就提供了这样的制作工具，那么制作出的内容直接就能在游戏中使用，不需要转换，所见即所得。所以，游戏引擎背后的工作方式是：-   [在代码层面，游戏引擎是对绘图接口、操作系统、音频等接口进行的代码层面的封装；]{.orange}-   [在工具层面，游戏引擎是一整套游戏内容的制作工具，方便你制作针对这个引擎的游戏内容。]{.orange}
## 自己开发引擎还是直接购买？ {#04.html#-}了解了游戏引擎的概念和工作方式，那么开发者究竟是自己编写引擎还是购买商业引擎比较好呢？从一般意义上讲，如果有实力，当然是自己开发引擎更贴合公司的情况。然而，这样付出的代价就是，花费大量的人力和财力，而且，以一般小公司或者起步阶段的开发者的开发水平，编写出的引擎，很可能只是一个半成品或者问题多多的残次品。**自研引擎并不是一个不可能完成的任务，但是要看公司的财力和程序员的实力。**购买商业引擎是现在大部分公司都会走的一条路。购买商业引擎只需要花费一笔钱就能拿到成熟的游戏引擎，直接可以开发游戏，然而付出的代价就是，你可能需要从头开始学习这套引擎的工作原理、工具套装。如果你非常熟悉 3DMAX等通用工具，那要从头学习开发工具，就会产生许多问题，比如：1.  引擎中包含的开发工具基本没有通用性可言。就算吃透了工具，对你今后的能力提升和职业规划也没有明显的帮助；2.  如果引擎升级或者更换引擎，就需要从头再学一次工具，会耗费大量时间和精力。当然会有一些优秀的商业引擎支持通用工具制作的内容导出和转换，直接在引擎中可以使用，当然这种引擎的购买费用也会更高；3.  另外，商业引擎本身也会存在一些隐藏得很深的 bug。在游戏发布后，这些    bug    可能会影响到游戏本身的质量和口碑。引擎出问题，游戏一定出问题，这也是购买商业引擎需要考量的一个风险。但是，在实际的开发过程中，考虑到公司的经济实力和程序员的开发能力，一般来说，大多数开发者都会选择购买商业引擎，毕竟这在一定程度上，是个非常省时省力的事情。
## 游戏引擎是用什么编写的？ {#04.html#-}尽管如此，你还是需要掌握更多游戏引擎相关的知识。因为，不管你是购买游戏引擎还是自己开发游戏引擎，了解游戏引擎，会让你对游戏编程的总体脉络有一个了解。一旦在开发过程中出现问题，比如你发现屏幕贴图出问题了，那究竟是自己的代码出现问题，还是引擎本身出现问题呢？熟知游戏引擎的开发逻辑，你就能很快定位问题所在。事实上，**游戏引擎并没有一种固定的开发语言，就看你所制作游戏的目标平台是什么。**
### 1.C/C++ {#04.html#1-c-c-}如果你在 Windows 或者 Linux 下开发游戏，游戏引擎 99% 都是使用 C/C++或者汇编语言编写。由于 C/C++ 和汇编运行效率高，所以在 Windows下的执行效率也非常高。你看到的 Python 游戏引擎、Ruby游戏引擎等脚本语言引擎，都是在 C/C++的基础上进行封装的。这样可以方便程序员将专注力放在游戏逻辑上，而不是在处理底层问题上。
### 2.**JavaScript/TypeScript** {#04.html#2-javascript-typescript-}如果是 HTML5 游戏，游戏引擎的编程接口 99% 是使用 JavaScript完成的。比如耳熟能详的 Cocos2d引擎、白鹭引擎等等。至于其他配套的开发工具，可以使用任意软件开发语言进行编写。
### 3..NET {#04.html#3-net}经过微软的努力和版本迭代，在 Windows 下，.NET的运行效率和开发效率已经提高了好几个等级。由于和 Windows紧密结合，现在的.NET 的运行效率只比 C/C++编写的代码低一点。在电脑配置比较高的情况下，用户基本不会有太多的感知。而.NET对于 Windows 底层的调用和控制，比 C/C++更方便，编程也更容易，所以现在已经出现了一些引擎是使用.NET编写的。这对于.NET 开发者来说是一件好事。
### 4.Java {#04.html#4-java}和.NET 一样，使用 Java 编写的游戏引擎并不多。虽然 Java的运行效率已经有了质的提升，但是对于编写大型游戏来说还是有相当大的瓶颈。随着电脑硬件配置的提升，使用Java 编写游戏也不再是一件不可能的事情。比如大火的《我的世界》，就是使用Java 编写的。
## 小结 {#04.html#-}好了，这一节内容差不多了，总结一下，我主要给你分享了四个内容，分别是游戏引擎的定义、游戏引擎的工作方式、游戏引擎的选择和编写。你只需要记住以下这些内容即可：-   游戏引擎是一整套的游戏开发程序接口和开发组件，可以让你更方便、更专注于游戏的开发；-   游戏引擎控制着游戏的几乎所有内容，游戏的表现质量和游戏引擎直接相关；-   针对不同的平台，游戏引擎所使用的编程语言也不一样。而了解了游戏引擎的编写，在之后的开发过程中，会有非常多的便利。最后，给你留一个思考题：什么情况下，我们可以跳过游戏引擎，直接编写一款游戏呢？欢迎留言说出你的看法，我在下一节的挑战中等你！![](Images/687aa95b3803eb0079b384dbad39d165.png){savepage-src="https://static001.geekbang.org/resource/image/1d/cf/1dddc22b262072c5c2e8b4937907f7cf.jpg"}