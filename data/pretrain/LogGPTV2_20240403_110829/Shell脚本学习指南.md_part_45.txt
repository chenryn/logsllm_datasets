### 优化后的文本

#### 命令管道在 `awk` 中的应用
命令管道在 `awk` 中能够发挥强大的功能。管道可以在字符字符串中定义，也可以包含任意的 Shell 命令。以下是一个与 `getline` 搭配使用的示例：

```awk
"date" | getline now
close("date")
print "The current time is", now
```

大多数系统会限制打开文件的数量，因此当使用管道时，我们应通过 `close()` 函数关闭管道文件。在旧版本的 `awk` 实现中，`close` 是一个语句而不是函数，因此没有可移植的方式可以像使用函数一样使用它并获取可靠的返回码。

#### 在循环中使用命令管道
接下来，我们将说明如何在循环中使用命令管道：

```awk
command = "some_command"
while ((command | getline) > 0)
{
    # 处理每一行
}
close(command)
```

我们使用变量保存管道，以避免重复复杂的字符序列，并确保所有使用的命令都确实匹配。在命令字符串中，每个字符都是有意义的，即使是单一空格的差异也可能会引用不同的命令。

#### 输出重定向
`print` 和 `printf` 语句（见 9.9.8 节）通常将其输出发送到标准输出。不过，你也可以将它们重定向到文件：

```awk
print "Hello, world" > file
printf("The tenth power of %d is %d\n", 2, 2^10) > "/dev/tty"
```

为了追加到已存在的文件（或创建新文件），可以使用 `>>` 输出重定向：

```awk
print "Hello, world" >> file
```

你可以在多个输出语句上将它们的输出全部重定向到相同的文件。完成写入后，请使用 `close(file)` 关闭文件，释放其占用的资源。请避免在没有适当插入 `close()` 的情况下混用 `>` 和 `>>` 到相同文件。在 `awk` 中，这些运算符告知输出文件应该如何打开使用。一旦打开后，文件便会一直保持打开状态，直到明确关闭或程序结束。相比之下，Shell 的重定向是要求每个命令打开并关闭文件。

或者，你也可以将输出传送到管道：

```awk
for (name in telephone)
    print name "\t" telephone[name] | "sort"
```

由于输入来自管道，关闭输出管道的操作会在完成后立即执行。如果你需要在同一程序中读取输出，这一点尤为重要。例如，你可以指示输出到临时文件，然后在完成后读取它：

```awk
tmpfile = "/tmp/telephone.tmp"
command = "sort > " tmpfile
for (name in telephone)
    print name "\t" telephone[name] | command
close(command)
close(tmpfile)
```

在 `awk` 中使用管道，使得整个 UNIX 工具集都可以为我们所用，避免了对其他编程语言中大量函数库的需求，也有助于保持语言的小规模。例如，`awk` 不提供排序的内置函数，因为它可以直接调用功能强大的 `sort` 命令。

#### 执行外部程序
除了 `getline` 语句和 `awk` 管道中的输出重定向外，`system(command)` 函数提供了第三种与外部程序通信的方式。它的返回值是命令的退出状态码。首先，它会清除所有缓冲区输出，然后启动一个 `/bin/sh` 实例并将命令传递给它。Shell 的标准错误输出和标准输出与 `awk` 程序相同，除非命令的 I/O 被重定向，否则来自 `awk` 程序和 Shell 命令的输出都会按预期顺序出现。

以下是解决电话目录排序问题的较短方案，使用临时文件和 `system()` 而不是 `awk` 管道：

```awk
for (name in telephone)
    print name "\t" telephone[name] > tmpfile
close(tmpfile)
system("sort " tmpfile)
```

临时文件必须在调用 `system()` 之前关闭，以确保任何缓冲区输出都正确记录在文件内。对于由 `system()` 执行的命令并不需要调用 `close()`，因为 `close()` 仅针对通过 I/O 重定向运算符打开的文件或管道。

`system()` 函数还提供了一种简单删除脚本临时文件的方法：

```awk
system("rm -f " tmpfile)
```

传递给 `system()` 的命令可以包含多行：

```awk
system("cat <<EOF\nuno\ndos\ntres\nEOF")
```

它产生的输出与从嵌入文件复制到标准输出相同：

```
uno
dos
tres
```

由于每次调用 `system()` 都会启动一个新的 Shell，因此没有简单的方式可以在分开的 `system()` 调用之间传递数据，除非通过中间文件。下面是一个简单的解决方案，将输出管道传递到 Shell 以执行多个命令：

```awk
system("echo 'uno\ndos\ntres' | sort")
```

希望这些示例和解释能帮助你更好地理解和使用 `awk` 中的命令管道和外部程序执行功能。