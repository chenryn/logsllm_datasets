### 用只读重定位表（Read-Only Relocations, relro）缓解技术

通过使用补丁[1]，一种新的缓解技术——只读重定位表（Read-Only Relocations, relro）被引入。此技术可以通过编译参数 `-Wl,-z,relro` 启用。要检查某个二进制文件是否已经应用了这一缓解措施，可以使用 `readelf` 工具。例如：

```bash
dev:~/android $ readelf -d cat-gn-takju | grep RELRO
```

然而，仅使用 `-Wl,-z,relro` 参数是不够的，因为这只会部分启用 relro，GOT 表仍然可写。为了实现完全的 relro，还需要添加 `-Wl,-z,now` 参数。以下是如何验证 relro 是否完全启用的示例代码：

```bash
dev:~/android $ readelf -d cat-gn-takju | grep -E 'FLAGS|BIND_NOW'
```

在添加新参数后，链接器会在程序启动时加载所有依赖库，而不是按需延迟加载。这样，在程序执行期间，GOT 可以被标记为只读。由于这片内存区域是只读的，任何试图写入 GOT 的行为都会导致进程崩溃，从而阻止漏洞利用。

Android 在 2012 年 4 月将此缓解措施作为 4.1.1 版本的一部分发布，并且从 NDK 8b 版开始默认启用这个机制。开发者需要使用新版本的 NDK 重新编译旧源代码以确保安全。

### 沙盒技术

自 Google Chrome 发布以来，沙盒技术已成为一种流行的缓解措施。沙盒的主要目的是通过最小特权原则来降低程序中高风险代码的影响。即使攻击者能够执行任意代码，沙盒也可以防止其访问敏感数据或破坏系统。目前，许多流行软件如 Microsoft Office、Adobe Reader 和 Google Chrome 都使用了沙盒技术。

Android 从第一版开始就使用了一种基本形式的沙盒，通过不同的用户身份隔离进程。随着 Android 4.1 的发布，增加了隔离服务特性，允许应用程序创建具有不同用户 ID 的隔离进程，从而进一步增强了沙盒效果。

### FORTIFY_SOURCE 源代码增强

2004 年，Linux 的长期贡献者 Jakub Jelínek 创建了 FORTIFY_SOURCE 源代码增强机制，用于防止常见的缓冲区溢出缺陷。该机制由两部分组成：编译器和 C 语言库。如果在编译源代码时启用优化并传递 `-D_FORTIFY_SOURCE` 参数，编译器会在易出错的函数周围包裹一层额外的代码，这些包裹函数会在运行时验证传入的参数。例如，`strcpy` 函数会比较目标缓冲区大小与源字符串长度，以防止溢出。

Android 在 4.2 版本中加入了对 FORTIFY_SOURCE 的支持，但在 NDK 中尚未启用。通过一系列修改，Bionic C 运行时库增强了 15 个最易出错的函数。在 Android 4.4 中实现了 FORTIFY_SOURCE 的第 2 级保护。

### 访问控制机制

访问控制技术允许系统管理员限制其他用户的行为，主要包括自主访问控制 (DAC) 和强制访问控制 (MAC)。SELinux 是 MAC 的一个例子，它在 Android 设备中得到广泛应用。从 2012 年到 2013 年初，Stephen Smalley、Robert Craig、Kenny Root、Joshua Brindle 和 William Roberts 将 SELinux 移植到了 Android。三星在 Galaxy S4 上首次实现了 SELinux，而谷歌在 Android 4.4 中正式启用了 enforcing 模式。

### 保护内核

多年来，研究人员致力于加固 Linux 内核，包括指针和日志限制。`kptr_restrict` 和 `dmesg_restrict` 是两种内核设置，用于防止普通用户获取敏感内核内存地址信息。这些设置通过限制 `printk` 函数和 `dmesg` 命令的输出来提高安全性。

---

通过以上改进，文本变得更加清晰、连贯和专业。希望这些修改对你有帮助！