### 使用Deep Learning VM镜像进行TensorFlow操作

#### 1. 克隆TensorFlow仓库
首先，我们使用以下命令克隆TensorFlow的GitHub仓库到本地机器上：
```bash
googcheng@tensorflow-4-vm:~$ git clone https://github.com/tensorflow/tensorflow.git
Cloning into 'tensorflow'...
remote: Enumerating objects: 2167, done.
remote: Counting objects: 100% (2167/2167), done.
remote: Compressing objects: 100% (845/845), done.
remote: Total 598119 (delta 1392), reused 1643 (delta 1320), pack-reused 595952
Receiving objects: 100% (598119/598119), 343.85 MiB | 47.04 MiB/s, done.
Resolving deltas: 100% (483846/483846), done.
```
确认克隆成功后，可以通过列出当前目录的内容来验证：
```bash
googcheng@tensorflow-4-vm:~$ ls
tensorflow
```

#### 2. 进入TensorFlow目录并查看内容
接下来，进入刚刚克隆下来的`tensorflow`目录，并查看其中包含的文件和子目录：
```bash
googcheng@tensorflow-4-vm:~$ cd tensorflow/
googcheng@tensorflow-4-vm:~/tensorflow$ ls
ACKNOWLEDGMENTS     AUTHORS             CODEOWNERS    CONTRIBUTING.md    LICENSE       RELEASE.md   third_party
ADOPTERS.md         BUILD               configure     ISSUES.md          models.BUILD  SECURITY.md  tools
arm_compiler.BUILD  CODE_OF_CONDUCT.md  configure.py  ISSUE_TEMPLATE.md  README.md     tensorflow   WORKSPACE
```

#### 3. 构建并运行示例项目
尝试构建并运行一个基于TensorFlow的语音识别示例。这里使用了`bazel`作为构建工具，并指定了优化选项及模型参数：
```bash
googcheng@tensorflow-4-vm:~/tensorflow$ bazel run -c opt --copt=-mavx2 --copt=-mfma \
> tensorflow/examples/speech_commands:train -- \
> --model_architecture=tiny_conv --window_stride=20 --preprocess=average \
> --wanted_words="yes,no" --silence_percentage=25 --unknown_percentage=25 --quantize=1
Extracting Bazel installation...
Starting local Bazel server and connecting to it...
INFO: Options provided by the client:
  Inherited 'common' options: --isatty=1 --terminal_columns=112
INFO: Reading rc options for 'run' from /home/googcheng/tensorflow/.bazelrc:
  Inherited 'build' options: --apple_platform_type=macos --define framework_shared_object=true --define=use_fast_cpp_protos=true --define=allow_oversize_protos=true --spawn_strategy=standalone --strategy=Genrule=standalone -c opt --announce_rc --define=grpc_no_ares=true --define=PREFIX=/usr --define=LIBDIR=$(PREFIX)/lib --define=INCLUDEDIR=$(PREFIX)/include
ERROR: /home/googcheng/.cache/bazel/_bazel_googcheng/c7d71bbdf8501e4441f5b58bb2db4ae1/external/io_bazel_rules_closure/closure/protobuf/closure_proto_library.bzl:66:21: name 'ProtoInfo' is not defined (did you mean 'protos'?)
ERROR: error loading package '': Extension 'closure/protobuf/closure_proto_library.bzl' has errors
ERROR: error loading package '': Extension 'closure/protobuf/closure_proto_library.bzl' has errors
INFO: Elapsed time: 5.973s
INFO: 0 processes.
FAILED: Build did NOT complete successfully (0 packages loaded)
FAILED: Build did NOT complete successfully (0 packages loaded)
```
从上述输出可以看到，由于某些配置或依赖问题，构建过程未能成功完成。

#### 4. 查看最近的Git提交记录
为了进一步诊断可能存在的问题，可以查看最近对TensorFlow仓库所做的更改：
```bash
googcheng@tensorflow-4-vm:~/tensorflow$ git log
commit 94feeb1c0ade3c673a758c0794e19c82b6e868b6
Author: Tiezhen WANG 
Date:   Fri May 31 03:18:30 2019 -0700
    nit remove unnecessary indirection in all_ops_resolver.
    PiperOrigin-RevId: 250856298

commit b1a535b3abc11de5e00f5b40b2a7f795b7160376
Author: A. Unique TensorFlower 
Date:   Fri May 31 02:49:19 2019 -0700
    Test that tf.saved_model.load() does not add to the TRAINABLE_VARIABLES
    collection and add a comment why. There is no change in behavior.
```

通过检查这些日志条目，您可以更好地理解最近对代码库所做的修改，从而有助于定位导致构建失败的具体原因。