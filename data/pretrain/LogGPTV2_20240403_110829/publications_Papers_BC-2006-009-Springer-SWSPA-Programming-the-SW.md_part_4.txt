"http://dme.uma.pt/jcardoso/owl/University.owl#";
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read(“http://dme.uma.pt/jcardoso/owl/University.owl");
The main class to carry our reasoning is the class . This
Reasoner
class allows us to extract knowledge from an ontology. Jena provides
several reasoners to work with different types of ontology. Since in
Programming the Semantic Web 25
our example we want to use our OWL University ontology, we need
to obtain an OWL reasoner. This reasoner can be accessed using
the
method call, i.e.,
ReasonerRegistery.getOWLReasoner()
Reasoner reasoner = ReasonerRegistry.getOWLReasoner();
Other reasoners can be instantiated with a call to the methods
getOWLMicroReasoner(), getOWLMiniReasoner(),
, and
getRDFSReasoner() getTransitiveReasoner().
Once we have a reasoner, we need to bind it to the ontology model
we have created. This is achieved with a call to the method
, i.e.,
bindSchema
reasoner = reasoner.bindSchema(model);
This invocation returns a reasoner which can infer new knowledge
from the ontology’s rules. The next step is to use the bound reasoner
to create an from the University model,
InfModel
InfModel infmodel=ModelFactory.createInfModel(reasoner,model);
Since several Java packages are needed to execute and run the
examples that we have given, the following segment shows all the
Java code needed to instantiate a reasoner.
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.InfModel;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.reasoner.Reasoner;
import com.hp.hpl.jena.reasoner.ReasonerRegistry;
public class InstanciateReasoner {
public static void main(String[] args) {
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
String BaseUri=
"http://dme.uma.pt/jcardoso/owl/University.owl";
model.read(BaseUri);
26 Semantic Web Services, Processes and Applications
Reasoner reasoner = ReasonerRegistry.getOWLReasoner();
reasoner=reasoner.bindSchema(model);
InfModel infmodel
= ModelFactory.createInfModel(reasoner,model);
}
}
Once a reasoner is instantiated, one of the first tasks that we can
execute is to check for inconsistencies within the ontology data by
using the method, i.e.,
validate()
ValidityReport vr = infmodel.validate();
if (vr.isValid()){
System.out.println("Valid OWL");
}
else {
System.out.println("Not a valid OWL!");
for (Iterator i = vr.getReports(); i.hasNext();){
System.out.println(i.next());
}
}
This example prints a report if the ontology data is found to be
inconsistent. The following output shows the example of a report
generated when trying to validate an inconsistent ontology,
Not a valid OWL
- Error ("range check"): "Incorrectly typed literal due to
range (prop, value)"
Culprit=
http://dme.uma.pt/jcardoso/owl/University.owl#Carolina
Implicated node:
http://dme.uma.pt/jcardoso/owl/University.owl#Email
Implicated node: 'PI:EMAIL'
The report indicates that the email address ( ) of the
#Email
individual has an incorrect type.
#Carolina
One other interesting operation that we can carry out is to obtain
information from the ontology. For example, we can retrieve all the
Programming the Semantic Web 27
pairs (property, resource) associated with the resource describing the
course CS8050, which is defined with ID .
#CS8050
String BaseUri=
"http://dme.uma.pt/jcardoso/owl/University.owl";
. . .
Resource res = infmodel.getResource(BaseUri+"#CS");
System.out.println("CS8050 *:");
for (StmtIterator i =
infmodel.listStatements(res,(Property)null,(Resource)null);
i.hasNext(); )
{
Statement stmt = i.nextStatement();
System.out.println(PrintUtil.print(stmt));
}
The output of running the previous example is shown below. To
make the output more readable we have replaced the URI
with the
http://dme.uma.pt/jcardoso/owl/University.owl
symbol and the URI
@ http://www.w3.org/2001/XMLSchema
with the symbol .
§
CS8050 *:
(@#CS8050 rdf:type @#Course)
(@#CS8050 @#IsStudiedBy @#Adelia)
(@#CS8050 @#CourseName 'Semantic Web'^^§#string)
(@#CS8050 @#IsStudiedBy @#Carolina)
(@#CS8050 @#IsTeachedBy @#IsabelCardoso)
(@#CS8050 rdf:type owl:Thing)
(@#CS8050 rdf:type rdfs:Resource)
. . .
(@#CS8050 owl:sameAs @#CS8050)
Instance recognition is another important operation in inference.
Instance recognition tests if a particular individual belongs to a class.
For example, in our University ontology, is known to be an
#Adelia
individual of the class and the class is a
#Student #Student
subclass of the class . One question that can be asked is if
#Person
is recognized to be an instance or individual of the class
#Adelia
28 Semantic Web Services, Processes and Applications
, in other words is Adelia a person? This can be asked of the
#Person
inference model using the method, i.e.,
contains
Resource r1 = infmodel.getResource(BaseUri+"#Adelia");
Resource r2 = infmodel.getResource(BaseUri+"#Person");
if (infmodel.contains(r1, RDF.type, r2)) {
System.out.println("Adelia is a Person");
} else {
System.out.println("Adelia is not a Person");
}
Other interesting examples of inference include the use of the
transitivity, union, functional, and intersection properties.
5.9 Persistence
As we have seen above, Jena provides a set of methods to load
ontologies from files containing information models and instances.
Jena can also store and load ontologies from relational databases.
Depending on the database management system used, it is possible to
distribute stored metadata. While Jena itself is not distributed, by
using a distributed database back end, an application may be
distributed. Currently, Jena only supports MySQL, Oracle and
PostgreSQL. To create a persistent model in a database we can use the
object and invoke the
ModelFactory createModelRDBMaker
method. This method accepts a connection object to
DBConnection
the database. An object will be created and can
ModelMaker
subsequently be used to create the model in the database.
For example, to store an existing ontology model in a database we
can execute the following segment of code,
Class.forName("com.mysql.jdbc.Driver");
String BaseURI=
"http://dme.uma.pt/jcardoso/owl/University.owl";
DBConnection conn = new DBConnection(
"jdbc:mysql://localhost/UnivDB",
"mylogin",
"mypassword",
"MySQL");
ModelMaker maker=ModelFactory.createModelRDBMaker(conn);
Model db=maker.createModel(BaseURI,false);
Programming the Semantic Web 29
db.begin();
db.read(BaseURI);
db.commit();
And to read a model from a database we can use the following
program,
Class.forName("com.mysql.jdbc.Driver");
String BaseURI=
"http://dme.uma.pt/jcardoso/owl/University.owl";
DBConnection conn = new DBConnection(
"jdbc:mysql://localhost/UnivDB",
"mylogin", "mypassword", "MySQL");
ModelMaker maker=ModelFactory.createModelRDBMaker(conn);
Model base=maker.createModel(BaseURI, false);
model=ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM,base);
6. QUESTIONS FOR DISCUSSION
Beginner:
1. Identify the main differences between XML and RDF.
2. Install Jena in your computer and create programmatically an
OWL ontology describing painters and their paintings. The
ontology should be able to represent the following statements:
“Painter X has painted the painting Y”, “Painter X was born in
W”, and “Painting Y was painted in year Z”.
3. Create several individuals for the Painters ontology. For example:
Paul Cezanne, born 1839, Aix-en-Provence, France, painted “Le
paysan” and “Le Vase Bleu”; Leonardo da Vinci, born 1452,
Vinci, Florence, painted “Mona Lisa” and “The Last Supper”;
Michelangelo Buonaroti, born 1475, Florence, painted “Sybille de
Cummes” and “Delphes Sylphide”.
Intermediate:
1. Identify the main differences between RDFS and OWL.
2. Write down an RDQL query which retrieves the names of all the
painters born in Florence using the ontology created in the previous
exercise.
30 Semantic Web Services, Processes and Applications
3. Use Jena to execute the previous RDQL query and write down the
results of executing the query on the ontology.
4. Make your ontology persistent in a database.
Advanced:
1. Write down and execute an RDQL query which retrieves the
paintings Michelangelo Buonaroti painted in 1512 (note: The
“Sybille de Cummes” was painted 1512).
2. Validate your model using Jena’s inference engine.
3. Why is inference a time consuming operation?
7. SUGGESTED ADDITIONAL READING
• Jena
Documentation, http://jena.sourceforge.net/documentation.html.
This is a fundamental source of information to start programming
with the Jena Framework.
• Antoniou, G. and van Harmelen, F. A semantic Web primer.
Cambridge, MA: MIT Press, 2004. 238 pp.: This book is a good
introduction to Semantic Web languages.
• H. Peter Alesso and Craig F. Smith, Developing Semantic Web
Services, AK Peters, Ltd, October, 2004, 445 pp.: The book
presents a good overview of Semantic Tools in chapter thirteen.
8. REFERENCES
Berners-Lee, T., J. Hendler, et al. (2001). The Semantic Web. Scientific American.
May 2001.
Berners-Lee, T., J. Hendler, et al. (2001). The Semantic Web: A new form of Web
content that is meaningful to computers will unleash a revolution of new
possibilities. Scientific American.
Cardoso, J. (2004). Issues of Dynamic Travel Packaging using Web Process
Technology. International Conference e-Commerce 2004, Lisbon, Portugal.
Cardoso, J., J. Miller, et al. (2005). Academic and Industrial Research: Do their
Approaches Differ in Adding Semantics to Web Services. Semantic Web
Process: powering next generation of processes with Semantics and Web
services. J. Cardoso and S. A. Heidelberg, Germany, Springer-Verlag.
3387: 14-21.
Decker, S., S. Melnik, et al. (2000). "The Semantic Web: The Roles of XML and
RDF." Internet Computing 4(5): 63-74.
Programming the Semantic Web 31
DL (2005). Description Logics, http://www.dl.kr.org/.
FaCT (2005). FaCT++, http://owl.man.ac.uk/factplusplus/.
Gandon, F. L. and N. M. Sadeh (2003). OWL inference engine using XSLT and
JESS, http://www-
2.cs.cmu.edu/~sadeh/MyCampusMirror/OWLEngine.html.
Ian Horrocks, Peter F. Patel-Schneider, et al. (2003). SWRL: A Semantic Web Rule
Language Combining OWL and
RuleML, http://www.daml.org/2003/11/swrl/.
Jasper, R. and M. Uschold (1999). A framework for understanding and classifying
ontology applications. IJCAI99 Workshop on Ontologies and Problem-
Solving Methods.
Jena (2002). The jena semantic web toolkit, http://www.hpl.hp.com/semweb/jena-
top.html, Hewlett-Packard Company.
Jena (2005). Jena - A Semantic Web Framework for
Java, http://jena.sourceforge.net/,.
Karvounarakis, G., S. Alexaki, et al. (2002). RQL: a declarative query language for
RDF. Eleventh International World Wide Web Conference, Honolulu,
Hawaii, USA.
Kumar, A. and B. Smith (2004). On Controlled Vocabularies in Bioinformatics: A
Case Study in Gene Ontology. Drug Discovery Today: BIOSILICO. 2: 246-
252.
Lassila, O. and D. McGuinness (2001). "The Role of Frame-Based Representation on
the Semantic Web." Linköping Electronic Articles in Computer and
Information Science 6(5).
Meinel, C., H. Sack, et al. (2002). Course management in the twinkle of an eye -
LCMS: a professional course management system. Proceedings of the 30th
annual ACM SIGUCCS conference on User services, Providence, Rhode
Island, USA, ACM Press.
OWL (2004). OWL Web Ontology Language Reference, W3C Recommendation,
World Wide Web Consortium, http://www.w3.org/TR/owl-ref/. 2004.
OWLAPI (2006). "The WonderWeb OLW
API, http://sourceforge.net/projects/owlapi."
OWL-S (2004). OWL-based Web Service Ontology. 2004.
OWLViz (2006). OWL Viz. [Online] Available at http://www.co-
ode.org/downloads/owlviz/.
Protégé (2005). Protégé, Stanford Medical Informatics. 2005.
Protégé-API (2006). The Protégé-OWL API - Programmer's
Guide, http://protege.stanford.edu/plugins/owl/api/guide.html.
RDF (2002). Resource Description Framework (RDF), http://www.w3.org/RDF/.
RDFS (2004). RDF Vocabulary Description Language 1.0: RDF Schema,
W3C, http://www.w3.org/TR/rdf-schema/.
RDQL (2005). Jena RDQL, http://jena.sourceforge.net/RDQL/.
32 Semantic Web Services, Processes and Applications
Roure, D., N. Jennings, et al. (2001). Research Agenda for the Future Semantic Grid:
A Future e-Science
Infrastructure http://www.semanticgrid.org/v1.9/semgrid.pdf.
Shum, S. B., E. Motta, et al. (2000). "ScholOnto: an ontology-based digital library
server for research documents and discourse." International Journal on
Digital Libraries 3(3): 237-248.
SMORE (2006). "SMORE - Create OWL Markup for HTML Web
Pages, http://www.mindswap.org/2005/SMORE/."
Swoogle (2005). Search and Metadata for the Semantic Web -
http://swoogle.umbc.edu/.
SWOOP (2006). "SWOOP - A Hypermedia-based Featherweight OWL Ontology
Editor, www.mindswap.org/2004/SWOOP/."
Wielemaker, J. (2005). SWI-Prolog Semantic Web Library, http://www.swi-
prolog.org/packages/semweb.html.