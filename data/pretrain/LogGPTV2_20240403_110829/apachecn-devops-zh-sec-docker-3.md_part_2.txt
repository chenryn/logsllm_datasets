    #CONSOLE=/dev/console
    ```
    类似于前面的例子，我们需要通过移除`#`来取消对该行的注释，以使其生效。这将只允许根用户在`console`登录，而不允许通过 SSH 或其他方法登录。
*   Restrict `su` command
    `su`命令允许您以根用户身份登录，并能够发出根级命令，这使您可以完全访问整个系统。为了限制访问谁可以使用这个命令，有一个位于`/etc/pam.d/su`的文件，在这个文件中，你会看到类似如下的一行:
    ```
    auth required /lib/security/pam_wheel.so use_uid
    ```
    根据您的 Linux 风格，您也可以在这里选择以下代码行:
    ```
    auth required pam_wheel.so use_uid
    ```
    车轮成员身份的检查将根据当前用户标识进行，以便能够使用`su`命令。
*   要求`sudo`运行命令
*   还押的其他一些访问控制是使用以下控制:
    *   **强制** **访问控制** ( **MAC** ):限制用户在系统上可以做什么
    *   **基于角色的** **访问控制**:使用组来分配这些组可以执行的角色
    *   **基于规则集的访问控制** ( **RSBAC** ):在请求类型中分组并基于规则集执行操作的规则集
    *   **域** **和类型强制** ( **DTE** ):允许或限制某些域执行设置操作或阻止域相互交互
您还可以利用以下内容:
*   基于 RPM 的系统(如红帽、CentOS 和 Fedora)
*   基于 apt-get 的系统(如 Ubuntu 和 Debian)
正如我们前面讨论的，这些 RSBAC 允许您选择适合您的系统运行的控制方法。您还可以创建自己的访问控制模块来帮助实施。默认情况下，在大多数 Linux 系统上，这些类型的环境处于启用或强制模式。大多数人在创建新系统时会关闭这些功能，但它会带来安全缺陷，因此，了解这些系统如何工作并在启用或强制模式下使用它们来帮助降低进一步的风险非常重要。
有关每种方法的更多信息，请访问:
*   **SELinux**:T3】https://en.wikipedia.org/wiki/Security-Enhanced_Linux
*   **表盘**:[https://en . Wikipedia . org/wiki/表盘](https://en.wikipedia.org/wiki/AppArmor)
## 分布集中
在 Linux 社区中，有许多 Linux 发行版，或者他们称之为口味，已经*预烤*已经硬化。我们前面提到了，Linux 的 **Owlwall** 版本，但是还有其他版本。另外两个中，已经不在身边的一个是**金刚**，另一个是 **Gentoo Linux** 。作为操作系统构建的标准，这些 Linux 风格具有一些烤熟的 Linux 内核硬化。
# Linux 内核硬化工具
有一些 Linux 内核强化工具，但是我们将在这一部分只关注其中的两个。第一个是 Grsecurity，第二个是 Lynis。这些是可以添加到您的库中的工具，有助于提高您将在其上运行 Docker 容器的环境的安全性。
## Grsecurity
那么 Grsecurity 到底是什么？根据他们的网站，Grsecurity 是对 Linux 内核的广泛安全增强。此增强功能包含多种有助于防御各种威胁的项目。这些威胁可能包括以下组件:
*   **零日利用**:这减轻并保持您的环境受到保护，直到可以通过供应商获得长期解决方案。
*   **共享主机或容器弱点**:这可以保护您免受各种技术和容器对主机上每个容器的内核危害。
*   **它超越了基本的访问控制** : Grsecurity 与 PaX 团队合作，向攻击者引入复杂性和不可预测性，同时做出响应并拒绝给攻击者任何更多的机会。
*   **与您现有的 Linux 发行版集成:**由于 Grsecurity 是基于内核的，因此它可以与任何 Linux 风格一起使用，如 Red Hat、Ubuntu、Debian 和 Gentoo。不管你的 Linux 风格是什么，都没关系，因为重点是底层的 Linux 内核。
更多信息可以在[https://grsecurity.net/](https://grsecurity.net/)找到。
要直接访问好的内容并查看通过使用像 Grsecurity 这样的工具提供的功能集，您需要访问以下链接:
[http://grsecurity.net/features.php](http://grsecurity.net/features.php)
在此页面上，项目将分为以下五类:
*   内存损坏防御
*   文件系统硬化
*   杂项保护
*   RBAC
*   GCC 外挂程式
## Lynis
Lynis 是一个开放的源工具，用于审计您的系统的安全性。它直接在主机上运行，因此可以访问 Linux 内核本身以及其他各种项目。Lynis 几乎可以在所有 Unix 操作系统上运行，包括:
*   先期情报（AdvancedInformationSheet）
*   FreeBSD
*   Mac OS 系统
*   Linux 操作系统
*   Solaris
Lynis 是作为 shell 脚本编写的，因此，它就像在您的系统上复制和粘贴并运行一个简单的命令一样简单:
```
./lynis audit system
```
运行时，正在采取以下措施:
*   确定操作系统
*   搜索可用的工具和实用程序
*   检查是否有任何 Lynis 更新
*   从已启用的插件运行测试
*   按类别运行安全测试
*   报告安全扫描的状态
更多信息可以在[https://rootkit.nl/projects/lynis.html](https://rootkit.nl/projects/lynis.html)和[https://cisofy.com/lynis/](https://cisofy.com/lynis/)找到。
# 总结
在这一章中，我们看了强化和保护 Linux 内核。我们首先看了一些硬化指南，然后深入了解了 SANS 协会硬化指南。我们还研究了如何通过各种补丁来防止内核和应用中的缓冲区溢出。我们还研究了各种访问控制，SELinux 和 AppArmor。最后，我们看了两个强化工具，它们可以以 Grsecurity 和 Lynis 的形式添加到我们的软件工具箱中。
在下一章中，我们将了解 Docker Bench 应用的安全性。这是一个可以查看各种 Docker 项目的应用，例如主机配置、Docker 守护程序配置、守护程序配置文件、容器映像和构建文件、容器运行时以及最后的 Docker 安全操作。它将包含带有大量代码输出的实践示例。