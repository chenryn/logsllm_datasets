void *
daemon_loop(void *fd)
{
ssize_t ret;
char buf[512];
for (;;) { // a simple echo loop
if ((ret = readline((int)fd, buf, 512)) > 0)
write((int)fd, buf, ret);
else {
close((int)fd);
return (void *)0;
}
}
}
int
main(void)
{
char path[MAXPATHLEN + 1];
char *val;
int fd, kq;
size_t i;
pthread_t thread;
struct kevent kev_init, kev_listener;
struct sockaddr_storage ss;
socklen_t slen;
launch_data_t checkin_response, checkin_request;
launch_data_t sockets_dict, listening_fd_array;
setbuf(stderr, NULL); // make stderr unbuffered
// launchd will send us a SIGTERM while terminating
signal(SIGTERM, (sig_t)SIGTERM_handler);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 49 of 59
// print our cwd: our configuration file specified this
if (getcwd(path, MAXPATHLEN))
fprintf(stderr, "Working directory: %s\n", path);
// print $DUMMY_VARIABLE: our configuration file specified this
fprintf(stderr, "Special enivronment variables: ");
if ((val = getenv("DUMMY_VARIABLE")))
fprintf(stderr, "DUMMY_VARIABLE=%s\n", val);
if ((kq = kqueue()) == -1) // create a kernel event queue for notification
DO_RETURN(EXIT_FAILURE, "kqueue() failed\n");
// prepare to check in with launchd
checkin_request = launch_data_new_string(LAUNCH_KEY_CHECKIN);
if (checkin_request == NULL)
DO_RETURN(EXIT_FAILURE, "launch_data_new_string(%s) failed (errno = %d)"
"\n", LAUNCH_KEY_CHECKIN, errno);
checkin_response = launch_msg(checkin_request); // check in with launchd
if (checkin_response == NULL)
DO_RETURN(EXIT_FAILURE, "launch_msg(%s) failed (errno = %d)\n",
LAUNCH_KEY_CHECKIN, errno);
if (launch_data_get_type(checkin_response) == LAUNCH_DATA_ERRNO)
DO_RETURN(EXIT_FAILURE, "failed to check in with launchd (errno = %d)"
"\n", launch_data_get_errno(checkin_response));
// retrieve the contents of the  dictionary
sockets_dict = launch_data_dict_lookup(checkin_response,
LAUNCH_JOBKEY_SOCKETS);
if (sockets_dict == NULL)
DO_RETURN(EXIT_FAILURE, "no sockets\n");
// retrieve the value of the MY_LAUNCH_JOBKEY_LISTENERS key
listening_fd_array = launch_data_dict_lookup(sockets_dict,
MY_LAUNCH_JOBKEY_LISTENERS);
if (listening_fd_array == NULL)
DO_RETURN(EXIT_FAILURE, "no listening socket descriptors\n");
for (i = 0; i 
Label
com.osxbook.dummyd
ProgramArguments
/tmp/dummyd
Dummy Daemon
OnDemand
WorkingDirectory
/tmp
EnvironmentVariables
DUMMY_VARIABLE
dummyvalue
ServiceIPC
StandardErrorPath
/tmp/dummyd.log
Sockets
Listeners
Socktype
stream
SockFamily
IPv4
SockProtocol
TCP
SockServiceName
12345
Let us now test dummyd by loading its configuration into launchd using the launchctl command.
$ gcc -Wall -o /tmp/dummyd dummyd.c
$ launchctl load com.osxbook.dummyd.plist
$ launchctl list
com.osxbook.dummyd
$ ls /tmp/dummyd.log
ls: /tmp/dummyd.log: No such file or directory
$ ps -axw | grep dummyd | grep -v grep
$ netstat -na | grep 12345
tcp4 0 0 *.12345 *.* LISTEN
$ telnet 127.0.0.1 12345
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
hello
hello
world
world
^]
telnet> quit
Connection closed.
$ cat /tmp/dummyd.log
Working directory: /private/tmp
Special enivronment variables: DUMMY_VARIABLE=dummyvalue
$ launchctl unload com.osxbook.dummyd.plist
$
5.10.1.3. launchd Operation
Figure 528 shows the high-level operation of launchd, whose own initialization consists of the following primary operations.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 51 of 59
 It creates kernel event queues (kqueues) and registers callbacks with them for various types of events. Examples of callbacks are
kqasync_callback(), kqsignal_callback(), and kqfs_callback(), which are for EVFILT_READ, EVFILT_SIGNAL, and EVFILT_FS
events, respectively.
 It initializes several data structures, especially in the conceive_firstborn() internal function.
 It loads the /etc/launchd.conf configuration file, if it exists. When running in the context of a user, it also looks for the
~/.launchd.conf per-user configuration file. It runs subcommands contained in these files using the launchctl command.
 It eventually goes into a server loop in which it receives and processes events.
 The first time the server loop runs in a given contextfor example, during system startupthe init_pre_kevent() function is called to
perform critical initialization such as single-user system startup, session creation, and the normal multiuser system startup.
Figure 528. A high-level depiction of launchd's operation
[View full size image]
5.10.2. Multiuser Startup
In a multiuser startup, launchd runs the command script contained in /etc/rc, which in turn follows different execution paths depending on
the kind of booting being performed: whether it is a normal boot, whether it is a network boot, or whether the system is booting from a CD-
ROM for installation purposes.
Figures 529. and 530 show the chain of important events that occur during a local or network-based multiuser boot. Note that in the case of a
nonverbose (graphical) boot, /etc/rc eventually runs the /usr/libexec/WaitingForLoginWindow program. This program displays the
"Starting Mac OS X . . ." panel with a progress bar. The latter is a dummy progress bar whose rate of progress is based on the contents of the
file /var/db/loginwindow.boottime. The file is updated by WaitingForLoginWindow upon every boot, so that upon the next boot
WaitingForLoginWindow can use the saved time duration. This way, the program attempts to match the displayed rate of progress with the
actual time taken to boot. WaitingForLoginWindow exits when it receives a notification that the loginwindow program
(/System/Library/CoreServices/loginwindow.app) is ready to display the login panel. loginwindow is run by launchd too as part of its
session launching, which is shown in Figure 531.
Figure 529. The sequence of operations performed by /etc/rc
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 52 of 59
Figure 530. The sequence of operations performed by /etc/rc (continued from Figure 529)
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 53 of 59
Figure 531. Overview of session launching by launchd
[View full size image]
launchd maintains a global list of sessions. As shown in Figure 532, the init_pre_kevent() function launches these sessions. The session list
is populated by update_ttys(), which calls getttyent(3) to read entries from /etc/ttys. After /etc/rc exits successfully, update_ttys()
is called by runcom_callback(). update_ttys() can also be triggered by sending a hangup (HUP) signal to launchd.
Figure 532. Implementation of session creation and launching by launchd
// launchd/src/init.c
void
init_pre_kevent(void)
{
session_t s;
if (single_user_mode && single_user_pid == 0)
single_user();
if (run_runcom)
runcom();
if (!single_user_mode && !run_runcom && runcom_pid == 0) {
...
// Go through the global list of sessions
TAILQ_FOREACH(s, &sessions, tqe) {
if (s->se_process == 0)
session_launch(s);
}
}
}
...
static void
runcom_callback(...)
{
...
if (/* /etc/rc exited successfully */) {
logwtmp("~", "reboot", "");
update_ttys();
return;
} else ...
...
}
static void
session_launch(session_t s)
{
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 54 of 59
}
...
void
update_ttys(void)
{
session_t sp;
struct ttyent *ttyp;
int session_index = 0;
...
while ((ttyp = getttyent())) {
++session_index;
// Check all existing sessions to see if ttyp->ty_name
// matches any session's device
// If no session matches, create new session by calling
// session_new()
// session_new() adds the session to the global list
// of sessions
...
}
...
}
5.10.2.1. User Login
The login panel displayed by the loginwindow program contains fields for the user to provide login information, which is then used by
loginwindow to authenticate the user. The following points are noteworthy about the graphical login provided by loginwindow.
 You can switch to a text-based login prompt at the console by providing >console as the username, which results
in /usr/libexec/getty being run to handle user login. In this case, upon a successful login, the user's shell will be a child of the login
process (/usr/bin/login).
 Similarly, you can cause the system to sleep, restart, or shut down by providing >sleep, >restart, or >shutdown, respectively, as the
username.
 You can configure the system so that a designated user is automatically logged in after system startup, bypassing the loginwindow
prompt. This is achieved by saving that user's password in the /etc/kcpassword file, which stores the password in an obfuscated format.
The obfuscation scheme uses a position-based mapping of charactersthat is, the ASCII value of a given character in a password is
statically mapped to different values based on the character's position in the password string.
 During software installation, loginwindow can be bypassed after system startup because the installer program is launched automatically.
Figure 533 shows the important steps performed by loginwindow. Note that an authenticated user session encapsulates the user's processes,
which are typically the children of either the loginwindow or the WindowServer processes. The operating context, or scope, of these processes
is different from that of system processes that start before the user logs insuch processes (typically daemons) are started by launchd in the root
context. Consequently, they are available to all user sessions. In contrast, an agent, although similar to a daemon in that it too is a background
program, runs in the context of a user session. Therefore, in general, daemons are systemwide and agents are user-specific. Moreover, since the
WindowServer process runs in a user context, daemons cannot draw graphical user interfaces, whereas agents can.
Figure 533. Important steps performed by the loginwindow application
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 55 of 59
To Each Its Own
When multiple users are logged in simultaneously through the fast user-switching feature, each user gets an individual
graphical loginthat is, there is a per-user loginwindow process, along with the associated processes that loginwindow creates.
For example, each login has its own pasteboard server, Finder, and Dock.
A remote loginsay, through SSHdoes not launch loginwindow. It involves a traditional Unix-style invocation of the login
program (/usr/bin/login), which results in a separate session for that login. However, a remotely logged-in user can
communicate with the window server from outside of the console session, provided the user ID is that of either the superuser or