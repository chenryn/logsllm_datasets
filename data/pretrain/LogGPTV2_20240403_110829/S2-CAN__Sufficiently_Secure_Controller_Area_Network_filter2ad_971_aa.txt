title:S2-CAN: Sufficiently Secure Controller Area Network
author:Mert D. Pes&apos;e and
Jay W. Schauer and
Junhui Li and
Kang G. Shin
S2-CAN: Sufficiently Secure Controller Area Network
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
The University of Michigan
Ann Arbor, MI 48109-2121, USA
{mpese,jschauer,opheelia,kgshin}@umich.edu
ABSTRACT
As automotive security concerns are rising, the Controller Area Net-
work (CAN) — the de facto standard of in-vehicle communication
protocol — has come under scrutiny due to its lack of encryption
and authentication. Several vulnerabilities, such as eavesdropping,
spoofing, and replay attacks, have shown that the current imple-
mentation needs to be extended. Both academic and commercial
solutions for a Secure CAN (S-CAN) have been proposed, but OEMs
have not yet integrated them into their products. The main reasons
for this lack of adoption are their heavy use of limited computa-
tional resources in the vehicle, increased latency that can lead to
missed deadlines for safety-critical messages, as well as insufficient
space available in a CAN frame to include a Message Authentication
Code (MAC).
By making a trade-off between security and performance, we
develop S2-CAN, which overcomes the aforementioned problems
of S-CAN. We leverage protocol-specific properties of CAN instead
of using cryptographic primitives and design a “sufficiently secure”
alternative CAN with minimal overhead on resources and latency.
We evaluate the security of S2-CAN in four real-world vehicles by an
automated vehicular attack tool. We finally show that CAN security
can be guaranteed by the correct choice of a design parameter while
achieving acceptable performance.
ACM Reference Format:
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin. 2021. S2-CAN:
Sufficiently Secure Controller Area Network. In Annual Computer Security
Applications Conference (ACSAC ’21), December 6–10, 2021, Virtual Event,
USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3485832.
3485883
1 INTRODUCTION
Since the advent of the first comprehensive automotive security
analysis in 2010 [11, 27], this field has attracted significant attention.
While the first generation of vehicle security (c. 2010-2015) focused
on exploiting physical interfaces, such as the OBD-II port [31], or
reverse-engineering Electronic Control Unit (ECU) firmware [29],
the second generation (c. 2015-now) has been focusing on scaling
attacks to multiple vehicles by analyzing remote attack surfaces [30].
The most prominent and comprehensive attack of this generation
that led automotive cyber security to become a mainstream research
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485883
and engineering subject was the Jeep Hack [32] that allowed the
attacker to remotely compromise and steer the affected vehicles.
With further scaling in each generation, the risk of automotive
vulnerabilities towards driver/passenger safety and privacy, as well
as financial and operational damage potential increases [24]. All
attacks in each generation have (CAN) injection/spoofing as the
necessary (final) component of causing havoc in common. This
enables the compromise of the vehicle which can, in the worst case,
have a serious impact on driver safety, for instance, by electronically
disabling the brakes or accelerating the vehicle.
Unfortunately, CAN injection is the easiest part of the afore-
mentioned attacks. This can be explained by vulnerabilities in the
CAN design which dates back to 1987. Despite allowing a fast,
robust, and reliable communication, CAN was not designed with
security in mind, and vehicles can no longer be regarded as closed
systems due to an increased number of external interfaces with un-
predictable input. CAN is a broadcast bus without encryption and
authentication. Messages are sent in plain text and everyone who
has access to the CAN bus can inject arbitrary messages or spoof
existing ones. Encryption and authentication in a vehicle should
usually go hand in hand. In order for spoofed messages to cause
a visible impact on the compromised vehicle, the attacker needs
to (a) know the syntax and semantics of the crafted CAN payload,
and (b) be allowed to inject the targeted CAN message. In case of
(a), this is only possible by reverse-engineering unencrypted CAN
data traces since OEMs keep the aforementioned semantics secret
instead of disclosing them publicly (security by obscurity). Recently,
automated CAN reverse-engineering is shown to be achievable in
a few minutes [36], enforcing existing attack vectors and necessi-
tating an encrypted CAN. Finally, for case (b), authentication will
prevent unauthorized entities to perform the CAN injection.
To defend against vehicular attacks, we need a holistic, multi-
layer security approach. The authors of [45] propose 4 layers of
countermeasures which build on one another: access control, se-
cure on-board communication, data-usage policies and anomaly
detection/prevention (see Sec. 3). Here we assume OEMs follow
basic security practices such as access control and focus on the chal-
lenges of secure on-board communication. As we discuss in Sec. 4,
many researchers have attempted to apply the security properties
of confidentiality, authenticity, integrity, freshness, and availability
on the CAN bus. Almost all of them provide authentication and
replay protection — but no encryption — by deploying well-studied
cryptographic algorithms. A comparison of existing approaches is
provided in Table 1.
Although mechanisms such as encryption and authentication are
widely used and accepted in traditional computer communication
networks, their adoption in the automotive domain comes with
three major problems related to performance that currently limit
their deployment in commercial vehicles:
425ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
CaCAN [28]
IA-CAN [21]
vatiCAN [33]
TESLA [34]
LeiA [37]
S2-CAN
CANAuth [41] Authenticity +
Protection
Authenticity +
Freshness
Authenticity
Authenticity +
Freshness
Authenticity +
Freshness
Authenticity +
Freshness
Freshness
Confidentiality +
Authenticity +
Freshness
Table 1: Comparison with related approaches
Algorithm
SHA256-HMAC
HW/SW Bus Load
HW+SW +100%
Latency
+2.2-3.2µs
MAC Length
1 Byte
Security Level
27
Randomized CAN
ID + CMAC
SHA3-HMAC
PRF+HMAC
MAC
HMAC
Circular Shift +
Internal ID Match
SW
SW
SW
SW
+0%
+16.2%
+0%
+100%
HW+SW +0%
SW
+0%
8bit: +72ms
32bit: +150µs
+3.3ms
+500ms
N/A
N/A
+75µs
1-4 Bytes
27-231
8 Bytes
10 Bytes
8 Bytes
10 Bytes
N/A
263
279
263
279
∼ 249
(1) Cost: For cost reasons, ECUs in an in-vehicle network (IVN)
are resource-constrained. Since most safety-critical functionalities
require simple computations and do not need high-performance
hardware, these legacy ECUs are very simple and highly optimized
for repetitive control operations. For instance, current Engine Con-
trol Modules can have 80MHz clock frequency, 1.5MB Flash memory
and 72kB of RAM (Bosch [4]). Using cryptographic algorithms for
encryption and/or authentication would require more performant
hardware which drive up the cost for OEMs. Besides unit costs,
adding security protocols to certain legacy ECUs (especially in the
powertrain domain) that have been in use in cars for multiple years
or even decades due to lack of necessary software improvements
would increase the development cost [40].
(2) Latency: In order to guarantee functional safety in a vehicle,
there are stringent hard real-time requirements for certain safety-
critical control data. The maximum permitted end-to-end (E2E)
latency for cyclic control data transmitted on the CAN bus can
range from a few milliseconds to a second [16]. Since secure en-
cryption and authentication algorithms add a non-negligible delay
(see Sec. 7), as well as block CAN messages to be sent until fully en-
crypted (due to block size), message deadlines can be missed which
can endanger driver safety (imagine the car braking too late!).
(3) Bus Load: CAN messages contain only 8 bytes of payload.
Message Authentication Codes (MACs) to protect data integrity
have to be appended to the data, but due to lack of space, several
existing solutions [28, 33, 37, 42] send the MAC in a separate CAN
message. This increases the bus load which is an indicator for the
utilization of the network. A high bus load can lead to certain CAN
messages missing their (hard) deadlines, harming safety. To avoid
this, the average bus load must be kept under 80% at all times [3].
For the above reasons, encryption and authentication on the CAN
bus have not yet been adopted in commercial vehicles. Traditional
cryptography-based solutions — we will summarize these under
the generic term Secure CAN (S-CAN) — offer a medium to high
level of security (see the number of combinations to brute-force
MAC, labeled as Security Level, in Table 1) at the expense of per-
formance (i.e., CPU, latency, bus load). As the authors of [33] have
shown, brute-forcing a MAC would take too long for in-vehicle
ECUs, especially if keys are dynamically refreshed. As a result,
we would like to break away from traditional cryptography-based
solutions to address the aforementioned three problems while pro-
viding reasonable, albeit relaxed security guarantees. We propose
S2-CAN (Sufficiently Secure CAN) to enable a tradeoff between
performance and security to offer a feasible and secure real-world
solution for the automotive industry.
S2-CAN tries to protect the confidentiality, authenticity and fresh-
ness of CAN data during operation of the vehicle without using
cryptography. In particular, S2-CAN consists of two phases in its
core: a handshake and operation phase. In the former, it establishes
unique sessions of specific length and distributes necessary ses-
sion parameters to all participating ECUs. This phase resembles
the key management phase in traditional S-CAN approaches where
session keys are shared among the ECUs to both encrypt and au-
thenticate CAN messages in their respective operation phase. Since
S2-CAN avoids using cryptography in its operation phase, it uses
the session parameters from the handshake to (a) first include a
randomly generated internal ID and counter for authenticity and
freshness into the CAN payload before (b) each byte of the pay-
load is shifted cyclically by a random integer (encoding parameter)
in fixed time intervals. These two steps can be compared to (a)
appending a MAC to provide authenticity and (b) encrypting the
plain-text CAN message to provide confidentiality in S-CAN. Com-
pared to breaking traditional CAN authentication solutions that
only require brute-forcing the MAC, the cyclic shift encoding fur-
ther masks the plain-text by making it more difficult to decode
and thus provides confidentiality protection as well. Due to the
encoding, CAN reverse-engineering — which is the first essential
step of a CAN injection attack — has to be performed in real time
for the current encoding parameter and cannot be computed a pri-
ori to be used for the lifetime of the vehicle. Despite intentional
weaker security of S2-CAN, a frequent update of sessions with new
encoding parameters will render reverse-engineering very tedious,
if not impossible. Hence, session cycle is the crucial parameter to
provide security in S2-CAN. Furthermore, even after guessing the
encoding correctly, an attacker would still need to calculate the
426S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
internal ID and counter to bypass authentication. All in all, brute-
forcing S2-CAN would require ∼ 249 combinations for an ECU (see
Sec. 8 and 9) while it does not increase the bus load in the operation
phase, outperforms the E2E latency of the best comparable S-CAN
approach by 44x, as well as incurs less than 0.1% CPU overhead
as evaluated with our experimental setup (see Sec. 7). Finally, we
conduct a security evaluation in Sec. 8 to demonstrate that even an
intelligent attacker who leverages protocol-specific knowledge to
circumvent brute-forcing can be thwarted to show that S2-CAN can
be sufficiently secure.
2 CAN PRIMER
Vehicular sensor data is collected from in-vehicle ECUs. The latter
are typically interconnected via an in-vehicle network (IVN), with
the CAN bus being the most widely-deployed bus topology. Fig. 1
depicts the structure of the most common CAN 2.0A data frame.
Figure 1: CAN2.0A data frame structure (adapted from [36])
The colored three fields are essential for the understanding of CAN:
• CAN ID: CAN is a multi-master, message-based broadcast
bus that is message-oriented. CAN frames do not contain
any information regarding their source or destination ECUs,
but instead each frame carries a unique message ID that rep-
resents its meaning and priority. Lower CAN IDs represent
higher priority or criticality.
• DLC and Data: Data is the payload field of a CAN message
containing the actual message data of length of 0–8 bytes
depending on the value of the DLC field.
The payload field consists of one or more “signals,” each repre-
senting information like vehicle speed. Messages transmitted with
the same CAN ID usually contain related signals. Raw CAN data is
not encoded in a human-readable format and does not reflect the
actual sensor values. In order to obtain the actual sensor values,
raw CAN data must first be decoded [13]. Letting rs, ms, ts, and
ds be the raw value, scale, offset, and decoded value of sensor s,
respectively, the actual value can be determined as follows:
ds = ms · rs + ts .
(1)
All recorded CAN data can only be interpreted using the trans-
lation tables for that particular vehicle. The most common format
used for this purpose is DBC [18] which contains information about
available signals in each CAN ID, their scale and offset, as well the
senders and receivers of CAN messages. In order to execute a suc-
cessful spoofing attack (i.e., with a visible outcome towards vehicle
operation), the CAN payload has to be carefully crafted by the at-
tacker. As a result, an adversary needs to determine the scale and
offset for the CAN signal they want to spoof. Furthermore, some
DBCs store if a CAN message is periodic (including its cycle time) or
sporadic. Note that in the remainder of this paper, we will only mod-
ify the CAN payload/data field and NOT the CAN ID to preserve
backward-compatibility and not interfere with schedulability.
There are multiple CAN buses (e.g., powertrain, infotainment)
in the vehicle that are separated via a gateway ECU. It is possible
to physically tap into any CAN bus domain (after removing plastic
compartments) by using an Arduino with a CAN bus shield [47].
Another — more realistic — way of accessing the CAN bus is the
on-board diagnostics (OBD-II) interface under the steering wheel
which is mandatory for all gasoline cars in the US since 1996. OBD-
II tools are manifold and cheap [6, 19]. Theoretically, it is possible to
read and write the CAN traffic on all in-vehicle buses through the
OBD-II interface. In practice, however, not all buses are mirrored
out to it. This can be explained by access control [35] that OEMs
implement. Nevertheless, previous literature [29] has shown that
CAN injection through the OBD-II port is possible in numerous
cars.
3 THREAT MODEL
As briefly mentioned in Sec. 1, the common and final part of every
automotive attack — which is the main threat to protect against —
is to gain access to the CAN bus for a CAN injection attack which
can lead to various forms of vehicle misbehavior, including (safety-
critical) sudden acceleration. In general, there are two ways an
attacker can achieve CAN bus access: (a) by connecting a physical
CAN device/ECU to the IVN, e.g., an OBD-II dongle or by tapping
into the CAN bus, or (b) compromising an existing ECU remotely.
The former is relatively easy to accomplish as long as the attacker
has physical access to the target vehicle, while the latter is more
complicated and multi-layered (and thus less likely) as the attacker
has to usually leverage vulnerabilities in wireless interfaces of an
ECU to gain access to the device. We refer to the attacker in case of
(a) as an external attacker, whereas an internal attacker is capable
of (b). Furthermore, the aforementioned separation of domains
by a central gateway complicates a compromised ECU — which is
usually on a less safety-critical bus (e.g., infotainment) — to affect
more safety-critical domains such as powertrain which has no
remote attack surfaces. Finally, even if a proper S-CAN approach is
implemented, an internal compromise of an ECU (as in case (b))
will lead to exposure of secret keys which the attacker can use to
forge the desired message’s Message Authentication Code (MAC)
and/or encrypt the CAN payload.
Although remote attacks on vehicles have skyrocketed over the
last decade [8], a breakdown of attack vectors shows that most of