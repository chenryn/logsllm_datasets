In [11]:r =Runner("df -h","du -h /tmp",verbose=True)
4.0K/tmp
map auto_home
In [10]: r.run()
In [8]: from subtube import Runner
raiseNotImplementedError
else:
else:
self.args = args
fdesc
devfs
/dev/disk0s2
if self.verbose:
time.sleep(self.delay)
self.verbose = False
 self.verbose = self.kwargs["verbose"]
self.delay = self.kwargs["delay"]
call(cmd,shell=True)
第10章
 print "Running %s with delay=%s" % (cmd, self.delay)
cmd.run()
cmd = Runner("ls -1", "df -h", verbose=True, delay=3)
Usage:
verbose=True for verbose output
[optional keyword parameters]
 Runner takes N positional arguments, and optionally:
1.0Ki
108Ki
Size
OBi
OBi
**kwargs):
1.0Ki
108Ki
80Gi
Used
OBi
OBi
(duz/ y- np
Avail CapacityM
13Gi
www.TopSage.com
OBi
OBi
OBi
OBi
100%
100%
100%
100%
87%
/net
/dev
/dev
Mounted on
款
---
## Page 311
载idiom：
据，我们使用新的Python2.6语法来这样做。记住，如果你使用的是Python2.5，你必须加
这次让我们模拟Bash并重定向一个文件到标准输入。首先，我们需要向文件中写入数
具有相同功能的Bash代码如下所示：
In [35]: P = subprocess.Popen("wc -c", shell=True, stdin=subprocess.PIPE)
到进程中。
因为subprocess为shelling out提供统一的API，我们可以十分容易地向标准输出设备写
步详细的介绍，我们介绍了一个自制分发系统，该系统工作在*nix平台上。
代码是精心设计的，但是也是非常简单的，感谢Func。
Func网站的描述“这有意义的且设计良好的示例—重启所有运行httpd的系统。虽然
Emerging技术组有一个项目，希望通过Python使大量集群主机的批量脚本简化。根据
例10-11：使用Subprocess与标准输入进行通信
这是远端命令执行的一个粗浅的示例，但是其思想意义却非常有价值，因为Red Hat
如果我们将ssh密钥安装到所有的系统上，我们可以很轻松地这样来编写代码：
入。在例10-11中，我们让计算单词的工具侦听标准输入，然后根据单词数目写一串字符
>echo charactersinword|wc-C
fc.client(host).reboot.reboot()
results = fc.Client("*").service.status("httpd")
for machine in machines:
[.areq. ‘,estt.',sarew, ‘,xawou.] = sauryoew
4.0K
mapauto_home
map -hosts
fdesc
devfs
/dev/disk0s2
Running df -hwith delay=0
In[12]:r.run()
r.run()
r = Runner("ssh
/tmp
1.0Ki
108Ki
93Gi
Size
OBi
OBi
+ machine + "df -h", "ssh " + machine + "du -h /tmp")
108Ki
1.0Ki
80Gi
Used
OB1
OBi
Avail Capacity
13Gi
OBi
OBi
OBi
www.TopSage.com
100%
100%
100%
100%
87%
Mounted on
/home
/net
/dev
/dev
”我们对第8章的Func将做进一
进程与并发丨297
PDG
---
## Page 312
这一工作，因此多了解相关信息，知道有些时候甚至没必要使用Subprocess也是很重要
中，我们通过连接一系列命令来获得根用户的shell。Python的内建模块可以为我们完成
In Bash here is a simple chain:
例10-12：使用Subprocess连接命令
命令在Python中被连接起来。我们遇到的一个实际应用是在处理logfiles文件的时候。在
所做的那样。先看一下在Bash中一系列命令是如何被连接起来，然后是相同的这一系列
接下来，让我们实际看一下如何将多个命令连接到一起，就像我们在典型的shel1环境中
在Bash中，这会等同于下面的命令序列：
那么，我们将重定向文件的输出到等待进程：
赋值给f：
我们可以用非常典型的方式再次打开文件，读入文件中的数据，并将其作为一个字符串
298|
我们可以使用子进程管道来做一些事情，但这并不表示我们必须这样做。在前一个示例
In [10]: print p3.stdout.read()
In [9]: p3 = subprocess.Popen("cut -d ': ' -f 7", shell=True, stdin=p2.stdout,
PIPE)
Here is the same chain in Python:
例10-12中，我们试图成功登录到Macintosh笔记本的屏保。
bin/sh
bin/sh
stdout=subprocess.PIPE)
% echo charactersinword > temp.txt
In [10]: p.communicate(f)
In [9]: p = subprocess.Popen("wc -c", shell=True, stdin=subprocess.PIPE)
In [8]: f = file.read()
In [7]: file = open('temp.txt')
In [6]: with open('temp.txt', 'w') as file:
16
*...
9
[11]:p.communicate(f)
第10章
file.write('charactersinword')
www.TopSage.com
8
PDG
---
## Page 313
importsubprocess
当我们在IPython中退出Vim时，它自动运行这一代码块，而我们可以获得如下结果：
p = subprocess.Popen("tr a-z A-Z", shell=True,stdin=subprocess.PIPE,
例10-14：发送输入、
我们看一个这方面的示例。值得注意的是，在IPython内部，当我们想要写一段类似例
Subprocess也可以同时处理发送输入和接收输出，并且也可以侦听标准错误输出。让
In [4]: shell,
In [3]: shell = pwd.getpwnam('root')[-1]
In [1]:import pwd
例10-13：使用pwd（密码数据库模块）代替Subprocess
查看一下，看看Python是否有一个内建的能够完成同样功能模块会是一个好主意。参见
例如tar或zip，Python也可以做。如果你在使用Subprocess做一个非常复杂的shell连接，
的，Python的内建的模块或许可以为你完成一些工作。许多你希望在shel中做的事情，
Supervisor能够作为跨平台控制者来管理和与进程进行交互。它可以启动、停止，重启
Supervisor可以做一些比web应用部署更多的事情，有更多的通用应用可以完成。
Supervisor通过决定如何对长时间运行的进程进行控制，以及确保在系统重启时进程可
多Python web框架不能提供一个完美的方案。在这方面，Supervisor可以发挥作用。
理是一个Python专家时，他们会非常激动的，因为对临时管理长时间运行的进程，许
作为一名系统管理员，会经常需要管理和处理进程。当web开发者发现他们的系统管
使用Supervisor来管理进程
print output
10-14这样的代码块时，我们使用“edupper.py”来自动切换到Vim。
Out[4]:'/bin/sh'
例10-13。
开发者之一，Chris McDonough，告诉我们，它也可以帮助管理“坏”进程，例如消耗
其他*nix系统中的程序，也可以重启崩溃的进程，而且处理起来非常方便。Supervisor的
以重新启动来实现管理。
TRANSLATETOUPPER
done. Executing edited code...
：********！
、接收输出并侦听标准错误
， 0, 0, 'System Administrator','/var/root','/bin/sh')
www.TopSage.com
进程与并发丨299
---
## Page 314
 #!/usr/bin/env python
配置文件中添加我们的程序。我们继续在/etc/supervisord.conf中添加几行代码：
例10-15：Supervisor重启僵死进程的简单示例
supervisor的自动重启功能来保持这个进程一直处于活动状态。参见例10-15。
我们已经准备好创建一个非常简单的进程示例，该进程会在运行几秒后销毁。
简单地通过使用专门的supervisor命令echo_supervisord_conf，显示输出supervisord.
了Supervisor的强大功能，其具有自动重启和将程序驻留内存的能力。现在，我们可以
为了让一个非常基本的Supervisor守护进程开始运行，接下来创建一个简单的脚本，该
那么它会安装在类似/usr/local/bin或是系统脚本目录中。
这将把Supervisor安装到bin目录中。如果你之前使用esay_install安装你的系统Python,
正如之前介绍的，为了实际上在supervisord中运行一个子程序，需要编辑配置文件，在
print "Daemons dies"
import time
以在运行时，通过选项来指定配置文件的位置。
有一点需要注意，Supervisor配置文件可以保存到任何位置，因为supervisord守护进程可
conf文件的内容。在这个示例中，我们将显示输出的内容保存到/etc/supervisord.conf中。
脚本实现打印输出、休眠10秒，然后销毁。这与常驻进程正好相反，但是这方面正显示
以使用下面的命令来安装Supervisor:
easy_install进行安装。假设你已经使用virtualenv创建了一个虚拟Python安装目录，可
supervisord.org/manual/current/。安装Supervisor非常简单，因为实际上你可以使用
在写本书时，Supervisor的最新版本是3.0.x。最新版本的手册可以在这里找到：http://
*nix，因此我们继续讨论。
程序，可以查看日志并通过统一的会话来控制进程。还有一个web 接口，但本书是关于
是一个守护进程，用于将指定的程序作为子进程来运行；“supervisorctl”是一个客户端
实现远端控制。
Extensions Event Notification System（扩展事件通告系统的XML-RPC XML-RPC接口）
太多内存的进程或占用过多CPU的进程。Supervisor通过XML-RPC XML-RPC Interface
300
time.sleep(3)
-bin/easy_install supervisor
echo_supervisord_conf >/etc/supervisord.conf
"Daemon runs for 3 seconds, then dies"
第10章
www.TopSage.com
“supervisord"
我们使用
PDG
---
## Page 315
最后要介绍的是，
地被重新唤醒。它会被运行，然后被杀死，然后再被运行。
接下来，启动在配置文件中称为daemon的进程，然后跟踪它来查看它被销毁然后又神奇
在这一点上，可以运行help命令来查看对于supervisorctl可以使用哪些选项：
现在，可以开始监管并且使用supervisorectl来查看和启动进程：
离。重新连接到该进程，需在screen中键入，然后再次按Ctrl-A。
运行进程所需要的只是附加screen到常驻进程的前端，按Ctrl-A，然后按Ctrl-D进行分
从独立运行的trac进程分离。
的web应用（例如trac）分离。有一些方法可以配置trac，但是最简单的方法通过screen
能，可以作为主要的Unix技术来学习。让我们看一个典型的应用，其中我们希望从常驻
常有用的核心特征之一是它允许你分离常驻进程，并且可以再返回。这是非常有用的功
不使用screen，也是值得去了解它的，哪怕你不会使用它来管理Python程序。screen的非
一个管理常驻进程的可选方法是使用GNU的screen应用程序。作为系统管理员，即使你
使用Screen来管理进程
==Press Ctrl-C to exit ==
supervisor> tail -f daemon
daemon: started
supervisor> start daemon
daemon: stopped
supervisor> stop daemon
clear help
EOF
Documented commands (type help topic):
supervisor> help
supervisor>
daemon
[root@localhost]^# supervisorct]
[root@localhost]~# supervisord
autorestart=true
command=/root/daemon.py
[program:daemon]
for 3 seconds, then die
will run for 3 seconds, then die
just died
exit
open
，可以交互地跟踪该程序的输出：
reload
；retstart at unexpected quit (default: true)
shutdown
restart
www.TopSage.com
RUNNING
; the program (relative uses PATH, can take args)
11
status
start
pid 32243,uptime 0:00:02
tail
stop
version
进程与并发丨301
---
## Page 316
迷惑。尽管你也可以通过本书的介绍来了解这方面的知识，并且实现这里介绍的一些技
在处理线程时会有一些策略，通常实现一个功能齐备的追踪库是策略之一。这也就是
至由于追踪的结果令人困惑或无法理解，调试会变得更为复杂。一位作者在编写用于发
线程时可以变得极为复杂。线程在没有添加扩展追踪功能的情况下是非常难调试的，甚
在处理线程时，有一些潜在的复杂问题。通常，一个只有几行代码的简单程序，当引人
程可以访问，而无须创建IPC，或是进程间的通信机制。
状态及内存。这是线程最大的优势也是劣势。优势是你可以创建一个数据结构，所有线
线程可以并行处理多个事务。线程不同于进程，因为他们都运行在同一个进程内，共享
线程可能被描绘成“对一些人来说是无法躲避的恶运”，许多人不喜欢使用线程，尽管
Python中的线程