## 又一款PostgreSQL 向量索引插件 pgvecto.rs , 支持ivfflat, hnsw. 助力非结构化数据的特征向量相似搜索      
### 作者                                                
digoal                                                
### 日期                                                
2023-08-07                                          
### 标签                                                
PostgreSQL , PolarDB , ivfflat , hnsw , ai , 向量索引                    
----                                                
## 背景    
最近PostgreSQL的向量索引插件确实非常多, 支持ivfflat和hnsw索引存储和检索算法.  
在2019年, 阿里云RDS PG率先支持了向量索引, 支持ivfflat和hnsw索引存储和检索算法. 不过当时没有chatgpt带火这个索引, 当时主要是应某个行业的ISV处理图像识别的需求而发布的.   
[《PostgreSQL 阿里云rds pg发布高维向量索引，支持图像识别、人脸识别 - pase 插件, 以及ivfflat,hnsw搜索算法说明》](../201912/20191219_02.md)    
今天要介绍的是pgvecto向量索引插件:  
https://github.com/tensorchord/pgvecto.rs  
rust写的pg插件, 依赖pgrx.  
https://github.com/pgcentralfoundation/pgrx  
同样也是支持hnsw, ivfflat.  
具体参考其readme:  
pgvecto.rs  
pgvecto.rs is a Postgres extension that provides vector similarity search functions. It is written in Rust and based on [pgrx](https://github.com/tcdi/pgrx). It is currently ⚠️**under heavy development**⚠️, please take care when using it in production. Read more at [📝our launch blog](https://modelz.ai/blog/pgvecto-rs).  
## Why use pgvecto.rs  
- 💃 **Easy to use**: pgvecto.rs is a Postgres extension, which means that you can use it directly within your existing database. This makes it easy to integrate into your existing workflows and applications.  
- 🦀 **Rewrite in Rust**: Rewriting in Rust offers benefits such as improved memory safety, better performance, and reduced **maintenance costs** over time.  
- 🙋 **Community**: People loves Rust We are happy to help you with any questions you may have. You could join our [Discord](https://discord.gg/KqswhpVgdU) to get in touch with us.  
## Installation  
  Build from source  
### Install Rust and base dependency  
```sh  
sudo apt install -y build-essential libpq-dev libssl-dev pkg-config gcc libreadline-dev flex bison libxml2-dev libxslt-dev libxml2-utils xsltproc zlib1g-dev ccache clang git  
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  
```  
### Clone the Repository  
```sh  
git clone https://github.com/tensorchord/pgvecto.rs.git  
cd pgvecto.rs  
```  
### Install Postgresql and pgrx  
```sh  
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'  
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -  
sudo apt-get update  
sudo apt-get -y install libpq-dev postgresql-15 postgresql-server-dev-15  
cargo install cargo-pgrx --git https://github.com/tensorchord/pgrx.git --rev $(cat Cargo.toml | grep "pgrx =" | awk -F'rev = "' '{print $2}' | cut -d'"' -f1)  
cargo pgrx init --pg15=/usr/lib/postgresql/15/bin/pg_config  
```  
### Install pgvecto.rs  
```sh  
cargo pgrx install --release  
```  
You need restart your PostgreSQL server for the changes to take effect, like `systemctl restart postgresql.service`.  
  Install from release  
Download the deb package in the release page, and type `sudo apt install vectors-pg15-*.deb` to install the deb package.  
Configure your PostgreSQL by modifying the `shared_preload_libraries` to include `vectors.so`.  
```sh  
psql -U postgres -c 'ALTER SYSTEM SET shared_preload_libraries = "vectors.so"'  
```  
You need restart the PostgreSQL cluster.  
```  
sudo systemctl restart postgresql.service  
```  
Connect to the database and enable the extension.  
```sql  
DROP EXTENSION IF EXISTS vectors;  
CREATE EXTENSION vectors;  
```  
## Get started  
pgvecto.rs allows columns of a table to be defined as vectors.  
The data type `vector(n)` denotes an n-dimensional vector. The `n` within the brackets signifies the dimensions of the vector. For instance, `vector(1000)` would represent a vector with 1000 dimensions, so you could create a table like this.  
```sql  
-- create table with a vector column  
CREATE TABLE items (  
  id bigserial PRIMARY KEY,  
  embedding vector(3) NOT NULL  
);  
```  
You can then populate the table with vector data as follows.  
```sql  
-- insert values  
INSERT INTO items (embedding)  
VALUES ('[1,2,3]'), ('[4,5,6]');  
```  
We support three operators to calculate the distance between two vectors.  
- ``: squared Euclidean distance, defined as $\Sigma (x_i - y_i) ^ 2$.  
- ``: negative dot product distance, defined as $- \Sigma x_iy_i$.  
- ``: negative squared cosine distance, defined as $- \frac{(\Sigma x_iy_i)^2}{\Sigma x_i^2 \Sigma y_i^2}$.  
```sql  
-- call the distance function through operators  
-- squared Euclidean distance  
SELECT '[1, 2, 3]'  '[3, 2, 1]';  
-- negative dot product distance  
SELECT '[1, 2, 3]'  '[3, 2, 1]';  
-- negative square cosine distance  
SELECT '[1, 2, 3]'  '[3, 2, 1]';  
```  
You can search for a vector simply like this.  
```sql  
-- query the similar embeddings  
SELECT * FROM items ORDER BY embedding  '[3,2,1]' LIMIT 5;  
-- query the neighbors within a certain distance  
SELECT * FROM items WHERE embedding  '[3,2,1]' < 5;  
```  
### Indexing  
You can create an index, using squared Euclidean distance with the following SQL.  
```sql  
-- Using HNSW algorithm.  
CREATE INDEX ON items USING vectors (embedding l2_ops)  
WITH (options = $$  
capacity = 2097152  
size_ram = 4294967296  
storage_vectors = "ram"  
[algorithm.hnsw]  
storage = "ram"  