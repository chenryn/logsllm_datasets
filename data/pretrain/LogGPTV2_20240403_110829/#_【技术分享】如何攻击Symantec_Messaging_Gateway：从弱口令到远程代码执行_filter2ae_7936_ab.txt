找到源代码的具体位置对我来说不是件难事。通过若干命令，就能找出Web服务所在的进程ID，以及启动该服务所执行的具体指令，如下所示。
    [root@hacker ~]# netstat -tnlp |grep 443
    tcp        0      0 :::41443                    :::*                        LISTEN      2632/jsvc.exec      
    tcp        0      0 :::8443                     :::*                        LISTEN      2632/jsvc.exec      
    tcp        0      0 :::443                      :::*                        LISTEN      2632/jsvc.exec      
    [root@hacker ~]# 
    [root@hacker ~]# ps aux|grep 2632
    bcc        2632  2.1 13.8 3482224 541216 ?      Sl   12:35   0:44 jsvc.exec -user bcc -home /usr/java/latest -wait 1200 -pidfile /var/run/jsvc.pid -outfile /data/logs/bcc/catalina.out -errfile &1 -Xmx800M -XX:MaxPermSize=128m -Djvm=bcc -Djava.awt.headless=true -Djava.util.logging.config.file=/data/bcc/conf/logging.properties -Dorg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false -Dorg.apache.el.parser.SKIP_IDENTIFIER_CHECK=true -Dcatalina.base=/data/bcc -Dcatalina.home=/usr/share/apache-tomcat-7.0.62 -Djava.io.tmpdir=/data/bcc/temp -cp /usr/share/java/commons-daemon.jar:/usr/share/apache-tomcat-7.0.62/bin/bootstrap.jar:/usr/share/apache-tomcat-7.0.62/bin/tomcat-juli.jar org.apache.catalina.startup.Bootstrap
    root       8106  0.0  0.0 103312   856 pts/0    S+   13:10   0:00 grep 2632
    [root@hacker ~]#
从上述输出信息中，我发现貌似有个用户名为bcc。果不其然，我在“/data/bcc”这个文件夹中找到了管理接口的全部源代码。
我压缩了整个文件夹，然后通过SCP将源代码压缩包拷贝出来。
**4.2 追踪未知服务**
现在我们已经拿到了源代码，我们还需要知道某个服务的目的。我使用jd-gui工具，深入分析了程序的JAVA源码，这个工具也是我最喜欢的java反编译器。
根据前面情况可知，这个服务只能通过白名单IP地址来访问。这意味着，源代码中肯定使用的是127.0.0.1这个地址，没有使用服务器所在的IP地址。此外，127.0.0.1也是第一个白名单IP地址。
我在源代码中搜索127.0.0.1这个字符串，并在backupNow函数中找到如下代码片段：
    try
        {
          if (this.log.isInfoEnabled()) {
            this.log.info(this.rb.getLocalizedMessage("information.agent.script.databaseBackup.start"));
          }
          String scriptName = NameHelper.getDbBackup();
          AgentResultTO result = ScriptHelper.executeScript("127.0.0.1", 41002, scriptName, 
            ScriptParamFactory.createAgentParam(params), 2, AgentSettingsDAO.TimeoutLength.Infinite);
          if (this.log.isInfoEnabled()) {
            this.log.info(this.rb.getLocalizedMessage("information.agent.script.databaseBackup.end"));
          }
          if (result.isError())
          {
            String message = ScriptHelper.decodeMessage(result);
            ScriptHelper.logError("error.agent.script.databaseBackup", message);
            ScriptHelper.generateError("error.agent.script.databaseBackup", message);
          }
        }
        catch (BrightmailException e)
        {
          ScriptHelper.generateError("error.agent.script.databaseBackup", e.getMessage());
        }
这正是我想要看到的代码。应用程序将脚本名及参数作为数据发送给服务。让我们来找找哪个脚本会被执行。从代码中可知，scriptName参数的值由getDbBackup函数的返回值来决定。
    public static String getDbBackup()
    {
      if (dbBackup == null)
      {
        StringBuilder builder = new StringBuilder(25);
        builder.append("$SCRIPTSDIR$$/$");
        builder.append("db-backup");
        dbBackup = builder.toString();
      }
      return dbBackup;
    }
非常棒，现在我们知道了哪个脚本或者程序会被执行，让我们来找到它。
    [root@hacker bcc]# find /opt/ -type f|grep 'db-backup'
    /opt/Symantec/Brightmail/cli/bin/db-backup
    /opt/Symantec/Brightmail/cli/sbin/db-backup
    /opt/Symantec/Brightmail/cli/man/man1/db-backup.1
    [root@hacker bcc]# 
    [root@hacker bcc]# cat /opt/Symantec/Brightmail/cli/bin/db-backup
    #!/bin/sh
    . /data/scanner/etc/brightmail-env
    /usr/bin/sudo /opt/Symantec/Brightmail/cli/sbin/db-backup "$@"
事情变得越来越有趣。当某个任务由该服务启动后，这个任务会执行一个db-backup bash脚本，这个脚本会使用sudo命令执行另外一个命令。
现在是时候找出执行这个流程的最终要素了。感谢strust.xml文件的帮助，我们借此能找出哪个URL被映射到哪个类和方法上。xml文件的定义如下所示：
这意味着我们可以通过“/brightmail/admin/backup/backupNow.do”来执行这个流程。在应用软件中，与之对应的屏幕截图如下所示。
现在我们知道Symantec能够通过FTP或者SCP将备份文件存储到远程服务器上。由于这一过程通常耗时较长，因此他们决定通过后台任务方式执行这一过程，同时使用41002端口所对应的服务用来管理这类任务。让我们来重复这一过程，看看哪条命令会被执行。
    [root@hacker bcc]# ps aux|grep 12.0.0.15
    mailwall  11296  0.0  0.0 108204  1308 ?        S    13:37   0:00 /bin/sh /opt/Symantec/Brightmail/common/sbin/db-backup -f SCP://root:PI:EMAIL/tmp -t 1 -s manual
    root      11297  0.0  0.0 175096  2672 ?        S    13:37   0:00 /usr/bin/sudo /opt/Symantec/Brightmail/cli/sbin/db-backup -f SCP://root:PI:EMAIL/tmp -t 1 -s manual
    root      11298  5.0  0.5 173584 23132 ?        S    13:37   0:00 /usr/bin/perl -w /opt/Symantec/Brightmail/cli/sbin/db-backup -f SCP://root:PI:EMAIL/tmp -t 1 -s manual
    root      11303  0.0  0.0  57244  2400 pts/2    Ss+  13:37   0:00 /usr/bin/scp -P 22 -q /data/tmp/db-backup.10.6.2-7.brightmail.Apr-26-17-13-37.tar PI:EMAIL:/tmp.full.manual.tar.bz2
    root      11304  0.0  0.0  59700  2952 pts/2    S+   13:37   0:00 /usr/bin/ssh -x -oForwardAgent no -oPermitLocalCommand no -oClearAllForwardings yes -p22 -q -lroot 12.0.0.15 scp -t /tmp.full.manual.tar.bz2
    root      11307  0.0  0.0 103308   872 pts/0    S+   13:37   0:00 grep 12.0.0.15
    [root@hacker bcc]#
非常棒！这个位置很有可能存在命令注入漏洞。你可以看到，我们通过Web界面设置的参数最终会被bmagent服务所使用，以便通过SSH方式传输文件。
让我们来看看哪个地方会对输入进行验证。我敢打赌，在输入被投递到bmagent服务之前，这个Web应用肯定会在某处对输入进行验证。
**4.3 找出存在漏洞的参数**
负责输入验证的代码如下：
    if (storeRemoteBackup)
        {
          if (EmptyValidator.getInstance().isValid(remoteBackupAddress))
          {
            exceptionMsgKeys.add("error.backup.host.ip.required");
            focusElement = "remoteBackupAddress";
          }
          else if ((!DomainValidator.getInstance().isValid(remoteBackupAddress)) && 
            (!RoutableIpValidator.getInstance().isValid(remoteBackupAddress)))
          {
            exceptionMsgKeys.add("error.backup.host.ip.invalid");
            focusElement = "remoteBackupAddress";
          }
          if (EmptyValidator.getInstance().isValid(port))