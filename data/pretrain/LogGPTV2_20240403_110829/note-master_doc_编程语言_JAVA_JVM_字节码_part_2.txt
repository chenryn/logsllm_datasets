u2             | max_stack              | l                      | 代表了操作数栈（Operand Stack）深度的最大值
u2             | max_locals             | 1                      | 代表了局部变量表所需的存储空间（32位以下（包含）的变量占用一个槽）
u4             | code_length            | 1                      | 执行的字节码长度（《Java虚拟机规范》中明确限制了一个方法不允许超过65535条字节码指令）
u1             | code                   | code_length            | 存放执行的字节码
u2             | exception_table_length | 1
exception_info | exception_table        | exception_table_length
u2             | attributes_count       | 1
u2             | attributes_count       | 1
attribute_info | attributes             | attributes_count
```java
public int inc() {return m + 1;}
```
一个方法编译后：
```java
public int inc();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1 //这里的方法虽然没有参数，但是参数数量为1,1就是this
         0: aload_0
         1: getfield      #2                  // Field m:I
         4: iconst_1
         5: iadd
         6: ireturn
      LineNumberTable:
        line 4: 0
```
异常表：
类型 | 名称         | 数量 | 说明
-- | ---------- | -- | --------------
u2 | start_pc   | 1  | 异常捕获起始行
u2 | end_pc     | 1  | 异常捕获结束行（不包含本行）
u2 | handler_pc | 1  | 发生异常后跳转的位置
u2 | catch_type | 1  | 异常的类型
**2.Exceptions属性**
列举出方法中可能抛出的受查异常（Checked Excepitons）
类型 | 名称                    | 数量
-- | --------------------- | --------------------
u2 | attribute_name_index  | 1
u4 | attribute_length      | 1
u2 | number_of_exceptions  | 1
u2 | exception_index_table | number_of_exceptions
**3.LineNumberTable属性**
类型               | 名称                       | 数量
---------------- | ------------------------ | ------------------------
u2               | attribute_name_index     | 1
u4               | attribute_length         | 1
u2               | line_number_table_length | 1
line_number_info | line_number_table        | line_number_table_length
**4.LocalVariableTable及LocalVariableTypeTable属性**
LocalVariableTable属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系
类型                  | 名称                          | 数量
------------------- | --------------------------- | ---------------------------
u2                  | attribute_name_index        | 1
u4                  | attribute_length            | 1
u2                  | local_variable_table_length | 1
local_variable_info | local_variable_table        | local_variable_table_length
local_variable_info项目代表了一个栈帧与源码中的局部变量的关联:
类型 | 名称               | 数量 | 说明
-- | ---------------- | -- | --------------------
u2 | start_pc         | 1  | 生命周期开始的字节码偏移量
u2 | length           | 1  | 作用范围覆盖的长度
u2 | name_index       | 1  | 局部变量的名称
u2 | descriptor_index | 1  | 局部变量的描述符
u2 | index            | 1  | 局部变量在栈帧的局部变量表中变量槽的位置
LocalVariableTypeTable。这个新增的属性结构与LocalVariableTable非常相似，仅仅是把记录的字段描述符的descriptor_index替换成了字段的特征签名（Signature）
**5.SourceFile及SourceDebugExtension属性**
类型 | 名称                   | 数量 | 说明
-- | -------------------- | -- | -------------------------------------------
u2 | attribute_name_index | 1
u4 | attribute_length     | 1
u2 | sourcefile_index     | 1  | 指向常量池中CONSTANT_Utf8_info型常量的索引，常量值是源码文件的文件名
SourceDebugExtension属性用于存储额外的代码调试信息:
类型 | 名称                                | 数量|说明
-- | --------------------------------- | --
u2 | attribute_name_index              | 1
u4 | attribute_length                  | 1
u1 | debug_extension[attribute_length] | 1|额外的debug信息
**6.ConstantValue属性**
通知虚拟机自动为静态变量赋值。
目前Oracle公司实现的Javac编译器的选择是，如果同时使用final和static来修饰一个变量（按照习惯，这里称“常量”更贴切），并且这个变量的数据类型是基本类型或者java.lang.String的话，就将会生成ConstantValue属性来进行初始化
类型 | 名称                   | 数量 | 说明
-- | -------------------- | -- | -----------------
u2 | attribute_name_index | 1
u4 | attribute_length     | 1
u2 | constantvalue_index  | 1  | 所以这里的常量最多只能为64bit
**7.InnerClasses属性**
用于记录内部类与宿主类之间的关联
类型               | 名称                   | 数量                | 说明
---------------- | -------------------- | ----------------- | -------------
u2               | attribute_name_index | 1
u4               | attribute_length     | 1
u2               | number_of_classes    | 1                 | 表需要记录多少个内部类信息
inner_class_info | inner_classes        | number_of_classes | 记录的内部类信息
类型 | 名称                     | 数量    | 说明
-- | ---------------------- | ----- | -------------------------
u2 | inner_class_info_index | 1     | 内部类的符号引用
u2 | outer_class_info_index | 1     | 宿主类的符号引用
u2 | inner_name_index       | 1     | 代表这个内部类的名称，如果是匿名内部类，这项值为0
u2 | inner_class_access     | flags | 1                         | 内部类的访问标志
**8.Deprecated及Synthetic属性**
Deprecated属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用，它可以通过代码中使用“@deprecated”注解进行设置
Synthetic属性代表此字段或者方法并不是由Java源码直接产生的
属性结构：
类型 | 名称                   | 数量
-- | -------------------- | --
u2 | attribute_name_index | 1
u4 | attribute_length     | 1
**9.StackMapTable属性**
在编译阶段将一系列的验证类型（Verification Type）直接记录在Class文件之中，通过检查这些验证类型代替了类型推导过程，从而大幅提升了字节码验证的性能
类型              | 名称                      | 数量                | 说明
--------------- | ----------------------- | ----------------- | --
u2              | attribute_name_index    | 1
u4              | attribute_length        | 1
u2              | number_of_entries       | 1
stack_map_frame | stack_map_frame_entries | number_of_entries
**10.Signature属性**
一个可选的定长属性，可以出现于类、字段表和方法表结构的属性表中,用来记录泛型信息
类型 | 名称                   | 数量
-- | -------------------- | --
u2 | attribute_name_index | 1
u4 | attribute_length     | 1
u2 | signature_index      | 1
**11.BootstrapMethods属性**
位于类文件的属性表中。这个属性用于保存invokedynamic指令引用的引导方法限定符
类型               | 名称                    | 数量
---------------- | --------------------- | ---------------------
u2               | attribute_name_index  | 1
u4               | attribute_length      | 1
u2               | num_bootstrap_methods | 1
bootstrap_method | bootstrap_methods     | num_bootstrap_methods
**12.MethodParameters属性**
一个用在方法表中的变长属性。MethodParameters的作用是记录方法的各个形参名称和信息
**13.模块化相关属性**
**14.运行时注解相关属性**
### 字节码指令
不考虑异常处理的字节码执行：
```java
do {
自动计算PC寄存器的值加1;
根据PC寄存器指示的位置，从字节码流中取出操作码;
if (字节码存在操作数) 从字节码流中取出操作数;
执行操作码所定义的操作;
} while (字节码流长度 > 0);
```
大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference
[oracle 官方 pdf](https://docs.oracle.com/javase/specs/jvms/se13/jvms13.pdf)
1. 基于寄存器的指令集
2. 基于栈的指令集
   Hotspot中的Local Variable Table = JVM中的寄存器
#### 加载和存储指令
用于将数据在栈帧中的局部变量表和操作数栈之间来回传输
- 将一个局部变量加载到操作栈：`iload、iload_、lload、lload_、fload、fload_、dload、dload_、aload、aload_`
- 将一个数值从操作数栈存储到局部变量表：`istore、istore_、lstore、lstore_、fstore、fstore_、dstore、dstore_、astore、astore_`
- 将一个常量加载到操作数栈：`bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、iconst_、lconst_、fconst_、dconst_`
`iload_`代表了iload_0、iload_1、iload_2和iload_3这几条指令 这些指令都是iload的特殊形式，这些特殊的指令省略掉了操作数，但是语义同iload一样
#### 运算指令