code. For example, in Figure 2, wppl13, l18q ” z ă 2y ^ v ă
60 ^ x ă 40 ^ v “ y ´ x ^ w ą 10, meaning that any
execution reaching Line 14 not satisfying this condition (e.g,
an execution with x “ 500) could be safely pruned.
is difﬁcult
As with all static analyses, statically inferring the necessary
precondition is challenging as it
to be precise
and efﬁcient at the same time. Existing studies often make
two tradeoffs to compromise precision for speed. First, fast
static analyses often do not precisely reason about the path
condition: they either ignore path conditions sheerly by focus-
ing on checking a particular property [18], [19] or perform
limited reasoning on simple path conditions, e.g., discarding
the relationship among variables in branch conditions [23] or
neglecting condition satisﬁability [24] to achieve high speed.
To illustrate, let us consider the code in Figure 2 and its
control ﬂow graph. We perform a backward analysis from Line
18 to infer the precondition wppli, l18q using explicit pattern
matching. When reaching Lines 18, 16, and 15, we obtain the
path conditions, w ą 10, x ă 40 and v ă 60, which determine
the preconditions for variables w, x and v before Line 14 as
w P p10,`8q, x P p´8, 40q, v P p´8, 60q. Such deduction
is easy because of the simplicity of the constraints in those
lines. However, the path conditions can get rather complex,
such as v “ y ´ x at Line 17 and z ă 2y at Line 14, which
normally involves an expensive constraint solver [25]–[27].
Second, there are also many techniques that attempt to
precisely reason about path conditions [21], [28]–[30]. How-
ever, to avoid path explosion (or the explosive number of
disjunctions), they either consider a limited number of paths
and produce unsound results [21] or merge the conditions
computed from different branches at merge points on the
control ﬂow graph, which may notably lose precision [28]–
[30]. On the one hand, since unsound results may let us
incorrectly prune a path that can reach the target, we cannot
use these approaches in our scenario. On the other hand, merg-
ing conditions from different branches may lead to precision
loss [31]. For example, in Figure 2, the precise precondition
on variable w before Lines 10 and 12 is w P p25,`8q and
w P p´8, 5q, respectively. To be efﬁcient, the analysis then
merges the conditions from the two branches, which results in
an imprecise condition w P p´8,`8q before Line 9, where
the false positives in the interval, w P r5, 25s, are introduced.
Thus any execution with w residing in this range cannot be
pruned by the preconditions.
To make the static inference of a necessary precondition
practical for directed fuzzing, our analysis attempts to address
the following two problems in the aforementioned approaches:
1) How to efﬁciently reason about the path conditions in
precondition inference?
2) How to design a sound analysis while avoiding severe
precision loss brought by merging paths?
III. BEACON IN A NUTSHELL
As illustrated in Figure 3, BEACON takes the program
source code and the fuzzing targets as the inputs. To simplify
the static analysis and prune apparent infeasible paths, we
ﬁrstly perform a reachability analysis on the inter-procedural
control ﬂow graph and slice away paths that apparently cannot
reach any target. For example, we place an assert(false)
at Line 21 in Figure 2 to prune paths reaching this Line
because the target at Line 19 is not reachable from Line 21 in
the control ﬂow graph. To prune more infeasible paths (such as
those with unsatisﬁed path conditions), we employ a dedicated
static analyzer, as illustrated below.
Backward Interval Analysis. After slicing the program
with statically computed control ﬂow information, we start our
backward analysis to infer the weakest precondition such as
wppl13, l18q ” z ă 2y^v ă 60^x ă 40^v “ y´x^w ą 10
38
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
interval for y also enables us to further infer the interval of z
at Line 14.
(2) Bounded Disjunction. As discussed in the last section,
the conventional approaches merge static analysis results from
different paths, e.g., w P p´8, 5q and w P p25,`8q
from Line 9 to Line 12 in Figure 2, which results in an
imprecise result, e.g., w P p´8,`8q. However, separately
keeping the results of each path by disjuncting the results,
e.g., w P p´8, 5q _ w P p25,`8q, can lead to an explosive
condition size and make the analysis slow. To control the loss
of precision and, meanwhile, be fast, we maintain a bounded
disjunction for the analysis results and only merge results
when the number of paths exceeds a threshold, τ. As an
example, the conventional approach has τ “ 1 as we always
merge the results.
The key question here is that, when the number of disjunc-
tive conditions exceeds the threshold τ, which ones should be
merged so that the merged precondition is still precise and can
prune more infeasible paths. For instance, given the threshold
τ “ 2 and the disjunction w P p´8, 5q _ w P p25, 40q _ w P
p55,`8q, merging w P p25, 40q _ w P p55,`8q is better
than w P p´8, 5q _ w P p25, 40q because the former adds
fewer false positives, i.e., r40, 55s, than the latter, i.e., r5, 25s.
While the example looks simple, this question becomes very
challenging for a complex disjunctive condition, which we
detail later.
Selective Instrumentation. It is expensive and unnecessary
to instrument all statements in the code under test. In BEA-
CON, we instrument two kinds of statements: variable-deﬁning
statements and branch statements. For a statement that deﬁnes
a variable x, we insert a new statement, assert(c(x)),
after this one where cpxq represents the inferred precondition
in disjunctive form over the variable x. For example, we insert
the statement, assert(w25), at Line 4 in Figure 2
so that every execution reaching this point with the condition
5 ď w ď 25 is aborted immediately after the variable w
is deﬁned. For a branch statement, we insert a statement,
assert(false), after if the branch condition does not
allow an execution to reach the target. For example, we
insert the statement, assert(false), at Line 21 because,
as discussed above, this block cannot reach the target point
through control ﬂow.
IV. METHODOLOGY
BEACON prunes the infeasible paths from two aspects,
control ﬂow reachability and path condition satisﬁability. Our
ﬁrst step is to prune basic blocks that cannot reach the target
code by applying a graph reachability analysis on the inter-
procedural control ﬂow graph (ICFG) of the program. This
step is straightforward except that we employ an efﬁcient and
sound pointer analysis to resolve function pointers [37]. In this
section, we focus on pruning basic blocks that can reach the
target code by using a dedicated static analysis. To be clear,
we ﬁrst deﬁne a simple language on which we demonstrate
our algorithm and the background on precondition inference
in IV-A. Then, we illustrate the details of how BEACON
Figure 3: Workﬂow of BEACON.
in Figure 2. However, such an exact weakest precondition is
not computable in general. Thus, we often compute a sound
abstraction (or over-approximation), ˆwppl13, l18q as the nec-
essary precondition, with respect to a predeﬁned abstract do-
main. Commonly used numerical abstract domains include the
interval domain [32], octagon domain [33], polyhedral domain
[34], etc, and can aid in reasoning possible values of variables
occurring in the program. For instance, when the interval
domain is used, we have ˆwppl13, l18q ” w P p10,`8q ^ x P
p´8, 40q ^ v P p´8, 60q ^ y P p´8, 100q ^ z P p´8, 200q.
In this work, we choose the interval domain because it
is almost
the cheapest domain that can be computed via
a featherweight static analysis [35]. Such an efﬁcient static
analysis is practical as it does not introduce much overhead for
fuzz testing. Meanwhile, notice that preconditions expressed
using an interval domain can be efﬁciently checked at runtime,
requiring only comparisons between variables and constants
(i.e., bounds of the intervals). Therefore, it does not interfere
with the original execution with much runtime overhead.
Despite these merits of the interval domain for efﬁciently
reasoning about the preconditions, it is known that the interval
abstraction is coarse and can produce imprecise results because
it does not respect inter-variable relations [36]. We also have
shown in the previous section that the merging of backward
paths can also lead to imprecise results. In this work, we
argue these are the two problems signiﬁcantly exacerbate the
perceived imprecision of which we need to address.
(1) Relationship Preservation. Preserving the relationship
among variables leads to more precise preconditions, thus
pruning more paths during the directed fuzzing. Formally, this
problem can be described as: given a path condition φ, how to
compute the interval of a variable v. For example, in Figure 2,
we perform a backward analysis starting from the location
after Line 18 with the interval domain to obtain the necessary
ˆwppl13, l18q. Similar to the conventional ap-
precondition
proach, we obtain the interval of w P p10,`8q from Line 18.
Moreover, even though we cannot deduce the precondition of
v, y, x when analyzing the path condition v ““ y ´ x at Line
17, we still track the fact that v ““ y ´ x holds. Therefore,
after the intervals for x and v are inferred at Lines 16 and 15
respectively, we can utlize the tracked relation v ““ y ´ x to
infer the interval for y at Line 15, as the sum of the intervals of
v and x: y P p´8, 60q`p´8, 40q “ p´8, 100q. This updated
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
39
Fuzzers(e.g.,	AFL,	Mopt)Static	Analysis	ModuleRelationPreservationInstrumented	BinaryPreconditionInstrumentationTarget	codeSource	codeReachabilityAnalysisBoundedDisjunctionBackward	Interval	AnalysisCoverageInstrumentationProgram P
Function fun
Statement s
Instr i
::“ fun`
::“ fun : pv1, ..., vnq Ñ r
tsu
::“ s1; s2 | l : s1 ‹ s2 : l1 | l : i : l1
::“ v :“ e | v1 :“ ˚v2 | ˚ v “ e
|
|
::“ v | c | e1 op e2, op P t`,´,ˆ,˜u
::“ true | f alse
e1 cmp e2, cmp P tă,ą,“u
|
b1 ^ b2 | (cid:32)b
|
contains all program location l
Figure 4: A simple programing language.
goto l | assume b
v :“ call funpa1, ..., anq
Expression e
Boolean b
Location
infers the precondition of reaching the target in IV-B, and
optimizations to maintain analysis precision in IV-C. Finally,
we present how we leverage the preconditions inferred for
fuzzing through the instrumentation process IV-D.
A. Preliminary
Language. Figure 4 shows a simple language we use to
demonstrate our methodology. In the language, a program con-
sists of one or more functions, each taking a vector of formal
parameters pv1, ..., vnq and returns a value r. The statement
inside a function is a sequence s1 : s2, a non-deterministic
branch s1‹s2, or an atomic instruction i. We label the program
location before and after a statement as l and l1 respectively.
Most of the instructions are standard. The assume instruction
states that a Boolean condition must hold. Notice that common
language constructs like if (b) then s1 else s2 can be reduced
to passume b; s1q‹passume (cid:32)b; s2q. Loops can be transformed
into our simple language in a similar manner.
Precondition Inference. Traditionally, the weakest precon-
dition for reaching the target is computed by performing the
analysis backwards: we start with an initial postcondition true
at the target and repeatedly transform it according to the
semantics of the current instruction. Algorithm 1 shows the
standard predicate transformers for various instructions [22].
For example, an assignment v :“ e transforms the pre-
condition, φ, into φre{vs by replacing variable v, in φ with
expression, e. The load and the store statements can be
similarly handled [18] by introducing a new symbol Symp˚vq
to represent the dereference of pointer v, and taking care of
possible aliases of v in aliaspvq. The interprocedural analysis
is facilitated by renaming the variables in φ according to the
contexts of the callee or the caller, details omitted here due to
the limit of space. As an example, in Figure 2, wppl13, l18q ”
pz ă 2y ^ v ă 60 ^ x ă 40 ^ v “ y ´ x ^ w ą 10q by
applying the transformer of assume (Line 9-10, Algorithm 1)
successively. The assignment in Line 12 can then transform
w ą 10 in wppl13, l18q into pw ą 10qr´w ` 15{ws ” w ă 5.
In practice, we start from the target location and propagate
the condition backwards into multiple paths, which need to be
combined and approximated to make the analysis sound and
tractable. While Algorithm 1 gives a precise characterization
of a precondition, it outputs complex constraints that are ex-
Algorithm 1 Predicate transformers for precondition inference
Input: t “ l : i : l1: target instruction, φ: postcondition at l1
Output: a set of preconditions at l
1: procedure COMPUTEPRECOND(t, φ)
2:
3:
4:
match i
case v :“ e
case v1 :“ ˚v2
case ˚v :“ e
return tφre{vsu
return tφrSymp˚v2q{v1su
return tφre{Symp˚uqs | u P aliaspvqu
return tφ ^ bu
case assume b
5:
6:
7:
8:
9:
10:
case goto l0
return tφu
11:
12:
13: end procedure
pensive to reason. Therefore, trade-offs are needed between the
precision of the preconditions and the overhead in reasoning.
B. Backward Interval Analysis
Ž
ˆwppl, l1
We aim for an analysis that is sound, ensuring that all pruned
paths can not reach the target, and precise, pruning away a
large proportion of infeasible paths. Our designed analysis is
shown in Algorithm 2. Given a target location l1
0, it computes
for location l a set of preconditions ˆwppl, l1
0q that is necessary
for reaching the target (formally, wppl, l1
0q).
0q ñ
We abbreviate ˆwppl, l1
0q as ˆwpplq when the target location is
clear from the context.
The algorithm is parameterized by two functions, α and
γ, for reasoning the path conditions (mentioned later). To be
sound, we need to over-approximate the effects of all backward
paths starting from the target point. We achieve this by using a
worklist containing all active (instruction, postcondition) pairs.
More speciﬁcally, the target t and initial postcondition true
are added into the worklist (Line 3). During the analysis,
whenever an item pxl, i, l1y, φq is popped from the worklist
(Line 5), the postcondition, φ, is transformed according to
instruction, i, (Line 6), as discussed in Algorithm 1. After
this step, every newly computed precondition, φ1, is further
propagated backwards to update the value of ˆwpplq, potentially
adding new items to the worklist if ˆwp is updated (Lines 7-24,
discussed later). We soundly consider all backward paths with
the predicate transformers iteratively applied and the worklist
tracking all active executions.
As an example, in Figure 2, starting from the target location
l18 and initial condition true, Algorithm 2 performs the
analysis backwards up to l14. we are then faced with a
conditional branch at Line 9 and the path splits into two paths
p1 and p2. When reaching l8, the accumulated condition for
p1 and p2 is pc1 and pc2, respectively:
tz ă 2y, v ă 60, x ă 40, v “ y ´ x, w ă 5, x ě 20u
pc1 :
tz ă 2y, v ă 60, x ă 40, v “ y ´ x, w ą 25, x ă 20u
ľ
ľ
pc2 :
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
40
0y, α : condition Ñ Λ, γ : Λ Ñ
ward way, and is deﬁned by γpΛq “
conspvq where
Ź
pxl, i, l1y, φq Ð poppwlq
preconds Ð computePreCondpxl, i, l1y, φq
for φ1 P preconds do
updated Ð false
if size of ˆwpplq is less than threshold then
else
condition
0y, truequ
0q Ð ttrueu
ˆwppl1
Worklist wlÐ tpxl0, i, l1
while wl not empty do
ˆwpplq Ð ˆwpplq Y tφ1u
updated Ð true