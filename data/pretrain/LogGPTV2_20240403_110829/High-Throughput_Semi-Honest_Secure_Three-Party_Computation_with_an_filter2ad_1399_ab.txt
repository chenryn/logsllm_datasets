2016
2016
2016
Ref.
[10]
[18]
[19]
[23, Table 5.3]
[22]
Latency Throughput
2000s
14.28ms
323ms
223ms
-
-
320
3450
25,000
90,000
this work
166ms
1,242,310
Table 1: Reported times for semi-honest 3-party computation &
honest majority; the throughput is measured in AES computa-
tions per second (the last two rows with similar conﬁgurations).
We remark that other work on garbled circuits (e.g., two-
party Yao with semi-honest adversaries) achieves much lower
latency (e.g., 16ms reported in [13]). However, each garbled
AES circuit is of size at least 1.3Mb (using the latest half-
gates optimization [26]), not taking into account additional
messages that are sent. It is therefore physically impossi-
ble to go beyond 7500 AES computations per second on a
10Gbps network (where we achieve 1.4 million).
In addi-
tion, the two-party GMW approach using eﬃcient oblivious
transfer (OT) extensions is blocked by the speed of the OTs
(with two OTs required per gate). Considering the commu-
nication bottleneck, each OT requires transmitting a mini-
mum of 128 bits. Thus, the communication is approximately
the same as with a garbled circuit. (The fastest known im-
plementation [15] can process 5 million OTs per second on a
1Gbps network giving under 500 AES computations per sec-
ond. This is not far from optimal assuming linear scale-up
on a 10Gbps network.) Of course, we require an additional
server, in contrast to the Yao and GMW protocols.
2. THE NEW PROTOCOL
In this section, we describe our new protocol for three par-
ties. Our protocol works for arithmetic circuits over the ring
modulo 2n with Boolean circuits being a special case (with
n = 1). The protocol uses only very simple ring addition and
multiplication operations, which in the Boolean case reduces
simply to bitwise AND and XOR. In addition, the protocol
has very low communication: a single ring element is sent
per multiplication gate and there is no communication for
addition gates. In the Boolean case, we therefore have that
the only communication is a single bit per AND gate.
Correlated randomness. Our protocol assumes that
for every multiplication gate the three parties P1, P2, P3 are
given correlated randomness in the form of random ring ele-
ments x1, x2, x3 under the constraint that x1 + x2 + x3 = 0.
We show how this can be achieved in practice with great
eﬃciency using AES. (Thus, our protocol is information-
theoretically secure with perfect correlated randomness, but
the actual implementation is computationally secure due to
the use of AES to generate the correlated randomness.)
2.1 Securely Computing Boolean Circuits
In order to simplify the exposition, we begin by describing
the protocol for the special case of Boolean circuits with
AND and XOR gates. We assume that the parties P1, P2, P3
are able to obtain random x1, x2, x3 ∈ {0, 1} such that x1 ⊕
x2 ⊕ x3 = 0.
Secret sharing. We deﬁne a 2-out-of-3 secret sharing
bit v, the dealer chooses three random bits x1, x2, x3 ∈ {0, 1}
under the constraint that x1 ⊕ x2 ⊕ x3 = 0. Then:
(cid:1)-sharing, as follows. In order to share a
scheme, denoted(cid:0)3
2
• P1’s share is the pair (x1, a1) where a1 = x3 ⊕ v.
• P2’s share is the pair (x2, a2) where a2 = x1 ⊕ v.
• P3’s share is the pair (x3, a3) and a3 = x2 ⊕ v.
(cid:1)-
In order to see that the result constitutes a valid (cid:0)3
It is clear that no single party’s share reveals anything about
v. In addition, any two shares suﬃce to obtain v; e.g., given
x1, x2, a1, a2 we can compute v = a2 ⊕ x1.
XOR (addition) gates. Let (x1, a1), (x2, a2), (x3, a3) be
a secret sharing of v1, and let (y1, b1), (y2, b2), (y3, b3) be a
secret sharing of v2. Then, in order to compute a secret
sharing of v1 ⊕ v2, each Pi locally computes (zi, ci) with
zi = xi ⊕ yi and ci = ai ⊕ bi (no communication is needed).
sharing of v1 ⊕ v2, observe ﬁrst that z1 ⊕ z2 ⊕ z3 = 0 (since
both x1 ⊕ x2 ⊕ x3 = 0 and y1 ⊕ y2 ⊕ y3 = 0). Next, observe
that for every i ∈ {1, 2, 3} it holds that ci = zi−1 ⊕ (v1 ⊕ v2)
where i−1 = 3 when i = 1; e.g., we have c1 = a1⊕b1 = x3⊕
v1⊕y3⊕v2 = (x3⊕y3)⊕(v1⊕v2) = z3⊕(v1⊕v2). Thus, this
constitutes a sharing of v1 ⊕ v2 with randomness z1, z2, z3.
AND (multiplication) gates. We now show how the par-
ties can compute AND (equivalently, multiplication) gates;
this subprotocol requires each party to send a single bit only.
The protocol works in two phases: in the ﬁrst phase the par-
ties compute a simple (cid:0)3
(cid:1) XOR-sharing of the AND of the
input bits, and in the second phase they convert the (cid:0)3
(cid:1)-
sharing into the above-deﬁned(cid:0)3
pute(cid:0)3
1. Step 1 – compute (cid:0)3
Let (x1, a1), (x2, a2), (x3, a3) be a secret sharing of v1, and
let (y1, b1), (y2, b2), (y3, b3) be a secret sharing of v2. We as-
sume that the parties P1, P2, P3 hold correlated randomness
α, β, γ, respectively, where α ⊕ β ⊕ γ = 0. The parties com-
(cid:1)-shares of v1 · v2 = v1 ∧ v2 as follows (from here on,
we will denote multiplication of a and b by simply ab):
(cid:1)-sharing:
(cid:1)-sharing.
2
2
3
3
3
2
(a) P1 computes r1 = x1y1⊕a1b1⊕α, and sends r1 to P2.
(b) P2 computes r2 = x2y2⊕a2b2⊕β, and sends r2 to P3.
(c) P3 computes r3 = x3y3⊕a3b3⊕γ, and sends r3 to P1.
These messages are computed and sent in parallel.
8072. Step 2 – compute(cid:0)3
construct a(cid:0)3
(cid:1)-sharing: In this step, the parties
(cid:1)-sharing and
(cid:1)-sharing from their given(cid:0)3
2
2
3
the messages sent in the previous step. This requires local
computation only.
(a) P1 stores (z1, c1) where z1 = r1 ⊕ r3 and c1 = r1.
(b) P2 stores (z2, c2) where z2 = r2 ⊕ r1 and c2 = r2.
(c) P3 stores (z3, c3) where z3 = r3 ⊕ r2 and c3 = r3.
(cid:1) sharing of v1v2, meaning
ﬁned in Step 1 are indeed a (cid:0)3
Explanation of Step 1: We now show that r1, r2, r3 de-
that r1 ⊕ r2 ⊕ r3 = v1 ∧ v2. Observe ﬁrst that:
a1b1 = (x3 ⊕ v1)(y3 ⊕ v2) = x3y3 ⊕ x3v2 ⊕ y3v1 ⊕ v1v2 (1)
and similarly a2b2 = x1y1 ⊕ x1v2 ⊕ y1v1 ⊕ v1v2, and a3b3 =
x2y2 ⊕ x2v2 ⊕ y2v1 ⊕ v1v2. Thus,
r1 ⊕ r2 ⊕ r3
3
= (x1y1 ⊕ a1b1 ⊕ α) ⊕ (x2y2 ⊕ a2b2 ⊕ β) ⊕ (x3y3 ⊕ a3b3 ⊕ γ)
= x1y1 ⊕ x2y2 ⊕ x3y3 ⊕ a1b1 ⊕ a2b2 ⊕ a3b3
= x1y1 ⊕ x2y2 ⊕ x3y3 ⊕ (x3y3 ⊕ x3v2 ⊕ y3v1 ⊕ v1v2)
⊕ (x1y1 ⊕ x1v2 ⊕ y1v1 ⊕ v1v2)
⊕ (x2y2 ⊕ x2v2 ⊕ y2v1 ⊕ v1v2)
= (x1 ⊕ x2 ⊕ x3)v2 ⊕ (y1 ⊕ y2 ⊕ y3)v1 ⊕ v1v2 = v1v2
is a valid(cid:0)3
(cid:1)-sharing of v1v2 according to our deﬁnition, we
where the second equality is because α⊕β⊕γ = 0, the third
equality is from the equivalences of a1b1, a2b2, a3b3 above
(see Eq. (1)), the fourth equality is by cancelling repeated
values and rearranging the remainder, and the last equality
is because x1 ⊕ x2 ⊕ x3 = y1 ⊕ y2 ⊕ y3 = 0.
Explanation of Step 2:
In order to show that the result
need to show that z1, z2, z3 are such that z1 ⊕ z2 ⊕ z3 = 0,
and that c1, c2, c3 are of the deﬁned form.
First, z1 ⊕ z2 ⊕ z3 = (r1 ⊕ r3) ⊕ (r2 ⊕ r1) ⊕ (r3 ⊕ r2) = 0.
Second, observe that since c1 ⊕ c2 ⊕ c3 = r1 ⊕ r2 ⊕ r3 = v1v2
(as shown above), it holds that c1 = r1 = v1v2 ⊕ r2 ⊕ r3.
However, r2 ⊕ r3 = z3 (by the protocol deﬁnition) and thus
c1 = v1v2 ⊕ z3, as required. A similar calculation shows the
equality for c2 and c3 as well.
2
The above explanation shows that the gate computation
“works” in the sense that the invariant of the format of the
shares is preserved after every gate is computed. The fact
that the protocol is secure is proved later in Section 3.
The protocol. The full 3-party protocol works in the nat-
ural way. The parties ﬁrst share their inputs using the secret
sharing method. They then compute each XOR and AND
gate in the circuit according to a predetermined topological
ordering fo the circuit. Finally, the parties reconstruct their
output on the output wires. (In the client/server model, ex-
ternal clients send the three parties sharings of their input
according, and the three parties then compute the circuit in
the same way on the shares received.)
Observe that each party communicates with exactly one
other party only. This property also holds for the protocol
of Sharemind [4, 5]. However, our secret-sharing scheme and
multiplication protocol are completely diﬀerent.
2.2 Generating Correlated Randomness
Our protocol relies on the fact that the parties hold ran-
dom bits α, β, γ ∈ {0, 1} such that α ⊕ β ⊕ γ = 0 for every
AND gate.
In this section, we show how the parties can
eﬃciently generate such α, β, γ.
Information-theoretic correlated randomness.
It is
possible to securely generate correlated randomness with
perfect security by having each party Pi simply choose a
random ρi ∈ {0, 1} and send it to Pi+1 (where P3 sends
to P1). Then, each party takes its random bit to be the
XOR of the bit it chose and the bit it received: P1 computes
α = ρ3 ⊕ ρ1, P2 computes β = ρ1 ⊕ ρ2 and γ = ρ2 ⊕ ρ3.
Observe that α + β + γ = 0 as required. In addition, if P1
is corrupted, then it knows nothing about β and γ except
that β ⊕ γ = α. This is because β and γ both include ρ2 in
their computation and this is unknown to P1. A similar ar-
gument holds for a corrupted P2 or P3. Despite the elegance
and simplicity of this solution, we use a diﬀerent approach.
This is due to the fact that this would double the commu-
nication per AND gate; it is true that this is still very little
communication. However, given that communication is the
bottleneck, it would halve the throughput.
Computational correlated randomness. We now show
how it is possible to securely compute correlated randomness
computationally without any interaction beyond a short ini-
tial setup. This enables us to maintain the current situa-
tion where parties need only transmit a single bit per AND
gate. This method is similar to that of the PRSS subprotocol
in [9], but simpler since Shamir sharing is not needed. Let
κ be the security parameter, and let F : {0, 1}κ × {0, 1}κ →
{0, 1} be a pseudorandom function outputting a single bit.
1. Init:
(a) Each Pi chooses a random ki ∈ {0, 1}κ.
(b) Party P1 sends k1 to P3, party P2 sends k2 to P1
and party P3 sends k3 to k1.
P1 holds k1, k2, P2 holds k2, k3 and P3 holds k3, k1.
2. GetNextBit: Given a unique identiﬁer id ∈ {0, 1}κ,
(a) P1 computes α = Fk1 (id) ⊕ Fk2 (id).
(b) P2 computes β = Fk2 (id) ⊕ Fk3 (id).
(c) P3 computes γ = Fk3 (id) ⊕ Fk1 (id).
Observe that α⊕ β ⊕ γ = 0. Furthermore, P1 does not know
k3 which is used to generate β and γ. Thus, β and γ are
pseudorandom to P1, under the constraint that β ⊕ γ = α.
In practice, the id can be a counter that all parties locally
increment at every call to GetNextBit.
2.3 The Ring Modulo 2n and Fields
Our protocol above works for Boolean circuits. However,
in some cases arithmetic circuits are far more eﬃcient. In
this section, we show how to generalize the protocol above
to the general case of the ring modulo 2n and arbitrary ﬁelds
of size greater than 2. We describe the protocol for the ring
modulo 2n; it is clear that everything holds for arbitrary
ﬁnite ﬁelds and rings in which 3−1 exists. (The only thing
that is needed is to be able to divide by 3 which is deﬁned by
adding the unity to itself 3 times. This is possible in the ring
modulo 2n since gcd(3, 2n) = 1, and is always possible in a
ﬁeld.) From here-on in this section, all arithmetic is mod2n.
We remark that when taking n = 1 we have that addition
(and subtraction) is the same as XOR, and multiplication is
the same as AND. In this case, the protocol here is exactly
that described in Section 2.1.
(cid:1)-secret sharing. In order to share an element v mod 2n
the dealer chooses three random elements x1, x2, x3 ∈ Z2n
(cid:0)3
2
808under the constraint that x1 + x2 + x3 = 0. Then, P1’s share
is (x1, a1) where a1 = x3 − v, P2’s share is (x2, a2) where
a2 = x1−v, and P3’s share is (x3, a3), where a3 = x2−v. As
in the Boolean case, it is easy to see that each share reveals
nothing of v, and that any two shares suﬃce to reconstruct v.
We now show that each party’s share reveals nothing about
the secret. For simplicity, we show this for P1 (all others are