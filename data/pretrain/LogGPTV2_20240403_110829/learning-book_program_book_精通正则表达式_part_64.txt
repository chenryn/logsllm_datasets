---
## Page 423
拓展示例
397
进行limit-1次匹配之后，匹配停止，目标字符事中其余的部分（在最后一次匹配之后的文
本）会作为结果数组的尾元素。
如果某个字符事如下：
Friedl,Jeffrey,Eric Francis,America,Ohio,Rootstown
并且希望得到头三个部分，你可以将字符串分割为4个部分（头3个部分是名字，然后是
最后的“其他”字符事）：
String[] NameInfo = Pattern.compile(",*).split(Text, 4);
//NameInfo[0]是姓
//NameInfo[1]是名
//NameInfo[2]是中名（这里中名包括两个词）
//NameInfo[3]是其他部分，因为这里没用，直接忽略
为split设置limit的理由在于，如果不需要更多地处理，它可以用来停止查找其他的字符
串、创建新字符串，限制数组的长度，提高效率。提供limir能够限制工作量。
拓展示例
Additional Examples
为ImageTag添加宽度和高度属性
AdilingWidth and HeiglitAttributestoImageTags
这里给出个高级的例子，原地（in-place）查找替换，修改HTML，保证所有的imagetag都
包含WIDTH和HEIGHT属性（HTML必须是StringBuilder、StringBuffer，或者其他
CharSequence)。
只要有一副图像没有规定宽度或者高度，就可能降低整个页面的装载速度，因为浏览器在
显示这幅图像之前必须读入整个文件。如果包含了宽度和高度的尺寸，文本和其他元素就
可以立刻正确摆放，这样用户会感觉页面读取速度更快（注8）。
如果找到imagetag，程序会寻找SRC、WIDTH和HEIGHT属性，如果存在，提取他们的
值。如果WIDTH和HEIGHT有一个不存在，就先取回图像，计算尺寸，然后补充上属性。
如果WIDTH和HEIGHT都没有，就按照图像的真实尺寸来设置这些属性。如果存在一个，
就只需要算出另一个属性，它的值是按比例计算出来的（例如，如果WIDTH是真实尺寸的
一半，则添加的HEIGHT的值也是真实高度的一半，现代的浏览器就是这样处理的）。
注8：“所有的围像都必须有size属性”，这是Yahoo！的规定，即使在早期也是如此。显然，今天
仍然有许多流量巨大的站点页面的tag不包含尺寸信息。
---
## Page 424
398
第8章：Java
和第383页的代码一样，这个程序手动维护匹配指针。它还使用了检索范围（384）和方
法链（389）。代码如下：
//匹配独立的tags
Matcher mImg = Pattern.compile(*(?id)").matcher(html);
//匹配独立的tag中的SRC、WIDTH和HEIGHT属性（所用的表达式很简单）
Matcher mSrc = Pattern.compile(*(?ix)\\bSRC=(\\S+)").matcher(html);
Matcher mWidth = Pattern. compile("(?ix)\\bwIDTH =(\\S+) *) .matcher (html);
intimgMatchPointer=O：//第一次搜索从宇符串起始位置开始
while (mImg.find(imgMatchPointer))
imgMatchPointer=mImg.end（）：//下一次壹找从这里开始
//在刚刚找到的tag中查找各宇段
Boolean hasSrc = mSrc.region( mImg.start(1), mImg.end(1) ).find();
Boolean hasHeight = mHeight.region( mImg.start (1), mImg.end(1) ) .find() ;
Boolean hasWidth = mWidth.region( mImg.start(1),mImg.end(1) ).find();
//如果提供了SRC属性，但是没提供WIDTH和/或HEIGHT.··
if ( hasSrc && (! hasWidth Il!hasHeight))
java.awt.image.BufferedImagei=//获取围像
javax.imageio.ImageIO.read(new java.net.URL(mSrc.group(1)));
StringSize;//存放未提供的WIDTH和/或HEIGHT属性
if (hasWidth)
//得到了width，根据比例计算height
size=*height='*+（int)(Integer.parseInt（mWidth.group(1)）*
i.getHeight（)/i.getWidth())+“.“;
else if (hasHeight)
//得到了height，根据比例计算width
size= "width='"
+（int)(Integer.parseInt(mHeight.group(1)）*
i.getWidth()/i.getHeight（))+"";
else//两个属性都没提供，按实际情况处理
size=*width='*+i.getWidth（）+*"+
"height=**+i.getHeight()+"*;
html.insert（mImg.start（1），size）；//原地修改HTML
imgMatchPointer+=size.length（）;//史新匹配指针
）
尽管这例子很有教育意义，但还是有少数地方没考虑到。因为这个例子的重点在于本地查
找和替换，尽可能地简化了其他方面，对需要处理的HTML进行了理想的假设。例如，正
则表达式不容许属性的等号两边出现空白，属性中不会出现引号（参考第202页的Perl正
则表达式，可以得到有实际意义的，Java版本的tag属性匹配的办法）。这个程序不能处理
相对URL，也不能处理格式错误的URL，也不能处理获取图像的代码抛出的任何异常。
不过，这个例子仍然说明了几个重要的概念。
---
## Page 425
拓展示例
399
对于每个Matcher，使用多个Pattern校验HTML
ValidatingHTMlwithMultiplePatternsPerMatcher
我们也可以用Java来写校验简单HTML的程序（132）。这段代码通过usePattern方法
实时更换Matcher的patterm。这样能够处理多个以“G开头的pattern，进行对应的操作。请
参考第132页的内容了解此方法的更多细节。
Pattern pAtEnd
=Pattern.compile("\\G\\z"）;
Pattern pword
=Pattern.compile("\\G\\w+*);
Pattern pNonHtml=Pattern.compile("\\G[^\\w<>&]+");
Pattern pImgTag=Pattern.compile("\\G(?i)]+)>);
Pattern pLink
=Pattern.compile("\\G(?i)]+)>*）;
Pattern pLinkx
= Pattern.compile("\\G(?i)");
Pattern pEntity
=Pattern.compile（"\\G&（#\\d+;\\w+）;"）;
Boolean needclose = false;
Matcher m=pAtEnd.matcher（html）；//每个Pattern 对象都能生成Matcher对象
while (! m.usePattern(pAtEnd) .find())
if (m.usePattern(pword).find())(
..m.group（）包含一个单词或数值，可以进行对应的检查
)else if (m.usePattern(pImgTag).find())(
...包含imagetag，检查是否合适...
)else if (!needClose && m.usePattern(pLink).find())(
..，有超链接、验证...
needclose=true;
)else if （needClose && m.usePattern(pLinkx).find())(
（[.+（）dno+.]N/）uuxd·nows
needclose = false;
)else if (m.usePattern(pEntity).find())(
//容许出现&gt；和&#123：之类的entity
)else if （m.usePattern(pNonHtml).find())(
//容许出现其他非单词的非HTML代码
)else{
//完全无法匹配，肯定出了错，在此处选取一段文字用于错误输出
m.usePattern(Pattern.compile(*\\G(?s).(1,12) ")).find();
System.out.println(*Bad char before*"+m.group()+"");
System.exit(1);
if (needClose){
System.out.println("Missing Final ");
System.exit (1);
因为java.util.regex的bug，非HTML的匹配尝试即使不成功，仍然会“占用”目标字
符串中的一个字符，所以我把这段程序放在最后。这个bug仍然存在，只是表现为错误输
出中缺少第一个字符。我已经把这个bug提交给Sun。
此bug没有修正之前，该如何使用单个参数的find方法来解决此问题呢？请翻到下页
查看答案。
制
---
## Page 426
400
第8章：Java
在单个参数的findO中使用多个Pattern
第399页问题的答案
在第399页的程序中，java.util.regex错误地设置了matcher的“当前位置”，所以
下一次查找会从错误的位置开始。我们可以绕过这个bug，自己记录“当前位置”，使
用单个参数的find从此位置开始查找。
程序中修改的部分以高亮显示：
Pattern pword
=Pattern.compile（*\\G\\w+"）;
Pattern pNonHtml
=Pattern.compile(*\\G[^\\w<>&]+"）;
Pattern pImgTa
=Pattern.compile(*\\G(?i)]+)>）;
Pattern pLink
=
Pattern.compile(\\G(?i)]+)>");
Pattern pLinkx
Pattern.compile(*\\G(?i)*);
Pattern pEntity
=
Pattern.compile(*\\G&（#\\d+I\\w+);");
Boolean needclose
=false;
Matcher m=pWord.matcher（html）：//每个Pattern对象都能生威Matcher对象
Integer currentLoc=0;
while （currentLoc");
System.exit(1);
与之前的程序不同，这里调用find时指定了检索的开始偏移值，所以不必指定region。
不过，你可以自己维护这个region，在每次find之前恰当地调用region。
m.usePattern(pWord).region(start，end).find(currentLoc)
---
## Page 427
Java版本差异
401
解析CSV文档
Parsing Comma-SeparatedValues (CSV) Text
这里是用java.util.regex写的解析CSV的例子（参见第6章271)。这里的程序使用
占有优先量词（142）取代固化分组，因为这样看起来更清楚。
Stringregex=//双引号字段保存到group（1），非引号字段保存到group（2）
\G(？:I,)
\n"+
·(?：
\n*+
#要么是双引号字段...
\n*+
\”#开头双引号
\n*+
（+（+[=\]=\=\）+[\]}
\n*+
\”#结束双引号
\n*+
”1#...或者是...
\n*+
#非引用，非逗号文本..
\n*+
([~\,]*+)
\n*+
\n*;
//根据上面的表达式创建matcher，解析其中的一行cSV文格
Matcher mMain = Pattern.compile(regex, Pattern.COMMENTs).matcher(line);
//创建匹配""的matcher，目标文本暂时为虚构
Matcher mQuote=Pattern.compile("\"\"").matcher("");
while (mMain.find())
String field;
if (mMain.start(2) >= 0)
field=mMain.group（2）；//非引号字段，直接使用
else
//引用字段，用单引号替换两个相连的引号
field = mQuote.reset(mMain.group(1)).replaceAll(*\*");
//现在处理字段的内容.：·
System.out.println("Field ["+ field + "]");
这个程序比第217页的原始程序效率要高很多，原因在于：正则表达式效率更高，按照第6
章第271页介绍的办法，重复使用单个Matcher（通过单个参数版本的reset方法），而没
有不断创建-回收Mather。
Java版本差异
JaaVersionDifferences
本章开头已经提到，本书主要针对Java1.5.0。不过，自前Java1.4.2仍然在广泛应用，而
Java1.6已经整装待发（已经发布了beta版，但不会很快发布正式版）。所以，我得简要地
---
## Page 428
402
第8章：Java