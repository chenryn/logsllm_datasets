tent with the component-level speciﬁcation.
We were unable to verify the component-level speciﬁcations for
Map using Cadence SMV, since the large register holding the EDF’s
button map made the state space too large to model check at the bit
level. Instead, we constructed an SMT instance (in the combination
of the theories of uninterpreted functions and bit-vectors) encoding
the assertion that the module’s behavior matches its speciﬁcation.
The memory in Map was modeled as an uninterpreted function, and
the Yices SMT solver [31] was used to complete the veriﬁcation.
Under the assumption that the EDF is valid, we were able to verify
that the Map module meets its component-level speciﬁcation.
5.2 System-Level Behavioral Properties
We formulated each behavioral property from Section 3.3 as an
LTL formula and then ran the SMV model checker to verify the
property holds true for our implementation. The LTL formulation
of each property is given in Appendix A. Deriving the correct LTL
formula for a given property was not always straightforward and
we did not always get it right on the ﬁrst try. However, the Verilog
code, the SMV layers, and the LTL properties represent three inde-
pendent means of describing our voting machine. Once mutually
consistent, each one provides a crosscheck on the other two and
gives us increased conﬁdence that they are each correct.
6. VERIFYING STRUCTURAL PROPERTIES
Next, we describe how we veriﬁed that the implementation of our
voting machine meets the structural properties articulated earlier
(Section 3.4). These properties all involve checking that a vari-
able v depends only on some speciﬁed set W = {w1, . . . , wn}
of variables, and nothing else. In other words, we must verify that
v can be expressed as a deterministic function of the other vari-
ables: v = f (w1, . . . , wn), for some function f , or in shorthand,
v = f (W ). Put another way, we want to check that v determin-
istically depends on W , and only W , i.e., for every other variable
x /∈ W , v is conditionally independent of x given W . We verify
this kind of property by formulating it as a Boolean satisﬁability
(SAT) problem.
6.1 Approach
The ﬁrst step is to express the transducer as a Boolean system. We
begin by introducing some notation. We assume there is a set S of
state variables, so that each valuation of values to these variables
corresponds to a state of the system. Similarly, let I be a set of
input variables, and O a set of output variables. For each state
variable s, let the variable s′ denote the previous value of s; let S ′
denote the set of these variables. Then we can write the transition
relation as a function δ, which expresses the state as a function of
the previous state and the input via the relation S = δ(S ′, I). (This
is shorthand for si = δi(s′
k, i1, . . . , iℓ) for i = 1, . . . , k,
assuming S = {s1, . . . , sk} and I = {i1, . . . , iℓ}.) Similarly,
we assume the output function is modelled as a function ρ, via the
relation O = ρ(S). Thus, we can model the transducer by the
formula
1, . . . , s′
φ(S, S ′, I, O) ≡ S = δ(S ′, I) ∧ O = ρ(S).
Now suppose we wish to check that state or output variable v is a
deterministic function of a set W of state or input variables. Let
S1, S2 be two copies of the state variables, I1, I2 be two copies of
I, and O1, O2 be two copies of O. Consider the formula
ψ(S1, S ′
1, I1, O1, S2, S ′
2, I2, O2) ≡
1, I1, O1) ∧ φ(S2, S ′
φ(S1, S ′
v1 6= v2 ∧ ∀w ∈ W . w1 = w2.
2, I2, O2)∧
Effectively, we make two copies of our model of the system. We
then check whether it is possible for v to take on two different val-
ues in the two copies, while all variables in W take on the same
value in both copies; the answer reveals whether v depends deter-
ministically upon W . In particular, v can be expressed as a deter-
ministic function of W (v = f (W )) if and only if ψ is unsatisﬁ-
able. Figure 4(a) illustrates this idea. This approach to checking
dependence is similar to the technique of using self-composition
for checking information ﬂow [27]. The key idea is to formulate
non-interference as a 2-safety property.
6.2 Application
We verify the structural properties from Section 3.4 by checking
deterministic dependence properties. For instance, to help verify
structural property 4, we verify that the active contest number de-
pends deterministically upon the previous contest number and the
button pressed.
We applied the approach sketched above to the Verilog implemen-
tation of our voting machine, using the Beaver SMT solver [4, 13]
to check satisﬁability.
We illustrate some of the results of our dependency analysis in Fig-
ure 4(b). We draw an edge from state/input variable r to state vari-
able s if the value of s after a single transition depends on the value
of r before the transition.
If there is no edge from r to s, then
the new value of s does not depend upon the prior value of r. We
excluded the Map and Display modules from this ﬁgure for clarity,
and so the relevant input variables are touch and button_num,
and the state variables are the selection_state[i] and memory[i]
for each contest i as well as contest_num. We include the
selection state for two sample contests, selection_state[i] and
selection_state[j] (where i 6= j), to help demonstrate the inde-
pendence between contests.
We applied dependency analysis to the entire machine and to every
module. For instance, we veriﬁed that the selection_state for a
contest i is independent of selection_state for any other contest.
Also, memory for contest i depends only on the selection_state
for the same contest and is independent of any other contest.
470v1 ∈ S1 ∪ O1
ψ
v1 6= v2
v2 ∈ S2 ∪ O2
S1
O1
S2
O2
final_memory’[i]
selection_state’[i]
selection_state’[j]
contest_num’
W1
φ1
φ2
W2
final_memory[i]
selection_state[i]
selection_state[j]
contest_num
S ′
1 \ W1
I1 \ W1
S ′
2 \ W2
I2 \ W2
W1 = W2
button_num
touch 
(a) Satisﬁability problem for checking that v deterministically depends
on W
(b) Dependency graph for a subset of the state variables in the voting
machine. The ﬁrst row shows the states at time t, the second shows
the states at time t + 1, and the third row shows the input variables.
Figure 4: Checking independence and deterministic dependence
Thus, we were able to verify the independence of contests from
each other. For the display module we veriﬁed that the current
display is a bijective function of contest_num and the current
selection_state when in main mode. This bijectivity will be im-
portant when we discuss testing in section 7. In addition, we veri-
ﬁed Map is dependent only on its explicit input signals and contains
no non-deterministic behavior. In this way, we were able to verify
all the structural properties speciﬁed in Section 3.4.
6.3 Structural Decomposition
We also verify that the Verilog implementation takes the form of
a controlled composition of ﬁnite-state transducers, as deﬁned in
Section 2.1. In particular, we show that it can be expressed in the
cast→ Mcast, augmented with a transition
form LMnav; M1, . . . , MN M
on reset back to its initial state.
We do this by showing that the transition relation S = δ(S ′, I) can
be partitioned into four disjoint cases, representing the four types of
transitions that can occur in this controlled composition: navigation
(which corresponds to transitions in Mnav), contest i (transitions
Mi, for some i with 1 ≤ i ≤ N ), cast (the transition to Mcast on
cast), and reset (the transition on reset). Associated with each
case x there is a guard gx, which identiﬁes the condition under
which the case is active, a set Vx of state variables updated in this
case, and an update rule v := f (D′
v) for each state variable v ∈ Vx.
The state variables not in Vx remain unchanged: v := v′ for each
state variable v /∈ Vx. We veriﬁed that the transition relation can
be written as
δnavigate(S ′, I)
δi(S ′, I)
δcast(S ′, I)
δreset(S ′, I)
if gnavigate(S ′, I)
if gi(S ′, I)
if gcast(S ′, I)
if greset(S ′, I).
δ(S ′, I) =8>>>>>:
The guards are disjoint: only one of the four guard predicates can
be true at any one time. See Table 1 in the appendix.
Also, each state variable can be updated by only one of the four
cases: Vnavigate, Vi, Vcast, and Vreset are pairwise disjoint. In other
words, at each time step, each state variable is controlled by exactly
one component. For instance, contest_num can change only dur-
ing navigation, selection_state[i] can change only when contest
number i is active and a selection button is pressed, and memory
can not change except in cast mode.
This decomposition helps us to verify the structural properties. For
instance, we can conclude that the next value of selection_state[i]
may depend upon the previous value of selection_state[i] but not
upon the previous value of any other selection_state[j], as as-
serted in structural property 3. The structural properties plays a
very important role in testing the voting machine, as discussed in
the next section.
7. TESTABILITY
We describe how systematic testing is used in conjunction with the
formal veriﬁcation performed earlier to ensure that the input-output
behavior exhibited by the actual voting machine is identical to that
exhibited by the speciﬁcation voting machine.
Speciﬁcally, our goal is to give a testing protocol such that if all
tests pass, we can conclude that A is correct as deﬁned in Sec-
tion 2.3, i.e., that A and P are trace-equivalent after application of
the interpretation function I to traces of A.
7.1 Preliminaries
We are concerned with testing ﬁnite-length behaviors of the voting
machine. A test input (or just test) is a sequence of inputs to the
speciﬁcation voting machine P of the form b1, b2, . . . , bℓ where
bj ∈ I \ {cast} for 1 ≤ j < ℓ and bℓ ∈ I. A complete test input
(or complete test) is a test input whose last element bℓ corresponds
to casting the vote; i.e., bℓ = cast.
Recall from Section 2.3 the deﬁnitions of interpretation functions
I, IO, II, and of traces of the actual and speciﬁcation voting ma-
chines. We make the following assumption about II:
A0: For a given election deﬁnition ﬁle (EDF),
for every
screen z and every (x, y) location on the touch screen,
II(z, (x, y)) = Map(z, (x, y)).
In the above statement, Map denotes the Map module of A. Note
that we have considered the range of II and Map to be the same;
strictly speaking, although the ranges are isomorphic to each other,
they could be different sets.
Intuitively, a human tester would administer a test T = (b1, . . . , bℓ)
by “inverting” the input interpretation function II on each bj to ﬁnd
a corresponding (x, y)-position aj to press on. To formalize it a bit
more, if the initial screen is z0 and the ﬁrst button press in the test
sequence is b1, then we assume that the tester computes a1 such
that II(z0, a1) = b1, and then presses the screen at (x, y)-position
a1. The tester then observes the next screen image, say z1, ﬁnds
a2 such that II(z1, a2) = b2, and presses the screen at (x, y)-
position a2. This process continues, yielding a sequence TA =
a1, a2, . . . , aℓ of inputs to the actual voting machine A.
Let τA be the trace exhibited by A on input TA, and let τP be
the trace exhibited by P on input T . As noted earlier, we ensure
by design and formal veriﬁcation that A and P are deterministic,
meaning that for any T , there exists exactly one τA and exactly one
471τP . If I(τA) = τP , we say that A is correct on test T or that test
T passes.
Intuitively, at each step, the tester will check the output screen to
make sure that the voting machine appears to have responded cor-
rectly, according to their expectations about correct behavior (e.g.,
after selecting a candidate, the candidate should be highlighted or
otherwise appear to be selected). After casting their ballot, the
tester will inspect the cast vote record produced by the voting ma-
chine and check that it appears to be correct (i.e., it is consistent
with the selections the tester has made during this test, according
to their interpretation of the test inputs).
If any of these checks
fail, the human tester will fail the machine; otherwise, the human
tester will pass the machine. Based upon our assumptions about
human expectations, as formalized in Section 2.3, we assume that
the behavior of human testers can be modelled as follows:
A1: We assume that there exists a single interpretation function
I = (II, IO) such that, for every human tester, the human
tester passes the voting machine on test T if and only if it is
correct on test T .
A test suite T is a set of complete tests. We say that T passes if
every T ∈ T passes.
We assume that if any test fails, the voting system will not be used
in an election. Therefore, we wish to identify a condition on T
so that if every test in T passes, then we can be assured that A is
correct in the sense deﬁned in Section 2.3: i.e., it is trace-equivalent
to P after application of the interpretation function. We identify
such a sufﬁcient condition on T in Section 7.2.
Such a result is only possible if we know that the voting machine
has a certain structure. We rely upon the following properties of
the actual and speciﬁcation voting machines:
P0: The output function of the voting machine is a bijective func-
tion of the contest number and selection state of the current
contest.
P1: The voting machine is a deterministic transducer.
P2: The state of a contest is updated independently of the state of
other contests.
P3: If a navigation button is pressed, the selection state remains
unchanged.
P4: If a selection button is pressed, the current contest number
stays unchanged.
These ﬁve properties have been formally veriﬁed for A, as de-
scribed in Sections 3, 5 and 6. For P, properties P0–P4 follow
from the speciﬁcation given in Section 2.2.
In addition, we require another property of A:
P5: The electronic cast vote record that is produced when we cast
the ballot is an accurate copy of the selection state for each
contest.
Property P5 has been formally veriﬁed under the assumption that
the machine’s record of the cast vote is correctly output on persis-