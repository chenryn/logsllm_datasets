这个问题怎么分析呢，mysql 的 query log 记录了所有操作的过程，这给我带来很大
当我看到日志里面无意检查到的信息时，不禁眼前一亮：创建失败的表是QRTZ_JOB_
后来与开发同学做了进一步确认，把数据库中QRTZ字样的表都删除（前提是有备
Create Table:
我打开部署的脚本开始认真看起来，脚本里面没有任何的外键信息，我能感觉到这
在清理表结构之前，我下意识的做了一个基本的信息备份，这是清理之前的表的情
>showtableslike'QRTz%'
在技术问题上，很多确实可能是bug导致的，但是我们不能把所有看起来奇怪的问
蛛丝马迹找到问题的突破口：
QRTZ_BLOB_TRIGGERS
Tables_in_seal (QRTZ%)
JOB_LISTENER
JOB
JOBNAME
QRTZ
QRTZ_SCHEDULER_STATE
QRTZ
QRTZ_JOB_LISTENERS
QRTZ_CALENDARS
RTZ
GROUP
TRIGGER
SIMPLE_TRIGGERS
PAUSED_TRIGGER_GRPS
LOCKS
CRON_TRIGGERS
varchar(200) NOT NULL,
varchar(200)
LISTENERS
varchar(200)
。当然这个日志给了我一些很明确的信息，但是尚没有找到
QRTZ_JOB_LISTENERS
NOT NULL,
第4章SQL开发规范和基础”133
---
## Page 156
134丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
前会有下面的语句，这样一来，就可以删除这个表了。
constraint fails
外键引用是肯定删不掉的，会有下面的错误。
因此先删除再创建的过程中就会因为外键依赖关系的原因而失败。
JOB_DETAILS 的变更。
JOB_LISTENERS以前就存在,而这次的部署变更，开发同学只是提交了QRTZ_
份，
这
是QRTZ_JOB_LISTENERS 不在这个脚本中，很可能在这次部署之外就已经创建好了。
QRTZ_JOB_DETAILS，而实际上脚本里面没有任何外键的信息，那只有一个可能，那就
一点尤其重要，也是这个问题的突破口。
JOB GROUP
> DROP TABLE IF EXISTS^QRTZ_JOB_DETAILS′;
但是 navicat 偏偏做了这样一些工作，它会自动生成一些辅助脚本内容，在脚本执行
这里就不得不提到 navicat 这个工具的神助攻，因为正常来说删除一个表，如果存在
Query OK, 0 rows affected (0.00 sec)
>SET FOREIGN_KEY_CHECKS=O;
ERROR 1217
>DROPTABLEIF EXISTSQRTZ JOB DETAILS;
而且这样看来问题比我们想象的还要复杂些，表QRTZ_JOB_DETAILS 和QRTZ
CREATE TABLE
CREATE
CREATE
CREATE
CREATE
CREATE
CREATE
我简单过滤了一下，问题的原因就开始清晰起来了。
怎么验证之前的状态呢，我看了下这套环境的备份策略，惊喜的是每天会有一次备
可以看出，1row in set（0.00 sec)QRTZ_JOB_LISTENERS 里是存在外键，是指向了
是QRTZ_JOB_LISTENERS的外键关联表，这次做变更只有QRTZ_JOB_DETAILS，
有了上面的分析，问题的原因就很清晰了，因为表QRTZ_JOB_DETAILS 在以前就存
)ENGINE=InnoDB DEFAULT CHARSET=utf8
模拟复现问题：
REATE
CONSTRAINT
KEY
PRIMARYKEY（JOBNAME，
TABLE
TABLE
TABLE
TABLE
TABLE
JOBNAME
TABLE
TABLE
TABLE
TABLE
TABLE
TABLE
REFERENCES
QRTZ_TRIGGERS
QRTZ_CALENDARS
QRTZ
QR
QRTZ_JOB_LISTENERS
24
TZ
TRIGGER
PAUSED_TRIGGER_GRPS`
BLOB
JOB
JOB
QRTZ
LISTENERS
NAME
TRIGGERS
JOBGROUP
LISTENERS
DETAT
ibfk
`JOB_LISTENER`）,
(JOB_NAME,
FOREIGN
^JOB_GROUP
KEY
（`JOB_NAME，
---
## Page 157
所示的图来清晰的展现。
4.2.1
的存储解决方案。
比如对于浮点数据的存储或者二进制数据的存储，虽然 MySQL支持但是显然不是一个好
我们对于数据类型的选择不能完全依赖于数据存储层，有些其实是可以在应用层做好的，
业务场景是相对收敛的状态，所以对于数据类型的选择不能追求丰富，而在于精，同时
虑使用呢，其实不是的，这些数据类型是尽可能适应复杂的业务场景，而你所在的公司
所谓数据类型一应俱全，总有一款适合你。
4.2
但是数据类型丰富就势必带来另外一个问题，
MySQL的整数类型很丰富，根据支持范围有5种类型可以选择,可以通过如下图4-14
-MySQL的数据类型很丰富，从支持的范围和精度上都有相应的数据类型可以选择，
下面我们会从数值类型、字符类型和日期类型3个方面来展开介绍一下。
一个相对完整的数据类型结构如下图 4-13 所示。
MySQL error code 150: Foreign key constraint is incorrectly formed
补充：还可以用这个命令来看看150错误的含义。
这样一来，问题就很容易复现了。
Query OK, 0 rows affected (0.00 sec)
MySQL整数类型
解读MySQL数据类型
精确小数
懒翘
类型
浮点数
塑
数塑
图4-13
（SCHEDNAME
是不是所有的数据类型我们都需要考
类型
字符串
varchar或者text
变长字符串类型
第4章SQL开发规范和基础|135
---
## Page 158
136丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
怎么应对？
下面我们通过一个案例来细化一下。
所示。
int(integer)
mediumint
smallint
类型名称
>select conv(18446744073709551615,10,2);
> select conv(-1,10,2);
要回答这个问题，需要考虑到进制转换。
MySQL 的binlog 里面是否会区分 signed 还是 unsigned 呢，如果不区分，这类问题该
案例 4-2：数值类型在binlog 中需要注意的细节
看到这个图可能大家没有一
tinyint
对于整数类型数据，是通过是区分有符号和无符号的，它们的数值范围如下表 4-2
下面是把数字18446744073709551615转换为二进制。
conv(-1,10,2)
下面是把-1从十进制转换为二进制。
如果你不熟悉进制转换，也没关系，我们先来看两个小例子。
我们了解了整型数据的范围，那么有一个问题就会自然的抛出来了。
conv(18446744073709551615,10,2)
bigint
1111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111
-2147483648~2147483647
类型
tinyint
9223372036854775807
-9223372036854775808~
有符号数（signed)
-8388608~8388607
-32768~32767
-129~127
类型
一个清晰的认识，基本的感觉是了解了但难以付诸实践，
表4-2
图4-14
mediumint
类型
类型
0~18446744073709551615
无符号数(Unsigned)
0~4294967295
0~16777215
0~65535
0~255
3字节
2字节
存储空间
8字节
--
---
## Page 159
入对应的数字，解析 binlog 里面的内容来看看结果。
果呢？
其实还我们还可以反向验证。
之别。
所以这就引出另外一层含义，那就是数据临界点，我们刚刚使用conv做了进制转换，
接着我们切一下日志，查看一下 Master 端的状态，得到日志的偏移量和 binlog 名字。
create table tl (id int unsigned not null auto_increment primary key, col1
步骤如下：
>selectconv(repeat(1,64),2,10);
> select conv(repeat(1,64),2,-10);
> select * from tl;
查看数据的情况，可以从输出看出两者是有明显差别的。
然后使用 flush logs 再次切换日志。
flush logs;
insert into t1 (col1， col2) values (18446744073709551615， -1);
这个时候我们插入两列值，
需要创建一个表，指定两个字段，
我们通过上手测试来验证一下。
1
这么看来，让人有些担忧，如果达到这种数据的临界点，会发生什么意料之外的结
id|col1
binlog.000031
flush logs; show master status;
18446744073709551615
conv(repeat(1,64),2,10)
conv(repeat(1,64),2,-10)
从进制转换的结果来看，两者是没有差别的，但是在实际的场景中，这可是天壤
File
-1
从输出的结果来看，它们是相等的。
！
18446744073709551615
IPosition
bigint signed)
107
一个无符号，
co12
一个是有符号类型，
-1
 engine=innodb;
一个有符号。
一个是无符号类型，然后写
第4章SQL开发规范和基础”137
---
## Page 160
138丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
有效数字为 16位。
概览图如下图4-15所示。
4.2.2MySQL小数类型
判断。
意这个细节；对此一种补充思路是查看 information_schema中的列信息来做出更加明确的
分有符号和无符号的差别的。所以如果需要通过解析 binlog 来做数据同步就尤其需要注
中有符号数和无符号数都会按照无符号数来转换，而且通过 binlog 直接看数据类型是区
对于保证精度的数据，MySQL 也是有相应的小数类型的，对于小数类型的一个
从如上加粗的部分来看，两个字段的输出是没有任何差别的，所以这样看来，binlog
#170519 18:54:47 server id 13386
###
### INSERT INTO teSt.tl
输出的部分内容如下：
mysqlbinlog -vv binlog.000031
我们来简单说一下单精度和双精度，单精度浮点数有效数字为8位，双精度浮点数
###
我们解析binlog来看一下：
我们举个例子来说明一下，如图4-16所示。
at
SET
268
@1=1/* INT meta=0 nullable=0 is_null=0 */
精确类型
精确小数
decimal
类型
单精度类型
类型
小数
图4-15
float
 end_log_pos 295
浮点数
类型
双精度类型
double
Xid=76
---
## Page 161
文章都可以归类为字符串类型。其中，我们工作中碰到的大多数都是变长字符串类型。
4.2.3MySQL字符串类型
景中对于它的使用总是和预期有所差别。
字符串类型算是一种非常通用的数据类型，如下图4-17所示。小到一个名字，大到一篇
ouin set(o.o0 sec)
id1
所以对于浮点数的使用有几个建议：
对于小数类型，我对浮点数是持保守态度的，因为虽然可以支持精度，但是实际场
q1--root@localhost:mytest 17:09:45>>select *from t1;
tbs
（4）要注意浮点数中一些特殊值的处理。
（3）对于浮点数计算中存在的误差，数据计算和容错最好是程序来保证。
（2）对货币等对精度敏感的数据，应该用定点数表示或存储，这里推荐就是decimal。
（1）浮点数存在数据误差。
in
1id2
CHARSET=U
1id3
变长学特邮类型
类型
字符串
8
变长字符串类型
图4-17