and this is also the prototype used since glibc 2.2.2.
.pp
only the
.b einval
error return is documented by susv2 and posix.1-2001.
.sh notes
the type
.i useconds_t
is an unsigned integer type capable of holding integers
in the range [0,1000000].
programs will be more portable
if they never mention this type explicitly.
use
.pp
.in +4n
.ex
#include 
\&...
    unsigned int usecs;
\&...
    usleep(usecs);
.ee
.in
.pp
the interaction of this function with the
.b sigalrm
signal, and with other timer functions such as
.br alarm (2),
.br sleep (3),
.br nanosleep (2),
.br setitimer (2),
.br timer_create (2),
.br timer_delete (2),
.br timer_getoverrun (2),
.br timer_gettime (2),
.br timer_settime (2),
.br ualarm (3)
is unspecified.
.sh see also
.br alarm (2),
.br getitimer (2),
.br nanosleep (2),
.br select (2),
.br setitimer (2),
.br sleep (3),
.br ualarm (3),
.br time (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getservent_r.3
.\" copyright 2002 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.\" modified 2003-11-18, aeb: historical remarks
.\"
.th gamma 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
gamma, gammaf, gammal \- (logarithm of the) gamma function
.sh synopsis
.nf
.b #include 
.pp
.bi "double gamma(double " x ");"
.bi "float gammaf(float " x ");"
.bi "long double gammal(long double " x ");"
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br gamma ():
.nf
    _xopen_source
        || /* since glibc 2.19: */ _default_source
        || /* glibc = 600 || (_xopen_source && _isoc99_source)
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified 1993-07-24 by rik faith 
.\" modified 1995-02-25 by jim van zandt 
.\" modified 1995-09-02 by jim van zandt 
.\" moved to man3, aeb, 950919
.\" modified 2001-09-22 by michael kerrisk 
.\" modified 2001-12-17, aeb
.\" modified 2004-10-31, aeb
.\" 2006-12-28, mtk:
.\"     added .ss headers to give some structure to this page; and a
.\"     small amount of reordering.
.\"     added a section on canonical and noncanonical mode.
.\"     enhanced the discussion of "raw" mode for cfmakeraw().
.\"     document cmspar.
.\"
.th termios 3 2021-08-27 "linux" "linux programmer's manual"
.sh name
termios, tcgetattr, tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow,
cfmakeraw, cfgetospeed, cfgetispeed, cfsetispeed, cfsetospeed, cfsetspeed \-
get and set terminal attributes, line control, get and set baud rate
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "int tcgetattr(int " fd ", struct termios *" termios_p );
.bi "int tcsetattr(int " fd ", int " optional_actions ,
.bi "              const struct termios *" termios_p );
.pp
.bi "int tcsendbreak(int " fd ", int " duration );
.bi "int tcdrain(int " fd );
.bi "int tcflush(int " fd ", int " queue_selector );
.bi "int tcflow(int " fd ", int " action );
.pp
.bi "void cfmakeraw(struct termios *" termios_p );
.pp
.bi "speed_t cfgetispeed(const struct termios *" termios_p );
.bi "speed_t cfgetospeed(const struct termios *" termios_p );
.pp
.bi "int cfsetispeed(struct termios *" termios_p ", speed_t " speed );
.bi "int cfsetospeed(struct termios *" termios_p ", speed_t " speed );
.bi "int cfsetspeed(struct termios *" termios_p ", speed_t " speed );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br cfsetspeed (),
.br cfmakeraw ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source
.fi
.sh description
the termios functions describe a general terminal interface that is
provided to control asynchronous communications ports.
.ss the termios structure
many of the functions described here have a \fitermios_p\fp argument
that is a pointer to a \fitermios\fp structure.
this structure contains at least the following members:
.pp
.in +4n
.ex
tcflag_t c_iflag;      /* input modes */
tcflag_t c_oflag;      /* output modes */
tcflag_t c_cflag;      /* control modes */
tcflag_t c_lflag;      /* local modes */
cc_t     c_cc[nccs];   /* special characters */
.ee
.in
.pp
the values that may be assigned to these fields are described below.
in the case of the first four bit-mask fields,
the definitions of some of the associated flags that may be set are
exposed only if a specific feature test macro (see
.br feature_test_macros (7))
is defined, as noted in brackets ("[]").
.pp
in the descriptions below, "not in posix" means that the
value is not specified in posix.1-2001,
and "xsi" means that the value is specified in posix.1-2001
as part of the xsi extension.
.pp
\fic_iflag\fp flag constants:
.tp
.b ignbrk
ignore break condition on input.
.tp
.b brkint
if \fbignbrk\fp is set, a break is ignored.
if it is not set
but \fbbrkint\fp is set, then a break causes the input and output
queues to be flushed, and if the terminal is the controlling
terminal of a foreground process group, it will cause a
\fbsigint\fp to be sent to this foreground process group.
when neither \fbignbrk\fp nor \fbbrkint\fp are set, a break
reads as a null byte (\(aq\e0\(aq), except when \fbparmrk\fp is set,
in which case it reads as the sequence \e377 \e0 \e0.
.tp
.b ignpar
ignore framing errors and parity errors.
.tp
.b parmrk
if this bit is set, input bytes with parity or framing errors are
marked when passed to the program.
this bit is meaningful only when
\fbinpck\fp is set and \fbignpar\fp is not set.
the way erroneous bytes are marked is with two preceding bytes,
\e377 and \e0.
thus, the program actually reads three bytes for one
erroneous byte received from the terminal.
if a valid byte has the value \e377,
and \fbistrip\fp (see below) is not set,
the program might confuse it with the prefix that marks a
parity error.
therefore, a valid byte \e377 is passed to the program as two
bytes, \e377 \e377, in this case.
.ip
if neither \fbignpar\fp nor \fbparmrk\fp
is set, read a character with a parity error or framing error
as \e0.
.tp
.b inpck
enable input parity checking.
.tp
.b istrip
strip off eighth bit.
.tp
.b inlcr
translate nl to cr on input.
.tp
.b igncr
ignore carriage return on input.
.tp
.b icrnl
translate carriage return to newline on input (unless \fbigncr\fp is set).
.tp
.b iuclc
(not in posix) map uppercase characters to lowercase on input.
.tp
.b ixon
enable xon/xoff flow control on output.
.tp
.b ixany
(xsi) typing any character will restart stopped output.
(the default is to allow just the start character to restart output.)
.tp
.b ixoff
enable xon/xoff flow control on input.
.tp
.b imaxbel
(not in posix) ring bell when input queue is full.
linux does not implement this bit, and acts as if it is always set.
.tp
.br iutf8 " (since linux 2.6.4)"
(not in posix) input is utf8;
this allows character-erase to be correctly performed in cooked mode.
.pp
.i c_oflag
flag constants:
.tp
.b opost
enable implementation-defined output processing.
.tp
.b olcuc
(not in posix) map lowercase characters to uppercase on output.
.tp
.b onlcr
(xsi) map nl to cr-nl on output.
.tp
.b ocrnl
map cr to nl on output.
.tp
.b onocr
don't output cr at column 0.
.tp
.b onlret
don't output cr.
.tp
.b ofill
send fill characters for a delay, rather than using a timed delay.
.tp
.b ofdel
fill character is ascii del (0177).
if unset, fill character is ascii nul (\(aq\e0\(aq).
(not implemented on linux.)
.tp
.b nldly
newline delay mask.
values are \fbnl0\fp and \fbnl1\fp.
[requires
.b _bsd_source
or
.b _svid_source
or
.br _xopen_source ]
.tp
.b crdly
carriage return delay mask.
values are \fbcr0\fp, \fbcr1\fp, \fbcr2\fp, or \fbcr3\fp.
[requires
.b _bsd_source
or
.b _svid_source
or
.br _xopen_source ]
.tp
.b tabdly
horizontal tab delay mask.
values are \fbtab0\fp, \fbtab1\fp, \fbtab2\fp, \fbtab3\fp (or \fbxtabs\fp,
but see the
.b bugs
section).
a value of tab3, that is, xtabs, expands tabs to spaces
(with tab stops every eight columns).
[requires
.b _bsd_source
or
.b _svid_source
or
.br _xopen_source ]
.tp
.b bsdly
backspace delay mask.
values are \fbbs0\fp or \fbbs1\fp.
(has never been implemented.)
[requires
.b _bsd_source
or
.b _svid_source
or
.br _xopen_source ]
.tp
.b vtdly
vertical tab delay mask.
values are \fbvt0\fp or \fbvt1\fp.
.tp
.b ffdly
form feed delay mask.
values are \fbff0\fp or \fbff1\fp.
[requires
.b _bsd_source
or
.b _svid_source
or
.br _xopen_source ]
.pp
\fic_cflag\fp flag constants:
.tp
.b cbaud
(not in posix) baud speed mask (4+1 bits).
[requires
.b _bsd_source
or
.br _svid_source ]
.tp
.b cbaudex
(not in posix) extra baud speed mask (1 bit), included in
.br cbaud .
[requires
.b _bsd_source
or
.br _svid_source ]
.ip
(posix says that the baud speed is stored in the
.i termios
structure without specifying where precisely, and provides
.br cfgetispeed ()
and
.br cfsetispeed ()
for getting at it.
some systems use bits selected by
.b cbaud
in
.ir c_cflag ,
other systems use separate fields, for example,
.i sg_ispeed
and
.ir sg_ospeed .)
.tp
.b csize
character size mask.
values are \fbcs5\fp, \fbcs6\fp, \fbcs7\fp, or \fbcs8\fp.
.tp
.b cstopb
set two stop bits, rather than one.
.tp
.b cread
enable receiver.
.tp
.b parenb
enable parity generation on output and parity checking for input.
.tp
.b parodd
if set, then parity for input and output is odd;
otherwise even parity is used.
.tp
.b hupcl
lower modem control lines after last process closes the device (hang up).
.tp
.b clocal
ignore modem control lines.
.tp
.b loblk
(not in posix) block output from a noncurrent shell layer.
for use by \fbshl\fp (shell layers).
(not implemented on linux.)
.tp
.b cibaud
(not in posix) mask for input speeds.
the values for the
.b cibaud
bits are
the same as the values for the
.b cbaud
bits, shifted left
.b ibshift
bits.
[requires
.b _bsd_source
or
.br _svid_source ]
(not implemented on linux.)
.tp
.b cmspar
(not in posix)
use "stick" (mark/space) parity (supported on certain serial
devices): if