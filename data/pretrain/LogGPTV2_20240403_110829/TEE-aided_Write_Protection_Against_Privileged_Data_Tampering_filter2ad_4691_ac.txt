have (multiple copies of) the Android source tree (tens of
GBs) which she compiles a couple of times a day. The
ﬁles changed by compilation are not necessarily those
she cannot afford to reproduce. Therefore, she may just
choose source ﬁles reﬂecting her work.
• Prioritized. For instance, the update frequency for an
important project report (e.g., 1–3MB) should be set
higher in the policy than the user’s favorite songs (e.g.,
MP3s, 300MB).
C. TEE placements
Based on our design goals, Inuksuk can be hypothetically
constructed around the following entities:
1) Host. The processor-centric system where software (in-
cluding user applications) runs and where data is gener-
ated/consumed. Benign and malicious operations cannot
be naturally distinguished.
2) Disk. The storage device where legitimate user data (from
user applications) is supposed to be securely stored.
No additional mechanism other than physical safety is
assumed.
3) TEE. There might be multiple TEEs. They can be
equipped on either the Host or the Disk, or both. The TEE
has the properties and purposes discussed in Section II. In
light of the Disk’s constraints, we further model all TEEs
for three types of functionalities: I) Policies. This applies
to general-purpose TEEs (as with that of the Host), where
the user/vendor can provision arbitrary storage rules,
e.g., write protection. II) Authentication. We consider
the most constrained application-speciﬁc TEEs on the
Disk to be able to authenticate commands from the Host
with a conﬁgured secret, e.g., a TLS certiﬁcate and/or a
password. III) Secure protocol. A secure communication
protocol between the Host and the Disk may be supported
(in addition to authentication), which ensures integrity and
conﬁdentiality, e.g., the untrusted OS cannot learn what
is being sent and if it tries to manipulate the data it will
be detected.
4) Interface. This is how the Disk is connected to the Host
physically, as exempliﬁed by SATA, USB and Ethernet.
We consider both secure and insecure interfaces.5 In a
threat model with no physical access, direct links with
endpoints inside the TEE can be treated as secure. Oth-
erwise, for example, Ethernet (WAN, where other nodes
are involved) or SATA relying on untrusted kernel drivers
is susceptible to interception. A secure interface cannot
provide message authenticity if it is not dedicated to
the TEE. For instance, outside the TEE (for concurrent
TEEs) or when the TEE is not active (for exclusive TEEs),
untrusted software on the Host can still send anything to
5A secure interface ensures data integrity and conﬁdentiality (but not
necessarily authenticity) in the discussion hereinafter.
5
the Disk, unless there is a way to block access (e.g., with
the TrustZone protection controller [10]) to the Interface
from untrusted software at all times.
The storage data ﬂow goes between the Host and the Disk
through the Interface. The TEE’s location can shift along
the data ﬂow across different entities. In addition to the
autonomous enforcement of predeﬁned policies (e.g., append-
only), certain administrative access to the Disk is also needed
for space management, i.e., there must be a convenient way
for the user to delete ﬁles or change the conﬁguration. In
the following, we consider a few possible constructions with
different TEE placements. We use the subscript to indicate
where the TEE resides, e.g., TEEDisk means a TEE is on the
Disk.
TEEDisk alone. If TEEDisk enforces the append-only and
history-preserving logic on its own, TEEHost is not necessary.
Figure 1-a depicts this construction. However, it lacks a trusted
user interface for the administrative access. This might be
solved by adding 1) a physical switch, to allow occasional full
access, or 2) a secondary dedicated interface, assuming there
exists a trusted host for performing administrative tasks. There-
fore, we do not consider this construction for our prototype.
TEEHost + secure Interface. In contrast to TEEDisk alone, if
there is only TEEHost enforcing the logic, regardless of whether
the Interface is secure or not, our goals still cannot be achieved.
For insecure Interface, malicious enitity can directly intercept
trafﬁc and corrupt data. For secure Interface, which might seem
sufﬁcient for channel integrity and secrecy, untrusted software
on the Host can also do harm at the data origin. When TEEHost
is not in control, other privileged code can access the secure
Interface and modify/delete the stored data. The root cause is
that the Disk has no TEE to authenticate TEEHost.
TEEHost + dedicated secure Interface. On top of the con-
struction above, if TEEHost comes with an I/O partitioning
mechanism (e.g.,
the
secure interface can be conﬁgured in a way that when an
exclusive TEEHost is not active or outside a concurrent TEEHost,
no software can access it (Figure 1-b). As an advantage,
this allows any storage device to be used as the Disk. Also,
with TEEHost, the administrative access can be provided to
the user. This construction may become feasible in the future
when ARM-based desktop/laptop computers can efﬁciently run
modern desktop OSes [45].
TEEHost + TEEDisk + insecure Interface. As TEEDisk is
usually not general-purpose (i.e., supporting arbitrary code to
be provisioned), we need TEEHost to be used in conjunction to
achieve our purpose. A minimum support from such TEEDisk
is the use of certain secret for encryption or access control
(e.g., SED and Kinetic storage), which can serve as the
basis for write protection (read-only). If TEEDisk supports a
secure communication protocol, e.g., TLS, a secure Interface
is unnecessary. In this case, as long as the shared secret (or its
public-key equivalent) is properly handled in TEEHost, a secure
channel is formed, equivalent to a secure Interface. TEEHost
enforces all the logic. Note that unprivileged TEEs (see Sec-
tion II) can be used here, since the requirement for a secure
Interface has been relaxed. See Figure 1-c for an illustration.
This corresponds to the construction of Pesos [33], as detailed
in Section VII. This construction is also missing a trusted
the TrustZone protection controller),
Fig. 1: Example constructions with varying TEE placements.
An Interface arrow not terminating inside TEEHost means the
TEE is unprivileged and relies on other software (e.g., the
OS) to perform I/O. Privileged TEEs (with the arrow inside)
only own Interface when active, hence the need for certain I/O
partitioning (e.g., TZPC) to block it to other software when the
TEE is not active, making Interface dedicated
UI for administrative access (forged input can be entered in
TEEHost thus deleting unintended ﬁles), as unprivileged TEE
only interacts with the user through the untrusted OS.
TEEHost + TEEDisk + secure Interface. Peripherals directly
connected to a PC with exclusive/privileged TEEHost is con-
sidered to have secure Interface. In this case, TEEDisk that
does not support a secure communication protocol is applicable
(e.g., Opal SED). TEEDisk authenticates TEEHost in cleartext;
this could be problematic if attackers gain physical access
or TEEHost is non-exclusive/unprivileged. Privileged TEEHost
provides a trusted UI for administrative access (forged UI
outside TEEHost cannot be authenticated by TEEDisk without
the secret). We choose this construction to implement Inuksuk;
see Figure 1-d.
D. Design choices
According to the discussion above, we expand on further
considerations and requirements on the chosen construction of
TEEHost + TEEDisk + secure Interface. Note that the design
choices are only based on available COTS devices for this
prototype. The high-level design is generalizable to other
TEEHost and TEEDisk (as shown in Section IV-C).
Host-side TEE. To satisfy secure Interface, TEEHost must be
privileged (Figure 1-d); otherwise, the OS may manipulate
the I/O trafﬁc. Also, our observation shows that if a TEE
is privileged, it is usually exclusive (i.e., not allowing other
software to run in parallel) unless there is hardware I/O parti-
tioning as with ARM TZPC, to avoid resource access conﬂict
or contention. Actually, as an advantage with privileged TEEs,
no other applications (including the OS) can have the chance
to even observe what is running inside, as anything else is
discarded/suspended, avoiding software side-channel attacks.
We use Intel TXT/AMD SVM as the host-side TEE for
Inuksuk. Therefore, our discussion hereinafter will refer to
TEEHost as TXT/SVM. The more recent Intel SGX does not
run privileged code for I/O access.6
6SGX has also faced several side-channel attacks due to its concurrent
nature, e.g., Foreshadow [11], Branch Shadowing [36], and cache attacks [20].
6
Host(a)SecureDiskInterfaceDiskTEEPoliciesHostDiskDiskTEEAuthentication+Secure protocolHostDiskHostTEEPoliciesHostTEEPolicies + Secure protocolHostDiskDiskTEEAuthenticationHostTEEPolicies(b)(c)(d)InsecureI/O partitioningProgrammable write protection. As the ideal TEEDisk (a
general-purpose on-disk TEE, Figure 1-a) is unavailable (as
of writing), and it also lacks a proper trusted UI on the Host
for administrative access, we resort to storage devices with an
application-speciﬁc TEE. TEEDisk needs to be able to commu-
nicate with TEEHost for the write protection (programmability).
We expose write access to the protected partition only inside
TEEHost. Some off-the-shelf secure USB drives offer write
protection [4]. However, it is either in the form of a physical
switch/button to be pressed by the user, or a key pad on the
USB device itself, where a password can be typed (like a
closed TEE inaccessible from outside).
The self-encrypting drive (SED, see Section II) satisﬁes
programmability, with one or more secrets for authentication
or media encryption. Also, SED has the advantage of
supporting ﬁne-grained protection ranges with separate
read/write permissions, which is important as we constantly
allow read access, and deny write access from the user OS.
Fine protection granularity also allows the protected partition
to coexist with the unprotected OS and other ﬁles in the
same drive, instead of requiring a dedicated disk. The only
disadvantage, as far as Inuksuk is concerned, is that SED does
not support secure communication protocols thus requiring
a secure Interface. The legacy ATA Security password can
also be considered device-enforced write protection (without
media encryption). However, it is a non-solution for Inuksuk,
because only one-way locked-to-unlocked transition is allowed
(SEC4:SEC5 [62, p. 13]), i.e., relocking requires power reset,
whereas Inuksuk needs the ability to switch back and forth.
Minimal TCB. Although a full-ﬂedged OS in TXT/SVM (e.g.,
tboot with Ubuntu) can be used to perform trusted operations,
it is preferable to keep a minimal trusted computing base
(TCB), for both auditability (e.g., avoiding numerous complex
components) and maintainability (e.g., avoiding measuring
large and varying ﬁles). Moreover,
is technically more
involving, because the trusted operations occur in the midst of
an active user OS execution (considering the time/effort needed
to save and restore various states for both OSes). Therefore,
we develop our own logic as a small-footprint, native program
in TXT/SVM with no external dependencies.
Separation of the protected partition from the original.
Technically, we can write ﬁle updates immediately on the
protected
unsolicited/frequent write
attempts, such as updates from the automatic save feature
in text editors (i.e., not initiated by the user clicking on the
“Save” button), will create too many versions on the protected
partition and make the system unusable due to frequent
switch between regular and trusted environments; note that,
TXT/SVM is exclusive, and writing ﬁle updates may also
take noticeable time. Therefore, we leave user-selected ﬁles
where they are, and make a copy onto the protected partition
on the SED. All subsequent updates happen to the original
ﬁles without write protection. The user can then decide when
to commit changes to the protected partition (no versioning
on the original partition), manually, or automatically at certain
intervals (e.g., every 8-12 hours).
File-system in TXT/SVM. For protected write operations,
we cannot simply pass the raw sector information (sector
number, offset, number of bytes and the buffer) to TXT/SVM
partition. However,
it
as we perform ﬁle-based operations, and the user also must
select ﬁles (not sectors) for deletion. Therefore, the TXT/SVM
program must be equipped with a ﬁle system.
Data mobility and recovery. The SED can also contain an
unprotected partition where the OS resides, because of the ﬁne
granularity of protection ranges, while sometimes users may
treat it as a stand-alone data drive. In either case, when data
recovery is needed (e.g., the OS is corrupted or compromised),
the user can simply reboot from different media on the same
machine or mount the SED on a different machine. The data
will be readily accessible as read-only, hence aiding data
mobility, thanks to the separation of read and write accesses.
In case the user needs to update the ﬁles, a rescue USB, where
all intact Inuksuk binaries are stored as well as a portable OS
can be used to boot the same computer (where Inuksuk was
provisioned). After booting with the rescue drive, the user can
invoke the same updater in TXT/SVM for regular ﬁle access
or deprovisioning (to remove the write protection).
E. System components and workﬂow
Refer to Figure 2 for an overview of our design. The system
consists of the following components at a higher level (further
technical details are discussed in Section V):
• Trusted updater. This is the core component of Inuksuk,
and runs inside TXT/SVM. It is responsible for copying
ﬁles from the original partition to the protected partition (in
SED write access mode) as new versions, ﬁle listing (in a
mini ﬁle browser), and showing ﬁle meta data to the user.
Files in the original partition are selected to commit based
on their last-modiﬁed timestamp.
• TPM. In conjunction with TXT/SVM, TPM makes sure
that the secret (the SED password) is securely stored in
its NVRAM storage, and can be unsealed only if the
unmodiﬁed trusted updater is executed (as measured in
TPM’s platform conﬁguration registers).
• Secure drive. An SED drive hosts the protected partition.
Without the high-entropy key/password, its protection (i.e.,
write protection in our case) cannot be bypassed. Note that
even with physical access to the drive, reinitializing the
drive with the PSID (physical secure ID) printed on it will
have all data lost.
• OS drivers. A few OS-dependent modules are needed
to bridge the user, OS and the trusted updater, such as
preparing the TXT/SVM environment. These modules do
not have to be trusted after initial deployment, as the worst
case is a DoS attack; see also Section VI, item (b).
Update policies. The update policies reﬂect user preferences
and control how the trusted updater behaves (as primitive