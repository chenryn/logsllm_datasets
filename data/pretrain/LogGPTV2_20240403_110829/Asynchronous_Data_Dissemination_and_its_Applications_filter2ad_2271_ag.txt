### Communication Cost Reduction

By employing a trusted setup and the polynomial commitment scheme from [33], the total communication cost can be reduced to \(O(\kappa n^2)\) from \(O(\kappa n^2 \log n)\). During the sharing phase, the existing schemes provide secrecy only against an adversary that corrupts up to \(t\) nodes. In contrast, our dual-threshold Asynchronous Conditional Secret Sharing (ACSS) ensures secrecy against an adversary that corrupts up to \(\ell\) nodes.

### Asynchronous Distributed Key Generation (ADKG)

There are relatively few works on asynchronous DKG [2, 18, 29, 34]. The ADKG construction by Canetti and Rabin [18] uses \(n^2\) Asynchronous Verifiable Secret Sharing (AVSS) and is thus inefficient. Kokoris et al. [34] propose an ADKG scheme using \(n\) dual-threshold ACSS with a reconstruction threshold of \(2t + 1\) and an asynchronous common subset protocol, achieving a total communication cost of \(O(\kappa n^4)\).

Recently, Abraham et al. [2] introduced an ADKG protocol with a communication cost of \(O(\kappa n^3 \log n)\). The factor of \(\log n\) in their ADKG construction arises from the use of the best-known Reliable Broadcast (RBC) protocol by Cachin and Tessaro [16]. By substituting this RBC with our new protocol, we can reduce the communication cost to \(O(\kappa n^3)\). However, a limitation of the Abraham et al. ADKG [2] is that the secret key is a group element rather than a field element, making it incompatible with off-the-shelf threshold signature schemes such as [10]. Since we only replace the RBC component, this limitation persists.

### Concurrent Work

Concurrently and independently, Gao et al. [29] developed a new AVSS scheme with a communication cost of \(O(\kappa n^2)\). They then used this improved AVSS scheme along with a novel reasonably-fair common coin protocol to design Asynchronous Byzantine Agreement (ABA) [35] and ADKG protocols, both with an expected communication cost of \(O(\kappa n^3)\). Their work also inherits the aforementioned limitation from Abraham et al.'s ADKG [2]. Additionally, Gao et al. [29] observed that the asynchronous Validated Byzantine Agreement (VBA) protocol in Abraham et al. [2] implicitly provides an ABA protocol with a communication cost of \(O(\kappa n^3 \log n)\) and no trusted setup. This means our RBC protocol can also improve the communication cost of VBA and ABA to \(O(\kappa n^3)\).

### Discussion

#### Concrete Communication Costs of ADD and RBC Protocols

While we primarily discuss asymptotic costs, practical considerations require minimizing hidden constants. Our Asynchronous Data Dissemination (ADD) with \(n = 3t + 1\) has a concrete communication cost of \(B_{\text{ADD}} = 6n|M| + 2n^2\). The factor of 6 is due to the increased message size from Reed-Solomon encoding and the two rounds of communication in ADD. Substituting \(B_{\text{ADD}}\) into our RBC protocol for long messages results in a communication cost of \(n|M| + 2\kappa n^2 + B_{\text{ADD}}\). Here, \(n|M|\) accounts for the broadcaster's communication cost of sending \(M\) to all nodes, and \(2\kappa n^2\) is the cost of Brachaâ€™s RBC on the hash of \(M\). Similarly, our four-round RBC incurs a communication cost of \(7n|M| + 2\kappa n^2 + 2n^2\).

#### Limitations of ADD

One limitation of using ADD in our RBC is the higher computation costs due to encoding and decoding. In the presence of malicious nodes, each honest node may need to attempt decoding up to \(t\) times. In contrast, the RBC protocol by Cachin and Tessaro [15] requires each node to run the decoding algorithm only once.

### Conclusion

In this paper, we introduced the problem of Data Dissemination, which aims to distribute a data blob \(M\) from a subset of honest nodes to all honest nodes, even in the presence of malicious nodes. We presented an Asynchronous Data Dissemination (ADD) protocol for \(n\) parties with a communication cost of \(O(n|M| + n^2)\). We then used our ADD protocol to improve the communication cost or trust assumptions in RBC for long messages, AVSS, ACSS, dual-threshold ACSS, and ADKG. We believe ADD can be useful in other applications, such as improving the communication cost of recent randomness beacon protocols for both synchronous [8] and partially synchronous networks [23]. Generally, ADD will be beneficial in protocols involving the distribution of long common messages, including blocks in blockchain protocols, polynomial commitments, encrypted shares, and NIZK proofs.

### Acknowledgments

The authors would like to thank Vinith Krishnan, Andrew Miller, and Tom Yurek for their valuable discussions related to this paper.

### References

[References remain unchanged]

---

This revised version is more coherent and professional, with clearer explanations and a more structured flow.