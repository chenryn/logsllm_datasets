ously from the time the system begins operation to the time
the system is shut down. This process can be in either func-
tional modes defined by members of S or modes specific to
reconfiguration. We assume that the application components
that  implement  the  elements  of  S  possess  the  fail-stop
property [11].  This  might  be  ensured  using  safe  program-
ming [1] or some form of protection shell [15].
We give overall control of the reconfiguration process to
the  reconfiguration  mechanism.  This  has  two  major  bene-
fits. First, while the reconfiguration mechanism will control
the application, we can design it so that it is largely indepen-
dent of the application; this greatly increases its potential for
reuse.  If  it  can  be  reused,  the  cost  associated  with  formal
verification, for instance, can be amortized over a number of
systems.  Second,  much  of  the  application-dependent  com-
plexity can be located within the application itself, leaving
the  reconfiguration  mechanism  as  a  fairly  straightforward
structure  that  can  be  reasoned  about  with  a  high  degree  of
confidence.  Deferring  complexity  to  the  application  does
not  eliminate  the  complexity,  but  it  does  allow  it  to  be
encapsulated  within  the  design  components  of  the  applica-
tion  (Sections  5.2  and  6  present  a  method  for  doing  this).
Also,  in  a  system  that  tolerates  faults  through  reconfigura-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
tion, the reconfiguration mechanism must be more depend-
able than the application itself.
If we are to  refine the properties given in Section 4, we
first  need  building  blocks  for  the  statement  of  the  refined
properties.  We  define  the  following  more  specific  events,
actions, and predicates (also shown in Figure 2):
App
RM
↑RM
↓RM
↓Si
Halt
↑Halt
Action representing operation of the application. 
Operates continuously throughout R.
Action representing operation of the reconfigura-
tion mechanism.
Event that App signals fault at top level
≡ ↓Trans (below)
Event that a reconfiguration signal is sent to Si
Action of App causing Si to meet Post
≡ ↓Si
Post
Predicate that must be true of App in order for 
reconfiguration to begin. This condition protects 
data, and ensures that the software is fail-stop.
Choose Action of RM determining member of S for Sj
Pretransj Predicate that must be true of App before passing 
control back to App
Prepj Action of App causing Pretransj to be met
Trans Action of App effecting functional transition
↑Trans Event that RM instructs App to transition to Sj
↓Trans Event that App acknowledges to RM that transition 
is complete
Trainj Action of App initializing Sj or training its data
↑Trainj
↓Trainj
↑Sj
≡ ↓Trans
≡ ↑Sj
Sj has now initialized or trained all data and is 
operational.
We assume for  clarity that all  actions associated with  Si
have its occurrence number (a); all actions associated with
Sj have its occurrence number (b); and all other actions have
the  occurrence  number  of  R  (c).  This  is  a  formalization  of
the informal idea that the actions are those that occur during
a particular reconfiguration.
App
RM
Halt
Choose
Prepj
Trans
Trainj
↓Si
↑RM
↑Trans
↑Trainj
↑Sj
Time
Figure 2. Actions and Events in Application and 
Reconfiguration Mechanism
Our temporal structure assumes that additional reconfigu-
ration  signals  are  not  generated  during  the  reconfiguration
process. This is reasonable since no reconfiguration signals
can be generated by the application during reconfiguration,
and if an external reconfiguration signal is generated during
reconfiguration,  that  signal  can  be  buffered  until  control  is
passed back to the application during the training period for
Sj. If time does not permit this, the reconfiguration mecha-
nism  must  have  a  signal  handler  that  will  restart  it  during
reconfiguration.  Because 
the  application  postcondition
would  already  be  met,  assuring  reconfiguration  from  the
reconfiguration  mechanism  is  a  simpler  case  than  assuring
reconfiguration  from  the  application;  thus,  we  do  not
address its details here.
5.2 Detailed Application Structure
The  structure  we  use  for  the  application  to  enable  its
reconfiguration assurance properties to be met is motivated
by  the  temporal  model  presented  above  and  the  need  to
assure the properties presented in Section 2. We define prop-
erties that must be provided by the application in this section
so that we can refer to them when discussing the reconfigu-
ration  mechanism  and  when  showing  that  the  application
and  the  reconfiguration  mechanism  together  meet  the  gen-
eral reconfiguration properties.
The application is built of a set of modules, each of which
has  an  interface  designed  to  support  reconfiguration  assur-
ance.  The  modules  are  design  components  that  follow
decomposition  rules  such  as  would  be  used  in  building  an
implementation  of  a  nonreconfigurable  system.  Properties
of  the  application  are  decomposed  into  properties  of  the
modules,  so  that  conjoining  module  properties  (e.g.,  post-
conditions) gives the corresponding application property.
Each  interface  function  will  take  a  module-specific  ser-
vice  level  parameter.  The  service  level  parameter  instructs
the interface to provide a specific level of function, ranging
from  basic  safe  service  to  more  elaborate  calculations  or
operations for full function. It is the composition of different
module  service  levels  that  allows  the  system  to  operate
under different specifications.
Several  options  exist  for  effecting  module  reconfigura-
tion. We choose to make module service level independent
of the operational specification and to pass the service level
parameter  as  part  of  an  interface  call.  This  strategy  allows
modules to be constructed and analyzed independently, and
gives more flexibility in that different service levels can be
used  within  the  same  operational  specification,  where
appropriate. Also, the designer of the calling module in this
case  will  know  exactly  which  functional  capability  he  is
calling because the request for a specific functional capabil-
ity will be passed to the function directly. Finally, the recon-
figuration  time  for  the  functional  aspects  of  the  system
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
vanishes  since  the  functional  configuration  is  established
dynamically at the time of a call.
with  the  module  postcondition  through  methods  such  as
forward or backward error recovery. 
Each  module’s  interface  might  include  checks  on  safety
properties whose violation will trigger reconfiguration (sim-
ilar  to  the  structure  of  a  safety  kernel  [15])  or  some  other
reconfiguration triggering mechanism, but this is not neces-
sary. We model our requirements for the case where signals
can be generated internally since an external interrupt can be
transferred through this mechanism as well.
6. Architecture Capabilities and Properties
The  full  formal  characterization  of  all  the  design-level
properties that must be shown of a specification in order to
be  sure  it  meets  the  required  high-level  reconfiguration
properties is both complex and lengthy, as well as somewhat
specific to the formalism used. Here, we state rigorously but
informally  the  necessary  design-level  properties  that  must
be  shown,  including  their  relationship  to  the  general  RTL
elements defined above where appropriate. We use this mix
of  informal  and  formal  characteristics  to  argue  rigorously
that these properties imply those from Section 4. A system
developer can then characterize these properties in his par-
ticular  formalism  in  order  to  show  them  for  the  formal
expression of the application's function.
All of the following capabilities and properties are predi-
cated on a reconfiguration trigger, i.e., ∃ t: time such that t =
@(↓Si, a). It is often simple to show a property without the
condition but sometimes impossible since many events will
not  happen  without  the  trigger.  We  leave  this  condition  as
implicit for clarity, but take advantage of it when needed.
6.1 Module Capabilities
Each module interface must provide certain capabilities:
• An interface to the set of functions contained within the 
module.   A  module  can  be  accessed  only  through  the
functions in its interface.  Those functions,  however, can
represent multiple service levels. 
• A set of possible values for the service level parameter.   
These values define the service sets for the module.
• A set of persistent data structures.   This 
the  data
which  is  relevant  to  preconditions,  postconditions,  and
invariants.  If  it  is  empty,  preconditions,  postconditions,
and invariants are defined to be true.
is 
• A module postcondition.   This is a basic coherency con-
dition  representing  the  minimum  state  requirement  for
the application to continue some form of operation.
• A mechanism through which reconfiguration signals are 
handled.   This mechanism will effect internal state resto-
ration since the state might be inconsistent when a recon-
figuration  is  signaled.  It  will  leave  the  state  consistent
• A mechanism through which reconfiguration signals are 
propagated to calling functions.   Each 
func-
tion has as its range the union of the natural range of the
function  together  with  a  signal  value  representing  a
reconfiguration request.
interface 
• A set of module transition conditions.   Each  member  of
this set is a predicate that must be met before the module
can begin training of the data associated with a member
of S.
• A set of module preconditions.   Each  member  of  this  set
is a predicate that must be met in order for the module to
have begun operation under an associated member of S.
• A mechanism through which a module’s service transition 
condition is guaranteed to be met.   If  the  transition  con-
dition of a module for its use under Sj is not the same as
the postcondition for the module, a separate prep function
to  be  called  after  Sj  has  been  determined  must  be  pro-
vided.  If  the  transition  condition  can  vary  across  mem-
bers of S, the function must take a parameter specifying
the appropriate version of the function.
• Timing guarantees on interface functions related to 
reconfiguration.   These timing guarantees will be used to
show  overall  reconfiguration  timing  guarantees.  For  the
purely functional aspects of the system they will not pose
an additional burden since they would be required to cal-
culate the time requirements of an operation regardless of
whether the system were reconfigurable.
• A set of assured reconfiguration invariants.   These  show
little  difference  from  standard  application  invariants
except that they are likely to affect solely the module data
that is externally visible. The set of invariants, in order of
strictness,  includes:  (1)  those  on  operation  within  each
member of S, which must be satisfied until the module is
sent  a  reconfiguration  order  to  satisfy  its  postcondition;
(2) those on transitions out of each member of S, which
must  be  satisfied  until the  module  is  sent  a  reconfigura-
tion order specifying Sj and ordering the module to meet
its precondition; and (3) those on transition between any
two  possible  successive  members  of  S,  which  must  be
enforced from the time the module is instructed to meet
its  precondition  to  the  time  the  next  functional  demand
from the application arrives.
The  properties  of  the  modules  that  must  be  shown  using
these capabilities are set out in Table 1.
6.2 Application Capabilities
The  modules  that  compose  the  system  are  contained
within a  separate top-level structure that we refer to  as  the
monitoring layer. The monitoring layer includes:
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
M1
M2
M3
M4
M5
M6
M7
If none of a module’s functions is currently executing, that module’s postcondition is met.
Each module has a function halt that, when called, will cause its postcondition to be met.