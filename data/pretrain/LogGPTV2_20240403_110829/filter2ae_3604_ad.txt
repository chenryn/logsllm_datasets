如果经过了上一部分，到这部分应该反而很轻松，因为满眼都是老演员，这部分就是遍历模块  
如果看的眼花缭乱，那是因为多了很多局部变量，给他去掉再来看：
    mov eax,dword ptr fs:[30]
    mov eax,dword ptr ds:[eax+C]
    mov eax,dword ptr ds:[eax+14]
    cmp eax,0
获得了`_PEB_LDR_DATA`结构体
    //获取_PEB_LDR_DATA
    02477F79  | 8B55 EC           | mov edx,dword ptr ss:[ebp-14]      |
        //获取_LDR_DATA_TABLE_ENTRY中的BaseDllName的buffer
    02477F7C  | 8B42 28           | mov eax,dword ptr ds:[edx+28]      | 
    02477F7F  | 8945 DC           | mov dword ptr ss:[ebp-24],eax      |
        //获取_LDR_DATA_TABLE_ENTRY中的BaseDllName的length
    02477F82  | 8B4D EC           | mov ecx,dword ptr ss:[ebp-14]      |
    02477F85  | 66:8B51 24        | mov dx,word ptr ds:[ecx+24]        |
    02477F89  | 66:8955 D8        | mov word ptr ss:[ebp-28],dx        |
        //至此：模块名称的地址--> [ebp-24] 名称长度--> [ebp-28]
        //下面跟之前计算模块名称哈希的方式一样，循环右移，求和
    02477F8D  | C745 FC 00000000  | mov dword ptr ss:[ebp-4],0         |
    02477F94  | 8B45 FC           | mov eax,dword ptr ss:[ebp-4]       |
        //[ebp-4] --> 存放累加的和 先循环右移
    02477F97  | C1C8 0D           | ror eax,D                          | 
    02477F9A  | 8945 FC           | mov dword ptr ss:[ebp-4],eax       |
        //取模块名称的一个一个字母
    02477F9D  | 8B4D DC           | mov ecx,dword ptr ss:[ebp-24]      |
    02477FA0  | 0FB611            | movzx edx,byte ptr ds:[ecx]        |
        //不小于61，减0x20，然后累加到[ebp-4]
    02477FA3  | 83FA 61           | cmp edx,61                         | 
    02477FA6  | 7C 12             | jl 2477FBA                         |
    02477FA8  | 8B45 DC           | mov eax,dword ptr ss:[ebp-24]      |
    02477FAB  | 0FB608            | movzx ecx,byte ptr ds:[eax]        | 
    02477FAE  | 8B55 FC           | mov edx,dword ptr ss:[ebp-4]       |
        //这里注意，都是用lea指令累加
    02477FB1  | 8D440A E0         | lea eax,dword ptr ds:[edx+ecx-20]  | 
    02477FB5  | 8945 FC           | mov dword ptr ss:[ebp-4],eax       |
    02477FB8  | EB 0C             | jmp 2477FC6                        |
        //小于0x61，直接累加到[ebp-4]
    02477FBA  | 8B4D DC           | mov ecx,dword ptr ss:[ebp-24]      |
    02477FBD  | 0FB611            | movzx edx,byte ptr ds:[ecx]        |
    02477FC0  | 0355 FC           | add edx,dword ptr ss:[ebp-4]       |
    02477FC3  | 8955 FC           | mov dword ptr ss:[ebp-4],edx       |
        //名称地址+1
    02477FC6  | 8B45 DC           | mov eax,dword ptr ss:[ebp-24]      |
    02477FC9  | 83C0 01           | add eax,1                          | 
    02477FCC  | 8945 DC           | mov dword ptr ss:[ebp-24],eax      |
        //名称长度-1
    02477FCF  | 66:8B4D D8        | mov cx,word ptr ss:[ebp-28]        |
    02477FD3  | 66:83E9 01        | sub cx,1                           |
    02477FD7  | 66:894D D8        | mov word ptr ss:[ebp-28],cx        |
        //判断长度是否为0
    02477FDB  | 0FB755 D8         | movzx edx,word ptr ss:[ebp-28]     |
    02477FDF  | 85D2              | test edx,edx                       |
    02477FE1  | 75 B1             | jne 2477F94                        |
        //跟模块hash比较
    02477FE3  | 817D FC 5BBC4A6A  | cmp dword ptr ss:[ebp-4],6A4ABC5B  |
通过以上内容可知，只需要一个模块的哈希，这个hash对应的模块名是Kernel32.dll  
为了获取api地址，下一步一定就是开始遍历模块导出表了
    //获取模块基址 Dllbase --> [ebp-18]
    02477FFB  | 8B55 EC           | mov edx,dword ptr ss:[ebp-14]      |
    02477FFE  | 8B42 10           | mov eax,dword ptr ds:[edx+10]      |
    02478001  | 8945 E8           | mov dword ptr ss:[ebp-18],eax      | 
        //获取导出表地址RVA --> [ebp-c]
    02478004  | 8B4D E8           | mov ecx,dword ptr ss:[ebp-18]      | 
    02478007  | 8B55 E8           | mov edx,dword ptr ss:[ebp-18]      | 
    0247800A  | 0351 3C           | add edx,dword ptr ds:[ecx+3C]      |
    0247800D  | 8955 E0           | mov dword ptr ss:[ebp-20],edx      | 
    02478010  | 8B45 E0           | mov eax,dword ptr ss:[ebp-20]      | 
    02478013  | 83C0 78           | add eax,78                         |
    02478016  | 8945 F4           | mov dword ptr ss:[ebp-C],eax       |
        //获取导出表的描述符VA --> [ebp-20]
    02478019  | 8B4D F4           | mov ecx,dword ptr ss:[ebp-C]       |
    0247801C  | 8B55 E8           | mov edx,dword ptr ss:[ebp-18]      | 
    0247801F  | 0311              | add edx,dword ptr ds:[ecx]         |
    02478021  | 8955 E0           | mov dword ptr ss:[ebp-20],edx      | 
        //获取导出名称表VA --> [ebp-c]
    02478024  | 8B45 E0           | mov eax,dword ptr ss:[ebp-20]      | 
    02478027  | 8B4D E8           | mov ecx,dword ptr ss:[ebp-18]      | 
    0247802A  | 0348 20           | add ecx,dword ptr ds:[eax+20]      |
    0247802D  | 894D F4           | mov dword ptr ss:[ebp-C],ecx       |
        //获取导出序号表VA --> [ebp-1c]
    02478030  | 8B55 E0           | mov edx,dword ptr ss:[ebp-20]      | 
    02478033  | 8B45 E8           | mov eax,dword ptr ss:[ebp-18]      | 
    02478036  | 0342 24           | add eax,dword ptr ds:[edx+24]      |
    02478039  | 8945 E4           | mov dword ptr ss:[ebp-1C],eax      |
    //设定结束标志，可见有6个api需要找到-->[ebp-28]
    0247803C  | B9 06000000       | mov ecx,6                          |
    02478041  | 66:894D D8        | mov word ptr ss:[ebp-28],cx        |
    02478045  | 0FB755 D8         | movzx edx,word ptr ss:[ebp-28]     |
    02478049  | 85D2              | test edx,edx                       |
    0247804B  | 0F8E 4B010000     | jle 247819C                        |
        //取出函数名称的地址 -->[ebp-38]
    02478051  | 8B45 F4           | mov eax,dword ptr ss:[ebp-C]       |
    02478054  | 8B4D E8           | mov ecx,dword ptr ss:[ebp-18]      |
    02478057  | 0308              | add ecx,dword ptr ds:[eax]         |
    02478059  | 894D C8           | mov dword ptr ss:[ebp-38],ecx      |
        //设定累加的值--> [ebp-34] 循环右移0xd
    0247805C  | C745 CC 00000000  | mov dword ptr ss:[ebp-34],0        |
    02478063  | 8B55 CC           | mov edx,dword ptr ss:[ebp-34]      |
    02478066  | C1CA 0D           | ror edx,D                          |
    02478069  | 8955 CC           | mov dword ptr ss:[ebp-34],edx      |
        //取函数名称的一个字符累加
    0247806C  | 8B45 C8           | mov eax,dword ptr ss:[ebp-38]      |
    0247806F  | 0FBE08            | movsx ecx,byte ptr ds:[eax]        |
    02478072  | 034D CC           | add ecx,dword ptr ss:[ebp-34]      |
    02478075  | 894D CC           | mov dword ptr ss:[ebp-34],ecx      |
        //函数名称的地址后移1个字节
    02478078  | 8B55 C8           | mov edx,dword ptr ss:[ebp-38]      |
    0247807B  | 83C2 01           | add edx,1                          |
    0247807E  | 8955 C8           | mov dword ptr ss:[ebp-38],edx      |
        //判断后移后的字节是否为0，即字符串截止位置
    02478081  | 8B45 C8           | mov eax,dword ptr ss:[ebp-38]      |
    02478084  | 0FBE08            | movsx ecx,byte ptr ds:[eax]        |
    02478087  | 85C9              | test ecx,ecx                       |
    02478089  | 75 D8             | jne 2478063                        |
后面就是分别跟不同的特征码进行比较，由上文了解，共计六个函数，所以就有六个特征码进行比较，分别对应的函数如下：
    //ecx=
    cmp dword ptr ss:[ebp-10],EC0E4E8E
    je 24780CB
    //ecx=
    cmp dword ptr ss:[ebp-10],7C0DFCAA
    je 24780CB
    //ecx=
    cmp dword ptr ss:[ebp-10],91AFCA54
    je 24780CB
    //ecx=
    cmp dword ptr ss:[ebp-10],7946C61B
    je 24780CB
    //ecx=
    cmp dword ptr ss:[ebp-10],753A4FC
    je 24780CB
    //ecx=
    cmp dword ptr ss:[ebp-10],D3324904
### 2.4验证函数和分配内存
接下来就进入下一个call了，这个call传入了保存那六个api的其实地址。  
然后依次，检查这几个位置是否是空的，也就是检查这几个函数的地址是否顺利得到  
在进入下一个call前，做了一些准备工作，如图，获取pe文件的起始位置，以及NT头的位置  
其中，这一步的目的是判断，文件头成员，文件属性的最高位是否为1  
然后传入四个参数，进入call中
    //参数1,0x40
    02497D71  | 8B4D D0           | mov ecx,dword ptr ss:[ebp-30]   |
    02497D74  | 51                | push ecx                        |
        //参数2，pe文件基址
    02497D75  | 8B55 AC           | mov edx,dword ptr ss:[ebp-54]   |
    02497D78  | 52                | push edx                        |
        //参数3，nt头
    02497D79  | 8B45 CC           | mov eax,dword ptr ss:[ebp-34]   | [ebp-34]:"PE"
    02497D7C  | 50                | push eax                        | eax:"PE"
        //参数4，ecx=基址
    02497D7D  | 8D4D D4           | lea ecx,dword ptr ss:[ebp-2C]   |
    02497D80  | 51                | push ecx                        |
    02497D81  | E8 880A0000       | call 249880E                    |
进入call之后，经过了一些无关紧要的判断（其实重要，但是对于了解整体的执行脉络没意义）  
第一次调用api，VirtualAlloc() 分配内存
    //倒数第一个参数0x40
    023C88D1  | 52                | push edx                        |
        //倒数第二个参数0x3000
    023C88D2  | 68 00300000       | push 3000                       |
        //倒数第三个参数 0x3e000
    023C88D7  | 8B45 0C           | mov eax,dword ptr ss:[ebp+C]    | [ebp+C]:"PE"
    023C88DA  | 8B48 50           | mov ecx,dword ptr ds:[eax+50]   |
    023C88DD  | 51                | push ecx                        |
        //倒数第四个参数 0
    023C88DE  | 6A 00             | push 0                          |
    023C88E0  | 8B55 08           | mov edx,dword ptr ss:[ebp+8]    |
    023C88E3  | 8B42 10           | mov eax,dword ptr ds:[edx+10]   | eax:"PE"
    023C88E6  | FFD0              | call eax                        |;
    //代码类似于如下
    VirtualAlloc(NULL, 0x3e000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)
### 2.5清空内存，复制内存
然后返回，先做准备工作然后进入下一个call  
准备工作就是清零，把al里的值放置到edi的位置，每次ecx递减，直至为0  