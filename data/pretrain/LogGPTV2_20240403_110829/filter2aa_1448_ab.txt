Levenshtein 
['pushal', 'mov', 'lea', 'push', 'jmp', 'nop', 'mov', 'inc', 'mov', 'inc’] 
['push', 'mov', 'add', 'push', 'mov', 'call', 'mov', 'mov', 'call', 'mov'] 
How many things have to change to make the bottom into the top. 
[yes no yes no yes yes no yes yes yes]  
yes = 7 
Distance = 7 
But… 
  Code is executed in order 
  There might be branches 
  Shouldn’t the ASM mnemonics to the ‘left’ be worth more 
than the ones on the ‘right’ 
  Where’s the cutoff 
  How many instructions should we care about 
  What’s the size of the stub 
Enter our superhero 
(Tapered Levenshtein) 
Tapered levenshtein 
Position dependent, left edits have a higher weight than right edits 
['pushal', 'mov', 'lea', 'push', 'jmp', 'nop', 'mov', 'inc', 'mov', 'inc’ 
['push', 'mov', 'add', 'push', 'mov', 'call', 'mov', 'mov', 'call', 'mov’] 
1 - (position/len(set)) 
1, 0, .8, 0, .6, .5, 0, .3, .2, .1  
3.5 (vs. 7 on the non-tapered version) 
Now we’re ready 
to science 
•  PE files 
•  MajorLinkerVersion 
•  MinorLinkerVersion 
•  Assembly mnemonics 
•  Fancy algorithms 
Workflow 
1. 
Gather samples 
2. 
Static analysis 
1. 
PEiD 
2. 
Disassemble 
3. 
Header features 
3. 
Cluster 
4. 
Closeness according to distance metric (> 90% similar)  
1. 
Use banded minhash for  Markus Oberhumer, Laszlo Molnar & John Reiser:UPX 
3.02:UPX v3.0 (EXE_LZMA) -> Markus Oberhumer & Laszlo Molnar & John Reiser 
3453 
UPX 2.90 [LZMA] -> Markus Oberhumer, Laszlo Molnar & John Reiser 
1626 
UPX v0.89.6 - v1.02 / v1.05 -v1.24 -> Markus & Laszlo [overlay] 
1121 
None 
506 
UPX v0.89.6 - v1.02 / v1.05 -v1.22 (Delphi) stub 
297 
Group Label 
Count 
2 
3564 
1 
1694 
0 
821 
25 
305 
24 
297 
Solution recap 
  Easy to generate signatures 
  Python script with minimal dependencies 
  It involves Math, who doesn’t love Math? 
  Cross platform. 
  Python works everywhere, right? 
  Easy to understand…ish 
  It Works! 
Future work 
  The int3s are a side effect of the compiler adding bytes 
between functions or keeping aligned addresses (
http://hooked-on-mnemonics.blogspot.com/2013/08/
exploring-functions-with-undefinderpy.html) 
Questions 
I’m done 
References 
  Capstone Engine 
PEFile 
  Tapered Levenshtein 
ZeuS dataset 
  APT1 dataset