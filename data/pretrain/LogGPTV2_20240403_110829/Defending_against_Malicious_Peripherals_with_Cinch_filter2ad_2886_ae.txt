### Key Presses and Exploit Prevention

Cinch effectively prevents key presses from triggering a bug in the modified USB HID driver. The remaining four exploits are polymorphic, thus evading detection by signature and compliance checks. Preliminary results indicate that Cinch can prevent several exploits, primarily those acting as invalid USB devices, without prior configuration. Additional exploits can be prevented after deriving specific signatures. For the remaining exploits, more intrusive methods such as sandboxing (discussed in §5.3) may be necessary.

### Tradeoff Between Security and Availability

To develop more aggressive signatures for preventing polymorphic attacks, regular expressions could be used. However, this approach risks disabling benign devices. To ensure our signatures do not cause false positives, we established a representative set of benign devices, including a USB flash drive, printer, phone, SSD, keyboard, and mouse. After each phase of the experiment, we verified that these devices continued to function correctly.

One failure was identified: the signatures for the VFAT exploit prevented the blue machine from communicating with any storage device using a VFAT filesystem. We removed the problematic signature and recorded this test as a failure, as such a signature would not be deployable for most users.

### Cinch’s Flexibility and Extensibility

Cinch can be extended in two ways:
1. **New Signatures and Configurations:** Enhancing existing policies (§5) through new signatures and configurations.
2. **New Policies:** Adding new policies to introduce additional functionality.

#### Deriving New Signatures

Our approach to deriving signatures for a given attack involves logging malicious traces and replaying them in a controlled debugging environment. This allows us to analyze the configuration and the attack. We then derive candidate signatures, typically 10-15 lines of JSON. The time required to derive a signature for the exploits in Section 7.3 ranged from 5 to 30 minutes, depending on the amount of data sent by the exploit and the complexity of the targeted subsystem.

#### Creating New Policies

Adding a new policy to Cinch requires implementing an instance of a Rust trait (analogous to a Java interface or a C++ abstract class). This trait is defined in the Gateway library (§6.2) and processes USB transfers. The new policy must also be added to Cinch’s configuration file. Based on this configuration, Cinch’s module subsystem automatically dispatches USB transfers to configured chains (§6.2). For reference, Cinch’s largest policy, compliance, is 2500 SLoC, while the others average around 180 SLoC.

### Performance Costs of Cinch

To understand the performance impact of using Cinch, we conducted two microbenchmarks: one for latency and one for throughput. The blue machine's OS was Debian Jessie (Linux 4.2.0).

#### Latency

To quantify the delay introduced by Cinch, we connected the blue machine and another machine on a local network using an Ethernet-over-USB adapter. We measured the round-trip time between the two machines using `ping` as we progressively added components of Cinch. The results, averaged over 1000 pings, show that the full setup (including the crypto adapter) resulted in a round-trip time of less than 2.5 ms. This delay is acceptable for latency-sensitive input devices, as high-performance mechanical keyboards introduce delays of around 5 ms between keystrokes for debouncing.

#### Throughput and Resource Consumption

We read 1 GB of data from a USB storage device to the blue machine and measured the throughput, memory consumption, and CPU load with and without Cinch, repeating the experiments 20 times. We tested two storage devices: a USB 2 flash drive and a USB 3 SSD.

- **USB 2 Flash Drive:**
  - Throughput: 0.8× baseline
  - Memory: 9 MB
  - I/O Throughput: 181.6 Mbps

- **USB 3 SSD:**
  - Throughput: 0.6× baseline
  - Memory: 205 MB
  - I/O Throughput: 145.6 Mbps
  - Encrypted I/O Throughput: 35.4 Mbps

For the USB 2 flash drive, the lower throughput is due to Cinch copying USB transfers at multiple stages and the use of synchronous transfers. For the USB 3 SSD, the primary overhead is memory copies. Cinch’s CPU and memory usage is modest, comparable to other security applications like antivirus software.

### Summary and Critique

Our evaluation shows that Cinch can prevent previously documented vulnerabilities, fuzzing attempts, and crafted attacks, even without attack-specific configuration. With a signature database, its success rate increases, though it is not well-suited for defeating polymorphic attacks. In this respect, Cinch is similar to related tools in network security, ruling out certain classes of vulnerabilities and adapting to specific issues but not being perfect.

Cinch’s extensibility seems reasonable, and the performance impact, while not negligible, may be a good trade-off. However, the evaluation is not definitive. We have likely not explored the full attack space, especially regarding non-USB portions of the kernel and user software. Additionally, the red team comprised authors rather than disinterested parties, which may bias the security evaluation. Neutral, non-expert operators might have different perspectives on usability. Finally, while Cinch’s performance impact is acceptable for many devices, it may not meet the stringent latency requirements of audio and video devices, especially when using the crypto adapter.

### Related Work

Cinch’s contribution is architectural, adapting mechanisms from prior works and existing research areas. We are not aware of any other system that addresses the full range of attacks described in Section 3.

#### USB Security Mechanisms

- **Data Interchange Prevention:** Adapters that convert the USB bus into power lines only [51].
- **Grsecurity Patches:** Linux kernel patches that disable hotplug, conflicting with Cinch’s aim of controlled interaction.
- **Qubes:** A Linux distribution that uses virtualization to create isolated privilege domains. Qubes can place USB devices in their own VMs, but this can reprise threats enumerated in Section 3.
- **udev:** A user-space daemon on Linux that implements finer-grained policies, similar to Cinch’s containment policy (§5.3), but can be attacked.
- **USBFILTER, USBSec, GoodUSB, UScramBle:** These systems address masquerading and eavesdropping attacks, but with varying degrees of user involvement and hardware modifications.

#### Device Driver Isolation and Reliability

There is extensive literature on device driver containment and reliability. Cinch borrows mechanisms from many of these works, such as placing drivers in separate VMs, isolating devices with IOMMU, and leveraging hardware-assisted I/O virtualization. However, Cinch’s threat model and architecture differ, as it assumes hardware may be malicious, unlike many other works that assume hardware adheres to specifications.