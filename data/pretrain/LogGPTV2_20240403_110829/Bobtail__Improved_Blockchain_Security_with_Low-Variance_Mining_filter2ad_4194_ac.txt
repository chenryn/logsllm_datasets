k(cid:80)
(cid:21)
i=1
(cid:19)(cid:21)
Xi
(11)
2
k+1
1
k
(cid:18)
k(cid:80)
X(cid:48)
i
i=1
E[X(cid:48)
i]
1
r
(cid:20)
(cid:20)
k(cid:80)
k(cid:80)
1
k
i=1
i=1
E[Yk] = E
= E
= 1
k
= 1
k
= 1
r .
Now Lemma 1 establishes that E[Vi] = iv after mining for
1/r intervals. And because we assume tk = k+1
2 v, the target
can be decomposed as
tk =
k + 1
2
v =
1
k
k(cid:88)
i=1
iv.
That is to say, tk is simply the average of the expected values
for each Vi when mining for 1/r intervals. Of course Wk
is the sample average of the Vi. Therefore, by the law of
large numbers, in the limit that k approaches inﬁnity, Wk will
identically equal its expected value k+1
2 v and will thus fall
below tk after exactly E[Yk] = 1/r intervals.
2
LEMMA 4: Assuming that tk = v(k+1)
, Yk is a
consistent estimator of the expected number of intervals
2
C. Variance of Wk
Our third step is to derive and validate an expression for
V ar[Wk]. Wk is simply the sample mean over the lowest k or-
der statistics V1, . . . , Vk. But, unfortunately, the analysis below
6
llllllll0e+003e+176e+179e+17010203040kVariancellEq. 12sample varianceis not straightforward because the Vi are neither independent
nor identically distributed.
THEOREM 1: The variance of Wk is
(k + 1)(2k + 1)
V ar[Wk] =
6k
v2.
(12)
PROOF: Assuming that j > i, Lemma 8 in the Appendix
yields
titjg(ti; i, v)g(tj − ti; j − i, v)dtjdti
E[ViVj] = (cid:82) ∞
= (cid:82) ∞
0
0
(cid:82) ∞
ti
tig(ti; i, v)[(j − i)v + ti]dti
= iv2(1 + j).
(13)
Before continuing, we note that since Vi ∼ Gamma(i, v), it
follows that V ar[Vi] = iv2. Now, assuming that j > i, and
using Eq. 13, we have
cov[Vi, Vj] = E[ViVj] − E[Vi]E[Vj]
= iv2(1 + j) − (iv)(jv)
= iv2
Finally, we ﬁnd the variance of Wk by substituting ﬁrst Eq. 1
and then Eq. 14:
V ar[Wk] = V ar
Vi
= V ar[Vi].
(cid:21)
k(cid:80)
i=1
1
k
(cid:20)
(cid:32) k(cid:80)
(cid:32) k(cid:80)
i=1
j−1(cid:80)
(cid:33)
i=1
k(cid:80)
j−1(cid:80)
j=1
iv2
k(cid:80)
iv2 + 2
i=1
j=1
i=1
= 1
k2
= 1
k2
V ar[Vi] + 2
cov[Vi, Vj]
(14)
(cid:33)
Fig. 4: We measured the ratio of Bobtail’s block discovery-time
variance to current systems using a Monte Carlo simulation and
found that the results exactly match V ar[Yk]
6(k2+k) (Eq. 17)
from Theorem 2. 95% c.i.’s are too small to show.
V ar[Y1] = 8k+4
THEOREM 2: For ﬁxed expected block discovery time,
variance decreases by fraction
using mining statistic Wk instead of W1.
k
6(k2+k) = O(cid:0) 1
8k+4
(cid:1) when
PROOF: Lemma 4 establishes that block discovery time Yk is
the same in expectation for all mining statistics Wk provided
that tk = v(k+1)
. Therefore, the ratio of variance in Yk to the
variance in Y1 estimates the reduction in block time variance
due to Bobtail.
2
(cid:80)k
V ar[Yk]
V ar[Y1] =
V ar[ 2
k+1 ( 1
k
i=1 Xi)]
V ar[X1]
=
4
(k+1)2
(k+1)(2k+1)(1/r)2
6k
(1/r)2
4
=
(k+1)2
8k+4
=
= O(cid:0) 1
(cid:1) ,
6(k2+k)
k
(k+1)(2k+1)
(17)
6k
(cid:104) 1
k
(cid:105)
(cid:80)k
i=1 Xi
stated in
2
where we use the expression for V ar
Eq 16.
Empirical Validation of Theorem 2. In Fig. 4, we show
the results from a Monte Carlo simulation that compares
the variance of Yk, the block discovery time under mining
statistic Wk, to the variance of Y1, the mining statistic used
by current PoW algorithms. The results exactly match Eq. 17
from Theorem 2.
Fig. 5 shows the distribution of Yk when tk = v(k+1)/2 so
that E[Yk] = E[Y1]. The plot shows the cumulative distribution
function (CDF) based on the results of a Monte Carlo simulation.
As the plot illustrates, the use of Bobtail mining results in a
signiﬁcant decrease in variance in block discovery time.
= (k+1)(2k+1)
6k
v2.
(15)
2
Empirical Validation of Theorem 1. Fig. 3 shows Eq. 12
versus our Monte Carlo simulation where k is the independent
variable. The results show an exact match.
D. Improvement in Variance
Finally, we turn our attention to quantifying the reduction in
mining time variance that is realized by using Bobtail with k >
1 versus the status quo in PoW mining, k = 1. In Section IV-B
we established that statistic Yk is a consistent estimator of
the number of intervals required for mining statistic Wk to
fall below target tk = k+1
2 v. Here we measure the change in
variance of Yk as k increases, while holding its expected value
constant.
First note that because Xi shares the same distribution as
Vi, up to the change of variables v = 1/r, the following result
follows trivially from Theorem 1.
(cid:18) 1
(cid:19)2
V ar
Xi
=
(k + 1)(2k + 1)
6k
r
(cid:35)
(cid:34)
k(cid:88)
i=1
1
k
.
(16)
7
llllllll0.0e+002.5e+115.0e+117.5e+111.0e+12010203040kVariancellEq. 17sample varianceFig. 5: Results of a Monte Carlo simulation showing the CDF of
Yk, the block discovery time under mining statistic Wk, where k
varies for each curve and target tk is chosen so that E[Yk] =
E[Y1]. Each plot’s independent axis is shown in terms of the
minutes per block for Bitcoin (bottom axis) and seconds per block
for Ethereum (top axis).
V. BOBTAIL THWARTS SELFISH MINING AND
DOUBLESPEND ATTACKS
We next demonstrate quantitatively that its reduced inter-
block-time variance allows Bobtail to thwart both double-
spend [35] and selﬁsh mining [23] attacks. Note that, in our
experiments below, only the variance of the inter-block time
changes as k increases, leaving the expected time unchanged,
and hence we can ascribe the increased resilience against these
attacks to Bobtail.
Recall the deﬁnitions of doublespend and selﬁsh mining
from Section III; in particular the honest and attacker forks are
composed of blocks H = H1, H2, . . . and A = A1, A2, . . .,
respectively. And, in the context of the Bobtail protocol, each
block is itself comprised of k proofs, which are generally
contributed by both honest and attacker miners. For both attacks,
Bobtail allows the attacker two additional strategies when k > 1.
First, because they point to the same prior block, proofs can
be reused between A1 and H1. As a result, while the lowest
proof in A1 must be her own, the attacker can include any
proofs from the honest miners that help her reach the target.
And second, while mining A1, the attacker need only withhold
proofs that are lower than the honest miners’ lowest proof in
order to delay the creation of a block. Thus, her larger proofs
may still appear in H1, which reduces her cost if the attack
fails. We include these strategies in our evaluations of Bobtail.
Fig. 6 shows a Monte Carlo simulation of the doublespend
attack. To ensure the attack has a ﬁnite duration, the attacker
gives up when the honest branch is 3z + 1500 blocks ahead.
Each facet of the plot represents a value of k. The results show
that as k increases and variance decreases, the probability of
attacker success signiﬁcantly decreases. For example, in today’s
implementations of both Bitcoin and Ethereum (k = 1), an
attacker with 40% of the mining power will succeed with 37%
probability on average when z = 6; however, using Bobtail
with k ≥ 20, the probability of success falls to less than 0.5%
Fig. 6: Monte Carlo Simulation. Doublespend attack success
given k for various values of attacker mining power (each curve)
and merchant’s embargo period z (on the independent axis).
Error bars show 95% c.i.’s. The dashed lines show the probability
of success predicted by Nakamoto’s model for k = 1 [35, 37].
on average for the same scenario.
Fig. 7 shows the efﬁcacy of selﬁsh mining attacks via a
Monte Carlo simulation. In the simulation, during a block
propagation race, with probability γ the attacker’s block
propagates to other miners before any block belonging to an
honest miner can. Fig. 7(Top) shows the proportion of blocks
on the main chain won by attackers for γ = 0 and γ = 1; and
Fig. 7(Bottom) shows the proportion of rewards. The dashed
identity line (y = x) represents the proportion that are won
mining honestly. Any selﬁsh mining result that is below the
identity line is worse for the attacker than honest mining.
As the results demonstrate, Bobtail is a signiﬁcant defense
against selﬁsh mining. For example, a selﬁsh miner with 45%
of the mining power will claim about 71% of blocks with
Bitcoin and Ethereum currently (k = 1 and γ = 1); however,
using Bobtail with k ≥ 20 and γ = 1, the same miner will
ﬁnd that selﬁsh mining is less successful than honest mining
whether in terms of the fraction of blocks or rewards.
Finally, we note that while Bobtail is not more robust against
eclipse attacks [28], its low variance block times make such
attacks easier to detect.
As stated in Section III, other attacks are possible for Bobtail.
We return to them in Section VIII.
VI. BOBTAIL’S ORPHAN RATES ARE THE SAME OR LOWER
Even when all miners operate honestly, current blockchain
systems frequently suffer from orphaned blocks during their
operation that diminish security and delay consensus. Orphans
8
0510152025303540455055600%10%20%30%40%50%60%70%80%90%100%0510152025303540Ethereum (seconds per block)Bitcoin (minutes per block)CDFk11020405k = 30k = 50k = 100k = 1k = 10k = 200123456789100123456789100123456789100.0%10.0%20.0%30.0%40.0%50.0%60.0%70.0%80.0%90.0%0.0%10.0%20.0%30.0%40.0%50.0%60.0%70.0%80.0%90.0%zProb. of succcessful doublespendattacker mining power0.10.20.30.40.45Fig. 8: A simulation of Bobtail’s orphan rate when proofs and
blocks propagate with constant delay of τ = 10 seconds and the
inter-block time is T = 600 seconds. The orphan rate of Bobtail is
at or below the expected orphan rate, 1−1/eτ /T for k = 1 (shown
as a dashed line). Similar results hold for Ethereum where τ = 5
and T = 15 seconds. Error bars represent a 95% c.i.
(see also Rizun [40]). Note that this bound is pessimistic in
that it assumes the worst case scenario where the author of
the ﬁrst block has a negligible percentage of the total network
hash rate.
In this section, we examine the orphan rate associated with
Bobtail mining compared to Bitcoin and Ethereum. We show
that when miners follow the Bobtail protocol, orphans are no
more likely.
A. Orphan Prevention Measures
The principal cause of orphans in Bobtail is the fact that,
once more than k proofs have been disseminated, there exist
a combinatorial number of k-element subsets of those proofs.
Thus at the time when there exists some subset of k proofs
whose mean falls below target tk, there is a reasonable chance
that some other subset also exists (or will exist relatively soon).
Fortunately, the proof package rules introduced in Section II
greatly reduce the number of valid subsets. First, all proofs
must be tethered to a supporting proof, the latter of which
should be the smallest proof previously received by the miner.
Second, no support in the proof package can have value less
than V1 (the lowest proof in the package). And third, the block
must be signed by the private key used to generate V1.
Together, these conditions ensure that if at least one of