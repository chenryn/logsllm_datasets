### 6.3.3 Reflections on Future Improvement

The above results indicate that when the per-flow state size is not excessively large, our current design, which treats the state as a single chunk of raw data in an agnostic manner, is sufficient to achieve near-native performance for stateful processing. However, for larger states, this approach may not be optimal. A more fine-grained partition and handling of the state could improve efficiency.

One promising direction is to separate the large stream buffer (e.g., 8KB in the case of mIDS) from the rest of the state (e.g., 3.4KB). Processing each packet would only involve a small portion of the buffer, thus avoiding the high overhead of encrypting, decrypting, and copying the entire buffer. The entire buffer would only need to be loaded into the enclave when it is time to push the buffer for inspection. This approach would significantly reduce the cost of the flow tracking routine. It is important to avoid moving encrypted raw packets individually out of the enclave, as this could leak packet size and count. A more secure method would be to divide the stream buffer into fixed-length chunks and handle packets in batches.

Similarly, for middleboxes that access the flow state of both connection directions for each packet, instead of treating both flows equally, we can manage only the necessary data fields of the paired flow, leaving the majority of its state untouched. This would require a slight redesign of our current data structures to support the effective linking of paired flows.

A common theme in these fine-grained approaches is to minimize the amount of unnecessary data moved across the enclave boundary, thereby reducing management overhead. We leave the detailed designs and exploration of potential trade-offs between security and efficiency as future work.

### 6.4 Comparison with Previous Systems

We now discuss previous secure middlebox systems built upon SGX, focusing on experiment settings and performance evaluation. These systems have been evaluated on various network functions and demonstrate that certain workloads can be run in the enclave with minimal performance overhead. Our work differs from these in two key aspects: 
1. The complexity of stateful processing as seen in production-level middleboxes.
2. The high flow concurrency encountered in deployed networks.

These features together pose unique challenges in operating stateful middleboxes in enclaves at a reasonable cost. To our knowledge, such experiment settings have not been considered in prior works. Most previous experiments are confined to small memory footprints within the EPC limit (128MB), avoiding expensive EPC paging. In contrast, our settings involve memory footprints that can grow to multiple GBs. Below, we discuss some representative systems.

**ShieldBox [86]** evaluates several stateless middleboxes, including some with simple functions. Since the middlebox memory footprint is always kept small, it is not surprising that the performance of shielded middleboxes is close to native in most test cases.

**SGX-BOX [35]** allows inspection over reassembled streams but leaves flow state other than the stream buffer unprotected, thus not fully addressing the challenge of protecting stateful middlebox processing. It reports only preliminary evaluations showing that the overhead of inspecting a single stream is small.

**SafeBricks [66]** presents a more diverse set of experiments but still uses relatively simple middleboxes. Unlike our stateful lwIDS and advanced mIDS, it uses a simple DPI application working on individual packets rather than reassembled streams. The NAT and load balancer tested there are also stateless, and the stateful firewall's functionality is basic and not evaluated against concurrent flows.

In summary, due to different focuses and methodologies, it is not feasible to derive a direct and fair experimental comparison between LightBox and previous systems. We are the first to evaluate non-trivial stateful middleboxes under settings with high flow concurrency. We hope this work will inspire further efforts to bridge the research-practice gap for secure middlebox systems. Additionally, while our intensive evaluations provide a solid foundation, it is also critical to experiment with other important aspects such as service function chaining, as done by previous works [66, 86]. We leave these as future work.

### 7 Related Work

#### Secure Middleboxes

**BlindBox [77]** was the first system to apply cryptographic protocols (searchable encryption and garbled circuits) to enable inspection on encrypted packet payloads. Several follow-up designs have been proposed. **[99]** emphasizes the protection of middlebox rules and supports more inspection rules. **SPABox [26]** and **BlindIDS [10]** focus on reducing session setup costs. **[57]** considers using heavy homomorphic encryption for generic network functions, which is mostly of theoretical interest. **SplitBox [3]** employs a distributed model for certain packet header processing with multi-party computation techniques. **Embark [51]** introduces a customized prefix-matching scheme and supports a wider class of middlebox functions. These software-centric solutions often face limitations in functionality and performance, especially for stateful processing.

Several designs based on trusted hardware, such as Intel SGX, have also been proposed. **S-NFV [78]** protects specific middlebox states but not the entire middlebox processing over protected traffic. **Trusted Click [18]** and **ShieldBox [86]** port Click modular router [49] to the enclave but do not protect metadata and lack support for stateful processing. **SGX-BOX [35]** and **mbTLS [62]** enable middleboxes to intercept TLS connections and securely inspect traffic in the enclave, focusing on programmability and deployability, respectively. **SGX-BOX** uses the mOS framework for stateful processing outside the enclave, leaving all states except the encrypted stream buffers unprotected. **SafeBricks [66]** pays extra attention to middlebox code protection and applies IPSec for secure traffic tunneling but remains vulnerable to traffic analysis attacks leveraging packet size and count. None of these hardware-assisted solutions protect low-level traffic metadata or enable efficient stateful processing in real networks with high flow concurrency like LightBox does.

#### Reducing Overhead of SGX

One theme of our research is to minimize the performance overhead incurred by SGX while retaining security guarantees. A main strand of works achieves this goal with switch-less ECALLs/OCALLs by avoiding expensive context switching [2, 95]. This approach is orthogonal to our designs. With the official release of such support [85], we can replace our normal use of OCALL with the switch-less version for better efficiency. **Eleos [63]** introduces user-managed paging to alleviate the overhead of naive EPC paging. Its cache-store architecture is similar to ours but entails coarse-grained data structures and complex procedures, making it less suitable for performance-sensitive middlebox applications. A recent study proposes refining the underlying data structure for integrity checking [84]. Whether a large EPC can overcome SGXâ€™s current performance issues without enlarging the attack surface remains an open problem. Our state management design significantly increases the usable secure memory for SGX applications. We hope that our compact data structure and efficient lookup algorithm can provide insights for future studies in this direction.

#### SGX-Enabled Systems

Many systems have been built with SGX, such as data analytics platforms [72, 75] and secure system services [2, 37]. Their application scenarios differ from ours, particularly in not facing the challenge of operating stateful middleboxes in real networks with strict performance requirements.

### 8 Conclusion

We present LightBox, an SGX-assisted secure middlebox system. While many researches have explored the possibilities of securing middleboxes with SGX and claimed its efficiency and practicality, this is the first work to ascertain these claims from a more pragmatic perspective. We bridge the research-practice gap by identifying two critical challenges, from both security and functionality aspects, and address them with domain knowledge and extensive customization. Our first main technical contribution is an elegant in-enclave virtual network interface that is highly secure, efficient, and usable. Our second main innovation is the flow state management scheme, comprising data structures and algorithms optimized for the enclave space. Together, they build a comprehensive solution for deploying off-site middleboxes with strong protection and stateful processing at near-native speed. We hope that LightBox will advance secure network function virtualization and middlebox-as-a-service to the practical realm and invite more efforts on building hardware-assisted secure systems that are practical and usable.