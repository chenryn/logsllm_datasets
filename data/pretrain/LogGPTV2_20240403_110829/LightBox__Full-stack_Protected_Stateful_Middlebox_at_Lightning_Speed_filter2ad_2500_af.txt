se(cid:138)ings, there is some moderate gap between LightBox and Native,
due to the large state and double (cid:131)ow tracking design.
6.3.3 Reflections on future improvement. Above results show
that when the per-(cid:131)ow state size is not overly large, our current
design, which treats the state as a whole chunk of raw data in an
agnostic manner, su(cid:129)ces to achieve near-native performance for
stateful processing. Otherwise, it may not be wise to manage the
large state as a whole. We would expect more (cid:128)ne-grained partition
and handling of the state to improve e(cid:129)ciency.
A promising direction is to separate the large stream bu(cid:130)er (e.g.,
8KB in the case of mIDS) from the rest of the state (e.g., 3.4KB). (cid:140)e
processing of each packet will only touch a small portion of the
bu(cid:130)er, dispensing with the high overhead of encrypting, decrypting
and copying the entire bu(cid:130)er. Only when it is time to (cid:131)ush the bu(cid:130)er
for inspection do we need to load it into enclave in its entirety. (cid:140)is
will signi(cid:128)cantly diminish the cost of the (cid:131)ow tracking routine. Note
that here we should refrain from moving encrypted raw packets
individually out from the enclave, as this will leak the packet size
and count. A more secure way would be to divide the stream bu(cid:130)er
into chunks of (cid:128)xed length and handle packets in batches.
In a similar vein, for middleboxes that access the (cid:131)ow state of
both connection directions on each packet, instead of treating both
(cid:131)ows equally, we can manage only the necessary data (cid:128)elds of the
paired (cid:131)ow, leaving the vast majority of its state untouched. (cid:140)is
requires a slight redesign of our current data structures to support
the e(cid:130)ective linking of pairing (cid:131)ows.
A common theme in the (cid:128)ne-grained approaches suggested
above is to reduce the amount of unnecessary data moved across
the enclave boundary, and hence lessen the management overhead.
We leave the detailed designs and exploration of potential trade-o(cid:130)s
between security and e(cid:129)ciency as an interesting future work.
6.4 Comparison with Previous Systems
We now discuss previous secure middlebox systems built upon
SGX regarding experiment se(cid:138)ings and performance evaluation.
(cid:140)ey have been evaluated on various network functions, and they
demonstrate that certain workloads can be run in the enclave with
marginal performance overhead. (cid:140)is work di(cid:130)ers from them in
that it takes into consideration: 1) the complexity of stateful pro-
cessing as seen in production-level middleboxes, and 2) the high
(cid:131)ow concurrency encountered in deployed networks. (cid:140)ese two
features together pose unique challenges in operating stateful mid-
dleboxes in enclaves at a reasonable cost. To our best knowledge,
such experiment se(cid:138)ings have not been considered in prior works.
(cid:140)eir experiments are mostly con(cid:128)ned to small memory footprint
within EPC limit (128MB), avoiding expensive EPC paging; but in
our se(cid:138)ings, the memory footprint of middleboxes can grow to
multiple GBs. We discuss some representative systems below.
In ShieldBox [86], several stateless middleboxes, including some
micro ones with simplistic functions, are evaluated. (cid:140)ey process
packets independently, without tracking any (cid:131)ow states. Since the
middlebox memory footprint is always kept small, it is not very
surprising to see that the performance of shielded middleboxes is
close to native in virtually all test cases.
SGX-BOX [35] allows inspection over reassembled streams. How-
ever, it leaves (cid:131)ow state other than the stream bu(cid:130)er outside enclave
unprotected, obviating the challenge of fully protecting stateful mid-
dlebox processing. Besides, it reports only preliminary evaluation
that the overhead of inspecting a single stream is small.
Safebricks [66] presents a more diverse set of experiments. But
the middleboxes under testing are still arguably too simple in reality.
Unlike the stateful lwIDS and more advanced mIDS we have built, it
uses a simple DPI application working on individual packets but not
reassembled streams. (cid:140)e NAT and load balancer tested there are
also stateless. It does include a stateful (cid:128)rewall, but the functionality
seems basic, and more importantly, it was not evaluated against
concurrent (cid:131)ows.
To sum up, due to the di(cid:130)erent focuses and methodology, it is
not feasible to derive a direct and fair experimental comparison
between LightBox and previous systems. We for the (cid:128)rst time
evaluate non-trivial stateful middleboxes under se(cid:138)ings with high
(cid:131)ow concurrency, and we hope that this work can invite more
e(cid:130)orts on bridging the research-practice gap for secure middlebox
systems. On the other hand, in addition to our intensive evaluations,
it is also interesting and critical to experiment with other important
aspects such as service function chaining, as done by previous
works [66, 86]. Our current work has built solid a foundation for
conducting further evaluations, and we leave them as future work.
7 RELATED WORK
Secure Middleboxes. BlindBox [77] is the (cid:128)rst system that applies
cryptographic protocols (i.e., searchable encryption and garbled
circuit) to enable inspection on encrypted packet payloads. A list
of follow-up designs are proposed. (cid:140)e work [99] emphasizes on
the protection of middlebox rules and the support of more inspec-
tion rules. SPABox [26] and BlindIDS [10] put extra a(cid:138)ention on
reducing session setup cost. Besides payloads, privacy-preserving
packet header checking is also studied. (cid:140)e work [57] considers
using heavy homomorphic encryption for generic network func-
tions, which is mostly of theoretical interest only. SplitBox [3]
employs a distributed model for a certain class of packet header
processing with multi-party computation techniques. Embark [51]
introduces a customized pre(cid:128)x-matching scheme; by integrating
the technique from [77], it supports a wider class of middlebox
functions. (cid:140)ese so(cid:137)ware-centric solutions are o(cid:137)en restricted in
functionality (especially for stateful processing) and performance.
(cid:140)ere are also several designs based on trusted hardware, i.e.,
Intel SGX. S-NFV [78] proposes to protect speci(cid:128)cally the middle-
box state, but not the entire middlebox processing over protected
tra(cid:129)c. Trusted Click [18] and ShieldBox[86] port Click modular
router [49] to the enclave. But they do not consider the protection
of metadata, and lack support for stateful processing due to the
limitation of Click that is inherently stateless. In a se(cid:138)ing di(cid:130)erent
from middlebox outsourcing, SGX-BOX [35] and mbTLS [62] en-
able middleboxes to intercept TLS connections and securely inspect
tra(cid:129)c in the enclave, with primary focus on programmability and
deployability, respectively. One note on SGX-BOX is that it employs
the mOS framework for stateful processing outside enclave, so all
states except the encrypted stream bu(cid:130)ers are le(cid:137) unprotected and
the correctness of stateful processing is not guaranteed. Targeting
the same scenario as us, the latest work SafeBricks [66] pays extra
a(cid:138)ention to middlebox code protection, and applies IPSec for secure
tra(cid:129)c tunneling. While protecting packet headers, it is still vul-
nerable to tra(cid:129)c analysis a(cid:138)acks leveraging packet size and count.
None of these hardware-assisted solutions protects low-level tra(cid:129)c
metadata as LightBox does, nor do they enable e(cid:129)cient stateful
processing in real networks experiencing high (cid:131)ow concurrency.
Reducing overhead of SGX. One theme of our research is to
minimize the performance overhead incurred by SGX while retain-
ing security guarantees. A main strand of works approach this
goal with switch-less ECALLs/OCALLs by avoiding expensive con-
text switching [2, 95]. (cid:140)is approach is orthogonal to our designs.
In fact, with the o(cid:129)cial release of such support [85], we can readily
replace our normal use of OCALL with the switch-less version for
even be(cid:138)er e(cid:129)ciency. Eleos [63] introduces user-managed paging
to alleviate the overhead of naive EPC paging. Its cache-store archi-
tecture is similar to ours, but for generality it entails coarse-grained
data structure (e.g., page table) and complex procedures (e.g,. ad-
dress translation and page table walk), compared with our tailored
and optimized designs. (cid:140)erefore, it may not suit the performance-
sensitive middlebox applications. To help grow EPC in the future,
a recent study proposes to re(cid:128)ne the underlying data structure for
integrity checking [84]. Whether a large EPC can overcome SGXâ€™s
current performance issue without enlarging the a(cid:138)ack surface
remains an open problem. Our state management design signi(cid:128)-
cantly increases the nominal secure memory that is usable by SGX
applications. We hope that the proposed compact data structure
and e(cid:129)cient lookup algorithm can provide helpful insights into
future study towards this direction.
SGX-enabled systems. Many systems have been built with SGX,
such as data analytics platforms [72, 75] and secure system ser-
vices [2, 37]. (cid:140)eir application scenarios are di(cid:130)erent from ours,
and in particular, they do not face the challenge of operating stateful
middlebox in real networks with strict performance requirements.
8 CONCLUSION
We present LightBox, an SGX-assisted secure middlebox system.
While many researches have explored the possibilities of securing
middleboxes with SGX and claimed its e(cid:129)ciency and practicality,
this is the (cid:128)rst work to ascertain the claims from a more pragmatic
perspective. We bridge the research-practice gap by identifying two
critical challenges, from both security and functionality aspect, and
satisfactorily address them with domain knowledge and extensive
customization. Among others, our (cid:128)rst main technical contribution
is an elegant in-enclave virtual network interface that is highly
secure, e(cid:129)cient and usable; and our second main innovation is
the (cid:131)ow state management scheme comprising data structures and
algorithms optimized for the enclave space. (cid:140)ey together build
up a comprehensive solution for deploying o(cid:130)-site middleboxes
with strong protection and stateful processing, at near-native speed.
We hope that LightBox can push forward secure network function
virtualization and middlebox-as-a-service to the practical realm,
and that our work can invite more e(cid:130)orts on building hardware-
assisted secure systems that are practical and usable.
REFERENCES
[1]
I(cid:138)ai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based a(cid:138)estation and sealing. In Proc. of ACM HASP.
[2] Sergei Arnautov, Bohdan Trach, Franz Gregor, (cid:140)omas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan Oâ€™Kee(cid:130)e, Mark L.
Stillwell, David Goltzsche, Dave Eyers, RÂ¨udiger Kapitza, Peter Pietzuch, and
Christof Fetzer. 2016. SCONE: Secure Linux Containers with Intel SGX. In Proc.
of USENIX OSDI.
[3] Hassan Jameel Asghar, Luca Melis, Cyril Soldani, Emiliano De Cristofaro, Mo-
hamed Ali Kaafar, and Laurent Mathy. 2016. SplitBox: Toward E(cid:129)cient Private
Network Function Virtualization. In Proc. of ACM HotMiddlebox.
[4] Pierre-Louis Aublin, Florian Kelbert, Dan O(cid:128)Kee(cid:130)e, Divya Muthukumaran,
Christian Priebe, Joshua Lind, Robert Krahn, Christof Fetzer, David Eyers, and
Peter Pietzuch. 2017. TaLoS: Secure and transparent TLS termination inside
SGX enclaves. Imperial College London, Tech. Rep 5 (2017).
directconnect/.
[5] AWS. 2018. AWS Direct Connect. Online at: h(cid:138)ps://aws.amazon.com/
[6] Azure. 2018. Azure ExpressRoute. Online at: h(cid:138)ps://azure.microso(cid:137).com/en-us/
services/expressroute/.
[7] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2014. Shielding applica-
tions from an untrusted cloud with Haven. In Proc. of USENIX OSDI.
[8] (cid:140)eophilus Benson, Aditya Akella, Anees Shaikh, and Sambit Sahu. 2011. Cloud-
NaaS: a cloud networking platform for enterprise applications. In Proc. of ACM
SOCC.
[9] CAIDA. 2016. (cid:140)e CAIDA UCSD Anonymized Internet Traces 2016 - April 6th.
Online at: h(cid:138)p://www.caida.org/data/passive/passive 2016 dataset.xml.
[11] Martin Casado, Teemu Koponen, Daekyeong Moon, and Sco(cid:138) Shenker. 2008.
[10] SÂ´ebastien Canard, AÂ¨Ä±da Diop, Nizar Kheir, Marie Paindavoine, and Mohamed
Sabt. 2017. BlindIDS: Market-Compliant and Privacy-Friendly Intrusion Detec-
tion System over Encrypted Tra(cid:129)c. In Proc. of ACM AsiaCCS.
Rethinking Packet Forwarding Hardware. In Proc. of ACM HotNets.
[12] Shanwei Cen and Bo Zhang. 2017. Trusted Time and Monotonic Counters with
Intel So(cid:137)ware Guard Extensions Platform Services. Online at: h(cid:138)ps://so(cid:137)ware.
intel.com/sites/default/(cid:128)les/managed/1b/a2/Intel-SGX-Platform-Services.pdf.
[13] Sanchuan Chen, Xiaokuan Zhang, Michael K Reiter, and Yinqian Zhang. 2017.
Detecting privileged side-channel a(cid:138)acks in shielded execution with DÂ´ejÂ´a Vu.
In Proc. of ACM AsiaCCS.
[14] Byungkwon Choi, Jongwook Chae, Muhammad Jamshed, Kyoungsoo Park, and
Dongsu Han. 2016. DFC: Accelerating string pa(cid:138)ern matching for network
applications. In Proc. of USENIX NSDI.
[15] M. Conti, Q. Q. Li, A. Maragno, and R. Spolaor. 2018. (cid:140)e Dark Side(-Channel) of
Mobile Devices: A Survey on Network Tra(cid:129)c Analysis. IEEE Communications
Surveys Tutorials 20, 4 (2018), 2658â€“2713.
[16] Mauro Conti, Luigi Vincenzo Mancini, Riccardo Spolaor, and Nino Vincenzo
Verde. 2016. Analyzing android encrypted network tra(cid:129)c to identify user
actions. IEEE TIFS 11, 1 (2016), 114â€“125.
[17] Victor Costan, Ilia Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal
hardware extensions for strong so(cid:137)ware isolation. In Proc. of USENIX Security.
[18] Michael Coughlin, Eric Keller, and Eric Wustrow. 2017. Trusted Click: Over-
coming Security Issues of NFV in the Cloud. In Proc. of ACM SDN-NFV Security.
[19] Sco(cid:138) E. Coull and Kevin P. Dyer. 2014. Tra(cid:129)c Analysis of Encrypted Messaging
Services: Apple iMessage and Beyond. ACM SIGCOMM CCR 44, 5 (2014).
[20] Lorenzo De Carli, Robin Sommer, and Somesh Jha. 2014. Beyond pa(cid:138)ern
matching: A concurrency model for stateful deep packet inspection. In Proc. of
ACM CCS.
On-
line
h(cid:138)ps://www.forbes.com/sites/robertdefrancesco/2019/03/06/
at:
securing-the-cloud-with-zscaler/#29281a785d52.
Securing (cid:140)e Cloud With Zscaler.
[21] Robert DeFrancesco. 2019.
[22] Mihai Dobrescu, Norbert Egi, Katerina Argyraki, Byung-Gon Chun, Kevin Fall,
Gianluca Iannaccone, Allan Knies, Maziar Manesh, and Sylvia Ratnasamy. 2009.
RouteBricks: Exploiting Parallelism to Scale So(cid:137)ware Routers. In Proc. of ACM
SOSP.
[23] Kevin P Dyer, Sco(cid:138) E Coull, (cid:140)omas Ristenpart, and (cid:140)omas Shrimpton. 2012.
Peek-a-boo, I still see you: Why e(cid:129)cient tra(cid:129)c analysis countermeasures fail.
In Proc. of IEEE S&P.
[26]
[24] Daniel E Eisenbud, Cheng Yi, Carlo Contavalli, Cody Smith, Roman Kononov,
Eric Mann-Hielscher, Ardas Cilingiroglu, Bin Cheyney, Wentao Shang, and
Jinnah Dylan Hosein. 2016. Maglev: A Fast and Reliable So(cid:137)ware Network
Load Balancer. In Proc. of USENIX NSDI.
[25] Ulfar Erlingsson, Mark Manasse, and Frank McSherry. 2006. A cool and practical
alternative to traditional hash tables. In Proc. of 7th Workshop on Distributed
Data and Structures (WDASâ€™06).
Jingyuan Fan, Chaowen Guan, Kui Ren, Yong Cui, and Chunming Qiao. 2017.
SPABox: Safeguarding Privacy During Deep Packet Inspection at a MiddleBox.
IEEE/ACM Transactions on Networking 25, 6 (2017), 3753â€“3766.
h(cid:138)ps://github.com/gamelinux/prads.
[27] Edward FjellskËšal. 2017. Passive Real-time Asset Detection System. Online at:
[28] Chema GarcÂ´Ä±a. 2018. libntoh. Online at: h(cid:138)ps://github.com/sch3m4/libntoh.
[29] Aaron Gember-Jacobson, Raajay Viswanathan, Chaithan Prakash, Robert
Grandl, Junaid Khalid, Sourav Das, and Aditya Akella. 2014. OpenNF: En-
abling Innovation in Network Function Control. In Proc. of ACM SIGCOMM.
[30] Glen Gibb, Hongyi Zeng, and Nick McKeown. 2012. Outsourcing network
functionality. In Proc. of ACM HotSDN.
com/interconnect/docs/concepts/dedicated-overview.
Johannes GÂ¨otzfried, Moritz Eckert, Sebastian Schinzel, and Tilo MÂ¨uller. 2017.
Cache a(cid:138)acks on Intel SGX. In Proc. of ACM EuroSec.
[31] Google. 2018. Google Dedicated Interconnect. Online at: h(cid:138)ps://cloud.google.
[36] Gregory L Heileman and Wenbin Luo. 2005. How Caching A(cid:130)ects Hashing. In
[33] (cid:140)e Tcpdump Group. 2018. libpcap. Online at: h(cid:138)ps://www.tcpdump.org.
[34] Daniel Gruss, Julian Le(cid:138)ner, Felix Schuster, Olya Ohrimenko, Istvan Haller, and
Manuel Costa. 2017. Strong and E(cid:129)cient Cache Side-Channel Protection using
Hardware Transactional Memory. In Proc. of USENIX Security.