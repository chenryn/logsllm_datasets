### 5.700 APKs and Their Security Implementations

Our analysis revealed that out of 5,700 APKs, with a cumulative download count of 1,005 million, none implemented application-layer security for either type of data access. Figure 5 provides a summary of the proportion of APKs identified as containing cryptographically protected BLE data at three different confidence levels.

### 4.5.2 Libraries vs. App-Specific Implementations

We found that many BLE-enabled APKs use third-party libraries to incorporate BLE functionality. To determine the extent of this reliance, we analyzed all methods within an APK that called BLE data access functions. This was done by comparing the method class name with the application package name. If the first two components (e.g., `com.packagename`) matched, the method was considered to be implemented within the application. If they did not match, it was considered a library method. For package names using country-code second-level domains (e.g., `uk.ac.packagename`), we compared the third components as well.

- **setValue Method Usage:**
  - 63% of APKs used BLE functionality solely through libraries.
  - 32% used application-specific methods only.
  - 4% used both.
  - Less than 1% could not be analyzed due to very short method names.
  - In APKs using both application-specific methods and libraries, approximately 34% used an external library for Device Firmware Update (DFU) capabilities, enabling the BLE peripheral to be updated via the mobile application.
  - Of the APKs using only application-specific methods, 67% did not implement application-layer security with BLE data. This proportion was lower at 48% for applications relying on libraries.

- **getValue Variants Usage:**
  - 37% used only application-specific methods.
  - 58% used only libraries.
  - 5% used both.
  - A higher proportion of APKs using only app-specific BLE implementations did not use cryptography (60%), compared to those using only libraries (39%).

Table 4 presents the ten most commonly encountered BLE libraries, their functionality, the number of APKs that use them, and the presence of cryptographically-processed BLE data within the library itself. The most prevalent third-party packages are libraries that enable communication with BLE beacons. Specifically, the Estimote library made up more than 90% of all instances of cryptographically-processed BLE writes and 85% of reads (identified with high confidence). Analysis suggested that cryptography is used to authenticate requests when modifying beacon settings.

Other libraries, such as Polidea, Randdusing, Megster, Evothings, and Chromium, function as wrappers for the Android BLE API or enable BLE via JavaScript in Cordova-based applications. None of these libraries handle cryptographically-processed BLE data, and developers using these libraries are expected to implement their own application-layer security.

The Flic library, provided by a BLE device manufacturer, uses cryptographically-processed data to integrate third-party services into the Flic ecosystem. Nordicsemi, a library from a BLE chipset manufacturer, enables DFU over the BLE interface. With the newest version, the BLE peripheral verifies firmware signatures, but the mobile application (and the library) does not need to handle cryptographically-processed data.

### 4.5.3 Cryptographic Correctness

BLECryptracer identified 3,228 unique packages with cryptographically protected BLE data (reads or writes) with high confidence. However, the presence of crypto-libraries does not guarantee a secure system. We further analyzed this subset using CogniCrypt, which identifies misuses of Java crypto/security libraries. Among the 3,228 unique packages, significant overlap was found, resulting in 194 unique APKs. CogniCrypt identified issues in 68 APKs, with 24 having BLE-specific issues. Table 5 shows the types of misuse and the number of unique packages affected.

- **Misuse Types:**
  - ECB (or other bad mode): 10
  - Non-random key: 6
  - Non-random IV: 10
  - Bad IV used with Cipher: 7
  - Bad key used with Cipher: 11
  - Incomplete operation (dead code): 4

This analysis indicates that several real-world applications contain basic mistakes in their use of crypto-libraries and handling of sensitive data, leading to insecure BLE data despite the use of cryptography.

### 4.5.4 Trends Over Time

Figure 6 shows the trend of application-layer security over time for applications incorporating BLE reads or writes. The graph depicts the percentage of applications without cryptographic protection. The overall downward trend suggests some improvement in application-layer security between 2014 and 2017. However, even in 2017, the APKs without cryptography corresponded to 128 million downloads, a significant number.

### 4.5.5 Application-Layer Security by Category

Figure 7 graphs the percentage of applications using cryptographically processed data from each major application category. Surprisingly, "Business," "Shopping," and "Travel & Local" categories were the most likely to incorporate application-layer security, with around 50% of such applications identified as having cryptographically processed BLE data with high confidence. However, in over 85% of these cases, this was due to the Estimote beacon library.

### 4.5.6 Impact Analysis

While 18,929 BLE-enabled applications may seem small compared to the initial dataset of 4.6 million, a single application can correspond to multiple BLE devices, sometimes millions, as with fitness trackers. Even considering only unique applications without cryptography, the cumulative install count exceeds 1,005 million, indicating a large attack surface.

### 4.6 Case Study: Firmware Update over BLE

One APK identified as lacking application-layer security was designed for a widely used, low-cost fitness tracker (with 1,000,000+ installs on Google Play). Analysis suggested the device used the Nordic BLE chipset, which could be put into the Legacy DFU mode, highlighting the potential security risks.