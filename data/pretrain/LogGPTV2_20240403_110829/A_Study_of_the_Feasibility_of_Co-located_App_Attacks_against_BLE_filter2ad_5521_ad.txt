5,700 APKs), with a cumulative download count of 1,005 mil-
lion, do not implement application-layer security for either
type of data access. Figure 5 summarizes the proportion of
APKs that were identiﬁed as containing cryptographically
protected BLE data at the three different conﬁdence levels.
4.5.2 Libraries vs. App-Speciﬁc Implementations
We found that many BLE-enabled APKs actually use third-
party libraries for incorporating BLE functionality. To get
an idea of exactly how many APKs relied on libraries, we
analyze all methods within an APK that called BLE data
access functions. To do this in an automated way, we compare
the method class name with the application package name. If
the ﬁrst two components (e.g., com.packagename) of each
match, then we take it to be a method implemented within
the application. If the components do not match, we take it
to be a library method. If the package name uses country-
code second-level domains (e.g., uk.ac.packagename), then
we compare the third components as well.
Of the APKs that called the setValue method, 63%
used BLE functionality solely through libraries, 32% used
application-speciﬁc methods only, while 4% used both. Fewer
than 1% of the APKs could not be analyzed due to very short
method names. Within the APKs that used both application-
speciﬁc methods and libraries, around 34% used an external
library to provide Device Firmware Update (DFU) capabili-
ties, thereby enabling the BLE peripheral to be updated via the
mobile application. Of the APKs that utilized only application-
speciﬁc methods to incorporate BLE functionality, 67% did
not implement application-layer security with the BLE data.
This proportion was lower at 48% for applications that relied
on libraries.
In the case of the APKs that called getValue variants,
37% used only application-speciﬁc methods, 58% used only
libraries, and 5% used both. As with the setValue case, a
higher proportion of APKs that used only app-speciﬁc BLE
implementations were found to not use cryptography (60%),
when compared with those that used only libraries (39%).
Table 4 presents the ten most commonly-encountered
BLE libraries, their functionality, the number of APKs that
use them, and the presence of cryptographically-processed
BLE data within the library itself. The table shows that
the most prevalent third-party packages are libraries that
enable communication with BLE beacons. In fact, a single
such library (Estimote) made up more than 90% of all in-
stances of cryptographically-processed BLE writes and 85%
of cryptographically-processed BLE reads (identiﬁed with
High conﬁdence). An analysis of this library suggested that
cryptography is being used to authenticate requests when
modifying settings on the beacon.
Apart from beacon libraries, we identiﬁed ﬁve libraries
that function as wrappers for the Android BLE API. For
example, Polidea wraps the API so that it adheres to the
reactive programming paradigm. The libraries Randdusing,
Megster and Evothings enable the use of BLE via JavaScript
in Cordova-based applications. Similarly, Chromium enables
websites to access BLE devices via JavaScript calls. None
of these libraries handle cryptographically-processed BLE
data. It is expected that developers using these libraries will
implement their own application-layer security (using either
JavaScript or reactive Java as appropriate).
Of
the
two remaining libraries, Flic, which uses
cryptographically-processed data, is a library offered by a
BLE device manufacturer. This library allows third-party
developers to integrate their services into the Flic ecosystem,
to allow them to automate certain tasks.
Finally, Nordicsemi is a library provided by a BLE chipset
manufacturer to enable DFU over the BLE interface. With the
newest version of the DFU mechanism, the BLE peripheral
veriﬁes that the ﬁrmware has been properly signed. Devices
using the legacy DFU mechanism will not verify the ﬁrmware.
However, the mobile application (and by extension, the li-
brary) does not need to handle cryptographically-processed
data in either case.
4.5.3 Cryptographic Correctness
BLECryptracer identiﬁed 3,228 unique packages with crypto-
graphically protected BLE data (with either reads or writes),
with High conﬁdence. However, the presence of crypto-
libraries does not in itself indicate a secure system. We there-
fore further analyzed this subset of APKs to identify whether
cryptography had been used correctly in them. The tool Cog-
niCrypt [29] was utilized for this purpose. Although this tool
does not formally verify the cryptographic protocol between
the application and the BLE peripheral, it identiﬁes various
misuses of the Java crypto/security libraries.
USENIX Association
28th USENIX Security Symposium    11
Table 4: Top Ten Third-Party BLE Libraries
Function
Beacon
Beacon
Web BLE
Cordova Plugin
Cordova Plugin
BLE Accessory
BLE Wrapper
Cordova Plugin
Beacon
Library
Estimote
Nordicsemia DFU
Kontakt
Chromium
Randdusing
Megster
Flic
Polidea
Evothings
Jaalee
a Signiﬁcant overlap present between Estimote and Nordic due
to repackaging of the Nordic SDK into Estimote.
#APKs[unique] Crypto
3980[2804]
1238[847]
1108[690]
402[269]
268[188]
317[187]
173[164]
138[114]
142[84]
102[79]
Yes
No
No
No
No
No
Yes
No
No
No
Among the 3,228 unique packages, we found that there
was signiﬁcant overlap between APKs in terms of the BLE
libraries or functions3 used. Removing such duplicates re-
sulted in a set of 194 APKs. Of these, 68 were identiﬁed by
CogniCrypt as having issues. However, because CogniCrypt
identiﬁes cryptography misuse within the entire APK, the re-
sults were ﬁltered for BLE-speciﬁc functions. 24 APKs were
found to have issues within or associated with the methods
that cryptographically processed BLE data (as identiﬁed by
BLECryptracer) and often, a single APK exhibited multiple
issues. Table 5 shows the different types of misuse encoun-
tered and the number of unique packages that were identiﬁed
as having such misuse. Note that because this analysis was
performed over unique packages, the number of APKs that
misuse crypto-libraries will be higher.
We manually analyzed the 24 APKs that were ﬂagged by
CogniCrypt as having BLE-relevant issues, and examined
the identiﬁed instances of bad cipher modes and hardcoded
keys/Initialization Vectors (IVs). With regard to insecure
block cipher modes, we found that explicit use of ECB was
prevalent (9 out of 10 cases), but there was also one case
where Cipher.getInstance("AES") was used without the
mode being speciﬁed, which may default to ECB depending
on the cryptographic provider. When analyzing keys, we ob-
served that several applications directly contained hardcoded
keys as byte arrays or strings. Three applications retrieved
keys from JSON ﬁles. In two cases, keys were generated from
the ANDROID_ID, which is a system setting that is readable by
all applications. We also observed one instance where a key
was obtained from a server via HTTP (not HTTPS).
3There are instances where two applications may have unique package
names, but which actually incorporate much the same functionality. This is
often the case when the same developer produces branded variants of an appli-
cation for different clients in a single industry. For example, two applications
could have unique package names com.myapp.app1 and com.myapp.app2,
but their functionality may be derived from a common codebase com.myapp.
Table 5: Number of Packages with Cryptographic Misuse
Misuse Typea
#Unique Packages
ECB (or other bad mode)
Non-random key
Non-random IV
Bad IV used with Cipher
Bad key used with Cipher
Incomplete operation (dead code)
a Description of misuse based on [17, 30].
10
6
10
7
11
4
This analysis shows that several real-world applications
contain basic mistakes in their use of crypto-libraries and
handling of sensitive data, which means that the BLE data
will not be secure despite the use of cryptography.
4.5.4 Trends over Time
Figure 6 shows the trend of application-layer security over
time for applications that incorporate calls to BLE reads or
writes. The graph depicts the percentage of applications that
do not have cryptographic protection for either type of access.
The overall downward trend suggests that there has been some
improvement in application-layer security between the years
2014 and 2017 (we refrain from making observations about
APKs from 2013 as they were very few in number, and about
APKs from 2018 as the dataset is not yet fully populated for
this year). However, it should be noted that, even in 2017,
which had the smallest percentage of APKs without cryptog-
raphy, these APKs corresponded to 128 million downloads,
which is a signiﬁcant number.
4.5.5 Application-Layer Security by Category
The percentage of applications that use cryptographically
processed data from each major application category has been
graphed in Figure 7. While it would be reasonable to expect
that most “Medical” applications would implement some level
of application-layer security, the results show that fewer than
30% of applications under this category actually have such
protection mechanisms. However, it is possible that the reason
for this is that the devices implement the standard Bluetooth
SIG adopted proﬁles, which do not mandate any security
apart from pairing, as mentioned in Section 3.3. In fact, of the
APKs categorized under “Medical” and with no cryptographic
protection for either reads or writes, we found that three of
the top ten (in terms of installations) contained identiﬁers for
the standard Bluetooth Glucose Service.
Perhaps surprisingly, APKs that are categorized under
“Business”, “Shopping” and “Travel & Local” appear to be
the most likely to incorporate application-layer security, with
around 50% of all such applications being identiﬁed as having
12    28th USENIX Security Symposium
USENIX Association
100
80
60
40
y
h
p
a
r
g
o
t
p
y
r
C
o
n
h
t
i
w
s
K
P
A
%
2013
2014
2015
2016
2017
2018
Year
Figure 6: Application-layer security trends over time. Notes:
Graph depicts APKs that perform BLE reads or writes, and
have no cryptographic protection for either. APKs with dates
that are invalid [39] or older than 2012 (when native BLE
support was introduced for Android) have not been included.
cryptographically processed BLE data with High conﬁdence.
However, in over 85% of such occurrences, this was found to
be due to the Estimote beacon library.
4.5.6 Impact Analysis
While 18,929 BLE-enabled applications may seem like a rel-
atively small number of applications when compared with
the initial dataset of 4.6 million+, a single application may
correspond to multiple BLE devices, sometimes even millions
of devices as is the case with ﬁtness trackers [25]. For exam-
ple, even if we consider the slightly restrictive case of unique
applications that do not use cryptography with either reads or
writes, the cumulative install count is still in excess of 1,005
million. This shows that the attack surface is much larger than
may be indicated by the number of APKs.
It is of course a possibility that the data that is read from
a BLE peripheral has no impact on user security or privacy
(e.g., device battery levels). Understanding the data within
APKs would require a more complex static analysis and is
left as future work.
4.6 Case Study: Firmware Update over BLE
When analyzing our results, we found that one of the APKs
that was identiﬁed as not having application-layer security
was designed for use with a ﬁtness tracker from our test device
set. The tracker is a low-cost model that, based on the install
count on Google Play (1,000,000+), appears to be widely
used. An analysis of the APK suggested that the device used
the Nordic BLE chipset, which could be put into the Legacy
a
t
a
D
d
e
s
s
e
c
o
r
P
y
l
l
a
c
i
h
p
a
r
g
o
t
p
y
r
C
h
t
i
w
s
K
P
A
%
100
80
60
40
20
0
s
l
o
o
T
s
t
r
o
p
S
s
s
e
n
i
s
u
B
e
l
y
t
s
e
f
i
L
s
s
e
n
t