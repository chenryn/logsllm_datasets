hk(x) 
…
0/1
0/1 
0                                                m-1 
                                       m
…
0/1 
0                                          s-1                 
                           s=2128/k                                     m -s
0/1 
(a)
(b)
Figure 1. (a) A scenario where all the bits in
the Bloom ﬁlter are utilisable – no unreach-
able bits. This is the case when 2128/k ≥ m
(assuming that MD5 is used). A good exam-
ple is the Bloom ﬁlter built by Fan et al [4],
where k = 4. (b) A scenario where only a part
of the Bloom ﬁlter can be utilised. This is the
case when 2128/k < m (also assuming that
MD5 is used). The unreachable bits, of size
m − 2128/k, are shaded.
In Razor, each spam signature is typically a 160-bit
hashed value calculated with SHA-1. Suppose that the fol-
lowing k hash functions are used to construct the Bloom ﬁl-
ters for Razor:
hi(x) = (the i-th chunk of SHA-1(x)) mod m,
where i = 1, ..., k and k|160. The number of utilis-
able bits in the ﬁlter can be increased, but bounded by
min(m, 2160/k). The same difﬁculty still exists. For exam-
ple, when k = 8, the number of utilisable bits in the ﬁl-
ter is determined by min(m, 220), which is not
large
enough for many applications.
That is, although Bloom ﬁlters as constructed in [4] em-
pirically achieved good performance, they are not a good
choice in Razor. Such constructions cannot be easily gener-
alised, either.
One partial solution is to divide the Bloom ﬁlter into k
chunks, and each hi hash maps x into the i-th chunk of the
ﬁlter (when necessary, a modulus of the hashed value hi(x)
by (cid:4)m/k(cid:5) should be taken). This can increase the utilis-
able bits in the ﬁlter by a factor of k. But when m is suf-
ﬁciently large, in each chunk of the ﬁlter, (cid:4)m/k(cid:5) − 2160/k
(if SHA-1 is used) or (cid:4)m/k(cid:5) − 2128/k (if MD5 is used) bits
will never be reachable. That is, in total, m − k ∗ 2160/k or
m − k ∗ 2128/k bits are still unreachable in the ﬁlter (see
Fig.2). To address this, a new hash function i could be in-
troduced to map the collection of hi(x) values into the range
{0, 1, ...,(cid:4)m/k(cid:5) − 1}.
In future, Razor might want to use a longer hash value
representing a spam message, avoiding the above inconve-
nience all together in the ﬁrst place. But for now, we can
also address this problem by constructing Bloom ﬁlters in a
different way. For example, universal hashing [2] is a good
0/1 … 0/1 
 0                     s-1                                          0                        s-1           
… 
… 
s = 2128/k             (cid:170)m/k(cid:186) - s 
      s                 (cid:170)m/k(cid:186) - s 
                                               m 
Figure 2. Each hi hash maps x into the i-th
chunk of the Bloom ﬁlter. The shaded part
highlights unreachable bits in each chunk of
the ﬁlter. Assume that MD5 is used.
alternative building block, as shown in [9]; it is also appli-
cable in our setting.
The class of universal hash functions is of the following
form:
hc,d(x) = ((cx + d) mod p) mod m
(2)
where p is a prime, m, c, d are integers, 0 < c < p and 0 ≤
d < p. Such hash functions map a given universe U of keys
into the range {0, 1, ..., m−1}. Construction of k such hash
functions will be discussed in Section 5.
Signature revocation. Although a Bloom ﬁlter does not
support deletion, there is a simple solution to support signa-
ture revocation in the Razor system. We can build a Bloom
ﬁlter for all spam signatures, which we call the Spam Bloom
ﬁlter (SBF), and build another for all revoked signatures,
which we call the Revocation Bloom ﬁlter (RBF). Thus,
spam detection becomes membership testing in these two
Bloom ﬁlters. For example, we can ﬁrst look up the SBF,
and then the RBF. The results will be decided as follows.
1. If x is not in SBF, it is not spam;
2. If x is both in SBF and in RBF, it is not spam; if x is
in SBF but not in RBF, it is spam.
The order for membership testing can be turned around.
Which order is better (more efﬁcient) really depends on
the situation. If you expect more legitimate messages than
spam, probably you should look up the SBF ﬁrst.
Other concerns and results in applying the Bloom ﬁlters
to Razor are now straightforward, as follows:
• Signature lookup. Lookups in SBF and RBF are both
O(1).
• Storage saving. With a Bloom ﬁlter, only m bits are
required to record n distinct signatures, each of 160
bits. However, when such a collection of signatures
was not organised with a Bloom ﬁlter, its actual stor-
age would be: 160 ∗ n + the size of indexing hash ta-
bles.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Table 1 shows storage saving achieved by a
Bloom ﬁlter under different
(m, n, k) conﬁgura-
tions. To simplify the calculation, the storage com-
pression rate (CR) was estimated with the formula CR
= 160 ∗ n/m.
m/n
16
10
16
40
40
k
4
8
8
8
16
CR False positives
2.394 × 10−3
8.455 × 10−3
5.745 × 10−4
1.166 × 10−6
1.948 × 10−8
10
16
10
4
4
Table 1. Storage saving and trade-offs be-
tween m/n, k, f in a Bloom ﬁlter
• Signature database merging. When each Ra-
zor server uses the same parameters (m, n, k) and
the same hash functions to build their Bloom ﬁl-
ters, there is a simple but fast algorithm for merg-
ing signature databases: only a Bloom ﬁlter is needed
to be transmitted from one server to another, and merg-
ing multiple databases is simply to OR the Bloom
ﬁlters bit by bit.
• False positives and negatives. In this enhancement to
the Razor system, we cannot eliminate false positives
in spam detection. The Revocation Bloom Filter is also
likely to introduce some false negatives. But both false
positives and negatives can be tuned to be very small.
For example, Table 1 shows the false positive rates in
a Bloom ﬁlter under a number of different conﬁgura-
tions. The ﬁgures are estimated with Equation (1).
On the other hand, false positives and negatives oc-
cur in Razor even before any change is introduced
to the system. For example, false positives will occur
when a legitimate message is reported as spam and its
signature included in a spam database. False negatives
will occur when a database is not updated to include
new spam signatures in time. However, Bloom ﬁlters
do not provide a solution to address these false posi-
tives and negatives.
• Signature aging. It is difﬁcult to purge individual sig-
natures from a Bloom ﬁlter. However, one simple way
of supporting signature expiration is to organise a sig-
nature database with a number of temporally ordered
Bloom ﬁlters, rather than a single one. Signatures re-
ported in the same period will be inserted into the same
ﬁlter. When all signatures in a ﬁlter has become inac-
tive for a predeﬁned period, the ﬁlter will be discarded.
In our view, even if there is a small additional chance of
false positives/negatives introduced by Bloom ﬁlters, it will
be outweighed by the advantages they introduce.
4. Enhancing the DCC system with Bloom ﬁl-
ters
The DCC system requires to keep track of the number of
times a message has been reported to a server, i.e. the occur-
rence count of the message. A Bloom ﬁlter cannot record
occurrence counts, but an intuitive extension to the stan-
dard scheme can support counting as follows. The extended
Bloom ﬁlter is an array c of m cells, each being set to zero
initially. Each cell works as a counter. When an element x
is inserted or deleted, the counts c[h1(x)], ..., c[hk(x)] will
be incremented or decremented accordingly.
This extension was ﬁrst reported by Fan et al [4]. How-
ever, they did not look into some useful details. For exam-
ple, it was not discussed how to tell how many times an ele-
ment x had been inserted into the ﬁlter, probably because
this was not relevant in their application. The answer is
simple: min(c[h1(x)], ..., c[hk(x)]) tells the number of oc-
currences of x witnessed by the ﬁlter, although this ﬁgure
occasionally might be just an approximation that is larger
than the real occurrence count. Another useful detail miss-
ing in [4] will be discussed later on.
When such an intuitive extension is applied to the DCC
system, the following features can be achieved.
• Signature lookup is still done in O(1), independent of
the number of signatures.
• Signature deletion is supported by this extended
Bloom ﬁlter. But unlike in Razor, signature revoca-
tion in DCC is not essential for the purpose of spam
detection. A DCC server only accumulates the occur-
rence count of each reported message, and it does not
care whether a particular message is spam or not. How-
ever, it is still useful (e.g. for reducing the size of
a signature database) to apply this signature dele-
tion technique to purge identiﬁed useless signatures
individually.
Since our discussions about counting, i.e. the inser-
tion operation, in this Bloom ﬁlter extension can be
easily extended to the deletion operation, unless other-
wise stated, we do not discuss the deletion case in the
rest of this paper.
• Signature storage. Only m ∗ sizeof(cell) bits are
required to store n signatures and their occurrence
counts. The DCC end-users often use a threshold value
t = 20 to determine whether a message is spam or
not. That is, a message that has been seen for 20 times
somewhere else will be considered as spam, if it is not
from someone appearing on your white list. Therefore,
5 bits per cell in the ﬁlter might be sufﬁcient in the
DCC. Moreover, to provide more ﬂexibility (e.g. some
users might want to use a threshold value larger than
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 200620), we can allow each cell in the ﬁlter to reach 31. If a
count ever exceeds 31, we can simply let it stay at 31.
All this indicates signiﬁcant improvement over the
current solution in DCC, which has to store the follow-
ing all together:
– n signatures, occupying n ∗ sizeof(signature)
– n occurrence counts, of n∗sizeof(count) bytes,
bytes;
and
– a huge hash table created for such a collection of
signatures.
In addition, counts larger than 31 can easily be sup-
ported in each cell of the ﬁlter, which implies more
storage consumption though.
• False positives. A false positive occurs when an el-
ement x does not occur so often, but accidentally
min(c[h1(x)], ..., c[hk(x)])
than its ac-
tual number of insertions1. The probability of such
false positives, denoted by fI,
is the false posi-
tive rate (or counting error rate) in this intuitive
Bloom ﬁlter extension. We will resort
to simula-
tions for an analysis of fI.
larger
is
However, such a false positive does not necessar-
ily lead to a false identiﬁcation of a legitimate email as
spam in DCC. A false positive in DCC occurs only
when a particular email message has its occurrence
count reaching or exceeding the threshold value t (i.e.
c[h1(x)], ..., c[hk(x)] all reach t at least), although it
in fact has not occurred so often. Since the probability
that a counter is increased j times is a binomial ran-
dom variable:
P (ci = j) =
(1/m)j(1 − 1/m)nk−j,
(3)
(cid:2)
(cid:3)
nk
j
the false positive rate in DCC, fdcc, can be estimated
for a given t by
(cid:4) max j(cid:5)
(cid:2)
(cid:3)
nk
j
j=t
fdcc ≈
(cid:6)k
(1/m)j(1 − 1/m)nk−j
Thus, when each DCC server uses the same parame-
ters (m, n, k) and the same hash functions, a simple
but fast algorithm for merging signature database can
be supported: cell by cell addition.
For the ﬁrst round of database synchronisation, an
extended Bloom ﬁlter is needed to be transmitted from
one server to another. However, for any subsequent
round of synchronisation, we can further reduce traf-
ﬁc exchanged between DCC servers by transmitting a
delta Bloom ﬁlter only. For example, the ﬁrst synchro-
nisation between servers a and b at time interval t0 may
require each server to transmit its own Bloom ﬁlter to
the other, and then the merging can be done as follows.
For i = 0, ..., m − 1,
ct0
sync[i] =
31