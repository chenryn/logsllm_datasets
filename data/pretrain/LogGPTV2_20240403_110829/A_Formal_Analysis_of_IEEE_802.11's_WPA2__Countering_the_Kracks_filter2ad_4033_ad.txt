pairwise transient key PTK = KDF(PMK,ANonce,SNonce).
Once it knows the PTK, it can then use the PTK to decrypt
subsequent messages, including those that contain group tem-
poral keys.
In general, we allow the attacker to reveal pairwise master
keys in order to cover cases in which certain protocol partic-
ipants are compromised (e.g., because the attacker watched
them type their WiFi password). Our statement for secrecy of
the pairwise master key must therefore state that a pairwise
master key is secret if it has not been revealed by the attacker
(and even if other pairwise master keys have been revealed).
In guarded ﬁrst-order logic, we formulated this by saying that
if a supplicant and an authenticator share a pairwise master
key (i.e., they are associated with each other), then the attacker
can only know the key if it has been revealed:
∀ auth authThread supp suppThread PMK t1 t2.
(Associate(auth,authThread,supp,suppThread,PMK)@t1 ∧
K(PMK)@t2)
⇒ ∃ t3. t3 < t2 ∧ RevealPMK(PMK)@t3
Compared to the other lemmas (secrecy of the other keys
and authentication), proving secrecy of the pairwise master
key is simpler. The intuitive reasons for this are:
• The pairwise master key is never sent over the network.
Instead, it is only used as part of the input to a key deriva-
tion function for deriving pairwise transient keys.
• The pairwise master key itself is never used as an encryp-
tion key. We therefore don’t need to prove the absence
of nonce reuse for this key.
For the lemmas we discuss in the following, things are unfor-
tunately more complicated.
4.2 Secrecy of the Pairwise Transient Key
We have two different statements for the secrecy of the pair-
wise transient key: one from the perspective of the supplicant
and the other from the perspective of the authenticator. As
discussed before, we prove secrecy under the assumption that
the pairwise master key between the authenticator and the
supplicant has not been revealed. We do, however, allow the
attacker to reveal other pairwise master keys, in particular
those between the same authenticator and other supplicants.
Such a key revelation could, for instance, happen in practice if
an attacker ﬁrst gains access to the PMK of some supplicant
S1 (for instance, by watching a user enter their WiFi pass-
word) and then tries to use the PMK of S1 to attack another
supplicant S2.
From the viewpoint of the supplicant, the corresponding
lemma thus says that if the supplicant has installed a pairwise
transient key PTK that has been derived from a pairwise
master key PMK, and if PMK has not been revealed, then
PTK is secret. In guarded ﬁrst-order logic, the statement looks
as follows:
∀ suppThread supp PMK PTK . . . t1.
(SuppInstalled(suppThread,supp,PMK,PTK, . . . )@t1 ∧
¬∃ t2. RevealPMK(PMK)@t2)
⇒ ¬∃ t3. K(PTK)@t3
The corresponding statement from the authenticator’s view is
then analogous, replacing SuppInstalled by AuthInstalled.
To prove secrecy of the pairwise transient key, we had to
prove several lemmas that guarantee the absence of nonce
reuse. In particular, we proved that no key reinstallations of
the pairwise transient key are possible since such key rein-
stallations could lead to nonce reuse, as discussed earlier in
Section 2.2. Proving the absence of nonce reuse also turned
out to be clearly the most complicated part about proving
the secrecy of the pairwise transient key. This is interesting
insofar as earlier veriﬁcation attempts of WPA2 neglected
nonce reuse completely.
4.3 Secrecy of Group Temporal Keys
As with the pairwise transient key, we proved the secrecy of
the group temporal keys from the perspectives of both the sup-
plicant and the authenticator. Group temporal keys are shared
between a single authenticator and a group of supplicants.
This means that if only one of the supplicants is compromised
(i.e., the pairwise master key it shares with the authenticator
USENIX Association
29th USENIX Security Symposium    11
is known to the attacker), the attacker will be able to control
the whole group trafﬁc between the authenticator and all its
supplicants. Thus, when formulating the secrecy statements
for the group temporal keys, we have to assume that none of
the pairwise master keys are compromised.
From the perspective of the authenticator, our respective
lemma says that if an authenticator has installed a group
temporal key, and if none of the pairwise master keys have
been revealed, then the group temporal key is secret, or in
guarded ﬁrst-order logic:
∀ auth GTK nonce index t1.
(AuthInstalledGTK(auth,(cid:104)GTK,nonce,index(cid:105))@t1 ∧
¬∃ PMK t2. RevealPMK(PMK)@t2)
⇒ ¬∃ t3. K(GTK)@t3
The corresponding lemma from the supplicant’s point of view
is similar, replacing the condition that the authenticator has
installed the group temporal key (AuthInstalledGTK) with
the condition that the supplicant has installed it.
Note that the secrecy of the group temporal keys depends
not only on the secrecy of the pairwise master key, but also on
the secrecy of pairwise transient keys because group temporal
keys are encrypted with the pairwise transient key when trans-
mitted from an authenticator to its supplicants. The secrecy
proofs for the group temporal keys thus rely not only on the
absence of nonce reuse but also on our lemmas that show the
secrecy of the pairwise transient key.
4.4 Authentication / Injective Agreement
When it comes to authentication, we prove injective agree-
ment—as deﬁned by Lowe in his hierarchy of authentication
speciﬁcations [21]—for the four-way handshake. Intuitively,
this means that an authenticator’s executions of the four-way
handshake correspond to unique executions by a supplicant
(and vice versa, since we prove injective agreement in both
directions). Lowe’s original deﬁnition is as follows:
“We say that a protocol guarantees to an initiator A agree-
ment with a responder B on a set of data items ds if, whenever
A (acting as initiator) completes a run of the protocol, appar-
ently with responder B, then B has previously been running
the protocol, apparently with A, and B was acting as respon-
der in his run, and the two agents agreed on the data values
corresponding to all the variables in ds, and each such run
of A corresponds to a unique run of B.”
To map this deﬁnition to our setting, we deﬁne the two
agents to be the supplicant and the authenticator. As men-
tioned, we prove injective agreement from two perspectives:
One where the authenticator is the initiator, A, and the sup-
plicant is the responder, B, and one where the two roles are
reversed. As the set of data items, ds, we deﬁne the set con-
taining the pairwise master key, the pairwise transient key, the
ANonce, and the SNonce.
When the authenticator is viewed as the initiator, our formu-
lation of injective agreement states the following: Whenever
an authenticator A ﬁnishes a four-way handshake, apparently
with supplicant S, then the supplicant has previously ﬁnished
a four-way handshake, apparently with A, and the supplicant
and the authenticator agree on the values of the pairwise
master key, the pairwise transient key, the ANonce, and the
SNonce. Moreover, each run of the four-way handshake by the
authenticator corresponds to a unique run of the supplicant.
We proved the second part (runs of the authenticator cor-
respond to unique runs of the supplicant) in a separate state-
ment. For our formulation of the ﬁrst part, given in the follow-
ing, we used facts that denote when a party completes a run
(AuthCommit and SuppCommit) and when it was running a
four-way handshake (AuthRunning and SuppRunning).
This is captured by the following formula:
∀ auth supp PMK ANonce SNonce PTK t1.
(AuthCommit(auth,supp,PMK,ANonce,SNonce,PTK)@t1 ∧
¬∃ t2. RevealPMK(PMK)@t2)
⇒ (∃ t3. t3 < t1 ∧
SuppRunning(supp,auth,PMK,ANonce,SNonce,PTK)@t3)
When the roles are reversed, the statement is analogous, with
Auth and Supp swapped.
Note that on the authenticator side, a commit happens when
the authenticator receives the fourth (i.e., the ﬁnal) handshake
message. In this case, things are straightforward because the
fourth message acts as a conﬁrmation to the authenticator that
the supplicant has ﬁnished the run of the four-way handshake.
Thus, in this case we deﬁne that the supplicant was running
the four-way handshake if it has sent the fourth message.
When the roles are reversed, we deﬁne that a commit of
the supplicant happens when the supplicant sends the fourth
message. At this point, the supplicant cannot be sure that the
authenticator has ﬁnished the whole four-way handshake; all it
could possibly know is that the authenticator has sent the third
message. In this case, we thus deﬁne that the authenticator
was running the protocol if it has sent the third message.
As mentioned, these statements do not yet guarantee that
for every run of an initiator there is exactly one run of the re-
sponder. One way to prove this is to show that for a particular
SNonce, there can be at most one execution of the four-way
handshake on the supplicant side, and similarly, that for a
particular ANonce, there can be at most one execution of the
four-way handshake on the authenticator side. This is implied
by our uniqueness lemmas discussed in Appendix A. We thus
get injective agreement for the four-way handshake from the
perspectives of both the supplicant and the authenticator.
4.5 Analysis Summary
Except for the two authentication lemmas and one helper
lemma, all lemmas (including the helper lemmas) can be
12    29th USENIX Security Symposium
USENIX Association
proved automatically by Tamarin, which takes around two
hours overall on an 8-core machine with 30 GB of memory.
The proofs of most lemmas take only a few seconds, with
two helper lemmas (stating that the authenticator and the
supplicant do not reuse nonces when encrypting messages)
taking nearly all of the time. A reason for this is that in the
proofs Tamarin considers all possible combinations of cases
in which encrypted messages are sent. For the authentication
lemmas and one helper lemma, Tamarin needs some manual
guidance during proof search. We do, however, believe that
ﬁne-tuning the model (or providing custom heuristics) would
help Tamarin to prove these lemmas fully automatically.
5 Results
After having presented the details of how we built our formal
model of WPA2 and how we approached different aspects of
the formal analysis, we now present the results of the analysis.
5.1 Behavior Covered by our Formal Model
Our formal model covers all the standard traces for
• the four-way handshake,
• the group-key handshake,
• communication for WNM sleep mode.
Moreover, our model also covers non-standard traces. For
instance, by removing the patches aimed at preventing key-
reinstallation attacks, we can cover traces in which these key-
reinstallation attacks are executed, thus violating secrecy prop-
erties for the corresponding keys. We explain details below.
Four-Way Handshake Our model covers not only the exe-
cution of an ideal four-way handshake as depicted in Figure 1
but also all other standard behavior. For example, messages
can be sent and received multiple times in cases where the
IEEE standard speciﬁes it, and rekeys of the pairwise tran-
sient key can be performed arbitrarily often. As rekeys hap-
pen after the ﬁrst installation of a pairwise transient key, the
standard deﬁnes that all trafﬁc that follows is protected by a
data-conﬁdentiality protocol. Our model captures this behav-
ior by protecting messages in rekeys accordingly, assuming
a weakest possible encryption scheme in which the reuse
of nonces allows the attacker to learn a key. Note that this
means that our model would also cover traces in which the
encryption of protocol messages leads to the reuse of nonces.
Group-Key Handshake Our model covers group-key
handshakes in a very liberal way, basically allowing all traces
where an authenticator generates new group keys at any pos-
sible point in time. The authenticator can transmit new group
keys (and their corresponding data) to all supplicants asso-
ciated with it by performing separate group-key handshakes
with all of them. As the IEEE standard allows an authenticator
to transmit a group key multiple times, our model also covers
traces in which such retransmissions occur.
WNM Sleep Mode We cover all traces in which a suppli-
cant enters and leaves WNM sleep mode, involving all the
messages exchanged between the supplicant and the authenti-
cator. In particular, we model the “dangerous” case in which
the authenticator transmits the current group temporal key to
the supplicant when the supplicant leaves WNM sleep mode.
Property
Secrecy
Authentication
Object
pairwise master key
pairwise transient key
group temporal keys
four-way handshake
Perspective:
Supp. Auth.
()






Table 1: Properties formally proven for the patched WPA2
protocol design
5.2 Patches And Their Effectiveness
Our analysis conﬁrms that two patches/countermeasures—
suggested by Vanhoef and Piessens with the aim of preventing
key-reinstallation attacks—sufﬁce to prove all the security
properties (injective agreement and secrecy of keys) that are
within the scope of our analysis:
(1) A supplicant should not reset or modify the nonces of a
key (pairwise transient key or group temporal key) if that
key is currently installed [29].
(2) A supplicant should delete the current group temporal
key before entering WNM sleep mode. [30]
Especially without the ﬁrst countermeasure (which we mod-
eled with a simple action fact that checks if the new key
differs from the old key when performing a key installation),
secrecy of the pairwise transient key and thus also of the
group temporal key cannot be guaranteed. This is because of
key-reinstallation attacks that are covered by our model.
The second measure aims at preventing group-key reinstal-
lations on the receiver (supplicant) side. As demonstrated by
Vanhoef and Piessens [30], such group-key reinstallations can
allow an attacker to replay group messages to the supplicant.
While such group-key reinstallations don’t violate any of the
security properties proved in our analysis, we want to high-
light that we did neither prove that they are impossible nor did
we ﬁnd such reinstallation attacks. We believe that proving
or disproving the absence of group-key reinstallations on the
USENIX Association
29th USENIX Security Symposium    13
supplicant side requires signiﬁcant effort and is thus part of
our future work.
Crucially, our analysis also does not reveal any other attacks.
In other words, the KRACK attacks and their variants seem to
be the only remaining attack vector on the protocol’s design.
Since the patches indeed prevent those attacks, we obtain
stronger conﬁdence in WPA2’s design.
As with any model, there are still potential attack vectors
that are outside of our analysis. Notable examples are side
channels, the wider 802.11 stack design, and the decisions
made for individual implementations. Given the complexity
of the standard there is substantial room for misinterpretation
or errors in implementation. Table 1 summarizes our results.
5.3 Kr00k Vulnerability
The so-called Kr00k vulnerability [16] does not indicate a
vulnerability in the IEEE standard that we analyze; rather, it
is related to a ﬂaw in the implementations of some WiFi chips.
In particular, a Kr00k attack exploits that—counter to the ex-
pected behavior—some (unpatched) WiFi chips still encrypt
and transmit messages after a client has been disassociated.
The discovery of the Kr00k vulnerability therefore doesn’t