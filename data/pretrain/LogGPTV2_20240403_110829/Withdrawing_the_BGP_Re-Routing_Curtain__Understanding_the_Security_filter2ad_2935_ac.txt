steps to ensure that our experiments did not result in the
disruption of Internet
trafﬁc and were ethically sound. In
particular, we ensure our experiments conform with the Menlo
Report [11] and the policies of our infrastructure providers
and external network operators. To that end, we ﬁrst engaged
with the operator community and leveraged their expertise
throughout our experiments. Second, we designed experiments
to have minimal impact on routers and the normal network
trafﬁc they carry. In this section we will touch on these steps.
Working with Operators: To ensure care was taken through-
out all experiments, we worked extensively with the network
operator responsible for campus-wide connectivity, quality-of-
service, and routing at the university AS used in our experi-
ments. This individual assisted in designing our experiments
such that the concerns of external network operators on the
Internet would not be affected adversely by our study, while
also not biasing our results. In addition to the university
operator, we worked extensively with PEERING operators
from USC and Columbia throughout our study’s design and
execution. PEERING operators have a large amount of collec-
tive experience running active measurements on the Internet,
which we leveraged to build non-disruptive experiments.
Signiﬁcant care was taken to notify various groups of our
activities. In accordance with the PEERING ethics policy,
we announced to the RIPE and NANOG mailing lists prior
to experiments the details of the study, allowing operators
the ability to opt out. Over the course of our experiments
we monitored our own emails and the mailing lists. In total,
4 emails were received. Of the e-mails received, no parties
asked to opt-out. For each email received, we responded
promptly, explained our study, and incorporated any feedback
provided.
Minimizing Experimental Impact: BGP path selection is
conducted on a per-preﬁx basis. Meaning that advertisements
for a particular preﬁx will only impact the routing of data
bound for hosts in that preﬁx. The preﬁxes used for our
experimental BGP advertisements were allocated either by
PEERING or the university for the express purpose of con-
ducting these tests. Outside of a single host that received
traceroutes, no other hosts resided inside these IP preﬁxes.
No trafﬁc other than traceroutes executed as part of our
experiments were re-routed. This includes trafﬁc for other IP
preﬁxes owned by the poisoning AS and any trafﬁc to or from
the poisoned ASes.
Another potential concern is the amount of added, and
potentially unexpected, bandwidth load we place on links we
steer routes onto. Since the only trafﬁc that was re-routed as a
result of the experiments was traceroute trafﬁc bound for our
own host, this added trafﬁc load was exceptionally low. The
bandwidth consumed by our measurements did not exceed 1
Kbps at peak.
Fig. 3: Measurement infrastructure from our experiments; incorporat-
ing CAIDA’s BGPStream, RIPE Atlas, PEERING, a university AS,
RouteViews, and RIPE RIS
Poisoned advertisements are in the following format, which
provides neighbor validation for the ﬁrst AS and ROV for the
last. This setup mirrors existing usage of AS-path prepending
for trafﬁc engineering use cases.
(cid:123)(cid:122)
(cid:125)
{ ASorigin, ASAV1, ASAV2, . . . , ASAVN , AVorigin
(cid:124)
For ROV
}
(1)
Finally, we monitor our BGP advertisements propagation
from all 37 BGP update collectors available from CAIDA’s
BGPStream [42]. These collectors live physically within
RouteViews [47] and RIPE NCC’s network [46].
Data-Plane Infrastructure: We utilize RIPE Atlas [45] to
measure data-plane reactions to poison announcements. In
total, we were able to conduct
traceroutes across 10% of
the ASes on the Internet and 92% of the countries around
the world. We leverage RIPE Atlas’s mapping of IPs to
ASNs for discovering the AS-level path. For the path steering
measurements using BGP poisoning, we only use 1 probe per
AS, since we care about measuring new AS-level return paths,
not router-level paths. We attempted to use every AS within the
Atlas infrastructure as long as the probe was responsive and
stable. We tried all probes available, but only 10% of ASes
could be covered with responsive Atlas probes. While a system
such as PlanetLab may also have been useful, PlanetLab has
signiﬁcantly smaller AS coverage compared to Atlas.
Timing Considerations: To ensure that our advertisements on
the control-plane have propagated successfully by the time of
traceroutes, our experiments wait at least 2 minutes between
measurements after each BGP advertisement, and in some
cases 10 minutes if conducted via PEERING infrastructure.
These wait
times help prevent route-ﬂap dampening [62],
[43] and ensure expiration of minimum route advertisement
6
Traceroutes  to Poisoning  ASes...Poisoned BGP Advertisements and  Return Trafﬁc from ATLAS Probes ExaBGP  Commands......CAIDA BGPStreamPoisoning ASes PEERING and  University RoutersSystem  Controller  ExaBGP  and BIRD (BGP daemons) RouteViews RIPE RIS The Internet  RIPE  ATLAS APIRe-Routed AS (w/ probe) (edge + core, n=1460) Re-Routed AS (w/ probe) (edge + core, n=1460) Original Path New Discovered Path (n=5)BGP Update  Collector (n=32) (n=5)BGP Updates (n=100k) RIPE ATLAS RIPE ATLAS Besides minimizing non-experimental
trafﬁc, we mini-
mized the impact our BGP advertisements had on the routers
themselves. Our BGP advertisements were spaced in intervals
also ranging from tens of minutes up to hours. Resulting
in a negligible increase to router workloads given that on
average BGP routers currently receive 16 updates per second
during normal operation [2]. All updates were withdrawn at
the conclusion of each experiment, preventing unnecessary
updates occupying space in routing tables. Furthermore, all
BGP updates conformed to the BGP RFC and were not
malformed in any way.
The largest concern to operators were our experiments
measuring the propagation of long paths on the Internet,
described earlier in Section VI-B. Several historical incidents,
most notably the SuproNet incident [67], have demonstrated
that exceptionally long AS level paths can potentially cause
instability in BGP speakers. Underscoring this point were
emails from operators on the NANOG mailing list 2 that
appeared several months before our experiments complaining
about instability in Quagga routers as a result of the adver-
tisement of AS paths in excess of 1,000 ASes. As a result, all
experiments involving long paths conformed to the ﬁltering
policies of our next hop providers. In the case of PEERING
experiments, administrators limited our advertisements to 15
hops, and for the university, our upstream providers (two large
transit providers located primarily in the United States) limited
us to advertisements of 255 total ASes. These limits were
enforced with ﬁlters both in the experimental infrastructure and
at the upstream provider. In addition, such experiments were
conducted with 40 minute intervals between announcements
in an effort to allow operators to contact us in the case of any
instability resulting from our experiments.
V. FEASIBILITY OF STEERING RETURN PATHS
Our ﬁrst set of experiments explore the degree to which a
poisoning AS can, in practice rather than simulation, change
the best path an arbitrary remote AS uses to reach the
poisoning AS. We call this rerouting behavior return path
steering. Many security-related reasons for an AS to utilize
return path steering focus on ﬁnding paths which avoid speciﬁc
ASes. As a consequence, we are interested in more than simply
if an AS can steer returns paths. We are interested in the
diversity of paths available to a poisoning AS, the graph-
theoretic characteristics of new usable paths, and to understand
where such return paths play into security systems. In this
section we both quantify the number of potential return paths
we can steer a remote AS onto and dive deeply into the
properties of these alternative paths. This analysis includes
quantifying the diversity of transit ASes along those alternative
paths, computing weighted and unweighted minimum cuts of
the topology based on AS properties, and exploring latency
differences between alternative paths. We also attempt
to
reproduce past security research and build statistical models
that represent how successfully an AS can conduct return path
steering.
2https://lists.gt.net/nanog/users/195871?search_string=bill%20herrin;
#195871
A. Experimental Design and Data Collection
least
We explore the properties of alternative return paths by
enumerating the paths a poisoning AS can move a remote
AS onto via return path steering. Our set of poisoning ASes
consisted of all ASes hosting a PEERING router plus the
university AS. When conducting poisoning, the poisoning AS
will only steer one remote/steered AS at a time, where the
remote AS is at
two AS-level hops away from the
poisoning AS. This is critical to what we want to measure
for security purposes. In this component of our study, we do
not intend to measure new policies or congestion directly, as
this has been done in prior work by Anwar et al. [1] which
used multiple poisoning ASes from PEERING to steer the
same set of remote ASes. However, Anwar et al.’s algorithm
is fundamentally similar to ours. We use all available and
responsive RIPE Atlas probes in unique ASes as steered AS
targets. We collect BGP updates during the process in order
to ensure our routes propagate and no disruption occurs. In
total, we conducted our return path enumeration experiment
for 1,888 individual remote ASes, or slightly more than 3%
of the IPv4 ASes that participate in BGP [2]. We present the
algorithm for the experiment below. The recursive function
SteerPaths builds a poison mapping. This data structure maps
the poisoned ASes required to reach a steered path. For all
1,888 instances, we capture the ASes and IPs of the original
and all new paths,
latencies at every hop, geographic IP
locations, the set of poisoned ASes need to steer onto each
successive path, and other relevant path metadata. This dataset
will be made public upon acceptance. Our poisoning algorithm
is measured to be successful when we see RIPE Atlas switch
the path it is using to the poisoning AS. We infer that this
sudden switch in path shortly after we conﬁrm our poisoned
BGP updates have propagated is due to the poisoning itself.
Algorithm: Recursive path steering algorithm
1 recursive function SteerPaths
(src, dest, nextP oison, currentP oisons, mapping)
Input: poisoning AS src, steered AS dest, next poisoned AS
nextP oison, current poisons currentP oisons,
poisonMapping mapping
2 currentP ath = src.pathT o(dest)
3 poisonDepth = currentP ath.indexOf (nextP oison)
4 previousHop = currentP ath[poisonDepth − 1]
5 newP oisons = currentP oisons + nextP oison
6
7 dest.poison(newP oisons)
8 currentP ath = src.pathT o(dest)
9 mapping.put(newP oisons, currentP ath)
10 if currentP ath == ∅ then
disconnected = true;
11
12 end
13 newP revHop = currentP ath[poisonDepth − 1]
14 if !disconnected && newP revHop == previousHop then
15
16
17 end
18 dest.poison(currentP oisons)
19 poisonIndex = currentP ath.indexOf (nextP oison)
20 if currentP ath[poisonDepth + 1] == dest then
21
SteerP aths(src, dest, currentP ath[poisonDepth],
newP oisons, mapping);
SteerP aths(src, dest, currentP ath[poisonDepth +
1], currentP oisons, mapping);
22 end
7
(a) Poisons Required to Discover Unique ASes
and Entire Unique Return Paths with a Regres-
sion Line Fit
(b) RTT Comparison, Original vs New Return
Paths
(c) Active Measurement vs Simulation for an
Identical Set of Poisoning-Steered AS Pairs
Fig. 4: Return path steering metrics. Figure 4a shows the number of poisons required to reach steered paths. Figure 4b shows the difference
in measured RTT between original paths and steered paths. Figure 4c re-evaluates Smith et al.’s Routing Around Congestion defense
B. Steering Return Paths
We successfully steered 1,460 out of 1,888 remote ASes, or
77%, onto at least one alternative return path. The unsuccessful
cases arose due to default routes (discussed in Section VII-B)
or poison ﬁltering (discussed in Section VI). For each case
of successful poisoning we analyzed several metrics:
the
number of unique alternate steered paths discovered and ASes
traversed, the number of poisoned ASes needed to reach those
paths, centrality measures of the graph formed by the steered
paths, minimum cuts of this graph, and latency differences
between the original path and the alternate return paths.
Summary statistics of several of these measurements are shown
in Table II.
Metric
Cases of Unsuccessful Return Path Steering
Cases of Successful Return Path Steering
Overall Unique New ASes
Average Unique Steered Paths Per Atlas AS
Average Unique New ASes Per Atlas AS
Max Unique Steered Paths
Max Unique New ASes
Avg. Poisons Needed vs. Avg. New ASes
Unique New ASes vs. Unique Poisons Needed
Result
428
1,460
1369
2.25
6.45
19
26
2.03/6.45
1369/468
TABLE II: Summary of return path steering metrics
As shown by Figure 4a, for three quarters of (steered,
poisoning) AS pairs, between 2 and 3 unique paths were
reached on average using return path steering. However, for
some pairs, we ﬁnd nearly 20 unique paths. Clearly, some
ASes are better positioned to execute return path steering. We
dive deeper into which ASes can more easily execute return
path steering using an array of statistical and machine learning
models later in Section V-C. The number of poisons required
to reach these paths scales linearly with both the number of
discovered alternate paths and the number of unique new ASes
on those paths. This is relevant for many systems relying on
return path steering, as each poison increases the advertised
path length by one. We will demonstrate in Section VI that
path length is a major factor in AS operators’ decision to ﬁlter
or propagate received advertisements.
8
A comparison of round trip times between original and
steered paths as measured by traceroutes is shown in Figure 4b.
The original and steered round trip time (RTT) values are
nearly indistinguishable. We ﬁnd that on average we only ob-
served a 2.03% increase in latency on alternative return paths, a
positive indication that the alternative return paths have similar
performance characteristics. Interestingly, we also found that
the new paths tested out of the university AS performed 2.4%
better than the original paths, while the steered paths out of
PEERING ASes performed 4% worse than the original paths.
We believe this is attributable to the proximity of the university
AS to the Internet’s core, versus the relative distance from
the PEERING ASes to the core. These latency measurements
provide supporting evidence that the alternative paths are ﬁt
to carry trafﬁc from an approximate performance perspective,
though the best indicator of path performance would come
from knowing the bandwidth of the links traversed. Unfortu-
nately, such data is highly sensitive and considered an industry
trade secret for an ISP. Our approximation via the link round
trip times is our best estimate to link viability, with more real-
world applicability than the PeeringDB estimated bandwidth
model approach used in simulation by work from Smith and
Schuchard, as well as Tran and Kang [52], [60], [51].
1) Re-evaluation of Nyx: Next, we attempt to reproduce the