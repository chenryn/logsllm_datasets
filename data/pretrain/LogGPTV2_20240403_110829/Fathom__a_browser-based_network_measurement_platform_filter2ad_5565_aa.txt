title:Fathom: a browser-based network measurement platform
author:Mohan Dhawan and
Justin Samuel and
Renata Teixeira and
Christian Kreibich and
Mark Allman and
Nicholas Weaver and
Vern Paxson
Fathom: A Browser-based Network Measurement Platform
∗
Mohan Dhawan
Rutgers University
PI:EMAIL
Christian Kreibich
ICSI & UC San Diego
PI:EMAIL
Justin Samuel
UC Berkeley
PI:EMAIL
:
Renata Teixeira
CNRS & UPMC
PI:EMAIL
Mark Allman
ICSI
PI:EMAIL
Nicholas Weaver
ICSI & UC San Diego
PI:EMAIL
Vern Paxson
ICSI & UC Berkeley
PI:EMAIL
ABSTRACT
For analyzing network performance issues, there can be great utility
in having the capability to measure directly from the perspective of
end systems. Because end systems do not provide any external pro-
gramming interface to measurement functionality, obtaining this
capability today generally requires installing a custom executable
on the system, which can prove prohibitively expensive.
In this
work we leverage the ubiquity of web browsers to demonstrate the
possibilities of browsers themselves offering such a programmable
environment. We present Fathom, a Firefox extension that imple-
ments a number of measurement primitives that enable websites or
other parties to program network measurements using JavaScript.
Fathom is lightweight, imposing < 3.2% overhead in page load
times for popular web pages, and often provides 1 ms timestamp
accuracy. We demonstrate Fathom’s utility with three case studies:
providing a JavaScript version of the Netalyzr network characteri-
zation tool, debugging web access failures, and enabling web sites
to diagnose performance problems of their clients.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General; C.4
[Performance of Systems]: Measurement
techniques; D.2.8
[Software Engineering]: Metrics—performance measures
General Terms
Design, Measurement, Performance, Security
Keywords
Network troubleshooting, network performance, end-host network
measurement, web browser, browser extension
∗This work was done while the author was visiting ICSI.
:This work was done while the author was visiting UC Berkeley
& ICSI.
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA. 
Copyright 2012 ACM  978-1-4503-1705-4/12/11...$15.00. 
1 Introduction
Network measurements from the perspective of end systems often
play a vital role both for researchers who want to develop general
insight into how the Internet functions, and for practitioners aim-
ing to diagnose individual performance issues. To gain insight into
network operation, researchers traditionally either (i) beg acquain-
tances to install a custom measurement tool, or (ii) use or instan-
tiate infrastructure to conduct the measurements (e.g., PlanetLab).
Neither of these options scales to supporting broad measurement
of the network’s edge, limiting the scope of the insight we can ob-
tain. Practitioners, on the other hand, have less interest in develop-
ing general knowledge about networked systems and more interest
in understanding the performance of their own systems, including
understanding why their users experience suboptimal performance.
While systems developed by the research community for general
measurement may aid practitioners in small ways, these systems
do not run on regular users’ end systems and hence do not offer
help with speciﬁc measurement or debugging of user problems.
While researchers and practitioners come to the need for mea-
surement of user end systems from opposite ends of the spectrum—
i.e., one looking for broad, general results, and the other seek-
ing speciﬁc information—both ﬁnd obtaining such measurements
problematic due to the lack of general support in end systems.
While getting users to install programs can sufﬁce for particular,
limited situations, the approach does not scale up: one cannot rely
upon users repeatedly conducting such installations as a building
block for facilitating measurement. One difﬁculty in this regard
concerns users not wanting to continually undergo the hassle of the
process. Another difﬁculty is the challenge that implementors face
in developing portable executables that run correctly across a wide
range of system conﬁgurations. A third issue is one of safety: such
installations, whether for standalone binaries or native code that
extends an existing system, generally require privileged access and
trust in the behavior of the introduced program.
In this work we aim to overcome these difﬁculties by minimiz-
ing the impediments to writing and installing measurement pro-
grams across a large number of end systems. Our vehicle for do-
ing so is Fathom, a browser-based extensible measurement plat-
form. Fathom provides a measurement-oriented API that standard
JavaScript loaded from any web page can tap into to facilitate em-
pirical observation.
We argue that building a measurement platform into the web
browser hits a sweet spot for both deployability and ﬂexibility, thus
providing Fathom with the potential to ﬂourish where other mea-
73surement systems have ﬂoundered. The ubiquity of web browsers,
and the central role they play for a vast array of disparate network
activities, provide an unparalleled scaling potential that holds great
promise for beneﬁting common measurement and troubleshooting
scenarios (§ 2). Like other measurement platforms, Fathom re-
quires users to install a piece of software, a step that generally
presents a signiﬁcant hurdle to widespread adoption. However, the
user only has to do so once to enable a vast range of measure-
ments. By bundling useful Fathom applications with the platform
itself (most notably, a connectivity debugger that works even in
complete absence of connectivity), we provide users an immediate
incentive for installation.
We begin by framing desiderata for a browser-based measure-
ment platform (§ 3), which guide both Fathom’s design and its im-
plementation. Our design (§ 4) includes a set of APIs covering a
wide range of measurement and troubleshooting applications, sig-
niﬁcantly expanding the capabilities of in-page JavaScript code. To
ensure safety, we equip Fathom with a security model that balances
user approval, permission management, and code-signing (§ 4.2
and § 4.3). Consideration of possible implementation strategies
motivates our decision to implement Fathom as a JavaScript-only
extension for the Firefox browser, paying close attention to the
constraints imposed by modern-day browser environments (§ 5).
We demonstrate that careful design of a JavaScript-driven mea-
surement platform enables experimenters to conduct measurements
with modest overhead for the user (§ 6.1) and high accuracy (§ 6.2).
We report on additional experiences gained using Fathom in three
different use cases (§ 7). We discuss portability and adoption in-
centives (§ 8), and close with a survey of related browser extension
work and measurement platforms (§ 9).
Contributions: Fathom explores the feasibility of building a
generic network measurement and troubleshooting platform into
modern browsers. We view our contribution as developing a re-
alization of broad capability that the community has been working
towards for a number of years. Fathom builds on the lessons of
previous efforts and reﬂects a promising, practical approach that (i)
fosters innovation via open-endedness, as opposed to implement-
ing a particular tool; (ii) provides unparalleled access to the edge
via the ubiquity of browsers; (iii) enables novel analyses supported
via passive collection of context and active experimentation; (iv)
combines existing security primitives in a novel way to safely ex-
pand in-page JavaScript capabilities.
Fathom is open source and we invite interested readers to
visit http://fathom.icsi.berkeley.edu to download
the platform and provide feedback.
2 Motivating Scenarios
We begin by sketching examples of measurement efforts that bene-
ﬁt from both an end system vantage point and a large footprint. The
list here is far from exhaustive; our design is general, and hence
adaptable to a range of other tasks, too.
Web performance debugging: With a browser-based vantage
point website operators can signiﬁcantly improve their ability to
diagnose slow load times. Along those lines, Google’s analytics
code recently started collecting basic page rendering times [24].
This captures facts, but cannot provide troubleshooting assistance,
for which page authors currently lack critical information. The
web pages’ isolation from the host system here works against the
developer, preventing access to helpful indicators such as system
load and I/O characteristics. For example, the Google Maps fo-
rum [19] shows discussions whereby Google engineers explicitly
ask users to quantify the “slowness” of page loads, including an-
cillary system-level information such as CPU and network activity.
By allowing Google engineers access to a measurement platform
in the user’s browser they could directly extract the required in-
formation. Researchers can also leverage this capability to better
understand web performance and complexity (e.g., [7, 10]) both at
scale and across sites.
Web access failures: Similar to the performance debugging case,
a browser-based platform can also directly assist users in diagnos-
ing website failures. In this scenario, the browser could provide a
“diagnose” button that launches measurements to identify common
causes of access failures (e.g., loss of connectivity or DNS issues).
While web failures have been studied in a passive fashion [1, 42],
giving users a way to conduct real-time assessment offers the po-
tential to both (i) better diagnose the problem with contemporane-
ous active measurements and (ii) inform users what might be done
to ﬁx the problem (or at least who to ask to ﬁx the problem).
Local network debugging: Poor performance can also stem from
issues in the local network and hence combining external- and
local-network measurements can help pinpoint the location of the
problem [10]. Further, when multiple local systems use the mea-
surement platform we can discover this—e.g., using multicast DNS
or UPnP—and coordinate the vantage points for a richer analysis
of the failure.
ISP performance: A wide range of tools perform active measure-
ments from end systems to a controlled server, including speed
tests [4], general performance diagnostics [20, 28, 31], trafﬁc tam-
pering [46], and trafﬁc shaping detectors [12, 25]. While each of
these tools performs custom tests, they share the basic need to con-
duct active probing from end systems.
Large-scale topology mapping: Many efforts within the research
community over the years have tried to understand the Internet’s
topology by conducting traceroute(-like) measurements from mul-
tiple vantage points [8, 44, 47]. A browser-based platform would
facilitate such studies from a breadth of vantage points currently
not practical.
3 Platform Design Goals
We identify the broad design goals for an end-system based mea-
surement platform as follows:
Rich measurement capabilities: The examples in § 2 show that
we require support for both passive and active observations. Pas-
sive measurements provide precise and continuous understanding
of the activity in the browser, ranging from system-level infor-
mation such as CPU load, memory availability, and trafﬁc load,
to browser-level activity such as HTTP session tracking and ﬁne-
grained page-level activity (e.g., DOM1 updates and event loop ac-
tivity). Note that this enables far broader analyses than available
to in-browser JavaScript debuggers (e.g., Firebug). While network
problems may often manifest in passive measurements, their root
cause frequently reveals itself only using active probing. We there-
fore require a wide range of network I/O primitives, reaching as far
down in the networking stack as feasible.
Extensibility: As sketched in § 2, we strive for a general measure-
ment facility rather than providing a simple interface to ready-made
measurements. Therefore, instead of providing APIs for speciﬁc
measurements, the platform should provide APIs that support the
implementation of as wide an array of measurements as possible.
Security and privacy: While Fathom strives to maximize utility to
practitioners and experimenters, the platform must not compromise
the privacy of the user (e.g., expose browsing history). Addition-
1Document Object Model, a browser-independent tree abstraction
representing a web page.
74(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
var fathom = window.fathom;
var DATA = "Hello world";
var ADDR = "226.0.0.2", PORT = 23456;
fathom.socket.multicast.open(socketCB);
function socketCB(sock) {
if (sock && !sock[’error’]) {
fathom.socket.multicast.send(sendCB,
sock, DATA, ADDR, PORT);
}
}
(10)
function sendCB(result) { ... }
Figure 1: Asynchronous multicast network output in Fathom.
ally, the platform must not allow for the abuse of host or network
resources.
Measurement accuracy: We require the measurement platform to
accurately track time and the outcome of network I/O events. Pre-
cise timing supports the ability to both understand when an event
happened and to schedule future events.
Low system overhead: We desire the platform’s runtime overhead
to be as low as possible for two reasons: (i) high overhead can
alter test results for intensive experiments (e.g., bandwidth mea-
surements) and (ii) the platform resides in a user’s application and
hence we do not want to unduly impact the user’s browsing activity.
Portability: Measurement code should work portably on any im-
plementation of the platform. This implies that measurement code
should execute without requiring compilation to different execution
environments.
Fathom’s design (§ 4) addresses the ﬁrst three goals and its im-
plementation (§ 5) the remaining goals.
4 Fathom
We design Fathom to provide a rich set of APIs for measure-
ments. Since Fathom signiﬁcantly expands the capabilities of in-
page JavaScript code, it requires a carefully thought-out security
and privacy model.
4.1 API design
Fathom’s APIs remain conceptually independent of the underly-
ing platform implementation and cover a broad range of network
I/O capabilities as well as means to obtain system information and
historical performance baselines. Our case studies (§ 7) and devel-
opment experience drove the design.
To make its services available to in-page JavaScript code,
Fathom creates a new JavaScript object, registers its APIs as meth-
ods on this object as requested by the measurement code (see § 4.3),
and adds it to the page’s window object as window.fathom.
Web application code can invoke these APIs to perform both pas-
sive and active measurements on the end system. To do so, the
caller provides a callback function which Fathom will invoke when
the result of the call becomes available. This approach provides
natural asynchronicity in the presence of potentially blocking net-
work I/O. Fathom passes a single object to the callbacks. A set
of properties on the object conveys error codes and return values.
Figure 1 shows an example of sending data over a multicast socket.
Fathom currently provides four main API families (listed in Ta-
ble 1):
fathom.socket provides socket management. These func-
tions export low-level socket functionality and serve as the basis