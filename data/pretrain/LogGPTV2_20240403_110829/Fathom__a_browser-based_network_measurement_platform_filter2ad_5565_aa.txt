# Fathom: A Browser-based Network Measurement Platform

**Authors:**
- Mohan Dhawan, Rutgers University, PI:EMAIL
- Justin Samuel, UC Berkeley, PI:EMAIL
- Renata Teixeira, CNRS & UPMC, PI:EMAIL
- Christian Kreibich, ICSI & UC San Diego, PI:EMAIL
- Mark Allman, ICSI, PI:EMAIL
- Nicholas Weaver, ICSI & UC San Diego, PI:EMAIL
- Vern Paxson, ICSI & UC Berkeley, PI:EMAIL

## Abstract

Analyzing network performance issues often requires the ability to measure directly from the perspective of end systems. However, end systems typically do not provide an external programming interface for such measurements, necessitating the installation of custom executables, which can be prohibitively expensive and cumbersome.

In this work, we leverage the ubiquity of web browsers to demonstrate the potential of browsers as a programmable environment for network measurements. We introduce Fathom, a Firefox extension that implements various measurement primitives, enabling websites or other parties to program network measurements using JavaScript. Fathom is lightweight, imposing less than 3.2% overhead in page load times for popular web pages, and often provides 1 ms timestamp accuracy. We illustrate Fathom's utility with three case studies: providing a JavaScript version of the Netalyzr network characterization tool, debugging web access failures, and enabling websites to diagnose performance problems of their clients.

**Categories and Subject Descriptors:**
- C.2.0 [Computer-Communication Networks]: General
- C.4 [Performance of Systems]: Measurement techniques
- D.2.8 [Software Engineering]: Metrics—performance measures

**General Terms:**
- Design, Measurement, Performance, Security

**Keywords:**
- Network troubleshooting, network performance, end-host network measurement, web browser, browser extension

**Note:**
- This work was done while the author was visiting ICSI.
- This work was done while the author was visiting UC Berkeley & ICSI.

**Permission:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

IMC’12, November 14–16, 2012, Boston, Massachusetts, USA. 
Copyright 2012 ACM 978-1-4503-1705-4/12/11...$15.00.

## 1. Introduction

Network measurements from the perspective of end systems are crucial for both researchers seeking general insights into Internet operations and practitioners aiming to diagnose individual performance issues. Traditionally, researchers have either (i) asked acquaintances to install custom measurement tools or (ii) used or instantiated infrastructure like PlanetLab to conduct measurements. Neither approach scales well, limiting the scope of the insights that can be obtained. Practitioners, on the other hand, are more interested in understanding the performance of their own systems, including diagnosing suboptimal user experiences.

While research-developed systems may offer some assistance, they do not run on regular users' end systems and thus cannot help with specific measurement or debugging of user problems. Both researchers and practitioners face challenges in obtaining such measurements due to the lack of general support in end systems. While getting users to install programs can suffice for limited situations, it does not scale up, as users are unlikely to repeatedly install such software. Additionally, developing portable executables that run correctly across a wide range of system configurations is challenging, and there are safety concerns related to requiring privileged access and trusting the behavior of introduced programs.

To address these challenges, we aim to minimize the impediments to writing and installing measurement programs across a large number of end systems. Our solution is Fathom, a browser-based extensible measurement platform. Fathom provides a measurement-oriented API that standard JavaScript loaded from any web page can use to facilitate empirical observations.

We argue that integrating a measurement platform into the web browser offers a sweet spot for both deployability and flexibility, making Fathom a promising solution where other measurement systems have struggled. The ubiquity of web browsers and their central role in a wide array of network activities provide unparalleled scaling potential, benefiting common measurement and troubleshooting scenarios. Although Fathom requires users to install a piece of software, this only needs to be done once to enable a vast range of measurements. By bundling useful Fathom applications, such as a connectivity debugger, we provide users with an immediate incentive for installation.

We begin by outlining the desiderata for a browser-based measurement platform, which guide Fathom's design and implementation. Our design includes a set of APIs covering a wide range of measurement and troubleshooting applications, significantly expanding the capabilities of in-page JavaScript code. To ensure safety, Fathom incorporates a security model that balances user approval, permission management, and code-signing. We implemented Fathom as a JavaScript-only extension for the Firefox browser, carefully considering the constraints of modern browser environments. We demonstrate that Fathom enables experimenters to conduct measurements with modest overhead and high accuracy. We report on additional experiences gained using Fathom in three different use cases, discuss portability and adoption incentives, and provide a survey of related browser extension work and measurement platforms.

**Contributions:**
- Fathom explores the feasibility of building a generic network measurement and troubleshooting platform into modern browsers.
- It builds on the lessons of previous efforts and reflects a practical approach that fosters innovation via open-endedness, provides unparalleled access to the edge via the ubiquity of browsers, enables novel analyses supported by passive context collection and active experimentation, and combines existing security primitives in a novel way to safely expand in-page JavaScript capabilities.
- Fathom is open source, and we invite interested readers to visit http://fathom.icsi.berkeley.edu to download the platform and provide feedback.

## 2. Motivating Scenarios

We start by illustrating examples of measurement efforts that benefit from both an end system vantage point and a large footprint. These examples are not exhaustive, and our design is general, adaptable to a range of other tasks.

### Web Performance Debugging
With a browser-based vantage point, website operators can significantly improve their ability to diagnose slow load times. For example, Google’s analytics code recently started collecting basic page rendering times. While this captures facts, it does not provide troubleshooting assistance, as page authors currently lack critical information such as system load and I/O characteristics. By allowing engineers access to a measurement platform in the user’s browser, they could directly extract the required information. Researchers can also leverage this capability to better understand web performance and complexity at scale and across sites.

### Web Access Failures
A browser-based platform can assist users in diagnosing website failures. The browser could provide a "diagnose" button that launches measurements to identify common causes of access failures, such as loss of connectivity or DNS issues. While web failures have been studied passively, real-time assessment offers the potential to better diagnose the problem and inform users about possible solutions.

### Local Network Debugging
Poor performance can stem from local network issues. Combining external and local network measurements can help pinpoint the problem. When multiple local systems use the measurement platform, coordinated vantage points can provide a richer analysis of the failure.

### ISP Performance
Many tools perform active measurements from end systems to a controlled server, including speed tests, general performance diagnostics, traffic tampering, and traffic shaping detectors. While each tool performs custom tests, they share the need to conduct active probing from end systems.

### Large-Scale Topology Mapping
Research efforts to understand the Internet's topology often involve traceroute-like measurements from multiple vantage points. A browser-based platform would facilitate such studies from a broader range of vantage points.

## 3. Platform Design Goals

The broad design goals for an end-system based measurement platform are:

- **Rich Measurement Capabilities:** Support for both passive and active observations, ranging from system-level information to browser-level activity.
- **Extensibility:** Provide a general measurement facility rather than a simple interface to ready-made measurements.
- **Security and Privacy:** Ensure the platform does not compromise user privacy or allow abuse of host or network resources.
- **Measurement Accuracy:** Accurately track time and the outcome of network I/O events.
- **Low System Overhead:** Minimize runtime overhead to avoid altering test results and impacting user browsing activity.
- **Portability:** Ensure measurement code works portably on any implementation of the platform.

Fathom's design addresses the first three goals, and its implementation addresses the remaining goals.

## 4. Fathom

Fathom is designed to provide a rich set of APIs for measurements. Since Fathom significantly expands the capabilities of in-page JavaScript code, it requires a carefully thought-out security and privacy model.

### 4.1 API Design

Fathom's APIs are conceptually independent of the underlying platform implementation and cover a broad range of network I/O capabilities, as well as means to obtain system information and historical performance baselines. The design is driven by our case studies and development experience.

To make its services available to in-page JavaScript code, Fathom creates a new JavaScript object, registers its APIs as methods on this object, and adds it to the page’s window object as `window.fathom`. Web application code can invoke these APIs to perform both passive and active measurements on the end system. The caller provides a callback function, which Fathom invokes when the result becomes available. This approach ensures natural asynchronicity in the presence of potentially blocking network I/O. Fathom passes a single object to the callbacks, with properties conveying error codes and return values.

**Example: Sending Data Over a Multicast Socket**

```javascript
var fathom = window.fathom;
var DATA = "Hello world";
var ADDR = "226.0.0.2", PORT = 23456;

fathom.socket.multicast.open(socketCB);

function socketCB(sock) {
    if (sock && !sock['error']) {
        fathom.socket.multicast.send(sendCB, sock, DATA, ADDR, PORT);
    }
}

function sendCB(result) { ... }
```

Fathom currently provides four main API families:

- **`fathom.socket`**: Provides socket management, exporting low-level socket functionality.
- **`fathom.system`**: Provides access to system-level information.
- **`fathom.network`**: Provides network I/O primitives.
- **`fathom.history`**: Provides access to historical performance baselines.

These APIs collectively enable a wide range of measurement and troubleshooting applications, making Fathom a versatile and powerful tool for network analysis.