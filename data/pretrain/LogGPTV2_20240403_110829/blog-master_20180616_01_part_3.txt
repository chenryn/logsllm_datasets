{  
............  
        /* If in the syslogger process, try to write messages direct to file */  
        if (am_syslogger)  
                write_syslogger_file(buf.data, buf.len, LOG_DESTINATION_CSVLOG);  
        else  
                write_pipe_chunks(buf.data, buf.len, LOG_DESTINATION_CSVLOG);  
        pfree(buf.data);  
}  
/*  
 * Send data to the syslogger using the chunked protocol  
 *  
 * Note: when there are multiple backends writing into the syslogger pipe,  
 * it's critical that each write go into the pipe indivisibly, and not  
 * get interleaved with data from other processes.  Fortunately, the POSIX  
 * spec requires that writes to pipes be atomic so long as they are not  
 * more than PIPE_BUF bytes long.  So we divide long messages into chunks  
 * that are no more than that length, and send one chunk per write() call.  
 * The collector process knows how to reassemble the chunks.  
 *  
 * Because of the atomic write requirement, there are only two possible  
 * results from write() here: -1 for failure, or the requested number of  
 * bytes.  There is not really anything we can do about a failure; retry would  
 * probably be an infinite loop, and we can't even report the error usefully.  
 * (There is noplace else we could send it!)  So we might as well just ignore  
 * the result from write().  However, on some platforms you get a compiler  
 * warning from ignoring write()'s result, so do a little dance with casting  
 * rc to void to shut up the compiler.  
 */  
static void  
write_pipe_chunks(char *data, int len, int dest)  
{  
        PipeProtoChunk p;  
        int                     fd = fileno(stderr);  
        int                     rc;  
        Assert(len > 0);  
        p.proto.nuls[0] = p.proto.nuls[1] = '\0';  
        p.proto.pid = MyProcPid;  
        /* write all but the last chunk */  
        while (len > PIPE_MAX_PAYLOAD)  
        {  
                p.proto.is_last = (dest == LOG_DESTINATION_CSVLOG ? 'F' : 'f');  
                p.proto.len = PIPE_MAX_PAYLOAD;  
                memcpy(p.proto.data, data, PIPE_MAX_PAYLOAD);  
                rc = write(fd, &p, PIPE_HEADER_SIZE + PIPE_MAX_PAYLOAD);  
                (void) rc;  
                data += PIPE_MAX_PAYLOAD;  
                len -= PIPE_MAX_PAYLOAD;  
        }  
        /* write the last chunk */  
        p.proto.is_last = (dest == LOG_DESTINATION_CSVLOG ? 'T' : 't');  
        p.proto.len = len;  
        memcpy(p.proto.data, data, len);  
        rc = write(fd, &p, PIPE_HEADER_SIZE + len);  
        (void) rc;  
}  
```  
```  
# Overhead          Command                        Shared Object                                                                                                                                                                               
# ........  ...............  ...................................  ............................  
#  
    32.77%         postgres  [kernel.kallsyms]                    [k] __mutex_lock_slowpath  
                   |  
                   --- __mutex_lock_slowpath  
                      |            
                      |--100.00%-- mutex_lock  
                      |          |            
                      |          |--96.97%-- pipe_lock  
                      |          |          pipe_wait  
                      |          |          |            
                      |          |          |--99.99%-- pipe_write  
                      |          |          |          do_sync_write  
                      |          |          |          vfs_write  
                      |          |          |          sys_write  
                      |          |          |          system_call_fastpath  
                      |          |          |          __write_nocancel  
                      |          |          |          |            
                      |          |          |           --100.00%-- write_csvlog  
                      |          |          |                     EmitErrorReport  
                      |          |          |                     errfinish  
                      |          |          |                     PostgresMain  
                      |          |          |                     PostmasterMain  
                      |          |          |                     main  
                      |          |          |                     __libc_start_main  
                      |          |           --0.01%-- [...]  
                      |          |            
                      |          |--2.84%-- pipe_write  
                      |          |          do_sync_write  
                      |          |          vfs_write  
                      |          |          sys_write  
                      |          |          system_call_fastpath  
                      |          |          |            
                      |          |          |--99.58%-- __write_nocancel  
                      |          |          |          |            
                      |          |          |           --100.00%-- write_csvlog  
                      |          |          |                     EmitErrorReport  
                      |          |          |                     errfinish  
                      |          |          |                     PostgresMain  
                      |          |          |                     PostmasterMain  
                      |          |          |                     main  
                      |          |          |                     __libc_start_main  
                      |          |           --0.42%-- [...]  
                      |           --0.19%-- [...]  
                       --0.00%-- [...]  
    17.76%         postgres  [kernel.kallsyms]                    [k] mutex_spin_on_owner  
                   |  
                   --- mutex_spin_on_owner  
                      |            
                      |--99.96%-- __mutex_lock_slowpath  
                      |          mutex_lock  
                      |          |            
                      |          |--98.91%-- pipe_lock  
                      |          |          pipe_wait  
                      |          |          |            
                      |          |          |--100.00%-- pipe_write  
                      |          |          |          do_sync_write  
                      |          |          |          vfs_write  
                      |          |          |          sys_write  
                      |          |          |          system_call_fastpath  
                      |          |          |          __write_nocancel  
                      |          |          |          |            
                      |          |          |           --100.00%-- write_csvlog  
                      |          |          |                     EmitErrorReport  
                      |          |          |                     errfinish  
                      |          |          |                     PostgresMain  
                      |          |          |                     PostmasterMain  
                      |          |          |                     main  
                      |          |          |                     __libc_start_main  
                      |          |           --0.00%-- [...]  
                      |          |            
                      |          |--0.96%-- pipe_write  
                      |          |          do_sync_write  
                      |          |          vfs_write  
                      |          |          sys_write  
                      |          |          system_call_fastpath  
                      |          |          |            
                      |          |          |--97.72%-- __write_nocancel  
                      |          |          |          |            
                      |          |          |           --100.00%-- write_csvlog  
                      |          |          |                     EmitErrorReport  
                      |          |          |                     errfinish  
                      |          |          |                     PostgresMain  
                      |          |          |                     PostmasterMain  
                      |          |          |                     main  
                      |          |          |                     __libc_start_main  
                      |          |          |            
                      |          |           --2.28%-- 0x7f89375b59fd  
                      |          |                     |            
                      |          |                     |--58.85%-- 0x3731206e754a205d  
                      |          |                     |            
                      |          |                     |--24.32%-- 0x6574616572635f74  
                      |          |                     |            
                      |          |                      --16.82%-- 0xa746e756f6d65  
                      |           --0.13%-- [...]  
                       --0.04%-- [...]  
```  
## 小结      
PostgreSQL syslogger elog部分还有优化的空间，当调用elog并发非常高时，会触发lock冲突，导致性能下降非常严重。  
### 测试结果1:   
高并发，log_statement=all + log_duration=on 同时开启，56并发时引发lock冲突影响了性能，并发越高，性能影响越大。
测试CASE | QPS      
---|---      
关闭审计，关闭时间统计 | 208834      
开启审计 | 192413      
开启SQL时间统计 | 107025      
同时开启审计，SQL时间统计 | 62370      
同时开启审计，SQL时间统计，IO时间统计 | 59684      
### 测试结果2:      
低并发，log_statement=all + log_duration=on 同时开启，未触发lock冲突，性能损耗较小。    
测试CASE | QPS      
---|---      
关闭审计，关闭时间统计 | 148093      
开启审计 | 143642      
开启SQL时间统计 | 139795      
同时开启审计，SQL时间统计 | 122479      
同时开启审计，SQL时间统计，IO时间统计 | 121725      
## 参考      
https://www.postgresql.org/docs/11/static/pgtesttiming.html      
[《Linux 时钟精度 与 PostgreSQL auto_explain (explain timing 时钟开销估算)》](../201612/20161228_02.md)        
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md)  
[《PostgreSQL DaaS设计注意 - schema与database的抉择》](../201610/20161012_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")