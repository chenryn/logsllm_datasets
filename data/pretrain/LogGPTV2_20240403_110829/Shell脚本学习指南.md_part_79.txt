换。dosmacux包（注9）提供了一组方便的工具来做这件事，同时保留了文件的时间数。
UNIX里所有的其他文件可被认为是二进制文件：每一个包含在其中的字节，都有256
种可能的值，因此，文本文件可以算是二进制文件的子集。
不同于某些操作系统的是，没有字符会被抢夺以表示end-of-file：UNIX文件系统单纯
地在文件中保留字节数的计数。
尝试读取超越文件字节计数时，则返回一个end-of-file的暗示，所以它不可能看到任何
磁盘块之前的内容。
有些操作系统禁用空文件，但UNIX不这么做。有时，它表示的只是一个文件的存在，
重点不在它的内容。例如时间藏、文件镇定，以及THIS-PROGRAM-IS-OBSOLETE这样
的警告，都是有用的空文件范例。
UNIX将文件视为字节流的想法，鼓励操作系统的设计者，实现出看起来像文件但非传
统式文件想法的数据，许多UNIX版本，实现一个进程信息虚拟文件系统
（pseudofilesystem）：只要输入manproc就可以知道你系统提供的有哪些。我们在13.7
节里已做过详细的讨论。在/proc树状结构下的文件，并未真实存在于大型存储设备
下，它只是提供察看进程表格及执行中进程的内存空间，或了解操作系统内部信息（例
如处理器、网络、内存与磁盘系统）的详细数据的方式。
以我们写本书时所使用的系统为例，我们可以找到与存储设备相关的细节，类似这样
（命令参数上，斜杠表示的意义将在下节讨论）：
S cat /proc/ace1/acs1
显示旅盘设备信息
Host:scsi0 Channel: 00Id: 00 Lun:00
Attached devices:
Rev; 0077
Type:Direct-Access
ANSI SCSI revision: 03.
Host:scsi1 Channel:00Id:01Lun: 00
Vendor: TOSHIBA Model: CD-ROM XM-6401TA Rev: 1009
Type:CD-ROM
ANSI SCSI revision: 02
UNIX层级式文件系统
大量的文件就可能有文件名冲突的风险，如果要所有名称都独一无二，管理上也相当困
难，UNIX处理的方式，便是将文件组织在目录（directory）下：每个目录形成它自已
6
http://www.math.utah.edu/pub/dosmacux/
www.TopSage.com
---
## Page 467
文件与文件系统
455
的名称空间，独立于所有其他的目录，目录也可提供默认属性给文件，这个主题我们将
在稍后的“文件所有权与权限”部分做简短介绍。
文件系统架构
目录可以嵌套配置为任意深度，使得UNIX文件系统形成树状结构。UNIX在此不使用
文件夹（folder）是因为纸本文件的文件夹无法嵌套配置。文件系统目录结构的本源为
根目录（root directory），它有一个特殊而简单的名称：/（ASCll的斜杠）。/myfile指
的就是根目录下，叫作myfile的文件名称。斜杠还有另一个目的：用来界定名称，以
记录目录的嵌套架构。图B-1呈现的是文件系统顶层架构的一小部分。
bc.so
TIBLSE
图B-1：文件系统目录结构
UNIX目录下可包括任意数目的文件。不过，大部分现行UNIX文件系统的设计与文件
系统程序界面，都假定目录是被连续地查找。因此在大型目录下寻找文件的时间，便与
目录里的文件数成比例。当文件超过百个，最好以子目录重新组织。
在嵌套式目录的完整列表下，要到达一文件，是以路径名称（pathname）或称为路径的
方式引用，它有时会包含文件名本身，有时则不会，视当时的情况而定。文件名的完整
路径，包含名称本身，能有多长？一直以来，UNIX的文件都未提供答案，但POSIX定
义PATH_MAX需数来限制其长度，包含终结的NUL字符，要求最大值为256，但X/Open
PortabilityGuide则要求到1024，你可以使用getconf命令查询你系统里的限制，以我
们的系统为例：
S getoonf PATH_MAX .
1023
在当前文件系统下，路径名称的最大长度为何？
其他我们测试过的UNIX系统，也有报告1024或4095的。
C程序语言的ISO标准称此值为FILENAME_MAX，且它必须定义在标准标头文件stdio.h
www.TopSage.com
---
## Page 468
456
附录B
里，我们检查过许多UNIX版本，还发现255：1024，与4095的值。Hewlett-Packard
HP-UX的10.20与11.23的值只有14，但它们的getconf报告则为1023与1024。
因为UNIX系统支持多个文件系统，文件名长度也为文件系统的特性之一，与操作系统
无关，所以编译期常数所定义的这些限制是没有意义的，高级语言的程序员多半被建议
使用pathconf（）或fpathconf（1函数库调用，以取得这些限制值：它们需要传递一个
路径名称，或是一个打开的文件插述代码，使得特定的文件系统可以被识别。也就是为
什么我们在先前的例子里，传递当前的目录（点号）给getconf。
UNIX目录本身就是文件，只不过它拥有特殊属性且限制性访问，所有UNIX系统都包
括顶层目录bin，保存（时常是二进制）可执行程序，包括很多在本书中使用过的那些。
这个目录的完整路径名称为/bin，它很少包含子目录。
另一个普追性顶层目录为usr，不过它一定含有其他目录，/usr/bin就是其中一个。
它和/bin是不同的，本附录稍后的：“文件系统实现概况”会说明，如何让两个bin目
录看起来一样（注10）。
所有的UNIX目录，就算是空的，也至少包翻两个特殊目录：、（点号）与..（点号点
号）.第一个指的是目录本身：就是我们先前在qetconf范例里用到的那个：第二个指
的则是父目录。因此，在/usr/bin下，..意即为/usr，而../lib/libc.a意思就
是/usr/lib/libc.a-—这是C语言执行期程序库存放的惯例位置。
根目录的父目录就是自已，所以/、.、...、/...都是一样的。
路径结尾如果以斜杠结束，则它是一个目录，如果最后字符非斜杠，那么最后一个组成
部分是目录还是其他类型的文件，则只能咨询文件系统而得知。
POSIX要求路径里连续的斜杠被视为单一斜杠。这要求在我们参考到最早期的UNIX文
件里井未明白指定，但自20世纪70年代中期起，Version6源代码一开始，即完成此斜
杠减少（注11）。因此：/tmp/x、/tmp//x，与//tmp//x都指同一个文件。
途10：
DEC/Compaq/Hewlet-Packard OSF/1 (Tru64), IBM AIX, SGI IRIX, 与 Sun Solaris
舞做将到,Apple Mac OS X、BSD 系统,GNU/Linsx，与Hewlett-Packard HP-UX 
不能微到，
注 11:见 John Lion 布: {Lions’ Commentary on UNIX 6th Edition, with Source Code},
1996年由Peer-to-Peer Communicationis出益,1SBN 1-57398-013-7,此修正出现&kernel
行7535（sheet 75）.注释说明于p.19-2的“Multiple slashes are acceptable”，如聚报
序码以if取代while，则此减少不会发生。
www.TopSage.com
---
## Page 469
文件与文件系统
457
在这本书里，有很多的注脚提供WorldWideWeb的来源位置（URL），其语法是以UNIXCOIm
的路径名称所形成。URL前置通信协议的名称与主机名称，例如：proto://host，指
的即为UNIX风格的路径名称，置于主机的网页目录树下，网页服务器需要这些信息，
找到它们在文件系统里的适当位置。URL自20世纪90年代晚期开始广泛使用，使得
UNIX路径名称为人们所熟悉。
层级式文件系统
如果斜杠为根目录，则每个文件系统里只会有一个，那么UNIX要如何支持多个文件系
统，但又可以避免根目录名称冲突的情况呢？答案很简单：UNIX允许将某个文件系统，
逻辑性地置于另一个文件系统内一个已存在的任意目录之上。该操作称为加载
（mounting），相关命令为mount与umount：分别为加载与卸载文件系统。
当另一个操作系统加载在一个目录之上时，该目录先前的内容都无法看见也无法访问，
只有在卸载以后它们才会再出现。
文件系统加载会让人觉得单一文件系统树会无限长大的幻觉，只需通过简单地加入更多
或更大的存储设备即可。正规的文件名称惯例/a/b/c/d/..即指出对用户与软件而言，
无须关心其设备为何，这点不同于其他操作系统：后者会将设备名称放置在路径名称之
中。
完成加载命令需要充分的信息，因此系统管理员将这些细节存储在一个特殊文件里，通
常是/etc/fstab或/etc/vfstab，视UNIX的版本面定。该文件一如大部分的UNIX
组态文件：都为一般文本文件，其格式可参考手册页fstab（4或5）或vfstab（4）。
当共享的磁盘是唯一可用的文件系统媒体时，加载与卸载便需要特殊权限，通常只有系
统管理员可以做这件事。不过，对一些个人拥有的媒体，例如软盘、光盘或DVD，桌上
计算机的用户需要能够自已做这件事。许多UNIX系统进行了功能的扩充，所以有某些
设备也允许非特权用户进行加载与卸载。这里是自GNU/Linux系统下使用的例子：
Sgrep omer /etc/fatab1sort
iso9660 noauto,owmer,kudzu,ro 00
哪些设备允许用户加载？
/dev/cdrom
/imnt/cdrom
/dev/sdb4
/dev/fa0
/mnt/f1oppy
auto
noauto,owmer,kudzu 0 0
noauto,owmer,kudzu 0 0
/mnt/zip100.0
auto.
这里设置让用户可以使用CD-ROM、软盘，与IomegaZip，使用方式如下：
mount /mnt/cdrom
使光驱呈可用状态
cd /mnt/cdrom
1.8
到出其文件
改变到它的顶层目录
d
改变根目录
umount /nnt/edrom
释放光距
www.TopSage.com
---
## Page 470
458
附录B
mount命令不使用参数与特殊权展时：只会简单地报告所有当前加载的文件系统，下列
为独立的网页服务器范例：
$ mount Isort
显示已加载的文件系统列表，并排序它
/dev/sda3 on /export type ext.3 (rw)
/dev/sda2 on /boot type ext3 (rw)
/dev/sda5 on / type ext3 (rw)
/dev/sda6 on /wr type ext3 (rw)
/dev/sda8 on /tmp type ext3 (zw)
/dey/sda9 on /var type ext3 (rw)
none on /dev/pts type devpts (zw, gid=5,mode=620)
none on /dev/shm type tnpfs (rw)
none on /nue/proc type proc (rw)
none on /proc/sys/fs/binfnt_misc type binfmt_misc (rw)
none on /proc type proc (rv)
这里显示，根文件系统加载在磁盘设备/dev/sda5下。其他文件系统则分别加载为
/boot、/export等等。
系统管理员可使用来下命令卸载/ww树：
umount /ww
在此，为概提示符号
如果/ww目录下有任何文件正在使用，则此命令的执行结果会失败。你可以使用1sof
（list-open-files）命令（注12），以追踪正被防止卸载的进程。
文件系统实现概况
文件系统实现的细节很有趣，但也太复杂，且超出这本书的范畴。我们建议你参考更好
的书, 例如 《The Design and Implementation of the 4.4BSD Operating System》 (注 13)
与《UNIXInternals:The New Frontiers（注14），进一步了解。
从较高层的观点来看文件系统实现其实是相当有帮助的，因为这么做可以从用户的角度
去看UNIX的文件系统。文件系统建立时：一个管理员指定的固定太小表格（注15）也
随之建立，以保存文件系统中与文件相关的信息。每个文件都会与此表格的一个实现产
生相关，每个实现都为一个文件系统数据结构，被称为inode（indexnode的缩写，发
注12：ftp:/vic.cc.purdae.edw/pub/tools/UNIX/sof/,其他UNIX版本下的替代命令可使用 fstat
 fuser,
1
作 Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, 与 John S. Quarterman,
 1996 由 Addison-Wesley 出&,ISBN 0-201-54979-4,
运 14:作老 Uresh Vahalia,于 1996 年由 Prentic-Hall 出版,ISBN 0-13-101908-2,
注15：部分高级文件系统设计允评根据需要加大表格。
www.TopSage.com
---
## Page 471
文件与文件系统
459
音为eyenode）.indoe的内容视特定的文件系统设计面定，因此单一系统下可能含有数
种不同的形式。程序员都被隔绝在stat（）与fstat（）系统调用的差异之外（见star（2）
手册页）。参考maninode可以了解你系统上实际结构的相关信息。
由于inode结构与存储设备的其他低层细节都与系统息息相关，因此通常不太可能将某
广商的UNIX文件系统加载在另一个厂商的UNIX文件系统下。不过我们可以通过软件
NerworkFileSystem（NFS）解决这个间题，它可以跨网络共享各个不同厂商所提供的
UNIX文件系统，
由于inode表格为固定大小，因此有可能出现文件系统已满，但存储设备仍有大量可用
空间的情况：还有空间可用来置放文件的数据，而没有空间放它的metadarta（数据的数
据）。
如图B-2所示，inodc条目包括了系统辨认文件时所需的所有数据，只有一件事除外：它
的文件名。这似乎很令人惊讶，事实上，是有许多使用类似文件系统设计的操作系统将
文件名包括在类似于inode的条目中。
Number Tye ModeLinisBtecontUseril GrupipetaddresArautes
1
图B-2：Inode表格内容
在UNIX下，文件名伴随其inode编号存储在目录里，如图B-3所示。早期20世纪70年
代小型计算机里的UNIX系统，仅在目录下，为每个文件配置16个字节：2个字节给inode
他系统的8+3限制好一点。
现代UNIX文件系统允许较长文件名，不过传统上还是有最大长度的限制，请参考本附
录先前“文件系统架构”提供的getconf范例。
对目录的所有者，及早期一些需打开与读取目录以寻找文件的UNIX软件而言，目录只
能读取，不能写入。更复杂的目录设计在20世纪80年代问世，opendir（）、readdir（）
与closedir（）程序库调用的建立，让程序员看不到它们的架构，这些调用也成为现在
POSIX的一部分（见opendir(3）手册页）。为加强程序库的访间，部分现行的UNIX实
现，禁止在目录文件上进行读取运算。
www.TopSage.com
---
## Page 472
460
附录B
-NodenumberFilsame
2155329
737046
1294503
cho4.xm1
2241988|README
3974649
Makef11e
720277
ch04.ps
2945369|CVS
523023
CH-AA-SHELL-EXTENSIONS.tXt
351882
ch04.xml.*1*
..t.
...etc...
图B-3：目录表格内容
注意：为什么UNIX要将文件名与剩下的文件metadata加以分隔呢？理由至少有两个：
通常用户列出目录内容的目的，只是为了提醒自已：文件是不是就在这个目录下，如