---
author: Moshe Zadka
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4758
date: '2020-08-01 10:59:14'
editorchoice: false
excerpt: 这种使用 Python 和 Shamir 秘密共享的独特算法可以保护你的主密码，可以有效避免黑客窃取和自己不经意忘记引发的风险和不便。
fromurl: https://opensource.com/article/20/6/python-passwords
id: 12474
islctt: true
largepic: /data/attachment/album/202008/01/105831kzxididbld8kdhdb.jpg
permalink: /article-12474-1.html
pic: /data/attachment/album/202008/01/105831kzxididbld8kdhdb.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这种使用 Python 和 Shamir 秘密共享的独特算法可以保护你的主密码，可以有效避免黑客窃取和自己不经意忘记引发的风险和不便。
tags:
- 密码
- 加密
thumb: false
title: 国王的秘密：如何保护你的主密码
titlepic: true
translator: silentdawn-zz
updated: '2020-08-01 10:59:14'
---
> 
> 这种使用 Python 和 Shamir 秘密共享的独特算法可以保护你的主密码，可以有效避免黑客窃取和自己不经意忘记引发的风险和不便。
> 
> 
> 
![](/data/attachment/album/202008/01/105831kzxididbld8kdhdb.jpg)
很多人使用密码管理器来保密存储自己在用的各种密码。密码管理器的关键环节之一是主密码，主密码保护着所有其它密码。这种情况下，主密码本身就是风险所在。任何知道你的主密码的人，都可以视你的密码保护若无物，畅行无阻。自然而然，为了保证主密码的安全性，你会选用很难想到的密码，把它牢记在脑子里，并做[所有其他](https://monitor.firefox.com/security-tips)你应该做的事情。
但是万一主密码泄露了或者忘记了，后果是什么？也许你去了个心仪的岛上旅行上个把月，没有现代技术覆盖，在开心戏水之后享用美味菠萝的时刻，突然记不清自己的密码是什么了。是“山巅一寺一壶酒”？还是“一去二三里，烟村四五家”？反正当时选密码的时候感觉浑身都是机灵，现在则后悔当初何必作茧自缚。
![XKCD comic on password strength](/data/attachment/album/202008/01/105921y844zhggowre5rgo.png "XKCD comic on password strength")
*（[XKCD](https://imgs.xkcd.com/comics/password_strength.png), [CC BY-NC 2.5](https://creativecommons.org/licenses/by-nc/2.5/)）*
当然，你不会把自己的主密码告诉其它任何人，因为这是密码管理的首要原则。有没有其它变通的办法，免除这种难以承受的密码之重？
试试    Shamir 秘密共享算法    Shamir's Secret Sharing ，这是一种可以将保密内容进行分块保存，且只能将片段拼合才能恢复保密内容的算法。
先分别通过一个古代的和一个现代的故事，看看 Shamir 秘密共享算法究竟是怎么回事吧。
这些故事的隐含前提是你对密码学有起码的了解，必要的话，你可以先温习一下 [密码学与公钥基础设施引论](https://opensource.com/article/18/5/cryptography-pki).
### 一个古代关于加解密的故事
古代某国，国王有个大秘密，很大很大的秘密：
```
def int_from_bytes(s):
    acc = 0
    for b in s:
        acc = acc * 256
        acc += b
    return acc
secret = int_from_bytes("terrible secret".encode("utf-8"))
```
大到连他自己的孩子都不能轻易信任。他有五个子女，但他知道前路危机重重。他的孩子需要在他百年之后用这个秘密来保卫国家，而国王又不能忍受自己的孩子在他们还记得自己的时候就知道这些秘密，尤其是这种状态可能要持续几十年。
所以，国王动用大力魔术，将这个秘密分为了五个部分。他知道，可能有一两个孩子不会遵从他的遗嘱，但绝对不会同时有三个或三个以上会这样：
```
from mod import Mod
from os import urandom
```
国王精通 [有限域](https://en.wikipedia.org/wiki/Finite_field) 和 *随机* 魔法，当然，对他来说，使用巨蟒分割这个秘密也是小菜一碟。
第一步是选择一个大质数——第 13 个 [梅森质数](https://en.wikipedia.org/wiki/Mersenne_prime)（`2**521 - 1`），他让人把这个数铸造在巨鼎上，摆放在大殿上：
```
P = 2**521 - 1
```
但这不是要保密的秘密：这只是 *公开数据*。
国王知道，如果 `P` 是一个质数，用 `P` 对数字取模，就形成了一个数学 [场](https://en.wikipedia.org/wiki/Field_(mathematics))：在场中可以自由进行加、减、乘、除运算。当然，做除法运算时，除数不能为 0。
国王日理万机，方便起见，他在做模运算时使用了 PyPI 中的 [mod](https://pypi.org/project/mod/) 模块，这个模块实现了各种模数运算算法。
他确认过，自己的秘密比 `P` 要短：
```
secret < P
```
```
TRUE
```
将秘密转换为 `P` 的模，`mod P`：
```
secret = mod.Mod(secret, P)
```
为了使任意三个孩子掌握的片段就可以重建这个秘密，他还得生成另外两个部分，并混杂到一起：
```
polynomial = [secret]
for i in range(2):
    polynomial.append(Mod(int_from_bytes(urandom(16)), P))
len(polynomial)
```
```
3
```
下一步就是在随机选择的点上计算某 [多项式](https://en.wikipedia.org/wiki/Polynomial) 的值，即计算 `polynomial[0] + polynomial[1]*x + polynomial[2]*x**2 ...`。
虽然有第三方模块可以计算多项式的值，但那并不是针对有限域内的运算的，所以，国王还得亲自操刀，写出计算多项式的代码：
```
def evaluate(coefficients, x):
    acc = 0
    power = 1
    for c in coefficients:
        acc += c * power