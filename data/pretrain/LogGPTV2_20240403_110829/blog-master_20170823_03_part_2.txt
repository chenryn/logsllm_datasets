```  
rmgr: XLOG        len (rec/tot):     50/    50, tx:          0, lsn: 660/95B6F1F8, prev 660/95B6F188, desc: PARAMETER_CHANGE max_connections=1000 max_worker_processes=128 max_prepared_xacts=0 max_locks_per_xact=6400 wal_level=replica wal  
_log_hints=off track_commit_timestamp=off  
rmgr: XLOG        len (rec/tot):    106/   106, tx:          0, lsn: 660/95B6F230, prev 660/95B6F1F8, desc: CHECKPOINT_SHUTDOWN redo 660/95B6F230; tli 1; prev tli 1; fpw true; xid 0:474860761; oid 675073; multi 1; offset 0; oldest xid 27  
4864396 in DB 13146; oldest multi 1 in DB 13146; oldest/newest commit timestamp xid: 0/0; oldest running xid 0; shutdown  
-----这条之前的WAL都是继承自上一个时间线的，000000020000066000000095就是从000000010000066000000095复制出来的文件。  
rmgr: XLOG        len (rec/tot):     42/    42, tx:          0, lsn: 660/95B6F2A0, prev 660/95B6F230, desc: END_OF_RECOVERY tli 2; prev tli 1; time 2017-08-23 16:48:43.384886 CST  
rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 660/95B6F2D0, prev 660/95B6F2A0, desc: RUNNING_XACTS nextXid 474860761 latestCompletedXid 474860760 oldestRunningXid 474860761  
rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 660/95B6F308, prev 660/95B6F2D0, desc: RUNNING_XACTS nextXid 474860761 latestCompletedXid 474860760 oldestRunningXid 474860761  
rmgr: XLOG        len (rec/tot):    106/   106, tx:          0, lsn: 660/95B6F340, prev 660/95B6F308, desc: CHECKPOINT_ONLINE redo 660/95B6F2D0; tli 2; prev tli 2; fpw true; xid 0:474860761; oid 675073; multi 1; offset 0; oldest xid 274864396 in DB 13146; oldest multi 1 in DB 13146; oldest/newest commit timestamp xid: 0/0; oldest running xid 474860761; online  
rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 660/95B6F3B0, prev 660/95B6F340, desc: RUNNING_XACTS nextXid 474860761 latestCompletedXid 474860760 oldestRunningXid 474860761  
```  
recovery.conf文件中包含了对时间线的这样一段描述。  
当用户恢复数据库时，如果要恢复到当前控制文件更大的时间线，（即跨时间线恢复，恢复到另一个激活的数据库），那么需要设置为latest。  
```  
# If you want to recover into a timeline other than the "main line" shown in  
# pg_control, specify the timeline number here, or write 'latest' to get  
# the latest branch for which there's a history file.  
#  
#recovery_target_timeline = 'latest'  
```  
在了解了时间线的原理后，我们就需要注意一件事情。  
如果你的系统中有非同步流复制关系的主备，并且主备都有归档文件时，千万不要搞错了他们的关系。  
例如  
1、A是主库  
2、B是异步备库  
3、A产生了一堆WAL归档。  
4、某一时刻t1，做了一个全量备份  
5、之后的某一时刻t2，HA程序认为A挂了，把B激活成为新的主库，激活时产生了几个文件：上一个时间线的最后一个WAL，新时间线的第一个WAL，以及一个新时间线文件，告诉你切换的WAL位点是，```1       660/95B6F2A0    no recovery target specified```，然后  
6、由于是异步模式，A还有一些WAL没有发给B。  
7、用户想恢复到t3的某一时刻，  
8、如果你需要用老的备份集恢复到t3，那么就涉及到跨时间线恢复。注意当恢复需要用到B激活时的临界WAL文件时，千万不要使用A归档的临界WAL文件来恢复，否则会在老的时间线越走越远。  
9、为了让恢复走上新时间线的道路，需要具备B上面产生的三个文件：上一个时间线的最后一个WAL，新时间线的第一个WAL，以及一个新时间线文件。  
建议：  
在切换时间线后，使用新的主库做一次全量备份。  
## 数据库备份、恢复、容灾最佳实践文档  
[《PostgreSQL on ECS多云盘的部署、快照备份和恢复》](../201708/20170812_01.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)验证 - recovery test script for zfs snapshot clone + postgresql stream replication + archive》](../201608/20160823_09.md)      
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)双机HA与块级备份部署》](../201608/20160823_08.md)      
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)单个数据库采用多个zfs卷(如表空间)时如何一致性备份》](../201608/20160823_07.md)      
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)备份集自动校验》](../201608/20160823_06.md)      
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)方案与实战》](../201608/20160823_05.md)     
[《PostgreSQL 最佳实践 - 块级别增量备份(pg_rman baseon LSN)源码浅析与使用》](../201608/20160826_01.md)      
[《PostgreSQL 最佳实践 - 任意时间点恢复源码分析》](../201608/20160823_04.md)      
[《PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复》](../201608/20160823_03.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")