f f setlocale(LC_ALL, "")
strxfrm() #
将⼀个本地化字符串转成可以使⽤ 进⾏⽐较的形式，相当于 内部的第⼀部
strxfrm() strcmp() strcoll()
分操作。
size_t strxfrm(
char * restrict s1,
const char * restrict s2,
size_t n
);
它接受三个参数，将第⼆个参数 转为可以使⽤ ⽐较的形式，并将结果存⼊第⼀个参数 。
s2 strcmp() s1
第三个参数 ⽤来限定写⼊的字符数，防⽌超出 的边界。
n s1
它返回转换后的字符串⻓度，不包括结尾的终⽌符。
如果第⼀个参数是 NULL，第三个参数是 0，则不进⾏实际的转换，只返回转换后所需的字符串⻓度。
下⾯的示例是⽤这个函数⾃⼰实现⼀个 。
strcoll()
int my_strcoll(char* s1, char* s2) {
int len1 = strxfrm(NULL, s1, 0) + 1;
int len2 = strxfrm(NULL, s2, 0) + 1;
char *d1 = malloc(len1);
char *d2 = malloc(len2);
strxfrm(d1, s1, len1);
strxfrm(d2, s2, len2);
int result = strcmp(d1, d2);
free(d2);
free(d1);
return result;
}
上⾯示例中，先为两个进⾏⽐较的本地化字符串，分配转换后的存储空间，使⽤ 将它们转为可
strxfrm()
⽐较的形式，再⽤ 进⾏⽐较。
strcmp()
strerror() #
函数返回特定错误的说明字符串。
strerror()
char *strerror(int errornum);
它的参数是错误的编号，由 定义。返回值是⼀个指向说明字符串的指针。
errno.h
printf("%s\n", strerror(2));
上⾯示例输出 2 号错误的说明字符 “No such file or directory“。
下⾯的例⼦是⾃定义报错信息。
#include 
#include 
#include 
int main(void) {
FILE* fp = fopen("NONEXISTENT_FILE.TXT", "r");
if (fp == NULL) {
char* errmsg = strerror(errno);
printf("Error %d opening file: %s\n", errno, errmsg);
}
}
上⾯示例中，通过 拿到当前的默认报错信息，其中 是 定义的宏，表示当
strerror(errno) errno errno.h
前的报错编号。然后，再输出⼀条⾃定义的报错信息。
内存操作函数 #
以下内存操作函数，详⻅《内存管理》⼀章。
memcpy()：内存复制函数。
memmove()：内存复制函数（允许重叠）。
memcmp()：⽐较两个内存区域。
memchr() #
⽤于在内存区域中查找指定字符。
memchr()
void* memchr(const void* s, int c, size_t n);
它接受三个参数，第⼀个参数是内存区域的指针，第⼆个参数是所要查找的字符，第三个参数是内存区域
的字节⻓度。
⼀旦找到，它就会停⽌查找，并返回指向该位置的指针。如果直到检查完指定的字节数，依然没有发现指
定字符，则返回 NULL。
下⾯是⼀个例⼦。
char *str = "Hello, world!";
char *p;
p = memchr(str, '!', 13);
memset() #
将⼀段内存全部格式化为指定值。
memset()
void* memset(void* s, int c, size_t n);
它的第⼀个参数是⼀个指针，指向内存区域的开始位置，第⼆个参数是待写⼊的字符值，第三个参数是⼀
个整数，表示需要格式化的字节数。它返回第⼀个参数（指针）。
memset(p, ' ', N);
上⾯示例中，p 是⼀个指针，指向⼀个⻓度为 N 个字节的内存区域。 将该块内存区域的每个字
memset()
节，都改写为空格字符。
下⾯是另⼀个例⼦。
char string1[15] = "BBBBBBBBBBBBBB";
printf("%s\n", (char*) memset(string1, 'b', 7));
的⼀个重要⽤途，就是将数组成员全部初始化为 0。
memset()
memset(arr, 0, sizeof(arr));
下⾯是将 Struct 结构都初始化为 0 的例⼦。
struct banana {
float ripeness;
char *peel_color;
int grams;
};
struct banana b;
memset(&b, 0, sizeof b);
b.ripeness == 0.0;
b.peel_color == NULL;
b.grams == 0;
上⾯示例，将 Struct banana 的实例 b 的所有属性都初始化为 0。
其他函数 #
void* memset(void* a, int c, size_t n);
size_t strlen(const char* s);
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
time.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
time_t #
time_t 是⼀个表示时间的类型别名，可以视为国际标准时 UTC。它可能是浮点数，也可能是整数，Unix
系统⼀般是整数。
许多系统上，time_t 表示⾃时间纪元（time epoch）以来的秒数。Unix 的时间纪元是国际标准时 UTC 的
1970 年 1 ⽉ 1 ⽇的零分零秒。time_t 如果为负数，则表示时间纪元之前的时间。
time_t ⼀般是 32 位或 64 位整数类型的别名，具体类型取决于当前系统。如果是 32 位带符号整数，
time_t 可以表示的时间到 2038 年 1 ⽉ 19 ⽇ 03:14:07 UTC 为⽌；如果是 32 位⽆符号整数，则表示到
2106 年。如果是 64 位带符号整数，可以表示 亿年到 亿年的时间范围。
-2930 +2930
struct tm #
struct tm 是⼀个数据结构，⽤来保存时间的各个组成部分，⽐如⼩时、分钟、秒、⽇、⽉、年等。下⾯是
它的结构。
struct tm {
int tm_sec;
int tm_min;
int tm_hour;
int tm_mday;
int tm_mon;
int tm_year;
int tm_wday;
int tm_yday;
int tm_isdst;
};
time() #
函数返回从时间纪元到现在经过的秒数。
time()
time_t time(time_t* returned_value);
接受⼀个 time_t 指针作为参数，返回值会写⼊指针地址。参数可以是空指针 NULL。
time()
的返回值是 time_t 类型的当前时间。 如果计算机⽆法提供当前的秒数，或者返回值太⼤，⽆法
time()
⽤ 类型表示， 函数就返回 。
time_t time() -1
time_t now;
now = time(NULL);
time(&now);
上⾯示例展示了将当前时间存⼊变量 的两种写法。
now
如果要知道某个操作耗费的精确时间，需要调⽤两次 ，再将两次的返回值相减。
time()
time_t begin = time(NULL);
time_t end = time(NULL);
printf("%d\n", end - begin);
注意，上⾯的⽅法只能精确到秒。
ctime() #
⽤来将 time_t 类型的值直接输出为⼈类可读的格式。
ctime()
char* ctime( time_t const * time_value );
的参数是⼀个 time_t 指针，返回⼀个字符串指针。该字符串的格式类似 “Sun Jul 4 04:02:48
ctime()
1976\n\0”，尾部包含换⾏符和字符串终⽌标志。
下⾯是⼀个例⼦。
time_t now;
now = time(NULL);
printf("%s", ctime(&now));
注意， 会在字符串尾部⾃动添加换⾏符。
ctime()
localtime()，gmtime() #
函数⽤来将 time_t 类型的时间，转换为当前时区的 struct tm 结构。
localtime()
函数⽤来将 time_t 类型的时间，转换为 UTC 时间的 struct tm 结构。
gmtime()
它们的区别就是返回值，前者是本地时间，后者是 UTC 时间。
struct tm* localtime(const time_t* timer);
struct tm* gmtime(const time_t* timer);
下⾯是⼀个例⼦。
time_t now = time(NULL);
printf("Local: %s", asctime(localtime(&now)));
printf("UTC : %s", asctime(gmtime(&now)));
asctime() #
函数⽤来将 struct tm 结构，直接输出为⼈类可读的格式。该函数会⾃动在输出的尾部添加换⾏
asctime()
符。
⽤法示例参考上⼀⼩节。
mktime() #
函数⽤于把⼀个 struct tm 结构转换为 time_t 值。
mktime()
time_t mktime(struct tm* tm_ptr);
的参数是⼀个 struct tm 指针。
mktime()
会⾃动设置 struct tm 结构⾥⾯的 属性和 属性，开发者⾃⼰不必填写这两个属
mktime() tm_wday tm_yday
性。所以，这个函数常⽤来获得指定时间是星期⼏（ ）。
tm_wday
struct tm 结构的 属性也可以设为 ，让 决定是否应该采⽤夏令时。
tm_isdst -1 mktime()
下⾯是⼀个例⼦。
struct tm some_time = {
.tm_year=82,
.tm_mon=3,
.tm_mday=12,
.tm_hour=12,
.tm_min=00,
.tm_sec=04,
.tm_isdst=-1,
};
time_t some_time_epoch;
some_time_epoch = mktime(&some_time);
printf("%s", ctime(&some_time_epoch));
printf("Is DST: %d\n", some_time.tm_isdst);
difftime() #
⽤来计算两个时间之间的差异。Unix 系统上，直接相减两个 time_t 值，就可以得到相差的秒
difftime()
数，但是为了程序的可移植性，最好还是使⽤这个函数。
double difftime( time_t time1, time_t time2 );
函数接受两个 time_t 类型的时间作为参数，计算 time1 - time2 的差，并把结果转换为秒。
difftime()
注意它的返回值是 double 类型。
#include 
#include 
int main(void) {
struct tm time_a = {
.tm_year=82,
.tm_mon=3,
.tm_mday=12,
.tm_hour=4,
.tm_min=00,
.tm_sec=04,
.tm_isdst=-1,
};
struct tm time_b = {
.tm_year=120,
.tm_mon=10,
.tm_mday=15,
.tm_hour=16,
.tm_min=27,
.tm_sec=00,
.tm_isdst=-1,
};
time_t cal_a = mktime(&time_a);
time_t cal_b = mktime(&time_b);
double diff = difftime(cal_b, cal_a);
double years = diff / 60 / 60 / 24 / 365.2425;
printf("%f seconds (%f years) between events\n", diff, years);
}
上⾯示例中，折算年份时，为了尽量准确，使⽤了⼀年的准确⻓度 365.2425 天，这样可以抵消闰年的影
响。
strftime() #
函数⽤来将 struct tm 结构转换为⼀个指定格式的字符串，并复制到指定地址。
strftime()
size_t strftime(
char* str,
size_t maxsize,
const char* format,
const struct tm* timeptr