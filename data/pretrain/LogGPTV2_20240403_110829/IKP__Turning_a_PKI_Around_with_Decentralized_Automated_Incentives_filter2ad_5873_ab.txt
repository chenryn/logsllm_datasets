CA registration. A CA registers its information with the IKP
authority. Speciﬁcally, the CA registers its identiﬁer, ﬁnancial
account information, one or more public keys, and an update
policy as shown in Table I. To update its registration, the CA
must provide signatures on the update with a threshold number
of its update private keys.
Domain registration. A domain registers a DCP with the
IKP authority. Speciﬁcally, the domain registers its Domain
Name System (DNS) name, one or more public keys, ﬁnancial
account
information, and a checker program that decides
whether a given certiﬁcate is authorized for the domain.
RP issuance. A registered domain negotiates the terms of an
RP with a registered CA. The RP contains the domain name,
CA identiﬁer, validity period, a reference to the domain’s DCP,
and a reaction program that contains the payments that occur
in response to CA misbehavior. The domain pays the CA to
issue the RP, with the IKP authority acting as a mediator to
ensure a fair exchange.
Certiﬁcate issuance. A domain obtains a certiﬁcate from a
CA. The CA does not have to be the same one that issued
the domain’s RP, and does not need to have registered with
the IKP authority. Thus certiﬁcate issuance occurs in the same
way as in TLS.
Misbehavior report. A detector sends evidence of CA mis-
behavior (usually an unauthorized certiﬁcate) and its ﬁnancial
account information to the IKP authority. The detector must
pay a small reporting fee to prevent detectors from reporting
all certiﬁcates they see. We also use a commitment scheme to
prevent frontrunning of detector reports. The IKP authority
runs the checker program on the certiﬁcate to determine
whether the certiﬁcate is authorized.
Reaction. If a reported certiﬁcate is unauthorized, the IKP
authority triggers a reaction by running the reaction program
412
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
speciﬁed in the domain’s RP. The reaction program usually
executes ﬁnancial transactions, which are sent to the ﬁnancial
accounts of the CA, domain, and detector as appropriate.
The use of checker programs and reaction programs provide
expressivity and extensibility to policies and reactions in IKP.
As we describe in Sections IV and V, DCPs can provide
features such as CA whitelisting, public-key pinning, and
short-lived certiﬁcate enforcement, while RPs can provide
ﬁnancial payouts to parties beyond the CA, domain, and
detector.
IV. DOMAIN CERTIFICATE POLICIES (DCPS)
In this section, we take an in-depth look at domain cer-
tiﬁcate policies. In particular, we describe the features and
format of DCPs, and present several examples of DCPs that
enable various useful defenses against CA misbehavior. We
conclude this section by describing the relevant operations for
registering and updating DCPs.
A. Design Principles
We begin by describing the fundamental principles on which
we base our design for DCPs. In particular, we identify
three main design principles: 1) policies are domain-speciﬁed,
2) policies offer sufﬁcient expressiveness, and 3) policy infor-
mation is public, authenticated, and consistent. These princi-
ples help ensure that we can use DCPs to determine certiﬁcate
authorization (i.e., whether a certiﬁcate is considered autho-
rized or not for a given domain) securely and effectively.
1) Domain-speciﬁed policies. The information used to deter-
mine certiﬁcate authorization is speciﬁed by that domain itself.
We observe that only domains know with certainty which
certiﬁcates they have and have not authorized. Therefore, to
enable others to deem certiﬁcates unauthorized as opposed to
simply suspicious, domains must specify policies governing
their certiﬁcates. By adhering to this principle, we can ensure
that any entity with a domain’s policy information can be a
detector and ﬁnd unauthorized certiﬁcates for that domain.
2) Policy expressiveness. The information used to determine
certiﬁcate authorization is expressed in a Turing-complete
language and can thus represent arbitrarily complex policies.
Proposed certiﬁcate policies in the literature [44, 84] allow
domains to specify only a small set of parameters (e.g., gov-
erning how their certiﬁcates should be veriﬁed or how errors
in the TLS handshake should be handled). These policies
cannot be changed in a backwards-compatible way without
upgrading all client browsers and possibly all existing domain
policies. Moreover, such policies do not enable the automation
of reaction to CA misbehavior. IKP provides a general format
for DCPs by allowing domains to specify executable code that
determines whether or not a given certiﬁcate is authorized and
speciﬁes concrete reaction to misbehavior.
3) Public, authenticated, and consistent information. The
information used to determine certiﬁcate authorization is
stored in a publicly accessible location, is globally consistent,
and its authenticity can be veriﬁed by the public. Publicly
Domain Certiﬁcate Policy (DCP)
Domain Name: a.com
Valid From: 17 Aug 2016 0:00:00 UTC
Version Number: 1
Payout Account: AB01 2345…
Update Keys: 0xdd8cb5a2…
Update Threshold: 1
Checker Program: 0xf4956b3e…
a.com
Accounts:
• AB01 2345…
Keys:
• 0xdd8cb5a2…
Checker Program (0xf4956b3e…)
approved = [CA A, CA B]
def check(cert):
  issuer = parse(cert).issuer
  if (issuer in approved)
    return true
  else
    return false
Fig. 3. A sample DCP with a checker program written in pseudocode.
TABLE II
EXPLANATION OF DCP FIELDS.
Field
Use
Domain name
Valid from
Version number
Payment account
Checker program
Update addresses
Update threshold
identify domain for which the policy is active
specify start period of DCP’s validity
identify version of this domain’s DCP
receive payments for domain
implement the DCP’s certiﬁcate policy
(default empty) authorize DCP updates
(default 1) thresh. of signatures required for DCP updates
accessible information ensures that all potential detectors
can ﬁnd unauthorized certiﬁcates using a domain’s policy
information. Globally consistent information ensures that all
potential detectors see the same policy for a domain and can
thus determine with certainty whether a certiﬁcate for that
domain is authorized.
B. DCP Contents
We now describe the contents of a DCP. Figure 3 shows a
sample DCP, and Table II describes the ﬁelds of a DCP. In
short, a DCP contains identifying information for the domain,
(its DNS name and ﬁnancial account information) and for the
policy (the Valid From and Version Number ﬁelds).
A DCP also contains the policy itself, namely, the threshold
of signatures required to authorize changes to the DCPs (the
update keys and update threshold) and the checker program.
The Valid From and Version Number ﬁelds of a
DCP are used in part to help determine whether or not a
certiﬁcate constitutes CA misbehavior. In particular, each RP
is tied to a speciﬁc version of a domain’s DCP, and a given
certiﬁcate only triggers an RP if 1) the certiﬁcate’s validity
period began after the DCP’s Valid From time, 2) the
RP’s Version Number ﬁeld matches that of the DCP, and
3) the checker program deems the certiﬁcate unauthorized
(as described below). Because the DCP deﬁnes misbehavior
by the output of the checker program, an update to a DCP
only increments the version number if the checker program is
changed. This prevents a domain from having to renegotiate
an RP for changing DCP ﬁelds unrelated to its policy, such as
its ﬁnancial account information.
413
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
The update keys and update threshold protect a domain
against the loss or compromise of a private key. We allow
a domain to update its DCP by authorizing the update with
signatures from a threshold of its update keys. Because DCPs
are crucial to determining CA misbehavior, domains should
protect against unauthorized updates with a sufﬁciently high
update threshold. Our recovery system is not foolproof; a do-
main is ultimately responsible for managing its own recovery
addresses. However, our approach provides a tunable level of
security and recoverability for each domain. In order to guard
against a mass loss or compromise of its private keys, a domain
can store some of its private keys ofﬂine, with trusted peers,
or even with a large group of authorities such as one provided
by the CoSi protocol [82].
C. Sample Checker Programs
We now present example checker programs in IKP. These
examples represent a range of existing proposals to improve
the TLS PKI and demonstrate the ﬂexibility of IKP’s checker
programs. For the following examples, we assume the use of
X.509 v3 certiﬁcates [27], but we note that checker programs
can deﬁne their own formats or handle multiple formats,
allowing different certiﬁcates formats to coexist in IKP. We
also assume access to a method to parse a certiﬁcate and
extract the contents of its ﬁelds.
CA whitelisting. A checker program can enforce the use of
certain CAs by extracting the Issuer Name ﬁeld of the
certiﬁcate and checking whether the issuer is on a whitelist
of CA names. In order to enforce the use of a speciﬁc
set of CA keys,
the checker program can instead extract
the Authority Key Identifier extension for X.509
and check the identiﬁer against a whitelist. In either case,
the program ﬁrst deﬁnes a whitelist and then performs the
appropriate check.
Public key pinning. A checker program can implement a form
of public key pinning by extracting the Subject Public
Key Info ﬁeld of the certiﬁcate and checking this key
against a whitelist. Similarly to above, the program deﬁnes
the whitelist and performs the appropriate check. We note
that unlike other key pinning solutions, no trust on ﬁrst use is
necessary because DCPs are public and consistent and thus the
client can simply check the domain’s DCP for the key pins.
Short-lived certiﬁcates. A checker program can enforce the
use of short-lived certiﬁcates [85] by checking that a certiﬁ-
cate’s validity period does not exceed a given maximum value.
This can be done by extracting the Not Before and Not
After ﬁelds from the certiﬁcate and calculating the time
difference to determine the length of the certiﬁcate’s validity
period, and checking that this length is less than a speciﬁed
maximum allowable value.
Wildcard restrictions. A checker program can prevent the
use of wildcard certiﬁcates by simply extracting the Subject
Name ﬁeld and checking that the wildcard character * does
not appear.
Certiﬁcate Transparency. A checker program can implement
criteria similar to those of Certiﬁcate Transparency [54] by
checking for proof that the certiﬁcate has been publicly logged.
The checker program ﬁrst deﬁnes a list of trusted logs. The
program can then query the logs directly or take a proof from
a trusted log as input in addition to the certiﬁcate itself.
Combining checker programs. An additional beneﬁt of
public consistent DCPs is that domains can see other checker
programs and model
their own from these programs. We
additionally allow domains to call other checker programs.
This feature allows a domain to write a checker program that
simply calls a set of checker programs, thus allowing the
domain to combine existing policies. For example, a domain
can specify that all criteria in the called checker programs
must be fulﬁlled by requiring that all referenced programs
deem a certiﬁcate authorized, or specify that some threshold
of referenced programs must do so by counting the number
of referenced programs that deem the certiﬁcate authorized.
D. DCP Operations
We now describe relevant operations for a DCP. Speciﬁ-
cally, we cover the initial registration of a domain’s DCP as
well as the update process.
DCP registration. A domain D requests to initially register
its DCP in the blockchain by sending a message to the IKP
authority containing its DNS name, the contents of its initial
desired DCP, and information to authenticate itself to the
IKP authority. Speciﬁcally, to authenticate itself, D provides
a signature on its name and DCP with 1) its DNSSEC [13]
private key, as well as a DNSSEC signature chain to the
ICANN root zone key, or 2) its TLS private key, as well as a
certiﬁcate chain from the corresponding public key to a root
CA key. This authentication method, which we call the use of
a bootstrap proof, provides a way for D to show control over
its identiﬁer and public key by leveraging an existing PKI.
Because IKP is tied to TLS and hence to DNS names, we can
use bootstrap proofs to protect DCP squatting by malicious
entities that do not own the names they claim.
It
is safer to use DNSSEC-based bootstrap proofs, as
DNSSEC has had far fewer compromises than TLS and only
requires a single root key to be stored by the IKP authority,
However, in a measurement we conducted using data from
Censys [31], we found that only 649 of the top 100,000 most
popular domains use both DNSSEC and HTTPS. Therefore,
few domains will be able to reap the beneﬁts of using
DNSSEC-based bootstrap proofs.
Using TLS-based bootstrap proofs requires the IKP author-
ity to select a list of accepted root CA keys, and also runs the
risk that an unauthorized certiﬁcate can be used to register a
DCP. To address the ﬁrst problem, the IKP authority could
simply select a set of 28 root certiﬁcates which are present in
most popular desktop and mobile operating systems and web
browsers [75]. To address the second problem, we can allow
domains to override an existing registration by submitting
multiple independent bootstrap proofs. This approach makes
registration easy for most domains, but allows a domain whose
registration is stolen by an adversary with an unauthorized
certiﬁcate to recover by obtaining an additional certiﬁcate.
414
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
We note that bootstrap proofs can make it more difﬁcult
for legitimate domains to register themselves with the IKP
authority, and are not foolproof. However, given the crucial
role DCPs play in IKP, we need to protect them from being
easily claimed and held by adversaries. We also do not
envision bootstrap proofs as a long-term solution, as they
are based on PKIs that suffer from the problems that we
aim to solve with IKP. We can instead conﬁgure the IKP
authority such that as deployment increases, the bootstrap
proof requirement can be relaxed or eliminated.
Updates. A domain D can update its information by sending
a transaction to the IKP contract with its new DCP or registra-
tion and signatures from a threshold number of its update keys.
The IKP authority veriﬁes each of these signatures, checks
that the number of signatures is at least the threshold number
required by D’s current DCP, and if so, updates D’s DCP in
its registry. Recall that the IKP authority only increments the
version number of D’s DCP if the checker program changes.
V. REACTION POLICIES (RPS)
In this section, we take an in-depth look at reaction policies.
In particular, we begin by explaining the principles behind the
design of RPs, and describe the contents of RPs. We then
describe payout reaction programs, which provide ﬁnancial
incentives in IKP. We conclude this section by describing the
relevant operations for issuing RPs, selecting the relevant RP
for a domain, and executing an RP.
A. Design Principles
We begin by describing the design principles upon which
we base our design of RPs. In particular, we identify three
main design principles for RPs: 1) certiﬁcate-independence,
2) policy-adherence, and 3) single-use. These principles help
ensure that reactions to misbehavior do not cause perverse
incentives or unintended consequences. We next discuss the
three principles in detail.
1) Certiﬁcate-independence. An RP should be decoupled
from public-key certiﬁcates. Like certiﬁcates, RPs are negoti-
ated between CAs and domains. However, certiﬁcates and RPs
are independent: CAs issue RPs in addition to certiﬁcates,
and therefore domains can obtain certiﬁcates and RPs from
different CAs. RPs provide a relying party with a measure of
conﬁdence in a domain’s certiﬁcates, and serve a fundamen-
tally different role from certiﬁcates in the IKP ecosystem. In
particular, an RP protects a domain against any unauthorized