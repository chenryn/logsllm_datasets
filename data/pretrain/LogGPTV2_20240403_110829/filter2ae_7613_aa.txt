作者：0x7F@知道创宇404区块链安全研究团队  
时间：2018年7月12日
### 0x00 前言
区块链的火热程度一直以直线上升，其中以区块链 2.0 —— 以太坊为代表，不断的为传统行业带来革新，同时也推动区块链技术发展。
区块链是一种分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式，这是一个典型的去中心化应用，建立在 p2p
网络之上；本文以学习和分析以太坊运作原理为目的，将以太坊网络架构作为一个切入点，逐步深入分析，最终对以太坊网络架构有个大致的了解。
通过学习以太坊网络架构，可以更容易的对网络部分的源码进行审计，便于后续的协议分析，来发现未知的安全隐患；除此之外，目前基于 p2p
网络的成熟的应用非常少，借助分析以太坊网络架构的机会，可以学习一套成熟的 p2p 网络运行架构。
本文侧重于数据链路的建立和交互，不涉及网络模块中的节点发现、区块同步、广播等功能模块。
### 0x01 目录
  1. Geth 启动
  2. 网络架构
  3. 共享密钥
  4. RLPXFrameRW 帧
  5. RLP 编码
  6. LES 协议
  7. 总结
其中第 3、4、5 三个小节是第 2 节“网络架构”的子内容，作为详细的补充。
### 0x02 Geth 启动
在介绍以太坊网络架构之前，首先简单分析下 Geth 的整体启动流程，便于后续的理解和分析。
**以太坊源码目录**
    tree -d -L 1
    .
    ├── accounts                账号相关
    ├── bmt                     实现二叉merkle树
    ├── build                   编译生成的程序
    ├── cmd                     geth程序主体
    ├── common                  工具函数库
    ├── consensus               共识算法
    ├── console                 交互式命令
    ├── containers              docker 支持相关
    ├── contracts               合约相关
    ├── core                    以太坊核心部分
    ├── crypto                  加密函数库
    ├── dashboard               统计
    ├── eth                     以太坊协议
    ├── ethclient               以太坊RPC客户端
    ├── ethdb                   底层存储
    ├── ethstats                统计报告
    ├── event                   事件处理
    ├── internal                RPC调用
    ├── les                     轻量级子协议 
    ├── light                   轻客户端部分功能
    ├── log                     日志模块
    ├── metrics                 服务监控相关
    ├── miner                   挖矿相关
    ├── mobile                  geth的移动端API
    ├── node                    接口节点
    ├── p2p                     p2p网络协议
    ├── params                  一些预设参数值
    ├── rlp                     RLP系列化格式 
    ├── rpc                     RPC接口
    ├── signer                  签名相关
    ├── swarm                   分布式存储
    ├── tests                   以太坊JSON测试
    ├── trie                    Merkle Patricia实现
    ├── vendor                  一些扩展库
    └── whisper                 分布式消息
    35 directories
**初始化工作**
Geth 的 `main()` 函数非常的简洁，通过 `app.Run()` 来启动程序：
    [./cmd/geth/main.go]
    func main() {
        if err := app.Run(os.Args); err != nil {
            fmt.Fprintln(os.Stderr, err)
            os.Exit(1)
        }
    }
其简洁是得力于 Geth 使用了 `gopkg.in/urfave/cli.v1` 扩展包，该扩展包用于管理程序的启动，以及命令行解析，其中 `app`
是该扩展包的一个实例。
在 Go 语言中，在有 `init()` 函数的情况下，会默认先调用 `init()` 函数，然后再调用 `main()` 函数；Geth 几乎在
`./cmd/geth/main.go#init()` 中完成了所有的初始化操作：设置程序的子命令集，设置程序入口函数等，下面看下 `init()`
函数片段：
    [./cmd/geth/main.go]
    func init() {
        // Initialize the CLI app and start Geth
        app.Action = geth
        app.HideVersion = true // we have a command to print the version 
        app.Copyright = "Copyright 2013-2018 The go-ethereum Authors"
        app.Commands = []cli.Command{
            // See chaincmd.go:
            initCommand,
            importCommand,
            exportCommand,
            importPreimagesCommand,
            ...
        }
        ...
    }
在以上代码中，预设了 `app` 实例的值，其中 `app.Action = geth` 作为 `app.Run()` 调用的默认函数，而
`app.Commands` 保存了子命令实例，通过匹配命令行参数可以调用不同的函数(而不调用 `app.Action`)，使用 Geth
不同的功能，如：开启带控制台的 Geth、使用 Geth 创造创世块等。
**节点启动流程**
无论是通过 `geth()` 函数还是其他的命令行参数启动节点，节点的启动流程大致都是相同的，这里以 `geth()` 为例：
    [./cmd/geth/main.go]
    func geth(ctx *cli.Context) error {
        node := makeFullNode(ctx)
        startNode(ctx, node)
        node.Wait()
        return nil
    }
其中 `makeFullNode()` 函数将返回一个节点实例，然后通过 `startNode()` 启动。在 Geth
中，每一个功能模块都被视为一个服务，每一个服务的正常运行驱动着 Geth 的各项功能；`makeFullNode()`
通过解析命令行参数，注册指定的服务。以下是 `makeFullNode()` 代码片段：
    [./cmd/geth/config.go]
    func makeFullNode(ctx *cli.Context) *node.Node {
        stack, cfg := makeConfigNode(ctx)
        utils.RegisterEthService(stack, &cfg.Eth)
        if ctx.GlobalBool(utils.DashboardEnabledFlag.Name) {
            utils.RegisterDashboardService(stack, &cfg.Dashboard, gitCommit)
        }
        ...
        // Add the Ethereum Stats daemon if requested.
        if cfg.Ethstats.URL != "" {
            utils.RegisterEthStatsService(stack, cfg.Ethstats.URL)
        }
        return stack
    }
然后通过 `startNode()` 启动各项服务并运行节点。以下是 Geth 启动流程图：
每个服务正常运行，相互协作，构成了 Geth：
### 0x03 网络架构
通过 `main()` 函数的调用，最终启动了 p2p 网络，这一小节对网络架构做详细的分析。
**三层架构**  
以太坊是去中心化的数字货币系统，天然适用 p2p 通信架构，并且在其上还支持了多种协议。在以太坊中，p2p
作为通信链路，用于负载上层协议的传输，可以将其分为三层结构：
  1. 最上层是以太坊中各个协议的具体实现，如 eth 协议、les 协议。 
  2. 第二层是以太坊中的 p2p 通信链路层，主要负责启动监听、处理新加入连接或维护连接，为上层协议提供了信道。 
  3. 最下面的一层，是由 Go 语言所提供的网络 IO 层，也就是对 `TCP/IP` 中的网络层及以下的封装。 
**p2p 通信链路层**  
从最下层开始逐步分析，第三层是由 Go 语言所封装的网络 IO 层，这里就跳过了，直接分析 p2p 通信链路层。p2p 通信链路层主要做了三项工作：
  1. 由上层协议的数据交付给 p2p 层后，首先通过 RLP 编码。
  2. RLP 编码后的数据将由共享密钥进行加密，保证通信过程中数据的安全。 
  3. 最后，将数据流转换为 RLPXFrameRW 帧，便于数据的加密传输和解析。  
(以上三点由下文做分析)
**p2p 源码分析**  
p2p 同样作为 Geth 中的一项服务，通过“0x03 Geth 启动”中 `startNode()` 启动，p2p 通过其 `Start()`
函数启动。以下是 `Start()` 函数代码片段：
    [./p2p/server.go]
    func (srv *Server) Start() (err error) {
        ...
        if !srv.NoDiscovery {
            ...
        }
        if srv.DiscoveryV5 {
            ...
        }
        ...
        // listen/dial
        if srv.ListenAddr != "" {
            if err := srv.startListening(); err != nil {
                return err
            }
        }
        ...
        go srv.run(dialer)
        ...
    }
上述代码中，设置了 p2p 服务的基础参数，并根据用户参数开启节点发现(节点发现不在本文的讨论范围内)，随后开启 p2p
服务监听，最后开启单独的协程用于处理报文。以下分为服务监听和报文处理两个模块来分析。
###### 服务监听
通过 `startListening()` 的调用进入到服务监听的流程中，随后在该函数中调用 `listenLoop` 用一个无限循环处理接受连接，随后通过
`SetupConn()` 函数为正常的连接建立 p2p 通信链路。在 `SetupConn()` 中调用 `setupConn()` 来做具体工作，以下是
`setupConn()` 的代码片段：
    [./p2p/server.go]
    func (srv *Server) setupConn(c *conn, flags connFlag, dialDest *discover.Node) error {
        ...
        if c.id, err = c.doEncHandshake(srv.PrivateKey, dialDest); err != nil {
            srv.log.Trace("Failed RLPx handshake", "addr", c.fd.RemoteAddr(), "conn", c.flags, "err", err)
            return err
        }
        ...
        phs, err := c.doProtoHandshake(srv.ourHandshake)
        ...
    }
`setupConn()` 函数中主要由 `doEncHandshake()`
函数与客户端交换密钥，并生成临时共享密钥，用于本次通信加密，并创建一个帧处理器 `RLPXFrameRW`；再调用 `doProtoHandshake()`
函数为本次通信协商遵循的规则和事务，包含版本号、名称、容量、端口号等信息。在成功建立通信链路，完成协议握手后，处理流程转移到报文处理模块。
下面是服务监听函数调用流程：
###### 报文处理
`p2p.Start()` 通过调用 `run()` 函数处理报文，`run()`
函数用无限循环等待事务，比如上文中，新连接完成握手包后，将由该函数来负责。`run()`
函数中支持多个命令的处理，包含的命令有服务退出清理、发送握手包、添加新节点、删除节点等。以下是 `run()` 函数结构：
    [./p2p/server.go]
    func (srv *Server) run(dialstate dialer) {
        ...
        for {
            select {