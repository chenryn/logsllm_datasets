the sizes of the VTables in the binary. That is:
VTN ew_Size = (1 + f ) VTOld_Size , 0 ≤ f ≤ 1
In Figure 3, the expanded VTables for primary and secondary VTa-
bles of D are presented. Notice how the number of entries have
expanded in each of the sub VTables. In our approach it is possible
for VTable for B-in-D to have more or less number of entries than
complete object VTable for B. This uncertainty in number of func-
tion pointers introduces further challenges in reverse engineering.
As a key requirement for correctness and in order to prevent in-
troducing attack space, the function pointers added by our solution
must be unreachable by user code. Yet it must be hard to statically
reason as unreachable functions, otherwise a reverse engineer could
simply exclude the function pointers as artificial.
As a solution, we derive insights from the fact that function
pointers in a VTable are never individually referenced and are
always referenced from the base of the VTable. Therefore, we ensure
that all references to VTables are unaltered and adjusted to refer to
the newly expanded VTable after debiasing. Furthermore, because
the expansion factor f normalizes the size of the VTable across all
the VTables in the binary, we are guaranteed that each function
pointer offset in every inflated VTable is a valid reachable offset
in some other VTable. Therefore, static binary analysis can not
exclude a particular function pointer offset as unreachable. Our
approach is confined to modifications to the VTables (data), so the
solution is orthogonal to other compiler-based security solutions
which rely on code modifications such as StackGuard [5].
4 DEBIASING VT BIAS
We debias VT bias through the process of VTable splitting, where
each complete-object VTable is separated into sub-VTables and
dispersed across the read-only section of the binary. Our implemen-
tation uses a multi-step LLVM Intermediate Representation (IR)
level pass which is enabled/disabled at the command line.
4.1 Identifying VTables in the IR
if isV T(д)&&hasSecV T s(д) then
subV T s ← дetSubV T s(д)
for each vt in subV T s do
for each module in modules do
for each дlobal in module do
Algorithm 1 General workflow of VTable splitting LLVM pass
1: procedure VTSplitter(modules)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
end for
15:
16: end procedure
newV T ← cr eateEmptyV T()
placeRandomlyInGlobal(newV T)
copyV T(newV T , vt)
r eplaceRef s(newV T , vt)
r emoveV T(vt)
end for
end if
end for
The first step in implementation is identifying the VTables in
the compilation unit, then separating the VTables that contain
subVTables. This process can be preformed by relying on LLVM
IR level name mangling rules. Finding a VTable requires finding a
symbol matching @_ZTV# which is the Itanium ABI-specified name
for a VTable. Next, in order to see if it has a sub-VTable, we check
the first field of that entry to see if it has multiple arrays as its type
as shown in appendix A. Once that is done, we check to see if it
151ABI Debiasing
ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
contains a secondary VTable structure. The name mangling rules
we rely on are tied to the Itanium ABI, so this process will function
on different versions of the compiler. Because it is possible to place
our pass before symbol stripping is done, this method works even
when the desired result is a stripped binary that will not contain
these symbols.
4.2 Creating Replacements and Randomizing
their Locations
Once all VTables are found, the next step is to create as many new
entries in the IR as necessary to break apart the VTables. One for
the primary VTable, whose size we know from the previous step.
And then one for each secondary VTable we are breaking apart.
To do this we create an IR entry of the correct size and type by
copying the type and linkage information from the original entry,
then assign it an arbitrary name. During the creation process of a
new global entry in the IR, we use the fact it may be placed after
any other global entry that already exists to place it into a random
location. Because LLVM lays out global objects in an order based
on where they appear in the IR, this is sufficient to move the sub-
VTable in the resulting binary. Once it is done and placed into its
new random location, we then copy all the information from the
secondary VTable to this new entry.
4.3 Fixing References
After we construct each new VTable we must then go about fixing
all the references in the constructors, VTTs (Virtual Table Table)
and anywhere else from the old global entry to the new location.
We do this by iterating over a list that LLVM maintains of users for
the old entry. If the entry is a Get Element Pointer (GEP) statement,
we examine it more closely. Because the old entry is constructed
like an array of pointers, and due to the way the GEP statement is
constructed, we have to check each instance to see if it is referring
to the index from which we copied the pointer. If it is, we create a
new GEP statement that holds the new VTable instead of the old
secondary VTable, and use that to overwrite the old GEP. Then
we move onto the next user of the old VTable, and repeat until
there are no more users. LLVM holds a complete list of users for
any given global data structure, so this approach does not miss any
potential adjustments to the new value.
4.4 Eliminating Old VTables
Once we have iterated over every user once for every new VTable
we have created, the old global will no longer have any users (objects
or instructions that point to it) and it can be safely removed. We then
repeat these steps until we can no longer find any more VTables in
the IR. With this done, we must then remove the old global entry,
as leaving it around would defeat obfuscation purposes completely.
To do this we have LLVM run its dead global code elimination
pass. With all references to the original entry removed, the dead
code pass will detect and delete the old entry as an unused global
code if nothing points to it anymore. Using this pass ensures that
if we somehow missed any references to the VTable it will not
be removed, and the program will still work correctly. However,
in that case this particular entry will not be protected by the VT
Splitter. Using the dead global code elimination pass additionally
ensures that if LLVM ever updates how global code is removed, our
pass will still be fully functional.
4.5 Applying the Pass
We created a custom build of LLVM 6.0, placed our pass in its
source tree, and scheduled the pass as part of the default pass
pipeline during compilation. We schedule our pass before LLVM
performs its global dead code elimination pass for reasons stated in
the previous section, and after all other code transformation passes
that LLVM schedules during compilation. Applying the pass to a
program’s source code requires compiling it using our modified
version of LLVM and Clang. This means there is no need to change
any Makefiles or CMake files to enable the pass, to load the pass’
library using LLVM opt or to give the pass’ library as an argument
to the Clang driver. This simplifies our testing procedure, and allows
us to evaluate against a large set of varied programs.
5 DEBIASING FP BIAS
We address FP bias by eliminating the predictability regarding sizes
of VTables and inheritance relationships. We achieve this through
VT Expander. It operates on a list of VTables (if the VTables are
split, then individual split VTables, if not, complete-object VTables),
and adds a number of extra VTable entries to it that increases the
size based on the configurable expansion factor f . In the case of a
VTable that contains one or more sub VTables that have been split
by VT Splitter, the extra entries are appended after each subVTable.
user Seed ←getUserSeed
for each module in modules do
for each дlobal in module do
if isV T(д)&&isDef ined(д) then
Algorithm 2 General workflow of VTable expander LLVM pass
1: procedure VTExpander(modules)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
end for
14:
15: end procedure
newSize ← дet N ewSize(д, f , user Seed)
for newSize − size(д) do
newEntry ← дet RandomFunction()
appendEntry(д, newEntry)
updateU sers(д)
end for
end if
end for
5.1 Selecting Extra Function Pointers
In order to make the extra entries difficult to detect, they cannot
simply be copies of entries that are earlier in the VTable. They also
cannot be garbage values, if they don’t point to the beginning of
some function or thunk, then they can be discarded by any reverse
engineering effort. To combat that, we select two types of new
entries. The first is simply a function selected randomly from the
same module the VTable is in. While this can lead to obviously
incorrect choices (if it is pointing to the main function for example),
on the whole this selection makes it very difficult to tell where the
appended entries begin and end. The other type of entry we add
is a pure virtual function. The frequency of pure virtual function
added is configurable.
152ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
David Demicco, Rukayat Erinfolami, and Aravind Prakash
5.2 Cross Module VTables
In compilation the compiler will create dummy VTables for modules
where they would be used, but are not declared. These are LLVM
constant objects that hold a pointer to an array of i8* equal to the
size of the finished VTable (see appendix A). In normal compilation
these dummy VTables are replaced with the full VTables as long
as the size and type of the dummy VTables match. If the size and
types of these dummy VTables do not match, compilation fails. For
us, this means we need to pass a user-defined seed into the pass,
and we use this seed and a hash based on the mangled name of the
VTable in order to calculate a consistent random size for a given
VTable, even across modules.
5.3 Support for Virtual Inheritance
Our solution provides inherent support for virtual inheritance. Vir-
tual inheritance is an important feature in C++ that is used in
popular libraries (e.g., stream object in ostream). Due to the com-
plexities in supporting virtual inheritance, the ABI mandates ad-
ditional structures like construction VTables and VTTs. Both VT
Splitter and VT Expander do not distinguish between the types
of VTables, and as such inherently split and expand all VTables
including construction VTables.
5.4 Integration with VT Splitter
To allow for the VT Expander to be run along side VT Splitter (which
causes extra entries to be appended onto the split off subVTables),
the only requirement is that the split VTables created with VT
Splitter have the same internal IR format as any other VTable. We
ensure this is true so we can run the VT Expander pass in exactly
the same manner as the splitter pass, setting it so the Expander
pass runs after the VT Splitter pass completes.
Table 2: Table showing the number of primary VTables, the
number of secondary VTables, and the combined total
Programs
Doxygen
FireFox/wlibxul
Xalancbmk_r
parest_r
mysqld
Spidermonkey
Nodejs
Primary
VTables
962
14635
944
1590
4195
1597
3181
VTables
Secondary
VTables
79
3911
70
222
231
6
111
Total VTables
1041
18546
1014
1812
4426
1603
3292
6 EVALUATION
In this section, We evaluate VTable splitting and function pointer
reordering on binaries using three criteria; size, correctness and
performance. In addition we evaluated the impact of VTable split-
ting on DeClassifier, a modern reverse engineering tool and discuss
the results in section 7.
6.1 Experimental setup
We ran these experiments on Intel Core i7-4790 3.60Ghz x 8 cores
with 32GB of RAM on Ubuntu 16.04.7, with glibc 2.23(Ubuntu).
We modify LLVM 6.0 to add the VT Splitter and VT Expander
Table 3: Performance tasks for each binary
Execution Payload