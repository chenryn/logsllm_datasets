(cid:6)(cid:16)(cid:18)(cid:1)(cid:9)(cid:8)(cid:10)(cid:11)(cid:17)(cid:14)
(cid:37)(cid:37)(cid:18)(cid:16)(cid:9)(cid:10)(cid:37)(cid:13)(cid:23)(cid:12)(cid:12)(cid:34)(cid:22)(cid:25)(cid:23)(cid:35)
(cid:3)(cid:24)(cid:12)(cid:14)(cid:20)(cid:22)(cid:16)(cid:19)(cid:18)
(cid:5)(cid:6)(cid:6)(cid:3)(cid:34)(cid:22)(cid:25)(cid:23)(cid:35)
(cid:27)(cid:25)(cid:22)(cid:16)(cid:20)(cid:37)(cid:13)(cid:23)(cid:12)(cid:12)(cid:34)(cid:22)(cid:25)(cid:23)(cid:35)
Figure 4: VTPin prototype. Given a pointer to be freed, VTPin infers whether the pointer is associated with a virtual object or
not (Section 3.1). First, the memory map is searched for locating a possible VTable, and then RTTI resolution is used. Once VTPin
identiﬁes that a pointer is associated with a virtual object, it pins the VTable pointer of that object to a safe VTable. VTPin uses
realloc for shrinking the object to 8 bytes and discarding the rest of it. Finally, VTPin copies the VTable address of the safe object
to the preserved 8 bytes containing the VTable pointer. VTable hijacking through dangling pointers is not possible anymore, since
triggering such a pointer will eventually call a virtual method implemented by the safe object.
(cid:6)(cid:5)(cid:8)(cid:9)(cid:13)(cid:10)
(cid:17)(cid:20)(cid:18)
(cid:20)(cid:21)(cid:17)(cid:10)(cid:7)(cid:12)(cid:15)(cid:11)(cid:16)
(cid:3)(cid:3)(cid:15)(cid:8)(cid:14)(cid:10)
(cid:4)(cid:13)(cid:8)(cid:19)(cid:19)(cid:1)
(cid:15)(cid:8)(cid:14)(cid:10)
(cid:17)(cid:20)(cid:18)
(cid:2)(cid:20)(cid:21)(cid:17)(cid:10)(cid:7)(cid:12)(cid:15)(cid:11)(cid:16)
(cid:2)(cid:2)(cid:20)(cid:21)(cid:17)(cid:10)(cid:7)(cid:12)(cid:15)(cid:11)(cid:16)
Figure 5: Memory layout expected during RTTI resolution.
Each shaded block denotes a memory location probed with the
mincore syscall to check whether it is mapped, or not, before
accessing it. ptr is the pointer intercepted by our free hook.
original object is not virtual. To probe the memory without causing
a SIGSEGV, VTPin uses the mincore system call, which fails (i.e.,
ENOMEM in Linux) when the memory is unmapped. By default, VT-
Pin uses this second method to probe memory locations, since, on
preliminary tests, SIGSEGV handling exhibited worse performance
(i.e., extra 2–9%). Note that while mincore-based probing is fairly
efﬁcient, we believe that platform-speciﬁc, user-mode-only prob-
ing methods may further improve performance. For example, the
recent Intel transactional synchronization extensions (TSX) allow
a user thread to efﬁciently infer unmapped memory locations from
transaction aborts without involving the kernel [44]. However, due
to its portability limitations (TSX is only available in recent Intel
CPUs and often disabled due to implementation bugs), we decided
against incorporating such a method in our current prototype.
4.4 VTable Pinning
Once VTPin identiﬁes that a pointer to be freed is associated
with a virtual object, it proceeds and pins the respective VTable
pointer(s) to a safe VTable (Figure 4). In cases of single inheriting
objects, VTPin uses realloc as provided by glibc for shrinking
the object to 8 bytes. This action preserves (at the original mem-
ory address) the ﬁrst 8 bytes, where the (still valid) VTable pointer
is stored, and deallocates the rest of the object [9]. Finally, VTPin
copies the VTable address of the safe object to the preserved 8 bytes
of the object. This action essentially pins the old VTable pointer to
a safe VTable controlled by VTPin. VTable hijacking through dan-
gling pointers is not possible anymore, as triggering such a pointer
will invoke a virtual method implemented by the safe object.
Notice that not all memory allocators follow the semantics of
glibc when implementing realloc. Many implementations [22,
34] return a fresh pointer located at a different memory address,
no matter if the new object occupies less or more space than the
originally-allocated one. VTPin favors transparency and does not
require changes in the semantics followed by the memory alloca-
tor. VTPin needs only a custom function for reallocating an object
at a particular memory address. This function can be any private
function (not realloc), which is meant to be used only by VTPin
for offering protection to the running process. Thus, all policies
related to the memory allocation of the protected program are pre-
served. If by no means such a function can be made available, then
VTPin resorts to preserving the entire virtual object instead of free-
ing it—and releasing it at a later point in time, once no dangling
pointers to it are found by the memory-scan thread (Section 4.2.3).
The entire virtual object is also preserved in cases of multiple in-
heritance. Since the objects in those cases contain more than one
virtual pointer, VTPin cannot reallocate memory at their speciﬁc
addresses (malloc does not provide that functionality).
4.5 Handling Multiple Inheritance
VTPin needs to determine whether to preserve only the VTable
pointer or the entire object. The entire object is preserved in cases
of multiple inheritance, as several VTable pointers are contained in
it. VTPin gets the size of the object with malloc_usable_size1,
and then traverses the memory occupied by the object to ﬁnd VTable
pointers that point to a nearby (in memory) VTable compared to the
1malloc_usable_size is a non-standard interface provided by
all allocators tested with VTPin (i.e., ptmalloc2/glibc, tcmal-
loc, jemalloc) for introspection purposes. However, notice that
free does not require a size argument; every allocator has a way of
knowing the exact size of the memory block that is to be reclaimed.
454ﬁrst VTable pointer of the object. In case VTPin ﬁnds more than
one VTable pointer contained in the virtual object, then the class
is considered to make use of multiple inheritance and the complete
object is preserved. Notice that all contained VTable pointers are
pinned and therefore neutralized.
5. EVALUATION
In this section, we assess the security effectiveness of VTPin,
and evaluate its associated memory and runtime overheads. We
test our prototype with the C++ benchmarks (all but 471.omnetpp
due to limitations of our prototype) from the SPEC CPU2006 suite,
Mozilla Firefox v47, and Chromium v50. All experiments were
carried out on a host running Ubuntu Linux v14.04 (64-bit), armed
with a 2GHz quad-core Intel Core i5-3320M CPU and 8GB RAM.
5.1 Effectiveness
We evaluated the effectiveness of VTPin by employing the same
three (publicly available) exploits used by the authors of VTrust [58].
All three exploits target Firefox and rely on use-after-free vulner-
abilities and VTable hijacking. The tests were performed on an
Ubuntu Linux v14.04 (64-bit) virtual machine, with the latest ver-
sion of Metasploit framework running on the host machine. Each
corresponding Firefox version was compiled with GCC and the
’ac_add_options --enable-cpp-rtti’ ﬂag was added to the
default conﬁguration. The original exploits target Windows XP/SP3,
so we had to port them to Linux; they match the following CVEs:
CVE-2013-1690 (Firefox v17.0), CVE-2011-0065 (Firefox v3.5)
and CVE-2013-0753 (Firefox v17.0.1). All exploits successfully
triggered the respective vulnerabilities, which we cross-checked by
inspecting their stacktraces, and they were all thwarted by VTPin.
5.2 Deallocation Calls
Table 2 summarizes the distribution of the instrumented free
calls, as recorded by VTPin, for the C++ benchmarks of the SPEC
CPU2006 suite, as well as for Mozilla Firefox and Chromium. For
SPEC CPU2006 we run the respective benchmarks until comple-
tion. Each recorded free call may correspond to deallocating: (a) a
deﬁnitely non-virtual object; or (b) a possibly virtual object. The
former means that the pointer about to be freed does not point to a
VTable—in practice it points to a writeable memory block (recall
that VTables are always kept in read-only pages). For the latter sce-
nario(s), we further resolve object types using RTTI. If the resolu-
tion is not successful, we surmise that the deallocation corresponds
to a non-virtual object as well (as mentioned in Section 3.1).
Given the above, Table 2 should be interpreted as follows (us-
ing xalanc as an example). After running xalanc to completion,
VTPin recorded a total of 126,929,346 free invocations. 1,594
calls were not handled by VTPin, since the system had not boot-
strapped at that time; these calls are associated with loading long-
lived dynamic shared objects during startup. Furthermore, there
were 81,211 free invocations with null as argument (in that case
VTPin returns immediately), and 126,780,565 calls regarding non-
virtual objects—126,780,487 calls with a vfPtr that does not point
to a VTable (i.e., scenario (a) above), and 78 calls (with a seemingly
valid vfPtr) for which RTTI resolution failed. All in all, VTPin
resolved 65,898 virtual objects, while 27,481 (41.7%) of them were
virtual objects belonging to a class with multiple inheritance.
Several observations can be made based on Table 2. First, the
deallocation of virtual objects is only a small percentage (in most
cases less than 1%) of the total deallocations. The highest percent-
age is recorded when Firefox is running the SunSpider benchmark,
where the deallocations of virtual objects account for ∼14% of all
deallocations. Second, most deallocations that are not related with
a virtual object are cleared fast, without relying on RTTI resolution;
VTPin quickly infers that the pointer to be freed is not associated
with any VTable (column invalid vfPtr). Lastly, whenever VTPin
decides to take the slow path, i.e., to perform a resolution based
on RTTI, the decision is correct in most of the cases; only a small
fraction of all RTTI resolutions fail (column RTTI failed).
5.3 Memory Overhead
VTPin preserves VTable pointers or (whole) virtual objects. Al-
though the memory occupied by pinned objects is periodically re-
claimed, it is interesting to explore its volume. For this, we hook
malloc and record the size of the requested memory block, and
the pointer returned, on each invocation. In parallel, we trace all
the free calls. The pointer that is freed is associated to the respec-
tive malloc invocation, giving us the actual size for each virtual
object detected by VTPin. For each benchmark, we maintain the
cumulative allocation size, increased/decreased by S when an al-
location/deallocation of size S takes place. We then calculate the
maximum cumulative allocation size, as observed during the life-
cycle of each benchmark, at the end of a given run. In parallel,
we account for any operations that affect virtual objects, and mea-
sure the extra memory required by VTPin when using a slab-like
allocator or the standard glibc allocator.
Table 3 summarizes our ﬁndings. For brevity, we focus our
browser memory analysis on Firefox, which maintains many more
virtual objects that yield signiﬁcantly higher pressure on the mem-
ory footprint. Notice that, when the glibc allocator is used, VTPin
exhibits negligible memory overhead across all the benchmarks.
When a slab allocator is used (and VTPin needs to retain entire
virtual objects), the memory overhead is, as expected, more promi-
nent. Nonetheless, only two benchmarks, Peacekeeper and xalanc,
force VTPin’s default conﬁguration to garbage collect dead objects
after hitting the 100 MB threshold. Our worst-case memory over-
head with a slab allocator (less than 30%) is comparable to that of
existing solutions. For example, Cling [11] reports a memory over-
head of 40% for xalanc. Again, if the glibc allocator is in place,
our worst-case memory overhead drops to less than 20%.
5.4 Performance Overhead
In Table 4, we summarize the results of the runtime overhead
imposed by VTPin. Again, the SPEC CPU2006 benchmarks run to
completion and each experiment was repeated 10 times. For Fire-
fox and Chromium, we use standard JavaScript and HTML5 bench-
marks, since they are more accurate for measuring the performance
of web browsers.
In the following, we discuss each benchmark
category separately.
SPEC CPU2006. namd and soplex do not (heavily) use virtual
objects (Table 2), and thus the overhead imposed by VTPin is prac-
tically zero. dealII involves virtual objects, but the exhibited
slowdown is negligible (∼1.8%). Finally, xalanc, an XML-based
benchmark, which massively allocates and deallocates memory in-
curs a relatively higher overhead (4.9%).
Mozilla Firefox/Chromium. Mozilla Firefox and Chromium were
both tested with all popular browser benchmarks: i.e., SunSpider,
Kraken, Peacekeeper, and Octane. Notice that each benchmark re-
ports scores based on different metrics. For SunSpider and Kraken,