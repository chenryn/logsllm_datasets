eliminating the need to do any emulation for shell code 
with the exact same instructions, but different function 
call parameters. 
speed  up  Spector 
One issue with using signatures to reduce execution 
time is handling encoded or packed shell code. With an 
encoded  payload,  a  small  sequence  of  instructions  at 
the  beginning  will  “unmask”  or  decode  the  remainder 
of 
the  payload.  When  generating  signatures  for 
payloads that have encoders, Spector will only include 
the  decoded  data.  Then,  it  will  check  future  payloads 
with  encoders  only  after  it  has  the  decoded  data. 
Spector  differentiates  decoded  instructions  from  the 
decoder  itself  by  monitoring  memory  writes.  If  it 
executes  an  instruction  in  a  memory  location  in  the 
code segment which has previously been written by the 
shell  code,  then  it  assumes  the  decoder  has  finished 
execution. 
The above method will not work for shell code with 
multiple encoders. It would be possible to extend this 
mechanism in the future to handle multiple encoders by 
keeping  a  write  count  and  re-checking  the  shell  code 
signature  when  Spector  executes  an  instruction  at  a 
memory  location  that  has  been  written  once,  twice, 
three  times,  etc.  We  did  not  see  shell  code  with 
multiple encoders during our experiments. 
5.2. Output Generation 
to 
that 
is  high-level  enough 
The  primary  goal  of  Spector  is  to  produce  both 
output  that  is  extremely  detailed  –  equivalent  to  the 
output  of  manual  reverse  engineering  –  as  well  as 
output 
facilitate 
categorization and comprehension by someone who is 
not  familiar  with  x86  assembly.  For  the  low-level 
disassembly  output,  Spector  inserts  a  comment  after 
every  instruction  with  the  values  of  the  operands  and 
the result of the operation. It also aggregates repeated 
instructions  so  that  they  show  up  only  once  in  the 
output,  similar  to  static  analysis.  Figure  5  shows 
Spector’s  low-level  output  for  several  shell  code 
509509
Address 
code + 0000006E 
code + 0000007E 
code + 0000007F 
code + 00000081 
code + 00000082 
code + 00000083 
Instruction 
jmp      0xb 
pop      edi 
xor      esi,esi 
pushad   
push     esi 
jmp      0xd 
Spector Comment 
Target: code + 0000007E 
Popped value: code + 00000014 
New Value: 00000000 
Pushing all 8 register values 
Push value: 00000000 
Target: code + 00000092 
Figure 5. A code snippet containing low-level output for several instructions, including value comments.  
execute  a  floating  point  operation,  then  execute  the 
FSTENV instruction, it will store the instruction pointer 
of  the  floating  point  operation  in  a  memory  location 
specified by the source operand. So, Spector will store 
the instruction pointer for all floating point operations, 
but treat the operation itself as a NOP. In the future, we 
hope to extend Spector so that it correctly emulates all 
x86 instructions. 
6. Evaluation 
6.1. Payload Diversity 
For the first part of our evaluation, we used Spector 
to  process  a  number  of  unique  attack  payloads 
containing  shell  code 
that  were  collected  using 
lightweight honeypots over a two-month period. These 
particular  payloads  were  taken  from  exploits  for  the 
HTTP  and  SMB  protocols.  We  used  a  custom 
signature-based  vulnerability  module  to  extract  the 
shell code from each exploit and send it to Spector for 
evaluation.  Out  of  the  23,169  total  unique  Payloads, 
Spector  identified  eleven  different  classes  of  shell 
code. Each class has a different sequence of API calls, 
which  causes  shell  code  to  behave  different.  Table  1 
lists  the  different  shell  code  classes.  First,  WinExec 
simply  executes  one  shell  command  (typically  a 
number of concatenated FTP commands) and exits. For 
the other classes, the first word indicates the method of 
connection used to communicate with the attacker: 
• Bind  –  The  shell  code  binds  to  a  local  port  and 
listens for a connection from the attacker.  
•  Connect  –  The  shell  code  connects  back  to  an 
open port on a machine owned by the attacker.  
• HTTP  –  The  shell  code  uses  an  internet  library 
function  call  (from  urlmon.dll  or  wininet.dll)  to 
connect to a web server owned by the attacker. 
Different 
are  necessary 
depending  on  firewalls  or  proxy  servers  between  the 
source and target. 
connection  methods 
instructions.  Spector  annotates  every  instruction  with 
relevant register operand and result values. 
to  C  code 
Spector’s high-level output contains the sequence of 
API  function  calls  made  by  the  shell  code, as well as 
their  parameters.  This  sequence  of  API  calls  is 
approximately  equivalent 
that  would 
generate the same behavior as the shell code. Anyone 
with  basic  knowledge  of  the  Windows  API  should be 
able  to  understand  the  output  without  being  familiar 
with x86 assembly. An example of Spector’s high-level 
output  can  be  seen  in  Figure  1.  This  particular  shell 
code  downloads  a  file  from  a  web  server  using 
wininet.dll  function  calls,  writes  it  out  to  a  local  file, 
and then executes the file. It also checks for a unique 
mutex  “u1”  prior  to  execution  to  prevent  multiple 
infections. 
An  API-level  trace  of  shell  code  execution  allows 
Spector  to  categorize  similar  shell  code,  even  if  the 
underlying instructions are vastly different. In general, 
shell code with the exact same sequence of API calls, 
regardless of their parameters, is classified as being the 
same.  However,  certain  function  parameters  may 
significantly impact functionality and are set as “fixed” 
between shell code of the same class. One example of 
this  is  shell  code  which  calls  the  WinExec  function 
with “wget http://bad.com/malware.exe” to download a 
malicious  binary  versus  shell  code  that  calls  it  with 
“cmd”  to  create  a  local  command  shell.  For  our 
experiments,  we  manually  specified  fixed  API  call 
parameters on a function-by-function basis.  
5.3. Instruction Set Support 
Spector supports a large part of the x86 instruction 
set,  including  almost  all  of  the  instructions,  prefixes, 
addressing  methods,  etc.  that  we  saw  in  shell  code 
during  our  evaluation.  Notable  exceptions  include 
floating point and system instructions. The only use of 
floating point instructions by shell code was to get the 
value of the current instruction pointer. In x86, if you 
510510
Table 1. The number of unique payloads for each 
shell code class identified by Spector. 
Shell Code 
Class Name 
WinExec 
Bind Exec1 
Http Exec1 
Bind Shell1 
Connect Exec1 
Http Exec2 
Http Dll 
Bind Exec2 
Connect Exec2 
Bind Shell2 
Bind ShellBuffered 
Unique 
Payloads 
19019 
1895 
1586 
217 
119 
118 
77 
67 
62 
8 
1 
The  second  word  of  the  class  name  indicates  the 
method used to control the target: 
• Exec  –  The  shell  code  downloads  a  secondary 
malware  executable,  writes  it  to  a  file,  then 
executes the newly created file. 
•  Shell(Buffered)  –  The  shell  code  creates  a 
command  shell  process,  connecting  the  standard 
input  and  output  handles  to  a  network  socket. 
Buffered indicates that the shell code shuffles data 
between the shell and socket using its own buffer 
instead of connecting the two directly. 
• Dll – The shell code downloads a dynamic library 
and loads it into the local process. 
for 
Finally, shell code that shares the same connection and 
control  method  may  use  API  calls  from  different 
libraries that perform similar functions (i.e. fopen and 
CreateFile), 
compatibility. 
Additionally,  some  shell  code  will  create  a  unique 
object  such  as  a  “Mutex”  or  an  “Atom”  to  prevent 
duplicate  infections.  High-level  output  for  selected 
code classes can be found in the appendix. 
version 
usually 
As seen in Table 1, the WinExec shell code was the 
most popular and exhibited the greatest diversity, most 
likely due to its simplicity and flexibility. It is easy to 
change the shell command to perform a wide variety of 
functions  without  having  to  understand or change any 
other part of the payload. On the other hand, the bind 
shell  buffered  code  was  only  seen  once.  This  is 
probably  because  of  its  large  size  and  complexity, 
which  can  be  attributed  to  its  buffering  code.  The 
differences in popularity of other payloads are difficult 
to  attribute  to  any  specific  factor.  However,  the 
prevalence of malware (especially “bots”) that uses the 
shell code seems to have an impact, especially because 
we  collected  data  from  random  attacks  on  unused 
Figure 6. Analysis times with signature and 
GetProcAddress optimizations for ~23,000 payloads. 
address  blocks.  It  is  also  important  to  note  that  the 
payload  count  does  not  directly  correspond  to  the 
number of attacks. For some shell code, the same exact 
payload  may  be  used  by  different  attackers  or  on 
multiple  targets  and  still  work  properly,  but  is  only 
counted once in our analysis. This means that the attack 
using  Bind  Shell  Buffered  shell  code  may  have 
occurred  a  number  of  times,  even  though  there  was 
only  one  unique  payload.  However,  there is a general 
correlation  between  unique  payloads  and  attacks 
because  malware  programs  will  usually  modify  a 
parameter,  such  as  the  source  or  destination  port,  for 
each new shell code instance. 
6.2. Performance 
Although automated in-depth analysis of shell code 
is a useful tool, in order for Spector to be practical, it 
must  also  be  able  to  run  in  a  reasonable  amount  of 
time.  For  the  performance  evaluation,  we  used  a 
computer with a 2 GHz Intel CPU, 2 GB of RAM, and 
a Serial ATA hard drive. First, to get a general idea of 
Spector’s speed, we ran one payload from each of the 
eleven  identified  classes  and  recorded  the  number  of 
instructions  per  second.  For  this  test,  Spector  did  not 
use  signature  matching  on  any  of  the  payloads.  On 
average, Spector executed a total of 3074 instructions 
in  3.65  seconds,  or  842  instructions  per  second. 
Spector’s  speed  may  vary  slightly  depending  on  the 
type of instructions present in shell code. For example, 
frequently  masking  and  recombining  symbolic  values 
may  take  longer  than  performing  the  same  operations 
on concrete values. However, standard shell code that 
we  saw  during  our  evaluation  executed  a  variety  of 
511511
instructions,  and  the  average  execution  speed  per 
instruction was similar for different shell code samples. 
To  evaluate  Spector’s  performance  on  a  large 
volume  of  payloads,  we  recorded  the  processing  time 
for each of the 23,169 samples collected by lightweight 
honeypots. For this experiment, Spector used both the 
GetProcAddress  and  signature  matching  optimizations 
discussed earlier. The results can be seen in Figure 6. 
Spector was able to classify a majority of the payloads 
in  under  100  milliseconds  because  they  matched  a 
known  signature  and  were  not  encoded.  There  were 
also  spikes  around  0.3  seconds  and  0.8  seconds  for 
payloads  of  different  lengths  that  had  simple  XOR 
encoding  schemes,  and  again  between  2.7  and  4.5 
seconds  for 
larger  payloads  with  more  complex 
encoding  routines.  The  maximum  amount  of  time  to 
analyze  an 
shell  code  sample  was 
approximately  seven  and  a  half  seconds.  The  total 
processing 
for  all  23,169  payloads  was 
approximately  185  minutes,  or  125  payloads  per 
minute.  These  results  indicate  that  Spector  is  able  to 
efficiently  analyze  a  large  volume  of  payloads.  Also, 
Spector  would  probably  be  fast  enough  to  operate 
inline  and  use  actual  network  API  calls  to  obtain 
secondary payloads in real time.   
individual 
time 
6.3. Polymorphism 
For the final part of our evaluation, we used Spector 
to  analyze  shell  code  that  was  modified  by  two 
polymorphism  engines,  CLET  [11]  and  ADMMutate 
[16]. As a starting point, we took one shell code sample 
from  each  of  the  eleven  shell  code  classes.  Then,  we 
generated 50 unique polymorphic variants of each shell 
code  sample  using  both  CLET  and  ADMMutate. 
Finally,  we  used  Spector  to  analyze  the  polymorphic 
variants. Spector produced the correct high-level output 
(sequence of API calls) for each polymorphic variant, 
placing  each  instance  in  the  same  class  as  its  non-
polymorphic  parent.  When  generating  variants,  CLET 
and  ADMMutate  only  modify  the  NOP  and  decoder 
instructions,  which  Spector  was  able  to  process.  The 
main  difference  between  the  original  code  and  the 
polymorphic  variants  was  that  the  variants  had  extra 
decoding instructions, and thus took slightly longer to 
analyze.  
6.4. Limitations of Spector 
Although  Spector  proved  to  be  very  effective  for 
analyzing  shell  code  samples  collected  in  the  wild,  it 
has  some  limitations  that  could  be  exploited  by  shell 
code  authors  in  the  future  to  prevent  it  from  working 
properly. First, as mentioned earlier in the architecture 
512512
section, Spector cannot handle conditional branches on 
unknown  values.  Code  such  as  “If  x  ==  0:  NOP” 
(where x is unknown) would cause Spector to raise an 
exception, even though it would not cause any real non-
determinism.  We  hope  to  address  this  issue  in  the 
future,  as  discussed  in  Section  4.3.  In  its  current 