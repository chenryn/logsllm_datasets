return head
head.Next = deleteDuplicates(head.Next)
if head.Next != nil && head.val == head.Next.Val {
return newHead.Next
 return nil 
return deleteDuplicates(head.Next)
for head.Next != nil && head.val == head.Next.Val
head = head.Next 
M
---
## Page 195
 bar is 1, find the area of largest rectangle in the histogram.
Given n non-negative integers representing the histogram's bar height where the width of each 
题目
84. Largest Rectangle in Histogram
func deleteDuplicates(head *ListNode) *ListNode 
package leetcode
* Definition for singly-linked list.
return head
for cur.Next != nil { 
if head.Next == nil {
if head == nil {
cur := head 
 type ListNode struct { 
 return head
 return nil 
} else { 
if cur.Next.Val == cur.Val {
 cur.Next = cur.Next.Next
cur = cur.Next
Next *ListNode
Val int 
---
## Page 196
代码
不断的更新 maxArea 即可。
标大的高度作为矩形的边。宽就是最后一个比当前下标大的高度和当前下标i的差值。计算出面积以后
出当前最大栈顶的前一个元素，即连续弹出2个最大的，以稍小的一个作为矩形的边，宽就是2计算面
下这个栈顶元素的矩形的高度。然后停在这里(外层循环中的 i-，再++，就相当于停在这里了)，继续取
解题思路
给出每个直方图的高度，要求在这些直方图之中找到面积最大的矩形，输出矩形的面积。
题目大意
Example:
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
积..
用单调栈依次保存直方图的高度下标，一旦出现高度比栈顶元素小的情况就取出栈顶元素，
func largestRectangleArea(heights []int) int {
import "fmt"
package leetcode
Output: 10
Input: [2,1,5,6,2,3]
for i := O; i 2->2->4->3->5 
Input: head = 1->4->3->2->5->2, x = 3 
heights[tmp]*length)
 return maxArea
} else { 
if len(stack) == 0 Il height >= heights[stack[len(stack)-1]] { 
}else {
i--
 fmt.Printf("3. maxArea = %v heights[tmp]*length = %v\n", maxArea,
 stack = append(stack, i)
height = heights[i]
maxArea = max(maxArea, heights[tmp]*length) 
} else { 
stack = stack[:len(stack)-1] 
fmt.Printf("1. tmp = %v stack = %v\n", tmp, stack)
tmp := stack[len(stack)-1] 
 length = i
length := 0 
fmt.Printf("2. length = %v stack = %v i = %v\n", length, stack, i)
length = i - 1 - stack[len(stack)-1] 
---
## Page 198
代码
把这两个链表，比×小的链表拼接到比×大的链表的前面，就能得到最后的答案了。
描的原链表，所以原链表中的原有顺序会依旧被保存下来。最后2个新链表里面会存储好各自的结果,
链表头部开始扫描一边，依次把这两类点归类到2个新建链表中，
更优的方法是新构造2个链表，一个链表专门存储比×小的结点，
(以下描述定义，大于等于×的都属于比×大)
这道题最简单的做法是构造双向链表，不过时间复杂度是 O(n^2)。
type DoublyListNode struct 
// DoublyListNode define
func partition(head *ListNode, x int) *ListNode {
//解法—单链表
package leetcode
Prev *DoublyListNode
Valint 
return beforeHead.Next
before.Next = afterHead.Next
after.Next = nil 
for head != nil {
after := afterHead 
afterHead := &ListNode{Val: O, Next: nil}
before := beforeHead 
beforeHead := &ListNode{val: O, Next: nil} 
 type ListNode struct {
 Definition for singly-linked list.
 if head.val = x && compareNode.Prev.val = O; k-- { 
for ; i >= 0 && j >= O; k-- {
//从后面往前放，只需要循环一次即可
二
// for index := O; index nums2[j] {
j--
:= m 
return 
copy(nums1,
了
 nums1 = append(nums1, nums2[index])
nums1[k] = nums2[j]
i-- 
 numsl[k] = numsl[i]
j--
1
nums2)
---
## Page 202
解题思路
码
格雷编码是一个二进制数字系统，在该系统中，两
题目大意
Example 2: 
Example 1: 
sequence of gray code. A gray code sequence must begin with 0.
Given a non-negative integer n representing the total number of bits in the code, print the
The gray code is a binary numeral system where two successive values differ in only one bit.
题目
89. Gray Code
·输出 n位格雷码
总位数的非负整数n，打印其格雷编码序列。格雷编码序列必须以0开头。
is 20 = 1.
Explanation: we define the gray code sequence to begin with 0.
Output: [0]
Input:0
00
0
For example, [0,2,3,1] is also a valid gray code sequence.
'autap = O; i-- { 
return 
generateGraycode(n-l, step+l, num, res)
*res = append(*res, convertBinary(*num))
return res 
generateGrayCode(int(1= O; index-- {
index := len(*num) - 1 
(*num) [index-1] = flipGraycode((*num) [index-1]) 
(*num) [1en(*num)-1] = flipGrayCode((*num) [len(*num)-1])
if (*num)[index] == 1 {
 break
---
## Page 204
包含重复的子集。
给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能
题目大意
Example:
 Note: The solution set must not contain duplicate subsets.
power set).
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the 
题目
90. Subsets Il
output:
Input: [1,2,2]
func grayCodel(n int) []int 
//解法二直译
func flipGrayCode(num int) int {
[1,2],
[2,2],
return out
out := make([]int, 1) 
var l uint = 1 > 1) ^ i)
 return 1 
---
## Page 205
代码
解题思路
下次循环可能会取重复数字
func generatesubsetswithDup(nums []int, k, start int, c []int, res *[][]int) {
package leetcode 
·这一题是第 78 题的加强版，比第78题多了一个条件，数组中的数字会出现重复。
func subsetswithDup(nums []int) [][]int {
import （
●
for i := start; i start & nums[i]== nums[i-1]{ // 这里是去重的关键逻辑,本次不取重复数字,