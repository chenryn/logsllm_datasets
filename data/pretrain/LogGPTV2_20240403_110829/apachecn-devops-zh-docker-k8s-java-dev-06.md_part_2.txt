```
$ docker logs -f   
```
`docker logs`命令将把日志的最后几行输出到控制台。由于容器仍在后台工作(在分离模式下)，您将立即得到回显提示，如您在下面的屏幕截图中所见，显示了我们 REST 服务的日志文件片段:
![](img/c4507656-6b4e-4291-8868-b837dabe9757.png)
`-f`标志在 Linux `tail`命令中充当相同的标志，它会在控制台上持续显示新的日志条目。完成后，点击 *CTRL + C* 停止在控制台上显示日志文件。请注意，这不同于在连接到容器时点击 *CTRL + C* ，其中 *CTRL + C* 会终止容器内运行的进程。这一次，它将停止显示日志文件，并且是安全的。
日志文件是永久的，即使在容器停止后也是可用的，只要它的文件系统仍然存在于磁盘上(直到它被`docker rm`命令删除)。默认情况下，日志条目存储在位于`/var/lib/docker`目录的 JSON 文件中。您可以使用`docker inspect`命令并使用模板提取`LogPath`来查看日志文件的完整路径(稍后我们将介绍`inspect`和模板)。
我们已经说过，默认情况下，日志条目将转到 JSON 文件。但是这很容易改变，因为 Docker 利用了日志驱动程序的概念。通过使用不同的驱动程序，您可以为容器日志选择其他存储。默认的驱动是`json-file`驱动，它只是把条目写到 JSON 文件中。每个驱动程序都可以接受额外的参数。例如，JSON 驱动程序接受:
```
--log-opt max-size=[0-9+][k|m|g]
--log-opt max-file=[0-9+]  
```
正如您可能已经猜到的，它类似于我们的 Java 应用中的滚动文件。`max-size`指定可以创建的最大文件大小；达到指定大小后，Docker 将创建一个新文件。您可以使用大小后缀`k`、`m`或`g`，其中 k 代表千字节，`m`代表兆字节，`g`代表千兆字节。将日志拆分成单独的文件可以更容易地传输、存档等。此外，如果文件较小，搜索日志文件会方便得多。
The `docker log` command only displays log entries from the latest log file.
还有其他一些可用的日志驱动程序。该清单包括:
*   `none`:它将完全关闭日志记录
*   `syslog`:是 Docker 的`syslog`日志驱动。它会将日志信息写入系统`syslog`
*   `journald`:将消息记录到`journald`。`systemd-journald`是一个负责事件日志记录的守护程序，只附加二进制文件作为其日志文件
*   `splunk`:使用`Event Http`收集器向 Splunk 提供日志消息的写入。Splunk 可以用作企业级日志分析器。你可以在[https://www.splunk.com](https://www.splunk.com)了解更多
*   `gelf`:将日志条目写入 GELF 端点，如灰色日志或日志存储。Graylog 可在[https://www.graylog.org](https://www.graylog.org)获得，是一个开源日志管理，支持搜索、分析和提醒所有日志文件。你可以在[https://www.elastic.co/products/Logstash](https://www.elastic.co/products/logstash)找到 logstash，它是一个处理来自任何来源的任何数据(包括日志数据)的管道
*   `fluentd`:将日志消息写入`fluentd`。Fluentd 是一个用于统一日志记录层的开源数据收集器。Fluentd 的主要特点是，它通过在数据源和后端系统之间提供统一的日志记录层来分离数据源和后端系统。它体积小，速度快，并且有数百个插件，这是一个非常灵活的解决方案。你可以在[https://www.fluentd.org](https://www.fluentd.org)的网站上了解更多关于`fluentd`的信息
*   `gcplogs`:将日志条目发送到谷歌云日志
*   `awslogs`:这个驱动会把日志消息写入亚马逊 CloudWatch 日志。
正如您所看到的，Docker 的可插拔架构在运行容器时给了您几乎无限的灵活性。要切换到另一个日志驱动程序，使用`docker run`命令的`--log-driver`选项。例如，要在`syslog`中存储日志条目，请执行以下操作:
```
$ docker run --log-driver=syslog rest-example  
```
请注意，`docker logs`命令仅适用于`json-file`和`journald`驾驶员。要访问写入另一个日志引擎的日志，您需要使用与您选择的驱动程序相匹配的工具。使用专门的工具浏览日志条目通常会更方便；实际上，这通常是您选择另一个日志驱动程序的原因。例如，在 Logstash 或 Splunk 中搜索和浏览日志比在充满 JSON 条目的文本文件中挖掘要快得多。
查看日志条目是监视我们的应用在主机上的行为的便捷方式。有时，看到正在运行的容器的属性也很好，例如映射的网络端口或正在映射的卷等等。要显示容器属性，我们使用`docker inspect`命令，这非常有用。
# 检查容器
我们一直用来列出正在运行的容器的`docker ps`命令给了我们很多关于容器的信息，比如它们的 id、正常运行时间、映射的端口等等。要显示运行容器的更多细节，我们可以使用`docker inspect`。该命令的语法如下:
```
$ docker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]  
```
默认情况下，`docker inspect`命令将以 JSON 数组格式输出关于容器或映像的信息。因为有很多属性，所以可能不太可读。如果我们知道我们在寻找什么，我们可以提供一个模板来处理输出，使用`-f`(或`--format`)选项。模板使用来自 Go 语言的模板格式(顺便说一下，Docker 本身是用 Go 编写的)。`docker inspect`命令最简单也是最常用的模板只是一个简短的模板，用来准确提取您需要的信息，例如:
```
$ docker inspect -f '{{.State.ExitCode}}' jboss/wildfly  
```
由于`inspect`命令接受 Go 模板来形成容器或映像元数据的输出，因此该功能为您处理和转换结果提供了几乎无限的可能性。Go 模板引擎非常强大，因此，您可以使用模板引擎来进一步处理结果，而不是通过 grep 管道传输输出，这很快但很麻烦。
`--format`的参数只是一个模板，我们希望将其应用于容器的元数据。在这个模板中，我们可以使用条件语句、循环和其他 Go 语言功能。例如，下面将查找具有非零退出代码的所有容器的名称:
```
$ docker inspect -f '{{if ne 0.0 .State.ExitCode }}{{.Name}} {{.State.ExitCode}}{{ end }}' $(docker ps -aq)  
```
请注意，我们提供的是`$(docker ps -aq)`而不是容器 ID 或名称。因此，所有正在运行的容器的标识将被传送到`docker inspect`命令，这可能是一个非常方便的快捷方式。卷曲的括号`{{}}`表示围棋模板指令，除此之外的任何东西都会被直接打印出来。Go 模板中的点(`.`)表示上下文。大多数情况下，当前上下文将是元数据的整个数据结构，但它可以在需要时反弹，包括使用`with`动作。例如，这两个`inspect`命令将打印出完全相同的结果:
```
$ docker inspect -f '{{.State.ExitCode}}' wildfly
$ docker inspect -f '{{with .State}} {{.ExitCode}} {{end}}' wildfly  
```
如果你在绑定的上下文中，美元符号(`$`)总是会得到`root`上下文。我们可以执行以下命令:
```
$ docker inspect -f '{{with .State}} {{$.Name}} exited with {{.ExitCode}} exit code \ {{end}}' wildfly  
```
然后，它将输出:
```
/wildfly exited with 0 exit code.  
```
模板引擎支持逻辑功能，如`and`、`or`、`not`；它们将返回一个布尔结果。同时支持比较功能，如`eq`(等于)、`ne`(不等于)、`lt`(小于)、`le`(小于或等于)、`gt`(大于)和`ge`(大于或等于)。比较函数可以比较字符串、浮点或整数。与`if`等条件函数一起，当从`inspect`命令创建一些更复杂的输出时，所有这些都非常有用:
```
$ docker inspect -f '{{if eq .State.ExitCode 0.0}} \
Normal Exit \
{{else if eq .State.ExitCode 1.0}} \
Not a Normal Exit \
{{else}} \
Still Not a Normal Exit \
{{end}}' wildfly
```
有时`docker inspect`命令的巨大输出会相当混乱。由于输出是 JSON 格式的，`jq`工具可以用来获得输出的概述，并挑选出感兴趣的部分。
`jq`工具在[https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)免费提供。这是一个轻量级且灵活的命令行 JSON 处理器，例如用于 JSON 数据的`sed`命令。例如，让我们从元数据中提取容器 IP 地址:
```
$ docker inspect  | jq -r '.[0].NetworkSettings.IPAddress'  
```
如您所见，`docker inspect`命令提供了关于 Docker 容器的有用信息。结合 Go 模板特性和可选的`jq`工具，它为您提供了一个获取容器信息的强大工具，并且可以在脚本中进一步使用。但是除了元数据，还有另一个有价值的信息来源。这是运行时统计数据，我们现在将重点关注它。
# 统计数字
要查看容器的 CPU、内存、磁盘 i/o 和网络 i/o 统计数据，请使用`docker stats`命令。该命令的语法如下:
```
docker stats [OPTIONS] [CONTAINER...]  
```
您可以通过指定由空格分隔的容器标识或名称列表，将统计度量限制为一个或多个特定的容器。默认情况下，如果没有指定容器，该命令将显示所有正在运行的容器的统计信息，如下图所示:
![](img/564b23b8-9feb-4f86-a491-7740758c1a29.png)
`docker stats`命令接受选项，包括:
*   `--no-stream`:这将禁用流统计，并且只提取第一个结果
*   `-a` ( `--all`):这将显示所有(不仅仅是运行中的)容器的统计数据
统计数据可以用来查看我们的容器在运行时是否表现良好。这些信息有助于检查我们是否需要对要应用于容器的资源进行一些约束，我们将在本章稍后介绍运行时约束。
查看日志、容器元数据和运行时统计数据，在监控运行中的容器时，为您提供了几乎无限的可能性。除此之外，我们还可以看到您的 docker 主机在全球范围内发生了什么。当主机上的 docker 引擎收到命令时，它会发出一个我们可以观察到的事件。现在我们来看看这个机制。
# 容器事件
为了实时观察进入 docker 引擎的事件，我们使用`docker events`命令。如果容器已经启动、停止、暂停等等，事件将被发布。如果您想知道在容器运行时发生了什么，这将非常有用。这是一个强大的监控功能。Docker 容器报告了一个巨大的事件列表，您可以使用`docker events`命令列出这些事件。该清单包括:
```
attach, commit, copy, create, destroy, detach, die, exec_create, exec_detach, exec_start, export, health_status, kill, oom, pause, rename, resize, restart, start, stop, top, unpause, update 
```
`docker events`命令可以带`-f`开关，如果你在寻找特定的东西，它会过滤输出。如果未提供过滤器，将报告所有事件。目前，可能的过滤器列表包括:
*   容器(`container=`)
*   事件(`event=`)
*   映像(`image=`)
*   插件(实验性)(`plugin=`)
*   标签(“T0”)
*   类型(`type=`)
*   卷(`volume=`)
*   网络(`network=)`
*   守护进程(`daemon=`)
看看下面的例子。`docker events`命令已经在一个控制台窗口中运行，而`docker run rest-example`已经在单独的控制台中发出。从下面的截图中可以看到，`docker events`将为我们的 rest 示例容器报告创建、附加、连接和启动事件:
![](img/8ea41698-adc2-4316-b4e6-45ac173344e4.png)
因此，您将获得时间戳和事件名称，以及导致事件的容器的标识。`docker events`命令可以采用额外的选项，例如`--since`和`--until`，它们可以用来指定您想要从中获取事件的时间范围。监视容器事件是查看 docker 主机上发生了什么的一个很好的工具。然而，还有更多。例如，您还可以影响容器在崩溃时的行为。我们为此使用容器重启策略。
# 重启策略
通过使用带有`docker run`命令的`--restart`选项，您可以指定重启策略。这告诉 Docker 当容器关闭时如何反应。然后可以重新启动容器，以最大限度地减少停机时间，例如，如果在生产服务器上运行。然而，在解释 Docker 重启策略之前，让我们先关注一下退出代码。退出代码是至关重要的信息，它告诉容器为什么不能运行或者为什么退出。有时它与您将作为参数给`docker run`的包含命令有关。当`docker run`命令以非零代码结束时，退出代码遵循`chroot`标准，如下图所示:
*   退出代码`125`:`docker run`命令自行失败
*   退出代码`126`:无法调用提供的命令
*   退出代码`127`:找不到提供的命令
*   其他非零应用相关退出代码
大家可能还记得，在前面的章节中，我们已经使用`docker ps`命令列出了正在运行的容器。为了列出未运行的容器，我们可以为`docker ps`命令添加`-a`开关。当容器完成时，退出代码可以在状态列中`docker ps -a`命令的输出中找到。通过在启动容器时指定重启策略，可以自动重启崩溃的容器。通过`docker run`命令的-restart 开关来指定所需的重启策略，如示例所示:
```
$ docker run --restart=always rest-example  