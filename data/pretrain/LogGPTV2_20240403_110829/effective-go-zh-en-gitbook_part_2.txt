闭包:
条目 [ '*' | '+' | '?' ]
条目:
'^'
'$'
'.'
字符
'[' [ '^' ] 字符遍历 ']'
'(' 正则表达式 ')'
*/
package regexp
If the package is simple, the package comment can be brief.
若某个包比较简单，包注释同样可以简洁些。
// Package path implements utility routines for
// manipulating slash-separated filename paths.
12
注释
// path 包实现了一些常用的工具，以便于操作用反斜杠分隔的路径.
Comments do not need extra formatting such as banners of stars. The generated output
may not even be presented in a fixed-width font, so don't depend on spacing for alignment—
godoc, like gofmt, takes care of that. The comments are uninterpreted plain text, so HTML
and other annotations such as _this_ will reproduce verbatim and should not be used. One
adjustment godoc does do is to display indented text in a fixed-width font, suitable for
program snippets. The package comment for the fmt package uses this to good effect.
注释无需进行额外的格式化，如用星号来突出等。生成的输出甚至可能无法以等宽字体显
示， 因此不要依赖于空格对齐，godoc 会像 gofmt 那样处理好这一切。 注释是不会被解析的
纯文本，因此像 HTML 或其它类似于 _这样_ 的东西将按照 原样 输出，因此不应使用它们。
godoc 所做的调整， 就是将已缩进的文本以等宽字体显示，来适应对应的程序片段。 fmt 包
的注释就用了这种不错的效果。
Depending on the context, godoc might not even reformat comments, so make sure they
look good straight up: use correct spelling, punctuation, and sentence structure, fold long
lines, and so on.
godoc 是否会重新格式化注释取决于上下文，因此必须确保它们看起来清晰易辨： 使用正确
的拼写、标点和语句结构以及折叠长行等。
Inside a package, any comment immediately preceding a top-level declaration serves as a
doc comment for that declaration. Every exported (capitalized) name in a program should
have a doc comment.
在包中，任何顶级声明前面的注释都将作为该声明的文档注释。 在程序中，每个可导出（首
字母大写）的名称都应该有文档注释。
Doc comments work best as complete sentences, which allow a wide variety of automated
presentations. The first sentence should be a one-sentence summary that starts with the
name being declared.
文档注释最好是完整的句子，这样它才能适应各种自动化的展示。 第一句应当以被声明的东
西开头，并且是单句的摘要。
// Compile parses a regular expression and returns, if successful, a Regexp
// object that can be used to match against text.
func Compile(str string) (regexp *Regexp, err error) {
// Compile 用于解析正则表达式并返回，如果成功，则 Regexp 对象就可用于匹配所针对的文本。
func Compile(str string) (regexp *Regexp, err error) {
13
注释
If the name always begins the comment, the output of godoc can usefully be run through
grep. Imagine you couldn't remember the name"Compile" but were looking for the parsing
function for regular expressions, so you ran the command,
若注释总是以名称开头，godoc 的输出就能通过 grep 变得更加有用。假如你记不住
“Compile” 这个名称，而又在找正则表达式的解析函数， 那就可以运行
$ godoc regexp | grep parse
If all the doc comments in the package began, "This function...", grep wouldn't help you
remember the name. But because the package starts each doc comment with the name,
you'd see something like this, which recalls the word you're looking for.
若包中的所有文档注释都以 “此函数…” 开头，grep 就无法帮你记住此名称。 但由于每个包的
文档注释都以其名称开头，你就能看到这样的内容，它能显示你正在寻找的词语。
$ godoc regexp | grep parse
Compile parses a regular expression and returns, if successful, a Regexp
parsed. It simplifies safe initialization of global variables holding
cannot be parsed. It simplifies safe initialization of global variables
$
Go's declaration syntax allows grouping of declarations. A single doc comment can
introduce a group of related constants or variables. Since the whole declaration is
presented, such a comment can often be perfunctory.
Go的声明语法允许成组声明。单个文档注释应介绍一组相关的常量或变量。 由于是整体声
明，这种注释往往较为笼统。
// Error codes returned by failures to parse an expression.
var (
ErrInternal = errors.New("regexp: internal error")
ErrUnmatchedLpar = errors.New("regexp: unmatched '('")
ErrUnmatchedRpar = errors.New("regexp: unmatched ')'")
...
)
// 表达式解析失败后返回错误代码。
var (
ErrInternal = errors.New("regexp: internal error")
ErrUnmatchedLpar = errors.New("regexp: unmatched '('")
ErrUnmatchedRpar = errors.New("regexp: unmatched ')'")
...
)
14
注释
Grouping can also indicate relationships between items, such as the fact that a set of
variables is protected by a mutex.
即便是对于私有名称，也可通过成组声明来表明各项间的关系，例如某一组由互斥体保护的
变量。
var (
countLock sync.Mutex
inputCount uint32
outputCount uint32
errorCount uint32
)
15
命名
Names
命名
Names are as important in Go as in any other language. They even have semantic effect:
the visibility of a name outside a package is determined by whether its first character is
upper case. It's therefore worth spending a little time talking about naming conventions in Go
programs.
正如命名在其它语言中的地位，它在 Go 中同样重要。有时它们甚至会影响语义： 例如，某
个名称在包外是否可见，就取决于其首个字符是否为大写字母。 因此有必要花点时间来讨论
Go 程序中的命名约定。
Package names
包名
When a package is imported, the package name becomes an accessor for the contents.
After
当一个包被导入后，包名就会成了内容的访问器。在
import "bytes"
the importing package can talk about bytes.Buffer. It's helpful if everyone using the package
can use the same name to refer to its contents, which implies that the package name should
be good: short, concise, evocative. By convention, packages are given lower case, single-
word names; there should be no need for underscores or mixedCaps. Err on the side of
brevity, since everyone using your package will be typing that name. And don't worry about
collisions a priori. The package name is only the default name for imports; it need not be
unique across all source code, and in the rare case of a collision the importing package can
choose a different name to use locally. In any case, confusion is rare because the file name
in the import determines just which package is being used.
之后，被导入的包就能通过 bytes.Buffer 来引用了。 若所有人都以相同的名称来引用其内容
将大有裨益， 这也就意味着包应当有个恰当的名称：其名称应该简洁明了而易于理解。按照
惯例， 包应当以小写的单个单词来命名，且不应使用下划线或驼峰记法。err 的命名就是出于
简短考虑的，因为任何使用该包的人都会键入该名称。 不必担心引用次序的冲突。包名就是
16
命名
导入时所需的唯一默认名称， 它并不需要在所有源码中保持唯一，即便在少数发生冲突的情
况下， 也可为导入的包选择一个别名来局部使用。 无论如何，通过文件名来判定使用的包，
都是不会产生混淆的。
Another convention is that the package name is the base name of its source directory; the
package in src/encoding/base64 is imported as "encoding/base64" but has name base64,
not encoding_base64 and not encodingBase64.
另一个约定就是包名应为其源码目录的基本名称。在 src/pkg/encoding/base64 中的包应作为
"encoding/base64" 导入，其包名应为 base64， 而非 encoding_base64 或
encodingBase64。
The importer of a package will use the name to refer to its contents, so exported names in
the package can use that fact to avoid stutter. (Don't use the import . notation, which can
simplify tests that must run outside the package they are testing, but should otherwise be
avoided.) For instance, the buffered reader type in the bufio package is called Reader, not
BufReader, because users see it as bufio.Reader, which is a clear, concise name. Moreover,
because imported entities are always addressed with their package name, bufio.Reader
does not conflict with io.Reader. Similarly, the function to make new instances of ring.Ring—
which is the definition of a constructor in Go—would normally be called NewRing, but since
Ring is the only type exported by the package, and since the package is called ring, it's
called just New, which clients of the package see as ring.New. Use the package structure to
help you choose good names.
包的导入者可通过包名来引用其内容，因此包中的可导出名称可以此来避免冲突。 （请勿使
用 import . 记法，它可以简化必须在被测试包外运行的测试， 除此之外应尽量避免使用。）
例如，bufio 包中的缓存读取器类型叫做 Reader 而非 BufReader，因为用户将它看做
bufio.Reader，这是个清楚而简洁的名称。 此外，由于被导入的项总是通过它们的包名来确
定，因此 bufio.Reader 不会与 io.Reader 发生冲突。同样，用于创建 ring.Ring 的新实例的函
数（这就是 Go 中的构造函数）一般会称之为 NewRing，但由于 Ring 是该包所导出的唯一类
型，且该包也叫 ring，因此它可以只叫做 New，它跟在包的后面，就像 ring.New。使用包结
构可以帮助你选择好的名称。
Another short example is once.Do; once.Do(setup) reads well and would not be improved by
writing once.DoOrWaitUntilDone(setup). Long names don't automatically make things more
readable. A helpful doc comment can often be more valuable than an extra long name.
另一个简短的例子是 once.Do，once.Do(setup) 表述足够清晰， 使用
once.DoOrWaitUntilDone(setup) 完全就是画蛇添足。 长命名并不会使其更具可读性。一份有
用的说明文档通常比额外的长名更有价值。
Getters
17
命名
获取器
Go doesn't provide automatic support for getters and setters. There's nothing wrong with
providing getters and setters yourself, and it's often appropriate to do so, but it's neither
idiomatic nor necessary to put Get into the getter's name. If you have a field called owner
(lower case, unexported), the getter method should be called Owner (upper case, exported),
not GetOwner. The use of upper-case names for export provides the hook to discriminate
the field from the method. A setter function, if needed, will likely be called SetOwner. Both
names read well in practice:
Go 并不对获取器（getter）和设置器（setter）提供自动支持。 你应当自己提供获取器和设
置器，通常很值得这样做，但若要将 Get 放到获取器的名字中，既不符合习惯，也没有必
要。若你有个名为 owner （小写，未导出）的字段，其获取器应当名为 Owner（大写，可导
出）而非 GetOwner。大写字母即为可导出的这种规定为区分方法和字段提供了便利。 若要
提供设置器方法，SetOwner 是个不错的选择。两个命名看起来都很合理：
owner := obj.Owner()
if owner != user {
obj.SetOwner(user)
}
Interface names
接口名
By convention, one-method interfaces are named by the method name plus an -er suffix or
similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.
按照约定，只包含一个方法的接口应当以该方法的名称加上 - er 后缀来命名，如 Reader、
Writer、 Formatter、CloseNotifier 等。
There are a number of such names and it's productive to honor them and the function
names they capture. Read, Write, Close, Flush, String and so on have canonical signatures
and meanings. To avoid confusion, don't give your method one of those names unless it has
the same signature and meaning. Conversely, if your type implements a method with the
same meaning as a method on a well-known type, give it the same name and signature; call
your string-converter method String not ToString.
诸如此类的命名有很多，遵循它们及其代表的函数名会让事情变得简单。 Read、Write、
Close、Flush、 String 等都具有典型的签名和意义。为避免冲突，请不要用这些名称为你的
方法命名， 除非你明确知道它们的签名和意义相同。反之，若你的类型实现了的方法， 与一
个众所周知的类型的方法拥有相同的含义，那就使用相同的命名。 请将字符串转换方法命名
为 String 而非 ToString。
18
命名
MixedCaps
驼峰记法
Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to
write multiword names.
最后，Go 中约定使用驼峰记法 MixedCaps 或 mixedCaps。
19
分号
Semicolons
分号
Like C, Go's formal grammar uses semicolons to terminate statements, but unlike in C,
those semicolons do not appear in the source. Instead the lexer uses a simple rule to insert
semicolons automatically as it scans, so the input text is mostly free of them.
和 C 一样，Go 的正式语法使用分号来结束语句；和 C 不同的是，这些分号并不在源码中出
现。 取而代之，词法分析器会使用一条简单的规则来自动插入分号，因此因此源码中基本就
不用分号了。
The rule is this. If the last token before a newline is an identifier (which includes words like
int and float64), a basic literal such as a number or string constant, or one of the tokens
规则是这样的：若在新行前的最后一个标记为标识符（包括 int 和 float64 这类的单词）、数
值或字符串常量之类的基本字面或以下标记之一
break continue fallthrough return ++ -- ) }
the lexer always inserts a semicolon after the token. This could be summarized as, “if the
newline comes after a token that could end a statement, insert a semicolon”.
则词法分析将始终在该标记后面插入分号。这点可以概括为： “如果新行前的标记为语句的末
尾，则插入分号”。
A semicolon can also be omitted immediately before a closing brace, so a statement such as
分号也可在闭括号之前直接省略，因此像
go func() { for { dst <- <-src } }()
needs no semicolons. Idiomatic Go programs have semicolons only in places such as for
loop clauses, to separate the initializer, condition, and continuation elements. They are also
necessary to separate multiple statements on a line, should you write code that way.
这样的语句无需分号。通常Go程序只在诸如 for 循环子句这样的地方使用分号， 以此来将初
始化器、条件及增量元素分开。如果你在一行中写多个语句，也需要用分号隔开。
20
分号
One consequence of the semicolon insertion rules is that you cannot put the opening brace
of a control structure (if, for, switch, or select) on the next line. If you do, a semicolon will be
inserted before the brace, which could cause unwanted effects. Write them like this
警告：无论如何，你都不应将一个控制结构（if、for、switch 或 select）的左大括号放在下一
行。如果这样做，就会在大括号前面插入一个分号，这可能引起不需要的效果。 你应该这样
写
if i < f() {
g()
}
not like this
而不是这样
if i < f() // wrong!
{ // wrong!
g()
}
if i < f() // 错！
{ // 错！
g()
}
21