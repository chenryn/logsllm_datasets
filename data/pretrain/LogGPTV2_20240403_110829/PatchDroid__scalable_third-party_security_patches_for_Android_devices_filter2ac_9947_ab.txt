manufacturer-speciﬁc boot loader. Modifying or adding bi-
naries on system partitions, therefore, would be error-prone
and, in some cases, virtually impossible.
Scalability vs. testing. Due to the large number of dif-
ferent manufacturers and devices, scalability becomes an is-
sue. The main issue we are concerned about is testing. Two
main problems arise here. First,devices are based on diﬀer-
ent code bases. In order to scale patch development, it has
to be decoupled from the devices original source. Second, it
is practically impossible to test each patch on every aﬀected
device. This problem becomes worse if this includes diﬀer-
ences in Android OS versions and regional customizations.
Scalable patch development and testing are an important
issue in order to ﬁx vulnerabilities on a large-scale.
3.2 Goals
In light of the challenges above, we adopted the following
design goals for our system.
Patch development scalability. A patch should only
need to be written once and should work on all aﬀected
Android versions and devices.
Reliability. Patching a vulnerability must not aﬀect de-
vice reliability. For instance, the device must not experience
random crashes or be rendered unusable.
Native code vs. Dalvik code. Vulnerabilities exist
both in native binaries and in software written in Java and
executed in the Dalvik VM. Our system must be able to
patch vulnerabilities in both worlds.
Scalable and fast deployment. Patches generated by
our system must be eﬃcient to distribute over the network,
simple to install, and easy to reverse should the need arise.
Patches should be applicable to all possible known device
conﬁgurations, as well as previously unknown conﬁgurations
to a reasonable degree. Patch deployment should explicitly
allow for blacklisting speciﬁc patch and device combinations
if they crash on a given device.
Attack detection. Our system should be able to detect
exploitation attempts performed against patched vulnera-
bilities. It should be possible to report detected attacks to
both the user as well as a central entity.
4. DESIGN
PatchDroid, our system for distributing and applying third-
party patches to Android devices, is composed of a number
of components that reside both in the cloud as well as on
end-user devices. The end goal of these components is to en-
261
(cid:9)(cid:5)(cid:10)(cid:11)(cid:4)(cid:5)
(cid:28)(cid:12)(cid:13)(cid:4)(cid:16)(cid:29)(cid:2)(cid:3)(cid:11)(cid:9)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:4)(cid:2)(cid:5)(cid:12)(cid:13)(cid:11)(cid:3)(cid:14)(cid:7)(cid:15)(cid:3)(cid:14)(cid:11)(cid:13)(cid:3)(cid:2)
(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)(cid:7)(cid:9)(cid:5)(cid:1)(cid:17)(cid:3)(cid:18)(cid:15)(cid:5)(cid:14)(cid:13)(cid:7)(cid:19)
(cid:13)(cid:2)(cid:12)(cid:4)(cid:5)(cid:7)(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)(cid:5)(cid:2)
(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)(cid:7)(cid:15)(cid:3)(cid:14)(cid:11)(cid:13)(cid:3)(cid:2)
(cid:12)(cid:13)(cid:13)(cid:12)(cid:4)(cid:20)(cid:7)(cid:9)(cid:5)(cid:13)(cid:5)(cid:4)(cid:13)(cid:11)(cid:3)(cid:14)(cid:7)(cid:15)(cid:3)(cid:9)(cid:21)(cid:17)(cid:5)
(cid:4)(cid:17)(cid:3)(cid:21)(cid:9)
(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)(cid:7)(cid:2)(cid:5)(cid:1)(cid:3)(cid:6)(cid:11)(cid:13)(cid:3)(cid:2)(cid:18)
(cid:17)(cid:3)(cid:22)(cid:7)(cid:5)(cid:10)(cid:5)(cid:14)(cid:13)(cid:7)(cid:2)(cid:5)(cid:4)(cid:5)(cid:11)(cid:10)(cid:5)(cid:2)
(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)(cid:7)(cid:21)(cid:1)(cid:9)(cid:12)(cid:13)(cid:5)(cid:7)(cid:6)(cid:18)(cid:6)(cid:13)(cid:5)(cid:15)
(cid:1)(cid:12)(cid:13)(cid:4)(cid:16)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:8)
(cid:4)(cid:5)(cid:14)(cid:13)(cid:2)(cid:12)(cid:17)(cid:7)(cid:17)(cid:3)(cid:22)(cid:22)(cid:11)(cid:14)(cid:22)(cid:7)(cid:19)
(cid:2)(cid:5)(cid:15)(cid:3)(cid:13)(cid:5)(cid:7)(cid:2)(cid:5)(cid:1)(cid:3)(cid:2)(cid:13)(cid:11)(cid:14)(cid:22)
(cid:23)(cid:24)(cid:25)(cid:7)(cid:12)(cid:14)(cid:9)(cid:7)(cid:8)(cid:17)(cid:5)(cid:2)(cid:13)(cid:6)
(cid:26)(cid:6)(cid:5)(cid:1)(cid:12)(cid:2)(cid:12)(cid:13)(cid:5)(cid:7)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:27)
Figure 1: PatchDroid architectural overview.
able safe, dynamic, in-memory patching of vulnerable pro-
grams and libraries, as in-memory patching avoids all of the
challenges described in Section 3. A visual representation of
this architecture is shown in Figure 1.
In the following, we present a high-level overview of each of
these components and the information ﬂows between them.
We defer discussion of the implementation details of each of
these components to Section 6.
4.1 Device Components
On end-user devices, PatchDroid introduces a number of
distinct components that cooperate in order to apply patches
and monitor the system.
Patch injector. The patch injector is responsible for
deploying patches into running processes. This component
also veriﬁes that the patch is required for the speciﬁc An-
droid version before it is deployed. Furthermore, it checks
if a particular patch is known to have previously caused
crashes on a device in a given conﬁguration. The informa-
tion is supplied by the patch monitor.
Patch monitor. The patch monitor is responsible for
monitoring the execution of code injected as part of a patch
to determine if it is causing instability. Additionally, it col-
lects log messages and attack warnings issued by the patch.
Process creation monitor. The process creation mon-
itor interposes on process creation to determine if patch in-
jection needs to be activated for the given process. Monitor-
ing is carried out on init for system services and on zygote
for Dalvik-based processes.
Attack detector. The attack detector interoperates closely
with the patch monitor. Its primary purpose is to analyze
attack warning messages issued by a patch, and process the
messages for reporting. If a new attack is detected, it notiﬁes
the user and the cloud service via the alerter and reporter
components.
Patch updater. The patch updater periodically checks
for new patches with the cloud service. If new patches are
available, they are downloaded over a secure channel and
their integrity is veriﬁed before they are put into the de-
ployment pool.
Reporter. All components collect information, such as
attack attempts, the catalog of installed patches, and patch
stability telemetry. All such information is transmitted by
the reporter to the cloud service to evaluate and improve
the patch system.
Alerter. The alerter provides a user interface for some
basic information about the patches being deployed. This
component is a special part of the GUI that is activated to
alert the user with the attack detector each time an exploita-
tion attempt is detected.
4.2 Cloud Components
In addition to the on-device components, two components
comprise the cloud service portion of PatchDroid.
Patch repository. The patch repository provides access
to a centralized store of available patches. On-device up-
daters query this component to determine whether patches
are available for application on a device.
Log collector. The log collector records device teleme-
try exported by the on-device reporter component, and per-
forms analytics to discover patterns of patch instability or
infection campaigns.
5. ANATOMY OF A PATCH
In this section, we present several low-level techniques
used by PatchDroid for patching vulnerabilities in both na-
tive code as well as Dalvik bytecode for the Android plat-
form.
5.1 Patching Native Code
PatchDroid applies patches for native code by replacing
vulnerable functions with equivalent functions that do not
contain the vulnerability. We denote these functions as ﬁxed
functions. Installing a ﬁxed function is performed via inline
hooking or by hooking the global oﬀset table (GOT).
Our patch method for native code is based on shared li-
brary injection. Each patch is a self-contained shared li-
brary that is injected into the target process. Patches are
loaded via the dynamic linker, and the patch code is exe-
cuted through the library’s init function that is called by
the dynamic loader. The patch is activated in two steps.
First, it sets up the communication link between the patch
code and patch monitor, which is used for logging and error
reporting. The second step is installing the actual patch;
the details of this step vary depending on the type of patch.
PatchDroid considers three possible scenarios when patching
vulnerabilities, and thus employs three generic methods for
applying patches that we describe in the following. Figure 2
depicts a graphical overview of these strategies.
5.1.1 Function Replacement
In the case where a vulnerability is localized to a single
function, PatchDroid replaces the function with a ﬁxed ver-
sion of the same function.
In the simplest case, one can
acquire the source of the target application or library from
the public AOSP repository and extract the target function.
5.1.2 Fixing via Function Proxy
Complex functions can be diﬃcult to patch while ensur-
ing that legitimate functionality has not been broken.
In
these cases, PatchDroid can elect to inject a function proxy
that enforces a form of input sanitization to the vulnerable
function. The proxy function wraps the original function,
and inspects the function inputs and relevant global state to
check for conditions that indicate an attack attempt. If a
262
(cid:26)(cid:10)(cid:6)(cid:27)(cid:6)(cid:3)(cid:11)(cid:15)
(cid:28)(cid:11)(cid:5)(cid:4)(cid:19)(cid:13)(cid:24)
(cid:14)(cid:2)(cid:15)(cid:3)(cid:13)(cid:10)(cid:11)(cid:16)(cid:15)(cid:13)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:23)(cid:21)(cid:13)(cid:24)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:14)(cid:2)(cid:15)(cid:3)(cid:13)(cid:10)(cid:11)(cid:16)(cid:15)(cid:13)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:9)(cid:10)(cid:7)(cid:21)(cid:22)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:4)(cid:19)(cid:13)(cid:4)(cid:20)(cid:25)
(cid:14)(cid:2)(cid:15)(cid:3)(cid:13)(cid:10)(cid:11)(cid:16)(cid:15)(cid:13)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:14)(cid:2)(cid:15)(cid:3)(cid:13)(cid:10)(cid:11)(cid:16)(cid:15)(cid:13)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:14)(cid:2)(cid:15)(cid:3)(cid:13)(cid:10)(cid:11)(cid:16)(cid:15)(cid:13)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:4)(cid:11)(cid:15)(cid:15)(cid:12)(cid:17)(cid:18)(cid:7)(cid:12)(cid:10)(cid:13)(cid:5)(cid:12)(cid:14)(cid:11)(cid:15)(cid:12)(cid:4)(cid:19)(cid:13)(cid:4)(cid:20)
(cid:4)(cid:11)(cid:15)(cid:15)(cid:12)(cid:17)(cid:18)(cid:7)(cid:12)(cid:10)(cid:13)(cid:5)(cid:12)(cid:14)(cid:11)(cid:15)(cid:12)(cid:4)(cid:19)(cid:13)(cid:4)(cid:20)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:9)(cid:10)(cid:7)(cid:21)(cid:22)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:6)(cid:8)(cid:9)(cid:7)(cid:10)(cid:5)(cid:11)(cid:3)(cid:5)(cid:12)(cid:10)(cid:13)(cid:5)(cid:2)(cid:10)(cid:3)(cid:12)(cid:14)(cid:11)(cid:15)(cid:2)(cid:13)
(cid:10)(cid:13)(cid:5)(cid:2)(cid:10)(cid:3)(cid:12)(cid:14)(cid:11)(cid:15)(cid:2)(cid:13)(cid:12)(cid:4)(cid:19)(cid:13)(cid:4)(cid:20)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:3)
(cid:6)(cid:8)(cid:9)(cid:7)(cid:10)(cid:5)(cid:11)(cid:3)(cid:5)(cid:12)(cid:10)(cid:13)(cid:5)(cid:2)(cid:10)(cid:3)(cid:12)(cid:14)(cid:11)(cid:15)(cid:2)(cid:13)
Figure 2: The three patching strategies employed
by PatchDroid.
known malicious input state is determined to exist, the vul-
nerable function is not executed and an error is returned.
Otherwise, the original function is executed on the input
state.
5.1.3 Failed Return Value Checking
In addition to enforcing constraints on function input states,
PatchDroid also allows for the enforcement of return value
checks. In some cases, a vulnerability exists because a func-
tion neglects to check the return value from a function that
it invokes. The strategy PatchDroid employs is to wrap the
invoked function with a proxy that checks the return value
on the caller’s behalf before returning to the caller. This
has the beneﬁt of avoiding the complexity of replacing large,
complicated functions.
5.2 Patching Dalvik Bytecode
PatchDroid conceptually adopts similar techniques to the
case of native code when patching vulnerabilities in Dalvik
bytecode. However, applying patches to Dalvik bytecode is
not as straightforward as in the native case. Therefore, we
developed a technique that allows us to replace arbitrary
methods in Dalvik code with a native function call using
JNI [21].
In contrast to native patches, which are bootstrapped us-
ing a shared library init function as described above, byte-
code patches are bootstrapped through a one-time hook of
a commonly called function such as epoll wait() using in-
line hooking. Once that hook is executed, the actual patch
is installed. The installation requires resolving a number
of symbols in the Dalvik VM library (libdvm). The patch-
ing is implemented by replacing a Dalvik method with a
native method using the DVM’s JNI. The main steps in
this process are
(a) obtaining a class reference through
dvmFindLoadedClass, which takes the fully-qualiﬁed class
name as input; (b) obtaining a method reference via dvmFind-
VirtualMethodHierByDescriptor, which takes the method
name and method signature as arguments; (c) and, replacing
the Dalvik method with a native method via dvmUseJNIBridge,
which takes the method reference and a function pointer as
arguments.
263
6.
IMPLEMENTATION
Our PatchDroid prototype implements each of the com-
ponents described in Section 4. In the following, we describe
the implementation details of the device-level components,
our PatchDroid Android application for end users, and the
patches themselves.
6.1 patchd: The Patch Daemon
The patch daemon, patchd, is the core of PatchDroid. It
is launched at system startup and runs continuously in the
background.
Its main responsibilities are monitoring the
system for new processes in order to apply any necessary
patches prior to process execution, performing the actual
patch application, monitoring the stability of patched pro-
cesses, and logging attack attempts and unstable patches.
On startup, patchd collects and inspects the properties of
the device it is running on via the Android properties API.
The main system properties collected include CPU parame-
ters such as the ARM core version; device and manufacturer
information, including the platform and board name; and,
the version of the Android OS.
After the system information is collected, patchd loads
the meta data for all available patches. Patch meta data
describes the name of the target process, the ﬁlename of
the library that contains the patch, a descriptive name for
logging purposes, the Android version that the patch is built
for, and a set of ﬂags to indicate speciﬁc options for the patch
deployment process.
Once the patch database has been loaded, patchd per-
forms an initial round of patch injection into already-running
In particular, patchd loops through the list of
processes.
available patches and compares the process name from the
metadata of every patch to the name of running processes
to determine which patches should be deployed. This initial
round of patch application utilizes the same rules and func-
tionality as the runtime patch deployment system, which we
describe in the following.
6.2 Patching Processes
patchd relies upon several core techniques to reliably and
safely apply patches to running processes: process creation
monitoring, patch deployment, and patch injection.
6.2.1 Process Creation Monitor
Monitoring the system for new processes on Android is
implemented by tracing the init and zygote processes. init is
traced to monitor for newly created processes that are the re-
sult of crashed system services such as zygote or vold. zygote
is traced to monitor for startup of Dalvik-based processes.
Tracing is implemented via the ptrace API. To reduce over-
head, we use the TRACE_FORK and TRACE_EXEC functionality
of ptrace. This feature of ptrace only pauses a traced pro-
cess on calls to fork, clone, and exec, and avoids inducing
performance overhead during execution phases that are not
relevant for PatchDroid.
Once patchd has identiﬁed a newly created process, it at-
taches to it using ptrace and identiﬁes the base executable or
Dalvik class name by inspecting /proc/$PID/cmdline. The
resulting name is used to search the patch database for a
matching patch. In the case of a match, the patch and its
metadata is forwarded to the patch deployment subsystem.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)
(cid:4)(cid:7)(cid:12)(cid:2)(cid:3)(cid:12)(cid:9)(cid:20)(cid:5)(cid:11)(cid:9)(cid:13)(cid:21)(cid:15)
(cid:11)
(cid:12)
(cid:11)
(cid:3)(cid:7)(cid:2)(cid:4)(cid:12)(cid:9)(cid:13)(cid:14)(cid:15)
(cid:16)(cid:17)(cid:18)(cid:12)(cid:4)(cid:3)(cid:9)(cid:13)(cid:19)(cid:15)
(cid:11)(cid:2)(cid:1)(cid:9)(cid:20)(cid:5)(cid:11)(cid:9)(cid:13)(cid:28)(cid:15)
(cid:1)(cid:7)(cid:8)(cid:4)(cid:9)(cid:10)
(cid:5)(cid:8)(cid:8)(cid:22)(cid:9)(cid:13)(cid:23)(cid:15)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:4)(cid:2)(cid:24)(cid:24)(cid:9)(cid:25)(cid:26)(cid:12)(cid:6)(cid:9)(cid:13)(cid:27)(cid:15)
(cid:30)(cid:31)(cid:24)(cid:17)(cid:12)(cid:7)(cid:2)(cid:32)(cid:24)(cid:12)
(cid:7)(cid:12)(cid:1)(cid:8)(cid:7)(cid:3)(cid:9)(cid:13)(cid:29)(cid:15)
Figure 3: Life cycle of a patch. 1) The process is
traced as it is created. 2) Shared memory is cre-
ated. 3) The patch is injected, after that tracing is
stopped. 4) The patch executes and maps the shared
memory. 5) The patch inserts hooks. 6) The ﬁxed
function is called. 7) Patch reports back to patchd.
6.2.2 Patch Deployment
Patch deployment is the term we use to describe the over-
all process of patching a process.
It is composed of two
steps. The ﬁrst step ensures that the patch is suitable for
application to the target process, while the second step is
the actual patch injection. Figure 3 shows the life cycle of a