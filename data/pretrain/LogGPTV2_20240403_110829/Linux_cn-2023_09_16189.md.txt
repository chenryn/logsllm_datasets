---
author: Andreas Hartmann
category: 技术
comments_data:
- date: '2023-09-14 10:33:50'
  message: 最早使用 CoW 和其他一些高级特性的文件系统是 Sun 的 ZFS。Btrfs、APFS 和 ReFS 都是类似 ZFS 的文件系统。
  postip: 61.140.112.135
  username: 来自广东广州的 Chrome Mobile 116.0|Android 10 用户
- date: '2023-09-14 14:39:42'
  message: Sun 被 Oracle 收购后，OpenIndiana 继续提供 ZFS 文件系统。国内有一些备份厂商使用 OpenIndiana 的 ZFS 进行备份。
  postip: 222.79.45.138
  username: 来自福建福州的 Chrome 117.0|GNU/Linux 用户
- date: '2023-09-14 14:41:55'
  message: 对 Btrfs 文件系统的深入了解...到底是如何了解的呀？
  postip: 222.79.45.138
  username: 来自福建福州的 Chrome 117.0|GNU/Linux 用户
- date: '2023-09-14 14:46:23'
  message: "对 Btrfs 文件系统的深入了解" 可以翻译为英文："A profound understanding of the Btrfs file system."
  postip: 222.79.45.138
  username: 来自福建福州的 Chrome 117.0|GNU/Linux 用户
- date: '2023-09-15 22:04:28'
  message: 很显然 AI 学习了过多的领导演讲稿。。。
  postip: 114.224.35.129
  username: 来自江苏无锡的 Firefox 117.0|Ubuntu 用户
count:
  commentnum: 5
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 2571
date: '2023-09-13 23:51:00'
editorchoice: false
excerpt: 这篇文章是《Btrfs 详解》系列文章中的一篇。
fromurl: https://fedoramagazine.org/working-with-btrfs-general-concepts/
id: 16189
islctt: true
largepic: /data/attachment/album/202309/13/235109zpss77b87s0e00g2.jpg
permalink: /article-16189-1.html
pic: /data/attachment/album/202309/13/235109zpss77b87s0e00g2.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 16250
reviewer: wxy
selector: lkxed
summary: 这篇文章是《Btrfs 详解》系列文章中的一篇。
tags:
- Btrfs
thumb: false
title: Btrfs 详解：基础概念
titlepic: true
translator: A2ureStone
updated: '2023-09-13 23:51:00'
---

![](/data/attachment/album/202309/13/235109zpss77b87s0e00g2.jpg)

这篇文章是《Btrfs 详解》系列文章中的一篇。从 Fedora Linux 33 开始，Btrfs 就是 Fedora Workstation 和 Fedora Silverblue 的默认文件系统。

### 介绍

文件系统是现代计算机的基础之一，是任何操作系统不可或缺的一部分，但通常不为人注意。然而，像 Btrfs 这样的现代文件系统提供了许多优秀的特性，使计算机的使用更加方便。例如，它可以无感地为你压缩文件，或者为增量备份建立可靠的基础。

本文将带你高屋建瓴地了解 Btrfs 文件系统的工作原理及其特性。本文不会过多涉及技术细节或底层实现，后续的文章会详细介绍一些重要特性。

### 什么是文件系统

如果你已经基本了解文件系统的工作原理，可以直接跳到下一节。否则，请先阅读下面对文件系统的简短介绍。

简单来说，文件系统允许你的 PC 查找存储在磁盘上的数据。虽然听起来很简单，但实际上各种类型的非易失性存储设备（如机械硬盘、固态硬盘、SD 卡等）仍然与 1970 年代 PC 被发明时基本相同：一个巨大的存储块集合。

“块”是最小的可寻址存储单元。PC 上的每个文件内容被存储在多个块中，一个块通常是 4096 字节的大小，这取决于硬件和文件系统。

文件系统通过所谓的 *inode* 允许我们从海量的存储块中查找文件的内容。一个 inode 在特殊格式的存储块里记录了文件的信息，包括文件的大小、组成文件内容的存储块的位置、访问规则（即谁可读、可写、可执行）等。

下面是 inode 的示意图：

![A text file “myfile.txt” and a hypothetical example of its representation on disk. All the squares are individual storage blocks.](/data/attachment/album/202309/13/235150rgltgqg7qo7tlmyk.png)

inode 的结构对文件系统的功能有巨大影响，因此它是各种文件系统的重要数据结构之一。每个文件系统都有各自的 inode 结构。如果你想了解更多关于 Btrfs 文件系统 inode 结构的信息，可以参考 [链接](https://btrfs.wiki.kernel.org/index.php/Data_Structures#btrfs_inode_item)。对于更详细的字段含义，可以参考 [ext4 文件系统的 inode 结构](https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout#Inode_Table)。

### 写时复制（CoW）文件系统

相比 ext4，Btrfs 的一个重要特性是它是一个写时复制（Copy-on-Write, CoW）文件系统。当一个文件被修改并回写到磁盘时，它不会直接写回到原来的位置，而是被复制并存储在磁盘的新位置。从这个意义上说，CoW 可以被视为一种“重定向”，因为文件写入被重定向到不同的存储块上。

这听起来可能很浪费，但实际上并不是。因为无论如何，被修改的数据都需要写入磁盘。Btrfs 确保数据写入之前未被占据的块，从而保持旧数据完整。唯一的缺点是这种行为可能导致文件碎片化比其他文件系统更快，但在日常使用中，你不太可能会注意到这一点。

CoW 的优势在于它保存了文件修改的历史。Btrfs 保存了文件旧版本的引用（inode），可以轻松访问这些引用，这就是快照：文件系统在某个时间点的状态镜像。这一主题将在本系列的单独一篇文章中详细介绍。

除了保存文件历史，CoW 文件系统始终处于一致状态，即使之前的文件系统事务（如写入文件）由于断电等原因未完成。这是因为文件系统的元数据更新也是写时复制的：文件系统本身永远不会被覆盖，因此中断不会使其处于部分写入状态。

### 对文件的写时复制

你可以将文件名视为对 inode 的指针。在写入文件时，Btrfs 创建一个被修改文件内容（数据）的拷贝和一个新的 inode（元数据），然后让文件名指向新的 inode，旧的 inode 保持不变。以下是一个假设示例来说明这一点：

![Continuation of the example above: 3 more bytes of data were added](/data/attachment/album/202309/13/235151mhorhyiymd4puvuf.png)

这里 `myfile.txt` 增加了三个字节。传统的文件系统会更新中间的 `Data` 块以包含新内容。CoW 文件系统不会改变旧的数据块（图中灰色），而是将更改的数据和元数据写入（复制）到新位置。值得注意的是，只有被改变的数据块被复制，而不是整个文件。

如果没有空闲的块来写入新内容，Btrfs 将从旧文件版本占用的数据块中回收空间（除非它们是快照的一部分，这将在本系列的后续文章中讨论）。

### 对目录的写时复制

从文件系统的角度看，目录只是特殊类型的文件。与常规文件不同，文件系统直接解释数据块的内容。一个目录有自己的元数据（inode，就像上面提到的文件一样）来记录访问权限或修改时间。最简单的形式，目录中的数据（称为目录项）是一个 inode 引用列表，每个 inode 又是另一个文件或目录。但是，现代文件系统在目录项中至少会存储文件名和对应的 inode 引用。

之前已经指出，写入一个文件会创建之前 inode 的副本，并相应修改其内容。从根本上讲，这会产生一个与之前无关的新 inode。为了让被修改的文件对文件系统可见，所有包含该文件引用的目录项都会被更新。

这是一个递归过程！因为一个目录本身是一个带有 inode 的文件。修改目录中的任何一项都会为该目录文件创建新的 inode。这会沿着文件系统树递归直到文件系统的根。

因此，只要保留对任何旧目录的引用，并且这些目录没有被删除和覆盖，就可以遍历之前旧状态的文件系统树。这就是快照的功能。

### 后续文章可以期待的内容

Btrfs 不仅仅是一个 CoW 文件系统。它的目标是在实现高级特性的同时关注容错、修复和易于管理（参见 [文档](https://btrfs.readthedocs.io/en/latest/Introduction.html)）。本系列未来的文章将专门介绍这些特性：

- 子卷 – 文件系统中的文件系统
- 快照 – 回到过去
- 压缩 – 透明节省存储空间
- 配额组 – 限制文件系统大小
- RAID – 替代 mdadm 配置

这远非 Btrfs 特性的详尽列表。如果你想全面了解可用特性，请查看 [维基](https://btrfs.wiki.kernel.org/index.php/Main_Page) 和 [文档](https://btrfs.readthedocs.io/en/latest/Introduction.html)。

### 总结

我希望我已经激发了你进一步了解计算机文件系统的兴趣。如果你有任何疑问，请在评论区留言讨论，以便在日后文章中探讨。同时，你也可以自行学习文中提供的相关资源。如果你发现 Btrfs 中某项特别有趣的功能，也欢迎在评论区提出。如果某个主题收到足够的关注，我可能会在系列文章中新增相关内容。下一篇文章再见！

*（题图：MJ/35fa1970-1806-4026-8d58-095a56206ec9）*

via: 
作者：[Andreas Hartmann](https://fedoramagazine.org/author/hartan/) 选题：[lkxed](https://github.com/lkxed) 译者：[A2ureStone](https://github.com/A2ureStone) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出
---