### Available Estimates and Active User Numbers

Estimates from other sources place the number of monthly active WhatsApp users in the US at 25 million [16]. Our estimate differs from this number because our results include all registered numbers, not just active ones. Another statistic [17] estimates the number of US mobile phone numbers that accessed WhatsApp in 2019 at 68.1 million, which appears to be an overestimation based on our findings.

### Profile Picture and About Text Availability

For a random subset of 150,000 users, we analyzed the availability of profile pictures and About texts. The results show that 49.6% have a publicly available profile picture, and 89.7% have a public About text. An analysis of the most popular About texts reveals that the predefined (language-dependent) text is the most common (77.6%), followed by "Available" (6.71%). A small percentage (0.81%) use an empty string, including variations like “.” and “*** no status ***”. Very few users enter custom texts.

### Signal Analysis

Our script for Signal used 100 accounts over 25 days to check all 505 million mobile phone numbers in the US. Our results indicate that Signal currently has 2.5 million registered users in the US. Among these, 82.3% have set an encrypted username, and 47.8% use an encrypted profile picture. We also cross-checked with WhatsApp to see if Signal users differ in their use of public profile pictures. We found that 42.3% of Signal users are also registered on WhatsApp (see Table IV), and 46.3% of them have a public profile picture there. While this is slightly lower than the average for WhatsApp users (49.6%), it does not sufficiently indicate an increased privacy awareness among Signal users, at least regarding profile pictures.

### Telegram Analysis

For Telegram, we used 20 accounts running for 20 days on random US mobile phone numbers. Due to Telegram’s strict rate limits, only 100,000 numbers were checked during this period. Of those, 0.9% are registered, and 41.9% have a non-zero `importer_count`. These numbers have a higher probability of being present on other messengers, with 20.2% registered with WhatsApp and 1.1% with Signal, compared to the average success rates of 9.8% and 0.9%, respectively. Among the discovered Telegram users, 44% have at least one public profile picture, with 2% having more than 10 pictures available.

### Summary and Comparison

Table III provides an overview of the tested messengers, our crawling setup, and key results. Our analysis of WhatsApp, Signal, and Telegram offers insights into the privacy aspects of these messengers concerning their contact discovery services. 

A notable difference is the storage of user contact information. Both WhatsApp and Telegram store this information on the server, while Signal avoids maintaining a server-side state to better preserve user privacy. This practice, however, requires significantly higher rate limits for the contact discovery process, as all of a user’s contacts are compared on every sync, and the server cannot compare them to previously synced numbers.

While Telegram uses server-side storage to enforce strict rate limits, WhatsApp allows individual clients to check millions of numbers. Signal excels in exposing minimal information about registered users, apart from their phone number. In contrast, WhatsApp exposes profile pictures and About texts for registered numbers, requiring users to opt-out of sharing this data by changing the default settings. Our results show that only half of all US users prevent such sharing by either not uploading an image or changing the settings. Telegram allows crawling multiple images and additional information for each user, and its API even provides information about users not registered with the service, aiding attackers in acquiring likely active numbers to search on other platforms.

Our results also show that many users are registered with multiple services, with 42.3% of Signal users also active on WhatsApp. We found only 2 out of 10,129 checked users on all three platforms (i.e., less than 0.02%). Figure 3 visualizes the popularity of WhatsApp and Signal across individual US states and Washington D.C. On average, about 10% of residents have mobile numbers from another state [22], which may obscure these results to some extent. Interestingly, Washington D.C. numbers are more than twice as often registered on Signal than numbers from any other state, with Washington D.C. also being the region with the most non-local numbers (55%) [22].

### Incremental Contact Discovery

We propose a new rate-limiting scheme for contact discovery in messengers without server-side contact storage, such as Signal. Setting strict limits for such services is challenging because the server cannot determine if the user's input in discovery requests changes significantly with each invocation. We named our new approach "incremental contact discovery" and shared its details with the Signal developers, who are considering implementing a similar approach (see Section VIII). Our approach provides strict improvements over existing solutions, enabling the service to enforce stricter rate limits with negligible overhead and without degrading usability or privacy.

#### Approach

Incremental contact discovery is based on the observation that the database of registered users changes only gradually over time. Similarly, the contacts of legitimate users change slowly. If clients can store the last state for each of their contacts, they only need to query the server for changes since the last synchronization. Therefore, if the server tracks database changes (new and unsubscribed users), clients who connect regularly only need to synchronize with the set of recent database changes. This enables the server to enforce stricter rate limits on the full database, which is only needed for initial synchronization, newly added client contacts, and when the client fails to regularly synchronize with the set of changes. Enumeration attacks, which require frequent changes to the client set, will quickly exceed the rate limits when syncing with the full database.

#### Assumptions

Based on Signal’s current rate limits, we assume that each user has at most \( m = 50,000 \) contacts that are synced up to 4 times per day. This set changes slowly, i.e., only by several contacts per day. Another reasonable assumption is that the server database of registered users does not significantly change within short time periods, e.g., only 0.5% of users join or leave the service per day (see Section V-C).

#### Algorithm

The server of the service provider stores two sets of contacts: the full set \( S_F \) and the delta set \( S_D \). \( S_F \) contains all registered users, while \( S_D \) contains only information about users that registered or unregistered within the last \( T_F \) days. Both sets, \( S_F \) and \( S_D \), are associated with their own leaky buckets of size \( m \), which are empty after \( T_F \) and \( T_D \) days, respectively. The server stores leaky bucket values \( t_F \) and \( t_D \) for each client, representing the (future) points in time when the leaky buckets will be empty for requests to \( S_F \) and \( S_D \), respectively.

A newly registered client syncs with the full set \( S_F \) to receive the current state of the user’s contacts. For subsequent syncs, the client only syncs with \( S_D \) to receive recently changed contacts, provided that it synchronizes at least every \( T_F \) days. If the client is offline for a longer period, it can sync with \( S_F \) again, as the leaky bucket associated with it will be empty. New contacts added by the user are initially synced with \( S_F \) to learn their current state.

**Algorithm 1: Synchronization with Full Set \( S_F \)**

- **Input:** \( S_F \), \( m \), \( T_F \), \( C_F \), \( t_F \)
- **Output:** \( D \)

1. Calculate \( t_{\text{new}} \) as the new (future) timestamp when the client’s leaky bucket would be empty.
2. If \( t_{\text{new}} \) is further into the future than \( T_F \), raise a `RateLimitExceededError`.
3. Otherwise, update the leaky bucket for the client and return the intersection between \( C_F \) and \( S_F \).

**Algorithm 2: Synchronization with Delta Set \( S_D \)**

- **Input:** \( S_F \), \( S_D \), \( m \), \( T_D \), \( C_D \), \( t_D \)
- **Output:** \( R_D \)

1. Calculate \( t_{\text{new}} \) as the new (future) timestamp when the client’s leaky bucket would be empty.
2. If \( t_{\text{new}} \) is further into the future than \( T_D \), raise a `RateLimitExceededError`.
3. Otherwise, update the leaky bucket for the client and return the requested contacts that changed (registered or unregistered) within the last \( T_F \) days, along with their current state.

#### Implementation

We provide an open-source proof-of-concept implementation of our incremental contact discovery scheme written in Python at https://contact-discovery.github.io/. It uses Flask [54] to provide a REST API for performing contact discovery. While not yet optimized for performance, our implementation can be useful for service providers and their developers, facilitating integration into real-world applications.

#### Evaluation

**Overhead:** Our incremental contact discovery introduces only minimal server-side storage overhead, as the only additional information is the set \( S_D \) (which is small compared to \( S_F \)), and the additional leaky bucket states for each user. The runtime is improved, as subsequent contact discovery requests are only compared to the smaller set \( S_D \). On the client side, the additional storage overhead is introduced by the need to store a timestamp of the last sync and a set of previously unsynced contacts \( C_D \).

**Improvement:** To evaluate our construction, we compare it to the leaky bucket approach currently deployed by Signal. Specifically, we compare the discovery rate of the schemes, i.e., the number of users that can be found by a single client within one day using a random lookup strategy. Rate-limiting schemes should minimize this rate for attackers without impacting usability for legitimate users. For Signal, the discovery rate is \( r = s \cdot 4 \cdot 50,000 \)/day, where \( s \) is the success rate for a single lookup. Based on our findings in Section IV-H, we assume \( s = 0.5\% \), resulting in a discovery rate of \( r = 1,000 \)/day for Signal’s leaky bucket approach.

For our construction, the discovery rate is the sum of the rates \( r_F \) and \( r_D \) for the buckets \( S_F \) and \( S_D \), respectively. While \( r_F \) is calculated as \( r_F = s \cdot m / T_F \), \( r_D \) is calculated as \( r_D = s \cdot m \cdot c \cdot T_F / T_D \), where \( c \) is the change rate of the server database. To minimize \( r \), we set \( T_F = \sqrt{T_D / c} \). With Signal’s parameters \( s = 0.5\% \), \( m = 50,000 \), and \( T_D = 0.25 \) days, the total discovery rate for our construction is \( r = 1,000 \cdot \sqrt{c} \), and the improvement factor is exactly \( 1 / \sqrt{c} \).

In reality, the expected change rate depends on the platform's popularity. Telegram saw 1.5 million new registrations per day while growing from 300 million to 400 million users [23], corresponding to a daily change rate of approximately 0.5%. WhatsApp, reporting 2 billion users in February 2020 [25] (up from 1.5 billion in January 2018 [18]), increases its user base by an average of 0.05% per day. Compared to Signal’s rate-limiting scheme, incremental contact discovery results in an improvement of 14.1x and 44.7x for Telegram’s and WhatsApp’s change rates, respectively (see Table V). Even at a theoretical change rate of 25% per day, incremental discovery is twice as effective as Signal’s current approach. Crawling entire countries would only be feasible for very powerful attackers, as it would require over 100,000 registered accounts (at \( c = 0.05\% \)) to crawl, e.g., the US in 24 hours. It should be noted that in practice, the change rate \( c \) will fluctuate over time. The resulting efficiency impact of non-optimal choices for \( T_F \) is further analyzed in Section E.

**Privacy Considerations:** If attackers can cover the whole number space every \( T_F \) days, it is possible to find all newly registered users and maintain an accurate database. This is not different from today, as attackers with this capacity can sweep the full number space. Using the result from Algorithm 2, users learn if a contact in their set has (un)registered in the last \( T_F \) days, but this information can currently also be retrieved by simply storing past discovery results.

#### Generalization

Our construction can be generalized to further decrease an attacker’s efficiency. This can be achieved by using multiple sets containing the incremental changes of the server set over different time periods (e.g., one month, week, and day) such that the leak rate of \( S_F \) can be further decreased. It is even possible to use sets dynamically chosen by the service without modifying the client: each client sends its timestamp of the last sync to the service, which can be used to perform contact discovery with the appropriate set.

### Mitigation Techniques

We now discuss countermeasures and (mostly known) mitigation techniques for both hash reversal and enumeration attacks. Further supplemental techniques are discussed in Section F.

#### Hash Reversal Mitigations

Private set intersection (PSI) protocols (see Section VII-A) can compute the intersection between the registered user database and the users’ address books in a privacy-preserving manner. Utilizing provably secure PSI protocols in contact discovery entirely prevents attacks where curious service providers can learn the user’s social graph when receiving hashes of low-entropy contact identifiers such as phone numbers.

However, even with PSI, protocol participants can still perform enumeration attacks. Even with actively secure constructions (where privacy is still guaranteed despite arbitrary deviations from the protocol), it is possible to choose different inputs for each execution. The privacy provided by PSI interferes with efforts to detect if the respective other party replaced the majority of inputs compared to the last execution. Thus, these protocols must be combined with protections against enumeration attacks by restricting the number of protocol executions and inputs to the minimum (see Sections VI-B and V).

Moreover, PSI protocols currently do not achieve practical performance for a very large number of users. For example, for the current amount of about 2 billion WhatsApp users [25], each user has to initially download an encrypted and compressed database of approximately 8 GiB [37]. More practical PSI designs either rely on unrealistic trust assumptions (e.g., non-colluding servers) or on trusted hardware [49] that provides no provable security guarantees and often suffers from side-channel vulnerabilities [9]. Hence, we discuss reasonable performance/privacy trade-offs for contact discovery next.

**Database Partitioning:** To reduce the communication overhead of PSI protocols to practical levels, the user database can be partitioned.