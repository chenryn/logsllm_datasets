its caller together with additional contextual information such
as the PIDs of the owner processes.
The Peer Handler (Section 3.2) communicates with neigh-
boring ShadowMove instances to synchronize their views of
the compromised network. On one hand, it updates the Net-
work View Manager with information learned from its peers
(e.g., newly discovered hosts); on the other hand, it sends the
network view of the local ShadowMove instance to its remote
peers.
The Network View Manager (Section 3.3) combines a few
methods to maintain a global view of the victim network,
based on notiﬁcations from the Connection Detector and the
Peer Handler. It also determines the service type supported
by each duplicated socket and maintains the liveness of the
duplicated sockets.
Periodically, the Lateral Movement Planner (Section 3.5)
creates a lateral movement plan based on the current network
view and the capabilities supported by the duplicated sockets.
The plan speciﬁes the socket that must be used, the type of
action that must be carried out, and the payload.
Finally, the Plan Actuators (Section 3.6) execute individual
steps in a lateral movement plan, such as transferring a ﬁle
to the remote server, by sending packets to and/or receiving
packets from the given sockets.
3.1 ShadowMove Connection Detector
Two approaches exist for detecting and tracking TCP con-
nections. First, we can periodically poll TCP connection in-
formation and compare the returned information with the
result of the previous call. This approach is used by tools
such as TCPView on Windows. A second approach is event-
driven in which we register an event handler for the creation
or teardown of connections. In Windows OS, one can get in-
formation about connection state changes by creating a WMI
(Windows Management Instrumentation) ﬁlter and registering
a WMI event consumer [57]. However, registering a WMI
event consumer requires administrative privilege.
As a result, we choose the ﬁrst approach. By calling
GetTcpTable2 and GetTcp6Table2 on Windows, or by run-
ning the command netstat -ntp on Linux, the Connec-
tion Detector can get basic information about TCP connec-
tions, such as connection state, local IP address, local port,
remote IP address, remote port, and the ID of the owner pro-
cess [42]. From the process ID it can further get the process
name. When the Connection Detector observes a connection
state change from non-ESTABLISHED to ESTABLISHED,
Figure 2: ShadowMove Architecture
server then to the database server. Moreover, they need to
have some tool persist on the database server in order to get
daily reports about updates to employee records.
To move from the desktop to the application server,
the attacker can leverage the FTP connection (see Sec-
tion 4.2) to copy a piece of malware to the applica-
tion server and wait for the malware to be executed. For
example, it is common that an application server can
run an external program (e.g., data processing app im-
plemented in C) in a path speciﬁed in a conﬁguration
ﬁle [4]. The conﬁguration ﬁle may contain “commandname =
C : \users\alluser\appdata\updater\d panalyzer.exe” and
based on this the application server executes d panalyzer.exe
once some relevant event is triggered. To keep the application
server up to date, an IT personnel is authorized to copy ﬁles
to the application server in order to update d panalyzer.exe.
Under this circumstance, the attacker can leverage the FTP
connection to copy a piece of malware to the application
server to replace the legitimate d panalyzer.exe and then wait
for the malware to be executed by the application server. The
attacker can get the conﬁguration ﬁle’s content via the same
FTP connection.
When the malware is launched on the application server
(e.g., as d panalyzer.exe), it can leverage the database con-
nection (such as Microsoft SQL discussed in Section 4.3)
between the application server and the database server to
copy and launch further malware on the database server.
3 ShadowMove Architecture and Design
Figure 2 depicts the overall architecture of ShadowMove,
which consists of six major modules: Connection Detector,
Socket Duplicator, Peer Handler, Network View Manager,
Lateral Movement Planner, and Plan Actuator.
Central to the ShadowMove design is the notion of Network
View, which represents a model of the normal network com-
munication pattern in the victim environment, collectively
maintained by ShadowMove instances running on different
victim systems. Figure 6 gives an example network view. Each
ShadowMove instance maintains two views: the local view
is based on the current connections in the local system, and
the global view is constructed by exchanging and propagating
information among ShadowMove instances.
562    29th USENIX Security Symposium
USENIX Association
Figure 3: ShadowMove - Synchronization Signal
it invokes the Socket Duplicator about the new TCP connec-
tion and then notiﬁes the Network View Manager to add the
duplicated socket into the pool. On the other hand, when it
observes a connection state change from ESTABLISHED to
non-ESTABLISHED, it notiﬁes the Network View Manager
to remove a duplicated socket from the pool because the asso-
ciated TCP connection becomes unusable. The notiﬁcation
message contains basic information of the TCP connection
and the owner process name.
On Windows, the Connection Detector does some simple
ﬁltering of TCP connections before it notiﬁes the Socket Du-
plicator or the Network View Manager. Speciﬁcally, it checks
whether the ShadowMove process has enough permission
to open the owner process of a TCP connection with PRO-
CESS_DUP_HANDLE access ﬂag, and it skips those con-
nections for which the ShadowMove process does not have
enough permission.
3.2 Peer Handler
The Peer Handler module enables ShadowMove instances
to share their views of the compromised network with their
neighboring ShadowMove instances. Each instance I uses the
shared information to construct a global view of accessible
systems via already-compromised systems. The Peer Handler
module is executed in a separate worker thread.
Upon execution, the Peer Handler attempts to locate a con-
ﬁguration ﬁle in the working directory of I. This ﬁle contains
information about the TCP connection that was used to move
I to the current system. ShadowMove then determines the
corresponding server process and the socket that were mis-
used by the predecessor ShadowMove instance. It duplicates
this socket by calling the Socket Duplicator module and then
continuously listens to the incoming trafﬁc of the duplicated
socket.
As shown in Figure 3, on a regular basis, the predeces-
sor ShadowMove suspends the client process and then sends
a special request to the remote server. Upon receiving this
“signal” message, the successor ShadowMove suspends the
server process. Then these two ShadowMove instances can
synchronize their knowledge about the network using a proto-
col similar to the distance vector routing protocol [56].
3.3 Network View Manager
This module maintains a global view of the victim network
based on information received from the Connection Detector
and the Peer Handler.
It manages the Duplicated Socket Pool and keeps a tuple
 for each socket in the pool. Most of these ﬁelds are
passed in by the Connection Detector, except for service type
(or protocol), which it determines in a sub-module called
Layer 7 Protocol Detector by combing a few methods. First,
it guesses from the destination port because many services
run behind well-known default ports [11], e.g., the default
port number for FTP is 21. Second, it guesses from the owner
processes if they are well-known client-side tools for some
services, e.g., ssms.exe or the Microsoft SQL Server Manage-
ment Studio is a client of SQL server. Finally, if the port num-
ber and the owner process information are not sufﬁcient for a
reliable guess, it passively sniffs the network trafﬁc by calling
the recv API on each socket and setting the MSG_PEEK
ﬂag. Then it analyzes the received payload to recognize the
application-level protocol, leveraging existing protocol analy-
sis techniques such as automatic protocol detection feature in
Suricata [55].
Based on the Duplicated Socket Pool, the Network View
Manager computes a local view, which can be represented
by several predicates shown in Table 2: a system predicate
deﬁnes the IP address of a host, and a connected predicate
deﬁnes connections between two systems. When it receives
notiﬁcations from the Peer Handler, which are system and
connected predicates shared by the neighbors, it updates its
global view by merging the predicates into its local view.
It is worth noting that, in Windows, closing a socket does
not always entail in TCP connection termination handshake.
The termination handshake occurs only when the last socket
descriptor is closed. As a result the connections will remain
open even if owner processes close their sockets. However, a
TCP connection may be not usable because of several reasons
such as network failure, remote process crash, or connection
inactivity timeout. To prevent connection inactivity timeout to
occur, the Network View Manager sets the SO_KEEPALIVE
ﬂag for all duplicated sockets using setsockopt API func-
tion; by doing so, keep-alive packets will be sent through
these connections automatically.
3.4 ShadowMove Socket Duplicator
The Socket Duplicator duplicates sockets associated with
given TCP connections when it receives a request from the
Connection Detector or the Peer Handler. The underlying idea
of our approach is to duplicate the socket inside the target
process and to use the resulting socket to secretly access the
established TCP connection.
3.4.1 Socket Duplication on Windows
On Windows, one can call DuplicateHandle API to du-
plicate different types of handles from a remote process. How-
ever, as mentioned in DuplicateHandle documentation [40],
this function cannot be used to duplicate sockets.
USENIX Association
29th USENIX Security Symposium    563
offers
an
API
Although Windows
named
WSADuplicateSocket to duplicate a socket, we can-
not directly use this function as it requires cooperation
between the processes. As mentioned in [41], a typical sce-
nario of using this function goes as follows. A source process
creates a socket and wants to share it with a destination pro-
cess. First, the source process calls WSADuplicateSocket
to get a special WSAPROTOCOL_INFO structure. This info
structure is given to the destination process via inter-process
communication (IPC) mechanism. The destination process
passes the info structure to WSASocket to reconstruct the
socket on its side. The main challenge in this approach (i.e.,
using WSADuplicateSocket) is that both processes must
cooperate with each other to duplicate a socket, which is
not the case in our scenario where the attacker wants to
duplicate a socket from an unwary victim process. One way
to address this issue is to inject code into the victim process
to implement the missing steps due to a lack of cooperation.
However, existing defense mechanisms such as Windows
Defender ATP ﬂag usages of common process injection
techniques [48], which makes the solution less attractive.
We devised a novel technique, by using Windows APIs in
an unconventional way, that enables an attacker process to
duplicate a socket from a target process without requiring
its cooperation. Table 1 depicts the steps that the attacker
process performs to duplicate a socket from a target process,
assuming it knows the process ID of the target, thanks to
real-time connection detection (Section 3.1). First, it opens
the target process by using OpenProcess to enumerate all
of the open handles in the target. The attacker process only
seeks for ﬁle handles with the name of \device\afd (steps
3-5, and afd stands for ancillary function driver). During this
operation, the attacker process duplicates all ﬁle handles as
it is required for reading the name of a handle. We discover
that the attacker process could treat these duplicated afd han-
dles as sockets. To locate the exact socket corresponding to a
TCP connection, the attacker process obtains the remote IP
address and remote port to which the afd handle of socket is
connected (by invoking getpeername) and compares them
with the information passed in by the Connection Detector. If
there is a match, the attacker process passes the afd handle to
WSADuplicateSocketW to obtain the information necessary
for duplication of the original socket. After obtaining the pro-
tocol info structure, the attacker process calls the WSASocketW
function to duplicate the socket. This socket is then saved in
the Duplicated Socket Pool together with context informa-
tion such as the owner PID, the owner process name, local IP
address, local port, remote IP address, and remote port.
It is also worth noting that on Windows, the TCP con-
nection tables for IPv4/6 only contain information about the
original socket descriptors not the duplicated ones and the
owner PID of a socket descriptor will never change even after
the termination of the owner process. This means that conven-
tional tools such as netstat, which rely on Windows APIs
to retrieve TCP connection tables, cannot be used to detect
whether a connection is duplicated and nor its duplicators.
3.4.2 Deep Dive into Socket Duplication on Windows
To understand why ShadowMove’s socket duplication
works, it is necessary to ﬁrst understand socket context. The
winsock2 libraries maintain socket context for each socket
handle in a number of data structures at different layers
( [58] and Figure 4). Inside WS2_32.dll, there is a hash table
called sm_context_table, which maps a socket handle to
a DSOCKET object that stores information about the socket
such as the process and service provider. At the next layer,
mswsock.dll (a service provider), there is another hash table
called SockContextTable, which maps a socket handle to a
SOCKET_INFORMATION object, which stores information such
as socket state, reference count, local address, and remote
address. Every user-level operation on the socket, such as
connect, send, and recv, has to refer to and may change
the socket context (e.g., the remote address and the refer-
ence count). Moreover, such context information including
the hash tables is maintained for each process. The kernel
side of socket functionality, which is the ancillary function
driver or AFD.sys, also maintains socket context information
(e.g., local address and remote address), which is necessary
for the kernel driver to eventually construct network packets.
What happens during normal socket sharing via
WSADuplicateSocket. The normal socket sharing on Win-
dows [40] involves three steps, as illustrated in Figure 4.
When the source process invokes WSASocket to create a new
socket, it does three things [58]: (1) calling NtCreateFile
to get a socket handle (e.g., Handle 1), (2) creating a
new SOCKET_INFORMATION object for Handle 1, and (3)
calling NtDeviceIoControlFile to set the kernel side
context information of Handle 1. Next, when the source
process invokes WSADuplicateSocket to share Handle 1
with the destination process, it ﬁrst creates a duplicate
of Handle 1 (e.g., Handle 2), and then puts Handle 2 in
the dwProviderReserved ﬁeld of a WSAPROTOCOL_INFO
structure to be shared with the destination process [59].
When the destination process invokes WSASocket with the
WSAPROTOCOL_INFO structure as one parameter, WSASocket
extracts Handle 2 from the dwProviderReserved ﬁeld and
uses it to call NtDeviceIoControlFile to get the kernel side
context information; once this is done, it uses the obtained
information to construct an SOCKET_INFORMATION object for
Handle 2, which makes Handle 2 a functional socket handle.
What happens during ShadowMove’s socket hijack-
ing (Table 1). Using the same scenario above, our Shad-
owMove attack can secretly share the socket with handle
Handle 1 without the cooperation of the source process. Shad-
owMove also uses a combination of WSADuplicateSocket
and WSASocket, but it does one more step as prepara-
tion: it ﬁrst creates a duplicate of Handle 1 by calling
NtDuplicateObject; this is necessary because Handle 1
564    29th USENIX Security Symposium
USENIX Association
Table 1: ShadowMove Socket Duplication Given Owner Process ID, Remote IP, and Remote Port Number
Step Description
Kernel/ntdll Functions
1
2
3
4
5
6
7
8
9
10
Open the owner process with PROCESS_DUP_HANDLE
Foreach handle with type 0x24 (ﬁle)
Duplicate the handle
Retrieve its names
Skip if the name is not \device\afd
Obtain remote IP and remote port number
Skip if remote IP and port do not match the input parameters