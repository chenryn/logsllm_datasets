配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = thrift
a1.sources.r1.channels = c1
a1.sources.r1.bind = 0.0.0.0
a1.sources.r1.port = 4141
```
#### Exec Source
这个source在启动时运行给定的Unix命令，并期望该进程在标准输出上连续生成数据（stderr
信息会被丢弃，除非属性 *logStdErr* 设置为 `true` ）。
如果进程因任何原因退出， 则source也会退出并且不会继续生成数据。
综上来看cat \[named pipe\]或tail -F
\[file\]这两个命令符合要求可以产生所需的结果，而date这种命令可能不会，因为前两个命令（tail
和
cat）能产生持续的数据流，而后者（date这种命令）只会产生单个Event并退出。
::: hint
::: title
Hint
:::
cat \[named pipe\]和tail -F
\[file\]都能持续地输出内容，那些不能持续输出内容的命令不可以。这里注意一下cat命令后面接的参数是命名管道（named
pipe）不是文件。
:::
必需的参数已用 **粗体** 标明。
  属性                           默认值        解释
  ------------------------------ ------------- ----------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                   \--           与Source绑定的channel，多个用空格分开
  **type**                       \--           组件类型，这个是： `exec`
  **command**                    \--           所使用的系统命令，一般是cat 或者tail
  shell                          \--           设置用于运行命令的shell。 例如 / bin / sh -c。 仅适用于依赖shell功能的命令，如通配符、后退标记、管道等。
  restartThrottle                10000         尝试重新启动之前等待的时间（毫秒）
  restart                        false         如果执行命令线程挂掉，是否重启
  logStdErr                      false         是否会记录命令的stderr内容
  batchSize                      20            读取并向channel发送数据时单次发送的最大数量
  batchTimeout                   3000          向下游推送数据时，单次批量发送Event的最大等待时间（毫秒），如果等待了batchTimeout毫秒后未达到一次批量发送数量，则仍然执行发送操作。
  selector.type selector.\*      replicating   可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*   \--           该source所使用的拦截器，多个用空格分开 拦截器相关的属性配置
::: warning
::: title
Warning
:::
ExecSource相比于其他异步source的问题在于，如果无法将Event放入Channel中，ExecSource无法保证客户端知道它。在这种情况下数据会丢失。例如，最常见的用法是用tail
-F \[file\]这种，应用程序负责向磁盘写入日志文件， Flume
会用tail命令从日志文件尾部读取，将每行作为一个Event发送。这里有一个明显的问题：如果channel满了然后无法继续发送Event，会发生什么？由于种种原因，Flume无法向输出日志文件的应用程序指示它需要保留日志或某些Event尚未发送。
总之你需要知道：当使用ExecSource等单向异步接口时，您的应用程序永远无法保证数据已经被成功接收！作为此警告的延伸，此source传递Event时没有交付保证。为了获得更强的可靠性保证，请考虑使用
[Spooling Directory Source](#spooling-directory-source)， [Taildir
Source](#taildir-source) 或通过SDK直接与Flume集成。
:::
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = exec
a1.sources.r1.command = tail -F /var/log/secure
a1.sources.r1.channels = c1
```
*shell* 属性是用来配置执行命令的shell（比如Bash或者Powershell）。command
会作为参数传递给 shell
执行，这使得command可以使用shell中的特性，例如通配符、后退标记、管道、循环、条件等。如果没有
shell 配置， 将直接调用 command 配置的命令。shell
通常配置的值有："/bin/sh -c"、"/bin/ksh -c"、"cmd /c"、"powershell
-Command"等。
``` properties
a1.sources.tailsource-1.type = exec
a1.sources.tailsource-1.shell = /bin/bash -c
a1.sources.tailsource-1.command = for i in /path/*.txt; do cat $i; done
```
#### JMS Source
JMS Source是一个可以从JMS的队列或者topic中读取消息的组件。按理说JMS
Source作为一个JMS的应用应该是能够与任意的JMS消息队列无缝衔接工作的，可事实上目前仅在ActiveMQ上做了测试。
JMS Source支持配置batch size、message
selector、user/pass和Event数据的转换器（converter）。
注意所使用的JMS队列的jar包需要在Flume实例的classpath中，建议放在专门的插件目录plugins.d下面，或者启动时候用-classpath指定，或者编辑flume-env.sh文件的FLUME_CLASSPATH来设置。
必需的参数已用 **粗体** 标明。
  属性                        默认值    解释
  --------------------------- --------- -------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                \--       与Source绑定的channel，多个用空格分开
  **type**                    \--       组件类型，这个是： `jms`
  **initialContextFactory**   \--       初始上下文工厂类，比如： `org.apache.activemq.jndi.ActiveMQInitialContextFactory`
  **connectionFactory**       \--       连接工厂应显示为的JNDI名称
  **providerURL**             \--       JMS 的连接URL
  **destinationName**         \--       目的地名称
  **destinationType**         \--       目的地类型， `queue` 或 `topic`
  messageSelector             \--       创建消费者时使用的消息选择器
  userName                    \--       连接JMS队列时的用户名
  passwordFile                \--       连接JMS队列时的密码文件，注意是文件名不是密码的明文
  batchSize                   100       消费JMS消息时单次发送的Event数量
  converter.type              DEFAULT   用来转换JMS消息为Event的转换器类，参考下面参数。
  converter.\*                \--       转换器相关的属性
  converter.charset           UTF-8     转换器把JMS的文本消息转换为byte arrays时候使用的编码，默认转换器的专属参数
  createDurableSubscription   false     是否创建持久化订阅。 持久化订阅只能在 *destinationType* = `topic` 时使用。 如果为 `true` ，则必须配置 *clientId* 和 *durableSubscriptionName*。
  clientId                    \--       连接创建后立即给JMS客户端设置标识符。持久化订阅必配参数。
  durableSubscriptionName     \--       用于标识持久订阅的名称。持久化订阅必配参数。
##### JMS消息转换器
JMS
source可以插件式配置转换器，尽管默认的转换器已经足够应付大多数场景了，默认的转换器可以把字节、文本、对象消息转换为Event。不管哪种类型消息中的属性都会作为headers被添加到Event中。
字节消息：JMS消息中的字节会被拷贝到Event的body中，注意转换器处理的单个消息大小不能超过2GB。
文本消息：JMS消息中的文本会被转为byte
array拷贝到Event的body中。默认的编码是UTF-8，可自行配置编码。
对象消息：对象消息会被写出到封装在ObjectOutputStream中的ByteArrayOutputStream里面，得到的array被复制到Event的body。
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = jms
a1.sources.r1.channels = c1
a1.sources.r1.initialContextFactory = org.apache.activemq.jndi.ActiveMQInitialContextFactory
a1.sources.r1.connectionFactory = GenericConnectionFactory
a1.sources.r1.providerURL = tcp://mqserver:61616
a1.sources.r1.destinationName = BUSINESS_DATA
a1.sources.r1.destinationType = QUEUE
```
##### JMS Source的SSL配置
::: hint
::: title
Hint
:::
JMS的SSL配置有些特殊，所以放在了一节单独说。
:::
JMS客户端实现通常支持通过JSSE（Java安全套接字扩展）定义的某些Java系统属性来配置SSL。为Flume的JVM指定这些系统属性后，JMS
Source（或更确切地说是JMS
Source使用的JMS客户端实现）可以通过SSL连接到JMS服务器（当然，只有在JMS服务器也已设置为使用SSL的情况下）。
理论上它应该能在任何一个JMS服务上正常使用，目前已经通过ActiveMQ，IBM
MQ和Oracle WebLogic的测试。
以下几段仅介绍Flume这边的SSL配置步骤。您可以在Flume
Wiki上找到有关不同JMS服务的服务端设置的更详细描述，以及完整的工作示例。
**SSL传输/服务端身份验证：**
如果JMS服务端使用自签名证书，或者说其证书是由不受信任的CA（例如公司自己的CA）签名的，则需要设置信任库（包含正确的证书）并将其传递给Flume。可以通过全局SSL参数来完成。有关全局SSL设置的更多详细信息，请参见
[SSL/TLS 支持](#ssltls-支持) 部分。
有些JMS服务端在使用SSL时需要SSL特定的JNDI Initial Context Factory
和（或）服务的URL来指定使用SSL（例如ActiveMQ使用 ssl:// 的URL前缀而不是
tcp:// ）。 在这种情况下，必须在agent配置文件中调整属性（
`initialContextFactory` 和（或） `providerURL` ）。
**客户端证书认证（双向SSL）：**
JMS
Source可以通过客户端证书认证而不是通常的用户名/密码登录（当使用SSL并且JMS服务器配置为接受这种认证时）通过JMS服务器进行认证。
需要再次通过全局SSL参数配置包含用于身份验证的Flume密钥的密钥库。有关全局SSL设置的更多详细信息，请参见
[SSL/TLS 支持](#ssltls-支持) 部分。
密钥库应仅包含一个密钥（如果存在多个密钥，则将使用第一个密钥）。密钥密码必须与密钥库密码相同。
如果进行客户端证书认证，则无需在Flume agent配置文件中为JMS Source配置
`userName` 、 `passwordFile` 属性。
**请注意：**
与其他组件不同，没有用于JMS
Source的组件级配置参数。也没有启用SSL的标志。 SSL设置由 JNDI/Provider
URL设置（其实还是根据JMS服务端设置）和是否存在truststore/keystore的配置。
#### Spooling Directory Source
这个Source允许你把要收集的文件放入磁盘上的某个指定目录。它会将监视这个目录中产生的新文件，并在新文件出现时从新文件中解析数据出来。数据解析逻辑是可配置的。
在新文件被完全读入Channel之后默认会重命名该文件以示完成（也可以配置成读完后立即删除、也可以配置trackerDir来跟踪已经收集过的文件）。
::: hint
::: title
Hint
:::
使用trackerDir跟踪收集的文件是通过1.9新增加了一个参数trackingPolicy，跟原有的参数组合后新增了一个使用的场景：标记已经被收集完成的文件，但是又不想对原文件做任何改动。
:::
与 [Exec Source](#exec-source) 不同，Spooling Directory
Source是可靠的，即使Flume重新启动或被kill，也不会丢失数据。同时作为这种可靠性的代价，指定目录中的被收集的文件必须是不可变的、唯一命名的。Flume会自动检测避免这种情况发生，如果发现问题，则会抛出异常：
1.  如果文件在写入完成后又被再次写入新内容，Flume将向其日志文件（这是指Flume自己logs目录下的日志文件）打印错误并停止处理。
2.  如果在以后重新使用以前的文件名，Flume将向其日志文件打印错误并停止处理。
为了避免上述问题，生成新文件的时候文件名加上时间戳是个不错的办法。
尽管有这个Source的可靠性保证，但是仍然存在这样的情况，某些下游故障发生时会出现重复Event的情况。这与其他Flume组件提供的保证是一致的。
  属性名                         默认值        解释
  ------------------------------ ------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                   \--           与Source绑定的channel，多个用空格分开
  **type**                       \--           组件类型，这个是： `spooldir`.
  **spoolDir**                   \--           Flume Source监控的文件夹目录，该目录下的文件会被Flume收集
  fileSuffix                     .COMPLETED    被Flume收集完成的文件被重命名的后缀。1.txt被Flume收集完成后会重命名为1.txt.COMPLETED
  deletePolicy                   never         是否删除已完成收集的文件，可选值: `never` 或 `immediate`
  fileHeader                     false         是否添加文件的绝对路径名（绝对路径+文件名）到header中。
  fileHeaderKey                  file          添加绝对路径名到header里面所使用的key（配合上面的fileHeader一起使用）
  basenameHeader                 false         是否添加文件名（只是文件名，不包括路径）到header 中
  basenameHeaderKey              basename      添加文件名到header里面所使用的key（配合上面的basenameHeader一起使用）
  includePattern                 \^.\*\$       指定会被收集的文件名正则表达式，它跟下面的ignorePattern不冲突，可以一起使用。如果一个文件名同时被这两个正则匹配到，则会被忽略，换句话说ignorePattern的优先级更高
  ignorePattern                  \^\$          指定要忽略的文件名称正则表达式。它可以跟 *includePattern* 一起使用，如果一个文件被 *ignorePattern* 和 *includePattern* 两个正则都匹配到，这个文件会被忽略。
  trackerDir                     .flumespool   用于存储与文件处理相关的元数据的目录。如果配置的是相对目录地址，它会在spoolDir中开始创建
  trackingPolicy                 rename        这个参数定义了如何跟踪记录文件的读取进度，可选值有：`rename` 、 `tracker_dir` ，这个参数只有在 *deletePolicy* 设置为 `never` 的时候才生效。 当设置为 `rename` ，文件处理完成后，将根据 *fileSuffix* 参数的配置将其重命名。 当设置为 `tracker_dir` ，文件处理完成后不会被重命名或其他任何改动，会在 *trackerDir* 配置的目录中创建一个新的空文件，而这个空文件的文件名就是原文件 + *fileSuffix* 参数配置的后缀
  consumeOrder                   oldest        设定收集目录内文件的顺序。默认是"先来先走"（也就是最早生成的文件最先被收集），可选值有： `oldest` 、 `youngest` 和 `random` 。当使用oldest和youngest这两种选项的时候，Flume会扫描整个文件夹进行对比排序，当文件夹里面有大量的文件的时候可能会运行缓慢。 当使用random时候，如果一直在产生新的文件，有一部分老文件可能会很久才会被收集
  pollDelay                      500           Flume监视目录内新文件产生的时间间隔，单位：毫秒
  recursiveDirectorySearch       false         是否收集子目录下的日志文件
  maxBackoff                     4000          等待写入channel的最长退避时间，如果channel已满实例启动时会自动设定一个很低的值，当遇到ChannelException异常时会自动以指数级增加这个超时时间，直到达到设定的这个最大值为止。
  batchSize                      100           每次批量传输到channel时的size大小
  inputCharset                   UTF-8         解析器读取文件时使用的编码（解析器会把所有文件当做文本读取）
  decodeErrorPolicy              `FAIL`        当从文件读取时遇到不可解析的字符时如何处理。 `FAIL` ：抛出异常，解析文件失败； `REPLACE` ：替换掉这些无法解析的字符，通常是用U+FFFD； `IGNORE` ：忽略无法解析的字符。
  deserializer deserializer.\*   `LINE`        指定一个把文件中的数据行解析成Event的解析器。默认是把每一行当做一个Event进行解析，所有解析器必须实现EventDeserializer.Builder接口 解析器的相关属性，根据解析器不同而不同
  bufferMaxLines                 \--           （已废弃）
  bufferMaxLineLength            5000          （已废弃）每行的最大长度。改用 *deserializer.maxLineLength* 代替
  selector.type selector.\*      replicating   可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*   \--           该source所使用的拦截器，多个用空格分开 拦截器相关的属性配置
配置范例：
``` properties
a1.channels = ch-1
a1.sources = src-1
a1.sources.src-1.type = spooldir
a1.sources.src-1.channels = ch-1
a1.sources.src-1.spoolDir = /var/log/apache/flumeSpool
a1.sources.src-1.fileHeader = true
```
##### Event反序列化器
下面是Flume内置的一些反序列化工具
###### LINE
这个反序列化器会把文本数据的每行解析成一个Event