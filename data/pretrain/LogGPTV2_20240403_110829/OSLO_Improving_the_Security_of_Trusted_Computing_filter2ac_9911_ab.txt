32:
33:
39:
3a:
3c:
3e:
40:
aa 55
28 00
...
57
56
53
33 ff
e8 00 00
00 00
5f
81 ef 33
00 00
47
3c 04
74 23
3c 01
74 0a
...
/* magic number */
/* entry point */
push
push
push
xor
call
pop
sub
inc
cmp
je
cmp
je
%edi
%esi
%ebx
%edi,%edi
0x32
%edi
$0x33,%edi
%edi
$0x4,%al
0x61
$0x1,%al
0x4c
Figure 2. Start of BIOS TPM driver
ing further into the disassembly we found out that this
instruction is part of the branch where the code distin-
guishes between MPTPMTransmit() (where al=4)
and other functions. By changing this comparision to
cmp $0x14,%al, which just requires to ﬂip a single
bit, we can avoid that the branch at 0x3c is taken and
any command is transmited to the TPM. An error code
is returned to the caller instead.
We now have to ﬂash the BIOS with this modiﬁed im-
age. As there is no hash of the BIOS image checked dur-
ing ﬂashing we use the normal BIOS update procedure.
After a reboot we have a TPM in its default power-on
state, without any PCR extensions.
The ability to easily exchange the CRTM violates the
TCG speciﬁcations. A result of this bug is that the trust
into these machines can not be brought back anymore
without an expensive certiﬁcation process.
2.4 Summary
We found weaknesses in bootloaders and the possi-
bility of a simple hardware attack against TPMs. Fur-
thermore by just ﬂipping a single bit we disabled the
CRTM and any PCR extension from the BIOS. These
cases show that current implementations do not meet all
three conditions of a trust chain.
In summary, we conclude that current BIOSes and
bootloaders are not able to start systems in a trusthwor-
thy manner. Moreover, TPMs are not protected against
resets.
T PM
3 OSLO
3 OS
3 Application
Figure 3. Trust chain with a Dynamic Root
of Trust for Measurement (DRTM)
3 Design and Implementation of OSLO
3.1 Using a DRTM
The main idea behind a secure system with a re-
settable TPM, an untrusted BIOS and a buggy boot-
loader, is to use a Dynamic Root of Trust for Masure-
ment (DRTM). A DRTM effectively removes the BIOS,
OptionROMs and Bootloaders from the trust chain (cf.
Figure 3).
With a DRTM, the CPU can reset the PCR 17 at any
time. This is provided through a new instruction that
atomically initializes the CPU, loads a piece of code
called Secure Loader (SL) into its cache, sends the code
to the TPM to extend the reseted PCR 17, and transfers
control to the SL.
A design based on a DRTM is not vulnerable to the
TPM reset attack because of a TPM property that can be
easily missed. A TPM can distinguish between a reset
and a DRTM due to CPU and chipset support. A reset
of the TPM sets all PCRs to default values, which is
“0” for the PCRs 0 - 16 and “-1” for PCR 17. Only a
DRTM, with its special bus cycles, will reset the PCR
17 to “0” and immediately extend it with the hash of
the SL. Therefore, an attacker is unable to reset PCR 17
to “0” and fake other platform conﬁgurations. Only by
executing the skinit instruction it is possible to put
the hash of an SL into PCR 17. An attacker can not hash
an SL and directly afterwards executing code outside of
it, since skinit jumps directly to the SL.
An SL is also not affected by the BIOS attack. With
the presence of a DRTM, the BIOS need not be trusted
anymore to protect its CRTM and hash itself into the
TPM. Nevertheless, a statement that claims the BIOS
can be fully untrusted is oversimpliﬁed: We still have
to trust the BIOS for providing the System Management
Mode (SMM) code as well as correct ACPI tables. As
both can be security critical, a hash of them should be
incorporated at boot time into a PCR by the operating
system.
3.2
Implementation
AMD provides a DRTM with its skinit instruc-
tion which was introduced with the AMD-V extension
[1]. On Intel CPUs, the Trusted Execution Technol-
232
16th USENIX Security Symposium
USENIX Association
+
+
+
ogy (TET) includes a DRTM with the senter instruc-
tion [9, 14]. AMD was generous to provide us with an
AMD-V platform nearly one year earlier than we were
able to buy an Intel TET platform.
Our implementation, called OSLO (Open Secure
LOader), is written in C with some small parts in as-
sembler. As OSLO is part of the Trusted Computing
Base (TCB) of all applications, we wanted to minimize
the binary and source code size. Furthermore, we had
to avoid any BIOS call, as otherwise the BIOS would be
part of the TCB again.
OSLO is started as kernel from a multi-boot compli-
ant [22] loader. It initializes the TPM to be able to ex-
tend a PCR with the hashes of further modules. After
that other processors are stopped. This is required be-
fore executing skinit and inhibits potential interfer-
ences during the secure startup procedure. For example,
malicious code running on a second CPU could modify
the instructions of the Secure Loader. The cache consis-
tency protocol would then propagate the changes to the
other processor.
Since the needed platform initialization is done,
OSLO can now switch to the “secure mode” by execut-
ing skinit. Before starting the ﬁrst module as a new
kernel, OSLO hashes every module that is preloaded
from the parent boot-loader.
We used chainloading via the multiboot speciﬁcation
to be ﬂexible with respect to the operating system OSLO
loads and who can load OSLO. Normally, this will be
a multiboot-compliant loader started by the BIOS such
as GRUB or SysLinux [31] but loading OSLO from the
Linux kexec environment [17] should also be possible.
As we could not rely on the BIOS for talking to the
TPM, we also implemented our own TPM driver for
v1.2 TPMs. As all of these TPMs should follow the
TPM interface speciﬁcation (TIS) only a single driver
was needed. Using this memory mapped interface is,
compared to the different interfaces needed to talk to the
v1.1 TPMs, rather simple. Therefore our TPM driver
consists of only 70 lines of code.
Currently two features of OSLO are still unimple-
mented:
• protection against direct memory access (DMA)
from malicious devices, and
• extension of the TPM event log for remote attesta-
tion.
The TPM event log is used to ease remote attesta-
tion. It can store hashes used as input for extend and
optionally a string describing them. The log provides a
breakdown of the PCR value into smaller known pieces.
It is itself not security critical and therefore not protected
by the bootloader or the operating system. An attacker
can only perform Denail of Service attacks by for ex-
ample overwriting the log. It is not possible to compro-
mise the security of a remote attestation by modifying
the log. The TPM event log makes it much easier for
a remote entity to check a reported hash values against
a list of good known values, for example if the order
of the extends is not ﬁxed. OSLO should extend the
event log to support applications relying on it for remote
attestation.
The source code of OSLO is available under the
terms of the GPL [24]. The source includes three addi-
tional tools that can be multi-boot loaded after OSLO:
Beirut to hash command lines, Pamplona to revert
the steps done by skinit for booting OSLO unaware
OSes, and Munich to start Linux from a multiboot en-
vironment.
3.3 Lessons Learned
We have learned two lessons while implementing
OSLO:
• It is hard to write secure initialization code, and
• a secure loader needs to have platform speciﬁc
knowledge.
An example of the ﬁrst lesson is our experience with
the initialization of the Device Exclusion Vector (DEV)
on AMD CPUs. A DEV is a bitvector in physical mem-
ory that consists of one bit per physical 4k-page. A bit
in this vector decides whether device based DMA trans-
fers to or from the corresponding page is allowed. DEVs
could be cached in the chipset for performance reasons.
We found out that the DEV initialization, if it is done in
the naive way, contains a race condition.
DEV initialization is normally done in two steps: En-
able the appropriate bits in the vector to protect itself
and then ﬂushing the chipset internal DEV cache. As
these two operations are not atomic, a malicious device
could change the DEV using DMA just before the vec-
tor is loaded into the DEV cache. An implementation
has to ﬁnd a workaround for this race. A secure way to
initialize DEV protection is, for example, to use an in-
termediate DEV in the 64k of the secure loader thereby
protecting the initialization of a ﬁnal DEV.
The second point is a little bit more complicated.
DEVs can only protect against DMA from a device. If
someone puts an operating system he wants to start with
OSLO into device memory it cannot be protected from
a malicious device. The OS is loaded and hashed by
OSLO as if it would reside in RAM, but if it is read the
USENIX Association
16th USENIX Security Symposium
233
Name
kernel
initrd
sum
size OSLO sha1
0.070 sec
0.245 sec
0.315 sec
1.2 MB
4.2 MB
5.4 MB
sha1sum
0.020 sec
0.064 sec
0.084 sec
Figure 4. Performance of hashing a Linux
kernel and Initrd
Name
BIOS HP
GRUB v0.97
OSLO v0.4.2
LOC binary in kb
1024
98
4.1
-
19600
1534
gzip in kb
491
55
2.9
Figure 5. Size of BIOS, GRUB and OSLO
second time, e.g., on ELF decoding or execution, it is re-
quested from the device memory again. Because we do
not trust a device to leave its memory unmodiﬁed, we
cannot be sure that the code that is executed is identical
to the hashed one. As a consequence we can only pro-
tect, hash and start modules that are located in RAM. A
secure loader therefore needs a reliable method to detect
the distinction between RAM and device memory.
4 Evaluation
One of our design goals for OSLO was a minimal
TCB size. Reducing the TCB is suitable for security sen-
sitive applications as it increases the understandability
and minimizes the number of possible bugs [30]. Fur-
thermore, the process of formal veriﬁcation will bene-
ﬁt from it. We achieved a minimal TCB by using two
techniques: reducing functionality and trading size with
performance penalties.
An example for the ﬁrst is that we do not rely on
external libc code but use functions with limited func-
tionality like out_string() instead of a full featured
printf() implementation.
We also implemented our own SHA-1 code trading
size for performance. This resulted in an SHA-1 imple-
mentation that compiles with gcc-3.4 to less than 512
bytes. This is only a quarter of the size compared with a
performance optimized version such as the one from the