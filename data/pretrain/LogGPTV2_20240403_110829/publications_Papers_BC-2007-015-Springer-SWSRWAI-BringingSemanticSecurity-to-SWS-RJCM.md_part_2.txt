### 7. Bringing Semantic Security to Semantic Web Services

#### 7.1 Malicious Code and Message Validity
Even after verifying that the parameters within a message are appropriate for the operation, malicious code may still be present. For example, a string passed to an operation that queries a SQL database can be used in a SQL injection attack. Simply verifying that a string is being passed is not sufficient. Best practices in programming include disallowing and checking for the presence of a ‘;’ in any parameter that will be passed to a SQL database, as this character allows for additional SQL commands to be executed.

Ensuring that a message is well-formed is another critical step in message validity. Since messages are in XML, it is possible for a message to contain a circular reference. Circular references can occur either maliciously or due to poor programming and can cause a system to encounter a run-out-of-memory error and shut down [Lilly, 2002]. When done maliciously, this is known as a denial-of-service attack. Proper parsing of a message can catch such nested loops.

#### 2.4 Authentication
Authentication can be described as verifying, to one's own level of certainty, that an entity is who they claim to be. In its simplest form, authentication could be a username and password combination. However, this is only possible if there is already a relationship between the requester and provider.

Due to the distributed nature of Web services, a requester may be previously unknown to the provider. When an unknown requester authenticates, they send information about themselves to the provider, known as credentials. It is up to the provider to verify these credentials. The degree of verification can vary based on the type of credential sent and the provider’s scrutiny level. Generally, the more sensitive the information being made available through a Web service, the higher the level of certainty required. This can often be achieved through a trusted authority, which issues certificates for authentication. The provider can evaluate the certificate and contact the trusted authority for verification.

In some cases, an intermediate service may contact the provider on behalf of the requester. If the intermediary has authenticated the requester and there is a trust relationship between the intermediary and the provider, the provider may accept the intermediary's word with a certain level of confidence. This can be facilitated using SAML or a certificate issued by the intermediary.

#### 3. Authorization
In organizations, highly sensitive data and information must be protected with access control systems. These systems define and control which users are authorized to access specific applications and data while prohibiting unauthorized access.

Modern organizations often have heterogeneous IT infrastructures, leading to a variety of systems with proprietary access control mechanisms, such as Unix, Windows, MAC, and mainframes. These systems use Access Control Lists (ACLs) to store information about resources and attributes, but different ACL implementations make it difficult to exchange and share information between them.

Authorization is the granting of rights, including access based on those rights, and typically follows authentication. It is often confused with authentication but is a separate issue. An access control implementation compares the rights of the requester with the policies or permissions needed to access the resource. If the requester's rights meet the control policy, access is granted; otherwise, it is denied. The two most common access control implementations are ACLs and Role-Based Access Control (RBAC). ISO 10181-3 specifies the access control information used in making these decisions.

##### 3.1 Access Control Lists (ACLs)
ACLs are commonly used in Unix environments for file and directory security. While they offer more granularity than previous *nix access control mechanisms, they can be cumbersome to implement and manage. The lack of relationships between access control entities (resources, permissions, groups, and users) makes management difficult. Each shared resource must have an ACL file specified, and the associated permissions are held within the file.

```plaintext
# file: documents
# owner: somebody
# group: other
user::rwx
user:jackson:rwx #effective:rwx
user:smith:rwx #effective:rwx
group:publ:rw- #effective:rw-
mask:rwx
other:---
```

Managing users within groups is relatively easy, but modifying ACLs for frequently changing resources, such as those in Web services, is challenging. Performance is also affected each time an ACL is accessed and inspected.

##### 3.2 Role-Based Access Control (RBAC)
In 2004, the National Institute of Standards and Technology (NIST) published a standard [NIST, 2004] defining the features of RBAC, based on commercial implementations. An RBAC system consists of a Reference Model and System and Administrative Functions. The Reference Model includes objects, operations, permissions, roles, and users. The System and Administrative Functions include system functionality, administrative operations, and reviews.

Permissions in RBAC express a privilege to access a resource, consisting of one or more objects and operations. Once created, permissions can be assigned to roles, which are job functions within an organization. Roles can then be assigned to users, who are actual people. Users can also include entire organizations, computers, or networks [NIST, 2004].

The HL7 committee developed a scenario-driven approach for creating permissions and roles. Scenarios include resources, actions taken on the resources, and who performs these actions in terms of job function.

Figure 5 illustrates the relationships between the elements of the RBAC Reference Model. Permissions are an Object, Operation set, and there are many-to-many assignments between Permissions and Roles, and Roles and Users. A Session Role determines if a user's role should be activated, based on constraints and active roles.

In our approach, we map RBAC elements to Web service elements to create an authorization function. RBAC Operations are mapped to the actions of Web service operations, and RBAC Objects are mapped to the resources and parameters of the operation.

##### 3.4 WS-Authorization
WS-Authorization is a proposed future specification for describing and managing authorization data and policies [IBM, Microsoft 2002]. It will specify a standard for describing authorization claims within a security token and how the endpoint should interpret these claims. This standard aims to improve interoperability and simplify policy management across different applications and geographically dispersed locations.