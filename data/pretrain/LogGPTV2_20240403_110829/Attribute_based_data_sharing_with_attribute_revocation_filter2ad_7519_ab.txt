Dec(CT, P K, SK) It takes as input a ciphertext CT , public
parameters P K, and the user secret key SK having the
same version with CT .
It outputs the message M if the
attribute set of SK satisﬁes the ciphertext access structure.
2In practice, this can be done eﬃciently using the technique
of lazy re-encryption[14] as we will discuss later.
Otherwise, it returns ⊥ with an overwhelming probability.
2.3 Security Deﬁnition
We ﬁrst present the requirements of correctness of our
proposed scheme by the following conditions:
(1) Dec(Enc(M, AS, P K), P K, SK) = M , if the attribute
set S of SK satisﬁes AS.
(2) Let CT ′ = ReEnc(Enc(M, AS, P K), rk, β), and SK ′ =
(ver + 1, S, D, ¯D′ = ReKey( ¯D, rk, θ)), where ver is the ver-
sion number of P K and rk. Dec(CT ′, P K ′, SK ′) = M , if
S′ = S\(β\θ) satisﬁes AS.
(3) Let CT ′′ = ReEnc(CT ′, rk′, β′), and SK ′′ = (ver +
2, S′, D, ReKey( ¯D′, rk′, θ′)).
If Dec(CT ′,P K ′,SK ′) = M
and S′′ = S′\(β′\θ′) satisﬁes AS, Dec(CT ′′,P K ′′,SK ′′) =
M .
(4) Inductively we get the statement for (CT (n), P K (n),
SK (n)) of any n.
CPA security of our proposed scheme under the selective-
structure model [9] can be deﬁned by the following game
between an adversary A and a challenger B.
CPA Security Game Let λ be a security parameter.
We say that our scheme is secure against chosen plaintext
attacks under selective-structure model if no PPT adversary
A can win the following game with non-negligible advantage.
Init The adversary A chooses the challenge access structure
AS∗, a version number ver∗, and ver∗ − 1 attribute sets
{γ(1), γ(2), · · · , γ(ver∗−1)}, and submits them to the chal-
lenger B.
Setup The challenger B ﬁst runs Setup(1λ) to obtain M K
and P K for version 1. He then runs ReKeyGen(γi, M K)
from i = 1 to ver∗−1. Finally, B gives (P K, {rk(i)}2≤i≤ver∗ )
to A, where rk(i) denotes the proxy re-key set for version i3.
Note that, A is able to derive P K for all the versions with
rk(i)’s.
Phase 1 The adversary A is allowed to issue polynomial
times (in λ) of queries on generation of secret keys of any
version within the range of [1, ver∗]. The only restrict is that
the attribute set that A submits for each secret key query
does not satisfy AS∗.
Challenge The adversary submits two equal length mes-
sages M0 and M1. The challenger ﬂips a random coin b,
and encrypts Mb by executing CT ∗ ← Enc(M, AS∗, P K),
where P K is the public parameter for version ver∗. The
challenge ciphertext CT ∗ is passed to the adversary.
Phase 2 Phase 1 is repeated.
Guess The adversary A outputs his guess b0 of b.
The adversary A is advantage in winning this CPA secu-
rity game is deﬁned as ADVCP A = P r[b0 = b] − 1
2 .
Note that, In Phase 1, the adversary is also permitted to
3In this paper, the superscript (i) means that the component
is of version i. When there is no confusion, we always remove
the superscript for brevity. For example, we may just use
rk or γ.
issue queries on re-encryption of ciphertexts and on update
of secret keys. In our security game, however, the adversary
has been given all the proxy re-key’s. This means that he
is able to answer the two queries by himself. For this sake,
we do not include the two corresponding oracles in Phase 1.
In fact, the adversary A has at least the same capability as
proxy servers who passively collect secret keys of unautho-
rized users. Since we assume proxy servers are honest, we do
not consider active attacks from proxy servers by colluding
with revoked authorized users.
Deﬁnition 1. (CPA SECURITY) We say that our scheme
is CPA secure if ADVCP A is negligible (in λ) for any poly-
nomial time adversary.
3. PRELIMINARIES
3.1 Bilinear Maps
Our design is based on some facts about groups with eﬃ-
ciently computable bilinear maps.
Let G0 and G1 be two multiplicative cyclic groups of prime
order p. Let g be a generator of G0. A bilinear map is an
injective function e : G0 × G0 → G1 with the following
properties:
1. Bilinearity: for all u, v ∈ G0 and a, b ∈ Zp, we have
e(ua, vb) = e(u, v)ab.
2. Non-degeneracy: e(g, g) 6= 1.
3. Computability: There is an eﬃcient algorithm to com-
pute e(u, v) for ∀ u, v ∈ G0.
3.2 Complexity Assumptions
Decisional Bilinear Diﬃe-Hellman (DBDH) Assumption Let
a, b, c, z ∈ Zp be chosen at random and g be a generator
of G0. The DBDH assumption [5] states that no proba-
bilistic polynomial-time algorithm B can distinguish the tu-
ples (A = ga, B = gb, C = gc, e(g, g)abc) from the tuple
(A = ga, B = gb, C = gc, e(g, g)z) with non-negligible ad-
vantage.
4. OUR CONSTRUCTION
4.1 Overview
As described previously, our scheme is to enhance CP-
ABE for achieving eﬃcient attribute revocation in terms of
loads placed on the authority and users. The basic idea
of our construction is to combine the proxy re-encryption
technique with CP-ABE. Instead of building a new CP-ABE
scheme from scratch, we intend to enhance an existing con-
struction by extending it with abilities of proxy update of
secret key and proxy re-encryption of ciphertext. Our con-
struction is partially based on but not limited to Cheung et
al’s construction of CP-ABE [9].
Attribute and Access Structure In our construction,
attributes are represented by their index values and the at-
tribute universe is U = {1, 2, · · · , n} for a certain natural
number n. Each attribute would have three occurrences:
positive, negative, and “don’t care”. We just consider access
structures consisting of a single AND gate, i.e., the gate
˜i, where I denotes the set of attributes of interest and
V˜i∈I
˜i is the literal of an attribute i, which can be positive (de-
noted by +i) or negative (denoted by −i). If an attribute
does not appear in the AND gate, its occurrence is “don’t
care”.
4.2 The Detailed Construction
As is deﬁned in section 2.2, there are 7 algorithms in our
construction: Setup, Enc, KeyGen, ReKeyGen, ReEnc,
ReKey, and Dec. Now we present the construction for each
of them as follows.
Setup(1λ) First choose a bilinear group G0 of prime order
p with a generator g, and a bilinear map e : G0 × G0 → G1.
Next, select random numbers y, t1, · · · , t3n ∈ Zp. Then, gen-
erate the public parameter as: P K = (e, g, Y, T1, · · · , T3n),
where Y = e(g, g)y and Ti = gti for 1 ≤ i ≤ 3n. Ti, Tn+i,
and T2n+i are for the three occurrences of i, i.e., positive,
negative, and “don’t care”, respectively. The system master
key M K is: M K = (y, t1, · · · , t3n). Finally, initialize ver-
sion number as ver = 1 and publish (ver, P K). (ver, M K)
is witheld by the authority.
Enc(M, AS, P K) Note that AS is a single AND gate of
˜i, and assume M ∈ G1. The algorithm
form AS = V˜i∈I
chooses a random number s ∈ Zp and outputs the cipher-
text CT as: CT = (ver, AS, ˜C, ˆC, {Ci}i∈U ), where ver is
current version number, ˜C = M Y s, ˆC = gs. For each i ∈ I,
Ci is T s
2n+i.
i
n+i if ˜i = −i. If i ∈ U \I, Ci = T s
if ˜i = +i; or T s
KeyGen(M K, S) First choose a random number ri ∈ Zp
for each i ∈ U . Let r = Pn
i=1 ri. User secret key is deﬁned
as SK = (ver, S, D, ¯D = {Di, Fi}i∈U ), where ver is current
version number, D = gy−r. For each i ∈ U , Fi = g
t2n+i ,
and Di = g
i /∈ S means negative occurrence of attribute i in S.
ri
tn+i otherwise. Note that
if i ∈ S, or Di = g
ri
ti
ri
ReKeyGen(γ, M K) Each item i ∈ γ is deﬁned to be within
the range of [1,2n]. Value less or equal to n means posi-
tive occurrence of the attribute, while value greater than n
represents the negative occurrence of attribute i − n. The
proxy re-key is computed as follows. For each i ∈ γ, ran-
domly choose t′
. For each
i ∈ {1, · · · , 2n}\γ, rki = 1. Output proxy re-key as rk =
(ver, {rki}1≤i≤2n) where ver is current version number. In-
crease the system version number ver by 1 when everything
is done.
i ∈ Zp and compute rki = t′
i
ti
ReEnc(CT, rk, β) Denote the access structure of CT as
˜i. Similar to γ, each item in β is also de-
AS = V˜i∈I
ﬁned to be within the range of [1,2n]. This algorithm di-
rectly outputs CT if CT and rk contain diﬀerent version
numbers. Otherwise, re-encrypt CT as follows. For each
i−n = (Ci−n)rki
i ∈ β, C ′
if n < i ≤ 2n. For each i ∈ U , C ′
i = Ci if i /∈ β and
i + n /∈ β, or i /∈ I. Ciphertext is output as follows:
CT ′ = (ver + 1, AS, ˜C, ˆC, {C ′
i}i∈U ), where ver is the ver-
sion number in CT .
if 1 ≤ i ≤ n, or C ′
i = C rki
i
ReKey( ¯D, rk, θ) Each item in θ is deﬁned to be within
the range of [1,2n]. This algorithm returns with ¯D immedi-
ately if ¯D and rk contain diﬀerent version numbers. Other-
wise, update ¯D as follows. For each i ∈ θ, D′
if
1 ≤ i ≤ n, or D′
if n < i ≤ 2n. For each
i ∈ U , D′
i = Di if i /∈ θ and i + n /∈ θ. It outputs as follows:
¯D′ = {D′
i, Fi}i∈U . ver in the corresponding user secret key
SK is increased by 1.
i−n = (Di−n)rk−1
rk−1
i = D
i
i
i
Dec(CT, P K, SK) If any two of CT , P K, and SK have
diﬀerent version numbers, return ⊥. Otherwise, continue to
decrypt as follows. Suppose CT = (ver, AS, ˜C, ˆC, {Ci}i∈U ),
SK = (ver, S, D, ¯D = {Di, Fi}i∈U ), and denote AS by
AS = V˜i∈I
˜i. For each ˜i ∈ I, if ˜i = +i and i ∈ S,
e(Ci, Di) = e(gtis, g
if ˜i = −i and i /∈ S,
ri
ti ) = e(g, g)ris.
e(Ci, Di) = e(gtn+is, g
ri
tn+i ) = e(g, g)ris.
For each ˜i /∈ I,
e(Ci, Di) = e(gt2n+is, g
ri
t2n+i ) = e(g, g)ris.
Ciphertext is decrypted as follows:
M = ¯C/(e( ˆC, ˆD) Qn
i=1 e(g, g)ris).
Its correctness can be veriﬁed easily.
4.3 CPA Security Proof
Now we prove the CPA security of our scheme. We show
the CPA security of our scheme by a theorem.
Theorem 1. If a PPT algorithm (the adversary A) wins
our CPA security game with non-negligible advantage ADVCP A,
we can use this algorithm to construct another PPT algo-
rithm B to solve the DBDH problem with advantage 1
2 ADVCP A.
Proof. In the DBDH game, the challenger chooses ran-
dom numbers a, b, c from Zp and ﬂips a fair coin µ. If µ = 0,
set z = abc; If µ = 1, set z as a random value in Zp. B is
given (A, B, C, Z)=(ga, gb, gc, e(g, g)z) and asked to output
µ. To answer this challenge, B then simulates our CPA se-
curity game as follows.
Init The adversary A chooses the challenge access struc-
˜i, a version number ver∗, and ver∗ − 1
ture AS∗ = V˜i∈I
attribute sets {γ(1), γ(2), · · · , γ(ver∗−1)}, and submits them
to the challenger.
Setup The challenger B ﬁrst generates the public key
of version 1 for A as follows. Y is deﬁned as e(A, B) =
e(g, g)ab. For each i ∈ U , B randomly chooses δi, ζi, and ηi
from Zp. It outputs public parameters as follows.
For ˜i ∈ I, Ti = gδi , Tn+i = Bζi , and T2n+i = Bηi , if
˜i = +i;
if ˜i = −i, Ti = Bδi , Tn+i = gζi , and T2n+i = Bηi ;
For ˜i /∈ I, Ti = Bδi , Tn+i = Bζi , and T2n+i = gηi .
Then, B generates ver∗ versions and answers ver∗ − 1
proxy re-key generation requests. Speciﬁcally, for each at-
tribute set γ(k), 1 ≤ k ≤ ver∗ − 1, generate a P K for that
version as follows:
for each element j ∈ γ(k), where 1 ≤ j ≤ 2n, randomly
choose rk(k)
j
T (k+1)
j
from Zp. if 1 ≤ j ≤ n,
= (T (k)
, T (k+1)
)rk
(k)
j
j
if n < j ≤ 2n,
n+j = T (k)
n+j, T (k+1)
2n+j = T (k)
2n+j,
j−n = T (k)
T (k+1)
j−n, T (k+1)
j
= (T (k)
j
(k)
j
)rk
, T (k+1)
n+j = T (k)
n+j,
For each element 1 ≤ j ≤ 2n, if j /∈ γ(k), set rk(k)
where superscripts (k) and (k+1) denote the version num-
ber of each attribute set, re-key, and public key parameter.
j = 1,
and calculate public key components in the same way as
above. Finally, B returns rk(k) = (k, rk(k)
2 , · · · , rk(k)
2n )
to A.
1 , rk(k)
Phase 1 Without loss of generality, we assume the ad-
versary A submits secret key query on a set S ⊆ U for
version k, 1 ≤ k ≤ ver∗. Since S does not satisfy the chal-
lenge access structure AS∗, we know there is a witness at-
tribute i ∈ I that either i ∈ S and ˜i = −i, or i /∈ S and
˜i = +i. Without loss of generality, we assume i /∈ S and
˜i = +i. B ﬁrst chooses a random number r′
j ∈ Zp for each
j ∈ U . Then, it sets rj = r′
j · b for every j 6= i (non-
witness attribute), and rj = ab + r′
j · b. Finally, it calculates
r = Σj∈U rj = ab + Σj∈U r′
j · b. Secret key components are
then returned as follows:
j = g−Σn
j ·b = gab−r.
j=1r′
j=1B−r′
D = Πn
Consider that for any j ∈ U ,
Πk
(k)
j = T
j
(3)
·rk
j
(2)
j
···rk
j
j = (T (1)
T (k)
T (k)
n+j = (T (1)
we denote R(k)
)rk
n+j)rk
j = Πk
(2)
n+j ·rk
(3)
n+j ···rk
(k)
n+j = (Tn+j)Πk
i=2rk(i)
j
and R(k)
n+j = Πk
i=2rk
i=2rk(i)
(i)
n+j ,
n+j. For