## n1token1
Name | Category | Points | Solves  
---|---|---|---  
n1token1 | CRYPTO | 833 / 1000 | 3  
[attachments](https://github.com/roadicing/ctf-writeups/tree/main/2021/n1ctf/n1token1/attachments).
###  题目描述
> None
###  题目描述
本题中采用了类似Rabin解密的运算过程来生成token，对于密文`c`、每个token `t_i`和每个随机数`X_i`，有：
    t_i^2 ≡ c^2 * X_i (MOD N)
其中每个`X_i`均由若干素数累乘而来，直到其比特数大于920，这里的素数来自前10000个素数中随机挑选920个素数所构成的集合。相较于1024比特的`c`和`t_i`来讲，这里`X_i`的比特数相对较小，因此我们可以将其看作一个HNP（Hidden
Number Problem）问题，通过LLL格基规约来计算出每个`X_i`。
将上述同余式`X_i`单独作为方程一侧并改写成等式，有：
    X_i = t_i^2 * c^(-2)  + k_i * N
我们可以列出920个这样的方程，但是这对于LLL算法来讲维数太大了，我们只需选取其中部分进行格基规约即可，以取前64个方程为例，将其用矩阵形式表示，有：
计算出前64个`X_i`的值后，我们可以任取其中一个计算出`c^2 MOD
N`的值，继而恢复整个`X_i`的序列。接下来，为了解密密文，我们需要分解`N`，根据二次同余的推论：
    x^2 ≡ y^2 (MOD N)    ->    x ≡ k * y (MOD N)
其中`k`满足：
    k^2 ≡ 1 (MOD N)
将同余式写成等式：
    (k - 1) * (k + 1) = g * N = g * p * q = (g_0 * p) * (g_1 * q)
因此当`k`不等于1或-1时，我们可以通过计算`gcd(k - 1, p)`和`gcd(k + 1, q)`来计算出`p`和`q`的值继而分解`N`。
接下来我们利用这一方法从我们已有的表达式中计算出这样的一个`k`来分解`N`，对于我们本题中的920组数据：
    t_0^2 ≡ c^2 * X_0 (MOD N)
    t_1^2 ≡ c^2 * X_1 (MOD N)
    ...
    t_919^2 ≡ c^2 * X_919 (MOD N)
如果我们从其中选取`w`个表达式相乘，当`w`为偶数时，那么同余式左边由`t_i^2`累乘得到的项可以看成`(t_0 * t_1 * ... *
t_w)^2`，同余式右边由`c^2`累乘得到的项可以看成`(c^w)^2`，当剩下的这`w`个`X_i`相乘得到的项也可以写为一个项的平方时，我们即构造出了一个上面所提到的分解`N`所需的表达式，由于这里`t_i`、`X_i`和`c^2`在模`N`下的值我们均已知，因此我们可以直接计算出`k`的值，继而按照上面的方法分解`N`，因此接下来我们只需从这920组数据当中找出符合条件的`w`组即可。
为了找到这样的`w`组数据，我们可以将每个`X_i`展开为若干素数`prime_i`乘积的形式，然后记录下每个`prime_i`的指数的奇偶性，这样一来可以将其看作一个GF(2)上的920维行向量，由于我们有920组数据，因此可以列出一个920
*
920的矩阵，这样一来寻找若干`X_i`相乘的结果其指数为偶数的问题就转化为了寻找若干`prime_i`其指数之和在GF(2)下为0的问题，因此我们直接对该矩阵求left
kernel
matrix即可，这样一来我们可以得到若干组`res`向量，其中每一个`res`向量中值为1的下标对应着我们的920组数据当中应当选取的`X_i`的下标，同时为了保证`w`为偶数，我们还需要选择`res`向量中1的个数为偶数的向量，在本题的数据中，我们一共得到了两组`res`向量，其中一组中1的个数为奇数、一组中1的个数为偶数，我们选择偶数这组即可，然后按照上述过程计算出`k`，既而即可分解`N`求出私钥`d`。
最后由于我们目前知道的仅为`c^2 MOD
N`的值，因此我们可以先对其做rabin解密，拿到4组可能的`c`的值，再依次对其做RSA解密从其中找到`FLAG`即可。
###  解题脚本
    #!/usr/bin/env python3
    import re
    from Crypto.Util.number import long_to_bytes, sieve_base
    def rabin_decrypt(ct, sk, N):
        p, q = sk
        inv_p = inverse_mod(p, q)
        inv_q = inverse_mod(q, p)
        m_p = power_mod(ct, (p + 1) // 4, p)
        m_q = power_mod(ct, (q + 1) // 4, q)
        a = (inv_p * p * m_q + inv_q * q * m_p) % N
        b = N - a
        c = (inv_p * p * m_q - inv_q * q * m_p) % N
        d = N - c
        return [a, b, c, d]
    f = open("output.txt", "r")
    N = Integer(re.findall(r"\d+", f.readline())[0])
    token_list = [Integer(re.findall(r"\d+", f.readline())[1]) for _ in range(920)]
    token_square_list = [power_mod(i, 2, N) for i in token_list]
    SIZE_0 = 64
    SIZE_1 = 920
    M = identity_matrix(ZZ, SIZE_0) * N
    M = M.stack(vector(ZZ, token_square_list[: SIZE_0]))
    res = M.LLL()
    X_list = []
    X_list.append(res[1][0])
    c_square = (token_square_list[0] * inverse_mod(X_list[0], N)) % N
    X_list = X_list + [Integer((token_square_list[i] * inverse_mod(c_square, N)) % N) for i in range(1, SIZE_1)]
    prime_list = []
    for prime in sieve_base:
        for X in X_list:
            if X % prime == 0:
                prime_list.append(prime)
                break
    A = list(matrix(ZZ, 920, 920))
    for i in range(len(X_list)):
        for prime, exponent in list(factor(X_list[i])): 
            A[i][prime_list.index(prime)] = exponent
    A = matrix(GF(2), A)
    res_list = A.left_kernel().basis()
    res = 0
    for i in range(len(res_list)):
        if list(res_list[i]).count(1) % 2 == 0:
            res = res_list[i]
            break
    cnt = list(res).count(1)
    token_square_pro = 1
    X_pro = 1
    for i in range(SIZE_1):
        if res[i] == 1:
            token_square_pro *= token_list[i]
            X_pro *= X_list[i]
    X_pro_sqrt = X_pro.nth_root(2, True)[0]
    k = (((token_square_pro * inverse_mod(X_pro_sqrt, N)) % N) * power_mod(c_square, -(cnt // 2), N)) % N
    p = gcd(k - 1, N)
    q = gcd(k + 1, N)
    assert is_prime(p) and is_prime(q)
    assert p * q == N
    ct_list = rabin_decrypt(c_square, (p, q), N)
    for ct in ct_list:
        d = inverse_mod(65537, (p - 1) * (q - 1))
        pt = power_mod(ct, d, N)
        FLAG = long_to_bytes(pt)
        if FLAG.startswith(b"n1ctf"):
            print(FLAG)
    # n1ctf{b9e7d419-0df8-438a-9120-efdf3ddf155f}
## n1token2
Name | Category | Points | Solves  
---|---|---|---  
n1token2 | CRYPTO | 833 / 1000 | 3  
[attachments](https://github.com/roadicing/ctf-writeups/tree/main/2021/n1ctf/n1token2/attachments).
###  题目描述
> None
###  题目描述
设本题中`y = f(x)`的表达式为：
    f(x) ≡ e + SECRET_0 * x + SECRET_1 * x^2 + ... + SECRET_15 * x^16 (MOD p)
我们已知`f(1)`至`f(250)`共计250个式子的值，但是在每一个式子中，`e`为`[1, 20, 113, 149,
219]`中的一个随机值，这里有些类似LWE（learning with
erros）的场景，由于引入了错误`e`的存在，因此我们不能直接在此基础上通过解方程来拿到`SECRET`的值。
虽然我们不能直接解方程，但是我们可以构造一个新的方程，不管每次e的值为多少，必有：
    (f(x) - e_0) * (f(x) - e_1) * (f(x) - e_2) * (f(x) - e_3) * (f(x) - e_4) ≡ 0 (MOD p)
即：
    A_i * f(x)^5 + B_i * f(x)^4 + C_i * f(x)^3 + D_i * f(x)^2 + E_i * f(x) + F_i ≡ 0 (MOD p)
如果此时我们变化一下，将`f(x)`中的系数`SECRET`看成未知数，将`f(x)`到`f(x)^5`看成5个独立的多项式，由于`f(x)`中包含16个单项，那么上式共引入`(16
+ 1) + (32 + 1) + (48 + 1) + (64 + 1) + (80 + 1) = 245`项，因此我们可以列出一个245 *
250的系数矩阵，该矩阵的每一行分别由`E_i`、`D_i`、`C_i`、`B_i`和`A_i`同这`(16 + 1)`、`(32 + 1)`、`(48 +
1)`、`(64 + 1)`和`(80 + 1)`项相乘构造而来，而该系数矩阵对应的同余方程右侧的值向量中的每个值即为`(-F_i) % p = p -F_i`，然后我们直接在模`p`下解该方程组，取结果的下标为1到16的项即为`SECRET`，继而恢复出`FLAG`。
###  解题脚本
    #!/usr/bin/env sage
    from Crypto.Util.number import long_to_bytes
    p = 251
    e = [1, 20, 113, 149, 219]
    y = list(bytes.fromhex("1d85d235d08dfa0f0593b1cfd41d3c98f2a542b2bf7a614c5d22ea787e326b4fd37cd6f68634d9bdf5f618605308d4bb16cb9b9190c0cb526e9b09533f19698b9be89b2e88ba00e80e44d6039d3c15555d780a6a2dbd14d8e57f1252334f16daef316ca692c02485684faee279d7bd926501c0872d01e62bc4d8baf55789b541358dfaa06d11528748534103a80c699a983c385e494a8612f4f124bd0b2747277182cec061c68197c5b105a22d9354be9e436c8393e3d2825e94f986a18bd6df9ab134168297c2e79eee5dc6ef15386b96b408b319f53b66c6e55b3b7d1a2a2930e9d34287b74799a59ab3f56a31ae3e9ffa73362e28f5751f79"))
    P. = PolynomialRing(GF(p))
    M = [[] for _ in range(p - 1)]
    b = []
    for x_v in range(p - 1):
        f = (x + e[0] - y[x_v]) * (x + e[1] - y[x_v]) * (x + e[2] - y[x_v]) * (x + e[3] - y[x_v]) * (x + e[4] - y[x_v])
        coeff = f.coefficients(sparse = False)
        M[x_v] += [(coeff[1] * power_mod(x_v + 1, i, p)) % p for i in range(16 + 1)]
        M[x_v] += [(coeff[2] * power_mod(x_v + 1, i, p)) % p for i in range(32 + 1)]
        M[x_v] += [(coeff[3] * power_mod(x_v + 1, i, p)) % p for i in range(48 + 1)]
        M[x_v] += [(coeff[4] * power_mod(x_v + 1, i, p)) % p for i in range(64 + 1)]
        M[x_v] += [(coeff[5] * power_mod(x_v + 1, i, p)) % p for i in range(80 + 1)]
        b.append(p - coeff[0])
    M = matrix(GF(p), M)
    b = vector(GF(p), b)
    res = M.solve_right(b)
    SECRET = b''.join(map(lambda x: bytes([x]), res[1: 16 + 1]))
    FLAG = "n1ctf{" + SECRET.hex() + "}"
    print(FLAG)
    # n1ctf{c5cc7404dc79e7a9d57ab19040a82f5a}