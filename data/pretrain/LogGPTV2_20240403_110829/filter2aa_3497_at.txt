tshark -i INTNAME -w udp_capture.pcap udp port 12345
Next, we’ll again convert all client-to-server packets to hex strings so we can process
Technet24
||||||||||||||||||||
||||||||||||||||||||
them in the Python client:
tshark -T fields -e data -r udp_capture.pcap --disable-protocol gvsp/
  "udp.dstport==12345" > udp_outbound.txt
One difference in extracting the data from the UDP capture is that Tshark
automatically tries to parse the traffic as the GVSP protocol. This results in the data field
not being available. Therefore, we need to disable the GVSP dissector to create the
correct output.
With a hex dump of the packets, we can finally create a very simple Python script to
send the UDP packets and capture the response. Copy Listing 8-4 into udp_client.py.
udp_client.py
import sys
import binascii
from socket import socket, AF_INET, SOCK_DGRAM
if len(sys.argv) ();
   var service = template.Create();
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
   service.Stop();
   WriteLine("Writing Outbound Packets to packets.bin");
➋ service.Packets.WriteToFile("packets.bin", "Out");
Listing 8-5: The proxy to capture chat traffic to a file
Listing 8-5 sets up a TCP listener on port 4444, forwards new connections to 127.0.0.1
port 12345, and captures the traffic. Notice that we still add our parsing code to the proxy
at ➊ to ensure that the captured data has the data portion of the packet, not the length or
checksum information. Also notice that at ➋, we write the packets to a file, which will
include all outbound and inbound packets. We’ll need to filter out a specific direction of
traffic later to send the capture over the network.
Run a single client connection through this proxy and exercise the client a good bit.
Then close the connection in the client and press ENTER in the console to exit the proxy
and write the packet data to packets.bin. (Keep a copy of this file; we’ll need it for our client
and server.)
Implementing a Simple Network Client
Next, we’ll use the captured traffic to implement a simple network client. To do so, we’ll
use the NetClientTemplate class to establish a new connection to the server and provide us with
an interface to read and write network packets. Copy Listing 8-6 into a file named
chapter8_client.csx.
chapter8
_client.csx
   #load "parser.csx"
Technet24
||||||||||||||||||||
||||||||||||||||||||
   using static System.Console;
   using static CANAPE.Cli.ConsoleUtils;
➊ if (args.Length ();
➌ template.InitialData = new byte[] { 0x42, 0x49, 0x4E, 0x58 };
➍ var packets = LogPacketCollection.ReadFromFile(args[0]);
➎ using(var adapter = template.Connect()) {
       WriteLine("Connected");
       // Write packets to adapter
    ➏ foreach(var packet in packets.GetPacketsForTag("Out")) {
           adapter.Write(packet.Frame);
       }
       // Set a 1000ms timeout on read so we disconnect
       adapter.ReadTimeout = 1000;
    ➐ DataFrame frame = adapter.Read();
       while(frame != null) {
           WritePacket(frame);
           frame = adapter.Read();
       }
   }
Listing 8-6: A simple client to replace SuperFunkyChat traffic
One new bit in this code is that each script gets a list of command line arguments in the
args variable ➊. By using command line arguments, we can specify different packet capture
files without having to modify the script.
The NetClientTemplate is configured ➋ similarly to our proxy, making connections to
127.0.0.1:12345 but with a few differences to support the client. For example, because we
parse the initial network traffic inside the Parser class, our capture file doesn’t contain the
initial magic value that the client sends to the server. We add an InitialData array to the
template with the magic bytes ➌ to correctly establish the connection.
We then read the packets from the file ➍ into a packet collection. When everything is
configured, we call Connect() to establish a new connection to the server ➎. The Connect()
method returns a Data Adapter that allows us to read and write parsed packets on the
connection. Any packet we read will also go through the Parser and remove the length and
checksum fields.
Next, we filter the loaded packets to only outbound and write them to the network
connection ➏. The Parser class again ensures that any data packets we write have the
appropriate headers attached before being sent to the server. Finally, we read out packets
and print them to the console until the connection is closed or the read times out ➐.
When you run this script, passing the path to the packets we captured earlier, it should
||||||||||||||||||||
||||||||||||||||||||
connect to the server and replay your session. For example, any message sent in the
original capture should be re-sent.
Of course, just replaying the original traffic isn’t necessarily that useful. It would be
more useful to modify traffic to test features of the protocol, and now that we have a very
simple client, we can modify the traffic by adding some code to our send loop. For
example, we might simply change our username in all packets to something else—say from
user1 to bobsmith—by replacing the inner code of the send loop (at ➏ in Listing 8-6) with the
code shown in Listing 8-7.
➊ string data = packet.Frame.ToDataString();
➋ data = data.Replace("\u0005user1", "\u0008bobsmith");
   adapter.Write(data.ToDataFrame());
Listing 8-7: A simple packet editor for the client
To edit the username, we first convert the packet into a format we can work with easily.
In this case, we convert it to a binary string using the ToDataString() method ➊, which results
in a C# string where each byte is converted directly to the same character value. Because
the strings in SuperFunkyChat are prefixed with their length, at ➋ we use the \uXXXX escape
sequence to replace the byte 5 with 8 for the new length of the username. You can replace
any nonprintable binary character in the same way, using the escape sequence for the byte
values.
When you rerun the client, all instances of user1 should be replaced with bobsmith. (Of
course, you can do far more complicated packet modification at this point, but I’ll leave
that for you to experiment with.)
Implementing a Simple Server
We’ve implemented a simple client, but security issues can occur in both the client and
server applications. So now we’ll implement a custom server similar to what we’ve done for
the client.
First, we’ll implement a small class to act as our server code. This class will be created
for every new connection. A Run() method in the class will get a Data Adapter object,
essentially the same as the one we used for the client. Copy Listing 8-8 into a file called
chat_server.csx.
chat_server.csx
   using CANAPE.Nodes;
   using CANAPE.DataAdapters;
   using CANAPE.Net.Templates;
➊ class ChatServerConfig {
       public LogPacketCollection Packets { get; private set; }
       public ChatServerConfig() {
           Packets = new LogPacketCollection();
       }
   }
Technet24
||||||||||||||||||||
||||||||||||||||||||
➋ class ChatServer : BaseDataEndpoint {
       public override void Run(IDataAdapter adapter, ChatServerConfig config) {
           Console.WriteLine("New Connection");
        ➌ DataFrame frame = adapter.Read();
           // Wait for the client to send us the first packet
           if (frame != null) {
               // Write all packets to client
            ➍ foreach(var packet in config.Packets) {
                   adapter.Write(packet.Frame);
               }
           }
           frame = adapter.Read();
       }
   }
Listing 8-8: A simple server class for chat protocol
The code at ➊ is a configuration class that simply contains a log packet collection. We
could have simplified the code by just specifying LogPacketCollection as the configuration
type, but doing so with a distinct class demonstrates how you might add your own
configuration more easily.
The code at ➋ defines the server class. It contains the Run() function, which takes a data
adapter and the server configuration, and allows us to read and write to the data adapter
after waiting for the client to send us a packet ➌. Once we’ve received a packet, we
immediately send our entire packet list to the client ➍.
Note that we don’t filter the packets at ➍, and we don’t specify that we’re using any
particular parser for the network traffic. In fact, this entire class is completely agnostic to
the SuperFunkyChat protocol. We configure much of the behavior for the network server
inside a template, as shown in Listing 8-9.
chapter8
_example
_server.csx
➊ #load "chat_server.csx"
   #load "parser.csx"
   using static System.Console;
   if (args.Length ();
   template.LocalPort = 12345;
   template.AddLayer();
➌ var packets = LogPacketCollection.ReadFromFile(args[0])
                                    .GetPacketsForTag("In");
   template.ServerFactoryConfig.Packets.AddRange(packets);
➍ var service = template.Create();
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
   service.Stop();
||||||||||||||||||||
||||||||||||||||||||
Listing 8-9: A simple example ChatServer
Listing 8-9 might look familiar because it’s very similar to the script we used for the
DNS server in Listing 2-11. We begin by loading in the chat_server.csx script to define our
ChatServer class ➊. Next, we create a server template at ➋ by specifying the type of the
server and the configuration type. Then we load the packets from the file passed on the
command line, filtering to capture only inbound packets and adding them to the packet
collection in the configuration ➌. Finally, we create a service and start it ➍, just as we do
proxies. The server is now listening for new connections on TCP port 12345.
Try the server with the ChatClient application; the captured traffic should be sent back
to the client. After all the data has been sent to the client, the server will automatically
close the connection. As long as you observe the message we re-sent, don’t worry if you see
an error in the ChatClient’s output. Of course, you can add functionality to the server,
such as modifying traffic or generating new packets.
Repurposing Existing Executable Code
In this section, we’ll explore various ways to repurpose existing binary executable code to
reduce the amount of work involved in implementing a protocol. Once you’ve determined
a protocol’s details by reverse engineering the executable (perhaps using some tips from
Chapter 6), you’ll quickly realize that if you can reuse the executable code, you’ll avoid
having to implement the protocol.
Ideally, you’ll have the source code you’ll need to implement a particular protocol,
either because it’s open source or the implementation is in a scripting language like
Python. If you do have the source code, you should be able to recompile or directly reuse
the code in your own application. However, when the code has been compiled into a
binary executable, your options can be more limited. We’ll look at each scenario now.
Managed language platforms, such as .NET and Java, are by far the easiest in which to
reuse existing executable code, because they have a well-defined metadata structure in
compiled code that allows a new application to be compiled against internal classes and
methods. In contrast, in many unmanaged platforms, such as C/C++, the compiler will
make no guarantees that any component inside a binary executable can be easily called
externally.
Well-defined metadata also supports reflection, which is the ability of an application to
support late binding of executable code to inspect data at runtime and to execute arbitrary
methods. Although you can easily decompile many managed languages, it may not always
be convenient to do so, especially when dealing with obfuscated applications. This is
because the obfuscation can prevent reliable decompilation to usable source code.
Of course, the parts of the executable code you’ll need to execute will depend on the
application you’re analyzing. In the sections that follow, I’ll detail some coding patterns
Technet24
||||||||||||||||||||
||||||||||||||||||||
and techniques to use to call the appropriate parts of the code in .NET and Java
applications, the platforms you’re most likely to encounter.
Repurposing Code in .NET Applications
As discussed in Chapter 6, .NET applications are made up of one or more assemblies,
which can be either an executable (with an .exe extension) or a library (.dll). When it comes
to repurposing existing code, the form of the assembly doesn’t matter because we can call
methods in both equally.
Whether we can just compile our code against the assembly’s code will depend on the
visibility of the types we’re trying to use. The .NET platform supports different visibility
scopes for types and members. The three most important forms of visibility scope are
public, private, and internal. Public types or members are available to all callers outside the
assembly. Private types or members are limited in scope to the current type (for example,
you can have a private class inside a public class). Internal visibility scopes the types or
members to only callers inside the same assembly, where they act as if they were public
(although an external call cannot compile against them). For example, consider the C#
code in Listing 8-10.
➊ public class PublicClass
   {
     private class PrivateClass
     {
    ➋ public PrivatePublicMethod() {}
     }
     internal class InternalClass
     {
    ➌ public void InternalPublicMethod() {}
     }
     private void PrivateMethod() {}
     internal void InternalMethod() {}
   ➍ public void PublicMethod() {}
   }
Listing 8-10: Examples of .NET visibility scopes
Listing 8-10 defines a total of three classes: one public, one private, and one internal.
When you compile against the assembly containing these types, only PublicClass can be
directly accessed along with the class’s PublicMethod() (indicated by ➊ and ➍); attempting to
access any other type or member will generate an error in the compiler. But notice at ➋
and ➌ that public members are defined. Can’t we also access those members?
Unfortunately, no, because these members are contained inside the scope of a PrivateClass
or InternalClass. The class’s scope takes precedence over the members’ visibility.
Once you’ve determined whether all the types and members you want to use are public,
you can add a reference to the assembly when compiling. If you’re using an IDE, you
should find a method that allows you to add this reference to your project. But if you’re
compiling on the command line using Mono or the Windows .NET framework, you’ll
||||||||||||||||||||
||||||||||||||||||||
need to specify the -reference: option to the appropriate C# compiler, CSC or
MCS.
Using the Reflection APIs
If all the types and members are not public, you’ll need to use the .NET framework’s
Reflection APIs. You’ll find most of these in the System.Reflection namespace, except for the
Type class, which is under the System namespace. Table 8-1 lists the most important classes
with respect to reflection functionality.
Table 8-1: .NET Reflection Types
Class name
Description