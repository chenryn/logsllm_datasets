# 前言
这周啥也没干，就去看了看开发，为以后的代码审计铺垫铺垫。毕竟开发过，审计代码的时候才不会憨憨傻傻的。之前审计过两个cms，当时真的是，审的人都快麻了，害。果然还是要有写开发的功底，再去审计才不会那么吃力。接下来这四个方面，是我从那个开发的小系统中，简单提取的四个方面，分别涉及sql注入，CSRF，XSS等等。（开发能力欠缺，各位师傅将就看）
## sql注入
sql注入嘛，一个成型的网站，基本上都是跑不了使用MYSQL的，所以sql注入的存在极为广泛，waf一个挡不住，就可能存在sql注入。  
index.php
        index
                查询
sql.php
这种是查询的注入，但是一般的这里都会有waf，所以我们可以尝试别的情况下注入，比如`insert/delete`
这种就可以报错注入或者盲注了
## 文件上传
index.php
        index
其中`enctype="multipart/form-data"` 在文件上传的时候是不可或缺的。  
upload.php
    '.$newpath; 
        }
    }
    ?>
这就是最简单的文件上传了，没有任何过滤，传入别的类型的文件还会报错。  
从CTF来讲，一般正经的只靠文件上传的题目已经很少了。所以拓展来将，最近遇到的比较有新意的题目就是网刃杯的那道文件上传。  
当时题目提示的是sql，我懵了一下，文件上传还能和sql注入扯到一起，这不瞎搞。后来的一周，我看了点开发的东西，我发现，一般后台有文件上传的功能的时候，一般都会把文件名写入到数据库中。到这里我茅塞顿开，许多的安全问题都是源自开发。  
index.php
        index
config.php
upload.php
    并且图片存储的位置是".$newpath;
        }
    }
    ?>
**ps:写sql语句的时候一定要带单引号........我麻了**  
这里假装我对上传的文件进行了过滤，已经无法通过文件上传shell，但是这里我们通过文件名，文件大小，文件路径都可以进行SQL注入。//这里我写了那么明显，就没有注入。
接下来就是写waf了
    //前端waf
    //由于js太菜，抄的upload-labs的
    但是前端过滤也没啥用
后端过滤的话
     $value1) {
            //echo $value1;
            foreach ($white as $key => $value2) {
                //echo $value2;
                //echo $file_name;
                if ($type==$value1) {
                    if ($file_name==$value2) {
                        if (move_uploaded_file($path, $newpath)) {
                            echo "上传成功";
                        }
                    }
                }
            }
        }
    }   
    ?>
说实话，写成这样我觉得就没有办法绕过了
白名单yyds
## 后台权限
在后台开发过程中，还是需要权限的把控，不然人家随便访问你的后台，开玩笑？？
后台的每个页面必需要这个段语句。不然直接都能非用户访问了  
而且前后台sesson内的信息不能相同，不然就会，前台依旧能访问后台。  
这里我简单的写了一个后台的登录功能  
index.php
        index
                    username
                password
check.php
admin.php
到这里，除了sql注入之外，其实显现了另外的一种漏洞，CSRF
这里我换了个浏览器登录，却不会跳转到index.php很怪
可以看到，替换掉cookie就能达到登陆成功的效果
## 用户评论
index.php
        index
                评论
comment.php
show.php
经典XSS
# 总结
经此开发，我算是明白了，许多安全都是在开发的时候都存在的。开发的时候，不紧要实现一些需求功能，还要防止出现安全问题。