These are the encrypted indexes after 7 consecutive insertions
1 − 7. Each level i contains 3 searchable encrypted indexes
(OLDEST, OLDER, OLD) and one index (NEW) that is used
for merging and rebuilding into a single index the OLDEST
and OLDER indexes of the previous level i − 1. The update
algorithm passes through all levels and moves one element
using OMAPi from level i − 1 to level i. Searching for
a keyword w requires to search all the OLDEST, OLDER
and OLD encrypted indexes and return to the client all the
individual search results.
Moreover, with PiBas the client has to store one key for each
instance and this requires from the client to store O(log N )
keys. In order to reduce the local storage to O(1), we can
generate the key for each instance pseudorandomly from
a single master secret key using a PRF. Instantiated with
PiBas, SDa requires a single roundtrip for retrieving the result
DB(w). Updates require one rountrip for retrieving the old
indexes to be merged, and one more message from the client
to the server (possibly “piggy-backed” to the next operation)
for writing the new EDBj.
With SDa it is easy to clean-up deleted entries. During
updates, before creating the merged EDBj the client identiﬁes
all the entries in EDBi, for i  0, the client looks up OMdel. If
he receives ⊥ he proceeds normally, else he writes a dummy
value to NEWi instead.
IV. EFFICIENT DSE WITH QUASI-OPTIMAL SEARCH
In this section, we present our third construction QOS that
achieves quasi-optimal search time, according to Deﬁnition 4.
The only existing backward-private constructions that achieve
this are Orion and Horus from [29]. Both these schemes
replace each of the nw accesses necessary for retrieving the
result DB(w) with an oblivious map/oblivious RAM access.
Contrary to this, QOS requires a single read and write to
an oblivious map during search (independently of nw); the
remaining computation for retrieving the result is executed at
the server by traversing a tree data structure that serves as a
“pivot” to identify deleted entries.
The basic idea behind QOS is described in Figure 5.
Consider a full binary tree with N leafs, where N is an upper
bound on the total number of insertions in the DSE (N can
also serve as a trivial bound for the number of deletions). The
function label(v) returns a value in [1, 2N − 1] which is the
result of the “natural” labeling of tree nodes as follows: The
N leafs are labeled from leftmost to rightmost with 1, . . . , N.
The remaining nodes are labeled in an increasing order per