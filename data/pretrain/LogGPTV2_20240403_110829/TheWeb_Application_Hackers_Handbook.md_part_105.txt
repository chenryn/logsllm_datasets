every distinct client request that submits parameters that the server-side
application processes. Relevant parameters include items within the URL
query string, parameters in the request body, and HTTP cookies. Also
include any other items of user input that have been observed to have an
effect on the application’s behavior, such as the Referer or User-Agent
headers.
7.1.2 To fuzz the parameters, you can use your own scripts or a ready-made
fuzzing tool. For example, to use Burp Intruder, load each request in
turn into the tool. An easy way to do this is to intercept a request in Burp
Proxy and select the Send to Intruder action, or right-click an item in the
Burp Proxy history and select this option. Using this option confi gures
Burp Intruder with the contents of the request, along with the correct
target host and port. It also automatically marks the values of all request
parameters as payload positions, ready for fuzzing.
7.1.3 Using the payloads tab, confi gure a suitable set of attack payloads to
probe for vulnerabilities within the application. You can enter payloads
manually, load them from a fi le, or select one of the preset payload lists.
Fuzzing every request parameter within the application typically entails
issuing a large number of requests and reviewing the results for anomalies.
If your set of attack strings is too large, this can be counterproductive
cc2211..iinndddd 882244 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 825
Chapter 21 n A Web Application Hacker’s Methodology 825
and generate a prohibitively large amount of output for you to review.
Hence, a sensible approach is to target a range of common vulnerabili-
ties that can often be easily detected in anomalous responses to specifi c
crafted inputs and that often manifest themselves anywhere within
the application rather than within specifi c types of functionality. Here
is a suitable set of payloads that you can use to test for some common
categories of vulnerabilities:
SQL Injection
‘
‘--
‘; waitfor delay ‘0:30:0’--
1; waitfor delay ‘0:30:0’--
XSS and Header Injection
xsstest
“>
OS Command Injection
|| ping -i 30 127.0.0.1 ; x || ping -n 30 127.0.0.1 &
| ping –i 30 127.0.0.1 |
| ping –n 30 127.0.0.1 |
& ping –i 30 127.0.0.1 &
& ping –n 30 127.0.0.1 &
; ping 127.0.0.1 ;
%0a ping –i 30 127.0.0.1 %0a
` ping 127.0.0.1 `
Path Traversal
../../../../../../../../../../etc/passwd
../../../../../../../../../../boot.ini
..\..\..\..\..\..\..\..\..\..\etc\passwd
..\..\..\..\..\..\..\..\..\..\boot.ini
Script Injection
;echo 111111
echo 111111
response.write 111111
:response.write 111111
File Inclusion
http:///
http:///
7.1.4 All the preceding payloads are shown in their literal form. The characters
?,;,&,+,=, and space need to be URL-encoded because they have special
cc2211..iinndddd 882255 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 826
826 Chapter 21 n A Web Application Hacker’s Methodology
meaning within HTTP requests. By default, Burp Intruder performs the
necessary encoding of these characters, so ensure that this option has not
been disabled. (To restore all options to their defaults following earlier
customization, select Burp ‚ Restore Defaults.)
7.1.5 In the Grep function of Burp Intruder, confi gure a suitable set of strings
to fl ag some common error messages within responses. For example:
error
exception
illegal
invalid
fail
stack
access
directory
file
not found
varchar
ODBC
SQL
SELECT
111111
Note that the string 111111 is included to test for successful script injec-
tion attacks. The payloads in step 7.1.3 involve writing this value into
the server’s response.
7.1.6 Also select the Payload Grep option to fl ag responses that contain the
payload itself, indicating a potential XSS or header injection vulnerability.
7.1.7 Set up a web server or netcat listener on the host you specifi ed in the
fi rst fi le inclusion payload. This helps you monitor for connection
attempts received from the server resulting from a successful remote
fi le inclusion attack.
7.1.8 Launch the attack. When it has completed, review the results for anoma-
lous responses indicating the presence of vulnerabilities. Check for
divergences in the HTTP status code, the response length, the response
time, the appearance of your confi gured expressions, and the appearance
of the payload itself. You can click each column heading in the results
table to sort the results by the values in that column (and Shift-click
to reverse-sort the results). This enables you to quickly identify any
anomalies that stand out from the other results.
7.1.9 For each potential vulnerability indicated by the results of your fuzz test-
ing, refer to the following sections of this methodology. They describe
the detailed steps you should take in relation to each category of problem
to verify the existence of a vulnerability and successfully exploit it.
cc2211..iinndddd 882266 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 827
Chapter 21 n A Web Application Hacker’s Methodology 827
7.1.10 After you have confi gured Burp Intruder to perform a fuzz test of a single
request, you can quickly repeat the same test on other requests within
the application. Simply select each target request within Burp Proxy and
choose the Send to Intruder option. Then immediately launch the attack
within Intruder using the existing attack confi guration. In this way, you
can launch a large number of tests simultaneously in separate windows
and manually review the results as each test completes its work.
7.1.11 If your mapping exercises identifi ed any out-of-band input channels
whereby user-controllable input can be introduced into the application’s
processing, you should perform a similar fuzzing exercise on these input
channels. Submit various crafted data designed to trigger common vul-
nerabilities when processed within the web application. Depending on
the nature of the input channel, you may need to create a custom script
or other harness for this purpose.
7.1.12 In addition to your own fuzzing of application requests, if you have access
to an automated web application vulnerability scanner, you should run
it against the target application to provide a basis for comparison with
your own fi ndings.
7.2 Test for SQL Injection
7.2.1 If the SQL attack strings listed in step 7.1.3 result in any anomalous
responses, probe the application’s handling of the relevant parameter
manually to determine whether a SQL injection vulnerability is present.
7.2.2 If any database error messages were returned, investigate their meaning.
Use the section “SQL Syntax and Error Reference” in Chapter 9 to help
interpret error messages on some common database platforms.
7.2.3 If submitting a single quotation mark in the parameter causes an error
or other anomalous behavior, submit two single quotation marks. If this
input causes the error or anomalous behavior to disappear, the applica-
tion is probably vulnerable to SQL injection.
7.2.4 Try using common SQL string concatenator functions to construct a string
that is equivalent to some benign input. If this causes the same response
as the original benign input, the application is probably vulnerable. For
example, if the original input is the expression FOO, you can perform
this test using the following items (in the third example, note the space
between the two quotes):
‘||’FOO
‘+’FOO
‘ ‘FOO
cc2211..iinndddd 882277 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 828
828 Chapter 21 n A Web Application Hacker’s Methodology
As always, be sure to URL-encode characters such as + and space that
have special meaning within HTTP requests.
7.2.5 If the original input is numeric, try using a mathematical expression that
is equivalent to the original value. For example, if the original value was
2, try submitting 1+1 or 3–1. If the application responds in the same way,
it may be vulnerable, particularly if the value of the numeric expression
has a systematic effect on the application’s behavior.
7.2.6 If the preceding test is successful, you can gain further assurance that
a SQL injection vulnerability is involved by using SQL-specifi c math-
ematical expressions to construct a particular value. If the application’s
logic can be systematically manipulated in this way, it is almost certainly
vulnerable to SQL injection. For example, both of the following items
are equivalent to the number 2:
67-ASCII(‘A’)
51-ASCII(1)
7.2.7 If either of the fuzz test cases using the waitfor command resulted
in an abnormal time delay before the application responded, this is a
strong indicator that the database type is MS-SQL and the application
is vulnerable to SQL injection. Repeat the test manually, specifying dif-
ferent values in the waitfor parameter, and determine whether the time
taken to respond varies systematically with this value. Note that your
attack payload may be inserted into more than one SQL query, so the
time delay observed may be a fi xed multiple of the value specifi ed.
7.2.8 If the application is vulnerable to SQL injection, consider what kinds
of attacks are feasible and likely to help you achieve your objectives.
Refer to Chapter 9 for the detailed steps needed to carry out any of the
following attacks:
n Modify the conditions within a WHERE clause to change the applica-
tion’s logic (for example, by injecting or 1=1-- to bypass a login).
n Use the UNION operator to inject an arbitrary SELECT query and combine
the results with those of the application’s original query.
n Fingerprint the database type using database-specific SQL syntax.
n If the database type is MS-SQL and the application returns ODBC error
messages in its responses, leverage these to enumerate the database
structure and retrieve arbitrary data.
n If you cannot find a way to directly retrieve the results of an arbitrary
injected query, use the following advanced techniques to extract data:
n Retrieve string data in numeric form, one byte at a time.
n Use an out-of-band channel.
cc2211..iinndddd 882288 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 829
Chapter 21 n A Web Application Hacker’s Methodology 829
n If you can cause different application responses based on a single
arbitrary condition, use Absinthe to extract arbitrary data one bit
at a time.
n If you can trigger time delays based on a single arbitrary condition,
exploit these to retrieve data one bit at a time.
n If the application is blocking certain characters or expressions that
you require to perform a particular attack, try the various bypass
techniques described in Chapter 9 to circumvent the input filter.
n If possible, escalate the attack against the database and the underly-
ing server by leveraging any vulnerabilities or powerful functions
within the database.
7.3 Test for XSS and Other Response Injection
7.3.1 Identify Refl ected Request Parameters
7.3.1.1 Sort the results of your fuzz testing by clicking the Payload Grep column,
and identify any matches corresponding to the XSS payloads listed in
step 7.1.3. These are cases where the XSS test strings were returned
unmodifi ed within the application’s responses.
7.3.1.2 For each of these cases, review the application’s response to fi nd the loca-
tion of the supplied input. If this appears within the response body, test
for XSS vulnerabilities. If the input appears within any HTTP header, test
for header injection vulnerabilities. If it is used in the Location header
of a 302 response, or if it is used to specify a redirect in some other way,
test for redirection vulnerabilities. Note that the same input might be
copied into multiple locations within the response, and that more than
one type of refl ected vulnerability might be present.
7.3.2 Test for Refl ected XSS
7.3.2.1 For each place within the response body where the value of the request
parameter appears, review the surrounding HTML to identify possible
ways of crafting your input to cause execution of arbitrary JavaScript.
For example, you can inject  tags, inject into an existing script,
or place a crafted value into a tag attribute.
7.3.2.2 Use the different methods of beating signature-based fi lters described in
Chapter 12 as a reference for the different ways in which crafted input
can be used to cause execution of JavaScript.
7.3.2.3 Try submitting various possible exploits to the application, and monitor
its responses to determine whether any fi ltering or sanitization of input
cc2211..iinndddd 882299 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 830
830 Chapter 21 n A Web Application Hacker’s Methodology
is being performed. If your attack string is returned unmodifi ed, use a
browser to verify conclusively that you have succeeded in executing
arbitrary JavaScript (for example, by generating an alert dialog).
7.3.2.4 If you fi nd that the application is blocking input containing certain
characters or expressions you need to use, or is HTML-encoding certain
characters, try the various fi lter bypasses described in Chapter 12.
7.3.2.5 If you fi nd an XSS vulnerability in a POST request, this can still be
exploited via a malicious website that contains a form with the required
parameters and a script to automatically submit the form. Nevertheless,
a wider range of attack delivery mechanisms is available if the exploit
can be delivered via a GET request. Try submitting the same parameters
in a GET request, and see if the attack still succeeds. You can use the
Change Request Method action in Burp Proxy to convert the request
for you.
7.3.3 Test for HTTP Header Injection
7.3.3.1 For each place within the response headers where the value of the request
parameter appears, verify whether the application accepts data contain-
ing URL-encoded carriage-return (%0d) and line-feed (%0a) characters
and whether these are returned unsanitized in its response. (Note that
you are looking for the actual newline characters themselves to appear
in the server’s response, not their URL-encoded equivalents.)
7.3.3.2 If a new line appears in the server’s response headers when you sup-
ply crafted input, the application is vulnerable to HTTP header injec-
tion. This can be leveraged to perform various attacks, as described in
Chapter 13.
7.3.3.3 If you fi nd that only one of the two newline characters gets returned in
the server’s responses, it may still be possible to craft a working exploit,
depending on the context and the target user’s browser.
7.3.3.4 If you fi nd that the application blocks input containing newline charac-
ters, or sanitizes those characters in its response, try the following items
of input to test the fi lter’s effectiveness:
foo%00%0d%0abar
foo%250d%250abar
foo%%0d0d%%0a0abar
7.3.4 Test for Open Redirection
7.3.4.1 If the refl ected input is used to specify the target of a redirect of some
kind, test whether it is possible to supply crafted input that results in
cc2211..iinndddd 883300 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 831
Chapter 21 n A Web Application Hacker’s Methodology 831
an arbitrary redirect to an external website. If so, this behavior can be
exploited to lend credibility to a phishing-style attack.
7.3.4.2 If the application ordinarily transmits an absolute URL as the parameter’s
value, modify the domain name within the URL, and test whether the
application redirects you to the different domain.
7.3.4.3 If the parameter normally contains a relative URL, modify this into an
absolute URL for a different domain, and test whether the application
redirects you to this domain.
7.3.4.4 If the application carries out some validation on the parameter before
performing the redirect, in an effort to prevent external redirection,
this is often vulnerable to bypasses. Try the various attacks described
in Chapter 13 to test the robustness of the fi lters.
7.3.5 Test for Stored Attacks
7.3.5.1 If the application stores items of user-supplied input and later displays these
on-screen, after you have fuzzed the entire application you may observe
some of your attack strings being returned in responses to requests that did
not themselves contain those strings. Note any instances where this occurs,
and identify the original entry point for the data that is being stored.
7.3.5.2 In some cases, user-supplied data is stored successfully only if you com-
plete a multistage process, which does not occur in basic fuzz testing. If
your application mapping exercises identifi ed any functionality of this
kind, manually walk through the relevant process and test the stored
data for XSS vulnerabilities.
7.3.5.3 If you have suffi cient access to test it, review closely any administrative
functionality in which data originating from low-privileged users is
ultimately rendered on-screen in the session of more privileged users.