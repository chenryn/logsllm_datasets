    * [How to use blueprints](authentik.md#use-blueprints)
* Correction: [Configure the invitation flow with terraform.](authentik.md#configure-the-invitation-flow)
* New: [Hide and application from a user.](authentik.md#hide-and-application-from-a-user)
    Application access can be configured using (Policy) Bindings. Click on an application in the applications list, and select the Policy / Group / User Bindings tab. There you can bind users/groups/policies to grant them access. When nothing is bound, everyone has access. You can use this to grant access to one or multiple users/groups, or dynamically give access using policies.
    With terraform you can use `authentik_policy_binding`, for example:
    ```terraform
    resource "authentik_policy_binding" "admin" {
      target = authentik_application.gitea.uuid
      group  = authentik_group.admins.id
      order  = 0
    }
    ```
* New: [Configure password recovery.](authentik.md#configure-password-recovery)
    Password recovery is not set by default, in the article you can find the
    terraform resources needed for it to work.
# Operating Systems
## Linux
### [Linux Snippets](linux_snippets.md)
* New: [Use a `pass` password in a Makefile.](linux_snippets.md#use-a-pass-password-in-a-makefile)
    ```makefile
    TOKEN ?= $(shell bash -c '/usr/bin/pass show path/to/token')
    diff:
    	@AUTHENTIK_TOKEN=$(TOKEN) terraform plan
    ```
* New: [Install a new font.](linux_snippets.md#install-a-new-font)
    Install a font manually by downloading the appropriate `.ttf` or `otf` files and placing them into `/usr/local/share/fonts` (system-wide), `~/.local/share/fonts` (user-specific) or `~/.fonts` (user-specific). These files should have the permission 644 (`-rw-r--r--`), otherwise they may not be usable.
* New: [Get VPN password from `pass`.](linux_snippets.md#get-vpn-password-from-pass)
    To be able to retrieve the user and password from pass you need to run the openvpn
    command with the next flags:
    ```bash
    sudo bash -c "openvpn --config config.ovpn  --auth-user-pass  {{ path_to_public_key_file }}
      ```
    * Get fingerprint of key
      ```bash
      ssh-keygen -lf {{ path_to_key }}
      ```
* New: [Measure the network performance between two machines.](linux_snippets.md#measure-the-network-performance-between-two-machines)
    Install `iperf3` with `apt-get install iperf3` on both server and client.
    On the server system run:
    ```bash
    server#: iperf3 -i 10 -s
    ```
    Where:
    * `-i`: the interval to provide periodic bandwidth updates
    * `-s`: listen as a server
    On the client system:
    ```bash
    client#: iperf3 -i 10 -w 1M -t 60 -c [server hostname or ip address]
    ```
    Where:
    * `-i`: the interval to provide periodic bandwidth updates
    * `-w`: the socket buffer size (which affects the TCP Window). The buffer size is also set on the server by this client command.
    * `-t`: the time to run the test in seconds
    * `-c`: connect to a listening server atâ€¦
    Sometimes is interesting to test both ways as they may return different outcomes
### [Anki](anki.md)
* New: How to install the latest version.
    Install the dependencies:
    ```bash
    sudo apt-get install zstd
    ```
    Download [the latest release package](https://apps.ankiweb.net/).
    Open a terminal and run the following commands, replacing the filename as appropriate:
    ```bash
    tar xaf Downloads/anki-2.1.XX-linux-qt6.tar.zst
    cd anki-2.1.XX-linux-qt6
    sudo ./install.sh
    ```
### [Tridactyl](tridactyl.md)
* New: Introduce tridactyl.
    [Tridactyl](https://github.com/tridactyl/tridactyl) is a Vim-like interface for Firefox, inspired by Vimperator/Pentadactyl.
    In the article you'll also find:
    * [How to select text on the page](tridactyl.md#select-text-from-the-page)
### [google chrome](google_chrome.md)
* Correction: Update the installation steps.
    * Import the GPG key, and use the following command.
      ```bash
      sudo wget -O- https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor > /usr/share/keyrings/google-chrome.gpg
      ```
    * Once the GPG import is complete, you will need to import the Google Chrome repository.
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
      ```
    * Install the program:
      ```bash
      apt-get update
      apt-get install google-chrome-stable
      ```
### [Kitty](kitty.md)
* New: [How to add fonts to kitty.](kitty.md#fonts)
    * Add your fonts to the `~/.local/share/fonts` directory
    * Check they are available when you run `kitty +list-fonts`
    * Add them to your config:
      ```
      font_family      Operator Mono Book
      bold_font        Operator Mono Medium
      italic_font      Operator Mono Book Italic
      bold_italic_font Operator Mono Medium Italic
      ```
    feat(kitty#Screen not working on server with sudo): Troubleshoot the Screen not working on server with sudo issue
    Make sure you're using the ssh alias below
    ```bash
    alias ssh="kitty +kitten ssh"
    ```
    And then copy the `~/.terminfo` into `/root`
    ```bash
    sudo copy -r ~/.terminfo /root
    ```
### [sed](sed.md)
* New: Introduce sed snippets.
### [Vim](vim.md)
* New: [Configure nvim with lua.](vim.md#configuration)
    Nvim moved away from vimscript and now needs to be configured in lua. You can access the
    config file in `~/.config/nvim/init.lua`. It's not created by default so you need to do
    it yourself.
    In the article it explains how to do the basic configuration with lua:
    * [Set variables](vim.md#configuration)
    * [Set key bindings](vim.md#key-bindings)
    * [Set spelling](vim.md#spelling)
    * [Set test runners](vim.md#testing): With `neotest`
    * [Set the buffer and file
      management](vim.md#buffer-and-file-management): with `Telescope`.
    * [Use Plugin managers](vim.md#plugin-managers): it evaluates the
      different solutions and then explains how to install and use `packer`
    * [What is and how to use `Treesitter`](vim.md#treesitter)
    * [Set git integration](vim.md#git): Evaluate the different solutions
      and configure `neogit`
    * [How to run lua snippets](vim.md#run-lua-snippets)
    And some troubleshooting:
    * [How to deal with big files and telescope](vim.md#deal-with-big-files)
* Correction: [Update the leader key section.](vim.md#the-leader-key)
    There are different opinions on what key to use as the `` key. The `` is the most comfortable as it's always close to your thumbs, and it works well with both hands. Nevertheless, you can only use it in normal mode, because in insert `` will be triggered as you write. An alternative is to use `;` which is also comfortable (if you use the english key distribution) and you can use it in insert mode.
    If you [want to define more than one leader key](https://stackoverflow.com/questions/30467660/can-we-define-more-than-one-leader-key-in-vimrc) you can either:
    * Change the `mapleader` many times in your file: As the value of `mapleader` is used at the moment the mapping is defined, you can indeed change that while plugins are loading. For that, you have to explicitly `:runtime` the plugins in your `~/.vimrc` (and count on the canonical include guard to prevent redefinition later):
      ```vim
      let mapleader = ','
      runtime! plugin/NERD_commenter.vim
      runtime! ...
      let mapleader = '\'
      runime! plugin/mark.vim
      ...
      ```
    * Use the keys directly instead of using ``
      ```vim
      " editing mappings
      nnoremap ,a 
      nnoremap ,k 
      nnoremap ,d 
      " window management mappings
      nnoremap gw 
      nnoremap gb 
      ```
    Defining `mapleader` and/or using `` may be useful if you change your mind often on what key to use a leader but it won't be of any use if your mappings are stable.
## Android
### [Seedvault](seedvault.md)
* New: Introduce seedvault.
    [Seedvault](https://calyxinstitute.org/projects/seedvault-encrypted-backup-for-android) is an open-source encrypted backup app for inclusion in Android-based operating systems.
    While every smartphone user wants to be prepared with comprehensive data backups in case their phone is lost or stolen, not every Android user wants to entrust their sensitive data to Google's cloud-based storage. By storing data outside Google's reach, and by using client-side encryption to protect all backed-up data, Seedvault offers users maximum data privacy with minimal hassle.
    Seedvault allows Android users to store their phone data without relying on Google's proprietary cloud storage. Users can decide where their phone's backup will be stored, with options ranging from a USB flash drive to a remote self-hosted cloud storage alternative such as NextCloud. Seedvault also offers an Auto-Restore feature: instead of permanently losing all data for an app when it is uninstalled, Seedvault's Auto-Restore will restore all backed-up data for the app upon reinstallation.
    Seedvault protects users' private data by encrypting it on the device with a key known only to the user. Each Seedvault account is protected by client-side encryption (AES/GCM/NoPadding). This encryption is unlockable only with a 12-word randomly-generated key.
    With Seedvault, backups run automatically in the background of the phone's operating system, ensuring that no data will be left behind if the device is lost or stolen. The Seedvault application requires no technical knowledge to operate, and does not require a rooted device.
    In the article you'll also find:
    * How to install it
    * How to store the backup remotely
    * How to restore a backup
### [Signal](signal.md)
* New: Add installation steps.
    These instructions only work for 64 bit Debian-based Linux distributions such as Ubuntu, Mint etc.
    * Install our official public software signing key
      ```bash
      wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
      cat signal-desktop-keyring.gpg | sudo tee -a /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
      ```
    * Add our repository to your list of repositories
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
        sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
      ```
    * Update your package database and install signal
      ```bash
      sudo apt update && sudo apt install signal-desktop
      ```