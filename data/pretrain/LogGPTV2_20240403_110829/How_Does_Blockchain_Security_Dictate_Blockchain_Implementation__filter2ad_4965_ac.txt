to broadcast it with probability depending on the resource
balance of U at time t. We will expand on this example below.
• The timed setting. Here, each request r made by p must
be of the form (t′, U, M, A), where t′ is a timeslot, and where
U, M and A are as in the untimed setting, The response
(U, M∗) of the permitter oracle will be assumed to be a prob-
abilistic function of the determined variables, (t′, U, M, A),
and of R (U, t′, M ), subject to the condition that M∗ = ∅ if
R (U, t′, M ) = 0.
The permission set received by p at timeslot t + 1 is the set all of
responses from the permitter oracle to p’s requests at timeslot t.
To understand these definitions, it is instructive to consider how
they can be used to give a simple model for Bitcoin. To do so, we
work in the untimed setting, and we define the set of possible
messages to be the set of possible blocks. For each U ∈ Up, we
then allow p to make a single request of the form (U, M, A) at each
timeslot. As mentioned above, M will be a set of blocks that have
been received by p, or that p is already permitted to broadcast. The
entry A will be data (without PoW attached) that specifies a block
extending the ‘longest chain’ in M. If A specifies a valid block, then
the permitter oracle will give permission to broadcast the block
specified by A with probability depending on the resource balance
of U at time t (which is determined by hashrate, and is independent
of M). So, the higher U’s resource balance at a given timeslot, the
greater the probability p will be able to mine a block at that timeslot.
7As described more precisely in Section 2.6, whether the resource pool is determined
or undetermined will decide whether we are in the sized or unsized setting.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1010Of course, a non-faulty processor p will always submit requests of
the form (U, M, A), for which M is p’s (entire) message state, and
such that A specifies a valid block extending the longest chain in
M.8
The motivation for considering the timed as well as the untimed
setting stems from one of the qualitative differences between PoS
and PoW protocols. PoS protocols are best modelled in the timed
setting, where processors can look ahead to determine their permis-
sion to broadcast at future timeslots (when their resource balance
may be different than it is at present), i.e. with PoS protocols, blocks
will often have timestamps that cannot be manipulated, and at a
given timeslot, a processor may already be able to determine that
they have permission to broadcast blocks with a number of different
future timestamps. This means that, when modelling PoS protocols,
processors have to be able to make requests corresponding to times-
lots t′ other than the current timeslot t. We will specify further
differences between the timed and untimed settings in Section 2.6.
By a permissionless protocol we mean a pair (S, O), where S is a
state transition diagram to be followed by all non-faulty processors,
and where O is a permitter oracle, i.e. a probabilistic function of
the form described for the timed and untimed settings above. It
should be noted that the roles of the resource pool and the permitter
oracle are different, in the following sense: While the resource pool
is a variable (meaning that a given protocol will be expected to
function with respect to all possible resource pools consistent with
the setting9), the permitter is part of the protocol description.
2.3 The adversary and the synchronous and
partially synchronous settings
While all non-faulty processors follow the state transition diagram
S specified for the protocol, we allow a single undetermined pro-
cessor pA to display Byzantine faults, and we think of pA as being
controlled by the adversary: In formal terms, the difference between
pA and other processors is that the state transition diagram for pA
might not be S. Placing bounds on the power of the adversary
means limiting their resource balance (since UpA
is infinite, it does
not limit the adversary that they control a single processor). For
q ∈ [0, 1], we say the adversary is q-bounded if their total resource
(cid:80)
balance is always at most a q fraction of the total, i.e. for all M, t,
U∈UpA
It is standard in the distributed computing literature [13] to
consider a variety of synchronous, partially synchronous, or asyn-
chronous settings, in which message delivery might be reliable or
subject to various forms of failure. We will suppose that the dura-
tion is divided into intervals that are labelled either synchronous or
asynchronous (meaning that each timeslot is either synchronous or
asynchronous). We will suppose that during asynchronous intervals
messages can be arbitrarily delayed or not delivered at all. During
synchronous intervals, however, we will suppose that messages
R (U, t, M ) ≤ q ·(cid:80)
U∈U R (U, t, M ).
8So, in this simple model, we don’t deal with any notion of a ‘transaction’. It is clear,
though, that the model is sufficient to be able to define what it means for blocks to be
confirmed, to define notions of liveness (roughly, that the set of confirmed blocks grows
over time with high probability) and security (roughly, that with high probability, the
set of confirmed blocks is monotonically increasing over time), and to prove liveness
and security for the Bitcoin protocol in this model (by importing existing proofs, such
as that in [10]).
9Generally, protocols will be considered in a setting that restricts the set of resource
pools in certain ways, such as limiting the resource balance of the adversary.
are always delivered within ∆ many timeslots. So if t1 ≤ t2, m is
broadcast by p at t1, if p′ (cid:44) p and [t2, t2 + ∆] is a synchronous
interval contained in D, then p′ will receive m by timeslot t2 + ∆.
Here ∆ is a determined variable.
We then distinguish two synchronicity settings. In the synchro-
nous setting it is assumed that there are no asynchronous intervals
during the duration, while in the partially synchronous setting there
may be undetermined asynchronous intervals.
It will be useful to consider the notion of a timing rule, by which
we mean a partial function T mapping tuples of the form (p, p′, m, t )
to timeslots. We say that an execution follows the timing rule T
if the following holds for all processors p and p′: We have that
p′ receives m at t′ iff there exists some p and t  0 called the security parameter. The
intuition behind ε is that it should upper bound the probability of
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1011false confirmation. Given any message state, C returns the set of
confirmed blocks.
In Section 2.2, we stipulated that a permissionless protocol is
a pair P = (S, O). In general, however, a protocol might only be
considered to run relative to a specific notion of confirmation C. We
will refer to the triple (S, O, C) as the extended protocol. Often we
will suppress explicit mention of C, and assume it to be implicitly
attached to a given protocol. We will talk about a protocol being
live, for example, when it is really the extended protocol to which
the definition applies. It is important to understand, however, that
the notion of confirmation C is separate from P, and does not im-
pact the instructions of the protocol. In principle, one can run the
same Bitcoin protocol relative to a range of different notions of
confirmation. While the set of confirmed blocks might depend on
C, the instructions of the protocol do not, i.e. with Bitcoin, one can
require five blocks for confirmation or ten, but this does not affect
the process of building the blockchain.
For a given permissionless protocol, another way to completely
specify an execution (beyond that described in Section 2.1) is via
the following breakdown:
(I1) The determined variables (such as ∆ and ε);
(I2) The set of processors and their public keys;
(I3) The state transition diagram for the adversary pA;
(I4) The resource pool (which may or may not be undetermined);
(I5) The timing rule;
(I6) The probabilistic responses of the permitter.
With respect to the extended protocol (S, O, C), we call a particu-
lar set of choices for (I1)- (I5) a protocol instance. Generally, when
we discuss an extended protocol, we do so within the context of a
setting, which constrains the set of possible protocol instances. The
setting might restrict the set of resource pools to those in which the
adversary is given a limited resource balance, for example. When
we make a probabilistic statement to the effect that a certain condi-
tion holds with at most/least a certain probability, this means that
the probabilisitic bound holds for all protocol instances consistent
with the setting. Where convenient, we may also refer to the pair
(P, C) as the extended protocol, where P = (S, O).
2.6 Defining the timed, sized and
multi-permitter settings
In Section 2.2, we gave an example to show how the framework
of [12] can be used to model a PoW protocol like Bitcoin. In that
context the resource pool is a function R : U × D → R≥0, which
is best modelled as undetermined, because one does not know in
advance how the hashrate of each public key (or even the total
hashrate) will vary over time. The first major difference for a PoS
protocol is that the resource balance of each public key now depends
on the message state (as is also the case for some proof-of-space
protocols, depending on the implementation), and may also be a
function of time.10 So the resource pool is a function R : U × D ×
M → R≥0. A second difference is that R is determined, because one
knows from the start how the resource balance of each participant
depends on the message state as a function of time. Note that
advance knowledge of R does not mean that one knows from the
start which processors will have large resource balances throughout
the execution, unless one knows which messages will be broadcast.
A third difference, to which we have already alluded, is that PoS
protocols are best modelled in the timed setting. A fourth difference
is that PoW protocols are best modelled by allowing a single request
to the oracle for each public key at each timeslot, while this is not
necessarily true of PoS protocols.
In [12], the sized/unsized, timed/untimed, and single/multi-permitter
settings were defined to succinctly capture these differences. The
idea is that all permissionless protocols run relative to a resource
pool and the difference between PoW and PoS and other permis-
sionless protocols is whether we are working in the sized/unsized,
timed/untimed, and single/multi-permitter settings. If one then
comes to consider a new form of protocol, such as proof-of-space,
theorems that have been proved for all protocols in the unsized set-
ting (for example) will still apply, so long as these new protocols are
appropriately modelled in that setting. So the point of this approach
is that, by blackboxing the precise mechanics of the processor se-
lection process (whereby processors are selected to do things like
broadcast new blocks of transactions), we are able to focus instead
on properties of the selection process that are relevant for protocol
design. This allows for the development of a general theory that
succinctly describes the relevant merits of different forms of proto-
col. The sized/unsized, timed/untimed, and single/multi-permitter
settings are defined below.
(1) The timed and untimed settings. There are two differ-
ences between the timed and untimed settings. The first
concerns the form of requests, as detailed in Section 2.2. We
also require that the following holds in the timed setting: For
each broadcast message m, there exists a unique timeslot tm
such that permission to broadcast m was given in response
to some request (tm, U, M, A), and tm is computable from m.
We call tm the timestamp of m.
(2) The sized and unsized settings. We call the setting sized
if the resource balance is determined. By the total resource
balance we mean the function T : N × M → R>0 defined
U R (U, t, M ). For the unsized setting, R and
T are undetermined, with the only restrictions being:
(i) T only takes values in a determined interval [α0, α1],
where α0 > 0 (meaning that, although α0 and α1 are de-
termined, protocols will be required to function for all
possible α0 > 0 and α1 > α0, and for all undetermined R
consistent with α0, α1, subject to (ii) below).11
(ii) There may also be bounds placed on the resource balance
of public keys owned by the adversary.
by T (t, M ) :=(cid:80)
(3) The multi-permitter and single-permitter settings. In
the single-permitter setting, each processor may submit a
single request of the form (U, M, A) or (t, U, M, A) (depending
on whether we are in the timed setting or not) for each
10It is standard practice in PoS blockchain protocols to require a participant to have
a currency balance that has been recorded in the blockchain for at least a certain
minimum amount of time before they can produce new blocks, for example. So, a
given participant may not be permitted to extend a given chain of blocks at timeslot t,
but may be permitted to extend the same chain at a later timeslot t′.
11We consider resource pools with range restricted in this way, because it turns out to
be an overly strong condition to require a protocol to function without any further
conditions on the resource pool, beyond the fact that it is a function to R≥0. Bitcoin
will certainly fail if the total resource balance decreases sufficiently quickly over time,
or if it increases too quickly, causing blocks to be produced too quickly compared to ∆.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1012U ∈ Up at each timeslot, and it is allowed that A (cid:44) ∅. In the