### Process Monitoring with Process Monitor (ProcMon)

Before we proceed, we need to use Process Monitor (ProcMon) to observe the file operations. In `Procmon.exe`, set up the following filters as shown in the screenshot:

**Figure 4.9 – ProcMon Filtering by Example**

1. **Process Name Filter**: Configure it to display only results for the `notepad.exe` process.
2. **Operation Filter**: Set it to show only `CreateFile` operations, which create a new file or obtain a handle to an existing one.
3. **Path Filter**: Use the value `Demo` to display results for filenames containing the string `Demo`.

Here is a screenshot showing the results after opening the file with `notepad.exe`:

**Figure 4.10 – ProcMon CreateFile Example**

As seen, the `CreateFile` operation is performed with a `Desired Access` of `Generic Read`. To understand this operation from a low-level perspective, we will use the `x64dbg` user-mode debugger.

### Debugging the CreateFileW Function

In the case of Windows' `notepad.exe`, the `CreateFileW` function is used. We will set a breakpoint on this function to analyze its execution flow.

**Figure 4.11 – x64dbg CreateFileW Call Example**

- In the command pane of `x64dbg`, enter `bp CreateFileW` and press Enter.
- Press F9 to continue execution until the breakpoint is hit.
- You will see an assembly instruction `jmp CreateFileW`, which is part of the `kernel32.dll` library.

**Figure 4.12 – x64dbg ZwCreateFile Call Example**

- After the jump, execution is transferred from `kernel32.dll` to `kernelbase.dll`, which contains the actual Windows Native API function `ZwCreateFile`.

**Figure 4.13 – x64dbg Syscall After ZwCreateFile Call Example**

- Finally, execution is transferred from `kernelbase.dll` to `ntdll.dll` before the `syscall` instruction is executed, transferring control to lower layers of the Windows operating system, such as the kernel.

With this deeper understanding of how Windows handles process execution, we can now explore three process-injection techniques.

### Classic DLL Injection

The first technique is classic DLL injection, which forces the loading of a malicious DLL into a remote process using the following six basic Windows API functions:

1. **OpenProcess**: Provides a handle to the remote process by specifying the target process ID.
2. **VirtualAllocEx**: Allocates a memory buffer within the target process to contain the path of the loaded DLL.
3. **WriteProcessMemory**: Inserts the malicious payload into the target process.
4. **CreateRemoteThread**: Creates a thread within the remote process and executes the `LoadLibrary()` function to load the DLL.
5. **LoadLibrary/GetProcAddress**: Returns the address of the loaded DLL. Since `kernel32.dll` is mapped to the same address for all Windows processes, these functions can be used to obtain the address of the API to be loaded in the remote process.

**Note**: x86 and x64 processes have different memory layouts, and loaded DLLs are mapped to different address spaces.

**Figure 4.14 – Classic DLL Injection in IDA Pro**

### Process Hollowing

The second technique is process hollowing, which involves creating a legitimate process in a suspended state, hollowing out its memory content, and replacing it with malicious content. The steps include:

1. **CreateProcess**: Creates a legitimate process (e.g., `notepad.exe`) in a suspended state.
2. **ZwUnmapViewOfSection/NtUnmapViewOfSection**: Unmaps the entire memory space of a specific section of the process.
3. **VirtualAllocEx**: Allocates new memory space.
4. **WriteProcessMemory**: Writes the malicious content into the process memory.
5. **SetThreadContext and ResumeThread**: Restores the context to the thread and resumes the process.

**Figure 4.15 – First Three Windows API Calls of Process Hollowing in IDA Pro**

**Figure 4.16 – Last Four Windows API Calls of Process Hollowing in IDA Pro**

### Process Doppelgänging

The third technique is process doppelgänging, which uses the following Windows and Native API functions:

1. **CreateFileTransacted**: Opens a legitimate process (e.g., `notepad.exe`).
2. **WriteFile**: Writes data to the injected file.
3. **NtCreateSection**: Creates a new section and loads the malicious file.
4. **RollbackTransaction**: Prevents the altered executable from being saved on the disk.
5. **NtCreateProcessEx, RtlCreateProcessParametersEx, VirtualAllocEx, WriteProcessMemory, NtCreateThreadEx, NtResumeThread**: Initiates and runs the altered process.

**Figure 4.17 – First Two Windows API Calls of Process Doppelgänging**

**Figure 4.18 – Last Two Windows API Calls of Process Doppelgänging**

Based on a study by Tal Liberman and Eugene Kogan, process doppelgänging succeeded in evading several antivirus software solutions.

### Process Injection Used by Threat Actors

Many advanced persistent threat (APT) groups, such as APT 32, APT 37, APT 41, Cobalt Group, Kimsuky, PLATINUM, and BRONZE BUTLER, have used various process-injection techniques to hide from users and antivirus software. However, as these techniques have been detected by antivirus engines, they are no longer practical for bypassing antivirus software.

### Antivirus Bypass Using Timing-Based Techniques

Antivirus vendors aim to balance high detection rates with user-friendly performance. To avoid long scan times, vendors may sacrifice precision, which attackers can exploit. Two main timing-based techniques are:

1. **Sleep()**: Causes the malware to delay executing its malicious functionality.
2. **GetTickCount()**: Identifies the system uptime and decides when to execute malicious functions.

**Figure 4.24 – Sleep() Function in a PE File**

**Figure 4.25 – GetTickCount() Function in a PE File**

**Figure 4.26 – Malicious File Detected by 3/70 Antivirus Vendors**

The following antivirus vendors did not detect the keylogger file:
- Avast

This concludes our exploration of process injection and timing-based techniques for antivirus bypass.