JavaScript execution time The left chart of Figure 4
shows just the JavaScript execution time. As expected,
the bars get shorter from left-to-right; from “not-optimized”
to “optimized”, we are adding optimizations; and then the
remaining bars consider progressively more inclusive URL
policies meaning there are fewer taints to generate, propa-
gate and check.
The data from Figure 4 shows that our original TSET li-
brary slows down JavaScript execution signiﬁcantly – any-
where from about 2.1X to 7.9X, and on average about 4.3X.
The optimized TSET library provides signiﬁcant performance
gains over the original library and provides 3.0X slowdown.
The various white-lists provide some additional gain, but
the gain is relatively small. To understand the limits of
how much white-lists can help, we use the “trust-all” bar,
which essentially corresponds to having a white-lists with
every website on it. Overall, it seems that even in the best
case scenario, white-lists do not help much in the overhead
of our approach. This is because our approach needs to
track the ﬂow of cookie regardless of the number of exter-
nal sites.
Total execution time The right chart of Figure 4 shows
the total execution time of the enhanced Chrome while load-
ing the web page and running the scripts on it. These
measurements were collected on a fast network at a large
university. The faster the network, the larger the over-
heads in Figure 4 will be, as the time to download the web
page can essentially hide the overhead of running JavaScript.
Thus, by using a fast network, Figure 4 essentially shows
some of the worst case slowdowns of our approach. Here
again, we see that the “optimized” bar is signiﬁcantly faster
than the “not-optimized” bar. We can also see that the
“whlst” bar provides a loading experience that is about 73%
slower.
not optimizedoptimizeddmnwhlsttrust‐allnot optimizedoptimizeddmnwhlsttrust‐all15511653144957477811451155411801220675673842163298713671729312201804953113651367250821278947760342508117812110huff‐postwsjmapquestfoxnewscnnnytimestwitpicweatherwalmartlatimesaverage0huff‐postwsjmapquestfoxnewscnnnytimestwitpicweatherwalmartlatimesaverage2774. EMPIRICAL STUDY OF HISTORY HI-
JACKING
Next, we present an empirical study of the prevalence of
history hijacking on popular websites. Recall that links cor-
responding to URLs visited by the user are typically ren-
dered diﬀerently than links corresponding to URLs not vis-
ited by the user. In essence, the attack works by inserting
invisible links into the web page and having JavaScript in-
spect certain style properties of links, for example the color
ﬁeld, thereby determining whether the user has visited a
particular URL. While researchers have known about the
possibility of such attacks, hitherto it was not known how
prevalent they are in real, popular websites. We have used
our JavaScript information ﬂow framework to detect and
study the prevalence of such attacks on a large set of web-
sites, and show that history hijacking is used, even by quite
popular websites.
Policies We formalize history hijacking in our framework
using the following information ﬂow policies:
at $1.getCompStyle($2, . . .) if $2.isLink() inject “secret”
at document.send($1, $2) block “secret” on $2
In particular, whenever the computed style of a link is
read using getCompStyle, the return value is marked as
secret. Whenever a value is sent on the network using
document.send, the second parameter (which is the actual
data being sent) should not be tainted.
Benchmarks and Summary of Results To evaluate the
prevalence of history hijacking, we ran our information ﬂow
framework using the above two policies on the front pages of
the Alexa global top 50,000 websites.1 To visit these sites au-
tomatically, we implemented a simple JavaScript web page
that directs the browser to each of these websites. We suc-
cessfully ran our framework on these sites in a total of about
50 hours. The slowdown for history sniﬃng was as follows:
the JavaScript code slowed down by a factor 2.4X and to-
tal page loading time on a fast network increased by 67%.
Overall, we found that of these 50,000 sites, 485 of them in-
spect style properties that can be used to infer the browser’s
history. Out of 485 sites, 63 are reported as transferring the
browser’s history to the network, and we conﬁrmed that 46
of them are actually doing history hijacking, one of these
sites being in the Alexa global top 100.
Real cases of history sniﬃng Out of 63 websites reported
as transferring the browser’s history by our framework, we
conﬁrmed that the 46 cases were real history sniﬃng occur-
rences. Table 1 lists these 46 websites. For each history-
sniﬃng site, we give its Alexa rank, its URL, a description
of the site, where the history-sniﬃng code comes from, and
a list of some of the URLs inspected in the browser history.
Each one of the websites in Table 1 extracts the visitor’s
browsing history and transfers it to the network. Many of
these websites seem to try to obfuscate what they are do-
ing. For example, the inspected URLs on youporn.com are
listed in the JavaScript source in encoded form and decoded
right before they are used. On other websites, the history-
sniﬃng JavaScript is not statically inserted in a web page,
but dynamically generated in a way that makes it hard to
understand that history sniﬃng is occurring by just looking
1Here and elsewhere in the paper we use the Alexa list as of
February 1st, 2010.
Rank Site
61
867
2333
2415
2811
3508
3603
4266
4581
5233
5357
6500
7198
7323
8064
8644
9616
10152
10415
11330
12084
12164
16752
17379
17655
17882
18361
20240
20822
22010
23577
23626
24109
24414
24597
24815
25750
27366
31638
34661
35773
37333
41490
45264
48284
49549
youporn
charter.net
feedjit
gamestorrents
newsmax
namepros
fulltono
youporngay
osdir
gamesfreak
morningstar
espnf1
netdoctor
narutocentral
subirimagenes
fucktube
straightdope
guardafilm
estrenosdtl
bgames
10best
twincities
kaushik.net
todocvcd
filmannex
planet-f1
trailersplay
minyanville
pixmac
fotoflexer
xepisodes
s-p*
mimp3.net
allaccess
petitchef
bleachcentral
hoopsworld
net-games.biz
6speedonline
msgdiscovery
moneynews
a-g*
divxatope
subtorrents
sesionvip
youporncocks
Src
H
I
F
M
I
F
M
H
I
I
I
I
I
I
Desc
adult
news
traﬃc
fun
news
forum
music
adult
tech
fun
ﬁnance
sports
health
fun
hosting M
H
adult
I
news
M
movie
movie
M
I
fun
I
travel
I
news
blog
H
content M
I
movie
I
sports
M
movie
ﬁnance
I
hosting H
I
widget
fun
M
F
movie
M
music
I
news
M
food
fun
I
I
sports
I
fun
I
car
M
tech
ﬁnance
I
religion H
content M
content M
M
movie
adult
H
Inspected URLs
pornhub,tube8,+21
cars,edmunds,+46
twitter,facebook,+6
amazon,ebay,+220
cars,edmunds,+46
twitter,facebook,+6
amazon,ebay,+220
pornhub,tube8,+21
cars,edmunds,+46
cars,edmunds,+46
cars,edmunds,+46
cars,edmunds,+46
cars,edmunds,+46
cars,edmunds,+46
amazon,ebay,+220
tube8,xvideos,+9
cars,edmunds,+46
amazon,ebay,+220
amazon,ebay,+220
cars,edmunds,+46
cars,edmunds,+46
cars,edmunds,+46
facebook,+100
amazon,ebay,+220
cars,edmunds,+46
cars,edmunds,+46
amazon,ebay,+220
cars,edmunds,+46
istockphoto,+27
amazon,ebay,+220
amazon,ebay,+220
facebook,youtube,+8
amazon,ebay,+220
amazon,ebay,+220
amazon,ebay,+220
amazon,ebay,+220
amazon,ebay,+220
cars,edmunds,+46
cars,edmunds,+46
amazon,ebay,+220
cars,edmunds,+46
facebook,+62
amazon,ebay,+220
amazon,ebay,+220
amazon,ebay,+220
pornhub,tube8,+21
Table 1: Websites that perform real sniﬃng. Top-
level domains are .com if not otherwise speciﬁed.
s-p and a-g abbreviate sincortespublicitarios.com
and answersingenesis.org. “Src” is the source of
the history sniﬃng JavaScript code: “I”, “M” and
“F”, indicate the code came from interclick.com,
meaningtool.com, and feedjit.com respectively, and
“H” indicates the code came from the site itself.
at the static code. We also found that many of these web-
sites make use of a handful of third-party history-sniﬃng
libraries. In particular, of the 46 cases of conﬁrmed sniﬃng,
22 sites use history-sniﬃng code from interclick.com and