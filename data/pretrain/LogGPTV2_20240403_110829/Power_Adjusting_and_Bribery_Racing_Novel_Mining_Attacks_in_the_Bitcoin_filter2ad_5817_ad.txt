⎛⎝ 𝑛∑︁
1−∑︀𝑗
(𝑝𝑘 )
(𝑝𝑘 )
1,···,𝑘𝛼𝑐
𝑖
⎞⎠,
(𝑝𝑘 )
1,··· ,𝑘𝛼
𝑖∏︁
(𝑝𝑘 )
𝑗+1 𝛼
𝑝𝑖∈𝒫𝑖
(𝑝𝑗 )
𝑗
𝑘=1𝜏
(8)
𝑘=2
𝑗=1
𝑖=0
𝛼
𝜏
Therefore, we derive the reward of an attacker when launch-
ing PAW attacks against 𝑛 pools by summing up Equation
(6), (7), and (8):
𝑛∑︁
𝑖=0
+
∑︁
𝑛∑︁
𝑝𝑖∈𝒫𝑖
𝑘=2
(︃(︁
(1 − 𝑛∑︁
𝑘=1
𝜏
(𝑝𝑘 )
𝑖+1 )𝛼 +
(1 − 𝛼 − 𝛽)¯𝜏
𝛽(𝑝𝑘 ) + ¯𝜏
(𝑝𝑘 )
(𝑝𝑘 )
1,··· ,𝑘𝛼𝑐
𝑖
(𝑝𝑘 )
1,··· ,𝑘𝛼
𝑛∑︁
)︁ 𝑖∏︁
𝑘=1
𝑗=1
𝛽(𝑝𝑘 ) · ¯𝜏
𝛽(𝑝𝑘 ) + ¯𝜏
1 −∑︀𝑗
𝜏
(𝑝𝑘 )
1,··· ,𝑘𝛼
(𝑝𝑘 )
1,··· ,𝑘𝛼
(𝑝𝑗 )
𝑗
𝛼
𝑘=1 𝜏
(𝑝𝑘 )
𝑗+1 𝛼
)︃
.
Quantitative analysis and simulation. We use a spe-
cific case to show the additional reward of the attacker who
launches PAW attacks against two pools. We make the two
assumptions to reduce the parameter dimensions: (1) the at-
tacker’s computational power is 0.2; and (2) 𝑐(𝑝𝑖)
𝑘 = 𝑐/𝑘 when
𝑘 infiltration mining finds 𝑘 different FPoWs (0 (cid:54) 𝑐 (cid:54) 1).
Furthermore, we compare the attacker’s RER (%) of PAW at-
tacks and FAW attacks according to 𝑐 in three scenarios: the
two victim pools with computational power (𝛽1, 𝛽2) equals
to (0.1, 0.1), (0.2, 0.1), and (0.3, 0.1) respectively.
The attacker’s RERs of the two attacks are depicted in
Fig. 4. Clearly, the PAW can always earn a higher reward
Figure 5: The extra reward of BTC.com (29.6%), Antpool
(12.9%), or Slush (9.9%) when one pool attacks the other two
with PAW or FAW.
than FAW. and the RER of PAW is up to 2.5 times as FAW
(when 𝑐 = 1 in (0.1, 0.1) scenario).
We consider the top three biggest Bitcoin mining pool
in a real-world scenario: BTC.com [27] with 29.6% mining
power, Antpool [23] with 12.9%, and Slush [33] with 9.9%
(mining power is collected by Jan. 2019). Suppose one of them
launch PAW or FAW attacks, which the other two remain in
honest mining. The extra reward in each attacking scenario
is depicted in Fig. 5. Antpool benefits the most with our
PAW. The maximum extra reward is nearly 9%, where its
extra reward with FAW is only 5.3%. For other pools, PAW
also always better than FAW regardless of 𝑐.
We further use a Monte Carlo simulator in Matlab to verify
our analysis. We show the attacker’s average RER in three
cases over 109 rounds (same as the three cases above, which
𝛼 = 0.2 and the (𝛽1, 𝛽2) equals to (0.1, 0.1), (0.2, 0.1), and
(0.3, 0.1) respectively). The result is presented in Table 3.
The attacker’s RER is almost identical in simulation and
theoretical analysis.
5.4 “Miner’s Dilemma” Analysis
Mining pools can also launch PAW attacks against each other
simultaneously. We prove that PAW can avoid the “miner’s
dilemma” (similar to FAW), and the outcome becomes a size
game (i.e. the larger pool can win). In a two-pool PAW game
(Pool1 vs Pool2), each pool will propagate the result when its
innocent mining firstly finds an FPoW. If Pool1’s infiltration
mining discovers an FPoW first (and vice versa for Pool2), it
withholds the FPoW. After that, if Pool1’s innocent mining
discovers a new FPoW, it discards the withheld FPoW and
propagates the new one. If Pool2’s innocent mining finds a
new FPoW, it discards the withheld one. Otherwise, when
other miners broadcast a valid block, it propagates the with-
held FPoW to cause a fork. Notice that since Pool2 also uses
PAW attacks against Pool1 at the same time, the fork can
have three branches when both of the infiltration mining
in Pool1 and Pool2 discover an FPoW before other miners.
In this scenario, the manager of one pool will choose the
FPoW generated from the opponent’s infiltration mining.
For instance, when Pool1’s infiltration mining finds FPoW1
(in Pool2), and Pool2’s infiltration mining finds FPoW2 (in
Pool1), Pool1’s manager will choose FPoW2 when other min-
ers find a valid block, and vice versa for Pool2. The blockchain
00.10.20.30.40.50.60.70.80.91Coefficient c12345678910Relative Extra Reward (%)PAW: Case 1PAW: Case 2 PAW: Case 3FAW: Case 1FAW: Case 2FAW: Case 300.10.20.30.40.50.60.70.80.91Coefficient c123456789Expected Relative Extra Reward (%)BTC.com: PAWAntpool: PAWSlush: PAWBTC.com: FAWAntpool: FAWSlush: FAW(a) Pool1’s pure RER and winning
condition.
(b) Pool2’s pure RER and winning
condition.
Figure 6: Results of a PAW game according to Pool2’s size
𝛼[2] and coefficient 𝑐 (𝑐[1]
2 = 𝑐/2) when
𝛼[1] = 0.2.
1 = 𝑐 and 𝑐[1]
2 = 𝑐[2]
1 = 𝑐[2]
will have three branches caused by FPoW1, FPoW2, and the
valid block.
We define the winning condition as pool miners (not in-
cluding the opponent’s infiltration power) earning an extra
reward.
Nash equilibrium point. We use the following param-
eters to analyze a PAW game between Pool1 and Pool2
(𝑖 ∈ {1, 2}).
𝛼[𝑖]:Total computational power of Pool𝑖;
𝑓 [𝑖]
1 :Pool𝑖’s original infiltration mining power;
𝑓 [𝑖]
2 :Pool𝑖’s reallocated infiltration mining power after
its infiltration mining finds an FPoW;
𝑐[𝑖]
1 : Probability of the Pool𝑖’s withheld FPoW is selected
as the main chain in two-branch cases;
𝑐[𝑖]
2 : Probability of the Pool𝑖’s withheld FPoW is selected
as the main chain in three-branch cases.
We present the detailed calculation of Pool𝑖’s reward 𝑅[𝑖]
in Appendix-D. Now we analyze the Nash equilibrium in a
two-pool PAW game. Under the Nash equilibrium point, one
pool may satisfy the winning condition (i.e. earning more
rewards than honest mining), which breaks the “miner’s
dilemma” in BWH attacks.
2 )).
1 , 𝑓 [1]
Theorem 5.3. The two-pool PAW game has a unique Nash
equilibrium (𝑓 [1], 𝑓 [2]) which either satisfies ∇𝑓 [1] 𝑅[1] = 0,
and ∇𝑓 [2] 𝑅[2] = 0; or a point on a borderline which maximizes
𝑅[1] with 𝑓 [1] and 𝑅[2] with 𝑓 [2] (𝑓 [1] = (𝑓 [1]
2 ) and 𝑓 [2] =
(𝑓 [2]
1 , 𝑓 [2]
Detailed proof is presented in Appendix-E.
Winning conditions. We quantitatively analyze the re-
ward in a two-pool PAW game under the Nash equilibrium
point. For simplicity, we assume 𝑐[1]
1 are symmetric,
as well as 𝑐[1]
1 = 𝑐[2]
2 = 𝑐/2,
where 0 (cid:54) 𝑐 (cid:54) 1 [13]). Before presenting the results, we de-
fine the pure reward of Pool𝑖, which means the total reward
of Pool𝑖 miners not including the infiltration mining of the
opponent pool (Pool¬𝑖). Therefore, the pure reward of Pool𝑖
under honest mining is 𝛼[𝑖], which can be used to calculate
its pure RER.
1 and 𝑐[2]
1 = 𝑐 and 𝑐[1]
2 and 𝑐[2]
2 = 𝑐[2]
(i.e. 𝑐[1]
2
Fig. 6 shows the results of a two-pool PAW game in terms
of 𝛼[2] and 𝑐 when 𝛼[1] = 0.2. The pure RERs of Pool1 and
Pool2 are presented in Fig. 6-a and Fig. 6-b respectively,
where the black lines represent the same pure RER as honest
Figure 7: Winning conditions of Pool1. The right side of each
line represents the winning range of Pool1 under the corre-
sponding 𝑐.
mining (i.e. Pool1’s pure RER = 0 in Fig. 6-a and Pool2’s
pure RER = 0 in Fig. 6-b). Each pool can earn an extra
reward above the black lines while taking a loss below the
lines. When 𝛼[2] > 0.2, Pool2 may get more rewards under
the two-pool PAW game. However, when 𝛼[2] < 0.2, Pool2
will always take a loss (same as the result in a two-pool FAW
game). Therefore, the PAW game becomes a pool size game,
and the “miner’s dilemma” [7] (each pool will always take a
loss when its computational power is less than 0.5) may not
hold.
We further analyze the winning conditions. Pool1’s winning
conditions are depicted in Fig. 7 (Pool2’s winning conditions
can be found by swapping 𝛼[1] and 𝛼[2]). The nine lines
represent the same reward as honest mining when 𝑐 varies
from 0.2 to 1. The right side of each line represents the
winning range of Pool1 under the corresponding 𝑐. When
𝑐 = 1, the borderlines are exactly same for Pool1 and Pool2
(𝛼[1] = 𝛼[2]). Therefore, as we expected, the larger pool can
earn an extra reward, while the smaller pool will always take
a loss. Furthermore, even when the computational power of
each pool is less than 0.5 and 𝑐 is less than 1, there can still
be a winner, which can avoid the “miner’s dilemma” [7]. In
summary, the winning condition is related to 𝛼[1], 𝛼[2], and
𝑐. The larger pool can earn an extra reward (related to 𝑐),
while the smaller pool will always take a loss (regardless of
𝑐).
6 BRIBERY SELFISH MINING
6.1 Overview
We introduce novel bribery selfish mining (BSM) attacks
which combines bribery racing strategy and selfish mining.
In our observation in bribery racing (Section 4.1), we point
out when “0-lead” racing occurs, an attacker can bribe other
miners to work on her branch to increase the probability of
winning in forks. Therefore, BSM can increase the attacker’s
reward via including bribery transactions in the attacker’s
branch. Furthermore, when bribery racing occurs, targets
(bribes) can encounter a “venal miner’s dilemma”, which
all targets will choose to accept the attacker’s branch for a
higher reward, but still suffer from a loss (comparing with
no one accepting).
We define three entities in BSM, attacker (𝑎), the target
(venal miner, 𝑏), and other miners (𝑜). In BSM, an attacker
𝑎 will include bribes in each block of her private chain (𝑇 𝐴
𝐵 ).
After the attacker discovering a block, she withholds the
00.10.20.30.40.5,[2]00.20.40.60.81Coefficient c-20-15-10-505Pure RER of Pool1 (%)00.10.20.30.40.5,[2]00.20.40.60.81Coefficient c-30-25-20-15-10-505Pure RER of Pool2 (%)00.050.10.150.20.250.30.350.40.450.5[1]00.10.20.30.40.5[2]c=0.2c=0.3c=0.4c=0.5c=0.6c=0.7c=0.8c=0.9c=1block and broadcasts a transaction to spend the bribes on
𝐴′ , where 𝐴′ can be another address of the
the public chain (𝑇 𝐴
attacker). When another miner (𝑜 or 𝑏) finds a block on the
public chain, the attacker selectively publishes the withheld
blocks in the private branch to cause a fork. A target pool
(the venal pool) can choose either to extend the attacker’s
branch or the public branch. When choosing to extend the
attacker’s branch, the target can claim the bribes in 𝐵. When
choosing the other one, the target cannot claim the bribes,
since the bribes have been transferred to 𝐴′ on the public
chain.
We consider “honest” opponents in our analysis. When
opponents are rational, it will become a bribery racing game
(Appendix-F). Besides, bribing can also be done via smart
contracts [17], out-of-band payment, or negative-fee mining
pool [2]. Here we only consider in-band payment since it is
the most practical method.
6.2 Modeling BSM
We first define the additional parameters in BSM:
𝛽𝑏: Computational power of the target pool (venal pool)
to be analyzed;
𝛾: The ratio of other miners that choose to mine on the
attacker’s branch;
𝜀: The fraction of reward in each round as bribes of
the attacker willing to pay per block when the target
pool chooses to accept bribes.
Notice that since the bribes are available to any miners
adopting the attacker’s branch, there can be multiple targets
in our model. An attacker’s reward will increase with more
targets (discussed latter). Here 𝛽𝑏 only represents one target
since we analyze the optimal strategy of one target. Other
targets are determined by 𝛾 (a larger 𝛾 with more targets).
The relationship between 𝛾 and 𝑐 (in Section 5.2) is 𝑐 =
𝛼 + 𝛾(1 − 𝛼 − 𝛽𝑏).
State machine and probability. For simplicity, we use
the selfish mining strategy in [9] to analyze the BSM. The
same analysis can also be applied to other optimal selfish
mining strategies [22, 38]. We show the state machine of BSM
in Fig. 8. The states represent the “lead of the attacker” (i.e.,
the difference between the length of attacker’s private branch
and the public branch). State 0 means that there is no branch,
and state 0′
𝑥 means “0-lead” racing: there are two branches of
length one (attacker’s branch and 𝑥’s branch). Specifically, 0′
𝑏
means the two branches are from the target pool and attacker,
and 0′
𝑜 means the two branches are from other miners and the
attacker. From state 0′
𝑥, there are five possible transitions,
all leading to state 0: (1) other miners mine a block on 𝑥’s
branch (probability (1 − 𝛾)(1 − 𝛼 − 𝛽)); (2) other miners
mine a block on attacker’s branch (probability 𝛾(1 − 𝛼 − 𝛽));
(3) attacker mines a block on attacker’s branch (probability
𝛼); (4) the target mines a block on 𝑥’s branch (probability
𝛽); and (5) the target mines a block on attacker’s branch
(probability 𝛽). At state 0′
𝑜, the target can choose either (4)
or (5). Choosing (4) means the target denying the bribes, and
choosing (5) means accepting. While at state 0′
𝑏, the target
must choose (4) to avoid the loss from the previously mined
block. Regardless of the target’s strategies, the probability