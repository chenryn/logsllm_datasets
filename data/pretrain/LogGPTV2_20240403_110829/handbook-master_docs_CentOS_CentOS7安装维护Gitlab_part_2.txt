```bash
user.password = '新密码'
user.password_confirmation = '新密码' 
```
保存密码
```bash
user.save!
```
完整的操作ruby脚本
```bash
user = User.where(id: 1).first
user.password = '新密码'
user.password_confirmation = '新密码'
user.save!
```
## 备份恢复
使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单,用一条命令即可创建完整的Gitlab备份:
### 修改备份文件默认目录
修改`/etc/gitlab/gitlab.rb`来修改默认存放备份文件的目录:
```bash
gitlab_rails['backup_path'] = '/mnt/backups'  
```
### 创建备份
```bash
gitlab-rake gitlab:backup:create
```
以上命令将在 `/var/opt/gitlab/backups` 目录下创建一个名称类似为xxxxxxxx_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的xxxxxx是备份创建的时间戳。
修改后使用gitlab-ctl reconfigure命令重载配置文件。
### 开始备份
这里放你的备份文件文件夹，和仓库源文件。
```bash
/var/opt/gitlab/backups                   # 备份文件文件夹
/var/opt/gitlab/git-data/repositories     # git仓库源文件
```
### 自动备份
通过crontab使用备份命令实现自动备份
```bash
crontab -e
# 每天2点备份gitlab数据
0 2 * * * /usr/bin/gitlab-rake gitlab:backup:create
0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create
```
上面两行保存之后，重新载入配置
```bash
service crond reload
# or
systemctl reload crond.service
```
### 备份保留七天
设置只保存最近7天的备份，编辑 /etc/gitlab/gitlab.rb 配置文件，找到如下代码，删除注释 `#` 保存
```bash
# /etc/gitlab/gitlab.rb 配置文件 修改下面这一行
gitlab_rails['backup_keep_time'] = 604800  
```
重新加载gitlab配置文件
```bash
sudo gitlab-ctl reconfigure  
```
### 开始恢复
迁移如同备份与恢复的步骤一样, 只需要将老服务器 `/var/opt/gitlab/backups` 目录下的备份文件拷贝到新服务器上的 `/var/opt/gitlab/backups` 即可(如果你没修改过默认备份目录的话)。 然后执行恢复命令。
如果修改了，首先进入备份 gitlab 的目录，这个目录是配置文件中的 `gitlab_rails['backup_path']` ，默认为 `/var/opt/gitlab/backups` 。
然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。
```bash
# 停止相关数据连接服务
gitlab-ctl stop unicorn
# ok: down: unicorn: 0s, normally up
gitlab-ctl stop sidekiq
# ok: down: sidekiq: 0s, normally up
# 从xxxxx编号备份中恢复
# 然后恢复数据，1406691018为备份文件的时间戳
gitlab-rake gitlab:backup:restore BACKUP=1406691018
# 新版本 1483533591_2017_01_04_gitlab_backup.tar
gitlab-rake gitlab:backup:restore BACKUP=1483533591_2017_01_04_gitlab_backup.tar
# 启动Gitlab
sudo gitlab-ctl start  
```
判断是执行实际操作的gitlab相关用户：git，没有得到足够的权限。依次执行命令：
```bash
# 恢复过程中没有权限
mkdir /var/opt/gitlab/backups
chown git /var/opt/gitlab/backups
chmod 700 /var/opt/gitlab/backups
# 恢复成功页面报没有权限的错误
sudo chown -R git:git /var/opt/gitlab/git-data/repositories
sudo chmod -R ug+rwX,o-rwx /var/opt/gitlab/git-data/repositories
sudo chmod -R ug-s /var/opt/gitlab/git-data/repositories
sudo find /var/opt/gitlab/git-data/repositories -type d -print0 | sudo xargs -0 chmod g+s
```
如果备份文件报没有权限，通过`ls -al`查看权限是不是`git`，而不是`root`，通过下面方式给`git`用户权限
```bash
sudo chown -R git:git 1483533591_2017_01_04_gitlab_backup.tar
```
## 连接数据库
```bash
# 登陆gitlab的安装服务查看配置文件
cat /var/opt/gitlab/gitlab-rails/etc/database.yml 
vim /var/opt/gitlab/postgresql/data/postgresql.conf
# listen_addresses = '192.168.1.125' # 修改监听地址为ip
# 或者改为 "*"
```
修改 `pg_hba.conf` 配置
```bash
vim  /var/opt/gitlab/postgresql/data/pg_hba.conf
# 将下面这一行添加到配置的最后面
# host    all    all    0.0.0.0/0    trust
```
如果不希望允许所有IP远程访问，则可以将上述配置项中的0.0.0.0设定为特定的IP值。
重启 `postgresql` 数据库
```
gitlab-ctl restart postgresql
```
查看 `/etc/passwd` 文件里边 `gitlab` 对应的系统用户
```bash
[root@localhost ~]$ cat /etc/passwd
...
gitlab-psql:x:493:490::/var/opt/gitlab/postgresql:/bin/sh  # gitlab的postgresql用户
```
## 一些常规目录
```bash
# 配置目录
/etc/gitlab/gitlab.rb
# 生成好的nginx配置
/var/opt/gitlab/nginx/conf/gitlab-http.conf
# 备份目录
/var/opt/gitlab/backups
```
## 使用HTTPS
直接将nginx配置复制到你自己的nginx配置中，停掉gitlab的nginx
```bash
cp /var/opt/gitlab/nginx/conf/gitlab-http.conf /usr/local/nginx/conf/vhost/
```
将你的SSL证书配置复制进去
```nginx
server {
  listen 443 ssl;
  server_name  g.doman.cn;
  ssl_certificate /etc/letsencrypt/live/*****/certificate.crt;
  ssl_certificate_key /etc/letsencrypt/live/*****/private.key;
  # .....
}
```
编辑`vi /usr/local/nginx/conf/nginx.conf`你的nginx配置，引用你复制过来的配置。
```nginx
http {
  # .....
  include vhost/gitlab-http.conf;
}
```
同时要把`/var/opt/gitlab/nginx/conf/nginx.conf`中的一些变量复制到自己的nginx配置中`nginx.conf`
```nginx
http {
  # .....
  log_format gitlab_access '$remote_addr - $remote_user [$time_local] "$request_method $filtered_request_uri $server_protocol" $status $body_bytes_sent "$filtered_http_referer" "$http_user_agent"';
  log_format gitlab_mattermost_access '$remote_addr - $remote_user [$time_local] "$request_method $filtered_request_uri $server_protocol" $status $body_bytes_sent "$filtered_http_referer" "$http_user_agent"';
  proxy_cache_path proxy_cache keys_zone=gitlab:10m max_size=1g levels=1:2;
  proxy_cache gitlab;
  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
  }
  # Remove private_token from the request URI
  # In:  /foo?private_token=unfiltered&authenticity_token=unfiltered&rss_token=unfiltered&...
  # Out: /foo?private_token=[FILTERED]&authenticity_token=unfiltered&rss_token=unfiltered&...
  map $request_uri $temp_request_uri_1 {
    default $request_uri;
    ~(?i)^(?.*)(?[\?&]private[\-_]token)=[^&]*(?.*)$ "$start$temp=[FILTERED]$rest";
  }
  # Remove authenticity_token from the request URI
  # In:  /foo?private_token=[FILTERED]&authenticity_token=unfiltered&rss_token=unfiltered&...
  # Out: /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=unfiltered&...
  map $temp_request_uri_1 $temp_request_uri_2 {
    default $temp_request_uri_1;
    ~(?i)^(?.*)(?[\?&]authenticity[\-_]token)=[^&]*(?.*)$ "$start$temp=[FILTERED]$rest";
  }
  # Remove rss_token from the request URI
  # In:  /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=unfiltered&...
  # Out: /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=[FILTERED]&...
  map $temp_request_uri_2 $filtered_request_uri {
    default $temp_request_uri_2;
    ~(?i)^(?.*)(?[\?&]rss[\-_]token)=[^&]*(?.*)$ "$start$temp=[FILTERED]$rest";
  }
  # A version of the referer without the query string
  map $http_referer $filtered_http_referer {
    default $http_referer;
    ~^(?.*)\? $temp;
  }
}
```
## 暴力升级
暴力升级前先备份，然后停止所有服务运行，记得备份的良好习惯
```bash
gitlab-ctl stop  # 停止所有 gitlab 组件：
# 更新gitlab包
yum update gitlab-ce
```
直接编辑源 /etc/yum.repos.d/gitlab-ce.repo，安装 GitLab 社区版
```bash
yum list gitlab-ce # 查看版本
sudo yum install gitlab-ce #(自动安装最新版)
sudo yum install gitlab-ce-8.15.2-ce.0.el6 #(安装指定版本)
```
注意：`10.7` 版本升级到 `11.x` 版本需要先升级到 `10.8` 版本
```bash
# 安装指定版本 10.8 的版本
sudo yum install gitlab-ce-10.8.0-ce.0.el6
```