Reverse-engineering 4G hotspots
for fun 😄, bugs 🐜 and net financial loss 💸.
Who am I?
Hardware at Pen Test Partners.
Spent a lot of time in routers and 
modems for the past few years.
Did a bunch of certs & a bunch of CVEs to 
prove something?
Tinkered with BitFi hacking last year.
Love to use pseudonyms. 
What am I talking about today?
4G hotspots AKA cellular routers!
1.
Why cellular routers?
2.
Attack surface/threat model.
3.
Example: ZTE MF910 (et al)
4.
Example: Netgear Nighthawk M1
5.
Miserable conclusion
Scary!
(apparently)
5G is coming - so what?
More consumers & business users will use 
cellular for daily TCP/IP.
More modems, dongles and routers in the 
world.
Not been much public scrutiny on 
consumer cellular networking gear in 
particular?
What’s up with cellular routers?
Not many vendors doing cellular kit.
Lots of code reuse in the industry. 
All computers are terrible.
There’s probably some bugs, eh?
Cellular Basics!
They do TCP/UDP/IP over cellular these days!!
Not inherently secure (obviously?)
APN ~= a LAN you don’t control.
Might be well configured!
Or might be crap.
Regardless, you’re still on a LAN
= not on Shodan
https://blog.radiatorsoftware.com/2016/07/flexible-m2miot-service-with-radiator.html
APN Security
On a well-conﬁgured APN 
(private/M2M/IoT-speciﬁc) we might see:
●
Client segregation
●
Outbound web ﬁltering/proxy
●
Internal DNS
●
IMEI ﬁltering
●
IMEI/ICCID pair ﬁltering
●
“Anomalous behaviour” detection
●
Anything you’d hope to see on any private 
corporate network!
Not always the case. 
Higher-Risk Attack Surface (Actual bugs)
Web conﬁguration interface
Old-fashioned RCE if exposed to the WAN.
Client-side (CSRF)
RCE on other TCP/UDP services
RCE via SMS/MMS??
If you know the phone #
Lower-Risk Attack Surface (Not really bugs?)
I like having a shell on my router though!
Any physical way to grab info or get shells:
USB
Flash memory
Bootloader
UART
JTAG/SWD
Whatever proprietary nightmare interface.
These are more often useful or interesting for 
us, rather than risky for day-to-day users.
What do I want from a router?
External baddies? No thanks! 😠
Bad JavaScript doing CSRFs? No thanks! 😠
I have regular router requirements
External baddies? No thanks! 😠
Bad JavaScript doing CSRFs? No thanks! 😠
But I want a shell! 😜
I want to do stuﬀ on my OWN routers for my OWN 
reasons! 😙
Mainly (but not always) ﬁnding bugs! 🐛
I have regular router requirements
Let’s do hacks
Generic Router Hacking Methodology
Do a bit of research: what’s been done 
before on this or similar devices?
Get ﬁrmware if available, get similar 
ﬁrmware if not.
Get a shell & ﬁnd bugs (or vice-versa).
(Not necessarily in this order)
Case Study One: “Low End” - ZTE MF910 
ZTE MF910 - Why this modem?
End of life
Cheap af (~€20?)
Qualcomm MDM SoC (really common)
ZTE are massive
ZTE make a lot of stuﬀ
ZTE MF910 - Caveats
ZTE MF910 - Caveats
There might be 0-days ahead.
“Might”, because ZTE don’t 
appear to be good at triage.
ZTE MF910 - Rough Report Process
Us: “The MF910 has lots of holes in it” 
ZTE: “MF910 is end of life” 
Us: “Please check your currently supported devices for the same issues”
ZTE: “The MF910 is end of life”
Us: “Ok, ﬁne, we did it, the MF920 has essentially the exact same issues”
ZTE MF910 - The state of this thing
ZTE: “Ok, here’s 2 CVEs 
which mention only the 
MF920, plus the 
disclosure won’t be 
indexed on our website”
ZTE’s End of Life Policy
“the internal delisting announcement of each product will be released in time, and 
the external delisting announcement will be released only when the customer 
explicitly requests it” 
“Unless the carrier customer requests the product delisting announcement,there is 
no public product delisting announcement”
ZTE won’t tell the public when devices are end of life, and will only make public 
announcements if a customer/Telco asks them to. 
Or you just have to e-mail them to ask for each speciﬁc product? Not entirely 
sure.
ZTE MF910
ZTE MF910 - Hardware Highlights
Qualcomm MDM9225 SoC
ZTE MF910 - Hardware Highlights
Qualcomm MDM9225 SoC
JSC JSFCBB3Y7ABBD Combination 
NAND/RAM
ZTE MF910 - Hardware Highlights
Qualcomm MDM9225 SoC
JSC JSFCBB3Y7ABBD Combination 
NAND/RAM
Nice test pad array
Micro USB interface
ZTE MF910 - The state of this thing
ZTE MF910 - Known Knowns
Put the MF910 into adb mode over USB. 
= unauthed root shell on the device over USB.
To trigger (post-auth) hit:
/goform/goform_set_device_process?
goformId=USB_MODE_SWITCH&usb_mode=6
$ adb shell
sh-4.2# whoami
root
Sources:
https://blog.hqcodeshop.fi/archives/255-ZTE-MF910-Wireless-Router-reviewed.html#c2189
https://packetstormsecurity.com/files/140674/Telstra-4Gx-Portable-Router-Persistent-Root-Shell.html
https://4pda.ru/forum/lofiversion/index.php?t543708-2480.html
etc...
ZTE MF910 - Known Knowns
Very well-known.
Present in quite a few 
diﬀerent oﬃcial ZTE models.
I’ve also seen it in a few 
“non-oﬃcial” ZTE-built devices 
too.
ZTE MF910 - goform_set_cmd_process - MODE_SWITCH
MODE_SWITCH does basically exactly the same thing (but post-auth). 
switchCmd parameter takes the value FACTORY. 
echo %s > /sys/bl/ah/debug_enable -> system() 
ZTE MF910 - “Fun” is subjective?
ZTE MF910 - System architecture
The system itself is really familiar, nothing particularly outlandishly interesting.
ARM core, running old-ish embedded Linux (like most routers)
sh-4.2# dmesg    
[    0.000000] Booting Linux on physical CPU 0
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Linux version 3.4.0+  (scl@SCL_XA242_191) (gcc version 4.6.3 
20111117 (prerelease) (GCC) ) #1 PREEMPT Fri May 30 19:57:07 CST 2014
[    0.000000] CPU: ARMv7 Processor [410fc051] revision 1 (ARMv7) , cr=10c53c7d
[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing 
instruction cache
[    0.000000] Machine: Qualcomm MSM 9625  (Flattened Device Tree), model: 
Qualcomm MSM 9625V2.1 CDP
...
ZTE MF910 - Root password set on boot
sh-4.2# cat /etc/rcS-zte 
#!/bin/sh
...
set_passwd()
{
echo "root:zte9x15" > /tmp/tmppw
chpasswd < /tmp/tmppw
rm -rf /tmp/tmppw
}
set_passwd
#start up telnetd for debug use
telnetd
...
Default root password is zte9x15 (maybe some vendors set a diﬀerent one?)
If you ﬂush iptables/delete the rules from rcS scripts you can get in over SSH.
ZTE MF910 - System architecture
# ls -al /usr/bin
total 9866
...
-rwxr-xr-x    1 root     root         39064 Aug 28  2014 QCMAP_CLI
-rwxr-xr-x    1 root     root        171928 Aug 28  2014 
QCMAP_ConnectionManager
-rwxr-xr-x    1 root     root          7636 Aug 28  2014 QCMAP_StaInterface
-rwxr-xr-x    1 root     root         73836 Aug 28  2014 QCMAP_Web_CLIENT
...
-rwxr-xr-x    1 root     root          8196 Aug 28  2014 diag_klog
-rwxr-xr-x    1 root     root         16932 Aug 28  2014 diag_mdlog
-rwxr-xr-x    1 root     root          8420 Aug 28  2014 diag_uart_log
-rwxr-xr-x    1 root     root          7932 Aug 28  2014 diagrebootapp
...
-rwxr-xr-x    1 root     root        188248 Aug 28  2014 gdbserver
LOADS of stock binaries and debug binaries including what look like 
some Qualcomm DIAG test binaries and gdbserver.
ZTE MF910 - At least there’s some iptables rules
sh-4.2# iptables -S   
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N fota_filter
-N macipport_filter
-N wifi_filter
-A INPUT -p udp -m udp --dport 22 -j DROP
-A INPUT -p tcp -m tcp --dport 22 -j DROP
-A INPUT -j wifi_filter
-A INPUT -j fota_filter
-A INPUT -i rmnet0 -p icmp -m icmp --icmp-type 0 -j ACCEPT
-A INPUT -i rmnet0 -p tcp -m tcp --dport 80 -j DROP
-A INPUT -i rmnet0 -p icmp -j DROP
-A INPUT -i rmnet0 -p tcp -m tcp --dport 22 -j DROP
-A INPUT -i rmnet0 -p udp -m udp --dport 22 -j DROP
...
There’s a few iptables rules, but it’s a default ACCEPT policy...
ZTE MF910 - At least there’s some iptables rules
...
-A INPUT -i rmnet0 -p tcp -m tcp --dport 23 -j DROP
-A INPUT -i rmnet0 -p udp -m udp --dport 23 -j DROP
-A INPUT -i rmnet0 -p tcp -m tcp --dport 53 -j DROP
-A INPUT -i rmnet0 -p udp -m udp --dport 53 -j DROP
-A INPUT -i rmnet0 -p tcp -m tcp --dport 1900 -j DROP
-A INPUT -i rmnet0 -p udp -m udp --dport 1900 -j DROP
-A FORWARD -j macipport_filter
Blocking some ports which aren’t used, & not blocking everything.
ZTE MF910 - Potential TCP/UDP attack surface
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name 
tcp        0      0 127.0.0.1:5037          0.0.0.0:*               LISTEN      254/adbd
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      569/zte_topsw_goahe
tcp        0      0 0.0.0.0:53              0.0.0.0:*               LISTEN      653/dnsmasq
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      290/dropbear
tcp        0      0 :::53                   :::*                    LISTEN      653/dnsmasq
tcp        0      0 :::22                   :::*                    LISTEN      290/dropbear
tcp        0      0 :::23                   :::*                    LISTEN      535/telnetd
udp        0    704 0.0.0.0:42803           0.0.0.0:*                           531/syslogd
udp        0      0 0.0.0.0:53              0.0.0.0:*                           653/dnsmasq
udp        0      0 0.0.0.0:67              0.0.0.0:*                           653/dnsmasq
udp        0      0 0.0.0.0:4500            0.0.0.0:*                           603/zte_topsw_wispr
udp        0      0 :::53                   :::*                                653/dnsmasq