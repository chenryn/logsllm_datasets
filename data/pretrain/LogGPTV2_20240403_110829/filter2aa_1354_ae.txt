        params = next(account_set)
        t = threading.Thread(target=run, args=(params,))
        t.start()
if __name__ == '__main__':
    main()
function level1(address target, uint hash, uint block) {
  require(hash == block.blockhash(block.blocknumber));
  require(block.blockhash(block) == 0);
  require((target.codesize) & 0xff == 0);
  passed1[target] == 1;
}
 block.blockhash(block.blocknumber) hash, 0.  block 
0.
level2 :
,  patch , .
Script:
function level2(address target, contract cont) {
  require((address(cont).codesize) & 0xff == 9);
  require(cont.getvalue() == block.difficulty);
  passed2[target] == 2;
}
const Web3 = require('web3');
const Tx = require('ethereumjs-tx');
const fs = require('fs');
const WalletProvider = require("truffle-wallet-provider");
const contract = "774Fea9014010a62017C739EAcB760D8E9B40B75";
const mine = '9Fd6Bd7F75fB554A206dFa952cCa508d07e974C8';
const check1 = '1af36a78';
const check2 = 'e2e79a02';
const flag = 'd4d96ac5';
var patched = 
'608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffff
ffffffffffffffffffffffffff021916908373fffffffffffffffffffffffffffffffffffff
fff160217905550610209806100606000396000f30060806040526004361061004c57600035
7c0100000000000000000000000000000000000000000000000000000000900463ffffffff1
6806341c0e1b51461004e57806369bd01c414610065575b005b34801561005a57600080fd5b
50610063610090565b005b34801561007157600080fd5b5061007a610125565b60405180828
15260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffff
ffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373f
fffffffffffffffffffffffffffffffffffffff161415156100eb57600080fd5b6000809054
906101000a900473ffffffffffffffffffffffffffffffffffffffff1673fffffffffffffff
fffffffffffffffffffffffff16ff5b6000449050905600a165627a7a72305820df99b71d2b
f5b4a2dd8b67334c2e93e813a8dddf7ebac166db433f570210329a0029fffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffff';
String.prototype.trim = function() {
    return String(this).replace(/^\s+|\s+$/g, '');
};
String.prototype.leftJustify = function( length, char ) {
    var fill = [];
    while ( fill.length + this.length  zero = 0
*Main Crypto Helper Image> encryptoData $ replicate 30 zero
[186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,20
6,151,164,193,208,200,210,204,190,202,146,193,207,200]
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import struct, os, sys, itertools, IPython
from PIL import Image
def main():
    inp = Image.open("./input.png")
    outp = Image.open("./output.png")
    ip = inp.load()
    op = outp.load()
    w, h = inp.size
    assert (w, h) == outp.size
    rmatrix = []
    for hi in xrange(h):
        result = []
        for wid in xrange(w):
            assert ip[wid, hi][2] == op[wid, hi][2]
            result.append((ip[wid, hi][0] ^ op[wid, hi][0], ip[wid, hi][1] 
^ op[wid, hi][1]))
        rmatrix.append(result)
    datachain = list(itertools.chain.from_iterable(rmatrix))
    data = []
    idx = 0
    while idx + 4 < len(datachain):
        byte = 0
        for i in xrange(4):
            byte = byte << 2
            byte += datachain[idx + i][1] + (datachain[idx + i][0] * 2)
        data.append(byte)
        idx += 4
    print len(data)
    keystream = 
[186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,20
6,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,
52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,1
01,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,2
05,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,5
7,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57
,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,
198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99
,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,
99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156
,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,
49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,9
9,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,19
0,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,5
5,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,
102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,2
03,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,
205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,9
8,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,
132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193
,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,
102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215
,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,14
6,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,5
6,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,15
8,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,2
02,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98
,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,1
61,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,
190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,1
01,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,
206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210
,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53
,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204
,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,20
0,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,
51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,19
2,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,2
08,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48
,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,1
54,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,
193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,
51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,
153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151
,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57
,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97
,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,20
6,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,
52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,1
01,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,2
05,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,5
7,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57
,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,
198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99
,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,
99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156
,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,
49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,9
9,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,203,19
0,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,205,5
5,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,
102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,132,2
03,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193,202,
205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,9
8,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215,154,
132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,146,193
,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,
102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,158,215
,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,202,14
6,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,5
6,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,161,15
8,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,190,2
02,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98
,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,206,1
61,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210,204,
190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,1
01,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204,149,
206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,200,210
,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,51,53
,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,192,204
,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,208,20
0,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48,100,
51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,154,19
2,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,193,2
08,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,51,48
,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,153,1
54,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151,164,
193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57,101,
51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97,186,
153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,206,151
,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,52,57
,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97
,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,198,205,20
6,151,164,193,208,200,210,204,190,202,146,193,202,205,55,48,49,99,99,57,97,
52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,1
01,97,186,153,154,192,204,149,206,161,158,215,154,132,203,190,156,201,195,2
00,203,146,161,196,213,205,215,201,187,207,151,196,207,200]
    r = ''
    for i in xrange(len(keystream)):
        r += chr(data[i] ^ keystream[i])
    print r
    IPython.embed()
    return
main()