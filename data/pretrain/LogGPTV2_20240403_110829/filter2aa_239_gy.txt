视图；主要的区别在于视图组件与控制器并不相关。这使得它很容易用于多个控制器。视
图组件非常有用的例子有菜单的动态导航、登录面板或博客的侧栏内容。这些场景都独立
于单个控制器。
与控制器和视图一样，视图组件也有两个部分。在视图组件中，控制器的功能由派生
自ViewComponent的类（或带有属性ViewComponent的POCO类）接管。用户界面的定义
类似于视图，但是调用视图组件的方法是不同的。
下面的代码段定义了一个派生自基类ViewComponent的视图组件。这个类利用前面在
Startup类中注册的EventsAndMenusContext类型，可用于依赖注入。其工作原理类似于带
有构造函数注入的控制器。InvokeAsync方法定义为从显示视图组件的视图中调用。这个
方法可以拥有任意数量和类型的参数，因为IViewComponentHelper接口定义的方法使用
params关键字指定了数量灵活的参数。除了使用异步方法实现之外，还可以以同步方式实
现该方法，返回IViewComponentResult而不是Task。然而，通常
最好使用异步变体，例如用于访问数据库。视图组件需要存储在ViewComponents目录
中。这个目录本身可以放在项目中的任何地方（代码文件
MVCSampleApp/ViewComponents/EventListViewComponent.cs）：
    public class EventListViewComponent : ViewComponent
    {
      private readonly EventsAndMenusContext _context;
      public EventListViewComponent(EventsAndMenusContext context)
      {
        _context = context;
      }
      public Task InvokeAsync
(DateTime from, DateTime to)
      {
        return Task.FromResult(
        View(EventsByDateRange(from, to)));
      }
      private IEnumerable EventsByDateRange(DateTime from, DateTime to)
      {
        return _context.Events.Where(e => e.Day >= from && e.Day 
    Formula 1 Calendar
      @foreach (var ev in Model)
      {
        @ev.Day.ToString("D")@ev.Text
      }
现在完成了视图组件后，可以调用InvokeAsync方法显示它。Component是视图的一个
动态创建的属性，返回一个实现了IViewComponentHelper的对象。IViewComponentHelper
允许调用同步或异步方法，例如Invoke、InvokeAsync、RenderInvoke和
RenderInvokeAsync。当然，只能调用由视图组件实现的这些方法，并且只使用相应的参
数（代码文件MVCSampleApp/Views/ViewsDemo/UseViewComponent.cshtml）：
    @{
      ViewBag.Title = "View Components Sample";
    }
    @ViewBag.Title
      @await Component.InvokeAsync("EventList", new DateTime(2016, 4, 10),
        new DateTime(2016, 4, 24))
运行应用程序，呈现的视图组件如图41-6所示。
图41-6
41.4.7 在视图中使用依赖注入
如果服务需要直接出现在视图中，可以使用inject关键字注入：
    @using MVCSampleApp.Services
    @inject ISampleService sampleService
        @string.Join("＊", sampleService.GetSampleStrings()
)
此时，最好使用AddScoped方法注册服务。如前所述，以这种方式注册服务意味着只
为一个HTTP请求实例化一次。使用AddScoped在控制器和视图中注入相同的服务，也只
为一个请求实例化一次。
41.4.8 为多个视图导入名称空间
所有之前关于视图的示例都使用using关键字打开了所需的所有名称空间。除了为每
个视图打开名称空间之外，还可以使用Visual Studio项模板MVC View Imports Page创建一
个文件（_ViewImports.cshml），它定义了所有的using声明（代码文件
MVCSampleApp/Views/_ViewImports. cshtml）：
    @using MVCSampleApp.Models
    @using MVCSampleApp.Services
有了这个文件，就不需要在所有视图中添加所有的using关键字。
41.5 从客户端提交数据
到现在为止，在客户端只是使用HTTP 
GET请求来获取服务器端的HTML代码。那
么，如何从客户端发送表单数据？
为提交表单数据，可为控制器SubmitData创建视图CreateMenu。该视图包含一个
HTML表单元素，它定义了应把什么数据发送给服务器。表单方法声明为HTTP 
POST请
求。定义输入字段的input元素的名称全部与Menu类型的属性对应（代码文件
MVCSampleApp/Views/SubmitData/Create-Menu.cshtml）：
    @{
      ViewBag.Title = "Create Menu";
    }
    Create Menu
      Menu
      Id:
      Text:
      Price:
      Category:
      Submit
图41-7显示了在浏览器中打开的页面。
图41-7
在SubmitData控制器内，创建了两个CreateMenu动作方法：一个用于HTTP 
GET请
求，另一个用于HTTP POST请求。因为C#中存在同名的不同方法，所以这些方法的参数
数量或参数类型必须不同。动作方法也存在这种要求。另外，动作方法还需要与HTTP请
求方法区分开。默认情况下，HTTP请求方法是GET，应用HttpPost特性后，请求方法是
POST。为读取HTTP 
POST数据，可以使用Request对象中的信息。但是，定义带参数的
CreateMenu方法要简单多了。参数的名称与表单字段的名称匹配（代码文件
MVCSampleApp/Controllers/SubmitDataController.cs）：
    public IActionResult Index() => View();
    public IActionResult CreateMenu() => View();
    [HttpPost]
    public IActionResult CreateMenu(int id, string text, double price,
        string category)
    {
      var m = new Menu { Id = id, Text = text, Price = price };
      ViewBag.Info =
        $"menu created: {m.Text}, Price: {m.Price}, category: {m.Category}";
      return View("Index");
    }
为了显示结果，仅显示ViewBag.Info的值（代码文件
MVCSampleApp/Views/SubmitData/Index. cshtml）：
    @ViewBag.Info
41.5.1 模型绑定器
除了在动作方法中使用多个参数，还可以使用类型，类型的属性与输入的字段名称匹
配（代码文件MVCSampleApp/Controllers/SubmitDataController.cs）：
    [HttpPost]
    public IActionResult CreateMenu2(Menu m
)
    {
      ViewBag.Info =
        $"menu created: {m.Text}, Price: {m.Price}, category: {m.Category}";
      return View("Index");
    }
提交表单数据时，会调用CreateMenu方法，它在Index视图中显示了提交的菜单数
据，如图41-8所示。
图41-8
模型绑定器负责传输HTTP POST请求中的数据。模型绑定器实现IModelBinder接口。
默认情况下，使用FormCollectionModelBinder类将输入字段绑定到模型。这个绑定器支持
基本类型、模型类（如Menu类型）以及实现了ICollection、IList和
IDictionary的集合。
如果并不是所有参数类型的属性都应从模型绑定器中填充，此时可以使用Bind特性。
通过这个特性，可以指定一个属性名列表，这些属性被应用于绑定。
还可以使用不带参数的动作方法将输入数据传递给模型，如下面的代码段所示。这段
代码创建了Menu类的一个新实例，并把这个实例传递给Controller基类的
TryUpdateModelAsync方法。如果在更新后，被更新的模型处于无效状态，
TryUpdateModelAsync就返回false：
    [HttpPost]
    public async Task CreateMenu3Result()
    {
      var m = new Menu();
      bool updated = await TryUpdateModelAsync(m);
      if (updated)
      {
        ViewBag.Info =
        $"menu created: {m.Text}, Price: {m.Price}, category: {m.Category}";
      return View("Index");
      }
      else
      {
        return View("Error");
      }
    }
41.5.2 注解和验证
可以向模型类型添加一些注解，当更新数据时，会将这些注解用于验证。名称空间
System. 
ComponentModel.DataAnnotations中包含的特性可用来为客户端数据指定一些信
息，或者用来进行验证。
使用其中的一些特性来修改Menu类型（代码文件
MVCSampleApp/Models/Menu.cs）：
    public class Menu
    {
      public int Id { get; set; }
      [Required, StringLength(50)]
      public string Text { get; set; }
      [Display(Name="Price"), DisplayFormat(DataFormatString="{0:C}")]
      public double Price { get; set; }
      [DataType(DataType.Date)]
      public DateTime Date { get; set; }
      [StringLength(10)]
      public string Category { get; set; }
    }
可用于验证的特性包括：用于比较不同属性的CompareAttribute、用于验证有效信用
卡号的CreditCardAttribute、用来验证电子邮件地址的EmailAddressAttribute、用来比较输
入与枚举值的EnumDataTypeAttribute以及用来验证电话号码的PhoneAttribute。
还可以使用其他特性来获得要显示的值或者用在错误消息中的值，如
DataTypeAttribute和DisplayFormatAttribute。
为了使用验证特性，可以在动作方法内使用ModelState.IsValid来验证模型的状态，如
下所示（代码文件MVCSampleApp/Controllers/SumitDataController.cs）：
    [HttpPost]
    public IActionResult CreateMenu4(Menu m)
    {
      if (ModelState.IsValid)
      {
        ViewBag.Info =
        $"menu created: {m.Text}, Price: {m.Price}, category: {m.Category}";
      }
      else
      {
        ViewBag.Info = "not valid";
      }
      return View("Index");
    }
如果使用由工具生成的模型类，那么很难给属性添加特性。工具生成的类被定义为部
分类，可以通过为其添加属性和方法、实现额外的接口或者实现它们使用的部分方法来扩
展这些类。对于已有的属性和方法，如果不能修改类型的源代码，则是不能添加特性的。
但是在这种情况下，还是可以利用一些帮助。现在假定Menu类是一个工具生成的部分
类。可以用一个不同名的新类（如MenuMetadata）定义与实体类相同的属性并添加注
解：
    public class MenuMetadata
    {
      public int Id { get; set; }
      [Required, StringLength(25)]
      public string Text { get; set; }
      [Display(Name="Price"), DisplayFormat(DataFormatString="{0:C}")]
      public double Price { get; set; }
      [DataType(DataType.Date)]
      public DateTime Date { get; set; }
      [StringLength(10)]
      public string Category { get; set; }
    }
MenuMetadata类必须链接到Menu类。对于工具生成的部分类，可以在同一个名称空
间中创建另一个部分类型，将MetadataType特性添加到创建该连接的类型定义中：
    [MetadataType(typeof(MenuMetadata))]
    public partial class Menu
    {
    }
HTML辅助方法也可以使用注解来向客户端添加信息。
41.6 使用HTML Helper
HTML 
Helper是创建HTML代码的辅助程序。可以在视图中通过Razor语法直接使用
它们。
Html是视图基类RazorPage的一个属性，它的类型是IHtmlHelper。HTML辅助方法被
实现为扩展方法，用于扩展IHtmlHelper接口。
类InputExtensions定义了用于创建复选框、密码控件、单选按钮和文本框控件的
HTML辅助方法。辅助方法Action和RenderAction由类ChildActionExtensions定义。用于显
示的辅助方法由类DisplayExtensions定义。用于HTML表单的辅助方法由类FormExtensions
定义。
接下来就看一些使用HTML Helper的例子。
41.6.1 简单的Helper
下面的代码段使用了HTML辅助方法BeginForm、Label和CheckBox。BeginForm开始
一个表单元素。还有一个用于结束表单元素的EndForm。示例使用了BeginForm方法返回
的MvcForm所实现的IDisposable接口。在释放MvcForm时，会调用EndForm。因此，可以
将BeginForm方法放在一条using语句中，在闭花括号处结束表单。DisplayName方法直接
返回参数的内容，CheckBox是一个input元素，其type特性被设置为checkbox（代码文件
MVCSampleApp/Views/HelperMethods/SimpleHelper.cshtml）：
    @using (Html.BeginForm()) {
      @Html.DisplayName("Check this (or not)")
      @Html.CheckBox("check1")
    }
得到的HTML代码如下所示。CheckBox方法创建了两个同名的input元素，其中一个
设置为隐藏。其原因是，如果一个复选框的值为false，那么浏览器不会把与之对应的信息
放到表单内容中传递给服务器。只有选中的复选框的值才会传递给服务器。这种HTML特
征在自动绑定到动作方法的参数时会产生问题。简单的解决办法是使用辅助方法
CheckBox。该方法会创建一个同名但被隐藏的input元素，并将其设为false。如果没有选
中该复选框，则会把隐藏的input元素传递给服务器，绑定false值。如果选中了复选框，则
同名的两个input元素都会传递给服务器。第一个input元素设为true，第二个设为false。在
自动绑定时，只选择第一个input元素进行绑定：
      Check this (or not)
41.6.2 使用模型数据
辅助方法可以使用模型数据。下例创建了一个Menu对象。本章前面在Models目录中
声明了此类型。然后，将该Menu对象作为模型传递给视图（代码文件
MVCSampleApp/Controllers/HTML-HelpersController.cs）：
    public IActionResult HelperWithMenu() => View(GetSampleMenu());
    private Menu GetSampleMenu() =>
      new Menu
      {
        Id = 1,