title:Dymo: Tracking Dynamic Code Identity
author:Bob Gilbert and
Richard A. Kemmerer and
Christopher Kruegel and
Giovanni Vigna
Dymo: Tracking Dynamic Code Identity
Bob Gilbert, Richard Kemmerer, Christopher Kruegel, and Giovanni Vigna
Computer Security Group
Department of Computer Science
University of California, Santa Barbara
{rgilbert,kemm,chris,vigna}@cs.ucsb.edu
Abstract. Code identity is a primitive that allows an entity to recog-
nize a known, trusted application as it executes. This primitive supports
trusted computing mechanisms such as sealed storage and remote at-
testation. Unfortunately, there is a generally acknowledged limitation in
the implementation of current code identity mechanisms in that they are
fundamentally static. That is, code identity is captured at program load-
time and, thus, does not reﬂect the dynamic nature of executing code as
it changes over the course of its run-time. As a result, when a running
process is altered, for example, because of an exploit or through injected,
malicious code, its identity is not updated to reﬂect this change.
In this paper, we present Dymo, a system that provides a dynamic code
identity primitive that tracks the run-time integrity of a process and can
be used to detect code integrity attacks. To this end, a host-based com-
ponent computes an identity label that reﬂects the executable memory
regions of running applications (including dynamically generated code).
These labels can be used by the operating system to enforce application-
based access control policies. Moreover, to demonstrate a practical ap-
plication of our approach, we implemented an extension to Dymo that
labels network packets with information about the process that origi-
nated the traﬃc. Such provenance information is useful for distinguishing
between legitimate and malicious activity at the network level.
Keywords: code identity, process integrity, access control
1
Introduction
Modern operating systems implement user-based authorization for access con-
trol, thus giving processes the same access rights as the user account under which
they run. This violates the principle of least privilege [21] because processes are
implicitly given more access rights than they need, which is particularly prob-
lematic in the case of malware. A more robust strategy to mitigate the eﬀects
of running malware is to make access control decisions based on the identity of
the executing software. That is, instead of granting the same set of privileges
to all applications that are run by a user, it would be beneﬁcial to diﬀerentiate
between programs and to assign diﬀerent privileges based on their individual
needs. For example, a security policy could enforce that only a particular (un-
modiﬁed) word processing application should access a sensitive document, or an
online banking application might refuse to carry out a transaction on behalf of
a user unless it can identify that the user is executing a trusted web browser.
An even stronger policy could deﬁne a set of trusted (whitelisted) applications,
while the execution of any other code would be denied.
Enforcing ﬁne-grained access control policies on an application basis requires
a strong notion of code identity [18]. Code identity is a primitive that allows an
entity (for example, a security enforcement component) to recognize a known,
trusted application as it executes. Code identity is the fundamental primitive
that enables trusted computing mechanisms such as sealed storage and remote
attestation [20].
The state-of-the-art in implementing code identity involves taking measure-
ments of a process by computing a cryptographic hash over the executable ﬁle, its
load-time dependencies (libraries), and perhaps its conﬁguration. The measure-
ments are usually taken when a process is loaded, but just before it executes [18].
A measurement is computed at this time because it includes the contents of the
entire executable ﬁle, which contains state that may change over the course of ex-
ecution (e.g., the data segment). Taking a measurement after this state has been
altered would make it diﬃcult to assign a global meaning to the measurement
(i.e., the code identity of the same application would appear to change).
Since the code identity primitive is fundamentally static, it fails to capture
the true run-time identity of a process. Parno et al. acknowledge this limitation,
and they agree that this is problematic because it makes it possible to exploit
a running process without an update to the identity [18]. For example, if an
attacker is able to exploit a buﬀer overﬂow vulnerability and execute arbitrary
code in the context of a process, no measurement will be taken and, thus, its
code identity will be the same as if it had not been exploited.
In this paper, we address the problem of static code identity, and we propose
Dymo, a system that provides a dynamic code identity primitive that contin-
uously tracks the run-time integrity of a process. In particular, we introduce a
host-based component that binds each process to an identity label that imple-
ments dynamic code identity by encapsulating all of the code that the process
attempts to execute. More precisely, for each process, our system computes a
cryptographic hash over each executable region in the process’ address space.
The individual hash values are collected and associated with the corresponding
process. This yields an identity label that reﬂects the executable code that the
application can run, including dynamic changes to code regions such as the addi-
tion of libraries that are loaded at run-time or code that is generated on-the-ﬂy,
for example, by a JIT compiler or an exploit that targets a memory vulnerability.
Identity labels have a variety of practical uses. For example, labels can be used
in a host-based application whitelisting solution that can terminate processes
when their run-time integrity is compromised (e.g., as the result of a drive-by
download attack against a web browser). Also, identity labels can enable ﬁne-
grained access control policies such as only granting network access to speciﬁcally
authorized programs (e.g., known web browsers and e-mail clients).
To demonstrate how the use of identity labels can be extended into the net-
work, we implemented an extension to Dymo that provides provenance infor-
mation to all outgoing network connections. More precisely, we extended Dymo
with a component that marks each TCP connection and UDP packet with a
compressed identity label that corresponds to the application code that has gen-
erated the connection (or packet). This label is embedded in the network traﬃc
at the IP layer, and, therefore, it can be easily inspected by both network devices
and by the host that receives the traﬃc.
We have implemented our system as a kernel extension for Windows XP and
tested it on several hardware platforms (a “bare metal” installation and two vir-
tualized environments). Our experiments show that identity labels are the same
when the same application is run on diﬀerent systems. Moreover, when a mal-
ware program or an exploit attempts to inject code into a legitimate application,
the label for this application is correctly updated.
The contributions of this paper are the following:
– We propose a novel approach to track the run-time integrity of a process by
implementing a dynamic code identity primitive. The primitive has a variety
of applications, at both the OS and the network levels, to enable ﬁne-grained
access control decisions based on dynamic process integrity.
– We describe the design and implementation of Dymo, a system that extends
the Windows kernel to implement the proposed integrity tracking approach.
– We demonstrate a practical application of the dynamic code identity primi-
tive by extending Dymo to label network packets based on the application
code that is the source of the traﬃc. This information is useful for distin-
guishing between legitimate and malicious activity at the network level.
– We discuss our experimental results, which show that our system is able to
track dynamic process integrity in a precise and eﬃcient manner. Moreover,
we show that identity labels are robust and correctly reﬂect cases in which
malicious code tampers with legitimate programs.
2 System Overview
In this section, we ﬁrst discuss the requirements for our identity labels in more
detail. Then, we present an overview of Dymo, our system that implements these
labels and provides dynamic code identity for processes.
2.1 System Requirements
A system that aims to provide dynamic code identity must fulﬁll three key re-
quirements: First, identity labels must be precise. That is, a label must uniquely
identify a running application. This implies that two diﬀerent applications re-
ceive diﬀerent labels. Moreover, it also means that a particular application re-
ceives the same label when executed multiple times on diﬀerent hardware plat-
forms or with slightly diﬀerent dynamic libraries. This is crucial in order to write
meaningful security polices that assign permissions on the basis of applications.
The second requirement is that identity labels must be secure. That is, it must
be impossible (or very diﬃcult) for a malicious process to assume the identity
of a legitimate application. Otherwise, a malicious process can easily bypass
any security enforcement mechanism that is based on code identity simply by
impersonating an application that has the desired permissions.
The third requirement is that the implementation of the mechanism that
computes identity labels must be eﬃcient. Program execution on current oper-
ating systems is highly dynamic, and events in which a process adds additional
code to its address space (typically in the form of dynamic libraries) are com-
mon. Also, the access permissions of code segments are changed surprisingly
often. Thus, any mechanism that aims to maintain an up-to-date view of the
running code will be invoked frequently, and, thus, must be fast.
2.2 System Design
To capture the dynamic identity of code, and to compute identity labels, we
propose an approach that dynamically tracks all executable code regions in a
process’ address space. Typically, these code regions contain the instructions of
the application code as well as the code sections of libraries, including those that
are dynamically loaded. Dymo computes a cryptographic hash over the content
of each code section, and it uses the set of hashes as the process’ identity label.
Precise Label Computation. Dymo ensures the precision of identity labels, even
in cases where an application loads slightly diﬀerent sets of libraries on diﬀerent
executions. This can happen when applications load certain libraries only when
the need arises, for example, when the user visits a web page that requires a
particular browser plug-in. In such cases, two identity labels for two executions
of the same application will contain an identical set of hashes for those libraries
that are present in both processes, while one label will have extra hashes for any
additional libraries that are loaded.
Typically, executable regions in a process’ address space correspond to code
sections of the binary or libraries. However, this is not always the case. For ex-
ample, malicious processes can inject code into running applications (e.g., using
Windows API functions such as VirtualAllocEx and WriteProcessMemory).
In addition, when a legitimate application has a security vulnerability (such as
a buﬀer overﬂow), it is possible to inject shellcode into the application, which
alters its behavior. Our identity labels encapsulate such code, because Dymo
keeps track of all executable memory regions, independent of the way in which
these regions were created.
Handling Dynamically Generated Code. An important diﬀerence from previous
systems that compute hashes of code regions to establish code identity is that
Dymo supports dynamically generated code. For this, one could simply choose
to hash code regions that are dynamically created (similar to regular program
code). Unfortunately, it is likely that such code regions change between program
executions. For example, consider a just-in-time compiler for JavaScript that
runs in a browser. Obviously, the code that is generated by this JIT compiler
component depends on the web pages that the user visits. Thus, hashes asso-
ciated with these code regions likely change very frequently. As a result, even
though the hash would precisely capture the generated code, its value is essen-
tially meaningless. For this reason, we decided not to hash dynamic code regions
directly. Instead, whenever there are dynamically created, executable memory
regions, we add information to the label that reﬂects the generated code and
the library responsible for it. The rationale is that we want to allow only cer-
tain known (and trusted) parts of the application code to dynamically generate
instructions. However, there are no restrictions on the actual instructions that
these regions can contain. While this opens a small window of opportunity for
an attacker, a successful exploit requires one to ﬁnd a vulnerability in a library
that is permitted to generate code, and this vulnerability must be such that it
allows one to inject data into executable memory regions that this library has
previously allocated. This makes it very diﬃcult for a malicious program or an
attacker to coerce a legitimate program to execute unwanted code.
Secure Label Computation. Identity labels must be secure against forging. This
requires that malicious processes cannot bypass or tamper with the component
that computes these labels. In other words, Dymo must execute at a higher
privilege than malicious code that may tamper with the label computation.
One possible way to implement Dymo is inside a virtual machine monitor
(VMM). This makes it easy to argue that the component is protected from the
guest OS and non-bypassable, and it would also be a convenient location to
implement our extensions, since we could use an open-source VMM. Another
way to implement Dymo is as part of the operating system kernel. In this case,
the threat model has to be somewhat weaker, because one must assume that
malicious processes only run with regular user (non-administrator) privileges.
Moreover, this venue requires more implementation eﬀort given that there is no
source code available for Windows. However, on the upside, implementing Dymo
as part of the operating system kernel makes real-world deployment much more
feasible, since it does not require users to run an additional, trusted layer (such
as a virtual machine) underneath the OS.
For this work, we invested a substantial eﬀort to demonstrate that the sys-
tem can be implemented as part of the Windows operating system. This was a
deliberate design decision that makes Dymo easier to deploy. We also believe
that it is reasonable to assume that the attacker does not have root privileges.
With the latest releases of its OS, Microsoft is aggressively pushing towards a
model where users are no longer authenticated as administrator but run as regu-
lar users [17]. Also, recent studies have shown that malware increasingly adapts