# Preface

This book is dedicated to PostgreSQL, the most advanced open-source database. Originating in academia, PostgreSQL has experienced explosive growth on the Internet. The remarkable advancements over the past four years, guided by a global team of developers, are a testament to their vision and the success PostgreSQL has achieved.

The book is designed to guide the reader from their first database query through the complex queries needed to solve real-world problems. No prior knowledge of database theory or practice is required, although a basic understanding of operating system capabilities, such as the ability to type at an operating system prompt, is expected.

Starting with a brief history of PostgreSQL, the book progresses from simple queries to the most important database commands. Common issues are addressed early, which should help users avoid getting stuck with failing queries. The author, having seen many bug reports over the years, has attempted to warn readers about common pitfalls.

With a solid foundation established, additional commands are introduced. Later chapters cover more complex topics such as transactions and performance. At each step, the purpose of each command is clearly illustrated. The goal is for readers to understand not just the query syntax but also why each command is valuable, so they can use the appropriate commands in their real-world database applications.

A database novice should read the entire book, skimming the later chapters initially. The complexity of database systems should not deter readers from getting started. Test databases offer a safe way to try queries. As readers gain experience, the later chapters will become more comprehensible. Experienced database users can skip the early chapters on basic SQL functionality. Cross-referencing sections allows you to quickly move from general to more specific information.

Much information has been moved out of the main body of the book into appendices. Appendix A lists sources of additional information about PostgreSQL. Appendix B provides installation instructions. Appendix C highlights features of PostgreSQL not found in other database systems. Appendix D contains a copy of the PostgreSQL manual pages, which should be consulted for query syntax issues. Additionally, do not overlook the excellent documentation that is part of PostgreSQL, which covers many complex topics, including PostgreSQL-specific functionality that cannot be covered in a book of this length. Sections of the documentation are referenced where appropriate in this book.

This book uses italics for identifiers, SMALLCAPS for SQL keywords, and a monospaced font for SQL queries. The website for this book is located at http://www.postgresql.org/docs/awbook.html.

## Acknowledgments

PostgreSQL and this book would not be possible without the talented and hard-working members of the PostgreSQL Global Development Team. They transformed source code that could have become another abandoned project into an open-source alternative to commercial database systems. PostgreSQL is a shining example of Internet software development.

### Steering Committee
- **Marc G. Fournier** (Wolfville, Nova Scotia, Canada): Coordinates the entire effort, provides the server, and administers the primary website, mailing lists, FTP site, and source code repository.
- **Tom Lane** (Pittsburgh, Pennsylvania, USA): Often works on the planner/optimizer, specializes in bug fixes and performance improvements.
- **Thomas G. Lockhart** (Pasadena, California, USA): Works on documentation, data types (particularly date/time and geometric objects), and SQL standards compatibility.
- **Vadim B. Mikheev** (San Francisco, California, USA): Handles large projects like vacuum, subselects, triggers, and multi-version concurrency control (MVCC).
- **Bruce Momjian** (Philadelphia, Pennsylvania, USA): Maintains FAQ and TODO lists, performs code cleanup, patch application, training materials, and some coding.
- **Jan Wieck** (near Hamburg, Germany): Overhauled the query rewrite rule system, wrote procedural languages PL/PGSQL and PL/TCL, and added the NUMERIC type.

### Major Developers
- **D’Arcy J. M. Cain** (Toronto, Ontario, Canada): Worked on the TCL interface, PyGreSQL, and the INET type.
- **Massimo Dal Zotto** (near Trento, Italy): Created locking code and other improvements.
- **Peter Eisentraut** (Uppsala, Sweden): Added many features, including an overhaul of psql.
- **Oliver Elphick** (Newport, Isle of Wight, UK): Maintains the PostgreSQL package for Debian Linux.
- **Daniel Horak** (near Pilsen, Czech Republic): Did the WinNT port of PostgreSQL using the Cygwin environment.
- **Hiroshi Inoue** (Fukui, Japan): Improved btree index access.
- **Tatsuo Ishii** (Zushi, Kanagawa, Japan): Handles multibyte foreign language support and porting issues.
- **Dr. Andrew C. R. Martin** (London, UK): Created the ECPG interface and helped with the Linux and IRIX FAQs, including some patches to the PostgreSQL code.
- **Edmund Mergl** (Stuttgart, Germany): Created and maintains pgperl5 and DBD-Pg, available via CPAN.
- **Michael Meskes** (Düsseldorf, Germany): Handles multibyte foreign language support and maintains ECPG.
- **Peter Mount** (Maidstone, Kent, UK): Created the Java JDBC interface.
- **Byron Nikolaidis** (Baltimore, Maryland, USA): Rewrote and maintains the ODBC interface for Windows.
- **Lamar Owen** (Pisgah Forest, North Carolina, USA): Maintains the RPM package.
- **Constantin Teodorescu** (Braila, Romania): Created the PGACCESS interface.
- **Göran Thyni** (Kiruna, Sweden): Worked on the Unix socket code.

### Non-code Contributors
- **Oleg Bartunov** (Moscow, Russia): Introduced locale support.
- **Vince Vielhaber** (near Detroit, Michigan, USA): Maintains the website.

All developers are listed in alphabetical order.

## Chapter 1: History of PostgreSQL

### 1.1 Introduction

PostgreSQL is the most advanced open-source database server. In this chapter, you will learn about databases, open-source software, and the history of PostgreSQL.

Three basic office productivity applications exist: word processors, spreadsheets, and databases. Word processors produce text documents critical to any business. Spreadsheets are used for financial calculations and analysis. Databases are primarily used for data storage and retrieval. While you can use a word processor or spreadsheet to store small amounts of data, databases are the best choice for large volumes of data or data that must be frequently retrieved and updated. Databases allow orderly data storage, rapid data retrieval, and complex data analysis.

### 1.2 University of California at Berkeley

PostgreSQL's ancestor was Ingres, developed at the University of California at Berkeley (1977–1985). The Ingres code was later enhanced by Relational Technologies/Ingres Corporation, which produced one of the first commercially successful relational database servers. Also at Berkeley, Michael Stonebraker led a team to develop an object-relational database server called Postgres (1986–1994). Illustra took the Postgres code and developed it into a commercial product. Two Berkeley graduate students, Jolly Chen and Andrew Yu, subsequently added SQL capabilities to Postgres. The resulting project was called Postgres95 (1994–1995). Chen continued maintaining Postgres95, which had an active mailing list.

### 1.3 Development Leaves Berkeley

In the summer of 1996, it became clear there was great demand for an open-source SQL database server, and a team formed to continue development. Marc G. Fournier of Toronto, Canada, offered to host the mailing list and provide a server to host the source tree. One thousand mailing list subscribers were moved to the new list. A server was configured, giving a few people login accounts to apply patches to the source code using CVS.

Jolly Chen stated, "This project needs a few people with a lot of time, not many people with a little time." Given the 250,000 lines of C code, we understood what he meant. In the early days, four people were heavily involved: Marc Fournier in Canada; Thomas Lockhart in Pasadena, California; Vadim Mikheev in Krasnoyarsk, Russia; and me in Philadelphia, Pennsylvania. We all had full-time jobs, so we participated in the effort in our spare time. It was certainly a challenge.

Our first goal was to scour the old mailing list, evaluating patches that had been posted to fix various problems. The system was quite fragile then and not easily understood. During the first six months of development, we feared that a single patch might break the system and we would be unable to correct the problem. Many bug reports left us scratching our heads, trying to figure out not only what was wrong but how the system even performed many functions.

We inherited a huge installed base. A typical bug report came in the following form: "When I do this, it crashes the database." We had a long list of such reports. It soon became clear that some organization was needed. Most bug reports required significant research to fix, and many reports were duplicates, so our TODO list included every buggy SQL query. This approach helped us identify our bugs and made users aware of them as well, thereby cutting down on duplicate bug reports.

Although we had many eager developers, the learning curve in understanding how the database worked was significant. Many developers became involved in the edges of the source code, like language interfaces or database tools, where things were easier to understand. Other developers focused on specific problem queries, trying to locate the source of the bug. It was amazing to see that many bugs were fixed with just one line of C code. Because Postgres had evolved in an academic environment, it had not been exposed to the full spectrum of real-world queries. During that period, there was talk of adding features, but the instability of the system made bug fixing our major focus.

### 1.4 PostgreSQL Global Development Team

In late 1996, we changed the name of the database server from Postgres95 to PostgreSQL. It is a mouthful but honors both the Berkeley name and its SQL capabilities. We started distributing the source code using remote CVS, which allowed people to keep up-to-date copies of the development tree without downloading an entire set of files every day.

Releases occurred every three to five months. Each period consisted of two to three months of development, one month of beta testing, a major release, and a few weeks to issue sub-releases to correct serious bugs. We were never tempted to follow a more aggressive schedule with more releases. A database server is not like a word processor or game, where you can easily restart it if a problem arises. Instead, databases are multi-user and lock user data inside the database, so they must be as reliable as possible.

Development of source code of this scale and complexity is not for the novice. We initially had trouble interesting developers in a project with such a steep learning curve. However, over time, our civilized atmosphere and improved reliability and performance helped attract the experienced talent we needed.

Getting our developers the knowledge they needed to assist with PostgreSQL was clearly a priority. We had a TODO list that outlined what needed to be done, but with 250,000 lines of code, taking on any item was a major project. We realized developer education would pay major benefits in helping people get started. We wrote a detailed flowchart of the database modules and a developers' FAQ, answering the most common questions of PostgreSQL developers. With this information, developers became more productive at fixing bugs and adding features.

Although the source code we inherited from Berkeley was very modular, most Berkeley coders used PostgreSQL as a test bed for research projects. As a result, improving existing code was not a priority. Their coding styles were also quite varied.

We wrote a tool to reformat the entire source tree in a consistent manner. We wrote a script to find functions that could be marked as static or unused functions that could be removed completely. These scripts are run just before each release. A release checklist reminds us of the items to be changed for each release.

As we gained knowledge of the code, we were able to perform more complicated fixes and feature additions. We redesigned poorly structured code. We moved into a mode where each release had major new features, instead of just bug fixes. We improved SQL conformance, added sub-selects, improved locking, and added missing SQL functionality. A company was formed to offer telephone support.

The Usenet discussion group archives started touting us. At one time, we had searched for PostgreSQL and found that many people were recommending other databases, even though we were addressing user concerns as rapidly as possible. One year later, many people were recommending us to users who needed transaction support, complex queries, commercial-grade SQL support, complex data types, and reliability—clearly our strengths. Other databases were recommended when speed was the overriding concern. Red Hat’s shipment of PostgreSQL as part of its Linux distribution quickly expanded our user base.

Today, every release of PostgreSQL is a major improvement over the last. Our global development team has mastery of the source code we inherited from Berkeley. In addition, every module is understood by at least one development team member. We are now easily adding major features, thanks to the increasing size and experience of our worldwide development team.

### 1.5 Open Source Software

PostgreSQL is open-source software. The term “open-source software” often confuses people. With commercial software, a company hires programmers, develops a product, and sells it to users. With Internet communication, however, new possibilities exist. Open-source software has no company. Instead, capable programmers with interest and some free time get together via the Internet and exchange ideas. Someone writes a program and puts it in a place everyone can access. Other programmers join and make changes. When the program is sufficiently functional, the developers advertise the program’s availability to other Internet users. Users find bugs and missing features and report them back to the developers, who, in turn, enhance the program.

It sounds like an unworkable cycle, but in fact, it has several advantages:
- A company structure is not required, so there is no overhead and no economic restrictions.
- Program development is not limited to a hired programming staff but taps the capabilities and experience of a large pool of Internet programmers.
- User feedback is facilitated, allowing program testing by a large number of users in a short period of time.
- Program enhancements can be rapidly distributed to users.

### 1.6 Summary

This chapter has explored the long history of PostgreSQL, starting with its roots in university research. PostgreSQL would not have achieved its success without the Internet. The ability to communicate with people around the world has allowed a community of unpaid developers to enhance and support software that rivals commercial database offerings. By allowing everyone to see the source code and contribute to its ongoing development, PostgreSQL continues to improve every day. The remainder of this book shows how to use this amazing piece of software.

## Chapter 2: Issuing Database Commands

### 2.1 Starting a Database Session

PostgreSQL uses a client/server model of communication. A PostgreSQL server is continually running, waiting for client requests. The server processes the request and returns the result to the client.

#### Choosing an Interface

Because the PostgreSQL server runs as an independent process on the computer, a user cannot interact with it directly. Instead, client applications have been designed specifically for user interaction. This chapter describes how to interact with PostgreSQL using the `psql` client application. Additional interfaces are covered in Chapters 16 and 17.

```sh
$ psql test
Welcome to psql, the PostgreSQL interactive terminal.
Type: \copyright for distribution terms
\h for help with SQL commands
\? for help on internal slash commands
\g or terminate with semicolon to execute query
\q to quit
test=>
```

#### Choosing a Database

Each PostgreSQL server controls access to a number of databases. Databases are storage areas used by the server to partition information. For example, a typical installation may have a production database, used to keep all information about a company, and a training database, used for training and testing purposes. They may also have private databases, used by individuals to store personal information. For this exercise, we will assume that you have created an empty database called `test`. If not, see Appendix B.

#### Starting a Session

To start a `psql` session and connect to the `test` database, type `psql test` at the command prompt. Your output should look similar to Figure 2.1. Remember, the operating system command prompt is case-sensitive, so you must type this in all lowercase.

### 2.2 Controlling a Session

Congratulations! You have successfully connected to the PostgreSQL server. You can now issue commands and receive replies from the server. Let’s try one. Type `SELECT CURRENT_USER;` and press Enter (see Figure 2.2). If you make a mistake, just press Backspace and retype the command. It should show your login name underneath the dashed line. This example shows the login name `postgres`. The word `getpgusername` is a column label. The server also reports that it has returned one row of data. The line `test=>` tells you that the server has finished its current task and is waiting for the next database query.

```sh
test=> SELECT CURRENT_USER;
getpgusername
---------------
postgres
(1 row)
test=>
```

Let’s try another one. At the `test=>` prompt, type `SELECT CURRENT_TIMESTAMP;` and press Enter. You should see the current date and time. Each time you execute the query, the server will report the current time to you.

#### Typing in the Query Buffer

Typing in the query buffer is similar to typing at an operating system command prompt. However, at an operating system command prompt, Enter completes each command. In `psql`, commands are completed only when you enter a semicolon (`;`) or backslash-g (`\g`).

As an example, let’s do `SELECT 1 + 3;` but in a different way. See Figure 2.3. Notice that the query is spread over three lines. The prompt changed from `=>` on the first line to `->` on the second line to indicate that the query was continued. The semicolon told `psql` to send the query to the server. We could have easily replaced the semicolon with backslash-g. I do not recommend that you type queries as ugly as this one, but longer queries will benefit by being spread over multiple lines.

```sh
test=> SELECT
test-> 1 + 3
test-> ;
?column?
----------
4
(1 row)
test=>
```

I hope this optimized version meets your expectations!