ditions on finner’s actual arguments from the current state’s
constraints and save them for the future. These conditions
will be used for stitching function summaries.
Furthermore, we call the underlying interrupt handling
model in order to check if an interrupt can ﬁre at the current
instruction. If an interrupt can ﬁre, we refresh the global
variables and proceed with the execution of f .
4.4 Dispatcher main loop
The Dispatcher is the central component of the system.
It schedules the process of collecting execution paths and
stitches them together.
Its main executing loop is shown
in Algorithm 2. It starts at line 2 by choosing a call path,
i.e., a call sequence (fn ← ... ← f1 ← f0) from the target
line to the entry point. The ﬁrst function in the call path
is function fn containing the target line. The dispatcher
then (lines 5–6) picks fn and starts collecting fn’s execution
paths that end up calling the target line.
Once execution paths are collected, the Dispatcher ana-
lyzes them individually (lines 7–20). Assume path w reached
the target line. At this point (see Algorithm 1), w may
have some call instructions that were replaced by symbolic
6
values. The Dispatcher calls recursive function stitchInner-
Calls() (line 11) to try to ﬁnd proper execution paths for
each of them (see the next section for the details). Thus w
becomes linked to the execution paths of inner calls.
The Dispatcher then tries to ﬁnd execution paths of the
next upper-level functions fn−1, fn−2, ... that it can stitch
with w by calling function stitchNextInCallchain() (line 12).
This function tries to ﬁnd executions path of the next func-
tions fn−1, ... in the call chain that can be stitched with w. It
goes through and ﬁnds execution paths for each function in
(fn−1, ..., f0) all the way toward the program’s entry point;
it also accumulates the constraints of the already stitched
execution paths. As recursion ends by reaching the top-
level function f0, a complete “stitched” candidate path c is
returned. It is added to the candidates list.
Since full memory context was unknown at the time when
execution paths were collected, candidate full paths might be
infeasible. The Dispatcher thus makes another forward pass
along this path using Forward Executor (lines 15–20). For-
ward Executor implements a simple state selection strategy
that follows the provided interprocedural execution path.
If none of the candidate interprocedural paths turn out to
be feasible, the Dispatcher proceeds to the next iteration of
its main loop. New execution paths are collected, stitched,
and checked by the Forward Executor. After a timeout,
another call path is tried.
4.5 Stitching execution paths
DrE “stitches” execution paths of diﬀerent functions based
on the constraints on formal/actual arguments and con-
straints on return values. In this subsection, for clarity of
exposition we use the same symbol wk to denote both the
execution path and the corresponding path constraints.
Connecting call-chain functions. Consider two func-
tions which belong to the call chain fnext and fprev (fnext
calls fprev) and their execution paths wprev and wnext; wprev
has already been stitched to some execution paths (wn ←
. . . ← wprev) of the previous functions in the call chain.
Algorithm 3 checks if wprev and wnext can be stitched. In-
formally, this algorithm recursively rewrites all occurrences
of formal arguments in (wn, . . . , wprev) with the correspond-
ing actual arguments from wnext and checks if the conjunc-
tion (wn ∧ . . . ∧ wprev ∧ wnext) is solvable. In lines 2–3, it
chooses the next function from the call chain and collects
its execution paths.
In lines 4–6, for each collected exe-
cution path wnext, it replaces formal arguments in wprev’s
path constraints C with the actual arguments from wnext
and checks if they are solvable.
It then resolves all inner
calls for wnext by calling stitchInnerCalls() and follows the
recursion for the next function in the call chain in line 8. It
then links wprev and wnext in line 9.
Executing and stitching inner calls. Consider a func-
tion’s execution path w (with accumulated constraints C,
which include all constraints starting from the target func-
tion fn) with calls that were replaced by symbolic values.
The Dispatcher tries to ﬁnd execution paths for each such
inner call finner. It runs an instance of Summary Executor
(according to Algorithm 1) to collect a set of execution paths
{winner}. The dispatcher then tries to stitch them with w
using algorithm 4. Informally, it (1) rewrites {winner}’s for-
mal arguments with the actual arguments from w; and (2)
replaces all occurrences of previously unconstrained sym-
762Algorithm 3: Stitching call-chain functions
1 stitchNextInCallChain(wprev, C);
input : wprev - execution path of the previous function fprev
input : C - accumulated constraints from bottom-level function
in the call chain
up to fprev
2 fnext ← pickNextFunction(call chain);
3 EP fnext ← CollectPaths(fnext, C);
4 foreach wnext ∈ EP fnext do
C(cid:48) ← rewriteConstraints(C, wnext);
if isSolvable(C(cid:48)) then
stitchInnerCalls(wnext, C(cid:48));
stitchNextInCallchain(w(cid:48)
link(wprev, wnext);
next, C(cid:48));
5
6
7
8
9
end
10
11 end
Algorithm 4: Stitching inner calls
1 stitchInnerCalls(w, C);
input : w - execution path containing inner calls.
input : C - accumulated set of constraints from the call chain
function down to this execution path
3
2 foreach f ∈ inner calls(w) do
EP f ← CollectPaths(f, C);
foreach winner ∈ EP f do
C(cid:48) ← rewriteConstraints(C, winner);
if isSolvable(C(cid:48)) then
6
4
5
stitchInnerCalls(winner, C(cid:48));
link(w, winner)
7
8
9
end
10
11 end
end
bolic values in C with the actual return values from winner
and checks if the resulting conditions are solvable. The
rewriting of function arguments and return values happens
recursively if winner has inner calls itself (line 7).
4.6 Limitations
In our modular ap-
Under-deﬁned calling context.
proach, functions are executed independently within an under-
deﬁned calling context. Constraints on global variables may
thus be lost, causing extra states that would not have been
created had the program been symbolically executed in a
normal (forward) way. To compensate for this, DrE, upon
executing a function f , recursively identiﬁes global variables
in f that are also used in f ’s callers. Only such global vari-
ables are assigned fresh unconstrained symbolic values.
Similarly, global variables can change after f calls some
function g (because we delay executing inner calls and im-
mediately step over to the next instruction). DrE assigns
fresh unconstrained symbolic values only to those variables
that are also used by g and its callees.
Pointers.
Global pointers and function arguments of
pointer type which would be pointing to valid memory loca-
tions during normal execution might become invalid when
dereferenced. To tackle this problem, we adopted the fol-
lowing approach. Every time a new function is executed,
for each pointer used by the function (global pointers and
pointers that appear in the formal arguments list) we allo-
cate a symbolic array of ﬁxed size (64 bytes by default). We
found that this limit usually holds for MSP430 ﬁrmware and
does not lead to false overﬂows. Our current prototype does
not support pointers to pointers, however.
7
Allocating new symbolic arrays for (undeﬁned) pointers
and assigning new symbolic values for global variables and
formal arguments results in paths that might turn out to be
infeasible (i.e., when the execution runs from the program’s
entry point). Many infeasible paths are eliminated during
the path stitching procedure when calling context is partially
deﬁned. The remaining infeasible paths are eliminated dur-
ing the ﬁnal forward pass in which the calling context is
fully deﬁned. Therefore, checking infeasible interprocedural
paths can make ﬁnding feasible interprocedural paths slower
(in one case signiﬁcantly—see discussion in the next section)
but does not impact the soundness of the analysis.
5. EXPERIMENTAL RESULTS
In this section, we compare DrE’s eﬃciency with FIE [10].
We ﬁrst use two synthetic examples to explain FIE’s limi-
tations, then test DrE on several real-world ﬁrmwares, and
ﬁnally use DrE to extract signal patterns from the AllSee
gesture recognition system [18].
All experiments were run on a machine with four Intel
Core i7 3.07 GHz cores) and 24 Gb of memory. Table 1
shows the results. The run time of each experiment was
at most one hour; ‘-’ means that the analysis tool failed
to reach the target line within one hour. We ran DrE in
two modes: (1) compositional, or modular, mode in which
functions are executed in isolation and then stitched; and (2)
forward mode in which no execution paths are pre-collected
and the program is executed top-to-bottom.
5.1 Synthetic examples
The ﬁrst example (Figure 8 in the Appendix) features
an inﬁnite loop in which the ﬁrst 1,000 iterations are idly
waiting until the peripherals settle down. FIE was not able
to ﬁnd the target line due to state explosion: a new fork
was generated with each basic block during the ﬁrst idle
loop iterations. In contrast, DrE’s interrupt model allowed
it to ﬁnd the target line in under one minute. While both
DrE modes were able to ﬁnd the target line, forward mode
was signiﬁcantly faster; this is due to the fact the program
control logic and its call graph for the ﬁrst example are quite
simple and thus do not beneﬁt from modular execution.
The second example (Figure 9 in the Appendix) demon-
strates the problem of path explosion caused by sensor in-
put processing logic. The main function contains an inﬁ-
nite while loop that assigns values to a three-element array
based on the sequence of ADC readings.
If all three ele-
ments are assigned a ﬁxed value, the target line of code is
executed. The problem here is that the function responsible
for processing the ADC inputs contains a loop which should
be executed at least 15 times in order to return the right
value. This function should be executed at least 3 times
which results in 245 possible states. FIE failed on this ex-
ample. In less then 10 minutes it generated more than 4,000
states.4 DrE’s forward mode was also not able to reach the
target line due to a large number of states.
In contrast,
it took DrE’s compositional mode less then 20 seconds to
produce the sensor input values required to reach the target
line: DrE decomposed the program into separate functions
4In addition to path explosion, we also found an implemen-
tation limitation in FIE: it shares one common 16-bit ad-
dress space for all execution states, which puts a limit on
the number of states. This resulted in FIE halting after it
generated about 4,000 states.
763Synthetic 1
Synthetic 2
softmodem-for-msp430*
FreeStanding
mbtronics temperature
mrothe temp
FIE
-
-
-
-
31m
-
DrE
Forward Compositional
11s
-
-
8s
17m
8m
43s
20s
35s
-
27s
13s
Table 1: DrE vs. FIE. “-” means that the target line was not
reached within one hour.
and inferred the proper conditions on their arguments and
return values. This modular strategy quickly eliminates a
signiﬁcant fraction of the irrelevant paths.
5.2 Sensor ﬁrmware
Despite the fact that DrE is still a research prototype, it
performed well on several real-world ﬁrmwares. For this set
of experiments, we use MSP430 programs from the corpus
used by [10]. This set includes projects of diﬀerent complex-
ity downloaded from the Internet. Some of them consist of
no more than 2 functions. Both DrE and FIE performed
well on those examples and in many cases achieved full code
coverage. We thus chose several non-trivial ﬁrmware pro-
grams for testing DrE. We manually selected target points
that involve loops and non-trivial control logic.
softmodem-for-msp430.5 This ﬁrmware is an implemen-
tation of the ITU V.21 modem speciﬁcation (for use in a
general switched telephone network). The ﬁrmware consists
of 38 functions and 1,188 lines of code. It starts with some
initialization code (to set up the basic clock system, set up
modem functions, and enable analog-to-digital (ADC) con-
version). We set the ﬁrst line after the initialization code as
the target line. We performed our experiments on a modi-
ﬁed version of this ﬁrmware. The original code contains two
idle “for” loops (one line of code each) with a large number
of iterations to settle the oscillator ADC reference voltage,
which frustrated both DrE and FIE. These loops can be
easily identiﬁed and eliminated by static code analysis.
The rest of the initialization code is rather complex and
involves multiple loops (including an inﬁnite one, with a
speciﬁc break-out condition) and inner calls with depth of
ﬁve. This cause FIE to get stuck in the initialization code.
DrE was able to ﬁnd a path through the initialization code
in 35 seconds and avoided path explosion by discovering the
speciﬁc condition for breaking out of the inﬁnite loop.
mbtronics temperature.6 This ﬁrmware continuously sam-
ples an ADC connected to a temperature sensor, compares
the result against a pre-speciﬁed value and sets PWM (Pulse
Width Modulation) based on the measured ADC oﬀset. It
then transmits temperature values via UART to the PC.
The ﬁrmware contains 377 lines of code and 14 functions.
It starts with initialization code and then enters an inﬁnite
loop (with several inner calls and branch instructions). The
loop needs to be executed 8 times to refresh the state and
start a new sequence of temperature measurements. While
FIE reached this refresh in 31 minutes, DrE’s compositional
mode reached that part of the code in 27 seconds. DrE’s
forward mode reached the same code in 17 minutes.
5https://github.com/dyno/softmodem-for-msp430
6https://github.com/mbtronics/msp430 projects
We also considered another variant of this ﬁrmware (named
mrothe temp) found in the ﬁrmware set. It shares most of
the code with mbtronics temperature but includes some ad-
ditional logic. FIE was not able to ﬁnd a path to the target
line, while DrE reached it in 13 seconds and 8 minutes in
compositional and forward modes, respectively.
FreeStanding.7 This ﬁrmware uses an accelerometer con-
nected to the ADC port to measure the time spent in a
handstand position by the person wearing a device. The
ﬁrmware consists of 7 functions and 318 lines of code. In
spite of the ﬁrmware’s seeming simplicity, FIE was unable
to reach at least one part of the code responsible for con-
trol logic within one hour. DrE’s compositional mode did
not perform well in this case either due to extensive use
of global variables throughout diﬀerent functions (see Sec-
tion 4.6). In contrast, DrE’s forward mode with the shortest
distance search strategy found a path to the relevant parts
of the code in 8 seconds.
5.3 AllSee gesture recognition system
As a concrete target for a signal spooﬁng attack, we chose
an MSP430-based gesture recognition system called AllSee [18]
which we believe is a good example of an embedded sys-
tem that makes decisions based on sensing its environment.
AllSee attempts to recognize hand gestures by extracting
information from ambient wireless signals (for example, TV
or Wi-Fi).
AllSee aims for extremely low power consumption. It uses
a combination of custom-built sensor hardware (an enve-
lope detector that extracts low-frequency amplitude changes
from the ambient RF signal) and an MSP430 controller that
implements gesture recognition logic. The envelope detector
is connected to the controller through the analog-to-digital
converter (ADC) port. The MSP430 ﬁrmware has a set of 8
hard-coded amplitude change patterns that correspond to 8
diﬀerent hand gestures. Once the received sequence of val-
ues matches one of the patterns, the ﬁrmware can relay this
command to higher-level software (in the proof of concept,
it simply prints the name of the recognized gesture over the
UART interface).
An important parameter of the AllSee classiﬁcation logic
is the minimal amplitude change threshold. This is used as
a threshold for detecting when a signiﬁcant change in ampli-
tude has occurred. The value is hardcoded and presumably
was chosen based on the sensitivity of the envelope detec-
tor and observed signal attenuation caused by hand gestures.
Note that AllSee’s logic recognizes not the speciﬁc amplitude
changes but only the coarse shape of the signal (up/down/-
down, etc.) As long as the coarse shape is preserved, the
spoofed signal will be recognized. This makes the attacker’s
life easier, as he does not need to reproduce an exact signal
but only to mimic its shape.
AllSee’s source code [17] is available under a public copy-
right license. It consists of about 300 lines of code but in-
cludes inﬁnite loops and complex logic that frustrate non-
directed symbolic execution tools, as we show below.
We used DrE’s compositional mode to extract gesture pat-
terns from the AllSee ﬁrmware.
In Table 2, we compare
DrE’s eﬃciency (both compositional and forward modes)