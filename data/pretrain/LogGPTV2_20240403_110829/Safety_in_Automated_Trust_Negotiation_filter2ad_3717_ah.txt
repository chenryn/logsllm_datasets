goals and properties were lacking. In this paper, we have introduced a formal
framework for ATN in which we have proposed a precise and intuitive deﬁnition
of correct enforcement of policies in ATN. We call this safety notion credential-
combination hiding and have argued that it captures natural security goals.
We have stated two alternative, weaker safety notions that seem somewhat
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
384
•
W. H. Winsborough and N. Li
intuitive, and identiﬁed ﬂaws that make them unacceptable. We have formu-
lated the eager strategy using our framework and shown that it meets the
requirements set forth in our safety deﬁnition, thus supporting our contention
that the framework and safety deﬁnition are usable. We have presented a fam-
ily ATN strategies that support a credential system with delegation and shown
that these strategies provide credential–combination hiding. This result fur-
ther supports our contention that credential–combination hiding is a useful
deﬁnition of safety for ATN.
APPENDIX
A. PROOF OF THEOREM 3.6
THEOREM 3.6. The eager strategy is credential–combination-hiding safe.
PROOF OF THEOREM 3.6. Consider any pair of conﬁgurations G =(cid:4)K , E,
Ack, AC(cid:5) and G(cid:3) =(cid:4)K , E(cid:3), Ack, AC(cid:5) such that releaseable(E, UnAcks(M, G)) =
releaseable(E(cid:3), UnAcks(M, G)). For any given requester attack sequence, [K A,
ρ, a1, a2, . . . , ak], we show that the reaction sequence it induces given G, [m1,
(cid:3)
m2, . . . , m(cid:5)], is the same as the response sequence it induces given G(cid:3), [m
1,
(cid:3)
(cid:3)
(cid:3)
m
(cid:5)(cid:3) be the associated states. We use
(cid:5)(cid:3)]. Let q1, q2, . . . , q(cid:5) and q
2, . . . , m
induction on the steps in the eager strategy to show that for each i ∈ [1, (cid:5)], either
i and locCredsi = locCreds
∈ {success, failure}, or opCredsi = opCreds
qi = q
(cid:3)
(cid:3)
(cid:3)
i,
in which qi =(cid:4)G, opCredsi, locCredsi, K O, ρ(cid:5) and q
=(cid:4)G(cid:3), opCreds
(cid:3)
(cid:3)
(cid:3)
i
i, locCreds
i,
K O, ρ(cid:5).
i
(cid:3)
2, . . . , q
(cid:3)
1, q
Now we assume opCredsi = opCreds
When the attack sequence is a requester attack sequence, the negotiator
uses start to begin the negotiation. If ACG(ρ)
is trivially satisﬁed, then so
is ACG(cid:3)(ρ) and both computations return (cid:4)success, null(cid:5), so we are done. So
assume otherwise. Referring to the construction of (cid:4)q1, m1(cid:5) = start(G, ρ, K A),
clearly publicCreds ⊆ releaseable(E, UnAcks(M, G)). By our choice of G and G(cid:3),
(cid:3) = publicCreds. (We use
it follows that in the construction using G(cid:3), publicCreds
primed version of local variable throughout to indicate the values of those vari-
ables in the construction using G(cid:3) and unprimed versions of the variables for the
values in the construction using G.) It follows that locCreds0 = locCreds
(cid:3)
0. That
opCreds0 = opCreds
(cid:3)
0 holds is trivial, completing the proof in the base case.
i and locCredsi = locCreds
(cid:3)
(cid:3)
for
i ∈ [1, (cid:5) − 1], and show that the induction hypothesis holds for i + 1. It is easy
i
to see by inspection of reply that qi+1 = success if and only if q
= success, and
the step is shown. Suppose otherwise. Since opCredsi consists of credentials
held by M , it follows that locCredsi+1 ⊆ releaseable(E, UnAcks(M, G)). Sim-
⊆ releaseable(E(cid:3), UnAcks(M, G(cid:3))). Clearly UnAcks(M, G) =
(cid:3)
ilarly, locCreds
i+1
UnAcks(M, G(cid:3)), so, since opCredsi = opCreds
(cid:3)
i by induction hypothesis,
locCredsi+1 = locCreds
(cid:3)
i+1
and locCredsi+1 = locCreds
Note that it cannot be that (cid:5)(cid:3) > (cid:5) because either (cid:5) = k + 1 or
(cid:5) ∈ {success, failure}, which terminates the response sequence by deﬁni-
(cid:3)
q
tion. Thus the two response sequences are identical, as desired. When the
attack sequence is passive, essentially the same proof applies; the base case is
simpler and the step is the same.
i+1. It now follows easily that opCredsi+1 = opCreds
(cid:3)
(cid:3)
i+1, as required to complete the induction.
(cid:3)
i+1
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
385
B. PROOF OF THEOREM 3.9
Before we present the proof of this theorem, we note several identities that
follow from Deﬁnition 3.3.
(1) T (E) ∩ U = T (unreleaseable(E, U )) ∩ U .
(cid:5) ∩ U = ∪e∈E(T (e) ∩ U )
T (E) ∩ U = (cid:4)∪e∈E T (e)
= ∪e∈E∧T (e) ∩ U(cid:10)=∅(T (e) ∩ U )
= ∪e∈unreleaseable(E,U )(T (e) ∩ U )
= (cid:4)∪e∈unreleaseable(E,U )T (e)
(cid:5) ∩ U
= T (unreleaseable(E, U )) ∩ U
(2) T (releaseable(E, U )) ∩ U = ∅.
releaseable(E, U )) ∩ U = (cid:4)∪e∈releaseable(E,U )T (e)
(cid:5) ∩ U
= ∪e∈E∧T (e)∩U=∅(T (e) ∩ U )
= ∪e∈E∧T (e)∩U=∅∅
= ∅
releaseable(E1 ∪ E2, U ) = {e ∈ (E1 ∪ E2) | T (e) ∩ U (cid:10)= ∅}
(3) releaseable(E1 ∪ E2, U ) = releaseable(E1, U ) ∪ releaseable(E2, U ).
= {e ∈ E1 | T (e) ∩ U (cid:10)= ∅} ∪ {e ∈ E2 | T (e) ∩ U (cid:10)= ∅}
= releaseable(E1, U ) ∪ releaseable(E2, U )
(4) For all U(cid:3) ⊇ U , releaseable(unreleaseable(E, U ), U(cid:3)) = ∅.
releaseable(unreleaseable(E, U ), U (cid:3)) = {e ∈ {e ∈ E | T (e) ∩ U (cid:10)= ∅} | T (e) ∩ U (cid:3) = ∅}
= {e ∈ E | T (e) ∩ U (cid:10)= ∅ ∧ T (e) ∩ U (cid:3) = ∅}
= ∅
(5) For all U(cid:3) ⊇ U , releaseable(releaseable(E, U ), U(cid:3)) = releaseable(E, U(cid:3)).
releaseable(releaseable(E, U ), U (cid:3)) = {e ∈ {e ∈ E | T (e) ∩ U = ∅} | T (e) ∩ U (cid:3) = ∅}
= {e ∈ E | T (e) ∩ U = ∅ ∧ T (e) ∩ U (cid:3) = ∅}
= {e ∈ E | T (e) ∩ U (cid:3) = ∅}
= releaseable(E, U (cid:3))
THEOREM 3.9. The relative strength of the safety deﬁnitions is as follows:
1. If strat
is credential–combination-hiding safe,
then it
is attribute–
combination-hiding safe.
2. If strat is attribute–combination-hiding safe, then it is attribute-hiding safe.
PROOF OF THEOREM 3.9.
Part 1: Given a credential–combination-hiding safe strategy strat, for every
conﬁguration G = (cid:4)K , E, Ack, AC(cid:5), for every subset U of T , and for every ex-
pressible subset U(cid:3) of U , we can construct a conﬁguration G(cid:3) = (cid:4)K , E(cid:3), Ack, AC(cid:5)
as follows. By the assumption that U(cid:3) is expressible, there exists E0 such that
T (E0) ∩ U = U(cid:3). Let E(cid:3) = unreleaseable(E0, U ) ∪ releaseable(E, U ).
We now show (1a): E(cid:3) induces the desired set of unacknowledgeable at-
tributes, i.e., T (E(cid:3)) ∩ U = U(cid:3). From Identities 1 and 2, we have the following:
T (E(cid:3)) ∩ U = (T (unreleaseable(E0, U )) ∪ T (releaseable(E, U ))) ∩ U
= (T (unreleaseable(E0, U )) ∩ U ) ∪ (T (releaseable(E, U )) ∩ U )
= (T (E0) ∩ U ) ∪ ∅ = U(cid:3)
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
386
•
W. H. Winsborough and N. Li
(cid:3)
, U
We now use credential–combination-hiding safety to show the following
(1b): for every M such that UnAcks(G, M ) ⊇ U , G and G(cid:3) are indistinguishable
under strat by M . Let U(cid:3)(cid:3) be the set of attributes that are unacknowledgeable
to M ; we have U(cid:3)(cid:3) ⊇ U . It is sufﬁcient to show that releaseable(E, U(cid:3)(cid:3)) =
releaseable(E(cid:3), U(cid:3)(cid:3)), since by the credential–combination-hiding safety property
of strat, M cannot distinguish G and G(cid:3). This equality follows from Identities 3,
4, and 5 as follows:
(cid:3)(cid:3)
releaseable(E
)
= releaseable(unreleaseable(E0, U ) ∪ releaseable(E, U ), U(cid:3)(cid:3))
= releaseable(unreleaseable(E0, U ), U(cid:3)(cid:3)) ∪ releaseable(releaseable(E, U ), U(cid:3)(cid:3))
= ∅ ∪ releaseable(E, U(cid:3)(cid:3)) = releaseable(E, U(cid:3)(cid:3))
Part 2: Given an attribute–combination-hiding safe strategy strat , for every
conﬁguration G = (cid:4)K , E, Ack, AC(cid:5), for every attribute t, we need to show that
there exists G(cid:3) that differs from G in t (i.e., t ∈ T (E) − T (E(cid:3)) or t ∈ T (E(cid:3)) −
T (E)) and for every adversary M , if t in UnAcks(G, M ) , G(cid:3) is indistinguishable
from G by M. Case one: if t ∈ T (E), then let U = {t} and U(cid:3) = {}. Clearly,
U(cid:3) is an expressible subset to U . By attribute–combination-hiding safety of
strat, there exists a conﬁguration G(cid:3) = (cid:4)K , E(cid:3), Ack, AC(cid:5) that satisﬁes the above
requirement. Case two: if t (cid:10)∈ T (E), then let U = {t} and U(cid:3) = {t}. Clearly, U(cid:3)
is an expressible subset of U . (By the setup of the framework, every attribute
has at least one credential to prove it.) Again, by attribute–combination-hiding
safety of strat , there exists a conﬁguration G(cid:3) = (cid:4)K , E(cid:3), Ack, AC(cid:5) that satisﬁes
the above requirement.
C. PROOF OF PROPOSITION 4.1
PROPOSITION 4.1. If a principal updates a TTG legally and propagates the sat-
isfaction state correctly, then when a target (cid:4)K V : K .r ?(cid:2) K S(cid:5) is satisﬁed in the
TTG, the credentials associated with the TTG prove that hasAttr(K .r, K S). Sim-
ilarly, when a target (cid:4)K V : K1.r1 ∩ ··· ∩ Kn.rn
?(cid:2) K S(cid:5) is satisﬁed, the credentials
associated with the TTG prove that hasAttr(K1.r1, K S) ∧ ··· ∧ hasAttr(Kn.rn,
K S).
PROOF OF PROPOSITION 4.1. We use induction on the order in which nodes are
marked satisﬁed. Initially, only one target exists and it is not satisﬁed. Consider
the ith node to be marked satisﬁed. If it is a trivial target, the proposition holds
trivially. If it is a standard target, one of its implication children is satisﬁed. If
it is an intersection target, all of its intersection children are satisﬁed. In each
case, the result now follows from the induction assumption on the children and,
in the implication case, the fact that the edge is justiﬁed.
D. PROOF OF THEOREM 4.2
THEOREM 4.2. For each choice operation meeting the requirements discussed
in Section 4.4, the induced TTG strategy TTGstrat is credential–combination
hiding.
PROOF OF THEOREM 4.2. Given any pair of conﬁgurations G = (cid:4)K , EG, Ack,
AC(cid:5) and G(cid:3) = (cid:4)K , EG(cid:3), Ack, AC(cid:5), and any adversary M , by assuming
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
387
releaseable(E, UnAcks(M, G)) = releaseable(EG(cid:3), UnAcks(M, G)), we show that
G and G(cid:3) are indistinguishable under strat by M .
We will show that the negotiation behaviors obtained by using G and
G(cid:3) are identical. We consider the case in which the attack sequence
[K A, ρ, a1, a2, . . . , ak] is a requester attach sequence and show that the reaction
sequence induced by it from G is identical to the reaction sequence induced by
it from G(cid:3); the responder attack-sequence case is similar.