---
## Page 192
3.12ValidateMatchesinProcedural Code
Problem
Recipe 3.10 shows how you can retrieve a list of all matches a regular expression can
find in a sring when it is applied repeatedly to the remainder of the string after each
match. Now you want to get a list of matches that meet certain extra criteria that you
cannot (easily) express in a regular expression. For example, when retrieving a list of
lucky numbers, you only want to retain those that are an integer multiple of 13.
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
StringCollection resultList = new StringCollection();
Match matchResult = Regex.Match(subjectString, @"\d+*);
while (matchResult.Success){
1f (int,Parse(natchResult.Value) % 13 == 0) {
resultList,Add(matchResult. Value);
matchResult = matchResult.NextMatch();
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
StringCollection resultList = new StringCollection();
(+pa)xa8ay mau =[qoxa8ax xa8ag
matchResult = regexObj.Match(subjectString);
while (matchResult.Success){
1f (int.Parse(natchResult.Value) % 13 == 0){
resultList,Add(matchResult. Value);
matchResult = natchResult.NextMatch();
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim ResultList = New StringCollection
Dim MatchResult = Regex,Match(SubjectString, *\d+)
While MatchResult.Success
If Integer.Parse(MatchResult.Value) Mod 13 = 0 Then
ResultList,Add(MatchResult. Value)
176 | Chapter 3: Programming with RegularExpressons
---
## Page 193
End If
MatchResult = MatchResult.NextMatch
End While
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
Dim ResultList = New StringCollection
Dim Regex0bj As New Regex("\d+*)
Dim MatchResult = RegexObj Match(SubjectString)
While MatchResult.Success
If Integer.Parse(MatchResult.Value) Mod 13 = 0 Then
ResultList ,Add(MatchResult. Value)
I pu3
MatchResult = MatchResult.NextMatch
End Wh1le
Java
List resultList = nen ArrayList();
Pattern regex = Pattern.compile("\\d+*);
Matcher regexMatcher = regex,matcher(subjectString);
while (regextatcher,find()) (
1f (Integer-parseInt(regexRatcher-group()) % 13 == 0) {
resultList, add(regexMatcher -group());
JavaScript
var list = [];
var regex = /\d+/g;
var match = null;
while (match = regex.exec(subject)) {
// Don’t let browsers get stuck in an infinite loop
1f (match.index == regex.lastIndex) regex.lastIndex++;
// Here you can process the match stored in the match variable
1f (natch[0] % 13 == 0) {
list.push(natch[o]);
XRegExp
var list = [];
XRegExp-forEach(subject, /\d+/ , function(match) {
if (match[0] % 13 = 0) {
1ist.push(match[o]);
});
3.12 Validate Matches in Procedural Code 1 177
---
## Page 194
PHP
preg_match_al1(°/^\d+/', $subject, $matchdata, PREG_PATTERN_oRDER);
for ($i = 0; $1  tags. You want to find all numbers marked as bold. If some bold text contains
multiple numbers, you want to match all of them separately. For example, when pro-
cessing the string 1 2 3 4 5 6 7, you want to find four matches: 2, 5,
, and .
Solution
C#
StringCollection resultList = new StringCollection();
(aassodx8y())xa au=xaaxo x
Regex innerRegex = new Regex(é@*\d+");
Match outerMatch = outerRegex.Match (subjectString);
// Find the first section
while (outerMatch.Success){
// Get the matches within the section
Match innerMatch = innerRegex,Match(outerMatch,Groups[1] Value);
while (innerMatch.Success) {
resultList ,Add(innerMatch,Value);
innerRatch = innerMatch,NextMatch();
3.13 Find a Match Within Another Match | 179
---
## Page 196
// Find the next section
outerMatch = outerMatch.NextMatch();
VB.NET
Dim ResultList = New StringCollection
Dim OuterRegex As Nen Regex(*( *?)", Regex0ptions.Singleline)
Dim InnerRegex As New Regex(*\d+)
‘Find the first section
Dim OuterMatch = OuterRegex.Match(SubjectString)
While OuterMatch-Success 
‘Get the matches within the section
Din InnerMatch = InnerRegex.Match(OuterMatch,Groups(1) Value)
While InnerMatch.Success
ResultList,Add(InnerMatch,Value)
InnerRatch = InnerMatch.NextMatch
End Wh11e
OuterMatch = OuterMatch.NextMatch
End While
Java
Iterating using rwo matchers is easy, and works with Java 4 and later:
List resultList = new ArrayList();
Pattern outerRegex = Pattern.compile(*( *?)", Pattern.DOTALL);
Pattern innerRegex = Pattern,compile(*\\d+*);
while (outerMatcher.find()) {
Matcher innerMatcher = innerRegexmatcher(outerMatcher-group(1));
while (innerMatcher,find()) {
resultList add(innerMatcher -group());
The following code is more efficient (because innerRatcher is created only once), but
requires Java 5 or later:
List resultList = new ArrayList();
Pattern outerRegex = Pattern.compile(*( *?)", Pattern.DoTALL);
Pattern innerRegex = Pattern.compile(*\\d+*);
(an)eex = xe e
while (outerMatcher,find()) {
innerMatcher .region(outerMatcher,start(1), outerMatcher,end(1));
while (innerMatcher, find()) {
resultList, add(innerMatcher -group());
180 IChapter 3: Programming with Regular Expressions
---
## Page 197
JavaScript
var result = [];
var outerRegex = /([\s\5]*？)/g;
var innerRegex = /\d+/g;
var outerMatch;
var 1nnerMatches;
while (outerMatch = outerRegex-exec(subject)) {
1f (outerMatch index == outerRegex.lastIndex)
outerRegex.lastIndex++;
InnerMatches = outerMatch[1] .natch(innerRegex);
1f (innerMatches){
result = result.concat (innerMatches);
XRegExp
XRegExp has a matchChain() method that is specifically designed to get the matches of
one regex within the matches of another regex:
var result = XRegExp.matchChain(subject, [
{regex: XRegExp(*( *?)a, "s"), backref: 1),
/\d+/
1);
Alternatively, you can use XRegExp -forEach() for a solution similar to the standard
JavaScript solution:
var result = [];
(s()dxg8ax =x3agxano xeA
var innerRegex = /\d+/g;
XRegExp.forEach(subject, outerRegex, function(outerMatch){
1f (innerMatches){
var innerMatches = outerMatch[1] -match(innerRegex);
result = result,concat (innerMatches);
{
);
PHP
$list = array();
preg_match_al1(*%( *?)%s', $subject, $outermatches,
PREG_PATTERN_ORDER);
for ($1 = 0; $1 (-*?)!gs) {
push(elist, ($1 =α m/\d+/g));
This only works if the inner regular expression (, in this example) doesn’t have
any capturing groups, so use noncapruring groups instead. See Recipe 2.9 for details.
Python
list = []
innerre = re.conpile(r*(d+")
for outermatch in re.finditer(*(?s)(.*?)*, subject):
list,extend(innerre,findall(outermatch-group(1)))
Ruby
list = []
subject,scan(/( *?)/m) (|outergroups |
1ist += outergroups[1]. scan(/\d+/)
Discussion
Regular expressions are well suited for tokenizing input, but they are not well suited
for parsing input. Tokenizing means to identify different parts of a string, such as num-
bers, words, symbols, tags, comments, etc. It involves scanning the text from left to
right, rying different alternatives and quantities of characters to be matched. Regular
expressions handle this very well
Parsing means to process the relationship berween those tokens. For example, in a
programming language, combinations of such tokens form statements, functions,
classes, namespaces, etc. Keeping track of the meaning of the tokens within the larger
context of the input is best left to procedural code. In particular, regular expressions
cannot keep track of nonlinear context, such as nested constructs.1
Trying to find one kind of token within another kind of token is a task that people
commonly try to tackle with regular expressions. A pair of HTML bold tags is easily
matched with the regular expression ( *?)>,2 A number is even more easily
1. A few moderm regex flavors have tried to introduce features for balanced or recursive matching, These
features resul in such complex regular expessions, however,that theyonly end up proving our point that
parsing is best left to peocedural code.
182 | Chapter 3: Programming with RegularExpressons
---
## Page 199
matched with the regex \d+). But if you try to combine these into a single regex, you'll
end up with something rather different:
\d+(?=(?:(?1) .)*)
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Though the regular expression just shown is a solution to the problem posed by this
recipe, it is hardly intuitive. Even a regular expression expert will have to carefully
scrutinize the regex to determine what it does, or perhaps resort to a tool to highlight
the matches. And this is the combination of just two simple regexes.
A better solution is to keep the two regular expressions as they are and use procedural
code to combine them. The resulting code, while a bit longer, is much easier to under-
stand and maintain, and creating simple code is the reason for using regular expressions
in the first place. A regex such as ( *?)> is easy to understand by anyone with
a modicum of regex experience, and quickly does what would otherwise take many
more lines of code that are harder to maintain.
Though the solutions for this recipe are some of the most complex ones in this chapter,
they're very straightforward. Two regular expressions are used. The *outer* regular
expression marches the HTML bold tags and the text berween them, and the text in
between is caprured by the first capturing group. This regular expression is imple-
mented with the same code shown in Recipe 3.11. The only difference is that the place-
holder comment saying where to use the match has been replaced with code that lets
the *inner” regular expression do its job.
The second regular expression matches a digit. This regex is implemented with the
same code as shown in Recipe 3.10. The only difference is that instead of processing
the subject string entirely, the second regex is applied only to the part of the subject
uojssaudxa reqn8au aaino au1 jo dnou8 Suumdeo sny aq1 Kq paqpeu Buns
There are rwo ways to restrict the inner regular expressions to the text matched by (a
that allows the regular expression to be applied to part of a string. That can save an
capturing group of) the outer regular expressions. Some languages provide a function
extra string copy if the match function doesn’t automatically fill a structure with the
text matched by the capruring groups. We can always simply retrieve the substring
1eq o1 x38au 1auu aq Xqdde pue dnox8 Suunadeo au1 q paqp1eu
Either way, using wo regular expressions together in a loop wil be faster than using
the one regular expression with its nested lookahead groups. The latter requires the
regex engine to do a whole lot of backtracking. On large files, using just one regex will
be much slower, as it needs to determine the section boundaries (HTML bold tags) for
each number in the subject string, including numbers that are not berween  tags.
2. To allow the tag to span multiple lines, turm on *dot matches line breaks” mode. For JavaScript, ase
(([5\5\,])p1