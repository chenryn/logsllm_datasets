[root@haproxy
[root@haproxy
root@haproxy
[root@haproxy
[root@haproxy
[root@haproxy
4.24.tar.gz
[root@haproxy
[root@haproxy
client 50000ms
server 50000ms
connect 5000ms
hard
soft
~]#
~#
~1#
~#
~1#
~]#
~]#yum -y install gcc
nofile
nofile
vim /etc/haproxy.cfg
mkdir /var/haproxy
make install
wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.
make TARGET=linux2628
cd/usr/src/haproxy-1.4.24/
65535
65535
#定义 HAProxy的监控界面
#创建配置文件
#chroot所需要目录
---
## Page 435
客户端验证如下：
[root@haproxy
[root@haproxy
$ModLoad imudp
[root@haproxy ~]# vim /etc/rsyslog.conf
server web1 192.168.0.3:80 cookie web3 check inter 1500 rise 3 fa11 3 weight 1
option httpchk GET
balance roundrobin
modehttp
backend inside_servers
server
#有效开启的，
#健度
#定义后端真实服务器
option httpchk
#检查真实服务器的index.html文件，
balance roundrobin
mode http
backend external_servers
default_backend external_servers
use_backend inside_servers if inside_src
#转发给inside_servers服务器组
#use_backend调用ACL定义，如果源地址为192.168.0.0/24，则代理服务器将会把请求
acl inside_src
option
option
option
1og global
mode http
bind 0.0.0.0:80
frontend web_serivce
stats
stats
stats
stats realm
stats
stats enable
康检查，
hide-version
auth adminl:AdMiN123
web1
uri/admin?stats
refresh
httplog
forwardfor
httpclose
，健康检查的时间间隔为2000ms，
192.168.0.1:80 cookie web1 check inter 2000 rise 2 fa11 3weight
连续三次健康检查失败后，认为服务器已经宕机，服务器权重为1
~]#haproxy
Haproxy\
GET
src 192.168.0.0/24
5s
向cookie信息中插入webl信息，
/index.html
/index.html
Statistics
-f/etc/haproxy.cfg
以此判断服务器的健康状态
连续两次健康检查成功则认为服务器是
#轮询真实服务器
#定义 ACL
/var/log/haproxy.log
#定义终端用户访问的前端服务器
隐藏HAProxy版
#
查看HAProxy监控页面的账户与密码
监控页面URL路径
登录监控统计页面提示符
#
监控统计页面自动刷新时间为5s
#
check代表允许对服务器进行
#指定配置文件启动HAProxy服务
#重启系统日志服务
#修改日志配置文件，插入以下三行
版本信息
真8冀
集群及高可用
419
一
---
## Page 436
端 IP)。这两个模块为 Nginx 默认的自动编译模块，如果不需要编译这些模块，可以用
服务器，HttpUpstreamModule模块的作用是提供简单的负载均衡技术（轮询、最少连接、客户
HttpUpstreamModule模块。其中，HttpProxyModule模块的作用是将用户的数据请求转发至其他
实现基于七层的负载均衡功能。
Nginx 也支持对后端服务器的健康检查功能。目前国内的新浪、网易等公司均已部署了Nginx
可以根据规则以轮询、IP哈希、URL哈希等方式调度后端真实服务器，如同HAProxy一样，
均衡的架构中,Nginx可以为我们提供非常稳定且高效的基于七层的负载解决方案。此外，Nginx
8.5
是web3.example.com主机的页面信息。
址配置为192.168.0.0/24网络内的IP，则访问http://192.168.0.254，服务器返回的页面将永远都
到webl.example.com以及web2.example.com两台主机返回的页面信息。如果客户端主机IP地
General process information
使用浏览器访问http://10.10.10.10:6553/admin?stats查看代理服务器状态统计信息，如图8-11所示。
Linux运维之道
8.5.1Nginx负载均衡
L
420
entend
为了实现 Nginx 的反向代理以及负载均衡功能，我们需要用到HttpProxyModule 和
Nginx除了可以作为后端HTTP服务器外，它还是一个高性能的反向代理服务器。在负载
eb_serive
配置客户端主机IP地址为10.10.10.100，通过浏览器访问http://10.10.10.10，刷新将分别得
首先为客户端主机配置正确的网络环境，确保客户端与HAProxy代理服务器可以直接连通。
Nginx高级应用
rSeeion
图8-11
Erra
Lv200n1m
in2ms
2。
---
## Page 437
理服务器时，Nginx代理服务器会将请求转发给backend服务器组。
员，并将www2.example.com设置为宕机状态，当用户使用域名http://www.example.com访问代
简单的案例是：定义一个名为backend的服务器组，使用server定义组内所有的真实服务器成
器。weight的值代表服务器的权重，down指令可以设置某台服务器暂时处于宕机不可用状态。
置具体的服务器及相关参数。ip_hast指令可以根据用户IP地址的Hash值分配固定的后端服务
IP地址，我们可以使用X-Forwarded-For实现重新定义数据包包头，记录用户真实的IP地址。
然后代理服务器负责转发数据请求给真实服务器。因此，后端真实服务器将无法获得客户端的
立被代理的服务器或URI与代理服务器直接的映射关系。由于用户直接访问的是代理服务器，
望达到精确匹配，则可以使用=前缀符号。使用proxy_pass指令可以根据location 匹配的情况建
正则表达式时必须指定前缀~或～*，～表示区分大小写，～*代表不区分大小写，如果在匹配时希
据请求转发给后端B服务器。location指令可以直接匹配字串，也可以匹配正则表达式，使用
将数据请求转发给后端A服务器；当用户访问http://www.example.com/b时，我们可以定义将数
可以根据URI定义不同的配置，比如，当用户访问http://www.example.com/a时，我们可以定义
--without-http_proxy_module与--without-http_upstream_ip_hash_module两个编译参数禁用这些功能。
下面通过一个简单的例子说明Nginx 作为反向代理服务器的配置方法。其中，location指令
location/
server_name www.example.com;
listen 80;
server wwwl.example.com weight=2;
http{
在负载均衡模块的指令中，upstream 负责定义后端真实服务器集合，这样就可以通过
server
server www3.example.com;
serverwww2.example.comown;
ip_hash;
upstream backend{
proxy_pass http://localhost:8000;
location/
1ocation~*\.（mp31mp4}${
proxy_set_headerX-Forwarded-For$remote_addr;#保留用户真实的IP地址
#location条件满足时将请求转发给本机8000端口
#匹配URL以mp3或mp4结尾的请求
#匹配任意URL
第8章
集群及高可用
---
## Page 438
了演示效果，Web服务器页面设置为不同的内容以示区别）。
表8-9
Nginx使用upstream 定义一组服务器，使用proxy_pass 进行代理转发。
client.example.com
Linux运维之道
web3.example.com
web2.example.com
web1.example.com
nginx.example.com
422
Nginx反向代理负载均衡拓扑结构如图8-12 所示，服务器网络参数见表 8-9。案例中的
8.5.2
BOOTPROTO="static"
DEVICE="etho"
三台Web服务器基本采用相同的设置，注意，IP地址需要改变，
proxy_pass http://backend;
Nginx负载均衡案例
服务器名称
Internet
---
图8-12
etho:10.10.10.100
eth0:192.168.0.3
etho:192.168.0.2
eth0:192.168.0.1
eth1:192.168.0.254
etho:10.10.10.10
Nginx
网络配置
下面仅以webl为例（为
CIO
Web2
Web1
---
## Page 439
[root@nginx nginx-1.4.0]# make &&make install
>--with-mail_ssl module
>--with-http_gzip_static_module\
[root@nginx
[root@nginx ~]# service network restart
TYPE="Ethernet"
PREFIX=24
IPADDR=192.168.0.254
BOOTPROTO="static"
DEVICE="eth1"
[root@nginx ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth1
TYPE="Ethernet"
PREFIX=8
IPADDR=10.10.10.10
ONBOOT="yes"
BOOTPROTO="static"
DEVICE="etho"
[root@nginx ~]# vim /etc/sysconfig/network-scripts/ifcfg-etho
Nginx代理服务器设置：
--with-http_ssl_module\
[root@nginx~]#cd/usr/src/nginx-1.4.0/
[root@nginx
[root@nginx
[root@nginx
TYPE="Ethernet"
GATEWAY=192.168.0.254
[root@webl
[root@webl
PREFIX=24
IPADDR=192.168.0.1
ONBOOT="yes"
root@webl
root@webl
with-http_dav_module\
with-http_addition_module
with-http_realip_module\
~]#
~]#
~]#
~]#
~1#
#
service iptables stop
tar -xzf nginx-1.4.0.tar.gz -C /usr/src/
wget http://nginx.org/download/nginx-1.4.0.tar.gz
service iptables stop
K--um
service network
install httpd
restart
第8章集群及高可用
423
---
## Page 440
Linux运维之道
424
#设置缓存目录及其他缓存参数，缓存路径为/usr/local/nginx/cache，
proxy_buffers 8 128K;
#从被代理服务器读取响应数据的缓存个数与容量
proxy_buffer
proxy_buffering on;
large_client_header_buffers 4 8K;
client_body_buffer_size 128K;
从被代理服务器（真实服务器）所获取的第一部分响应数据的缓存大小
压缩级别，可以是1至9之间的数字，数字越大，压缩效果越好，速度也越慢
gzip_buffers 16 32k;
gzip on;
#启动网页压缩功能
keepalive_requests
server_tokens off;
tcp_nopush
sendfile
log_format main
default_type
include
http{
worker_connections
events
pid
error_log
worker_processes
usernobody;
[root@nginx ~]# vim /usr/local/nginx/conf/nginx.conf
启用代理缓冲功能
客户端请求的Header缓存大小
设置客户端请求所允许的最大文件容量
设置客户端请求的缓存大小
指定压缩文件类型
压缩缓存的个数与容量
容量小于1000B的内容不压缩
+
1ogs/nginx.pid;
logs/error.log
size8k;
mime.types;
application/octet-stream;
on;
on;
1：
100;
65;
5024;
1application/xml;
notice;
levels用来设置子
---
## Page 441
户访问资源的URL进行重新改写，改写后再交给Web服务器进程来处理。实际的生产环境经
唯一定位该资源（如：http://google.com）。而URL重写则可以在Web服务器上面订制规则将用
到webl.example.com以及web2.example.com两台主机返回的页面信息。
1d max_size=2G;
8.5.3
由于互联网资源分布在世界各地，因此，如果用户希望查看某个资源，就需要使用URL来
配置客户端主机IP地址为10.10.10.100，通过浏览器访问http://10.10.10.10，刷新将分别得
[root@nginx ~]# echo"/usr/local/nginx/sbin/nginx">>/etc/rc.local
proxy_set_header X-Forwarded-For $remote_addr;
proxy_cacheone;
proxy_pass http://servers;
server 192.168.0.1:80 max_fails=3 fail_timeout=30s weight=2;
#连接后端服务器超时时间为30s，weight设置权重为2
#max_fails设置连接后端服务器3次失败则认为服务器处于无效状态，fail_timeout设置
#ip_hash;
#度器将采用轮询的方式进行数据转发
#ip_hash使用IP哈希值确保相同IP的客户端使用相同的后端服务器，不使用该参数调
#设置后端服务器组，名称为servers
#与后端服务器建立TCP握手的超时时间
server
server
upstream servers