service design, service implementation to service deployment. and deploy the Incident Management Service (IMS) specified
the ’how’ dimension, a relationship indicates an activity or a
sub-process.Therefore,alongandprofoundstudywithservice
stakeholders is required to model its most important aspects.
As a brief example, we used nested bullet lists to represent a
taxonomy for the ITIL IMS service of our case study. The
taxonomy for the ’what’ dimension was composed by the
concepts: Incident, Solution, Customer, etc.
1) Incident. Unplanned interruption of an IT service.
a) Priority. How quickly the service desk should
address the incident.
i) Impact. The effect on the business.
ii) Urgency. The need for a fast resolution.
b) Supervisor. The responsible actor.
2) Solution. Steps to solve the incident.
3) Customer. The actor which submitted the incident.
Fig.3. ITILIncidentManagementServiceblueprint
4) ....
For example, the Incident concept has nested concepts and
in the Information Technology Infrastructure Library (ITIL). contains all the information needed to manage incidents such
The primary objective of the IMS is to resolve incidents (e.g. as incident Priority composed of the concepts Impact and
application bugs, disks-usage thresholds exceeded, or printers Urgency.
not working) causing an interruption of processing in the For the ’how’ dimension, several concept functions, on the
quickest and most effective possible way. Figure 3 provides a provider and customer side, were identified. On the provider
simple representation of the process model behind the IMS. side, the following nested concepts exist: Categorization, Pri-
Thedecisiontousethisserviceinourresearchwasmadesince oritization,Investigation,andClosure.Theconceptsalsoform
ITIL provides detailed descriptions of well known services a taxonomy of the most important functions of the ITIL IMS:
enabling other researchers to replicate our experiments and 1) Categorization. Classify incidents according to a cate-
findings.
gory and subcategory.
While nowadays software solutions which provide ITIL 2) Prioritization. Use of metrics to determine priority.
services already exist (e.g. ServiceDesk Plus and Aegis Help 3) ....
Desk), our objective is not to develop similar solutions or 4) Investigation. A largely human process to identify the
provide a more or less functional alternative. Our goal is sources of the incident.
todemonstratehowarchitectures,model-drivendevelopments, 5) Closure. Closed incidents remain in the system for
service patterns and cloud-based infrastructures are important reference purposes.
building blocks for the systematic engineering of ISS.
a) Survey. Carry out a user satisfaction survey.
b) Documentation. Ensure that the incident record is
IV. SERVICEANALYSISWITHWEAKSEMANTICS
fully documented.
The service analysis phase is prescribed according to the c) Recurrence.Determinewhetheritislikelythatthe
Zachman framework’s contextual abstraction. In this phase, a incident could recur.
descriptionofthemostimportantelementsassociatedwiththe d) Formal closure. Formally close the incident.
serviceanditsparameterizationiscreatedusingmindmapsand
The creation of mindmaps and nested bullet lists is carried
nestedbulletliststoidentifythemainconceptsasataxonomy
out for all the dimensions of our service architecture, i.e. for
(this approach was also used by the Untangle project [19]).
the ’what’, ’how’, ’where’, etc. dimensions.
A taxonomy provides weak semantics for the domain of The reader is referred to our previous work on service
ISS. The term weak semantics [20] (or lite semantics) refers analysis with the ISE methodology (see [10], [21], [12]).
to semantics that can be identified based on simple structural
V. SERVICEDESIGNUSINGMDD
and syntactic formalisms and contain simple information in
small ”chunks” (deep semantics deals with the issues of The service design abstraction aggregates several models
humancognition,perception,orinterpretation).Thetaxonomy designedaccordingtoourservicearchitectureframework(see
adopted classifies service information entities in the form Figure 1). While the selection of models may vary, we have
of a hierarchy, according to relationships of the real world conducted our experiment to model the ITIL IMS using an E-
entities which they represent. In our work, the meaning (or Rmodel(ER)formodelingdata(’what’),serviceblueprinting
semantics) of the relationships varies and depends on the (SB) [5] to model functions (’how’)(see Figure 3), a network
service architecture dimension under study. For example, for graph (NG) to model locations, a low fidelity prototype to
the ’what’ dimension, relations represent ’is-part-of’, and for model user interfaces (UI) with people (’who’)(see Figure 4),
of self-services. The use of specific languages addresses the
inability of generic languages to alleviate the complexity of
services and express domain concepts effectively. Since most
of the models we have used are well-known, we will only
describe two of them which required extensions and/or adap-
tations: (1) service blueprinting with BPMN and (2) business
description with USDL.
A. Service blueprinting
Service blueprinting [5] provides a visual solution to ex-
press the intentions and goals of ISS while linking them to
customer’s needs as the service back-end process progresses.
Typically, service blueprintings are created using “paper and
pencil” or office tools (e.g. Visio).
Fig. 4. Low fidelity prototype to design the UI for the ITIL IMS
categorizationandprioritizationactivities Since service blueprinting tools with an XML serialization
are not common, we have used the BPMN notation to design
the crucial aspects of services’ processes involving actors
andUSDL[22]tomodeltimingsandmotivations(’when’and and customers. The mapping between the two representation
’why’). languageswasdoneinthefollowingway.Serviceblueprinting
The software implementation of the various ISS models is segment processes were mapped into BPMN’s swimlanes.
not trivial since developers need to posses skills to under- Four swimlanes were created to capture customer actions, on-
stand various languages. Given the substantial learning curve stage employees’ actions, back-stage employees’ actions, and
of these languages, researchers have proposed that software support processes. The separations of swimlanes corresponds
artifacts(WSDL,EJB,CORBAObjects,etc.)canbegenerated to the line of interaction, line of visibility and line of internal
automatically from models (such as UML diagrams and ER actions. Physical evidence was specified with a special swim-
models). If it was also possible to generate ISS software lane.Oncethismappingwasdone,wehavemodeledtheITIL
implementations directly from ISS models using MDD then IMS process illustrated in Figure 3.
it would be possible to generate complete ISS applications Afterwards, we have experimented two distinct tools to
directly from widely understood representations. This would transform the service blueprint modeled with BPMN, and
reduce implementation costs, increase homogeneity, and re- serialized with XML, into an MVC-based pattern: (1) Sparx
duce programming errors. Systems’EnterpriseArchitectand(2)BonitaBPMNworkflow
ForInternet-basedself-servicestorealizethefullbenefitsof editor.
MDD,itisimportanttofindwaysofformalizingandorganiz- UsingEnterpriseArchitect,theXMLserializationofBPMN
ing architectural artifacts according to a service architecture washighlycomplexsincetherewereaconsiderablenumberof
to afterwards allow an automatic code generation [23]. As references to components’ IDs, such as ’EAID 7A41FEBE -
such, we rely on MDD to abstract models of ISS and system- D787 4514 AE57 386CECB19C89’. The parsing of XML
atically transform these models to concrete implementations was not sequential. For example, to retrieve tasks flow there
[24] organized according to an adapted version of the MVC was the need to navigate by “SequenceFlows” and retrieve
pattern (called MVC for Services) to be later deployed in input and output IDs, then obtain source and destination IDs,
a PaaS. The transformation of ISS’ models builds upon our store them into a temporary variable, retrieve the respective
previouswork[25]inwhichweuseofXSLTandXPath-based node and retrieve the corresponding name. This process was
instructions to transform the models exchanged in business- extremely complex using XSLT. Mostly because XSLT pro-
to-business transactions. The system developed made use of ceeds only forward. When there is the need to move from
XSLT instructions to transform transactions for global trading one node to another, it is difficult to develop a clean code.
(represented with ebXML, xCBL, etc.) into a company’s As a result of this complexity, we decided to create our own
private and internal domain data model (represented with an XML transformation engine based on XPath instead of using
ontology expressed with OWL serialized with XML). XSLT.Thecustommadetransformationengineisveryflexible
MDD’s defining characteristic is that self-service develop- since it is implemented with a general-purpose language (e.g.
ments primary focus on services models rather than computer Ruby)andreliesonanXPathlibrarytoqueryandselectnodes
programs. This is because the complexity of service systems from XML documents. For applications which require only a
that software typically deals with is often very far from state- small set of transformations which do not change frequently
ments of data, functions, interfaces, and rules that constitute over time or are not reused, it is an appropriate solution.
programming languages. Since ISS are a very specific type of Therefore, we decided to make a specific parser to extract
applications, we rely on domain-specific modeling languages, the various BPMN elements. As a second experiment, we
such as service blueprinting and USDL, to formalize with carriedoutthesameactionsbutthistimeusingBonitaBPMN
a high precision the structure, behavior, and requirements workflow editor. The results were significantly different. The
XML specification generated to model the ITIL IMS was being driven by important players in the field of business
simple and easy to understand. As a result, a transformation and IT services such as SAP AG and Siemens. We have
engine based on XSLT was rapidly developed. This was the used it to enhance the description of the ITIL IMS with a
most efficient and effective approach. special emphasis on business and operational aspects such as
Both approaches extracted BPMN elements from the XML quality of service, pricing and legal aspects among others.
serialization, i.e. roles, transitions, tasks, etc. which drove the To transform the USDL specification, we developed a set of
generation of code and instructions that were stored into our XSLT instructions responsible for its transformation into Web
MVCforServicesstructure.Forexample,roleswereimportant pagecode(i.e.HTML)whichwasafterwardsinjectedintothe
to create automatically an access control list (ACL) and login views of the MVC for Services structure. USDL was used to
views for the various actors involved during the provisioning provide additional information on the IMS to end users, such
of the IMS. Transitions were used to set the control-flow as the legal rights and obligations, and the quality of service
of the IMS application into the MVC controllers. Control- renderedtoendusers.Operationscheduleswereextractedand
flow information and event-based information was generated transformed into software code in the form of business rules.
and took the form of control constructs such as If-Then- These rules were injected into MVC controllers to specify the
Else and Repeat-While of the BPMN process model. Each periods (i.e. days/hours) when the IMS was available to end
task part of the blueprint is associated with a view designed users.
with a low fidelity prototype. For example, the task ’Incident Instead of using QVT- or ATL-based approaches, and to
Prioritization’fromFigure3isassociatedwiththeUIsketched simplifythetransformationprocess,MDDreliedontheuseof
in Figure 4. Low fidelity prototype are created manually XSLTandXPathtotransformmodelsintocode.Thepreferred
(we have relied on the application Balsamiq Mockups). The waytogeneratecodewastouseXSLT.Nonetheless,theXML
association is made by matching the task name with the representation of some models was extremely complex. In
filename of the XML file describing the UI. such a case, XSLT did not enabled to construct simple and
Independently of the approach followed (i.e. XPath or straightforwardinstructionsandwereliedonamoreexpensive
XSLT), the generated code was never final. We estimate that solution with XPath to manually identify XML tags, under-
approximately 25% of the skeleton and basic structure of an stand their semantics, and manually encode transformations
ISS was automatically generated (and 75% must be manually using a generic programming language.
coded). There are always adjustments that need to be made in
VI. SERVICEIMPLEMENTATIONUSINGMVCFOR
order to make the code runnable. Those adjustments included
SERVICES
refining software programs, HTML user interfaces, database
The model-view-controller architectural pattern, originally
connections, etc.
deployed in Smalltalk, is widely used in the construction of
Nonetheless, to increase the degree of automation, several
Web applications. As such, we believed it would also be suit-
extensions can be made to our approach. One the one hand,
ableforISS.WeproposeanadaptedversionofMVCtocreate
if an organization uses a consistent UI layout for all their
MVC-based skeletons for Internet-based self-services. The
Web applications they can create a UI template and add it the
generatedsoftwarecode,databaseinstructions,userinterfaces,
view structure of MVC. This will enable to produce, with a
etc. were structured according to an adapted and compliant
high degree of automation, UI which are close to their final
version of the MVC pattern which we call MVC for Services.
visual aspect. The UI code will be injected directly into those
This pattern was tailored to account for the specificities of
templates. On the other hand, the process notation provided
ISS. The adapted MVC followed the following principals:
by BPMN to model blueprints can be explored to a greater
extend.Forexample,eventscanbeusedtorepresentmessages • The model stores the code of the data models of the
(e.g. e-mails) send by the user and notifications received the service architecture (i.e. ’what’ dimension).
application that must be shown to the user. Once events are • The view stores the instructions of the UI models of the
usedinblueprints,theycanalsotriggerthegenerationofcode. architecture (i.e. ’who’ dimension).
Furthermore, BPMN2 provides data objects of type input and • ThecontrollerstoresthecodeoftheblueprintandUSDL
output which can be used to automatically build database models of the service architecture (i.e. ’how’, ’why’ and
queries to retrieve data from the MVC’s model. As a last ’when’ dimensions).