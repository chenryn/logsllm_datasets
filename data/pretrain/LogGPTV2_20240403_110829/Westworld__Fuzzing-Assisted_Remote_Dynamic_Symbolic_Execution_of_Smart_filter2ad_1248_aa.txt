title:Westworld: Fuzzing-Assisted Remote Dynamic Symbolic Execution of Smart
Apps on IoT Cloud Platforms
author:Lannan Luo and
Qiang Zeng and
Bokai Yang and
Fei Zuo and
Junzhe Wang
Westworld: Fuzzing-Assisted Remote Dynamic Symbolic
Execution of Smart Apps on IoT Cloud Platforms
Lannan Luo
Bokai Yang
Qiang Zeng
University of South Carolina
University of South Carolina
Columbia, USA
PI:EMAIL
Columbia, USA
PI:EMAIL
University of South Carolina
Columbia, USA
PI:EMAIL
Fei Zuo
University of South Carolina
Columbia, USA
PI:EMAIL
Junzhe Wang
University of South Carolina
Columbia, USA
PI:EMAIL
ABSTRACT
Existing symbolic execution typically assumes the analyzer can
control the I/O environment and/or access the library code, which,
however, is not the case when programs run on a remote propri-
etary execution environment managed by another party. For exam-
ple, SmartThings, one of the most popular IoT platforms, is such a
cloud-based execution environment. For programmers who write
automation applications to be deployed on IoT cloud platforms, it
raises significant challenges when they want to systematically test
their code and find bugs. We propose fuzzing-assisted remote dy-
namic symbolic execution, which uses dynamic symbolic execution
as backbone and utilizes fuzzing when necessary to automatically
test programs running in a remote proprietary execution environ-
ment over which the analyzer has little control. As a case study,
we enable it for analyzing smart apps running on SmartThings.
We have developed a prototype and the evaluation shows that it is
effective in testing smart apps and finding bugs.
ACM Reference Format:
Lannan Luo, Qiang Zeng, Bokai Yang, Fei Zuo, and Junzhe Wang. 2021.
Westworld: Fuzzing-Assisted Remote Dynamic Symbolic Execution of
Smart Apps on IoT Cloud Platforms. In Annual Computer Security Applica-
tions Conference (ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3485832.3488022
1 INTRODUCTION
The rapid proliferation of Internet-of-Things (IoT) devices has ad-
vanced the development of smart homes and factories. By installing
automation apps (also called IoT apps or smart apps) on IoT plat-
forms, users can integrate heterogeneous IoT devices for convenient
automation. Popular IoT platforms include Samsung SmartThings,
Amazon Alexa, and Google Home.
On platforms such as SmartThings, there is a lengthy process
to manually review an official smart app [64], which is incomplete,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3488022
error-prone and time-consuming. On the other hand, many develop-
ers enjoy writing custom smart apps and share them on the Smart-
Things community forum so that others can use them [62, 63, 70, 71],
which however does not enforce code review, causing even more
bugs to exist. This points to a critical need for automated testing of
smart apps for bug discovery.
A promising testing technique is symbolic execution [34], an au-
tomated path exploration approach that is powerful for finding bugs.
While many symbolic executors have been proposed for analyzing
Windows programs [34], Linux programs [11, 12, 23, 49, 50] and
Java programs [51, 52, 59], none support the analysis of IoT apps.
Due to unique characteristics of IoT platforms, there are multiple
challenges for symbolic execution analysis of IoT apps.
Challenge 1: Closed-source platform proprietary APIs. Exist-
ing classic symbolic execution often assumes the analyzer and the
execution environment reside together locally, and the I/O environ-
ment and the API layer can be modeled conveniently. However, in
the case of remote proprietary computing platforms, such as IoT
cloud platforms, very often the assumptions are not valid.
IoT apps frequently interact with the platform by invoking APIs,
e.g., to retrieve environment data (such as temperature and device
status), which are proprietary with no code released to the public.
For API calls, classical symbolic execution either sets the return
variables as new symbolic inputs [54], causing imprecision, or ap-
plies function modeling [9, 32], which requires access to the API
code or detailed documentation.
In order to analyze IoT apps running in a remote proprietary en-
vironment, we propose remote dynamic symbolic execution (remote
DSE) to remotely and symbolically execute them. To enable remote
DSE, our insight is that IoT platforms usually support logging and
messaging [73], which makes information collection viable. Specifi-
cally, we leverage logging service to collect information needed for
path exploration and send it back as messages to the local analyzer
for making strategic exploration decisions.
Challenge 2: Achieving both precision and completeness of
remote DSE. Although dynamic symbolic execution can recover
from imprecision of classic symbolic execution caused by API calls,
it often sacrifices completeness1 for missing execution paths. While
missing some paths might not be a big issue for large-sized pro-
grams, such as web applications [3, 5, 55] and Android apps [31, 86],
1Completeness here refers to full path coverage, following the definition in [13] and [23].
982ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Lannan Luo, Qiang Zeng, Bokai Yang, Fei Zuo, and Junzhe Wang
it has a significant impact on small-sized programs, such as IoT
apps having a relatively small number of paths. How to achieve both
precision and completeness for analyzing IoT apps is challenging.
To tackle this challenge, we propose selective code-segment
fuzzing to assist DSE. It (i) automatically identifies the code snippet
of a smart app that causes missing execution paths, and (ii) fuzzes
only this part of code to complement symbolic execution. The result
from selective code-segment fuzzing is combined with the symbolic
path constraints from DSE to explore paths.2 Our insight is that
symbolic inputs (e.g., temperature, home mode, switch state) of
smart apps usually have a small to moderate number of discrete
values. Thus, selective code-segment fuzzing that fuzzes a code
segment by iterating over values of the symbolic inputs is feasible
(see Section 6). This is different from general programs, where their
inputs usually have an infinite or huge number of possible values.
Challenge 3: Communication cost due to remote execution.
As IoT apps run remotely, the request handling and communication
cost between the local analyzer and remote cloud cannot be omitted.
We propose boosted generational search, which speeds up the
analysis by wrapping multiple test inputs in one test request.
There are some other challenges. Smart apps frequently interact
with the platform to retrieve environment data, which may be in-
volved in conditional statements to determine whether a branch
should be taken. However, it is not allowed to vary environment
settings on a platform once an app starts. Our solution is to pre-
cisely identify variables storing environment data and set them as
symbolic inputs. Moreover, smart apps have grammar peculiarities,
such as closure [69]. How to deal with the peculiarities is challenging.
We have overcome these challenges, and implemented a sys-
tem named Westworld, which enables fuzzing-assisted dynamic
symbolic execution of IoT apps running on a remote platform. To
make the work concrete, we showcase the ideas and techniques on
SmartThings, one of the most popular IoT device integration plat-
forms. The source code for Westworld and datasets are publicly
available.3 We evaluate Westworld with various experiments to
measure its precision, completeness, efficiency, and effectiveness
in bug finding. Our experiment results show that it is effective
and efficient in testing IoT apps and finding bugs (e.g., division by
zero, array out of bound, and null-pointer dereference). We made the
following contributions.
• Being the first in the literature, we present a system that
enables dynamic symbolic execution of IoT apps running on
a remote platform, of which the API code is not available to
the analyzer and program execution states cannot be cloned.
• Selective code-segment fuzzing is proposed to assist dynamic
symbolic execution to effectively and precisely handle closed-
source proprietary API calls. It captures a unique character-
istic of smart apps, whose symbolic variables usually have a
small number of discrete values.
• Boosted generational search is proposed to save the analysis
• We have implemented a prototype named Westworld, and
demonstrate its efficiency and effectiveness in bug finding.
cost and greatly increases the efficiency of remote DSE.
2Driller [67] adopts symbolic execution assisted fuzzing, while our work uses fuzzing-
assisted symbolic execution (see Section 9).
3https://github.com/lannan/Westworld
2 BACKGROUND
2.1 SmartThings IoT Platforms
SmartThings is a proprietary platform owned by Samsung. It pro-
vides a software stack used to develop applications that monitor
and control smart devices. SmartThings includes four main compo-
nents: hub, smart apps, smart devices, and cloud. The hub bridges the
communication between connected smart devices and the cloud,
although WiFi-based IoT devices do not require a hub. Smart apps
are developed in Groovy (a dynamic, object-oriented language) and
run in the cloud. While SmartThings has recently started to sup-
port other languages, apps in Groovy are still the most popular and
sophisticated ones, supported by different versions of SmartThings.
SmartThings and third-party developers share their smart apps’
code on GitHub [66] and community forum [65], respectively.
2.2 Symbolic Execution and Limitations
Classical Symbolic Execution. Symbolic execution is an analysis
approach to program path exploration [40]. Input variables are
represented using symbolic values. During path exploration, each
path corresponds to a symbolic path condition, which is solved by
a constraint solver to generate concrete inputs for the path.
Programs interact with the outside by calling library/system
functions, whose code may not be available or contained path con-
straints cannot be resolved; such functions are called uninterpreted
functions (see Section 3 of [13]). A key disadvantage of classical
symbolic execution is that it cannot generate accurate inputs when
handling them [13].
Limitations. For uninterpreted functions, classical symbolic ex-
ecution either sets the return variables as new symbolic inputs [54],
or applies function modeling [11].
• Smart apps frequently interact with the outside by invoking
platform proprietary APIs, whose code is not available to
the analyzer. If the return values of platform proprietary API
calls are set as new symbolic inputs, the generated test cases
will become imprecise, since the SMT solver does not know
how to handle a constraint like x == Fun(y).
• Function modeling needs precise understanding of the se-
mantics of each API, but detailed documentation of the APIs
used by smart apps is not available. Plus, it usually needs
tedious manual effort.
Dynamic Symbolic Execution (DSE). There are two main cate-
gories [13]. (1) Concolic testing executes a program starting with
some given inputs and gathers symbolic path constraints at condi-
tional statements along execution. The collected path constraints
are negated systematically or heuristically and solved with a con-
straint solver, yielding new inputs to exercise different paths.
(2) Execution-generated testing checks before every operation if
the values involved are all concrete [11, 12, 23]. If so, the operation
is executed concretely; otherwise, it is performed symbolically. If
an API function is met, it solves the current path condition for a
satisfying assignment, and uses the generated concrete values to
invoke this API function and the following operations.4
4Function summaries are also frequently used to handle API calls (for speeding up
symbolic execution) by encoding test results of an API using input preconditions and
output postconditions [32]. This method requires access to API code (see Section 3.1
of [32]) and is thus not applicable in our case.
983Westworld: Fuzzing-Assisted Remote Dynamic Symbolic Execution of Smart Apps on IoT Cloud Platforms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
3.2 Limitations of Current Concolic Testing
Figure 3 shows four examples, where the behavior of sysAPI is
unknown and the code is unavailable. Current concolic testing
may be able to achieve full path coverage for the first two, but it is
difficult to achieve completeness for the latter two.
Example 1. Suppose that concolic testing starts with the initial
input x = 2, where x is a symbolic input. In the first execution, the
true branch of the first if statement (Line 2) and the false branch of
the second if statement (Line 4) are taken. The collected symbolic
path condition is (x  3 to get
another input x = 4, which executes different paths.
Example 2. Suppose the initial values of the symbolic inputs are
x = 2 and y = 4. In the first execution, the true branch of the first if
statement (Line 2) is taken. Assume the value of the return variable
ret of sysAPI is 10. It then proceeds to explore the true branch of
the second if statement (Line 4) and records the path constraint
y < 10. To explore the false branch of the second if statement