In PR #8354 we noted that the autograd engine always clears its final
callbacks on execute():
    auto Engine::execute(const edge_list& roots,
                         const variable_list& inputs,
                         bool keep_graph,
                         bool create_graph,
                         const edge_list& outputs) -> variable_list {
      std::call_once(start_threads_flag, &Engine::start_threads, this);
      // NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
      validate_outputs(roots, const_cast(inputs), [](const std::string& msg) {
        return msg;
      });
      // Callbacks are only valid for the duration of this run and should always be cleared
      ClearCallbacks _cb_guard(final_callbacks, post_callbacks_lock);
Which suggests that if execute() is called twice during a run of backward()
then callbacks already enqueued from the first or outermost run will be
destroyed. This is clearly unexpected.
@apaszke and I think we could address this by associating final callbacks with
backwards graphs and calling them as each graph finishes. We may also want to
throw an error if a final callback is created outside of a backward graph it
can be associated with.
Edit: code formatting.