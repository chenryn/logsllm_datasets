printf("%s: mount disallowed\n", DADiskGetBSDName(disk));
return dissenter;
}
int
main(void)
{
DAApprovalSessionRef session = DAApprovalSessionCreate(kCFAllocatorDefault);
OUT_ON_NULL(session, "failed to create Disk Arbitration session");
DARegisterDiskMountApprovalCallback(session,
NULL, // matches all disk objects
mountApprovalCallback,
NULL); // context
DAApprovalSessionScheduleWithRunLoop(session, CFRunLoopGetCurrent(),
kCFRunLoopDefaultMode);
CFRunLoopRunInMode(kCFRunLoopDefaultMode, 30 /* seconds */, false);
DAApprovalSessionUnscheduleFromRunLoop(session, CFRunLoopGetCurrent(),
kCFRunLoopDefaultMode);
DAUnregisterApprovalCallback(session, mountApprovalCallback, NULL);
out:
if (session)
CFRelease(session);
exit(0);
}
$ gcc -Wall -o dissent_mount dissent_mount.c \
-framework DiskArbitration -framework CoreFoundation
$ ./dissent_mount
# another shell
$ open /tmp/somediskimage.dmg
disk10s2: mount disallowed
...
11.2.3. Receiving Media Notifications from the I/O Kit
The program in Figure 117 requests the I/O Kit to send it notifications when removable storage devices
appear or disappear. More precisely, appearance means that the IOService matching the given matching
dictionary has had all relevant drivers probed and started. Similarly, disappearance means that the
IOService has terminated. Our example's matching dictionary looks for all IOMedia objects. Optionally,
we could refine the dictionary by adding other key-value pairs using CFDictionaryAddValue(). For
example, the following will limit matching to only whole media devices (and not partitions):
...
CFDictionaryAddValue(match, CFSTR(kIOMediaWholeKey), kCFBooleanTrue);
...
Figure 117. Monitoring the appearance and disappearance of storage devices
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 11 of 90
// mediamon.c
#include 
#include 
#include 
#include 
int
printDictionaryAsXML(CFDictionaryRef dict)
{
CFDataRef xml = CFPropertyListCreateXMLData(kCFAllocatorDefault,
(CFPropertyListRef)dict);
if (!xml)
return -1;
write(STDOUT_FILENO, CFDataGetBytePtr(xml), CFDataGetLength(xml));
CFRelease(xml);
return 0;
}
void
matchingCallback(void *refcon, io_iterator_t deviceList)
{
kern_return_t kr;
CFDictionaryRef properties;
io_registry_entry_t device;
// Iterate over each device in this notification.
while ((device = IOIteratorNext(deviceList))) {
// Populate a dictionary with device's properties.
kr = IORegistryEntryCreateCFProperties(
device, (CFMutableDictionaryRef *)&properties,
kCFAllocatorDefault, kNilOptions);
if (kr == KERN_SUCCESS)
printDictionaryAsXML(properties);
if (properties)
CFRelease(properties);
if (device)
IOObjectRelease(device);
}
}
int
main(void)
{
CFMutableDictionaryRef match;
IONotificationPortRef notifyPort;
CFRunLoopSourceRef notificationRunLoopSource;
io_iterator_t notificationIn, notificationOut;
// Create a matching dictionary for all IOMedia objects.
if (!(match = IOServiceMatching("IOMedia"))) {
fprintf(stderr, "*** failed to create matching dictionary.\n");
exit(1);
}
// Create a notification object for receiving I/O Kit notifications.
notifyPort = IONotificationPortCreate(kIOMasterPortDefault);
// Get a CFRunLoopSource that we will use to listen for notifications.
notificationRunLoopSource = IONotificationPortGetRunLoopSource(notifyPort);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 12 of 90
// Add the CFRunLoopSource to the default mode of our current run loop.
CFRunLoopAddSource(CFRunLoopGetCurrent(), notificationRunLoopSource,
kCFRunLoopDefaultMode);
// One reference of the matching dictionary will be consumed when we install
// a notification request. Since we need to install two such requests (one
// for ejectable media coming in and another for it going out), we need
// to increment the reference count on our matching dictionary.
CFRetain(match);
// Install notification request for matching objects coming in.
// Note that this will also look up already existing objects.
IOServiceAddMatchingNotification(
notifyPort, // notification port reference
kIOMatchedNotification, // notification type
match, // matching dictionary
matchingCallback, // this is called when notification fires
NULL, // reference constant
&notificationIn); // iterator handle
// Install notification request for matching objects going out.
IOServiceAddMatchingNotification(
notifyPort,
kIOTerminatedNotification,
match,
matchingCallback,
NULL,
&notificationOut);
// Invoke callbacks explicitly to empty the iterators/arm the notifications.
matchingCallback(0, notificationIn);
matchingCallback(0, notificationOut);
CFRunLoopRun(); // run
exit(0);
}
$ gcc -Wall -o mediamon mediamon.c -framework IOKit -framework CoreFoundation
$ ./mediamon
# some disk is attached, probed for volumes, and a volume is mounted
...
BSD Major
14
BSD Minor
3
BSD Name
disk0s3
...
A notification we receive will provide us an iterator (io_iterator_t) containing one or more I/O Registry
entries (io_registry_entry_t), each corresponding to a device. We will fetch and display the properties
of each device.
11.3. The Implementation of Disk Devices
Although the file system layer in the Mac OS X kernel sees storage devices as BSD devices, the I/O Kit
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 13 of 90
ultimately drives these devices. Figure 118 shows the relevant portion of the I/O Kit stack on a system with
two serial ATA (SATA) disks.
Figure 118. An I/O Kit stack depicting a disk device and its partitions
[View full size image]
The IOATABlockStorageDriver is a client of the I/O Kit ATA family and a member of the storage family.
In the I/O Kit, the actual storage on a storage device is represented by an I/O Media object (IOMedia), an
instance of which can abstract several types of random access devicesboth real and virtualsuch as the
following:
Whole disks
Disk partitions
Disk supersets (e.g., RAID volumes)
Apple's implementation of software RAID (AppleRAID) combines multiple block devices to construct an
I/O Kit storage stack yielding a single virtual device. When I/O is performed to the virtual device, the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 14 of 90
RAID implementation calculates the offsets on the specific physical devices to which the I/O must be
dispatched.
An I/O Media object acts as a channel for all I/O that goes to the storage underlying it. As we saw in
Chapter 10, Mac OS X also supports I/O Media Filter objects, which are subclasses of IOMedia and can be
inserted between I/O Media objects and their clients, thereby routing all I/O through the filter object as
well.
The IOMediaBSDClient class, which is implemented as part of the IOStorageFamily I/O Kit family, is
the entity in charge of making storage devices appear as BSD-style block and character devices. In
particular, as disks and partitions appear in the I/O Kit, IOMediaBSDClient calls the device file system
(devfs) to dynamically add the corresponding block and character device nodes. Similarly, when a device is
removed, IOMediaBSDClient calls devfs to remove the corresponding BSD nodes. The block and
character device function tablesthe traditional Unix-style bdevsw and cdevsw structuresare also part of the
IOMediaBSDClient implementation (Figure 119).
Figure 119. The Mac OS X block and character device switch structures
// IOMediaBSDClient.cpp
...
static struct bdevsw bdevswFunctions =
{
/* d_open */ dkopen,
/* d_close */ dkclose,
/* d_strategy */ dkstrategy,
/* d_ioctl */ dkioctl_bdev,
/* d_dump */ eno_dump,
/* d_psize */ dksize,
/* d_type */ D_DISK
};
static struct cdevsw cdevswFunctions =
{
/* d_open */ dkopen,
/* d_close */ dkclose,
/* d_read */ dkread,
/* d_write */ dkwrite,
/* d_ioctl */ dkioctl,
...
};
...
// Implementations of the dk* functions
void
dkstrategy(buf_t bp)
{
dkreadwrite(bp, DKTYPE_BUF);
}
...
int
dkreadwrite(dkr_t dkr, dkrtype_t dkrtype)
{
// I/O Kitspecific implementation
}
...
Let us see an example of how I/O propagates from the file system to a disk device. Figure 1110 is partially
derived from Figure 852, which showed an overview of a page-in operation. In Figure 1110, we follow the
path of a typical read request destined for an HFS Plus volume residing on an ATA device.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 15 of 90
Figure 1110. A typical read request's journey to a disk device
[View full size image]
Note in Figure 1110 that cluster_io() and related routines represent the typical I/O path in the kernelone
that goes through the unified buffer cache. Although not shown in the figure, before issuing the I/O through
the file system's strategy routine, cluster_io() calls the file system's VNOP_BLOCKMAP() operation to map
file offsets to disk offsets. Eventually, the strategy routine of the block devicedkstrategy()is called.
dkstrategy() calls dkreadwrite(), which sends the I/O down the I/O Kit stack. In this example, the
device is an ATA device. When the I/O eventually reaches the IOBlockStorageDriver class, the latter
will choose the appropriate ATA commands and flags to perform the actual transfer.
Note that Mac OS X does not use explicit disk scheduling. In particular, I/O requests are not explicitly
reordered, although the nonI/O Kit parts of the kernel may defer a request in order to combine several
requests into a single large request.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 16 of 90
11.4. Disk Images
Exploring and experimenting with disks and file systems is a potentially risky activity in that a mistake
might lead to catastrophic data loss. A safer and more convenient alternative is to work with virtual disksor
disk imagesrather than physical disks. In the simplest terms, a disk image is a file containing what would
normally reside on a physical storage device. Given the appropriate support from the operating system,
virtual disks behave just like their physical counterparts. The following are some examples of using virtual
disks.
 You could read raw data from a floppy disk and save it to a filesay, using the dd command on Unix
or RAWRITE.EXE on Windows. The file so obtained is a block-by-block image of the physical floppy
disk. It could be written back to another, similar physical disk to yield a sector-by-sector copy of the
original. This process could be used to obtain a disk image from an optical disk, a hard disk partition,
or even an entire hard disk.
Many operating systems allow regular files to be accessed as virtual disk device nodes. These virtual
disks may be used like regular disks: You can partition them, use them for swapping, and create file
systems on them. Examples include Linux "loop" devices, the Solaris lofi driver, and BSD's vnode
pseudo disk (vn) driver.
Virtualizers and emulators typically use disk images for running guest operating systems.
A disk image could be compressed or encrypted. Mac OS X's File Vault feature employs an
encrypted disk image to provide an encrypted home directory for a user.
Thus, disk images are useful for archives, software distribution, emulation, virtualization, and so on. They
are well suited for file system experimentation because they allow you to perform potentially dangerous
operations without having to worry about loss of precious data.
11.4.1. Using the hdiutil Program
Apple has used disk images for a long time, primarily for software distribution. The Mac OS X Disk
Images framework (System/Library/PrivateFrameworks/DiskImages.framework) is a private
framework that provides comprehensive support for disk images. The hdiutil command-line program,
which we will frequently use in this chapter and the next, is a versatile tool to access this framework's
functionality.
Warning
If you try disk-image-based examples on your computer, be warned that you must be careful about the
device node names you use. The I/O Kit dynamically assigns names such as /dev/disk1
and /dev/disk1s2 to devices depending on the number of diskswhether real or virtualcurrently attached.
Therefore, if you have multiple real disks attached to your computer, disk1 is likely to refer to a real disk
on your system. We will use fictitious disk numbers that start from 10 in our examplesthat is, disk10,
disk11, and so on. Please note and use the dynamic names assigned to virtual disks on your system.
The following hdiutil command line creates a file (/tmp/hfsj.dmg) containing a 32MB disk image. It
also partitions the resultant virtual disk using the Apple partitioning scheme and creates a journaled HFS
Plus file system on the data partition. The resultant volume's name is HFSJ.
$ hdiutil create -size 32m -fs HFSJ -volname HFSJ -verbose /tmp/hfsj.dmg
Initializing...
Creating...
...
DIBackingStoreCreateWithCFURL: creator returned 0
DIDiskImageCreateWithCFURL: creator returned 0
DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 17 of 90
DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000013 seconds
Formatting...
Initialized /dev/rdisk10s2 as a 32 MB HFS Plus volume with a 8192k journal
Finishing...
created: /tmp/hfsj.dmg
hdiutil: create: returning 0
Using the -debug option instead of -verbose causes hdiutil to print excruciatingly detailed progress
information. Normally, we will not use either of these two options.
We can mount a disk image in several ways. Double-clicking a disk image's icon in the Finder or opening
it with the open command-line utility
launches /System/Library/CoreServices/DiskImageMounter.app to handle the mounting.
Alternatively, hdiutil can be used to attach the image to the system as a device. hdiutil, along with a
helper program (diskimages-helper), communicates with diskarbitrationd to attempt to mount the
volumes contained on the disk.
$ hdiutil attach /tmp/hfsj.dmg
/dev/disk10 Apple_partition_scheme
/dev/disk10s1 Apple_partition_map
/dev/disk10s2 Apple_HFS /Volumes/HFSJ