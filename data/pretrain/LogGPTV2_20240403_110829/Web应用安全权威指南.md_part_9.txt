### 优化后的文本

```markdown
#### JavaScript 能够读取 iframe 内部数据

```javascript
alert(e.message);
```

以下是显示在 iframe 中的"内层"HTML。

**代码清单 /32/32-002.html（内层 HTML）**

```html
<!-- iframe 的内层 -->
密码
```

运行页面如图 3-26 所示。点击“密码→”按钮后，iframe 内部的文本框中的文字出现在了按钮右侧。这证实了 JavaScript 能够取得 iframe 内部的内容。

![](Image00038.jpg)
**图 3-26 JavaScript 能够读取 iframe 内部数据**

#### iframe 被滥用的可能性

由于 iframe 内部的信息可以被 JavaScript 读取，这可能会引发安全性问题。假设你是一名被动攻击的受害者，在登录 example.jp 后浏览了恶意网站 trap.example.com。该恶意网站使用 iframe 显示 example.jp 的内容，如图 3-27 所示。由于你已登录 example.jp，因此 iframe 内会显示你的个人信息。这些信息只有你自己能看到，所以浏览器上显示本身没有问题。

![](Image00039.jpg)
**图 3-27 使用 iframe 的恶意网站**

但是，如果恶意网站能够通过 JavaScript 访问 iframe 内部信息，则存在问题。因为你的个人信息会被恶意网站上的脚本发送到其服务器。下面我们来试验一下这种情况是否可行。

假设恶意网站 trap.example.com 包含一个包含 iframe 的 HTML 文件（32-900.html），并在 iframe 中显示 32-002.html（内层 HTML）。尽管 32-900.html 扮演的是恶意网站的角色，但其内容与 32-001.html 相同。

#### 同源策略

访问后点击“密码→”按钮，页面显示如下：

![](Image00040.jpg)
**图 3-28 恶意网站试图使用 JavaScript 读取 iframe 内部内容被拒绝**

虽然 iframe 内可以显示 example.jp 的内容，但其他主机（trap.example.com）上的 JavaScript 无法访问其内容。这是因为根据同源策略，JavaScript 不能访问其他主机的内容，以防止安全问题。

#### 同源的条件

严格来说，“同源”需满足以下所有条件：
- URL 的主机（FQDN：Fully Qualified Domain Name，全称域名）一致。
- Scheme（协议）一致。
- 端口号一致。

发送 Cookie 时的条件与协议或端口号无关，因此对 JavaScript 的限制更为严格。而另一方面，JavaScript 没有访问目录的限制。

```markdown
同源策略的保护对象不仅仅是 iframe 内的文档。例如，实现 Ajax 时所使用的 XMLHttpRequest 对象能够访问的 URL 也受到同源策略的限制。
```

#### 应用程序安全隐患与被动攻击

尽管浏览器的同源策略为抵御被动攻击提供了一道屏障，但如果应用程序中存在安全隐患，仍可能遭受被动攻击。跨站脚本攻击（XSS）就是一个典型例子。

跨站脚本攻击将在下一章详细讨论。这里我们先利用刚才的例子来解释其攻击方式。在使用 iframe 外层的 JavaScript 访问内层（其他主机）数据时，由于违反同源策略，访问会被拒绝。但是，可以通过一些特殊手段将 JavaScript 放到 iframe 的内层执行。由于在 iframe 内层不会受到同源策略的限制，因此能够成功访问文档信息。这种攻击称为跨站脚本攻击（XSS），将在 4.3 节详细讲述。

![](Image00041.jpg)
**图 3-29 XSS 通过将 JavaScript 放到内层从而在同源的环境下来执行**

> **专栏：第三方 JavaScript**
>
> 尽管 XSS 是因不怀好意的第三方执行 JavaScript 而产生的问题，但在某些情况下，我们也需要执行第三方 JavaScript。为了安全考虑，网站运营者或网页浏览者通常只执行他们信任的第三方 JavaScript。
>
> - **网站运营者执行所信任的第三方 JavaScript**
>
>   网站运营者有时会将第三方 JavaScript 嵌入到自己的网站中。典型的例子包括访问解析、横幅广告、博客插件等。在这种情况下，运营者会有意将第三方 JavaScript 嵌入到网页中。
>
>   如果嵌入的 JavaScript 是恶意代码，网站就有可能面临信息泄漏或篡改的风险。因此，JavaScript 提供方值得信赖是前提条件。然而，基于以下威胁，现实中安全问题屡屡发生：
>
>   - 提供方有意收集个人信息。
>   - 提供方的服务器存在安全隐患，JavaScript 代码被调包。
>   - 提供方的 JavaScript 代码存在安全隐患，被迫运行其他脚本。
>
>   网站横幅广告用的 JavaScript 和 XSS 用的 JavaScript，从技术角度来看其危险程度相同。两者的区别仅在于网站运营者对提供方的信任度。因此，即使有意嵌入第三方 JavaScript，也需要在充分调查提供方可信度的基础上慎重作出判断。
>
> - **网页浏览者信任第三方而向网页中嵌入 JavaScript**
>
>   Firefox 的插件 Greasemonkey 就是一个例子，用户信任第三方并将其 JavaScript 嵌入到网页中。Greasemonkey 允许用户通过安装各种脚本来改变浏览中的网页内容。
>
>   Greasemonkey 运行时通常比普通 JavaScript 拥有更强的权限，因此，如果 Greasemonkey 脚本的作者心怀不轨，就可以进行盗取密码等非法操作。

[注释]
1. 32-001.html 含有 XSS 漏洞。详情参考 4.3 节。
2. 主机方面，通过 JavaScript 修改 `document.domain` 可以使条件放宽，但至少也被限制在了相同域名中不同主机之间的访问。
3. i-mode2.0（日本 NTT DoCoMo）的手机浏览器的同源策略中添加了目录访问的限制。
4. 这里所讲解的是使用 iframe 来进行 XSS 攻击的情况，但其实不用 iframe 也同样能发动 XSS 攻击。

#### JavaScript 以外的跨域访问

前面介绍了 JavaScript 的跨域访问会受到同源策略的严格限制。下面，我们来看一些能够进行跨域访问的其他浏览器功能。

- **frame 元素与 iframe 元素**
  
  通过前面的试验可知，iframe 元素与 frame 元素能够进行跨域访问，但通过 JavaScript 却不能跨域访问 iframe 中的文档内容。

  > **专栏：X-FRAME-OPTIONS**
  >
  > X-FRAME-OPTIONS 是微软公司提出的一种限制 frame 和 iframe 访问权限的方案，现已被 IE、Firefox、Google Chrome、Safari、Opera 等主流浏览器的最新版采用。
  >
  > X-FRAME-OPTIONS 被定义在响应头信息中，值为 DENY（拒绝）或 SAMEORIGIN（仅限同源）。指定了 `DENY` 的响应将不能显示在 frame 等的内层中，而 SAMEORIGIN 的情况下则仅当与地址栏上显示的域名为同源时才能够被显示。
  >
  > 在 PHP 中将 X-FRAME-OPTIONS 指定为 SAMEORIGIN 的方法如下：
  >
  > ```php
  > header('X-FRAME-OPTIONS: SAMEORIGIN');
  > ```
  >
  > X-FRAME-OPTIONS 还可以用来防范点击劫持（Clickjacking）。通过将不使用 frame 或 iframe 的网站指定为 `DENY`，使用 frame 并且使用单一主机的网站指定为 SAMEORIGIN，就能够更好地防御利用 frame 执行的各种攻击。

- **img 元素**
  
  img 元素的 src 属性能够指定其他域名。请求图像时会附带图像所在主机的 Cookie，因此可以让恶意网站上的图像显示为“此图像需要认证”。
  
  JavaScript 无法访问图像文件内部，因此跨域图像访问通常不会造成什么问题。如果不想让自己的图像被贴到某些特定网站，则可以针对图像检验 Referer 消息头。不过这样会使关闭了 Referer 的用户无法看到图像。

- **script 元素**
  
  通过指定 script 元素的 src 属性可以从其他网站读取 JavaScript。假设 A 网站读取 B 网站的 JavaScript，如图 3-30 所示。
  
  ![](Image00042.jpg)
  **图 3-30 跨域读取 script**
  
  JavaScript 的源代码位于 B 网站的服务器中，但 JavaScript 被读取后，它的作用范围就变成了读取它的 HTML 所在的 A 网站。因此，JavaScript 执行 `document.cookie` 后得到的是 A 网站上的 Cookie 信息。
  
  A 网站向 B 网站发送获取 JavaScript 的请求时，也会同时向 B 网站发送 Cookie。因此，根据用户在 B 网站中的登录状态，B 网站的 JavaScript 代码可能会发生变化，从而影响 A 网站中的内容。
  
  这种情况也可能伴随着 JSONP（JSON with padding）出现。JSONP 是从 Ajax 应用来访问不同来源的服务器中的数据时所采取的一种方式，但根据认证状态的不同，JavaScript 的代码（JSONP 的数据）会发生变化，从而可能导致意想不到的信息泄漏事故。因此，JSONP 不能用于传送隐私信息。

- **CSS**
  
  CSS（Cascading Style Sheets）能够被跨域读取。具体来说，除了 HTML 的 link 元素之外，也可以在 CSS 中使用 `@import`，或者使用 JavaScript 的 `addImport` 方法。
  
  一般来说，即使读取不良网站的 CSS 也不会造成问题。但以前在 Internet Explorer 中出现过叫作 CSSXSS 的安全隐患，它能使 HTML 或 JavaScript 被当成 CSS 读取，如果其中部分代码能被执行的话就会有危险。
  
  由于 CSSXSS 超出了本书的范围，因此在此不做详述。并且 CSSXSS 属于浏览器的漏洞，无关应用程序，所以只需要提醒网站用户使用最新的浏览器（如 IE8），并安装官方的安全补丁即可。

- **form 元素的 action 属性**
  
  form 元素的 action 属性也能够跨域指定。无论 action 的目标是否跨域，form 的提交都能通过 JavaScript 来操作。
  
  恶意利用 form 元素的特性来实施攻击的方式被称为跨站请求伪造（CSRF）。CSRF 攻击是让用户在不知情的情况下提交 form，从而肆意使用应用中的功能。关于 CSRF 将在 4.5 节详述。

[注释]
1. 点击劫持是综合利用 iframe 和 CSS 而执行的一种被动攻击，使用视觉上的欺骗手段诱使用户进行操作。
2. CSSXSS 是一种浏览器漏洞，超出了本书的范围。

#### 总结

本节讲述了被动攻击以及浏览器用来防御被动攻击的同源策略。被动攻击是通过用户的浏览器来攻击 Web 应用程序的一种手法。JavaScript 的同源策略是浏览器防御被动攻击的代表性对策。然而，若浏览器或 Web 应用中存在安全隐患，攻击者就可以绕过同源策略执行攻击。下一章我们将重点讲述 Web 应用方面的防御对策。

# 第 4 章 Web 应用的各种安全隐患

本章将详细讲解 Web 应用中各种安全隐患的产生原理、影响范围和防范策略。

- 4.1 节讲述 Web 应用中功能与安全隐患的对应关系，从而使读者对安全隐患有一个整体印象。
- 4.2 节讲述 Web 应用的“输入”以及与其相关的安全隐患。
```

希望这个优化版本能更清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！