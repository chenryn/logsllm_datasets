in Listing 9, we can ﬁnish the level by asking the fuzzer to
try to maximize the player’s x coordinate. Given that it is a
side-scrolling game, this effectively guides the fuzzer to ﬁnd a
way through the level to successfully ﬁnish it.
The IJON-MAX (slot,x) annotation then tells the fuzzer to
maximize the x coordinate of the character. Note that we use
the player’s y coordinates (height) to select the slot. This
allows us to maximize the progress at different altitudes within
the level independently. By increasing the diversity in the set
of inputs, we reduce the chance of getting stuck in a dead end
as shown in Figure 3. Using this technique, we can quickly
ﬁnd solutions for 29 out of 32 levels of the game. More details
are available in Section V-C.
IV. IMPLEMENTATION
We implemented IJON as an extension for multiple fuzzers
whose implementation is based on AFL: AFLFAST, LAF-
INTEL, QSYM, and ANGORA. All of these fuzzers share the
same underlying code base, and thus, the required changes to
implement our method were similar for all fuzzers. Overall, we
performed two different kinds of changes. On the one hand,
we implemented a way to apply annotations to the target ap-
plication. On the other hand, we extended the communication
channel between IJON and the target.
A. Adding Annotations
To enable coverage feedback, AFL comes with a special
compiler pass for clang that instruments every branch in-
struction. Additionally, AFL provides a wrapper that can be
used instead of clang to compile the target. This wrapper
automatically injects the custom compiler pass. We extended
both the wrapper and the compiler pass. To support our
changes, we introduced an additional runtime library that
the compiler links statically. The runtime implements various
helper functions and macros that can be used to annotate the
target application. In particular, we added support for fast hash
functions that can be used to generate better-distributed values
or compress strings to an integer. In summary, we used the
primitives from Section III and added some more high-level
helper functions.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1603
1) IJON-ENABLE: To implement IJON-ENABLE, we intro-
duce a mask that is applied to all bitmap index calculations.
If the mask is set to zero, only the ﬁrst bitmap entry can be
addressed and updated. If it is set to 0xffff, the original
behavior is used. This way, we can effectively disable and
enable coverage tracing at will.
2) IJON-INC and IJON-SET: Both annotations enable di-
rect
interaction with the bitmap, hence the implementa-
tion is straightforward. Upon a call to ijon_inc(n), the
nth entry in the bitmap is incremented. Similarly, calling
ijon_set(n) sets the least signiﬁcant bit of the nth entry
to 1.
a
call
there
3) IJON-STATE: When
If these functions are used in multiple locations within the
program code, one has to be very careful not to reuse the same
bitmap indices. To help avoid such cases, we introduce helper
macros IJON_INC(m) and IJON_SET(m). Both macros
call the corresponding function but calculate the bitmap index
n based on a hash of m as well as the ﬁlename and line number
of the macro invocation. Thus, avoiding trivial collisions on
commonly used arguments such as 0 or 1.
is
to
IJON_STATE(n), we change the way basic block edges
are mapped to bit map entries. To this end, we change the
deﬁnition of the edge tuple to include the state in addition to
the source ID and target ID: (state, ids, idt). Here, “state”
is a thread local variable that stores information related
to the current state. Calling IJON_STATE(n) updates
state := state ⊕ n. That way, two successive calls cancel
each other out.
We also modiﬁed the compiler pass such that the bitmap
index is calculated as follows: state⊕(ids∗2)⊕idt. This way,
every time the state variable changes, every edge gets a new
index in the bitmap. These techniques allow the same code
to produce different coverage if it is executed in a different
context.
4) IJON-MAX: We extended the fuzzer to maintain an
additional, second queue of inputs for maximization purpose.
We support to maximize up to 512 different variables. Each
of these variables is called a slot. The fuzzer only ever stores
the input
that produces the best value for each slot and
discards old inputs that resulted in smaller values. To store
the largest observed value, we introduce an additional shared
memory max-map consisting of 64-bit unsigned integers.
Calling the maximization primitive IJON_MAX(slot,val)
updates maxmap[slot]=max(maxmap[slot], val).
After executing a test input, the fuzzer checks both the
shared bitmap and the max-map for new coverage. Similar to
the design of a shared coverage bitmap and the global bitmap
(as explained in Section II-A), we also implemented a global
max-map that persists during the whole fuzzing campaign and
complements the shared max-map. In contrast to the bitmap,
no bucketing is applied to the shared max-map. An entry in
the shared max-map is considered novel if it is larger than the
corresponding entry in the global max-map.
provide a probability for using the original queue (gener-
ated from code coverage) or the maximization queue (gen-
erated from maximizing slots). This functionality lets the
user decide which queue has more weight on picking in-
puts to fuzz. The user can supply the environment variable
IJON_SCHEDULE_MAXMAP, with a value from zero to 100.
Each time a new input is scheduled, the fuzzer draws a random
number between one and hundred. If the random number is
smaller than the value of IJON_SCHEDULE_MAXMAP, the
usual AFL based scheduling takes place. Otherwise, we pick
a random non-zero slot in the max-map and fuzz the input
corresponding to that slot. If the same slot is updated while
fuzzing its input, the old input is immediately discarded, and
the fuzzing stage is continued based on the newly updated
input.
5) Helper Functions: The runtime library of IJON con-
tains a set of helper functions which can simplify common
annotations. For example, the runtime library contains helper
functions to hash different kinds of data such as strings, mem-
ory buffers, the stack of active functions, or the current line
number and ﬁle name. Additionally, there are helper functions
which can be used to calculate the difference between two
values. We implemented different helper functions to simplify
the annotation process, as described below:
• IJON_CMP(x,y): computes the number of bits that
differ between x and y. This helper function directly
uses it to touch a single byte in the bitmap. It is worth
mentioning that for practical purposes, it is not directly
using the number of different bits as an index to the
bitmap. Consider Listing 5, if the same annotation was
reused in multiple locations, the indices would collide
(both share the range 0 to 64). Instead, IJON_CMP
combines the argument with a hash of the current ﬁle
name and line. Thus, we drastically reduce the chance of
a collision.
• IJON_HASH_INT(u32 old, u32 val): returns a
hash of both old and val. As described in Section III-D,
we use hash functions to create more diverse set of
indices and to reduce the probability of a collision.
• IJON_HASH_STR(u32 old, char* str): returns
a hash of both arguments. For example, we use this helper
function to create a hash of the ﬁle name.
• IJON_HASH_MEM(u32 old, u8* mem, size_t
len): returns a hash of old and the ﬁrst len bytes of
mem
• IJON_HASH_STACK (u32 old): returns a hash of
the return addresses of active functions (which we call
execution context). All addresses are hashed individually.
The resulting values are XORed together to produce the
ﬁnal result. That way, recursive calls are not creating too
many different values. This helper function can be used to
create virtual copies of the feedback based on the hashed
execution context.
• IJON_STRDIST(char* a, char* b):
evaluates
and returns the length of the common preﬁx of a and b.
Since we now have two queues of
inputs, we must
also update our scheduling strategy. IJON asks the user to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1604
B. Communication Channel
To communicate the intermediate coverage results, AFL-
based fuzzers use a shared memory region containing the
shared bitmap. We extend this region by replacing it with a
shared struct. This struct has two different ﬁelds. The ﬁrst
one is the original AFL shared bitmap. The second one is the
shared max-map used for our maximization primitive.
V. EVALUATION
As noted earlier, we implemented IJON on top of ﬁve state-
of-the-art fuzzing tools. This way, we show how the same
annotation helps to outperform all of the baseline fuzzers
according to various metrics. We picked multiple different
targets to show how we can overcome a variety of hard
problems using only a small number of annotations.
A. Setup
For each experiment, we compare the unmodiﬁed fuzzer
against the fuzzer with annotations. All experiments are per-
formed on a Debian 4.9.65-3 machine with an Intel Xeon
E5-2667 processor with 12 cores and the clock speed of
2.9 GHz, plus 94 GB of RAM. Unless noted otherwise, a
single uninformative seed containing only the character “a”
was chosen. The use-case for IJON is to have whatever fuzzer
available to run until (mostly) saturated, inspect the coverage,
and improve it using manual annotations. As a consequence,
in some experiments, we pick small examples and assume
that we only care about solving this individual hard aspect.
This simulates that we use IJON_ENABLE to limit fuzzing
to the interesting area. The baseline fuzzers would typically be
unable to focus on a single area and perform far worse at that
speciﬁc task, since they also explore other parts of the target
application. Since we compare against the baseline fuzzers on
the isolated example, we conservatively strengthen the position
of the unaided fuzzers.
B. The Maze – Small, Known State Values
The maze is a famous example that
is often used to
demonstrate the power of symbolic execution based test case
generation. It consists of a simple game similar where a
player has to walk through an ASCII art maze. The publicly
available version is straightforward due to two factors: The
maze contains no dead ends, and every move but the correct
one immediately terminates the game. Out-of-the-box AFL
and similar fuzzers are not able to solve this maze in a
reasonable amount of time, while KLEE can ﬁnd a solution in a
few seconds. The effective state space of this game is linear in
the number of steps taken, and no state explosion takes place.
To make this problem more interesting, we created a harder
version of the game. In the hard version, the player can walk
backward and stay at the same place (by walking into a wall)
without dying. As a result, the state space grows exponentially
in the number of steps taken. It turns into a complete tree
of size 4n. Now KLEE is unable to solve the maze as well.
Additionally, we created a larger labyrinth including dead
ends. Note that while the ideas implemented in IJON are also
applicable to the search heuristics used by KLEE, we did
not implement IJON on top of KLEE. We still included an
unmodiﬁed version of it in our evaluation. The results of our
experiments are shown in Table I and Table II.
a) Initial Run: We performed experiments on both the
small and the large maze. Each experiment was executed
three times using two conﬁgurations. In the ﬁrst conﬁguration,
we use the original, easy rules, where any wrong move
immediately terminates the game. In the second conﬁguration,
a harder rule set is used. As a consequence of the harder rules,
the game has an exponentially larger state space. Each fuzzer
was tested both in the unmodiﬁed version and in combination
with IJON. Each experiment was conducted for one hour.
Since different tools spawn sub-processes and threads, all tools
were locked to one core; it should be noted that AFL can
occasionally guess the solution for the smallest maze within
one hour. However, no coordinated progress is made after the
ﬁrst few minutes, and therefore, we reduced the experiment
duration to one hour.
b) IJON: We added a simple one-line annotation (List-
ing 10) that uses the combination of both x and y coordinates
as feedback. Any newly visited position in the game is treated
like new coverage.
while(true) {
ox=x; oy=y;
IJON_SET(hash_int(x,y));
switch (input[i]) {
case 'w': y--; break;
//....
Listing 10: Annotated version of the maze game.
As Table I shows, none of the tools is able to solve the
more complex variants of the maze. Yet, with a single, one-
line annotation and the support of IJON, all fuzzers can solve
all maze variants. Table II shows the time it took for different
fuzzers to solve the maze variant. The fuzzers which could
not solve the maze are excluded from the table.
Using IJON annotations, AFL performs quite comparable
to KLEE on the easy maze. On the hard version, AFL with
IJON is even faster than KLEE on the easy version. Note that
KLEE is unable to solve the hard maze. Additionally, while
AFL without IJON is sometimes able to solve the small maze
in the easy mode, AFL in combination with IJON is more
than 20 times faster than AFL without IJON. Lastly, most
extensions of AFL such as LAF-INTEL, QSYM and ANGORA
are actually decreasing the performance compared to baseline
AFL. This is due to the additional mechanisms provided by
these fuzzers, which incur an extra cost while not providing
any value in this scenario.
C. Super Mario Bros. – Large Known State Values
Another instance of a similar problem is the game Super
Mario Bros. We modiﬁed the game in such a way that all
keyboard commands are read from stdin. Additionally, we
modiﬁed the game such that the game character Mario always
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1605
TABLE I: Different approaches are solving the small / large maze. Three runs
were performed each. We show the number of solves for the small / large
mazes. An  denotes no solution was found in any runs, a
indicates that
all runs solved the maze. Lastly, we could not extend KLEE and hence there
are no results for KLEE with IJON.
√
TABLE III: AFL and IJON playing Super Mario Bros. (3 experiments each).
We show how often the level was successfully solved, the median time until
the best input was found (hh:mm) and the median percentage of distance
traveled. Videos from the best runs are available at https://github.com/RUB-
SysSec/ijon. Note that in level 4-2, IJON is able to uncover the secret room.
Tool
Easy
Small / Large
AFL
AFLFAST
LAF-INTEL
QSYM
ANGORA
KLEE
2
3 / 
 / 
 / 
3 / 
1
 / 
/
Plain
Hard
Small / Large
IJON
Small / Large
Small / Large
Easy
Hard
 / 
 / 
 / 
 / 
 / 
 / 
/
/
/
/
1
3 / 2
3
/
/
/
/
3 /
2
TABLE II: Different approaches are solving the small/large maze. The table
shows the average time-to-solve in minutes ± the standard deviation.
Tool
Easy
Hard
AFL-plain
QSYM-plain
KLEE-plain
AFL-ijon
AFLFAST-ijon
LAF-INTEL-ijon
QSYM-ijon
ANGORA-ijon
42.7 ± 11.9 / -
50.7 ± 0.0 / -
0.7 ± 0.5 / 2.0 ± 0.0
1.8 ± 1.0 / 7.6 ± 3.3
1.6 ± 0.5 / 8.4 ± 1.5
2.3 ± 0.9 / 7.6 ± 1.5
5.4 ± 1.6 / 11.4 ± 1.4
42.4 ± 0.0 / 36.5 ± 0.3