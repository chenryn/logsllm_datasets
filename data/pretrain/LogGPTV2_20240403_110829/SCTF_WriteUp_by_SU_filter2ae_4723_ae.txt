        pattern = re.compile(r'\[rbp-(\w+)\]')
        for i, ins in enumerate(instructions):
            if ins.opcode == 'call' and 'input_line' in ins.args[0]:
                lea_rax_rbp = instructions[i-3]
                assert lea_rax_rbp.opcode == 'lea'
                assert lea_rax_rbp.args[0] == 'rax'
                mo = pattern.match(lea_rax_rbp.args[1])
                if not mo:
                    raise ValueError('opcode incorrect: %s' % lea_rax_rbp.args[1])
                offset = int(mo.group(1), 0)
                mov_esi = instructions[i-2]
                assert mov_esi.opcode == 'mov'
                assert mov_esi.args[0] == 'esi'
                length = int(mov_esi.args[1], 0)
                if length - offset >= 8:
                    return i, offset, length
    def find_path(idx):
        addr = instructions[idx].addr
        path = [addr]
        while True:
            prev = reverse_map[addr]
            if len(prev) > 1:
                raise ValueError('multiple path: %s' % prev)
            prev = prev[0]
            mapping[prev].choice = addr
            addr = prev
            path.append(addr)
            if mapping[addr].index == 0:
                break
        for p in path[::-1]:
            print(p)
    def parse(symbols, operand:str, size=32):
        try:
            return BitVecVal(int(operand, 0), size)
        except:
            return symbols[operand]
    def store(symbols:dict, operand:str, value):
        symbols[operand] = value
    def add(solver, symbols, args, size=32):
        a = parse(symbols, args[0], size=size)
        b = parse(symbols, args[1], size=size)
        c = a + b
        store(symbols, args[0], c)
    def sub(solver, symbols, args, size=32):
        a = parse(symbols, args[0], size=size)
        b = parse(symbols, args[1], size=size)
        c = a - b
        store(symbols, args[0], c)
    def imul(solver, symbols, args, size=32):
        a = parse(symbols, args[0], size=size)
        b = parse(symbols, args[1], size=size)
        c = a * b
        store(symbols, args[0], c)
    def xor(solver, symbols, args, size=32):
        a = parse(symbols, args[0], size=size)
        b = parse(symbols, args[1], size=size)
        c = a ^ b
        store(symbols, args[0], c)
    def mov(solver, symbols, args, size=32):
        b = parse(symbols, args[1])
        store(symbols, args[0], b)
    def bitwise_not(solver, symbols, args, size=32):
        a = parse(symbols, args[0], size=size)
        c = ~a
        store(symbols, args[0], c)
    def cmp(solver, symbols, args, size=32):
        a = parse(symbols, args[0])
        b = parse(symbols, args[1])
        solver.add(a == b)
    def solve_math(block, match):
        print('solve_math')
        for b in block:
            print(' ', b)
        # DWORD PTR [rbp-0x5e0]
        pattern = re.compile(r'DWORD PTR \[rbp-(\w+)\]')
        solver = Solver()
        symbols = {}
        user_input = []
        ops = {
            'mov': mov,
            'add': add,
            'sub': sub,
            'cmp': cmp,
            'xor': xor,
            'imul': imul,
        }
        i = 0
        while i  1 and ins.args[1] == 'al':
                            args = [ins.args[0], 'eax']
                        else:
                            args = ins.args
                        ops[ins.opcode](solver, symbols, args, size=8)
                i += 1
        if not match:
            return bytes([random.randint(65, 90) for i in range(len(user_input))])
        if solver.check() == sat:
            m = solver.model()
            ret = []
            for i in range(len(user_input)):
                ret.append(m[user_input[i]].as_long())
            return bytes(ret)
        raise Exception('unsat')
    def walk(io):
        idx = 0
        addr = instructions[0].addr
        block = []
        while True:
            ins = mapping[addr]
            if len(ins.exits) == 1:
                if ins.choice != ins.exits[0]:
                    return
                block.append(ins)
                addr = ins.choice
                continue
            print('handling block with %d instructions' % (len(block), ))
            assert ins.choice in ins.exits
            if block[-1].opcode == 'cmp':
                # math
                if ins.choice in ins.args[0]:
                    if ins.opcode in ['jz', 'je']:
                        should_match = True
                    else:
                        print(ins)
                        assert ins.opcode in ['jnz', 'jne']
                        should_match = False
                else:
                    if ins.opcode in ['jz', 'je']:
                        should_match = False
                    else:
                        assert ins.opcode in ['jnz', 'jne']
                        should_match = True
                ret = solve_math(block, should_match)
                v = ' '.join([str(x) for x in ret])
                print('solve math:', v)
                io.read_until(b':')
                io.write(v + ' ')
            elif block[-1].opcode == 'test':
                if ins.choice in ins.args[0]:
                    if ins.opcode in ['jz', 'je']:
                        should_match = False
                    else:
                        assert ins.opcode in ['jnz', 'jne'], ins.opcode
                        should_match = True
                else:
                    if ins.opcode in ['jz', 'je']:
                        should_match = True
                    else:
                        assert ins.opcode in ['jnz', 'jne']
                        should_match = False
                ret = solve_array(block, should_match)
                print('solve array:', ret)
                io.read_until(b':')
                io.write(ret)
            else:
                print(block[-1])
                raise ValueError('not possible')
            print('next block entry: %s' % ins.choice)
            block = []
            addr = ins.choice
    LOCAL = True
    target = './bin.patched'
    if os.getenv('TARGET'):
        ary = os.getenv('TARGET').split(':')
        target = (ary[0], int(ary[1]))
        LOCAL = False
    def solve_pow(suffix, hsh):
        if isinstance(hsh, bytes):
            hsh = hsh.decode('utf-8')
        if isinstance(suffix, bytes):