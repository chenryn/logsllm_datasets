https://github.com/messlabnyu/irqdebloat
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1620
REFERENCES
[1] Cisco Meraki: Bluetooth low energy (BLE). https://documentation.me
raki.com/MR/Bluetooth/Bluetooth Low Energy (BLE).
[2] Exploitee.rs. https://www.exploitee.rs/.
[3] LiME: Linux memory extractor. https://github.com/504ensicsLabs/LiM
E.
[4] Linux kernel CVEs: Linux vulnerability tracker. https://www.linuxker
nelcves.com/.
[5] W.A. Arbaugh, D.J. Farber, and J.M. Smith. A secure and reliable
In Proceedings. 1997 IEEE Symposium on
bootstrap architecture.
Security and Privacy, 1997.
[6] Arm Ltd. Cortex-M3 technical reference manual: About the NVIC.
https://developer.arm.com/documentation/ddi0337/h/nested-vectored-in
terrupt-controller/about-the-nvic.
[7] Arm Ltd. Generic interrupt controllers. https://developer.arm.com/ip-p
roducts/system-ip/system-controllers/interrupt-controllers.
[8] Babak Amin Azad, Pierre Laperdrix, and Nick Nikiforakis. Less is more:
Quantifying the security beneﬁts of debloating web applications. In 28th
USENIX Security Symposium (USENIX Security 19), August 2019.
[9] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. Klee: unassisted
and automatic generation of high-coverage tests for complex systems
programs. In OSDI, volume 8, pages 209–224, 2008.
[10] Dominique Chanet, Bjorn De Sutter, Bruno De Bus, Ludo Van Put,
and Koen De Bosschere. System-wide compaction and specialization of
the linux kernel. In Proceedings of the 2005 ACM SIGPLAN/SIGBED
conference on Languages, compilers, and tools for embedded systems,
pages 95–104, 2005.
[11] Daming D. Chen, Maverick Woo, David Brumley, and Manuel
Egele. Towards automated dynamic analysis for Linux-based embedded
ﬁrmware. In NDSS, 2016.
[12] Yurong Chen, Tian Lan, and Guru Venkataramani. DamGate: Dynamic
adaptive multi-feature gating in program binaries. In 2017 Workshop on
Forming an Ecosystem Around Software Transformation (FEAST 2017),
2017.
[13] Jake Christensen, Ionut Mugurel Anghel, Rob Taglang, Mihai Chiroiu,
and Radu Sion. DECAF: Automatic, adaptive de-bloating and hardening
In 29th USENIX Security Symposium (USENIX
of COTS ﬁrmware.
Security 20), pages 1713–1730, 2020.
[14] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul
Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh
Bagchi, and Mathias Payer. Halucinator: Firmware re-hosting through
In 29th USENIX Security Symposium
abstraction layer emulation.
(USENIX Security 20), pages 1201–1218. USENIX Association, August
2020.
[15] Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy. A simple, fast
dominance algorithm. Technical Report TR-06-33870, January 2006.
[16] Nicola Corna. me cleaner, 2018.
[17] Nassim Corteggiani, Giovanni Camurati, and Aur´elien Francillon. In-
ception: System-wide security testing of real-world embedded systems
software. In 27th USENIX Security Symposium (USENIX Security 18),
pages 309–326, 2018.
[18] Andrei Costin, Apostolis Zarras, and Aur´elien Francillon. Automated
dynamic ﬁrmware analysis at scale: a case study on embedded web
In Proceedings of the 11th ACM on Asia Conference on
interfaces.
Computer and Communications Security, pages 437–448, 2016.
[19] Ang Cui and Salvatore J. Stolfo. Defending embedded systems with
software symbiotes. In Proceedings of the 14th International Conference
on Recent Advances in Intrusion Detection, 2011.
[20] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh
Jha. FIE on ﬁrmware: Finding vulnerabilities in embedded systems using
In 22nd USENIX Security Symposium (USENIX
symbolic execution.
Security 13), pages 463–478, 2013.
[21] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan
In Program
Whelan. Repeatable reverse engineering with PANDA.
Protection and Reverse Engineering Workshop (PPREW), 2015.
[22] Andrew Fasano, Tiemoko Ballo, Marius Muench, Tim Leek, Alexander
Oleinik, Brendan Dolan-Gavitt, Manuel Egele, Aur´elien Francillon,
Long Lu, Nick Gregory, Davide Balzarotti, and William Robertson.
SoK: Enabling security analyses of embedded systems via rehosting. In
16th ACM ASIA Conference on Computer and Communications Security
(ASIACCS), June 2021.
[23] Bo Feng, Alejandro Mera, and Long Lu. P2IM: Scalable and hardware-
independent ﬁrmware testing via automatic peripheral interface model-
ing. In 29th USENIX Security Symposium (USENIX Security 20), pages
1237–1254, 2020.
[24] Phil Goldstein. Disabling USB ports: 4 ways to prevent data leaks via
USB devices. https://fedtechmagazine.com/article/2017/07/4-ways-pre
vent-leaks-usb-devices, July 2017.
[25] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind
Machiry, Yanick Fratantonio, Davide Balzarotti, Aur´elien Francillon,
Yung Ryn Choe, Christophe Kruegel, and Giovanni Vigna. Toward
the analysis of embedded ﬁrmware through automated re-hosting.
In
22nd International Symposium on Research in Attacks, Intrusions and
Defenses (RAID 2019), pages 135–150, Chaoyang District, Beijing,
September 2019. USENIX Association.
[26] Lee Harrison, Hayawardh Vijayakumar, Rohan Padhye, Koushik Sen,
and Michael Grace. PARTEMU: Enabling dynamic analysis of real-
In 29th USENIX Security
world trustzone software using emulation.
Symposium (USENIX Security 20), pages 789–806, 2020.
[27] Brian Heath, Neelay Velingker, Osbert Bastani, and Mayur Naik. Poly-
Droid: Learning-driven specialization of mobile applications. https:
//arxiv.org/abs/1902.09589, 2019.
[28] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. Ef-
fective program debloating via reinforcement learning. In Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications
Security, 2018.
[29] Noah M Johnson, Juan Caballero, Kevin Zhijie Chen, Stephen McCa-
mant, Pongsin Poosankam, Daniel Reynaud, and Dawn Song. Dif-
ferential slicing: Identifying causal execution differences for security
applications. In 2011 IEEE Symposium on Security and Privacy, pages
347–362. IEEE, 2011.
[30] Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner.
Prospect: peripheral proxying supported embedded code testing.
In
Proceedings of the 9th ACM symposium on Information, computer and
communications security, pages 329–340, 2014.
[31] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis.
In Proceedings of the 12th
Conﬁguration-driven software debloating.
European Workshop on Systems Security (EuroSec), 2019.
[32] Karl Koscher, Tadayoshi Kohno, and David Molnar. SURROGATES:
Enabling near-real-time dynamic analyses of embedded systems. In 9th
USENIX Workshop on Offensive Technologies (WOOT 15), 2015.
[33] Chi-Tai Lee, Jim-Min Lin, Zeng-Wei Hong, and Wei-Tsong Lee. An
application-oriented linux kernel customization for embedded systems.
J. Inf. Sci. Eng., 20(6):1093–1107, 2004.
[34] Wenqiang Li, Le Guan, Jingqiang Lin, Jiameng Shi, and Fengjun
From library portability to para-rehosting: Natively executing
Li.
microcontroller software on commodity hardware. In NDSS, 2021.
[35] Dominik Maier, Lukas Seidel, and Shinjo Park. Basesafe: baseband
sanitized fuzzing through emulation. In Proceedings of the 13th ACM
Conference on Security and Privacy in Wireless and Mobile Networks,
pages 122–132, 2020.
[36] Marius Muench, Dario Nisi, Aur´elien Francillon, and Davide Balzarotti.
In Proc. Workshop
Avatar 2: A multi-target orchestration platform.
Binary Anal. Res.(Colocated NDSS Symp.), 2018.
[37] Andy Nguyen. BleedingTooth: Linux Bluetooth zero-click remote code
execution. https://google.github.io/security-research/pocs/linux/bleeding
tooth/writeup.html, April 2021.
[38] Chenxiong Qian, Hyungjoon Koo, ChangSeok Oh, Taesoo Kim, and
Wenke Lee. Slimium: Debloating the Chromium browser with feature
In Proceedings of the 2020 ACM SIGSAC Conference on
subsetting.
Computer and Communications Security (CCS), 2020.
[39] Anh Quach, Rukayat Erinfolami, David Demicco, and Aravind Prakash.
A multi-OS cross-layer study of bloating in user programs, kernel and
In 2017 Workshop on Forming an
managed execution environments.
Ecosystem Around Software Transformation (FEAST 2017), 2017.
[40] Vaibhav Rastogi, Drew Davidson, Lorenzo De Carli, Somesh Jha, and
Patrick McDaniel. Cimpliﬁer: Automatically debloating containers. In
Proceedings of the 2017 11th Joint Meeting on Foundations of Software
Engineering (FSE), 2017.
[41] Jan Ruge, Jiska Classen, Francesco Gringoli, and Matthias Hollick.
Frankenstein: Advanced wireless fuzzing to exploit new Bluetooth
In 29th USENIX Security Symposium (USENIX
escalation targets.
Security 20), pages 19–36, 2020.
[42] Ben Seri, Gregory Vishnepolsky, and Dor Zusman. BLEEDINGBIT:
The hidden attack surface within ble chips. Technical report, 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1621
[43] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. Firmalice-automatic detection of authen-
tication bypass vulnerabilities in binary ﬁrmware. In NDSS, volume 1,
pages 1–1, 2015.
[44] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang,
Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. Charm: Facilitating
dynamic analysis of device drivers of mobile systems. In 27th USENIX
Security Symposium (USENIX Security 18), pages 291–307, 2018.
[45] Christopher Wright, William A. Moeglein, Saurabh Bagchi, Milind
Kulkarni, and Abraham A. Clements. Challenges in ﬁrmware re-hosting,
emulation, and analysis. ACM Computing Surveys, 54(1), January 2021.
[46] Jianliang Wu, Ruoyu Wu, Daniele Antonioli, Mathias Payer, Nils Ole
Tippenhauer, Dongyan Xu, Dave Jing Tian, and Antonio Bianchi.
LIGHTBLUE: Automatic proﬁle-aware debloating of bluetooth stacks.
In Proceedings of the USENIX Security Symposium (USENIX Security),
2021.
[47] Qinge Xie, Qingyuan Gong, Xinlei He, Yang Chen, Xin Wang, Haitao
Zheng, and Ben Y. Zhao. Trimming mobile applications for bandwidth-
challenged networks in developing regions. https://arxiv.org/abs/1912.0
1328, 2019.
[48] Bin Xin, William N Sumner, and Xiangyu Zhang. Efﬁcient program
execution indexing. ACM SIGPLAN Notices, 43(6):238–248, 2008.
[49] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti,
et al. Avatar: A framework to support dynamic security analysis of
embedded systems’ ﬁrmwares. In NDSS, 2014.
APPENDIX A
SNAPSHOT REGISTERS
On ARM, we collect the general purpose registers (R0-
R15), including the banked versions of R13 and R14, which
have separate values for each CPU mode (IRQ, FIQ, SVC,
Undeﬁned, Abort, and User). In addition, to allow virtual
address translation, we collect several important coprocessor
registers: the ttbr and sctlr registers for virtual memory
and page tables, the dacr register for memory domain access
permission, the daif register for masked exception conﬁgu-
ration, the tpidrprw register, which holds the current thread
ID, the vbar register to get the exception table base, and the
scr and hcr registers, which control the ARM secure/non-
secure mode and hypervisor mode, respectively.
For MIPS, we currently only support the MIPS Release 1
architecture. We collect the general purpose registers ($0-$31
and pc) as well as the status, cause, and badvaddr
registers for the current CPU exception state, and context
for the page table entry address.
TABLE VII
PERFORMANCE
Beagle Linux
Nuri Linux
RasPi FreeBSD
RasPi Linux
RasPi RiscOS
Romulus Linux
Sabre Linux
Sabre VxWorks
WRT54GL Linux
SteamLink Linux
Analysis Time
6 min
1,196 min
55 min
214 min
4 min
58 min
173 min
2 min
30 min
21 min
Traces
54
104
500
548
36
421
66
41
544
31
Blocks
324,987
9,495,362
3,402,507
15,022,092
3,373
3,797,486
3,127,335
29,694
1,603,233
1,060,850
APPENDIX B
TRACE ANALYSIS PERFORMANCE
Aside from fuzzing (for which performance results are
reported in Figure 4), the bulk of IRQDebloat’s time is spent
in trace analysis. It is important to note that this is an ofﬂine
analysis that only needs to be done once per device, so we do
not believe the analysis time is prohibitive. Nevertheless, we
report it here for the interested reader. Our testbed is a dual-
CPU 64-bit Intel® Xeon® X5690 @3.47GHz with 24 cores
in total, and 192GB RAM. Each trace analysis is run on 16
cores in parallel.
Table VII shows the time taken, number of traces, and total
number of basic blocks. In general, the analysis time required
is proportional to the number of traces and total number of
blocks. An exception to this is Linux on the Nuri platform;
the traces for this system often diverge and re-converge, which
increases the analysis time.
APPENDIX C
FUZZER PSEUDOCODE
# random(a,b): uniform random float in [a,b]
# randint(a,b): uniform random int in [a,b]
# rands(), patterns(), bitwins(), ints():
#
#
Return a list of I/O values according to
the patterns described in §III-D1
# Globals for use in mmio_cb
seq, iov = None, None
# Called by emulator on MMIO reads
def mmio_cb():
global seq, iov
if seq: # Still have some I/O values
iov = seq.pop()
return iov
else:
if consistent_io_prob > 0 and \
random(0,1)  MAX_BLOCKS: break
return trace
# Generate fuzzed inputs and test if they
# produce new coverage
def fuzz(MAX_GEN):
coverage = set()
global seq
seeds = [[]]
for i in range(MAX_GEN):
for s in seeds:
for val in rands() + patterns() \
+ bitwins() + ints():
seq = s + [v]
# Get trace for this seq
trace = run_trace()
# Check coverage
if new_cov(trace, coverage):
coverage.update(set(trace))
report(trace)
seeds.append(seq)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1622