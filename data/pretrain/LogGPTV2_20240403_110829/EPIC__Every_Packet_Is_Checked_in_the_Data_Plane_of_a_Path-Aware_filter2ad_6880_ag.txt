Parallelizability As shown in Fig. 6, the router implemen-
tation achieves almost perfectly linear speedup when paral-
lelized over multiple CPU cores. As a consequence, the EPIC
router can be easily scaled to larger network links by adding
more processing cores or dedicated hardware. The source
shows a similar linear speedup as a function of the number of
cores, see Fig. 7.
2 hops
8 hops
32 hops
]
s
n
[
i
e
m
T
g
n
i
s
s
e
c
o
r
P
150
100
50
0
AS-level
DRKey
Host-level
DRKey
Hop Au-
thenticator
HVF
Others
Figure 4: EPIC L3 router processing times for different sub-
tasks. The category ‘Others’ aggregates all non-cryptographic
operations, for example checking the expiration time, writing
the updated hop-validation ﬁeld, or increasing the hop pointer.
500
400
300
200
100
]
s
n
[
i
e
m
T
g
n
i
s
s
e
c
o
r
P
0
0
2 hops
8 hops
32 hops
200
400
600
800
1,000 1,200 1,400
Payload [B]
Figure 5: EPIC L3 router processing time as a function of the
payload for (cid:96) ∈ {2,8,32}.
]
s
p
p
M
[
e
c
n
a
m
r
o
f
r
e
P
40
30
20
10
0
2
4
6
8
10
12
Number of Cores
14
16
18
Figure 6: Forwarding performance of a router, as a function
of the number of used cores measured for p = 0 and (cid:96) = 2. As
the packet-processing time is independent of p and (cid:96) as shown
in Figs. 4 and 5, this result is also valid for larger packets and
longer paths.
Processing Time at the Source The processing time at
the source for EPIC L3 is depicted in Fig. 8. It increases
linearly with both the AS-level path length (due to the HVF
for each hop) and in the EPIC payload (due to the destination
validation ﬁeld).
B Path Validation for Routers
We describe EPIC L4, which modiﬁes EPIC L3 to further
achieve path validation for routers:
P7 Path validation for routers: Each router Ai can verify
that the packet traversed all honest ASes from HS to Ai
on the path intended by HS.
This protocol otherwise has the same security properties
and communication overhead as EPIC L3.
In EPIC L4, the source of the packet obfuscates the HVFs
of all ASes by XOR-ing them with cryptographic results of
previous ASes. Unless the previous ASes on the path reverse
i = Ci(cid:74)2lval:3lval(cid:75)
this obfuscation, the HVF of an AS is invalid. As obfuscation
values, we propose to use another piece C[3]
of Ci deﬁned in Eq. (12) (assuming lPRF ≥ 3·lval). The source
of a packet now initializes the HVF by
V (4)
i;0 := C[1]
i ⊕C[3]
i−1 ⊕C[3]
i−2 ⊕···⊕C[3]
i−2k
(16)
USENIX Association
29th USENIX Security Symposium    557
p = 100B (GP)
p = 500B (GP)
p = 1000B (GP)
p = 1500B (GP)
p = 100B (TP)
p = 500B (TP)
p = 1000B (TP)
p = 1500B (TP)
40
30
20
10
]
s
p
b
G
[
e
c
n
a
m
r
o
f
r
e
P
0
1 2
4
8
Number of Cores
16
Figure 7: EPIC L3 packet-generation performance at the
source, plotted against different number of cores and payload
sizes, and for (cid:96) = 8. The legend entries ‘TP’ and ‘GP’ denote
the throughput and goodput, respectively.
]
s
µ
[
i
e
m
T
g
n
i
s
s
e
c
o
r
P
5
4
3
2
1
0
2
4
8
AS-Level Path Length (cid:96)
p = 0B
p = 500B
p = 1000B
p = 1500B
16
Figure 8: EPIC L3 packet-processing time at the source on a
single core for different EPIC payload sizes and path lengths.
and intermediate ASes update future HVFs by XOR-ing them
with C[3]
. Note that we are not (de-)obfuscating all subse-
i
quent ASes but only those at exponentially growing distances.
Doing this for all subsequent ASes would enable colluding
ASes to easily skip ASes on the path and deceive subsequent
routers by XOR-ing the validation ﬁelds of the skipped ASes.
Table 5 presents the evolution of the HVF values V (4)
as the
packet traverses four ASes. The source obfuscates the HVFs
such that they will have the value C[2]
upon reception by
i
the destination if and only if all routers processed the packet
successfully.
i
For EPIC L4, path validation for routers (P7) is achieved
under the following honesty assumption in addition to those
described in Table 2: on any contiguous part of the path of at
least three hops there is a majority of honest ASes.
Hop-Skipping Attack For property P7 in EPIC L4, collud-
ing ASes may be able to deceive ASes on the future path to
Table 5: Values of HVFs in EPIC L4 as a packet is forwarded
from A1 to A4. Colors indicate α in C[α]
.
i
after processing by
A1
A2
C[2]
C[2]
1
1
C[2]
C[1]
2
2
3 ⊕C[3]
C[1]
1 C[1]
3
4 ⊕C[3]
4 ⊕C[3]
2 C[1]
2 C[1]
HVF HS
V (4)
C[1]
1
1
2 ⊕C[3]
C[1]
V (4)
2
3 ⊕C[3]
C[1]
V (4)
3
4 ⊕C[3]
V (4)
C[1]
4
A4
A3
C[2]
1 C[2]
1
C[2]
2 C[2]
2
C[2]
3 C[2]
3
3 C[1]
4 C[2]
4
2 ⊕C[3]
3 ⊕C[3]
3 ⊕C[3]
1
2
actual path
Am
Am+1
Am+2
An
An+1
An+2
(cid:40)
C[3]
m+1
obfuscation values
C[3]
m+1
C[3]
m+1
⊕
C[3]
m+2
C[3]
m+2
Figure 9: Example where colluding malicious ASes Am,
An, and An+1 skip two intermediate ASes (n = m + 3) and
deceive future ASes on the path to accept the diverted packet.
The pattern of obfuscation values produced by Am+1 and
Am+2 for following ASes is drawn below their nodes. As the
attacker sees C[3]
m+2, he can remove
the obfuscation normally removed by Am+1 and Am+2 from
all future HVFs. If only An but not An+1 were controlled by
the attacker, he would only see C[3]
m+2 and therefore
could not deceive An+1.
m+2 as well as C[3]
m+1 ⊕C[3]
m+1 ⊕C[3]
accept a packet, even if ASes on the past path were skipped,
by analyzing HVFs and recovering the obfuscation values C[3]
i
for skipped ASes i. However, due to the exponential distances
used for obfuscation, this de-obfuscation requires at least one
more colluding AS than the number of skipped ASes. An
example with two skipped ASes is shown in Fig. 9.
Note that in EPIC L4, if the HVFs Vi were obfuscated with
C[3]
for all j < i (instead using exponential distances), two
j
colluding ASes could always recover the obfuscation values
of the ASes between them. Thus, any two colluding ASes
could create a wormhole that would be detectable by HS and
HD but not by subsequent ASes.
558    29th USENIX Security Symposium
USENIX Association