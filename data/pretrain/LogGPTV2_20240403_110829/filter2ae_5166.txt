# 【WriteUp】Labyrenth CTF Windows Track 挑战（上）

## 译文声明
本文为翻译文章，原文作者：jmprsp
原文地址：[链接]
译文仅供参考，具体内容表达及含义以原文为准。

## 前言
我花费了一周时间完成了Palo Alto CTF的Windows和Docs两条赛道，并将在本文中分享我的解决方案。希望读者能够从中学习到一些解决恶意软件问题的有用技巧。

## 文件: AntiD.exe
- **SHA256:** 49f3638065722b96809cb72c226d86566783d510c968d516436aa7c248d608ee
- **加壳:** 自定义UPX
- **使用工具:** ExeInfo, IDA Pro, Ollydbg, Scylla, CFF Explorer
- **代码与二进制文件:** [GitHub](https://github.com/jmprsp/labyrenth/tree/master/Window-Challenge-1)

### 分析过程
此挑战使用了UPX进行加壳，但被配置为阻止`upx -d`运行。此外，它还采用了反调试技术来防止调试器的使用。为了理解其背后的数学函数并解码标志，我们需要深入分析。

**步骤1: 初步观察**
- 在IDA Pro中加载该二进制文件，可以发现其确实经过了加壳处理。
- 从截图中可以看出只有一个函数和已加壳二进制文件的指令。
- 存在一个尾部跳转，要手动解压缩二进制文件，需打破这个跳转并转储进程。

**步骤2: 禁用ASLR**
- 使用CFF Explorer禁用地址空间布局随机化(ASLR)以简化分析过程。
- 取消选中"可移动DLL"复选框并应用更改。

**步骤3: 手动解压**
- 在Ollydbg中运行AntiD.exe补丁，并在0x4091AC处设置断点。
- 运行程序直到中断，然后进入下一条指令。
- 转储进程中会弹出一个错误提示，需要修正IAT。
- 使用Scylla删除无效导入并修复转储，从而获得工作副本。

**步骤4: 分析解压后的二进制文件**
- 将解压后的二进制文件加载到IDA Pro中，可以看到更多函数、导入和普通字符串。
- 通过X-字符串引用找到关键函数0x004011B0。
- 在该函数中发现了编码变量及由XOR、加法和减法组成的数学变换。
- 将这些代码转换成PHP，并尝试破解标志。

**最终标志:** PAN{C0nf1agul4ti0ns_0n_4_J08_W3LL_D0N3!}

## 文件: BabbySay.exe
- **SHA256:** 7CA8D9F1BE070DEB6535326AB4DFAE4824055F777DD929D2DEE9D0ADBEBDE785
- **加壳:** 无
- **使用工具:** exeinfo, Reflector
- **代码与二进制文件:** [GitHub](https://github.com/jmprsp/labyrenth/tree/master/Window-Challenge-1)

### 分析过程
这次的挑战是用C#编写的，使用Reflector等工具反编译可能会比较繁琐。你可以在GitHub上找到反编译后的源代码。

**步骤1: 反编译**
- 使用Reflector轻松反编译程序。
- `Key_click`函数及其相关字符看起来非常可疑。

**步骤2: 重构代码**
- 复制粘贴另一个C#项目的大部分代码（适当删减），并将变量写入文件。
- 编译并运行修改后的代码。

**最终标志:** PAN{B4BBY_Y3LL5_50_L0UD!}