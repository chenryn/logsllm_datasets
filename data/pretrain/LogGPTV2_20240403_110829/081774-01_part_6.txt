（chain）和规则（rule）进行管理。
iptables预定义了5个链，分别对应netfilter的5个钩子函数。这5个链分别是INPUT链、
FORWARD链、OUTPUT链、PREROUTING链、POSTROUTING链。
63
CentOS 7.5系统管理与运维实战
iptables指令语法如下：
iptables [-t table] command [match] [-j target/jump]
“-t table”参数用来指定规则表，内建的规则表分别为nat、mangle和filter，当未指定规
则表时，默认为filter。各个规则表的功能如下：
(cid:2) nat：此规则表主要针对PREROUTING和POSTROUTING两个规则链，主要功能为进
行源地址或目的地址的网址转换工作（SNAT、DNAT）。
(cid:2) mangle：此规则表主要针对PREROUTING、FORWARD和POSTROUTING 3个规则
链，某些特殊应用可以在此规则表里设定，比如为数据包做标记。
(cid:2) filter：这个规则表是默认规则表，针对INPUT、FORWARD和OUTPUT 3个规则链，
这个规则表主要用来进行封包过滤的处理动作，如DROP、LOG、ACCEPT或REJECT。
iptables的简单用法如【示例3-15】所示。
【示例3-15】
[root@CentOS ~]# iptables -t filter -A FORWARD -s 192.168.19.0/24 -j DROP
[root@CentOS ~]# iptables -nL
Chain FORWARD (policy ACCEPT)
target prot opt source destination
DROP all -- 192.168.19.0/24 0.0.0.0/0
其中，“-t filter”表示该规则作用于filter表，“-A”表示新增规则，“-s”表示IP段选
项，“-j”表示指定动作。该规则表示在 filter 表 FORWARD 链上新增一条规则，发往
192.168.19.0/24网段的包采取丢弃操作。要查看某个表下各个链的信息，可以使用“iptables
-nL”。
要使Linux系统成为网络防火墙，当然除了内核支持之外，还需要启用Linux的网络转发
功能。
echo 1 > /proc/sys/net/ipv4/ip_forward
若需要在系统启动时就具有该功能，则可将上面的命令写入/etc/rc.d/rc.local文件中。
数据包通过表和链时需要遵循一定的顺序，当数据包到达防火墙时，如果MAC地址符合，
就会由内核里相应的驱动程序接收，然后经过一系列操作，从而决定是发送给本地的程序还是
转发给其他机器。数据包通过防火墙时分以下3种情况。
1. 以本地为目标的包
当一个数据包进入防火墙后，如果目的地址是本机，被防火墙进行检查的顺序如表3.8所
示。如果在某一个步骤数据包被丢弃，当然就不会执行后面的检查了。
64
第3章 运维必备的网络管理技能
表3.8 以本地为目的的包检查顺序
步骤 表 链 说明
1 数据包在链路上进行传输
2 数据包进入网络接口
3 mangle PREROUTING 这个链用来mangle数据包，如对包进行改写或做标记
4 nat PREROUTING 这个链主要用来做DNAT
5 路由判断，如包是发往本地的还是要转发的
6 mangle INPUT 在路由之后，被送往本地程序之前，对包进行改写或做标记
7 filter INPUT 所有以本地为目的的包都需经过这个链，包的过滤规则设置在此
8 数据包到达本地程序，如服务程序或客户程序
2. 以本地为源的包
本地应用程序发出的数据包，被防火墙进行检查的顺序如表3.9 所示。
表3.9 以本地为源的包检查顺序
步骤 表 链 说明
1 本地程序，如服务程序或客户程序
2 路由判断
3 mangle OUTPUT 用来mangle数据包，如对包进行改写或做标记
4 nat OUTPUT 对发出的包进行DNAT操作
5 filter OUTPUT 对本地发出的包进行过滤，包的过滤规则设置在此
6 mangle POSTROUTING 进行数据包的修改
7 filter POSTROUTING 在这里做SNAT
8 离开网络接口
9 数据包在链路上传输
3. 被转发的包
需要通过防火墙转发的数据包，被防火墙进行检查的顺序如表3.10所示。
表3.10 被转发的包检查顺序
步骤 表 链 说明
1 数据包在链路上传输
2 进入网络接口
3 mangle PREROUTING mangle 数据包，如对包进行改写或做标记
4 nat PREROUTING 这个链主要用来做DNAT
5 路由判断，如包是发往本地的，还是要转发
6 mangle FORWARD 包继续被发送至 mangle 表的 FORWARD 链，在非常特殊的情况
下才会用到。在这里，包被mangle。这次mangle 发生在最初的路
由判断之后，在最后一次更改包的目的之前
65
CentOS 7.5系统管理与运维实战
（续表）
步骤 表 链 说明
7 filter FORWARD FORWARD包继续被发送至这条FORWARD链。只有需要转发的
包才会走到这里，并且针对这些包的所有过滤也在这里进行。注
意，所有要转发的包都要经过这里
8 mangle POSTROUTING 这个链也是针对一些特殊类型的包。这一步mangle 是在所有更改
包的目的地址的操作完成之后做的，但这时包还在本地上
9 nat POSTROUTING 这个链就是用来做 SNAT 的，不推荐在此处过滤，因为某些包即
使不满足条件也会通过
10 离开网络接口
11 数据包在链路上传输
在对包进行过滤时，常用的有以下3个动作。
（1）ACCEPT：一旦数据包满足了指定的匹配条件，数据包就会被 ACCEPT，并且不会
再去匹配当前链中的其他规则或同一个表内的其他规则，但数据仍然需要通过其他表中的链。
（2）DROP：如果包符合条件，数据包就会被丢掉，并且不会向发送者返回任何信息，
也不会向路由器返回信息。
（3）REJECT：和 DROP 基本一样，区别在于除了将包丢弃以外，还会向发送者返回错
误信息。
要进一步了解各个链中规则的匹配顺序，就来学习一下filter表中FORWARD链的输出，
如【示例3-16】所示。
【示例3-16】
[root@CentOS ~]# iptables -nvL
Chain FORWARD (policy DROP)
target prot opt source destination
ACCEPT all -- 192.168.100.0/24 0.0.0.0/0
ACCEPT all -- 0.0.0.0/0 69.147.0.0/24
ACCEPT all -- 172.16.0.0/16 0.0.0.0/0
mychain tcp -- 10.0.0.0/24 0.0.0.0 tcp dpt:80
“policy DROP”表示该链的默认规则为 DROP 操作。如现有一数据包，源地址为
192.168.1.58，目的地址为 137.254.60.6，协议为 TCP，目的端口为 80，当该数据包通过
FORWARD 链时，从上往下开始匹配：
（1）与第1条规则：源为192.168.100.0/24，源不匹配。
（2）与第2条规则：目的为69.147.0.0/24，目标不匹配。
（3）与第3条规则：源为172.16.0.0/16，源不匹配。
（4）与第4条规则：源为10.0.0.0/24，源不匹配。
经过匹配，以上所有规则都不符合，数据包将转交给默认规则处理。由于本示例中默认的
66
第3章 运维必备的网络管理技能
规则为DROP，因此该数据包被丢弃。
再看另一个数据包，源地址为192.168.1.58，目的地址为69.147.83.199，协议为TCP，目
的端口为80，当该数据包通过FORWARD 链时，从上往下开始匹配：
（1）与第1条规则：源为192.168.100.0/24，源不匹配。
（2）与第 2 条规则：源地址为任意（0.0.0.0/0），匹配；目的地址为 69.147.0.0/24，
69.147.83.199在范围内，匹配；源端口和目的端口为任意，匹配；协议为任意（all），匹配；
规则链对该数据包的动作为ACCEPT，因此该数据包通过。
如果数据包的源地址为 10.0.0.35，目的地址为 69.147.83.199，协议为 TCP，目的端口为
80，那么该数据包通过 FORWARD 链时，从上往下开始匹配，第 4 条规则匹配，动作为
mychain，此时数据包会被转到用户自己定义的规则链mychain进行处理。
3.5.3 iptables 配置实例
iptables工具支持丰富的参数，可以对IP和端口、网络接口、TCP标志位或MAC地址进
行过滤，参数指定方式除传统方法外，可以支持“！”“ALL”或“NONE”等进行参数匹配。
iptables常用参数说明如表3.11所示。
表3.11 iptables命令参数含义说明
参数 含义
-A 新增规则到某个规则链中，该规则将会成为规则链中的最后一条规则
-D 从某个规则链中删除一条规则，可以输入完整规则，或直接指定规则编号加以删除
-R 替换某行规则，规则被替换后并不会改变顺序
-I 插入一条规则，原本该位置上的规则将会往后移动一个顺位
-L 列出某规则链中的所有规则
-F 删除规则链的所有规则
-Z 将数据包计数器归零
-N 定义新的规则链
-X 删除某个规则链
-P 定义不符合规则的数据包的默认处理方式
-E 修改某自定义规则链的名称
-p 匹配通信协议类型是否相符，可以使用!运算符进行反向匹配
-s 匹配数据包的来源IP，可以匹配单个IP或某个网段
-d 匹配数据包的目的地IP，设定方式同上
-i 匹配数据包是从哪个网络接口进入，可以使用通配字符+指定匹配范围
-o 匹配数据包要从哪个网络接口发出，设定方式同上
--sport 匹配数据包的源端口，可以匹配单一端口或一个范围
--dport 匹配数据包的目的端口号，设定方式同上
--tcp-flags 匹配TCP数据包的状态标志，如SYN、ACK、FIN等，另外可使用ALL和NONE进行匹配
67
CentOS 7.5系统管理与运维实战
（续表）
参数 含义
-m 匹配不连续的多个源端口或目的端口
-m 匹配数据包来源网络接口的MAC地址，不能用于OUTPUT和POSTROUTING规则链
ACCEPT 将数据包放行，进行完此处理动作后，将不再匹配其他规则，直接跳往下一个规则链
REJECT 阻塞数据包，并传送数据包通知对方
DROP 丢弃数据包不予处理，进行完此处理动作后，将不再匹配其他规则，直接中断过滤程序
REDIRECT 将数据包定向另一个端口，进行完此处理动作后，将会继续匹配其他规则
LOG 将数据包相关信息记录在/var/log中
SNAT 改写数据包来源IP为某特定IP或IP范围，可以指定port对应的范围，进行完此处理动作
后，将直接跳往下一个规则
DNAT 改写数据包目的地IP为某特定IP或IP范围，可以指定port对应的范围，进行完此处理动
作后，将会直接跳往下一个规则链
RETURN 结束在目前规则链中的过滤程序，返回主规则链继续过滤
MARK 数据包做标记，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续匹
配其他规则
1. 简单应用示例
iptables使用方法首先指定规则表，然后指定要执行的命令，接着指定参数匹配数据包的内容，
最后是要采取的动作。下面通过一些示例来说明iptables的使用方法，如【示例3-17】所示。
【示例3-17】
#清除所有规则
[root@CentOS ~]# iptables –F
#清除nat表中的所有规则
[root@CentOS ~]# iptables -t nat –F
#允许来自192.168.3.0/24 连接sshd服务
[root@CentOS ~]# iptables -A INPUT -p tcp -s 192.168.3.0/24 --dport 22 -j
ACCEPT
#其他任何网段访问不能访问sshd服务
[root@CentOS ~]# iptables -A INPUT -p tcp --dport 22 -j DROP
在上述示例中，“-F”表示清除已存在的所有规则，“-A”表示添加一条规则，“-p”指
定协议为TCP，“-s”指定源地址段，如果该参数忽略或为0.0.0.0/0，则源地址表示任何地址，
“-dport”指定目的端口。包的判断顺序为首先判断第1条规则，由于允许192.168.3.0/24网段
的服务器访问 sshd 服务，因此包可以通过；如果是其他来源的主机，由于第 1 条规则不符合
接着判断第2条规则，策略为禁止，因此包将被丢弃。
除以上示例外，iptables 可以为每个链指定默认规则，如果包不符合现存的所有规则，就
按默认规则处理，方法如【示例3-18】所示。