 **Describe the bug**  
If both the relationship and query define `order_by`, subsequent executions of
the same query lead to addition of duplicate order clauses to the query. This
also manifests itself as a memory leak.
**To Reproduce**
    from sqlalchemy import Column, ForeignKey, Integer, create_engine
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import backref, relationship, sessionmaker
    engine = create_engine('postgresql://test@localhost/db', echo=True)
    Base = declarative_base()
    Session = sessionmaker(engine)
    class Parent(Base):
        __tablename__ = 'parent'
        id = Column(Integer, primary_key=True)
    class Child(Base):
        __tablename__ = 'child'
        id = Column(Integer, primary_key=True)
        parent_id = Column(Integer, ForeignKey(Parent.id))
        parent = relationship(
            Parent, backref=backref('children', lazy='dynamic', order_by=id)
        )
    Base.metadata.create_all(engine)
    with Session() as session:
        parent = Parent(id=1)
        session.add(parent)
        parent.children.order_by(Child.id.asc()).all()  # ORDER BY child.id, child.id ASC
        parent.children.order_by(Child.id.asc()).all()  # ORDER BY child.id, child.id ASC, child.id ASC
        parent.children.order_by(Child.id.asc()).all()  # ORDER BY child.id, child.id ASC, child.id ASC, child.id ASC
I'd have expected the last 3 lines to generate identical queries, but each
subsequent line adds an additional clause to the `ORDER BY`.
**Error**  
No error, but a memory leak.
**Versions.**
  * OS: MacOS 11.4
  * Python: 3.6.13
  * SQLAlchemy: 1.4.15
  * Database: PostgreSQL
  * DBAPI: psycopg2