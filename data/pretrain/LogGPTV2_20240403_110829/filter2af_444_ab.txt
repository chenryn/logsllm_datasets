### 使用提取到的哈希值访问同一台或不同机器
请参阅第6节中的说明，并查看Figure 4中的演示。

**Figure 4: PtH身份验证**
Figure 4展示了使用Metasploit成功建立PtH连接的过程。攻击中使用的NT哈希值以32个零开头，代表LM哈希值。由于Windows 10不使用LM哈希值，因此这些零是被接受的。

### 3. 测试环境
本文旨在测试并确认在最新Windows环境中进行PtH攻击所带来的风险等级。为此，我们使用了多个用户账户。Figure 5展示了这些账户的配置。NTLMv1哈希值使用`1122334455667788`作为挑战码。

**Figure 5: 账户配置**
- **本地用户 (local_used1)**
  - 用户名: local_used1
  - 类型: 本地
  - 组: 管理员
  - 密码: pass1A?1
  - NT 哈希: D1E534455F97DBB7FBE436CD25CE661B
  - NTLMv1: C59DAC0FD53CCC70991990CB8EC3084AE1BF3881312D3280
  - 备注: 该用户已登录过计算机。
  
- **本地用户 (local_used2)**
  - 用户名: local_used2
  - 类型: 本地
  - 组: 管理员
  - 密码: pass1A?2
  - NT 哈希: 43BDCF65BD4D6603BBD8311D4B1670B1
  - 备注: 该用户已登录过计算机。
  
- **本地未使用用户 (local_notused)**
  - 用户名: local_notused
  - 类型: 本地
  - 组: 管理员
  - 密码: pass1A?3
  - NT 哈希: B85CA2C4BA3911C6DC427392FD7B7F7D
  - 备注: 该用户从未登录过计算机。
  
- **域用户 (domain_used1)**
  - 用户名: domain_used1
  - 类型: 域
  - 组: 域管理员
  - 密码: pass1A?4
  - NT 哈希: 7BBC9C60C62A1204364B66D678FCA2C9
  - NTLMv1: 04753E2350DB855B4A1BF6F7F693D3AFF9F3CEE75B64A7F6
  - 备注: 该用户已登录过计算机。
  
- **域用户 (domain_used2)**
  - 用户名: domain_used2
  - 类型: 域
  - 组: 域管理员
  - 密码: pass1A?5
  - NT 哈希: 5E64EA6FBAFAC1289CE092AED46790A5
  - 备注: 该用户已登录过计算机。
  
- **域未使用用户 (domain_notused)**
  - 用户名: domain_notused
  - 类型: 域
  - 组: 域管理员
  - 密码: pass1A?6
  - NT 哈希: 05CF392F7B89860C6AC0F6FD85B87A3E
  - 备注: 该用户从未登录过计算机。
  
- **Microsoft用户 (PI:EMAIL)**
  - 用户名: PI:EMAIL
  - 类型: Microsoft
  - 组: 管理员
  - 密码: pass1A?7
  - NT 哈希: 527E12E1627BA10C39324C4BB48CE1FE
  - 别名: msft_
  - 备注: 该用户已登录过计算机。
  
- **Microsoft用户 (PI:EMAIL)**
  - 用户名: PI:EMAIL
  - 类型: Microsoft
  - 组: 管理员
  - 密码: pass1A?8
  - NT 哈希: D5098E10765DE1E80713A61E644A5698
  - 别名: msft__mt4bjny
  - 备注: 该用户从未登录过计算机。
  
- **本地非特权用户 (local_nonpriv)**
  - 用户名: local_nonpriv
  - 类型: 本地
  - 组: 用户
  - 密码: pass1A?9
  - NT 哈希: C5597987BCB2BAA5D78B056101D5EDD7
  - 备注: 该用户已登录过计算机。

所有NT哈希值都是通过在线服务计算的，NTLMv1哈希值已使用John the Ripper进行了确认。VMware Workstation 15.1.0提供了构建实验环境的平台。Figure 6显示了所使用的10个虚拟机的配置信息。

**Figure 6: 计算机配置**
- 名字以“E”结尾的计算机系统版本为Windows 10 Education v1903。
- 名字以“P”结尾的计算机系统版本为Windows 10 Pro v1903。
- 为了使测试可重复，所有机器均未打补丁，并禁用了Windows更新、Windows Defender防火墙和Windows Defender防病毒软件。

**主机详细信息**
- **GIAC-DOM-E/GIAC-DOM-P**
  - 凭证保护: 禁用
  - 账户: local_used1, local_used2, local_notused, domain_used1, domain_used2, domain_notused, local_nonpriv

- **GIAC-DOM-CG-E/GIAC-DOM-CG-P**
  - 凭证保护: 启用
  - 账户: local_used1, local_used2, local_notused, domain_used1, domain_used2, domain_notused, local_nonpriv

- **GIAC-MSFT-E/GIAC-MSFT-P**
  - 凭证保护: 禁用
  - 账户: local_used1, local_used2, local_notused, PI:EMAIL, PI:EMAIL, local_nonpriv

- **GIAC-MSFT-CG-E/GIAC-MSFT-CG-P**
  - 凭证保护: 启用
  - 账户: local_used1, local_used2, local_notused, PI:EMAIL, PI:EMAIL, local_nonpriv

- **GIAC-AD**
  - 操作系统: Windows Server 2019 Datacenter
  - 域: giac.local
  - 账户: domain_used1, domain_used2, domain_notused

- **Kali Linux 2019.2**

### 4. 从主机提取哈希值
本节将分析攻击者可以使用的多种提取哈希值的方法。

#### 4.1 注册表中的NT哈希值
安全帐户管理器(SAM)数据库是一个存储NT哈希值的注册表文件。SAM存储本地账户和Microsoft账户的哈希值，但不存储域账户的哈希值。Windows使用MSCach2格式来缓存域登录(Januszkiewicz, 2017)。

SAM文件位于`%SystemRoot%/system32/config/SAM`，并挂载在`HKLM/SAM`注册表配置单元中。读取这些凭据需要特权访问（如SYSTEM或管理员权限）。

可以在计算机上找到解密这些哈希值所需的所有信息。Deneut(2018)解释了算法，Willett(2016)提供了数据结构。用于加密SAM的算法与本文的研究课题高度相关。哈希提取工具必须跟上Windows的发展。微软在Windows 10 v1607中修改了算法，将RC4密码替换为AES(Deneut, 2018)。这一更改破坏了所有直接访问SAM以转储哈希值的提取工具。一些工具已经更新并能正确处理新的加密方法，但关于使用何种工具以及何时使用仍有许多困惑(Strand, 2018b)。

**Figure 7: 失败的哈希提取**
Figure 7显示了在主机`GIAC-DOM-E`上使用Metasploit v5.0.34执行`Smart_Hashdump`模块的结果。如图所示，所有提取到的NT哈希值都是相同的`31d6cfe0d16ae931b73c59d7e0c089c0`。这是错误结果，实际上是空字符串的NT哈希值。大多数过时的工具在`Windows 10 v1607+`机器上执行时会产生这种错误结果。

Mimikatz是已更新的工具之一，它可以正确处理新格式的SAM。要使用此工具转储哈希值，需要执行以下三个命令：
- `privilege::debug`
- `token::elevate`
- `lsadump::sam`

**Figure 8: 使用Mimikatz提取哈希值**
Figure 8显示了在`GIAC-MSFT-P`上使用Mimikatz 2.2.0时获得的结果。Mimikatz为所有本地和Microsoft账户提取了正确的哈希值，除了`msft__mt4bjny`（即`PI:EMAIL`的别名）。这个结果并不令人惊讶。管理员已授权`PI:EMAIL`使用这台主机，导致在SAM中创建了该账户。在这种情况下，系统使用`msft__mt4bjny`作为该账户的别名。但由于该用户从未登录过，系统无法知道正确的哈希值。然而，Figure 8显示了一个哈希值（这个哈希值是错误的，与Figure 5相比）。

**Figure 9: 使用错误哈希值成功认证**
图9显示了使用这个NT哈希值进行身份验证的结果：即使这个哈希值是错误的，身份验证也成功了！似乎Microsoft用一个随机值预先填充了新创建的Microsoft账户的NT哈希字段，该值仅在用户首次登录后才更新。但是，该NT哈希值（错误值）可以成功用于身份验证。我未能找到任何提及此发现或解释此行为的论文。更令人惊讶的是，可以在Windows 10 Pro机器上重现此行为，但在Windows 10 Education的多个虚拟机上不起作用。这种差异可能表明它是产品缺陷。

如果应用其他步骤，有时可以使用旧工具转储SAM。例如，Meterpreter的`hashdump`命令可以说明这种方法。它将代码注入到LSASS中（见Section 4.2），然后从SAM中提取数据(Ewaida, 2010)。为了使`hashdump`命令在Windows 10 v1903中工作，首先必须将Meterpreter进程迁移到LSASS，然后再执行`hashdump`命令得到的结果与之前在Mimikatz中使用`lsadump::sam`得到的结果相同（见Figure 10）。Wally Strzelec先生分享的这一方法解决了上述困难(Strand, 2018)。

**Figure 10: 使用Hashdump提取哈希值**

#### 4.2 内存中的NT哈希值
Local Security Authority Subsystem Service (LSASS) 进程的内存可用于提取NT哈希值。LSASS是位于`%SystemRoot%\System32\Lsass.exe`的可执行文件。它保证了Windows中的身份验证和授权。每当用户登录系统时，都会创建带有用户名和NT哈希的数据结构并将其存储在进程内存中。

与基于注册表的方法相比，该技术可以提供本地、Microsoft和域账户的凭据。此方法需要特权访问。Figure 11显示了LSASS在Windows中的作用。它为每个已登录系统的用户维护一个条目表。LSASS存储了所有活跃使用的账户的相关信息，包括服务账户、RDP会话和RunAs执行(Renard, 2017)。存储的属性中有NT哈希。但是，网络登录是一个例外，因为在这种情况下，NT哈希永远不会发送到该机器(Damele, 2011c)。

LSASS代表用户使用哈希值提供SSO体验。有两种说法：
- 根据Ewaida (2010)的说法（错误说法），一旦用户锁定系统或注销，LSASS会立即清除凭据。
- 根据Damele（2011c）的说法（正确说法），用户锁定系统或注销之后，LSASS会在几分钟后清除凭据。作者的测试也证实了这一点。

**Figure 11: LSASS**

要从`GIAC-DOMAIN-E`的LSASS转储密码，需要在Mimikatz 2.2.0中执行两条命令：`:privilege::debug`和`sekurlsa::logonpassword`。如Figure 12所示，此方法使获取`domain_used1`用户的NT哈希成为可能（该用户当时已登录）。相反，`domain_used2`用户的哈希仍然是受保护的（因为该用户并未登录）。这也适用于当时没有登录的本地用户的密码哈希。