      * 使用提取到的hashes来访问同一个机器、或不同的机器 (在Section 6中进行了说明)
看下Figure 4 中的演示。
>
>   
>  Figure 4 PtH Authentication
Figure 4 演示了使用Metasploit成功建立了PtH连接。这次攻击中使用的NT hash是以32个零开头的，代表LM
hash。因为Windows 10不使用LM hashes，所以零是被接受的。
### 3\. Test Environment
本文的目的是，测试并确认在最新的Windows环境中PtH攻击所带来的风险等级。
为此，多个"用户帐户"(user accounts)被使用。
如下，Figure 5展示了这些"帐户"(accounts)的配置。NTLMv1
hashes使用`1122334455667788`作为challenge.
    Account details
    User name: local_used1 | Type: local | Groups: Administrators
    Password: pass1A?1 | NT hash: D1E534455F97DBB7FBE436CD25CE661B
    NTLMv1: C59DAC0FD53CCC70991990CB8EC3084AE1BF3881312D3280
    Comment: The user has already logged in to the computer.
    User name: local_used2 | Type: local | Groups: Administrators
    Password: pass1A?2 | NT hash: 43BDCF65BD4D6603BBD8311D4B1670B1
    Comment: The user has already logged in to the computer.
    User name: local_notused | Type: local | Groups: Administrators
    Password: pass1A?3 | NT hash: B85CA2C4BA3911C6DC427392FD7B7F7D
    Comment: The user has never logged in to the computer.
    User name: domain_used1 | Type: domain | Groups: Domain Admins
    Password: pass1A?4 | NT hash: 7BBC9C60C62A1204364B66D678FCA2C9
    NTLMv1: 04753E2350DB855B4A1BF6F7F693D3AFF9F3CEE75B64A7F6
    Comment: The user has already logged in to the computer.
    User name: domain_used2 | Type: domain | Groups: Domain Admins
    Password: pass1A?5 | NT hash: 5E64EA6FBAFAC1289CE092AED46790A5
    Comment: The user has already logged in to the computer
    User name: domain_notused | Type: domain | Groups: Domain Admins
    Password: pass1A?6 | NT hash: 05CF392F7B89860C6AC0F6FD85B87A3E
    Comment: The user has never logged in to the computer.
    User name: PI:EMAIL | Type: Microsoft | Groups: Administrators
    Password: pass1A?7 | NT hash: 527E12E1627BA10C39324C4BB48CE1FE
    Alias: msft_ | Comment: The user has already logged in to the computer.
    Pass-the-Hash in Windows 10 8
    Lukasz  Cyra,   PI:EMAIL
    User name: PI:EMAIL | Type: Microsoft | Groups: Administrators
    Password: pass1A?8 | NT hash: D5098E10765DE1E80713A61E644A5698
    Alias: msft__mt4bjny | Comment: The user has never logged in to the computer.
    User name: local_nonpriv | Type: local | Groups: Users
    Password: pass1A?9 | NT hash: C5597987BCB2BAA5D78B056101D5EDD7
    Comment: The user has already logged in to the computer.
Figure 5 Account Configuration
说明：
所有NT哈希值都是使用  的服务计算的。NTLMv1 hashes已使用 John the
Ripper进行了确认。
VMware Workstation 15.1.0 提供了构建该实验的环境。
如下，Figure 6显示了所使用的10个VM的配置信息：
名字以“E”结尾的计算机的系统版本是 Windows 10 Education v1903
名字以“P”结尾的计算机的系统版本是 Windows 10 Pro v1903
为了使该测试可重复，所有机器均未打补丁。并且都禁用了：Windows updates、Windows Defender Firewall、Windows
Defender Antivirus。
    Host details
    Name: GIAC-DOM-E/GIAC-DOM-P | Credential Guard: disabled
    Accounts: local_used1, local_used2, local_notused, domain_used1, domain_used2,
    domain_notused, local_nonpriv
    Name: GIAC-DOM-CG-E/GIAC-DOM-CG-P | Credential Guard: enabled
    Accounts: local_used1, local_used2, local_notused, domain_used1, domain_used2,
    domain_notused, local_nonpriv
    Name: GIAC-MSFT-E/GIAC-MSFT-P | Credential Guard: disabled
    Accounts: local_used1, local_used2, local_notused, PI:EMAIL,
    PI:EMAIL, local_nonpriv
    Name: GIAC-MSFT-CG-E/GIAC-MSFT-CG-P | Credential Guard: enabled
    Accounts: local_used1, local_used2, local_notused, PI:EMAIL,
    PI:EMAIL, local_nonpriv
    Name: GIAC-AD | OS: Windows Server 2019 Datacenter | Domain: giac.local
    Accounts: domain_used1, domain_used2, domain_notused
    Name: - | OS: Kali Linux 2019.2
Figure 6 Computer Configuration
### 4.Hash Extraction from Host
本section将分析攻击者能够使用的多种提取hashes的方法。
#### 4.1 NT Hashes in Registry
安全帐户管理器(Security Account Manager,SAM) 数据库是一个存储NT hashes的注册表文件(registry
file)。SAM存储local帐户和Microsoft帐户的hashes，但不存储域帐户(domain accounts)的hashes。  
Windows使用MSCach2格式来缓存域登录,Windows uses the MSCach2 format to cache domain logon
(Januszkiewicz, 2017).
SAM文件的位置在`%SystemRoot%/system32/config/SAM` 并被挂载在`HKLM/SAM`注册表配置单元中(mounted at
the HKLM/SAM registry hive).
读取这些凭据需要特权访问(privileged access,SYSTEM或admin)。
人们可以在计算机上找到解密这些hashes所需的所有信息。Deneut(2018)解释了算法，Willett(2016)提供了数据结构。
用于加密SAM的算法与本文的研究课题高度相关。 哈希提取工具必须跟上Windows的发展。 微软修改了Windows 10
v1607中的算法，将RC4密码替换为AES(Deneut, 2018)。这个更改破坏了所有直接访问SAM以转储散列(dump
hashes)的提取工具。一些工具已经更新并可正确处理新的加密方法。然而，关于使用何种工具、以及何时使用仍有许多困惑(Strand, 2018b)。
>
>   
>  Figure 7 Failed Hash Extraction
Figure 7显示了用metasploit v5.0.34在主机`GIAC-DOM-E`上执行`Smart_Hashdump`模块的结果。如图所示，所有提取到的NT
hashes都是相同的`31d6cfe0d16ae931b73c59d7e0c089c0`。这是个错误结果，它实际上是"空字符串"(empty
string)的NT hash。大多数过时的工具在`Windows 10 v1607+`机器上执行时就会产生这种错误结果。
Mimikatz是已更新过的工具之一，它可以正确处理新格式的SAM。  
要使用此工具dump hashes，需要执行3个命令：
    privilege::debug
    token::elevate
    lsadump::sam
Figure 8 显示了在`GIAC-MSFT-P`上使用Mimikatz 2.2.0时获得的结果。
>
>   
>  Figure 8 Extraction of Hashes with Mimikatz
Mimikatz为所有local和Microsoft帐户提取了正确的hashes，除了`msft__mt4bjny`(即`PI:EMAIL`的别名)。这个结果并不令人惊讶。
管理员(administrator)已授权`PI:EMAIL`使用这个主机，这导致在SAM中创建了该帐户。在这种情况下，系统使用`msft__mt4bjny`作为该帐户的别名。但该用户过去从未登录过，所以系统无法知道正确的hash值。
但是，Figure 8显示了该帐户的一个hash(这个hash是错误的,与 Figure 5相比较)。
图9显示了使用这个 NT hash进行身份验证的结果： **即使这个hash是错误的，身份验证也已成功！**
>
>   
>  Figure 9 Successful Authentication Using Incorrect Hash
似乎Microsoft用一个"随机值"预先填充了新创建的Microsoft帐户的NT hash字段，该值仅在用户首次登录后才更新。 但是，该NT
hash值(错误的值)可以成功地用于进行身份验证。 我无法找到任何提及此发现、或解释这个行为的论文。 更令人惊讶的是，可以在Windows 10
Pro机器上重现此行为，但在Windows 10 Education的多个虚拟机上都不起作用。 这种差异可能表明它是产品缺陷。
如果应用了其他的步骤(注意前提)，有时可以使用旧的工具来转储SAM：  
Meterpreter的`hashdump`命令可以说明这种方法。它将代码注入到LSASS中(见Section
4.2)，然后从SAM中提取数据(Ewaida, 2010)。  
为了使`hashdump`命令在Windows 10
v1903中工作，首先必须将Meterpreter进程迁移到LSASS，然后再执行`hashdump`命令得到的结果就与之前在Mimikatz中使用`lsadump::sam`得到的结果相同(见Figure
10)。Wally Strzelec先生分享的这一方法，解决了刚才提到的困难(Strand, 2018)。
>
>   
>  Figure 10 Extraction of Hashes with Hashdump
#### 4.2. NT Hashes in Memory
Local Security Authority Subsystem Service (LSASS)进程的内存可用于提取NT hashes。
LSASS是位于`％SystemRoot％\ System32 \ Lsass.exe`的可执行文件。
它保证了Windows中的"身份验证"(authentication)和"授权"(authorization)。
每当用户登录系统时，都会创建带有"用户名"(username)和NT hash的数据结构并将其存储在进程内存中。
与基于注册表的方法相比，该技术可以提供local、Microsoft、域的"帐户"(accounts)的凭据。此方法需要特权访问(privileged
access).
图11显示了LSASS在Windows中的作用。 它为每个已登录系统的用户都维护了该用户的一个条目表(a table of entries)。
LSASS存储了所有活跃使用的账户的相关信息，包括"服务账户"(service accounts)，"RDP会话"(RDP sessions)，RunAs
executions(Renard，2017)。 存储的属性中有NT hashes。但是，"网络登录"(Network
logons)是一个例外，因为在这种情况下，这个NT hash 永远不会发到这个机器(Damele, 2011c)。  
LSASS代表用户使用hashes来提供SSO体验。有2种说法：  
根据Ewaida (2010)的说法（错误说法），一旦用户锁定系统或注销，LSASS就会立即清除凭据。  
根据Damele（2011c）的说法（正确说法），用户锁定系统或注销之后，LSASS会在几分钟后清除凭据。 作者的测试也证实该说法。
>
>   
>  Figure 11 LSASS
要从`GIAC-DOMAIN-E`的LSASS转储密码(dump passwords)，需要在Mimikatz
2.2.0中执行两条命令`:privilege::debug`和`sekurlsa::logonpassword`。如Figure
12所示，此方法使获取`domain_used1`用户的NT hash成为可能（该用户当时已登录）。  
相反，`domain_used2`用户的hash仍然是受保护的（因为该用户并没有登录）。这也适用于 当时没有登录的本地用户的密码hashes(The
same applies to the hashes of passwords of local users who were not logged in
at that time).
>