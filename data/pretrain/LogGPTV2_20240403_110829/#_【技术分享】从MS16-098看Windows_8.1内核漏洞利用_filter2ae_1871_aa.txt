# 【技术分享】从MS16-098看Windows 8.1内核漏洞利用
|
##### 译文声明
本文是翻译文章，文章来源：sensepost.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **Ox9A82**
****](http://bobao.360.cn/member/contribute?uid=2676915949)
**预估稿费：300RMB**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**前言**
在我刚开始接触内核漏洞时我没有任何有关内核的经验，更不用说去利用内核漏洞了，但我总是对于逆向工程和漏洞利用技术非常感兴趣。
最初，我的想法很简单：找到一个目前还没有可用exploit的可利用漏洞的补丁，从它开始我的逆向工程以及利用的旅途。这篇文章里谈及的漏洞不是我的最早选的那个：那个测试失败了。这实际上是我的第二选择，我花费了4个月的时间来了解有关这个漏洞的一切。
我希望这篇博客可以帮到那些渴望了解逆向工程和exploit开发的人。这是一个漫长的过程，而我又是一个内核exploit开发方面的新手，所以我希望你在阅读这篇文章时能够保持耐心。
**使用的工具**
Expand.exe (用于MSU文件）
Virtual KD (他们说自己比正常的内核调试要快上45倍是真的)
Windbg (kd)
IDA professional. 
Zynamics BinDiff IDA plugin. 
**Expand.exe的使用**
Expand.exe可以用来从微软更新文件（MSU）和CAB文件中提取文件。
使用以下命令更新和提取CAB文件到指定目录：
    Expand.exe -F:* [PATH TO MSU] [PATH TO EXTRACT TO] 
    Expand.exe -F:* [PATH TO EXTRACTED CAB] [PATH TO EXTRACT TO]
如果命令后面接地址，会根据符号定义的结构进行dump
!pool,!poolfind和!poolused命令在我分析内核池溢出，进行内核池风水时帮了我很多。
一些有用的例子：
要dump指定地址的内核池页面布局，我们可以使用以下命令：
    kd> !poolused [POOLTYPE] [POOLTAG]
要检索指定池类型中的指定池标记的对象的分配数量：
    kd> !poolused [POOLTYPE] [POOLTAG]
要为指定的池标记搜索提供的池类型的完整分配的内核池地址空间。
    kd> !poolfind [POOLTAG] [POOLTYPE]
**Windbg使用技巧**
相比其他调试器我个人更喜欢Windbg，因为它支持一些很有用的命令，特别是对于内核调试来说。
    kd> dt [OBJECT SYMBOL NAME] [ADDR]
dt命令使用符号表定义的结构来dump内存，这在分析对象时非常有用，并且可以在对象的符号已导出时了解一些特殊的情况。
使用这个命令时如果不加地址那么会直接显示这个对象的结构。例如，要查看EPROCESS对象的结构，我们可以使用以下命令。
**通过补丁对比来了解漏洞原理**
下载好更新文件，我们打开后发现被修改了的文件是win32k.sys，版本是6.3.9600.18405。当与其旧版本6.3.9600.17393进行二进制对比时，我们使用的是IDA的Zynamics
BinDiff插件。可以发现一个发生了更改的有趣函数的相似性评级是0.98。存在漏洞的函数是win32k！bFill。下面是两个版本之中的区别。
diff快速的展示出了一个整数溢出漏洞是如何通过加入一个UlongMult3函数来修补的，这个函数通过相乘来检测整数溢出。如果结果溢出了对象类型（即ULONG），则返回错误“INTSAFE_E_ARITHMETIC_OVERFLOW”。
这个函数被添加在调用PALLOCMEM2之前，PALLOCMEM2使用了一个经过检查的参数[rsp +
Size]。这确认了这个整数溢出将导致分配小尺寸的对象; 那么问题是——这个值可以被用户通过某种方式控制吗？
当面临一个复杂问题的时候，建议先将它分解为更小的问题。 因为内核漏洞利用是一个大问题，所以一步一步进行似乎是一种好方法。步骤如下：
1.击中存在漏洞的函数
2.控制分配的大小
3.内核内存池（pool）Feng Shui技术
4.利用GDI位图对象（Bitmap GDI objects）
5.分析并且控制溢出
6.修复溢出的头部
7.从SYSTEM进程的内核进程对象（EPROCESS）中偷取表示权限的Token
8.成功得到SYSTEM权限
**Step 1 –触发漏洞函数**
首先，我们需要了解如何通过查看IDA中的函数定义来击中漏洞函数。可以看出，该函数在EPATHOBJ上起作用，并且函数名“bFill”说明它与填充路径有关。通过用谷歌搜索“msdn路径填充”，我得到了BeginPath函数和示例程序。
    bFill@(struct EPATHOBJ *@, struct _RECTL *@, unsigned __int32@, void (__stdcall *)(struct _RECTL *, unsigned __int32, void *)@, void *)
理论上来说，如果我们使用示例中的代码，它应该会击中漏洞函数？
    // Get Device context of desktop hwnd
    hdc = GetDC(NULL); 
    //begin the drawing path
    BeginPath(hdc); 
    // draw a line between the supplied points.
    LineTo(hdc, nXStart + ((int) (flRadius * aflCos[i])), nYStart + ((int) (flRadius * aflSin[i]))); 
    //End the path
    EndPath(hdc);
    //Fill Path
    FillPath(hdc);
好吧，这没有实现。所以我在windbg中对每个函数的起始部分都添加了一个断点。
    EngFastFill() -> bPaintPath() -> bEngFastFillEnum() -> Bfill()
再次运行示例代码，发现第一个函数被命中，然后不再继续命中最后的函数是EngFastFill。为了不让深入的逆向分析过程给读者增加无聊的细节，我们这里直接给出结论。简而言之，这个函数是一个switch
case结构，将最终会调用bPaintPath，bBrushPath或bBrushPathN_8x8。到底调用哪个则取决于一个画刷对象（brush
object）关联的hdc。上面的代码甚至没有执行到switch case，它在之前就失败了。我发现有四种设备上下文类型
打印机
显示，它是默认值
信息
内存，它支持对位图对象的绘制操作。
根据提供的信息，我尝试将设备类型转换为内存（位图）如下：
    // Get Device context of desktop hwnd
    HDC hdc = GetDC(NULL);
    // Get a compatible Device Context to assign Bitmap to
    HDC hMemDC = CreateCompatibleDC(hdc);
    // Create Bitmap Object
    HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL);
    // Select the Bitmap into the Compatible DC
    HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap);
    //Begin path
    BeginPath(hMemDC);
    // draw a line between the supplied points.
    LineTo(hdc, nXStart + ((int) (flRadius * aflCos[i])), nYStart + ((int) (flRadius * aflSin[i])));         
    // End the path
    EndPath(hMemDC);
    // Fill the path
    FillPath(hMemDC);
事实证明，这正是击中漏洞函数bFill所需要做的。
**Step 2 – Controlling the Allocation Size:**
来看看分配部分的代码
在调用分配函数之前，首先检查[rbx +
4]（rbx是我们的第一个参数，即EPATHOBJ）的值是否大于0x14.如果大于，则这个值被乘以3就是这里导致的整数溢出。
    lea ecx, [rax+rax*2];
溢出发生实际上有两个原因：一是这个值被转换到32位寄存器ecx中和二是[rax + rax *
2]意味着值被乘以3。通过一些计算，我们可以得出结论，要溢出这个函数的值需要是：
    0xFFFFFFFF / 3 = 0x55555555
任何大于上面的值都可以溢出32位的寄存器。
    0x55555556 * 3 = 0x100000002
然后，做完乘法的结果又向左移了4位，一般左移4位被认为等同于乘以2 ^ 4。
    0x100000002 << 4 | 0x100000002 * 2^4) = 0x00000020 (32位寄存器值)
目前为止，仍然没有结论如何去控制这个值，所以我决定阅读更多关于使用PATH对象进行Windows
GDI利用的帖子，看看有没有什么思路。我很巧合的看到了一篇博文，讨论的是MS16-039的利用过程。这篇博文中讨论的漏洞与我们当前攻击的目标函数拥有相同的代码，就好像有人在这两个函数中复制粘贴代码一样。如果没有这篇博客，那么我会花费更多的时间在这上面，所以非常感谢你，NicoEconomou。