的改进都可能对软件质量产生重大影响。我们可以在现有的缺陷跟
踪系统中添加一些Pythonglue，并建立一个元缺陷跟踪器，来帮助用
户查看和组织存在于多个代码库的缺陷。Bugjuicer就是这样一个元
缺陷跟踪器（图6-4）。在图6-5所示的搜索例子中，最终用户并不准
确知道某一特定的缺陷在应用程序栈的何处，却成功地发现了该缺
陷可能的重复。他在默认的缺陷数据库中搜索模块（Bugiuicer自动
将每个模块和适当的默认缺陷数据库联系起来）。他还搜索了分发
和X服务器缺陷数据库。返回的结果是一张很方便的列表，包括从每
个缺陷引用回其原始缺陷数据库中所在位置的链接。
bug能跨多个层次
发行版和代码库
Distro1
Distro2
Distro3
Mozilla
Firefox2
Java 1.4
Java1.6
Java1.6
GNOME2.6
GNOME2.20
GNOME2.24
Xsun
X.0rg
S10u5kernel
0S2008.05kernel
0S2008.11
Bugjuicer能跨多个层次、发行版和代码库
进行搜索和标记bug
图6-4跨多个层次、发行版和代码库的缺陷
1886
---
## Page 1888
Bugukcer
opensotaris
08
图
6-5
Bugjuicer缺陷搜索
标签
如果用户在上游或分发数据库中发现与他的问题（缺陷或元缺陷）
特别相关的缺陷，他可以为这些缺陷加上标签（图6-6），使它们能
够通过“标签云”（tagcloud）或“标签集”（tagset）来一起跟踪（图
6-7)。
1887
---
## Page 1889
8日8
6n'bnqd
suiceag eecaonie wjaggo|usngajang|
opensotaris
1-8 of 8 Bugjuicer Tagged Bugs
Syropsh
口
1200
1.
口
日
PP
1219
口
日
日
2
日
日
TISTI
2
[lae
ext
Hignight al Matghi case
Done
图
6-6
Bugjuicer标签集
g
BleEyew
←→·时全
AH
Help
htp
ug
 service.. online w.tiogssun..da
 . ag . o tle.
opensolaris
Bugjuicer Tagged Bug Sets
BugSet
Module
Priority
scmfixed
Synopsis
fg2.3.95
Rer
2552
口
upstreamID
scmficed
2122
P2
mujor
0
TESTpa
口
Module
Priarity
Severty
upstream
redForPe
at tagged set
Nigh
nermal
P2
mapor
1623
0
hpae ac
cts php testing
1323
0
RFE:Ne
ISETTPOOC
日
Djange
PB
Mex
ghight al
图
6-7
标记过的缺陷集（标签云）
标记过的缺陷集（标签云）：原因
1888
---
## Page 1890
缺陷报告常常包含多个描述理论上可能的根本原因的假说。但是，
当一个缺陷关闭以后，经验证过的根本原因应该强调出来。如果开
发人员和QA工程师们遵循科学的方法，那么一个关闭了的缺陷应参
考以下内容：
缺陷所在的代码库
假设的根本原因
修复的说明或源代码补丁的链接
一个能证明该缺陷的根本原因的确已经修复的测试用例
如果能包含否定或剔除其他假设的根本原因的测试用例，也是有意
义的。正如亚瑟柯南道尔笔下的福尔摩斯说的：“当你排除了一切不
可能的，那么剩下的情况无论多么不可思议，都一定是真相。”
[1] http:/library.gnome.org/devel/bug-buddy/stable/welcome.html.en.
[2] http://code.google.com/p/google-breakpad/.
[3] http://bugzilla.gnome.org/show_bug.cgi?id=47942.
[4] http://bugseverywhere.org/be/show/HomePage.
测试用例的有效性
测试之美在何处？
我们承认，软件测试的美有时确实很难看出。软件质量保证不像软
件开发的其他方面那样具有表面上的魅力，这可能就是它缺乏尊重
和资金的原因。
去年夏天，同GNOME社区的其他成员在伊斯坦布尔的博斯普鲁斯海
峡通道游览时，我们被询问是否使用Dogtail或Limux桌面测试项目
（LinuxDesktopTestingProject,LDTP）来做自动测试。虽然我们曾评
估过这些工具，但我们还是尴尬地承认，我们并不知道为什么不依
赖于它们。确切的原因大概是和稳定性、性能和探测效果有关。但
总的来说，自动化测试工具，从来都不足以用于桌面或GUI测试。这
是为什么？因为要模拟图形用户界面上所有可能的用户操作组合是
不可能的。想想看你有多少可能的方法与屏幕上的10个按钮进行交
互吧。你有超过3万种不同可能的顺序来按这些按钮，你还可以选择
单击或者双击每个按钮。你甚至可以在点击后再拖动。幸运的是，
1889
---
## Page 1891
GUI上一些低层次的按钮行为是定义在已经很好的测试过的类库中
的，而另一些行为是被禁止的。但从这里你可以看到暴力的自动化
测试方法，是容易失败的。
幸运的是，真正的用户可以提供一个可能的工作流程作为有代表性
的例子，为测试的设计提供信息。反馈机制良好的Alpha和Beta测试
版本，对优秀的桌面测试是至关重要的。
执行大量认真定义的测试用例，对于有效测试一个复杂的系统，如
OpenSolaris的桌面，是至关重要的。然而，执行所有的测试用例并
不能保证该系统已有足够的测试。许多其他因素也决定了测试工程
师表现是否良好，测试用例是否能有效地衡量被测试软件的质量。
什么是测试用例有效性（Test-CaseEffectiveness,TCE）的度量？TCE
是一种衡量测试用例有效性的方法。测试软件时，总有若干作为副
作用的缺陷被发现。所谓“副作用缺陷”（side-effectdefect），是指
在测试过程中发现的，但却不是写好的测试用例中断言失败的直接
结果。
基本原理是，这些副作用缺陷没有明确被现有的QA测试用例所覆
盖，所以必须检查触发这些缺陷所需要的条件。然后可以开发新的
测试用例，并在后面的测试周期中执行它们。
由于TCE衡量的是QA测试用例相对于其他手段确定缺陷的成效如
何，它可以用来随着时间的推移跟踪测试覆盖率。
这个公式很简单：
TCE=(Nt/Ntot)×100%
这里Nt是QA发现的缺陷的总数，而Ntot是所有发现的缺陷的数量
（NT）和测试逃逸的和。
测试逃逸（testescape）是指在正常的QA测试周期之外发现的缺陷。