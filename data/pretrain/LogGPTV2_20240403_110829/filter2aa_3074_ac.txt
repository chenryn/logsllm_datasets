WWW-Authenticate: Mutual
   realm="example_space_name",
   version=1,
   algorithm=SHA-256,
   validation=host,
   auth-scope=localhost,
   reason=initial
   sid="4563806698",
   ks1="daf4496794697cf8db5856cb6c1",
   nc-max=400,
   nc-window=128,
   time=60
GET /resource HTTP/1.1
Host: localhost
Authorization: Mutual
   realm="example_space_name",
   version=1,
   algorithm=SHA-256,
   validation=host,
   auth-scope=localhost,
   user="jane",
   vkc="wE4q74E6zIJEtWaHKaf5wv/H5Q"
HTTP
HTTP/1.1 200 OK
Authentication-Info: Mutual
   version=1,
   sid="4563806698",
   vks1="wE4q74E6zIJEtWaHKaf5wv/H5Q"
# response body
a. 如果相同，表明对服务器身份认证通过，则可以使用其返回的保护资源。
b. 如果不同，表明服务器是冒牌的，或面临中间人攻击，则不使用其返回的响应，并提示用户。 
Negotiate(RFC 4559)
这个找了半天，，，真离谱
最后查到这个东西应该是windows下的认证 NTLM和kerberos，那应该是HttpClient+NTLM认证
数据包特征
NTLM认证
NTLM是NT LAN Manager的缩写，NTLM是基于挑战/应答的身份验证协议，是 Windows NT 早期版本
中的标准安全协议。
基本流程
客户端在本地加密当前用户的密码成为密码散列
客户端向服务器明文发送账号
服务器端产生一个16位的随机数字发送给客户端，作为一个challenge
客户端用加密后的密码散列来加密challenge，然后返回给服务器，作为response
服务器端将用户名、challenge、response发送给域控制器
域控制器用这个用户名在SAM密码管理库中找到这个用户的密码散列，然后使用这个密码散列来加
密chellenge
域控制器比较两次加密的challenge，如果一样那么认证成功，反之认证失败
相关协议
Net-NTLMv1
Net-NTLMv1协议的基本流程如下：
客户端向服务器发送一个请求
服务器接收到请求后，生成一个8位的Challenge，发送回客户端
客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，作为response发送给服
务器
服务器校验response
而Net-NTLMv1 response的计算方法为
将用户的NTLM hash补零至21字节分成三组7字节数据
三组数据作为3DES加密算法的三组密钥，加密Server发来的Challenge
这种方式相对脆弱，可以基于抓包工具和彩虹表爆破工具进行破解。
HTTP
WWW-Authenticate: NTLM realm="SIP Communications Service", 
targetname="server.domain.com", version=4
Net-NTLMv2
自Windows Vista起，微软默认使用Net-NTLMv2协议，其基本流程如下：
客户端向服务器发送一个请求
服务器接收到请求后，生成一个16位的Challenge，发送回客户端
客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，作为response发送给服
务器
服务器校验response
使用Hash
LM Hash
LM Hash(LAN Manager Hash) 是windows最早用的加密算法，由IBM设计。LM Hash 使用硬编码秘钥
的DES，且存在缺陷。早期的Windows系统如XP、Server 2003等使用LM Hash，而后的系统默认禁用
了LM Hash并使用NTLM Hash。
LM Hash的计算方式为：
转换用户的密码为大写，14字节截断
不足14字节则需要在其后添加0×00补足
将14字节分为两段7字节的密码
以 KGS!@#$% 作为秘钥对这两组数据进行DES加密，得到16字节的哈希
拼接后得到最后的LM Hash。
作为早期的算法，LM Hash存在着诸多问题：
1. 密码长度不会超过14字符，且不区分大小写
2. 如果密码长度小于7位，后一组哈希的值确定，可以通过结尾为 aad3b435b51404ee 来判断密码长
度不超过7位
3. 分组加密极大程度降低了密码的复杂度
4. DES算法强度低
NTLM Hash
为了解决LM Hash的安全问题，微软于1993年在Windows NT 3.1中引入了NTLM协议。
Windows 2000 / XP / 2003 在密码超过14位前使用LM Hash，在密码超过14位后使用NTLM Hash。而
之后从Vista开始的版本都使用NTLM Hash。
NTLM Hash的计算方法为：
• 将密码转换为16进制，进行Unicode编码
• 基于MD4计算哈希值
攻击方式
Pass The Hash
Pass The Hash (PtH) 是攻击者捕获帐号登录凭证后，复用凭证Hash进行攻击的方式。
微软在2012年12月发布了针对Pass The Hash攻击的防御指导，文章中提到了一些防御方法，并说明了
为什么不针对Pass The Hash提供更新补丁。
Pass The Key
在禁用NTLM的环境下，可以用mimikatz等工具直接获取密码。
NTLM Relay
攻击者可以一定程度控制客户端网络的时候，可以使用中间人攻击的方式来获取权限。对客户端伪装为
身份验证服务器，对服务端伪装为需要认证的客户端。
OAuth(RFC6749)
这个看了一下，，师傅写的很详细很全，，就直接摆上了
OAuth 2.0 - 废物大师兄 - 博客园
Spring Security OAuth 2.0 - 废物大师兄 - 博客园
Salted Challenge Response(RFC7804)
HTTP SCRAM 是一种 HTTP 身份验证机制，其客户端响应和服务器质询消息是基于文本的消息，包含一
个或多个以逗号分隔的属性值对。SCRAM-SHA-1 是为了与 RFC 5802 实现的数据库兼容而注册的，这些
实现还希望公开对相关服务的 HTTP 访问，但不建议将其用于新部署。为了互操作性，所有支持 SCRAM 
的 HTTP 客户端和服务器必须实现 SCRAM-SHA-256 身份验证机制
SCRAM-SHA-1与CRAM-SHA-256
查了许多资料，发现在MongoDB中使用最多。
数据包
消息序列
Authorization: SCRAM-SHA-256 realm="PI:EMAIL",
          data=biwsbj11c2VyLHI9ck9wck5HZndFYmVSV2diTkVrcU8K
SCRAM SHA-1的执行涉及四个消息的传输和处理；客户端和服务器各有两个。如上图所示，客户端通过
发送客户端第一消息开始该过程，并且响应于从客户端接收到格式正确的第一消息，服务器向客户端发
送 服务器第一消息。客户端处理此消息，如果一切正常，则传输客户端最终消息。正如预期的那样，服
务器会处理此消息。在此任务结束时，服务器应该知道客户端是否成功通过身份验证。如果是，服务器
发送服务器最终消息，否则它会向客户端发送认证失败消息（或者可能不会）。随着服务器最终消息的
接收，客户端也能够对服务器进行身份验证
加密值
客户端随机数：这是一个由客户端随机生成的值，理想情况下使用加密随机生成器。该值与客户端
的用户名一起包含在Client First Message 中。请注意，每个身份验证会话的客户端随机数值必须不
同。
服务器随机数：这类似于客户端随机数，它包含在服务器第一消息中。对于每个身份验证会话，此
值必须不同，并且是加密安全的。
Salt：Salt 是由服务器生成的加密安全随机数。这个 Salt 值和密码被输入到生成另一个值的单向加
密函数中。回想一下背景部分，该值用于隐藏密码。Salt 包含在Server First Message 中。
 Iteration Count：这是由服务器生成的一个数值，表示上面提到的加密函数应该应用于 Salt 和密
码以生成其输出的次数。该迭代计数值在Server First Message 中传输。
注意
SCRAM SHA-1 规范强烈 建议该协议应与另一个提供机密性的协议结合使用。换句话说，SCRAM SHA-1 
消息应该通过加密通道进行交换。这个想法是为了防止窃听者在传输过程中提取这些消息的内容，然后
使用其中包含的值发起离线字典攻击来提取密码。
Mongodb中的认证机制
MongoDB中使用的SCRAM-SHA1认证机制
Vapid(RFC7235)
什么是VAPID
要想发送推送通知，需要使用 VAPID 协议。
VAPID 是“自主应用服务器标识” ( Voluntary Application Server Identification ) 的简称。它是一个规
范，它本质上定义了应用服务器和推送服务之间的握手，并允许推送服务确认哪个站点正在发送消息。
这很重要，因为这意味着应用服务器能够包含有关其自身的附加信息，可用于联系应用服务器的操作人
员。拥有像 VAPID 这样的标准就是向前迈出了一大步，因为这意味着最终所有浏览器都将遵循这个单一
标准，即无论什么浏览器，开发者都可以使用 Web 推送进行无缝工作。
关于其他文章
实在找不到关于分析的文章了，，，看一下应用的地方吧
PWA(Progressive Web App)入门系列:Push_王乐平 技术博客-CSDN博客
Web push 浏览器推送
6.4 网络推送 · PWA 应用实战
编程语言实现HTTP认证
• 用 PHP 进行 HTTP 认证 
https://www.php.net/manual/zh/features.http-auth.php
• 用 JAVA 实现basic认证
https://ask.csdn.net/questions/768779
• 用java实现Bearer认证
HTTP Bearer认证及JWT的使用 - 搬砖滴 - 博客园
• 用java + SpringBoot实现 DIGEST 认证
HTTP的几种认证方式之DIGEST 认证(摘要认证) - wenbin_ouyang - 博客园
• 摘要认证：
https://www.cnblogs.com/lsdb/p/10621940.html
摘要认证,使用HttpClient实现HTTP digest authentication - 代码先锋网
• java实现双向认证
https://blog.csdn.net/HD243608836/article/details/109105469
• 实现NTLM认证
HttpClient+NTLM认证_耳东的慢生活的博客-CSDN博客
• C#实现SCRAM-SHA-1
https://www.codeproject.com/Articles/698219/Salted-Challenge-Response-Authentication-Mechan
ism
参考文章
1. [RFC 2617] Digest 签名摘要式认证 -
2. Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry
3. 《图解HTTP》
4. HTTP 认证方式
5. HTTP 身份验证框架(Basic 认证)_
6. HTTP几种认证方式介绍 - 9.0 - 博客园
7. HTTP Origin-Bound Authentication (HOBA)
8. HTTPS双向认证(Mutual TLS authentication) - API 网关 - 阿里云
9. Web应用中基于密码的身份认证机制(表单认证、HTTP认证: Basic、Digest、Mutual)u012324798
的博客-CSDN博客基于密码的身份认证
10. 8.7. NTLM 身份验证 ‒ Web安全学习笔记 1.0 文档
11. Salted Challenge Response Authentication Mechanism (SCRAM) SHA-1