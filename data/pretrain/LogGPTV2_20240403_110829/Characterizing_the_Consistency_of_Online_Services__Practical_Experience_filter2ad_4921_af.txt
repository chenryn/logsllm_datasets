### 4.1 Target Systems

Our objective is to provide specific consistency guarantees to third-party applications that utilize popular online web services with public APIs. Specifically, application developers can choose to enforce individual session guarantees (Read Your Writes, Monotonic Reads, Monotonic Writes, and Writes Follow Reads) or combinations of these properties (all four session guarantees combined correspond to causality [26]). To achieve this, we have developed a middleware that can be easily integrated into third-party client applications, enhancing the semantics exposed through the system's public API. Figure 4.1 provides an overview of our architecture.

#### Architecture Overview

There are numerous systems that offer public APIs, each with varying interfaces. We focused on a group of APIs with similar service interfaces that could be easily adapted. We chose to target social networking services such as Facebook, Twitter, and Instagram. This choice is driven by the relevance and popularity of these services, as well as the large number of third-party applications developed for them.

#### Data Model and Operations

We target services that use a data model based on key-value stores, where data objects are accessed via a key, and each key is associated with a list of objects. This data model is common in online social network services, particularly for features like user feeds and comment lists. Specifically, we focus on services that provide two fundamental operations for manipulating the list of objects associated with a given key:

- **Insert Operation**: Appends a new object to the first position of the list.
- **Get Operation**: Returns the first N elements of the list (i.e., the most recent N elements added to that list). See Figure 4.2 for an illustration.

Most existing services specify a maximum of N elements, so our middleware must handle cases where the service returns fewer than N elements for read operations.

#### Black-Box Access

Since we access these services through their public APIs, we treat the service implementation as a black box, making no assumptions about their internal operations. Our protocols are designed without assuming any specific consistency guarantees from the public service API. This approach is justified by our previous measurement study, which revealed frequent violations of multiple session guarantees in the public APIs of such services.

#### Metadata Storage

Our algorithms require storing metadata alongside the data. When accessing services as black boxes, especially when the service does not support user-managed metadata (e.g., Facebook), we encode this metadata as part of the data itself. While this may make the metadata visible to native clients (web applications or third-party applications not using our middleware), it is not a critical issue since many third-party applications use data objects (lists) exclusively.

#### Time Estimation

To order operations issued by the local client and other remote clients, our middleware needs an approximate estimate of the current time. Two options are available:

- **Service-Specific Call**: If the service has a public API call that exposes server time, we use this directly.
- **REST Call**: If the service uses a Representational State Transfer (REST) API, a simple REST call can be made, and the server time can be extracted from the HTTP response header (Date).

Clock synchronization is not required for correctness, but out-of-sync clocks can lead to reordering of concurrent events, potentially affecting the visibility of recent messages in a sliding window. However, we ensure that such ordering never violates the correctness conditions we enforce.

#### Rate Limits

Public APIs often impose rate limits on operations issued by client applications, typically expressed as a maximum number of operations within a given time window. Our middleware must account for these limits to avoid being rate-limited by the service.