4
4
2
2
7
7
b)
b)
5
5
3
3
8
8
1
1
6
6
4
4
5
5
3
3
8
8
2
2
7
7
c)
c)
Figure 2. a): An example network with 8
nodes and 14 links. b): layer 1 (L1) gener-
ated based on a). c): layer 2 (L2) generated
based on a).
We demonstrate a method for generating safe layers for
all nodes by the following example, Fig. 2a being the start-
ing point. This network has no original articulation points.
The resulting layers are presented in Fig. 2b and Fig. 2c.
The ﬁrst layer (L1) will be calculated starting with node 1
as a candidate safe node. Since node 1 is not an articulation
point, i.e., its removal does not disconnect the network, we
remove links and make node 1 a safe node. Node 2 is then
analyzed and found eligible as a safe node in the same layer
as node 1. The same is the case with node 3, but node 4
has become an articulation point, so node 4 is not safe i L 1.
Finally, layer 1 (L1) will be the safe layer of the nodes 1,
2, 3 and 5. Note that a layer may contain cycles as seen in
layer 1.
When all remaining nodes are articulation points in L 1,
layer L2 is calculated. It starts with e.g., node 4, and covers
nodes 4, 6, 7 and 8. In other words, our example network
can be covered with only two layers.
For reasonably sized networks, generation of layers
could easily be done manually by a network manager.
3.1.2 Implementation Considerations
To take advantage of the resilient routing layers, a packet
network implementation must fulﬁll certain requirements.
These requirements depend on whether the network oper-
ates in a connectionless or a connection-oriented manner.
For a connectionless network, e.g., IP or Ethernet, each
packet must be marked according to what layer is currently
valid. If n is the maximum number of layers, log 2(n) bits in
the packet header should identify the currently valid layer.
The node that moves a packet to another layer, marks the
packet header with the global identiﬁcation of the new layer.
In the case of failures, only trafﬁc transiting the failed node
should be moved to another layer. All packets not affected
by the fault will still be routed based on the full topology.
The node moving trafﬁc to another layer must therefore
know if a failed node is in the route of a packet. For local
recovery, this is obviously fulﬁlled since it is the next hop
that is failing. For global recovery, we must ensure that the
ingress node is aware of the entire route for the trafﬁc.
For a connection-oriented network, e.g., MPLS, mark-
ing packets with a global layer identiﬁcation is not neces-
sary. Path signaling is performed as normal. For each layer
a new set of paths must be signaled. As for connection-
less networks, the node moving trafﬁc from original paths
to recovery paths must know what paths are affected by the
failure.
Fig.
3 gives an example of how trafﬁc is switched
between layers when node 5 is failing. The dotted links
are not available in layer 1, i.e., the safe layer of node 5.
Before node 5 fails, all trafﬁc may use the full topology,
e.g., trafﬁc from node 6 to node 3 may follow the path 6-
4-5-3. When node 5 fails, trafﬁc transiting node 5 must
be routed according to layer 1 (removing the dotted links.),
while other trafﬁc can still be routed according to the full
topology.
In the case of local recovery, trafﬁc is routed
from node 6 to 4 according to the full topology. Node 4
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
detects the failure, and switch trafﬁc to layer 1. The path
for trafﬁc between node 6 and node 3 will then be 6-4-7-8-
3. If node 6 is notiﬁed about the failure (global recovery)
of node 5, the transition to layer 1 could be done by node 6.
The path would then be 6-7-8-3. Even if node 5 has failed,
our method can still handle failures of nodes 1, 2 and 3.
If a failure is deﬁned as permanent, new layers must be
calculated based on the full topology without out the failed
component.
1
1
6
6
4
4
2
2
7
7
5
5
3
3
8
8
Figure 3. Example of how affected trafﬁc are
switched to layer 1 (L1) when node 5 is failing.
3.2 An Example Algorithm
There are numerous ways for choosing which nodes
should be safe in which layer. RRL can be made to be op-
timized on many different criteria, thus it displays signiﬁc-
ant ﬂexibility. One alternative could be to have an algorithm
generating a preferred ﬁxed number of layers. For sim-
plicity this section presents an algorithm making choices
that in a very straightforward way attempts to minimize the
number of layers1. The algorithm calculates layers in the
topology G = (V, E), where V is the set of nodes and E is
the set of links.
1An implementation of this algorithm,
together with the whole
evaluation framework used in this paper can be retrieved from
http://www.simula.no
(1) S = artPoints(G);
while (S (cid:1)= V )
(cid:1) = V \S;
Li = G; V
foreach n ∈ V
(cid:1)
if (n /∈ artPoints(Li))
(cid:1) = links(n, Li);
E
Li = Li\{lj ∈ E
S = S ∪ {n};
(2)
(3)
(cid:1) | 1 ≤ j < |E
(cid:1)|};
endif
endfor
store layer Li;
i = i + 1 ;
endwhile
(4) balanceLayers();
Steps (1)-(4) deserve some comments. (1): Set S keeps
track of the processed nodes, i.e., nodes that are either artic-
ulation points or safe nodes in an already computed layer.
Initially, all articulation points in G are added to set S.
artPoints(G) ﬁnds all articulation points in G. (2): We ﬁnd
(cid:1) = links(n, Li)), and
all the adjacent links of the node (E
then we (3): remove all adjacent links but one from the cur-
rent topology of the layer.
(4): So far, the algorithm at-
tempts to make as many nodes as possible safe in the ﬁrst
layers. The ﬁrst layers will then contain a majority of safe
nodes. A typical distribution of safe nodes for a topology
with 128 nodes could be 80, 36, and 12 for the resulting
three layers. The layers with most safe nodes will contain
fewer links and therefore offer more inefﬁcient routing than
other layers. To attain more equal routing performance in
the layers, we do some postprocessing of the layers to bal-
ance the number of safe nodes. This is done by moving
safe nodes from the layers with high degree of safe nodes to
the layers with low degree of safe nodes, with the require-
ment that they are not articulation points in the new candid-
ate layer. In addition, we must assure that we do not acci-
dentally make an unintended safe node unsafe when adding
links to the layer of high degree of safe nodes.
The authors are not aware of any algorithm running in
polynomial time that ﬁnds a guaranteed minimum number
of layers. The proposed heuristic algorithm performs well,
but does not provide any guarantees that the number of lay-
ers will indeed be minimal.
For an arbitrary node in an arbitrary graph, it can be
determined whether the node is an articulation point in
O(|V | + |E|) [29]. This articulation point test is done
within a nested while- and for-loop. In a theoretical worst
case we need one layer for each node in the network, and
hence the while-loop will iterate |V | times. The for-loop
will for each while-iteration iterate |V | − c times where c is
the number of while-iterations currently accomplished. In
worst case the total running time for these steps will then
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
be O(|V |2 · (|V | + |E|)), which in all graphs of practical
interest is O(|V |3). The balancing method runs with the
same complexity, and hence the total running time is bound
within O(|V |3).
4 Evaluation results
4.1 Scalability - Number of Layers
The scalability of RRL is directly dependent on the num-
ber of layers needed to provide a safe layer for each node in
the network. Fig. 4 presents the number of layers for a vari-
ety of topologies. The calculations are performed with the
algorithm from section 3.2. We have used the Brite topo-
logy tool to generate synthetic topologies [16]. Two main
categories of generation models have been used, Waxman
(wa) with default settings [28] and Generalized Linear Pref-
erence (glp) with two different settings (glp1 and glp2) [6].
In addition, we have used a set of real world topologies col-
lected from Rocketfuel (Rfuel) [1]. These are intra-provider
POP-level topologies. We have generated 100 topologies
for each synthetic topology speciﬁcation, i.e., for each bar
in Fig. 4. The bar-name in the ﬁgure denotes the model
used, number of nodes and number of links (model-nodes-
links). The entries with and ’X’ denotes that the number of
links or nodes has varied within the the category of gener-
ated topologies. For glp1 networks the average nodal degree
has varied around three, and for glp2 networks the average
nodal degree has been about four. The RocketFuel networks
(31 networks) represent networks with a wide variation in
number of nodes and number of links.
Extracting results from Fig. 4 we have that ﬁve layers
seem sufﬁcient even for very large networks. We also ob-
serve that the number of layers decreases as the average
node degree increases.
4.2 RRL Backup Path Lengths
With RRL, trafﬁc affected by a failure will be routed ac-
cording to the safe layer of the failed component. As il-
lustrated in section 3, a layer has a reduced set of links
compared to the full topology. This will of course have
consequences for the length of the backup paths, as there
are less links to choose from.
In this section we present
the distribution of RRL backup path lengths for one-fault-
tolerance in a collection of topologies. We look at node
failures and measure the backup path lengths when apply-
ing local protection switching. These are compared with
the failure-free primary path and the optimal backup path,
which is the shortest path upon removal of the failed com-
ponent only. In most cases we use the algorithm from sec-
tion 3.2 to generate layers as input to backup path calcula-
tion. The number of layers are then close to a minimum. To
NUMBER OF LAYERS FOR DIFFERENT NETWORKS
5 layers
4 layers
3 layers
2 layers
s
e
i
g
o
l
o
p
o
t
f
o
e
g
a
t
n
e
c
r
e
P
100 %
90 %
80 %
70 %
60 %
50 %
40 %
30 %
20 %
10 %
0 %
wa-16-32 wa-32-64 wa-32-96 wa-128-
wa-1024-
glp1-32-X  glp2-32-X Rfuel-X-X
256
2048
Topology model
Figure 4. Number of layers for different types
of topologies (synthetic (wa, glp1, glp2) and
real world (Rfuel)).
demonstrate that there exist a trade-off between the number
of layers, and backup path lengths, we show some results
using more layers than the minimum. With more layers,
each layer will contain less safe nodes, and thus more links
will be available for routing.
For each original path in a topology we have calculated
one backup path. This backup path has been chosen as the
median length backup path from the collection of backup
paths for all component failures on the original path.
Figure 5 gives the distribution for 100 topologies based
on the waxman model with 32 nodes and 64 links. In addi-
tion, we have plotted the RRL backup path lengths for 100
GLP topologies having similar settings. We observe that
there are no major differences in the results obtained using
different models. The main observation is that RRL backup
paths are longer than the optimal backup paths, however, we
ﬁnd that the differences are within acceptable bounds. The
average length for for optimal backup paths is 3.5, as RRL
gives an average of 4.3.
Figure 6 shows the same pattern for networks with higher
node degrees, hence showing shorter average lengths.
It
also shows how the relative distribution is repeated for lar-
ger networks, although with longer average lengths.
RRL provides a high degree of freedom in how to build
layers and how many layers to build. Figure 7 compare
the distributions of backup path lengths for optimal backup
paths and RRL backup paths with the number of layers