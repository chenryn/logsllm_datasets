study, we show that this problem also applies to Android.
Combined with the Zygote forking structure, this can be
more serious for Android than for other embedded devices.
As mobile devices have become widely used, the studies on
the use of SSL/TLS in Android have increased. Georgiev et
al. [16] demonstrated that in many Android apps SSL/TLS
implementations were insecure against MITM attacks. Fahl
et al.
[15] also reported that many applications contained
the SSL/TLS code that was potentially vulnerable to MITM
attacks. These vulnerabilities of Android SSL were due to
implementation errors and developers’ misunderstandings of
the requirements for SSL security. In contrast, our discovery
is related to the structural limitations of LRPNG and the
Android architecture.
Ristenpart and Yilek [23] revealed that Virtual Machine
(VM) resets could lead to randomness reuse and allow an at-
tacker to compromise TLS sessions or expose a DSA signing
key of server. They also suggested a general framework for
hedging cryptographic operations against this type of ran-
domness failure, and experimentally conformed that their
framework can be applied to the OpenSSL library. The vul-
nerability of APRNG, which will be described in this paper,
partly stems from the Dalvik Virtual Machine (DalvikVM)
cloning architecture of Android. Our discovery is therefore
another good example of the practical insecurities that arise
owing to the reuses of VM states.
3. ANALYSIS OF ANDROID OPENSSL
In this section, we describe how the Android OpenSSL is
implemented and how the APRNG is operated to generate
the ClientHello nonce using the SDK class library.
3.1 Architecture of Android OpenSSL
SSL is implemented in the form of an open source li-
brary. The typical libraries include OpenSSL, GnuTLS,
NSS, and so on. We focus on OpenSSL, because it is used by
most Android applications. The Android OpenSSL provides
661Figure 4: The process of RAND add() and RAND byte()
libcrypto.so for the cryptographic functions and libssl.
so for SSL communications in the form of a system shared
library.
Android is based on a customized Linux kernel with a
Java program interface. Because system services and native
or user applications run as Linux processes, each applica-
tion is assigned to a unique PID. Since Android applications
are based on Java programming, every application must run
in its own instance of the DalvikVM. However, it takes a
long time to initialize and operate the DalvikVM whenever
a new application is launched. Therefore, Android uses a
VM known as Zygote, which is the parent process of most
Android applications.
Upon startup of Android, the Linux kernel starts the Zy-
gote process by reading init.rc. It initializes a DalvikVM
that pre-loads and pre-initializes the core library classes in-
cluding the OpenSSL shared library. While the native func-
tion of DalvikVM sets SSL_ConText(SSL_CTX) for SSLSOCKET,
the internal APRNG states are initialized and updated. When-
ever Android applications that use OpenSSL are executed,
their DalvikVMs copy and load the APRNG states of Zygote
to their own APRNG states, as shown in Figure 3.
3.2 APRNG Operation Process
OpenSSL provides the user interfaces so that applications
can select one of many random engines to generate random
bytes. Android applications use the SSLeay random method.
The APIs for the use of APRNG are as follows.
(cid:15) RAND_poll(): initializes the PRNG states with the en-
tropy sources.
(cid:15) RAND_add(void *buf, int n, double entropy): mixes
n bytes of buf into PRNG states.
(cid:15) RAND_byte(void *buf, int n): generates n bytes of
random data and puts into buf.
3.2.1 Initialization of the States
While an Android device is booting, Zygote creates a SSL_
CTX for SSL communication.
In the process of the SSL_
CTX setting, Zygote executes RAND_poll() to initialize the
APRNG states. RAND_poll() adds four entropy sources to
the APRNG states by calling RAND_add(). These entropy
sources will be described in detail in the next section.
3.2.2 Update of the States
The internal APRNG states comprise two entropy pools:
20 bytes of md_state and 1023 bytes of PRNG_state. The
states are updated by using RAND_add() and RAND_byte().
PRNG has an unsigned integer array md_count, and md_
count[0] is incremented by 1 whenever the RAND_byte()
function is called. In addition, md_count[1] represents the
total number of message blocks input to SHA-1 when the
RAND_add() function is executed. The size of an input block
for SHA-1 is 10 bytes.
In the RAND_add(), the data of buf are input into the
APRNG states for updating. In the RAND_byte(), the exist-
ing (uninitialized) values of buf are input to SHA-1 as an ex-
ternal entropy source. The buf will contain newly generated
random values after the execution of RAND_byte() is ﬁn-
ished. The three internal variables md_state, PRNG_state,
and md_count are also injected into SHA-1. The PRNG_state
is updated by the output of SHA-1, which is xored with
the previous PRNG_state. After ﬁnishing the update of the
PRNG_state, the last hash output generated is xored with
the previous md_state.
3.2.3 Extracting Random Bytes
RAND_byte() is used to extract random bytes.
In this
function, the application PID and three internal variables are
mixed in SHA-1. The APRNG uses the bottom 10 bytes
of the output of SHA-1 as random bytes. PRNG_state is
updated by xoring the top 10 bytes of the hash output into
the previous PRNG_state.
The operating processes of RAND_add() and RAND_byte()
are depicted in Figure 4.
3.3 Generating ClientHello Nonce
Android applications use class interfaces to establish SSL
connections. These classes are in the middle of the interface
between the Java application and the OpenSSL library. Rep-
resentative classes are the org.webkit and javax.net.ssl
packages. The org.webkit package provides the libchromium_
net.so library to establish an SSL connection using webkit
socket. The javax.net.ssl package uses Java Secure Socket
Extension (JSSE) and provides native functions so that ap-
plications can communicate using SSL.
As mentioned before, Android applications generate a Clien-
tHello nonce from the states initialized by Zygote. The
662Figure 5: The procedure of generating ClientHello nonce in org.webkit package
generation process of this can be classiﬁed into two types
depending on these packages. In this subsection, we explain
in detail the case of org.webkit, and brieﬂy describe the
case of javax.net.ssl.
3.3.1 Generation of Random Values in /dev/urandom
As shown in Figure 5, Zygote reads the random values
from /dev/urandom for initialization of the APRNG states.
The user interface functions to read from /dev/urandom are
get_random_bytes() and urandom_read(). The default size
of an output block of LPRNG is 10 bytes. If the number of
requested bytes is not a multiple of 10 bytes, the last block is
truncated. If the entropy_counter of input_pool does not
exceed the minimum needed (threshold), /dev/urandom out-
puts without mixing the output of input_pool. The thresh-
old of entropy_counter is 192 bits in Android kernel 3.0.15.
Upon Android startup, all bytes of the LPRNG states
are set to zero. In these states, the Linux kernel extracts 4
bytes of random data three times from /dev/urandom for the
network setting, such as initializing inet6 and computing
genid for the ipv4 address. The Linux Kernel then adds
ktime and utsname to the nonblocking_pool as external
entropy sources. The ktime is nano-second after the system
boots, and utsname indicates name and information about
current kernel.
While the initial process of the kernel starts the services
registered in init.rc, the kernel and some of the applica-
tions extract random data from /dev/urandom for various
purposes. For example, the kernel uses 6 bytes for assign-
ing an Ethernet IP address, and 16 bytes whenever it loads
the ELF format. Some Android processes request 4 bytes
for stack_chk_guard, and applications using SQLite extract
256 bytes for initializing the states of their own PRNG. We
note in advance that stack_chk_guard is importantly used
in recovering the PMS of some SSL packets, as described in
Section 6.
Because Zygote is also registered in init.rc, it is initial-
ized upon system boot, and 32 random bytes from /dev/
urandom are injected into APRNG during this process.
3.3.2 Operation of Zygote APRNG
While DalvikVM of Zygote creates SSL_CTXs, four entropy
sources, i.e., Time, PID, UID, and /dev/urandom, are injected
into the states during LPRNG initialization executed by
RAND_poll(). The one read from /dev/urandom is 32 bytes,
and the others are 4 bytes.
The APRNG executes RAND_byte() to generate 16 bytes
of random data for setting the ticket key [7], which is used
to resume a SSL session without requiring session-speciﬁc
states at the server. The ticket key consists of three compo-
nents, i.e., the key name, hmac key and AES key. Because
DalvikVM of Zygote creates two SSL_CTXs for transferring
and receiving, APRNG calls RAND_byte() six times in total.
In RAND_byte(), APRNG uses the existing value of the out-
put buﬀer as a small source of entropy. However, the value
in the operation of Zygote is initialized to zero.
3.3.3 Operation of Application APRNG
When an application starts, it loads the initialized OpenSSL.
To establish a session, it creates a new SSL_CTX by calling
SSL_CTX_new(), which also calls RAND_byte() three times
to set the ticket key. At this point, the application’s PID
and the output buﬀer value, which is initialized to zero, are
mixed into the APRNG states. When OpenSSL performs
the SSL handshake by invoking SSL_connect(), APRNG
also adds the Time into the states. Next, the ClientHello
nonce is generated and transferred to a server.
If the application uses the javax.net.ssl package for
SSL, it has a little diﬀerence in the number of times to
run RAND_bytes() for SSL_CTX and external input injected
into the states. The APRNG generates 16 bytes of ran-
dom values for SSL_CTX_new() six times and then adds the
ﬁle information regarding /dev/urandom, 1024 bytes from
/dev/urandom, and Time to its internal states before gener-
ating the ClientHello nonce.
4. PREDICTABILITY OF APRNG
The randomness of the APRNG depends on the unpre-
dictability of the external entropy sources. The sources in-
put into the APRNG are shown in the gray boxes in Figure
5. Among these, /dev/urandom is the most important in
663Table 1: Example of utsname
sysname
nodename
release
version
machine
domainname
Linux
(none)
3.0.15
#1 SMP PREEMPT
Fri Feb 8 16:54:28 KST 2013
armv7l
(none)
pool is less than the threshold (192 bit) at 83%. In these
cases, /dev/urandom requested from the APRNG are gener-
ated using only two external sources: utsname and ktime.
Our experiment is highly limited, but we expect that this
phenomenon will generally occur in Android. It was previ-
ously reported for other Linux platforms [17]. In addition
to the above experiment on a test board, we also conducted
another experiment on smartphones (Section 5), which con-
vince us that our assertion will be true in practice.
4.2 Complexity of the Entropy Sources
Herein, we analyze the complexity of the entropy sources,
which are fed into the state of APRNG until the ClientHello
nonce is generated. The following elements should be checked:
(cid:15) LPRNG: utsname, ktime, CBN
(cid:15) Zygote APRNG: UID, PID, Time, Buffer
(cid:15) Application APRNG: PID, Time, Buffer
ktime
utsname
4.2.1
The utsname comprises six elements that contain informa-
tion on the system and kernel. The sysname, nodename, and
domainname have ﬁxed values. The machine and release
indicate the version of the chip and kernel, respectively, and
version is the time when the kernel was compiled. Thus,
they do not have many types of such elements, which will be
same, if the devices are released by a manufacturer during
the same period. Therefore, if an attacker ﬁxes the target
for an attack, he can see the device’s utsname in advance. As
an example, the utsname of our board is provided in Table 1.
4.2.2
The ktime is the time in nano-seconds when LPRNG calls
random_initialize(). This function is usually executed
within 2 seconds after a system boot. The complexity of
ktime can therefore be roughly estimated as 31 bits. How-
ever, if we ﬁx a device, we can reduce it to 25 (cid:24) 28 bits by
more minutely analyzing the execution time of the function.
For example, based on the analysis which we will present
in Section 5, we can estimate the complexity of ktime as 26
bits in our phone.
4.2.3 CBN
We deﬁne the CBN (Computed Block Number) as the
total number of random blocks (10 bytes) computed in /dev/
urandom from the system boot to the start of the Zygote
initialization. The CBN depends on the device model, OS
version, and communication provider. It varies between 100
and 250. For example, in our experiment, it was 137 on the
board and 210 on the phone. However, we observed that the
CBNs of diﬀerent devices are equal if the above properties of
the devices are the same.
Figure 6: