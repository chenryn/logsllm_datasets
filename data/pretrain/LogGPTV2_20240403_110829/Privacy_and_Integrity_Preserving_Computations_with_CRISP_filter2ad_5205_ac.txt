bits, the conversion block generates |q| Boolean sub-secrets
[y] j
2}B, such that
B={y j
0,y j
1,y j
∀ j ∈ [1,|q|] : x j =
2(cid:77)
i=0
y j
i ,
where ⊕ denotes the XOR operation (i.e., addition modulo 2),
and x j is the j-th bit of x. When designing such a block
in the MPC-in-the-head context, we must make the circuit
(2,3)-decomposable and ensure the 2-privacy property, i.e.,
revealing two out of the three players’ views to the veriﬁer
should not leak any information about the input.
To reconstruct the secret in zero-knowledge and obtain a bit-
wise secret sharing, the procedure is as follows: For every bit,
starting from the least signiﬁcant one, the conversion block
computes (i) the sum of the bits held by each player, plus
the carry from the previous bits, and (ii) the carry of the bit.
The computation of the carry requires interaction between the
different players (i.e., making the operation a “multiplicative"
one), hence we design a conversion block with a Boolean
circuit that minimizes the amount of multiplicative gates.
More precisely, we design a bit-decomposition block for
MPC-in-the-head building on Araki et al. ’s optimized con-
version [8] between a power-of-two arithmetic ring and a
Boolean ring. Let Maj(·) be the function returning the major-
ity bit among three elements. Then, the conversion circuit, for
every bit k ∈ [1,|x|], does the following:
1. locally reads [αk]B={xk
2} (i.e., for each player);
2. computes the ﬁrst carry [βk]B amongst those inputs:
2)⊕xk
1;
2 ⊕ 1)(xk
βk=Maj(xk
1 ⊕ xk
0 ⊕ xk
2)=(xk
0,xk
0,xk
1,xk
1,xk
3. computes the second carry [γk]B among those inputs with
γ0=β0=0:
γk=Maj(αk,βk−1,γk−1)=
(αk ⊕ γk−1 ⊕ 1)(βk−1 ⊕ γk−1)⊕ βk−1;
4. sets the new Boolean sharing of the secret to
[y]k
B=[αk]⊕ [βk−1]⊕ [γk−1].
To the best of our knowledge, this is the ﬁrst time a bit-
decomposition circuit is used for MPC-in-the-head, which
enables to interface circuits working in different rings.
Hash Block. This block uses the SHA-256 circuit pre-
sented in [55] to compute the hash digest of the message
msg={nonce,uid,xxx} signed by the data source in the collec-
tion phase.
Full Circuit. With the above building blocks, and following
the ZKB++ protocol, the user generates a proof that can con-
vince the service provider that she has not tampered with the
data obtained by the data source.
Furthermore, using BDOP’s bound proof protocol (see Sec-
tion 3.2) the user produces a proof of correct encryption, i.e.,
that the encryption noise has not distorted the underlying
plaintext. The cryptographic material of the combined proofs
(ZKCE & BDOP) is denoted by P . At the end of the transfer
phase, the user sends to the service provider the message:
M1={cccttt,CCCbdop,P ,H(msg),σ(H(msg))}.
2116    30th USENIX Security Symposium
USENIX Association
$%%%%"&&Encode : 1((*+F++*F)AddAddAdd01%01"234$%%%%",&&=G0G1&&+0'$%%%%"Mult HIJ2345COMMITMENT BLOCKENCRYPTION BLOCKF!|+|…!%…CONVERSION BLOCK…HASH BLOCKH(4KL)4KL={E3E0%,@AB,F}!"#!,#"%,&,'Public parametersE3E0%ˆm=Decssskkk(ccctttψ)
ˆmB=Decssskkk(Bν,η(ccctttψ))
C1=Com( ˆm, ˆmB)
C1
Open C0
Open C1
User
Service Provider
ccctttψ,Bν,η(ccctttψ),C0,ψ(·) C0=Com(ν,η)
?
= ˆmB
Bν,η( ˆm)
?
= ˆmB
Figure 3: Release protocol for a computed value ˆm.
Bν,η( ˆm)
4.3 Veriﬁcation Phase
Upon reception of a message M1, the service provider veriﬁes
the signature using the provided hash digest. If satisﬁed, it
veriﬁes the proof P by ﬁrst evaluating the circuit C follow-
ing the ZKB++ protocol and then checking the bound proof
for the encryption noises. Hence, it is assured that cccttt is the
encryption of a data point xxx giving the hash that has been
certiﬁed by the data source.
4.4 Computation Phase
Using the homomorphic capabilities of the CKKS encryption
scheme, the service provider can perform any operation with a
bounded predeﬁned multiplicative depth (and arbitrary depth,
with bootstrapping [34]) on validated ciphertexts received
by the user. In particular, CKKS enables the computation of
a wide range of operations on ciphertexts: additions, scalar
operations, multiplications, and a rescaling procedure that
reduces the scale of the plaintexts. Those functions enable
the computation of polynomial functions on the ciphertexts.
Moreover, it supports the evaluation of other functions such
as exponential, inverse or square root [34–36], by employing
polynomial approximations (e.g., least squares). Hence, the
service provider can independently compute any number of
operations on the user’s encrypted data simply requiring inter-
actions with the user to reveal their outputs (see Section 4.5).
4.5 Release Phase
At the end of the computation phase, the service provider
holds a ciphertext of the desired output that can only be de-
crypted by the holder of the secret key. To this end, the service
provider and the user engage in a two-round release protocol,
which ensures the service provider that the decrypted output
is the expected result of the computation on the user’s data.
The release protocol is depicted in Figure 3 and detailed next.
Let ccctttψ denote the ciphertext obtained by the service
provider after performing computations on validated cipher-
text(s), and ˆm the corresponding plaintext. First, the service
provider informs the user of the computation ψ(·) whose
result it wants to obtain. Then, the service provider homomor-
phically blinds ccctttψ by applying the function Bν,η(x)=ν·x+η,
with ν and η uniformly sampled in Z∗
q and Zq resp., and com-
mits to the secret parameters used for blinding (i.e., ν,η) us-
ing a hiding and binding cryptographic commitment Com(·)
as C0=Com(ν,η). A hash-based commitment scheme can
be used for this purpose [29]. Subsequently, the service
provider sends to the user the encrypted result ccctttψ, its blind-
ing Bν,η(ccctttψ), and the commitment C0. Upon reception, the
user checks if the function ψ(·) is admissible. If the user ac-
cepts the computation ψ(·), she decrypts both ciphertexts as:
Decssskkk(ccctttψ)= ˆm and Decssskkk(Bν,η(ccctttψ))= ˆmB. Then, she com-
mits to the decrypted results, i.e., C1=Com( ˆm, ˆmB), and com-
municates C1 to the service provider who opens the commit-
ment C0 to the user (i.e., revealing ν,η). The user veriﬁes that
?
= ˆmB. If
the initial blinding was correct by checking if Bν,η( ˆm)
this is the case, she opens the commitment C1 (i.e., revealing
ˆm, ˆmB) to the service provider who veriﬁes that the cleartext
result matches the blinded information (i.e., by also checking
?
= ˆmB). At the end of the release phase, both parties
if Bν,η( ˆm)
are conﬁdent that the decrypted output is the expected result
of the computation, while the service provider learns only the
computation’s result and nothing else about the user’s data.
5 Privacy and Security Analysis
CRISP protects the user’s privacy by revealing only the output
of the agreed computation on her data, and it protects the ser-
vice provider’s integrity by preventing any cheating or forgery
from the user. Here, we present these two properties and their
corresponding proofs. The used lemmas and propositions are
presented in Appendix A. A more detailed proof is available
in the extended version of this paper [30].
5.1 Privacy
Proposition 5.1. Consider a series of messages {msgi} cer-
tiﬁed by the data source with a digital signature scheme σ(·)
that uses a cryptographic hash function H(·) with nonces. As-
sume that the parameters of the CKKS (N,q,χenc,χkey,χerr)
and BDOP (β,k,n,q,N) schemes have been conﬁgured to
ensure post-quantum security, that the circuit C is a valid
(2,3)-decomposition, and that the cryptographic commitment
Com(·) is hiding and binding. Then, our solution achieves
privacy by yielding nothing more than the result ˆm of the
computation on the user’s data {xxxi}.
Proof. To prove the privacy of CRISP, we construct an ideal
simulator whose outputs are indistinguishable from the real
outputs of CRISP’s transfer and release phases.
Transfer Phase. In the quantum random oracle model
(QROM), consider an ideal-world simulator St and any cor-
rupted probabilistic polynomial time (PPT) service provider
(i.e., the veriﬁer). Without loss of generality, we consider
only one round of communication between the user and ser-
vice provider (i.e., one set of challenges). The simulator St
generates a public-private key pair (pppkkk(cid:48),ssskkk(cid:48)). Following the
1 ← χerr
encryption protocol, St samples r(cid:48)
0,e(cid:48)
and computes the encryption of a random vector mmm(cid:48) into cccttt(cid:48).
c ← S k
Similarly, it samples a commitment noise vector rrr(cid:48)
β
and commits (r(cid:48)
bdop. Using a random nonce,
the simulator also hashes H(mmm(cid:48)[0]). Without loss of gen-
erality, this can be extended to all components of mmm(cid:48). St
0 ← χenc and e(cid:48)
1) into CCC(cid:48)
0,e(cid:48)
0,e(cid:48)
USENIX Association
30th USENIX Security Symposium    2117
0, e(cid:48)
1, r(cid:48)
0 and rrr(cid:48)
e+2 = y− (y(cid:48)
e+1 using the ZKB++ protocol (with view(cid:48)c
then sends {cccttt(cid:48),CCC(cid:48)
bdop,H(mmm(cid:48)[0])} to the service provider. The
view of the service provider in the real protocol comprises
{cccttt,CCCbdop,H(msg)}. By the semantic security of the underly-
ing encryption scheme [35], the hiding property of the BDOP
commitment scheme (see Lemma A.2), and the indistinguisha-
bility property of the hash function in the QROM, the simu-
lated view is indistinguishable from the real view.
Following the proof of Lemma A.3 in [14], for each iter-
ation of the bound proof with challenge d∈{0,1}, the sim-
ulator St can randomly draw z(cid:48) and rrr(cid:48)
z with small norm and
z)−dCCCbdop (see [14]). The simulator then
set ttt=BDOP(z(cid:48),rrr(cid:48)
commits to ttt in the bound proof protocol. Both ideal and real
distributions are indistinguishable by the hiding property of
the auxiliary commitment.
Following [55], and given a challenge e ∈ {1,2,3}, the
simulator St uses the ZKB++ decomposition function on the
c. It also samples random tapes kkk(cid:48)
inputs: mmm(cid:48), e(cid:48)
e,
kkk(cid:48)
e+1 used in the ZKB++ protocol. Then, St evaluates the arith-
metic circuit according to: If gate c is linear, it deﬁnes view(cid:48)c
e
and view(cid:48)c
e the sim-
ulated state of gate c for player e). If gate c is a multiplication,
it samples uniformly at random view(cid:48)c
e+1 and computes view(cid:48)c
e
using the ZKB++ protocol. Once the state of all the gates for
players e and e + 1 are deﬁned, with respective outputs y(cid:48)
e and
y(cid:48)
e+1, St computes y(cid:48)
e+1). Finally, the simu-
lator returns the ZKB++ proof P(cid:48) generated using the states
of the simulated players, the random tapes kkk(cid:48)
e+1, and
the computed outputs y(cid:48)
e+2. The simulator St
follows a protocol similar to the original ZKB++ protocol.
The only difference is that for a multiplicative gate c, the sim-
ulated view value view(cid:48)c
e+1 is sampled uniformly at random,
whereas the original view value viewc
e+1 is blinded by adding
Ri(c)− Ri+1(c), with Ri(c) and Ri+1(c) the outputs of a uni-
formly random function sampled using the tapes kkke and kkke+1.
Thus, the distribution of viewc
e+1
follows the same distribution in the simulation. Therefore,
the ZKB++ simulator’s output has the same distribution as
the original transcript and the output of the simulator St is
indistinguishable from the valid transcript to a corrupted veri-
ﬁer. Following the ideal functionality of St, the ideal view of
the service provider (i.e., {cccttt(cid:48),CCC(cid:48)
bdop,H(mmm(cid:48)[0]),P(cid:48)}) is indis-
tinguishable from the real view (i.e., {cccttt,CCCbdop,H(msg),P},
with P the real ZKB++ proof). Thus, the ideal and real outputs
are indistinguishable for the corrupted PPT service provider
proving the privacy-property of CRISP’s transfer phase.
Release Phase. We construct a second simulator Sr to prove
that CRISP’s release protocol (Section 4.5) reveals nothing
more than the result ˆm to a curious veriﬁer. A different sim-
ulator is required, as the release phase is independent from
the transfer phase. We consider that Sr knows the blinding
function ahead of time (i.e., it knows (ν,η)) for the real con-
versation leading to the service provider accepting ˆm. Upon
reception of the ﬁrst message {ccctttψ,Bν,η(ccctttψ),C0,ψ(·)} such
that Decssskkk(ccctttψ) = ˆm, Sr creates ˆmB using the blinding param-
e+1 is uniform and view(cid:48)c
e and kkk(cid:48)
e + y(cid:48)
e, y(cid:48)
e+1, and y(cid:48)
eters. The simulator commits to C(cid:48)
1=Com( ˆm, ˆmB), which is
indistinguishable from C1 to the curious veriﬁer according to
the hiding property of the commitment scheme. After receiv-