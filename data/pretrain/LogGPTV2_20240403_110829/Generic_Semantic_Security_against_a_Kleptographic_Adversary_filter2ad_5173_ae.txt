indistinguishable because Encspec is stego-free. The fact that Encspec is stego-free follows from
Corollary 3.4.
Of course, in Game-2 every algorithm used in the game is faithfully implemented; thus the
IND-CPA security of the underlying encryption scheme would hold.
Regarding correctness. As described above, the decryption algorithm for a bit encryption scheme
has a public input distribution. The watchdog can sample random keys and check whether Decimpl
works properly for bit encryption. Following Lemma 2.3, we conclude that: ∀b ∈ {0,1},
Pr[Decimpl(K,Encspec(K, b)) (cid:44) b : K ← KGimpl] ≤ negl(λ),
while for the encryption algorithm, Encimpl can be used interchangeably with Encspec assuming
trusted amalgamation. Thus, ∀b ∈ {0,1},
Pr[Decimpl(Encimpl(K, b)) (cid:44) b : K ← KGimpl] ≤ negl(λ) .
Combining these yields the statement of the theorem.
Subversion resistant symmetric encryption with large message spaces. (Also handling state).
For large message spaces, the security game must be adapted to allow the adversary to query; see
Figure 13 in appendix. A. As mentioned in Section 2, this immediately invites an input-trigger
attack. Speciﬁcally, for a particular query mi (chosen randomly by A during subversion), the
subverted encryption algorithm may directly output the secret key; the same threat exists for
stateful bit encryption, where a particular sequence of encryption bits may act as a trigger. Note
that this simply cannot be detected by a ppt watchdog (making polynomially many samples).
Furthermore, the same attack can be launched on Decimpl to ruin correctness (as Decimpl can output
a diﬀerent value). This suggests the principle that a subverted implementation should never be
given a “naked” input generated by the adversary, e.g., the queried message. (Such an input can act
as a direct trigger when drawn from a large space, or can be remembered by stateful subversions to
eﬀectively simulate a large space.)
However, observe that if the input message can be forced to come from a known distribution
U (e.g., the uniform distribution) the watchdog can check consistency between dEncimpl and
dEncspec on U (we ignore the other inputs here for simplicity, since they are either ﬁxed or from a
public input distribution). Indeed, the watchdog can guarantee that with overwhelming probability
dEncimpl is as good as dEncspec when the input is sampled according to U. In this case, the watchdog
can in fact test the behavior of the algoriothm on a sequence of such inputs from U, which is how we
handle stateful subversion. Now, to defend against an input-trigger attack, we must ensure that the
probability that any particular m causes an inconsistency is negligible. This sort of “worst-case vs.
average-case” relationship arises in the theory of self-correcting programs [Rub91], where one wants
to transform a program with a negligible fraction of bad inputs into a negligible error probability
for every input. With these observations, we return to the large-message space challenge.
Constructions. First, we consider straightforward bit-wise encryption. When encrypting a message
m = m1 . . . m(cid:96) for (cid:96) = |m|, the user generates the ciphertext by calling Encimpl (cid:96) times, yielding
C := (c1, . . . , c(cid:96)), where ci = Encimpl(K, mi). Since the bit encryption scheme we developed above
preserves IND-CPA security; IND-CPA security follows via a simple hybrid argument. (Note,
however, that in this case it is important that the encryption algorithm is stateless.)
21
To develop a more eﬃcient scheme that can further handle long message (also stateful encryp-
tion) we augment the model by permitting the user (i.e., the challenger) to carry out one trusted
addition operation for each encryption/decryption, see Fig. 9. (We continue to assume trusted
amalgamation, as before.) We augment the speciﬁcation of the encryption algorithm with a random
message generator MGspec. Speciﬁcally, the speciﬁcation of the encryption algorithm Encspec has
the form (RGspec,dEncspec,MGspec), where MGspec has the speciﬁcation (MG0
spec), and
RGspec is as before (as in Fig. 4). When encrypting a message m, the user ﬁrst runs MGimpl (the im-
= m⊕ u. The user will call Encimpl
plementation) to sample a random message u, and computes m
(cid:48)
. This includes calls to KGimpl,RGimpl
to encrypt the new message m
(cid:48)
to dEncimpl; see Figure 9. Observe
and passing the corresponding outputs K, r together with m
(cid:48)
is a uniformly chosen message (as the watchdog can ensure that u is safely generated). The
that m
(cid:48)
new ciphertext C now includes u together with the ciphertext c
. For decryption, the user ﬁrst runs
(cid:48) ⊕ u.
Decimpl on c
; then the user computes m = m
and obtains the ciphertext c
spec,MG1
spec, ΦMG
(cid:48)
(cid:48)
(cid:48)
and obtains m
(cid:48)
RG0
spec
RG1
spec
MG0
spec
MG1
spec
r0
r1
u0
u1
r
ΦRG
spec
RGspec
(cid:76)m⊕ u
ΦMG
spec
u
MGspec
m
dEncspec
C
Figure 9: Stego-free encryption speciﬁcation supporting large messages, where K ← KGimpl.
K
Security analysis. The intuition that this simple method works is as follows: First, we generalize
Theorem 4.2 that symmetric-key encryption for random messages are also subversion resistant. To
see this, we analyze the stego-freeness algorithm by algorithm. The key generation is the same as
the bit encryption. The encryption algorithm now takes input a uniform message, together with
the key and security parameter. It means that the encryption algorithm (the deterministic part
dEncspec) now takes inputs from public input distributions, i.e., KGimpl × RGimpl ×UM, where UM is
the uniform distribution over message space M. Following Theorem 3.3, such encryption algorithm
will be stego-free as long as the speciﬁcation is designed as Figure 5. Now for the decryption
algorithm, since the encryption is for uniform messages, thus the decryption algorithm now also
takes a public input distribution. Next, we show the encryption speciﬁcation deﬁned in Figure 9
indeed takes uniform messages as input. (1.) Following Theorem 3.1, the uniform message sampler
MGspec is stego-free. (2.) With the trusted addition operation, when a that Encimpl takes as input
(cid:48)
will be m
would look uniform to
Encimpl (actually the deterministic part dEncimpl). Similar to the analysis of Theorem 4.2, we can
= m⊕ u, where u looks uniform even to the adversary, thus m
(cid:48)
22
show a stronger result that handles the correctness and subversion resistance for symmetric-key
encryption supporting long messages. The full stateful case was handled in detail in remark 3.2.
Theorem 4.3. For any IND-CPA secure symmetric-key encryption, the speciﬁcation described as above is
subversion resistant and correct according to Def. A.3, assuming a trusted ⊕ operation and amalgamation.
4.2 Public key encryption preserving IND-CPA security under subversion
Now we turn to public-key encryption, which follows fairly directly from the previous construction.
The major diﬀerence arises with key generation, as asymmetric key generation has to be treated
with more care than simple randomness generation; see Figure 10, which indicates the construction.
Speciﬁcally, the basic techniques used for symmetric key encryption above can be adapted for
public key encryption. Key generation must be considered as a randomized algorithm producing
structured output (with only security parameter as input). With these tools at hand, we resolve the
major open problem to construct a IND-CPA secure PKE when facing subversions that we asked at
the beginning of the paper. We remark that the assumption of “trusted ⊕” in the theorem below
can be removed if the message space is small.
RG0
impl
RG1
impl
r0
r1
Φimpl
r dKGimpl
(pk, sk)
Figure 10: Stego-free asymmetric key generation.
Corollary 4.4. For any IND-CPA secure public key bit encryption, there exists a speciﬁcation design
such that it is subversion resistant and correct with trust amalgamation. Furthermore, for any IND-CPA
public key encryption (supporting large input space), there exists a speciﬁcation design such that it is
subversion resistant and correct according to Def. A.4, if the user can do a trusted ⊕ and amalgamation.
References
[AMV15] Giuseppe Ateniese, Bernardo Magri, and Daniele Venturi. Subversion-resilient signa-
ture schemes. In Indrajit Ray, Ninghui Li, and Christopher Kruegel:, editors, ACM CCS
15, pages 364–375. ACM Press, October 2015.
[BH15]
Mihir Bellare and Viet Tung Hoang. Resisting randomness subversion: Fast determin-
istic and hedged public-key encryption in the standard model. In Elisabeth Oswald
and Marc Fischlin, editors, EUROCRYPT 2015, Part II, volume 9057 of LNCS, pages
627–656. Springer, Heidelberg, April 2015.
[BJK15] Mihir Bellare, Joseph Jaeger, and Daniel Kane. Mass-surveillance without the state:
Strongly undetectable algorithm-substitution attacks. In Indrajit Ray, Ninghui Li, and
Christopher Kruegel:, editors, ACM CCS 15, pages 1431–1440. ACM Press, October
2015.
23
[Bou05]
Jean Bourgain. More on the sum-product phenomenon in prime ﬁelds and its applica-
tions. International Journal of Number Theory, 1:1–32, 2005.
[BPR14] Mihir Bellare, Kenneth G. Paterson, and Phillip Rogaway. Security of symmetric
encryption against mass surveillance. In Juan A. Garay and Rosario Gennaro, editors,
CRYPTO 2014, Part I, volume 8616 of LNCS, pages 1–19. Springer, Heidelberg, August
2014.
[CG88]
[CZ15]
Benny Chor and Oded Goldreich. Unbiased bits from sources of weak randomness and
probabilistic communication complexity. SIAM J. Comput., 17(2):230–261, 1988.
Eshan Chattopadhyay and David Zuckerman. Explicit two-source extractors and
resilient functionss. Technical report, TR15-119, Electronic Colloquium on Computa-
tional Complexity, 2015.
[DFP15]
Jean Paul Degabriele, Pooya Farshim, and Bertram Poettering. A more cautious approach
to security against mass surveillance. In Gregor Leander, editor, FSE 2015, volume
9054 of LNCS, pages 579–598. Springer, Heidelberg, March 2015.
[DGG+15] Yevgeniy Dodis, Chaya Ganesh, Alexander Golovnev, Ari Juels, and Thomas Ristenpart.
A formal treatment of backdoored pseudorandom generators. In Elisabeth Oswald and
Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 101–126.
Springer, Heidelberg, April 2015.
[DMSD15] Yevgeniy Dodis, Ilya Mironov, and Noah Stephens-Davidowitz. Message transmission
with reverse ﬁrewalls—secure communication on corrupted machines. Cryptology
ePrint Archive, Report 2015/548, 2015. http://eprint.iacr.org/2015/548.
[Doc13]
Docker.Inc. Docker, 2013. https://www.docker.com/.
[HLv02] Nicholas J. Hopper, John Langford, and Luis von Ahn. Provably secure steganography.
In Moti Yung, editor, CRYPTO 2002, volume 2442 of LNCS, pages 77–92. Springer,
Heidelberg, August 2002.
[MS15]
[NZ96]
[Rog15]
Ilya Mironov and Noah Stephens-Davidowitz. Cryptographic reverse ﬁrewalls. In
Elisabeth Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part II, volume 9057
of LNCS, pages 657–686. Springer, Heidelberg, April 2015.
Noam Nisan and David Zuckerman. Randomness is linear in space. Journal of Computer
and System Sciences, 52(1):43–52, 1996.
Phillip Rogaway. The moral character of cryptographic work. Cryptology ePrint
Archive, Report 2015/1162, 2015. http://eprint.iacr.org/2015/1162.
[RTYZ15] Alexander Russell, Qiang Tang, Moti Yung, and Hong-Sheng Zhou. Cliptography:
Clipping the power of kleptographic attacks. Cryptology ePrint Archive, Report
2015/695, 2015. http://eprint.iacr.org/2015/695.
[Rub91]
Ronitt A. Rubinfeld. A Mathematical Theory of Self-checking, Self-testing and Self-
correcting Programs. PhD thesis, University of California at Berkeley, Berkeley, CA, USA,
1991. UMI Order No. GAX91-26752.
24
[Sim83]
[Sim86]
[YY96]
[YY97]
Gustavus J. Simmons. The prisoners’ problem and the subliminal channel. In David
Chaum, editor, CRYPTO’83, pages 51–67. Plenum Press, New York, USA, 1983.
Gustavus J. Simmons. A secure subliminal channel (?). In Hugh C. Williams, editor,
CRYPTO’85, volume 218 of LNCS, pages 33–41. Springer, Heidelberg, August 1986.
Adam Young and Moti Yung. The dark side of “black-box” cryptography, or: Should
we trust capstone? In Neal Koblitz, editor, CRYPTO’96, volume 1109 of LNCS, pages
89–103. Springer, Heidelberg, August 1996.
Adam Young and Moti Yung. Kleptography: Using cryptography against cryptography.
In Walter Fumy, editor, EUROCRYPT’97, volume 1233 of LNCS, pages 62–74. Springer,
Heidelberg, May 1997.
25
A Omitted Deﬁnitions
A.1 Stego-free randomness generation.
One of the most fundamental components of a randomized algorithm is the randomness generation.
In particular, the devastating attacks using subliminal channels are exploring the subverted
randomness generation. Moreover, if we have clean randomness, many tasks (including the CPA-
secure public key encryption) which are previously considered impossible may become reachable.
Formally,
spec,RG1
Deﬁnition A.1. For any randomness generation algorithm RG, consider a speciﬁcation RGspec :=
(RG0
spec, Φspec). We say such speciﬁcation RGspec is stego-free with a trusted amalgamation in
the oﬄine watchdog model, if there exists an oﬄine ppt watchdog W, for any ppt adversary A playing
the following game (see Figure 11) with challenger C, such that, at least one of the following conditions
hold:
(cid:12)(cid:12)(cid:12)Pr[bC = 1]− 1
2
DetW,A is non-negligible, or, AdvA is negligible,
(cid:12)(cid:12)(cid:12), and DetW,A(1λ) =
(cid:12)(cid:12)(cid:12)Pr[W RGimpl(1λ) = 1]− Pr[W RGspec(1λ) = 1]
(cid:12)(cid:12)(cid:12) ,
where AdvA(1λ) =
test phase
W