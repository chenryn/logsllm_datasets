thrashing rate. The synchronization is able to keep up with
the high thrashing rate for two main reasons: ﬁrst, on each
synchronization, it is generally able to clear something out of
the buffer; and second, some writes occur on the same ﬁles
and on small ﬁles (as would be the case in a real ﬁle system),
which allows these writes to occur on cached copies in the
buffer and the smaller ﬁles to packed together efﬁciently into
blocks, even partially full ones.
At a ﬁll rate of 75%, however,
there is a noticeable
performance degradation. Because most of the blocks selected
at each epoch are either full or do not have enough space, due
Fig. 7.
Buffer size under realistic ﬁle distributions. The experiment was
performed with parameters N = 1024, B = 1MB, k = 3. The point (x, y)
means for y fraction of observed execution time, the size of the buffer was
greater than x. For example, when the backend is ﬁlled with 20% (the solid
line with 20% full), only for 0.2 fraction of the entire execution time, the
buffer size is roughly greater than 218 bytes. In addition, the buffer size is
always larger than 215.
to fragmentation, the buffer cannot always be cleared at a rate
sufﬁcient to keep up with incoming writes. Thus, the size of
the buffer doubles in comparison with the other workloads.
E. Measurements on Dropbox
Here, we measure the performance of ObliviSync on a real
cloud synchronization service, namely Dropbox.
We performed both a latency and throughput measurement,
just as before, using 1MB backend ﬁles, but this time the
backend directory was stored within a Dropbox synchronized
folder with measurements taken across two computers on our
institution’s network that had access to the synchronized folder.
In these experiments, we used a drip rate of k = 3 and
a drip time t = 10 seconds. We experimented with lower
drip times, but found that due to rate limiting of the Dropbox
daemon on the synchronized folders, a longer drip time is
required in order to to ensure that we do not blow through
the epoch boundary.
In both the latency and throughout experiments described
below, we established a dropbox connection on two com-
puters on our institution’s network. We designated one com-
puter as the writer and one the reader. On the writer,
it
ran ObliviSync-RW and ObliviSync-RO, on a shared
backend folder stored within the Dropbox synchronization
folder. The writer computer measured the amount of time
it took for the ObliviSync-RW to synchronize to the local
ObliviSync-RO mount. Meanwhile, the reader computer ran a
ObliviSync-RO mount only and monitored the ﬁle systems for
the appearance of synchronized ﬁles. The difference between
the ObliviSync-RO mount on the write computer and the
ObliviSync-RO mount on the read computer is the propagation
delay imposed by Dropbox. Additionally, as we do not have
insight into how the Dropbox daemon chooses to synchronize,
it is also possible that other factors are coming into play, such
as taking incremental snapshots of deleted ﬁles.
Baseline: EncFS. Additionally, we wish to provide a base-
line comparison of the overhead of ObliviSync, and so we
performed similar experiments using EncFS [13] as the data
13
Fig. 8. Throughput of writing 0.25GB of 1MB ﬁles all at once for ObliviSync
and EncFS on Dropbox synchronized backend between two machines running
on the same network. We used a drip time of 10 seconds for ObliviSync
(t = 10) and a drip rate of 3 (k = 3) for a conservative estimate.
Fig. 9.
Latency of writing 1MB ﬁles one at a time for ObliviSync and
EncFS on Dropbox synchronized backend between two machines running on
the same network. We used a drip time of 10 seconds for ObliviSync (t = 10)
and a drip rate of 3 (k = 3) for a conservative estimate. The variations in the
trend lines are likely due to jigger in the network.
protection mechanism. Much like ObliviSync, EncFS using a
FUSE mount to display an encrypted ﬁle system that is stored
in a backend folder, but EncFS provides no oblivious protec-
tion. Instead ﬁles are simply stored individually encrypted, so
the total number of ﬁles is revealed as well as their sizes and
full access patterns.
Throughput over Dropbox. The throughput measurement
occurred much like as described earlier in the section. For
both EncFS and ObliviSync, we inserted a large number of
ﬁles, namely 20% full or ∼200MB, and then we measured
how long it takes for the buffer to clear and all ﬁles to become
available. Like before, we used a read and write computer, and
we measured the difference in the local and remote propagation
delays of ﬁle synchronization. The primary result is presented
in Figure 8.
For EncFS on the write computer, the propogation delay
for all the ﬁles is nominal with ﬁles appearing nearly imme-
diately. On the read computer, there is a propagation delay
associated with Dropbox remote synchronization, and all ﬁles
are accessible within 100 seconds. For ObliviSync on the write
computer, we see a very similar throughput trend-line as in the
prior experiments. In total, it takes just under 800 seconds (or
80 epochs) for all the ﬁles to synchronize. Interestingly, on the
read computer, the propagation delay is relatively small, with
respect to the overall delay, and ﬁles are accessible within
an additional epoch or two. In total,
these results clearly
demonstrate that ObliviSync is functional and efﬁcient to use
over cloud synchronization services like Dropbox.
Latency over Dropbox. Figure 9 shows the primary result
of running ObliviSync and EncFS using Dropbox as the cloud
synchronization service. The EncFS write line is nearly 0 (s)
as immediately upon writing the ﬁle it becomes available to
write computer. However on the read computer, it takes a
little under 5 seconds for the synchronization with Dropbox to
complete for the same ﬁle to be accessible. This measurement
forms a baseline of performance for the rate of DropBox
synchronization without ObliviSync.
For ObliviSync, on the write computer, we see an expected
performance metric of just under 10 seconds for each ﬁle to
be visible to the read mount. The reason it is under 10 seconds
and not exactly 10 seconds, as the setting of the drip time, is
that a write occurring between epoch timers will take less than
an epoch to sync. The propagation rate to the read computer
takes a similar time as that of EncFS (∼ 5 seconds); however,
there is higher variance as more ﬁles need to be transferred
by the Dropbox service per epoch (namely 4 = k + 1 with the
superblock). Still, this added variance is within 3x in terms of
epochs: it takes at most 30 seconds for a ﬁle to sync (or 3
epochs of waiting), which is very reasonable considering the
built-in overhead of the system.
VII. RELATED WORK
ORAM. ORAM protects the access pattern from an observer
such that it is impossible to determine which operation is
occurring, and on which item. The seminal work on the topic
is by Goldreich and Ostrovsky [15], and since then, many
works have focused on improving efﬁciency of ORAM in
both the space, time, and communication cost complexities
(for example [22], [18], [23], [17], [19] just to name a few;
see the references therein). Blass et al. introduced write-only
ORAMs [8]. In a write-only ORAM, any two write accesses
are indistinguishable, and they achieved a write-only ORAM
with optimal O(1) communication complexity and only poly-
logarithmic user memory. Based on their work, we construct
a write-only ORAM that additionally supports variable-size
data and hides the when the data items are modiﬁed. We point
out also that variable-sized blocks in traditional read/write
ORAMs were also considered recently by [21], but with higher
overhead than what can be achieved in the write-only setting.
Protecting against timing side-channels. Side-channel at-
tacks that use network trafﬁc analysis in order to learn private
information have been considered in contexts other than secure
cloud storage. Proposed systems for location tracking [20] and
system logging [9] use buffering and random or structured
delays to protect against such attacks in a similar way to our
work.
Personal cloud storage. A personal cloud storage offers
automatic backup, ﬁle synchronization, sharing and remote
accessibility across a multitude of devices and operating sys-
tems. Among the popular personal cloud storages are Dropbox,
Google Drive, Box, and One Drive. However, privacy of cloud
data is a growing concern, and to address this issue, many
14
personal cloud services with better privacy appeared. Among
the notable services are SpiderOak [5], Tresorit [6], Viivo [7],
BoxCryptor [1], Sookas [4], PanBox [3], and OmniShare [24].
All the solutions achieve better privacy by encrypting the ﬁle
data using encryption keys created by the client. We stress
that however there has been no attempt to achieve the stronger
privacy guarantee of obliviousness.
VIII. CONCLUSION
In this paper, we report our design, implementation, and
evaluation of ObliviSync, which provides oblivious synchro-
nization and backup for the cloud environment. Based on the
key observation that for many cloud backup systems, such as
Dropbox, only the writes to ﬁles are revealed to cloud provider
while reads occur locally, we built upon write-only ORAM
principles such that we can perform oblivious synchronization
and backup while also incorporating protection against timing
channel attacks. When the drip-rate and drip time parameters
are set properly according to the usage pattern, this overhead
is just 4x both in theory and in practice.
We also consider practicality and usability. ObliviSync is
designed to seamlessly integrate with existing cloud services,
by storing encrypted blocks in a normal directory as its
backend. The backend can then be stored within any cloud
based synchronization folder, such as a user’s Dropbox folder.
To be stored within the backend encrypted blocks, we designed
a specialized block-based ﬁle system that can handle variable
size ﬁles. The ﬁle system is presented to the user in a
natural way via a frontend FUSE mount such that the user-
facing interface is simply a folder, similar to other cloud
synchronization services. Any modiﬁcations in the frontend
FUSE mount are transparently and automatically synchronized
to the backend without leaking anything about the actual writes
that have occurred.
In evaluating our system, we can prove that the perfor-
mance guarantees hold when 25% of the capacity of the
backend is used, and our experimental results ﬁnd that, with
realistic workloads, much higher capacities can in fact be toler-
ated while maintaining very reasonable efﬁciency. Importantly,
ObliviSync can be tuned to the desired application based on
modifying the drip rate and drip time to meet the application’s
latency and throughput needs.
Although ObliviSync works well in practice already, there
are still interesting and difﬁcult open problems in this domain.
While we have optimized the efﬁciency for the client, cloud
service providers may be hesitant to encourage systems such
as ObliviSync because they will eliminate the possibility of
deduplication between users, where common ﬁles are stored
only once by the service provider. Furthermore, as our system
only allows one ObliviSync-RW client at any given time, an
important use-case of collaborative editing is not permitted
here. It may be necessary to overcome challenges such as these
in order to bring oblivious cloud storage into mainstream use.
Acknowledgments: This work was supported in part in part by
ONR awards N0001416WX01489 and N0001416WX01645,
and NSF award #1618269, #1406177, and #1319994. We
would also like to thank Blair Mason for his early contribution.
[1] Boxcrpytor. https://www.boxcryptor.com/en.
REFERENCES
fusepy. https://github.com/terencehonles/fusepy.
[2]
[3] Panbox. http://www.sirrix.de/content/pages/Panbox.htm.
[4] Sookasa. https://www.sookasa.com/.
[5] Spideroak. https://spideroak.com/.
[6] Tresorit. https://www.tresorit.com/.
[7] Viivo. https://www.viivo.com/.
[8] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarli-
oglu. Toward robust hidden volumes using write-only oblivious RAM.
In Gail-Joon Ahn, Moti Yung, and Ninghui Li, editors, ACM CCS 14,
pages 203–214. ACM Press, November 2014.
[9] Kevin D. Bowers, Catherine Hart, Ari Juels, and Nikos Triandopoulos.
PillarBox: Combating next-generation malware with fast forward-secure
the 17th International Symposium on
logging.
Research in Attacks, Intrusions and Defenses: (RAID 2014), pages 46–
67, Gothenburg, Sweden, 2014.
In Proceedings of
[10] A. B. Downey. The structural cause of ﬁle size distributions. In Mod-
eling, Analysis and Simulation of Computer and Telecommunication
Systems, 2001. Proceedings. Ninth International Symposium on, pages
361–370, 2001.
Idilio Drago, Marco Mellia, Maurizio M. Munafo, Anna Sperotto,
Ramin Sadre, and Aiko Pras. Inside Dropbox: Understanding personal
cloud storage services. In Proceedings of the 2012 ACM Conference
on Internet Measurement Conference, IMC ’12, pages 481–494, New
York, NY, USA, 2012. ACM.
[11]
[12] Dropbox,
Inc.
Celebrating
half
a
billion
users,
2016.
https://blogs.dropbox.com/dropbox/2016/03/500-million/.
[13] EncFS. https://vgough.github.io/encfs/.
[14] ObliviSync github repository. https://github.com/oblivisync/oblivisync.
[15] Oded Goldreich and Rafail Ostrovsky. Software protection and simu-
lation on oblivious RAMs. J. ACM, 43(3):431–473, 1996.
[16] Wassily Hoeffding.
Probability inequalities for sums of bounded
random variables. J. Amer. Statist. Assoc., 58:13–30, 1963.
Jonathan L. Dautrich Jr., Emil Stefanov, and Elaine Shi. Burst ORAM:
minimizing ORAM response times for bursty access patterns.
In
Proceedings of the 23rd USENIX Security Symposium, pages 749–764,
2014.
[17]
[18] Eyal Kushilevitz, Steve Lu, and Rafail Ostrovsky. On the (in)security
In Pro-
of hash-based oblivious RAM and a new balancing scheme.
ceedings of the twenty-third annual ACM-SIAM symposium on Discrete
Algorithms, pages 143–156. SIAM, 2012.
[19] Tarik Moataz, Travis Mayberry, and Erik-Oliver Blass. Constant
communication ORAM with small blocksize. In ACM CCS 15, pages
862–873. ACM Press, 2015.
[20] Thomas Ristenpart, Gabriel Maganis, Arvind Krishnamurthy, and Ta-
dayoshi Kohno. Privacy-preserving location tracking of lost or stolen
devices: Cryptographic techniques and replacing trusted third parties
with DHTs. In Proceedings of the 17th USENIX Security Symposium
(SECURITY 2008), pages 275–290, Berkeley, CA, USA, 2008.
[21] Daniel S. Roche, Adam J. Aviv, and Seung Geol Choi. A practical
oblivious map data structure with secure deletion and history indepen-
dence. In 2016 IEEE Symposium on Security and Privacy, May 2016.
[22] Elaine Shi, T.-H. Hubert Chan, Emil Stefanov, and Mingfei Li. Obliv-
ious RAM with o((log n)3) worst-case cost. In Dong Hoon Lee and
Xiaoyun Wang, editors, ASIACRYPT 2011, volume 7073 of LNCS,
pages 197–214. Springer, December 2011.
[23] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W. Fletcher,
Path ORAM: an
Ling Ren, Xiangyao Yu, and Srinivas Devadas.
extremely simple oblivious RAM protocol.
In Ahmad-Reza Sadeghi,
Virgil D. Gligor, and Moti Yung, editors, ACM CCS 13, pages 299–310.
ACM Press, November 2013.
[24] Sandeep Tamrakar, Long Nguyen Hoang, Praveen Kumar Pendyala,
Andrew Paverd, N. Asokan, and Ahmad-Reza Sadeghi. OmniShare:
Securely accessing encrypted cloud storage from multiple authorized
devices. CoRR, abs/1511.02119, 2015.
[25] Andrew S. Tanenbaum, Jorrit N. Herder, and Herbert Bos. File size
distribution on UNIX systems: Then and now. SIGOPS Oper. Syst.
Rev., 40(1):100–104, January 2006.
15