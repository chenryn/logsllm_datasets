Table 3: Classiﬁcation of claimed issuer, ordered
by percentage proxied
poses as a legitimate enterprise, however they produce
software that compromises the DNS lookup of infected
machines, allowing them to redirect users to improper
hosts. A TLS proxy component is used to bypass host
authenticity warnings in the browser. The substitute
certiﬁcates generated by the TLS proxy are signed by
a root authority that was added to the root store of
the local machine at the time of infection. Substitute
certiﬁcates issued by Sendori originated from 30 distinct
countries.
The WebMakerPlus malware is primarily associated
with inserting advertisements into Web pages. We hy-
pothesize that WebMakerPlus uses a TLS proxy to sim-
ulate that their advertisements are served from a secure
connection and to modify secure pages in transit to in-
clude such content. Substitute certiﬁcates containing
markings for WebMakerPlus originated from 16 distinct
countries.
Manual Internet queries revealed that malware was
responsible for an Issuer Common Name ﬁeld value of
“IopFailZeroAccessCreate.” The certiﬁcates containing
this value originated from 14 distinct countries. Dis-
turbingly, each certiﬁcate contained the same 512-bit
public key. This malware was also reported by [9].
It is somewhat surprising that these malware programs
self-identify in the substitute certiﬁcates they generate,
as an attacker can arbitrarily select values for the ﬁelds
in a substitute certiﬁcate.
In addition to malware discoveries, we found that the
names of two companies highly associated with spam
were also present in numerous Issuer Organization ﬁelds.
The names “Sweesh LTD”, and “AtomPark Software
Inc” were found in 39 and 20 substitute certiﬁcates,
respectively. AtomPark oﬀers tools for spammers in-
cluding “email extractors” and “bulk mailers”. Sweesh
oﬀers services to spammers to overcome “hurdles” faced
by advertisers and publishers. Internet searches reveal
that Sweesh may be responsible for the development of
WebMakerPlus.
Not all of the root certiﬁcates found in the collected
substitute chains were unique. In the 11,764 substitute
chains 8,341 distinct roots were found. For example,
310 leaf certiﬁcates signed by “Fortinet” all used the
same root certiﬁcate, and these were obtained from
155 distinct IP addresses. This behavior was consis-
tent across many of the popular issuers identiﬁed (e.g.,
POSCO, Southern Company Services, Target Corpora-
tion). These organizations are likely using a single root
to sign intermediate certiﬁcates and then deploying these
at various endpoints where they operate TLS proxies.
5.2 Negligent Behavior
Where possible, we installed and characterized per-
sonal ﬁrewall software from many of the most common
companies whose names were provided in the Issuer
Organization, Issuer Organizational Unit, and Issuer
Common Name ﬁelds of our collected certiﬁcates. We
characterized the behavior of these solutions when run-
ning behind our own TLS proxy (setup using sslsplit and
ARP poisoning) which issued certiﬁcates signed by an
untrusted CA. While most solutions properly rejected
our forged certiﬁcates, Kurupira, a parental ﬁlter that is
responsible for 267 proxied connections in our dataset,
did not. When visiting google.com and gmail.com, Ku-
rupira replaced our untrusted certiﬁcate with a signed
trusted one, thus allowing attackers to perform a trans-
parent man-in-the-middle attack against Kurupira users
without having to compromise root stores. In contrast,
BitDefender not only blocked this forged certiﬁcate, but
also blocked a forged certiﬁcate that resolved to a new
root we installed.
We found TLS proxies that generate substitute cer-
tiﬁcates with weak cryptographic strength. Our original
certiﬁcate has a public key size of 2048 bits. However, we
found that 5,951 (50.59%) substitute certiﬁcates have
public key sizes of 1024 bits and 21 certiﬁcates have
public key sizes of 512 bits. In addition, 23 (0.20%) TLS
proxies generated substitute certiﬁcates that used MD5
for signing, 21 (0.18%) which were also 512 bit keys. In-
terestingly, some TLS proxies generated certiﬁcates that
have better cryptographic strength than our certiﬁcate.
Seven (0.06%) used certiﬁcates with a key size of 2432
and ﬁve (0.04%) used SHA-256 for signing.
In addition to problems with cryptographic strength,
we discovered that 49 (0.42%) substitute certiﬁcates
claim to be signed by DigiCert, though none of them
actually are. The original certiﬁcate from our secure
web server is issued by DigiCert High Assurance CA-3,
indicating the TLS proxy likely copied this ﬁeld when
creating the substitute. It is alarming that a TLS proxy
would opt to copy this ﬁeld, as it signiﬁes a masquerading
as the legitimate authority.
It is possible that these
proxies are operated by malicious individuals doing their
best to not be detected by the user.
Finally, we note that 110 substitute certiﬁcates have
modiﬁcations to the subject ﬁeld. For 51 (0.43%) certiﬁ-
cates, the subject did not match our website’s domain.
In many cases a wildcarded IP address was used that
only designated the subnet of our website. In two cases
the substitute certiﬁcate is issued to the wrong domain
entirely: mail.google.com and urs.microsoft.com.
These certiﬁcates appear to be legitimate for those do-
mains and properly validate back to GeoTrust and Cy-
bertrust roots, respectively.
6. RELATED WORK
The most closely related work in this ﬁeld is a recent
paper by Huang et al., which independently develops a
measurement tool that is similar to ours and conducts
a measurement study of TLS proxies that intercept the
Facebook website [9]. Generally speaking, the advantage
of Huang’s methodology is that they may ﬁnd proxies
speciﬁcally targeting Facebook, whereas the advantage
of our methodology is that we may detect proxies that
intentionally whitelist a popular sites such as Facebook
in order to avoid detection. A limitation of our method is
that we cannot collect data from users with ad blockers.
Thus results from Huang must be read with the postﬁx
of “for facebook.com users,” and results from our study
must be read with the postﬁx of “for Internet users
permitting ads.”
In comparing our results to Huang, there are both
similarities and diﬀerences. When inspecting the Issuer
Field of substitute certiﬁcates, 13 of the 20, and 8 of
the top 10 issuers also appear in Huang’s measurements.
Some of the bad actors we ﬁnd (Sendori and IopFailZe-
roAccessCreate) were also found by Huang, in addition
to some of the behavior by Kurupira. However, there
are also some major diﬀerences between the results in
these studies. The prevalence of proxies in our study
is roughly twice what was measured by Huang (0.41%
versus 0.20%). In addition, we ﬁnd a wider array of
malware, deceptive practices, and suspicious circum-
stances. Our measurements of WebMakerPlus represent
malware found only in our study. Likewise, the presence
of infections from Sweesh and AtomPark are unique to
our study. We are the ﬁrst to identify a parental ﬁlter
replacing an untrusted certiﬁcate with a trusted one.
We note that there are also some diﬀerences between
the characteristics of the substitute certiﬁcates detected
in our study and Huang. For instance, we ﬁnd that chain
depths of two or more certiﬁcates are more common.
Chains with a depth of two or more certiﬁcates accounted
for 20% of our substitute chains and 9% of Huang’s.
Note that the legitimate chains in both studies had
a chain depth of two.
In addition, 68 of our proxy
results contained a chain depth of 5, compared to only 2
reported by Huang. Due to these depth diﬀerences, we
also found more certiﬁcate chain sizes larger than 1000
bytes (20% vs 9%). We also see diﬀerences in the public
key sizes of substitute certiﬁcates when comparing our
results to those of Huang. In particular, we ﬁnd less
certiﬁcates using 512-bit key lengths (us: 21, Huang:
119) and the presence of keys larger than 2048 (us: 7,
Huang: 0).
The only other paper to ﬁnd evidence of TLS proxies
is the work from The Netalyzer project, which analyzes
the root store of Android devices [22]. Their primary
ﬁndings include the use of manufacturer and vendor-
speciﬁc certiﬁcates, the presence of unusual root certs,
and third party apps that manipulate the root store.
In addition, they ﬁnd one case of a TLS proxy, out of
15,000 assessed TLS sessions. It is diﬃcult to compare
the prevalence (1 in 15K) to rates found by Huang and
this paper because the sample is from users choosing to
download the Netalyzer App.
A large body of work seeks to detect and prevent
TLS proxies, generally regarding them as MitM attacks.
Clark and van Oorschot [4] provide an extensive survey
of this area, covering solutions that work with the CA
system such as pinning [8], TACK [16], and Certiﬁcate
Transparency [12, 21], as well as those that seek to vali-
date self-signed certiﬁcates such as Convergence [15]. A
lesser-known group of solutions acknowledges that there
is an industry need for TLS inspection and some IETF
drafts suggest notifying users when a proxy is present
[18, 14] or even sharing session keys with proxies explic-
itly [19]. Our recent work surveying users indicates a
strong pragmatic approach to TLS inspection, with will-
ingness to allow this technique by employers, provided
notiﬁcation and consent is obtained [20].
7. CONCLUSION
Our work highlights the need for stronger protection
and monitoring of the root store used by devices and
browsers. The only way for TLS proxies to avoid a
browser warning is if they generate substitute certiﬁcates
that are valid; both benevolent and malicious parties
need to insert a certiﬁcate into the root store. Modifying
the root store should require administrative privileges,
and monitoring software should be used to remove cer-
tiﬁcates from the store that are considered malicious or
that are run by untrustworthy organizations.
In addition, better measurement tools are needed to
understand the prevalence and nature of SSL proxies.
The method used by Huang is still viable, but only
works to detect proxies aﬀecting a single server. Our
measurements indicate that this undercounts proxies
when that server is well-known, and yet measuring at
well-known servers is the only way to get large amounts
of data with this method. Using a Flash advertisement
provides a more scalable and robust method for detecting
proxies, but this does not work for mobile platforms
that do no support Flash. Moreover, we have found that
most advertising networks no longer allow these types
of advertisements. In the future, a community-driven,
voluntary measurement platform would signiﬁcantly help
to collect these types of measurements.
8. ACKNOWLEDGMENTS
This work is supported by a 2014 Google Faculty
Research Award.
9. REFERENCES
[1] H. Adkins. An update on attempted
man-in-the-middle attacks.
http://googleonlinesecurity.blogspot.com/2011/
08/update-on-attempted-man-in-middle.html.
[8] C. Evans and C. Palmer. Certiﬁcate pinning
extension for HSTS. http://tools.ietf.org/html/
draft-evans-palmer-hsts-pinning-00. Accessed: 22
March, 2013.
[9] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson.
Analyzing forged ssl certiﬁcates in the wild. In
2014 IEEE Symposium on Security and Privacy,
pages 83–97. IEEE, 2014.
[10] G. Huston. Counting DNSSEC. https:
//labs.ripe.net/Members/gih/counting-dnssec.
Accessed: 26 February, 2014.
[11] C. Jackson, A. Barth, A. Bortz, W. Shao, and
D. Boneh. Protecting browsers from DNS
rebinding attacks. ACM Transactions on the Web
(TWEB), 3(1):2, 2009.
[12] B. Laurie, A. Langley, and E. Kasper. Certiﬁcate
transparency, IETF RFC 6962.
http://tools.ietf.org/html/rfc6962, Jun 2013.
[13] W. Lian, E. Rescorla, H. Shacham, and S. Savage.
Measuring the practical impact of DNSSEC
deployment. In Proceedings of USENIX Security,
2013.
[14] S. Loreto, J. Mattsson, R. Skog, H. Spaak, G. Gus,
and M. Hafeez. Explicit trusted proxy in
HTTP/2.0, Internet Draft. http://tools.ietf.org/
html/draft-loreto-httpbis-trusted-proxy20-01,
February 2014.
[15] M. Marlinspike. SSL and the future of authenticity.
Black Hat USA, 2011.
[16] M. Marlinspike and T. Perrin. Trust assertions for
[2] A. Barth, C. Jackson, and J. C. Mitchell. Robust
certiﬁcate keys. http://tack.io/, 2013.
defenses for cross-site request forgery. In
Proceedings of the 15th ACM Conference on
Computer and Communications Security, pages
75–88. ACM, 2008.
[3] T. Chiu. The growing need for SSL inspection.
http:
//www.bluecoat.com/security/security-archive/
2012-06-18/growing-need-ssl-inspection/, 2011.
Accessed: 27 February , 2014.
[4] J. Clark and P. C. van Oorschot. SoK: SSL and
HTTPS: Revisiting past challenges and evaluating
certiﬁcate trust model enhancements. In IEEE
Symposium on Security and Privacy (SP), pages
511–525. IEEE, 2013.
[5] X. d. C. de Carnavalet and M. Mannan. Killed by
proxy: Analyzing client-end tls interception
software. In Network and Distributed System
Security Symposium (NDSS), 2016.
[6] Z. Durumeric, J. Kasten, M. Bailey, and J. A.
Halderman. Analysis of the HTTPS certiﬁcate
ecosystem. In Internet Measurement Conference,
2013.
[7] P. Eckersley. A syrian man-in-the-middle attack
against facebook. https://www.eﬀ.org/deeplinks/
2011/05/syrian-man-middle-against-facebook, May
2011.
[17] MaxMind. Geolite. http://dev.maxmind.com/
geoip/legacy/geolite/#IP Geolocation. Accessed:
27 February, 2014.
[18] D. McGrew, D. Wing, Y. Nir, and P. Gladstone.
TLS proxy server extension, Internet-Draft, TLS
Working Group. http://tools.ietf.org/html/
draft-mcgrew-tls-proxy-server-01, July 2012.
[19] Y. Nir. A method for sharing record protocol keys
with a middlebox in TLS, Internet-Draft, TLS
Working Group. http:
//tools.ietf.org/html/draft-nir-tls-keyshare-02,
March 2012.
[20] S. Ruoti, M. O’Neill, D. Zappala, and K. Seamons.
User attitudes toward the inspection of encrypted
traﬃc. In Twelfth Symposium on Usable Privacy
and Security (SOUPS), 2016.
[21] M. D. Ryan. Enhanced certiﬁcate transparency
and end-to-end encrypted mail. In Network and
Distributed System Security Symposium (NDSS).
Internet Society, 2014.
[22] N. Vallina-Rodriguez, J. Amann, C. Kreibich,
N. Weaver, and V. Paxson. A tangled mass: The
android root certiﬁcate stores. In Proceedings of the
10th ACM CONEXT, pages 141–148. ACM, 2014.