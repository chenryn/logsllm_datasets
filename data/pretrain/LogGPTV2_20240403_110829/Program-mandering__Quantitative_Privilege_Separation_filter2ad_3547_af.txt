and useradd) required no changes. For these four programs, we
used PM iteratively to find one partition for each program and
tested runtime overhead. We show the results in Table 7. Note that
these programs are small, which excluded us from finding multiple
interesting partitions.
8.6 Vulnerabilities mitigated by partitioning
The security metrics in PM are quantitative information flow and
sensitive code percentage. There are many benefits of using these
metrics. Another possible security metric is the amount of past
known vulnerabilities (e.g., used in [9]) that can be mitigated. We
have argued against incorporating it into PM since it does not
consider unknown vulnerabilities. On the other hand, if a partition
can mitigate most of the past known vulnerabilities, it provides
some evidence about the partition’s security strength. Therefore,
we searched for all vulnerabilities in the National Vulnerability
Database (https://nvd.nist.gov/vuln) for the versions of software we
used in evaluation. We excluded those Linux shadow-utils programs
as their vulnerability dataset is too small to draw any meaningful
conclusion. Table 6 lists all CVEs for the versions of programs we
used, and whether a CVE can be mitigated by a partition produced
by PM.
thttpd
2.25
wget
1.18
telnet
1.9.4
CVE-2013-0348
CVE-2009-4491
CVE-2006-4248
CVE-2018-0494
CVE-2017-6508
CVE-2017-13090
CVE-2017-13089
CVE-2005-0468
CVE-2005-0469
Exploit-DB-459825
CVEs from 2016 to 20186
Mitigated by
1 2 3
1 2 3
1 2 3
2 4
4
2 3 4
2 4
1 2 3
1 2 3
1 2 3
2
nginx
Table 6: Mitigated vulnerabilities by different partitions.
1.9.5
collected the runtime overhead of partitioned authentication over
unpartitioned authentication. Note that the overheads shown in
the table are only for authentication; the partition does not incur
overhead for common operations of nginx, such as serving web
pages.
In 2 , the password file is
Assessing security and performance.
only accessible to the sensitive domain. The only one bit of leakage
is the authentication response. As for the possible leakage through
the file system, the sensitive domain may write to log files; however,
the insensitive domain does not read from the log files. PtrSplit
does not partition nginx; therefore, we did not compare with it.
8.5 Evaluation with Linux shadow-utils
We also experimented on a set of programs from the Linux shadow-
utils package. There are over 30 small programs in this package.
Many of them do not access security-sensitive information; for
example, program "groups" just prints a user’s group information.
Some of the programs are difficult to set up and experiment with;
for example, "login" starts a login session. So we excluded those.
For the remaining programs, we performed partitioning with PM.
During the process, we realized that there were potential flows from
5multiple overflows https://www.exploit-db.com/exploits/45982
6including CVE-2018-16845, CVE-2018-16844, CVE-2018-16843, CVE-2017-7529, CVE-
2016-0747, CVE-2016-0746,CVE-2016-0742, and CVE-2016-4450.
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1035thttpd and nginx are about preserving confidentiality. According
to our attack model, we consider a vulnerability mitigated by a
partition if it resides in the insensitive (low-secrecy) domain of the
partition. For any of the three partitions of thttpd, all CVEs we found
can be mitigated since the CVEs reside in the insensitive domain.
Therefore, even if an attacker can successfully hijack the insensitive
domain, she cannot steal passwords in the authentication file using
the vulnerabilities. For nginx version 1.9.5, there are 8 CVEs in
total. We inspected these CVEs and none of them resides in the
authentication module, which means our partition 2 can mitigate
all these vulnerabilities.
wget and telnet are about protecting integrity. According to our
attack model, we consider a vulnerability mitigated by a partition
if it resides in the sensitive (low-integrity) domain of the partition.
Table 6 shows that the best partition PM found for wget ( 2 ) can
mitigate three out of four CVE vulnerabilities; the best partition for
telnet( 2 ) can mitigate all three vulnerabilities
9 DISCUSSION AND FUTURE WORK
We discuss limitations of PM, some of which were discovered during
evaluation, and how it can be extended to address them. First, simi-
lar to other tools, PM performs partitioning at the level of functions.
As discussed before, partitioning a program at a granularity finer
than functions, such as basic blocks or instructions, is sometimes
necessary to produce good partitions. This issue is exacerbated by
the lack of bidirectional RPC support, as demonstrated by telnet
and some of the shadow-utils programs. When a top-level function
f in the call graph (e.g., main) accesses sensitive data, all func-
tions f invokes transitively have to stay in the sensitive partition,
implying a large sensitive domain. This issue can be resolved by
either providing bidirection RPC or splitting f (as demonstrated by
shadow-utils programs). Implementing finer-grained partitioning
would pose no theoretical difficulty, but introduce engineering and
practical challenges in terms of collecting measurements at a finer
granularity and implementing partitions.
Second, currently PM partitions a program into two domains
according to a security lattice of two points. We plan to extend it
to support more complex lattices that can result in more than two
domains (e.g., mixing confidentiality and integrity), such as what
Swift [6] does. This introduces the complication of allowing further
code duplication at different security levels.
Third, PM’s optimization framework currently supports only one
optimization metric. A natural alternative to having four metrics
would be to weight each of them so that we can optimize a single
linear function of all four metrics in one step. We will need to
further study methods to produce weights for this alternative and
the effectiveness of those methods.
Fourth, PM is a framework that automatically produces informa-
tion about how to partition a program, but does not offer complete
automation in implementing a partition. Given information about a
partition, a user needs to manually split files and adjust compilation
scripts. This can be labor intensive, which was the major reason
why we tested only a few partitions for programs during evalu-
ation. Automating these steps is feasible, but requires additional
engineering effort.
Fifth, PM’s implementation relies on dynamic analysis for mea-
suring information flow and context-switch frequency. On the one
hand, dynamic analysis is the only known technique for measuring
information flow rates in realistic programs. Most past studies on
using static analysis to measure information flow (see [24] for a re-
cent survey) have been theoretical and not produced practical tools.
For instance, Clark et al. [7] described a static analysis that over-
approximates quantitative information flow in programs. However,
it is on an idealized language that does not support function calls,
memory allocation/deallocation, and many other features. On the
other hand, dynamic analysis applies to particular runs and requires
a set of test cases. Designing test cases with good coverage is diffi-
cult; this issue can be mitigated to a certain degree by deriving test
cases based on typical use cases and techniques such as fuzzing.
Finally, by generating the optimal partition, PM automatically
computes where data should be declassified. This enables automatic
computation of declassification points for patterns such as authen-
tication, which compress sensitive information. However, it does
not work well for declassification patterns that scramble sensitive
information. A typical example is encryption, in which dynamic
information-flow tracking would report the amount of sensitive
information flow from the key to the ciphertext is the key size. For
these cases, additional techniques or manual declassification would
be needed.
10 CONCLUSIONS
We have proposed PM, a quantitative framework for assisting privi-
lege separation. It is based on our philosophy that, through quantita-
tive information flow, a practical partition can be produced through
a careful balancing between security and performance. This balanc-
ing cannot be fully automated as it has to take user requirements
into account. PM provides users an interactive way for exploring
partitioning choices, while making their intentions explicit via bud-
gets and a goal. Our experience with real applications suggests that
PM, while with some limitations, lets users explore the partitioning
space in a principled fashion, helps users produce partitions that
would be hard to obtain manually, and finds partitions that balances
security and performance better.
11 ACKNOWLEDGMENTS
We thank anonymous reviewers and our shepherd, Lorenzo DeCarli,
for their insightful comments. This research is based upon work sup-
ported by US NSF grants CNS-1801534, CCF-1723571, CNS-1408826,
CNS-1816282, CNS-1408880, CNS-1526319, as well as a gift from
Intel. The views and conclusions contained herein are those of the
authors and should not be interpreted as necessarily representing
the official policies or endorsements, either expressed or implied,
of any of the above organizations or any person connected with
them.
REFERENCES
[1] 2016. lp_solve 5.5 reference guide. http://lpsolve.sourceforge.net/.
[2] David M. Beazley. 1997. SWIG Users Manual: Version 1.1.
[3] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge:
splitting applications into reduced-privilege compartments. In Proceedings of
the 5th USENIX Symposium on Networked Systems Design and Implementation.
309–322.
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1036[4] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning
Programs for Privilege Separation. In 13th Usenix Security Symposium. 57–72.
[5] Scott A. Carr and Mathias Payer. 2017. DataShield: Configurable Data Confi-
dentiality and Integrity. In Proceedings of the 2017 ACM on Asia Conference on
Computer and Communications Security. 193–204.
[6] Stephen Chong, Jed Liu, Andrew Myers, Xin Qi, K. Vikram, Lantian Zheng, and
Xin Zheng. 2007. Secure Web Applications via Automatic Partitioning. In ACM
SIGOPS Symposium on Operating Systems Principles (SOSP). 31–44.
[7] David Clark, Sebastian Hunt, and Pasquale Malacaria. 2007. A static analysis
for quantifying information flow in a simple imperative language. Journal of
Computer Security 15, 3 (2007), 321–371.
[8] David D. Clark and D. R. Wilson. 1987. A Comparison of Commercial and Military
Computer Security Policies. In IEEE Symposium on Security and Privacy (S&P).
184–195.
[9] Xinshu Dong, Hong Hu, Prateek Saxena, and Zhenkai Liang. 2013. A Quantitative
Evaluation of Privilege Separation in Web Browser Designs. In 18th European
Symposium on Research in Computer Security (ESORICS). 75–93.
[10] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program De-
pendence Graph and its Use in Optimization. ACM Transactions on Programming
Languages and Systems 9, 3 (July 1987), 319–349.
[11] Joseph A. Goguen and José Meseguer. 1982. Security Policies and Security Models.
In IEEE Symposium on Security and Privacy (S&P). 11–20.
[12] Khilan Gudka, Robert N. M. Watson, Jonathan Anderson, David Chisnall, Brooks
Davis, Ben Laurie, Ilias Marinos, Peter G. Neumann, and Alex Richardson. 2015.
Clean Application Compartmentalization with SOAAP. In 22nd ACM Conference
on Computer and Communications Security (CCS). 1016–1031.
[13] Douglas Kilpatrick. 2003. Privman: A library for partitioning applications. In
USENIX Annual Technical Conference, FREENIX track. 273–284.
[14] Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis
Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David M. Eyers, Rüdiger
Kapitza, Christof Fetzer, and Peter R. Pietzuch. 2017. Glamdring: Automatic
Application Partitioning for Intel SGX. In USENIX Annual Technical Conference
(ATC). 285–298.
[15] Shen Liu, Gang Tan, and Trent Jaeger. 2017. PtrSplit: Supporting General Pointers
in Automatic Program Partitioning. In 24th ACM Conference on Computer and
Communications Security (CCS). 2359–2371.
[16] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting
Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation.
In 22nd ACM Conference on Computer and Communications Security (CCS). 1607–
1619.
[17] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoffrey
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
building customized program analysis tools with dynamic instrumentation. In
ACM Conference on Programming Language Design and Implementation (PLDI).
190–200.
[18] Stephen McCamant and Michael D. Ernst. 2008. Quantitative information flow
as network flow capacity. In ACM Conference on Programming Language Design
and Implementation (PLDI). 193–205.
[19] Andrew Myers and Barbara Liskov. 2000. Protecting privacy using the decentral-
ized label model. ACM Transactions on Software Engineering Methodology 9 (Oct.
2000), 410–442. Issue 4.
[20] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing privilege
escalation. In 12th Usenix Security Symposium. 231–242.
[21] Konstantin Rubinov, Lucia Rosculete, Tulika Mitra, and Abhik Roychoudhury.
2016. Automated partitioning of Android applications for trusted execution
environments. In International Conference on Software engineering (ICSE). 923–
934.
[22] Jerome Saltzer and Michael Schroeder. 1975. The Protection of Information in
Computer Systems. Proceedings of The IEEE 63, 9 (Sept. 1975), 1278–1308.
[23] Umesh Shankar, Trent Jaeger, and Reiner Sailer. 2006. Toward Automated
Information-Flow Integrity Verification for Security-Critical Applications. In
Network and Distributed System Security Symposium (NDSS). 267–280.
[24] Geoffrey Smith. 2015. Recent Developments in Quantitative Information Flow
(Invited Tutorial). In IEEE Symposium on Logic in Computer Science (LICS). 23–31.
[25] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William Harris, Taesoo Kim, and
Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data Flow Integrity.
In Network and Distributed System Security Symposium (NDSS).
[26] Gang Tan. 2017. Principles and Implementation Techniques of Software-Based
Fault Isolation. Foundations and Trends in Privacy and Security 1, 3 (2017), 137–
198.
[27] R. Wahbe, S. Lucco, T. Anderson, and S. Graham. 1993. Efficient Software-Based
Fault Isolation. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP).
ACM Press, New York, 203–216.
[28] Yang Liu Yongzheng Wu, Jun Sun and Jin Song Dong. 2013. Automatically parti-
tion software into least privilege components using dynamic data dependency
analysis. In International Conference on Automated Software Engineering (ASE).
323–333.
[29] Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew Myers. 2002.
Secure program partitioning. ACM Transactions on Compututer Systems (TOCS)
20, 3 (2002), 283–328.
[30] Lantian Zheng, Stephen Chong, Andrew Myers, and Steve Zdancewic. 2003.
Using Replication and Partitioning to Build Secure Distributed Systems. In IEEE
Symposium on Security and Privacy (S&P). 236–250.
A PROGRAM-DEPENDENCE-GRAPH
PARTITIONING
To model a program with both functions and global variables, we
use a Program Dependence Graph (PDG). In the PDG, vertices
represent either functions or globals. We write FV for the set of
functions, GV for the set of globals. We have V = FV ∪ GV .
Edges represent either call edges or data-flow edges. Data-flow
edges have two kinds: read edges and write edges. If function f
reads a global д, there is a directed read edge from д to f . On the
other hand, if function f writes to a global д, we add a directed
write edge from f to д. We write CE = {ei j
| i, j ∈ FV } for the set
| i ∈ GV ∧ j ∈ FV } for the set of read
of call edges, RE = {ei j
edges, and WE = {ei j
| i ∈ FV ∧ j ∈ GV } for the set of write
edges. We have E = CE ∪ RE ∪ WE.
In PDG partitioning, we further allow globals to be sensitive. A
partition P = (S,T ) is defined as before, except that S and T are
now sets of functions and globals. R = S ∩T is the set of duplicated
functions and globals.
There are three kinds of forward boundary edges: (1) forward
boundary call edges FBC = {ei j ∈ CE | i ∈ S ∧ j ∈ T − R}; (2)
forward boundary read edges FBR = {ei j ∈ RE | i ∈ S −R ∧ j ∈ T };
(3) forward boundary write-edges FBW = {ei j ∈ WE | i ∈ S ∧ j ∈
T − R}. We have FB = FBC ∪ FBR ∪ FBW . Similarly, there are three
kinds of backward boundary edges: (1) backward boundary call
edges BBC = {ei j ∈ CE | i ∈ T ∧ j ∈ S−R}; (2) backward boundary
read edges BBR = {ei j ∈ RE | i ∈ T − R ∧ j ∈ S }; (3) backward
boundary write edges BBW = {ei j ∈ WE | i ∈ T ∧ j ∈ S − R}. We
have BB = BBC ∪ BBR ∪ BBW .
Furthermore, weights presented in Sec. 6 are also adjusted. First,
a node for a global variable has zero code size. Second, information-
flow weights are added for data-flow edges. Information can flow
only along the direction of edges; that is, information flows to a
function from a global variable on a read edge and flows to a global
variable from a function on a write edge. Therefore, conceptually
there should be no backward flow on data-flow edges. But to be