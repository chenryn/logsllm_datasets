title:\(μ\)SBS: Static Binary Sanitization of Bare-metal Embedded Devices
for Fault Observability
author:Majid Salehi and
Danny Hughes and
Bruno Crispo
µSBS: Static Binary Sanitization of Bare-metal Embedded Devices for
Fault Observability
Majid Salehi
imec-Distrinet, KU Leuven
PI:EMAIL
Danny Hughes
imec-Distrinet, KU Leuven
PI:EMAIL
Bruno Crispo
imec-Distrinet, KU Leuven
Trento University, Italy
PI:EMAIL
Abstract
A large portion of the already deployed Internet of Things
(IoT) devices are bare-metal. In a bare-metal device, the
ﬁrmware executes directly on the hardware with no inter-
mediary OS. While bare-metal devices increase efﬁciency
and ﬂexibility, they are also subject to memory corruption
vulnerabilities that are regularly uncovered. Fuzzing is an
effective and popular software testing method to discover vul-
nerabilities. The effectiveness of fuzzing approaches relies on
the fact that memory corruption faults, by violating existing
security mechanisms such as MMU, are observable, thus rela-
tively easy to debug. Unfortunately, bare-metal devices lack
such security mechanisms. Consequently, fuzzing approaches
encounter silent memory corruptions with no visible effects
making debugging extremely difﬁcult. This paper tackles this
problem by proposing µSBS, a novel approach that, by stati-
cally instrumenting the binaries, makes memory corruptions
observable. In contrast to prior work, µSBS does not need
to reverse engineer the ﬁrmware. The approach is practical
as it does not require a modiﬁed compiler and can perform
policy-based instrumentation of ﬁrmware without access to
source code. Evaluation of µSBS shows that it reduces secu-
rity analyst effort, while discovering the same set of memory
error types as prior work.
1 Introduction
Recent years have witnessed the proliferation of Internet of
Things (IoT) devices into nearly every aspect of our lives.
According to a recent Gartner report [5], the number of con-
nected IoT devices is expected to exceed the total number of
humans by 2020. A large portion of these devices are bare-
metal with the ﬁrmware running directly on the hardware.
This approach can deliver energy-efﬁciency, extensible con-
nectivity, and adequate computing power. However, most of
these ﬁrmware are implemented in type-unsafe languages
such as C, C++, or Objective-C, that are prone to memory cor-
ruption vulnerabilities such as buffer overﬂows. This creates
a very large attack surface in the IoT ecosystem.
Given the limited resources of bare-metal devices, tradi-
tional mitigation mechanisms for memory corruption vulnera-
bilities such as Control Flow Integrity (CFI) [24,44], Address
Space Layout Randomization (ASLR), and security policy
reinforcement [57] are typically infeasible [16]. More impor-
tantly, many IoT devices today work in a real-time environ-
ment and must remain responsive to external stimuli (e.g., a
health-care system, or a safety system in a car). These systems
cannot accommodate the high run-time overhead incurred by
most mitigation mechanisms. This highlights the importance
of performing a vulnerability discovery process before the
ﬁrmware is released, thus at testing time.
Fuzz-testing or Fuzzing is a testing solution for ﬁnding
bugs and vulnerabilities. Fuzzing methods execute the applica-
tion with randomly generated inputs and wait for vulnerability-
exposing behaviors such as crashing or hanging. This behav-
ior is the visible consequences of faulty states triggered by
deployed security mechanisms such as Memory Management
Unit (MMU). Unlike general purpose computers, bare-metal
devices often lack such mechanisms due to their cost sensitiv-
ity and resource constraints. Accordingly, fuzzing bare-metal
devices is extremely challenging to debug since memory cor-
ruptions may trigger no observable behaviors and thus cannot
be discovered through fuzzing.
To address this problem, Muench et al. [42] integrated the
black-box fuzzer Boofuzz [2] with a set of heuristics to recog-
nize faults due to memory corruptions1, but experimental re-
sults show it has still false positives and false negatives. Even
more important, the proposed heuristics rely on information
extracted from applying reverse engineering techniques and
additional annotations provided manually by the analyst, all
activities that are challenging and time consuming. Further-
more, they need to be applied for each new ﬁrmware under
analysis.
Sanitizers [51], can be combined with fuzzing methods in
order to make faulty states observable. Sanitizers instrument
applications with memory check instructions to monitor all
1In the interests of brevity we refer to a faulty state caused by memory
corruption simply as a fault for the rest of the paper.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    381
reads and writes during application execution. There are san-
itizers that operate at the source code or compilation level,
such as AddressSanitizer [46], while others, as Valgrind’s
Memcheck [48] that operate on machine code. Considering
that the majority of bare-metal ﬁrmware are not open-source,
source-based sanitizers are not the best choice in our context.
Binary sanitization could be done either statically or dynam-
ically. Dynamic binary sanitizers allow instrumentation of
an application at runtime. However, such techniques are not
widely deployable on the bare-metal devices mainly due to
the high performance penalties and special software/hard-
ware requirements. On the other hand, static binary sanitizers
introduces lower overhead by instrumenting application bi-
nary statically. Unfortunately, at the time of writing none of
the current binary sanitizers provides support for bare-metal
devices.
This paper presents µSBS, a novel approach that, by stat-
ically instrumenting bare-metal ﬁrmware binaries, makes
memory corruptions observable. µSBS provides a static bi-
nary instrumentation method and uses it for instrumenting
memory instructions (i.e., sanitization). µSBS allows to em-
bed a given memory safety policy and to monitor all memory
accesses, triggering observable warnings when a violation to
the policy occurs. In summary, the paper makes following
contributions:
• We present µSBS, the ﬁrst static binary sanitizer for bare-
metal ﬁrmware. It avoids the complex and tedious work
of reverse engineering ﬁrmware binaries.
• Using µSBS, we make memory corruption faults observ-
able also on bare-metal devices, thus facilitating their
debugging.
• We developed a fully functional prototype of µSBS for
the ARM architecture which is the most widely used
architecture in IoT devices. To foster further research,
we make our µSBS prototype available open source.
• We evaluated the effectiveness of µSBS in catching the
same classes of memory faults of prior work. We assess
the feasibility of µSBS by instrumenting 11 real-world
ﬁrmware binaries. Evaluation results show that µSBS
correctly instruments all of the ﬁrmware binaries with
reasonable execution over-head and size expansion.
2 Background and Motivation
In this section, we present a brief overview of memory cor-
ruption vulnerabilities and fuzzing as an approach to discover
them, and discuss some limitations related to the architecture
of bare-metal devices that motivate the need to extend and
reﬁne faults observability on such architectures.
2.1 Memory Corruptions and Fuzzing
Low-level systems software such as ﬁrmware is typically
written in the C or C++ languages due to their efﬁciency
and capability to fully control the underlying hardware. In
such programming languages, developers must ensure that
every memory access is valid, that no situation leads to the
de-referencing of invalid pointers. However, in practice, devel-
opers frequently fail to meet these responsibilities and cause
memory bugs that can be exploited by an attacker to alter
the application behavior or even taking full control over the
software stack.
In testing the security of such application, security ana-
lysts hardly have access to the source code. Fuzzing is one of
the most effective testing methodologies to ﬁnd memory cor-
ruption vulnerabilities in Commercial Off-The-Shelf (COTS)
applications. Fuzzing executes the application binary ﬁle with
random inputs to look for unexpected application behavior
such as crashes that are immediate consequences of faulty
states. The ability of observing such crashes is the prerequi-
site for fuzzing to work. In general purpose computer sys-
tems, equipped with OS security mechanisms and hardware
features such as stack canaries, Data Execution Prevention
(DEP), Memory Management Unit (MMU), and Memory Pro-
tection Unit (MPU), memory violations trigger a crash upon
a fault. Possible ways to observe such crashes are: (1) Ob-
serving exit status: the execution of the device or application
under test is terminated and an error message is generated
for tracing. (2) Catching the crashing exception: the crashing
signal can be caught by overwriting an exception handler. (3)
Leveraging mechanisms provided by the OS: the OS-level
debugging interfaces such as ptrace can be used in order to
observe application execution and detect crashes.
2.2 Bare-metal Embedded Devices
Among different classes of embedded devices, bare-metal de-
vices are designed for low cost and low power operation. Such
devices are deployed in many application areas ranging from
automotive and industrial control systems to medical devices.
Bare-metal devices execute a single statically linked binary
ﬁrmware providing a speciﬁc application logic as well as
system functionality without the use of an underlying abstrac-
tion such as an operating systems. However, it is challenging
for bare-metal devices to support security properties in prac-
tice, due to limited energy, memory and computing resources.
For example, this class of devices rarely provide a Memory
Management Unit (MMU) and ﬁrmware modules have ac-
cess to the entire shared memory space in a privileged mode.
Therefore, compromising one ﬁrmware module gives an at-
tacker arbitrary read/write access to the whole system with
no observable side-effects. Unrestricted read/write primitive
enables the attacker to redirect the control-ﬂow of ﬁrmware
or directly overwrite sensitive data.
382    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Table 1: Hardware protection mechanisms supported by representative core families.
Core Family
Hardware Protection Mechanism
MPU
MMU
DEP
ARM
PIC
AVR
8051
ARM 1 to ARM 7
ARM 7EJ
ARM Cortex R
ARM Cortex M
PIC 10 to PIC 24
dsPIC
ATiny
ATmega
ATxmega
Intel MCS-51
Inﬁneon XC88X-I
Inﬁneon XC88X-A
MSP430 MSP430x1xx to MSP430x6xx
MSP430FRxx



~






































: it is supported by all microcontrollers in the given family.
~: it is supported by some microcontrollers in the given family.
: it is not supported by any of them.
As a more concrete investigation of the hardware security
feature support (i.e., MMU, MPU, and DEP), we conducted
an analysis of 29 SoC core families. Our selection aims to pro-
vide a representative sample of major architectures and ven-
dors in the embedded space across industry verticals including
unmanned aerial vehicle (UAV), unmanned ground vehicle
(UGV), remotely operated underwater vehicle (ROV), real-
time 3D printer controllers and real-time Internet of Things
(IoT) devices.
According to our analysis, none of the SoCs is designed
to employ MMU. A number of SoCs optionally provide ba-
sic memory protections using MPU. However, even with the
existence of MPU, conﬁguring it from the application is not
a straightforward task, leading the developers to ignore us-
ing this functionality. Table 1 summarizes the results of our
analysis by mapping out core families architectural style and
hardware security functionalities.
2.3 Fault Observability in Bare-metal Devices
Contemporary general purpose computers have plenty of
mechanisms that makes faulty states observable (e.g., segmen-
tation faults caused by an MMU). Most bare-metal devices,
instead, do not have such mechanisms due to their limited I/O
capabilities and architecture. In fact, most memory corrup-
tions events are silent and do not lead to an immediate crash
of the ﬁrmware or any observable event. Thus the ﬁrmware
can continue the execution with no visible effect or it will
lead eventually to a crash (i.e., I/O error) that is however very
difﬁcult to debug. It is challenging to infer if the crash was
due to an early memory violation or to an I/O error.
Motivating Example. To better understand the problem,
we use a popular bare-metal ﬁrmware, Broadcom Wi-Fi SoC
as a motivating example. This ﬁrmware is present in both
mobile devices and Wi-Fi routers for handling the lower layers
of Wi-Fi and Bluetooth protocols. The Broadcom Wi-Fi SoC
executes on ARM Cortex-R processor. As reported by Google
Project Zero [6] in CVE-2017-0561 [4], the ﬁrmware has a
remote code execution vulnerability that enables a remote
attacker to execute arbitrary code and escalate to control over
the entire system. In the code snippet shown in Listing 1,
SoC ﬁrmware performs a memcpy into the allocated memory
object buffer, using the ft_ie length ﬁeld. Since the ft_ie length
ﬁeld is not veriﬁed prior to the copy, this allows an attacker
to exceed the buffer and trigger a buffer overﬂow.
uint8_t* buffer = malloc (256) ;
...
uint8_t* linkid_ie = bcm_parse_tlvs (..., 101) ;
memcpy ( buffer , linkid_ie , 0 x14 );
...
uint8_t* ft_ie = bcm_parse_tlvs (..., 55) ;
memcpy ( buffer + 0x18 , ft_ie , ft_ie [1] + 2) ;
Listing 1: A remote code execution vulnerability in the