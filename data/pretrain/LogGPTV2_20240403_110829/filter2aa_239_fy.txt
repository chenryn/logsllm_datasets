      Validation.ErrorTemplate="{StaticResource validationTemplate}" />
应用程序的新外观如图34-25所示。
图34-25
  注意： 自定义错误消息的另一个选项是注册到Validation类的Error事件。这
里必须把NotifyOnValidationError属性设置为true。
可以从Validation类的Errors集合中访问错误信息。要在文本框的工具提示中显示错误
信息，可以创建一个属性触发器，如下所示。只要把Validation类的HasError属性设置为
True，就激活触发器。触发器设置文本框的ToolTip属性：
2．数据错误信息
处理错误的另一种方式是确定.NET对象是否执行了IDataErrorInfo接口。SomeData类
现在改为实现IDataErrorInfo接口。这个接口定义了Error属性和带字符串参数的索引器。
在数据绑定的过程中验证WPF时，会调用索引器，并把要验证的属性名作为columnName
参数传递。在实现代码中，如果有效，会验证其值，如果无效，就传递一个错误字符串。
下面验证Value2属性，它使用C#自动属性标记实现（代码文件
ValidationSample/SomeData.cs）。
    public class SomeData: IDataErrorInfo
    {
      // etc.
      public int Value2 { get; set; }
      string IDataErrorInfo.Error => null;
      string IDataErrorInfo.this[string columnName]
      {
        get
        {
        if (columnName == "Value2")
        {
          if (this.Value2  80)
              return "age must not be less than 0 or greater than 80";
        }
        return null;
        }
      }
    }
  注意： 在.NET对象中，索引器返回什么内容并不清楚，例如，调用索引器，
会从Person类型的对象中返回什么？因此最好在IDataErrorInfo接口中包含显式的实现代
码。这样，这个索引器只能使用接口来访问，.NET类可以有另一种实现方式，以实现
其他目的。
如果把Binding类的ValidatesOnDataErrors属性设置为true，就在数据绑定过程中使用
IDataErrorInfo接口。这里，改变文本框时，绑定机制会调用接口的索引器，并把Value2传
递给columnName变量（代码文件ValidationSample/MainWindow.xaml）：
    Value2:
3．数据错误信息的通知
除了支持利用异常和IDataErrorInfo接口进行验证之外，.NET 4.5附带的WPF还支持利
用接口INotifyDataErrorInfo进行验证。在IDataErrorInfo接口中，属性的索引器可以返回一
个错误，而在INotifyDataErrorInfo中，可以把多个错误关联到一个属性上。这些错误可以
使用GetErrors方法来访问。如果实体有错误，HasErrors属性就返回true。这个接口的另一
个很好的功能是使用事件ErrorsChanged通知出了错误。这样，错误就可以在客户端异步
检索，例如，可以调用一个Web服务来验证用户输入。此时，在检索结果时，用户可以继
续处理输入表单，并获得不匹配情况的异步通知。
下面的示例使用INotifyDataErrorInfo进行验证。该示例定义基类
NotifyDataErrorInfoBase，这个基类实现了接口INotifyDataErrorInfo。它派生于基类
BindableObject，来获得INotifyPropertyChanged接口的实现，如本章前面所示。
NotifyDataErrorInfoBase使用字典errors来包含一个列表，列表中的每个属性都用于存储错
误信息。如果任何属性有错误，HasErrors属性就返回true。GetErrors方法返回一个属性的
错误列表；事件ErrorsChanged在每次改变错误信息时触发。除了接口INotifyDataErrorInfo
中的成员之外，这个基类还实现了方法SetErrors、ClearErrors和ClearAllErrors，以便于处
理设置错误（代码文件ValidationSample/NotifyDataErrorInfoBase.cs）：
      using System;
      using System.Collections;
      using System.Collections.Generic;
      using System.ComponentModel;
      using System.Runtime.CompilerServices;
      namespace ValidationSamlple
      {
      public abstract class NotifyDataErrorInfoBase : BindableObject,
          INotifyDataErrorInfo
      {
        private Dictionary> _errors =
            new Dictionary>();
        public void SetError(string errorMessage,
            [CallerMemberName] string propertyName = null)
        {
          List errorList;
          if (_errors.TryGetValue(propertyName, out errorList))
          {
            errorList.Add(errorMessage);
          }
          else
          {
            errorList = new List { errorMessage };
            _errors.Add(propertyName, errorList);
          }
          HasErrors = true;
          OnErrorsChanged(propertyName);
        }
        public void ClearErrors([CallerMemberName] string propertyName = null)
        {
          if (hasErrors)
          {
            List errorList;
            if (_errors.TryGetValue(propertyName, out errorList))
            {
              _errors.Remove(propertyName);
            }
            if (_errors.Count == 0)
            {
              HasErrors = false;
            }
            OnErrorsChanged(propertyName);
          }
        }
        public void ClearAllErrors()
        {
          if (HasErrors)
          {
            _errors.Clear();
            HasErrors = false;
            OnErrorsChanged(null);
          }
        }
        public event EventHandler ErrorsChanged;
        public IEnumerable GetErrors(string propertyName)
        {
          List errorsForProperty;
          bool err = _errors.TryGetValue(propertyName, out errorsForProperty);
          if (! err) return null;
          return errorsForProperty;
        }
        private bool hasErrors = false;
        public bool HasErrors
        {
          get { return hasErrors; }
          protected set {
            if (SetProperty(ref hasErrors, value))
            {
              OnErrorsChanged(propertyName: null);
            }
          }
        }
        protected void OnErrorsChanged(
          [CallerMemberName] string propertyName = null)
        {
          ErrorsChanged? .Invoke(this,
            new DataErrorsChangedEventArgs(propertyName));
        }
      }
      }
类SomeDataWithNotifications是绑定到XAML代码上的数据对象。这个类派生于基类
NotifyDataErrorInfoBase，继承了INotifyDataErrorInfo接口的实现代码。属性Val1是异步验
证的。对于验证，应在设置属性后调用CheckVal1方法，这个方法会异步调用方法
ValidationSimulator. 
Validate。调用这个方法后，UI线程就可以返回，来处理其他事件；
一旦返回了结果，若返回了一个错误，就调用基类的SetError方法。很容易把异步调用改
为调用Web服务或执行另一个异步操作（代码文件
ValidationSample/SomeDataWithNotifications.cs）：
          using System.Runtime.CompilerServices;
          using System.Threading.Tasks;
          namespace ValidationSample
          {
            public class SomeDataWithNotifications : NotifyDataErrorInfoBase
            {
              private int val1;
              public int Val1
              {
              get { return val1; }
              set
              {
                SetProperty(ref val1, value);
                CheckVal1(val1, value);
              }
              }
              private async void CheckVal1(int oldValue, int newValue,
                [CallerMemberName] string propertyName = null)
              {
              ClearErrors(propertyName);
              string result = await ValidationSimulator.Validate(
                newValue, propertyName);
              if (result ! = null)
              {
                SetError(result, propertyName);
              }
              }
            }
ValidationSimulator的Validate方法在检查值之前推迟了3秒，如果该值大于50，就返
回一个错误消息（代码文件ValidationSample/ValidationSimulator.cs）：
      public static class ValidationSimulator
      {
        public static Task Validate(int val,
          [CallerMemberName] string propertyName = null)
        {
          return Task.Run(async () =>
          {
            await Task.Delay(3000);
            if (val > 50) return "bad value";
            else return null;
          });
        }
      }
在数据绑定中，只有ValidatesOnNotifyDataErrors属性必须设置为True，才能使用接口
INotifyDataErrorInfo的异步验证功能（代码文件
ValidationDemo/NotificationWindow.xaml）：
运行应用程序，就可以看到在输入错误的信息后，文本框被默认的红色矩形包围了3
秒。以不同的方式显示错误信息也可以用以前的方式实现——使用错误模板和触发器，来
访问验证错误。
4．自定义验证规则
为了更多地控制验证方式，可以实现自定义验证规则。实现自定义验证规则的类必须
派生自基类ValidationRule。在前面的两个例子中，也使用了验证规则。派生自
ValidationRule抽象基类的两个类是DataErrorValidationRule和ExceptionValidationRule。设
置ValidatesOnDataErrors属性，并使用IDataErrorInfo接口，就可以激活
DataErrorValidationRule。ExceptionValidationRule处理异常，设置ValidationOnException属
性会激活ExceptionValidationRule。
下面的示例实现一条验证规则，来验证正则表达式。RegularExpressionValidationRule
类派生自基类ValidationRule，并重写基类定义的抽象方法Validate。在其实现代码中，使
用System.Text.RegularEx-pressions名称空间中的RegEx类验证Expression属性定义的表达
式。
      public class RegularExpressionValidationRule : ValidationRule
      {
        public string Expression { get; set; }
        public string ErrorMessage { get; set; }
        public override ValidationResult Validate(object value,
          CultureInfo cultureInfo)
        {
          ValidationResult result
 = null;
          if (value ! = null)
          {
          var regEx = new Regex(Expression);
          bool isMatch = regEx.IsMatch(value.ToString());
          result = new ValidationResult(isMatch, isMatch ?
              null: ErrorMessage);
          }
          return result;
        }
      }
  注意： 正则表达式参见第10章。
这里没有使用Binding标记扩展，而是把绑定作为TextBox.Text元素的一个子元素。绑
定的对象现在定义一个Email属性，它用简单的属性语法来实现。UpdateSourceTrigger属
性定义绑定源何时应更新。更新绑定源的可能选项如下：
● 当属性值变化时更新，即用户输入属性值中的每个字符时更新
● 失去焦点时更新
● 显式指定更新时间
ValidationRules是Binding类的一个属性，Binding类包含ValidationRule元素。这里使
用的验证规则是自定义类RegularExpressionValidationRule，其中把Expression属性设置为
一个正则表达式，正则表达式用于验证输入是否是有效的电子邮件，ErrorMessage属性给
出TextBox中的输入数据无效时显示的错误消息：
      Email:
34.8 TreeView
TreeView控件可以显示分层数据。绑定到TreeView非常类似于前面的绑定到
ListBox，其区别是绑定到TreeView会显示分层数据——可以使用
HierarchicalDataTemplate。
下面的示例使用分层显示方式和DataGrid控件。Formula1样本数据库通过ADO.NET
Entity Framework来访问。模型类型如图34-26所示。Race类包含竞赛日期的信息，且关联
到Circuit类上。Circuit类包含Country和竞赛环形跑道的信息。Race类还与RaceResult类关
联起来。RaceResult类包含Racer和Team的信息。
图34-26
  注意： 在Formula1Demo示例的Database目录下，可以找到Formula1Demo项
目使用的Formula1数据库，它作为一个备份文件。在运行示例应用程序之前，请使用
SQL Server Management Studio把备份文件恢复到Formula1数据库中。
  注意： ADO.NET Entity Framework参见第38章。
使用XAML代码声明一个TreeView。TreeView派生自基类ItemsControl，其中，与列
表的绑定可以通过ItemsSource属性来完成。把ItemsSource属性绑定到数据上下文上。数据
上下文在代码隐藏中指定，如下所示。当然，这也可以通过ObjectDataProvider来实现。为
了定义分层数据的自定义显示方式，定义了HierarchicalDataTemplate元素。这里的数据模
板是用DataType属性为特定的数据类型定义的。第一个HierarchicalDataTemplate是
Championship类的模板，它把这个类的Year属性绑定到TextBlock的Text属性上。
ItemsSource属性定义了该数据模板本身的绑定，以指定数据层次结构中的下一层。如果
Championship类的Races属性返回一个集合，就直接把ItemsSource属性绑定到Races上。但
是，因为这个属性返回一个Lazy对象，所以绑定到Races.Value上。Lazy类的优点
在本章后面讨论。
第二个HierarchicalDataTemplate元素定义F1Race类的模板，并绑定这个类的Country和