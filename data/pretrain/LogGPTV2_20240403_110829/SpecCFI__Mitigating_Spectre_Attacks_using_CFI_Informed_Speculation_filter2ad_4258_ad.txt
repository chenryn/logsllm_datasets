-)0
-)/
-









 !



 !"#
 %!'

#  
&
&/10
!
 "



&(
%!
Fig. 6: Performance Impact

 "




















*,))))
*+))))
*)))))
.))))
-))))
,))))
+))))
)
 



 !"
# %

"
$
$+-,
!
 



$&
# 
Fig. 7: Number of lfences inserted by different defenses
in our experiments:
‚Ä¢ Strict lfences, are highly restrictive and prevent any
instruction to pass through them until
the fence re-
tires [67]. This type of fences impose high overhead to the
system. All the x86 serialization instructions including
the lfence we use in our experiment, categorize as strict
fences.
‚Ä¢ Relaxed lfences, only stop certain types of instructions
until the fence gets retired [67], while letting the others
through. For example, LSQ-LFENCE [67], prevents any
subsequent load instruction from being issued specula-
tively out of the load/store queue but allows any other
instruction to pass it. LSQ-LFENCEs are secure against
Spectre because they prevent the speculative loads, and
have the advantage of letting speculation on other types
of instructions proceed, substantially reducing the perfor-
mance impact.
in general,
Figure 6 shows the performance overhead of SPECCFI-full
(securing both forward and backward edges) in comparison to
the All Target Fencing and Retpoline-style software fencing
approaches. We note that
inserting serializing
instructions (e.g, lfence) in the target of every indirect
branch is expensive, imposing performance overhead of 39%
and 48% on average for All Target Fencing and Retpoline style
respectively. Using SPECCFI, by inserting lfence only when
the CFI check fails, the number of inserted lfence drops
signiÔ¨Åcantly thus reducing the performance overhead to less
than 1.9% on average.
To illustrate the reason behind the performance reduction
in the different approaches, we study the number of lfence
instructions inserted in each approach in Figure 7. Note that
benchmarks such as mcf and omnet, are C++ benchmarks
which use a large number of indirect branches due to the
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
"$+ "&"
"$+&"
!+ "&"
!+&"
!#*$
# *#'*$
 *$
/*0
/
.*3
.*2
.*1
.*0
.









!"



!"#$
! %"(

 $!!
'
'021
"
!#



')
%"
Fig. 8: Overhead breakdown for forward and backward edge
common use of virtual function calls and function pointers.
As a result, this leads to a large number of lfence being
inserted into the pipeline, and to a substantial performance
impact compared to the baseline implementation. The only
exception to this trend is Provay which suffers the highest
overhead for all the defenses but does not have huge number
of lfence compared to the other benchmarks. Looking more
closely at this benchmark, we found out that it is a memory
intensive benchmark with the highest number of load and
store micro-ops among all the benchmarks. Intel manuals [37]
indicate that an lfence is committed only when there is no
preceding outstanding store. Thus, for this benchmark, each
lfence instruction remains active for a longer period of time
until it gets committed which explains the high performance
impact. It is also worth mentioning that unlike the All target
fencing and Retpoline-style which insert lfence for each
indirect branch, the lfence instructions for SPECCFI occur
due to mis-prediction detected as a label mismatch causing the
insertion of the lfence. This means that the higher the rate
of mis-prediction, the more lfence instructions are inserted.
In Figure 8, we study the effect of securing the for-
ward and backward edges separately since they use separate
mechanisms for protection. Note that in Retpoline-style, all
return instructions are converted to a sequence of instructions
terminating with a jmp, meaning that there is no remaining
ret instruction (i.e. backward-edge) in the code compiled in
this setting. Therefore, the overhead measured as the overhead
of Retpoline-style-full is equivalent to only Retpoline-style-
forward overhead and the overhead on the backward-edge is
zero. The results from the breakdown show that as expected,
the overhead in general increases with the number of indirect
branches in All Target Fencing. As for SPECCFI, the over-
head caused from forward edge defense is typically low: the
overhead is incurred only on CFI mismatches which indicate
misprediction of the branches. Therefore, the major part of
the SPECCFI overhead is the overhead of SPECCFI-full on
the backward-edge which is associated with maintaining the
RSB/SCS hardware structure. It is important to consider that
this maintenance effort also includes procedures to make sure
the committed path is secure and therefore only a portion
of this overhead is associated with defense against Spectre
attacks.
Since strict lfence imposes a higher overhead on the sys-
tem and relaxed lfence provides the same security guarantee
with lower overhead, we implemented all discussed defenses
with relaxed lfence as well to study the differences in
48
.)/
.
-)2
-)1
-)0
-)/
-









 !



 !"#
 %!'

#  
&
&/10
!
 "



&(
%!
Fig. 9: Performance using relaxed fences
overhead. Figure 9 examines the effect of relaxed lfence.
The results show that the overhead caused by strict lfence is
much higher than that of relaxed lfence. Also as expected,
using strict instead of relaxed causes far more performance
degradation when the benchmark is memory intensive (i.e.,
has a lot of stores in this case). Our results show that just
by changing the type of the lfence from strict to relaxed,
the average overhead drops down from 48.9% to 22.6% for
Retpoline-style and from 39.9% to 18.82% for All Target Fenc-
ing. However, these overheads are still substantially higher
than those of SPECCFI.
B. Hardware Implementation Overhead
To estimate the hardware overheads of SPECCFI, we im-
plemented the primary hardware structures and integrated
them within an open core to estimate the area and timing
overhead. SpeciÔ¨Åcally, the implementation consists of adding
two CFI_REG registers in two locations of the pipeline: (1)
decode stage, to support detecting CFI violations for specu-
lative instructions and (2) commit stage, to support detecting
CFI violations for committed instructions. Since CFI_REG is
used to store the CFI labels its size should be the same as the
maximum CFI label size (32-bits for our design). Furthermore,
we need to add two comparators; one in decode and one in
commit stage of the pipeline. These comparators will be used
by cfi_lbl instruction to compare its label to the CFI_REG
(todetect violations).
Additionally, SPECCFI needs a LCP register to point to the
last entry of the RSB/SCS from a committed call, used to
distinguish between entries from speculative and committed
instructions. Since RSB/SCS has 16 in-processor cache entries,
the LCP size is 4-bit. Moreover, at two stages of the pipeline,
new entries can be added to the RSB/SCS: (1) while executing
call instruction and (2) load the preserved RSB/SCS entries
from memory in case of underÔ¨Çow. Therefore, we had to
update the number of write ports from 1 to 2. The same
thing applies to the number of read ports, as we may use
RSB/SCS to fetch next
instruction while spilling over to
memory in case of RSB/SCS overÔ¨Çow. In addition, to preserve
the correct behaviour of RSB/SCS, we provided two LCP
update mechanisms: (1) -/+1: for regular push/pop operations
and (2) -/+4: for handling overÔ¨Çow and underÔ¨Çow of the
structure. The cost of the RSB/SCS itself did not lead to a
noticeable increase in complexity or area.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: SPECCFI hardware implementation overhead
after adding it to the AO486 open-core
Static power Dynamic power Area Cycle time
SPECCFI
0.4%
0.4%
0.1%
0.0%
To measure the impact of SPECCFI implementation on
power, area, and cycle time, we modiÔ¨Åed the open source pro-
cessor (AO486) [8] to include SPECCFI design using Verilog.
To synthesize the implementation of integrating SPECCFI to
the processor on a DE2-115 FPGA board [1] we used Quartus
2 17.1 software. The results shown in Table IV prove that
SPECCFI indeed has low implementation complexity. In terms
of power, there is a 0.4% increase in core dynamic and static
power. Although it is difÔ¨Åcult to measure power accurately,
we applied the power analysis tool provided by Quartus to
measure power after synthesis to get more accurate results. In
terms of area, there is a 0.1% increase in total logic elements.
Moreover, since SPECCFI design is simple, it Ô¨Åts within the
optimized frequency of the core. Thus, it has no effect on cycle
time. The AO486 processor is an implementation of the 80486
ISA using a 32-bit in-order pipeline. Thus, these results are
relative to the small pipelined core; the overheads will be much
smaller if compared to a modern out-of-order superscalar core.
C. Empirical Security Evaluation
1) Against real exploits: To verify our analysis, we eval-
uated the effectiveness of SPECCFI against real-world ex-
ploits. We ran previously disclosed Spectre-BTB [43], Spectre-
RSB [45], and SMoTHerSpecter [13] PoC inside the emulator.
Table V summarizes the results, using the same classiÔ¨Åcation
scheme proposed in [15]. The experiment results show that
SPECCFI was able to prevent all information leaks.
TABLE V: Empirical security evaluation of SPECCFI.
Spectre-BTB
Spectre-RSB
SmotherSpecter
Cross-address-space
Same-address-space
Cross-address-space
Same-address-space
Cross-address-space
Same-address-space
in-place






out-of-place






2) Impact of CFG precision: To study the difference be-
tween coarse-grained CFI (e.g., Inte CET [38]) and Ô¨Åne-
grained CFI (e.g., SPECCFI) against BTB injection attacks,
we used the SMoTherSpectre [13] for a demonstration. In
this scenario, the attacker has to Ô¨Ånd a BTI gadget in the
victim process which loads a secret in a register and terminates
by an indirect branch to be able to perform BTB injection.
By poisoning the BTB, the attacker transfers control to a
SMoTHer Gadget to leak the secret. The SMoTHer Gadget
starts with a comparison based on the target register followed
by a conditional jump which enables SMoTherSpectre to leak
the secret through a port contention side-channel. Figure 10
compares the required SMoTHer gadgets and feasibility of the