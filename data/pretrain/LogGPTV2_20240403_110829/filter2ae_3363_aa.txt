# 深耕保护模式（三）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 中断门
windows没有使用调用门，但是使用了中断门：
1.系统调用(老的cpu，从3环到0环。新的cpu直接通过快速调用)  
2.调试
###  IDT
IDT即中断描述符表,同GDT一样，IDT也是由一系列描述符组成的，每个描述符占8个字节。但要注意的是，IDT表中的第一个元素不是NULL。
使用windbg查看IDT表的基地址和长度。
    r idtr
    r idtl
    dq 8003f400
IDT 表包含三种门描述符：
  1. 中断门描述符
  2. 任务门描述符
  3. 陷阱门描述符
中断门描述符
这里与调用门有个显著的区别是不能再传参了，而且高四字节的8到12位也与调用门不一样。
中间这个D,表示default，这里是1(32位)。
###  中断门执行流程
> 当执行int n时，就去IDT表寻找对应的描述符，这个n是几就找到IDT表对应的第n+1个(从0开始)。
>
> 获取到段描述符后检查权限，进行段权限检查(没有RPL，只检查CPL)。
>
> 权限检查通过后，获取新的段选择子与之对应的gtd表中的段描述符的base，再加上IDT表中的limit作为EIP去跳转。
###  实验
构造一个中断门。找一P位为0的位置，这样不会因为我们的修改而导致蓝屏。
这个位置使用int 32会被调用。
测试代码为：
    #include "stdafx.h"
    #include 
    DWORD dwValue;
    _declspec(naked) void func()   //0x401020
    {
             __asm
             {
                 pushad
                 pushfd
                    mov eax,[0x8003F00C]
                    mov ebx,[eax]
                    mov dwValue,ebx
                 popfd
                 popad
                 iretd    //16位用iret  64位是iretq
             }
    }
    void printValue()
    {
        printf("%x",dwValue);
    }
    int main(int argc, char* argv[])
    {
        //中断门提权
        _asm
        {
            int 32
        }
        printValue();
        getchar();
        return 0;
    }
这里还是获取裸函数的地址，我这里是0x401020，那么构造的中断门就可以是0x0040EE00`00081020
kd> eq 8003f500 0040EE00`00081020
然后运行程序，能够成功读取地址，说明提权成功。
值得注意的是：返回的汇编代码这里已经变成了iretd，与调用门的retf有什么区别呢？实际上就是多压了一个eflag寄存器。
为了看这里压栈结构稍微修改下代码，把裸函数中的代码改为int 3。
    _declspec(naked) void func()   //401020
    {
             __asm
             {
                 int 3
                 iretd
             }
    }
断点后可以看到堆栈顺序，依次是返回地址，cs，elf，esp，ss，应证了上面的图，比调用门多压栈eflag一个寄存器。
eflag寄存器的结构如下：
中断门在执行的时候会清空eflag的IF位，这与中断有关，具体在后面与陷阱门经行对比的时候再说。
这里有一个有意思的题目：在使用调用门返回时用iretd，在中断门返回时使用retf，保证正常返回不蓝屏。
思路比较简单，在返回前将堆栈设置成我们想要的结构就行了，这里如果有问题最好看着堆栈图一起看。
####  调用门用iretd返回(本来是retf)
  1. 将堆栈中储存的SS和ESP的值分别向高地址移动四字节
  2. 将EFLAG写到原来ESP的位置，也就是[ESP+0x8]那个位置。（pushfd）
    #include "stdafx.h"
    #include 
    BYTE GDT[6] = {0};
    DWORD dwH2GValue;
    void _declspec(naked) GetGdtRegister()
    {
        _asm
        {
            pushad
            pushfd
                mov eax,0x8003f00C
                mov ebx,[eax]
                mov dwH2GValue,ebx
                sgdt GDT;     
                //iretd返回调用门
                add esp,0x30
                mov eax,[esp]
                mov [esp+0x4],eax
                mov eax,[esp-0x4]
                mov [esp],eax
                pushfd          //sub 4
                sub esp,0x2C
            popfd
            popad
            //不要把操作堆栈的汇编代码写道这里，有些寄存器的值没恢复，堆栈会出问题。
            iretd
            //retf
        }
    }
    void printRegister()
    {
        DWORD GDT_ADDR = *(PDWORD)(&GDT[2]);
        WORD GDT_LIMIT = *(PDWORD)(&GDT[0]);
        printf("%x  %x   %x\n",dwH2GValue,GDT_ADDR,GDT_LIMIT);
    }
    int main(int argc, char* argv[])
    {
        //GetGdtRegister();
        char Buffer[6];
        *(DWORD*)&Buffer[0] = 0x12345678;     //eip随便填
        *(WORD*)&Buffer[4] = 0x004B;
        _asm
        {
            call fword ptr[Buffer]   //call cs:eip   
        }
        printRegister();
        getchar();
        return 0;
    }
####  中断门用retf返回(本来是iretd)
  1. 将[ESP+0x8]写到EFLAG。
  2. 将堆栈中储存的SS和ESP的值分别向低地址移动四字节。
    #include "stdafx.h"
    #include 
    DWORD dwValue;
    _declspec(naked) void func()   //0x401020
    {
             __asm
             {
                 pushad
                 pushfd
                    mov eax,[0x8003F00C]
                    mov ebx,[eax]
                    mov dwValue,ebx
                    add esp,0x2c
                    popfd
                    mov eax,[esp]
                    mov [esp-0x4],eax
                    mov eax,[esp+0x4]
                    mov [esp],eax
                    sub esp,0x30
                 popfd
                 popad
                 retf
                 //iretd    //16位用iret  64位是iretq
             }
    }
    void printValue()
    {
        printf("%x",dwValue);
    }
    int main(int argc, char* argv[])
    {
        //func();
        //中断门提权
        _asm
        {
            int 32
        }
        printValue();
        getchar();
        return 0;
    }
我们写的裸函数其实已经保留了eflag寄存器(pushfd)，中间只需要去掉eflag就行了，并不一定去popfd。
## 调用门和中断门的区别
1.调用门通过CALL FAR指令执行，RETF返回。中断门用INT指令执行，IRET或IRETD返回。
2.调用门查GDT表。中断门查IDT和GDT表。
3.CALL CS:EIP中CS是段选择子，由三部分组成。INT x指令中的x只是索引，中断门不检查RPL，只检查CPL。
4.调用门可以传参数。中断门不能传参数。
## 陷阱门
陷阱门结构
陷阱门与中断门几乎一样，段描述符中的第八位是不同的. 中断门为0 陷阱门为1。
如果按照16进制来说. 一个是E 一个是F
陷阱门的构造 以及代码调用与中断门一样. 而且参数也不能有。
###  陷阱门与中断门的不同
陷阱门与中断门唯一的不同就是 EFLAGS 位中的 IF位
中断门 -执行后 IF 设置为0（cli 清零 （不可被屏蔽））
陷阱门 -执行后 – IF不变
###  中断
CPU
必须支持中断，那么什么是中断呢？比如你挪动鼠标，正常情况下永远都会第一时间相应；敲击键盘，CPU也会第一时间响应，这就是中断带来的效果。假设没有中断，拖动鼠标或者敲一个数字可能要有几秒延迟电脑才反应过来，cpu并不会第一时间搭理你，用户体验会好吗？
中断分为可屏蔽中断和不可屏蔽中断。
中断是基于硬件的，鼠标，键盘是可屏蔽中断，电源属于不可屏蔽中断.
当我们拔掉电源之后,CPU并不是直接熄灭的，而是有电容的，此时不管你eflags的IF位是什么，都会执行 int 2中断，来进行一些收尾的动作。
中断是可以进行软件模拟的. 称为软中断. 也就是通过 **int n** 来进行模拟。 我们构造的中断门. 并且进行int n 模拟就是模拟了一次软中断。
###  实验
    kd> eq 8003f500 0040ef00`00081030
然后还是执行与中断门一样的代码。
    #include "stdafx.h"
    #include 
    DWORD dwValue;
    _declspec(naked) void func()   //0x401030
    {
             __asm
             {
                 pushad
                 pushfd
                    mov eax,[0x8003F00C]
                    mov ebx,[eax]
                    mov dwValue,ebx
                 popfd
                 popad
                 iretd    //16位用iret  64位是iretq
             }
    }
    void printValue()
    {
        printf("%x",dwValue);
    }
    int main(int argc, char* argv[])
    {
        //func();
        //陷阱门提权
        _asm
        {
            int 32
        }
        printValue();
        getchar();
        return 0;
    }
成功打印了地址。
###  对比实验
####  陷阱门
写入一个 **陷阱门** 到IDT表中。
在执行前下一个断点，查看EFL的值。
执行后
可以看到if位没有发生改变。
####  中断门
写入一个 **中断门** 到IDT表中。
    kd> eq 8003f500 0040ee00`00081030
执行前
在要去的函数中加一个int 3中断，观察efl寄存器。
if位已经清0。
## 任务段
>
> 在调用门、中断门与陷阱门中，一旦出现权限切换，那么就会有堆栈的切换。而且，由于CS的CPL发生改变，也导致了SS也必须要切换。切换时，会有新的ESP和SS(CS是由中断门或者调用门指定)这2个值从哪里来的呢？
这里就要引入TSS(Task-state segment ),任务状态段。
TSS是什么呢?TSS就是一块内存，大小为104字节，这个大小只能比104字节大，不能小于104字节，其中存的是一堆寄存器的值。结构图如下：
用结构体可以表示为：
    typedef struct TSS {
        DWORD link; // 保存前一个 TSS 段选择子，使用 call 指令切换寄存器的时候由CPU填写。
        // 这 6 个值是固定不变的，用于提权，CPU 切换栈的时候用
        DWORD esp0; // 保存 0 环栈指针
        DWORD ss0;  // 保存 0 环栈段选择子
        DWORD esp1; // 保存 1 环栈指针
        DWORD ss1;  // 保存 1 环栈段选择子
        DWORD esp2; // 保存 2 环栈指针
        DWORD ss2;  // 保存 2 环栈段选择子
        // 下面这些都是用来做切换寄存器值用的，切换寄存器的时候由CPU自动填写。
        DWORD cr3; 
        DWORD eip;  
        DWORD eflags;
        DWORD eax;
        DWORD ecx;
        DWORD edx;
        DWORD ebx;
        DWORD esp;
        DWORD ebp;
        DWORD esi;
        DWORD edi;
        DWORD es;
        DWORD cs;
        DWORD ss;
        DWORD ds;
        DWORD fs;
        DWORD gs;
        DWORD ldt_selector;//ldt段选择子,用于换ldtr寄存器，一个TSS对应一个LDT表，就算你有100个任务，那么ldtr寄存器里面存储的也是当前ldt表，也就是任务切换时，LDT表会切换，但GDT表不会切换
        // 这个暂时忽略
        DWORD io_map;
    } TSS;
图中下面部分ESP0,SS0即是0环的栈顶和SS，还有一环和二环的ESP和SS，虽然windows
没有使用一环和二环，但是我们自己实际上可以让他切换到一环或者二环。
切换CR3等于切换进程。
###  TSS的作用
intel的设计初衷是：切换任务（站在cpu的角度来说，操作系统中的线程可以称为任务）。cpu考虑到操作系统的线程在执行的时候会不停的切换，所以设计了TSS，让任务可以来回的切换。
当某一任务不执行时，就将该任务的寄存器存储到TSS这个结构中；当任务重新执行时，又将寄存器从TSS中取出，重新赋值给寄存器。
**但是操作系统并没有采用该方法切换线程(windows linux都没有这样做)。**
> 对TSS作用的理解应该仅限于存储寄存器，更任务(线程)切换没有关系。TSS的意义就在于可以同时换掉”一堆”寄存器。
###  如何找到TSS
这与tr(Task
Register)寄存器有关。tr是一个段寄存器，96位。段寄存器的值是段描述符加载的，既然是段描述符，那么就离不开GDT表。这里就有三个概念：TSS段描述符，tr寄存器和TSS任务段，具体关系如下图所示。
这里有几点来区分三个概念之间的区别和关系：
  1. TSS段描述符存在于GDT表中。
  2. tr寄存器的值是从TSS段描述符中加载出来的。
  3. TSS任务段的base和limit是从tr寄存器中读取出来的。
整个加载流程是这样的：
> 在操作系统启动时，会从gdt表中找到TSS段描述符，将该描述符加载到tr寄存器中，确定了tr寄存器也就确定了当前TSS任务段在什么位置以及有多大。
###  TSS段描述符(TSS Descriptor)
TSS段描述符属于系统段描述符，所以高四字节的第12位为0。
高四字节的第9位是一个判断位，如果此时该TSS段描述符已经被加载到tr寄存器中，那么该位为1，16进制下为B。如果该TSS段描述符没有被加载到tr寄存器中，那么该位为0，16进制下为9。
###  tr寄存器读写