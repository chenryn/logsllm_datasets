+
+ cAppClass id=*12'>
营成照务器
图16-10服务器分类的XML文件
---
## Page 299
278第三部分案例篇
。‘I 期P 。‘中
”使用子元素描述功能分类名称。服务器信息的XML数据文件用来
描述服务器的详细属性，详细内容见图16-11，属性与子元素说明见表16-2。
【data/Serverinfo.xml】（部分内容）
1.30
Linux
c/server
cuogdo/>[
SN2013-08-021
218.31.20.21
127991z61
Linux
c0>10-0-50
1
图16-11服务器信息的XML文件
表16-2属性与子元素说明
属性与子元素
含
义
ip
IP地址（唯一标识）内外网IP均可
serverserial
主机名
wip
外网 IP 地址
lip
内网IP地址
08
操作系统类别
app
应用名称，一般为应用城名
locate
服务器所处机架位置
option
功能分类ID，与服务器功能分类的XML文件中AppClass标签的id属性关联
每个管理员所负责的服务器资源通常都不一样，一般以服务器功能分类的维度划分。
OManager可为这种权限要求提供支持，实现的思路是在users表的privilges（权限角色）字
段定义服务器分类ID，其中“root”为特殊权限，代表超级管理员，所有服务器资源都可
见。账号“demo”的权限配置，以及在平台中展示的效果见图16-12。
---
## Page 300
第16章构建桌面版C/S自动化运维平台279
sain管管员码Pritkey5privlee色
00ad39a59ab56057208834dc81925±3bee9352132, 2.5, 4
zot
二
数服务器
日名服务器
) bbsdee
静心服务路
图16-12用户权限配置及展示效果
当窗体（wx.Frame）初始化时，“服务器类别”控件会自动加载数据，实现的方法是通过
遍历以上提到的两个XML数据，将当前账号的权限ID列表与服务器类别ID进行关联，获
元素与服务器类别ID进行匹配，实现源码如下：
import xml.etree.ElenentTree as ET
inport os
inport sy8
zoot_tree = ET,parse (sys,path[0]+*/data/ServerOptioninfo,xml*) t开服务暴类别 xM 文格
class_tree = ET,parse (sys -path[0]+*/data/Serverinfo,xm1′)
·行开服务器信息XML文格
root_doc = root_tree.getroot ()
class_doc=class_tree.getroot ()获得愿务暮信患 XML 文格 root节点
 获得康务尊类别 XML 文桥root 节点
clas8 ServerClassList() :
def Resurn_list (self, UserPrivileges) :
返因原务器类别、应用方注
ServerList_KEY=[1
定义返国的服务幕类别、应尾信息列表对象
定义服务器类到列票对象
serverapp=[]
定义业务应用列表对象
for root_child in zoot_doc:
通历服务器类别节点
if not root_child.get ('id') in UserPrivileges and not
14001,==[0162x90
continue
没有权限的服务器类别将被忽略
serverclass,append (root_chi1d[0] .text,encode (*gbk*) )+述加原务器类
别名称 到 serverapp
---
## Page 301
280第三部分案例篇
通过index（) 方法产生的异书判断当首是否已经存在于 serverapp 中
if class_chi1d[6] .text==root_chi1d,get (*d*) 1
try:
serverapp.index (class_chi1ld[4] . text ,encode (* gbk*))
except :
serverapp append (class_chi1d[4] . text , encode (*gbk*))
ServerList_KEY append (serverclass)
serverclass.append (serverapp)
返国结果事格式：[[*应用服务基*, [*www.a.com*, *www.b, con*]],[*数得库服务器*, [*wwwv
serverclass=[]
c,com*11...]
return ServerList_KEY
16.5.4系统升级功能
相比B/S结构程序，C/S结构的另一缺点是不方便升级，部分软件甚至要求重新安装、
重启计算机等操作。为了解决此问题，OManager在系统升级方面结合了B/S的模式，将升
级包放在远端，由管理员触发升级操作，同时不影响当前的其他操作，重启OManager程序
后即可完成升级。OManager系统升级流程图见图16-13。
（1）下载更新描述文件
OManager
updatellIS, xnl
（2）请求更新清单
（3）下载更新包
版本服务器（BTTP）
图16-13系统升级流程图
OManager系统升级的原理：首先将升级描述文件（updateMS.xml）、升级包上传至版本
服务器，由管理员触发升级操作，再通过urllib模块实现HTTP方式下载updateMS.xml文件
并进行分析，获取所有需要升级的程序包，包括远程URL及下载本地存储地址，最后遍历
下载所有升级包到指定的位置，完成整个升级过程。下面是升级描述文件updateMS.xml的
示例：
[ tmp/updateMS.xml 】
---
## Page 302
第16章构建桌面版C/S自动化运维平台281
data/Serverinfo,xnl
/data/Serverinfo.xml
data/ServerOptioninfo,xml
/data/ServerOptioninfo. xml
0Manager.10026,exe
/oManager,exe
在此XML文件中，localsrc与remotesrc分别表示本地存储地址及远程URL路径，远程
URL文件与本地路径建议保持一致，可以提高系统的可维护性，如本地的“data/Serverinfo
xml”与远程的“/data/Serverinfo.xml"，远程升级包目录结构见图16-14。
om
erinfo.xl
图16-14远程升级包存储路径
在此配置中，需要升级的程序包为OManager.exe、Serverinfo.xml、ServerOptioninfo.xml
三个，变更项包括了添加主机信息、主程序优化等，下面介绍升级步骤。
1）上传升级相关文件到版本服务器指定位置，具体见图16-14。
2）更新数据库中平台最新版本号，即更新upgrade表的version字段，如更新版本号为
“10026”；用户会根据data/config.ini中的upversion 键值与最新版本号进行匹配，当小于最新
版本号时将触发升级。
3）点击“系统升级”工具栏图标进行升级，升级成功后如图16-15所示。
升级结束后，平台根目录下多了一个“OManager.10026.exe”最新版本的程序包，见
图 16-16。
主机，见图16-17。再查看data/config.ini中的upversion键值，已经改为“10026"，说明系
统已成功升级。
---
## Page 303
282第三部分案例篇
OManager服务器管理平台2014
图16-15系统升级成功
 MD5s
2013/7/21 21:07
OManager.10026.
2014/7/1212:26
 OManager.ext
2014/7/12 12:20
 msvcm90.dll
2013/8/4 15:37
 msvcp90.dll
2013/8/4 15:37
 msvor90.dll
2013/8/4 15:37
 python27.dll
2012/4/10 23:31
 wxbase30u_net, vc90.dll
2013/12/28 2:21
 wxbase30u_vc90.dll
2013/12/28 2:21
图16-16升级后的文件列表
---
## Page 304
第16章构建桌面版C/S自动化运维平台283
日本服务器
图16-17更新后的主机列表
介绍完系统升级的操作过程，下面介绍OManager实现升级功能的源码分析，使用模块
urllib.urlopen（url).readO方法实现HTTP协议文件下载，使用xmletree.ElementTree模块实现
XML文件的分析。
def load_data (self, event) :
系统升级方法
try:
if self,button,GetLabel()==u* 关闭*;
ur1=self.updateURL+*/updateMS.xm1*
self.Destroy ()
指定升级描述文件远程及本地路径
1ocalfile=sys-path [0}+* /tmp/updateMs, xm1*
1.f not self , dovnload(ur1, localfile) :
下载升级描述文件
except Exception,e1
return
OKIwx.ICON_ERROR)
self.Destroy()
return
try:
打开升级描述文件，为下面的分析做好准备
inport xml.etree.ElementTree as ET
update_tree = ET,parse (sys.path [0]*/tnp/updateMS.xn1*)
up_doe = update_tree,getroot ()
except Exception,e:
wx .MessageBox (u* 华入更新包出错 *, u*OManager: *, stylemwx, OK[wx,ICON_ERROR)
self.Destroy()
return
try:
通历描述文件，获取升级插述文件中所有程序包的选程及本地路径，调用
download（）方法实观下截
upgrade_count=0
for cur_child in up_doc1
upgrade_count+=1
url=self,updateURL+cur_child[1] .text
---
## Page 305
284第三部分案例篇
localfile=sys-path[0]+*/*+cur_chi1d[0] text
If se1f ,dovnload (ur1, 1oca1file) ==False1
break
self,cf set(*system*, *Upversion*, self, lastversion)  更董 config.ini
self,cf.write (open (sys path[0]+*/data/config.in1*, "v*) )
最新版本号
self. ConnStaticText ,SetLabe1 (s 成功更新 “+st.r (upgrade_count) + 个数据包..**)
self ,button,SetLabel (u* 关E *)
except Exception,e1
wx.MessageBox(u* 系统文件下载失败*,*OManager*,styLe=wx,OK|wx.ICON_ERROR)
return
self,Destroy()
fina11y1
P388
event ,Skip ()
16.5.5客户端模块编写
OManager提供客户端模块开发支持，与OMserver的实现思想一样，区别是OMserver
基于HTML表单来定义.而OManager基于XRC。XRC（XMLResource）的设计来源于
wxWidgets，原理是将界面设计的工作从程序中独立出来，类似于Django开发框架中模板系
统的角色，目的是将业务逻辑与界面进行分离，好处是代码的结构会更加清晰，可读性也会
大大提高。具体做法是通过XML格式定义系统界面，当程序运行时再载入。XRC的使用手
册见 http:/wiki.wxwidgets.org/Using_XML_Resources_with_XRC。OManager 平台将功能模
块采用XRC设计，在主程序中按功能分类导人，效果见图16-18和图16-19。
食
hRtoe
MNE8rc
maLe
OManager服务器管理平台2014
图16-18功能模块菜单
OManager平台提供了最多2个控件参数的定义，控件类别支持wxSpinCtrl（微调控制
器）、wxListBox（列表控件）、wxTexiCtrl（文本输人控件）等，当然，扩展更多的控件类型
也非常简单，前提是需要了解各控件的属性及方法，其中控件值会被当成模块参数通过rpy
---
## Page 306
第16章构建桌面版C/S自动化运维平台285
传输到服务器端。下面为“bas_1001_系统日志.xre”功能模块的设计，包括一个容量控件
wxPanel对象，wxPanel对象包含了两个对象，一个文字标签控件wxStaticText对象，通过
元素定义该模块的功能文字说明：另一个对象为微调控制器wxSpinCtrl，通过
元素定义默认值，与定义控件的最小值及最大值。更多的控件介绍请参考：
http:/wikiwxwidgets.org/Using_XML_Resources_with_XRC。该功能模块的 XRC定义内容如下：
 OM
1+ x
OManaqer服务器管理平台2014
图16-19功能模块窗口
【Module/bas_1001_系统日志.xrc 】
200, 100
 功能播述：显示服务器 Mes8age 最新选择条数的记录。
30, 20
vxSP_ARROW_KEYS
---
## Page 307
286第三部分案例篇
30
1
100
30, 50