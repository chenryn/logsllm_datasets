title:On the Optimality of Optimistic Responsiveness
author:Nibesh Shrestha and
Ittai Abraham and
Ling Ren and
Kartik Nayak
On the Optimality of Optimistic Responsiveness
Ittai Abraham
PI:EMAIL
VMware Research
Ling Ren
PI:EMAIL
University of Illinois at Urbana-Champaign
ABSTRACT
Synchronous consensus protocols, by definition, have a worst-case
commit latency that depends on the bounded network delay. The
notion of optimistic responsiveness was recently introduced to
allow synchronous protocols to commit instantaneously when some
optimistic conditions are met. In this work, we revisit this notion
of optimistic responsiveness and present optimal latency results.
We present a lower bound for Byzantine Broadcast that relates
the latency of optimistic and synchronous commits when the desig-
nated sender is honest and while the optimistic commit can tolerate
some faults. We then present two matching upper bounds for toler-
ating f faults out of n = 2f +1 parties. Our first upper bound result
achieves optimal optimistic and synchronous commit latency when
the designated sender is honest and the optimistic commit can toler-
ate at least one fault. We experimentally evaluate this protocol and
show that it achieves throughput comparable to state-of-the-art
synchronous and partially synchronous protocols and under opti-
mistic conditions achieves latency better than the state-of-the-art.
Our second upper bound result achieves optimal optimistic and
synchronous commit latency when the designated sender is honest
but the optimistic commit does not tolerate any faults. The pres-
ence of matching lower and upper bound results make both of the
results tight for n = 2f + 1. Our upper bound results are presented
in a state machine replication setting with a steady-state leader
who is replaced with a view-change protocol when they do not
make progress. For this setting, we also present an optimistically re-
sponsive protocol where the view-change protocol is optimistically
responsive too.
KEYWORDS
Distributed computing; Byzantine Fault Tolerance; Synchrony; Op-
timistic Responsiveness
1 INTRODUCTION
Byzantine fault-tolerant (BFT) protocols based on a synchronous
network have a high resilience of up to one-half Byzantine faults.
In comparison, BFT protocols under asynchronous or partially syn-
chronous networks can tolerate only one-third Byzantine faults.
Although partially synchronous protocols have a lower tolerance
for Byzantine faults, they have an advantage in terms of the latency
to commit – they can commit in O(δ) time where δ is the actual
latency of the network. On the other hand, the latency for synchro-
nous protocols depends on ∆, where ∆ is a pessimistic bound on
the network delay.
∗Lead Author
Kartik Nayak
PI:EMAIL
Duke University
Nibesh Shrestha∗
PI:EMAIL
Rochester Institute of Technology
A recent work, Hybrid Consensus [22], formalized this differ-
ence by introducing a notion called responsiveness. A protocol is
responsive if its commit latency depends only on the actual net-
work delay δ, but not the pessimistic upper bound ∆. In this regard,
asynchronous and partially synchronous protocols are responsive
by design, whereas synchronous protocols are not.
For synchronous protocols, a notion called optimistic responsive-
ness was introduced by Thunderella [23]; this allows synchronous
protocols to commit responsively when some optimistic conditions
are met. Thunderella is safe against up to one-half Byzantine faults.
Moreover, if a “leader” and > 3n/4 replicas are honest, and if they
are on a “fast-path”, then replicas can commit responsively in O(δ)
time; otherwise, the protocol falls back to a “slow-path”, which has
a commit latency that depends on ∆.
The Thunderella paradigm of optimistic responsiveness requires
replicas to know which of the two paths they are in, and explicitly
switch between them. If, at some point, the optimistic conditions
cease to be met, the replicas switch to the slow-path. When they
believe the optimistic conditions start to hold again, they switch
back to the fast-path. Thunderella uses Nakamoto’s protocol [21]
or the Dolev-Strong protocol [9] as their slow-path. Thus, the slow-
path, as well as the switch between the two paths, is extremely
slow, requiring O(κ∆) and O(n∆) latency respectively (where κ is a
security parameter). The slow-path latency can be improved to 2∆
using state-of-the-art synchronous protocols [2].
Can we further improve the latency of optimistically respon-
sive synchronous protocols? Before answering the question, let us
emphasize an important point in the study of optimistic responsive-
ness: replicas do not know whether the optimistic conditions are
met. If all the replicas know, in the case of Thunderella, whether
or not fewer than 1/4 replicas are Byzantine, then we can use a
protocol with optimal latency for that setting. Under optimistic
conditions, we can use partially synchronous protocols [5, 6, 17, 27]
to commit responsively; otherwise, we can use a state-of-the-art
synchronous protocol tolerating a minority faults to commit in
∆ + O(δ) time [2, 3]. In contrast, the slow-path–fast-path switching
paradigm, even if it uses optimal protocols in the two respective
paths, still leaves a lot to be desired. If we start off in the wrong path,
then we incur an additional switching delay, making the latency
worse than either of the competing options under their respec-
tive conditions. More importantly, since there is no way to verify
whether the optimistic conditions hold, such a protocol cannot tell
when to switch to the fast-path, and hence will likely “miss out” on
some periods with optimistic conditions.
Our paper explores optimality of optimistic responsiveness with
the above restriction in mind. Specifically, we ask,
What is the optimal latency of an optimistically respon-
sive synchronous protocol?
To answer this question, we obtain upper and lower bounds for
the latency of such protocols. We also show that our protocol has
better latency and comparable throughput in practice compared to
state-of-the-art synchronous and partially synchronous protocols.
A lower bound on the latency of an optimistically respon-
sive synchronous protocol. Our first result presents a lower
bound on the latency of such optimistically responsive synchronous
protocols. Specifically, we show the following result:
Theorem 1 (Lower bound on the latency of an optimisti-
cally responsive synchronous protocol, informal). There does
not exist a Byzantine Broadcast protocol in an unsynchronized start
model that can tolerate f ≥ n/3 faults and achieve the following
simultaneously when the designated sender is honest, messages sent
by non-faulty parties arrive instantaneously, and all honest parties
start at time 0:
(i) (optimistic commit) all honest nodes commit before time O(δ)
(ii) (synchronous commit) all honest nodes commit before time 2∆ −
when there are max(1, n − 2f ) crash faults, and
O(δ) when there are f crash faults.
Thus, if a Byzantine Broadcast protocol tolerating f ≥ n/3 cor-
ruption has an optimistic (fast) commit with latency O(δ) while still
being able to tolerate max(1, n − 2f ) faults, then the synchronous
(slow) commit should have a latency ≥ 2∆−O(δ) when tolerating f
faults. This lower bound applies to protocols in an unsynchronized
start model where parties do not all start the protocol at the same
time (explained later).
Our next two results present matching upper bounds for n =
2f +1. In our protocols, when the conditions for an optimistic commit
are met, replicas commit optimistically. Otherwise, they commit
using the synchronous commit rule. Thus, intuitively, they exist
in both paths simultaneously without requiring an explicit switch.
Since all of our upper bounds require O(δ) time for the optimistic
commit, whenever appropriate, we also call it a responsive commit.
Optimal optimistic responsiveness with 2∆-synchronous la-
tency and > 3n/4-sized responsive quorum. Our first protocol
obtains optimistic responsiveness where the synchronous commit
has a commit latency of 2∆, while the responsive commit has a
latency of 2δ using quorums of size > 3n/4. Specifically, we show
the following:
are honest, and
Theorem 2 (Optimistic responsiveness with 2∆-synchronous
latency and > 3n/4-sized responsive qorum, informal). There
exists a Byzantine Broadcast protocol tolerating  3n/4 replicas
(ii) (synchronous commit) a commit latency of 2∆ + O(δ) otherwise.
Intuitively, the fundamental property that this upper bound pro-
vides in comparison to Thunderella or Sync HotStuff is simultaneity,
i.e., replicas do not need to on agree on specific paths for performing
a responsive commit or a synchronous commit. Moreover, the pa-
rameters obtained in this result are optimal. First, the early stopping
lower bound due to Dolev-Reischuk-Strong [8] states that when
the number of faults is f , and the maximum number of faults is t,
each execution of Byzantine Broadcast requires min(t + 1, f + 2)
rounds. Hence, no protocol tolerating a fault can have latency less
than 2δ. Second, the > 3n/4 quorum size is tight due to a lower
bound in Thunderella [23]; the bound says that no protocol can
have a worst-case resilience of one-half Byzantine replicas while be-
ing optimistically responsive for more than n/4 Byzantine replicas.
Finally, latency for the synchronous commit is optimal (ignoring
O(δ) delays) due to our first result.
Optimal optimistic responsiveness with ∆-synchronous la-
tency and n-sized responsive quorum. The 2∆ − O(δ) latency
bound for a synchronous commit is applicable when the optimistic
commit can tolerate max(1, n − 2f ) faults. In this result, we show
that the synchronous latency can be improved if the optimistic
commit guarantees hold only when all n = 2f + 1 replicas are
honest.
are honest, and
Theorem 3 (Optimistic responsiveness with ∆-synchronous
latency and n-sized responsive qorum, informal). There exists
a Byzantine Broadcast protocol tolerating  3n/4 replicas are
honest, the steady state commit and view change can both finish
in O(δ) time. On the other hand, even if the optimistic conditions
are not met, the protocol requires 2∆ time to do a view change and
3∆ + O(δ) time to commit a block in the steady state.
Summary of contributions. To summarize, we make the follow-
ing contributions in this work:
(1) We present a lower bound on the latency for optimistic respon-
siveness (Section 3).
(2) We then present two upper bound results. Section 4 presents an
optimal optimistically responsive protocol with 2∆-synchronous
latency tolerating at least 1 fault in the responsive commit. We
present an optimal optimistically responsive protocol with ∆-
synchronous latency tolerating no crash faults in the responsive
commit in Section 5.
(3) We present an optimistically responsive protocol that includes
an optimistically responsive view-change (Section 6).
(4) We evaluate our 2∆-synchronous protocol (Section 7).
2 MODEL AND DEFINITIONS
We consider a standard State Machine Replication (SMR) problem
used for building a fault tolerant service to process client requests.
The system consists n replicas out of which f < n/2 replicas are
Byzantine faulty. Byzantine replicas may behave arbitrarily. The
aim is to build a consistent linearizable log across all non-faulty
(honest) replicas such that the system behaves like a single non-
faulty server in the presence of f < n/2 Byzantine replicas.
Definition 4 (Byzantine Fault-tolerant State Machine Replication
[25]). A Byzantine fault-tolerant state machine replication protocol
commits client requests as a linearizable log to provide a consistent
view of the log akin to a single non-faulty server, providing the
following two guarantees.
• Safety. Honest replicas do not commit different values at the
• Liveness. Each client request is eventually committed by all hon-
same log position.
est replicas.
We assume the network between replicas includes a standard
synchronous communication channel with point-to-point, authen-
ticated links between them. Messages between replicas may take
at most ∆ time before they arrive, where ∆ is a known maximum
network delay. To provide safety under adversarial conditions, we
assume that the adversary is capable of delaying the message for
an arbitrary time upper bounded by ∆. The actual message delay in
the network is denoted by δ. We make use of digital signatures and
a public-key infrastructure (PKI) to prevent spoofing and replays
and to validate messages. Message x sent by a replica p is digitally
signed by p’s private key and is denoted by ⟨x⟩p.
Byzantine Broadcast. Our lower bound is presented for a Byzan-
tine Broadcast setting with a designated sender.