### Phase to Recover Missing Kernel Code
We provide a detailed explanation of this mechanism in Section III-B3.

### 3) Interrupt Context
In modern operating system (OS) kernels, hardware-triggered asynchronous interrupts can occur at any time. Consequently, the interrupt handler code is not tied to the context of any single process. To avoid the need for repeated recovery of this code during runtime, we include the interrupt handler's code in every application's kernel view. Our profiler uses QEMU to detect the occurrence of an interrupt. If the interrupt is not a software interrupt (such as a system call), we infer that the system has entered interrupt context. At this point, we record all kernel code addresses accessed in the interrupt context for use in all applications' customized kernel views.

### B. Runtime Phase
We describe the general design of the runtime phase in Algorithm 1 and discuss some interesting features in detail below.

#### 1) Kernel View Initialization
When loading a new kernel view configuration, FACE-CHANGE allocates memory pages for both the base kernel code and any kernel modules' code, filling them with undefined instruction (UD2) "0xf 0xb" (which raises an invalid opcode exception when executed). FACE-CHANGE then loads the kernel code specified in the kernel view configuration into its appropriate locations in the new pages. During profiling, we track the kernel control flow at the basic block level. However, instead of loading individual basic blocks, we load the entire kernel function containing the valid basic blocks. The reasons for this relaxation are:
1. Adjacent code within the same kernel function is more likely to be accessed at runtime, reducing the frequency of kernel code recovery.
2. UD2 is a 2-byte instruction. If an address range in the kernel view configuration starts from an odd-numbered address, only the first byte of UD2 will be in the kernel view, potentially causing the processor to misinterpret the fragmented UD2 as a different instruction. Loading entire kernel functions avoids this problem because the boundaries of kernel functions are aligned on powers-of-two.

To identify function boundaries, we search for a function header signature (e.g., "push ebp; mov ebp, esp" in x86 Linux kernel, binary opcodes "0x55 0x89 0xe5"). If a kernel function crosses two memory pages or a single instruction splits across pages, we continue searching from the head of the next page or the tail of the previous page to locate the complete kernel function.

After identifying and loading all kernel view code into the new pages, FACE-CHANGE redirects any kernel code access made by the application to the customized kernel view. We implement our FACE-CHANGE runtime component within a KVM hypervisor (kvm-kmod-3.6 and qemu-kvm-1.2.0) and use Extended Page Tables (EPT) to manipulate kernel code mappings. When using EPT, the guest VM maintains its own page table to translate guest virtual addresses to guest physical addresses. The hypervisor then uses EPT to transparently map the guest physical addresses to host physical addresses. During guest OS context switches, FACE-CHANGE changes the page table entries in the EPT to direct any kernel code accesses to the customized kernel view for the application (instead of the original kernel’s code).

FACE-CHANGE must also handle kernel modules' code in a customized kernel view. Kernel modules are dynamically loaded at runtime in the kernel’s heap, so during the profiling phase, we record these addresses relative to the module’s base address. Before loading modules' code into a kernel view, we traverse the kernel’s module list to identify the loading addresses for any modules marked in the kernel view configuration. Then we load the valid kernel code in the code pages for the kernel modules.

#### 2) Kernel View Switching
Figure 2 illustrates each step of the kernel view switching procedure:
1. The guest OS chooses a process to run and prepares to context switch to the new process.
2. Using VMI, we intercept this context switch and determine which customized kernel view is needed for the new application.
3. We modify the pointers to the page directory (level 2 in the EPT) corresponding to the base kernel code and all kernel modules’ code. Since kernel modules’ code pages are scattered in the kernel heap, we reuse any entries in the page directory that point to kernel data and only modify the entries pointing to the modules’ code.

We also developed optimizations to improve performance. Through experimentation, we found that switching kernel views immediately at context switches may cause the application to miss interrupts, affecting I/O performance. Instead, we switch kernel views when the code resumes user space execution after the context switch. This still satisfies the strictness goal (minimizing the attack surface) and mitigates performance degradation caused by missed interrupts. Additionally, we check whether the previous and next processes use the same kernel view, avoiding an additional kernel view switch if they do.

#### 3) Kernel Code Recovery
There are two situations where FACE-CHANGE may need to recover missing kernel code:
1. **Incomplete Kernel View Generated During Profiling:**
   - Testing in a controlled runtime environment without introducing attacks, we found that most benign kernel recoveries are triggered due to missing code for handling interrupts. For example, KVM provides a para-virtualized clock device to the guest VM. This KVM-specific code cannot be included in the kernel view during profiling in QEMU. Thus, at runtime, FACE-CHANGE needs to recover the missing kernel functions in chronological order: `kvm_clock_get_cycles → kvm_clock_read → pvclock_clocksource_read → native_read_tsc`.
   - Interrupt handling code is not bound to any process and can be triggered by hardware interrupts at any time. In the profiling phase, we may not observe all possible interrupts for this application. Before recovering missing code, we inspect the current call stack to determine whether the current execution is in interrupt context (through backtracking the current function traces). Thereafter, we recover the missing kernel code to correctly handle those interrupts.
   - All other benign kernel code recoveries due to incomplete profiling of the application’s execution paths are recorded as a reference for the administrator to improve the profiling test suite.

2. **Anomalous Execution Caused by Malicious Attacks:**
   - User-level malware may hijack a normal process to execute shellcode that requests kernel services not in the customized kernel view. Additionally, kernel-level rootkits can detour the kernel’s execution path to their payload’s malicious code, which will not be in any application’s kernel view. FACE-CHANGE is designed to report suspicious execution traces but still recovers the kernel code in such cases. To track the provenance of the attack, we record any recovered functions and backtrack the anomalous execution’s call stack to find the origin of the invocation chain for later analysis.

As mentioned in Section III-B1, we fill any kernel code space not in the kernel view with UD2 "0xf 0xb". When executed, UD2 raises an invalid opcode exception, causing a trap to the hypervisor (step 4 in Figure 2). After intercepting the trap, we check the faulting address and try to fetch the missing kernel function from the original kernel code pages (step 5 in Figure 2).

### Implementation Details
During the implementation of the kernel code recovery mechanism, we fixed an interesting cross-view bug in FACE-CHANGE. If no customized kernel view is enabled for a specific process, it will have a full kernel view. When executing this process, its kernel execution may be interrupted, or the process may voluntarily give up the CPU. If we enable a customized kernel view for that process at this time and the process is re-scheduled by the kernel, some functions in the process’ execution stack may not be in the new kernel view. An example of this situation is shown in Figure 3.

In this case, the process was re-scheduled while executing `pipe_poll` at address `0xc0211370`. The invocation chain in the stack is:
```
syscall_call → sys_poll → do_sys_poll
```
We find that `sys_poll` and `do_sys_poll` are not in the new customized kernel view, so their code regions are filled with UD2 (shown in red). If we recover `pipe_poll` and return to its caller (`do_sys_poll`), the process will execute undefined instructions, leading to an error.