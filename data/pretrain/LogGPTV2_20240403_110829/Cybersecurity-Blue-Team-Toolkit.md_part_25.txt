Metasploitable2 also has deliberately vulnerable web applications
preinstalled. The web server starts automatically when Metasploitable2
is booted. To access the web applications, open a web browser and enter
the IPv4 address you have been using since [Figure
10.19](#c10.xhtml#c10-fig-0019). I can access mine by browsing to
`http://192.168.124.140`. As you see in [Figure
10.22](#c10.xhtml#c10-fig-0022){#c10.xhtml#R_c10-fig-0022}, there are
web applications that can be accessed from this page.
![[**[Figure 10.22](#c10.xhtml#R_c10-fig-0022){#c10.xhtml#c10-fig-0022
role="doc-backlink"}:**]{.figureLabel} Metasploitable2 web application
home page](Images/c10f022.jpg){.center width="436" height="333"}
The Mutillidae web application contains all the vulnerabilities from the
OWASP Top Ten (see [Figure
10.23](#c10.xhtml#c10-fig-0023){#c10.xhtml#R_c10-fig-0023}). If you
scroll through the menus starting with the OWASP Top 10, the menus will
cascade into subdirectories of vulnerabilities, including form caching
and click‐jacking. Mutillidae allows the user to change the security
level from 0 (completely and totally insecure) to 5 (secure).
Additionally, three levels of hints are provided, ranging from "Level 0
-- I try harder" (no hints) to "Level 2 -- noob" (maximum hints). If the
application is damaged by user injections and hacks, clicking the Reset
DB button resets the application to its original state.
![[**[Figure 10.23](#c10.xhtml#R_c10-fig-0023){#c10.xhtml#c10-fig-0023
role="doc-backlink"}:**]{.figureLabel} Purposefully vulnerable scripts
of OWASP Top 10](Images/c10f023.jpg){.center width="751" height="465"}
Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application, and it
really is damn vulnerable. As described on the DMVA home page shown in
[Figure 10.24](#c10.xhtml#c10-fig-0024){#c10.xhtml#R_c10-fig-0024}, its
main purpose is to help security professionals test their skills
[]{#c10.xhtml#Page_145 .pagebreak title="145" role="doc-pagebreak"}and
tools in a legal environment and help web developers better understand
the processes of securing web applications.
![[**[Figure 10.24](#c10.xhtml#R_c10-fig-0024){#c10.xhtml#c10-fig-0024
role="doc-backlink"}:**]{.figureLabel} DVWA home
page](Images/c10f024.jpg){.center width="751" height="516"}
[]{#c10.xhtml#Page_146 .pagebreak title="146" role="doc-pagebreak"}The
default DVWA username is *admin*, and the default password is
*password*. Once you\'re inside the DVWA, you have the option of
choosing different vulnerabilities and then using this tool to learn
about each vulnerability and attempting to compromise the web
application with that vulnerability.
For example, one of the vulnerabilities is SQL injection (SQLi). SQLi is
a technique that is often used to attack data‐driven applications using
code injection. This is done by including portions of the SQL statement
in an entry field in an attempt to get the website to pass new commands
to the database. The vulnerability occurs when user input is not valid
and is unexpectedly executed. It is a well‐loved attack against
websites, but it can be used to attack any type of MySQL, MSSQL, or
PostgreSQL database. To learn how to create the rogue SQL commands, just
use the DVWA to experiment.
:::
::: section
[]{#c10.xhtml#c10-sec-0012}
## Meterpreter {#c10.xhtml#head-2-79}
The discovery scan completed by Metasploitable is not nearly as robust
as the scan you will get from your vulnerability management program. If
you still have Nexpose Community installed, launch a vulnerability scan
using the full audit template against the Metasploitable2 machine. The
list of possible exploits you can use may include exploits that can give
you a shell on a system.
A successful exploit can give you access to a target system in a
multitude of ways. The premier access of choice is a meterpreter shell.
A command shell is nice, and PowerShell is even nicer, but until you
have a meterpreter shell on a Windows system, you\'ve not experienced
perfect red team bliss. No one forgets his or her first meterpreter
shell. Teaching Metasploit for the past couple of years, I\'ve had
students astounded when they see the power embedded in a meterpreter
shell on a compromised system. You can steal hashes of passwords, take
screenshots, explore hard drives, escalate privileges, and ultimately
drop a proxy pivot to explore the rest of the network undetected. You
literally have the SSH keys to the kingdom.
Meterpreter is a proprietary Metasploit payload that gives you an
interactive shell running in memory. You do not execute meterpreter on a
drive. There are no remnants in logs, and it is extremely difficult to
be detected by anyone watching tasks running on a device. You are
running a service on the compromised machine, and one of the unique
features of this shell is you can hop from one service to another to
remain undetected. Meterpreter offers the usual command‐line interface,
including command history and tab completion.
:::
:::
[]{#c11.xhtml}
::: {#c11.xhtml#sbo-rt-content}
# []{#c11.xhtml#Page_147 .pagebreak title="147" role="doc-pagebreak"}[]{#c11.xhtml#c11}[CHAPTER 11]{.chapterNumber} [Web Application Security]{.chapterTitle}
::: section
[]{#c11.xhtml#c11-sec-0001}
WHAT YOU WILL LEARN IN THIS CHAPTER:
-   [Web Development]{#c11.xhtml#c11-li-0001}
-   [Information Gathering]{#c11.xhtml#c11-li-0002}
-   [DNS]{#c11.xhtml#c11-li-0003}
-   [Defense in Depth]{#c11.xhtml#c11-li-0004}
-   [Offense: Burp Suite]{#c11.xhtml#c11-li-0005}
I was flying on a Delta flight from Atlanta to Denver this past summer
and had been upgraded to first class. I recognize that some people hate
flying and, like my husband, hate being talked to by strangers on a
flight. My normal mode of operations is to smile and say hello and leave
it there. If my seat mate says hello back, then conversation may ensue.
Otherwise, I\'m happy to put my noise‐cancelling headphones on and watch
a movie. On this flight, I found my flying companion was a web
application developer and was flying to Denver to meet with venture
capitalists to show them the final product. Of course, being a geek,
I\'m terribly interested and ask all sorts of questions. To most of
them, he answered, "That\'s proprietary, and I can\'t share." Toward the
end of our trip, he asked me what I did. I told him I work for Rapid7 as
a consultant and teach security classes---mostly vulnerability
management and Metasploit, but I dabble in application security and
incident detection and response. To that, he replied, "What\'s that?"
That is the mind‐set of some web application developers I have met. They
are full of wonderful ideas and a vast knowledge of coding, but when it
comes to security, not a single clue. How can you deliver an application
and not factor in security? What was even more eye‐opening was seeing
the advertisement during the Super Bowl the following year for the
application this guy helped []{#c11.xhtml#Page_148 .pagebreak
title="148" role="doc-pagebreak"}create. My immediate thought was that I
hoped he remembered our conversation on the value of the software
development lifecycle (SDLC).
:::
::: section
[]{#c11.xhtml#c11-sec-0002}
## Web Development {#c11.xhtml#head-2-80}
It takes a lot of work to create really great applications and even more
to maintain the evolution of those applications over time. In the past
20 years, the Internet has progressed exponentially. Take, for example,
the original Facebook page, which was called `www.aboutface.com` in
1999. If you use the Internet archive site called the Wayback Machine at
`www.archive.org`, you can see what Facebook looked like two decades ago
(see [Figure 11.1](#c11.xhtml#c11-fig-0001){#c11.xhtml#R_c11-fig-0001}).
What I love about the Wayback Machine is that if you want, you can
right‐click the website archived and view the page source.
![[**[Figure 11.1](#c11.xhtml#R_c11-fig-0001){#c11.xhtml#c11-fig-0001
role="doc-backlink"}:**]{.figureLabel} The original `Facebook.com` in
2000 called `AboutFace.com`](Images/c11f001.jpg){.center width="642"
height="914"}
The progression of the Web has led to a need for the evolution of web
application testing. Back in the day, a web page was a static page, and
the flow of information was from server to browser. Most sites did not
require any type of authentication because it just wasn\'t needed. Any
issue you had was as a result of vulnerabilities in a web server. Now
what you see are web applications that are dynamic and customized for
each user, and the problem is private data being exposed to the public,
not just web server files.
Every developer I know says that the foundation of a strong application
is the framework and architecture it is built on. Web application
architecture is the interaction between applications, middleware, and
the databases the application relies on. It is critical that when a user
hits the Submit button through any browser that the information is
processed correctly. Middleware is the software that provides services
to applications besides those offered by the operating system. Any
software between the kernel and the application can be middleware. Some
describe middleware as "software glue."
You type in a URL, and the browser finds the Internet‐facing server that
hosts that website and asks for that particular page within that site.
The server responds by sending the appropriate files to the browser to
execute. Now you get to interact with the website. The most important
thing here is the code. The code gets parsed by the browser, which may
or may not have specific instructions to tell the browser what to do.
The web application framework and architecture have all the components
and routines and interchanges needed for the application.
Ultimately, the design of web applications is for usability. You want an
application to accomplish goals efficiently. This is critical for many
organizations since the majority of global business and our lives are on
the Internet. Every application and device today is built with the idea
of web‐based interaction. You have Amazon for shopping, Instagram to
keep up with friends, JPMorgan Chase for banking, and all the email you
send using Google or Yahoo!. Even when you have the assurance that these
web applications are protected and the []{#c11.xhtml#Page_149 .pagebreak
title="149" role="doc-pagebreak"}lock icon appears in the browser and
the application states that they are secure because they are using SSL
or they are compliant with PCI‐DSS, the websites have fallen to
vulnerabilities such as SQL injection, broken access controls,
cross‐site scripting, or request forgery. Even if SSL is being used,
which encrypts links between a web server and a browser, there can still
be vulnerabilities in the web application.
[]{#c11.xhtml#Page_150 .pagebreak title="150" role="doc-pagebreak"}To
make it even more complicated as a security professional, you are faced
with all the different frameworks and languages that web applications
are built with. The most popular ones include the following:
-   [**Angular:** Framework built by Google and uses
    JavaScript]{#c11.xhtml#c11-li-0006}
-   [**Ruby on Rails:** Framework for the object‐oriented
    Ruby]{#c11.xhtml#c11-li-0007}
-   [**YII:** Open‐source framework using PHP5]{#c11.xhtml#c11-li-0008}
-   [**MeteorJS:** Developed in `Node.js`, primarily for mobile
    devices]{#c11.xhtml#c11-li-0009}
-   [**Django:** Written in Python for complex
    websites]{#c11.xhtml#c11-li-0010}
Choosing the right framework for development in this dynamic process is
critical. Some of these languages specifically answer the need for
speed, scalability, or complexity. No matter the framework or language,
security should always be factored into the SDLC, no matter the size of
the project, and even more so in the applications that store personal
information of the users who utilize that software. As you see in
[Figure 11.2](#c11.xhtml#c11-fig-0002){#c11.xhtml#R_c11-fig-0002}, the
SDLC begins with analyzing the requirements of a project. Questions
asked at this stage should not be limited to the who, what, when, and
where of the application, but should also include a risk assessment of
the impact of a compromise of this theoretical application you\'re
designing.
![[**[Figure 11.2](#c11.xhtml#R_c11-fig-0002){#c11.xhtml#c11-fig-0002
role="doc-backlink"}:**]{.figureLabel} The software development
lifecycle with security functions embedded at every stage of the
process](Images/c11f002.jpg){.center width="745" height="105"}
Looking back over the past year, some of the biggest breaches were
accomplished by either weak security practices like a misconfigured
database, social engineering, or vulnerabilities in web applications.
The rise of the Internet of Things has led to many complicated
problems---especially when some of the life‐saving devices such as
pacemakers or insulin pumps are shown to be vulnerable through poor
encryption---and leaves software susceptible to malware infection. Even
the cars we drive have to be evaluated on the size of their attack
surface and network architecture. If your automobile offers features
like Bluetooth, Wi‐Fi, cellular network connections, keyless entry, or
radio‐readable tire pressure, monitoring systems can offer a security
vulnerability to gain an initial foothold into the car\'s network.
There are many reasons for problems in securing web applications. One of
the major problems is the lack of developers\' security awareness, as
mentioned at the beginning of the chapter. Add to that the customization
of web applications []{#c11.xhtml#Page_151 .pagebreak title="151"
role="doc-pagebreak"}by in‐house staff, the threat actors developing new
web attack techniques, and time constraints where you have to get a web
application to production as soon as humanly possible. This all leads to
serious threats to both the company hosting the web application and the
users who share their credit card information on them.
:::
::: section
[]{#c11.xhtml#c11-sec-0003}
## Information Gathering {#c11.xhtml#head-2-81}
Web application testing starts very much like the penetration testing
discussed in [Chapter 10](../Text/c10.xhtml), "Metasploit." You must get
authority to test a target, and validation of ownership is critical.
With web application reconnaissance specifically, you have a few other
resources to utilize, such as Whois and DNSdumpster.
In [Lab 11.1](#c11.xhtml#c11-fea-0001){#c11.xhtml#R_c11-fea-0001},
you\'ll be validating the owner of the web application you are testing.
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .feature3}
### [LAB 11.1](#c11.xhtml#R_c11-fea-0001){#c11.xhtml#c11-fea-0001 role="doc-backlink"}: VALIDATING TARGETS {#c11.xhtml#head-2-82}
::: section
[]{#c11.xhtml#c11-sec-0004}
1.  [Whois is a protocol for searching Internet registration databases
    for domain names and IP addresses. Open your browser and navigate to
    `https://www.whois.icann.org`.]{#c11.xhtml#c11-li-0011}
    Make sure you are going to the correct site. Some clones of Whois
    are trying to sell you something. As you see in [Figure
    11.3](#c11.xhtml#c11-fig-0003){#c11.xhtml#R_c11-fig-0003}, ICANN\'s
    WHOIS Lookup gives you the ability to look up a domain owner.
    ![[**[Figure
    11.3](#c11.xhtml#R_c11-fig-0003){#c11.xhtml#c11-fig-0003
    role="doc-backlink"}:**]{.figureLabel} ICANN WHOIS for domain
    lookup](Images/c11f003.jpg){.center width="639" height="348"}
2.  [Where the form asks you to enter a domain, type in
    `www.example.com`.]{#c11.xhtml#c11-li-0012}
    In [Figure
    11.4](#c11.xhtml#c11-fig-0004){#c11.xhtml#R_c11-fig-0004}, you see
    that `www.example.com` is a domain that has been owned by the
    Internet Assigned Numbers Authority (IANA) since
    1992.[]{#c11.xhtml#Page_152 .pagebreak title="152"
    role="doc-pagebreak"}