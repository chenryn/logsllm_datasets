# 适用于Android和iOS的Instagram App中的远程代码执行漏洞
|
##### 译文声明
本文是翻译文章，文章原作者 checkpoint，文章来源：research.checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
Instagram每天上传超过100+百万张照片，是最受欢迎的社交媒体平台之一。
基于这个原因，我们决定测试适用于Android和iOS操作系统的Instagram应用的安全性。
在其中我们发现了一个严重漏洞，可以用来在受害者的手机上远程执行任意代码。
我们进行此研究的关注方向是测试Instagram使用的第三方项目组件。
现如今，许多软件开发人员，无论其项目规模大小，都会在其软件中使用开源项目。在此次研究的最后，我们在Instagram使用的`Mozjpeg`（一个开源项目用作其JPEG格式解码器）库中发现了一个漏洞。
在我们下面描述的攻击情形中，攻击者只需要通过电子邮件，或其他媒体交换平台将图像发送给受害者。 当受害者打开Instagram应用程序时，就会执行恶意代码。
## 告诉我你的朋友是谁，我会告诉你他的漏洞
我们都知道，即使是大公司大都也依赖于开源项目，并且这些项目几乎不经过修改就集成到了他们的产品中。
大多数使用第三方开源项目的公司都对其进行了声明，但并非所有库都显示在该应用程序的“About”页中。
为了确保能查看到所有的库最好的办法是查看Instagram应用的`lib-superpack-zstd`目录：
在下图中，可以看到当使用Instagram上传图像时，将加载三个共享库：`libfb_mozjpeg.so`，`libjpegutils_moz.so`和`libcj_moz.so`。
`moz`后缀是`mozjpeg`的缩写，`mozjpeg`是Mozilla JPEG编码器项目的缩写，我们需要了解一些这些模块都做了什么？
## Mozjpeg是什么？
让我们从`JPEG`格式的简要历史开始。JPEG是一种自1990年代初期以来就存在的图像文件格式，它基于有损压缩的概念，这意味着在压缩过程中会丢失一些信息，但是人眼可以忽略不计。Libjpeg是Windows，Mac和Linux操作系统中内置的基准JPEG编码器，由一个非正式的独立小组维护。该库试图在编码速度和质量与文件大小之间取得平衡。
相反，[Libjpeg-turbo](https://www.libjpeg-turbo.org/)是libjpeg的高性能替代品，并且是大多数Linux发行版的默认库。该库旨在在编码和解码期间使用较少的CPU时间。
2014年3月5日，Mozilla发布了[Mozjpeg](https://github.com/mozilla/mozjpeg)项目，这是一个基于libjpeg-turbo之上的JPEG编码器，目的是为Web图像提供更好的压缩效果，但会降低性能。
在Instagram的使用中将mozjpeg库拆分为3个不同的共享对象：
  * libfb_mozjpeg.so –负责Mozilla特定的解压缩导出的API。
  * libcj_moz.so –解析图像数据的libjeg-turbo。
  * libjpegutils_moz.so –两个共享对象之间的连接器。它包含JNI调用以从Java应用程序端调用解压缩的API。
## Fuzzing
我们在CPR的团队建立了一个多处理器模糊测试实验室，通过我们以往的[Adobe
Research](https://research.checkpoint.com/50-adobe-cves-in-50-days/)为我们带来了惊人的结果，因此我们决定将模糊测试工作也扩展到Mozjpeg。
由于libjpeg-turbo已经被[fuzz测试多次](https://seclists.org/fulldisclosure/2013/Nov/83)，因此我们把精力集中专注于Mozjpeg。
Mozilla在libjpeg-turbo之上所做的主要添加是压缩算法，因此这才是我们研究的重点。
AFL是我们首选的武器，因此自然而然地我们必须为其编写harness。
要编写harness，我们必须了解如何使用Mozjpeg解压功能。
幸运的是，Mozjpeg附带了一个代码示例，说明了如何使用该库：
    METHODDEF(int)
    do_read_JPEG_file(struct jpeg_decompress_struct *cinfo, char *filename)
    {
      struct my_error_mgr jerr;
      /* More stuff */
      FILE *infile;                 /* source file */
      JSAMPARRAY buffer;            /* Output row buffer */
      int row_stride;               /* physical row width in output buffer */
      if ((infile = fopen(filename, "rb")) == NULL) {
        fprintf(stderr, "can't open %s\\n", filename);
        return 0;
      }
    /* Step 1: allocate and initialize JPEG decompression object */
      /* We set up the normal JPEG error routines, then override error_exit. */
      cinfo->err = jpeg_std_error(&jerr.pub);
      jerr.pub.error_exit = my_error_exit;
      /* Establish the setjmp return context for my_error_exit to use. */
      if (setjmp(jerr.setjmp_buffer)) {
        jpeg_destroy_decompress(cinfo);
        fclose(infile);
        return 0;
      }
    /* Now we can initialize the JPEG decompression object. */
      jpeg_create_decompress(cinfo);
      /* Step 2: specify data source (eg, a file) */
      jpeg_stdio_src(cinfo, infile);
      /* Step 3: read file parameters with jpeg_read_header() */
      (void)jpeg_read_header(cinfo, TRUE);
      /* Step 4: set parameters for decompression */
      /* In this example, we don't need to change any of the defaults set by
       * jpeg_read_header(), so we do nothing here.
       */
      /* Step 5: Start decompressor */
      (void)jpeg_start_decompress(cinfo);
      /* JSAMPLEs per row in output buffer */
      row_stride = cinfo->output_width * cinfo->output_components;
      /* Make a one-row-high sample array that will go away when done with image */
      buffer = (*cinfo->mem->alloc_sarray)
                    ((j_common_ptr)cinfo, JPOOL_IMAGE, row_stride, 1);
      /* Step 6: while (scan lines remain to be read) */
      /*           jpeg_read_scanlines(...); */
      while (cinfo->output_scanline output_height) {
        (void)jpeg_read_scanlines(cinfo, buffer, 1);
        /* Assume put_scanline_someplace wants a pointer and sample count. */
        put_scanline_someplace(buffer[0], row_stride);
      }
      /* Step 7: Finish decompression */
      (void)jpeg_finish_decompress(cinfo);
      /* Step 8: Release JPEG decompression object */
      jpeg_destroy_decompress(cinfo);
      fclose(infile);
      return 1;
    }
但是，为确保我们在Mozjpeg中发现的任何崩溃都影响Instagram本身，我们需要了解Instagram是如何将Mozjpeg集成到其代码中的。
幸运的是，下面你可以看到Instagram直接复制粘贴了该库的最佳实践：
如上所示，他们真正改变的唯一一件事就是将示例代码中的`put_scanline_someplace`函数替换为利用`memcpy`的`read_jpg_copy_loop`函数。
我们的`harness`从AFL接收生成的图片文件，并将它们发送到封装的Mozjpeg解压函数。
我们仅用30个核心的CPU跑了fuzzer一天，就收到了AFL通知我们的447次独特的崩溃。
在对结果进行分类之后，我们发现了与解析JPEG图像`Size`有关的有趣崩溃。 崩溃是一个越界写，我们决定专注研究它。
## CVE-2020-1895
存在漏洞的函数是`read_jpg_copy_loop`，它在解压缩过程中产生了整数溢出。
漏洞的函数在解析JPEG图像文件时处理图像尺寸不恰当。下面是原始漏洞函数的伪代码：
    width = rect->right - rect->bottom;
    height = rect->top - rect->left;
    allocated_address = __wrap_malloc(width*height*cinfo->output_components);// output_scanline;
       if ( (unsigned int)output_scanline >= cinfo->output_height )
          break;
        //reads one line from the file into the cinfo buffer
        jpeg_read_scanlines(cinfo, line_buffer, 1);
        if ( output_scanline >= Rect->left && output_scanline top )
        {
            memcpy(allocated_address + bytes_copied , line_buffer, width*output_component);// output_component`告诉我们每个像素代表多少字节。
此变量的变化范围在1(灰度)，3(RGB) 和 4(RGB + Alpha\CMYK\etc)之间不等。
除了高度和宽度，`output_component`也完全由攻击者控制。它是从文件中解析的，并且未针对文件中可用的剩余数据进行验证。
`__warp_malloc`期望其参数在32位寄存器中传递！这意味着，如果我们可以使分配大小超过（2 ^
32）个字节，则将发生整数溢出，从而导致分配的大小比预期的小得多。
分配的尺寸是通过将图片的宽度，高度和`output_components`相乘得出的。这些大小不受检查，由我们控制。滥用它们便会得到我们想要的整数溢出。
    __wrap_malloc(width * height * cinfo->output_components);//    * 我们能否控制（甚至部分控制）我们破坏的数据的内容？
>   * 我们可以控制要破坏的数据的长度吗？
>   * 我们可以控制溢出的已分配块的大小吗？
>
最后一个问题尤其重要，因为在`Jemalloc/LFH`（或每个基于bucket的分配器）中，如果我们无法控制要破坏的块的大小，则可能难以对堆进行布局以进一步破坏一个特定目标结构（如果该结构的大小明显不同）。
一眼望去，关于我们控制内容的能力的第一个问题的答案似乎是“是”，因为我们可以控制图像数据的内容。
现在，转到第二个问题–控制我们破坏数据的长度。
答案也显然是“是”，因为`memcpy`循环逐行复制文件，并且复制的每一行的大小都是由攻击者控制的`width`参数和`output_component`的乘积。
关于我们破坏的缓冲区大小的第三个问题的答案是微不足道的。
由于它是由`width * height * cinfo->
output_components`控制的，因此我们编写了一个小Python脚本，该脚本根据整数溢出的影响，根据希望分配的块大小，为我们提供了这三个参数的含义：
    import sys
    def main(low=None, high=None):
        res = []
        print("brute forcing...")
        for a in range(0xffff):
            for b in range(0xffff):
                 x = 4 * (a+1) * (b+1) - 2**32
                 if 0  low)) and (not high or x <= high):
                            res.append((x, a+1, b+1)) 