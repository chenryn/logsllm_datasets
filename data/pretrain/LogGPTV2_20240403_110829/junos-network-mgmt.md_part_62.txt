Products from vendors such as Concord Communications, Inc., and InfoVista, Inc., provide support for
the Juniper Networks Firewall MIB with their native Juniper Networks device drivers.
Monitor Output Bytes per Queue
You can use the Juniper Networks enterprise ATM CoS MIB to monitor outbound traffic, per virtual
circuit forwarding class, per interface. (See Table 72 on page 748.)
Table 72: Outbound Counters for ATM Interfaces
Indicator Name Outbound Counters
MIB JUNIPER-ATM-COS-MIB
Variable jnxCosAtmVcQstatsOutBytes
Index ifIndex.atmVclVpi.atmVclVci.jnxCosFcId
749
Table 72: Outbound Counters for ATM Interfaces (Continued)
Indicator Name Outbound Counters
Description Number of bytes belonging to the specified forwarding class that were transmitted
on the specified virtual circuit.
SNMP version SNMPv2
Non-ATM interface counters are provided by the Juniper Networks enterprise-specific CoS MIB, which
provides information shown in Table 73 on page 749.
Table 73: Outbound Counters for Non-ATM Interfaces
Indicator Name Outbound Counters
MIB JUNIPER-COS-MIB
Table jnxCosIfqStatsTable
Index jnxCosIfqIfIndex.jnxCosIfqFc
Variables jnxCosIfqTxedBytes
jnxCosIfqTxedPkts
Description Number of transmitted bytes or packets per interface per forwarding class
SNMP version SNMPv2
Calculate Dropped Traffic
You can calculate the amount of dropped traffic by subtracting the outbound traffic from the incoming
traffic:
Dropped = Inbound Counter â€“ Outbound Counter
750
You can also select counters from the CoS MIB, as shown in Table 74 on page 750.
Table 74: Dropped Traffic Counters
Indicator Name Dropped Traffic
MIB JUNIPER-COS-MIB
Table jnxCosIfqStatsTable
Index jnxCosIfqIfIndex.jnxCosIfqFc
Variables jnxCosIfqTailDropPkts
jnxCosIfqTotalRedDropPkts
Description The number of tail-dropped or RED-dropped packets per interface per forwarding
class
SNMP version SNMPv2
Health Monitoring with SNMP
IN THIS SECTION
Health Monitoring Overview | 751
Configure Health Monitoring on Devices Running Junos OS | 752
Configure Health Monitoring | 756
751
Health Monitoring Overview
Health monitoring is an SNMP feature that extends the RMON alarm infrastructure to provide
monitoring for a predefined set of objects (such as file system usage, CPU usage, and memory usage),
and for Junos OS processes.
You enable the health monitor feature using the health-monitor statement at the [edit snmp] hierarchy
level. You can also configure health monitor parameters such as a falling threshold, rising threshold, and
interval. If the value of a monitored object exceeds the rising or falling threshold, an alarm is triggered
and an event may be logged.
The falling threshold is the lower threshold for the monitored object instance. The rising threshold is the
upper threshold for the monitored object instance. Each threshold is expressed as a percentage of the
maximum possible value. The interval represents the period of time, in seconds, over which the object
instance is sampled and compared with the rising and falling thresholds.
Events are only generated when a threshold is first crossed in any one direction, rather than after each
sample interval. For example, if a rising threshold alarm, along with its corresponding event, is raised, no
more threshold crossing events occur until a corresponding falling alarm occurs.
System log entries for health monitor events have a corresponding HEALTHMONITOR tag and not a
generic SNMPD_RMON_EVENTLOG tag. However, the health monitor sends generic RMON
risingThreshold and fallingThreshold traps. You can use the show snmp health-monitor operational command
to view information about health monitor alarms and logs.
When you configure the health monitor, monitoring information for certain object instances is available,
as shown in Table 75 on page 751.
Table 75: Monitored Object Instances
Object Description
jnxHrStoragePercentUsed.1 Monitors the /dev/ad0s1a: file system on the switch. This is the root file system
mounted on /.
jnxHrStoragePercentUsed.2 Monitors the /dev/ad0s1e: file system on the switch. This is the configuration file
system mounted on /config.
jnxOperatingCPU (RE0) Monitors CPU usage by the Routing Engine (RE0).
jnxOperatingBuffer (RE0) Monitors the amount of memory available on the Routing Engine (RE0).
752
Table 75: Monitored Object Instances (Continued)
Object Description
sysApplElmtRunCPU Monitors the CPU usage for each Junos OS process (also called daemon). Multiple
instances of the same process are monitored and indexed separately.
sysApplElmtRunMemory Monitors the memory usage for each Junos OS process. Multiple instances of the
same process are monitored and indexed separately.
SEE ALSO
falling-threshold (Health Monitor)
interval (Health Monitor)
rising-threshold (Health Monitor)
show snmp health-monitor
Configure Health Monitoring on Devices Running Junos OS
IN THIS SECTION
Monitored Objects | 753
Minimum Health Monitoring Configuration | 755
Configure the Falling Threshold or Rising Threshold | 755
Configure the Interval | 756
Log Entries and Traps | 756
As the number of devices managed by a typical network management system (NMS) grows and the
complexity of the devices themselves increases, it becomes increasingly impractical for the NMS to use
polling to monitor the devices. A more scalable approach is to rely on network devices to notify the
NMS when something requires attention.
753
On Juniper Networks routers, RMON alarms and events provide much of the infrastructure needed to
reduce the polling overhead from the NMS. However, with this approach, you must set up the NMS to
configure specific MIB objects into RMON alarms. This often requires device-specific expertise and
customizing of the monitoring application. In addition, some MIB object instances that need monitoring
are set only at initialization or change at runtime and cannot be configured in advance.
To address these issues, the health monitor extends the RMON alarm infrastructure to provide
predefined monitoring for a selected set of object instances (for file system usage, CPU usage, and
memory usage) and includes support for unknown or dynamic object instances (such as Junos OS
processes).
Health monitoring is designed to minimize user configuration requirements. To configure health
monitoring entries, include the health-monitor statement at the [edit snmp] hierarchy level:
[edit snmp]
health-monitor {
falling-threshold percentage;
interval seconds;
rising-threshold percentage;
idp {
falling-threshold percentage;
interval seconds;
rising-threshold percentage;
}
}
Configuring monitoring events at the [edit snmp health-monitor] hierarchy level sets polling intervals for
the overall system health. If you set these same options at the [edit snmp health-monitor idp] hierarchy
level, an SNMP event is generated by the device if the percentage of dataplane memory utilized by the
intrusion detection and prevention (IDP) system rises above or falls below your settings.
You can use the show snmp health-monitor operational command to view information about health monitor
alarms and logs.
This topic describes the minimum required configuration and discusses the following tasks for
configuring the health monitor:
Monitored Objects
When you configure the health monitor, monitoring information for certain object instances is available,
as shown in Table 76 on page 754.
754
Table 76: Monitored Object Instances
Object Description
jnxHrStorageP Monitors the following file system on the router or switch:
ercentUsed.1
/dev/ad0s1a:
This is the root file system mounted on /.
jnxHrStorageP Monitors the following file system on the router or switch:
ercentUsed.2
/dev/ad0s1e:
This is the configuration file system mounted on /config.
jnxOperatingC Monitors CPU usage for Routing Engines (RE0 and RE1). The index values assigned to Routing
PU (RE0) Engines depend on whether the Chassis MIB uses a zero-based or ones-based indexing scheme.
Because the indexing scheme is configurable, the proper index is determined when the router or
switch is initialized and when there is a configuration change. If the router or switch has only
jnxOperatingC one Routing Engine, the alarm entry monitoring RE1 is removed after five failed attempts to
PU (RE1) obtain the CPU value.
jnxOperatingB Monitors the amount of memory available on Routing Engines (RE0 and RE1). Because the
uffer (RE0) indexing of this object is identical to that used for jnxOperatingCPU, index values are adjusted
depending on the indexing scheme used in the Chassis MIB. As with jnxOperatingCPU, the alarm
entry monitoring RE1 is removed if the router or switch has only one Routing Engine.
jnxOperatingB
uffer (RE1)
sysApplElmtRu Monitors the CPU usage for each Junos OS process (also called daemon). Multiple instances of
the same process are monitored and indexed separately.
nCPU
sysApplElmtRu Monitors the memory usage for each Junos OS process. Multiple instances of the same process
are monitored and indexed separately.
nMemory
755
Minimum Health Monitoring Configuration
To enable health monitoring on the router or switch, include the health-monitor statement at the [edit
snmp] hierarchy level:
[edit snmp]
health-monitor;
Configure the Falling Threshold or Rising Threshold
The falling threshold is the lower threshold (expressed as a percentage of the maximum possible value)
for the monitored variable. When the current sampled value is less than or equal to this threshold, and
the value at the last sampling interval is greater than this threshold, a single event is generated. A single
event is also generated if the first sample after this entry becomes valid is less than or equal to this
threshold. After a falling event is generated, another falling event cannot be generated until the sampled
value rises above this threshold and reaches the rising threshold. You must specify the falling threshold
as a percentage of the maximum possible value. The default is 70 percent.
By default, the rising threshold is 80 percent of the maximum possible value for the monitored object
instance. The rising threshold is the upper threshold for the monitored variable. When the current
sampled value is greater than or equal to this threshold, and the value at the last sampling interval is less
than this threshold, a single event is generated. A single event is also generated if the first sample after
this entry becomes valid is greater than or equal to this threshold. After a rising event is generated,
another rising event cannot be generated until the sampled value falls below this threshold and reaches
the falling threshold. You must specify the rising threshold as a percentage of the maximum possible
value for the monitored variable.
To configure the falling threshold or rising threshold, include the falling-threshold or rising-threshold
statement at the [edit snmp health-monitor] hierarchy level:
[edit snmp health-monitor]
falling-threshold percentage;
rising-threshold percentage;
percentage can be a value from 1 through 100.
The falling and rising thresholds apply to all object instances monitored by the health monitor.
756
Configure the Interval
The interval represents the period of time, in seconds, over which the object instance is sampled and
compared with the rising and falling thresholds.
To configure the interval, include the interval statement and specify the number of seconds at the [edit
snmp health-monitor] hierarchy level:
[edit snmp health-monitor]
interval seconds;
seconds can be a value from 1 through 2147483647. The default is 300 seconds (5 minutes).
Log Entries and Traps
The system log entries generated for any health monitor events (thresholds crossed, errors, and so on)
have a corresponding HEALTHMONITOR tag rather than a generic SNMPD_RMON_EVENTLOG tag. However, the health
monitor sends generic RMON risingThreshold and fallingThreshold traps.
SEE ALSO
health-monitor
Configure Health Monitoring
This topic describes how to configure the health monitor feature for QFX Series devices.
The health monitor feature extends the SNMP RMON alarm infrastructure to provide predefined
monitoring for a selected set of object instances (such as file system usage, CPU usage, and memory
usage) and dynamic object instances (such as Junos OS processes).
In this procedure, the sampling interval is every 600 seconds (10 minutes), the falling threshold is 85
percent of the maximum possible value for each object instance monitored, and the rising threshold is 75
percent of the maximum possible value for each object instance monitored.
To configure health monitoring:
757
1. Configure the health monitor:
[edit snmp]
user@switch# set health-monitor
2. Configure the falling threshold:
[edit snmp]
user@switch# set health-monitor falling-threshold percentage
For example:
user@switch# set health-monitor falling-threshold 85
3. Configure the rising threshold:
[edit snmp]
user@switch# set health-monitor rising-threshold percentage
For example:
user@switch# set health-monitor rising-threshold 75
4. Configure the interval:
[edit snmp]
user@switch# set health-monitor interval seconds
For example:
user@switch# set health-monitor interval 600
SEE ALSO
falling-threshold
interval (Health Monitor)
758
rising-threshold (Health Monitor)
5
PART
Accounting Options
Accounting Options Overview | 760
Configure Accounting Options, Source Class Usage and Destination Class Usage
Options | 761
760
Accounting Options Overview
An accounting profile represents common characteristics of collected accounting data, including the
following:
â€¢ Collection interval
â€¢ File to contain accounting data
â€¢ Specific fields and counter names on which to collect statistics
You can configure multiple accounting profiles, as described in Table 77 on page 760.
Table 77: Types of Accounting Profiles
Type of Profile Description
Interface profile Collects the specified error and statistic information.
Filter profile Collects the byte and packet counts for the counter names specified in
the filter profile.
MIB profile Collects selected MIB statistics and logs them to a specified file.
Routing Engine profile Collects selected Routing Engine statistics and logs them to a specified
file.
Class usage profile Collects class usage statistics and logs them to a specified file.
761
Configure Accounting Options, Source Class Usage
and Destination Class Usage Options
IN THIS SECTION
Configuration Statements at the [edit accounting-options] Hierarchy Level | 761
Accounting Options Configuration | 763
Configure Accounting-Data Log Files | 773
Manage Accounting Files | 779
Configure the Interface Profile | 780
Configure the Filter Profile | 784
Example: Configure a Filter Profile | 786
Example: Configure Interface-Specific Firewall Counters and Filter Profiles | 787
Configure Class Usage Profiles | 789
Configure the MIB Profile | 792
Configure the Routing Engine Profile | 795
Configuration Statements at the [edit accounting-options] Hierarchy
Level
This topic shows all possible configuration statements at the [edit accounting-options] hierarchy level and
their level in the configuration hierarchy. When you are configuring Junos OS, your current hierarchy
level is shown in the banner on the line preceding the user@host# prompt.
[edit]
accounting-options {
class-usage-profile profile-name {
file filename;
interval minutes;
destination-classes {
destination-class-name;
}
762
source-classes {
source-class-name;
}
}
file filename {
archive-sites {
}
files number;
nonpersistent;
size bytes;
start-time time;
transfer-interval minutes;
}
filter-profile profile-name {
counters {
counter-name;
}
file filename;
interval minutes;
}
}
interface-profile profile-name {
fields {
field-name;
}
file filename;
interval minutes;
}
mib-profile profile-name {
file filename;
interval seconds;
object-names {
mib-object-name;
}
operation operation-name;
}
routing-engine-profile profile-name {
fields {
field-name;
}
file filename;
763
interval minutes;
}
Accounting Options Configuration
IN THIS SECTION
Accounting Optionsâ€”Full Configuration | 763
Minimum Accounting Options Configuration | 768
This topic contains the following sections:
Accounting Optionsâ€”Full Configuration
To configure accounting options, include the following statements at the [edit accounting-options]
hierarchy level:
accounting-options {
class-usage-profile profile-name {
file filename;
interval minutes;
destination-classes {
destination-class-name;
}
source-classes {
source-class-name;
}
file filename {
archive-sites {
site-name;
}
files number;
nonpersistent;
size bytes;
source-classes time;
764
transfer-interval minutes;