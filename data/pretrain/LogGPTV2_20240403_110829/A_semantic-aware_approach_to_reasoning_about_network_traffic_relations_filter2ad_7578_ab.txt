3: while Q (cid:54)= ∅ do
4:
5:
6:
7:
8:
9:
10:
end if
11:
12:
end for
13: end while
14: return roots
event n ← dequeue Q
let a set ps ← all of n’s parents
for each event e ∈ ps do
roots = roots + {e}
if e is of type root then
else if e /∈ Q then
enqueue e onto Q
Algorithm 1 ﬁnds all the roots of an event ek, given all
the pairwise causal relations. The input of the algorithm is a
set of all the pairwise relations {(ei → ej)} and an event ek.
The output is a set containing all the roots of ek. In order
to compute the transitive reduction of a directed graph, we
use a queue Q to perform breadth-ﬁrst traversal.
The root-trigger security policy is suitable for identifying
network activities that are not triggered by users, including
but not limited to:
• Spyware exﬁltrating sensitive information through out-
• Bots’ command-and-control traﬃc, and attack activ-
ities (e.g., spam or DoS traﬃc) originated from the
monitored host,
bound network traﬃc from the monitored host,
• Websites collecting and reporting user data.
One future direction is to systematically investigate the de-
sign and use of complex policies for network assurance.
3. PRELIMINARY EVALUATION
We use the Weka library [5] and implement the prototype
in Java. The data we evaluate are summarized in Table 1
(τ is the threshold for the maximal time interval of a pair of
events). Dataset I is composed of the user’s events and out-
bound HTTP traﬃc that are sampled from a 20-participant
user study. Each participant was asked to actively surf the
web for 30 minutes on a laptop equipped with our data col-
1376lection program. We set the threshold as 30 seconds, as
97.2% of the HTTP requests fall within that interval range.
Dataset II is obtained by using tcpdump to continuously col-
lect outbound DNS queries and HTTP packets from a gra-
date student’s workstation for 19 days. We collected types A
and AAAA DNS queries and the packets containing GET, HEAD,
or POST HTTP information. Due to the wide prevalence of
DNS prefetching, we choose a relaxed threshold of 15 sec-
onds, which covers 97.8% of the event pairs.
Data
I
II
Type
HTTP
DNS & HTTP
τ (s) # of Pairs
Size (MB)
30
15
572,725
1,833,306
38.61
113.56
Table 1: An overview of datasets in the experiments.
Data labeling. Our rules for HTTP traﬃc are similar to
what are used in [8]. We manually labeled 12% of HTTP
requests in the training datasets, which also indicates the
inadequacy of the existing rule-based approach. Rules for
labeling mixed DNS and HTTP traﬃc involve analyzing the
query of the DNS packet, type of DNS query(e.g., A or AAAA),
host of the HTTP request, and the protocol version of des-
tination IP address in HTTP header.
(cid:105)
10, 0
(cid:104) 0, 1
Classiﬁcation. 10-fold cross-validation experiments demon-
strate that the accuracy of both training sets is greater than
99%. Due to the sparsity of relations in network traﬃc, we
; it penalizes classifying false
deﬁne a cost matrix C =
negatives with 10 and classifying false positives with 1. The
binary classiﬁcation accuracy for pairwise causal relations is
consistently high for the Bayesian network and SVM meth-
ods (see Table 2). The naive Bayes classiﬁer yields lower
average accuracy, indicating that the conditional indepen-
dence assumptions made by this classiﬁer might be strong.
Data
# of pairs
Training
Test
Naive Bayesian
Bayes Network
SVM
I
II
309,921
916,650
262,804
916,656
99.77%
98.98%
99.85%
100%
99.92%
100%
Table 2: Pairwise classiﬁcation accuracy results of
train-n-test experiments. Sizes of training and test
data are shown.
Security Policy Enforcement (Correctness of root triggers).
Running the ﬁnd-root procedure in Algorithm 1 on the pair-
wise classiﬁcation results, we identify the root triggers of all
events and compare them to the ground truth values.
By enforcing the root-trigger policy, the evaluation shows
that for 99.0% of events, the roots are correct with respect
to the ground truth. The results are the same for all three
classiﬁers. Among the 99.0% events, we found 22 vagabond
events, which belong to either malicious behavior (e.g., re-
quest to altfarm.mediaplex.com) or misconﬁguration on the
server (e.g., some requests to googleapi or twitter). There
are 1.0% events whose root triggers are not correctly found.
Manual investigation reveals that the wrong root triggers are
all false positives, which are caused either by i) null or trun-
cated attributes (e.g., referrer, hostname) due to the trans-
mission issues, or ii) timestamps out of the speciﬁed thresh-
old. The latter can be avoided by increasing the threshold
in the pairing operation, which, however, may increase the
computation overhead by generating unnecessary pairs.
Summary. The correctness of classifying the causal rela-
tion among network packets shows the feasibility and eﬀec-
tiveness of our analysis approach. The root-trigger security
analysis allows us to identify network events linked to mali-
cious hosts or due to misconﬁguration of web servers. The
classiﬁcation performance is eﬃcient in general and adequate
for fast traﬃc analysis.
4. CONCLUSIONS AND FUTURE WORK
Our learning-based technique to discover causal relations
shows promising application to analyzing host-based out-
bound HTTP and mixed HTTP and DNS traﬃc data. Our
experiments identiﬁed several types of network anomalies
caused by traﬃc to malicious servers or misconﬁgured servers.
Future work will proceed along three directions. First,
we plan to explore the incorporation of more complex secu-
rity policies, which could help detect more types of threats.
Second, we plan to explore the inference of more complex
boolean relationships across events [9] than simple pairwise
relations (e.g., at least two of three precursors must be present
for a given event). Finally, we intend to encapsulate the en-
tire framework, from pairwise relation construction, to clas-
siﬁcation, in a machine learning framework so that all neces-
sary parameters can be jointly optimized. Such an approach
can also help avoid making arbitrary thresholding decisions
and better explore the joint interplay between design deci-
sions.
5. REFERENCES
[1] X. Chen, M. Zhang, Z. M. Mao, and P. Bahl.
Automating network application dependency discovery:
Experiences, limitations, and new solutions. In
Proceedings of OSDI, pages 117–130, 2008.
[2] C. Cortes and V. Vapnik. Support-vector networks.
Machine learning, 20(3):273–297, 1995.
[3] T. Green, W. Ribarsky, and B. Fisher. Visual analytics
for complex concepts using a human cognition model.
In Proc. IEEE VAST, pages 91 – 98, October 2008.
[4] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner:
Clustering analysis of network traﬃc for protocol- and
structure-independent botnet detection. In Proceedings
of the 17th USENIX Security Symposium, 2008.
[5] M. Hall, E. Frank, G. Holmes, B. Pfahringer,
P. Reutemann, and I. H. Witten. The weka data mining
software: an update. ACM SIGKDD Explorations
Newsletter, 11(1):10–18, 2009.
[6] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M.
Chen. Enriching intrusion alerts through multi-host
causality. In Proceedings of Network and Distributed
System Security (NDSS), 2005.
[7] A. Natarajan, P. Ning, Y. Liu, S. Jajodia, and S. E.
Hutchinson. NSDMiner: Automated discovery of
network service dependencies. In INFOCOM, pages
2507–2515, 2012.
[8] H. Zhang, W. Banick, D. Yao, and N. Ramakrishnan.
User intention-based traﬃc dependence analysis for
anomaly detection. In Security and Privacy Workshops
(SPW), 2012 IEEE Symposium on, pages 104–112.
IEEE, 2012.
[9] L. Zhao, M. J. Zaki, and N. Ramakrishnan. Blosom: a
framework for mining arbitrary boolean expressions. In
Proc. KDD’06. ACM, 2006.
1377