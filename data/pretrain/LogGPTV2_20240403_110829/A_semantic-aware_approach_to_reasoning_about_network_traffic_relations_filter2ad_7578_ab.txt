### Algorithm 1: Finding Roots of an Event

**Algorithm Description:**
Algorithm 1 is designed to find all the roots of a given event \( e_k \) based on the pairwise causal relations. The input to the algorithm includes a set of all pairwise relations \(\{(e_i \rightarrow e_j)\}\) and the target event \( e_k \). The output is a set containing all the roots of \( e_k \).

**Pseudocode:**
```plaintext
while Q is not empty do
    event n ← dequeue(Q)
    let ps be the set of all parents of n
    for each event e in ps do
        if e is of type root then
            roots = roots + {e}
        else if e is not in Q then
            enqueue e onto Q
end while
return roots
```

**Explanation:**
To compute the transitive reduction of a directed graph, we use a queue \( Q \) to perform a breadth-first traversal. The algorithm iteratively dequeues events from \( Q \), identifies their parent events, and enqueues any new parent events that are not already in \( Q \). If a parent event is identified as a root, it is added to the set of roots.

### Root-Trigger Security Policy

The root-trigger security policy is useful for identifying network activities that are not triggered by users, including:
- Spyware exfiltrating sensitive information through outbound network traffic.
- Command-and-control traffic and attack activities (e.g., spam or DoS traffic) originating from the monitored host.
- Websites collecting and reporting user data.

**Future Directions:**
One future direction is to systematically investigate the design and use of complex policies for network assurance.

### Preliminary Evaluation

**Implementation:**
We implemented the prototype using the Weka library [5] in Java. The datasets used for evaluation are summarized in Table 1. 

**Dataset Details:**
- **Dataset I:** Comprises user events and outbound HTTP traffic sampled from a 20-participant user study. Each participant was asked to actively surf the web for 30 minutes on a laptop equipped with our data collection program. The threshold for the maximal time interval of a pair of events was set to 30 seconds, covering 97.2% of the HTTP requests.
- **Dataset II:** Obtained by continuously collecting outbound DNS queries and HTTP packets from a graduate student's workstation over 19 days. We collected types A and AAAA DNS queries and packets containing GET, HEAD, or POST HTTP information. Due to the prevalence of DNS prefetching, a relaxed threshold of 15 seconds was chosen, which covers 97.8% of the event pairs.

| Data | Type       | τ (s) | # of Pairs   | Size (MB) |
|------|------------|-------|--------------|-----------|
| I    | HTTP       | 30    | 572,725      | 38.61     |
| II   | DNS & HTTP | 15    | 1,833,306    | 113.56    |

**Data Labeling:**
- For HTTP traffic, we used rules similar to those in [8]. We manually labeled 12% of the HTTP requests in the training datasets, highlighting the inadequacy of existing rule-based approaches.
- For mixed DNS and HTTP traffic, labeling involved analyzing the query of the DNS packet, type of DNS query (e.g., A or AAAA), host of the HTTP request, and the protocol version of the destination IP address in the HTTP header.

**Classification:**
- 10-fold cross-validation experiments demonstrated that the accuracy of both training sets is greater than 99%.
- A cost matrix \( C = \begin{bmatrix} 0 & 1 \\ 10 & 0 \end{bmatrix} \) was defined to penalize false negatives more heavily than false positives.
- The binary classification accuracy for pairwise causal relations was consistently high for Bayesian networks and SVM methods (see Table 2). The naive Bayes classifier yielded lower average accuracy, indicating that its conditional independence assumptions might be too strong.

| Data | # of Pairs | Training | Test | Naive Bayesian | Bayes Network | SVM |
|------|------------|----------|------|----------------|---------------|-----|
| I    | 309,921    | 262,804  | -    | 99.77%         | 99.85%        | 99.92% |
| II   | 916,650    | 916,656  | -    | 98.98%         | 100%          | 100% |

**Security Policy Enforcement (Correctness of Root Triggers):**
- Running the find-root procedure on the pairwise classification results, we identified the root triggers of all events and compared them to the ground truth values.
- The evaluation showed that for 99.0% of events, the roots were correct with respect to the ground truth. Among these, 22 vagabond events were found, which belonged to either malicious behavior (e.g., requests to altfarm.mediaplex.com) or server misconfiguration (e.g., some requests to googleapi or twitter).
- 1.0% of events had incorrect root triggers, primarily due to null or truncated attributes (e.g., referrer, hostname) or timestamps outside the specified threshold. Increasing the threshold in the pairing operation could avoid the latter issue but may increase computational overhead.

**Summary:**
- The correctness of classifying causal relations among network packets demonstrates the feasibility and effectiveness of our analysis approach.
- The root-trigger security analysis allows us to identify network events linked to malicious hosts or server misconfigurations.
- The classification performance is generally efficient and adequate for fast traffic analysis.

### Conclusions and Future Work

**Conclusions:**
- Our learning-based technique for discovering causal relations shows promising application to analyzing host-based outbound HTTP and mixed HTTP and DNS traffic data.
- Experiments identified several types of network anomalies caused by traffic to malicious or misconfigured servers.

**Future Work:**
- Explore the incorporation of more complex security policies to detect a wider range of threats.
- Investigate the inference of more complex boolean relationships across events [9] beyond simple pairwise relations.
- Encapsulate the entire framework, from pairwise relation construction to classification, in a machine learning framework to jointly optimize all necessary parameters, avoiding arbitrary thresholding decisions and better exploring the interplay between design decisions.

### References

[1] X. Chen, M. Zhang, Z. M. Mao, and P. Bahl. Automating network application dependency discovery: Experiences, limitations, and new solutions. In Proceedings of OSDI, pages 117–130, 2008.

[2] C. Cortes and V. Vapnik. Support-vector networks. Machine learning, 20(3):273–297, 1995.

[3] T. Green, W. Ribarsky, and B. Fisher. Visual analytics for complex concepts using a human cognition model. In Proc. IEEE VAST, pages 91 – 98, October 2008.

[4] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering analysis of network traffic for protocol- and structure-independent botnet detection. In Proceedings of the 17th USENIX Security Symposium, 2008.

[5] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and I. H. Witten. The weka data mining software: an update. ACM SIGKDD Explorations Newsletter, 11(1):10–18, 2009.

[6] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen. Enriching intrusion alerts through multi-host causality. In Proceedings of Network and Distributed System Security (NDSS), 2005.

[7] A. Natarajan, P. Ning, Y. Liu, S. Jajodia, and S. E. Hutchinson. NSDMiner: Automated discovery of network service dependencies. In INFOCOM, pages 2507–2515, 2012.

[8] H. Zhang, W. Banick, D. Yao, and N. Ramakrishnan. User intention-based traffic dependence analysis for anomaly detection. In Security and Privacy Workshops (SPW), 2012 IEEE Symposium on, pages 104–112. IEEE, 2012.

[9] L. Zhao, M. J. Zaki, and N. Ramakrishnan. Blosom: a framework for mining arbitrary boolean expressions. In Proc. KDD’06. ACM, 2006.