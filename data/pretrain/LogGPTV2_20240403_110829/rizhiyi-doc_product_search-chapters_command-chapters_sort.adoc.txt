=== sort
摘要：
    按照指定的字段对搜索结果进行排序。对于数值类型将按照数值进行排序，对于字符串类型将按照字典序进行排序。
语法：
    sort [] by 
必要参数：
* sort-item-list
** 语法
    (,)*
** 描述
    列出排序所依据的字段列表
** 参数
*** sort-item
**** 语法
    [(+|-)]
**** 描述
    单个排序的字段，其中+表示升序，-表示降序，默认为降序
可选参数：
* sort-count
** 语法
** 描述
    需要排序的事件数
描述：
    sort命令将按照给定字段列表对结果进行排序，对于数值类型将按照数值进行排序，对于字符串类型将按照字典序进行排序。
    如果sort是对事件排序（query之后），则by可以支持多个字段，但不允许对eval的字段进行排序
    如果sort是对统计结果进行排序(stats, transaction之后)，则by仅支持一个字段
[NOTE]
====
* sort的最大条数限制，用于限制输入指定的sort后追加的int参数，如果大于默认200000数则报错，对应配置项为sort.max_size
** 示例：
[source,sh]
appname:apache | sort 2000 by +timestamp
** 描述
    上述命令中的2000会首先判断是否小于上述的配置项，如果超过则报错，如果不指定则默认sort 200000条数据
* 排序默认保留的条数，默认为10000，对应配置项为sort.maintain_size
** 示例：
[source,sh]
appname:apache | sort 12000 by +timestamp
** 描述
    上述sort命令后的结果如果超过默认值10000条则只取前10000条数据，之后的数据将被丢弃
====
.示例1
====
对事件结果按照timestamp升序排序
[source,sh]
logtype:apache | sort by +timestamp
image::images/Image-140318-043724.084.png[]
从结果图中，可以看出事件是按照timestamp进行升序排列的
====
.示例2
====
统计不同appname下，每个ip的数量，并按照ip的数量降序排序
[source,sh]
logtype:apache | stats count(apache.clientip) as ip_count by appname | sort by -ip_count
image::images/Image-140318-043751.697.png[]
从结果图中可以看到，ip_count是从大到小，进行的降序排序
====