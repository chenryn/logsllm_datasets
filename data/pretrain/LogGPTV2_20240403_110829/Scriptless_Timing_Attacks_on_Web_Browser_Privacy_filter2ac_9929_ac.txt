...
...
(cid:3)
six baseline images(cid:3)
Figure 12. The PoC page of the comparison-based attack that uses CSS
media queries.
118118118
There are two media query pages
(i.e., Baseline-
Query.html and TargetQuery.html) included in the above
attack page to observe the rendering of baseline images and
the target image respectively. We can make the query pages
send requests to the attack server when the width of the
current screen is larger than the default width of the IFrame
and lesser than the width of the target image. In fact, the
width of the NSF logo image is 392 pixels, and the default
width of the IFrame is often about 300 pixels (e.g., 302
pixels in IE 10). We can use the media queries shown in
Fig. 13 to check whether the current screen width is not
less than 390 pixels. When the target image or a baseline
image starts to render, the width of the IFrame containers in
the same column will become larger than 390 pixels. This
will result in a TARGET or BASELINE request being sent
out. Eventually, the attacker can learn whether the target
image is cached by examining the order of these requests
received on the attack server.
(b) TargetQuery.html
Figure 13. The media query pages.
The comparison-based timing attack using CSS media
queries can be applied to not only Webkit-based browsers
but also to other popular browsers, such as IE and Firefox.
One thing should be noticed is that there is a small limit
for choosing the target image, i.e., the width of the target
image may not be less than the default width of the IFrame.
Otherwise, the rendering of the target image could not make
the IFrame in the same column scale correspondingly.
IV. EVALUATION
In order to examine the effectiveness of our three attack
vectors, we apply them to six popular browsers, including
IE 10.0.9, Firefox 19.0, Chrome 26.0, Safari 5.1.4, Android
built-in browser 4.2, and Dolphin 9.1.0. Without loss of
generality, we still choose the NSF website as the target
website in this section. In fact, we also applied our attack
method to some other popular websites, such as Wikipedia
and The New York Times, and got similar results to the
experiment for NSF. All these experiments demonstrate that
our method can effectively sniff users’ browsing histories
with very high precision.
A. Measurement-based Attack
The measurement-based attack can be applied to Webkit-
based browsers. At ﬁrst, we need to determine the length of
the snifﬁng window. We have designed test pages to collect
necessary time samples for four Webkit-based browsers
operating under different environments.
In a desktop computer (2G RAM, Intel Core2 Duo 2G
CPU), we collected 100 (Tas, Tch) and (Tas, Tcm) samples
for Chrome and Safari respectively. A half of these samples
is obtained on a low speed Internet connection (64K) and
the other half is on a high speed connection (10M WAN).
We use a modiﬁed attack page as the test page, in which the
logo image rendering always made the increment track piece
appear, regardless of its cached status. In practical terms, we
collected these samples via recording the timelines of related
events in the Developer Tools interface of browsers.
As discussed in Section III, the length of the snifﬁng
window can be set as the mean value of the maximum of
(Tch − Tas) and the minimum of (Tcm − Tas). For Chrome,
the related time distribution is shown in Fig. 14. We can
see that those two values are 30ms and 40ms respectively.
And for Safari, as shown in Fig. 15, they are 30ms and
150ms. Fortunately, though Chrome is faster than Safari,
the maximum of (Tch − Tas) in Safari is still less than the
minimum of (Tcm − Tas) in Chrome. The length of the
snifﬁng window can be set to 35ms (i.e., the mean of 30ms
and 40ms), a value suitable for both Chrome and Safari.
Figure 14. The distribution of (Tch − Tas) and (Tcm − Tas) in Chrome.
We used a HTC T528w phone to collect time samples
for Android built-in browser and Dolphin. Because the two
119119119
TIME TEST RESULTS OF MOBILE BROWSERS.
Table I
Android Built-in
Browser 4.2
Dolphin 9.1.0
Cached
Non-Cached
Cached
No-Cached
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y/N
Y/N
Y/N
Y/N
Y
Y
Y
Y
Y
Y
Y
N
N
N
N
N
N
N
N
N
Y/N
Y/N
Table II
N
N
N
N
N
N
Y/N
Y/N
Y/N
Y/N
Y/N
Window
Length
500ms
THE TEST RESULTS OF MEASUREMENT-BASED ATTACKS.
Cached
Non-Cached
Browsers
Test
Times
Success
Fail
Test
Times
Success
Fail
Chrome
26.0
Safari
5.1.4
Android
Built-in
Browser 4.2
Dolphin
9.1.0
200
200
20
20
190
194
19
20
10
6
1
0
200
200
20
20
199
193
20
19
1
7
0
1
B. Comparison-based Attack
Launching the comparison-based attack, the attacker does
not need to know any time distributions of client-side
rendering processes. Based on the attack method described
in Section III-B, we have performed the following two
comparison-based attack experiments.
1) Using CSS Scrollbar Customization
As in the above measurement-based attack experiments,
we also launched the comparison-based attacks 200 or 20
times for each of the four Webkit-based browsers by using
CSS scrollbar customization. The attack test results are
shown in Table III, illustrating that our attack method can
effectively sniff the browsing histories for Chrome, Safari,
Android built-in browser, and Dolphin, with only 2 false
positives (0.23%) in 880 tests.
2) Using CSS Media Queries
With the use of media queries,
the comparison-based
attack can be applied to almost all popular browsers rather
than only to Webkit-based browsers. Having performed
this kind of attack experiment for each of the six popular
browsers, including IE, Firefox, and the above four Webkit-
based browsers, we have proven that this attack method
can fully sniff browsing histories across different browsers
with very high precision, i.e., only 3 false positives (0.18%)
and 2 false negatives (0.12%) in 1680 tests. The results are
highlighted in Table IV.
Figure 15. The distribution of (Tch − Tas) and (Tcm − Tas) in Safari.
browsers do not provide development interfaces like desktop
browsers, we cannot get the time distributions directly. In our
experiments, we have employed a simple black-box method
to determine the length of the snifﬁng window.
We generated a series of test pages by expanding the
length of the snifﬁng window from 1ms to 1000ms. Then
we loaded them one by one and examined requests received
on the attack server. The basic idea behind this approach is
that the test page with an appropriate window length will
always send a report request to the attack server when the
logo image is cached and it never sends the report request
otherwise.
For each test page, we have tested each of the two
browsers ten times when the logo image is cached or non-
cached respectively. Five of them have been performed on
a low speed Internet connection (GPRS) and the other ﬁve
on a comparatively high speed connection (Wi-Fi). The test
results are shown in Table I. In the table, “Y” signiﬁes that
the report requests are always received in ﬁve tests, “N”
implies they are never received, and “Y/N” indicates that
they may or may not be received. Looking at the table, we
can observe that the ideal window length is between 150ms
and 175ms. Therefore, we set the length of the snifﬁng
window to the mean of the two values, namely 163ms.
Using above conﬁguration, we launched the attack 200
times to each of the two desktop browsers with the logo
image cached or non-cached respectively. Because it
is
difﬁcult to perform an automatically test on a mobile phone,
we launched the attack 20 times to the two mobile browsers
respectively. Half of attacks have been conducted on a low
speed Internet connection (64K or GPRS) and the other half
on a comparatively high speed connection (10M WAN or
Wi-Fi). As shown in Table II, the results of attack tests
indicate that our attack pages work effectively, with only
9 false positives (1.02%) and 17 false negatives (1.93%) in
880 tests.
120120120
THE TEST RESULTS OF COMPARISON-BASED ATTACKS USING CSS
SCROLLBAR CUSTOMIZATION.
Table III
Cached
Non-Cached
Browsers
Test
Times
Success
Fail
Test
Times
Success
Fail
Chrome
26.0
Safari
5.1.4
Android
Built-in
Browser 4.2
Dolphin
9.1.0
200
200
20
20
200
200
20
20
0
0
0
0
200
200
20
20
200
198
20
20
0
2
0
0
THE TEST RESULTS OF COMPARISON-BASED ATTACKS USING CSS
MEDIA QUERIES.
Table IV
Cached
Non-Cached
Browsers
Test
Times
Success
Fail
Test
Times
Success
Fail