### Comparison-Based Attack Using CSS Media Queries

**Figure 12.** The Proof of Concept (PoC) page for the comparison-based attack using CSS media queries.

The PoC page includes two media query pages, `Baseline-Query.html` and `TargetQuery.html`, to observe the rendering of baseline images and the target image, respectively. These query pages are designed to send requests to the attack server when the width of the current screen is greater than the default width of the IFrame but less than the width of the target image. 

For example, the NSF logo image has a width of 392 pixels, while the default width of the IFrame is typically around 300 pixels (e.g., 302 pixels in IE 10). The media queries shown in **Figure 13** check if the current screen width is not less than 390 pixels. When the target image or a baseline image starts to render, the width of the IFrame containers in the same column will exceed 390 pixels, triggering a `TARGET` or `BASELINE` request. By analyzing the order of these requests received on the attack server, the attacker can determine whether the target image is cached.

**Figure 13.** The media query pages.

This comparison-based timing attack using CSS media queries is applicable not only to Webkit-based browsers but also to other popular browsers such as Internet Explorer (IE) and Firefox. It is important to note that the target image's width must be greater than the default width of the IFrame; otherwise, the rendering of the target image will not cause the IFrame to scale accordingly.

### Evaluation

To evaluate the effectiveness of our three attack vectors, we tested them on six popular browsers: IE 10.0.9, Firefox 19.0, Chrome 26.0, Safari 5.1.4, Android built-in browser 4.2, and Dolphin 9.1.0. For this evaluation, we used the NSF website as the target, though similar results were obtained with other popular websites like Wikipedia and The New York Times. These experiments demonstrate that our method can effectively sniff users' browsing histories with high precision.

#### A. Measurement-Based Attack

The measurement-based attack is primarily applicable to Webkit-based browsers. To determine the length of the sniffing window, we collected necessary time samples for four Webkit-based browsers under different network conditions.

On a desktop computer (2G RAM, Intel Core2 Duo 2G CPU), we collected 100 `(Tas, Tch)` and `(Tas, Tcm)` samples each for Chrome and Safari. Half of these samples were collected on a low-speed internet connection (64K), and the other half on a high-speed connection (10M WAN). We used a modified attack page where the logo image rendering always triggered the increment track piece, regardless of its cached status. These samples were collected by recording the timelines of related events in the Developer Tools interface of the browsers.

As discussed in Section III, the length of the sniffing window can be set as the mean value of the maximum of `(Tch − Tas)` and the minimum of `(Tcm − Tas)`. For Chrome, the related time distribution is shown in **Figure 14**, with values of 30ms and 40ms, respectively. For Safari, as shown in **Figure 15**, the values are 30ms and 150ms. Although Chrome is faster, the maximum of `(Tch − Tas)` in Safari is still less than the minimum of `(Tcm − Tas)` in Chrome. Thus, the length of the sniffing window can be set to 35ms, suitable for both Chrome and Safari.

**Figure 14.** The distribution of `(Tch − Tas)` and `(Tcm − Tas)` in Chrome.

We used a HTC T528w phone to collect time samples for the Android built-in browser and Dolphin. Since these mobile browsers do not provide development interfaces like desktop browsers, we employed a black-box method to determine the sniffing window length. We generated test pages with the sniffing window length ranging from 1ms to 1000ms and loaded them one by one, examining the requests received on the attack server. The ideal window length was found to be between 150ms and 175ms, so we set it to 163ms.

Using this configuration, we launched the attack 200 times on each of the two desktop browsers with the logo image cached or non-cached. For mobile browsers, we conducted 20 attacks each, with half on a low-speed connection and the other half on a high-speed connection. As shown in **Table II**, the results indicate that our attack pages work effectively, with only 9 false positives (1.02%) and 17 false negatives (1.93%) in 880 tests.

**Table II.** Test results of measurement-based attacks.

| Browsers          | Test Times | Success | Fail | Test Times | Success | Fail |
|-------------------|------------|---------|------|------------|---------|------|
| Chrome 26.0       | 200        | 190     | 10   | 200        | 199     | 1    |
| Safari 5.1.4      | 200        | 194     | 6    | 200        | 193     | 7    |
| Android 4.2       | 20         | 19      | 1    | 20         | 20      | 0    |
| Dolphin 9.1.0     | 20         | 20      | 0    | 20         | 19      | 1    |

#### B. Comparison-Based Attack

In the comparison-based attack, the attacker does not need to know the time distributions of client-side rendering processes. Based on the method described in Section III-B, we performed the following experiments:

1. **Using CSS Scrollbar Customization**

   We launched the comparison-based attacks 200 or 20 times for each of the four Webkit-based browsers using CSS scrollbar customization. The results, shown in **Table III**, indicate that our attack method can effectively sniff browsing histories with only 2 false positives (0.23%) in 880 tests.

**Table III.** Test results of comparison-based attacks using CSS scrollbar customization.

| Browsers          | Test Times | Success | Fail | Test Times | Success | Fail |
|-------------------|------------|---------|------|------------|---------|------|
| Chrome 26.0       | 200        | 200     | 0    | 200        | 200     | 0    |
| Safari 5.1.4      | 200        | 200     | 0    | 200        | 198     | 2    |
| Android 4.2       | 20         | 20      | 0    | 20         | 20      | 0    |
| Dolphin 9.1.0     | 20         | 20      | 0    | 20         | 20      | 0    |

2. **Using CSS Media Queries**

   With the use of media queries, the comparison-based attack can be applied to almost all popular browsers. We performed this attack experiment for each of the six popular browsers, including IE, Firefox, and the four Webkit-based browsers. The results, highlighted in **Table IV**, show that this attack method can fully sniff browsing histories across different browsers with very high precision, with only 3 false positives (0.18%) and 2 false negatives (0.12%) in 1680 tests.

**Table IV.** Test results of comparison-based attacks using CSS media queries.

| Browsers          | Test Times | Success | Fail | Test Times | Success | Fail |
|-------------------|------------|---------|------|------------|---------|------|
| Chrome 26.0       | 200        | 200     | 0    | 200        | 200     | 0    |
| Safari 5.1.4      | 200        | 200     | 0    | 200        | 198     | 2    |
| Android 4.2       | 20         | 20      | 0    | 20         | 20      | 0    |
| Dolphin 9.1.0     | 20         | 20      | 0    | 20         | 20      | 0    |
| IE 10.0.9         | 200        | 200     | 0    | 200        | 199     | 1    |
| Firefox 19.0      | 200        | 200     | 0    | 200        | 199     | 1    |