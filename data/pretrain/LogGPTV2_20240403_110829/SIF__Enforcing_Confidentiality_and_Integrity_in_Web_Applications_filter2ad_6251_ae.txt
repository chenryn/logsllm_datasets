policy s → t would allow both s and t to read the mes-
sage. However, before t is permitted to read the mes-
sage, it may need to be reviewed. Suppose reviewers
r1, r2, ..., rn must review all messages sent from s to t.
When s composes the message, it initially has the follow-
ing conﬁdentiality policy: (s → t, r1, . . . , rn) t (r1 →
r1, . . . , rn) t . . . t (rn → r1, . . . , rn).
In this policy,
s permits t and all reviewers to read the message, and
each reviewer permits all other reviewers to read the mes-
sage. This label allows the message to be read by each re-
viewer, but prevents t from reading it. As each reviewer
reviews and approves the message, their authority is used
to remove their reader policy from the conﬁdentiality
policy using declassify annotations. Eventually the
message is declassiﬁed to the policy s → t, r1, . . . , rn,
which permits t to read it.
The calendar application also enforces user-deﬁned
security requirements by labeling information with ap-
propriate dynamic labels. Event details have the conﬁ-
dentiality policy c→ a1, . . . , an enforced on them, where
c is the creator of the event and a1, . . . , an are the event
attendees. The time of an event has conﬁdentiality pol-
icy c → a1, . . . , an u c → t1, . . . , tm, where t1, . . . , tm
are the users explicitly given permission by c to view the
event time. Event labels ensure that times and details
ﬂow only to users permitted to see them; run-time label
tests are used to determine which events a user can see.
4.3 Downgrading
Jif prevents the unintentional downgrading of informa-
tion. However, most applications that handle sensitive
information, including the case study applications, need
to downgrade information as part of their functionality.
Jif provides a mechanism for deliberate downgrading of
information: selective declassiﬁcation [22, 26] is a form
of access control, requiring the authorization of the own-
ers of all policies weakened or removed by a downgrade.
Authorization can be acquired statically if the owner of a
policy is known at compile time; or authorization can be
acquired at run time through a closure (see Section 3).
Jif 3.0 programs must also satisfy typing rules to en-
force robust declassiﬁcation [40, 23, 5]. In the context
of Jif, robustness ensures that no principal p (including
attackers) is able to inﬂuence either what information is
released to p (a laundering attack), or whether to release
information to p. For a web application, robustness im-
plies that users are unable to cause the incorrect release
of information. Selective declassiﬁcation and robust de-
classiﬁcation are orthogonal, providing different guaran-
tees regarding the downgrading of information.
In Jif programs, downgrading is marked by explicit
program annotations. A declassify annotation allows
conﬁdentiality to be downgraded, whereas an endorse
annotation downgrades integrity.
Downgrading annotations are typically clustered to-
gether in code, with several annotations needed to ac-
complish a single “functional downgrade.” For example,
declassifying a data structure requires declassiﬁcation of
each ﬁeld of the structure [2]. The two applications had
a combined total of 39 functional downgrades, with an
average of 4.6 annotations per functional downgrade.
Figure 4 shows a more detailed breakdown of the use
of downgrading in each case study.
(Details of each
downgrade appear in Appendix A.) We found that down-
grading could be divided into three broad categories: ac-
cess control, imprecision, and application requirements.
The ﬁrst category is downgrades associated with dis-
cretionary access control. Discretionary access control
is used as a mechanism to mediate information release
between different application components; any informa-
tion release requires explicit downgrading. For exam-
ple, in the calendar application, the set of all events has
the label {CalApp → > ; CalApp ← >}; thus, down-
grading is required both to extract events to display to
the user, and to update events edited by the user; the
authority of CalApp is required for these downgrades,
and thus the downgrades serve as a form of discretionary
access control to the event set. The choice of the label
{CalApp → > ; CalApp ← >} for the event set neces-
sitates these downgrades; using other labels may result
in fewer downgrades, but without the beneﬁts of this dis-
cretionary access control.
Imprecision is another reason for downgrading: some-
times the programmer can reason more precisely than
the compiler about security labels and information ﬂows.
For example, suppose a method is always called with a
non-null argument: Jif 3.0 has no ability to express this
precondition, and conservatively assumes that accessing
the argument may result in a NullPointerException.
Since the exception may reveal information, a spurious
information ﬂow is introduced, which may require ex-
plicit downgrading later. Few downgrades fall into this
category, giving conﬁdence that Jif 3.0 is sufﬁciently ex-
12
16th USENIX Security Symposium
USENIX Association
pressive. Some imprecision could be removed entirely
by extending the compiler to accept and reason about ad-
ditional annotations, as in JML [17].
Security requirements of the application provide the
third category of downgrade reasons. These downgrades
are inherent in the application, and cannot and should
not be avoided. For example, in the calendar application,
when users are added to the list of event attendees, more
users are able to see the details of the event, an informa-
tion release that requires explicit downgrading.
4.4 Programming with information ﬂow
During the case studies’ development, we obtained sev-
eral insights into the design and implementation of appli-
cations with information ﬂow control.
Abstractions and information ﬂow. Information ﬂow
analysis tends to reveal details of computations occurring
behind encapsulation boundaries, making it important to
design abstractions carefully. Unless sufﬁcient care is
taken during design, abstractions will need to be modi-
ﬁed during implementation. For example, we sometimes
needed to change a method’s signature several times,
both while implementing the method body (and discover-
ing ﬂows we hadn’t considered during design), and while
calling the method in various contexts (as method invo-
cation may reveal information to the callee, which we
hadn’t considered when designing the signature).
Coding idioms. We found that certain coding idioms
simpliﬁed reasoning about information ﬂow, by putting
code in a form that either allowed the programmer to bet-
ter understand it, or allowed Jif’s type system to reason
more precisely about it. As a simple example, consider
the following (almost) equivalent code-snippets for as-
signing the result of method call o.m() to x, followed by
an assignment to y:
1. x = o.m();
2. if (o != null) { x = o.m(); } y = 42;
The ﬁrst snippet throws a NullPointerException if
o is null, and thus information about the value of o ﬂows
to x, and also to y (since the assignment to y is executed
only in the absence of an exception). The information
ﬂow to y is subtle, and a common trap for new Jif pro-
grammers. In the second snippet, no exception can be
thrown (the compiler detects this with a data-ﬂow analy-
sis), and so information about o does not ﬂow to y. This
snippet avoids the subtle implicit ﬂow to y. More gener-
ally, making implicit information ﬂow explicit simpliﬁes
reasoning about information ﬂow.
Declarative security policies. Many of the case stud-
ies’ security requirements were expressed using Jif la-
bels. SIF and the Jif compiler ensure that these labels
(and thus the security requirements) are enforced end-to-
end. In general, Jif’s declarative security policies can re-
y = 42;
lieve the programmer of enforcing security requirements
programmatically, and give greater assurance that the re-
quirements are met. This argues for even greater expres-
siveness in security policies, to allow more application
security requirements to be captured, and to verify that
programs enforce these requirements.
is Li
related work
5 Related work
and
The most
closely
Zdancewic’s [18], which proposes a security-typed
PHP-like scripting language to address information-ﬂow
control in web applications. Their system has not been
implemented.
It assumes a strongly-typed database
interface, and, like SIF, ensures that applications respect
the conﬁdentiality and integrity policies on data sent
to and from the database. Their security policies can
express what information may be downgraded; in con-
trast, the decentralized label model used in Jif speciﬁes
In a multi-user
who needs to authorize downgrading.
web application with mutually distrusting users,
the
concept of who a session or process is executing on
behalf of is crucial to security. We believe that prac-
tical information-ﬂow control will ultimately need to
specify multiple aspects of downgrading [29]; extending
the decentralized label model
to reason about other
downgrading aspects is ongoing work.
Huang et al. [14], Xie and Aiken [37], and Jovanovic
et al. [15] all present frameworks for statically analyz-
ing information ﬂow in PHP web applications. Xie and
Aiken, and Jovanovic et al.
track information integrity
using a dataﬂow analysis, while Huang et al. extend
PHP’s type system with type state. Livshits and Lam [19]
use a precise static analysis to detect vulnerabilities in
Java web applications. Each of these frameworks has
found previously unknown bugs in web applications. Xu
et al. [38], Halfond and Orso [11] and Nguyen-Tuong
et al. [25] use dynamic information-ﬂow control to pre-
vent attacks in web applications. All of these approaches
use a simple notion of integrity:
information is either
tainted or untainted. While this sufﬁces to detect and
prevent certain web application vulnerabilities, such as
SQL injection, it is insufﬁcient for modeling more com-
plex, application-level integrity requirements that arise
in applications with multiple mutually distrusting princi-
pals. Also, they do not address conﬁdentiality informa-
tion ﬂows, and thus do not control the release of sensitive
server-side information to web clients.
Xu et al. [39] propose a framework for analyzing
and dynamically enforcing client privacy requirements
in web services. They focus on web service composi-
tion, assuming that individual services correctly enforce
policies. Their policies do not appear suitable for rea-
soning about the security of mutually distrusting users.
Otherwise, this work is complementary, as we provide
USENIX Association
16th USENIX Security Symposium
13
assurance that web applications enforce security policies.
While there has been much recent work on language-
based information ﬂow (see [28, 29] for recent surveys),
comparatively little has focused on creating real systems
with information ﬂow security, or on languages and tech-
niques to enable this. No prior work has built real ap-
plications that enforce both conﬁdentiality and integrity
policies while dealing securely with their interactions.
The most realistic prior application experience is that
of Hicks et al. [13], who use an earlier version of Jif to
implement a secure CDIS email client, JPmail. Although
there are similarities between JPmail and the CDIS mail
application described here, SIF is a more convincing
demonstration of information ﬂow control in three ways.
First, SIF is a reusable application framework, not just
a single application. Second, SIF applications enforce
integrity, not just conﬁdentiality, and they ensure that de-
classiﬁcation is robust [5]. Third, SIF applications can
dynamically extend the space of principals and labels and
deﬁne their own authentication mechanisms; JPmail re-
lies on mechanisms for principal management and au-
thentication that lie outside the scope of the application.
Askarov and Sabelfeld [2] use Jif to implement crypto-
graphic protocols for mental poker. They identify several
useful idioms for (and difﬁculties with) writing Jif code;
recent extensions to Jif should assuage many of the difﬁ-
culties.
Praxis High Integrity System’s language SPARK [4]
is based on a subset of Ada, and adds information-ﬂow
analysis. SPARK checks simple dependencies within
procedures. FlowCaml [27] extends the functional lan-
guage OCaml with information-ﬂow security types. Like
SPARK, it does not support features needed for real ap-
plications: downgrading, dynamic labels, and dynamic
and application-deﬁned principals.
Asbestos [9], Histar [41], and SELinux [20] are oper-
ating systems that track information ﬂow for conﬁden-
tiality and integrity. To varying degrees, they provide
ﬂexible security labels and application-deﬁned princi-
pals. However, these systems are coarse-grained, track-
ing information ﬂow only between processes. Informa-
tion ﬂow is controlled only dynamically, which is impre-
cise, and creates additional information ﬂows from run-
time label checking. By contrast, Jif checks information
ﬂow mostly statically, at the granularity of program vari-
ables, providing increased precision and greater assur-
ance that a program is secure prior to deployment. As-
bestos has a web server that allows web applications to
isolate users’ data from one another, using one process
per user. All downgrades are performed by trusted pro-
cesses. Unlike Jif, this granularity of information ﬂow
tracking does not permit different security policies for
different data owned by a single user.
Tse and Zdancewic [35] present a monadic type sys-
tem for reasoning about dynamic principals, and certiﬁ-
cates for authority delegation and downgrading. Jif 3.0’s
dependent type system for dynamic labels and princi-
pals allows similar reasoning. Tse and Zdancewic as-
sume that certiﬁcates are contained in the external en-
vironment, and do not provide a mechanism to dynam-
ically create them. Closures in Jif 3.0 can be dynam-
ically authorized, and may perform arbitrary computa-
tion, whereas Tse and Zdancewic’s certiﬁcates permit
only authority delegation and downgrading.
Swamy et al. [32] consider dynamic policy updates,
and introduce a transactional mechanism to prevent un-
intentional transitive ﬂows that may arise from policy up-
dates. In Jif, policies are updated dynamically by adding
and removing principal delegations, and unintentional
transitive ﬂows may occur. Their techniques are com-
plementary to our work, and should be applicable to Jif
to stop these ﬂows.
6 Conclusion
We have designed and implemented Servlet Informa-
tion Flow (SIF), a novel framework for building high-
assurance web applications. Extending the Java Servlet
framework, SIF addresses trust issues in web applica-
tions, moving trust out of web applications and into SIF
and the Jif compiler.
SIF web applications are written entirely in the Jif 3.0
programming language. At compile time, applications
are checked to see if they respect the conﬁdentiality and
integrity of information held on the server: conﬁden-
tial information is not released inappropriately to clients,
and low-integrity information from clients is not used in
high-integrity contexts. SIF tracks information ﬂow both
within the handling of a single request, and over multiple
requests—it closes the loop of information ﬂow between
client and server.
Jif 3.0 extends Jif in several ways to make web appli-
cations possible. It adds sophisticated dynamic mecha-
nisms for access control, authentication, delegation, and
principal management, and shows how to integrate these
features securely with language-based,
largely static,
information-ﬂow control.
We have used SIF to implement two applications with
interesting information security requirements. These
web applications are among the ﬁrst to statically enforce