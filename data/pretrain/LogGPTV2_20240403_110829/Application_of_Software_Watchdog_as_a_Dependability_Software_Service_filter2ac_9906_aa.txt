title:Application of Software Watchdog as a Dependability Software Service
for Automotive Safety Relevant Systems
author:Xi Chen and
Juejing Feng and
Martin Hiller and
Vera Lauer
Application of Software Watchdog as a Dependability Software Service for 
Automotive Safety Relevant Systems 
Martin Hiller 
Volvo Technology 
Corporation – Gothenburg, 
Sweden 
martin.hiller 
@volvo.com 
Vera Lauer 
DaimlerChrysler AG – 
Stuttgart, Germany 
vera.lauer 
@daimlerchrysler.com 
to 
components  can  be  mapped  onto  different  ECUs, 
where  the  application  can  be  divided  into  code 
sequence  components  called  runnables.  Runnables 
from  different  applications  can  be  mapped  onto  the 
same task, while tasks from different applications can 
also  be  mapped  onto  the  same  ECU.  Therefore,  it  is 
possible, 
that  runnables  from  different  software 
components  can  be  mapped 
task. 
Considering  the  dependability  requirements  of  the 
runnables,  different  time  constraints  can  be  required 
for  two  runnables.  Those runnables  should  be  treated 
differently in fault detection and error processing.  
the  same 
Taking  the  current  trends  into  consideration,  we 
need  more  powerful  services  to  detect  timing  and 
program  flow  faults.  Such  services  are  not  only 
required  in  the  system  integration  and  validation 
phases  but  also  in  runtime.  A  well-defined  layered 
software  platform  [3]  with  flexible  dependability 
software services for fault tolerance is a key issue for 
providing 
in 
automotive applications. 
safety-relevant 
systems 
control 
The  Software  Watchdog  service,  aimed 
for 
monitoring  the  timing  behavior  and  program  flow,  is 
designed  in  the  scope  of  the  EU  project  EASIS 
(Electronic  Architecture  and  System  Engineering  for 
Integrated  Safety  Systems,  see  www.easis.org).  This 
project  is  an  industry  consortium  of  22  European 
leading  vehicle  manufacturers,  system  suppliers,  tool 
producers  and  research 
institutes.  Today,  safety 
systems  are  mainly  stand-alone  systems  which  have 
little  or  no  links  across  domain  borders  (domains  in 
this context are e.g. powertrain, chassis, and body). So-
called Integrated Safety Systems (ISS) combine active 
and  passive  safety  systems  across  domain  borders. 
Links  to  telematics  services  are  also  included  in  the 
term. 
2. Related work 
For automotive safety systems, satisfying real-time 
requirements  in  a  deterministic  manner  is  a  critical 
issue. To meet timing constraints, different monitoring 
mechanisms  have  been  developed,  such  as  the  ECU 
hardware  watchdog  [3][5][6],  deadline  monitoring 
[7][8] and execution time monitoring [9]. Approaches 
of  control  flow  checking  techniques  with  signatures 
Xi Chen 
DaimlerChrysler AG – 
Stuttgart, Germany 
xi.chen 
@daimlerchrysler.com 
Juejing Feng 
RWTH Aachen University – 
Aachen, Germany 
juejing.feng 
@rwth-aachen.de 
Abstract 
To face the challenges resulting from the increasing 
density of application software components and higher 
dependability requirements of the future safety systems 
in the automotive electronics, a dependability software 
service  to  monitor  individual  application  software 
components in runtime is required in order to improve 
the overall system dependability. This paper proposes 
the  application  of  a  Software  Watchdog  service 
providing  heartbeat  monitoring  and  program  flow 
checking.  The  Software  Watchdog  is  integrated  in  a 
software platform for the automotive safety electronics. 
A  model-based  design  with  Matlab/Simulink  and  an 
evaluation  of  this  Software  Watchdog  service  in  a 
hardware-in-the-loop validator are also given. 
Index  Terms  —  Software  Watchdog,  heartbeat 
flow  checking,  automotive 
monitoring,  program 
dependable software platform and software services 
1. Introduction and background 
The  on-board  electrics  and  electronics  (E/E)  in 
vehicles  have  become  subject  to  more  demanding 
requirements  in  recent  years,  triggered  by  an  ever 
increasing demand for safety and comfort. On the one 
hand,  the  complexity  and  quantity  of  applications 
implemented by electronics and software is increasing 
dramatically [1]. On the other hand, E/E systems and 
networks should exhibit at least the same dependability 
as state-of-the-art mechanical systems with comparable 
cost. 
With the introduction of powerful microcontrollers 
and  for  reasons  of  cost, 
the  number  of  ECUs 
(Electronic Control Unit) will be consolidated and even 
reduced as more and more functions will be integrated 
on one ECU. Facing this challenge, defining a common 
software  platform  and  standardization  of  software 
services are two key approaches. 
One  central  standardization 
the 
AUTOSAR  Consortium [2],  which  aims to  provide  a 
standardized  software  platform  for  each  in-vehicle 
ECU.  According  to  the  AUTOSAR  vision,  future 
embedded  software  will  be  developed  independently 
from  ECU  hardware  details.  Application  software 
initiative 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007for 
[10] have been developed in the IT-industry to ensure 
the correct execution sequence of the programs. 
software 
A hardware watchdog treats the embedded software 
as a whole. With the increasing density of applications 
on  one  ECU,  the  hardware  watchdog  should  be 
supplemented  with 
the 
monitoring execution on a more detailed level, i.e., on 
the level of tasks or runnables. 
Deadline  monitoring  of 
[8] 
operating system and execution time monitoring [9] of 
AUTOSAR OS introduce the time monitoring of tasks, 
but  the  granularity  of  fault  detection  on  the  layer  of 
tasks is not fine enough for runnables.  
the  OSEKTime 
services 
In the field of control flow checking, a lot of work 
has  been  made  in  the  IT-industry  to  check  the 
correctness  of  program  flow.  Most  of  the  current 
methods  of  control  flow  checking  are  based  on 
assigning  signatures  to  blocks  as  introduced  in  [10]. 
Such  a  technique  suffers  from  high  performance 
overhead  and 
to 
modification of programs. 
flexibility  with 
regard 
low 
3. Functional design 
The  Software  Watchdog  is  supposed  to  ensure the 
real-time  characteristics  of  the  system.  Tracing  the 
cause of the violation of real-time requirements and an 
early detection of timing faults are not easy because of 
the complicated situations leading to the timing errors. 
A  violation  of  a  timing  constraint  can  be  placed  into 
one of the following two categories: 
1.  An  object  hangs  as  a  result  of  a  requested 
resource  being  blocked,  either  by  the  object 
itself  or  some  other  object,  long  enough  to 
violate the timing constraint. 
is  excessively  dispatched 
for 
the  categorization,  the  Software 
Watchdog identifies those two situations by monitoring 
the  aliveness  and  arrival  rate  of  the  runnables.  For 
correct execution of tasks, program flow is checked by 
the  Software  Watchdog  treating  runnables  as  basic 
blocks. 
Before 
the  design  concept  of 
the  Software 
Watchdog  is  introduced  in  detail,  we  will  briefly 
describe the EASIS software platform, into which the 
Software Watchdog is integrated. 
2.  An  object 
execution. 
According  to 
3.1. EASIS dependable software platform 
The  EASIS  software  platform  [11]  focuses  on 
ECUs  for  the  ISS-applications  which  cross  domain 
borders.  It  separates  the  safety  relevant  application 
software  and 
the  underlying  ECU  hardware  by 
providing a software platform with standard interfaces. 
As shown in Figure 1, the activities concerning the 
EASIS software platform cover layers L2 through L4. 
The ISS dependability software services in L3 aim to 
enhance the safety, reliability, availability and security 
of  new  safety  functions.  ISS  gateway  services  in  L3 
provide secured inter-domain communication services. 
An OSEK-conforming operating system [7] with safety 
relevant  services  such  as  the  Software  Watchdog  is 
integrated  across  L2  and  L3.  Device  drivers, 
microcontroller  abstraction  layer  and  fault  tolerant 
hardware platform reside on L2 and L1, respectively. 
g
n
i
t
a
r
e
p
O
m
e
t
s
y
S
Applications
ISS Application Interface
ISS Services
ISS Dependability
Services
ISS Drivers and 
Microcontroller Abstraction
Microcontroller
Layer 5
Layer 4
Layer 3
Layer 2
Layer 1
Figure 1: EASIS software topology  
3.2. Design of the Software Watchdog 
the 
runnables.  With 
The design of the Software Watchdog (as depicted 
the  concept  of  heartbeat 
in  Figure  2)  follows 
monitoring  of 
information 
provided  by  the  heartbeats  of  the  runnables,  it  is 
possible to monitor periodicity and execution sequence 
of  the  runnables.  Furthermore,  task  state,  application 
state and  global  ECU  state  can  be  derived.  Thus, the 
Software  Watchdog  can  be  designed  to  inform  other 
dependability software services in the EASIS software 
topology,  such  as  the  Fault  Management  Framework 
[12], a general fault handling service in the platform, to 
undertake  different  fault  treatments  depending  on  the 
source, type and severity of the detected faults. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007heartbeats of runnables in the Aliveness Counter (AC) 
and Arrival Rate Counter (ARC). These two kinds of 
counters  are  assigned  to  each  runnable  to  record  its 
heartbeats  during 
the  defined  monitoring  period 
according  to the  fault hypothesis  and  checked  shortly 
before the next period begins. The monitoring periods 
are recorded in the Cycle Counter for Aliveness (CCA) 
and  Cycle  Counter  for  Arrival  Rate  (CCAR).  All  of 
those counters are reset to zero, if the periods defined 
in the fault hypothesis expire or an error is detected in 
the last cycle. In addition to the data resources used for 
the computation, an Activation Status (AS) is assigned 
to each runnable to control the heartbeat monitoring of 
the runnables. 
3.2.2. Program flow checking 
Correct  program  flow  is  a  fundamental  part  of  the 
correct  execution  of  computer  programs.  In 
the 
embedded  system,  the  following  faults  could  cause 
program flow errors: 
(cid:131)  Faults  in  the  software  design,  implementation 
(cid:131)  Transient  faults  in  the  system,  e.g.  memory 
and/or integration. 
errors. 
(cid:131)  Corruption of the program counter. 
To  reduce  the  overhead  involved  during  program 
flow checks as well as the system complexity, only the 
sequence  of  the  safety-critical  runnables  will  be 
monitored.  With  the  help  of  aliveness  indication 
routines,  which  are  integrated  into  the  runnables  as 
automatically  generated  glue  code,  a  view  of  which 
runnables are currently being executed can be derived. 
Compared with the widely discussed method of using 
embedded signatures as proposed in [10], or with the 
watchdog  processor  as  discussed  in  [13],  a  simple 
approach with a look-up table was applied to minimize 
performance  penalty  and  extensive  modification 
requirements  of  applications.  In  the  look-up  table,  all 
possible  predecessor/successor  relationships  of  the 
monitored  runnables  are  stored  and  compared  to  the 
actual execution sequence. 
3.2.3. Task state indication 
In order to achieve global monitoring by integration 
of  the  results  from  the  monitoring  of  runnables,  the 
error messages of runnables are recorded by the Task 
State  Indication  Unit  in  an  error  indication  vector.  If 
one  of  the  elements  in  the  error  indication  vector 
reaches 
task  will  be 
considered  faulty.  Based  on  the  mapping  information 
of  applications  and 
fault 
treatments with a global view of the ECU are taken: 
tasks,  corresponding 
the  whole 
threshold, 
the 
Figure 2: Functional architecture of the Software 
Watchdog 
The  Software  Watchdog  has  three  basic  units:  the 
heartbeat monitoring unit, the program flow checking 
unit and the task state indication unit. 
(cid:131)  Heartbeat monitoring  unit:  With  the help  of  a 
heartbeat  indication  routine,  runnables  report 
their heartbeats to the Software Watchdog. 
(cid:131)  Program  flow  checking  (PFC)  unit:  The 
program  flow  checking  service  monitors  the 
execution sequence of runnables by comparing 
real  executed  successors  with  a  predefined  set 
of possible successors of the predecessors. 
(cid:131)  Task  state  indication  (TSI)  unit:  Errors  of 
monitored runnables detected in the upper two 
blocks will be reported to the TSI unit. The TSI 
unit  then  compares  the  number  of  detected 
errors  with  some  pre-defined  thresholds  and 
generates  individual  supervision  reports  on 
runnables. These reports can be used to derive 
error  indication  states  of  the  tasks,  which  in 
turn  can  be  used  for  determining the  status  of 
the applications. 
3.2.1. Heartbeat monitoring 
Heartbeat  monitoring  offers  a  mechanism  for 
periodically monitoring the aliveness and arrival rate of 
independent  runnables.  The  following  fault  types  are 
handled: 
(cid:131)  Fault 
type  for  aliveness  monitoring:  The 
runnable  is  blocked  or  preempted  for  some 
reason and its aliveness indication routine is not 
executed frequently enough. 
(cid:131)  Fault  type  for  arrival  rate  monitoring:  Within 
one period, there are more aliveness indications 
of the monitored runnable than expected.  
In  EASIS,  we  chose  a  passive  approach  to  record 
and  monitor  the  runnable  updates  by  saving  the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007to  a  software 
If  the  global  ECU  state  is  “faulty”,  the  ECU 
might  be  subjected 
reset 
depending on the requirements and constraints 
of applications. 
If  the  global  ECU  state  is  “OK”,  the  “faulty” 
application  software  components  might  be 