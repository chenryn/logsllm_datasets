# PHP代码加密面面观
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
时代在发展，在PHP平台上开发的开发者越来越多。“天下熙熙，皆为利来；天下攘攘，皆为利往”，许多开发者使用PHP开发他们的商业产品，并将其进行二次分发。可惜由于PHP的机制受限，开发者们只能分发源代码，这对他们的版权保护极为不利，导致PHP界涌现出了不少加密产品。笔者最近想了想，在这里对这些加密产品进行逐项介绍，以飨各位读者。
如果你没有任何技术背景，笔者推荐你直接拉到本文最后来挑选一款适合你的加密。
## 壳”加密”
这一类“加密”包括：
  1. 无扩展加密：phpjiami、zhaoyuanma的免费版本等
  2. 有扩展的加密：`php-beast`、`php_screw`、`screw_plus`、`ZoeeyGuard`、`tonyenc`等市面上几乎所有的开源PHP加密扩展。
把它们称为“加密”算是抬举，它们真的真的只能被称为“自解压压缩包”，像是PHP界的WinRAR，或者是UPX、ASPack。笔者写到这里时暂时停顿了一下，笔者认为把这种“加密”和UPX这些壳相提并论是对UPX的侮辱。因为
**任何一个较为熟悉PHP的人，都可以在一天之内写出这种级别的加密，而不需要任何额外的知识。**
这一类自解压压缩包的共同思路是：
  1. 加密：直接加密整个PHP文件，不对原始PHP逻辑作出改动。无扩展的加密将给用户一个运行时环境（“壳”）和加密后的数据，有扩展的加密将直接获得加密后的数据，并要求用户在使用时安装对应的扩展。
  2. 解密：壳或扩展先确认环境有没有被调试的风险，倘若没有，就直接在内存中解密出整个PHP文件，并使用`eval`或类似方式直接运行。
以下是笔者写的一个简化的代码示例：
也有一些网站可以在线解密，例如国外的UnPHP：
而如果你不会C，或者不想从PHP底层来破解，也有不少的伸手党策略，像是这篇针对`phpjiami` / `zym`的破解方案
，可从中了解这些壳的基本运行方式。
有扩展加密中，`php_screw`因加密方式太弱，容易被已知明文攻击（举例：大部分PHP文件的开头均为`_parser = $parser;
            $this->_variableName = $variableName;
        }
        public static function initialize()
        {
            $parser = (new ParserFactory())->create(ParserFactory::PREFER_PHP7);
            $variableName = 'O0O0OO00';
            return new ObfuscateCode($parser, $variableName);
        }
        public function obfuscate(string $code)
        {
            $this->getFunctionNames($code);
            $this->shuffleStringKeys();
            $this->getObfuscatedAST($this->_ast);
            $keys = [];
            foreach ($this->_strings as $key => $value) {
                $keys[$value] = $key;
            }
            $prettyPrinter = new Standard();
            $text = $prettyPrinter->prettyPrint($this->_ast);
            $text = '$' . $this->_variableName . '=' . var_export($keys, true) . ';' . $text;
            return $text;
        }
        public function enterNode(Node $node)
        {
            return $node;
        }
        public function leaveNode(Node $node)
        {
            if ($node instanceof NodeExprFuncCall || $node instanceof NodeExprMethodCall) {
                if ($node->name instanceof NodeName) {
                    if ($this->mode === 0) {
                        $name = $node->name->toString();
                        if (!isset($this->_strings[$name])) {
                            $this->_strings[$name] = 1;
                        }
                    } else if ($this->mode === 1) {
                        $name = $node->name->toString();
                        if (isset($this->_strings[$name])) {
                            $node->name = new ExprArrayDimFetch(
                                new ExprVariable($this->_variableName),
                                NodeScalarLNumber::fromString($this->_strings[$name])
                            );
                        }
                    }