in chrome,”
https://www.howtogeek.com/412738/how-to-turn-hardware-accelerat
ion-on-and-off-in-chrome/, accessed: 2020-02-11.
[53] B. Pourghassemi, A. Amiri Sani, and A. Chandramowlishwaran,
“What-if analysis of page load time in web browsers using causal
proﬁling,” Proceedings of the ACM on Measurement and Analysis of
Computing Systems, vol. 3, no. 2, pp. 1–23, 2019.
[54] P. Malhotra, L. Vig, G. Shroff, and P. Agarwal, “Long short term mem-
ory networks for anomaly detection in time series,” in Proceedings.
Presses universitaires de Louvain, 2015, p. 89.
[55] N. Laptev, J. Yosinski, L. E. Li, and S. Smyl, “Time-series extreme
event forecasting with neural networks at uber,” in International
Conference on Machine Learning, vol. 34, 2017, pp. 1–5.
[56] D. Bahdanau, K. Cho, and Y. Bengio, “Neural machine translation by
jointly learning to align and translate,” in 3rd International Conference
on Learning Representations, ICLR 2015, San Diego, CA, USA, May
7-9, 2015, Conference Track Proceedings, Y. Bengio and Y. LeCun,
Eds., 2015.
[57] N. Papernot, P. McDaniel, A. Sinha, and M. P. Wellman, “Sok: Security
and privacy in machine learning,” in 2018 IEEE European Symposium
on Security and Privacy (EuroS&P).
IEEE, 2018, pp. 399–414.
[58] D. Lustig and M. Martonosi, “Reducing gpu ofﬂoad latency via ﬁne-
grained cpu-gpu synchronization,” in 2013 IEEE 19th International
Symposium on High Performance Computer Architecture (HPCA).
IEEE, 2013, pp. 354–365.
[59] X. Hu, L. Liang, S. Li, L. Deng, P. Zuo, Y. Ji, X. Xie, Y. Ding,
C. Liu, T. Sherwood et al., “Deepsniffer: A dnn model extraction
framework based on learning architectural hints,” in Proceedings of
the Twenty-Fifth International Conference on Architectural Support for
Programming Languages and Operating Systems, 2020, pp. 385–399.
[60] “Intel ethernet server adapter i210-t1,” https://www.intel.com/conten
t/www/us/en/products/network-io/ethernet/gigabit-adapters/server-i21
0-t1.html, accessed: 2020-02-29.
[61] “Storage
system design analysis: Factors
ssd
https://www.alibabacloud.com/blog/storage-system-d
performance,”
esign-analysis-factors-affecting-nvme-ssd-performance-2 594376,
accessed: 2020-02-29.
affecting nvme
[62] “inﬁniband switches,” https://store.mellanox.com/categories/switches/i
nfiniband-switches.html, accessed: 2020-02-29.
[63] Unknown, “English Word lists,” https://github.com/mahavivo/englis
h-wordlists/blob/master/COCA 20000.txt, 2020, [Online; accessed 18-
August-2020].
[64] “Alexa top sites in china,” https://www.alexa.com/topsites/countries/C
N/, accessed: 2020-03-05.
336
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply. 
[65] S. Lee, Y. Kim, J. Kim, and J. Kim, “Stealing webpages rendered
on your browser by exploiting gpu vulnerabilities,” in 2014 IEEE
Symposium on Security and Privacy.
IEEE, 2014, pp. 19–33.
[66] A. Shusterman, L. Kang, Y. Haskal, Y. Meltser, P. Mittal, Y. Oren, and
Y. Yarom, “Robust website ﬁngerprinting through the cache occupancy
channel,” in 28th USENIX Security Symposium (USENIX Security 19),
2019, pp. 639–656.
[67] Y. LeCun and C. Cortes, “MNIST handwritten digit database,” 2010.
[Online]. Available: http://yann.lecun.com/exdb/mnist/
[68] https://github.com/carpedm20/DCGAN-tensorflow, accessed: 2020-02-
11.
11.
08-27.
[69] “Rnn-lstm/autoencoder/regression cite,” https://github.com/MorvanZho
u/Tensorﬂow-Tutorial/blob/master/tutorial-contents/, accessed: 2020-
02-11.
[70] https://github.com/ilivans/tf-rnn-attention, accessed: 2020-02-11.
[71] https://github.com/Natsu6767/ResNet-Tensorflow, accessed: 2020-02-
[72] https://github.com/tensorflow/models/tree/master/research/inception,
accessed: 2020-02-11.
[73] R. Ricci, E. Eide, and C. Team, “Introducing cloudlab: Scientiﬁc
infrastructure for advancing cloud architectures and applications,” ;
login:: the magazine of USENIX & SAGE, vol. 39, no. 6, pp. 36–38,
2014.
[74] “Aws nitro system,” https://aws.amazon.com/ec2/nitro/, accessed: 2020-
[75] “Ali pingtou is developing a dedicated soc chip for cloud server
core moc card,” https://www.ﬁrstxw.com/view/236611.html, accessed:
2020-08-27.
[76] D. Y. Yoon, M. Chowdhury, and B. Mozafari, “Distributed lock
management with rdma: decentralization without starvation,” in Pro-
ceedings of the 2018 International Conference on Management of Data,
2018, pp. 1571–1586.
[77] Q. Kang, L. Xue, A. Morrison, Y. Tang, A. Chen, and X. Luo,
“Programmable in-network security for context-aware byod policies,”
in USENIX Security Symposium, 2020.
[78] M. Zhang, G. Li, S. Wang, C. Liu, A. Chen, H. Hu, G. Gu, Q. Li,
M. Xu, and J. Wu, “Poseidon: Mitigating volumetric ddos attacks with
programmable switches,” in NDSS, 2020.
[79] “Processor counter monitor (pcm),” https://github.com/opcm/pcm, ac-
cessed: 2020-08-26.
[80] I. Granovsky and E. Perlin, “Integrating pci express
ip in a
soc,” https://www.design-reuse.com/articles/15545/integrating-pci-exp
ress-ip-in-a-soc.html, accessed: 2020-08-26.
[81] Y. Shan, Y. Huang, Y. Chen, and Y. Zhang, “Legoos: A disseminated,
distributed OS for hardware resource disaggregation,” in 13th USENIX
Symposium on Operating Systems Design and Implementation (OSDI
18), 2018, pp. 69–87.
[82] A. O. F. Atya, Z. Qian, S. V. Krishnamurthy, T. F. L. Porta, P. D.
McDaniel, and L. M. Marvel, “Malicious co-residency on the cloud:
Attacks and defense,” in INFOCOM.
IEEE, 2017, pp. 1–9.
[83] W.-M. Hu, “Reducing timing channels with fuzzy time,” Journal of
computer security, vol. 1, no. 3-4, pp. 233–254, 1992.
[84] ——, “Lattice scheduling and covert channels,” in Proceedings 1992
IEEE Computer Society Symposium on Research in Security and
Privacy.
IEEE Computer Society, 1992, pp. 52–52.
[85] J. W. Gray, “On introducing noise into the bus-contention channel,” in
Proceedings 1993 IEEE Computer Society Symposium on Research in
Security and Privacy.
IEEE, 1993, pp. 90–98.
[86] J. W. Gray III, “Countermeasures and tradeoffs for a class of covert
timing channels,” Tech. Rep., 1994.
[87] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-space: high-
bandwidth and reliable covert channel attacks inside the cloud,”
IEEE/ACM Transactions on Networking, vol. 23, no. 2, pp. 603–615,
2014.
[88] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard,
“DRAMA: Exploiting DRAM addressing for cross-cpu attacks,” in
25th USENIX Security Symposium (USENIX Security 16), 2016, pp.
565–581.
[89] G. Irazoqui, T. Eisenbarth, and B. Sunar, “Cross processor cache
the 11th ACM on Asia conference on
attacks,” in Proceedings of
computer and communications security, 2016, pp. 353–364.
[90] D. X. Song, D. A. Wagner, and X. Tian, “Timing analysis of keystrokes
and timing attacks on ssh.” in USENIX Security Symposium, vol. 2001,
2001.
[91] S. Chen, R. Wang, X. Wang, and K. Zhang, “Side-channel leaks in
web applications: A reality today, a challenge tomorrow,” in 2010 IEEE
Symposium on Security and Privacy.
IEEE, 2010, pp. 191–206.
[92] K. P. Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton, “Peek-a-boo,
i still see you: Why efﬁcient trafﬁc analysis countermeasures fail,” in
2012 IEEE symposium on security and privacy.
IEEE, 2012, pp.
332–346.
[93] X. Luo, P. Zhou, E. W. Chan, W. Lee, R. K. Chang, and R. Perdisci,
“Httpos: Sealing information leaks with browser-side obfuscation of
encrypted ﬂows.” in NDSS, vol. 11, 2011.
[94] M. Conti, L. V. Mancini, R. Spolaor, and N. V. Verde, “Analyzing
android encrypted network trafﬁc to identify user actions,” IEEE
Transactions on Information Forensics and Security, vol. 11, no. 1,
pp. 114–125, 2015.
[95] J. Hayes and G. Danezis, “k-ﬁngerprinting: A robust scalable web-
site ﬁngerprinting technique,” in 25th USENIX Security Symposium
(USENIX Security 16), 2016, pp. 1187–1203.
[96] Z. Zhou, W. Diao, X. Liu, Z. Li, K. Zhang, and R. Liu, “Vulnerable
gpu memory management: towards recovering raw data from gpu,”
Proceedings on Privacy Enhancing Technologies, vol. 2017, no. 2, pp.
57–73, 2017.
[97] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis,
“The spy in the sandbox: Practical cache attacks in javascript and their
implications,” in Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, 2015, pp. 1406–1418.
[98] L. Batina, S. Bhasin, D. Jap, and S. Picek, “CSI NN: Reverse
engineering of neural network architectures through electromagnetic
side channel,” in 28th USENIX Security Symposium (USENIX Security
19). Santa Clara, CA: USENIX Association, Aug. 2019, pp. 515–532.
[Online]. Available: https://www.usenix.org/conference/usenixsecurity
19/presentation/batina
[99] L. Wei, B. Luo, Y. Li, Y. Liu, and Q. Xu, “I know what you
see: Power side-channel attack on convolutional neural network
accelerators,” in Proceedings of the 34th Annual Computer Security
Applications Conference, ser. ACSAC ’18. New York, NY, USA:
ACM, 2018, pp. 393–406. [Online]. Available: http://doi.acm.org/10.1
145/3274694.3274696
[100] W. Hua, Z. Zhang,
engineering
convolutional neural networks through side-channel information leaks,”
in Proceedings of the 55th Annual Design Automation Conference,
ser. DAC ’18. New York, NY, USA: ACM, 2018, pp. 4:1–4:6.
[Online]. Available: http://doi.acm.org/10.1145/3195970.3196105
and G. E. Suh,
“Reverse
[101] V. Duddu, D. Samanta, D. V. Rao, and V. E. Balas, “Stealing neural
networks via timing side channels,” CoRR, vol. abs/1812.11720, 2018.
[Online]. Available: http://arxiv.org/abs/1812.11720
[102] M. Yan, C. W. Fletcher, and J. Torrellas, “Cache telepathy: Leveraging
shared resource attacks to learn DNN architectures,” in 29th USENIX
Security Symposium (USENIX Security 20), 2020, pp. 2003–2020.
[103] S. Hong, M. Davinroy, Y. Kaya, S. N. Locke, I. Rackow, K. Kulda,
D. Dachman-Soled, and T. Dumitras, “Security analysis of deep
neural networks operating in the presence of cache side-channel
attacks,” CoRR, vol. abs/1810.03487, 2018.
[Online]. Available:
http://arxiv.org/abs/1810.03487
APPENDIX A
I/O LATENCY UNDER KERNEL-BYPASSING
Traditionally, an I/O operation consists of four segments,
as shown in Figure 9 (left). Here we use a C library API
fread(), which reads ﬁle content into memory buffer, as
the example. When it is executed by the CPU, A) a request
will be issued from the user space to the kernel space, going
through drivers (ﬁle system, block, and PCI), till delivered to
the hard drive; B) the hard drive processes the request; C)
the results are written to memory; D) the code waiting for the
result is notiﬁed about the request completion. To measure the
I/O latency of fread(), the developer can execute clock()
before and after and compute the interval, say I, which equals
to the sum of A, B, C, and D.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply. 
337
Fig. 10: The delay sequences of the three tested models, which
are collected by RDMA NIC.
APPENDIX C
APPLICATIONS INVESTIGATED FOR CARET BLINKING
We investigated 10 applications in Ubuntu to see how many
of them have blinking caret during user typing, but found only
Firefox, as shown in by Table VII, has this behavior.
Google Chrome
79.0.3945.88
Comment
Caret Blinks
App name
Firefox
gedit
PyCharm
Sublime Text
VS Code
LibreOfﬁce Writer
LibreOfﬁce Calc
IDEA Community
Skype
Version
80.0.1-1
3.28.1
2020.2.1
3211
1.48.2
1:6.0.7
1:6.0.7
2020.2.1
8.64.0.67
TABLE VII: Applications investigated for caret blinking.
LIST OF WORDS TESTED FOR WORD RECOVERY
APPENDIX D
hero, test, need, that, rise, star, aids, hate, diet, road, hers,
host, than, tree, sit, dad, eat, dna, sin, net, its, rid, ear, her, art,
toe, tie, hit, radar, sense, their, heart, share, taste, harsh, ratio,
north, trend, shore, order, noise, trash, stand.
Fig. 9: Normal I/O vs Kernel-bypass I/O.
After PCIe congestion, I is supposed to be increased and
the adversary tries to use it to infer the status of the victim
device. However, such measurement is not always reliable as
A and D involve system calls and interrupt handling, whose
latency is pretty random [31]. B and C are directly related to
the operational status of the I/O device, which can reﬂect the
degree of PCIe congestion, but they are overwhelmed by A
and D.
to a memory region that
However, the procedure is largely different when the kernel-
bypass drivers are used. As shown in Figure 9 (right), the
developer uses send queue and completion queue to decouple
OS from the I/O path. The user-space application directly
writes a request
is mapped to
the I/O device, eliminating A. On completion, the result is
written into a pre-allocated memory region to be polled by
the application without interrupting CPU, eliminating D. As
a result, I is composed of B and C, making measurement
on PCIe congestion possible. In fact, the latency I can be
“ampliﬁed” several times. For instance, In the setting that a
GPU shares a link with a NIC, the delay of packet receiving
on the NIC (I) can go up 6 times, when link congestion is
caused by the GPU whose status turns from idle to exchanging
data, as we will show in Figure 2 in Section IV.
APPENDIX B
ATTEMPT OF RECOVERING LAYERS
According to Wei et al. [26], when TensorFlow is leveraged
to run a DNN model, executing each layer involves data
and code exchange between CPU and GPU, which should
introduce intermittent PCIe trafﬁc. We attempted to segment
the delay sequence and recognize the layers, but found the
PCIe trafﬁc of different layers are interleaved. We execute
two models (one with a conv layer and one with relu and
pool layers) and their combination (conv-relu-pool). The delay
sequence is shown in Figure 10. As we can see, the delay
sequence from conv-relu-pool model is not simply the con-
catenation of conv and relu-pool.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply. 
338
Start =clock();fread(fd, buf);End=clock();Start =clock();Send.enqueue(Write);while(!completion.dequeue());End=clock();Kernel Bypass I/ONormal I/OLibcCall GateFS DriverBlock Dev DriverPCI DriverPCIe LinkDevice ProcessingPCIe LinkCopy to UserReturn to UserSPDKPCIe LinkDevice ProcessingPCIe LinkUser SpaceKernel SpaceHardware0conv-relu-pool13s0.2k1.5k2k0conv13s0.2k1.5k2kInterval (cycles)0relu-pool13s0.2k1.5k2k