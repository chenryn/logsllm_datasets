key pk, a signature σ ← (r, s) that veriﬁes under this public key
pk for a message m that is unknown to the attacker as well as
circumstantial knowledge aux about the message. Not knowing
the message prevents the adversary from mounting the same
attack as in the S-CEO case when s2 is invertible (because
this requires knowledge of c ← H(r, m)). We therefore use
the attack case for s2 not being invertible.
If s2 ← Decompress(s) is not invertible, there exists a non-
zero α ∈ Zq[x]/(φ) s.t. s2α = 0 and the attacker can win by
setting pk
, σ). The signature σ
1 ← c − s2h(cid:48) = c − s2(h + α) =
veriﬁes m under pk
c − s2h − s2α = c − s2h. Thus, s(cid:48)
1 = s1 and the bound is
satisﬁed trivially. According to Assumption V.4 the probability
of s2 not being invertible is non-negligible, such that the
attacker succeeds with non-negligible probability as well.
(cid:48) ← h + α and outputting (pk
(cid:48)
(cid:48) since s(cid:48)
We note FALCON uses SHAKE-256 as the underlying
hash function H. Hence, if one would apply our general
transformation with this hash function H, collision resistance
and non-malleablity would conceivably hold, and the resulting
scheme would obtain all security properties.
C. Rainbow
The signature scheme Rainbow [25] is based on multivariate
cryptography. In particular, its security is based on the multivari-
ate quadratic problem. Rainbow employs a one-way function
P : Fn → Fk which is a multivariate quadratic polynomial map
in n = k + v1 variables where the coefﬁcients are taken from
the ﬁeld F. The trapdoor is the knowledge of the composite
functions of P = S ◦ F ◦ T where S and T are invertible
afﬁne maps and the central map F is quadratic consisting of
k multivariate polynomials. The ﬁrst v variables are called
vinegar variables, while the remaining k variables are called
oil variables. The central map F has no quadratic terms that
contain two oil variables. The maps S and T are chosen to be
linear, while F is homogeneous of degree 2, and, hence, so is
P. We give an algorithmic description of Rainbow in Figure 9.
The key generation algorithm generates the coefﬁcients of
the three maps S, F, and T pseudorandomly with the help of
a short seed spriv . The coefﬁcients of the polynomials of these
maps form the signing key whereas the composition P yields
the public key. Intuitively, a Rainbow signature is the preimage
of a randomized hash of the message m under P. That is, the
signer computes h ← H(H(m), r) for a random r and then
solves for z in P(z) = h with the help of the decomposition
of P. For this the signer ﬁrst solves x = S−1(h) and then
computes y = F−1(x) by ﬁxing the vinegar variables v in
y to randomly chosen values. This reduces the equation to a
linear system, which can be solved with Gaussian elimination.
Finally, derive z = T −1(y) to build the signature (z, r). The
signing step may require to try multiple v and r to be able
to ﬁnd a solution. The veriﬁcation algorithm recomputes the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
121707
KGen(1λ)
11 :
12 :
spriv ←${0, 1}256
(S,T ,F) ←
PRNG(spriv )
13 : P ← S ◦ F ◦ T
sk ← (S,F,T )
14 :
15 : pk ← P
16 :
return (sk, pk)
(z, r) ← σ
Vf(pk, m, σ)
41 :
42 : h ← H(H(m), r)
43 :
return [P(z) = h]
repeat
Sig(sk, m)
21 :
22 :
23 : until F, with v set,
v ←$ Fv
is invertible
24 :
repeat
25 :
26 :
r ←${0, 1}128
h ← H(H(m), r)
x ← S−1(h)
27 :
o ← solve(F(v(cid:107)o) = x)
28 :
29 : until o is a valid solution
30 : y ← (v(cid:107)o)
31 : z ← T −1(y)
32 : σ ← (z, r)
return σ
33 :
Figure 9: Algorithmic description of Rainbow.
hash h ← H(H(m), r), and accepts if this digest is equal to
P evaluated at z.
Note that Rainbow proposes two additional variants which
differ from standard Rainbow in the way keys are computed and
stored. Instead of computing the public key from the secret key,
major parts of the public key will be ﬁxed and then the central
map F is computed. In more detail, the CZ (circumzenithal)
variant generates a portion of P and the matrices S and T from
small seeds spub and spriv, respectively, using an AES-based
PRNG. From this, the central map F and P2 (the remaining
parts of P) can be computed obtaining a key pair. Note that this
variant does not store the whole map P. Instead, it only stores
spub and P2 to reduce the public key size, and just reconstructs
P when needed. This comes at the expense of signiﬁcantly
increased veriﬁcation time. The compressed variant is even
more compact than the CZ variant: It stores only the two seeds
in the secret key and computes all matrices when they are
needed. This increases both the signing and veriﬁcation time.
In the following, we start showing that Rainbow achieves
message-bound signatures followed by showing that it does not
provide non re-signability, conservative exclusive ownership,
and destructive exclusive ownership.
Proposition V.7. The signature scheme Rainbow as described
in Figure 9 (and its two variants) achieve MBS if the hash
function H is collision resistant.
Proof. A successful attacker against MBS of Rainbow yields
a public key pk, a signature σ ← (z, r), and two messages
m1, m2, where σ veriﬁes for both m1 and m2 under pk where
m1 (cid:54)= m2.
In the veriﬁcation algorithm the message m1 is hashed to
h1 ← H(H(m1), r) and m2 to h2 ← H(H(m2), r). If h1 =
h2 the attacker breaks collision resistance of H. If h1 (cid:54)= h2
and both messages verify it must hold that h1 = P(z) = h2
(cid:48)
, pk
while h1 (cid:54)= h2.
Proposition V.8. The signature scheme Rainbow as described
in Figure 9 (and its two variants) do not provide NR.
Proof. An attacker against NR of any variant of Rainbow is
given a public key pk, a signature σ ← (z, r) that veriﬁes
under this public key pk for a message m that is unknown to
the attacker, as well as circumstantial knowledge aux about the
message. Note that the attacker can reconstruct P from pk for
all variants of Rainbow. Since the signature σ veriﬁes for the
message m, it must hold that P(z) = h(cid:48) = H(H(m), r). Thus,
the attacker can learn the hash value h(cid:48) by simply computing
h(cid:48) ← P(z). Equipped with this, the attacker generates its own
(cid:48)
key pair (sk
) and then executes the signing algorithm
(cid:48) and three minor
(cf. Figure 9) with its own secret key sk
changes: First, instead of sampling a random salt the attacker
reuses r from the signature it initially received. Second, instead
of computing the hash value h as described in the scheme the
attacker uses the hash value h(cid:48) it computed before. Third, in
case the Gaussian elimination does not yield a valid o, the
attacker restarts with sampling new vinegar variables. For the
remaining part of the algorithm it simply proceeds as speciﬁed
and ﬁnally receives a valid signature that correctly veriﬁes
under its chosen public key for the message m even without
(cid:48) and the output
knowing the message. The attacker outputs pk
of the modiﬁed sign algorithm.
Proposition V.9. The signature scheme Rainbow as described
in Figure 9 does not provide S-CEO and therefore not
M-S-UEO and, assuming collision resistance of the hash
function, neither DEO.
Proof. An attacker against S-CEO of Rainbow is given a public
key pk ← P, queries the signature oracle on a message m, and
gets a signature σ ← (z, r) that veriﬁes for m under this public
key pk. Let h ← H(H(m), r). If z is zero, then so is h as it
satisﬁes h = P(z) for the homogeneous polynomial P. In this
case, the attacker can pick P(cid:48) to be an arbitrary homogeneous
polynomial of degree 2. In the case z = (z1, . . . , zn) is non-
zero with zλ (cid:54)= 0, the attacker picks a homogeneous polynomial
map P∗ of degree 2 with P∗(z) = h as follows: For each j ∈
[1, k] set pj(x) = (hjz−2
λ such that each pj is homogeneous
of degree 2. For any j it holds that pj(z) = (hjz−2
λ = hj.
Hence, setting P∗ = (p1, . . . , pk) we ﬁnd that P∗(z) = h. If
P∗ (cid:54)= P, the attacker returns (P∗, m, σ).
If P∗ coincides with P, we can compute a distinct mapping
P(cid:48) (cid:54)= P as follws. Consider the set S ← {qk(cid:96)(x) = xkx(cid:96) −
xλx(cid:96) : k, (cid:96) ∈ [1, n]}. Note that S consists of homogeneous
polynomials of degree 2. By construction qk(cid:96)(z) = zkz(cid:96) −
zλz(cid:96) = 0 and p(cid:48)
j(x) = pj(x) + qk(cid:96)(x) is thus another
polynomial with p(cid:48)
j(z) = hj. We can therefore efﬁciently
compute another polynomial map P(cid:48) = (p(cid:48)
k) of the
required form. The attacker returns (P(cid:48), m, σ).
Similarly, an attacker against S-DEO of Rainbow receives
a signature σ ← (z, r) for a message m for which h ←
H(H(m), r). We assume z (cid:54)= 0, else it asks for another
signature ˜σ ← (˜z, ˜r) for another message ˜m. If again ˜z = 0
1, . . . , p(cid:48)
λ )x2
λ )z2
zk
zλ
zk
zλ
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
131708
then both hash values h, ˜h ← H(H( ˜m), ˜r) of the requested
signatures would collide in 0, since h = P(z) = P(0) = 0 =
P(˜z) = ˜h, contradicting the collision resistance of H. Hence
we can assume that the adversary eventually holds a signature
σ ← (z, r) for m with z (cid:54)= 0. The adversary now picks a
message m(cid:48) (cid:54)= m and computes h(cid:48) ← H(H(m(cid:48)), r) for the
given value r in the signature. Then it proceeds as above to
obtain P(cid:48) (cid:54)= P with P(cid:48)(z) = h(cid:48) and returns (P(cid:48), m(cid:48), σ).
The attack against S-CEO and S-DEO does not immediately
carry over to the CZ and compressed variants. The reason is
that the variants use seeds to generate public keys such that we
cannot pick suitable mauled keys easily. We provide a more
detailed discussion on this issue in the full version [29].
Rainbow recommends SHA256 as the underlying hash
function H. Hence, whereas the scheme currently does not
satisfy all security properties, using our general transformation
with the implemented hash function would be considered to
achieve the stronger guarantees.
D. Alternate NIST Candidates
In the following, we provide an overview of the main results
of whether the alternate NIST candidates achieve any of the
security properties beyond unforgeability.
1) GeMSS: The signature scheme GeMSS [26] is built from
multivariate cryptography and relies on hidden ﬁeld equations
with vinegar specialization. We give an algorithmic description
of GeMSS in Figure 11. GeMSS does not achieve any of the
properties beyond unforgeability. We give the proofs of the
following proposition in Appendix C-A.
Proposition V.10. The signature scheme GeMSS as described
in Figure 11 does not provide S-CEO, S-DEO, MBS nor NR
under some mild assumption as stated in Appendix C-A.
2) Picnic: The signature scheme Picnic [27], [30] is a family
of digital signature algorithms based on multi-party computa-
tion, zero-knowledge proofs, and symmetric key primitives such
as a hash function and a block cipher. We give an algorithmic
description of Picnic in Figure 12. The scheme deploys a hash
function to create the challenge in a Fiat-Shamir proof, applied
to a commitment a of the multi-party computation, the public
key pk, and the message m. Picnic achieves all presented
properties beyond unforgeability which is summarized in the
following proposition. We give the proof in Appendix C-B.
Proposition V.11. The signature scheme Picnic as described
in Figure 12 achieves S-CEO, S-DEO, MBS, and NR, if the
hash function H is collision resistant and Φ-non-malleable for
Φ = {φpk(cid:48),ψ} and φpk(cid:48),ψ(a, pk, m) = (ψ(a), pk
(cid:48)
, m) for any
function ψ.
3) SPHINCS+: SPHINCS+ [28] is a hash-based signature
scheme based on Merkle trees and employs both a one-time
signature scheme (OTS) and a few-time signature scheme
(FTS). We provide an algorithmic description of SPHINCS+
in Figure 13. It uses two hash functions, Hmsg for hashing the
message, and H for building the hash three. Both are instantiated
from one hash function like SHAKE-256. SPHINCS+ can
provably achieve the property of message-bound signatures
which is captured in the following proposition. We give the
proof details in Appendix C-C.
Proposition V.12. The SPHINCS+ scheme as described in
Figure 13 achieves MBS if the hash function H is collision
resistant and Hmsg is interleaved target subset resilient.
For the remaining properties of S-CEO, S-DEO and NR,
we cannot provide formal proofs showing that SPHINCS+
achieves them under standard assumptions. We provide some
discussion arguing that we intuitively expect these notions to
hold in Appendix C-C.
VI. CONCLUSIONS
Our analysis shows that several NIST ﬁnalists do not achieve
security properties beyond unforgeability that other modern
schemes do. Providing these additional properties for all the
candidates is likely to prevent attacks further down the line,
and we see no substantial drawbacks in adapting the schemes
(either directly or by our BUFF transformation) to achieve them.
This suggests that it would be prudent for NIST to explicitly
require these properties.
Acknowledgements: We thank Thomas Pornin and Thomas
Prest for providing their insight on whether s2 as computed
by the signing algorithm in FALCON is invertible. This
research work has been funded by the German Federal
Ministry of Education and Research and the Hessian Min-
istry of Higher Education, Research, Science and the Arts
within their joint support of the National Research Center
for Applied Cybersecurity ATHENE. Funded also by the
Deutsche Forschungsgemeinschaft (DFG, German Research
Foundation) – SFB 1119 – 236615297 and the German Ministry
of Education, Research and Technology in the context of the
project Aquorypt (grant number 16KIS1022).
REFERENCES
[1] S. Goldwasser, S. Micali, and R. L. Rivest, “A digital signature scheme
secure against adaptive chosen-message attacks,” SIAM Journal on
Computing, vol. 17, no. 2, pp. 281–308, Apr. 1988.
[2] T. Pornin and J. P. Stern, “Digital signatures do not guarantee exclusive
ownership,” in ACNS 05, ser. LNCS, J. Ioannidis, A. Keromytis, and
M. Yung, Eds., vol. 3531. Springer, Heidelberg, Jun. 2005, pp. 138–150.
[3] D. Jackson, C. Cremers, K. Cohn-Gordon, and R. Sasse, “Seems legit:
Automated analysis of subtle attacks on protocols that use signatures,”
in ACM CCS 2019, L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds.
ACM Press, Nov. 2019, pp. 2165–2180.
[4] J. Brendel, C. Cremers, D. Jackson, and M. Zhao, “The provable security
of Ed25519: Theory and practice,” IACR Cryptol. ePrint Arch., vol.
2020, p. 823, 2020. [Online]. Available: https://eprint.iacr.org/2020/823
[5] S. Blake-Wilson and A. Menezes, “Unknown key-share attacks on the
station-to-station (STS) protocol,” in PKC’99, ser. LNCS, H. Imai and
Y. Zheng, Eds., vol. 1560. Springer, Heidelberg, Mar. 1999, pp. 154–170.
[6] A. Menezes and N. Smart, “Security of signature schemes in a multi-
user setting,” in Designs, Codes and Cryptography, vol. 33. Springer,
Heidelberg, 2004, pp. 261–274.
[7] R. Barnes, J. Hoffman-Andrews, and J. Kasten. (2015) Automatic
Certiﬁcate Management Environment (ACME). [Online]. Available:
https://tools.ietf.org/html/draft-ietf-acme-acme-00
[8] ——.
(2015) ACME Draft Barnes.
[Online]. Available: https:
//datatracker.ietf.org/doc/draft-barnes-acme/04/
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
141709
[9] A. Ayer. (2015) ACME signature misuse vulnerability in draft-barnes-
acme-04. [Online]. Available: https://www.ietf.org/mail-archive/web/
acme/current/msg00484.html
[10] ——.
(2015) Duplicate Signature Key Selection Attack
in
[Online]. Available: https://www.agwa.name/blog/
Let’s Encrypt.
post/duplicate_signature_key_selection_attack_in_lets_encrypt
[11] T. Duong and J. Rizzo.
Vulnerability.
http://netifera.com/research/ﬂickr_api_signature_forgery.pdf
(Retrieved November 2020).