title:CAMP: Content-Agnostic Malware Protection
author:Moheeb Abu Rajab and
Lucas Ballard and
Noe Lutz and
Panayiotis Mavrommatis and
Niels Provos
CAMP: Content-Agnostic Malware Protection
Moheeb Abu Rajab, Lucas Ballard, No´e Lutz, Panayiotis Mavrommatis, Niels Provos
1600 Amphitheatre Parkway, Mountain View, CA 94043
Google Inc.
Abstract---In spite of recent advances, the world wide web re-
mains an important vector for malware installation. Approaches
to evaluating potentially malicious code before execution in a
browser, such as blacklisting or content-based detection are
hindered by an attacker’s ability to easily change hosting domains
or mutate malware binaries. On the other hand, whitelist-
based approaches are challenged by the large, dynamic, and
heterogenous space of benign binaries that they must track. In
practice these approaches continue to provide value for popular
binaries at either extreme of maliciousness (e.g., the current large
outbreak of malware, the benign binaries shipped with an OS),
but bridging the gap between whitelist and blacklist detection
for web malware remains a significant challenge.
This paper presents CAMP, a content-agnostic malware pro-
tection system based on binary reputation that is designed to
address these shortcomings. CAMP is built into the browser and
determines the reputation of most downloads locally, relying on
server-side reputation data only when a local decision cannot be
made. This paper gives a detailed overview of CAMP and its
architecture and provides an evaluation of the system through
a six-month deployment in which 200 million users of Google
Chrome requested between eight to ten million reputation re-
quests a day. Our evaluation shows that CAMP exhibits accuracy
close to 99% relative to proprietary VM-based dynamic analysis,
is able to process requests in less than 130 ms on average, and
was able to detect approximately five million intentional malware
downloads per month that were not detected by existing solutions.
I. INTRODUCTION
Malware is a popular venue for monetization in the un-
derground economy [7]. Adversaries frequently compromise
vulnerabilities in users’ machines to automatically install mal-
ware via so-called drive-by downloads. The action of visiting
a malicious web page in a vulnerable browser is sufficient
for an adversary to gain complete control over the vulnerable
machine allowing her to install arbitrary software. Frequently,
installed malware can cause the computer to become part of
a botnet or can exfiltrate sensitive data such as credit card
numbers to be sold in the underground economy [20].
As browsers and plugins are becoming more secure, the
vulnerable user base is shrinking and drive-by downloads
are becoming less effective as a malware distribution vector.
While drive-by downloads are still a popular distribution vec-
tor, adversaries are increasingly turning to social engineering
for malware distribution. Fake Anti-Virus products are one
such example in which the user is led to believe that their
computer has been infected and a free product to remedy the
situation is offered. Consequently, the user voluntarily down-
loads and installs malware under the guise of a free security
solution. The benefit to the adversary is that the malware
is now in control of the computer and no vulnerabilities or
exploits were required for the installation [28], [12].
Traditional defense mechanisms such as Anti-Virus (AV)
products are often ineffective against current malware down-
loads as AV engines tend to be content based and provide
an oracle to malware authors allowing them to repackage
their software until it is no longer detected [24]. Similarly,
URL blacklists such as Google’s Safe Browsing API [16]
work well for identifying compromised web pages which tend
to be relatively static, but cannot be completely up to date
in identifying all the domains from which malware is being
distributed. The abundance of dynamic DNS providers allow
for frequent rotation of domains from which malware is being
distributed. If the domains rotate faster than the update interval
of the malware lists, domains distributing malware are more
likely to remain undetected [3], [27].
The malware arms race has shown that neither signature
based AV engines nor malware lists are sufficient to protect
users. A whitelist based approach in which only trusted
software can be installed is more promising in that it can
completely block the installation of socially engineered mal-
ware [6], [11]. Since such malware is not on the whitelist,
installation of it will not be allowed. However, whitelists suffer
from drawbacks, too. The sheer variety of available software
and the perpetual creation of new software makes the task
of creating a whitelist that covers all benign software nearly
impossible. As a result, neither whitelist nor blacklist based
approaches provide sufficient coverage to protect users from
malicious software in practice.
This paper offers a different approach in which the gap be-
tween known benign and known malicious software is bridged
by a content--agnostic reputation--based detection approach.
CAMP, our detection system, consists of a client component
built into Google Chrome and a server component responsible
for maintaining a reputation system that predicts the likelihood
that a downloaded binary is malicious. CAMP makes use
of Google’s Safe Browsing API to detect downloads known
to be malicious. For all binaries not detected, we extract
additional features from information available to the web
browser about the download and use these features to build a
server-based reputation system. The reputation system predicts
if an unknown binary is malicious without prior knowledge of
its content. We built CAMP to protect users of Google Chrome
from downloading malware on Windows. Our system protects
over 200 million users, makes millions of reputation-based
decisions every day, and identifies about 5 million malware
downloads every month beyond the malware warnings that
Google’s Safe Browsing API shows for dangerous web sites.
CAMP achieves an accuracy close to 99% relative to propri-
etary, VM-based dyanamic analysis.
In this paper, we provide a detailed overview of the design
and architecture that comprises our reputation-based detection
system and evaluate its effectiveness based on data collected
from February to July 2012. We discuss how the system
minimizes the impact on the privacy of browser users and
evaluate its detection performance focusing especially on false
positives.
This paper makes the following contributions:
• We present CAMP, a content-agnostic malware protec-
tion system, which utilizes reputation-based detection to
protect users from web-based malware.
• We perform an extensive, six month evaluation of CAMP
consisting of over 200 million unique users and millions
of daily reputation evaluations. We show that our content-
agnostic detection approach is both accurate, with an
accuracy close to 99%, and well performing, processing
requests in less than 130 ms on average.
• We compare CAMP with the current state of practice
and demonstrate that CAMP outperforms antivirus, as
well as various web services, e.g. McAfee’s Site Advi-
sor, Symantec’s SafeWeb, etc. Further, CAMP identifies
large numbers of malware undetected by these services,
including 5 million malware downloads per month not
identified by Google’s Safe Browsing API.
The remainder of the paper is organized as follows. We
discuss related work in Section II. In Section III, we present
a detailed description of the system architecture and all
components responsible for creating the reputation system.
Section IV discusses how to leverage the reputation system
for malware detection. We evaluate the performance of the
system in Section V, and present a small case study of a highly
dynamic malware campaign. We discuss CAMP’s unique
properties in Section VI. Finally, we conclude in Section VII.
II. RELATED WORK
Protecting users from malware continues to be a challenging
problem. In the following, we provide an overview of differ-
ent approaches to prevent malware from infecting users and
explain how CAMP differs from prior work.
a) Content-based detection: Anti-Virus software is one
of the most common content-based malware detection tech-
niques. Usually, Anti-Virus products run on end-user systems
and employ signature-based detection to identify variants of
known malware.
While Anti-Virus engines do help in protecting users from
malware infections, several challenges limit their effectiveness.
Malware authors have developed increasingly sophisticated
evasion techniques, such as packing and polymorphism, aimed
at circumventing detection by AV engines [4], [30]. Addi-
tionally, the signature generation and update cycle causes an
inherent delay in protecting users against new variants of
malware.
Oberheide et al. [24] proposed CloudAV as a new model
to increase the effectiveness of Anti-Virus products. Under
this model, Anti-Virus protection is moved into the cloud and
multiple AV engines, working in parallel, are employed to
improve detection rates. While combining the decision of mul-
tiple AV engines leads to better detection, this approach is still
subject to the limitations mentioned above as CloudAV also
relies on timely signature updates. Furthermore, Oberheide et
al. show that major Anti-Virus engines detect only 35% to 70%
of recent malware which means that many malware binaries
remain undetected. CloudAV also requires that all binaries
are uploaded to the cloud which exposes these downloads
to a third-party and may constitute an unacceptable loss in
privacy for some users. While CAMP also moves detection
of malware into the cloud, it reduces the privacy impact by
employing whitelists so that most download URLs stay within
the browser and do not need to be sent to a third party. Binary
payloads never leave the browser. Additionally, its content-
agnostic approach does not suffer from the same limitations
as AV engines, e.g. delays in signature updates.
protection:
b) Blacklist-based
Blacklist-based
approaches provide protection from malware by identifying
the sites from which it
is being served. Services such
as Google’s Safe Browsing API
[16], McAfee’s Site
Advisor [22] or Symantec’s Safe Web [23] detect malicious
or compromised web sites that may infect users with malware.
Browsers integrate with these services directly or via tool
bars and prevent users from visiting known malicious sites.
While effective in identifying compromised web-sites which
tend to be long lived, blacklists face challenges when trying
to protect against adversaries that employ highly agile
malware distribution servers [27]. By frequently changing the
domains that serve malware, blacklists become less effective
as domains rotate faster than the time it takes to detect them.
CAMP offers a different approach. Instead of exporting
a blacklist to clients, CAMP protects users by augmenting
blacklists and whitelists with a content-agnostic reputation
system that protects users from malicious binaries without
requiring a-priori knowledge of the binary or its serving
domains. Specifically, the browser performs the following to
check the safety of a downloaded file: (1) the browser tries
to locally determine whether the download is malicious by
checking the download URL against a list of URLs known
to serve malware exported to the browser using Google’s
SafeBrowsing API, (2) the browser checks locally against
a dynamically updated list of trusted domains and trusted
binary signers to determine whether the downloaded content is
likely benign and, (3) for downloads that do not match any of
the local lists, the browser extracts content-agnostic features
from the download and sends a request to CAMP’s reputation
service. As a result, CAMP protects users against malicious
downloads that would likely have been missed by a blacklist-
based approach. We compare CAMP’s performance to popular
blacklist services in Section V.
CAMP and Google’s SafeBrowsing API complement one
another. The API exports blacklists of compromised sites that
include content from malicious sites that automatically exploit
a browser with no interaction from the user. This works well
for protecting browsers from infected landing pages as they
are relatively static, and compromise can be observed by an
automated system to build the blacklist [25]. CAMP, on the
other hand, targets binaries that were downloaded by misled
users from highly dynamic infrastructures.
In contrast
c) Whitelist-based schemes:
to blacklists,
whitelists ensure that only known benign software can be
installed and installation of everything else is disallowed. For
example, Bit9 [6] and CoreTrace [11] maintain a list of bina-
ries verified to be benign. While whitelisting can be effective
in enterprise settings, it remains challenging to maintain an
up-to-date whitelist that covers the plethora of applications
developed globally. Therefore, protecting downloads in the
browser through whitelists alone is not currently practical.
Nonetheless, to protect user privacy, CAMP derives a whitelist
from its reputation data that is used by the web browser
to locally decide if a binary download should be trusted.
Downloads not on the whitelist require a reputation-based
decision.
d) Reputation-based detection: A lot of research has
been conducted on reputation systems [19] and how to use
them for detecting malicious activities. Hao et al. [18] pro-
posed SNARE, a reputation system for detecting spam email.
Qian et al. [26] proposed using network-based clustering to
increase the accuracy of spam-oriented blacklists.
Notos [2] and EXPOSURE [5] offer a dynamic reputation
engine for DNS. Both systems use features based on passive
DNS resolution to predict the likelihood that a domain name is
malicious. CAMP is complimentary to Notos and EXPOSURE
but is specifically targeted to predict whether an unknown
binary download is malicious. Furthermore, the use of DNS
limits a reputation system to making decisions on the granu-
larity of domain names whereas CAMP operates on all of the
features that are associated with a downloaded binary.
Finally, closely related to our work,
is Microsoft’s
SmartScreen described briefly in a blog post [10]. SmartScreen
utilizes a reputation-based approach to protect users from
socially-engineered malware. It does so by computing reputa-
tion for the download URL, the file identifier and the publisher
if available as a digital signature. Unlike CAMP, it requires
that all download URLs are sent to a remote server. In contrast
to SmartScreen, CAMP computes its reputation based on many
other features available to the browser, such as referrer URLs,
IP addresses, etc. In addition, this paper provides in-depth
technical details of CAMP’s reputation system and evaluates
its performance in an operational setting.
III. SYSTEM ARCHITECTURE
In the following, we provide an overview of CAMP’s design
and architecture. Our goal is to create a system that scales
to hundreds of millions of users and protects them from
downloading malware while at the same time limiting the
impact on their privacy. Our focus is specifically on binaries
downloaded by users rather than drive-by downloads in which
    	
    	
 
 
 
 
	  
	  
     
     
  	
  	
  
  
 		 	
 		 	
  	 
  	 
 	
 	
    	
    	
   
   
Fig. 1. The diagram presents a high-level overview of the detection system
showing the communication between the client and server as well as the
server-side processing infrastructure.
malware is installed in the background without knowledge
by the user. We believe that focusing on user downloads
is justified for several reasons: the security of browsers has
increased significantly over the last few years [17], [29], [32]
and proposed exploit detection systems such as Blade [21]
or Zozzle [13] offer efficient mechanisms to prevent current
exploits from succeeding. As a result, automated exploitation
of browsers has become more difficult and adversaries are also
incorporating social engineering techniques in which users
download malware themselves.
To efficiently determine if an unknown binary download
is malicious, CAMP is split into a client component and a
server component. The client component is integrated into a
web browser. As a first step, the client checks the download
against both a local blacklist and whitelist. If no match is
found, the client extracts features from the binary download,
sends these features to the server, and displays a warning to
users if the server response instructs it to. The server processes
the features sent from the browser and computes a reputation
decision informed by the client request and a reputation metric
constructed from previous client requests. Figure 1 shows an
overview of the complete detection system. We will discuss
it in detail in the following sections.
A. Binary Analysis
Many machine learning algorithms require labeled ground
truth for training purposes. Our situation is similar in that we
need to label our reputation data according to the nature of
the binary, e.g. whether it is malicious or benign. We support
multiple dimensions for the labels so other classifications such
as spyware are possible, too. Similarly, the type of binary is its
own dimension, e.g. Windows PEbins are treated differently
from Mac OS X DMG files. However, for any binary type,
a corresponding classification system needs to be available to
provide accurate labels.
In this paper, we make use of a binary analysis system
that we developed independently to classify binaries based on
static features as well as dynamic execution traces. The main
goal of this system is to limit the number of false positives
and we consciously sacrifice detection in favor of fewer false
positives.
The labels produced by the binary analysis system form the
ground truth that governs the training of the reputation system.
The labels also allow us to compute detection performance of
the reputation system post facto. We measure this as part of
our evaluation in Section V.
It is important to note that our reputation system does not
require a particular binary classification solution and other
detection approaches [9], [33] or labeling solely based on the
output of AV engines should also be possible. Of course, the
overall accuracy of the system would be dependent on the
accuracy of the underlying labeling mechanism.
Binary analysis systems are not perfect and are susceptible
to evasion [15], [31]. Since CAMP is a reputation system
that requires a reasonable estimate of ground truth, any errors
in labeling might propagate to CAMP’s decisions. However,
since CAMP is independent of the classification mechanism,
any advances to dynamic analysis or Anti-Virus products will
seamlessly improve CAMP’s performance. Nonetheless, we
show in Section V-B that our binary analysis system exhibits
reasonable accuracy.
B. Client
When a user initiates a binary download in her web browser,
the web browser applies several checks before asking the
server for a reputation decision. If any of these checks fail,
the client makes a local decision on whether the download is
malicious or not.
1) The web browser determines if the binary is already
known to be malicious based on its URL, for example,
via a list of known malware sites. In our case, we use
Google’s Safe Browsing API to make that determination.
If the binary is known to be malicious, the browser can
display a warning directly without requiring a reputation
decision.
2) The browser determines if the binary download could
potentially be harmful to the computer, e.g. it might
correspond to an executable which may carry malicious
code, or a DMG which is how Mac OS X software is
installed.
3) The binary download is checked against a dynamically
updated whitelist of trusted domains and trusted binary
signers. The list of trusted domains or trusted signing
certificates consists of reputable software publishers
known for not distributing malware. If the binary down-
load matches the whitelist, the browser assumes that
the download is benign and no server-side reputation
decision is required.
If all the above checks do not result in a local decision, the
browser extracts features from the downloaded binary. Since
the reputation decision is made on the server, the client can
provide as many features as are available to it. The following
is a list of features usually available to web browsers:
• The final download URL and IP address corresponding
to the server hosting the download.
• Any referrer URL and corresponding IP address encoun-
tered when initiating the download, e.g. the results of
multiple HTTP redirects.
• The size of the download as well as content hashes, e.g.
SHA-256.
• The signature attached to the download which includes
the signer as well any certificate chain leading to it. The
client also informs the server if it could successfully
verify the signature and if it trusted the signature, e.g.
it was rooted in a trusted certificate authority.
The client then sends these features to the server and awaits
its response. The server may reply with several different
verdicts based on the reputation data available to it. It can
inform the web browser that the download is predicted to be
benign in which case the web browser completes the download
without displaying a warning, or it can tell the web browser
that the download is either deemed malicious (Figure 2) or
unknown (Figure 3). In both of the latter cases,
the web
browser warns the user about the download and offers to delete
the downloaded file. The unknown verdict indicates that the
server did not have sufficient reputation information to label
the download as either benign or malicious. Our evaluation
shows that in the majority of all cases unknown by itself
is good a predictor for malicious downloads. The different
reputation verdicts are explained in more detail in Section IV.
User privacy is an important goal for CAMP. Verifying the
content type of the file and that it neither matches blacklists
nor whitelists drastically limits the number of downloads for
which a remote server is contacted. As shown in Section III-D,
the web browser contacts the CAMP service for only about