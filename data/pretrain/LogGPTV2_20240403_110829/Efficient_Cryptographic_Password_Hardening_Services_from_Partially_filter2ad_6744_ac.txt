the message m.
In the validation phase, we perform two checks against a
previously generated enrollment record T . First, we check
whether the twin key was correctly generated from the tweak.
If this is not the case, we abort, because it means the server
is not following the protocol. The second check concerns the
validity of the message compared to the one committed to
in the record at hand.
Because of the randomization factor y, which is unique to
every run of the enrollment and validation protocols, two
enrollment records for the same message appear indistinguish-
able, unless one knows the enrolled message. This prevents
an adversary from verifying message guesses by repeatedly
modifying a given record and comparing against the server
response for the guessed message.
4.2 Our Scheme
Construction 1. Let G = (cid:104)g(cid:105) be a cyclic group of prime or-
der q, and let g be a generator of G. Let F : {0, 1}n ×
{0, 1}n → Zq be a pseudorandom function and let H :
{0, 1}∗ → Zq be a hash function.
Setup Phase. The setup algorithms Setup(1n) chooses
random values x, z ←$ Zq and a random key k ←${0, 1}n. It
returns (csk , pk , sk ) := (z, gx, (x, k)).
Enrollment Phase. The full enrollment protocol is de-
scribed in Figure 1 and consists of the following steps: The
client chooses a random blinding factor r ←$ Zq and sends as
its ﬁrst message the blinded message v = mr·csk and tweak
t . Once the server receives (t, v) it computes the twin key
s ← Fk(t) corresponding to t and the preliminary record
T (cid:48) = ((c1, c2, c3), π) consisting of (gy, gsy, gsxy · v), for some
randomly chosen value y ∈ Zq, and a proof of correctness
π. It sends the preliminary record T (cid:48) to the client. The
client parses the server’s response and checks the proof of
correctness. If the proof veriﬁes, the client outputs the record
T := (c1, c2, c2/m(r−1)·csk ).
Validation Phase. The full validation protocol is described
in Figure 2 and consists of the following steps: The client
parses the stored enrollment record T = (T1, T2, T3) and
chooses a random blinding factor r ←$ Zq. It then sends the
blinded message v = mr·csk together with tweak t and the
value T1 to the server. Once the server receives (T1, t, v), it
computes the twin key s ← Fk(t) corresponding to t, the
tuple c = (c1, c2, c3) := (gy, gsy, gsxy · v) and two proofs: The
ﬁrst proof shows that the server has used the same twin
key s ← Fk(t) which was also used during enrollment. The
second proof indicates whether the message m is equal to the
committed message in T . The server sends the preliminary
record c and the proofs to the client. The client parses the
server’s response and checks the proofs of correctness. If both
proofs verify, the client outputs accept, otherwise reject.
Both proofs resemble a Fiat-Shamir transformed [20] ver-
sion of a protocol for proving the equivalence of discrete
logarithms ﬁrst given by Chaum and Pedersen [15]. In order
to see why the scheme is correct, consider the case that we
perform a validation run for the pair (t, m) and a record T
originally generated for the pair (t, m(cid:48)).
The ﬁrst check guarantees that
A1 =T z1
1
and that
· T h(cid:48)
1
2
i.e., T (cid:96)1
1 = T (cid:96)1−h1s
1
· T h(cid:48)
1
1s
B1 =cz1
1 · ch(cid:48)
2
1
i.e.,
gy(cid:96)1 = gy((cid:96)1−h1s) · gyh(cid:48)
1s.
Thus, both equations are fulﬁlled if h1 = h(cid:48)
the server used the correct twin key s.
1 implying that
Client C(csk , pk , T, t, m)
parse T = (T1, T2, T3)
r ←$ Zq
v := mr·csk
h
parse c := (c1, c2, c3)
parse π1 := (z1, A1, B1), π2 := (z2, A2, B2)
1 ← H(T1, c1, A1, B1, T2, c2)
(cid:48)
2 ← H(T1, c1, A2, B2, T3/mcsk , c3/v)
(cid:48)
if A1 = T z1
h
1
1 T h(cid:48)
and A2 = T z2
1
2 and B1 = cz1
1 (T3/mcsk )h(cid:48)
1 ch(cid:48)
2 and B2 = cz2
2
1 (c3/v)h(cid:48)
2
Server S(sk )
−−−−−−−−−−−−−−−−−−−−−−−−→y ←$ Zq; s ← Fk(t)
(T1, t, v)
parse sk := (x, k)
c = (c1, c2, c3) := (gy, gsy, gsxy · v)
T (cid:48) := (c, π1, π2)
←−−−−−−−−−−−−−−−−−−−−−−−−// Compute the proof of correctness
(cid:96)1 ←$ Zq; A1 := T (cid:96)1
(cid:96)2 ←$ Zq; A2 := T (cid:96)2
h1 ← H(T1, gy, A1, B1, T s
h2 ← H(T1, gy, A2, B2, T sx
z1 := (cid:96)1 − h1s; z2 := (cid:96)2 − h2sx
π1 := (z1, A1, B1); π2 ← (z2, A2, B2)
1 ; B1 := gy(cid:96)1
1 ; B2 := gy(cid:96)2
1 , gsy)
1 , gsxy)
then return accept
else return reject
Figure 2: The validation protocol.
The second check determines whether the submitted mes-
sage is the same as the enrolled message in T . In detail, it
works as follows:
i.e., T (cid:96)2
1 = T (cid:96)2−h2sx
1
· T h(cid:48)
1
2sx
·
(cid:18) m(cid:48)
(cid:19)h(cid:48)
2
mcsk
2
·
(cid:19)h(cid:48)
(cid:18) T3
1 ·(cid:16) c3
mcsk
mr·csk
(cid:17)h(cid:48)
2
A2 =T z2
1
and
B2 =cz2
i.e., gy(cid:96)2 = gy((cid:96)2−h2sx) · gh(cid:48)
2ysx
The ﬁrst equation is fulﬁlled if m(cid:48) = m · csk , which is the
case for a correct enrollment of m, and the second equation is
fulﬁlled if the validation record was created using the correct
public key.
Key Rotation. Key Rotation in our construction consists
of one round of interaction where the server draws a fresh
random secret key x(cid:48) ←$ Zq and provides the client with an
update token δ = x(cid:48)/x where x is the old secret key. The
client updates each record T = (T1, T2, T3) of the database
by raising the third element of each record to the power of δ,
such that the new record is T (cid:48) = (T1, T2, T δ
3 ). Further, the
client updates the stored public key and the client secret:
pk(cid:48) = pk δ and csk(cid:48) = csk · δ.
We defer the proof of correctness of this key rotation
mechanism to the full version of this paper.
4.3 Proof of Security
In this section, we show that our construction is partially-
hiding, binding, and oblivious. We prove the stronger state-
ment that Construction 1 is secure with any perfectly sound
non-interactive zero knowledge (NIZK) proof system for
equality of discrete logarithms.
In our construction, this
NIZK is then instantiated with the Fiat-Shamir transformed
protocol of Chaum and Pedersen. More formally, we prove
the following theorem:
Theorem 1. If the DDH problem is hard in G, the non-
interactive proof system is zero-knowledge and perfectly
sound, and H is modeled as a random oracle, then Con-
struction 1 is partially hiding, binding, and oblivious.
independently and uniformly at random for every interaction
with the server.
For binding, consider that a binding adversary has to ﬁnd a
“forgery” pair (t∗, m∗), which validates correctly for a record
enrolled from a diﬀerent pair. Such a forgery amounts to
ﬁnding a collision for the PRF on t and t∗, which cannot be
eﬃcient if F is pseudorandom.
Obliviousness is guaranteed under the DDH-assumption.
We use a game-hopping approach with a series of intermediate
experiments, where we ﬁrst replace every occurrence of the
PRF with a truly random function with negligible loss in
security since F is pseudorandom. Then, we can reduce the
indistinguishability of records for two diﬀering messages to
the DDH assumption. In the following, we give formal proofs
for each property.
Partial Hiding.
Consider the view of an adversary A in one of the partial
hiding experiments. In the ﬁrst phase of the game, the view
of A consists solely of its own outputs. In the second phase,
A engages in executions of the enrollment and validation
protocols. When A engages in an execution of the enrollment
protocol, it receives a tuple (t, v), where v = mr
b for some
uniformly random r ∈ Zq and t is some ﬁxed part of A’s
challenge output. When A engages in an execution of the
validation protocol, it receives a tuple (T1, t, v), where v = mr
for some uniformly random r ∈ Zq and t and T1 some ﬁxed
b
parts of A’s challenge output.
By construction t and T1 in all these executions are identi-
cal and independent of the message and thus independent
of b. Further, since the r in all protocol runs are chosen
independently and uniformly at random, all v seen by the
attacker are uniformly distributed elements of G and thus
independent of b.
We thus can conclude that the two games are perfectly
indistinguishable to an (even unbounded) attacker. I.e.,
(cid:12)(cid:12)Pr(cid:2)Hiding0
Π,A(1n) = 1(cid:3) − Pr(cid:2)Hiding1
Π,A(1n) = 1(cid:3)(cid:12)(cid:12) = 0,
and Construction 1 is thus perfectly partially-hiding.
Informally, the scheme is hiding, because the message m
is information-theoretically blinded with an exponent drawn
Binding.
Let A be an adversary, such that Pr(cid:2)BindingΠ,A(1n) = 1(cid:3) =
. Let ((t0, m0), (t1, m1), T ) denote the output of A. Further
let y0 and y1 denote the random values chosen by server
in the validation protocol executions for t0, m0 and t1, m1
respectively.
We can split the probability of A succeeding into two cases,
namely depending on whether t0 = t1 or not. I.e., we have
Pr(cid:2)BindingΠ,A(1n) = 1(cid:3)
≤ Pr[t0 (cid:54)= t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 (cid:54)= t1
(cid:3)
+ Pr[t0 = t1 ] · Pr(cid:2)BindingΠ,A(1n) = 1(cid:12)(cid:12) t0 = t1
(cid:3)
(1)
Consider the case where t0 (cid:54)= t1. Let a be an element of
Zq such that T a
1 = T2, i.e., let a be the discrete logarithm of
T2 relative to base T1. Observe, that the ﬁrst zero-knowledge
proof in the validation protocol proves that gyba = gybFk(tb)
for b ∈ {0, 1}. Therefore, by the perfect soundness of the
NIZK, we have that Fk(t0) = a = Fk(t1). I.e., the adversary
has found a collision in the pseudorandom function. From
this we can construct a distinguisher D against the security
of the pseudorandom function as follows:
The distinguisher D gets as input the security parame-
ter and access to an oracle that is either the PRF with a
uniformly chosen key k or a uniformly random function. It
then samples a random exponent x ←$ Zq and invokes A on
input pk = gx. A may now invoke arbitrary enrollment and