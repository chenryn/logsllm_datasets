126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
        print("txsss", txs)
        for tx in txs:
            rec = send(tx)
            print("midL", rec)
        return rec
    if len(func_list) == 3:
        txs = [None] * 3
        for func in func_list:
            (sig, feature), = func.items()
            # arg == 0
            if feature[1] == 0:
                txs[2] = build_tx(sig, con_address, offset_nonce=2)
            # is addr
            elif feature[2]:
                txs[1] = build_tx(sig, con_address, datas=[
                                  my_account[2:]], offset_nonce=1)
            else:
                txs[0] = build_tx(sig, con_address, datas=['0640c9'])
        for tx in txs:
            rec = send(tx)
            print("midL", rec)
        return rec
    if len(func_list) == 2:
        tag = "afebab"
        (sig1, feature1), = func_list[0].items()
        (sig2, feature2), = func_list[1].items()
        if feature1[1] + feature2[1] == 1:
            txs = [None] * 2
            if feature1[1]:
                txs[0] = build_tx(sig1, con_address, datas=
[my_account[2:]])
                txs[1] = build_tx(sig2, con_address, datas=[], 
offset_nonce=1)
            else:
                txs[0] = build_tx(sig2, con_address, datas=
[my_account[2:]])
                txs[1] = build_tx(sig1, con_address, datas=[], 
offset_nonce=1)
            for tx in txs:
                rec = send(tx)
                print("modl222112", rec)
            return rec
        elif tag in runtime:
            txs = [None] * 2
            pika = runtime.split(tag)[0][-11:-3]
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
            key = runtime.split(tag)[0][-1]+"afebab" + runtime.split(tag)
[1][0]
            in_key = int(pika, 16) ^ int(key, 16)
            if feature1[2]:
                txs[0] = build_tx(sig1, con_address, datas=
[my_account[2:]])
                txs[1] = build_tx(sig2, con_address, datas=[
                                  hex(in_key)[2:].rjust(8, '0')], 
offset_nonce=1)
            else:
                txs[0] = build_tx(sig2, con_address, datas=
[my_account[2:]])
                txs[1] = build_tx(sig1, con_address, datas=[
                                  hex(in_key)[2:].rjust(8, '0')], 
offset_nonce=1)
            for tx in txs:
                rec = send(tx)
                print("modl43423", rec)
            return rec
        elif "640c8" in runtime and "640ca" in runtime:
            txs = [None]*2
            if feature1[2]:
                txs[1] = build_tx(sig1, con_address, datas=[
                                  my_account[2:]], offset_nonce=1)
                txs[0] = build_tx(sig2, con_address, datas=['0640c9'])
            else:
                txs[1] = build_tx(sig2, con_address, datas=[
                                  my_account[2:]], offset_nonce=1)
                txs[0] = build_tx(sig1, con_address, datas=['0640c9'])
            for tx in txs:
                rec = send(tx)
                print("modl6654645", rec)
            return rec
        else:  # check
            if "151515" in runtime:
                txs = [None]*2
                if feature1[2]:
                    txs[1] = build_tx(sig1, con_address, datas=[
                                      my_account[2:]], offset_nonce=1)
                    txs[0] = build_tx(sig2, con_address, datas=['01'])
                else:
                    txs[1] = build_tx(sig2, con_address, datas=[
                                      my_account[2:]], offset_nonce=1)
                    txs[0] = build_tx(sig1, con_address, datas=['01'])
            else:
                txs = [None] * 3
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
                if feature1[2]:
                    txs[2] = build_tx(sig1, con_address, datas=[
                                      my_account[2:]], offset_nonce=2)
                    txs[1] = build_tx(sig2, con_address, datas=[
                                      '02'], offset_nonce=1)
                    txs[0] = build_tx(sig2, con_address, datas=['01'])
                else:
                    txs[2] = build_tx(sig2, con_address, datas=[
                                      my_account[2:]], offset_nonce=2)
                    txs[1] = build_tx(sig1, con_address, datas=[
                                      '02'], offset_nonce=1)
                    txs[0] = build_tx(sig1, con_address, datas=['01'])
            for tx in txs:
                rec = send(tx)
                print("modl", rec)
            return rec
    return None
if __name__ == "__main__":
    # pow
    io = remote('8.140.174.230', 10001)
    base = string.ascii_letters + string.digits
    io.recvuntil("sha256(")
    s = io.recvuntil("+?)")[:-3]
    ret = getsha256(s)
    io.sendline(ret)
    io.recvuntil("Your EOA account:")
    account = io.recvline().strip()
    account = web3.Web3.toChecksumAddress(str(account, encoding="utf-8"))
    tx = {
        'from': my_account,
        'to': account,
        # 2047899999999790000
        'value': 4000000000000000000,
        'gas': 21000,
        'nonce': w3.eth.getTransactionCount(my_account),
        'gasPrice': 10,
        'chainId': 8888
    }
    r_tx = mytx_account.sign_transaction(tx)
    print(w3.eth.getBalance(my_account))
    f_tx = r_tx.rawTransaction
    ret1 = w3.eth.send_raw_transaction(f_tx)
    receipt = w3.eth.wait_for_transaction_receipt(ret1)
    io.recv()
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
guess_game
Submission Time: 12:26 PM
Randomly generate 100 pairs of keys and ivs to observe which bits are unrelated (or be related with a very 
small probability) to keys and ivs, and tabulate their values and the corresponding inputs: 
    io.sendline('y')
    # ---- with challenge
    for _ in range(25):
        io.recvuntil('bytecode:')
        bytecode = io.recvline().strip()
        bytecode = str(bytecode, encoding="utf-8").strip()
        print("bytecode:", bytecode)
        io.recv(timeout=1000)  # [+] Wait for deploying......\n
        ori = io.recv()
        tx_hash = ori.strip()[-66:]
        tx_hash = str(tx_hash, encoding="utf-8")[2:]
        # print("tx_hash:", tx_hash)
        con_address = w3.eth.getTransactionReceipt(
            bytes.fromhex(tx_hash))['contractAddress']
        print("Contract_address:", con_address)
        rec = gen_functions(bytecode, con_address)
        print(io.recv())
        print("my rec", rec)
        io.sendline("0x"+rec.hex())
io.interactive()
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
c = [[0]*160 for i in range(160)]
for i in range(16000):
    guess = i%160
    k = guess // 2
    m = guess % 10
    if m == 0:
        m = 10
    key = bin(random.getrandbits(80))[2:].zfill(80)
    key = list(map(int, key))
    iv = bin(random.getrandbits(64))[2:].zfill(64)
    iv = list(map(int, iv))
    a = generator(key, iv, False)
    b = generator(key, iv, True, k, m)
    for j in range(160):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Solver:
        c[j][guess] += a.PRGA()^b.PRGA()
ans = []
for i in range(160):
    tmp = ''
    for j in range(160):
        if(c[j][i]==100):
            tmp += '1'
        elif(c[j][i]==0):
            tmp += '0'
        else:
            tmp += '?'
    ans += [tmp]
print(ans)
15
16
17
18
19
20
21
22
23
24
25
26
27
28
from pwn import *
HOST =
POST =
r = remote(HOST,POST)
context.log_level = 'debug'
rec = r.recvline().strip().decode()
suffix = rec.split("+ ")[1].split(")")[0]
digest = rec.split("== ")[1]
log.info(f"suffix: {suffix}\ndigest: {digest}")
for comb in product(ascii_letters+digits, repeat=4):
    prefix = ''.join(comb)
    if sha256((prefix+suffix).encode()).hexdigest() == digest:
        print(prefix)
        break
else:
    log.info("PoW failed")
r.sendlineafter(b"give me xxxx:", prefix.encode())
table = ['11111100100000000??????????
1111111????????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????', 
'00000000000000000?0000001000000000??0?000?10??00010?????0???????????
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
0??????????????????????????????????????????????????????????????????????????
?????????????????', '010000000000000000??000001100000000?????00??1???
0011???????????????????????????????????????????????????????????????????????
?????????????????????????????????????', '001000000000000000???
00001110000000??????0???????
011????????????????????????????????????????????????????????????????????????
????????????????????????????????????', '0100100000000000000????
0001111000000???????????????
11?????????????????????????????????????????????????????????????????????????
??????????????????????????????????', '0110010000000000000?????
001111100000????????????????
1??????????????????????????????????????????????????????????????????????????
?????????????????????????????????', '10111001000000000000??????
01111110000????????????????????????????????????????????????????????????????
???????????????????????????????????????????????????????????', 
'10111100100000000?00???????1111111??
0??????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????', '00011111001000000???
0????????
11111??????????????????????????????????????????????????????????????????????
????????????????????????????????????????????????????????', 
'00111111100100000?????????????
1111???????????????????????????????????????????????????????????????????????
???????????????????????????????????????????????????????', 
'10010111111001000???????????????
11?????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????', 
'0101100000000000000000?0000001000000000??0?000?10??00010?????
0??????????????????????????????????????????????????????????????????????????
????????????????????????', '00111010000000000000000??000001100000000?????
00??1???
0011???????????????????????????????????????????????????????????????????????