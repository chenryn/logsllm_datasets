single-ASN public keys, and to authenticate the epoch public keys.
To construct the hash tree, we place the values v0, . . . , vw−1 at
the leaf nodes of a binary tree, as Figure 1 shows. (For simplicity
we assume a balanced binary tree, so w is a power of two.) We ﬁrst
blind all the vi values with a one-way hash function H to prevent
disclosing neighboring values in the authentication information (as
(cid:3)
= H[vi]. We construct a hash tree over
we describe below), so v
(cid:3)
(cid:3)
i
w−1 as follows. Each internal node of the bi-
, . . . , v
the values v
0
nary tree is derived from its two child nodes. The derivation of
a parent node mp from its left and right child nodes ml and mr is
5A block cipher is a pseudo-random permutation (PRP), and using a PRP to implement
a PRF is secure as long as we use it fewer than 2(cid:3)/2 times for each key [3], where (cid:3)
is the block size in bits. With 128-bit AES, we can use this PRP up to 264 times; we
satisfy this requirement since we only use the PRP only up to 28 times with any key.
m07
m03
m47
m01
m23
m45
m67
(cid:3)
0
v
v0
(cid:3)
1
v
v1
(cid:3)
2
v
v2
(cid:3)
3
v
v3
(cid:3)
4
v
v4
(cid:3)
5
v
v5
(cid:3)
6
v
v6
(cid:3)
7
v
v7
Figure 1: Tree authenticated values
|| v
(cid:3)
1
mp = H[ml || mr], where || denotes concatenation. 6 We com-
pute the levels of the tree recursively from the leaf nodes to the
root node. Figure 1 shows this construction over the eight values
(cid:3)
v0, v1, . . . , v7, e.g., m01 = H[v
0
], and m03 = H[m01 || m23].
The root value of the tree enables authentication of all leaf
nodes. To authenticate a value vi the sender discloses i, vi, and
all the sibling nodes of the nodes on the path from vi to the root
node. The receiver can then use these nodes to recompute the val-
ues on the path up to the root, and if the recomputed root value
matches the known root value, value vi is guaranteed to be authen-
tic. For example, to authenticate value v2 in Figure 1, the values
(cid:3)
, m01, m47 are required for recomputing the root. A receiver with
v
3
the authentic root value m07 can verify the equality:
(cid:1)
(cid:2)
(cid:2)
m07 = H
H
m01 || H
(cid:3)
H[ v2 ] || v
3
(cid:4)
(cid:3)(cid:3) || m47
If the veriﬁcation is successful, the receiver knows that v2 is au-
(cid:3)
(cid:3)
, . . . , v
7 in Figure 1 are added to the tree to
thentic. The extra v
0
avoid disclosing (in this example) the value v3 for the authentica-
tion of v2.
(cid:3)
, v
1
4.2.3 One-Time Signatures
One-time signatures are based on efﬁcient one-way functions7 and
are used to replace more expensive asymmetric signatures in cases
where performance is critical. The drawback of one-time signa-
tures is that if we sign multiple messages, the security degrades.
The ﬁrst instantiation of a one-time signature was by Lamport [32],
subsequently researchers further developed these ideas [16, 39, 47,
50]. Most of these one-time signatures work by constructing a
graph using one-way functions, where the veriﬁcation value serves
as the public key, and some randomly chosen values serve as the
private key. For example, we could use the hash tree method we
present above as a one-time signature to sign t bits: we select 2t
random values vi (for example using a PRF F as outlined above:
vi = FX (i)), and build a hash tree over those values. (In this sec-
tion, we will use t = 80 as an example, since it corresponds to the
280 security level we explained earlier). The root of the hash tree
would become the public key, and all the 2t values at the leaves
would be the private key (or simply the random key X could also
serve as the private key, as all other values are derived from it).
6The initial hash also prevents a shifting attack that is introduced through the concate-
nation of the arguments. Consider the case where we have two leaf nodes, v1 and v2. If
we compute H[v1||v2], an attacker could “shift” least signiﬁcant bits from v1 to become
the most signiﬁcant bits of v2, thus breaking the authentication property. Because the
initial hashing step produces hashes of equal size, this attack is not possible.
7A trapdoor is deﬁned as a small amount of information that allows us to invert a one-
way function. One-time signatures use one-way functions without trapdoors, because
the only way to invert these functions is to construct a table with all inputs and outputs,
which is not a small amount of information. Traditional signatures, such as RSA, are
also one-way functions, but these functions have a trapdoor. For example in RSA,
encryption with the public key is a one-way function, and the private key is the trapdoor
information that allows us to invert the function.
n
m
This would allow us to sign message M as follows. In the con-
text of SPV, the message M is an ASPATH sufﬁx, e.g., (cid:8)A, B,C, D(cid:9).
We compute a cryptographic hash of the message and keep the t
least signiﬁcant bits: [H[M]]t = h. We then disclose the value vh
of the private key, along with the tree values necessary to recal-
culate the root value for veriﬁcation (as we describe above in the
hash tree section). Two approaches exist to attack this signature:
the attacker inverts the one-way function to derive the private key,
or the attacker ﬁnds another message with the same hash value.
Assuming a secure one-way function with an output length of 80
bits, it is computationally intractable for an attacker to invert the
one-way function. Hence, only the second attack is an option,
(cid:3)
such that the t-bit hash value
which is to ﬁnd a second message M
(cid:3)]]t. The probability
is equal to that of message M: [H[M]]t = [H[M
that another message M
has the same t-bit hash value as message
M is 1/2t , so an attacker would need to try 2t−1 messages on av-
erage until it could ﬁnd another message with the same hash value
h. This simple example illustrates a one-time signature, but it has
a high computation and communication overhead compared to the
provided security.
(cid:3)
(cid:5)
(cid:6)(cid:11) bits—this encoding was proposed by Reyzin and Reyzin
To improve on this scheme, we can disclose multiple leaf nodes
to encode a signature. Assuming we have n = 2t leaf nodes, and
we disclose m leaf nodes for each signature, we could encode
(cid:10)log2
in their HORS signature [47]. In this encoding, we map the output
of the hash function to one of the
combinations.
(cid:5)
(cid:6)
n
m
We explain the HORS signature in more detail based on an ex-
ample. Consider that we want to sign message M. In this simpliﬁed
example, we use the parameters n = 8 and m = 2. To create the
private key, the signer selects a random key X , and derives the 8
values of the private key with the PRF F as follows: vi = FX (i)
for 1 ≤ i ≤ 8. Next, the signer computes a hash tree over these
values, as Figure 1 shows. The root value of the hash tree (m07 in
this case), serves as the public key. We assume that the veriﬁer only
knows the public key. To sign message M, the signer computes the
hash hM = H[M] and derives the values to disclose from that by
selecting two three-bit sequences from the hash. In this example,
H[M] = 011110 . . . in binary notation, thus the signature will con-
sist of the private key values v3 and v6. The signature will consist of
(cid:3)
values v3, v6, v
, m01, m45. To verify the signature, the veriﬁer
2
recomputes the hash of the message as well as the root of the hash
tree, and ensures that the recomputed root of the hash tree matches
the public key m07: based on H[M] the veriﬁer knows that the dis-
closed values of the private key are v3 and v6, and it veriﬁes that
m07 equals H[H[m01||H[v
(cid:3)
7]]]. If an
2
attacker would want to forge this signature, it would have to invert
the one-way function (which we assume is computationally impos-
(cid:5)
sible), or ﬁnd another message that would also disclose values v3
and v6, which is easy in this case: 1/
||H[v3]]]||H[m45||H[H[v6]||v
(cid:3)
= 1/28.
(cid:3)
, v
7
We propose to use the HORS encoding in conjunction with a
hash tree to achieve fast veriﬁcation and a small size of the public
key (the public key is simply the root node of the hash tree). This
approach has a much better security/cost tradeoff than the simple
scheme described above. Unfortunately, this approach also reduces
security as more signatures are made: since each signature dis-
closes m values from the private key, an attacker with r signatures
has approximately mr values. The probability that the attacker has
any given value is at most mr
t , so the probability that an attacker can
sign any given value is at most
more sophisticated security analysis.
(cid:6)m. In Section 5.1 we present a
mr
t
(cid:5)
(cid:6)
8
2
4.3 Basic ASPATH Protector
In this section, we present a new cryptographic mechanism, which
we call an ASPATH protector. As we show later, this protector has
some security weaknesses which we ﬁx with a more sophisticated
r0
A
ri,e
(cid:3)
b
i, j,e
bi, j,e
B
C
c1,0
c2,0
c3,0
c4,0
Figure 2: This ﬁgure shows a diagram of one ASPATH pro-
tector capable of securing an ASPATH of length four. The
shaded box labeled “A” highlights the epoch public key, box
“B” highlights the four single-ASN public keys, and box “C”
highlights the four single-ASN private keys that form a one-
way hash chain. The black circles represent the ASPATH pro-
tector values that an AS sends with an UPDATE for one of its
own preﬁxes to a peer; the ﬁrst single-ASN signature (spanned
by single-ASN private key c1,0) signs its own ASN, the second
single-ASN signature (spanned by c2,0) signs the BGP peer’s
ASN, and the router reveals c3,0 to allow further UPDATE prop-
agation.
structure in Section 4.4. The main purpose of the ASPATH pro-
tector is to secure ASPATHs from the truncation and modiﬁcation
attack.
Properties. Our efﬁcient ASPATH protector achieves the follow-
ing two properties. First, an attacker cannot claim a shorter route
to a preﬁx than the length of the shortest route it has heard since
the AS originating that preﬁx last advanced its epoch. Second, an
attacker cannot modify the ASNs which have already been inserted
into the ASPATH.
ASPATH Protector Construction. We now describe a crypto-
graphic mechanism that enforces these properties. The intuition be-
hind our scheme is to use a one-time signature scheme to sign each
sufﬁx of the ASPATH (that is, we sign the entire ASPATH at each
AS traversed by an UPDATE) to make that sufﬁx of the ASPATH
immutable to later ASes that forward the UPDATE. We leverage
one-time signatures to achieve ASPATH integrity, hash trees to en-
able authentication and veriﬁcation of the one-time signatures, and
one-way hash chains to reduce the size of the ASPATH protec-
tor. We describe these cryptographic mechanisms in more detail
in Section 4.2.
To generate the ASPATH protectors, the AS selects a random
key X , and generates the seed values that span the individual
ASPATH protectors for epoch e using a PRF F : c1,e = FX (e).8
The advantage of this construction is that the AS only needs to
store the secret key X , and can reconstruct any of the seed values.
Alternatively, the AS could select all seed values at random, but
would then have to store them all.
Each HORS one-time signature structure can be derived from
one value, which we call the single-ASN private key. To secure
an ASPATH with (cid:3) ASNs, we need (cid:3) one-time signatures. Thus,
we randomly select (cid:3) single-ASN private keys for each epoch e:
c1,e, . . . , c(cid:3),e. Each value ci,e is used to derive the n nodes of
8Section 4.2 explains pseudo-random functions in more detail, and justiﬁes why all
our values are 80 bits long.
the HORS one-time signature, from which m values will be dis-
closed in a signature.9 For each one-time signature, we derive
n values bi,1,e, . . . , bi,n,e using a PRF F and the private key ci,e
as the key to the PRF: bi, j,e = Fci,e
( j). To enable authentication
of these values, we ﬁrst blind these keys with a one-way function
(cid:3)
(i, j,e) = H[b(i, j,e)] ,10 and then we construct a hash tree over them.