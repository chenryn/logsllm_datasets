    * 读取`out_dir/.synced/sd_ent->d_name`文件即`id_fd`里的前4个字节到`min_accept`里，设置`next_min_accept`为`min_accept`，这个值代表之前从这个文件夹里读取到的最后一个queue的id。
    * 设置stage_name为`sprintf(stage_tmp, "sync %u", ++sync_cnt);`，设置stage_cur为0，stage_max为0
    * 循环读取`sync_dir/sd_ent->d_name/queue`文件夹里的目录和文件 
      * 同样跳过`.`开头的文件和标识小于min_accept的文件，因为这些文件应该已经被sync过了。
      * 如果标识`syncing_case`大于等于next_min_accept，就设置next_min_accept为`syncing_case + 1`
      * 开始同步这个case 
        * 如果case大小为0或者大于MAX_FILE(默认是1M),就不进行sync。
        * 否则mmap这个文件到内存mem里，然后`write_to_testcase(mem, st.st_size)`,并run_target,然后通过save_if_interesting来决定是否要导入这个文件到自己的queue里，如果发现了新的path，就导入。 
          * 设置syncing_party的值为`sd_ent->d_name`
          * 如果save_if_interesting返回1，queued_imported计数器就加1
      * stage_cur计数器加一，如果stage_cur是stats_update_freq的倍数，就刷新一次展示界面。
    * 向id_fd写入当前的`next_min_accept`值
  * 总结来说，这个函数就是先读取有哪些fuzzer文件夹，然后读取其他fuzzer文件夹下的queue文件夹里的case，并依次执行，如果发现了新path，就保存到自己的queue文件夹里，而且将最后一个sync的case id写入到`.synced/其他fuzzer文件夹名`文件里，以避免重复运行。
#### trim_case(char _*argv, struct queue_entry_ q, u8 *in_buf)
  * 如果这个case的大小len小于5字节，就直接返回
  * 设置stage_name的值为tmp，在bytes_trim_in的值里加上len，bytes_trim_in代表被trim过的字节数
  * 计算len_p2，其值是大于等于q->len的第一个2的幂次。（eg.如果len是5704,那么len_p2就是8192）
  * 取`len_p2的1/16`为remove_len，这是起始步长。
  * 进入while循环，终止条件是remove_len小于终止步长`len_p2的1/1024`, **每轮循环步长会除2.**
    * 设置remove_pos的值为remove_len
    * 读入`"trim %s/%s", DI(remove_len), DI(remove_len)`到tmp中, 即stage_name = “trim 512/512”
    * 设置stage_cur为0，stage_max为`q->len / remove_len`
    * 进入while循环，`remove_pos len`,即每次前进remove_len个步长，直到整个文件都被遍历完为止。 
      * 由in_buf中remove_pos处开始，向后跳过remove_len个字节，写入到`.cur_input`里，然后运行一次`fault = run_target`，trim_execs计数器加一
      * 由所得trace_bits计算出一个cksum，和`q->exec_cksum`比较 
        * 如果相等 
          * 从`q->len`中减去remove_len个字节，并由此重新计算出一个`len_p2`，这里注意一下`while (remove_len >= MAX(len_p2 / TRIM_END_STEPS, TRIM_MIN_BYTES))`
          * 将`in_buf+remove_pos+remove_len`到最后的字节，前移到`in_buf+remove_pos`处，等于删除了remove_pos向后的remove_len个字节。
          * 如果needs_write为0，则设置其为1，并保存当前trace_bits到clean_trace中。
        * 如果不相等 
          * remove_pos加上remove_len，即前移remove_len个字节。 **注意，如果相等，就无需前移**
      * 注意trim过程可能比较慢，所以每执行stats_update_freq次，就刷新一次显示界面`show_stats`
      * stage_cur加一
  * 如果needs_write为1 
    * 删除原来的q->fname，创建一个新的q->fname，将in_buf里的内容写入，然后用clean_trace恢复trace_bits的值。
    * 进行一次update_bitmap_score
  * 返回fault
####  u32 calculate_score(struct queue_entry *q)
根据queue entry的执行速度、覆盖到的path数和路径深度来评估出一个得分，这个得分perf_score在后面havoc的时候使用。  
前面的没什么好说的，这里的`q->depth`解释一下，它在每次add_to_queue的时候，会设置为`cur_depth+1`，而cur_depth是一个全局变量，一开始的初始值为0。
  * 处理输入时 
    * 在read_testcases的时候会调用add_to_queue，此时所有的input case的queue depth都会被设置为1。
  * fuzz_one时 
    * 然后在后面fuzz_one的时候，会先设置cur_depth为当前queue的depth，然后这个queue经过mutate之后调用save_if_interesting,如果是interesting case，就会被add_to_queue，此时就建立起了queue之间的关联关系，所以由当前queue变异加入的新queue，深度都在当前queue的基础上再增加。
#### u8 common_fuzz_stuff(char _*argv, u8_ out_buf, u32 len)
简单的说就是写入文件并执行，然后处理结果，如果出现错误，就返回1.
  * 如果定义了`post_handler`,就通过`out_buf = post_handler(out_buf, &len)`处理一下out_buf，如果out_buf或者len有一个为0，则直接返回0 
    * **这里其实很有价值，尤其是如果需要对变异完的queue，做一层wrapper再写入的时候。**
  * write_to_testcase(out_buf, len)
  * fault = run_target(argv, exec_tmout)
  * 如果fault是FAULT_TMOUT 
    * 如果`subseq_tmouts++ > TMOUT_LIMIT`（默认250），就将cur_skipped_paths加一，直接返回1
    * subseq_tmout是连续超时数
  * 否则设置subseq_tmouts为0
  * 如果skip_requested为1 
    * 设置skip_requested为0，然后将cur_skipped_paths加一，直接返回1
  * queued_discovered += save_if_interesting(argv, out_buf, len, fault)，即如果发现了新的路径才会加一。
  * 如果stage_cur除以stats_update_freq余数是0，或者其加一等于stage_max，就更新展示界面`show_stats`
  * 返回0
####  void write_to_testcase(void *mem, u32 len)
将从`mem`中读取`len`个字节，写入到`.cur_input`中
#### u8 save_if_interesting(char _*argv, void_ mem, u32 len, u8 fault)
检查这个case的执行结果是否是interesting的，决定是否保存或跳过。如果保存了这个case，则返回1，否则返回0  
以下分析不包括crash_mode，暂时略过以简洁
  * 设置keeping等于0
  * `hnb = has_new_bits(virgin_bits)`，如果没有新的path发现或者path命中次数相同，就直接返回0
  * 否则，将case保存到`fn = alloc_printf("%s/queue/id:%06u,%s", out_dir, queued_paths, describe_op(hnb))`文件里
  * `add_to_queue(fn, len, 0);`将其添加到队列里
  * 如果hnb的值是2，代表发现了新path，设置刚刚加入到队列里的queue的has_new_cov字段为1，即`queue_top->has_new_cov = 1`，然后queued_with_cov计数器加一
  * 保存hash到其exec_cksum
  * 评估这个queue，`calibrate_case(argv, queue_top, mem, queue_cycle - 1, 0)`
  * 设置keeping值为1.
  * 根据fault结果进入不同的分支 
    * FAULT_TMOUT 
      * 设置total_tmouts计数器加一
      * 如果unique_hangs的个数超过能保存的最大数量`KEEP_UNIQUE_HANG`，就直接返回keeping的值
      * 如果不是dumb mode，就`simplify_trace((u64 *) trace_bits)`进行规整。
      * 如果没有发现新的超时路径，就直接返回keeping
      * 否则，代表发现了新的超时路径，unique_tmouts计数器加一
      * 如果hang_tmout大于exec_tmout，则以hang_tmout为timeout，重新执行一次runt_target 
        * 如果结果为`FAULT_CRASH`，就跳转到keep_as_crash
        * 如果结果不是`FAULT_TMOUT`，就返回keeping，否则就使`unique_hangs`计数器加一，然后更新last_hang_time的值，并保存到`alloc_printf("%s/hangs/id:%06llu,%s", out_dir, unique_hangs, describe_op(0))`文件。
    * FAULT_CRASH 
      * total_crashes计数器加一
      * 如果unique_crashes大于能保存的最大数量`KEEP_UNIQUE_CRASH`即5000，就直接返回keeping的值
      * 同理，如果不是dumb mode，就`simplify_trace((u64 *) trace_bits)`进行规整
      * 如果没有发现新的crash路径，就直接返回keeping
      * 否则，代表发现了新的crash路径，unique_crashes计数器加一，并将结果保存到`alloc_printf("%s/crashes/id:%06llu,sig:%02u,%s", out_dir,unique_crashes, kill_signal, describe_op(0))`文件。
      * 更新last_crash_time和last_crash_execs
    * FAULT_ERROR 
      * 抛出异常
    * 对于其他情况，直接返回keeping
####  simplify_trace(u64 *mem)
  * 按8个字节为一组循环读入，直到完全读取完mem 
    * 如果mem不为空 
      * i从0-7，`mem8[i] = simplify_lookup[mem8[i]]`，代表规整该路径的命中次数到指令值，这个路径如果没有命中，就设置为1，如果命中了，就设置为128，即二进制的`1000 0000`
    * 否则设置mem为`0x0101010101010101ULL`，即代表这8个字节代表的path都没有命中，每个字节的值被置为1。
    static const u8 simplify_lookup[256] = {
            [0]         = 1,
            [1 ... 255] = 128
    };
## 通信和覆盖率信息的记录
###  关键变量和常量
    .bss:000000000060208F unk_60208F      db    ? ;               ; DATA XREF: deregister_tm_clones↑o
    .bss:0000000000602090 __afl_area_ptr  dq ?                    ; DATA XREF: __afl_maybe_log+4↑r
    .bss:0000000000602090                                         ; __afl_maybe_log+48↑w ...
    .bss:0000000000602098 __afl_prev_loc  dq ?                    ; DATA XREF: __afl_maybe_log:__afl_store↑r
    .bss:0000000000602098                                         ; __afl_maybe_log+17↑w ...
    .bss:00000000006020A0 ; __pid_t _afl_fork_pid
    .bss:00000000006020A0 __afl_fork_pid  dd ?                    ; DATA XREF: __afl_maybe_log+1C6↑w
    .bss:00000000006020A0                                         ; __afl_maybe_log+1D3↑o ...
    .bss:00000000006020A4 ; int _afl_temp
    .bss:00000000006020A4 __afl_temp      dd ?                    ; DATA XREF: __afl_maybe_log+174↑o
    .bss:00000000006020A4                                         ; __afl_maybe_log+198↑o ...
    .bss:00000000006020A8 __afl_setup_failure db ?                ; DATA XREF: __afl_maybe_log:__afl_setup↑r
    .bss:00000000006020A8                                         ; __afl_maybe_log:__afl_setup_abort↑w
    ...
    .text:0000000000400DEF ; char AFL_SHM_ENV[]
    .text:0000000000400DEF _AFL_SHM_ENV    db '__AFL_SHM_ID',0     ; DATA XREF: __afl_maybe_log+11F↑o
    .text:0000000000400DEF                                         ; Alternative name is '.AFL_VARS'
  * __afl_area_ptr 
    * 存储共享内存的首地址
  * __afl_prev_loc 
    * 存储上一个位置，即上一次R(MAP_SIZE)生成的随机数的值
  * __afl_fork_pid 
    * 存储fork出来的子进程的pid
  * __afl_temp 
    * 临时buffer
  * _AFL_SHM_ENV 
    * 申请的共享内存的shm_id被设置为环境变量`__AFL_SHM_ID`的值，所以通过这个环境变量来获取shm_id，然后进一步得到共享内存。
###  trampoline_fmt_64
    .text:00000000004009C0                 lea     rsp, [rsp-98h]
    .text:00000000004009C8                 mov     [rsp+98h+var_98], rdx
    .text:00000000004009CC                 mov     [rsp+98h+var_90], rcx
    .text:00000000004009D1                 mov     [rsp+98h+var_88], rax
    .text:00000000004009D6                 mov     rcx, 2359h---->R(MAP_SIZE)
    .text:00000000004009DD                 call    __afl_maybe_log
    .text:00000000004009E2                 mov     rax, [rsp+98h+var_88]
    .text:00000000004009E7                 mov     rcx, [rsp+98h+var_90]
    .text:00000000004009EC                 mov     rdx, [rsp+98h+var_98]
    .text:00000000004009F0                 lea     rsp, [rsp+98h]
插入的trampoline_fmt_64只有在`mov rcx,
xxx`这里不同，其xxx的取值就是随机数R(MAP_SIZE),以此来标识与区分每个分支点，然后传入`__afl_maybe_log`作为第二个参数调用这个函数。