Property | Description | Default  
---|---|---  
`druid.supervisor.idleConfig.enabled` | (Cluster wide) If `true`, supervisor
can become idle if there is no data on input stream/topic for some time. |
false  
`druid.supervisor.idleConfig.inactiveAfterMillis` | (Cluster wide) Supervisor
is marked as idle if all existing data has been read from input topic and no
new data has been published for `inactiveAfterMillis` milliseconds. |
`600_000`  
`inactiveAfterMillis` | (Individual Supervisor) Supervisor is marked as idle
if all existing data has been read from input topic and no new data has been
published for `inactiveAfterMillis` milliseconds. | no (default == `600_000`)  
#13311
## # Improved supervisor termination
Fixed issues with delayed supervisor termination during certain transient
states.
#13072
## # Backoff for HttpPostEmitter
The `HttpPostEmitter` option now has a backoff. This means that there should
be less noise in the logs and lower CPU usage if you use this option for
logging.
#12102
## # DumpSegment tool for nested columns
The DumpSegment tool can now be used on nested columns with the `--dump
nested` option.
For more information, see dump-segment tool.
#13356
## # Segment loading and balancing
### # Batched segment allocation
Segment allocation on the Overlord can take some time to finish, which can
cause ingestion lag while a task waits for segments to be allocated.
Performing segment allocation in batches can help improve performance.
There are two new properties that affect how Druid performs segment
allocation:
Property | Description | Default  
---|---|---  
`druid.indexer.tasklock.batchSegmentAllocation` | If set to true, Druid
performs segment allocate actions in batches to improve throughput and reduce
the average `task/action/run/time`. See batching `segmentAllocate` actions for
details. | false  
`druid.indexer.tasklock.batchAllocationWaitTime` | Number of milliseconds
after Druid adds the first segment allocate action to a batch, until it
executes the batch. Allows the batch to add more requests and improve the
average segment allocation run time. This configuration takes effect only if
`batchSegmentAllocation` is enabled. | 500  
In addition to these properties, there are new metrics to track batch segment
allocation. For more information, see New metrics for segment allocation.
For more information, see the following:
  * Overlord operations
  * Task actions and Batching `segmentAllocate` actions
#13369  
#13503
### # Improved cachingCost balancer strategy
The `cachingCost` balancer strategy now behaves more similarly to cost
strategy. When computing the cost of moving a segment to a server, the
following calculations are performed:
  * Subtract the self cost of a segment if it is being served by the target server
  * Subtract the cost of segments that are marked to be dropped
#13321
### # Faster segment assignment
You can now use a round-robin segment strategy to speed up initial segment
assignments. Set `useRoundRobinSegmentAssigment` to `true` in the Coordinator
dynamic config to enable this feature.
#13367
### # Default to batch sampling for balancing segments
Batch sampling is now the default method for sampling segments during
balancing as it performs significantly better than the alternative when there
is a large number of used segments in the cluster.
As part of this change, the following have been deprecated and will be removed
in future releases:
  * coordinator dynamic config `useBatchedSegmentSampler`
  * coordinator dynamic config `percentOfSegmentsToConsiderPerMove`
  * old non-batch method of sampling segments
### # Remove unused property
The unused coordinator property `druid.coordinator.loadqueuepeon.repeatDelay`
has been removed. Use only `druid.coordinator.loadqueuepeon.http.repeatDelay`
to configure repeat delay for the HTTP-based segment loading queue.
#13391
### # Avoid segment over-replication
Improved the process of checking server inventory to prevent over-replication
of segments during segment balancing.
#13114
## # Provided service specific log4j overrides in containerized deployments
Provided an option to override log4j configs setup at the service level
directories so that it works with Druid-operator based deployments.
#13020
## # Various Docker improvements
  * Updated Docker to run with JRE 11 by default.
  * Updated Docker to use `gcr.io/distroless/java11-debian11` image as base by default.
  * Enabled Docker buildkit cache to speed up building.
  * Downloaded `bash-static` to the Docker image so that scripts that require bash can be executed.
  * Bumped builder image from `3.8.4-jdk-11-slim` to `3.8.6-jdk-11-slim`.
  * Switched busybox from `amd64/busybox:1.30.0-glibc` to `busybox:1.35.0-glibc`.
  * Added support to build arm64-based image.
#13059
## # Enabled cleaner JSON for various input sources and formats
Added `JsonInclude` to various properties, to avoid population of default
values in serialized JSON.
#13064
## # Improved direct memory check on startup
Improved direct memory check on startup by providing better support for Java
9+ in `RuntimeInfo`, and clearer log messages where validation fails.
#13207
## # Improved the run time of the MarkAsUnusedOvershadowedSegments duty
Improved the run time of the `MarkAsUnusedOvershadowedSegments` duty by
iterating over all overshadowed segments and marking segments as unused in
batches.
#13287
# # Web console
## # Delete an interval
You can now pick an interval to delete from a dropdown in the kill task
dialog.
#13431
## # Removed the old query view
The old query view is removed. Use the new query view with tabs.  
For more information, see Web console.
#13169
## # Filter column values in query results
The web console now allows you to add to existing filters for a selected
column.
#13169
## # Support for Kafka lookups in the web-console
Added support for Kafka-based lookups rendering and input in the web console.
#13098
## # Query task status information
The web console now exposes a textual indication about running and pending
tasks when a query is stuck due to lack of task slots.
#13291
# # Extensions
## # Extension optimization
Optimized the `compareTo` function in `CompressedBigDecimal`.
#13086
## # CompressedBigDecimal cleanup and extension
Removed unnecessary generic type from CompressedBigDecimal, added support for
number input types, added support for reading aggregator input types directly
(uningested data), and fixed scaling bug in buffer aggregator.
#13048
## # Support for Kubernetes discovery
Added `POD_NAME` and `POD_NAMESPACE` env variables to all Kubernetes
Deployments and StatefulSets.  
Helm deployment is now compatible with `druid-kubernetes-extension`.
#13262
# # Docs
## # Jupyter Notebook tutorials
We released our first Jupyter Notebook-based tutorial to learn the basics of
the Druid API. Download the notebook and follow along with the tutorial to
learn how to get basic cluster information, ingest data, and query data.  
For more information, see Jupyter Notebook tutorials.
#13342  
#13345
# # Dependency updates
## # Updated Kafka version
Updated the Apache Kafka core dependency to version 3.3.1.
#13176
## # Docker improvements
Updated dependencies for the Druid image for Docker, including JRE 11. Docker
BuildKit cache is enabled to speed up building.
#13059
# # Upgrading to 25.0.0
Consider the following changes and updates when upgrading from Druid 24.0.x to
25.0.0. If you're updating from an earlier version, see the release notes of
the relevant intermediate versions.
## # Default HTTP-based segment discovery and task management
The default segment discovery method now uses HTTP instead of ZooKeeper.
This update changes the defaults for the following properties:
Property | New default | Previous default  
---|---|---  
`druid.serverview.type` for segment management | http | batch  
`druid.coordinator.loadqueuepeon.type` for segment management | http | curator  
`druid.indexer.runner.type` for the Overlord | httpRemote | local  
To use ZooKeeper instead of HTTP, change the values for the properties back to
the previous defaults. ZooKeeper-based implementations for these properties
are deprecated and will be removed in a subsequent release.
#13092
## # Finalizing HLL and quantiles sketch aggregates
The aggregation functions for HLL and quantiles sketches returned sketches or
numbers when they are finalized depending on where they were in the native
query plan.
Druid no longer finalizes aggregators in the following two cases:
  * aggregators appear in the outer level of a query
  * aggregators are used as input to an expression or finalizing-field-access post-aggregator
This change aligns the behavior of HLL and quantiles sketches with theta
sketches.
To restore old behaviour, you can set `sqlFinalizeOuterSketches=true` in the
query context.
#13247
## # Kill tasks mark segments as unused only if specified
When you issue a kill task, Druid marks the underlying segments as unused only
if explicitly specified. For more information, see the API reference
#13104
## # Incompatible changes
### # Upgrade curator to 5.3.0
Apache Curator upgraded to the latest version, 5.3.0. This version drops
support for ZooKeeper 3.4 but Druid has already officially dropped support in
0.22. In 5.3.0, Curator has removed support for Exhibitor so all related
configurations and tests have been removed.
#12939
### # Fixed Parquet list conversion
The behavior of the parquet reader for lists of structured objects has been
changed to be consistent with other parquet logical list conversions. The data
is now fetched directly, more closely matching its expected structure. See
parquet list conversion for more details.
#13294
# # Credits
Thanks to everyone who contributed to this release!
@317brian  
@599166320  
@a2l007  
@abhagraw  
@abhishekagarwal87  
@adarshsanjeev  
@adelcast  
@AlexanderSaydakov  
@amaechler  
@AmatyaAvadhanula  
@ApoorvGuptaAi  
@arvindanugula  
@asdf2014  
@churromorales  
@clintropolis  
@cloventt  
@cristian-popa  
@cryptoe  
@dampcake  
@dependabot[bot]  
@didip  
@ektravel  
@eshengit  
@findingrish  
@FrankChen021  
@gianm  
@hnakamor  
@hosswald  
@imply-cheddar  
@jasonk000  
@jon-wei  
@Junge-401  
@kfaraz  
@LakshSingla  
@mcbrewster  
@paul-rogers  
@petermarshallio  
@rash67  
@rohangarg  
@sachidananda007  
@santosh-d3vpl3x  
@senthilkv  
@somu-imply  
@techdocsmith  
@tejaswini-imply  
@vogievetsky  
@vtlim  
@wcc526  
@writer-jill  
@xvrl  
@zachjsh