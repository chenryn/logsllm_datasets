title:A Fault-Tolerant Java Virtual Machine
author:Jeff Napper and
Lorenzo Alvisi and
Harrick M. Vin
A Fault-Tolerant Java Virtual Machine
∗
Jeff Napper, Lorenzo Alvisi, Harrick Vin
Abstract
We modify the Sun JDK1.2 to provide transparent fault-
tolerance for many Java applications using a primary-
backup architecture. We identify the sources of non-
determinism in the JVM (including asynchronous excep-
tions, multi-threaded access to shared data, and the non-
determinism present at the native method interface) and
guarantee that primary and backup handle them identi-
cally. We analyze the overhead introduced in our system
by each of these sources of non-determinism and compare
the performance of different techniques for handling multi-
threading.
1.
Introduction
The Java programming language and its execution en-
vironment are designed for portability and safe code dis-
tribution.
Java provides many features—such as strong
typing, remote method invocations (RMI), monitors, and
sandboxing—that allow programmers to develop complex
distributed systems;
today, Java is used in a wide vari-
ety of distributed applications, including chat servers, web
servers, and scientiﬁc applications. Unfortunately, the Java
Runtime Environment (JRE) provides no direct support
for fault-tolerance. Hence, distributed applications writ-
ten in Java either ignore failures or achieve fault-tolerance
through approaches—such as transactional databases or
group technology—outside the scope of the JRE.
In this paper, we take a fundamentally different ap-
proach; we present the design and implementation of a
fault-tolerant Java Runtime Environment that tolerates fail-
stop failures. Our technique is based on the well-known
state machine approach [1, 2]. This approach involves (1)
deﬁning a deterministic state machine as the unit of repli-
cation, (2) implementing independently failing replicas of
the state machine, (3) ensuring that all replicas start from
identical states and perform the same sequence of state tran-
sitions, and (4) guaranteeing the replication is transparent:
each output-producing transition should result in a single
output to the environment, rather than a collection of out-
puts, one for each replica.
Our approach is inspired by, and extends,
the work
of Bressoud and Schneider on Hypervisor-based fault-
tolerance [3], which presents a strong case for achieving
transparent fault tolerance by 1) building a software layer
∗
Authors’
at Austin, Austin, TX 78712.
Department of Computer Sciences, The
address:
University of Texas
email:
jmn,lorenzo,vin@cs.utexas.edu. This work was supported in part by
a grant from Sandia National Laboratories and by the Texas Advanced
Research Program. Alvisi was also supported by the National Sci-
ence Foundation (CAREER award CCR-9734185), an Alfred P. Sloan
Fellowship, and the AFRL/Cornell Information Assurance Institute.
(the hypervisor) that implements a virtual state machine
over the underlying hardware and 2) implementing replica
coordination in the hypervisor. To demonstrate their ap-
proach, Bressoud and Schneider had to build an hypervisor
for (a subset of) the HP PA-RISC architecture. The obser-
vation that led us to begin this work is that Java’s virtual
machine is already speciﬁed and implemented—a fact we
leverage to simplify our task.
The state machine that we implement and replicate is de-
ﬁned by the Java Virtual Machine (JVM) Speciﬁcation [4].
The JVM is key to the portability of Java. Because the
JVM is deﬁned independently of the hardware platform that
implements it, Java programs can run unmodiﬁed on any
platform that implements a JVM. Replicating the JVM state
machine allows Java applications to be made fault-tolerant
transparently. Modifying JVMs implemented on different
platforms allows us to keep Java’s “Write Once, Run Any-
where” promise, even in the presence of failures.
State machines must be deterministic for replication to
work. Unfortunately, the JVM is not deterministic. We must
therefore systematically identify and eliminate the effects of
non-determinism within the JVM. In doing so, we face the
same issues (asynchronous exceptions, output to the envi-
ronment, etc.) identiﬁed in [3]. In addition, however, we
must address a new challenge: multi-threading.
The speciﬁcation of the JVM requires support for
multiple threads whose interleaving is, in general, non-
deterministic. Therefore,
the same program, when run
on two different JVMs with identical initial states, might
cause different JVMs to make different sequences of state
transitions, depending on the speciﬁc interleaving enforced
at each JVM. We implement and evaluate two techniques
for eliminating the non-determinism introduced by multi-
threading. The ﬁrst technique forces each replica to perform
the same sequence of monitor acquisitions; the second tech-
nique guarantees the same sequence of thread scheduling
decisions. In implementing these techniques, as well as the
others used to eliminate non-determinism in the JVM, we
modify mostly platform-independent code—we make plat-
form dependent changes only to optimize performance. Al-
though this paper reports our experience with the Sun JDK
1.2 community source release JVM running on the SPARC,
the techniques proposed are broadly applicable to other plat-
form and other JVM implementations.
Instantiating replica coordination for the JVM also gives
the traditional challenges of replica coordination a new, dis-
tinct ﬂavor. Consider the problem of producing output to
the environment. The objective is to guarantee that the out-
put caused by a set of replicas is indistinguishable from that
produced by a single state machine that never fails. Achiev-
ing this objective in general is impossible, although it can be
attained in special circumstances, e.g., when output actions
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:58:33 UTC from IEEE Xplore.  Restrictions apply. 
are idempotent or when the environment can be queried
to determine whether a speciﬁc output completed (testable
output actions). Replicating the JVM’s execution engine
adds a new twist to this problem. The state machine does
not produce output to the environment directly: instead, the
execution engine invokes external procedures, called native
methods. Therefore, it is impossible for our JVM state ma-
chine to recognize which output actions are idempotent or
testable. We provide a mechanism by which native methods
can be annotated so that the state machine can recognize the
properties of native methods and take appropriate action.
Our replication scheme is based on a primary-backup
architecture. We use a “cold” backup, which simply logs
the recovery information provided by the primary and starts
processing it only if the primary fails. Keeping the backup
updated would require only minor modiﬁcations to our im-
plementation. Using the original implementation of the
JVM from Sun Microsystems as our performance baseline,
we measure the overhead incurred by each technique in ex-
ecuting SPEC JVM98, a suite of representative Java appli-
cations. We ﬁnd that replicating the lock acquisitions re-
sults in 140% overhead on average, while replicating thread
scheduling incurs 60% overhead on average.
2. Background
Java programs are compiled into an architecture-
independent bytecode instruction set. The compiled code
is organized into classﬁles, containing class deﬁnitions and
methods according to the Java Virtual Machine Speciﬁ-
cation [4]. The JVM also deﬁnes standard libraries that
provide supporting classes for various tasks (e.g., data
containers, I/O, and windowing components). The JVM
and standard libraries comprise the Java Runtime Envi-
ronment (JRE). Java provides language-level support for
multi-threading, mutual exclusion (synchronized methods)
and conditional synchronization (wait and notify methods).
Threads share data objects using either methods on shared
objects or static class data members that are shared among
all instances of a class.
A state machine is a set of state variables and commands,
which respectively encode and modify the machine’s state.
A command reads a subset of the state variables, called the
read set, plus, possibly, other inputs obtained from the en-
vironment; it then modiﬁes a subset of state variables called
the write set, and possibly produces some output to the envi-
ronment. For a given command, the read and write sets are
ﬁxed. However, the values that these variables assume at
each invocation of the command can change. Henceforth,
we refer to these values as read-set values and write-set
values. The state machine approach requires each replica
be started from the same initial state and each replica to
execute an identical sequence of deterministic commands.
A deterministic command produces the same output and
write-set values when given the same read-set values. Under
these conditions, each correct replica undergoes the same
sequence of state transitions and produces the same outputs.
Table 1: Restrictions placed on applications and execution
environment.
R0: Fatal environment and JVM implementation exceptions are
not raised at all replicas.
R1: A thread must not invoke java.lang.Thread.stop.
R2: Native methods must produce only deterministic output to
the environment.
R3: Native methods must invoke other methods deterministi-
cally.
R4A: All access to shared data is protected by a monitor (i.e.,
Java’s synchronized keyword).
R4B: A thread has exclusive access to all shared variables while
scheduled.
R5: All native method output to the environment is either idem-
R6:
potent or testable.
If a native method produces volatile state in the environment,
then a side effect handler is provided to recover the state.
3. The JVM as a State Machine
Modeling the JVM as a state machine raises several chal-
lenges. First, not all commands executed by a JVM are de-
terministic. Second, replicas of a JVM do not in general
execute identical sequences of commands. Third, the read
set for a given command is not guaranteed to contain iden-
tical values at all replicas. State machines typically model a
single thread of execution [3, 2] while the JVM is intrinsi-
cally multi-threaded, complicating replica coordination sig-
niﬁcantly. Our approach to address these challenges instead
models the JVM as a set of cooperating state machines,
each corresponding an application thread. In particular, we
choose as our state machines a set of bytecode execution
engines (BEE) inside the JVM. Although BEEs do not ex-
plicitly exist as components of the JVM, we can conceptu-
ally associate a BEE with the set of functions that perform
bytecode execution and track the state of each thread. The
set of executing BEEs comprises the set of state machines
that together deﬁne a replica of our fault-tolerant JVM. We
assume that each BEE begins in an identical initial state.
The commands of the BEE state machine are bytecodes,
and the state variables are the values of memory locations
accessible to the BEE. Each BEE has exclusive access to its
own local state variables and may share with other BEEs
access to shared state variables. Our task is to ensure
that each BEE replica processes the same sequence of de-
terministic commands. Below we list the sources of non-
determinism that complicate this task and discuss how we
address each of them.
3.1. Asynchronous Commands
A command is asynchronous if it can appear anywhere in
the sequence of commands processed by a BEE. Replicas of
the same BEE might encounter a given asynchronous com-
mand at different points in their command sequences. In [3]
hardware interrupts are asynchronous commands. Although
there are interrupts in the JVM, they do not give rise to asyn-
chronous commands. For example, our JVM performs I/O
synchronously, and any I/O completion interrupt that corre-
sponds to a given bytecode is delivered before the execution
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:58:33 UTC from IEEE Xplore.  Restrictions apply. 
of that bytecode completes. Programmers can use Java’s
multi-threading to perform asynchronous I/O or events.
Asynchronous commands in the JVM correspond to
asynchronous Java exceptions that are not
interesting
sources of non-determinism. All but one of these exceptions
are raised by fatal errors in the run-time environment (e.g.,
resource exhaustion) or in the implementation of the JVM
(e.g., locks in inconsistent states). Such errors are intrinsic
to the run-time environment of the application and would
repeat themselves if all replica environments were identical.
Our implementation must not replicate these exceptions, or
all replicas will deterministically fail. Replication is effec-
tive only if we assume that either such errors never occur
or that the replicas’ run-time environments are sufﬁciently
different. We assume the latter in R0 in Table 1.
The stand-out non-fatal asynchronous exception is deliv-
ered to a thread when it is killed by another thread. How-
ever, beginning with the Java Development Kit version 1.2,
use of this exception is deprecated. Applications that use
this method might not work on future releases of the JVM
and should be rewritten using condition variables. We there-
fore make restriction R1 in Table 1 upon applications pro-
hibiting the use of the deprecated exception.
3.2. Non-deterministic Commands
A command is non-deterministic if its write-set values or
its output to the environment are not uniquely determined by
its read-set values. The only non-deterministic bytecode ex-
ecuted by the JVM invokes a native method. Java includes
the Java Native Interface (JNI) [5] to invoke methods that
execute platform-speciﬁc code written in languages other
than Java. Native methods have direct access to the under-
lying operating system and other libraries. By accessing the
operating system, for instance, native methods implement
windowing components, I/O, and read the hardware clock.
Native methods therefore may take input values from the
environment as well as from the read set. In the conven-
tional state machine approach, replicas run an agreement
protocol to make their read sets and the input from the en-
vironment identical. It is generally impossible to have the
BEEs agree on input values from the environment, since in-
put is performed outside the control of the JVM. Instead,
we make sure that differences in input values (e.g., different
local clock values) do not result in different write-set values
for the command. In our case, this protocol simply forces
the backup to adopt the write-set values produced by the
primary. However, since native methods execute beyond the
purview of the JVM, an agreement protocol cannot ensure
that replicas executing a native method will behave identi-
cally. We must restrict the behavior of native methods by R2
and R3 in Table 1 to achieve identical results at all replicas.
R2 restricts the native method behavior visible to the
environment; however, it is often possible to relax this re-
striction and still obtain the same functionality provided by
the offending method. For example, a method that reads
the current time and then prints it could be split into two
methods. The ﬁrst method reads the local time and writes it
to a local variable lc, which constitutes the method’s write
set. Our agreement protocol ensures that executing the ﬁrst
1 class Example {
2
3
4
5
6
// Accessible from all threads.
static Formatter shared_data = null;
String toString() {
// Guard not protected by monitor!
if(null == shared_data) {
shared_data = new Formatter();
synchronized_method();
// code continues...
Figure 1: A common data race in Java. If the Formatter con-
structor and synchronized method are idempotent the data
race has no semantic effect.
method at the primary and the backup results in the same
value for lc. The second method, which prints the value of
lc, now produces deterministic output to the environment.
R3 restricts the ways in which a native method invokes
other methods. While executing outside of the state ma-
chine, a native method can invoke Java methods, causing the
BEE to execute commands. If a native method calls a Java
method non-deterministically (e.g., if the native method de-
cides to acquire a lock depending on the value of the lo-
cal clock) then the sequence of commands processed by a
BEE could be different at each replica. We rule out this
possibility by forbidding native methods from making non-
deterministic calls to Java methods.
We do not consider R3 a signiﬁcant restriction, but rather
a better programming paradigm: to avoid debugging night-
mares, it is wise to restrict non-determinism in native meth-
ods to input methods. Just as R2, R3 might be upheld by
splitting an offending method into a non-deterministic input
method and a deterministic method. For instance, the clock
example would be handled by placing the clock read in a
different method and allowing our replicas to agree on the
local clock values before invoking the (now deterministic)
method that acquires a lock. Native methods must use the
JNI interface to invoke other Java methods; thus, a program
can be inspected for compliance with R3 by checking native