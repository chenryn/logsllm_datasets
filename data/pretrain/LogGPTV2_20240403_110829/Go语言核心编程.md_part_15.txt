json格式数据时，很有用。
14.10json 的序列化
 介绍
json序列化是指，将有 key-value 结构的数据类型(比如结构体、map、切片)序列化成 json 字符串
的操作。
 应用案例
这里我们介绍一下结构体、map 和切片的序列化，其它数据类型的序列化类似。
 代码演示
package main
import(
"fmt"
"encoding/json"
)
//定义一个结构体
type Monsterstruct {
Name string
Ageint
Birthday string
Salfloat64
Skillstring
}
functestStruct(){
//演示
monster:=Monster{
Name :"牛魔王",
Age: 500,
Birthday : "2011-11-11",
Sal: 8000.0,
Skill:"牛魔拳",
}
//将monster 序列化
data, err :=json.Marshal(&monster)
iferr!= nil {
fmt.Printf("序列号错误 err=%v\n", err)
}
//输出序列化后的结果
fmt.Printf("monster 序列化后=%v\n", string(data))
}
//将map进行序列化
functestMap() {
//定义一个 map
varamap[string]interface{}
//使用map,需要make
a=make(map[string]interface{})
a["name"] ="红孩儿"
a["age"] =30
a["address"]= "洪崖洞"
//将a这个map 进行序列化
//将monster 序列化
data, err :=json.Marshal(a)
iferr!= nil {
fmt.Printf("序列化错误 err=%v\n", err)
}
//输出序列化后的结果
fmt.Printf("a map 序列化后=%v\n", string(data))
}
//演示对切片进行序列化, 我们这个切片 []map[string]interface{}
functestSlice() {
varslice []map[string]interface{}
varm1 map[string]interface{}
//使用map前，需要先make
m1= make(map[string]interface{})
m1["name"]= "jack"
m1["age"]= "7"
m1["address"] ="北京"
slice=append(slice, m1)
varm2 map[string]interface{}
//使用map前，需要先make
m2= make(map[string]interface{})
m2["name"]= "tom"
m2["age"]= "20"
m2["address"] =[2]string{"墨西哥","夏威夷"}
slice=append(slice, m2)
//将切片进行序列化操作
data, err :=json.Marshal(slice)
iferr!= nil {
fmt.Printf("序列化错误 err=%v\n", err)
}
//输出序列化后的结果
fmt.Printf("slice 序列化后=%v\n", string(data))
}
//对基本数据类型序列化，对基本数据类型进行序列化意义不大
functestFloat64() {
varnum1 float64 = 2345.67
//对num1 进行序列化
data, err :=json.Marshal(num1)
iferr!= nil {
fmt.Printf("序列化错误 err=%v\n", err)
}
//输出序列化后的结果
fmt.Printf("num1 序列化后=%v\n", string(data))
}
funcmain() {
//演示将结构体,map, 切片进行序列号
testStruct()
testMap()
testSlice()//演示对切片的序列化
testFloat64()//演示对基本数据类型的序列化
}
 注意事项
对于结构体的序列化，如果我们希望序列化后的key的名字，又我们自己重新制定，那么可以给struct
指定一个tag标签.
序列化后：
{"monster_name":"牛魔王","monster_age":500,"Birthday":"2011-11-11","Sal":8000,"Skill":"牛魔拳"}
14.11json 的反序列化
 基本介绍
json反序列化是指，将json 字符串反序列化成对应的数据类型(比如结构体、map、切片)的操作
 应用案例
这里我们介绍一下将json字符串反序列化成结构体、map 和切片
代码演示：
package main
import(
"fmt"
"encoding/json"
)
//定义一个结构体
type Monsterstruct {
Name string
Ageint
Birthday string //....
Salfloat64
Skillstring
}
//演示将json字符串，反序列化成struct
funcunmarshalStruct() {
//说明str 在项目开发中，是通过网络传输获取到.. 或者是读取文件获取到
str:="{\"Name\":\"牛魔王\",\"Age\":500,\"Birthday\":\"2011-11-11\",\"Sal\":8000,\"Skill\":\"牛魔拳\"}"
//定义一个 Monster 实例
varmonsterMonster
err :=json.Unmarshal([]byte(str), &monster)
iferr!= nil {
fmt.Printf("unmarshal err=%v\n", err)
}
fmt.Printf("反序列化后 monster=%v monster.Name=%v \n", monster,monster.Name)
}
//演示将json字符串，反序列化成map
funcunmarshalMap(){
str:="{\"address\":\"洪崖洞\",\"age\":30,\"name\":\"红孩儿\"}"
//定义一个 map
varamap[string]interface{}
//反序列化
//注意：反序列化 map,不需要make,因为make 操作被封装到 Unmarshal 函数
err :=json.Unmarshal([]byte(str), &a)
iferr!= nil {
fmt.Printf("unmarshal err=%v\n", err)
}
fmt.Printf("反序列化后 a=%v\n", a)
}
//演示将json字符串，反序列化成切片
funcunmarshalSlice(){
str:="[{\"address\":\"北京\",\"age\":\"7\",\"name\":\"jack\"}," +
"{\"address\":[\"墨西哥\",\"夏威夷\"],\"age\":\"20\",\"name\":\"tom\"}]"
//定义一个 slice
varslice []map[string]interface{}
//反序列化，不需要 make,因为make操作被封装到 Unmarshal 函数
err :=json.Unmarshal([]byte(str), &slice)
iferr!= nil {
fmt.Printf("unmarshal err=%v\n", err)
}
fmt.Printf("反序列化后 slice=%v\n", slice)
}
funcmain() {
unmarshalStruct()
unmarshalMap()
unmarshalSlice()
}
 对上面代码的小结说明
1) 在反序列化一个json字符串时，要确保反序列化后的数据类型和原来序列化前的数据类型一致。
2) 如果json字符串是通过程序获取到的，则不需要再对 “ 转义处理。
第 章单元测试
15
15.1 先看一个需求
在我们工作中，我们会遇到这样的情况，就是去确认一个函数，或者一个模块的结果是否正确，
如：
15.2 传统的方法
15.2.1 传统的方式来进行测试
在 main 函数中，调用 addUpper 函数，看看实际输出的结果是否和预期的结果一致，如果一致，
则说明函数正确，否则函数有错误，然后修改错误
代码实现：
15.2.2 传统方法的缺点分析
1) 不方便, 我们需要在 main 函数中去调用，这样就需要去修改 main 函数，如果现在项目正在运
行，就可能去停止项目。
2) 不利于管理，因为当我们测试多个函数或者多个模块时，都需要写在main 函数，不利于我们管
理和清晰我们思路
3) 引出单元测试。->testing 测试框架 可以很好解决问题。
15.3 单元测试-基本介绍
Go语言中自带有一个轻量级的测试框架 testing 和自带的go test 命令来实现单元测试和性能测试，
testing 框架和其他语言中的测试框架类似，可以基于这个框架写针对相应函数的测试用例，也可以基
于该框架写相应的压力测试用例。通过单元测试，可以解决如下问题:
1) 确保每个函数是可运行，并且运行结果是正确的
2) 确保写出来的代码性能是好的，
3) 单元测试能及时的发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决，
而性能测试的重点在于发现程序设计上的一些问题，让程序能够在高并发的情况下还能保持稳定
15.4 单元测试-快速入门
使用Go的单元测试，对addUpper 和sub 函数进行测试。
特别说明: 测试时，可能需要暂时退出360。(因为360可能会认为生成的测试用例程序是木马)
演示如何进行单元测试：
单元测试的运行原理示意图：
15.4.1 单元测试快速入门总结
1) 测试用例文件名必须以 _test.go 结尾。 比如 cal_test.go ,cal 不是固定的。
2) 测试用例函数必须以Test开头，一般来说就是Test+被测试的函数名，比如TestAddUpper
3) TestAddUpper(t *tesing.T) 的形参类型必须是 *testing.T 【看一下手册】
4) 一个测试用例文件中，可以有多个测试用例函数，比如 TestAddUpper、TestSub
5) 运行测试用例指令
(1)cmd>go test [如果运行正确，无日志，错误时，会输出日志]
(2)cmd>go test -v [运行正确或是错误，都输出日志]
6) 当出现错误时，可以使用t.Fatalf 来格式化输出错误信息，并退出程序
7) t.Logf 方法可以输出相应的日志
8) 测试用例函数，并没有放在main函数中，也执行了，这就是测试用例的方便之处[原理图].
9) PASS表示测试用例运行成功，FAIL 表示测试用例运行失败
10) 测试单个文件，一定要带上被测试的原文件
go test -v cal_test.go cal.go
11) 测试单个方法
go test -v-test.run TestAddUpper
15.5 单元测试-综合案例
代码实现：
monster/monster.go
package monster
import(
"encoding/json"
"io/ioutil"
"fmt"
)
type Monsterstruct {
Name string
Ageint
Skillstring
}
//给Monster 绑定方法Store, 可以将一个Monster 变量(对象),序列化后保存到文件中
func(this *Monster)Store() bool {
//先序列化
data, err :=json.Marshal(this)
iferr!= nil {
fmt.Println("marshal err =", err)
return false
}
//保存到文件
filePath :="d:/monster.ser"
err =ioutil.WriteFile(filePath, data, 0666)
iferr!= nil {
fmt.Println("writefile err=", err)
return false
}
return true
}
//给Monster 绑定方法ReStore, 可以将一个序列化的Monster,从文件中读取，
//并反序列化为 Monster 对象,检查反序列化，名字正确
func(this *Monster)ReStore() bool{
//1. 先从文件中，读取序列化的字符串
filePath :="d:/monster.ser"
data, err :=ioutil.ReadFile(filePath)
iferr!= nil {
fmt.Println("ReadFileerr =", err)
return false
}
//2.使用读取到data []byte ,对反序列化
err =json.Unmarshal(data, this)
iferr!= nil {
fmt.Println("UnMarshal err =", err)
return false
}
return true
}
monster/monster_test.go
package monster
import(
"testing"
)
//测试用例,测试 Store 方法
funcTestStore(t *testing.T) {
//先创建一个 Monster 实例
monster:=&Monster{
Name :"红孩儿",
Age:10,
Skill:"吐火.",
}
res :=monster.Store()
if!res {
t.Fatalf("monster.Store() 错误，希望为=%v 实际为=%v", true, res)
}
t.Logf("monster.Store() 测试成功!")
}
funcTestReStore(t *testing.T) {
//测试数据是很多，测试很多次，才确定函数，模块..
//先创建一个 Monster 实例 ， 不需要指定字段的值
varmonster= &Monster{}
res :=monster.ReStore()
if!res {
t.Fatalf("monster.ReStore() 错误，希望为=%v 实际为=%v", true, res)
}
//进一步判断
ifmonster.Name!= "红孩儿" {
t.Fatalf("monster.ReStore() 错误，希望为=%v 实际为=%v", "红孩儿", monster.Name)
}
t.Logf("monster.ReStore() 测试成功!")
}
第 章 和
16 goroutine channel
16.1 goroutine-看一个需求
 需求：要求统计1-9000000000 的数字中，哪些是素数？
 分析思路：
1) 传统的方法，就是使用一个循环，循环的判断各个数是不是素数。[很慢]
2) 使用并发或者并行的方式，将统计素数的任务分配给多个 goroutine 去完成，这时就会使用到
goroutine.【速度提高4倍】
16.2 goroutine-基本介绍
16.2.1 进程和线程介绍
16.2.2 程序、进程和线程的关系示意图