○（5）有时候多个线程都可以调目出同一个Thread类的实例（Instance）的
○（4）有时候多个线程都可以调用出同－个实例的方法，。
×（3）Runnablc接口4声i明有 start 方法与run 方法。
O（l）Java的程序中，
X
暂时执行的只有调用出sleep方法的线程（即现在的线程）而口。
（2）Thread 类的 run 方法被调用出来后，就会启动新的线程。
对象实例的锁定（lock）即叫。
进入 wait sct.
若是 slcep 方法，线程不会进入到wait set。只有执行wait方法的时候才会
会停止执行的，只有要取得相同实例的锁定（lock）的线程而已，
线程米调用出，
虽然是 Thrcad 类的实例，与其他类的实例的方法并无二致，都可以山多个
正因为如比，所以必须要有线程的共享互斥（exchusive control）。
明在 Rummable 接[中的只有run 方法，
要肩动新的线程，必须使用 start 方法而非run方法.
从这两者调用出的别的方法中。只要执行wait方法的线程在执行时已取得
调用wait 方法的语甸可以写在 synchronized方法中、synchronized段中或是
行，
方法。
，最少会执行一个线程，
---
## Page 357
问题11-4的解答
方法并小是山新线程执行的原因，是因为由主线程执行的原因。
问题I1-3的解答
结果如图AI1-1所小
publ e class ClientThread cxterds Thread f
L-1 A1-2
public ciass Main f
确认用的程序如下，
也就是说，这个程序是单一线程（Single Thrcad）的程序。
到最后，所有的显示都是山主线程单独执行
new PrintThrcad("+").run();
最示完1000个*之后，才会执行以下的语句：
上面的语何会产生 PrintThread 类的实例，并执行该实例的run 方法。但是，run
new Print Threadi("*").run( ):
因为主线程调用出来的是nun 方法而非 start 方法，
puklic voit runt) {
private Bark bank;
/开-一个1600元的银行账户
this.bank
wtlile
FCW
rew Cl.en.lhreadtbank) .start();
Bant bark - new Bank("A Bad Bank", looc);
boolean ok = bank.wichdraw(iooc);
重复提出及存入 1000 元的 ClientThread 类(ClientThread.java)
ClientThreaα(bark).start(l;
bank.deposit.(l0c0);
(ok)
ert.Thread (Bank bank)
_ICTRL+_C即T结束）
存款余颗为负数！1neney=-10c0
俯认的时问有时候可能可以史短。
bark;
图AII-1执行范例
练习问题的解答
---
## Page 358
问题|1-6的解答
补充一点：通过实例来调用类方法会招致误解
语句意义相l同。
使用
问题11-5的解答
序的人造成误解，所以写程序时－-定要如下这样写喔！
在本问题中，通过实例来调用类方法在写法上并没有错，但是容易让阅读程
O(1) x.iA():
造成执行t.slcep(I000);时暂停，并非加上了t的线程，而是执行此语句的线程。
×（5） xiSyncA();
×（4） x.iSyncA();
O（3) x.iA0;
O(2) x.iAO:
新启动的线程若要予以暂停，就要在MyThread 类的run 方法中调用 sleep方法。
Thread.sleep(l000).
调用出米的并北t的实例方法，而是Thread的类方法。也就是说，跟执行以下
t.sleep(10c0);
相同实例的 synchronized的实例方法，
行其他 synchronized方法，也仍能执行。
只要是 synchronized 以外的方法，都可以从两个线程执行。即使有线程在执
只要是 synchronized 以外的方法，部可以从两个线程执行.
只要是 synchronized以外的方法，都可以从两个线程执行。
x.iSyncA():
x.iSyncAO:
x.iBO):
与
x.iAO);
与
Thread.sieep(l000);
t.sleepliocc);
最佳写法
X容易招致误解的写法
次只能由－个线程来执行。
---
## Page 359
X（12）x.cSyncA():
X（II） Something.cSyncA():
X（ 10)Somcthing.cSyncA():
Ot8) x.iSyncA();
() i7) x.iSyncA():
O6) x.iSyneA(:
(9) xiSyncA():
个线程同时执行：
Something.cSyncB(）、因此都会变成 Synchronizcd 的类方法，所以后法从数
x.cSyncAQ调用的方法是 Something.cSyncA()，而y.cSyncBO调川的方法是
Synchronized的类方法无法从数个线程同时执行。
Synchronized的类方法无法从数个线程同时执行。
因此可以从数个线程来同时执行。
synchronized 的实例方法与 synchronized的类方法由于锁定（lock）不同。
类方法本来就不是 synchronized力法，因此可以同时执行。
也能从两个以上的线程来同时执行，
由于实例不同则锁定（lock）也不同，因此即使是 synchronized的实例方法
也能从两个以上的线程来问时执行。
山于实例不同则锁定（lock）也不可，因此即使是 synchronized的实例方法
朴同实例的 synchronized的实例方法：-一次只能---个线程来执行。
y.cSyncB():
Someihing cSyncB();
Something cSyncA();
something.cSyncA();
something.cA():
x.iSyncB():
y.iSyneA():
x.iSyncB():
i7
厅
与
练习问题的解答
345
---
## Page 360
问题12-1的解答
 Introduction2
注意：本题的第（12）小题中，
（3）由于程序的错误而陷入无穷循环的线程即使肩动100个，也山于线程只是
（2）synchronized 方法中不是变成了无穷循环了吗？这样的程序是不是不好？
（1）在方法中一概都加上 synchronized，是不是就万无一失了呢？
如果只是有很多进行循环的线程，并不会导致生存性下降，但是，线程
即使有很多只是进行循坏的线程，也不会导致安全性下降。
不断执行而已，所以应该没有什么关系。
【安全性】
生存性下降，则性能性（例如 throughput）也会下降。
的其他线程就会锁住，
synchronized 方法中要是变成无穷循环，
的，就不会危及其安全忆。
synchronized 方法中即使变成无穷循环，只要循坏中所进行的处理是正确
【生存性】
用更花时问的缘故。
这是因为一般而言，synchronized方法的调用比非 synchronized方法的调
【性能性】
【安全性】
没有必要却还加上.synchronized的话，性能（例如 throughput）会下降。
导致死锁（dcadlock）的发牛。
synchronized,
提升，例如：
加上：synchronized方法并不会降低安全性，但是安全性也不见得就会有所
【生存性】
【性能性】
-概加l上synchronizcd的话，
【生存性】
【安全性】
加上这段话：
用类方法”这句话。可是为免导致读者的误解：实际在写程序时，请匆
这个程序仍然欠缺安全性。
：应该将保护的字段芥设置为 public，不管在方法加多少
，因而导致生存性下降。
为了向读者解说，因此加上了“通过实例来调
-般而占其生存性都会下降。例如，很容易
那么想执行其 synchronized 方法
---
## Page 361
问题1-1的解答
共亨耳斥的 overhead，这也是原因之一。
执行操作）。此外，这种情况下也很容易发生线程切换的ovcrhcad。
问题12-2的解答
第
延长临界区间（Critical Scction），就能够提高检出错误的可能性。
理山3：即使没有硬件的控制，2倍的线程同时执行、也会发生用以进行线程间
理什2：处理的丨作不·定能平均分配给所有的线程，
例如，我们任 pass 方法斗“指定到name”
1章
般而言，不会变成两倍。可能的原因可举出如下3点：
(6）i
（5）这个杏找程序有够烂。
（4）此服务器次只能连接一个客户端，请将此服务器调整得更好一点.
要在某·方的类予以关闭，就可以减少类的影响，也可以提高这个零
与类B两者刘线程具亨互斥的问题。所要启动的线程的相关程序代码只
问题在于类的“重复使用性”发间者可能担心程序代码必须考虑到类A
这样的话，类A与类B双方必须注意线程共享比斥的影响，这样是不是
件的重复使用性：
【重复使用性】
不太好？
这个问题跟程序的“响应能力”有X。
【性能性】
务器，所以问题在“服务器的“负荷量”
:Cancel );
从这个间题石来，意思好像是说能够同时连接数个客广端的才是好的服
【性能性】
性能性会下降：
线程要执行时会用到内存，之后义会消耗CPU 时间这项resourcc，因此
动，因此生存性会下降。
使用的内存若是超过系统所能提供的话，某些重要的线程可能会无法启
【性能性】
且启动就得要等到个部杏找完毕为止才能取消
“与“指定到address”之间加上 slcep
练习问题的解答
347
---
## Page 362
方法的调用。ListA1-1中，就将线程暂停了1000毫秒。
执行范例结果如图AI-1所示。此例中，countet到3时，就已经检测出错误了。
public class Gate i
A1
private void check() i
return "No."
public String tostrirgi)
try l
public void paas(string name, String address)
:areumon" = ssauppe 6utass aea1id
private 
if (name.charAt(o) != address.charAt(o)){
Eystem.out.println("**** BROKEN **+** " +toString());
check();
Thread.sleep(lc00);
this.address
this.name = name:
this.counter++; 
尽早检测出没有 Thread Safe 的 Gate类(Gate.java)
[以下省略】
*****BROKEN
Chris BEGIN
catch (InterruptedException e) l 
 int ccuner 
****BROKEN
★★★
Bobby BEGIN
Alice BEGIN
Testing Gate,
BROKEN
BROKEN
BROKEN
BROKFK
BROKEN
 ***** No.l0: Alice, Brazil
阁A1-1执行范例
**** No.7: Alice, Brz1l
★★★x
***** Nc.3: Chiris， Alaska
address;
"Nohody";
01
No.f: Chiris, Alaska
No.5: Bobby, Canada
Nc.4: Alice, Biazil
一
---
## Page 363
竖再将check 方法设成 synchronized 方法（不过改成 synchronized方法也不会降低
Gate类，调用 check 方法的都是己设成 synchronizcd 方法的 pass 方法。因此，不需
问题1-4的解答
安全性），
线程X有引用 name字段的值之后到引川address 字段的值之间，UserThread的线程
问题1-3的解答
访问到这个宁段的所有类部必须检杏才行。
认安全性，就必须连了类或同包内的类都起检查确认。
全地访问字段，就能确认亨段的安全性。至于此类以外的类则没有确认的必要。
问题1-2的解答
补充一点：Thread.yield
--般面，数个线程共有的字段都必须要设synchronized（或是volatile）来予以保护
催促进行线程的切换
由下 check 方法是 private，所以绝对不可能从（Gate 类之外直接调川出。看看
范例程序的范围中，虽然将 toStuing 设成 synchronized力法其实也无损其安全性，
个字时不致的值来构成字符串。
我们假设 UserThread 类的线程在通过 pass 方法时，其他线程X调用 toSting。
有 public 的字段则可以从任意的类来访问。因此，为了确认安全件，凡所有能
有 protccted 的字段也可以从该类的了类或相同包内的类来访问：因此，为了确
也司以在临界区间（Critical Section）中，调用出 Thread 类的 yicld方法，来
（）（2）要指定到 Point 类的x字段的语句只能写在Point 类的构造器
）（1）法建立Point 类的子类。
public String to String(） {
我们假设List 1-4的Gate类被其他程序使川
有privale的字段只能从类来进行访问，因此，只要确认该类中声明的方法能安
将宁段（feld）设为 private 是为了让:程序设计人员能更易于确认类的安全性
Point 类被声明为 final，因此无法建立子类.
returer. "Nc."
（contructor）以及方法中，
练习问题的解答
349
---
## Page 364
Execution 模式的话，就可能会变成如下的顺序。这时，线程B执行exit方法的效果
350
会消失。
行调查counter 的值，然后增加1，再指定到counter的多项处理。
设成 synchronized方法。
问题1-5的解答
补充一点：程序设计人员应该要注意的事项范围很广
线程A 的 enter 方法与线程 B的 exit方法要同时执行时，不使用 Single Threaded
不，并不安全，为了要保障安全，enter、exit、getCounter 的所有方法都必须要
比－-般的程序设计还要广泛了。
也不见得能判断得出来。
安全性则不能光读一部分的类就判断得知。生存性则是有时候即使读了整个类
由此可知，多线程程序设计的困难之处了。程序设计人员要注意的事项范围
这个语句只有一行，线程在执行时，并龙法不受其他线程影响。线程会重复执
counte?++;
我们来看看下面这个可以递增counter字段的仿的语句。
访问控制（access control）在只读取类的一部份时就能够进行判断，但是
我们先来思考题目中“只读取部分程序代码”的意思。
×（5）只要将Point类剩下的方法全部都读取，就可以判断是否发生死锁。
×（4）Point类即使由数个线程来使用也很安今：
因为使用Point 类的其他类的关系，有时会发生死锁之故，
即使读取 Point类剩下的方法，也并不·定能够判断是否发生了死锁。这是
publie synchzcnized void sety(int y) (
public synchrorized void setx(int x) {
move方法被声明为 synchronized，因此一次只能执行一个线程。
x字段被卢明为 private，
指定到个别字段的方法，因此无法断言这样很安全：
只使月 move 万法的话很安全、但是，Point 类还没读到的部分可能会有下列
的线程，
this.y - y;
this.x = x;
：因此无法以 Point 类以外的构造器或方法来指定。
---
## Page 365
到0。但是，有时候也会像执行范例（图A1-3,A1-4）一样没有变成0.
被调用的次数是相同的，所以所有的线程结束操作之后，gciCounterO)的们应该会回
个CrackerThrcad类的实例，各自会执行1000000次enter与j exit。enter与 exit因为
检查出并不安全（有的时候可能会无法检查出来）。以下的Lis1 A1-2中，建立了100
puolic class Kair.
以卜的程序是使川join方法米检查线程是否已执行完了，
测试SecurityGatc 类的安性的程序如List AI-2。执行这个程序很有可能就可以
Ust A1-2
puhiie starie void main(string!l args)
将lCl指定到ccumler
增加1
(enter)
线程
fcr (int i = C; >>
《《《>》》
tryf 
i-!.atart();
t[i: - new CraskerThreadigalel;
检查安全门(Security Gate)的程序（main.java)
lcatch (lncerruptedexception e) [
tl).join(); 