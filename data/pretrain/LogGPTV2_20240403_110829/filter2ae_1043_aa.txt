**作者：DEADF1SH_CAT @ 知道创宇404实验室  
时间：2020年8月24日**
## 前言
8月5日 @pwntester 联合 @Oleksandr Mirosh 发表了一个关于 Java 模板注入的 **BlackHat USA 2020
议题** [1]，议题介绍了现阶段各种 CMS
模板引擎中存在的缺陷，其中包含通用缺陷以及各个模板引擎特性造成的缺陷。由于不同模板引擎有不同语法特性，因此文章将分为系列文章进行阐述。
笔者前期主要是对 Liferay 的 FreeMarker 引擎进行了调试分析，故本文先以 FreeMarker 为例，梳理该模板引擎 SSTI
漏洞的前世今生，同时叙述自己的 Liferay FreeMarker SSTI 漏洞踩坑历程及对 Liferay
安全机制的分析。由于涉及内容比较多，请大家耐心阅读，若是已经本身对 FreeMarker 引擎有了解，可直接跳到文章后半部分阅读。
## FreeMarker基础知识
FreeMarker 是一款模板引擎，即一种基于模板和需要改变的数据， 并用来生成输出文本( HTML
网页，电子邮件，配置文件，源代码等)的通用工具，其模板语言为 FreeMarker Template Language (FTL）。
在这里简单介绍下 FreeMarker 的几个语法，其余语法指令可自行在 FreeMarker 官方手册[2]进行查询。
### FTL指令规则
在 FreeMarker 中，我们可以通过FTL标签来使用指令。FreeMarker 有3种 FTL 标签，这和 HTML 标签是完全类似的。
    开始标签: 
    结束标签: 
    空标签: 
实际上，使用标签时前面的符号 # 也可能变成 @，如果该指令是一个用户指令而不是系统内建指令时，应将 # 符号改成 @ 符号。这里主要介绍 assign
指令，主要是用于为该模板页面 **创建** 或 **替换** 一个顶层变量。
    or
    or
      capture this
    or
      capture this
    Tips:name为变量名，value为表达式，namespacehash是命名空间创建的哈希表，是表达式。
    for example:
    //创建了一个变量名为seq的序列
创建好的变量，可以通过 **插值** 进行调用。插值是用来给表达式插入具体值然后转换为文本(字符串)，FreeMarker 的插值主要有如下两种类型：
  * 通用插值：`${expr}`
  * 数字格式化插值： `#{expr}`
这里主要介绍通用插值，当插入的值为字符串时，将 **直接输出表达式结果** ，举个例子：
    eg:
    ${100 + 5} => 105
    ${seq[1]} => bar //上文创建的序列
插值仅仅可以在两种位置使用：在文本区(比如 `Hello ${name}!`) 和字符串表达式(比如 ``)中。
### 内建函数
FreeMarker
提供了大量的内建函数，用于拓展模板语言的功能，大大增强了模板语言的可操作性。具体用法为`variable_name?method_name`。然而其中也存在着一些危险的内建函数，这些函数也可以在官方文档中找到，此处不过多阐述。主要介绍两个内建函数，`api`和`new`，如果开发人员不加以限制，将造成极大危害。
  * `api`函数
如果 value 本身支撑`api`这个特性，`value?api`会提供访问 value 的 API（通常为 Java
API），比如`value?api.someJavaMethod()`。
      eg：
      //获取到classloader即可通过loadClass方法加载恶意类
但值得庆幸的是，`api`内建函数并不能随意使用，
**必须在配置项`api_builtin_enabled`为`true`时才有效，而该配置在`2.3.22`版本之后默认为`false`**。
  * `new`函数
这是用来创建一个具体实现了`TemplateModel`接口的变量的内建函数。在 `?` 的左边可以指定一个字符串， 其值为具体实现了
`TemplateModel` 接口的完整类名，然后函数将会调用该类的构造方法生成一个对象并返回。
      //freemarker.template.utility.Execute实现了TemplateMethodModel接口(继承自TemplateModel)
          ${ex("id")}//系统执行id命令并返回
      => uid=81(tomcat) gid=81(tomcat) groups=81(tomcat)
**拥有编辑模板权限的用户可以创建任意实现了`TemplateModel` 接口的Java对象，同时还可以触发没有实现 `TemplateModel`
接口的类的静态初始化块**，因此`new`函数存在很大的安全隐患。好在官方也提供了限制的方法，可以使用
`Configuration.setNewBuiltinClassResolver(TemplateClassResolver)` 或设置
`new_builtin_class_resolver` 来限制这个内建函数对类的访问(从 2.3.17版开始)。
## FreeMarker初代SSTI漏洞及安全机制
经过前文的介绍，我们可以发现 FreeMarker 的一些特性将造成模板注入问题，在这里主要通过`api`和`new`两个内建函数进行分析。
  * **api 内建函数的利用**
我们可以通过`api`内建函数获取类的`classloader`然后加载恶意类，或者通过`Class.getResource`的返回值来访问`URI`对象。`URI`对象包含`toURL`和`create`方法，我们通过这两个方法创建任意`URI`，然后用`toURL`访问任意URL。
      eg1：
      ${classLoader.loadClass("our.desired.class")}
      eg2：
      FILE:[
      ${byte}, ]
  * **new 内建函数的利用**
主要是寻找实现了 `TemplateModel`
接口的可利用类来进行实例化。`freemarker.template.utility`包中存在三个符合条件的类，分别为`Execute`类、`ObjectConstructor`类、`JythonRuntime`类。
      ${value("calc.exe")}
      ${value("java.lang.ProcessBuilder","calc.exe").start()}
      import os;os.system("calc.exe")//@value为自定义标签
当然对于这两种方式的利用，FreeMarker
也做了相应的安全措施。针对`api`的利用方式，设置配置项`api_builtin_enabled`的默认值为`false`。同时为了防御通过其他方式调用恶意方法，FreeMarker内置了一份危险方法名单`unsafeMethods.properties`[3]，诸如`getClassLoader`、`newInstance`等危险方法都被禁用了，下面列出一小部分，其余请自行查阅文件。
    //unsafeMethods.properties
    java.lang.Object.wait()
    java.lang.Object.wait(long)
    java.lang.Object.wait(long,int)
    java.lang.Object.notify()
    java.lang.Object.notifyAll()
    java.lang.Class.getClassLoader()
    java.lang.Class.newInstance()
    java.lang.Class.forName(java.lang.String)
    java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)
    java.lang.reflect.Constructor.newInstance([Ljava.lang.Object;)
    ...
    more
针对`new`的利用方式，上文已提到过官方提供的一种限制方式——使用
`Configuration.setNewBuiltinClassResolver(TemplateClassResolver)` 或设置
`new_builtin_class_resolver` 来限制这个内建函数对类的访问。此处官方提供了三个预定义的解析器：
  * **UNRESTRICTED_RESOLVER** ：简单地调用`ClassUtil.forName(String)`。
  * **SAFER_RESOLVER** ：和第一个类似，但禁止解析`ObjectConstructor`，`Execute`和`freemarker.template.utility.JythonRuntime`。
  * **ALLOWS_NOTHING_RESOLVER** ：禁止解析任何类。
当然用户自身也可以自定义解析器以拓展对危险类的限制，只需要实现`TemplateClassResolver`接口就好了，接下来会介绍到的 Liferay
就是通过其自定义的解析器`LiferayTemplateClassResolver`去构建 FreeMarker 的模板沙箱。
## Liferay FreeMarker模板引擎SSTI漏洞踩坑历程
### 碰出一扇窗
在研究这个 BlackHat 议题的过程中，我们遇到了很多问题，接下来就顺着我们的分析思路，一起探讨 Liferay 的安全机制，本次测试用的环境为
Liferay Portal CE 7.3 GA1。
先来看看 GHSL 安全团队发布的 Liferay SSTI 漏洞通告[4]：
> Even though Liferay does a good job extending the FreeMarker sandbox with a
> custom ObjectWrapper
> (`com.liferay.portal.template.freemarker.internal.RestrictedLiferayObjectWrapper.java`)
> which enhances which objects can be accessed from a Template, and also
> disables insecure defaults such as the `?new` built-in to prevent
> instantiation of arbitrary classes, it stills exposes a number of objects
> through the Templating API that can be used to circumvent the sandbox and
> achieve remote code execution.
>
> Deep inspection of the exposed objects' object graph allows an attacker to
> get access to objects that allow them to instantiate arbitrary Java objects.
可以看到，给出的信息十分精简有限，但是还是能从中找到关键点。结合议题介绍和其他同类型的漏洞介绍，我们能梳理出一些关键点。
  * **Exposed Object**
通告中提及了通过模板 API 暴露出大量的可访问对象，而这些对象即为 SSTI
漏洞的入口，通过这些对象的方法或者属性可以进行模板沙箱的绕过。这也是议题的一大重点，因为大多数涉及第三方模板引擎的CMS都没有对这些暴露的对象进行控制。
  * **RestrictedLiferayObjectWrapper.java**
根据介绍，该自定义的`ObjectWrapper`拓展了FreeMarker的安全沙箱，增强了可通过模板访问的对象，同时也限制了不安全的默认配置以防止实例化任何类，比如`?new`方法。可以看出这是Liferay赋予模板沙箱的主要安全机制。
可以看到，重点在于如何找到暴露出的对象，其次思考如何利用这些对象绕过Liferay的安全机制。
我们在编辑模板时，会看到一个代码提示框。列表中的变量都是可以访问的，且无需定义，也不用实现`TemplateModel`接口。但该列表会受到沙箱的限制，其中有一部分对象被封禁，无法被调用。
这些便是通过模板 API
暴露出来的一部分对象，但这是以用户视角所看到的，要是我们以运行态的视角去观察呢。既然有了暴露点，其背后肯定存在着许多未暴露出的对象。
所以我们可以通过调试定位到一个关键对象——`FreeMarkerTemplate`，其本质上是一个`Map<String,