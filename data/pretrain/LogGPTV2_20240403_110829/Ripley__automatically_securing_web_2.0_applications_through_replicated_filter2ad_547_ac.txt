### Optimized Text

**Response Relay and Execution Synchronization:**
Copies of the response are transmitted to both the client replica (C) and the actual client (C0) over the network. While lock-step execution is one approach, RIPLEY also supports an alternative where the server-side client replica (C) can proceed independently by relaying message (m) to the server and receiving the response. When the corresponding message (m0) from the actual client arrives, the server verifies its equivalence with m. This scenario is particularly effective with well-provisioned servers and relatively slow clients.

Another method involves maintaining audit logs for messages from both C and C0, with periodic randomized cross-checking. This approach reduces overhead but provides a probabilistic integrity guarantee. For large remote procedure calls (RPCs), sending the entire RPC is unnecessary. Instead, Message Authentication Codes (MACs) can be computed and sent to save bandwidth.

**Client Replica Execution in .NET:**
Each client replica (C) runs in its own Application Domain (APPDOMAIN), a lightweight process-like abstraction in the .NET runtime [42]. At runtime, RIPLEY maintains a separate APPDOMAIN for each user session, which is accessed whenever a batch of events is received from the client. The primary advantage of using separate APPDOMAINs is memory isolation, as each uses its own heap and loads its own copy of dynamic libraries.

**Scalability and Performance:**
A key question is how to scale a RIPLEY server. In addition to running the existing server code, RIPLEY also migrates client replicas for all connected clients. Faithful replication of client execution on the server can be achieved by running a full-featured browser instance for each user, as proposed by Deepfish [35]. However, this approach is challenging to scale for popular and complex applications due to the high memory and CPU demands of browsers.

RIPLEY's scalability is supported by two main factors:
1. **Faster Execution:** RIPLEY runs replicas in .NET instead of JavaScript, which is significantly faster. .NET's Just-In-Time (JIT) compiler operates on a low-level, strongly-typed intermediate representation (IR), making it more efficient than JavaScript's JIT interpreters.
2. **Lightweight Emulation:** RIPLEY uses a lightweight emulator instead of a full-featured browser, reducing memory and CPU utilization. The emulator tracks relevant UI state, including DOM structure and editable elements, without performing rendering or layout computations, resulting in a much smaller memory footprint.

**DOM Manipulation and Event Handling:**
To ensure the replica behaves identically to the actual JavaScript client, RIPLEY associates each DOM node with a unique ID. When a new DOM node is created, a new ID is generated and stored within the node. Since the runtime behavior of the actual client and its replica is identical, new DOM objects are created in the same order, providing a deterministic mapping between DOM elements.

When an event is raised on a client DOM object, the target object's ID is sent to the replica on the server. The APPDOMAIN hosting the replica maintains a lookup table of IDs-to-object references, allowing RIPLEY to deliver the event to the appropriate object. The method to be invoked and the parameters are included in the event data.

**Experimental Results:**
Evaluating RIPLEY presents a challenge due to the scarcity of security-sensitive benchmark applications. We used five representative security-relevant applications developed with Volta, described in Section 4.1, to measure the absolute overhead. In Section 4.2, we evaluate the overhead of applying RIPLEY-style replication to Hotmail, a large-scale AJAX application, relative to its resource and CPU requirements.

**Volta Benchmarks:**
Our Volta benchmark applications and the benefits of applying RIPLEY are detailed in Appendix A. Figure 7 summarizes the line-of-code metrics and RPC frequencies for these applications. Most applications require only one RPC at the end of execution, minimizing server interaction. Many benchmarks were inspired by game exploits from “Exploiting Online Games” [21].

**Comparison with Hand-Secured Applications:**
To highlight the benefits of automatic replication, we compare RIPLEY-protected applications with manually secured ones. Manually securing applications often requires moving significant portions of computation to the server, resulting in more RPCs. RIPLEY results in fewer RPCs, which is crucial in environments where extra network round-trips are costly, such as mobile phone environments.

**Overhead Micro-Measurements:**
We focus on three dimensions of overhead: network utilization, memory usage, and CPU time. Network overhead was measured by simulating typical user interactions and measuring the stream of events sent to the server using Firebug [29]. The Blog application, which generates one RPC per blog entry read, uses more messages than other applications. RIPLEY's network overhead is proportional to the number of events, with each application using about 120 bytes per event, uncompressed. The event stream is highly compressible, further reducing bandwidth requirements.

**Memory Utilization:**
Figure 9 compares memory utilization across different configurations. RIPLEY's use of APPDOMAINs and lightweight emulation significantly reduces memory usage compared to traditional browser-based solutions.

**Server Checks and Event Capture:**
Table 1 shows the server checks and event capture statistics for the benchmark applications. The maximum, minimum, and average values provide insights into the performance impact of RIPLEY.

By addressing these aspects, RIPLEY offers a scalable and efficient solution for replicating client execution on the server, ensuring strong integrity guarantees with minimal overhead.