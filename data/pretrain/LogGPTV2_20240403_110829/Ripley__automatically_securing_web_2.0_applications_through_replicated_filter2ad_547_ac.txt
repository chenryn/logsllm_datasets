Copies of the response are relayed to both the client replica C and
the actual client C0 over the network.
Lock-step execution fashion is not the only option. Alternatively,
RIPLEY could allow the server-side client replica C to move ahead,
by relaying m to the server and sending back the response. When
m0 arrives, the server can conﬁrm its equivalence with m. This is
a likely scenario with well-provisioned servers and relatively slow
clients. An alternative approach consists of keeping audit logs for
messages arriving from both C and C0 and to do periodic random-
ized cross-checking offering a lower overhead at the cost of a prob-
abilistic integrity guarantee. Moreover, if RPCs are large, send-
ing the entire RPCs is entirely unnecessary — to save bandwidth,
we can simply compute Message Authentication Codes (MAC) and
send them over.
runtime,
the client
Since there could be multiple clients connected to the same
server at
replica C is executed in its
own APPDOMAIN, a lightweight process-like abstraction in the
.NET runtime [42]. At runtime, RIPLEY maintains a separate
APPDOMAIN associated with each user session, and looks it up
each time a batch of events is received from the client.
The main advantage of using separate APPDOMAINs is memory
isolation: each uses its own heap and loads its own copy of dynam-
By now, one question begs to be asked: how are we going to
scale a RIPLEY server? Not only are we running the existing server
code, for reasons of security, we have also migrated client replicas
for all clients connected to the server. Our goal of faithfully repli-
cating the client execution on the server can be accomplished by
running an instance of the actual full-ﬂedged browser loaded with
the application code on the server, one per user, as proposed by
Deepﬁsh [35]. However, for a popular and complex application,
this approach is difﬁcult to scale because the browser is a highly
memory- and CPU-intensive piece of software.
There are two primary reasons that we believe that our solution
will scale. First, we run the replicas in .NET instead of JavaScript,
making it signiﬁcantly faster in our experiments. One reason for
the speed difference is that .NET has a JIT-ing highly optimized
interpreter operating on a low-level strongly-typed IR. JIT inter-
preters for JavaScript are not as matured yet, and might still require
dynamic type checks since it is not strongly typed. Second, we use
a lightweight emulator instead of a full-ﬂedged browser to reduce
the memory and CPU utilization, as demonstrated in Section 4.1.
Much of the execution and state of the client does not affect the
server state. For instance, any of the DOM rendering code or the
state associated with the layout of the UI widgets do not feature
in the application logic that updates application state on the server
or the database. Clearly, such details can be abstracted away when
we execute the client replica. We accomplish this by building a
browser emulator that hosts the client replica C instead of an actual
browser. The emulator is a lightweight browser that keeps track of
the relevant UI state including the structure of the DOM and con-
tents of editable elements. Since it performs no rendering or layout
related computations, it avoids a lot of computation. As shown in
Section 4.1, the memory footprint is an order of magnitude less for
the emulator compared to a full browser.
The emulator is built as a dynamically linked library that ex-
UI event e1UI event e2RPC: mm'checkerC’Cme1e2e1e2UI event e1UI event e2RPC: m’ + {e1, e2}m'checkerC’C{e1, e2}mm1m2m3m4m5m6m7m8m'1m'2m'3m'4m'5m'67:24:347:24:357:24:387:24:567:25:077:25:097:25:197:25:347:24:357:24:377:24:387:24:597:25:107:25:12178Benchmark application
Shopping Cart
Game of Sudoku
Blog Application
Speed Typing Test
Online Quiz
Lines of code
JavaScript C#
594
658
341
363
416
698,832
699,873
699,071
697,782
699,056
Frequency of remote procedure calls (RPCs)
with RIPLEY
w/o RIPLEY
one at checkout
one at the end
submit, load each blog
initialization, ﬁnish
load questions, ﬁnish
on every cart update
on every game cell entry
submit, load each blog
on every word entry
on every question
Figure 7: Summary of statistics pertaining to the RIPLEY benchmark applications.
Application
RPCs
Benchmark
RPCs Bytes Events RPCs
Network overhead for event transfer
Compressed
Uncompressed
Total Norm. Total Norm.
Shopping Cart
Game of Sudoku
Blog Application
Speed Typing Test
Online Quiz
1
1
9
4
2
157
160
1,595
1,598
275
13
146
252
556
66
1
8
11
28
4
1,548
16,953
31,090
63,945
7,801
119
116
123
115
118
300
812
863
1,422
445
23
5.6
3.4
2.6
6.7
Figure 8: Network overhead measurements after applying RIPLEY.
poses a DOM manipulation interface, with which the client replica
C links at runtime. For reasons of efﬁciency, in addition to using
the emulator, the replica is linked against a slightly modiﬁed Volta
client runtime, that relays the HTTP requests to the server compo-
nent S directly using a .NET method call instead of sending it over
the network.
To ensure that the replica exhibits the same observable behavior
as an actual JavaScript client, some further machinery is required.
Relaying events to the right object within the replica is done by as-
sociating each DOM node with a unique ID. Each time a new DOM
node is created, either on the actual client or on the replica, a new
ID is created and stored within the node. Since the runtime behav-
ior of the actual client and its replica is identical, new DOM objects
are created in the same order, providing a deterministic mapping
between DOM elements of the client and its replica.
When an event is raised on a client DOM object, the ID of the
target object is sent over the wire to the replica on the server, as
shown in Figure 1. The APPDOMAIN hosting the replica maintains
a lookup table of IDs-to-object references, which allows RIPLEY to
identify the appropriate object instance to deliver the event to. The
method to be invoked on that instance and the parameters that need
to be sent are provided as part of the event.
4. EXPERIMENTAL RESULTS
A comprehensive evaluation of RIPLEY presents a serious chal-
lenge: interesting third-party security-sensitive benchmarks appli-
cations are hard to come by. While our reliance on Volta makes
implementation easier, it makes ﬁnding good benchmarks harder,
since none of the existing Volta applications are security-critical.
To get a better sense of runtime overhead RIPLEY induces, we used
a combination of ﬁve representative security-relevant applications
we have developed using Volta, as described in Section 4.1, which
we evaluate in detail with a focus on absolute overheads. In Sec-
tion 4.2, we show the overhead of applying RIPLEY-style replica-
tion to Hotmail, a large-scale AJAX application. We show RIPLEY
overhead relative to the resource and CPU requirements of existing
Hotmail code.
Volta benchmarks. Our Volta benchmark applications and the
beneﬁts of applying RIPLEY to them are described in detail in Ap-
pendix A. A brief summary of information about them is given in
Figure 7. All of these applications were originally developed in
C# and (partially) translated into JavaScript by the Volta compiler.
Columns 2 and 3 provide the line-of-code metric for the result-
ing JavaScript and original C# code. Note that the JavaScript code
includes the translated versions of the required system classes that
may be needed at runtime, which causes it to be quite substantial; if
GWT experience is any indication, we expect code size to decrease
drastically in subsequent Volta releases [30]. Column 4 shows the
frequency of RPCs in the version of the application protected with
RIPLEY. In most cases, there is only one RPC required at the end of
the execution: in a way, we were trying to push the limit of client-
side computation without excessive server interaction. Many of our
benchmarks were inspired by existing game exploits found in the
book “Exploiting Online Games” [21].
Comparing with hand-secured applications. To put the beneﬁts
of automatic replication into perspective, for each of our bench-
marks we also consider an application that would have the same
strong integrity properties written by hand or with the help of a
compiler such as Jif [7, 8]. In the majority of cases, engineering
such an application requires manually moving signiﬁcant portions
of the computation to the server to preserve integrity. Column 5
shows the number of RPCs for such an application. Clearly, RIP-
LEY results in fewer RPCs for the same integrity guarantee. This
is particularly important when extra network round-trips come at a
high premium, such as in the case of mobile phone environments.
4.1 Volta Applications:
Overhead Micro-measurements
We focus on three dimensions of overhead: extra network uti-
lization, extra memory utilization, and extra CPU time. This sec-
tion focuses on micro-measurements of performance overhead.
4.1.1 Network Overhead
The network overhead was measured for each application by
performing a pre-determined series of user events for each, mir-
roring typical use of that application. The amount of network us-
age in terms of the stream of events sent to the server was mea-
sured in each case, using Firebug [29]. The ﬁrst group of columns,
columns 2–3, in Figure 8 shows the network usage of the appli-
cation itself. Most applications in our benchmark suite send only
a few RPC messages to the server. The Blog application has been
179Server
Client (IE)
Client (FF)
Volta
23 – 26
59 – 64
69 – 77
RIPLEY
27 – 32
59 – 65
69 – 78
Figure 9: Comparison of memory utilization, measured in MB.
Benchmark
Shopping Cart
Game of Sudoku
Blog Application
Speed Typing Test
Online Quiz
Server checks
Event capture
Max Min
0.083 0.083 0.083
0.462 0.462 0.462
0.079 0.002 0.012
0.078 0.004 0.023
0.078 0.004 0.041
Avg Med
Avg Max Min
1.21
1
0
1
0
1.25
1
0 0.676
1
0
0.8
0 3.044
1
8
87
8
84
162
written to produce one RPC per blog entry read, and so it uses more
messages than other applications.
Columns 4–7 show the network overhead introduced by using
RIPLEY. The “Total” column shows the total number of bytes and
the “Norm.” column shows number of bytes per event. Extra net-
work activity is only due to transmission of event data to the server.
Unsurprisingly, applications such as the Speed Typing and the Blog
that generate a lot of key strokes consume more network resources.
However, network messages containing event data are sent asyn-
chronously and thus do not signiﬁcantly slow down the client-side
execution. The bandwidth requirement is directly proportional to
the number of events, as can be seen in the last column. All appli-
cations use up about 120 bytes per event, uncompressed.
Fortunately, the event stream is highly compressible; applying