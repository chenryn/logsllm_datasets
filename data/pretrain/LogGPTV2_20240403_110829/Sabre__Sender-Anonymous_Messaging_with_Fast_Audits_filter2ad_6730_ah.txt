are two possibilities: either the leftmost subtree is rooted at
a 1-node and the rightmost subtree is rooted at a 0-node, or
vice versa. In both cases, one subtree has only type-0 leaves,
while, by the inductive hypothesis, the other subtree has a
single type-1 leaf with all others being of type 0.
□
B. Du-Atallah (2+1)-party multiplication
Du-Atallah multiplication [13] is a (2 + 1)-party variant
of the well-known Beaver-triplet multiplication [4]. Suppose
servers 0 and 1 hold (2,2)-additive sharings [𝑥] and [𝑦]; their
goal is to compute a sharing [𝑥𝑦] of the product 𝑥 ·𝑦.
To this end, a semi-trusted third party samples the 5-
tuple (𝑟0, 𝑟1, 𝑠0, 𝑠1, 𝑡) uniformly and sends (𝑟0, 𝑠0, 𝑟0𝑠1 + 𝑡) and
(𝑟1, 𝑠1, 𝑟1𝑠0 − 𝑡) to servers 0 and 1. Server 0 uses 𝑟0, 𝑠0 to
blind its shares, sending the pair ([𝑥]0 + 𝑟0, [𝑦]0 + 𝑠0) to
server 1; meanwhile, server 1 sends ([𝑥]1 + 𝑟1, [𝑦]1 + 𝑠1)
to server 0. Finally, server 0 outputs [𝑥𝑦]0 (cid:66) [𝑥]0
[𝑥𝑦]1 (cid:66) [𝑥]1
easy to check that [𝑥𝑦]0 + [𝑥𝑦]1 = 𝑥 · 𝑦, as desired.
(cid:0)[𝑦]0 +
([𝑥]1 + 𝑟1)(cid:1) − 𝑠0([𝑥]1 + 𝑟1) + (𝑟0𝑠1 + 𝑡) and server 1 outputs
(cid:0)[𝑦]1 + ([𝑥]0 + 𝑟0)(cid:1) − 𝑠1([𝑥]0 + 𝑟0) + (𝑟1𝑠0 − 𝑡). It is
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
141966
)
s
m
(
e
m
i
t
k
c
o
l
c
-
l
l
a
W
30
20
10
0
𝑛 = 212
2
17
10
22 25
Number of s-boxes
(a) 2-verifier SNIP auditing
32
𝑛 = 214
160
120
80
40
0
2
)
s
m
(
e
m
i
t
k
c
o
l
c
-
l
l
a
W
𝑛 = 216
𝑛 = 218
)
B
M
i
(
e
z
i
s
f
o
o
r
P
17
10
22 25
Number of s-boxes
(b) Full-domain evaluation
32
1.5
1.0
0.5
2
10
22 25
Number of s-boxes
17
(c) Proof size
32
Fig. 9: 2-verifier SNIP auditing time, full-domain evaluation time, and proof size versus number of LowMC s-boxes.
d
n
o
c
e
s
/
s
e
i
r
e
u
Q
103
102
101
100
10−1
212
Sabre-M0 (1 KiB)
Sabre-M2 (1 KiB)
Sabre-M1 (1 KiB)
Sabre-M (1 KiB)
214
Number of mailboxes (𝑛)
216
218
Fig. 10: Throughtput of Sabre-M variants (1 KiB messages)
C. LowMC parameter selection
LowMC contains several tuning knobs allowing tradeoffs
among the total number of multiplications (i.e., s-boxes per
round), multiplicative depth (number of rounds), and wall-
clock running time. Roughly speaking, optimizing for total
number of multiplications minimizes overall communication
cost (for MPC-based auditing) and proof size (for SNIP-
based auditing), whereas optimizing for multiplicative depth
minimizes round complexity (for MPC-based auditing) or
proof verification time (for SNIP-based auditing). For our
Sabre implementation, we chose to optimize for multiplica-
tive depth by maximizing the number of s-boxes per round.
Figure 9 presents empirical evidence to justify this choice;
specifically, Figures 9a-9c respectively plot the wall-clock
time for 2-verifier SNIP auditing, the wall-clock running time
for full-domain DPF evaluation, and the expected size of 2-
verifier SNIPs for various settings of the “s-boxes per round”
tuning knob and numbers of buckets/mailboxes. The graphs
show that optimizing for multiplicative depth is essentially
pessimal for auditing but optimal for full-domain evaluation,
which is the bottleneck operation in all Sabre variants.
D. Stepping stones to Sabre-M
This appendix describes the “stepping stones” that led to
the development Sabre-M.
1) Sabre-M0: Express with improved auditing: Consider a
Sabre-M0 instance with security parameter 𝜆 ∈ N (say,
𝜆 = 128). The design of Sabre-M0 tightly parallels that
of Express, save for the new audit protocol. In a registra-
tion phase, the recipient contacts the servers to create a
∈
(F
2𝐿)1×𝑛
mailbox and receives a uniform random, 𝜆-bit address in
exchange. Suppose there are 𝑛 registered mailboxes with
addresses addr1, . . . , addr𝑛. To deposit a message 𝑀 ∈ F
2𝐿
into the mailbox addressed by addr𝑖, the sender samples
(dpf0, dpf1) ← Gen(1𝜆, F
2𝐿; addr𝑖, 𝑀) and then it sends
2𝜆, F
dpf𝑏 to server 𝑏 for 𝑏 = 0, 1.
Upon receiving dpf𝑏, server 𝑏 constructs the vector
in which the 𝑗 th component equals
𝑀𝑏
Eval(dpf𝑏, addr𝑗); server 𝑏 adds 𝑀𝑏 to its mailbox database
to effectuate the write. We stress that (as in Express—owing
to the sparsity of the set of mailbox addresses within {0, 1}𝜆)
Boyle et al.’s full-domain evaluation procedure does not apply
when computing 𝑀𝑏. Instead, each column requires O(𝜆)
length-doubling PRG evaluations (for a total of O(𝜆𝑛) evalua-
tions), plus one evaluation of the leaf-stretching PRG.
As per Definition 4, 𝑀0 + 𝑀1 ∈ (F
2𝐿)1×𝑛 has message 𝑀
in its 𝑖 th column and zero elsewhere—provided the sender
generated (dpf0, dpf1) honestly, which the servers confirm via
any of the three audit protocol instantiations. Sabre-M0 very
quickly rejects malformed DPFs outright, whereas (like in
Express) otherwise well-formed DPFs whose distinguished
points do not correspond to registered mailbox addresses
will pass auditing, ultimately resulting in a (comparatively
expensive) no-operation “update” to the mailbox database. In
particular, such well-formed, yet bogus writes incur the same
decidedly non-trivial cost as “true” writes.
2) Sabre-M1: Sabre-M0 with shorter DPFs: Sabre-M1 pro-
vides a modest improvement over Sabre-M0 by dynamically
“truncating” mailbox addresses to a prefix just long enough to
avoid collisions with high probability, thereby reducing both
(i) the size of (and cost of auditing) the keys dpf0 and dpf1
and (ii) the cost of computing 𝑀0 and 𝑀1 from them.
Upon registering a mailbox, the recipient still receives a
uniform random, 𝜆-bit mailbox address that senders must
know (in its entirety) to deposit messages into the mailbox.
The difference is that now only a prefix of this address (whose
length grows with the number of registered mailboxes) is
used when sampling and evaluating DPFs. The intuition here
is that—for purposes of correctness—it suffices merely to
guarantee that no two mailboxes map to the same prefix;
thus, one can compute the required prefix length for a given
number of registered mailboxes using a standard birthday
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
151967
bound calculation. (In our experiments in Section VII-D, we
chose the length to ensure that the probability of one or more
prefix collisions is strictly less than 0.001.)
This optimization improves efficiency relative to Sabre-M0.
However, it comes at the cost of increasing the probability of
an attacker “guessing” a distinguished point corresponding to
a valid mailbox—that is, random guesses potentially clobber a
registered mailbox with a probability that is now polynomial
in 𝑛. To mitigate, Sabre-M1 requires the sender to transmit
an additive share [addr] of the full mailbox address alongside
dpf𝑏, after which the servers use a simple PIR-based protocol
to verify that the address shares reconstruct to the full
address of whatever mailbox the DPF keys reference.
Specifically, servers 0 and 1 hold in common an associative
array (key-value store) mapping each distinguished input to
its corresponding mailbox addresses. Let 𝐷 denote the set of
distinguished inputs reflected in the associative array and,
for each 𝑖 ∈ 𝐷, let flag(𝑖)
𝑏 denote the advice bit for the 𝑖 th leaf
of dpf𝑏 (see Section V-A). By construction, if (dpf0, dpf1) is
a valid DPF key pair, then flag(𝑖)
if and only if the
distinguished point is 𝑖; thus, server 𝑏 outputs
0 = flag(𝑖)
1
[addr′]𝑏 (cid:66)
𝑖∈𝐷, 𝑡 (𝑏)
𝑖 =1 addr𝑖
so that [addr′]0 + [addr′]1 = addr𝑖 over F
2𝜆. The server
verify that this computed address [addr′] matches the client’s
claimed address [addr] by checking that [addr]0 + [addr′]0 =
[addr]1 + [addr′]1.
The full-domain evaluation procedure still does not ap-
ply when computing 𝑀𝑏 in Sabre-M1; however, now the
cost of computing each column reduces from O(𝜆) to just
O(poly(lg 𝑛)) length-doubling PRG evaluations (reducing the
total cost of computing 𝑀𝑏 from O(𝑛 𝜆) to just O(𝑛poly(lg 𝑛))
evaluations), plus 𝑛 evaluations of the leaf-stretching PRG.
Furthermore, the servers can now detect and reject DPFs
from senders who do not know a registered mailbox ad-
dress without incurring a costly no-operation to “update” the
database.
3) Sabre-M2: Sabre-M1 with decoupled address checking:
Sabre-M2 improves on Sabre-M1 by eliminating the asso-
ciation between DPF leaves and mailbox addresses: Instead
of sampling DPFs whose distinguished points correspond to
mailbox addresses, senders sample DPFs whose distinguished
points correspond to the chronological order in which those
mailboxes were registered. In other words, to deposit a mes-
sage 𝑀 ∈ F
2𝐿 into the mailbox with address addr𝑖, a sender
samples keys for a DPF with point (𝑖, 𝑀) ∈ {0, . . . , 𝑛−1}×F
2𝐿
rather than (addr𝑖, 𝑀) ∈ F
2𝐿. With this optimization,
(i) the domain of DPFs has size equal to the number of regis-
tered mailboxes, and (ii) the full-domain evaluation procedure
applies when computing the 𝑀𝑏. This reduces the total cost of
computing 𝑀𝑏 to just 𝑛 − 1 length-doubling PRG evaluations
plus 𝑛 evaluations of the leaf-stretching PRG. To ensure that
senders know the correct mailbox address, Sabre-M2 inherits
the PIR-based address checking of Sabre-M1.
4) Sabre-M: Sabre-M2 with O(1)-time address checking:
Sabre-M improves on Sabre-M2 by replacing the linear-com-
2𝜆 × F
plexity PIR-based address check with a constant-complexity
PRF-based one described in Section IV. With this modification
in place, the entire auditing procedure—that is, both checking
the well-formedness of the DPF and checking the validity of
the mailbox address—has complexity logarithmic in 𝑛, allow-
ing the servers to rapidly reject bogus write requests from a
would-be resource-exhaustion DoS attacker. The benefits of
rapid auditing are shown in our experimental evaluation in
Section VII.
Figure 10 plots the throughput of each Sabre-M variant.
Notice that the plots for Sabre-M2 and Sabre-M overlap al-
most perfectly; we stress that this neck-to-neck performance
is an artifact of all writes being valid.
E. Proof of Theorem 3 (from Section V-B2)
Theorem 3 (Restatement). The 3-verifier SNIP auditing
protocol with hash function Hash: {0, 1}∗ → {0, 1}𝜇 is per-
fectly simulatable and has perfect completeness and soundness
overwhelming in 𝜇.
Proof (sketch). Perfect simulatability and completeness are
immediate consequences of the perfect simulatability and
completeness of (2+1)-party auditing. To see that soundness
is indeed overwhelming in 𝜇, it suffices to note that since the
three verifiers collectively scrutinize all three parties’ views
from a simulated (2 + 1)-party audit, inconsistencies in the