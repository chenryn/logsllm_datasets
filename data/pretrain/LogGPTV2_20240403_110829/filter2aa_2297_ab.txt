4GB 
SMRAM 
REMAPBASE 
REMAPLIMIT 
Target range of 
memory reclaim 
changed to 
SMRAM 
Access 
Is Memory Remapping Attack Possible? 
[*] running module: chipsec.modules.remap 
[x][ ======================================================================= 
[x][ Module: Memory Remapping Configuration 
[x][ ======================================================================= 
[*] Registers: 
[*]   TOUUD     : 0x000000013E000001 
[*]   REMAPLIMIT: 0x000000013DF00001 
[*]   REMAPBASE : 0x0000000100000001 
[*]   TOLUD     : 0xBFA00001 
[*]   TSEGMB    : 0xBD000001 
[*] Memory Map: 
[*]   Top Of Upper Memory: 0x000000013E000000 
[*]   Remap Limit Address: 0x000000013DFFFFFF 
[*]   Remap Base Address : 0x0000000100000000 
[*]   4GB                : 0x0000000100000000 
[*]   Top Of Low Memory  : 0x00000000BFA00000 
[*]   TSEG (SMRAM) Base  : 0x00000000BD000000 
[*] checking locks.. 
[+]   TOUUD is locked 
[+]   TOLUD is locked 
[+]   REMAPBASE and REMAPLIMIT are locked 
[*] checking alignment.. 
[+]   All REMAP*/TOUUD/TOLUD addresses are 1MB aligned 
[*] checking remap programming.. 
[*]   Memory Remap is enabled 
[+]   Remap window is programmed correctly: 4GB <= REMAPBASE <= REMAPLIMIT 
[+] PASSED: Memory Remap is configured correctly and locked 
Problems With HW Configuration/Protections 
• If BIOS doesn‟t lock down memory config, boundary separating 
DRAM and MMIO (TOLUD) can be moved somewhere else. E.g. 
malware can move it below SMRAM to make SMRAM decode as 
MMIO 
• Graphics Aperture can then be overlapped with SMRAM and used to 
redirect MMIO access to memory range defined by PTE entries in 
Graphics Translation Table (GTT) 
• When CPU accesses protected SMRAM range to execute SMI 
handler, access is redirected to unprotected memory range 
somewhere else in DRAM 
• Similarly to Remapping Attack, BIOS has to lock down HW memory 
configuration (i.e. TOLUD) to mitigate this attack 
• System Management Mode Design and Security Issues (GART) 
SMRAM Redirection via Graphics Aperture 
SMRAM Access in SMM : Normal Memory Map 
Low MMIO Range 
TOLUD 
4GB 
SMRAM 
CPU executes 
instructions (mov) 
from SMRAM normally 
mov ebx,imm32 
Code fetch at 
SMBASE in 
SMM 
Graphics Aperture 
GTT MMIO 
Access to GFx 
Aperture 
GFx Memory 
Access to GFx aperture 
(MMIO) is redirected to GFx 
DRAM range per GTT PTEs 
GTT PTEs 
SMRAM Access in SMM : Redirection Attack 
Low MMIO Range 
TOLUD 
4GB 
SMRAM 
CPU executes instructions 
from fake SMRAM redirected 
to by MMIO GFx Aperture 
per malicious GTT PTEs 
mov ebx,imm32 
Code fetch at 
SMBASE in 
SMM 
Graphics Aperture 
GTT MMIO 
GFx Memory 
Fake SMRAM 
GTT PTEs 
Problems With HW Configuration/Protections 
• SMRAM has to be protected from DMA Attack 
• Protection from inbound DMA access is guaranteed by 
programming TSEG range 
• When BIOS doesn‟t lock down TSEG range configuration, 
malware can move TSEG outside of where actual SMRAM is 
• Then program one of DMA capable devices (e.g. GPU device) 
or Graphics Aperture to access SMRAM 
• Programmed I/O accesses: a threat to Virtual Machine Monitors? 
• System Management Mode Design and Security Issues 
• BIOS has to lock down configuration required to define range 
protecting SMRAM from inbound DMA access (e.g. TSEG range) 
• chipsec_main --module smm_dma 
DMA/GFx Aperture Attacks Against SMRAM 
DMA Access to SMRAM: Normal Memory Map 
Low MMIO Range 
TOLUD 
4GB 
SMRAM 
DMA access to SMRAM 
is blocked due to TSEG 
covering SMRAM 
TSEG Base 
GFx Mem Base 
DMA Access to SMRAM: DMA Attacks 
Low MMIO Range 
TOLUD 
4GB 
SMRAM 
DMA access to SMRAM 
is not blocked as TSEG 
Base moved 
Graphics Aperture 
GTT MMIO 
Access to GFx Aperture is 
redirected to SMRAM 
TSEG Base 
GFx Mem Base 
GTT PTEs 
Is SMRAM Protected From DMA Attacks? 
[*] running module: chipsec.modules.smm_dma 
[x][ ======================================================================= 
[x][ Module: SMRAM DMA Protection 
[x][ ======================================================================= 
[*] Registers: 
[*]   TOLUD    : 0xBFA00001 
[*]   BGSM     : 0xBD800001 
[*]   TSEGMB   : 0xBD000001 
[*]   SMRR_BASE: 0x00000000BD000006 
[*]   SMRR_MASK: 0x00000000FF800800 
[*] Memory Map: 
[*]   Top Of Low Memory       : 0xBFA00000 
[*]   TSEG Range (TSEGMB-BGSM): [0xBD000000-0xBD7FFFFF] 
[*]   SMRR Range              : [0xBD000000-0xBD7FFFFF] 
[*] checking locks.. 
[+]   TSEGMB is locked 
[+]   BGSM is locked 
[*] checking TSEG covers entire SMRR range.. 
[+]   TSEG covers entire SMRAM 
[+] PASSED: TSEG is properly configured. SMRAM is protected from DMA attacks 
BIOS Attack Surface: Hardware Configuration 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
Problems With HW Configuration/Protections 
• “Top Swap” mode allows fault-tolerant update of the BIOS boot-block 
• Enabled by BUC[TS] in Root Complex MMIO range 
• Chipset inverts A16 line (A16-A20 depending on the size of boot-block) of 
the address targeting ROM, e.g. when CPU fetches reset vector on reboot 
• Thus CPU executes from 0xFFFEFFF0 inside “backup” boot-block rather 
than from 0xFFFFFFF0 
• Top Swap indicator is not reset on reboot (requires RTC reset) 
• When not locked/protected, malware can redirect execution of reset 
vector to alternate (backup) boot-block 
• BIOS Boot Hijacking and VMware Vulnerabilities Digging 
• BIOS has to lock down Top Swap configuration (BIOS Interface Lock in 
General Control & Status register) & protect swap boot-block range in SPI 
• chipsec_main --module common.bios_ts 
BIOS Top Boot-Block Swap Attack 
BIOS Top Swap 
Original BIOS Boot-Block 
0xFFFFFFF0 
CPU normally fetches 
reset vector at FFFFFFF0 
0xFFFEFFF0 
Alternate BIOS Boot-Block 
(BUC[TS] = 1) 
When TS is not locked: 
• Malware sets BUC[TS] 
• Out of reset, CPU starts 
@ reset vector 
• Chipset inverts A16 
• CPU fetches instr. from 
alternate BB (at 
FFFEFFF0) instead of 
FFFFFFF0 
Is BIOS Interface Locked? 
[+] imported chipsec.modules.common.bios_ts 
[x][ ======================================================================= 
[x][ Module: BIOS Interface Lock and Top Swap Mode 
[x][ ======================================================================= 
[*] RCBA General Config base: 0xFED1F400 
[*] GCS (General Control and Status) register = 0x00000021 
    [10] BBS  (BIOS Boot Straps)         = 0x0 
    [00] BILD (BIOS Interface Lock-Down) = 1 
[*] BUC (Backed Up Control) register = 0x00000000 
    [00] TS (Top Swap) = 0 
[*] BC (BIOS Control) register = 0x2A 
    [04] TSS (Top Swap Status) = 0 
[*] BIOS Top Swap mode is disabled 
[+] PASSED: BIOS Interface is locked (including Top Swap Mode) 
BIOS Attack Surface: SMI Handlers 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
Legacy SMI Handlers Calling Out of SMRAM 
Phys Memory 
SMRAM 
CALL F000:8070 
Legacy BIOS Shadow 
(F/ E-segments) 
PA = 0xF0000 
1 MB 
Legacy SMI Handlers Calling Out of SMRAM 
Phys Memory 
SMRAM 
CALL F000:8070 
Legacy BIOS Shadow 
(F/ E-segments) 
PA = 0xF0000 
1 MB 
Code fetch 
in SMM 
Legacy SMI Handlers Calling Out of SMRAM 
Phys Memory 
SMRAM 
CALL F000:8070 
Legacy BIOS Shadow 
(F/ E-segments) 
PA = 0xF0000 
1 MB 
0xF8070: payload 
0F000:08070 = 
0xF8070 PA 
Code fetch 
in SMM 
Legacy SMI Handlers Calling Out of SMRAM 
• OS level exploit stores payload in F-segment below 1MB 
(0xF8070 Physical Address) 
• Exploit has to also reprogram PAM for F-segment 
• Then triggers “SW SMI” via APMC port (I/O 0xB2) 
• SMI handler does CALL 0F000:08070 in SMM 
• BIOS SMM Privilege Escalation Vulnerabilities (14 issues in 
just one SMI Handler) 
• System Management Mode Design and Security Issues 
Branch Outside of SMRAM 
Function Pointers Outside of SMRAM (DXE SMI) 
Phys Memory 
SMRAM 
mov ACPINV+x, %rax 
call *0x18(%rax) 
ACPI NV Area 
payload 
1. Read function 
pointer from ACPI 
NVS memory 
(outside SMRAM) 
Pointer to payload 
2. Call function 
pointer (payload 
outside SMRAM) 
Attacking Intel BIOS 
BIOS Attack Surface: Secure Boot 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
Secure Boot Key Hierarchy 
Platform Key (PK) 
 Verifies KEKs 
 Platform Vendor‟s Cert 
Key Exchange Keys (KEKs) 
 Verify db and dbx 
 Earlier rev‟s: verifies image signatures 
Authorized Database (db) 
Forbidden Database (dbx) 
 X509 certificates, SHA1/SHA256 hashes of allowed & revoked images 
 Earlier revisions: RSA-2048 public keys, PKCS#7 signatures 
Platform Key (Root Key) has to be Valid 
PK variable exists in NVRAM? 
Yes. Set SetupMode variable to USER_MODE 
No. Set SetupMode variable to SETUP_MODE 
SecureBootEnable variable exists in NVRAM? 
Yes 
 SecureBootEnable variable is SECURE_BOOT_ENABLE and 
SetupMode variable is USER_MODE? Set SecureBoot variable to 
ENABLE 
 Else? Set SecureBoot variable to DISABLE 
No 
 SetupMode is USER_MODE? Set SecureBoot variable to ENABLE 
 SetupMode is SETUP_MODE? Set SecureBoot variable to DISABLE 
First Public Windows 8 Secure Boot Bypass 
A Tale Of One Software Bypass Of Windows 8 Secure Boot 
Platform Key in NVRAM Can Be Modified 
Corrupt Platform Key EFI variable in NVRAM 
 Name (“PK”) or Vendor GUID {8BE4DF61-93CA-11D2-
AA0D-00E098032B8C} 
 Recall that AuthenticatedVariableService DXE driver 
enters Secure Boot SETUP_MODE when correct “PK” EFI 
variable cannot be located in EFI NVRAM 
 Main volatile SecureBoot variable is then set to DISABLE 
 DXE ImageVerificationLib then assumes Secure Boot is 
off and skips Secure Boot checks 
 Generic exploit, independent of the platform/vendor 
 1 bit modification! 
PK Mod: Before and After 
Exploit Programs SPI Controller & Modifies SPI Flash 
Hardware 
I/O 
Memory 
Network 
Graphics 
UEFI DXE Core / Dispatcher 
UEFI OS Loaders 
System Firmware (SEC/PEI) 
DXE 
Driver 
UEFI 
Boot Loader 
Bootx64.efi 
Bootmgfw.efi 
Signed 
BIOS 
Update 
DXE 
Driver 
OS Kernel 
OS Driver 
OS Exploit 
Modify Secure 
Boot FW or 
config in ROM 
Then Installs UEFI Bootkit on ESP 
Hardware 
I/O 
Memory 
Network 
Graphics 
UEFI DXE Core / Dispatcher 
UEFI OS Loaders 
System Firmware (SEC/PEI) 
DXE 
Driver 
UEFI 
Bootkit 
Signed 
BIOS 
Update 
DXE 
Driver 
OS Kernel 
OS Driver 
OS Exploit 
Install 