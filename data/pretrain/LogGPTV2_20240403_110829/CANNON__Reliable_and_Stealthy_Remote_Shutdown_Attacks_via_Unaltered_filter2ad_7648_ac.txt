often outline the steps required to control
the peripheral
clock and will provide the speciﬁc registers that control the
clock gating. In the driver for the Arduino Due, we dis-
cover the instructions, pmc_enable_periph_clk() and
pmc_disable_periph_clk(), to enable and disable the
clock, respectively. These instructions appear prior to low-
level conﬁgurations, e.g. memory allocation, buffer ﬂushes,
etc. However, for another MCU popular in the automotive
community, the STMicro SPC58, ﬁnding equivalent clock con-
trol instructions was more challenging as directly disabling the
peripheral clock was not possible. Thus, we use its reference
manual to identify speciﬁc registers that grants us a similar
clock control capability in Sec. VI.
Simple disruption attack: Recall that the CAN bus state is
dominant if at least one ECU transmits a dominant bit. As
a CAN frame consists of a series of dominant and recessive
bits that follow a particular format, no valid information is
conveyed from a single state held on the bus. Additionally,
such a condition would result in continuous errors in the ECUs
due to absence of stuff bits.
Thus, a basic attack we conceive is to disrupt the bus by
holding the bus in the dominant state. This disruption would
prevent any other ECU from transmitting, leading to a DoS
of all ECUs in the network. An adversary could perform this
action at a critical time (e.g. while the vehicle is in motion)
and disrupt key vehicle functionality. For most vehicles, this
attack would result in loss of control by the driver.
Fig. 6: Holding dominant state disrupts the bus
Using clock control instructions, the adversary could easily
achieve this attack by disabling the clock and freezing the CAN
controller state when it transmits a dominant bit. To launch this
attack, a basic method is to target the start-of-frame (SOF) bit:
• Send a message transmission request to the CAN periph-
eral with any priority and payload.
• Use a timer to delay for half a bit length for the given
bus speed so the peripheral starts the transmission of the
SOF bit.
• Pause the clock using the disable command to freeze the
state of the CAN controller during the SOF bit.
If the bus was initially idle, this sequence would likely lead
to the node continuing to hold the dominant state as depicted in
Fig. 6. However, there are several practical challenges evident
from these basic steps. One critical challenge we encounter
is the precise timing required to freeze the controller during
the target SOF bit. In practice, the selected delay value only
works if the bus was idle when the transmission request was
sent and the frame immediately transmitted. In a real scenario,
the transmission may start much later, e.g. other bus trafﬁc,
scheduling delay, etc. Even minor variations in the timer used
to realize the delay period can cause an adversary to miss
the SOF bit. Furthermore, any variation in the latency of the
actual clock gating effect from the time that the instruction
was issued can cause an adversary to miss the SOF bit.
Although there are practical constraints in this attack, the
simplicity of this attack (as a result of our attack insight)
affords an adversary a great deal of ﬂexibility. For example,
200
10101000101000000000Actual attack outputLogical attack output10101000101011101110Remote adversary disables clockDominant state heldmissing the SOF bit could be compensated for by using an ID
of 0x0 and data payload of 0x0 (essentially a message of all
zeros). Thus, freezing the controller during the arbitration or
data payload ﬁeld would also disrupt the bus. However, even
this all-zero message has recessive bits due to bit stufﬁng when
converted to a CAN frame. Thus, accidentally encountering
those bits due to unreliable timing can cause the attack to fail.
This disruption attack is easy to prevent (if not already
prevented) by most modern CAN buses. This disruption attack
closely resembles a typical hardware fault encountered in a
real CAN bus, i.e. bus held-dominant faults. Thus, several
existing CAN transceivers implement built-in mechanisms to
prevent the bus from holding a dominant state for a long period
of time. This attack demonstrates the practical feasibility of
using the clock control to launch an attack. This attack, though
potentially dangerous, is highly obstructive for all nodes. It is
still short of the goal of this work, which is to target a single
ECU with high reliability and without being detected.
V. RELIABLE TARGET VICTIM SHUTDOWN
In this section, we address some of the limitations discussed
in the previous section to achieve a reliable attack that
can target a speciﬁc victim ECU and quickly shut it down.
We detail three variants of the CANnon attack and provide
solutions to challenges observed in practical scenarios.
A. Reliable clock control
In Sec. IV, we illustrated the difﬁculty to ensure the clock
is paused during a dominant bit. In general, an adversary with
unreliable control of the clock cannot precisely ensure what
state the controller outputs. Also, unlike the previous attack,
a targeted attack usually requires overwriting speciﬁc bits of
a victim message, thus requiring even more precision. One
source of this unreliability is the variation in latency of the
clock gating instructions, before the clock is actually paused.
Another issue for this attack is that the adversary must track
the state of the CAN bus and its own transmissions in order to
target speciﬁc bits. However, when the CAN controller is in
the frozen state, it does not have the ability to observe the CAN
bus state. Without feedback, the adversary is virtually blind to
the actual peripheral output while performing an attack. Thus,
the adversary must keep track of which bit of a compromised
ECU’s frame it is transmitting at all times.
When the adversary calls a clock gating instruction (either
enable or disable), we experimentally ﬁnd that it takes up
to two MCU clock cycles for the instruction to resume the
peripheral’s output. Thus, the adversary cannot reliably gate
the clock near the edge of a bit transition of the attack message.
A nonzero latency means that the adversary cannot ensure
whether a gating instruction results in the output of the state
before or after the state (bit) transition. This latency can thus
inﬂuence the state of the bus that is held when the controller is
frozen. Additionally, an adversary will need to make repeated
calls to gating instructions within a single frame transmission
by the compromised ECU. If the adversary loses precision in
their clock control at any time, they could lose track of which
bit the compromised ECU is currently transmitting.
Improving precision: To address the challenge of reliable
clock control, the adversary can take advantage of the fact that
the MCU’s clock operates at a much higher frequency than the
CAN peripheral’s clock. We utilize the MCU’s hardware-based
timer, operating it at a frequency equal to the bus speed. This
timer creates interrupts at the middle of each CAN bit, which
allows us to track exactly which bit the compromised ECU is
transmitting. Prior to starting the timer, the adversary must ﬁrst
detect when the compromised ECU attempts to send a frame;
from this point, the adversary should delay half of a bit time
before starting the timer interrupt. Our solution is to gate the
clock as close to the middle of a CAN bit, giving the adversary
maximum distance from bit transition edges. With an interrupt
at the middle of each bit, the adversary can reliably track the
bus state and control the clock with bit-level precision.
B. Insertion of a single bit
The precise clock control described so far can be used to
insert a single bit on the bus. As described in the previous
section, simply disabling the clock is not sufﬁcient for the
adversary to relinquish bus control. It must be ensured that
the clock is disabled during a recessive transmission so that
the adversary can continue its attack at a later time (recall
that a recessive output does not inﬂuence the bus). Since
the adversary only has clock control at the middle of a bit,
the following steps are required to inject a single dominant
bit, assuming the compromised ECU is currently paused at
the recessive state: (1) enable clock a half-bit time before
recessive-to-dominant edge, (2) wait one bit time to enter
dominant bit, (3) wait another bit time to enter recessive bit,
and (4) pause clock a half bit-time after dominant-to-recessive
edge. Thus, the adversary must use such a pattern of bits within
its payload, i.e. a dominant bit between two recessive bits.
transmission by the victim,
However, this attack pattern introduces another unique chal-
lenge. As described earlier, the ECU reads bus state after
each transition. Thus, if the adversary stops its attack during
a dominant
the compromised
ECU will raise an error since it transmitted a recessive bit
(a stopping requirement for the adversary) but observed a
dominant transmission. This error will cause the attack ECU
to reset its transmission so we must investigate methods to
overcome this challenge as discussed below.
C. Causing an error on the victim
We now discuss how to exploit clock gating to induce just
a single error on a victim. Our goal is to trick the victim
into detecting an error in the transmission of its own frame,
causing its transmit error counter to increase. To achieve this,
induce an error after the victim wins
the adversary must
arbitration and becomes the sole transmitter. As detailed in
Sec. II, a node transmitting on the bus simultaneously checks
the bus for any bit errors. Thus, the adversary can simply
overwrite a victim’s recessive bit with a dominant bit using the
steps outlined in the previous section, tricking the victim into
201
source of feedback from the bus. Thus, we must identify some
invariant about the victim’s transmission for the adversary to
exploit. We borrow an insight from prior work [15] to target
the control ﬁelds, which often are static as data payloads do
not change length. Alternatively, the adversary could analyze
several frames prior to attack and target bits in the data payload
that remain static. However, as the stuff bits can vary, it is
preferable to use the initial control bits for attack.
D. Shutting down victims with CANnon
We now stitch together the components described above
to transition a victim into the bus-off state. To achieve the
shutdown attack against a speciﬁc victim ECU, the adversary
must cause enough errors to forcibly transition the victim into
a bus-off state. The goal here is to produce an attack that
operates as fast as possible. For now, we assume that victim
transmissions are periodic, which is often the case according to
prior work [21], and thus the period can be used to estimate
a victim ECU’s SOF bit transmission time. As depicted in
Fig. 8, the CANnon attack consists of two phases: a loading
phase, where the attacker prepares the attack, and a ﬁring
phase, where the error frames are generated.
thinking it caused the error. To successfully achieve this, there
are two practical challenges that the adversary must consider:
(1) it must account for the victim response, i.e. error ﬂag
transmission, and (2) it should identify bits in the victim frame
that can be reliably targeted.
Victim’s error response: When the adversary overwrites a
victim’s recessive bit with a dominant bit, the victim will
detect a bit error and immediately transmit an error frame.
Depending on the state of the victim’s error counter, this
error frame can be a series of six dominant or recessive bits.
However, as outlined in Sec. V-B, an adversary cannot stop
its attack during a victim’s dominant transmission. Thus, an
adversary cannot stop the attack if it expects the victim to
transmit an active (dominant) error ﬂag.
Fig. 7: Use timer ISR to convert a single logical-0 bit to a
6-bit error frame
To resolve this, the adversary can exploit their clock control
to expand a single dominant bit into a series of six additional
dominant bits, or an active-error ﬂag. To generate an active-
error ﬂag from a single dominant bit, we perform four steps
as depicted in Fig. 7:
1) With clock paused on a recessive bit, the adversary
resumes clock for one bit time (or until the next timer
interrupt).
2) After
the recessive-to-dominant edge,
the adversary
pauses clock so the compromised ECU holds dominant
state.
3) After ﬁve timer interrupts, the adversary resumes clock.
4) The compromised ECU’s output transitions from domi-
nant to recessive, and the adversary pauses the clock at
the next interrupt and is ready for the next attack.
By simultaneously transmitting the ﬂag as the victim trans-
mits its ﬂag, both ﬂags will overlap, and the compromised
ECU’s transition from dominant to recessive will occur when
the bus state is recessive due to the recessive end of the
error ﬂag. This approach enables the attacker to maintain an
error-free transmit state on the compromised ECU so it may
prepare for the next error injection. In scenarios where there
are multiple nodes on the bus, the length of the error frame
may be longer and thus the dominant duration by the attacker
should be adjusted accordingly.
Targeting victim frames: A challenge we face is determining
which bit to overwrite during a victim frame. Assuming that
the adversary can determine the starting point of the victim’s
transmission, identifying the location of general recessive bits
may be difﬁcult due to variations in the payload and stuff bits.
Recall that, during the paused clock state, an attacker has no
Fig. 8: Two-part approach to the CANnon attack
Loading the CANnon: To be able to transmit any arbitrary
signal on the bus, the CAN controller must ﬁrst win arbitration.
Since the adversary only controls the software and is unable
to modify the CAN controller, the compromised ECU’s FSM
should be in the same state (sole arbitration winner) before the
adversary can attempt to transmit arbitrary bits. Thus, in the
loading phase, the adversary aims to trick the compromised
ECU into thinking that it is allowed to transmit on the bus
as preparation for the ﬁring phase. To do this, the adversary
loads the attack frame (of a specially selected ID and payload)
into the CAN peripheral’s transmit buffer and waits for the
compromised ECU to win the bus. In this attack, the adversary
waits for completion of the arbitration phase and transmission
of the control bits, before pausing the clock during the ﬁrst
payload bit, which can be designed to be recessive. At this
point, the adversary is ready to start the ﬁring phase of the
attack while waiting for victim messages to appear on the bus.
the
adversary can set the arbitration ID of the attack frame to 0x0,
To ensure a quick transition into the ﬁring phase,
202
10000001Actual attacker outputISR will either:A.Enable clockB.Disable clockC.Do nothingTimer ISRInterrupts every CAN bit timeABCCCCABLoad attack frame into TX bufferPhase 1:LoadingCANnonPhase 2:Firing CANnon x32Wait for IFS to get bus accessTransmit arb. + ctrl. field and waitWait for target messageTransitionto dominantbitDisable clock for 6 bitsTransitionto recessivebitSOFArb. + Ctrl.ID = 0x000Data Payload0x5555.5555.5555.5555(Alternating 0’s and 1’s)CRC FieldACKEOFIFSgiving it highest priority on the bus. This ID ensures that the
compromised ECU wins control of the bus as soon as the bus
is idle. Then, to transition a victim into bus-off, the adversary
needs to inject a dominant bit 32 times using a single attack
frame. Thus, the data payload should be set to contain 64 bits
of data with a pattern of alternating 0’s and 1’s, or a payload
of 0x5555.5555.5555.5555. This payload gives the adversary
32 dominant bits to use for an attack and 32 recessive bits to
temporarily pause the attack between victim transmissions. An
additional beneﬁt is that having a consistent pattern simpliﬁes
the logic for the adversary.
It should be noted that a different attack payload can still
be utilized to achieve the same attack, albeit in a slightly sub-
optimal manner. Any deviation from a payload of alternating
dominant and recessive bits would require the attacker to
reload another attack frame before shutting down the ECU.
Firing the CANnon: In the ﬁring phase, the adversary utilizes
the strategy described earlier to convert a single dominant bit
into an active error ﬂag, which will overwrite the recessive bits
of the victim message. The adversary must wait for a victim
message to appear on the network by waiting for its next
periodic transmission that wins bus arbitration. The adversary
then overwrites its selected recessive bit, causing the victim
to detect an error and increment its error counter by 8. After
detection of the error, the victim will immediately attempt to
retransmit the failed frame. The adversary repeats this ﬁring
phase against 31 back-to-back victim retransmissions until