status, but lacks detailed information for understanding the leak-
age, especially for implicit information leaks. Also, it cannot cover
channels except storage channels. Thus, we also use the DFS path
construction framework to construct leakage paths in this analysis.
Explicit information leaks are relatively easy to understand and
PacketGuardian user can just use the taint propagation line numbers
in the tracking summary to analyze the leakage. The user can also
use the DFS path construction framework to construct the paths
just like the accept path construction in §6.2 with a change of the
analysis sink. However, in a protocol implementation the protocol
states are usually not directly leaked through explicit ﬂows to a
storage channel – more common leakage is implicit information
leaks as shown in recent vulnerability reports [18, 37].
394For implicit information leaks, as discussed in §3.2, even though
classic ones are generally considered of less value and commonly
excluded in taint analysis tool design [4, 17, 21, 25], attacker-
controlled implicit information leaks proposed by this paper are
highly-exploitable according to existing vulnerability reports for
practical protocol state leakage [18, 37]. Thus, our leakage path
analysis targets this special type of leaks, and a very important ben-
eﬁt of this is that this can largely reduce FPs, which is a critical
problem for implicit ﬂow analysis [28].
In this following part of this section, we describe how to use
the DFS path construction framework to ﬁnd leakage paths through
attacker-controlled implicit ﬂows.
Analysis sink check. In this analysis, we ﬁlter out the paths which
cannot reach the leakage sinks we deﬁned. For storage channels,
we can use the taint summary to check this, and for function sinks
and other statement sinks, a DFS process like in the accept path
analysis can be used to label function callees of interest, and discard
the path of no interest in the DFS path construction.
Constraint property check. In the path analysis, each constraint
is determined with a property of unrelated, valid low entropy, in-
valid low entropy, and high entropy. Since we target attacker-
controlled implicit information leaks, the constraint is of interest
only if it is tainted by both attacker-controlled data and the infor-
mation sources. If not, it is labeled as unrelated constraint. If re-
lated, we ﬁnd out the variables tainted by attacker-controlled data
va and those tainted by the information source vs respectively in
direct and indirect constraints. With exp in the constraint we can
ﬁgure out the comparison it does, and label the constraint as invalid
low entropy if the constraint requires va to be equal to vs, and as
valid low entropy if the requirement for va is to be non-equal to vs.
For both cases the constraint has low entropy, but for the former it
is unlikely to pass this check while for the latter it is very likely.
For all other cases, we label the constraint as high entropy.
If the path has an invalid low entropy constraint, it is considered
invalid and will be discarded. Otherwise, if it has a high entropy
constraint, it is considered important. For all other cases it is con-
sidered unimportant. Like in accept path analysis, we also check
the constraint conﬂicts and discard the paths with conﬂicts. For
this analysis, layered analysis mode can be very helpful since it
is usually hard to judge the entropy automatically. For example,
in the illustrative example the receive and send window ranges are
depending on dynamic protocol states and protocol design, mak-
ing automatic judgement difﬁcult. As shown in our evaluation
in §7, with tool users ﬁltering out paths with invalid low entropy
constraints which are labeled conservatively as high entropy ones,
ﬁnding practical vulnerabilities can be much more efﬁcient.
Leakage path candidate output. Each leak is categorized by the
high entropy constraints and the leakage sink, and by default Pack-
etGuardian does not present unrelated and valid low entropy con-
straints to the user. PacketGuardian users can also conﬁgure the
tool to output all constraints for more details. For an output path to
break the non-inference property [20] and cause leakage, the same
sink cannot be triggered for both true and false branches of a high-
entropy constraint under all conditions. To check this, for a leak-
age path p1 we ﬁrst ﬁnd all paths, say p2, sharing the same sink
with p1 but takes the opposite branch in the high-entropy constraint
cthigh in p1. Then, we check whether all constraints in p2 exclud-
ing cthigh are a subset of all other constraints in p1. If so, p1 is
considered invalid and won’t be included in the output.
7. EVALUATION
Following the design, we implemented the taint-based summa-
rizer and vulnerability analyzer in OCaml with roughly 15K and
2.8K lines of code respectively.
In this section, we evaluate the
tool’s effectiveness, accuracy, efﬁciency by applying it to 6 real
network protocol implementations, covering 4 different network
protocols. All experiments are run on a desktop computer with
a 2.60GHz 8-core Intel Xeon CPU and 128 GB memory.
Code bases. The ﬁrst code base we target is TCP in Linux ker-
nel version 3.15.8, and we denote it as TCP-Kernel. Different
from previous work which reported vulnerabilities in TCP code
base by manual inspection [38], our tool performs automated anal-
ysis, and outputs not only all existing ones but also 11 new highly-
exploitable ones. Besides TCP, we also choose two other famous
protocols in the Linux kernel, SCTP and DCCP, denoted as SCTP-
Kernel and DCCP-Kernel. Both of them are transport layer proto-
cols providing reliable message delivery like TCP but having dis-
tinct features to support other communication requirements.
Besides transport protocols, we also analyze an application layer
protocol, RTP, which is one of the most popular protocol for de-
livering audio and video over IP networks. We pick 3 different
popular libraries, oRTP 0.24.1, PJSIP 2.4, and VLC 2.2.0, all of
which implement RTP. In the following sections, we denote them
as RTP-oRTP, RTP-PJSIP, and RTP-VLC.
For all 6 cases, the analysis chooses the function handling in-
coming packets as the entry, which are listed in Table 3. The last
column shows the number of functions reachable from the entry
point, showing the complexity of the code bases.
7.1 Tool Effectiveness and Accuracy
Table 5 summarizes the vulnerability and accuracy result for all
6 code bases. Column 2 describes the type of accept path deﬁned
in the analysis task, which in our experiments we consider 2 types:
data and close, which means the analysis sink is to feed data to
upper layers and to close the channel respectively. We call them
inject-payload and close-channel accept paths in this section. Col-
umn 4–6 show the number of output paths, true positive (TP) num-
ber and false positive (FP) number. Here the ground truth is the
feasible paths among all accept paths before pruning, and since our
design is conservative in path pruning and ﬁltering, we do not have
any false negative (FN) cases for all 6 code bases. Column 3 shows
the path number without the path pruning described in §6.2. As
shown, our pruning reduces 42.6% output paths on average without
introducing FNs. Since this output will be analyzed by an analyst,
this pruning greatly reduces human efforts.
Column 7 shows the worst case number of packets needed for
one injection after the accept path analysis, which is Npkt deﬁned
earlier in §3. As shown, the Npkt for 3 Linux kernel code bases is at
least 107 for either inject-packet or close-channel cases, which are
unlikely to be exploitable in practice. Their protections solely rely
on a few “secret” protocol states unknown to the off-path attacker,
which are listed in the last column.
In contrast, the 3 code bases for RTP protocol show diverse re-
sults. RTP-oRTP and RTP-PJSIP only need 51 and 3 packets to
achieve injection, which are both easy to exploit in practice. But
for RTP-VLC 232 packets are needed, which is rather robust. All
3 code bases claim to follow RTP RFC 3550, but our result indi-
cates that even following the same design, their packet injection
robustness can be very different due to implementation differences.
For the code bases that do not have practical vulnerabilities in
accept path analysis, we proceed to the second analysis step —
protocol state leakage analysis. The Npkt after leveraging leak-
age are shown in the column 8. For TCP, both protocol state
rcv_nxt and snd_nxt/snd_una have high-entropy leakage,
and largely degrade the Npkt to only 64 and 32 for inject-payload
and close-channel cases respectively. Leakage for snd_nxt and
395Code base
TCP-Kernel
RTP-oRTP
RTP-PJSIP
RTP-VLC
SCTP-Kernel
DCCP-Kernel
Analysis entry function
tcp_rcv_established()
rtp_process_incoming_packet()
on_rx_rtp()
rtp_queue()
sctp_sf_eat_data_6_2()
sctp_sf_do_9_1_abort()
dccp_rcv_established()
Func #
1730
141
67
22
290
277
359
Table 3: Statistics for the 6 code bases in our evaluation.
Code base
Type
Path # w/o
Weak path output
Path TP #
FP #
TCP-Kernel
RTP-oRTP
RTP-PJSIP
RTP-VLC
SCTP-Kernel
Data
Close
Data
Data
Data
Data
Close
DCCP-Kernel Data/Close
pruning
64
40
21
1
32
12
5
2
#
9
1
15
1
8
5
2
1
9
1
10
1
4
4
2
1
0
0
5
0
4
1
0
0
w/o ﬁeld
w/o implicit ﬂow
Tool w/o features TP # FP #
4
501
0 N/A
0 N/A
4
4
w/o layered
w/ all above
w/o pointer analysis
0
0
FN #
Low-entropy #
0
4
4
0
0 (base line)
27
N/A
N/A
1336
14
Table 4: Evaluation of accumulative improvement using rcv_nxt
leakage in TCP-Kernel.
Pkt # needed for
injection w/ channel
state leakage
Protocol states
the strong checks
relying on
(32 + 32)
rcv_nxt, snd_nxt/una
32
N/A
N/A
232
232 + 2
32
rem_win
rcv_nxt
N/A
N/A
ssrc
my_vtag, base_tsn,
cumulative_tsn_ack_point
my_vtag, peer_vtag
dccps_gsr/swh/swl
Pkt #
32
needed for
injection
win1 × 2
( 2
232
51 *
32
win2 ) *
3
232 *
232 × 2
32
rem_win
231
48
2
231
48
2
seqno_win
seqno_win
Table 5: Summary of vulnerability analysis results. Number labeled with “*” indicates that it can be smaller under special channel conditions.
win1 and win2 is usually between 214 to 220, rem_win is less than 4096 by default, and seqno_win is 100 during default initialization.
snd_nxt/snd_una have been reported previously [38] by man-
ual discovery, and it is noteworthy that the snd_nxt/snd_una
leakage has already been strengthened after Linux kernel version
3.8 and thus the vulnerability no longer exists. However, using our
tool, we automatically ﬁnd 4 high-entropy leakage for rcv_nxt,
including the one reported before and 3 new ones. We validated
all of them through experiments and conﬁrm that they are indeed
exploitable. For snd_nxt/snd_una, even after the ﬁx, our tool
successfully reports 13 new ones and 7 of them are validated.
2
32
32
For inject-payload case in SCTP-Kernel, a low-entropy leakage
of my_vtag exists and also greatly reduces Npkt from 232 ×
rem_win to 232 + 2
rem_win . However, it is still a large number
and not exploitable in practice. For RTP-VLC, DCCP-Kernel and
close-channel case in SCTP-Kernel, no high-entropy leakage is