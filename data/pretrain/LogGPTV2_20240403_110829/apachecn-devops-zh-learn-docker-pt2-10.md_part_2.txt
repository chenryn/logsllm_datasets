执行以下命令查看内容:
```
$ cat memory.max_usage_in_bytes
13824000
```
因此，默认情况下，任何容器最多只能使用 13.18 兆内存。同样，可以在以下路径中找到 CPU 参数:
```
/sys/fs/cgroup/cpu/docker/41668be6e513e845150abd2dd95dd574591912a7fda
947f6744a0bfdb5cd9a85
```
传统上，Docker 在容器中只运行一个进程。通常，您会看到人们运行三个容器，分别是 PHP、NGINX 和 MySQL。然而，这是一个神话。您也可以在一个容器中运行所有三个进程。
Docker 将底层主机的许多方面与在没有根权限的容器中运行的应用隔离开来。然而，这种分离不如虚拟机那样强烈，虚拟机在虚拟机管理程序之上运行独立的操作系统实例，而不与底层操作系统共享内核。将具有不同安全配置文件的应用作为容器运行在同一台主机上并不是一个好主意，但是将不同的应用封装到容器化的应用中是有安全优势的，否则这些应用将直接运行在同一台主机上。
### 调试容器化应用
计算机程序(软件)有时不能像预期的那样运行。这是由于错误的代码或开发、测试和部署系统之间的环境变化造成的。Docker 容器技术通过容器化所有应用依赖关系，尽可能地消除了开发、测试和部署之间的环境问题。尽管如此，由于错误的代码或内核行为的变化，仍然可能存在异常，这需要调试。调试是软件工程世界中最复杂的过程之一，由于隔离技术，它在容器范例中变得更加复杂。在本节中，我们将学习一些技巧和诀窍，使用 Docker 固有的工具以及外部来源提供的工具来调试容器化的应用。
最初，Docker 社区中的许多人单独开发了自己的调试工具，但后来 Docker 开始支持本机工具，如`exec`、`top`、`logs`和`events`。在本节中，我们将深入探讨以下 Docker 工具:
*   `exec`
*   `ps`
*   `top`
*   `stats`
*   `events`
*   `logs`
*   `attach`
我们还将考虑调试一个`Dockerfile`。
## docker exec 命令
`docker exec`命令为用户提供了急需的帮助，用户正在部署自己的网络服务器或在后台运行其他应用。现在，不必登录来运行容器中的 SSH 守护程序。
1.  首先，创建一个 Docker 容器:
```
 $ sudo docker run --name trainingapp \ 
 training/webapp:latest 
 Unable to find image 
 'training/webapp:latest' locally
 latest: Pulling from training/webapp
 9dd97ef58ce9: Pull complete 
 a4c1b0cb7af7: Pull complete 
 Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d
 Status: Downloaded newer image for 
 training/webapp:latest
```
2.  接下来，运行`docker ps -a`命令获取容器标识:
```
      $ sudo docker ps -a
 a245253db38b training/webapp:latest 
 "python app.py"
```
3.  然后，运行`docker exec`命令登录容器:
```
 $ sudo docker exec -it a245253db38b bash
 root@a245253db38b:/opt/webapp#
```
4.  请注意，`docker exec`命令只能访问正在运行的容器，因此如果容器停止运行，那么您需要重新启动停止的容器才能继续。`docker exec`命令使用 Docker API 和 CLI 在目标容器中生成一个新的进程。因此，如果您在目标容器中运行`ps -aef`命令，它看起来像这样:
```
 # ps -aef
 UID PID PPID C STIME TTY TIME 
 CMD
 root 1 0 0 Nov 26 ? 00:00:53 
 python app.py
 root 45 0 0 18:11 ? 00:00:00 
 bash
 root 53 45 0 18:11 ? 00:00:00 
 ps -aef
```
这里，`python app.y`是已经在目标容器中运行的应用，`docker exec`命令已经在容器中添加了`bash`进程。如果您运行`kill -9 pid(45)`，您将自动退出容器。
如果你是一个热情的开发者，想要增强`exec`功能，可以参考[https://github.com/chris-rock/docker-exec](https://github.com/chris-rock/docker-exec)。
建议仅出于监控和诊断目的使用`docker exec`命令，我个人相信每个容器一个过程的概念，这是被广泛强调的最佳实践之一。
## Docker ps 命令
容器内可用的`docker ps`命令用于查看进程的状态。这类似于 Linux 环境中的标准`ps`命令，而不是我们在 Docker 主机上运行的命令。
该命令在 Docker 容器中运行:
```
root@5562f2f29417:/# ps -s
UID PID PENDING BLOCKED IGNORED CAUGHT STAT TTY TIME COMMAND
0 1 00000000 00010000 00380004 4b817efb Ss 
? 0:00 /bin/bash
0 33 00000000 00000000 00000000 73d3fef9 R+ ? 0:00 ps -s
root@5562f2f29417:/# ps -l
F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD
4 S 0 1 0 0 80 0 - 4541 wait ? 00:00:00 bash
root@5562f2f29417:/# ps -t
PID TTY STAT TIME COMMAND
 1 ? Ss 0:00 /bin/bash
 35 ? R+ 0:00 ps -t
root@5562f2f29417:/# ps -m
PID TTY TIME CMD
 1 ? 00:00:00 bash
 - - 00:00:00 -
 36 ? 00:00:00 ps
 - - 00:00:00 -
root@5562f2f29417:/# ps -a
PID TTY TIME CMD
 37 ? 00:00:00 ps 
```
使用`ps --help `或`ps --help `获取其他帮助文本。
## Docker 最高指挥部
您可以使用以下命令从 Docker 主机运行`top`命令:
```
docker top [OPTIONS] CONTAINER [ps OPTIONS]  
```
这给出了一个没有登录到容器的容器运行进程列表，如下所示:
```
$ sudo docker top a245253db38b
UID PID PPID C
STIME TTY TIME CMD
root 5232 3585 0
Mar22 ? 00:00:53 python app.py 
$ sudo docker top a245253db38b -aef
UID PID PPID C
STIME TTY TIME CMD
root 5232 3585 0
Mar22 ? 00:00:53 python app.py  
```
如果在 Docker 容器中运行，Docker `top`命令会提供有关 CPU、内存和交换使用的信息:
```
root@a245253db38b:/opt/webapp# top
top - 19:35:03 up 25 days, 15:50, 0 users, load average: 0.00, 0.01, 0.05
Tasks: 3 total, 1 running, 2 sleeping, 0 stopped, 0 zombie
%Cpu(s): 0.0%us, 0.0%sy, 0.0%ni, 99.9%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st
Mem: 1016292k total, 789812k used, 226480k free, 83280k buffers
Swap: 0k total, 0k used, 0k free, 521972k cached
PID USER PR NI VIRT RES SHR S %CPU %MEM 
TIME+ COMMAND
 1 root 20 0 44780 10m 1280 S 0.0 1.1 0:53.69 python
 62 root 20 0 18040 1944 1492 S 0.0 0.2 0:00.01 bash
 77 root 20 0 17208 1164 948 R 0.0 0.1 0:00.00 top  
```