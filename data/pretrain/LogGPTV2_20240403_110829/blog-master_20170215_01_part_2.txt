```  
\l+  
47 GB   
```  
5\. 主库执行检查点  
```  
checkpoint;  
```  
观察主备延迟，备库checkpoint进程，CPU 100%，维持了数十个小时。  
strace -p checkpoint观察到缓慢的close(xxx)。  
不过还好备库的checkpoint可以被startup打断，不会堵塞恢复。  
```
close(149466)                           = 0
close(137674)                           = 0
close(895987)                           = 0
--- SIGINT (Interrupt) @ 0 (0) ---
rt_sigreturn(0x7facea633e3c)            = 217400424
close(438148)                           = 0
close(541088)                           = 0
```
6\. 创建数据库(使用前面创建的模板库)  
```  
create database test with template tmp1;  
```  
耗时4分钟 。  
备库XLOG延迟360字节 。    
备库XLOG延迟平复时间  6分钟 。   
```  
备库startup进程strace跟踪，涉及大量文件操作，因为这个库涉及到的文件数有2252981个。    
lstat("base/16384/12976402", {st_mode=S_IFREG|0600, st_size=0, ...}) = 0  
open("base/16384/12976402", O_RDONLY)   = 12  
open("base/24795111/12976402", O_RDWR|O_CREAT|O_EXCL, 0600) = 13  
read(12, "", 65536)                     = 0  
close(13)                               = 0  
close(12)                               = 0  
lstat("base/16384/305700", {st_mode=S_IFREG|0600, st_size=8192, ...}) = 0  
open("base/16384/305700", O_RDONLY)     = 12  
open("base/24795111/305700", O_RDWR|O_CREAT|O_EXCL, 0600) = 13  
read(12, "\0\0\0\0\30p\234+\0\0\0\0000\0\360\37\360\37\4 \0\0\0\0b1\5\0\2\0\0\0"..., 65536) = 8192  
write(13, "\0\0\0\0\30p\234+\0\0\0\0000\0\360\37\360\37\4 \0\0\0\0b1\5\0\2\0\0\0"..., 8192) = 8192  
sync_file_range(0xd, 0, 0x2000, 0x2)    = 0  
read(12, "", 65536)                     = 0  
close(13)                               = 0  
close(12)                               = 0  
lstat("base/16384/639437", {st_mode=S_IFREG|0600, st_size=8192, ...}) = 0  
```  
7\. 删除单个schema   
```  
\c test  
drop schema s1 cascade;  
```  
耗时3秒 。  
备库XLOG延迟773字节 。    
备库XLOG延迟平复时间  27秒 。   
相差9倍的时间。所以你需要注意这一点。   
8\. 删除刚刚创建的数据库  
```  
drop database  test;  
```  
耗时1分钟 。  
备库XLOG延迟176字节 。    
备库XLOG延迟平复时间  30秒，实际上没有差别，因为drop database结束后，才产生XLOG，然后这笔XLOG还需要在备库apply，所以drop database实际上是没有延迟的 。   
### 优化  
1\. 修改操作系统打开文件限制  
```  
vi /etc/sysctl.conf  
fs.nr_open=10240000  
sysctl -p  
```  
```  
vi /etc/security/limits.conf  
* soft    nofile  10240000  
* hard    nofile  10240000  
```  
2\. 修改数据库打开文件限制  
```  
vi postgresql.conf  
max_files_per_process = 2048000  
```  
3\. 使用新的ulimit值，重启数据库  
通常退出Linux会话，重新登录即可  
```  
pg_ctl restart -m fast  
```  
4\. 备库关闭 fsync 将缩短至几乎0延迟  
在有多个备库的情况下，如果考虑性能，关闭某些备库的fsync也未尝不可。  
例如内存数据库voltdb，就是类似的。  
## 参考  
1\. man setrlimit  
```  
       RLIMIT_NOFILE  
              Specifies  a  value  one  greater  than the maximum file descriptor number that can be opened by this process.  Attempts (open(2), pipe(2), dup(2), etc.)  to exceed this limit yield the error EMFILE.  
              (Historically, this limit was named RLIMIT_OFILE on BSD.)  
```  
2\. kernel-doc/sysctl/fs.txt  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")