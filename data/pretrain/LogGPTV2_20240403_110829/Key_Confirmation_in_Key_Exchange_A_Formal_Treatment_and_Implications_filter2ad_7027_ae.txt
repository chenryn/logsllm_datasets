### Key Confirmation in TLS 1.3 Draft-10

We analyze the key confirmation properties of the TLS 1.3 draft-10 handshake, considering both mutual and unilateral authentication scenarios. The analysis focuses on the predicates `FullConf(S,C)`, `AlmostConf(C,S)`, and `KCIDbind`.

#### Mutual Authentication without Finished Messages

For the draft-10-nf-m (mutual authentication without finished messages), we can argue the following:

1. **FullConf(S,C)**: 
   - Each accepting server session with a non-corrupted partner receives a valid signature from an honest client over the hash of the transcript up to the `ClientCertificate` message.
   - This ensures that for each such server session, there exists a corresponding client session that has already accepted, shares the same transcript, and thus holds the same session identifier and derives the same session key.

2. **AlmostConf(C,S)**:
   - The signature sent within the `ServerCertificateVerify` message is computed over the hash of the transcript up to the `ServerCertificate` message, forming the key confirmation identifier (kcid).
   - For any accepting client session, there exists an honest server session sharing the same kcid.
   - Unique nonces ensure that no second honest client will send a `ClientCertificateVerify` message with a signature over a transcript containing the same kcid contents.
   - No server obtains a forged signature, and no hash collision occurs, ensuring that the server only accepts when receiving the correct `ClientCertificateVerify` message.

3. **KCIDbind**:
   - The first condition, that equal session identifiers imply equal key confirmation identifiers, follows from defining kcid as a prefix of sid.
   - The second condition is satisfied because sessions holding the same kcid derive the same key, as the kcid contains the transcript up to the `ServerCertificateVerify` message, which is signed by the client and cannot be forged or derived due to unique nonces and hashes.

Formally, for any efficient adversary \( A \) against full (S,C)-key confirmation, there exist efficient algorithms \( B_1 \) and \( B_2 \) such that:
\[
\Pr[\text{Exp}_{\text{draft-10-nf-m},A(n)}^{\text{FullConf}(S,C)} = 1] \leq \text{Adv}_{\text{EUF-CMA}}^{\text{Sig},B_2}
\]

#### Unilateral Authentication without Finished Messages

For the draft-10-nf-u (unilateral authentication without finished messages), we show that the `ServerCertificateVerify` message ensures that the sending server session has already accepted with the same session key.

1. **FullConf(C,S)**:
   - The `ServerCertificateVerify` message, together with the message itself, fully determines the key derivation.
   - When a client accepts, the (honest) server session sending the `ServerCertificateVerify` message has already accepted with the same session identifier and session key.

Formally, for any efficient adversary \( A \) against full (C,S)-key confirmation, there exist efficient algorithms \( B_1 \) and \( B_2 \) such that:
\[
\Pr[\text{Exp}_{\text{draft-10-nf-u},A(n)}^{\text{FullConf}(C,S)} = 1] \leq \text{Adv}_{\text{COLL}}^{H,B_1} + n_u \cdot \text{Adv}_{\text{EUF-CMA}}^{\text{Sig},B_2}
\]
where \( n_u \) is the maximum number of participating parties.

#### Mutual Authentication with Finished Messages

For the draft-10-m (mutual authentication with finished messages), the proof for key confirmation under mutual authentication in draft-10-nf carries over. The `ServerFinished` and `ClientFinished` messages do not affect the key derivation and can be treated as arbitrary bit-strings attached to the `ServerCertificateVerify` and `ClientCertificateVerify` messages.

Formally, for any efficient adversary \( A \) against full (S,C)-key confirmation and almost-full (C,S)-key confirmation, there exist efficient algorithms \( B_1 \) and \( B_2 \) such that:
\[
\Pr[\text{Exp}_{\text{draft-10-m},A(n)}^{\text{Pred}} = 1] \leq n_s \cdot 2^{-|\text{nonce}|} + \text{Adv}_{\text{COLL}}^{H,B_1} + n_u \cdot \text{Adv}_{\text{EUF-CMA}}^{\text{Sig},B_2}
\]
for \( \text{Pred} = \text{FullConf}(S,C) \) or \( \text{Pred} = \text{AlmostConf}(C,S) \), where \( n_s \) is the maximum number of sessions, and \( |\text{nonce}| = 256 \) is the bit-length of the nonces.

#### Unilateral Authentication with Finished Messages

For the draft-10-u (unilateral authentication with finished messages), the `ClientFinished` message changes the order of session key acceptance, making full (C,S)-key confirmation unachievable. However, almost-full (C,S)-key confirmation is still satisfied.

Formally, for any efficient adversary \( A \) against almost-full (C,S)-key confirmation, there exist efficient algorithms \( B_1 \) and \( B_2 \) such that:
\[
\Pr[\text{Exp}_{\text{draft-10-u},A(n)}^{\text{AlmostConf}(C,S)} = 1] \leq \text{Adv}_{\text{COLL}}^{H,B_1} + n_u \cdot \text{Adv}_{\text{EUF-CMA}}^{\text{Sig},B_2}
\]

### Generic Transform for Key Confirmation

We show that exchanging MACs over the session identifiers at the end of a key exchange protocol, as advised in [2, 1], provides the strongest form of key confirmation. This involves a key-refreshing step to generate fresh MAC keys and a new session key via a key derivation function (KDF).

Assumptions:
- KDF acts as a secure pseudorandom generator.
- The MAC scheme \( M = (KGen, MAC, Vf) \) is key-only unforgeable.

Theorem 5.1: Let KDF be a secure pseudorandom generator and \( (KGen, MAC, Vf) \) be a key-only unforgeable MAC scheme. If a key exchange protocol \( \Pi \) has Match security and key secrecy, then the transformation \( \Pi_{MAC} \) preserves these properties and satisfies full (S,C)-key confirmation and almost-full (C,S)-key confirmation. The protocol \( \Pi_{MAC} \) also provides the same authentication property as \( \Pi \).

Proof: Any security property of \( \Pi_{MAC} \) defined via the generic experiment can be perfectly simulated by an adversary \( A' \) playing the generic experiment against \( \Pi \). Adversary \( A' \) runs a black-box simulation of \( A \), always making a RevealKey query for any session that accepts and simulating the final steps of \( \Pi_{MAC} \) with the derived key, and otherwise relaying all oracle queries of \( A \) in \( \Pi_{MAC} \) to its oracles.