request) associated with the client_id.   
The URL “fbconnect://success#...” is just used for delivering data 
from the Facebook server to its official app. However, if this URL 
is  loaded  in  the  mobile  browser,  a  serious  attack  can  happen. 
More specifically, a malicious app on the device first registers this 
fbconnect://  scheme,  and  then  invokes  the  browser  to  load  a 
Dialog URL, in an attempt to request the sensitive data of another 
app (e.g., the TexasHoldem app) from the Facebook server. This 
can  be  easily  done  by  setting  client_id  in  the  URL  to  that  of 
TexasHoldem  because  an  app’s  client_id  is  public.  Also,  within 
the browser, the dialog may not even show up to alert the user, if 
it  is  already  in  the  logged-in  status.  As  a  result,  Facebook  will 
redirect  the  browser  to  “fbconnect://success#...”.    Unlike  the 
Facebook  app,  the  browser  treats  this  URL  as  a  scheme 
invocation,  and  therefore  will  trigger  the  scheme’s  handler  (i.e., 
the malicious app) with the URL as an argument. This exposes to 
the  malicious  app  the  victim’s  Facebook  secret  token  for  the 
TexasHoldem  app.  We  tested  the  attack  on  an  Android  device 
(Galaxy Tab 2) and confirmed that the malicious app can get the 
user’s access token, authorization code and other secrets. In this 
case, we can see that although the Facebook server is the sender 
of the scheme message, it cannot control which app to receive the 
message through the mobile browser. This is different from what 
happens  within  a  web  browser:  for  example,  if  a  script  from 
a.com sends a message to b.com through the postMessage API, it 
can specify the recipient domain and the browser then guarantees 
that  only  b.com  gets  the  message.  On  today’s  mobile  OS, 
however, there is no way that the Facebook server can specify the 
authorized  receiver  of  its  scheme  URL,  not  to  mention  any 
mechanism to enforce this security policy.   
Also  note  that  the  fbconnect  problem  here  is  present  on  both 
Android and iOS.  However, given that iOS malware is rare, the 
risk it poses is mainly to Android (see our adversary model).  
Vendor response. Without the OS support, this problem turns out 
to be even harder to fix than the next-intent issue. We reported it 
to  Facebook  on  Sept.  11,  2012.  On  Jan.  22,  2013,  Facebook 
security team told us that they took steps to “ensure that popular 
app stores block apps that attempt to register this URI schema”. 
Moreover, they were “crafting a formal deprecation plan for the 
fbconnect  schema”,  but  this  plan  needs  a  “several  month 
deprecation period” because “all of our embedded SDKs currently 
depend  upon  this  functionality”.  On  March  20,  2013,  Facebook 
informed  us  that  they  “crafted  a  plan  for  the  deprecation  of  the 
fbconnect schema in the next major release”. They expect to “see 
this  disappear  entirely  as  users  continue  to  upgrade”.  They 
awarded us a bounty of $1500 for this finding, which we donated 
to charity.  
3.3.2  Invoking Apps from the Web (Android and iOS) 
In this section, we elaborate a new security threat that comes from 
a malicious website the user visits with a mobile device. The root 
cause of the problem has been confirmed to exist on both Android 
and iOS. For the simplicity of presentation, here we just use iOS 
as an example to explain the problem.  
Mobile apps typically use their WebView instances to render web 
content.  Such  content  could  come  from  less  trustworthy  web 
sources, such as public posts on Facebook and restaurant reviews 
from the strangers on Yelp. In our research, we found that during 
such rendering of web content, whenever the WebView instance 
of  an  app  is  directed  by  the  content  to  a  URL  with  a  scheme 
registered  by  another  app  on  the  same  device,  the  latter  will  be 
automatically invoked, without being noticed by the user, and act 
on the parameters given by the URL. This is dangerous because 
the  app  receiving  the  scheme  message  which  carries  the  URL 
cannot  distinguish  whether  this  message  comes  from  the  sender 
app  itself  or  from  the  web  content  within  the  app’s  WebView 
instance,  which  causes  the  confusion  about  the  message’s  true 
origin.  Here  we  use  two  examples  to  show  the consequences of 
this confusion. 
Login  CSRF  attacks  on  Dropbox  iOS  SDK.  We  studied  the 
latest  version  (v.1.3.3)  of  Dropbox  iOS  SDK,  which  enables  a 
3rd-party  app  on  iOS  to  link  to  the  device  owner’s  Dropbox 
account,  using  Dropbox  as  the  app’s  storage.  Here,  we  use 
PlainText  [41],  a  popular  text-editing  app,  as  an  example  to 
explain what can go wrong, though apps using Dropbox iOS SDK 
are  all  vulnerable.  Specifically,  after  the  mobile  user  authorizes 
this  account  linking,  the  Dropbox  app  delivers  to  the  PlainText 
app  a  scheme  URL,  which  is  in  the  following  format:  db-
://1/connect?oauth_token&oauth_token_secret&uid. 
The URL includes 3 arguments, oauth_token, oauth_token_secret, 
and uid, which the PlainText app uses to communicate with the 
Dropbox  server  to  complete  the  account  linking.  However,  we 
found that the linking process can be exploited to launch a serious 
login  CSRF  attack,  without  any  malicious  app  running  on  the 
user’s device. Specifically, in our attack, the adversary uses the 3 
URL  arguments  collected  from  his  own  device  to  build  a  URL: 
db-://1/connect?oauth_token’&oauth_token_ secret’ & 
uid’, where oauth_token’, oauth_token _secret’, and uid’ are the 
adversary’s  Dropbox  credentials,  and  APP_ID  identifies  the 
PlainText  app.  The  attacker  shares  a  malicious  web  URL  (e.g. 
pointing  to  attacker.com)  on  his  Google  Plus  status  updates  or 
comments. Once the victim user clicks it within the Google Plus 
app on her device, attacker.com is loaded in the app’s WebView 
instance,  and  redirects  the  WebView  to  the  scheme  URL.  As  a 
result, the PlainText app is invoked with the URL as input. The 
app  treats  the  URL  as  part  of  the  scheme  message  from  the 
Google Plus app, without knowing that it actually comes from the 
639web  content  of  attacker.com  rendered  in  the  Google  Plus  app’s 
WebView.  It  is  then  unknowingly  linked  to  the  attacker's 
Dropbox  account.  When  this  happens,  the  app  automatically 
sends the user's text input to the attacker's account. A demo of this 
attack is posted online [31]. We also checked a few other popular 
iPad  apps  using  Dropbox  SDK,  including  TopNotes,  Nocs,  and 
Contacts Backup to Dropbox. They are all found vulnerable. 
Bypassing  Facebook’s  app  authentication  mechanism.  Many 
apps  using  Facebook  iOS  SDK,  such  as  Yelp  and  TripAdvisor, 
may  also  render  untrusted  web  contents  within  their  WebView 
instances.  Below we show that an attacker who posts a malicious 
link on Yelp can bypass an important mechanism Facebook uses 
to  authenticate  3rd-party  iOS  apps.  Specifically,  when  app  A 
invokes  the  Facebook  app  through  schemes  such  as  “fbauth://”, 
the  Facebook  app  sends  the  app  ID  specified  by  app  A  and  its 
bundle  ID  retrieved  from  the  OS  to  the  Facebook  server  for 
authentication.  This  prevents  app  A  from  impersonating  another 
app to communicate with the Facebook server because it cannot 
manipulate the bundle ID. However, this protection does not work 
when a malicious page is loaded to the WebView instance of the 
Yelp app because the Facebook app cannot distinguish whether an 
incoming scheme message is from the Yelp app or a webpage in 
its  WebView  (the  bundle  ID  from  the  OS  always  points  to  the 
Yelp app). Therefore, whoever posts a comment on Yelp acquires 
the same privilege as Yelp has on the victim’s Facebook account. 
Vendor  response.  We  reported  these  problems  to  Dropbox, 
Google, and Facebook. For the first problem (login CSRF through 
Dropbox  SDK),  Dropbox  started  its  investigation  immediately 
after receiving our report. They have implemented a fix that needs 
to  change  both  the  SDKs  and  the  Dropbox  official  apps  on  all 
platforms  (including  Android  and  iOS).  Facebook  mitigated  the 
threat by deploying a whitelist inside the WebView instance of its 
official  app,  which  only  allows  http,  https,  and  ftp  schemes. 
Google has not taken any actions so far [31]. Facebook awarded 
us  $1000  for  this  finding.  We  also  reported  to  Facebook  the 
second case (bypassing its app authentication mechanism on iOS), 
which is still under investigation. 
3.4  Attacks on Web-Accessing Utility Classes 
As  shown  in  ,  besides  intent  and  scheme,  origins  can  also  be 
crossed on a mobile OS when an app directly calls the methods of 
the WebView/HttpClient classes or registers their callback events. 
Here we show how this channel can be abused.  
3.4.1  Exploiting Callbacks (iOS) 
On  iOS,  we  studied  a  WebView  callback  method  the  Facebook 
app  registers,  shouldStartLoadWithRequest,  which  is  triggered 
each time the app’s WebView instance is navigated to a link.  If 
this  link  is  in  the  form  “fbrpc://appID=xyz&foo=123”,    the 
callback  method  (provided  by  Facebook)  creates  a  new  URL 
“fbxyz://foo=123” to invoke an app with the appID “xyz” and set 
its input argument to “123”. Note that this operation is different 
from the scheme-based invocation (from a web domain) described 
in Section 3.3.2, as in that case, a website directly runs a URL to 
invoke  the  target  app  on  the  mobile  device  (the  sender  of  the 
scheme  message  is  the  website),  while  here  such  a  URL  is 
actually created by the callback method, which is implemented by 
the Facebook app (the sender is the Facebook app). 
This mechanism can be exploited when a malicious link such as 
attacker.com  is  clicked  by  the  user  through  her  Facebook  app. 
When this happens, the malicious content loaded to the WebView 
instance  redirects  to  the  fbrpc  URL.  Then  the  callback  of  the 
Facebook app generates a new scheme URL to launch any app the 
adversary wants to run on the victim’s device with any argument 
value he sets. For example, we found that in this way, a popular 
app Pinterest can be activated by the adversary to sign onto the 
adversary’s  account  on  the  victim’s  device,  so  as  to  dump  the 
user’s data with Pinterest into the adversary’s account.  
3.4.2  Exploiting Header-attachment  (Android) 
We  also  studied  the  HttpClient  class, which is used by Android 
apps  for  direct  HTTP  communications  with  web  servers. 
HttpClient allows a developer to specify the URL of a request and 
an  HTTP  header.  The  header  is  attached  to  the  request.  In  the 
absence of origin-based protection, any header, including the one 
used for authentication, can be attached to a request sent to any 
website.  A  prominent  example  is  the  attack  case  described  in 
Section 3.2.1: the adversary invokes the Dropbox app’s Activity 
VideoPlayerActivity, which utilizes an HttpClient instance to load 
metadata  from  a  URL  with  the  user’s  authentication  header 
attached. Since the URL is manipulated by the adversary to point 
to attacker.com, without origin checks, the authentication header 
goes to the adversary.  
Note that this header-attachment issue by itself is a security flaw, 
as  admitted  by  the  Dropbox  security  team  (“Attaching  the 
Authorization  header  to  non-Dropbox  URLs  was  definitely  a 
serious security bug” [31]).  Actually the attack on a phone user’s 
Dropbox account as described in Section 3.2.1 is built upon two 
security flaws, i.e., the next-intent and header-attachment issue. 
4.  ORIGIN-BASED DEFENSE 
As  described  in  the  prior  section,  unlike  web  browsers,  today’s 
mobile OSes (i.e., Android and iOS) do not offer origin protection 
to the channels used by apps to communicate with each other or 
the  web.  As  a  result,  cross-origin  interactions  on  those  systems 
can be easily abused to undermine the user’s security and privacy, 
which  even  happens  to  highly  popular  apps  built  by  security-
savvy  developers.  Moreover,  even  after  the  problems  were 
reported, the developers still had hard time in fixing them. This 
makes us believe that a generic solution to the problem should be 
built into mobile OSes, which have the observations of messages’ 
origins, and the means to mediate the communication over those 
channels.    In  this  section,  we  elaborate  the  first  design  for such 
protection,  called  Morbs  (mobile  origin  based  security),  and  its 
implementation on Android. We released the source code of the 
Android implementation on GitHub [40]. 
4.1  Design 
Overview. Morbs is generic to iOS and Android. It is designed to 
achieve  browser-like  origin  protection:  1)  it  exposes  to  the 
developers  the  true  origins  of  the  messages  their  apps/websites 
receive,  enabling  them  to  build  protections  based  on  such 
information; 2) it allows the developers to specify their intentions, 
in  the  form  of  whitelists  of  origins  their  apps/websites  can  get 
messages  from  and  send  messages  to,  and  enforces  policies 
transparently within the OS.  
More  specifically,  an  app  or  a  web  service  that  asks  for  origin 
protection first communicates its intended sender/recipient origins 
(the  whitelists)  to  the  OS.  These  policies  are  enforced  by  a 
reference  monitor  that  mediates  different  mobile  channels.    The 
reference monitor is triggered by the messages delivered through 
these  channels.  Once  invoked,  it  identifies  the  origins  of  the 
messages, which are either apps or web domains, and checks their 
640for 
for  example,  “app://com.facebook.katana” 
policy  compliance  against  the  whitelists.  Those  running  against 
the policies are blocked by Morbs.   
A  unique  feature  of  Morbs  is  its  capability  to  connect  web 
activities  (within  WebView  instances  or  the  mobile  browser)  to 
the events that happen within the OS.  For example, it exposes the 
true origin of a message to a recipient app when confusion arises 
on  whether  the  message  comes  from  another  app  or  the  web 
domain  visited  by  that  app’s  WebView  instance.  It  also  helps  a 
web  server  specify  to  a  mobile  device  a  designate  app  on  the 
device  that  can  receive  the  server’s  scheme  message.  This 
capability is crucial for defeating unauthorized origin crossing on 
mobile devices. Following we elaborate our design. 
Defining mobile origin. For web content, an origin is defined as 
a  combination  of  scheme,  host  name,  and  port  number  [4]. 
However, this definition is insufficient for the origin protection on 
mobile platforms: here we need to consider not only web origins 
but  also  app  identities  and  other  local  origins.    To  maintain  the 
consistency  with  the  web  origins,  we  adopted  a  URL-like 
representation  for  those  new  origins,  such  as  “app://”,  
where  is an app’s package name (Android) or bundle ID 
(iOS), 
the 
Facebook  app  on  Android  and  “app://com.getdropbox.Dropbox” 
for  the  Dropbox  app  on  iOS.  Likewise,  messages  from  trusted 
sources  like  the  OS  are  given  a  local  origin  “local://”.  For  web 
domains, we adhere to the traditional origin definition [4]. 
Exposing origins. When a message is created by an app/website, 
Morbs  sets  the  origin  attribute  (added  by  our  approach)  of  the 
message to its creator (i.e., an app, a web domain, or local). This 
attribute always goes with the message within the OS, until it gets 
to  its  recipient  app/website,  where  we  remove  the  attribute.  To 
help developers build their own protection, our design exposes the 
origin of a message through existing and new APIs. For example, 
on iOS, we can enhance the API for retrieving the bundle ID of 
the sender of a scheme message by returning the true origin of the 
message,  which  could  be  the  domain  of  the  web  content  within 
that app’s WebView instance. In this way, Facebook will be able 
to  find  out  that  the  scheme  message  it  gets  from  the  Yelp  app 
actually comes from a webpage Yelp displays, not the app itself. 
Therefore, the exploit described in Section 3.3.2 will be defeated. 
Default  policy.  It  is  well  known  that  the  browser  by  default 
enforces the SOP to the web content it hosts, but the same policy 
cannot be applied to all the apps on mobile platforms as it may 
disrupt their legitimate cross-origin communications. Our strategy 
is  to  implement  the  SOP  only  on  the  totally  unexpected  and 
insecure  channel.  An  example  is  the  next-intent  communication 
described in Section 3.2.1, which is unexpected, since the private 
Activity of an app should only be invoked by the app’s own intent 
when calling the startActivity API. Therefore, in this scenario, the 
SOP is always enforced.  
Setting  policies.  Morbs  allows  a  policy  to  be  specified  on  a 
channel between an app and a web domain (web policy), as well 
as  between  two  apps  (app  policy).  An  app  policy  defines 
legitimate inter-app communication, which goes through intent or 
scheme.  A  web  policy  is  about  app-web  interactions,  through 