# Windows内核对象管理全景解析完结篇
##### 译文声明
本文为翻译文章，具体内容及含义以原文为准。

## 引言
在前一篇文章《Windows内核对象管理全景解析前奏》中，我们详细探讨了Windows内核对象管理的基础知识。然而，仅凭这些基础知识还不足以形成完整的知识体系。本篇文章旨在进一步深化读者对内核对象管理的理解，构建一个全面的知识框架，从而更好地把握其核心本质。

涉及的知识点包括：
1. Windows内核对象；
2. Windows内核对象管理；
3. Windbg内核调试；
4. Windbg的常规使用。

## 一、借助工具宏观了解内核对象

是否有现成工具可供浏览当前系统中存在的内核对象？理想情况下，这样的工具应具备类似于文件资源管理器的目录层次结构。答案是肯定的，并且不止一种，其中微软官方提供了一个名为WinObj.exe的图形界面工具。运行此工具时需具备管理员权限，以下是其运行效果简述：

- 根对象“\”代表所有其他内核对象的起点，类似于Linux中的根目录。
- “\”下的层次结构显示了其他同级内核对象。
- 右侧则展示了该目录下的具体对象。这里提到的“目录”实际上是指内核中的一个特殊对象类型，用于管理其他对象。这与前文中提到的Windows内核模仿文件系统来组织内核对象的概念相吻合。

那么，WinObj.exe是如何获取这些内核对象信息的呢？它调用了哪些API？这些API又是通过查询什么数据结构实现这一功能的？这些问题将在后续部分解答。接下来，我们将介绍另一种工具——Windbg，看看它是如何呈现这些信息的。

尽管Windbg提供的数据显示不如WinObj.exe直观，但它更侧重于揭示底层机制。为了深入理解内核对象管理，我们需要脱离这些辅助工具，手动遍历所有内核对象。

## 二、内核对象管理的基础架构

让我们从内核对象类型数组入手，选取一个有趣的类型进行分析。例如，“Directory”类型的对象，其主要职责是管理其他“Directory”对象或其他如“Process”、“Thread”等类型的对象。现在，我们来仔细剖析这个类型对象。

```kd> dt nt!_OBJECT_DIRECTORY
+0x000 HashBuckets : [37] Ptr32 _OBJECT_DIRECTORY_ENTRY
+0x094 Lock        : _EX_PUSH_LOCK
+0x098 DeviceMap   : Ptr32 _DEVICE_MAP
+0x09c SessionId   : Uint4B
+0x0a0 NamespaceEntry : Ptr32 Void
+0x0a4 Flags       : Uint4B
```

上述结构体中最关键的部分是`_OBJECT_DIRECTORY_ENTRY`数组。尽管该数组只有37个元素，但这并不意味着超过这个数量的对象无法被管理。实际上，每个条目都是一个单向链表节点，指向下一个`_OBJECT_DIRECTORY_ENTRY`，同时包含指向实际对象的指针以及哈希值。这种设计允许快速查找特定对象，但请注意，哈希值并不是唯一的标识符，在最终确认对象身份时还需结合名称比较。

接下来，我们将简要说明Windows创建内核对象的过程，特别是线程对象的创建流程。PspAllocateThread()函数内部调用ObCreateObject()来完成这一任务。而ObpObjectTypes[6]则对应着线程类型对象。值得注意的是，操作系统并未保证nt!ObpObjectTypes[6]始终代表线程对象，因此直接访问索引6可能不够安全。

最后一步是在全局目录中插入新创建的对象。NtCreateThread调用PspInsertThread()，后者又会触发ObInsertObjectEx()和ObpCreateHandle()等一系列操作，最终将新对象添加到句柄表并链接至全局目录。

## 三、内核对象管理的核心——ObpRootDirectoryObject

上一节提到了一个重要的全局变量ObpRootDirectoryObject。通过调试命令可以查看其具体内容：

```kd> dd ObpRootDirectoryObject l1
83f81a88 a8605ed0
kd> dt nt!_OBJECT_HEADER a8605ed0-18
...
```

结果显示，这是一个根目录对象（TypeIndex=3），并且带有名称信息（InfoMask=2）。进一步查看其Body部分，则可发现其类型为_OBJECT_DIRECTORY。这意味着整个内核对象管理体系均以此为核心展开。

通过对上述内容的学习，我们不仅能够掌握Windows内核对象管理的基本原理，还能深入了解其实现细节，为今后的研究打下坚实基础。