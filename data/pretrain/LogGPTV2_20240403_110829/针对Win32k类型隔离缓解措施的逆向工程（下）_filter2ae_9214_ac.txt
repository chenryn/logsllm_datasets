    .text:00000001C002DD6D                 jnz     short loc_1C002DD3F
随后，SURFACE的地址需要映射到表示RTL_BITMAP中的位索引上。为了获得相应的位索引，首先获取了view_index（也就是这个SURFACE对象所在的0x1000字节视图的位置），然后进行如下计算：view_index
* 6 + index_within_view。
    .text:00000001C002DD72                 mov     eax, ebp        ; eax = lo_dword(SURFACE)
    .text:00000001C002DD74                 xor     ecx, [r14+8]    ; ecx = lo_dword(xor_key) ^ lo_dword(xored_view)
    .text:00000001C002DD78                 sub     eax, ecx        ; eax = lo_dword(SURFACE) - lo_dword(view)
    .text:00000001C002DD7A                 mov     rcx, [r14+18h]  ; rcx = CSectionBitmapAllocator->xored_rtl_bitmap
    .text:00000001C002DD7E                 shr     eax, 0Ch        ; eax /= 0x1000 == view_index
    .text:00000001C002DD81                 xor     rcx, r8         ; BitMapHeader = xored_rtl_bitmap ^ xor_key
    .text:00000001C002DD84                 lea     eax, [rax+rax*2]
    .text:00000001C002DD87                 lea     edx, [r15+rax*2] ; BitNumber = view_index * 6 + index_within_view
    .text:00000001C002DD8B                 call    cs:__imp_RtlTestBit
    .text:00000001C002DD91                 test    al, al
    .text:00000001C002DD93                 jz      short loc_1C002DD3F ; bit is turned off?
在计算过程中，位索引值会由nt!RtlTestBit()函数进行检查，如果被设置为1，那么执行流会继续进行下面的代码。如下所示，会调用CSectionBitmapAllocator::ContainsAllocation()（但该函数返回的布尔值并不会被检查），然后通过调用nt!RtlClearBit()来清除RTL_BITMAP中的相应位。最后，通过调用memset()来清空已经释放的SURFACE头部内存，并将空闲位的位索引保存为bitmap_hint_index，以便后面的操作能够更有效率。
    .text:00000001C002DDA9                 mov     rdx, rbp        ; rdx = SURFACE header
    .text:00000001C002DDAC                 mov     rcx, r14        ; rcx = bitmap_allocator
    .text:00000001C002DDAF                 call    NSInstrumentation::CSectionBitmapAllocator::ContainsAllocation(void const *)
    .text:00000001C002DDB4                 mov     ecx, [r14+8]    ; ecx = CSectionBitmapAllocator->xored_view
    .text:00000001C002DDB8                 mov     eax, ebp        ; [!] return value from ContainsAllocation() is not checked
    .text:00000001C002DDBA                 xor     ecx, [r14+10h]  ; CSectionBitmapAllocator->xored_view ^ CSectionBitmapAllocator->xor_key
    .text:00000001C002DDBE                 sub     eax, ecx        ; eax = lo_dword(SURFACE) - lo_dword(view)
    .text:00000001C002DDC0                 mov     rcx, [r14+18h]  ; rcx = CSectionBitmapAllocator->xored_rtl_bitmap
    .text:00000001C002DDC4                 xor     rcx, [r14+10h]  ; BitMapHeader = xored_rtl_bitmap ^ xor_key
    .text:00000001C002DDC8                 shr     eax, 0Ch        ; eax /= 0x1000 == view_index
    .text:00000001C002DDCB                 lea     eax, [rax+rax*2]
    .text:00000001C002DDCE                 lea     esi, [r15+rax*2]
    .text:00000001C002DDD2                 mov     edx, esi        ; BitNumber = view_index * 6 + index_within_view
    .text:00000001C002DDD4                 call    cs:__imp_RtlClearBit ; mark the slot as available
    .text:00000001C002DDDA                 xor     edx, edx        ; Val
    .text:00000001C002DDDC                 mov     r8d, 280h       ; Size
    .text:00000001C002DDE2                 mov     rcx, rbp        ; Dst
    .text:00000001C002DDE5                 call    memset          ; null-out the freed SURFACE header in the view
    .text:00000001C002DDEA                 xor     edx, edx
    .text:00000001C002DDEC                 mov     [r14+20h], esi  ; bitmap_allocator->bitmap_hint_index = index of freed slot
###  4.5 WinDBG扩展
在对Win32k类型隔离的逆向工程中，我开发了一个WinDBG的扩展，来帮助我们将类型隔离的结构状态转储出来。该扩展可以从这里下载：
。  
WinDBG扩展中，提供了以下命令：  
!gptypeisolation [address]：打印最高级CTypeIsolation结构（默认地址：
win32kbase!gpTypeIsolation）。  
!typeisolation [address]：打印一个NSInstrumentation::CTypeIsolation结构。  
!sectionentry [address]：打印一个NSInstrumentation::CSectionEntry结构。  
!sectionbitmapallocator
[address]：打印一个NSInstrumentation::CSectionBitmapAllocator结构。  
!rtlbitmap [address]：打印一个RTL_BITMAP结构。  
该扩展的输出中，有一些可以点击的链接，可以帮助我们跟踪类型隔离的数据结构。此外，它还会对异或后的指针进行解码，为我们省去了一个步骤。下面的代码片段展示了在转储全局CTypeIsolation对象时TypeIsolationDbg的输出，跟随单个CSectionEntry的数据结构，直到代表CSectionEntry中内容忙/闲状态的位映射：
    kd> !gptypeisolation
    win32kbase!gpTypeIsolation is at address 0xffffe6cf95138a98.
    Pointer [1] stored at win32kbase!gpTypeIsolation: 0xffffe6a4400006b0.
    Pointer [2]: 0xffffe6a440000680.
    NSInstrumentation::CTypeIsolation
          +0x000 next                                : 0xffffe6a440000620
          +0x008 previous                            : 0xffffe6a441d8ca20
          +0x010 pushlock                            : 0xffffe6a440000660
          +0x018 size                                : 0xF00 [number of section entries: 0x10]
    kd> !sectionentry ffffe6a440000620
    NSInstrumentation::CSectionEntry
          +0x000 next                                : 0xffffe6a441ca2470
          +0x008 previous                            : 0xffffe6a440000680
          +0x010 section                             : 0xffff86855f09f260
          +0x018 view                                : 0xffffe6a4403a0000
          +0x020 bitmap_allocator                    : 0xffffe6a4400005e0
    kd> !sectionbitmapallocator ffffe6a4400005e0
    NSInstrumentation::CSectionBitmapAllocator
          +0x000 pushlock                            : 0xffffe6a4400005c0
          +0x008 xored_view                          : 0xa410b31c3f332f4c [decoded: 0xffffe6a4403a0000]
          +0x010 xor_key                             : 0x5bef55b87f092f4c
          +0x018 xored_rtl_bitmap                    : 0xa410b31c3f092acc [decoded: 0xffffe6a440000580]
          +0x020 bitmap_hint_index                   : 0xC0
          +0x024 num_commited_views                  : 0x27
    kd> !rtlbitmap ffffe6a440000580
    RTL_BITMAP
          +0x000 size                                : 0xF0
          +0x008 bitmap_buffer                       : 0xffffe6a440000590
    kd> dyb ffffe6a440000590 L20
                       76543210 76543210 76543210 76543210
                       -------- -------- -------- --------    ffffe6a4`40000590  00000101 00000000 00000110 10110000  05 00 06 b0
    ffffe6a4`40000594  00011100 10000000 11011011 11110110  1c 80 db f6
    ffffe6a4`40000598  01111101 11111111 11111111 11111111  7d ff ff ff
    ffffe6a4`4000059c  11111111 11011111 11110111 01111111  ff df f7 7f
    ffffe6a4`400005a0  11111111 11111111 11111111 01111111  ff ff ff 7f
    ffffe6a4`400005a4  11111101 11111001 11111111 01101111  fd f9 ff 6f
    ffffe6a4`400005a8  11111110 11111111 11111111 11111111  fe ff ff ff
    ffffe6a4`400005ac  11111111 00000011 00000000 00000000  ff 03 00 00
###  4.6 总结
在Windows 10 1709的Win32k组件中实现的类型隔离缓解措施，调整了GDI
Bitmap对象在内核空间中的分配方式：SURFACE头部在Section视图上分配，而像素数据缓冲区则在PagedPoolSession池上分配。这样一来，由于像素数据缓冲区的末尾不再紧跟着下一个SURFACE对象的头部，因此就无法实现相邻Bitmap的定向喷射，所以无法再利用Bitmaps作为有限的内存损坏漏洞利用目标。  
在此之后，攻击者已经开始聚焦于其他可以利用的内核对象，例如Palettes。详情请参考：  
值得一提的是，CSectionBitmapAllocator对象既保留了指向Section视图的指针，又同时保留了异或操作混淆后的RTL_BITMAP指针。然而，父CSectionEntry结构会保持与视图相同的指针。
## 五、致谢
非常感谢Quarkslab的同事们对这篇文章进行校对，并提出了反馈意见。
## 六、参考文章
[1]   
[2]   
[3]   
[4]   
[5]   
[6]
[7] 
原文链接：