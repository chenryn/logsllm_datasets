        ZEND_PARSE_PARAMETERS_START(2, 3)
            Z_PARAM_STR(haystack)
            Z_PARAM_ZVAL(needle)
            Z_PARAM_OPTIONAL
            Z_PARAM_LONG(offset)
        ZEND_PARSE_PARAMETERS_END();
        if (offset  ZSTR_LEN(haystack)) {
            php_error_docref(NULL, E_WARNING, "Offset not contained in string");
            RETURN_FALSE;
        }
        if (Z_TYPE_P(needle) == IS_STRING) {
            if (!Z_STRLEN_P(needle)) {
                php_error_docref(NULL, E_WARNING, "Empty needle");
                RETURN_FALSE;
            }
            found = (char*)php_memnstr(ZSTR_VAL(haystack) + offset,
                                Z_STRVAL_P(needle),
                                Z_STRLEN_P(needle),
                                ZSTR_VAL(haystack) + ZSTR_LEN(haystack));
        } else {
            if (php_needle_char(needle, needle_char) != SUCCESS) {
                RETURN_FALSE;
            }
            needle_char[1] = 0;
            php_error_docref(NULL, E_DEPRECATED,
                "Non-string needles will be interpreted as strings in the future. " \
                "Use an explicit chr() call to preserve the current behavior");
            found = (char*)php_memnstr(ZSTR_VAL(haystack) + offset,
                                needle_char,
                                1,
                                ZSTR_VAL(haystack) + ZSTR_LEN(haystack));
        }
        if (found) {
            RETURN_LONG(found - ZSTR_VAL(haystack));
        } else {
            RETURN_FALSE;
        }
    }
其中第三个参数`offset`指从字符串的第几位开始，默认是0，主要是调用`php_memnstr`进行搜素匹配，其为函数`zend_memnstr`的宏定义:
    static inline const char * zend_memnstr(const char *haystack /*目标符串*/,
                            const char *needle/*预查找字符串*/, int needle_len, char *end){
        const char *p = haystack;//目标字符串首指针
        const char ne = needle[needle_len-1];//预查找字符串的最后一个字符
        if(needle_len == 1){//所查找的字符串是一个字符,则使用系统函数memchr
            return (char *)memchr(p, *needle, (end-p));
        }
        if(needle_len > end-haystack){//所查找的字符串比目标字符串还长,则无需查找,直接返回找不着
            return NULL;
        }
        end -= needle_len;//其实只要查找到end-neele_len位置就可以了
        while(p 功能 ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。  
>  定义 ：void parse_str( string `$encoded_string` [, array &$result ] )  
>  如果 encoded_string 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了
> result 则会设置到该数组里 ）。  
>  8.0.0 result 是必须项。  
>  7.2.0 不带第二个参数的情况下使用 parse_str() 会产生 **E_DEPRECATED 警告**
也就是说，该函数将字符串赋值式中的字符串解析为变量，值为该变量的值，并且不会检验变量是否已经存在，如果存在也会将其覆盖，变量覆盖的相关漏洞也很常见了，这里不再谈论变量覆盖的利用问题，而是先从底层开始分析，再看从底层能够发掘出什么样的问题,注意从PHP7.2开始不使用第二个参数会出现警告，但是不影响程序执行
    PHP_FUNCTION(parse_str)
    {
        char *arg;
        zval *arrayArg = NULL;
        char *res = NULL;
        size_t arglen;
        ZEND_PARSE_PARAMETERS_START(1, 2)
            Z_PARAM_STRING(arg, arglen)
            Z_PARAM_OPTIONAL
            Z_PARAM_ZVAL(arrayArg)
        ZEND_PARSE_PARAMETERS_END();
        res = estrndup(arg, arglen);
        if (arrayArg == NULL) {
            zval tmp;
            zend_array *symbol_table;
            if (zend_forbid_dynamic_call("parse_str() with a single argument") == FAILURE) {
                efree(res);
                return;
            }
            php_error_docref(NULL, E_DEPRECATED, "Calling parse_str() without the result argument is deprecated");
            symbol_table = zend_rebuild_symbol_table();
            ZVAL_ARR(&tmp, symbol_table);
            sapi_module.treat_data(PARSE_STRING, res, &tmp);
            if (UNEXPECTED(zend_hash_del(symbol_table, ZSTR_KNOWN(ZEND_STR_THIS)) == SUCCESS)) {
                zend_throw_error(NULL, "Cannot re-assign $this");
            }
        } else     {
            arrayArg = zend_try_array_init(arrayArg);
            if (!arrayArg) {
                efree(res);
                return;
            }
            sapi_module.treat_data(PARSE_STRING, res, arrayArg);
        }
    }
    /* }}} */
在这里可以发现，无论是有没有第二个参数，最终都是调用`sapi_module.treat_data处理数据`,而在PHP中`$_GET、$_COOKIE、$_SERVER、$_ENV、$_FILES、$_REQUEST`这六个变量都是通过如下的调用序列进行初始化。
    [main() -> php_request_startup() -> php_hash_environment() ]
在请求初始化时，通过调用 php_hash_environment
函数初始化以上的六个预定义的变量。如下所示为`php_hash_environment函数`的部分代码（考虑到篇幅问题）
    ...
    for (p=PG(variables_order); p && *p; p++) {
        switch(*p) {
                case 'p':
                case 'P':
                        if (!_gpc_flags[0] && !SG(headers_sent) && SG(request_info).request_method && !strcasecmp(SG(request_info).request_method, "POST")) {
                                sapi_module.treat_data(PARSE_POST, NULL, NULL TSRMLS_CC);   /* POST Data */
                                _gpc_flags[0] = 1;
                                if (PG(register_globals)) {
                                        php_autoglobal_merge(&EG(symbol_table), Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_POST]) TSRMLS_CC);
                                }
                        }
                        break;
                case 'c':
                case 'C':
                        if (!_gpc_flags[1]) {
                                sapi_module.treat_data(PARSE_COOKIE, NULL, NULL TSRMLS_CC); /* Cookie Data */
                                _gpc_flags[1] = 1;
                                if (PG(register_globals)) {
                                        php_autoglobal_merge(&EG(symbol_table), Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_COOKIE]) TSRMLS_CC);
                                }
                        }
                        break;
                case 'g':
                case 'G':
                        if (!_gpc_flags[2]) {
                                sapi_module.treat_data(PARSE_GET, NULL, NULL TSRMLS_CC);    /* GET Data */
                                _gpc_flags[2] = 1;
                                if (PG(register_globals)) {
                                        php_autoglobal_merge(&EG(symbol_table), Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_GET]) TSRMLS_CC);
                                }
                        }
                        break;
    ...
可以看到，在`$_POST,$_GET`等变量的解析中，同样是调用`sapi_module.treat_data`进行数据的处理，treat_data是属于sapi_module_struct中的一个成员，定位到`main/php_variables.c`
    if (arg == PARSE_GET) {        /* GET data */
            c_var = SG(request_info).query_string;
            if (c_var && *c_var) {
                res = (char *) estrdup(c_var);
                free_buffer = 1;
            } else {
                free_buffer = 0;
            }
        } else if (arg == PARSE_COOKIE) {        /* Cookie data */
            c_var = SG(request_info).cookie_data;
            if (c_var && *c_var) {
                res = (char *) estrdup(c_var);
                free_buffer = 1;
            } else {
                free_buffer = 0;
            }
        } else if (arg == PARSE_STRING) {        /* String data */
            res = str;
            free_buffer = 1;
        }
        if (!res) {
            return;
        }
可以看到对于GET型的处理是第一种，而对于`parse_str`也就是`PARSE_STRING`是第三种，继续向下跟进:
    var = php_strtok_r(res, separator, &strtok_buf);
    ...
    while (var) {
         val = strchr(var, '=');
         if (arg == PARSE_COOKIE) {
              /* Remove leading spaces from cookie names,
                   needed for multi-cookie header where ; can be followed by a space */
              while (isspace(*var)) {
                   var++;
              }
              if (var == val || *var == '\0') {
                   goto next_cookie;
              }
         }
         if (val) { /* have a value */
              int val_len;
              unsigned int new_val_len;
              *val++ = '\0';
              php_url_decode(var, strlen(var));//先进行urldecode
              val_len = php_url_decode(val, strlen(val));
              val = estrndup(val, val_len);
              if (sapi_module.input_filter(arg, var, &val, val_len, &new_val_len TSRMLS_CC)) {
                   php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);
              }
              efree(val);
         } else {
    ...
通过`php_strtok_r`把res根据”&”分割”key=value”段, 接下来分别为var和val复制为key和value,
经过调试在`php_register_variable_safe`中会调用`main/php_variables.c`的`php_register_variable_ex`函数
会对变量的`空格、点`变成下划线，而当解析变量中出现形如`a[b`中会将`is_array=1`
进入到`is_array`后的处理，我们根据注释以及代码也可以发现:
并且在此之前前文代码中已经提到，会先对传入变量进行urldecode处理，因此总结起来为:  
PHP需要将所有参数转换为有效的变量名，在解析查询字符串时，它会做两件事：
  * 删除空白符
  * 将某些字符(点、括号、空格等)转换为下划线（包括空格）
因此我们基于此可以将填充数据后最终解析成相同变量的所有不同填充形式的数据都进行fuzz,这里贴下已有的脚本
     $arg) {
                for($i=0;$i ".bin2hex(chr($i))." (".chr($i).")\n";
                    }
                }
                echo "\033[999D\033[K\r";
                echo "\n";
        }
得到如下数据都能解析成相同变量:
## [+]escapeshellcmd/escapeshellarg函数利用
我们知道命令注入是很常见的一个问题，原因就是开发者对于用户的输入没有进行过滤而直接拼接到语句中进行执行，因此在PHP中提供了若干对输入进行过滤的函数以避免命令注入，这里最常见的便是`escapeshellcmd`和`escapeshellarg`
这里先将两者的函数原型贴一下:  
 **escapeshellarg**
> escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数  
>  功能 ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入
> shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号)  
>  定义 ：string escapeshellarg ( string $arg )
**escapeshellcmd**
> escapeshellcmd — shell 元字符转义  
>  escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec()
> 或 system() 函数，或者 执行操作符 之前进行转义。  
>  反斜线（\）会在以下字符之前插入： &#;`|*?~<>^()[]{}$\, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在
> Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。
而两者的功能有着一定的差别:  
 **escapeshellarg**
  * 1.确保用户只传递一个参数给命令
  * 2.用户不能指定更多的参数
  * 3.用户不能执行不同的命令
**escapeshellcmd**
  * 1.确保用户只执行一个命令
  * 2.用户可以指定更多的参数
  * 3.用户不能执行更多的命令
来看一下escapeshellarg/escapeshellcmd的输出
`escapeshellcmd`允许执行多个参数意味着如果该可执行程序中本身就有能够执行命令或者读取文件的参数，最典型的例子就是`find`，示例如上，`escapeshellarg`的处理是如果字符串中出现了`'`则先将其转义后，再将每一部分用单引号括起来，但是这里如果将`escapeshellarg`和`escapeshellcmd`混用将会导致参数的注入.
这里我们借助`BUUCTF 2018 Online Tool`这个题来分析这两个函数的源码以及利用的过程:
    <?php