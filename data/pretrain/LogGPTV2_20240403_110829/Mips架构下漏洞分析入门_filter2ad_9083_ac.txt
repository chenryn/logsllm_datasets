    {
      char cVar1;  //作为临时存储src单个字节内容
      char *pcVar2; //指向src的指针
      int iVar3;  //返回值（返回String的长度）
      /*首先判断拷贝地址dst是否为0，将pcVar2指针指向src+1的位置*/
      if ((dst == (char *)0x0) || (pcVar2 = (char *)(src + 1), src == 0)) {
        iVar3 = -1;
      }
      else {
        iVar3 = 0;    //初始化返回值为0
        while( true ) {
          cVar1 = pcVar2[-1];    //访问拷贝来源src的首部，并且作出判断
          if ((cVar1 == '\0') || (len ') || (cVar1 == '\\')) goto LAB_0043bb48;
              if (cVar1 == '*/
            if ((*pcVar2 != '\r') && (*pcVar2 != '\n')) {     //这部分检测src序列是否包含重复\r或者\n
              *dst = '';
              dst = dst + 4;     //写入4个字节，但是iVar3每次只会+1
            }
          }
          iVar3 = iVar3 + 1;
          pcVar2 = pcVar2 + 1;
        }
        *dst = '\0';
      }
      return iVar3;
    }
让我们去源代码里搜索调用stringModify而可能产生栈溢出的地方。 于是我们找到了writePageParamSet函数。
    void writePageParamSet(undefined4 param_1,char *param_2,int *param_3)
    {
      int iVar1;
      undefined *puVar2;
      undefined local_210 [512];
      if (param_3 == (int *)0x0) {
        HTTP_DEBUG_PRINT("basicWeb/httpWebV3Common.c:178","Never Write NULL to page, %s, %d",
                         "writePageParamSet",0xb2);
      }
      iVar1 = strcmp(param_2,"\"%s\","); //判断匹配字符串
      if (iVar1 == 0) {
        iVar1 = stringModify(local_210,0x200,param_3); //调用stringModify
        if (iVar1 \nvar %s = new Array(\n",
                   "pagePara");
        writePageParamSet(param_1,&DAT_00544d38,acStack3460,0);
        writePageParamSet(param_1,"%d,",&uStack3424,1);