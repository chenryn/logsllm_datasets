most dangerous permissions are only accessed by the app
itself and that most third-party SDKs that access a dangerous
permission are not related to advertisement or analytics services
(i.e., they are development support libraries such as Volley [28]
or Leak Canary [49], which in principle are not dangerous
for the privacy of users). We still ﬁnd examples of analytics
2In order to test the call feature, this app calls an emergency number, using
critical resources for non-critical situations.
Figure 2: Organizations and distribution of other applications
that share the UID and are signed with the same certiﬁcate as
FOTAs in the same device
Shared User IDs: We ﬁnd a shared UID value for 1,737
FOTA apps from 80 different packages, with most of them
(60%) having the android.uid.system value. This implies
that, if such apps are signed with the platform key, they are
effectively “the system” and have access to all code and
permissions than the superset of all system apps. Interest-
ingly, some FOTA apps share UID with apps such as the
android.uid.phone (29 FOTA apps from “qualcomm” and 3
from “BBK”), android.uid.nfc (one FOTA from ‘samsung’)
or android.media (one FOTA app from ‘gigaset’). Though
this feature (shared UID) was recently deprecated in API level
29, it has been widely used by system apps in the past, thus
affecting millions of Android devices that do not run newer
Android versions. Figure 2 shows, per organization, the number
of devices where we observe non-fota apps with the same User
ID as a FOTA app as well as the distribution of these apps across
devices. Technically, if FOTA apps expose their functionality
and data as external services, they would be making them
available to non-FOTA apps.
Permission analysis: In order to understand the type of data
and resources that FOTA apps might access (and possibly
make available to embedded third-party SDKs or to non-FOTA
apps via shared UID), we study the permissions requested by
these apps. To do so, we parse the Android Manifest ﬁle
to extract requests for both AOSP permissions (i.e., those
that are ofﬁcially released by Android) and custom ones (i.e.,
those declared by vendors or developers to enable access
to functionality/data from other apps [43], [62]). For apps
that specify a sharedUserId attribute (70% of the FOTA
apps in our dataset), we also include ofﬁcial permissions
requested by applications that share the same UID also found
on the same device and signed by the same certiﬁcate, to
reproduce what happens on real devices. We ﬁnd that FOTA
apps request a median number of 25 AOSP permissions. It
is expected that FOTA apps request some permissions, as
they enable functionalities that are part of the functionality of
these apps. For instance, we ﬁnd that access to the Internet,
Internet connection data, external storage of the phone and the
ability to reboot are all requested by over 70% of FOTA apps.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1614
samsung(937)lgemc(822)bbk(740)asustek(497)oppo(494)meizu(268)android(182)bqreaders(181)lenovo(179)tct(164)xiaomi(138)zhantang(136)tecno(132)htc(126)mediatek(100)huawei(99)oneplus(98)tinno(90)asus(75)blackshark(20)Brands (Num. devices)101102Num. apps sharing same UID and cert as the FOTAPermission
% apps
App
READ_PHONE_STATE
ACCESS_COARSE_LOCATION
SEND_SMS
ACCESS_FINE_LOCATION
GET_ACCOUNTS
READ_SMS
READ_PHONE_NUMBERS
70% 90%
21% 78%
16% 88%
15% 76%
10% 78%
7% 99%
1% 99%
App & SDK
(Tracking)
9% (2%)
10% (0%)
0% (0%)
5% (0%)
17% (0%)
1% (0%)
1% (0%)
SDK
(Tracking)
1% (0%)
12% (0%)
12% (0%)
18% (0%)
5% (0%)
0% (0%)
0% (0%)
Table VI: Percentage of apps requesting a given permission,
and how often only the FOTA app, a third-party SDK, or both
use it in the code.
SDKs leveraging these permissions, such as the “New Relic”
SDK accessing the location in the com.bqreaders.ota OEM
app or “Tencent” and “Firebase” using the permission to
access unique identiﬁers in both the com.coloros.sau and
com.samsung.android.app.omcagent OEM apps.
Finally, we take a look at the custom permissions requested
by FOTA apps. This type of permissions are declared by third-
party actors (such as other app developers or OEMs) to protect
the access to some exposed functionality [43], [62]. We ﬁnd a
total of 401 unique custom permissions by their name. We ﬁnd
that FOTA apps request a median of 6 custom permissions.
We ﬁnd examples of permissions declared by phone vendors
(e.g., com.lenovo.permission.READ_SEARCH_INDEXABLES),
and others related to different Google services (such as
com.google.android.googleapps.permission.GOOGLE_AUTH).
This indicates that FOTA apps rely on functionality outside
the AOSP permission model, provided by external sources.
D. Potential for Abuse in the Update Process
in
our dataset
Most FOTAs
We next analyze whether the FOTA apps in our dataset
follow Google’s recommendations [20] for the veriﬁcation
and installation of the updates (steps 3 and 4 of the FOTA
update lifecycle process introduced in §II). We also analyze the
organizations that are involved in these processes by looking at
the relevant veriﬁcation certiﬁcates. Due to our limitations to
conduct dynamic analysis, we do not analyze other steps of the
update process, e.g., data exchanges with the update servers.
(93%) use Google’s
RecoverySystem library to implement system updates.
These include those running on a device pre-Android 7.0
(where there are no other alternatives) and devices with newer
versions that do not support A/B updates (see §IV). While this
library is available and easy to use for package veriﬁcation
and installation, developers may decide to implement their
own custom update mechanism. During the validation of
FOTA Finder (§IV-D), we found cases where the FOTA app
was using the veriﬁcation component, but not the actual
installation API which was done by other means. In this
section, we leverage the signals from FOTA Finder to analyze
the capabilities of all non-A/B FOTAs in terms of whether they
do install, veriﬁcation, or both. Speciﬁcally, Table VII shows
the prevalence of apps that have installation capabilities (either
using Google’s recommendation, i.e., the installPackage
API method, or writing in /cache/recovery/command), and
veriﬁcation capabilities (using the verifyPackage() API).
We observe that 8% of all the non-A/B FOTA apps do use the
veriﬁcation, but we have not found evidence of how they install
packages. Such apps might rely on other apps to perform the
installation (e.g., through an Intent) or on other component
(e.g., native code or via reﬂection). Also, 45% do have
installation ﬂags but do not use the verifyPackage method
from the RecoverySystem library. This could mean either
that no veriﬁcation is applied, or that a custom veriﬁcation is
implemented. In an attempt to discover if a custom veriﬁcation
method is being applied, we looked for the API MessageDigest
in speciﬁc packages where the update process occurs in the
FOTA apps. Our analysis retrieves all the calls to this API
and the hash algorithm used. We observe that, for the 949 that
do not verify the updates using Google’s API, 51% contain a
call to MessageDigest, mostly using the MD5 hash algorithm,
suggesting that they perform their own veriﬁcation process.
Either if the veriﬁcation is not done by any means at the
high-level Android code, we observe that the recovery binary
always applies the veriﬁcation step as a security measure before
applying the update [7]. This veriﬁcation relies on the default
otacerts.zip ﬁle [8], and thus owners of the certiﬁcates
included in this ﬁle are authorized to install packages in the
system. We rely on the Firmware Scanner dataset to inspect this
certiﬁcate list, obtaining 3,311 otacerts.zip ﬁles from 1,747
devices. From these, 598 (6%) also contain a FOTA app.3 In
general, we ﬁnd that the same organization that signs the FOTA
app is present in the otacerts.zip ﬁle from the same device.
In these cases, the same organization signing the FOTA is also
responsible for the updates. While the majority of apps are
related to a single certiﬁcate in the ﬁle, 8 FOTA developers use
two different otacerts.zip ﬁles. Our manual analysis shows
that most of these are from the same organization. Yet, there
are 12 FOTA developers for which we do not ﬁnd a single
corresponding certiﬁcate in the otacerts.zip (i.e., they are
not responsible for the update process). In some cases, these
FOTAs are related to third-party FOTA providers like Adups,
which are developers but do not manage the update process.
Finally, it is noteworthy the presence of 5% devices that include
an AOSP default key in the otacerts.zip ﬁle, affecting 17
brands. These devices are mostly from the brand Alps (57%)
and Goclever (12%), but we ﬁnd devices affected from brands
such as Huawei (3%), Toshiba (3%) or Samsung (1%). The
use of AOSP test keys renders the veriﬁcation useless, and it
might allow non-authorized parties to install system apps.
VII. TELEMETRY ANALYSIS
In this section we complement the analysis of FOTA
packages from previous sections with dynamic behaviors
observed on real devices. Since sandbox dynamic execution
of pre-installed apps remains an open problem, we rely on
empirical evidence obtained from the telemetry of a commercial
security tool that tracks the installation of Android apps (see §III
for details). This section ﬁrst describes how we detect FOTA
3The low ratio of certiﬁcates is due to: (i) the lack of support in FirmwareS-
canner to identify and extract the ﬁle, since their developers instrumented this
feature on November’19; and (ii) limitations of FOTA Finder (§IV) to extract
FOTA apps for some devices.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1615
INSTALL
API
(cid:88)
(cid:88)
×
×
×
(cid:88)
(cid:88)
CMD
×
×
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
VERIFY
#APKS %APKS
(cid:88)
×
×
(cid:88)
(cid:88)
×
(cid:88)
495
459
454
249
170
36
15
26.36
24.44
24.17
13.26
9.05
1.92
0.80
Table VII: Analysis of FOTA apps using Recovery system
apps in the telemetry (§VII-A), and then it presents an analysis
of the FOTA apps installation behavior (§VII-B).
A. Detecting FOTA apps in telemetry data
We query the reputation logs dataset (§III) with the FOTA
packages discovered by FOTA Finder. We collect all records
where the APK’s parent package name matches the package
name of one of the FOTA packages. Searching for FOTA
telemetry events using only the FOTA package name can be
problematic. Malicious apps can impersonate FOTA apps by
using the same package name, misleading us into assigning
their malicious installations to benign FOTA packages. We
address this issue by checking the certiﬁcate information of
FOTA apps when this is available. To increase our conﬁdence
on our matching, we also search the telemetry for other package
names signed by these certiﬁcates and conﬁrm that these are
used for signing other system apps from the same entity.
The resulting dataset contains 15,961,424 installation events
originating from 20 FOTA packages on 841,344 devices from
199 different country codes [18]. Although we are able to detect
the presence of 101 (63%) FOTA packages in the telemetry,
only 20 (12%) show some installation activity. The reason
for the low coverage is the fact that the telemetry uses the
PackageInstaller for obtaining the installer information, and
FOTA apps may install apps via other means (e.g., as an update
of the system partition, or through the execution of external
programs). Thus, our analysis includes only a subset of all
FOTA installations and our measurements should be considered
as lower-bound estimations.
B. Telemetry analysis
We next analyze the installation behavior of the 20 FOTA
packages that we detect in the telemetry. We are particularly
interested in checking if FOTA packages, in addition to system
updates, are responsible for non-system app installations. These
installations can provide evidence of FOTAs being used for
secondary purposes like promoting third-party apps [48]. These
promotions can be part of commercial agreements between
OEMs and third-party developers (e.g., similar to the one
between Facebook and Samsung for pre-installing Facebook
on Samsung devices [12]). These installations may happen
without user’s consent and users may not be able to permanently
remove these apps if installed under system partitions. We
also investigate if FOTA apps contribute in the distribution of
potentially unwanted programs (PUP) and malware.
To assist our analysis, we leverage part of the pipeline in
[48]. More speciﬁcally, we complement the telemetry dataset
with two additional sources. First, we query all installed apps
to VirusTotal [65]. We consider as malicious any app that
is ﬂagged by at least 4 Anti-Virus (AV) engines, a threshold
aligned with prior work [69]. Moreover, when AV labels are
available, we feed them to AVClass, a malware labeling tool
that outputs their malware families [60]. Second, we check
the presence of installed apps on the Google Play Store by
searching for their package names.
packages,
Table VIII summarizes the behavior of the top 10 FOTA
installer packages by number of installation events. For each
FOTA installer package, the left part of the table shows
the package name and the type of the entity that operates
it. The middle part summarizes the installations: number
of installation events, devices, and countries. The right part
summarizes the installed apps: number of apps, malicious apps,
packages, packages found in Google Play Store, and signers.
From the 20 FOTA packages detected, 13 are from OEMs, 3
from SoCs and 2 from SFDs. We also observe one Google
package (com.google.android.gms) and one AOSP package
(com.android.settings) that provide general services for
OEMs. Installations from these two packages have nothing
to do with Google, but they rather capture the installation
behavior of multiple vendors. We also observe that 3
com.sonyericsson.updatecenter,
installer
com.samsung.android.app.omcagent,
and
com.coloros.sau, are responsible for the vast majority of the
installation events followed by a long-tail of FOTA packages.
Play Store installations: We look for FOTA packages that
may perform installations that are not related with the update
process. We use the presence of installed packages in the
Google Play marketplace as a signal for this behavior. In
total, 13 out of 20 FOTA installers install 764 packages
that exist in Google Play Store. These 764 packages belong
to 50 Google Play categories; the most common ones are
Tools (20% of the packages), Entertainment (9%), Communi-
cation (9%), Games (8%), and Shopping (7%). For example,
we observe com.qualcomm.qti.carrierconfigure, an SoC
FOTA app installing com.dictionary.paid, an English dic-
tionary app. In addition to Play Store categories, we leverage
the classiﬁcation from §V-A to detect apps that belong to
OEM and MNO companies. We further analyze the installed
packages of four FOTA packages, com.google.android.gms,
com.andoid.settings, com.sonyericsson.updatecenter
and com.samsung.android.app.omcagent. We select these
four because of their intense installation activity in terms
of different packages installed, including packages listed on
Play Store market. Three out of four of these FOTA pack-
ages install packages from all three categories but predomi-
nantly packages belonging to OEMs and MNOs. For exam-
ple, com.sonyericsson.updatecenter installs 260 packages,
48% of which belong to Sony Electronics Corporation, 25%
to 11 MNOs (e.g., NTT DOCOMO, KDDI, Vodafone), 5%
to the Gameloft video game publisher, and the remaining
22% to various software publishers including large retailers
(e.g., Amazon and Rakuten), social media (e.g., Facebook and
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1616
Package name
FOTA Installer
com.sonyericsson.updatecenter
com.samsung.android.app.omcagent
com.coloros.sau
com.google.android.gms
com.android.settings
com.meizu.flyme.update
com.qiku.android.ota
com.htc.updater
com.archos.arum
com.qualcomm.qti.carrierconfigure
Type
OEM
OEM
OEM
Google
Unknown
OEM
OEM
OEM
OEM
SOC
Installations
Devices
381K
332K
65K
60K
4.7K
773
77
120
85
15
Events