Certainly! Here is the optimized and refined version of your text, with improved clarity, coherence, and professionalism:

---

### Dangerous Permissions and Third-Party SDKs
The most dangerous permissions are typically accessed only by the app itself. Most third-party SDKs that access these dangerous permissions are not related to advertising or analytics services; instead, they are development support libraries such as Volley [28] or Leak Canary [49], which, in principle, do not pose a privacy risk to users. However, we still find instances where analytics SDKs, like "New Relic" in the com.bqreaders.ota OEM app or "Tencent" and "Firebase" in both the com.coloros.sau and com.samsung.android.app.omcagent OEM apps, leverage these permissions.

### Testing Call Feature
To test the call feature, this app dials an emergency number, using critical resources for non-critical situations.

### Shared User IDs
We identified a shared UID value for 1,737 FOTA (Firmware Over-The-Air) apps from 80 different packages, with 60% of them having the `android.uid.system` value. This implies that if these apps are signed with the platform key, they effectively become part of the system and have access to all code and permissions of all system apps. Some FOTA apps share UIDs with other system apps, such as `android.uid.phone` (29 FOTA apps from “qualcomm” and 3 from “BBK”), `android.uid.nfc` (one FOTA from ‘samsung’), or `android.media` (one FOTA app from ‘gigaset’). Although the shared UID feature was deprecated in API level 29, it has been widely used by system apps in the past, affecting millions of Android devices running older versions. Figure 2 illustrates, per organization, the number of devices where non-FOTA apps share the same UID as a FOTA app, as well as the distribution of these apps across devices. If FOTA apps expose their functionality and data as external services, they would be making them available to non-FOTA apps.

### Permission Analysis
To understand the type of data and resources that FOTA apps might access, we analyzed the permissions requested by these apps. We parsed the Android Manifest file to extract requests for both AOSP (Android Open Source Project) permissions and custom ones. For apps specifying a `sharedUserId` attribute (70% of the FOTA apps in our dataset), we also included official permissions requested by applications sharing the same UID and signed by the same certificate, to replicate real-device conditions. We found that FOTA apps request a median of 25 AOSP permissions. It is expected that FOTA apps request some permissions, as they enable functionalities integral to their purpose. For instance, over 70% of FOTA apps request access to the Internet, Internet connection data, external storage, and the ability to reboot.

### Custom Permissions
FOTA apps also request custom permissions, declared by third-party actors to protect exposed functionality. We identified 401 unique custom permissions, with FOTA apps requesting a median of 6 custom permissions. Examples include permissions declared by phone vendors (e.g., `com.lenovo.permission.READ_SEARCH_INDEXABLES`) and those related to Google services (e.g., `com.google.android.googleapps.permission.GOOGLE_AUTH`). This indicates that FOTA apps rely on functionality outside the AOSP permission model, provided by external sources.

### Potential for Abuse in the Update Process
Next, we analyzed whether the FOTA apps in our dataset follow Google’s recommendations for verification and installation of updates. Most FOTAs (93%) use Google’s RecoverySystem library to implement system updates. This includes devices pre-Android 7.0 and newer versions that do not support A/B updates. While this library is easy to use for package verification and installation, developers may implement custom update mechanisms. Table VII shows the prevalence of apps with installation and verification capabilities. We observed that 8% of non-A/B FOTA apps use verification but lack evidence of how they install packages. Additionally, 45% have installation flags but do not use the `verifyPackage` method, suggesting either no verification or a custom verification process. Our analysis of 949 apps that do not use Google’s API found that 51% contain calls to `MessageDigest`, mostly using the MD5 hash algorithm, indicating custom verification. The recovery binary always applies a verification step before applying the update, relying on the `otacerts.zip` file. We inspected 3,311 `otacerts.zip` files from 1,747 devices, finding that the same organization signing the FOTA app is often present in the `otacerts.zip` file. In some cases, third-party FOTA providers like Adups are involved, and 5% of devices include AOSP default keys, rendering verification ineffective.

### Telemetry Analysis
We complemented our static analysis with dynamic behaviors observed on real devices using telemetry data from a commercial security tool. We detected 101 (63%) FOTA packages in the telemetry, with 20 (12%) showing installation activity. We analyzed the installation behavior of these 20 FOTA packages, focusing on non-system app installations. Table VIII summarizes the behavior of the top 10 FOTA installer packages, showing the package name, entity type, installation events, devices, countries, and installed apps. We found that 13 out of 20 FOTA installers install 764 packages that exist in the Google Play Store, belonging to various categories. For example, `com.qualcomm.qti.carrierconfigure` installs `com.dictionary.paid`, an English dictionary app. We further analyzed four FOTA packages: `com.google.android.gms`, `com.android.settings`, `com.sonyericsson.updatecenter`, and `com.samsung.android.app.omcagent`. These packages predominantly install apps from OEMs and MNOs, such as Sony Electronics Corporation, NTT DOCOMO, and Facebook.

---

This version should be more clear, coherent, and professional. Let me know if you need any further adjustments!