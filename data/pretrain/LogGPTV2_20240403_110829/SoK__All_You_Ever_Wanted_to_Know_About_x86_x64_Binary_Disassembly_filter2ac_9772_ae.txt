### 商业工具与开源工具的对比

在平均情况下，商业工具的表现（88.63%）优于开源工具。这种差异在最坏的情况下更为明显。开源工具通过暴力枚举所有常量操作数和数据单元来实现其功能，而商业工具则采取了更为保守的策略。我们的假设可以通过比较MCSEMA和IDA PRO得到验证，因为MCSEMA在IDA PRO的基础上增加了一轮暴力枚举。

令人惊讶的是，开源工具也表现出很高的精度（平均99.92%）。根据我们的观察，高精度的原因有两点：（1）基于启发式的检查通常较为严格；（2）大多数基准程序包含的数据较少。对于数据较多的程序，这些工具更容易出错（例如Mysqld，其中包含大量数据）。

### 符号化评估结果

**表VII** 展示了符号化的评估结果。UROBOROS无法运行Linux-Of二进制文件和所有Windows二进制文件。我们还省略了ANGR在Windows二进制文件上的符号化结果，因为ANGR的Reassembler组件无法处理这些文件。

**表VIII** 显示了符号化中的假阳性统计。对齐、类型、基于类型的滑动和扩展数据分别表示无对齐（启发式11）、ANGR的移动方案（启发式16）和扩大数据区域（启发式13）。

| 工具 | Urobo* | MCSEMA | Ghidra | ANGR |
| --- | --- | --- | --- | --- |
| 对齐 | 0.00 | 0.00 | 0.29 | 58.58 |
| 类型 | 0.00 | 0.00 | 0.00 | 4.47 |
| 扩展数据 | 0.00 | 0.00 | 3.91 | 0.01 |
| 碰撞 | 0.00 | 0.00 | 0.00 | 4.47 |

### 启发式的使用

如表III所示，符号化涉及许多启发式方法，这些方法在覆盖范围和正确性之间进行权衡。我们的评估表明，启发式8（基于暴力的方法）、启发式11（关于指针的无对齐假设）和启发式13（数据区域的扩展）在我们的基准测试中实现了xrefs的完全覆盖。其他启发式方法则致力于提高正确性。以下是对它们的详细讨论：

- **启发式8**（基于暴力的方法）对于符号化是必要的。这可以通过比较IDA PRO和MCSEMA来验证。MCSEMA在IDA PRO的基础上增加了一轮暴力枚举，将覆盖率从95%提高到98%。
- **启发式9**（数据中的指针具有机器大小）如果跳转表不被考虑，则是合理的。在超过600万个xrefs中，我们没有观察到任何违反的情况。
- **启发式10**（数据中的指针是对齐的）和**启发式11**（数据中的指针可能不对齐）相互冲突，且两者都不完美。启发式10遗漏了大约600个xrefs，而启发式11在ANGR中引入了超过50K的假阳性。
- **启发式12**（指向代码的引用指向函数入口）可以减少假阳性，但它遗漏了数千个指向函数中间的xrefs（例如异常处理中的try-catch指针）。
- **启发式13**（扩大数据区域的边界）帮助恢复了12K个数据中的xrefs，但导致ANGR和GHIDRA中分别产生了6K和2K+的假阳性。

### 假阴性统计

**表IX** 显示了符号化中的假阴性统计。对齐、类型、扩展数据、函数和地址表分别表示对齐假设（启发式10）、优先选择字符串而非指针（启发式15）、扩大数据区域（启发式13）和地址表的大小（启发式14）。

| 工具 | Urobo* | MCSEMA | Ghidra | ANGR |
| --- | --- | --- | --- | --- |
| 对齐 | 0.00 | 1.14 | 0.01 | 0.00 |
| 类型 | 0.00 | 75.22 | 3.13 | 100 |
| 扩展数据 | 0.00 | 23.64 | 0.00 | 0.00 |
| 函数 | 0.00 | 0.00 | 0.33 | 0.00 |
| 地址表 | 0.00 | 0.00 | 96.53 | 0.00 |

### 错误分析

**表VIII** 显示了假阳性的统计数据。ANGR和GHIDRA假设数据中的指针可以不对齐，分别触发了59%和0.3%的假阳性。它们还因为在检查xrefs目标的合法性时扩大了数据区域的边界而产生假阳性。所有其他假阳性都是由于数值和指针之间的碰撞引起的。

**表IX** 显示，ANGR和MCSEMA的大多数假阴性是因为它们排除了与推断的字符串重叠的指针。MCSEMA还遗漏了指向数据区域外位置的23.64%的xrefs。GHIDRA由于假设地址表的最小大小以及代码指针总是指向函数入口，分别产生了96.53%和0.33%的假阴性。

### 函数入口识别

此评估测量了函数入口的识别情况。在这个测试中，我们进一步考虑了NUCLEUS [6] 和BYTEWEIGHT [9]。我们用基准二进制文件重新训练了BYTEWEIGHT。

**总体表现**：**表X** 展示了总体结果。关键观察是，函数入口识别仍然是一个挑战。四个开源工具只能识别不到80%的函数。特别是RADARE2的召回率低于66%。这些结果表明，即使使用启发式方法，我们仍然需要开发更好的函数识别技术。我们还观察到，函数识别的结果因优化级别和架构的不同而变化。这是因为工具广泛使用基于签名的函数匹配，这些匹配特定于优化和架构。除了有限的覆盖率，现有工具在函数识别方面的精度也较低。

**表X**：函数入口识别的评估结果

| 工具 | 平均值 | 最小值 |
| --- | --- | --- |
| Urobo* |  |  |
| MCSEMA |  |  |
| Ghidra |  |  |
| ANGR |  |  |

请注意，表格中的具体数值未提供完整信息，建议补充完整以确保数据的准确性。