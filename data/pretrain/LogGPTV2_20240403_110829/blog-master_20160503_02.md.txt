## PostgreSQL 可靠性和一致性 代码分析  
### 作者                                                                                               
digoal                                                                                               
### 日期                                                                                               
2016-05-03                                                                                            
### 标签                                                                                               
PostgreSQL , 可靠性 , 一致性     
----                                                                                               
## 背景                                   
PostgreSQL 的数据可靠性是依赖XLOG的实现的，所有的对数据块的变更操作在write到磁盘前，一定是确保这个变更产生的REDO会先写到XLOG，并保证XLOG已落盘。   
也就是说流程是这样的：   
1\. 首先将需要变更的块从文件读入shared buffer   
![pic](20160503_02_pic_001.png)  
2\. 变更shared buffer中block的内容   
![pic](20160503_02_pic_002.png)  
3\. 将shared buffer中block变更的内容写入XLOG，如果是checkpoint后第一次变更该块，则写full page。（通过参数控制是否要写full page）。   
![pic](20160503_02_pic_003.png)  
4\. 在bgwriter将shared buffer中的脏块write到os dirty page前，会确保它对应的XLOG已经落盘，通过脏块的LSN来确保。   
![pic](20160503_02_pic_004.png)  
所以问题来了，如果用户使用了异步提交，即synchronous_commit=off，会怎样呢？   
也没有问题，因为在第四步，一定是会保证造成脏页的XLOG是先落盘的。   
所以开启synchronous_commit=off，只会造成丢XLOG，绝对不会造成数据不一致。   
确保可靠性和一致性的代码如下：  
```  
/*  
 * Main entry point for bgwriter process  
 *  
 * This is invoked from AuxiliaryProcessMain, which has already created the  
 * basic execution environment, but not enabled signals yet.  
 */  
void  
BackgroundWriterMain(void)  
{  
...  
        /*  
         * Do one cycle of dirty-buffer writing.  
         */  
        can_hibernate = BgBufferSync();  
...  
/*  
 * BgBufferSync -- Write out some dirty buffers in the pool.  
 *  
 * This is called periodically by the background writer process.  
 *  
 * Returns true if it's appropriate for the bgwriter process to go into  
 * low-power hibernation mode.  (This happens if the strategy clock sweep  
 * has been "lapped" and no buffer allocations have occurred recently,  
 * or if the bgwriter has been effectively disabled by setting  
 * bgwriter_lru_maxpages to 0.)  
 */  
bool  
BgBufferSync(void)  
{  
...  
    /* Execute the LRU scan */  
    while (num_to_scan > 0 && reusable_buffers flags & BM_PERMANENT)  
        XLogFlush(recptr);  
...  
/*  
 * Ensure that all XLOG data through the given position is flushed to disk.  
 *  
 * NOTE: this differs from XLogWrite mainly in that the WALWriteLock is not  
 * already held, and we try to avoid acquiring it if possible.  
 */  
void  
XLogFlush(XLogRecPtr record)  
{  
    XLogRecPtr    WriteRqstPtr;  
    XLogwrtRqst WriteRqst;  
...  
        XLogWrite(WriteRqst, false);  
...  
/*  
 * Write and/or fsync the log at least as far as WriteRqst indicates.  
 *  
 * If flexible == TRUE, we don't have to write as far as WriteRqst, but  
 * may stop at any convenient boundary (such as a cache or logfile boundary).  
 * This option allows us to avoid uselessly issuing multiple writes when a  
 * single one would do.  
 *  
 * Must be called with WALWriteLock held. WaitXLogInsertionsToFinish(WriteRqst)  
 * must be called before grabbing the lock, to make sure the data is ready to  
 * write.  
 */  
static void  
XLogWrite(XLogwrtRqst WriteRqst, bool flexible)  
{  
...  
    /*  
     * If asked to flush, do so  
     */  
    if (LogwrtResult.Flush = 0 &&  
                !XLByteInPrevSeg(LogwrtResult.Write, openLogSegNo))  
                XLogFileClose();  
            if (openLogFile  SYNCHRONOUS_COMMIT_OFF) ||  
        forceSyncCommit || nrels > 0)  
    {  
        XLogFlush(XactLastRecEnd);  
        /*  
         * Now we may update the CLOG, if we wrote a COMMIT record above  
         */  
        if (markXidCommitted)  
            TransactionIdCommitTree(xid, nchildren, children);  
    }  
    else  
    {  
        /*  
         * Asynchronous commit case:  
         *  
         * This enables possible committed transaction loss in the case of a  
         * postmaster crash because WAL buffers are left unwritten. Ideally we  
         * could issue the WAL write without the fsync, but some  
         * wal_sync_methods do not allow separate write/fsync.  
         *  
         * Report the latest async commit LSN, so that the WAL writer knows to  
         * flush this commit.  
         */  
        XLogSetAsyncXactLSN(XactLastRecEnd);  
        /*  
         * We must not immediately update the CLOG, since we didn't flush the  
         * XLOG. Instead, we store the LSN up to which the XLOG must be  
         * flushed before the CLOG may be updated.  
         */  
        if (markXidCommitted)  
            TransactionIdAsyncCommitTree(xid, nchildren, children, XactLastRecEnd);  
    }  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")