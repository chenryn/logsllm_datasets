# Blockchain Security: From Curves to Contracts

### Presenters
- Dr. Jimmy Chen, IKV & NTU
- Alex Liu, AMIS & MaiCoin
- HITCON Pacific 2016

## Aspects of Security
- **ECDSA for Transaction Signing (including hardware signing)**
- **Hash Function Collision Resistance**
- **Privacy-Preserving Features (Zero-Knowledge Proofs)**
- **Consensus Algorithms**
- **Smart Contract Correctness**

---

## Introduction to Blockchain
![Blockchain in Finance](http://technews.tw/2016/04/10/blockchain-applied-on-wall-street)
![Blockchain and Banking](http://finance.technews.tw/2016/04/12/blockchain-bank-fintech)
![Blockchain Applications](https://kknews.cc/tech/m4kmbp.html)

Source: [CoinMarketCap](http://coinmarketcap.com)

---

## Elliptic Curve Cryptography (ECC)
- **Elliptic Curve Theory**: The rich and deep theory of elliptic curves has been studied by mathematicians for over 150 years.
- **Elliptic Curve over R**: \( y^2 = x^3 + ax + b \)
  - **Point Addition**:
    ![Point Addition](http://www.embedded.com/design/safety-and-security/4396040/An-Introduction-to-Elliptic-Curve-Cryptography)
  - **Point Doubling**:
    ![Point Doubling](http://www.embedded.com/design/safety-and-security/4396040/An-Introduction-to-Elliptic-Curve-Cryptography)

### Curves over Prime Fields
- **Addition**:
  \[
  (x_3, y_3) = (x_1, y_1) + (x_2, y_2)
  \]
- **Doubling**:
  \[
  (x_3, y_3) = [2] (x_1, y_1)
  \]

- **Modulo Operations**:
  \[
  s \equiv \frac{y_2 - y_1}{x_2 - x_1} \pmod{p}
  \]
  \[
  x_3 \equiv s^2 - x_1 - x_2 \pmod{p}
  \]
  \[
  y_3 \equiv s(x_1 - x_3) - y_1 \pmod{p}
  \]

- **Example on a Curve**:
  - G(5,6), 2G, 3G, ..., 27G

### Bitcoin and Ethereum's Curve
- **secp256k1**: A 256-bit prime curve used by Bitcoin and Ethereum.
  - Source: [Bitcoin Wiki](https://en.bitcoin.it/wiki/Secp256k1)

---

## Key Pairs
- **Base Point G**: Fixed on the given elliptic curve.
- **Private Key (m)**: A randomly generated integer.
- **Public Key (P)**: Calculated as \( P = [m] G \).
- **ECDSA**: Used for signing Bitcoin transactions.
- **Bitcoin Address**: Hash value of the public key \( P \).

---

## Bitcoin Transactions
- **Transaction Security**: Must be protected very well!
  - Source: [Bitcoin Whitepaper](http://bitcoin.org/bitcoin.pdf) by Satoshi Nakamoto

---

## Hash Functions
- **Definition**: An efficient function mapping binary strings of arbitrary length to binary strings of fixed length, called the hash-value or hash-code (also fingerprint or checksum).

### Cryptographic Hash Functions
- **One-Way Property**: Given any \( y \), it is computationally infeasible to find any value \( x \) such that \( H(x) = y \).
- **Collision Resistance**: It is computationally infeasible to find \( x' \neq x \) such that \( H(x') = H(x) \).

### SHA: Secure Hash Algorithm
- **Published by NIST**: As a U.S. Federal Information Processing Standard (FIPS).

| Algorithm | Output Size (bits) | Internal State Size (bits) | Block Size (bits) | Rounds | Bitwise Operations | Security (bits) |
|-----------|--------------------|----------------------------|-------------------|--------|--------------------|-----------------|
| SHA-1     | 160                | 160                        | 512               | 80     | and, or, add, xor, rot | Theoretical attack (2^61) |
| SHA-224   | 224                | 256                        | 512               | 64     | and, or, xor, shr, rot, add | 112             |
| SHA-256   | 256                | 256                        | 512               | 64     | and, or, xor, shr, rot, add | 128             |
| SHA-384   | 384                | 512                        | 1024              | 80     | and, or, xor, shr, rot, add | 192             |
| SHA-512   | 512                | 512                        | 1024              | 80     | and, or, xor, shr, rot, add | 256             |

### SHA-3
- **Output Sizes**: 224, 256, 384, 512 bits
- **Internal State Size**: 1600 bits
- **Block Sizes**: 1152, 1088, 832, 576 bits
- **Rounds**: 24
- **Bitwise Operations**: and, xor, rot, not

- **Usage**:
  - Bitcoin: SHA-256
  - Ethereum: Keccak-256

### Merkle Tree / Hash Tree
- **Structure**:
  - Block
  - Merkle Root
  - Source: [Merkle Tree](http://commons.wikimedia.org/wiki/File:MerkleTree1.jpg)

---

## Mining
- **Process**: Solving cryptographic puzzles to validate transactions.
  - Source: [Bitcoin Whitepaper](http://bitcoin.org/bitcoin.pdf) by Satoshi Nakamoto

---

## ECDSA: Choice of Two Curves
- **Secp256k1**: Used by Bitcoin and Ethereum.
- **Secp256r1 (NIST P-256)**: Parameters chosen by NSA.
  - Source: [A Tale of Two Curves](http://blog.enuma.io/update/2016/11/01/a-tale-of-two-curves-hardware-signing-for-ethereum.html)

### Possible Back Doors
- **Security Dangers**: Potential backdoors in NIST curves.
  - Source: [Security Dangers of the NIST Curves](Bernstein, Daniel J., Lange, Tanja, “Security Dangers of the NIST Curves.”)

### ECDSA Signing and Verification
- **Signing Process**:
  - \( k \): Ephemeral key
  - Source: [Elliptic Curve DSA](http://en.wikipedia.org/wiki/Elliptic_Curve_DSA)
- **Verification Process**:
  - Source: [Elliptic Curve DSA](http://en.wikipedia.org/wiki/Elliptic_Curve_DSA)

### Ephemeral Key and RNG
- **Critical Requirements**:
  - Entropy
  - Secrecy
  - Uniqueness
- **Security Incidents**:
  - Sony PlayStation 3 (December 2010)
  - Android Bitcoin Wallets (August 2013)
  - Prevented by deterministic \( k \) generation (RFC 6979)

### Side-Channel Attacks
- **D (double) or A (add)**: Depends on the bits of the private key.
  - Source: [Side-Channel Attacks](https://eprint.iacr.org/2015/354.pdf)
- **Key Extraction from Mobile Devices**:
  - OpenSSL and CoreBitcoin on iOS devices.
  - Source: [Mobile Side-Channel Attacks](https://www.tau.ac.il/~tromer/mobilesc)

### Hardware Signing
- **CoolWallet**: Uses Infineon SLE97 secure chip.

### Quantum-Resistant Suite
- **NSA Announcement (August 2015)**: Transition to quantum-resistant algorithms.
  - Source: [NSA Suite B Cryptography](https://en.wikipedia.org/wiki/NSA_Suite_B_Cryptography)

### Collision Resistance of SHA-2, SHA-3
- **Importance in Blockchain**:
  - Consensus (proof of work)
  - Wallet generation
  - Transaction signing
- **Quantum Attack Resistance**:
  - Requires \( 2^{128} \) queries in a quantum black-box model.
  - Source: [Estimating the Cost of Generic Quantum Pre-Image Attacks on SHA-2 and SHA-3](Amy, Di Matteo, Gheorghiu, et. al.)

### Zero-Knowledge Proofs for Blockchain Privacy
- **Zerocash**: Decentralized anonymous payment from Bitcoin.
  - Source: [Zerocash Paper](Ben-Sasson, Chiesa, Garman, et. al.)

---

## Non-Cryptographic Security
### Consensus Algorithms
- **Byzantine Fault Tolerance**:
  - Termination
  - Validity
  - Integrity
  - Agreement
  - Sources: [The Byzantine Generals Problem](Lamport, L., Shostak, R., Pease, M.), [Practical Byzantine Fault Tolerance and Proactive Recovery](Castro, M., Liskov, B.)

### Comparison of Consensus Algorithms
| Algorithm | Decentralized Control | Low Latency | Flexible Trust | Asymptotic Security |
|-----------|-----------------------|-------------|----------------|---------------------|
| Proof of Work | ✔ | | | |
| Proof of Stake | ✔ | maybe | maybe | |
| PBFT | ✔ | ✔ | ✔ | |
| Tendermint | ✔ | ✔ | ✔ | |

- **Source**: [The Stellar Consensus Protocol](Mazieres, David)

### Smart Contract Failures
- **The DAO Reentrancy Bug**:
  - Loss: >$60 million
  - Mitigated by hard fork and time delays
  - Source: [Smart Contract Security and Decentralized Governance](Jentzsch, Christoph)

### Establishing Security Patterns
- **Prudent Design**: Invariants, coverage, formal verification
- **Defense in Depth**: Cap transaction amount, time delays, circuit breakers
- **Escape Hatches**: Updateable contracts, multisig rescue
- **Simplicity**: Only decentralize what absolutely needs to be decentralized

### Miscellaneous Blockchain Exploits
- **DAO Reentrancy Bug**: >$60 million loss
- **Bitfinex Compromise**: >$60 million loss
- **Mt. Gox**: >$400 million loss
- **Bitstamp**: $5 million loss
- **Bitcoinica**: $2 million loss
- **Total Losses**: Over $1 billion

---

## Thank You!

![Ethereum Logo](https://www.ethereum.org/ether)