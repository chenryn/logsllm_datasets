# 功能类命令
**map 引用上一次查询的结果作为参数进行递归查询**
#### 命令研发场景
在很多系统的日志中，有些关键词往往**不便于直接查询**，但**经常与另外一个关键词同时出现在上下文中**。直接查询这些关键词可能会出现许多无关的日志信息，又或者会出现一堆日志，还是需要通过另一个关键词作为条件进行过滤，才能得到最后的结果。此时用map实现这种关键词的**间接查询**最为合适不过。
#### 作用
map可以**引用上次搜索的结果**，作为下次搜索的条件。它的原理是将上一次查询的结果通过管道传给下一次查询的参数去调用，可以重复调用一次或多次。
#### 语法
map "\" \[maxsearches = \\]
**必要参数：**
\
描述：
子查询搜索语句，如
\`\* \| map "starttime=\$timestamp\$ login_name:\$user\$"\`
**可选参数：**
\
语法：maxsearches = \
描述：最大的搜索个数
默认值：10
-   注意事项
出于性能的考虑，对map前一结果的条数限制默认为20，对应的配置项为SPLServer的map.max_searches_limit。
示例：
\*
\| stats count() by logtype
\| limit 2
\| map "logtype:\$logtype\$"
描述：
上述在map命令之前的数据条数必须小于20条，超出部分讲丢弃。
map命令是否可以使用cache。使用cache可以加快速度但同时会增加内存的使用，默认不使用cache，对应的配置项为map.use_cache。
map（序列映射）命令可以**引用上次搜索的结果**，作为下次搜索的条件。它的原理是将上一次查询的结果通过管道传给下一次查询的参数去调用，可以重复调用一次或多次，这样就能很快定位到一些**不适合直接查询的日志**。
#### 场景
map可以**引用上次搜索的结果**，作为下次搜索的条件。可以重复引用一次或多次，这样就能很方便地定位到一些**不适合直接查询的日志**，或者是计算出一些**不适合直接计算的数值**。
#### 示例
1.客户要求根据流水号实现直接查看上下文，不通过页面点击"查看上下文"的方式。如图，线程号WebContainer为9的这笔交易日志被其他线程号（24）的日志分割，上下文查看起来很不方便。
下面利用单笔交易日志的线程号相同的原理，使用map命令去实现。
**日志样例**
![电脑屏幕的截图 描述已自动生成](media/image1.png){width="5.7625in"
height="2.7459011373578304in"}
**实现方法**
第一步，通过字段提取解析出seqno流水号、thread线程号字段
第二步，通过seqno获得这笔交易日志的线程号
appname:test4 test.SEQ_NO:111794513693
\|stats count() as cnt by test.thread
![社交网络的手机截图
描述已自动生成](media/image2.png){width="5.763888888888889in"
height="1.5180555555555555in"}
第三步，用map命令引用线程号结果实现查看单笔交易的上下文
appname:test4 test.SEQ_NO:111794513693
\|stats count() as cnt by test.thread
\|map \"appname:test4 test.thread:\$test.thread\$
\|sort by +timestamp
\|table timestamp,raw_message\"
\|eval timestamp=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss,SSS\")
![社交网站的手机截图
描述已自动生成](media/image3.png){width="5.763888888888889in"
height="2.537181758530184in"}
第四步，在仪表盘中进行如下输入项设置和通用配置
![手机屏幕截图
描述已自动生成](media/image4.png){width="2.631751968503937in"
height="2.5588254593175854in"}![社交网站的手机截图
描述已自动生成](media/image5.png){width="2.27952646544182in"
height="2.492584208223972in"}
**最终实现效果**
指定任意一个流水号进行查询，能直接查到这笔交易的上下文，无需再点击"查看上下文"按钮。
![社交网站的手机截图
描述已自动生成](media/image6.png){width="5.656567147856518in"
height="2.3336756342957132in"}
2.先通过某一关键词获取到开始时间和结束时间，然后在该时间段内查找其他日志。
\*\|map "starttime=\$starttime\$ endtime=\$endtime\$ "
**transpose 行列转换**
#### 作用
将结果的行和列进行90°的置换；
#### 语法
transpose \[count\] row=\(,\)\*
column=\(,\)\*
valuefield=\(,field)\*
#### 场景
通过转置可以从相对的维度来观察数据；
#### 示例
未进行转置，分组appname,tag统计出现的事件数：
\*
\|stats count() as cnt by appname, tag
\|limit 5
![](media/image7.png){width="5.763888888888889in"
height="2.1666666666666665in"}
> 通过transpose命令转置后，可以从tag维度看出各个tag下所对应的事件数，
\*
\|stats count() as cnt by appname, tag
\|limit 5
\|transpose row=appname column=tag valuefield=cnt
![](media/image8.png){width="5.763888888888889in"
height="1.7763888888888888in"}
# 绘图展示类命令
### timechart 生成曲线图
#### 作用
timechart的行为是将时间分桶后的统计行为
#### 场景
1.bucket + stats by
的升级版，可直接出图，不用再手动配置图形，更加适用于直接画图，不需要调整配置
2.在告警中可使用这个命令直接让邮件推送附带上一张图片，仅该命令有效
#### 语法
timechart \[timechart_params\]\* stats_as_function
\[stats_as_function\]\*
\[byfieldlist\]\* \[by_params\]\*
timechart_params可用参数
\[sep=\\] \[format=\\] \[cont=\\]
\[limit=\\] \[bins=\\] \[span=\\]
\[minspan=\\]
\[startindex=\\] \[endindex=\\]
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **参数(均为可选参数)**     **说明**
  -------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------
  \[sep=\\]         表示by field和统计字段组合时的分隔符，默认值为\":\"\
                             如max(agent_send_timestamp) as ma, by logtype，logtype值为apache时，sep=\"+\" 那么组合出来的字段值为ma+apache
  \[format=\\]      表示规定字段的组合分隔符和组合顺序，默认值为\"AGG:AGG:VAL\"\
                             AGG为统计生成的值，如 max(a) as ma\AGG为统计生成的值，如max(a)asma\VAL为by filed值，如 by logtype，logtype值为apache时\
                             那么生成的值为ma:apache
  \[cont=\\]          表示是否将不连续的时间桶补充为连续，默认为false\
                             统计的某个时间段无数据时，默认会将这个时间段生成的行数据去掉
  \[limit=\\]          表示限制使用by field值的个数，默认值为无穷大
  \[bins=\\]           表示最多有多少个桶，默认值100\
                             timechart指令的结果中分桶个数由bins、span、minspan共同决定，bins只规定了桶的最多个数，桶的个数和时间间隔也会随着整个查询的timespan而动态调整
  \[span=\\]      表示分桶间隔，格式为数字+单位，与bucket指令span参数的格式相同
  \[minspan=\\]   表示最小分桶间隔，格式与span相同。
  \[startindex=\\]     表示从所有桶中的第几个桶开始取，前面的桶对应的行将被舍弃
  \[endindex=\\]       默认值为无穷大，表示取到所有桶中的第几个桶，后面的桶对应的行将被舍弃\
                             与数组的取值类似
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
by_params可用参数
\[useother=\\] \[otherstr=\\] \[rendertype=\\]
  -----------------------------------------------------------------------------------------------------------------------------
  **参数(均为可选)**          **说明**
  --------------------------- -------------------------------------------------------------------------------------------------
  \[useother=\\]       表示如果限制了limit的大小，落入limit之后的byfield的值是否使用other代替，即：不代替并舍弃这些列\
                              默认值:true
  \[otherstr=\\]     表示useother为true时使用otherstr指定的字符串来代替落入limit之后的byfield的值，默认值为other。
  \[rendertype=\\]   用于指定绘图的类型\
                              可选值：line(折线图)，area(面积图)，scatter(散点图)，column(柱状图)
  -----------------------------------------------------------------------------------------------------------------------------
#### 示例
示例1：统计每30分钟各个appname有多少条日志，使用的默认参数
appname:\*
\| timechart span=30m count() as cnt by appname
![https://i.loli.net/2020/03/09/vfuOpyVDWZioU1m.png](media/image9.png){width="5.763888888888889in"
height="2.5548611111111112in"}
示例2：统计每30分钟各个appname有多少条日志，appname值与cnt字段以字符\*\*拼接，同时格式为appname值\*\*cnt，限定appname只展示15列值
appname:\*
\|timechart sep=\",\" format=\"\$VAL\*\*\$AGG\" limit=15 span=30m
count() as cnt by appname
![https://i.loli.net/2020/03/05/kaq1RKl6nr742XC.png](media/image10.png){width="5.763888888888889in"
height="2.6375in"}
示例3：作用与上面一致，由于timechart有直接出图的功能，可以加入rendertype参数让统计结果直接生成一个趋势图，可直接生成以下几种图
-   line(折线图)
-   area(面积图)
-   scatter(散点图)
-   column(柱状图)
appname:\*
\|timechart rendertype=\"line\" sep=\",\" format=\"\$VAL\*\*\$AGG\"
limit=15 span=30m count() as cnt by appname
![https://i.loli.net/2020/03/05/hjmKUNn9lFpEqed.png](media/image11.png){width="5.763888888888889in"
height="3.517361111111111in"}
### timewrap 实现不同时间段的数据对比
#### 命令研发场景
日常实施分析中经常需要对不同时间段的数据进行对比（同比或环比），比如今年1月和2月的交易量环比，或今年1月和去年1月的交易量同比。如果使用append命令实现，语句往往会写得很长，而且数据统计语句的是重复的。为了更方便快捷地实现这个需求，timewrap命令应运而生。
#### 作用
实现**不同时间段之间的同一数据指标对比。**
#### 语法
timewrap \ \[series=relative\|exact\|short \]
align=\[now\|end\] \[timeformat=\\] \[timefield=\\]
**必要参数：**
\
语法：\\
描述：描述span的时间跨度
\：
语法：s\|m\|h\|d\|w\|M\|y
描述：时间单位，分别表示秒，分钟，小时，天，周，月，年
**可选参数：**
series
可选值：relative\|exact\|short
描述：命名生成的新列，当series=relative，且span=1d时，新生成的字段名为0days_before，1days_before；当series=exact时，进一步通过timeformat参数来命令。
align
可选值：now\|end
描述：最后的时间点对齐到搜索的结束时间还是当前时间
timeformat
语法：和时间格式相同
描述：当参数series=exact时，timeformat参数才会生效。新生成的列名会按照timeformat指定的格式进行命名。例如，timeformat="yyyy-MM-dd"，则新生成的两列字段名为2020-01-01、2020-01-02。
\：
语法：\
描述：指定时间字段的字段名，默认为_time
#### 场景
timewrap这个命令就是用来将不同时间段的某种数据进行统计，最后按不同时间段分组，实现同环比。**timewrap所解决的核心问题就是不同时间段之间的数据对比。**timewrap使用时一般必须接在timechart或bucket后面。
时间段又可以分为**连续时间段**和**不连续时间段**，SPL难度也不相同，连续时间段对比简单，不连续时间段对比较复杂。
#### 示例
1\.
连续时间段。最简单的今年1月与今年2月环比场景，它的时间段就是连续的。又比如统计昨天和今天的交易量对比，也是环比，而昨天和今天的时间也连续，SPL语句为：（为方便计算，以日志量作为交易量）
starttime="-1d/d\" endtime="+1d/d" \*
\|timechart span=1h count() as cnt
\|timewrap 1d
![地图上有字
描述已自动生成](media/image12.png){width="5.722905730533683in"
height="2.8354166666666667in"}
2\.
不连续时间段。较复杂的今年1月与去年1月的同比场景，它的时间段就是不连续的。又比如统计上周一和本周一的交易量对比，上周一和本周一时间不连续。这种情况下需要对timewrap后的结果进行处理，仅保留每周一的数据。
SPL语句为：