title:SybilGuard: defending against sybil attacks via social networks
author:Haifeng Yu and
Michael Kaminsky and
Phillip B. Gibbons and
Abraham Flaxman
576
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 16, NO. 3, JUNE 2008
SybilGuard: Defending Against Sybil Attacks via
Social Networks
Haifeng Yu, Michael Kaminsky, Phillip B. Gibbons, Member, IEEE, and Abraham D. Flaxman
Abstract—Peer-to-peer and other decentralized, distributed sys-
tems are known to be particularly vulnerable to sybil attacks. In a
sybil attack, a malicious user obtains multiple fake identities and
pretends to be multiple, distinct nodes in the system. By control-
ling a large fraction of the nodes in the system, the malicious user
is able to “out vote” the honest users in collaborative tasks such as
Byzantine failure defenses. This paper presents SybilGuard, a novel
protocol for limiting the corruptive inﬂuences of sybil attacks. Our
protocol is based on the “social network” among user identities,
where an edge between two identities indicates a human-estab-
lished trust relationship. Malicious users can create many identi-
ties but few trust relationships. Thus, there is a disproportionately
small “cut” in the graph between the sybil nodes and the honest
nodes. SybilGuard exploits this property to bound the number of
identities a malicious user can create. We show the effectiveness of
SybilGuard both analytically and experimentally.
Index Terms—Social networks, sybil attack, SybilGuard, sybil
identity.
I. INTRODUCTION
AS THE SCALE of a decentralized distributed system in-
creases, the presence of malicious behavior (e.g., Byzan-
tine failures) becomes the norm rather than the exception. Most
designs against such malicious behavior rely on the assumption
that a certain fraction of the nodes in the system are honest. For
example, virtually all protocols for tolerating Byzantine failures
assume that at least 2/3 of the nodes are honest. This makes these
protocols vulnerable to sybil attacks [1], in which a malicious
user takes on multiple identities and pretends to be multiple, dis-
tinct nodes (called sybil nodes or sybil identities) in the system.
With sybil nodes comprising a large fraction (e.g., more than
1/3) of the nodes in the system, the malicious user is able to
“out vote” the honest users, effectively breaking previous de-
fenses against malicious behaviors. Thus, an effective defense
against sybil attacks would remove a primary practical obstacle
to collaborative tasks on peer-to-peer (p2p) and other decentral-
ized systems. Such tasks include not only Byzantine failure de-
Manuscript received January 31, 2007; revised October 31, 2007; approved
by IEEE/ACM TRANSACTIONS ON NETWORKING Editor D. Yau. This work was
supported in part by NUS Grant R-252-050-284-101 and Grant R-252-050-284-
133. A preliminary version of this paper appeared in the Proceedings of the
ACM SIGCOMM 2006 Conference, Pisa, Italy.
H. Yu is with the Computer Science Department, National University of Sin-
gapore, Singapore 117543 (e-mail: PI:EMAIL).
M. Kaminsky and P. B. Gibbons are with Intel Research Pittsburgh, Pitts-
burgh, PA 15213 USA (e-mail: PI:EMAIL; phillip.b.
PI:EMAIL).
A. D. Flaxman was with Carnegie Mellon University, Pittsburgh, PA 15213
USA. He is now with Microsoft Research, Redmond, WA 98052 USA (e-mail:
PI:EMAIL).
Digital Object Identiﬁer 10.1109/TNET.2008.923723
fenses, but also voting schemes in ﬁle sharing, DHT routing,
and identifying worm signatures or spam.
Problems With Using a Central Authority. A trusted central
authority that issues and veriﬁes credentials unique to an actual
human being can control sybil attacks easily. For example, if the
system requires users to register with government-issued social
security numbers or driver’s license numbers, then the barrier for
launching a sybil attack becomes much higher. The central au-
thority may also instead require a payment for each identity. Un-
fortunately, there are many scenarios where such designs are not
desirable. For example, it may be difﬁcult to select/establish a
single entity that every user worldwide is willing to trust. Further-
more, the central authority can easily be a single point of failure,
a single target for denial-of-service attacks, and also a bottle-
neck for performance, unless its functionality is itself widely dis-
tributed. Finally, requiring sensitive information or payment in
order to use a system may scare away many potential users.
Challenges
in Decentralized Approaches. Defending
against sybil attacks without a trusted central authority is much
harder. Many decentralized systems today try to combat sybil
attacks by binding an identity to an IP address. However,
malicious users can readily harvest (steal) IP addresses. Note
that these IP addresses may have little similarity to each other,
thereby thwarting attempts to ﬁlter based on simple character-
izations such as common IP preﬁx. Spammers, for example,
are known to harvest a wide variety of IP addresses to hide
the source of their messages, by advertising BGP routes for
unused blocks of IP addresses [2]. Beyond just IP harvesting, a
malicious user can co-opt a large number of end-user machines,
creating a botnet of thousands of compromised machines
spread throughout the Internet. Botnets are particularly hard to
defend against because nodes in botnets are indeed distributed
end users’ computers.
The ﬁrst investigation into sybil attacks [1] proved a series
of negative results, showing that they cannot be prevented un-
less special assumptions are made. The difﬁculty stems from
the fact that resource-challenge approaches, such as computa-
tion puzzles, require the challenges to be posed/validated simul-
taneously. Moreover, the adversary can potentially have signif-
icantly more resources than a typical user. Even puzzles that
require human efforts, such as CAPTCHAs [3], can be reposted
on the adversary’s web site to be solved by other users seeking
access to the site. Furthermore, these challenges must be per-
formed directly instead of trusting someone else’s challenge re-
sults, because sybil nodes can vouch for each other. A more re-
cent proposal [4] suggests the use of network coordinates [5] to
determine whether multiple identities belong to the same user
(i.e., have similar network coordinates). Despite its elegance, a
malicious user controlling just a moderate number of network
1063-6692/$25.00 © 2008 IEEE
YU et al.: SYBILGUARD: DEFENDING AGAINST SYBIL ATTACKS VIA SOCIAL NETWORKS
577
positions (e.g., tens in practice) can fabricate network coordi-
nates and thus break the defense. Finally, reputation systems
based on historical behaviors of nodes are not sufﬁcient either,
because the sybil nodes can behave initially, and later launch an
attack. Typically, the damage from such an attack can be much
larger than the initial contribution (e.g., the damage caused by
throwing away another user’s backup data is much larger than
the contribution of storing the data). In summary, there has been
only limited progress on how to defend against sybil attacks
without a trusted central authority, and the problem is widely
considered to be quite challenging.
This paper presents SybilGuard, a novel decentralized pro-
tocol that limits the corruptive inﬂuence of sybil attacks, in-
cluding sybil attacks exploiting IP harvesting and even some
sybil attacks launched from botnets outside the system. Our
design is based on a unique insight regarding social networks
(Fig. 1), where identities are nodes in the graph and (undirected)
edges are human-established trust relations (e.g., friend rela-
tions). The edges connecting the honest region (i.e., the region
containing all the honest nodes) and the sybil region (i.e., the
region containing all the sybil identities created by malicious
users) are called attack edges. Our protocol ensures that the
number of attack edges is independent of the number of sybil
identities, and is limited by the number of trust relation pairs
between malicious users and honest users.
SybilGuard: A New Defense Against Sybil Attacks. The
basic insight is that if malicious users create too many sybil
identities, the graph becomes “strange” in the sense that it has
a small quotient cut, i.e., a small set of edges (the attack edges)
whose removal disconnects a large number of nodes (all the
sybil identities) from the rest of the graph. On the other hand, we
will show that social networks do not tend to have such cuts. Di-
rectly searching for such cuts is not practical, because we would
need to obtain the global topology and verify each edge with
its two endpoints. Even if we did know the global topology, the
problem of ﬁnding cuts with the smallest quotient (the Minimum
Quotient Cut problem) is known to be NP-hard.
Instead, SybilGuard relies on a special kind of veriﬁable
random walk in the graph and intersections between such
walks. These walks are designed so that the small quotient
cut between the sybil region and the honest region can be
used against the malicious users, to bound the number of sybil
identities that they can create. We will show the effectiveness
of SybilGuard both analytically and experimentally.
Section II more precisely deﬁnes our system model and
the sybil attack. Section III presents the SybilGuard design.
Sections IV and V provide further details, including discussing
SybilGuard’s guarantees and how it handles dynamic social
networks. The effectiveness of SybilGuard is shown experi-
mentally in Section VI. Finally, Section VII discusses related
work and Section VIII draws conclusions.
II. MODEL AND PROBLEM FORMULATION
This section formalizes the desirable properties and functions
of a defense system against sybil attacks. We begin by deﬁning
honest human beings as
our system model. The system has
honest users, and one or more malicious human beings as ma-
licious users. By deﬁnition, a user is distinct. Each honest user
has a single (honest) identity, while each malicious user has one
or more (malicious) identities. To unify terminology, we simply
refer to all the identities created by the malicious users as sybil
identities. Identities are also called nodes, and we will use “iden-
tity” and “node” interchangeably. Honest users obey the defense
system protocol. All malicious users may collude, and we say
that they are all under the control of an adversary. The adver-
sary may eavesdrop on any message sent between users over the
computer network (Internet).
Nodes participate in the system to receive and provide ser-
vice (e.g., ﬁle backup service) as peers. Because a node in the
system may be honest or sybil, a defense system against sybil
(called a
attacks aims to provide a mechanism for any node
veriﬁer) to decide whether or not to accept or reject another node
is willing to
(called the suspect). Accepting means that
receive service from and provide service to .
Desirable Guarantees. Ideally, the defense system should
accepts only honest nodes. But because such
guarantee that
an idealized guarantee is challenging to achieve, we aim at
bounding the number of sybil nodes that are accepted. This
weaker guarantee is still sufﬁciently strong to be useful in most
application scenarios for the following reason. The application
already needs to tolerate malicious users even without sybil
attacks. A sybil attack simply enables the malicious users to
create an unlimited number of sybil nodes to exceed the “toler-
ance” threshold of the application’s defense system (e.g., 1/3 in
byzantine consensus), regardless of how high the “tolerance”
threshold is. Thus bounding the number of sybil nodes will pre-
vent the adversary from doing so, and then the application can
rely on existing techniques to effectively tolerate the malicious
users.
As a concrete example, let us consider maintaining replicas of
ﬁle blocks on a DHT-based storage system. DHT-based systems
(such as those based on Chord [8]) place replicas on a random
set of nodes in the system, without knowledge of which nodes
are honest and which are sybil. Our goal here is to ensure that a
majority of the replicas are placed on honest nodes, so that we
can use majority voting to retrieve the correct ﬁle block. If the
number of accepted sybil nodes is smaller than the number of
, then from Chernoff bounds [9], the probability
honest nodes
of having a majority of the replicas on honest nodes approaches
1.0 exponentially fast with the number of replicas.
sybil nodes, where
Summary of SybilGuard Guarantees. SybilGuard is com-
pletely decentralized and all functions are with respect to a
given node. SybilGuard guarantees that with high probability,
is the
an honest node accepts at most
is the length of the
number of attack edges in the system and
protocol’s random walks. Conceptually, in SybilGuard, there
is an equivalence relation that partitions all accepted nodes
into equivalence classes (called equivalence groups). Nodes
that are rejected do not belong to any equivalence groups. An
equivalence group that includes one or more sybil nodes is
guarantee
called a sybil group. SybilGuard achieves its
by (i) bounding the number of sybil groups within , and (ii)
. SybilGuard
bounding the size of each sybil group within
bounds the number and the size of sybil groups without nec-
essarily knowing which groups are sybil. Also, the concept of
sybil groups does not need to be visible to the application.
578
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 16, NO. 3, JUNE 2008
Fig. 1. The social network with honest nodes and sybil nodes. Note that re-
gardless of which nodes in the social network are sybil nodes, we can always
“pull” these nodes to the right side to form the logical network in the ﬁgure.
As a side effect of bounding the number and size of sybil
groups, SybilGuard may (mistakenly) reject some honest nodes.
SybilGuard guarantees that an honest node accepts, and also
is accepted by, most other honest nodes (except a few percent
in our later simulation) with high probability. Thus, an honest
node can successfully obtain service from, and provide service
to, most other honest nodes. Notice that because SybilGuard is
can be dif-
decentralized, the set of accepted nodes by node
. However, the difference
ferent from those accepted by node
should accept most honest
should be small since both
nodes with high probability.
and
III. SYBILGUARD DESIGN
In this section, we present our SybilGuard design. We will
assume a static social network where all nodes are online; we
will discuss user and node dynamics in Section V.
A. Social Network and Attack Edges
SybilGuard leverages the existing human-established trust re-
lationships among users to bound both the number and size of
sybil groups. All honest nodes and sybil nodes in the system
form a social network (see Fig. 1). An undirected edge exists
between two nodes if the two corresponding users have strong
social connections (e.g., colleagues or relatives) and trust each
other not to launch a sybil attack. If two nodes are connected by
an edge, we say the two users are friends. Notice that here the
edge indicates strong trust, and the notion of friends is quite dif-
ferent from friends in other systems such as online chat rooms.
An edge may exist between a sybil node and an honest node
if a malicious user (Malory) successfully fools an honest user
(Alice) into trusting her. Such an edge is called an attack edge
to denote the total number of attack edges. The
and we use
authentication mechanism in SybilGuard ensures that regard-
less of the number of sybil nodes Malory creates, Alice will
share an edge with at most one of them (as in the real social
network). Thus, the number of attack edges is limited by the
number of trust relation pairs that the adversary can establish
between honest users and malicious users. While the adversary
has only limited inﬂuence over the social network, we do as-
sume it may have full knowledge of the social network.
The degree of the nodes in the social network tends to be
much smaller than , so the system would be of little practical
use if nodes only accepted their friends. Instead, SybilGuard
bootstraps from the given social network a protocol that enables
honest nodes to accept a large fraction of the other honest nodes.
Fig. 2. Two routes of length 3. Sharing an edge necessarily means that one
route starts after the other.
It is important to note that SybilGuard does not increase or de-
crease the number of edges in the social network as a result of
its execution.
B. Random Routes
SybilGuard uses a special kind of random walks, called
random routes, in the social network. In a standard random
walk, at each hop, the current node ﬂips a coin on the ﬂy and
selects a (uniformly) random edge to direct the walk. In random
routes, each node uses a pre-computed random permutation
as a one-to-one mapping from incoming edges to outgoing
edges. Speciﬁcally, each node uses a randomized routing table
to choose the next hop. A node with
neighbors uniformly
” among all
randomly chooses a permutation “
. If a random route comes from the
permutations of
as the next hop. It is possible that
th edge,
, once chosen, will
for some . The routing table of
uses edge
never change (unless
’s degree changes—see Section V).