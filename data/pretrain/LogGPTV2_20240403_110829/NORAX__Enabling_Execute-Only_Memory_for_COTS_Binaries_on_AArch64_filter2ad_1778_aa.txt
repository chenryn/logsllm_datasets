title:NORAX: Enabling Execute-Only Memory for COTS Binaries on AArch64
author:Yaohui Chen and
Dongli Zhang and
Ruowen Wang and
Rui Qiao and
Ahmed M. Azab and
Long Lu and
Hayawardh Vijayakumar and
Wenbo Shen
2017 IEEE Symposium on Security and Privacy
NORAX: Enabling Execute-Only Memory
for COTS Binaries on AArch64
Yaohui Chen∗
Ahmed M. Azab†
Dongli Zhang∗
Long Lu∗
Ruowen Wang†
Hayawardh Vijayakumar†
Rui Qiao∗
Wenbo Shen†
∗ Stony Brook University
† Samsung Research America
Abstract—Code reuse attacks exploiting memory disclosure
vulnerabilities can bypass all deployed mitigations. One promis-
ing defense against this class of attacks is to enable execute-
only memory (XOM) protection on top of ﬁne-grained address
space layout randomization (ASLR). However, recent works
implementing XOM, despite their efﬁcacy, only protect programs
that have been (re)built with new compiler support,
leaving
commercial-off-the-shelf (COTS) binaries and source-unavailable
programs unprotected.
We present the design and implementation of NORAX, a
practical system that retroﬁts XOM into stripped COTS binaries
on AArch64 platforms. Unlike previous techniques, NORAX
requires neither source code nor debugging symbols. NORAX
statically transforms existing binaries so that during runtime
their code sections can be loaded into XOM memory pages
with embedded data relocated and data references properly
updated. NORAX allows transformed binaries to leverage the
new hardware-based XOM support—a feature widely available
on AArch64 platforms (e.g., recent mobile devices) yet virtually
unused due to the incompatibility of existing binaries. Further-
more, NORAX is designed to co-exist with other COTS binary
hardening techniques, such as in-place randomization (IPR). We
apply NORAX to the commonly used Android system binaries
running on SAMSUNG Galaxy S6 and LG Nexus 5X devices. The
results show that NORAX on average slows down the execution
of transformed binaries by 1.18% and increases their memory
footprint by 2.21%, suggesting NORAX is practical for real-world
adoption.
I. INTRODUCTION
Modern commodity operating systems employ code in-
tegrity protection techniques, such as data execution pre-
vention (DEP), to prevent traditional code injection attacks.
Consequently, recent attacks [1], [2] increasingly leverage
code-reuse techniques to gain control of vulnerable programs.
In code reuse attacks, a target application’s control ﬂow is
manipulated in a way that snippets of existing code (called
gadgets) are chained and run to carry out malicious activities.
Knowledge of process memory layout is a key prerequisite
for code-reuse attacks to succeed. Attackers need to know
the exact binary instruction locations in memory to assemble
the chain of gadgets. Commodity operating systems widely
adopt address space layout randomization (ASLR), which
loads code binaries at random memory locations unpredictable
to attackers. Without knowing the locations of needed code or
gadgets, attackers cannot build code-reuse chains.
However, memory disclosure attacks can use information
leaks in programs to de-randomize code locations, thus de-
feating ASLR. Such attacks either read the program code
(direct de-randomization) or read code pointers (indirect de-
randomization). Given that deployed ASLR techniques ran-
domize the load address of a large chunk of data or code,
leaking a single code pointer or a small sequence of code
allows attackers to identify the corresponding chunk, infer its
base address, and calculate the addresses of gadgets contained
in the chunk.
More sophisticated ﬁne-grained ASLR techniques [3]–[7]
aim at shufﬂing code blocks within the same module to make
it more difﬁcult for attackers to guess the location of binary
instructions. Nevertheless, research by Snow et al. [1] proves
that memory disclosure vulnerabilities can bypass the most
sophisticated ASLR techniques.
Therefore, a robust and effective defense against code-
reuse attacks should combine ﬁne-grained ASLR with memory
disclosure prevention. Some recent works proposed to prevent
memory disclosures using compile-time techniques [8]–[10].
Despite their effectiveness, these solutions cannot cover COTS
binaries that cannot be easily recompiled and redeployed.
These binaries constitute a signiﬁcant portion of real-world
applications that need protection.
XnR [11] is a recent work that enables executable-only
memory (XOM [12]), which prevents code in memory from
being read as data, and in turn, blocks leaking of code
locations. However, XnR implements XOM at the OS level via
paging-based access control, which can cause high overhead.
Moreover, XnR cannot directly protect COTS binaries that are
not originally built to make use of this protection.
Other defenses against memory disclosure follow the idea of
destructive code reads [13], [14]: code is destroyed upon being
read, and therefore cannot be later executed as part of a code
reuse exploit. Unfortunately, it has been shown that destructive
code reads can be bypassed through code reloading [15]. In
addition, such defenses are not suitable for Android, where
all apps load system libraries at
the same locations [16].
© 2017, Yaohui Chen. Under license to IEEE.
DOI 10.1109/SP.2017.30
304
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
Therefore, a memory read in one app enables code reuse
attacks in any other app.
In this work, we propose NORAX 1, which protects COTS
binaries from code memory disclosure attacks. NORAX allow
COTS binaries to be loaded in hardware-enforced XOM,
a security feature supported by recent ARM CPUs (i.e.,
AArch64). Such CPUs are widely seen on today’s mobile
devices. Without NORAX, to use the XOM feature, binaries
need to be (re)built with the necessary compiler support. This
requirement stands in between the valuable security feature
and a large number of COTS binaries (e.g., all Android system
executables and libraries) that are already running on AArch64
CPUs but were not compiled with XOM support. NORAX
removes this requirement. It automatically patches existing bi-
naries and loads their code to XOM-enforced memory regions,
without affecting binaries’ normal execution. As a result,
binaries without special (re)compilation can beneﬁt from the
hardware-backed XOM feature and be protected against code
memory disclosure. Further, when used together with ASLR,
NORAX enables robust mitigation against code reuse attacks
for COTS binaries. It is worth noting that we use Android as
the reference platform for building and evaluating NORAX.
However, NORAX’s approach and techniques are generally
applicable to other AArch64 platforms.
NORAX consists of four major components: NDisassem-
bler, NPatcher, NLoader, and NMonitor. The ﬁrst two perform
ofﬂine binary analysis and transformation. They convert any
COTS binary built for AArch64 without XOM support into
one whose code can be protected by XOM during runtime.
The other two components provide supports for loading and
monitoring the patched, XOM-enabled binaries during run-
time. The design of NORAX tackles a fundamentally difﬁcult
problem: identifying data embedded in code segments, which
are common in ARM binaries, and relocating such data
elsewhere so that during runtime code memory pages can be
made executable-only while allowing all embedded data to be
readable.
As a evaluation, we apply NORAX to Android system
binaries running on SAMSUNG Galaxy S6 and LG Nexus
5X devices. The results show that NORAX on average slows
down the transformed binaries by 1.18% and increases their
memory footprint by 2.21%, suggesting NORAX is practical
for real-world adoption.
In summary, our work makes the following contributions:
• We discover and address the gap between the highly
valuable XOM feature and existing binaries, which need
but cannot use the feature without recompilation.
• We design and implement a comprehensive system that
converts COTS binaries to be XOM-compatible without
1NORAX stands for NO Read And eXecute.
requiring source code or debugging symbols.
• We show that code-data separation problem, although
undecidable in principle,
is in practice achievable on
AArch64 platforms using our novel embedded data de-
tection algorithm.
• We perform rigorous and extensive evaluations with
stripped system executables and libraries on Android and
show that NORAX is practical, effective and efﬁcient.
The rest of the paper is organized as follows: In § II we
lay out the background for execute-only memory and explain
the code-data separation challenges tackled by NORAX; In
§ III we derive the requirements for a practical solution and
then present the design of our system; In § IV we discuss in
details the system implementation and the optimization for our
reference platform Android; We then examine the correctness
of NORAX and evaluate its performance in § V. We contrast
the related works in § VI and analyze the compatibility of
NORAX with other COTS hardening techniques and its current
limitations in § VII. We conclude the paper in § VIII.
II. BACKGROUND
NORAX makes use of
the modern MMU support
in
AArch64 architecture to create execute-only memory, which
is a hardware feature now widely available yet virtually
unused due to compatibility issues. To bridge the gap, NORAX
reconstructs COTS binaries running on commodity Android
smartphones to enforce the R ⊕ X policy. In the rest of this
section, we explain the necessary technical background and
the challenges we face when building the system.
AArch64 eXecute-Only Memory (XOM) Support: AArch64
deﬁnes four Exception Levels, from EL0 to EL3. EL0 has the
lowest execution privilege, usually runs normal user applica-
tions; EL1 is usually for hosting privileged systems, such as
operating system kernel; EL2 is designed for hypervisor while
EL3 is for secure monitor.
In order to enforce the instruction access permission for dif-
ferent Exception Levels, AArch64 leverages the Unprivileged
eXecute Never (UXN) bit, Privileged eXecute-Never (PXN)
bit and two AP (Access Permission) bits deﬁned in the page
table entry [17]. For the user space program code page, the
UXN bit is set to “0”, which allows the code execution at
EL0, while PXN is set to “1”, which disables the execution
in EL1. With such UXN and PXN settings, the instruction
access permissions deﬁned by AP bits are shown in Table I.
It is easy to see that we can set the AP bits in page table
entry to “10”, so that the kernel running in EL1 will enforce
the execute-only permission for user space program, which is
running in EL0. In other words, the corresponding memory
page will only permit for instruction fetch for user space
program, while all read/write data accesses will be denied.
305
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Access permissions for stage 1 EL0 and EL1
AP[2:1]
00
01
10
11
EL0 Permission
Executable-only
Read/Write, Conﬁg-Executable
Executable-only
Read, Executable
EL1 Permission
Read/Write
Read/Write
Read-only
Read-only
However, the kernel still has the read permission to that page,
which means that it can help the user space program read
the intended memory area if necessary, but need to perform
security checks beforehand.
Position-Independent Binaries
in Android: Position-
independent code (PIC) is the kind of code compiler generates
for a module that does not assume any absolute address, that
is, no matter where the module is loaded, it will be able
to function correctly. The mechanism works by replacing all
the memory accesses using hard-coded addresses with PC-
relative addressing instructions. Position-independent executa-
bles (PIE) are executables that employ PIC code. In Android,
ever since version 5 (codename: Lolipop), in order to fully
enjoy the beneﬁt of ASLR, all the executables are required
to be compiled as PIE. To enforce this, Google removed the
support for non-PIE loading from the Bionic Linker [18].
Nowadays, smartphones equipped with AArch64 CPU are
most likely running Android OSes after Lolipop, meaning
the majority of them will only have binaries, including both
executables and shared libraries,
that are compiled to be