# 探索php://filter在实战当中的奇技淫巧
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在渗透测试或漏洞挖掘的过程中，我们经常会遇到`php://filter`结合其它漏洞比如文件包含、文件读取、反序列化、XXE等进行组合利用，以达到一定的攻击效果，拿到相应的服务器权限。
最近看到`php://filter`在ThinkPHP反序列化中频繁出现利用其相应构造可以RCE，那么下面就来探索一下关于`php://filter`在漏洞挖掘中的一些奇技淫巧。
## php://filter
在探索php://filter在实战当中的奇技淫巧时，一定要先了解关于php://filter的原理和利用。
对于PHP官方手册介绍如下
> php://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似
> readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。
>
> php://filter 目标使用以下的参数作为它路径的一部分。复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。
###  参数
###  使用
通过参数去了解php://filter的使用
  * 测试代码
  * 读取文件
payload：
    # 明文读取
    index.php?file1=php://filter/resource=file.txt
    # 编码读取
    index.php?file1=php://filter/read=convert.base64-encode/resource=file.txt
测试结果：
  * 写入文件
payload：
    # 明文写入
    index.php?file2=php://filter/resource=test.txt&txt=Qftm
    # 编码写入
    index.php?file2=php://filter/write=convert.base64-encode/resource=test.txt&txt=Qftm
测试结果：
###  过滤器
通过参考[官方过滤器](https://www.php.net/manual/zh/filters.php)的解释，进行一个简单的描述总结（版本、以及使用的介绍）
**String Filters**
String Filters（字符串过滤器）每个过滤器都正如其名字暗示的那样工作并与内置的 PHP 字符串函数的行为相对应。
**string.rot13**
（自 PHP 4.3.0 起）使用此过滤器等同于用
[str_rot13()](https://www.php.net/manual/zh/function.str-rot13.php)函数处理所有的流数据。
`string.rot13`对字符串执行 ROT13 转换，ROT13 编码简单地使用字母表中后面第 13
个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。
  * Example #1 string.rot13
**string.toupper**
（自 PHP 5.0.0 起）使用此过滤器等同于用
[strtoupper()](https://www.php.net/manual/zh/function.strtoupper.php)函数处理所有的流数据。
string.toupper 将字符串转化为大写
  * Example #2 string.toupper
**string.tolower**
（自 PHP 5.0.0 起）使用此过滤器等同于用
[strtolower()](https://www.php.net/manual/zh/function.strtolower.php)函数处理所有的流数据。
string.toupper 将字符串转化为小写
  * Example #3 string.tolower
**string.strip_tags**
(PHP 4, PHP 5, PHP 7)（自PHP 7.3.0起已弃用此功能。）
使用此过滤器等同于用 [strip_tags()](https://www.php.net/manual/zh/function.strip-tags.php)函数处理所有的流数据。可以用两种格式接收参数：一种是和
[strip_tags()](https://www.php.net/manual/zh/function.strip-tags.php)函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。
string.strip_tags从字符串中去除 HTML 和 PHP 标记，尝试返回给定的字符串 `str` 去除空字符、HTML 和 PHP
标记后的结果。它使用与函数 [fgetss()](https://www.php.net/manual/zh/function.fgetss.php)
一样的机制去除标记。
    Note:
    HTML 注释和 PHP 标签也会被去除。这里是硬编码处理的，所以无法通过 allowable_tags 参数进行改变。
  * Example #4 string.strip_tags
    ");
    fwrite($fp, "bolded text enlarged to a level 1 heading\n");
    fclose($fp);
    /* Outputs:  bolded text enlarged to a level 1 heading   */
    $fp = fopen('php://output', 'w');
    stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
    fwrite($fp, "bolded text enlarged to a level 1 heading\n");
    fclose($fp);
    /* Outputs:  bolded text enlarged to a level 1 heading   */
    ?>
###  **Conversion Filters**
Conversion Filters（转换过滤器）如同 string. _过滤器，convert._ 过滤器的作用就和其名字一样。转换过滤器是 PHP
5.0.0 添加的。
**convert.base64**
convert.base64-encode和 convert.base64-decode使用这两个过滤器等同于分别用
[base64_encode()](https://www.php.net/manual/zh/function.base64-encode.php)和
[base64_decode()](https://www.php.net/manual/zh/function.base64-decode.php)函数处理所有的流数据。
convert.base64-encode支持以一个关联数组给出的参数。如果给出了 `line-length`，base64 输出将被用 `line-length`个字符为 长度而截成块。如果给出了 `line-break-chars`，每块将被用给出的字符隔开。这些参数的效果和用
[base64_encode()](https://www.php.net/manual/zh/function.base64-encode.php)再加上
[chunk_split()](https://www.php.net/manual/zh/function.chunk-split.php)相同。
  * Example #1 convert.base64-encode & convert.base64-decode
     8, 'line-break-chars' => "\r\n");
    $fp = fopen('php://output', 'w');
    stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
    fwrite($fp, "This is a test.\n");
    fclose($fp);
    /* Outputs:  VGhpcyBp
              :  cyBhIHRl
              :  c3QuCg==  */
    $fp = fopen('php://output', 'w');
    stream_filter_append($fp, 'convert.base64-decode');
    fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
    fclose($fp);
    /* Outputs:  This is a test.  */
    ?>
**convert.quoted**
_convert.quoted-printable-encode_ 和 _convert.quoted-printable-decode_ 使用此过滤器的
decode 版本等同于用
[quoted_printable_decode()](https://www.php.net/manual/zh/function.quoted-printable-decode.php)函数处理所有的流数据。没有和 _convert.quoted-printable-encode_ 相对应的函数。
_convert.quoted-printable-encode_ 支持以一个关联数组给出的参数。除了支持和 _convert.base64-encode_
一样的附加参数外， _convert.quoted-printable-encode_ 还支持布尔参数 `binary`和 `force-encode-first`。 _convert.base64-decode_ 只支持 `line-break-chars`参数作为从编码载荷中剥离的类型提示。
  * Example #2 convert.quoted-printable-encode & convert.quoted-printable-decode
    <?php