(15 timeouts in total), Haunted RelSE strongly improves the
performance in terms of speed (1.2× faster in total, up to
3152×), timeouts (8 vs. 15), covered code (8.6×), number
of violation found (+126) and number of programs deemed
insecure (+10). Especially, Haunted RelSE manages to fully
explore small-size real-world cryptographic implementations
(up to one hundred instructions) and to ﬁnd violations in
medium-size real-world cryptographic implementations (a few
thousands instructions).
D. Comparison with Pitchfork and KLEESpectre (RQ3)
KLEESpectre [11] is an adaptation of SE for ﬁnding
Spectre-PHT violations5, following an Explicit exploration
strategy. It analyses LLVM bytecode while Pitchfork and BIN-
SEC/HAUNTED analyze binary code, which gives KLEESpec-
tre a performance advantage. Note that KLEESpectre reports
several types of gadgets but only one—leak secret (LS)—
can actually leak secret data and is a violation of speculative
constant-time,
thus we only report LS gadgets found by
KLEESpectre.
5It also includes cache modeling—disabled for our comparison.
10
Pitchfork [5] is the only competing tool which can analyze
programs for Spectre-STL. It is based on SE and tainting
which is faster than RelSE but also less precise and can report
false alarms (see Section VII). Pitchfork stops a path after
ﬁnding a violation, while BINSEC/HAUNTED continues the
execution. To provide a fair comparison, we also consider a
modiﬁed version of Pitchfork, namely Pitchfork-cont, which
does not stop after ﬁnding a violation.
Table
IV reports
the performance of KLEESpec-
tre, Pitchfork, Pitchfork-cont and BINSEC/HAUNTED on
litmus-pht, litmus-pht-masked, tea, and donna.
We exclude secretbox, ssl3-digest and mee-cbc as
the performance of the tools on these programs will vary
according to how they handle syscalls. We report unique
violations for each tool. We also exclude 6 spurious violations
found by Pitchfork in non executable .data section after
following a transient indirect jump.
Programs
Tool
litmus-pht
litmus-pht
masked
T
H
P
tea
donna
litmus-stl
L
T
S
tea
donna
KLEESpectre
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
KLEESpectre
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
KLEESpectre
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
KLEESpectre
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
Pitchfork
Pitchfork-cont
BINSEC/HAUNTED
T (s)
1817
1.7
6.2
7.2
1751
10.2
10.2
7.8
.4
29.5
29.7
.6
7825
TO
TO
6162
21608*
21610*
2.3
TO
TO
5275
TO
TO
TO

2†
-
-
-
16/16
16/16
16/16
16/16
5/5
5/5
5/5
5/5
4/5
0/5
0/5
4/5
1/4
1/4
4/4
-
-
-
-
-
-

14/16
16/16
16/16
16/16
-
-
-
-
-
-
-
-
-
-
-
-
9/10
9/10
10/10
0/5
0/5
5/5
0/5
0/5
5/5
0
0
0
0
0
0
0
0
0
0
0
0
1
5
5
1
6
6
0
5
5
0
5
5
5
16
17
22
22
0
0
0
0
0
0
0
0
0
0
0
0
11
11‡
13
0
0
26
0
0
73
Table IV: Performance of BINSEC/HAUNTED, Pitchfork and
KLEESpectre on tea, and Spectre-PHT and Spectre-STL
litmus tests. Timeout ( ) is set to 1 hour. †False positives.
‡Excluding 6 spurious violations in (non executable) .data
section. *Excluding , times are respectively 8.1 and 10.6.
For Spectre-PHT, Pitchforks does not seem to follow
an Explicit exploration strategy as it scales well on litmus
tests. Pitchfork-cont is slightly faster than BINSEC/HAUNTED
(1.2×) on litmus-pht, but it is 50× slower on tea and
times-out on donna.
For Spectre-STL however, Pitchfork follows the explicit
strategy which quickly leads to state explosion, poorer
perfomance and more timeouts. The analysis even runs
out-of-memory—taking 32GB of RAM—for six cases of
litmus-stl, 1 tea, and 4 donna. Hence, Pitchfork does
not scale for Spectre-STL even on small-size binaries whereas
our tool can exhaustively explore small-size binaries, using
realistic speculation windows. Our results further show that
BINSEC/HAUNTED ﬁnds 112 more Spectre-STL violations,
identiﬁes 11 more insecure programs and establishes security
of 3 more programs compared to Pitchfork.
VI. NEW VULNERABILITIES AND MITIGATIONS
In this section, we report on: (a) potential problems with
index-masking, a well-known defense against Spectre-PHT,
and propose correct
implementations to avoid them; and
(b) new potential vulnerabilities introduced by popular gcc
options. Programs are compiled with gcc-10.2.0 -m32
-march=i386 -O0. All vulnerabilities were automatically
found by BINSEC/HAUNTED.
a) Index-masking defense: Index-masking [19] is a well
known defense against Spectre-PHT—used in WebKit for
example—which consists in strengthening conditional array
bound checks with branchless bound checks. Indexes are
masked with the length of the array, rounded up to the next
power of two minus one. We give an example of index masking
in Listing 3. For the array publicarray of size 16 the value
of the mask is 15 (0x0f). For an arbitrary index idx, the
masked index (idx & 0x0f) is strictly smaller than 16,
hence the access is in bounds. This countermeasure prevents
out-of-bound reads if the length of the array is a power of two
and limits the scope of out-of-bound reads otherwise.
1
2
3
4
5
6
7
8
void leakThis(uint8_t toLeak) {
tmp &= publicarray2[toLeak * 512];
}
void case_1_masked(uint32_t idx) {
idx = idx & (publicarray_size - 1);
uint8_t toLeak = publicarray[idx];
leakThis(toLeak);
}
Listing 3: Illustration of index-masking
We conﬁrm, as reported by Cauligi et al. [5], that stack
protectors introduce Spectre-PHT violations, and that ret
instructions can be exploited with Spectre-STL to enable ROP-
like attacks [27].
Result. KLEESpectre, as expected, shows similar results as
Explicit RelSE in Table II: it is slightly faster than BIN-
SEC/HAUNTED on tea (1.5×), but slower on litmus-pht
(250×) on litmus-pht-masked (224×). Also, it fails to
report 2 insecure litmus tests: case_7 and case_10. Pro-
gram case_10 contains an indirect leak while KLEESpectre
only searches for direct leaks. Still, case_7 contains a leak
secret (LS) violation that KLEESpectre should report.
Using BINSEC/HAUNTED, we discover that whereas this
countermeasure does protect against Spectre-PHT, it may also
introduce new Spectre-STL vulnerabilities. Take for instance
the compiled version of Listing 3, given in Listing 4. Line 1
computes the value of the mask and store it into eax. Line
2 performs the index masking and stores the masked index in
the memory at [ebp+idx]. Line 3 loads the masked index
into eax. Notice that this load can bypass the store at line 2
and load the old unmasked index idx. Then, line 4 loads the
value at publicarray[idx] into al, allowing the attacker
to read arbitrary memory—including secret data. Finally, the
value of al is used as a load index at
line 5, encoding
11
mov eax, publicarray_size - 1 ; Compute mask
and [ebp + idx], eax ; Store masked index
mov eax, [ebp + idx] ; Bypass prior store
mov al, [@publicarray + eax] ; Out-of-bound load
mov
1
2
3
4
5
Listing 4: Compiled version of Listing 3 with gcc-10.2.0
-m32 -march=i386 -O0
dl, publicarray2[al << 9] ; Leak secret
secret data in the cache. To conclude, because the masked
index is stored in the memory, the masking operation can be
bypassed with Spectre-STL, leading to arbitrary memory read,
and eventually leaking secret data.
This violation of SCT occurs at optimization level O0 with
both clang-11.0 and gcc-10.2 because the masked index
is stored on the stack. We propose a patched implementation
in Listing 5 that forces the index into a register (line 2)
so the masking cannot be bypassed. A second solution is
to set the optimization level to O1 or higher so the store
operation is optimized away—but this solution is fragile as
it completely relies on compiler choices. In these two case,
BINSEC/HAUNTED reports that the program is secure w.r.t.
speculative constant-time.
1
2
3
4
5
void case_1_masked_patched(uint32_t idx) {
register uint32_t ridx asm ("edx");
ridx = idx & (publicarray_size - 1);
uint8_t toLeak = publicarray[ridx];
leakThis(toLeak); }}
Listing 5: Patch of index-masking for Spectre-STL
b) Position-independent-code:
Position-independent
code (PIC), and position-independent executables (PIE) are
compiler options which makes it possible to load a binary
to any memory location without modifying the code. These
options are used to enable address space layout randomization
(ASLR), which loads executables to non-predictable addresses
in order to prevent a attackers from guessing target addresses,
making return oriented programming (ROP) attacks more
challenging. Our version of gcc-10 compiles by default to
position independent executables, which can be disabled by
adding the options -fno-pic -no-pie.
Using BINSEC/HAUNTED, we have discovered that the
code introduced by gcc in position independent executables
may introduce Spectre-STL vulnerabilities. Indeed, on our set
of STL-litmus-tests compiled with -no-pie -fno-pic,
BINSEC/HAUNTED ﬁnds 13 violations and reports 4 programs
as secure and 10 as insecure; whereas on STL-litmus-tests
compiled without these options, it ﬁnds 26 violations and
reports only one program as secure.
In x86, position independent executables access global
variables as an offset from a global pointer which is set
up at the beginning of the function, relatively to the current
location. The current location is not directly accessible but
is obtained via a function x86_get_pc_thunk_ax which
loads its return address to eax. More precisely, a call to
x86_get_pc_thunk_ax stores the return address on the
stack before jumping to the function, then in the function this
return address is loaded into eax. With Spectre-STL, this load
can bypass the previous store and load a stale value into eax.
Because eax is later used as a global offset, controlling its
value, gives an attacker the ability to speculatively read at an
arbitrary address. Take as an example the program in Listing 6,
that we explain line per line:
case_1_masked_patched:
__x86_get_pc_thunk_ax:
; load attacker controlled
; value 0x023f35
eax, 0x9E0FA
edx, (publicarray_size - 0x0A2000)[eax]
mov eax, [esp+0]; bypass stored @ret and
retn
1
2
3
4
5
6
7
8
9
10
11
12
Listing 6: Compiled version of Listing 5, with PIC en-
abled. Secret data is
stored at address 0xC20EF and
publicarray_size at address 0x0A20C0.
call __x86_get_pc_thunk_ax; eax = 0x023f35
add
; eax = 0x0c202f
mov
; edx = [0x0C20EF] = secret
[...]
mov
; Violation: secret dependent load
dl, (publicarray - 0x0A2000h)[eax + edx]
6: Call x86_get_pc_thunk_ax and store ret addr.
2: Load [esp] bypasses the previous store and gets its
value from main memory; which can be populated with
attacker controlled values. Here, let eax take the transient
value 0x023f35.
7: Computes the global pointer for PIC using the transient
value in eax.
8: eax—controlled by the attacker—is used as an offset to
access the global variable publicarray_size. Con-
sequently, secret data at address 0xC20EF is loaded to
edx.
11: Finally, the value of the secret in edx is used as index
for a load, which violates SCT.
VII. RELATED WORK
We have discussed related work on Spectre attacks all along
the paper. In this section, we discuss further the closest related
work and refer the interested reader to an excellent survey by
Canella et al. [2] for a more general discussion on transient
execution attacks and defenses.
Speculative constant-time. Constant-time programming is of-
ten used in cryptographic code in order to prevent side-channel
timing attacks [14]. Since the advent of microarchitectural
attacks in 2018, a few works have extended this property to
speculations [3], [12], [43]. We use in our work the property
of speculative constant-time from Cauligi et al [5].
Relational symbolic execution. Relational symbolic execu-
tion [36] offers a more precise analysis than other techniques
such as tainting. For instance, Pitchfork [5], which is based