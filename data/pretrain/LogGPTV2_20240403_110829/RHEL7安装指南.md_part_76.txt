    :::
    ::: para
    关于其他的完成方法，请参考 `halt`{.command}、`poweroff`{.command} 和
    `shutdown`{.command} Kickstart 选项。
    :::
    ::: para
    如果在 Kickstart 文件中没有明确指定其他方法，则默认使用
    `halt`{.command} 选项完成。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    使用 `reboot`{.command}
    选项[*可能*]{.emphasis}会导致安装的死循环，这要看具体的安装介质和方法。
    :::
    :::
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--eject`{.command} - 重启前尝试弹出安装 DVD（如果是使用 DVD
        安装）。
        :::
    -   ::: para
        `--kexec`{.command} - 使用 [**kexec**]{.application}
        系统调用而不是执行完整重启，这样可以立即将按照的系统载入内存，绕过通常由
        BIOS 或固件执行的硬件初始化。
        :::
        ::: important
        ::: admonition_header
        **重要**
        :::
        ::: admonition
        ::: para
        由于使用 [**kexec**]{.application}
        引导系统时非常复杂，因此无法单独测试，也无法保证在所有环境中均可正常进行。
        :::
        ::: para
        使用 [**kexec**]{.application}
        后，设备注册程序中仍有数据（系统完全引导后通常会清除数据），这样可能会影响一些设备驱动程序。
        :::
        :::
        :::
    :::
[`repo`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805855652960 .indexterm} []{#chap-kickstart-installations.html#idm139805855651840 .indexterm}]{.term}
:   ::: para
    配置作为软件包安装来源的额外的 [**yum**]{.application}
    库。可以指定多个 `repo`{.command} 行。
    :::
    ``` programlisting
    repo --name=repoid [--baseurl=|--mirrorlist=url] [options]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--name=`{.option} - 该库的
        id。这个选项是必选项。如果库名称与另一个之前添加的库冲突，则会忽略它。因为这个安装程序使用预先配置的库列表，就是说您无法添加名称与预先配置的库相同的库。
        :::
    -   ::: para
        `--baseurl=`{.option} - 程序库的 URL。这里不支持 yum
        库配置文件中使用的变量。可以使用这个选项，也可以使用
        `--mirrorlist`{.option}，但不能同时使用这两个选项。
        :::
    -   ::: para
        `--mirrorlist=`{.option} - URL
        指向该程序库的一组镜像。这里不支持 yum
        库配置文件中使用的变量。可以使用这个选项，也可以使用
        \--baseurl，但不能同时使用这两个选项。
        :::
    -   ::: para
        `--install`{.option} - 将所安装系统提供的存储库配置保存在
        `/etc/yum.repos.d/`{.filename} 目录中。不使用这个选项，在
        Kickstart
        文件中配置的程序库只能在安装过程中使用，而无法在安装的系统中使用。
        :::
    -   ::: para
        `--cost=`{.option} - 为这个库分配的 cost
        整数值。如果多个库提供同样的软件包，这个数字就是用来规定那个库优先使用，cost
        较低的库比 cost 较高的库优先。
        :::
    -   ::: para
        `--excludepkgs=`{.option} -
        逗号分开的软件包名称列表，同时一定[*不能*]{.emphasis}从这个存储库中提取该软件包名称。如果多个库提供同样的软件包，且要保证其来自某个特定存储库，这个选项就很有用了。可接受完整软件包名称（比如
        `publican`{.literal}）和 globs（比如 `gnome-*`{.literal}）。
        :::
    -   ::: para
        `--includepkgs=`{.option} -
        逗号分开的软件包名称列表，同时一定要从这个存储库中提取
        glob。如果多个存储库提供同样的软件包，且要保证其来自某个特定存储库，这个选项就很有用了。
        :::
    -   ::: para
        `--proxy=[protocol://][username[:password]@]host[:port]`{.option} -
        指定只有这个存储库使用的 HTTP/HTTPS/FTP
        代理服务器。这个设置不会影响其他存储库，也不会影响将
        `install.img`{.filename} 附加到 HTTP 安装的方法。
        :::
    -   ::: para
        `--ignoregroups=true`{.option} -
        组成安装树时使用这个选项，且对安装过程本身没有影响。它告诉组合工具在镜像树时不要查看软件包组信息，这样就不会镜像大量无用数据。
        :::
    -   ::: para
        `--noverifyssl`{.option} - 连接到 `HTTPS`{.systemitem}
        服务器时禁止 SSL 验证。
        :::
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    用于安装的库必须稳定。如果在安装完成前修改库，则安装会失败。
    :::
    :::
    :::
[`rescue`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805795194096 .indexterm}]{.term}
:   ::: para
    自动进入该安装程序的救援模式。这让您在出现任何问题是有机会修复。
    :::
    ``` programlisting
    rescue [--nomount|--romount]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--nomount`{.option} 或者 `--romount`{.option} -
        控制如何将安装的系统挂载到救援环境中。默认情况下该安装程序会找到您的系统，并以读-写模式挂载它，同时告知在哪里执行这个挂载。也可以选择不要挂载任何系统（`--nomount`{.option}
        选项）或者以只读模式挂载（`--romount`{.option}
        选项）。只能使用这两个选项中的一个。
        :::
    :::
[`reqpart`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805785549616 .indexterm}]{.term}
:   ::: para
    自动创建您的硬件平台需要的分区。这些分区包括 UEFI 固件所需
    `/boot/efi`{.filename} 分区、BIOS 固件和 GPT 所需
    `biosboot`{.filename} 分区、以及 IBM Power Systems 所需
    `PRePBoot`{.filename}分区。
    :::
    ``` programlisting
    reqpart [--add-boot]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--add-boot`{.option} -
        除使用基本命令创建的具体平台所需分区外，使用此选项创建独立
        `/boot`{.filename} 分区。
        :::
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    这个命令可与 `autopart`{.command} 一同使用，因为
    `autopart`{.command} 与 `reqpart`{.command}
    命令功能一致。另外，还可以创建其他分区或逻辑卷，比如 `/`{.filename}
    和 `swap`{.filename}。与 `autopart`{.command}
    不同，这个命令只能创建具体平台的分区，并保持驱动器的其他部分空白，以便创建自定义布局。
    :::
    :::
    :::
[`rootpw`{.command}（必填项）[]{#chap-kickstart-installations.html#idm139805854071760 .indexterm}]{.term}
:   ::: para
    使用 *password* 参数设定该系统的 root 密码。
    :::
    ``` programlisting
    rootpw [--iscrypted|--plaintext] [--lock] password
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--iscrypted`{.option} - 如果给出这个选项，则假设加密 password
        参数。这个选项与 `--plaintext`{.option} 相互排斥。可以使用
        [**python**]{.application} 生成加密的密码：
        :::
        ``` screen
        $ python -c 'import crypt; print(crypt.crypt("My Password"))'
        ```
        ::: para
        这样会使用随机 salt 为密码生成 sha512 密码相容哈希。
        :::
    -   ::: para
        `--plaintext`{.option} - 如果给出这个选项，则假设该 password
        参数为明文。这个选项与 `--iscrypted`{.option} 相互排斥。
        :::
    -   ::: para
        `--lock`{.option} - 如果给出这个选项，则默认锁定 root
        帐户。也就是说 root
        用户无法从控制台登录。这个选项还在图形和文本手动安装中禁用
        [**Root 密码**]{.guilabel} 页面。
        :::
    :::
[`selinux`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805794214640 .indexterm}]{.term}
:   ::: para
    在安装的系统中设置 SELinux 状态。默认 SELinux 策略为
    `enforcing`{.literal}。
    :::
    ``` programlisting
    selinux [--disabled|--enforcing|--permissive]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--enforcing`{.option} - 根据默认针对性策略，即
        `enforcing`{.literal} 启用 SELinux。
        :::
    -   ::: para
        `--permissive`{.option} - 根据 SELinux
        策略给出警告信息，但并不强制执行该策略。
        :::
    -   ::: para
        `--disabled`{.option} - 在系统中完全禁用 SELinux。
        :::
    :::
    ::: para
    有关 Red Hat Enterprise Linux 中 SELinux 的详情请查看[《Red Hat
    Enterprise Linux 7 SELinux
    用户及管理员指南》](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/index.html)。
    :::
[`services`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805870209040 .indexterm}]{.term}
:   ::: para
    修改在默认 [**systemd**]{.application}
    目标中运行的默认服务集。禁用列表列出的服务会在启用列表之前进行处理。因此，如果某个服务同时出现这两个列表中，那么它会被启用。
    :::
    ``` programlisting
    services [--disabled=list] [--enabled=list]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--disabled=`{.option} - 禁用在以逗号分开的列表中给出的服务。
        :::
    -   ::: para
        `--enabled=`{.option} - 启用在以逗号分开的列表中给出的服务。
        :::
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    不要在服务列表中包含空格。如果有空格，则 Kickstart
    将只启用或者禁用第一个空格之前的服务。例如：
    :::
    ``` programlisting
    services --disabled=auditd, cups,smartd, nfslock
    ```
    ::: para
    只禁用 `auditd`{.systemitem}
    服务。要禁用所有四个服务，这个条目就不应该有空格：
    :::
    ``` programlisting
    services --disabled=auditd,cups,smartd,nfslock
    ```
    :::
    :::
[`shutdown`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805859245728 .indexterm}]{.term}
:   ::: para
    在成功地完成安装后关闭系统。在 Kickstart
    安装过程中，如果没有指定完成方法，将默认使用 `halt`{.command} 命令。
    :::
    ::: para
    `shutdown`{.command} Kickstart 选项等同于 `shutdown`{.command}
    命令。
    :::
    ::: para
    关于其他的完成方法，请参考 `halt`{.command}、`poweroff`{.command} 和
    `reboot`{.command} Kickstart 选项。
    :::
[`skipx`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805869623792 .indexterm}]{.term}
:   ::: para
    如果出现该选项，那就是在安装的系统中没有配置 [**X**]{.application}。
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    如果在软件包选择选项中选择了安装 display manager，这个软件包将生成
    [**X**]{.application} 配置，同时安装的系统将默认为
    `graphical.target`{.systemitem}。`skipx`{.command}
    选项的效果将被覆盖。
    :::
    :::
    :::
[`sshpw`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805860403152 .indexterm}]{.term}
:   ::: para
    在安装过程中，您可与安装程序互动并通过 `SSH`{.systemitem}
    连接监控其进度。使用 `sshpw`{.command}
    命令创建登录的临时帐号。该命令的每个实例都生成一个只用于安装环境的独立帐户。这些帐户不会转移到安装的系统中。
    :::
    ``` programlisting
    sshpw --username=name password [--iscrypted|--plaintext] [--lock]
    ```
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `--username`{.option} - 提供用户的名称。这是必填项。
        :::
    -   ::: para
        `--iscrypted`{.option} - 如果给出这个选项，则假设加密 password
        参数。这个选项与 `--plaintext`{.option} 相互排斥。可以使用
        [**python**]{.application} 生成加密的密码：
        :::
        ``` screen
        $ python -c 'import crypt; print(crypt.crypt("My Password"))'
        ```
        ::: para
        这样会使用随机 salt 为密码生成 sha512 密码相容哈希。
        :::
    -   ::: para
        `--plaintext`{.option} - 如果给出这个选项，则假设该 password
        参数为明文。这个选项与 `--iscrypted`{.option} 相互排斥。
        :::
    -   ::: para
        `--lock`{.option} -
        如果给出这个选项，则默认锁定这个帐户。也就是说该用户无法从控制台登录。
        :::
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    默认情况下不会在安装过程中启动 `ssh`{.systemitem} 服务器。要让
    `ssh`{.systemitem} 在安装过程中可用，请使用 `inst.sshd`{.option}
    内核引导选项引导该系统。详情请查看
    [控制台、环境和显示选项](#chap-anaconda-boot-options.html#list-boot-options-display){.xref}。
    :::
    :::
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::