    :::
:::
:::
:::
:::
[]{#main-memory.html}
::: chapter
::: titlepage
# [⁠]{#main-memory.html#main-memory}第 5 章 内存 {.title}
:::
::: para
预读本章了解红帽企业版 Linux
中可用的内存管理功能，以及如何使用这些管理功能优化系统的内存使用。
:::
::: section
::: titlepage
# [⁠]{#main-memory.html#s-memory-tlb}5.1. 超大转译后备缓冲器（HugeTLB） {.title}
:::
::: para
将物理内存地址转译为性能内存地址是内存管理的一部分。物理地址和虚拟地址的映射关系保存在名为页表的数据结构中。因为为每个地址映射读取页表会很消耗时间和资源，所以最近使用的地址都有缓存。这个缓存就称为转译后备缓冲器（TLB）。
:::
::: para
但 TLB 只能缓存大量地址映射。如果所要求的地址映射没有在 TLB
中，则必须仍读取页表以决定物理到虚拟地址映射。这就是所谓的"TLB
缺失"。因为其内存要求与用来缓存 TLB
中地址映射的页面之间的关系，所以有大内存要求的程序比使用较少内存的程序更容易受
TLB 缺失影响。因为每个缺失都涉及页表读取，因此尽量避免这些缺失很重要。
:::
::: para
超大转译后备缓冲器（HugeTLB）可以很大片段管理内存，以便一次可以缓存更多地址。这样可减少
TLB 缺失的可能性，进而改进有大内存要求的程序性能。
:::
::: para
有关配置 HugeTLB
的信息可在内核文档中找到：`/usr/share/doc/kernel-doc-version/Documentation/vm/hugetlbpage.txt`{.filename}
:::
:::
::: section
::: titlepage
# [⁠]{#main-memory.html#s-memory-transhuge}5.2. 大页面和透明大页面 {.title}
:::
::: para
内存是由块管理，即众所周知的*页面*。一个页面有 4096 字节。1MB 内存等于
256 个页面。1GB 内存等于 256000 个页面等等。CPU
有内嵌的[*内存管理单元*]{.emphasis}，这些单元中包含这些页面列表，每个页面都使用[*页表条目*]{.emphasis}参考。
:::
::: para
让系统管理大量内存有两种方法：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    增加硬件内存管理单元中页表数
    :::
-   ::: para
    增大页面大小
    :::
:::
::: para
第一个方法很昂贵，因为现代处理器中的硬件内存管理单元只支持数百或者书签页表条目。另外适用于管理数千页面（MB
内存）硬件和内存管理算法可能无法很好管理数百万（甚至数十亿）页面。这会造成性能问题：但程序需要使用比内存管理单元支持的更多的页面，该系统会退回到缓慢的基于软件的内存管理，从而造成整个系统运行缓慢。
:::
::: para
红帽企业版 Linux 6 采用第二种方法，即使用*超大页面*。
:::
::: para
简单说，超大页面是 2MB 和 1GB 大小的内存块。2MB 使用的页表可管理多 GB
内存，而 1GB 页是 TB 内存的最佳选择。
:::
::: para
差大页面必须在引导时分配。它们也很难手动管理，且经常需要更改代码以便可以有效使用。因此红帽企业版
Linux 也部署了*透明超大页面* (THP)。THP
是一个提取层，可自动创建、管理和使用超大页面的大多数方面。
:::
::: para
THP 系统管理员和开发者减少了很多使用超大页面的复杂性。因为 THP
的目的是改进性能，所以其开发者（社区和红帽开发者）已在各种系统、配置、程序和负载中测试并优化了
THP。这样可让 THP 的默认设置改进大多数系统配置性能。
:::
::: para
注：THP 目前只能映射异步内存区域，比如堆和栈空间。
:::
:::
::: section
::: titlepage
# [⁠]{#main-memory.html#s-memory-valgrind}5.3. 使用 Valgrind 简要描述内存使用 {.title}
:::
::: para
[**Valgrind**]{.application}
是为用户空间二进制提供检测的框架。它与大量用于简要描述和分析程序性能的工具一同发布。本小节提供的工具可用于探测内存错误，比如使用未初始化内存以及不正确地分配或者取消分配内存。这些工具都包含在
[valgrind]{.package} 软件包中，并可使用以下命令运行：
:::
``` screen
valgrind --tool=toolname program
```
::: para
使用您要使用的工具名称替换 *toolname*（要对内存进行简要概述，请使用
`memcheck`{.literal}, `massif`{.literal} 或者
`cachegrind`{.literal}），同时使用您要使用 Valgrind
进行简要概述的程序替换 *program*。请注意 Valgrind
的检测可能造成程序比正常情况运行更缓慢。
:::
::: para
Valgrind 的功能概述请参考 [第 3.5.3 节
"Valgrind"](#main-analyzeperf.html#s-analyzeperf-valgrind){.xref}。详情，包括用于
Eclipse 的插件请参考*《开发者指南》*，其链接为
。您还可以在安装
[valgrind]{.package} 软件包后使用 `man valgrind`{.command}
命令查看相关文档，或者在以下位置查找这些文档：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
    以及
    :::
-   ::: para
    `/usr/share/doc/valgrind-version/html/index.html`{.filename}。
    :::
:::
::: section
::: titlepage
## [⁠]{#main-memory.html#idm140329765635184}5.3.1. 使用 Memcheck 简要概述内存使用 {.title}
:::
::: para
Memcheck 是默认 Valgrind 工具，且可以与 `valgrind program`{.command}
一同运行，而无需指定
`--tool=memcheck`{.code}。它可探测和报告大量很难探测和诊断的内存错误，比如不应该发生的内存访问，使用未定义或者未初始化值，错误释放的堆内存，重叠的光标以及内存泄漏。运行
Memcheck 时程序运行速度要比正常运行时慢 10-30 倍。
:::
::: para
Memcheck 根据探测的问题类型返回具体错误。这些错误在 Valgrind
文档中有具体论述，文档位置为
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}。
:::
::: para
注：Memcheck 只能报告这些错误 ---
它不能放置这些错误发生。如果您的程序采用一般会造成片段失败的的方法访问内存，片段失败仍会发生。但
Memcheck 将在失败前记录出错信息。
:::
::: para
Memcheck 提供可用来着重检查进程的命令行选项。有些可用的选项为：
:::
::: variablelist
[`--leak-check`{.option}]{.term}
:   ::: para
    启用后，Memcheck 会在客户端程序完成后搜索内存泄漏。其默认值为
    `summary`{.literal}，它输出找到的泄漏数。其他可能的值为
    `yes`{.literal} 和
    `full`{.literal}，这两个选项都会给出每个泄漏的详细情况，且
    `no`{.literal} 会禁用内存泄漏检查。
    :::
[`--undef-value-errors`{.option}]{.term}
:   ::: para
    启用后（将其设定为 `yes`{.literal}），Memcheck
    会报告使用未定义值报告的错误。禁用时（将其设定为
    `no`{.literal}），则不会报告未定义值错误。默认启用这个选项。禁用该选项会稍稍提高
    Memcheck 速度。
    :::
[`--ignore-ranges`{.option}]{.term}
:   ::: para
    可让用户指定一个或者多个 Memcheck
    检查可寻址能力时应该忽略的范围。多个范围使用逗号分开，例如：`--ignore-ranges=0xPP-0xQQ,0xRR-0xSS`{.code}。
    :::
:::
::: para
选项完整列表请参考
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
::: section
::: titlepage
## [⁠]{#main-memory.html#idm140329771463184}5.3.2. 使用 Cachegrind 简要概述缓存使用 {.title}
:::
::: para
Cachegrind
模拟您的程序与机器缓存等级和（可选）分支预测单元的互动。它跟踪模拟的一级指令和数据缓存的用量以便探测不良代码与这一级缓存的互动；最高一级，可以是二级或者三级缓存，用来跟踪对主内存的访问。因此，使用
Cachegrind 运行的程序速度比正常运行时要慢 20-100 倍。
:::
::: para
要运行 Cachegrind 请执行以下命令，使用您要用 Cachegrind
简要描述的程序替换 *program*。
:::
``` screen
# valgrind --tool=cachegrind program
```
::: para
Cachegrind 可以为整个程序以及该程序中的每个功能收集统计数据：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    一级指令缓存读取（或者执行的指令）和读取缺失，最后一级缓存指令读取缺失；
    :::
-   ::: para
    数据缓存读取（或者内存读取），读取缺失，以及最高一级缓存数据读取缺失；
    :::
-   ::: para
    数据缓存写入（或者内存写入），写ur缺失，以及最高一级缓存数据写入缺失；
    :::
-   ::: para
    已执行和无法预测的条件分支；以及
    :::
-   ::: para
    已执行和无法预测的间接分支。
    :::
:::
::: para
Cachegrind 输出控制台的这些统计数据信息小结，并在文件（默认为
`cachegrind.out.pid`{.filename}，其中*pid* 为您运行 Cachegrind
的程序的进程 ID）中写入更详细的配置信息。该文件可由
[**cg_annotate**]{.application} 进行进一步的处理，比如：
:::
``` screen
# cg_annotate cachegrind.out.pid
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
[**cg_annotate**]{.application} 可以输出 120
字符以上，具体要看路径的长度。要让输出结果更清晰、易读，我们建议您在执行上述命令前将终端窗口至少调整到这个宽度。
:::
:::
:::
::: para
您还可以比较 Cachegrind
生成的概述文件，将其简化为更改前后的图标对比图。要这样做请使用
[**cg_diff**]{.application} 命令，使用最初的概述输出文件替换
*first*，并使用随后的概述输出文件替换 *second*：
:::
``` screen
# cg_diff first second
```
::: para
这个命令提供合并的输出文件，您可以使用 [**cg_annotate**]{.application}
查看更详细的结果。
:::
::: para
Cachegrind 支持大量选项注重其输出结果。有些可用选项为：
:::
::: variablelist
[`--I1`{.option}]{.term}
:   ::: para
    指定大小，关联性以及一级指令缓存的块大小，以逗号分开：`--I1=size,associativity,line size`{.code}。
    :::
[`--D1`{.option}]{.term}
:   ::: para
    指定大小，关联性以及一级数据缓存的块大小，以逗号分开：`--D1=size,associativity,line size`{.code}。
    :::
[`--LL`{.option}]{.term}
:   ::: para
    指定大小，关联性以及最后一级指令缓存的块大小，以逗号分开：`--LL=size,associativity,line size`{.code}。