# 0x01 前言
在日常使用Burp Suite进行安全测试时，我们经常会遇到各种问题，并尝试不同的方法来解决这些问题。例如，抓包、改包、重放和爆破等。此外，Burp Suite的BApp Store提供了许多开源扩展工具。本文将分享如何结合使用名为“Extractor”的扩展插件和Burp Suite的宏功能，以解决某些场景下的anti-token问题。

# 0x02 Extractor

### 1. 简介
**Extractor** 是一个Burp扩展插件，用于从HTTP请求和响应中提取和重用数据。其主要功能包括：
- 从响应中提取数据。
- 在请求中替换并重放提取的数据。

**Extractor** 的界面大致分为以下几个部分：
1. 选择要插入替换数据的请求。
2. 选择要提取数据的响应。
3. 开启调试模式。
4. 执行操作。

### 2. 使用方法
**Extractor** 的基本使用方法是从一个请求的响应中提取数据（如CSRF token、时间戳、Auth Bearer token等），然后在另一个HTTP请求中重用这些数据。具体步骤如下：
1. 通过正则表达式从响应中提取数据。
2. 在发送指定请求时，将提取出的值替换掉请求中的匹配值。

# 0x03 Marco
Burp Suite自带的宏功能可以帮助自动化一些重复性任务。虽然已有相关文章介绍过宏的使用，但本文将重点讨论如何在实际测试中利用宏与Extractor结合使用。

# 0x04 实例分析

### 1. 发现问题
在测试某个接口时，发现以下请求：
```http
POST /WechatApp/public/zzbcd/P8009.do HTTP/1.1
Host: www.xxx.com
{"No":"123456"}
```
返回的信息包含敏感数据：
```json
{"STATUS":"1","No":"123456","tranDate":"2018-8-9","ID":"411103199206121819","Name":"王刚","Phone":"13333333333","idType":"100000"}
```
通过重放该请求，可以批量获取大量个人敏感信息。尽管这不是一个严重的问题，但也不应忽视。

### 2. 修复问题
修复方案是防止重放攻击并模糊处理返回的敏感信息。修复后的请求添加了一个 `Token_Id` 参数：
```http
POST /WechatApp/public/zzbcd/P8009.do HTTP/1.1
Host: www.xxx.com
{"No":"123456","Token_Id":"N5EVWFXBEDFL51GMUQECPZF4A5X096HD20180809123129"}
```
重放后提示“系统异常请稍后重试”。尝试修改cookie参数或referrer参数均无法绕过 `Token_Id` 检验。查看proxy记录发现，在每次请求之前会先发送一个请求获取 `tokenId`。

### 3. 再次尝试绕过
使用Extractor插件重新复测该接口。首先将两个接口发送到Extractor扩展：
- 上工作区选择“使用tokenId”的请求。
- 下工作区选择“获取tokenId”的响应包。
- 点击Go，Extractor即准备就绪。

当开启Extractor后，去Repeater重放请求，每次请求都会替换最新获取的 `tokenId` 值。如果“Value to insert”值为空，则需要先触发“获取tokenId”请求，以便Extractor可以从响应中正则匹配到 `tokenId` 值。

为了进行爆破或枚举操作，每次请求前必须先请求一次“获取tokenId”。因此，需要使用Marco录制一个宏，确保在请求之前先运行“获取tokenId”请求。

### 4. 最终验证
在Repeater中连续点击多次后，返回结果表明问题已修复。虽然解决了 `tokenId` 问题，但在其他位置也做了校验，无法进行重放攻击或敏感信息收集。

# 0x05 再来一发

### 1. 发现问题
某微信公众号的注册接口在提交用户资料后会发送短信通知。请求如下：
```http
POST /mina/saveCustomerInfo?applyId=2018080916437317 HTTP/1.1
Host: www.xxx.com
UserData(包含手机号码)
```
直接重放请求并修改其他参数均提示报错。查看proxy记录发现，整个过程包括两个请求：第一个请求获取 `applyId`，第二个请求使用该参数提交用户数据。

### 2. 绕过token限制
绕过的思路和操作与上一个实例类似：
1. 添加两个请求到Extractor，分别选择“请求”和“响应”。
2. 录制一个“获取响应”的宏，并定制好规则。
3. 可以进行短信炸弹测试。

需要注意的是，必须勾选要覆盖的功能区域，否则Marco可能不会生效。

# 0x06 绕过流程
整个绕过token校验的过程逻辑如下：
1. 使用Extractor从响应中提取 `tokenId` 或 `applyId`。
2. 使用Marco录制宏，在请求之前先获取 `tokenId` 或 `applyId`。
3. 在Repeater或Intruder中重放请求，验证是否成功绕过token校验。

# 0x07 参考
- [BurpExtractor GitHub](https://github.com/NetSPI/BurpExtractor)
- [Burpsuite中宏的使用](http://www.freebuf.com/articles/web/156735.html)
- [我的博客](http://am4zing.com.cn)