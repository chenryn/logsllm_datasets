The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
Snort Plug-in Development:
Teaching an Old Pig New Tricks
Ben Feinstein, CISSP GCFA
SecureWorks Counter Threat Unit™
DEFCON 16
August 8, 2008
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Snort v2 Architecture & Internals
•
Snort Plug-in Development
 Dynamic Rules
 Dynamic Preprocessors
•
Snort Plug-in API
 Examples, Pitfalls, Tips
•
Releasing several Dynamic Preprocessors
 ActiveX Virtual Killbits (DEMO)
 DNS Blacklist (DEMO)
 Debian OpenSSL "Weak Keys" Detection (DEMO)
What’s In This Talk? 
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Open-source IDS created by Marty Roesch
•
First released for *NIX platforms 1998
•
Commercialized by Sourcefire, Inc.
•
Snort Inline mode now available for IPS
 Linux Bridge + Netfilter
 Linux ip_queue and nf_queue interfaces
•
Snort v3 now making its way through Beta
 NOT discussing plug-ins for v3
 NOT discussing v3 architecture (ask Marty)
Snort Basics 
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Highly modularized for extensibility
•
Snort Rules & The Rules Matching Engine
 SF Engine Dynamic Plug-in
 Detection Plug-ins – implement/extend rules language
•
Output Plugins
 Unified / Unified2
 Syslog
 Others
•
Preprocessors
 Detection (i.e. alerting)
 Normalization (i.e. decoding)
Snort v2 Architecture
The Basics
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Dynamic Preprocessors
 Define a packet processing callback
 Preprocessor local storage
 Stream-local storage
•
Dynamic Rules
 Writing Snort rules in C
 v2.8.0.1(?), added ability to register a C callback
• Before, only useful as form of rule obfuscation
 Used by some commercial Snort rulesets
 Relatively straight forward to RE using IDA Pro
Snort v2 Architecture
Run-time (Dynamic) Extensions
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Alert vs. Log
 Log contains packet capture data in addition
•
Unified2 is extensible
 Additional data in simple Length|Value encoding
•
Does your detection preprocessor need to log additional 
alert data?
 Use Unified2!
•
Examples
 Portscan Alerts
 Preprocessor Stats
Other Snort Internals of Interest
Unified2 Output Formats
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Familiarity with the C language
•
Lack of code-level documentation
 What is available is out of date
•
Snort-Devel mailing list
 Sourcefire developers are very responsive, thanks!
 Do your homework before mailing the list.
 You will get a better response and save everybody time.
•
Source contains very basic examples
 Dynamic Rules
 Dynamic Preprocessor
Snort Plug-in Development
Getting Started
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Use the Source!
•
Examine existing plug-ins
 SMTP
 DNS
 SSH
 SSL
 HTTP Inspect (bigger)
•
Write small blocks of code and (unit) test them
•
Ask questions on the Snort-Devel mailing list
Snort Plug-in Development
Getting Started, Continued
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Snort 2.8.x source tarball
•
CentOS 5
 gcc 4.1
 glibc 2.5
•
GNU Autoconf 2.61
 CentOS 5 packages older version 2.59
•
GNU Automake 1.10
 CentOS 5 packages older version 1.9.6
Snort Development Environment
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Key header file "sf_snort_plugin_api.h"
 Defines C-struct equivalents to rule syntax
•
You define global variable
 Rules *rules[]
 Framework will handle the rest
•
Makefile
 Compile C files into object code
 Use GNU Libtool to make dynamic shared objects
•
Dynamically loaded by Snort at run-time
Snort Dynamic Rules
Background
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Snort config
 --dynamic-detection-lib 
 --dynamic-detection-lib-dir 
•
Snort can create stub rules files for all loaded dynamic rules
 --dump-dynamic-rules 
•
"meta-rules" must be loaded in Snort rules file
 alert tcp any any -> any any (msg:"Hello World!"; […] 
metadata : engine shared, soid 3|2000001; 
sid:2000001; gid:3; rev:1; […] )
Snort Dynamic Rules
Configuration
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Different C structs for each rule option in rules language
•
A Rule Option is a Union of different specific rule opt structs
•
Rule struct w/ NULL-terminated array of Rule Options
 Rule Header
 Rule References
•
Functions for matching
 Content, Flow, Flowbits, PCRE, byte_test, byte_jump
•
Function to register and dump rules
Snort Plug-in API
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
static ContentInfo sid109content =
{
(u_int8_t *)"NetBus",
/* pattern to search for */
0,
/* depth */
0,
/* offset */
CONTENT_BUF_NORMALIZED,
/* flags */
NULL,
/* holder for boyer/moore info */
NULL,
/* holder for byte representation of "NetBus" */
0,
/* holder for length of byte representation */
0
/* holder of increment length */
};
Snort Plug-in API
Content Matching
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
static RuleOption sid109option2 =
{
OPTION_TYPE_CONTENT,
{
&sid109content
}
};
ENGINE_LINKAGE int contentMatch(void *p, ContentInfo* 
content, const u_int8_t **cursor);
Snort Plug-in API
Content Matching (Continued)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
static PCREInfo activeXPCRE =
{
"<object|\snew\s+ActiveX(Object|Control)",
NULL,
NULL,
PCRE_CASELESS,
CONTENT_BUF_NORMALIZED
};
static RuleOption activeXPCREOption =
{
OPTION_TYPE_PCRE,
{
&activeXPCRE
}
};
Snort Plug-in API
PCRE Matching
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
ENGINE_LINKAGE int pcreMatch(void *p, PCREInfo* pcre, 
const u_int8_t **cursor);
Snort Plug-in API
PCRE Matching (Continued)
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
static FlowFlags activeXFlowFlags = {
FLOW_ESTABLISHED|FLOW_TO_CLIENT
};
static RuleOption activeXFlowOption = {
OPTION_TYPE_FLOWFLAGS,
{
&activeXFlowFlags
}
};
ENGINE_LINKAGE int checkFlow(void *p, FlowFlags 
*flowFlags);
Snort Plug-in API
Flow Matching
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
extern Rule sid109;
extern Rule sid637;
Rule *rules[] =
{
&sid109,
&sid637,
NULL
};
/* automatically handled by the dynamic rule framework */
ENGINE_LINKAGE int RegisterRules(Rule **rules);
Snort Plug-in API
Dynamically Registering Rules
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
•
Optional C packet processing callback
 Returns RULE_MATCH or RULE_NOMATCH
sf_snort_plugin_api.h:
typedef int (*ruleEvalFunc)(void *);
typedef struct _Rule {
[…]
ruleEvalFunc evalFunc;
[…]
} Rule;
Snort Dynamic Rules
Implementation
The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.
my_dynamic_rule.c:
#include "sf_snort_plugin_api.h"
#include "sf_snort_packet.h"
int myRuleDetectionFunc(void *p);
Rule myRule = {
[…],
&myRuleDetectionFunc,
[…]