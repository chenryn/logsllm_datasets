# Snort Plug-in Development: Teaching an Old Pig New Tricks

## Presentation Overview
- **Title:** Snort Plug-in Development: Teaching an Old Pig New Tricks
- **Presenter:** Ben Feinstein, CISSP GCFA
- **Affiliation:** SecureWorks Counter Threat Unit™
- **Event:** DEFCON 16
- **Date:** August 8, 2008
- **Copyright:** © 2008 SecureWorks, Inc. All rights reserved.

## Table of Contents
1. **Snort v2 Architecture & Internals**
2. **Snort Plug-in Development**
   - Dynamic Rules
   - Dynamic Preprocessors
3. **Snort Plug-in API**
   - Examples, Pitfalls, and Tips
4. **Releasing Several Dynamic Preprocessors**
   - ActiveX Virtual Killbits (Demo)
   - DNS Blacklist (Demo)
   - Debian OpenSSL "Weak Keys" Detection (Demo)

## What’s In This Talk?
- **Open-source IDS Created by Marty Roesch**
  - First released for *NIX platforms in 1998.
  - Commercialized by Sourcefire, Inc.
  - Snort Inline mode now available for IPS (Linux Bridge + Netfilter, Linux ip_queue and nf_queue interfaces).
  - Snort v3 is in beta, but this talk will not cover plug-ins for v3 or its architecture.

- **Snort Basics**
  - Highly modularized for extensibility.
  - **Snort Rules & The Rules Matching Engine:**
    - SF Engine Dynamic Plug-in.
    - Detection Plug-ins: Implement/extend rules language.
  - **Output Plugins:**
    - Unified / Unified2.
    - Syslog.
    - Others.
  - **Preprocessors:**
    - Detection (i.e., alerting).
    - Normalization (i.e., decoding).

- **Snort v2 Architecture**
  - **Dynamic Preprocessors:**
    - Define a packet processing callback.
    - Preprocessor local storage.
    - Stream-local storage.
  - **Dynamic Rules:**
    - Writing Snort rules in C.
    - v2.8.0.1 added the ability to register a C callback.
    - Before, only useful as a form of rule obfuscation.
    - Used by some commercial Snort rulesets.
    - Relatively straightforward to reverse engineer using IDA Pro.

- **Other Snort Internals of Interest**
  - **Unified2 Output Formats:**
    - Alert vs. Log: Log contains packet capture data in addition.
    - Unified2 is extensible, with additional data in simple Length|Value encoding.
    - Use Unified2 if your detection preprocessor needs to log additional alert data.
    - Examples: Portscan Alerts, Preprocessor Stats.

- **Snort Plug-in Development: Getting Started**
  - Familiarity with the C language.
  - Lack of code-level documentation; what is available is often outdated.
  - Snort-Devel mailing list: Sourcefire developers are very responsive.
  - Do your homework before mailing the list to get a better response and save everyone time.
  - Source contains very basic examples (Dynamic Rules, Dynamic Preprocessor).

- **Getting Started, Continued**
  - Use the source!
  - Examine existing plug-ins (SMTP, DNS, SSH, SSL, HTTP Inspect).
  - Write small blocks of code and unit test them.
  - Ask questions on the Snort-Devel mailing list.

- **Snort Development Environment**
  - Snort 2.8.x source tarball.
  - CentOS 5 (gcc 4.1, glibc 2.5).
  - GNU Autoconf 2.61 (CentOS 5 packages older version 2.59).
  - GNU Automake 1.10 (CentOS 5 packages older version 1.9.6).

- **Snort Dynamic Rules: Background**
  - Key header file: `sf_snort_plugin_api.h`.
  - Defines C-struct equivalents to rule syntax.
  - You define a global variable `Rules *rules[]`, and the framework handles the rest.
  - Makefile: Compile C files into object code and use GNU Libtool to make dynamic shared objects.
  - Dynamically loaded by Snort at run-time.

- **Snort Dynamic Rules: Configuration**
  - Snort config:
    - `--dynamic-detection-lib`
    - `--dynamic-detection-lib-dir`
  - Snort can create stub rules files for all loaded dynamic rules: `--dump-dynamic-rules`.
  - "Meta-rules" must be loaded in the Snort rules file:
    ```plaintext
    alert tcp any any -> any any (msg:"Hello World!"; […] metadata : engine shared, soid 3|2000001; sid:2000001; gid:3; rev:1; […] )
    ```

- **Snort Plug-in API**
  - Different C structs for each rule option in the rules language.
  - A Rule Option is a Union of different specific rule opt structs.
  - Rule struct with a NULL-terminated array of Rule Options (Rule Header, Rule References).
  - Functions for matching: Content, Flow, Flowbits, PCRE, byte_test, byte_jump.
  - Function to register and dump rules.

- **Content Matching Example**
  ```c
  static ContentInfo sid109content = {
      (u_int8_t *)"NetBus", /* pattern to search for */
      0, /* depth */
      0, /* offset */
      CONTENT_BUF_NORMALIZED, /* flags */
      NULL, /* holder for boyer/moore info */
      NULL, /* holder for byte representation of "NetBus" */
      0, /* holder for length of byte representation */
      0 /* holder of increment length */
  };
  static RuleOption sid109option2 = {
      OPTION_TYPE_CONTENT,
      {&sid109content}
  };
  ENGINE_LINKAGE int contentMatch(void *p, ContentInfo* content, const u_int8_t **cursor);
  ```

- **PCRE Matching Example**
  ```c
  static PCREInfo activeXPCRE = {
      "<object|\\snew\\s+ActiveX(Object|Control)",
      NULL,
      NULL,
      PCRE_CASELESS,
      CONTENT_BUF_NORMALIZED
  };
  static RuleOption activeXPCREOption = {
      OPTION_TYPE_PCRE,
      {&activeXPCRE}
  };
  ENGINE_LINKAGE int pcreMatch(void *p, PCREInfo* pcre, const u_int8_t **cursor);
  ```

- **Flow Matching Example**
  ```c
  static FlowFlags activeXFlowFlags = {
      FLOW_ESTABLISHED | FLOW_TO_CLIENT
  };
  static RuleOption activeXFlowOption = {
      OPTION_TYPE_FLOWFLAGS,
      {&activeXFlowFlags}
  };
  ENGINE_LINKAGE int checkFlow(void *p, FlowFlags *flowFlags);
  ```

- **Dynamically Registering Rules**
  ```c
  extern Rule sid109;
  extern Rule sid637;
  Rule *rules[] = {
      &sid109,
      &sid637,
      NULL
  };
  ENGINE_LINKAGE int RegisterRules(Rule **rules);
  ```

- **Implementation of Dynamic Rules**
  - Optional C packet processing callback that returns `RULE_MATCH` or `RULE_NOMATCH`.
  - `sf_snort_plugin_api.h`:
    ```c
    typedef int (*ruleEvalFunc)(void *);
    typedef struct _Rule {
        [...]
        ruleEvalFunc evalFunc;
        [...]
    } Rule;
    ```
  - Example in `my_dynamic_rule.c`:
    ```c
    #include "sf_snort_plugin_api.h"
    #include "sf_snort_packet.h"
    int myRuleDetectionFunc(void *p);
    Rule myRule = {
        [...],
        &myRuleDetectionFunc,
        [...]
    };
    ```

This document provides a comprehensive overview of Snort plug-in development, including the architecture, configuration, and practical examples.