apr_socket_recv(sock, buf, buf_size);
apr_file_open(&file, "badfile", 0x00006, 0777, pool);
apr_file_write(file, buf, buf_size);
apr_proc_create(&proc, "badfile", "badfile", 0, 0, pool);
Fig. 10: Downloader using APR
16
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
promised process likely already
exists, the attacker is unlikely to
know where it is located in mem-
ory. The remaining functions are
fairly straightforward: a socket
is opened, data is downloaded to
a ﬁle with execute permissions and that ﬁle is run. apr_proc_create is similar to a
Unix fork, so the victim process will not be overwritten in memory by the payload.
APR function calls can be used to implement a downloader and an uploader. The
library does provide a dup2 analogue, but only allows redirection of streams to ﬁles and
not to sockets. This means that backdoors cannot be directly implemented. Privilege
modiﬁcation is also unsupported, preventing root insertion. Since a downloader can be
used to execute arbitrary code, however, these two payloads sufﬁce in practice.
We present the gadgets built using the GLib library in our technical report.
6.3 Turing Complete-LibN
The previous defense bypass utilized simple, linear code. More advanced attacks which,
e.g. perform searches or other highly algorithmic routines may need a fully Turing-
Complete catalog of functions available for reuse. Tran et al. [34] show that libc is itself
Turing-Complete on the function level (i.e. enables Turing-Complete Return-into-Libc
code).
In this section, we show that many other libraries have Turing-Complete sets of
functions, enabling a larger corpus for creation of advanced Return-into-LibN payloads.
Many of the constructs from [34] can be reapplied to other libraries: basic arithmetic and
memory manipulation functions are common. Their looping construct, however, relied
on a construct somewhat peculiar to libc: the longjmp function. Longjmp allows user-
deﬁned values of the stack pointer to be set, permitting permutation of the ‘instruction’
pointer in a code reuse attack.
The lack of a longjmp-like function outside of libc precludes modifying the stack
pointer to implement a jump. Without a branch instruction no looping constructs are
possible and Turing-completeness is unavailable. Fortunately, the ‘text’ segment of a
code reuse payload is writable, since it was after all injected as data into the stack or
heap. This enables an alternative approach using conditional self-modiﬁcation. In com-
bination with conditional evaluation, this can be used to build a looping construct. Note
that this technique works even though W⊕X is enabled because self-modiﬁcation is ap-
plied to the addresses which constitute the Return-into-LibN payload, not the program
code.
We can use self-modiﬁcation to create a straight-line instruction sequence semanti-
cally equivalent to while(p(x)) do {body}, where p(x) is a predicate on a variable
x and {body} is arbitrary code. The attacker is assumed to have the ability to do arith-
metic, to read and write to memory, and to conditionally evaluate a single function.
These capabilities are derivable from common functions, explained in [34].
We describe the mechanism in three stages of reﬁnement: in a simpliﬁed execution
model, as a generic series of function invocations, and as an implementation using the
Apache Portable Runtime.
Systematic Analysis of Defenses Against ROP
17
Using this environment, it is possible to build the the looping mechanism presented
in Figure 11. For readability each line is labeled. References to these labels should be
substituted with the line they represent, e.g. Reset should be read as iterate=’nop;’;.
iterate and suffix are strings in memory which hold the loop-related code and the
remaining program code, respectively. nop is the no-operation instruction that advances
the instruction pointer. [ip+1] represents the memory location immediately following
the address pointed to by the instruction pointer. The | operator denotes concatenation.
Each iteration, iterate is reset to be a
nop instruction. The loop body is executed
and the predicate p(x) is checked. If it eval-
uates to true, iterate is set to the loop in-
struction sequence. Finally, iterate is con-
catenated with the remaining program code
and moved to the next memory address that
will pointed at by the instruction pointer. Note
that if the predicate evaluates to true, the nop
is replaced by another loop iteration. If the predicate evaluates to false, iterate is
unchanged and execution will proceed into the sufﬁx.
: iterate=‘nop;’;
: ;
: If p(x): iterate=‘Reset;Body;
Fig. 11: Self-Modifying While Loop
Reset
Body
Evaluate
Self-Modify : [ip+1] = iterate|suffix;
Evaluate;Self-Modify’;
The basic self-modifying while loop can easily be converted to Return-into-Libc
code. Figure 12 presents one such possible conversion. The implementation of this
example assumes is for a Linux call stack. A stack frame, from top to bottom, con-
sists of parameters, a return value, a saved frame pointer, and space for local variables.
In the basic model the attacker was aware
of the value of ip at the end of the loop
and could easily write code to [ip+1]. In
real world scenarios, however, the attacker
does not know the analogous esp value a
priori. Fortunately a number of techniques
([32, 35, 40]) exist to leak esp to the attacker.
We chose to use format string vulnerabilities.
Note this is not a vulnerability per se, as it
is not already present in a victim process. It
is simply function call made by the attacker
with side effects that are normally considered
“unsafe”. Since this is a code reuse attack, there is no reason to follow normal software
engineering conventions.
sprintf(stack, "%08x%08x%08x%08x%08x");
atomic_add(&stack, 32);
atomic_add(stack, offset);
sprintf(iterate, nop);
/* body */
conditional(test, sprintf(iterate, loopcode));
sprintf(stack, "%s%s", iterate, suffix);
Fig. 12: Generic self-modifying Return-
into-Libc while loop
The ﬁrst line uses an ‘unsafe’ format string to dump the stack up to the saved frame
pointer (which in this example is ﬁve words above sprintf’s local variables) to the
stack variable. Since the attacker crafted the payload, no guesswork is involved in
determining the number of bytes between sprintf’s local variable region and the saved
frame pointer. In the second line the ﬁrst four words in the dump are discarded, and in
the third the address of the stack pointer is calculated based on the offset of the saved
frame pointer from the stack pointer. Note that the resultant value of esp should point
to the stack frame which will be returned to after the last instruction in the ﬁgure, not
18
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
the stack frame which will be returned to after the function which is currently executing.
Since the attacker injected the payload onto the stack he will know the necessary offset.
The next three lines correspond to Reset; Body; Evaluate. iterate, nop, loopcode,
and suffix are all buffers in attacker-controlled memory. nop is any function call.
loopcode is the sequence of instructions from Figure 12, and suffix is the remain-
ing payload code following loop execution. The ﬁnal line copies the concatenation of
the instructions in iterate and suffix to the program stack, overwriting the payload
from that point forward.
The generic attack executes in a Linux program stack but makes no assumptions
about the structure of the injected payload. When constructing a speciﬁc self-modifying
gadget, however, the payload structure must be ﬁxed. We assume that the attacker has
injected a forged sequence of stack frames as a payload. The bottom-most frame (as-
suming stack grows down) executes ﬁrst, returns to the frame associated with the second
function to be called, etc. Parameters are included in the initial stack injection. An attack
using only functions from the Apache Portable Runtime is shown in Figure 13.
The attacker is assumed to
have a blank key-value table al-
ready written to memory. This
is a simple, well-deﬁned data
structure, and requires no extra
attacker capabilities.
The ﬁrst line adds an entry
to the table: the key is the con-
dition to be matched (a string),
and the value is the stack frame
sequence which implements the
loop. The stack-locator and Reset code is as described above.
apr_table_set(table, "match_string", "loopcode");
apr_snprintf(buf, 1024, "%08x%08x%08x%08x%08x");
apr_atomic_add32(&stack, 32);
apr_atomic_add32(stack, offset);
apr_snprintf(iterate, 100, "nop");
/* body */
apr_table_do(apr_snprintf, iterate, table, condition, NULL);
apr_snprintf(stack, 1024, iterate);
Fig. 13: Self-modifying while loop in APR
The conditional evaluator, apr_table_do, works as follows. It ﬁrst ﬁlters the ta-
ble by the condition string. Only entries whose keys are identical to this string are
retained. For all remaining keys, the function in the ﬁrst argument to apr_table_do
is called on each entry. The function is passed three arguments: the second argument
to apr_table_do, the key for the current entry, and the value for the current entry.
In this case, apr_snprintf(iterate, "mask_string", "loopcode") is called on
the single entry only if condition matches mask_string via string comparison. If so,
it writes loopcode to iterate for a number of bytes up to the integer representation
of mask_string’s address. Since this value is passed on the stack, the length limit will
be on the order of gigabytes. The value of iterate is then written to the stack location
corresponding to the stack frame immediately above the last snprintf frame. Note
that the forged stack frames which constitute iterate must be automatically adjusted
so that saved ebp values and other stack-referential pointers are modiﬁed appropriately.
This can be done automatically via a mechanism similar to the format string trick.
Systematic Analysis of Defenses Against ROP
19
7 Conclusion
The complexity of the code reuse space and the large variety of assumptions and threat
models make it difﬁcult to compare defenses or reason about the whole space. To solve
this, in this paper, we constructed a model of the code reuse space where statements
about attacker assumptions and the defenses that prevent them are represented as propo-
sitional formulas. We used a SAT-solver to search the space for insecure conﬁgurations
and to generate ideas about where to look for new attacks or defenses. We used the
model to analyze the security of applications running with the security features avail-
able in an Ubuntu Server and to suggest and construct several new classes of attacks:
pure ROP payloads, return-into-libn and Turing-complete return-into-libn. Our model-
ing technique can be used in future work to formalize the process of threat model def-
inition, analyze defense conﬁgurations, reason about composability and efﬁcacy, and
hypothesize about new attacks and defenses.
References
[1] Abadi, M., Budiu, M., Erlingsson, U., Ligatti, J.: Control-ﬂow integrity principles, imple-
mentations, and applications. ACM Trans. Inf. Syst. Secur. 13(1), 4:1–4:40 (Nov 2009)
[2] Arnold, S.: Security/features (March 2013), https://wiki.ubuntu.com/Security/Features
[3] Bennett, J: The number of
the beast, http://www.ﬁreeye.com/blog/technical/cyber-
exploits/2013/02/the-number-of-the-beast.html
[4] Bletsch, T., Jiang, X., Freeh, V., Liang, Z.: Jump-oriented programming: A new class of
code-reuse attack. In: Proc. of the 6th ACM CCS (2011)
[5] Bray, B.: Compiler security checks in depth. Online (2002), http://msdn.microsoft.com/en-
us/library/aa290051%28v=vs.71%29.aspx
[6] Buchanan, E., Roemer, R., Shacham, H., Savage, S.: When good instructions go bad: gen-
eralizing return-oriented programming to RISC. In: Proc. of the 15th ACM CCS (2008)
[7] Checkoway, S., Davi, L., Dmitrienko, A., Sadeghi, A., Shacham, H., Winandy, M.: Return-
oriented programming without returns. In: Proc. of the 17th ACM CCS. pp. 559–572 (2010)
[8] Cowan, C., Beattie, S., Johansen, J., Wagle, P.: Pointguard: protecting pointers from buffer
overﬂow vulnerabilities. In: Proceedings of the 12th USENIX Security Symposium (2003)
(2011),
[9] Eeckhoutt,
Chaining
P.V.:
DEP
with
ROP
http://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-
dep-with-rop-the-rubikstm-cube/buildingblocks
[10] Etoh, H.: Propolice: Gcc extension for protecting applications from stack-smashing attacks.
IBM (April 2003), http://www.trl.ibm.com/projects/security/ssp (2003)
[11] Hiser, J., Nguyen, A., Co, M., Hall, M., Davidson, J.: ILR: Where’d my gadgets go. In:
IEEE Symposium on Security and Privacy (2012)
[12] Homescu, A., Stewart, M., Larsen, P., Brunthaler, S., Franz, M.: Microgadgets: size does
matter in turing-complete return-oriented programming. In: Proceedings of the 6th USENIX
conference on Offensive Technologies. pp. 7–7. USENIX Association (2012)
[13] Katebi, H., Sakallah, K.A., Marques-Silva, J.P.: Empirical study of the anatomy of modern
sat solvers. In: SAT, pp. 343–356. Springer (2011)
[14] Kayaalp, M., Ozsoy, M., Abu-Ghazaleh, N., Ponomarev, D.: Branch regulation: low-
overhead protection from code reuse attacks. In: Proceedings of the 39th International Sym-
posium on Computer Architecture. pp. 94–105 (2012)
20
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
[15] Kil, C., Jun, J., Bookholt, C., Xu, J., Ning, P.: Address space layout permutation (ASLP):
Towards ﬁne-grained randomization of commodity software. In: Proc. of ACSAC’06 (2006)
[16] Kornau, T.: Return oriented programming for the ARM architecture. Ph.D. thesis, Master’s
thesis, Ruhr-Universitat Bochum (2010)
[17] Li, J., Wang, Z., Jiang, X., Grace, M., Bahram, S.: Defeating return-oriented rootkits with
“return-less” kernels. In: EuroSys (2010)
[18] de Moura, L.M., BjÃÿrner, N.: Z3: An efﬁcient smt solver. In: Tools and Algorithms for the
Construction and Analysis of Systems, 14th International Conference (TACAS). Lecture
Notes in Computer Science, vol. 4963, pp. 337–340. Springer (2008)
[19] Nergal: The advanced return-into-lib(c) exploits (pax case study). Phrack Magazine 58(4),
54 (Dec 2001)
[20] Onarlioglu, K., Bilge, L., Lanzi, A., Balzarotti, D., Kirda, E.: G-free: Defeating return-
oriented programming through gadget-less binaries. In: Proc. of ACSAC’10 (2010)
[21] One, A.: Smashing the stack for fun and proﬁt. Phrack magazine 7(49), 14–16 (1996)
[22] Pappas, V., Polychronakis, M., Keromytis, A.: Smashing the gadgets: Hindering return-
oriented programming using in-place code randomization. In: Proc. of IEEE Symposium
on Security and Privacy (2012)
[23] PaX: PaX non-executable pages design & implem., http://pax.grsecurity.net/docs/noexec.txt
[24] Polychronakis, M., Anagnostakis, K.G., Markatos, E.P.: Emulation-based detection of non-
self-contained polymorphic shellcode. In: Proc. of RAID’07. pp. 87–106 (2007)
[25] Roemer, R.: Finding the bad in good code: Automated return-oriented programming exploit
discovery. Ph.D. thesis, UCSD (2009)
[26] Roglia, G., Martignoni, L., Paleari, R., Bruschi, D.: Surgically returning to randomized lib
(c). In: Proc. of ACSAC’09 (2009)
[27] Russinovich, M.: Windows internals. Microsoft, Washington, DC (2009)
[28] Shacham, H.: The geometry of innocent ﬂesh on the bone: Return-into-libc without function
calls (on the x86). In: ACM CCS (2007)
[29] Shacham, H., Page, M., Pfaff, B., Goh, E.J., Modadugu, N., Boneh, D.: On the effectiveness
of address-space randomization. In: Proc. of ACM CCS. pp. 298–307 (2004)
[30] Sinnadurai, S., Zhao, Q., fai Wong, W.: Transparent runtime shadow stack: Protection
against malicious return address modiﬁcations (2008)
[31] Snow, K., Monrose, F., Davi, L., Dmitrienko, A.: Just-in-time code reuse: On the effective-
ness of ﬁne-grained address space layout randomization. In: Proc. of IEEE Symposium on
Security and Privacy (2013)
[32] Strackx, R., Younan, Y., Philippaerts, P., Piessens, F., Lachmund, S., Walter, T.: Breaking
the memory secrecy assumption. In: Proc. of EuroSec’09 (2009)
[33] Team, P.: Pax address space layout randomization (aslr) (2003)
[34] Tran, M., Etheridge, M., Bletsch, T., Jiang, X., Freeh, V., Ning, P.: On the expressiveness of
return-into-libc attacks. In: Proc. of RAID’11. pp. 121–141 (2011)
[35] Twitch: Taking advantage of non-terminated adjacent memory spaces. Phrack 56 (2000)
[36] van de Ven, A.: New security enhancements in red hat enterprise linux v. 3, update 3.
Raleigh, North Carolina, USA: Red Hat (2004)
[37] Wachter, M., Haenni, R.: Propositional dags: a new graph-based language for representing
boolean functions. KR 6, 277–285 (2006)
[38] Wartell, R., Mohan, V., Hamlen, K.W., Lin, Z.: Binary stirring: self-randomizing instruction
addresses of legacy x86 binary code. In: Proc. of ACM CCS. pp. 157–168 (2012)
[39] Xu, H., Chapin, S.: Improving address space randomization with a dynamic offset random-
ization technique. In: Proc. of the 2006 ACM symposium on Applied computing (2006)
[40] Younan, Y., Joosen, W., Piessens, F.: Code injection in C and C++: A survey of vulnerabil-
ities and countermeasures. Technical Report CW386, Katholieke Universiteit Leuven (July
2004)