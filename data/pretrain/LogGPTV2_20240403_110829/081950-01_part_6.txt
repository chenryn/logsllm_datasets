aaa 1
aaa 2
bbb 3
aaa 3
bbb 4
41
Python自动化运维快速入门
aaa 4
bbb 5
我们看到break直接跳出了循环，而continue只是跳过了其中一步（输出bbb 2的那一步）。
1.5.8 可迭代对象、迭代器和生成器
迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。迭代器是一个可以记住
遍历位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问结束。迭
代器只能往前不会后退。迭代器有两个基本的方法：iter() 和 next()。字符串、列表或元组对
象都可用于创建迭代器。
首先来了解一下可迭代对象、迭代器和生成器的概念。
（1）可迭代对象：如果一个对象拥有__iter__方法，这个对象就是一个可迭代对象。在
Python中，我们经常使用for来对某个对象进行遍历，此时被遍历的对象就是可迭代对象，常
见的有列表、元组、字典。for循环开始时自动调用可迭代对象的__iter__方法获取一个迭代器，
for循环时自动调用迭代器的next方法获取下一个元素，当调用可迭代器对象的next方法引发
StopIteration异常时，结束for循环。
（2）迭代器：如果一个对象拥有__iter__方法和__next__方法，这个对象就是一个迭代器。
（3）生成器：生成器是一类特殊的迭代器，就是在需要时才产生结果，而不是立即产生
结果。这样可以同时节省CPU和内存。有两种方法可以实现生成器：
(cid:2) 生成器函数。使用def定义函数，使用yield而不是return语句返回结果。yield语句
一次返回一个结果，在每个结果中间挂起函数的状态，以便下次从它离开的地方继续
执行。
(cid:2) 生成器表达式。类似于列表推导，只不过是把一对大括号[]变换为一对小括号()。但
是生成器表达式是按需产生一个生成器结果对象，要想拿到每一个元素，就需要循环
遍历。
三者之间的关系如图1.28所示。
迭代器 生成 器
可迭代对象 序列（字符串、列表、元组）
字典
图1.28 可迭代对象、迭代器和生成器的关系
可迭代对象包含迭代器、序列、字典；生成器是一种特殊的迭代器，下面分别举例说明。
42
第1章 自动化运维与Python
【示例1-20】创建一个迭代器对象（lx_iterator.py）。
1 class MyListIterator(object): # 定义迭代器类，其是MyList可迭代对象的迭代器类
2
3 def __init__(self, data):
4 self.data = data # 上边界
5 self.now = 0 # 当前迭代值，初始为0
6
7 def __iter__(self):
8 return self # 返回该对象的迭代器类的实例；因为自己就是迭代器，所以返回self
9
10 def __next__(self): # 迭代器类必须实现的方法
11 while self.now < self.data:
12 self.now += 1
13 return self.now - 1 # 返回当前迭代值
14 raise StopIteration # 超出上边界，抛出异常
因为类MyListIterator实现了__iter__方法和__next__方法，所以它是一个迭代器对象。由
于__iter__方法本返的是迭代器（本身），因此它也是可迭代对象。迭代器必然是一个可迭代
对象。
下面使用三种方法遍历迭代器MyListIterator。
1 my_list = MyListIterator（5） # 得到一个迭代器
2 print("使用for循环来遍历迭代器")
3 for i in my_list:
4 print(i)
5 my_list = MyListIterator（5） # 重新得到一个可迭代对象
6 print("使用next来遍历迭代器")
7 print(next(my_list))
8 print(next(my_list))
9 print(next(my_list))
10 print(next(my_list))
11 print(next(my_list))
12 my_list = MyListIterator（5） # 重新得到一个可迭代对象
13 print("同时使用next和for来遍历迭代器")
14 print("先使用两次next")
15 print(next(my_list))
16 print(next(my_list))
17 print("再使用for,会从第三个元素2开始输出")
18 for i in my_list:
19 print(i)
输出结果如下：
使用for循环来遍历迭代器
0
1
2
3
4
使用next来遍历迭代器
43
Python自动化运维快速入门
0
1
2
3
4
同时使用next和for来遍历迭代器
先使用两次next
0
1
再使用for,会从第三个元素2开始输出
2
3
4
从结果可以看出，for 循环实际上就是调用了迭代器的__next__方法，当捕捉到
MyListIterator异常时自动结束for循环。
【示例1-21】创建一个可迭代对象。
1 class MyList(object): # 定义可迭代对象类
2 def __init__(self, num):
3 self.data = num # 上边界
4 def __iter__(self):
5 return MyListIterator(self.data) # 返回该可迭代对象的迭代器类的实例
因为对象MyList实现了__iter__方法返回了迭代器类的实例，所以它是一个可迭代对象。
遍历操作可使用for循环，不可使用next()。for循环实质上还是调用MyListIterator的__next__
方法。
1 my_list = MyList（5） # 得到一个可迭代对象
2 print("使用for循环来遍历可迭代对象my_list")
3 for i in my_list:
4 print(i)
5 my_list = MyList（5） # 得到一个可迭代对象
6 print("使用next来遍历可迭代对象my_list")
7 print(next(my_list))
8 print(next(my_list))
9 print(next(my_list))
10 print(next(my_list))
11 print(next(my_list))
输出结果如下：
使用for循环来遍历可迭代对象my_list
0
1
2
3
4
使用next来遍历可迭代对象my_list
print(next(my_list))
44
第1章 自动化运维与Python
TypeError: 'MyList' object is not an iterator
从运行结果知道，可迭代对象如果没有__next__方法，则无法通过next()进行遍历。
【示例1-22】创建一个生成器，像定义一般函数一样，只不过使用yield返回中间结果。
生成器是一种特殊的迭代器，自动实现了迭代器协议，即__iter__方法和next方法，不需要再
手动实现两个方法。创建生成器：
1 def myList(num): # 定义生成器
2 now = 0 # 当前迭代值，初始为0
3 while now < num:
4 val = (yield now) # 返回当前迭代值，
5 now = now + 1 if val is None else val # val为None，迭代值自增1，否则重新
设定当前迭代值为val
遍历生成器：
1 my_list = myList（5） # 得到一个生成器对象
2 print("for 循环遍历生成器myList")
3 for i in my_list:
4 print(i)
5
6 my_list = myList（5） # 得到一个生成器对象
7 print("next遍历生成器myList")
8 print(next(my_list)) # 返回当前迭代值
9 print(next(my_list)) # 返回当前迭代值
10 print(next(my_list)) # 返回当前迭代值
11 print(next(my_list)) # 返回当前迭代值
12 print(next(my_list)) # 返回当前迭代值
运行结果如下：
for 循环遍历生成器myList
0
1
2
3
4
next遍历生成器myList
0
1
2
3
4
具有yield关键字的函数都是生成器，yield可以理解为return，返回后面的值给调用者。
不同的是return返回后，函数会释放，而生成器则不会。在直接调用next方法或用for语句进
行下一次迭代时，生成器会从yield下一句开始执行，直至遇到下一个yield。
1.5.9 对象赋值、浅复制、深复制
Python 中对象的赋值，复制（深/浅复制）之间是有差异的，如果使用时不注意，就可能
导致程序崩溃或严重bug。下面就通过简单的例子来介绍这些概念之间的差别。
45
Python自动化运维快速入门
【示例1-23】对象赋值操作（testFuzhi.py）。
1 # encoding=utf-8
2
3 object1 = ["Will", 28, ["Python", "C#", "JavaScript"]]
4 # 对象赋值
5 object2 = object1
6 print(f"id of object1 {id(object1)}")
7 print(object1)
8 print([id(ele) for ele in object1])
9
10
11 print(f"id of object2 {id(object2)}")
12 print(object2)
13 print([id(ele) for ele in object2])
14
15
16 # 尝试改为object1 ,然后看object2的变化
17
18 object1[0] = "Wilber"
19 object1[2].append("CSS")
20 print("更改object1之后")
21 print(f"id of object1 {id(object1)}")
22 print(object1)
23 print([id(ele) for ele in object1])
24
25
26 print(f"id of object2 {id(object2)}")
27 print(object2)
28 print([id(ele) for ele in object2])
输出结果如图1.29所示。
图1.29 对象赋值操作
下面来分析代码：首先第 3 行创建了一个名为 object1 的变量，这个变量指向一个 list 对
象，第5行将object1赋给object2，然后打印它们及它们指向的对象在内存中的地址（通过id
函数）。第 18 和 19 行修改 object1，然后分别打印 object1 与 object2 在内存中的地址。从运
行结果来看，无论是object1还是object2，它们都向同一个内存地址，即指向的都是同一个对
象，也就是说“object1 is object2 and object1[i] is object2[i] ”，对object1的操作同样会反应到
46
第1章 自动化运维与Python
object2上，打印object1和object2的结果始终是显示一致的。
【示例1-24】浅复制操作（testCopy.py）。
1 # encoding=utf-8
2 import copy
3 object1 = ["Will", 28, ["Python", "C#", "JavaScript"]]
4 # 对象复制
5 object2 = copy.copy(object1)
6 print(f"id of object1 {id(object1)}")
7 print(object1)
8 print([id(ele) for ele in object1])
9
10
11 print(f"id of object2 {id(object2)}")
12 print(object2)
13 print([id(ele) for ele in object2])
14
15
16 # 尝试改为object1 ,然后看object2的变化
17
18 object1[0] = "Wilber"
19 object1[2].append("CSS")
20 print("更改object1之后")
21 print(f"id of object1 {id(object1)}")
22 print(object1)
23 print([id(ele) for ele in object1])
24
25
26 print(f"id of object2 {id(object2)}")
27 print(object2)
28 print([id(ele) for ele in object2])
运行结果如图1.30所示。
图1.30 浅复制操作
代码说明：与testFuzhi.py不同的是，第2行导入copy模块，第5行调用copy模块的copy
函数来为 object2 进行赋值，也就是浅复制操作。从运行结果来看，object1 与 object2 指向内
存中的不同位置，它们属于两个不同的对象，但列表内部仍指向同一个位置。修改了object1[0]
= "Wilber"后，object1 对象的第一个元素指向了新的字符串常量"Wilber"，而 object2 仍指向
47
Python自动化运维快速入门
"Will"。执行object1[2].append("CSS")时object1[2]的地址并未改变，object1与object2的第三
个元素仍指向此子列表。
总结一下浅复制：通过copy模块中的浅复制函数copy()对object1指向的对象进行浅复制，
然后浅复制生成的新对象赋值给 object2 变量。浅复制会创建一个新的对象，这个例子中"
object1 is not object2"，但是对于对象中的元素，浅复制就只会使用原始元素的引用（内存地址），
也就是说，"wilber[i] is will[i]"。当对object1进行修改时由于list的第一个元素是不可变类型，
因此object1对应的list的第一个元素会使用一个新的对象，但是list的第三个元素是一个可变
类型，修改操作不会产生新的对象，object1的修改结果会就相应地反应到object2上。
【示例1-25】深复制操作（testDeepCopy.py）。