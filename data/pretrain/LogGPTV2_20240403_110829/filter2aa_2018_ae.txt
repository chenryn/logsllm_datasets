Cryptographic Primitives Library” (Microsoft, n.d.-d). The author noted a
discrepancy with the schannel SSP documentation and anecdotal observations of the
cipher suite preferences in practice. The author then compiled the Microsoft
provided “BCryptEnumContextFunctions” sample code on the same documentation
page (Microsoft, 2014c, p. 1) to list cipher suites in order of preference. Running
this code across several test systems revealed a di↵erent order than was listed in the
Schannel documentation, notably with Ephemeral suites preferred.
The CNG function and structure documentation contain some constants that
may appear in Schannel, but surprisingly fewer than was hoped. Because of this,
the available header ﬁles were examined. Relevant header ﬁles were identiﬁed
through the CNG documentation, and were noted to be “bcrypt.h,” “ncrypt.h,” and
“sslprovider.h.” Unique constants were identiﬁed that could be used to locate
structures, like keys, in memory. Examples include the magic values for RSA and
ECC private keys, cipher suite identiﬁers, TLS version identiﬁers, and ﬂag values.
30
2.4 Prior Work
This ﬁnal section of the literature review focuses on techniques that exist for
identiﬁcation and extraction of keys or other SSL secrets from memory.
2.4.1 Key Identiﬁcation
This paper would likely be remiss to review key identiﬁcation with respect to
SSL/TLS without mentioning the paper “Playing hide and seek with stored keys”
by Shamir and van Someren (1998). The paper discusses mechanisms for identifying
RSA keys in “Gigabytes of data,” which at the time referred to secondary storage,
but holds true today, particularly “eﬃcient algebraic attacks which can locate secret
RSA keys in long bit strings” (Shamir & van Someren, 1998, p.1).
Many of the techniques described are still valid and apply to ephemeral keys
as well as persisted keys, but some are impractical considering the size of the data
set and the evolution of stored data over time. For instance, entropy based attacks
against a process that routinely generates random bits and handles encrypted blobs,
as LSASS does, will likely not yield eﬃcient and meaningful results. Consider
32-byte P-256 private keys for instance and compare that to any other
pseudo-random value like a GUID of some kind (even within SSL to values such as
the client/server random or session ID). Additionally, the private keys may be
encrypted in memory, which would provide a match when employing such a method,
but not in a form that is directly usable. The paper addresses sound generalizable
approaches, however implementation speciﬁc details will likely prove more eﬃcient
in the context of the thesis, as will be examined later in this section.
In addition to RSA Keys, AES keys may also exist in memory. AES is the
de-facto standard for symmetric cipher amongst the TLS cipher suites. In fact,
TLS RSA WITH AES 128 GCM SHA256 is the only cipher suite required for TLS
1.2 in the NIST TLS Implementation guidelines (Polk, McKay, & Chokhani, 2014).
It plays the role of the session key that is derived after the PMK is exchanged or
31
derived. Because the symmetric key must exist while the connection is active in
order to encrypt and decrypt data, this is an artifact that will deﬁnitely be sought in
memory. At issue, however, is that the AES key is intended to be pseudo-randomly
generated, so it should be indistinguishable unless stored in a speciﬁc context.
One paper entitled “Lest we remember: cold-boot attacks on encryption
keys” discusses such context that typically appears across implementations
(Halderman et al., 2008). Speciﬁcally, a novel technique was developed based on the
AES key schedule, which is not random. The key schedule is described described in
FIPS-197, and is a mechanism to take the relatively short key material, and
“expand” it into a number of round keys for use in di↵erent rounds of the
algorithm. The product of this operation is of a ﬁxed size as there are a ﬁxed
number of rounds per keys-size, and is also referred to as the key schedule.
FIPS-197 notes that “The Key Expansion generates a total of Nb(Nr + 1) words5”
(NIST, 2001, p. 19), where Nb is a ﬁxed value of 4 representing the number of
columns in the state and Nr is the number of rounds, which is 10 for 128-bit keys,
12 for 192-bit keys, and 14 for 256-bit keys (NIST, 2001, p. 7). The schedule is then
176 bytes for 128-bit keys, 208 bytes for 192-bit keys, and 224 bytes for 256-bit keys.
Because the schedule is deterministically based on the key and will be used every
time a speciﬁc key is used, it is seen as computationally expensive to recalculate and
destroy the schedule repeatedly, which is ostensibly why it is often stored.
Not only do the authors discuss identiﬁcation of AES keys, but RSA keys as
well, going so far as to release PoC source code to detect both. Since this seminal
work, tools such as FindAES by Jesse Kornblum and the subsequent functionality
ported to the scanning tool bulk extractor, curated by Simson Garﬁnkel, also
implement key schedule based scanning (Garﬁnkel, 2013). Clearly this method relies
on the implementer storing the schedule, but this appears by the accounts of the
paper to be common practice (Halderman et al., 2008).
5A word in this context is 4 bytes
32
An even more direct revelation concerning key identiﬁcation was discovered
in a paper about identifying weaknesses in Dual EC entitled “On the Practical
Exploitability of Dual EC in TLS Implementations” (Checkoway et al., 2014). The
examination of speciﬁc implementations meant that Schannel was considered, and
in the case of Schannel the authors “focus on ECDHE/ECDSA handshakes that use
P-256” (Checkoway et al., 2014, p. 8). They note that all information they acquire
and disseminate about Schannel in the paper is the fruit of their reverse engineering
e↵orts. The authors also note the fact that LSASS handles the TLS handshake and
key derivation. The other ﬁndings relevant to this thesis are noted here:
• bcryptprimatives.dll implements the user-mode CNG API
• Requested random bytes for key material are not cached
• Schannel requests 40 bytes for an ephemeral P-256 private key (even though
only 32 are used)
• Schannel “caches ephemeral keys for two hours (this timeout is hard-coded in
the conﬁgurations we examined)” (Checkoway et al., 2014, p. 8)
• Schannel generates a session ID that is implementation unique and can be
roughly ﬁngerprinted
• Schannel has a hard-coded cache size of 20,000 entries (per the authors’
examination) (Checkoway et al., 2014, p. 9)
These ﬁndings provide clues about key caching, hard-coded values, and
temporal context about operations occurring around key generation. The
bcryptprimatives module can now be targeted as part of the analysis, adding to the
other modules identiﬁed while reviewing the Microsoft documentation. Additionally,
the fact that Schannel generates 40 random bytes means that, in the event that
these random bytes are stored together with the ephemeral key, they may help
identify it as such when looking the key on the heap. Hard-coded values like the 2
hour timeout and the 20,000 cache are also somewhat unique values that may be
used to locate and target speciﬁc functions for reverse engineering e↵orts.
33
The session ID generation mechanism is of particular instance, as a
non-random component to the session ID may make it more distinguishable when
searching. This is incredibly desirable as all of the public Secret values are randomly
generated or based on something mutable like time that does not make for ﬂexible
scanning features. The session ID, according to the paper, gets it’s ﬁngerprint from
the “hard-coded” cache length value of 20,000. The paper states that the ﬁrst four
bytes of the 32 random bytes requested from “BCryptGenRandom” are taken as an
integer and replaced with the modulus of that number against the cache length
value, producing two bytes of zeros in the third and fourth position (Checkoway et
al., 2014, p. 9).
2.4.2 SSL/TLS Decryption
Perhaps the most common and well documented example of SSL/TLS
decryption is the implementation in Wireshark. Wireshark has both a graphical
interface and scripting engine that make it a powerful analysis tool, particularly for
small data sets like the ones that will be examined in the thesis experimentation. As
far as the thesis is concerned, the actual internals of the decryption process are
irrelevant excepting that the overall process is sane and can be relied upon. More
interesting in this context are what parameters and preconditions Wireshark
requires to perform decryption of an arbitrary connection, and how parameters may
be passed.
Wireshark’s source code (Wireshark, 2015) shows that it accepts an “SSL
keylog ﬁle” as a text ﬁle with secrets in the following formats6:
• RSA Session-ID: Master-Key:
• CLIENT RANDOM  
• RSA 
6Any value in brackets denotes a value to be replaced with the hexadecimal representation of
the binary value
34
• PMS CLIENT RANDOM 
The source code also shows that Wireshark accepts a Pre-Shared Key (PSK), which
is given as a hexadecimal string representing between 0 and 16 bytes (Wireshark,
2015). Finally, one can provide the provide an RSA private key in X.509,
Privacy-enhanced Electronic Mail (PEM), or Public Key Cryptography Standards
(PKCS) #12 format (Wireshark, 2015).
One of the inspirational sources for the topic of this thesis was a series of
blog posts about decrypting RDP traﬃc using the private key stored persistently on
Windows systems. Both posts noted that:
1. The full key exchange needed to be captured
2. Sessions which used ephemeral cipher suites (and by extension, the TLS
implementation of PFS) were incompatible with this approach
The blog post by Steve Elliot of Contexis went on to leverage FreeRDP to rebuild
video and keyboard data from the session, replaying it in real-time or at extended
speed (Elliot, 2014). Contexis, however, did not make that tool available to the
general public, and it is hoped that a method developed here could be leveraged to
do so. Further, if successful, both barriers posed would be negated within the time
frame of the session cache life.
2.4.3 Key Extraction
An encoding-speciﬁc detection mechanism for RSA keys was discussed in
2006 by Tobias Klein, in a paper entitled “All your private keys are belong to us
(Extracting RSA private keys and certiﬁcates from process memory).” The primary
premise of the paper is that all common binary Private Key formats leverage some
form of Abstract Syntax Notation One (ASN.1) encoding (The author speciﬁcally
mentions the PKCS #8 and x.509 standards). ASN.1 generally follows a
Type-Length-Value (TLV) structure, and the author correctly notes that all
certiﬁcates begin with the tag “SEQUENCE” which is represented by the ID 0x30,
35
followed by the length ﬁeld, which is a single byte unless the value is greater than
127 bytes long (the highest order bit is set). If this is the case, then the length bytes
notes how many following bytes are used to express the total length. So, in the case
of certiﬁcates with RSA public keys, this value is often “0x82” or “1000 0010” in
binary, meaning that the two following bytes express the length of the certiﬁcate,
giving them a common signature of “0x3082.” The author also notes that Private
Keys are then followed by a TLV of “0x020100” representing the version (Klein,
2006, p. 2). Windows leverages these encoding schemes (Microsoft, 2015a), making
it likely that this technique could apply to the thesis when observing ephemeral
private keys.
In 2010, Jean-Michel Picod and Elie Bursztein presented work at BlackHat
about reverse engineering Windows Data Protection API (DPAPI), and provided a
PoC tool known as DPAPIck. The particular relevance that the paper has to this
thesis is that, while not explicitly discussed, the private keys are protected with
DPAPI. In 2014, Francisco Picasso updated DPAPIck (now at version 0.3), and
added support for Windows 8 and Windows 10 systems, though DPAPI-NG (the
component of CNG that replaces DPAPI) has not been “fully reversed” (Picasso,
2015).
Amongst the ensuing updates to the work was the addition of “Probes” for
parsing out speciﬁc artifacts protected by DPAPI, one of which was generically the
RSA Private Key ﬁle. The catch is that most DPAPI secrets are indirectly
protected by a user password, where as System DPAPI secrets require a system
“password” that is protect by LSA Secrets. The author of this thesis leveraged the
RSA “Probe” by writing a quick interface for it based on an example provided by
Fransico Picasso for decrypting a di↵erent system secret (Wi-Fi credentials). This
allowed the author to later decrypt the RDP private key to search for it in memory
(still used for signing, even when ephemeral cipher suites were leveraged).
Another closely related work was presented by Jason Ge↵ner at BlackHat
2011, entitled “Exporting Non-Exportable RSA Keys.” In this work, the author
36
looks for ways to export private keys in both CryptoAPI and CNG, successfully
completing both tasks by ﬂipping the exportable ﬂag accordingly. Of particular
interest is his work with CNG, in which he reverse engineers some important
functions of CNG through debugging and dis-assembly (Ge↵ner, 2011).
The venerable Mimikatz tool developed by Benjamin Delphy is also capable
of decrypting and exporting Certiﬁcates stored with CNG, as can be seen in its
source code on Github (Delphy, 2016a). Mimikatz can operate on a live machine or
against a user-mode dump ﬁle, something which Volatility and Rekall currently do
not do. Mimikatz also provides a Dynamic Link Library (DLL) which can be loaded
into WinDbg to leverage the tool in concert with Microsoft’s own debugging and
analysis platform (Delphy, 2013).
Perhaps most directly in line with the goal of the thesis are several
community plug-ins that have been developed for Volatility and target TLS related
artifacts. A brief list of those available on the Volatility Github repository, including
the community repository, appears below alongside the docstring provided by the
plug-in and the author:
• dumpcerts (vol): Dump RSA private and public SSL keys
• haystack (Lo¨ıc Jaqueme): Search for a record in all the memory space.
• linux ssh agent key (Ying Li): Get SSH keys from ssh-agent process heaps
• rsakey (Philip Huppert): Extract Base64/PPEM encoded private RSA keys
from physical memory.
Importantly, none of these plug-ins address decryption or identiﬁcation of
connections using ephemeral cipher suites. The ssh agent key plug-in speciﬁcally
targets Linux systems, but was reviewed to identify any reusable logic that could
apply to ﬁnding ephemeral private keys. The “RSAKey” plug-in is particularly
simple, scanning physical memory in ﬁxed chunk sizes for the string “—–BEGIN
RSA PRIVATE KEY—–” as an identiﬁer for keys in the PEM format. The
comments in the plug-in note that, for simplicity, the plug-in does not use overlap
between chunks, meaning that cross-boundary misses may occur (Huppert, 2015).
37
While documentation suggests that Windows supports importing the PEM format
(Microsoft, n.d.-a), the storage is uniﬁed into a di↵erent format and the private keys
encrypted via DPAPI (Microsoft, 2014b). It is therefore unlikely that this would
reveal keys in LSASS memory. Finally, the dumpcerts plug-ins is an implementation
of the “trapkit” method discussed earlier, per the comments in the plug-in itself
(Volatility, 2015).
The closest functionality to the task at hand and most versatile of these
plug-ins is “haystack,” which is not SSL speciﬁc. It is designed to identify heaps
within processes not necessarily listed in the PEB, and identify the speciﬁc
allocations on the heap. In the README documentation, an example is given
whereby the author notes that one can extract the OpenSSL session records to
obtain the session keys using this plug-in (and the provided structure) (Jaqueme,
2015).
2.4.4 Perfect Forward Secrecy
Up until this point in the research, all e↵orts have been focused on obtaining
the persistent private key for decryption. None have focus on cipher suites
embracing PFS, which render the persistent key useless for decryption (though not
impersonation, as it is still leveraged for identity). This section reviews research
which instead focuses on ephemeral cipher suites and methods for subverting them.
One of the most informative and thorough sources on subverting PFS,
though it provides no implementation, is a blog post by Tim Taubert from
November of 2014. The post explains how TLS session tickets, as implemented,
break the property of Perfect Forward Secrecy, by allowing the state (including the
master key) to be transmitted, and thus captured by an adversary, which could be
potentially decrypted at any point in the future, leading to decryption of the
connection (Taubert, 2014). Tim goes on to give examples of conﬁguring the cache
settings in di↵erent Web Server implementations to mitigate this as best as possible.
38
The post itself cites several other works about issues with the TLS handling of PFS,
including the work described below.
The most recent and directly relative work was presented at BlackHat USA
in 2013, entitled “TLS ‘Secrets.”’ This presentation discusses implementing a
mechanism for extracting OpenSSL cache entries, speciﬁcally looking at Unix-like
systems. The focus of the presentation was actually heavily oriented around RFC
5077 as implemented by OpenSSL. A major ﬁnding was the fact that the
Speciﬁcation, in an attempt to remain implementation agnostic, does not provide
any particulars or guidance on key usage or storage. OpenSSL was found to use 128
bit AES keys to encrypt tickets, which did not get rotated according to the author.
The author sums up the impact of this ﬁnding by stating that “128 bit of security is
all you get (at best), regardless of the cipher which has been negociated [sic]”
(Daigniere, 2013, p. 8). This work cannot directly translate to the Windows
implementation, sadly, but shows that the concept upon which the thesis is based is
sound.
Finally, a paper entitled “Perfect forward not so secrecy” seemingly
completed in December 2013 also looks at associating session keys with captures
TLS sessions and, interestingly, how to further limit access to these keys (Dreijer &
Rijs, 2013). The paper focuses on OpenSSL server-side implementations and, like
the BlackHat USA presentation, on RFC 5077. The authors develop a python PoC
to extract the master key with session ID from OpenSSL implementations (Dreijer
& Rijs, 2013, p. 8).
39
CHAPTER 3. RESEARCH METHODOLOGY
This chapter focuses on developing a logical, methodical, and practical way
to go about identifying whether secrets and other TLS artifacts exist in LSASS
memory, and, if so, whether they maintain a discernible relationship in memory.
The exploratory nature of the research means that such artifacts or relationships
may not exist; however, like other examples where encryption is employed, a key
generated and used ephemerally may reside in volatile memory for some duration.
Other artifacts from the transaction should also exist, particularly because
connections are stateful and the operating system manages the creation,
maintenance, and termination of these connections. There are also reasons why