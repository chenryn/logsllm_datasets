⾃动src之ARL⼤改造-优化漏扫 
0x00 前⾔ 
这篇⽂章是继续对灯塔ARL的优化以达到较好的辅助src漏洞挖掘。继前⾯通过对host碰撞的简单优
化我⼤概了解了⼀下arl的逻辑，接下来这篇⽂章是针对更加复杂的nuclei的漏扫模块做⼀定的优
化。
0x01 简单看⼀下nuclei扫描逻辑 
这⾥的nuclei扫描可以理解为arl调⽤的⼤名鼎鼎的漏扫⼯具nuclei作为主要漏扫引擎。不知道nuclei
的可以⾃⼰去GitHub下载安装⼤致体验⼀下，暂时可以简单的理解为国外版的xray。ARL这⾥直接
将nuclei作为漏扫引擎来集成使⽤了。
我们⼤概看⼀下代码上的逻辑，搜⼀下nuclei
跟进去
看起来是展示扫描结果的，⽽我们需要的是整个扫描启动的过程，所以看别的地⽅
找到⼀个nuclei_scan.py，跟进去看看
这个nucleiscan类有很多⽅法看着就很科学，⼀个个简单浏览⼀下
可以看到是直接调⽤的命令⾏的nuclei命令来执⾏的扫描任务
先exec命令⾏的nuclei，等执⾏完毕后去执⾏dump_result函数
dump_result则是读取nuclei执⾏完毕后的结果⽂件⾥的内容然后组合成⼀个result列表后进⾏返
回。
0x02 思考⼀下优化点 
浏览完整个扫描的过程后，我⼤概有两块的优化点要做：
1. 优化nuclei的扫描，⽐如仔细阅读他的命令⾏参数，修改⼀下相对的参数进⾏执⾏
2. 添加新的扫描引擎⽐如xray，使每个扫描任务同时通过nuclei和xray等其他引擎进⾏扫描，然
后将结果整合成同⼀个格式进⾏返回
这两个⽅向的优化都需要去做⼀下，第⼀个优化⽅向则需要我们了解⼀下nuclei的整体命令⾏参数
的含义，第⼆个优化⽅向则需要我们把xray也加进来，修改部分代码并把xray的扫描结果专成和
nuclei同⼀个格式。
0x03 优化nuclei命令⾏参数 
想要优化命令⾏参数⾸先我们得先了解，这⾥执⾏的命令⾏参数的整体含义，我们把它摘出来⼀个
个翻译⼀下
[self.nuclei_bin_path, "-duc", //禁⽤poc更新
                   "-tags cve", //通过tags来指定模板，这⾥应该是指CVE的模板
                   "-severity low,medium,high,critical", //漏洞等级
                   "-type http", //类型
                   "-l {}".format(self.nuclei_target_path), //从⽂件⾥读取⽬标列表
                   "-json", //输出转成json格式
                   "-stats", //打印扫描进度
                   "-stats-interval 60", //每隔六⼗秒打印⼀次扫描进度
                   "-o {}".format(self.nuclei_result_path), //结果输出到指定⽂件
有⼏个点可能需要考虑⼀下：
1. nuclei是不是需要定时更新包括更新poc和程序版本，这个可能需要检查⼀下docker⾥集成的
nuclei版本
2. 只使⽤cve的tag的poc是不是⾜够，我觉得可以去掉
3. 只检测http的类型是不是范围⼩了点
4. 有没有额外需要增加的参数
关于这个tags可以看这个
接下来前三点⾃⾏考虑吧，第四点这边看了⼀下可能有两个需要考虑的：
   -iserver, -interactsh-server string  interactsh server url for self-hosted 
instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)
   -headless   enable templates that require headless browser support (root user 
on linux will disable sandbox)
headless不陌⽣，就是⽆头浏览器的意思，加上去可能会对⼀些其他的扫描效果更好些，那么第⼀
个interactsh-server是什么呢？
interactsh其实是⼀个⽐较有名的开源dnslog服务，如果我们不指定的话，nuclei会直接使⽤已经部
署好的公共域名(default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)这⼏个来充当
dnslog，要知道这些是公共的，所以很有可能被加⼊到各类检测规则当中，因此理想情况下我们应
该⾃⾏购买域名然后搭建⾃⼰的interactsh服务⽤于扫描器⾥的dnslog以此来规避安全设备的检测
规则。具体如何搭建在interactsh的GitHub⻚⾯⾥有我就不在这⾥赘述了。搭建完毕后把这个参数
加⼊到扫描代码⾥即可。
0x04 增加xray扫描引擎 
另⼀个优化⽅向就是把xray也作为其中⼀个扫描引擎来使⽤，那么我们看⼀下怎么修改代码⽐较合
适。
⾸先是执⾏命令部分，我们先暂定我们要执⾏的xray的命令为：
./xray_darwin_amd64 webscan --url-file targetsfile --json-output resultsfile
那么回到nuclei那个代码那边，我们加⼀下xray的扫描命令并开启线程使其同时扫描
⼤致上改成这样是差不多了。
接下来修改dump_result这边，先来看看nuclei的json结果和xray的json结果有何不同
nuclei：
xray：
我们来看看dump_results⾥的字段是哪些
item = {
                "template_url": data["template-url"],
                "template_id": data["template-id"],
                "vuln_name": data["info"]["name"],
                "vuln_severity": data["info"]["severity"],
                "vuln_url": data["matched-at"],
                "curl_command": data["curl-command"],
                "target": data["host"]
            }
那接下来其实我们只需要把xray的报告⾥的⼀些字段和nuclei的字段做映射即可，虽然不⼀定是百
分百准确，但⾄少能提供⼀些扫描结果的信息出来进⾏参考也就可以了⽽不需要改动太多的代码。
⽐如我们可以这样：
data["template_url"] -> data["detail"]["extra"]["links"][0]
data["template_id"] -> data["plugin"]
data["vuln_name"] -> data["plugin"]
data["vuln_serverity"] -> "xray"或者"high"
data["vuln_url"] -> data["target"]["url"]
data["curl_command"] -> data["detail"]["snapshot"][0][0][0:150] 
data["target"] -> data["host"]
⽤这个⽅式来对xray的数据进⾏映射到nuclei的结果集⾥，这样就不需要修改原有的逻辑了。
⼤致代码如下
感觉上应该是差不多了，就先这样吧。
0x05 总结 
这⼀篇⽂章⼤概介绍了⼀下我对arl的漏扫引擎的优化点，从优化nuclei扫描参数到增加xray的扫描
引擎到其中，给出了⼤致的事例代码。
上⽂中的代码我还没调试过，不过我觉得吧，⼋九不离⼗错不了：P
晚点把这些优化点整合⼀下看看是不是和预期⼀样