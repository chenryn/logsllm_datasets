When incorrectly passing a keyword to a variable, the error message is
confusing:
    fatal: [flexo.kormoc.com] => Traceback (most recent call last):
      File "/Users/kormoc/Projects/Ansible/ansible/lib/ansible/runner/__init__.py", line 421, in _executor
        exec_rc = self._executor_internal(host, new_stdin)
      File "/Users/kormoc/Projects/Ansible/ansible/lib/ansible/runner/__init__.py", line 512, in _executor_internal
        return self._executor_internal_inner(host, self.module_name, self.module_args, inject, port, complex_args=complex_args)
      File "/Users/kormoc/Projects/Ansible/ansible/lib/ansible/runner/__init__.py", line 706, in _executor_internal_inner
        module_args = template.template(self.basedir, module_args, inject, fail_on_undefined=self.error_on_undefined_vars)
      File "/Users/kormoc/Projects/Ansible/ansible/lib/ansible/utils/template.py", line 319, in template
        varname = template_from_string(basedir, varname, vars, fail_on_undefined)
      File "/Users/kormoc/Projects/Ansible/ansible/lib/ansible/utils/template.py", line 551, in template_from_string
        return res
    UnboundLocalError: local variable 'res' referenced before assignment
This is due to the error checking being:
            try:
                res = jinja2.utils.concat(rf)
            except TypeError, te:
                if 'StrictUndefined' in str(te):
                    raise errors.AnsibleUndefinedVariable("unable to look up a name or access an attribute in template string")
            return res
There should be a else condition to that if statement that at least outputs
str(te) rather then falling though to the return res.