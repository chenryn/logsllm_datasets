    -----END OPENSSH PRIVATE KEY-----
注意这里和网上很多文章说的不太一样了，因为之前ssh-keygen生成的直接是RSA私钥，比如：
    -----BEGIN RSA PRIVATE KEY-----    MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
    wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
    1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
    ...
    -----END RSA PRIVATE KEY-----
前者是PKCS#1定义的DER编码私钥，在下一节中详细介绍。以前openssh默认是支持`PKCS#1`的，不过现在使用了自己的一套格式，大致布局如下：
    "openssh-key-v1"0x00    # NULL-terminated "Auth Magic" string
    32-bit length, "none"   # ciphername length and string
    32-bit length, "none"   # kdfname length and string
    32-bit length, nil      # kdf (0 length, no kdf)
    32-bit 0x01             # number of keys, hard-coded to 1 (no length)
    32-bit length, sshpub   # public key in ssh format
        32-bit length, keytype
        32-bit length, pub0
        32-bit length, pub1
    32-bit length for rnd+prv+comment+pad
        64-bit dummy checksum?  # a random 32-bit int, repeated
        32-bit length, keytype  # the private key (including public)
        32-bit length, pub0     # Public Key parts
        32-bit length, pub1
        32-bit length, prv0     # Private Key parts
        ...                     # (number varies by type)
        32-bit length, comment  # comment string
        padding bytes 0x010203  # pad to blocksize (see notes below)
详细关于OpenSSH新的私钥格式详情可以参考：
  1. [The OpenSSH Private Key Format](https://coolaj86.com/articles/the-openssh-private-key-format/)
  2. 
## AVB
AVB即`Android Verified
Boot`，是安卓中对系统镜像完整性保护的方案。最近在工作中有对其进行了一点研究，不过这里并不是深入介绍AVB，而只看其中涉及到RSA的秘钥。
在我们自行编译安卓源码(AOSP)时，会发现一系列秘钥：
    $ ls  build/target/product/security/
    Android.mk  media.x509.pem     shared.pk8       testkey.x509.pem  verity_key
    README      platform.pk8       shared.x509.pem  verity.pk8
    media.pk8   platform.x509.pem  testkey.pk8      verity.x509.pem
每组秘钥分别负责用来对不同的组件进行签名，我们主要看Verified
Boot相关的秘钥`verity`，安卓中使用该秘钥对boot.img进行签名，并自定义了签名的ASN.1格式：
        AndroidVerifiedBootSignature DEFINITIONS ::=
        BEGIN
            formatVersion ::= INTEGER
            certificate ::= Certificate
            algorithmIdentifier ::= SEQUENCE {
                algorithm OBJECT IDENTIFIER,
                parameters ANY DEFINED BY algorithm OPTIONAL
            }
            authenticatedAttributes ::= SEQUENCE {
                target CHARACTER STRING,
                length INTEGER
            }
            signature ::= OCTET STRING
        END
其中证书`Certificate`类型是在X.509中定义的。
私钥的存储格式有几种常见类型，比如[PKCS#1(RFC3447)](https://tools.ietf.org/html/rfc3447#appendix-A.1
"PKCS#1\(RFC3447\)")和[PKCS#8(RFC5208)](https://tools.ietf.org/html/rfc5208#appendix-A
"PKCS#8\(RFC5208\)")。
例如`PKCS#1`中定义私钥的ASN.1表示如下：
      Version ::= INTEGER { two-prime(0), multi(1) }
          (CONSTRAINED BY
          {-- version must be multi if otherPrimeInfos present --})
      RSAPrivateKey ::= SEQUENCE {
          version           Version,
          modulus           INTEGER,  -- n
          publicExponent    INTEGER,  -- e
          privateExponent   INTEGER,  -- d
          prime1            INTEGER,  -- p
          prime2            INTEGER,  -- q
          exponent1         INTEGER,  -- d mod (p-1)
          exponent2         INTEGER,  -- d mod (q-1)
          coefficient       INTEGER,  -- (inverse of q) mod p
          otherPrimeInfos   OtherPrimeInfos OPTIONAL
      }
一般而言，我们保存的私钥都是der格式，即使用DER对相应的ASN.1定义进行编码。许多高级语言中提供了对应的库函数方便从DER中进行反序列化获取原始数据，比如Python的`from
Crypto.Util.asn1 import DerSequence`。同时也有些在线工具可以方便查看DER的反序列化内容，比如：
  1. 
  2. 
回到上面的verity私钥，我们将其转换为PKCS#1格式：
    openssl pkcs8 -nocrypt -in build/target/product/security/verity.pk8 -inform DER
解析对应的字段并将其与上面的ASN.1对比。
    SEQUENCE (3 elem)
      INTEGER 0
      SEQUENCE (2 elem)
        OBJECT IDENTIFIER 1.2.840.113549.1.1.1 rsaEncryption (PKCS #1)
        NULL
      OCTET STRING (1 elem)
        SEQUENCE (9 elem)
          INTEGER 0
          INTEGER (2048 bit) 294034013011457495254632688690709311939827882765990777183788030470572…
          INTEGER 65537
          INTEGER (2047 bit) 152690229409630177395988743674731983661872870808474054654559379297267…
          INTEGER (1024 bit) 172086361699816285157285992007634379277365906572602995588734914497382…
          INTEGER (1024 bit) 170864216145358483792372871509731496788274625374475577044849125456480…
          INTEGER (1024 bit) 121316723122128141459586606081095008794617691006109580880887598144682…
          INTEGER (1024 bit) 160008079977555979458768333051051332108378146438007378884805916911676…
          INTEGER (1024 bit) 111229147058742660120109027367598084873926761525467238165320120548663…
可以对应RSA秘钥的各个元素：
  * n = 2940340130...
  * e = 65537
  * d = 1526902294...
  * ...
# 后记
本文主要介绍了RSA的基本原理以及常见的安全陷阱，其中大部分的实现隐患出在定义中关于选择的地方，比如对于质数 _p_ 、 _q_ 以及公钥指数 _e_
的选择，在某些情况下选择不当会导致在数学上求解难度骤减；RSA裸加密本身并非语义安全，容易受到CPA攻击。对于现代机器学习而言，通过学习语义从端到端还原明文也不是不可能的事。
除此之外，RSA还存在时序攻击、随机数以及侧信道等潜在威胁没有在文中介绍。即便小心翼翼地按照最佳实践去实现了RSA，也依然有不确定性：大质数分解真的很难吗？这个问题目前并没有确切证伪，只有经验性的结论。有人说`RSA-2048`坚不可摧，对于这点我还是持怀疑态度，不说NSA已经“破解”了RSA，至少对于满足
**某些条件** 的质数，可能存在特别的分解方式，毕竟历史上密码学的后门总是留得猝不及防。
虽然存在不确定性，RSA也已经是当今最为广泛使用的秘钥基础设施根基，所以文章也对常见的实现标准和一些常见秘钥进行了介绍和分析，一方面是对自己学习研究的记录，另一方面也希望能对感兴趣的朋友提供点参考。如果你也对密码学感兴趣，欢迎[加群](https://mp.weixin.qq.com/s/z6mXZtxctud4BCiSG0njxA
"加群")一起交流学习!
# 参考资料
  1. [WikiPedia - RSA cryptosystem](https://en.wikipedia.org/wiki/RSA_\(cryptosystem\) "WikiPedia - RSA cryptosystem")
  2. [A Method for Obtaining Digital Signatures and Public-Key Cryptosystems](http://people.csail.mit.edu/rivest/Rsapaper.pdf "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems")
  3. [Twenty Years of Attacks on the RSA Cryptosystem](http://crypto.stanford.edu/~dabo/abstracts/RSAattack-survey.html "Twenty Years of Attacks on the RSA Cryptosystem")
  4. M. Wiener. Cryptanalysis of short RSA secret exponents. IEEE Transactions on Information Theory, 36:553-558, 1990
  5. [A Layman's Guide to a Subset of ASN.1, BER, and DER](http://crypto.stanford.edu/~dabo/abstracts/RSAattack-survey.html "A Layman's Guide to a Subset of ASN.1, BER, and DER")
* * *