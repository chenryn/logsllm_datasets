How I use a JSON Deserialization 0day to 
Steal Your Money On The Blockchain
Ronny Xing  &  Zekai Wu
• Tencent Security Xuanwu Lab 
• Applied and real world security research 
•
Ronny Xing(      @RonnyX2017)
•
Zekai Wu(      @hellowuzekai)
> Whoami
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron HTTP nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron HTTP nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
• JSON parser with 23’000+ stars on GitHub.
• Widely used java basic component, known for its fast parsing speed
• Two major security fixes about deserialization vulnerability in 2017 and 2018
What is Fastjson
3,600
Maven Artifacts using Fastjson
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron HTTP nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
Deserialize
ParserConfig.getGlobalInstance()
.setAutoTypeSupport(true);
User user = (User)fastjson.JSON.parse("{...}");
System.out.print(user.getName());
String name = "foo";
User u1 = new User();
u1.setName(name);
fastjson.JSON.toJSONString
(u1,SerializerFeature.WriteClassName);
{"@type":"User","name":"foo"}
JavaBean
public class User {
private String name;
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
}
JSON:
AutoType Default False
JSONException: 
autoType is not support
Deserialize
Token Key "@type"
checkAutoType(String typeName, Class expectClass, int features)
ObjectDeserializer getDeserializer(Class clazz, Type type)
select or create  Deserializer for target type
check pass
Object createInstance( args from json )
JSON.parse(" {"@type": "User"} ");
scan
enter deserialization
Defense checkAutotype()
checkAutoType(String typeName, Class expectClass, int features)
How to deserialize arbitrary classes?
Bypass
Class “typeName” is
Assignable From expectClass
{"@type": "User"}
How to specify expectClass
• Explicit inheritance
• Implicit inheritance
Defense checkAutotype()
{"@type":"I.am.ParentClass", "@type": "I.am.SubClass",    "abc":"foo”, …}
expectClass
typeName(Subclass)
Args of Subclass
public class User {
private Foo id;
public void setId(Foo id) {
this.id = id;
}
}
public class FooImpl implements Foo{
public String fooId;
}
{"@type":"User", "id":{"@type":"FooImpl","fooId":"abc"}}
Defense checkAutotype()
ParserConfig#checkAutoType(String typeName, Class expectClass, int features)
1. In the whitelist
2. In the deserializer cache 
(TypeUtils.mappings)
3. Class has @annotation 
fastjson.annotation.JSONType
Config autoTypeSupport is false (default)
expectClass != null, Object, Serializable, Closeable, ...
& class “typeName” is assignable from expectClass
Return 
& Cache
Throw error
1. In the blacklist
2. Inherit from
RowSet，DataSource，
ClassLoader
N
N
Y
Y
Y
N
Y
N
Pass Autotype Check:
• Enable autotype support
• Classes with annotation @JSONType
• Classes in the whitelist (java AWT & spring framework)
• Classes in the deserializer cache (TypeUtils.mappings)
• Specify expected class (expectClass)
Defense checkAutotype()
• Deserializer cache (TypeUtils.mappings) Initialized in 
fastjson.util.TypeUtils#addBaseClassMappings()
For preloading 
the Deserializer of basic types 
Deserializer cache
private static void addBaseClassMappings(){
mappings.put("byte", byte.class);
mappings.put("short", short.class);
mappings.put("int", int.class);
...
mappings.put("[Z", boolean[].class);
Class[] classes = new Class[]{
Object.class,
java.lang.Cloneable.class,
...
}
...
mappings.put(clazz.getName(), clazz);
}
• But the types in cache have their own Deserializer
• Except …
Deserializer cache
java.lang.Exception.class,
java.lang.RuntimeException.class,
java.lang.IllegalAccessError.class,
java.lang.IllegalAccessException.class,
...
java.util.HashMap.class,
java.util.Hashtable.class,
java.util.TreeMap.class,
java.util.IdentityHashMap.class,
...
ThrowableDeserializer
……
NumberDeserializer
DateCodec
FloatCodec
……
MapDeserializer
Derivation – from which class
checkAutoType(String typeName, Class expectClass, int features)
Check pass
ObjectDeserializer getDeserializer(Class clazz, Type type)
Default Deserializer fastjson.parser.deserializer.JavaBeanDeserializer
createJavaBeanDeserializer
createInstance
1.java.lang.AutoCloseable
2.java.util.BitSet
class inherit from them
• Which classes we can inherit:
• java.lang.AutoCloseable
• java.util.BitSet
• All the classes added to the cache during the deserialization
•Java.lang.AutoCloseable:
• Since jdk 1.7
• Super interface of xStream / xChannel / xConnection / ……
Derivation – from which class
Bypass checkAutotype()
checkAutoType(String typeName, Class expectClass, int features)
ObjectDeserializer getDeserializer(Class clazz, Type type)
ObjectDeserializer createJavaBeanDeserializer(clazz, type)
Select by target type
deserializer.MapDeserializer
deserializer.ThrowableDeserializer
deserializer.EnumDeserializer
serializer.DateCodec
serializer.MiscCodec
……
Default type
Check pass
Object createInstance( args from json )
{"@type":”java.lang.AutoCloseable", "@type": ”java.io.Reader"}
1. What is Fastjson
2. Fastjson Deserialize and Vulnerability
3. Find Gadgets to RCE and more
4. RCE on the Tron HTTP nodes
5. Post Penetration Exploit to Steal your Money
6. Conclusion
> Agenda
Find Gadgets
ObjectDeserializer createJavaBeanDeserializer(clazz, type)
Which classes can be derived? 
Which methods can be called? (magic methods)
createJavaBeanDeserializer
1. Select constructor
1. BuilderClass
2. Constructor without parameters (Default Constructor)
3. The Constructor scanned by reflection :
• First
• With maximum number of parameters
• Contains symbol
fastjson.util.JavaBeanInfo#build(Class clazz, Type type, …)
getDefaultConstructor
/  getCreatorConstructor
Random Order
createJavaBeanDeserializer
2. Setter
3. Getter
The automatic call of getter 
during deserialization depends on the return type
public void setXxx(Object arg1){}
public  getXxx(){}
Collection
Map
AtomicLong
AtomicInteger
AtomicBoolean
Classes added to the cache(TypeUtils.mappings) during the deserialization
• Deserializing class itself
• The types of the selected constructor parameters
• The types of the Setter() parameters
• The return types of the Getter()
Derivation – which classes
Expand magic methods space
• JSONObject.toString() à JSON. toJSONString() à JSONSerializer
• Proactively trigger this conversion process:
{"@type": "java.util.Currency","val":{"currency":{...ur payload...}}}
{"@type": "java.util.concurrent.ConcurrentSkipListMap","abc":{...ur payload...}}
Call all getter()
if (clazz == Currency.class) {
String currency = jsonObject.getString("currency");
...
}
fastjson/serializer/MiscCodec.java:278
• Fastjson feature "JSONPath"
• You can use it as an Object Query Language(OQL) to query JSON object
• Token Key " $ref "
Expand magic methods space
{
"userObj": {"@type":"User", "name":"foo"},
"userName": { ”$ref": "$.userObj.name" }
}
public String getName()
Call getter
So, by " $ref ", we can
1. call arbitrary getters
2. cross-reference and access the properties of instances during JSON parsing
Expand magic methods space
• Gadgets Condition :
• Derived from java.lang.AutoCloseable
• Have default constructor or constructor with symbol
• NOT in the blacklist
• Gadgets Demand
• Can cause RCE, arbitrary file read and write, SSRF …
• Dependency classes of gadgets are in native JDK or widely used third-party libraries
Find Gadgets
• Reflection for checking derivation conditions
• Visualization of derivation relations for reversing the chain from sink
• Tool for searching derivation :  
https://gist.github.com/5z1punch/6bb00644ce6bea327f42cf72bc620b80
• Search gadgets classes in the JDK and the specified set of jars
• Crawling common third party libraries from maven
Find Gadgets Automatically
Search Autotype Chain
Gadgets
Inherit from
java.lang.AutoCloseable
1. Mysql connector RCE
2. Apache commons io read and write files
3. Jetty SSRF
4. Apache xbean-reflect RCE 
5. …… 
Gadgets
• Mysql connector 5.1.x
• Mysql connector 6.0.2 or 6.0.3
• Mysql connector 6.x or  Agenda
• TRON
• Public Blockchian
• Crypto-Currency, known as TRX, native to the system
• Market value: around US$5 billion.
• Currency holders: 14.6 million.
• 1,400 dApps on the TRON network, with a daily transaction volume of over 
$12 million(2020/12/17).
• JAVA-TRON
• Public blockchain protocol launched by TRON.
• HTTP services for interacting with the blockchain
• Open source java application with 2.7k stars on github.
• https://github.com/tronprotocol/java-tron
• Using fastjson
JAVA-TRON
Gadgets on JAVA-TRON
Mysql Connector RCE
Gadgets
Commons IO read and write file
Problems for exploit:
1. What to Write
2. Where to Write
3. How to Read
4. Without preconditions
No C/S database connector
Spring boot fat jar
Run with none root