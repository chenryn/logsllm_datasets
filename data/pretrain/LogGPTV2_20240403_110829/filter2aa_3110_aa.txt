# Leveraging a Fastjson Deserialization 0day to Steal Funds on the Blockchain

**Authors:**
- Ronny Xing (@RonnyX2017)
- Zekai Wu (@hellowuzekai)

**Affiliation:**
- Tencent Security Xuanwu Lab
- Applied and Real-World Security Research

## Agenda
1. Introduction to Fastjson
2. Fastjson Deserialization and Vulnerabilities
3. Identifying Gadgets for RCE and Beyond
4. Exploiting Tron HTTP Nodes for RCE
5. Post-Exploitation Techniques to Steal Funds
6. Conclusion

## 1. Introduction to Fastjson
- **Overview:**
  - Fastjson is a popular JSON parser with over 23,000 stars on GitHub.
  - It is widely used in Java applications due to its fast parsing speed.
  - Two major security patches addressing deserialization vulnerabilities were released in 2017 and 2018.

- **Usage:**
  ```java
  ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
  User user = (User)fastjson.JSON.parse("{...}");
  System.out.print(user.getName());
  ```

- **JavaBean Example:**
  ```java
  public class User {
      private String name;
      public String getName() { return name; }
      public void setName(String name) { this.name = name; }
  }
  ```

- **JSON Representation:**
  ```json
  {"@type":"User","name":"foo"}
  ```

- **Security Features:**
  - `autoType` support is disabled by default.
  - `checkAutoType` function ensures type safety during deserialization.

## 2. Fastjson Deserialization and Vulnerabilities
- **Deserialization Process:**
  - The `checkAutoType` function validates the `typeName` against `expectClass`.
  - If `autoTypeSupport` is enabled, certain classes can bypass the check.

- **Bypassing `checkAutoType`:**
  - Classes that are assignable from `expectClass`.
  - Classes with `@JSONType` annotation.
  - Classes in the whitelist or deserializer cache.

- **Deserializer Cache:**
  - Initialized in `fastjson.util.TypeUtils#addBaseClassMappings()`.
  - Contains basic types and their deserializers.

- **Derivation and Inheritance:**
  - Classes like `java.lang.AutoCloseable` and `java.util.BitSet` can be derived.
  - These classes provide methods that can be exploited.

## 3. Identifying Gadgets for RCE and Beyond
- **Gadget Conditions:**
  - Derived from `java.lang.AutoCloseable`.
  - Have a default constructor or a constructor with a specific symbol.
  - Not in the blacklist.

- **Gadget Demands:**
  - Capable of causing RCE, arbitrary file read/write, SSRF, etc.
  - Dependency classes should be part of the native JDK or widely used third-party libraries.

- **Automatic Gadget Search:**
  - Use reflection to check derivation conditions.
  - Visualize derivation relations to reverse the chain from the sink.
  - Tool for searching gadgets: [GitHub Gist](https://gist.github.com/5z1punch/6bb00644ce6bea327f42cf72bc620b80).

- **Example Gadgets:**
  - MySQL Connector RCE.
  - Apache Commons IO for file read/write.
  - Jetty SSRF.
  - Apache xbean-reflect RCE.

## 4. Exploiting Tron HTTP Nodes for RCE
- **Tron Overview:**
  - Public blockchain protocol known as TRON.
  - Native cryptocurrency, TRX, with a market value of around US$5 billion.
  - Over 14.6 million currency holders.
  - 1,400 dApps with a daily transaction volume of over $12 million (as of December 17, 2020).

- **JAVA-TRON:**
  - Open-source Java application with 2.7k stars on GitHub.
  - Uses Fastjson for JSON parsing.
  - Provides HTTP services for interacting with the blockchain.

- **Vulnerable Gadgets on JAVA-TRON:**
  - MySQL Connector RCE.
  - Apache Commons IO for file read/write.

## 5. Post-Exploitation Techniques to Steal Funds
- **Challenges:**
  - Determining what to write.
  - Choosing where to write.
  - Reading the written data.
  - Ensuring no preconditions are required.

- **Exploitation Steps:**
  - Write malicious code to a file.
  - Execute the code to gain control.
  - Read and exfiltrate sensitive information.
  - Bypass restrictions by running without root privileges.

## 6. Conclusion
- **Summary:**
  - Fastjson deserialization vulnerabilities can be exploited to achieve RCE.
  - By identifying and using gadgets, attackers can perform various malicious actions.
  - The Tron blockchain, specifically JAVA-TRON, is vulnerable to such attacks.
  - Post-exploitation techniques can lead to the theft of funds.

- **Recommendations:**
  - Keep Fastjson and other dependencies up-to-date.
  - Disable `autoTypeSupport` unless absolutely necessary.
  - Implement additional security measures to protect against deserialization attacks.