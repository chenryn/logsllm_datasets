a short ﬁle encrypted with a 3,072 bit ElGamal public
key. GnuPG uses Wiener’s table to determine the key
length to use. For a 3,072 bit ElGamal, Wiener’s table
returns a value of 269. GnuPG adds a 50% safety
margin, resulting in a key length of 403 bits.
The technique we use is fairly independent of the
speciﬁcs of the hardware platform. We apply it to our
two experimental platforms of Table I, but it will work
on all processors that have inclusive caches and large-
page mappings. It will also work on other implementa-
tions of the square-and-multiply algorithm, and in fact
on any algorithm whose execution path depends on
secret information.
B. Implementing the attack
The core idea of the attack is to monitor the use
of the squaring operation. While processing a “1” bit,
the squaring is followed by a modulo reduction, which
is followed by a multiply and another reduction. In
contrast, for a “0” bit, after the squaring there is only
one reduction, which will
then be followed by the
squaring for the next bit. Hence, by observing the
time between subsequent squarings, we can recover the
exponent.
We trace cache-set activity looking for this access
pattern. To trace a cache set, we divide time into ﬁxed
slots of 5,000 cycles each, which is short enough to get
multiple probes within each squaring operation. Within
each time slot, we prime the cache set, wait to the end
of the time slot and then probe the cache set.
Figure 6 shows the traces of several cache sets. Each
line shows a trace of a single cache set over 1,000 time
slots. Shaded areas indicate time slots in which activity
was detected in the traced cache set.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
As the ﬁgure demonstrates, some cache sets are
accessed almost continuously, others are almost never
accessed, whereas others are accessed sporadically. The
highlighted cache set at line 43 is the only one exhibit-
ing the activity pattern we expect for the squaring code,
with a typical pulse of activity spanning 4–5 time slots.
The pauses between pulses are either around six time
slots, for “0” bits, or 16–17 time slots for “1” bits.
In addition, there are some variations in the pattern,
including pulses of a single time slot and pauses of
over 20 time slots.
We can easily read the bit pattern of the exponent
from line 43 in Figure 6: Reading from the left, we
see two pulses followed by short intervals, indicating
two “0” bits. The next pulse is followed by a longer
interval, indicating a “1” bit. The resulting bit pattern
is 001001111111101...
To identify the cache set we correlate the trace of
the cache set with a pattern that contains a single pulse:
the pattern has 6 slots of no activity, followed by 5
with activity and another 6 without activity. We count
the number of positions in the trace that have a good
match with the pattern and mark traces that have a large
number of matches as potential candidates for being
the squaring cache set. We pass candidates to the user
for the decision on whether the trace is, indeed, of the
squaring cache set.
C. Optimization
Rather than searching all cache sets, we can leverage
some information on the GnuPG binary to reduce the
search space. In many installations, the GnuPG binary
is part of a standard distribution and is, therefore, not
assumed to be secret. An attacker that has access to
the binary can analyze it to ﬁnd the page offset of the
squaring code. As there is some overlap between the
(4 KiB) page offset and the cache set index (Figure 2),
the attacker only needs to search cache sets whose set
index matches the page offset of the victim code. This
reduces the search space by a factor of 64.
D. Results
16%
14%
12%
10%
8%
6%
4%
2%
0%
Desktop
Server
 0
 10
 20
 30
 40
 50
 60
 70
Number of errors
Fig. 7: Distribution of capture errors
With this optimization, we require on average about
120 executions of the victim to locate the cache set of
the squaring code on the desktop platform. As the LLC
on the server platform is twice as big, we need about
240 executions there. Once found, we collect the access
information and use a shell script to parse the results.
Figure 7 shows the distribution of the number of
capture errors on the desktop and the server platforms.
Out of 817 exponentiations captured on the desktop
platform, we drop 46, where the observed exponent
is signiﬁcantly longer or signiﬁcantly shorter than the
expected 403 bits. For the server platform we collect
959 and drop 297. Figure 7 shows the distribution of
the number of capture errors over the remaining 771
(desktop) and 662 (server) captured exponentiations.
VII. ATTACKING THE SLIDING-WINDOW
EXPONENTIATION
In the previous section we showed how to recover
secret-dependent execution paths. We now show that our
attack can also be used to observe secret-dependent data
access patterns. As an example we use an implementa-
tion of the sliding-window exponentiation algorithm [7].
A. Sliding-window exponentiation
Given an exponent e, the sliding-window represen-
tation of the exponent is a sequence of windows wi,
each of length L(wi) bits. A window wi can be either
a zero window with a string of “0”s, or a non-zero
window that starts with a “1” and ends with a “1”.
For a sliding window representation with a window
size S,
the length of the non-zero window satisﬁes
1 ≤ L(wi) ≤ S, hence the value of a non-zero window
is an odd number between 1 and 2S − 1. Algorithm 4
computes an exponentiation given the sliding-window
representation of the exponent.
Algorithm 4: Sliding-window exponentiation
input : window size S, base b, modulo m,
N-bit exponent e represented as n windows wi of
length L(wi)
output: be mod m
//Precomputation
g[0] ← b mod m
s ← MULT(g[0],g[0]) mod m
for j from 1 to 2S−1 do
end
//Exponentiation
r ← 1
for i from n downto 1 do
g[ j] ← MULT(g[ j− 1],s) mod m
for j from 1 to L(wi) do
r ← MULT(r,r) mod m
end
if wi (cid:8)= 0 then r ← MULT(r,g[(wi − 1)/2]) mod m;
end
return r
614
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
r
e
i
l
p
i
t
l
u
M
g[7]
g[6]
g[5]
g[4]
g[3]
g[2]
g[1]
g[0]
All
 0
 50
 100
 150
Sequence of multiplications in one exponentiation
 200
Fig. 8: The usage patterns of the multipliers g[i] = b2i+1 in an exponentiation. The vertical line separates the
pre-computation and the body of the exponentiation. The x-axis shows the ﬁrst 240 of 492 multiplications in the
exponentiation.
The algorithm scans the exponent from the most
signiﬁcant to the least signiﬁcant bit, executing a square
for each bit. Whenever it reaches the least signiﬁcant bit
of a non-zero window, a multiplication is performed.
The multiplier used is bv mod m, where v is the value
of the non-zero window. For better performance, the
algorithm pre-computes multipliers bv mod m for each
odd value of v (1 ≤ v ≤ 2S − 1) and stores them in a
table g[i], which can be unambiguously indexed with
i = (v− 1)/2. For example, when S = 4, we compute 8
multipliers, b1,b3,b5, ...,b15 mod m, which can be found
in g[0],g[1],g[2], ...,g[7], respectively.
To thwart recovery of the square-and-multiply se-
quence with the FLUSH+RELOAD attack [45], GnuPG
uses the multiply routine to calculate squares. Unless
explicitly mentioned otherwise, we use multiplication to
refer to the execution of the multiply routines, including
both the square and the true multiply. Thus, the GnuPG
implementation of the sliding-window algorithm per-
forms a sequence of multiplication operations.
However, this still leaks information, since the true
multiply (last statement in Algorithm 4) looks up the
pre-computed multiplier table using the value of the
non-zero window. An attacker can determine the po-
sition and value (and hence the length) of the non-zero
window by knowing when and which pre-computed
multiplier is used, which is sufﬁcient to completely
recover the exponent [31].
As in Section VI, we tailor the attack to a speciﬁc
implementation of the algorithm. In this case, we use the
latest version (1.4.18) of GnuPG. The victim repeatedly
decrypts a short ﬁle encrypted with a 3,072 bit ElGamal
public key.
B. Multiplier usage pattern
The core idea of our attack is to monitor the use
of each pre-computed multiplier in the multiplication
operations. We deﬁne multiplier usage pattern Ui for a
multiplier g[i] as a bit vector indicating whether g[i] is
used as an operand in each multiplication operation of
a single exponentiation.
As a concrete example, Figure 8 displays the mul-
tiplier usage patterns (each horizontal line represents
a usage pattern for one multiplier) for the ﬁrst 240
multiplications out of the 492 multiplications executed
during a single decryption with a 3,072 bit ElGamal key.
This has a 403-bit exponent, for which GnuPG uses
window size S = 4, resulting in 2S−1 = 8 multipliers.
The exponentiation requires 8 multiplications in the pre-
computation phase, 403 for squaring (one for each bit),
as well as 81 for the true multiply operation, for a total
of 492. For a 3,072-bit ElGamal key, the size of the
multiplier is also 3,072 bits, which may occupy 6–7
cache lines.
The usage pattern of the multipliers in the 8 multi-
plications of the pre-computation phase is very regular:
The ﬁrst squares b (g[0]) to calculate s, while the next
7 multiply g[i − 2] with s to calculate the next odd
multiplier g[i− 1]. Thus g[0] is used as an operand in
the ﬁrst two multiplications, and g[i] (1 ≤ i ≤ 6) is used
in the (i + 2)nd multiplication. g[7] is special, since it is
not used as an operand in the pre-computation phase,
but there is a write access to g[7] at the end of the pre-
computation phase, which will be captured in the ﬁrst
time slot of the ﬁrst multiplication in the exponentiation
body. We also include this write access to g[7] in the
usage pattern since it is useful to identify g[7].
The multiplier usage patterns in the exponentiation
phase are irregular. However, we can calculate some
statistical data on the expected use. For a window size
of S, the expected distance between non-zero windows
is S + 1 [27]. Thus, on average, we expect N/(S + 1)
non-zero windows in the exponent. With 2S−1 different
values of non-zero windows, we expect each multiplier
to be used 21−S · N/(S + 1) times during the exponen-
tiation. Hence, for window size S = 4, we expect each
multiplier to be accessed 21−4 · 403/(4 + 1) ≈ 10 times
615
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:03 UTC from IEEE Xplore.  Restrictions apply. 
during the exponentiation.
By combining the usage patterns for all the multi-
pliers, recovering the key is straightforward: the mul-
tiplications that do not use any of the multipliers are
identiﬁed as square operations, the remaining multipli-
cations are true multiply operations and the multipliers
can also be identiﬁed.
C. Identify multiplier cache set
A key step of our attack is identifying which cache
set corresponds to which multiplier. Similar to the attack
in Section VI, we need to scan every cache set for
a long sequence of time slots, e.g. spanning several
executions of ElGamal decryption. However, there are
three signiﬁcant differences compared with the attack
in Section VI:
1) Since we want to get the use of a multiplier during
the multiplication operations, a naive trace of cache-set
activity will not tell when a multiplication operation
starts and ends. Therefore, our measurements of the
cache-set activities must be aligned with the sequence
of multiplication operations.
2) The locations of the multipliers are not only
unknown, but also differ for every execution of the
exponentiation. This is because the multipliers are
stored in heap memory that is dynamically allocated for
every execution of the exponentiation. Hence, multiplier
location information obtained during one exponentiation
cannot be used for locating the multiplier in subsequent
exponentiations. Furthermore, for every execution of
the exponentiation, a monitored cache set may contain
a multiplier, or may not contain any multipliers; the
probability depends on the size of a multiplier and the
total number of cache sets. This is in contrast with the
attack in Section VI where the location of the cache
set containing the squaring code is ﬁxed for different
executions of the exponentiation.
3) The access to the multiplier is sparse and irreg-
ular, as can be seen in Figure 8. In Section VI, we
showed that the access to those cache sets containing
the squaring code shows regular temporal patterns that
can be easily recognized. However, since we do not
know when, during an exponentiation, each multiplier
is used, we have very little information on the temporal
access pattern of a multiplier.
In a nutshell, our strategy is as follows:
1) To trace the cache-set activities in the multiplica-
tion operations, we simultaneously monitor two cache
sets: one is the scanned cache set that may potentially
contain a multiplier, and the other is the cache set
containing the multiplication code. In this way,
the
sequence of multiplications serves as the “clock” for
all the measurements.
2) Although we do not know the expected temporal
access pattern for a multiplier, we do know that cache
sets corresponding to the same multiplier must show
similar cache-set activities even in the presence of noise,
since they must all follow the usage pattern of that
multiplier. Therefore, we can cluster the scanned cache
sets into groups, each group showing similar cache-set
activities during the multiplication operations.
3) Since the multiplier usage pattern at the pre-
computation phase is regular and distinct, we can lever-
age this knowledge to identify which group corresponds
to which multiplier. The statistical information on the
use of the multiplier during the exponentiation phase
can also be leveraged to clean out some noise for the
clustering.
Putting it all together, our attack follows this outline:
1)
2)
3)
4)
5)
the
Find the cache sets that contains the multipli-
cation code.
Collect cache-set activity traces for all
cache sets (Section VII-D).
Filter out traces that do not match the expected
statistical properties of multiplier access (Sec-
tion VII-E).
Cluster the traces to amplify the signal (Sec-
tion VII-F).
Analyze the clusters to recover the multiplier
usage patterns and calculate the exponent (Sec-
tion VII-G).
With the exception of the last step, the attack is