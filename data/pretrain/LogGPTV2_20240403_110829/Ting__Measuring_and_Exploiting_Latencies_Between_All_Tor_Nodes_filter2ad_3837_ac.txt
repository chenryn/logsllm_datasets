are typically negligible, but (2) that they must be at least
partially accounted for in order to minimize the error intro-
duced in the event that they are non-negligible.
In order to measure the forwarding delay for a given node
x, we apply the following approach, which resembles our
method of measuring latency:
1. Set up an echo client s and echo server d on one host,
and two instances of Tor, w and z, on a second host.
2. Create a circuit C1 = (w, z) from s and probe d to
measure end-to-end RTT RC1 (s, d) = R(s, w) + Fw +
R(w, z) + Fz + R(z, d).
3. Use ping or tcptraceroute from s to w to obtain
(cid:101)R(s, w) and (cid:101)R(z, d), the estimated RTTs between the
hosts, which should be equivalent as w and z are run-
ning on the same host.
4. Subtract these latencies to calculate the forwarding de-
lay of w and z, Fw = Fz =
we leverage the fact that (cid:101)R(w, z) ≈ 0).
2
(s,d)−(cid:101)R(s,w)−(cid:101)R(z,d)
RC1
(here
Figure 6: Number of samples required to reach diﬀerent
approximations of the minimum of 1000 samples.
5. Create a circuit C2 = (w, x, z) from s and probe d to
measure the end-to-end RTT RC2 (s, d) = R(s, w) +
Fw + R(w, x) + Fx + R(x, z) + Fz + R(z, d).
6. Use ping or tcptraceroute from s to w and from w to
x to obtain (cid:101)R(s, w) = (cid:101)R(z, d) and (cid:101)R(w, x) = (cid:101)R(x, z),
Fz − 2(cid:101)R(w, x) − 2(cid:101)R(s, w)
7. Subtract the values from (4) and (6): Fx = RC2 −Fw−
estimates of the respective RTTs.
We use both ping (which uses ICMP) and tcptraceroute
(which uses TCP) to investigate whether it is necessary or
suﬃcient to measure RTTs using the same transport layer
protocol as Tor’s.
We applied this technique to compute the forwarding de-
lay for our set of 31 Tor relays running on PlanetLab once an
hour over a 48-hour period. Figure 5 shows the distributions
of our measurements over time, with individual nodes sorted
by median ping-measured forwarding delay. The box-plots
capture the median, interquartile ranges, and minimum and
maximum values within the interquartiles. Nearly 65% of all
nodes exhibit a distribution tightly closed around the range
of 0–2ms with very little variance. These nodes match our
expectations of a low minimum forwarding delay: if a packet
arrives at a Tor relay very shortly before when it would be
scheduled to be dequeued, then the forwarding delay should
consist only of the time to process the packet, which mostly
consists of symmetric key cryptography, and is thus fast.
However, the remaining 35% of nodes show extremely odd
behavior, with forwarding delays often negative. These ab-
normalities are due to our observation from Section 3 that
not all packets are treated equal: negative forwarding delays
indicate that it took less time to communicate with a node
over Tor than to directly ping that node, sometimes on the
order of tens of milliseconds. This is simply not possible un-
less packets follow diﬀerent paths. Using both ICMP- and
TCP-based measurements makes this even more stark; we
see for these outliers consistent disparity between how ICMP
and TCP packets are treated. We therefore place very lit-
tle conﬁdence in forwarding delays measured from networks
that exhibit such disparate behavior; of all remaining net-
works, we see only near-zero estimates of forwarding delay.
-60-40-20 0 20 40 60 80 100 0 5 10 15 20 25 30Forwarding Delay (ms)Host (Sorted in Increasing Order By ICMP Median)ICMPTCP 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 100 200 300 400 500 600 700 800 900 1000Cumulative FractionCumulative Number of TingsMeasured MinWithin 1msWithin 1%Within 5%Within 10%294Figure 7: Comparison of taking 200 samples for each pair
vs. 1000 samples for each pair.
Figure 8: Relationship between geographic distance and
RTTs measured by Ting, using GPS coordinates from
Neustar IP Geolocation [17].
We draw two important conclusions from this experiment.
First, for networks that do not appear to diﬀerentiate how
they treat packets of diﬀerent protocols, Ting observes for-
warding delays to be relatively negligible, at ∼2ms. This
explains why our theoretical estimate in Eq. (4) is able to
perform so well in practice. Second, this experiment con-
cretely demonstrates the importance of avoiding using ping
or even TCP-based RTT estimation techniques in combina-
tion with Tor-based measurements. Collectively, these re-
sults validate Ting’s approach and accuracy.
4.4 Sample Sizes
The Ting algorithm takes as a parameter the number of
times to sample each circuit, which allows one to adjust the
balance between speed of measurement and accuracy. Since
we only end up using the minimum value of all RTTs mea-
sured for each circuit, the question is: how many samples
does it take to reach a true minimum, or at least how many
does it take to reach within an acceptable interval of this
minimum?
Jansen et al. [13] observed that it can sometimes take
an incredible number of latency samples through Tor be-
fore obtaining a true minimum. We recreated this experi-
ment by using Ting to measure 100 random pairs of live Tor
nodes, taking 1000 samples from each circuit. In Figure 6,
we present how many iterations were necessary across all
pairs to obtain the minimum estimate, and approximations
thereof. This conﬁrms the prior result of Jansen et al.:
it
does indeed take a considerable number of iterations to reach
the actual minimum. However, we also present the number
of iterations necessary to get close to the minimum. Even
modest departures from minimum can be found far more
quickly; for instance, to get within 1ms of the minimum
requires roughly 25× fewer probes at the median.
To further solidify this fact, we re-measured the latency
between the 930 pairs of Planet Lab nodes from our experi-
ment in 4.2, this time taking 200 samples rather than 1000.
In Figure 7, we plot the CDF of the ratio between mea-
sured and real values (again using ping as a ground-truth
for RTTs) and compare this to the CDF of taking the min-
imum of 1000 samples. The fact that the CDFs are almost
identical reinforces our claim that there is very little beneﬁt
to taking a large number of samples.
Because the number of samples is a tunable parameter,
one can turn it down even further to measure more quickly.
For instance, in our experiments, Ting took an average of
2.5 minutes to measure a pair using 200 samples in order to
ensure very high accuracy. However, if one were willing to
accept 5% error, then Ting could measure a pair in less than
15 seconds on average. For the remainder of the experiments
in this paper, we continue using 200 samples.
4.5 Ting on the Live Tor Network
We now investigate Ting’s eﬀectiveness in measuring pairs
in the wild, outside of our controlled environment, and with-
out the limitations imposed by PlanetLab. We used Ting to
measure 10,000 pairs of Tor relays, chosen uniformly at ran-
dom from the pool of all currently running relays. Since we
cannot directly compare the accuracy of speciﬁc measure-
ments in this scenario, we now look at general trends.
Figure 8 shows the relationship between the Ting-measured
RTTs and the geographic distance for each of the 10,000
pairs of Tor nodes. We used the Neustar IP Geolocation
service [17] to obtain an estimate of the GPS coordinates
for each of the relays, and calculated the great circle dis-
tance between each pair. Additionally, in the margins, we
plot CDFs of the two axes to show the relative distribution
of latencies and distances covered. We annotate the plot
with three lines. One line represents the generally accepted
maximum speed that packets can traverse a given distance
in the Internet: 2/3 the speed of light. This serves as a
sanity check; indeed, we see only a handful of points be-
low this line. Manually inspecting these nodes, we see that
they are almost all likely errors in the underlying geolocation
database.
The other two lines represent ﬁts to more accurate la-
tency datasets. At the top is the estimate derived from a
large study of latencies among Halo gamers as part of the
Htrae system [1], and below that is our linear ﬁt to our own
data. The gap between these two lines is due to the fact
that Htrae measured median latencies, while we seek to de-
tect the minimum latency between a pair of nodes. Their
 0 0.2 0.4 0.6 0.8 1 0 0.5 1 1.5 2 2.5 3 3.5CDFEstimated / Real200 Samples1000 Samples 0 100 200 300 400 50005k10k15k20kLatency (ms)Great Circle Distance (km)HtraeTing(2/3)c 0 1CDF 0 1CDF295Figure 9: Measuring the latency between a pair of relays
using Ting produces relatively consistent results over time.
Figure 10: Larger relative variance is revealed as small ab-
solute errors when the mean is low.
similar values are encouraging validation. However, one in-
teresting feature of our linear ﬁt is that it has a greater slope.
We believe this is due to the surge of latencies between 5000
and 10,000 km: these are likely international links that are
traversing at least one country’s border. Note, for instance,
that the CDF at the top of the plot does not have the same
shape as the one on the right; if the relationship was strictly
linear, they should have the same shape. We speculate that
this is evidence that, at least for international circuits, Tor
traﬃc is being treated diﬀerently than more traditional traf-
ﬁc, such as gaming. More investigation into these diﬀerences
is an interesting area of future work.
4.6 Stability of Ting Measurements over Time
In the following section, we demonstrate the impact that
an all-pairs RTT matrix can have on various applications.
However, an all-pairs matrix can be time-consuming to cal-
culate. Here, we measure whether Ting captures snapshots
that are representative over time—that is, how stable are
Ting’s measurements?
In order to evaluate the stability of Ting measurements
over time, we picked a set of 30 pairs of Tor relays and mea-
sured the RTT between them once an hour over the course
of a week. The pairs were chosen such that: (1) Both re-
lays were running for over a month, in order to mitigate the
chance that they would go down over the course of the exper-
iment, (2) The distribution of the RTTs of the pairs would
match the distribution shown in Figure 8, which displays a
relatively uniform distribution from low to high latencies, in
order to observe the eﬀects of RTT on variance.
In Figure 9 we plot the CDF of the coeﬃcient of variance
cv (the standard deviation normalized to the mean) which
can be used to compare the degree of variation between a
series of data sets with diﬀerent means. 96.7% of all pairs
(all but one pair) have cv < 0.5, indicating high stability;
further, over 50% of pairs have cv ≈ 0.
Although the cv measures variance well in a majority
of cases, it is very sensitive to changes when the mean is
low. Figure 10 provides another view of the data, displaying
Ting’s distribution of measurements for each pair. Again,
these boxes show the median, interquartiles, and the max-
imum and minimum within the interquartile ranges. The
outlier in Figure 9 corresponds to the ﬁrst pair in Figure 10,
indicating that the high cv was in fact biased towards having
a low mean (∼3ms). 67% of the pairs do not show a sin-
gle outlier, and have third and ﬁrst quartiles that diﬀer by
less than 5ms. Even in the remaining cases where the laten-
cies span a wider range, such as pair 15, it is worth noting
that the outliers are still relatively close to the mean, and
do not represent a very large error. This suggests that tak-
ing measurements with Ting infrequently and caching them
is suﬃcient, and thus permits obtaining a large dataset of
RTTs between Tor nodes.
Summary
This section has shown that Ting is incredibly accurate be-
cause it can measure nodes directly rather than through a
nearby proxy, as with prior approaches [11]. Moreover, we
demonstrated that Ting’s measurements are resilient over
time, and do not require many samples to obtain reasonable
accuracy. Ting can thus be used to generate all-pairs RTT
measurements of the Tor network. In the next section, we
show how we can leverage such an all-pairs matrix to beneﬁt
various applications.
5. APPLICATIONS
In this section, we discuss three disparate applications
that beneﬁt from the highly accurate RTT measurements
Ting provides. We provide what we believe to be the ﬁrst
deanonymization technique that precludes certain circuits
through application of latency measurements. We also show
how Ting can be used to ﬁnd longer circuits that results in
lower end-to-end latency. Finally, we show Ting’s value as a
network measurement platform by evaluating the diversity
of Tor relays.
5.1 Deanonymization of Tor
Tor seeks to balance anonymity with low-latency com-
munication, and as a result, various techniques have been
introduced to deanonymize users by introducing small but
noticeable ﬂuctuations in their latencies [16, 9, 12, 10].
A common form of deanonymization assumes that the at-
tacker is somewhere on the path, from source to destination:
either the attacker is on the three-node Tor circuit (consist-
 0 0.2 0.4 0.6 0.8 1 0 0.5 1 1.5 2CDFCoefficient of Variation of Latency 0 50 100 150 200 250 300 350 400 0 5 10 15 20 25 30Latency (ms)Pairs (Sorted in Increasing Order of Median Latency)296ing of an entry node, a middle node, and an exit node), or
it is the destination itself (e.g., in the case of a malicious
server). The attacker’s goal is to determine all of the nodes
on the circuit, as this has been shown to assist in determin-
ing the source and destination [12].
Active probing attacks have been shown to make dea-
nonymization with an on-path attacker possible. The at-
tacker can determine if Tor relay t is on the victim source-
destination path by (1) creating many circuits through t and
sending traﬃc through them, and (2) seeing if this induces
extra delay on the victim’s packet inter-arrival times. This is
a somewhat heavy-handed approach to deanonymization—it
is expensive for an attacker to launch, as it requires creating
multiple circuits simply to rule out a single Tor relay. For
such attacks to be feasible in practice, it is important that
the number of active probes performed remain small.
5.1.1 Speeding up deanonymization with Ting
Here, we consider how knowledge of RTTs between all
pairs of Tor nodes can speed up existing deanonymization
algorithms. The speciﬁc setting we consider is when the
attacker is the destination: he already knows the exit node,
and wishes to determine the entry and middle nodes. Our
insight is, broadly speaking, that because the attacker knows
the end-to-end RTT Re2e, then we can rule out any circuit
whose hops’ RTTs add up to greater than Re2e.
Initially, the attacker knows:
More concretely, consider the standard, RTT-unaware de-
anonymization process.
its
RTT r to the exit node, the exit node x itself, and the
end-to-end RTT Re2e. Suppose during the deanonymization
algorithm, the attacker learns that Tor node c is on the cir-
cuit. Let R(a, b) denote the RTT between Tor nodes a and b.
Then the attacker learns the following by “ignoring too-large
RTTs”: