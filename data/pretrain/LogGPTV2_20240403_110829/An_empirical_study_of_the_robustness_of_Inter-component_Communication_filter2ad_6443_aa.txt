# Title: An Empirical Study of the Robustness of Inter-component Communication in Android

## Authors
Amiya K. Maji, Fahad A. Arshad, Saurabh Bagchi  
Purdue University, West Lafayette, IN, USA  
{amaji, faarshad, sbagchi}@purdue.edu

Jan S. Rellermeyer  
IBM Research, Austin, TX, USA  
jan.rellermeyer@ibm.com

## Abstract
Over the past three years, Android has become the leading operating system for smartphones, featuring a robust Linux-based kernel, a modular framework, and a security-conscious design that isolates each application in its own virtual machine. However, these advantages can be undermined if an application sends erroneous messages to other applications, causing them to behave incorrectly. This paper presents an empirical evaluation of the robustness of Inter-component Communication (ICC) in Android using fuzz testing. Our results show that exception handling is rare in Android applications and that it is possible to crash the Android runtime from unprivileged user processes. Based on our findings, we highlight critical design issues in Android ICC and suggest solutions to mitigate these problems.

**Keywords:** Android, fuzz testing, security, smartphone, robustness, exception handling

## 1. Introduction
In recent years, several high-profile incidents related to smartphones have raised concerns about their robustness and security. For instance, a security researcher exposed a contentious logging program in a network intelligence app, which garnered over 1.5 million views on YouTube [1]. Another incident involved an iPhone exploding on an Australian flight, causing temporary panic [2]. The authors of this paper also experienced unusual behavior with their smartphones, such as bypassing screen locks and frequent system freezes. These experiences raise the question: How robust are today's smartphones?

This paper specifically evaluates the robustness of built-in and popular Android applications to malformed Inter-component Communication (ICC) messages. We chose Android for our study due to its leading market share and open-source codebase. Since its release, Android has become the dominant smartphone OS, with over 60 million phones sold in the third quarter of 2011 alone [4]. Given its large user base, Android must be highly robust and secure, as even minor defects can overshadow its many desirable features.

Android's modular approach allows mutually untrusting applications to share functionality, with each application running in an isolated virtual machine. However, in a collaborative environment, applications need to communicate, which introduces new vulnerabilities. Communication channels, such as Intents, can be exploited by adversaries to send malformed data, potentially leading to crashes or security breaches. Our objective is to evaluate how well Android handles unexpected data, particularly in the context of IPC primitives. We define robustness as the ability to handle unexpected data gracefully; lack of robustness would result in application crashes due to uncaught exceptions.

Inter-component Communication in Android occurs through two primary mechanisms: Binders and Intents. Binders allow an application to create a proxy for a remote object, while Intents are data containers passed between components. Intents, due to their dynamic nature, are more flexible and easier to generate, making them a potential tool for adversaries. To test Android's robustness, we used fuzz testing, a technique that feeds random input to an application to identify vulnerabilities. Fuzz testing has been successfully used to evaluate the robustness of various operating systems [6], [7], [8], [9].

Our study has three main objectives: to test the robustness of Intent handling, to discover vulnerabilities through random or crafted Intents, and to recommend ways to harden Android IPC. To achieve these goals, we developed JarJarBinks, a robustness testing tool for Android. JarJarBinks includes four Intent generation modules—semi-valid, blank, random, and random with extras—and can automatically send a large number of Intents to all components. During our experiments, we sent over 6 million Intents to 800+ application components across three versions of Android (2.2, 2.3.4, and 4.0) and discovered a significant number of input validation errors. Less than 10% of the tested components crashed, primarily due to unhandled NullPointerExceptions. Although Android's exception handling has improved since version 2.2, the latest version (4.0) still exhibits environment-dependent failures that are unpredictable and challenging to test.

One of our most striking findings is the ability to run privileged processes from user-level applications without requiring special permissions. We found three instances where we could crash the Android runtime from JarJarBinks, rendering the device unusable until a reboot. This has significant implications for privilege escalation, denial-of-service attacks, and potential security vulnerabilities. To improve reliability, we suggest using subtyping combined with Java annotations to restrict the format and content of Intents, thereby reducing the attack surface of Android.

The rest of the paper is organized as follows. Section 2 provides an overview of Android and key terminology. Section 3 details the design of JarJarBinks and our Intent generation methodology. Section 4 presents the results of our experiments and guidelines for secure Android application development. Section 5 offers recommendations for securing Intents and discusses future work.

## 2. Android Overview

### 2.1. Android Architecture
Android is an open-source platform for mobile system development, built on a standard Linux operating system. It includes a customized runtime, a comprehensive application framework, and a set of user applications. The runtime consists of core libraries and Dalvik, a register-based virtual machine optimized for constrained memory and CPU environments. The application framework provides developers with APIs for building user applications, commonly referred to as "apps."

### 2.2. Android Application Components
Android applications are composed of four main components: Activities, Services, Content Providers, and Broadcast Receivers. These components communicate through Intents, which are routed through the Android runtime and kernel.

- **Activities:** Graphical components that provide a user interface. They are invoked when a user launches an application and can send and receive Intents.
- **Services:** Run in the background to perform long-running tasks, such as playing music. Components can bind to a Service to send requests.
- **Content Providers:** Manage access to persistent data, which can be shared between multiple activities in different applications.
- **Broadcast Receivers:** Handle and react to event notifications, such as receiving an SMS message.

### 2.3. Android IPC
Inter-process communication (IPC) in Android is facilitated by a kernel space component called Binder, which uses Linux shared memory. At the application-runtime boundary, components send Intent messages, such as an Activity sending Intents to the Activity Manager.

### 2.4. Intents
Intents are data containers that encapsulate actions, data, components, categories, and extra fields. They can be explicitly sent to a target component or resolved by the runtime to find a suitable target. Intents can be sent in various ways, including launching an Activity, sending broadcasts, communicating with a Service, or accessing data through a Content Provider.

## 3. Design of JarJarBinks

### 3.1. Overview
JarJarBinks is a robustness testing tool for Android that includes four Intent generation modules: semi-valid, blank, random, and random with extras. It can automatically send a large number of Intents to all components and runs as a user-level process, requiring no knowledge of the source code of the tested components.

### 3.2. Intent Generation Methodology
We designed JarJarBinks to generate and send Intents to various Android components. The tool can be easily configured to test any Android device. Our methodology involves generating random and semi-valid Intents and observing the system's response.

## 4. Experimental Results and Guidelines

### 4.1. Experimental Setup
We conducted experiments on three versions of Android (2.2, 2.3.4, and 4.0) by sending over 6 million Intents to 800+ application components. We observed the system's behavior and recorded any crashes or exceptions.

### 4.2. Findings
- **Crashes and Exceptions:** Less than 10% of the tested components crashed, primarily due to unhandled NullPointerExceptions.
- **Environment-Dependent Failures:** The latest version of Android (4.0) exhibited more environment-dependent failures, which were unpredictable and challenging to test.
- **Privilege Escalation:** We found three instances where we could crash the Android runtime from a user-level application, highlighting the potential for privilege escalation and denial-of-service attacks.

### 4.3. Recommendations
To improve the robustness and security of Android applications, we recommend:
- **Enhanced Exception Handling:** Developers should implement robust exception handling to prevent crashes.
- **Subtyping and Annotations:** Use subtyping and Java annotations to restrict the format and content of Intents, reducing the attack surface.
- **Security Best Practices:** Follow security best practices, such as validating input and using secure coding techniques.

## 5. Recommendations for Securing Intents and Future Work

### 5.1. Securing Intents
To secure Intents, we recommend:
- **Input Validation:** Ensure that all input is validated before processing.
- **Access Control:** Implement strict access control to prevent unauthorized components from sending Intents.
- **Intent Filters:** Use Intent filters to specify which components can handle specific Intents.

### 5.2. Future Work
Future work could include:
- **Automated Testing Tools:** Develop more advanced automated testing tools to identify and mitigate vulnerabilities.
- **Security Enhancements:** Continuously enhance the security features of Android to protect against emerging threats.
- **Collaborative Research:** Engage in collaborative research to share best practices and improve the overall security of mobile platforms.

By addressing these issues, we can enhance the robustness and security of Android, ensuring a better and more reliable user experience.