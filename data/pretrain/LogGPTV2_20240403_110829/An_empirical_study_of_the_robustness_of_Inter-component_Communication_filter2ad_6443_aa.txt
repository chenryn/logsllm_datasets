title:An empirical study of the robustness of Inter-component Communication
in Android
author:Amiya Kumar Maji and
Fahad A. Arshad and
Saurabh Bagchi and
Jan S. Rellermeyer
An Empirical Study of the Robustness of Inter-component Communication in
Android
Amiya K. Maji, Fahad A. Arshad, Saurabh Bagchi
Purdue University
West Lafayette, IN, USA
{amaji, faarshad, sbagchi}@purdue.edu
Abstract—Over the last three years, Android has established
itself as the largest-selling operating system for smartphones. It
boasts of a Linux-based robust kernel, a modular framework
with multiple components in each application, and a security-
conscious design where each application is isolated in its own
virtual machine. However, all of these desirable properties
would be rendered ineffectual if an application were to deliver
erroneous messages to targeted applications and thus cause the
target to behave incorrectly. In this paper, we present an empir-
ical evaluation of the robustness of Inter-component Commu-
nication (ICC) in Android through fuzz testing methodology,
whereby, parameters of the inter-component communication
are changed to various incorrect values. We show that not only
exception handling is a rarity in Android applications, but also
it is possible to crash the Android runtime from unprivileged
user processes. Based on our observations, we highlight some of
the critical design issues in Android ICC and suggest solutions
to alleviate these problems.
Keywords-android, fuzz, security, smartphone, robustness,
exception
I. INTRODUCTION
As of December 7, 2011, a lot of incidents related to
smartphones have appeared as headlines in the media over
the past two weeks. A Youtube video posted by a security
researcher received more than 1.5 million views after he
exposed a contentious logging program in a “reputed” net-
work intelligence program [1] for smartphones. An iPhone
exploded on board an Aussie ﬂight causing temporary panic
among the passengers and the crew [2]. In another part of
the world, the authors of this paper had their fair share of
extraordinary experiences as well. One of the authors of
this paper found his newly purchased smartphone magically
bypass the screen lock after pressing the power key twice in
succession [3]. The list does not end here as the authors had
to pull out the batteries from their experimental phones time
and again to un-“freeze” them! How robust are smartphones
of today? This is the question we answer in this paper.
Speciﬁcally, we evaluate how robust are Android’s built-in
and best-seller applications to malformed Inter-component
Communication messages.1
We selected Android as the mobile platform for our
study for obvious reasons: it has the leading market share
in smartphones and its codebase is open. In three years
since its release, Android has become the leading smart-
phone OS in the world with a staggering sales ﬁgure of
1In this paper, we use the term Inter-component Communication to cover
both intra and inter-application messages.
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
Jan S. Rellermeyer
IBM Research
Austin, TX, USA
PI:EMAIL
60 million phones in the third quarter of 2011 alone [4].
A software with such large customer base needs to be
very robust and secure, otherwise even minute defects may
overshadow its myriad desirable features. Android has also
received signiﬁcant attention from research and developer
communities. Its modular approach to application devel-
opment allows mutually untrusting applications to share
their functionality. To protect these applications from one-
another, Android assigns different user IDs (UID) to each
application and runs them in isolated virtual machines.
However, in a collaborative environment, applications need
to share data which is supported by Android with a ﬂexible
communication mechanism. Communication, traditionally,
introduces new vulnerabilities and exposes applications to
a variety of stressful conditions, a classic example being
noisy data from sensor equipment. Unexpected input also
has the potential to break the security measures employed by
a system and expose sensitive data. In case of smartphones,
sources of inputs can be signiﬁcantly diverse—these include
touchscreen, keyboard, radio, microphone, sensors, untrusted
third-party applications, or data from one of many network
drivers—and therefore it has great potential for receiving
unexpected data. Given the unorthodox techniques people
employ to bypass password locks on their smartphones [5],
receipt of unexpected data is not a rarity. Our objective in
this paper is to see how well Android reacts to unexpected
data, and more speciﬁcally to test its Inter Process Com-
munication primitives. We deﬁne robustness as the ability
to handle unexpected data gracefully,
lack of
robustness would imply an application crashing in response
to an IPC message. In the context of Android applications,
these crashes manifest as uncaught exceptions in the stack
trace.
therefore,
Inter Process Communication in Android takes place in
one of two ways—Binders, where an application creates
a proxy for a remote object (having known interface) and
can invoke remote methods, and Intents, a data container
which is passed from one application component to another
through mediation of the Android Runtime. Of these, Intents
allow dynamic target selection and runtime binding, i.e.,
the sender of an Intent does not need to know anything
about the receiver. Due to its dynamic nature, Intents have a
ﬂexible structure. It is easy to generate Intents, and therefore,
can become a simple tool for an adversary who wants to
compromise a system. For all these reasons, we generated
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
random and semi-valid Intents and tested how Android
reacts to these. Traditionally, researchers have used fuzz
testing for testing the robustness of software systems. In
fuzz testing, random input is fed to an application, e.g.,
sending random parameter values to the system calls. Fuzz
testing has been used with considerable success to evaluate
the robustness of various operating systems [6], [7], [8], [9].
More intelligent test case generation for robustness testing
can be seen in [10]. However, such evaluation of mobile
OSes is rare in the research literature.
Our objectives in this study are threefold—to test how
robust Intent handling is, to discover vulnerabilities through
random (or crafted) Intents, and to suggest recommendations
for hardening of Android IPC.
With these goals, we developed our Android robustness
testing tool, JarJarBinks (in remembrance of the Gungan
warrior of Star Wars fame, whose unusual accent created
signiﬁcant problems for the Droid). JarJarBinks includes
four Intent generation modules—semi-valid, blank, random,
and random with extras, and the ability to automatically
send a large number of Intents to all
the components.
JarJarBinks runs as a user level process, it does not require
knowledge of source codes of the tested components, and
can be easily conﬁgured for the robustness testing on any
Android device. During our experiments we sent more than
6 million Intents to 800+ application components across 3
versions of Android (2.2, 2.3.4, and 4.0) and discovered
a signiﬁcant number of input validation errors. In gen-
eral less than 10% of the components tested crashed; all
crashes are caused by unhandled exceptions. Our results
suggest that Android has a sizable number of components
with unhandled NullPointerExceptions across all
versions. Though Android’s exception handling capability
has improved signiﬁcantly since v2.2, its latest version (4.0)
displays a larger number of environment-dependent failures.
These failures do not happen predictably in time and are
therefore insidious from the point of view of testing.
The most striking ﬁnding that we have is the ability to
run privileged processes from user level applications without
requiring the user-level application to be granted any special
permission at install time. We found three instances, where
we could crash the Android runtime from JarJarBinks. Such
a crash makes the Android device unusable till it is rebooted.
This has huge potential for privilege escalation, denial-of-
service, and may even lead to more security vulnerabilities,
if an adversary could ﬁgure out how to have these malformed
(or “fuzzed”) Intents be sent out in response to some external
message. To improve software design from the point of view
of reliability, we found that subtyping combined with Java
annotations can be used very effectively to restrict the format
and content of an Intent. Through this mechanism, the attack
surface of Android can be reduced signiﬁcantly.
The rest of our paper is organized as follows. We begin
with an overview of Android and explain key terminology
in Section II. Section III presents the design of JarJarBinks
and explains our Intent generation methodology. The next
Section presents results obtained from our experiments and
suggests some guidelines for secure Android application de-
velopment. Section V presents ICC design recommendations
for securing Intents followed by discussion of Future Work.
II. ANDROID OVERVIEW
A. Android Architecture
Android is an open source platform for mobile system
development with a standard Linux operating system, a
customized runtime, a comprehensive application framework
and a set of user applications. Based on Linux kernel, it
provides a robust driver model, security features, process
management, memory management, networking assistance
and drivers for a large set of devices. The runtime comprises
of core libraries and Dalvik [11], a register based [12]
virtual machine optimized to run under constrained memory
and CPU requirements. Application framework provides
developers APIs for building user applications (popularly
called apps).
B. Android Application Components
Here we ﬁrst explain the different kinds of application
components in Android and then explain how the differ-
ent components coordinate among themselves to achieve a
task. This background would be essential to understand the
experimental methodology that we have developed because
we choose the inter-component messages (called Intents in
Android) as the target of our fuzz testing. To understand how
Android application components co-ordinate to achieve a
task, consider two sample applications (Email and Contacts)
shown in Figure 1, that co-operate in replying to an email.
Consider, a user launching an email application from home
screen. This starts an Activity (user interface (UI)) showing
the user’s Inbox. She then clicks on an email she wants
to read which starts another UI showing a particular Email
message. To reply, she clicks Reply button to invoke a third
activity where she can type her response. Consider, she
wants to copy her reply to more recipients, so she hits
the “cc” button to ﬁnd the address of the recipient. This
invokes a fourth activity, i.e., Select Contact in Contacts
application showing the available email addresses. This
fourth activity to user appears as a part of email application
but in reality it is from a separate application (Contacts)
which runs in a separate process. Further, the main activity
in Contacts application, i.e., Select Contact calls a Content
Provider, another application component for data storage, to
retrieve the recipient’s email address. The sequence of called
activities, Inbox, Email, Reply, Select Contact to achieve a
given task involves inter-component communication which
can be either inter-application or intra-application.
Each user application in Android (a *.apk ﬁle) typi-
cally runs in a separate process and can be composed
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Android Application Components
of Activities, Services, Content Providers and Broadcast
Receivers. These four components communicate through
messages called Intents that are routed through Android
runtime and the Kernel. The underlying runtime manages the
Inter-component Communication. At application installation
time, the contract with the runtime is speciﬁed in Android-
Manifest.xml. This contract details on type of components,
application permissions, etc. Here we brieﬂy deﬁne each of
the component types.
Activities: An Activity is a graphical component, which is
used to provide the client with a user interface. It is invoked
when a user launches an application. An activity can send
and receive Intents to and from runtime. It is implemented
by extending the Activity class while its life cycle is managed
by a module in application framework layer called Activity
Manager.
Services: A Service is used when an application task
needs to run in background for a longer time period. For
example, a user can run music player in background. Also,
a component can bind to a Service to send a request, e.g.,
a music player Activity can bind to a music player Service
to stop the current song that is being played.
Content Providers: A Content Provider is used to man-
age access to persistent data. The data can be shared between
multiple Activities in different applications. Contacts appli-
cation, as an example, can use the content provider to get a
person’s phone number.
Broadcast Receivers: A component that is solely respon-
sible to receive and react to event notiﬁcations is called a
Broadcast Receiver. For example, in SMS application, the
Broadcast Receiver component receives an SMS message
and displays an alert.
C. Android IPC
The inter-process communication (IPC) in Android oc-
curs through a kernel space component called Binder
(/dev/binder), a device driver using Linux shared mem-
ory to achieve IPC. The higher level user space components
know how to use the binder, i.e., how to pass data rep-
resented by Intents to Binder. Speciﬁcally, when a given
component, e.g. Activity Manager, wants to do IPC (either
an IPC send or an IPC receive) at OS boundary, it opens the
driver supplied by the Binder kernel module. This associates
a ﬁle descriptor with the thread that called binder, and this
association is used by the kernel module to identify the
caller and callee of Binder IPCs. All IPC at OS boundary
takes place through this descriptor. At
the higher level,
application-runtime boundary, the application components
send Intent messages, e.g., an Activity sends Intents to
Activity Manager.
D. Intents
Intent, a data container,
is an abstraction for an
action to be performed and forms the core of Android’s
IPC mechanism. An Intent encapsulates action, data,
component, category and extra ﬁelds in its object. As
an example, an action can be dial, with data as phone
number and component as phone application’s main activity.
Category and extra ﬁelds give extra information on action
and data respectively. An Intent message can be speciﬁcally
(Explicit Intent) sent to a target component by naming
it or it could be resolved by runtime to ﬁnd a target
component. When the target is not explicitly speciﬁed in
Intent message (Implicit Intent),
the Android runtime
resolves the target component to be invoked by looking
up the Intent message and matching it against components
that can handle the Intent. A given target component can
handle an Intent, if it is advertised in a tag called Intent-
ﬁlter in AndroidManifest.xml. Different ways in which
Intents are sent by application components are: (1). By
launching an Activity using startActivity(Intent)
type
to Broadcast
Receivers
type
of methods; (3). By communicating with a service using
bindService(Intent, ServiceConnection,
int) type of methods; (4). By accessing data through
Content Providers.
sendBroadcast(Intent)
of methods;
(2). By
using