115 endfunc
116 map  :call CompileOnly()
117 func! CompileOnly()
118 exec "w"
119 if &filetype == 'c'
120 exec "AsyncRun gcc % -o % :call RunAsync()
128 func! RunAsync()
129 exec "w"
130 if &filetype == 'c'
131 exec "AsyncRun gcc % -o % 
140 nnoremap  
141 nnoremap  
142 nnoremap  
效果如图1.25所示。
图1.25 Vim配置效果图
开发工具总结：PyCharm 适合新手使用，无须太多配置就可以实现贴心的自动补全、智
能提示，打开即用，同时有跨平台的IDE。如果有一定的Vim基础（之前一直是用Vim来编
写代码），就可以尝试将Vim打造为Python IDE。Vim的优势在于其小巧，系统资源占用少，
启动速度快，完全可以量身定制，编写代码可以脱离低效的鼠标单击。
23
Python自动化运维快速入门
1.5
Python 基础语法
1.5.1 数字运算
编程是将问题数据化的一个过程，数据离不开数字，Python 的数字运算规则与我们学习
的四则运算规则是一样的，即使不使用 Python 来编写复杂的程序，也可以将其当作一个强大
的计算器。打开Python，试运行以下命令：
>>> 2 + 2
4
>>> 50 - 5*6
20
>>> (50 - 5*6) / 4
5.0
>>> 8 / 5 # 总是返回一个浮点数
1.6
在不同的机器上浮点运算的结果可能会不一样。
在整数除法中，除法（/）总是返回一个浮点数，如果只想得到整数的结果，就可以使用
运算符 // 。整数除法返回浮点型，整数和浮点数混合运算的结果也是浮点型。
>>> 19 / 3 # 整数除法返回浮点型
6.333333333333333
>>>
>>> 19 // 3 # 整数除法返回向下取整后的结果
6
>>> 17 % 3 # ％操作符返回除法的余数
1
>>> 5 * 3 + 2.0
17.0
Python 可以使用**操作来进行幂运算。
>>> 5 ** 2 # 5 的平方
25
>>> 2 ** 7 # 2的7次方
128
在交互模式中，最后被输出的表达式结果被赋值给变量 _ ，这样能使后续计算更方便。
例如：
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
24
第1章 自动化运维与Python
113.0625
>>> round(_, 2)
113.06
Python 数字类型转换：
(cid:2) int(x) 将x转换为一个整数。
(cid:2) float(x) 将x转换为一个浮点数。
(cid:2) complex(x) 将x转换为一个复数，实数部分为 x，虚数部分为 0。
(cid:2) complex(x, y) 将 x 和 y 转换为一个复数，实数部分为 x，虚数部分为 y。x 和 y 是
数字表达式。
常用的数学函数可参见表1-2。
表1-2 常用的数学函数
函数 返回值 ( 描述 )
abs(x) 返回数字的绝对值，如abs(-10) 返回 10
ceil(x) 返回数字的上舍入整数，如math.ceil(4.1) 返回 5
exp(x) 返回e的x次幂(ex)，如math.exp(1) 返回2.718281828459045
fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0
floor(x) 返回数字的下舍入整数，如math.floor(4.9)返回 4
log(x) 如math.log(math.e)返回1.0，math.log(100,10)返回2.0
log10(x) 返回以10为基数的x的对数，如math.log10(100)返回 2.0
max(x1, x2,...) 返回给定参数的最大值，参数可以为序列
min(x1, x2,...) 返回给定参数的最小值，参数可以为序列
modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分
以浮点型表示
pow(x, y) x**y 运算后的值
round(x [,n]) 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位
数
sqrt(x) 返回数字x的平方根
1.5.2 字符串
1. 认识简单字符串
Python 中的字符串有几种表达方式，可以使用单引号、双引号或三引号（三个单引号或
三个双引号）括起来。例如：
>>> 'abc'
'abc'
>>> "abc"
'abc'
>>> '''a\
... b\
... c''' #使用 反斜线（\）来续行
25
Python自动化运维快速入门
'abc'
>>> '''abc'''
'abc'
如果想要字符串含有单引号、双引号该怎么处理呢？有两种方法：一是使用反斜杠转义引
号；二是使用与字符串中单引号、双引号不同的引号来定义字符串。例如：
>>> a='a\'b\'c' #定义字符串a，使用反斜杠转义单引号
>>> print(a) #打印字符串a
a'b'c
>>> b="a'b'c" #定义字符串b，使用双引号括起含有单引号的字符串
>>> print(b) #打印字符串b
a'b'c
使用\n换行或使用三引号。例如：
>>> s = 'First line.\nSecond line.' # \n 意味着新行
>>> print(s)
First line.
Second line.
>>> s='''First line.
... Second line''' #字符串可以被 """ （三个双引号）或者 ''' （三个单引号）括起来，
使用三引号时，换行符不需要转义，它们会包含在字符串中
>>> print(s)
First line.
Second line
如果需要避免转义，则可以使用原始字符串，即在字符串的前面加上r。例如：
>>> s = r"This is a rather long string containing\n\
... several lines of text much as you would do in C."
>>> print(s)
This is a rather long string containing\n\
several lines of text much as you would do in C.
字符串可以使用 + 运算符连接在一起，或者使用 * 运算符重复字符串。例如：
>>> word = 'Help' + ' '+ 'ME'
>>> print(word)
Help ME
>>> word="word "*5
>>> print(word)
word word word word word
2. 字符串的索引
字符串可以被索引，就像C语言中的数组一样，字符串的第一个字符的索引为0，一个字
符就是长度为一的字符串。与 Icon 编程语言类似，子字符串可以使用分切符来指定：用冒号
分隔的两个索引，第一个索引默认为 0，第二个索引默认为最后一个位置，s[:]表示整个字符
串，s[2:3]表示从第3个字符开始，到第4个字符结束，不含第4个字符。不同于C字符串的
是，Python字符串不能被改变。向一个索引位置赋值会导致错误，例如：
26
第1章 自动化运维与Python
>>> s="abcdefg"
>>> s[0]
'a'
>>> s[1]
'b'
>>> s[:] #表示整个字符串
'abcdefg'
>>> s[2:3]
'c'
>>> s[2:]
'cdefg'
>>> s[-1]
'g'
>>> s[-2:]
'fg'
>>> s[0]='f' #向一个索引位置赋值会导致错误，说明字符串是只读的
Traceback (most recent call last):
File "", line 1, in 
TypeError: 'str' object does not support item assignment
3. 字符串的遍历
遍历字符串有三种方式：一是使用enumerate函数，其返回字符串的索引及相应的字符；
二是直接使用for 循环；三是通过字符索引来遍历。例如：
>>> for i,a in enumerate(s):
... print(i,a)
...
0 a
1 b
2 c
3 d
4 e
5 f
6 g
>>> for a in s:
... print(a)
...
a
b
c
d
e
f
g
>>> for i in range(len(s)):
... print(i,s[i])
...
0 a
1 b
2 c
27
Python自动化运维快速入门
3 d
4 e
5 f
6 g
有一个方法可以帮我们记住分切索引的工作方式，想象索引是指向字符之间，第一个字符
左边的数字是 0，接着有n个字符的字符串最后一个字符的右边是索引n。例如：
字符串 a b c d e f g
索引1 0 1 2 3 4 5 6
索引2 -7 -6 -5 -4 -3 -2 -1
如s[1:3]代表bc，s[-2:-1]代表f。
4. 字符串的格式化
Python 支持格式化字符串的输出。尽管这样可能会用到非常复杂的表达式，但最基本的
用法是将一个值插入到一个有字符串格式符 %s 的字符串中。
>>> print ("我叫 %s 今年 %d 岁!" % ('小明', 10))#使用%
我叫 小明 今年 10 岁!
>>> print ("我叫 {} 今年 {} 岁!" .format('小明', 10))#使用字符串的format方法
我叫 小明 今年 10 岁!
>>> print ("我叫 {0} 今年 {1} 岁!" .format('小明', 10,20))#使用索引，整数20未用到
我叫 小明 今年 10 岁!
需要在字符中使用特殊字符时，Python用反斜杠(\)转义字符，如表1-3所示。
表1-3 转义字符
转义字符 描述
%c 格式化字符及其ASCII码
%s 格式化字符串
%d 格式化整数
%u 格式化无符号整型
%o 格式化无符号八进制数
%x 格式化无符号十六进制数
%X 格式化无符号十六进制数（大写）
%f 格式化浮点数字，可指定小数点后的精度
%e 用科学计数法格式化浮点数
%E 作用同%e，用科学计数法格式化浮点数
%g %f和%e的简写
%G %f 和 %E 的简写
%p 用十六进制数格式化变量的地址
5. 字符串的内建函数
Python字符串的内建函数可参见表1-4。
28
第1章 自动化运维与Python
表1-4 字符串的内建函数
函数 功能
capitalize() 将字符串的第一个字符转换为大写
center(width, fillchar) 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的
字符，默认为空格
count(str, beg= 0,end=len(string)) 返回str在string里面出现的次数，如果beg或end指定，则
返回指定范围内str出现的次数
bytes.decode(encoding="utf-8",errors="strict") Python 3中没有decode方法，但我们可以使用bytes对象的
decode()方法来解码给定的bytes对象，这个bytes对象可以由
str.encode()来编码返回
encode(encoding='UTF-8',errors='strict') 以encoding指定的编码格式编码字符串，如果出错就默认报
一个ValueError的异常，除非errors指定的是'ignore'或'replace'