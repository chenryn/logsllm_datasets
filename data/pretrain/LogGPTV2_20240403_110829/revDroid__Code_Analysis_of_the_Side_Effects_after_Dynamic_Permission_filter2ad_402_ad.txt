the exception handler can be divided into three categories.
Firstly, most of the regular applications which catch the ex-
ception do not make anything meaningful in the exception
handler, or even provide an empty exception handler. Sec-
ondly, there are applications which simply log the error or
show a simple dialog informing the user that there occurs
a failed permission check. Lastly, a small portion of appli-
cations will return fake data in the exception handler. For
example, we discover that when trying retrieving the unique
identiﬁer string of the device, some families of malwares will
return string “invalid” in the exception handler instead. In
this way, these malwares can avoid crash caused by unhan-
dled SecurityException, as well as NullPointerException,
so their core malicious logic can keep running.
5. DISCUSSIONS
5.1 Limitations of Analysis Completeness and
Success Rates
Native code: The completeness of the revDroid analysis
result will be reduced if applications use native code. Us-
ing native code in Android applications will make it diﬃcult
to reverse-engineer the application. Our analysis tool de-
pends on the Soot and FlowDroid frameworks which do not
handle native modules. Because native code may contain
mis-usages as well, the situation can be even more severe.
Limitations of Soot and FlowDroid : There are sev-
eral other limitations in the Soot and FlowDroid frameworks
which will lead to completeness issue and decrease the suc-
cess rate of analysis. For example, Soot leverages SPARK
algorithm to generate the call graph. To build a call graph
edge, the algorithm must know the type of the base object
on which the method is invoked. If the base object is null
or comes out of a factory method inside the Android SDK,
there will not be an edge from the base object. A typical ex-
ample of this case in Android is the findViewById method of
the android.app.Activity class. As a result, method call
invoked on objects returned by the findViewById method
will not be analyzed, which will lead to completeness issue.
On the other hand, some applications in our dataset some-
how contain byte-code which is not valid according to the
speciﬁcation of the Dalvik byte-code. For example, some
APK ﬁles contain classes implementing interfaces which are
not actually interfaces, and some other APK ﬁles contain
inner classes located inside of an outer class, but the outer
class itself is missing. Soot and FlowDroid will fail to an-
alyze or instrument these applications completely or even
crash. We will assist the maintainers of Soot and FlowDroid
with handling these strange cases in the future.
5.2 Limitations of Our Measure on Side Ef-
fects
Although the code analysis of the side eﬀects after permis-
sion revocation can cover more cases of users’ mis-usages of
permission-relevant APIs, the mis-behavior of applications
caused by the exception handler, is not measured in our
analysis tool. When we look into the content of exception
handlers, many developers simply catch the SecurityEx-
ception or general Exception but do nothing else. This
could explain why sometimes an application hangs rather
than crashes after the permission is revoked. Moreover, we
do not diﬀerentiate exception handlers for SecurityExcep-
tion and the general Exception. As a result, the real situa-
tion where the developers consider the permission revocation
during their developers should be more severe.
5.3 Accuracy of Third-party Library Match-
ing
As we described in Section 4.2.4, we use package name
preﬁx matching to identify third-party libraries. Since ap-
plication developers can specify package names for their code
arbitrarily, which means application developers can even as-
sign package names of other third-party libraries to his or
her own applications, this third-party library matching ap-
proach may not be very accurate.
In the future, we can
leverage application similarity detection techniques such as
AnDarwin [17] to mitigate this issue.
6. RELATED WORK
The issue of over-claim of permissions is one of the most
popular security issues of Android [20]. Thus, many re-
searchers [31, 11, 28] contributed a number of studies to
analyze and mitigate this issue.
Barrera et al. analyzed the permissions requested by 1,100
free Android applications to investigate how the Android
permission mechanism was used in practice and to deter-
mine its strengths and weaknesses [9]. Felt et al. performed
a case study on Android platform by reviewing the top
free and top paid applications from 18 Google Play cate-
gories [22]. For each of the reviewed applications, Felt et
al. compared its functionalities with the permissions which
it requested by manually exercising the user interface. The
result showed that four out of 36 applications were over-
privileged, and unnecessary INTERNET permission accounted
for three of the over-privileged applications. Moreover, Felt
et al. built Stowaway, an automatic tool to detect over-claim
of permissions in Android applications [21]. Felt et al. ap-
plied automated testing techniques to Android 2.2 to deter-
mine the permissions required to invoke each API method
and leveraged Stowaway to analyze a set of 940 applica-
tions. About one-third of these applications were identiﬁed
to have unnecessary permissions. Wei et al. also applied
Stowaway to a set of 237 evolving third-party applications
covering 1,703 versions and found that the overall tendency
was towards over-claim of permission [36].
756To mitigate the issue of permission over-claim, Nauman
et al. proposed Apex, which allowed users to grant or revoke
a subset of permissions requested by the application using a
simple and easy-to-use interface provided by an augmented
application installer [31]. Similarly, Zhou et al. and Mueller
et al. also developed TISSA [39] and Flex-P [30] respectively
to provide ﬁner-grained permission administration tools for
Android.
However, in the meantime some of these countermeasures
led to the side eﬀect of applications crashing when one or
more permissions was revoked. Kennedy et al. quantita-
tively measured the eﬀects of removing permissions from
Android applications by developing Pyandrazzi, a system for
automated testing and measurement of the fatal exception
behaviors [29]. Our work diﬀers from theirs in that we detect
application crash caused by permission revocation before the
application is installed. Thus both users and developers can
be notiﬁed whether the application will crash with certain
permission revoked.
Static analysis for Android application usually involves
reverse-engineering APK ﬁles and doing analysis without
actually running the applications. This method has been
widely adopted by researchers. Batyuk et al. designed a
static analysis service which allowed users to gain deep in-
sight into applications’ internals including a list of included
third-party advertising and analytics libraries, potential pri-
vacy leaks and native executable usage [10]. Wei et al. ana-
lyzed APK ﬁles statically to identify permissions that appli-
cations requested and identify intents, i.e., indirect resource
access via deputy applications [37]. Wang et al. decompiled
Android applications to analyze their program logic related
to the mobile channels and showed that the lack of origin-
based protection opened the door to a wide spectrum of
cross-origin attacks [35]. These works share similar method-
ologies with ours but our goals are diﬀerent.
7. CONCLUSION AND FUTURE WORK
In this paper, we build an automatic tool, revDroid, to
analyze the potential side eﬀects of permission revocation
on both popular applications from Google Play Store and
malwares. The results show that only 30% of regular ap-
plications from Google Play Store handle all potential side
eﬀects and only 54% of occurrences of potential side eﬀects
are handled. In addition, 73% of malwares handle all poten-
tial side eﬀects and 64% of occurrences of potential side ef-
fects are handled. Thirdly, third-party libraries occupy only
4% of all the mis-usages in the regular application dataset
and have a higher correct usage rate than applications’ orig-
inal developer. According to these results, we can conclude
that: i) when the Android 6.0 introduces the new permission
mechanism which supports dynamic permission revocation,
the ecosystem of Android applications is unprepared to han-
dle this new technique; ii) malwares have higher chances to
survive in dynamic permission revocation; iii) although the
third-party libraries deal with the permission revocation bet-
ter than regular applications, they could still be improved
by their developers, including Google itself.
In our further work, we will enlarge our experiments, and
implement our solution as a web service which can detect the
mis-usages of permission revocation in APK ﬁles. In addi-
tion, we will analyze the reason of application crash when
the platform of Android adopt some optimization methods,
e.g., fake data, to mitigate the side eﬀects. Last but not
least, we will optimize and extend revDroid to support to
automatically patch Android applications (APK ﬁles) with-
out the support of developers.
Acknowledgment
This paper is supported by NSFC (Grant No. 61572136).
The authors would like to thank anonymous reviewers for
their comments.
8. REFERENCES
[1] Android. Android lint checks.
http://tools.android.com/tips/lint-checks. Accessed:
2015-11-25.
[2] Android. Camera api guides. http://developer.
android.com/guide/topics/media/camera.html.
Accessed: 2015-11-24.
[3] Android. logcat. https:
//developer.android.com/tools/help/logcat.html.
Accessed: 2015-05-04.
[4] Android. Permissions. http://developer.android.com/
preview/features/runtime-permissions.html. Accessed:
2015-08-11.
[5] Android. System permissions. http://developer.
android.com/guide/topics/security/permissions.html.
Accessed: 2014-12-08.
[6] apktool. Android-apktool - a tool for reverse
engineering android apk ﬁles.
https://code.google.com/p/android-apktool/.
Accessed: 2015-02-04.
[7] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel.
Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive
and lifecycle-aware taint analysis for android apps. In
ACM SIGPLAN Notices, volume 49, pages 259–269.
ACM, 2014.
[8] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie.
Pscout: analyzing the android permission
speciﬁcation. In Proceedings of the 2012 ACM
conference on Computer and communications security,
pages 217–228. ACM, 2012.
[9] D. Barrera, H. G. Kayacik, P. C. van Oorschot, and
A. Somayaji. A methodology for empirical analysis of
permission-based security models and its application
to android. In Proceedings of the 17th ACM conference
on Computer and communications security, pages
73–84. ACM, 2010.
[10] L. Batyuk, M. Herpich, S. A. Camtepe, K. Raddatz,
A.-D. Schmidt, and S. Albayrak. Using static analysis
for automatic assessment and mitigation of unwanted
and malicious activities within android applications.
In Malicious and Unwanted Software (MALWARE),
2011 6th International Conference on, pages 66–72.
IEEE, 2011.
[11] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan.
Mockdroid: trading privacy for application
functionality on smartphones. In Proceedings of the
12th Workshop on Mobile Computing Systems and
Applications, pages 49–54. ACM, 2011.
[12] E. Bodden. Easily instrumenting android applications
for security purposes. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications
security, pages 1499–1502. ACM, 2013.
757[13] T. Book, A. Pridgen, and D. S. Wallach. Longitudinal
[28] P. Hornyack, S. Han, J. Jung, S. Schechter, and
analysis of android ad library permissions. arXiv
preprint arXiv:1303.0857, 2013.
[14] CNET. Android 4.3 hidden feature lets you tap into
app permissions. http://www.cnet.com/news/android-
4-3-hidden-feature-lets-you-tap-into-app-permissions/,
2013. Accessed: 2015-02-04.
[15] K. D. Cooper, T. J. Harvey, and K. Kennedy. A
simple, fast dominance algorithm. Software Practice &
Experience, 4:1–10, 2001.
[16] J. Crussell, C. Gibler, and H. Chen. Attack of the
clones: Detecting cloned applications on android
markets. In Computer Security–ESORICS 2012, pages
37–54. Springer, 2012.
[17] J. Crussell, C. Gibler, and H. Chen. Andarwin:
Scalable detection of semantically similar android
applications. In Computer Security–ESORICS 2013,
pages 182–199. Springer, 2013.
[18] M. Damshenas, A. Dehghantanha, K.-K. R. Choo, and
R. Mahmud. M0droid: An android behavioral-based
malware detection model. Journal of Information
Privacy and Security, 11(3):141–157, 2015.
[19] W. Enck, M. Ongtang, P. D. McDaniel, et al.
Understanding android security. IEEE security &
privacy, 7(1):50–57, 2009.
[20] Z. Fang, W. Han, and Y. Li. Permission based android
security: Issues and countermeasures. Computers &
Security, 43:205–218, 2014.
[21] A. P. Felt, E. Chin, S. Hanna, D. Song, and
D. Wagner. Android permissions demystiﬁed. In
Proceedings of the 18th ACM conference on Computer
and communications security, pages 627–638. ACM,
2011.
[22] A. P. Felt, K. Greenwood, and D. Wagner. The
eﬀectiveness of application permissions. In Proceedings
of the 2nd USENIX conference on Web application
development, pages 7–7. USENIX Association, 2011.
[23] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and
D. Wagner. Android permissions: User attention,
comprehension, and behavior. In Proceedings of the
Eighth Symposium on Usable Privacy and Security,
page 3. ACM, 2012.
[24] Google. Android m developer preview & tools.
http://android-developers.blogspot.com/2015/05/
android-m-developer-preview-tools.html. Accessed:
2015-11-23.
[25] Google. Oﬃcial android blog: Get ready for the sweet
taste of android 6.0 marshmallow.
http://oﬃcialandroid.blogspot.com/2015/10/
get-ready-for-sweet-taste-of-android-60.html.
Accessed: 2015-11-10.
[26] Google. Android and security. http://googlemobile.
blogspot.com/2012/02/android-and-security.html,
2012. Accessed: 2014-12-08.
[27] W. Han, Z. Fang, L. T. Yang, G. Pan, and Z. Wu.
Collaborative policy administration. IEEE
Transactions on Parallel and Distributed Systems,
25(2):498–507, 2014.
D. Wetherall. These aren’t the droids you’re looking
for: retroﬁtting android to protect data from
imperious applications. In Proceedings of the 18th
ACM conference on Computer and communications
security, pages 639–652. ACM, 2011.
[29] K. Kennedy, E. Gustafson, and H. Chen. Quantifying
the eﬀects of removing permissions from android
applications. In Workshop on Mobile Security
Technologies (MoST), 2013.
[30] K. Mueller and K. Butler. Poster: Flex-p: ﬂexible
android permissions. In Proc. of IEEE S&P, 2011.
[31] M. Nauman, S. Khan, and X. Zhang. Apex: extending
android permission model and enforcement with
user-deﬁned runtime constraints. In Proceedings of the
5th ACM Symposium on Information, Computer and
Communications Security, pages 328–332. ACM, 2010.
[32] J. H. Saltzer. Protection and the control of
information sharing in multics. Communications of the
ACM, 17(7):388–402, 1974.
[33] B. P. Sarma, N. Li, C. Gates, R. Potharaju,
C. Nita-Rotaru, and I. Molloy. Android permissions: a
perspective combining risks and beneﬁts. In
Proceedings of the 17th ACM symposium on Access
Control Models and Technologies, pages 13–22. ACM,
2012.
[34] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam,
and V. Sundaresan. Soot-a java bytecode optimization
framework. In Proceedings of the 1999 conference of
the Centre for Advanced Studies on Collaborative
research, page 13. IBM Press, 1999.
[35] R. Wang, L. Xing, X. Wang, and S. Chen.
Unauthorized origin crossing on mobile platforms:
Threats and mitigation. In Proceedings of the 2013
ACM SIGSAC conference on Computer &
communications security, pages 635–646. ACM, 2013.
[36] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos.
Permission evolution in the android ecosystem. In
Proceedings of the 28th Annual Computer Security
Applications Conference, pages 31–40. ACM, 2012.
[37] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos.
Proﬁledroid: multi-layer proﬁling of android
applications. In Proceedings of the 18th annual
international conference on Mobile computing and
networking, pages 137–148. ACM, 2012.
[38] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium:
Practical policy enforcement for android applications.
In USENIX Security Symposium, pages 539–552, 2012.
[39] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh.
Taming information-stealing smartphone applications
(on android). In Trust and Trustworthy Computing,
pages 93–107. Springer, 2011.
758