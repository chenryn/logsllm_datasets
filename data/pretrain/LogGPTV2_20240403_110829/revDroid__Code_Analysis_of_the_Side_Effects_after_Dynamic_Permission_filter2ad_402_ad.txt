### Exception Handler Categories

Exception handlers can be categorized into three main types:

1. **Ineffective or Empty Handlers**: Many regular applications catch exceptions but do not perform any meaningful actions within the exception handler, often leaving it empty.
2. **Logging and Notification Handlers**: Some applications log the error or display a simple dialog to inform the user about a failed permission check.
3. **Fake Data Handlers**: A small number of applications, including certain malware, return fake data in the exception handler. For instance, when attempting to retrieve the unique identifier string of a device, some malware families return the string "invalid" instead. This approach helps these malwares avoid crashes caused by unhandled `SecurityException` and `NullPointerException`, allowing their core malicious logic to continue running.

### 5. DISCUSSIONS

#### 5.1 Limitations of Analysis Completeness and Success Rates

**Native Code**: The completeness of the revDroid analysis is reduced if applications use native code. Reverse-engineering Android applications with native code is challenging. Our analysis tool relies on the Soot and FlowDroid frameworks, which do not handle native modules. Since native code may also contain misuses, this can exacerbate the issue.

**Limitations of Soot and FlowDroid**: Several limitations in the Soot and FlowDroid frameworks affect the completeness and success rate of the analysis. For example, Soot uses the SPARK algorithm to generate the call graph. To create a call graph edge, the algorithm must know the type of the base object on which the method is invoked. If the base object is null or comes from a factory method inside the Android SDK, no edge will be created. A typical example in Android is the `findViewById` method of the `android.app.Activity` class. As a result, method calls on objects returned by `findViewById` are not analyzed, leading to completeness issues.

Additionally, some applications in our dataset contain invalid Dalvik bytecode. For instance, some APK files include classes that implement interfaces that are not actually interfaces, or inner classes located inside an outer class where the outer class is missing. Soot and FlowDroid may fail to analyze or instrument these applications completely, or even crash. We plan to assist the maintainers of Soot and FlowDroid in handling these unusual cases in the future.

#### 5.2 Limitations of Our Measure on Side Effects

Although our code analysis for side effects after permission revocation covers many cases of users' misuse of permission-relevant APIs, it does not measure the misbehavior caused by exception handlers. Many developers simply catch `SecurityException` or general `Exception` but do nothing else. This explains why some applications hang rather than crash after a permission is revoked. Furthermore, we do not differentiate between exception handlers for `SecurityException` and general `Exception`. Therefore, the actual situation where developers consider permission revocation during development may be more severe.

#### 5.3 Accuracy of Third-Party Library Matching

As described in Section 4.2.4, we use package name prefix matching to identify third-party libraries. Since application developers can arbitrarily specify package names, they can even assign package names of other third-party libraries to their own applications, making this matching approach potentially inaccurate. In the future, we can leverage application similarity detection techniques such as AnDarwin [17] to mitigate this issue.

### 6. RELATED WORK

The over-claiming of permissions is one of the most prevalent security issues in Android [20]. Many researchers have contributed studies to analyze and mitigate this issue [31, 11, 28].

Barrera et al. analyzed the permissions requested by 1,100 free Android applications to investigate the practical use of the Android permission mechanism and determine its strengths and weaknesses [9]. Felt et al. performed a case study on the Android platform by reviewing the top free and top paid applications from 18 Google Play categories [22]. They manually compared the functionalities of each application with the permissions it requested. The results showed that four out of 36 applications were over-privileged, with unnecessary `INTERNET` permission accounting for three of the over-privileged applications. Additionally, Felt et al. built Stowaway, an automatic tool to detect over-claimed permissions in Android applications [21]. They applied automated testing techniques to Android 2.2 to determine the permissions required to invoke each API method and used Stowaway to analyze 940 applications. About one-third of these applications had unnecessary permissions. Wei et al. also applied Stowaway to 237 evolving third-party applications covering 1,703 versions and found an overall tendency towards over-claiming permissions [36].

To mitigate the issue of permission over-claim, Nauman et al. proposed Apex, which allows users to grant or revoke a subset of permissions requested by an application using a simple and easy-to-use interface provided by an augmented application installer [31]. Similarly, Zhou et al. and Mueller et al. developed TISSA [39] and Flex-P [30], respectively, to provide finer-grained permission administration tools for Android.

However, these countermeasures sometimes led to the side effect of applications crashing when one or more permissions were revoked. Kennedy et al. quantitatively measured the effects of removing permissions from Android applications by developing Pyandrazzi, a system for automated testing and measurement of fatal exception behaviors [29]. Our work differs from theirs in that we detect application crashes caused by permission revocation before the application is installed, thus notifying both users and developers whether the application will crash with certain permissions revoked.

Static analysis for Android applications typically involves reverse-engineering APK files and performing analysis without running the applications. This method has been widely adopted by researchers. Batyuk et al. designed a static analysis service that allows users to gain deep insights into applications' internals, including lists of included third-party advertising and analytics libraries, potential privacy leaks, and native executable usage [10]. Wei et al. statically analyzed APK files to identify permissions requested by applications and identify intents, i.e., indirect resource access via deputy applications [37]. Wang et al. decompiled Android applications to analyze their program logic related to mobile channels and showed that the lack of origin-based protection opened the door to a wide spectrum of cross-origin attacks [35]. These works share similar methodologies with ours, but our goals differ.

### 7. CONCLUSION AND FUTURE WORK

In this paper, we present revDroid, an automatic tool to analyze the potential side effects of permission revocation on both popular applications from the Google Play Store and malware. Our results show that only 30% of regular applications from the Google Play Store handle all potential side effects, and only 54% of occurrences of potential side effects are handled. In contrast, 73% of malware handles all potential side effects, and 64% of occurrences of potential side effects are handled. Third-party libraries account for only 4% of all misuses in the regular application dataset and have a higher correct usage rate than the applications' original developers. Based on these results, we conclude that:

1. When Android 6.0 introduced the new permission mechanism supporting dynamic permission revocation, the ecosystem of Android applications was unprepared to handle this new technique.
2. Malware has a higher chance of surviving in dynamic permission revocation scenarios.
3. Although third-party libraries handle permission revocation better than regular applications, there is still room for improvement by their developers, including Google itself.

In future work, we plan to expand our experiments and implement our solution as a web service that can detect misuses of permission revocation in APK files. Additionally, we will analyze the reasons for application crashes when the Android platform adopts optimization methods, such as returning fake data, to mitigate side effects. Finally, we aim to optimize and extend revDroid to automatically patch Android applications (APK files) without developer support.

### Acknowledgment

This research is supported by NSFC (Grant No. 61572136). The authors would like to thank the anonymous reviewers for their valuable comments.

### REFERENCES

[References remain unchanged]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.