# 二、Docker 网络内部原理
本章详细讨论了 Docker 网络的语义和语法，揭示了当前 Docker 网络范例的优缺点。
它涵盖以下主题:
*   为 Docker 配置 IP 栈
    *   IPv4 支持
    *   IPv4 地址管理的问题
    *   IPv6 支持
*   配置域名系统
    *   域名系统基础知识
    *   多播域名系统
*   配置 Docker 桥
*   覆盖网络和底层网络
    *   它们是什么？
    *   Docker 如何使用它们？
    *   他们有哪些优势？
# 为 Docker 配置 IP 栈
Docker 使用 IP 栈使用 TCP 或 UDP 与外界进行交互。它支持 IPv4 和 IPv6 寻址基础架构，这将在以下小节中解释。
## IPv4 支持
默认情况下，Docker 为每个容器提供 IPv4 地址，这些地址被附加到默认的`docker0`桥。当使用`--fixed-cidr`标志启动 Docker 守护程序时，可以指定 IP 地址范围，如以下代码所示:
```
$ sudo docker –d --fixed-cidr=192.168.1.0/25
```
我们将在*配置 Docker 桥*部分对此进行更多讨论。
除了 Unix 套接字之外，Docker 守护程序还可以列在 IPv4 TCP 端点上:
```
$ sudo docker -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -d &
```
## 支持 IPv6
IPv4 和 IPv6 可以一起运行；这就是叫做**双栈**。通过运行带有`--ipv6`标志的 Docker 守护程序来启用双栈支持。Docker 将使用 IPv6 链路本地地址`fe80::1`建立`docker0`桥。容器之间共享的所有数据包都流经此桥。
要将全局可路由的 IPv6 地址分配给您的容器，您必须指定一个 IPv6 子网来从中选择地址。
启动 Docker 时，以下命令通过`--fixed-cidr-v6`参数设置 IPv6 子网，并向路由表添加新路由:
```
# docker –d --ipv6 --fixed-cidr-v6="1553:ba3:2::/64"
# docker run -t -i --name c0 ubuntu:latest /bin/bash
```
下图显示了配置了 IPv6 地址范围的 Docker 桥:
![IPv6 support](img/00011.jpeg)
如果您使用容器内的`ifconfig`检查 IP 地址范围，您会注意到适当的子网已被分配给`eth0`接口，如以下代码所示:
```
#ifconfig
eth0      Link encap:Ethernet HWaddr 02:42:ac:11:00:01
          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:1/64 Scope:Link
          inet6 addr: 1553:ba3:2::242:ac11:1/64 Scope:Global
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:7 errors:0 dropped:0 overruns:0 frame:0
          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:738 (738.0 B)  TX bytes:836 (836.0 B)
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
```
到`1553:ba3:2::/64`子网的所有流量将通过`docker0`接口路由。
前面的容器使用`fe80::42:acff:fe11:1/64`作为链路本地地址，`1553:ba3:2::242:ac11:1/64`作为全局可路由的 IPv6 地址进行分配。
### 注
链路本地和环回地址具有链路本地范围，这意味着它们将用于直连网络(链路)。所有其他地址都有全局(或通用)作用域，这意味着它们是全局可路由的，可以用来连接到任何地方具有全局作用域的地址。
# 配置域名系统服务器
Docker 为每个容器提供主机名和 DNS 配置，而我们无需构建自定义映像。它用虚拟文件覆盖容器内的`/etc`文件夹，可以在其中写入新信息。
这可以通过在容器内部运行`mount`命令来看到。容器在最初创建时会收到与主机相同的`resolv.conf`文件。如果主机的`resolv.conf`文件被修改，只有当容器重新启动时，这才会反映在容器的`/resolv.conf`文件中。
在 Docker 中，您可以通过两种方式设置 DNS 选项:
*   使用`docker run --dns=`
*   将`DOCKER_OPTS="--dns ip-address"`添加到 Docker 守护程序文件
也可以使用`--dns-search=`指定搜索域。
下图显示了使用 Docker 守护程序文件中的`DOCKER_OPTS`设置在容器中配置的 **名称服务器**:
![Configuring a DNS server](img/00012.jpeg)
主要的域名系统文件如下:
*   `/etc/hostname`
*   `/etc/resolv.conf`
*   `/etc/hosts`
以下是添加域名系统服务器的命令:
```
# docker run --dns=8.8.8.8 --net="bridge" -t -i  ubuntu:latest /bin/bash
```
使用以下命令添加主机名:
```
#docker run --dns=8.8.8.8 --hostname=docker-vm1  -t -i  ubuntu:latest /bin/bash
```
## 容器与外部网络之间的通信
如果`ip_forward`参数设置为`1`，包装只能在容器之间通过。通常，您只需将 Docker 服务器保持在默认设置`--ip-forward=true`，当服务器启动时，Docker 会为您将`ip_forward`设置为`1`。
要检查设置或手动打开 IP 转发，请使用以下命令:
```
# cat /proc/sys/net/ipv4/ip_forward
0
# echo 1 > /proc/sys/net/ipv4/ip_forward
# cat /proc/sys/net/ipv4/ip_forward
1
```
通过启用`ip_forward`，用户可以使容器和外部世界之间的通信成为可能；如果您处于多桥设置中，容器间通信也需要。下图显示了`ip_forward = false`如何将所有数据包从/从容器转发到外部网络:
![Communication between containers and external networks](img/00013.jpeg)
Docker 不会从 Docker 筛选器链中删除或修改任何预先存在的规则。这允许用户创建规则来限制对容器的访问。
Docker 将`docker0`桥用于单个主机上所有容器之间的数据包流。它添加了一个规则，使用 IPTables 转发链，以便数据包在两个容器之间流动。设置 `--icc=false`将丢弃所有数据包。
当 Docker 守护程序配置了`--icc=false`和`--iptables=true`并且`docker run`通过`--link`选项被调用时，Docker 服务器将插入一对 IPTables 接受规则用于新容器，以连接到其他容器公开的端口，这些端口将是在其 Dockerfile 的公开行中已经提到的端口。下图显示了`ip_forward = false`如何将所有数据包从/从容器中丢弃到外部网络:
![Communication between containers and external networks](img/00014.jpeg)
默认情况下，Docker 的`forward`规则允许所有外部 IP。要仅允许特定的 IP 或网络访问容器，请在 Docker 筛选器链的顶部插入一个否定规则。
例如，使用以下命令，您可以限制外部访问，以便只有源 IP `10.10.10.10`可以访问容器:
```
#iptables –I DOCKER –i ext_if ! –s 10.10.10.10 –j DROP
```
### 限制 SSH 从一个容器到另一个容器的访问
按照以下步骤限制 SSH 从一个容器到另一个容器的访问:
1.  Create two containers, `c1` and `c2.`
    对于`c1`，使用以下命令:
    ```
    # docker run -i -t --name c1 ubuntu:latest /bin/bash
    ```
    生成的输出如下:
    ```
    root@7bc2b6cb1025:/# ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:05
     inet addr:172.17.0.5  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: 2001:db8:1::242:ac11:5/64 Scope:Global
     inet6 addr: fe80::42:acff:fe11:5/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:7 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:738 (738.0 B)  TX bytes:696 (696.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1