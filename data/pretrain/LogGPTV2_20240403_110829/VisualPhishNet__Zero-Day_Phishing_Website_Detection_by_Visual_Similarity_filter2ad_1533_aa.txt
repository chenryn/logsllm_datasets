title:VisualPhishNet: Zero-Day Phishing Website Detection by Visual Similarity
author:Sahar Abdelnabi and
Katharina Krombholz and
Mario Fritz
VisualPhishNet: Zero-Day Phishing Website Detection by
Visual Similarity
Sahar Abdelnabi
CISPA Helmholtz Center for
Information Security
Katharina Krombholz
CISPA Helmholtz Center for
Information Security
Mario Fritz
CISPA Helmholtz Center for
Information Security
0
2
0
2
l
u
J
5
]
R
C
.
s
c
[
4
v
0
0
3
0
0
.
9
0
9
1
:
v
i
X
r
a
ABSTRACT
Phishing websites are still a major threat in today’s Internet ecosys-
tem. Despite numerous previous efforts, similarity-based detection
methods do not offer sufficient protection for the trusted websites –
in particular against unseen phishing pages. This paper contributes
VisualPhishNet, a new similarity-based phishing detection frame-
work, based on a triplet Convolutional Neural Network (CNN).
VisualPhishNet learns profiles for websites in order to detect phish-
ing websites by a similarity metric that can generalize to pages with
new visual appearances. We furthermore present VisualPhish, the
largest dataset to date that facilitates visual phishing detection in an
ecologically valid manner. We show that our method outperforms
previous visual similarity phishing detection approaches by a large
margin while being robust against a range of evasion attacks.
CCS CONCEPTS
• Security and privacy → Web application security; • Com-
puting methodologies → Machine learning approaches;
KEYWORDS
Phishing Detection; Visual Similarity; Triplet Networks
1 INTRODUCTION
Phishing pages impersonate legitimate websites without permis-
sion [49] to steal sensitive data from users causing major financial
losses and privacy violations [10, 19, 20, 47]. Phishing attacks have
increased due to the advances in creating phishing kits that en-
abled the deployment of phishing pages on larger scales [10, 37].
According to the Anti-Phishing Working Group (APWG) [2], an in-
ternational association aiming at fighting phishing attacks, 266,387
attempts have been reported in the third quarter of 2019, which is
a high level that has not been witnessed since 2016 [2].
There have been numerous attempts to combat the threats im-
posed by phishing attacks by automatically detecting phishing
pages. Modern browsers mostly rely on blocklisting [44] as a fun-
damentally reactive mechanism. However, in a recent empirical
study [36], the new phishing pages that used cloaking techniques
were found to be both harder and slower to get detected by block-
lists which motivates the development of proactive solutions. An
example of the latter is using heuristics that are based on monitored
phishing pages [20]. These heuristics can be extracted from URL
strings [4, 35, 55] or HTML [9, 26] to detect anomalies between the
claimed identity of a webpage and its features [38]. However, since
phishing attacks are continuously evolving, these heuristics are
subject to continuous change and might not be effective in detect-
ing future attacks [19, 54] (e.g. more than two-thirds of phishing
1
Figure 1: Trusted pages are granted based on their URLs.
The remaining pages are compared to the trusted pages by a
learnt visual similarity metric. Pages that that are too simi-
lar are rejected, which even allows detecting phishing pages
with new visual appearances.
sites in 3Q 2019 used SSL protection [2], its absence formerly was
used as a feature to detect phishing pages [38]).
Since the key factor in deceiving users is the high visual similarity
between phishing pages and their corresponding legitimate ones,
detecting such similarity was used in many previous detection
studies [19]. In these methods, a list of commonly attacked pages
is maintained, (domain names and screenshots), to protect users
from the potential impersonation of such pages; whenever a user
visits a page that is not in the trusted-list, its content is compared
against the trusted ones. If a high visual similarity is detected, it
is then classified as a phishing page as it impersonates one of the
trusted pages. Similarity-based methods have the advantage of not
relying on heuristics that are likely to evolve and instead they rely
on the strong incentive of the adversary to design pages that are
similar to trustworthy websites. This makes them less prone to an
arms race between defenders and attackers.
These efforts still have limitations. First, their trusted-list are too
small in both the number of websites and pages per website (e.g. 4-
14 websites in [7, 11, 13, 32, 33], less than 10 pages in [14, 48, 53], 41
pages in [34]) which makes them able to detect attacks against these
few pages only. Second, existing approaches fall short in detect-
ing phishing pages that target the same trusted websites but with
new unseen visual appearances, as they perform a page-to-page
image matching between a previously found phishing page and its
legitimate counterpart [5, 14, 19, 25, 39]. Consequently, attackers
can bypass detection by using other pages from the targeted web-
sites or by crafting partially similar phishing pages with different
background pictures, advertisements, or layout [8, 14, 39].
Other legitimate pagesPassed by URLTrustedlistPhishingPassed by visualfeatures (different)Rejected by visualfeatures (similar)Unseen pagesContribution. Our work targets the above limitations and fo-
cuses on improving and generalizing the image-based visual simi-
larity detection. First, we present VisualPhish1, the largest dataset
to date (155 trusted websites with 9363 pages), that we constructed
to mitigate the limitations of previously published datasets, fa-
cilitate visual phishing detection and improve the ecological
validity when evaluating phishing detection frameworks.
Second, we propose VisualPhishNet, a similarity-based detection
model that is the first to utilize a deep learning approach (in par-
ticular, triplet convolutional neural networks) to learn a robust
visual similarity metric between any two same-website webpages’
screenshots, instead of relying on one-to-one matching, which out-
performs prior work by a large margin. A conceptual overview
of our method is depicted in Figure 1; we show a trusted-list of
websites in a learnt feature space in which same-website pages have
higher proximity. Additionally, phishing webpages have high vi-
sual similarity and closer embeddings to the trusted-list, thus, they
would be classified as phishing. Contrarily, websites that are outside
the list have genuine identities and relatively different features.
2 PRELIMINARIES
In this section, we briefly summarize the related similarity-based
phishing detection approaches, then we introduce our threat model.
2.1 Related Work
2.1.1 Page-based similarity approaches. The similarity between
phishing and trusted pages can be inferred by comparing HTML
features; Huang et al. [18] extracted features that represent the text
content and style (e.g. most frequent words, font name and color,
etc.), which they used to compare pages against trusted identities.
Similarly, Zhang et al. [54] used TF-IDF to find lexical signatures
which they used to find the legitimate website domain by a search
engine. Besides, Liu et al. [28] segmented a webpage to blocks based
on HTML visual cues and compared the layout of two pages by
matching blocks. Also, Rosiello et al. [41] used Document Object
Model (DOM) comparison, and Mao et al. [33] used Cascading Style
Sheet (CSS) comparison. However, these methods fail if attackers
used images or embedded objects instead of HTML text [14]. They
are also vulnerable to code obfuscation techniques where a different
code produces similar rendered images [14, 25].
2.1.2
Image-based similarity approaches. Consequently, another
line of work (which we adopt) infers similarity directly from ren-
dered screenshots. As examples, Fu et al. [14] used Earth MoverâĂŹs
Distance (EMD) to compute the similarity between low-resolution
screenshots, which Zhang et al. [53] also used along with textual
features. However, this required the images to have the same aspect
ratio [25], which is a constraint we do not impose. Also, Lam et
al. [25] used layout similarity by matching the screenshots’ segmen-
tation blocks. However, the proposed segmentation approach is
limited when segmenting pages with complex backgrounds [5]. Our
approach does not suffer from these limitations since we use an end-
to-end framework to represent images rather than a heuristic-based
one. In addition, Chen et al. [8] approximated human perception
1https://s-abdelnabi.github.io/VisualPhishNet/
2
with Gestalt theory to determine the visual similarity of two web-
pages’ layouts with slight differences (e.g. an addition or removal
of a block). They evaluated their approach on only 12-16 legitimate
pages and their corresponding spoofed ones. In contrast to these
approaches, we generalize the similarity detection and show that
our method is not limited to phishing pages with a similar layout
to the corresponding trusted ones.
Discriminative keypoint features were often used in phishing
detection. As examples, Afroz et al. [1] used Scale-Invariant Fea-
ture Transform (SIFT) to match logos, while Rao et al. [39] used
Speeded-Up Robust Features (SURF) to match screenshots. Simi-
larly, Bozkir et al. [5] used Histogram of Oriented Gradients (HOG),
Chen et al. [7] used Contrast Context Histogram (CCH), and Malisa
et al. [31] used Oriented FAST and rotated BRIEF (ORB) to detect
mobile applications spoofing. Besides, Medvet et al. [34] used color
histograms and 2D Haar wavelet transform of screenshots. How-
ever, in recent years, CNNs were shown to significantly outperform
local and hand-crafted features in computer vision tasks [23, 43].
Thus, our work is the first to use deep learning in pixel-based
visual similarity phishing detection and to study the adversarial
perturbations against such models.
Chang et al. [6] and Dunlop et al. [13] used logo extraction to
determine a website’s identity and then used the Google search
engine to find corresponding domains. These approaches assumed
a fixed location for the website logo which could be bypassed. Con-
trary to these approaches, we use a learning-based identification of
the discriminating visual cues and study the performance against
shifts in location.
Woodbridge et al. [50] used Siamese CNNs to detect visually
similar URLs by training on URLs rendered as images. In contrast,
we propose a visual similarity metric based on screenshots instead
of URL pairs, with further optimizations adapting to the harder
problem, which goes beyond homoglyph attacks.
Additionally, despite previous efforts, our work explores new
territory in similarity detection research with more generalization
and fewer constraints; previous methods aim to form a match be-
tween a found phishing attempt and its correspondent real page
assuming a highly similar layout and content. Therefore, a phishing
page targeting the same website but is different from the trusted
pages could go undetected. In addition, same-website pages show a
lot of variations in background pictures and colors which attackers
might exploit to continuously create new pages. Thus, our model
and dataset collection do not rely on page-to-page matching, but on
learning a similarity metric between any two same-website pages,
even with different contents, to proactively generalize to partially
similar, obfuscated, and unseen pages.
2.2 Threat Model
We consider phishing pages targeting the collected large list of
trusted websites. We assume that the attacker would be motivated
to target websites that are widely known and trusted, therefore,
high coverage of phishing pages could be achieved by the collected
trusted-list. We assume that the attacker could craft the phishing
page to be fully or partially similar to any page from the targeted
websites (not only to pages in the trusted-list), therefore, we relax
the page-to-page matching and test on phishing pages that were
not seen in the trusted websites’ training pages. We study other
evasion techniques (hand-crafted and white-box adversarial pertur-
bations) that introduce small imperceptible noise to the phishing
page to reduce the similarity to the targeted page that might be
contained in the trusted-list. For all these attempts, we assume that
the adversary has an incentive to create seemingly trusted pages
by not introducing very perceptible noise on the page that might
affect the perceived design quality or the website’s identity (e.g.
large changes to logos and color themes).
3 ANALYSES AND LIMITATIONS OF
PUBLISHED DATASETS
In this section, we discuss public datasets and their limitations
along with the contributions of the VisualPhish dataset.
Unfortunately, only a small number of datasets for the phish-
ing detection task using screenshots are publicly available. One of
these is DeltaPhish [10] for detecting phishing pages hosted within
compromised legitimate websites. The dataset consists of groups
having the same domain, where each group contains one phishing
page and a few other benign pages from the compromised hosting
website. Thus, the legitimate examples only cover the hosting web-
sites, not the websites spoofed by the phishing pages. Consequently,
this dataset is not suitable for similarity-based detection. Moreover,
we observed that a large percentage of phishing pages’ screenshots
in this dataset are duplicates since PhishTank2 reports do not neces-
sarily contain unique screenshots. We also found that the legitimate
and phishing examples had different designs as phishing examples
generally consisted of login forms with few page elements, while
legitimate examples contained more details. This could cause the
trained model to be biased to these design changes and, thus, could
fail when tested with legitimate pages with login forms.
The Phish-IRIS dataset [11] for similarity-based detection con-
sists of phishing pages collected from PhishTank targeting 14 web-
sites and an “other” class collected from the Alexa top 300 websites3
representing legitimate examples outside the trusted-list. However,
this dataset has a limited number of trusted websites, and the screen-
shots of the trusted-list were taken only from phishing reports
which skews the dataset towards poorly designed phishing pages.
VisualPhish contributions. Based on the previously mentioned
limitations, we collected the VisualPhish dataset that facilitates
similarity-based detection approaches and closes the following
gaps: 1) we increased the size of the trusted-list to detect more
phishing attacks. 2) we collected a phishing webpage corpus with
removing duplicity in screenshots. 3) instead of only training on
phishing pages, we also collected legitimate pages of the targeted
websites with different page designs and views (i.e. training trusted-
list). 4) the dataset is not built on a page-to-page basis but on a
per-website basis; the trusted-list contains screenshots from the
whole website, phishing pages that target the trusted website are
considered even if their counterparts are not found in the trusted-
list. 5) we collected a legitimate test set of websites (i.e. different
from trusted domains) that limits bias as far as possible (e.g. login
forms should also be well represented in this test set).
2https://www.phishtank.com/
3https://www.alexa.com
Unlike previous work, we extend the visual similarity to phish-
ing pages that target the trusted websites but were not seen in the
training trusted-list. Thus, we checked that the collected phishing
pages are different in terms of simple pixel-wise similarity from
the targeted trusted websites’ pages. To denote pixel-wise similar-
ity, we used the distances between the pre-trained VGG16 visual
representation instead of naive pixel comparison. We computed
the minimum distances between the phishing pages and the corre-
sponding targeted website. As a reference, we compared them to
the distances between the legitimate test set (other websites) and
the trusted-list. If the phishing pages had similar counterparts in
the trusted-list, they would have considerably smaller distances
compared to other benign pages. However, as can be seen from
the two histograms in Figure 2, the distance ranges in both sets
are comparable with high overlap. Hence, the phishing pages are
different from the training trusted websites’ ones and can be used
to evaluate the performance on future unseen phishing pages.
4 THE VISUALPHISH DATASET
In this section, we show how we constructed VisualPhish.
Phishing pages. To collect the phishing examples, we crawled
and saved the screenshots of the active verified phishing pages from
PhishTank which yielded 10250 pages. We observed that the same
phishing screenshot design could be found with multiple URLs, so
we manually inspected the saved screenshots to remove duplicates
in addition to removing not found and broken URLs. Having non-
duplicated screenshots (i.e. unique visual appearance) is important
to have an accurate error estimate and to have a disjoint and non-
overlapping training and test splits. After filtering, the phishing
set contained 1195 phishing pages targeting 155 websites. We ob-
served that phishing pages targeting one website have differences
in elements’ locations, colors, scales, text languages and designs
(including previous websites’ versions), therefore, the phishing set
can be used to test the model’s robustness to these variations. We
also found that some phishing pages are poorly designed with little
similarity to the overall design of the targeted website, in addition
to having templates that cannot be found in the website but in other
applications (e.g. Microsoft Word or Excel files). Such dissimilar ex-
amples were excluded from previous work (such as [33]), however,
we included all found pages for completeness and to provide a rich
Figure 2: The distances histogram between the pre-trained
VGG16 features of the phishing test set and the targeted web-
site in the training trusted-list (red), in comparison with the
ones between the benign test set and the trusted-list (blue).
3
28780153222842961Distance01234567Percentage (%)PhishLegitdataset for future research. Examples of these variations are in Ap-
pendix B. Additionally, the majority of the crawled pages targeted a
small subset of the trusted websites (a histogram is in Appendix B),
therefore, even though similarity methods cannot detect attacks
against non-listed websites, high coverage of phishing pages could
be achieved by including a few websites in the trusted-list.
Targeted legitimate websites’ pages. Besides collecting phishing
webpages, we collected legitimate pages from those 155 targeted
websites to work as a visual trusted-list. Instead of only gathering
the legitimate counterparts of the found phishing pages as typically
done in previous work, we crawled all internal links that were
parsed from the HTML file of the homepage. As a result, not all
phishing pages have corresponding similar legitimate pages in this
trusted-list. We saved all webpages from the website to get different
page designs, possible login forms, and different languages to make
the similarity model trained with this dataset robust against these
differences. For these 155 websites, we collected 9363 screenshots,
where the number of collected screenshots for each website depends
on the number of hyperlinks found in the homepage.
Top-ranked legitimate websites’ pages. Furthermore, we queried
the top 500 ranked websites from Alexa, the top 100 websites from
SimilarWeb4, in addition to the top 100 websites in categories most
prone to phishing such as banking, finance, and governmental
services. In total, we collected a list of 400 websites from SimilarWeb.
From these lists, we excluded the 155 websites we collected from the
phishing pages’ targets, and then we downloaded the screenshots
of the top ≈60 websites (non-overlapping) from each list.
Training and test pages split. We have three data components: a
training trusted-list of legitimate pages, phishing pages targeting