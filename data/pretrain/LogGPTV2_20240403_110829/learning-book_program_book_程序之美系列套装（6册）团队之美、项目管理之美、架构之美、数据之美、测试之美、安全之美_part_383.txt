Microsoft试图打入这个市场。众所周知，占据公共Internet上的绝大
部分系统的各种Unmix操作系统已经发现了许多安全漏洞。但是，很
少有人从Internet的角度对Microsoft的WindowsNT4.0的安全性进行探
索。这是因为NT4.0系统在网络上只占据了很少一部分的市场份
额。
从本质上说，Microsoft的立场就是“我们是安全的，因为我们不是
Unix”。但是直到Windows操作系统的Vista版本，Microsoft才真正拥
有了具有强大、现代的安全行为的操作系统。Vista存在一些问题，
但主要不是安全方面的问题。因此，当NT4.0作为新产品出现时，
Microsof把矛头对准了Unix，在各种安全问题上对Unix横加指责。后
来，情况掉了个头，人们开始指责Microsof所存在的各种安全问
题。现在，Microsoft实际上提供了一种拥有许多强大的安全组件的
操作系统，还有哪一家值得挑剔呢？请看Apple。
在历史上，AppleComputer的市场策略与Microsoft有些相似。正如
Microsof以它们并不是Unix为由吹嘘自己的安全性一样，Apple的市
场和用户部门声称它们的OSX平台能够更有效地抵御各种攻击和病
毒，但所持的理由也仅仅是它们不是Windows。仔细查看了OSX的
内核和userland空间之后，我可能断定它还是存在许多安全漏洞（不
论是远程还是本地）需要指出和修正。和Microsof刚开始提供NT时
一样，Apple也享受了一段蜜月期。它很少成为攻击目标，因为它的
市场份额非常小。但是，随着它的市场份额不断扩大，可以预想它
所受到的攻击也会不断增加...
1.1.3客户的习得性无助一—无从选择
正如我们所看到的那样，Microsoft在向后兼容方面作出的选择所导
致的不良安全问题可能会让他们的顾客在环境、技术能力以及接受
改变的意愿方面产生自暴自弃的观点（不管是否正当）。我把当前
网络上的另一个（甚至更大的）安全问题归因于开发商的习得性无
助和顾客的无从选择这两个因素的结合。大量的审查显示，大多数
2210
---
## Page 2212
网络交换机的生产商有意把交换机设计为“失败时打开"而不是“失败
时关闭”。交换机用于在数据链路层上的系统之间移动数据包。在这
种情况下，“失败时关闭”意味着设备要么关闭并停止发挥作用，或
者以一种“安全的”方式停止操作。这样，数据就不会通过存在问题
的系统被传递。反之，“失败时打开”意味着系统停止执行任何智能
功能，而是盲目地发送它从所有端口所接收到的数据包口。
在本质上，“失败时打并"的交换机相当于把自身变成了一个哑的集
线器。如果只想消极地噢探自已并不想要的网络交通，那么哑的集
线器可能正是我们所需要的。功能正常的交换机试图只把流量发送
到合适的目的地。
许多机构觉得消极的网络噢探并不是实实在在的威胁，因为许多交
换机都是这样运行的。但在当前，把一个噢探器连接到一个被交换
的LAN并观察自己不应该看到的数据是极为常见的做法，常常会导
致该机构的网络部门的极度惊奇。他们并没有意识到生产商不借一
切代价避免连接断开的决定（很可能是害怕顾客由于间歇性中断而
产生的狂怒），因此当交换机在遇到缺陷、安全攻击或者对某些数
据包的处理缺乏明确的指令等事件时，就把交换机恢复到哑的厂播
模式。换句话说，生产商安静地为他们的顾客作出了最适合顾客的
决定。
我相信如果顾客能够决定哪种方式更适合自己的利益，无疑会让他
们处于更加有利的位置。虽然对于装配线而言，让交换机在失败时
打开无疑要比在失败时关闭更合适，但也有一些情况下交换机用于
分离重要的流量并隔离内部的域和系统。在这种情况下，对于顾客
而言，最好的方式就是交换机在失败时关闭并发送一个警报。顾客
至少应该拥有选择的权力。
在这里，我们讨论了生产商所面临的习得性无助以及顾客的无法选
择。习得性无助来自于生产商对于它能够教育顾客并让顾客获得选
择权这个价值所采取的消极态度。它与前面所讨论的遗留系统的兼
容性解决方案有相似之处。生产商相信为顾客提供这种额外的可配
置性只会让顾客感到困惑，使顾客把事情搞砸或者向生产商拨打大
量的服务支持电话。
顾客的无从选择是可以理解的：顾客是从信誉良好的生产商那里购
实外观漂亮的系统，当时一切看上去都很顺利。但这种无从选择并
不是把系统的实用性降低到不利的程度。是不是必须要让一个系统
2211
---
## Page 2213
在任何环境下都可以工作而降低它的安全性？协议是否盲目地允许
遗留版本的系统在较弱的安全级别上进行交互？当系统不知所措
时，它是否应该恢复到扮演哑的遗留设备的角色？这些情况常常是
由于习得性无助所致。
[1]这与电路的情况相反，后者的"失败时关闭"允许电流继续而"失
败时打开”将切断电流。
1.2确认陷阱
大约1997年8月的某天，我和Hobbit（我的一位朋友，是一位非凡的
黑客1]）与Microsof的一位执行官和一位资深工程师共进晚餐。
他们想知道我们为什么能够这么轻而易举地在Microsoft的产品中找
到这么多的缺陷。虽然有些细节记得不是特别清楚了，但我相信当
时我们是非常诚息地进行了回答，表示我们的方法是向系统输入一
些随机的垃圾。这是一种简明的缺陷和安全测试技巧，有时称为“模
但是，当时“黑客"社区还没有普遍采用模糊方法。
我们告诉这位工程师，我们对于Windows在面临垃圾输入时如此赖
繁地遭到失败而颇为吃惊。接着，我们又问他们执行了哪些类型的
健壮性测试，因为适当的QA（质量保证）应该包含坏输入测试，这
种测试应该能够发现我们所找到的许多令系统和应用程序崩溃的情
况。
这位工程师的回答是他们在所有的产品执行了充分的可用性测试，
但是并没有执行试图使产品崩溃的测试。这个答案揭示了问题的原
因。Microsoft在努力保证良好的用户体验的同时并没有考虑不良的
用户或坏境。
例如，开发MicrosoftWord的队伍将根据各种可接受的输入格式
（Word、WordPerfect、RTF、普通文本等）对文件解析器进行测
试。他们并不会对那些可以通过手工创建的但绝不会由可兼容的字
处理程序产生的各种预期格式的变型进行测试。但是，恶意攻击者
可以用预期格式的不良版本以及随机的垃圾对这些系统进行测试。
当我们在晚餐上询问那些资深的Microsoft代表为什么不发送恶意数
据或提供不良文件作为输入对他们的产品进行测试时，他们的答案
2212
---
## Page 2214
软件失败的方法与软件的一部分进行交互时，显得非常的震惊和沮
丧。
他们从来没有考虑过他们的应用程序可能被部署在恶意环境中。这
种善良的观点来自于另一个可能被恶意攻击者所利用的心理特征：
确认陷阱。
1.2.1概念简介
Microsoft的产品测试的目的是为了确认他们对软件行为的信任，而
不是为了打击这种信任。软件架构师和工程师经常会遇到这种盲
点。在1968年的一篇论文中，PeterWason指出"为了获得正确的解决
方案，有必要产生一种意愿，就是试图推翻假设，并对那些常常确
信是正确的直观想法进行测试”3。他通过一个简单的智力测试演
示了确认陷阱。
找一些人并通知他们正在进行一个小实验。我们将向参与者提供一
个整数数列，它们遵循一个规则，参与者的任务就是猜出这个规
则。为了确定这个规则，参与者可以说出另外的数列，然后我们告
了这个规则时，就可以把它说出来。
这个规则实际上非常简单，就是递增的数列。但是我们先不把它说
出来。
我们最初提供的数列是2、4和6。
此时，其中一位参与者提出了数列8、10和12。我们应该告诉他8、
10和12确实遵循这个规则。另一位参与者可能提出1、3和5。同样，
我们告诉他数列1、3和5也遵循这个规则。
当人们看到初始数列2、4和6时，会注意到一个显而易见的关系，就
是每个后续的数都比前一个数大2。当他们提出匹配的数列时，可能
会让它满足这种关系，但这完全只是他们自已的想法，与我们的秘
密规则无关。当他们所提出的数列得到证实时，会进一步驱使他们
确信自己原先的猜测是正确的，而不是想方设法否定自己的猜测。
现在，我们可以把这个秘密规则想象为一个接受输入的软件规则，
并把这个小实验的参与者想象为软件测试人员，他们相信所有用户
的输入都应该按2递增。他们并不会测试其他数列，例如1、14和
2213
---
## Page 2215
9076（更不用提像-55、-30和0这样的数列了）。因此，系统最终肯
定会接受没有经过测试的输入，这很可能导致系统的崩溃。
而不是错误的。虽然按照严格的逻辑要求，应该用不遵循自己的假
设的数列（例如10、9、8）对这个假设（即所有的输入必须是偶
数，或者必须按2递增）进行测试，但是试图增强自己的假设而不是
驳斥它却是人类的天性。
“这部分软件是否按预想的工作？”这个问题不仅需要用我们所倾向
的方式进行测试，而且要用怪异的、恶意的和随机的方法进行测
试。但是，内部软件测试很少会重建常规的终端用户和恶意对手很
可能对软件进行这类输入的这个真实场景。
11在这里，黑客表示受信任的，是正面评价。
[2]有时候，雇用一位协议的密钥发明者并让他"重新发明"这种密钥
要比获得这项技术的许可更为便宜。出席这次晚餐的工程师就是
Microsoft负责把DCE/RPC"重新实现"为SMB/CIFS的人员之一。
[3]"Reasoning About a Rule,"Peter Wason,《The Quarterly Journal of
Experimental Psychology)。
1.2.2分析师确认陷阱
考虑一位在一个三字母机构（如CIA、FBI）工作的情报分析师。这
位分析师希望创建有效、实用的分析报告，以提升她的职业地位。
这位分析师从多个来源采集信息，包括她以前所创建的报告。接
着，她把这些报告提交给自己的上司。这个过程看上去很简单，但
实际上包含了一个潜在的确认陷阱。在她的上司审阅她的工作之
前，很可能上司以前也是一位分析师，并且创建了一些报告，并被
现在这位分析师作为参考材料。换句话说，输入决策的创建者同时
又是决策的审阅者的情况并非罕见。
显然，分析师会产生一种倾向，就是把她的报告与上司的报告保持
一致，而不是与之相俘。她很可能会有意识地这样做，特别是当她
试图在该社区或机构内获得更好的职业生涯时。当然，她也有可能
是无意识地这样做，就像前面Wason的3个升序数字例子一样。至
少，这家机构的结构和信息基础形成了一个很强的自增强反馈循环
的可能性。
2214
---
## Page 2216
我个人遇到过两个例子，人们认识到确认陷阱的存在，并积极工作
以确保不会陷入其中。毫不惊奇的是，这两个例子都涉及用情报分
析场景引起我注意的相同人们，他们证实了我对情报报告中经常出
现这种错误的怀疑。
1.2.3陈腐的威胁模型
在上届总统任职期间，我担任了政府部门的一个关键人员小组的顾
问。我的重要任务之一是对有些人所收到的关于网络功能（包括攻
击性和防御性）的报告发表自已的看法，并指出报告中的哪些研究
领域有效或者具有前途。我常常不得不指出，最初的报告在对手模
型和技术方面的不准确达到了令人痛心疾首的程度。报告中所描述
的技术、策略和功能与具有良好的经济能力和高度的工作动力的对
手可能采用的技术相比实在差得太远。报告中所描述的许多只有强
有力的国家级对手才有可能使用的技术和策略对于当前的网络发烧
发而言只是雕虫小技。
这些报告试图理解网络威胁是如何演变的，但它们却是根据以前的
技术进行推断的，显得毫无新意。技术已经发展了，但模型却没有
发展，仍然远远落后于现实。因此这些报告所描述的场景对于过去
的某个时期而言可能是准确的归纳，但对于当前而言却是过时的和
不准确的。这正是确认陷阱的特点。因此，这些需要我进行评论的
报告就是由于与前面所提到的分析师陷阱相似的情况下产生的。