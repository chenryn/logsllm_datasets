contained some kind of aberration that can be expressed
numerically, a visual diﬀerence cannot be easily found by a
human observer. Speciﬁcally, we manually analyzed 1,000
test cases in which the absolute error was larger than zero.
We tried to determine in how many cases a human observer
would notice an aberration. While this is not believed to be
an approach that is valid overall (i.e., speciﬁc circumstances
like medical applications require precise conversion), a visual
impact in the context of a website exists only if a user can
actually spot it.
During the manual inspection process, we spent about 10
seconds on each pair of the images to compare them (aided
by the diﬀerence image to support the user). The results of
this manual examination indicate that only 46.3% of the er-
roneous samples were perceived as diﬀerent from their orig-
inal. Since user experience may diﬀer, we provide a website
where we present all defective images complete with their
original and the diﬀerence images, inviting others to freely
inspect these cases [6].
Several side eﬀects were observed during the puriﬁcation
process and the evaluation of this process’ results. What
was an additional positive side eﬀect we found, was that
due to the removal of elements not contributing to the visual
appearance of the image, SVGPuriﬁer actually compresses
ﬁles with an average compression ratio of 2.6. Some ﬁles had
a slightly larger ﬁle size after the puriﬁcation process, which
was caused by the transformation the tool has performed on
broken ﬁles. In most cases, the increase in ﬁle size was based
on the addition of missing closing tags by SVGPuriﬁer.
1.59% of the ﬁles in our test set contained one or more
instances of the  element.
In the major-
ity of the 1,686 cases, this element was used as what had
appeared to be an artifact of Adobe Illustrator to store a
base64-encoded representation of its proprietary AI ﬁle for-
mat within the SVG ﬁle. SVGPuriﬁer deleted these el-
ements and no visual impact resulted from this removal.
However, the image size was reduced signiﬁcantly.
6. RELATED WORK
Not surprisigly, being one of the most common problems
in the area of web security, the Cross Site Scripting (XSS)
problem has received a lot of attention during the last decade.
[11,12,20,27–29,31,36,39,40,42]. On the oﬀensive side, sev-
eral diﬀerent kinds of attacks were studied [12, 28, 31]. Ap-
proaches to prevent XSS attacks include information ﬂow
and taint tracking [20, 36, 39, 40], and analysis on the client-
or server-side [11, 29, 40]. John’s dissertation elaborated on
the attack and defense techniques in detail [27], while Phung
et al. presented speciﬁc defense techniques against client
side and JavaScript based attacks [38]. Nevertheless, none
of these works dealt with the threat of malicious image ﬁles
in the JavaScript execution context. In this paper, we in-
troduce new innovative attacks that highlight the fact that
in the era of HTML5, even a previously unsuspicious 
tag may introduce security vulnerabilities due to the tight
integration of SVG images into the modern browsers.
One exception is the work by Barth et al., who discussed
attacks and mitigations around faulty and jaunty content
sniﬃng [9]. Deprecated browsers such as Opera 9 and Inter-
net Explorer 6 allowed to execute JavaScript by combining
image tags with JavaScript URIs, but none of the tested
modern browsers supports this kind of render behavior any-
more, as this particular attack vector has been recently ﬁxed.
In contrast, the risks of Cross Site Scripting and related at-
tacks against browsers induced by SVG images have not yet
been investigated.
SVG as a subject itself surfaced rarely in the scientiﬁc se-
curity community. One notable exception is given by Dami-
ani et al. [18], who dealt with access control requirements
of parts of SVG ﬁles. Their assumption was that SVG ﬁles
248containing sensitive personal information should be rendered
diﬀerently for diﬀerent viewers, hence requiring some parts
of an SVG document to be deleted (or kept encrypted).
However, they did not manage to cope with the threat of
misusing SVG ﬁles as attack vectors.
In the same line of
work, Mohammed et al. [33–35] investigated the use of SVG
images in medical contexts, where certain security guaran-
tees have to be granted for sensitive information contained
in an SVG image. Again, their publication did not resolve
the oﬀensive use of SVG ﬁles.
One area of research closely related to the results pre-
sented in this paper deals with the problem of code embed-
ded in document formats. For example, Backes et al. showed
that maliciously prepared PostScript ﬁles can be used as an
attacker vector [8], and Checkoway et al. discussed malicious
TEX ﬁles that can, among other consequences, lead to an ar-
bitrary code execution and data exﬁltration based on TEX’s
Turing-complete macro language [13]. Even pure text ﬁles
might contain shellcode as shown by Mason et al. [32]. We
continue this line of scientiﬁc enquiry and present attacks
related to SVG images.
An orthogonal area of research are alternative browser de-
signs [10,15,19,41]. These browsers explore how the security
of state-of-the-art browsers can be improved, for example by
creating separate protection domains. The results presented
in this paper need to be taken into account when designing
more secure browser and especially the fact that  tags
might lead to suspicious content have to be considered.
7. CONCLUSION
In this paper, we provide an overview of Scalable Vec-
tor Graphics (SVG) and their security impact on the World
Wide Web as based on the new HTML5 speciﬁcation drafts.
We show that this image format (which exists for more than
a decade), signiﬁcantly changes the browser and web security
landscape. We introduce several novel attacks against mod-
ern browsers and show that this phenomenon can have major
impact on web applications that allow their users to post im-
ages. In particular, we illustrate that SVG images embedded
via  tag and CSS can execute arbitrary JavaScript code
and similar attacks. Subsequently, the discussed XSS ﬁlter
bypasses, which work against several browsers, can have a
similarly high impact on a targeted attack scenario.
To mitigate the attacks presented, we proposed SVGPu-
riﬁer as a ﬁrst practical solution available and capable of
removing potentially malicious code from SVG ﬁles. We
have empirically shown that the software is usable for real-
world scenarios such as a puriﬁcation of the SVG ﬁles stored
by Wikipedia. We are in a discussion with the Wikipedia
team, who might adopt SVGPuriﬁer to their infrastructure.
Furthermore, many of the identiﬁed attacks have already
been ﬁxed by major browser vendors.
8. REFERENCES
[1] National vulnerability database (NVD)
(CVE-2007-1765). http://web.nvd.nist.gov/view/
vuln/detail?vulnId=CVE-2007-1765, Mar. 2007.
[2] National vulnerability database (NVD)
(CVE-2008-3702). http://web.nvd.nist.gov/view/
vuln/detail?vulnId=CVE-2008-3702, Aug. 2008.
[3] Fonts – SVG 1.1 (Second Edition).
http://www.w3.org/TR/SVG/fonts.html, June 2010.
[4] National vulnerability database (NVD)
(CVE-2010-3113). http://web.nvd.nist.gov/view/
vuln/detail?vulnId=cve-2010-3113, Aug. 2010.
[5] Scalable vector graphics (SVG) 1.1 (Second edition).
http://www.w3.org/TR/SVG11/, June 2010.
[6] Svgpuriﬁer: inaccurately converted images.
http://svgpurifier.nds.rub.de/, May 2011.
[7] Adobe Systems Inc. Illustrator 10 XML Extensions
Guide, Sept. 2001.
[8] M. Backes, M. Durmuth, and D. Unruh. Information
Flow in the Peer-Reviewing Process. In IEEE
Symposium on Security and Privacy, 2007.
[9] A. Barth, J. Caballero, and D. Song. Secure Content
Sniﬃng for Web Browsers, or How to Stop Papers
from Reviewing Themselves. In IEEE Symposium on
Security and Privacy, 2009.
[10] A. Barth, C. Jackson, C. Reis, and Google Chrome
Team. The Security Architecture of the Chromium
Browser, 2008.
http://seclab.stanford.edu/websec/chromium/.
[11] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD:
Precise Dynamic Prevention of Cross-Site Scripting
Attacks. In Conference on Detection of Intrusions and
Malware & Vulnerability Assessment, 2008.
[12] H. Bojinov, E. Bursztein, and D. Boneh. XCS: Cross
Channel Scripting and its Impact on Web
Applications. In ACM Conference on Computer and
Communications Security (CCS), 2009.
[13] S. Checkoway, H. Shacham, and E. Rescorla. Are
Text-only Data Formats Safe? or, Use This LaTeX
Class File to Pwn Your Computer. In USENIX
Workshop on Large-Scale Exploits and Emergent
Threats (LEET), 2010.
[14] J. Clark. XSL transformations (XSLT).
http://www.w3.org/TR/xslt, Nov. 1999.
[15] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G.
Hansen. A Safety-Oriented Platform for Web
Applications. In IEEE Symposium on Security and
Privacy, 2006.
[16] A. Dabirsiaghi. The OWASP AntiSamy project.
http://code.google.com/p/owaspantisamy/, Apr.
2011.
[17] E. Dahlstr¨om. SVG and HTML. http://dev.w3.org/
SVG/proposals/svg-html/svg-html-proposal.html,
July 2008.
[18] E. Damiani, S. De Capitani di Vimercati,
E. Fernandez-Medina, and P. Samarati. An access
control system for SVG documents. King’s College,
University of Cambridge, UK, pages 29–31, 2002.
[19] C. Grier, S. Tang, and S. T. King. Secure Web
Browsing with the OP Web Browser. In IEEE
Symposium on Security and Privacy, 2008.
[20] M. V. Gundy and H. Chen. Noncespaces: Using
Randomization to Enforce Information Flow Tracking
and Thwart Cross-Site Scripting Attacks. In
Symposium on Network and Distributed System
Security (NDSS), 2009.
[21] U. Harnhammar. kses - PHP HTML/XHTML ﬁlter.
http://sourceforge.net/projects/kses/, Mar.
2010.
249[22] M. Heiderich. Opera SVG AII testcase.
http://heideri.ch/opera/, 2011.
[23] M. Heiderich. SVG chameleon via XSLT - HTML5
Security Cheatsheet. http://html5sec.org/#125,
Mar. 2011.
[24] M. Heiderich and T. Frosch. SVGpuriﬁer smoketest.
http://heideri.ch/svgpurifier/SVGPurifier/,
Apr. 2011.
[25] I. Hickson. HTML standard — the map element.
http://whatwg.org/specs/web-apps/current-work/
multipage/the-map-element.html#svg-0, Apr. 2011.
[26] L. Huang, Z. Weinberg, C. Evans, and C. Jackson.
Protecting browsers from Cross-Origin CSS attacks. In
ACM Conference on Computer and Communications
Security (CCS) 2010), 2010.
[27] M. Johns. Code Injection Vulnerabilities in Web
Applications - Exempliﬁed at Cross-site Scripting.
PhD thesis, University of Passau, Passau, July 2009.
[28] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner.
Dynamic Pharming Attacks and Locked Same-Origin
Policies for Web Browsers. In ACM Conference on
Computer and Communications Security (CCS), 2007.
[29] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic.
Noxes: A Client-Side Solution for Mitigating
Cross-Site Scripting Attacks. In ACM Symposium On
Applied Computing (SAC), 2006.
[30] E. Lawrence. Same origin policy part 1: No peeking.
http://blogs.msdn.com/b/ieinternals/archive/
2009/08/28/
explaining-same-origin-policy-part-1-deny-read.
aspx, Aug. 2009.
[31] M. Martin and M. S. Lam. Automatic Generation of
XSS and SQL Injection Attacks with Goal-directed
Model Checking. In USENIX Security Symposium,
2008.
[32] J. Mason, S. Small, F. Monrose, and G. MacManus.
English Shellcode. In ACM Conference on Computer
and Communications Security (CCS), 2009.
[33] S. Mohammed, L. Chamarette, J. Fiaidhi, and
S. Osborn. A Safe RSS Approach for Securely Sharing
Mobile SVG Biomedical Images for Web 2.0. In 12th
IEEE International Conference on Computational
Science and Engineering, 2009.
[34] S. Mohammed, J. Fiaidhi, H. Ghenniwa, and
M. Hahn. Developing a Secure Web Service
Architecture for SVG Image Delivery. Journal of
Computer Science, 2(2):171–179, 2006.
[35] S. M. A. Mohammed and J. A. W. Fiadhi. Developing
Secure Transcoding Intermediary for SVG Medical
Images within Peer-to-Peer Ubiquitous Environment.
In CNSR ’05 Proceedings of the 3rd Annual
Communication Networks and Services Research
Conference, 2005.
[36] Y. Nadji, P. Saxena, and D. Song. Document
Structure Integrity: A Robust Basis for Cross-site
Scripting Defense. In Symposium on Network and
Distributed System Security (NDSS), 2009.
[37] S. Patnaik. htmLawed. http://www.bioinformatics.
org/phplabware/internal_utilities/htmLawed/.
[38] P. H. Phung, D. Sands, and A. Chudnov. Lightweight
Self-Protecting JavaScript. In ACM Symposium on
Information, Computer and Communications Security
(ASIACCS), 2009.
[39] T. Pietraszek and C. V. Berghe. Defending Against
Injection Attacks Through Context-Sensitive String
Evaluation. In Symposium on Recent Advances in
Intrusion Detection (RAID), 2005.
[40] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross-Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. In Symposium on Network and Distributed
System Security (NDSS), 2007.
[41] H. J. Wang, C. Grier, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The Multi-Principal OS
Construction of the Gazelle Web Browser. In USENIX
Security Symposium, 2009.
[42] G. Wassermann and Z. Su. Static Detection of
Cross-Site Scripting Vulnerabilities. In International
Conference on Software Engineering (ICSE), 2008.
[43] E. Z. Yang. HTML Puriﬁer.
http://htmlpurifier.org/, Mar. 2011.
250