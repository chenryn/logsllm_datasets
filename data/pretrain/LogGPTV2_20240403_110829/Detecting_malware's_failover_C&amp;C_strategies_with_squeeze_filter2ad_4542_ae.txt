tify networks that persistently host malicious activities. This has
already led some ISPs to take an interest in the issue and improve
their security practices [43]. SQUEEZE can be readily adapted to
take advantage of any of these techniques for detecting C&C com-
munication.
Limited coverage is a general problem of dynamic program anal-
ysis. Techniques to overcome this limitation have been proposed in
5http://maliciousnetworks.org
a number of ﬁelds such as software testings [44] and vulnerabil-
ity discovery [45]. In the context of malware, Limbo [46] aims to
recognize malicious device drivers (rootkits) by forcing execution
to traverse the driver’s control ﬂow graph. Limbo however cannot
ensure that the program state (that is, the values of registers and
memory) is consistent with the program paths it is forcing. Other
approaches [1, 47] overcome this limitation. Multi-path explo-
ration [1] is the approach most closely related to our work, since it
explores possible execution paths by modifying the execution envi-
ronment before reverting to a snapshot. Multi-path exploration uses
a constraint solver to ﬁnd out how to modify the environment to
lead execution down an alternative branch. MineSweeper [47] sim-
ilarly aims to uncover trigger-based malware behavior using a com-
bination of concrete and symbolic execution. While useful, these
techniques suffer from the path explosion problem: The overall
number of program paths that need to be explored grows exponen-
tially. The reason is that, at each interesting branch in the program,
the analysis has to follow two successor paths. Furthermore, code
obfuscation can make the constraint solving step required by such
tools provably hard [48]. SQUEEZE does not attempt to discover
triggers for hidden behavior: Instead, it assumes that the behavior
of interest (backup C&C communication) is triggered by the un-
availability of network resources. This reduces the execution space
that has to be explored to the (much smaller) endpoints tree, such
as the one shown in Figure 2.
A different approach for increasing coverage is used by Rean-
imator [49]. By automatically identifying and modeling the code
responsible for an observed behavior, Reanimator is able to recog-
nize the same capability in other programs even if it is not observed
at run-time. A limitation is that a behavior has to be triggered in at
least one malware execution before it can be modeled.
8 Conclusion
Modern botnets are complex distributed systems designed to be
resilient in the face of takedown attempts. To avoid losing con-
trol over their infected computers, botmasters use redundant C&C
servers and failover C&C strategies such as domain generation al-
gorithms. While it is possible to detect malware C&C servers by
monitoring the execution of bots in a controlled environment, this
approach suffers from limited coverage and will not reveal all C&C
servers. Connections to backup C&C servers will not be triggered
until the primary servers are taken down. In this paper we have in-
troduced SQUEEZE, a system that uses a specialized form of multi-
path exploration to trick bot binaries into revealing additional C&C
endpoints and failover strategies. We introduced two alternative
strategies for making use of domain knowledge on C&C commu-
nication to efﬁciently explore the execution paths that are revealed
when communication with a contacted endpoint is allowed or blocked.
By testing SQUEEZE on a diverse and representative malware dataset
and comparing it against an ordinary analysis sandbox, we showed
that it can reveal hundreds of additional active C&C servers and
trigger DGA algorithms that bots use as a failover strategy.
9 Acknowledgements
The research leading to these results has received funding from
the European Union Seventh Framework Programme under grant
agreement n. 257007 (SysSec), from the Prevention, Preparedness
and Consequence Management of Terrorism and other Security-
related Risks Programme European Commission - Directorate-General
Home Affairs (project i-Code), and from the Austrian Research
Promotion Agency (FFG) under grant 820854 (TRUDIE). This pub-
lication reﬂects the views only of the authors, and the Commission
cannot be held responsible for any use which may be made of the
information contained therein.
10 References
[1] Moser, A., Kruegel, C., Kirda, E.: Exploring Multiple
Execution Paths for Malware Analysis. In: IEEE Symposium
on Security and Privacy. (2007)
[2] Decker, A., Sancho, D., Kharouni, L., Goncharov, M.,
McArdle, R.: A study of the Pushdo / Cutwail Botnet.
http://us.trendmicro.com/imperia/md/
content/us/pdf/threats/securitylibrary/
Study_of_pushdo.pdf (2009)
[3] Stone-Gross, B., Cova, M., Cavallaro, L., Gilbert, B.,
Szydlowski, M., Kemmerer, R., Kruegel, C., Vigna, G.: Your
botnet is my botnet: analysis of a botnet takeover. In:
Proceedings of the 16th ACM conference on Computer and
communications security (CCS). (2009)
[4] Chiang, K., Lloyd, L.: A case study of the rustock rootkit
and spam bot. In: Proceedings of the First Workshop on Hot
Topics in Understanding Botnets. (2007)
[5] Binsalleeh, H., Ormerod, T., Boukhtouta, A., Sinha, P.,
Youssef, A., Debbabi, M., Wang, L.: On the analysis of the
zeus botnet crimeware toolkit. In: International Conference
on Privacy, Security and Trust. (2010)
[6] Grizzard, J.B., Sharma, V., Nunnery, C., Kang, B.B.H.,
Dagon, D.: Peer-to-Peer Botnets: Overview and Case Study.
In: Proceedings of the First Workshop on Hot Topics in
Understanding Botnets table of contents. (2007)
[7] Holz, T., Steiner, M., Dahl, F., Biersack, E., Freiling, F.:
Measurements and mitigation of peer-to-peer-based botnets:
a case study on storm worm. In: Proceedings of the 1st
Usenix Workshop on Large-Scale Exploits and Emergent
Threats. (2008)
[8] Dittrich, D., Dietrich, S.: P2p as botnet command and
control: a deeper insight. In: 3rd International Conference
On Malicious and Unwanted Software (Malware). (2008)
[9] Stock, B., Goebel, J., Engelberth, M., Freiling, F.C., Holz, T.:
Walowdac - analysis of a peer-to-peer botnet. In:
Proceedings of the 2009 European Conference on Computer
Network Defense (EC2ND). (2009)
[10] Fitzgibbon, N., Wood, M.: Conﬁcker. C: A technical
analysis. http://www.sophos.com/sophos/docs/
eng/marketing_material/
conficker-analysis.pdf (2009)
[11] Thomas, K. an Nicol, D.: The koobface botnet and the rise of
social malware. In: 5th International Conference On
Malicious and Unwanted Software (Malware). (2010)
[12] Kang, B.B., Chan-Tin, E., Lee, C.P., Tyra, J., Kang, H.J.,
Nunnery, C., Wadler, Z., Sinclair, G., Hopper, N., Dagon, D.,
Kim, Y.: Towards complete node enumeration in a
peer-to-peer botnet. In: Proceedings of the 4th International
Symposium on Information, Computer, and Communications
Security (ASIACCS). (2009)
[13] Cho, C.Y., Caballero, J., Grier, C., Paxson, V., Song, D.:
Insights from the inside: a view of botnet management from
inﬁltration. In: USENIX Workshop on Large-Scale Exploits
and Emergent Threats (LEET). (2010)
[14] Stone-Gross, B., Holz, T., Stringhini, G., Vigna, G.: The
Underground Economy of Spam: A Botmaster’s Perspective
of Coordinating Large-Scale Spam Campaigns. In: USENIX
Workshop on Large-Scale Exploits and Emergent Threats
(LEET). (2011)
[15] Mushtaq, A.: Smashing the Mega-d/Ozdok botnet in 24
hours. http://blog.fireeye.com/research/
2009/11/smashing-the-ozdok.html (2009)
(cid:1)(cid:2)
[16] Krebs, B.: Takedowns: The Shuns and Stuns That Take the
Fight to the Enemy. McAfee Security Jouranl (6) (2010)
[17] Cranton, T.: Cracking Down on Botnets. http://blogs.
technet.com/b/microsoft\_blog/archive/
2010/02/25/cracking-down-on-botnets.aspx
(2011)
[18] Krebs, B.: Researchers Kneecap Pushdo Spam Botnet.
http://krebsonsecurity.com/2010/08/
researchers-kneecap-pushdo-spam-botnet/
(2010)
[19] Boscovich, R.: Taking Down Botnets: Microsoft and the
Rustock Botnet. http://blogs.technet.com/b/
microsoft\_blog/archive/2011/03/17/
taking-down-botnets-microsoft
-and-the-rustock-botnet.aspx (2011)
[20] Stone-Gross, B., Moser, A., Kruegel, C., Almaroth, K.,
Kirda, E.: FIRE: FInding Rogue nEtworks. In: Annual
Computer Security Applications Conference (ACSAC).
(2009)
[21] Bayer, U., Kruegel, C., Kirda, E.: TTAnalyze: A Tool for
Analyzing Malware. In: Proceedings of the 15th European
Institute for Computer Antivirus Research (EICAR 2006)
Annual Conference. (2006)
[22] Willems, C., Holz, T., Freiling, F.: Toward Automated
Dynamic Malware Analysis Using CWSandbox. IEEE
Symposium on Security and Privacy 5(2) (2007)
[23] Wurzinger, P., Bilge, L., Holz, T., Goebel, J., Kruegel, C.,
Kirda, E.: Automatically generating models for botnet
detection. In: Proceedings of the 14th European conference
on Research in computer security (ESORICS). (2009)
[24] Perdisci, R., Lee, W., Feamster, N.: Behavioral Clustering of
HTTP-Based Malware and Signature Generation Using
Malicious Network Traces. In: USENIX conference on
Networked Systems Design and Implementation (NSDI).
(2010)
[25] Rieck, K., Schwenk, G., Limmer, T., Holz, T., Laskov, P.:
Botzilla: detecting the "phoning home" of malicious
software. In: Proceedings of the 2010 ACM Symposium on
Applied Computing (SAC). (2010)
[26] Jacob, G., Hund, R., Holz, T., Kruegel, C.: JACKSTRAWS:
Picking Command and Control Connections from Bot
Trafﬁc. In: USENIX Security Symposium. (2011)
[27] Bayer, U., Milani Comparetti, P., Kruegel, C., Kirda, E.:
Scalable, Behavior-Based Malware Clustering. In: Network
and Distributed System Security (NDSS). (2009)
[28] Bellard, F.: QEMU, a Fast and Portable Dynamic Translator.
In: USENIX Annual Technical Conference. (2005)
[29] Roesch, M.: Snort: lightweight intrusion detection for
networks. In: USENIX Systems Administration Conference
(LISA). (1999)
[30] Mushtaq, A.: World’s Top Malware.
http://blog.fireeye.com/research/2010/
07/worlds_top_modern_malware.html (2010)
[31] Williams, J.: Bredolab Takedown, Another Win for
Collaboration. http:
//blogs.technet.com/b/mmpc/archive/2010/
10/26/bredolab-takedown-another-win-
for-collaboration.aspx (2010)
[32] Rashid, F.Y.: Harnig Botnet Goes Ofﬂine After Rustock
Raid. http://www.eweekeurope.co.uk/news/
harnig-botnet-goes-offline-
after-rustock-raid-25588 (2011)
[33] Wilcoxon, F.: Individual Comparisons by Ranking Methods.
Biometrics Bulletin 1(6) (1945) 80–83
[34] Kolbitsch, C., Holz, T., Kruegel, C., Kirda, E.: Inspector
Gadget: Automated Extraction of Proprietary Gadgets from
Malware Binaries. In: IEEE Symposium on Security and
Privacy. (2010)
[35] Chen, X., Andersen, J., Mao, Z.M., Bailey, M., Nazario, J.:
Towards an Understanding of Anti-Virtualization and
Anti-Debugging Behavior in Modern Malware. In: IEEE
International Conference on Dependable Systems and
Networks (DSN). (2008)
[36] Dinaburg, A., Royal, P., Sharif, M., Lee, W.: Ether: Malware
Analysis via Hardware Virtualization Extensions. In: ACM
Conference on Computer and Communications Security
(CCS). (2008)
[37] Kang, M.G., Yin, H., Hanna, S., McCamant, S., Song, D.:
Emulating Emulation-Resistant Malware. In: Proceedings of
the 2nd Workshop on Virtual Machine Security (VMSec).
(2009)
[38] Balzarotti, D., Cova, M., Karlberger, C., Kruegel, C., Kirda,
E., Vigna, G.: Efﬁcient Detection of Split Personalities in
Malware. In: Network and Distributed System Security
Symposium (NDSS). (2010)
[39] Johnson, N.M., Caballero, J., Chen, K.Z., McCamant, S.,
Poosankam, P., Reynaud, D., Song, D.: Differential Slicing:
Identifying Causal Execution Differences for Security
Applications. In: IEEE Symposium on Security and Privacy.
(2011)
[40] Lindorfer, M., Kolbitsch, C., Milani Comparetti, P.:
Detecting Environment-Sensitive Malware. In: Recent
Advances in Intrusion Detection (RAID). (2011)
[41] Bailey, M., Cooke, E., Jahanian, F., Xu, Y., Karir, M.: A
survey of botnet technology and defenses. Conference For
Homeland Security, Cybersecurity Applications and
Technology (2009) 299–304
[42] Gu, G., Zhang, J., Lee, W.: Botsniffer: Detecting botnet
command and control channels in network trafﬁc. In:
Proceedings of The 15th Annual Network and Distributed
System Security Symposium (NDSS 2008). (2008)
[43] Krebs, B.: Naming and Shaming ’Bad’ ISPs.
http://krebsonsecurity.com/2010/03/
naming-and-shaming-bad-isps/ (2010)
[44] Godefroid, P., Klarlund, N., Sen, K.: Dart: directed
automated random testing. In: Proceedings of the 2005 ACM
SIGPLAN conference on Programming language design and
implementation. PLDI 05 (2005) 213–223
[45] Cadar, C., Ganesh, V., Pawlowski, P.M., Dill, D.L., Engler,
D.R.: Exe: automatically generating inputs of death. In:
Proceedings of the 13th ACM conference on Computer and
communications security. CCS 06 (2006) 322–335
[46] Wilhelm, J., Chiueh, T.: A Forced Sampled Execution
Approach to Kernel Rootkit Identiﬁcation. In: Symp. on
Recent Advances in Intrusion Detection (RAID). (2007)
[47] Brumley, D., Hartwig, C., Liang, Z., Newsome, J.,
Poosankam, P., Song, D., Yin, H.: Automatically identifying
trigger-based behavior in malware. In: Botnet Detection.
(2008)
[48] Sharif, M.I., Lanzi, A., Gifﬁn, J.T., Lee, W.: Impeding
malware analysis using conditional code obfuscation. In:
Network and Distributed System Security (NDSS). (2008)
[49] Milani Comparetti, P., Salvaneschi, G., Kirda, E., Kolbitsch,
C., Kruegel, C., Zanero, S.: Identifying Dormant
Functionality in Malware Programs. In: IEEE Symposium
on Security and Privacy. (2010)
(cid:2)(cid:1)