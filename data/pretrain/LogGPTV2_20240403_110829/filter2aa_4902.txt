# 程序加载过程

程序加载过程是指系统创建或扩展进程镜像的过程。具体来说，这一过程涉及将文件中的各个段按照特定规则复制到虚拟内存中。在实际运行过程中，只有当进程访问到相应的逻辑页面时，才会请求对应的物理页面。由于一个进程中往往存在大量未被引用的页，因此延迟进行物理读写可以显著提升系统性能。为实现这种优化，可执行文件及共享目标文件中各段的文件偏移量和虚拟地址需设置得当，即它们应当是页大小（通常是4KB）的整数倍。

### 地址对齐要求
对于Intel架构而言，无论是虚拟地址还是文件偏移量都必须是4KB或者更大且为2的幂次方值的整数倍。

### 内存布局示例
以下是一个关于如何将可执行文件加载至内存并安排其内部结构的例子：

- **代码段**：首个页面包含了ELF头信息、程序头部表等；最后一个页面则可能含有数据段起始部分的一个副本。
- **数据段**：最后一页可能会有来自代码段末尾的部分内容，也可能包含与程序运行无关的信息。

从理论上讲，操作系统会对这些内存区域实施严格的权限控制，确保每个段都有独立且适当的访问权限。此外，为了保证每个逻辑页只有一种类型的权限，某些情况下需要调整段地址。例如，在上述例子中，文件代码段的一部分和数据段开头会被映射两次——分别位于数据段和代码段各自的虚拟地址空间内。

### 未初始化数据处理
对于未初始化的数据，通常要求其初始值为零。这意味着如果某个文件的最后一部分不属于任何一个完整的逻辑页，则剩余部分应填充为零。至于其他非纯代码或数据的杂项内容，虽然它们不是进程镜像不可或缺的部分，但系统可以选择保留或删除它们。

### 可执行文件 vs. 共享目标文件
- **可执行文件**：一般包含绝对地址代码，意味着每个段都需要加载到构建该文件时指定的确切虚拟地址上。此时，`p_vaddr`字段直接指定了目标虚拟地址。
- **共享目标文件**：则倾向于使用位置无关代码，允许同一段在不同进程中拥有不同的虚拟地址而不影响功能。尽管如此，各段间的相对距离保持不变，确保了跨进程的一致性。计算基地址的方法也会有所不同。

通过以上机制，现代操作系统能够有效地管理程序资源，同时最大化利用硬件资源，从而提供更高效稳定的用户体验。