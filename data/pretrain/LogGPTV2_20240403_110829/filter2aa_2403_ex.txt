        ret  
0 
my_srand ENDP 
my_rand PROC 
        mov  
rax, QWORD PTR gs:88 ; 58h 
        mov  
ecx, DWORD PTR _tls_index 
        mov  
edx, OFFSET FLAT:rand_state 
        mov  
rcx, QWORD PTR [rax+rcx*8] 
        imul  
eax, DWORD PTR [rcx+rdx], 1664525   
; 0019660dH 
        add  
eax, 1013904223  
; 3c6ef35fH 
        mov  
DWORD PTR [rcx+rdx], eax 
        and  
eax, 32767  
; 00007fffH 
        ret  
0 
my_rand ENDP 
_TEXT ENDS 
初始化的 TLS 数据 
编程人员通常会想给变量 rand_state 设置一个固定的初始值，以防后期忘记对它进行初始化。如下述
代码第 9 行所示，我们对它进行初始化赋值。 
 1  #include  
 2  #include  
 3  #include  
 4 
 5  // from the Numerical Recipes book: 
 6  #define RNG_a 1664525 
 7  #define RNG_c 1013904223 
 8 
 9  __declspec( thread ) uint32_t rand_state=1234; 
10 
11  void my_srand (uint32_t init) 
12  { 
13    
rand_state=init; 
14  } 
15 
16  int my_rand () 
17  { 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 65 章  线程本地存储 TLS 
655 
18    
rand_state=rand_state*RNG_a; 
19    
rand_state=rand_state+RNG_c; 
20    
return rand_state & 0x7fff; 
21  } 
22 
23  int main() 
24  { 
25    
printf ("%d\n", my_rand()); 
26  }; 
以上的代码看起来并没有什么不同，但是在 IDA 下我们可以发现： 
.tls:00404000 ; Segment type: Pure data 
.tls:00404000 ; Segment permissions: Read/Write 
.tls:00404000 _tls  
segment para public 'DATA' use32 
.tls:00404000   
assume cs:_tls 
.tls:00404000   
;org 404000h 
.tls:00404000 TlsStart  
db     0  
    ; DATA XREF: .rdata:TlsDirectory 
.tls:00404001   
db     0 
.tls:00404002   
db     0 
.tls:00404003   
db     0 
.tls:00404004   
dd 1234 
.tls:00404008 TlsEnd   
db     0  
    ; DATA XREF: .rdata:TlsEnd_ptr 
... 
我们要关注的是这里显示的数 1234。每当启动新的线程时，它都会分配一个新的 TLS 段。此后，包
括 1234 在内的所有数据都会被复制到新建都 TLS 段。 
一个典型的应用场景是： 
 启动线程 A，系统同期创建该线程专用的 TLS，并将变量 rand_state 赋值为 1234。 
 此后，线程 A 多次调用 my_rand()函数，rand_state 变量的值不再会是初始值 1234。 
 另行启动线程 B，系统同期创建该线程专用的 TLS，变量 rand_state 也会被赋值为 1234。也就是
说，在线程 A 和线程 B 里，同名变量会有不同的值。  
TLS 回调 
如果 TLS 中的变量必须填充为某些数据，并且是以某些不寻常的方式进行的话，该怎么办呢？比如说，
我们有以下的这个任务：编程人员忘记调用 my_srand()函数来初始化随机数发生器（PRNG），而随机数发
生器只有在正确初始化之后才会生成真实意义上的随机数，而不是 1234 这样的固定值。在这种情况下，可
以采用 TLS 回调。 
在采用这种 hack 之后，本例代码的可移植性（通用性）就变差了。毕竟，本例只是一个演示性质的敲
门砖而已。它只是构造一个在进程/线程启动前就被系统调用的回调函数（tls_callback()）。这个回调函数用
GetTickCount()函数的返回值来初始化随机数发生器（PRNG）。 
#include  
#include  
#include  
// from the Numerical Recipes book: 
#define RNG_a 1664525 
#define RNG_c 1013904223 
__declspec( thread ) uint32_t rand_state; 
void my_srand (uint32_t init) 
{ 
        rand_state=init; 
} 
void NTAPI tls_callback(PVOID a, DWORD dwReason, PVOID b) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
656 
逆向工程权威指南（下册） 
{ 
        my_srand (GetTickCount()); 
} 
#pragma data_seg(".CRT$XLB") 
PIMAGE_TLS_CALLBACK p_thread_callback = tls_callback; 
#pragma data_seg() 
int my_rand () 
{ 
        rand_state=rand_state*RNG_a; 
        rand_state=rand_state+RNG_c; 
        return rand_state & 0x7fff; 
} 
int main() 
{ 
        // rand_state is already initialized at the moment (using GetTickCount()) 
        printf ("%d\n", my_rand()); 
}; 
我们在 IDA 中查看一下，代码如下所示。 
指令清单 65.4  优化的 MSVC 2013 
.text:00401020 TlsCallback_0  
proc near   
; DATA XREF: .rdata:TlsCallbacks 
.text:00401020   
call     ds:GetTickCount 
.text:00401026   
push     eax 
.text:00401027   
call     my_srand 
.text:0040102C   
pop      ecx 
.text:0040102D   
retn     0Ch 
.text:0040102D TlsCallback_0  
endp 
... 
.rdata:004020C0 TlsCallbacks  
dd offset TlsCallback_0 ; DATA XREF: .rdata:TlsCallbacks_ptr 
... 
.rdata:00402118 TlsDirectory  
dd offset TlsStart 
.rdata:0040211C TlsEnd_ptr  
dd offset TlsEnd 
.rdata:00402120 TlsIndex_ptr  
dd offset TlsIndex 
.rdata:00402124 TlsCallbacks_ptr dd offset TlsCallbacks 
.rdata:00402128 TlsSizeOfZeroFill dd 0 
.rdata:0040212C TlsCharacteristics dd 300000h 
在解压过程中使用 TLS 回调函数，可起到混淆视听的作用。经验不足的分析人员通常会感到晕头转向，
无法在分析原始入口/OEP 之前就已经运行的回调函数。 
65.1.2  Linux 系统 
我们来看看在 GCC 下是如何定义线程本地的全局变量的： 
__thread uint32_t rand_state=1234; 
当然，这不是标准的 C/C++修饰符，而是 GCC 的专用修饰符。 
GS 段选择器也常用于 TLS 寻址，但是 Linux 的实现方法和 Windows 略有不同。 
指令清单 65.5  x86 下的优化 GCC 4.8.1 
.text:08048460 my_srand  
proc near 
.text:08048460 
.text:08048460 arg_0   
= dword ptr 4 
.text:08048460 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 65 章  线程本地存储 TLS 
657 
.text:08048460   
mov      eax, [esp+arg_0] 
.text:08048464   
mov      gs:0FFFFFFFCh, eax 
.text:0804846A   
retn 
.text:0804846A my_srand  
endp 
.text:08048470 my_rand  
proc near 
.text:08048470   
imul     eax, gs:0FFFFFFFCh, 19660Dh 
.text:0804847B   
add      eax, 3C6EF35Fh 
.text:08048480   
mov      gs:0FFFFFFFCh, eax 
.text:08048486   
and      eax, 7FFFh 
.text:0804848B   
retn 
.text:0804848B my_rand  
endp 
更多的信息可以查看参考书目 Dre13。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 6666 章
章    系
系统
统调
调用
用（
（ssyyssccaallll--ss）
）  
我们都知道，所有在操作系统中运行的进程可以分成两类：一类进程对具有硬件的全部访问权限，运
行于内核空间（kernel space）；另一类进程不能直接访问硬件地址，运行于用户空间（user space）。 
操作系统的内核以及常规的驱动程序都运行于内核空间。普通的应用程序通常运行于用户空间。 
具体来说，Linux 的内核运行于空间；而 Glibc（底层 API）则运行于空间。 
这两种空间的隔离措施对于操作系统的安全性至关重要。若没有隔离措施，所有程序都可以干扰其他
进程甚至破坏操作系统的内核。另一方面来看，即使实现了两种空间的隔离措施，一旦运行于内核空间的
驱动程序发生错误、或者是操作系统的内核组件存在问题，整个内核照样会崩溃甚至发生 BSOD（Black 
Screen of Death）的“蓝天白云”故障。 
虽然 x86 CPU 引入了特权等级的概念，将进程权限分为 ring0～ring3，但是 Linux 和 Windows 只使用
了其中的 2 个级别控制进程权限：ring0（内核空间）和 ring3（用户空间）。 
由操作系统提供的系统调用（syscall）构成了 ring0 和 ring 3 之间的访问机制。可以说，系统调用就是
操作系统为应用程序提供的应用编程接口 API。 
而在 Windows NT 环境下，系统调用表位于系统服务分配表 SSDT（System Service Dispatch Table）。 
计算机病毒以及 shellcode 大多都会利用系统调用。这是因为系统库函数的寻址过程十分麻烦，而直接
调用系统调用却相对简单。虽然系统调用的访问过程并不麻烦，但是由于系统调用本身属于底层 API，因
此直接使用系统调用的程序也不好写。另外需要注意的是：系统调用的总数由操作系统和系统版本两个因
素共同决定的。 
66.1  Linux  
Linux 程序通常通过 80 号中断/INT 80 调用系统调用。在调用系统调用时，程序应当通过 EAX 寄存器
指定被调用函数的编号，再使用其他寄存器声明系统调用的参数。 
指令清单 66.1  使用两次系统调用 syscall 的简单例子 
section .text 
global _start 
_start: 
        mov  
edx,len ; buffer len 
        mov  
ecx,msg ; buffer 
        mov  
ebx,1    ; file descriptor. 1 is for stdout 
        mov  
eax,4    ; syscall number. 4 is for sys_write 
        int  
0x80 
        mov  
eax,1    ; syscall number. 4 is for sys_exit 
        int  
0x80 
section .data 
msg    db  'Hello, world!',0xa 
len    equ $ - msg 
编译指令如下所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 66 章  系统调用（syscall-s） 
659 
nasm -f elf32 1.s 
ld 1.o 
完整的 Linux 系统调用列表可以参考：http://go.yurichev.com/17319。 
如需截获或追踪 Linux 系统调用的访问过程，可使用本书 71 章介绍的 strace 程序。 
66.2  Windows 
Windows 程序可通过 0x2e 号中断/int 0x2e、或 x86 专用指令 SYSENTER 访问系统调用。 
这里使用的中断数是 0x2e，或者采用 x86 下的特殊指令 SYSENTER。 
完整的 Windows 系统调用列表可以参考：http://go.yurichev.com/17320。 
进一步的阅读，可以参阅 Piotr Bania 编写的 Windows Syscall Shellcode 一书：http://go.yurichev. 
com/17321。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 6677 章
章    LLiinnuuxx  
67.1  位置无关的代码 
在分析 Linux 共享库文件（扩展名是 so）时，我们经常会遇到具有下述特征的指令代码： 
指令清单 67.1  x86 下的 libc-2.17.so 
.text:0012D5E3 __x86_get_pc_thunk_bx proc near   
; CODE XREF: sub_17350+3 
.text:0012D5E3   
; sub_173CC+4 ... 
.text:0012D5E3   
mov    ebx, [esp+0] 
.text:0012D5E6   
retn 
.text:0012D5E6 __x86_get_pc_thunk_bx endp 
... 
.text:000576C0 sub_576C0   
proc near   
; CODE XREF: tmpfile+73 
... 
.text:000576C0   
push    ebp 
.text:000576C1   
mov    ecx, large gs:0 
.text:000576C8   
push    edi 
.text:000576C9   
push    esi 
.text:000576CA   
push    ebx 
.text:000576CB   
call    __x86_get_pc_thunk_bx 
.text:000576D0   
add    ebx, 157930h 
.text:000576D6   
sub    esp, 9Ch 
... 
.text:000579F0   
lea    eax, (a__gen_tempname - 1AF000h)[ebx] ; "__gen_tempname" 
.text:000579F6   
mov   [esp+0ACh+var_A0], eax 
.text:000579FA   
lea   eax, (a__SysdepsPosix - 1AF000h)[ebx] ; "../sysdeps/posix/tempname.c" 
.text:00057A00   
mov    [esp+0ACh+var_A8], eax 
.text:00057A04   
lea    eax, (aInvalidKindIn_ - 1AF000h)[ebx] ; "! \"invalid  
     KIND in __gen_tempname\"" 