 **Xarx** opened **SPR-8343** and commented
What happens:  
I have a field denoted by `@Autowire`. There is one `@Primary` bean candidate
for the field, the other candidates are marked as `@Lazy`. However, even in
this case, when a primary candidate is available, all lazy candidates are
instantiated during the candidate lookup process.
What should happen:  
When a primary candidate exists, it should be chosen without instantiation of
other lazy-init candidates.
I tried to use the `@Lazy` annotation to mark beans that are not to be
instantiated unless realy used by the application. But this doesn't work
currently.
More details:  
Spring's (org.springframework.beans.factory.support)
DefaultListBeanFactory.doResolveDependency() internally calls
findAutowireCandidates(). findAutowireCandidates() instantiates all candidate
beans, but the determination whether there exists a primary candidate is done
only later in doResolveDependency() - which is too late. This determination
should be done earlier in findAutowireCandidates(), before the other
candidates are instantiated.
* * *
**Affects:** 3.0.5
**Issue Links:**
  * #12992 Lazy-init beans are unnecessarily created during the candidate determination process ( _ **"duplicates"**_ )
4 votes, 4 watchers