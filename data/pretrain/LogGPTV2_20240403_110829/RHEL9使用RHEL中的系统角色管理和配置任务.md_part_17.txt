    colocation 约束、资源顺序限制和资源票据限制。在为生产环境创建
    playbook 文件时，建议您用 vault 加密密码，如 [使用 Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    ``` literallayout
    - hosts: node1 node2
      vars:
        ha_cluster_cluster_name: my-new-cluster
        ha_cluster_hacluster_password: password
        # In order to use constraints, we need resources the constraints will apply
        # to.
        ha_cluster_resource_primitives:
          - id: xvm-fencing
            agent: 'stonith:fence_xvm'
            instance_attrs:
              - attrs:
                  - name: pcmk_host_list
                    value: node1 node2
          - id: dummy-1
            agent: 'ocf:pacemaker:Dummy'
          - id: dummy-2
            agent: 'ocf:pacemaker:Dummy'
          - id: dummy-3
            agent: 'ocf:pacemaker:Dummy'
          - id: dummy-4
            agent: 'ocf:pacemaker:Dummy'
          - id: dummy-5
            agent: 'ocf:pacemaker:Dummy'
          - id: dummy-6
            agent: 'ocf:pacemaker:Dummy'
        # location constraints
        ha_cluster_constraints_location:
          # resource ID and node name
          - resource:
              id: dummy-1
            node: node1
            options:
              - name: score
                value: 20
          # resource pattern and node name
          - resource:
              pattern: dummy-\d+
            node: node1
            options:
              - name: score
                value: 10
          # resource ID and rule
          - resource:
              id: dummy-2
            rule: '#uname eq node2 and date in_range 2022-01-01 to 2022-02-28'
          # resource pattern and rule
          - resource:
              pattern: dummy-\d+
            rule: node-type eq weekend and date-spec weekdays=6-7
        # colocation constraints
        ha_cluster_constraints_colocation:
          # simple constraint
          - resource_leader:
              id: dummy-3
            resource_follower:
              id: dummy-4
            options:
              - name: score
                value: -5
          # set constraint
          - resource_sets:
              - resource_ids:
                  - dummy-1
                  - dummy-2
              - resource_ids:
                  - dummy-5
                  - dummy-6
                options:
                  - name: sequential
                    value: "false"
            options:
              - name: score
                value: 20
        # order constraints
        ha_cluster_constraints_order:
          # simple constraint
          - resource_first:
              id: dummy-1
            resource_then:
              id: dummy-6
            options:
              - name: symmetrical
                value: "false"
          # set constraint
          - resource_sets:
              - resource_ids:
                  - dummy-1
                  - dummy-2
                options:
                  - name: require-all
                    value: "false"
                  - name: sequential
                    value: "false"
              - resource_ids:
                  - dummy-3
              - resource_ids:
                  - dummy-4
                  - dummy-5
                options:
                  - name: sequential
                    value: "false"
        # ticket constraints
        ha_cluster_constraints_ticket:
          # simple constraint
          - resource:
              id: dummy-1
            ticket: ticket1
            options:
              - name: loss-policy
                value: stop
          # set constraint
          - resource_sets:
              - resource_ids:
                  - dummy-3
                  - dummy-4
                  - dummy-5
            ticket: ticket2
            options:
              - name: loss-policy
                value: fence
      roles:
        - linux-system-roles.ha_cluster
    ```
3.  保存该文件。
4.  运行 playbook，指定在第 1 步中创建的 [*清单文件清单*]{.emphasis}
    的路径。
    ``` literallayout
    # ansible-playbook -i inventory new-cluster.yml
    ```
:::
:::
::: section
::: titlepage
# []{#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-http-ha-using-system-roles_configuring-ha-cluster-using-system-roles}在带有 HA 集群系统角色的高可用性集群中配置 Apache HTTP 服务器 {.title}
:::
这个过程使用 HA 集群系统角色在双节点 Red Hat Enterprise Linux High
Availability Add-On 集群中配置主动/被动 Apache HTTP 服务器。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的节点上安装了 `ansible-core`{.literal}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在群集成员节点上安装 `ansible-core`{.literal}。
    :::
-   您已在要运行 playbook 的系统上安装了 `rhel-system-roles`{.literal}
    软件包。
    有关 RHEL 系统角色以及如何应用它们的详情，请参阅 [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
-   作为群集成员运行 RHEL 的系统必须拥有对 RHEL 和 RHEL
    高可用性附加组件的有效订阅。
-   您的系统包括 Apache 需要的一个公共虚拟 IP 地址。
-   您的系统包括集群中节点的共享存储，使用
    iSCSI、光纤通道或其他共享网络块的设备。
-   您已配置了带有 ext4 文件系统的 LVM 逻辑卷，如在 [Pacemaker
    集群中配置带有 ext4 文件系统的 LVM
    卷](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_high_availability_clusters/assembly_configuring-active-passive-http-server-in-a-cluster-configuring-and-managing-high-availability-clusters#proc_configuring-lvm-volume-with-ext4-file-system-configuring-ha-http){.link}
    中所述。
-   您已配置了 Apache HTTP 服务器，如 [配置 Apache HTTP
    服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_high_availability_clusters/assembly_configuring-active-passive-http-server-in-a-cluster-configuring-and-managing-high-availability-clusters#proc_configuring-apache-http-web-server-configuring-ha-http){.link}
    中所述。
-   您的系统包含一个用于隔离群集节点的 APC 电源开关。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
HA Cluster System Role
替换指定节点上的任何现有集群配置。没有在角色中指定的任何设置都将丢失。
:::
::: orderedlist
**流程**
1.  创建指定集群中的节点的清单文件，如为 [HA Cluster System Role
    指定清单](#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#ha-system-role-inventory_configuring-ha-cluster-using-system-roles "为 HA 集群系统角色指定清单"){.link}
    中所述。
2.  创建一个 playbook 文件，如 `http-cluster.yml`{.literal}。
    以下示例 playbook 文件在主动/被动双节点 HA 集群中配置之前创建的
    Apache HTTP 服务器
    这个示例使用主机名为 `zapc.example.com`{.literal} 的 APC
    电源开关。如果集群不使用任何其他隔离代理，则您可以选择在定义
    `ha_cluster_fence_agent_packages`{.literal}
    变量时只列出集群所需的隔离代理。
    在为生产环境创建 playbook 文件时，建议您用 vault 加密密码，如 [使用
    Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    ``` literallayout
    - hosts: z1.example.com z2.example.com
      roles:
        - rhel-system-roles.ha_cluster
      vars:
        ha_cluster_hacluster_password: password
        ha_cluster_cluster_name: my_cluster
        ha_cluster_fence_agent_packages:
          - fence-agents-apc-snmp
        ha_cluster_resource_primitives:
          - id: myapc
            agent: stonith:fence_apc_snmp
            instance_attrs:
              - attrs:
                  - name: ipaddr
                    value: zapc.example.com
                  - name: pcmk_host_map
                    value: z1.example.com:1;z2.example.com:2
                  - name: login
                    value: apc
                  - name: passwd
                    value: apc
          - id: my_lvm
            agent: ocf:heartbeat:LVM-activate
            instance_attrs:
              - attrs:
                  - name: vgname
                    value: my_vg
                  - name: vg_access_mode
                    value: system_id
          - id: my_fs
            agent: Filesystem
            instance_attrs:
              - attrs:
                  - name: device
                    value: /dev/my_vg/my_lv
                  - name: directory
                    value: /var/www
                  - name: fstype
                    value: ext4
          - id: VirtualIP
            agent: IPaddr2
            instance_attrs:
              - attrs:
                  - name: ip
                    value: 198.51.100.3
                  - name: cidr_netmask
                    value: 24
          - id: Website
            agent: apache
            instance_attrs:
              - attrs:
                  - name: configfile
                    value: /etc/httpd/conf/httpd.conf
                  - name: statusurl
                    value: http://127.0.0.1/server-status
        ha_cluster_resource_groups:
          - id: apachegroup
            resource_ids:
              - my_lvm
              - my_fs
              - VirtualIP
              - Website
    ```
3.  保存该文件。
4.  运行 playbook，指定在第 1 步中创建的 [*清单文件清单*]{.emphasis}
    的路径。
    ``` literallayout
    # ansible-playbook -i inventory http-cluster.yml
    ```
:::
::: orderedlist
**验证步骤**
1.  从集群中的一个节点检查集群的状态。请注意，所有四个资源都运行在同一个节点上，`z1.example.com`{.literal}。
    如果发现配置的资源没有运行，则您可以运行
    `pcs resource debug-start resource`{.literal} 命令来测试资源配置。
    ``` literallayout
    [root@z1 ~]# pcs status
    Cluster name: my_cluster
    Last updated: Wed Jul 31 16:38:51 2013
    Last change: Wed Jul 31 16:42:14 2013 via crm_attribute on z1.example.com
    Stack: corosync
    Current DC: z2.example.com (2) - partition with quorum
    Version: 1.1.10-5.el7-9abe687
    2 Nodes configured
    6 Resources configured
    Online: [ z1.example.com z2.example.com ]
    Full list of resources:
     myapc  (stonith:fence_apc_snmp):       Started z1.example.com
     Resource Group: apachegroup
         my_lvm     (ocf::heartbeat:LVM):   Started z1.example.com
         my_fs      (ocf::heartbeat:Filesystem):    Started z1.example.com
         VirtualIP  (ocf::heartbeat:IPaddr2):       Started z1.example.com
         Website    (ocf::heartbeat:apache):        Started z1.example.com
    ```
2.  集群启动并运行后，您可以将浏览器指向定义为 `IPaddr2`{.literal}
    资源的 IP 地址，来查看示例显示，包含简单的单词\"Hello\"。
    ``` literallayout
    Hello
    ```
3.  要测试运行在 `z1.example.com`{.literal} 上的资源组是否可以切换到节点
    `z2.example.com`{.literal}，请将节点 `z1.example.com`{.literal} 置于
    `待机`{.literal} 模式，之后该节点将不能再托管资源。
    ``` literallayout
    [root@z1 ~]# pcs node standby z1.example.com
    ```
4.  将节点 `z1`{.literal} 置于 `待机`{.literal}
    模式后，从集群中的某个节点检查集群状态。请注意，资源现在都应运行在
    `z2`{.literal} 上。
    ``` literallayout
    [root@z1 ~]# pcs status
    Cluster name: my_cluster
    Last updated: Wed Jul 31 17:16:17 2013
    Last change: Wed Jul 31 17:18:34 2013 via crm_attribute on z1.example.com
    Stack: corosync
    Current DC: z2.example.com (2) - partition with quorum
    Version: 1.1.10-5.el7-9abe687
    2 Nodes configured
    6 Resources configured
    Node z1.example.com (1): standby
    Online: [ z2.example.com ]
    Full list of resources:
     myapc  (stonith:fence_apc_snmp):       Started z1.example.com
     Resource Group: apachegroup
         my_lvm     (ocf::heartbeat:LVM):   Started z2.example.com
         my_fs      (ocf::heartbeat:Filesystem):    Started z2.example.com
         VirtualIP  (ocf::heartbeat:IPaddr2):       Started z2.example.com
         Website    (ocf::heartbeat:apache):        Started z2.example.com
    ```
    定义的 IP 地址的网页仍会显示，而不中断。
5.  要从 `待机`{.literal} 模式中删除 `z1`{.literal}，请输入以下命令。
    ``` literallayout
    [root@z1 ~]# pcs node unstandby z1.example.com
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    从 `待机`{.literal}
    模式中删除节点本身不会导致资源切换到该节点。这将依赖于资源的
    `resource-stickiness`{.literal} 值。有关
    `resource-stickiness`{.literal} 元属性的详情，请参考
    [将资源配置到优先使用其的当前节点](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_high_availability_clusters/assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters#proc_setting-resource-stickiness-determining-which-node-a-resource-runs-on){.link}。
    :::
:::
:::
::: section
::: titlepage
# []{#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#_additional_resources_3}其他资源 {.title}
:::
::: itemizedlist
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel){.link}
-   与 `rhel-system-roles`{.literal} 软件包一起安装的文档在
    `/usr/share/ansible/roles/rhel-system-roles.logging/README.html`{.literal}
-   [RHEL 系统角色](https://access.redhat.com/node/3050101){.link}
    知识库文章
-   `ansible-playbook(1)`{.literal} 手册页。
:::
:::
:::