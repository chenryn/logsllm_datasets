# 【技术分享】关于HTTP安全头，你需要了解的一切

## 译文声明
本文为翻译文章，原文来自appcanary.com。译文仅供参考，具体内容及含义以原文为准。

- 翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至 [linwei#360.cn](mailto:PI:EMAIL) 或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

---

### 0x00 前言
大约28年前，一些物理学家为了简化实验数据的共享方法而发明了网络。这一创举被广泛认为是巨大的进步。然而，正如物理学中的许多发现最终都被武器化一样，超文本传输协议（HTTP）也面临着类似的安全挑战。本文将解释什么是HTTP安全头以及如何在Rails、Django、Express.js、Go、Nginx和Apache中实现这些安全头。

请注意，某些安全头最好在HTTP服务器层面配置，而其他一些则应在应用层设置。您可以使用Mozilla的[Observatory](https://observatory.mozilla.org/analyze.html?host=appcanary.com)来测试您的实现效果。

---

### 0x01 HTTP安全头概览
- X-XSS-Protection
- 内容安全策略 (CSP)
- HTTP严格传输安全 (HSTS)
- HTTP公钥固定 (HPKP)
- X-Frame-Options
- X-Content-Type-Options
- Referer-Policy
- Cookie选项

---

### 0x02 X-XSS-Protection
```plaintext
X-XSS-Protection: 0;
X-XSS-Protection: 1;
X-XSS-Protection: 1; mode=block
```

**为什么需要？**
跨站脚本攻击（XSS）是一种常见的攻击手段，攻击者通过注入恶意JavaScript代码来危害网站用户。X-XSS-Protection是一个Chrome和IE浏览器的特性，旨在防御反射型XSS攻击，即攻击者将恶意负载作为请求的一部分发送。

- `X-XSS-Protection: 0` 关闭该保护。
- `X-XSS-Protection: 1` 过滤来自请求的脚本，但仍然会将其传递给页面。
- `X-XSS-Protection: 1; mode=block` 当触发时，阻止整个页面的呈现。

**是否应该启用？**
是的，建议设置为 `X-XSS-Protection: 1; mode=block`。但是，有时过滤有问题的脚本可能会导致问题。更多信息请参见[这里](http://blog.innerht.ml/the-misunderstood-x-xss-protection/)。

**如何实现？**
参考MDN文档了解更多详细信息：
- [X-XSS-Protection – MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection)

---

### 0x03 内容安全策略 (CSP)
```plaintext
Content-Security-Policy:
```

**为什么需要？**
内容安全策略可以视为X-XSS-Protection的高级版本。尽管X-XSS-Protection能够阻止来自请求的脚本，但它无法防范所有类型的XSS攻击，例如存储在服务器上的恶意脚本或加载额外资源的恶意脚本。CSP提供了一种语言，定义浏览器可以从哪些来源加载资源。您可以非常详细地列出脚本、图片、字体和样式的白名单。此外，还可以使用哈希和特征来比较加载的资源。

**是否应该启用？**
是的。虽然它不能防止所有的XSS攻击，但它是缓解XSS攻击的重要措施，并且是深度防御的关键部分。实现CSP可能较为复杂。如果您继续阅读并检查[appcanary.com](https://appcanary.com/)返回的头部信息，您会发现我们尚未实现CSP。有一些Rails开发插件可以帮助您避免手动实现CSP，但仍能提供实际的安全效益。

**如何实现？**
编写CSP策略可能是一项挑战。参考以下链接获取所有可用指令的列表，并从Google的指南开始：
- [Content-Security-Policy – MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)
- [CSP Quick Reference Guide](https://content-security-policy.com/)
- [Google’s CSP Guide](https://csp.withgoogle.com/docs/index.html)

---

### 0x04 HTTP严格传输安全 (HSTS)
```plaintext
Strict-Transport-Security: max-age=
Strict-Transport-Security: max-age=; includeSubDomains
Strict-Transport-Security: max-age=; preload
```

**为什么需要？**
当我们希望与他人进行安全通信时，面临两个主要问题：隐私和认证。HTTPS解决了隐私问题，但认证问题依然存在（稍后详述，参见公钥固定）。HSTS头解决了元问题：如何确保通信方支持加密？

HSTS缓解了一种名为[sslstrip](https://moxie.org/software/sslstrip/)的攻击。假设你连接到一个由恶意攻击者控制的WIFI路由器。攻击者可以禁用你和访问网站之间的加密机制。即使网站只支持HTTPS，攻击者也可以通过中间人攻击使网站看起来像是工作在未加密的HTTP上。

通过让浏览器知道必须始终使用加密访问网站，除非看到HSTS头并且未过期，否则将无法访问未加密的网站，并且如果不经过HTTPS则会出错。

**是否应该启用？**
是的。您的应用应仅通过HTTPS访问，对吗？尝试通过旧的HTTP访问应重定向到安全站点，对吗？（提示：如果您想避免商业证书颁发机构的费用，可以使用[letsencrypt](https://letsencrypt.org/)。）

HSTS头的一个缺点是，它允许使用一种[聪明的技术](http://www.radicalresearch.co.uk/lab/hstssupercookies)来创建supercookies作为用户的指纹。作为一个网站运营者，您可能已经有一些方法跟踪用户，但仅使用HSTS而不使用supercookies是更好的选择。

**如何实现？**
有两个选项：
- `includeSubDomains`：HSTS适用于子域名。
- `preload`：谷歌维护了一个服务，在浏览器中硬编码您的网站为HTTPS访问。这样，用户甚至不必访问您的网站，他们的浏览器就已经知道应拒绝未加密的连接。预加载列表的选择很严格，因此只有当您确定所有子域名都永久支持HTTPS时才应启用它。

**了解更多**
- [RFC 6797](https://tools.ietf.org/html/rfc6797)
- [Strict-Transport-Security – MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)

---

### 0x05 HTTP公钥固定 (HPKP)
```plaintext
Public-Key-Pins: pin-sha256=; max-age=;
Public-Key-Pins: pin-sha256=; max-age=; includeSubDomains
Public-Key-Pins: pin-sha256=; max-age=; report-uri=
```

**为什么需要？**