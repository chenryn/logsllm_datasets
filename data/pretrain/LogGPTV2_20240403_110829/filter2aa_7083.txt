# Easy as GDB
Category: Reverse Engineering, 160 points
## Description
> The flag has got to be checked somewhere...
A binary file was attached.
## Solution
Let's run the file:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Easy_as_GDB]
└─$ ./brute
input the flag: test
checking solution...
Incorrect.
```
We need to enter a flag candidate, and the program will tell us if it's the correct flag.
Obviously this means that the program needs to somehow compare our flag to the correct one.
Let's check the decompiled output using Ghidra. The main function implementation:
```c
undefined4 main(undefined1 param_1)
{
  char *user_input;
  size_t encoded_flag_len;
  int iVar1;
  user_input = (char *)calloc(0x200,1);
  printf("input the flag: ");
  fgets(user_input,0x200,stdin);
  encoded_flag_len = strnlen(&g_encoded_flag,0x200);
  user_input = FUN_0001082b(user_input,encoded_flag_len);
  FUN_000107c2((int)user_input,encoded_flag_len,1);
  iVar1 = check_flag(user_input,encoded_flag_len);
  if (iVar1 == 1) {
    puts("Correct!");
  }
  else {
    puts("Incorrect.");
  }
  return 0;
}
```
We can see that it calls `check_flag` to check the user input against a precalculated encoded flag:
```c
undefined4 check_flag(char *user_input,uint encoded_flag_len)
{
  char *__dest;
  char *__dest_00;
  uint i;
  __dest = (char *)calloc(encoded_flag_len + 1,1);
  strncpy(__dest,user_input,encoded_flag_len);
  FUN_000107c2((int)__dest,encoded_flag_len,-1);
  __dest_00 = (char *)calloc(encoded_flag_len + 1,1);
  strncpy(__dest_00,&g_encoded_flag,encoded_flag_len);
  FUN_000107c2((int)__dest_00,encoded_flag_len,-1);
  puts("checking solution...");
  i = 0;
  while( true ) {
    if (encoded_flag_len  0:
        print("Found flag: {}".format(flag))
        gdb.execute("q")
```
This script implements a `Checkpoint`, which is a custom subclass of a breakpoint that performs some logic only after the breakpoint has been hit a certain amount of times (similar to a conditional breakpoint). We need this since in order to check character #i, we will need to ignore all the times that our breakpoint was hit for characters (0..(i-1)).
When the breakpoint is hit for the requested amount of times, we read `AL` and `DL` to understand if our guess was correct.
We also create an additional breakpoint at the following location to tell us if we got the flag correctly:
```assembly
        56555a71 50              PUSH       encoded_flag_len=>s_Correct!_56555b76            = "Correct!"
        56555a72 e8 a9 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
```
If this breakpoint is hit once, we know that we found the flag.
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Easy_as_GDB]
└─$ gdb -n -q -ex "set pagination off" -ex "source solve.py" ./brute
...
[Inferior 1 (process 4074) exited normally]
Breakpoint 1191 at 0x5655598e
input the flag: checking solution...
Incorrect.
[Inferior 1 (process 4075) exited normally]
Breakpoint 1192 at 0x5655598e
input the flag: checking solution...
Incorrect.
[Inferior 1 (process 4076) exited normally]
Breakpoint 1193 at 0x5655598e
input the flag: checking solution...
Incorrect.
[Inferior 1 (process 4077) exited normally]
Breakpoint 1194 at 0x5655598e
input the flag: checking solution...
Incorrect.
[Inferior 1 (process 4078) exited normally]
Breakpoint 1195 at 0x5655598e
input the flag: checking solution...
Incorrect.
[Inferior 1 (process 4079) exited normally]
Breakpoint 1196 at 0x5655598e
input the flag: checking solution...
Correct!
[Inferior 1 (process 4080) exited normally]
picoCTF{I_5D3_A11DA7_0db137a9}
Found flag: picoCTF{I_5D3_A11DA7_0db137a9}
```
The flag: `picoCTF{I_5D3_A11DA7_0db137a9}`