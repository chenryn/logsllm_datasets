[18] BCM4339: Single-Chip 5G WiFi IEEE 802.11ac MAC/Baseband/Radio
with Integrated Bluetooth 4.1 and FM Receiver, Cypress Semiconductor
Corporation, Mar. 2017, rev. *H.
[19] Cypress Semiconductor Corporation, “AN214852 - Collaborative Coex-
istence Interface Between Cypress-to-Cypress Solutions and Cypress-to-
third-party Chips,” https://www.cypress.com/ﬁle/298336/download, Mar.
2018.
[20] ——, “WICED Software,” https://www.cypress.com/products/wiced-
software, Cypress Semiconductor Corporation, 2021.
[21] E7mer, “owfuzz,” https://github.com/alipay/Owfuzz, Nov 2021.
[22] J. Friebertsh¨auser, F. Kosterhon, J. Classen, and M. Hollick, “Polypyus–
the ﬁrmware historian,” Workshop on Binary Analysis Research (BAR)
2021, Feb 2020.
[23] M. E. Garbelini, S. Chattopadhyay, V. Bedi, S. Sun, and E. Kurniawan,
“BrakTooth: Causing Havoc on Bluetooth Link Manager,” https://asset-
group.github.io/disclosures/braktooth/, Aug 2021.
[24] M. E. Garbelini, C. Wang, S. Chattopadhyay, S. Sumei, and E. Kurni-
awan, “SweynTooth: Unleashing Mayhem over Bluetooth Low Energy,”
in 2020 USENIX Annual Technical Conference (USENIX ATC 20).
USENIX Association, Jul. 2020, pp. 911–925.
[25] N. Golde, “There’s Life in the Old Dog Yet: Tearing New Holes
into Intel/iPhone Cellular Modems,” https://comsecuris.com/blog/posts/
theres life in the old dog yet tearing new holes into inteliphone
cellular modems/, Apr. 2018.
[26] X. Gong and P. Pi, “Exploiting Qualcomm WLAN and Modem Over
The Air,” in DEF CON 27, Aug 2019.
[27] M. Grassi and X. Chen, “Over the Air Baseband Exploit: Gaining
Remote Code Execution on 5G Smartphones,” BlackHat USA 2021,
Aug. 2021.
[28] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A remote
software-induced fault attack in JavaScript,” in International conference
on detection of intrusions and malware, and vulnerability assessment.
Springer, 2016, pp. 300–321.
[29] Guy, “Burned in Ashes: Baseband Fairy Tale Stories.” in REcon, Jun
2019.
[30] G. Hernandez and M. Muench, “Emulating Samsung’s Baseband for
Security Testing,” BlackHat USA 2020, Aug. 2020.
[31] IEEE, “IEEE 802.11i-2004: Amendment 6: Medium Access Control
(MAC) Security Enhancements,” 2004.
[32] Intel, “Intel Wireless-AC 9560 Product Brief,” https://www.intel.com/
content/dam/www/public/us/en/documents/product-briefs/dual-band-
wireless-ac-9560-brief.pdf, 2020.
[33] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping Bits in Memory without Accessing
Them: An Experimental Study of DRAM Disturbance Errors,” in
Proceeding of the 41st Annual International Symposium on Computer
Architecuture, ser. ISCA ’14.
IEEE Press, 2014, p. 361–372.
[34] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom,
“Spectre Attacks: Exploiting Speculative Execution,” in Proceedings of
the IEEE Symposium on Security and Privacy (S&P), 2019, pp. 1–19.
[35] D. Komaromy and L. Szabo, “How To Tame Your Unicorn - Explor-
ing and Exploiting Zero-Click Remote Interfaces of Modern Huawei
Smartphones,” BlackHat USA 2021, Aug. 2021.
[36] V. Kovah, “Finding New Bluetooth Low Energy Exploits via Reverse
Engineering Multiple Vendors’ Firmwares,” BlackHat USA 2020, Aug.
2020.
[37] D. Liebl and B. Schulz, “LTE and Bluetooth In-Device Coexistence
with WLAN. Application Note.” https://scdn.rohde-schwarz.com/ur/
pws/dl downloads/dl application/application notes/1ma255/1MA255
2e Coex LTE BT WLAN.pdf, Rhode & Schwarz.
[38] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, S. Mangard,
P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg, “Meltdown,”
arXiv.org e-Print archive, Jan. 2018.
[39] D. Maier, L. Seidel, and S. Park, “BaseSAFE: Baseband SAnitized
Fuzzing through Emulation,” The 13th ACM Conference on Security
and Privacy in Wireless and Mobile Networks (WiSec ’20), Jul. 2020.
[40] D. Mantz, J. Classen, M. Schulz, and M. Hollick, “InternalBlue -
Bluetooth Binary Patching and Experimentation Framework,” in The
17th Annual International Conference on Mobile Systems, Applications,
and Services (MobiSys ’19), Jun. 2019.
[41] Marco Grassi and Kira, “Exploring the MediaTek Baseband,” https://
www.offensivecon.org/speakers/2020/marco-grassi-kira.html, Feb 2020.
http://trolink.cn/UploadFiles/
“MT7632U Datasheet,”
[42] MediaTek,
Product/20160419152038 94108.pdf, Apr. 2016.
[43] G. Oligeri, S. Sciancalepore, S. Raponi, and R. Di Pietro, “Broken-
Strokes: On the (in)Security of Wireless Keyboards,” The 13th ACM
Conference on Security and Privacy in Wireless and Mobile Networks
(WiSec ’20), 2020.
[44] Panasonic, “PAN9026 Wi-Fi/BT Module with Marvell 88W8977
WLAN 2.4/5 GHz
and Bluetooth single-chip solution inside
(Rev 1.2),” https://media.digikey.com/pdf/Data%20Sheets/Panasonic%
20Semiconductors%20ICs%20PDFs/PAN9026 Series Rev1.2.pdf, Jan.
2020.
[45] Qualcomm, “QCA6234 Integrated Dual-Band 2x2 80211n + Blue-
tooth 4.0,” https://developer.qualcomm.com/qﬁle/28871/lm80-p0598-
12 qca6234 datasheet.pdf, 2016.
[46] J. Ruge, “CVE 2019-11516 PoC,” https://github.com/seemoo-lab/
frankenstein/blob/master/projects/CYW20735B1/patch/CVE 2019
11516.c, Sep 2019.
[47] ——, “CVE-2020-0022 an Android 8.0-9.0 Bluetooth Zero-Click RCE
– BlueFrag,” https://insinuator.net/2020/04/cve-2020-0022-an-android-
8-0-9-0-bluetooth-zero-click-rce-bluefrag/, Feb. 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
141242
[48] J. Ruge, J. Classen, F. Gringoli, and M. Hollick, “Frankenstein: Ad-
vanced Wireless Fuzzing to Exploit New Bluetooth Escalation Targets,”
in 29th USENIX Security Symposium (USENIX Security 19). USENIX
Association, Aug. 2020.
[49] S. R¨ottger, https://security.googleblog.com/2021/03/a-spectre-proof-of-
concept-for-spectre.html, Aug 2021.
[50] M. Schulz, “Teaching Your Wireless Card New Tricks: Smartphone
Performance and Security Enhancements Through Wi-Fi Firmware
Modiﬁcations,” Ph.D. dissertation, Technische Universit¨at, 2018.
[51] M. Schulz, D. Wegemer, and M. Hollick, “Nexmon: The C-based
Firmware Patching Framework,” https://nexmon.org, 2017.
[52] Silicon Labs, “AN1128: Bluetooth Coexistence with Wi-Fi, Rev. 1.6,”
https://www.silabs.com/documents/public/application-notes/an1128-
bluetooth-coexistence-with-wiﬁ.pdf, Dec. 2020.
[53] ——, “Wi-Fi Coexistence with Other 2.4 GHz Radio Protocols,”
https://docs.silabs.com/wiﬁ/wf200/content-source/application-note/wiﬁ-
coexistence, Jan. 2021.
[54] D. X. Song, D. A. Wagner, and X. Tian, “Timing Analysis of Keystrokes
and Timing Attacks on SSH,” in USENIX Security Symposium, 2001.
[55] M. Sp¨ork, J. Classen, C. A. Boano, M. Hollick, and K. R¨omer,
“Improving the Reliability of Bluetooth Low Energy Connections.” in
EWSN, 2020, pp. 144–155.
[56] M. Stute, S. Narain, A. Mariotto, A. Heinrich, D. Kreitschmann,
G. Noubir, and M. Hollick, “A Billion Open Interfaces for Eve and
Mallory: MitM, DoS, and Tracking Attacks on iOS and macOS Through
Apple Wireless Direct Link,” in 28th USENIX Security Symposium
(USENIX Security 19). Santa Clara, CA: USENIX Association, Aug.
2019, pp. 37–54.
[57] Texas Instruments, “CC3235S and CC3235SF SimpleLink Wi-Fi, Dual-
Band, Single-Chip Solution Datasheet (Rev. B),” http://www.ti.com/lit/
ds/symlink/cc3235s.pdf, Jan. 2020.
[58] VinayakS 26, “Overview of SECI,” https://community.cypress.com/
community/wiced-wiﬁ/wiced-wiﬁ-forums/blog/2018/04/03/overview-
of-seci, Cypress Semiconductor Corporation, Apr. 2018.
[59] ——,
“Coexistence Throughput Test,” https://community.cypress.
com/community/wiced-wiﬁ/wiced-wiﬁ-forums/blog/2019/03/29/
coexistence-throughput-test, Cypress
Mar. 2019.
Semiconductor Corporation,
[60] Y. Wang, “Dive into Apple IO80211FamilyV2,” BlackHat USA 2020,
Aug. 2020.
[61] J. Wu, R. Wu, D. Antonioli, M. Payer, N. O. Tippenhauer,
D. Xu, D. J. Tian, and A. Bianchi, “LightBlue: Automatic Proﬁle-
Aware Debloating of Bluetooth Stacks,” in 30th USENIX Security
Symposium (USENIX Security 21). USENIX Association, Aug. 2021,
pp. 339–356. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity21/presentation/wu-jianliang
[62] Y. Xiao and Y. Pan, Overview of IEEE 802.15.2: Coexistence of
Wireless Personal Area Networks with Other Unlicensed Frequency
Bands Operating Wireless Devices.
IEEE, 2009, pp. 135–150.
[63] J. Zhu, A. Waltho, X. Yang, and X. Guo, “Multi-Radio Coexistence:
Challenges and Opportunities,” in 2007 16th International Conference
on Computer Communications and Networks, 2007, pp. 358–364.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
151243
A. APPENDIX
In this appendix, we provide additional information about
the Broadcom and Cypress vulnerabilities presented in this
paper. The details in this appendix include vendor-speciﬁc
address ranges to leak information or execute code (see Sec-
tion A-A) as well as SECI protocol details (see Section A-B).
Finally, we provide information about how we analyzed and
removed the Bluetooth write RAM mitigation on various
ﬁrmware (see Section A-C).
A. WLAN RAM Sharing
The so-called “WLAN RAM Sharing”, previously discussed
in Section V-C, enables code execution. The address range of
this mapping is shown in Table V. Wi-Fi RAM is mapped into
Bluetooth starting at wlan_mem_base.
Reading RAM: In the reading direction, the full memory
region is not mapped all the time. When just reading in the
memory area starting at wlan_mem_base, it tends to show
some repeating chunks and a lot of zero padding. If a block
is currently not ready but read by Bluetooth, this sometimes
crashes the Bluetooth ﬁrmware. The exact behavior of this
memory region depends on the chip. While we are able to
read valid Wi-Fi memory chunks on some devices, reading
access is not always stable.
Writing RAM: The underlying hardware abstracts writing
to shared RAM much more transparently. Without having to
deal with any special control registers, it is possible to write to
the memory-mapped area via Bluetooth and the written values
will immediately appear in the Wi-Fi RAM.
When writing to the Bluetooth chip addresses starting from
0x680000, these values appear in the Wi-Fi memory dump
starting from 0x10000,
the wlan_mem area. The debug
memory dump is relative to the Wi-Fi chip’s RAM address, it
is not an absolute address. The memory dump has an offset
of 0x170000, meaning that Bluetooth can control the Wi-Fi
area, mapped at 0x180000.
Code Execution Examples: On the BCM4377B3 chip of a
MacBook 2020 model on macOS 10.15.7, the latest version of
Catalina, code written to the Bluetooth address 0x68cbfc
is executed by Wi-Fi. The Wi-Fi ﬁrmware running on a
BCM43475B1 chip with the Android 10 patch level of March
2020 is exploitable by writing an arbitrary value to the
address 0x681024 via Bluetooth. These are ﬁrmware version
dependent examples, and generally, a crash caused by writing
to this region indicates exploitability on a chip.
Kernel Panics: Writing random bytes to the shared memory
on the BCM43475B1 chip in a Samsung Galaxy S10/S20
causes various crashes, including a kernel panic due to the
locked PCIe Wi-Fi communication. We can produce kernel
panics on Android 9 with a patch level of May 2019. On a
more recent March 2020 Android 10 release, less severe issues
within the driver occur. The phone is no longer able to transmit
packets without a manual reboot. At least, the kernel does not
panic and the device does not reboot unintended.
The slightly older BCM4347B0 chip in Samsung Galaxy
S8 devices on Android 9 reacts similarly including kernel
panics. The kernel panics are due to multiple failed attempts of
trying to power up Wi-Fi. However, most of the time, only the
Wi-Fi core crashes, and sometimes also wpa_supplicant,
which manages Wi-Fi connections on Android. Note that the
Samsung Galaxy S8 still receives quarterly security updates
but is not supported beyond Android 9.
On iOS, the majority of kernel panics occurs due to Wi-Fi
driver hangs. The most unstable Wi-Fi implementation is on
the iPhone 6, which panics immediately on iOS 12.5.1 when
writing random bytes to the shared memory. On an iPhone 8
on iOS 13, we could create malformed PCIe IOMMU requests.
Hardware components like the IOMMU are model-speciﬁc,
and hangs in the kernel can be ﬁxed in software. We could
not reproduce kernel panics on the iPhone 11 on iOS 14.
B. SECI Protocol Internals
In the following, we detail SECI protocol
reverse-
engineering results required for reproducing our ﬁndings.
More speciﬁcally, we detail how SECI is mapped and accessed
within the Bluetooth and Wi-Fi ﬁrmware.
Bluetooth Hardware Mapping: Symbols belonging to the
CYW20719 Bluetooth module can be extracted from WICED
Studio 6.2 [20]. The most important mappings extracted from
these symbols are listed in Table VI and explained in the
following.
For each packet sent by Wi-Fi, Bluetooth receives a 64 bit
value in gci_input. In the opposite direction, Bluetooth
sends information to Wi-Fi via gci_output. The values
written to gci_output and received via gci_input sim-
ilar to those that are visible when intercepting the protocol
with a logic analyzer. Thus, instead of wiretapping the SECI
physical layer, an attacker can also intercept the coexistence
registers and obtain the same information.
Wi-Fi Hardware Mapping: Broadcom Wi-Fi ﬁrmware is
well-documented within the Nexmon binary patching frame-
work, which is speciﬁcally designed for those chips [50].
Moreover, source code releases for some devices exist, such
as the one by Asus for the RT-AC86U router [7]. Based on this
knowledge, we analyze the Wi-Fi coexistence implementation.
The main Wi-Fi ﬁrmware running on an ARM core maps
the SECI registers in the same order as in Bluetooth in a
struct called chipcregs_t. The ﬁrmware uses the macro
NOTIFY_BT_CHL to notify Wi-Fi about its current 2.4 GHz
TABLE V: Shared RAM mapping.
Bluetooth Symbol
wlan_mem_base
wlan_mem area
Bluetooth
0x680000
0x680000–...
Wi-Fi
0x180000
0x180000–...
Wi-Fi Region
shared_base
wlan_mem area
TABLE VI: Coexistence register mapping in Bluetooth.
Address
0x650000–0x6507ff
0x650060
0x650160
Name
–
gci_input
gci_output
Function
GCI region.
Value received from Wi-Fi.
Value sent to Wi-Fi.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
161244
channel and applies the channel bandwidth with the macro
NOTIFY_BT_BW_20. These values are combined into one
byte, with the ﬁrst half representing Wi-Fi channels 1–11 or 0
for no channel, and the second half being 2 or 4 for 20 MHz
or 40 MHz. Writing these values then triggers the process of
channel blocklisting in the Bluetooth ﬁrmware.
In addition to the ﬁrmware running on the ARM core, Wi-Fi
has a high-performance D11 core. This proprietary core uses
a special assembly language. It implements a state machine
parsing all timing-critical low-level information. The D11 core
maps the Bluetooth gci_output register as input to 0xaeb
and 0xaec. It polls them every two Bluetooth clock cycles,
with one cycle being deﬁned as 0.625 ms [11, p. 2318]. Thus,
this is the maximum time resolution we can observe via Wi-Fi.
C. Write RAM Mitigation
The base ﬁrmware in the ROM is temporarily patched
in the RAM by the operating system’s driver during chip
initialization. The operating system can issue a Write_RAM
Host Controller Interface (HCI) command, which is required to
install patches. The InternalBlue experimentation framework
features the same functionality [40]. Using InternalBlue, we
can directly write to the Bluetooth RAM that jumps to the
Wi-Fi RAM. We require this test setup—we responsibly
disclose all our bugs and, thus, do not have a working over-
the-air exploit at the time of testing.
Bluetooth
daemon→Bluetooth chip→Wi-Fi, Broadcom disabled the
Write_RAM after ﬁrmware initialization. We can remove
this patch to conﬁrm that
the actual privilege escalation
remains unpatched. HCI commands are handled by the
function
bthci_cmd_GetDefaultCommandHandler.
Since ROM patches are limited and all vendors have
individual HCI patches for their proprietary features, the HCI
command handler ﬁrst checks for a variable function table
in RAM. Binary difﬁng can automatically locate the HCI
command handler. The vendor-speciﬁc command handlers
escalation
releasing
After
path
our
differ a lot, however, they typically use similar assembler
instructions for skipping the Write_RAM command. These
can be replaced by a non-existent handler.
On iOS, we ﬁrst noticed Write_RAM being disabled on
iOS 13.5, but it was still present on iOS 13.3. In iOS 13.5, the
patches still ship as separate .hcd ﬁles, which is the common
Broadcom patch format. Since iOS 13.6 and also in the current
iOS 14.3, the .hcd ﬁles are embedded into the BlueTool
binary, which applies these patches to the chip. Writing to
Wi-Fi RAM via Bluetooth is still possible on iOS 14.3 after
removing the Write_RAM patch.
Samsung also uses the .hcd format. Starting on the Android
10 March 2020 and Android 9 June 2020 release or slightly
earlier, they removed the Write_RAM and Read_RAM han-
dlers. The Android 11 January 2021 release for the Samsung
Galaxy S20 5G integrates further validations. The BRCMcfgD
patch conﬁguration region, which can still be changed, en-
forces checks on the patch region. Thus, we manually craft a
BRCMcfgD-based patch, which conﬁrms that the shared RAM
region still is present.
macOS removed Write_RAM the slowest. On all Catalina
versions, as tested on three different chips, Write_RAM still
works. This handler was removed in the Big Sur release.
Patches are stored in a slightly different .hex format on the
read-only /System volume. Changing ﬁles on this volume
is possible but requires disabling System Integrity Protection
(SIP), which should only be done on testing devices not
containing any user data.
For the Raspberry Pi, which is the most popular platform
on Linux, the situation is even worse. The patch slots for this
speciﬁc chip are exhausted. Patches are typically not shipped
for Raspberry Pis.
The minimal Write_RAM patch against coexistence es-
calation only covers operating system to chip attacks. It
slows down security testing and patch conﬁrmation outside
of Broadcom. Over-the-air attackers can still escalate their
privileges from Bluetooth to Wi-Fi.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
171245