## 安装过程这个"最小化"环境的安装过程也比较简单，大约只需要你半个小时不到的时间就能搭建完成。我在 GitHub上为本专栏开了一个项目：[http_study](https://github.com/chronolaw/http_study.git)，可以直接用"gitclone"下载，或者去 Release页面，下载打好的[压缩包](https://github.com/chronolaw/http_study/releases)。我使用的操作环境是 Windows 10，如果你用的是 Mac 或者 Linux，可以用VirtualBox 等虚拟机软件安装一个 Windows 虚拟机，再在里面操作。首先你要获取**最新**的 http_study 项目源码，假设 clone或解压的目录是"D:\\http_study"，操作完成后大概是下图这个样子。![](Images/326a1aa99a48b5f43ca1fb7f9fc1cc33.png){savepage-src="https://static001.geekbang.org/resource/image/86/ee/862511b8ef87f78218631d832927bcee.png"}Chrome 和 WireShark的安装比较简单，一路按"下一步"就可以了。版本方面使用最新的就好，我的版本可能不是最新的，Chrome是 73，WireShark 是 3.0.0。Windows 10 自带Telnet，不需要安装，但默认是不启用的，需要你稍微设置一下。打开 Windows 的设置窗口，搜索"Telnet"，就会找到"启用或关闭 Windows功能"，在这个窗口里找到"Telnet 客户端"，打上对钩就可以了，可以参考截图。![](Images/d4e6ea4f33babf8a20cc63d491596096.png){savepage-src="https://static001.geekbang.org/resource/image/1a/47/1af035861c4fd33cb42005eaa1f5f247.png"}接下来我们要安装OpenResty，去它的[官网](http://openresty.org)，点击左边栏的"Download"，进入下载页面，下载适合你系统的版本（这里我下载的是64 位的 1.15.8.1，包的名字是"openresty-1.15.8.1-win64.zip"）。![](Images/c0e1e06cc1bd396f9c48d26f2fa2e621.png){savepage-src="https://static001.geekbang.org/resource/image/ee/0a/ee7016fecd79919de550677af32f740a.png"}然后要注意，你必须把 OpenResty的压缩包解压到刚才的"D:\\http_study"目录里，并改名为"openresty"。![](Images/a6fd9879ec38899a125beabd73670e52.png){savepage-src="https://static001.geekbang.org/resource/image/5a/b5/5acb89c96041f91bbc747b7e909fd4b5.png"}安装工作马上就要完成了，为了能够让浏览器能够使用 DNS域名访问我们的实验环境，还要改一下本机的 hosts文件，位置在"C:\\WINDOWS\\system32\\drivers\\etc"，在里面添加三行本机 IP地址到测试域名的映射，你也可以参考 GitHub 项目里的 hosts文件，这就相当于在一台物理实机上"托管"了三个虚拟主机。    127.0.0.1       www.chrono.com127.0.0.1       www.metroid.net127.0.0.1       origin.io注意修改 hosts文件需要管理员权限，直接用记事本编辑是不行的，可以切换管理员身份，或者改用其他高级编辑器，比如Notepad++，而且改之前最好做个备份。到这里，我们的安装工作就完成了！之后你就可以用 Wireshark、Chrome、Telnet在这个环境里随意"折腾"，弄坏了也不要紧，只要把目录删除，再来一遍操作就能复原。
## 测试验证实验环境搭建完了，但还需要把它运行起来，做一个简单的测试验证，看是否运转正常。首先我们要启动 Web 服务器，也就是 OpenResty。在 http_study 的"www"目录下有四个批处理文件，分别是：![](Images/68bf016436152563ef0f32c30bb8b3e7.png){savepage-src="https://static001.geekbang.org/resource/image/e5/da/e5d35bb94c46bfaaf8ce5c143b2bb2da.png"}-   start：启动 OpenResty 服务器；-   stop：停止 OpenResty 服务器；-   reload：重启 OpenResty 服务器；-   list：列出已经启动的 OpenResty 服务器进程。使用鼠标双击"start"批处理文件，就会启动 OpenResty服务器在后台运行，这个过程可能会有 Windows防火墙的警告，选择"允许"即可。运行后，鼠标双击"list"可以查看 OpenResty 是否已经正常启动，应该会有两个nginx.exe 的后台进程，大概是下图的样子。![](Images/17765b2febaed73d81828076564488f0.png){savepage-src="https://static001.geekbang.org/resource/image/db/1d/dba34b8a38e98bef92289315db29ee1d.png"}有了 Web 服务器后，接下来我们要运行 Wireshark，开始抓包。因为我们的实验环境运行在本机的 127.0.0.1 上，也就是loopback"环回"地址。所以，在 Wireshark 里要选择"Npcap loopbackAdapter"，过滤器选择"HTTP TCP port(80)"，即只抓取 HTTP相关的数据包。鼠标双击开始界面里的"Npcap loopbackAdapter"即可开始抓取本机上的网络数据。![](Images/c11ebccc1156a8eb507384aed5803bdf.png){savepage-src="https://static001.geekbang.org/resource/image/12/c4/128d8a5ed9cdd666dbfa4e17fd39afc4.png"}然后我们打开 Chrome，在地址栏输入"/"，访问刚才启动的OpenResty 服务器，就会看到一个简单的欢迎界面，如下图所示。![](Images/921a868b245f3e03d2a5964607f605ae.png){savepage-src="https://static001.geekbang.org/resource/image/d7/88/d7f12d4d480d7100cd9804d2b16b8a88.png"}这时再回头去看Wireshark，应该会显示已经抓到了一些数据，就可以用鼠标点击工具栏里的"停止捕获"按钮告诉Wireshark"到此为止"，不再继续抓包。![](Images/ee9c9a92582a2495ced41c90f6d50e73.png){savepage-src="https://static001.geekbang.org/resource/image/f7/79/f7d05a3939d81742f18d2da7a1883179.png"}至于这些数据是什么，表示什么含义，我会在下一讲再详细介绍。如果你能够在自己的电脑上走到这一步，就说明"最小化"的实验环境已经搭建成功了，不要忘了实验结束后运行批处理"stop"停止OpenResty 服务器。
## 小结这次我们学习了如何在自己的电脑上搭建 HTTP实验环境，在这里简单小结一下今天的内容。1.  [现实的网络环境太复杂，有很多干扰因素，搭建"最小化"的环境可以快速抓住重点，掌握    HTTP 的本质；]{.orange}2.  [我们选择 Wireshark 作为抓包工具，捕获在 TCP/IP    协议栈中传输的所有流量；]{.orange}3.  [我们选择 Chrome 或 Firefox 浏览器作为 HTTP 协议中的 user    agent；]{.orange}4.  [我们选择 OpenResty 作为 Web 服务器，它是一个 Nginx    的"强化包"，功能非常丰富；]{.orange}5.  [Telnet 是一个命令行工具，可用来登录主机模拟浏览器操作；]{.orange}6.  [在 GitHub 上可以下载到本专栏的专用项目源码，只要把 OpenResty    解压到里面即可完成实验环境的搭建。]{.orange}
## 课下作业1\. 按照今天所学的，在你自己的电脑上搭建出这个 HTTP 实验环境并测试验证。2\. 由于篇幅所限，我无法详细介绍 Wireshark，你有时间可以再上网搜索Wireshark 相关的资料，了解更多的用法。欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。![unpreview](Images/8d3e8386250985af55b0411e81cfbe6b.png){savepage-src="https://static001.geekbang.org/resource/image/03/dd/03727c2a64cbc628ec18cf39a6a526dd.png"}![unpreview](Images/4913a489805db29b38aefa585223c013.png){savepage-src="https://static001.geekbang.org/resource/image/56/63/56d766fc04654a31536f554b8bde7b63.jpg"}
# 08 \| 键入网址再按下回车，后面究竟发生了什么？经过上一讲的学习，你是否已经在自己的电脑上搭建好了"最小化"的 HTTP实验环境呢？我相信你的答案一定是"Yes"，那么，让我们立刻开始"螺蛳壳里做道场"，在这个实验环境里看一下HTTP 协议工作的全过程。
## 使用 IP 地址访问 Web 服务器首先我们运行 www 目录下的"start"批处理程序，启动本机的 OpenResty服务器，启动后可以用"list"批处理确认服务是否正常运行。然后我们打开 Wireshark，选择"HTTP TCP port(80)"过滤器，再鼠标双击"Npcaploopback Adapter"，开始抓取本机 127.0.0.1 地址上的网络数据。第三步，在 Chrome浏览器的地址栏里输入""，再按下回车键，等欢迎页面显示出来后Wireshark 里就会有捕获的数据包，如下图所示。![](Images/6169985e7eab637b1da53644b523de60.png){savepage-src="https://static001.geekbang.org/resource/image/86/b0/86e3c635e9a9ab0abd523c01fc181cb0.png"}如果你还没有搭好实验环境，或者捕获与本文里的不一致也没关系。我把这次捕获的数据存成了pcap 包，文件名是"08-1"，放到了 GitHub 上，你可以下载到本地后再用Wireshark 打开，完全精确"重放"刚才的 HTTP 传输过程。
## 抓包分析在 Wireshark 里你可以看到，这次一共抓到了 11个包（这里用了滤包功能，滤掉了 3 个包，原本是 14 个包），耗时 0.65秒，下面我们就来一起分析一下\"键入网址按下回车\"后数据传输的全过程。``{=html}通过前面"破冰篇"的讲解，你应该知道 HTTP 协议是运行在 TCP/IP基础上的，依靠 TCP/IP 协议来实现数据的可靠传输。所以浏览器要用 HTTP协议收发数据，[首先要做的就是建立 TCP 连接]{.orange}。因为我们在地址栏里直接输入了 IP 地址"127.0.0.1"，而 Web服务器的默认端口是 80，所以浏览器就要依照 TCP协议的规范，使用"三次握手"建立与 Web 服务器的连接。对应到 Wireshark 里，就是最开始的三个抓包，浏览器使用的端口是52085，服务器使用的端口是 80，经过 SYN、SYN/ACK、ACK的三个包之后，浏览器与服务器的 TCP 连接就建立起来了。有了可靠的 TCP 连接通道后，HTTP 协议就可以开始工作了。于是，浏览器按照HTTP 协议规定的格式，通过 TCP 发送了一个"GET / HTTP/1.1"请求报文，也就是Wireshark里的第四个包。至于包的内容具体是什么现在先不用管，我们下一讲再说。随后，Web 服务器回复了第五个包，在 TCP协议层面确认："刚才的报文我已经收到了"，不过这个 TCP 包 HTTP协议是看不见的。Web 服务器收到报文后在内部就要处理这个请求。同样也是依据 HTTP协议的规定，解析报文，看看浏览器发送这个请求想要干什么。它一看，原来是要求获取根目录下的默认文件，好吧，那我就从磁盘上把那个文件全读出来，再拼成符合HTTP 格式的报文，发回去吧。这就是 Wireshark 里的第六个包"HTTP/1.1 200OK"，底层走的还是 TCP 协议。同样的，浏览器也要给服务器回复一个 TCP 的 ACK确认，"你的响应报文收到了，多谢。"，即第七个包。这时浏览器就收到了响应数据，但里面是什么呢？所以也要解析报文。一看，服务器给我的是个HTML 文件，好，那我就调用排版引擎、JavaScript引擎等等处理一下，然后在浏览器窗口里展现出了欢迎页面。这之后还有两个来回，共四个包，重复了相同的步骤。这是浏览器自动请求了作为网站图标的"favicon.ico"文件，与我们输入的网址无关。但因为我们的实验环境没有这个文件，所以服务器在硬盘上找不到，返回了一个"404Not Found"。至此，"键入网址再按下回车"的全过程就结束了。我为这个过程画了一个交互图，你可以对照着看一下。不过要提醒你，图里 TCP关闭连接的"四次挥手"在抓包里没有出现，这是因为 HTTP/1.1长连接特性，默认不会立即关闭连接。![](Images/51e338d1f93cdff319abf1683076a8cd.png){savepage-src="https://static001.geekbang.org/resource/image/8a/19/8a5bddd3d8046daf7032c7d60a3d1a19.png"}再简要叙述一下这次最简单的浏览器 HTTP 请求过程：1.  浏览器从地址栏的输入中获得服务器的 IP 地址和端口号；2.  浏览器用 TCP 的三次握手与服务器建立连接；3.  浏览器向服务器发送拼好的报文；4.  服务器收到报文后处理请求，同样拼好报文再发给浏览器；5.  浏览器解析报文，渲染输出页面。
## 使用域名访问 Web 服务器刚才我们是在浏览器地址栏里直接输入 IP地址，但绝大多数情况下，我们是不知道服务器 IP地址的，使用的是域名，那么改用域名后这个过程会有什么不同吗？还是实际动手试一下吧，把地址栏的输入改成"[http://www.Chrono（加微信：642945106发送"赠送"领取赠送精品课程发数字"2"获取众筹列表。）.com](http://www.Chrono（加微信：642945106%20发送“赠送”领取赠送精品课程%20发数字“2”获取众筹列表。）.com)"，重复Wireshark抓包过程，你会发现，好像没有什么不同，浏览器上同样显示出了欢迎界面，抓到的包也同样是11 个：先是三次握手，然后是两次 HTTP 传输。这里就出现了一个问题：浏览器是如何从网址里知道"www.Chrono（加微信：642945106发送"赠送"领取赠送精品课程 发数字"2"获取众筹列表。）.com"的 IP地址就是"127.0.0.1"的呢？还记得我们之前讲过的 DNS知识吗？浏览器看到了网址里的"www.Chrono（加微信：642945106发送"赠送"领取赠送精品课程发数字"2"获取众筹列表。）.com"，发现它不是数字形式的 IP地址，那就肯定是域名了，于是就会发起域名解析动作，通过访问一系列的域名解析服务器，试图把这个域名翻译成TCP/IP 协议里的 IP 地址。不过因为域名解析的全过程实在是太复杂了，如果每一个域名都要大费周折地去网上查一下，那我们上网肯定会慢得受不了。所以，在域名解析的过程中会有多级的缓存，浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件hosts，也就是上一讲中我们修改的"C:\\WINDOWS\\system32\\drivers\\etc\\hosts"。刚好，里面有一行映射关系"127.0.0.1 www.Chrono（加微信：642945106发送"赠送"领取赠送精品课程发数字"2"获取众筹列表。）.com"，于是浏览器就知道了域名对应的 IP地址，就可以愉快地建立 TCP 连接发送 HTTP 请求了。我把这个过程也画出了一张图，但省略了 TCP/IP协议的交互部分，里面的浏览器多出了一个访问 hosts文件的动作，也就是本机的 DNS 解析。![](Images/31d1851fdc6b5856fdb0f4466dd3a111.png){savepage-src="https://static001.geekbang.org/resource/image/57/1b/5717c967b8d46e5ba438e1d8ed605a1b.png"}