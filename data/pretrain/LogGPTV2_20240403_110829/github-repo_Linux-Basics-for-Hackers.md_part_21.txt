当数据包在互联网上传播时，任何截获数据包的人都可以看到是谁发送了数据包，它到过哪里，它要去哪里。这是网站可以告诉您到达目的地并自动登录的一种方式，也是有人可以跟踪您在互联网上的位置的方式。
要查看数据包在您和目的地之间的跳转情况，可以使用**traceroute**命令，如下所示。只需输入**traceroute**和目标IP地址或域，该命令将向目标发送数据包并跟踪这些数据包的路由。
kali \>traceroute google.com
traceroute to google.com (172.217.1.78), 30 hops max, 60 bytes packets
1 192.168.1.1 (192.168.1.1) 4.152 ms 3.834 ms 32.964 ms
2 10.0.0.1 (10.0.0.1) 5.797 ms 6.995 ms 7.679 ms
3 96.120.96.45 (96.120.96.45) 27.952 ms 30.377 ms 32.964 ms
­­snip­­
18 lgal15s44­in­f14.le100.net (172.217.1.78) 94.666 ms 42.990 ms 41.564 ms
如你所见，ww.google.com与我的互联网距离是18跳。您的结果可能会不同，因为您的请求来自不同的位置，而且谷歌在全球有许多服务器。此外，数据包在互联网上并不总是采用相同的路由，因此您可能会将另一个信息包从您的地址发送到相同的站点，并接收不同的路由。让我们看看如何用Tor网络来掩饰这一切。
### 洋葱路由系统
上世纪90年代，美国海军研究办公室(ONR)着手开发一种匿名浏览互联网进行间谍活动的方法。该计划是建立一个路由器网络，它与互联网的路由器是分开的，可以加密流量，并且只存储前一个路由器的未加密IP地址-这意味着一路上所有其他路由器地址都加密了。他们的想法是，任何观察流量的人都无法确定数据的来源或目的地。
这项研究在2002年被称为“洋葱路由器(Tor)项目”，现在任何人都可以使用它在web上进行相对安全且匿名的导航。
#### *Tor是如何工作的*
通过Tor发送的数据包不是通过常规路由器发送的，而是通过全世界7000多台路由器组成的网络发送的，这要感谢志愿者们允许Tor使用他们的计算机。在使用完全独立的路由器网络的基础上，Tor加密每个数据包的数据、目的地和发送方IP地址。在每一跳，接收到的信息被加密，然后在下一跳被解密。这样，每个包只包含关于路径上的前一跳的信息，而不包含源的IP地址。如果有人拦截流量，他们只能看到上一跳的IP地址，网站所有者只能看到发送流量的最后一个路由器的IP地址(参见图13-1)，这确保在互联网上的相对匿名性。
![](media/e32e433a357ea259e281139cd66a5d4f.jpg)
*图13-1：Tor如何使用加密流量数据*
要启用Tor，只需从https://www.torproject.org/安装Tor浏览器。一旦安装完毕，它将如图13
-2所示，您可以像使用任何老式互联网浏览器一样使用它。通过使用这个浏览器，您将通过一组单独的路由器来浏览互联网，并且能够在不被“老大哥”（隐喻某超级大国）跟踪的情况下访问站点。不幸的是，权衡的结果是通过Tor浏览器浏览会慢得多，因为没有那么多路由器，网络带宽有限。
![](media/0e0e922081017058045dc34ab4846c5e.jpg)
*图13-2：Tor浏览器的登录页面*
除了能够访问传统互联网上几乎任何网站外，Tor浏览器还能够访问暗网。构成暗网的网站需要匿名，因此它们只允许通过Tor浏览器访问，并且它们的地址以.onion结尾用于其顶级域名（TLD）。暗网因非法活动而臭名昭着，但也有一些合法的服务。但请注意：在访问暗网时，您可能会遇到很多人会觉得冒犯的内容。
#### *安全问题*
美国和其他国家的情报和间谍机构认为Tor网络是对国家安全的威胁，认为这样一个匿名网络可以让外国政府和恐怖分子在不被监视的情况下进行交流。因此，许多强大的、雄心勃勃的研究项目正在努力打破Tor的匿名性。
Tor的匿名曾经被这些当局破坏过，而且很可能会再次被破坏。例如，NSA运行自己的Tor路由器，这意味着当您使用Tor时，您的流量可能正在通过NSA的路由器。如果您的流量正在退出NSA的路由器，那就更糟了，因为退出路由器总是知道您的目的地。NSA还有一种被称为“流量关联”(traffic
correlation)的方法，该方法涉及寻找进出流量的模式，能够打破Tor的匿名性。虽然这些破解Tor的尝试不会影响Tor在商业服务(如Google)中隐藏您身份的有效性，但它们可能会限制浏览器在间谍机构中保持匿名的有效性。
### 代理服务器
在互联网上实现匿名的另一种策略是使用代理，代理是充当流量中间商的中间系统：用户连接到代理，并在传递代理之前向其提供流量的IP地址(参见图13-3)。当流量从目标返回时，代理将流量发送回源IP。通过这种方式，流量似乎来自代理，而不是原始IP地址。
![](media/c7e4d75f4a42b35b995a2f59f2682623.jpg)
*图13-3:通过代理服务器运行流量*
当然，代理可能会记录您的流量，但调查人员必须获得传票或搜查令才能获得这些日志。为了使您的流量更加难以跟踪，您可以在称为代理链的策略中使用多个代理，这一策略我们将在本章稍后讨论。
Kali
Linux有一个优秀的代理工具，称为proxychain，您可以设置它来隐藏您的流量。proxychain命令的语法很简单，如下所示:
kali \>proxychains \ \
您提供的参数可能包括一个IP地址。例如，如果您想使用命令nmap以通过代理链匿名方式扫描一个站点，则应输入以下内容：
kali \>proxychains nmap -sT - Pn \
这将通过代理将nmap
-sS扫描命令隐身发送到给定的IP地址。然后，该工具自己构建代理链，因此您不必担心它。
#### *在配置文件中设置代理*
在本节中，我们为要使用的proxychain命令设置了一个代理。与Linux/Unix中的几乎所有应用程序一样，proxychain的配置是由配置文件管理的，即是/etc/proxychain
.conf。使用以下命令在您选择的文本编辑器中打开配置文件(如果需要，用您选择的编辑器替换leafpad):
kali \>leafpad /etc/proxychains.conf
您应该看到类似于代码清单13-1中所示的文件。
\# proxychains.conf VER 3.1
\# HTTP, SOCKS4, SOCKS5 tunneling proxifier with DNS.
\# The option below identifies how the ProxyList is treated.
\# only one option should be uncommented at time,
\# otherwise the last appearing option will be accepted
\#
\# dynamic_chain
\#
\# Dynamic ­ Each connection will be done via chained proxies
\# all proxies chained in the order as they appear in the list
\# at least one proxy must be online to play in chain
\# (dead proxies are skipped)
\# otherwise EINTR is returned to the app strict chain
\# Strict ­ Each connection will be done via chained proxies
\# all proxies chained in the order as they appear in the list
\# all proxies must be online to play in chain
\# otherwise EINTR is returned to the app M
­­snip­­
*清单13-1：proxychains.conf文件*
将此文件向下滚动到第61行，您应该看到ProxyList部分，如清单13-2所示。
[ProxyList]
\# add proxy here...
\# meanwhile
\# defaults set to "tor"
socks4 127.0.0.1 9050
*清单13-2：用于添加代理的配置文件部分*
我们可以通过输入要在此列表中使用的代理的IP地址和端口来添加代理。现在，我们将使用一些免费代理。你可以通过谷歌搜索“免费代理”或使用网站http://www.hidemy.name找到免费代理，如图3-4。
但请注意，在现实黑客活动中使用免费代理并不是一个好主意。我将在本章后面详细介绍这一点。这里使用的示例仅用于教育目的。
![](media/d9fd4fbea84c6ed281a27256b370943a.jpg)
*图13-4：http://www.hidemy.name中的免费代理*
填写表单中的详细信息或单击搜索，然后使用以下格式将其中一个生成的代理添加到proxychains.conf文件中：
Type IPaddress Port
这是一个例子：
[ProxyList]
\# add proxy here...
socks4 114.134.186.12 22020
\# meanwhile
\# defaults set to "tor"
\# socks4 127.0.0.1 9050
需要注意的是，如果您没有输入自己的代理，那么proxychain默认使用Tor。清单13-2中的最后一行指示代理链首先通过主机127.0.0.1上的9050端口发送流量（默认Tor配置）。如果您没有添加自己的代理，并希望使用Tor，那么请保持现状。如果您不使用Tor，您将需要注释掉这一行(在它之前添加一个\#)。
虽然我很喜欢Tor，但它通常很慢。而且，由于NSA已经破解了Tor，我不太可能依赖它的匿名性。因此，我注释掉这一行并添加自己的代理集。
我们来测试一下。在本例中，我将打开浏览器Firefox，通过代理发送流量，让它匿名导航到https://www.hackers-arise.com/。
命令如下:
kali \>proxychains firefox
[www.hackers-arise.com](http://www.hackers-arise.com/)
这将通过我选择的代理成功地在Firefox中打开https://www.hackers-arise.com/并将结果返回给我。对于任何跟踪此流量的人来说，似乎是我的代理导航到了https://www.hackers-arise.com/，而不是我的IP地址。
#### *一些更有趣的选择*
现在我们已经让proxychain工作了，让我们看看可以通过proxychain.conf文件配置的其他选项。正如我们现在所设置的，我们只是使用一个代理。但是，我们可以放入多个代理并使用它们，我们可以使用列表中的有限数量，或者我们可以让proxychain随机改变顺序。
让我们尝试所有这些选项。
##### 添加更多的代理
首先，让我们向列表中添加更多代理。回到http://www.hidemy.name并找到更多的代理IP地址。然后在proxychain
.conf文件中添加更多的代理，如下所示:
[ProxyList]
\# add proxy here...
socks4 114.134.186.12 22020
socks4 188.187.190.59 8888
socks4 181.113.121.158 335551
现在保存这个配置文件，并尝试运行以下命令:
kali \>proxychains firefox www.hackers-arise.com
您不会注意到任何差异，但是您的数据包现在正在通过几个代理进行传输。
##### 动态链接
在我们的proxychain.conf文件中有多个ip，我们可以设置动态链接（*dynamic
chaining*），它通过列表中的每个代理运行我们的流量，如果其中一个代理宕机或没有响应，则自动转到列表中的下一个代理，而不会抛出错误。如果我们不设置这个，则其中一个失败的代理将会破坏我们整个的请求。
回到proxychain配置文件中，找到dynamic_chain行(第10行)并取消注释，如下所示。还要确保注释掉strict_chain行(如果还没有的话)。
\# dynamic_chain
\#
\# Dynamic – Each connection will be done via chained proxies
\# all proxies chained in the order as they appear in the list
\# at least one proxy must be online to play in chain
­­snip­­
这将实现我们代理的动态链接，从而允许更大的匿名性和无故障的黑客攻击。保存配置文件并随意试用它。
##### 随机链接
最后一个代理技巧是随机链接（*random
chaining*）选项，其中proxychain将从列表中随机选择一组IP地址，并使用它们创建代理链。这意味着每次我们使用proxychain时，代理对目标的外观都会有所不同，这使得从源跟踪我们的流量变得更加困难。这个选项也被认为是“动态”的，因为如果一个代理关闭，它将跳到下一个代理。
回到/etc/proxychain.conf文件中，通过在每个行代码的开头添加一个\#来注释掉dynamic_chain和strict_chain这两行代码，然后取消对random_chain行代码的注释。我们一次只能使用这三个选项中的一个，所以在使用proxychain之前一定要注释掉其他选项。
接下来，使用chain_len查找并取消对该行的注释，然后给出一个合理的数字。这一行确定在创建随机代理链时将使用链中的多少IP地址。
\# dynamic_chain
\#
\# Dynamic – Each connection will be done via chained proxies
\# all proxies chained in the order as they appear in the list
\# at least one proxy must be online to play in chain