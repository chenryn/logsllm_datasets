# A Framework for a Collaborative DDoS Defense

**Authors:**
- George C. Oikonomou
- Jelena Mirkovic
- Peter L. Reiher
- Max Robinson

**Affiliations:**
- George Oikonomou, Jelena Mirkovic: University of Delaware (oikonomo@udel.edu, jmirkovic@udel.edu)
- Peter Reiher: UCLA (preiher@cs.ucla.edu)
- Max Robinson: Aerospace Corporation (max.robinson@aero.org)

**Abstract:**
The increasing reliance on the Internet for critical services has made distributed denial-of-service (DDoS) attacks a significant security threat. The distributed nature of DDoS attacks suggests that a distributed defense mechanism is essential for effective mitigation. Three key DDoS defense functionalities—attack detection, rate limiting, and traffic differentiation—are most effective when performed at the victim-end, core network, and source-end, respectively. While many existing systems excel in one aspect of defense, none provides a comprehensive solution or has seen widespread deployment. We propose DefCOM, a collaborative overlay framework that integrates and enhances existing defenses by enabling communication and collaboration among them. During an attack, nodes in DefCOM share alerts and protect legitimate traffic while rate-limiting malicious traffic. DefCOM can accommodate existing defenses, provide a synergistic response to attacks, and naturally lead to an Internet-wide defense against DDoS threats.

## 1. Introduction

As more critical infrastructure services and time-sensitive business transactions move to the Internet, flooding DDoS attacks are becoming an increasingly significant threat. Various defenses have been proposed, such as [6, 10, 18], which either address specific scenarios [10] or aim to offer a comprehensive defense but at a high cost [18, 6]. Despite their potential, none of these defenses has seen widespread deployment, which is necessary to combat the DDoS threat effectively. To improve this situation, we propose a collaborative framework, DefCOM, that allows different defense systems to organize themselves and achieve a synergistic defense against a wide variety of DDoS attacks.

We observe that there are three critical defense functionalities:
1. **Accurate Attack Detection:** Best performed at the victim-end, where all traffic reaching the victim and the victim's resource consumption can be observed.
2. **Rate Limiting:** Necessary at the core network to prevent large floods from overwhelming the victim’s access links.
3. **Traffic Differentiation:** Effective at the source-end, where low address diversity and low traffic rates allow for the distinction between legitimate and attack traffic.

A complete DDoS defense must involve nodes at all three locations, leveraging the strengths of each and minimizing their weaknesses. The advantage of a distributed defense over a single-point defense has been recognized [18, 6, 10]. Some recently proposed defenses use collaborating source-end and victim-end nodes [10], while others deploy collaborating nodes at the victim and core networks [19]. However, they do not fully address the DDoS threat. Specifically, source/victim defenses fail to handle large attacks from legacy networks, and victim/core defenses inflict high collateral damage on legitimate traffic. A few defenses combine nodes at all three locations [6, 18], achieving higher effectiveness but focusing on a single approach, which discourages integration with other defenses and widespread deployment.

We believe that two necessary requirements for a successful DDoS defense are:
1. **Collaborative Defense:** Involving nodes at all three deployment locations.
2. **Integration of Existing and Heterogeneous Defenses:** Allowing for wide deployment.

We propose DefCOM, a distributed collaborative framework for DDoS defense. DefCOM combines the advantages of source-end, victim-end, and core defenses, allowing existing heterogeneous defense systems to cooperate through an overlay. The overlay facilitates communication among non-contiguously deployed nodes. Nodes collaborate by exchanging messages, marking packets for high or low priority handling, and prioritizing marked traffic. We first described the idea and design of DefCOM in [9]. In this paper, we present more details about the design, specify various mechanisms to secure DefCOM’s operation from insider and outsider threats, describe a prototype implementation in a Linux router, and test this implementation in live experiments.

DefCOM does not introduce a new attack detection or response mechanism. Instead, it provides a lightweight communication and traffic policing capability designed to be coupled with existing defenses to facilitate their collaborative action. We use several existing defense systems in our prototype implementation, but a variety of other defenses could be integrated with DefCOM in real-world deployment. The novelty of DefCOM lies in defining collaborative mechanisms usable by a variety of existing defense systems deployed at distributed participants. To our knowledge, DefCOM is currently the only collaborative framework that can accommodate heterogeneous defense nodes.

## 2. DefCOM Overview

DefCOM enhances existing defenses by enabling them to collaborate in DDoS detection and response through a dynamically-built overlay. There are three types of DefCOM functionalities that can be added to existing routers or defense nodes:
1. **Classifier Functionality:** Added to defenses capable of differentiating legitimate from attack traffic. Classifiers mark packets recognized as legitimate with a HIGH-priority mark, ensuring priority handling by downstream DefCOM nodes.
2. **Rate Limiter Functionality:** Deployed by routers. During an attack, a rate limiter runs a weighted fair share algorithm (WFSA) to prioritize and rate-limit traffic forwarded to the victim, preserving the victim’s resources.
3. **Alert Generator Functionality:** Added to defenses that can detect a DDoS attack. Alert generators propagate attack alerts to other DefCOM nodes using the overlay. The alert contains the IP address of the attack’s victim and specifies a desired rate limit, e.g., the size of the victim’s bottleneck link.

Classifiers and rate limiters must be deployed inline since they manipulate traffic; alert generators can be deployed inline or as passive monitors. All DefCOM nodes forwarding traffic to the victim are expected to obey the rate limit advertised in attack alert messages. This means that all routers or inline defenses joining DefCOM must deploy a rate limiter.

Nodes that are direct neighbors in the overlay are called peers. Peering links are built dynamically using traffic flow information, as described in Section 2.1. Alert generator nodes are always active, examining traffic for signs of attack, while classifiers and rate limiters are quiescent during normal operation and become active only during an attack. Activation is triggered by an alarm message generated by an alert generator and flooded to all overlay nodes. Active nodes start their classifier or rate limiter functionality and mark packets they forward to the victim with a stamp periodically negotiated with their peers. There are two types of stamps:
1. **HIGH Priority Stamps:** Initially used by classifiers to mark packets that have passed legitimacy tests.
2. **LOW Priority Stamps:** Used by classifiers and rate limiters to denote traffic below a victim-specified rate limit but whose legitimacy cannot be verified.

Packets marked for HIGH priority handling receive better service than LOW-marked and unmarked packets and are isolated from the attack using WFSA. Since stamps are only valid between two DefCOM peers, every DefCOM node restamps the packets that pass the rate limit with its own stamps.

Figure 1 illustrates DefCOM operation using a simple network topology. Router A deploys a classifier and a rate limiter functionality and hosts some source-end defense. Routers B and F deploy only a rate limiter functionality. Router H deploys a rate limiter and an alert generator functionality and hosts some victim-end defense. Thin lines represent physical connections between nodes, and routers C, D, E, and G are legacy routers.

### 2.1. Dynamic Overlay Construction

We use traffic flows to dynamically build DefCOM peering relationships between nodes deployed inline. The resulting overlay is used only for DefCOM control message exchange, while data packets flow on routes defined by Internet routing protocols.

A DefCOM node advertises itself by generating a DEFJOIN message with a small probability \( p_{\text{JOIN}} \) for a packet sniffed from its forwarding path. The message has its destination IP copied from the packet and carries the source IP address of the DefCOM node and a certificate binding the node’s identity with its public key, granting permission to join the overlay.

DEFJOIN messages are generated to a currently unassigned UDP port. If they hit a DefCOM node en route to the destination, they will be intercepted, and the receiving node will verify the certificate, add the originator’s IP address to its peer list, and generate a DEFREPLY to the source IP from the DEFJOIN message. DEFREPLY messages are processed similarly to DEFJOIN messages. A DEFJOIN message that does not hit a DefCOM node will be silently dropped at the destination.

For security, a DEFJOIN message includes a nonce, which should be returned in the DEFREPLY message to prevent a denial-of-service attack with non-solicited DEFREPLY messages. A session key is also exchanged via DEFJOIN messages and used for encryption of future control messages between two peers.

While traffic flows on a given path, periodic DEFJOIN messages will refresh the corresponding peer relationships. If traffic subsides, each node will remove stale peers after a set timeout (60 seconds in our prototype). Figure 1(a) shows a few traffic flows with thicker, solid lines, and illustrates DEFJOIN messages with squares and an arrow line. Dashed lines show resulting peering relationships.

Control messages are exchanged only between peers and encrypted with the session key. Messages use the UDP protocol to avoid congestion response, but we implement a reliable delivery mechanism at the application layer. All messages are acknowledged by the receiver; the sender retransmits a message a fixed number of times if an acknowledgment has not been received. Table 1 lists all the control messages, which we describe in the following sections.

### 2.2. Packet Marking Mechanism

DefCOM’s packet marking mechanism ensures that packets verified as legitimate by a classifier receive high priority treatment by downstream nodes. Every DefCOM node has a HIGH and a LOW stamp, which is a number...