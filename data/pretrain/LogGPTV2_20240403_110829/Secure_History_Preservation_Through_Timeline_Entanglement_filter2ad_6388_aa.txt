title:Secure History Preservation Through Timeline Entanglement
author:Petros Maniatis and
Mary Baker
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Secure History Preservation through
Timeline Entanglement
Petros Maniatis Mary Baker
Computer Science Department, Stanford University
Stanford, CA 94305, USA
fmaniatis,PI:EMAIL
http://identiscape.stanford.edu/
Abstract
A secure timeline is a tamper-evident historic record
of the states through which a system goes throughout
its operational history. Secure timelines can help us
reason about the temporal ordering of system states
in a provable manner. We extend secure timelines to
encompass multiple, mutually distrustful services, us-
ing timeline entanglement. Timeline entanglement as-
sociates disparate timelines maintained at independent
systems, by linking undeniably the past of one timeline
to the future of another. Timeline entanglement is a
sound method to map a time step in the history of one
service onto the timeline of another, and helps clients
of entangled services to get persistent temporal proofs
for services rendered that survive the demise or non-
cooperation of the originating service. In this paper we
present the design and implementation of Timeweave,
our service development framework for timeline entan-
glement based on two novel disk-based authenticated
data structures. We evaluate Timeweave’s performance
characteristics and show that it can be e(cid:14)ciently de-
ployed in a loosely-coupled distributed system of sev-
eral hundred nodes with overhead of roughly 2-8% of
the processing resources of a PC-grade system.
1
Introduction
A large portion of the functionality o(cid:11)ered by cur-
rent commercial \secure" or \trusted" on-line ser-
vices focuses on the here and now: certi(cid:12)cation au-
thorities certify that a public signature veri(cid:12)cation
key belongs to a named signer, secure (cid:12)le systems
vouch that the (cid:12)le with which they answer a lookup
query is the one originally stored, and trusted third
parties guarantee that they do whatever they are
trusted to do when they do it.
The concept of history has received consider-
ably less attention in systems and security research.
What did the certi(cid:12)cation authority certify a year
ago, and which (cid:12)le did the secure (cid:12)le system return
to a given query last week?
Interest in such questions is fueled by more than
just curiosity. Consider a scenario where Alice,
a certi(cid:12)ed accountant, consults con(cid:12)dential docu-
ments supplied by a business manager at client com-
pany Norne, Inc. so as to prepare a (cid:12)nancial re-
port on behalf of the company for the Securities
and Exchange Commission (SEC). If, in the future,
the SEC questions Alice’s integrity, accusing her of
having used old, obsolete (cid:12)nancial information to
prepare her report, Alice might have to prove to
the SEC exactly what information she had received
from Norne, Inc. before preparing her report. To
do that, she would have to rely on authentic his-
toric data about documents and communication ex-
changes between herself and Norne, on the authen-
tic, relative and absolute timing of those exchanges,
perhaps even on the contents of the business agree-
ment between herself and the company at the time.
Especially if the company maliciously chooses to
tamper with or even erase its local records to repudi-
ate potential transgressions, Alice would be able to
redeem herself only by providing undeniable proof
that at the time in question, Norne, Inc. did in fact
present her with the documents it now denies.
Besides this basic problem, many other periph-
eral problems lurk: what if Norne, Inc. no longer
exists when Alice has to account for her actions?
What if Alice and the SEC belong to di(cid:11)erent trust
domains, i.e., have di(cid:11)erent certi(cid:12)cation authorities
or di(cid:11)erent secure time stamping services?
In this work we formulate the concept of secure
timelines based on traditional time stamping [5, 11]
and authenticated dictionaries [8, 10] (Section 3).
Secure timelines allow the maintenance of a persis-
tent, authenticated record of the sequence of states
that an accountable service takes during its lifetime.
Furthermore, we describe a technique called time-
line entanglement for building a single, common
tamper-evident history for multiple mutually dis-
trustful entities (Section 4). First, timeline entan-
glement enables the temporal correlation of inde-
pendent histories, thereby yielding a single timeline
that encompasses events on independent systems.
This correlation can be veri(cid:12)ed independently in the
trust domain of each participant, albeit with some
loss of temporal resolution. Second, it allows clients
to preserve the provability of temporal relationships
among system states, even when the systems whose
states are in question no longer participate in the
collective, or are no longer in existence.
We then present Timeweave, our prototype
framework for the development of loosely-coupled
distributed systems of accountable services that
uses timeline entanglement to protect historic in-
tegrity (Section 5). We describe novel, scalable al-
gorithms to maintain secure timelines for extended
time periods and for very large data collections. Fi-
nally, we evaluate the performance characteristics of
Timeweave in Section 6 and show that it e(cid:14)ciently
supports large-sized groups of frequently entangled
services|up to several hundred|with maintenance
overhead that does not surpass 2-8% of the compu-
tational resources of a PC-grade server.
2 Background
In this work we draw on results from research on se-
cure time stamping and authenticated dictionaries.
The main inspiration behind our approach comes
from Lamport’s classic logical clock paradigm [14].
2.1 Secure Time Stamping
In secure time stamping, it is the responsibility of
a centralized, trusted third party, the Time Stamp-
ing Service (TSS), to maintain a temporal ordering
of submission among digital documents. As doc-
uments or document digests are submitted to it,
the TSS links them in a tamper-evident chain of
authenticators, using a one-way hash function, and
distributes portions of the chain and of the authenti-
cators to its clients. Given the last authenticator in
the chain it is impossible for anyone, including the
TSS, to insert a document previously unseen in the
middle of the chain unobserved, without signi(cid:12)cant
collusion, and without (cid:12)nding a second pre-image
for the hash function used [11].
Benaloh and de Mare [5] describe synchronous,
broadcast-based time stamping schemes where no
central TSS is required, and introduce the concept
of a time stamping round. All documents time
stamped during a round are organized in a data
structure, (cid:13)at or hierarchical, and yield a collec-
tive digest that can be used to represent all the
documents of the entire round, in a tamper-evident
manner; given the digest, the existence of exactly
the documents inside the data structure can be
proved succinctly, and any document outside the
data structure can be proved not to be there.
Buldas et al. [8] extend previous work by signi(cid:12)-
cantly diminishing the need to trust the TSS. They
also introduce e(cid:14)cient schemes for maintaining rela-
tive temporal orderings of digital artifacts with log-
arithmic complexity in the total number of artifacts.
A large, concurrent project towards the full speci-
(cid:12)cation of a time stamping service is described by
Quisquater et al. [21].
Ansper et al. [2] discuss time stamping service
availability, and suggest a scheme similar to consen-
sus in a replicated system to allow for fault-tolerant
time stamping.
Finally, Schneier and Kelsey propose a (cid:13)exible
scheme to protect access-controlled ordered logs on
untrusted machines against tampering or unautho-
rized retroactive disclosure [23], based extensively
on hash chaining. They address the problem in an
application setting where historic integrity need be
maintained only for the short-term, until the local
history is uploaded to a trusted server for evaluation
and storage, and where the entities enforcing his-
toric integrity need not be themselves held account-
able, as is the case in many corporate intranets.
2.2 Authenticated Dictionaries
Authenticated dictionaries are data structures that
operate as tamper-evident indices for a dynamic
data set. They help compute and maintain a one-
way digest of the data set, such that using this digest
and a succinct proof, the existence or non-existence
of any element in the set can be proved, without
considering the whole set.
The (cid:12)rst
such authenticated dictionary is
Merkle’s hash tree [17], originally proposed as a dig-
ital signature scheme. Hash trees are binary trees in
whose leaves the data set elements are placed. Each
leaf node is labeled with the hash of the contained
data element and each interior node is labeled with a
hash of the concatenated labels of its children. The
label of the root node is a tamper-evident digest
for the entire data set. The existence proof for an
element in the tree consists of the necessary infor-
mation to derive the root hash from the element in
question; speci(cid:12)cally, the proof consists of all labels
and locations (left or right) of all siblings of nodes
on the path from the element to the tree root.
Tree-based authenticated dictionaries reminiscent
of Merkle’s hash trees are most notably proposed
for the distribution of certi(cid:12)cate revocation records,
(cid:12)rst by Kocher [13], and then in an incrementally
updatable version by Naor and Nissim [18]. Buldas
et al. obviate the need for trusting the dictionary
maintainer to keep the dictionary sorted, by intro-
ducing the authenticated search tree [6, 7]. Authen-
ticated search trees are like hash trees, but all nodes,
leaves and internal nodes alike, contain data set el-
ements. The label of the node is a hash not only of
the labels of its children, but also of the element of
the node. Existence proofs contain node elements in
addition to nodes’ siblings’ labels on the path from
the element in question to the root. In this manner,
an existence proof follows the same path that the
tree maintainer must take to (cid:12)nd a sought element;
as a result, clients need not unconditionally trust
that the tree maintainer keeps the tree sorted, since
given a root hash, there is a unique descent path
that follows the standard traversal of search trees
towards any single element.
Authenticated dictionaries have also been pro-
posed based on di(cid:11)erent data structures. Buldas
et al. [8] describe several tree-like \binary linking
schemes." Goodrich et al. [10] propose an authenti-
cated skip list that relies on commutative hashing.
In the recent literature, the maintenance of au-
thenticated but persistent dynamic sets [9, p. 294]
has received some attention. Persistent dynamic
sets allow modi(cid:12)cations of the elements in the
set, but maintain enough information to recreate
any prior version of the set. Anagnostopoulos et
al. [1] propose and implement persistent authenti-
cated skip lists, where not only older versions of the
skip list are available, but they are each, by them-
selves, an authenticated dictionary.
In the same
work, and also in work by Maniatis and Baker [16],
persistent authenticated dictionaries based on red-
black trees are sketched in some detail, although the
resulting designs are di(cid:11)erent. Speci(cid:12)cally, in the
former work, although multiple versions of the au-
thenticated red-black tree are maintained, the col-
lection of versions is itself not authenticated; the
latter work uses a second, non-persistent authenti-
cated dictionary to authenticate the tree versions.
3 Secure Timelines
We de(cid:12)ne a secure timeline within a service domain.
A service domain comprises a system o(cid:11)ering a par-
ticular service|the service of the domain|and a
set of clients who use that system for that service|
the clients of the domain. Such a service domain
could be, for example, the (cid:12)le server and all clients
of a secure (cid:12)le system, or an enterprise-wide certi-
(cid:12)cation authority along with all certi(cid:12)cate subjects
within that enterprise.
Within the context of a service domain, a secure
timeline is a tamper-evident, temporally-ordered,
append-only sequence of the states taken by the ser-
vice of that domain. In a sense, a secure timeline
de(cid:12)nes an authenticated logical clock for the service.
Each time step of the clock is annotated with the
state in which the service is at the time, and an au-
thenticator. The authenticator is tamper-evident:
given the authenticator of the latest time step of
the timeline, it is intractable for the service or for
any other polynomially-bound party to \change his-
tory" unobtrusively by altering the annotations or
authenticators of past time steps.
In this work, we consider secure timelines based
on one-way (second pre-image-resistant) hash func-
tions. Assuming, as is common, that one-way hash
functions exist, we use such functions to de(cid:12)ne the
\arrow of time." In other words, given a presum-
ably one-way hash function h such as SHA-1 [19], if
b = h(a), then we conclude that value a was known
before value b, or a temporally precedes b, since given
b the probability of guessing the right a is negligible.
A simple recursive way to de(cid:12)ne a secure time-
line is as follows: if at logical time i the clock has
authenticator Ti, then at the next logical time step
i + 1, the hash function h is applied to the pre-
vious clock authenticator Ti and to the next state
of the system Si+1. Assuming that f is a one-way
digest function from system states to digests, then
Ti+1 = h(i + 1kTikf (Si+1)), where k denotes con-
catenation. Given Ti+1, it is intractable to produce
0k(cid:11)), so
appropriate (cid:11) such that Ti+1 = h(i + 1kTi
0 6= Ti ap-
as to make an arbitrary authenticator Ti
pear as the timeline authenticator of logical step i,
from the second pre-image resistance of the hash
function. Similarly, for a given Ti+1 only a unique
state digest di+1 = f (Si+1) is probable, and, from
the one-way property of the state digest function f ,
only a unique system state Si+1 is probable. There-
fore, authenticator Ti+1 is, in a sense, a one-way
digest of all preceding authenticators and system
states, as well as of their total temporal ordering.
Many existing accountable services match the se-
cure timeline paradigm, since secure timelines are
a generalization of secure time stamping services
(TSS) [11]. The service state of a TSS is an au-
thenticated dictionary of all document digests sub-
 "!
#$%'&
)'*+





Figure 1: The (cid:12)rst few steps of a secure timeline. Time
(cid:13)ows from left to right. Note that the current authen-
ticator of the timeline is an input to the next state of
the system. We explain one way to accomplish this in
Section 5.2.
mitted to it during a time stamping round. The Key
Archival Service (KAS) by Maniatis and Baker [16]
is another service with a timeline, where the ser-
vice state is a persistent authenticated dictionary of
all certi(cid:12)cates and revocation records issued by a
Certi(cid:12)cation Authority. Similarly, any service that
maintains one-way digests of its current state can
be retro(cid:12)tted to have a secure timeline. Consider,
for example, Kocher’s Certi(cid:12)cate Revocation Trees
(CRT) [13]. The state of the service at the end of
each publication interval consists of a hash tree of
all published revocation records. The root hash of
the CRT is a one-way digest of the database. Conse-
quently, a secure timeline for the revocation service
can easily follow from the above construction.
Figure 1 illustrates the (cid:12)rst few time steps of a
secure timeline.
In the (cid:12)gure, the new timeline
authenticator is also fed into the new state of the
system. Depending on the de(cid:12)nition of the state
digest function, a new state of the service can be
shown to be fresh, i.e., to have followed the com-
putation of the authenticator for the previous time
step.
In Time Stamping Services, this places the
time stamp of a document between two rounds of
the service. In the Key Archival Service, this bounds
the time interval during which a change in the Cer-
ti(cid:12)cation Authority (new certi(cid:12)cate, revocation, or
refresh) has occurred.
In a CRT timeline system,
this bounds the time when a revocation database
was built. Some authenticated dictionaries can be
shown to be fresh(e.g., [8]), and we explain how we
handle freshness in Section 5.2.
Secure timelines can be used to answer two basic
kinds of questions: existence questions and temporal
precedence questions. Existence questions are of the
form \is S the i-th system state?", and are used to
establish that the service exhibited a certain kind of
behavior at a particular phase in its history. In the
time stamping example, an existence question could
be \is d the round hash at time i?" A positive an-