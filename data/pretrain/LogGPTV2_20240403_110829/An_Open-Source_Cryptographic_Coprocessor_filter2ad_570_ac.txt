the requirements given above, both are open source
systems, and both can use a standard full-scale system
as the development environment — whichever one is
the most convenient can be used.  At the moment  Linux
is a better choice because its popularity means there’s
better support for devices such as flash memory mass
storage (relatively speaking, as the  Linux drivers for the
most widely-used flash disk are for an old kernel while
the FreeBSD ones are mostly undocumented and rather
minimal), so the coprocessor described here uses  Linux
as its resource management firmware.  A convenient
feature which gives the free  Unixen an extra advantage
over alternatives like embedded DOS is that they’ll
automatically switch to using the serial port for their
consoles if no video drivers and/or hardware are
present, which enables them to be used with cheaper
embedded hardware which doesn’t require additional
video circuitry just for the one-off 
setup process.  A
particular advantage of  Linux is that it’ll halt the CPU
when nothing is going on (which is most of the time),
greatly reducing coprocessor power consumption and
heat problems.
2.3. Firmware Setup
Setting up the coprocessor firmware involves creating a
stripped-down  Linux  setup capable of running on the
coprocessor hardware.  The services required of the
firmware are:
•  Memory management
•  Persistent storage services
•  Communication with the host
•  Process and thread management (optional)
All newer embedded systems support the M-Systems
DiskOnChip (DOC) flash disk, which emulates a
standard IDE hard drive by identifying itself as a BIOS
extension during the system initialisation phase
(allowing it to install a DOC 
filesystem driver to
provide BIOS support for the drive) and later switching
to a native driver for OS’s which don’t use the BIOS for
hardware access [ 41].  The first step in installing the
firmware involves formatting the DOC as a standard
hard drive and partitioning it prior to installing  Linux.
The DOC is configured to contain two partitions, one
mounted read-only which contains the firmware and
crypto control software, and one mounted read/write
with additional safety precautions like 
noexec and
nosuid, for storage of configuration information and
encrypted keys.
The firmware consists of a basic 
Linux kernel with
every unnecessary service and option stripped out.  This
means removing support for video devices, mass
storage (apart from the DOC and floppy drive),
multimedia devices, and other unnecessary bagatelles.
Apart from the TCP/IP stack needed by the crypto
control software to communicate with the host, there
are no networking components running (or even
present) on the system, and even the TCP/IP stack may
be absent if alternative means of communicating with
the host (explained in more detail further on) are
employed.  All configuration tasks are performed
through console access via the serial port, and software
is installed by connecting a floppy drive and copying
across pre-built binaries.  This both minimises the size
of the code base which needs to be installed on the
coprocessor, and eliminates any unnecessary processes
and services which might constitute a security risk.
Although it would be easier if we provided a means of
FTP’ing binaries across, the fact that a user must
explicitly connect a floppy drive and mount it in order
to change the firmware or control software makes it
much harder to accidentally (or maliciously) move
problematic code across to the coprocessor, provides a
workaround for the fact that FTP over alternative
coprocessor communications channels such as a parallel
port is tricky without resorting to the use of even more
potential problem software, and makes it easier to
comply with the FIPS 140 requirements that (where a
non-Orange Book OS is used) it not be possible for
extraneous software to be loaded and run on the system.
Direct console access is also used for other operations
such as setting the onboard real-time clock, which is
used to add timestamps to signatures.  Finally, all
paging is disabled, both because it isn’t needed or safe
to perform with the limited-write-cycle flash disk, and
because it avoids any risk of sensitive data being
written to backing store, eliminating a major headache
which occurs with all virtual-memory operating
systems [42].
At this point we have a basic system consisting of the
underlying hardware and enough firmware to control it
and provide the services we require.  Running on top of
this will be a daemon which implements the crypto
control software which does the actual work.
3. Crypto Functionality Implementation
Once the hardware and functionality level of the
coprocessor have been established, we need to design
an appropriate programming interface for it.  An
interface which employs complex data structures,
pointers to memory locations,  callback functions, and
other such elements won’t work with the coprocessor
unless a complex RPC mechanism is employed.  Once
we get to this level of complexity we run into problems
both with lowered performance due to data marshalling
and copying requirements and potential security
problems arising from inevitable implementation bugs.
Figure 4: cryptlib architecture
A better type of interface is the one used in the cryptlib
security architecture [43] which is depicted in  Figure 4.
cryptlib implements an object-based design which
assigns unique handles to crypto-related objects but
hides all further object details inside the architecture.
Objects are controlled through messages sent to them
under the control of a central security kernel, an
interface which is ideally suited for use in a coprocessor
since only the object handle (a small integer value) and
one or two arguments (either an integer value or a byte
string and string length) are needed to perform most
operations.  This use of only basic parameter types
leads to a very simple and lightweight interface, with
only the integer values needing any  canonicalisation (to
network byte order) before being passed to the
coprocessor.  A coprocessor call of this type, illustrated
in Figure 5, requires only a few lines of code more than
what is required for a direct call to the same code on the
host system.  In practice the interface is further
simplified by using a pre-encoded template containing
all fixed parameters (for example the type of function
call being performed and a parameter count), copying in
any variable parameters (for example the object handle)
with appropriate  canonicalistion, and dispatching the
result to the coprocessor.  The coprocessor returns
results in the same manner.
very easy to unplug the entire crypto subsystem and
store it separately from the host, moving it out of reach
of any covert access by outsiders while the owner of the
system is away.  In addition to the card itself, this type
of standalone setup requires a case and a power supply,
either internal to the case or an external wall-wart type
(these are available for about $10 with a universal input
voltage range which allows them to work in any
country).  The same arrangement is used in a number of
commercially-available products, and has the advantage
that it interfaces to virtually any type of system, with
the commensurate disadvantage that it requires a
dedicated  ethernet connection to the host (which
typically means adding an extra network card), as well
as adding to the clutter surrounding the machine.
The alternative option for an external coprocessor is to
use the parallel port, which doesn’t require a network
Figure 5: Communicating with the coprocessor
3.1. Communicating with the Coprocessor
The next step after designing the programming interface
is to determine which type of communications channel
is best suited to controlling the coprocessor.  Since the
embedded controller hardware is intended for
interfacing to almost anything, there are a wide range of
I/O capabilities available for communicating with the
host.  Many embedded controllers provide an 
interface either standard or as an option, so the most
universal interface uses TCP/IP for communications.
For card PC’s which plug into the hosts  backplane we
should be able to use the system bus for
communications, and if that isn’t possible we can take
advantage of the fact that the parallel ports on all recent
PC’s provide sophisticated (for what was intended as a
printer port) bidirectional I/O capabilities and run a link
from the parallel port on the host motherboard to the
parallel port on the coprocessor.  Finally, we can use
more exotic I/O capabilities such as USB to
communicate with the coprocessor.
ethernet
The most universal coprocessor consists of a biscuit PC
which communicates with the host over 
ethernet (or,
less universally, a parallel port).  One advantage which
an external, removable coprocessor of this type has over
one which plugs directly into the host PC is that it’s
44].
card but does tie up a port which may be required for
one of a range of other devices such as external disk
drives, CD writers, and scanners which have been
kludged onto this interface alongside the more obvious
printers.  Apart from its more obvious use, the printer
port can be used either as an Enhanced Parallel Port
(EPP) or as an Extended Capability Port (ECP) [
Both modes provide about 1-2 MB/s data throughput
(depending on which vendors claims are to be believed)
which compares favourably with a parallel port’s
standard software-intensive maximum rate of around
150  kB/s and even with the throughput of a 10Mbps
ethernet interface.  EPP was designed for general-
purpose  bidirectional communication with peripherals
and handles intermixed read and write operations and
block transfers without too much trouble, whereas ECP
(which requires a DMA channel which can complicate
the host system’s configuration process) requires
complex data direction negotiation and handling of
DMA transfers in progress, adding a fair amount of
overhead when used with peripherals which employ
mixed reading and writing of small data quantities.
Another disadvantage of DMA is that its use paralyses
the CPU by seizing control of the bus, halting all
threads which may be executing while data is being
transferred.  Because of this the optimal interface
mechanism is EPP.  From a programming point of
view, this communications mechanism looks like a
permanent virtual circuit which is functionally
equivalent to the dumb wire which we’re using the
ethernet link as, so the two can be interchanged with a
minimum of coding effort.
To the user, the most transparent coprocessor would
consist of some form of card PC which plugs directly
into their system’s  backplane.  Currently virtually all
card PC’s have ISA bus interfaces (the few which
support PCI use a PCI/ISA hybrid which won’t fit a
standard PCI slot [ 45]) which unfortunately doesn’t
provide much flexibility in terms of communications
capabilities since the only viable means of moving data
to and from the coprocessor is via DMA, which requires
a custom kernel-mode driver on both sides.  The
alternative, using the parallel port, is much simpler
since most operating systems already support EPP
and/or ECP data transfers, but comes at the expense of a
reduced data transfer rate and the loss of use of the
parallel port on the host.  Currently the use of either of
these options is rendered moot since the ISA card PC’s
assume they have full control over a passive- backplane-
bus system, which means they can’t be plugged into a
standard PC which contains its own CPU which is also
assuming that it solely controls the bus.  It’s possible
that in the future card PC’s which function as PCI bus
devices will appear, but until they do it’s not possible to
implement the coprocessor as a plug-in card without
using a custom extender card containing an ISA or PCI
connector for the host side, a PC104 connector for a
PC104-based CPU card, and buffer circuitry in between
to isolate the two buses.  This destroys the COTS nature
of the hardware, limiting availability and raising costs.
The final communications option uses more exotic I/O
capabilities such as USB which are present on newer
embedded systems, these are much like 
have the disadvantage that they are currently rather
poorly supported by most operating systems.
ethernet but
Since we’re using  Linux as the resource manager for
the coprocessor hardware, we can use a multithreaded
implementation of the coprocessor software to handle
multiple simultaneous requests from the host.  After
initialising the various cryptlib subsystems, the control
software creates a pool of threads which wait on a
mutex for commands from the host.  When a command
arrives, one of the threads is woken up, processes the
command, and returns the result to the host.  In this
manner the coprocessor can have multiple requests
outstanding at once, and a process running on the host
won’t block whenever another process has an
outstanding request present on the coprocessor.
3.2. Open vs Closed-source Coprocessors
There are a number of vendors who sell various forms
of tier 2 coprocessor, all of which run proprietary
control software and generally go to some lengths to
ensure that no outsiders can ever examine it.  The usual
vs proprietary
fora and won’t be repeated here).
way in which vendors of proprietary implementations
try to build the same user confidence in their product as
would be provided by having the source code and
design information available for public scrutiny is to
have it evaluated by independent labs and testing
facilities, typically to the FIPS 140 standard when the
product constitutes crypto hardware (the security
implications of open source 
implementations have been covered exhaustively in
various 
Unfortunately this process leads to prohibitively
expensive products (thousands to tens of thousands of
dollars per unit) and still requires users to trust the
vendor not to insert a backdoor, or accidentally void the
security via a later code update or enhancement added
after the evaluation is complete (strictly speaking such
post-evaluation changes would void the evaluation, but
vendors sometimes forget to mention this in their
marketing literature).  There have been numerous
allegations of the former occurring [
occasional reports of the latter.
46][47][48], and
In contrast, an open source implementation of the
crypto control software can be seen to be secure by the
end user with no degree of blind trust required.  The
user can (if they feel so inclined) obtain the raw
coprocessor hardware from the vendor of their choice in
the country of their choice, compile the firmware and
control software from the openly-available source code,
and install it knowing that no supplemental
functionality known only to a few insiders exists.  For
this reason the entire suite of coprocessor control
software is available in source code form for anyone to