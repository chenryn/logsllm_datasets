The next step of PMForce consists of transforming our represen-
tation of function calls and expressions into Z3 clauses, these can
then be attempted to solve and if successful will provide us with
assignments to our collected identifiers that execute the intended
functionality. Even though Javascript is a weakly typed language
and is renowned for having various language quirks, we found that
functionality used within real-world postMessage handlers can be
reasonably well represented as Z3 clauses. In particular, a prime
example of such hardships is that JavaScript allows for comparisons
between arbitrary types. Fortunately, in handler functions, such
implicit conversions are rarely part of the program logic.
We use our types inferred at runtime to instantiate Z3 variables
with fixed types. For variables for which no type hints were recorded
at runtime, we defer to treating them as strings. Further, we coerce
types on the fly if we observe that two Z3 expressions appear to
mismatch, e.g., when we guess that a variable is a string while
it is actually compared against an integer, which can be done in
JavaScript but lacks an implicit representation in Z3.
In the following, we discuss further considerations that allow us
to represent common behavior using Z3 clauses.
Automated Conversion to Boolean. In Javascript, basically any
value can be coerced to a boolean value on the fly. This pattern is
regularly used to check for the existence of properties on objects,
as is done in Figure 3 line 12. In Z3, however, clauses need to be
real boolean values as there does not exist any implicit conversion
(even though there exist explicit conversions such as str.to.int).
To allow for the JavaScript shorthand to be representable in Z3, we
introduce constraints on basic types that mimic the behavior of
Javascript. As an example, the empty string in Javascript is treated
as false, while a non-empty string is always treated as true. With
these modifications to the clauses, we can emulate the behavior of
the Javascript engine for conditionals. While this automated con-
version works for most use cases where the values are used inside
conditionals, it does not work when the resulting value is further
processed. Line 2 in Figure 7 highlights the pattern that a value is as-
signed to the first object that evaluates to true, a common practice to
allow for cross-browser compatibility. Since this value used inside a
Binary expression in line 3, coercing it to a boolean value does not
work. Since we assume by default that an OR expression produces
a boolean, we perform the coercion directly and only later notice
that these values are not used as booleans, e.g., when accessing
further properties. However, once we use such a value outside of a
conditional, we can correct this erroneous coercion. To that end, we
introduce a helper variable that must be equal to either of the values
and use this helper variable as a substitute for our wrongly coerced
value. Coming back to the example, we then compare this helper
variable against https://foo.com and correctly enforce that either
event.origin or event.originalEvent.origin must match it.
Regular Expressions. Even though Z3 supports the use of regular
expressions, we need to transform Javascript regular expressions
into Z3 clauses automatically. We leverage an open-source regex
parser[4] and transform the abstract representation into Z3 clauses.
Additionally, we emulate the common behavior of Javascript func-
tions that use regular expressions in which the matched string can
have arbitrary prefixes and suffixes as long as the regular expression
does not force this explicitly using ˆ and $ respectively.
1
2
3
4
5
String Functions. While Z3 supports various string operations
due to work by Zheng et al. [28], functionality exhibited by postMes-
sage handlers quickly exceeds the capabilities that Z3 offers natively.
Therefore, we emulate the behavior of commonly used function-
ality, such as split or search. We use our collected handlers to
find the functionality used in the wild. Since our underlying string
solving logic does not incorporate all string functions that the Java-
Script engine supports, we need to model some of the function calls
with the underlying building blocks of the logic. As an example,
the search function in Javascript takes as input a regular expression
and checks whether the given string contains a substring matching
the regular expression and returns the index of the matching string.
To emulate this behavior we introduce a helper variable, asserting
that this variable is part of the language spanned by the regular
expression, using our regex conversions and Z3’s ReIn, and then
return the index of said helper string in the original string using
Z3’s indexOf operation on strings. While we were able to accom-
modate most of the behavior found in these handlers, some of the
used functionality lacks an explicit representation in Z3. One of
the prime examples of behavior that cannot be supported by the
current logic of strings is replacement with regular expressions.
Although Z3 supports functionality which checks whether or not a
string is part of a regular language, and supports string replace on
strings, there is no generic way to express string replace with reg-
ular expressions with these building blocks. While these are clear
limitations of our instantiation of PMForce, which stem from choos-
ing a specific SMT solver, the underlying logics could accommodate
such behavior[27].
Non-existent Properties. We found that handler functions regu-
larly check for the presence of objects which are not normally part
of an incoming postMessage. Line 2 in Figure 7 shows such an exam-
ple from the wild, where the originalEvent property is accessed,
which is not standardized but rather added by libraries such as
jQuery. However, some of the handlers are no longer registered via
frameworks but rather directly added by using the addEventLis-
tener function; thus, the accessed property is merely an artifact
of continuously evolving code. Naturally, properties other than
event.origin and event.data cannot be abused by an attacker.
Since our forced execution collects all constraints, i.e., also those
that are part of lazy execution chains that would normally not be
relevant, we end up with path constraints that incorporate clauses
with identifiers that are not attacker-controllable. More specifically
in the aforementioned example we would generate the constraint
that either event.origin or event.originalEvent.origin must
function handler(event){
let origin = event.originalEvent.origin || event.origin;
if(origin === 'https://foo.com')
// ...
}
Figure 7: Example of non-existing property usage and lazy-
evaluation to objects
pass the origin check. For every property on the event object that
cannot be influenced by the attacker, we will thus emit additional
constraints asserting them to be equal to the empty string. Doing
so will enforce that these properties coerce to false once used inside
conditionals on their own. In our example this means that we force
the SMT solver to disregard the non-tamperable property and thus
find a valid assignment in the event.origin property.
4 AUTOMATICALLY VALIDATING
POSTMESSAGE SECURITY ISSUES
In this section, we discuss our exploit generation techniques. To
that end, we first discuss how we use assignments from Z3 to
reconstruct JavaScript objects, followed by our encoding of exploits
as Z3 clauses. We then present how we automatically validate that
the generated assignments exploit the handler functions to confirm
the discovered vulnerabilities.
4.1 Translating Z3 Assignments to JavaScript
Since we use the access patterns as identifier for the Z3 string rep-
resentation of our constraints, upon solving these constraints, we
need to transform the mapping of identifiers to values back to the
object that can be called with the handler functionality. For this,
we recursively build up the object based on the access path of the
identifier. Doing so might unveil imprecisions of our type infer-
ence/conversion from Javascript to Z3. If we come back to our initial
example of Figure 3, we have the constraint that event.data must
evaluate to a true value and that event.data.mode must be set to
a specific string. Since we represent event.data as a string value,
due to the lack of other options, our assignments incorporate a
non-empty string assignment of event.data. We add the assigned
string of the parent element as another property of the object. This
allows us to correctly handle those cases where the assigned strings
are necessary, e.g., a check on whether event.data.toString()
contains a particular substring.
Similar to our taint analysis, which helps us to infer types of our
identifiers, there exist cases in which additional typing information
is part of our assignments. More concretely, we might have captured
in our taint-analysis that JSON.parse was used on event.data
prior to accessing further properties on the loaded object. In these
cases, we emit further constraints that force the assignment of a
variable representing the type of event.data to be JSON. When
we encounter such further typing information once reassembling
the assignments into a JavaScript object, we adjust the generated
object to accommodate for this typing information, e.g., encode the
subpart of the data object as JSON.
4.2 Exploit Templates
Until now, we have presented the complete pipeline, which allows
us to collect and generate path constraints of security- and privacy-
relevant program traces. This allows us to generate assignments
that trigger said functionality but do not necessarily exploit them
from an attacker’s point of view.
To tackle this issue, we also collect the precise information of the
operations applied to the proxy object that was called in a sink and
encode our payload as further constraints on the underlying ob-
ject. For this step, we introduce what we call Exploit Templates,
which is an abstraction on the context in which a specific exploit
might trigger. For example, the most basic Exploit Template could
enforce that a string flowing into eval contains a payload, e.g.,
alert(1). The constraint solver will then, along with other con-
straints that stem from the page, find an assignment that fulfills
both the constraints of the handler as well as contains our pay-
load. Such a basic template will most likely generate assignments
that will not execute our payload, e.g., by generating syntactically
incorrect JavaScript code that will then flow into eval. However,
this simple example showcases a trade-off that our real templates
need to balance; they must be as generic as possible to allow for as
many constraints of the page as possible while ascertaining mali-
cious behavior once successfully solved. The basic template is the
most generic one there is, as we only ascertain that our payload is
contained in the assignment, but, it fails to ensure exploitability.
Adding further constraints to the path constraints, however,
means that chances that the exploit generation terminates in a
reasonable amount of time diminishes. To allow for the analysis
to finish without timeouts, we apply each template in a separate
query to the SMT solver and refrain from using constraints that
are difficult to solve, i.e., regular expressions, in the Exploit Tem-
plates. We restrict operations induced by the Exploit Templates
to startsWith and endsWith constraints of fix strings and only
enforce that origins must start with either http:// or https://
as there is no way to express a valid origin using these restrictions.
This allows us to solve most of the path constraints found in the
wild augmented with our Exploit Templates in less than 30 seconds.
We defer the discussion of timed-out attempts to Section 6.1, where
we also provide insights from the encountered timeouts.
Other approaches on finding client-side XSS [10, 14, 25] generate
exploits in a manner that is only sensitive to the syntactic structure
of the data passed to the sink, but not constraints to even reach the
sink. As we observe in practice, though, path constraints regularly
impose restrictions on the generated payload, leaving current tech-
niques inapt. In the following, we discuss the considerations that
lay the foundation of our different types of Exploit Templates, i.e.,
templates for XSS and those for client-side state manipulation.
XSS Templates. The overall goal of our XSS Templates is to im-
pose restrictions on the object that ends up in a sink such that an
attacker can execute arbitrary code in the page while allowing as
many degrees of freedom as possible concerning the exact circum-
stances. In general, we distinguish two cases depending on whether
the sink that is accessed is an HTML executing sink (e.g., inner-
HTML) or a Javascript sink (e.g., eval). Since HTML parsers are
lenient in the way that they parse HTML and allow for various er-
rors (e.g., auto-closing elements if end tags are not found, or parsing
of broken tags) the former case can be solved relatively easy by re-
sorting to so-called XSS polyglots [2]. These are payloads intended
to break out of as many contexts as possible, before adding pieces
of HTML code that then execute the XSS payload. In these cases,
our very simple constraint that only enforces that the payload is
contained in the string that ended up in the sink suffices. Contrarily
for JS, parsers strictly check the syntax and incorrectly breaking
out of the current context would violate the syntax. Therefore, we
apply various Exploit Templates to capture as many contexts as
possible. A common check enforced by sites is that the string that is
used inside eval must contain an site-specific substring. A generic
template that would capture such a context would essentially ascer-
tain that the string starts with our payload, followed by a JavaScript
comment. This template allows the constraint solver to add any
arbitrary string at the end, and the comment asserts that anything
appended does not tamper with the exploitability.
For more details about the exact Exploit Templates used, we
refer the interested reader to Appendix A for an overview or to our
codebase for the exact implementation.
State Manipulation Templates. The second goal of our attack sce-
nario consists of the manipulation of the client-side state in the
victim’s browser. While there exist cases in which an attacker might
be able to control keys or values of these stores partially, we specifi-
cally target those cases in which an attacker can arbitrarily control
the values as these trivially lead to an infection vector for persistent
client-side XSS [25] or can allow an attacker to circumvent defense
mechanisms, e.g., when the site uses Double Submit cookies to
protect against CSRF [17]. To achieve arbitrary control, we enforce
in our Exploit Templates for state injections that the attacker can
fully control both keys and values of localStorage or cookies.
4.3 Automated Validation
With the generated candidate exploit assignments and our auto-
matic transformation to Javascript objects, we can now use these ob-
jects to call the un-instrumented handler functions directly. While
directly calling functions with our prepared objects does not per-
fectly mimic the behavior of sending postMessages using the API
across origin boundaries, we note that our exploit generation only
sets the data and the origin attributes. We do not make use of prop-
erties that cannot be serialized using the structured clone algorithm
[16]. Thus the data part of our constructed message is guaranteed
to work the same whether or not we make use of the postMessage
API. When origin checks are recorded in crawling, we generate
origins that fulfill the required constraints. Note that these are not
necessarily valid or existing origins, however, enforcing the correct
structure of origins would incur an extensive regular expression
check that would be difficult to solve using our SMT solver. We
assume that whenever we can find an assignment for an origin even
if it is incorrect, that there exists a valid origin that still passes the
constraints on the origins. We verify that this assumption holds for
our investigated handlers when manually analyzing origin checks
found in the wild, as discussed in Section 5.2.
To validate the exploitability, we set our payload to either call
a logging function (in case of XSS) or invoke storage access with
randomized nonces, such that we can later check if the random
key with random value has been successfully set. Only when we
Table 1: Overview of discovered handlers using dangerous sinks and prevalence of vulnerabilities. Table shows total number
of handlers (by file hash), unique handlers (by structural hash), and vulnerable handlers. Additionally, outlines how many
handlers had origin checks and how many sites were affected by the vulnerable handlers.
vulnerable handlers with origin check without origin check
number
number
number
43
4
16
3
1
1
66
18
30
47
sites
166
12
54
5
3
1
240
110
31
140
111
379
18
1
4
2
0
0
24
2
7
9
32
sites
110
1
35
4
0
0
149
4
8
12
160
25
3
12
1
1
1