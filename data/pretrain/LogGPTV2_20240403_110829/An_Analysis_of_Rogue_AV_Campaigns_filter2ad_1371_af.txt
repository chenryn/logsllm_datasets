ized view of DNS poisoning. Further, it works in an automated manner with minimal
human intervention. Anax is able to perform these measurements without being on the
same network path as the attacker and victim. During our experiments, Anax was able to
20
M. Antonakakis et al.
successfully detect 319 unique poisoned resource records (RRs) that were subsequently
manually veriﬁed as DNS poisoning attacks. In addition, because Anax works on arbi-
trary DNS caches, it can also protect local networks against poisoning even when the
local resolver is not open recursive.
Anax relies on a fundamental observation about DNS. Despite being dynamic, DNS
records generally direct users to a known, usually stable set of NS records. Poisonings
on the other hand, generally redirect victims to new, different IP addresses often set
up for furtive, short-lived harvesting of information (such as banking credentials, credit
card numbers and email passwords). We therefore created detection heuristics that note
the statistical DNS properties of answers. Our analysis shows that our features are stable
even against signiﬁcant changes in legitimate DNS hosting.
We operated the Anax poisoning detection system for several months, resulting in
a database of tens of millions of DNS answer records. Using extensive classiﬁcation
ﬁlters and heuristics we can reliably label the majority of the IPs in recorded RRs.
Using manual effort we veriﬁed by hand and labeled the remaining 1,264 unique IPs
address record as “legitimate” and “poisonous”. This labeled data set was then used to
train and test our detection module, as described in Section 3. The evaluation of Anax
based upon real world data proved so promising that it makes our system an efﬁcient
real-time poisoning detection system.
The remainder of this paper is organized as follows. Section 2 provides in-depth
technical details of poisoning attacks and related work. Section 3 presents the detection
methodology that Anax utilizes. Section 4 details our experiments with Anax, including
validation and labeling steps of Anax’s dataset. In Section 5 we elaborate on the details
of the detection heuristics that Anax uses and present the detection results based on our
real-world data analysis. Finally, we conclude in Section 6.
2 Background and Related Work
This section offers a brief overview of the Domain Name System (DNS), addressing
aspects relevant to poisoning and detection. Readers familiar with DNS may skip over
this section. Further background on DNS can be found in (37).
2.1 Background on DNS Poisoning
DNS provides a distributed database of domain names organized as a tree structure.
A domain name is a node in the tree and is labeled with the minimum path used to
reach the node from the root. When expressed as a fully qualiﬁed domain name, each
node is a label separated by period. A zone is a collection of nodes under a common
parent. Such collections form a subtree, the top of which is called the start of authority.
Authority DNS servers answer queries about nodes in their zones, and generally provide
answers about mappings of leaf nodes (or terminus nodes), or a referral to another
sibling authority when sub-zones have been delegated to another authority server. The
answers from such authority servers are recorded by recursive DNS servers for caching
on local networks.
Although DNS poisoning could occur between the stub and forwarder (step one), or
the forwarder and resolver (step three), we are primarily concerned with attacks on the
A Centralized Monitoring Infrastructure for Improving DNS Security
21
Stub 
Resolver
1
2
Application
Resolver
4
Caching
Forwarder
3
Resolver
Master
5
Zone
File
7
6
Secondary
Secondary
Dynamic
Update
Recursive
Iterative
Fig. 1. An overview of DNS resolution, and risks posed at each phase of the resolution path. DNS
poisoning is most commonly concerned only with risks experienced on step four, the communi-
cation between resolvers and authorities.
path between the resolver and authority (step four in Figure 1). This path is by necessity
exposed to the Internet. Since DNS responses are (with noted exceptions (36)) usually
a single UDP packet, attackers can send large numbers of spoofed, malicious answers
that are “off-path”. By “off-path” we mean that an attacker can spoof a UDP packet,
claiming to be the authority for a zone from any point on the Internet. Witnessing such
poisoning attacks requires the observer to be “on-path” (e.g., as a transit provider or
below/above the resolver). If one is not “on-path”, it is often difﬁcult to observe such
DNS attacks (15).
The basic properties of traditional and Kaminsky-class DNS poisoning attacks have
been extensively studied (15; 16; 27). The Kaminsky-class of DNS attack greatly speeds
up traditional DNS poisoning attacks that have historically been done by changing stub
DNS settings (16), shown in step two of Figure 1. This increase in the attack speed
due to Kamisnky class of poisoning can be achieved by repeatedly attempting to poison
“new” nonce names in a zone of interest. Even a bandwidth limited attacker will eventu-
ally win the packet race for one of the nonce child names (14), allowing for replacement
of the NS-type of record in cache. Recent industry studies have noted that DNS ma-
nipulations are not only used for phishing, but commonly used for “click-fraud” and by
spammers to drive trafﬁc to malicious sites (32), as well.
2.2 Related Work
Our work combines ideas from two areas of literature: DNS cache poisoning detection
and Internet-wide DNS-based measurement. While Anax is the ﬁrst system to detect
Kaminsky-style DNS cache poisoning, it owes much to previous related research.
DNS cache poisoning is not a new phenomenon. Cache poisoning has been a known
vulnerability in DNS since at least 1993 (33), and has seen a resurgence issue in 1997 (35),
2002 (10), 2007 (25), and 2008 (23). Despite many years of research in eliminating cache
poisoning, the latest attack was judged serious enough to warrant multi-vendor coordi-
nated patching (3).
Several vulnerability assessment tools and technologies allow the discovery of DNS
vulnerabilities often caused by misconﬁguration. Nessus (1) and speciﬁc DNS related
tools such as DNSStuff (17) and PorkBind (11), detect DNS servers vulnerable to spe-
ciﬁc cache poisoning attacks. In contrast, Anax detects actual cache poisoning instead
of vulnerabilities.
22
M. Antonakakis et al.
No available tool exists to detect actual in-cache poisoning. DoX (41) would use a
peer-to-peer network to detect cache poisoning, but it has never been tested in practice
nor deployed on the Internet, and this system would require a signiﬁcant infrastructure
and the cooperation of other DoX nodes to be effective. In contrast to DoX, Anax is a
centralized system, does not require any external cooperation, and has been tested on
real world network scenarios.
Several solutions, such as DNSSEC (6; 7), DNSCurve (9), 0x20 encoding (15) and
WSEC-DNS (27), have been proposed to eliminate cache poisoning vulnerabilities en-
tirely. While these solutions would reduce or eliminate cache poisoning, they require
explicit or implicit changes to the DNS protocol, are not widely deployed, or are not
likely to ﬁnd wide-spread adoption in the short term (maybe except DNSSEC).
Internet-wide measurement via DNS has been previously used to estimate delay be-
tween two arbitrary hosts in King (21). Anax’s goal is not to measure distances between
arbitrary hosts, as King does, but to collect IP information about a set of “domain names
of interest” (detailed in Section 3.2) that King does not. Internet-wide DNS poisoning
scans have been performed by The Measurement Factory (20), but these scans only in-
vestigate parent zone poisoning, to which very few name servers are vulnerable, while
Anax can detect Kaminsky-class attacks, to which many currently deployed servers
are vulnerable. Anax is also able to detect cache poisoning targeted at a speciﬁc re-
solver or set of resolvers. Wendlandt et al. (38), proposed “Perspectives”, a system that
uses multiple hosts to verify a server’s public key. Our system has a similar scanning
methodology but the scope of the two systems is orthogonal; Anax deals with DNS RR
validation within cache, while “Perspectives” reactively validates public keys.
Finally, we note that our work has a superﬁcial similarity to the Notos domain reputa-
tion system (5). Notos, created by many of the same authors of this work, uses machine
learning to assign a reputation score to unknown domains according to given trained
categories (e.g., spam-related domains, botnet domains). In contrast, the present study
uses a very limited set of features to identify poisonous DNS records. While Notos al-
lows one to identify groups of similar domains, Anax lets one judge the integrity of
selected in-cache records.
3 Methodology
In this section we describe the methods that Anax uses to detect cache poisoning. We
start with a discussion of the features inherent to cache poisoning attacks, in particular
how poisoning attacks may be detected by observing changes in records cached by
open-recursive DNS server (ORDNS).
Figure 2 shows the overview of the Anax poisoning detection system. In step one
the scanning engine sends to the scanning host a list of domain names and ORDNS
servers. The raw DNS answers from scanning (step two) are stored in the raw DNS
data collector. A one-time training step labels and veriﬁes a portion of these records
(step three). After manually labeling the dataset, we send it to the detection engine for
modeling (step four). The resulting models around the benign and poisonous classes of
RRs will be stored in the Anax DB. At this point the system can be directly utilized (step
ﬁve) to classify new unknown RRs in DNS answers as they arrive from the scanning
A Centralized Monitoring Infrastructure for Improving DNS Security
23
Anax Poisoning Detection System
OFF-LINE Mode (Training)
[2]
[1]
DNS 
Scanning 
Engine
.
.
.
.
.
.
Raw DNS
Data Collector
DNS Scanning 
Points
Poisoning
Alert
[6]
[3]
[5]
Anax 
Poisoning 
Detection 
Engine
Anax Data 
Preparation 
Engine
[4]
Anax DB
ON-LINE  Mode
Fig. 2. Anax Poisoning Detection System
points to the raw DNS data collector. Then, Anax can be switched to an on-line mode,
and detect new poisonous records using step six.
3.1 Abnormality in DNS Answers Due to Cache Poisoning
Kaminsky-class attacks have made cache poisoning even easier, especially against un-
patched servers or servers that cannot take advantage of full source port randomization
due to network conﬁgurations like NAT. As noted in section 2, poisoning attacks cre-
ate inherently local impacts, making it hard to observe once you are “off-path” of the
resolver.
The consensus of answers observed in the wild can be used to validate the resource
records (RRs) presented as valid answers. In practice, there are several nuances to this
simple approach. DNS can be used for load balancing, localizing content, and to mon-
etize typographical errors, so query results often vary, even without malicious manip-
ulation. To avoid effects of load balancing and content localization, it is necessary to
obtain consensus results based on network and geographic diversity.
An ORDNS that has been the victim of a cache poisoning attack, will answer “on-
path” queries using somehow different IP(s) in these RRs (Table 1, lower sub-table)
or NS(s) that cannot be correlated with the domain name we try to resolve (Table 1,
upper sub-table). Usually these IP(s) point to a different, attacker controlled server.
The answer for the poisoned record should inevitably contain at least a single different
IP than the IPs found in legitimate RRs for the same domain name. As noted in Sec-
tion 2, the only possible way to observe this variation in answers is to be “on-path”
with the ORDNS. In other words, one needs to be able to directly query the resolver for
the poisoned RR. Since we did not have access to customer transit data for this study,
we generated such data by utilizing two DNS scanning points: one located in Califor-
nia and one located in Ottawa. Using these two scanning points we probed a large,
geographically and network diverse set of open recursive DNS servers, as discussed
below.
24
M. Antonakakis et al.
Table 1. Poisoning cases observed by Anax. In the upper part of the table we can see NS replace-
ments observed in NS-type RRs. In the lower table we can see IPs in A-type RRs that were
manually labeled as poisoning cases. With the ORDNS column we provide the type of ORDNS
software from the poisoned resolver using the fpdns tool.
NS
Domain Name
amazon.com
CC
hu-bud02a-dhcp09-main.chello.hu HU
americanexpress.com c.exam-ple.com PA
americanexpress.com d.exam-ple.com PA
bankofamerica.com 209.59.194.246 US
bankofamerica.com 209.59.195.246 US
CC
BR CYBERWEB
americanexpress.com 189.38.88.129
Domain Name
Owner
IPs
Date
ORDNS
Cisco CNR
BIND 9.2.3
2009-07-26
2009-03-20
2009-05-05 Win DNS NT4
2009-06-18 Win DNS 2003
2009-06-18 Win DNS 2003
ORDNS
BIND 9.2.3
google.com
visa.com
85.10.198.253 DE HETZNER-AS Win DNS 2000
JP
update.microsoft.com 205.178.145.65 US
61.207.9.4
google.com
65.98.8.192
OCN NTT
Net. Sol.
BIND 9.2.0
No Match
US FORTRESSITX QuickDNS
To identify Kaminsky-class attacks (NS-type record replacements) and simple
DNS poisonings (A-type record manipulations), Anax relies on an inherent feature
of DNS poisoning: namely, that the poisoned ORDNS will report cached RRs that are
“abnormal” with respect to zone and the IP address space. We deﬁne as an abnormal the
RR with an IP that should not reside nor can be linked in any way with the poisoned
zone’s “network provisioning” — a network that can be associated with the zone’s
operator or a major Content Delivery Network (CDN). For example, a poisonous NS
record for amazon.com will point hosts to an authoritative name server (ANS) outside
of Amazon’s typical DNS provisioning address space. In other words, the IP address of
the attacker controlled ANS along with the IP address in the poisoned A-type records,
cannot be linked with Amazon’s IP address space or even worse it might be in dynamic
address space. This variation in the RRs can be measured externally as long as we can
be “on-path” with the ORDNS.
3.2 Probes and Measurements
Anax’s poisoning detection works in three discrete phases: preparation, measurement,
and analysis. The preparation phase consists of collecting IP addresses of open-recursive
DNS servers located throughout the world, determining which domains could be likely
targets of poisoning attacks, and probing open-recursive servers for poisoning detection
(DNS Scanning Engine, Figure 2).
During the measurement phase, Anax’s scanning engine performs a series of queries
while recording matching answers. All the resulting raw DNS trafﬁc is placed in a fully
indexed database (Raw DNS Data Collector, Figure 2). Finally, in the analysis phase
(Data Labeling and Detection Engine, Figure 2), Anax performs a series of checks on
the recorded RRs from all scanned open-recursive servers. Anax will be able to assign a
label for each unique RR of a given zone, and decide its legitimacy. The preparation and
measurement phases are described below; the analysis phase is described in Section 5.
A Centralized Monitoring Infrastructure for Improving DNS Security
25
Preparation. The preparation phase of Anax is composed of three parts: the gathering
of ORDNS servers, the identiﬁcation of domains likely to be poisoned, and the probing
of each ORDNS server for poisoning detection. ORDNS servers are gathered using the
method proposed by Dagon, et al. in (16). Using this method, we were able to obtain
8,274,341 open-recursive DNS servers distributed throughout the world. Anax also pe-
riodically re-checks DNS resolvers to ensure they continue to behave as open-recursive
servers. It is very expensive to regularly probe all discovered ORDNS, therefore we
sampled a smaller but geographically diverse set of 300,000 ORDNSs. We made hun-
dreds of thousands of DNS queries to a large, geographically and network diverse set
of these 300,000 ORDNSs for 131 zones of interest. A small glimpse of the overall
ORDNS diversity from our scanning list with regard to the country code (CC), the au-
tonomous systems (AS) and CIDR block can be found in Figure 4.
Since traditional cache poisoning attacks only affect DNS cache entries for a spe-
ciﬁc domain, poisoning may only be checked on a per-domain basis. To create a list of
domains that are likely to be attacked, we combined the top 100 worldwide websites as
ranked by Alexa with the world’s top 100 e-business websites, yielding 131 unique do-
mains. These 131 domains are globally distributed, focus on a variety of industries, and
all have very high visitor counts. To the best of our knowledge, none of these domains
are used for malicious operation, and theoretically the domain names and IPs from these
sites should not be part of any black list. The amount of ﬁnancial transactions conducted
through these sites also makes them very tempting targets for phishing attacks (as noted
by several on-line phishing analysis resources (34)), that potentially could be staged via
DNS poisoning. We refer to this list of 131 domains as the “domains of interest”.
Measurement. Anax uses repeated queries to discover IP address records for the do-
mains of interest. Using the following scanning protocol, Anax maintains A-type
record information and NS-type record information for the domains of interest.
Anax’s scanning points issue a series of typical DNS queries like the one presented
in Figure 3. These scan points use such queries in order to capture the on-path behavior
of the ORDNS. A scan point always makes four types of queries to an ORDNS for
each of the domains of interest. The type of queries are A, NS, MX and AAAA. The main
Anax's DNS 
Scanning Point
Open Recursive 
 ANS for example.com
DNS
A ? example.com
A ? example.com
example.com IN 
A 192.0.32.10
example.com IN 
A 192.0.32.10
Fig. 3. A typical A-type query for ex-
ample.com to an open-recursive server
(ORDNS). In this case the ORDNS’s cache
is empty, and the ORDNS needs to ask the
authoritative name server (ANS) of exam-
ple.com in order to ﬁnd the IP that is cur-
rently “mapped” to the domain name.
CC #ORDNS #ASs #CIDRs