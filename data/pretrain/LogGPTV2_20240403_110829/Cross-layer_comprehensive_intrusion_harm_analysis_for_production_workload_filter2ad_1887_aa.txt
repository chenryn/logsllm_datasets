title:Cross-layer comprehensive intrusion harm analysis for production workload
server systems
author:Shengzhi Zhang and
Xiaoqi Jia and
Peng Liu and
Jiwu Jing
Cross-Layer Comprehensive Intrusion Harm Analysis for
Production Workload Server Systems
Shengzhi Zhang
Department of Computer
Science and Engineering,
Pennsylvania State University,
University Park, USA
PI:EMAIL
Xiaoqi Jia
State Key Laboratory of
Information Security, Institute
of Software, Chinese
Academy of Sciences, China
PI:EMAIL
Peng Liu
College of Information
Sciences and Technology
Pennsylvania State University,
University Park, USA
PI:EMAIL
Jiwu Jing
State Key Laboratory of
Information Security, Graduate
University of Chinese
Academy of Sciences, China
PI:EMAIL
ABSTRACT
Analyzing the (harm of) intrusion to enterprise servers is an
onerous and error-prone work. Though dynamic taint track-
ing enables automatic ﬁne-grained intrusion harm analysis
for enterprise servers, the signiﬁcant runtime overhead in-
troduced is generally intolerable in the production workload
environment. Thus, we propose PEDA (Production En-
vironment Damage Analysis) system, which decouples the
onerous analysis work from the online execution of the pro-
duction servers. Once compromised, the “has-been-infected”
execution is analyzed during high ﬁdelity replay on a sepa-
rate instrumentation platform. The replay is implemented
based on the heterogeneous virtual machine migration. The
servers’ online execution runs atop fast hardware-assisted
virtual machines (such as Xen for near native speed), while
the infected execution is replayed atop binary instrumen-
tation virtual machines (such as Qemu for the implemen-
tation of taint analysis). From identiﬁed intrusion symp-
toms, PEDA is capable of locating the ﬁne-grained taint
seed by integrating the backward system call dependency
tracking and one-step-forward taint information ﬂow audit-
ing. Started with the ﬁne-grained taint seed, PEDA applies
dynamic taint analysis during the replayed execution. Eval-
uation demonstrates the eﬃciency of PEDA system with
runtime overhead as low as 5%. The real-life intrusion stud-
ies successfully show the comprehensiveness and the preci-
sion of PEDA’s intrusion harm analysis.
Categories and Subject Descriptors
D.4.6 [Operating System]: Security and Protection—In-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
formation ﬂow controls
General Terms
Security
Keywords
Cross-layer intrusion harm analysis, heterogeneous virtual
machine migration, forward and backward tracking
1.
INTRODUCTION
Upon system being compromised, a dilemma faced by en-
terprise security technicians is whether to aggressively con-
tinue the service for business continuity or to conservatively
shut down the server for loss constrains. It can be even more
complicated as whether to resume the service from a clean
checkpoint regardless of accumulated system/services state
or to pause the execution for a comprehensive clean-up. In
this scenario, the right decision no doubt relies on a com-
prehensive intrusion harm analysis for the server systems,
e.g., locating the intrusion “breakin” and identifying the in-
trusion “footprint” (infection and cascading eﬀects caused
by infection propagation). However, this basic yet essential
task continues to bother the security technicians for years
as an onerous and error-prone work. Hence, researchers’ at-
tention is caught by how to do automatic ﬁne-grained intru-
sion harm analysis for production workload servers with con-
cerns of precision (without losing ﬁdelity) and performance
(without slowing them down greatly). The recently pro-
posed dynamic taint analysis can be applied to the servers’
online execution to ensure the ﬁdelity of intrusion analy-
sis, while it intuitively causes signiﬁcant runtime overhead
(about 10-40X [21], [17], [15], [14] and [9]). Obviously, run-
ning the online server in that manner is not practical because
business-critical production workload servers can’t tolerate
such overhead.
How to solve this problem in a practical way without los-
ing ﬁdelity depends on whether the following assumption
is assumed true or not. The “taint seed” assumption: the
taint seed is precisely located before the infection diagnosis
297task starts. This assumption is indeed true in some par-
ticular cases. For example, when a remote exploit matches
a newly generated signature after the intrusion event, the
system would know which packet (seen during the past in-
trusion event) should be used as the taint seed. Under this
assumption, solution to the above problem could be inspired
from the ﬁdelity-preserving whole machine replay idea pro-
posed in [8] and [20]. However, the original replay technique
cannot be directly applied because the replay required by
ﬁne-grained infection diagnosis can no longer be performed
on the same online processing computer architecture “inter-
face”. Rather, the replay now needs to be performed on a
binary instrumentation platform (such as QEMU). To tackle
this challenge, we developed a heterogeneous VM (virtual
machine) migration technique, which is quite diﬀerent from
the migration in Aftersight [6] as discussed in Section 7 (Note
that PEDA and Aftersight are two independent works.).
But can we now really claim “mission accomplished”? Our
answer is “perhaps not”, which is based on the observation
that the “taint seed” assumption in many other cases is not
practical. Typically, the intrusion detection may often hap-
pen after attack escalation so that the intrusion symptoms
reported by IDS (intrusion detection system) are not nec-
essarily the “taint seed”. For instance, IDS may report ma-
licious system binary modiﬁcation through integrity check,
but the detected binary modiﬁcation is obviously not the
intrusion root, in other words, the “taint seed”. To be able
to solve the above problem without relying on that not-
very-practical “taint seed” assumption, the following chal-
lenge must be tackled. The “seed-unknown” challenge: when
only some (indirect) symptoms of the intrusion could be
identiﬁed, how to do comprehensive ﬁne-grained intrusion
analysis? Existing backward system call dependency analy-
sis Backtracking [11] can indeed identify the system-object-
level intrusion root (typically a process) from the detected
intrusion symptoms. However, directly treating the system-
object-level intrusion root as taint seed for dynamic taint
analysis will introduce much false positive, due to tainting
the whole process address space and all its following opera-
tions.
In this work, besides solving the problem under the “taint
seed” assumption through a heterogeneous VM migration
technique, we take a novel approach to tackle the “seed-
unknown” challenge. This approach integrates both the back-
ward system call dependency analysis and the forward suspi-
cious data ﬂow analysis. Tracing the system call dependency
graph backward can help us quickly identify the system-
object-level intrusion root. Thereafter, we trace the identi-
ﬁed system-object-level intrusion root to locate the one-step-
down buﬀers that it uses to propagate the intrusion harm.
In this way, the “seed-unknown” challenge can be addressed
by treating those buﬀers as taint seed. Alternatively, we
can also identify the malicious intrusion packets by trac-
ing the processing ﬂow of each suspicious network packet
received by the system-object-level intrusion root. Then,
the “seed-unknown” challenge can be addressed by treating
the memory cells or disk sectors containing the malicious
intrusion packets as taint seed. We have integrated these
novel approaches into our heterogeneous VM migration so-
lution. As a result, we get a rather complete and practical
solution to do post-mortem ﬁne-grained intrusion analysis
for production workload servers under the “seed-unknown”
assumption.
Figure 1: PEDA Architecture
The rest of this paper is organized as follows. Our PEDA
approach is described in Section 2. The design of PEDA
system with details of each functionality is presented in Sec-
tion 3. In Section 4, we focus on the implementation issues
of PEDA system. In Section 5, we evaluate PEDA in terms
of eﬃciency, precision and comprehensiveness. Limitations
and Related works are discussed in Section 6 and Section 7
respectively. Finally, we conclude the paper in Section 8.
2. PEDA APPROACH
The goal of PEDA system is to enable ﬁne-grained intru-
sion analysis for enterprise-level production workload servers
with precision and comprehensiveness. Hence, PEDA de-
composes the intrusion analysis work into three phases: au-
diting phase, intrusion root identiﬁcation phase and infec-
tion diagnosis phase. Figure 1 shows PEDA system architec-
ture with ﬁve functional components: underneath logger, de-
pendency tracking engine, translation engine, infection ana-
lyzer and reconstruction engine. Below, we brieﬂy describe
each phase with several components working in tandem to
fulﬁl our desired functionality.
2.1 Auditing phase
During routine execution of enterprise servers, the under-
neath logger will periodically take a checkpoint of the whole
server system, including disk, raw memory, CPU registers,
RTC (real time clock), I/O devices, DMA, timers and etc.
The whole checkpoint serves as the starting point for replay.
Moreover, non-deterministic events, e.g. external inputs into
the server such as network packets, keyboard inputs, timer
interrupt and etc., between contiguous checkpoints are also
recorded for redelivery during replay. The deterministic exe-
cution of the server systems (from the same initial state) and
the non-deterministic events redelivery can ensure the high
“ﬁdelity” of the replay. This replay in turn helps PEDA to re-
veal “what had happened” since intrusion occurred. In order
to tackle the “seed-unknown” challenge, during the routine
execution of the server system, PEDA needs to record all
the system operations that can cause potential dependency
between system objects. Then, the dependency tracking
engine operates on those system operations to dynamically
generate system-object (ﬁle or process) dependency graph.
Once intrusion symptoms detected, the graph is ready to be
used to quickly identify the ﬁne-grained intrusion root for
dynamic taint analysis.
2.2
Intrusion root identiﬁcation phase
298This phase only works under the “seed-unknown” assump-
tion. Whenever some intrusion symptoms, e.g., system bina-
ries are suspiciously modiﬁed, are captured, the dependency
tracking engine will start to trace these captured symptoms
backward throughout the already-produced system-object
dependency graph. This backward tracking can help us
swiftly identify the system-object-level intrusion root, typi-
cally the network-oriented process. In order to identify the
ﬁne-grained taint seed for infection analyzer, the depen-
dency tracking engine performs one-step-forward auditing
to locate the buﬀers (used by the system-object-level intru-
sion root) containing the taint propagation data. Simultane-
ously, the translation engine translates the logging informa-
tion recorded by the much faster hardware-assisted VM into
the form that the analyzing binary translation based VM
can “understand”. Thus, the later-on replay can be done on
a heterogeneous VM. All the work of dependency tracking
engine and translation engine is done on the backend sys-
tem, without incurring additional runtime overhead to the
online servers.
2.3 Infection diagnosis phase
When the translation engine ﬁnishes the system states and
non-deterministic events translation, the “has-been-infected”
server’s execution is ready to be replayed on the binary in-
strumentation platform with high ﬁdelity. Started with the
ﬁne-grained taint seed either known directly or identiﬁed
by dependency tracking engine, the infection analyzer per-
forms the ﬁne-grained instruction ﬂow taint analysis. Both
the data taint ﬂow and the control taint ﬂow are applied
to prevent some intended attackers crafting code that can
evade the data ﬂow auditing. Generally, the ﬁne-grained
taint analysis can only generate instruction ﬂow dependency,
which contains valuable binary information but lacks oper-
ating system semantics. Therefore, reconstruction engine
is also developed to bridge this kind of “semantic gap” [5]
by dynamically mapping each instruction ﬂow with system
objects. Through the coordination of the infection analyzer
and reconstruction engine, we can provide the cross-layer in-
fection diagnosis results both at the system object layer (full-
of-semantics) and the instruction layer (comprehensive).
3. DESIGN OF PEDA SYSTEM
In this section, we focus on the design of PEDA system by
describing the details of analysis decoupling, heterogeneous
VM migration, ﬁne-grained intrusion root identiﬁcation and
cross layer infection diagnosis.
3.1 Analysis Decoupling
PEDA takes the idea of analyzing the intrusion during
high ﬁdelity replay instead of during the ﬁrst run for the
following reasons. First, replay-based intrusion analysis can