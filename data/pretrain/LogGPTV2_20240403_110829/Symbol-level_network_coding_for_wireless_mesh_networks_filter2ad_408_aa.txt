title:Symbol-level network coding for wireless mesh networks
author:Sachin Katti and
Dina Katabi and
Hari Balakrishnan and
Muriel M&apos;edard
Symbol-level Network Coding for Wireless Mesh Networks
Sachin Katti, Dina Katabi, Hari Balakrishnan, and Muriel Medard
Massachusetts Institute of Technology
ABSTRACT
This paper describes MIXIT, a system that improves the throughput
of wireless mesh networks. MIXIT exploits a basic property of mesh
networks: even when no node receives a packet correctly, any given
bit is likely to be received by some node correctly. Instead of insisting
on forwarding only correct packets, MIXIT routers use physical
layer hints to make their best guess about which bits in a corrupted
packet are likely correct and forward them to the destination. Even
though this approach inevitably lets erroneous bits through, we show
that it achieves high throughput without compromising end-to-end
reliability.
The core component of MIXIT is a novel network code that op-
erates on small groups of bits, called symbols. It allows the nodes
to opportunistically route correctly-received bits to their destination
with low overhead. MIXIT’s network code also incorporates an end-
to-end error correction component that the destination uses to correct
any errors that might seep through. We have implemented MIXIT
on a software radio platform running the Zigbee radio protocol. Our
experiments on a 25-node indoor testbed show that MIXIT has a
throughput gain of 2.8× over MORE, a state-of-the-art opportunistic
routing scheme, and about 3.9× over traditional routing using the
ETX metric.
Categories and Subject Descriptors
C.2.2
[Computer Systems Organization]:
Computer-
Communications Networks
General Terms
Algorithms, Design, Performance, Theory
1
Introduction
This paper presents MIXIT a system that signiﬁcantly improves the
throughput of a wireless mesh network compared to the best current
approaches. In both traditional routing protocols as well as more
recent opportunistic approaches [1, 2], an intermediate node forwards
a packet only if it has no errors. In contrast, MIXIT takes a much
looser approach: a forwarding node does not attempt to recover from
any errors, or even bother to apply an error detection code (like a
CRC).
Somewhat surprisingly, relaxing the requirement that a node only
forward correct data improves throughput. The main reason for this
improvement is a unique property of wireless mesh networks: Even
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 . . . $5.00.
when no node receives a packet correctly, any given bit is likely to be
received correctly by some node.
In MIXIT, the network and the lower layers collaborate to improve
throughput by taking advantage of this observation. Rather than just
send up a sequence of bits, the PHY annotates each bit with SoftPHY
hints [8] that reﬂect the PHY’s conﬁdence in its demodulation and
decoding. The link layer passes up frames to the network layer with
these annotations, but does not try to recover erroneous frames or
low-conﬁdence bits using link-layer retransmissions. Instead, the
network layer uses the SoftPHY hints to ﬁlter out the bits with low
conﬁdence in a packet, and then it performs opportunistic routing on
groups of high conﬁdence bits.
The core component of MIXIT is a new network code that allows
each link to operate at a considerably high bit-error rate compared
to the status quo without compromising end-to-end reliability. Un-
like previous work, the network code operates at the granularity of
symbols 1 rather than packets: each router forwards (using radio
broadcast) random linear combinations of the high-conﬁdence sym-
bols belonging to different packets. Thus, a MIXIT router forwards
symbols that are likely to be correct, tries to avoid forwarding sym-
bols that are likely to be corrupt, but inevitably makes a few incorrect
guesses and forwards corrupt symbols.
MIXIT’s network code addresses two challenges in performing
such symbol-level opportunistic routing over potentially erroneous
data. The ﬁrst problem is scalable coordination: the effort required
for nodes to determine which symbols were received at each node
to prevent duplicate transmissions of the same symbol is signiﬁcant.
MIXIT uses the randomness from the network code along with a novel
dynamic programming algorithm to solve this problem and scalably
“funnel” high-conﬁdence symbols to the destination, compared to a
node co-ordination based approach like ExOR [1].
The second problem is error recovery: because erroneous sym-
bols do seep through, the destination needs to correct them. Rather
than the traditional approach of requesting explicit retransmissions,
MIXIT uses a rateless end-to-end error correcting component that
works in concert with the network code for this task. The routers them-
selves only forward random linear combinations of high-conﬁdence
symbols, performing no error handling.
MIXIT incorporates two additional techniques to improve perfor-
mance:
• Increased concurrency: MIXIT takes advantage of two proper-
ties to design a channel access protocol that allows many more
concurrent transmissions than CSMA: ﬁrst, entire packets need not
be delivered correctly to a downstream node, and second, symbols
need to be delivered correctly to some downstream node, not a
speciﬁc one.
• Congestion-aware forwarding: Unlike previous opportunistic
routing protocols which do not consider congestion information [2,
1], MIXIT forwards coded symbols via paths that have both high
delivery probabilities and small queues.
1A symbol is a small sequence of bits (typically a few bytes) that the code treats as a
single value.
MIXIT synthesizes ideas from opportunistic routing (ExOR [1]
and MORE [2]) and partial packet recovery [8], noting the synergy
between these two concepts. Prior opportunistic schemes [2, 1] often
capitalize on sporadic receptions over long links, but these long links
are inherently less reliable and likely to exhibit symbol errors. By
insisting on forwarding only fully correct packets, prior opportunistic
protocols miss the bulk of their opportunities. Similarly, prior propos-
als for exploiting partially correct receptions, like PPR [8], SOFT [29],
and H-ARQ [16], limit themselves to a single wireless hop, incurring
signiﬁcant overhead trying to make that hop reliable. In contrast, we
advocate eschewing reliable link-layer error detection and recovery
altogether, since it is sufﬁcient to funnel opportunistically-received
correct symbols to their destination, where they will be assembled
into a complete packet.
We evaluate MIXIT using our software radio implementation on a
25-node testbed running the Zigbee (802.15.4) protocol. The main
experimental results are as follows:
• MIXIT achieves a 2.8× gain over MORE, a state-of-the-art packet-
based opportunistic routing protocol under moderate load. The
gain over traditional routing is even higher, 3.9× better aggregate
end-to-end throughput. At lighter loads the corresponding gains
are 2.1× and 2.9×.
• MIXIT’s gains stem from two composable capabilities: symbol-
level opportunistic routing, and higher concurrency, which we ﬁnd
have a multiplicative effect. For example, separately, they improve
throughput by 1.5× and 1.4× over MORE; in concert, they lead to
the 2.1× gain.
• Congestion-aware forwarding accounts for 30% of the throughput
gain at high load.
MIXIT is the ﬁrst system to show that routers need not forward
fully correct packets to achieve end-to-end reliability, and that loosen-
ing this constraint signiﬁcantly increases throughput. MIXIT realizes
this vision using a layered architecture which demonstrates cross-
layer collaborations using clean interfaces: the network code can
run atop any radio and PHY that provides SoftPHY hints, the sys-
tem can run with any MAC protocol (though ones that aggressively
seek concurrency perform better), and the routers are oblivious to
the error-correcting code. This modular separation of concerns eases
implementation.
S
R1
P
R2
P
R3
P
D
P
Figure 1: Example of opportunistic partial receptions: The source, S,
wants to deliver a packet to the destination, D. The ﬁgure shows the
receptions after S broadcasts its packet, where dark shades refer to erro-
neous symbols. The best path traverses all routers R1, R2 and R3. Tra-
ditional routing makes R1 transmit the packet ignoring any opportunis-
tic receptions. Packet-level opportunistic routing exploits the reception
at R2 but ignores that most of the symbols have made it to R3 and D.
MIXIT exploits correctly received symbols at R3 and D, beneﬁting from
the longest links.
MAC which exploits the looser constraints on packet delivery to
signiﬁcantly increase concurrent transmissions, MORE uses carrier
sense and requires correct packet delivery which prevents it from
achieving high concurrency. MIXIT’s network code also builds on
recent advances in extending network coding to scenarios with errors
and adversaries [7, 12]. In contrast to all these schemes, MIXIT only
codes over symbols above a certain conﬁdence threshold, while using
coding coefﬁcients that reduce overhead.
MIXIT also builds on prior work on “soft information”, whose
beneﬁts are well known [25, 4, 27]. Soft information refers to the
conﬁdence values computed in some physical layers when it decodes
symbols. Recent work [8] has developed the SoftPHY interface to
expose this information to higher layers in a PHY-independent man-
ner by annotating bits with additional hints. Thus far, the use of these
hints at higher layers has been limited to improving link reliability
by developing better retransmission schemes [8] or to combine con-
ﬁdence values over a wired network to reconstruct correct packets
from erroneous receptions [29]. In contrast, MIXIT uses SoftPHY
hints in a new way, eschewing link-layer reliability in favor of spatial
diversity to achieve high throughput and reliability.
MIXIT is philosophically similar to analog and physical layer net-
work coding [10, 22], but it operates on symbols (i.e., bits) rather than
signals; this difference is important because making a soft digital de-
cision at an intermediate node improves efﬁciency by preventing the
forwarding of grossly inaccurate information. And more importantly,
it is a simpler design that ﬁts in well with a layered architecture, so
one can use the same network layer with a variety of physical layer
schemes and radio technologies. MIXIT uses SoftPHY to propagate
cross-layer information using a clean, PHY-independent interface.
2 Related Work
3 Motivating Examples
Laneman et.al. [14] develop and analyze a series of information-
theoretic schemes to exploit wireless co-operative diversity. MIXIT
builds on the intuition, but with two important differences that admit
a practical design. First, intermediate nodes use SoftPHY hints to
“clean” the symbols before processing and forwarding them, rather
than just receiving, combining, and forwarding information at the
signal level. Second, nodes use intra-ﬂow symbol-level network
coding, which allows them to coordinate and collaborate without
requiring ﬁnely synchronized transmissions that many “co-operative
diversity” approaches entail.
MIXIT builds on prior work on opportunistic routing [1, 2], spatial
diversity [18], and wireless network coding [11]. In particular, it
shares the idea of intra-ﬂow network coding with MORE [2], but with
three key differences: ﬁrst, MORE operates on packets and cannot
deal with packets with errors; second, MIXIT’s symbol-level network
code is an end-to-end rateless error correcting code while MORE’s
network code cannot correct errors; and third, MIXIT designs a
This section discusses two examples to motivate the need for mech-
anisms that can operate on symbols that are likely to have been
received correctly (i.e., on partial packets). These examples show two
signiﬁcant new opportunities to improve throughput: far-reaching
links with high bit-error rates that allow quick jumps towards a desti-
nation even when they might never receive entire packets correctly,
and increased concurrency using a more aggressive MAC protocol
that induces higher bit-error rates than CSMA. The underlying theme
in these examples is that one can improve throughput by allowing,
and coping with, higher link-layer error rates.
First, consider Fig. 1, where a source, S, tries to deliver a packet
to a destination, D, using the chain of routers R1, R2, and R3. It
is possible that when the source broadcasts its packet, R1 and R2
hear the packet correctly, while R3 and D hear the packet with some
bit errors. Traditional routing ignores the “lucky” reception at R2
and insists on delivering the packet on the predetermined path, i.e.,
it makes R1 forward the packet to R2 again.
In contrast, recent
Sa
Sb
R1
Pa
R2
Pa
R3
Pb
R4
Pb
Da
Db
Figure 2: Concurrency example: The ﬁgure shows the receptions when
the two sources transmit concurrently. Without MIXIT, the two sources
Sa and Sb cannot transmit concurrently. MIXIT tolerates more bit errors
at individual nodes, and hence is more resilient to interference, increas-
ing the number of useful concurrent transmissions.
opportunistic routing protocols (such as ExOR) capitalize on such
lucky receptions (at R2) to make long jumps towards the destination,
saving transmissions.
By insisting on forwarding fully correct packets, however, current
opportunistic protocols miss a large number of opportunities to save
transmissions and increase throughput; in particular, they do not take
advantage of all the correct bits that already made it to R3 and even
to the destination, D. Moreover, because of spatial diversity [18, 25],
the corrupted bits at R3 and D are likely in different positions. Thus,
R3 has to transmit only the bits that D did not receive correctly for
the destination to get the complete packet. A scheme that can identify
correct symbols and forward them has the potential to signiﬁcantly
reduce the number of transmissions required to deliver a packet.
Next, consider an example with potential concurrency as in Fig. 2,
where two senders, Sa and Sb, want to deliver a packet to their respec-
tive destinations, Da and Db. If both senders transmit concurrently,
the BER will be high, and no router will receive either packet cor-
rectly. Because current opportunistic routing protocols insist on
correct and complete packets, the best any MAC can do is to make
these senders transmit one after the other, consuming two time slots.
But interference is not a binary variable. In practice, different
routers will experience different levels of interference; it is likely the
routers close to Sa will receive packet, Pa, with only a few errors,
while those close to Sb will receive packet Pb, with only some errors.
A scheme that can identify which symbols are correct and forward
only those groups of bits can exploit this phenomenon to allow the
two senders to transmit concurrently and increase throughput. It can
then “funnel” the correct symbols from the routers to the destination.
MIXIT aims to realize these potential beneﬁts in practice. It faces
the following challenges:
• How does a router classify which symbols in each received packet
are likely correct?
• Given the overlap in the correct symbols at various routers, how
do we ensure that routers do not forward the same information,
wasting bandwidth?
• How do we avoid creating hotspots?
• When is it safe for nodes to transmit concurrently?
• How do we ensure that the destination recovers a correct and
complete version of the source’s data?
The rest of this paper presents our solutions to these problems in
the context of the MIXIT architecture, which we describe next.
4 MIXIT Architecture
MIXIT is a layered architecture for bulk transfer over static mesh
networks. The layers are similar to the traditional PHY, link and net-
work layers, but the interfaces between them, as well as the functions
carried out by the network layer, are quite different. The physical and
link layers deliver all received data to the network layer, whether or
not bits are corrupted. Each packet has a MIXIT header that must be
received correctly because it contains information about the destina-
tion and other meta-data; MIXIT protects the header with a separate
forward error correction (FEC) code that has negligible overhead.
Rather than describe each layer separately, we describe the func-
tions carried out at the source, the forwarders, and the destination for
any stream of packets.
4.1 The Source
The transport layer streams data to the network layer, which pre-
processes it using an error-correcting code as described in §9. The
network layer then divides the resulting stream into batches of K pack-
ets and sends these batches to the destination sequentially. Whenever
the MAC permits, the network layer creates a different random linear
combination of the K packets in the current batch and broadcasts it.
MIXIT’s network code operates at the granularity of symbols,
which we deﬁne as a group of consecutive bits of a packet. The group
could be the same collection of bits which are transmitted as a single
physical layer symbol (PHY symbol) by the modulation scheme (e.g.,
groups of 4 bits in a 16-QAM scheme), or it could be larger in extent,
covering a small number of distinct PHY symbols. The jth symbol
in a coded packet, s′
j, is a linear combinations of the jth symbols in
the K packets, i.e., s′
j = ∑i visji, where sji is the jth symbol in the ith
packet in the batch and vi is a per-packet random multiplier. We call
~v = (v1, . . . , vK) the code vector of the coded packet. Note that every
symbol in the packet created by the source has the same code vector.
The source adds a MIXIT header to the coded packet and broad-
casts it. The header describes which symbols were coded together.
This description is easy to specify at the source because all symbols
in a coded packet are generated using the packet’s code vector,~v. The
header also contains an ordered list of forwarding nodes picked from
its neighbors, each of which is closer to the destination according to
the metric described in §7.
4.2 The Forwarders
Each node listens continuously whenever it is not transmitting, at-
tempting to decode whatever it hears. When the PHY detects a packet,
it passes the subsequent decoded bits along with SoftPHY hints that
reﬂect its conﬁdence in the decoded bits. The network layer gets this
information and uses it to classify symbols into clean and dirty ones.
A clean symbol is one that is likely to be correct, unlike a dirty one.
§5 describes how the MIXIT network layer classiﬁes symbols.
When a node gets a packet without header errors, it checks whether
it is mentioned in the list of forwarders contained in the header. If
so, the node checks whether the packet contains new information,
i.e., is “innovative” [13]. A packet is considered innovative if its
code vector ~v is linearly independent of the vector of the packets
the node has previously received from this batch. Checking for
independence is straightforward using Gaussian elimination over
these short vectors [13]. The node ignores non-innovative packets,
and stores the innovative packets it receives from the current batch,
preserving the “clean” and “dirty” annotations.
i
)
e
c
n
a
t
s
D
g
n
m
m
a
H
i
i
(
t
n
H
Y
H
P
t
f
o
S
 16
 14
 12
 10
 8
 6
 4