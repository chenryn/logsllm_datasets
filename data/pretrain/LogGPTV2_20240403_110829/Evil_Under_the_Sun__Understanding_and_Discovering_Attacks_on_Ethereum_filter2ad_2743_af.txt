day
80/70
85/75
75/65
# attacker
EOAs/0-day
# exploit
transactions/0-day
42,661/8,237
214,408/106,436
35,955/3,650
143,179/39,908
18,466/6,545
118,755/80,419
transaction clusters with 30,888 transactions. We found that
3,671 clusters are indeed related to attack incidents and 3,347
clusters are at the right attack stage.
Table 10 summarizes our ﬁndings. Our study reveals that
Ethereum Dapps attacks are indeed prevalent, compromising
various kinds of Dapps through different attack vectors. We
observe that 57.3% of the victim Dapps are in the category of
Gambling. To support the gambling functionality, these Dapps
need to generate random numbers, which sometimes are im-
plemented by a weak PRNG, thereby exposing the Dapps to
the bad randomness attack. Note that in our study, 82% of
the Dapps scanned by DEFIER were observed under attacks.
This might be because the Dapps we analyzed were highly
popular with large balances, which makes them more likely
to be targeted by the miscreants. Also, among the 85 victim
Dapps found in the exploit transactions, 75 (e.g., SpaceWar
and SuperCard) were never reported before.
To understand the economic impacts of these abusive ac-
tivities, we estimate the ﬁnancial loss of the victim Dapp. In
particular, for each victim Dapp, we calculate its income and
cost difference of the exploit transactions. Table 12 shows
the victim Dapps with the top-5 largest losses. The total loss
inﬂicted by the attacks on these ﬁve Dapp is estimated to be
28,485 Ethers.
Table 11 shows the number of Dapps found in each of the at-
tack stages. Interestingly, our model identiﬁes 214,408 attack
preparation transactions associated with 80 Dapps. We found
507 functions were tested by the adversaries. Interestingly,
311 functions were indeed exploited in the exploitation stage.
It indicates that our model can help identify the vulnerable
functions before they are exploited.
Table 12: Top-5 victim Dapps with largest losses.
Dapp
LastWinner
Fomo3D
Dice2Win
Fomo Short
SuperCard
# transac-
# exploit
tions
561,845
438,062
69,874
52,431
43,897
transactions
101,304
83,833
8,919
4,075
6,315
Revenue
(Eth)
13,295.2
14,630.9
185.0
314.7
59.2
5 Discussion
Mitigation. Based on the results of our measurement study,
we have identiﬁed several potentially effective mitigation
strategies to control the fast-growing Ethereum Dapp attacks.
In our study, we observed several stakeholders (e.g., exploit
developer and money manager) in the Ethereum Dapp crimi-
nal ecosystem. Identifying such upstream criminal roles and
monitoring or even restricting their activities (e.g., blocking
them from accessing Dapps) could prevent attacks at the early
stage (see Section 3.2).
Also, for the Dapp owner, an effective way to mitigate
the threats she is facing is to detect an exploit attempt at
its preparation stage, and also keep track of the exploits on
similar Dapps to prevent the propagation attack. Particularly,
since DEFIER identiﬁes each stage of the kill chain without
depending on other stages’ information, it can be utilized for
the attack preparation investigation. Also, as mentioned in
Section 4.5, we found that 62% of the functions tested by
the attackers at the preparation stage were indeed exploited
later. Identifying these functions would help the Dapp owner
to locate the vulnerabilities in her Dapp. In addition, our
study reveals the prevalence of the attack propagation stage, in
which attackers reuse their exploit on one target against other
similar Dapps. Therefore, to prevent the attack propagation,
the owner can use DEFIER for exploitation monitoring on
her Dapps with similar functionalities and take actions before
attacks happen.
Limitation of DEFIER. Our design is limited by the informa-
tion it uses: historical transactions and their execution traces.
Although these transactions provide valuable sources for at-
tack investigation, they miss the attack operations that do not
generate transactions, such as conducting a local invocation
(e.g., eth_call) or calling a constant function of a Dapp (e.g.,
constant, view and pure). While those operations are read-
only or do not change the Dapp state, and thus are found to
be rarely exploited in the attack incidents (see Table 14), we
acknowledge that our vantage point might cause some attack
cases to fall through the cracks. We will leave a further study
on the problem to the future research.
Also, as a supervised learning model, DEFIER required
training set which labels transactions by its attack lifecycle.
While we believe our paper yields meaningful CTI implica-
tions, which help data annotation, we acknowledge that the
data annotation for our model can be time-consuming. How-
ever, since the training set aims at capturing high-level and
relatively-stable attack intents, the training set can be used
until those criminal intents change.
The design of DEFIER is based upon high-level threat
intelligence (e.g., kill chain and attack patterns) instead of
ﬁne-grained Dapp-speciﬁc attack operations, and therefore is
robust to the small adjustments of attack activities. However,
the attack that does not exhibit the intent related to the stages
or just involves a single exploit transaction with limited proﬁt
may not be identiﬁed. On the other hand, DEFIER would raise
the bar to Dapp attacks, making them more costly especially
to the adversary who wants to launch the attack on a large
scale to make a proﬁt.
Other blockchain platforms. Our current design is focused
on Ethereum Dapps due to their popularity. However, such
criminal operation mode can also be found in other blockchain
platforms (e.g., EOS). In particular, we conducted a small-
scale study on the attack incidents of EOS Dapps (i.e.,
EOS.WIN, EOSCast and EOSRoyale) and discovered a simi-
lar attack lifecycle and attack patterns from the EOS transac-
tions and their corresponding execution traces.
6 Related Work
Study on Ethereum Dapp security. The security issue on
Ethereum Dapp is attracting increasing attention from re-
searchers. Aside from vulnerability assessment [16, 30, 50],
studies on real-world Ethereum Dapp attacks and frauds are
also conducted to understand the cybercriminal situation on
Ethereum Dapps. For example, Chen et al. [16] studied the
Ponzi scheme Dapps on Ethereum and built a machine learn-
ing based Ponzi scheme Dapp detection tool. Torres et al. [46]
investigated another fraud Ethereum Dapps: honeypot, where
attackers lure victims into vulnerable contracts. The paper in-
troduced a methodology that uses symbolic execution for the
automated detection of honeypot contracts. Chen et al. [15]
identiﬁed abnormal EOA, that creates lots of contracts that
are rarely used, by a threshold-based method. This method
was validated using four denial-of-service EOAs. Atzei et al.
[10] provided a survey on real-world attacks against Ethereum
smart contracts, giving a taxonomy and discussing the vulner-
abilities in detail. However, this work focused on the vulner-
ability assessment and did not study the attacker operations
and the associated kill chain. To the best of our knowledge,
our paper is the ﬁrst to study cybercriminal ecosystem (e.g.,
attack lifecycle, attack infrastructures, campaign organization,
etc.) on real-world Dapp attacks, leveraging the open and
immutable transaction records kept by the Ethereum.
Security event detection and forensic. DEFIER investi-
gated the problem of intrusion detection and forensic analysis,
with a speciﬁc focus on Etherem Dapp attacks. Numerous
studies [21, 38, 43] have looked into security event detection
and forecast in various domains. Recent year witnesses the
trend of understanding high-level event semantics for a more
efﬁcient and effective security event detection. Ben-Asher et
al. [12] quantitatively evaluated the effectiveness of using con-
textual knowledge for detecting cyber-attacks. Ma et al. [31]
proposed a semantics aware program annotation to partition
execution based on the application speciﬁc high level task
structures. Shen et al. [44] used temporal word embedding to
cluster security events under similar context and track their
evolution. Hassan et al. [26] proposed a threat alert triage
system that features historical and contextual information to
automatically triage alerts. The closest work to our study is
HOLMES [35], a real-time APT detection system that gen-
erates a high-level graph, that summarizes the attacker’s kill
chain steps, to identify behavior associated with known attacks
based on frequency analysis. In contrast to previous works,
the kill chain and the associated attack operations are under
explored in the domain of Ethereum Dapp attacks, which
turned out to be very different from the traditional APT kill
chain. In our study, we ﬁrst time utilize Ethereum transaction
time series analysis based on graph sequence mining to learn
the high-level attack operational intents, which allows us to
accurately detect both known and unknown attacks.
7 Conclusion
In this paper, we report our study on Ethereum Dapp attack
incidents, which consist of a sophisticated attack hierarchi-
cal structure, multiple criminal roles, and various kinds of
attack behaviors. To investigate such attack incidents, we per-
formed the ﬁrst measurement study and forensic analysis on
real-world Dapp attacks, leveraging the open and immutable
transaction records kept by the Ethereum blockchain. In par-
ticular, we propose a methodology to supplement the missing
attack information of Dapp incident reports. Utilizing more
comprehensive attack transactions and their execution traces
for each attack incident, we conduct an empirical study to
recover Dapp cybercriminal’s end-to-end footprints, as well
as the corresponding kill chain and attack patterns. Moving
forward, we believe that there is a great potential to utilize
such threat intelligence to automatically investigate Dapp on
a large scale. Running on 2,350,779 transactions from 104
Ethereum on-chain Dapp, our Dapp investigation tool DE-
FIER, which captures high-level attack intents, successfully
identiﬁed 476,342 exploit transactions on 85 victim Dapps,
which have never been reported before. It sheds on light that
our understanding of Ethereum Dapp cybercrime will help
more effectively defend against this emerging threat.
Acknowledgments
We wish to acknowledge the efforts of the anonymous review-
ers for their insightful comments and suggestions to improve
the quality of our manuscript. We also thank Boxify to share
invaluable Ethereum transaction datasets with us. This work
was supported in part by the NSF CNS-1618493, 1801432,
1838083 and 1850725. CAS authors was supported in part by
the Key Laboratory of Network Assessment Technology of
Chinese Academy of Sciences and Beijing Key Laboratory of
Network Security and Protection Technology. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this paper are those of the authors and do not necessarily
reﬂect the view of our funders.
Availability
The annotated data and the implementation of DEFIER is
available at https://drive.google.com/drive/folders
/1cdD1gHNbWIS228QXmeUReougSL_k1kvf?usp=sharing.
References
[1] dapp ranking. https://www.dapp.com/ranking. Accessed Jul 2,
2019.
[2] Etherscan.
https://etherscan.io/charts#generalInfo. Ac-
cessed Jul 1, 2019.
[3] get transactions by blocknumber etherscan. http://api.etherscan.
io/api?module=account&action=txlist&address=YourAddres
s&startblock=0&endblock=99999999&sort=asc&apikey=YourA
piKeyToken. Accessed: Jul 2, 2019.
[4] get transactions by pagenum etherscan. http://api.etherscan.io
/api?module=account&action=txlistinternal&address=0x2c
1ba59d6f58433fb1eaee7d20b26ed83bda51a3&startblock=0&en
dblock=2702578&sort=asc&apikey=YourApiKeyToken. Accessed:
Jul 2, 2019.
[5] Gmatch4py: a graph matching library for python. https://github.c
om/Jacobe2169/GMatch4py.
[6] Octopus: a security analysis framework for webassembly module and
blockchain smart contract. https://github.com/quoscient/oct
opus.
[7] Online solidity decompiler. https://ethervm.io/decompile.
[8] stateofthedapps. https://www.stateofthedapps.com. Accessed
Jul 2, 2019.
[9] Charu C Aggarwal. Data mining: the textbook. Springer, 2015.
[10] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. A survey of
attacks on ethereum smart contracts. IACR Cryptology ePrint Archive,
2016:1007, 2016.
[11] James Barton.
How many ethereum smart contracts are
there. https://coindiligent.com/how-many-ethereum-smart
-contracts. Accessed Nov 8, 2018.
[12] Noam Ben-Asher and Cleotilde Gonzalez. Effects of cyber security
knowledge on attack detection. Computers in Human Behavior, 48:51–
61, 2015.
[13] Bloxy. bloxy. https://bloxy.info/. Accessed Jul 1, 2019.
[14] Léon Bottou. Large-scale machine learning with stochastic gradient de-
scent. In Proceedings of COMPSTAT’2010, pages 177–186. Springer,
2010.
[15] Ting Chen, Yuxiao Zhu, Zihao Li, Jiachi Chen, Xiaoqi Li, Xiapu
Luo, Xiaodong Lin, and Xiaosong Zhange. Understanding ethereum
via graph analysis. In IEEE INFOCOM 2018-IEEE Conference on
Computer Communications, pages 1484–1492. IEEE, 2018.
[16] Weili Chen, Zibin Zheng, Jiahui Cui, Edith Ngai, Peilin Zheng, and
Yuren Zhou. Detecting ponzi schemes on ethereum: Towards health-
ier blockchain technology. In Proceedings of the 2018 World Wide
Web Conference on World Wide Web, pages 1409–1418. International
World Wide Web Conferences Steering Committee, 2018.
[17] Chris Chinchilla. Ethereum white paper. https://github.com/eth
ereum/wiki/wiki/White-Paper. Accessed Jun 19, 2019.
[18] Usman W Chohan. The cryptocurrency tumblers: Risks, legality and
oversight. 2017.
[19] Hanjun Dai, Bo Dai, and Le Song. Discriminative embeddings of latent
In International conference on
variable models for structured data.
machine learning, pages 2702–2711, 2016.
[20] Thibault de Balthasar and Julio Hernandez-Castro. An analysis of
bitcoin laundry services. In Nordic Conference on Secure IT Systems,
pages 297–312. Springer, 2017.
[21] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar. Deeplog:
Anomaly detection and diagnosis from system logs through deep
learning. In Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, pages 1285–1298. ACM,
2017.
[22] Martin Ester, Hans-Peter Kriegel, Jörg Sander, Xiaowei Xu, et al.
A density-based algorithm for discovering clusters in large spatial
databases with noise. In Kdd, volume 96, pages 226–231, 1996.
[23] Barney G Glaser and Anselm L Strauss. Discovery of grounded theory:
Strategies for qualitative research. Routledge, 2017.
[24] Alex Graves and Jürgen Schmidhuber. Framewise phoneme classiﬁ-
cation with bidirectional lstm and other neural network architectures.
Neural Networks, 18(5-6):602–610, 2005.
[25] Aditya Grover and Jure Leskovec. node2vec: Scalable feature learning
for networks. In Proceedings of the 22nd ACM SIGKDD international
conference on Knowledge discovery and data mining, pages 855–864.
ACM, 2016.
[26] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen,
Kangkook Jee, Zhichun Li, and Adam Bates. Nodoze: Combatting
threat alert fatigue with automated provenance triage. In Network and
Distributed Systems Security Symposium, 2019.
[27] Alyssa Hertig. How ethereum works. https://www.coindesk.com
/information/how-ethereum-works. Accessed Mar 30, 2017.
[28] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory.
Neural computation, 9(8):1735–1780, 1997.
[29] Paul Jaccard. The distribution of the ﬂora in the alpine zone. 1. New
phytologist, 11(2):37–50, 1912.
[30] Johannes Krupp and Christian Rossow. teether: Gnawing at ethereum
to automatically exploit smart contracts. In 27th {USENIX} Security
Symposium ({USENIX} Security 18), pages 1317–1333, 2018.
[31] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang, and
Dongyan Xu. {MPI}: Multiple perspective attack investigation with
semantic aware execution partitioning. In 26th {USENIX} Security
Symposium ({USENIX} Security 17), pages 1111–1128, 2017.
[32] James MacQueen et al. Some methods for classiﬁcation and analy-
sis of multivariate observations. In Proceedings of the ﬁfth Berkeley
symposium on mathematical statistics and probability, volume 1,