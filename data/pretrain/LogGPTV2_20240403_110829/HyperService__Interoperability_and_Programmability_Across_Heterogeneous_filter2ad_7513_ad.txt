call ProtNSB.AddAction(CertiT) to prove CertiT is sent
update SCert .Add(CertiT) and T .state := init
non-blocking wait until ProtNSB.MerkleProof(CertiT) rt. MerkiT
update SMerk .Add(MerkiT)
else: call self.SInitedTrans(sid, T)
compute and sign the on-chain counterpart(cid:101)T for T
compute CertidT := Cert([(cid:101)T , inited, sid, T]; SigV
sid)
(GT , _, SCert, SMerk) := Data[sid]; abort if not found
call ProtCLI.InitedTrans(CertidT) to request opening of initialized T
Northbound
52
sid)
53
54
55
Southbound
call ProtNSB.AddAction(CertidT) to prove CertidT is sent
update SCert .Add(CertidT) and T .state := inited
non-blocking wait until ProtNSB.MerkleProof(CertidT) returns MerkidT
update SMerk .Add(MerkidT)
56
57 Upon Receive RInitedTrans(CertidT) public:
58
59
60
assert CertidT has the valid form of Cert([(cid:101)T , inited, sid, T]; SigD
assert(cid:101)T is correctly associated with the wrapper T
compute CertoT := Cert([(cid:101)T , open, sid, T, tsopen]; SigV
(_, _, SCert, SMerk) := Data[sid]; abort if not found
abort if the CertiT corresponding to CertidT is not in SCert
get tsopen := ProtNSB.BlockHeight()
sid)
call ProtCLI.OpenTrans(CertoT) to request opening for T
call ProtNSB.AddAction(CertoT) to prove CertoT is sent
update SCert .Add(CertoT) and T .state := open
non-blocking wait until ProtNSB.MerkleProof(CertoT) returns MerkoT
update SMerk .Add(MerkoT)
assert Certo
T
(_, _, SCert, SMerk) := Data[sid]; abort if not found
abort if the Certid
T
assert tsopen is within a bounded range with ProtNSB.BlockHeight()
compute Certod
T
has valid form of Cert([(cid:101)T , open, sid, T, tsopen]; SigD
Northbound
sid)
:= Cert([(cid:101)T , open, sid, T, tsopen]; SigD
call ProtBC.Exec((cid:101)T) to trigger on-chain execution
61
62
63
64
65
66
67
68
69 Upon Receive OpenTrans(Certo
T
70
71
72
73
74
corresponding to Certo
T
is not in SCert
sid, SigV
sid)
) public:
T
T
closed
is sent
) public:
assert CT
is not in SCert
closed) public:
Southbound
sid, SigD
sid)
T ) returns Merkod
corresponding to Certod
T
T ) and T .state := opened
call ProtCLI.OpenedTrans(Certod
T ) to acknowledge request
call ProtNSB.AddAction(Certod
T ) to prove Certod
update SCert .Add(Certod
T ) and T .state := opened
non-blocking wait until ProtNSB.MerkleProof(Certod
update SMerk .Add(Merkod
T )
75
76
77
78
79
80
81 Upon Receive OpenedTrans(Certod
T
82
83
84
85
86 Upon Receive CloseTrans(CT
87
ast. Certod
T
(_, _, SCert, _) := Data[sid]; abort if not found
abort if the Certo
T
update SCert .Add(Certod
has valid form of Cert([(cid:101)T , open, sid, T, tsopen]; SigV
has valid form of Cert([(cid:101)T , closed, sid, T, tsclosed], SigD
Bidirectional
assert(cid:101)T is finalized on its destination blockchain and obtain Merkc1T
sid)
assert tsclosed is within a bounded margin with ProtNSB.BlockHeight()
compute CertcT := Cert([(cid:101)T , closed, sid, T, tsclosed], SigD
(_, _, SCert, SMerk) := Data[sid]; abort if not found
call ProtCLI.ClosedTrans(CertcT) to acknowledged request
update SCert .Add(Certc
sid, SigV
sid)
has valid form of Cert([(cid:101)T , closed, sid, T, tsclosed], SigV
sid) is not in SCert
T ), SMerk .Add(Merkc1T ) and T .state := closed
Bidirectional
sid, SigD
sid)
abort if Cert([(cid:101)T , closed, sid, T, tsclosed], SigV
ast. Certc
T
(_, _, SCert, _) := Data[sid]; abort if not found
T ) and T .state := closed
update SCert .Add(Certc
88
89
90
91
92
93
94 Upon Receive ClosedTrans(Certc
95
96
97
98
99 Daemon Redeem(sid) private:
100
101
102
103
104
# Invoke the insurance contract periodically
(GT , cid, SCert, SMerk) := Data[sid]; abort if not found
for each unclaimed T ∈ GT :
get the CertT from SCert SMerk with the most advanced state
call ProtISC.InsuranceClaim(cid, CertT) to claim insurance
T ) public:
Figure 6: Protocol description of of ProtVES. Gray background denotes non-blocking operations triggered by status updates
on ProtNSB. Handlers annotated with northbound and southbound process transactions originated from ProtVES and ProtCLI,
respectively. Handlers annotated with bidirectional are shared by all transactions.


T∈s ∧ T .to=X
T∈s ∧ T .from=X
T .meta.amt −
Additionally, both ProtVES and ProtCLI are required to deposit
sufficient funds to ProtISC to ensure that ProtISC holds sufficient
funds to financially revert all committed transactions regardless
of the step at which the execution aborts prematurely. Intuitively,
each party would need to stake at least the total amount of in-
coming funds to the party without deducting the outgoing funds.
This strawman design, however, require high stakes. More desir-
ably, considering the dependency requirements in GT , an party X
(ProtVES or ProtCLI) only needs to stake
T .meta.amt
max
s∈GS
where GS is the set of all committable subsets in GT , where a subset
s ⊆ GT is committable if, whenever T ∈ s, all preconditions of T
are also in s. For clarity of notation, throughout the paper, when
saying T .from =ProtVES or T is originated from ProtVES, we mean
that T is sent and signed by an account owned by ProtVES. Likewise,
T .from =ProtCLI indicates that T is sent from an account entity
defined in the HSL program. ProtISC refunds any remaining funds
after the contract is terminated.
After the contract is instantiated and sufficiently staked, ProtVES
initializes its internal bookkeeping for the session. The two no-
tations SCert and SMerk represent two sets that store the signed
certificates received via off-chain channels and on-chain Merkle
proofs constructed using ProtNSB and ProtBC.
4.2.2 Protocol Exchange for Transaction Handling
In ProtVES, SInitedTrans and OpenTrans are two handlers process-
ing northbound transactions which originates from ProtVES. The
SInitedTrans handling for T is invoked when all its preconditions
are finalized, which is detected by the watching service of ProtVES
(c.f., § 4.2.3). The SInitedTrans computes CertidT to prove T is in
the inited state , and then passes it to the corresponding handler of
ProtCLI for subsequent processing. Meanwhile, SInitedTrans stakes
CertidT on ProtNSB, and later it retrieves a Merkle proof MerkiT from
the NSB to prove that CertidT has been sent. MerkidT essentially is a
hash chain linking CertidT back to an ActionRoot on a committed
block of the NSB. The proof retrieval is a non-blocking operation
triggered by the consensus update on the NSB.
The OpenTrans handler pairs with SInitedTrans. It listens for a
timestamped CertoT, which is supposed to be generated by ProtCLI
after it processes CertidT from ProtVES. OpenTrans performs special
correctness check on the tsopen enclosed in CertoT. In particular,
ProtVES and ProtCLI use the block height of the NSB as a calibrated
clock. By checking that tsopen is within a bounded range of the
NSB height, ProtVES ensures that the tsopen added by ProtCLI is
fresh. After all correctness checks on CertidT are passed, the state
of T is promoted from open to opened. OpenTrans then computes
certificate to prove the updated state and posts(cid:101)T on its destination
blockchain for on-chain execution. Throughout the paper,(cid:101)T denotes
the on-chain executable transaction computed and signed using
the information contained in T . Note that the difference between
the CertoT received from ProtCLI and a post-open (i.e., opened)
certificate CertodT computed by ProtVES is that latter one is signed by
both parties. Only the tsopen specified in CertodT is used by ProtISC
when evaluating the deadline constraint of T .
Figure 7: The complete on-chain proof (denoted by MerkcT)
to prove that the state of a transaction is eligible to be pro-
moted as closed. The left-side part is the finalization proof
(denoted by Merkc1T ) for the transaction collected from its
destination blockchain; the right-side part is the blockchain
status proof (denoted by Merkc2T ) collected from the NSB.
Southbound transactions originating from ProtCLI are processed
by ProtVES in a similar manner as the northbound transactions, via
the RInitedTrans and OpenedTrans handlers. We clarify a subtlety
in the RInitedTrans handler when verifying the association between
(cid:101)T and T (line 61). If(cid:101)T depends on the resulting state from its up-
of T1 in Figure 4), ProtVES needs to verify that the state used by(cid:101)T
stream transactions (for instance, T4 depends on the resulting state
is consistent with the state enclosed in the finalization proofs of
those upstream transactions.
that an on-chain transaction(cid:101)T is recently finalized, it requests the
4.2.3 Proactive Watching Services
Cross-chain execution makes forward progress when all session-
relevant blockchains and the NSB make progress on transactions.
As the driver of execution, ProtVES internally creates two watching
services to proactively read the status of those blockchains.
In the watching daemon to one blockchain, ProtVES mainly reads
the public ledger of ProtBC to monitor the status of transactions
that have been posted for on-chain execution. If ProtVES notices
closing process for T by sending ProtCLI a timestamped certificate
Cclosed. The pair of handlers, CloseTrans and ClosedTrans, are used
by both ProtVES and ProtCLI in this exchange. Both handlers can
be used for handling northbound and southbound transactions,
depending on which party sends the closing request. In general, a
transaction’s originator has a stronger motivation to initiate the
closing process because the originator would be held accountable
if the transaction were not timely closed by its deadline.
In addition, ProtVES needs to retrieve a Merkle Proof from ProtBC
two purposes: (i) it is the first part of a complete on-chain proof
to prove the finalization of(cid:101)T . This proof, denoted by Merkc1T , serves
to prove that the state(cid:101)T can be promoted to closed, as shown in
Figure 7; (ii) if the resulting state of(cid:101)T is used by its downstream
transactions, Merkc1T is necessary to ensure that those downstream
transactions indeed use genuine state.
In the watching service to ProtNSB, ProtVES performs following
tasks. First, as described in § 4.1.2, NSB is treated as a fallback
communication medium for the off-chain channel. Thus, ProtVES
searches the sorted ActionMT to look for any session-relevant cer-
tificates that have not been received via the off-chain channel. Sec-
ond, for each opened T whose closed attestation is still missing
after ProtVES has sent Cclosed (indicating slow or no reaction from
TxRoot: RxStateRoot: RyTxHash: 0x3…Value AStatusRootBlockchain XBlockID: 2019StateRoot: RyTxRoot: RxValue BBlockchain XThe NSB…………generate the arbitration cod, denoted by contract, as follows
initialize three maps Tstate, Arevs and Fstake
for each T ∈ GT :
compute an internal identifier for T as tid := H(T)
initialize Tstate[tid] := [unknown, T, tsopen=0, tsclosed=0, stproof]
retrieve tid’s fund-reversion account, denoted as dst
initialize Arevs[tid] := [amt=0, dst]
compute an identifier for contract as cid := H(−→0 , contract)
initialize Data[cid] := [GT , Tstate, Arevs, Fstake]
send [cid, contract] to the requester for acknowledgment
(_, _, _, _, Fstake) := Data[cid]; abort if not found
update Fstake[msg.sender] := Fstake[msg.sender] + msg.value
(_, _, Tstate, _, _) := Data[cid]; abort if not found
compute tid := H(Atte.T); T := Tstate[tid] abort if not found
abort if T.state is more advanced the state enclosed by Cert
if Atte is a certificate signed by both parties :
1 Init: Data := ∅
2 Upon Receive CreateContract(GT ):
3
4
5
6