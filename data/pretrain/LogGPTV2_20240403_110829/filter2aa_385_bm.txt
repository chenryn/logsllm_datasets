"IMAGE_DIRECTORY_ENTRY_COPYRIGHT",
"IMAGE_DIRECTORY_ENTRY_GLOBALPTR",
"IMAGE_DIRECTORY_ENTRY_TLS",
"IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG",
"IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT",
"IMAGE_DIRECTORY_ENTRY_IAT",
"IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT",
"IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR",
"IMAGE_NUMBEROF_DIRECTORY_ENTRIES",
}
foridx,directory:=rangeoh32.DataDirectory{❷
fmt.Printf("[!]DataDirectory:%s\n",winnt_datadirs[idx])
fmt.Printf("[+]ImageVirtualAddress:%#x\n",directory.VirtualAddress)
fmt.Printf("[+]ImageSize:%#x\n",directory.Size)
}
/*OUTPUT
[-----DataDirectory-----]
[!]DataDirectory:IMAGE_DIRECTORY_ENTRY_EXPORT❸
[+]ImageVirtualAddress:0x2a7b6b0❹
[+]ImageSize:0x116c❺
[!]DataDirectory:IMAGE_DIRECTORY_ENTRY_IMPORT❻
[+]ImageVirtualAddress:0x2a7c81c
[+]ImageSize:0x12c
--snip--
*/
Listing12-21:ParsingtheDataDirectoryforaddressoffsetandsize(/ch-
12/peParser/main.go)
TheDataDirectorylist❶isstaticallydefinedby
Microsoft,meaningthattheliteralindividualdirectorynames
willremaininaconsistentlyorderedlist.Assuch,theyare
consideredtobeconstants.Wewilluseaslicevariable,
winnt_datadirs,tostoretheindividualdirectoryentriessowecan
reconcilenamestoindexpositions.Specifically,theGoPE
packageimplementstheDataDirectoryasastructobject,so
we’rerequiredtoiterateovereachentrytoextractthe
individualdirectoryentries,alongwiththeirrespectiveaddress
offsetandsizeattributes.Theforloopis0-indexbased,sowe
justoutputeachsliceentryrelativetoitsindexposition❷.
Thedirectoryentriesbeingdisplayedtostandardoutputare
theIMAGE_DIRECTORY_ENTRY_EXPORT❸,ortheEAT,andthe
IMAGE_DIRECTORY_ENTRY_IMPORT❻,ortheIAT.Eachofthese
directoriesmaintainsatableofexportedandimported
functions,respectively,relativetotherunningWindows
executable.Lookingfurtherat
IMAGE_DIRECTORY_ENTRY_EXPORT,youwillseethevirtual
address❹containingtheoffsetoftheactualtabledata,along
withthesize❺ofthedatacontainedwithin.
ParsingtheSectionTable
TheSectionTable,thelastPEbytestructure,immediately
followstheOptionalHeader.Itcontainsthedetailsofeach
relevantsectionintheWindowsexecutablebinary,suchas
executablecodeandinitializeddatalocationoffsets.The
numberofentriesmatchestheNumberOfSectionsdefinedwithin
theCOFFFileHeader.YoucanlocatetheSectionTableatthe
PEsignatureoffset+0xF8.Let’stakealookatthissection
withinahexeditor(Figure12-8).
Figure12-8:TheSectionTable,asobservedusingahexeditor
ThisparticularSectionTablestartswith.text,butitmight
startwithaCODEsection,dependingonthebinary’scompiler.
The.text(orCODE)sectioncontainstheexecutablecode,
whereasthenextsection,.rodata,containsread-onlyconstant
data.The.rdatasectioncontainsresourcedata,andthe.data
sectioncontainsinitializeddata.Eachsectionisatleast40
bytesinlength.
YoucanaccesstheSectionTablewithintheCOFFFile
Header.Youcanalsoaccesseachsectionindividually,using
thecodeinListing12-22.
s:=pefile.Section(".text")
fmt.Printf("%v",*s)
/*Output
{{.text25509328409625509376102400001610612768}[]0xc0000643c0
0xc0000643c0}
*/
Listing12-22:ParsingaspecificsectionfromtheSectionTable(/ch-
12/peParser/main.go)
TheotheroptionistoiterateovertheentireSectionTable,
asshowninListing12-23.
fmt.Println("[-----SectionTable-----]")
for_,section:=rangepefile.Sections{❶
fmt.Println("[+]--------------------")
fmt.Printf("[+]SectionName:%s\n",section.Name)
fmt.Printf("[+]SectionCharacteristics:%#x\n",section.Characteristics)
fmt.Printf("[+]SectionVirtualSize:%#x\n",section.VirtualSize)
fmt.Printf("[+]SectionVirtualOffset:%#x\n",section.VirtualAddress)
fmt.Printf("[+]SectionRawSize:%#x\n",section.Size)
fmt.Printf("[+]SectionRawOffsettoData:%#x\n",section.Offset)
fmt.Printf("[+]SectionAppendOffset(NextSection):%#x\n",
section.Offset+section.Size)
}
/*OUTPUT
[-----SectionTable-----]
[+]--------------------
[+]SectionName:.text❷
[+]SectionCharacteristics:0x60000020❸
[+]SectionVirtualSize:0x1853dd0❹
[+]SectionVirtualOffset:0x1000❺
[+]SectionRawSize:0x1853e00❻
[+]SectionRawOffsettoData:0x400❼
[+]SectionAppendOffset(NextSection):0x1854200❽
[+]--------------------
[+]SectionName:.rodata
[+]SectionCharacteristics:0x60000020
[+]SectionVirtualSize:0x1b00
[+]SectionVirtualOffset:0x1855000
[+]SectionRawSize:0x1c00
[+]SectionRawOffsettoData:0x1854200
[+]SectionAppendOffset(NextSection):0x1855e00
--snip--
*/
Listing12-23:ParsingallsectionsfromaSectionTable(/ch-12/peParser/main.go)
Here,we’reiteratingoverallthesectionswithinthe
SectionTable❶andwritingthename❷,virtualsize❹,virtual
address❺,rawsize❻,andrawoffset❼tostandardoutput.Also,
wecalculatethenext40-byteoffsetaddress❽intheevent
thatwe’dwanttoappendanewsection.Thecharacteristicsvalue
❸describeshowthesectionistobehaveaspartofthebinary.
Forexample,the.textsectionprovidesavalueof0x60000020.
ReferencingtherelevantSectionFlagsdataat
https://docs.microsoft.com/en-us/windows/win32/debug/pe-
format#section-flags(Table12-2),wecanseethatthree
separateattributesmakeupthevalue.
Table12-2:CharacteristicsofSectionFlags
Flag
Value
Description
IMAGE_SCN_CNT
_CODE
0x00000020
Thesectioncontainsexecutablecode.
IMAGE_SCN_MEM
_EXECUTE
0x20000000
Thesectioncanbeexecutedascode.
IMAGE_SCN_MEM
_READ
0x40000000
Thesectioncanberead.
Thefirstvalue,0x00000020(IMAGE_SCN_CNT_CODE),states
thatthesectioncontainsexecutablecode.Thesecondvalue,
0x20000000(IMAGE_SCN_MEM_EXECUTE),statesthatthesection
canbeexecutedascode.Lastly,thethirdvalue,0x40000000
(IMAGE_SCN_MEM_READ),allowsthesectiontoberead.
Therefore,addingallthesetogetherprovidesthevalue
0x60000020.Ifyou’readdinganewsection,keepinmindthat
you’llneedtoupdateallthesepropertieswiththeirappropriate
values.
ThiswrapsupourdiscussionofthePEfiledatastructure.
Itwasabriefoverview,weknow.Eachsectioncouldbeits
ownchapter.However,itshouldbeenoughtoallowyouto
useGoasameanstonavigatearbitrarydatastructures.The
PEdatastructureisquiteinvolvedandit’swellworththetime
andeffortnecessarytobecomefamiliarwithallofits
components.
AdditionalExercises
TaketheknowledgeyoujustlearnedaboutthePEfiledata
structureandexpanduponit.Herearesomeadditionalideas
thatwillhelpreinforceyourunderstanding,whilealso
providingachancetoexploremoreoftheGoPEpackage:
ObtainvariousWindowsbinariesanduseahexeditorandadebuggertoexplore
thevariousoffsetvalues.Identifyhowvariousbinariesaredifferent,suchas
theirnumberofsections.Usetheparserthatyoubuiltinthischaptertoboth
exploreandverifyyourmanualobservations.
ExplorenewareasofthePEfilestructure,suchastheEATandIAT.Now,
rebuildtheparsertosupportDLLnavigation.
AddanewsectiontoanexistingPEfiletoincludeyourshinynewshellcode.
Updatetheentiresectiontoincludetheappropriatenumberofsections,entry
point,andrawandvirtualvalues.Dothisalloveragain,butthistime,insteadof
addinganewsection,useanexistingsectionandcreateacodecave.
Onetopicthatwedidn’tdiscusswashowtohandlePEfilesthathavebeencode
packed,eitherwithcommonpackers,suchasUPX,ormoreobscurepackers.
Findabinarythathasbeenpacked,identifyhowitwaspackedandwhatpacker
wasused,andthenresearchtheappropriatetechniquetounpackthecode.
USINGCWITHGO
AnothermethodofaccessingtheWindowsAPIistoleverage
C.BydirectlyusingC,youcouldtakeadvantageofan
existinglibrarythatisavailableonlyinC,createaDLL
(whichwecan’tdousingGoalone),orsimplycallthe
WindowsAPI.Inthissection,we’llfirstinstallandconfigure
aCtoolchainthatiscompatiblewithGo.Wewillthenlookat
examplesofhowtouseCcodeinGoprogramsandhowto
includeGocodeinCprograms.
InstallingaCWindowsToolchain
TocompileprogramsthatcontainacombinationofGoandC,
you’llneedasuitableCtoolchainthatcanbeusedtobuild
portionsofCcode.OnLinuxandmacOS,youcaninstallthe
GNUCompilerCollection(GCC)byusingapackage
manager.OnWindows,installingandconfiguringatoolchain
isabitmoreinvolvedandcanleadtofrustrationifyou’renot
familiarwiththemanyoptionsavailable.Thebestoptionwe
foundistouseMSYS2,whichpackagesMinGW-w64,a
projectcreatedtosupporttheGCCtoolchainonWindows.
Downloadandinstallthisfromhttps://www.msys2.org/and
followtheinstructionsonthatpagetoinstallyourCtoolchain.
Also,remembertoaddthecompilertoyourPATHvariable.
CreatingaMessageBoxUsingCandtheWindows
API
NowthatwehaveaCtoolchainconfiguredandinstalled,let’s
lookatasimpleGoprogramthatleveragesembeddedCcode.
Listing12-24containsCthatusestheWindowsAPItocreate
amessagebox,whichgivesusavisualdisplayofthe
WindowsAPIinuse.
packagemain
❶/*
#include
#include
❷voidbox()
{
MessageBox(0,"IsGothebest?","CGOGO",0x00000004L);
}
*/
❸import"C"
funcmain(){
❹C.box()
}
Listing12-24:GousingC(/ch-12/messagebox/main.go)
Ccodecanbeprovidedthroughexternalfileinclude
statements❶.ItcanalsobeembeddeddirectlyinaGofile.
Hereweareusingbothmethods.ToembedCcodeintoaGo
file,weuseacomment,insideofwhichwedefineafunction
thatwillcreateaMessageBox❷.Gosupportscommentsfor
manycompile-timeoptions,includingcompilingCcode.
Immediatelyaftertheclosingcommenttag,weuseimport"C"to
telltheGocompilertouseCGO,apackagethatallowstheGo
compilertolinknativeCcodeatbuildtime❸.WithintheGo
code,wecannowcallfunctionsdefinedinC,andwecallthe
C.box()function,whichexecutesthefunctiondefinedinthe
bodyofourCcode❹.
Buildthesamplecodebyusinggobuild.Whenexecuted,
youshouldgetamessagebox.
NOTE
ThoughtheCGOpackageisextremelyconvenient,allowingyoutocallC
librariesfromGocodeaswellascallGolibrariesfromCcode,usingit
gets rid of Go’s memory manager and garbage disposal. If you want to
reapthebenefitsofGo’smemorymanager,youshouldallocatememory
withinGoandthenpassittoC.Otherwise,Go’smemorymanagerwon’t
knowaboutallocationsyou’vemadeusingtheCmemorymanager,and
thoseallocationswon’tbefreedunlessyoucallC’snativefree()method.Not
freeingthememorycorrectlycanhaveadverseeffectsonyourGocode.
Finally,justlikeopeningfilehandlesinGo,usedeferwithinyourGofunction
toensurethatanyCmemorythatGoreferencesisgarbagecollected.
BuildingGointoC
JustaswecanembedCcodeintoGoprograms,wecanembed
GocodeintoCprograms.Thisisusefulbecause,asofthis
writing,theGocompilercan’tbuildourprogramsintoDLLs.
Thatmeanswecan’tbuildutilitiessuchasreflectiveDLL
injectionpayloads(liketheonewecreatedearlierinthis
chapter)withGoalone.
However,wecanbuildourGocodeintoaCarchivefile,
andthenuseCtobuildthearchivefileintoaDLL.Inthis
section,we’llbuildaDLLbyconvertingourGocodeintoaC
archivefile.Thenwe’llconvertthatDLLintoshellcodeby
usingexistingtools,sowecaninjectandexecuteitin
memory.Let’sstartwiththeGocode(Listing12-25),savedin
afilecalledmain.go.
packagemain
❶import"C"
import"fmt"
❷//exportStart
❸funcStart(){
fmt.Println("YOFROMGO")
}
❹funcmain(){
}
Listing12-25:TheGopayload(/ch-12/dllshellcode/main.go)
WeimportCtoincludeCGOintoourbuild❶.Next,we
useacommenttotellGothatwewanttoexportafunctionin
ourCarchive❷.Finally,wedefinethefunctionwewantto
convertintoC❸.Themain()function❹canremainempty.
TobuildtheCarchive,executethefollowingcommand:
>gobuild-buildmode=c-archive
Weshouldnowhavetwofiles,anarchivefilecalled
dllshellcode.aandanassociatedheaderfilecalled
dllshellcode.h.Wecan’tusethesequiteyet.Wehavetobuild
ashiminCandforcethecompilertoincludedllshellcode.a.
Oneelegantsolutionistouseafunctiontable.Createafile
thatcontainsthecodeinListing12-26.Callthisfilescratch.c.
#include"dllshellcode.h"
void(*table[1])={Start};
Listing12-26:Afunctiontablesavedinthescratch.cfile(/ch-
12/dllshellcode/scratch.c)
WecannowuseGCCtobuildthescratch.cCfileintoa
DLLbyusingthefollowingcommand:
>gcc-shared-pthread-ox.dllscratch.cdllshellcode.a-lWinMM-lntdll-
lWS2_32
ToconvertourDLLintoshellcode,we’llusesRDI
(https://github.com/monoxgas/sRDI/),anexcellentutilitythat
hasatonoffunctionality.Tobegin,downloadtherepoby
usingGitonWindowsand,optionally,aGNU/Linuxmachine,
asyoumayfindGNU/Linuxtobeamorereadilyavailable
Python3environment.You’llneedPython3forthisexercise,
soinstallitifit’snotalreadyinstalled.
FromthesRDIdirectory,executeapython3shell.Usethe
followingcodetogenerateahashoftheexportedfunction:
>>>fromShellCodeRDIimport*
>>>HashFunctionName('Start')
1168596138
ThesRDItoolswillusethehashtoidentifyafunctionfrom
theshellcodewe’llgeneratelater.
Next,we’llleveragePowerShellutilitiestogenerateand
executeshellcode.Forconvenience,wewillusesomeutilities
fromPowerSploit
(https://github.com/PowerShellMafia/PowerSploit/),whichis
asuiteofPowerShellutilitieswecanleveragetoinject
shellcode.YoucandownloadthisusingGit.Fromthe
PowerSploit\CodeExecutiondirectory,launchanew
PowerShellshell:
c:\tools\PowerSploit\CodeExecution>powershell.exe-execbypass
WindowsPowerShell
Copyright(C)2016MicrosoftCorporation.Allrightsreserved.
NowimporttwoPowerShellmodulesfromPowerSploit
andsRDI:
PSC:\tools\PowerSploit\CodeExecution>Import-Module.\Invoke-Shellcode.ps1
PSC:\tools\PowerSploit\CodeExecution>cd..\..\sRDI
PSC:\tools\sRDI>cd.\PowerShell\
PSC:\tools\sRDI\PowerShell>Import-Module.\ConvertTo-Shellcode.ps1
Withbothmodulesimported,wecanuseConvertTo-Shellcode
fromsRDItogenerateshellcodefromtheDLL,andthenpass
thisintoInvoke-ShellcodefromPowerSploittodemonstratethe
injection.Oncethisexecutes,youshouldobserveyourGo
codeexecuting:
PSC:\tools\sRDI\PowerShell>Invoke-Shellcode-Shellcode(ConvertTo-
Shellcode
-FileC:\Users\tom\Downloads\x.dll-FunctionHash1168596138)
InjectingshellcodeintotherunningPowerShellprocess!
Doyouwishtocarryoutyourevilplans?
[Y]Yes[N]No[S]Suspend[?]Help(defaultis"Y"):Y
YOFROMGO
ThemessageYOFROMGoindicatesthatwehave
successfullylaunchedourGopayloadfromwithinaCbinary
thatwasconvertedintoshellcode.Thisunlocksawholehost
ofpossibilities.
SUMMARY
Thatwasquitealottodiscuss,andyetitjustscratchesthe
surface.Westartedthechapterwithabriefdiscussionabout
navigatingtheWindowsAPIdocumentationsoyou’dbe
familiarwithreconcilingWindowsobjectstousableGo
objects:theseincludefunctions,parameters,datatypes,and
returnvalues.Next,wediscussedtheuseofuintptrand
unsafe.Pointertoperformdisparatetypeconversionsnecessary
wheninteractingwiththeGosyscallpackage,alongwiththe
potentialpitfallstoavoid.Wethentiedeverythingtogether
withademonstrationofprocessinjection,whichusedvarious
GosystemcallstointeractwithWindowsprocessinternals.
Fromthere,wediscussedthePEfileformatstructure,and
thenbuiltaparsertonavigatethedifferentfilestructures.We
demonstratedvariousGoobjectsthatmakenavigatingthe
binaryPEfileabitmoreconvenientandfinishedupwith
notableoffsetsthatmaybeinterestingwhenbackdooringaPE
file.
Lastly,youbuiltatoolchaintointeroperatewithGoand
nativeCcode.WebrieflydiscussedtheCGOpackagewhile
focusingoncreatingCcodeexamplesandexploringnovel
toolsforcreatingnativeGoDLLs.
Takethischapterandexpandonwhatyou’velearned.We
urgeyoutocontinuouslybuild,break,andresearchthemany
attackdisciplines.TheWindowsattacksurfaceisconstantly
evolving,andhavingtherightknowledgeandtoolingwill
onlyhelptomaketheadversarialjourneymoreattainable.
13
HIDINGDATAWITH
STEGANOGRAPHY
ThewordsteganographyisacombinationoftheGreekwords
steganos,whichmeanstocover,conceal,orprotect,and
graphien,whichmeanstowrite.Insecurity,steganography
referstotechniquesandproceduresusedtoobfuscate(orhide)
databyimplantingitwithinotherdata,suchasanimage,soit
canbeextractedatafuturepointintime.Aspartofthe
securitycommunity,you’llexplorethispracticeonaroutine
basisbyhidingpayloadsthatyou’llrecoveraftertheyare
deliveredtothetarget.
Inthischapter,you’llimplantdatawithinaPortable
NetworkGraphics(PNG)image.You’llfirstexplorethePNG
formatandlearnhowtoreadPNGdata.You’llthenimplant
yourowndataintotheexistingimage.Finally,you’llexplore