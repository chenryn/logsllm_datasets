virtual pages, which are protected by the standard page tables.
342 
CHAPTER 9 Virtualization technologies
System Physical Memory
Guest Physical to System Physical Memory Map (GPA -> SPA map)
Normal Mode (VTL 0) Memory Access Protections
Secure Mode (VTL 1) Memory Access Protections
Normal Mode
(VTL 0)
Shared Registers
Host Partition
User
Kernel
User
Kernel
Secure Mode
(VTL 1)
Hypervisor
VP 0
VMCS
VP 0
VTL 0
VTL 0 EPT
VTL 1 EPT
VMCS
VP 0
VTL 1
VP 0
Local APIC
Local APIC
Normal Mode
(VTL 0)
Shared Registers
User
Kernel
User
Kernel
Secure Mode
(VTL 1)
VP 1
VMCS
VP 1
VTL 0
VMCS
VP 1
VTL 1
VP 1
Local APIC
Local APIC
Normal Mode Device
Secure Mode Device
FIGURE 9-30 Scheme of the memory protection architecture provided by the hypervisor to VSM.
Services provided by the VSM and requirements
Virtual Secure Mode, which is built on the top of the hypervisor, provides the following services to the 
Windows ecosystem:
I 
Isolation IUM provides a hardware-based isolated environment for each software that runs
in VTL 1. Secure devices managed by the Secure Kernel are isolated from the rest of the system
and run in VTL 1 user mode. Software that runs in VTL 1 usually stores secrets that can’t be inter-
cepted or revealed in VTL 0. This service is used heavily by Credential Guard. Credential Guard
is the feature that stores all the system credentials in the memory address space of the LsaIso
trustlet, which runs in VTL 1 user mode.
I 
Control over VTL 0 The Hypervisor Enforced Code Integrity (HVCI) checks the integrity and
the signing of each module that the normal OS loads and runs. The integrity check is done
entirely in VTL 1 (which has access to all the VTL 0 physical memory). No VTL 0 software can in-
terfere with the signing check. Furthermore, HVCI guarantees that all the normal mode memory
pages that contain executable code are marked as not writable (this feature is called W^X. Both
HVCI and W^X have been discussed in Chapter 7 of Part 1).
CHAPTER 9 Virtualization technologies
343
I 
Secure intercepts VSM provides a mechanism to allow a higher VTL to lock down critical sys-
tem resources and prevent access to them by lower VTLs. Secure intercepts are used extensively
by HyperGuard, which provides another protection layer for the VTL 0 kernel by stopping mali-
cious modifications of critical components of the operating systems.
I 
VBS-based enclaves A security enclave is an isolated region of memory within the address
space of a user mode process. The enclave memory region is not accessible even to higher
privilege levels. The original implementation of this technology was using hardware facilities
to properly encrypt memory belonging to a process. A VBS-based enclave is a secure enclave
whose isolation guarantees are provided using VSM.
I
Kernel Control Flow Guard VSM, when HVCI is enabled, provides Control Flow Guard
(CFG) to each kernel module loaded in the normal world (and to the NT kernel itself). Kernel
mode software running in normal world has read-only access to the bitmap, so an exploit
can’t potentially modify it. Thanks to this reason, kernel CFG in Windows is also known as
Secure Kernel CFG (SKCFG).
Note CFG is the Microsoft implementation of Control Flow Integrity, a technique that pre-
vents a wide variety of malicious attacks from redirecting the flow of the execution of a pro-
gram. Both user mode and Kernel mode CFG have been discussed extensively in Chapter 7 
of Part 1.
I 
Secure devices Secure devices are a new kind of devices that are mapped and managed en-
tirely by the Secure Kernel in VTL 1. Drivers for these kinds of devices work entirely in VTL 1 user
mode and use services provided by the Secure Kernel to map the device I/O space.
To be properly enabled and work correctly, the VSM has some hardware requirements. The host 
system must support virtualization extensions (Intel VT-x, AMD SVM, or ARM TrustZone) and the SLAT. 
VSM won’t work if one of the previous hardware features is not present in the system processor. Some 
other hardware features are not strictly necessary, but in case they are not present, some security 
premises of VSM may not be guaranteed:
I 
An IOMMU is needed to protect against physical device DMA attacks. If the system processors
don’t have an IOMMU, VSM can still work but is vulnerable to these physical device attacks.
I 
A UEFI BIOS with Secure Boot enabled is needed for protecting the boot chain that leads to
the startup of the hypervisor and the Secure Kernel. If Secure Boot is not enabled, the system is
vulnerable to boot attacks, which can modify the integrity of the hypervisor and Secure Kernel
before they have the chances to get executed.
Some other components are optional, but when they’re present they increase the overall security 
and responsiveness of the system. The TPM presence is a good example. It is used by the Secure Kernel 
to store the Master Encryption key and to perform Secure Launch (also known as DRTM; see Chapter 12 
for more details). Another hardware component that can improve VSM responsiveness is the proces-
sor’s Mode-Based Execute Control (MBEC) hardware support: MBEC is used when HVCI is enabled to 
protect the execution state of user mode pages in kernel mode. With Hardware MBEC, the hypervisor 
344 
CHAPTER 9 Virtualization technologies
can set the executable state of a physical memory page based on the CPL (kernel or user) domain of 
the specific VTL. In this way, memory that belongs to user mode application can be physically marked 
executable only by user mode code (kernel exploits can no longer execute their own code located in 
the memory of a user mode application). In case hardware MBEC is not present, the hypervisor needs 
to emulate it, by using two different SLAT tables for VTL 0 and switching them when the code execu-
tion changes the CPL security domain (going from user mode to kernel mode and vice versa produces 
a VMEXIT in this case). More details on HVCI have been already discussed in Chapter 7 of Part 1.
EXPERIMENT: Detecting VBS and its provided services
In Chapter 12, we discuss the VSM startup policy and provide the instructions to manually enable 
or disable Virtualization-Based Security. In this experiment, we determine the state of the differ-
ent features provided by the hypervisor and the Secure Kernel. VBS is a technology that is not 
directly visible to the user. The System Information tool distributed with the base Windows instal-
lation is able to show the details about the Secure Kernel and its related technologies. You can 
start it by typing msinfo32 in the Cortana search box. Be sure to run it as Administrator; certain 
details require a full-privileged user account.
In the following figure, VBS is enabled and includes HVCI (specified as Hypervisor Enforced 
Code Integrity), UEFI runtime virtualization (specified as UEFI Readonly), MBEC (specified as 
Mode Based Execution Control). However, the system described in the example does not include 
an enabled Secure Boot and does not have a working IOMMU (specified as DMA Protection in 
the Virtualization-Based Security Available Security Properties line). 
More details about how to enable, disable, and lock the VBS configuration are available in the 
“Understanding the VSM policy” experiment of Chapter 12.
EXPERIMENT: Detecting VBS and its provided services
In Chapter 12, we discuss the VSM startup policy and provide the instructions to manually enable 
or disable Virtualization-Based Security. In this experiment, we determine the state of the differ-
ent features provided by the hypervisor and the Secure Kernel. VBS is a technology that is not 
directly visible to the user. The System Information tool distributed with the base Windows instal-
lation is able to show the details about the Secure Kernel and its related technologies. You can 
start it by typing msinfo32 in the Cortana search box. Be sure to run it as Administrator; certain 
details require a full-privileged user account.
In the following figure, VBS is enabled and includes HVCI (specified as Hypervisor Enforced 
Code Integrity), UEFI runtime virtualization (specified as UEFI Readonly), MBEC (specified as 
Mode Based Execution Control). However, the system described in the example does not include 
an enabled Secure Boot and does not have a working IOMMU (specified as DMA Protection in 
the Virtualization-Based Security Available Security Properties line). 
More details about how to enable, disable, and lock the VBS configuration are available in the 
“Understanding the VSM policy” experiment of Chapter 12.
CHAPTER 9 Virtualization technologies
345
The Secure Kernel
The Secure Kernel is implemented mainly in the securekernel.exe file and is launched by the Windows 
Loader after the hypervisor has already been successfully started. As shown in Figure 9-31, the Secure 
Kernel is a minimal OS that works strictly with the normal kernel, which resides in VTL 0. As for any 
normal OS, the Secure Kernel runs in CPL 0 (also known as ring 0 or kernel mode) of VTL 1 and provides 
services (the majority of them through system calls) to the Isolated User Mode (IUM), which lives 
in CPL 3 (also known as ring 3 or user mode) of VTL 1. The Secure Kernel has been designed to be 
as small as possible with the goal to reduce the external attack surface. It’s not extensible with exter-
nal device drivers like the normal kernel. The only kernel modules that extend their functionality are 
loaded by the Windows Loader before VSM is launched and are imported from securekernel.exe:
I 
Skci.dll Implements the Hypervisor Enforced Code Integrity part of the Secure Kernel
I 
Cng.sys Provides the cryptographic engine to the Secure Kernel
I 
Vmsvcext.dll Provides support for the attestation of the Secure Kernel components in
Intel TXT (Trusted Boot) environments (more information about Trusted Boot is available
in Chapter 12)
While the Secure Kernel is not extensible, the Isolated User Mode includes specialized processes 
called Trustlets. Trustlets are isolated among each other and have specialized digital signature require-
ments. They can communicate with the Secure Kernel through syscalls and with the normal world 
through Mailslots and ALPC. Isolated User Mode is discussed later in this chapter.
VSM Normal Mode (VTL 0)
VSM Secure Mode (VTL 1)
NTOS (Normal Kernel)
Process A
A Kernel
Data
Hypervisor
Secure Kernel
User-
Mode
(Ring 3)
Kernel-
Mode
(Ring 0)
User-
Mode
(Ring 3)
Kernel-
Mode
(Ring 0)
Process B
B Kernel
Data
C Kernel
Data
D Kernel
Data
Isolated
Process C
C Secure
Kernel
Data
Isolated
Process D
D Secure
Kernel
Data
FIGURE 9-31 Virtual Secure Mode Architecture scheme, built on top of the hypervisor.
Virtual interrupts
When the hypervisor configures the underlying virtual partitions, it requires that the physical proces-
sors produce a VMEXIT every time an external interrupt is raised by the CPU physical APIC (Advanced 
Programmable Interrupt Controller). The hardware’s virtual machine extensions allow the hypervisor 
to inject virtual interrupts to the guest partitions (more details are in the Intel, AMD, and ARM user 
346 
CHAPTER 9 Virtualization technologies
manuals). Thanks to these two facts, the hypervisor implements the concept of a Synthetic Interrupt 
Controller (SynIC). A SynIC can manage two kind of interrupts. Virtual interrupts are interrupts de-
livered to a guest partition’s virtual APIC. A virtual interrupt can represent and be associated with a 
physical hardware interrupt, which is generated by the real hardware. Otherwise, a virtual interrupt can 
represent a synthetic interrupt, which is generated by the hypervisor itself in response to certain kinds 
of events. The SynIC can map physical interrupts to virtual ones. A VTL has a SynIC associated with each 
virtual processor in which the VTL runs. At the time of this writing, the hypervisor has been designed to 
support 16 different synthetic interrupt vectors (only 2 are actually in use, though).
When the system starts (phase 1 of the NT kernel’s initialization) the ACPI driver maps each inter-
rupt to the correct vector using services provided by the HAL. The NT HAL is enlightened and knows 
whether it’s running under VSM. In that case, it calls into the hypervisor for mapping each physical in-
terrupt to its own VTL. Even the Secure Kernel could do the same. At the time of this writing, though, no 
physical interrupts are associated with the Secure Kernel (this can change in the future; the hypervisor 
already supports this feature). The Secure Kernel instead asks the hypervisor to receive only the follow-
ing virtual interrupts: Secure Timers, Virtual Interrupt Notification Assist (VINA), and Secure Intercepts.
Note It’s important to understand that the hypervisor requires the underlying hardware to 
produce a VMEXIT while managing interrupts that are only of external types. Exceptions are 
still managed in the same VTL the processor is executing at (no VMEXIT is generated). If an 
instruction causes an exception, the latter is still managed by the structured exception han-
dling (SEH) code located in the current VTL.
To understand the three kinds of virtual interrupts, we must first introduce how interrupts are man-
aged by the hypervisor. 
In the hypervisor, each VTL has been designed to securely receive interrupts from devices associated 
with its own VTL, to have a secure timer facility which can’t be interfered with by less secure VTLs, and to 
be able to prevent interrupts directed to lower VTLs while executing code at a higher VTL. Furthermore, a 
VTL should be able to send IPI interrupts to other processors. This design produces the following scenarios:
I 
When running at a particular VTL, reception of interrupts targeted at the current VTL results in
standard interrupt handling (as determined by the virtual APIC controller of the VP).
I 
When an interrupt is received that is targeted at a higher VTL, receipt of the interrupt results in
a switch to the higher VTL to which the interrupt is targeted if the IRQL value for the higher VTL
would allow the interrupt to be presented. If the IRQL value of the higher VTL does not allow
the interrupt to be delivered, the interrupt is queued without switching the current VTL. This
behavior allows a higher VTL to selectively mask interrupts when returning to a lower VTL. This
could be useful if the higher VTL is running an interrupt service routine and needs to return to a
lower VTL for assistance in processing the interrupt.
I 
When an interrupt is received that is targeted at a lower VTL than the current executing VTL
of a virtual processor, the interrupt is queued for future delivery to the lower VTL. An interrupt
targeted at a lower VTL will never preempt execution of the current VTL. Instead, the interrupt is
presented when the virtual processor next transitions to the targeted VTL.
CHAPTER 9 Virtualization technologies
347
Preventing interrupts directed to lower VTLs is not always a great solution. In many cases, it could 
lead to the slowing down of the normal OS execution (especially in mission-critical or game environ-
ments). To better manage these conditions, the VINA has been introduced. As part of its normal event 
dispatch loop, the hypervisor checks whether there are pending interrupts queued to a lower VTL. If so, 
the hypervisor injects a VINA interrupt to the current executing VTL. The Secure Kernel has a handler 
registered for the VINA vector in its virtual IDT. The handler (ShvlVinaHandler function) executes a nor-
mal call (NORMALKERNEL_VINA) to VTL 0 (Normal and Secure Calls are discussed later in this chapter). 
This call forces the hypervisor to switch to the normal kernel (VTL 0). As long as the VTL is switched, all 
the queued interrupts will be correctly dispatched. The normal kernel will reenter VTL 1 by emitting a 
SECUREKERNEL_RESUMETHREAD Secure Call.
Secure IRQLs
The VINA handler will not always be executed in VTL 1. Similar to the NT kernel, this depends on the 
actual IRQL the code is executing into. The current executing code’s IRQL masks all the interrupts that are 
associated with an IRQL that’s less than or equal to it. The mapping between an interrupt vector and the 
IRQL is maintained by the Task Priority Register (TPR) of the virtual APIC, like in case of real physical APICs 
(consult the Intel Architecture Manual for more information). As shown in Figure 9-32, the Secure Kernel 
supports different levels of IRQL compared to the normal kernel. Those IRQL are called Secure IRQL.
Synthetic Interrupts
(Hypervisor Generated)
Software Interrupts
Normal Thread Execution
High/Intercept
IPI
Timer
VINA
Normal Raised
DPC/Dispatch
APC
Passive/Low
Unused