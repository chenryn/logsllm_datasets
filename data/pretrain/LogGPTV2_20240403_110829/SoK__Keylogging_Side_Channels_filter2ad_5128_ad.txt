92% TPR
100% TPR
92% TPR
Performance
Detection
57% TPR
98% TPR
Identiﬁcation
63% key ACC
30% word ACC5
80% PIN ACC
55% word ACC5
51% word ACC10
46% word ACC
96% key ACC
92% key ACC5
79% key ACC
64% key ACC
73% word ACC50
90% word ACC
72% key ACC
94% key ACC
83% key ACC
74% key ACC
95% key ACC
95% key ACC5
43% word ACC10
40% word ACC10
79% word ACC
2.5bits/key
1bit/key
3.3bits/key
-
-
-
-
-
-
-
-
-
97% key ACC
3.6bits/key
1bit/key
1.7bits/key
Ref.
[48]
[49]
[50]
[51]
[52]
[40]
[5]
[53]
[54]
[55]
[37]
[56]
[39]
[57]
[58]
[9]
[42]
[6]
[6]
[42]
[59]
[60]
[61]
[62]
[29]
[10]
[63]
[63]
[64]
[7]
[65]
[66]
[10]
[67]
[68]
[8]
[69]
Proximity indicates either the physical distance of the sensor
to the victim, or the shared resources required by the attack,
such as being resident on the same CPU core. Network-based
attacks are considered remote since they don’t require any any
physical sensor or code execution on the victim’s host.
Channel Type can be either 1st order spatial (S1), 2nd order
spatial (S2), temporal (T), or combination thereof, as described
in Section III. The type of side channel is determined by both
what information is sensed and how that information is used.
To demonstrate this, consider how the acoustics from a single
microphone can be used in three different ways:
• S1: the attacker identiﬁes individual keys or groups of
keys using a classiﬁer that was trained on a separate
labeled dataset (supervised approach).
• S2: the attacker compares the acoustics between pairs of
keys to form a set of constraints and then performs a
dictionary lookup (unsupervised approach).
• T: the attacker extracts the key press and release timings
from the acoustic signal and then identiﬁes keys and key
pairs based on the time intervals.
Typing Speed refers to the typing speed of the victim during
an attack. Some attacks have been demonstrated as a proof of
concept by making restrictive assumptions on the typing speed
of the victim, such as pressing only a single key at a time in a
slow manner, i.e., the “straw man” approach [55], while other
attacks operate at a normal typing speed. The exact conditions
of each attack vary in many ways besides typing speed, but this
metric provides a general idea as to the use case considered.
Requires Training indicates whether the attack requires a
separate labeled dataset for supervised training. Some attacks
require a classiﬁer trained on keystrokes collected from the
same victim or keyboard, e.g., obtained through social en-
gineering, as opposed to a dataset which has been crowd-
sourced. These scenarios are referred to as within-subject and
between-subject, respectively, to reﬂect whether the victim or
keyboard must be present in the training dataset.
Performance is reported using the metrics described in
Section III-A: the TPR for keystroke detection (most attacks
either do not report a TNR or assume this to be 100%) and
information gain for key identiﬁcation. Instead of information
218
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:41 UTC from IEEE Xplore.  Restrictions apply. 
gain, some attacks report the rank-n identiﬁcation accuracy
(ACCn), which is the probability of correctly identifying the
correct key or word among the top-n choices as ordered by
the classiﬁer. Note that key, as opposed to word, identiﬁcation
operates at the character level and implies the method can
be applied to arbitrary (e.g., password) input, while word
identiﬁcation assumes the user types a dictionary word.
A. Attack the User
A side channel attack targeting the user relies on sensing
the user’s physical state during typing. Four such modalities
have been exploited, including electroencephalography (EEG),
the motion of the wrist as sensed through a smartwatch, video
with keyboard line-of-sight, and WiFi signal distortion.
1) Wearable Devices: Electrical potential differences em-
anating from the superﬁcial layers of the brain are detected
on the scalp by an EEG cap, which are becoming more
prevalent as they decrease in cost. EEG has long been thought
to reﬂect a user’s cognitive state [70], such as by detecting the
characteristic P300 response to known stimuli [71], and just
recently has been considered as a modality for eavesdropping
keyboard input [48]. Other wearable devices that exploit the
motion of a victim’s hands while typing, such as smartwatches
and ﬁtness trackers, present similar privacy concerns [72].
Such devices are equipped with most of the same sensors
found in smartphones, and despite the sampling rates being
slightly lower (on the order of 50 Hz, compared to 100 Hz
on smartphones), the accelerometer enables a fairly precise
estimate of relative hand distance traveled with less than 1 cm
error [50]. However, there are some unique challenges, notably
that when worn on the left hand a smartwatch is essentially
blind to the movements of the right hand.
2) Video: The ability to simply view the keyboard while
a victim types might seem like the ideal method to obtain
perfect key identiﬁcation, but in practice this is more difﬁcult
to achieve. It takes a human analyst anywhere from 1–2 hours
to identify the keystrokes in a 3 minute video, and only with
about 90% key identiﬁcation accuracy [40]. Such difﬁculties
arise from occlusions by the hand, simultaneous movement
of alternate hand and ﬁngers, and the typing speed of the
victim. This process can be automated using traditional com-
puter vision processing techniques (segmentation and motion
detection), assuming the attacker has access to a compromised
webcam pointed at the keyboard in close proximity (<1 m).
3) WiFi: WiFi signals have traditionally been used for
coarse grained gesture recognition [73] and only recently
considered as a keylogging side channel whereby the user’s
ﬁnger and hand movements are localized with high enough
resolution. In a “straw man” approach, ﬁnger location can be
detected through the induced changes in signal delay at two
receiving antennas [53] or by ﬂuctuations in the instantaneous
channel state information (CSI) [5], [74], which describes the
signal propagation characteristics. The former method requires
a software-deﬁned radio (SDR) and multiple antennas at ﬁxed
distance, in the same spirit as sound source localization, and
the latter approach uses commercially-available hardware.





















 

!





Fig. 8. Keystroke acoustics. Peaks occur at the touch, press, and release.
B. Attack the Keyboard
The keyboard emits a variety of unintended signals, in-
cluding acoustic, seismic, and electromagnetic emanations. As
such, there are a range of attacks that exploit side channels
emanating from the keyboard. For these attacks, a physical
sensor external to the host computer is almost always utilized.
1) Acoustic: Acoustic side channels represent a majority
of keylogging side channel attacks. Under normal typing con-
ditions, most keyboards emit a characteristic acoustic signal
upon each keystroke, which can be captured up to several
meters away with a omnidirectional microphone and up to
15 meters with a directional microphone [54]. An example of
this waveform, shown in Figure 8, has three distinct parts: the
touch, press, and release. The touch peak (42 ms) occurs when
the user’s ﬁnger makes contact with the surface of the key, but
before the key is pressed; the press peak (64 ms) occurs when
the key is pressed and makes contact with the underlying plate
in the keyboard; and the release peak (165 ms) occurs when
the key settles back into its upright resting position.
Due to the characteristic peaks emitted, keystroke detection
rates using acoustic methods are generally high and assumed to
be 100% TPR in many works. Without too much background
noise, simple detection methods, such as the energy in a sliding
window exceeding a given threshold, are effective [37], [55]–
[57]. Despite the ability to extract high-resolution timings from
an acoustic signal, most acoustic side channel attacks only
utilize spatial information. Keys are identiﬁed in primarily two
ways: through sound source localization and by comparing the
acoustics produced by different keys.
With at least three microphones, acoustic emanations can
be localized by multilateration, leveraging the time difference
of arrival (TDoA) of the key acoustics to each receiver [39].
The key identiﬁcation accuracy of such an approach depends
on the sampling rate of the microphones which introduce an
inevitable error, the degree to which noise-free localization
can be performed. A 44.1 kHz microphone, common on most
smartphones, has about 0.77 cm localization error [39], calcu-
lated by (343m/s) / (fsHz) where fs is the sampling frequency
and 343 m/s is the speed of sound. Partial localization can
be performed with two microphones (conveniently located on
most smartphones), albeit with much higher error, narrowing
down the possibilities to a subset of keys that ﬁt within a
hyperbolic window over the keyboard [57].
Different keys on a keyboard tend to emit different acoustic
219
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:41 UTC from IEEE Xplore.  Restrictions apply. 
signatures and can be identiﬁed in this way using only a single
microphone [54]. Having previously recorded the acoustics
of a speciﬁc keyboard, i.e., supervised approach, individual
keys can generally be identiﬁed by comparing the unknown
waveforms to the known waveforms collected during training
[54]. The acoustic signature of each key has been demonstrated
to be consistent enough to log keystrokes not just across users,
but across devices of the same model [58] and over VoIP
services [9], [58]. Alternatively, a set of constraints on the
keystroke sequence can be speciﬁed by the acoustic similarity
of key pairs. This implies a 2nd order spatial side channel in
which the constraints are used to perform a dictionary lookup.
2) Seismic: Similar to acoustic emanations, the motion of
the keyboard induced from typing causes minute vibrations
in the underlying surface which may be carried over short
distances. The detection and recognition of keystrokes based
on vibrations can be performed either with a laser microphone,
up to 30 m away [42], or through a compromised mobile
device in close proximity to the keyboard. Only recently has
the sampling rate of such mobile sensors increased to the
point at which keystrokes can be reliably identiﬁed, with most
modern devices capable of reaching 100 Hz [59]. At 50 Hz,
previous generation devices were unable to detect, let alone
identify, keystrokes from seismic activity.
3) Electromagnetic: There are primarily two sources of EM
emanations in a standard keyboard: the keyboard scanning
matrix (described in Section II-C), and the communication
protocol (PS/2 and USB, described in Section II-D).
As the microcontroller pulses each column in the matrix,
an EM spike is emitted. This occurs continuously, and when
no keys are pressed, the time interval between EM spikes is
about the same. However, when a keystroke is detected, the
microcontroller enters a subroutine to encode and transmit the
keystroke event. Thus, a short delay is produced, and based
on the position of this delay, an attacker can determine which
column the keystroke occurred within [6].
Attacks on the communication protocol are particularly
effective, often narrowing down to a single key or very small
subset of keys by decoding the unencrypted signal, which
is carried either through the air or a conductive ground. In
PS/2, a strong EM spike is emitted upon each falling edge
of the data signal, enabling keys to be identiﬁed by their
“falling edge” scancode patterns. For example, the bit pattern
for E (scancode 0x24) is: 00010010011 which has falling
edge pattern: ↓↑↑↑↓↑↑↓↑↑↑, where ↓ denotes the presence of
a falling edge in the data signal and ↑ an absence. The G key
(scancode 0x34) has the same falling edge pattern since its bit
pattern is 00010110001. This spatial attack narrows down to
a subset 2.1 alphanumeric keys on average [6].
C. Attack the Host
With the ability to execute code on the victim’s machine,
there exist a variety of exploitable side channels at the attack-
ers disposal, most of which are in the realm of microarchitec-
tural attacks. The three main modalities are: process footprint
as reported by the kernel, CPU load, and memory access
patterns. For a full survey of microarchitectural attacks, which
include the latter two modalities, see [75].
1) Process Footprint: The kernel itself can leak a consid-
erable amount of information through process state and usage
statistics. On Linux, the virtual ﬁle system procfs is the
source of several side channels. Monitoring the values of the
extended stack pointer (ESP) and extended instruction pointer
(EIP) as reported by /proc/[pid]/stat reveal system call
patterns to known locations in memory. The way an applica-
tion responds to keyboard interrupts induces a speciﬁc pattern
of system calls such that keystroke events can be detected. This
attack works on multi-user systems and despite the relatively
slow update rate of procfs [60]. The scheduling statistics
as reported by /proc/[pid]/schedstat can also indicate
when a process responds to keyboard events since most text-
editing applications remain idle until user input is available
[61]. An attacker simply counts the number of time slices that
a process has been allocated, which, for textual applications,
will generally only increase upon each keystroke.
2) CPU Load: The general approach of CPU load-based
attacks is to detect spikes in CPU activity induced by IO inter-
rupts. On an otherwise idle system, a key press or release event
(or any IO event for that matter), causes a spike in CPU load.
The ﬁrst kind of such an attack measured the duration of each
interrupt with a high-resolution timer and found that interrupts
for key press and release events had distinct durations when
compared to, e.g., scheduling interrupts [63]. Cache usage can
also be used to detect spikes in CPU load induced by keystroke
events [64], and in some cases the memory footprint can
actually reveal individual keys (described in the next section).
CPU load attacks can be performed in sandboxed environ-
ments despite being unable to execute native instructions and
without access to pointers and high-resolution timers. As an
alternative to an explicit high-resolution timer, an attacker can
increment a variable inside a (possibly segmented) loop and
then measure the number of variable increments at coarser-
grained intervals. This effectively measures the number of
instructions executed within a given time interval, which offers
relatively high-resolution timestamps of keyboard events [29].
Measuring the time between event processing in a shared
event loop additionally provides some insight to spikes in web
browser activity which may result from keystroke input [62].
Most CPU load attacks are categorized as temporal side
channels since they merely indicate the presence of a keystroke
and provide little or no spatial information. An exception to
this is an attack in which the key map is modiﬁed by the
attacker such that a particular key takes longer to process than
any other [76]. The presence of this key can then be detected