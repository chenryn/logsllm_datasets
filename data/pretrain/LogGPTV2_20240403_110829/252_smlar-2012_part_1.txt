Finding Similar
Effective Similarity Search
In PostgreSQL
Oleg Bartunov, Teodor Sigaev
Lomonosov Moscow State University
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Agenda
Introduction
●
Search similar in PostgreSQL
●
(smlar extension)
Simple recommender system
●
(MovieLens database)
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Similarity ?
Texts (topic, lexicon, style,...)
●
Blogs, sites (topic,community, purpose..)
●
Shopping items
●
Pictures (topic,color,style,...)
●
Music - ~400 attributes !
●
Books, Movies
●
Wikipedia has problem with 'similarity'
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Similarity Estimation
Experts estimation
●
hard to formalize, we'll not consider !
–
Use attributes of content
●
Sets of attributes
– (Pandora uses x100
musicians to classify music content by ~400
attributes)
By user's interests (collaboration
●
filtering, CF)
Sets of likes/dislikes, ratings
–
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Content-based similarity
Text –
●
Fragmentation - {fingerprints},
–
{lexems},{n-grams}
{tags},{authors},{languages},...
–
Similarity (S) – numerical measurement of sets
intersection, eg. {lexems} && {lexems}
Combination, eg, linear combination - Σ Weight*S
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
By user's interest
Input data - {user, item, rating} matrix
●
Usually, just identifiers
–
Items can be of different kinds - songs,
–
bars, books, movies,...
Matrix is big and sparse
–
Exploit wisdom of crowds to capture
●
similarities between items.
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Similarity ?
Typical online shop combines several
●
kinds of recommender systems
Content-based: recommend cell phones
–
if user is about to buy for cell phone
CF with Content filtering: recommend
–
cell phone accessories, compatible to
the cell phone
CF: Recommend flowers and necklace
–
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
By user's interest
Again, similarity as intersection of sets:
●
User-user CF – {item} && {item}
–
Intersection of sets of interesting items
●
to find similar users
Recommend items, which interested for
●
similar users
Item-item CF– {user} && {user}
–
Intersection of sets of interested users
●
to find similar items
Recommend items, similar to interested
●
items
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Summary
Calculation of similarity in content-
●
based and CF methods is reduced to
calculation of sets intersection
We need some similarity metric !
●
How we can do this effectively in
●
PostgreSQL?
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Requirements
Similarity should be 0≤S≤1
●
S≡1 – absolutely similar objects
–
Identity of objects is not mandatory !
S≡0 for absolutely non-similar objects
–
S(A,B) = S(B,A) - symmetry
●
Two objects are similar if
●
S(A,B)≥ S
threshold
A~B and A~С ≠ B~C ~
● ~
≠
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Designations
N , N - # of unique elements in arrays
a b
N – # of unique elements of
u
N N
a union b
N – # of unique elements of
i
N N
a intersection b
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Metrics
Jaccard:
S(A,B) = N / (N + N - N ) = N / N
i a b i i u
~ N*log(N)
●
Good for large arrays of comparable
●
sizes
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Metrics
Cosine (Ochiai):
S(A, B) = N / sqrt(N * N )
i a b
~ N*log(N)
●
Good for large N
●
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Issues
Jaccard and Cosine are vulnerable to
●
popular items – false similarity, noise
Need to penalize popular items
●
TF*IDF metrics:
TF – frequency of element in an array
–
IDF – inverted frequency of element in all
–
arrays
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Smlar extension
Functions and Operations:
float4 smlar(anyarray, anyarray)
●
anyarray % anyarray
●
Configuration parameters:
smlar.threshold = float4
●
smlar.type = (tfidf, cosine)
●
Set of options for TF*IDF
●
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Extension smlar
=# select smlar('{0,1,2,3,4,5,6,7,8,9}'::int[],'{0,1}'::int[]);
smlar
----------
2/SQRT(10*2)=0.447214
0.447214
(1 row)
SET smlar.threshold=0.6;
# select '{0,1,2,3,4,5,6,7,8,9}'::int[] % '{0,1}'::int[];
?column?
----------
f
(1 row)
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Extension smlar
Supported any data type, which has default hash opclass
=# select smlar('{one,two,three,4,5}'::text[],
'{two,three}'::text[]);
smlar
----------
0.632456
=# select '{one,two,three,4,5}'::text[] %
'{two,three}'::text[];
?column?
----------
t
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Index support
Speedup anyarray % anyarray
Btree, hash – not applicable
●
GiST – Generalized Search Tree
●
GIN - Generalized Inverted Index
●
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
GiST index
Inner page
01100101110111 101110...
Array key →
●
signature
Bitwise OR of
●
all descendants
Leaf page
Signature key (long array): Array key (short array):
01000101000011 {234, 553, 8234, 9742, 234}
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Making a Signature
Hash each element of array into int4
●
using default hash opclass for given
data type
Unique and sort
●
For each element v of hashed array set
●
(v % length of signature)-th bit
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
An idea
Traversing we should follow subtrees
which have UPPER bound of similarity
GREATER than threshold
We know everything about query
●
Need upper estimation for intersection
●
Need lower estimation for number of
●
elements
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
What is a upperl bound of length
of the beard ?
Speed
of
Light
*
Age
?
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Estimation for leaf sign (cosine)
query
{foo,bar} => {125,553}
2 1
01100101110111 2 1
vs
vs
key
125,234,355,401,450
original array
# intersected bits as upper estimation
of common elements of arrays
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Estimation for leaf sign (cosine)
Query: {foo, bar} hashed to {124, 553}
●
Use # intersected bits as upper estimation of
●
common elements of arrays
(several query's elements may mapped in the
same bit)
Use # set bits as lower estimation of N
●
elem
(N ≤ N because of collisions)
bits elem
N / sqrt( N * N ) ≥ exact similarity
intersected bits query
Oleg Bartunov, Teodor Sigaev Finding Similar PGCon-2012, Ottawa
Estimation for inner sign (cosine)
Query: {foor, bar} hashed to {124, 553}
●
N intersected ≥ original value (the same +
●
signature is bitwise OR of all descendants)
We don't have lower bound for number of
●
elements, so use a N intersected as estimation