# Effective Similarity Search in PostgreSQL

## Authors
Oleg Bartunov, Teodor Sigaev  
Lomonosov Moscow State University

## Presentation Details
**Event:** PGCon-2012, Ottawa  
**Title:** Finding Similar

## Agenda
1. **Introduction**
   - Similarity search in PostgreSQL (smlar extension)
   - Simple recommender system (MovieLens database)

2. **Understanding Similarity**
   - Types of content: Texts, blogs, shopping items, pictures, music, books, movies
   - Challenges with similarity in Wikipedia

3. **Similarity Estimation Methods**
   - Expert estimation (not considered due to formalization difficulties)
   - Content-based attributes (e.g., sets of attributes, fragmentation)
   - User interests (collaborative filtering, CF)

4. **Content-Based Similarity**
   - Text: Fragmentation into fingerprints, lexemes, n-grams, tags, authors, languages
   - Numerical measurement of set intersection
   - Linear combination of weighted similarities

5. **User Interest-Based Similarity**
   - Input data: {user, item, rating} matrix
   - Matrix characteristics: Big and sparse
   - Exploiting crowd wisdom to capture item similarities

6. **Combining Recommender Systems**
   - Content-based: Recommend related items (e.g., cell phones)
   - Collaborative Filtering with Content Filtering: Recommend compatible accessories
   - Pure Collaborative Filtering: Recommend unrelated but popular items (e.g., flowers and necklaces)

7. **User-User and Item-Item CF**
   - User-user CF: Intersection of sets of interesting items to find similar users
   - Item-item CF: Intersection of sets of interested users to find similar items

8. **Summary**
   - Similarity calculation reduced to set intersection
   - Need for a similarity metric
   - Effective implementation in PostgreSQL

9. **Requirements for Similarity Metrics**
   - 0 ≤ S ≤ 1
   - S ≡ 1: Absolutely similar objects
   - S ≡ 0: Absolutely non-similar objects
   - Symmetry: S(A, B) = S(B, A)
   - Threshold for similarity: S(A, B) ≥ S_threshold
   - Transitivity: A ~ B and A ~ C ≠ B ~ C

10. **Designations**
    - N_a, N_b: Number of unique elements in arrays a and b
    - N_u: Number of unique elements in the union of a and b
    - N_i: Number of unique elements in the intersection of a and b

11. **Similarity Metrics**
    - **Jaccard Index:**
      \[
      S(A, B) = \frac{N_i}{N_a + N_b - N_i} = \frac{N_i}{N_u}
      \]
      - Complexity: ~N * log(N)
      - Suitable for large arrays of comparable sizes

    - **Cosine Similarity (Ochiai):**
      \[
      S(A, B) = \frac{N_i}{\sqrt{N_a \cdot N_b}}
      \]
      - Complexity: ~N * log(N)
      - Suitable for large N

12. **Issues with Jaccard and Cosine Metrics**
    - Vulnerable to popular items leading to false similarity
    - Solution: TF*IDF metrics
      - TF: Frequency of an element in an array
      - IDF: Inverted frequency of an element across all arrays

13. **smlar Extension in PostgreSQL**
    - **Functions and Operations:**
      - `float4 smlar(anyarray, anyarray)`
      - `anyarray % anyarray`
    - **Configuration Parameters:**
      - `smlar.threshold = float4`
      - `smlar.type = (tfidf, cosine)`
      - Set of options for TF*IDF

14. **Example Usage of smlar Extension**
    ```sql
    -- Example 1
    SELECT smlar('{0,1,2,3,4,5,6,7,8,9}'::int[], '{0,1}'::int[]);
    -- Output: 0.447214

    SET smlar.threshold = 0.6;
    SELECT '{0,1,2,3,4,5,6,7,8,9}'::int[] % '{0,1}'::int[];
    -- Output: f

    -- Example 2
    SELECT smlar('{one,two,three,4,5}'::text[], '{two,three}'::text[]);
    -- Output: 0.632456

    SELECT '{one,two,three,4,5}'::text[] % '{two,three}'::text[];
    -- Output: t
    ```

15. **Index Support**
    - Speed up `anyarray % anyarray` using:
      - GiST (Generalized Search Tree)
      - GIN (Generalized Inverted Index)

16. **GiST Index Implementation**
    - **Inner Page:**
      - Array key → signature
      - Bitwise OR of all descendants
    - **Leaf Page:**
      - Signature key (long array)
      - Array key (short array)

17. **Signature Generation**
    - Hash each element of the array into int4
    - Unique and sort the hashed array
    - Set the (v % length of signature)-th bit for each element v

18. **Traversing Subtrees**
    - Follow subtrees with an upper bound of similarity greater than the threshold
    - Use upper and lower estimations for intersection and number of elements

19. **Estimation for Leaf and Inner Signatures (Cosine)**
    - Query: {foo, bar} hashed to {124, 553}
    - Use # intersected bits as an upper estimation of common elements
    - Use # set bits as a lower estimation of N_elem
    - Calculate N_intersected / sqrt(N_intersected * N_query) for similarity

This revised version provides a more structured and professional presentation of the content, ensuring clarity and coherence.