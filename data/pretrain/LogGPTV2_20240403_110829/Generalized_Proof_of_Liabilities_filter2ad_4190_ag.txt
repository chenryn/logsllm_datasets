tax reporting, this is efficient enough. Meanwhile, the generation
process is highly parallelizable by generating subtrees concurrently.
6.2 Inclusion proofs
Table 3: Aggregated range proofs performance.
#Ranges aggregated
Proving time (s)
Verification time (s)
Proof size (B)
1
0.008
0.002
672
32
0.277
0.048
992
64
0.506
0.096
1056
128
1.009
0.191
1120
256
2.005
0.381
1184
the size of each is of a power of two.
split ùêª =ùëò
We integrated Bulletproofs [11] to the NDM-SMT so the basic
DAPOL+ functionality is complete. Regarding range proofs, we
prove all values are within range [0, 264 ‚àí 1], which is sufficient for
most real-world applications. The Bulletproofs library [65] doesn‚Äôt
support aggregated proofs when the number of ranges is not a
power of two. To address this, we can apply padding or splitting.
By padding, we deterministically add 2‚åàlog ùêª‚åâ ‚àí ùêª dummy ranges
to generate a proof aggregating 2‚åàlog ùêª‚åâ ranges. By splitting, we
ùëñ=0 ùëêùëñ √ó 2ùëñ ranges to at most ùëò = log ùêª sets of ranges,
We show DAPOL+ is practical via an example of generating a
32-height SMT for 1M users. The two mechanisms for generating
aggregated range proofs, i.e., padding and splitting, are equivalent
in this case. We present the range proof size, generation and verifi-
cation time in table 3. The time for retrieving the Merkle path and
verifying Merkle path is negligible compared to that of range proofs,
not up to 1ms. The time for generating one inclusion proof (aggre-
gating 32 range proofs) is 0.277s and the verification time is 0.048s.
In the proof, each node has a hash of 32 bytes and a commitment of
32 bytes, and the size of the aggregated range proof is 992 bytes, so
the size of an inclusion proof is 992ùêµ+32‚àó(32+32) = 3040ùêµ = 3ùêæùëñùêµ.
Figure 5: Generation time vs. number of nodes.
There is a tradeoff between proving time and proof size because
the size of the aggregated range proof grows logarithmically with
the number of ranges but the proof generation time grows linearly.
The generation time for an inclusion proof in a 32-height SMT is
0.277s when using aggregated Bulletproofs. Given 1M clients, the
total time for generating all inclusion proofs is 0.277ùë† √ó 106 ‚âà 77‚Ñé
without parallelization. Note that the nodes in upper layers of the
SMT are involved in multiple aggregated range proofs for different
clients. One optimization option is to sacrifice proof size for faster
proof generation. We can generate a range proof for every node in
the SMT without aggregation and provide all non-aggregated range
proofs on the proof path to clients. Then there is no duplication of
computing range proofs for the same tree node. In this way, the
proof size is 23.6ùêæùêµ which is still tolerable for a user receiving
proofs via a mobile device. The total inclusion proof generation
time varies by the number of nodes thus from 4.5h to 57h without
any parallelization. Clients can verify the range proofs in batch
though. Another optimization option is to aggregate range proofs
for nodes in upper layers of the SMT and generate non-aggregated
range proofs for lower-layer nodes. The previous two mechanisms
are like two extremes, one optimized in proof size while the other
optimized in proof generation time. We can tune the number of tree
nodes aggregated to achieve a satisfactory balance between proof
size and computation complexity. Anyway, the prover can deploy
multiple servers to generate range proofs and respond to users
simultaneously and the response latency is absolutely tolerable.
7 CONCLUSION
Applications of PoL share a common nature: the prover has no
incentive to exaggerate the total liabilities; individuals, in contrast,
have an incentive to make sure their values are included in the
reported total liabilities. We have formalized PoL as a general cryp-
tographic primitive utilizing the incentive feature, and standardized
PoL from three aspects: security, privacy and efficiency. We pre-
sented DAPOL+, a PoL protocol based on DAPOL but providing
provable security and privacy, and demonstrated its practicality
by evaluation results. We informally discussed other interesting
properties optional in different real-world applications and their
potential solutions. Formal treatment of the additional features for
a particular application remains future work. Although PoL crypto-
graphically bounds the reported total liabilities to some extent, it
doesn‚Äôt prevent a malicious prover from discarding the liabilities
to users that never verify proofs while remaining undetected. We
analyzed failure probability to understand the effectiveness of dis-
tributed verification. Note that failure probability is independent
of particular PoL schemes but fundamental to the distributed na-
ture of PoL and other interesting problems as well, such as voting
where voters need to verify their own individual ballots are cor-
rectly tallied. It‚Äôs important to carefully evaluate the effort needed
to incentivize sufficient verifiers for jointly preventing the prover
from cheating when applying PoL in practice.
8 ACKNOWLEDGEMENTS
We would like to thank Harjasleen Malvai, Irakliy Khaburzaniya,
Dahlia Malkhi and anonymous reviewers for their constructive
feedback on definitions and implementation considerations.
123456¬∑1075101520253035(0.1M,40)(1M,32)(1M,40)(1M,50)(0.5M,32)(0.5M,40)(0.5M,50)(0.1M,32)(0.1M,50)NumberofnodesGenerationtime(min)Session 12D: Decentralized Cryptographic Protocols CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3477REFERENCES
[1] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasubra-
maniam. 2017. Ligero: Lightweight sublinear arguments without a trusted setup.
In Proceedings of the 2017 acm sigsac conference on computer and communications
security. 2087‚Äì2104.
[2] Niko Bariƒá and Birgit Pfitzmann. 1997. Collision-free accumulators and fail-stop
signature schemes without trees. In Eurocrypt.
[3] Amos Beimel, Yuval Ishai, Eyal Kushilevitz, and J-F Raymond. 2002. Breaking
the O (n/sup 1/(2k-1)/) barrier for information-theoretic Private Information
Retrieval. In IEEE FOCS.
[4] Michael Ben-Or, Oded Goldreich, Silvio Micali, and Ronald L Rivest. 1990. A fair
protocol for signing contracts. IEEE Transactions on Information Theory 36, 1
(1990), 40‚Äì46.
[5] Josh Benaloh and Michael De Mare. 1993. One-way accumulators: A decentralized
alternative to digital signatures. In Eurocrypt.
[6] Josh Benaloh and Eric Lazarus. 2011. The trash attack: An attack on verifiable
voting systems and a simple mitigation. Technical Report. MSR-TR-2011-115,
Microsoft.
[7] Bitfury. 2013. On Blockchain Auditability. White Paper.
[8] Bitfury. 2016. On Blockchain Auditability.
https://bitfury.com/content/
downloads/bitfury_white_paper_on_blockchain_auditability.pdf.
[9] Blake3-team. 2021. Blake3. https://github.com/BLAKE3-team/BLAKE3/.
[10] Sean Bowe, Jack Grigg, and Daira Hopwood. 2019. Recursive proof composition
without a trusted setup. Technical Report. Cryptology ePrint Archive, Report
2019/1021, 2019. https://eprint. iacr. org ....
[11] Benedikt B√ºnz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, Pieter Wuille, and
Greg Maxwell. 2018. Bulletproofs: Short proofs for confidential transactions and
more. In S&P.
ties. https://vitalik.ca/general/2021/04/07/sharding.html.
[12] Vitalik Buterin. 2021. Why sharding is great: demystifying the technical proper-
[13] Philippe Camacho. 2014. Secure Protocols for Provable Security. https://www.
slideshare.net/philippecamacho/protocols-for-provable-solvency-38501620.
[14] Philippe Camacho, Alejandro Hevia, Marcos Kiwi, and Roberto Opazo. 2008.
[15] Jan Camenisch and Anna Lysyanskaya. 2002. Dynamic accumulators and appli-
Strong accumulators from collision-resistant hashing. In ISC.
cation to efficient revocation of anonymous credentials. In Crypto.
[16] Ethan Cecchetti, Fan Zhang, Yan Ji, Ahmed Kosba, Ari Juels, and Elaine Shi. 2017.
Solidus: Confidential distributed ledger transactions via PVORM. In ACM CCS.
[17] Konstantinos Chalkias, Fran√ßois Garillot, Yashvanth Kondi, and Valeria Niko-
laenko. [n. d.]. Non-interactive half-aggregation of EdDSA and variants of
Schnorr signatures. ([n. d.]).
[18] Konstantinos Chalkias, Yan Ji, and Irakliy Khaburzaniya. 2021. Rust DAPOL+
library. https://github.com/novifinancial/solvency.
[19] Konstantinos Chalkias, Kevin Lewi, Payman Mohassel, and Valeria Nikolaenko.
2019. Practical Privacy Preserving Proofs of Solvency. Amsterdam ZKProof
Community Event.
[20] Konstantinos Chalkias, Kevin Lewi, Payman Mohassel, and Valeria Nikolaenko.
2020. Distributed Auditing Proofs of Liabilities. 3rd ZKProof Workshop. ZKProof
(2020).
[21] Melissa Chase, Apoorvaa Deshpande, Esha Ghosh, and Harjasleen Malvai. 2019.
SEEMless: Secure End-to-End Encrypted Messaging with less Trust. In ACM
CCS.
[22] Panagiotis Chatzigiannis, Foteini Baldimtsi, and Konstantinos Chalkias. [n. d.].
SoK: Auditability and Accountability in Distributed Payment Systems. ([n. d.]).
[23] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. 1995. Private
[24] CoinMarketCap. 2021. Today‚Äôs Cryptocurrency Prices by Market Cap. https:
information retrieval. In IEEE FOCS.
//coinmarketcap.com/.
[25] Gaby G Dagher, Benedikt B√ºnz, Joseph Bonneau, Jeremy Clark, and Dan Boneh.
2015. Provisions: Privacy-preserving proofs of solvency for bitcoin exchanges. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security. 720‚Äì731.
[26] Etherscan. 2021. Ethereum Gas Tracker. https://etherscan.io/gastracker.
[27] FATF. 2020. 12-Month Review of the Revised FATF Standards on Virtual Assets
and Virtual Asset Service Providers.
[28] Centers for Disease Control and Prevention. 2020. Cases and Deaths in
the U.S. https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/us-cases-
deaths.html.
[29] Reid Forgrave. 2018. The Man Who Cracked the Lottery. The New York Times.
[30] Georg Fuchsbauer, Eike Kiltz, and Julian Loss. 2018. The algebraic group model
and its applications. In Annual International Cryptology Conference. Springer,
33‚Äì62.
[31] Ariel Gabizon, Zachary J Williamson, and Oana Ciobotaru. 2019. PLONK: Per-
mutations over Lagrange-bases for Oecumenical Noninteractive arguments of
Knowledge. IACR Cryptol. ePrint Arch. 2019 (2019), 953.
Statements and their Applications. Ph. D. Dissertation. New York University.
[32] Chaya Ganesh. 2017. Zero-knowledge Proofs: Efficient Techniques for Combination
[33] Christina Garman, Matthew Green, and Ian Miers. 2014. Decentralized Anony-
mous Credentials.. In NDSS. Citeseer.
[34] Peter Ga≈æi, Aggelos Kiayias, and Alexander Russell. 2018. Stake-bleeding at-
tacks on proof-of-stake blockchains. In Crypto Valley Conference on Blockchain
Technology.
[35] Ashrujit Ghoshal and Stefano Tessaro. 2020. Tight State-Restoration Soundness in
the Algebraic Group Model. Technical Report. Cryptology ePrint Archive, Report
2020/1351.
[36] Seth Gilbert and Nancy Lynch. 2002. Brewer‚Äôs conjecture and the feasibility
of consistent, available, partition-tolerant web services. Acm Sigact News 33, 2
(2002), 51‚Äì59.
[37] Oded Goldreich. 1987. Towards a theory of software protection and simulation
[38] Oded Goldreich and Rafail Ostrovsky. 1996. Software protection and simulation
by oblivious RAMs. In ACM STOC.
on oblivious RAMs. Journal of the ACM (JACM) 43, 3 (1996), 431‚Äì473.
Commission.
[39] Seena Gressin. 2017. The Equifax Data Breach: What to Do. Federal Trade
[40] Jens Groth. 2016. On the size of pairing-based non-interactive arguments. In
Annual international conference on the theory and applications of cryptographic
techniques. Springer, 305‚Äì326.
[41] James Heather and David Lundin. 2008. The append-only web bulletin board. In
International Workshop on Formal Aspects in Security and Trust. Springer, 242‚Äì256.
[42] Chabeli Herrera. 2016. Largest lawsuit against an auditor goes to court for $5.5
billion. https://www.miamiherald.com/news/business/banking/article92700782.
html.
[43] Kexin Hu, Zhenfeng Zhang, and Kaiwen Guo. 2019. Breaking the binding: Attacks
on the Merkle approach to prove liabilities and its applications. Computers &
Security (2019).
[44] Julia Kagan. 2020. Bank Failure. https://www.investopedia.com/terms/b/bank-
failure.asp.
[45] Karen Kitching. 2009. Audit value and charitable organizations. Journal of
[46] Hugo Krawczyk. 2010. Cryptographic extraction and key derivation: The HKDF
[47] Ralf Kusters, Tomasz Truderung, and Andreas Vogt. 2012. Clash attacks on the
[48] Andrew Lewis-Pye and Tim Roughgarden. 2020. Resource pools and the cap
Accounting and Public Policy (2009).
scheme. In Crypto.
verifiability of e-voting systems. In IEEE S&P.
theorem. arXiv preprint arXiv:2006.10698 (2020).
cation. In ISC.
ICISC.
//github.com/dalek-cryptography/curve25519-dalek.
[49] Helger Lipmaa. 2005. An oblivious transfer protocol with log-squared communi-
[50] Helger Lipmaa. 2009. First CPIR protocol with data-dependent computation. In
[51] Isis Agora Lovecruft and Henry de Valence. [n. d.]. curve25519-dalek. https:
[52] Robert McMillan. 2014. The Inside Story of Mt. Gox, Bitcoin‚Äôs $460 Million
Disaster. https://www.wired.com/2014/03/bitcoin-exchange/.