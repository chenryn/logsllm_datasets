ues xtoken[c, i]y/ρi for a conjunction is found not to be in
XSet, the other terms for this conjunction do not have to
be evaluated (hence avoiding the need for these exponen-
tiations). Similarly, for general Boolean expressions, early
termination can be exploited to reduce costly computation.
This highlights an important optimization for query process-
ing (especially for queries with large TSet(w1) sets): Besides
choosing the s-term as a term with high-entropy to keep
TSet(w1) small, also choose the evaluation order of x-terms
of an SNF expression such that it maximizes the proba-
bility of early termination and, hence, reduces the number
of (expected) exponentiations executed by E , e.g., for con-
junctions order the x-terms in descending order of entropy
(equivalently, ascending order of frequency).
Note (frequency ordering). In the OSPIR setting the client
may not know the frequency of terms in the database and
D will not know the query values to choose such terms opti-
mally. Thus, the exact mechanism for determining the above
ordering will depend on the speciﬁc setting. In our imple-
mentation we decide on ordering based on typical entropy of
attributes; e.g., assuming last names have more entropy than
names, and names more entropy than addresses, etc. (note
that an attribute-based ordering is more privacy-preserving
for the client than a value-based one).
4.4 Implementation and performance
The practicality of the proposed schemes was validated by
experiments on DBs which included e.g. English-language
Wikipedia (13,284,801 records / 2,732,311,945 indexed tu-
ples), and a synthetic US census database (100 million records
/ 22,525,274,592 index tuples, resulting in EDB with 1.7 TB
TSet and 0.4 TB XSet). To illustrate search eﬃciency, in
the census DB case we executed complex queries like
SELECT id WHERE fname=’CHARLIE’ AND
sex=’Female’ AND NOT (state=’NY’ OR
state=’MA’ OR state=’PA’ OR state=’NJ)
in about 4 seconds on an IBM Blade dual Intel 4-core Xeon
processor and storage provided by a (low-end) 6.2TB RAID-
5 storage system. Preprocessing of such large DBs (TSet
and XSet creation) has been feasible by, among other things,
optimization of common-base exponentiations, achieving ag-
gregated (parallel) rate of about 500,000 exp.’s/sec. for the
NIST 224p elliptic curve.
See [8] for details on implementation and performance as
well as for the extension of OXT and OSPIR-OXT to support
dynamic databases (where documents can be added, deleted
and modiﬁed).
5. SECURITY
We analyze security of the OSPIR-SSE scheme. We focus
on the OSPIR case as it is the more comprehensive setting
and it contains MC-SSE as a special case. The SSE-OXT
protocol is analyzed in the SSE setting in [9].
5.1 Security and Correctness Def nitions
SSE security deﬁnitions where the only adversarial entity
is server E are provided in prior work. Here we follow the def-
initions from [9] - which in turn follow [11, 13] - and extend
them to the MC setting by considering multiple malicious
clients and to the OSPIR setting by adding also the data
owner D as an adversarial entity. All security deﬁnitions
follow the ideal/real model framework of secure computa-
tion and are parametrized by a leakage function L bounding
the information leaked to an adversarial party in addition to
the intended output for that party. Speciﬁcally, we ask that
whatever an adversary can do by running the real protocol
on data and queries chosen by the adversary, a simulator
can do solely on the basis of the leakage function.
883Correctness. We say that an OSPIR-SSE scheme Σ =
(EDBSetup, GenToken, Search) is computationally correct if
for every eﬃcient algorithm A, there is a negligible proba-
bility that the following experiment outputs 0. On inputs
(DB, RDK) and ¯w(1), . . . , ¯w(m) provided by A, execute (K,
EDB) ← EDBSetup(DB, RDK); and for i = 1, 2, . . ., execute
protocol GenToken on C’s input ¯w(i) and D’s inputs (P, K),
denote C’s output as token(i), execute protocol Search be-
tween C on input token(i) and E on input EDB and denote
C’s outputs as a pair (indSet(i), rdkSet(i)). Output 1 if for
each i we have that indSet(i) = DB( ¯w(i)) and rdkSet(i) =
RDK[DB( ¯w(i))]. Otherwise output 0.
Security against adversarial server E . Security against
adversarial (honest-but-curious) E has been the focus of prior
SSE work. Adapting the deﬁnition of L-semantic security
against adaptive attacks (by the server E ) from [9] to our
setting is straightforward and is omitted here.
Security against adversarial clients. The deﬁnition cap-
tures the information leaked to a malicious client in addi-
tion to the intended output DB( ¯w) and the corresponding
record-decrypting keys RDK[DB( ¯w)]. The deﬁnition com-
pares the real execution to an emulation of an interaction
with algorithm I-SSEL, which models an ideal functional-
ity of the OSPIR-SSE scheme instantiated with the leakage
function L. The interactive algorithm I-SSEL, running on
local input (DB, RDK, P), answers queries ¯w ∈ W∗ by check-
ing if av( ¯w) ∈ P.
If the check veriﬁes, then it replies to
this ¯w with a triple (DB( ¯w), RDK[DB( ¯w)], L(DB, ¯w)), and if
av( ¯w) 6∈ P then it sends back a rejection symbol ⊥.
Definition 1. Let Π = (EDBSetup, GenToken, Search) be
an OSPIR-SSE scheme. Given algorithms L, A, and S =
(S0, S1, S2) we deﬁne experiments (algorithms) RealΠ
A(λ)
and IdealΠ
A,S(λ) as follows:
RealΠ
A(λ): A(1λ) chooses (DB, RDK, P), and the experiment
runs (K, EDB) ← EDBSetup(DB, RDK). Adversary A can
then adaptively invoke instances of the protocol GenToken
and Search, interacting with party D running on input K and
P in the ﬁrst case and with party E running on input EDB
in the second case. Note that A can behave arbitrarily in all
these protocol instances. Let q be the number of GenToken
instances and let avi be D’s local output in the i-th instance.
If at any point A halts and outputs a bit b, the game outputs
(b, av1, . . . , avq).
A,S(λ): A(1λ) chooses (DB, RDK, P) as above, while
IdealΠ
the experiment initializes S = (S0, S1, S2) by running st ←
S0(1λ). Subsequently, each time A invokes an instance of
protocol GenToken, it interacts with the experiment running
S1(st, P), whereas if A invokes an instance of protocol Search,
it interacts with the experiment running S2(st). Both S1 and
S2 algorithms are allowed to update the global simulator’s
state st while interacting with A. Both can issue queries ¯w
to I-SSEL(DB, RDK, P). Let q be the number of these queries
and let avi = I( ¯wi), where ¯wi is the i-th query. As above,
if at any point A halts and output a bit b, the game outputs
(b, av1, . . . , avq).
We call Π L-semantically-secure against malicious clients
if for any eﬃcient algorithm A there is an eﬃcient algorithm
S s.t. the statistical diﬀerence between tuples (b, av1, . . . , avq)
output by experiments RealΠ
A,S is a negligible
function of the security parameter λ.
A and IdealΠ
Security against adversarial data owner. Security against
a data-owner D models privacy of the client’s queries ¯w
against malicious D, given an adaptive choice of the client’s
queries. Similarly to the case of security against either the
client C or the EDB-storing server E , this security deﬁnition
also allows for leakage of some information L( ¯w) regarding
the query ¯w to D.
A(λ) and IdealΠ
Definition 2. Let Π = (EDBSetup, GenToken, Search) be
an OSPIR-SSE scheme. Given algorithms L, A, and S we
deﬁne experiments (algorithms) RealΠ
A,S(λ)
as follows:
A(λ): Adversary A(1λ) can adaptively invoke any num-
RealΠ
ber of GenToken instances by specifying a query ¯w and inter-
acting with party C running the GenToken protocol on input
¯w. At any point A can halt and output a bit, which the game
uses as its own output.
IdealΠ
A,S(λ): Adversary A(1λ) can adaptively invoke any
number of GenToken instances as above, but for any query
¯w which A speciﬁes, it interacts with S running on input
L( ¯w). As above if A halts and output a bit, the game uses
this bit as its own output.
We call Π L-semantically-secure against malicious data
owner if for any eﬃcient alg. A there is an eﬃcient alg. S
s.t. Pr[RealΠ
A(λ)=1] − Pr[IdealΠ
A,S(λ)=1] ≤ neg(λ).
Note (non-collusion between D and E ). We stress that even
though the data owner D can be arbitrarily malicious, we as-
sume that D and E do not collude. Indeed, client’s security
in the OSPIR-OXT scheme we propose is not maintained
against such collusion. Moreover, providing query-privacy
from D under collusion with E would have the (impracti-
cal) cost of a single-server symmetric PIR protocol. The
hospital example mentioned in the introduction, is a case
where such non-collusion requirement makes sense. Indeed,
it is the hospital interest not to learn the queries: It helps
avoiding liability and complying with regulations as well as
withstanding potential insider attacks. Similarly, for a ser-
vice providing private access to a database (e.g. to a patent
repository) preserving client privacy is part of its very busi-
ness model. See also [18].
5.2 Security of OSPIR-OXT
Correctness of OSPIR-OXT. We ﬁrst argue that proto-
col OSPIR-OXT is correct.
Theorem 3. The OSPIR-SSE scheme OSPIR-OXT in-
stantiated with the Hashed Diﬃe-Hellman OPRF is compu-
tationally correct assuming that the DDH assumption holds,
that the T-set implementation is computationally correct,
that Fp is a secure PRF, and assuming the Random Ora-
cle Model for hash function H.
Since T-set implementation is computationally correct,
any correctness errors can only come from collisions in PRF
functions, including function FKX ,KI eﬀectively used in com-
puting xtag values, deﬁned as FKX ,KI (w, ind) =
G (KX , w))Fp(KI ,ind). But assuming the PRF property of
(F m
Fp, and the PRF property of F m
G , which holds under DDH in
ROM, function FKX ,KI is a PRF too, and so collision prob-
ability is negligible, resulting in negligible error probability
over the execution of the OSPIR-OXT correctness experi-
ment.
884Security of OSPIR-OXT. Using the security notions ex-
plained above we describe the security properties of the
OSPIR-SSE scheme OSPIR-OXT instantiated with the Hashed
Diﬃe-Hellman OPRF, as shown in Figure 3. We ﬁrst state
the OM-GDH security assumption required for the security
of the OPRF and S-OPRF sub-protocols of this OSPIR-OXT
instantiation.
One-More Gap Diﬃe-Hellman (OM-GDH). Let G =
Gλ be a prime order cyclic group of order p = p(λ) generated
by g. We say that the One-More Gap Diﬃe-Hellman (OM-
GDH) assumption holds in G if Advddh
G,A(λ) is negligible for
all eﬃcient adversaries A, where Advddh
G,A(λ) is deﬁned as the
probability that A wins the following game: (1) The game
chooses random t in Z ∗
p and two random elements h1, h2 in
G; (2) A, on input h1, h2, speciﬁes a single query a to the
Diﬃe-Hellman oracle, which on input a returns b ← at; (3)
A can make any number of queries to a Decisional Diﬃe-
Hellman oracle DDHt(·, ·), which on input (h, v) returns 1 if
v = ht and 0 otherwise; (4) Finally A outputs two values
v1, v2, and we say that A wins the game if v1 = (h1)t and
v2 = (h2)t.
Security against adversarial server E . The OSPIR-
SSE scheme OSPIR-OXT is Loxt-semantically-secure against
adaptive server E under the same assumptions and for the
same leakage function Loxt as the underlying SSE scheme
OXT of [9]. This is because the speciﬁc PRF’s used by
OSPIR-OXT in EDB construction are instantiations of gen-
eral PRF’s considered in OXT, and because E ’s view of the
Search protocol in the OSPIR-OXT scheme can be generated
from E ’s view of Search in the OXT scheme. Speciﬁcally, each
ρi in env is random in Z ∗
p , and bstag and each bxtoken[c, i]
value in Figure 3 can be computed by exponentiating values
stag and xtoken[c, i] in Figure 1 to, respectively, ρ1 and ρi.
Security against adversarial client C. Let Mask(|DB(w1)|)
denote an upper bound on |DB(w1)| used by E to mask the
size of TSet(w1) when responding to C’s queries as described
at the end of Section 3.
Theorem 4. Let L be a deﬁned as L(DB, ¯w) = Mask
(|DB(w1)|) for ¯w = (w1, ..., wn). OSPIR-SSE scheme OSPIR-OXT
instantiated with the Hashed Diﬃe-Hellman OPRF is L-
semantically-secure against malicious clients assuming that
the One-More Gap Diﬃe-Hellman assumption holds in G,
that Fp is a secure PRF, that the T-set implementation
is (computationally) correct, that (AuthEnc, AuthDec) is an
IND-CPA and Strongly-UF-CMA authenticated encryption
scheme, and assuming the Random Oracle Model for hash
function H.