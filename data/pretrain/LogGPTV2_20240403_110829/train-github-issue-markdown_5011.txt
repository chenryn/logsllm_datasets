**Ben Hutchison** opened **SPR-230** * and commented
Objects that contain other objects (common examples include Swing Containers
and the Collections classes) frequently cannot have their initial state
specified through setting javabeans properties alone.
This is a request for the spring core to include extensions to the syntax of
the applicationContext.xml to allow such objects to be setup completely from
XML. Some reasonably conveinient syntax is needed that allows methods like
"add()" to be invoked on the bean at construction time. Ideally, I think the
syntax should allow any arbritrary methods to be called on a bean during
preparation.
There is a clear precendent to be found in the design of the
java.beans.XMLEncoder/Decoder classes, designed to support long term bean
perisstence. Consider the extract below generated by XML-serializing a List:
item  
Evidently, it was recognized as an important feature as its present from the
first release of the peristence mechanism.
Consider what is **not** readily doable from XML without this feature:
  * Cannot create any Swing component heirarchies.
  * Cannot initialize custom collections (ie anything not a vanilla set/map/list impl), unless it provides a copy-constructor.
  * Cannot init arbritrary state on objects which do not observe the get/setXXX convention (and legacy code is littered with them).
* * *
**Affects:** 1.0.2
**Attachments:**
  * SPR-230.patch ( _137.30 kB_ )
**Issue Links:**
  * #7195 Allow setting of properties without a javabean setter ( _ **"is duplicated by"**_ )
  * #7222 Support JavaBean Eventing methods in Spring ( _ **"is duplicated by"**_ )
  * #7488 "adder" injection in addition to "setter" (invoke addXX() instead of setXX()) ( _ **"is duplicated by"**_ )
  * #5727 support "add"-style List injection ( _ **"is duplicated by"**_ )
32 votes, 28 watchers