title:Tracking Rootkit Footprints with a Practical Memory Analysis System
author:Weidong Cui and
Marcus Peinado and
Zhilei Xu and
Ellick Chan
Tracking Rootkit Footprints with a Practical Memory Analysis System
Weidong Cui
Microsoft Research
PI:EMAIL
Marcus Peinado
Microsoft Research
PI:EMAIL
Massachusetts Institute of Technology
University of Illinois at Urbana-Champaign
Zhilei Xu
PI:EMAIL
Ellick Chan
PI:EMAIL
Abstract
In this paper, we present MAS, a practical memory anal-
ysis system for identifying a kernel rootkit’s memory
footprint in an infected system. We also present two
large-scale studies of applying MAS to 848 real-world
Windows kernel crash dumps and 154,768 potential mal-
ware samples.
Error propagation and invalid pointers are two key
challenges that stop previous pointer-based memory
traversal solutions from effectively and efﬁciently ana-
lyzing real-world systems. MAS uses a new memory
traversal algorithm to support error correction and stop
error propagation. Our enhanced static analysis allows
the MAS memory traversal to avoid error-prone opera-
tions and provides it with a reliable partial type assign-
ment.
Our experiments show that MAS was able to analyze
all memory snapshots quickly with typical running times
between 30 and 160 seconds per snapshot and with near
perfect accuracy. Our kernel malware study observes
that the malware samples we tested hooked 191 differ-
ent function pointers in 31 different data structures. With
MAS, we were able to determine quickly that 95 out of
the 848 crash dumps contained kernel rootkits.
1
Introduction
Kernel rootkits represent a signiﬁcant threat to computer
security because, once a rootkit compromises the OS ker-
nel, it owns the entire software stack which allows it to
evade detections and launch many kinds of attacks. For
instance, the Alureon rootkit [1] was infamous for steal-
ing passwords and credit card data, running botnets, and
causing a large number of Windows systems to crash.
Kernel rootkits also present a serious challenge for mal-
ware analysis because, to hide its existence, a rootkit at-
tempts to manipulate the kernel code and data of an in-
fected system.
An important task in detecting and analyzing kernel
rootkits is to identify all the changes a rootkit makes to
an infected OS kernel for hijacking code execution or
hiding its activities. We call these changes a rootkit’s
memory footprint. We perform this task in two common
scenarios: We detect if real-world computer systems are
infected by kernel rootkits. We also analyze suspicious
software in a controlled environment. One can use either
execution tracing or memory analysis in a controlled en-
vironment, but is usually limited to memory analysis for
real-world systems. In this paper we focus on the mem-
ory analysis approach since it can be applied in both sce-
narios.
After many years of research on kernel rootkits, we
still lack a practical memory analysis system that is ac-
curate, robust, and performant. In other words, we ex-
pect such a practical system to correctly and quickly
identify all memory changes made by a rootkit to arbi-
trary systems that may have a variety of kernel modules
loaded. Furthermore, we lack a large-scale study of ker-
nel rootkit behaviors, partly because there is no practi-
cal system that can analyze memory infected by kernel
rootkits in an accurate, robust and performant manner.
In this paper, we present MAS, a practical memory
analysis system for identifying a rootkit’s memory foot-
print. We also present the results of two large-scale ex-
periments in which we use MAS to analyze 837 kernel
crash dumps of real-world systems running Windows 7,
and 154,768 potential malware samples from the reposi-
tory of a major commercial anti-malware vendor. These
are the two major contributions of this paper.
Previous work [2, 3, 19] has established that, to iden-
tify a rootkit’s memory footprint, we need to check not
only the integrity of kernel code and static data but also
the integrity of dynamic data, and the real challenge lies
in the latter task.
In order to locate dynamic data, these systems ﬁrst lo-
cate static data objects in each loaded module, then re-
cursively follow the pointers in these objects and in all
newly identiﬁed data objects, until no new data object
can be added. Unlike the earlier systems, KOP [3] in-
cludes generic pointers (e.g., void∗) in its memory traver-
sal, and shows that failing to do so will prevent the mem-
ory traversal from reaching about two thirds of the dy-
namic objects.
Previous solutions do not sufﬁciently address an im-
portant practical problem of this memory traversal pro-
cedure: its tendency to accumulate and propagate errors.
A typical large real-world kernel memory image is bound
to contain invalid pointers. That is, there are likely to be
dynamic objects with pointer ﬁelds not pointing to valid
objects. Following such pointers results in objects being
incorrectly included in the object mapping. Worse, such
identiﬁcation errors can be propagated due to the nature
of the recursive, greedy memory traversal. A single in-
correctly identiﬁed data object may cause many more
mistakes in the subsequent traversal.
Invalid pointers may exist for a variety of reasons. For
example, an object may have been allocated, but not yet
initialized. KOP is exposed to a second source of poten-
tial errors. KOP tries to follow all generic pointers. If the
pointer type cannot be uniquely determined, KOP tries
to decide the correct type using a heuristic. A fraction of
these guesses are bound to be incorrect.
In light of these problems, we design MAS to con-
trol the number of errors that arise from following invalid
pointers and to contain their effects. Instead of perform-
ing a greedy memory traversal that is vulnerable to error
propagation, MAS uses a new traversal scheme to sup-
port error correction. MAS also uses static analysis to
derive information that can be used to uniquely identify
many objects and their types without having to rely on
the recursive traversal procedure. Furthermore, MAS is
not subject to errors caused by ambiguous pointers, i.e.,
pointers whose type cannot be uniquely determined. It
uses an enhanced static analysis to identify unique types
for a large fraction of generic pointers and ignores all
remaining ambiguous pointers. While this may reduce
coverage, it will never cause an object to be recognized
incorrectly. Our evaluation will show that the impact on
coverage is minor. Finally, before accepting an object,
MAS checks a number of constraints, including new con-
straints we derive from our static analysis.
We implemented a prototype of MAS and compared
it with KOP on eleven crash dumps of real-world sys-
tems running Windows Vista SP1. MAS’s performance
is one order of magnitude better than KOP regarding both
static analysis and memory traversal. MAS did not miss
or misidentify any function pointers found by KOP, but
KOP missed or misidentiﬁed up to 40% of suspicious
function pointers (i.e., function pointers that point to un-
trusted code).
In our large-scale experiments, we ran MAS over
crash dumps taken from 837 real-world systems run-
ning Windows 7 and memory snapshots taken from Win-
dows XP SP3 VMs subjected to one of 154,768 potential
real-world malware samples. For the Windows 7 crash
dumps, MAS took 105 seconds to analyze a single dump
on average. It identiﬁed a total of about 400,000 suspi-
cious function pointers. We were able to verify the cor-
rectness of all but 24 of them. Moreover, with the results
of MAS, we were able to quickly identify 90 Windows 7
crash dumps (and ﬁve Windows Vista SP1 crash dumps)
that were infected by kernel rootkits.
In our study of
malware samples, MAS required about 30 seconds to
analyze each VM memory snapshot. Our study shows
that the kernel rootkits we tested hooked 191 function
pointer ﬁelds in 31 data structures.
It also shows that
many malware samples had identical footprints, which
suggests that we can use MAS to detect new malware
samples/families that have different memory footprints.
The rest of this paper is organized as follows. Sec-
tion 2 provides an overview of the paper. Sections 3 and
4 describe the design of MAS and explain the algorithms
used for static analysis and memory traversal. Section 5
explains how we evaluate the set of objects found by
MAS for suspicious activity. Section 6 describes our
implementation of MAS. Section 7 describes our evalua-
tion of MAS. Section 8 and Section 9 describe two large-
scale experiments in which we analyze malware samples
and identify rootkits from crash dumps. Sections 10 and
Section 11 discuss related work and limitations. Finally,
Section 12 concludes the paper.
2 Overview
The goal of MAS is to identify all memory changes a
rootkit makes for hijacking execution and hiding its ac-
tivities. MAS does so in three steps: static analysis,
memory traversal, and integrity checking.
Static Analysis: MAS takes the source code of the OS
kernel and drivers as the input and uses a pointer
analysis algorithm to identify candidate types for
generic pointers such as void∗ and linked list con-
structs. Furthermore, it also computes the associa-
tions between data types and pool tags [18].
Memory Traversal: MAS tries to identify dynamic
data objects in a given memory snapshot. Besides
the snapshot, the input includes the type related in-
formation derived from static analysis and the sym-
bol information [15] for each loaded module (if it is
available).
Integrity Checking: MAS identiﬁes the memory
changes a rootkit makes by inspecting the integrity
of code, static data and dynamic data (recognized
2
In addition to checking
from memory traversal).
if some code section is modiﬁed, MAS detects two
kinds of violations: (1) a function pointer points to
a memory region outside of a list of known good
modules; (2) a data object is hidden from a system
program. The list of identiﬁed integrity violations
is the ﬁnal output of MAS. Such information can be
used to detect if a system is infected by a rootkit or
analyze a rootkit’s behavior.
Next we describe these three steps in detail.
3 Static Analysis
In this section, we present our demand-driven pointer
analysis algorithm. After that, we describe how we use
this algorithm to identify candidate types for generic
pointers and data types associated with pool tags.
3.1 Demand-Driven Pointer Analysis
We use demand-driven pointer analysis because we do
not need the alias information for all the variables in a
program, which traditional pointer analyses compute. In-
stead, we only compute the alias sets of generic pointers,
a small portion of all the variables in a program.
Our demand-driven pointer analysis follows largely
the approach of Zheng and Rugina [27]. Since our goal
is to precisely identify candidate types for generic point-
ers, we extend Zheng and Rugina’s pointer analysis to
be ﬁeld-sensitive, context-sensitive and partially ﬂow-
sensitive. We achieve partial ﬂow-sensitivity by convert-
ing a program to the Static Single Assignment (SSA)
form conservatively. We enforce context-sensitivity in
a way similar to [23]. We handle indirect calls in our
analysis as well.
Next we will summarize the approach of [27] and pro-
vide a detailed description of our extension to ﬁeld sen-
sitivity.
3.1.1 Program Expression Graph
The algorithm of [27] operates on a Program Expression
Graph (PEG), a graph representation of all expressions
and assignments in a C-like program. In this paper, we
represent an expression as a C variable with ∗ (for the
dereference operation), & (for the take-address opera-
tion) and → (for the ﬁeld operation). In a PEG, the nodes
are program expressions, and the edges are of two kinds:
Assignment Edge (A): For each assignment e1 = e2,
there is an A-edge from e2 to e1.
Dereference Edge (D): For each dereference ∗e, there
is a D-edge from e to ∗e; for each address &e, there
is a D-edge from &e to e.
Figure 1: Sample program and its PEG
For each A and D edge, there is also a corresponding
inverse edge in the opposite direction, denoted by A and
D. The edges can also be treated as relations between the
corresponding nodes; so relations A and D are the inverse
relations of A and D. Figure 1 shows a sample program
and its PEG.
3.1.2 CFL-Reachability
In addition to the A and D relations (edges), we further
deﬁne two relations between expressions (nodes):
Value Alias (V ): If a and b may evaluate to the same
value, we say they are value aliases, represented as
aV b.
Memory Alias (M): If the addresses of a and b may de-
note to the same location, we say they are memory
aliases, represented as aMb.
Given an interesting expression p, our pointer analy-
sis searches for the set of expressions q such that pV q.
We call this set thevalue alias set of p. Similar to [27],
we formulate the computation of the V relation as a
Context-Free Language (CFL) reachability problem [21]
over the program expression graph. Speciﬁcally, a rela-
tion R over the nodes of a PEG can be formulated as a
CFL-reachability problem by constructing a grammar G
such that a node pair (a,b) has the relation R if and only
if there is a path from a to b such that the sequence of
labels along the path belongs to the language L(G). The
context-free grammar GV for value and memory alias re-
lations is:
Value Aliases:
Memory Aliases: M ::= ε | DV D
V
::= M | MAV | VAM
The grammar GV has non-terminals V and M, and ter-
minals A, A, D, and D. Readers can verify that the sample
PEG in Figure 1 contains a path from b to c with label se-
quence DADADDA that can be produced by the V non-
terminal in GV . So the grammar successfully deducts
that b and c are value aliases. The intuition behind each
production rule is:
M ::= ε a is a memory alias of itself.
3
!"!"#"$"%&'"(#"$"%)'"(&"$"*'"!")"$"*"%&"&"(&"#"(#")"%)"*"+"+"+"!"!"!"!"!"!"!"+"+"+"+"+"+"!"!"!"typedef struct {
void *header; // call this field F
int
status;
} KOBJECT;
KOBJECT *x, *y;
*x = *y;
Figure 3: Example code of struct assignment.
However, we observe that this is insufﬁcient to track
all the value aliases because of a feature in C called struct
assignment. One can assign a structure to another as
if they were both simple variables, and the effect is the
same as doing assignments between corresponding ﬁelds
recursively (because each ﬁeld can possibly be an em-
bedded structure).
Figure 3 shows a simple example where handling
struct assignment becomes crucial to the analysis. x →
header and y → header are value aliases, as well as
x → status and y → status. However, the extended gram-
mar suggested by Zheng and Rugina can not capture
these alias relationships correctly. The relevant edges
connecting from x → header to y → header produce the
label sequence D f DAD f D, which cannot be generated
from the “V” non-terminal in Zheng and Rugina’s ex-
tended grammar. Struct assignment is a common fea-
ture widely used in various programs. We must handle it
properly when computing value aliases.
Struct assignment can only happen when the two vari-
ables involved are of the same type, and that type is
precisely known to the compiler. Taking advantage of
this property, we have an effective and efﬁcient ﬁx for
Zheng and Rugina’s algorithm. In the program expres-
sion graph, we expand each struct assignment to the in-
dividual assignments of all corresponding ﬁelds. In the
example code, ∗x = ∗y is expanded to x → header = y →
header;x → status = y → status. If some ﬁeld is an em-
bedded struct, then this expansion is done recursively,
eventually down to the “leaf” ﬁelds. The program ex-
pression graph built this way is free of struct assignment,
and Zheng and Rugina’s extended grammar works prop-
erly on this kind of PEG.
3.2 Type Candidate Inference
We have implemented Zheng and Rugina’s algorithm
with our extension to do demand-driven pointer analysis.
MAS uses this pointer analysis to derive the set of type-
related information for identifying dynamic data object
in memory traversal. The set of type-related information
has two parts: candidate types for generic pointers and
candidate types for pool tags [18] Note that we use can-
didate types and type candidates interchangeably. Next
we will describe how we derive them in detail.
Figure 2: The relation of struct, ﬁeld, and base pointer;
and the corresponding PEG representation.
M ::= DV D Given ∗pDpV qD∗ q then, because p and q
are value aliases, ∗p and ∗q are memory aliases.
V ::= M Memory aliases are also value aliases.
V ::= VAM Given aV bAcMd, the value of a propagates
to c, which may reside in the same memory as d.
Thus, a and d are value aliases. Similarly V ::=
MAV .
Given this grammar, Zheng and Rugina go on to con-
struct a hierarchical state machine and design an algo-
rithm that decides whether two expressions are memory
aliases. They also sketch an extension of the alias analy-
sis algorithm for computing the value alias set of a single
expression, which we adopt in MAS. Next, we describe
how we extend the basic grammar to achieve ﬁeld sensi-
tivity.
3.1.3 Field Sensitivity
Field-sensitivity is necessary for our pointer analysis
since we want to distinguish a generic pointer ﬁeld from
other ﬁelds in the same data structure. Field-insensitive
analysis, on the other hand, treats all ﬁelds in a data struc-
ture as the structure itself.
Fields in C can be represented by means of pointer
arithmetic: given a base pointer p and a ﬁeld f , &(p →