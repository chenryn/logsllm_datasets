struct execve_args init_exec_args;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 43 of 59
int init_attempts = 0;
void
load_init_program(struct proc *p)
{
vm_offset_t init_addr;
char *argv[3];
int error;
register_t retval[2];
error = 0;
do {
...
// struct execve_args {
// char *fname;
// char **argp;
// char **envp;
// };
init_exec_args.fname = /* user space init_program_name */
init_exec_args.argp = /* user space init arguments */
init_exec.args.envp = /* user space NULL */
// need init to run with uid and gid 0
set_security_token(p);
error = execve(p, &init_exec_args, retval);
} while (error);
}
Finally, the first user-space program begins to execute.
5.9. Slave Processors
Before we discuss user-level startup, let us look at the ppc_init_cpu() [osfmk/ppc/ppc_init.c] function. Recall from Figure 52 that at boot
time, a slave processor calls ppc_init_cpu() instead of ppc_init(). The execution journey of a slave processor is much shorter than that of
the master processor. Figure 522 shows the execution path of ppc_init_cpu().
Figure 522. Slave processor initialization
[View full size image]
ppc_init_cpu() clears the SleepState bit in the cpu_flags field of the processor's per_proc_info structure. On 64-bit hardware,
ppc_init_cpu() checks whether the wcte global variable is set to 0; if so, it disables the noncacheable unit's store gather timer through an
SCOM command. The value of the wcte variable can be set through the wcte boot argument (see Table 412).
Next, ppc_init_cpu() calls cpu_init() [osfmk/ppc/cpu.c], which we came across earlier in this chapter. cpu_init() restores the Timebase
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 44 of 59
Register from values saved in the CPU's per_proc_info structure. It also sets the values of some fields in the per_proc_info structure.
Finally, ppc_init_cpu() calls slave_main() [osfmk/kern/startup.c], which never returns.
Recall how the kernel_bootstrap() function, while running on the master processor, arrangedthrough load_context()for
kernel_bootstrap_thread() to start executing. Similarly, slave_main() arranges for processor_start_thread()
[osfmk/kern/startup.c] to start executing. processor_start_thread() calls slave_machine_init() [osfmk/ppc/model_dep.c].
slave_machine_init() initializes the processor by calling cpu_machine_init() [osfmk/ppc/cpu.c] and the clock by calling clock_init()
[osfmk/kern/clock.c]. We earlier noted the operation of clock_init(), which calls the initialization functions of all available clock devices.
cpu_machine_init() calls PE_cpu_machine_init() [iokit/Kernel/IOCPU.cpp], synchronizes the Timebase Register with the master
processor, and enables interrupts.
// iokit/Kernel/IOCPU.cpp
void
PE_cpu_machine_init(cpu_id_t target, boolean_t boot)
{
IOCPU *targetCPU = OSDynamicCast(IOCPU, (OSObject *)target);
if (targetCPU)
targetCPU->initCPU(boot);
}
5.10. User-Level Startup
As Section 5.8 described, user-level startup is initiated when the kernel executes /sbin/launchd as the first user process. We will now look at
the implementation and operation of launchd.
5.10.1. launchd
launchd is the master bootstrap daemon beginning with Mac OS X 10.4. It subsumes the functionality of the traditional init program and the
erstwhile Mac OS X mach_init program. The following are notable features of launchd.
 It manages both system-wide daemons and per-user agents. An agent is a type of daemon that runs while a user is logged in. Unless the
distinction is necessary, we will use the term daemons in this discussion to refer to both daemons and agents.
 As the first user process, it performs user-level system bootstrap.
 It handles both single-user and multiuser booting modes. In a multiuser boot, it runs the traditional BSD-style command script (/etc/rc)
and sets up daemons whose configuration files are located in designated directories such
as /System/Library/LaunchDaemons/, /Library/LaunchDaemons/, /System/Library/LaunchAgents/, /Library/LaunchAgents/,
and ~/Library/LaunchAgents/.
 It supports daemons that are designed to run under the inetd superserver on Unix systems.
 It can run jobs periodically. A launchd job is an abstraction that consists of a runnable entity (a program) along with the entity's
configuration.
 It allows several aspects of a daemon to be configured through a property list file, rather than the daemon having to programmatically
configure itself.
 It can start daemons on demand, based on a variety of conditions.
launchd simplifies the configuration, management, and, in many cases, even creation of daemons.
5.10.1.1. Daemon Configuration and Management
launchd provides a set of predefined keys that can be used in a daemon's property list file to specify various runtime aspects of the daemon. The
following are examples of such aspects:
 User and group names (or identifiers)
 Root and working directories
 Umask value
 Environment variables
 Standard error and standard output redirections
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 45 of 59
 Soft and hard resource limits
 Scheduling priority alterations
 I/O priority alterations
An important ability of launchd is that it can launch daemons when they are needed, rather than having "always on" processes. Such on-
demand launching can be based on criteria such as the following:
 A given periodic interval
 An incoming connection request on a given TCP port number
 An incoming connection request on a given AF_UNIX path
 Modification of a given file system path
 Appearance or modification of file system entities in a given queue directory
The launchd configuration file for a daemon is an XML property list file. Let us look at some examples. Figure 523 shows the configuration
file for the SSH daemon.
Figure 523. A launchd configuration file
$ ls -1 /System/Library/LaunchDaemons
bootps.plist
com.apple.KernelEventAgent.plist
com.apple.atrun.plist
com.apple.mDNSResponder.plist
...
ssh.plist
swat.plist
telnet.plist
tftp.plist
$ cat /System/Library/LaunchDaemons/ssh.plist
...
Label
com.openssh.sshd
Program
/usr/libexec/sshd-keygen-wrapper
ProgramArguments
/usr/sbin/sshd
-i
Sockets
Listeners
SockServiceName
ssh
Bonjour
ssh
sftp-ssh
inetdCompatibility
Wait
SessionCreate
StandardErrorPath
/dev/null
The meanings of keys shown in Figure 523 are as follows.
 The Label key uniquely identifies the job to launchd. This key is mandatory.
 The Program key is used as the first argument of execvp() by launchd.
 The ProgramArguments key is used as the second argument of execvp() by launchd. Note that if the Program key is absent, the first
element of the ProgramArguments key's array value is used instead.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 46 of 59
 The Sockets key specifies launch-on-demand sockets that allow launchd to determine when to run the job. The SockServiceName key
specifies the service name that can be used by the getaddrinfo(3) function to determine the well-known port for this service.
 The Bonjour key requests registration of the service with the mDNSResponder program. Its value is either a list of names to advertise or a
Boolean, in which case the name to advertise is inferred from SockServiceName.
 The inetdCompatibility key specifies that the daemon expects to run under inetd, and an appropriate compatibility environment
should be provided by launchd. The Wait Boolean key specifies the wait or nowait options of inetd.
 The SessionCreate Boolean key, if set to TRue, causes launchd to use the dlopen interface to call the SessionCreate() function from
the Security framework (/System/Library/Frameworks/Security.framework). SessionCreate() creates a security session, wherein
a new bootstrap subset port[39] is created for the calling process.
[39] We will look at bootstrap ports in Chapter 9.
 The StandardErrorPath key causes launchd to open the specified path and duplicate the resultant descriptor to the standard error
descriptor.
Consider another examplethat of the cron daemon. Its launchd configuration file (com.vix.cron.plist) specifies that /usr/sbin/cron is to
be run whenever either the /etc/crontab file or the /var/cron/tabs/ directory is modified. For example, creating a crontab file
in /var/cron/tabs/ will cause launchd to run cron.
$ cat /System/Library/LaunchDaemons/com.vix.cron.plist
...
Label
com.vix.cron
ProgramArguments
/usr/sbin/cron
RunAtLoad
WatchPaths
/etc/crontab
QueueDirectories
/var/cron/tabs
...
5.10.1.2. Daemon Creation
Figure 524 shows an example of creating a trivial launchd job that runs every 10 seconds. The job uses the logger command-line program to
write a "hello" message to the system log.
Figure 524. Creating a periodic launchd job
[View full width]
$ whoami
amit
$ launchctl list
$ sudo launchctl list
com.apple.KernelEventAgent
...
com.apple.ftpd
com.openssh.sshd
$ cat com.osxbook.periodic.plist
Label
com.osxbook.periodic
ProgramArguments
/usr/bin/logger
-p
crit
hello
StartInterval
10
$ launchctl load com.osxbook.periodic.plist
$ launchctl list
com.osxbook.periodic
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 47 of 59
$ tail -f /var/log/system.log
Jul 4 13:43:15 g5x2 amit: hello
Jul 4 13:43:25 g5x2 amit: hello
Jul 4 13:43:35 g5x2 amit: hello
^c
$ launchctl unload com.osxbook.periodic.plist
Let us also look at how launchd simplifies the programmatic creation of a daemon. Since launchd handles several aspects of a daemon's
operation, certain guidelines must be followed while writing a launchd-compliant daemon. Figure 525 shows some examples of relevant
guidelines and caveats.
Figure 525. Guidelines and caveats for creating launchd-compliant daemons
[View full size image]
We will now create a trivial network daemon called dummyd, which echos back lines of text sent to it by a client. We can avoid writing any
network code by using launchd's inetd-compatibility mode. However, we will take a somewhat longer route in order to demonstrate how a
daemon participates in advanced communication with launchd: We will arrange for launchd to provide our daemon a socket file descriptor to
call accept() on when there is an incoming client connection.
In dummyd's launchd configuration file, we will also specify a variety of settings and then verify from within dummyd that they were set as
expected by launchd. Our implementation of dummyd will perform the following primary actions.
 Install a handler for SIGTERM.
 Display the settings that we requested launchd to set. We will print the settings on the standard error, which, as specified in dummyd's
configuration file, will be sent to a custom log file.
 Check in with launchd using the launch(3) interface.
 Use the kqueue(2) mechanism[40] to arrange to be notified about incoming connections.
[40] We will discuss the kqueue(2) mechanism in Chapter 9.
 Enter a loop that accepts an incoming connection and creates a thread to process the connection. The processing involves reading a
newline-terminated string from the client and writing it back to the client.
Figure 526 shows the code for dummyd.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 48 of 59
Figure 526. A trivial echo server called dummyd
// dummyd.c
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define MY_LAUNCH_JOBKEY_LISTENERS "Listeners"
// error-handling convenience
#define DO_RETURN(retval, fmt, ...) { \
fprintf(stderr, fmt, ## __VA_ARGS__); \
return retval; \
}
int
SIGTERM_handler(int s)
{
fprintf(stderr, "SIGTERM handled\n"); // primitive SIGTERM handler
exit(s);
}
ssize_t
readline(int fd, void *buffer, size_t maxlen)
{
ssize_t n, bytesread;
char c, *bp = buffer;
for (n = 1; n < maxlen; n++) {
bytesread = read(fd, &c, 1);
if (bytesread == 1) {
*bp++ = c;
if (c == '\n')
break;
} else if (bytesread == 0) {
if (n == 1)
return 0;
break;
} else {
if (errno == EINTR)
continue;
return -1;
}
}
*bp = 0;
return n;
}