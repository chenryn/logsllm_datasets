### Number of OKs 0.100 (for Ultra)

**Figure 7: Request Latency vs. Time for Two Scheduling Scenarios (Long Runs Simulated for 120 Hours Wall Time)**

As expected, the maximum latency for NL is reduced due to strict priority. In this scenario, there are more incoming NL requests (fNL = 0.99 * 4/5, fCK = 0.99 * 1/5, and fMD = 0.99 * 1/5).

---

### Figure 8: Validation Against Data from NV Hardware (Lab Scenario)

Fidelity (a) and the probability that an attempt succeeds (b) in terms of α (Section 4.4) show good agreement between hardware and simulation points (each at least 300 pairs averaged, 5s-117s simulated time, 500k-10,000k attempts, 122 hours wall time). The theoretical model [53] is provided as a visual guide (solid line).

---

### 6.3 Scheduling

We take the first step in studying the effects of scheduling strategies on performance when using mixed kinds of requests. While simulating the performance of scheduling strategies can be done without implementing all details of physical entanglement generation, we do simulate these details to confirm that different scheduling strategies do not affect the average fidelity in these scenarios.

We examine two simple scheduling strategies:
1. **First-Come-First-Serve (FCFS)**
2. **A strategy where NL (priority 1) has strict highest priority, and a weighted fair queue (WFQ) for CK (priority 2) and MD (priority 3), with CK having 10 times the weight of MD.**

With these scheduling strategies, we simulate two different request patterns:
- (i) Uniform
- (ii) No NL, more MD

Each pattern is simulated 102 times over 24 wall time hours, and we extract the performance metrics of throughput and scaled request latency, as shown in Table 1.

As expected, we observe a significant decrease in the average scaled latency for NL when it is given strict priority: 10.3 s with FCFS and 3.5 s with WFQ. For CK, there is also a decrease in average scaled latency, though smaller than for NL: 10.1 s and 6.5 s for FCFS and WFQ, respectively. For MD, the average scaled latency increases in both cases when using WFQ instead of FCFS, by factors of 2.49 (uniform) and 1.28 (no NL, more MD).

We find that throughput is less affected by the scheduling strategy than latency in these scenarios. The maximal difference in throughput between FCFS and WFQ is a factor of 1.16 (for MD in the no NL, more MD scenario).

**Table 1: Throughput (T) and Scaled Latency (SL) Using Scheduling Strategies FCFS and WFQ for Two Request Patterns:**
- (i) With fNL = fCK = fMD = 0.99 * 1/3, i.e., a uniform load of the different priorities.
- (ii) With fNL = 0, fCK = 0.99 * 1/5, and fMD = 0.99 * 4/5, i.e., no NL and more MD.

Physical setup: QL2020, number of pairs per request: 2 (NL), 2 (CK), and 10 (MD). Each value is averaged over 102 short runs, each 24 hours, with standard error in parentheses.

| Priority | Metric | (i) FCFS | (i) WFQ | (ii) FCFS | (ii) WFQ |
|----------|--------|----------|---------|-----------|----------|
| NL       | T (1/s) | 0.146 (0.003) | 0.154 (0.003) | - | - |
|          | SL (s)  | 10.272 (0.654) | 3.520 (0.085) | - | - |
| CK       | T (1/s) | 0.144 (0.003) | 0.156 (0.003) | 0.086 (0.003) | 0.096 (0.003) |
|          | SL (s)  | 10.063 (0.631) | 6.548 (0.361) | 5.659 (0.313) | 2.503 (0.100) |
| MD       | T (1/s) | 2.464 (0.056) | 2.130 (0.063) | 5.912 (0.033) | 5.829 (0.049) |
|          | SL (s)  | 1.740 (0.120) | 4.331 (0.336) | 0.935 (0.062) | 1.194 (0.093) |

Furthermore, the total throughput for all requests decreases from 2.75 (5.99) 1/s for FCFS to 2.44 (5.92) 1/s for WFQ in the case of uniform (no NL, more MD).

---

### 7. Conclusion

Our top-down inventory of design requirements, combined with a bottom-up approach based on actual quantum hardware, has allowed us to advance quantum networks towards their large-scale realization. This work prepares QL2020 and paves the way for a robust network layer control protocol. The link layer can now be used as a robust service without detailed knowledge of the physics of the devices. We anticipate that at the network layer, and with larger quantum memories, smart scheduling strategies will be crucial not only to combat memory lifetimes but also to coordinate actions of different nodes in time, requiring significant effort in computer science and engineering.

---

### Acknowledgements

We thank Kenneth Goodenough for comments on earlier drafts. This work was supported by ERC Starting Grant (Stephanie Wehner), ERC Consolidator Grant (Ronald Hanson), EU Flagship on Quantum Technologies, Quantum Internet Alliance, NWO VIDI (Stephanie Wehner), Marie Skłodowska-Curie actions — Nanoscale solid-state spin systems and emerging quantum technologies — Spin-NANO, grant agreement number 676108.

---

### References

[References listed as provided, with proper formatting and citations]

---

This optimized version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.