title:EverParse: Verified Secure Zero-Copy Parsers for Authenticated Message
Formats
author:Tahina Ramananandro and
Antoine Delignat-Lavaud and
C&apos;edric Fournet and
Nikhil Swamy and
Tej Chajed and
Nadim Kobeissi and
Jonathan Protzenko
EverParse: Verified Secure Zero-Copy Parsers for 
Authenticated Message Formats
Tahina Ramananandro, Antoine Delignat-Lavaud, Cédric Fournet, and Nikhil Swamy, 
Microsoft Research; Tej Chajed, MIT; Nadim Kobeissi, Inria Paris; Jonathan Protzenko, 
Microsoft Research
https://www.usenix.org/conference/usenixsecurity19/presentation/delignat-lavaud
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.EverParse: Veriﬁed Secure Zero-Copy Parsers
for Authenticated Message Formats
Tahina Ramananandro∗
Antoine Delignat-Lavaud∗
Tej Chajed†
∗Microsoft Research
Abstract
Nadim Kobeissi‡
Cédric Fournet∗
Jonathan Protzenko∗
Nikhil Swamy∗
†Massachusetts Institute of Technology
‡Inria Paris
We present EverParse, a framework for generating parsers
and serializers from tag-length-value binary message format
descriptions. The resulting code is veriﬁed to be safe (no
overﬂow, no use after free), correct (parsing is the inverse of
serialization) and non-malleable (each message has a unique
binary representation). These guarantees underpin the security
of cryptographic message authentication, and they enable
testing to focus on interoperability and performance issues.
EverParse consists of two parts: LowParse, a library of
parser combinators and their formal properties written in F(cid:63);
and QuackyDucky, a compiler from a domain-speciﬁc lan-
guage of RFC message formats down to low-level F(cid:63) code
that calls LowParse. While LowParse is fully veriﬁed, we do
not formalize the semantics of the input language and keep
QuackyDucky outside our trusted computing base. Instead, it
also outputs a formal message speciﬁcation, and F(cid:63) automati-
cally veriﬁes our implementation against this speciﬁcation.
EverParse yields efﬁcient zero-copy implementations, us-
able both in F(cid:63) and in C. We evaluate it in practice by fully im-
plementing the message formats of the Transport Layer Secu-
rity standard and its extensions (TLS 1.0–1.3, 293 datatypes)
and by integrating them into MITLS, an F(cid:63) implementation of
TLS. We illustrate its generality by implementing the Bitcoin
block and transaction formats, and the ASN.1 DER payload
of PKCS #1 RSA signatures. We integrate them into C ap-
plications and measure their runtime performance, showing
signiﬁcant improvements over prior handwritten libraries.
1 Introduction
Because they are directly exposed to adversarial inputs,
parsers are often among the most vulnerable components
of security applications, and techniques to simplify their con-
struction while ensuring their safety and correctness are valu-
able. Hence, developers prefer self-describing formats like
JSON or XML (with universal implementations) or use auto-
mated tools and libraries to generate parsers from structured
Figure 1: EverParse architecture
format speciﬁcations, or even from type declarations in Java
or C++. However, when parsing is on the critical path of
an application’s performance, or because of requirements of
the message format (such as compliance with a standard),
developers may be forced to write and maintain their own
parsers and serializers in low-level unsafe languages like C,
increasing the risk of attacks triggered by malicious inputs.
More speciﬁcally, when the application authenticates mes-
sages in some way—using for instance cryptographic hashes,
MACs, encryptions, or signatures—it is critical for security to
ensure that the messages are veriﬁed, parsed, and interpreted
by the receiver exactly as intended by the sender before serial-
ization. This is often at odds with general-purpose formats and
tools that may not provide such non-malleability guarantees.
This paper presents EverParse, a new framework to auto-
matically generate efﬁcient, low-level parsers and serializers
in C from declarative descriptions of tag-length-value (TLV)
binary message formats. The generated parsers and serial-
izers are formally veriﬁed to be safe (no use-after-free, no
buffer overruns, no integer overﬂows, ...), functionally correct
(parsers and serializers are inverse of one another), and non-
malleable (valid messages have unique representations). With
EverParse, developers of low-level protocols can enjoy the
ease of programming and maintenance expected from parser
generators, and stop worrying about details of the message
format and trade-offs between security and performance.
USENIX Association
28th USENIX Security Symposium    1465
DSL Spec(TLS,ASN.1)QuackyDuckyF* SpecLow* ImplMemory-safe, zero-copy C codeF* ImplLowParseF* AppC AppArchitecture Overview. Figure 1 depicts the overall archi-
tecture of EverParse and its two main components: a simple,
untrusted frontend (named QuackyDucky) for compiling mes-
sage format descriptions; and a library of veriﬁed parsers and
serializers (named LowParse).
Veriﬁcation is based on F(cid:63) [48], a programming language
and proof assistant. Whereas F(cid:63) is a high-level functional lan-
guage, whose code extracts by default to OCaml or F#, it also
embeds a language named Low(cid:63) for writing veriﬁed low-level
code that extracts to C using a tool named KReMLin [38].
EverParse uses Low(cid:63) to program efﬁcient, low-level parsers
and serializers, proving them safe, correct and non-malleable
in F(cid:63), and then extracting them to C. The resulting C code can
be compiled using several off-the-shelf C compilers, includ-
ing CompCert [28] for highest assurance, or more mainstream
compilers like Clang or GCC.
The input of EverParse is a message format description for
a collection of types, in the C-like language commonly used
in RFCs and similar speciﬁcations. QuackyDucky translates
this description into a collection of F(cid:63) modules, one for each
input type, and F(cid:63) typechecks each of these modules to verify
their safety and security. The modules produced by Quacky-
Ducky include a formal parser speciﬁcation (using high-level
F(cid:63) datatypes) and two correct implementations of this spec-
iﬁcation: one high-level and the other in Low(cid:63), suitable for
extraction to safe C code. This lower-level implementation en-
ables efﬁcient message processing; it automatically performs
the same input validation as the high-level parser, but it oper-
ates in-place using interior pointers to binary representations
within messages. Its performance is similar to handwritten C
code—but its safety, correctness, and security are automati-
cally veriﬁed. Hence, rather than verifying existing, ad hoc C
code by hand, which would require much effort and expertise
even for small protocols, our toolchain automatically yields
C code veriﬁed by construction.
The code generated by QuackyDucky consists of applica-
tions of combinators in LowParse, which are higher-order
functions on parsers. For instance, given a integer parser, one
can build a parser for pairs of integers by applying the con-
catenation combinator to two copies of the integer parser.
While parser combinators are widely used in functional lan-
guages [22, 27], they are usually more difﬁcult to apply in
languages that do not easily support higher-order program-
ming with closures, like C. However, by employing partial
evaluation within F(cid:63), we specialize higher-order code to efﬁ-
cient, ad hoc, ﬁrst-order C code.
We carry out all proofs on combinators once and for all
within LowParse. Only the conditions for composing them
must be checked (by typing) in the code produced by Quacky-
Ducky. LowParse is split into three layers: one for speciﬁ-
cations, where we prove non-malleability, one for high-level
functional implementations, which are proved functionally
correct with respect to speciﬁcations, and one for low-level
implementations, which operate on positions within buffers
and are proved functionally correct and memory safe.
EverParse code can be used in two ways. A veriﬁed F(cid:63)
application can use the formal speciﬁcation for its security
proof, and either the high-level or low-level implementation—
this is the approach adopted for verifying protocols as part of
the Everest project [6], and notably the MITLS [7] implemen-
tation of the TLS secure channel protocol. Alternatively, a
native C/C++ application can use the interface extracted from
the Low(cid:63) implementation by the KReMLin compiler—this is
the approach taken in this paper for performance evaluation.
Our contributions We present the following contributions:
• A deﬁnition of message-format security, motivated by a
discussion of several vulnerabilities whose root cause is
malleability (§2).
• QuackyDucky, a compiler from tag-length-value mes-
sage format descriptions to their high-level datatype spec-
iﬁcations and low-level implementations. It provides the
ﬁrst implemented zero-copy and secure message format
language that captures several existing protocols and
standards, including TLS, PKCS #1 signature payloads,
and Bitcoin (§4).
• LowParse, a library of veriﬁed parser and formatter com-
binators, with support for non-malleability proofs (§5).
• A qualitative evaluation of EverParse: we present a com-
plete case study of applying EverParse to the message
formats of all TLS versions, featuring many improve-
ments and corrections over the standard’s descriptions.
We integrate the generated high-level implementation
into MITLS, an implementation of the TLS protocol in
F(cid:63). For a few select types, we also replace the high-level
implementation with the Low(cid:63) one (§3).
• A quantitative evaluation of EverParse: we compare
the performance of our extracted low-level parsers for
Bitcoin blocks and the ASN.1 payload of PKCS #1
signatures with their counterparts in Bitcoin Core and
mbedTLS. We ﬁnd that our automatically generated code
meets, and in some cases signiﬁcantly exceeds, the per-
formance of hand-written C/C++ reference code (§6).
All the components of EverParse and its dependencies
are open-source and publicly available at https://github.
com/project-everest/everparse
2 Parsing Security: Deﬁnitions & Attacks
In this paper, we focus on applications that authenticate the
contents of serialized messages in some way. Cryptographic
mechanisms provide (serialized) bytestring authentication,
whereas applications rely on (parsed) message authentication.
Hence, correctness and runtime safety are not sufﬁcient to
preserve authentication: a correct parser may accept inputs
outside the range of the serializer, or multiple serializations of
the same message, which may lead to subtle, and sometimes
1466    28th USENIX Security Symposium
USENIX Association
struct {
HeartbeatMessageType type;
uint16 payload_length;
opaque payload[payload_length];
opaque padding[padding_length];
} HeartbeatMessage;
The total length of a HeartbeatMessage MUST NOT exceed
2^14 or max_fragment_length when negotiated [RFC6066].
The padding is random content that MUST be ignored by
the receiver. The padding_length MUST be at least 16,
and equal to TLSPlaintext.length-payload_length-3 for
TLS and DTLSPlaintext.length-payload_length-3 for DTLS
The sender of a HeartbeatMessage MUST use a random
padding of at least 16 bytes. The padding of a
received HeartbeatMessage message MUST be ignored.
Figure 3: Speciﬁcation of the Heartbeat message (fragment)
iﬁcation of HeartbeatMessage is very unusual among TLS
types (explained in detail in §3), because it contains a variable
length ﬁeld (padding) that is not preﬁxed by an explicit length
(padding_length is not deﬁned in the struct, but its value is
deﬁned semantically). Indeed, as speciﬁed, this type is not
expressible in QuackyDucky because the padding length de-
pends on a ﬁeld of the parent TLSPlaintext type, and we only
capture dependencies between ﬁelds that are concatenated.
This forces applications to verify the padding_length seman-
tically, increasing the risk of error. The Heartbleed disaster
would likely have been averted if the format was speciﬁed
using standard TLS constructors for variable length ﬁelds:
struct {
HeartbeatMessageType type;
opaque payload;
opaque padding;
} HeartbeatMessage;
This example illustrates the beneﬁts of writing message for-
mat descriptions in a constrained language: it encourages
uniform patterns and enables automated analysis.
PKCS #1 signature forgery The PKCS #1 v1.5 signature
format illustrates the risks of applying message parsing after
a cryptographic operation (in this case, modular exponenti-
ation). Given a public key (N = pq,e) where p and q are
large secret primes, the raw RSA signature σ over a mes-
sage m is computed as σ = md modN where the secret expo-
nent d = e−1 mod (p− 1)(q− 1) is hard to compute without
knowing p and q. As written, this scheme is not usable be-
cause m must be smaller than N, and it has the undesirable
homomorphic property that the signature of the product of
2 messages is equal (modulo N) to the product of the sig-
nature of each message (thus, it is easy to forge new valid
signatures from existing ones). To ﬁx these shortcomings,
PKCS #1 v1.5 deﬁnes a standard for hashing and padding
the message to sign: given an arbitrary message m, it is ﬁrst
Figure 2: Parsing and serialization functions
devastating, vulnerabilities. We propose a security deﬁnition
for authenticated message formats to prevent such vulnerabil-
ities, and illustrate it using known high-impact attacks against
popular applications.
either a message m ∈ V or a parsing error ⊥;
2.1 What is a Secure Message Format?
We ﬁrst set up notations for parsers and serializers, illustrated
in Figure 2, and deﬁne their properties of interest. Given a set
V of valid messages,
• a parser is a function p : {0,1}∗ → V (cid:93){⊥} that returns
• a serializer, or formatter, is a function s : V → {0,1}∗.
Informally, parsers and formatters are inverse of one another.
A parser is correct with respect to a serializer when it yields
back any formatted message: ∀m∈ V , p(s(m)) = m, and exact
when it accepts only serialized messages: p−1(V ) = s(V ).
Parsers may also be considered on their own. A parser
is non-malleable (or injective) when it accepts at most one
binary representation of each message: ∀x,y ∈ {0,1}∗, p(x) =
p(y) ⇒ (x = y∨ p(x) = ⊥), and complete (or surjective) when
it accepts at least one binary representation of each message:
p({0,1}∗)\{⊥} = V . If p is a non-malleable parser for V ,
then p−1 is a serializer over p({0,1}∗)\{⊥}.
We say that p is a secure parser for V if p is non-malleable
and complete. If p is secure, then it is also correct and exact
with respect to the (unique) serializer p−1. We say a serializer
s is secure if there exists a secure parser p such that s = p−1.
(§5 provides more general deﬁnitions that account for parsers