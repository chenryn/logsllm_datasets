when a lower security window sits on top of a higher
one. First, a transparent window on top can get the pixel
values of the window behind it, hence accessing the sensitive
data. Second, there can be access control mechanisms in
place which limit the visual access of the user to different
windows. For instance, a face detection camera can identify
the user in front of the monitor and allow or deny his access
to different windows. In such a system, a low clearance
user gets access to the top window with the unclassiﬁed
information, while in fact he can see the content of a higher
security window behind it using transparency.
Finally, the large code size and complexity makes the
graphics systems such as X inherently a bad choice for
trusted graphics. X was developed back at the time when
computer graphics had low color depth and there was no
hardware acceleration [26]. Years of enlarging the code base
and adding new features to X have resulted in a large and
inefﬁcient graphics system. In fact, the code size of X is
comparable to that of the kernel itself. The obsolete features
and components of X exacerbate the situation. Many of such
resources can be used as the communication channels not
regulated by the security policy. In short, X is too large and
complex for secure graphics.
IV. DESIGN
A. Principles
TrustGraph is built upon a number of security design prin-
ciples. We ﬁrst explain these principles and then describe the
design of TrustGraph. We explain how the design decisions
comply with the security principles.
The following security design principles are used when
building TrustGraph:
I. Simplicity: It is important for secure systems to be as
simple as possible. Complex design, large code base,
and/or unknown or unused features are the sources of
vulnerabilities. Simple and small systems are easier to
design, understand, and verify.
II. Complete Mediation: Access mediation must be ap-
plied to any access or communication attempt
in
the system in order for the security policy to be
satisﬁed. In fact, the graphics subsystem is one of the
components in which either mediation is not done or
is not complete.
III. Principle of Least Privileges: Each entity in the system
must have the smallest set of privileges that allows it
to do its tasks unimpeded. Hence, TrustGraph must
allow the applications to lower the privileges of their
GUIs.
IV. Least Common Mechanism: Shared resources in the
system must be as minimal as possible to avoid overt
or covert communications between the subjects using
those resources. As discussed earlier, it is impractical
to have a different video output for each security
compartment. However, TrustGraph limits the sharing
of the resources to prevent such vulnerabilities.
V. Open Design: Finally, secure systems must have an
open design for them to be veriﬁable. The design of
TrustGraph is described in details to adhere to this
principle.
B. Labeled Resources
For the graphics methods and operations to comply with
the security policy, all of the resources in the graphics
subsystem have to be labeled with a security tag. The main
interfaces, data buffers, windows, event buffers, and surfaces
must all be labeled with security tags. As a proof of concept,
TrustGraph implements MLS levels and categories as the
security tags and uses the Bell-LaPadula model augmented
with declassiﬁcation as the security policy. The design,
however, is not limited to MLS or the BLP policy. More
general security policies such as type-enforcement, role-
based access control, or attribute-based access control can
be used in TrustGraph.
C. Secure Methods
The next step is to secure the methods in the graphics sub-
system. Two types of secure methods exist in TrustGraph:
the methods used to create or acquire resources (the label-
propagating methods) and the methods used to grab inputs
(the input grabbing methods).
1) Label-Propagating Methods: Any method that is used
to securely create a new graphics resource or to securely
obtain an existing one is called a label-propagating method.
These methods must check and propagate the security tags
appropriately. The label-propagating methods are as follow:
(cid:129) Create Main Interface: The method is used to create
the main interface to the graphics subsystem. It must
propagate the security tag of the application to the main
257
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
interface. It receives the security tag from the operating
system or the VMM.
(cid:129) Create Window/Surface/Data Buffer/Event Buffer:
These methods are called from the main interface. They
create a window, a surface, a data buffer, or an event
buffer respectively and propagate the main interface
security tag to them.
(cid:129) Get Window: This method is called from the speciﬁc
layer interface of the main interface to acquire an
already existing window. If the main interface security
label does not dominate that of the window, it can result
in information leakage from a higher security level into
a lower one. Thus, in such a situation, the access is
denied. A main interface can only read from a window
if the security label of the former dominates that of the
latter. If so, the window acquisition is granted to the
main interface and its security label is propagated to
the window. This is done because an application writes
its graphical data which has the same security label
as the application to its window. Before assigning the
window to a new main interface, it is released from any
other interface so that only one interface has access to
the window at a time.
(cid:129) Get Surface/Event Buffer: These methods are called
from a window interface to acquire an already existing
surface or event buffer. If the window has a dominating
security label, the access is granted and its security label
is propagated to the surface or event buffer.
A security label in TrustGraph is an MLS label which
contains a level followed by a set of categories. As deﬁned
in the BLP model [8], a label dominates another one if
it has a higher level and its set of categories is a super-
set of that of the other label. For example,
the label
(cid:3)T opSecret,{P rojectA, P rojectB}(cid:4) dominates the label
(cid:3)Secret,{P rojectB}(cid:4). The label ﬂow is shown in ﬁgure
2. Each arrow is marked with the method used to create or
acquire the corresponding resource. The label ﬂow is shown
in the context of a virtualized system with the graphics
subsystem running in the privileged partition.
All label ﬂows are internal to the TrustGraph code except
one: creating the main interface. This method must receive
the application security label from the VMM (or the operat-
ing system in a non-virtualized model). This is done through
a small piece of code called the “membrane.” The membrane
is responsible for receiving the application security label
from the VMM and delivering it to TrustGraph when the
main interface is being created.
2) Declassiﬁcation: To implement the principle of least
privileges, it must be possible for the main interfaces to
create windows with dominated security labels. This ensures
that if the application wants to perform a low security task,
it can open a low security window. However, the problem
with declassiﬁcation of window is that the application can
maliciously or unintentionally declassify its sensitive data.
258
This allows other applications which did not have access
to the data before, to gain such an access. Consequently,
declassiﬁcation must restrict the access of window to higher
security resources (such as a higher level surface), yet it
must not allow other applications that did not have access
to the window to gain such an access. The same argument
applies to a window acquiring a surface or an event buffer.
As a result, each resource is labeled with two labels:
a permanent label (PL) and a declassiﬁcation label (DL).
When a resource acquires another resource, it is only granted
access if its DL dominates the other resource’s PL. Hence,
no entity gains new accesses when a resource is declassiﬁed.
For the main interface, DL is always equal to PL.
Therefore, the label ﬂow is as follow. “DOM” denotes the
domination as deﬁned before.
Create Resource:
{Resource PL = Creator PL;
Resource DL = Creator DL;}
Acquire Resource:
If (Acquirer DL DOM Resource PL)
{Resource PL = Acquirer PL;
Resource DL = Acquirer DL;
Grant;}
else
{ Deny; }
Declassify:
Window DL = L (only if Main interface PL DOM L)
Note that if declassiﬁcation is not used, the system works
as a simple multilevel security system (PL=DL for all
resources). The PL can be viewed as the highest possible
security level that the resource may contain. Since a window
may still contain data with the security level as high as
the application when declassiﬁed,
the PL can never be
lowered by the application. The DL, on the other hand,
can be interpreted as the highest label which the application
believes the window should have access to.
If a more general security tag is used (e.g. types or at-
tributes), declassiﬁcation should reduce the privileges of the
resource being declassiﬁed, but it must not grant new access
rights to other resources. For instance, if type-enforcement
is used as the policy, the main interface can declassify a
window to a type which has strictly smaller set of accessible
types than the original type. On the other hand, the set of
types which have access to the new type must remain the
same or become smaller after the declassiﬁcation. Similar
arguments apply for attribute-based and role-based systems.
3) Input Grabbing Methods: Whenever an input grab-
bing method is called, all
the subsequent events of the
corresponding input device are delivered to the window,
ignoring the focus. These methods can result in input snifﬁng
where a window sniffs all the input events of the window
under focus. The sniffer can optionally redirect the event
to its proper destination after snifﬁng it to avert suspicion.
There are typically ﬁve types of input events: key press, key
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
release, mouse/joystick button press, mouse/joystick button
release, and mouse/joystick movement.
For TrustGraph to secure the input grabbing methods, it
must redirect input events to the requesting window only
if it has the focus. There are four types of input grabbing
methods: Grab Keyboard, Grab Key, Grab Pointer, and Grab
Unselected Keys which redirect all keyboard events, speciﬁc
key events, mouse/joystick events, and unselected key events
to the application respectively.
The window manager always keeps track of the window
under focus, so whenever an input grabbing method is called,
TrustGraph checks with the window manager to make sure
that the requester is under focus. If the condition is true,
the input is granted to the window (move-to-focus model).
Otherwise, the current status of the inputs is kept intact; i.e.,
input events are sent to the window which currently receives
them. Another model for changing the focus is called click-
to-focus in which an unfocused window may receive mouse
left or right click events. In this case, upon receiving those
events, the unfocused window requests the focus in order to
receive key stroke events.
One attack that
is not addressed by this mechanism
is click-jacking where a lower security window suddenly
requests focus and the user mistakenly types a few characters
or clicks on the wrong window. To mitigate this attack,
TrustGraph has a click-jacking prevention (CJP) feature
which issues a warning before granting the focus to a
window with a different security label
than the current
window . If the security labels are the same, however, the
focus transition is done transparently. For convenience, CJP
can be turned on or off at the compile time of TrustGraph.
D. Secure Operations
The global operations are implemented in a graphics
subsystem to facilitate the usage and augment the system
with additional functionalities. They, however, can cause
information leakage in the system. The operations differ
from the methods in that they have a more global scope.
Two such operations exist in TrustGraph: copy-pasting and
taking screenshots.
(cid:129) Copy-pasting: Copying is done by setting a global
container called the Clipboard Data through the main
interface. The clipboard data includes the MIME type
of the data as well as the data itself. To prevent leak-
ages, the clipboard in TrustGraph is labeled with the
same security label as the main interface. Consequently,
if the interface that gets the clipboard data (i.e. pasting
the data) has a dominating security label, the data will
be returned. Otherwise, NULL is returned.
(cid:129) Screenshots: Screenshots can be taken from the screen
by pressing the PrintScreen key of the keyboard. Re-
gardless of the focus, the entire display is dumped
whenever a screenshot is taken. To prevent leakage of
information, an application can only dump the pixel
values of the dominated windows. Hence, whenever
PrintScreen is pressed, TrustGraph gets the security
label of the window which currently has the focus. It
then zeroizes the pixel values of any surface that does
not have a dominated label in a copy of their surfaces
and constructs the screenshot using the copy surfaces.
This ensures that no application can get the pixel values
of a higher application by taking a screenshot from the
entire display.
By controlling all the methods and operations and vali-
dating their compliance with the security policy, TrustGraph
follows the principle of complete mediation.
E. Window Manager
The window manager controls a set of windows called the
window stack. If a window is resized, moved, reordered, or
closed, the appropriate method of the window manager is
called to rearrange the window stack.
In section III, we explained how overlapping windows
pose a threat to trusted graphics. Lacking security controls,
a lower security level window could in principle read the
pixel values from a higher security one behind it. It might
also evade visual access control mechanisms. As a result, the
security label dominance imposes the same strict ordering
on the windows on the screen. The window manager of
TrustGraph imposes this ordering on all windows. The
methods used for inserting and reordering windows are
modiﬁed to always preserve the window ordering.
The ordering is done based on PL, not DL. If the ordering
had been based on DL, another window with higher DL than
the current window could have been positioned on top of it.
Nevertheless, if the window on top had a lower PL, it could
snoop higher security level data, resulting in information
leakage. Note that when the ordering is done based on PL,
a window can snoop data with higher security level than
its DL. However, since all the resource acquisition methods
check the PL before granting access, this data cannot be
leaked to any other application and the system is secure.
If the windows have incompatible security labels (i.e.
neither label1 DOM label2, nor label2 DOM label1), they
cannot overlap at all. They can only ﬂoat on the display
as separate rectangles without one sitting on top of another
one. If the user tries to overlap the windows, the moving
window will not move any further than the edge of the other
window. Although these measures impose restrictions on the
user interactions, they do not make the system unusable.
For instance, if a user requires a large window for one
application, he can minimize incompatible windows or drag
them to the corner of the display. We were able to work
with the system despite these restrictions without much
inconvenience. The location restrictions can be exploited to
form a covert channel between the windows. We discuss
the techniques to mitigate graphical methods covert channel
attacks in section VI-D.
259