title:FSAFlow: Lightweight and Fast Dynamic Path Tracking and Control for
Privacy Protection on Android Using Hybrid Analysis with State-Reduction
Strategy
author:Zhi Yang and
Zhanhui Yuan and
Shuyuan Jin and
Xingyuan Chen and
Lei Sun and
Xuehui Du and
Wenfa Li and
Hongqi Zhang
4
6
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
FSAFlow: Lightweight and Fast Dynamic Path Tracking 
and Control for Privacy Protection on Android Using 
Hybrid Analysis with State-Reduction Strategy  
Zhi Yang1(PI:EMAIL), Zhanhui Yuan1§(PI:EMAIL), Shuyuan Jin2(PI:EMAIL),  
Xingyuan Chen1§(PI:EMAIL), Lei Sun1§(PI:EMAIL), Xuehui Du1, Wenfa Li3, Hongqi Zhang1 
1PLA Information Engineering University, Zhengzhou, China, 2Sun Yat-sen University, Guangzhou, China,  
3University of Science and Technology Beijing, Beijing, China 
Abstract—Despite the demonstrated effectiveness of dynamic 
taint analysis (DTA) in a variety of security applications, the poor 
performance achieved by available DTA prototypes prevents their 
widespread  adoption  in  production  systems,  especially  the 
Android system with limited computation and storage resources.  
To  overcome  DTA’s  overhead  bottlenecks,  recent  research 
efforts  aim  to  decouple  taint  tracking  logic  from  program 
execution.  Continuing  this  line  of  research,  this  work  proposes 
FSAFlow,  a  novel  hybrid  taint  tracking  and  control  system,  to 
reduce DTA overhead significantly while ensuring sound Android 
privacy protection. FSAFlow further separates the path tracking 
logic from the corresponding taint tracking logic and the control 
of the information flow path is optimized. Specifically, a classic 
static analysis algorithm is first modified to search target paths 
and their key branch information. Then, the potential paths that 
violate the user's predefined privacy protection policy are chosen 
and encoded with a Finite State Automaton (FSA). A small amount 
of  FSA-based  state  management  code  is  inserted  into  the 
corresponding  position  in  the  program.  Finally,  it  monitors  the 
program’s  state  of  path  execution  and  prevents  information 
leakage during runtime. 
lower  overhead 
The  efficiency  and  correctness  of  FSAFlow  are  proved  by 
theoretical analysis. The experimental results show that FSAFlow 
incurs 
than  several  representative  DTA 
optimization  approaches,  2.06%  for  popular  applications,  and 
5.41% on CaffeineMark 3.0. FSAFlow has fewer false negatives in 
implicit flow tracking than the Android DTA platform, TaintDroid, 
and  achieves  higher  precision  than  the  static  analysis  tool, 
FlowDroid, by verifying the paths that never occur and tracking in 
the complete execution stage of the loop body at runtime. 
I. 
INTRODUCTION  
Android  systems  increasingly  contain  private  user  infor-
mation. Because of their openness, they often run a large number 
of untrusted programs, which results in frequent privacy leakage 
[1], [2]. The propagation and flow of sensitive information must 
be controlled [3]. Fine-grained information flow control is in-
separable from information flow tracking, also known as taint 
tracking. Specifically, it first tags source data (e.g., GPS location 
data returned by API call) as tainted. Then, these taints are prop-
agated through data flow or control flow. Finally, whether the 
tainted data reach sinks (e.g., the network output) is checked. 
Solutions  that  rely  on  static  taint  analysis  (STA)  can 
comprehensively search for potential information leakage paths 
but may cause over-approximations by generalizing all possible 
behaviors of a program and produce false positives [1], [4]-[7].  
§ Corresponding Authors 
Furthermore, if a discovered leakage path and a legitimate path 
share a sink, it is challenging for STA to apply correct judgments 
and control due to the lack of runtime path information (Refer 
to the example in Section II for this problem). 
In  contrast,  solutions  that  rely  on  dynamic  taint  analysis 
(DTA) search for security issues at program runtime. The char-
acteristics of DTA enable it to provide sufficient context, which 
helps DTA to avoid false positives. DTA has been used in vari-
ous application domains, including information flow control [5], 
[8]-[13], vulnerability discovery [14]-[20], security attacks [19], 
[21]-[27], malware detection [27], [29], privacy leakage analysis 
[30]-[32],  etc.  Despite  its  advantages,  DTA  is  rarely  used  in 
practice today [9]. The most serious problem is its performance 
overhead since, in a pure DTA situation, every instruction of the 
original program usually takes 6 to 8 extra taint tracking instruc-
tions to propagate a taint tag [35]-[37]. Several efforts have been 
made  to  reduce  the  overhead  of  DTA  through  hardware 
acceleration [5], [39]-[42], parallelization [36]-[37], [42]-[46], 
code optimization [14], [31], [52], etc. For example, TaintPipe 
[37] can reduce the slowdown of dynamic taint analysis to 1x in 
some test cases. However, other problems then arise. Hardware-
accelerated  DTA 
requires  additional  hardware  support. 
Parallelized DTA sacrifices the spare cores and wastes energy to 
accelerate  DTA.  Code  optimization  can  only  be  realized  for 
specific  code  features.  Moreover,  few  pure  DTA  tools  track 
implicit flows, which incur a significant performance overhead 
due to the lack of comprehensive branch structure information 
at runtime [30]. 
Hybrid analysis (HA) has been explored to accelerate DTA 
by static pre-optimized tracking logic [9]-[10], [52], [60], static 
pre-reduced tracking range [10], [61], static part sharing tracking 
tasks [62], etc. Although HA can use STA rapidly to calculate 
implicit taint propagation caused by the control dependencies, 
these traditional HA are still based on dynamic taint tracking 
supplemented  by  STA,  where  the  dynamic  instruction-by-
instruction tracking is still the main component. For example, 
Iodine [9] assumes that the fast path is often executed, while the 
slow path is less executed. Iodine only optimizes tracking for 
fast paths. If the fast and slow paths have equal probability of 
execution, or the profiler's prejudgment of whether a path is fast 
or slow is not accurate, the advantages of Iodine are nullified, 
but  the  path  switching  and  recovery  overhead  will  increase. 
Therefore, these methods only exhibit their advantages in certain 
cases  and  are  not  adequately  robust.  Moreover,  HA’s  static 
analysis usually lacks runtime profile information, which leads 
to  reduced  optimization  and  accuracy.  Additionally,  HA 
© 2022, Zhi Yang. Under license to IEEE.
DOI 10.1109/SP46214.2022.00042
2114
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
①
②
S0
S1
S2
S3
S4
S5
⑥
S6
taint(out)=taint(b);
td = source(); 
taint(td)=true;
in = td;
taint(in)=taint(td); 
for(int i=0;i<4;i++){ 
  out=b;
③
    …
  b=a;
④
    …
  a=in;
⑤
}   
    …
Assert(!taint(out));
printf(out);        
taint(a)=taint(in);
taint(b)=taint(a);
S0
S1
S2
S3
S4
S5
S6
①
④
td = source(); 
in = td;              
for(int i=0;i<4;i++){ 
②
  out=b;
    …
  b=a;
    …
  a=in;
}   
③
    …
printf(out);        
(a) Pure DTA
Fig. 1.  Comparison of tracking between pure DTA and FSAFlow 
(b) FSAFlow
introduces  several  STA’s  shortcomings.  For  example,  the 
classic  STA  algorithm  IFDS  (Interprocedure,  Finite,  Distri-
butive, Subset) [34] does not analyze the stable periods of loop 
structures to avoid path length explosions, which may produce 
false positives (Refer to Section III D for this problem).  
As for the above work, the tracking logic is not separated 
from the program execution, or the separation is not complete. 
Regarding  privacy  protection  and  performance  improvement, 
the  use  of  instruction-by-instruction  tracking  mechanisms  for 
running programs is undesirable. Instead of caring about how 
information  is  spread  between  variables,  research  should 
consider  whether  the  information  flow  path  has  occurred, 
whether it has reached the sink node, and whether the policy 
allows it. This requires a more effective regulatory mechanism. 
This paper proposes FSAFlow to address the above-mentioned 
challenges  in  HA.  Its  key  idea  is  to  separate  the  slow  taint 
tracking logic from the program execution and further separate 
the  path  control  logic  from  the  taint  tracking  logic.  Its  static 
analysis  does  not  require  dynamic  profile  information,  and  it 
only searches for potential paths. Its runtime control is based on 
changes in path state rather than taint state. Figure 1 compares 
pure  DTA  and  FSAFlow  using  an  example.  It  assumes  that 
variable  td  is  a  source,  and  printf(out)  is  a  sink.  The  taint  is 
propagated to variables in, a, b and out successively. Finally, it 
reaches the sink, causing an information leakage. Figure 1 (a) 
shows  the  tracking  of  pure  DTA.  It  adds  taint  tracking 
instructions for each data flow statement, as shown in  ①-⑥. 
Figure 1 (b) shows the tracking of FSAFlow. It only inserts path 
tracking instructions at the start, end, and branches of the path, 
as shown in ①-④. The detailed FSAFlow instrumenting logic 
is  shown  in  Section  III-D  and  Figure 5. FSAFlow  is  directly 
applicable to Android APK. The demo video can be downloaded 
from https://github.com/ FSAFlow/FSAFlow. 
The contributions of this paper are as follows:  
1) A novel information flow protection system, FSAFlow, is 
proposed that uses path tracking rather than taint tracking for 
privacy protection. The target program is only instrumented with 
lightweight supervision code related to the path, which does not 
involve cumbersome variable taint propagation. Based on this, 
fast information flow tracking can be achieved at runtime. 
2) FSAFlow uses a finite state machine to monitor the path 
state efficiently at runtime. It provides path-aware control which 
is difficult for STA and achieves higher precision than STA by 
verifying the paths that never occur and tracking throughout the 
execution  stage  of  the  loop  body.  It  makes  quick  tracking 
operations by updating the path state only at branch statements, 
and can find and track implicit flow paths more easily than DTA 
by using STA comprehensively to search potential paths. 
1
2
3
4
5
6
7
8
9
10