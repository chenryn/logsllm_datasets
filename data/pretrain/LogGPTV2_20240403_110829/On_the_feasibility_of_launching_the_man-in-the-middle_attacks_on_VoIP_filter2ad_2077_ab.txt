tect their signaling messages.
SIP authentication is similar to digest based HTTP au-
thentication. Figure 1 depicts the typical SIP authentication
of call registration, call setup and call termination. When a
SIP server (e.g., proxy, registrar) receives a SIP request (e.g.,
REGISTER, INVITE, BYE) from a SIP phone, the SIP server
challenges the SIP phone with either a 401 unauthorized
or a 407 proxy-authentication required message. Upon
receiving the 401 or 407 message, the SIP phone calculates
a hash value by applying a speciﬁc digest algorithm (e.g.,
MD5) to SIP message ﬁelds request-URI, username, shared
password between the phone and the SIP server, realm, and
nonce. Then the SIP phone sends the hash value along with
the original SIP request as the authentication credential.
However, existing SIP authentication only covers selected
ﬁelds of a few SIP messages from a SIP phone to a SIP server.
This leaves other SIP messages and ﬁelds unprotected. By
exploiting the vulnerabilities of SIP and RTP, a MITM who
is in the path of VoIP traﬃc can
• detour any chosen call via anywhere on the Internet
[24]. This would allow the attacker to wiretap selected
VoIP calls and collect sensitive information (e.g., ac-
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)(cid:8)(cid:9)(cid:1)(cid:10)(cid:11)(cid:3)(cid:4)(cid:12)(cid:11)(cid:11)(cid:4)(cid:13)(cid:14)(cid:1)(cid:10)(cid:10)(cid:3)(cid:4)(cid:12)(cid:11)(cid:11)(cid:4)(cid:13)(cid:14)(cid:1)(cid:10)(cid:12)(cid:3)(cid:4)(cid:15)(cid:16)(cid:14)(cid:17)(cid:5)(cid:18)(cid:4)(cid:19)(cid:20)(cid:21)(cid:22)(cid:23)(cid:4)(cid:10)(cid:4)(cid:18)(cid:24)(cid:21)(cid:25)(cid:26)(cid:4)(cid:17)(cid:23)(cid:24)(cid:27)(cid:23)(cid:24)(cid:17)(cid:5)(cid:18)(cid:4)(cid:19)(cid:20)(cid:21)(cid:22)(cid:23)(cid:4)(cid:12)(cid:28)(cid:8)(cid:18)(cid:4)(cid:29)(cid:23)(cid:30)(cid:31) (cid:4)(cid:17)(cid:23)!!(cid:31)(cid:21)(cid:22)(cid:17)(cid:5)(cid:18)(cid:17)(cid:5)(cid:18)(cid:1)"(cid:3)(cid:4)#(cid:11)$(cid:4)(cid:18)(cid:24)(cid:21)(cid:25)(cid:26)%(cid:15)&’(cid:20)(cid:23)(cid:22)’(cid:31)( ’(cid:23)(cid:4)(cid:28)(cid:23))&(cid:31)(cid:24)(cid:23)(cid:30)(cid:1)$(cid:3)(cid:4)(cid:15)(cid:16)(cid:14)(cid:1)*(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)(cid:8)(cid:9)(cid:4)(cid:1)(cid:16)(cid:24)(cid:23)(cid:30)(cid:23)(cid:22)’(cid:31) +!(cid:3)(cid:1),(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)(cid:8)(cid:9)(cid:1)(cid:10)-(cid:3)(cid:4)./(cid:9)(cid:1)(cid:10)#(cid:3)(cid:4)#(cid:11)$(cid:4)(cid:18)(cid:24)(cid:21)(cid:25)(cid:26)%(cid:15)&’(cid:20)(cid:23)(cid:22)’(cid:31)( ’(cid:23)(cid:4)(cid:28)(cid:23))&(cid:31)(cid:24)(cid:23)(cid:30)(cid:1)(cid:10)(cid:2)(cid:3)(cid:4)(cid:15)(cid:16)(cid:14)(cid:1)(cid:10)"(cid:3)(cid:4)./(cid:9)(cid:4)(cid:1)(cid:16)(cid:24)(cid:23)(cid:30)(cid:23)(cid:22)’(cid:31) +!(cid:3)(cid:1)(cid:10)$(cid:3)(cid:4)./(cid:9)(cid:1)(cid:10)*(cid:3)(cid:4)(cid:12)(cid:11)(cid:11)(cid:4)(cid:13)(cid:14)(cid:1)(cid:10),(cid:3)(cid:4)(cid:12)(cid:11)(cid:11)(cid:4)(cid:13)(cid:14)(cid:28)(cid:23)0(cid:31)!’(cid:24) (cid:24)(cid:4)(cid:17)(cid:23)(cid:24)(cid:27)(cid:23)(cid:24)(cid:1)(cid:10)(cid:3)(cid:4)(cid:28)(cid:9)1(cid:5)(cid:17)(cid:8)(cid:9)(cid:28)(cid:1)(cid:12)(cid:3)(cid:4)#(cid:11)(cid:10)(cid:4)2(cid:22) &’(cid:20)(cid:21)(cid:24)(cid:31)3(cid:23)(cid:30)(cid:1)-(cid:3)(cid:4)(cid:28)(cid:9)1(cid:5)(cid:17)(cid:8)(cid:9)(cid:28)(cid:4)(cid:1)(cid:16)(cid:24)(cid:23)(cid:30)(cid:23)(cid:22)’(cid:31) +!(cid:3)(cid:1)#(cid:3)(cid:4)(cid:12)(cid:11)(cid:11)(cid:4)(cid:13)(cid:14)(cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)(cid:8)(cid:4)(cid:1)(cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)(cid:8)(cid:4)(cid:2)(cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:9)(cid:6)(cid:10)(cid:11)(cid:4)(cid:1)(cid:8)(cid:9)(cid:12)(cid:8)(cid:9)(cid:13)(cid:14)(cid:3)(cid:4)(cid:3)(cid:9)(cid:6)(cid:10)(cid:11)(cid:4)(cid:1)(cid:8)(cid:9)(cid:12)(cid:8)(cid:9)(cid:15)(cid:2)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:4)(cid:2)(cid:19)(cid:20)(cid:2)(cid:14)(cid:21)(cid:16)(cid:22)(cid:18)(cid:4)(cid:2)(cid:19)(cid:20)(cid:2)(cid:14)(cid:21)(cid:23)(cid:16)(cid:24)(cid:18)(cid:4)(cid:16)(cid:25)(cid:18)(cid:4)(cid:16)(cid:26)(cid:18)(cid:4)(cid:27)(cid:28)(cid:29)(cid:16)(cid:30)(cid:18)(cid:4)(cid:27)(cid:28)(cid:29)(cid:23)(cid:31)(cid:16) (cid:18)(cid:4)(cid:13)(cid:14)(cid:3)(cid:4)(cid:1)!(cid:9)(cid:8)"#(cid:16)(cid:24)(cid:18)$(cid:17)%%(cid:4)(cid:14)(cid:13)&(cid:2)(cid:19)’(cid:4)(cid:4)(cid:4)(cid:4)(cid:16)(cid:25)(cid:18)$(cid:17)%%(cid:4)(cid:14)(cid:13)&(cid:2)(cid:19)’(cid:23)(cid:17)(%(cid:4)(cid:13)(cid:2)(cid:19)’(cid:2)(cid:19)’(cid:17)(%(cid:4)(cid:13)(cid:2)(cid:19)’(cid:2)(cid:19)’(cid:23)(cid:22)%%(cid:4))(cid:29)(cid:22)%%(cid:4))(cid:29)(cid:23)count number, PIN) from the victim.
• redirect any selected VoIP call to any third party and
manipulate and set the call forwarding setting of any
selected Gizmo VoIP subscriber without authorization
[24]. This would allow the attacker to hijack VoIP calls
to ﬁnancial institutions and pretend bank representa-
tive.
• launch billing attacks [26] on selected VoIP users such
that the victim VoIP users will either be overcharged
for their VoIP calls or charged for calls not made by
them.
• disrupt any chosen VoIP call by sending a BUSY or BYE
message.
Figure 2 illustrates the message ﬂow of the unauthorized
call redirection attack by the MITM. All existing MITM
attacks require the attacker initially in the VoIP signal-
ing and/or media path, this somewhat limiting requirement
makes many people believe that the MITM attack on VoIP
is not realistic. In the following sections, we investigate how
a remote attacker, who is not initially in the VoIP path, can
become the remote MITM and launch all kinds of MITM
attacks on targeted VoIP users.
3.
INVESTIGATION APPROACH
To investigate the feasibility for the remote attacker to
become the MITM of VoIP traﬃc, we assume the role of the
active adversary who seeks to trick the targeted VoIP phone
to pass all its VoIP traﬃc through him by exploiting the
vulnerabilities of the SIP phone and all protocols it uses.
We choose to experiment with Vonage VoIP, which is the
most popular residential VoIP service in the U.S. market.
Our investigation is divided into two steps. First, we pas-
sively observe the network traﬃc between our Vonage SIP
phone and its VoIP servers to spot potential weaknesses.
Second, we use fuzz testing to conﬁrm the weaknesses found
by passive observation or identify new possible ﬂaws. Note
that we treat the VoIP phone as a whole, and look for all
the vulnerabilities from the embedded operating system and
the upper-layer applications. When observing the network
traﬃc, we use Wireshark [11] to view the parsed protocols .
By observing the network traﬃc, we found a weakness of
the Vonage phone in handling DNS. A Vonage SIP phone
obtains SIP servers’ IP addresses via DNS query [18]. Given
that DNS runs over connectionless UDP, the remote attacker
can forge and inject DNS response packets to the SIP phone.
Whether the victim accepts the forged DNS response de-
pends on whether the following conditions are satisﬁed:
• The destination IP address and the destination port
number of the forged DNS response packet are the
source IP address and the source port number of the
DNS query packet.
• The source IP address and the source port number of
the forged DNS response packet are the destination IP
address and the destination port number of the DNS
query packet.
• The ID ﬁeld of the forged DNS response packet matches
that of the DNS query packet.
• The question section of the forged DNS response packet
matches the question section of one of the DNS query
packets sent.
Since both the ID and the port number are 16 bits, the
whole brute-force search space for a matching DNS response
should be 232 in theory. However in practice, if a DNS query
uses predictable IDs and/or a limited port range, the brute-
force search space could be greatly reduced. One key ﬁnding
of our research is that the Vonage SIP phone uses a static
ID and a small range of port number 45000-46100, which
reduces the brute-force search space to merely 1100.
In order to trick the targeted SIP phone to accept the
spoofed DNS response, the remote attacker needs to trig-
ger a DNS query from the targeted SIP phone. We have
observed that the SIP phone sends a DNS query each time
it restarts. Therefore, if the remote attacker can somehow
cause the target SIP phone to reboot, he can reach this goal.
After a lot of fuzz testing, we have identiﬁed a program ﬂaw
in handling a malformed INVITE message, which allows the
remote attacker to remotely crash and reboot the Vonage
SIP phone, thus triggering a DNS query.
Utilizing the above vulnerabilities and techniques, a re-
mote attacker is able to inject fake DNS responses to the
Vonage SIP phone and trick it into thinking that the re-
mote attacker is the Vonage SIP server. By replacing the the
source IP address of the REGISTER message from the Vonage
SIP phone with its own IP address, the remote attack can
make the Vonage server into thinking it is the Vonage SIP
phone. As a result, the remote attacker becomes a MITM
on the path between the SIP phone and its SIP servers.
Our implementation of the remote attacks consist of ap-
proximately 6000 lines of C code. Logically, it consists of
three parts: (1) the remote MITM module which let any re-
mote attacker become the remote MITM by crashing the tar-
geted SIP phone and injecting the spoofed DNS responses;
(2) the remote wiretapping module that allows the remote
MITM to wiretap selected VoIP calls; (3) the remote call
hijacking module that allows the remote MITM to hijack
selected VoIP calls.
4. CASE STUDY
In this section, we describe our case study of Vonage VoIP
service, which is the No.1 U.S. residential VoIP service with
more than 2.5 million subscribers. Note all our exploiting
experiments have been against our own phones and account.
We demonstrate how a remote attacker becomes a MITM
by launching DNS spooﬁng attack on a Vonage SIP phone.
First we describe our testbed setup and message ﬂow of the
normal startup or reboot of the Vonage SIP phone. Then
we present the identiﬁed DNS implementation weaknesses
of the Vonage phone and its vulnerability in handling the
malformed INVITE message. Next we illustrate the message
ﬂow of the DNS spooﬁng attack and describe our experi-
mental results. Finally after achieving a MITM, we present
the remote wiretapping and remote call hijacking attacks on
VoIP.
4.1 Network Setup
Figure 3 illustrates the network setup of our testbed. The
remote attacker runs Red Hat Linux on a Dell D610 laptop
computer. NAT router 1 is a FreeBSD machine running on
a virtual machine and NAT router 2 is a Linksys router.
(a) SIP phone directly connected to the
Internet
(b) SIP phone behind NATs
Figure 3: Testbed Setup
Figure 3(a) illustrates the network setup where the SIP
phone is directly connected to the Internet. We use SIP/RTP
server(s) to denote the SIP server and the RTP server which
handle the signaling messages and the RTP stream respec-
tively. The remote attacker could be anywhere on the Inter-
net. In our experiment, we use a wiretap device to capture
live network traﬃc transited from/to the SIP phone. The
wiretap device and the SIP phone connect to a four port
10BASE-T Ethernet hub.
Figure 3(b) illustrates the network setup where the SIP
phone is behind NATs. Note this setup is diﬀerent from the
most popular settings where the SIP phone is behind only
one NAT router. We notice that the SIP phone will send
some destination unreachable ICMP packets to the Vonage
DNS server when receiving spoofed DNS responses with un-
matched port numbers. We use the NAT router2 to block
these unwanted traﬃc from reaching the Vonage DNS server.
As a result, the SIP phone is behind 2 NAT routers. For
convenience, we placed the remote attacker outside NAT
router2 but inside the private network of NAT router1. From
the remote attacker’s perspective, the targeted SIP phone is
behind one NAT router, which is the most likely conﬁgu-
ration for residential VoIP phones.
In this conﬁguration,
the wiretap device and NAT Router2 connect to a four port
10BASE-T Ethernet hub. We notice that none of the NAT
router will change the source port number of the passing
packet, this enables the remote attacker to become the re-
mote MITM via the identiﬁed exploit even if the targeted
Vonage phone is behind 2 levels of NAT routers.
4.2 Message Flow of Normal Startup or Re-
boot
Figure 4 depicts the message ﬂow of normal startup or
reboot of a Vonage phone. At the beginning, the SIP phone