      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        # Solve for the symbolic values. If there are multiple solutions, we only
        # care about one, so we can use eval, which returns any (but only one)
        # solution. Pass eval the bitvector you want to solve for.
        # (!)
        solution0 = solution_state.se.eval(password0)
        ...
        # Aggregate and format the solutions you computed above, and then print
        # the full string. Pay attention to the order of the integers, and the
        # expected base (decimal, octal, hexadecimal, etc).
        solution = ???  # :string
        print solution
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
首先，我们先补全程序路径，然后告诉angr我们不想从程序开头开始执行，因为我们要跳过 **scanf** 函数。所以开始地址只能是 **call
scanf** 之后的指令地址，意味着我们可能需要从 **ADD ESP , 0X10** 开始执行，因为这条指令清理了 **scanf**
函数接收的数据，但是我们并没有调用该函数。。。
这就意味着我们需要跳过这条指令，设置 **start_address** 为 **MOV ECX, DWORD [EBP - 0x18]** 指令的地址
**0x08048937** 。
但是还有一个问题：如果从 **0x08048937**
开始执行的话程序无法正常工作，因为没有开辟栈空间，要这样做的话，首先需要开辟栈空间，但是作者没有这么做。为了使程序工作，我决定从 **call
get_user_input** 的下一条指令开始分析（也就是 **MOV DWORD [EBP - 0x14], EAX @0x8048980**
），这不会改变任何东西，因为我们只是跳过该功能并直接设置寄存器的值。
    start_address = 0x8048980
    initial_state = project.factory.blank_state(addr=start_address)
注意，我们这次使用 **blank_state()** 方法替代了 **entry_state()** 。通过把
**addr=start_address** 传递给 **blank_state()** ，实际上是告诉angr在这个特定的地址创建一个新状态。
还记得 **get_user_input**
解析我们的输入，并把三个值分别赋给三个寄存器吗？现在开始制作输入，以便程序能到达我们要去的地方。为此我们需要创建三个符号位向量，如注释中所述，符号位向量是angr用于将符号值注入程序的数据类型。这些位向量作为angr求解的方程的
**x** 。我们用 **claripy** 通过 **BVS()**
方法生成三个位向量。这个方法需要两个参数：第一个参数表示符号名，第二个参数表示这个符号的长度
单位bit。因为符号值都保存在寄存器里，并且寄存器都是32位的，所以位向量的大小也需要是32位的。
    password_size_in_bits = 32
    password0 = claripy.BVS('password0', password_size_in_bits)
    password1 = claripy.BVS('password1', password_size_in_bits)
    password2 = claripy.BVS('password2', password_size_in_bits)
现在我们已经创建了三个符号位向量，现在就把他们赋值给 `eax`,`ebx`,`edx`。我准备修改先前创建的状态 **initial_state**
，并更新寄存器的内容，幸运的是，angr提供了一个非常智能的方法：
    initial_state.regs.eax = password0
    initial_state.regs.ebx = password1
    initial_state.regs.edx = password2
现在我们准备跟以前一样定义 `find` , `avoid` 状态。
    simulation = project.factory.simgr(initial_state) 
    def is_successful(state):
      stdout_output = state.posix.dumps(sys.stdout.fileno())
      if b'Good Job.\n' in stdout_output:
        return True
      else: return False
    def should_abort(state):
      stdout_output = state.posix.dumps(sys.stdout.fileno())
      if b'Try again.\n' in  stdout_output:
        return True
      else: return False 
    simulation.explore(find=is_successful, avoid=should_abort)
所有事情都准备好了，下面就是打印解了。
    if simulation.found:
        solution_state = simulation.found[0]
        # Solve for the symbolic values. If there are multiple solutions, we only
        # care about one, so we can use eval, which returns any (but only one)
        # solution. Pass eval the bitvector you want to solve for.
        # (!) NOTE: state.se is deprecated, use state.solver (it's exactly the same).
        solution0 = format(solution_state.solver.eval(password0), 'x') # (1)
        solution1 = format(solution_state.solver.eval(password1), 'x')
        solution2 = format(solution_state.solver.eval(password2), 'x')
        # Aggregate and format the solutions you computed above, and then print
        # the full string. Pay attention to the order of the integers, and the
        # expected base (decimal, octal, hexadecimal, etc).
        solution = solution0 + " " + solution1 + " " + solution2 # (2)
        print("[+] Success! Solution is: {}".format(solution))
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
需要解释一下：
  * （1） 我们根据注入的三个符号值调用求解引擎的 **eval()** 方法； **format()** 方法格式化解并去掉16进制的 “0x”。
  * （2） 我们重组3个解，组合为一个字符串，然后打印出来。
下面是完整的方法：
    import angr
    import claripy
    import sys
    def main(argv):
      path_to_binary = "./03_angr_symbolic_registers"
      project = angr.Project(path_to_binary)
      start_address = 0x08048980  # address right after the get_input function call
      initial_state = project.factory.blank_state(addr=start_address)
      password_size_in_bits = 32
      password0 = claripy.BVS('password0', password_size_in_bits)
      password1 = claripy.BVS('password1', password_size_in_bits)
      password2 = claripy.BVS('password2', password_size_in_bits)
      initial_state.regs.eax = password0
      initial_state.regs.ebx = password1
      initial_state.regs.edx = password2
      simulation = project.factory.simgr(initial_state) 
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Good Job.\n' in stdout_output:
          return True
        else: return False
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Try again.\n' in  stdout_output:
          return True
        else: return False 
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = format(solution_state.solver.eval(password0), 'x')
        solution1 = format(solution_state.solver.eval(password1), 'x')
        solution2 = format(solution_state.solver.eval(password2), 'x')
        solution = solution0 + " " + solution1 + " " + solution2  # :string
        print("[+] Success! Solution is: {}".format(solution))
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
下一节，我们将会学习如何构造栈帧，并在函数内直接跳转。
# part 2
上面我们学习了如何使用angr将符号位向量注入到寄存器中以及如何避免不必要的代码路径，但是我们跳过了如何在函数内直接执行，现在不得不从头为函数构造栈帧，下面将会讲如何做到这一点。
## 04_angr_symbolic_stack
首先看一下这个挑战
看一下 **handle_user** 函数，
在调用 **scanf** 把格式化字符串压入栈之前，先会把两个局部变量地址入栈： **[EBP - 0x10]** ， **[EBP - 0xC]** 。
与上个挑战不同的是，这次的变量保存在栈上，而不是寄存器，这就意味着我们必须用一些栈技巧，在程序不崩溃的情况下推送符号缓冲区。回顾一下我们现在所知道的：
  1. **main()** 调用 **handle_user()**
  2. **handle_user()** 调用 **scanf()** 传入复杂的格式化字符串
  3. **scanf()** 将两个变量的值压到 **handle_user** 函数栈上，位置`[EBP - 0x10]` 和`[EBP - 0xC]`
现在我们对程序做了什么有了一定了解，现在看一下 **scaffold04.py** 文件。
    import angr
    import claripy
    import sys
    def main(argv):
      path_to_binary = argv[1]
      project = angr.Project(path_to_binary)
      start_address = ???
      initial_state = project.factory.blank_state(addr=start_address)
      initial_state.regs.ebp = initial_state.regs.esp
      password0 = claripy.BVS('password0', ???)
      ...
      padding_length_in_bytes = ???  # :integer
      initial_state.regs.esp -= padding_length_in_bytes
      initial_state.stack_push(???)  # :bitvector (claripy.BVS, claripy.BVV, claripy.BV)
      ...
      simulation = project.factory.simgr(initial_state)
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = solution_state.se.eval(password0)
        ...
        solution = ???
        print solution
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
我们首先应当先想好一个策略而不是立即就对这个脚本进行修改。我们需要确定angr应当从哪里开始。因为我们需要跳过 **scanf** 函数，因此我们可能需要从
**0x8048697** 地址开始。所以直接跳过指令 **ADD ESP, 0x10** ，
因为它的作用是在 **scanf** 函数返回以后清理栈空间，但是我们没有调用它，因此不需要清理任何东西。
现在我们需要了解，我们跳过的那些指令是如何调整栈空间的，我们要注入的符号位向量的确切的位置。从前面的分析可知，我们要注入的位置是 `[EBP -0x10]` ， `[EBP - 0xC]`，因此在压栈前我们我要填充栈，但是我们首先应当告诉 **ebp**
它应该是指向内存的什么位置。因此我们要用angr处理函数开头（我们跳过的部分）： **MOV EBP, ESP**
。之后我们需要减小帧指针的值（译者注：这里应该是模拟 `sub esp, XXX`）并压入我们的值。但是我们需要填充多少字节？
我们知道，两只值中地址最小的是 **[EBP - 0xC]** ，因为它是四字节的值，所以它将会占据一下内存：`| 0xC | 0xB | 0xA |
0x9 |`，一共两个值意味着我们需要在压入它们之前填充8个字节。之后向栈上压入我们的值，现在看一下如何修改脚本
    def main(argv):
      path_to_binary = "04_angr_symbolic_stack"
      project = angr.Project(path_to_binary)
      start_address = 0x8048697
      initial_state = project.factory.blank_state(addr=start_address)
修改程序位置，并将 **start_address** 的值修改为前面分析的地址。现在开始构造栈，首先用下面的方法执行 **MOV EBP, ESP**
指令
    initial_state.regs.ebp = initial_state.regs.esp
然后就是栈指针地址减8以提供填充空间。因为程序需要两个接收两个无符号整数，所以符号位向量的大小就应该是32bit。
    password0 = claripy.BVS('password0', 32)
    password1 = claripy.BVS('password1', 32)
    initial_state.stack_push(password0) 
    initial_state.stack_push(password1)
之后与前面的脚本基本相同，只要求解符号位向量并打印他们。
    if simulation.found:
      solution_state = simulation.found[0]
      solution0 = (solution_state.solver.eval(password0))
      solution1 = (solution_state.solver.eval(password1))
      print("[+] Success! Solution is: {0} {1}".format(solution0, solution1))
    else:
      raise Exception('Could not find the solution')
下面是完整的脚本：
    import angr
    import claripy
    import sys
    def main(argv):
      path_to_binary = "04_angr_symbolic_stack"
      project = angr.Project(path_to_binary)
      start_address = 0x8048697
      initial_state = project.factory.blank_state(addr=start_address)
      initial_state.regs.ebp = initial_state.regs.esp
      password0 = claripy.BVS('password0', 32)
      password1 = claripy.BVS('password1', 32)
      padding_length_in_bytes = 0x08
      initial_state.regs.esp -= padding_length_in_bytes
      initial_state.stack_push(password0)  
      initial_state.stack_push(password1) 
      simulation = project.factory.simgr(initial_state)
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        #print(stdout_output)
        if b'Good Job.\n' in stdout_output:
          return True
        else: return False
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Try again.\n' in stdout_output:
          return True
        else: return False
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = (solution_state.solver.eval(password0))
        solution1 = (solution_state.solver.eval(password1))
        print( solution0, solution1)
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
# 相关链接
angr_ctf :   
原文地址：  