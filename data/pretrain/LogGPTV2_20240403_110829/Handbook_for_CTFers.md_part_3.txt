11.1
Preparation for the Competition .
，
725
11.2
AWD Tricks....
728
1711
How to React Quickly
，
728
11.2.2
How to Capture Flags Gracefully and Persistently
729
11.2.3
733
11.3
Traffic Analysis .
734
11.4
，
734
11.5 Summary......
735
12
Virtual Target Penetration Test. . .
737
12.1
1Creating a Penetration Test Environment . . .
737
12.1.1  Installing and Using Metasploit on Linux . .
737
12.1.2
Installing and Using Nmap on Linux . . .
743
12.1.3
Installing and Using Proxychains on Linux . . . .
745
---
## Page 16
Contents
Xxi
12.1.4  Installing and Using Hydra on Linux . .
747
12.1.5
Installation of PentestBox on Windows.
748
12.1.6 Proxifier Installation on Windows . 
749
12.2
Port Forwarding and Proxies . ..  .
750
12.2.1
Port Forwarding
752
12.2.2
Socks Proxy........
759
12.3
Well-Known Vulnerability Exploits.
760
12.3.1
ms08-067.
761
12.3.2
ms14-068
761
12.3.3 ms17-010.
763
12.4
Obtaining Authentication Credentials . 
765
12.4.1
Obtaining Plaintext Identity Credentials .
766
12.4.2 Obtaining Hash Identity Credentials . 
774
12.5
777
12.5.1
778
12.5.2  Passing of Tickets . . - .
780
12.6
Penetration Test Challenges in Practice . .. 
788
12.6.1 DefCon China Shooting Range Questions . .
788
12.7
Summary . .
796
---
## Page 17
Chapter1
IntroductiontotheWeb
Web challenges could be seen everywhere in traditional CTF competitions. They are
Sueuado jo a3pamoux qdap-u annbau jou op Kox asneoaq papejs ia8 o 1aisea
systems and complicated assembly instructions than PWN and Reverse challenges.
On the other hand, they do not require strong programming skills compared to
Crypto and MISC challenges.
This chapter will introduce some common Web vulnerabilities in CTF online
competitions and provide readers with a relatively comprehensive concept of CTF
 q o sdxo pm-eu ee q so 
ities classification is very complicated. It is better that readers could learn related
knowledge on the Internet while reading this book to get the best effect.
Based on the frequency and complexity of the techniques to solve challenges, we
divide the Web challenges into three levels: introductory, advanced, and extended.
In this chapter, we will introduce the challenges of each group supplemented by real-
world samples. Readers could understand how different vulnerabilities play a role in
dep su peuoissaod Suooq pe dais q dais Snord 'soureo Suanos
starts from the “introductory" level to introduce the three most common techniques
in solving Web challenges: Information Gathering, SQL Injection Attack, and
Arbitrary File Read Attack.
1.1Significant “Information Gathering'
1.1.1TheImportance ofInformation Gathering
As the old saying goes, *Knowledge precedes victory; Confusion precedes defeat."
Information gathering plays an essential role in BUG hunting. In the CTF online
competition, information gathering covers a wide range of information, such as
backup files, directory information, banner information, etc. To find vulnerabilities
faster, BUG hunters need to be familiar with gathering that information and how the
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
Nu1L Team, Handbook for CTFers,
1
htps:/doi.crg/10.1007/978-981-19-0336-6_1
---
## Page 18
1 Introduction to the Web
information will help. Fortunately, there are a large number of skilful open source
scanning scripts available now. In this section, most information-gathering tech-
niques, including useful open source tools or commercial software, will be
mentioned.
1.1.2ClassificationofInformation Collection
In the following sub-sections, we will discuss the basic information gathering
techniques from three aspects: Sensitive Directories Leakage, Sensitive Backup
Files Leakage, and Banner Identification Leakage.
1.1.2.1Sensitive Directory Leakage
Due to irregular operations, many hidden files with sensitive information will be left
files to obtain important information such as source codes and allfile names in the
in the directory to be accessed remotely and anonymously. Attackers can use these
1. Git leaks
【 Vulnerability Introduction】 Git is a primary tributed coding version control system,
and it will automatically generate a git folder to save branch information. Devel-
opers often forget to delete the -git folder in the production environment, which
allows an attacker to access all versions of source codes committed by developers.
Attackers could be easier to find website vulnerabilities or get sensitive information
such as usernames/passwords/emails.
(1) Basic git leaks in CTF
Basic git leaks: This type of leakage requires a -git folder to have a comprehensive
file structure, and all sensitive information could be found in the latest commit. CTF
players should get the latest commit id in the git/HEAD file and then use git's
algorithm to recover source code files that are restored in the -git/objects/ folder to
perform the exploiting process. Now, many tools could automatically crawl these git
objects from the -git folder and recover them. We strongly recommend a tool: https://
github.com/denny0223/scrabble It is easy to use:
./scrabb1e http : / /example , com/
Build your Web environment locally (the current directory is /var/www/html/,
which is the default Web directory of Apache). See Fig. 1.1.
Run the tool to get the source code and get the flag. See Fig. 1.2.
---
## Page 19
1.1 Significant “Information Gathering”
venenof@ubuntu:/var/ww/html/git_test$ git init
Initialized empty Git repository in /var/ww/html/git_test/.git/
venenof@ubuntu:/var/ww/htmt/git_test$ git add flag-php
venenof@ubuntu:/var/ww/html/git_test$ git commit -n "flag"
[master (root-commit) b4aff45]flag
1 file changed,1 insertion(+)
create mode 100755 flag.php
venenof@ubuntu:/var/ww/html/git_tests
Fig, L.1 Building process
venenof@ubuntu:~/scrabble$ ./scrabble http://127.0.0.1/git_test/
Reinitialized existing Git repository in /home/venenof/scrabble/.git/
parseConmit b4aff45c6aafd587e752846fddc54774344ca687
downloadBlob b4aff45c6aafd507e752846fddc54774344ca607
parseTree 8ff51e37233422f48bdaaf4e741c232349862663
downloadB1ob 8ff51e37233422f40bdaaf4e741c232349862663
downloadB1ob eceeaaa34291e36b22539db3988aad7258e6b9aa
HEAD is now at b4aff45 flag
venenof@ubuntu:~/scrabbles ls
flag.php
venenofeubuntu:~/scrabbles cat flag-php
flag{testaaa}
venenofeubuntu:~/scrabbles
Fig, 1.2 Get flag
(2) Git rollback leakage
challenge has a git leakage, the fag file may have been deleted or overwritten affer
As a version control system, git keeps track of the commit changes. If a CTF
several commits. The latest commit does not include any sensitive information.
Fortunately, git has kept all commit versions in the git folder. We can use the “git
reset”d command to roll back to another version. Building your environment locally,
see Fig. 1.3.
To exploit this type of leakage, we first use the serabble tool to crawl .git files,
and then we can use the “git reset -hard HEAD^" command to roll back to the
previous version. (Note: HEAD represents current/latest version in git system, the
previous version could be marked as HEAD^), see Fig. 1.4.
In addition to using “git reset", a more straightforward way to see what files have
been modified by each commit is to use the “git log stat” command, and then use
“git diff HEAD commit-id”" command to compare the changes between the current
version and other versions.
---
## Page 20
1 Introduction to the Web
venenof@ubuntu:/var/wm/htnl/git_tests cat flag.php
flag(testaaa)
venenof@ubuntu:/var/wm/htnl/git_tests echo “flag is old" > flag.php
venenofeubuntu:/var/ww/htnl/git_test$ cat flag-php
flag is old
venenof@ubuntu:/var/ww/htnl/git_test$ git add flag-php
[master 362276c] otd
1 file changed,1 insertion(+),1 deletion(-)
venenof@ubuntu:/var/wn/htnl/git_tests
Fig, 13 Building process
venenof@ubuntu:~/scrabble$ ./scrabble http://127.0.0.1/git_test/
Reinitialized existing Git repository in /home/venenof/scrabble/-git/
parseCommit 362276c775e7b8b2ae7c8c7e6a0176417b58eccc
downloadBlob 362276c775e7b8b2ae7c8c7e6a8176417b58eccc
parseTree f557b115e61dfb9cb512f2a9ce1628b5dd406aad
downloadB1ob f557b115e61dfb9cb512f2a9ce1628b5dd486aad
down load8lob 3e9818d4fda0195c6e29f674de7a4ac7a9259c95
parseCommit b4aff45c6aafd587e752846fddc54774344ca687
downloadBlob b4aff45c6aafd507e752846fddc54774344ca607
parseTree 8ff51e37233422f40bdaaf4e741c232349862663
downloadB1ob 8ff51e37233422f48bdaaf4e741c232349862663
down LoadB1ob eCeeaaa34291e36b22539db3908aad7258e6b9aa
HEAD is now at 362276c old
venenof@ubuntu:/scrabble$ ls
flag-php
venenofeubuntu:~/scrabble$ cat flag-php
flag is old
venenofeubuntu:~/scrabble$ git reset -hard HEAD^
HEAD is now at b4aff45 flag
flag-php
venenof@ubuntu:~/scrabble$ ls
venenof@ubuntu:/scrabble$ cat flag-php
flag{testaaa}
venenof@eubuntu:~/scrabbtes
Fig, 1.4 Get flag
---
## Page 21
1.1 Significant “Information Gathering”
commit:add flag
HEADe[5]: comit (initial):hello
(END)
Fig, 1.5 The results of commands
(3) Git branch
After each commit, git will automatically put them into a timeline called the
“branch". Git allows multiple branches to separate their work from the main
development branch, not affecting the main branch. If there is no new branch,
there is only one branch default called the master branch. Under most conditions,
git objects could be recovered from the master branch with ease. However, the flag
or sensitive files we are looking for may not exist in the main branch. Using the “git
log" command can only find the changes on the current branch, so we need to switch
other branches to recover the target files.
Now, most of the tools that aim to exploit git leakage do not support switch
branches. Manual efforts are required. Take GitHacker (https://github.com/
Wang Yihang/GitHacker) as an example. The use of GitHacker is straightforward:
execution, all git files in the remote host are downloaded automatically into a local
folder. After entering the folder and executing the “git log -all" or “git branch -v"
command, only the master branch’s information is presented. Nonetheless, some
checkout records could be found after executing the “git reflog”d command, as shown
in Fig. 1.5.
As you can see, there is a secret branch in addition to the master branch, but the
automation tool only restores the information from the master branch, so you need to
manually download the head information from the secret branch and save it to .git/
refs/heads/secret (execute the command °wget http://127.0.0.1:8000/.git/refs/heads/
secret"°). After recovering the head information, we can reuse part of GitHacker's
dus poo se  s ue no sy e oq asu o p
first downloads the git object files as many as posible, then uses “git fsck" to check
them, and continue to download the missing files. Here you can reuse the fixmissing
function that checks and restores the missing files. Let us delete the script that calls
the main function, and modify the code to follow.
if __nane._ -- *_main__':
# nain ()
baseur1 = complete_uz1 (*http://127. 0.0.1:8000/ - git/ )
temppath = repalce_bad_chazs (get_prefix (baseur1 )
fixmissing (baseur1, temppath)
After making the changes, re-execute the “python GitHacker.py” command,
re-enter the generated folder, and run the “git log all" or *branch -v" command,
---
## Page 22
6
1 Introduction to the Web
Fig, 1.6 Get flag
diff--gita/hello.phpb/hello.php
index01a0262..ce01362100644
a/hello.php
+++b/hello.php
-1+1
hello,find the flag pls
hello
diff
-git a/secret.php b/secret.php
new file mode 100644
/dev/null
+++b/secret.php
-0,0+1
+flag{secret}
(END)
the secret branch information can be restored, find the corresponding commit hash in
p 13, unu uou pue pueuoo 69 ①VaH p 13, a anoxa o 13 a
HEAD b94c". A flag is captured! See Fig. 1.6.
(4) Other exploits of git leaks
In addition to the common exploit of recovering source code, other useful messages
could be detected. For example, the -git/ config folder may contain access_token
information that allows access to the user's other repositories.
2. SVN leakage
SVN (subversion) is another source code version controlling software. The admin-
istrator might expose the hidden project folder of SVN to public services (usually
webserver). Hackers could download the .svn/entries file or the wc.db file to obtain
the server source code and other information. Two excellent exploiting scripts: dvcs-
ripper (https://github.com/kost/dvcs-ripper) and Seay-svn (Windows source code
backup exploit).
3. HG leakage
When you initialize your project, HG creates a hidden folder of .hg in the current
folder, containing code snaps or branch changelogs. Here is the exploiting script:
dvcs-ripper (https://github.com/kost/dves-ripper).
4. Personal experience
Readers can perform secondary development based on existed tools to meet their
own needs. Whether it is a hidden folder like .git or sensitive backend folders like the
---
## Page 23
1.1 Significant “Information Gathering”
7
website management platform, a robust directory (common sensitive files/folders
list) is a key to finding them. An open-source web directory scanning script:
dirsearch (https://github.com/maurosoria/dirsearch), including a default directory.
If you got the 403 HTTP response code in a CTF challenge when accessing the .
git folder, the following action should be accessing the -git/HEAD or the -git/config
file. If the corresponding content of the file is shown, it means that there is a git
leakage. When exploiting the SVN leakage, source codes or sensitive files are 
usually crawled from the entries directory, but sometimes the entries directory is
empty. If so, pay attention to whether the wc.db file exists or not, and you can get the
sensitive files in the pristine folder through the checksum in the wc.db.
1.1.2.2Sensitive Backup Files
With some sensitive backup files, we can get the source code of a file or the whole
sitemap.
1. gedit backup file
Under Linux, after saving with a gedit editor, a file with the suffix °~ will be created
in the current directory, the contents of which will be the content of the file you just
edited. If the file you just saved is named flag, then the file is named flag~, see
Fig. 1.7.
2. vim backup file
vim is currently the most widely used Linux text editor. When a user is editing a file
and exits abnormally. (e.g., when connecting to the server via SSH, the user may
encounter a command-line jam while editing a file with vim due to insufficient
network speed), a backup file is generated in the current directory with the following
filename format.
.filename .svp
This file is used to back up the contents of the buffer, i.e., the file's contents on
exit, as shown in Fig. 1.8.
venenof@ubuntu:/tnpsls
flag-
untty_support_test.6
flag(gedtt_bak)
venenof@ubuntu:/tnps
Fig, 1.7 Get source
---
## Page 24
1 Introduction to the Web
itu:/tmp
ntui/tnpsts
_support_test.owmare-root
port_test.o vmare-root
total 28
23root
root
4896 Sep
201:25
venenot
23:38
4098
Aer
flag.
23:36
t_test.o
r-.r..
23:36
23:34
xa-Loci
Fig, 1.8 Result
Fig, 1.9 Get flag
venenof@ubuntu:/tmp
venenof@ubuntu:/tmps touch flag