5000
6000
7000
8000
Lp distance (p=0.5)
(a)
(b)
Figure 6. (a) Fingerprint intra-class and inter-class histograms for a typical user. (b) Face intra-class
and inter-class histograms for a typical user. There is greater overlap in these histograms than in
ﬁngerprint, indicating that face veriﬁcation is less reliable than ﬁngerprint veriﬁcation.
P (zt j xt), and that P (xt j xt(cid:0)1; Zt(cid:0)1) = P (xt j xt(cid:0)1).
Also, P (zt
j xt) is determined from the pdf-pair (Fig-
ure 6(b) for face, and an analogous one for ﬁngerprint). As
for P (xt j xt(cid:0)1), this is described by the state transition
model shown in Figure 7 (b). In the Safe state, the proba-
bility of staying put is p, while the probability of transition
to Attacked is (1 (cid:0) p). Once in the Attacked state, however,
the system remains there and never transitions back to Safe.
Finally, note that Eq. 1 is used to compute Psafe when there
is a biometric observation, while Eq. 2 is used when there
is no observation.
The value of p is governed by domain knowledge:
if
there is no observation for a long period of time, we would
like p to be small, indicating that we are less certain that
the user is still safe (and thus more likely to have been at-
tacked). To achieve this effect, we deﬁnep = ek(cid:1)t, where
(cid:1)t is the time interval between the current time and the last
observation, and k is a free parameter that controls the rate
of decay, which the security administrator can deﬁne. In
general, any decay function may be used to specify p, with
a suitable rate of decay.
4. Integrating biometric feedback into the OS
Having considered some issues in the use of biometrics for
security, we now consider design issues relating to its in-
tegration into the operating system to make the whole sys-
tem reactive. We consider two mechanisms for reaction:
delaying processes when Psafe ca_sessid == 0)
do_nothing;
else if(current->ca_sessid == ca_global_session)
f
if(syscall is critical && below_thresh)
freeze yourself;
else if(syscall is !critical && below_thresh)
delay yourself by [e(1=S(cid:0)1=T ) (cid:0) 1] jiffies
//!below_thresh ) do_nothing;
g
else if(current->ca_sessid < ca_global_session)
unconditionally freeze yourself;
As used in line 4, each process has a “session id” in its t-
ask_struct denoted by the ﬁeld ca_sessid. A value of
0 means that the process is not rooted at any interactive
session. Such processes are not controlled in any way as
speciﬁed by the action in line5. In the kernel, the variable
ca_global_session identiﬁes the session id of thecurrent
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 