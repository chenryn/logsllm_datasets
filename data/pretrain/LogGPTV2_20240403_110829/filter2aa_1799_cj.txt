Vectors
15
14
5
4
3
2
1
0
FIGURE 9-32 Secure Kernel interrupts request levels (IRQL).
The first three secure IRQL are managed by the Secure Kernel in a way similar to the normal world. 
Normal APCs and DPCs (targeting VTL 0) still can’t preempt code executing in VTL 1 through the hyper-
visor, but the VINA interrupt is still delivered to the Secure Kernel (the operating system manages the 
three software interrupts by writing in the target processor’s APIC Task-Priority Register, an operation 
that causes a VMEXIT to the hypervisor. For more information about the APIC TPR, see the Intel, AMD, 
or ARM manuals). This means that if a normal-mode DPC is targeted at a processor while it is executing 
VTL 1 code (at a compatible secure IRQL, which should be less than Dispatch), the VINA interrupt will 
be delivered and will switch the execution context to VTL 0. As a matter of fact, this executes the DPC 
in the normal world and raises for a while the normal kernel’s IRQL to dispatch level. When the DPC 
queue is drained, the normal kernel’s IRQL drops. Execution flow returns to the Secure Kernel thanks to 
348 
CHAPTER 9 Virtualization technologies
the VSM communication loop code that is located in the VslpEnterIumSecureMode routine. The loop 
processes each normal call originated from the Secure Kernel.
The Secure Kernel maps the first three secure IRQLs to the same IRQL of the normal world. When 
a Secure call is made from code executing at a particular IRQL (still less or equal to dispatch) in the 
normal world, the Secure Kernel switches its own secure IRQL to the same level. Vice versa, when the 
Secure Kernel executes a normal call to enter the NT kernel, it switches the normal kernel’s IRQL to the 
same level as its own. This works only for the first three levels. 
The normal raised level is used when the NT kernel enters the secure world at an IRQL higher than 
the DPC level. In those cases, the Secure Kernel maps all of the normal-world IRQLs, which are above 
DPC, to its normal raised secure level. Secure Kernel code executing at this level can’t receive any VINA 
for any kind of software IRQLs in the normal kernel (but it can still receive a VINA for hardware inter-
rupts). Every time the NT kernel enters the secure world at a normal IRQL above DPC, the Secure Kernel 
raises its secure IRQL to normal raised.
Secure IRQLs equal to or higher than VINA can never be preempted by any code in the normal 
world. This explains why the Secure Kernel supports the concept of secure, nonpreemptable timers 
and Secure Intercepts. Secure timers are generated from the hypervisor’s clock interrupt service rou-
tine (ISR). This ISR, before injecting a synthetic clock interrupt to the NT kernel, checks whether there 
are one or more secure timers that are expired. If so, it injects a synthetic secure timer interrupt to VTL 1. 
Then it proceeds to forward the clock tick interrupt to the normal VTL.
Secure intercepts
There are cases where the Secure Kernel may need to prevent the NT kernel, which executes at a lower 
VTL, from accessing certain critical system resources. For example, writes to some processor’s MSRs 
could potentially be used to mount an attack that would disable the hypervisor or subvert some of its 
protections. VSM provides a mechanism to allow a higher VTL to lock down critical system resources 
and prevent access to them by lower VTLs. The mechanism is called secure intercepts.
Secure intercepts are implemented in the Secure Kernel by registering a synthetic interrupt, which 
is provided by the hypervisor (remapped in the Secure Kernel to vector 0xF0). The hypervisor, when 
certain events cause a VMEXIT, injects a synthetic interrupt to the higher VTL on the virtual processor 
that triggered the intercept. At the time of this writing, the Secure Kernel registers with the hypervisor 
for the following types of intercepted events: 
I 
Write to some vital processor’s MSRs (Star, Lstar, Cstar, Efer, Sysenter, Ia32Misc, and APIC base
on AMD64 architectures) and special registers (GDT, IDT, LDT)
I 
Write to certain control registers (CR0, CR4, and XCR0)
I 
Write to some I/O ports (ports 0xCF8 and 0xCFC are good examples; the intercept manages the
reconfiguration of PCI devices)
I 
Invalid access to protected guest physical memory
CHAPTER 9 Virtualization technologies
349
When VTL 0 software causes an intercept that will be raised in VTL 1, the Secure Kernel needs to 
recognize the intercept type from its interrupt service routine. For this purpose,  the Secure Kernel uses 
the message queue allocated by the SynIC for the “Intercept” synthetic interrupt source (see the “Inter-
partition communication” section previously in this section for more details about the SynIC and SINT). 
The Secure Kernel is able to discover and map the physical memory page by checking the SIMP syn-
thetic MSR, which is virtualized by the hypervisor. The mapping of the physical page is executed at the 
Secure Kernel initialization time in VTL 1. The Secure Kernel’s startup is described later in this chapter.
Intercepts are used extensively by HyperGuard with the goal to protect sensitive parts of the normal 
NT kernel. If a malicious rootkit installed in the NT kernel tries to modify the system by writing a par-
ticular value to a protected register (for example to the syscall handlers, CSTAR and LSTAR, or model-
specific registers), the Secure Kernel intercept handler (ShvlpInterceptHandler) filters the new register’s 
value, and, if it discovers that the value is not acceptable, it injects a General Protection Fault (GPF) 
nonmaskable exception to the NT kernel in VLT 0. This causes an immediate bugcheck resulting in the 
system being stopped. If the value is acceptable, the Secure Kernel writes the new value of the register 
using the hypervisor through the HvSetVpRegisters hypercall (in this case, the Secure Kernel is proxying 
the access to the register).
Control over hypercalls
The last intercept type that the Secure Kernel registers with the hypervisor is the hypercall intercept. 
The hypercall intercept’s handler checks that the hypercall emitted by the VTL 0 code to the hypervi-
sor is legit and is originated from the operating system itself, and not through some external mod-
ules. Every time in any VTL a hypercall is emitted, it causes a VMEXIT in the hypervisor (by design). 
Hypercalls are the base service used by kernel components of each VTL to request services between 
each other (and to the hypervisor itself). The hypervisor injects a synthetic intercept interrupt to the 
higher VTL only for hypercalls used to request services directly to the hypervisor, skipping all the hy-
percalls used for secure and normal calls to and from the Secure Kernel.
If the hypercall is not recognized as valid, it won’t be executed: the Secure Kernel in this case 
updates the lower VTL’s registers with the goal to signal the hypercall error. The system is not crashed 
(although this behavior can change in the future); the calling code can decide how to manage the error.
VSM system calls
As we have introduced in the previous sections, VSM uses hypercalls to request services to and from 
the Secure Kernel. Hypercalls were originally designed as a way to request services to the hypervisor, 
but in VSM the model has been extended to support new types of system calls:
I 
Secure calls are emitted by the normal NT kernel in VTL 0 to require services to the Secure Kernel.
I 
Normal calls are requested by the Secure Kernel in VTL 1 when it needs services provided by
the NT kernel, which runs in VTL 0. Furthermore, some of them are used by secure processes
(trustlets) running in Isolated User Mode (IUM) to request services from the Secure Kernel or
the normal NT kernel.
350 
CHAPTER 9 Virtualization technologies
These kinds of system calls are implemented in the hypervisor, the Secure Kernel, and the normal 
NT kernel. The hypervisor defines two hypercalls for switching between different VTLs: HvVtlCall and 
HvVtlReturn. The Secure Kernel and NT kernel define the dispatch loop used for dispatching Secure and 
Normal Calls.
Furthermore, the Secure Kernel implements another type of system call: secure system calls. They 
provide services only to secure processes (trustlets), which run in IUM. These system calls are not exposed 
to the normal NT kernel. The hypervisor is not involved at all while processing secure system calls.
Virtual processor state
Before delving into the Secure and Normal calls architecture, it is necessary to analyze how the virtual 
processor manages the VTL transition. Secure VTLs always operate in long mode (which is the execu-
tion model of AMD64 processors where the CPU accesses 64-bit-only instructions and registers), with 
paging enabled. Any other execution model is not supported. This simplifies launch and management 
of secure VTLs and also provides an extra level of protection for code running in secure mode. (Some 
other important implications are discussed later in the chapter.) 
For efficiency, a virtual processor has some registers that are shared between VTLs and some other 
registers that are private to each VTL. The state of the shared registers does not change when switching 
between VTLs. This allows a quick passing of a small amount of information between VTLs, and it also 
reduces the context switch overhead when switching between VTLs. Each VTL has its own instance of 
private registers, which could only be accessed by that VTL. The hypervisor handles saving and restor-
ing the contents of private registers when switching between VTLs. Thus, when entering a VTL on a 
virtual processor, the state of the private registers contains the same values as when the virtual proces-
sor last ran that VTL.
Most of a virtual processor’s register state is shared between VTLs. Specifically, general purpose 
registers, vector registers, and floating-point registers are shared between all VTLs with a few excep-
tions, such as the RIP and the RSP registers. Private registers include some control registers, some 
architectural registers, and hypervisor virtual MSRs. The secure intercept mechanism (see the previous 
section for details) is used to allow the Secure environment to control which MSR can be accessed by 
the normal mode environment. Table 9-3 summarizes which registers are shared between VTLs and 
which are private to each VTL.
CHAPTER 9 Virtualization technologies
351
TABLE 9-3 Virtual processor per-VTL register states
Type
General Registers
MSRs
Shared
Rax, Rbx, Rcx, Rdx, Rsi, Rdi, Rbp
CR2
R8 – R15
DR0 – DR5
X87 floating point state
XMM registers
AVX registers
XCR0 (XFEM)
DR6 (processor-dependent)
HV_X64_MSR_TSC_FREQUENCY
HV_X64_MSR_VP_INDEX
HV_X64_MSR_VP_RUNTIME
HV_X64_MSR_RESET
HV_X64_MSR_TIME_REF_COUNT
HV_X64_MSR_GUEST_IDLE
HV_X64_MSR_DEBUG_DEVICE_OPTIONS
HV_X64_MSR_BELOW_1MB_PAGE
HV_X64_MSR_STATS_PARTITION_RETAIL_PAGE
HV_X64_MSR_STATS_VP_RETAIL_PAGE
MTRR’s and PAT
MCG_CAP
MCG_STATUS
Private 
RIP, RSP
RFLAGS
CR0, CR3, CR4
DR7
IDTR, GDTR
CS, DS, ES, FS, GS, SS, TR, LDTR
TSC
DR6 (processor-dependent)
SYSENTER_CS, SYSENTER_ESP, SYSENTER_EIP, STAR, LSTAR, CSTAR, 
SFMASK, EFER, KERNEL_GSBASE, FS.BASE, GS.BASE
HV_X64_MSR_HYPERCALL
HV_X64_MSR_GUEST_OS_ID
HV_X64_MSR_REFERENCE_TSC
HV_X64_MSR_APIC_FREQUENCY
HV_X64_MSR_EOI
HV_X64_MSR_ICR
HV_X64_MSR_TPR
HV_X64_MSR_APIC_ASSIST_PAGE
HV_X64_MSR_NPIEP_CONFIG
HV_X64_MSR_SIRBP
HV_X64_MSR_SCONTROL
HV_X64_MSR_SVERSION
HV_X64_MSR_SIEFP
HV_X64_MSR_SIMP
HV_X64_MSR_EOM
HV_X64_MSR_SINT0 – HV_X64_MSR_SINT15
HV_X64_MSR_STIMER0_CONFIG – HV_X64_MSR_STIMER3_CONFIG
HV_X64_MSR_STIMER0_COUNT -HV_X64_MSR_STIMER3_COUNT
Local APIC registers (including CR8/TPR)
Secure calls
When the NT kernel needs services provided by the Secure Kernel, it uses a special function, 
VslpEnterIumSecureMode. The routine accepts a 104-byte data structure (called SKCALL), which is used 
to describe the kind of operation (invoke service, flush TB, resume thread, or call enclave), the secure 
call number, and a maximum of twelve 8-byte parameters. The function raises the processor’s IRQL, 
if necessary, and determines the value of the Secure Thread cookie. This value communicates to the 
Secure Kernel which secure thread will process the request. It then (re)starts the secure calls dispatch 
loop. The executability state of each VTL is a state machine that depends on the other VTL.
The loop described by the VslpEnterIumSecureMode function manages all the operations shown 
on the left side of Figure 9-33 in VTL 0 (except the case of Secure Interrupts). The NT kernel can decide 
to enter the Secure Kernel, and the Secure Kernel can decide to enter the normal NT kernel. The loop 
starts by entering the Secure Kernel through the HvlSwitchToVsmVtl1 routine (specifying the opera-
tion requested by the caller). The latter function, which returns only if the Secure Kernel requests a VTL 
switch, saves all the shared registers and copies the entire SKCALL data structure in some well-defined 
CPU registers: RBX and the SSE registers XMM10 through XMM15. Finally, it emits an HvVtlCall hypercall 
to the hypervisor. The hypervisor switches to the target VTL (by loading the saved per-VTL VMCS) and 
352 
CHAPTER 9 Virtualization technologies
writes a VTL secure call entry reason to the VTL control page. Indeed, to be able to determine why a se-
cure VTL was entered, the hypervisor maintains an informational memory page that is shared by each 
secure VTL. This page is used for bidirectional communication between the hypervisor and the code 
running in a secure VTL on a virtual processor. 
VTL 0
VTL 1
Normal Call Processed OR
Secure Interrupt*
Start/Resume a Secure Thread OR
Emit a Secure Call OR
VINA Processed OR
Terminate a Secure Thread OR
Secure Call Processed OR
Process the VINA OR
Emits a Normal Call OR
Secure Interrupt Processed *
Secure Kernel
Secure Kernel
NT Kernel
NT Kernel
FIGURE 9-33 The VSM dispatch loop.
The virtual processor restarts the execution in VTL 1 context, in the SkCallNormalMode function of 
the Secure Kernel. The code reads the VTL entry reason; if it’s not a Secure Interrupt, it loads the current 
processor SKPRCB (Secure Kernel processor control block), selects a thread on which to run (starting 
from the secure thread cookie), and copies the content of the SKCALL data structure from the CPU 
shared registers to a memory buffer. Finally, it calls the IumInvokeSecureService dispatcher routine, 
which will process the requested secure call, by dispatching the call to the correct function (and imple-
ments part of the dispatch loop in VTL 1).
An important concept to understand is that the Secure Kernel can map and access VTL 0 memory, so 
there’s no need to marshal and copy any eventual data structure, pointed by one or more parameters, to 
the VTL 1 memory. This concept won’t apply to a normal call, as we will discuss in the next section.
As we have seen in the previous section, Secure Interrupts (and intercepts) are dispatched by the 
hypervisor, which preempts any code executing in VTL 0. In this case, when the VTL 1 code starts the ex-
ecution, it dispatches the interrupt to the right ISR. After the ISR finishes, the Secure Kernel immediately 
emits a HvVtlReturn hypercall. As a result, the code in VTL 0 restarts the execution at the point in which 
it has been previously interrupted, which is not located in the secure calls dispatch loop. Therefore, 
Secure Interrupts are not part of the dispatch loop even if they still produce a VTL switch.
Normal calls
Normal calls are managed similarly to the secure calls (with an analogous dispatch loop located in 
VTL 1, called normal calls loop), but with some important differences:
I 
All the shared VTL registers are securely cleaned up by the Secure Kernel before emitting the
HvVtlReturn to the hypervisor for switching the VTL. This prevents leaking any kind of secure
data to normal mode.
CHAPTER 9 Virtualization technologies
353
I 
The normal NT kernel can’t read secure VTL 1 memory. For correctly passing the syscall param-
eters and data structures needed for the normal call, a memory buffer that both the Secure
Kernel and the normal kernel can share is required. The Secure Kernel allocates this shared
buffer using the ALLOCATE_VM normal call (which does not require passing any pointer as a pa-
rameter). The latter is dispatched to the MmAllocateVirtualMemory function in the NT normal
kernel. The allocated memory is remapped in the Secure Kernel at the same virtual address and
has become part of the Secure process’s shared memory pool.
I 
As we will discuss later in the chapter, the Isolated User Mode (IUM) was originally designed
to be able to execute special Win32 executables, which should have been capable of running
indifferently in the normal world or in the secure world. The standard unmodified Ntdll.dll and
KernelBase.dll libraries are mapped even in IUM. This fact has the important consequence of
requiring almost all the native NT APIs (which Kernel32.dll and many other user mode libraries
depend on) to be proxied by the Secure Kernel.
To correctly deal with the described problems, the Secure Kernel includes a marshaler, which identi-
fies and correctly copies the data structures pointed by the parameters of an NT API in the shared buf-
fer. The marshaler is also able to determine the size of the shared buffer, which will be allocated from 
the secure process memory pool. The Secure Kernel defines three types of normal calls:
I 
A disabled normal call is not implemented in the Secure Kernel and, if called from IUM, it
simply fails with a STATUS_INVALID_SYSTEM_SERVICE exit code. This kind of call can’t be called
directly by the Secure Kernel itself.
I 
An enabled normal call is implemented only in the NT kernel and is callable from IUM in its
original Nt or Zw version (through Ntdll.dll). Even the Secure Kernel can request an enabled
normal call—but only through a little stub code that loads the normal call number—set the
highest bit in the number, and call the normal call dispatcher (IumGenericSyscall routine). The
highest bit identifies the normal call as required by the Secure Kernel itself and not by the
Ntdll.dll module loaded in IUM.
I 
A special normal call is implemented partially or completely in Secure Kernel (VTL 1), which
can filter the original function’s results or entirely redesign its code.
Enabled and special normal calls can be marked as KernelOnly. In the latter case, the normal call 
can be requested only from the Secure Kernel itself (and not from secure processes). We’ve already 
provided the list of enabled and special normal calls (which are callable from software running in VSM) 
in Chapter 3 of Part 1, in the section named “Trustlet-accessible system calls.”
Figure 9-34 shows an example of a special normal call. In the example, the LsaIso trustlet has called 
the NtQueryInformationProcess native API to request information of a particular process. The Ntdll.dll 
mapped in IUM prepares the syscall number and executes a SYSCALL instruction, which transfers the 