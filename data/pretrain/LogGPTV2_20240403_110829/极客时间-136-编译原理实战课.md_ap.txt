# Java JIT编译器（二）：Sea of Nodes为何如此强大？

你好，我是宫文学。在本讲中，我们将继续深入探讨Graal编译器，重点关注其IR（中间表示）的设计。上一讲中我们了解到，Graal在执行过程中创建了一个图数据结构，即Graal的IR。许多处理和优化算法都是基于这个IR进行的。可以说，这个IR是Graal编译器的核心特性之一。

### 为什么IR采用图结构？它的特点和优点是什么？编译器如何基于这个IR运行优化算法？

今天，我将带你一起解答这些问题，并通过这个过程让你对真实编译器中的IR设计和优化处理有更直观的认识。

## 基于图的IR

IR对于编译器至关重要，因为它填补了高级语言和机器语言在语义上的巨大差异。例如，在高级语言中使用数组，而在高效的x86机器码中则是通过间接寻址访问连续内存块。因此，IR的设计必须有利于这种转换，并且还要便于运行优化算法，以生成更高效的代码。

在上一讲中，我们发现Graal编译器在一开始就将字节码翻译成了一种新的IR，该IR采用图结构表示。那么这个图具体是什么样子呢？幸运的是，我们可以使用工具直观地看到它的结构。你可以从Oracle网站下载**idealgraphvisualizer**工具。下载并解压缩后，运行以下命令启动图形界面并在4445端口等待GraalVM发送数据：

```sh
export PATH="//idealgraphvisualizer/bin:$PATH"
idealgraphvisualizer &
```

接着，运行Foo示例程序，并增加`-Dgraal.Dump`参数，让GraalVM输出编译过程的一些中间结果。同时，添加`-Xcomp`参数，使JIT编译器在第一次使用某个方法时就进行编译工作。

```sh
mx vm \
  -XX:+UnlockExperimentalVMOptions \
  -XX:+EnableJVMCI \
  -XX:+UseJVMCICompiler \
  -XX:-TieredCompilation \
  -XX:CompileOnly=Foo \
  -Dgraal.Dump \
  -Xcomp \
  Foo
```

GraalVM会在终端输出`Connected to the IGV on 127.0.0.1:4445`，表明它已连接到idealgraphvisualizer。在即时编译后，idealgraphvisualizer会接收到编译过程中生成的图，你可以点击显示它。以下是两个阶段的图示例：一个是解析完字节码后的图（After parsing），另一个是在处理完中间层后的图（After midtier）。

![](https://static001.geekbang.org/resource/image/28/2b/28a6cd4180b3a28ce59098a2f5a4c82b.jpg)
图 1：After parsing

![](https://static001.geekbang.org/resource/image/94/77/9448a684d1b3e04b695bc0761a6b7c77.jpg)
图 2：After mid tier

Graal IR受到了“程序依赖图”（PDG）的影响。我们在第6讲中提到过PDG，它是用图来表示程序中的数据依赖和控制依赖。这种IR还有一个别名，叫做**节点之海（Sea of Nodes）**。当程序稍微复杂一点时，图中的节点会变得非常多，难以用肉眼分辨。基于Sea of Nodes的IR是一种较新的设计，在HotSpot编译器、Java的Graal编译器和JavaScript的V8编译器中都采用了这种结构，因此我们需要重视它。

### Sea of Nodes的优势

我们都知道，数据结构的设计对于算法至关重要。IR的数据结构会影响到优化算法的编写方式。好的IR设计会使优化算法的编写和维护更加容易。

**Sea of Nodes最大的优点在于能够用一个数据结构同时反映控制流和数据流，并尽量减少它们之间的相互依赖。**

在传统的编译器中，控制流和数据流是分开的。控制流通常用控制流图（CFG）表示，而IR则侧重于表达数据流。例如，LLVM采用了SSA格式的IR，可以很好地体现值的定义和使用关系，从而刻画数据流。然而，这种方式会导致控制流和数据流耦合得比较紧密，因为IR指令必须归属于某个基本块。

举个例子，在下面的示例程序中，`int b = a * 2;`这条语句会被放到循环体的基本块中。

```java
int foo(int a) {
    int sum = 0;
    for (int i = 0; i < 10; i++) {
        int b = a * 2;
        sum += b;
    }
    return sum;
}
```

在这种情况下，控制流和数据流之间的耦合使得优化变得更加困难。而Sea of Nodes通过将所有操作表示为节点，并通过边表示依赖关系，避免了这种耦合。这使得优化算法可以更灵活地处理控制流和数据流，从而生成更高效的代码。

### 参考资料

1. 多态内联：[Inlining of Virtual Methods](https://link-to-reference.com/inlining-virtual-methods)
2. 逃逸分析：[Escape Analysis for Java](https://link-to-reference.com/escape-analysis-for-java)
3. 部分逃逸分析：[Partial Escape Analysis and Scalar Replacement for Java](https://link-to-reference.com/partial-escape-analysis-and-scalar-replacement)

通过以上内容，希望你对Graal编译器的IR设计及其优势有了更清晰的理解。