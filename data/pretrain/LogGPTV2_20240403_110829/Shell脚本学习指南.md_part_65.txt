### 最后的手段
如果其他方法均无效，可以使用以下命令：
```bash
$ kill -KILL 25094
```
该命令会向进程ID为25094的进程发送KILL信号。大多数`top`实例允许从其界面直接发送kill命令。当然，只有具有root权限的用户或特定用户（如stevens）才能执行此操作。否则，你需要请求系统管理员来终止异常进程。

**注意**：谨慎使用`kill`命令。程序被强制终止时可能会在文件系统中留下残余数据，这不仅浪费空间，还可能影响下次运行程序。例如，dacmon、邮件客户端、文本编辑器和网页浏览器等程序通常会创建锁定文件（lock file），以记录程序正在运行的状态。如果程序的第二个实例启动时发现已存在的锁文件，则会立即退出。否则，两个实例同时写入同一个文件可能导致数据损坏。遗憾的是，这些程序很少告知锁文件的具体名称或位置，如果锁文件是长期运行进程的遗留物，你可能需要找到并删除它才能使程序正常运行。相关内容将在13.4节详细介绍。

### 使用`pgrep`和`pkill`命令
某些系统（如GNU/Linux、NetBSD和Sun Solaris）提供了`pgrep`和`pkill`命令，可以根据进程名查找并发送信号。例如，要查找名为`netscape`的进程并发送信号，可以这样做：

```bash
$ pgrep netscape
6052

$ pkill -SIGSTOP netscape
$ pkill -SIGCONT netscape
$ pkill -KILL netscape
$ pkill -TERM netscape
```

- `pgrep netscape`：查找名为`netscape`的进程，并输出其PID。
- `pkill -SIGSTOP netscape`：发送停止信号给`netscape`进程。
- `pkill -SIGCONT netscape`：发送继续信号给`netscape`进程。
- `pkill -KILL netscape`：发送KILL信号给`netscape`进程。
- `pkill -TERM netscape`：发送TERM信号给`netscape`进程。

**注意**：由于进程名称不是唯一的，因此通过名称删除进程可能存在误删的风险。

### 捕捉进程信号
内核为每个信号提供了默认处理行为。例如，在Sun Solaris系统上，可以使用以下命令查看所有关于信号的手册页：

```bash
$ man -a signal
```

常见的信号及其默认行为如下：
- `SIGHUP`：挂起信号，导致进程退出。
- `SIGINT`：中断信号，导致进程退出。
- `SIGQUIT`：退出信号，导致进程产生核心转储并退出。
- `SIGABRT`：中止信号，导致进程产生核心转储并退出。
- `SIGFPE`：浮点异常信号，导致进程产生核心转储并退出。
- `SIGPIPE`：管道破裂信号，导致进程退出。
- `SIGUSR1`：用户自定义信号1，默认行为是退出。
- `SIGUSR2`：用户自定义信号2，默认行为是忽略。
- `SIGCHLD`：子进程状态改变信号，默认行为是忽略。

### 使用`trap`命令
`trap`命令可以注册信号处理器，捕获指定的信号并执行相应的命令。例13-3展示了一个小型Shell脚本`looper`，说明了如何使用`trap`命令捕获信号。

```bash
#!/bin/sh
# looper: 休眠循环脚本
trap 'echo "Ignoring HUP ..."' HUP
trap 'echo "Terminating on USR1 ..."; exit 1' USR1

while true; do
    sleep 2
    date >/dev/null
done
```

#### 测试脚本
1. 启动脚本并在后台运行：
   ```bash
   $ ./looper &
   [1] 24179
   ```

2. 发送HUP信号：
   ```bash
   $ kill -HUP 24179
   Ignoring HUP ...
   ```

3. 发送USR1信号：
   ```bash
   $ kill -USR1 24179
   Terminating on USR1 ...
   [1]: Done(1)
   ```

4. 发送其他信号进行测试：
   ```bash
   $ ./looper &
   [1] 24286
   $ kill -CHLD 24286
   $ jobs
   [1] Running
   $ kill -FPE 24286
   [1] + Arithmetic Exception (core dumped) ./looper
   $ ./looper &
   [1] 24395
   $ kill -PIPE 24395
   [1] + Broken Pipe ./looper
   $ ./looper &
   [1] 24622
   $ kill 24622
   [1] + Done (208) ./looper
   ```

### `EXIT`信号
除了标准信号外，`trap`命令还可以使用`EXIT`信号。`EXIT`信号在脚本退出前触发，无论是因为显式的`exit`命令还是脚本自然结束。例如：

```bash
trap 'echo "Child terminated ..."' CHLD
```

将修改后的脚本命名为`looper-2`并执行：

```bash
$ ./looper-2 &
[1] 24668
Child terminated ...
Child terminated ...
...
$ kill -ABRT 24668
[1] Abort (core dumped) ./looper-2
```

### 其他Shell的`DEBUG`信号
不同的Shell对`DEBUG`信号的支持有所不同。下面是一个简短的测试脚本：

```bash
#!/bin/sh
pwd
```

在不同Shell下测试：

```bash
$ /bin/sh debug-trap
test-debug-trap: trap: bad trap
/tmp
This is an EXIT trap

$ /bin/ksh debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap

$ /usr/xpg4/bin/sh debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap

$ /usr/dt/bin/dtksh debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap

$ /usr/local/bin/ksh93 debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap

$ /usr/local/bin/bash debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap

$ /usr/local/bin/pdksh debug-trap
test-debug-trap[2]: trap: bad signal DEBUG

$ /usr/local/bin/zsh debug-trap
/tmp
This is a DEBUG trap
/tmp
This is an EXIT trap
```

通过这些测试，可以看出不同Shell对`DEBUG`信号的支持情况。