由于此时我们对除`eth0`以外的任何端点都不感兴趣，因此我们可以使用该命令的更具体的变体，它将为我们提供以下内容:
```
/ # ip addr show eth0
195: eth0@if196:  mtu 1500 qdisc noqueue state UP
 link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
 inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
 valid_lft forever preferred_lft forever
```
在输出中，我们还可以看到 Docker 已经将什么 MAC 地址(`02:42:ac:11:00:02`)和什么 IP ( `172.17.0.2`)与这个容器网络命名空间相关联。
我们还可以通过使用`ip route`命令获得一些关于如何路由请求的信息:
```
/ # ip route
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth0 scope link src 172.17.0.2
```
该输出告诉我们所有在`172.17.0.1`到达网关的流量都是通过`eth0 `设备路由的。
现在，让我们在同一个网络上运行另一个名为`c2`的容器:
```
$ docker container run --name c2 -d alpine:latest ping 127.0.0.1
```
由于我们没有指定任何其他网络，因此`c2`容器也将连接到`bridge`网络。它的 IP 地址将是子网中的下一个空闲地址，也就是`172.17.0.3`，我们可以很容易地测试到:
```
$ docker container inspect --format "{{.NetworkSettings.IPAddress}}" c2
172.17.0.3
```
现在，我们有两个容器连接到`bridge`网络。我们可以尝试再次检查这个网络，以在输出中找到所有附加到它的容器的列表。：
```
$ docker network inspect bridge
```
信息位于`Containers`节点下:
![](img/69d72a94-badb-443b-8a76-6abdbe90783e.png)
The containers section of the output of docker network inspect bridge
为了可读性，我们再次将输出缩短为要点。
现在，让我们创建两个额外的容器，`c3`和`c4`，并将它们连接到`test-net`。为此，我们使用`--network `参数:
```
$ docker container run --name c3 -d --network test-net \
 alpine:latest ping 127.0.0.1
$ docker container run --name c4 -d --network test-net \
 alpine:latest ping 127.0.0.1
```
让我们检查`network test-net`并确认容器`c3`和`c4`确实附着在上面:
```
$ docker network inspect test-net
```
这将为`Containers`部分提供以下输出:
![](img/3030ab2a-c3af-41de-bbd9-3dca79ccf36c.png)
Containers section of the command docker network inspect test-net
我们要问自己的下一个问题是两个`c3`和`c4`容器是否可以自由地相互通信。为了证明确实如此，我们可以将`exec`放入`c3`容器中:
```
$ docker container exec -it c3 /bin/sh
```
一旦进入容器，我们可以尝试通过名称和 IP 地址 ping 容器`c4`:
```
/ # ping c4
PING c4 (10.1.0.3): 56 data bytes
64 bytes from 10.1.0.3: seq=0 ttl=64 time=0.192 ms
64 bytes from 10.1.0.3: seq=1 ttl=64 time=0.148 ms
...
```
以下是使用容器的 IP 地址进行 ping 操作的结果`c4`:
```
/ # ping 10.1.0.3
PING 10.1.0.3 (10.1.0.3): 56 data bytes
64 bytes from 10.1.0.3: seq=0 ttl=64 time=0.200 ms
64 bytes from 10.1.0.3: seq=1 ttl=64 time=0.172 ms
...
```
这两种情况下的答案都向我们证实，连接到同一网络的容器之间的通信工作正常。事实上，我们甚至可以使用我们想要连接的容器的名称，这向我们表明 Docker DNS 服务提供的名称解析在这个网络中是有效的。
现在，我们希望确保`bridge`和`test-net`网络相互之间有防火墙。为了演示这一点，我们可以尝试从`c3`容器 ping`c2`容器，通过它的名称或它的 IP 地址:
```
/ # ping c2
ping: bad address 'c2'
```
以下是使用目标容器的 IP 地址进行 ping 操作的结果`c2`:
```
/ # ping 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes 
^C
--- 172.17.0.3 ping statistics ---
43 packets transmitted, 0 packets received, 100% packet loss
```
前面的命令仍然悬而未决，我不得不用 *Ctrl* + *C* 终止命令。从 pinging】的答案中，我们也可以看到名称解析并不能跨网络工作。这是意料之中的行为。网络为容器提供了额外的隔离层，从而提供了安全性。
之前，我们了解到一个容器可以连接到多个网络。让我们将一个`c5`容器同时连接到`sample-net`和`test-net`网络:
```
$ docker container run --name c5 -d \
 --network sample-net \
 --network test-net \
 alpine:latest ping 127.0.0.1
```
然后，我们可以测试`c5`是否可以从`c2`容器到达，就像我们测试容器`c4`和`c2`一样。结果将显示连接确实有效。
如果我们想删除一个现有的网络，我们可以使用`docker network rm`命令，但是请注意，不能意外删除一个连接了容器的网络:
```
$ docker network rm test-net
Error response from daemon: network test-net id 863192... has active endpoints
```
在继续之前，让我们清理并移除所有容器:
```
$ docker container rm -f $(docker container ls -aq)
```
然后，我们删除我们创建的两个自定义网络:
```
$ docker network rm sample-net
$ docker network rm test-net
```
# 主机网络
有些情况下，我们希望在主机的网络命名空间中运行容器。当我们需要在用于分析或调试主机网络流量的容器中运行一些软件时，这可能是必要的。但是请记住，这些都是非常具体的场景。在容器中运行业务软件时，没有充分的理由运行连接到主机网络的各个容器。出于安全原因，强烈建议您不要在生产或类似生产的环境中运行连接到主机网络的任何此类容器。
也就是说，*如何在主机的网络命名空间内运行容器？*只需将容器连接到`host`网络:
```
$ docker container run --rm -it --network host alpine:latest /bin/sh
```
如果我们现在使用`ip`工具从容器内部分析网络名称空间，我们将看到我们得到的图片与我们直接在主机上运行`ip`工具得到的图片完全相同。例如，如果我检查主机上的`eth0`设备，我会得到以下信息:
```
/ # ip addr show eth0
2: eth0:  mtu 1500 qdisc pfifo_fast state UP qlen 1000
 link/ether 02:50:00:00:00:01 brd ff:ff:ff:ff:ff:ff
 inet 192.168.65.3/24 brd 192.168.65.255 scope global eth0
 valid_lft forever preferred_lft forever
 inet6 fe80::c90b:4219:ddbd:92bf/64 scope link
 valid_lft forever preferred_lft forever
```
这里我发现`192.168.65.3`是主机已经分配的 IP 地址，这里显示的 MAC 地址也对应着主机的 MAC 地址。
我们还可以检查路线，以获得以下(缩短的):
```
/ # ip route