### 概要
本文是关于CVE-2018-18500的一个Mozilla Firefox安全漏洞，由SophosLabs于2018年11月发布并向Mozilla
Foundation报告。
此安全漏洞涉及`Gecko`（Firefox的浏览器引擎）中的软件错误，其中包含负责解析网页的代码。通过对网页进行恶意代码编程，我们可以利用漏洞对Firefox的实例进行破坏。
存在错误的引擎组件是`HTML5 Parser`，特别是关于“自定义元素”的处理。
这里所描述的错误的根本原因是编程错误，其中正在使用C ++对象而没有正确对它进行引用，并导致过早地释放对象。这些情况被称为`Write After
Free（释放后写入）`内存损坏，程序错误地将其写入已释放的内存中。
由于当今操作系统和程序拥有众多的安全缓解措施，所以在Web浏览器中开发内存损坏漏洞的并非易事。它往往需要利用多个错误并利用复杂的程序特定技术来实现复杂的逻辑。这意味着我们需要大量使用JavaScript等必要条件。
本文使用64位`Firefox 63.0.3 for
Windows`来获取特定于二进制文件的详细信息，并将引用`Gecko`源代码和`HTML`的标准代码。
### 技术背景 - 自定义元素
作为“Web组件”API的一部分，“自定义元素”是HTML标准中的一个相对较新的补充部分。 简而言之，它提供了一种创建新类型HTML元素的方法。
它的具体文档可以在这里找到[here](https://w3c.github.io/webcomponents/spec/custom/)。
这是一个名为`extended-br`的元素扩展的基本自定义示例，其作用与常规`br`元素相同，其还可以打印一行数据用以记录操作行为：
    // Create a class for the element
    class ExtendedBR extends HTMLBRElement {
            constructor() {
                    // Always call super first in constructor
                    super();
                    console.log("Extended BR created");
            }
    }
    // Define the new element
    customElements.define("extended-br", ExtendedBR, {extends: "br"});
上面的示例使用“自定义内置元素”变体，该变体通过使用“is”属性进行实例化。
Firefox 63发行版（2018年10月23日）中引入了对Custom Elements的支持。
### 漏洞详情
`Firefox`在HTML树构建过程中创建自定义元素时会发生此错误。
在此过程中，引擎代码可以调用`JavaScript`回调以调用自定义元素定义的构造函数。
`JavaScript`调用点周围的引擎代码使用`C ++`对象但没有正确地保存对它的引用部分。
当引擎代码从`JavaScript`回调函数返回后，它会在内存中写入此`C ++`对象的成员变量。
然而，我们可以定义被调用的构造函数用来使文档加载中止，这意味着文档的活动解析器的中止，在内部导致活动解析器资源的破坏和解除分配，其中也包括前面提到的C
++对象。
发生这种情况时，系统将发生`“Write-After-Free”`内存损坏。
以下是用于创建HTML元素的HTML5 Parser代码中的相关部分：
    nsresult
    nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor* aBuilder,
                                  nsIContent** aScriptElement,
                                  bool* aInterrupted,
                                  bool* aStreamEnded)
    {
      switch (mOpCode) {
        ...
        case eTreeOpCreateHTMLElementNetwork:
        case eTreeOpCreateHTMLElementNotNetwork: {
          nsIContent** target = mOne.node;
          ...
          *target = CreateHTMLElement(name,
                                      attributes,
                                      mOpCode == eTreeOpCreateHTMLElementNetwork
                                        ? dom::FROM_PARSER_NETWORK
                                        : dom::FROM_PARSER_DOCUMENT_WRITE,
                                      nodeInfoManager,
                                      aBuilder,
                                      creator);
          return NS_OK;
        }
        ...
    }
    nsIContent*
    nsHtml5TreeOperation::CreateHTMLElement(
      nsAtom* aName,
      nsHtml5HtmlAttributes* aAttributes,
      mozilla::dom::FromParser aFromParser,
      nsNodeInfoManager* aNodeInfoManager,
      nsHtml5DocumentBuilder* aBuilder,
      mozilla::dom::HTMLContentCreatorFunction aCreator)
    {
      ...
      if (nsContentUtils::IsCustomElementsEnabled()) {
        ...
        if (isCustomElement && aFromParser != dom::FROM_PARSER_FRAGMENT) {
          ...
          definition = nsContentUtils::LookupCustomElementDefinition(
            document, nodeInfo->NameAtom(), nodeInfo->NamespaceID(), typeAtom);
          if (definition) {
            willExecuteScript = true;
          }
        }
      }
      if (willExecuteScript) { // This will cause custom element
                               // constructors to run
        ...
        nsCOMPtr newElement;
        NS_NewHTMLElement(getter_AddRefs(newElement),
                          nodeInfo.forget(),
                          aFromParser,
                          isAtom,
    definition);
在`NS_NewHTMLElement`内部，如果正在创建的元素是自定义元素，则将调用函数`CustomElementRegistry::Upgrade`来调用自定义元素的构造函数，并将控制传递给JavaScript。
在自定义元素构造函数完成运行并且`CreateHTMLElement()`将执行返回到`Perform()`之后，第13行完成其执行：`CreateHTMLElement()`的返回值被写入`target`指向的内存地址。
接下来，我将解释目标点的位置、设置位置信息并使用JavaScript代码来释放内存，以及将哪种类型的值写入释放的内存。
### 目标情况
我们可以在第11行看到目标：`nsIContent ** target = mOne.node`。  
这是`mOne.node`的代码内容：
    nsIContentHandle*
    nsHtml5TreeBuilder::createElement(int32_t aNamespace,
                                      nsAtom* aName,
                                      nsHtml5HtmlAttributes* aAttributes,
                                      nsIContentHandle* aIntendedParent,
                                      nsHtml5ContentCreatorFunction aCreator)
    {
      ...
        nsIContent* elem;
        if (aNamespace == kNameSpaceID_XHTML) {
          elem = nsHtml5TreeOperation::CreateHTMLElement(
            name,
            aAttributes,
            mozilla::dom::FROM_PARSER_FRAGMENT,
            nodeInfoManager,
            mBuilder,
            aCreator.html);
        }
      ...
      nsIContentHandle* content = AllocateContentHandle();
      ...
      treeOp->Init(aNamespace,
                   aName,
                   aAttributes,
                   content,
                   aIntendedParent,
                   !!mSpeculativeLoadStage,
                   aCreator);
    inline void Init(int32_t aNamespace,
                     nsAtom* aName,
                     nsHtml5HtmlAttributes* aAttributes,
                     nsIContentHandle* aTarget,
                     nsIContentHandle* aIntendedParent,
                     bool aFromNetwork,
                     nsHtml5ContentCreatorFunction aCreator)
    {
      ...
      mOne.node = static_cast(aTarget);
      ...
    }
所以target的值来自`AllocateContentHandle()`：
    nsIContentHandle*
    nsHtml5TreeBuilder::AllocateContentHandle()
    {
      ...
      return &mHandles[mHandlesUsed++];
    }
这是在`nsHtml5TreeBuilder`的构造函数初始化列表中初始化`mHandles`的方法：
    nsHtml5TreeBuilder::nsHtml5TreeBuilder(nsAHtml5TreeOpSink* aOpSink,
                                           nsHtml5TreeOpStage* aStage)
      ...
      , mHandles(new nsIContent*[NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH])
      ...
因此，当创建HTML5解析器的树构建器对象时，首先初始化一个能够容纳`NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH`指针的数组，并且每次调用`AllocateContentHandle()`时，它都会返回数组中的下一个未使用的槽，从索引数字0开始。
在64位系统上，`mHandles`的分配大小为`NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH *
sizeof(nsIContent*) == 512 * 8 == 4096 (0x1000)`。
### 如何释放mHandles？
`mHandles`是类`nsHtml5TreeBuilder`的成员变量。