In this section, we ﬁrst present an instantiation based on
the Boneh–Boyen short signature [4]. We next show that
a special type of GPoS instantiations can be further opti-
mized with a polynomial commitment technique [12]. The
signature scheme St is the same as in Section 3.2. Let
H0 : {0, 1}∗ → Z∗
4.1 A CDH-based Instantiation
Setup(1λ): The group manager picks a bilinear pairing ˆe :
G× G → GT , where G = (cid:104)g(cid:105) and GT are cyclic groups
of prime order p. Choose a random value γ ∈R Z∗
p and
computes  = gγ. Let H : {0, 1}∗ → Z∗
p be a collision-
resistant hash function. The group public key is
gpk = (ˆe, G, GT , g, , H)
and the group secret key is gsk = γ.
KeyExt(gpk, gsk, id(cid:96)): For each member id(cid:96) (1 ≤ (cid:96) ≤ n) in
the group, the group manager computes a secret key
sk(cid:96) = g
1
γ+H(id(cid:96) ) .
Once receiving sk(cid:96), the member id(cid:96) can validate it by
checking whether
(cid:16)
sk(cid:96),  · gH(id(cid:96))(cid:17) ?= ˆe(g, g)
ˆe
holds.
PrFile(gpk, sk(cid:96), F ): The member id(cid:96) splits the ﬁle F into
blocks as shown in Equation (1). Choose a random
ﬁle identiﬁer f id ∈R Z∗
p and (s + 1) random values
α0, α1,··· , αs ∈R Z∗
p, and compute
uj = gαj ∈ G
for each 0 ≤ j ≤ s. Then, generate the ﬁle tag τ in the
same way as in Section 3.2 and send it to the group
manager.
For each ﬁle block Fi (1 ≤ i ≤ r), do the follows:
• Compute
θi = α0H0(f id (cid:107) i) +
s(cid:88)
j=1
αjfi,j ∈ Zp
• Generate meta-data as
σi ← skθi
(cid:96) ∈ G
Then, send the processed ﬁle
∗
= {(Fi, σi) : 1 ≤ i ≤ r}
F
to the cloud storage server, and deletes the random
values α0, α1,··· , αs, secret key tsk and the ﬁle locally.
Chall(gpk, τ ): The auditor runs the algorithm in two steps.
1. The same to Section 3.2 for validating the ﬁle tag.
If τ is invalid, output “0” and terminate.
2. Pick a random subset Q ⊆ [1, r] and choose a
p for each i ∈ Q. Send the
random value βi ∈R Z∗
challenge
C = (f id, Q,{βi : i ∈ Q})
to the cloud storage server.
PrfGen(gpk, F ∗, C): Compute the aggregated ﬁle block (cid:126)µ =
(µ1,··· , µs) as follows
(cid:88)
i∈Q
µj =
βifi,j mod p for each j ∈ [1, s],
and calculate the aggregated meta-data σ as shown in
Equation (2) but over G. Return the proof R = ((cid:126)µ, σ)
to the auditor.
Verify(gpk, τ, C, R): If R cannot be parsed, output “0” and
terminates. Otherwise, check whether the following
equality holds
(cid:16)
σ,  · gH(id(cid:96))(cid:17) ?= ˆe
ˆe
(cid:32)
(cid:80)
u
0
i∈Q βiH0(f id(cid:107)i)
· s(cid:89)
(cid:33)
uµj
j , g
.
If so, output “1”; otherwise, output “0”.
j=1
Theorem 4. The proposed GPoS instantiation is correct.
80Proof. Observe the following equalities
and
(cid:16)
ˆe
1
g
i∈Q
i∈Q
σβi
i
γ+H(id(cid:96) )
, gγ · gH(id(cid:96))
σ,  · gH(id(cid:96))(cid:17)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:32)
(cid:80)
(cid:33)
(cid:16)
(cid:17)θiβi
gβi(α0H0(f id(cid:107)i)+(cid:80)s
gβiα0H0(f id(cid:107)i) ·(cid:89)
gβiα0H0(f id(cid:107)i) · s(cid:89)
· s(cid:89)
i∈Q βiH0(f id(cid:107)i)
i∈Q
i∈Q
i∈Q
j=1
i∈Q
= ˆe
= ˆe
= ˆe
= ˆe
= ˆe
= ˆe
u
0
(cid:33)
(cid:33)
, gγ · gH(id(cid:96))
j=1 αj fi,j ), g
(cid:33)
(cid:33)
s(cid:89)
(cid:80)
j=1
u
j
gβiαj fi,j , g
i∈Q βifi,j
, g
(cid:33)
uµj
j , g
.
Hence, the correctness follows.
j=1
According to Theorem 2 and Theorem 3, we have the
following corollaries.
Corollary 1. Suppose that the signature scheme St for
ﬁle tags is existentially unforgeable. The proposed GPoS in-
stantiation is sound for any PPT adversary A if the CDH
assumption holds.
Corollary 2. The proposed GPoS instantiation is own-
ership privacy-preserving against the cloud storage server.
For easiness to compare with the improved instantiation
as shown in next section, the above instantiation is present-
ed over symmetric bilinear groups. In fact, it can also be
implemented over asymmetric bilinear groups, that is, by
setting the group private key sk(cid:96), the public parameters ui
(0 ≤ i ≤ s) and the meta-data {σi : 1 ≤ i ≤ r} in G1, while
deﬁning  in G2.
4.2 Optimized Instantiation
We proceed to optimize the above proposed GPoS instan-
tiation by the leveraging polynomial commitment technique
[12]. Our optimization approach is universal in the sense
that the communication overheads for integrity auditing in
a GPoS scheme may be further reduced if the PoS schemes
are built over symmetric bilinear groups. At a high level,
similarly to [24, 27], the public parameters uj-es are gener-
ated using a single random element α, that is, they are as-
sociated with diﬀerent powers of α. Furthermore, when an
outsourced ﬁle is audited, a polynomial commitment with
respect to the challenged blocks is produced by the cloud
storage server and then validated by the auditor.
Setup(1λ): The same to Section 4.1.
KeyExt(gpk, gsk, id(cid:96)): The same to Section 4.1.
PrFile(gpk, sk(cid:96), F ): The member id(cid:96) splits the ﬁle F into
blocks as shown in Equation (1). Choose a random ﬁle
identiﬁer f id ∈R Z∗
p and two random values α0, α ∈R
Z∗
p, and compute
υ = gα0 ∈ G
uj = gαj ∈ G
for each 0 ≤ j ≤ s−1. Generate the ﬁle tag τ and sends
it to the group manager in the same way as Section 3.2
while τ0 denotes a concatenation string of
(gpk, id(cid:96), υ, u0, u1,··· , us−1, f id, r)
For each ﬁle block Fi (1 ≤ i ≤ r), do the follows:
• Compute
θi = α0H0(f id (cid:107) i) + φ(cid:126)πi (α) mod p
where
φ(cid:126)πi (α) =
s−1(cid:88)
fi,jαj mod p
• Generate the meta-data as σi ← skθi
(cid:96) ∈ G.
j=0
Then, send the processed ﬁle
∗
= {(Fi, σi) : 1 ≤ i ≤ r}
F
to the cloud storage server and locally discards the
random values α0, α, secret key tsk and the ﬁle infor-
mation.
Chall(gpk, τ ): The auditor runs the algorithm as follows.
1. The same to Section 3.2 for validating the ﬁle tag.
2. Pick a random subset Q ⊆ [1, r] and chooses two
If τ is invalid, outputs “0” and terminates.
random values z, δ ∈R Z∗
p. Sends the challenge
C = (f id, Q, z, δ)
to the cloud storage server.
PrfGen(gpk, F ∗, C): For each i ∈ Q, the cloud storage serv-
er calculates a value βi = δi mod p. Generate the
aggregated ﬁle block
(cid:126)µ = (µ0, µ1,··· , µs−1)
by computing
(cid:88)
i∈Q
µj =
βifi,j mod p for each j ∈ [0, s − 1],
and calculate the aggregated meta-data σ as shown in
Equation (2) but over G. Then, deﬁne a polynomial
s−1(cid:88)
j=0
φ(cid:126)µ(x) =
µjxj mod p
and calculates κ = φ(cid:126)µ(z) mod p. Compute the fol-
lowing polynomial
φ(cid:126)µ(x) − φ(cid:126)µ(z)
x − z
using polynomial long division. Let
ψ(cid:126)ω(x) =
(cid:126)ω = (ω0, ω1,··· , ωs−2)
be the coeﬃcient vector of ψ(cid:126)ω(x). Compute
s−2(cid:89)
gαj(cid:17)ωj
(cid:16)
.
ζ = gψ(cid:126)ω (α) =
Return the proof R = (ζ, κ, σ) to the auditor.
j=0
81Verify(gpk, τ, C, R): If R cannot be parsed, output “0” and
σ,  · gH(id(cid:96))(cid:17) ?=ˆe
terminate. Otherwise, check the following equality
−z, g
(cid:80)
i∈Q δiH0(f id(cid:107)i) · gκ · ζ
(cid:17)
(cid:16)
(cid:16)
υ
ˆe
According to Theorem 3, we have the following corollary.
Corollary 3. The optimized GPoS instantiation is own-
ership privacy-preserving against the cloud storage server.
(4)
5. PERFORMANCE EVALUATION
· ˆe(ζ, u1).
If so, output “1”; otherwise, output “0”.
Theorem 5. The optimized GPoS instantiation is cor-
rect.
Proof. Since
(cid:33)
(cid:33)
, gγ · gH(id(cid:96))
(cid:33)
gβi(α0H0(f id(cid:107)i)+φ(cid:126)πi
(α)), g
(cid:16)
ˆe
= ˆe
= ˆe
= ˆe
= ˆe
= ˆe
= ˆe
1
g
i∈Q
i∈Q
i∈Q
σβi
i
γ+H(id(cid:96) )
, gγ · gH(id(cid:96))
(cid:33)
(cid:17)θiβi
σ,  · gH(id(cid:96))(cid:17)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:16)
(cid:32)(cid:89)
(cid:32)(cid:89)
(cid:16)
(cid:80)
i∈Q
(cid:16)
i∈Q βiH0(f id(cid:107)i), g
(cid:80)
i∈Q δiH0(f id(cid:107)i), g
ˆe(cid:0)gκ · ζ
(cid:16)
(cid:16)
(cid:16)
(cid:16)
υβiH0(f id(cid:107)i) ·(cid:89)
(cid:17)
(cid:17)
−z, g(cid:1) ˆe(ζ, u1)
(cid:17)
i∈Q
= ˆe
= ˆe
= ˆe
υ
υ
= ˆe
gφ(cid:126)µ(α), g
,
−zψ(cid:126)ω (α), g
gφ(cid:126)µ(z)g
ˆe
g(α−z)ψ(cid:126)ω (α)+φ(cid:126)µ(z), g
gφ(cid:126)µ(α)−φ(cid:126)µ(z)+φ(cid:126)µ(z), g
(cid:16)
(cid:16)
ˆe
ˆe
(cid:17)
(cid:17)
(α), g