title:Zero Knowledge Static Program Analysis
author:Zhiyong Fang and
David Darais and
Joseph P. Near and
Yupeng Zhang
Zero Knowledge Static Program Analysis
Zhiyong Fang
David Darais‚àó
Texas A&M University
PI:EMAIL
Joseph P. Near
University of Vermont
PI:EMAIL
Galois, Inc.
PI:EMAIL
Yupeng Zhang
Texas A&M University
PI:EMAIL
ABSTRACT
Static program analysis tools can automatically prove many useful
properties of programs. However, using static analysis to prove to a
third party that a program satisfies a property requires revealing the
program‚Äôs source code. We introduce the concept of zero-knowledge
static analysis, in which the prover constructs a zero-knowledge
proof about the outcome of the static analysis without revealing
the program. We present novel zero-knowledge proof schemes for
intra- and inter-procedural abstract interpretation. Our schemes
are significantly more efficient than the naive translation of the cor-
responding static analysis algorithms using existing schemes. We
evaluate our approach empirically on real and synthetic programs;
with a pairing-based zero knowledge proof scheme as the backend,
we are able to prove the control flow analysis on a 2,000-line pro-
gram in 1,738s. The proof is only 128 bytes and the verification time
is 1.4ms. With a transparent zero knowledge proof scheme based
on discrete-log, we generate the proof for the tainting analysis on a
12,800-line program in 406 seconds, the proof size is 282 kilobytes,
and the verification time is 66 seconds.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Privacy-preserving protocols.
KEYWORDS
Zero knowledge proofs; Static program analysis
ACM Reference Format:
Zhiyong Fang, David Darais, Joseph P. Near, and Yupeng Zhang. 2021. Zero
Knowledge Static Program Analysis. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ‚Äô21), November
15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
17 pages. https://doi.org/10.1145/3460120.3484795
‚àóWork done in part as a consultant for Stealth Software, Inc.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484795
1 INTRODUCTION
Static program analysis tools are designed to automatically prove
properties of programs. Abstract interpretation [28‚Äì33] is a widely-
used framework for static program analysis; it has been used to
verify complex properties in real programs [26, 34, 36, 40, 45, 55,
59, 63‚Äì65]. For example, Astr√©e [34] has been used to verify critical
software for aircraft and spacecraft.
Static analysis tools operate on a program‚Äôs source code, so prov-
ing to a third party that a program has a specific property via static
analysis requires revealing its source code to the third party. This
requirement limits the application of static analysis tools in set-
tings that involve proprietary or otherwise secret algorithms. For
example, a credit-scoring company might develop a proprietary
scoring algorithm, and want to demonstrate that the algorithm does
not discriminate on the basis of race, gender, or other attributes
protected by law.1 A taint analysis, easily implemented via abstract
interpretation, might be used to demonstrate that the algorithm ig-
nores these factors when generating a score‚Äîbut the results cannot
be checked by a third party unless the source code is made public.
This paper introduces zero-knowledge static analysis, an approach
that allows an untrusted party to prove that a program has a prop-
erty without revealing the program. Recent privacy regulations in-
clude a number of important requirements on algorithms for pro-
cessing data; with zero-knowledge static analysis, organizations
will be able to prove compliance of their algorithms without reveal-
ing the algorithms. For example, a taint analysis can be used to prove
that consent is obtained before processing data or pseudonyms are
used in place of identifying information (to comply with GDPR [5]
and COPPA [3]), that Personal Health Information is redacted (to
comply with HIPAA [6]), and that exercise of privacy rights does
not result in discrimination (to comply with CCPA [2]). A control-
flow analysis can be used to prove that the program produces proper
audit logs and that pseudonymization is performed correctly (to
comply with GDPR). Each of these examples represents a large
class of properties that are provable with zero-knowledge static
analysis for all possible executions of the secret program. In addition
to demonstrating compliance to regulators, organizations can use
the proofs to build trust with the public.
With zero-knowledge static analysis, we envision the applica-
tions in practice with the following three steps:
(1) The owner of the program commits to a program ùëÉ and posts
the commitment to the public.
1In the US, the Equal Credit Opportunity Act (15 U.S.C. ¬ß¬ß1691-1691f)
Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2951(2) The owner can then prove some properties of ùëÉ via our
zero-knowledge static analysis scheme (e.g. it does not dis-
criminate) without revealing the source code of ùëÉ.
(3) Finally, using schemes of zero-knowledge program execu-
tion [1, 16, 22], the owner can further proves that executing
the same program ùëÉ on some (public or previously commit-
ted) input produces a particular output.
In addition to the discrimination example, other useful applica-
tions of zero knowledge static analysis include proving the worst
case execution bounds of a program, absence of runtime exceptions,
absence of security vulnerabilities related to unsafe memory ac-
cess (e.g., Heartbleed), or absence of security vulnerabilities due to
timing channels (e.g., Spectre [51] and Meltdown [52]).
Zero-knowledge static analysis can also be used to prove the pos-
sible presence of a bug in a program. There are two ways to demon-
strate that a program is likely to have a bug in zero-knowledge:
(1) provide a secret input that leads to unexpected behaviors of a
program [43], and (2) show that a reasonably precise static analysis
for proving the absence of bugs fails. In the first approach, a coun-
terexample can guarantee the presence of a bug, but it is not always
easy or possible to find such an input. For example, if a program
does not comply with differential privacy [35], one cannot find
a counterexample to prove it. Instead, our technique can be used
in this case to demonstrate that the program is very likely to not
have the property of interest through static analysis, where a more
precise analysis makes for stronger evidence than an imprecise one.
Static analysis algorithms are not easily translated into ZKP sys-
tems. Recent work in ZKP has resulted in many efficient systems
capable of proving arbitrary functions modeled as arithmetic or
boolean circuits. Unfortunately, static analysis is typically carried
out using stateful algorithms, which are not easily translated di-
rectly into circuits. Alternatively, we could translate static analysis
algorithms into circuits using existing RAM-based zero-knowledge
proof schemes [14, 16, 21, 22, 66, 73] that model the public function
as a program in the random-access-memory (RAM) model. How-
ever, they usually introduce a high overhead for each instruction
in the program (see related work for more details).
1.1 Our Contributions
In this paper, we initiate the study of zero-knowledge static analysis
and propose several efficient schemes based on abstract interpreta-
tion and worklist algorithms. In particular, our contributions are:
‚Ä¢ Zero-knowledge intra-procedure analysis. First, we intro-
duce a simple imperative programming language with assign-
ments, branches, loops and memory operations. We propose an
efficient zero-knowledge proof scheme for the classic worklist
algorithm for abstract interpretations on programs written in
our programming language. The prover time of our scheme is
ùëÇ(ùëá ¬∑ ùë£ + ùëá logùëá) where ùë£ is the number of variables in the pro-
gram and ùëá is the number of iterations in the worklist algorithm.
This is asymptotically optimal up to a logarithmic factor com-
pared to the plain worklist algorithm without zero-knowledge.
We apply several important techniques in the literature of RAM-
based ZKP such as memory checking and set relationships to
construct building blocks of our scheme efficiently.
‚Ä¢ Zero-knowledge inter-procedure analysis. Second, we ex-
tend our scheme to support inter-procedure analysis with func-
tion calls. To address new challenges of loops with dynamic sizes,
we efficiently realize linked-list operations as a circuit, and apply
techniques of loop merge from existing work [66]. The prover
time of our zero-knowledge inter-procedure analysis remains
ùëÇ(ùëá ¬∑ ùë£ + ùëá logùëá), where ùë£ now denotes the maximum number
of variables in a function.
‚Ä¢ Implementation and evaluations. Finally, we implement our
zero-knowledge abstract interpretation schemes and evaluate
their performance on both real and synthetic programs. As shown
in the experiments, we are able to prove the result of the tainting
analysis on a program with 12,800 lines of code. It only takes 406s
to generate the proof. The proof size is 282KB and the verifier
time is 66s. With a different backend in [42], we are able to prove
the control flow analysis on a 2,000-line program in 1,738 s, where
the proof is only 128 bytes and the verification time is only 1.4ms
1.2 Related Work
Static analysis and abstract interpretation. Static program anal-
ysis tools are typically classified as sound or unsound. Sound tools
are capable of proving that a program does not contain bugs; un-
sound tools typically attempt to find as many bugs as possible, but
provide no guarantees on the absolute presence or absence of bugs
(i.e., there may be both false positives and false negatives). Unsound
tools include syntactic bug finders like Lint and FindBugs.
The class of sound static analyses includes data flow analyses,
(sound) symbolic execution techniques, abstract interpretation, the-
orem proving, and others. Data flow analyses [46‚Äì48] are often
used in compilers, as part of optimizations to produce more effi-
cient code. Symbolic execution [50] executes the target program
with symbolic input (rather than concrete values), and solves con-
straints over those symbols whenever conditionals are encountered.
Symbolic execution is typically used to determine whether or not
it is possible to reach a particular state in the program. Theorem
proving techniques often involve manual proof development by the
programmer, aided by an automated proof assistant [38, 44].
In this work, we focus on a static analysis approach called ab-
stract interpretation [28‚Äì33], which is widely used as a foundational
framework for both designing program analysis algorithms and
proving their soundness. Abstract interpretation-based tools have
been used successfully to verify the absence of runtime exceptions
in C, C++ and Java programs [34, 59, 65], verify the absence of buffer
overruns in C programs [45], verify tight bounds for worst-case
execution in real-time systems [36], verify the absence of floating
point rounding errors in C and assembly programs [40], verify ter-
mination and liveness properties of C programs [26], and compute
control flow analysis of higher order functional programs [55, 63]‚Äî
among hundreds of other applications. In particular, the Astr√©e
tool [34] is well known for its industrial applications, such as its
use in verifying the flight control software of the Airbus A340 and
A380 fly-by-wire systems, and the automatic docking software of
the Jules Vernes ATV, the first robotic cargo spacecraft used to
transport supplies to the International Space Station. We refer the
reader to two canonical references [28, 56] for further technical
background on abstract interpretation.
Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2952Zero-knowledge proofs. The notion of zero-knowledge proofs
was first proposed in the early work of Goldwasser et al. in [39]. The-
oretical constructions based on probabilistically checkable proofs
were introduced in the seminal work of Kilian [49] and Micali [54].
In recent years there is significant progress in constructing effi-
cient ZKP protocols that can be realized in practice. There are
ZKP schemes based on bilinear pairing [17, 25, 27, 37, 42, 53, 57],
discrete-log [12, 19, 23, 41], hashing [20], interactive oracle proofs
(IOP) [11, 13, 15, 25, 70] and interactive proofs [61, 67, 69, 71, 72].
Their security relies on different assumptions and models, and they
provide trade-offs between prover time and proof size. In our con-
struction, we choose to use [42] and [61] as our backend, but our
frontend is also compatible with other circuit-based ZKP schemes.
Most ZKP schemes model the computations as arithmetic cir-
cuits, while the abstract interpretation algorithms are naturally
in the RAM model with dynamic loops, branches and memory
operations. Several papers [14, 16, 21, 22, 66, 73] proposed ZKP
schemes for RAM programs. These schemes propose universal
RAM-to-circuit reductions to compile any RAM program to arith-
metic circuits. However, the heavy machinery introduces a high
overhead on the size of the circuit. E.g., the cost is around 4000 gates
per RAM instruction in the reduction of [16]. Instead, we utilize
several key techniques in these schemes, without going through
the full RAM-to-circuit reductions. Among these RAM-based ZKP
schemes, the scheme in [66] first compiles the RAM program to a