## CPU 所需要的硬件电路那么，要想搭建出来整个 CPU，我们需要在数字电路层面，实现这样一些功能。首先，自然是我们之前已经讲解过的 ALU了，它实际就是一个没有状态的，根据输入计算输出结果的第一个电路。第二，我们需要有一个能够进行状态读写的电路元件，也就是我们的寄存器。我们需要有一个电路，能够存储到上一次的计算结果。这个计算结果并不一定要立刻拿到电路的下游去使用，但是可以在需要的时候拿出来用。常见的能够进行状态读写的电路，就有锁存器（Latch），以及我们后面要讲的D 触发器（Data/Delay Flip-flop）的电路。第三，我们需要有一个"自动"的电路，按照固定的周期，不停地实现 PC寄存器自增，自动地去执行"Fetch - Decode -Execute"的步骤。我们的程序执行，并不是靠人去拨动开关来执行指令的。我们希望有一个"自动"的电路，不停地去一条条执行指令。我们看似写了各种复杂的高级程序进行各种函数调用、条件跳转。其实只是修改PC 寄存器里面的地址。PC寄存器里面的地址一修改，计算机就可以加载一条指令新指令，往下运行。实际上，PC寄存器还有一个名字，就叫作程序计数器。顾名思义，就是随着时间变化，不断去数数。数的数字变大了，就去执行一条新指令。所以，我们需要的就是一个自动数数的电路。第四，我们需要有一个"译码"的电路。无论是对于指令进行decode，还是对于拿到的内存地址去获取对应的数据或者指令，我们都需要通过一个电路找到对应的数据。这个对应的自然就是"译码器"的电路了。好了，现在我们把这四类电路，通过各种方式组合在一起，就能最终组成功能强大的CPU了。但是，要实现这四种电路中的中间两种，我们还需要时钟电路的配合。下一节，我们一起来看一看，这些基础的电路功能是怎么实现的，以及怎么把这些电路组合起来变成一个CPU。
## 总结延伸好了，到这里，我们已经把 CPU运转需要的数据通路和控制器介绍完了，也找出了需要完成这些功能，需要的 4种基本电路。它们分别是，ALU 这样的组合逻辑电路、用来存储数据的锁存器和 D触发器电路、用来实现 PC寄存器的计数器电路，以及用来解码和寻址的译码器电路。虽然 CPU已经是由几十亿个晶体管组成的及其复杂的电路，但是它仍然是由这样一个个基本功能的电路组成的。只要搞清楚这些电路的运作原理，你自然也就弄明白了CPU 的工作原理。
## 推荐阅读如果想要了解数据通路，可以参看《计算机组成与设计 硬件软件接口》的第 5版的 4.1 到 4.4节。专栏里的内容是从更高一层的抽象逻辑来解释这些问题，而教科书里包含了更多电路的技术细节。这两者结合起来学习，能够帮助你更深入地去理解数据通路。
## 课后思考这一讲，我们说 CPU好像一个永不停歇的机器，一直在不停地读取下一条指令去运行。那为什么 CPU还会有满载运行和 Idle闲置的状态呢？请你自己搜索研究一下这是为什么，并在留言区写下你的思考和答案。欢迎你留言和我分享，你也可以把今天的文章分享给你的朋友，和他一起学习和进步。![](Images/79d06107d349635530fbf82aa8dfb625.png){savepage-src="https://static001.geekbang.org/resource/image/28/29/281ca28b90c8aa0aecbb5adc08394f29.jpg"}
# 18 \| 建立数据通路（中）：指令+运算=CPU上一讲，我们看到，要能够实现一个完整的 CPU功能，除了加法器这样的电路之外，我们还需要实现其他功能的电路。其中有一些电路，和我们实现过的加法器一样，只需要给定输入，就能得到固定的输出。这样的电路，我们称之为**组合逻辑电路**（CombinationalLogic Circuit）。但是，光有组合逻辑电路是不够的。你可以想一下，如果只有组合逻辑电路，我们的CPU会是什么样的？电路输入是确定的，对应的输出自然也就确定了。那么，我们要进行不同的计算，就要去手动拨动各种开关，来改变电路的开闭状态。这样的计算机，不像我们现在每天用的功能强大的电子计算机，反倒更像古老的计算尺或者机械计算机，干不了太复杂的工作，只能协助我们完成一些计算工作。这样，我们就需要引入第二类的电路，也就是**时序逻辑电路**（SequentialLogic Circuit）。时序逻辑电路可以帮我们解决这样几个问题。第一个就是**自动运行**的问题。时序电路接通之后可以不停地开启和关闭开关，进入一个自动运行的状态。这个使得我们上一讲说的，控制器不停地让PC 寄存器自增读取下一条指令成为可能。第二个是**存储**的问题。通过时序电路实现的触发器，能把计算结果存储在特定的电路里面，而不是像组合逻辑电路那样，一旦输入有任何改变，对应的输出也会改变。``{=html}第三个本质上解决了各个功能按照**时序协调**的问题。无论是程序实现的软件指令，还是到硬件层面，各种指令的操作都有先后的顺序要求。时序电路使得不同的事件按照时间顺序发生。
## 时钟信号的硬件实现想要实现时序逻辑电路，第一步我们需要的就是一个**时钟**。我在[第 3讲](https://time.geekbang.org/column/article/92215)说过，CPU的主频是由一个晶体振荡器来实现的，而这个晶体振荡器生成的电路信号，就是我们的时钟信号。实现这样一个电路，和我们之前讲的，通过电的磁效应产生开关信号的方法是一样的。只不过，这里的磁性开关，打开的不再是后续的线路，而是当前的线路。在下面这张图里你可以看到，我们在原先一般只放一个开关的信号输入端，放上了两个开关。一个开关A，一开始是断开的，由我们手工控制；另外一个开关B，一开始是合上的，磁性线圈对准一开始就合上的开关 B。于是，一旦我们合上开关 A，磁性线圈就会通电，产生磁性，开关 B就会从合上变成断开。一旦这个开关断开了，电路就中断了，磁性线圈就失去了磁性。于是，开关B又会弹回到合上的状态。这样一来，电路接通，线圈又有了磁性。我们的电路就会来回不断地在开启、关闭这两个状态中切换。![](Images/f742bdfcaa06870e9fdfec80fd7999d2.png){savepage-src="https://static001.geekbang.org/resource/image/57/c0/57684c12e7bf8ef429220405b0e3bdc0.jpeg"}```{=html}```开关 A 闭合（也就是相当于接通电路之后），开关 B就会不停地在开和关之间切换，生成对应的时钟信号]{.reference}```{=html}```这个不断切换的过程，对于下游电路来说，就是不断地产生新的 0 和 1这样的信号。如果你在下游的电路上接上一个灯泡，就会发现这个灯泡在亮和暗之间不停切换。这个按照固定的周期不断在0 和 1 之间切换的信号，就是我们的**时钟信号**（Clock Signal）。一般这样产生的时钟信号，就像你在各种教科书图例中看到的一样，是一个振荡产生的0、1 信号。![](Images/07d02e19c932a7e7af3c130215faee3c.png){savepage-src="https://static001.geekbang.org/resource/image/6d/93/6dd534a167513c865dfe1921ebb6ae93.jpeg"}```{=html}```时钟信号示意图]{.reference}```{=html}```这种电路，其实就相当于把电路的输出信号作为输入信号，再回到当前电路。这样的电路构造方式呢，我们叫作**反馈电路**（FeedbackCircuit）。接下来，我们还会看到更多的反馈电路。上面这个反馈电路一般可以用下面这个示意图来表示，其实就是一个输出结果接回输入的**反相器**（Inverter），也就是我们之前讲过的**非门**。![](Images/d53b4b1996fbd3671e000db77fd14b97.png){savepage-src="https://static001.geekbang.org/resource/image/d2/ca/d205493f6ff1aeba7a849575285bbeca.jpg"}```{=html}```通过一个反相器实现时钟信号]{.reference}```{=html}```