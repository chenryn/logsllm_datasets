"types"：[
{"name"："Greeting"，"type"："record"，"fields"：[
{"name"："message"，"type"："string"}]}，
{"name"："Curse"，"type"："error"，"fields"：[
{"name"："message"，"type"："string"}]}]，
"messages"：{//消息
"hello"：{
"doc"："Say hello."，
"request"：[{"name"："greeting"，"type"："Greeting"}]，
"response"："Greeting"，
"errors"：["Curse"]
}
}
}
16.1.6 协议传输格式
消息可以通过不同的传输机制进行传输，而传输中的消息则是一些字节序列，那么传输机制需要支持：
请求信息的传送。
对应响应信息的接收。
服务器会对客户机的请求信息发送响应信息，这种响应机制就是特定传输，例如在HTTP中，由于HTTP直接支持请求和响应，所以这种传输是透明的，但是利用同一套接字传输多种不同客户线程的时候需要用特定的标识来区分不同客户的信息。
传输可能是无状态的也可能是有状态的。在无状态传输中，是假定消息发送没有建立连接状态。而有状态传输则建立了连接，这个连接可以用来传输不同的消息。下面我们会在握手（handshake）部分中深入分析。
当用HTTP协议进行传输时，每个Avro消息交换都是一对HTTP请求/响应。一个Avro协议的所有消息共享一个HTTP服务器上的URL，正常的和错误的Avro消息都应该使用200（OK）响应代码。尽管Avro请求和响应是HTTP请求和响应的整个内容，但也可能使用大量的编码。HTTP请求和响应的内容类型应该指定为“avro/binary”而且请求应该使用POST方法生成。Avro使用HTTP作为无状态传输。
Avro消息经过框架处理后由一系列缓冲区组成，消息框架是消息和传输之间的一层，用来优化某些操作。经过框架处理后的消息数据格式如下（见图16-4）。
图 16-4 消息的封装
1）由一系列缓冲区组成，其中缓冲区包括：
4个字节，用大端字节（big-endian）方法
[1]
 表示的缓冲区长度。
缓冲区数据。
2）最后以空字节（zero-length）的缓冲区结束。
对于请求和响应消息格式，框架是透明的，任何消息可以表示为一个或多个缓冲。框架使得消息接收者更高效地从不同的渠道获取不同的缓冲，也使得开发者更高效地向不同的目的地存储不同的缓冲。特别是当复制大量二进制对象时，它可以减少读/写的次数。例如，如果RPC参数中包含一个MB大小的文件数据，那么一方面，数据可以从文件描述符直接复制到套接字上，另一方面，数据可以直接写入文件描述符而不需要进入用户空间。
一个简单且值得推荐的框架策略是：相对于那些大于正常输出缓冲区的单个二进制对象建立新的段。小的对象可以附加在缓冲区中，而较大的对象可以写入自己的缓冲区中。当读者需要读取大的对象时，可以直接处理整个缓冲区而不用复制。
使用握手的目的是确保客户机和服务器有对方的协议定义，这样客户机可以正确地对响应反序列化，且服务器可以正确地对请求反序列化。客户机和服务器都应在高速缓冲区中保留最近的协议，这样在大多数情况下，可以不需要额外的往返网络交换或重新获取全部传输协议就能完成握手。
在完成握手过程后执行RPC请求和响应，对于无状态的传输，在所有请求和响应之前都要进行握手，而对于有状态的传输，在成功响应之前，握手过程应该附加在请求和响应上，之后就不需要握手了。
握手过程使用以下记录模式，代码如下：
{
"type"："record"，
"name"："HandshakeRequest"，"namespace"："org.apache.avro.ipc"，
"fields"：[
{"name"："clientHash"，
"type"：{"type"："fixed"，"name"："MD5"，"size"：16}}，
{"name"："clientProtocol"，"type"：["null"，"string"]}，
{"name"："serverHash"，"type"："MD5"}，
{"name"："meta"，"type"：["null"，{"type"："map"，"values"："bytes"}]}
]
}
{
"type"："record"，
"name"："HandshakeResponse"，"namespace"："org.apache.avro.ipc"，
"fields"：[
{"name"："match"，
"type"：{"type"："enum"，"name"："HandshakeMatch"，
"symbols"：["BOTH"，"CLIENT"，"NONE"]}}，
{"name"："serverProtocol"，
"type"：["null"，"string"]}，
{"name"："serverHash"，
"type"：["null"，{"type"："fixed"，"name"："MD5"，"size"：16}]}，
{"name"："meta"，"type"：["null"，{"type"："map"，"values"："bytes"}]}
]
}
客户机在每个请求前面加上HandshakeRequest，表示包含客户机和服务器协议（clientHash！=null, clientProtocol=null, serverHash！=null）的哈希值，这里哈希值是JSON协议内容的128位MD5哈希值。如果客户机没有连接到给定的服务器，那么它发送的哈希值就是对服务器哈希值的猜测，否则它会发送之前从服务器中获得的哈希值。服务器响应的HandshakeResponse包含以下内容之一。
1）match=BOTH, serverProtocol=null, serverHash=null。如果客户机发送的是服务器协议的有效哈希值，并且服务器知道响应客户机哈希值的协议，那么请求是完整的，并且响应数据加在HandshakeResponse后面。
2）match=CLIENT, serverProtocol！=null, serverHash！=null。如果服务器事前知道客户机的协议，而客户机却发送了一个错误的服务器协议哈希值，那么请求是完整的并且响应数据加在HandshakeResponse之后。之后客户机必须使用返回的协议来处理响应，并且在高速缓存中保留这个协议和与服务器通信的哈希值。
3）match=NONE。如果服务器事先不知道客户机的协议，且服务器的协议哈希值是错误的，则serverHash和serverProtocol的值可能也为non-null。在这种情况下，客户机必须使用其协议文本（clientHash！=null, clientProtocol！=null, serverHash！=null）重新提交它的请求，并且服务器应该以正确的方式响应（match=BOTH, serverProtocol=null, serverHash=null）。另外meta字段是保留字段，用于以后增加握手的功能。
一次调用包括请求消息和与之对应的结果响应或错误消息。请求和响应包含可扩展的元数据，两种消息都会如上进行框架处理。调用请求的格式包括以下几种：
1）请求元数据，即类型值的映射。
2）消息名称，即一个Avro字符串。
3）消息参数，根据消息请求声明对参数进行序列化。
当消息声明为单向的并通过成功握手响应建立有状态的连接，那么不需要发送响应数据。否则需要发送，发送的调用请求的格式如下：
1）响应元数据，即类型字节的映射。
2）单字节的错误标志布尔值，然后，如果错误标志为假，消息响应，序列化每个消息响应模式。
如果错误标志为真，即为错误，序列化每个消息有效错误联合模式。
[1]
 存放字节顺序的方法，大端方式将高位存放在低地址，小端方式将高位存放在高地址。
16.1.7 模式解析
无论从RPC还是从文件中获得Avro数据，由于模式已知，读者都可以解析数据，但是那个模式可能并不完全是所期望的模式。例如，如果数据写入的软件版本与读者不同，那么记录中的一些字段可能会增加或减少，这一部分将详述如何解决这种模式区别。
我们称用来写数据的模式为写者的模式，应用程序期望的模式为读者的模式。两个模式之间是否匹配可按照下面的规则进行判断。
1）如果两个模式符合以下情况之一则为匹配，否则为不匹配，并产生错误：
模式都是数组且项类型匹配。
模式都是映射且值类型匹配。
模式都是枚举且名称匹配。
模式都是固定型且大小和名称匹配。
模式都是记录且名称相同。
模式是其中之一为联合。
两个模式拥有相同的原始类型。
写者的模式可以提升为读者的模式，如下所示：
·int可以转化为long、float或者double；
·long可以转化为float或double；
·float可以转化为double。
2）如果两个都是记录，则：
字段的顺序可以不同，因为字段是通过名称来匹配的。
有相同名称字段的模式记录是递归解析的。
如果写者的记录中包含读者记录中没有的字段，那么写者字段的值将被忽略。
如果读者记录模式中有一个为默认值的字段，并且写者的模式中没有相同名称的字段，那么读者的这个字段应该使用默认值。
如果读者记录模式中有一个没有默认值的字段，并且写者的模式中没有相同名称的字段，那么将发出错误信号。
3）如果两个都是枚举，且写者的符号并不在读者的枚举中，那么产生错误。
4）如果两个都是数组，解析算法递归应用于读者和写者的数组项的模式。
5）如果两个都是映射，解析算法递归应用于读者和写者映射值的模式。
6）如果两个都是联合，对读者联合中匹配写者联合模式的第一个模式进行递归解析，如果没有匹配的，将产生错误。
7）如果读者为联合，而写者的不是，对读者联合中匹配所选写者模式的第一个模式进行递归解析，如果没有匹配的，将产生错误。
8）如果写者的是联合，读者的不是，且读者的模式匹配所选写者的模式，那么对它进行递归解析，如果它们不匹配，将产生错误。
模式解析时将忽略模式中协议说明的"doc"字段，因此，序列化时模式中的"doc"部分将被抛弃。
16.2 Avro的C/C++实现
本节主要介绍Avro的C/C++实现，其中在Avro C库中已经嵌入Jansson（Jansson为编译和操控JSON数据的C语言库），这样可以将JSON解析成模式结构。目前C/C++实现支持：所有原始和复杂数据类型的二进制编码和解码；向Avro对象容器文件进行存储；模式解析、提升和映射；写入Avro数据的有效方式和无效方式，但C语言接口暂不支持远程过程调用RPC。
Avro C为所有模式和数据对象进行引用计数，当引用数降为零时便释放内存。例如，创建和释放一个字符串：
avro_datum_t string=avro_string（"This is my string"）；
……
avro_datum_decref（string）；
当考虑创建更加详细的模式和数据结构时就会有一点复杂，例如，创建带有字符串字段的记录：
avro_datum_t example=avro_record（"Example"）；
avro_datum_t solo_field=avro_string（"Example field value"）；
avro_record_set（example，"solo"，solo_field）；
……
avro_datum_decref（example）；
在这个例子中，solo_field数据没有被释放，因为它有两个引用：原来的引用和隐藏在记录Example中的引用。调用avro_datum_decref（example）只能将引用数减少为一。如果想结束solo_field模式，则需要avro_datum_decref（solo_field）来完全删除solo_field数据并释放。
一些数据类型是可以“包装”和“给予”的，这可以让C程序员自由地决定谁负责内存的分配回收。以字符串为例，建立一个字符串数据有三种方式：
avro_datum_t avro_string（const char*str）；
avro_datum_t avro_wrapstring（const char*str）；
avro_datum_t avro_givestring（const char*str）；
如果使用avro_string，那么Avro C会复制字符串并且当不再引用时释放它。在有些情况下，特别是当处理大量数据时要避免这种内存复制，这时需要使用avro_wrapstring和avro_givestring。如果使用avro_wrapstring，那么Avro C不做任何内存处理，它只保存指向数据的指针，这时需要自己来释放字符串。需要注意的是，当使用avro_wrapstring时，在用avro_datum_decref（）取消引用数据前不要释放字符串。如果使用avro_givestring，那么Avro C在数据取消引用之后会释放字符串，从某种程度上说，avro_givestring将释放字符串的“责任”给了Avro C。需要注意的是，如果没有使用如malloc或strdup分配堆给字符串，则不要把“责任”给Avro C。例如，不能这样做：
avro_datum_t bad_idea=avro_givestring（"This isn't allocated on the heap"）；
写入数据时可以使用下面的函数：
int avro_write_data（avro_writer_t writer，
avro_schema_t writers_schema, avro_datum_t datum）；
如果省略writers_schema值，那么数据在发送给写数据的函数前必须检验数据格式的正确性。如果已经确定数据是正确的，那么可以设置writers_schema为NULL，这时Avro C不会检查格式。需要注意的是，写入Avro文件对象容器的数据总是要进行验证。
下面介绍一个简单例子，例子中建立了学生信息的数据库，并向数据库中读写记录：
/*student.c*/
#include＜avro.h＞
#include＜inttypes.h＞
#include＜stdio.h＞
#include＜stdlib.h＞
#include＜unistd.h＞
avro_schema_t student_schema；
/*id用于添加记录时为学生建立学号*/
int64_t id=0；
/*定义学生模式，拥有字段学号、姓名、学院、电话和年龄*/
#define STUDENT_SCHEMA\
"{\"type\"：\"record\"，\
\"name\"：\"Student\"，\
\"fields\"：[\
{\"name\"：\"SID\"，\"type\"：\"long\"}，\
{\"name\"：\"Name\"，\"type\"：\"string\"}，\
{\"name\"：\"Dept\"，\"type\"：\"string\"}，\
{\"name\"：\"Phone\"，\"type\"：\"string\"}，\
{\"name\"：\"Age\"，\"type\"：\"int\"}]}"