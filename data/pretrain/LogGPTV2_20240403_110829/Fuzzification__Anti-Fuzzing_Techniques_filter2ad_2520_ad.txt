10k
8k
6k
4k
2k
0k
35k
30k
25k
20k
15k
10k
5k
0k
(b) libpng
8 16 24 32 40 48 56 64 72
(f) objdump
8 16 24 32 40 48 56 64 72
15k
12k
9k
6k
3k
0k
15k
12k
9k
6k
3k
0k
(c) libtiff
8 16 24 32 40 48 56 64 72
(g) nm
8 16 24 32 40 48 56 64 72
Time (hours)
AntiHybrid
BranchTrap
Time (hours)
SpeedBump
(d) pcre2
8 16 24 32 40 48 56 64 72
(h) objcopy
8 16 24 32 40 48 56 64 72
Time (hours)
30k
25k
20k
15k
10k
5k
0k
30k
25k
20k
15k
10k
5k
0k
All
Figure 9: Paths discovered by AFL-QEMU from real-world programs. Each program is compiled with five settings: original (no protection),
SpeedBump, BranchTrap, AntiHybrid, and all protections. We fuzz them with AFL-QEMU for three days.
Category
SpeedBump
BranchTrap
AntiHybrid
Overall
Option
max_overhead
delay_length
include_invalid
include_non_exec
max_overhead
bitmap_saturation
max_overhead
include_non_exec
Design Choice
2%
10ms to 300ms
True
True (5%)
2%
40% of 64k bitmap
1%
True (5%)
max_overhead
5%
Table 4: Our configuration values for the evaluation.
we used identical FUZZIFICATION techniques and configura-
tions when we conducted code instrumentation and binary
rewriting for each target application. Last, we pre-generated
FUZZIFICATION primitives (e.g., SpeedBump codes for 10ms
to 300ms and BranchTrap codes with deterministic branches),
and used the primitives for all protections. Note that devel-
opers should use different primitives for the actual releasing
binary to avoid code pattern matching analysis.
Target applications. We select the LAVA-M data set [17]
and nine real-world applications as the fuzzing targets,
which are commonly used to evaluate the performance of
fuzzers [11, 19, 64, 52]. The nine real-world programs in-
clude four applications from the Google fuzzer test-suite [24],
four programs from the binutils [20] (shown in Table 2), and
the PDF reader MuPDF. We perform two sets of experiments on
these binaries, summarized in Table 3. First, we fuzz nine real-
world programs with three fuzzers (all except VUzzer2) to
measure the impact of FUZZIFICATION on finding code paths.
Specifically, we compile eight real-world programs (all except
MuPDF) with five different settings: original (no protection),
2Due to time limit, we only use VUzzer 32 to finding bugs from LAVA-M
programs. We plan to do other evaluations in the future.
SpeedBump, BranchTrap, AntiHybrid, and a combination of
three techniques (full protection). We compile MuPDF with
two settings for simplicity: no protection and full protection.
Second, we use three fuzzers to fuzz four binutils programs
and all four fuzzers to fuzz LAVA-M programs to evaluate the
impact of FUZZIFICATION on unique bug finding. All fuzzed
programs in this step are compiled in two versions: with no
protection and with full protection. We compiled the LAVA-
M program to a 32bit version in order to be comparable with
previous research. Table 4 shows the configuration of each
technique used in our compilation. We changed the fuzzer’s
timeout if the binaries cannot start with the default timeout
(e.g., 1000 ms for AFL-QEMU).
Evaluation metric. We use two metrics to measure the
effectiveness of FUZZIFICATION: code coverage in terms of
discovered real paths, and unique crashes. Real path is the
execution path shown in the original program, excluding the
fake ones introduced by BranchTrap. We further excluded
the real paths triggered by seed inputs so that we can focus
on the ones discovered by fuzzers. Unique crash is measured
as the input that can make the program crash with a distinct
real path. We filter out duplicate crashes that are defined in
AFL [71] and are widely used by other fuzzers [11, 36].
6.1 Reducing Code Coverage
6.1.1
Impact on Normal Fuzzers
We measure the impact of FUZZIFICATION on reducing the
number of real paths against AFL-QEMU and HonggFuzz-
Intel-PT. Figure 9 shows the 72-hour fuzzing result from AFL-
QEMU on different programs with five protection settings.
The result of HonggFuzz-Intel-PT is similar and we leave it
in Appendix A.
In summary, with all three techniques, FUZZIFICATION
can reduce discovered real paths by 76% to AFL, and by
1922    28th USENIX Security Symposium
USENIX Association
18k
15k
12k
9k
6k
3k
0k
60k
50k
40k
30k
20k
10k
0k
s
h
t
a
p
l
a
e
r
#
(a) libjpeg
8 16 24 32 40 48 56 64 72
(e) readelf
8 16 24 32 40 48 56 64 72
Time (hours)
Original
12k
9k
6k
3k
0k
40k
30k
20k
10k
0k
(b) libpng
8 16 24 32 40 48 56 64 72
(f) objdump
8 16 24 32 40 48 56 64 72
20k
16k
12k
8k
4k
0k
16k
12k
8k
4k
0k
(c) libtiff
8 16 24 32 40 48 56 64 72
(g) nm
8 16 24 32 40 48 56 64 72
Time (hours)
AntiHybrid
BranchTrap
Time (hours)
SpeedBump
(d) pcre2
8 16 24 32 40 48 56 64 72
(h) objcopy
8 16 24 32 40 48 56 64 72
Time (hours)
25k
20k
15k
10k
5k
0k
50k
40k
30k
20k
10k
0k
All
Figure 10: Paths discovered by QSym from real-world programs. Each program is compiled with the same five settings as in Figure 9. We
fuzz these programs for three days, using QSym as the symbolic execution engine and AFL-QEMU as the native fuzzer.
67% to HonggFuzz, on average. For AFL, the reduction
rate varies from 14% to 97% and FUZZIFICATION reduces
over 90% of path discovery for libtiff, pcre2 and readelf.
For HonggFuzz, the reduction rate is between 38% to 90%
and FUZZIFICATION only reduces more than 90% of paths
for pcre2. As FUZZIFICATION automatically determines the
details for each protection to satisfy the overhead budget, its
effect varies for different programs.
Table 5 shows the effect of each technique on hindering
path discovery. Among them, SpeedBump achieves the best
protection against normal fuzzers, followed by BranchTrap
and AntiHybrid. Interestingly, although AntiHybrid is devel-
oped to hinder hybrid approaches, it also helps reduce the
discovered paths in normal fuzzers. We believe this is mainly
caused by the slow down in fuzzed executions.
We measured the overhead by different FUZZIFICATION
techniques, on program size and execution speed. The re-
sult is given in Table 2. In summary, FUZZIFICATION sat-
isfies the user-specified overhead budget, but shows rela-
tively high space overhead. On average, binaries armed with
FUZZIFICATION are 62.1% larger than the original ones. The
extra code mainly comes from the BranchTrap technique,
which inserts massive branches to achieve bitmap saturation.
Note that the extra code size is almost the same across dif-
ferent programs. Therefore, the size overhead is high for
small programs, but is negligible for large applications. For
example, the size overhead is less than 1% for LibreOffice
applications, as we show in Table 7. Further, BranchTrap is
configurable, and developers may inject a smaller number of
fake branches to small programs to avoid large-size overhead.
Analysis on less effective results. FUZZIFICATION shows
less effectiveness on protecting the libjpeg application.
Specifically, it decreases the number of real paths on libjpeg
by 13% to AFL and by 37% to HonggFuzz, whereas the av-
erage reduction is 76% and 67%, respectively. We analyzed
AFL-QEMU
HonggFuzz (PT)
QSym (AFL-QEMU)
SpeedBump BranchTrap AntiHybrid All
-74%
-61%
-80%
-66%
-44%
-59%
-23%
-14%
-58%
-18%
-7%
-67%
Average
-56%
-31%
-30%
-71%
Table 5: Reduction of discovered paths by FUZZIFICATION tech-
niques. Each value is an average of the fuzzing result from eight
real-world programs, as shown in Figure 9 and Figure 10.
FUZZIFICATION on libjpeg and find that SpeedBump and
BranchTrap cannot effectively protect libjpeg. Specifically,
these two techniques only inject nine basic blocks within
the user-specified overhead budget (2% for SpeedBump and
2% for BranchTrap), which is less than 0.1% of all basic
blocks. To address this problem, developers may increase
the overhead budget so that FUZZIFICATION can insert more
roadblocks to protect the program.
6.1.2
Impact on Hybrid Fuzzers
We also evaluated FUZZIFICATION’s impact on code cov-
erage against QSym, a hybrid fuzzer that utilizes symbolic
execution to help fuzzing. Figure 10 shows the number of real
paths discovered by QSym from the original and protected
binaries. Overall, with all three techniques, FUZZIFICATION
can reduce the path coverage by 80% to QSym on average,
and shows consistent high effectiveness on all tested pro-
grams. Specifically, the reduction rate varies between 66%
(objdump) to 90% (readelf). The result of libjpeg shows an
interesting pattern: QSym finds a large number of real paths
from the original binary in the last 8 hours, but it did not get
the same result from any protected binary. Table 5 shows
that AntiHybrid achieves the best effect (67% path reduction)
against hybrid fuzzers, followed by SpeedBump (59%) and
BranchTrap (58%).
USENIX Association
28th USENIX Security Symposium    1923
(a) AFL-QEMU
(b) HonggFuzz (Intel-PT)
(c) QSym (AFL-QEMU)
(a) VUzzer
(b) QSym (AFL-QEMU)
200
150
100
50
40
30
20
10
Original
Fuzzified
400
300
200
100
0
0
0
m
p
n
m
o bjd u
re a d elf
re a d elf
o bjc o p y
o bjc o p y
Figure 11: Crashes found by different fuzzers from binutils programs. Each
program is compiled as original (no protection) and fuzzified (three techniques)
and is fuzzed for three days.
o bjc o p y
re a d elf
o bjd u
o bjd u
m
m
p
n
m
m
p
n
60
50
40
30
20
10
0
150
120
90
60
30
0
Original
Fuzzified
h o
w
u niq
b ase 6 4
m
d 5 s u
m
h o
w
u niq
b ase 6 4
m
d 5 s u
m
Figure 12: Bugs found by VUzzer and QSym from
LAVA-M dataset. HonggFuzz discovers three bugs from