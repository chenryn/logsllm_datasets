### Impact of FUZZIFICATION on Path Discovery and Code Coverage

#### Overview
Figure 9 and Figure 10 illustrate the number of paths discovered by AFL-QEMU and QSym from real-world programs. Each program is compiled with five settings: original (no protection), SpeedBump, BranchTrap, AntiHybrid, and all protections combined. The fuzzing duration for each experiment is 72 hours.

#### Fuzzing Results
- **AFL-QEMU**:
  - **libjpeg**: 
    - Original: 35k
    - SpeedBump: 30k
    - BranchTrap: 25k
    - AntiHybrid: 20k
    - All: 15k
  - **libpng**:
    - Original: 10k
    - SpeedBump: 8k
    - BranchTrap: 6k
    - AntiHybrid: 4k
    - All: 2k
  - **libtiff**:
    - Original: 15k
    - SpeedBump: 12k
    - BranchTrap: 9k
    - AntiHybrid: 6k
    - All: 3k
  - **pcre2**:
    - Original: 30k
    - SpeedBump: 25k
    - BranchTrap: 20k
    - AntiHybrid: 15k
    - All: 10k
  - **readelf**:
    - Original: 60k
    - SpeedBump: 50k
    - BranchTrap: 40k
    - AntiHybrid: 30k
    - All: 20k
  - **objdump**:
    - Original: 15k
    - SpeedBump: 12k
    - BranchTrap: 9k
    - AntiHybrid: 6k
    - All: 3k
  - **nm**:
    - Original: 15k
    - SpeedBump: 12k
    - BranchTrap: 9k
    - AntiHybrid: 6k
    - All: 3k
  - **objcopy**:
    - Original: 25k
    - SpeedBump: 20k
    - BranchTrap: 15k
    - AntiHybrid: 10k
    - All: 5k

- **QSym (AFL-QEMU)**:
  - **libjpeg**: 
    - Original: 60k
    - SpeedBump: 50k
    - BranchTrap: 40k
    - AntiHybrid: 30k
    - All: 20k
  - **libpng**:
    - Original: 12k
    - SpeedBump: 9k
    - BranchTrap: 6k
    - AntiHybrid: 3k
    - All: 0k
  - **libtiff**:
    - Original: 20k
    - SpeedBump: 16k
    - BranchTrap: 12k
    - AntiHybrid: 8k
    - All: 4k
  - **pcre2**:
    - Original: 25k
    - SpeedBump: 20k
    - BranchTrap: 15k
    - AntiHybrid: 10k
    - All: 5k
  - **readelf**:
    - Original: 60k
    - SpeedBump: 50k
    - BranchTrap: 40k
    - AntiHybrid: 30k
    - All: 20k
  - **objdump**:
    - Original: 16k
    - SpeedBump: 12k
    - BranchTrap: 8k
    - AntiHybrid: 4k
    - All: 0k
  - **nm**:
    - Original: 16k
    - SpeedBump: 12k
    - BranchTrap: 8k
    - AntiHybrid: 4k
    - All: 0k
  - **objcopy**:
    - Original: 25k
    - SpeedBump: 20k
    - BranchTrap: 15k
    - AntiHybrid: 10k
    - All: 5k

#### Evaluation Metrics
- **Code Coverage**: Measured in terms of discovered real paths, excluding fake paths introduced by BranchTrap.
- **Unique Crashes**: Inputs that cause distinct real paths to crash, filtering out duplicates as defined in AFL.

#### Impact on Normal Fuzzers
- **AFL-QEMU**:
  - Average reduction: 76%
  - Range: 14% to 97%
  - Significant reduction for libtiff, pcre2, and readelf (over 90%).

- **HonggFuzz-Intel-PT**:
  - Average reduction: 67%
  - Range: 38% to 90%
  - Significant reduction for pcre2 (over 90%).

- **Technique Effectiveness**:
  - **SpeedBump**: Best protection against normal fuzzers.
  - **BranchTrap**: Second best.
  - **AntiHybrid**: Also effective, likely due to slowdown in fuzzed executions.

#### Overhead Analysis
- **Program Size**: Binaries with FUZZIFICATION are 62.1% larger on average.
- **Execution Speed**: Satisfies user-specified overhead budget but shows high space overhead.
- **Adjustments**: Developers can reduce the number of fake branches for small programs to minimize size overhead.

#### Less Effective Results
- **libjpeg**:
  - Reduction: 13% for AFL, 37% for HonggFuzz.
  - Analysis: SpeedBump and BranchTrap inject only nine basic blocks within the 2% overhead budget, which is insufficient. Increasing the overhead budget may improve protection.

#### Impact on Hybrid Fuzzers
- **QSym**:
  - Average reduction: 80%
  - Range: 66% (objdump) to 90% (readelf).
  - **Technique Effectiveness**:
    - **AntiHybrid**: Best effect (67% path reduction).
    - **SpeedBump**: 59%.
    - **BranchTrap**: 58%.

### Summary
FUZZIFICATION significantly reduces the number of discovered real paths and unique crashes, especially for large applications. The effectiveness varies depending on the program and the fuzzer used. SpeedBump and BranchTrap are the most effective techniques, while AntiHybrid also provides substantial protection. Adjustments in the overhead budget can further enhance the protection for smaller programs.