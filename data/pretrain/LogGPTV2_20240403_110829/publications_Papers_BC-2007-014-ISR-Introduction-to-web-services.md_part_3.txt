### Information Exchange and Security on the Web

When you enter information into a web browser, it is temporarily stored in a file on your disk. This exchange of information between you and the web server may be stored in a temporary file. Even after the information is sent to the web server and the temporary file is deleted, remnants of the data can still exist on the disk, even if the file reference is gone.

Many malicious actors have learned how to exploit this by gleaning information from remote systems through vulnerabilities in the operating system. For example, your credit card information, billing address, and security code are now stored in two places: the web server and your PC. It is more likely that a malicious actor will target a web server for access to thousands of entries rather than a single PC.

### Defining Security and Privacy

**Security** can be defined as "keeping unauthorized access minimal." This applies not only to the web but also to our daily lives. We lock our doors to keep unauthorized visitors out. While this definition is simple, it is clear and effective.

**Privacy** can be defined as "not making public what may be considered personal." Different people have different ideas about what is personal and what being made public means. However, most would agree that having one's Social Security Number and checking account information sold to the highest bidder is a violation of privacy.

### Security and Privacy in the Web Context

Consider purchasing a book online. When you checkout, you must provide your credit card information and billing address. This is the first security checkpoint, where the information is verified with your bank and checked to ensure the card has not been reported stolen. The next checkpoint is verifying physical possession of the card through the security code on the back. As a consumer, you trust the website to handle this information securely.

Web services increase the number of access points to data and machines, thereby increasing the potential for privacy invasion. In a distributed cross-domain environment, it is challenging to determine the identity of the service requester and provider. Therefore, message-level security and privacy are crucial, especially since these invocations may cross untrusted intermediaries.

### Message-Level Security

Message-level security involves securing all aspects of the SOAP message. Encryption plays a significant role in ensuring the integrity of messages between the requester and the provider while traversing intermediaries. Point-to-Point schemes, such as SSL or IPSec, provide a "secure tunnel" for data, but they do not guarantee the integrity of the message. End-to-End schemes, implemented at the application layer, can ensure the confidential integrity of the message and that it has not been altered. This is achieved through encryption and digital signatures.

### WS-Security Framework

The WS-Security specification provides a framework and vocabulary for requesters and providers to secure messaging and communicate information regarding security and privacy. Other relevant specifications include:

- **XML-Encryption**: Specifies the process of encrypting data and messages.
- **XML-Signature**: Provides a mechanism for message integrity and authentication.
- **XACML (eXtensible Access Control Markup Language)**: An XML representation of the Role-Based Access Control (RBAC) standard.
- **SAML (Security Assertion Markup Language)**: An OASIS framework for conveying user authentication and attribute information through XML assertions.

### Threats and Mitigation

- **Man-In-The-Middle (MITM) Attack**: An attacker compromises a SOAP message in transit, gaining access to confidential information or altering the message.
- **Unauthorized Access Attack**: An attacker gains access to a web service without proper permissions, often through brute force or by compromising a SOAP message.
- **SQL Injection Attack**: Malicious SQL statements are inserted into parameters passed to an operation that queries a SQL database.
- **Command Injection Attack**: Malicious system commands are injected into the SOAP message to exploit system vulnerabilities.

These threats can be mitigated using proper authentication and encryption techniques, as well as good programming practices and parameter validation.

### Policies and Trust

**WS-SecurityPolicy** describes the access permissions and actions required for requesters and providers. For example, a policy might require that requesters have an active account with the service and that messages be encrypted using a PKI scheme from a trusted certificate authority.

**WS-Trust** deals with the exchange of security credentials and establishing trust relationships. **WS-SecureConversation** uses SOAP extensions to define key exchange and key derivation from security context to ensure secure communication.

### Authorization

Authorization for web services is an area of ongoing research. Some approaches include:

- **Assertion-based Authorization**: Uses assertions about the requester to determine the level of authorization.
- **Role-based Authorization**: Assigns roles to users, which have specific permissions.
- **Context-based Authorization**: Examines the context in which a requester is acting.
- **Hybrid Approaches**: Combines two or more of the above methods.

### Transaction Management

**WS-Transaction** enables participating services to have confidence that their actions will progress successfully and, in the worst case, can be canceled or compensated. Specifications like **WS-Coordination (WS-C)**, **WS-AtomicTransaction (WS-AT)**, and **WS-BusinessActivity (WS-BA)** define transaction context management and coordination.

### Reliable Messaging

**WS-ReliableMessaging** ensures that messages are delivered reliably and in the correct order. It defines rules for how and when services must respond to other services concerning the receipt and validity of messages.

### Eventing and Notification

**WS-Eventing** and **WS-Notification** provide capabilities for asynchronous messaging and event handling. These specifications define operations and message exchanges for clients and notification brokers, as well as an XML model for describing topics.

### Developing Web Services

To develop web services, start by creating a WSDL (Web Services Description Language) specification or a Java class. Use UML (Unified Modeling Language) to create a class diagram, and then generate Java code from the UML diagram. Ensure that the generated code follows Java bean conventions, such as implementing getters and setters for member variables.

By following these steps and best practices, you can create secure and reliable web services that protect both the integrity of the data and the privacy of the users.