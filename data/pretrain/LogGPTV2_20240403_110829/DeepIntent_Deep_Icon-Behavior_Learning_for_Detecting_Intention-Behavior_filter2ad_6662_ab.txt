### Behaviors That Deliberately Evade Detection

DeepIntent is designed to determine whether the behavior of an icon widget aligns with the user-perceivable information in the UI, i.e., whether the UIs provide justifications for the behaviors. Some underlying data flows, such as disclosing contacts, may not be intuitively reflected by the UI information. However, if many apps with similar UIs exhibit such behaviors, DeepIntent can still capture this compatibility in the model.

### Legitimacy and Training Quality

Most apps in app markets are legitimate, with developers designing them to meet users’ requirements. However, some may aggressively exploit user privacy for revenue. For third-party app markets potentially flooded with malicious apps, the training quality may be affected. In such cases, anti-virus and malware detection techniques should be applied to remove these apps from the training dataset. Malicious apps that deliberately evade detection can be identified using specialized techniques [7, 16, 83, 93], which are outside the scope of this paper.

### Icon-Behavior Association

This module provides static analysis techniques to identify icon widgets, extract their icons and texts, and infer the permission uses of the icon widgets. It plays a key role in learning an icon-behavior model by enabling the construction of a large-scale, high-quality training dataset. Our techniques analyze both UIs and source code to associate icons/texts and handlers to icon widgets. Specifically, we build extended call graphs to patch missing calling relationships introduced by the Android environment and use these extended call graphs to identify APIs invoked by the UI widgets.

#### 4.1 Static Analysis Overview

This module contains four major components:
1. **Icon-Widget Association**
2. **Extended Call Graph Construction**
3. **Widget-API Association**
4. **API Permission Checking**

The first two components take an Android APK file as input. Figure 3 provides an overview of DeepIntent.

### Learning and Discrepancy Detection

With the learned icon-behavior model, DeepIntent also trains a discrepancy detection model to compute outlier scores for test icons. For a button whose intention-behavior discrepancy is to be checked, DeepIntent uses static analysis to extract the ⟨icon, text, permissions⟩ triple and feeds it into the icon-behavior models (i.e., icon-behavior learning and discrepancy detection) to determine any discrepancies between the intentions (represented using icons and contextual texts) and the permission uses. For example, it is expected for the first button (‘call’) to use the CALL permission, while there is a discrepancy for the second button (‘timing filter’) to use the CALL permission.

### Design of DeepIntent

#### 3.1 Overview

Figure 3 shows the overview of DeepIntent, which consists of three phases:
1. **Icon Widget Analysis**: Accepts a training dataset of Android APK files, extracts features (icons and texts), and labels (permission uses) of icon widgets.
2. **Learning Icon-Behavior Model**: Uses both icons and their contextual texts as features and the corresponding behaviors (permission uses) as labels to train the icon-behavior model.
3. **Detecting Intention-Behavior Discrepancies**: Extracts icon and text features for each icon widget, predicts permission uses, and detects abnormal permission uses.

### Detailed Components

#### 4.2 Icon-Widget Association

In Android apps, icons can be associated with UI widgets via UI layout files or source code. Each UI layout, widget, and icon has a unique ID. We adopt the static analysis of IconIntent [80] to associate icons with UI widgets. IconIntent performs static analysis on both UI layout files and source code to infer the associations between icons and UI widgets.

#### 4.3 Extended Call Graph Construction

Android app executions follow an event-driven model. To determine which behavior is triggered, DeepIntent builds a static call graph for each UI handler. Figure 6 illustrates an example app that requests a user’s GPS location via multi-threading. Our static analysis technique patches missing calling relationships without exhausting lifecycle method calls, including multi-threading, lifecycle methods, event-driven methods, and inter-component communication (ICC).

#### 4.4 Widget-API Association

This component associates UI widgets with their UI handlers and constructs call graphs for the UI handlers. We adapt GATOR [63, 81, 82] to associate UI handlers with UI widgets. The approach then combines the output from GATOR with the output from the Icon-Widget Association component to build the associations among icons, layout files, UI widgets, and UI handlers.

#### 4.5 API Permission Checking

This component maps the APIs found in the extended call graph of each icon widget to permission uses based on PScout [6]. The output is the associations between each icon and a set of permissions.

#### 4.6 Contextual Texts Extraction for Icons

DeepIntent extracts contextual texts for each icon, including layout texts, icon-embedded texts (using OCR), and resource names. The final output of our static analysis is a set of ⟨icon, text, permissions⟩ triples.

### Deep Icon-Behavior Learning

Using the ⟨icon, text, permissions⟩ triples, DeepIntent leverages the co-attention mechanism to jointly model icons and texts, and trains an icon-behavior model that predicts the permission uses of icon widgets.

#### 5.1 Model Overview

Figure 7 shows the overview of the deep icon-behavior learning module. Each piece of input consists of an icon and its text. We adapt DenseNet layers to extract icon features and bidirectional RNN layers to extract text features, combining them into a joint feature vector using co-attention layers.

#### 5.2 Icon Feature Extraction

Each icon is treated as a color tensor with fixed width, height, and color channels. We adapt DenseNet [30] to initialize the icon features, considering the alpha channel for opacity.

### Conclusion

DeepIntent effectively identifies and analyzes the behavior of icon widgets, ensuring they align with user expectations and detecting any discrepancies. This comprehensive approach enhances the security and usability of Android applications.