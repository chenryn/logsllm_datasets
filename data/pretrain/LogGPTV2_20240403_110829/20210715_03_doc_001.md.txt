### Data Recovery Using `pg_filedump`

#### Introduction
`pg_filedump` is a utility for displaying the formatted contents of PostgreSQL heap, index, and control files. This document will guide you through the process of using `pg_filedump` for data and schema recovery.

#### Installation
To install `pg_filedump`, follow these steps:

1. Clone the repository:
   ```sh
   git clone git://git.postgresql.org/git/pg_filedump.git
   ```

2. Navigate to the directory:
   ```sh
   cd pg_filedump
   ```

3. Build the utility:
   ```sh
   make
   ```

4. View the help documentation:
   ```sh
   ./pg_filedump --help
   ```

   Usage:
   ```sh
   Usage: pg_filedump [-abcdfhikxy] [-R startblock [endblock]] [-D attrlist]
                      [-S blocksize] [-s segsize] [-n segnumber] file
   Display formatted contents of a PostgreSQL heap/index/control file
   ```

#### Recovering Data

1. Create a sample table and insert some data:
   ```sql
   create table tt (x int, y bool, z text, w timestamp);
   insert into tt values(123, true, 'Text test test', now());
   insert into tt values(456, null, 'Ололо трооло', null);
   checkpoint;
   ```

2. Find the `relfilenode` of the table:
   ```sql
   select relfilenode from pg_class where relname = 'tt';
   -- 16393
   ```

3. Use `pg_filedump` to dump the table data:
   ```sh
   ./pg_filedump -D int,bool,text,timestamp /path/to/db/base/16384/16393
   ```

   Example output:
   ```
   Block 0 ********************************************************
   -----
   Block Offset: 0x00000000 Offsets: Lower 32 (0x0020)
   Block: Size 8192 Version 4 Upper 8080 (0x1f90)
   LSN: logid 0 recoff 0x0301e4c0 Special 8192 (0x2000)
   Items: 2 Free Space: 8048
   Checksum: 0x0000 Prune XID: 0x00000000 Flags: 0x0000 ()
   Length (including item array): 32
   [...]
   [...]
   ------
   Item 1 -- Length: 56 Offset: 8136 (0x1fc8) Flags: NORMAL
   COPY: 123 t Text test test 2017-01-17 16:25:03.448488
   Item 2 -- Length: 52 Offset: 8080 (0x1f90) Flags: NORMAL
   COPY: 456 \N Ололо трооло \N
   ```

4. Extract and format the copied data:
   ```sh
   pg_filedump -D int,bool,text,timestamp /path/to/db/base/16384/16393 | grep COPY | perl -lne 's/^COPY: //g; print;' > /tmp/copy.txt
   cat /tmp/copy.txt
   123 t Text test test 2017-01-17 16:25:03.448488
   456 \N Ололо трооло \N
   ```

5. Import the extracted data into a new table:
   ```sql
   create table tt2 (x int, y bool, z text, w timestamp);
   copy tt2 from '/tmp/copy.txt';
   select * from tt2;
   ```

   Example output:
   ```
   x | y | z | w
   -----+---+----------------+----------------------------
   123 | t | Text test test | 2017-01-17 16:25:03.448488
   456 | | Ололо трооло |
   (2 rows)
   ```

#### Recovering Schema

1. Identify the `relfilenode` for the `pg_class` catalog:
   ```c
   src/include/catalog/pg_class.h:
   #define RelationRelationId 1259
   #define RelationRelation_Rowtype_Id 83
   CATALOG(pg_class,1259) BKI_BOOTSTRAP BKI_ROWTYPE_OID(83) ...
   {
       NameData relname; /* class name */
       Oid relnamespace; /* OID of namespace containing this...
   https://www.postgresql.org/docs/9.6/static/catalog-pg-class.html
   ```

2. Dump and filter the `pg_class` catalog:
   ```sh
   ./pg_filedump -D name,oid,oid,oid,oid,oid,oid,~ /path/to/base/16384/1259 | grep COPY | grep test
   COPY: test 2200 16387 0 10 0 16385 -- relfilenode!
   COPY: test 2200 16387 0 10 0 16385
   COPY: test_pkey 2200 0 0 10 403 16391
   ```

3. Identify the `relfilenode` for the `pg_attribute` catalog:
   ```c
   src/include/catalog/pg_attribute.h:
   #define AttributeRelationId 1249
   #define AttributeRelation_Rowtype_Id 75
   CATALOG(pg_attribute,1249) BKI_BOOTSTRAP BKI_WITHOUT_OIDS ...
   {
       Oid attrelid; /* OID of relation containing this...
   https://www.postgresql.org/docs/9.6/static/catalog-pg-attribute.html
   ```

4. Dump and filter the `pg_attribute` catalog:
   ```sh
   ./pg_filedump -D oid,name,oid,int,smallint,~ /path/to/base/16384/1249 | grep COPY | grep 16385
   COPY: 16385 k 23 -1 4
   COPY: 16385 v 25 -1 -1
   COPY: 16385 ctid 27 0 6
   COPY: 16385 xmin 28 0 4
   COPY: 16385 cmin 29 0 4
   COPY: 16385 xmax 28 0 4
   COPY: 16385 cmax 29 0 4
   COPY: 16385 tableoid 26 0 4
   ```

5. Identify the `atttypid` for the `pg_type` catalog:
   ```sh
   23 and 25 are atttypid’s. relfilenode for pg_type is 1247, see
   pg_type.h
   ```

6. Dump and filter the `pg_type` catalog:
   ```sh
   ./pg_filedump -i -D name,~ /path/to/base/16384/1247 | grep -A5 -E 'OID: (23|25)'
   XMIN: 1 XMAX: 0 CID|XVAC: 0 OID: 23
   Block Id: 0 linp Index: 8 Attributes: 30 Size: 32
   infomask: 0x0909 (HASNULL|HASOID|XMIN_COMMITTED|XMAX_INVALID)
   t_bits: [0]: 0xff [1]: 0xff [2]: 0xff [3]: 0x07
   COPY: int4
   [...]
   [...]
   XMIN: 1 XMAX: 0 CID|XVAC: 0 OID: 25
   Block Id: 0 linp Index: 10 Attributes: 30 Size: 32
   infomask: 0x0909 (HASNULL|HASOID|XMIN_COMMITTED|XMAX_INVALID)
   t_bits: [0]: 0xff [1]: 0xff [2]: 0xff [3]: 0x07
   COPY: text
   ```

#### Result
- **relfilenode**: 16385
- **Columns**:
  - `k` with type `int4`
  - `v` with type `text`

#### Fun Facts
- `timetz` is larger than `timestamptz` (int64 + int32 vs int64).
- Up to 8 nullable columns are "free" in terms of storage.
- Tables can be compressed by reordering columns.

#### More Information
- **Corruption War Stories** by Christophe Pettus
  - [PGCon 2017](http://www.pgcon.org/2017/schedule/events/1048.en.html)
- **In-core Compression** by Anastasia Lubennikova, Aleksander Alekseev
  - [Talk Slides](https://afiskon.github.io/pgconf2017-talk.html)
- **pg_filedump Source Code**
  - [decode.c](https://git.postgresql.org/gitweb/?p=pg_filedump.git;a=blob;f=decode.c)
- **Database System Implementation** by Hector Garcia-Molina, Jeffrey Ullman, Jennifer Widom
  - [Amazon](https://www.amazon.com/dp/0130402648/)
- **Hacking PostgreSQL** by Anastasia Lubennikova
  - [Blog](http://postgres-edu.blogspot.ru/search/label/Hacking%20PostgreSQL)
- **Becoming a PostgreSQL Contributor** by Aleksander Alekseev
  - [Habr](https://habr.ru/p/308442/)

#### Contact
- [Twitter](https://twitter.com/afiskon)
- [PostgresPro](https://postgrespro.com/)

Thank you for your attention!