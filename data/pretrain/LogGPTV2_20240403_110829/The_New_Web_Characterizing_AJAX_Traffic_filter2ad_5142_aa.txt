title:The New Web: Characterizing AJAX Traffic
author:Fabian Schneider and
Sachin Agarwal and
Tansu Alpcan and
Anja Feldmann
The New Web: Characterizing AJAX Trafﬁc
Fabian Schneider, Sachin Agarwal, Tansu Alpcan, and Anja Feldmann
Deutsche Telekom Laboratories / Technische Universit¨at Berlin
10587 Berlin, Germany
{fabian,anja}@net.t-labs.tu-berlin.de,
{sachin.agarwal,tansu.alpcan}@telekom.de
Abstract. The rapid advent of “Web 2.0” applications has unleashed new HTTP
trafﬁc patterns which differ from the conventional HTTP request-response model.
In particular, asynchronous pre-fetching of data in order to provide a smooth
web browsing experience and richer HTTP payloads (e.g., Javascript libraries)
of Web 2.0 applications induce larger, heavier, and more bursty trafﬁc on the
underlying networks. We present a trafﬁc study of several Web 2.0 applications
including Google Maps, modern web-email, and social networking web sites, and
compare their trafﬁc characteristics with the ambient HTTP trafﬁc. We highlight
the key differences between Web 2.0 trafﬁc and all HTTP trafﬁc through statis-
tical analysis. As such our work elucidates the changing face of one of the most
popular application on the Internet: The World Wide Web.
1 Introduction
The World Wide Web [1] is one of the most popular applications of the Internet and runs
primarily over the HTTP protocol. While HTTP (Hyper Text Transfer Protocol) [2] con-
stitutes the session layer or messaging protocol of the Web, HTML (Hyper Text Markup
Language) describes the content and allows authors of web content to connect up web
pages through hypertext links or hyperlinks; an idea made popular by Tim Berners-
Lee in the early 1990s and widely used today. In its classical form, users reach other
pages or access new data by clicking on hyperlinks or submitting web based forms. In
this basic HTTP request-response model each clicked link or submitted form results in
downloading a new web page in response to the respective request.
The recent popularity of asynchronous communication enabled web sites has caused
a signiﬁcant shift from the classical HTTP request-response model of the Web. This
asynchronous communication is commonly executed through AJAX (Asynchronous
JavaScript and XML) [3], a compendium of technologies that enable web browsers
to request data from the server asynchronously, i.e., without requiring human interven-
tion such as clicking on a hyperlink or on a button. Consequently, HTTP requests are
increasingly becoming automated rather than being human-generated. In this paper we
use AJAX and “Web 2.0” interchangeably to refer to web applications that use this new
paradigm on the Internet.
Contemporary web pages often contain embedded request-response functions com-
prising a JavaScript application engine that automatically executes in the background
to asynchronously pre-fetch large quantities of data from the server. This intelligent
M. Claypool and S. Uhlig (Eds.): PAM 2008, LNCS 4979, pp. 31–40, 2008.
© Springer-Verlag Berlin Heidelberg 2008
32
F. Schneider et al.
User responses
Browser
Output
Screen
(DOM)
User
Web browser
Requests
Replies
Web-
server
User
Browser
Output
Screen
(DOM)
JavaScript
Engine
(Client side)
Pre-fetch
Cache
Requests
Replies
Web-
server
JavaScript-enabled-browser
(e.g. Firefox, IE, Safari)
(a) Classic Web browsing
(b) AJAX enabled Web browsing
Fig. 1. Comparison of classical with AJAX enabled web applications
pre-fetching is often used to mask the round trip and transmission latency of Internet
connections to give the user a ‘smoother’ web application experience. We highlight the
differences in Figure 1. The JavaScript engine builds a local pre-fetched cache based on
the user’s interaction with the web application and executes parts of the application logic
in the client’s web browser itself instead of the web server. The prediction algorithms
of any automated pre-fetching scheme usually results in signiﬁcantly larger downloads
as compared to user-initiated web browsing due to inaccurate guesses on part of the
prediction algorithms about which data to pre-fetch. Even when the prediction is accu-
rate, HTTP trafﬁc inter-request-times are no longer lower-bounded by human response
times (order of seconds) and may instead depend on the JavaScript code logic of the
web application on the client machine.
Many popular web applications have adopted Web 2.0 technologies. One of the most
popular and early adopter of AJAX is Google Maps. Its success encouraged the use of
AJAX for building other interactive web applications. For example, many web-email of-
ferings have transitioned into Web 2.0 applications in order to rival the look and feel of
desktop email clients. Furthermore, some social networking web sites use AJAX tech-
nologies to offer rich and interactive user experiences. In this paper we explore the trafﬁc
characteristics of the most popular representatives of these AJAX based applications in
our environment and contrast their characteristics to those of the overall HTTP trafﬁc.
1.1 Related Work
A good overview of traditional Web protocols is given in the book by Krishnamurthy
and Rexford [1]. One of the early works on characterizing the effect of HTTP trafﬁc and
HTTP pre-fetching is by Crovella [4]. It highlights the beneﬁcial and unwanted effects
of pre-fetching HTTP data, and hence further substantiates the importance of our analy-
sis of Web 2.0 applications and their global effect on the Internet. There has been a vast
literature on Internet web caching, e.g., [5,6,7]. However, the underlying motivation for
using caching in all these studies has been on reducing the overall download latency of
popular web sites and not facilitating low latency interactive Web 2.0 applications.
There are few studies focusing on the characteristics of AJAX-based trafﬁc, although
there exist several discussions, blogs and web sites about the end-user perceived latency
of AJAX based applications (e.g., [8]). The novel aspect of our work is that we focus
on the behavior of two large user populations and investigate multiple AJAX enabled
applications.
The New Web: Characterizing AJAX Trafﬁc
33
1.2 Contributions
In this paper, we highlight the changing characteristics of Web trafﬁc by comparing the
trafﬁc patterns of HTTP and Web 2.0 applications. For this we rely on several HTTP
traces from large user populations in Munich, Germany and Berkeley, USA from which
we extract popular AJAX application trafﬁc.
From the statistical analysis of Web 2.0 trafﬁc in comparison to all HTTP trafﬁc
extracted from the traces we show that the former’s characteristics signiﬁcantly differ
from the latter’s. Our work focuses on the number of transfered bytes, the number of
HTTP requests issued and the times between subsequent request (inter-request-times).
For example, Web 2.0 trafﬁc has shorter inter-arrival-times due to the underlying human-
independent automated data pre-fetching schemes.
Our work complements the efforts of the web developer community towards a better
understanding of the Web 2.0 application characteristics. Some of our results may mo-
tivate the web developer community to design web applications that are friendlier to the
underlying network, for example, by reducing the number of automated HTTP requests
when possible.
The rest of the paper is organized as follows. We give a brief overview of the appli-
cations studied in this work and then describe our data collection process in Section 2.
In Section 3 we present the results of our statistical analysis comparing AJAX trafﬁc
with the HTTP trafﬁc. Finally, we conclude in Section 4.
2 Methodology
In order to determine which Web 2.0 applications to study we ﬁrst examine the popular-
ity of different applications (Section 2.1). Google Maps is among the most popular web
applications and a nice example of a AJAX-enabled application. Therefore, we provide
a high level overview of its communication patterns in Section 2.2. Finally, we detail
how we extract application characteristics from our data sets in Section 2.3. Similar ex-
traction methodologies (skipped for brevity) are used for the other AJAX applications.
2.1 Data Sets
We use packet level traces collected from two independent networks: the M¨unchener
Wissenschaftsnetz (Munich Scientiﬁc Network, MWN) in Germany, and the Lawrence
Berkeley National Laboratories (LBNL) in the USA. Both environments provide high
speed Internet connections to their users. The MWN provides a 10 Gbps link capacity
to roughly 55,000 hosts at two major universities and several research institutes, trans-
ferring 3-6 TB a day. LBNL utilizes a 1 Gbps upstream link, transferring about 1.5 TB
a day for roughly 13,000 hosts. We base our analysis on three traces from network port
80 (the HTTP port). Two of these traces, MWN-05 and MWN-07, are from MWN while
one trace, LBNL-07, is from LBNL. See Table 1 for information about the traces includ-
ing: size, duration and start dates, total number of HTTP requests, and number of HTTP
requests related to Google Maps.
We rely on packet level traces of large user populations as they provide the most
detailed data. From these traces we reconstruct the HTTP request-response stream of
34
F. Schneider et al.
Table 1. Characteristics of the data sets
Trace
MWN-07 Feb 24th 2007
LBNL-07 Mar 3rd 2007
MWN-05 Oct 11th 2005
Start Date Duration
32h+
∼9h
24h
Size #Req Total #Req GMaps
222 K
82 K
43 K
30,0 M
2,0 M
119 M
2.4 TB
214 GB
2.5 TB
Percent
Percent Category
Category
1.67%
12.60% Ebay
LMU
12.26% Site 3
1.45%
Ad Server
7.60% lokalisten.de 1.40%
MWN
6.90% Bav. State
1.14%
Google
1.09%
5.05% web.de
TUM
1.01%
4.23% Site 4
News
1.00%
2.27% Site 5
GMX
0.97%
Google Maps 2.04% studivz.de
0.93%
Yahoo
Site 1
0.76%
Google Earth 1.85% Google Mail 0.65%
Site 2
0.55%
26.83%
1.97% MSN
1.96% Microsoft
1.81% Youtube
other
Fig. 2. Pie chart of the percentages of requests for the top 500 hostnames by categories. (Top 500
hostnames account for 53% of the total requests. Percentages are relative to the top 500.)
all connections. While one could use a variety of tools [1], we utilize the HTTP ana-
lyzer of Bro [10], a network intrusion detection system. Bro’s policy script http.bro
together with the policy scripts http-reply.bro and http-header.bro enable TCP
stream re-assembly, basic HTTP analysis, and HTTP request-response analysis. We
augmented the http-header.bro script to extract the times when the HTTP requests
were issued. The resulting output ﬁle consisted of one-line summaries of each HTTP
request containing (TCP) Connection ID, number of request in the connection, session
ID, transferred bytes, three timestamps (request issued, cookie seen, request ﬁnished),
requested hostname (servername1), preﬁx of the requested URL, and the HTTP status
code for this request. Note that the number of transferred bytes does not include the
HTTP header size. We only include requests for which we successfully record start and
end times.
In order to determine the most popular AJAX enabled Web 2.0 applications we ﬁrst
identiﬁed the 500 most popular web servers2 in the MWN-07 data set. We then grouped
these into multiple categories for better visualization. The ﬁrst set of categories con-
tained the servers that are hosted by the two universities and the other research institutes
(MWN). The next categories contained all request related to advertisements (Ad Server)
and news web sites (News). Manual inspection showed that neither category contained
1 We use server and host interchangeably in this discussion.
2 Web server as speciﬁed by the hostname in the HTTP request.
The New Web: Characterizing AJAX Trafﬁc
35
many AJAX related requests. Some of the services offered by Google, including Google
Maps and Google Mail use AJAX, while others like Google search, Google images and
Google Earth, do not. Accordingly, we separate them into Google Maps, Google Mail,
Google Earth, and all others (Google). Another popular Web-email service in Germany,
that is also AJAX supported, is provided by GMX. Some categories include just a single
popular site (Site 1, . . ., Site 5), others are well known Web sites, e.g., Ebay and MSN.
Figure 2 shows a pie chart of the number of requests per category for the MWN-07 data
set. We ﬁnd that GMX is the most popular AJAX based application with 2.27% of the
requests followed by Google Maps which contributes 2.04%. Another AJAX-enabled
social networking web site is lokalisten.de with 1.4%. Although Google Mail only ac-
counts for 0.65% of the requests we include it as our fourth applications since this gives
us two AJAX-enabled Mail applications by different providers. In terms of bytes the
contributions are smaller, e.g., Google Maps with 1.41%. But all of the applications
considered in this paper are among the top 500. We refer to these both most popular
and AJAX-enabled applications as “Selected-4” in subsequent discussions.
2.2 Google Maps Communication
Google Maps is one of the ﬁrst web applications to popularize AJAX technology. Con-
sequently, it is widely considered as the canonical example of an AJAX application.
AJAX uses the Document Object Model (DOM) [9] of the web browser such that it is
no longer necessary to reload the entire web page each time it is updated. In this way it
increases interactivity, speed, and usability.
Google Maps maintains multiple connections to different servers in the Internet that
serve as back-ends for the Google Maps application. All connections use HTTP as the
session protocol and take advantage of the advanced features of HTTP 1.1 [2] such as
persistent HTTP connections for efﬁciency and pipelining for reducing latency, leading
to multiple HTTP requests per TCP connection. In the context of Google Maps, most
of these connections are used to fetch image tiles of the map. The others are used for
control messages and for the initial transfer of the AJAX application (JavaScript code),
the transfer of other GUI related pictures, and user queries. The connections carrying
tile images can be identiﬁed by the servers they connect to.
2.3 Application Characterization Methodology
In this section we discuss how to extract application speciﬁc data from our data sets.
For brevity reasons we focus on Google Maps trafﬁc.
One of the challenges of identifying Google Maps trafﬁc is that Google offers all its
services on the same back-end server infrastructure (e.g., Google Maps, Google Search,
Google Video, etc.) and uses a uniform key for all services. Therefore, the browser
can reuse existing TCP connections to Google servers to issue Google search queries,
image or video queries, as well as Google Maps queries. Separating Google Maps trafﬁc
from other Google services thus requires some effort. Moreover, to capture the user’s
interaction with Google Maps, we are not only interested in individual HTTP requests
but also in the full set of HTTP requests within a Google Maps “session”. Meaning all
requests that are issued when a user connects to maps.google.com and then interacts
36
F. Schneider et al.
with the application, e.g., by entering some location, by moving the map, or switching
the zoom level. Accordingly, we group these requests to a Google Maps “session”.
To identify Google Maps related requests among the very large number of HTTP
requests within our traces we check if the hostname contains the string maps.google.
To ﬁnd the other requests by the same user we take advantage of Google’s own session
book-keeping mechanisms. Google uses cookies to mark all requests of a session by
embedding a unique hash of its session ID3. We use this ID as our session ID as well
and gather all other requests of this Google Maps session using the session ID. Unfor-
tunately, there maybe additional requests to other Google services among the identiﬁed
requests. We exclude these if they do not contain a Google Maps speciﬁc URL preﬁx.
We found that /mt (map), /kh (satellite), /mld (route planning) and /mapstt (trafﬁc)
are related to the kind of map that is requested. /maps, /mapfiles and /intl are used
for meta information. / and favicon.ico are not restricted to Google Maps use. A
similar methodology is used for the other Selected-4 applications.
For comparison purposes, we also group requests of the complete HTTP trafﬁc
(ALL-HTTP), including requests of the Selected-4, into web sessions. In this case we
cannot take advantage of cookies yielding session identiﬁers. Therefore we group those
requests that come from the same client IP, go to the same server (IP) on the same server
port. This aggregates connections from different client side ports.
For both Selected-4 sessions, and ALL-HTTP sessions we use a timeout4 of 10 min-
utes. We compute per connection and per session statistics including number of trans-
ferred HTTP payload bytes, number of requests, their durations, and inter-request-times
(IRT’s) for the Selected-4 applications as well as ALL-HTTP trafﬁc.
3 Characteristics of AJAX Trafﬁc
In this section, we present the results of a statistical analysis of the characteristics of
both ALL-HTTP and Selected-4 trafﬁc. Almost all connections and sessions are usually
comprised of multiple requests. However, we ﬁnd signiﬁcant differences in the session
characteristics including: session life times, transferred bytes per session, number of
requests within sessions, and inter-arrival-times of HTTP requests within sessions.
Most of the data is presented as probability density functions (PDF) although com-
plementary cumulative distribution functions (CCDFs) are also shown. In order to cap-
ture the multiple orders of magnitude in the data we plot all CCDFs on a log-log scale
and compute the PDFs of the logarithm of the data in order to be able to use a logarith-
mic X-axis. In addition, Table 2 presents mean and median values.
In our analysis we concentrate on the MWN-07 data set and only use the MWN-05
and LBNL-07 data sets to highlight some of the noticeable differences. Note that the
2005 data set was collected during Google Maps beta testing phase.
Figure 3 shows the CCDF of the number of bytes transferred in a single HTTP con-
nection for ALL-HTTP and all Selected-4 applications for the MWN-07 data set. ALL-
HTTP connections are clearly consistent with a heavy-tailed distribution over several
3 The hash is located after the string PREF=ID= in the cookie.
4 If the time between the end of a reply and the start of the next request is larger than 10 minutes
a new session is started.
The New Web: Characterizing AJAX Trafﬁc
37
Table 2. Mean/Median Table for ALL-HTTP and Selected-4 applications in the MWN-07 data
set. IRT’s are Inter-Request(-arrival)-Times.
s
t
s
e
u
q
e
R
#
s
n
o
i
s
s
e
S
#
30 M 1.4 M
221 K 1127
128 K 3822
140 K 1020
288 K 6101
n
o
i
t
c
e
n
n
o
C
r
e
p
s
e
t
y
B
r
e
p
s
e
t
y
B
n
o
i
s
s
e
S
n
o
i
t
c
e
n
n
o
C
r
e
p
q
e
R
#
r
e
p
q
e
R
#
n
o
i
s
s
e
S
n
o
i
t
c
e
n
n
o
C
a
n
i
s
’
T
R
I
n
a
e
m
n
a
i
d
e
m
57890
204476
31856
9742
14163
332
25199
1678
3
428
278K
2288K
129K
371K
95K
688
161675
7854
27932
6863
4
18
8
4
7
1
4
3
1
3
2.34
13
1.39
197
0.38
34
23.02
138
47
0.53
2 0.0987
21 0.0288
7 0.0347
23 4.3735
29 0.0400
a
n
i
s
’
T
R
I
n
o
i
s
s
e
S
17.23
1.54
4.52
31.84
4.29
0.2035
0.0076
0.0406
9.2202
0.0489
Application
ALL-HTTP
Google Maps
lokalisten.de
Google Mail
GMX
ALL-HTTP
Google Maps
lokalisten.de
Google Mail
GMX
orders of magnitude with a median of 332 Bytes and a mean of 58 KB. Some connec-
tions are clearly used to transfer a huge number of bytes, e.g, due to downloading some
large image or video ﬁle embedded within a HTTP page, or a big software package, or
when HTTP is used as transport protocol for P2P protocols, such as Bittorrent.
The tails of the AJAX based Selected-4 applications are not as heavy. Yet, except for
Google Mail the curves lie on top of the ALL-HTTP trafﬁc for most of the plot which is
reﬂected in the statistics as well, e.g., the median and mean for Google Maps is larger,
i.e., 25 KB and 204 KB respectively.
To further explore the differences in the body of the distribution we show the PDF
for Google Maps and Mail as well as ALL-HTTP trafﬁc in Figure 4. In general we note
that the Selected-4 applications (see for example, Google Maps) transfer more bytes
than ALL-HTTP connections. This probably stems from multiple larger image/Java-
Script library transfers, when, for example, Google Maps users pan and zoom their map.
In particular, only 39.6% of the MWN-07 Google Maps connections comprise of con-
nections that transfer less than 10 KB, whereas 81.8% of the ALL-HTTP connections
from MWN-07 transfer less than 10 KB. Similar observations hold for the LBNL-07 data
set. Moreover, we note that the shape of the ALL-HTTP connection has not changed
substantially over the years if compared with results from 1997 [11].
Google Mail differs and shows a clear spike for 3 bytes requests. This is due to
periodic server polling by the client-side AJAX engine of Google Mail. Once we move
from HTTP connections to HTTP sessions (Figure 5), this artifact is removed and the
probability mass of all Selected-4 applications clearly lies to the right of that for ALL-
HTTP trafﬁc. This is reﬂected in the median but not in all means. But recall that the
mean is dominated by the very large transfers within the ALL-HTTP trafﬁc.
We next move to the number of HTTP request within a session. Figures 7 and 8 show
the CCDF and PDF for ALL-HTTP and Selected-4 sessions in the MWN-07 data set.
These ﬁgures highlight the “chatty” nature of the Selected-4 applications - on average
38
F. Schneider et al.
they issue many more requests than ALL-HTTP trafﬁc whose ﬁrst ﬁfty percent of the
sessions are limited to 2 requests. Part of these additional requests are due to the Web 2.0
characteristics of the Selected-4 applications while the others are likely due to longer
session duration. Interestingly, a look at the PDF reveals that Google Maps issues more
requests than the email or social networking applications. A likely explanation is that
Google Maps implements pre-fetching more aggressively.
The typical duration of an ALL-HTTP session (Figure 6), is shorter than for AJAX
enabled applications. Half of the ALL-HTTP sessions last between 0.008 and 2.13 sec-
onds (5% – 55% quantile across all sessions) while 50% of Google Maps sessions in
the MWN-07 data set last between 13.04 seconds and 2 hours and 9 minutes (30% –
80% quantile across all sessions). On the other hand the ﬁrst period only accounts for
20.7% of the Google Maps session while the second only accounts for 23.87% of the
ALL-HTTP trafﬁc. One reason for the longer session duration may be that these speciﬁc
applications are able to keep the users attention longer than a typical web site. Overall
these characteristics indicate that AJAX enabled applications last longer and are more
active than ALL-HTTP sessions.
Finally, Figures 9 and 10 show the inter-request-times between requests within a