blame. This honest node, say 𝑝𝑖 has all the shares for every honest
node that does not have a share. Therefore, all honest nodes together
have 𝑡 + 1 shares, which guarantees reconstruction to the unique
secret 𝑠 that was committed except with negl(𝜅) probability. If no
ack certificate is formed, then all the honest nodes, agree on ⊥, thus
satisfying the Commitment requirement with high probability of
1 − negl(𝜅), where the probability is over forging digital signatures
and the adversary generating incorrect witnesses.
□
Lemma B.17.
If an honest node sends an ack for a sharing block
𝑆𝐵 in epoch 𝑒, then (i) all honest nodes receive the sharing block 𝑆𝐵
in epoch 𝑒, (ii) all honest nodes receive their respective secret shares
corresponding to sharing block 𝑆𝐵 within Δ time of entering epoch
𝑒 + 1.
Proof. Suppose an honest node 𝑝𝑖 sends an ack for sharing
block 𝑆𝐵 := ⟨Commitment, VSS. (cid:174)𝐶, 𝑒, 𝑧𝑠𝑒⟩𝐿𝑒 at time 𝜏 in epoch 𝑒.
19
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3520Node 𝑝𝑖 must have received up to 𝑡 blame messages. This im-
plies at least one honest node 𝑝 𝑗 received a valid share VSS.s𝑖
and sharing block 𝑆𝐵 within 3Δ time in epoch 𝑒 and invoked
Deliver(Commitment, 𝑆𝐵, 𝑧𝑠𝑒, 𝑒). Let 𝜏′ be the time when node 𝑝 𝑗
invoked Deliver(Commitment, 𝑆𝐵, 𝑧𝑠𝑒, 𝑒). The earliest node 𝑝𝑖 sends
an ack for 𝑆𝐵 is when it waits until epoch-timer𝑒 ≥ 5Δ (i.e., 6Δ
in epoch 𝑒) and does not detect any equivocation by 𝐿𝑒 or any
blame messages. Due to Δ delay between honest nodes entering
into epoch 𝑒, this time corresponds to 𝜏′ + 2Δ in the worst case.
This implies no honest node received an epoch 𝑒 equivocation by
time 𝜏′ + Δ. By Fact B.1, all honest nodes receives the sharing block
𝑆𝐵. This proves part (i) of the Lemma.
For part (ii), node 𝑝𝑖 can send ack on two occasions: (a) when it
does not detect any equivocation or blame until its epoch-timer𝑒 ≥
5Δ, and (b) when leader 𝐿𝑒+1 sent valid secret shares for every
blame message it forwarded and does not detect any equivocation
by time 𝜏.
In case (a), node 𝑝𝑖 did not detect any equivocation or blame
messages until its epoch-timer𝑒 > 5Δ at time 𝜏. Observe that all
honest nodes must have received valid shares corresponding to the
sharing block 𝑆𝐵 within 3Δ time in epoch 𝑒; otherwise node 𝑝𝑖 must
have received blame message by time 𝜏 (since honest nodes may
enter epoch 𝑒 with Δ time difference and send blame message if no
valid secret shares received within 3Δ time in epoch 𝑒). In addition,
no honest node received an equivocating sharing block 𝑆𝐵′ within
3Δ time in epoch 𝑒; otherwise, node 𝑝𝑖 must have received a share
for 𝑆𝐵′ (via Deliver) by time 𝜏. Thus, all honest nodes receive their
respective secret shares corresponding to sharing block 𝑆𝐵 in epoch
𝑒 (i.e., within Δ time of entering epoch 𝑒 + 1).
In case (b), node 𝑝𝑖 receives valid secret shares from leader 𝐿𝑒+1
for every blame (up to 𝑡 blame) messages it forwarded and detected
no equivocation by time 𝜏. Observe that node 𝑝𝑖 received 𝑓 ≤ 𝑡
blame messages and received valid shares for every blame message
it forwarded. This implies at least 𝑛 − 𝑡 − 𝑓 honest nodes have
received valid shares for sharing block 𝑆𝐵 from leader 𝐿𝑒+1 within
3Δ in epoch 𝑒; otherwise, node 𝑝𝑖 would have received more than
𝑓 blame message by the time its epoch-timer𝑒 = 5Δ. Since, node
𝑝𝑖 forwards 𝑓 received secret shares corresponding to 𝑓 received
blame message in epoch 𝑒 and honest nodes enter epoch 𝑒 + 1
within Δ time, all honest nodes receive their respective secret shares
corresponding to sharing block 𝑆𝐵 within Δ time of entering epoch
𝑒 + 1.
□
Theorem B.18 (Consistent Beacon). For any epoch 𝑒, all honest
nodes reconstruct the same randomness 𝑅𝑒 and output the same beacon
O𝑒.
Proof. Honest nodes output the same randomness 𝑅𝑒 and out-
put the same beacon O𝑒 in epoch 𝑒 if all honest nodes receive
𝑡 + 1 valid homomorphic shares for the same set of secrets. This
condition is satisfied if all honest nodes (i) have consistent Q(𝑝𝑖),
∀𝑝𝑖 ∈ P and consistent P𝑟 in each epoch, (ii) {Dequeue(Q(𝑝𝑖)) ≠
⊥,∀𝑝𝑖 ∈ P \ P𝑟} in each epoch, and (iii) share valid homomorphic
shares corresponding to dequeued secret shares.
For part(i), we show all honest nodes have consistent Q(𝑝𝑖),
∀𝑝𝑖 ∈ P and consistent P𝑟 in every epoch.
20
We prove part (i) by induction on epochs. Consider the base
case for epochs 1 to 𝑡. During setup phase, each node is assigned
𝑚 = 𝑛+𝑡 tuples (with each tuple containing secret shares, witnesses
and commitments) for each Q(𝑝𝑖), ∀𝑝𝑖 ∈ P (i.e., 𝑚 ∗ 𝑛 secrets in
total). Since, removing a Byzantine node requires 𝑡 + 1 epochs, all
honest nodes have P𝑟 = ∅ for epochs 1 to 𝑡. In addition, no honest
node update Q(𝑝𝑖) during epochs 1 to 𝑡. Thus, for epochs 1 to 𝑡, all
honest nodes have consistent Q(𝑝𝑖), ∀𝑝𝑖 ∈ P and P𝑟 .
We assume part(i) holds until epoch 𝑒 − 1.
Consider an epoch 𝑒 > 𝑡. In epoch 𝑒, all honest nodes up-
date only Q(𝐿𝑒−𝑡). If 𝐿𝑒−𝑡 proposed a valid block 𝐵𝑙 (with 𝑏𝑙 =
(𝐻(𝑆𝐵), ack-cert(𝑆𝐵)) for some commitment 𝑆𝐵 and 𝐵𝑙 is commit-
ted by epoch 𝑒, all honest nodes update Q(𝐿𝑒−𝑡) with 𝑛 tuples
containing secret shares, witnesses and commitments in 𝑆𝐵 (by
Lemma B.17, all honest nodes receive commitments and secret
shares in 𝑆𝐵 before epoch 𝑒). Otherwise, all honest nodes update
P𝑟 to exclude 𝐿𝑒−𝑡 i.e., P𝑟 ← P𝑟 ∪ {𝐿𝑒−𝑡}. Thus, all honest nodes
should have consistent Q(𝐿𝑒−𝑡) by epoch 𝑒. Since honest nodes
do not update Q(𝑝𝑖 ≠ 𝐿𝑒−𝑡) and do not add 𝑝𝑖 into P𝑟 in epoch 𝑒,
by induction hypothesis, all honest nodes should have consistent
Q(𝑝𝑖) ∀𝑝𝑖 ∈ P and consistent P𝑟 in epoch 𝑒. This proves part(i).
Since, all honest nodes have a consistent Q(𝑝𝑖) ∀𝑝𝑖 ∈ P and consis-
tent P𝑟 , all honest nodes perform {Dequeue(Q(𝑝𝑖))∀𝑝𝑖 ∈ P \ P𝑟}
for common secrets.
Next, we show {Dequeue(Q(𝑝𝑖)) ≠ ⊥∀𝑝𝑖 ∈ P \ P𝑟} in epoch 𝑒.
Suppose for the sake of contradiction, Dequeue(Q(𝑝𝑖)) = ⊥ and
𝑝𝑖 ∉ P𝑟 in epoch 𝑒. Observe that, honest nodes update Q(𝑝𝑖) or
include 𝑝𝑖 in P𝑟 𝑡 + 1 epochs after node 𝑝𝑖 becomes an epoch
leader. Let 𝑒′ be the last epoch in which node 𝑝𝑖 last proposed with
𝑒′ ≤ 𝑒 − 𝑡. However, if node 𝑝𝑖 did not propose in 𝑒′, all honest
nodes would have removed 𝑝𝑖 by epoch 𝑒′ + 𝑡 ≤ 𝑒 and 𝑝𝑖 ∈ P𝑟 in
epoch 𝑒. A contradiction.
Finally, we show all honest nodes send valid homomorphic shares
for the dequeued secret shares. Observe that honest nodes only
dequeue secret shares corresponding to a committed block that
contains a valid ack certificate. By Lemma B.17 part(ii), all honest
nodes receive valid secret shares before honest nodes update their
queues. Thus, all nodes will dequeue common secret shares and
will receive at least 𝑡 + 1 valid homomorphic shares for a common
secrets and reconstruct the same randomness 𝑅𝑒 and output the
same beacon O𝑒.
□
Lemma B.19 (Liveness).
If the leader 𝐿𝑒 of an epoch 𝑒 is honest,
then (i) an ack certificate for its sharing block 𝑆𝐵 will form in epoch
𝑒 − 1, and (ii) all honest nodes commit (𝐻(𝑆𝐵), AC𝑒(𝑆𝐵)) in epoch
𝑒.
Proof. Consider an honest leader 𝐿𝑒 for an epoch 𝑒. Let 𝜏 be the
time when leader 𝐿𝑒 enters epoch 𝑒 − 1. Leader 𝐿𝑒 waits for Δ time
after entering epoch 𝑒 − 1 and must have sent valid shares VSS.s𝑖
and sharing block 𝑆𝐵 containing commitments to node 𝑝𝑖 ∀𝑝𝑖 ∈ P
at time 𝜏 + Δ.
Since honest nodes enter epoch 𝑒 − 1 within Δ time, all honest
nodes must have entered epoch 𝑒 − 1 by time 𝜏 + Δ. Leader 𝐿𝑒 could
have entered epoch 𝑒−1 Δ time before some honest nodes or Leader
𝐿𝑒 could have entered epoch 𝑒 − 1 Δ time after some honest nodes.
In any case, all honest nodes must have received valid secret shares
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3521and sharing block 𝑆𝐵 within 3Δ after entering epoch 𝑒 −1. Thus, no
honest nodes send blame in epoch 𝑒 − 1 and will receive no blame
messages from honest nodes within 6Δ time in epoch 𝑒 − 1 (i.e.,
until epoch-timer𝑒−1 > 5Δ).
Consider an honest node 𝑝𝑖. If node 𝑝𝑖 receives no blame mes-
sages from Byzantine nodes, it will send an ack for sharing block 𝑆𝐵
to 𝐿𝑒. On the other hand, if node 𝑝𝑖 receives up to 𝑡 blame messages
from Byzantine nodes, it forwards blame messages to 𝐿𝑒. Honest
Leader 𝐿𝑒 sends the shares corresponding to the blame messages to
node 𝑝𝑖 which node 𝑝𝑖 receives within 8Δ in epoch 𝑒 − 1. Moreover,
there is no equivocation from leader 𝐿𝑒. Thus, node 𝑝𝑖 sends an ack
for sharing block 𝑆𝐵 to 𝐿𝑒.
Thus, all honest nodes send ack for sharing block 𝑆𝐵 and leader
𝐿𝑒 receives 𝑡 + 1 ack message for sharing block 𝑆𝐵 within 10Δ (𝐿𝑒
may start epoch 𝑒 − 1 Δ time before node 𝑝𝑖) in epoch 𝑒 − 1. This
proves part (i) of the Lemma.
Since leader 𝐿𝑒 proposes a valid proposal (𝐻(𝑆𝐵), AC𝑒(𝑆𝐵)) in
epoch 𝑒, part(ii) follows immediately from Fact B.6.
□
Lemma B.20 (Guaranteed Beacon Output). For any epoch 𝑒 ≥ 1,
all the honest nodes output a new beacon output O𝑒.
Proof. Due to the round-robin leader selection, the honest nodes
propose in at least 𝑛 − 𝑡 epochs out of 𝑛 epochs. By Lemma B.19, all
honest nodes commit 𝑛 new secret shares in every honest epoch and
updates their queues after 𝑡 + 1 epochs. Thus, Dequeue(Q(𝑝𝑖)) ≠
⊥∀𝑝𝑖 ∈ P \ P𝑟 . where 𝑝𝑖 is an honest node. From the proof of
Theorem B.18, all honest nodes have consistent queues and P𝑟 in
each epoch. At the end of each epoch, all honest nodes dequeue
common secret shares and send homomorphic sums to all other
nodes. Thus, honest nodes will have 𝑡 + 1 valid homomorphic sums
and will output new beacon outputs in every epochs.
□
Lemma B.21 (Communication Complexity). Let 𝑓 ≤ 𝑡 be the
number of actual Byzantine faults, 𝜅 be the size of accumulator and
𝑤 be the size of witness. The amortized communication complexity of
the protocol is 𝑂(𝜅 𝑓 𝑛2 + (𝜅 + 𝑤)𝑛2) bits per epoch.
Proof. In the Block validation protocol, distributing 𝑂(𝜅𝑛)-
sized commitment costs 𝑂(𝜅𝑛2) bits in communication. Sending
corresponding 𝑂(𝜅𝑛)-sized secret shares and 𝑂(𝑤𝑛)-sized witness
incur 𝑂((𝜅 + 𝑤)𝑛2) communication. Up to 𝑓 Byzantine nodes can
always blame even if the epoch leader is honest. Thus, an epoch
leader needs to send 𝑂(𝜅 𝑓 𝑛)-sized secret shares while privately
opening the secret shares. The nodes also forward privately opened
secret secrets to nodes that blamed. This step costs 𝑂(𝜅 𝑓 𝑛2) com-
munication in an honest epoch. When the leader is Byzantine, it
can create a scenario when up to 𝑡 nodes send blame and hence,
this step has 𝑂(𝜅𝑡𝑛2) cost. Out of 𝑛 consecutive epochs, there can
be at most 𝑓 Byzantine epochs and 𝑛 − 𝑓 honest epochs. Hence,
this step has amortized complexity of 𝑂(𝜅 𝑓 𝑛2).
By Lemma B.8, the SMR protocol has a cost of 𝑂((𝜅 + 𝑤)𝑛2) bits
for input of size 𝑂(𝜅𝑛). The homomorphic sum of secret shares is
𝜅 and homomorphic sum of witness is 𝑤. Thus, all-to-all broadcast
of homomorphic sums incurs 𝑂((𝜅 + 𝑤)𝑛2). Thus, the amortized
communication complexity is 𝑂(𝜅 𝑓 𝑛2 + (𝜅 + 𝑤)𝑛2) bits per epoch.
□
21
Theorem B.22 (Secure VSS). Assuming a secure VSS scheme VSS,
the BRandPiper protocol is a secure verifiable secret sharing protocol
with the dealer as the leader of an epoch, and the rest of the nodes as
the verifiers.
Formally, we prove the security of VSS by proving the individual
Proof Sketch. The view of an adversary A in BRandPiper is
the same as the view of an adversary running one instance of iVSS
assuming a bulletin board. Therefore, an adversary that can break
the secrecy property in BRandPiper protocol can also break the
secrecy in iVSS, which in turn can break the secrecy property from
VSS (Theorem B.16). The commitment property has an additional
failure probability arising from the case where the adversary can
forge 𝑡 + 1 signatures which occurs with negl(𝜅) probability.
properties:
Secrecy: For an honest leader 𝐿𝑒 of epoch 𝑒, no honest node will
blame, and therefore an adversary A will only learn the 𝑡 shares
of its own corruption, and not learn any new share by blaming.
Therefore the probability of A of violating the secrecy property
is negl(𝜅) from the underlying VSS scheme, since the views are
identical to that of iVSS.
Correctness: For an honest leader 𝐿𝑒 of epoch 𝑒, from Lemma B.19,
all the honest nodes commit the 𝑆𝐵 with shares for the secret.
During the reconstruction for the beacon, every honest node 𝑝𝑖 ∈ P
use the same share for 𝑆𝑉𝐿𝑒,𝑖 with a high probability of 1 − negl(𝜅).
A Byzantine node 𝑝 𝑗 ∈ P cannot provide a valid witness VSS.𝜋𝐿𝑒,𝑗
for an incorrect share with probability better than negl(𝜅), thereby
ensuring that the correctness property is maintained.
Commitment: If an honest node commits a valid block 𝑆𝐵 from a