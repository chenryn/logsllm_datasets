NTFS transactions的研究
之前看到的transacted_hollowing(https://github.com/hasherezade/transacted_hollowing) 和 最近blackhat上
的⼀个议题rope，都⽤到了NTFS事务来达到隐藏⽂件免杀的效果，所以就学习了⼀下NTFS transactions的⼀些操
作。
介绍
NTFS transactions
https://docs.microsoft.com/en-us/windows/win32/fileio/about-transactional-ntfs
Transactional NTFS (TxF) 是在 Windows Vista 中引⼊的，作为将原⼦⽂件事务引⼊ Windows 的⼀种⽅
式。它允许 Windows 开发⼈员在具有单个⽂件的事务、涉及多个⽂件的事务以及跨越多个源的事务中进⾏
⽂件操作的事务原⼦性，例如注册表（通过 TxR）和数据库（例如 SQL）。
虽然 TxF 是⼀组强⼤的 API，但⾃ Windows Vista 以来，开发⼈员对该 API 平台的兴趣极其有限，主要是因
为其复杂性和开发⼈员在应⽤程序开发过程中需要考虑的各种细微差别。因此，Microsoft 正在考虑在未来
版本的 Windows 中弃⽤ TxF API，以便将开发和维护⼯作重点放在对⼤多数客户更有价值的其他功能和 API
上。
Transactional NTFS (TxF)即NTFS事务 和数据库的事务类似，开启事务后，对⽂件的修改、添加、删除都会在单独
的空间中，之后可以使⽤ commit 来提交修改到硬盘上，或者 rollback 回滚到⼀个初始状态。
Transactional NTFS (TxF) 是从Vista开始的，官⽅⽂档说在未来可能不可⽤，但⾄少⽬前的可⽤的。
代码
以transacted_hollowing的代码为例，https://github.com/hasherezade/transacted_hollowing/blob/main/tran
sacted_file.cpp
代码主要通过NTFS事务把payload写⼊进去，再从内存加载，我单独将NTFS事务相关的代码提取了出来。
    #include 
    #include 
    #include 
    #include "ntddk.h"
    #pragma comment(lib, "KtmW32.lib")
    #pragma comment(lib, "Ntdll.lib")
    DWORD options, isolationLvl, isolationFlags, timeout;
    options = isolationLvl = isolationFlags = timeout = 0;
    HANDLE hTransaction = CreateTransaction(nullptr, nullptr, options, isolationLvl, 
isolationFlags, timeout, nullptr); // 创建⼀个NTFS事务
    if (hTransaction == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to create transaction!" << std::endl;
        return INVALID_HANDLE_VALUE;
NTFS 事务在红队中的作⽤
TxF开启事物后，所有的操作在commit之前都不会写⼊硬盘，但是它会返回给你⼀个⽂件句柄，你可以在这⾥进⾏
正常的读写操作，之前调⽤ RollbackTransaction 函数进⾏回滚，⼜回恢复到初始状态，对操作系统来说，没有
任何的⽂件写⼊。
最重要的是对于杀毒来说，它也⽆法检测到你NTFS事务进⾏的操作。
在下载beacon代码时，可以⽤这种⽅法分段下载代码，或分段解密写⼊到NTFS事务中，最后从NTFS读取后进⾏
回滚，达到最终⽆⽂件。
    }
    HANDLE hTransactedFile = CreateFileTransactedW(dummy_name,
        GENERIC_WRITE | GENERIC_READ,
        0,
        NULL,
        CREATE_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL,
        hTransaction,
        NULL,
        NULL
    ); // 创建事务⽂件
    if (hTransactedFile == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to create transacted file: " << GetLastError() << 
std::endl;
        return INVALID_HANDLE_VALUE;
    }
    DWORD writtenLen = 0;
    // 写⼊⽂件
    if (!WriteFile(hTransactedFile, payladBuf, payloadSize, &writtenLen, NULL)) {
        std::cerr << "Failed writing payload! Error: " << GetLastError() << std::endl;
        return INVALID_HANDLE_VALUE;
    }
    CloseHandle(hTransactedFile); // 关闭⽂件句柄
    hTransactedFile = nullptr;
    // 回滚⽂件
    if (RollbackTransaction(hTransaction) == FALSE) {
        std::cerr << "RollbackTransaction failed: " << std::hex << GetLastError() << 
std::endl;
        return INVALID_HANDLE_VALUE;
    }
    // 关闭NTFS事务句柄
    CloseHandle(hTransaction);
    hTransaction = nullptr;
NTFS 事务也可以⽤作通信，在blackhat议题 rope 中，ntfs当作代码执⾏和通信的⼿段，因为只需要共享⼀个
hTransaction，就可以当作⽂件通信⼀样来做。