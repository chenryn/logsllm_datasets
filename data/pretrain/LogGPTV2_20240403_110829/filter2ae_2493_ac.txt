### 优化后的文本

在利用`S4U2Self`协议请求自身的ST时，`SourceCName`即为自身的名字`WINSRVSERVER`。通过调试信息可以查看`SourceCName`的具体内容：

```plaintext
kd> dt SourceCName
Local var @ 0x327f9e0 Type _KERB_INTERNAL_NAME*
0x0016e920 
   +0x000 NameType         : 0n1
   +0x002 NameCount        : 1
   +0x004 Names            : [1] _UNICODE_STRING "WINSRVSERVER"
```

随后，在`CheckSam`条件中会调用`KdcGetTicketInfo`来获取用户`WINSRVSERVER`的相关信息：

```c
KerbErr = KdcGetTicketInfo(
    &OutputPrincipal,
    0,                  // no lookup flags means sam name
    bRestrictUserAccounts,
    NULL,               // no principal name
    NULL,               // no realm name,
    TicketInfo,
    pExtendedError,
    UserHandle,
    WhichFields,
    ExtendedFields,
    UserInfo,
    GroupMembership
);
```

此时，`OutputPrincipal`的值为`WINSRVSERVER`，即我们自己的机器名`DC`。通过调试信息可以看到`OutputPrincipal`的具体内容：

```plaintext
kd> dt OutputPrincipal
Local var @ 0x327f928 Type _UNICODE_STRING
"WINSRVSERVER"
   +0x000 Length           : 0x18
   +0x002 MaximumLength    : 0x1a
   +0x004 Buffer           : 0x0016e92c  "WINSRVSERVER"
```

接下来，系统会调用`SamIGetUserLogonInformation2`在SAM中查找对应的账户信息。由于此时已经将创建的机器账号还原，所以并不能找到对应的账号，该函数会返回错误。但系统并不会直接提示找不到账号，而是会在其后面添加`$`符号，将其作为机器账号再次查找。

```c
Status = SamIGetUserLogonInformation2(
    GlobalAccountDomainHandle,
    LookupFlags,
    UserName,
    WhichFields,
    ExtendedFields,
    &UserInfo,
    &LocalMembership,
    &LocalUserHandle
);

if (((Status == STATUS_NOT_FOUND) || (Status == STATUS_NO_SUCH_USER)) &&
    (!IsValidGuid) &&
    ((LookupFlags & ~SAM_NO_MEMBERSHIPS) == 0) &&
    (UserName->Length >= sizeof(WCHAR)) &&
    (UserName->Buffer[UserName->Length/sizeof(WCHAR)-1] != L'$'))
{
    Status = KerbDuplicateString(&TempString, UserName);
    if (!NT_SUCCESS(Status))
    {
        KerbErr = KRB_ERR_GENERIC;
        goto Cleanup;
    }
    DsysAssert(TempString.MaximumLength >= TempString.Length + sizeof(WCHAR));
    TempString.Buffer[TempString.Length/sizeof(WCHAR)] = L'$';
    TempString.Length += sizeof(WCHAR);
    D_DebugLog((DEB_TRACE, "Account not found, trying machine account %wZ\n", &TempString));
    Status = SamIGetUserLogonInformation2(
        GlobalAccountDomainHandle,
        LookupFlags,
        &TempString,
        WhichFields,
        ExtendedFields,
        &UserInfo,
        &LocalMembership,
        &LocalUserHandle
    );
}
```

通过调试信息可以看到查找到的用户信息不再是`WINSRVSERVER`，而是变成了`WINSRVSERVER$`，也就是域控对应的机器账号`UserId = 0x3ed`。

```plaintext
kd> dt UserInfo
Local var @ 0x327f684 Type _USER_INTERNAL6_INFORMATION*
0x001602e0 
   +0x000 I1               : _USER_ALL_INFORMATION
   +0x0c8 LastBadPasswordTime : _LARGE_INTEGER 0x0
   +0x0d0 ExtendedFields   : 0x18
   +0x0d4 UPNDefaulted     : 0 ''
   +0x0d8 UPN              : _UNICODE_STRING ""
   +0x0e0 A2D2List         : (null) 
   +0x0e4 RegisteredSPNs   : (null) 
   +0x0e8 KeyVersionNumber : 5
   +0x0ec LockoutThreshold : 0

kd> dx -id 0,0,89de1678 -r1 (*((KDCSVC!_USER_ALL_INFORMATION *)0x1602e0))
(*((KDCSVC!_USER_ALL_INFORMATION *)0x1602e0))                 [Type: _USER_ALL_INFORMATION]
   [+0x000] LastLogon        : {0} [Type: _LARGE_INTEGER]
   [+0x008] LastLogoff       : {0} [Type: _LARGE_INTEGER]
   [+0x010] PasswordLastSet  : {0} [Type: _LARGE_INTEGER]
   [+0x018] AccountExpires   : {0} [Type: _LARGE_INTEGER]
   [+0x020] PasswordCanChange : {0} [Type: _LARGE_INTEGER]
   [+0x028] PasswordMustChange : {9223372036854775807} [Type: _LARGE_INTEGER]
   [+0x030] UserName         : "WINSRVSERVER$" [Type: _UNICODE_STRING]
   [+0x038] FullName         : "" [Type: _UNICODE_STRING]
   [+0x040] HomeDirectory    : "" [Type: _UNICODE_STRING]
   [+0x048] HomeDirectoryDrive : "" [Type: _UNICODE_STRING]
   [+0x050] ScriptPath       : "" [Type: _UNICODE_STRING]
   [+0x058] ProfilePath      : "" [Type: _UNICODE_STRING]
   [+0x060] AdminComment     : "" [Type: _UNICODE_STRING]
   [+0x068] WorkStations     : "" [Type: _UNICODE_STRING]
   [+0x070] UserComment      : "" [Type: _UNICODE_STRING]
   [+0x078] Parameters       : "" [Type: _UNICODE_STRING]
   [+0x080] LmPassword       : "" [Type: _UNICODE_STRING]
   [+0x088] NtPassword       : ".?废??樾??" [Type: _UNICODE_STRING]
   [+0x090] PrivateData      : "." [Type: _UNICODE_STRING]
   [+0x098] SecurityDescriptor [Type: _SR_SECURITY_DESCRIPTOR]
   [+0x0a0] UserId           : 0x3ed [Type: unsigned long]
   [+0x0a4] PrimaryGroupId   : 0x0 [Type: unsigned long]
   [+0x0a8] UserAccountControl : 0x2100 [Type: unsigned long]
   [+0x0ac] WhichFields      : 0x27120005 [Type: unsigned long]
   [+0x0b0] LogonHours       [Type: _LOGON_HOURS]
   [+0x0b8] BadPasswordCount : 0x0 [Type: unsigned short]
   [+0x0ba] LogonCount       : 0x0 [Type: unsigned short]
   [+0x0bc] CountryCode      : 0x0 [Type: unsigned short]
   [+0x0be] CodePage         : 0x0 [Type: unsigned short]
   [+0x0c0] LmPasswordPresent : 0x0 [Type: unsigned char]
   [+0x0c1] NtPasswordPresent : 0x1 [Type: unsigned char]
   [+0x0c2] PasswordExpired  : 0x0 [Type: unsigned char]
   [+0x0c3] PrivateDataSensitive : 0x1 [Type: unsigned char]
```

至此，我们成功地将用户`WINSRVSERVER`伪装成了域控自身`WINSRVSERVER$`。之后在`I_GetTGSTicket`中，为了获得`WINSRVSERVER`这个服务的相关信息，又再次调用`KdcNormalize`，其中的流程与上述基本相同，这也就是漏洞的第二次利用。成功的将请求的服务从`WINSRVSERVER`伪装成`WINSRVSERVER$`。

完成上述的两次利用后，其他过程都显得不再重要，但有一点仍然需要留意，便是关于PAC的问题。之前TGT中的PAC主体为`WINSRVSERVER`，又是如何切换为申请的`Administrator`的，对于之前的PAC又是如何处理的。

`S4U2self`协议的意义是服务器模拟用户向域控申请针对自身的ST，即给予用户访问服务的权限，所以返回的ST中应该插入的是用户的PAC。而上一步中我们申请的TGT中的PAC，并不在下图中的Service1向KDC认证的过程颁发的PAC中。明白了这点也就明白了为什么PAC会被替换。

以下堆栈及函数完成了生成ST并向其中添加了用户PAC：

```plaintext
kd> kb
# ChildEBP RetAddr      Args to Child              
00 0327f9ac 61ba4b9b     0327fb48 0327fea8 0327fea0 KDCSVC!I_GetTGSTicket+0x313   
01 0327fe44 61ba1901     00160958 000c5020 0327feb8 KDCSVC!HandleTGSRequest+0x77f   
02 0327fee0 61bae51e     0327ff30 00160958 00160968 KDCSVC!KdcGetTicket+0x25e    
03 0327ff34 70d173e6     00160940 00000562 00000000 KDCSVC!KdcAtqIoCompletion+0x15f  
04 0327ff58 70d18808     00000562 00000000 00084df4 NTDSATQ!ATQ_CONTEXT::IOCompletion+0x53 
05 0327ff84 70d189f2     00000000 00000562 00084df4 NTDSATQ!AtqpProcessContext+0x3c2  
06 0327ffb8 77e41be7     abcdef01 00000000 00000000 NTDSATQ!AtqPoolThread+0xbd    
07 0327ffec 00000000     70d18935 abcdef01 00000000 kernel32!BaseThreadStart+0x34   
```

```c
KerbErr = KdcGetS4UTicketInfo(
    S4UTicketInfo,
    &OldServiceTicketInfo, // tgt's account info.
    &S4UClientUserInfo,
    &S4UClientGroupMembership,
    pExtendedError
);

...

KerbErr = BuildTicketTGS(
    ServiceTicketInfo,
    RequestBody,
    SourceTicket,
    Referral,
    S4UTicketInfo,
    CommonEType,
    &NewTicket,
    pExtendedError
);  

...

KerbErr = KdcInsertInitialS4UAuthorizationData(
    &EncryptedTicket,
    pExtendedError,
    S4UTicketInfo,
    S4UClientUserInfo,
    &S4UClientGroupMembership,
    ((ServiceTicketInfo->UserId != DOMAIN_USER_RID_KRBTGT) &&
         ((ServiceTicketInfo->UserAccountControl & USER_INTERDOMAIN_TRUST_ACCOUNT) == 0)),
    pKeyToUse
);  
```

对于原本的TGT中的PAC并没有做任何处理，直接将其丢弃了。

### 总结
本文介绍了`CVE-2021-42278`和`CVE-2021-42287`的漏洞背景，并从系统层面详细分析了漏洞成因，其关键点在于`S4U2self`过程中的欺骗。

### 参考
* * *

希望优化后的文本更加清晰、连贯和专业。如果有进一步的需求或修改，请随时告知。