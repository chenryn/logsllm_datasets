请内存时，都会优先从Lookaside中申请内存，只有当Lookaside中的内存不够用时，才向系统申请更
多的内存，这样既可以节省分配时间，又能够避免产生过多的内存碎片。关于LookasideList的更多
信息可以参考文章《使用LookasideList分配内存》：http://www.mouseos.com/windows/kemel/
lookaside.html.
接下来，要调用的AfdTliGetTplnfo函数中，正是使用到了上面讲的Lookaside List，在
AfdTliGetTplnfo函数上下断点，然后逐步跟踪下去。
kd> u afd1AfdT1iGetTpInfo
afd!AfdTliGetTpInfo:
8e6ed33d 6a8c
push
eCh
8e6ed33f 6898296e8e
push
offset afd1_safe_se_handler_table+ex688 (8e6e2998)
8e6ed344 e8c75ffeff
cal1
afd1_SEH_pro1og4 (8e6d331e)
8e6ed349 8bf9
mov
edi,ecx
8e6ed34b a1843f6e8e
mov
eax, dword ptr [afdlAfdGloba1Data (8e6e3fe4)]
8e6ed35e 057881080e
add
eax, 178h
8e6ed355 50
push
eax
8e6ed356 e8ae62feff
cal1
afd1ExA1locateFromNPagedLookasideList (8e6d36e9)
// 跟进ExA1locateFromNPagedLookasideList 函数
afd1ExA1locateFromNPagedLookas1deList:
8e6d36e9 8bff
mov
ed1,ed1
8e6d36eb 55
push
ebp
8e6d368c 8bec
mov
ebp,esp
8e6d36ee 56
push
es1
8e6d36ef 8b7588
BOV
esi,dword ptr [ebp+8]
8e6d3612 ff468c
inc
dword ptr [esi+ech]
8e6d3615 8bce
mov
ecx,esi
8e6d3617 ff1588126e8e
ca11
dword ptr [afd1_imp_InterlockedPopEntrySList
(8e6e1288)]
8e6d361d 85ce
test
eax,eax
8e6d361f 75ef
jne
afd1ExA11ocateFronNPagedLookasideList+ex27 (8e6d363e)
8e6d3621 ff7620
push
dword ptr [esi+2eh]
8e6d3624 ff4610
Inc
dword ptr [es1+1eh]
8e6d3627 ff7624
push
dword ptr [esi+24h]
8e6d362a ff761c
push
dword ptr
[es1+1Ch]
8e6d362d ff5628
call
dword ptr [esi+28h]
ds:0023:867eb588=(afd1AfdA11ocateTpInfo (8e70af71))
AfAllocateTplnfo函数的原型如下，用于分配Tplnfo结构：
TpInfo *AfdA1locateTpInfo(PooL_TYPE Poo1Type, SIZE_T NumberOfBytes, ULONG Tag)
查看afd!AfdAllocateTplnfo调用的参数（当前栈项数据），可以看到分配的Tplnfo结构大小为
---
## Page 464
第9章：内核漏润分析445
0x108:
kd> dd esp 13
947bbaf8 e88eee0 888881e8 c6646641
可以看出，ExAllocateFromNPagedLookasideList函数是分配Tplnfo结构内存的，因此我们可以在
IDA的 F5反编译代码中将ExAllocateFromNPagedLookasideList返回值v2重命名为 tpinfo，而
AfdTliGetTplnfo函数最终返回设置成Tplnfo结构指针。
PVoID _fastcall AfdTl1GetTpInfo(unsigned int a1)
unsigned Int TpInfoElenentCount; // ed1@1
PVOID tpinfo; // eax81
PVOID v3; // esi@1
PVoID result; // eaxg2
TpInfoElementCount = a1;
//从 non-paged链节点里分配内存，返目TpInfo 结构指针
tpinfo =
ExA1locateFromNPagedLookasideList((PNPAGED_L0OKASIDE_LIST)&AfdGloba1Data[6] -ContentionC
ount);
foyugd - EA
1f ( tpinfo )
//设置TpInfo结构数据
 =（z+ ou（m））
=（E +oUTd（.COMo"））。
*(（_DwoRD *)tpinfo + 4)=(char *)tpinfo + 12;
=（s+oud（。omo））。
*(（_DwoRD *)tpinfo + 6) =(char *)tpinfo + 28;
0=（Et+oyud（。smo））。
 =（ts + oud（。 318））。
θ=（6 + oud（+G8mo））
-=（+oud（））
=（st+oyuTd（m）
=（t+oud（m））
1f （ TpInfoElementCount > AfdDefaultTpInfoElementCount )// TpInfoElementCount >3.因
为这里的代码，所以将v1重命名为TpInfoElementCount
//这里分配的字节数是ex18*count，也就是说，TpInfoElement结构大小为ex18
//分配后的pTpInfoElement 指针存储在tpinfo+ex2e的位置
*(（_DwoRD *)tpinfo + @x20) = ExA1locatePoolwithQuotaTag((PoOL_TYPE)ex1θu, @x18 *
---
## Page 465
446漏洞战争：软件漏洞分析精要
TpInfoE1ementCount, exC6646641u);
 = (0S + ≤A（。 31人8））
result = v3;
//返网TpInfo 结构指针
else
{
result = 0;
继续分析AffTransmitFile函数接下来的代码：
（0ZX9（8+（EA）MIH）。）T
// InputBufferLength & ex2ee > 0
LODwORD（v3）=AfdT1iGetTpInfo（3u）;//从wt命令结果可以看到AfdT1iGetTpInfo函数被调用
else
LODwORD(v3) = AfdTdiGetTpInfo(3);
EA = SA
//此时v5 和v3都指向 TpInfo结构
Entry = v3;
if ( !v3 )
goto LABEL_18;
v51 =(v3 +@x28);
//v51 = tpinfo + 0x28
 =（8zxθ + A）。
SEX +EA=A
EEA = 9A
EEA=（BEXe + EA）。
if ( v6 )
v54 = 1;
else
*(v3 + @x38) = AfdTransmitIoLength;
//tpinfo+ex38=AfdTransmitIoLength
V7 = Length;
if ( Length )
f
v8 = *v51;
//可以看出v51为TpInfoElementCount，所以用来乘以TpInfoElement结构大小ex18
//因此tpinfo+@x28=TpInfoElementCount，而v5+ex2θ代表TpInfoElement数组，所以这里
v5e指向的就是具体的TpInfoElement数组元素
TSA=8Tx+（eZx+SA）。=0SA
//vSe = TpInfoElement
eSA = 6A
v51 = v8 + 1;
v18 - VirtualAddress;
sppe =（8 +6）
// TpInfoElement +8 =VirtualAddress
*(v9 +4)= v7;
// TpInfoElement + 4 =length
---
## Page 466
第9章内核漏洞分析447
*v9 = 1;
1f (v39 & 0x10)
*v9 = ex88000881u;
//TpInfoElement+@=ex8eeeeee1，类似状态码 status
L0DwoRD(v3) = IoA11ocateMd1(v1θ, v7, 0, 1u, @);
*（v9+θxC）=v3;
//TpInfoElement+exC=pMDL，指向分配的内存描述符表MDL
if ( 1v3 )
goto LABEL_18;
MmProbeAndLockPages（v3,*(v2+ex2e),θ);
//锁定无效内存范围ex13371088~ex13371808+ex16ecca，最终触发异常
根据前面加粗代码的信息，我们大致可以绘制出Tplnfo和TplnfoElement的数据结构。
struct TpInfo (
TpInfoElement
*pTpInfoElement;
//+ex2e，TpInfoElement 数组指针
+*....
ULONG
TpInfoElementCount;
//+Bx28，TpInfoElement数组元素个数
ULONG
AfdTransmitIoLength;
//+0x38，传输的默认I0长度
struct TpInfoElement{
INT
status;
//+ex88，状态码
ULONG
length;
//+0x84.长度
PVOID
VirtualAddress;
//+8x88，虚拟地址
PVOID
*pMDL;
//+exBC，指向MDL内存描述符表的指针
ULONG
Reserved1 ;
//+ex1e，未知
ULONG
Reserved2 ;
//+8x14，未知
在AfdTransmitFile函数中调用loAllocateMdl分配完内存后，单步跟踪下去，它会调用
MmProbeAndLockPages去锁定内存范围0x13371000~0x13371000+0x16ecca（均是由PoC中的代码设置
的值），该内存范围属于无效地址，因此会触发异常。
kd> p
afd1AfdTransmitF11e+ex177:
8e7e7faf 6aee
push
kd> p
afd1AfdTransmitF11e+Bx179:
---
## Page 467
448漏洞战争：软件漏洞分析精要
8e7e7fb1 efb64b2e
movzx
ecx,byte ptr [ebx+2eh]
kd> p
afd1AfdTransnitF11e+ex17d:
8e7e7fb5 51
push
ecx
kd> p
afdlAfdTransmitFile+ex17e:
8e7e7fb6 5e
push
kd> p
eax
afd!AfdTransmitFile+ex17f:
8e7e7fb7 ff1578b26f8e
ca11
dword ptr [afd1_imp_MmProbeAndLockPages (8e6fb278)]
kd> dd esp 13
94953b3c 86e5fa20 000000e1 000000ee
kd> dt _MDL 86e5fa20
ha11_MDL
+exeee Next
:(nu11)
+ex8e4 51ze
:15e0
+8x886 Md1F1ags
+exee8 Process
:8
:(nu11)
+exeec MappedSystemVa : (nu11)
+ex01e StartVa
: @x13371000
+8x814 ByteCount
：ex16ecca
+8x818 Byte0ffset
: @x337
kd> dd 13371eee
13371000
eeeeeeee ceeeeeee eeeeeeee eeeeeeed.
13371010
13371820
13371030
13371040
13371050
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
13371868
eeeeeeee etieeeee eeitiiee eeeeeiie
13371070
eeeeeeee eeeeeeee eeeeeeee eeeeeeee
触发异常后，程序会去调用AfdRetumTplnfo函数，如图9-40所示。
在AfdRetumTplnfo下断点，然后单步执行MmProbeAndLockPages函数后，确定会触发异常直接
断下来：
kd> b1
θe 8e7e7e38
eee1 (eee1) afdlAfdTransmitFile
1 e 8e724e6a
eee1 (eee1) afd!AfdReturnTpInfo
kd> p
afd!AfdTransmitF1le+Bx17f:
---
## Page 468
第9章内核漏润分析449
8e7e7fb7 ff1578b26f8e
ca11
dword ptr [afd!_imp_MmProbeAndLockPages (8e6fb278)]
kd> p
Breakpoint 1 hit
afd1AfdReturnTpInfo:
8e724e6a 8bff
mov
edi,edi
Ixceptin
1oc_2038E
s,[]
ebp
AfdRetumTplnfo函数
触发异常调用
34]
,
call
图9-40调用AfdReturnTpInfo函数
在AfdRetumTplnfo函数中，由于在释放MDL资源后，未对TplnfoElement+OxC指针做清空处理，