OTC, we use a bandpass ﬁlter to extract the PCR code by
scoping down to each OTC-indexed channel in a sequence. For
example, the upper and lower frequency bounds of the pass-
band are set as 21.6-21.95kHz, 18.8-19.15kHz, 21.6-21.95kHz
and 20.8-21.15kHz when the OTC code is “9207” as shown
in Figure 6 (b). As a result, only the PCR digits at
the
right channels pass the ﬁlter, while the incorrectly encoded
PCR digits are ﬁltered out. We detect the coding errors by
examining the SNRs of all coding channels both before and
after ﬁltering. The SNR examination before ﬁltering is to make
sure the coding complies with the rule: only one channel is
encoded at each time slot. The examination after ﬁltering is to
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
61039
100200300400500600700800900Time (ms)16182022Frequency (kHz)-140-120-100-80-60-40Power/frequency (dB/Hz)100200300Time (ms)16182022Frequency (kHz)-140-120-100-80-60-40Power/frequency (dB/Hz)0100200300400Time (ms)-1-0.500.51Amplitudedetect whether there are coding errors. The SNRs of all PCR
digits are used to verify the PCR code as the physical layer
coding features. We next examine the biometric features.
3) PCR Spectrogram Derivation: We derive the spectro-
gram of each PCR digit as biometric features to describe the
PCR deﬁned by Equation 3 in the frequency domain. As shown
in Figure 3, the spectrogram describes the temporal changes
of the resulted signal at each frequency, after the original
speaker signal passes a speciﬁc gripping-hand system. It is
a measurement of the three subsystem responses (Hd, Hr and
Hv) regarding the frequencies and the waveform patterns of
the speaker signal. The spectrogram is computed based on the
Discrete-Time Short-Time Fourier Transform (DT-STFT) as
t+T−1(cid:88)
DT ST F T (t, f ) =
s(τ )w(τ − t)e
−j2πf τ ,
(7)
τ =t
where t and f are the time and frequency indexes, and w(t) is
a window function with length T . Each pixel of the 2D image,
spectrogram, at the coordinate (t, f ) is then computed as
spectrogram(t, f ) = |DT ST F T (t, f )|2.
(8)
4) PCR Spectrogram Time Series: In order to balance the
spectrogram resolution and the decoding algorithm’s com-
plexity, we divide each PCR spectrogram into three pieces,
which separately describe three different stages of the PCR.
Speciﬁcally, the ﬁrst spectrogram (0-25ms) mainly captures
the palm’s impact on the dominant direct-path signal. The
second (25-50ms) and third (50-75ms) focus on the reﬂected
signals and the induced surface vibration sounds. All of the
three spectrogram pieces show user-distinctive patterns and
are input in 2D-image time series into the PCR decoder for
veriﬁcation. The 75-100ms subsegment is not utilized, because
the sound degrades over 20dB in this period. Furthermore,
using spectrogram time series also adds difﬁculties to the PCR
digit forgery. While the direct-path signal can be synthesized,
it is hard to forge the reﬂections and the surface vibrations
that are byproducts affected by many other factors.
5) CNN-based PCR Digit Veriﬁcation: When distinguish-
ing people’ hands from each PCR digit, we have the following
considerations for the algorithm design: 1) The algorithm
needs to be powerful to distinguish the minute differences
of the acoustic signals modiﬁed by different hands; 2) The
behavioral inconsistency of the user (e.g., the gripping pose
changes) must be addressed; 3) The remaining ambient noises
after denoising need to be tolerated; 4) The algorithm must
have reasonable complexity to be usable for handheld devices.
After testing multiple learning-based algorithms, we ﬁnd the
Convolutional Neural Network (CNN) model best meets the
above requirements. CNN is a deep-learning model widely
used for ﬁnding patterns in images. It
is thus good for
capturing a gripping hand’s characteristics from the 2D spec-
trogram images while tolerating ambient noises and behavioral
inconsistency. When using PCR-Auth for the ﬁrst time, the
user is allowed to deﬁne a customized gripping hand pose, and
a ﬂoating button on the screen marks the user’s thumb location,
which is displayed later for the user to recall the hand pose.
But when the user grabs the device for different times, the
Fig. 7: Illustration of the cluster-based PCR Code Veriﬁer.
grabbing actions may result in more than one patterns. We thus
leverage the CNN model’s strong multi-class classiﬁcation
capability to label multiple hand-grip patterns for each user.
Speciﬁcally, when training the CNN model, the user is asked
to re-grab the device multiple times, just as setting up the
ﬁnger ID by pressing and lifting a ﬁnger multiple times [30].
The per-user CNN model is then created and stored in the
device. Additionally, we design the CNN model with ﬁve
convolutional layers and a small number of ﬁlters, which is a
CNN architecture widely used for mobile devices [31].
The architecture of our CNN model is shown in Appendix
Table VI. In particular, we use the Rectiﬁed Linear Unit
(ReLU) for the activation function to speed up the training,
and each activation layer is followed by a 3 × 3 max-pooling
layer to downsample the feature maps. The last max-pooling
layer pools the input feature map globally over time to cope
with the temporal variances of the spectrogram and reduces
the parameter number in the ﬁnal fully connected layer. In
addition, we apply the batch normalization layers to normalize
the output of each layer and a dropout layer to suppress over-
ﬁtting. The cross-entropy is used as the loss function, and the
softmax layer outputs the ﬁnal CNN scores of each input.
CNN Scores of the Input. We resize each spectrogram
into a 98 × 40 time-frequency image as the input of our
CNN-based algorithm. Two CNN scores (i.e., probabilities)
are computed, which are associated with two classes, User and
Non-User. A higher CNN score for the User class indicates a
higher conﬁdence to trust the biometric presented by the PCR
digit. Since each PCR digit is divided into three consecutive
spectrogram pieces and the smartphones have two microphone
channels, a PCR digit is decoded into 12 = 2 × 3 × 2 CNN
scores. For each m−digit PCR code, we thus obtain 12m CNN
scores as the biometric features for veriﬁcation.
6) Cluster-based PCR Code Veriﬁer: We develop a cluster-
based algorithm to verify a PCR code by integrating the
biometric features (12m CNN scores) and the coding features
(2m SNRs), which are projected into a high dimensional space
for binary classiﬁcation. Moreover, the proposed clustering
algorithm explores the relationships among the m PCR digits
to improve the decoding performance rather than treating each
digit alone. The user’s cluster is learned during the training
phase. Speciﬁcally, we generate a large number of random m-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
71040
7778798081828384Average PCR Digit SNR0.511.522.53CNN Score DistanceLegitimate UserOther UsersFake HandReplay - 1 digit wrongReplay - 2 digit wrongReplay - 3 digit wrongReplay - 4 digit wrongdigit PCR codes based on the user’s training data and a non-
user database. We also simulate diverse replay attack cases,
assuming they present 1, 2, ..., m − 1 correct PCR digits.
We then cluster these PCR codes based on their CNN scores
and SNRs to ﬁnd the user’s cluster and its center and radius.
During authentication, we calculate the Euclidean distance of
the PCR code to the user’s cluster center and verify the user
via a threshold-based method.
Figure 7 illustrates the 2D clustering results of 240 random
4-digit PCR codes in the plane of CNN score distance and
average SNR. We observe that the legitimate user’s PCR code
cluster is clearly separated from the other users, the different
cases of replay attacks and a fake silicone hand. By presenting
more correct digits, the replay-attack clusters are closer to the
user, regarding both CNN score and SNR. For example, the
replayed PCR codes with 1 digit error have the smallest CNN
score distances and the closest average digit SNR to the user.
But 1-digit error is sufﬁcient to identify them as non-valid
inputs. In comparison, the inputs from the other users and the
fake hand are valid as that of the user, which shows the similar
digit SNRs. But their biometric features are distinguished from
the user by our CNN model. We ﬁnd that though the user
cluster has a wide dispersion along the CNN score distance due
to behavioral inconsistency, it is small enough to be separated
from the other clusters. Figure 7 indicates that only breaking
the coding sequence or replicating the biometric features alone
is hard to attack PCR-Auth. We thus further design two attacks
that can forge both simultaneously in Section V-E3.
IV. METHODOLOGY AND EVALUATION CRITERIA
Experimental Setup. We experiment with six different
mobile device models ranging from $140 to $350, including
Samsung Galaxy Note5 and S8, Xiaomi10, Google Pixel2,
LG K50 and Moto G8. The S8 phone is used in all scenarios.
The stimulus signal is played through the phone speaker at
48kHz. Moreover, only 50% volume is used to reduce power
and disturbances. The signal is recorded by the mobile device’s
two microphones, Mic 1 (i.e., top) and Mic 2 (i.e., bottom)
with 48kHz sampling rate. We recruit 40 participants (26 males
and 14 females) aged from 24 to 40 for experiments. The
participants are formed by graduate students and faculties,
and each is given a $10 gift card for incentive. The data are
anonymized and processed ofﬂine. This study is approved by
LSU Institutional Review Board with Application No. 4305.
Data Collection. The participants are asked to grip each
given device for 10 minutes to get familiar with it before data
collection. They are allowed to choose self-deﬁned gripping-
hand pose, and the most comfortable one is suggested. A
ﬂoating button is provided to mark the thumb location on
the screen, which is displayed later to recall the participant’s
memory of the gripping-hand pose. Each participant’s data
is collected in two sessions spaced by at least three weeks
apart, with the ﬁrst only used for training and the second for
testing. A session lasts about 30 minutes. In the ﬁrst session,
the stimulus signal for training as shown in Figure 6(a) is
repeatedly played 20 times, and the participants are asked
to re-grab the device from a table for each time to present
behavioral inconsistency. re-grab-1 is collected, and we re-
spectively choose each participant as the user and the others
as the non-user to train each per-user model. In the second
session, the same experiment is repeated 40 times, and re-
grab-2 is collected, which is used for the basic PCR analysis
in Section V-A. Moreover, in the second session, the pcr-
code data set is collected for evaluating PCR-Auth, where the
stimulus signal encoded by a set of 40 different OTC codes
is played similar to Figure 6(b). 40 PCR codes are collected
from each participant, when a re-grab is required each time to
imitate an authentication session.
Evaluation Metrics. We ﬁrst conduct the basic PCR anal-
ysis to examine the accuracy performance of using the bio-
metric PCR to distinguish users, which is deﬁned as the ratio
of accurately classiﬁed test instances over all test instances.
We then evaluate the authentication performance of PCR-
Auth using PCR codes. In particular, we compute the False
Rejection Rate (FRR) to examine the ratio that legitimate users
are mistakenly rejected and the False Acceptance Rate (FAR)
to show the success rate of an adversary to attack the system.
V. PERFORMANCE EVALUATION
A. Basic Analysis
1) Stimulus Signal Duration and Bandwidth: When using
a chirp signal for biometric encoding, a question is how to
select its duration and bandwidth. Using coding chirps with
narrower bands allows extracting more different PCR digits for
biometric encoding, and using shorter chirps enables encoding
more digits within the limited time. However, the shorter du-
ration and narrower bandwidth also mean the lower resolution
to describe the user’s PCR. To address the above trade-off, a
critical task is to explore the extent of the stimulus signal’s
duration and bandwidth. We ﬁrst ﬁx the chirp bandwidth to be
100Hz and examine the chirp lengths from 5ms to 500ms. We
ﬁnd that the PCRs are distinguished accurately by all the tested
short chirps equaling or greater than 10ms. In particular, the
accuracy performance increases fast from 80% to 92.5% when
the signal duration changes from 5ms to 10ms. After 10ms,
the performance has a slower increasing trend. For example,
when using 20ms and 500ms signals, we achieve 93% and
95% accuracy respectively. The detailed signal duration study
is shown in Appendix Figure 16(a). The results conﬁrm the
feasibility to extract PCR using short-duration signals.
We next ﬁx the chirp duration to be 10ms and examine
the bandwidth by changing it from 100Hz to 4kHz. We
observe that the user’s PCR is veriﬁed accurately when the
bandwidth is no less than 100Hz, starting from which the
performance has a slow increasing trend. For example, the ac-
curacy performances are 92.5%, 95.2%, 98%, 98.7% at 100Hz,
200Hz, 350Hz and 500Hz. When the bandwidth is lower than
100Hz, the performance has a drastic drop. The detailed signal
bandwidth study is shown in Appendix Figure 16(b). The
results conﬁrm the feasibility of using narrow-band signals
to distinguish PCRs.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
81041
(a) Different code lengths
(b) ROC curves of 4- and 6-digit code
(a) 4-digit PCR code
(b) 6-digit PCR code
Fig. 8: Performance of PCR-Auth and coding gains.
Fig. 9: Performance of different device models.
2) PCR Coding Channels and Mic1&2: Based on the above
study, we choose 25ms chirps with a 350Hz bandwidth as
coding signals. In the ultrasonic frequency range 17-22kHz,
we ﬁnd 12 exclusive channels as candidates. We now evaluate
the veriﬁcation performance of these channels. Table I presents
the accuracy performances of these channels, when Mic1,
Mic2 or both mics of S8 phone are used, respectively. We
ﬁnd that the 40 participants’ PCRs are distinguished accurately
on 10 channels, which achieve an average of 91.3% accuracy
when two mics are used. We thus choose the 10 channels for
decimal encoding. Moreover, we ﬁnd that the performances of
coding channels vary. For example, the accuracy achieved by
Channel 2, 4, 6 and 9 is 89.6%, 89.1%, 96.4% and 93.1%,
respectively, when two mics are used. The results conﬁrm the
frequency-diversity nature of PCR.
When comparing the microphones, we ﬁnd that Mic 2
(bottom) close to the speaker performs better than Mic 1 (top)
for most channels. The result contradicts with the intuition that
the top mic-received signals should present higher accuracies
because they travel across the entire smartphone body and are
more heavily affected by the gripping hand. The reason is that
Mic 2 sounds have much higher SNR and are less sensitive
to the user’s behavioral inconsistency. The integration of the
two mics makes a more robust authentication system.
B. Performance of PCR-Auth
1) Security Gains of PCR Code: We now present
the
performance of PCR-Auth with different code lengths and
compare it with a naive decoder, which treats each PCR digit
alone for decoding rather than leveraging their relationships.
Figure 8 (a) shows the user veriﬁcation accuracy when 1-digit
to 6-digit PCR codes are used respectively. We observe that
TABLE I: Performance at all PCR coding channels (the 25ms
and 350Hz chirp is used).
Ch.
0
1
2
3
-
4
5
-
6
7
8
9
Freq. Range
17.2-17.55kHz
17.6-17.95kHz
18.0-18.35kHz
18.4-18.75kHz
18.8-19.15kHz
19.2-19.55kHz
19.6-19.95kHz
20.0-20.35kHz
20.4-20.75kHz
20.8-21.15kHz
21.2-21.55kHz
21.6-21.95kHz
Average
Mic 1 Mic 2 Mic 1+2
0.742
0.716
0.696
0.718
0.653
0.774
0.781
0.599
0.827
0.836
0.902
0.895
0.789
0.864
0.852
0.896
0.939
0.763
0.891
0.929
0.653
0.964
0.927
0.933
0.931
0.913
0.847
0.835
0.868
0.908
0.737
0.842
0.887
0.625
0.954
0.870
0.682
0.805
0.850
both methods achieve 91.3% accuracy with 1 digit PCR code.
But when using longer PCR codes, the performance of the
naive decoder decreases drastically, because it requires all PCR