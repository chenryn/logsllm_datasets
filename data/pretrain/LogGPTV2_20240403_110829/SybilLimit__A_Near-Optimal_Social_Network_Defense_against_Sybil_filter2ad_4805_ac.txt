record KS under the name of that tail (more speciﬁcally, un-
der the name of “KA→KB” where KA and KB are A’s and
B’s public key, respectively). Notice that B may potentially
overwrite any previously recorded key under the name of
that tail. When B records KS, we say that S registers its
public key with that tail. Our veriﬁcation protocol, described
later, requires that S know A’s and B’s public keys and IP
7
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:45 UTC from IEEE Xplore.  Restrictions apply. 
Sybil nodes  Honest nodesintersectionVerifierExecuted by each suspect S:
1. S picks a uniformly random neighbor Y ;
2. S sends to Y : h1, S’s public key KS, MAC(1||KS)i with the MAC generated using the edge key between S and Y ;
Executed by each node B upon receiving a message hi, KS, MACi from some neighbor A:
1. discard the message if the MAC does not verify or i  w;
2. if (i = w) { record KS under the edge name “KA→KB” where KA and KB are A’s and B’s public key, respectively;}
look up the routing table and determine to which neighbor (C) the random route should be directed;
3.
4. B sends to C: hi + 1, KS, MAC((i + 1)||KS)i with the MAC generated using the edge key between B and C;
else {
}
Figure 3. Protocol for suspects to do random routes and register their public keys.
veriﬁers. Veriﬁers do not need to register their public keys—
they only need to know their tails. Thus in each v-instance,
SybilLimit invokes the protocol in Figure 3 once for each
veriﬁer, with reversed routing tables (Figure 4).
Performance overheads. While SybilLimit uses the same
technique as SybilGuard to do random routes, the overhead
incurred is different because SybilLimit uses multiple in-
√
stances of the protocol with a shorter route length. Interest-
ingly, using Θ(
m) instances of the random route protocol
√
does not incur extra storage or communication overhead by
itself. First, a node does not need to store Θ(
m) routing
tables, since it can keep a single random seed and then gener-
ate any routing table on the ﬂy as needed. Second, messages
√
in different instances can be readily combined to reduce
m) in-
the number of messages. Remember that in all Θ(
stances, a node communicates only with its neighbors. Given
that the number of neighbors d is usually quite small on aver-
√
age (e.g., 20), a node needs to send only d messages instead
of Θ(
m) messages. Finally, the total number of bits a
node needs to send in the protocol is linear with the number
of random routes times the length of the routes. Thus, the
√
total number of bits sent in the d messages in SybilLimit is
Θ(
n log n) in SybilGuard.
All these random routes need to be performed only one
time (until the social network changes) and the relevant in-
formation will be recorded. Further aggressive optimizations
are possible (e.g., propagating hashes of public keys instead
of public keys themselves). We showed [42] that in a million-
node system with average node degree being 10, an average
node using SybilGuard needs to send 400KBs of data every
few days. Under the same parameters, an average node using
10 ≈ 1300KB of
data every few days, which is still quite acceptable. We refer
the reader to [42] for further details.
Basic security properties. The secure random route proto-
col provides some interesting basic security guarantees. We
ﬁrst formalize some notions. An honest suspect S has one
tail in every s-instance, deﬁned as the tail of its random route
in that s-instance. We similarly deﬁne the r tails of a veri-
SybilLimit would send around 400 × √
√
m log n), as compared to Θ(
Figure 4. (i) Suspect S propagates KS for w
hops in an s-instance. (ii) KA and KB propa-
gated back to suspect S in an s-instance. (iii)
KC and KD propagated back to a veriﬁer V in
a v-instance.
addresses. To do so, similar to SybilGuard, SybilLimit in-
vokes the protocol in Figure 3 a second time, where every
node uses a “reversed” routing table (i.e., a random route
entering via edge xi will exit via edge i). This enables A and
B to propagate their public keys and IP addresses backward
along the route, so that S can learn about them (Figure 4).
Different from SybilGuard, SybilLimit invokes r indepen-
√
dent instances (called s-instances) of the previous protocol
for the suspects. The value of r should be Θ(
m), and later
we will explain how nodes can automatically pick the appro-
priate r. In every s-instance, each suspect uses the protocol
in Figure 3 to perform one random route and to register its
public key with the tail. Across all s-instances, a suspect will
thus register its public key with r tails. Additionally in every
s-instance, SybilLimit invokes the protocol a second time
for each suspect using reversed routing tables, so that the
suspects know their tails. The routing tables used in differ-
ent s-instances are completely independent. Note, however,
that all suspects share the same r s-instances—this is criti-
cal to preserve the desirable convergence/back-traceability
property among their random routes in the same s-instance.
Similarly, every veriﬁer performs r random routes. To
avoid undesirable correlation between the veriﬁers’ random
routes and the suspects’ random routes, SybilLimit uses
another r independent instances (called v-instances) for all
8
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:45 UTC from IEEE Xplore.  Restrictions apply. 
KAKBABSKDKCKS12DCV2w1wA12wSforward routesBreversed routesreversed routesUser and node dynamics. Most of our discussion so far
assumes that the social network is static and all nodes are
online. All techniques in SybilGuard to efﬁciently deal
with user/node dynamics, as well as techniques to properly
overwrite stale registration information for preventing certain
attacks [42], apply to SybilLimit without modiﬁcation. We
do not elaborate on these due to space limitations.
Figure 5. Escaping and non-escaping tails.
5.2. Veriﬁcation protocol
ﬁer. A random route starting from an honest node is called
escaping if it ever traverses any attack edge. The tail of an
escaping random route is called an escaping tail (Figure 5),
even if the escaping random route eventually comes back to
the honest region. By directing the random route in speciﬁc
ways, the adversary can control/inﬂuence to which directed
edge an escaping tail corresponds. But the adversary has no
inﬂuence over non-escaping tails.
In any given s-instance, for every attack edge connecting
honest node A and sybil node M, imagine that we perform
a random route starting from the edge “M→A”, until either
a subsequent hop traverses an attack edge or the length of
the route reaches w. Because the adversary can fake a series
of routes that each end on one of the edges on this route,
these edges are called tainted tails. Intuitively, the adversary
may register arbitrary public keys with these tails.
In a
given s-instance, one can easily see that the set of tainted
tails is disjoint from the set of non-escaping tails from honest
suspects. The reason is that random routes are back-traceable
and starting from a non-escaping tail, one can always trace
back to the starting node of the random route, encountering
only honest nodes. This means that an honest suspect will
never need to compete with the sybil nodes for a tail, as long
as its random route is non-escaping.
After the secure random route protocol stabilizes (i.e., all
propagations have completed), the following properties are
guaranteed to hold:
• In every s-instance, each directed edge in the honest
region allows only one public key to be registered.
• In every s-instance, an honest suspect S can always
register its public key with its non-escaping tail (if any)
in that s-instance.
• In every s-instance, among all the directed edges in
the honest region, sybil nodes can register their public
keys only with tainted tails. This is because nodes
communicate with only their neighbors (together with
proper authentication) and also because the counter in
the registration message is incremented at each hop.
• In every s-instance (v-instance), if an honest suspect S
(an honest veriﬁer V ) has a non-escaping tail “A→B”,
then S (V ) knows A’s and B’s public keys.
Protocol description. After the secure random route proto-
col stabilizes, a veriﬁer V can invoke the veriﬁcation pro-
tocol in Figure 6 to determine whether to accept a suspect
S. S must satisfy both the intersection condition (Step 2–
4 in Figure 6) and the balance condition (Step 5–7) to be
accepted.
The intersection condition requires that S’s tails and V ’s
tails must intersect (instance number is ignored when de-
termining intersection), with S being registered at the in-
tersecting tail. In contrast, SybilGuard has an intersection
condition on nodes (instead of on edges or tails). For the
balance condition, V maintains r counters corresponding
to its r tails (Figure 7). Every accepted suspect increments
the “load” of some tail. The balance condition requires that
accepting S should not result in a large “load spike” and
cause the load on any tail to exceed h · max(log r, a). Here
a is the current average load across all V ’s tails and h > 1 is
some universal constant that is not too small (we use h = 4
in our experiments). In comparison, SybilGuard does not
have any balance condition.
Performance overheads. The veriﬁcation protocol can be
made highly efﬁcient. Except for Steps 1 and 3, all steps
in the protocol involve only local computation. Instead of
directly sending Θ(r) public keys in Step 1, S can readily use
a Bloom Filter [25] to summarize the set of keys. In Step 3,
for every intersecting tail in X, V needs to contact one node.
On average, the number of intersections between a veriﬁer
V and an honest suspect S in the honest region is O(1) with
r = Θ(
m), resulting in O(1) messages. The adversary
may intentionally introduce additional intersections in the
sybil region between V ’s and S’s escaping tails. However, if
those extra intersecting nodes (introduced by the adversary)
do not reply, V can blacklist them. If they do reply and if
V is overwhelmed by the overhead of such replies, then the
adversary is effectively launching a DoS attack. Notice that
the adversary can launch such a DoS attack against V even
if V were not running SybilLimit. Thus such attacks are
orthogonal to SybilLimit.
√
5.3. Key ideas in SybilLimit, vis-`a-vis SybilGuard
This section highlights the key novel ideas in SybilLimit
that eventually lead to the substantial end-to-end improve-
9
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:45 UTC from IEEE Xplore.  Restrictions apply. 
escapingnon−escapingescapingHonest nodesSybil nodes1. S sends to V its public key KS and S’s set of tails {(j, KA, KB) | S’s tail in the jth s-instance is the edge “A→B”
and KA (KB) is A’s (B’s) public key};
// Apply the intersection condition (the instance number is ignored when determining intersection)
2. V computes the set of intersecting tails X = {(i, KA, KB) | (i, KA, KB) is V ’s tail and (j, KA, KB) is S’s tail};
3. For every (i, KA, KB) ∈ X, V authenticates B using KB and asks B whether S is registered under “KA→KB”
If not, remove (i, KA, KB) from X;
4. If X is empty then reject S and return;
// Apply the balance condition (ci is the counter for V ’s tail in the ith v-instance)
5. Let a = (1 +Pr
i=1 ci)/r and b = h · max(log r, a);
// see text for description of h
6. Let cmin be the smallest counter among those ci’s corresponding to (i, KA, KB) that still remain in X
(with tie-breaking favoring smaller i);
7. If (cmin + 1 > b) then reject S; otherwise, increment cmin and accept S;
Figure 6. Protocol for V to verify S. V has r counters c1, ...cr initialized to zero at start-up time.
√
ﬁrst is that it is impossible for a degree-d node to have more
that d distinct random routes, if we directly use SybilGuard’s
approach. SybilLimit observes that one can use many inde-
pendent instances of the random route protocol, while still
preserving the desired convergence/back-traceability prop-
erty. The second problem is more serious. SybilGuard relies
on the simple fact that the number of distinct routes from
the adversary is l. All slots on the same route must have
the same public key registered. This ensures that the total
number of sybil nodes registered is l. In SybilLimit, there
are r · w distinct routes from the adversary. Thus, a naive
design may end up accepting r · w = Θ(
m log n) sybil
nodes, which is even worse than SybilGuard. SybilLimit’s
key idea here is to perform intersections on edges instead
of on nodes. Because the stationary distribution on edges
√
is always uniform in any graph, it ensures that the ﬂip-side
of the Birthday Paradox holds. Namely, Θ(
m) slots are
both sufﬁcient and necessary for intersection to happen (with
high probability). Together with earlier arguments on the
number of slots in SybilLimit, this will eventually allow us
to prove that the number of sybil nodes with tails intersecting
with V ’s non-escaping tails (more precisely, V ’s uniform
non-escaping tails—see later) is O(log n) per attack edge.
Balance condition. In SybilGuard, the veriﬁer’s random
route is either escaping or non-escaping, resulting in an
“all-or-nothing” effect. For SybilGuard to work, this sin-
√
gle random route must be non-escaping. Because of the
n log n), the escaping probability will be Ω(1)
large l of Θ(
once g reaches Ω(
n/ log n). Using much shorter random
routes of length w in SybilLimit decreases such escaping
probability. But on the other hand, because a veriﬁer in
SybilLimit needs to do r such routes, it remains quite likely
that some of them are escaping. In fact, with r = Θ(
m)
and w = Θ(log n), the probability of at least one of the
r routes being escaping in SybilLimit is even larger than
the probability of the single length-l random route being
escaping in SybilGuard. Thus, so far we have only made the
“all-or-nothing” effect in SybilGuard fractional.
√
√
Figure 7. Balance condition example.
√
ments over SybilGuard.
Intersection condition. To help convey the intuition, we
will assume g = 1 in the following. In SybilLimit, each node
m) random routes of length w = Θ(log n)
uses r = Θ(
instead of a single random route of length l = Θ(
n log n)
as in SybilGuard.1 In SybilGuard, each node along a random