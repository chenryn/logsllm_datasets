**Authorï¼šLongofo@ Knownsec 404 Team**  
**Time: April 8, 2020**  
**Chinese version:**
Nexus Repository Manager 3 recently exposed two El expression parsing
vulnerabilities, [cve-2020-10199](https://support.sonatype.com/hc/en-us/articles/360044882533) and
[cve-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-cve-2020-10204-nexus-repository-manager-3-remote-code-execution-2020-03-31), both of which are found by GitHub security Lab
team's @pwntester. I didn't track the vulnerability of nexus3 before, so diff
had a headache at that time. In addition, the nexus3 bug and security fix are
all mixed together, which makes it harder to guess the location of the
vulnerability. Later, I reappeared
[cve-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-cve-2020-10204-nexus-repository-manager-3-remote-code-execution-2020-03-31) with @r00t4dm,
[cve-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31) is a bypass of
[cve-2018-16621](https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection-October-17-2018). After that, others reappeared
[cve-2020-10199](https://support.sonatype.com/hc/en-us/articles/360044882533).
The root causes of these three vulnerabilities are the same. In fact, there
are more than these three. The official may have fixed several such
vulnerabilities. Since history is not easy to trace back, it is only a
possibility. Through the following analysis, we can see it. There is also the
previous [CVE-2019-7238](https://support.sonatype.com/hc/en-us/articles/360017310793-CVE-2019-7238-Nexus-Repository-Manager-3-Missing-Access -Controls-and-Remote-Code-Execution-2019-02-05), this is a jexl
expression parsing, I will analyze it together here, explain the repair
problems to it. I have seen some analysis before, the article said that this
vulnerability was fixed by adding a permission. Maybe it was really only a
permission at that time, but the newer version I tested, adding the permission
seems useless. In the high version of Nexus3, the sandbox of jexl whitelist
has been used.
#### Test Environment
Three Nexus3 environments will be used in this article:
  * nexus-3.14.0-04
  * nexus-3.21.1-01
  * nexus-3.21.2-03
nexus-3.14.0-04 is used to test jexl expression parsing, nexus-3.21.1-01 is
used to test jexl expression parsing and el expression parsing and diff,
nexus-3.21.2-03 is used to test el expression Analysis and diff.
#### Vulnerability diff
The repair limit of CVE-2020-10199 and CVE-2020-10204 vulnerabilities is
3.21.1 and 3.21.2, but the github open source code branch does not seem to
correspond, so I have to download the compressed package for comparison. The
official download of nexus-3.21.1-01 and nexus-3.21.2-03, but beyond
comparison requires the same directory name, the same file name, and some
files for different versions of the code are not the same. I first decompiled
all the jar packages in the corresponding directory, and then used a script to
replace all the files in nexus-3.21.1-01 directory and the file name with
3.21.1-01 to 3.21.2-03, and deleted the META folder, this folder is not useful
for the vulnerability diff and affects the diff analysis, so it has been
deleted. The following is the effect after processing:
If you have not debugged and familiar with the previous Nexus 3
vulnerabilities, it may be headache to look at diff. There is no target diff.
#### Routing and corresponding processing class
##### General routing
Grab the packet sent by nexus3, random, you can see that most requests are
POST type, URI is /service/extdirect:
The content of the post is as follows:
    {"action":"coreui_Repository","method":"getBrowseableFormats","data":null,"type":"rpc","tid":7}
We can look at other requests. In post json, there are two keys: action and
method. Search for the keyword "coreui_Repository" in the code:
We can see this, expand and look at the code:
The action is injected through annotations, and the method
"getBrowseableFormats" in the post above is also included, the corresponding
method is injected through annotations:
So after such a request,It is very easy to locate routing and corresponding
processing class.
##### API routing
The Nexus3 API also has a vulnerability. Let's see how to locate the API
route. In the admin web page, we can see all the APIs provided by Nexus3:
look at the package, there are GET, POST, DELETE, PUT and other types of
requests:
Without the previous action and method, we use URI to locate it, but direct
search of /service/rest/beta/security/content-selectors cannot be located, so
shorten the keyword and use /beta/security/content-selectors to locate:
Inject URI through @Path annotation, the corresponding processing method also
uses the corresponding @GET, @POST to annotate.
There are may be other types of routing, but you can also use a similar search
method to locate. There is also the permission problem of Nexus. You can see
that some of the above requests set the permissions through
@RequiresPermissions, but the actual test permissions are still prevailing.
Some permissions are also verified before arrival. Some operations are on the
admin page, but it may not require admin permissions, may be no need
permissions or only ordinary permissions.
#### Several Java EL vulnerabilities caused by
buildConstraintViolationWithTemplate
After debugging [CVE-2018-16621](https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection- October-17-2018) and
[CVE-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3- Remote-Code-Execution-2020-03-31), I feel that the keyword
`buildConstraintViolationWithTemplate` can be used as the root cause of this
vulnerability, because the call stack shows that the function call is on the
boundary between the Nexus package and the hibernate-validator package, and
the pop-up of the calculator is also after it enters the processing flow of
hibernate-validator, that is, `buildConstraintViolationWithTemplate (xxx)
.addConstraintViolation ()`, and finally expressed in the ElTermResolver class
in the hibernate-validator package through `valueExpression.getValue
(context)` :
So I decompile all jar packages of Nexus3, and then search for this keyword
(use the repair version search, mainly to see if there are any missing areas
that are not repaired; Nexue3 has some open source code, you can also search
directly in the source code):
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\com\sonatype\nexus\plugins\nexus-healthcheck-base\3.21.2-03\nexus-healthcheck-base-3.21.2-03\com\sonatype\nexus\clm\validator\ClmAuthenticationValidator.java:
       26           return this.validate(ClmAuthenticationType.valueOf(iqConnectionXo.getAuthenticationType(), ClmAuthenticationType.USER), iqConnectionXo.getUsername(), iqConnectionXo.getPassword(), context);
       27        } else {
       28:          context.buildConstraintViolationWithTemplate("unsupported annotated object " + value).addConstraintViolation();
       29           return false;
       30        }
       ..
       35        case 1:
       36           if (StringUtils.isBlank(username)) {
       37:             context.buildConstraintViolationWithTemplate("User Authentication method requires the username to be set.").addPropertyNode("username").addConstraintViolation();
       38           }
       39  
       40           if (StringUtils.isBlank(password)) {
       41:             context.buildConstraintViolationWithTemplate("User Authentication method requires the password to be set.").addPropertyNode("password").addConstraintViolation();
       42           }
       43  
       ..
       52           }
       53  
       54:          context.buildConstraintViolationWithTemplate("To proceed with PKI Authentication, clear the username and password fields. Otherwise, please select User Authentication.").addPropertyNode("authenticationType").addConstraintViolation();
       55           return false;
       56        default:
       57:          context.buildConstraintViolationWithTemplate("unsupported authentication type " + authenticationType).addConstraintViolation();
       58           return false;
       59        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\hibernate\validator\hibernate-validator\6.1.0.Final\hibernate-validator-6.1.0.Final\org\hibernate\validator\internal\constraintvalidators\hv\ScriptAssertValidator.java:
    34        if (!validationResult && !this.reportOn.isEmpty()) {
    35           constraintValidatorContext.disableDefaultConstraintViolation();
    36:          constraintValidatorContext.buildConstraintViolationWithTemplate(this.message).addPropertyNode(this.reportOn).addConstraintViolation();
    37        }
    38  
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\hibernate\validator\hibernate-validator\6.1.0.Final\hibernate-validator-6.1.0.Final\org\hibernate\validator\internal\engine\constraintvalidation\ConstraintValidatorContextImpl.java:
       55     }
       56  
       57:    public ConstraintViolationBuilder buildConstraintViolationWithTemplate(String messageTemplate) {
       58        return new ConstraintValidatorContextImpl.ConstraintViolationBuilderImpl(messageTemplate, this.getCopyOfBasePath());
       59     }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-cleanup\3.21.0-02\nexus-cleanup-3.21.0-02\org\sonatype\nexus\cleanup\storage\config\CleanupPolicyAssetNamePatternValidator.java:
    18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {
    19              context.disableDefaultConstraintViolation();
    20:             context.buildConstraintViolationWithTemplate(var4.getMessage()).addConstraintViolation();
    21              return false;
    22           }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-cleanup\3.21.2-03\nexus-cleanup-3.21.2-03\org\sonatype\nexus\cleanup\storage\config\CleanupPolicyAssetNamePatternValidator.java:
       18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {
       19              context.disableDefaultConstraintViolation();
       20:             context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();
       21              return false;
       22           }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-scheduling\3.21.2-03\nexus-scheduling-3.21.2-03\org\sonatype\nexus\scheduling\constraints\CronExpressionValidator.java:
       29        } catch (IllegalArgumentException var4) {
       30           context.disableDefaultConstraintViolation();
       31:          context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();
       32           return false;
       33        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\privilege\PrivilegesExistValidator.java:
       42           if (!privilegeId.matches("^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$")) {
       43              context.disableDefaultConstraintViolation();
       44:             context.buildConstraintViolationWithTemplate("Invalid privilege id: " + this.getEscapeHelper().stripJavaEl(privilegeId) + ". " + "Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.").addConstraintViolation();
       45              return false;
       46           }
       ..
       55        } else {
       56           context.disableDefaultConstraintViolation();
       57:          context.buildConstraintViolationWithTemplate("Missing privileges: " + missing).addConstraintViolation();
       58           return false;
       59        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\role\RoleNotContainSelfValidator.java:
       49              if (this.containsRole(id, roleId, processedRoleIds)) {