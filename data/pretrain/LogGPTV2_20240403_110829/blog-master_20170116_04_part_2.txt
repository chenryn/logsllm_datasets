下面的例子取自  
http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html  
为了简单起见，我们先从句子着手。  
```  
  句子A：我喜欢看电视，不喜欢看电影。  
  句子B：我不喜欢看电视，也不喜欢看电影。  
```  
请问怎样才能计算上面两句话的相似程度？  
基本思路是：如果这两句话的用词越相似，它们的内容就应该越相似。因此，可以从词频入手，计算它们的相似程度。  
第一步，分词。  
```  
  句子A：我/喜欢/看/电视，不/喜欢/看/电影。  
  句子B：我/不/喜欢/看/电视，也/不/喜欢/看/电影。  
```  
第二步，列出所有的词。  
```  
  我，喜欢，看，电视，电影，不，也。  
```  
第三步，计算词频。  
```  
  句子A：我 1，喜欢 2，看 2，电视 1，电影 1，不 1，也 0。  
  句子B：我 1，喜欢 2，看 2，电视 1，电影 1，不 2，也 1。  
```  
第四步，写出词频向量，注意对齐关键词。  
```  
  句子A：[1, 2, 2, 1, 1, 1, 0]  
  句子B：[1, 2, 2, 1, 1, 2, 1]  
```  
到这里，问题就变成了如何计算这两个向量的相似程度。  
假定a向量是[x1, y1]，b向量是[x2, y2]，那么可以将余弦定理改写成下面的形式：  
![pic](20170116_04_pic_002.png)  
![pic](20170116_04_pic_003.png)  
数学家已经证明，余弦的这种计算方法对n维向量也成立。假定A和B是两个n维向量，A是 [A1, A2, ..., An] ，B是 [B1, B2, ..., Bn] ，则A与B的夹角θ的余弦等于：  
![pic](20170116_04_pic_004.png)  
使用这个公式，我们就可以得到，句子A与句子B的夹角的余弦。  
![pic](20170116_04_pic_005.png)  
余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫"余弦相似性"。所以，上面的句子A和句子B是很相似的，事实上它们的夹角大约为20.3度。  
由此，我们就得到了"找出相似文章"的一种算法：  
```  
  （1）使用TF-IDF算法，找出两篇文章的关键词；  
  （2）每篇文章各取出若干个关键词（比如20个），合并成一个集合，计算每篇文章对于这个集合中的词的词频（为了避免文章长度的差异，可以使用相对词频TF）；  
  （3）生成两篇文章各自的词频向量；  
  （4）计算两个向量的余弦相似度，值越大就表示越相似。  
```  
"余弦相似度"是一种非常有用的算法，只要是计算两个向量的相似程度，都可以采用它。  
## 数据库应用 tf-idf文本相似性在数据库中的应用  
### 1 smlar 插件  
[《PostgreSQL 与 tf-idf 文本相似算法》](./20170116_03.md) 一文介绍了使用smlar实现数组的快速相似性检索。  
其原理与余弦近似的算法类似，同时还允许用户自定义相似度公式。  
但是目前仅支持内置类型数组的gin,gist索引，也就是说针对自定义数据类型的数组，不能使用索引进行检索。  
例如  
```  
create type tp as (word text, tfidf float4);  
tp[]  数组暂时还不能使用索引来查询近似度。  
```  
#### 小结  
目前，smlar更适合于非复合类型（即内置类型数组）的检索，比如属性固定的相似度检索。  
例如已经抽象好了固定的1000个属性，每行代表一个对象，存储了这个对象的每个属性的打分。  
比如标签类应用，通过标签向量的近似度，找出相似人群。  
```  
row1: id=1, val=array[1.0,0.9,100.78,.......第1000个属性的打分]  
....  
rown: id=n, val=array[0,0,1,2,2,2,2.......第1000个属性的打分]  
```  
又比如图像像素点的RGB值，每张图像的大小一致，可以通过像素点向量进行相似度比较。  
当然，它也支持其他内置类型数组的相似度比较，只是元素没有权重!!!!!，正如我前面说的，你要TF-IDF，暂时没门。  
PS:    
如果我们扩展smlar这个插件，让它的复合类型数组能支持gin, gist索引的话，它的适用范围就更加广阔了。  
在应用中算出关键词以及tf-idf，作为复合类型的向量数组，将其数组内容存入数据库，在数据库中只需要计算两组向量的相似性。（这个支持索引会不会很强大呢）  
smlar插件还有很大的潜力可挖掘。  
### 2 rum 插件  
通过关键词计算文本的相似性是一种简化的方法，精确度不一定高。  
还有一种方法，比对整篇文章的相似性，PostgreSQL的rum插件提供了这种能力，当然它实际上也支持关键词的手段。  
关于整篇文章的用法就不介绍了，就是普通的用法  
```  
CREATE EXTENSION rum;  
CREATE TABLE test_rum(t text, a tsvector);  
CREATE TRIGGER tsvectorupdate  
BEFORE UPDATE OR INSERT ON test_rum  
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('a', 'pg_catalog.english', 't');  
INSERT INTO test_rum(t) VALUES ('The situation is most beautiful');  
INSERT INTO test_rum(t) VALUES ('It is a beautiful');  
INSERT INTO test_rum(t) VALUES ('It looks like a beautiful place');  
CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);  
SELECT t, a  to_tsquery('english', 'beautiful | place') AS rank  
    FROM test_rum  
    WHERE a @@ to_tsquery('english', 'beautiful | place')  
    ORDER BY a  to_tsquery('english', 'beautiful | place');  
                t                |   rank  
---------------------------------+-----------  
 The situation is most beautiful | 0.0303964  
 It is a beautiful               | 0.0303964  
 It looks like a beautiful place | 0.0607927  
(3 rows)  
SELECT t, a  to_tsquery('english', 'place | situation') AS rank  
    FROM test_rum  
    WHERE a @@ to_tsquery('english', 'place | situation')  
    ORDER BY a  to_tsquery('english', 'place | situation');  
                t                |   rank  
---------------------------------+-----------  
 The situation is most beautiful | 0.0303964  
 It looks like a beautiful place | 0.0303964  
(2 rows)  
排序和@@都支持索引  
                               QUERY PLAN                                 
------------------------------------------------------------------------  
 Index Scan using rumidx on test_rum  (cost=2.00..4.01 rows=1 width=36)  
   Index Cond: (a @@ '''place'' | ''situat'''::tsquery)  
   Order By: (a  '''place'' | ''situat'''::tsquery)  
(3 rows)  
```  
使用全文比较的好处当然是准确度更高，但是带来一个问题，需要存储更多的词，消耗更多的存储空间，同时效率会有所下降（相比只存储关键词时）。  
下面以关键词为例，介绍rum插件和关键词结合的用法     
（因为tsvector里面不存储tf-idf，所以我们这里需要存储的是词频）  
```  
文本A表示中国、日本、希腊分别出现了6次，火腿肠出现了2次  
(在PostgreSQL中可以使用ts_stat函数得到词频。)  
tsvector $$'中国':1,2,3,4,5,6 '日本':1,2,3,4,5,6 '希腊':1,2,3,4,5,6 '火腿肠':1,2$$  
postgres=# select tsvector $$'中国':1,2,3,4,5,6 '日本':1,2,3,4,5,6 '希腊':1,2,3,4,5,6 '火腿肠':1,2$$;  
                               tsvector                                  
-----------------------------------------------------------------------  
 '中国':1,2,3,4,5,6 '希腊':1,2,3,4,5,6 '日本':1,2,3,4,5,6 '火腿肠':1,2  
(1 row)  
```  
表结构如下(假设你已经将数据如上格式存入了tbl_test表的info字段)  
```  
create table tbl_test(id int, info tsvector, doc text);  
create index rumidx_tbl_test ON tbl_test USING rum (info rum_tsvector_ops);  
```  
接下来要做的是查询相似性(rank)  
使用rum查出相似的文本，程序的输入就是tsquery，使用|拼装即可。  
(注意, 因为tsquery没有权重信息，所以输入时不支持权重或TF，因此RUM插件的方法计算的ts_rank并不是通过余弦相似的算法计算的，至少目前并不是这样)  
虽然不支持权重，但是你可以输入重复值，来加重这个词的比重  
```  
SELECT id, info  to_tsquery('english', 'beautiful | place') AS rank  
    FROM tbl_test  
    WHERE info @@ to_tsquery('english', 'beautiful | place')  