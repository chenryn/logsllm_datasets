**流程**
[使用 `grubby`{.literal} 工具将内核设置为默认]{.term}
:   ::: itemizedlist
    -   使用 `grubby`{.literal} 工具执行以下命令将内核设置为默认：
    :::
    `# grubby --set-default $kernel_path`{.literal}
    命令使用不带 `.conf`{.literal} 后缀的计算机 ID 作为参数。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    机器 ID 位于 `/boot/loader/entries/`{.literal} 目录中。
    :::
[使用 `id`{.literal} 参数将内核设置为默认]{.term}
:   ::: itemizedlist
    -   使用 `id`{.literal}
        参数列出引导条目，然后将所需的内核设置为默认：
    :::
    ``` screen
    # grubby --info ALL | grep id
    # grubby --set-default /boot/vmlinuz-.
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使用 `title`{.literal} 参数列出引导条目，请执行
    `# grubby --info=ALL | grep title`{.literal} 命令。
    :::
[仅为下次引导设定默认内核]{.term}
:   ::: itemizedlist
    -   执行以下命令，仅在下次使用 `grub2-reboot`{.literal}
        命令重新引导时设置默认内核：
    :::
    ``` screen
    # grub2-reboot 
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    小心地为下次启动设置默认内核。安装新内核 RPM
    的自构建内核并手动将这些条目添加到 `/boot/loader/entries/`{.literal}
    目录可能会更改索引值。
    :::
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#displaying-information-about-kernel-modules_managing-kernel-modules}显示内核模块信息 {.title}
:::
使用内核模块时，您可能希望查看该模块的更多信息。这个步骤描述了如何显示有关内核模块的额外信息。
::: itemizedlist
**先决条件**
-   已安装 `kmod`{.literal} 软件包。
:::
::: itemizedlist
**流程**
-   要显示任何内核模块的信息，请执行：
    ``` literallayout
    $ modinfo 
    For example:
    $ modinfo virtio_net
    filename:       /lib/modules/4.18.0-94.el8.x86_64/kernel/drivers/net/virtio_net.ko.xz
    license:        GPL
    description:    Virtio network driver
    rhelversion:    8.1
    srcversion:     2E9345B281A898A91319773
    alias:          virtio:d00000001v*
    depends:        net_failover
    intree:         Y
    name:           virtio_net
    vermagic:       4.18.0-94.el8.x86_64 SMP mod_unload modversions
    …​
    parm:           napi_weight:int
    parm:           csum:bool
    parm:           gso:bool
    parm:           napi_tx:bool
    ```
    `modinfo`{.literal}
    命令显示指定内核模块的一些详细信息。您可以查询所有可用模块的信息，无论它们是否被加载。`parm`{.literal}
    条目显示用户可以为模块设置的参数，以及它们预期的值类型。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
:::
::: itemizedlist
**其它资源**
-   `modinfo(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#loading-kernel-modules-at-system-runtime_managing-kernel-modules}在系统运行时载入内核模块 {.title}
:::
扩展 Linux 内核功能的最佳方法是加载内核模块。下面的步骤描述了如何使用
`modprobe`{.literal} 命令在当前运行的内核中查找并载入内核模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
-   相关的内核模块没有被加载。要确保情况如此，请列出[载入的内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#listing-currently-loaded-kernel-modules_managing-kernel-modules "列出当前载入的内核模块"){.link}。
:::
::: orderedlist
**流程**
1.  选择您要载入的内核模块。
    模块位于 `/lib/modules/$(uname -r)/kernel//`{.literal}
    目录中。
2.  载入相关内核模块：
    ``` literallayout
    # modprobe 
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  （可选）验证载入了相关模块：
    ``` literallayout
    $ lsmod | grep 
    ```
    如果正确加载了模块，这个命令会显示相关的内核模块。例如：
    ``` literallayout
    $ lsmod | grep serio_raw
    serio_raw              16384  0
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
重启系统后，这个过程中描述的更改[**不会保留**]{.strong}。有关如何在系统重启后载入内核模块使其具有[**持久性**]{.strong}的信息，请参[阅在系统引导时自动载入内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#loading-kernel-modules-automatically-at-system-boot-time_managing-kernel-modules "在系统引导时自动载入内核模块"){.link}。
:::
::: itemizedlist
**其它资源**
-   `modprobe(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#unloading-kernel-modules-at-system-runtime_managing-kernel-modules}在系统运行时卸载内核模块 {.title}
:::
有时，您发现您需要从运行的内核中卸载某些内核模块。下面的步骤描述了如何使用
`modprobe`{.literal}
命令在当前载入的内核运行时在系统运行时查找和卸载内核模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  执行 `lsmod`{.literal} 命令并选择您要卸载的内核模块。
    如果内核模块有依赖项，请在卸载内核模块前卸载它们。有关识别使用依赖项的模块的详情，请参阅[列出当前载入的内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#listing-currently-loaded-kernel-modules_managing-kernel-modules "列出当前载入的内核模块"){.link}和[内核模块依赖项](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#kernel-module-dependencies_managing-kernel-modules "内核模块依赖关系"){.link}。
2.  卸载相关内核模块：
    ``` literallayout
    # modprobe -r 
    ```
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    当它们被正在运行的系统使用时，不要卸载这些内核模块。这样做可能会导致不稳定，或系统无法正常操作。
    :::
3.  （可选）验证相关模块是否已卸载：
    ``` literallayout
    $ lsmod | grep 
    ```
    如果模块被成功卸载，这个命令不会显示任何输出。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
完成这个过程后，被定义为在引导是自动加载的内核模块，在重启系统后[**将不会处于卸载状态**]{.strong}。有关如何解决这个结果的详情，请参考[防止在系统引导时自动载入内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#preventing-kernel-modules-from-being-automatically-loaded-at-system-boot-time_managing-kernel-modules "防止在系统引导时自动载入内核模块"){.link}。
:::
::: itemizedlist
**其它资源**
-   `modprobe(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#loading-kernel-modules-automatically-at-system-boot-time_managing-kernel-modules}在系统引导时自动载入内核模块 {.title}
:::
下面的步骤描述了如何配置内核模块以便在引导过程中自动载入该模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  选择您要在引导过程中载入的内核模块。
    模块位于 `/lib/modules/$(uname -r)/kernel//`{.literal}
    目录中。
2.  为模块创建配置文件：
    ``` literallayout
    # echo  > /etc/modules-load.d/.conf
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  另外，重启后，验证载入了相关模块：
    ``` literallayout
    $ lsmod | grep 
    ```
    上面的示例命令应该成功并显示相关的内核模块。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
重启系统后，这个过程中描述的更改[**将会保留**]{.strong}。
:::
::: itemizedlist
**其它资源**
-   `modules-load.d(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#preventing-kernel-modules-from-being-automatically-loaded-at-system-boot-time_managing-kernel-modules}防止在系统引导时自动载入内核模块 {.title}
:::
下面的步骤描述了如何在 denylist
中添加内核模块使其不会在引导过程中自动载入。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
-   确定 denylist 中的内核模块对您当前系统配置并不重要。
:::
::: orderedlist
**流程**
1.  选择您要放入 denylist 中的内核模块：
    ``` literallayout
    $ lsmod