ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)|	setof record|	get token types defined by parser|	ts_token_type('default')|	(1,asciiword,"Word, all ASCII") ...
ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)|	setof record|	get token types defined by parser|	ts_token_type(3722)|	(1,asciiword,"Word, all ASCII") ...
ts_stat(sqlquery text, [ weights text, ] OUT word text, OUT ndoc integer, OUT nentry integer)|	setof record|	get statistics of a tsvector column|	ts_stat('SELECT vector from apod')|	(foo,10,15) ...
## 索引  
数据库要真正的支持一个数据类型，光有类型和函数是不够的，还需要支持索引，否则不能称为支持这种数据类型。  
PostgreSQL的分词是支持索引的，包括GIN, GiST, SP-Gist可选。  
用法很简单，例子  
```
create table test(id serial primary key, content text, ts tsvector);
create index idx_test_ts on test using gin (ts);
select * from test where ts @@ to_tsquery('english', 'hello  digoal');  -- 这样的查询就可以走索引了
```
## 多国语言分词
PostgreSQL支持自定义字典，分词配置。    
中文分词当然也很容易添加进来，例如网上就有很多添加中文分词的方法。   
https://github.com/fxsjy/jieba  
https://github.com/jaiminpan/pg_scws  
或者你可以试用一下阿里云的RDS PostgreSQL产品，包含了zhparser分词。  
## 模糊查询
分词和模糊查询属于两类需求，模糊查询是分词覆盖不到的场景，例如用户输入规则表达式进行查询，或者输入前后模糊的条件进行查询，它可以匹配到分词无法匹配到的文本。    
分词只能做到前缀，不能做到前后模糊，或者正则表达式模糊。  
```
postgres=# select to_tsquery('postgresql:*');
   to_tsquery   
----------------
 'postgresql':*
(1 row)
postgres=# select to_tsquery('postgres:*');
 to_tsquery 
------------
 'postgr':*
(1 row)
```
如果有模糊查询的需求，PostgreSQL也能支持索引检索，使用pg_trgm插件即可。  
支持相似度的查询，模糊匹配。  
```
postgres=# create extension pg_trgm;
CREATE EXTENSION
postgres=# explain select * from tb where info ~ '5821a';  -- 前后模糊查询
                                 QUERY PLAN                                   
----------------------------------------------------------------------------  
 Bitmap Heap Scan on tb  (cost=103.75..3677.71 rows=1000 width=9)  
   Recheck Cond: (info ~ '5821a'::text)  
   ->  Bitmap Index Scan on idx_tb_2  (cost=0.00..103.50 rows=1000 width=0)  
         Index Cond: (info ~ '5821a'::text)  
(4 rows)  
Time: 0.647 ms  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_split where info ~ '^33.+7.+9$' limit 10;  -- 正则查询，老牛逼啊。  
                                                           QUERY PLAN                                                              
---------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=43.75..80.78 rows=10 width=57) (actual time=19.573..21.212 rows=10 loops=1)  
   Output: id, crt_time, sensorid, sensorloc, info, c1, c2, c3, c4, c5, c6, c7, c8  
   Buffers: shared hit=566  
   ->  Bitmap Heap Scan on public.t_split  (cost=43.75..3746.56 rows=1000 width=57) (actual time=19.571..21.206 rows=10 loops=1)  
         Output: id, crt_time, sensorid, sensorloc, info, c1, c2, c3, c4, c5, c6, c7, c8  
         Recheck Cond: (t_split.info ~ '^33.+7.+9$'::text)  
         Rows Removed by Index Recheck: 647  
         Heap Blocks: exact=552  
         Buffers: shared hit=566  
         ->  Bitmap Index Scan on idx9  (cost=0.00..43.50 rows=1000 width=0) (actual time=11.712..11.712 rows=39436 loops=1)  
               Index Cond: (t_split.info ~ '^33.+7.+9$'::text)  
               Buffers: shared hit=14  
 Planning time: 0.301 ms  
 Execution time: 21.255 ms  
(14 rows)  
Time: 21.995 ms   
```
例子参考  
http://blog.163.com/digoal@126/blog/static/163877040201191882553803/  
https://yq.aliyun.com/articles/7444  
https://www.postgresql.org/docs/9.6/static/pgtrgm.html  
## 优势
看完前面的介绍，是不是心动了，以前要用搜索引擎解决的问题，或者要用外接插件解决的问题，今天，使用PostgreSQL数据库就可以解决了，性能可以参考文章开头链接的指标。   
相比自建外部搜索引擎的优势：  
1\. 数据不需要倒来倒去，绝对的实时搜索，提升了效率还节约了成本，数据在库中还能用到数据库的特性，例如关联查询等，还有节约了带宽。  
2\. 由于文本和分词都在数据库中，可以保证搜索的一致性。  
3\. 没有搜索次数，返回结果记录数的限制，自由度好把控。  
4\. 可以自定义lexeme的权重，自定义权重系数，实现更大灵活度的搜索需求。  
5\. 支持相似度的排序，可以根据相似度进行搜索。  
6\. 支持lexeme的距离系数，可以根据绝对的距离系数匹配查询。  例如 '速度与激情'  转换成查询词条后，'速度  激情'， 可以正确的精准匹配到这部片子，而不会匹配到'速度很快，很有激情'。  
7\. 支持自定义词组，当自带的词组无法满足时，你可以自定义属于自己的词组。  
8\. 支持tsvector细粒度可调，参考[《使用阿里云PostgreSQL zhparser时不可不知的几个参数》](https://yq.aliyun.com/articles/7730)  
## 其他资料
PostgreSQL是一个历史悠久的数据库产品，起源于伯克利大学，BSD-LIKE许可，非常的人性化，很多产品是基于PG的。  
![pic](20161115_01_pic_001.png)  
![pic](20161115_01_pic_002.png)  
![pic](20161115_01_pic_003.png)  
![pic](20161115_01_pic_004.png)  
![pic](20161115_01_pic_005.png)  
如果你对PG感兴趣，可以再了解一下  
[《德哥的PostgreSQL私房菜 - 史上最屌PG资料合集》](https://yq.aliyun.com/articles/59251)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")