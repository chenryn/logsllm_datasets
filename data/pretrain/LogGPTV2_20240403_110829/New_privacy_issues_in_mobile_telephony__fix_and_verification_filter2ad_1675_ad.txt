namely strong unlinkability and strong anonymity.
Note that for veriﬁcation purposes we use randomised
symmetric encryption to conceal the sequence number SQN
instead of using the exclusive-or. Indeed, even if the theory
allows to write a set of reduction rules to model the xor
function, the ProVerif tool cannot deal with its algebraic
212properties. The use of randomised encryption anyway would
achieve stronger properties with respect to the secrecy of the
sequence number, we hence recommend the adoption of this
modiﬁcation in the standard protocol.
6.1 ProVerif Calculus
We use the ProVerif calculus, which is similar to the
applied pi-calculus [9], to precisely model the privacy en-
hancing solutions proposed in Section 5. It makes it possi-
ble to automatically verify protocol models written in the
language, using the ProVerif tool [15]. We introduce the
ProVerif calculus aiming to give a ﬂavour of the veriﬁca-
tion process. The description of the calculus that we give
here is not comprehensive (refer to [15] for a detailed pre-
sentation).
Cryptographic primitives are modelled as functions and
messages are represented by terms built over an inﬁnite set
of names a, b, c, . . . , an inﬁnite set of variables x, y, z, . . . and
a ﬁnite set of function symbols f1 . . . , fn. Function symbols
represent cryptographic primitives that can be applied to
messages. The eﬀect of applying function symbols to terms
is described by a set of reduction rules.
Example 1. Using functions and reduction rules we can
deﬁne cryptographic functions, for example, let Σ={senc/3,
pub/1, aenc/3, f/2, f1/2, f2/2, f3/2, f4/2, f5/2},
and consider the reductions: reduc sdec(k, senc(k, m, r)) =
m and reduc adec(k, aenc(pub(k), m, r)) = m. Where, senc
and aenc model, respectively, randomised symmetric and
asymmetric encryption and model the property that the
plaintext, m, can be retrieved from the cyphertext given
the knowledge of the key k.
The syntax of ProVerif calculus processes is given by the
following grammar:
plain processes
null process
parallel composition
replication
name restriction
P, Q, R ::=
0
P | Q
!P
new n; P
if M = N then P else Q conditional
let M = D in P else Q destructor application
in(M, x); P
out(M, N ); P
message input
message output
We give here only the informal semantics of the calculus.
The null process does nothing. P | Q represents the parallel
execution of P and Q. The replication !P of a process P
acts like the parallel execution of an unbounded number of
copies of P . The name restriction new n; P creates a new
name n whose scope is restricted to the process P and then
runs P . The message input in(M, x); P represents a process
ready to input from the channel M . The message output
out(M, N ); P describes a process that sends a term N on the
channel M and then behaves like P . The let construct tries
to rewrite D and matches the result with M ; if this succeeds,
then the variables in M are instantiated accordingly and P
is executed; otherwise Q is executed. The conditional checks
the equality of two terms M and N and then behaves as P
or Q accordingly. We will omit the else branch of a let or a
conditional when the process Q is 0.
Example 2. Multiple mobile stations M S, with identity
imsi, and long-term private key sk running along with the
serving network, SN , can be modelled by the process:
S = new pvN ; let pbN = pub(pvN ) in
out(c, pbN ); !new sk; new imsi; !new sqn; (SN | MS).
The privacy related properties we verify are expressed in
terms of observational equivalence. Intuitively, two processes
P and Q are observationally equivalent denoted by P ≈ Q,
if any interaction of P with the adversary, can be matched
with an interaction of Q (and vice versa, i.e. all interactions
of Q can be matched by P ) and the same input/output
behaviour is observed.
The ProVerif tool can prove diﬀ-equivalence of bipro-
cesses, which implies observational equivalence. Biprocesses
are pairs of processes which diﬀer by some choice of terms,
this choice is written choice[M, M ′]. For example, to test
if the processes out(c, a) and out(c,b) are equivalent,
one would check the following biprocess using ProVerif:
out(c, choice[a, b]).
6.2 Strong Unlinkability
Strong unlinkability is deﬁned in [11] as follows. Let P =
new ˜n.(!R1 |
··· |!Rp) be a p-party protocol where ∀i ∈
{1, . . . , p}, Ri = new id.new ˜m.initi.!(new s.maini). For all
i ∈ {1, . . . , p}, we build the protocol P Ri as follows:
P Ri = new ˜n.(!R1 | ··· |!Ri−1 |!R′′
R′′
i = new id.new ˜m.initi.new s.maini.
i |!Ri+1 | ··· |!Rp)
P is said to preserve strong unlinkability of Ri if P ≈ P Ri.
Informally, this means that the adversary cannot distinguish
a situation where the role Ri was executed many times from
one in which it was executed at most once, i.e. he cannot
link two executions of the role Ri. Going back to our mobile
phone scenario, the strong unlinkability property holds when
the situation where mobile stations access services multiple
times looks the same as the ideal situation where each mo-
bile station accesses the services at most once, i.e. where
by construction unlinkability holds. Formally, we want the
process S, deﬁned in Example 2, to be observationally equiv-
alent to the system SU N LINK deﬁned as follows:
SU N LINK = new pvN ; let pbN = pub(pvN ) in
out(c, pbN );
!new sk; new imsi; new sqn; (SN | MS).
The absence of the replication before the new sqn construct
means that in SU N LINK each MS executes the protocol at
most once. The above mentioned observational equivalence
can be veriﬁed with ProVerif, deﬁning S and SU N LINK as
the following biprocess PVU N LINK , where sk1, sk2 are long
term keys and imsi1, imsi2 are long term identities:
PVU N LINK = new pvN ; let pbN = pub(pvN ) in
out(c, pbN );
!new sk1; new imsi1;
!new sk2; new imsi2; new sqn;
let (sk, imsi)=choice[(sk1, imsi1),(sk2, imsi2)]
in (SN | MS).
We have that the left side of the choice represents a sys-
tem where a mobile station (with identity imsi1 and key
sk1) may execute the protocol many times, while the right
side represents a system where mobile stations execute the
protocol at most once (the identity imsi2 and the key sk2
are always diﬀerent and can be used at most once for the
execution of the protocol). Hence, we reduce the problem of
213testing strong unlinkability to the diﬀ-equivalence of a bipro-
cess. ProVerif proves that the strong unlinkability property
is satisﬁed by our models of the ﬁxes identiﬁcation, paging
and AKA protocols as described in Section 5.
6.3 Strong Anonymity
Strong Anonymity is deﬁned in [11] as follows. Let P =
new ˜n.(!R1 | ··· |!Rp) be a p-party protocol where ∀ i ∈
{1, . . . , p}, Ri = new id.new ˜m.initi.!(new s.maini). For all
i ∈ {1, . . . , p}, we build the protocol P Ri as follows:
P Ri = new ˜n.(!R1 | ··· |!Rp | RV )
RV = new ˜m.initi{idV /id}.!(new s.maini{idV /id}).
Where the identity idV of the agent playing the role RV
is a public name not occurring in P . P is said to preserve
strong unlinkability of Ri if P ≈ P Ri. Informally, this means
that the adversary cannot distinguish a situation where the
role RV with known identity idV was executed from one in
which it was not executed at all, i.e. he cannot breach the
anonymity of the agent with role RV . Going back to our
mobile phone scenario, strong anonymity requires a system
in which a mobile station MSV with publicly known identity
IMSI V executes the protocol to be indistinguishable from a
system in which the MSV is not present at all. Such a system
obviously preserves IMSI V ’s anonymity. Formally, we want
the system S, deﬁned as in Example 2 to be observationally
equivalent to the system SV deﬁned as follows:
SV = new pvN ; let pbN = pub(pvN ) in
out(c, pbN );
!new sk; new imsi; (!new sqn; (SN | MS))
| new sk; !new sqn; (SN | MSV ).
In the system SV the mobile station MSV with publicly known
identity imsiV can run the protocol. The mentioned ob-
servational equivalence can be translated in the following
ProVerif biprocess PVAN ON , where imsiV , imsims are per-
manent mobile station identities:
free imsiV .
PVAN ON = new pvN ; let pbN = pub(pvN ) in
out(c, pbN );
(!new sk; new imsi;
(!new sqn; (MS | SN)))
| (new sk; new imsims;
let imsi=choice[imsiV , imsims] in
!new sqn; (SN | MS)).
The left side of the choice represents a system where the mo-
bile station with public identity imsiV can run the protocol.
Our ﬁxes of the identiﬁcation procedure, paging procedure
and AKA protocol as described in Section 5 are proved by
ProVerif to satisfy anonymity.
We took particular care in avoiding false attacks that
could be reported by the tool due to its abstractions. Indeed,
we formally deﬁne privacy properties through observational
equivalence, however, ProVerif adopts a stronger equiv-
alence relation called diﬀ-equivalence.
In particular, diﬀ-
equivalence can distinguish between the execution of diﬀer-
ent branches of a conditional statement even in the following
case: if a = a then P else P ≈diﬀ/
if a = b then P else P
and hence, although the above processes are observation-
ally equivalent (P is executed regardless the result of the if
statement evaluation), they do not satisfy diﬀ-equivalence.
Identiﬁcation Paging AKA
Properties
Unlinkability √
√
Anonymity
√
√
√
√
NA Not Applicable √ Proved to hold × Attack found
Table 1: ProVerif Results on Fixed Procedures
Paging AKA
×
√
Properties
Unlinkability ×
Anonymity
×
NA Not Applicable √ Proved to hold × Attack found
Table 2: ProVerif Results on current 3G Procedures
We are dealing with this issue in our code for the veriﬁca-
tion at lines 4-5, 36, 73-74, 81, and 86-87 of the code in the
Appendix. As expected, the veriﬁcation with the ProVerif
tool fails to prove the anonymity of the 3G IMSI paging
procedure and the unlinkability of both 3G IMSI paging
and AKA protocols (see Table 2) and ﬁnds counterexamples
showing that the two systems are distinguishable by the ad-
versary. The modelling of unlinkability and anonymity into
diﬀ-equivalences we showed in this Section can in general be
adopted for protocols which do not require an initialization
phase preceding the main protocol procedure. Hence, our
method is not speciﬁc for the analysed protocols, and shows
how to automatically verify unlinkability and anonymity on
a wide class of protocols2.
7. CONCLUSION
The widely-deployed 3GPP 3G protocols aim to prevent
unauthorised parties (such as private organisations and in-
dividuals) from tracking the physical location of users by
monitoring the signals from their mobile phone. Speciﬁcally,
the protocols use temporary identiﬁers and cryptography to
achieve this aim.
We have shown that the protocols are vulnerable to new
privacy threats and that these threats lead to attacks that
can be mounted in practice at low cost. Currently, our
demonstration relies on particular hardware/software using
closed source implementation of the 3G protocol stack and
radio signalling functions. We tested several networks of
major operators (T-Mobile, O2, SFR, and Vodafone) and
demonstrated that these are vulnerable to our attacks.
We used formal methods to show that the exposed pri-
vacy vulnerabilities could have been detected at design time,
We developed and veriﬁed lightweight solutions to avoid the
privacy vulnerabilities. The solutions we propose show that
privacy friendly measures could be adopted by the next gen-
eration of mobile telephony standards while keeping low the
computational and economical cost of implementing them.
Acknowledgement We are very grateful to Steve Babbage
(Vodafone) for insightful comments, and are thankful to EP-
SRC for supporting this work through the projects Ver-
ifying Interoperability Requirements in Pervasive Systems
(EP/F033540/1) and Analysing Security and Privacy Prop-
erties (EP/H005501/1).
2The ProVerif code is available online [2]
214[19] D. Burgess et al. OpenBTS.
http://openbts.sourceforge.net/.
[20] N. H. Denis Foo Kune, John Koelndorfer and Y. Kim.
Location leaks over the gsm air interface. In Annual
Network & Distributed System Security Symposium,
NDSS, 2012.
[21] Ettus. USRP. http://www.ettus.com/products, 2009.
[22] D. Fox. IMSI-Catcher. Datenschutz und
Datensicherheit (DuD), 21:539–539, 1997.
[23] N. Golde, K. Redon, and R. Borgaonkar. Weaponizing
femtocells: The eﬀect of rogue devices on mobile
telecommunications. In Annual Network & Distributed
System Security Symposium, NDSS, 2012.
[24] D. Goodin. Defects in e-passports allow real-time
tracking. The Register, 26th January 2010.
[25] Kineto Wireless Inc. oﬃcial Unlicensed Mobile Access
presentation webiste. http://www.smart-wi-fi.com/,
June 2010.
[26] G. Koien and V. Oleshchuk. Location privacy for
cellular systems; analysis and solution. In Privacy
Enhancing Technologies Symposium, volume 3856,
2006.
[27] G. Lowe. Breaking and ﬁxing the Needham-Schroeder
public-key protocol using fdr. In Tools and Algorithms
for the Construction and Analysis of Systems,
TACAS, 1996.
[28] U. Meyer and S. Wetzel. A man-in-the-middle attack
on UMTS. In ACM Workshop on Wireless Security,
WiSe, 2004.
[29] K. Nohl and S. Munaut. Wideband gsm sniﬃng.
http://events.ccc.de/congress/2010/Fahrplan/
attachments/1783_101228.27C3.GSM-Sniffing.
Nohl_Munaut.pdf.
[30] openBSC Project. GSM Network at 28C3.
http://events.ccc.de/congress/2011/wiki/GSM#
GSM_Network_at_28C3, December 2011.
[31] C. Paget. Practical cellphone spying. Def Con 18
Hacking Conference, 2010.
[32] D. Strobel. IMSI Catcher, 2007. Seminar Work,
Ruhr-Universitat Bochum.
[33] H. Welte, H. Freyther, D. Spaar, S. Schmidt,
D. Willmann, J. Luebbe, T. Seiler, and A. Eversberg.
OpenBSC. http://openbsc.osmocom.org.
[34] H. Welte, S. Munaut, A. Eversberg, and other