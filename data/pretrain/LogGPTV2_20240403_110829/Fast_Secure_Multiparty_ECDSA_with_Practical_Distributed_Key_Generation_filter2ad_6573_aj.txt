standard techniques (e.g., see [25, Sec. 6.5.2]), and into non-interactive zero-knowledge proofs of
knowledge in the random-oracle model using the Fiat-Shamir transform [14].
A.1 Rerandomization of Tuple – RRE
We present a Sigma protocol for the relation
RRE = {(G, G, q, (P, A, B, A
(cid:48)
(cid:48)
), (r, s)) | A
(cid:48)
= r · G + s · A ∧ B
(cid:48)
= r · P + s · B}.
, B
that proves that (G,P, A(cid:48), B(cid:48)) is a rerandomization of (G,P, A, B). See Protocol A.1 for the full
description.
37
PROTOCOL A.1 (Sigma Protocol for Relation RRE)
Upon joint input (G, G, q,P, A, B, A(cid:48), B(cid:48)) and witness (r, s) for the prover P , the parties work as
follows:
First prover message:
1. The prover P chooses random σ, τ ← Zq, and computes X = σ· G + τ · A and Y = σ·P + τ · B.
2. P sends (X, Y ) to the veriﬁer V .
Veriﬁer challenge: V chooses a random e ∈ {0, 1}κs (for statistical security parameter κs), and
sends it to P .
Second prover message:
1. P computes z1 = σ + e · r mod q and z2 = τ + e · s mod q.
2. P sends (z1, z2) to V .
Veriﬁcation: V accepts if and only if the following holds
1. X = z1 · G + z2 · A − e · A(cid:48), and
2. Y = z1 · P + z2 · B − e · B(cid:48)
We sketch the proof of security, proving completness, special soundness and honest-veriﬁer
zero-knowledge.
Completeness:
and
z1 · G + z2 · A − e · A(cid:48)
= (σ + e · r) · G + (τ + e · s) · A − e · (r · G + s · A)
= σ · G + e · (r · G) + τ · A + e · (s · A) − e · (r · G) − e · (s · A)
= σ · G + τ · A
= X,
z1 · P + z2 · B − e · B(cid:48)
= (σ + e · r) · P + (τ + e · s) · B − e · (r · P + s · B)
= σ · P + e · (r · P) + τ · B + e · (s · B) − e · (r · P) − e · (s · B)
= σ · P + τ · B
= Y,
and so the veriﬁer accepts.
2) such that e (cid:54)= e(cid:48) mod q and
Special soundness: We show that given (X, Y, e, e(cid:48), z1, z2, z(cid:48)
both (X, Y, e, z1, z2) and (X, Y, e(cid:48), z(cid:48)
2) are accepting transcripts, it is possible to compute (s, r)
such that A(cid:48) = r · G + s · A and B(cid:48) = r · P + s · B. By the assumption that both transcripts are
accepting we have that both
1, z(cid:48)
1, z(cid:48)
e · A(cid:48) = z1 · G + z2 · A − X and e · B(cid:48) = z1 · P + z2 · B − Y,
38
and
e(cid:48) · A(cid:48) = z(cid:48)
1 · G + z(cid:48)
2 · A − X and e(cid:48) · B(cid:48) = z(cid:48)
1 · P + z(cid:48)
2 · B − Y,
Subtracting the equations from each other, we have
(e − e(cid:48)) · A(cid:48) = (z1 − z(cid:48)
1) · G + (z2 − z(cid:48)
2) · A
and
(e − e(cid:48)) · B(cid:48) = (z1 − z(cid:48)
1) · P + (z2 − z(cid:48)
2) · B
Thus, setting r = (z1 − z(cid:48)
1) · (e − e(cid:48))−1 mod q and s = (z2 − z(cid:48)
2) · (e − e(cid:48))−1 mod q, we have that
A(cid:48) = r · G + s · A and B(cid:48) = r · P + s · B
as required. (Observe that since e (cid:54)= e(cid:48) mod q, the value (e−e(cid:48))−1 mod q exists and can be eﬃciently
computed.)
Honest-veriﬁer zero knowledge: Given e, the simulator chooses random z1, z2 ← Zq and
computes
and Y = z1 · P + z2 · B − e · B(cid:48).
If indeed there exist (s, r) such that A(cid:48) = r · G + s · A and B(cid:48) = r · P + s · B, then
X = z1 · G + z2 · A − e · A(cid:48)
and
X = (z1 − e · r) · G + (z2 − e · s) · A
Y = (z1 − e · r) · P + (z2 − e · s) · B.
Now, set σ = z1 − e· r and τ = z2 − e· s, and observe that if z1, z2 are chosen at random (as indeed
is the case by the simulator), then σ and τ are also random. This implies that z1 = σ + e · r and
z2 = τ + e · s for random σ, τ and thus the distribution is identical to that of a real proof.
Complexity. The cost of the proof is four exponentiations for the prover and six for the veriﬁer.
When applying the Fiat-Shamir transform, the communication cost is three elements of Zq.
A.2 Knowledge of x in EGexpEncP(x) – REG
We present a Sigma protocol for the relation
REG = {((G, G, q,P, A, B), (x, r)) | (A, B) = EGexpEncP (x; r)}
that expresses knowledge of the encrypted value in an ElGamal encryption-in-the-exponent cipher-
text. See Protocol A.2 for the full description. Recall that (A, B) = EGexpEncP (x; r) means that
A = r · G and B = r · P + x · G.
39
PROTOCOL A.2 (Sigma Protocol for Relation REG)
Upon joint input (G, G, q,P, A, B) and witness (x, r) for the prover P , the parties work as follows:
First prover message:
1. The prover P chooses random σ, ρ ← Zq, and computes X = σ · G and Y = σ · P + ρ · G.
2. P sends (X, Y ) to the veriﬁer V .
Veriﬁer challenge: V chooses a random e ∈ {0, 1}κs (for statistical security parameter κs), and
sends it to P .
Second prover message:
1. P computes z1 = σ + e · r mod q and z2 = ρ + e · x mod q.
2. P sends (z1, z2) to V .
Veriﬁcation: V accepts if and only if the following holds
1. z1 · G = X + e · A, and
2. z1 · P + z2 · G = Y + e · B
We sketch the proof of security, proving completness, special soundness and honest-veriﬁer
zero-knowledge.
Completeness:
If all messages are computed correctly, then:
z1 · G = (σ + e · r) · G = σ · G + e · (r · G) = X + e · A,
and
z1 · P + z2 · G = (σ + e · r) · P + (ρ + e · x) · G
= σ · P + e · (r · P) + ρ · G + e · (x · G)
= (σ · P + ρ · G) + e · (r · P + x · G)
= Y + e · B,
and so the veriﬁer accepts.
2) such that e (cid:54)= e(cid:48) mod q and
Special soundness: We show that given (X, Y, e, e(cid:48), z1, z2, z(cid:48)
both (X, Y, e, z1, z2) and (X, Y, e(cid:48), z(cid:48)
2) are accepting transcripts, it is possible to compute (x, r)
where (A, B) = EGexpEncP (x; r). By the assumption that both transcripts are accepting we have
that both
1, z(cid:48)
1, z(cid:48)
z1 · G = X + e · A and z1 · P + z2 · G = Y + e · B,
and
1 · G = X + e(cid:48) · A and z(cid:48)
z(cid:48)
Subtracting the equations from each other, we have
1 · P + z(cid:48)
2 · G = Y + e(cid:48) · B.
(z1 − z(cid:48)
1) · G = (e − e(cid:48)) · A
40
and
Thus,
and
(z1 − z(cid:48)
1) · P + (z2 − z(cid:48)
2) · G = (e − e(cid:48)) · B.
A = [(z1 − z(cid:48)
1) · (e − e(cid:48))−1 mod q] · G
B = [(z1 − z(cid:48)
1) · (e − e(cid:48))−1 mod q] · P + [(z2 − z(cid:48)
2) · (e − e(cid:48))−1 mod q] · G.
1) · (e − e(cid:48))−1 mod q and x = (z2 − z(cid:48)
Observe that since e (cid:54)= e(cid:48) mod q, the value (e− e(cid:48))−1 mod q exists and can be eﬃciently computed.
Setting r = (z1 − z(cid:48)
2) · (e − e(cid:48))−1 mod q, the above shows that
(A, B) = EGexpEncP (x; r), as required.
Honest-veriﬁer zero knowledge: Given e, the simulator chooses random z1, z2 ← Zq and
computes
X = z1 · G − e · A and Y = z1 · P + z2 · G − e · B.
If indeed there exist (x, r) such that A = r · G and B = r · P + x · G, then
X = (z1 − e · r) · G and Y = (z1 − e · r) · P + (z2 − e · x) · G.
Now, set σ = z1 − e· r and ρ = z2 − e· x, and observe that if z1, z2 are chosen at random (as indeed
is the case by the simulator), then σ and ρ are also random. This implies that z1 = σ + e · r and
z2 = ρ + e · x for random σ, ρ and thus the distribution is identical to that of a real proof.
Complexity. The cost of the proof is three exponentiations for the prover and ﬁve for the veriﬁer.
When applying the Fiat-Shamir transform, the communication cost is three elements of Zq.
A.3 Scalar Product on Encrypted Values – Rprod
We present a Sigma protocol for the relation
Rprod = {((G, G, q,P, A, B, C, D, E, F ), (t, r, y)) |
(C, D) = EGexpEncP (y; t) ∧ E = y·A+r·G ∧ F = y·B +r·P}
that validates that the same y encrypted in (C, D) is used in the scalar multiplication and reran-
domization of (A, B) in order to obtain (E, F ). Recall that (C, D) = EGexpEncP (y; t) means that
C = t · G and D = t · P + y · G.
41
PROTOCOL A.3 (Sigma Protocol for Relation Rprod)
Upon joint input (G, G, q,P, A, B, C, D, E, F ) and witness (t, r, y) for the prover P , the parties
work as follows:
First prover message:
1. The prover P chooses random σ, ρ ← Zq, and computes X = σ · A + ρ· G and Y = σ · B + ρ·P
and W = σ · G.
2. P sends (X, Y, W ) to the veriﬁer V .
Veriﬁer challenge: V chooses a random e ∈ {0, 1}κs (for statistical security parameter κs), and
sends it to P .
Second prover message:
1. P computes z1 = σ + e · y mod q and z2 = ρ + e · r mod q.
2. P sends (z1, z2) to V .
Additional Sigma protocol: P proves to V that (G,P, e·C, e·D−z1·G+W ) is a Diﬃe-Hellman
tuple (with witness e · t mod q) using the standard Sigma protocol.
Veriﬁcation: V accepts if and only if the following holds
1. z1 · A + z2 · G = X + e · E, and
2. z1 · B + z2 · P = Y + e · F
3. The Diﬃe-Hellman tuple Sigma protocol is accepted.
Observe that when applying the Fiat-Shamir transform, the entire proof is non-interactive. This
is due to the fact that the ﬁrst proof can be generated, at which point e is obtained and so the
statement for the second Sigma protocol for Diﬃe-Hellman tuples can be deﬁned and proven.
We sketch the proof of security, proving completness, special soundness and honest-veriﬁer
zero-knowledge.
Completeness:
If all messages are computed correctly, then:
and
z1 · A + z2 · G = (σ + e · y) · A + (ρ + e · r) · G
= (σ · A + ρ · G) + e · (y · A + r · G)
= X + e · E
z1 · B + z2 · P = (σ + e · y) · B + (ρ + e · r) · P
= (σ · B + ρ · P) + e · (y · B + r · P)
= Y + e · F,
and so the veriﬁer accepts the ﬁrst two conditions. In addition