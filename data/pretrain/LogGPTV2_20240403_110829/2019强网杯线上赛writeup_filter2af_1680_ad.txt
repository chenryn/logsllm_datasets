              seed.append(newSeed)
      if seed:
          pre = ((seed[0] * multiplier + addend)& mask)>>16
          if len(bin(pre))-2==32 and bin(pre)[2]=='1':
              return pre-1
          return pre
      nextN = temN
      nextM = -(0xffffffff-nextM)
      oldSeedUpperN = (nextN >16
          if len(bin(pre))-2==32 and bin(pre)[2]=='1':
              return pre-1
          return pre
      nextN = -(0xffffffff-temN)
      nextM = -(0xffffffff-temM)
      oldSeedUpperN = (nextN >16
          if len(bin(pre))-2==32 and bin(pre)[2]=='1':
              return pre-1
          return pre
    v3 = replicateState(v1,v2)
    io.sendlineafter("[-]",str(v3))
    io.recvuntil("[+]Generating challenge 3\n")
    io.sendlineafter("[-]",str(random.getrandbits(32)))
    io.recv()
    io.recv()
### copperstudy
  * 关于coppersmith rsa相关攻击，攻击代码如下：
    from pwn import *
    import gmpy2
    from Crypto.Util.number import long_to_bytes
    context.log_level = "debug"
    import hashlib
    def proof(prefix,hexdig):
        for a in range(0,256):
            for b in range(0,256):
                for c in range(0,256):
                    skr = prefix + chr(a) +chr(b) + chr(c)
                    if hashlib.sha256(skr).hexdigest()==hexdig:
                        return skr.encode("hex")
    ip = '119.3.245.36'
    port = 12345
    token = "08c5028f14a51d3336c3e4f80414706d"
    io = remote(ip,port)
    io.recvline()
    hexdig = io.recvline().split("=")[1].strip()
    prefix = io.recvline().split("=")[1].strip().decode("hex")
    io.sendlineafter("skr.encode('hex')=",proof(prefix,hexdig))
    io.sendlineafter("[+]teamtoken:",token)
    io.recvuntil("[+]Generating challenge 1\n")
    n = io.recvline().split("=")[1].strip()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    msg = io.recvline().split("=")[1].strip()
    '''sage
    n = 0x5531aea5ffe86eccf70882f505f4781896f94d18cb35d1baed228ef217f3814145bd7e2d083b43a3b11956a189bd83028d1cea92c707ef2c89470f6976447df21f2125c8ddf79a4e152a616af4b07a3eb8cb4404040e667559979f26ae4b20a70bc8ffbd6524f4e3f565f422a167feebb00f675b76450a2f158f5ef81ce05cd3L
    c = 0x1aead4a71c0c3947638876c35442d3eec3da7a8901479a0bfd130b90357e761301ceef8c5f8216ed6ed15926733741e188739458ab8166ead89069df347dd8dc801ce8b528da9d1182721c2a059b0ce9cceacae561fefef2999b39975925cf4ca293f85e959cbe5750e78735f2da3982c886eb62ff69e7440cf57e76e713cb9aL
    msg = 0x151886a90ebbbfe79f63fbfb860f991089786e883be96fd85a39f56e6512147680fe4257b814d76bdd7dea62a4c75c41cfb717f150eb38000000000000000000L
    e = 3
    P. = PolynomialRing(Zmod(n))
    f = (msg + x)^e - c
    f = f.monic()
    m = f.small_roots(epsilon=1/20)
    print int(m[0])
    1903917370682551034555
    msg
    m = 1903917370682551034555
    msg = 0x151886a90ebbbfe79f63fbfb860f991089786e883be96fd85a39f56e6512147680fe4257b814d76bdd7dea62a4c75c41cfb717f150eb38000000000000000000L
    msg =msg|m
    print msg
    1104876946382386833226428817684728232572927155168858737579230414862059811638800254664053825832738693156293202153064542002981284505817481033381480455987899
    '''
    m = 1104876946382386833226428817684728232572927155168858737579230414862059811638800254664053825832738693156293202153064542002981284505817481033381480455987899
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 2\n")
    n = io.recvline().split("=")[1].strip()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    p = io.recvline().split("=")[1].strip()
    '''sage
    n = 0x5401d2f0e31048e194f24b88f9fc1b3fe6e0bf64bf83b8c83d5fbe0a42b9f43dedb9dce1ea61e812fbd1ff7364456a9a6f1e08bb51dfc94f97cb4a3f0064f2094d8cb78e30da72beb414ed1517655dde51e954b2b7dfbbba2190b2368915b41fa28972250444b4f79afd3778751e531826bc370aa39749a64f7b4d94e2d76d8dL
    pp =0x6bab908c66b6cfd913aa8902a58ece870e259675662eb4b12833419ef5253d713ac76d3e97cbe7602c7f1ff6f1865a4600000000000000000000000000000000L
    cipher = 0x1cd46c5a497639fdd69c35caf0fc12f1ccb6181fa76abcbb0a4a3900672d703d6f2637db8c8d7584d48e05cc28dcb3a1799265f0c378880c1ab8d5fc2b37222443d8272b5d7987419daacd9ce871329f7bab0c3938baeb517fc3352ad04eb8b1b82bae803bb8d61caaad28b6d16aff3f64290852e942002a40f4f0c5f0364c80L
    e =65537
    kbits = 128
    PR. = PolynomialRing(Zmod(n))
    f = x + pp
    roots = f.small_roots(X=2^kbits, beta=0.4)
    if roots:
       p = pp+int(roots[0])
       print "p: ", hex(int(p))
       assert n % p == 0
       q = n/int(p)
       print "q: ", hex(int(q))
       phin = (p-1)*(q-1)
       d = inverse_mod(e,phin)
       flag = pow(cipher,d,n)
       print flag
    p:  0x6bab908c66b6cfd913aa8902a58ece870e259675662eb4b12833419ef5253d713ac76d3e97cbe7602c7f1ff6f1865a46acf4dbae0f59512201f61593f9f68395L
    q:  0xc7bcecc65f7da74d92a08184b639f9af91ffea26c59416134869294ebd24d466eb3f58232d080a4a2b98dc65cf36c2efb0d3e99c6654155bd8e41831ff4d4419L
    585468706681329276477449718210237848124414211836568187401926758884114761898943378227026028418158072928115014574268157835435181166614393317861105335193790
    '''
    m = 585468706681329276477449718210237848124414211836568187401926758884114761898943378227026028418158072928115014574268157835435181166614393317861105335193790
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 3\n")
    n = io.recvline().split("=")[1].strip()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    io.recvline()
    dd = io.recvline().split("=")[1].strip()
    '''
    def partial_p(p0, kbits, n):
        PR. = PolynomialRing(Zmod(n))
        nbits = n.nbits()
        f = 2^kbits*x + p0
        f = f.monic()
        roots = f.small_roots(X=2^(nbits//2-kbits), beta=0.3)  # find root = n^0.3
        if roots:
            x0 = roots[0]
            p = gcd(2^kbits*x0 + p0, n)
            return ZZ(p)
    def find_p(d0, kbits, e, n):
        X = var('X')
        for k in xrange(1, e+1):
            results = solve_mod([e*d0*X - k*X*(n-X+1) + k*n == X], 2^kbits)
            for x in results:
                p0 = ZZ(x[0])
                p = partial_p(p0, kbits, n)
                if p:
                    return p
    if __name__ == '__main__':
        n = 0x359f1a3579b0feb2c8315eabd4f18300d0a436246c514c6f20315b367abdf7fa8bb2a67f463e93ee55e904709b9d8bb41961e05fab0996b021d14a41e95854b0d5fa4cd5b8bd4b5dfc239d457225a82e5193bfa9607c8a10717a33e9e50560d8448eef09f59d3174e4d574ba311cb85c22d8b2ba94bb2aa9459fa7e4556eabf5
        e = 3
        d = 0xf03a5b5181ef301c0e90d9f9f8c89321dc224848e6438132b8bbe2578335c0ce512875d46a93cc2a2afcc64d53604ac12f2b5b9520507919ca651141635cf533
        beta = 0.6
        epsilon = beta^2/7
        nbits = n.nbits()
        print nbits
        kbits = floor(nbits*(beta^2+epsilon))
        print kbits
        d0 = d & (2^kbits-1)
        print "lower %d bits (of %d bits) is given" % (kbits, nbits)
        p = find_p(d0, kbits, e, n)
        print "found p: %d" % p
        q = n//p
        print d
        print inverse_mod(e, (p-1)*(q-1))
    1022
    420
    lower 420 bits (of 1022 bits) is given
    found p: 5187906304275017677597329735734220070576352716171110498255822371549949926866441888027248344079507102971677286337805888649512278848643645061940765012795363
    12581758953975131139829460552441032035253094155970085390848181339207904871866760521309122068771352966718052558317786123791975955455578013601603365747094835
    25102862251104975324783237668753484063940741831599758073664126789860590958797844165485168376592162323554806263577532211244673018130713710718373026663090840738408904930459702120537687392575873439836153561926217351088417309346677995236698734007954784101740717586952475522629013159116921613383958314383683941683
    '''
    n = 0x359f1a3579b0feb2c8315eabd4f18300d0a436246c514c6f20315b367abdf7fa8bb2a67f463e93ee55e904709b9d8bb41961e05fab0996b021d14a41e95854b0d5fa4cd5b8bd4b5dfc239d457225a82e5193bfa9607c8a10717a33e9e50560d8448eef09f59d3174e4d574ba311cb85c22d8b2ba94bb2aa9459fa7e4556eabf5
    c = 0x21638d71294a9351d12ee4fda0f444e5b3f2ed8544b612883c095979da66c367323c3eae7d54040fb88aa590eefa62a3ea23bf6272eab4e6c5edbb7f4573d990c430e550afe3a4c3030c39e413986d284acfc3a2e3ab75778b2e067d85a89eab8182313073392997dee7cdab5ee4301f6e9721838406bddc88f3a1ae18ae57ba
    d = 25102862251104975324783237668753484063940741831599758073664126789860590958797844165485168376592162323554806263577532211244673018130713710718373026663090840738408904930459702120537687392575873439836153561926217351088417309346677995236698734007954784101740717586952475522629013159116921613383958314383683941683
    m = pow(c,d,n)
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 4\n")
    e = int(io.recvline().split("=")[1].strip())
    io.recvline()
    n1 = int(io.recvline().split("=")[1].strip()[2:-1],16)
    c1 = int(io.recvline().split("=")[2].strip()[2:-1],16)
    n2 = int(io.recvline().split("=")[1].strip()[2:-1],16)
    c2 = int(io.recvline().split("=")[2].strip()[2:-1],16)
    n3 = int(io.recvline().split("=")[1].strip()[2:-1],16)
    c3 = int(io.recvline().split("=")[2].strip()[2:-1],16)
    N = n1*n2*n3
    N1 = N/n1
    N2 = N/n2
    N3 = N/n3
    u1 = gmpy2.invert(N1, n1)
    u2 = gmpy2.invert(N2, n2)
    u3 = gmpy2.invert(N3, n3)
    M = (c1*u1*N1 + c2*u2*N2 + c3*u3*N3) % N
    m = int(gmpy2.iroot(M,e)[0])
    io.sendlineafter("[-]long_to_bytes(m).encode('hex')=",long_to_bytes(m).encode('hex'))
    io.recvuntil("[+]Generating challenge 5\n")
    n = io.recvline().split("=")[1].strip()
    e = io.recvline().split("=")[1].strip()
    io.recvline()
    c = io.recvline().split("=")[2].strip()
    x = io.recvline().split("=")[1].strip()
    '''
    from sage.all import *
    n1 =0x239e010007b64ae57fc6ed550065d6b0ff7bd24e74f8431528196a69ea29ccefa977d21bfbfaea80cf313e30b604465fda3d356ab8be8a998fd3687a6e3edd440691231850c97c423afc9ad77edbb0413772dfb855df2cd308906991230c620a08c6438f43c666cdf7856fd191cdab51d1082f92081fa79547775f0f5b8f0ec9
    e = 3
    C1 = 0xb67bf318324d9a0c0ea476e53f672e82f3e2107230ba71ff780c23f059d4dcf4fb2747d03d56494a8afe35a818acc5c05e1653bccde88f4636d953d1cf37f4f324124b026ecf2bed5fa5da93746fcff99f6fbc6d960a55f8ed8224bbd0f44e39294260e4d9266df21e93bf70ebf4b69ca20fe5fb9f031a444b72bb163c9a09cL
    C2 = 0x1803d75614802a7813d70169cef2a000ea55e3ea34863d4f684394e944c12cd1b70a8f46efe22ed5a11ac3799999417907eb4ed1f6f77fe84e081506218f1ffc31608c314f738656aa001a753d4d513bdb932e055a5300cccbc90c5a98d442deb2db7ca6b64423492e204c9a09fd2cc2a9710d09bb3c800eb252a17c34b41c00L
    PRxy. = PolynomialRing(Zmod(n1))
    PRx. = PolynomialRing(Zmod(n1))
    PRZZ. = PolynomialRing(Zmod(n1))
    g1 = x**e - C1
    g2 = (x + y)**e - C2
    q1 = g1.change_ring(PRZZ)
    q2 = g2.change_ring(PRZZ)
    h = q2.resultant(q1)
    # need to switch to univariate polynomial ring
    # because .small_roots is implemented only for univariate
    h = h.univariate_polynomial() # x is hopefully eliminated
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()
    roots = h.small_roots(X=2**40, beta=0.3)
    assert roots, "Failed1"
    diff = roots[0]
    if diff > 2**32:
        diff = -diff
        C1, C2 = C2, C1
    print "Difference:", diff
    x = PRx.gen() # otherwise write xn
    g1 = x**e - C1
    g2 = (x + 1)**e - C2
    # gcd
    while g2:
        g1, g2 = g2, g1 % g2
    g = g1.monic()
    assert g.degree() == 1, "Failed 2"
    # g = xn - msg
    msg = -g[0]
    # convert to str
    print msg
    print pow(msg,3,n1)==C1
    Difference: 1
    3359866727795952574047570400129983625808766359347672927740163405945044601265065800687792901768426453783209977783706554638017355219744329839231253397496875