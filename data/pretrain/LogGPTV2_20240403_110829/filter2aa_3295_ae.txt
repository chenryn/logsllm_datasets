### Variable Names for Username and Password
1. Enter the login URL into the "Target form" box, and click “Learn form settings.”
2. A new dialog box will appear. If more than one form is available on the page, select the correct form from the “Form name” pull-down list.
3. In the field list, find the form field for the username, click on it, and then click on “Username” below. Repeat this process for the password field and button. This instructs Brutus to use those two fields.
4. Click on the “Accept” button on that dialog box to return to Brutus’ form definition screen.

### Configuring Successful Login Indicators
1. The auditor needs to enter text that will appear on a successful login screen, which should be obtained from the site owner. This is required so that Brutus can recognize a successful login.
2. If possible, enter text that appears only after a successful administrator-level login.
3. Input this text in the “Primary response” field and select the “This response is positive” option.
4. Click “OK” to return to the main Brutus screen.

### Initiating the Scan
1. At this point, Brutus is ready to scan the site. Click on “Start” at the top of the window.
2. Progress will be shown at the bottom of the screen.
3. Once Brutus has finished its scan, the “Positive Authentication Results” section will display all usernames and passwords that resulted in a successful login.
4. These credentials should be verified outside of Brutus by attempting to log into the web application using them.

### Evaluating the Results
- **If any usernames and passwords are found by Brutus and they are verified to work on the web application, the site fails this test.**
- **If none are found, or if they are found to be false positives, the site passes this test.**
- **If there does not appear to be any account lockout procedures after a number of incorrect login attempts, the site owner should receive a warning.**

### Test Nature: Objective
- **Evidence:** To be determined
- **Findings:** To be determined

## 2.10 Verify Security of Any Client-Side JavaScript
### Checklist Item Number: 010
### Checklist Item Name: Verify Security of Any Client-Side JavaScript
### Reference: OWASP Guide to Building Secure Web Applications and Web Services, pages 32-33

### Risk
- This test addresses vulnerability number 15 in section 1.2.3 of this document.
- Many web applications use JavaScript that executes in the client’s browser as a means of providing security.
- For example, JavaScript could validate input to ensure that invalid responses are never passed to the web server, or, in the worst case, check passwords.
- Since it is trivial to view, change, or remove these checks, they offer no real security.
- The degree of exposure is considered to be medium.
- Many web sites have made this mistake, and it is extremely easy to exploit.
- The severity of a successful exploit is medium-high.
- In the worst case scenario, poorly written JavaScript controls could give an attacker administrative access to the web site.
- The net risk is therefore medium-high (3.5).

### Testing Procedure/Compliance Criteria
1. Use the mirror of the web site obtained with wget in test 007.
2. Search the files for the string `function validateInput () { if (document.form.year.value`.
3. If any such client-side scripting is found, determine what happens if it is bypassed.
4. The easiest way to test this is to turn off JavaScript in the web browser.
5. If the application is poorly written and relies on having client-side scripting enabled, edit the mirrored copies on the auditor’s computer or use an intercepting proxy like WebScarab or Achilles.
6. Assess what occurs when the form is used with invalid inputs and the protective JavaScript code is no longer available.
7. If client-side scripting is used for security and subsequent testing shows that the server-side scripting is not double-checking the input, the site fails this test.
8. If client-side scripting is used but the server appears to be double-checking the input as an extra level of protection, the site passes, but the site owner should be warned.
9. If no client-side scripting is being used for protection, the site passes this test.

### Test Nature: Objective
- **Evidence:** To be determined
- **Findings:** To be determined

## 3 Audit Testing, Evidence, and Findings
### 3.1 Check For Hidden Comments in HTML
#### 3.1.1 Evidence
- Screenshot showing the results of the WebScarab spider of the site.
- Eight files in the application contained HTML comments.
- Right-clicking on the filename and selecting “View comments” displayed a window containing all comments within that file.
- All comments were harmless, merely separating various sections of the page—vertical menu bars from main content.

#### 3.1.2 Findings
- No further testing was required as all comments were harmless.
- **Result:** PASS

### 3.2 Session Hijacking Via Cookie Manipulation
#### 3.2.1 Evidence
- Created a new user profile in Mozilla to start with a clean slate.
- Logged into an existing account on the site that had no special privileges.
- After logging in, the following cookie was set: [Cookie details]

#### 3.2.2 Findings
- The cookie shows that the site is using PHP’s built-in session management functions.
- PHP’s session management technique is well known and is not vulnerable to hijacking by manipulating the cookie data.
- Checked the security settings of the session files to ensure other users cannot view the contents.
- **Result:** PASS

### 3.3 SQL Injection
#### 3.3.1 Evidence
- Grep-ed the PHP source files for calls to the `mysql_query` function.
- Found an unsafe query in `authenticate.php`:
  ```php
  $auth = $_GET['auth'];
  $result = @mysql_query("SELECT * FROM user_auth WHERE auth='$auth'");
  ```
- Attempted to exploit the hole with the URL: `http://web.site.name/authenticate.php?auth='%20OR%201=1`
- Magic_quotes_gpc setting was enabled, which escaped the single quote, preventing the injection.

#### 3.3.2 Findings
- The site is not currently vulnerable to SQL injection attacks due to the `magic_quotes_gpc` setting.
- However, the code itself is not very safe and contains many insecure SQL queries.
- It is recommended to modify the code to be safe regardless of the `magic_quotes_gpc` setting.
- **Result:** PASS

### 3.4 Test for Adequate Safeguards Against Bandwidth Theft
- Sent the following request directly to port 80 on the web server being tested:
  ```
  GET /go.gif HTTP/1.1
  ```

---

**Note:** The above sections have been optimized for clarity, coherence, and professionalism. The key information and steps have been preserved and presented in a structured format.