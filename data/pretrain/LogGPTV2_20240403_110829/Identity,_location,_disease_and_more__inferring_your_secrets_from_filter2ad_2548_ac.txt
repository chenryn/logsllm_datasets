timestamps on 1500 tweets downloaded from the Twitter server
through a single API call, and present the results in Table 2. As we
can see here, for small towns with populations below 100 thousand,
all the tweets within one hour and a half can be retrieved through
a single query, which is sufﬁcient for our attack: it is conceivable
that the victim’s phone screen will dim out within that period after
she tweets, allowing the malicious app to send out the timestamp
through the browser. However, for Chicago, the query outcome only
covers 2 minutes of tweets. Therefore, we need to continuously
dump tweets from the Twitter server to a local database to make the
attack work.
In the experiment, we ran a script that repeatedly called the Twit-
ter Search API, at a rate of 135 queries per hour. All the results
without duplicates were stored in a local SQL database. Then, we
posted tweets through the Twitter app on a smartphone, under the
surveillance of the zero-permission app. After obvious robot Twitter
accounts were eliminated from the query results, our Twitter ID
were recovered by merely 3 timestamps at Urbana, 5 timestamps at
Bloomington and 9 timestamps in Chicago, which is aligned with
the city size and population.
3.3 Health and Investment
In this section, we show that the data-usage statistics our zero-
permission app collects also leak out apps’ sensitive inputs, e.g.,
1021well with the signatures in all 204 cases, in which we unequivocally
identiﬁed the disease conditions being visited.
4. FINDING WHERE YOU ARE
The precise location of a smartphone user is widely considered
to be private and should not be leaked out without the user’s ex-
plicit consent. Android guards such information with a permission
ACCESS_FINE_LOCATION. The information is further protected
from the websites that attempt to get it through a mobile browser (us-
ing navigator.geolocation.getCurrentPosition),
which is designed to ask for user’s permission when this happens.
In this section, we show that despite all such protections, our zero-
permission app can still access location-related data, which enables
accurate identiﬁcation of the user’s whereabout, whenever her phone
connects to a Wi-Fi hotspot.
As discussed before, Wi-Fi has been extensively utilized by smart-
phone users to save their mobile data. In particular, many users’
phones are in an auto-connect mode. Therefore, the threat posed by
our attack is very realistic. In the presence of a Wi-Fi connection, we
show in Section 3.2 that a phone’s coarse location can be obtained
through the gateway’s IP address. Here, we elaborate how to retrieve
its ﬁne location using the link layer information Android discloses.
4.1 Location Inference
We found that the BSSID of a Wi-Fi hotspot and signal levels per-
ceived by the phone are disclosed by Android through procfs. Such
information is location-sensitive because hotspots’ BSSIDs have
been extensively collected by companies (e.g., Google, Skyhook,
Navizon, etc.) for location-based services in the absence of GPS.
However, their databases are proprietary, not open to the public. In
this section, we show how we address this challenge and come up
with an end-to-end attack.
BSSID-based geo-location. In proc ﬁles /proc/net/arp and
/proc/net/wireless, Android documents the parameters of
Address Resolution Protocol (ARP) it uses to talk to a network
gateway (a hotspot in the case of Wi-Fi connections) and other
wireless activities. Of particular interest to us is the BSSID (in
the arp ﬁle), which is essentially the gateway’s MAC address, and
wireless signal levels (in the wireless ﬁle). Both ﬁles are accessible
to a zero-permission app. The app we implemented periodically
reads from procfs once every a few seconds to detect the existence
of the ﬁles, which indicates the presence of a Wi-Fi connection.
The arp ﬁle is inherited from Linux, on which its content is con-
sidered to be harmless: an internal gateway’s MAC address does
not seem to give away much sensitive user information. For smart-
phone, however, such an assumption no longer holds. More and
more companies like Google, Skyhook and Navizon are aggressively
collecting the BSSIDs of public Wi-Fi hotspots to ﬁnd out where
the user is, so as to provide location-based services (e.g., restaurant
recommendations) when GPS signals are weak or even not available.
Such information has been gathered in different ways. Some compa-
nies like Skyhook wireless and Google have literally driven through
different cities and mapped all the BSSID’s they detected to their
corresponding GPS locations. Others like Navizon distribute an app
with both GPS and wireless permissions. Such an app continuously
gleans the coordinates of a phone’s geo-locations together with the
BSSIDs it sees there, and uploads such information to a server that
maintains a BSSID location database.
All such databases are proprietary, not open to the public. Ac-
tually we talked to Skyhook in an attempt to purchase a license
for querying their database with the BSSID collected by our zero-
permission app. They were not willing to do that due to their
Figure 2: WebMD Finite State Machine
disease conditions a user selects on WebMD mobile [6]. This has
been achieved by ﬁngerprinting her actions with data-usage se-
quences they produce. The same attack technique also works on
Yahoo! Finance, which is elaborated in Appendix B.
WebMD mobile. WebMD mobile is an extremely popular Android
health and ﬁtness app, which has been installed 1 ∼ 5 million times
in the past 30 days [6]. To use the app, one ﬁrst clicks to select 1
out of 6 sections, such as “Symptom Checker”, “Conditions” and
others. In our research, we analyzed the data under the “Conditions”
section, which includes a list of disease conditions (e.g., Asthma,
Diabetes, etc.). Each condition, once clicked on, leads to a new
screen that displays the overview of the disease, its symptoms and
related articles. All such information is provided through a simple,
ﬁxed user interface running on the phone, while the data there is
downloaded from the web. We found that the changes of network
usage statistics during this process can be reliably linked to the user’s
selections on the interface, revealing the disease she is interested in.
Our attack. Again, we ﬁrst analyzed the app ofﬂine (i.e.
in a
controlled context) using Shark for Root, and built a detailed ﬁnite
state machine (FSM) for it based on the payload lengths of TCP
packets sent and received when the app moves from one screen (a
state of the FSM) to another. The FSM is illustrated in Figure 2.
Speciﬁcally, the user’s selection of a section is characterized by
a sequence of bytes, which is completely different from those of
other sections. Each disease under the “Conditions” section is also
associated with a distinctive payload sequence.
In particular, every time a user clicks on a condition she is inter-
ested in, the app produces 4 GET requests (with 3 GETs for ads);
and then 3 POST requests to acquire the content for that condition.
Among them, all ad-related requests and responses have predictable
payload lengths (e.g., 174 bytes for GET ads/dcfc.gif) and
can therefore be easily identiﬁed. The rest of the trafﬁc (1 GET
request, 3 POST requests and their responses) is characterized by
distinctive payload lengths that can be used to ﬁngerprint individual
disease conditions. Just based on the POST requests, we can already
classify all 204 conditions into 32 categories. The response payload
sizes further help us uniquely identify all 204 conditions.
In a real attack, however, our zero-permission app cannot see the
trafﬁc. The usage increments it collects could come from the com-
bination of two packets. This issue was addressed in our research
using the technique described in Section 3.1, which compares an
observed increment to the cumulative length of multiple packets.
Attack evaluation. We ran our malware on a Google Nexus S 4G
phone while using WebMD mobile. The usage data collected and
delivered by our app was further compared to the trafﬁc signatures
we built ofﬂine. We found that the increment sequences matched
1. Main Menu1.6 Sign In1.7 Settings1.1 Symptom Checker1.2 Conditions1.5 Local Health 1.2.1 Abscess1.2.2 ACL knee injury1.2.27 Breast cancer (male)1.2.204 Wernicle Syndrome586   ,  5311168   ,  1062196   ,  470698   ,  5303333   ,  95271496   ,  3500xxx  Advertisement related trafficxxx  POST request - Condition specificxxx  Condition specific responses to POSTs     Outbound traffic (from the app to the sever)     Inbound traffic (from the server to the app)624,  340-341, 385-403, 174, 458, 478, 492   530, 339-368, 2100±200, 512, 3898, 1074, 1997 638,  340-341, 385-403, 174, 464, 484, 498   530, 339-368, 2100±200, 512, 4231, 535, 1956 657,  340-341, 385-403, 174, 471, 491, 505   530, 339-368, 2100±200, 512, 2544, 472, 1852 643,  340-341, 385-403, 174, 468, 488, 502   530, 339-368, 2100±200, 512, 3202, 484, 1710 1022Table 3: Geo-location with a Single BSSID
Location
Home
Hospital1
Hospital2
Subway
Starbucks
Train/Bus Station
Church
Bookstore
Total BSSIDs
Collected
5
74
57
6
43
14
82
34
Working
BSSIDs
4
2
4
4
3
10
3
2
Error
0ft
59ft
528ft
3ft
6ft
0ft
150ft
289ft
concerns that our analysis could impact people’s perceptions about
the privacy implications of BSSID collection.
Exploiting commercial
location services. Many commer-
cial apps that offer location-based service need a permission
ACCESS_WIFI_STATE, so they can collect the BSSIDs of all
the surrounding hotspots for geo-locating their users. In our case,
however, our zero-permission app can only get a single BSSID,
the one for the hotspot the phone is currently in connection with.
We need to understand whether this is still enough for ﬁnding out
the user’s location. Since we cannot directly use those proprietary
databases, we have to leverage these existing apps to get the loca-
tion. The idea is to understand the protocol these apps run with their
servers to generate the right query that can give us the expected
response.
Speciﬁcally, we utilized the Navizon app to develop such an
indirect query mechanism. Like Google and Skyhook, Navizon also
has a BSSID database with a wide coverage [2], particularly in US.
In our research, we reverse-engineered the app’s protocol by using a
proxy, and found that there is no authentication in the protocol and
its request is a list of BSSIDs and signal levels encoded in Base64.
Based upon such information, we built a “querier” server that uses
the information our app sneaks out to construct a valid Navizon
request for querying its database for the location of the target phone.
4.2 Attack Evaluation
Data collection. To understand the seriousness of this information
leak, we ran our zero-permission app to collect BSSID data from the
Wi-Fi connections made at places in Urbana and Chicago, including
home, hospital, church, bookstore, train/bus station and others. The
results are illustrated in Table 3.
Results. Our app easily detected the presence of Wi-Fi connections
and stealthily sent out the BSSIDs associated with these connections.
Running our query mechanism, we successfully identiﬁed all these
locations from Navizon. On the other hand, we found that not every
hotspot can be used for this purpose: after all, the Navizon database
is still far from complete. Table 3 describes the numbers of the
hotspots good for geo-locations at different spots and their accuracy.
5. KNOWING WHERE YOU GO
As discussed before, information leaks happen not only on the
Linux layer of Android but also on its API level. In this section,
we report our study of an audio public API that gives away one’s
driving route.
5.1 Driving Route Inference
Speaker usage information. Android offers a set of public APIs
that any apps, including those without any permissions, can call. An
example is AudioManager.isMusicActive, through which
an app can ﬁnd out whether any sound is being played by the phone.
This API is used to coordinate apps’ access to the speaker. This
this component
Similar to the data-usage monitor,
Consider a GPS navigation app one uses when she is driving.
Such an app typically gives turn-by-turn voice guidance. During
this process, a zero-permission app that continuously invokes the
isMusicActive API can observe when the voice is being played
and when it is off. In this way, it can get a sequence of speech lengths
for voice direction elements, such as “turn left onto the Broadway
avenue”, which are typically individual sentences. The content of
such directions is boilerplate but still diverse, depending on the
names of street/avenues, and one driving route typically contains
many such direction elements. These features make the length
sequence a high dimensional vector that can be used to ﬁngerprint a
driving route, as discovered in our research.
Audio status logger. To collect such speech-length sequences,
we implemented an audio-state logger into our zero-permission
app.
is
invoked only when the target app is found to be running
(Section 3.1).
In this case, we are looking for the pro-
cess com.google.android.apps.maps, Google’s naviga-
tion app. Once the process is discovered, our app runs the logger
to continuously call isMusicActive, with a sampling rate of 50
per second. Whenever a change to the speaker status is detected,
it records the new status and the timestamp of this event. At the
end of the navigation, the app sneaks out this sequence (see Sec-
tion 2.2), which is then used to reconstruct individual elements in
the speech-length sequence through looking for the timestamp of an
“on” speaker state with its preceding state being “off”, and the timing
for its subsequent state change that goes the other way around.
Route ﬁngerprinting simulator. Using the audio-status logger, we
recorded the speech length sequences when we drove from home to
ofﬁce three times at Bloomington. Figure 3 shows the comparisons
among those sequences. Here we consider that two speech-length
elements match if their difference is below 0.05 second, which is
the error margin of the speaker status sampling. As we can see from
the ﬁgure, those sequences all match well, except a spike caused by
an incoming call in one trip.
Figure 3: Audio elements similarity when driving on the same route
seemingly harmless capability, however, turns out to reveal sensitive
information in the presence of the powerful Google Maps API.
To understand whether such sequences are sufﬁciently differen-
tiable for ﬁngerprinting a route, we further built an app that simulates
the navigation process during driving. The app queries the Google
Maps API [9] to get a route between a pair of addresses, which
is in the form of a polyline, that is, a list of nodes (positions with
GPS coordinates) and line segments between the consecutive nodes.
Speciﬁcally, we turn on the “allow mock gps” option of an Android
phone. This replaces the physical GPS with a simulator, which
replays the gps coordinates of the route to Google Navigator and
records the voice guidance along the route to measure the lengths of
its speech elements.
0510152023456audio elements length (sec)audio sequence  Incomming call noise1023which are used to compare with the signature.
If the substring
matches any signature sequences (i.e., with an overlap ratio above
the threshold), we get strong evidence that the smartphone user has
been to the ﬁngerprinted location.
Scalable sequence matching. More challenging here is to locate
a user’s driving route on the map. For this purpose, we need some
background knowledge to roughly determine the area that covers
the route. As discussed before (Section 3.2 and 4), we can geo-
locate the user’s home and other places she frequently visits when
her phone is set to auto connect. At the very least, ﬁnding the
city one is currently in can be easily done in the presence of Wi-Fi
connection. Therefore, in our research, we assume that we know the
user’s start location or a place on her route and the rough area (e.g.,
city) she goes. Note that simply knowing one’s start and destination
cities can be enough for getting such information: driving between
two cities typically goes through a common route segment, whose
speech-length sequence can be used to locate the entrance point of
the destination city (e.g., a highway exit) on the length sequence
recorded during the victim’s driving. Furthermore, since we can
calculate from the timestamps on the sequence the driving time
between the known location and the destination, the possible areas
of the target can be roughly determined.
However, even under these constraints, collecting speech-length
sequences in a large scale is still difﬁcult: our driving simulator
takes 2 to 5 minutes to complete a 10-mile route in Bloomington
(necessary for getting all the speech elements on the route), which is
much faster than a real drive, but still too slow to handle thousands
(or more) of possible routes we need to inspect. Here we show how