所有文件（即 *.db），以及类型为文件 f。
find.-name"*.db"-typef
下面的截图展示了输出：
第五章Android取证
61
5. 现在，我们可以简单地使用 cp和 find，以便将其复制到 BackupDBS目录
find.-name"*.db"-typef-execcp{}/mnt/sdcard/BackupDBS\;
6. 现在，如果我们查看 /mnt/sdcard下的 BackupDBS目录，我们的所有数据库都已成功复制
到此位置。
第五章Android取证
62
7. 压缩并拉取文件。现在，在同一位置，我们可以使用 tar工具创建一个压缩包，并使
用 adbpull。
tarcvfbackups.tarBackupDBS/
8. 然后，从系统中，我们可以简单地像这样拉取它。此方法也可以用于通过
在 /data/app和 /data/app-private文件夹中查找文件类型 .apk，来从手机中拉取所
有 .apk文件。
9. 如果我们仔细看一看，在我们的 backups.tar中，还有一个名为 msgstore.db的
WhatsApp应用程序的数据库。让我们继续分析和研究数据库内部的内容。为此，我们
需要首先解压我们刚才拉取的 tar归档文件。
tar-xvfbackups.tar
10. 现在，为了分析名为 msgstore.db的WhatsApp的SQLite数据库，我们可以下载并使用
任何SQLite浏览器。对于本书，我们使用SQLite数据库浏览器，可以
从 http://sourceforge.net/projects/sqlitebrowser/下载。
11. 现在，如果我们在SQLite数据库浏览器中打开 msgstore.db文件并访问浏览器数据，我
们可以在SQLite浏览器中看到我们的所有WhatsApp对话。在以下截图中，我们可以
看到在SQLite数据库浏览器中打开的 msgstore.db，它显示WhatsApp应用程序的所有
第五章Android取证
63
聊天对话：
5.7使用logcat记录日志
Androidlogcat有时在取证调查期间很有用。它包含在电话以及收音机上执行的所有活动的
日志。虽然不完整，它可以帮助调查员了解设备中发生了什么。
为了捕获和保存logcat转储文件，我们可以简单地使用 adblogcat并将输出保存到一个文
件，稍后我们可以分析它。
adblogcat>logcat_dump.log
我们还可以使用 logcat以更加详细和有用的方式获取日志。例如，我们可以通过指定 -b参
数和 radio来获取收音机日志。 -b标志用于显示缓冲区（如收音机或事件）的logcat。
-v标志用于控制输出格式，它代表 verbose（详细），也可以
是 time， brief， process， tag， raw， threadtime或 long。除了 -v，我们还可以
使用 -d（调试）， -i（信息）， -w（警告）或 -e（错误）。
adblogcat-vtime-bradio-d
我们还可以使用其他工具，如 dmesg，它将打印内核消息，以及 getprop，它将打印设备的
属性：
adbshellgetprop
XDA开发人员成员rpierce99还提供了一个应用程序，用于自动捕获来自logcat和其他相关
来源的信息，这些信息可以从 https://code.google.com/p/getlogs/下载并使用。
第五章Android取证
64
5.8使用备份功能来提取应用数据
Android从4.0起引入了使用 adb的备份功能。此功能可用于创建应用程序的备份及其整个
数据。这在取证上非常有用，因为取证员可以捕获应用程序及其整个数据。请参阅以下步
骤：
1. 这可以通过在终端中执行 adbbackup命令，后面附带应用程序的包名来完成。如果我们
不知道应用程序的准确包名称，我们可以使用 pm列出所有包，然后过滤应用程序名称。
2. 执行此操作的另一种方法是使用 pmlistpackage命令，其中 -f标志指定要在包名称中
查找的字符串。
3. 接下来，我们可以简单地使用应用程序的包名称，来备份任何我们需要的应用程序。
adbbackup[packagename]-f[destinationfilename]
4. 目标文件将以文件扩展名 .ab（Android备份）存储。在这里，我们采集了WhatsApp
应用程序的备份。
5. 一旦我们运行命令，它将暂停，并要求我们在设备上确认，如下面的截图所示：
第五章Android取证
65
6. 在这里，我们需要选择 Backupmydata（备份我的数据）选项，并且还可以为备份指定
加密密码。一旦备份过程完成，我们将获得 whatsapp_backup.ab文件。
7. 接下来，我们需要解压此备份，以便从 .ab文件获取数据库。为此，我们将使
用 dd和 openssl创建一个 .tar文件，然后我们可以解压它。
8. 现在，由于我们获得了 .tar文件，我们可以使用 tarxvf简单解压它。
第五章Android取证
66
9. 一旦它解压完成，我们可以访问 apps/[package-name]下的 db文件夹，来获取数据库。
这里，程序包名称为 com.whatsapp。
让我们快速使用 ls-l来查看 db文件夹中的所有可用文件。正如你可以看到的，我们拥
有 msgstore.db文件，它包含WhatsApp对话，我们已经在上一节中看到了。
总结
在本章中，我们分析了执行取证的不同方法，以及各种工具，我们可以使用它们来帮助我们
进行取证调查。此外，我们了解了一些我们可以执行的手动方法，来从设备中提取数据。
在下一章中，我们将深入SQLite数据库，这是Android渗透测试的另一个要素。
第五章Android取证
67
第五章Android取证
68
第六章玩转SQLite
作者：AdityaGupta
译者：飞龙
协议：CCBY-NC-SA4.0
SQLite是一个开源数据库，具有许多类似于其他关系数据库（如SQL）的功能。如果你是应
用程序开发人员，你可能还会注意到SQLite查询看起来或多或少像SQL一样。在Android
中选择SQLite的原因是其内存占用较低。Android开发者喜欢SQLite的原因是它不需要设
置或配置数据库，并且可以在应用程序中直接调用。
6.1深入理解SQLite
正如我们在上一章中看到的，SQLite数据库默认在Android中存储
在 /data/data/[packagename]/databases/位置，扩展名为 .db文件（在Android的大多数情
况下）。现在，在我们更深入地探讨SQLite漏洞之前，我们应该清楚地了解SQLite语句和
一些基本的命令
分析使用SQLite的简单应用
在这里，我们有一个基本的Android应用程序，它支持用户的登录和注册，并在后端使用
SQLite。遵循以下步骤：
1. 让我们运行应用程序并分析它创建的数据库。你可以
从 http://attify.com/lpfa/vulnsqlite.apk下载漏洞应用程序。用于创建数据库的代码示
例如以下屏幕截图所示：
2. 这意味着我们有七个字段，名称为 id( integer), firstName( text), lastName
( text), email( text), phoneNumber( text), username( text),和 password
( text)。 tableName字段之前叫做 USER_RECORDS。
3. 让我们现在访问adbshell并检查数据库。我们可以使用SQLite浏览器访问SQLite文
件，我们在上一章中使用了它，或者我们可以使用命令行工具 sqlite3。对于整个这一
章，我们将使用名为 sqlite3的命令行工具，它存在于大多数Android设备中。如果你
的Android设备中不存在它，你可以使用Play商店中提供的BusyBox应用程序进行安
装。
第六章玩转SQLite
69
4. 所以，让我们继续分析数据库。我们需要做的第一件事是使用adbshell进入设备。
5. 下一步是访问 /data/data/[package-name]目录的位置并查找 databases文件夹。一旦我
们进入了数据库文件夹，我们会注意到各种文件。现在，SQLite数据库的文件格式大多
是前面提到的 .db，但它们也可以为 .sqlite， .sqlitedb或开发人员在创建应用程序
时指定的任何其他扩展名。如果你记得上一章中的练习，在查找数据库文件时，这正是
寻找其他扩展名的时候，例如 .sqlite。
6. 现在，我们可以使用以下命令使用 sqlite3打开数据库：
sqlite3[databasename]
在这种情况下，由于数据库名称是 weak-db，我们可以简单地输
入 sqlite3vulnerable-db打开它。我们也可以在给定时间使用 sqlite3打开多个数据
库。要查看加载的当前数据库，我们可以键入 .databases命令列出我们当前的数据库，
如下面的截图所示：
7. 现在，我们打开数据库时要做的第一件事是查看数据库中包含的表。表的列表可以
由 .tables显示，如以下屏幕截图所示：
正如我们在这里可以看到的，有两个名称为 USER_RECORDS和 android_metadata的表。由
于我们对 USER_RECORDS更感兴趣，我们将首先继续查看表中的各个列，稍后我们将转储
列字段中的数据。为了查看有关表的更多信息，例如列字段，我们可以使用 .schema命
令，如下面的截图所示：
8. 接下来我们需要做的是通过执行 SELECT查询来查看列字段中的数据。
注意
另一个需要注意的重要事情是，SQL中使用的大多数查询对SQLite仍然有效。
9. 使用应用程序并为数据库填充一些信息。接下来，为了查询并查看 USER_RECORDS表，通
过通配符 *指定所有内容，我们可以使用以下命令：
SELECT*fromUSER_RECORDS;
第六章玩转SQLite
70
运行上述命令将产生类似于如下所示的输出：
现在， sqlite3也给了我们改变输出格式，查看额外信息以及所需信息的自由。所以，
让我们继续，将查看 mode设置为 column，将 header设置为 on。
10. 让我们再次运行相同的查询并检查输出，如下面的截图所示：
还有其他可用的选项可用于渗透测试。其中之一是 .output命令。这会自动将之后的
SQL查询的输出保存到指定的文件，我们可以稍后拉取，而不是在屏幕上显示。一旦我
们将输出保存在文件中，并且想返回屏幕显示模式，我们可以使用 .output命令并将其
设置为 stdout，这将再次在终端上显示输出。
在SQLite中， .dump将创建一个列表，包含从数据库创建到现在为止所执行的所有SQL
操作。以下是在当前数据库上运行的命令的输出的屏幕截图：
此外，所有这些操作都可以从终端执行，而不是进入shell，然后启动 sqlite3二进制。
我们可以直接向adbshell传递我们的命令并获得输出，如下面的截图所示：
6.2安全漏洞
Web应用程序和移动应用程序中最常见的漏洞之一是基于注入的漏洞。如果按原样使用用户
提供的输入，或动态SQL查询的保护很少并且不足够，SQLite也会产生注入漏洞。
让我们来看看用于查询应用程序中的数据的SQL查询，如下所示：
第六章玩转SQLite
71
StringgetSQL="SELECT*FROM"+tableName+"WHERE"+
username+"='"+uname+"'AND"+password+"='"+pword+
"'";
Cursorcursor=dataBase.rawQuery(getSQL,null
在前面的SQL查询中， uname和 pword字段从用户输入直接传递到SQL查询中，然后使
用 rawQuery方法执行。 rawQuery方法实际上只是执行任何传递给它的SQL查询。另一个类
似于 rawQuery的方法是 execSQL方法，它和 rawQuery一样脆弱。
前面的SQL查询用于验证用户的登录凭据，然后显示其在注册期间使用的信息。所以，这里
的SQL引擎检查用户名和密码是否匹配在一行，如果是这样，它返回一个布尔值 TRUE。
然而，想象一个场景，我们可以修改我们的输入，而不是正常的文本输入，它似乎是应用程
序的SQL查询的一部分，然后又返回 TRUE，从而授予我们身份。事实证明，如果我们把用
户名/密码设为 1'or'1'='1或任何类似总是 TRUE的查询，我们就破解了应用程序的身份验证
机制，这反过来是一个很大的安全风险。另外，请注意，由于使用单引号，在前面输入中使
用的 OR将在SQL查询中被视为 OR。这将闭合用户名字段，并且我们的其余输入将解释为
SQL查询。你可以从 http://attify.com/lpfa/sqlite.apk下载漏洞应用程序。这里是攻击情
况下的SQL查询：
SELECT*FROMUSER_RECORDSWHEREUSERNAME='1'or'1'='1'AND
PASSWORD='something'
如果应用程序检测到登录成功，它会显示一个弹出框，其中包含用户信息，就像在SQLite身