Kubernetes ReplicaSet
在上图中，我们看到了这样一个名为**RS-API**的复制集，它控制着许多豆荚。这些吊舱被称为**吊舱-api** 。复制器组负责确保在任何给定时间总是有期望数量的吊舱运行。如果其中一个 pod 由于某种原因崩溃，ReplicaSet 会在一个节点上调度一个新的 pod 来释放资源。如果豆荚的数量超过了期望的数量，那么复制集就会杀死多余的豆荚。因此，我们可以说，复制集保证了一个自我修复和可扩展的豆荚集。复制集可以由多少个豆荚组成没有限制。
# 复制集规范
类似于我们对豆荚的了解，Kubernetes 斯还允许我们强制或声明性地定义和创建一个`ReplicaSet`。由于在大多数情况下，声明式方法是目前推荐的方法，我们将集中讨论这种方法。这是一个 Kubernetes 斯`ReplicaSet`的样本规格:
```
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: rs-web
spec:
  selector:
    matchLabels:
      app: web
  replicas: 3
  template: 
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
```
这看起来非常像我们之前介绍的 pod 规范。那么，让我们把注意力集中在差异上。首先，在第 2 行，我们有曾经的`Pod`和现在的`ReplicaSet`。然后，在第 6-8 行，我们有一个选择器来决定将成为`ReplicaSet`一部分的吊舱。在这种情况下，所有的豆荚都有一个标签`app`，值为`web`。然后，在第 9 行，我们定义要运行多少个 pod 副本；三，在这种情况下。最后，我们有`template`部分，它首先定义了`metadata`，然后是`spec`，它定义了在容器内运行的容器。在我们的例子中，我们有一个使用`nginx:alpine`映像和出口端口`80`的单个容器。
真正重要的元素是复制品的数量和选择器，选择器指定由`ReplicaSet`控制的一组豆荚。
在我们的`ch12`文件夹中，我们有一个名为`replicaset.yaml`的文件，它包含了前面的规范。让我们用这个文件来创建`ReplicaSet`:
```
$ kubectl create -f replicaset.yaml
replicaset "rs-web" created
```
如果我们列出集群中的所有副本集，我们会得到这个(`rs`是`replicaset`的快捷方式):
```
$ kubectl get rs
NAME     DESIRED   CURRENT   READY   AGE
rs-web   3         3         3       51s
```
在前面的输出中，我们可以看到我们有一个名为`rs-web`的复制集，它的期望状态是三(豆荚)。当前状态还显示三个吊舱，所有三个吊舱都准备好了。我们还可以列出系统中的所有吊舱，我们会得到:
```
$ kubectl get pods
NAME           READY   STATUS    RESTARTS   AGE
rs-web-6qzld   1/1     Running   0          4m
rs-web-frj2m   1/1     Running   0          4m
rs-web-zd2kt   1/1     Running   0          4m
```
在这里，我们看到了三个预期的吊舱。吊舱的名称使用复制集的名称，每个吊舱附加一个唯一的标识。在`READY`列中，我们看到在 pod 中定义了多少个容器，其中有多少个容器已经准备好了。在我们的例子中，每个吊舱只有一个容器，在每种情况下，它都是准备好的。因此，吊舱的整体状态为`Running`。我们还会看到每个吊舱需要重启多少次。在我们的例子中，我们还没有任何重启。
# 自愈
现在让我们通过随机杀死它的一个豆荚并观察将要发生的事情来测试`ReplicaSet`的自我修复的魔力。让我们从前面的列表中删除第一个窗格:
```
$ kubectl delete po/rs-web-6qzld
pod "rs-web-6qzld" deleted
```
然后，让我们再次列出所有的豆荚。我们预计只能看到两个吊舱，对吗？错误:
![](img/b45919d2-615d-4aab-bfe5-8ca1b1874a55.png)
List of pods after having killed a pod of the ReplicaSet
好的，显然列表中的第二个窗格已经被重新创建，正如我们从`AGE`栏中看到的。这是行动中的自动修复。让我们看看如果我们描述复制集会发现什么:
![](img/de913d69-7883-4fd8-ae4f-e802f6462bea.png)
Describe the ReplicaSet
事实上，我们在`Events`下找到一个条目，告诉我们`ReplicaSet`创造了新的豆荚`rs-web-q6cr7`。
# 库比涅斯部署
Kubernetes 非常重视单一责任原则。所有 Kubernetes 对象都被设计成只做一件事。他们被设计来很好地做这件事。在这方面，我们必须了解 Kubernetes**副本集**和**部署**。我们已经了解到，复制集负责实现和协调应用服务的期望状态。这意味着复制集管理一组豆荚。
**部署**通过在其之上提供滚动更新和回滚功能来扩展副本集。在 Docker Swarm 中，Swarm 服务将包含复制集和部署的功能。在这一点上，SwarmKit 比 Kubernetes 要单一得多。下图显示了部署与复制集的关系:
![](img/ea5b12de-2bd8-463b-bd2c-a5a8c24f2d33.png)
Kubernetes deployment
在上图中，**复制集**定义并管理一组相同的豆荚。ReplicaSet 的主要特点是自我修复、可扩展，并且总是尽最大努力协调所需的状态。Kubernetes 部署反过来为该板增加了滚动更新和回滚功能。在这方面，部署实际上是复制集的包装对象。
我们将在本书的下一章中了解更多关于滚动更新和回滚的信息。
# 库比涅斯的服务，库比涅斯的服务，库比涅斯的服务，库比涅斯的服务，库比涅斯的服务，库比涅斯的服务，库比涅斯的服务，库比涅斯的服务
当我们开始使用由多个应用服务组成的应用时，我们需要服务发现。在下图中，我们说明了这个问题:
![](img/5b2477f4-5ecd-41ae-8fde-ff6b298d9e16.png)
Service discovery
在此图中，我们有一个**网络应用编程接口**服务，需要访问其他三个服务— **支付**、**运输**和**订购**。网络应用编程接口在任何时候都不应该关心如何以及在哪里找到这三个服务。在 API 代码中，我们只想使用我们想要到达的服务的名称及其端口号。一个示例是用于访问支付服务实例的网址`http://payments:3000`。
在 Kubernetes 中，支付应用服务由一组复制的 pods 表示。由于高度分布式系统的性质，我们不能假设吊舱有稳定的端点。一个吊舱可以在一个软骨头里来来去去。但是，如果我们需要从内部或外部客户端访问相应的应用服务，这是一个问题。如果我们不能依赖 pod 端点稳定，*我们还能做什么？*
这就是 Kubernetes 服务发挥作用的地方。它们旨在为复制集或部署提供稳定的端点，如下所示:
![](img/0ad53496-470b-4225-a57f-ea033b32149b.png)
Kubernetes service providing stable endpoints to clients
在上图中，在中间，我们看到了这样一个 Kubernetes 服务。它提供了一个可靠的集群范围的 IP 地址，也称为**虚拟 IP** ( **贵宾**)，以及一个在整个集群中独一无二的可靠端口。Kubernetes 服务代理的荚由服务规范中定义的选择器决定。选择器总是基于标签。每个 Kubernetes 对象可以分配零到多个标签。在我们的例子中，选择器是 **app=web** ，也就是说，所有具有标签为 app 且值为 web 的豆荚都被代理。
# 基于上下文的路由
通常，我们希望为 Kubernetes 集群配置基于上下文的路由。Kubernetes 为我们提供了各种方法。此时，首选且最具可扩展性的方法是使用 **IngressController** 来完成这项工作。下图试图说明这个入口控制器是如何工作的:
![](img/6e87c227-dc25-4dd3-9676-c5d040c8352c.png)
Context-based routing using a Kubernetes ingress controller
在此图中，我们可以看到使用入口控制器(如 Nginx)时，基于上下文(或第 7 层)的路由是如何工作的。这里，我们部署了一个名为 **web** 的应用服务。这个应用服务的所有豆荚都有一个标签 **app=web** 。然后，我们有一个名为 web 的 Kubernetes 服务，它为这些豆荚提供了一个稳定的端点。服务有一个`52.14.0.13`的(虚拟)IP，并公开端口`30044`。也就是说，如果一个名称为 **web** 和端口`30044`的请求到达 Kubernetes 集群的任何节点，那么它将被转发到这个服务。然后，服务将请求负载平衡到其中一个吊舱。
到目前为止还不错，*但是从客户端到 URL `http[s]://example.com/web`的入口请求是如何路由到我们的 web 服务的呢？*首先，我们必须定义从基于上下文的请求到相应的`/`请求的路由。这是通过一个**入口**对象完成的:
1.  在入口对象中，我们将主机和路径定义为源，将(服务)名称和端口定义为目标。当这个入口对象由 Kubernetes API 服务器创建时，一个在 IngressController 中作为 sidecar 运行的进程会接受这个变化
2.  修改 Nginx 反向代理的配置文件
3.  通过添加新的路由，Nginx 然后被要求重新加载其配置，因此将能够正确地将任何传入的请求路由到`http[s]://example.com/web`。
# 将 FlowKit 与 Kubernetes 进行比较
现在，我们已经了解了 Kubernetes 中最重要的资源的许多细节，通过匹配重要的资源来比较两个编排器，即 SwarmKit 和 Kubernetes 是有帮助的。这是桌子:
| **群组** | **立方〔t1〕** | **描述** |
| 蜂群 | 串 | 由各自的编排者管理的一组服务器/节点。 |
| 结节 | 集群成员 | 作为群/集群成员的单个主机(物理或虚拟)。 |
| 管理器节点 | 掌握 | 管理群/集群的节点。这是控制平面。 |
| 工作节点 | 结节 | 运行应用工作负载的群/集群成员。 |
| 容器 | 容器** | 在节点上运行的容器映像的实例。在 Kubernetes 集群中，我们不能运行容器。 |
| 工作 | 豆荚 | 在节点上运行的服务(群)或复制集(Kubernetes)的实例。一个任务管理一个容器，而一个 Pod 包含一个到多个容器，它们共享同一个网络名称空间。 |
| 服务 | replication set-复制集 | 定义并协调由多个实例组成的应用服务的期望状态。 |
| 服务 | 部署 | 部署是一个具有滚动更新和回滚功能的复制集。 |
| 路由网格 | 服务 | 群路由网状网使用 IPVS 提供 L4 路由和负载平衡。Kubernetes 服务是一个抽象，它定义了一组逻辑的 pods 和访问它们的策略。它是一组吊舱的稳定端点。 |
| 堆 | 栈** | 由多个(群集)服务组成的应用的定义。虽然栈不是 Kubernetes 本地的，但 Docker 的工具 Docker for Mac 或 Windows 会将它们翻译成部署到 Kubernetes 集群上。 |
| 网络 | 网络策略 | Swarm **软件定义网络**(**sdn**)用于防火墙容器。Kubernetes 只定义了一个平面网络。除非明确定义网络策略来约束 pod 之间的通信，否则每个 pod 都可以到达其他每个 pod 和/或节点。 |
# 摘要
在本章中，我们学习了 Kubernetes 的基础知识。我们对它的体系结构进行了概述，并介绍了用于在 Kubernetes 集群中定义和运行应用的主要资源。我们还在 Docker 中引入了 Minikube 和 Kubernetes 对 Mac 和 Windows 的支持。
在下一章中，我们将把一个应用部署到 Kubernetes 集群中。然后，我们将使用零停机策略更新该应用的一项服务。最后，我们将使用机密来检测在 Kubernetes 中运行的带有敏感数据的应用服务。敬请关注。
# 问题
请回答以下问题来评估您的学习进度:
1.  用几句简短的话解释一下 Kubernetes 斯大师的角色是什么。
2.  列出需要出现在每个 Kubernetes(工作节点)上的元素。
3.  是或否:我们不能在 Kubernetes 集群中运行单个容器。
4.  解释为什么一个吊舱的容器可以使用`localhost`相互通信。
5.  吊舱中所谓的暂停容器的目的是什么？
6.  Bob 告诉您:*我们的应用由三个 Docker 映像组成:`web`、`inventory`、*、*和`db`。由于我们可以在一个 Kubernetes 容器中运行多个容器，我们将在一个容器*中部署我们应用的所有服务。列举三到四个为什么这是个坏主意的原因。
7.  用你自己的话解释为什么我们需要 Kubernetes 复制集。
8.  在什么情况下我们需要 Kubernetes 部署？
9.  列出至少三种类型的 Kubernetes 服务，并解释它们的目的和区别。
# 进一步阅读
以下是一个文章列表，其中包含本章中讨论的各种主题的更详细信息:
*   *在[https://raft.github.io/](https://raft.github.io/)的筏共识算法*
*   *复合式和立方式 Docker 与台式 Docker*at[https://docker . ly/2g 8iqb9](https://dockr.ly/2G8Iqb9)