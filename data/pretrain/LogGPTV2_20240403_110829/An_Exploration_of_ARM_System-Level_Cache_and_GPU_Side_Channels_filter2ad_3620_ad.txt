on either core, depending on how the operating system interprets
its priority/whether it is a user-facing process.
6.3 Comparison to Prior Work
The cache occupancy channel has been studied from the perspective
of website fingerprinting attacks before, however, those attacks
utilize variable timing windows and gather data over the course
of 30 seconds [49, 50]. Instead, our work improves upon both the
amount of data and attack duration dramatically, utilizing 4ms
attack periods over the course of only 8 seconds. Reducing the total
attack time by 75% improves the practicality of the attack, as it is
unlikely that a user will navigate to a page and not interact with it
for 30 seconds. Furthermore, this work conducts the most extensive
5Both iOS and Android provide a mechanism called a webview to display web content
to users within an application. The webview functions as a web browser without the
navigation controls. Both iOS and Android webview components are nearly identical
to the system web browser.
791An Exploration of ARM System-Level Cache and GPU Side Channels
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 2: Accuracy for web-based cache occupancy website fingerprint on multiple ARM devices
Device
Macbook Air
Macbook Air
Macbook Air
iPhone SE 2
iPhone SE 2
Google Pixel 3
Browser
CPU
Chrome 89
Apple M1
Safari 14
Apple M1
Firefox 88
Apple M1
Safari 14
Apple A13
Chrome 87
Apple A13
Snapdragon 845 Chrome 90
Closed World
Open World
Ridge Regression CNN Ridge Regression CNN
89.8
85.1
77.8
72.7
73.3
75.9
95.6
94.3
88.1
80.2
80.2
88.0
92.2
89.4
83.9
75.3
75.9
81.8
88.1
78.4
68.2
65.8
65.0
66.0
Table 3: Accuracy for native application cache occupancy website fingerprint on multiple ARM devices
Device
Macbook Air
Macbook Air
Macbook Air
iPhone SE 2
Google Pixel 3
CPU
Apple M1
Apple M1
Apple M1
Apple A13
Snapdragon 845 WebView
Browser
Chrome 89
Safari 14
Firefox 88
WebKit View
Closed World
Open World
Ridge Regression CNN Ridge Regression CNN
84.3
81.7
81.3
69.1
74.1
92.5
91.1
90.3
71.5
81.9
85.7
87.0
87.1
68.7
76.3
84.1
72.4
70.5
64.0
67.7
Table 4: Accuracy for GPU based website fingerprinting on ARM devices
Device
Macbook Air
Google Pixel 3 Adreno 630
Browser
GPU
Apple 7 Core Chrome 89
Chrome 89
Closed World
Open World
Ridge Regression CNN Ridge Regression CNN
81.4
77.3
90.5
88.2
85.3
82.6
76.6
67.6
study of the cache occupancy channel on ARM to date, examining
both native and web based attacks, providing an in depth discussion
of cross-platform accuracy enhancements. We also study multiple
MacOS and iOS browsers and this is the first work to explore such
a cache cache occupancy channel on iOS.
The only direct comparison that can be made is the performance
of the closed world attack for the Chrome browser on the M1 chip,
wherein this work performs 6.5% better in Top-1 accuracy than the
work in [49]. Our Android performance is also 4.1% better (also
Top-1 accuracy) in the closed world setting, though the devices are
different.
We also compare to previous works done on homogeneous x86
systems like those in [50]. Our work, with the optimizations de-
veloped for the ARM architecture, achieves better results. The per-
formance of our open world attack on Safari is 5.7% better than
their best neural network configuration, and the closed world at-
tack is 29.9% better (Top-1 accuracy). One item that complicates
comparison to [50] is their open world data. Their work claims
99% accuracy in delineating between a sensitive and non-sensitive
website, which could indicate significant differences between the
open and closed world datasets. By contrast, our work combines
and randomizes the order of the collection of the open and closed
world datasets to ensure that there are no cross-sample ordering
artifacts that might artificially increase accuracy.
6.4 GPU Channel Results
We utilize the same testing setup as the cache occupancy channel
to evaluate the GPU contention channel. We only modify the spy
process to utilize the GPU as opposed to the CPU. While all major
browsers support web workers, only Google Chrome on Android
and MacOS allowed for unrestricted access to the GPU in a back-
ground web worker via GPU.js, thus limiting our experiments to
these two platforms. The results are listed in Table 4. Overall, our
novel GPU channel can achieve similar results as the standard cache
occupancy channel. On MacOS, it can still achieve more than 90%
accuracy on the closed world case, and more than 81% accuracy
for the open world one. The accuracy on Android is even better: it
lightly improves the accuracy in both the open and closed world
scenarios compared with the standard cache occupancy channel.
This difference may be related to the different system architectures
that make up the Adreno GPU vs. the Apple designed GPU found
on the M1 chip.
These results strongly indicate that the GPU/cache contention
channel is capable of mounting website fingerprinting attacks and
should serve as a red flag to device manufacturers. As more ac-
celerators are tightly integrated into the standard ARM SoC and
web technologies rush to enable access (e.g., WebGPU [52]), special
attention should be taken to ensure that these additions do not
jeopardize user privacy.
792ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Patrick Cronin, Xing Gao, Haining Wang, and Chase Cotton
6.5 Countermeasures
There are several approaches to potentially protect an ARM system
from those contention based side channels. For example, the system
can introduce noise to the measurement channel via extra opera-
tions, or manipulate timers and array accesses via obfuscation such
as in Chrome Zero [45]. However, introducing extra noise has been
shown ineffective [50] and leads to increased energy usage, which
is unacceptable for mobile devices. Also, Shusterman et al. [49]
demonstrated that the protections of Chrome Zero is largely inef-
fective and impose significant performance penalties. Furthermore,
browser based defenses cannot thwart App-based attacks.
Another defensive approach for energy restricted devices is to
remove process contention via hardware segmentation. This can
guarantee that the processes are unable to interact with one another.
However, it requires complete redesigns of the operating system
scheduler and hardware. In our future work, we plan to develop
effective defensive solutions to detect significant contention and
large swings in cache occupancy (similar to [2]) for ARM devices.
7 RELATED WORK
In this section, we briefly survey the research efforts in related
areas. Specifically, we conduct a detailed comparison with previous
cache occupancy fingerprinting techniques.
Cache Occupancy. The most similar work is Shusterman’s cache
occupancy fingerprinting work [49, 50]. Their work is the first at-
tempt to exploit a cache occupancy channel for website fingerprint-
ing. While previous work [18] examined the individual eviction sets,
these fine-grained attacks can be mitigated by modern browsers by
limiting time resolution. Shusterman et al. [50] proposed that the
contention of the entire cache may provide enough information
to fingerprint websites within the x86 platform. In parallel to our
work, Shusterman et al. [49] performed a cursory investigation of
the cache occupancy channel on the Apple M1 and a Samsung S21
with the Chrome browser in a closed world scenario.
Our work provides a much deeper investigation of the cache
occupancy channel in ARM devices. In addition to Android and
MacOS, we also study the iOS platform. Furthermore, our approach
differs from Shusterman’s in that we develop a vastly different
method for cache accesses (Section 5.2), which increases accuracy
on budget devices with slower processors. We also study the effect
of different browsers and their memory management, demonstrat-
ing that simply sizing the eviction buffer based on the shared cache
provides suboptimal results in different browser engines on the
same hardware (Section 6.1). Besides, we increase the attack effec-
tiveness, utilizing only 8 seconds of observation time to identify a
website unlike the previously required 30 seconds in both [49, 50].
Even with nearly 75% less sampling time, our approach outper-
forms the Shusterman’s work by more than 6% in Top-1 accuracy
in testing on the M1 MacBook Air with Google Chrome. Finally, we
propose and evaluate the novel GPU based contention channel and
demonstrate that it is nearly as effective as the cache occupancy
channel in ARM SoC devices, raising the alarm on continued access
to SoC accelerator components from JavaScript.
Website Fingerprinting Website fingerprinting has long been
used to track user web surfing behaviors. As desktop browsers
are the original way to surf the web, many website fingerprinting
techniques focus on breaking privacy enhancing technologies like
HTTPS and ToR, which leverage features extracted from the packet
streams [4, 14, 20, 41, 43]. With the rise of mobile devices, more
efforts have been spent examining mobile web surfing. Magnetic-
Spy [36] examines both JavaScript and app based CPU activity chan-
nels by employing the magnetometer. They perform similar open
and closed world investigations (albeit with fewer websites), and
demonstrate high fingerprinting accuracy. However, the JavaScript
APIs that allow access to these sensors have since been removed
from support in Firefox and Safari [48]. Furthermore, iOS requires
that users explicitly grant permissions to a website before it is
allowed to access their accelerometer data [24]. Several previous
works [26, 53] explore power based website fingerprinting on smart-
phones, however they require much higher sampling frequencies
and cannot perform the fingerprinting from a JavaScript platform.
Jana et al. [21] studied the memory allocations of website traffic, but
required privileged access to process memory data (now removed
from standard user access). Spreitzer et al. [51] utilized the data
usage API within Android to fingerprint websites, but this must be
done from a native application.
ARM Attacks Gulmezoglu et al. [18] built a similar contention
based channel in ARM devices, but mainly focused on finding con-
tention among specific sets within the cache ways of the device.
Their attack is limited to the Google Pixel 5, and only utilizes native
APIs within the system. While the work presents impressive results,
their system relies upon identifying eviction sets within the cache.
With a high resolution timer, this can take a few seconds; however,
the low resolution timer available from JavaScript [42] would make
the time cost of the task prohibitively long. Lipp et al. [28] and
Gruss et al. [17] similarly constructed memory based JavaScript at-
tacks, but require either privileged system calls or higher resolution
timers than those currently available in modern browsers [42].
Timing Attacks from JavaScript Genkin et al. [13] executed en-
cryption side channel attacks from a browser but utilized web
assembly and shared array buffers to construct a high frequency
timer. Oren et al. [39] similarly demonstrated that eviction sets
could be created via JavaScript timers for website fingerprinting
(not on ARM). Bosman et al. [3] demonstrated page deduplication at-
tacks from JavaScript. Each of these attacks requires high resolution
timers that have since been removed from JavaScript [42]. Schwarz
et al. [46] demonstrated some interesting methods to achieve high