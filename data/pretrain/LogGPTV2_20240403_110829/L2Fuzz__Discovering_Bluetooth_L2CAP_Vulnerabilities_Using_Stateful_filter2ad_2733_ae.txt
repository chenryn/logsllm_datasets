### L2CAP State Coverage by Different Fuzzers

**Figure 10: L2CAP State Coverage by Different Fuzzers.**

| Fuzzer   | States Covered |
|----------|----------------|
| Defensics | 7              |
| BFuzz    | 6              |
| BSS      | 3              |
| L2FUZZ   | 13             |

### Results

From our experiment, we confirmed that L2FUZZ can cover almost twice as many L2CAP states (13 states) compared to existing fuzzers, which at most covered seven states. L2FUZZ improved the accuracy of state transitions by mapping only valid commands to each state, enabling it to cover more L2CAP states (see Section III-C). L2FUZZ was able to cover up to 13 states, including L2CAP states classified as move and creation jobs, which were not covered by existing fuzzers. Conversely, the state coverage values for Defensics (seven states), BFuzz (six states), and BSS (three states) were lower because they did not leverage valid commands for each state and were less effective at checking the target's response. One reason is that the Bluetooth specification document they used was outdated (i.e., Bluetooth core 2.1, published in 2007 [30]). This is not a technical limitation but indicates that L2FUZZ is more efficient for checking Bluetooth devices that reflect the latest specifications.

In summary, L2FUZZ demonstrated far superior mutation efficiency and state coverage compared to existing fuzzers, indicating that it can detect L2CAP vulnerabilities in Bluetooth devices more effectively in practice.

### Case Study

We introduce a zero-day Denial of Service (DoS) vulnerability detected in Android Bluetooth devices (i.e., D2, see Table V).

L2FUZZ connected to the D2 device’s SDP port and performed state transitions to the configuration states (i.e., configuration job). When a malicious packet with a DCID value of 0x40 and additional garbage data was sent to the target device, we confirmed that a null pointer dereference occurred in the L2CAP layer. The device's display showed an error message about Bluetooth termination (see Figure 13). To use Bluetooth again, we had to reset the Bluetooth function. L2FUZZ, which generates valid malformed packets while covering enough L2CAP states without pairing, could detect this zero-day vulnerability. Additionally, the DoS vulnerability was also detected on older versions of Android devices (i.e., D1 and D3). Notably, in the case of D3 (Galaxy7), the DoS was triggered by a malformed Create-Channel-Request that only L2FUZZ supports, and it was detected in the Wait-Create state, which only L2FUZZ covers.

We responsibly reported this vulnerability to the Android security team. After discussing the cause and symptoms of the vulnerability, they became aware of it (Android ID 195112457). Additionally, we found a vulnerability that forced Apple’s wireless earphone device (i.e., D5, see Table V) to shut down. We reported this issue to the Apple security team, and they confirmed and fixed the vulnerability [31].

### Discussion

Here, we discuss several considerations related to L2FUZZ and countermeasures towards detected vulnerabilities.

#### Applicability to Other Protocols

The methodology of L2FUZZ can be applied to other Bluetooth core protocols such as RFCOMM, SDP, and OBEX. Since these protocols also use their own state machines, we expect that the state guiding of L2FUZZ can lead users to test more states. Additionally, the packet format of these protocols can be divided into core fields and other fields, allowing us to apply the core field mutating technique. Moreover, these protocols necessarily use L2CAP as they are on a higher layer than L2CAP (see Figure 1). This means that the generated L2FUZZ’s malformed packets (for testing L2CAP vulnerabilities) can also be used directly during fuzz testing for the protocols. For these reasons, we determine that L2FUZZ can be applied to other Bluetooth protocols beyond L2CAP; we leave this for future work.

#### Countermeasures

To counter detected Bluetooth vulnerabilities, vendors of Bluetooth devices are encouraged to patch any detected vulnerabilities by updating the functionality that leverages PSM and CIDP in the Bluetooth L2CAP layer. We also suggest encrypting each protocol as a fundamental solution. Existing Bluetooth security technology has heavily relied on pairing. However, this cannot address attacks that do not require pairing, such as Blueborne (see Section II-C). Therefore, we believe that developing encryption methods for each protocol can resolve exposure to more vulnerabilities.

#### Limitations and Future Work

First, although L2FUZZ effectively detected vulnerabilities in most cases, it was not capable of performing long-term fuzzing; when a fatal bug is triggered on the target device, it forcibly shuts down Bluetooth. Therefore, the tester must manually reset the device to perform another test. We will consider overcoming this issue by leveraging a virtual environment [32]. Second, L2FUZZ can detect vulnerabilities by analyzing the target’s response packets, but the root cause cannot be determined immediately. We intend to resolve this issue by considering internal log hooking that analyzes the crash root cause, similar to ToothPicker [33]. Third, L2FUZZ cannot evaluate code coverage. Since Bluetooth devices are black-boxes and closed source, it is difficult to measure code coverage. We noted that Frankenstein [32] succeeded in measuring code coverage in a limited way using binaries, even though it required complex tasks such as firmware emulation. We will try to apply Frankenstein’s method to L2FUZZ. Finally, while L2FUZZ covers a considerable number of L2CAP states, there are still cases where it does not, e.g., when L2FUZZ (as a master) connects with a target device that is a slave, there may be restrictions on the states the target device can enter. We are considering leveraging techniques such as injecting applications that control state transitions of the test target.

#### Responsible Vulnerability Disclosure

We reported all detected vulnerabilities in our experiments to the vendors: Android, Apple, Samsung, and the Ubuntu BlueZ team. Among them, a crash found in Apple devices was patched by the vendors. The remaining vulnerabilities are currently under discussion. In addition, we have found several vulnerabilities in devices that are not mentioned in this paper. However, the information cannot be disclosed due to the vendor’s rejection.

### Related Work

#### Bluetooth Fuzzing Techniques

Existing Bluetooth fuzzing techniques (1) are inefficient for testing various Bluetooth devices, (2) do not generate valid malformed packets, and (3) do not cover enough L2CAP states. Sweyntooth [13], Frankenstein [32], and ToothPicker [33] attempted to detect Bluetooth vulnerabilities through fuzz testing. However, they did not focus on the Bluetooth BR/EDR host stack, which is a software commonly used in devices that provide Bluetooth services. Specifically, Sweyntooth focused on the Bluetooth Low Energy (BLE) protocol stack, which is different from Bluetooth BR/EDR. Frankenstein focused on Bluetooth BR/EDR but concentrated on the controller stack (firmware), which is different from the host stack (software). ToothPicker only focused on Apple’s customized Bluetooth protocol stack, which is different from the common Bluetooth BR/EDR. Therefore, they are not suitable for detecting vulnerabilities in the commonly used BR/EDR host stack, which is the target of this paper.

There are several commercial Bluetooth fuzzers targeting BR/EDR host protocol stacks, such as Bluetooth Stack Smasher (BSS) [4], BFuzz [3], and Defensics [2]. However, their test packets are not efficient in detecting vulnerabilities in Bluetooth devices (see Section IV). BSS simply mutates only one field of a packet, which is insufficient to trigger vulnerabilities in the latest Bluetooth devices. BFuzz mutates packets that have previously been determined to be vulnerable, but because it mutates almost every field, it is easily rejected by the target device. In the case of Defensics, most of the test packets are normal packets (i.e., not malformed packets), thus, instead of yielding unexpected behaviors, it often results in normal communication.

#### Other Bluetooth Vulnerability Detection Techniques

Several approaches have attempted to detect Bluetooth vulnerabilities without using fuzz testing (e.g., KNOB [5], BIAS [6], BlueMirror [7], and BrakTooth [8]). However, they are inefficient for testing various devices because the scope of the target is limited and complicated implementations are required (e.g., link key sniffing, reverse engineering, and firmware patching). These tasks are difficult for the user to follow and implement and are unsuitable for testing various Bluetooth devices.

#### General Vulnerability Detection Techniques

Additionally, various approaches have attempted to detect general vulnerabilities in a given codebase (e.g., [34]–[36]). Although these techniques can detect Bluetooth vulnerabilities, they can only be applied in an environment where the source codes of Bluetooth devices are available.

### Conclusion

Security vulnerabilities in Bluetooth can pose a serious threat in daily life. In response, we present L2FUZZ, a stateful fuzzer for detecting Bluetooth L2CAP vulnerabilities. By generating malformed packets (for testing purposes) that are less likely to be rejected by the target devices, L2FUZZ can detect potential vulnerabilities in Bluetooth devices more effectively than existing Bluetooth fuzzers. With L2FUZZ, developers can prevent risks in the Bluetooth host stack, increasing the reliability of Bluetooth devices. The source code of L2FUZZ is available at https://github.com/haramel/L2Fuzz and will be publicly serviced at https://iotcube.net as part of BFuzz.

### Acknowledgment

We appreciate the anonymous reviewers and our shepherd for their helpful comments. This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2019-0-01697 Development of Automated Vulnerability Discovery Technologies for Blockchain Platform Security, No.2019-0-01343 Regional Strategic Industry Convergence Security Core Talent Training Business, and No.IITP-2022-2020-0-01819 ICT Creative Consilience program).

### References

[References listed here as per the original document.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.