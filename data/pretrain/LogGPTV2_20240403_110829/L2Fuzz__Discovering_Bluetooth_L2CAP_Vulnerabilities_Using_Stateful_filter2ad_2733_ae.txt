Defensics
BFuzz
BSS
7
6
3
13
2
0
16
Fig. 10: L2CAP state coverage by different fuzzers.
12
10
14
4
6
8
18
Results. From our experiment, we conﬁrmed that L2FUZZ
can cover almost twice as many L2CAP states (13 states) than
existing fuzzers (at most seven states). L2FUZZ improved the
accuracy of state transition by mapping only valid commands
to each state, which rendered it possible to cover more L2CAP
states (see Section III-C). L2FUZZ could cover up to 13 states,
including L2CAP states classiﬁed as move and creation jobs
that were not covered by existing fuzzers. Conversely, the state
coverage values of Defensics (i.e., seven states), BFuzz (i.e.,
six states), and BSS (i.e., three states) were less than that
of L2FUZZ because they did not leverage valid commands
for each state and were less effective at checking the tar-
get’s response. One reason is that the Bluetooth speciﬁcation
document they used was outdated (i.e., Bluetooth core 2.1,
published in 2007 [30]). This is not at technical limitation,
but it indicates that L2FUZZ is more efﬁcient for checking
Bluetooth devices that reﬂect the latest speciﬁcations.
In summary, L2FUZZ showed far superior mutation efﬁ-
ciency and state coverage compared to existing fuzzers. This
indicates that L2FUZZ can detect L2CAP vulnerabilities of
Bluetooth devices more effectively in practice.
E. Case study
We introduce a zero-day DoS vulnerability detected in
Android Bluetooth devices (i.e., D2, see Table V).
L2FUZZ connected to the D2 device’s SDP port, and then
performed state transition to the conﬁguration states (i.e.,
conﬁguration job). Afterwards, when a malicious packet with
a DCID value of 0x40 and garbage added was sent to the
target device, we conﬁrmed that a null pointer deference
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
351
(a) L2Fuzz
(b) Defensics
(c) BFuzz
(d) BSS
Fig. 11: Illustration of the state coverage for each fuzzer based on the L2CAP state machine (see Figure 2). Highlighted states represent
testable L2CAP states in each fuzzer.
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Build fingerprint: 
'google/blueline/blueline:11/RQ1D.210105.003/7005430:user/release-keys'
Revision: 'MP1.0'
ABI: 'arm64'
Timestamp: 2021-07-07 15:16:25+0900
pid: 1948, tid: 2946, name: bt_main_thread >>> com.android.bluetooth <<<
uid: 1002
signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x20
Cause: null pointer dereference
…
backtrace:
#00 pc 0000000000378da0  /system/lib64/libbluetooth.so 
(l2c_csm_execute(t_l2c_ccb*, unsigned short, void*)+3748) (BuildId: 
3178e5a1f58c0a343c0d83be72d223da)
…
Fig. 12: Tombstone of Google Pixel 3 with BlueDroid. Vulnerability
occurs at t_l2c_ccb∗ (L2CAP channel control block) that uses CIDP.
device’s display shows an error message about Bluetooth
termination (see Figure 13). To use Bluetooth again, we had
to reset the Bluetooth function. The L2FUZZ approach, which
generates valid malformed packets while covering enough
L2CAP states without pairing, could detect
this zero-day
vulnerability. Furthermore, DoS vulnerability was also de-
tected on older versions of Android devices (i.e., D1 and
D3). It is noteworthy that in the case of D3 (Galaxy7), DoS
was triggered by malformed Create-Channel-Request that only
L2FUZZ supports, and was detected in the Wait-Create state,
which only L2FUZZ covers.
We responsibly reported this vulnerability to the Android
security team. After discussing the cause and symptoms of the
vulnerability, they became aware of the vulnerability (Android
ID 195112457). Additionally, we found a vulnerability that
forced Apple’s wireless earphone device (i.e., D5, see Table V)
to shut down. We reported this issue to the Apple security
team, and they conﬁrmed it and ﬁxed the vulnerability [31].
V. DISCUSSION
Here we discuss several considerations related to L2FUZZ
and countermeasures towards detected vulnerabilities.
Applicability to other protocols. The methodology of
L2FUZZ can be applied to other Bluetooth core protocols
such as RFCOMM, SDP, and OBEX. Since these protocols
also use their own state machines, we expect that the state
guiding of L2FUZZ can lead users to test more states. Also, the
packet format of these protocols can be divided into core ﬁelds
and other ﬁelds, thus we can apply the core ﬁeld mutating
technique. Moreover, these protocols necessarily use L2CAP
as they are on a higher layer than L2CAP (see Figure 1). This
means that the generated L2FUZZ’s malformed packets (for
testing L2CAP vulnerabilities) can also be used directly during
fuzz testing for the protocols. For these reasons, we determine
that L2FUZZ can be applied to other Bluetooth protocols other
than L2CAP; we leave this for future work.
Countermeasures. To counter detected Bluetooth vulnera-
bilities, vendors of Bluetooth devices are encouraged to patch
any detected vulnerabilities by updating the functionality that
leverages PSM and CIDP in the Bluetooth L2CAP layer.
We also suggest encrypting each protocol as a fundamental
Fig. 13: Screenshot of crash message on Google Pixel 3. The device
shows an error message and the Bluetooth is paralyzed.
was triggered in L2CAP layer of the target device. When a
vulnerability occurs, the contents recorded in Tombstone [29],
an Android crash dump ﬁle, are shown in Figure 12.
As a result of analyzing the root cause, the DCID and
garbage values of the malformed packet inﬂuenced the channel
control block of the L2CAP layer. In addition,
the target
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
352
solution. Existing Bluetooth security technology has relied
heavily on pairing. However, this cannot address attacks that
do not require pairing, such as Blueborne (see Section II-C).
Therefore, we believe that developing encryption methods for
each protocol can resolve exposure to more vulnerabilities.
Limitations and future work. First, although L2FUZZ
effectively detected vulnerabilities in most cases, it was not
capable of performing long-term fuzzing; when a fatal bug
is triggered on the target device,
it forcibly shuts down
Bluetooth. Therefore, the tester must manually reset the device
to perform another test. We will consider overcoming this issue
by leveraging a virtual environment [32]. Second, L2FUZZ
can detect vulnerabilities by analyzing the target’s response
packets; however, the root cause cannot be determined im-
mediately. We intend to resolve this issue by considering
the internal log hooking that analyzes the crash root cause,
similar to ToothPicker [33]. Third, L2FUZZ cannot evaluate
code coverage. Since Bluetooth devices are black-boxes and
closed source, it is difﬁcult to measure code coverage. We
noted that Frankenstein [32] succeeded in measuring code
coverage in a limited way using binaries even though it
required complex tasks such as ﬁrmware emulation. We will
try to apply Frankenstein’s method to L2FUZZ. Finally, while
L2FUZZ covers a considerable number of L2CAP states, there
are still cases where it does not, e.g., when L2FUZZ (as a
master) connects with a target device that is a slave, there may
be restrictions on the state that the target device can enter.
We are considering leveraging techniques such as injecting
applications that control state transitions of the test target.
Responsible vulnerability disclosure. We reported all de-
tected vulnerabilities in our experiments to the vendors: An-
droid, Apple, Samsung, and the Ubuntu BlueZ team. Among
them, a crash found in Apple devices was patched by the
vendors. The remaining vulnerabilities are currently under
discussion. In addition, we have found several vulnerabilities
in devices that are not mentioned in this paper. However, the
information cannot be disclosed due to the vendor’s rejection.
VI. RELATED WORK
Bluetooth fuzzing techniques. Existing Bluetooth fuzzing
techniques (1) are inefﬁcient for testing various Bluetooth
devices, (2) do not generate valid malformed packets, and (3)
do not cover enough L2CAP states.
Sweyntooth [13], Frankenstein [32] and ToothPicker [33]
attempted to detect Bluetooth vulnerabilities through fuzz
testing. However, they did not focus on the Bluetooth BR/EDR
host stack, which is a software commonly used in devices
that provide Bluetooth services. In particular, Sweyntooth
focused on Bluetooth Low Energy (BLE) protocol stack which
is different from Bluetooth BR/EDR. Frankenstein focused
on Bluetooth BR/EDR; however, it concentrates on the con-
troller stack (ﬁrmware) that is different from the host stack
(software). ToothPicker only focused on Apple’s customized
Bluetooth protocol stack, which is different from the common
Bluetooth BR/EDR. Therefore, they are not suitable for detect-
ing vulnerabilities in the commonly used BR/EDR host stack,
which is the target of this paper.
There are several commercial Bluetooth fuzzers target
BR/EDR host protocol stacks such as Bluetooth stack smasher
(BSS) [4], BFuzz [3] and Defensics [2]. However,
their
test packets are not efﬁcient in detecting vulnerabilities in
Bluetooth devices (see Section IV). Regarding BSS, it simply
mutates only one ﬁeld of a packet, which is insufﬁcient to
trigger vulnerabilities in the latest Bluetooth devices. BFuzz
mutates packets that have previously been determined to be
vulnerable; however, because it mutates almost every ﬁeld, it
is easily rejected by the target device. In the case of Defensics,
most of the test packets are normal packets (i.e., not malformed
packets); thus, instead of yielding unexpected behaviors, it
often results in normal communication.
Other Bluetooth vulnerability detection techniques.
There are several approaches
that attempted to detect
Bluetooth vulnerabilities without using fuzz testing (e.g.,
KNOB [5], BIAS [6], BlueMirror [7] and BrakTooth [8]).
However, they are inefﬁcient to test various devices because
the scope of the target is limited and complicated implementa-
tions are required (e.g., they require link key snifﬁng, reverse
engineering, and ﬁrmware patching). These tasks are difﬁcult
for the user to follow and implement; and also unsuitable for
testing various Bluetooth devices.
General vulnerability detection techniques. In addition,
various approaches attempted to detect general vulnerabilities
in a given codebase (e.g., [34]–[36]). Although these tech-
niques can detect Bluetooth vulnerabilities, however, they can
only be applied in an environment where the source codes of
Bluetooth devices are available.
VII. CONCLUSION
Security vulnerabilities in Bluetooth can pose a serious
threat in the daily lives of people. In response, we present
L2FUZZ, a stateful fuzzer for detecting Bluetooth L2CAP
vulnerabilities. By generating malformed packets (for testing
purposes) that are less likely to be rejected by the target
devices, L2FUZZ can detect potential vulnerabilities in Blue-
tooth devices more effectively than existing Bluetooth fuzzers.
With L2FUZZ, developers can prevent risks in the Bluetooth
host stack, which can increase the reliability of Bluetooth
devices. The source code of L2FUZZ is available at https:
//github.com/haramel/L2Fuzz and will be publicly serviced at
https://iotcube.net as a part of BFuzz.
ACKNOWLEDGMENT
We appreciate the anonymous reviewers and our shepherd
for their helpful comments. This work was supported by Insti-
tute of Information & Communications Technology Planning
& Evaluation (IITP) grant funded by the Korea government
(MSIT) (No.2019-0-01697 Development of Automated Vul-
nerability Discovery Technologies for Blockchain Platform Se-
curity, No.2019-0-01343 Regional Strategic Industry Conver-
gence Security Core Talent Training Business, and No.IITP-
2022-2020-0-01819 ICT Creative Consilience program).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
353
[24] Carlos Kayembe Nkuba, Seulbae Kim and Sven Dietrich and Heejo Lee,
“Riding the IoT Wave With VFuzz: Discovering Security Flaws in Smart
Homes,” IEEE Access, vol. 10, pp. 1775–1789, 2021.
[25] Wikipedia.
(2021) Bluetooth Stack.
[Online]. Available: https://en.
wikipedia.org/wiki/Bluetooth_stack
[26] Muench, Marius and Stijohann, Jan and Kargl, Frank and Francillon,
Aurélien and Balzarotti, Davide, “What You Corrupt Is Not What You
Crash: Challenges in Fuzzing Embedded Devices.” in NDSS, 2018.
[27] Lamping, Ulf and Warnicke, Ed, “Wireshark user’s guide,” Interface,
vol. 4, no. 6, p. 1, 2004.
[28] Lee, Choongin and Bae, Jeonghan and Lee, Heejo, “PRETT: Protocol
Reverse Engineering Using Binary Tokens and Network Traces,” in
IFIP International Conference on ICT Systems Security and Privacy
Protection. Springer, 2018, pp. 141–155.
[29] Google Android Security team. (2021, January) Debugging Native
[Online]. Available: https://source.android.
Android Platform Code.
com/devices/tech/debug
[30] Bluetooth SIG. (2007, July) Bluetooth Core Speciﬁcation 2.1 + EDR.
https://www.bluetooth.com/ko-kr/speciﬁcations/
[Online]. Available:
specs/cs-core-speciﬁcation-2-1edr/
[31] Apple. (2021, December) Apple Security Update. https://support.apple.
com/HT212975, https://support.apple.com/HT212976, https://support.
apple.com/HT212978, and https://support.apple.com/HT212980.
[32] Ruge, Jan and Classen, Jiska and Gringoli, Francesco and Hollick,
Matthias, “Frankenstein: Advanced wireless fuzzing to exploit new
bluetooth escalation targets,” in 29th USENIX Security Symposium
(USENIX Security 20), 2020, pp. 19–36.
[33] Heinze, Dennis and Classen, Jiska and Hollick, Matthias, “ToothPicker:
Apple Picking in the iOS Bluetooth Stack,” in 14th USENIX Workshop
on Offensive Technologies (WOOT 20), 2020.
[34] S. Kim, S. Woo, H. Lee, and H. Oh, “Vuddy: A scalable approach
for vulnerable code clone discovery,” in Proceedings of the 38th IEEE
Symposium on Security and Privacy (SP).
IEEE, 2017, pp. 595–614.
[35] Y. Xiao, B. Chen, C. Yu, Z. Xu, Z. Yuan, F. Li, B. Liu, Y. Liu, W. Huo,
W. Zou, and W. Shi, “Mvp: Detecting vulnerabilities using patch-
enhanced vulnerability signatures,” in 29th USENIX Security Symposium
(USENIX Security 20), 2020, pp. 1165–1182.
[36] S. Woo, S. Park, S. Kim, H. Lee, and H. Oh, “CENTRIS: A Precise
and Scalable Approach for Identifying Modiﬁed Open-Source Software
Reuse,” in 2021 IEEE/ACM 43rd International Conference on Software
Engineering (ICSE).
IEEE, 2021, pp. 860–872.
REFERENCES
[1] Bluetooth SIG. (2021) Bluetooth market update. [Online]. Available:
https://www.bluetooth.com/ko-kr/bluetooth-resources/2021-bmu/
[2] Synopsys. Defensics Fuzz Testing. [Online]. Available: https://www.
synopsys.com/software-integrity/security-testing/fuzz-testing.html
[3] Kim, Seulbae and Woo, Seunghoon and Lee, Heejo and Oh, Hakjoo,
“Poster: Iotcube: an automated analysis platform for ﬁnding security
vulnerabilities,” in Proceedings of the 38th IEEE Symposium on Poster
presented at Security and Privacy, 2017.
[4] Pierre Betouin.
release] version 0.6 de
Bluetooth Stack Smasher. [Online]. Available: http://www.secuobs.com/
news/05022006-bluetooth10.shtml
(2006, May)
[Infratech -
[5] Antonioli, Daniele and Tippenhauer, Nils Ole and Rasmussen, Kasper
B, “The KNOB is Broken: Exploiting Low Entropy in the Encryption
Key Negotiation Of Bluetooth BR/EDR,” in 28th USENIX Security
Symposium (USENIX Security 19), 2019, pp. 1047–1061.
[6] Antonioli, Daniele and Tippenhauer, Nils Ole and Rasmussen, Kasper,
“BIAS: bluetooth impersonation attacks,” in Proceedings of the 41st
IEEE Symposium on Security and Privacy (SP).
IEEE, 2020, pp. 549–
562.
[7] Claverie, Tristan and Esteves, José Lopes, “BlueMirror: Reﬂections on
Bluetooth Pairing and Provisioning Protocols,” 2021.
[8] Garbelini, Matheus E and Chattopadhyay, Sudipta and Bedi, Vaibhav and
Sun, Sumei and Kurniawan, Ernest, “BRAKTOOTH: Causing Havoc on
Bluetooth Link Manager,” 2021.
[9] Bluetooth SIG. (2019, December) Bluetooth Core Speciﬁcation 5.2.
https://www.bluetooth.com/ko-kr/speciﬁcations/
[Online]. Available:
bluetooth-core-speciﬁcation/
[10] Hua, Yang and Zou, Yuexian, “Analysis of the packet
transferring
in L2CAP layer of Bluetooth v2. x+ EDR,” in 2008 International
Conference on Information and Automation.
IEEE, 2008, pp. 753–
758.
[11] Sharan, Ketan and Sharma, Neel and Sharda, Vangmayee and Arora,
Neha, “Air Mouse Using Bluetooth Technolgy,” in 2018 Second In-
ternational Conference on Intelligent Computing and Control Systems
(ICICCS).
IEEE, 2018, pp. 499–503.
[12] Seri, Ben and Vishnepolsky, Gregory. (2017, November) BlueBorne:
The dangers of Bluetooth implementations: Unveiling zero day
vulnerabilities and security ﬂaws in modern Bluetooth stacks. [Online].
Available: https://www.armis.com/research/blueborne/
[13] Garbelini, Matheus E and Wang, Chundong and Chattopadhyay, Sudipta
and Sumei, Sun and Kurniawan, Ernest, “Sweyntooth: Unleashing
mayhem over bluetooth low energy,” in 2020 USENIX Annual Technical
Conference (USENIX ATC 20), 2020, pp. 911–925.
[14] Satam, Shalaka Chittaranjan, “Bluetooth Anomaly Based Intrusion De-
tection System,” Ph.D. dissertation, The University of Arizona, 2017.
[15] Prabadevi, B and Jeyanthi, N, “Distributed Denial of service Attacks and
its effects on Cloud Environment-a Survey,” in The 2014 International
Symposium on Networks, Computers and Communications. IEEE, 2014,
pp. 1–5.
[16] Dunning, John, “Taming the blue beast: A survey of bluetooth based
threats,” IEEE Security & Privacy, vol. 8, no. 2, pp. 20–27, 2010.
[17] Patel, Chandni M and Borisagar, APVH, “Survey on taxonomy of ddos
attacks with impact and mitigation techniques,” International Journal of
Engineering Research and Technology, vol. 1, no. 9, 2012.
[18] Yang, Yi and Jiang, HT and McLaughlin, Kieran and Gao, L and Yuan,
YB and Huang, W and Sezer, Sakir, “Cybersecurity test-bed for IEC
61850 based smart substations,” in 2015 IEEE Power & Energy Society
General Meeting.
IEEE, 2015, pp. 1–5.
[19] Torres, George and Pesavento, Davide and Shi, Junxiao and Benmo-
hamed, Lotﬁ, “NFDFuzz: A Stateful Structure-Aware Fuzzer for Named
Data Networking,” in Proceedings of
the 7th ACM Conference on
Information-Centric Networking, 2020, pp. 169–171.
[20] Michal Zalewski. (2017, April) American fuzzy lop. [Online]. Available:
https://github.com/google/AFL
[21] Bluetooth SIGBluetooth SIG". (2021) Bluez : Ofﬁcial Linux Bluetooth
protocol stack. [Online]. Available: http://www.bluez.org/
[22] Shafranovich, Yakov, “Bluetooth data exchange between android phones
without pairing,” arXiv preprint arXiv:1507.00650, 2015.
[23] Jung, Youngman and Shin, Junbum and Jang, Yeongjin, “BlueMaster:
Bypassing and Fixing Bluetooth-based Proximity Authentication.”
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
354