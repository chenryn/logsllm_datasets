needed to cover all the routers. If we conservatively as-
sume that the probability a packet arrives marked by a
router is equal to the probability that a packet arrives
unmarked, the same numbers bound the expected num-
ber of packets from the adversary. The upper bounds
are on the number of required packets, without regard
to the marking probability. To convert the presented
numbers to an expectation that factors in the mark-
ing probability, the above values should be divided by
pd(1 − p)d−1.
Frag.
scheme
2
3
2 + 2
3 + 1
2 + 3
3 + 2
3 + 3
1000
Number, n, of Routers in Attack Tree
50
2000
8
8
10
9
11
10
11
500
11
12
14
13
15
14
15
250
10
10
13
12
14
13
14
13
13
15
14
16
15
16
14
14
16
15
17
16
17
100
9
9
11
10
12
11
12
Table 4: The checksum sizes needed for the diﬀer-
ent randomize-and-link fragmentation schemes, assum-
ing various values of the number of routers, n, in the
attack tree. The checksum sizes given are the number
needed to force the expected collision size to be less than
2. For the two-phase schemes, the checksum size is given
for the ﬁrst round, since its checksum needs are higher.
is most eﬃcient when the expected collision size is less
than 2. Thus, we have worked out the needed packet
volume and checksum bit-length for various randomize-
and-link fragmentation schemes under various numbers
of routers in the attack tree. We provide this informa-
tion in Tables 3 and 4.
4. ROUTER AUTHENTICATION
In this section, we discuss several possible IP trace-
back schemes that are based on the randomize-and-link
approach. This discussion is not meant to be exhaus-
tive, however, as the randomize-and-link approach only
speciﬁes the length of the information that is sent from
routers in the attack tree to the victim. The main points
we want to make in the following discussion, then, is to
show how the randomize-and-link strategy can be used
to create traceback methods that scale to hundreds of
routers, that do not require the victim know the univer-
sal tree U , and that can authenticate routers without
requiring them individually to sign setup messages.
124All of our traceback mechanisms create the message
MX that a router X will transmit so that it includes
X’s identity. That is, MX includes X’s 32-bit IP ad-
dress. Additionally, if we want to learn the topology
of the attack tree T , as opposed to simply learning the
names of all the routers in T , we can optionally have
each router X also include in MX the name of its down-
stream router in T , which would add another 32 bits to
MX . This identity and optional topology information,
of course, does not provide any additional randomness or
authentication information to MX , as is needed by the
security needs of a good randomize-and-link traceback
scheme. Fortunately, there are several ways that we can
simultaneously add randomness and authentication to
MX . Before we describe some of these ways, however,
let us brieﬂy review the main cryptographic tool that
these methods are based on.
4.1 Authenticated Dictionaries
Our diﬀerent authentication schemes all utilize an au-
thenticated dictionary for some portions of the task of
authenticating routers. An authenticated dictionary [2,
6, 8, 9, 15] consists of a trusted source and many un-
trusted directories. The trusted source produces and
maintains a dictionary database, D, of objects, stored
as key-value pairs, (k, o), while the directories answer
key-value queries for D on behalf of client users. In re-
questing a key-value query, a client provides a key k and
asks the directory to return the object o in D that has
k as its key. If there is such an object, then the direc-
tory returns it. If, on the other hand, there is no object
with key k in D, then the directory returns a special
“no-such-object” value.
In either case, in addition to
the answer a directory gives, a directory also provides
a cryptographic proof of that answer, which validates
(subject to standard cryptographic assumptions) that
the answer is current and is as accurate as if it had come
directly from the source. There is a small (usually loga-
rithmic) overhead incurred for this cryptographic proof,
but it allows the source to be oﬄine during the request.
In addition, by deploying many directories widely dis-
persed in the network, using an authenticated dictionary
allows us to reduce response latency and the eﬀective-
ness of a denial-of-service attack on the authenticated
dictionary itself (for such an attack would have to tar-
get all of the directories simultaneously). We describe
below how authenticated dictionaries can be used in var-
ious traceback schemes to allow for strong authentica-
tion of routers without requiring them to sign any setup
messages individually.
4.2 Authentication Methods
In this subsection, we describe several methods for au-
thenticating routers in a randomize-and-link traceback
scheme.
HMAC with Individual Key Exposure. One way to do
router authentication is to determine, for each router X,
a sequence of secret keys KX,0, KX,1, .... Then, with a
message MX intended for a victim V , the router X in-
cludes a hashed message authentication code (HMAC)
of h(V ||KX,t), where h is a one-way cryptographic hash
function and t is a time-quantum counter that is of suf-
ﬁcient granularity that we can assume rough synchro-
nization between routers and the victim. We include
V in the HMAC so as to reduce the possibility of a re-
play attack. We reveal the key KX,t for each router X
in time quantum t + 2. The revelation is done using
an authenticated dictionary for each autonomous sys-
tem (AS), whose source is the administrator of the AS.
Indeed, we assume this administrator distributed the
secret keys to his or her routers in the ﬁrst place. To
determine the amount of extra space this scheme adds
to the message MX , note that we did not include the
packet’s source address in the HMAC, as is done, for
example, in a previous scheme [21], for this value is set
by the adversary. Thus, there is no risk of a birthday
attack for our hash function h, as its data is ﬁxed for V
and the current time quantum t. This scheme will there-
fore add 32, 48, or 64 bits to MX depending on whether
we want fair, moderate, or strong authentication of X.
HMAC with Messaged Key Exposure. An alternate
scheme to the previous authentication method is to uti-
lize a sequence of secret keys, KX,0, KX,1, ..., as be-
fore, but include KX,t−2 in MX during time quantum
t.
In this way, the router X itself reveals the secret
key used in the HMAC. In this case, we should create
the sequence of keys themselves as a hash chain [12]
using a one-way cryptographic hash function, g, so that
KX,i = g(KX,i+1). Then we need only store KX,0 in the
authenticated dictionary for X’s autonomous system.
For given any revealed KX,t, the victim can determine
the authenticity of this key by performing t applications
of the function g. Thus, this approach reduces the work
required of the AS administrator, so that rather than
revealing keys with each time quantum, the administra-
tor now just needs to reveal the base of each router’s
hash chain. The trade-oﬀ is that we now are including
more information in MX . Namely, we are adding 64, 96,
or 128 bits to MX , depending on whether we want fair,
moderate, or strong authentication of X. In addition,
since the keys are determined through a hash chain, we
now require the victim to perform t hash computations
for every router in the attack tree. This eﬀort can be
signiﬁcant if the number of routers in T is over 1000.
HMAC with Key Collection Exposure. There is an-
other alternative that we can make to router authen-
tication, which reduces the work needed for both the
victim and the AS administrators when the number of
routers is large. Rather than issue a diﬀerent sequence of
keys for every router in an AS, the administrator instead
issues just 64 key sequences, divided into two sets of 32
key sequences: κ0, κ1, . . . , κ31 and λ0, λ1, . . . , λ31. So
κi = (Ki,0, Ki,1, . . . ) and λi = (Li,0, Li,1, . . . ). These
key sequences (possibly as hash chains) are then dis-
tributed to routers according to their IP addresses—so
that if X = (x0, x1, . . . , x31) is the binary expansion
of X’s address, then X is assigned the key sequence
(ω0, ω1, . . . , ω31), where ωi = κi if xi = 0 and ωi = λi
otherwise. To determine the key KX,t to use in an
HMAC, the router X simply computes the XOR of all
the t-th keys in the sequences it was assigned. Thus,
after a delay of two time quantums, a victim need only
125retrieve from the authenticated dictionary the 64 t-th
keys in the sequences κ0, κ1, . . . , κ31 and λ0, λ1, . . . , λ31.
From these 64 keys it can compute any key KX,t, just by
knowing the value of X. Thus, this scheme has the ben-
eﬁts of keeping the amount of additional authentication
information in MX to 32, 48, or 64 bits, depending on
whether we desire fair, moderate, or strong authentica-
tion. Even so, it requires only a modest amount of work
on the part of the administrator for the AS: namely, the
revelation of 64 keys in each time quantum. Of course,
this revelation could be carried out by a trusted agent
for the administrator if we use hash chains to determine
the κi and λi sequences.
5. DISCUSSION AND CONCLUSION
We have presented a new approach to IP traceback
based on the probabilistic packet marking paradigm.
Our approach, which we call randomize-and-link, uses
large checksum cords to link message fragments in a way
that is highly scalable, for the cords serve both as as-
sociative addresses and data integrity veriﬁers. For ex-
ample, with a 12-bit checksum cord we can use a single-
phase randomize-and-link scheme to produce an 80-bit
message that contains a router’s 32-bit IP address and a
48-bit combination HMAC. Such a scheme would allow
for fast and eﬃcient message reconstruction for up to
500 routers in the attack tree T . If we wish to traceback
eﬃciently attacks that are targeting a victim through a
larger attack tree, we could use a 16-bit initial check-
sum cord in a two-phase randomize-and-link strategy
(using 8 subwords in phase one and 4 words in phase
two) that produces a 128-bit message. Such a message
could contain a router X’s IP address, the IP address
of the downstream neighbor of X, and a 64-bit HMAC
(collective or individual). Or such a message could con-
tain X’s IP address, a 48-bit HMAC, and a 48-bit key
revelation. In either case, using a 16-bit checksum cord
with a two-phase scheme producing a 128-bit message
would allow for fast and eﬃcient traceback for attack
trees of size up to 2000 routers. In general, our methods
do not require that a victim know the topology of the
universal tree U , we do not require that routers sign any
setup messages individually, and we allow for incremen-
tal adoption (for the default router action is to process
packets in the same way as a non-participating router).
Acknowledgments
We thank Maithili Narasimha, Dawn Song, and Gene
Tsudik for helpful discussions related to this paper.
6. REFERENCES
[1] M. Adler. Tradeoﬀs in probabilistic packet marking for
IP traceback. In 34th ACM Symposium Theory of
Computing (STOC), 2002.
[2] A. Anagnostopoulos, M. T. Goodrich, and R. Tamassia.
Persistent authenticated dictionaries and their
applications. In Information Security Conference (ISC
2001), LNCS 2200, 379–393, 2001.
[3] T. Baba and S. Matsuda. Tracing network attacks to
their sources. IEEE Internet Computing, 6(2):20–26,
2002.
[4] S. M. Bellovin. ICMP traceback messages. In Work in
Progress, Internet Draft draft-bellovin-itrace-00.txt,
March 2000.
[5] H. Burch and B. Cheswick. Tracing anonymous packets
to their approximate source. In Usenix LISA (New
Orleans) Conference, 313–322, 2000.
[6] R. Cohen, M. T. Goodrich, R. Tamassia, and
N. Triandopoulos. Authenticated data structures for
graph and geometric searching. Technical report, Brown
University, 2001.
[7] D. Dean, M. Franklin, and A. Stubbleﬁeld. An algebraic
approach to IP traceback. In Network and Distributed
System Security Symposium (NDSS), 3–12, 2001.
[8] P. Devanbu, M. Gertz, C. Martel, and S. Stubblebine.
Authentic third-party data publication. In Fourteenth
IFIP 11.3 Conference on Database Security, 2000.
[9] M. T. Goodrich, R. Tamassia, and A. Schwerin.
Implementation of an authenticated dictionary with skip
lists and commutative hashing. In 2001 DARPA
Information Survivability Conference and Exposition,
vol. 2, 68–82, 2001.
[10] J. Ioannidis and S. M. Bellovin. Implementing
pushback: Router-based defense against DDoS attacks.
In Network and Distributed System Security
Symposium. The Internet Society, 2002.
[11] D. E. Knuth. Fundamental Algorithms, vol. 1 of The
Art of Computer Programming. Addison-Wesley,
Reading, MA, 2nd edition, 1973.
[12] L. Lamport. Password authentication with insecure
communication. Communications of the ACM,
24(11):770–772, 1981.
[13] D. Moore, G. Voelker, and S. Savage. Inferring internet
denial-of-service activity. In Usenix Security
Symposium, 2001.
[14] R. Motwani and P. Raghavan. Randomized Algorithms.
Cambridge University Press, New York, NY, 1995.
[15] M. Naor and K. Nissim. Certiﬁcate revocation and
certiﬁcate update. In 7th USENIX Security Symposium
(SECURITY-98), 217–228, Berkeley, 1998.
[16] K. Park and H. Lee. The eﬀectiveness of probabilistic
packet marking for IP traceback under denial of service
attack, 2000.
[17] V. Paxson. An analysis of using reﬂectors for
distributed denial-of-service attacks. ACM Computer
Communications Review (CCR), 31(3), July 2001.
[18] J. Postel. Internet protocol, 1981.
[19] S. Savage, D. Wetherall, A. R. Karlin, and
T. Anderson. Practical network support for IP
traceback. In SIGCOMM, 295–306, 2000.
[20] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E.
Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer.
Hash-based IP traceback. In ACM SIGCOMM 2001
Conference on Applications, Technologies,
Architectures, and Protocols for Computer
Communication, 2001.
[21] D. Song and A. Perrig. Advanced and authenticated
marking schemes for IP traceback. In IEEE Infocomm,
2001.
[22] R. Stone. Centertrack: An IP overlay network for
tracking DoS ﬂoods. In 9th USENIX Security
Symposium, August 2000.
126