.text:000112B4                 MOVNE   R0, #0 
.text:000112B8                 ANDS    R3, R0, #0xFF 
.text:000112BC                LDRNE   R1, [SP,#8] 
.text:000112C0                 MOV     R0, R4 
.text:000112C4                 MOV     R3, #0 
.text:000112C8                 BNE     loc_112F4 
.text:000112CC                 LDR     R1, [SP,#4] 
.text:000112D0                 B       loc_112F4 
.text:000112E4  
.text:000112E4 loc_112E4                               ; CODE XREF: .text:00011298 
.text:000112E4                                         ; .text:0001129C 
.text:000112E4                 LDR     R1, [SP] 
.text:000112E8                 MOV     R3, #0 
.text:000112EC                 MOV     R2, #0 
.text:000112F0                  MOV     R0, R4 
.text:000112F4  
.text:000112F4 loc_112F4                               ; CODE XREF: .text:000112C8 
.text:000112F4                                         ; .text:000112D0 
.text:000112F4                  BL      CWnd__MessageBoxW 
If have not touched anything after IDA placed you at address 0x000112A4, then that line 
should be highlighted blue. If you want to go back to the last address, use the back arrow 
at the top of the window or hit the ESC key. 
Since we want to show you several tricks crackers will use when extracting or bypassing 
protection, lets start by considering what we are viewing. At first glance at the top of our 
code, you can see there is a pattern. A string value appears to be loaded in from program 
data, and then a function is called that does something with that value. If we double click 
Page 28 of 28                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
on unk_131A4, we can see what the first value is “12345678”, or our serial number. 
While our serial.exe example is simplified, the fact remains that any data used in a 
programs validation must be loaded in from the actual program data and stored in RAM. 
As our example illustrates, it doesn't take much to discover to discover a plain text serial 
number. In addition, it should be noted that any hex editor can also be used to find this 
value, though it may be difficult to parse out a serial number from the many other 
character strings that are revealed in a hex editor. 
As a result of this plain text problem, many programmers build an algorithm into the 
program that deciphers the serial number as it is read in from memory. This will typically 
be indicated by a BL to the memory address in the program that handles the 
encryption/algorithm. An example of another method of protection is to use the devices 
owners name or some other value to dynamically build a serial number. This completely 
avoids the problems surrounding storing it within the program file, and indirectly adds an 
extra layer of protection on to the program. Despite efforts to create complex and 
advanced serial number creation schemes, the simple switch of a 1 to a 0 can nullify 
many anti-piracy algorithms, as you will see.  
The remaining code from 0x00011250 to 0x0001127C is also used to load in values from 
program data to the devices RAM. If you check the values at the address references, you 
can quickly see that there are three messages that are loaded into memory as well. One is 
a 'Correct serial' message, and the other two are 'Incorrect serial' messages. Knowing that 
there are two different messages is a minor, but important tidbit of information because it 
tells us that failure occurs in stages or as a result of two different checks.  
Moving on through the code, we can see that R1 is loaded with some value out of 
memory, which is then used to load another value into R0. After this, in address 
0x00011294, we can see that R0 is compared to the number eight (CMP R0,8). The next 
two lines then check the results of the comparison, and if it is greater than or less than 
eight the program jumps to loc_112E4 and continues from there.  
If we follow loc_112E4 in IDA Pro, it starts to get a bit more difficult to determine what 
is happening. This brings us to the second phase of the reverse-engineering process; the 
live debugger.  
5.6 Practical Debugging 
Currently, the best debugger for the Pocket PC operating system is Microsoft's eMbedded 
Visual C++ program (MVC). This program is part of the Microsoft Visual Tools 
package, which is currently free of charge. Once you download it from Microsoft, or a 
mirror, install it and open eMbedded Visual C++ (MVC). For the rest of our example, we 
will be using the serial.exe program currently being dissected by IDA Pro. You will need 
to have your pocket PC device plugged in and connected to your PC to do live 
debugging. This can be accomplished using the traditional USB/serial connection, which 
is very slow, or using a network (wired or wireless) based sync connection that is 100x 
faster. Use the following instructions to get serial.exe loaded into MVC 
Page 29 of 29                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
1.Obtain a working connection between the PPC and the computer running MVC 
2.Start up the MVC 
3.Click the Open folder 
4.Switch Files of type: to Executable Files (.exe; .dll;.ocx) 
5.Locate serial.exe and click Open 
Note: Depending on the program you are loading, you may need to adjust the 
download directory under Project -> Settings -> Debug tab -> Download Directory. 
This tells the MVC to send a copy of the file to that directory on the Pocket PC, which 
may be necessary if the program has its own .dlls. Since serial.exe is a one file 
program, this setting doesn't matter.  
6.Hit the F11 key to execute serial.exe on the Pocket PC and load up the disassembly 
information.  
7.You will see a connecting dialog box, which should be followed by a CPU mismatch 
warning. Click Yes on this warning and the next one. This warning is due to the fact 
that you loaded MVC with a local copy of serial.exe, and the CPUfor your local 
system doesn't match the Pocket PC device. 
8.Click OK for the '...does not contain debugging information.' alert 
9.Click Cancel on the .dll requests. For serial.exe you will not need these two dll files. 
However, this is not always the case. 
You should now be staring at a screen that looks remarkable similar to IDA Pro. The first 
thing you will want to do is set a breakpoint at the address location in serial.exe that 
corresponds to the location of the previously discussed segment of code (e.g. 
0X00011280). However, you should take a moment and look at the address column in the 
MVC. As you will quickly see, IDA Pro's memory addresses and the MVC's do not 
exactly match. 
5.7 Setting Breakpoints 
This is because IDA provides a relative address, meaning it will always start at 0.  In the 
MVC, you will be working with an absolute address, which is based on actual memory 
location, not the allocated memory address as in IDA. However, with the exception of the 
first two numbers, the addresses will be same. Therefore, take note of the address block 
that serial.exe has loaded, and set the breakpoint with this value in mind. For example, if 
the first address in the MVC is 0x2601176C, and the address you found in IDA is 
0x00011280, the breakpoint should be set at 0x26011280, which exactly we need to do in 
our example.  
Setting a breakpoint is simple. Simply click Edit  Breakpoints or hit Alt-F9. In the 
breakpoint window set the breakpoint at '0x26011280', with any changes as defined by 
the absolute memory block. Once the breakpoint is entered, hit the F5 key to execute the 
program. You should now see a serial screen on your Pocket PC similar to figure 9. Enter 
any value in the pocket PC and hit the Submit button. 
Page 30 of 30                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 9: Serial.exe default screen 
Soon after you click the Submit button, your PC should shift and focus on the section of 
code that we looked at earlier in IDA. You should note a little yellow arrow on the left 
side of the window pointing to the address of the breakpoint. At this time, right click on 
the memory address column and note the menu that appears. You will learn to use this 
menu quite frequently when debugging a program.  
NOTE: The MVC is very slow when it is in execution mode if using a USB/serial 
connection. If you are in the habit of jumping between programs, you will quickly 
become frustrated at the time required for the MVC to redraw the screen. To avoid this, 
ensure the MVC is in break mode before changing window focus. 
Before continuing, you should familiarize yourself with the various tools provided by the 
MVC. In particular, there are several windows you will want open while debugging. 
These are accessed by right clicking on the tool bar area at the top of the MVC. The three 
of interest are as follows: 
Registers: This window lets you see the current values held by the registers. This is very 
useful because you can determine the registers update as the program executes.  
Memory: The memory window lets you look directly in the RAM being used by the 
program. This is useful because the registers will often point to a memory location at 
which a value is being held. 
Call Stack: This window lets you see the task list of the program and allows you to 
decipher some of the abstract commands and branches that occur in a program.  
5.8 Step-through Investigation 
Page 31 of 31                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
At this point, serial.exe is loaded on the pocket PC and the MVC is paused at a break 
point. The next command the processor is to execute is “MOV R1, #1”. From our 
previous discussion on the ARM opcodes, we know that this is a simple command to 
move the value 1 into register 1 (R1).  
Before executing this line, look at the register window and note the value of R1. You 
should also note that all the register values are red. This is because they have all changed 
from the last time the program was paused. Next hit the F11 key to execute the next line 
of code. After a short pause, the MVC will return to pause mode upon which time you 
should note several things. The first is that most of the register values turned to black, 
which means they did not change values. The second is that R1 now equals 1.  
The next line loads the R0 register with the value in R4. Once again, hit the F11 key to let 
the program execute this line of code. After the brief pause, you will see that R0 is equal 
to R4. Step through a few more lines of code until your yellow arrow is at address 
0x00011290. At this point lets take a look at the Register window.  
The last line of code executed was an LDR command that loaded a value (or address 
representing the value) from memory into a register. In this case, the value was loaded 
into R1, which should be equal to 0006501C. Locate the Memory window and enter the 
address stored by R1 into the Address: box. Once you hit enter, you should be staring at 
the serial number you entered.  
After executing the next line, we can see that R0 is given a small integer value. Take a 
second and see if you can determine its significance...OK, enough time. In R0, you 
should have a value equal to the number of character in the serial you entered. In other 
words, if you entered “777”, the value of R0 should be three, which represents the 
number of characters you entered.  
The next line, “CMP R0, 8”, is a simple comparison opcode. When this opcode is 
executed, it will compare the value in R0 with the integer 8. Depending on the results of 
the comparison, the status flags will be updated. These flags are conveniently located at 
the bottom of the Registers window. Note their values and hit the F11 key. If the values 
change to N1 Z0 C0 O0, your serial number is not eight characters long. 
At this point, serial.exe is headed for a failure message (unless you happened to enter 
eight characters). The next two lines of code use the results of the CMP check to 
determine if the value is greater than or equal to eight. If either is true, the program will 
jump to address 0x000112E4 where a message will be displayed on the screen. If you 
follow the code, you will see that address 0x000112E4 contains the opcode “LDR R1, 
[SP]”. If you follow this through and check the Memory address after this line executes, 
you will see that it points to the start of the following error message at address 
0x00065014, “Incorrect serial number. Please verify it was typed correctly.” 
5.9 Abusing the System 
Now that we know the details of the first check, we will want to break the execution and 
Page 32 of 32                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
restart the entire program. To do this, perform the same steps that you previously worked 
through, but set a breakpoint at address 0x00011294 (CMP R0, #8). Once the program is 
paused at the CMP opcode, locate the Register window and note the value of R0. Now, 
place your cursor on the value and overwrite it with '00000008'. This very handy function 
of the MVC will allow you to trick the program into thinking your serial is eight 
characters long, thus allowing you to bypass the check. While this works temporarily, we 
will need to make a permanent change to the program to ensure any value is acceptable at 
a later point.  
After the change is made, use the F11 key to watch serial.exe execute through the next 
couple lines of code. Continue until the pointer is at address 0x000112A4 (BL        
00011754). While this command may not mean much to you in the MVC, if we jump 
back over to IDA Pro we can see that this is a function call to wcscmp, which is where 
our serial is compared to the correct serial. Knowing this, we should be able to take a 
look at the Registers window and determine the correct serial.  
NOTE: Function calls that require data to perform their operation use the values held by 
the registers. In other words, wcscmp will compare the value R0 with the value of R1, 
which means we can easily determine what these values are. It will then return a true or 
false in R1. 
If we look at R0 and R1, we can see that they hold the values 00064E54 and 0006501C, 
respectively, as illustrated by figure 10 (these values may be different for your system). 
While these values are not the actual serial numbers, they do represent the location in 
memory where the two serials are located. To verify this, place R1’s value in the Memory 
windows address field and hit enter. After a short pause, the Memory window should 
change and you should see the serial number you entered. Next, do the same with the 
value held in R0. This will cause your Memory window to change to a screen similar to 
figure 11 where you should see the value '1.2.3.4.5.6.7.8', or in other words, the correct 
serial. 
Page 33 of 33                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 10: Registers window 
Figure 11: Using Memory window 
At this point a cracker could stop and simply enter the newfound value to gain full access 
to the target program, and then spread that serial number around. However, most serial 
validations include some form of dynamically generated serial number (based off of time, 
name, or matching registration key), which means any value determined by viewing it in 
memory will only work for that local machine. As a result, crackers will often note the 
serial number, and continue on to determine where the program can be 'patched' to bypass 
the protection regardless of any dynamic serial number.  
Moving on through the program, we know the wcscmp function will compare the values 
held in memory, which will result in an update to the condition flags and R0 – R4 as 
follows. 
R0: If serials are equal, R0 = 0, else R0 = 1. 
Page 34 of 34                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
R1:  If equal, address following entered serial number, if not equal, address of failed 
character. 
R2: If equal then R2=0, else hex value of failed character. 
R3: If equal then R3=0, else hex value of correct character. 
Therefore, we need to once again trick the program into believing it has the right serial 
number. This can be done one of two ways. The first method you can use is to actually 
update your serial number in memory. To do this, note the hex values of the correct serial 
(i.e. 31 00 32 00 33 00 34 00 35 00 36 00 37 00 38), and overwrite the entered serial 
number in the Memory windows. When you are done, your Memory window should look 
like figure 12. 
Figure 12: Using memory window to update values 
Note: Ensure you include the 00 spacers. They are necessary. 
The second method a cracker can use is to update the condition flags after the wcscmp 
function has updated the status flags. To do this, hit F11 until the pointer is at 
0x000112A8. You should note that the Z condition flags change from Z1 (equal) to Z0 
(not equal). However, if you don't like this condition, you can change the flags back to 
their original value by overwriting them. Once you do this, the program will once again 
think the correct serial number was entered. While this will temporarily fix the serial 
check, a lasting solution will require an update to the programs code. 
Fortunately, we do not have to look far to find a weak point. The following explains the 
rest of the code that is processed until a message is provide on the pocket pc alerting the 
user to a correct, or incorrect serial number.  
260112A8   mov 
r2, #0 
This opcode clears out the R2 register so there are no remaining values that could confuse 
future operations.  
260112AC   movs       
r3, r0 
Moves R3 into R0 and updates the status flags.