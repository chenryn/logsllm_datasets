x : f (y) (cid:6)= h(i)]) returns the smallest value of y s.t. ∀i ≤ x :
f (y) (cid:6)= h(i).
h(0) = f (0)
h(x + 1) = f (θy[∀i ≤ x : f (y) (cid:6)= h(i)])
From (3), A is inﬁnite. Therefore, the range of f is also
inﬁnite. Thus, h is total. Since f is total and recursive, and
the construction process is recursive, from Church’s Thesis, h
is also recursive.
We show now that range(h) = range(f ) = A. Indeed,
from the construction, we have that range(h) ⊆ range(f ).
We now need to prove that range(f ) ⊆ range(h), that is
∀x : ∃y : f (x) = h(y).
• x = 0: the proof is trivial (since f (0) = h(0)).
• Assume that the statement holds for all i ≤ x. That is
∀i ≤ x,∃y : h(y) = f (i). We consider x + 1.
– f (x+1) ∈ {f (0), . . . , f (x)}. From IH, the statement
holds.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
– f (x + 1) (cid:6)∈ {f (0), . . . , f (x)}. Suppose that h(y0) =
f (x). We consider h(y0 + 1). Since f (x + 1) (cid:6)∈
{f (0), . . . , f (x)}, from IH, it follows that f (x+1) (cid:6)=
h(i) for all i ≤ y0. From the deﬁnition of h,
h(y0 + 1) = f (x + 1). The statement holds for this
case.
Finally, we construct
establish a contradiction:
the function g that will help us
g = λx.ϕh(x)(x) + 1
As proven above, range(h) = A. From (1), it follows that
h(x) ∈ AConv and hence, ϕh(x) is total and recursive. Since
ϕh(x) is total and recursive, from Church’s Thesis, g is also
total and recursive.
Let z0 be the index of g. It follows that z0 ∈ AConv. From
(2), there exists z1 ∈ A s.t. ϕz0
= ϕz1. Since z1 ∈ A and h
−1(z1) is deﬁned. From the deﬁnition of g,
is one-one, y1 = h
we have that g(y1) = ϕh(y1)(y1) + 1. From the deﬁnition
of y1, we also have that g(y1) = ϕz0 (y1) = ϕz1 (y1) =
ϕh(h−1(z1))(y1) = ϕh(y1)(y1). Since g is total, we have a
contradiction.
III. LANGUAGE
The deﬁnition of program below is based on the description
of programs presented in [1], where a program can consume
input events from channels and send output events to channels.
Deﬁnition III.1 (Program). A program is a labeled transition
system
(cid:10)State, TerminatedState, InitialState,
InputEvent, OutputEvent, Channel, (cid:2)(cid:11),
where State is the set of states, InitialState ⊆ State is the set of
initial states, TerminatedState ⊆ State is the set of terminated
states, Channel is the set of channels, InputEvent is the set
of input events, OutputEvent is the set of output events, and
the set of events is Act = InputEvent ∪ OutputEvent, and (cid:2)⊆
State × Act × State is the transition relation.
For an input event i ∈ InputEvent, we write i ∈ InputEventch
when i is an input event from channel ch. For an output
event o ∈ OutputEvent, we write o ∈ OutputEventch when
o is an output event
from channel ch. The output event
(cid:3) ∈ OutputEvent is a special silent event and we assume it
does not occur on any channel. An input event must originate
from an input channel. An output event must either end
(cid:2) when
on an output channel or be (cid:3). We write Q
(cid:10)Q, a, Q
(cid:2)(cid:11) ∈(cid:2).
a
(cid:2) Q
tion:
(cid:2).
We assume the following constraints on the transition rela-
• for all Q ∈ TerminatedState, there is no a and Q
(cid:2) s.t.
a
Q
(cid:2) Q
• for all Q (cid:6)∈ TerminatedState,
– there exist a ∈ Act and Q
(cid:2),
– for all i ∈ InputEventch and a ∈ Act, if Q
(cid:2) s.t. Q
(cid:2)(cid:2) then a ∈ InputEventch,
(cid:2) and
i
(cid:2) Q
a
(cid:2) Q
a
(cid:2) Q
Q
then Q
– for all i ∈ InputEventch, if Q
(cid:2) and Q
– for all o ∈ OutputEventch and a ∈ Act, if Q
(cid:2)(cid:2),
(cid:2)(cid:2) then a = o and Q
(cid:2) = Q
(cid:2) = Q
i
(cid:2) Q
a
(cid:2) Q
and Q
(cid:2)(cid:2).
(cid:2)(cid:2)
i
(cid:2) Q
(cid:2)
o
(cid:2) Q
There are a few observations about programs. First, the
program can always make progress unless it is terminated.
Second, for each non-terminated state of a program, it can
only consume an input event or generate an output event.
We assume programs only have input-nondeterminism. In
(cid:2), then Q generates event
addition, we assume that if Q
a and transitions to Q
We deﬁne a stream as the coinductive interpretation of the
grammar S ::= [] | s : S, where [] is the empty stream, and s
ranges over stream elements. We write ﬁn(S) when S is a ﬁnite
stream, and inf(S) when S is an inﬁnite stream. Two streams
(cid:2)) if they are pair-
S and S
wise equal. The equality of streams is deﬁned coinductively
as below.
(cid:2) are equal (denoted by S = S
a
(cid:2) Q
(cid:2) in ﬁnite time.
[] = []
(cid:2)
s = s
s : S = s
(cid:2)
S = S
(cid:2)
(cid:2) : S
(cid:2)) and for all ch, I(ch) = I
We use I and O as meta-variables for inputs and outputs of
programs deﬁned as functions from channels to respectively
(cid:2)
input event streams and output event streams. We write I = I
(cid:2)(ch), where
when dom(I) = dom(I
(cid:2).
dom(I) returns the domain of I. Similarly, we have O = O
The behavior of a state of a program can be considered
transforms inputs to consumed inputs
, O(cid:11)
coinductively as below, where terminated(Q) means that Q is
a terminated state, and for any channel ch, I[](ch) = [] and
O[](ch) = [].
and generated outputs. Therefore, we deﬁne Q(I) (cid:2) (cid:10)I
as a function that
(cid:2)
terminated(Q)
Q(I)(cid:2) (cid:10)I[], O[](cid:11)
Q
(cid:2)
(cid:2) Q
(cid:2)
Q
Q(I)(cid:2) (cid:10)I
(cid:2)
(cid:2)
Q
Q
Q
i
(cid:2) Q
o
(cid:2) Q
(cid:2)[ch (cid:13)→ i : I
i ∈ InputEventch
Q(I[ch (cid:13)→ i : I(ch)])(cid:2) (cid:10)I
o ∈ OutputEventch
Q(I)(cid:2) (cid:10)I
(cid:2) = I
(cid:2)(cid:2) and O = O
, O[ch (cid:13)→ o : O(ch)](cid:11)
Lemma III.1. For any Q and I, if Q(I)(cid:2)(cid:10)I
(cid:2)
(cid:10)I
Proof. By coinduction on the deﬁnition of Q(I)(cid:2)(cid:10)I
(cid:2)(cid:11), then I
, O
(cid:2).
Q
(cid:2)(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
, O(cid:11)
(cid:2)(I)(cid:2) (cid:10)I
, O(cid:11)
(cid:2)(I)(cid:2) (cid:10)I
, O(cid:11)
(cid:2)(ch)], O(cid:11)
(cid:2)(I)(cid:2) (cid:10)I
(cid:2)
, O(cid:11) and Q(I)(cid:2)
, O(cid:11)
(cid:2)
, O(cid:11).
A language for writing programs: We consider a lan-
guage for writing programs with the syntax presented in
[1]. Programs written in the presented language are instances
of programs deﬁned in Deﬁnition III.1. Commands in the
language are those of the while language with the addition of
input and output commands: a command to ask for an input
event from a channel (i.e. input x from ch) and a command
to send an output event to a channel (i.e. output e to ch). An
499
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
ASSIGN
(cid:2)x := e, μ(cid:3) (cid:2)
v = μ(e)
(cid:2) (cid:2)skip, μ[x (cid:4)→ v](cid:3)
IF1
IF2
μ(e) = v
v = 1
(cid:2)if e then P1 else P2, μ(cid:3) (cid:2)
v (cid:6)= 1
(cid:2)if e then P1 else P2, μ(cid:3) (cid:2)
μ(e) = v
(cid:2) (cid:2)P1, μ(cid:3)
(cid:2) (cid:2)P2, μ(cid:3)
WHILE1
μ(e) = v
v = 1
(cid:2)while e do P, μ(cid:3) (cid:2)
(cid:2) (cid:2)P ; while e do P, μ(cid:3)
WHILE2
μ(e) = v
(cid:2)while e do P, μ(cid:3) (cid:2)
v (cid:6)= 1
(cid:2) (cid:2)skip, μ(cid:3)
SEQ1
(cid:2)P1, μ(cid:3) a
(cid:2)P1; P2, μ(cid:3) a
(cid:2) (cid:2)P (cid:2)
(cid:2) (cid:2)P (cid:2)
1, μ(cid:2)(cid:3)
1; P2, μ(cid:2)(cid:3) SEQ2 (cid:2)skip; P2, μ(cid:3) (cid:2)
(cid:2) (cid:2)P2, μ(cid:3)
IN (cid:2)input x from ch, μ(cid:3) ch(v)
(cid:2) (cid:2)skip, μ[x (cid:4)→ v](cid:3)
OUT
μ(e) = v
(cid:2)output e to ch, μ(cid:3) ch(v)
(cid:2) (cid:2)skip, μ(cid:3)
Fig. 1: Semantics of reactive programs
expression is a value v, a variable x, or of the form e ⊕ e,
where ⊕ is a binary operator. Values v are integer numbers.
An input event or an output event on channel ch is ch(v) for
some v.
(programs)
P ::= skip | x := e | if e then P1 else P2
| while e do P | c1; c2
| input x from ch | output e to ch
(expressions)
(input events)
(output events)
(channels)
e ::= v | x | e ⊕ e
i ::= ch(v)
o ::= ch(v) | (cid:3)
ch
A state of a program P is of the form (cid:10)P, μ(cid:11) where μ is
a memory, a mapping from variables in a set Var to values.
An initial state of a program P is (cid:10)P, μ0(cid:11), where μ0 is the
initial memory. A state of the form (cid:10)skip, μ(cid:11) is a terminated
state. The semantic rules of programs are presented in Fig. 1,
where μ(e) returns the result of the evaluation of e with μ.
We assume that for all μ and e, there exists a unique v s.t.
μ(e) = v.
IV. POLICIES
As in [10], a policy is deﬁned on a state, not on the whole
program. Notice that a program starts executing from some
initial state. Thus, a program satisﬁes a policy when all of
its initial states satisfy the policy, and this should be the
interpretation when we write a program satisﬁes a policy in
examples in this section.
500
(cid:2) or l = l
(cid:2) when l (cid:3) l
ﬁnite lattice (cid:10)L,(cid:3)(cid:11), where L is a ﬁnite set of levels and (cid:3)
Next we deﬁne different versions of noninterference on a
(cid:2), we write
is the order between levels. For two levels l and l
(cid:2). We write (cid:16) and (cid:17) for the
l (cid:15) l
least upper bound and greatest lower bound respectively. We
represent by (cid:18) the top level of the lattice.
Let Γ be a security environment, a total mapping from
channels to levels. Given an input I, I|l returns the input with
input event streams of channels at levels smaller than or equal
to l. That is dom(I|l) = {ch ∈ dom(I)|Γ(ch) (cid:15) l}, and for
any channel ch ∈ dom(I|l), I|l(ch) = I(ch). Similarly, we
have O|l.
A. Termination-Sensitive Noninterference
TSNI [1] assumes that only when executions terminate, an
observer at l can observe which input events on channels visi-
ble to him are consumed and which output events on channels
visible to him are generated. Furthermore, an observer at l can
observe the termination of executions. That is he can determine
whether an execution is still in progress or not (even though
Since Q(I) (cid:2) (cid:10)I
there are no non-silent outputs).
, O(cid:11) does not give us information about
(cid:2) and deﬁne Q(I) (cid:2) A which captures all consumed input
whether the execution of Q on I terminates or not, we overload
output events) by the execution of Q with I. Q(I) (cid:2) A is
events and all generated output events (not just non-silent
deﬁned coinductively as below, where A is a stream of input
events and output events.
(cid:2)
terminated(Q)
Q(I)(cid:2) []
Q
(cid:2)(I)(cid:2) A
(cid:2)
o
(cid:2) Q
Q
Q(I)(cid:2) o : A
(cid:2)
Q
Q
i
(cid:2) Q
i ∈ InputEventch
Q(I[ch (cid:13)→ i : I(ch)])(cid:2) i : A
(cid:2)(I)(cid:2) A
Lemma IV.1. For any Q, I, if Q(I)(cid:2) A and Q(I)(cid:2) A
Proof. By coinduction on the deﬁnition of Q(I)(cid:2) A.
From the deﬁnition of Q(I)(cid:2)A, it follows that Q terminates
(cid:2).
A = A
(cid:2) then
TSNI requires that