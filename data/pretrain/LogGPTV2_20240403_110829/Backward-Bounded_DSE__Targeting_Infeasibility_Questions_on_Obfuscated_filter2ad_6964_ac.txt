### Bound Values for Detecting Opaque Predicates

Bound values may be sufficient to detect opaque predicates, even those with long dependency chains (up to 230 in the study, including contextual opaque predicates). This is because it is not always necessary to recover all information to determine infeasibility.

### Call Stack Tampering

**Definition:**
Call stack tampering involves altering the standard compilation scheme by switching between functions. This is achieved by associating a `call` and a `ret`, and making the `ret` return to the next instruction after the `call` (the return site). A `ret` is considered tampered (or violated) if it does not return to the expected return site.

**New Taxonomy:**
In this work, we refine the definition of stack tampering to better characterize it:

- **Integrity:** Does `ret` return to the same address as pushed by the `call`? This characterizes whether tampering has occurred. A `ret` is either [genuine] (always returns to the caller) or [violated].
- **Alignment:** Is the stack pointer (ESP) identical at `call` and `ret`? If so, the stack pointer is [aligned]; otherwise, it is [disaligned].
- **Multiplicity:** In case of violation, is there only one possible `ret` target? This is noted as [single], otherwise [multiple].

**Approach with BB-DSE:**
The goal is to check several properties of the tampering using BB-DSE. We consider the following predicates on a `ret` instruction:

- **@[esp{call}] = @[esp{ret}]:** Compare the content of the value pushed at `call` (@[esp{call}]) with the one used to return (@[esp{ret}]). If it evaluates to VALID, the `ret` cannot be tampered [genuine]. If it evaluates to UNSAT, a violation necessarily occurs [violated]. Otherwise, integrity cannot be characterized.
- **esp{call} = esp{ret}:** Compare the logical ESP value at the `call` and at `ret`. If it evaluates to VALID, the `ret` necessarily returns at the same stack offset [aligned]. If it evaluates to UNSAT, the `ret` is [disaligned]. Otherwise, alignment cannot be characterized.
- **T ≠ @[esp{ret}]:** Check if the logical `ret` jump target (@[esp{ret}]) can be different from the concrete value from the trace (T). If it evaluates to UNSAT, the `ret` cannot jump elsewhere and is flagged [single]. Otherwise, multiplicity cannot be characterized.

These cases can be checked by BB-DSE (for checking VALID with some predicate ψ, we query BB-DSE with predicate ¬ψ). The detection algorithm works as follows, leveraging both BB-DSE and dynamic analysis:

- **Dynamic Analysis:** Can tag a `ret` as [violated], [disaligned], or [multiple].
- **BB-DSE:** Can tag a `ret` as [genuine], [aligned], or [single] ([violated] and [disaligned] are already handled by dynamic analysis).

Dynamic results can be trusted, while BB-DSE results may be incorrect. Table II summarizes all possible situations.

| RT Status | Integrity | Alignment | Multiplicity |
|-----------|-----------|-----------|--------------|
| RT Genuine | VALID: [genuine] | - | - |
| RT Tampered | [violated] | RT: KO[disaligned] | - |
| [aligned] | RT: KO[disaligned] | - | - |
| [multiple] | RT: (2+)[multiple] | - | UNSAT: [single] |

**Analysis Using BB-DSE:**
This call stack tampering analysis uses BB-DSE but with a slightly non-standard setting. For each `call/ret` pair, the bound k will be different. The trace is analyzed in a forward manner, maintaining a formal stack of `call` instructions. Each `call` encountered is pushed to the formal stack. Upon `ret`, the first `call` on the formal stack is popped, and BB-DSE is performed, where k is the distance between the `call` and the `ret`.

From an implementation perspective, we must handle possible corruptions of the formal stack, which can occur in the following situations:

- **Call to a Non-Traced Function:** Since the function is not traced, its `ret` is not visible. These calls are not pushed to the formal stack.
- **Tail Call to Non-Traced Function:** Tail calls involve calling functions through a jump instruction instead of a `call` to avoid stack tear-down. This is similar to the previous case, but care must be taken to detect the tail call.

### Other Deobfuscation-Related Infeasibility Issues

**Opaque Constants:**
Similar to opaque predicates, opaque constants are expressions that always evaluate to a single value. For an expression `e` and a value `v` observed at runtime for `e`, the opaqueness of `e` reduces to the infeasibility of `e ≠ v`.

**Dynamic Jump Closure:**
When dealing with dynamic jumps, such as `switch`, we may want to know if all targets have been found. For a dynamic jump `jump eax` with observed values `v1, v2, v3`, checking the jump closure can be done by checking the infeasibility of `eax ≠ v1 ∧ eax ≠ v2 ∧ eax ≠ v3`.

**Virtual Machine & CFG Flattening:**
Both VM obfuscation and CFG flattening use a custom instruction pointer to preserve the flow of the program after obfuscation. In the case of CFG flattening, after executing a basic block, the virtual instruction pointer is updated so the dispatcher knows where to jump next. We can check that all observed values for the virtual instruction pointer have been found for each flattened basic block. If we know the possible values for the virtual instruction pointer and prove it cannot take other values, we can eliminate the dispatcher.

**Conditional Self-Modification:**
Self-modification is a powerful technique for blurring static analysis, as the real code is only revealed at execution time. This method is common in malware and packers, either in simple forms (unpack the whole payload at once) or more advanced ones (on-demand unpacking, shifting-decode schemes). The example in Figure 8 (page 10) from ASPack combines an opaque predicate with a self-modification trick to turn the predicate to true, fooling the reverser. Dynamic analysis can overcome self-modification as the new modified code will be executed. BB-DSE can also be used to prove interesting facts about self-modification schemes. For example, given an instruction known to perform self-modification, we can use BB-DSE to determine if another kind of modification by the same instruction is possible (conditional self-modification). For an instruction `mov [addr], eax` identified by dynamic analysis to generate new code with `eax = v`, checking if the self-modification is conditional reduces to the infeasibility of `eax ≠ v`.

### Evaluation: Controlled Experiments

We present a set of controlled experiments with ground truth values to evaluate the precision of BB-DSE, provide insights into its efficiency, and compare it with DSE.

**Preliminary: Comparison with Standard DSE**
Forward DSE is not suitable for infeasibility detection due to scalability and error rate (false positives, FP), as DSE primarily proves the infeasibility of paths, not reachability conditions. This experiment illustrates this fact. We consider a trace of 115,000 instructions without any opaque predicates and check at each conditional jump if the branch not taken is proved infeasible (a false positive). We use the BB-DSE algorithm for opaque predicates with a bound k = 20, a reasonable value, and the forward DSE of BINSEC/SE. Results are presented in Table III. As expected, BB-DSE is much more efficient than DSE and yields far fewer FPs and timeouts (TO).

| **Bound k** | **Cond. Branch** | **#TO** | **#FP** | **Total Time** |
|-------------|------------------|---------|---------|----------------|
| -           | 7749             | 2460    | 17h43m  | Forward DSE    |
| 20          | 54               | 0       | 4m14s   | BB-DSE         |

**Opaque Predicates Evaluation**
We evaluate the BB-DSE-based algorithm for opaque predicate detection, focusing on its precision and the choice of the bound k.

**Protocol and Benchmark:**
We consider two sets of programs:
1. All 100 coreutils without obfuscation as a reference dataset.
2. Five simple programs from the State-of-the-Art in DSE deobfuscation, obfuscated 20 times each with O-LLVM. New opaque predicates were added to O-LLVM to maximize diversity.

| **Formulas** | **Comment** |
|--------------|-------------|
| ∀x, y ∈ Z, y < 10 || 2 | (x × (x − 1)) (initially present in O-LLVM) |
| ∀x, y ∈ Z, 7y² − 1 ≠ x² | (2nd bit of square always 0) |
| ∀x ∈ Z, 2 | (x + x²) |
| ∀x ∈ Z, 2 | ⌊ x² / 2 ⌋ |
| ∀x ∈ Z, 4 | (x² + (x + 1)²) |
| ∀x ∈ Z, 2 | (x × (x + 1)) |

In total, 200 binary programs were used. For each, a dynamic execution trace was generated with a maximum length of 20,000 instructions. By tracking where opaque predicates were added, we could a priori know if a given predicate is opaque, ensuring a ground truth evaluation. We consider all predicates in coreutils to be genuine. The 200 samples sum up to 1,091,986 instructions and 11,725 conditional jumps, with 6,170 genuine and 5,556 opaque predicates. Experiments were carried out with different values for the bound k and a 5-second timeout per query.

**Results:**
Among the 11,725 predicates, 987 were fully covered by the trace and excluded, leaving 10,739 predicates (and 5,183 genuine predicates). Table V shows the relation between the number of predicates detected as opaque (OP) or genuine, false positives (FP), and false negatives (FN) depending on the bound value k. The experiment shows a peak of opaque detection with k = 12. The number of false negatives decreases, and the number of false positives grows. An optimum is reached for k = 16, with no false negatives, no timeouts, and a small number of false positives (372), representing an error rate of 3.46%. The smallest error rate (2.83%) is achieved with k = 12. Results are very precise up to k = 30 and very acceptable for k = 50.

| **k** | **OP (5556)** | **Genuine (5183)** | **TO** | **Error Rate (FP+FN)/Tot (%)** | **Time (s)** | **avg/query (s)** |
|-------|---------------|--------------------|--------|--------------------------------|--------------|-------------------|
| 2     | 5556 (miss)   | 5182 (miss)        | 0      | 51.75                          | 89           | 0.008             |
| 4     | 4653 (ok)     | 5153 (ok)          | 0      | 43.61                          | 96           | 0.009             |
| 8     | 995 (ok)      | 4987 (ok)          | 0      | 11.09                          | 120          | 0.011             |
| 12    | 11 (ok)       | 4890 (ok)          | 0      | 2.83                           | 152          | 0.014             |
| 16    | 0 (ok)        | 4811 (ok)          | 2      | 3.46                           | 197          | 0.018             |
| 20    | 4 (ok)        | 4715 (ok)          | 7      | 4.36                           | 272          | 0.025             |
| 24    | 8 (ok)        | 4658 (ok)          | 25     | 4.89                           | 384          | 0.036             |
| 32    | 12 (ok)       | 4579 (ok)          | 39     | 5.66                           | 699          | 0.065             |
| 40    | 0 (ok)        | 4523 (ok)          | 79     | 6.22                           | 1145         | 0.107             |
| 50    | 0 (ok)        | 4458 (ok)          | 189    | 6.86                           | 2025         | 0.189             |

**Conclusion:**
BB-DSE is very precise at detecting opaque predicates. While the choice of bound is important, the technique still performs well if the bound is not too far from the optimal one (k between 10 and 30). Query solving time is also very low.

### Call Stack Tampering Evaluation

We assess the precision of BB-DSE for stack tampering detection. Specifically, we aim to identify `ret` instructions as either [genuine] or [single-target tampered].