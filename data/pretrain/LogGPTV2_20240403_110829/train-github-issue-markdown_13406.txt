% RUST_BACKTRACE=1 rustc z.rs  
z.rs:32:23: 32:27 error: internal compiler error: this path should not cause
illegal move  
z.rs:32 let xs = unsafe { *x.s };  
^~~~  
note: the compiler unexpectedly panicked. this is a bug.  
note: we would appreciate a bug report: http://doc.rust-lang.org/complement-
bugreport.html  
note: run with `RUST_BACKTRACE=1` for a backtrace  
thread 'rustc' panicked at 'Box',
/Users/swizard/distr/rust/src/libsyntax/diagnostic.rs:129
stack backtrace:  
1: 0x109ab2287 - sys::backtrace::write::h2b97e0c0d0aa5194lOu  
2: 0x109ad85f2 - failure::on_fail::h32ddd7e1e3390facx5B  
3: 0x109a33b88 - rt::unwind::begin_unwind_inner::hb37dbcf6d204588dZMB  
4: 0x1091a094f - rt::unwind::begin_unwind::h8510903163256875893  
5: 0x1091a08fc - diagnostic::SpanHandler::span_bug::hfcb4ef83c0f1c5bdUNE  
6: 0x10691b76d - session::Session::span_bug::hb8a1a20581917af1F2p  
7: 0x106895a2d - borrowck::build_borrowck_dataflow_data::h06a69dcffbac8f96gVe  
8: 0x106890f48 - borrowck::borrowck_fn::h7e0284b073f72b9eDSe  
9: 0x106891ef5 - borrowck::borrowck_item::hdde643940f987691BRe  
10: 0x1068925df - borrowck::check_crate::hbd8fcf67d63856aetMe  
11: 0x105fe9718 - driver::phase_3_run_analysis_passes::h96113b6369fd2034pGa  
12: 0x105fcd5a7 - driver::compile_input::hd95a9a5f39416926Cba  
13: 0x1060a0e3e - run_compiler::hae062a80d6febfab2ac  
14: 0x10609de2f - thunk::F.Invoke::invoke::h7970639354112803481  
15: 0x10609cac0 - rt::unwind::try::try_fn::h3125464406127530110  
16: 0x109b51ce9 - rust_try_inner  
17: 0x109b51cd6 - rust_try  
18: 0x10609d180 - thunk::F.Invoke::invoke::h13905946553486041138  
19: 0x109ac2bf3 - sys:ðŸ§µ:thread_start::h8b9ffeb7ea0667f4xVx  
20: 0x7fff87bec268 - _pthread_body  
21: 0x7fff87bec1e5 - _pthread_body
% rustc --version --verbose  
rustc 1.0.0-dev (`7858cb4` 2015-02-03 03:44:05 +0000)  
binary: rustc  
commit-hash: `7858cb4`  
commit-date: 2015-02-03 03:44:05 +0000  
host: x86_64-apple-darwin  
release: 1.0.0-dev
% uname -a  
Darwin pair 14.1.0 Darwin Kernel Version 14.1.0: Mon Dec 22 23:10:38 PST 2014;
root:xnu-2782.10.72~2/RELEASE_X86_64 x86_64
% cat z.rs
    #![feature(libc,core,std_misc)]
    extern crate libc;
    use libc::{size_t, c_void};
    use std::{mem};
    extern {
        fn malloc(size: size_t) -> *mut c_void;
    }
    #[repr(C)]
    #[derive(Debug)]
    #[allow(raw_pointer_derive)]
    struct S_ {
        ext_value: *mut c_void,
    }
    #[derive(Debug)]
    #[allow(raw_pointer_derive)]
    pub struct S {
        s: *mut S_,
    }
    impl S {
        fn new() -> S {
            let obj = unsafe { malloc(mem::size_of::() as size_t) as *mut S_ };
            S { s: obj }
        }
    }
    fn main() {
        let x = S::new();
        let xs = unsafe { *x.s };
        println!("x = {:?}, x.s = {:?}", x, xs);
    }