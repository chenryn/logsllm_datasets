### 最高版本符号的记录与动态链接器

将最高版本的符号（如 `SUNW_1.3`）记录到 `app_foo` 的可执行文件中。在程序运行时，动态链接器会通过程序内记录的依赖共享库的符号集合版本信息，来判断当前系统中的共享库是否满足这些依赖的符号集合。这一机制确保了在高次版本共享库系统中编译的程序能够在低次版本共享库系统中运行。例如，如果 `app_foo` 依赖于 `libfoo.so.1` 版本号大于等于 3 的系统，则可以正常运行；若版本号小于 3，则动态链接器会阻止程序运行，以避免潜在的问题。

这种符号版本的方法是对 SO-NAME 机制的一种有效补充，它保证了共享库主版本号的一致性。

---

### Linux 中的符号版本机制

在 Linux 系统中，尽管符号版本机制并未被广泛使用，但 GNU C 库 (glibc) 提供的 20 多个共享库有效地利用了该机制来表示符号的版本演化，并屏蔽一些不希望暴露给用户的符号。例如，glibc-2.6.1.so 的符号版本演化如下：

```
GLIBC_2.0, GLIBC_2.1, GLIBC_2.1.1, GLIBC_2.1.2, GLIBC_2.1.3, GLIBC_2.2, 
GLIBC_2.2.1, GLIBC_2.2.2, GLIBC_2.2.3, GLIBC_2.2.4, GLIBC_2.2.6, GLIBC_2.3, 
GLIBC_2.3.2, GLIBC_2.3.3, GLIBC_2.3.4, GLIBC_2.4, GLIBC_2.5, GLIBC_2.6
```

对于像 glibc 中的加密解密库 `libcrypt`，其接口自 2.0 版本以来一直保持稳定，因此其内部符号版本仅为 `GLIBC_2.0`。这样的符号版本标记提醒用户不要使用未公开的符号，因为它们可能会随着版本演进而改变或删除。

#### GCC 对 Solaris 符号版本机制的扩展

GCC 在 Solaris 系统的符号版本机制基础上提供了两个扩展：
1. **汇编宏指令**：可以在 GAS 汇编或 GCC 的 C/C++ 源代码中使用嵌入汇编指令来指定符号的版本。
2. **符号多版本重载**：允许同一名称的符号存在多个版本，从而实现某种形式的符号重载机制。例如：
    ```c
    asm(".symver new_printf, printf@VERS_1.2");
    asm(".symver old_printf, printf@VERS_1.1");

    int old_printf() { /* ... */ }
    int new_printf() { /* ... */ }
    ```

这种机制允许共享库在升级时保留旧版本的符号，同时引入新版本，从而保持向后兼容性，而不必更改主版本号。

---

### Linux 系统中的符号版本实践

在 Linux 下，使用 `ld` 链接共享库时，可以通过 `--version-script` 参数指定符号版本脚本。例如：
```sh
gcc -shared -fPIC lib.c -Xlinker --version-script=lib.ver -o lib.so
```

假设 `lib.c` 定义了一个 `foo` 函数，而 `main.c` 调用了这个函数。使用以下符号版本脚本编译 `lib.so`：
```sh
VERS_1.2 {
  global:
    foo;
};
```

然后编译并链接 `main.c` 到 `lib.so`：
```sh
gcc main.c ./lib.so -o main
```

这样，`main` 程序引用的 `foo` 将是 VERS_1.2 版本。如果将 `main` 程序移到一个只包含低于 VERS_1.2 版本 `foo` 的 `lib.so` 系统中运行，动态链接器会报错并退出程序，防止因符号版本不符造成的损失。

---

### 共享库查找过程

在 Linux 系统中，动态链接器根据一定的规则查找共享库。首先，动态链接器会查找由环境变量 `LD_LIBRARY_PATH` 指定的目录。其次，它会查找路径缓存文件 `/etc/ld.so.cache` 中指定的路径。最后，它会查找默认的共享库目录 `/lib` 和 `/usr/lib`。

为了加速共享库查找，`ldconfig` 程序会为共享库创建、删除或更新相应的 SO-NAME 符号链接，并将这些信息存储在 `/etc/ld.so.cache` 文件中。当添加、删除或更新共享库时，应运行 `ldconfig` 以更新缓存。

---

### 环境变量

Linux 提供了多种环境变量来改变动态链接器装载共享库的路径，包括：
- **LD_LIBRARY_PATH**：临时改变某个应用程序的共享库查找路径。
- **LD_PRELOAD**：预先装载指定的共享库或目标文件，优先级高于 `LD_LIBRARY_PATH`。
- **LD_DEBUG**：打开动态链接器的调试功能，打印有用的信息，帮助开发和调试共享库。

这些环境变量在开发和测试阶段非常有用，但在发布版本中应尽量避免使用，以防止影响其他应用程序的正常运行。