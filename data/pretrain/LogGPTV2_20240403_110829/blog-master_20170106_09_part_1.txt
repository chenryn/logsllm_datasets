## PostgreSQL C tutorial    
### 作者                                                                                         
digoal                                                                                          
### 日期                                                                                         
2017-01-06                                                                                               
### 标签                                                                                        
PostgreSQL , Java , php , ruby , python , C                                                                                                                                                    
----                                                                                        
## 背景                    
转自 http://zetcode.com/db/postgresqlc/   
## 正文          
This is a C programming tutorial for the PostgreSQL database. It covers the basics of PostgreSQL programming with the C API.  
### About PostgreSQL database  
PostgreSQL is a powerful, open source, object-relational database system. It is a multi-user database management system. It runs on multiple platforms, including Linux, FreeBSD, Solaris, Microsoft Windows, and Mac OS X. PostgreSQL is developed by the PostgreSQL Global Development Group.  
PostgreSQL has sophisticated features such as Multi-Version Concurrency Control (MVCC), point in time recovery, tablespaces, asynchronous replication, nested transactions (savepoints), online/hot backups, a sophisticated query planner/optimizer, and write ahead logging for fault tolerance. It supports international character sets, multibyte character encodings, Unicode, and it is locale-aware for sorting, case-sensitivity, and formatting.  
### Installation  
We are going to install PostgreSQL database and the C development library.  
```  
$ sudo apt-get install postgresql  
```  
On a Debian-based system, we can install the PostgreSQL database from the packages using the above command.  
```  
$ sudo update-rc.d -f postgresql remove  
 Removing any system startup links for /etc/init.d/postgresql ...  
   /etc/rc0.d/K21postgresql  
   /etc/rc1.d/K21postgresql  
   /etc/rc2.d/S19postgresql  
   /etc/rc3.d/S19postgresql  
   /etc/rc4.d/S19postgresql  
   /etc/rc5.d/S19postgresql  
   /etc/rc6.d/K21postgresql  
```  
If we install the PostgreSQL database from packages, it is automatically added to the startup scripts of the operating system. If we are only learning to work with the database, it is unnecessary to start the database each time we boot the system. The above command removes any system startup links for the PostgreSQL database.  
```  
$ sudo apt-get install libpq-dev  
```  
To be able to compile C examples, we need to install the PostgreSQL C development libraries. The above line shows how we can do it on Debian-based Linux.  
```  
$ sudo -u postgres psql postgres  
psql (9.3.9)  
Type "help" for help.  
postgres=# \password postgres  
```  
We set a password for the postgres user.  
### Starting and stopping PostgreSQL  
In the next section, we are going to show how to start the PostgreSQL database, stop it, and query its status.  
```  
$ sudo service postgresql start  
 * Starting PostgreSQL 9.3 database server     [ OK ]  
```  
On Debian-based Linux, we can start the server with the service postgresql start command.  
```  
$ sudo service postgresql status  
9.3/main (port 5432): online  
```  
We use the service postgresql status command to check if PostgreSQL is running.  
```  
$ sudo service postgresql stop  
 * Stopping PostgreSQL 9.3 database server     [ OK ]  
```  
We use the service postgresql stop command to stop PostgreSQL.  
```  
$ service postgresql status  
9.3/main (port 5432): down  
```  
At this moment, the service postgresql status command reports that the PostgreSQL database is down.  
### Creating a user and a database  
In the following steps, we create a new database user and database.  
```  
$ sudo -u postgres createuser janbodnar  
```  
We create a new role in the PostgreSQL system. We allow it to have ability to create new databases. A role is a user in a database world. Roles are separate from operating system users.  
```  
$ sudo -u postgres psql postgres  
psql (9.3.9)  
Type "help" for help.  
postgres=# ALTER USER janbodnar WITH password 'pswd37';  
ALTER ROLE  
postgres=# \q  
```  
With the psql command, we add a password for the new user.  
PostgreSQL often uses trust or peer authentication policies on local connections. In case of the trust authentication policy, PostgreSQL assumes that anyone who can connect to the server is authorized to access the database with whatever database user name they specify (even superuser names). When making connections to the database, no password is required. (The restrictions made in the database and user columns still apply.) The trust authentication is appropriate and very convenient for local connections on a single-user workstation. It is usually not appropriate on a multiuser machine. In case of the peer authentication policy, the database username must match the operating system username.  
```  
$ sudo -u postgres createdb testdb --owner janbodnar  
```  
With the createdb command, we create a new database called testdb. Its owner is the new database user.  
### C99  
This tutorial uses C99. For GNU C compiler, we need to add the -std=c99 option. For Windows users, the Pelles C IDE is highly recommended. (MSVC does not support C99.)  
```  
PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
```  
In C99, we can mix declarations with code. In older C programs, we would need to separate this line into two lines.  
```  
for(int i=0; i  
#include   
int main() {  
    int lib_ver = PQlibVersion();  
    printf("Version of libpq: %d\n", lib_ver);  
    return 0;  
}  
```  
The program prints the version of the libpq library.  
```  
#include   
```  
The libpq-fe.h file contains definitions of enumerations, structures, constants, and functions of the C programming interface.  
```  
int lib_ver = PQlibVersion();  
```  
The PQlibVersion() function returns the version of the libpq being used.  
```  
$ pg_config --includedir  
/usr/include/postgresql  
$ pg_config --libdir  
/usr/lib  
```  
The pg_config tool is used to find out the location of the C header files and object code libraries.  
```  
$ gcc -o lib_version lib_version.c -I/usr/include/postgresql -lpq -std=c99  
```  
With the above command, we compile the program.  
```  
$ ./lib_version   
Version of libpq: 90309  
```  
The version of the library is 9.3.9.  
### Server version  
In the following example, we find out the version of the PostgreSQL database.  
server_version.c  
```  
#include   
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    int ver = PQserverVersion(conn);  
    printf("Server version: %d\n", ver);  
    PQfinish(conn);  
    return 0;  
}  
```  
The example connects to the PostgreSQL database, executes a PQserverVersion() function, prints the version, closes the connection, and cleans up.  
```  
...  
# TYPE  DATABASE        USER            ADDRESS                 METHOD  
# "local" is for Unix domain socket connections only  
local   all             all                                     peer  
...  
```  
In the pg_hba.conf, we have the peer default authentication method. In this method, the database user name must match the operating system user name. No password is required to make a connection.  
```  
PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
```  
With the PQconnectdb() function, we make a connection to the database. In the connection string, we provide the user name and the database name.  
```  
if (PQstatus(conn) == CONNECTION_BAD) {  
    fprintf(stderr, "Connection to database failed: %s",  
        PQerrorMessage(conn));  
    do_exit(conn);  
}  
```  
The PQstatus() function returns the status of the connection. In case of a successfull connection, CONNECTION_OK is returned; for unsuccessfull connection, CONNECTION_BAD is returned. The PQerrorMessage() returns the most recently generated error message.  
```  
int ver = PQserverVersion(conn);  
```  
The PQserverVersion() function returns an integer representing the PostgreSQL database version. It takes the connection object as a parameter.  
```  
PQfinish(conn);  
```  
The PQfinish() function closes the connection to the server and frees the memory used by the PGconn object.  
```  
$ ./server_version   
Server version: 90309  
```  
Running the program, we get the database server version.  
### Authentication with a password  
Next, we are going to authenticate to the database server with a password. In all other examples in this tutorial, we assume the peer or trust authentication mode. We change the authentication type for the local connection inside the pg_hba.conf file to md5.  
```  
$ sudo service postgresql restart  
```  
To apply the changes, the database server must be restarted.  
password_authentication.c  
```  
#include   
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar password=pswd37 dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    char *user = PQuser(conn);  
    char *db_name = PQdb(conn);  
    char *pswd = PQpass(conn);  
    printf("User: %s\n", user);  
    printf("Database name: %s\n", db_name);  
    printf("Password: %s\n", pswd);  
    PQfinish(conn);  
    return 0;  
}  
```  
In the example, we connect to the database with a password. We print the username, database name, and the password of the current database connection.  
```  
PGconn *conn = PQconnectdb("user=janbodnar password=pswd37 dbname=testdb");  
```  
In the connection string, we add the password option.  
```  
char *user = PQuser(conn);  
```  
The PQuser() function returns the user name of the connection.  
```  
char *db_name = PQdb(conn);  
```  
The PQdb() function returns the database name of the connection.  
```  
char *pswd = PQpass(conn);  
```  
The PQpass() function returns the password of the connection.  
```  
$ ./password_authentication   
User: janbodnar  
Database name: testdb  
Password: pswd37  
```  
The program prints the database user, the database name, and the password used.  
### Creating a database table  
In this section, we create a database table and fill it with data.  
create_table.c  
```  
#include   
#include   
#include   
void do_exit(PGconn *conn, PGresult *res) {  
    fprintf(stderr, "%s\n", PQerrorMessage(conn));      
    PQclear(res);  
    PQfinish(conn);      
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        PQfinish(conn);  
        exit(1);  
    }  
    PGresult *res = PQexec(conn, "DROP TABLE IF EXISTS Cars");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);  
    }  
    PQclear(res);  
    res = PQexec(conn, "CREATE TABLE Cars(Id INTEGER PRIMARY KEY," \  
        "Name VARCHAR(20), Price INT)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);   
    }  
    PQclear(res);  
    res = PQexec(conn, "INSERT INTO Cars VALUES(1,'Audi',52642)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK)   
        do_exit(conn, res);       
    PQclear(res);      
    res = PQexec(conn, "INSERT INTO Cars VALUES(2,'Mercedes',57127)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);      
    res = PQexec(conn, "INSERT INTO Cars VALUES(3,'Skoda',9000)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);    
    res = PQexec(conn, "INSERT INTO Cars VALUES(4,'Volvo',29000)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);        
    res = PQexec(conn, "INSERT INTO Cars VALUES(5,'Bentley',350000)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);    
    res = PQexec(conn, "INSERT INTO Cars VALUES(6,'Citroen',21000)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);    
    res = PQexec(conn, "INSERT INTO Cars VALUES(7,'Hummer',41400)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);    
    res = PQexec(conn, "INSERT INTO Cars VALUES(8,'Volkswagen',21600)");  
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        do_exit(conn, res);     
    }  
    PQclear(res);    
    PQfinish(conn);  
    return 0;  
}  
```  
The created table is called Cars and it has three columns: the Id, the name of the car, and its price.  
```  
PGresult *res = PQexec(conn, "DROP TABLE IF EXISTS Cars");  
```  
The PQexec() function submits an SQL command to the server and waits for the result. The PGresult encapsulates the result of a query. Our SQL command drops a table if it already exists.  
```  
if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
    do_exit(conn, res);  
}  
```  
The PQresultStatus() function should be called to check the return value for any errors. The PGRES_COMMAND_OK is returned if the command was properly executed and it does not return data.  
```  
PQclear(res);  
```  
Every command result should be freed with the PQclear() function when it is no longer needed.  
```  
$ ./create_table   
$ psql testdb  
psql (9.3.9)  
Type "help" for help.  
testdb=> SELECT * FROM Cars;  
 id |    name    | price    
----+------------+--------  
  1 | Audi       |  52642  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21600  
(8 rows)  
```  
We execute the program and verify the created table with the psql tool.  
### Simple query  
In this section, we execute a simple query command.  
query_version.c  
```  
#include   
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    PGresult *res = PQexec(conn, "SELECT VERSION()");      
    if (PQresultStatus(res) != PGRES_TUPLES_OK) {  
        printf("No data retrieved\n");          
        PQclear(res);  
        do_exit(conn);  
    }      
    printf("%s\n", PQgetvalue(res, 0, 0));  
    PQclear(res);  
    PQfinish(conn);  
    return 0;  
}  
```  
The example gets the version of the database server.  
```  
PGresult *res = PQexec(conn, "SELECT VERSION()");  
```  
The SELECT VERSION() SQL statement retrieves the version of the database.  
```  
if (PQresultStatus(res) != PGRES_TUPLES_OK) {  
    printf("No data retrieved\n");          
    PQclear(res);  
    do_exit(conn);  
}  
```  
The PGRES_TUPLES_OK is returned for a query that returns data by the PQresultStatus() function.  