3. brctl-util 1
网桥是连接两个局域网的一种存储/转发设备，它能将一个大的LAN分割为多个网段，或将
两个以上的LAN互联为一个逻辑LAN。网桥根据MAC地址来转发数据帧，可以看作一个“低层的 2
路由器”，不过路由器工作在网络层，根据网络地址（如IP地址）进行数据包转发。
3
brctl-util工具是用来配置网桥的，同时可以在主机上创建和管理虚拟网桥。Ubuntu系统默认
不带这个工具，需要先使用下面的命令安装该工具：
4
# apt-get install bridge-utils
下面演示brctl-util的几个常规用法。 5
 查看本机网桥，以及连接在网桥上的网络设备：
6
# brctl show
bridge name bridge id STP enabled interfaces
docker0 8000.56847afe9799 no vethb926edc 7
vethcff2cc8
 创建虚拟网桥： 9
# brctl addbr bridge0
8
 删除网桥：
# brctl delbr bridge0 10
 给网桥接入设备：
10
# brctl addif bridge0 veth0
关于brctl-util工具的更多操作，读者可查阅brctl命令手册。
12
12.1.2 网络空间虚拟化
13
在第1章中，我们已经了解了Docker容器的底层虚拟化技术，包括文件系统虚拟化、进程空
14
间虚拟化、用户虚拟化和网络虚拟化等，其中网络虚拟化能够让一个容器处于与主机和其他容器
完全独立的网络环境中，容器拥有自己私有的虚拟网卡、路由表及IP地址。当然，我们也可以让
15
容器与主机或者其他容器共享同一个网络环境。
Docker网络虚拟化是基于Linux下的网络命名空间（net namespace）实现的。使用ip netns
16
命令，我们同样可以创建自己的虚拟网络环境。下面的ip netns命令创建了一个名为net0的虚拟
网络环境：
17
# ip netns add net0
# ip netns list
18
net0
132 第12章 容器网络
这里需要说明的是，ip netns exec命令允许我们以root权限进入指定的虚拟网络空间进行自
定义配置。下面的命令使用ip netns exec为net0网络空间中的网络设备eth0设置IP地址：
# ip netns exec net0 ip addr add 172.17.42.99/16 dev eth0
在12.1.5节中，我们会讲解如何在不依赖Docker引擎的情况下利用这种技术为容器纯手工打
造一个虚拟的网络环境。
12.1.3 网络设备虚拟化
如果一台计算机想通过IP协议与其他主机通信，它势必需要一个网络接口，也就是我们通常
所说的网卡。另外，还需要一个将各个主机连接在一起的网络设备。这台设备通过内部存储的路
由表控制数据包的发送方向，它可能是网桥、路由器、交换机或者其他类似的网络连接设备。这
与网卡需要连接到一个路由器上才能与其他主机进行连接类似。
如图12-1所示，主机A与主机B通过网卡与路由器相连，路由器与广域网相连，这样主机A与
主机B不但可以通过路由器互相通信，还能通过它访问广域网的内容。
图12-1 网络基本连接
此外，网络接口和网络设备都不一定是物理设备，也可以是虚拟设备，比如每个Linux系统
的lo回环接口就是一个虚拟的网络接口，它主要用于快速高效地发送和接收回环包。Docker就是
利用特殊的虚拟网络接口来连接容器和主机的。
当我们在主机上启动Docker服务时，Docker引擎会在操作系统的内核创建一个名为docker0
的虚拟以太网桥，并且为这个网桥设备随机分配一个主机没有使用的私有IP地址和子网掩码。这
12.1 容器网络的原理 133
个网桥将连接在它上面的所有容器组织成一个虚拟子网，并且提供数据包转发功能。可以认为， 1
这个虚拟网桥是连接容器与容器、容器与主机之间的路由中枢。
下面的ip addr命令展示了笔者机器上的一个无线网卡3: wlan0和Docker创建的虚拟网桥 2
4:docker0：
3
# ip addr
...
3: wlan0:  mtu 1500 qdisc mq state UP group default qlen 1000 4
link/ether 48:5d:60:ed:5a:0d brd ff:ff:ff:ff:ff:ff
inet 172.16.9.18/24 brd 172.16.9.255 scope global wlan0
valid_lft forever preferred_lft forever
5
inet6 fe80::4a5d:60ff:feed:5a0d/64 scope link
valid_lft forever preferred_lft forever
4: docker0:  mtu 1500 qdisc noqueue state UP group default
6
link/ether 56:84:7a:fe:97:99 brd ff:ff:ff:ff:ff:ff
inet 172.17.42.1/16 scope global docker0
valid_lft forever preferred_lft forever
7
inet6 fe80::5484:7aff:fefe:9799/64 scope link
valid_lft forever preferred_lft forever
9
其中wlan0的IP地址是172.16.9.18/24，docker0的IP地址是172.17.42.1/16。新启动的容器默认都将
连接到docker0网桥之上。
8
此时虚拟的桥接路由设备已经有了，我们还需要虚拟的网卡设备提供给容器使用。在Linux
中，我们可以创建虚拟的以太设备（veth），英文全名为Virtual Ethernet，它类似于我们的物理网
10
卡设备。这种新的设备类型由Linux容器技术所引进。此外，veth设备必须成对出现。下面的命令
用于创建一对veth设备：
10
# ip link add A type veth peer name B
上面创建的一对veth设备的名字分别为A和B。因为必须成对出现，所以删除其中任意一个， 12
另外一个也会被删除。veth的两端设备除了名字不一样，两个设备是完全对称的，从一个设备发
出的数据会从另外一个设备收到，在一个设备上的操作会完全映射到另一个设备之上。默认情况 13
下，这两个设备都处于主机的网络空间中，但一般会将一个设备置于容器的网络空间，另一个根
据需要可以放到其他容器的网络空间或者主机的网络空间。 14
Docker容器的网络互联也正是依赖Linux底层的veth机制。每当启动一个容器时，Docker引擎
15
会在主机上创建一个虚拟的以太网卡接口，并且会将这个veth接口一端放在主机网络空间并连接
到docker0网桥，另一端放入Docker容器的网络空间中。容器退出时，虚拟网卡也会被销毁，下次
16
启动容器时将创建一个新的虚拟网络接口并与docker0重新连接。在运行两个容器的主机上面，
下面的ip addr命令展示了Docker创建的两个虚拟网卡设备：
17
# ip addr
...(略)
4: docker0:  mtu 1500 qdisc noqueue state UP group default 18
...(略)
134 第12章 容器网络
6: vethb926edc:  mtu 1500 qdisc pfifo_fast master docker0 state UP group default
qlen 1000
link/ether e6:ab:24:d0:a1:bd brd ff:ff:ff:ff:ff:ff
inet6 fe80::e4ab:24ff:fed0:a1bd/64 scope link
valid_lft forever preferred_lft forever
7: vethcff2cc8:  mtu 1500 qdisc pfifo_fast master docker0 state UP group default
qlen 1000
link/ether 2e:89:46:af:6e:b5 brd ff:ff:ff:ff:ff:ff
inet6 fe80::2c89:46ff:feaf:6eb5/64 scope link
valid_lft forever preferred_lft forever
主机端的虚拟网卡设备一般是以veth*的形式命名的，如上面的vethb926edc和vethcff2cc8。
下面我们使用brctl show命令来验证vethb926edc和vethcff2cc8这两个网络接口是否连接在
docker0网桥之上：
# brctl show
bridge name bridge id STP enabled interfaces
docker0 8000.56847afe9799 no vethb926edc
vethcff2cc8
其中interfaces字段列出了连接在容器上的所有网络设备名称。
veth置于容器内部的一端设备会被Docker命名为eth0，供容器内的进程使用，用来与外部网
络进行通信。容器内的eth0和主机上的veth*相当于一根管道的两端，数据包从一端经由管道传递
到另一端，从而打通了容器内部与外部的通信。图12-2展示了主机网络接口端vethb926edc与容器
网络接口端eth0通过管道相连。
图12-2 网卡管道示意图
我们进入到其中一个容器，使用ip addr命令查看eth0接口信息：
12.1 容器网络的原理 135
root@338de75b79e5:/# ip addr
1
...(略)
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff
2
inet 172.17.0.3/16 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::42:acff:fe11:6/64 scope link
3
valid_lft forever preferred_lft forever
可以看到，IP地址是172.17.0.3/16，证明其处于docker0网桥的子网之下。
4
以上容器的网络结构如图12-3所示。
5
6
7
9
8
10
10
12
13
图12-3 主机内容器网络结构图
14
12.1.4 容器运行的4种网络模式
15
除了上一节所讲的一般情况外，即让容器运行在通过创建虚拟网卡网桥配置而成的网络环境
中，我们还可以让容器运行在主机或者其他容器的网络环境中，甚至可以剔除掉容器的网络能力。
在使用docker run命令运行容器时，我们通过--net参数来指定容器运行的网络模式，一共有4种 16
模式可选，具体如下所示。
17
 --net=bridge。这是容器运行的默认网络模式。通过网桥来设置容器网络时，默认会连接
到docker0网桥之上。此外，也可以通过全局配置文件里DOCKER_OPTS选项的-b参数来指定
18
默认网桥。
136 第12章 容器网络
假如我们希望容器连接到一个名为docker1的网桥上，只要在/etc/default/docker文件的
DOCKER_OPTS选项里添加-b=docker1，然后重启docker服务即可。如果docker1是一个非法
网桥，docker服务重启将失败。配置如下：
DOCKER_OPTS="-b=docker1"
 --net=host。此网络模式的容器将不会拥有自己独立的网络空间，他处的网络环境将不再
是虚拟化的了。相反，它会共享主机的网络环境，包括IP地址、网卡设备、主机名、网络
配置等一切与网络有关的资源。但容器在进程、文件系统等虚拟化方面并不会受到影响。
下面的代码验证了容器确实与主机处于同一网络环境中：
root@xinhua-VirtualBox:~# ip addr show eth0
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 08:00:27:0e:25:15 brd ff:ff:ff:ff:ff:ff
inet 192.168.203.76/24 brd 192.168.203.255 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::a00:27ff:fe0e:2515/64 scope link
valid_lft forever preferred_lft forever
root@xinhua-VirtualBox:~# docker run -t -i --net=host ubuntu
root@xinhua-VirtualBox:/# ip addr show eth0
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 08:00:27:0e:25:15 brd ff:ff:ff:ff:ff:ff
inet 192.168.203.76/24 brd 192.168.203.255 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::a00:27ff:fe0e:2515/64 scope link
valid_lft forever preferred_lft forever
虽然容器拥有和主机完全一样的网络接口访问能力，但它并不能对主机的网络配置栈进
行修改。容器内的进程拥有打开系统低端口的根权限，可能会与主机的某些进程产生冲
突。另外，容器还能够访问本地网络服务D-Bus，这可能会导致一些不可预料的问题发生。
除非特别需要，我们并不推荐使用这种方式启动容器。
 --net=container:NAME_or_ID。这个选项让容器共享指定的已经创建好的容器的网络环境。
两个容器将共享IP地址及端口号等网络资源，并且这两个容器的进程可以通过回环网络进
行访问。
先在一个终端启动一个容器：
# docker run -t -i --name=theOne Ubuntu
root@167b6fc7f62c:/ #
在另一个终端使用--net=container:167b6fc7f62c参数启动另一个容器：
# docker run -t -i --name=theTwo --net=container:167b6fc7f62c ubuntu
root@167b6fc7f62c:/ #
这样theTwo容器就共用了theOne容器的网络环境了，包括它的主机名。
12.1 容器网络的原理 137
 --net=none。以这个选项运行的容器将不会被配置网络环境，也就是说，它将不具备任何 1
网络访问能力。对于已经使用该配置运行的容器，我们仍然可以手动为它配置一个网络
环境。大部分情况下，我们并没必要这么做，因为Docker引擎已经为我们做好了。
2
12.1.5 手动配置容器的网络环境
3
下面我们将手动为运行在--net=none参数下的容器配置一个虚拟的网络环境，以帮助读者详
4
细了解Docker的网络原理，也算是本节的一个小结。
(1) 在一个终端中用--net=none选项运行一个无网络环境的容器：
5
# docker run -i -t --rm --net=none ubuntu /bin/bash
root@63f36fc01b5f:/#
6
(2) 启动新的终端，使用docker inspect命令查看刚才创建的容器在主机的进程ID：
7
# docker inspect -f '{{.State.Pid}}' 63f36fc01b5f
2778
# pid=2778
9
(3) 为容器进程创建独立的网络命名空间。下面创建的网络环境与12.1.2节的方式不一样，但
达到的效果是一样的： 8
# mkdir -p /var/run/netns
# ln -s /proc/$pid/ns/net /var/run/netns/$pid 10
(4) 查看默认网桥的IP及子网掩码：
10
# ip addr show docker0
21: docker0: ...
inet 172.17.42.1/16 scope global docker0 12
...(略)
(5) 创建虚拟网络接口设备A，并为A创建一个映射端设备B：
13
# ip link add A type veth peer name B
14
(6) 将设备A接入网桥docker0：
# brctl addif docker0 A 15
(7) 启动网络设备A：
16