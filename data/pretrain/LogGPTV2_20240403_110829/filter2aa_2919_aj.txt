 // Step1: Access the object to add a check maps node 
20:     transition(); 
 // Step2: Modify the assumptions (code gets inlined) 
21:     double_array[1] = expected;// Step3: Not protected access 
22: } 
23: for (var i = 0; i  v); // call Array.prototype.map() inside the optimized function 
05: } 
06: opt(a); // Let interpreter collect type feedback 
07: %OptimizeFunctionOnNextCall(opt); 
08: // Lengthen the array, but ensure that it points to a non-dictionary backing store. 
09: a.length = 0x2000000-1; 
10: a.fill(1,0);            // can take several minutes in debug build 
11: a.push(1); 
12: a.length += 1; 
13: opt(a); // the non-inlined array constructor produces an dictionary elements array 
In the first call to the opt function the interpreter collects type feedback for later optimization. 
In this invocation a contiguous array with holes is passed. The OptimizeFunctionOnNextCall 
native function tells v8 to optimize the function as soon it gets called again. The last line 
performs this call which leads to the optimization of the function based on the collected 
feedback. The Array.prototype.map function creates a new array by calling the array 
constructor and then assigns all values by calling the passed callback function. The used 
callback function just creates a copy of the array by returning the unmodified elements. 
Typically, the array constructor is not called but is instead inlined during the call-reducer 
optimization phase. This is prevented by the first code line (Array(2**30)) which has the 
side-affect that ensures that subsequent array constructors do not get inlined. 
During the second opt function invocation from line 13 the passed array has a length of 
0x2000001. If the array constructor is called with a length bigger than 0x2000000, a 
dictionary array gets created. However, the passed array is a contiguous array because it 
was created with a length of 0x2000000-1. The fill call is required because sparse arrays are 
stored as dictionary arrays and the fill call ensures that all indexes are in-use and the array 
is therefore not sparse. By calling push afterwards and increasing the length by one the 
length becomes bigger than 0x2000000 which leads to the creation of a dictionary array 
during the map call. The code assumes that both arrays have the same type which leads to 
a type-confusion which can be used to modify the length of an array. Exploitation is 
afterwards trivial and similar to several other public exploits. 
The bug was reported 127 to the developers in early March 2019. A fix including a regression 
test was pushed upstream to the public 128 on 2019-03-18. Exodus Intelligence published a 
detailed blog post 129 together with an exploit 130 on 2019-04-03 which affecting the current 
release version of Chrome at that time. Chrome 74, which fixed the vulnerability, was 
released on 2019-04-23. Rabet, a researcher from Microsoft Offensive Security research 
127 https://bugs.chromium.org/p/chromium/issues/detail?id=941743 
128 https://chromium-review.googlesource.com/c/v8/v8/+/1526018 
129 https://blog.exodusintel.com/2019/04/03/a-window-of-opportunity/ 
130 https://github.com/exodusintel/Chromium-941743 
71 
team, already stressed in 2018 the fact that Google makes regression tests of security 
vulnerabilities public available before a fixed release is shipped: “Google regularly 0-days 
itself, which is not great.” 131 
Generalization for variation analysis: 
• 
The code Array(2**30) should sometimes be added by a fuzzer at the start of a 
test case to prevent the TurboFan compiler from inlining array constructors.  
• 
A fuzzer should sometimes create arrays with holes. 
• 
To create a contiguous array with a length value which would typically result in a 
dictionary array, the code from lines 9 to 12 can be used. However, calling the fill 
function in a so large array consumes several minutes in the debug v8 build because 
of the additional debug checks. These vulnerabilities would therefore not be found 
during fuzzing because the test case would first timeout. To solve this problem the 
v8 code can be adapted by adding a native function which fakes this behavior, similar 
to the OptimizeFunctionOnNextCall function.  
Chromium issue 659475, CVE-2016-5198 (Mobile Pwn2Own 2016) – Incorrect stable 
map assumption for global variables leads to OOB access 
01: function Ctor() {        
02:     n = new Set(); 
// map with an empty property array 
03: } 
04: function Check() { 
05:     n.xyz = 0x826852f4;   
// map with a property array for property xyz 
06:     parseInt();  
// Prevent inlining; args must not be passed 
07: } 
08: for (var i = 0; i n< point to an empty array 
15: Check(); // The compiled code doesn’t check the map and OOB access occurs  
The map of an object stores structure and type information of the used properties. A new 
map is therefore assigned as soon as a property is added. Initially, the n variable in line 2 is 
a Set with an empty property array. In line 5 the property xyz is assigned and therefore the 
map changes. 
Optimization of the ctor function is triggered in line 9. Since the check function is also invoked 
in a loop, optimization is also triggered for this function. The first execution changes the map 
of the n variable because a property gets assigned. The later optimization is done under the 
assumption that n has always the same map in subsequent calls, however, no code is added 
to guarantee that this assumption holds. The root cause of this vulnerability is that the 
Crankshaft compiler assumed a stable map for global variables. The function call in line 14 
changes the property array of the global n variable back to an empty array. When line 15 
131 https://www.youtube.com/watch?v=sheeWKC6CuM 
72 
calls the optimized check function, the compiled code still assumes the original map without 
performing a check and just writes to the property array. This leads to an OOB access in the 
empty property array.  
The vulnerability was exploited during Mobile Pwn2Own 2016 to remotely compromise a 
Nexus phone. It was fixed 132 on 2016-11-26 which means a regression test, which triggers 
this vulnerability, was publicly available since November 2016. Exploitation details were 
presented at CanSecWest 2017 and can be found at 133. A Chinese writeup with a full exploit 
was published in April 2019 and can be found at 134. 
Since Chromium is not the only software which integrates v8, a lot of other applications are 
also prone to vulnerabilities in the v8 engine. Notable is especially Foxit Reader, one of the 
key products from Foxit. “Foxit has over 560 million users and has sold to over 100,000 
customers located in more than 200 countries.” 135 
Foxit Reader 9.6.0 was released on 2019-07-04 with the v8 engine in version 5.4.500.36 
which was released three years earlier in October 2016. With Foxit Reader version 9.7.0, 
released on 2019-09-29, the v8 engine was updated to a version not prone to CVE-2016-
5198. This left a 35-month window of opportunity for attackers capable of writing an exploit 
based on public patch information and left a 6-month window for attackers capable of copy 