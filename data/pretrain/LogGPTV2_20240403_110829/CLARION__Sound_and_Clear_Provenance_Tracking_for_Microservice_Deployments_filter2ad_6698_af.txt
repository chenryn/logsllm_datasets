59504 / 59507
141381 / 141387
15492 / 15495
17580 / 17582
22545 / 22547
Components
SPADE/CLARION
18 / 17
17 / 17
26 / 24
16 / 15
20 / 17
17 / 16
1402 (1383/19)
30304
19606 / 18817
66972 / 66982
30 / 22
Service
ubuntu
redis
jenkins
node
nginx
nginx
MT-4
nginx
MC-4
Table 10: Runtime Overhead Comparison of Container Provenance Systems
Service
Base (secs)
Linux Audit
(secs)
SPADE
(secs)
CLARION
(secs)
Incremental
Overhead
(CLARION)
Overall
Overhead
(CamFlow)
1503 s
668 s
frontend
productcatalog
service
currencyservice 1104 s
paymentservice 1082 s
shippingservice 434 s
emailservice
929 s
checkoutservice 682 s
recommendation
8726 s
service
adservice
loadgenerator
4438 s
200 s
1550 s
679 s
1139 s
1123 s
446 s
960 s
719 s
9418 s
4454 s
208 s
1558 s
681 s
1153 s
1126 s
449 s
1028 s
714 s
9337 s
4518 s
212 s
1578 s
691 s
1169 s
1143 s
451 s
1068 s
734 s
9729 s
4571 s
215 s
1.3%
1.5%
1.4%
1.5%
0.4%
3.9%
2.8%
4.2%
1.2%
1.4%
Overall
Overhead
(Audit
SPADE
CLARION)
3.7%
3.4%
+
+
5.9%
5.6%
3.9%
15.0%
7.6%
11.5%
3.0%
7.5%
4.8%
9.1%
12.9%
11.5%
22.5%
1.2%
3.2%
9.5%
5.3%
20.4%
Overall
Overhead
(SEL-Audit)
32.4%
25.0%
8.5%
9.7%
25.8%
17.6%
13.9%
19.5%
8.5%
29.4%
Table 11: Storage Overhead Comparison
SEL-Audit
CamFlow
SPADE
CLARION Incremental
Overhead
4.05%
174.68 GB
181.75 GB
312.56 GB
168.79 GB
References
[1] Apache Mesos. http://mesos.apache.org/.
[2] AWS Serverless Computing Services. https://aws.amazon.com/
serverless/?nc1=h_ls.
[3] CoreOS rkt. https://coreos.com/rkt/.
[4] CVE-2018-15664 (Symlink TOCTOU). https://nvd.nist.gov/
vuln/detail/CVE-2018-15664.
[5] CVE-2019-14271 (Docker-tar).
detail/CVE-2019-14271.
https://nvd.nist.gov/vuln/
[6] CVE-2019-5736 (RunC). https://nvd.nist.gov/vuln/detail/
CVE-2019-5736.
[7] Docker. https://www.docker.com/.
[8] Docker Engine Large Integer Denial of Service Vulnerability. https:
//nvd.nist.gov/vuln/detail/CVE-2018-20699.
[9] Escape of Play-with-Docker Containers. https://threatpost.com/
hack-allows-escape-of-play-with-docker-containers/
140831/.
[10] Google Microservice Demo: Online Boutique. https://github.com/
GoogleCloudPlatform/microservices-demo.
[11] Introduction to Solaris Zones.
https://docs.oracle.com/cd/
E19044-01/sol.containers/817-1592/zones.intro-1/index.
html.
[12] Jails in FreeBSD Handbook.
books/handbook/jails/.
https://docs.freebsd.org/en/
[13] Kernel Self-Protection Docs. https://www.kernel.org/doc/html/
latest/security/self-protection.html.
[14] Kinsing Malware on Containers.
https://blog.aquasec.com/
threat-alert-kinsing-malware-container-vulnerability.
[15] Linux Namespace.
https://www.man7.org/linux/man-pages/
man7/namespaces.7.html.
[16] LTTng. https://lttng.org/.
[17] LXC: Linux Container Docs. https://linuxcontainers.org/lxd/
docs/master/.
[18] Misconﬁgured Containers Again Targeted by Cryptominer Malware.
https://t.co/J2WXp51xIK.
[19] Netﬁlter Architecture. https://www.netfilter.org/.
[20] Pattern: Microservice Architecture. https://microservices.io/
patterns/microservices.html.
[21] Sysdig. https://github.com/draios.
[22] Adam Bates, Dave Jing Tian, Kevin Butler, and Thomas Moyer. Trust-
worthy whole-system provenance for the Linux kernel. In 24th USENIX
Security Symposium, 2015.
[23] Ashish Gehani and Dawood Tariq. SPADE: Support for provenance
In 13th ACM/IFIP/USENIX
auditing in distributed environments.
International Conference on Middleware, 2012.
[24] Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and Eyal De Lara.
The Taser intrusion recovery system. In 20th ACM Symposium on
Operating Systems Principles, pages 163–176, 2005.
[25] Steve Grubb. Redhat Linux Audit. https://people.redhat.com/
sgrubb/audit/.
USENIX Association
30th USENIX Security Symposium    4005
Figure 17: Motivating Example: Trivial insider attack.
[26] Wajih Ul Hassan, Lemay Aguse, Nuraini Aguse, Adam Bates, and
Thomas Moyer. Towards scalable cluster auditing through grammatical
inference over provenance graphs. In 25th Network and Distributed
System Security Symposium, 2018.
[27] Taesoo Kim, Xi Wang, Nickolai Zeldovich, and Frans Kaashoek. Intru-
sion recovery using selective re-execution. In 9th USENIX Symposium
on Operating Systems Design and Implementation, 2010.
[28] Samuel King and Peter Chen. Backtracking intrusions. In 19th ACM
Symposium on Operating Systems Principles, 2003.
[29] Samuel King, Zhuoqing Morley Mao, Dominic Lucchetti, and Peter
Chen. Enriching intrusion alerts through multi-host causality. In 12th
Network and Distributed System Security Symposium, 2005.
[30] Srinivas Krishnan, Kevin Snow, and Fabian Monrose. Trail of bytes:
Efﬁcient support for forensic analysis. In 17th ACM Conference on
Computer and Communications Security, 2010.
[31] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-
Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha,
Gabriela Ciocarlie, Ashish Gehani, and Vinod Yegneswaran. MCI:
Modeling-based Causality Inference in Audit Logging for Attack Inves-
tigation. In 25th Network and Distributed System Security Symposium,
2018.
[32] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High accuracy at-
tack provenance via binary-based execution partition. In 20th Network
and Distributed System Security Symposium, 2013.
[33] Xin Lin, Lingguang Lei, Yuewu Wang, Jiwu Jing, Kun Sun, and Quan
Zhou. A measurement study on Linux container security: Attacks
and countermeasures. In 34th Annual Computer Security Applications
Conference, 2018.
[34] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu
Wu, Junghwan Rhee, and Prateek Mittal. Towards a timely causality
analysis for enterprise security. In 25th Network and Distributed System
Security Symposium, 2018.
[35] John Lyle and Andrew Martin. Trusted computing and provenance:
Better together. In 2nd USENIX Workshop on the Theory and Practice
of Provenance, 2010.
[36] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. ProTracer: Towards
practical provenance tracing by alternating between logging and taint-
ing. In 23rd Network and Distributed System Security Symposium,
2016.
[37] Antony Martin, Simone Raponi, Theo Combe, and Roberto Di Pietro.
Docker ecosystem – Vulnerability analysis. Computer Communica-
tions, 122, 2018.
[38] James Morris, Stephen Smalley, and Greg Kroah-Hartman. Linux
Security Modules: General security support for the Linux kernel. In
11th USENIX Security Symposium, 2002.
[39] Thomas Pasquier, Xueyuan Han, Mark Goldstein, Thomas Moyer,
David Eyers, Margo Seltzer, and Jean Bacon. Practical whole-system
provenance capture. In 8th ACM Symposium on Cloud Computing,
2017.
[40] Byungchul Tak, Canturk Isci, Sastry Duri, Nilton Bila, Shripad Nad-
gowda, and James Doran. Understanding security implications of using
containers in the cloud. In 28th USENIX Annual Technical Conference,
2017.
[41] Yutao Tang, Ding Li, Zhichun Li, Mu Zhang, Kangkook Jee, Xusheng
Xiao, Zhenyu Wu, Junghwan Rhee, Fengyuan Xu, and Qun Li. Node-
Merge: Template based efﬁcient data reduction for big-data causality
analysis. In 25th ACM Conference on Computer and Communications
Security, 2018.
A Insider Attack: Detailed Steps
The attack partially shown in the motivating example is illus-
trated in Figures 20. The attack involves 3 steps.
Step 1: The cat command is used in a bash shell to read
the /etc/passwd ﬁle.
Step 2: The same bash shell is then used to set up a back-
door using the netcat (nc) tool on socket with IP address /
local port (0.0.0.0/4000).
Step 3: Connection is established to this backdoor port
from a remote host.
We perform those steps inside a container and on the
host. The container is initialized with a port mapping from
port TCP/4000 inside the container to port TCP/8000 on the
host. It looks like the netcat process was listening on port
TCP/4000 of this container, but in fact it was listening on port
TCP/8000 on the host. The bash shell processes which start
the attacks are process 2976 and process 4032.
As shown in Figure 20, we cannot identify which attack is
performed in the container. Furthermore, the process creation
provenance, clone between PID 2976 and PID 3030 (VPID
10), inside the container is broken, resulting in fragmentation.
In addition, we only see one ﬁle and one socket being
touched in the graph because two touched ﬁles have the same
virtualized paths and two connected sockets have the same
local addresses, leading to ambiguity.
4006    30th USENIX Security Symposium
USENIX Association
Host 1 (10.0.2.5)bashpid=2976forkbashpid=10catpid=3030execvecatpid=3030subtype:ﬁlepath:/etc/passwdacceptncpid=3043ncpid=3043execvebashpid=11forkforkbashpid=4032catpid=4146bashpid=4146execveforkbashpid=4149readexecvencpid=4149Host 2 (10.0.2.15)ncpid=3212connectConnectedconnectladdr:0.0.0.0lport:4000raddr:10.0.2.15rport:3884laddr:10.0.2.15lport:3884raddr:10.0.2.5rport:4000laddr:10.0.2.15lport:3884raddr:10.0.2.5rport:8000readaccept1a. Touching /etc/passwd frominside the container2a. Accepting connection on asocket inside the container1b. Touching /etc/passwd fromoutside the container2b. Accepting connection on asocket outside the container3. Connect to both sockets fromanother host