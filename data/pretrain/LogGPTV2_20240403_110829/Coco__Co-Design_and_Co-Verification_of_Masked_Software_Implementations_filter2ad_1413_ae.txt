### Table 3: Verification of Masked Software Implementations on Secured IBEX Using COCO

| Fresh | Randomness | Verif. Runtime | Stable Transient | Bit Width | Number of Bits | Time (s) | T-Test Score | Reference |
|-------|-------------|----------------|------------------|-----------|----------------|----------|--------------|-----------|
| 32 bit | 32 bit | 3 s | - | 32 bit | 1 | 3 s | - | - |
| 32 bit | 5× 32 bit | 2 s | - | 32 bit | 5 | 2 s | - | - |
| 32 bit | 5× 32 bit | 9 s | - | 32 bit | 5 | 9 s | - | - |
| 32 bit | 5× 32 bit | 5 s | - | 32 bit | 5 | 5 s | - | - |
| 32 bit | 5× 32 bit | 5 s | - | 32 bit | 5 | 5 s | - | - |
| 32 bit | 5× 32 bit | 25 s | - | 32 bit | 5 | 25 s | - | - |
| 32 bit | 6× 32 bit | 20 s | - | 32 bit | 6 | 20 s | - | - |
| 32 bit | 34× 16 bit | 1 m | - | 16 bit | 34 | 1 m | - | - |
| 32 bit | 3× 32 bit | 9 s | - | 32 bit | 3 | 9 s | - | - |
| 32 bit | 15× 32 bit | 3 m | - | 32 bit | 15 | 3 m | - | - |
| 32 bit | 6× 32 bit | 44 s | - | 32 bit | 6 | 44 s | - | - |
| 32 bit | 6× 32 bit | 11 s | - | 32 bit | 6 | 11 s | - | - |
| 32 bit | 6× 32 bit | 12 s | - | 32 bit | 6 | 12 s | - | - |
| 32 bit | 6× 32 bit | 32 s | - | 32 bit | 6 | 32 s | - | - |
| 32 bit | 6× 32 bit | 13 s | - | 32 bit | 6 | 13 s | - | - |
| 32 bit | 6× 32 bit | 17 s | - | 32 bit | 6 | 17 s | - | - |
| 32 bit | 6× 32 bit | 19 s | - | 32 bit | 6 | 19 s | - | - |
| 32 bit | 6× 32 bit | 2.6 m | - | 32 bit | 6 | 2.6 m | - | - |
| 32 bit | 6× 32 bit | 2 m | - | 32 bit | 6 | 2 m | - | - |
| 32 bit | 6× 32 bit | 3.9 m | - | 32 bit | 6 | 3.9 m | - | - |
| 32 bit | 6× 32 bit | 4.75 h | - | 32 bit | 6 | 4.75 h | - | - |
| 32 bit | 6× 32 bit | 43 s | - | 32 bit | 6 | 43 s | - | - |
| 32 bit | 6× 32 bit | 1.3 h | - | 32 bit | 6 | 1.3 h | - | - |
| 32 bit | 6× 32 bit | 2.5 m | - | 32 bit | 6 | 2.5 m | - | - |

**Notes:**
- **Fresh:** Indicates the freshness of the random number generator.
- **Randomness:** The bit width and number of bits used in the randomness generation.
- **Verif. Runtime:** The runtime for verification.
- **Stable Transient:** Indicates if the transient is stable.
- **Bit Width:** The bit width of the data.
- **Number of Bits:** The number of bits used in the implementation.
- **Time (s):** The time taken for the verification process.
- **T-Test Score:** The t-test score for the leakage assessment.
- **Reference:** The reference to the specific implementation.

### Figure 5: T-Test Scores of the Original (Left) and the Secured (Right) Register File During the Execution of a First-Order DOM Keccak S-box Using 100,000 Power Traces

- **Left Panel:** T-test results for the original, unprotected register file during the execution of the first-order DOM Keccak S-box. Significant peaks over the 4.5 border indicate first-order side-channel leakage.
- **Right Panel:** T-test results for the same code when running on the secured version of the register file. No significant peaks indicate that the secured design works as expected.

### 5.4 Practical Evaluation

The primary goal of COCO is to verify the security of masked software implementations at the gate-level netlist of the underlying hardware. This tool is particularly useful for ASIC designs of processors, where it can perform a verification of the final netlist before tape-out. While fabricating an ASIC is beyond the scope of this paper, we map a sample of a verified netlist to an FPGA to demonstrate the practical effectiveness of our approach.

#### Mapping Considerations

When synthesizing hardware designs for FPGAs, the resulting netlist does not contain typical CMOS building blocks but rather lookup tables (LUTs) that are configured to match the original hardware design logically but not at the netlist level. FPGA synthesis tools often merge multiple logic gates into single, typically 3 to 6-bit LUTs. This can cause issues because certain characteristics, such as the strict separation of registers in our secured register file, can be lost in the translation process. Therefore, we manually map the ASIC netlist of the original and secured IBEX core to FPGA netlists that closely match the ASIC netlists. This involves ensuring that every logic gate is represented by a single dedicated LUT. Given the manual nature of this process, we focus our leakage assessment on the most critical parts of the secured IBEX: the register file and a simple ALU.

#### Experimental Setup

We compare the execution of a masked Keccak S-box computation using:
1. The basic register file from the original IBEX core.
2. The secured register file, including one-hot encoded gated reads and writes (as described in Section 3.2).

Following the guidelines of Goodwill et al. [19], we use Welch’s t-test to show practical first-order protection of first-order masked software implementations. The basic idea is to measure the significance of the difference in means of two distributions by constructing two trace sets: one with random inputs and one with constant inputs. For a masked implementation, the secret, native inputs are fixed, while the masks and shares are generated randomly. The null hypothesis is that both trace sets have equal means, i.e., they cannot be distinguished from each other. The null hypothesis is rejected with a confidence greater than 99.999% if the absolute t-score \( t \) stays below 4.5.

#### Results

For our experiment, we execute the register-only (reg.) variant of the DOM first-order masked Keccak S-box, as introduced in Table 3. To measure power consumption, we use the SAKURA-G board [25] equipped with a Xilinx Spartan-6 FPGA, connected to a PicoScope 6404C at a 312.5 Ms/s sampling rate. The IBEX components operate at a clock frequency of 8 MHz.

Figure 5 shows the results of our leakage assessment using 100,000 traces. The left panel presents the t-test results for the original, unprotected register file during the execution of the first-order DOM Keccak S-box. As expected, the t-test shows significant peaks over the 4.5 border, indicating first-order side-channel leakage. The right panel presents the t-test results for the same code when running on our secured version of the register file. Here, the leakage assessment reveals no significant peaks, indicating that our secured design works as expected.

### 6 Conclusion

In this paper, we presented COCO, the first tool for co-design and co-verification of masked software implementations on CPUs. COCO takes a CPU netlist, together with a masked assembly implementation, and formally verifies its leakage-free execution down to the gate level. While previous software verification approaches mainly work on an algorithmic level and model only a few select CPU side effects, COCO can detect any CPU design aspect that could reduce the protection order of masked software implementations.

We demonstrated the practicality of our work by analyzing the popular 32-bit RISC-V IBEX core with COCO. We detected various design aspects that reduce the protection order of our tested software implementations and proposed respective fixes, mostly in hardware. Our resulting secured IBEX core has an area overhead of about 10%, and the runtime of software on this processor is largely unaffected. The formal verification with COCO of, for example, a first-order masked Keccak S-box running on this core takes around 156 seconds. We demonstrated the effectiveness of the proposed design modifications in a practical evaluation on an FPGA.

### Acknowledgements

This work was supported by the TU Graz LEAD project "Dependable Internet of Things in Adverse Environments" and the Austrian Research Promotion Agency (FFG) via the K-Project DeSSnet, which is funded in the context of COMET – Competence Centers for Excellent Technologies by BMVIT, BMWFW, Styria, and Carinthia, via the FERMION project (grant nr 867542), and via the project IoT4CPS. This work has also received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 681402).

### References

[References listed here as provided in the original text.]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.