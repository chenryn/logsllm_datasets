Fresh
Randomness
Verif. Runtime
Stable Transient
32 bit
32 bit
32 bit
32 bit
-
32 bit
5× 32 bit
5× 32 bit
5× 32 bit
34× 16 bit
3× 32 bit
15× 32 bit
6× 32 bit
3 s
2 s
9 s
5 s
5 s
5 s
25 s
20 s
1 m
18 m
9 s
3 m
44 s
11 s
12 s
32 s
13 s
17 s
19 s
2.6 m
2 m
3.9 m
4.75 h
43 s
1.3 h
2.5 m
-
12
-
-
-
-
-
70
-
-
-
-
-
DOM AND reg. [22]
DOM Keccak S-box [23]
DOM AND reg. [22]
34
474
65
Second-order
Third-order
Table 3: Veriﬁcation of masked software implementations on secured IBEX using COCO. Ø indicates intentionally broken
implementations. Testcases with reg. omit memory accesses and perform all computations using registers. Runtimes stem from
single-threaded executions on an Intel Core i7 notebook CPU with 16 GB of RAM.
Figure 5: T-test scores of the original (left) and the secured (right) register ﬁle during the execution of a ﬁrst-order DOM Keccak
S-box using 100 000 power traces.
5.4 Practical Evaluation
The purpose of COCO is to verify the security of masked
software implementations at the level of gate-level netlists of
the underlying hardware. The main application for the tool are
ASIC designs of processors, where COCO allows to perform
a veriﬁcation of the ﬁnal netlist of a design before tape-out.
The fabrication of an ASIC is clearly beyond the scope of this
paper. However, in order to show that our approach indeed
leads to secure implementations in practice, in this section we
map a sample of a veriﬁed netlist to an FPGA and perform an
empirical analysis.
Several things need to be considered when doing this map-
ping. When synthesizing hardware designs for FPGAs, the re-
sulting netlist does not contain typical CMOS building blocks
but rather, among others, lookup tables (LUTs) that are con-
ﬁgured to match the original hardware design on a logical
level but not on netlist-level. This is especially problematic
since FPGA synthesis tools tend to merge multiple logic gates
into single, typically 3 to 6-bit LUTs. The resulting hardware
will still be equivalent from a pure logic perspective, how-
ever, certain characteristics such as the strict separation of
registers in our secured register ﬁle can get lost in the transla-
tion process. Therefore, we manually map the ASIC netlist
of the original and the secured IBEX core to FPGA netlists
that match the ASIC netlists as closely as possible. This step
involves, amongst others, ensuring that every logic gate is
represented by a single dedicated LUT. Since this process is
mostly manual, and thus very time consuming, we decided
to focus our leakage assessment only on the most important
parts of the secured IBEX which are needed to execute crypto-
graphic implementation: the register ﬁle and a simple ALU.
In our experiments, we compare the execution of a masked
Keccak S-box computation using (1) the basic register ﬁle as it
can be found in the original IBEX core, (2) the secured register
ﬁle including (one-hot encoded) gated reads and writes (cf.
Section 3.2). Following the guidelines of Goodwill et al. [19],
we use Welch’s t-test to show practical ﬁrst-order protection
of ﬁrst-order masked software implementations. The basic
idea is to measure the signiﬁcance of the difference of means
of two distributions by constructing two trace sets, one with
random inputs and one with constant inputs. In the case of a
masked implementation it means that the secret, native inputs
USENIX Association
30th USENIX Security Symposium    1481
02000400060008000samples050100150200250|t-value|02000400060008000samples0244.56|t-value|are ﬁxed, while the masks and shares are generated randomly.
The null-hypothesis is that both trace sets have equal means,
i.e., they cannot be distinguished from each other. The null-
hypothesis is rejected with a conﬁdence greater than 99.999%
if the absolute t-score t stays below 4.5.
For our experiment, we execute the register-only (reg.) vari-
ant of the DOM ﬁrst-order masked Keccak S-box, as intro-
duced in Table 3. In order to measure the power consumption,
we use the SAKURA-G board [25] equipped with a Xilinx
Spartan-6 FPGA. We connect the board to a PicoScope 6404C
at 312.5 Ms/s sampling rate, the IBEX components operate
at a clock frequency of 8 MHz.
Figure 5 shows the results of our leakage assessment us-
ing 100 000 traces. The left presents the t-test results for
the original, unprotected register ﬁle during the execution of
the ﬁrst-order DOM Keccak S-box. As expected, the t-test
shows signiﬁcant peaks over the 4.5 border which indicates
ﬁrst-order side-channel leakage. The right presents the t-test
results for the same code when running on our secured ver-
sion of the register ﬁle. Here, the leakage assessment reveals
no signiﬁcant peaks, which indicates that our secured design
works as expected.
6 Conclusion
In this paper, we presented COCO, the ﬁrst tool for co-design
and co-veriﬁcation of masked software implementations on
CPUs. COCO takes a CPU netlist, together with a masked as-
sembly implementation, and then formally veriﬁes its leakage-
free execution down to the gate-level. While previously pre-
sented software veriﬁcation approaches mainly work on algo-
rithmic level and model only a few select CPU side-effects,
COCO can detect any CPU design aspect that could reduce
the protection order of masked software implementations.
We show the practicality of our work, by analyzing the
popular 32-bit RISC-V IBEX core with COCO. We detect
various design aspects that reduce the protection order of our
tested software implementations and propose respective ﬁxes,
mostly in hardware. Our resulting secured IBEX core has an
area overhead of about 10%, the runtime of software on this
processor is largely unaffected, and the formal veriﬁcation
with COCO of an, e.g., ﬁrst-order masked Keccak S-box run-
ning on this core takes around 156 seconds. We demonstrate
the effectiveness of the proposed design modiﬁcations in a
practical evaluation on an FPGA.
Acknowledgements
project DeSSnet, which is funded in the context of COMET –
Competence Centers for Excellent Technologies by BMVIT,
BMWFW, Styria and Carinthia, via the FERMION project
(grant nr 867542), and via the project IoT4CPS. This work
has received funding from the European Research Council
(ERC) under the European Union’s Horizon 2020 research
and innovation programme (grant agreement No 681402).
References
[1] Josep Balasch, Benedikt Gierlichs, Vincent Grosso, Os-
car Reparaz, and François-Xavier Standaert. On the cost
of lazy engineering for masked software implementa-
tions. In Smart Card Research and Advanced Applica-
tions - 13th International Conference, CARDIS 2014,
Paris, France, November 5-7, 2014. Revised Selected
Papers, volume 8968 of Lecture Notes in Computer Sci-
ence, pages 64–81. Springer, 2014.
[2] Gilles Barthe, Sonia Belaïd, Gaëtan Cassiers, Pierre-
Alain Fouque, Benjamin Grégoire, and François-Xavier
Standaert. maskverif: Automated veriﬁcation of higher-
order masking in presence of physical defaults. In Com-
puter Security - ESORICS 2019 - 24th European Sym-
posium on Research in Computer Security, Luxembourg,
September 23-27, 2019, Proceedings, Part I, volume
11735 of Lecture Notes in Computer Science, pages
300–318. Springer, 2019.
[3] Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-
Alain Fouque, Benjamin Grégoire, and Pierre-Yves
Strub. Veriﬁed proofs of higher-order masking.
In
Advances in Cryptology - EUROCRYPT 2015 - 34th
Annual International Conference on the Theory and Ap-
plications of Cryptographic Techniques, Soﬁa, Bulgaria,
April 26-30, 2015, Proceedings, Part I, volume 9056
of Lecture Notes in Computer Science, pages 457–485.
Springer, 2015.
[4] Gilles Barthe, François Dupressoir, Sebastian Faust,
Benjamin Grégoire, François-Xavier Standaert, and
Pierre-Yves Strub. Parallel implementations of masking
schemes and the bounded moment leakage model. In
Advances in Cryptology - EUROCRYPT 2017 - 36th
Annual International Conference on the Theory and Ap-
plications of Cryptographic Techniques, Paris, France,
April 30 - May 4, 2017, Proceedings, Part I, volume
10210 of Lecture Notes in Computer Science, pages 535–
566, 2017.
We thank the anonymous reviewers for their valuable sugges-
tions and comments, which helped in improving the paper.
This work was supported by the TU Graz LEAD project "De-
pendable Internet of Things in Adverse Environments", and
the Austrian Research Promotion Agency (FFG) via the K-
[5] Gilles Barthe, Marc Gourjon, Benjamin Grégoire, Maxi-
milian Orlt, Clara Paglialonga, and Lars Porth. Masking
in ﬁne-grained leakage models: Construction, imple-
mentation and veriﬁcation. IACR Cryptol. ePrint Arch.,
2020:603, 2020.
1482    30th USENIX Security Symposium
USENIX Association
[6] Sonia Belaïd, Fabrice Benhamouda, Alain Passelègue,
Emmanuel Prouff, Adrian Thillard, and Damien
Vergnaud. Private multiplication over ﬁnite ﬁelds. In
Advances in Cryptology - CRYPTO 2017 - 37th Annual
International Cryptology Conference, Santa Barbara,
CA, USA, August 20-24, 2017, Proceedings, Part III, vol-
ume 10403 of Lecture Notes in Computer Science, pages
397–426. Springer, 2017.
[7] Sonia Belaïd, Pierre-Évariste Dagand, Darius Mercadier,
Matthieu Rivain, and Raphaël Wintersdorff. Tornado:
Automatic generation of probing-secure masked bit-
sliced implementations. In EUROCRYPT (3), volume
12107 of Lecture Notes in Computer Science, pages 311–
341. Springer, 2020.
[8] Roderick Bloem, Hannes Groß, Rinat Iusupov, Bettina
Könighofer, Stefan Mangard, and Johannes Winter. For-
mal veriﬁcation of masked hardware implementations
in the presence of glitches. In Advances in Cryptology -
EUROCRYPT 2018 - 37th Annual International Confer-
ence on the Theory and Applications of Cryptographic
Techniques, Tel Aviv, Israel, April 29 - May 3, 2018 Pro-
ceedings, Part II, volume 10821 of Lecture Notes in
Computer Science, pages 321–353. Springer, 2018.
[9] Joan Boyar and René Peralta. A small depth-16 cir-
cuit for the AES s-box. In Information Security and
Privacy Research - 27th IFIP TC 11 Information Se-
curity and Privacy Conference, SEC 2012, Heraklion,
Crete, Greece, June 4-6, 2012. Proceedings, volume 376
of IFIP Advances in Information and Communication
Technology, pages 287–298. Springer, 2012.
[10] Suresh Chari, Charanjit S. Jutla, Josyula R. Rao, and
Pankaj Rohatgi. Towards sound approaches to counter-
act power-analysis attacks. In Advances in Cryptology
- CRYPTO ’99, 19th Annual International Cryptology
Conference, Santa Barbara, California, USA, August 15-
19, 1999, Proceedings, volume 1666 of Lecture Notes
in Computer Science, pages 398–412. Springer, 1999.
[11] Suresh Chari, Josyula R. Rao, and Pankaj Rohatgi. Tem-
plate attacks. In CHES, volume 2523 of Lecture Notes
in Computer Science, pages 13–28. Springer, 2002.
[12] Thomas De Cnudde, Oscar Reparaz, Begül Bilgin,
Svetla Nikova, Ventzislav Nikov, and Vincent Rijmen.
Masking AES with d+1 shares in hardware. In Crypto-
graphic Hardware and Embedded Systems - CHES 2016
- 18th International Conference, Santa Barbara, CA,
USA, August 17-19, 2016, Proceedings, volume 9813
of Lecture Notes in Computer Science, pages 194–212.
Springer, 2016.
[13] Jean-Sébastien Coron, Christophe Giraud, Emmanuel
Prouff, Soline Renner, Matthieu Rivain, and Praveen Ku-
mar Vadnala. Conversion of security proofs from one
leakage model to another: A new issue. In Constructive
Side-Channel Analysis and Secure Design - Third In-
ternational Workshop, COSADE 2012, Darmstadt, Ger-
many, May 3-4, 2012. Proceedings, volume 7275 of Lec-
ture Notes in Computer Science, pages 69–81. Springer,
2012.
[14] Wouter de Groot, Kostas Papagiannopoulos, Antonio
de la Piedra, Erik Schneider, and Lejla Batina. Bitsliced
masking and ARM: friends or foes? In Lightweight
Cryptography for Security and Privacy - 5th Inter-
national Workshop, LightSec 2016, Aksaray, Turkey,
September 21-22, 2016, Revised Selected Papers, vol-
ume 10098 of Lecture Notes in Computer Science, pages
91–109. Springer, 2016.
[15] Leonardo Mendonça de Moura and Nikolaj Bjørner. Z3:
an efﬁcient SMT solver. In Tools and Algorithms for
the Construction and Analysis of Systems, 14th Inter-
national Conference, TACAS 2008, Held as Part of the
Joint European Conferences on Theory and Practice
of Software, ETAPS 2008, Budapest, Hungary, March
29-April 6, 2008. Proceedings, volume 4963 of Lecture
Notes in Computer Science, pages 337–340. Springer,
2008.
[16] J. den Hartog, J. Verschuren, E. P. de Vink, J. de Vos,
and W. Wiersma. Pinpas: A tool for power analysis of
smartcards. In International Conference on Information
Security (SEC2003), pages 453–457, 2003.
[17] ETH Zurich.
https:
//pulp-platform.org/. Retrieved on Septem-
ber 15th, 2020.
Pulp platform.
[18] Sebastian Faust, Vincent Grosso, Santos Merino Del
Pozo, Clara Paglialonga, and François-Xavier Standaert.
Composable masking schemes in the presence of physi-
cal defaults & the robust probing model. IACR Trans.
Cryptogr. Hardw. Embed. Syst., 2018(3):89–120, 2018.
[19] Gilbert Goodwill, Benjamin Jun, Josh Jaffe, and Pankaj
Rohatgi. A testing methodology for side-channel resis-
tance validation. In NIST Non-Invasive Attack Testing
Workshop, 2011.
[20] Hannes Groß, Manuel Jelinek, Stefan Mangard, Thomas
Unterluggauer, and Mario Werner. Concealing secrets in
embedded processors designs. In Smart Card Research
and Advanced Applications - 15th International Con-
ference, CARDIS 2016, Cannes, France, November 7-9,
2016, Revised Selected Papers, volume 10146 of Lec-
ture Notes in Computer Science, pages 89–104. Springer,
2016.
USENIX Association
30th USENIX Security Symposium    1483
[21] Hannes Groß and Stefan Mangard. Reconciling d+1
masking in hardware and software. In Cryptographic
Hardware and Embedded Systems - CHES 2017 - 19th
International Conference, Taipei, Taiwan, September 25-
28, 2017, Proceedings, volume 10529 of Lecture Notes
in Computer Science, pages 115–136. Springer, 2017.
[22] Hannes Groß, Stefan Mangard, and Thomas Korak.
Domain-oriented masking: Compact masked hardware
implementations with arbitrary protection order.
In
Proceedings of the ACM Workshop on Theory of Im-
plementation Security, TIS@CCS 2016 Vienna, Austria,
October, 2016, page 3. ACM, 2016.