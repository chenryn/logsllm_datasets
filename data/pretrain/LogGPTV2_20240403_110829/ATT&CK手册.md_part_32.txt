### 3PARA RAT
如果DES解码失败，3PARA RAT将使用从字符串"HYF54"和“%9&jkMCXuiS”派生的8字节XOR密钥。

### HAMMERTOSS
在附加到图像文件之前，HAMMERTOSS命令会使用由硬编码值和当天推文中包含的字符串组成的密钥进行加密。要解密这些命令，调查员需要访问预期的恶意软件样本、当天的推文以及包含该命令的图像文件。

### Lazarus Group
一些Lazarus Group的恶意软件系列使用自定义代码加密C2流量，该代码结合了带有ADD操作的XOR和带有SUB操作的XOR。另一个Lazarus Group的恶意软件样本则对C2流量进行了XOR加密。此外，Lazarus Group还采用了一种名为FakeTLS的独特通信加密方法，模仿TLS但使用不同的加密技术，以避免SSL中间人解密攻击。

### Mosquito
Mosquito利用一种自定义加密算法，该算法结合了XOR与类似于Blum Blum Shub算法的流式加密。

### 检测
- 如果恶意软件使用对称密钥进行自定义加密，则可以从样本中提取算法和密钥，并用它们来解码网络流量，从而检测出恶意软件通信签名。
- 分析网络数据，寻找不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。
- 利用通常不具备网络通信功能或从未在网络中出现过的进程是可疑的。
- 检查数据包内容，以识别未遵循所使用端口预期协议行为的通信。

链接：[Custom Cryptographic Protocol](https://attack.mitre.org/techniques/T1024/)

## 数据编码
- 使用标准数据编码系统对命令和控制（C2）信息进行编码，包括ASCII、Unicode、Base64、MIME、UTF-8等二进制到文本及字符编码系统。
- 某些数据编码系统也可能导致数据压缩，如gzip。

### 缓解措施
- **网络入侵预防**：使用网络签名识别特定恶意软件的流量，以缓解网络级别的活动。签名基于协议内的唯一指示符，并可能随时间变化以逃避检测。
- 攻击者可能会更改工具的C2签名或构建协议，以规避常见防御工具的检测。

### 示例
- **Bankshot**：使用一系列字符和gzip对来自控制服务器的命令进行编码。
- **BS2005**：通过HTTP请求的消息体中的Base64编码进行通信。
- **Helminth**：对于基于HTTP的C2，使用base64编码并通过HTTP请求的"Cookie"字段发送；对于基于DNS的C2，将ASCII字符转换为十六进制值并以明文形式发送数据。

### 检测
- 分析不常见的数据流。
- 监控通常不具有网络通信功能或从未在网络中出现过的进程。
- 检查数据包内容，以识别不符合预期协议行为的通信。

链接：[Data Encoding](https://attack.mitre.org/techniques/T1132/)

## 数据混淆
- 命令和控制（C2）通信被隐藏（但不一定加密），以使内容更难以发现或解密，并减少通信的显眼程度。
- 方法包括向协议流量添加垃圾数据、使用隐写术、混合合法与C2通信流量，或采用非标准数据编码系统（如修改后的Base64编码）。

### 缓解措施
- **网络入侵防御**：使用网络签名识别特定恶意软件的流量，以缓解某些混淆活动。

### 示例
- **APT28**：为每个编码字符串添加“垃圾数据”，防止简单解码。
- **Axiom**：混合合法流量与C2通信流量，使网络流看起来合法；部分恶意软件也使用隐写术隐藏PNG图像文件中的通信。
- **Backdoor.Oldrea**：一些样本使用标准Base64 + bzip2，另一些则使用标准Base64 + 反向XOR + RSA-2048来解密C2服务器的数据。
- **BACKSPACE**：较新的变体使用自定义系统对C2通信进行编码。

### 检测
- 分析不常见的数据流。
- 监控通常不具有网络通信功能或从未在网络中出现过的进程。
- 检查数据包内容，以识别不符合预期协议行为的通信。

链接：[Data Obfuscation](https://attack.mitre.org/techniques/T1001/)

## 域前端
- 域前端利用CDN中的路由方案和托管多个域的服务，混淆HTTPS流量的目标或通过HTTPS隧道传输的流量。该技术涉及在TLS头的SNI字段和HTTP头的主机字段中使用不同域名。
- 一种变体即“无域”前端，利用空白的SNI字段，即使CDN尝试验证SNI和HTTP主机字段是否匹配，这可能允许前端工作。

### 缓解措施
- **执行预防**：通过应用程序白名单防止安装额外工具。
- **SSL / TLS检查**：检查HTTPS流量，分析看似域前端的连接。

### 示例
- **APT29**：使用Tor的温顺域前端插件隐藏C2流量的目的地。
- **meek**：使用域前端将网络流量的目的地伪装成同一CDN中托管的另一个服务器。

### 检测
- 检查HTTP标头的主机字段是否与HTTPS SNI匹配，或者与域名黑名单或白名单匹配。

链接：[Domain Fronting](https://attack.mitre.org/techniques/T1172/)

## 域生成算法
- 攻击者利用域生成算法（DGAs）动态确定C2流量的目的地，而不是依赖静态IP地址或域名列表。这样做的好处是使防御者更难阻止、跟踪或接管C2通道。
- DGA可以采用随机字符串的形式，或通过连接单词生成域名。许多DGA是基于时间的，为每个时间段生成不同的域。其他DGA则结合种子值，增加预测未来域的难度。
- 攻击者可以使用DGAs作为后备频道，在主C2服务器失去联系时重新建立控制。

### 缓解措施
- **网络入侵防御**：使用网络签名识别特定恶意软件的流量。
- 恶意软件研究人员可以通过反向工程确定未来域，但这是一项耗费时间和资源的工作。也可以使用本地DNS sinkhole来帮助防止基于DGA的C2。

### 示例
- **BONDUPDATER**：使用DGA与C2服务器通信。
- **CCBkdr**：如果与主C2服务器的通信丢失，可使用DGA作为后备通道。
- **CHOPSTICK**：通过连接列表中的单词生成域作为后备通道。
- **Ebury**：使用DGA为C2生成域名。
- **POSHSPY**：从单词列表中派生命令和控制URL。
- **Ursnif**：使用DGA为C2生成域名。

### 检测
- 检测伪随机生成的域名的方法包括频率分析、马尔可夫链、熵、字典词比例等。
- 检查最近注册或很少访问的域名。
- 已开发出机器学习方法来检测DGA域名，例如使用N-Gram方法或深度学习分类。

链接：[Domain Generation Algorithms](https://attack.mitre.org/techniques/T1483/)

## 后备通道
- 如果主要信道被泄露或不可访问，攻击者可以使用回退或备用通信信道，以维持可靠的C2并避免数据传输阈值。

### 缓解措施
- **网络入侵防御**：使用网络签名识别特定恶意软件的流量。

### 示例
- **BISCUIT**：包含辅助回退C2服务器。
- **BlackEnergy**：通过plus.google.com进行备份通信。
- **Cardinal RAT**：可通过多个C2主机和端口组合进行通信。
- **CHOPSTICK**：如果当前C2频道被破坏，可切换到新的C2频道。
- **Derusbi**：使用带有HTTP信标的备份通信方法。
- **DustySky**：有两个用于C2服务器的硬编码域，如果第一个没有回应，会尝试第二个。
- **HOPLIGHT**：有多个C2通道。
- **JHUHUGIT**：测试能否直接连接C2服务器，如果失败则尝试代理连接，最后注入浏览器代码。
- **Kazuar**：可以接受C2服务器的多个URL。
- **Kwampirs**：循环使用大量C2服务器，直到成功连接。
- **Lazarus Group**：SierraAlfa将数据发送到随机选择的硬编码C2服务器之一，如果传输失败则选择新的C2服务器再次尝试。
- **Linfo**：创建了一个后门程序，远程攻击者可以通过该后门更改C2服务器。
- **MiniDuke**：如果Twitter C2方法不起作用，使用谷歌搜索识别C2服务器。
- **MIS-Type**：首先尝试在C2的原始TCP套接字上使用Base64编码的网络协议，如果失败则回退到基于HTTP的辅助协议。
- **NETEAGLE**：尝试检测受感染主机是否配置为代理，如果是则通过HTTP POST请求发送信标，否则通过UDP/6000发送信标。