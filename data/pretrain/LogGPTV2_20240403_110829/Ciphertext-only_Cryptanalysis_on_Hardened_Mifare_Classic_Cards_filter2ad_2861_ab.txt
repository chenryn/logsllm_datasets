0x05
0x06
Access control
0x00
0x01
0x02
0x03
0x07
Key A
Access control
Key B
Sector trailer
Key A
Access control
Key B
Data block
Data block
Data block
Data block
0xf0
0x(cid:1)
Key A
Key B
Data block
Data block
To perform an action on a speciﬁc block, the reader must
ﬁrst authenticate itself for the sector containing that block.
The access conditions determine, for both keys separately,
which actions are allowed to be performed by the reader.
3.3 Notation
The mathematical symbols are deﬁned as follows:
Let F2 = {0, 1} be the ﬁeld of two elements (or the set
of Booleans). The vector space Fn
2 represents a bitstring of
length n. Given two bitstrings x and y, xy denotes their
concatenation.
Given a bitstring x ∈ Fn
2 , xi denotes the i-th bit of x,
where 0 ≤ i < n. Furthermore, x[i,j] denotes the substring of
x that starts at index i and ends at index j, inclusive. Thus,
representing the substring xixi+1 . . . xj. For instance, given
the bitstring x = 0x010203 ∈ F24
2 , then byte x[16,23] = 0x03
and the bits x22 = x23 = 1.
i=0 xi = x0 ⊕ x1 ⊕ x2 ⊕ x3.
The symbol ǫ represents the empty bitstring, ⊕ denotes
the bitwise exclusive-or (XOR) and x denotes the bitwise
complement of x. The large XOR symbol denotes an inner
XOR of multiple bits, i.e. a repeated logical exclusive-or.
For example L3
3.4 Cipher and Tag Nonces
At the heart of the cipher lies an LFSR, which, on every
step, shifts its contents one position to the left. The most
signiﬁcant bit is then discarded and a new bit is generated by
the feedback function and, during the authentication phase,
the input. Besides being shifted, all other bits remain unaf-
fected.
To increase readability, we adapt the same notation as
used in [GRVS09] and comply with their formalization. Con-
cretely, the cipher feedback, ﬁlter and tag-nonce related
functions of crypto1 are speciﬁed in Deﬁnition 3.1–3.4.
Deﬁnition 3.1. The cipher feedback function L : F48
2 → F2
is deﬁned by L(x0x1 . . . x47) := x0⊕x5⊕x9⊕x10⊕x12⊕x14⊕
x15⊕x17⊕x19⊕x24⊕x25⊕x27⊕x29⊕x35⊕x39⊕x41⊕x42⊕x43.
Deﬁnition 3.2. The ﬁlter function f : F48
by
2 → F2 is deﬁned
f (x0x1 . . . x47) := fc(fa(x9, x11, x13, x15),
fb(x17, x19, x21, x23), fb(x25, x27, x29, x31),
fa(x33, x35, x37, x39), fb(x41, x43, x45, x47)).
Here fa, fb : F4
2 → F2 and fc : F5
2 → F2 are deﬁned by
fa(y0, y1, y2, y3) := ((y0 ∨ y1) ⊕ (y0 ∧ y3)) ⊕ (y2 ∧ ((y0 ⊕ y1) ∨
y3)), fb(y0, y1, y2, y3) := ((y0∧y1)∨y2)⊕((y0⊕y1)∧(y2∨y3)),
and fc(y0, y1, y2, y3, y4) := (y0 ∨ ((y1 ∨ y4) ∧ (y3 ⊕ y4))) ⊕
((y0 ⊕ (y1 ∧ y3)) ∧ ((y2 ⊕ y3) ∨ (y1 ∧ y4))).
Because f (x0x1 . . . x47) only depends on x9, x11, . . . , x47,
2 → F2,
we shall overload notation and see f as a function F20
writing f (x0x1 . . . x47) as f (x9, x11, . . . , x47).
Deﬁnition 3.3. The pseudo-random generator feedback
function L16 : F16
2 → F2 is deﬁned by
L16(x0x1 . . . x15) := x0 ⊕ x2 ⊕ x3 ⊕ x5.
Deﬁnition 3.4. The successor function suc : F32
deﬁned by
2 → F32
2
is
suc(x0x1 . . . x31) := x1x2 . . . x31L16(x16x17 . . . x31) .
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2122 23 24 25 26 27 28 29 30 3132 33 34 35 36 37 38 39 40 4142 43 44 45 46 47
in
fa
fb
fa
fb
fb
fc
out
Figure 3.1: Structure of the crypto1 stream cipher
3.5 Authentication Protocol and Initialization
The authentication protocol was reverse engineered in
[GKGM+08]. During the anti-collision phase, the tag is se-
lected and sends its UID u to the reader. Then, the reader
asks to authenticate for a speciﬁc memory block b. Con-
sequently, the tag sends a challenge nT . From this point
on, the communication is encrypted, i.e. XOR-ed with the
keystream. The reader responds with its own challenge nR
followed by the answer aR = suc64(nT ) to the tag chal-
lenge. The authentication is concluded with the tag answer
aT = suc96(nR). At this point, both the reader and tag are
authenticated.
T ag
select
u
−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−
−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−
select u
sak
Reader
During the authentication
protocol, the internal state of
the stream cipher is initial-
ized.
Initially, the state is
set to the sector key. Then,
nT ⊕u is fed and the feedback
is applied accordingly. Sub-
sequently, nR is fed and feed-
back is applied. Since the
communication is encrypted
starting from nR, the latter
bits of nR are inﬂuenced by
the former bits of nR. See
Deﬁnition 3.5 for a more for-
mal description of the initialization process.
auth b
−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−
nT
{nR}{aR}
−−−−−−−−−−−−−−→
{aT }
←−−−−−−−−−−−−−−
We deﬁne the LFSR-stream, which allows us to conve-
niently address internal states as a whole and individual
bits at any point in time. Below we deﬁne the LFSR-stream
a0a1 . . . and keystream ks0ks1 . . . . We broadly employ the
same notation as in [GRVS09], which is where the deﬁni-
tions are taken from. We will be using these deﬁnitions
extensively throughout this paper.
Deﬁnition 3.5. Given a key k = k0k1 . . . k47 ∈ F48
2 , a tag
nonce nT = nT0 nT1 . . . nT31 ∈ F32
2 , a UID u = u0u1 . . . u31 ∈
2 , and a reader nonce nR = nR0 nR1 . . . nR31 ∈ F32
F32
2 , the in-
ternal state of the cipher at time i is αi := aiai+1 . . . ai+47 ∈
F48
2 .
Here the ai ∈ F2 are given by
ai := ki
a48+i := L(ai, . . . , a47+i) ⊕ nTi ⊕ ui
a80+i := L(a32+i, . . . , a79+i) ⊕ nRi
a112+i := L(a64+i, . . . , a111+i)
∀i ∈ [0, 47]
∀i ∈ [0, 31]
∀i ∈ [0, 31]
∀i ∈ N.
Furthermore, we deﬁne the keystream bit ksi ∈ F2 at time
i by
ksi := f (aia1+i . . . a47+i)
∀i ∈ N.
We denote encryptions by {·} and deﬁne {nRi }, {aRi } ∈ F2
by
{nRi } := nRi ⊕ ks32+i
{aRi } := aRi ⊕ ks64+i
∀i ∈ [0, 31]
∀i ∈ [0, 31].
Note that the ai, αi, ksi{nRi }, and {aRi } are formally
functions of k, nT , u, and nR. Rather than making this
explicit by writing, e.g. ai(k, nT , u, nR), we just write ai,
where k, nT , u, and nR are clear from the context.
Nested authentication When a reader is authenticated for
a sector and hence communicating encrypted, a subsequent
authentication request for another sector is also sent en-
crypted. At this point, the internal state of the cipher is
initialized with the new key, which corresponds with the sec-
tor where the authentication is requested for. Furthermore,
the authentication protocol is slightly diﬀerent, since tag
challenge nT is also sent encrypted, i.e. {nT }. Concretely,
the initialization is similar to Deﬁnition 3.5, except that the
bits of {nT } are decrypted before they are loaded into the
internal state as shown in Deﬁnition 3.6. We refer to this
procedure as a nested authentication. The attack proposed
in this paper only concerns the nested authentication.
Deﬁnition 3.6. In the situation from Deﬁnition 3.5, we
deﬁne {nTi } ∈ F2 by {nTi } := nTi ⊕ ksi∀i ∈ [0, 31]
4 Known Vulnerabilities
In this section we highlight the various mifare Classic vul-
nerabilities which are described in the scientiﬁc literature.
4.1 Short Key Length
The key size of 48 bits is too small to prevent a success-
ful brute force attack within reasonable time. Initially, this
was compensated for by the delay introduced by the com-
munication and authentication procedure. Every attempt
would take about 6 milliseconds. Hence, an online attack
on a single card for a single sector would take more than
44 thousand years, searching through all 248 possible keys.
However, when the crypto1 algorithm was exposed, an of-
ﬂine brute force attack could be mounted, eliminating the
delay caused by the communication with the card. In 1996 it
was already strongly recommended against using symmet-
ric cryptosystems that use 56 bits keys [BDR+96]. Nohl
and Pl¨otz stated in December 2007 [NP07] that a $100 key
cracker will ﬁnd a key in approximately 1 week. It can even
be done much faster when trading memory for time.
4.2 Predictable Nonces
It is commonly known that proper pseudo-random number
generators are essential for cryptographic protocols to pro-
vide proper security. The 32 bits nonce used by the mifare
Classic is generated by a 16 bit LFSR, meaning the entropy
of the nonces is only 16 bits, which is clearly insuﬃcient.
Given its structure, the sequence of nonces is repeated ev-
ery 216 − 1 cycles. On top of that, whenever the card is
powered up, the LFSR is reset to a known state. Hence,
if an adversary carefully keeps the time constant between
powering up the card and requesting a nonce, the nonce will
be constant. This essentially removes all the randomness
introduced by the card from the authentication.
This weakness is exploited in many of the known at-
tacks. Furthermore, besides the attack described in Chiu
et al. [CHC+14], all card-only attacks proposed in the liter-
ature exploit this particular implementation mistake.
The attack presented in this paper does not exploits on
this vulnerability and works on hardened mifare Classic
cards that use a proper PRNG.
4.3 The Nested Authentication
Once a single key of a single sector is known, an adversary
can authenticate against that sector, and while communicat-
ing (encrypted) with the tag, send another authentication
request for a diﬀerent sector and/or key. When this authen-
tication command has been processed, the internal cipher
state is set to the key of the new sector and the authenti-
cation protocol depicted in Section 3.5 starts again. This
time, though, the challenge generated by the tag is also sent
encrypted.
In case the card has the weak pseudo-random number gen-
erator vulnerability mentioned above, and hence allowing
an adversary to predict the nonce, the nested authentica-
tion can be used to recover 32 bits of keystream by only
wirelessly interacting with a card. This phenomenon was
exploited in [GRVS09] in one of their attacks, which is re-
ferred to as the nested attack.
The attack presented in this paper relies on the nested
authentication, since, if we assume are concerned with a
hardened card and with no access to a genuine reader, it
is the only channel through which secret key information is
leaked.
4.4 Parity bits
The mifare Classic sends a parity bit for each byte it trans-
mits. Contrary to the ISO/IEC 14443-A standard [ISO01],
the data link layer and communication layer are mixed.
Rather than computing parity bits over the bits that are
sent over the air, i.e., the ciphertext, they are computed over
the plaintext. On top of that, the parity bits are sent en-
crypted with the same keystream bit that is used to encrypt
the next bit of plaintext. See Figure 4.1 for an illustration
of this property.
plaintext
b0
b1
b2
b3
b4
b5
b6
b7
p0
b8
b9
b10
b11
b12
b13
b14
b15
keystream
ks0
ks1
ks2
ks3
ks4
ks5
ks6
ks7
ks8
ks9
ks10
ks11
ks12
ks13
ks14
ks15
Figure 4.1: The encryption of parity bits
Given this property an adversary can learn information