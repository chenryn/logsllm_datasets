dictionary. Then the attacker can match these two types of
graphs and the matches can give the attacker better knowl-
edge about the encrypted ontologies.
Nevertheless, since N (the size of the attacker’s dictio-
nary) is typically much larger than L (the size of an ontol-
ogy), the False Guess Probability (the probability that the
attacker makes a wrong guess about the ontology) is typi-
cally very high. Assume the graph built from an encrypted
ontology matches X graphs built from the dictionary, the
False Guess Probability is: Pf g = 1 − 1/X. Here X is a
number between 1 and „ N
L «. Note that X is usually a
large number.
Using the ontology mapping table to correlate or “merge”
the two ontologies for Organizations A and B before the

matching may help reduce Pf g by decreasing the upper bound
of X to „
N
LA + LB «. However, the attacker would have
diﬃculty in telling which concepts belong to which ontology
when a good match is obtained.
Second, a role hierarchy can be inferred in a similar way
because an encrypted role hierarchy tells the true relation-
ships among encrypted roles.
Third, the probability that the attacker can guess a per-
mission pi (of an access control policy) correctly is depen-
dent upon the probability that he can guess an ontology
correctly, namely 1 − Pf g.
Finally, the probability that the attacker can guess an at-
tribute of the database schema of an organization correctly
is: Pds = (1 − Pf g) × Pso. Here 1 − Pf g is the probability
that the attacker can guess the organization’s ontology cor-
rectly. However, due to schema obfuscation, even if the at-
tacker guesses the ontology correctly, he still needs to guess
the “real” schema attribute involved in the original query
among a set of equivalent terms (or concepts) that are used
to obfuscate the attribute; and 1 − Pso is the correspond-
ing false guess probability. Assume the average size of an
equivalence class (of concepts) in an ontology is K, then
Pso = 1/K.
Mode B. In Mode B, we assume the attacker knows the
identity of each organization. Furthermore, the attacker has
good pre-knowledge about the role hierarchy and ontology
of the organization. In addition, we assume the attacker has
a log of the previous queries.
Now, inferring an ontology (or a role hierarchy) is much
easier not only because the attacker’s pre-knowledge can al-
low him to do better ontology graph matching, but also
because the attacker can do frequency-based attacks. By
monitoring a history of requests across organizations, the
attacker knows the most frequently used terms (though en-
crypted) and roles, among others. Such frequencies can be
matched against the attacker’s pre-knowledge about term
(or role) usage frequencies to infer the cleartext of an en-
crypted term. After a couple of key terms are inferred, the
whole ontology (graph) can be inferred with good accuracy,
since the conditional inference probability of a term based
on some known, relevant terms is typically much higher than
Pf g in Mode A.
Moreover, even after the ontologies (and role hierarchies)
are disclosed, it is still diﬃcult to infer the database schema
because of schema obfuscation. Every request arriving at
the Mediator must have been obfuscated by the requestor;
and all results schema are in the obfuscated format. Hence
the attackers false guess probability will be 1 − 1/K.
Mode C. In Mode C, after breaking into organization
A and the Mediator, the attacker knows all the metadata
about A and his goal is to infer the metadata about organi-
zation B. Frequency-based attacks are still eﬀective so that
B’s ontology (and role hierarchy) can be inferred with good
accuracy. In addition, inferring B’s access control policy is
possible because the attacker can know if a request is au-
thorized or denied. However, due to schema obfuscation, it
is still diﬃcult for the attacker to infer the syntactic access
control policy of B. Similarly, the false guess probability in
inferring B’s database schema is still 1 − 1/K (the same as
Mode B).
6. EXPERIMENTS AND RESULTS
We have implemented a prototype of PACT. We pro-
grammed PACT prototype in Java; and Jena 2 Semantic
Web Framework is applied to handle the ontology ﬁles. In
particular, the prototype is implemented with Sun Java Web
Service Developer Pack 1.5 with Apache Tomcat 5.0.19 Web
Container. The Java Virtual Machine used is Sun JDK ver-
sion 1.5.0-b64. We performed several experiments on the
FBI-CIA information sharing scenario, where both FBI and
CIA have an individual organizational database managed by
MySQL DBMS version 4.1.8. Moreover, three Web services
are running in three computers (connected by a 100 Mbps
LAN switch) on behalf of FBI, CIA, and the mediator, re-
spectively. The detailed speciﬁcations of the experimental
testbed are in Table 1. Each computer is equipped with an
IDE hard drive with about 45 MB/second sequential read
throughput.
The communications among software components are im-
plemented by JAX-RPC. There are three types of imple-
mentation to create JAX-RPC clients: static stub, dynamic
proxy, and dynamic invocation interface (DII). Clients use
either static stub or dynamic relied on pre-generated imple-
mentation-speciﬁc classes. Therefore, in our implementa-
tion, we use dynamic invocation interface for ﬂexible system
design and easy deployment.
Metadata and data sets: We generated the database
schema and data sets for both FBI and CIA databases based
an information sharing scenario. In general, each table con-
tains 50 to 10000 records depending on its functionality, and
the corresponding access control rules are stored in a sepa-
rate authorization table.
We designed the organizational ontology for each organi-
zation. Each ontology has about 20 classes and about 300
triples if they are represented in N-TRIPLE format [1]. Each
organization has 5 roles. Each role has diﬀerent privileges
to access the tables in database.
Our evaluation benchmark consists of four types of queries.
We generated 25 queries for each type. Each query is exe-
cuted 10 times and we calculate the mean execution time for
each. Finally, the query result data size ranges from 0.31KB
to 1,359KB.
The four types of queries are:
(1) Basic query: These queries only involve semantic trans-
lations. For example, when an FBI agent poses a remote
query (using FBI’s ontology):
select username, passwd from Person where username =’john031’;.
After the mediator performs a semantic translation, it be-
comes:
select userid, pwd from Personnel where userid =’john031’;.
(2) Query using complex mapping rules: These queries in-
volve query folding. For example, an FBI agent’s across-
Table 1: System speciﬁcations
Tier
CPU (GHz)
RAM
Linux Kernel
Database tables
Roles
Ontology (triples)

FBI
Middleware
CIA
P4 2.53 Dual Xeon 1.8 P4 2.4
768MB
512MB
512MB
2.6.9
15
5
289
2.6.9
-
-
-
2.6.8
18
5
325
organization query can be originally written as:
select phonenumber from PersonDescription where ID =
101;
After semantic translation and expansion by the mediator,
the query becomes:
select number from PersonProﬁle, Cell where PersonPro-
ﬁle.ID = Cell.ID and PersonProﬁle.ID = 101;
(3)Query with data conversion: These queries contain values
or columns that PACT needs to translate. For example,
when a FBI agent issues the following query:
select ID from PersonDescription where height > 5.9;
Since in FBI the metric for height is in feet, but the height
in CIA is in centimeter, the translated query will be:
select ID from PersonProﬁle where height > 179.83;
(4) Query using complex mapping rules and data conversion:
These queries need to be translated using complex mapping
rules and data must be converted using mapping functions.
For example, the query:
select fullname, phonenumber from PersonDescription where
height > 5.9;
will be translated to:
select ﬁrstname, lastname, number from PersonProﬁle, Cell
where PersonProﬁle.ID = Cell.ID and height > 179.83;
6.1 End-to-End Response Time
The mean end-to-end response time is determined by the
average time used to process a cross-organization query when
multiple such queries are processed. We measure the re-
sponse time as the time elapsed since a user requested a
query until she got the response to the query from PACT.
The response time includes both computation and commu-
nication costs. encryption and decryption are also required.
To compare the overhead of PACT processing, we have
implemented a simple direct query system using the same
architecture as PACT where the requestor sends a query
to the responder via the mediator but does not perform
semantic mediation and access control because the requestor
uses the database schema of the responding organization.
Access control is done by the responding organization by
checking the role’s privilege.
Result data size: The results in Fig. 2(a) show that,
in general, when the result size increases, the response time
of PACT increases. In this ﬁgure and in the rest of the ﬁg-
ures in this paper, we refer to PACT’s algorithm as SACE
(semantic access control enabling algorithm). The results
show that in the absence of encryption, PACT only adds
a small overhead during the query processing and the im-
pact on the mean response time is nearly a linear function
of result data size. Furthermore, the encryption computa-
tion dominated the overall process time, and the overhead
caused by semantic-level access control check is relatively
small. However, despite the overhead of key management
and encryption, we show that the performance of PACT
was not seriously degraded and we believe that the response
times we observed are acceptable given the security beneﬁts.
The Number of users: We ﬁx the size of each query’s
result to about 100KB. That is about 50 to 100 records in
our database depending on which tables are queried. Fig.
2(b) shows the average response time when the number of
users in the system, we see that in this case, the increases
response time in all systems increases. This result shows
that PACT has good scalability in a multi-user environment.
The size of database and ontology: The results in
both Fig. 2(a) and Fig. 2(b) show that the eﬀect of doubling
the database size on the response time is very small and can
be neglected. The results show that PACT can easily be
extended to large database systems in practical applications.
Types of queries: Finally, we compare diﬀerent query
types and evaluate the mediating process. The impact of dif-
ferent query types on end-to-end response time is evaluated
by sending 25 queries from each type of query and calcu-
lating the mean response time for each query. As shown in
Fig. 2(c), the mean response time of type 1 and type 2 (or
type 3 and type 4) query are very close. The closeness of
the response times indicates that the impact of semantic ex-
pansion on the system is very small. However, the overhead
of data conversion increases with the size of the result data.
This explains why the response time for type 3 and type 4
queries are higher than type 1 and type 2.
6.2 Component Throughput
In this section, we focus on the performance of the three
key components of PACT, namely the information-sharing
stub at the requesting organization, the middleware at the
mediator, and the stub at the responding organization. We
measure the throughputs (in terms of queries per second)
of the three components as follows. We get the through-
put measurements by injecting 40 queries on behalf of FBI
agents (where the four query types are mixed, each type has
10 queries), then we measure the total processing time (i.e.,
both the time consumed in processing the request and the
time consumed in processing the results are counted) con-
sumed by each component. For example, if in total it takes t
seconds for the mediator to process n queries, the mediator’s
throughput is n/t.
Result data size and number of users: In Fig. 3(a),
the non-encrypted system outperforms the encrypted sys-
tem. Fig. 3(b) shows the impact of the number of users on
the throughput of each component. The throughput of me-
diators in both systems are very close. Because encryption
takes signiﬁcant time, the mediator becomes the bottleneck
in the non-encrypted PACT system. Since PACT is a very
ﬂexible system, we can add more mediators to the system
to improve the overall performance. Load balancing can be
applied when there are multiple mediators are available.
The number of access control rules: Fig. 3(c) shows
the impact of the number of access control rules on the medi-
ator’s performance. The processing time increases linearly
as the number of the access control rules increases.
It is
because the mediation process is a linear algorithm. We
also performed the same test on the mediator to process
non-encrypted data. As expected, the mediator is not sig-
niﬁcantly aﬀected where processing encrypted data. Finally,
we use RDQL in the Jena toolkit to query the ontology ﬁles,
and our experiments show that the size of ontology ﬁles has
almost no impact on the processing time of the mediator as
we doubled the ontology size.
7. RELATED WORK
There is a rich literature on access-control in informa-
tion interoperation systems. For example, Gong and Qian
[12, 11] have discussed the complexity and composability is-
sues in secure interoperation. Ahn and Mohan [5] have im-

8000
6000
4000
2000
)
s
m
(
e
m
i
t
e
s
n
o
p
s
e
r
n
a
e
M
0
0
PACT
Non-encrypted PACT
Direct query
PACT - double database size
PACT - double ontology size
PACT
Non-encrypted PACT
Direct query
PACT - double database size
PACT - double ontology size
8000
6000
4000
2000
)
s
m
(
e
m
i
t
e
s
n
o
p
s
e
r
n
a
e