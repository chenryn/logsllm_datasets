I'm currently using Julia 1.7.0 and discovered some weird behaviour between
`minimum` and `Set{CartesianIndex}`
    julia> versioninfo()
    Julia Version 1.7.0
    Commit 3bf9d17731 (2021-11-30 12:12 UTC)
    Platform Info:
      OS: Linux (x86_64-pc-linux-gnu)
      CPU: Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz
      WORD_SIZE: 64
      LIBM: libopenlibm
      LLVM: libLLVM-12.0.1 (ORCJIT, skylake)
    Environment:
      JULIA_LOAD_PATH = /home/doudou/Documents/Code/AdventofCode:@:@v#.#:@stdlib
The minimal reproducible code is the following:
    s = Set(CartesianIndices((2, 2)))
    #Set{CartesianIndex{2}} with 4 elements:
    #  CartesianIndex(2, 1)
    #  CartesianIndex(1, 1)
    #  CartesianIndex(2, 2)
    #  CartesianIndex(1, 2)
    minimum(s)
    #CartesianIndex(1, 1)
    delete!(s, CartesianIndex(1, 1))
    #Set{CartesianIndex{2}} with 3 elements:
    #  CartesianIndex(2, 1)
    #  CartesianIndex(2, 2)
    #  CartesianIndex(1, 2)
    minimum(s)
    #CartesianIndex(1, 1)
    minimum(s) ∈ s
    #false
    pop!(s)
    #Any element of s randomly
    minimum(s) ∈ s
    #true
This does not happens with other type (tried `Int` and some custom struct)
inside the set and it seems a `pop!` puts everything back in order.