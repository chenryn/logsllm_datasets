/* The vtable pointer is not in the expected section. Use t
he
slow path, which will terminate the process if necessary.
*/
_IO_vtable_check ();
return vtable;
}
// libio/vtables.c
void attribute_hidden
_IO_vtable_check (void)
{
#ifdef SHARED
/* Honor the compatibility flag. */
void (*flag) (void) = atomic_load_relaxed (&IO_accept_foreign_
vtables);
#ifdef PTR_DEMANGLE
PTR_DEMANGLE (flag);
#endif
if (flag == &_IO_vtable_check)
return;
686
4.13 利用 _IO_FILE 结构
/* In case this libc copy is in a non-default namespace, we al
ways
need to accept foreign vtables because there is always a
possibility that FILE * objects are passed across the linki
ng
boundary. */
{
Dl_info di;
struct link_map *l;
if (_dl_open_hook != NULL
|| (_dl_addr (_IO_vtable_check, &di, &l, NULL) != 0
&& l->l_ns != LM_ID_BASE))
return;
}
#else /* !SHARED */
/* We cannot perform vtable validation in the static dlopen ca
se
because FILE * handles might be passed back and forth acros
s the
boundary. Therefore, we disable checking in this case. */
if (__dlopen != NULL)
return;
#endif
__libc_fatal ("Fatal error: glibc detected an invalid stdio ha
ndle\n");
}
所有的 libio vtables 被放进了专用的只读的 __libc_IO_vtables 段，以使它们
在内存中连续。在任何间接跳转之前，vtable 指针将根据段边界进行检查，如果指
针不在这个段，则调用函数 _IO_vtable_check() 做进一步的检查，并且在必要
时终止进程。
libc-2.24 利用技术
_IO_str_jumps
687
4.13 利用 _IO_FILE 结构
在防御机制下通过修改虚表的利用技术已经用不了了，但同时出现了新的利用技
术。既然无法将 vtable 指针指向 __libc_IO_vtables 以外的地方，那么就在
__libc_IO_vtables 里面找些有用的东西。比如 _IO_str_jumps （该符号在
strip后会丢失）：
// libio/strops.c
const struct _IO_jump_t _IO_str_jumps libio_vtable =
{
JUMP_INIT_DUMMY,
JUMP_INIT(finish, _IO_str_finish),
JUMP_INIT(overflow, _IO_str_overflow),
JUMP_INIT(underflow, _IO_str_underflow),
JUMP_INIT(uflow, _IO_default_uflow),
JUMP_INIT(pbackfail, _IO_str_pbackfail),
JUMP_INIT(xsputn, _IO_default_xsputn),
JUMP_INIT(xsgetn, _IO_default_xsgetn),
JUMP_INIT(seekoff, _IO_str_seekoff),
JUMP_INIT(seekpos, _IO_default_seekpos),
JUMP_INIT(setbuf, _IO_default_setbuf),
JUMP_INIT(sync, _IO_default_sync),
JUMP_INIT(doallocate, _IO_default_doallocate),
JUMP_INIT(read, _IO_default_read),
JUMP_INIT(write, _IO_default_write),
JUMP_INIT(seek, _IO_default_seek),
JUMP_INIT(close, _IO_default_close),
JUMP_INIT(stat, _IO_default_stat),
JUMP_INIT(showmanyc, _IO_default_showmanyc),
JUMP_INIT(imbue, _IO_default_imbue)
};
// libio/libioP.h
#define JUMP_INIT_DUMMY JUMP_INIT(dummy, 0), JUMP_INIT (dummy2,
0)
这个 vtable 中包含了一个叫做 _IO_str_overflow 的函数，该函数中存在相对地
址的引用（可伪造）：
688
4.13 利用 _IO_FILE 结构
int
_IO_str_overflow (_IO_FILE *fp, int c)
{
int flush_only = c == EOF;
_IO_size_t pos;
if (fp->_flags & _IO_NO_WRITES)
return flush_only ? 0 : EOF;
if ((fp->_flags & _IO_TIED_PUT_GET) && !(fp->_flags & _IO_CURR
ENTLY_PUTTING))
{
fp->_flags |= _IO_CURRENTLY_PUTTING;
fp->_IO_write_ptr = fp->_IO_read_ptr;
fp->_IO_read_ptr = fp->_IO_read_end;
}
pos = fp->_IO_write_ptr - fp->_IO_write_base;
if (pos >= (_IO_size_t) (_IO_blen (fp) + flush_only))
// 条件 #define _IO_blen(fp) ((fp)->_IO_buf_end - (
fp)->_IO_buf_base)
{
if (fp->_flags & _IO_USER_BUF) /* not allowed to enlarge */
return EOF;
else
{
char *new_buf;
char *old_buf = fp->_IO_buf_base;
size_t old_blen = _IO_blen (fp);
_IO_size_t new_size = 2 * old_blen + 100;
// 通过计算 new_size 为 "/bin/sh\x00" 的地址
if (new_size _s._allocate_buffer)
(new_size); // 在这个相对地址放上 system 的地址，即 system("/bin/
sh")
[...]
689
4.13 利用 _IO_FILE 结构
// libio/strfile.h
struct _IO_str_fields
{
_IO_alloc_type _allocate_buffer;
_IO_free_type _free_buffer;
};
struct _IO_streambuf
{
struct _IO_FILE _f;
const struct _IO_jump_t *vtable;
};
typedef struct _IO_strfile_
{
struct _IO_streambuf _sbf;
struct _IO_str_fields _s;
} _IO_strfile;
所以可以像下面这样构造：
fp->_flags = 0
fp->_IO_buf_base = 0
fp->_IO_buf_end = (bin_sh_addr - 100) / 2
fp->_IO_write_ptr = 0xffffffff
fp->_IO_write_base = 0
fp->_mode = 0
有一点要注意的是，如果 bin_sh_addr 的地址以奇数结尾，为了避免除法向下取整
的干扰，可以将该地址加 1。另外 system("/bin/sh") 是可以用 one_gadget 来代替
的，这样似乎更加简单。
完整的调用过程： malloc_printerr -> __libc_message -> __GI_abort ->
_IO_flush_all_lockp -> __GI__IO_str_overflow 。
与传统的 house-of-orange 不同的是，这种利用方法不再需要知道 heap 的地址，
因为 _IO_str_jumps vtable 是在 libc 上的，所以只要能泄露出 libc 的地址就可
以了。
690
4.13 利用 _IO_FILE 结构
在这个 vtable 中，还有另一个函数 _IO_str_finish ，它的检查条件比较简单：
void
_IO_str_finish (_IO_FILE *fp, int dummy)
{
if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF))
// 条件
(((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base);
// 在这个相对地址放上 system 的地址
fp->_IO_buf_base = NULL;
_IO_default_finish (fp, 0);
}
只要在 fp->_IO_buf_base 放上 "/bin/sh" 的地址，然后设置 fp->_flags = 0
就可以了绕过函数里的条件。
那么怎样让程序进入 _IO_str_finish 执行呢， fclose(fp) 是一条路，但似
乎有局限。还是回到异常处理上来，在 _IO_flush_all_lockp 函数中是通过
_IO_OVERFLOW 执行的 __GI__IO_str_overflow ，而 _IO_OVERFLOW 是根据
__overflow 相对于 _IO_str_jumps vtable 的偏移找到具体函数的。所以如果
我们伪造传递给 _IO_OVERFLOW(fp) 的 fp 是 vtable 的地址减去 0x8，那么根据
偏移，程序将找到 _IO_str_finish 并执行。
所以可以像下面这样构造：
fp->_mode = 0
fp->_IO_write_ptr = 0xffffffff
fp->_IO_write_base = 0
fp->_wide_data->_IO_buf_base = bin_sh_addr （也就是 fp-
>_IO_write_end）
fp->_flags2 = 0
fp->_mode = 0
完整的调用过程： malloc_printerr -> __libc_message -> __GI_abort ->
_IO_flush_all_lockp -> __GI__IO_str_finish 。
_IO_wstr_jumps
691
4.13 利用 _IO_FILE 结构
_IO_wstr_jumps 也是一个符合条件的 vtable，总体上和上面讲的
_IO_str_jumps 差不多：
// libio/wstrops.c
const struct _IO_jump_t _IO_wstr_jumps libio_vtable =
{
JUMP_INIT_DUMMY,
JUMP_INIT(finish, _IO_wstr_finish),
JUMP_INIT(overflow, (_IO_overflow_t) _IO_wstr_overflow),
JUMP_INIT(underflow, (_IO_underflow_t) _IO_wstr_underflow),
JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),
JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),
JUMP_INIT(xsputn, _IO_wdefault_xsputn),
JUMP_INIT(xsgetn, _IO_wdefault_xsgetn),
JUMP_INIT(seekoff, _IO_wstr_seekoff),
JUMP_INIT(seekpos, _IO_default_seekpos),
JUMP_INIT(setbuf, _IO_default_setbuf),
JUMP_INIT(sync, _IO_default_sync),
JUMP_INIT(doallocate, _IO_wdefault_doallocate),
JUMP_INIT(read, _IO_default_read),
JUMP_INIT(write, _IO_default_write),
JUMP_INIT(seek, _IO_default_seek),
JUMP_INIT(close, _IO_default_close),
JUMP_INIT(stat, _IO_default_stat),
JUMP_INIT(showmanyc, _IO_default_showmanyc),
JUMP_INIT(imbue, _IO_default_imbue)
};
利用函数 _IO_wstr_overflow ：
_IO_wint_t
_IO_wstr_overflow (_IO_FILE *fp, _IO_wint_t c)
{
int flush_only = c == WEOF;
_IO_size_t pos;
if (fp->_flags & _IO_NO_WRITES)
return flush_only ? 0 : WEOF;
if ((fp->_flags & _IO_TIED_PUT_GET) && !(fp->_flags & _IO_CURR
692
4.13 利用 _IO_FILE 结构
ENTLY_PUTTING))
{
fp->_flags |= _IO_CURRENTLY_PUTTING;
fp->_wide_data->_IO_write_ptr = fp->_wide_data->_IO_read_p
tr;
fp->_wide_data->_IO_read_ptr = fp->_wide_data->_IO_read_en
d;
}
pos = fp->_wide_data->_IO_write_ptr - fp->_wide_data->_IO_writ
e_base;
if (pos >= (_IO_size_t) (_IO_wblen (fp) + flush_only)) //
条件 #define _IO_wblen(fp) ((fp)->_wide_data->_IO_buf_end - (fp)-
>_wide_data->_IO_buf_base)
{
if (fp->_flags2 & _IO_FLAGS2_USER_WBUF) /* not allowed to
enlarge */
return WEOF;
else
{
wchar_t *new_buf;
wchar_t *old_buf = fp->_wide_data->_IO_buf_base;
size_t old_wblen = _IO_wblen (fp);
_IO_size_t new_size = 2 * old_wblen + 100; //
使 new_size * sizeof(wchar_t) 为 "/bin/sh" 的地址
if (__glibc_unlikely (new_size  SIZE_MAX / sizeof (wch
ar_t)))
return EOF;
new_buf
= (wchar_t *) (*((_IO_strfile *) fp)->_s._allocate_buffe
r) (new_size
* sizeof (wchar_t));
// 在这个相对地址放上 system 的地址
[...]
利用函数 _IO_wstr_finish ：
693
4.13 利用 _IO_FILE 结构
void
_IO_wstr_finish (_IO_FILE *fp, int dummy)
{
if (fp->_wide_data->_IO_buf_base && !(fp->_flags2 & _IO_FLAGS2
_USER_WBUF)) // 条件
(((_IO_strfile *) fp)->_s._free_buffer) (fp->_wide_data->_IO
_buf_base); // 在这个相对地址放上 system 的地址
fp->_wide_data->_IO_buf_base = NULL;
_IO_wdefault_finish (fp, 0);
}
最新动态
来自 glibc 的 master 分支上的一次 commit，不出意外应该会出现在 libc-2.28 中。
该方法简单粗暴，用操作堆的 malloc 和 free 替换掉原来在 _IO_str_fields 里
的 _allocate_buffer 和 _free_buffer 。由于不再使用偏移，就不能再利用
__libc_IO_vtables 上的 vtable 绕过检查，于是上面的利用技术就都失效
了。：（
CTF 实例
请查看章节 6.1.24、6.1.25 和 6.1.26。另外在章节 3.1.8 中也有相关内容。
附上偏移，构造时候方便一点：
694
4.13 利用 _IO_FILE 结构
0x0 _flags
0x8 _IO_read_ptr
0x10 _IO_read_end
0x18 _IO_read_base