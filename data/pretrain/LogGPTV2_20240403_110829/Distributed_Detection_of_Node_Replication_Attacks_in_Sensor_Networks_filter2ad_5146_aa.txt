title:Distributed Detection of Node Replication Attacks in Sensor Networks
author:Bryan Parno and
Adrian Perrig and
Virgil D. Gligor
Distributed Detection of Node Replication Attacks
in Sensor Networks∗
Bryan Parno†
Adrian Perrig‡
Carnegie Mellon University
{parno, perrig}@cmu.edu
Virgil Gligor§
University of Maryland
PI:EMAIL
Abstract
1 Introduction
The low-cost, off-the-shelf hardware components in
unshielded sensor-network nodes leave them vulnera-
ble to compromise. With little effort, an adversary may
capture nodes, analyze and replicate them, and sur-
reptitiously insert these replicas at strategic locations
within the network. Such attacks may have severe con-
sequences; they may allow the adversary to corrupt net-
work data or even disconnect signiﬁcant parts of the net-
work. Previous node replication detection schemes de-
pend primarily on centralized mechanisms with single
points of failure, or on neighborhood voting protocols
that fail to detect distributed replications. To address
these fundamental limitations, we propose two new al-
gorithms based on emergent properties [17], i.e., prop-
erties that arise only through the collective action of
multiple nodes. Randomized Multicast distributes node
location information to randomly-selected witnesses, ex-
ploiting the birthday paradox to detect replicated nodes,
while Line-Selected Multicast uses the topology of the
network to detect replication. Both algorithms pro-
vide globally-aware, distributed node-replica detection,
and Line-Selected Multicast displays particularly strong
performance characteristics. We show that emergent al-
gorithms represent a promising new approach to sensor
network security; moreover, our results naturally extend
to other classes of networks in which nodes can be cap-
tured, replicated and re-inserted by an adversary.
is sponsored by the Department of Defense.
∗The views and conclusions contained in this paper are those of the
authors and should not be interpreted as representing the ofﬁcial poli-
cies, either expressed or implied, of Bosch, Carnegie Mellon Univer-
sity, NSF, the Army Research Ofﬁce, the Army Research Laboratory,
the U.S. Government or any of its agencies.
†Bryan Parno is supported in part by an NDSEG Fellowship, which
‡This research was supported in part by CyLab at Carnegie Mellon
under grant DAAD19-02-1-0389 from the Army Research Ofﬁce, and
grant CAREER CNS-0347807 from NSF, and by a gift from Bosch.
§Virgil Gligor was supported in part by the U.S. Army Research
Ofﬁce under Award No. DAAD19-01-1-0494, and by the U.S. Army
Research Laboratory under Cooperative Agreement DAAD19-01-2-
0011 for the Collaborative Technology Alliance for Communications
and Networks.
The ease of deploying sensor networks contributes to
their appeal. They can quickly scale to large conﬁgura-
tions, since administrators can simply drop new sensors
into the desired locations in the existing network. To
join the network, new nodes require neither administra-
tive intervention nor interaction with a base station; in-
stead, they typically initiate simple neighbor discovery
protocols [6, 13] by broadcasting their prestored creden-
tials (e.g., their unique ID and/or the unique ID of their
keys).
Unfortunately, sensor nodes typically employ low-
cost commodity hardware components unprotected by
the type of physical shielding that could preclude ac-
cess to a sensor’s memory, processing, sensing and com-
munication components. Cost considerations make it
impractical to use shielding that could detect pressure,
voltage, and temperature changes [11, 33, 36] that an
adversary might use to access a sensor’s internal state.
Deploying unshielded sensor nodes in hostile environ-
ments enables an adversary to capture, replicate, and in-
sert duplicated nodes at chosen network locations with
little effort. Thus, if the adversary compromises even
a single node, she can replicate it indeﬁnitely, spread-
ing her inﬂuence throughout the network.
If left un-
detected, node replication leaves any network vulner-
able to a large class of insidious attacks. Using repli-
cated nodes, the adversary can subvert data aggregation
protocols by injecting false data or suppressing legiti-
mate data. Further, blame for abnormal behavior can
now be spread across the replicas, reducing the likeli-
hood that any one node exceeds the detection thresh-
old. Even more insidiously, node replicas placed at ju-
diciously chosen locations can revoke legitimate nodes
and disconnect the network by triggering correct execu-
tion of node-revocation protocols that rely on threshold
voting schemes [6, 10, 13, 27].
Previous approaches for detecting node replication
typically rely on centralized monitoring, since localized
voting systems [6, 27] cannot detect distributed replica-
tion. Centralized schemes require all of the nodes in the
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
network to transfer a list of their neighbors’ claimed lo-
cations1 to a central base station that can examine the
lists for conﬂicting location claims. Like all centralized
approaches, this creates a single-point of failure. If the
adversary can compromise the base-station or interfere
with its communications, then the centralized approach
will fail. Also, the nodes surrounding the base station
are subjected to an undue communication burden that
may shorten the network’s life expectancy.
In this paper, we use two different emergent algo-
rithms to provide the ﬁrst examples of globally-aware
distributed node-replication detection systems.
The
emergent nature of our algorithms makes them ex-
tremely resilient to active attacks, and both protocols
seek to minimize power consumption by limiting com-
munication, while still operating within the extremely
limited memory capacity of typical sensor nodes. An
emergent algorithm leverages the features that no indi-
vidual node can provide, but that emerge through the
collaboration of many nodes. Our ﬁrst protocol, Ran-
domized Multicast, distributes location claims to a ran-
domly selected set of witness nodes. The Birthday Para-
dox predicts that a collision will occur with high prob-
ability if the adversary attempts to replicate a node.
Our second protocol, Line-Selected Multicast, exploits
the routing topology of the network to select witnesses
for a node’s location and utilizes geometric probabil-
ity to detect replicated nodes. This protocol has mod-
est communication and memory requirements. Further-
more, our solutions apply equally well to any class of
network in which the adversary can capture, replicate
and insert additional nodes. Examples include wireless
ad hoc networks and peer-to-peer networks. We argue
that such networks require the resiliency of emergent se-
curity techniques to resist an adversary that can subvert
an arbitrary number of nodes at unpredictable locations.
We expect that distributed algorithms based on emer-
gent properties will provide the best defenses for attacks
against these systems.
In the following section, we provide a more detailed
description of the node replication attack that we plan
to thwart, and we supply a summary of notation used
throughout the paper. Then, in Section 3 we summa-
rize some of the earlier proposals and explain why they
fail to prevent replication attacks. After discussing some
preliminary approaches to distributed detection in Sec-
tion 4, we present and analyze our two primary pro-
tocols, Randomized Multicast and Line-Selected Mul-
ticast, in Sections 5 and 6 respectively. We compare
1To prevent the adversary from using the location information to
ﬁnd and disable nodes, we could instead broadcast a locator unique
to the node’s neighborhood that would reveal less information but still
be veriﬁable by the neighbors. For example, the locator could consist
of the node’s list of neighbors. If the list becomes prohibitively long,
each node can broadcast the list to its neighbors but sign a hash of the
list. The neighbors verify that they are on the list, check the hash, and
then only propagate the hash value, instead of the entire list.
and contrast the protocols, discuss synchronization and
authentication issues and generalize our algorithms in
Section 8. Finally, we review related research in Sec-
tion 9 and present our future work and conclusions in
Sections 10 and 11.
2 Background
2.1 Goals
For a given sensor network, we would like to detect
a node replication attack, i.e., an attempt by the ad-
versary to add one or more nodes to the network that
use the same ID as another node in the network. Ideally,
we would like to detect this behavior without centralized
monitoring, since centralized solutions suffer from sev-
eral inherent drawbacks (see Section 3.1). The scheme
should also revoke the replicated nodes, so that non-
faulty nodes in the network cease to communicate with
any nodes injected in this fashion.
We evaluate each protocol’s security by examining
the probability of detecting an attack given that the ad-
versary inserts L replicas of a subverted node. The pro-
tocol must provide robust detection even if the adver-
sary captures additional nodes. We also evaluate the ef-
ﬁciency of each protocol. In a sensor network, commu-
nication (both sending and receiving) requires at least
an order of magnitude more power than any other oper-
ation [14], so our ﬁrst priority must be minimizing com-
munication, both for the network as a whole and for the
individual nodes (since hotspots will quickly exhaust a
node’s power supply). Moreover, sensor nodes typically
have a limited amount of memory, often on the order of a
few kilobytes [14]. Thus, any protocol requiring a large
amount of memory will be impractical.
2.2 Sensor Network Environments
A sensor network typically consists of hundreds, or
even thousands, of small, low-cost nodes distributed
over a wide area. The nodes are expected to function
in an unsupervised fashion even if new nodes are added,
or old nodes disappear (e.g., due to power loss or acci-
dental damage). While some networks include a central
location for data collection, many operate in an entirely
distributed manner, allowing the operators to retrieve ag-
gregated data from any of the nodes in the network. Fur-
thermore, data collection may only occur at irregular in-
tervals. For example, many military applications strive
to avoid any centralized and ﬁxed points of failure. In-
stead, data is collected by mobile units (e.g., unmanned
aerial units, foot soldiers, etc.)
that access the sensor
network at unpredictable locations and utilize the ﬁrst
sensor node they encounter as a conduit for the informa-
tion accumulated by the network. Since these networks
often operate in an unsupervised fashion for long periods
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
of time, we would like to detect a node replication attack
soon after it occurs. If we wait until the next data col-
lection cycle, the adversary has time to use its presence
in the network to corrupt data, decommission legitimate
nodes, or otherwise subvert the network’s intended pur-
pose.
We also assume that the adversary cannot readily cre-
ate new IDs for nodes. Newsome et al. describe sev-
eral techniques to prevent the adversary from deploying
nodes with arbitrary IDs [27]. For example, we can tie
each node’s ID to the unique knowledge it possesses. If
the network uses a key predistribution scheme [6, 13],
then a node’s ID could correspond to the set of secret
keys it shares with its neighbors (e.g., a node’s ID is
given by the hash of its secret keys). In this system, an
adversary gains little advantage by claiming to possess
an ID without actually holding the appropriate keys. As-
suming the sensor network implements this safeguard,
an adversary cannot create a new ID without guessing
the appropriate keys (for most systems, this is infeasi-
ble), so instead the adversary must capture and clone a
legitimate node.
2.3 Adversary Model
In examining the security of a sensor network, we
take a conservative approach by assuming that the ad-
versary has the ability to surreptitiously capture a lim-
ited number of legitimate sensor nodes. We limit the
percentage of nodes captured, since an adversary that
can capture most or all of the nodes in the network
can obviously subvert any protocol running in the net-
work. Having captured these nodes, the adversary can
employ arbitrary attacks on the nodes to extract their
private information. For example, the adversary might
exploit the unshielded nature of the nodes to read their
cryptographic information from memory. The adversary
could then clone the node by loading the node’s crypto-
graphic information onto multiple generic sensor nodes.
Since sensor networks are inherently designed to facili-
tate ad hoc deployment, these clones can then be easily
inserted into arbitrary locations within the network, sub-
ject only to the constraint that each inserted node shares
at least one key with some of its neighbors. We allow
all of the nodes under the adversary’s control to commu-
nicate and collaborate, but we make the simplifying as-
sumption that any cloned node has at least one legitimate
node as a neighbor. In Section 8.4, we show how we can
remove this assumption while retaining security. We as-
sume that the adversary operates in a stealthy manner,
attempting to avoid detection, since detection could trig-
ger an automated protocol to sweep the network, using a
technique such as SWATT [32] to remove compromised
nodes, or draw human attention and/or intervention. In
the following discussion, we will also assume that nodes
under the adversary’s control (both the subverted nodes
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
and their clones) continue to follow the protocols de-
scribed. This allows us to focus on the details of the
protocols, but in Section 10, we will suggest methods
for relaxing this assumption.
As described above, our adversary model differs from
the Dolev-Yao adversary [9] in several respects. Tra-
ditionally used to analyze cryptographic protocols, the
Dolev-Yao model allows the adversary to read and write
messages at any location within the network. However,
in our discussion, we restrict the adversary to read and
write messages using only the nodes under its control.
On the other hand, our model also allows the adversary
to subvert and replicate existing nodes in an adaptive
manner, capabilities not available to the Dolev-Yao ad-
versary. These capabilities allow the adversary to mod-
ify both the network topology and the “trust” topology,
since the set of legitimate nodes changes as the adver-
sary subverts nodes and inserts additional replicas.
2.4 Notation
For clarity, we list the symbols and notation used
throughout the paper below:
n
d
p
g
lα
H(M)
Kα
−1
K
{M}
α
S
K
−1
α
Number of nodes in the network
Average degree of each node
Probability a neighbor will replicate
location information
Number of witnesses selected by
each neighbor
Location node α claims to occupy
Hash of M
α’s public key
α’s private key
α’s signature on M
Set of all possible node IDs
3 Previous Protocols
Thus far, protocols for detecting node replication
have relied on a trusted base station to provide global
detection. For the sake of completeness, we also discuss
the use of localized voting mechanisms. We consider
these protocols in the abstract; for speciﬁc examples of
previous protocols, see Section 9. Until now, it was gen-
erally believed that these two alternatives exhausted the
space of possibilities. This paper expands the design
space to offer new alternatives with strong security and
efﬁciency characteristics.
3.1 Centralized Detection
The most straightforward detection scheme requires
each node to send a list of its neighbors and their claimed
locations to the base station. The base station can then
examine every neighbor list to look for replicated nodes.
If it discovers one or more replicas, it can revoke the
replicated nodes by ﬂooding the network with an authen-
ticated revocation message.
While conceptually simple,
this approach suffers
from several drawbacks inherent in a centralized system.
First, the base station becomes a single point of failure.
Any compromise of the base station or the communica-
tion channel around the base station will render this pro-
tocol useless. Furthermore, the nodes closest to the base
station will receive the brunt of the routing load and will
become attractive targets for the adversary. The protocol
also delays revocation, since the base station must wait
for all of the reports to come in, analyze them for con-
ﬂicts and then ﬂood revocations throughout the network.