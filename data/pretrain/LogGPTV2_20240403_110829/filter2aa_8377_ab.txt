                            `--------------------'           
```
It opens a `flag` file, reads input from the user, and compares. We've already leaked the contents of that file in the previous level, so we can try:
```
root@kali:/media/sf_CTFs/google/adminui2# nc mngmnt-iface.ctfcompetition.com 1337
=== Management Interface ===
 1) Service access
 2) Read EULA/patch notes
 3) Quit
1
Please enter the backdoo^Wservice password:
CTF{I_luv_buggy_sOFtware}
! Two factor authentication required !
Please enter secret secondary password:
```
Indeed a dud. We move on to `secondary_login`.
```
[0x4141456b]> s sym.secondary_login
[0x41414446]> VV
```
The first block of code just sets up everything:
```assembly
 .-------------------------------------------------------------.
 | [0x41414446]                                                |
 | (fcn) sym.secondary_login 293                               |
 |   sym.secondary_login ();                                   |
 | ; var int input @ rbp-0x90                                  |
 | ; var int local_88h @ rbp-0x88                              |
 | ; var int local_80h @ rbp-0x80                              |
 | ; var int local_78h @ rbp-0x78                              |
 | ; var int local_70h @ rbp-0x70                              |
 | ; var int local_6eh @ rbp-0x6e                              |
 | ; var int input_len @ rbp-0x10                              |
 | ; var int i @ rbp-0x8                                       |
 | ; CALL XREF from sym.primary_login (0x41414629)             |
 | push rbp                                                    |
 | mov rbp, rsp                                                |
 | sub rsp, 0x90                                               |
 | ; 0x41414b30                                                |
 | ; "! Two factor authentication required !"                  |
 | lea rdi, str.Two_factor_authentication_required             |
 | ; int puts(const char *s)                                   |
 | call sym.imp.puts;[ga]                                      |
 | ; 0x41414b58                                                |
 | ; "Please enter secret secondary password:"                 |
 | lea rdi, str.Please_enter_secret_secondary_password:        |
 | ; int puts(const char *s)                                   |
 | call sym.imp.puts;[ga]                                      |
 | lea rax, [input]                                            |
 | mov rsi, rax                                                |
 | ; 0x41414b80                                                |
 | ; "%127s"                                                   |
 | lea rdi, str.127s                                           |
 | mov eax, 0                                                  |
 | ; int scanf(const char *format)                             |
 | call sym.imp.scanf;[gb]                                     |
 | lea rax, [input]                                            |
 | mov rdi, rax                                                |
 | ; size_t strlen(const char *s)                              |
 | call sym.imp.strlen;[gc]                                    |
 | mov qword [input_len], rax                                  |
 | mov qword [i], 0                                            |
 `-------------------------------------------------------------'
 ```
 It prints the message, reads the second password and calculates its length.
 We then move on to a loop:
 ```assembly
 .-----------.
 |         | |
 |   .---------------------------------------------------.
 |   |  0x4141449f [gf]                                  |
 |   | ; CODE XREF from sym.secondary_login (0x414144d4) |
 |   | mov rax, qword [i]                                |
 |   | cmp rax, qword [input_len]                        |
 |   | jae 0x414144d6;[ge]                               |
 |   `---------------------------------------------------'
 |           f t
 |           | |
 |           | '--------------------------.
 |    .------'                            |
 |    |                                   |
 |.------------------------------.    .------------------------------------.
 ||  0x414144a9 [gg]             |    |  0x414144d6 [ge]                   |
 || lea rdx, [input]             |    | ; '#'                              |
 || mov rax, qword [i]           |    | cmp qword [input_len], 0x23        |
 || ; '('                        |    | jne 0x41414537;[gh]                |
 || add rax, rdx                 |    `------------------------------------'
 || movzx eax, byte [rax]        |            f t
 || xor eax, 0xffffffc7          |            | |
 || mov ecx, eax                 |            | |
 || lea rdx, [input]             |            | |
 || mov rax, qword [i]           |            | |
 || ; '('                        |            | |
 || add rax, rdx                 |            | |
 || mov byte [rax], cl           |            | |
 || add qword [i], 1             |            | |
 || jmp 0x4141449f;[gf]          |            | |
 |`------------------------------'            | |
 |    v                                       | |
 |    |                                       | |
 `----'                                       | |
 ```
 This loop XORs each byte of the input with 0xC7, then moves on to compare the length to 0x23.
 The next block should be checking the result against the expected input:
 ```
    .--------------------------------------.    |
   |  0x414144dd [gi]                     |    |
   | ; [0x41414a40:8]=0x98a8b093bc819384  |    |
   | mov rax, qword obj.FLAG              |    |
   | ; [0x41414a48:8]=0x83b5a8b094b4a697  |    |
   | mov rdx, qword [0x41414a48]          |    |
   | mov qword [input], rax               |    |
   | mov qword [local_88h], rdx           |    |
   | ; [0x41414a50:8]=0xb5a2b3b3a28598bd  |    |
   | mov rax, qword [0x41414a50]          |    |
   | ; [0x41414a58:8]=0x98f698a9f3afb398  |    |
   | mov rdx, qword [0x41414a58]          |    |
   | mov qword [local_80h], rax           |    |
   | mov qword [local_78h], rdx           |    |
   | ; [0x41414a60:2]=0xf8ac              |    |
   | movzx eax, word [0x41414a60]         |    |
   | mov word [local_70h], ax             |    |
   | ; [0x41414a62:1]=186                 |    |
   | movzx eax, byte [0x41414a62]         |    |
   | mov byte [local_6eh], al             |    |
   | lea rax, [input]                     |    |
   | test rax, rax                        |    |
   | je 0x41414537;[gh]                   |    |
   `--------------------------------------'    |
           f t                                 |
           | |                                 |
           | '------------------------.        |
      .----'                          |        |
      |                               | .------'
      |                               | |
  .------------------------.    .--------------------.
  |  0x41414530 [gk]       |    |  0x41414537 [gh]   |
  | mov eax, 1             |    | mov eax, 0         |
  | jmp 0x4141453c;[gj]    |    `--------------------'
  `------------------------'        v
```
We see that the code starts by referencing `obj.FLAG`. Let's extract it:
```
:> pcp 0x23 @ obj.FLAG
import struct
buf = struct.pack ("35B", *[
0x84,0x93,0x81,0xbc,0x93,0xb0,0xa8,0x98,0x97,0xa6,0xb4,
0x94,0xb0,0xa8,0xb5,0x83,0xbd,0x98,0x85,0xa2,0xb3,0xb3,
0xa2,0xb5,0x98,0xb3,0xaf,0xf3,0xa9,0x98,0xf6,0x98,0xac,
0xf8,0xba])
```
Now let's XOR with 0xC7:
```python
>>> import sys
>>> import struct
>>> buf = struct.pack ("35B", *[
... 0x84,0x93,0x81,0xbc,0x93,0xb0,0xa8,0x98,0x97,0xa6,0xb4,
... 0x94,0xb0,0xa8,0xb5,0x83,0xbd,0x98,0x85,0xa2,0xb3,0xb3,
... 0xa2,0xb5,0x98,0xb3,0xaf,0xf3,0xa9,0x98,0xf6,0x98,0xac,
... 0xf8,0xba])
>>> for x in buf:
...     sys.stdout.write(chr(ord(x) ^ 0xc7))
...
CTF{Two_PasSworDz_Better_th4n_1_k?}
```
Looks good, but something doesn't quite add up. I couldn't figure out how the `[gi]` block is comparing the expected result with the input. 
The final condition is:
```assembly
lea rax, [input]
test rax, rax 
```
Which is just checking that input in not NULL. Above that, we just have assignments. Where is the content being compared?
Eventually I convinced myself to try just any random string of length 0x23:
```console
root@kali:/media/sf_CTFs/google/adminui2# { echo "1"; echo "CTF{I_luv_buggy_sOFtware}"; python -c "print 'a'*0x23";} | nc mngmnt-iface.ctfcompetition.com 1337
=== Management Interface ===
 1) Service access
 2) Read EULA/patch notes
 3) Quit
Please enter the backdoo^Wservice password:
! Two factor authentication required !
Please enter secret secondary password:
Authenticated
>
```
So any string of length 0x23 will do. The flag is CTF{Two_PasSworDz_Better_th4n_1_k?} though.