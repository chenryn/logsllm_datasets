takes 0.3ms. WAVE is roughly 4x slower, but completely re-
moves the centralized token-issuing server, leaving the user
as the only authority in the system.
In OAuth a compro-
mised token issuing server can generate valid tokens without
the user’s knowledge.
Note that although OAuth2 has added a form of delega-
tion [36], it requires the OAuth2 server to issue a new token,
so is identical to the single-delegation scenario tested here.
This example shows that using WAVE as a replacement for
common authorization ﬂows will likely not reduce perfor-
mance, despite providing transitive delegation and removing
all central authorities.
8.3 Storage Evaluation
Since an entity in WAVE does not communicate with any
other entity, except via the storage, WAVE’s scalability de-
pends on the performance of the global storage. As men-
tioned in §5, a blockchain is a natural solution, but not scal-
able enough.
In contrast, the ULDM-based system is shared-nothing
and horizontally scalable: the performance of one node does
not limit the performance of the overall system. For com-
pleteness, we include single-system performance metrics
here. Table 3 shows the average latency of the ULDM stor-
age performing single operations at a time (i.e. just GETs or
just PUTs). The times for the ULDM-based storage include
both the generation of the proofs server-side and the veriﬁ-
cation of the proofs client-side. Every operation concerns a
unique object, so there is no caching.
This ULDM storage was constructed using Trillian backed
by MySQL. Fig. 7 shows the limits of a single node, where
performance for PUTs degrades at approximately 110 re-
quests per second and performance for GETs degrades at ap-
proximately 200 requests per second. We expect that perfor-
mance could be increased if Trillian were deployed on Span-
ner [20] as the designers intended, but defer this to future
work. Note that in this evaluation, every operation concerns
a unique object, so as to benchmark the underlying cost of
forming proofs, rather than the cache. Real workloads would
likely have more cache hits.
Although our storage implementation is unoptimized and
built using an off-the-shelf Merkle tree database, single
nodes handle insert loads an order of magnitude higher than
(a) 95th %ile PUT
(b) 95th %ile GET
Figure 7: Latencies for ULDM PUT/GET as the throughput
is ramped up to the single-node maximum.
possible on a blockchain system [22].
In addition, every
added node scales the capacity of the system linearly. We
envision that multiple storage providers, potentially operated
by distinct parties, would operate in parallel, similar to Cer-
tiﬁcate Transparency [41].
8.4 Deployment Experiences
WAVE is a real-world artifact and is open source [7]. We
operated various versions of WAVE for roughly two years in
over 20 buildings, controlling more than 800 devices (ther-
mostats, control processes, motion sensors, and others with
little to no existing authorization capabilities) comprising
363 entities, 27 namespaces and 529 attestations (both valid
and expired). The global authorization graph in our deploy-
ment is visualized in Fig. 8. The median number of delega-
tions in a path is 4 (the maximum is 9). This deployment
has given us the opportunity to reﬁne and validate the per-
formance, usability, and expressiveness of WAVE’s autho-
rization model in practice. Applying WAVE to legacy de-
vices whose ﬁrmware cannot be modiﬁed is done by using
an adaptation layer microservice and ensuring all communi-
cation with the legacy device ﬂows through that service [8].
Performance. In the deployment, most proofs build in un-
der 20ms and validate in under 10ms (as in Fig. 6b). The
performance impact of WAVE is imperceptible during nor-
mal operation: proofs are cached after processing, accelerat-
ing subsequent generation and validation. As mentioned, we
built an earlier version of WAVE on top of a blockchain in-
stead of our current ULDM. We conducted extensive bench-
USENIX Association
28th USENIX Security Symposium    1387
050100150200session time [s]102030PUT latency 95 %ile [ms]050100150requests per secondLatencyReq. /s0100200300400session time [s]1520253035GET latency 95 %ile [ms]050100150200250Requests per secondLatencyReq. /sWork
Transitive
delegation
Discov-
erability
No order
constraints
Ofﬂine
participants
No trusted
central storage
Protected
permissions
Auth. languages
[12, 49, 13, 43, 45, 29, 27]
Hidden credentials
[58, 37, 30, 48]
Centralized authorization
[19, 15, 56, 28]
Yes
Yes
Yes
No
No
Yes
Unknown: no mechanism given
Unknown: no mechanism given
Yes
Yes
No
No
Distributed authorization
[44, 59, 18, 57, 50]
WAVE
Yes
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
No
Yes
Table 4: Related work on decentralized authorization compared to WAVE. We elaborate on these categories in §9.
marks of that version and concluded that it cannot scale past
a load roughly equivalent to a city (≈ 1 million buildings). It
also incurs signiﬁcant CPU and bandwidth costs, even when
only storing permissions (not data).
Usability.
In addition to our experience with the deploy-
ment, we have also held multiple tutorials with 200+ users.
User feedback indicated that WAVE improved most aspects
of management (especially administrators having autonomy
to grant and revoke permissions). Some aspects of WAVE are
harder to manage: no user can enumerate all delegations in
the system, which reduces auditability. We were able to mit-
igate unfamiliarity with WAVE’s authorization model with
careful user interface design (which provides secure defaults
such as short expiry times) and with teaching users through
familiar analogies (e.g., comparing RTree to ﬁle paths).
Expressiveness. We found that WAVE was able to capture
exactly the authorization patterns required in typical cyber-
physical usage scenarios. The transitive delegation capabil-
ity was invaluable in lowering the administrative overhead of
deployments. Rather than requiring the building manager to
be a part of every commissioning workﬂow (to create cre-
dentials for each new device), permission is granted to the
person heading the deployment effort, who then acts with au-
tonomy. For permanent installations, the installing entity can
be removed from the permission ﬂow afterwards by granting
“around” them directly from the building manager to the de-
vices. For temporary installations, keeping the installing en-
tity in the ﬂow simpliﬁes revocation when the study is over.
9 Related Work
Table 4, compares prior authorization and trust management
systems with WAVE. Here, we provide additional details.
9.1 Trust Management and Authorization
Trust Management (TM) literature over the past two decades
has thoroughly researched techniques for transitively dele-
gable authorization. Overviews of TM systems are provided
in [14, 51, 11, 6].
Languages used to express authorization policies are sum-
marized in the ﬁrst row of Table 4 [12, 49, 13, 43, 10, 27].
For example Macaroons [12] provides a mechanism for ex-
Figure 8: The permission graph for the multi-building de-
ployment. “Bolded” nodes are namespace authorities. Most
nodes with a high degree are entities that administer a set of
namespaces. Leaf nodes correspond to devices and services
that do not perform any delegation.
pressing authorization policy with delegation and context-
speciﬁc third-party caveats. The goals are quite different,
e.g. the authorization is veriﬁable by the authority only and
permissions can only be granted in-order. The system does
not specify how cookies are stored and discovered or how
it would work with ofﬂine participants. In general, autho-
rization language work is complementary to WAVE, as we
focus on the layers of the system that lie below the language
(how the pieces of policy are stored, disseminated, and dis-
covered). In our deployments we use RTree, based on SPKI’s
pkpfs [24], but mechanisms like third-party caveats could be
introduced with no changes to the underlying layers.
Hidden credentials (row 2 in Table 4) [58, 37, 30, 48] ad-
dress a different privacy problem: allowing a prover and ver-
iﬁer to hide their credentials from each other. WAVE solves
an orthogonal problem: the privacy of credentials in storage
and during discovery.
The remaining literature can be categorized as relying on
a centralized credential store for discovery [19, 15, 56], or a
distributed credential store [44, 59, 18, 57, 50]. Centralized
discovery mechanisms put all credentials in one place which
makes discovery simple but, as constructed in work thus
far, requires this central storage to be trusted. Blockchain
work [55, 26] avoids this problem but does not scale, and
1388    28th USENIX Security Symposium
USENIX Association
thus far has focused on identity, not authorization. Work
such as [28] decreases centralization by reducing the trust
in cross-administrative-domain applications, such as IFTTT,
but still places trust in the central authorization servers be-
longing to each vendor.
In contrast, distributed discovery
mechanisms store each credential with its issuer and/or sub-
ject, avoiding the need to trust a central storage system. The
resulting discovery mechanisms are more complex and can-
not operate if any credential holder is ofﬂine. Both the cen-
tralized and decentralized credential discovery work thus far
have overlooked the privacy of credentials at rest (in the cen-
tralized case) or during discovery (in the distributed case); in
both cases, there are parties who can read credentials that do
not grant them permissions even indirectly.
A concurrent work, Droplet [52], presents a distributed au-
thorization system, but it does not meet the requirements of a
general purpose authorization system in §1: Droplet does not
provide transitive delegation, it only handles authorization
for time series data streams as opposed to the more general
policies of WAVE, and it induces a blockchain transaction
for every change to an ACL, which scales poorly.
WAVEs attestations and RDE can be used as the key ex-
change protocol for an end-to-end encryption scheme such
as JEDI [38]. JEDI provides resource-oriented message en-
cryption on a tree of resources, which interfaces well with
WAVEs RTree authorization policy.
9.2 Storage
WAVE’s Map Log Root is similar to the approach used by
CONIKS [47] and Key Transparency (KT) [32]. There are
several differences between a ULDM and the CONIKS/KT
data structures. As a ULDM does not need to prevent it-
eration of the contents, it can be log derived, allowing an
efﬁcient veriﬁcation that it is append-only.
In contrast,
CONIKS/KT requires every user to check every epoch of
the map to ensure the values stored match expectations. This
approach would not work for our use case as we expect every
user to create hundreds or thousands of objects, and requir-
ing every user to check each of these objects at every map
epoch is intractable. The ULDM approach 1) reduces the
amount of work as it scales with the number of additions to
the map rather than the size of the map, as in CONIKS, and
2) places the majority of the burden on auditors, rather than
users who may be ofﬂine.
Revocation Transparency [40] is also similar to a ULDM.
It was posted as an informal short note, and to our knowl-
edge, it was never fully developed. It lacks the Operation
Log, which requires the client/auditor to request a consis-
tency proof between two versions of the map without know-
ing the contents (as it cannot construct a replica). We are
not aware of any Merkle tree map databases that support this
operation. A ULDM is built on simpler operations and can
be constructed using an off-the-shelf database, such as Tril-
lian [33], with full auditability.
10 Conclusion
WAVE is a decentralized authorization framework leverag-
ing an improved graph-based authorization model. It intro-
duces an encryption technique, RDE, for hiding attestation
contents, while still allowing efﬁcient discovery of permis-
sions granted out of order to ofﬂine participants. WAVE
introduces a storage mechanism, the ULDM, that is efﬁ-
ciently auditable. This enables untrusted, horizontally scal-
able, servers to store the attestations without compromising
on the security of the system as a whole.
We used WAVE to manage IoT deployments in 20 build-
ings for two years, during which we identiﬁed six require-
ments that are critical for IoT deployments. In meeting these
requirements, WAVE (1) has no reliance on central trust,
(2) provides transitive ﬁne-grained delegation and revoca-
tion, (3) protects permissions during discovery and at rest,
(4) allows for any party to verify a proof of authorization,
(5) allows delegations to occur in any order with no commu-
nication between granter and receiver, and ﬁnally (6) allows
for granting permissions to ofﬂine participants. No existing
work meets these requirements simultaneously. Our open-
source implementation of WAVE offers similar performance
to traditional centralized systems while providing stronger
security guarantees.
Acknowledgements
We thank our anonymous reviewers and our shepherd for
their invaluable feedback. This research was supported
by Intel/NSF CPS-Security #1505773 and #20153754, DoE
#DE-EE000768, NSF CISE Expeditions #CCF-1730628,
NSF GRFP #DGE-1752814, and gifts from the Sloan Foun-
dation, Hellman Fellows Fund, Alibaba, Amazon, Ant Fi-
nancial, Arm, Capital One, Ericsson, Facebook, Google, In-
tel, Microsoft, Scotiabank, Splunk and VMware.
References
[1] Tor project: Anonymity online. https://www.
torproject.org/.
[2] Facebook permission bug. https://money.cnn.
com/2018/06/07/technology/facebook-
public-post-error/index.html, 2018.
[3] If This Then That. https://ifttt.com/, 2018.
[4] OAuth 2.0. https://oauth.net/2/, 2018.
[5] Michel Abdalla et al. Identity-based encryption gone
wild. In ICALP, 2006.
[6] A Ahadipour and M Schanzenbach. A survey on au-
thorization in distributed systems: Information storage,
data retrieval and trust evaluation. In Trustcom, 2017.
[7] Michael Andersen and Sam Kumar. Source for WAVE.
https://github.com/immesys/wave.
[8] Michael P Andersen, John Kolb, Kaifei Chen, Gabe
Fierro, David E Culler, and Randy Katz. Democratiz-
ing authority in the built environment. TOSN, 2018.
USENIX Association
28th USENIX Security Symposium    1389
[9] Michael P Andersen, John Kolb, Kaifei Chen, Gabriel
Fierro, David E Culler, and Raluca Ada Popa. WAVE:
A decentralized authorization system for
IoT via
blockchain smart contracts. UC Berkeley Tech. Rep.
UCB/EECS-2017-234, 2017.
[10] Moritz Becker et al. SecPAL: Design and semantics of
a decentralized authorization language. JCS, 2010.
[11] Elisa Bertino, Elena Ferrari, and Anna Squicciarini.
Trust negotiations: concepts, systems, and languages.
Computing in science & engineering, 6(4), 2004.
[12] Arnar Birgisson, Joe Gibbs Politz, Ulfar Erlingsson,
Ankur Taly, Michael Vrable, and Mark Lentczner.
Macaroons: Cookies with contextual caveats for decen-
tralized authorization in the cloud. In NDSS, 2014.
[13] Matt Blaze et al. Keynote: Trust management for