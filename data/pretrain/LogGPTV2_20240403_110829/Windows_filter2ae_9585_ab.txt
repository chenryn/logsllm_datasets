    0c 02a3f7ac 6ec303d8 wmiprvsd!DllCanUnloadNow+0xbd37
    0d 02a3f820 6ec301f9 wmiprvsd!DllCanUnloadNow+0xb9f2
    0e 02a3f8b4 6ec2ff5e wmiprvsd!DllCanUnloadNow+0xb813
    0f 02a3f988 6ec37f68 wmiprvsd!DllCanUnloadNow+0xb578
    10 02a3f9f4 6ec2b471 wmiprvsd!DllCanUnloadNow+0x13582
    11 02a3fa3c 6ec2b1e0 wmiprvsd!DllCanUnloadNow+0x6a8b
    12 02a3fac0 6f1b7502 wmiprvsd!DllCanUnloadNow+0x67fa
    13 02a3fb34 6f1b6899 wbemcore!DllCanUnloadNow+0x4399
    14 02a3fb80 6f1bceca wbemcore!DllCanUnloadNow+0x3730
    15 02a3fbb0 6f1bfd5c wbemcore!DllGetClassObject+0x1d42
    16 02a3fcf4 6f1bdf2c wbemcore!DllGetClassObject+0x4bd4
    17 02a3fe0c 6f1bdd80 wbemcore!DllGetClassObject+0x2da4
    18 02a3fe5c 6f1bfc6e wbemcore!DllGetClassObject+0x2bf8
    19 02a3feb4 6f1b37a2 wbemcore!DllGetClassObject+0x4ae6
    1a 02a3fee8 6f1b3747 wbemcore!DllCanUnloadNow+0x639
    1b 02a3ff34 6f1b2326 wbemcore!DllCanUnloadNow+0x5de
    1c 02a3ff6c 6f1b23f4 wbemcore+0x2326
    1d 02a3ff84 76d51174 wbemcore+0x23f4
    1e 02a3ff90 76f7b3f5 kernel32!BaseThreadInitThunk+0xe
    1f 02a3ffd0 76f7b3c8 ntdll!__RtlUserThreadStart+0x70
    20 02a3ffe8 00000000 ntdll!_RtlUserThreadStart+0x1b
根据调用栈可知，关键的API是nt!ObOpenObjectByPointer，现在来逆向分析下该API，
从整个调用链的分析过程可知，是用户态进程调用了KERNELBASE!OpenProcess()，然后引发的一系列的调用操作，从这里也可以推出来，nt!_OBJECT_HEADER.HandleCount这个字段主要用户记录用户态通过句柄访问该对象的次数。当然，对齐做的减1操作的分析过程就留给大家了。
## 7、内核对象类型对象分析
大家读到这个词可能有点拗口，啥意思呢。这个句子可以这么断开来，内核对象 类型
对象，即内核对象的类型也是个对象，我们现在对这个类型对象进行分析。玩过Python的人都知道一句话，Python中一切皆对象，其实Windows中又何尝不是呢。此外，Python的内核实现与我们这边分析的Windows内核对象管理的相似度99.999%，这个有机会后边给大家对比分析下两者实现的源码。扯远了，现在回来看一下这个类型对象所谓何物。nt!_OBJECT_HEADER.TypeIndex这个字段代表着当前的这个对象再对象类型数组中的索引号，那么这个数组的起始地址在哪呢？类型对象自身的类型又是什么呢？下边一一来回答这两个问题。  
第一个问题：这个数组的起始地址为nt!ObpObjectTypes；  
第二个问题：类型对象的结构体为dt nt!_OBJECT_TYPE；
我们先来分析下dt nt!_OBJECT_TYPE，如下：
    0: kd> dt nt!_OBJECT_TYPE
       +0x000 TypeList         : _LIST_ENTRY            //隶属于同一个类型对象的实例
       +0x008 Name             : _UNICODE_STRING        //该对象的名字
       +0x010 DefaultObject    : Ptr32 Void
       +0x014 Index            : UChar                  //该对象在对象类型对象数组中的索引号
       +0x018 TotalNumberOfObjects : Uint4B             //以指针形式引用该对象的次数
       +0x01c TotalNumberOfHandles : Uint4B             //以句柄形式应用该对象的次数
       +0x020 HighWaterNumberOfObjects : Uint4B         //用于记录以指针形式引用该对象的最高次数，该字段一般用于统计，性能优化
       +0x024 HighWaterNumberOfHandles : Uint4B         //用于记录以句柄形式应用该对象的最高次数，该字段一般用于统计，性能优化
       +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER // 具体的对象类型初始化字段
       +0x078 TypeLock         : _EX_PUSH_LOCK          // 互斥访问锁
       +0x07c Key              : Uint4B
       +0x080 CallbackList     : _LIST_ENTRY
    0: kd> dt nt!_OBJECT_TYPE_INITIALIZER
       +0x000 Length           : Uint2B
       +0x002 ObjectTypeFlags  : UChar
       +0x002 CaseInsensitive  : Pos 0, 1 Bit
       +0x002 UnnamedObjectsOnly : Pos 1, 1 Bit
       +0x002 UseDefaultObject : Pos 2, 1 Bit
       +0x002 SecurityRequired : Pos 3, 1 Bit
       +0x002 MaintainHandleCount : Pos 4, 1 Bit
       +0x002 MaintainTypeList : Pos 5, 1 Bit
       +0x002 SupportsObjectCallbacks : Pos 6, 1 Bit
       +0x004 ObjectTypeCode   : Uint4B
       +0x008 InvalidAttributes : Uint4B
       +0x00c GenericMapping   : _GENERIC_MAPPING
       +0x01c ValidAccessMask  : Uint4B
       +0x020 RetainAccess     : Uint4B
       +0x024 PoolType         : _POOL_TYPE
       +0x028 DefaultPagedPoolCharge : Uint4B
       +0x02c DefaultNonPagedPoolCharge : Uint4B
       +0x030 DumpProcedure    : Ptr32     void
       +0x034 OpenProcedure    : Ptr32     long
       +0x038 CloseProcedure   : Ptr32     void
       +0x03c DeleteProcedure  : Ptr32     void
       +0x040 ParseProcedure   : Ptr32     long
       +0x044 SecurityProcedure : Ptr32     long
       +0x048 QueryNameProcedure : Ptr32     long
       +0x04c OkayToCloseProcedure : Ptr32     unsigned char
nt!_OBJECT_TYPE_INITIALIZER结构体主要是存储一些属性信息，特别是一些权限校验和默认的函数过程。特别有意思的是SupportsObjectCallbacks字段，修改该字段可以绕过系统提供的安全保护措施。现在来看下这个系统全局的对象类型对象数组，如下：
    0: kd> dd nt!ObpObjectTypes
    83f81aa0  a19378e0 a1937818 a1937750 a1937508
    83f81ab0  a19c2040 a19c2f78 a19c2eb0 a19c2de8
    83f81ac0  a19c2d20 a19c2668 a19e2330 a19ea418
    83f81ad0  a19ea350 a19e9418 a19e9350 a19e89b8
    83f81ae0  a19e88f0 a19e8828 a19e8760 a19e8698
    83f81af0  a19e85d0 a19e8508 a19e8440 a19e8378
    83f81b00  a19e7040 a19e7f78 a19e7eb0 a19e7160
    83f81b10  a19f3f78 a19f3eb0 a19f3de8 a19f3930
notepad进程对象的TypeIndex为0x07，那么是否意味着是nt!ObpObjectTypes[7]呢？假设是的话，我们来看下数据：
显然是有问题的，因为我们看的这个明明是notepad这个进程对象，但这里的名字却是“UserApcReserve”，如果这个还不足以打消你的疑虑，那TotalNumberOfObjects和TotalNumberOfHandles总归最好的证明了吧。既然TypeIndex不是这么简单的映射到nt!ObpObjectTypes数组的下标，那么这里的映射关系又是怎样的呢？最好的办法当然是去内核中寻找答案。
## 8、TypeIndex与nt!ObpObjectTypes数组的映射关系
与这个索引映射关系最为直接的是ObCreateObjectTypeEx()函数，该函数的关键代码整理如下：
由此可见，nt!_OBJECT_TYPE.Index这个是从2开始的，且2一定是分配给ObpTypeObjectType的，好的，现在来查看下是不是我们分析的这个结果。
    0: kd> dd nt!ObpTypeObjectType l1
    83f81a94  a19378e0
    0: kd> dt nt!_OBJECT_TYPE a19378e0
       +0x000 TypeList         : _LIST_ENTRY [ 0xa19378b8 - 0xa240b610 ]
       +0x008 Name             : _UNICODE_STRING "Type"
       +0x010 DefaultObject    : 0x83f81ba0 Void
       +0x014 Index            : 0x2 ''
       +0x018 TotalNumberOfObjects : 0x2a
       +0x01c TotalNumberOfHandles : 0
       +0x020 HighWaterNumberOfObjects : 0x2a
       +0x024 HighWaterNumberOfHandles : 0
       +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER
       +0x078 TypeLock         : _EX_PUSH_LOCK
       +0x07c Key              : 0x546a624f
       +0x080 CallbackList     : _LIST_ENTRY [ 0xa1937960 - 0xa1937960 ]
再看看nt!ObpObjectTypes数组的第一项也正是a19378e0  
OK，验证正确，现在就看下我们所需要核验的notepad进程的类型对象。7-2=5，所以我们就应该分析nt!ObpObjectTypesp[5]，如下：
## 9、总结
ok，暂且先到这，这篇文章讲述的主要是内核对象的比较细节的知识点，大家需要自己亲自做个实验分析一下，文中是以Win7
32为例分析的，其他版本的Windows内核实现可能有差异，但基本原理是一致的。文章中给大家留的那个分析的作业也希望大家做一下。下一篇将会再这篇的基础上构建出一副完整的内核对象管理全景图，你会发现，Windows其实是实现了一个小型的类似文件系统的东西来管理内核对象的。