title:A Dynamic Technique for Eliminating Buffer Overflow Vulnerabilities
(and Other Memory Errors)
author:Martin C. Rinard and
Cristian Cadar and
Daniel Dumitran and
Daniel M. Roy and
Tudor Leu
A Dynamic Technique for Eliminating Buffer Overﬂow
Vulnerabilities (and Other Memory Errors)
Martin Rinard, Cristian Cadar, Daniel Dumitran, Daniel M. Roy, and Tudor Leu
Cambridge, MA 02139
Computer Science and Artiﬁcial Intelligence Laboratory
Massachusetts Institute of Technology
ABSTRACT
Buﬀer overﬂow vulnerabilities are caused by programming
errors that allow an attacker to cause the program to write
beyond the bounds of an allocated memory block to corrupt
other data structures. The standard way to exploit a buﬀer
overﬂow vulnerability involves a request that is too large
for the buﬀer intended to hold it. The buﬀer overﬂow error
causes the program to write part of the request beyond the
bounds of the buﬀer, corrupting the address space of the
program and causing the program to execute injected code
contained in the request.
We have implemented a compiler that inserts dynamic
checks into the generated code to detect all out of bounds
memory accesses. When it detects an out of bounds write,
it stores the value away in a hash table to return as the
value for corresponding out of bounds reads. The net eﬀect
is to (conceptually) give each allocated memory block un-
bounded size and to eliminate out of bounds accesses as a
programming error.
We have acquired several widely used open source servers
(Apache, Sendmail, Pine, Mutt, and Midnight Comman-
der). With standard compilers, all of these servers are vul-
nerable to buﬀer overﬂow attacks as documented at security
tracking web sites. Our compiler eliminates these security
vulnerabilities (as well as other memory errors). Our re-
sults show that our compiler enables the servers to execute
successfully through buﬀer overﬂow attacks to continue to
correctly service user requests without security vulnerabili-
ties.
1.
INTRODUCTION
Standard programming languages (Fortran, C, Java, C++)
allow programmers to create (statically or dynamically) and
then access memory blocks (such as buﬀers, objects, structs,
or arrays) of a ﬁxed size. An attempt by the program to use
a reference to a block to access memory outside the block
is considered to be a programming error. The meaning of
a program containing such an error varies from language to
language. Java implementations, for example, check all ac-
cesses and throw an exception if the program attempts to
access out of bounds data. The ANSI C standard, on the
other hand, speciﬁes that the meaning of a program is un-
deﬁned if it uses pointer arithmetic or other means to access
data outside of the block boundaries. In practice, most C
implementations do not check for out of bounds accesses,
leaving C programs vulnerable to data structure corruption
errors that occur when an out of bounds access to one block
corrupts data stored in another block. Because the eﬀect
of these kinds of errors is so dependent on aspects of the
implementation (such as the layout of the data structures in
memory) that are outside of the basic programming model
of the language, they can be extremely diﬃcult to reproduce
and eliminate. And because they can corrupt language im-
plementation structures such as return addresses and func-
tion pointers, they often leave the program vulnerable to
buﬀer overﬂow attacks, which attackers can exploit to inject
and execute arbitrary code over the network.
In this paper we present a diﬀerent approach, boundless
memory blocks, to out of bounds accesses. We generate
code that checks all accesses, but instead of allowing out of
bounds accesses to corrupt other data structures or respond-
ing to out of bounds accesses by throwing an exception, the
generated code takes actions that allow the program to con-
tinue to execute without interruption. Speciﬁcally, it stores
the values of out of bounds writes in a hash table indexed
under the written address (expressed as an oﬀset relative
to an identiﬁer for the written block). It can then return
the stored value as the result of out of bounds reads to that
address. It simply returns a default value for out of bounds
reads that access uninitialized addresses.
Conceptually, our technique gives each memory block un-
bounded size. The initial memory block size can therefore
be seen not as a hard boundary that the programmer must
get right for the program to execute correctly, but rather
as a ﬂexible hint to the implementation of the amount of
memory that the programmer may expect the program to
use in common cases.
We have developed a C compiler that implements bound-
less memory blocks and used this compiler to generate code
for a collection of widely used server programs drawn from
the open-source Linux community. As documented at se-
curity tracking web sites such as www.securityfocus.com
and www.securiteam.com, all of these programs have secu-
rity vulnerabilities related to out of bounds accesses such
as buﬀer overﬂow errors. Our results show that the use of
boundless memory blocks makes these programs invulnera-
ble to these security vulnerabilities and that the overhead
associated with using boundless memory blocks is accept-
able in practice.
Note that boundless memory blocks have the potential to
introduce a new denial of service security vulnerability: the
possibility that an attacker may be able to produce an input
that will cause the program to generate a very large number
of out of bounds writes and therefore consume all of the
available memory. We address this problem by treating the
hash table that stores out of bounds writes as a ﬁxed-size
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:47 UTC from IEEE Xplore.  Restrictions apply. 
least recently used (LRU) cache. This bounds the amount
of memory that an attacker can cause out of bounds writes
to consume.
This paper makes the following contributions:
• Boundless Memory Blocks: It introduces the con-
cept of using boundless memory blocks to eliminate
problems (security errors, data structure corruption,
premature program termination due to thrown excep-
tions) currently caused by ﬁxed-size memory blocks.
• Implementation: It shows how to implement bound-
less memory blocks in a compiler that is capable of
generating code for unmodiﬁed legacy C programs.
• Evaluation: We evaluate how well boundless mem-
ory blocks work in practice by generating versions of
widely used open source server programs. Our results
show that boundless memory blocks make these pro-
gram invulnerable to security vulnerabilities (such as
buﬀer overﬂows) caused by out of bounds memory ac-
cesses and that the overhead of using boundless mem-
ory blocks is acceptable for this set of programs.
2. EXAMPLE
We next present a simple example that illustrates how
computations with boundless memory blocks operate. Fig-
ure 1 presents a (somewhat simpliﬁed) version of a procedure
from the Mutt mail client discussed in Section 4.4. This pro-
cedure takes as input a string encoded in the UTF-8 format
and returns as output the same string encoded in modiﬁed
UTF-7 format. This conversion may increase the size of the
string; the problem is that the procedure fails to allocate
suﬃcient space in the return string for the worst-case size
increase. Speciﬁcally, the procedure assumes a worst-case
increase ratio of 2; the actual worst-case ratio is 7/3. When
passed (the very rare) inputs with large increase ratios, the
procedure attempts to write beyond the end of its output
array.
With standard compilers, these writes succeed, corrupt
the address space, and the program crashes with a segmen-
tation violation. To eliminate the possibility of this kind
of corruption, researchers have developed safe-C compilers
that generate code that dynamically checks for and inter-
cepts out of bounds accesses. With such compilers, Mutt
exits with an out of bounds access error and does not even
start the user interface. With boundless memory blocks, the
program stores the additional writes away in a hash table,
enabling the mail server to correctly translate the string and
continue to execute correctly.
This example illustrates two key aspects of using bound-
less memory blocks:
• Subtle Errors: To successfully specify a hard limit
for each memory block, the programmer must reason
about how all executions of the program can possibly
access memory. The diﬃculty of performing this rea-
soning means that, in practice, real-world programs
often contain subtle memory errors that can be very
diﬃcult to detect by either testing or code inspection,
and these errors can have signiﬁcant negative conse-
quences for the program and its users.
• Diﬀerent Aspects of Correctness: The fact that
the programmer has failed to correctly compute the
static char *utf8_to_utf7 (const char *u8, size_t u8len) {
char *buf, *p;
int ch, int n, i, b = 0, k = 0, base64 = 0;
/* The following line allocates the return string.
The allocated string is too small; instead of
u8len * 2 +1, a safe length would be u8len * 4 + 1
*/
p = buf = safe_malloc (u8len * 2 + 1);
while (u8len) {
unsigned char c = *u8;
if (c  u8len) goto bail;
for (i = 0; i  1 && !(ch >> (n * 5 + 1))) goto bail;
u8 += n, u8len -= n;
if (ch = 0x7f) {
if (!base64) {
*p++ = ’&’;
base64 = 1;
b = 0;
k = 10;
}
if (ch & ~0xffff) ch = 0xfffe;
*p++ = B64Chars[b | ch >> k];
k -= 6;
for (; k >= 0; k -= 6)
*p++ = B64Chars[(ch >> k) & 0x3f];
b = (ch  10) *p++ = B64Chars[b];
*p++ = ’-’;
base64 = 0;
}
*p++ = ch;
if (ch == ’&’) *p++ = ’-’;
}
}
if (base64) {
if (k > 10) *p++ = B64Chars[b];
*p++ = ’-’;
}
*p++ = ’\0’;
safe_realloc ((void **) &buf, p - buf);
return buf;
bail:
safe_free ((void **) &buf);
return 0;
}
Figure 1: String Encoding Conversion Procedure
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:47 UTC from IEEE Xplore.  Restrictions apply. 
maximum possible size of the memory block does not
mean that the program as a whole is incorrect.
In
fact, as this example illustrates, the rest of the com-
putation can be completely correct once it is provided
with conceptually unbounded memory blocks.
3.
IMPLEMENTATION
We have implemented boundless memory blocks for legacy
C programs. Our implementation builds on an existing safe-
C compiler [38]. Such compilers maintain enough infor-
mation to perform (a combination of dynamic and static)
checks to recognize out of bounds memory accesses. When
the program attempts to perform such an access, the gener-
ated code ﬂags the error and terminates the program. The
basic idea behind our implementation is to modify the gen-
erated code so that, instead of terminating the execution, it
stores out of bounds writes in a hash table and implements
out of bounds reads by fetching the stored values from the
hash table. There are two primary issues, both of which
relate to the representation of pointers:
• Information Content: Most safe-C compilers change
the representation of pointers to enable the generated
code to distinguish in bounds and out of bounds point-
ers [34]. Some representations use a single error token
to represent all out of bounds pointers. Such repre-
sentations are unsuitable for the implementation of
boundless memory blocks since they do not maintain
enough information to enable the generated code to
identify the memory block and oﬀset of the out of
bounds pointer. Our compiler therefore uses a pointer
representation that maintains enough information to
retrieve the memory block and oﬀset for each out of
bounds pointer.
• Memory Layout: Some safe-C compilers change the
size of the pointer representation, which in turn changes
the memory layout of the legacy C program. We de-
cided to build on a safe-C compiler that leaves the
memory layout intact, in part because this enables us
to support a larger range of legacy C programs.
Our compiler generates two kinds of code: checking code
and continuation code. The checking code detects out of
bounds accesses; the continuation code accesses the hash
table and executes when the checking code detects an out
of bounds access.
3.1 Checking Code
Our implementation uses a checking scheme originally de-
veloped by Jones and Kelly [28] and then signiﬁcantly en-
hanced by Ruwase and Lam [38]. The scheme is currently
implemented as a modiﬁcation to the GNU C compiler (gcc).
Jones and Kelly’s scheme maintains a table that maps lo-
cations to data units (each struct, array, and variable is a
data unit). It uses this table to track intended data units
and distinguish in-bounds from out-of-bounds pointers as
follows:
• Base Case: A base pointer is the address of an array,