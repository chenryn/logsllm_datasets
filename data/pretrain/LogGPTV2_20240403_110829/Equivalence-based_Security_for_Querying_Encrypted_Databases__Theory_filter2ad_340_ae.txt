we can invoke ereduce again with the residual formula ψ
as the input policy and eL1 as the input log.
We present selected cases of ereduce in Figure 2. We
use the notation f(~a) ⇓ ψ to mean that function f returns ψ
when applied to arguments ~a. When the formula input to
ereduce is a predicate p(~t) (rule R-P), ereduce uses σ and
~∆ to replace all variables in p(~t) with concrete values (with
proper hash adjustments) to obtain a new ground predi-
cate p(~t′). (A ground predicate only has constants as argu-
ments.) Then it consults eL to check whether p(~t′) exists.
If eL(p(~t′)) = uu, indicating the log doesn’t have enough
information, then ereduce returns p(~t′). Otherwise, it re-
turns either true or false depending on whether there is a
row in table p with hash values matching ~t′. For exam-
p(~t′) ← ∀ti ∈ Var. p(~t)[ti 7→ hAdjust(σ(ti).hash,
∆σ(ti).ℓ→p.i), σ(ti).cipheri]
P ← eL(p(~t′))
ereduce(eL, p(~t), ~∆, σ) ⇓ P
ereduce(eL, ϕ1, ~∆, σ) ⇓ ϕ′
1
ereduce(eL, ϕ2, ~∆, σ) ⇓ ϕ′
2 ψ ← ϕ′
ereduce(eL, ϕ1 ∨ ϕ2, ~∆, σ) ⇓ ψ
1 ∨ ϕ′
2
desat(eL, g, ~∆, σ) ⇓ Σ′
∀σi ∈ Σ′. ereduce(eL, ϕ, ~∆, σi) ⇓ ϕi
ϕ′ ← ∀~x. (g ∧ ~x /∈ [Σ′ ↓ ~x] → ϕ)
ψ ← ^
ϕi ∧ ϕ′
R-P
R-W
ereduce(eL, ∀~x.(g → ϕ), ~∆, σ) ⇓ ψ
i
R-∀
Figure 2: ereduce description
k1 to vh
ple, let us assume that ereduce is called with the input
substitution σ = [hp1, vh
k1 , ∗, t.cli, . . .] and the input predi-
cate activeRole(p1, hdoctorh
k3 , ∗i) (p1 is a variable and doctor
is a constant). ∗ represents a ciphertext that is not im-
portant for this example. Let us assume that column 1 of
the activeRole table uses the keys (k2, ) whereas in σ, the
hash value mapped to p1 is generated using k1. Hence, we
have to change the value vh
k2 using the adjustment
key ∆k1 7→k2 ∈ ~∆. Then, using the following SQL query we
check whether a row with the appropriate hash values ex-
ists: “select * from activeRole where column1Hash=vh
k2 and
column2Hash=doctorh
k3 ”. If such a row exists, then ⊤ is re-
turned; otherwise, ⊥ is returned. When ereduce is called
for timeOrder, the same hash adjustment applies before the
mOPED data structure is consulted.
In rule R-W, ereduce is recursively called for the two sub-
formulas of the disjunction. The returned residual formula
is the disjunction of the residual formulas returned from the
two recursive calls.
When the input formula is of the form ∀~x. (g → ϕ) (rule
R-∀), we ﬁrst use the function desat (described below) to get
all substitutions Σ′ for ~x that extend σ and satisfy g on
eL. Our EQ mode check (described later), ensures there are
only a ﬁnite number of such substitutions. For each of these
substitutions σi ∈ Σ′, we recursively call ereduce for ϕ to
obtain a residual formula ϕi. Then the returned residual
tutions σi for ~x are not checked again when eL is extended.
formula isVi ϕi ∧ ϕ′ where ϕ′ ensures that the same substi-
Next, we explain selected rules for desat (presented below)
with an example.
S-P
Σ ← esat(eL, p(~t), ~∆, σ)
desat(eL, p(~t), ~∆, σ) ⇓ Σ
desat(eL, g1, ~∆, σ) ⇓ Σ′
∀σi ∈ Σ′. desat(eL, g2, ~∆, σi) ⇓ Σi
desat(eL, g1 ∧ g2, ~∆, σ) ⇓ [
Σi
i
S-V
q(x, y) and substitution σ = ∅ (empty) as input. The S-
Let us assume desat is called with the formula g ≡ p(x) ∧
∧ rule applies and ﬁrst desat is recursive called on p(x) and
σ = ∅. Now, the rule S-P applies. Here, x is not in the
domain of σ, so the esat function consults eL (i.e., using
SQL query like: “select * from p”) to ﬁnd concrete values of x
to make p(x) true. Let us assume that we get hvh
k1 , ∗i (i.e., k1
is used to hash the column 1 of table p). Then, esat returns
1139the substitution σ1 = [hx, vh
k1 , ∗, p.1i] as output. Going back
to the S-∧ rule, now the second premise of S-∧ calls desat
for q(x, y) with each substitution obtained after evaluating
p(x), in our case, σ1. Let us assume that columns 1 and
2 of table q are hashed with keys k2 and k3, respectively.
While evaluating, q(x, y) with σ1, S-P rule is used. σ1 maps
variable x with key k1, so esat converts vh
k2 using
the token ∆p.1→q.1. It then tries to get concrete values for
y (with respect to given value of x) by consulting table q
in eL using the following SQL query: “select column2Hash,
column2Cipher from q where column1Hash=vh
k2 ”. Assuming
that the SQL query returns hwh
k3 , ∗i for column 2 (i.e., y),
esat returns the substitution [hx, vh
k3 , ∗, q.2i].
k1 , ∗, p.1i, hy, wh
k1 to vh
Obtaining ereduceDET from ereduceKH. As described
above, ereduceKH tracks the provenance of the encrypted
data value required for audit. This is not required when
logs are encrypted using EunomiaDET in place of EunomiaKH.
Therefore, ereduceDET is a simpliﬁcation of ereduceKH. In
ereduceDET, the substitution σ maps variables to determin-
istic ciphertexts. Further, in the rules R-P and S-P, no
adjustment is needed.
6.3 Properties
We have proved the functional correctness of both algo-
rithms, ereduceDET and ereduceKH. We show the correct-
ness theorem for ereduceKH below. The theorem states
that the result of decrypting the output (residual policy)
of ereduce on a EunomiaKH-encrypted log and the output
of reduce on the corresponding plaintext log are equal with
high probability. A low probability exception exists because
hash collisions are possible in EunomiaKH (but very unlikely).
The function EncryptSubstitutionKH encrypts a plaintext sub-
stitution with provenance.
It is very similar to the func-
tion EncryptPolicyConstantsKH (Section 4.3). The notation
χI ⊢ ϕP : δ refers to the EQ mode check, which is described
in Section 7.
Theorem 4 (Correctness of ereduceKH) For all plain-
text policies ϕP and ψP, for all constant encrypted policies ϕE
and ψE, for all database schema S, for all plaintext audit logs
L = hDB, T i, for all encrypted audit logs eL = heDB, eT i,
for all plaintext substitutions σP, for all encrypted substitu-
tions σE, for all χI , for all equality schemes δ, for all security
parameters κ, for all encryption keys K, for all token lists ~∆,
if all of the following hold: (1) χI ⊢ ϕP : δ, (2) [σP] ⊇ χI , (3)
K = KeyGenKH(κ, S), ~∆ = GenerateToken(S, δ, K), (4) eL =
EncryptLogKH(L, S, K), (5) ϕE = EncryptPolicyConstantsKH(
ϕP, K), (6) AKH key adjustment is correct, (7) σE = Encrypt
SubstitutionKH(σP, K), (8) ψP = reduce(L, σP, ϕP), (9) ψE =
ereduceKH(eL, ϕE, ~∆, σE), and (10) ψ′
P = DecryptPolicyCons
tantsKH(ψE, K), then ψp = ψ′
P with high probability.
The correctness theorem for ereduceDET is similar.
7. EQ MODE CHECK
We now present the EQ mode check, which is a static anal-
ysis of policies that serves two purposes: (i) It ensures that
ereduce terminates for any policy that passes the check and
(ii) It outputs the equality scheme δ of the policy, which is
needed for both EunomiaDET and EunomiaKH (see Section 4).
The EQ mode check runs time linear in the size of the
∀k ∈ I(p). tk ∈ Var → tk ∈ FE(χI )
htj , p.ji
χO = χI ∪
[
j∈O(p)∧tj ∈Var∧tj /∈FE(χI )
δ = {hp′.i, p.li | 0 < l ≤ α(p) ∧ tl ∈ Var
∧htl, p′.ii ∈ χI }
χI ⊢g p(t1, . . . , tn) : hχO, δi
g-Pred
χI ⊢g g1 : hχ, δ1i
χ ⊢g g2 : hχO, δ2i
χI ⊢g g1 ∧ g2 : hχO, δ1 ∪ δ2i
χI ⊢g g1 : hχ1, δ1i
χI ⊢g g2 : hχ2, δ2i
χI ⊢g g1 ∨ g2 : hχ1 ⋓ χ2, δ1 ∪ δ2i
g-Conj
g-Disj
Figure 3: Selected χI ⊢g g : hχO, δi judgements
policy. The EQ mode check extends the mode check de-
scribed in [19] by additionally carrying provenance and key-
adjustment information, which are necessary for ereduceKH.
Mode speciﬁcation. The concept of “modes” comes from
logic programming [4]. Consider the following example: Pred-
icate tagged(m, q, a) is true when the message m is tagged
with principal q’s attribute a. Assuming that the number of
possible messages in English language is inﬁnite, the num-
ber of concrete values for variables m, q, and a for which
tagged holds is also inﬁnite. However, if we are given a
concrete message (i.e., concrete value for the variable m),
then the number of concrete values for q and a for which
tagged holds is ﬁnite. Hence, we say the predicate tagged’s
argument position 1 is the input position (denoted by “+”)
whereas the argument positions 2 and 3 are output argu-
ment positions (denoted by “−”). We call such a description
of inputs and outputs of a predicate its mode speciﬁcation.
The mode speciﬁcation of a predicate means that given con-
crete values for variables in the input positions, the number
of concrete values for variables in the output position that
satisfy the predicate is ﬁnite. Hence, tagged(m+, q−, a−) is a
valid mode speciﬁcation whereas tagged(m−, q−, a+) is not.
EQ mode checking. EQ mode check uses the mode spec-
iﬁcation of predicates to check whether a formula is well-
moded. EQ mode check has two types of judgements: χI ⊢g
g : hχO, δi for guards, and χI ⊢ ϕ : δ for policy formulas.
Each element of the sets χI , χO is a pair of form hx, p.ai
which signiﬁes that when g or ϕ is evaluated, a concrete
value for the variable x will exist with provenance p.a.
The top level judgement χI ⊢ ϕ : δ states that given
ground values for variables in set χI , the formula ϕ is well-
moded and that audit ϕ would require the equality checking
for column pairs given by δ. We call a given policy ϕ well-
moded if there exists a δ for which we can prove {} ⊢ ϕ :
δ. The judgement ⊢ uses ⊢g as a sub-judgement in the
quantiﬁer case. We explain ⊢g ﬁrst. The judgement χI ⊢g
g : hχO, δi states that given concrete values for variables in
the set χI , the number of concrete values for variables in
the set χO (χO is a subset of the free variables of g) for
which the formula g holds true is ﬁnite. It also outputs the
column pairs which may be checked for equality during the
evaluation of g.
Selected mode checking rules for guards are listed in Fig-
ure 3. We explain these rules using an example. We show
how to check the formula g = (p(x−)∨q(x−, z−))∧r(x+, y−)
with χI = {}. The function I (resp., O) takes as input a
1140predicate p and returns all input (resp., output) argument
positions of p. For instance, I(r) = {1} and O(r) = {2}.
1 = p(x−) and gd
First, the rule G-CONJ applies. The ﬁrst premise of
G-CONJ requires that gc
1 = (p(x−) ∨ q(x−, z−)) is well-
moded with χI = {}. The rule G-DISJ can be used to
check the well-modedness of gc
1 with χI = {}. The ﬁrst
and second premise require gd
2 = q(x−, z−)
to be independently well-moded with the input χI = {}.
While checking p(x−) with χI = {} we see that the rule
G-PRED applies. The ﬁrst premise of G-PRED checks
whether all input variables of p, none in this case, are in-
cluded in χI ; this is trivially satisﬁed here. We use an
auxiliary function FE for checking this, deﬁned as follows:
FE(χI ) = {x | ∃p, i.hx, p.ii ∈ χI }. When p is evaluated,
we will get concrete values for variable(s) in output posi-
tions of p (i.e., x in this case with provenance p.1), hence
χO = {hx, p.1i}. This is formalized in premise 2. Finally,
because χI = {}, so we will not need any equality compar-
isons in evaluating p, so δ = {} (premise 3). Similarly, we
can derive, {} ⊢g q(x−, z−) : h{hx, q.1i, hz, q.2i}, {}i. Once
we have established that both gd
2 are well-moded, we
see that we are only guaranteed to have a concrete value
for variable x after gd
1 is true we
will not get any concrete value for z, which appears only in
gd
2 ), but x can have provenance p.1 or q.1. We have to keep
track of both, which is captured using the ⋓ operator de-
ﬁned as follows: χ1 ⋓ χ2 = {hx, p1.a1i | ∃p2, a2.((hx, p1.a1i ∈
χ1 ∧ hx, p2.a2i ∈ χ2)W(hx, p1.a1i ∈ χ2 ∧ hx, p2.a2i ∈ χ1)).}.
1 : h{hx, p.1i, hx, q.1i}, {}i.
1 ∨ gd
2 has evaluated (if gd
1 and gd
So we have, {} ⊢g gc
Next, we return to the second premise of G-CONJ, which
requires that r(x+, y−) be well-moded with respect to χ =
{hx, p.1i, hx, q.1i}. The rule G-PRED applies again.
Its
ﬁrst premise, which requires that variables in input argu-
ment position (x in this case) be included in χI , is satisﬁed.
According to the second premise, we will get concrete values
for y with provenance r.2 when the predicate is evaluated,
so χO = {hx, p.1i, hx, q.1i, hy, r.2i}. Finally, a concrete value
for x (with provenance p.1 or q.1) is needed while evaluat-
ing r (x an input argument of r), hence we need to check
for equality between the following column pairs, p.1, r.1 and
q.1, r.1. Therefore, δ = {hp.1, r.1i, hq.1, r.1i}.
Top-level mode checking rules for policy formulas are very
similar to those for guards, except that formulas do not
ground variables. We show the rule for universal quantiﬁca-
tion below. Recall that the audit algorithm ereduce checks
formulas of the form ∀~x. (g → ϕ) by ﬁrst obtaining all sub-
stitutions for ~x that satisfy g and then checking whether ϕ
holds for each of these substitution.
χI ⊢g g : hχO, δgi
~x ⊆ FE(χO)
f v(g) ⊆ FE(χI ) ∪ {~x}
χO ⊢ ϕ : δc