  * Grimple：适用于反编译和代码检查的Jimple汇总版本。
##### 产品概要
github仓库：
##### 技术分析及使用
支持分析的格式包含Java字节码(
或者从java Doc的下载地址：
  * 使用
    # 变量声明
    # soot的jar包路径
    export SOOT_PATH=/path/to/soot/soot-4.2.1-jar-with-dependencies.jar
    # soot分析时所需扫描的依赖类文件路径，多个按":"分割
    # soot-class-path 只能精确到文件，不支持目录
    export SOOT_CLASS_PATH=/path1/jar1.jar:/path2/jar2.jar
    # 分析target/classes目录下的单个入口文件
    java -cp $SOOT_PATH soot.Main -pp \
    -cp .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH org.packageName.MainClassName
    # 在字节码目录分析单个入口文件
    java -cp $SOOT_PATH soot.Main -pp \
    -cp .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH ClassName
    # 分析当前目录
    java -cp $SOOT_PATH soot.Main -pp \
    -cp .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH -process-dir .
    # 分析jar包
    java -cp $SOOT_PATH soot.Main -pp \
    -cp .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH -process-dir /path/to/jarFileName.jar
    # 绘制入口文件的控制流图
    java -cp $SOOT_PATH soot.tools.CFGViewer -pp \
     --soot-class-path .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH \
     --graph=BriefBlockGraph -d ./sootOutputGraphImg org.packageName.MainClassName
    # 绘制整个目录的控制流图 
    java -cp $SOOT_PATH soot.tools.CFGViewer -pp \
     --soot-class-path .:$JAVA_HOME/jre/lib/rt.jar:$SOOT_CLASS_PATH \
     --graph=BriefBlockGraph -process-dir .
##### 输出格式参数
详细可参考
主要用到的几个参数：
  * `-d` 输出目录路径，为指定使用默认路径为终端当前所在目录下的`./sootOutput` 文件夹
  * `-f` 输出类型，默认输出.class文件
    * J, jimple ，也是我们需要关注的IR中间表示，它位于Java源码和字节码之间，是基于类型的3地址格式
    * X, xml
    * c, class 经soot分析后重新生成的字节码
    * t, template ，反编译还原的.java文件，也是基于Jimple生成的
  * `-dump-cfg phaseName` 导出控制流图
    * `phaseName`可指定导出阶段，如-dump-cfg jb -dump-cfg bb.lso 可导出 jb 和 bb.lso阶段的构建CFG。-dump-cfg ALL则导出所有阶段的
    * 导出控制流图会触发soot的bug抛NPE异常，目前可以使用CFGViewer来导出方法签名粒度的控制流图
##### 优劣势
  * 优势
    * 支持Java字节码和源码的分析
    * 支持Android代码的分析
    * 可绘制可视化的控制流图
  * 劣势
    * soot的前端编译器已经过时，官方建议仅用作编译后文件的分析而不是源码分析
    * 当前维护版本(4.2.1)依赖高版本JDK(JDK11)，且对JDK9+的字节码分析也存在bug，而旧版soot对JDK7及以下的源码分析更是缺乏维护
    * 控制流图绘制不支持跨文件串联，而是依据包结构对每个文件生成对应的控制流图
#### ⑤PMD
##### 现状分析
PMD 是一个开源的静态代码分析工具。它用于分析一些常见的编程缺陷(未使用的变量、空捕获块、不必要的对象创建等)。
支持的语言：
  * Java
  * JavaScript
  * Apex 和 Visualforce
  * Modelica
  * PLSQL
  * Apache Velocity
  * XML
  * XSL
  * Scala
##### 产品概要
官方文档：
Github仓库：
##### 技术分析及使用
安装运行:
  * 下载bin压缩包：
  * 执行命令：
    ./run.sh pmd \
    -d /path/to/待分析工程目录
    -R /path/to/规则集文件.xml
    -f text
  * -f 取值：默认 `text` ，支持如`xml` 、`json` 、`html` 等。详见: 
##### 规则集
  * 编写示例
            My custom rules
  * 规则分类
所有 PMD 内置规则都按照以下八个类别进行分类
**Best Practices 最佳实践** : 这些规则强制执行公认的最佳做法
**Code Style 代码风格** : 这些规则强制执行特定的编码风格
**Design 设计** : 这些规则帮助发现设计问题
**Documentation 文档** : 这些规则与代码文档有关
**Error Prone 易出错** : 用于检测破坏、极度混乱或容易出现运行时错误的构造的规则
**Multithreading 多线程** : 这些规则在处理多个执行线程时标记问题
**Performance 工作表现** : 这些规则标记未达到最佳标准的代码
**Security 安全** : 标记潜在安全缺陷的规则
详见Java的内置规则清单：
  * Security内置规则
Security相关的只有两个：
    * 硬编码密钥
    * 不安全的加密初始化向量
##### 优劣势
  * 优势
    * 可分析多种语言的源码；
    * 不需要参与代码编译；
  * 劣势
    * 不支持分析编译后文件；
    * 内置安全规则较为薄弱，SAST所需规则均需要自定义编写；
### 白盒静态扫描战斗机——CodeQL
### 简介
CodeQL是 Github
安全实验室推出的一款静态代码分析引擎，其利用QL语言对代码、执行流程等进行“查询”，以此实现对代码的安全性白盒审计，进行漏洞挖掘
### 整体流程
  * 通过适配各个语言的AST解析器，并将代码的AST解析结果按照预设好的数据模型将代码AST数据及其依赖关系存储到CodeDB里
  * 通过QL语言定义污点追踪漏洞模型
  * 执行QL时通过高效的搜索算法对CodeDB的AST元数据进行高效查询，从而在代码中搜索出漏洞结果
### 优点
  * 以CodeDB的模式存储源代码数据，并提供高效的搜索算法及QL语言对漏洞进行查询，支持数据流与控制流，使用者无需考虑跨文件串联的算法难度
  * 支持除PHP以外的常见语言类型
  * QL规则开源且正在迭代，有很非常强的可扩展性及支持定制化规则能力
  * QL规则有相应的文档学习，无需依赖厂商支持
  * 可以深入Jar包进行漏洞扫描
### 缺点
  * AST分析引擎不开源，无法针对AST的元数据进行调整修改，并且官方申明只用于研究用途，不允许企业集成至CI/CD流程
  * 不支持运行时动态绑定的重载方法分析（其他SAST产品的也不支持）
  * 不支持Resource文件的扫描，不做二次开发的情况下无法支持类似Mybatis XML配置的场景
  * 不支持软件成分分析，无法结合软件版本进行漏洞判断
### 评价
CodeQL为白盒漏洞扫描提供了一些新的思路
  * 通过格式化AST数据将它们进行结构化存储，再通过高效率的有向图搜索/裁剪算法支持对这些元数据进行基本查询
  * 通过对不同语言的适配，把一些常用的查询封装成QL语言，对AST数据进行一种类SQL的查询
  * 通过QL语言定义漏洞查询三元组（即污点追踪）可进行漏洞查询建模，并且由于查询可以直接搜索AST元数据，可以对DataFlow以及ControlFlow进行更细致的判断，以减少误报、漏报
  * 通过悬赏开源社区收录QL规则，保障了规则的迭代更新
  * 通过CodeQL的开源规则以及Github庞大的开源代码及迭代数据，实现打标能力为后续LGTM平台的神经网络学习提供学习样本
## 总结
在调研了大量的开源SAST的产品方案后，我们发现CodeQL作为Github安全实验室的产品，基本上代表了开源产品的在SAST领域的最佳实践（LGTM平台化及平台里AI训练场景暂不讨论），但由于官方申明不支持企业集成到CI/CD流程，于是我们选择参照CodeQL的设计思路，使用Spoon（Java
AST解析器）加上自研跨文件串联能力作为扫描引擎的自研方案。后面的文章我们将详细分析SAST的技术原理以及58基础安全团队学习CodeQL的过程及教程输出。
扫码关注58安全应急响应中心官方微信公众号，第一时间获得最新消息