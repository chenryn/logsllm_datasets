 json_query   
------------  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' DEFAULT '"empty"' ON EMPTY);  
 json_query   
------------  
 "empty"  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON EMPTY NULL ON ERROR);  
 json_query   
------------  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON EMPTY EMPTY ARRAY ON ERROR);  
 json_query   
------------  
 []  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON EMPTY EMPTY OBJECT ON ERROR);  
 json_query   
------------  
 {}  
(1 row)  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON EMPTY ERROR ON ERROR);  
ERROR:  no SQL/JSON item  
SELECT JSON_QUERY(jsonb '[]', '$[*]' ERROR ON ERROR);  
 json_query   
------------  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' ERROR ON ERROR);  
ERROR:  JSON path expression in JSON_QUERY should return singleton item without wrapper  
HINT:  use WITH WRAPPER clause to wrap SQL/JSON item sequence into array  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' DEFAULT '"empty"' ON ERROR);  
 json_query   
------------  
 "empty"  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING json);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING json FORMAT JSON);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING jsonb);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING jsonb FORMAT JSON);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING text);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING char(10));  
 json_query   
------------  
 [1, 2]      
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING char(3));  
 json_query   
------------  
 [1,  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING text FORMAT JSON);  
 json_query   
------------  
 [1, 2]  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING bytea);  
   json_query     
----------------  
 \x5b312c20325d  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$' RETURNING bytea FORMAT JSON);  
   json_query     
----------------  
 \x5b312c20325d  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING bytea EMPTY OBJECT ON ERROR);  
 json_query   
------------  
 \x7b7d  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING bytea FORMAT JSON EMPTY OBJECT ON ERROR);  
 json_query   
------------  
 \x7b7d  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING json EMPTY OBJECT ON ERROR);  
 json_query   
------------  
 {}  
(1 row)  
SELECT JSON_QUERY(jsonb '[1,2]', '$[*]' RETURNING jsonb EMPTY OBJECT ON ERROR);  
 json_query   
------------  
 {}  
(1 row)  
SELECT  
	x, y,  
	JSON_QUERY(  
		jsonb '[1,2,3,4,5,null]',  
		'$[*] ? (@ >= $x && @  i)  
	CONSTRAINT test_jsonb_constraint4  
		CHECK (JSON_QUERY(js::jsonb, '$.a' WITH CONDITIONAL WRAPPER EMPTY OBJECT ON ERROR)   'a' COLLATE "C")  
	CONSTRAINT test_jsonb_constraint6  
		CHECK (JSON_EXISTS(js::jsonb, 'strict $.a' RETURNING int TRUE ON ERROR)  i)  
    "test_jsonb_constraint4" CHECK (JSON_QUERY(js::jsonb, '$."a"' RETURNING jsonb WITH CONDITIONAL WRAPPER EMPTY OBJECT ON ERROR)  ('a'::bpchar COLLATE "C"))  
    "test_jsonb_constraint6" CHECK (JSON_EXISTS(js::jsonb, 'strict $."a"' RETURNING integer TRUE ON ERROR)  i))  
 ((JSON_QUERY((js)::jsonb, '$."a"' RETURNING jsonb WITH CONDITIONAL WRAPPER EMPTY OBJECT ON ERROR)  ('a'::bpchar COLLATE "C")))  
 ((JSON_EXISTS((js)::jsonb, 'strict $."a"' RETURNING integer TRUE ON ERROR) < 2))  
(6 rows)  
SELECT pg_get_expr(adbin, adrelid) FROM pg_attrdef WHERE adrelid = 'test_jsonb_constraints'::regclass;  
                                  pg_get_expr                                     
--------------------------------------------------------------------------------  
 JSON_QUERY('[1, 2]'::jsonb, '$[*]' RETURNING jsonb WITH UNCONDITIONAL WRAPPER)  
(1 row)  
INSERT INTO test_jsonb_constraints VALUES ('', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint1"  
DETAIL:  Failing row contains (, 1, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('1', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint2"  
DETAIL:  Failing row contains (1, 1, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('[]');  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint2"  
DETAIL:  Failing row contains ([], null, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('{"b": 1}', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint2"  
DETAIL:  Failing row contains ({"b": 1}, 1, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('{"a": 1}', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint3"  
DETAIL:  Failing row contains ({"a": 1}, 1, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('{"a": 7}', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint5"  
DETAIL:  Failing row contains ({"a": 7}, 1, [1, 2]).  
INSERT INTO test_jsonb_constraints VALUES ('{"a": 10}', 1);  
ERROR:  new row for relation "test_jsonb_constraints" violates check constraint "test_jsonb_constraint4"  
DETAIL:  Failing row contains ({"a": 10}, 1, [1, 2]).  
DROP TABLE test_jsonb_constraints;  
-- Test mutabilily od query functions  
CREATE TABLE test_jsonb_mutability(js jsonb);  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a[0]'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime()'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@ < $.datetime())'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@.datetime() < $.datetime())'));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@.datetime() < $.datetime("HH:MI TZH"))'));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@.datetime("HH:MI TZH") < $.datetime("HH:MI TZH"))'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@.datetime("HH:MI") < $.datetime("YY-MM-DD HH:MI"))'));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.a ? (@.datetime("HH:MI TZH") < $.datetime("YY-MM-DD HH:MI"))'));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime("HH:MI TZH") < $x' PASSING '12:34'::timetz AS x));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime("HH:MI TZH") < $y' PASSING '12:34'::timetz AS x));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime() < $x' PASSING '12:34'::timetz AS x));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime() < $x' PASSING '1234'::int AS x));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime() ? (@ == $x)' PASSING '12:34'::time AS x));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$.datetime("YY-MM-DD") ? (@ == $x)' PASSING '2020-07-14'::date AS x));  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$[1, $.a ? (@.datetime() == $x)]' PASSING '12:34'::time AS x));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$[1, 0 to $.a ? (@.datetime() == $x)]' PASSING '12:34'::time AS x));  
ERROR:  functions in index expression must be marked IMMUTABLE  
CREATE INDEX ON test_jsonb_mutability (JSON_QUERY(js, '$[1, $.a ? (@.datetime("HH:MI") == $x)]' PASSING '12:34'::time AS x));  
DROP TABLE test_jsonb_mutability;  
```  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")