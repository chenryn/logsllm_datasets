title:Network planning with deep reinforcement learning
author:Hang Zhu and
Varun Gupta and
Satyajeet Singh Ahuja and
Yuandong Tian and
Ying Zhang and
Xin Jin
Network Planning with
Deep Reinforcement Learning
Hang Zhu
Johns Hopkins University
Yuandong Tian
Facebook Inc.
Varun Gupta
Facebook Inc.
Ying Zhang
Facebook Inc.
Satyajeet Singh Ahuja
Facebook Inc.
Xin Jin
Peking University
ABSTRACT
Network planning is critical to the performance, reliability and cost
of web services. This problem is typically formulated as an Integer
Linear Programming (ILP) problem. Today’s practice relies on hand-
tuned heuristics from human experts to address the scalability
challenge of ILP solvers.
In this paper, we propose NeuroPlan, a deep reinforcement learn-
ing (RL) approach to solve the network planning problem. This
problem involves multi-step decision making and cost minimiza-
tion, which can be naturally cast as a deep RL problem. We develop
two important domain-specific techniques. First, we use a graph
neural network (GNN) and a novel domain-specific node-link trans-
formation for state encoding, in order to handle the dynamic nature
of the evolving network topology during planning decision making.
Second, we leverage a two-stage hybrid approach that first uses
deep RL to prune the search space and then uses an ILP solver to
find the optimal solution. This approach resembles today’s prac-
tice, but avoids human experts with an RL agent in the first stage.
Evaluation on real topologies and setups from large production
networks demonstrates that NeuroPlan scales to large topologies
beyond the capability of ILP solvers, and reduces the cost by up to
17% compared to hand-tuned heuristics.
CCS CONCEPTS
· Networks → Network management; · Theory of computa-
tion → Reinforcement learning;
KEYWORDS
Network planning, Reinforcement learning, Graph neural network
ACM Reference Format:
Hang Zhu, Varun Gupta, Satyajeet Singh Ahuja, Yuandong Tian, Ying Zhang,
and Xin Jin. 2021. Network Planning with Deep Reinforcement Learning.
In ACM SIGCOMM 2021 Conference (SIGCOMM ’21), August 23ś28, 2021,
Virtual Event, Netherlands. ACM, New York, NY, USA, 14 pages. https://doi.
org/10.1145/3452296.3472902
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08. . . $15.00
https://doi.org/10.1145/3452296.3472902
1 INTRODUCTION
Large-scale web services rely on high-performance, reliable Wide
Area Networks (WANs). From cloud computing and big data, to
Artificial Intelligent (AI) and Internet of Things (IoT), the demand
for WAN bandwidth keeps growing rapidly under these technology
trends [2]. Network planning is a regular, critical process to plan
and upgrade WANs, in order to meet the performance and reliability
requirements of web services while minimizing the cost.
Network planning is a hard combinatorial optimization problem.
Cross-layer decisions that involve both the IP layer and the optical
layer need to be made. The planned network must satisfy certain
service expectations specified by the operator, which include both
performance requirements (e.g., sufficient bandwidth for given traf-
fic matrices) and reliability requirements (e.g., robust to failures).
The cross-layer nature of the problem makes it particularly chal-
lenging as a failure in the optical layer may affect multiple links in
the IP layer. Given the high cost of building WANs, network plan-
ning must minimize the network cost while satisfying the service
expectation requirements.
To solve this problem, we can formulate network planning as an
Integer Linear Programming (ILP) problem. The constraints encode
the service expectations and the objective is to minimize the cost.
We can use an off-the-shelf ILP solver, such as Gurobi [19] and
CPLEX [11], to find the optimal solution that satisfies the service
expectations and has the minimum cost.
The key problem of the naive ILP approach is scalability. It does
not scale to large topologies beyond tens of nodes. In practice, op-
erators integrate hand-tuned heuristics from human experts into
the process, e.g., adding human-designed constraints to limit the
search space of the ILP solver. These heuristics need to make a
trade-off between the optimality of the solution and the tractabil-
ity of the problem. Further, even highly-skilled experts require
many iterations to find such a good trade-off manually. Accounting
for the time to run ILP for each iteration, this approach not only
requires extensive human expertise and involvement, but is also
time-consuming. Moreover, there are no universal heuristics that
can achieve a good trade-off for all networking planning scenar-
ios. Operators have to manually examine and repeat the iterative
process for every scenario.
In this paper, we propose NeuroPlan, a deep reinforcement learn-
ing (RL) approach to solve the network planning problem. There
are two characteristics of this problem that make it a good fit for
RL. First, network planning needs to make multiple decisions on
258
SIGCOMM ’21, August 23–28, 2021, Virtual Event, Netherlands
the IP and optical layers, and multi-step decision making is ex-
actly the kind of problems that RL is designed to solve. Recent
results have demonstrated the capability of RL in solving hard com-
binatorial problems that cannot be easily solved by conventional
solutions [28, 32, 45]. Second, the effects of the decisions (e.g., de-
ciding the capacity of one IP link) can only be evaluated once the
entire network has been planned. Hand-tuned heuristics often fo-
cus on local decisions to maximize (implicit) local metrics, while
RL is designed to handle delayed rewards and explicitly optimize
for the global objective.
While many problems in different domains have these charac-
teristics, it is particularly appealing to apply deep RL to network
planning. Deep RL is notorious for its high sample complexity.
Many domains rely on simulations to obtain enough samples for
training. Yet, there is a gap between simulation and practice (e.g.,
in robotics), and this is a major obstacle for deep RL solutions to
be used. In network planning, however, there is no such gap. A
network plan generated by an RL agent can be accurately and effi-
ciently evaluated by calculating its cost and checking the service
expectation requirements at the cost of cheap CPU cycles in the
same way as a plan evaluator is used now in production by network
operators. And many network plans can be sampled to train the RL
agent.
Given the potential of this deep RL approach, we need to address
two technical challenges to realize its promise. First, we need to
represent the network topology with various numbers of nodes
and links into a state vector for the RL agent to use, and the repre-
sentation needs to handle topology dynamics when the RL agent
applies actions to change the topology (e.g., adding IP capacity).
We address this problem by encoding the network topology with a
graph neural network (GNN) and learn an embedding vector repre-
sentation. Moreover, we design a novel domain-specific node-link
transformation to transform the topology before feeding it to the
GNN. This transformation is critical because network planning is
primarily concerned with the bandwidth provided by links and
directly using GNNs cannot handle parallel links.
Second, deep RL is not a panacea. One straightforward approach
is to directly use it to generate the final network plan. Deep RL can
learn to find reasonably good solutions relatively quickly, but given
the combinatorial nature of the problem, converging to the opti-
mal solution is fundamentally hard. Instead, we leverage a hybrid
approach which contains two stages. The first stage uses deep RL
to learn to prune the search space, and the second stage uses an
ILP solver to find the optimal solution. Because the search space
has been pruned significantly by deep RL, the ILP solver can finish
the second stage quickly. This approach resembles today’s practice
of using hand-tuned heuristics to prune the search space. Remark-
ably, our approach does so without the need of human expertsÐthe
RL agent replaces human experts to automatically generate pruning
strategies.
Our approach is incrementally deployable and interpretable. Net-
work operators can examine the pruning strategies generated by
deep RL and check whether they match their intuition and expe-
rience for interpretability. NeuroPlan is not intrusive to the cur-
rent practice of network planning. Network operators can decide
whether to incorporate the pruning strategies generated from RL
together with their hand-designed strategies. Alternatively, they
Hang Zhu, Varun Gupta, Satyajeet Singh Ahuja,
Yuandong Tian, Ying Zhang, Xin Jin
can keep using their existing tools to generate network plans, and
compare these plans with that generated by NeuroPlan to decide
which plan to use. In addition, NeuroPlan also provides a knob for
operators to easily and explicitly tune between optimality and run-
ning time of the ILP solver. We are in the process of incorporating
this solution to the operational planning process in a large WAN.
In summary, we make the following contributions.
• We propose NeuroPlan, a deep RL approach to solve the network
planning problem.
• We design domain-specific techniques based on GNNs and node-
link transformation for state encoding, and leverage a hybrid
approach to find the optimal solution.
• We implement a NeuroPlan prototype. Evaluation on real topolo-
gies and setups from production networks demonstrates that
NeuroPlan scales to large topologies beyond the capability of ILP
solvers, and reduces the cost by up to 17% compared to hand-
tuned heuristics. The 17% cost saving is significant given the high
cost (e.g., billions of dollars) of building WANs and the tremen-
dous efforts of developing and manually tuning heuristics for the
baseline, and NeuroPlan relieves humans from these efforts.
Finally, there is an emerging trend towards self-driving net-
works [24, 34, 38, 39]. The over-arching goal is to bring automa-
tion to network managementÐoperators only specify high-level
intents and networks manage themselves. While the goal is tremen-
dously attractive, it is an open question how to achieve it. In this
paper, we make a concrete step towards this goal by bringing AI
techniques and automation to an important network management
taskÐnetwork planning. Notably, our solution is not intrusive. It
demonstrates the viability of self-driving networks and the potential
of using AI techniques to relieve the burden of network operators.
Open-source. The code of NeuroPlan is open-source and is pub-
licly available at https://github.com/netx-repo/neuroplan.
2 NETWORK PLANNING PRIMER
Large content service providers operate a global network of tens of
datacenters and hundreds of Point of Presence (PoP) sites. The back-
bone network interconnecting the datacenters and PoPs typically
serves hundreds of terabits of traffic at any given time. Continuous
changes in user demands, services, and traffic patterns dictate that
the backbone network needs to continuously evolve to meet these
needs. Importantly, operational issues such as upgrading network-
ing hardware, scheduled maintenance, and failures also need to
be taken into consideration to ensure high network reliability and
performance. The network planning process is a critical step in
dimensioning the backbone network to satisfy these requirements.
The high-level goal of network planning is to determine how to
scale the network to satisfy the traffic given a future demand fore-
cast. By working with a content provider’s network planning team
closely, we summarize a few properties of a real-world network
planning process below.
First, it is cross-layer as it considers both the optical layer and
the IP layer. At the IP layer, it determines the amount of capacity
in Gbps for each IP link, as well as the number of transponders
259
Network Planning with Deep Reinforcement Learning
SIGCOMM ’21, August 23–28, 2021, Virtual Event, Netherlands
Site
Fiber
IP Link
Failure
IP Link 1
IP Link 1
A
B
E
C
F
B
D
A
IP Link 3
E
C
F
D
IP Link 2
IP Link 4
IP Link 2
(a) Short-term planning.
(b) Long-term planning.
Figure 1: An example for network planning to satisfy a
100Gbps flow from A to D under any of the three single-fiber
failures. (a) Short-term planning uses two IP links A-B-C-D
and A-E-F-D. (b) Long-term planning adds a new fiber B-F,
and uses two IP links A-B-C-D and A-B-F-D. Other options
(e.g., using A-E-F-D and A-E-F-B-C-D) consume more fibers.
and routers to procure at each site to support such capacity. At the
optical layer, it estimates the number of fibers to turn on, as well
as new fiber path to build or purchase. Across layers, it layouts