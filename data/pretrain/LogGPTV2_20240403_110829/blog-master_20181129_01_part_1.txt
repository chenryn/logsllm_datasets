## PostgreSQL 多维、图像 欧式距离、向量距离、向量相似 查询优化 - cube,imgsmlr - 压缩、分段、异步并行   
### 作者                                                                                         
digoal                                                                                         
### 日期                                                                                         
2018-11-25                                                                                     
### 标签                                                                                         
PostgreSQL , 多维 , 图像 , cube , imgsmlr , 压缩 , 分段 , 异步并行 , 欧式距离      
----                                                                                         
## 背景      
向量相似搜索越来越流行，PostgreSQL imgsmlr，cube插件分别应用于向量类型的存储，以及向量距离排序输出搜索。  
imgsmlr插件的signature类型为64字节的数据类型，存储16个FLOAT4的浮点数向量（实际上是图像特征值向量）。可用于向量搜索。  
cube，存储的是float8浮点数向量，最多存储100个维度。可应用于更高维度的搜索。  
下面是一些例子。  
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 3 - citus 8机128shard (4亿图像)》](../201809/20180904_04.md)    
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)    
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 1 - 单机单表 (4亿图像)》](../201809/20180904_02.md)    
[《PostgreSQL 相似搜索插件介绍大汇总 (cube,rum,pg_trgm,smlar,imgsmlr,pg_similarity) (rum,gin,gist)》](../201809/20180904_01.md)    
[《PostgreSQL 多维空间几何对象 相交、包含 高效率检索实践 - cube》](../201810/20181015_01.md)    
[《PostgreSQL 相似人群圈选，人群扩选，向量相似 使用实践 - cube》](../201810/20181011_01.md)    
由于CUBE使用的是FLOAT8存储，所以空间消耗比IMGSMLR插件翻倍。另一方面，如果向量维度特别多，即使使用GIST索引，搜索效率也会下降（特别是数据非常凌乱时）。  
### 如何优化？  
1、你可以压缩向量，比如压缩到16个FLOAT4，那么就可以使用signature存储。（图像就是这么做的，实际上imgsmlr插件中还有一个pattern类型，有16KB大小，我们根据signature向量相似排序后，可以再根据pattern精确排序）。  
2、你可以把多个向量，拆分成若干组（例如每16个一组），每个组里面取TOP N(top n可以任意指定，比如每个组取100条)，然后再计算所有维度的欧式距离。从而得到精确排序。  
## 优化例子  
使用分组的方法。  
1、创建插件  
```  
create extension imgsmlr;  
create extension cube;  
```  
2、创建测试函数，生成若干个元素的向量。  
```  
create or replace function gen_rand_sig (  
  int,  -- 向量值元素取值范围  
  int   -- 向量个数  
) returns text as $$  
  select string_agg((random()*$1)::int::text,',') from generate_series(1,$2);  
$$ language sql strict;  
```  
查询结果举例  
```  
postgres=# select gen_rand_sig(10000,16);  
                                  gen_rand_sig                                    
--------------------------------------------------------------------------------  
 7850,5374,2172,304,8818,2998,2770,6007,5231,7403,5174,3458,8077,6957,9327,5752  
(1 row)  
```  
3、创建测试表，一个80维的向量，拆分成5组，每组16个FLOAT4。  
```  
create table test_sig (  
  id int primary key,   -- 主键  
  c1 text,   -- 第一组，16个float4，逗号分隔  
  c2 text,   
  c3 text,   
  c4 text,   
  c5 text  -- 第五组  
);  
```  
插入100万行数据  
```  
insert into test_sig select id,   
  gen_rand_sig(10000,16),  
  gen_rand_sig(10000,16),  
  gen_rand_sig(10000,16),  
  gen_rand_sig(10000,16),  
  gen_rand_sig(10000,16)   
from generate_series(1,1000000) t(id);  -- 100万记录    
```  
示例数据  
```  
postgres=# \x  
Expanded display is on.  
postgres=# select * from test_sig limit 2;  
-[ RECORD 1 ]-----------------------------------------------------------------------  
id | 1  
c1 | 9239,1446,880,6788,7451,3268,8408,2867,6087,4559,2866,7627,5542,8344,4197,3393  
c2 | 3717,6369,3697,2535,9367,6466,8542,4598,3869,3716,8056,1947,673,7384,7699,9912  
c3 | 8830,8579,6699,6281,1847,5107,9147,7934,9666,2014,5561,5209,357,9758,8601,4075  
c4 | 6127,2298,6610,5494,8764,5152,93,2634,8868,8149,4580,9542,5532,2279,9454,4362  
c5 | 858,6153,643,2705,1260,9790,639,927,1804,6200,6135,2161,5958,4737,6236,2085  
-[ RECORD 2 ]-----------------------------------------------------------------------  
id | 2  
c1 | 7035,2846,7579,5799,7998,7671,8433,6866,5820,3013,6408,1352,5292,5862,5714,6150  
c2 | 2015,6357,8855,3275,6147,9494,4201,7951,5694,337,112,1651,5073,6347,3736,2108  
c3 | 9193,1315,7907,7191,8986,6340,4057,4806,9353,465,6159,4646,6327,1873,796,8342  
c4 | 8230,9651,1616,4377,9145,5818,2328,4839,6154,2440,6490,1228,8787,226,3336,7980  
c5 | 1541,1243,5171,527,7583,9229,5333,6936,9694,1491,1581,6021,3364,2377,4362,1594  
```  
4、创建索引  
创建索引（使用imgsmlr signature类型）  
```  
create index idx_test_sig_1 on test_sig using gist ((('('||c1||')')::signature));  
create index idx_test_sig_2 on test_sig using gist ((('('||c2||')')::signature));  
create index idx_test_sig_3 on test_sig using gist ((('('||c3||')')::signature));  
create index idx_test_sig_4 on test_sig using gist ((('('||c4||')')::signature));  
create index idx_test_sig_5 on test_sig using gist ((('('||c5||')')::signature));  
```  
创建索引（使用cube类型）(可选，除非你没有imgsmlr插件，否则建议使用imgsmlr，因为只需要64字节)  
```  
/*  
create index idx_test_sig_1 on test_sig using gist ((('('||c1||')')::cube));  
create index idx_test_sig_2 on test_sig using gist ((('('||c2||')')::cube));  
create index idx_test_sig_3 on test_sig using gist ((('('||c3||')')::cube));  
create index idx_test_sig_4 on test_sig using gist ((('('||c4||')')::cube));  
create index idx_test_sig_5 on test_sig using gist ((('('||c5||')')::cube));  
*/  
```  
创建80个维度的大索引(用于对比性能)  
```  
create index idx_test_sig_6 on test_sig using gist ((('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube));  
```  
5、生成5组测试向量，用于如下测试  
```  
postgres=# select gen_rand_sig(10000,16);  
                                 gen_rand_sig                                    
-------------------------------------------------------------------------------  
 4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905  
(1 row)  
postgres=# select gen_rand_sig(10000,16);  
                                 gen_rand_sig                                   
------------------------------------------------------------------------------  
 4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976  
(1 row)  
postgres=# select gen_rand_sig(10000,16);  
                                  gen_rand_sig                                    
--------------------------------------------------------------------------------  
 467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519  
(1 row)  
postgres=# select gen_rand_sig(10000,16);  
                                 gen_rand_sig                                    
-------------------------------------------------------------------------------  
 8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213  
(1 row)  
postgres=# select gen_rand_sig(10000,16);  
                                  gen_rand_sig                                    
--------------------------------------------------------------------------------  
 8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191  
(1 row)  
```  
6、查询语句如下，每一组返回欧式距离最小的100条，然后再计算80个维度，最后选出1条欧式距离最小的。  
如果使用的是cube类型，写法如下  
```  
with   
a as (select id from test_sig order by (('('||c1||')')::cube)  cube '(4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905)' limit 100),  
b as (select id from test_sig order by (('('||c2||')')::cube)  cube '(4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976)' limit 100),  
c as (select id from test_sig order by (('('||c3||')')::cube)  cube '(467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519)' limit 100),  
d as (select id from test_sig order by (('('||c4||')')::cube)  cube '(8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213)' limit 100),  
e as (select id from test_sig order by (('('||c5||')')::cube)  cube '(8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191)' limit 100)  
select id, (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube) sig from test_sig where id = any (array(  
select id from a   
union all   
select id from b   
union all   
select id from c   
union all   
select id from d   
union all   
select id from e   
)) order by (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube)    
cube '(4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905,4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976,467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519,8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213,8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191)'   
limit 1;  
```  
如果使用的是imgsmlr signature类型，写法如下  
```  
with   
a as (select id from test_sig order by (('('||c1||')')::signature)  signature '(4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905)' limit 100),  
b as (select id from test_sig order by (('('||c2||')')::signature)  signature '(4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976)' limit 100),  
c as (select id from test_sig order by (('('||c3||')')::signature)  signature '(467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519)' limit 100),  
d as (select id from test_sig order by (('('||c4||')')::signature)  signature '(8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213)' limit 100),  
e as (select id from test_sig order by (('('||c5||')')::signature)  signature '(8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191)' limit 100)  
select id, (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube) sig from test_sig where id = any (array(  
select id from a   
union all   
select id from b   
union all   