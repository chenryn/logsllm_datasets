### GDB 调试工具的使用与选项说明

- **-g 选项**：在编译时添加 `-g` 选项会在生成的可执行文件中嵌入源代码信息，但不会将整个源文件嵌入。这使得在调试过程中，GDB 可以显示源代码行和变量值。

- **命令列表**：
  - `generate-core-file`：保存当前进程状态的核心文件。
  - `forward-search`：向前搜索。
  - `directory`：指定源文件目录。
  - `registers`：显示寄存器内容。
  - `cd`：更改当前工作目录。
  - `dynamically loaded object file`：动态加载的对象文件。
  - `add-symbol-file`：从指定文件中加载符号表。
  - `add-shared-symbol-files`：从共享对象中加载符号。
  - `aliases`：列出其他命令的别名。
  - `internals`：显示内部状态。
  - `tracepoints`：设置跟踪点。
  - `stack`：显示调用栈。
  - `data`：显示数据结构。
  - `help`：显示帮助信息。
  - `set`：设置各种参数。
  - `edit`：编辑源代码。
  - `GPLv3+`：软件许可协议。

- **GDB 提示符**：在 GDB 提示符 `(gdb)` 下输入 `help` 命令可以查看所有可用命令及其功能。例如，输入 `help files` 可以查看与文件操作相关的命令。

- **实验**：尝试将源代码改名或移动到其他位置后，再使用 GDB 调试，此时 GDB 将无法找到并显示源代码。确保 GDB 可以访问源代码文件是进行有效调试的前提。

- **常用命令简写**：许多 GDB 命令有简写形式，如 `list` 可以简写为 `l`。要列出一个函数的源代码，可以直接输入函数名。在提示符下直接按回车键会重复上一条命令。

- **列出源代码**：使用 `list` 命令可以从指定行开始列出源代码。默认情况下，一次只显示 10 行。若要继续列出后续代码，可以在 `list` 后跟起始行号，如 `list 11`。

- **断点**：通过 `break`（简写为 `b`）命令在特定行或函数处设置断点。程序运行至断点时会暂停，便于逐行检查代码。`continue`（简写为 `c`）命令用于恢复程序执行直到下一个断点。

- **单步执行与连续运行**：结合断点和单步执行（`step` 或 `s`），可以详细检查程序逻辑。`undisplay` 命令取消之前设置的显示表达式。

- **调试技巧**：合理设置断点并结合单步执行是使用调试器的基本方法。根据错误现象分析确定需要重点检查的部分，从而高效定位问题所在。

### 示例
```c
#include <stdio.h>

int add_range(int low, int high) {
    int sum = 0;
    for (int i = low; i <= high; i++) {
        sum += i;
    }
    return sum;
}

int main(void) {
    int result[100];
    int sum = 0;
    while (1) {
        scanf("%d", &result[sum]);
        sum += result[sum];
        if (result[sum] == '\n') break;
    }
    return 0;
}
```

### 编译与运行
编译上述代码，并使用 GDB 进行调试，可以发现潜在的问题。例如，在循环中，`sum` 的值可能超出数组边界，导致未定义行为。通过设置适当的断点并逐步执行，可以更准确地定位问题所在。