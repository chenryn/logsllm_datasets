-g选项的作用是在可执行文件中加入源代码的信息，
debugged process 
generate-core-file -- Save a core file with the current state of the
forward-search -- Search 
directory
registers
cd
dynamically loaded object file
add-symbol-file
add-shared-symbol-files :
List of commands:
rype
Type
Type
class.
or
tracepoints 
support
stack
data
or
aliases -- Aliases of other commands
internals
(gdb)
This GDB was configured
and
This is free software: you
License
ogram
ceakpoints
但并不是把整个源文件嵌入到可执行文件中，
 line listed
"help"
Set
 is NO WARRANTY,
Use FILE 
Edit
GPLv3+:
Examining the
 -- Use FILE as core dump for examining memory and 
 Support
Running
 Add directory DIR to beginning of search path for
11
word
Tracing of program execution without stopping the
 Making program stop at certain points
 GNU
as program
 Load symbols from FILE 
GPL 
to
-- Load the symbols from shared objects in
as
version
 for regular expression (see regex(3)) from
 program for
commands
to
，例如查看files类别下有哪些命令可用：
上面的(gdb)就是提示符，在这个提示符下输入help可以
.html>
O DIR for debugger and program being
for
be debugged
Load the symbols out of memory from a
3 or later 
Jfiles
C
commands
，比如可执行文件中第几条机器指令对应源代码
 getting contents of pure memory
，所以在调试时必须保证gdb能找到源文 
" show
5
---
## Page 158
我们做一个实验，把源代码改名或移到别处再用gdb调试，这样就列不出源代码了：
现在退出gdb的环境:
做参数：
gabe的很多常用命令有简写形式，例如1ist命令可以写成1，要列一个函数的源代码也可以用函数名
也可以什么都不输直接敲回车，gdb提供了一个很方便的功能，在提示符下直接敲回车表示重复上
现在试试用list命令从第一行开始列出源代码：
一条命令。
一次只列10行，如果要从第11行开始继续列源代码可以输入
list -- List specified function or line
(gdb） quit
(gdb) l add_range
result[1]);
(gdb）list
9
5
(gdb）
(gdb) list 1
2
#include 
(直接回车)
int add_range(int low, int high)
int main(void)
int add_range(int low, int high)
#include 
int result[l00];
iot ( sumow
return sum;
return 0;
result
result[
return sum;
0]
sum
sum
low; i 
return 0;
while（l）{
scanf("%s"
下面编译运行程序看看有什么问题：
全国嵌入式人才培训基地
i= 0;
...........
第10章gdb
2.断点
input)!
‘\o';, i++),
，然后转换成整型存到sum中，
".0...
，例如输入
，并自
---
## Page 164
过而哪些代码要慢慢走，也要通过对错误现象的分析和假设来确定，以前我们用printf打印中间结
问题暴露出来了，
然后输入新的字符串准备转换:
连续运行而非单步运行，程序到达断点会自动停下来，这样就可以停在下一次循环的开头：
break命令的参数也可以是函数名，
示。这个循环应该没有问题，因为上面第一次输入时打印的结果是正确的。
undisplay命令可以取消跟踪显示,
示当前sum的值，然后继续往下走:
析
个循环，
有了上一次的经验,
“断点加单步"是使用调试器的基本方法。至于应该在哪里设置断点，
(gdb) c
Breakpoint 2 at 0x80483bc: file main.c, line 9.
8
9
5
可以用break命令（简写为b）在第9行设一个断点（Breakpoint）：
S
main () at main.c:5
0
6q (qp6)
4
23
(gdb）
0