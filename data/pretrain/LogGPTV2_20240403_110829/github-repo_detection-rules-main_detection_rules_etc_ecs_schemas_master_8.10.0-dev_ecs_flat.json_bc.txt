{"service.origin.name": {"dashed_name": "service-origin-name", "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.", "example": "elasticsearch-metrics", "flat_name": "service.origin.name", "ignore_above": 1024, "level": "core", "name": "name", "normalize": [], "original_fieldset": "service", "short": "Name of the service."}}
{"service.origin.node.name": {"dashed_name": "service-origin-node-name", "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.", "example": "instance-0000000016", "flat_name": "service.origin.node.name", "ignore_above": 1024, "level": "extended", "name": "node.name", "normalize": [], "original_fieldset": "service", "short": "Name of the service node."}}
{"service.origin.node.role": {"dashed_name": "service-origin-node-role", "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "background_tasks", "flat_name": "service.origin.node.role", "ignore_above": 1024, "level": "extended", "name": "node.role", "normalize": [], "original_fieldset": "service", "short": "Deprecated role (singular) of the service node."}}
{"service.origin.node.roles": {"dashed_name": "service-origin-node-roles", "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "[\"ui\", \"background_tasks\"]", "flat_name": "service.origin.node.roles", "ignore_above": 1024, "level": "extended", "name": "node.roles", "normalize": ["array"], "original_fieldset": "service", "short": "Roles of the service node."}}
{"service.origin.state": {"dashed_name": "service-origin-state", "description": "Current state of the service.", "flat_name": "service.origin.state", "ignore_above": 1024, "level": "core", "name": "state", "normalize": [], "original_fieldset": "service", "short": "Current state of the service."}}
{"service.origin.type": {"dashed_name": "service-origin-type", "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.", "example": "elasticsearch", "flat_name": "service.origin.type", "ignore_above": 1024, "level": "core", "name": "type", "normalize": [], "original_fieldset": "service", "short": "The type of the service."}}
{"service.origin.version": {"dashed_name": "service-origin-version", "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.", "example": "3.2.4", "flat_name": "service.origin.version", "ignore_above": 1024, "level": "core", "name": "version", "normalize": [], "original_fieldset": "service", "short": "Version of the service."}}
{"service.state": {"dashed_name": "service-state", "description": "Current state of the service.", "flat_name": "service.state", "ignore_above": 1024, "level": "core", "name": "state", "normalize": [], "short": "Current state of the service."}}
{"service.target.address": {"dashed_name": "service-target-address", "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).", "example": "172.26.0.2:5432", "flat_name": "service.target.address", "ignore_above": 1024, "level": "extended", "name": "address", "normalize": [], "original_fieldset": "service", "short": "Address of this service."}}
{"service.target.environment": {"beta": "This field is beta and subject to change.", "dashed_name": "service-target-environment", "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.", "example": "production", "flat_name": "service.target.environment", "ignore_above": 1024, "level": "extended", "name": "environment", "normalize": [], "original_fieldset": "service", "short": "Environment of the service."}}
{"service.target.ephemeral_id": {"dashed_name": "service-target-ephemeral-id", "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.", "example": "8a4f500f", "flat_name": "service.target.ephemeral_id", "ignore_above": 1024, "level": "extended", "name": "ephemeral_id", "normalize": [], "original_fieldset": "service", "short": "Ephemeral identifier of this service."}}
{"service.target.id": {"dashed_name": "service-target-id", "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.", "example": "d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6", "flat_name": "service.target.id", "ignore_above": 1024, "level": "core", "name": "id", "normalize": [], "original_fieldset": "service", "short": "Unique identifier of the running service."}}
{"service.target.name": {"dashed_name": "service-target-name", "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.", "example": "elasticsearch-metrics", "flat_name": "service.target.name", "ignore_above": 1024, "level": "core", "name": "name", "normalize": [], "original_fieldset": "service", "short": "Name of the service."}}
{"service.target.node.name": {"dashed_name": "service-target-node-name", "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.", "example": "instance-0000000016", "flat_name": "service.target.node.name", "ignore_above": 1024, "level": "extended", "name": "node.name", "normalize": [], "original_fieldset": "service", "short": "Name of the service node."}}
{"service.target.node.role": {"dashed_name": "service-target-node-role", "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "background_tasks", "flat_name": "service.target.node.role", "ignore_above": 1024, "level": "extended", "name": "node.role", "normalize": [], "original_fieldset": "service", "short": "Deprecated role (singular) of the service node."}}
{"service.target.node.roles": {"dashed_name": "service-target-node-roles", "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.", "example": "[\"ui\", \"background_tasks\"]", "flat_name": "service.target.node.roles", "ignore_above": 1024, "level": "extended", "name": "node.roles", "normalize": ["array"], "original_fieldset": "service", "short": "Roles of the service node."}}
{"service.target.state": {"dashed_name": "service-target-state", "description": "Current state of the service.", "flat_name": "service.target.state", "ignore_above": 1024, "level": "core", "name": "state", "normalize": [], "original_fieldset": "service", "short": "Current state of the service."}}
{"service.target.type": {"dashed_name": "service-target-type", "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.", "example": "elasticsearch", "flat_name": "service.target.type", "ignore_above": 1024, "level": "core", "name": "type", "normalize": [], "original_fieldset": "service", "short": "The type of the service."}}
{"service.target.version": {"dashed_name": "service-target-version", "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.", "example": "3.2.4", "flat_name": "service.target.version", "ignore_above": 1024, "level": "core", "name": "version", "normalize": [], "original_fieldset": "service", "short": "Version of the service."}}
{"service.type": {"dashed_name": "service-type", "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.", "example": "elasticsearch", "flat_name": "service.type", "ignore_above": 1024, "level": "core", "name": "type", "normalize": [], "short": "The type of the service."}}
{"service.version": {"dashed_name": "service-version", "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.", "example": "3.2.4", "flat_name": "service.version", "ignore_above": 1024, "level": "core", "name": "version", "normalize": [], "short": "Version of the service."}}
{"source.address": {"dashed_name": "source-address", "description": "Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.", "flat_name": "source.address", "ignore_above": 1024, "level": "extended", "name": "address", "normalize": [], "short": "Source network address."}}
{"source.as.number": {"dashed_name": "source-as-number", "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.", "example": 15169, "flat_name": "source.as.number", "level": "extended", "name": "number", "normalize": [], "original_fieldset": "as", "short": "Unique number allocated to the autonomous system.", "type": "long"}}
{"source.as.organization.name": {"dashed_name": "source-as-organization-name", "description": "Organization name.", "example": "Google LLC", "flat_name": "source.as.organization.name", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "source.as.organization.name.text", "name": "text", "type": "match_only_text"}], "name": "organization.name", "normalize": [], "original_fieldset": "as", "short": "Organization name."}}
{"source.bytes": {"dashed_name": "source-bytes", "description": "Bytes sent from the source to the destination.", "example": 184, "flat_name": "source.bytes", "format": "bytes", "level": "core", "name": "bytes", "normalize": [], "short": "Bytes sent from the source to the destination.", "type": "long"}}
{"source.domain": {"dashed_name": "source-domain", "description": "The domain name of the source system.\nThis value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.", "example": "foo.example.com", "flat_name": "source.domain", "ignore_above": 1024, "level": "core", "name": "domain", "normalize": [], "short": "The domain name of the source."}}
{"source.geo.city_name": {"dashed_name": "source-geo-city-name", "description": "City name.", "example": "Montreal", "flat_name": "source.geo.city_name", "ignore_above": 1024, "level": "core", "name": "city_name", "normalize": [], "original_fieldset": "geo", "short": "City name."}}
{"source.geo.continent_code": {"dashed_name": "source-geo-continent-code", "description": "Two-letter code representing continent's name.", "example": "NA", "flat_name": "source.geo.continent_code", "ignore_above": 1024, "level": "core", "name": "continent_code", "normalize": [], "original_fieldset": "geo", "short": "Continent code."}}
{"source.geo.continent_name": {"dashed_name": "source-geo-continent-name", "description": "Name of the continent.", "example": "North America", "flat_name": "source.geo.continent_name", "ignore_above": 1024, "level": "core", "name": "continent_name", "normalize": [], "original_fieldset": "geo", "short": "Name of the continent."}}
{"source.geo.country_iso_code": {"dashed_name": "source-geo-country-iso-code", "description": "Country ISO code.", "example": "CA", "flat_name": "source.geo.country_iso_code", "ignore_above": 1024, "level": "core", "name": "country_iso_code", "normalize": [], "original_fieldset": "geo", "short": "Country ISO code."}}
{"source.geo.country_name": {"dashed_name": "source-geo-country-name", "description": "Country name.", "example": "Canada", "flat_name": "source.geo.country_name", "ignore_above": 1024, "level": "core", "name": "country_name", "normalize": [], "original_fieldset": "geo", "short": "Country name."}}
{"source.geo.location": {"dashed_name": "source-geo-location", "description": "Longitude and latitude.", "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }", "flat_name": "source.geo.location", "level": "core", "name": "location", "normalize": [], "original_fieldset": "geo", "short": "Longitude and latitude.", "type": "geo_point"}}
{"source.geo.name": {"dashed_name": "source-geo-name", "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.", "example": "boston-dc", "flat_name": "source.geo.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "geo", "short": "User-defined description of a location."}}
{"source.geo.postal_code": {"dashed_name": "source-geo-postal-code", "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.", "example": 94040, "flat_name": "source.geo.postal_code", "ignore_above": 1024, "level": "core", "name": "postal_code", "normalize": [], "original_fieldset": "geo", "short": "Postal code."}}
{"source.geo.region_iso_code": {"dashed_name": "source-geo-region-iso-code", "description": "Region ISO code.", "example": "CA-QC", "flat_name": "source.geo.region_iso_code", "ignore_above": 1024, "level": "core", "name": "region_iso_code", "normalize": [], "original_fieldset": "geo", "short": "Region ISO code."}}
{"source.geo.region_name": {"dashed_name": "source-geo-region-name", "description": "Region name.", "example": "Quebec", "flat_name": "source.geo.region_name", "ignore_above": 1024, "level": "core", "name": "region_name", "normalize": [], "original_fieldset": "geo", "short": "Region name."}}