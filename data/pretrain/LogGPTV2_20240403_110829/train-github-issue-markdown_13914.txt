I am trying to call `setState({ flash: false })` followed by `setState({
flash: 'up' })` which should remove the flash class from the DOM element and
add it again, therefore triggering the css animation defined on that class (it
only works the first time).
This is not working as expected, unless I introduce some timeouts. The first
time the class is added, the animation is triggered. But subsequent calls to
`componentWillReceiveProps` fail to trigger the animation. I'm not sure if
this is an issue with the way React updates the DOM or an inherent limitation
of CSS animations. I know React has some specialised utilities for animations
but I'd rather keep the code below if there's any way to fix it.
Stat.js
    import React, { Component } from 'react'
    import { Link } from 'react-router'
    import styles from './Stat.scss'
    export default class Stat extends Component {
      constructor(props) {
        super(props)
        this.state = {
          flash: false,
        }
      }
      componentWillReceiveProps(nextProps) {
        if (nextProps.count !== this.props.count) {
          const flash = nextProps.count > this.props.count
            ? 'Up'
            : 'Down'
          this.setState({ flash: false }, () => {
            this.setState({ flash })
          })
        }
      }
      render() {
        const { count, name, href } = this.props
        const { flash } = this.state
        const flashClass = flash ? styles[`flash${flash}`] : ''
        return (
              {count}
            {name}
        )
      }
    }
Stat.scss
    $highlight-up-color: green;
    $highlight-down-color: red;
    @keyframes highlight-up {
      0% {
        color: $highlight-up-color;
      }
      100% {
        color: default;
      }
    }
    @keyframes highlight-down {
      0% {
        color: $highlight-down-color;
      }
      100% {
        color: default;
      }
    }
    .flashUp {
      animation: highlight-up 2s;
    }
    .flashDown {
      animation: highlight-down 2s;
    }