8
update Data[sid] := {GT , contract, stake, timer}
9
10 Upon Receive ReqTransInit(T, sid, P):
(GT , _, _, _) := Data[sid]; abort if not found
11
assert P is Pz
12
assert T is eligible to be opened according the state of GT
13
update T .state := init
14
compute CertiT := Cert([T, init, sid]; Sig
15
send CertiT to both {Pa, Pz } to inform action
16
17 Upon Receive ReqTransInited(T, sid, P)
(GT , _, _, _) := Data[sid]; abort if not found
18
assert P = T .from and T .state = init
19
20
21
22
compute the on-chain transaction(cid:101)T for T
update T .state := inited and T .trans :=(cid:101)T
compute CertidT := Cert([(cid:101)T , inited, sid, T]; SigP
sid)
24 Upon Receive ReqTransOpen(T, sid,(cid:101)T , P):
send CertidT to both {Pa, Pz } to inform action
assert P = T .to, T .state = inited and T .trans =(cid:101)T
(GT , _, _, _) := Data[sid]; abort if not found
compute CertoT := Cert([(cid:101)T , open, tsopen, sid, T]; SigP
update T .state = open and get tsopen := now()
sid)
30 Upon Receive ReqTransOpened(T, sid,(cid:101)T , P, tsopen):
send CertoT to both {Pa, Pz } to inform action
(GT , _, _, _) := Data[sid]; abort if not found
25
26
27
28
29
Pz
sid)
23
31
37
Pz
sid)
32
33
34
35
36
Pa
sid , Sig
assert tsopen is within the error boundary with now()
update T .state = opened and get T .tsopen := tsopen
assert P = T .from, T .state = open and T .trans =(cid:101)T
post(cid:101)T on Fblockchain for on-chain execution
compute CertodT := Cert([(cid:101)T , open, tsopen, sid, T); Sig
38 Upon Receive ReqTransClose(T, sid,(cid:101)T , tsclosed):
assert T .state = opened and T .trans =(cid:101)T
query the ledger of Fblockchain for(cid:101)T ’s status
send CertodT to both {Pa, Pz } to inform action
(GT , _, _, _) := Data[sid]; abort if not found
39
40
41
abort if T is not finalized on Fblockchain
42
assert tsclosed is within the error boundary with current time now()
43
update T .state := closed and T .tsclosed := tsclosed
44
Pz
compute CertcT := Cert([T , closed, tsclosed, sid, T); Sig
sid)
45
send CertcT to both {Pa, Pz } to inform action
46
47 Upon Receive TermExecution(sid, P ∈ (Pa, Pz)) public:
(GT , contract, stake, timer) := Data[sid]; abort if not found
48
abort if timer has not expired
49
# The following is the arbitration logic specified by contract
50
initialize a map resp to record which party to blame
51
compute eligible transactions set S given current state of GT
52
for T ∈ S :
53
54
55
56
57
58
59
60
61
62
63
if T .state = unknown : update resp[T] := Pz
elif T .state = init : update resp[T] := Pa
elif T .state = inited : update resp[T] := T .to
elif T .state = open and T .state = opened :
elif T .state = closed and deadline constraint fails :
financially revert all closed transactions if resp is not empty
return any remaining funds in stake to corresponding senders
remove the internal bookkeeping of sid from Data
update resp[T] := T .from
update resp[T] =: T .from
Pa
sid , Sig
Figure 11: The ideal functionality FUIP.
terpart(cid:101)T (initialized to be empty). To accurately match FUIP with
parties, allowing FUIP to sign transactions and compute certificates
on their behalf. Both parties are required to stake sufficient funds,
derived from the contract, into FUIP. FUIP annotates each transac-
tion wrapper T in GT with its status (initialized to be unknown),
its open/close timestamps (initialized to 0s), and its on-chain coun-
the real-world protocol ProtUIP, in Figure 11, we assume that Pa is
the dApp client and Pz is the VES.
Since FUIP does not impose any special requirements on the
underlying blockchains, we model the ideal-world blockchain as an
ideal functionality Fblockchain that supports two simple interfaces:
(i) public ledger query and (ii) state transition triggered by transac-
tions (where FUIP imposes no constraint on both the ledger format
and the consensus logic of state transitions).
Transaction State Updates. FUIP defines a set of interfaces to
accept external calls for updating transaction state. In each interface,
FUIP performs necessary correctness check to guarantee that the
state promotion is legitimate. In all interfaces, FUIP computes an
attestation for the corresponding transaction state, and sends it to
both parties to formally notify the actions taken by FUIP.
Financial Term Execution. Upon the expiration of timer, both
parties can invoke the TermExecution interface to trigger the con-
tract code execution. The arbitration logic is also derived from
decision tree mentioned in Figure 9. However, FUIP decides the
final state of each transaction merely using its internal state due to
the assumed trustiness.
Verbose Definition of FUIP. We intentionally define FUIP ver-
bosely (that is, sending many signed messages) in order to accu-
rately match FUIP to the real world protocol ProtUIP. For instance,
in the SessionCreate interface, FUIP certifies (GT , contract, sid) on
behalf of both parties to simulate the result of a successful hand-
shake between two parties in the real world. Another example is
that the attestations generated in those state update interfaces are
not essential to ensure correctness due to the assumed trustiness
of FUIP. However, FUIP still publishes attestations to emulate the
side effects of ProtUIP in the real world. As we shall see below, such
emulation is crucial to prove that FUIP UC-realizes ProtUIP.
Correctness and Security Properties of FUIP.With the assumed
trustiness, it is not hard to see that FUIP offers the following cor-
rectness and security properties. First, after the pre-agreed timeout,
the execution either finishes correctly with all precondition and
deadline rules satisfied, or the execution fails and is financially
reverted. Second, regardless of the stage at which the execution
fails, FUIP holds the misbehaved parties accountable for the failure.
Third, if Fblockchain is modeled with bounded transaction finality
latency, Op is guaranteed to finish correctly if both parties are
honest. Finally, FUIP, by design, makes the contract public. This is
because in the real world protocol ProtUIP, the status of execution
is public both on the ISC and the NSB. We leave the support for
privacy-preserving blockchains on HyperService to future work.
8.2 Main Security Theorems
In this section, we claim the main security theorem of HyperService.
The correctness of Theorem 8.1 guarantees that ProtUIP achieves
same security properties as FUIP.
Theorem 8.1. Assuming that the distributed consensus algorithms
used by relevant BNs are provably secure, the hash function is pre-
image resistant, and the digital signature is EU-CMA secure (i.e.,
existentially unforgeable under a chosen message attack), our decen-
tralized protocol ProtUIP securely UC-realizes the ideal functionality
FUIP against a malicious adversary in the passive corruption model.
We further consider a variant of ProtUIP, referred to as H-ProtUIP,
that requires PVES and PCLI to only use PNSB as their communica-
tion medium.
Theorem 8.2. With the same assumption of Theorem 8.1, the UIP
protocol variant H-ProtUIP securely UC-realizes the ideal functionality
FUIP against a malicious adversary in the Byzantine corruption model.
8.3 Proof Overview
We now the prove our main theorems. We start with Theorem 8.1. In
the UC framework [28], the model of ProtUIP execution is defined
as a system of machines (E, A, π1, ..., πn) where E is called the
environment, A is the (real-world) adversary, and (π1, ..., πn) are
participants (referred to as parties) of ProtUIP where each party may
execute different parts of ProtUIP. Intuitively, the environment E
represents the external system that contains other protocols, includ-
ing ones that provide inputs to, and obtain outputs from, ProtUIP.
The adversary A represents adversarial activity against the pro-
tocol execution, such as controlling communication channels and
sending corruption messages to parties. E and A can communi-
cate freely. The passive corruption model (used by Theorem 8.1)
enables the adversary to observe the complete internal state of
the corrupted party whereas the corrupted party is still protocol
compliant, i.e., the party executes instruction as desired. § 8.6 dis-
cusses the Byzantine corruption model, where the adversary takes
complete control of the corrupted party.
To prove that ProtUIP UC-realizes the ideal functionality FUIP,
we need to prove that ProtUIP UC-emulates IFUIP
, which is the ideal
protocol (defined below) of our ideal functionality FUIP. That is, for
any adversary A, there exists an adversary (often called simulator)
S such that E cannot distinguish between the ideal world, featured
by (IFUIP
, S), and the real world, featured by (ProtUIP, A). Math-
ematically, on any input, the probability that E outputs −→1 after
interacting with (ProtUIP, A) in the real world differs by at most
a negligible amount from the probability that E outputs −→1 after
interacting with (IFUIP
, S) in the ideal world.
The ideal protocol IFUIP
. This annotation applies for other parties.
Based on [28], to prove that ProtUIP UC-emulates IFUIP
is a wrapper around FUIP by a set of
dummy parties that have the same interfaces as the parties of
ProtUIP in the real world. As a result, E is able to interact with
IFUIP
in the ideal world the same way it interacts with ProtUIP in
the real world. These dummy parties simply pass received input
from E to FUIP and relay output of FUIP to E, without implementing
any additional logic. FUIP controls all keys of these dummy parties.
For the sake of clear presentation, we abstract the real-world par-
ticipants of ProtUIP as five parties {PVES, PCLI, PISC, PNSB, PBC }.
The corresponding dummy party of PVES in the ideal world is
denoted as PI
VES
for any
adversaries, it is sufficient to construct a simulator S just for the
dummy adversary A that simply relays messages between E and
the parties running ProtUIP. The high-level process of the proof
is that the simulator S observes the side effects of ProtUIP in the
real world, such as attestation publication on the NSB and contract
invocation of the ISC, and then accurately emulates these effects
in the ideal world, with the help from FUIP. As a result, E cannot
distinguish the ideal and real worlds.
8.4 Construction of the Ideal Simulator S
Next, we detail the construction of S by specifying what actions S
should take upon observing instructions from E. As a distinguisher,
E sends the same instructions to the ideal world dummy parities
as those sent to the real world parties.
• Upon E gives an instruction to start an inter-BN session between
PI
and PI
, S emulates the GT and contract setup (c.f., § 8.5)
and constructs a SessionCreate call to FUIP with parameter (GT ,
VES
CLI
, PI
contract, PI
).
VES
• Upon E instructs PI
to send an initialization request for a
transaction intent T , S extracts T and sid from the instruction
VES
of E, and constructs a ReqTransInit call to FUIP with parameter
(T , sid, PI
VES). Other instructions in the same category are han-
dled similarly by S. In particular, for instruction to SInitedTrans,
S calls ReqTransInited of FUIP; for instructions to RInitedTrans,
S calls ReqTransOpen of FUIP; for instructions to OpenTrans, S
calls ReqTransOpened of FUIP; for instructions to CloseTrans, S
calls ReqTransClose of FUIP. S ignores instructions to Opened-
struction, which is used by some interfaces of FUIP to ensure the
• Due to the asymmetry of interfaces defined by PI
and PI
, S
CLI
VES
acts slightly differently when observing instructions sent to PI
.
In particular, for instructions to InitTrans, S calls ReqTransInited
VES
of FUIP; for instructions to InitedTrans, S calls ReqTransOpen
of FUIP; for instructions to OpenTrans, S calls ReqTransOpened
of FUIP. The rest handlings are the same as those of PI
• Upon E instructs PI
to invoke the smart contract, S locally
executes the contract and the instructs FUIP to published the
VES
updated contract to PI
8.5 Indistinguishability of Real and Ideal Worlds
To prove indistinguishability of the real and ideal worlds from
the perspective of E, we will go through a sequence of hybrid
Trans and ClosedTrans. S may also extract the(cid:101)T from the in-
association between T and(cid:101)T .
CLI
.
VES