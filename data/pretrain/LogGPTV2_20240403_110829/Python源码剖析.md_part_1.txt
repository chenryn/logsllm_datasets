# OCR Output
## Page 1
精品书廊
动态语言技术
Python源码剖析
深度探索动态语言核心技术
哲思自由软件社区
电子工业出版社
陈儒著
审校
---
## Page 2
本书贴有激光防伪标志，凡没有防伪标志者，属盗版图书。
网上订购：
于理解其他动态语言，如JavaScript、Ruby等也有较大的参考价值。
制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对
的部析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机
实现。本书不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性
Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，深刻理解
Web开发等领域的开发实践中，采用Python都能极大地提高开发的效率。
作者介绍
中，为自己的系统添加动态扩展和动态编程的能力。实践证明，在数据挖掘、图像处理、网络游戏，以及
可扩展性，让开发人员既可以非常容易地利用C/C++编写Python的扩展模块，还能将Python嵌入到C/C++程序
作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的
本书的主要特点
■陈儒，
■完整覆盖Python所有的核心议题，深刻揭示Python与C/C++之间如何互动
■在原理介绍的同时，带领读者一起动手对Python虚拟机进行改造
■内容新鲜，采用最新的Python语言版本（V2.5）
■一本深入部析Python具体实现的著作
■大量的图表形象地展示Python内部的运作机理
责任美编：胡文佳
个人博客：DynamicLife（http://blog.csdn.net/balabalamerobert
的研究与开发（www.isoche.com）。
责任编辑：
策划编辑：周筠
第二书店·第一服务
www.dearbook.com.cn
，计算机科学与工程专业硕士，问天（北京）信息技术有限公司技术负责人，
Python源码剖析
Broadview
深度探索动态语言核心技术
技术凝聚实力专业创新出版
图书分类：程序设计
9787121068744>
ISBN978-7-121-06874-4
定价：69.80元
致力于信息检索方向
---
## Page 3
Python源码剖析
Publishing House of Electronics Industry
一深度探索动态语言核心技术
电子王业出版社
哲思自由软件社区
陈儒
北京·BEIJING
审校
著
---
## Page 4
系
开
出版发行：
责任编辑：杨绣国
中国版本图书馆CIP数据核字（2008）第083441号
I.P..II.陈IIL软件工具一程序设计IV.TP311.56
ISBN978-7-121-06874-4
Python源码剖析：深度探索动态语言核心技术/陈儒著.一北京：电子工业出版社，2008.6
装
图书在版编目（CIP）数据
本书所揭示的动态语言的核心技术对于理解其他动态语言，如Javascript、Ruby等也有较大的参考价值。
异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，
虚拟机及Pyhon高级特性的剖析。通过此书，读者能够透彻地理解Pyhon中的一般表达式、控制结构、
地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Pyihon
深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致
Python嵌入到C/C++程序中，为自己的系统添加动态扩展和动态编程的能力。
Python强大的可扩展性，让开发人员既可以非常容易地利用C/C++编写Python的扩展模块，还能将
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，
服务热线：（010）88258888。
质量投诉请发邮件至PI:EMAIL，盗版侵权举报请发邮件至PI:EMAIL。
联系及邮购电话：（010）88254888。
凡所购买电子工业出版社图书有缺损问题，请向购买书店调换。若书店售缺，请与本社发行部联
订：北京中新伟业印刷有限公司
版权所有，侵权必究。
未经许可，不得以任何方式复制或抄袭本书的任何部分。
本书适合于Python程序员、动态语言爱好者、C程序员阅读。
作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，
刷：
数：4000册
次：
本：
：北京智力达印刷有限公司
2008年6月第1次印刷
787×9801/16印张：31.75字数：600千字
北京市海淀区万寿路173信箱邮编100036
电子工业出版社
定价：69.80元
内容简介
---
## Page 5
让我们做得更好
机制有了更深入的理解，讲座效果非常好，讨论也很热烈。他从源码的角度讲述了Pyhon
的分析和整理，并终于出版此书。这不仅让人敬佩，更让广大的Python爱好者受益多多。
越陌生，更不要说去“啃”Python的C代码了。而RobertChen可以从源码中进行有条理
有一些高级话题，如内存管理，GIL（GlobalInterpreterLock）与多线程，模块动态加载等。
等的处理；Pyhon的虚拟机框架、作用域的实现：运行时环境，pyc文件，类机制等。还
的：对象的特性是如何实现的；对象是如何管理的：不同对象，如int、str、dict、list
源码的精妙之处，有助于更好地掌握Python并编写出高质量的程序。
以沿着作者的思路和角度去体会Pyhon的工作原理和底层的细节，一点一点地了解Pyhon
至作品都可能超过别人。那么本书就向你提供了一个了解Pyhon底层细节的机会，你可
你知道别人不知道的东西，掌握了别人不了解的技术，这些内容使得你的见解、分析，甚
容，但是探究事物的原理，分析底层细节却也是许多人成为高手、“老鸟”的原因，因为
了解它的运行环境吗？其实作为初学者或只是使用者，你的确不必了解这么多细节的内
种什么语言？如何实现的？有哪些对象，它们是如何处理的？你了解Python的虚拟机吗？
甚至用它找到了工作。如果你了解Python，那么我想问一下，你对它有多了解呢？它是一
因此，当出版社希望我为本书作一个推荐序时，我毫不犹豫地答应下来。
的毅力和深厚的功力折服。说实话，由于经常接触Python，对于原本熟悉的C语言也越来
一个主题为“Python作用域与名字空间”的讲座，让在座的Pythoner对Python的作用域
在接触到本书之前，我已经在作者的Blog上见到过部分内容，那时已经被作者不懈
第一次见到Robert Chen还是在CPUG的一次会课上，那时Robert Chen给大家带来
Python，我想已经不再是个陌生的词了，越来越多的人开始学习它，使用它，宣传它，
本书的内容深入到Python的方方面面，像Python的对象实现机制是如何用C来表现
Python源码剖析
一深度探索动态语言核心技术
推荐序一
---
## Page 6
Python源码剖析
iV推荐序一
编程经验，才能更好地理解书的内容。
应先掌握像C语言、数据结构、操作系统、编译原理等方面的基础知识，并且具备一定的
第一本从源码角度写作的书，所以意义非常。目前国内原创的Python书籍还不多，就我
RobertChen将出版此书时，都非常盼望，现在这本书终于出版，大家都深感庆幸！
源码及字节码实现的角度来回答问题，非常有说服力。因此当许多Pyton爱好者得知
google.com/group/python-cn），从上面对有些问题的回复中，你会发现RobertChen总是从
的一些规则，使得大家的理解不再停留在形式上或规则上，而达到了本质或实现的层次，
望。
让我们“知其然，更知其所以然”。
不过本书应该不是面向初学者的书，因为它涉及了许多较深的内容和知识，建议读者
本书不仅仅是高水平、高质量的一本书，纵观国内外与Python相关的书籍，它也是
如果你是一位热心的Pythoner，想必会知道中文Python的邮件列表（http://groups.
再次感谢RobertChen带给大家的这份礼物！
一深度探索动态语言核心技术
PI:EMAIL
2008年春
李迎辉
---
## Page 7
Pyhon、Java和C完成了一个异步二进制消息流的客户端和服务器。通过一系列测试，大
的开发人员投入到Python的技术领域中来。
4月8日，google发布的AppEngine更是让所有的开发人员眼中一亮。相信今后会有更多
的一些问题百思不得其解时，这本书也许可以从不同的方面帮助你了解它最底层发生的故
工具书，配合“ExtendingandEmbedding the Python Interpreter”会让你更容易地完成你的
洁背后的机理。我更推荐大家把它当做口袋书，在准备书写Pyhon扩展前把它作为一本
的根源，很快就换了一种解决方案来继续我的工作。了解Python的源代码，我们能获得
中使用asyncore时，通过阅读asyncore的源代码排除了一个痛苦bug，轻松地找到了问题
而使用的技巧。这也是我第一次开始查看Python的源代码。最近的一次则是我在xBayTable
地查看了Pyton的源代码，发现了几种完全不同的操作系统调用方法，以及为提高性能
家惊奇地发现Pyhon以每秒一倍的数据处理量超过了C写的代码。后来，我的同事细心
成我的项目时，它还不过是一个刚刚在开源社区中起步的新生儿，然后在各方面迅速推广，
伴，它让你更多更快地了解Python是怎么做的，从而做得“和Python一样”。当你对Python
工作。另一方面，当你想使用Python这种方法解决问题时，这本书也可以成为你的好伙
更多讲述的是CPython中的实现技术和方法。这可以让我们从不同的层面了解Python简
很多的好处：
记得在2002年时，我使用Python写了一套大规模的消息系统，几位同事分别使用
我常将所有的书分为口袋书、马桶书、枕头书。RobernChen的《Python源码剖析》，
真的难以想象，Python语言和社区能够发展得如此迅速。在我第一次使用Python完
扩展Python。
快速地与文档结合，解决问题或是找出方法；
使用Pyhon方法提高自己的代码性能和功能：
Python源码剖析
一深度探索动态语言核心技术
推荐序二
---
## Page 8
Python源码剖析
>（）这样折磨人眼的东西了，这使得代码量急剧减少。对于采用
工作之后，突然发现C++太复杂了。对于Python，我的感觉只有四个字：摧枯拉朽。我只
理内存，不需要考虑这个模式那个模式，STL提供了足够多的工具，简单组装一下就可以
用了。
C++的STL在很大程度上已经足够好用了。文本处理不是服务器，所以不需要考虑自已管
复杂的东西，也就意味着你的脑袋跟这东西一样复杂，这是很能让人虚荣的一件事。
C++足够复杂，有足够多的trick，尤其是像模板和泛型编程这样的新鲜玩意儿。掌握这么
言课就是C，其后转向C++是很自然的迁移。那时候觉得C++很有一种高贵的感觉，因为
对文本分析、统计的工作。开始的时候，我使用的是C++，因为大学的时候第一门编程语
理和信息检索之后。自然语言处理其实大部分的时间都在与文本打交道，需要进行大量的
由与繁荣的国度》。但是真正开始使用Pyuon，还是在进入实验室，开始研究自然语言处
>>>a.show(）
>>>ClaS8A:
随着对Python的逐渐熟悉，我越来越惊叹于Pyhon简洁的表达，强大的功能。尤其
但俗话说得好，“不怕不识货，就怕货比货”，当我开始尝试用Python来进行日常的
C++的复杂性是个仁者见仁，智者见智的话题，但其实回到文本处理这个话题上来说
第一次接触Python，是通过《程序员》杂志上“恶魔吹着笛子来”的系列文章——《自
A()
pass
Python源码剖析-
一深度探索动态语言核心技术
前言
---
## Page 12
Python源码剖析-
处，完成这项工作的兴趣和动力也越来越强。
历证明我当时的信心是多么的虚妄。也是在这个时候，我开始看到Pyton实现的精妙之
数对象的笔记也诞生了。到了这个时候，我开始对完成这项工作有信心了，虽然后来的经
急，你能够看到Pyuhon的编译结果，对于理解Python虚拟机的实现来说，这个编译结果
虚拟机的剖析，正因为这样，你在本书中看不到对Pyhon的编译过程的剖析，不过别着
了一个决定，不再剖析Python的编译过程，而是以Python的编译结果为起点，开始Python
的编译过程，在任何一本关于编译原理的书上，你都可以找到它的实现过程。于是，我做
剖析后，又重新转回到编译过程的剖析，我发现Pyhon的编译过程实际上就是一个标准
象，所以我将切入点转向了Python的对象模型。在完成了Pyton对象模型和内建对象的
切入点，但是很快我就发现，Pyhon的编译过程中大量地使用了Pyhon中的一些内置对
Python实现的一个最初的认识，给了我一个起始点。
感觉（这份文档目前在Google上已经搜索不到了）。但不管怎么说，这份文档给了我对于
入掌握Python的实现来说，几乎没有太大作用，让人有一种“食之无味、弃之可惜”的
已经进化到了2.4，Python的对象模型已经发生了重大的改变，所以这份文档对于想要深
其研究的对象是Python2.1，版本太久远了。而我准备开始研究Python如何实现时，Python
作为Python中对象模型关键的PyObject结构体，也仅仅有一些简单的描述。最要命的是，
产生的文档。这份文档篇幅太短，内容也太简略了，只包含了一些最简单的信息，即使对
相关的资料是《TheArchitectureofPython》，这是美国一所大学的学生在一次课程设计中
有，只有一些零散的信息散落在各种资料中。再具体到Python，唯一一篇与Python实现
是怎么通过C语言完成的呢？
心：Python是怎么实现的？我们知道Python是用C语言实现的，那这些神奇的动态能力
很快，第一篇关于PyObject的笔记出炉了，紧接着，Python中最简单的对象——整
Traceback (most recent call last):
2004年年末，我开始了探索Python如何实现的漫漫长征。我选择了编译这个最初的
于是我开始上网搜索资料，然而我发现，详细介绍动态语言实现原理的资料根本就没
amB
>class B:
前言