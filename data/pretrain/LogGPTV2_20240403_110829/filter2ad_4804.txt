title:TransBlocker: Transforming and Taming Privacy-Breaching Android Applications
author:Mu Zhang and
Heng Yin
TransBlocker: Transforming and Taming Privacy-Breaching 
Android Applications 
Mu Zhang 
Heng Yin 
Department	
  of	
  Electrical	
  Engineering	
  and	
  Computer	
  Science,	
Syracuse	
  University	
L.C.Smith College	
  of	
  Engineering	
and	
  Computer	
  Science	
Motivation: Privacy Leakage 
•  A significant problem 
– Various types of information 
– Both benign and malicious apps 
– Ads, analytic libraries 
•  Information-flow security problem 
– Individual checkpoints won’t work 
– Dynamic analysis incurs performance overhead 
Our Solution: Transblocker 
A Running Example 
Application-wide Dataflow Analysis 
Static Instrumentation 
•  Creating Shadow Variables 
– Local Variables 
– Static/Instance Fields 
– Parameters and Return Value 
Static Instrumentation 
•  Instrumenting the Source 
– Initialize tainting 
Static Instrumentation 
•  Instrumenting Taint Propagation  
– Simple Assignments 
– Function Calls 
– API Calls 
Static Instrumentation 
•  Instrumenting the Sink 
Optimization 
•  Removing Redundant BoolWrapper 
Statements 
•  Removing Redundant Function Parameters 
•  Inlining Instrumentation Code 
•  Soot Built-in Optimizations 
Optimization 
Evaluation(cid:1)
•  Lines of Instrumented Code 
– Before Optimization: 10% 
– After Optimization: 4.48% 
•  Runtime  Overhead: 1.5%(cid:1)
12	
Conclusion 
•  Privacy leakage is an information-flow 
security problem 
•  Our solution: Combine static analysis and 
bytecode re-writing 
– Easy to deploy 
– Minimal overhead 
Questions? 
Questions? 
Static Instrumentation 
•  Cleaning the Taint