# TransBlocker: Transforming and Taming Privacy-Breaching Android Applications

**Authors:**  
Mu Zhang and Heng Yin  
Department of Electrical Engineering and Computer Science, Syracuse University  
L.C. Smith College of Engineering and Computer Science

## Motivation: Privacy Leakage
Privacy leakage is a significant problem in Android applications, affecting both benign and malicious apps. Various types of information can be leaked, often through ads and analytics libraries. This issue is fundamentally an information-flow security problem, where individual checkpoints are insufficient, and dynamic analysis can introduce performance overhead.

## Our Solution: TransBlocker
TransBlocker addresses the privacy leakage problem by combining static analysis with bytecode re-writing. This approach is easy to deploy and incurs minimal overhead.

### A Running Example
[Insert a detailed example here to illustrate the problem and solution.]

### Application-wide Dataflow Analysis
[Provide a description of the dataflow analysis process used by TransBlocker.]

### Static Instrumentation
#### Creating Shadow Variables
- **Local Variables**
- **Static/Instance Fields**
- **Parameters and Return Values**

#### Instrumenting the Source
- **Initialize Tainting**: Describe the process of initializing tainting for the source variables.

#### Instrumenting Taint Propagation
- **Simple Assignments**: Explain how taint propagation is handled for simple assignments.
- **Function Calls**: Detail the instrumentation for function calls.
- **API Calls**: Discuss the handling of API calls in taint propagation.

#### Instrumenting the Sink
- [Explain the process of instrumenting the sink points where taint is checked and potentially blocked.]

### Optimization
To improve the efficiency and reduce the overhead of TransBlocker, several optimizations are applied:
- **Removing Redundant BoolWrapper Statements**: Eliminate unnecessary Boolean wrapper statements.
- **Removing Redundant Function Parameters**: Simplify function calls by removing redundant parameters.
- **Inlining Instrumentation Code**: Inline frequently used instrumentation code to reduce call overhead.
- **Soot Built-in Optimizations**: Utilize Soot's built-in optimizations to further enhance performance.

### Evaluation
- **Lines of Instrumented Code**:
  - Before Optimization: 10%
  - After Optimization: 4.48%
- **Runtime Overhead**: 1.5%

### Conclusion
Privacy leakage in Android applications is an information-flow security problem that requires a comprehensive solution. TransBlocker combines static analysis and bytecode re-writing to effectively address this issue. The solution is easy to deploy and introduces minimal overhead, making it a practical and efficient approach to taming privacy-breaching Android applications.

### Questions?
We welcome any questions or further discussions on our work.

---

This revised version aims to provide a clearer, more organized, and professional presentation of the research.