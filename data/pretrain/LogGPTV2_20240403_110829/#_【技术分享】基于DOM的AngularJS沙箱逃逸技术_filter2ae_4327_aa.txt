# 【技术分享】基于DOM的AngularJS沙箱逃逸技术

## 译文声明
本文为翻译文章，原文来源：portswigger.net。译文仅供参考，具体内容及含义以原文为准。

**翻译者**: [myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)  
**预估稿费**: 200 RMB  
**投稿方式**: 发送邮件至 linwei#360.cn 或通过网页版在线提交

---

### 0x00 前言
在去年发表的文章“[XSS Without HTML: Client-Side Template Injection with AngularJS](http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html)”中，我们展示了使用AngularJS框架可能会导致网站遭受跨站脚本攻击（XSS），前提是存在合适的沙箱逃逸。本文将介绍如何开发一种能在之前不可利用的上下文中工作的沙箱逃逸方法——过滤器排序。我详细记录了整个利用开发过程，包括一些不太成熟的技术。

### 0x01 Angular沙箱历史
当Angular首次发布时，并没有沙箱机制。因此，在版本1.0到1.1.5之间是没有沙箱保护的。然而，Angular表达式被限定为局部对象定义，这阻止了在窗口对象中调用函数，因为作用域限制使得直接调用如`alert`这样的函数会失败。Mario Heiderich找到了一种方法，通过构造函数属性绕过这一限制。他发现可以使用`Function`构造函数在表达式中执行任意代码。

在此之后，`ensureSafeMemberName`函数被引入，用于检查JavaScript属性，拒绝包含下划线开头或结尾的字符串。Jan Horn发现了针对1.2.0版本的第一个公开的沙箱逃逸。他使用`sub`函数作为快捷方式，在Angular中获取一个函数，并通过`call.call`获得一个类似`call`的方法，从而选择并执行任意函数。

为了应对这个漏洞，Angular增强了`ensureSafeMemberName`函数，增加了对特定属性名（如`__proto__`）的检查。他们还添加了一个新的`ensureSafeObject`函数来检查引用或调用函数时指定的对象。尽管如此，随着每个新版本的发布，Angular沙箱不断被打破。最终，在1.6版本中，Angular决定完全移除沙箱，因为他们不再将其视为安全特性。

### 0x02 开发基于DOM的沙箱逃逸
尽管Angular 1.6将移除沙箱，但这并不意味着沙箱逃逸变得无关紧要。Lewis Ardern指出，在过滤器排序中也可以执行Angular表达式，开发者可能使用用户输入（如`location.hash`）来设置过滤器顺序。我发现解析代码时没有使用`{{`和`}}`，并且`$eval`和`$$watcher`在沙箱环境中不可用。这使得许多已知的沙箱逃逸方法失效，因为它们依赖于这些功能。

我从1.3.0版本开始研究。首先，我需要解决如何在该环境中枚举对象，以便查看哪些属性是可靠的。修改`String`原型提供了一种有用的方法来检查沙箱代码。我可以通过分配属性来检查具有相同名称的字符串原型，并使用`setTimeout`获取该值。然后，我从Angular源代码中提取了所有关键字和变量，并在沙箱中运行。虽然代码没有显示有类似`$eval`的危险函数可用于沙箱逃逸，但我发现了一些有趣的行为。

例如，当使用带有`[].toString`的`Object`原型定义一个getter时，我发现`join`函数会被调用。我的想法是获取`join`函数并调用`Function`构造函数，传递参数并执行任意JavaScript。我在主流浏览器中测试了这种方法，发现`toString`函数作为对象的getter或方法时会自动调用`join`。不幸的是，我未能找到一种方法来传递参数。

### 0x03 打破1.3.0
尽管上述行为很有趣，我还是决定尝试其他方法。继续研究1.3.0版本时，我发现当改变`Object`原型时，可以引用`Function`和`Object`构造函数。虽然调用`Function`构造函数时Angular会抛出异常，但由于我可以访问`Object`构造函数及其所有方法，于是我使用数组属性访问器绕过了`ensureSafeMemberName`检查。通过之前提到的对象枚举技术，我成功地获得了`Object`构造函数的引用。

首先，我创建了一个`getOwnPropertyDescriptor`的引用，并将其赋值给变量`g`。接下来，我使用`getOwnPropertyDescriptor`获取`Function`原型描述符，并稍后使用它来获取`Function`构造函数。我还使用`defineProperty`覆盖构造函数属性，以绕过`ensureSafeObject`检查。最后，我使用`getOwnPropertyDescriptor`获取描述符，从而在不使用构造函数属性的情况下获得`Function`构造函数。

通过这些步骤，我成功实现了基于DOM的AngularJS沙箱逃逸。