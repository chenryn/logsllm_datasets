# 【技术分享】基于DOM的AngularJS沙箱逃逸技术
|
##### 译文声明
本文是翻译文章，文章来源：portswigger.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**0x00 前言**
去年，在发表的“[XSS Without HTML: Client-Side Template Injection with
AngularJS](http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html)”中，我们展示了使用AngularJS框架会导致网站遭遇跨站脚本攻击（XSS），只需有个合适的沙箱逃逸。在本文中，我们将介绍如何开发一个能工作在之前不可利用的上下文中的沙箱逃逸——过滤器排序。我已经编写了整个利用开发过程，包括各种不太完善的技术。
**  
**
**0x01 Angular沙箱历史**
当第一次发布Angular时还没有沙箱，因此在版本1.0-1.1.5是没有沙箱的。但是Angular表达式被开发者限定为局部对象定义，这阻止了在窗口对象中调用函数，因为你将被作用域限制，如果你试图调用alert，将调用的是作用域对象而不是窗口对象，函数调用将失败。Mario
Heiderich找到了一种方式，使用构造函数属性绕过这个限制。他发现使用Function构造函数你能在表达式中执行任意代码。
在这里，constructor的作用域是Object构造函数。constructor.constructor是Function构造函数，允许你生成一个以字符串为参数的函数，因此能执行任意代码。
在Mario的利用之后，ensureSafeMemberName函数出现了。这个函数针对构造函数属性检查JavaScript属性，同时拒绝包含下划线开头或结尾的字符串。
Jan horn发现第一个公开的沙箱逃逸是针对版本1.2.0的。
他使用sub函数（是一个很古老的javascript的string方法）作为一个快捷方式，能在Angular中获得一个函数，因为它是一个非常短的名字。然后使用call.call能得到一个类call方法；正常情况当你是用单独的call方法将在当前函数执行，但是使用call.call的类call方法将允许你选择一个函数执行。
他然后使用getOwnPropertyDescriptor得到函数原型对象的描述符和构造函数的属性。描述符是描述一个对象属性的对象文字；它能告诉你属性是否是可枚举、可配置和可写的，和它是否有getter和setter。“value”也将包含属性值的引用。
Value将包含Function构造函数的引用，是他发送给call方法的第一个参数。第二个参数不重要——它的目的是指定执行函数时使用的对象，但是Function构造函数会忽略它并使用窗口对象代替。最后他传递他希望执行的代码，通过Function构造函数生成一个新的函数成功沙箱逃逸了。
为了回应这个精彩的绕过，Angular增强了他们的沙箱。他们增强了ensureSafeMemberName函数，以检查指定的属性名（如__proto__）。
他们也增加了一个新的函数来检查引用或调用函数时指定的对象。函数ensureSafeObject检查Function构造函数，窗口对象，DOM元素和Object构造函数。
然后，关于沙箱逃逸有个小爆发，每个版本的Angular沙箱都被打破了。我写了[一篇博文](http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html)关于我的沙箱逃逸，并且也列举了从早前的逃逸到最新版本(1.5.11)的逃逸。最终Angular决定为了性能在1.6版本中完全[移除沙箱](http://angularjs.blogspot.co.uk/2016/09/angular-16-expression-sandbox-removal.html)，因为他们不考虑将沙箱作为一个安全特性了。
**0x02 开发基于DOM的沙箱逃逸**
****你可能认为沙箱逃逸没啥意思了，因为在Angular 1.6将被移除了。然而却完全不是。在我在伦敦的演讲后，[Lewis
Ardern](https://twitter.com/lewisardern)指出了[在过滤器排序中也能执行Angular表达式](https://blogs.synopsys.com/software-integrity/2016/12/28/angularjs-1-6-0-sandbox/)，并且开发者可能使用用户的输入（如location.hash）来设置过滤器顺序。  
我注意到解析的代码在没有“｛｛”和“｝｝”的情况下被解析和执行，并且$
eval和$$watcher在沙箱环境中不可用。这使得之前大量的沙箱逃逸都失效了，因为我们依赖$
eval和$$watcher。如果我们看过下面公开的沙箱逃逸，你能看见只有一个内容排序的可以使用，其他的都失效了。
我决定从1.3.0版本开始。首先的问题是我不得不解决如何在这个环境中枚举对象，以便我能看见什么属性是可靠的。修改String原型提供了一个有用的方法以检查沙箱代码；我能分配我想要的属性来检查相同的名字的字符串原型，然后使用setTimeout得到那个值。代码如下：
然后我从Angular源代码中提取了所有的关键字和变量，并在[沙箱中运行](https://jsfiddle.net/0Lh8rw3b/3/)。尽管代码无法告诉我有类似$eval危险的函数能用来沙箱逃逸，但是我还是发现了有趣的行为。当使用带有[].toString的Object原型定义一个getter时，我发现join函数会被调用。这里的想法是的到join函数以调用Function构造函数，传参，并执行任意的JavaScript。我使用的fiddle在[这里](https://jsfiddle.net/0Lh8rw3b/4/)可以找到。在主流的浏览器中使用toString函数作为对象的getter或方法将自动调用join。不幸的是，我不能找到一种方式来传递参数。下面是在Angular代码之前的工作原理。
它甚至能在Windows上工作。下面的例子使用[].toString覆盖了窗口的toString属性，并且你能看到join被调用了。
因此，我模糊测试了所有的对象和属性，看到了其他的函数也调用了join。当是使用定义数组中的getter也会调用join：copyWithin, fill,
reverse, sort, valueOf, toString。
**  
**
**0x03 打破1.3.0**
****非常酷的行为，但是我决定改变方向，并尝试些别的东西。我继续研究1.3.0，注意到当改变Object原型时，你能引用Function和Object构造函数。当调用Function构造函数时，Angular将抛出异常，但是因为我能访问Object构造函数，我就能访问它所有的方法。  
我是用数组属性访问器来绕过Angular的ensureSafeMemberName检查，因为Angular使用严格的等号运算符来查找危险字符串。使用之前提到的对象枚举技术，我看见了Object构造函数成功被赋值了。我首先创建一个getOwnPropertyDescriptor的引用，然后给它赋值变量“g”。
接下来，我使用getOwnPropertyDescriptor获得Function原型描述符。我将稍后使用它得到Function构造函数。
我也需要defineProperty，因此我能覆盖构造函数的属性以绕过Angular的ensureSafeObject检查。
下面是我使用defineProperty覆盖构造函数为false。
最后，我使用getOwnPropertyDescriptor得到描述符，以得到不使用构造函数属性的Function构造函数。