# mruby字节码逆向入门
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## mruby 简介
[mruby](https://mruby.org/)是一个Ruby语言的轻量级实现，mruby工作方式类似CPython，它可以将Ruby源码编译为字节码，再在虚拟机中解释运行。
第一次碰到mruby字节码是在DEFCON 2021 Finals，其中的barb-metal题目是mruby字节码运行的模拟IoT固件。没想到在几个月后的第五空间线上赛又碰到了mruby逆向，于是总结了一下mruby字节码的特性。
## mrb字节码格式
mruby实现的是基于寄存器的虚拟机，所有的opcode可以从`opcode.h`查看，mruby字节码对寄存器按照函数参数、局部变量、临时寄存器的顺序进行分配。将mruby源码clone到本地并编译，在bin目录下的`mirb`程序是一个交互式mruby解释器，运行时加上`-v`参数，可以将解释器生成的字节码打印出来，方便理解。
    mruby 2.1.0 (2019-11-19)
    > def f(a,b)
    *     c=a+b
    *     d=a-b
    *     return c*d
    * end
    ...
    irep 0x55c104345310 nregs=4 nlocals=2 pools=0 syms=1 reps=1 iseq=14
    local variable names:
      R1:_
    file: (mirb)
       13 000 OP_TCLASS     R2
       13 002 OP_METHOD     R3      I(0:0x55c104346290)
       13 005 OP_DEF        R2      :f
       13 008 OP_LOADSYM    R2      :f
       13 011 OP_RETURN     R2
       13 013 OP_STOP
    irep 0x55c104346290 nregs=9 nlocals=6 pools=0 syms=0 reps=0 iseq=36
    local variable names:
      R1:a
      R2:b
      R3:&
      R4:c
      R5:d
    file: (mirb)
       13 000 OP_ENTER      2:0:0:0:0:0:0
       14 004 OP_MOVE       R6      R1              ; R1:a
       14 007 OP_MOVE       R7      R2              ; R2:b
       14 010 OP_ADD        R6
       14 012 OP_MOVE       R4      R6              ; R4:c
       15 015 OP_MOVE       R6      R1              ; R1:a
       15 018 OP_MOVE       R7      R2              ; R2:b
       15 021 OP_SUB        R6
       15 023 OP_MOVE       R5      R6              ; R5:d
       16 026 OP_MOVE       R6      R4              ; R4:c
       16 029 OP_MOVE       R7      R5              ; R5:d
       16 032 OP_MUL        R6
       16 034 OP_RETURN     R6
首先从下面部分的字节码可以看出，mruby函数用到的寄存器已经分配给了特定的变量使用，R1-R2用于参数a和b，R4-R5用于局部变量c和d，R6-R7为临时寄存器。
对于有多个操作数的指令，mruby总会先将操作数存入连续的寄存器里，然后将第一个寄存器编码到字节码内，例如上图中的`032 OP_MUL
R6`，实际上`OP_MUL`接受两个寄存器，R6和R7，并且总是将相乘的结果存入R6中。再例如上方的f函数声明部分：`002 OP_METHOD R3
I(0:0x55c104346290)`将f函数的指针放入R3，后面的`005 OP_DEF R2
:f`是把R(2+1)，即R3中的函数指针声明为R2中的名字，即`:f`。了解到这一特性之后就可以对mruby字节码进行初步的逆向了。
## 示例：DEFCON 2021 barb-metal
这道题目是DEFCON 29决赛中的一道攻防题目，可以参考[archive.ooo](https://archive.ooo/c/barb-metal/427/)上的存档。题目用mrubyc（mruby解释器的另一种实现）跑了一个模拟IoT设备，该IoT设备有Alarm，Thermostat，Speaker等几个组件，每个组件可以接受不同的命令，例如Thermostat组件存储了一些温度数据，可以用`THERM
read day friday`/`THERM set night monday 90`之类的指令读写数据。
对题目的`service`程序进行逆向分析，可以发现Alarm，Thermostat，Speaker这些组件的逻辑均是用C实现，并注册为Ruby对象的成员函数。
题目的payload.bin是mruby字节码，除去前260字节的签名后，开头的magic
bytes是`RITE0006`，找到对应的mruby版本是v2.1.0，编译后用`mruby -v -b payload.bin`运行，dump出字节码。
下面是set_therm函数片段，用来处理`THERM set`指令：
          267 OP_MOVE     R7    R5        ; R5:date
          270 OP_GETIV    R8    @dayofweek
          273 OP_SEND     R8    :size    0
          277 OP_GT       R7    
    # 此处R7是输入的date，R8是dayofweek数组长度，用来检查输入的星期是否溢出
    # OP_GT R7隐含了比较的对象R8
          279 OP_JMPNOT   R7    306    
    # 若R7<R8，跳转到306，即通过验证，未通过则向下走返回
          283 OP_LOADSELF R7        
          285 OP_STRING   R8    L(5)      ; "INVALID date "
          288 OP_MOVE     R9    R5        ; R5:date
          291 OP_STRCAT   R8    
          293 OP_STRING   R9    L(3)      ; ""
          296 OP_STRCAT   R8    
          298 OP_SEND     R7    :putsDBG    1
          302 OP_LOADNIL  R7        
          304 OP_RETURN   R7
    # 输出字符串，提示越界
    # OP_SEND R7 :putsDBG 1隐含一个参数R8
          306 OP_GETIV    R7    @therm
          309 OP_MOVE     R8    R4        ; R4:time
          312 OP_MOVE     R9    R5        ; R5:date
          315 OP_MOVE     R10   R6        ; R6:temp
          318 OP_SEND     R7    :write    3
          322 OP_RETURN   R6              ; R6:temp
    # 验证通过，调用设备函数
    # OP_SEND R7 :write 3中函数指针为R7，隐含3个参数R8-R10
在mruby字节码中，`OP_GETIV R7 [@therm](https://github.com/therm
"@therm")`即获得Thermostat组件的对象，放入R7寄存器，`OP_SEND R7 :write
3`意为用R7后面的3个寄存器，即R8-R10中的值作为参数，调用R7对象的`write`函数，此处的`write`函数是C注册的Thermostat组件的写入功能（`sub_112CBF`）。
这道题目的意思就是通过发送指令，由mruby程序对输入的参数进行校验，再传给C函数完成相应操作。题目只允许对mruby字节码进行patch，修补参数校验中的漏洞。
经过逆向分析可以发现`THERM
set`指令的第一个参数可以是day/night，也可以直接输入0/1，第二个参数星期也可以直接输入数字0-6，而上面的函数片段显示mruby只检查了data\<dayofweek.size，即输入的星期要小于7，没有检查下界，利用`THERM
set 0 -addr value`可以实现越界写。
同样在`THERM get`对应的`get_therm`函数中：
          238 OP_MOVE       R6    R5         ; R5:date
          241 OP_LOADI_0    R7        
          243 OP_LT         R6    
          245 OP_JMPIF      R6    256    
    # 判断date是否小于0，若小于0检查失败
          249 OP_MOVE       R6    R4         ; R4:time
          252 OP_LOADI_1    R7        
          254 OP_GT         R6    
          256 OP_JMPNOT     R6    273    
    # 判断time是否大于1，若大于1检查失败
          260 OP_LOADSELF   R6        
          262 OP_STRING     R7    L(4)       ; "INVALID date"
          265 OP_SEND       R6    :putsDBG   1
          269 OP_LOADNIL    R6        
          271 OP_RETURN     R6        
          273 OP_GETIV      R6    @therm
          276 OP_MOVE       R7    R4        ; R4:time
          279 OP_MOVE       R8    R5        ; R5:date
          282 OP_SEND       R6    :read     2
          286 OP_RETURN     R6
对date参数的校验只有下界没有上界，可以造成越界读，赛后参考[源码](https://github.com/o-o-overflow/dc2021f-barb-metal-public/blob/public/service/src/verify/payload.rb#L127)可以发现这里是出题人故意埋的漏洞。
Alarm和Speaker组件中也有越界读写的漏洞，由于这道题mruby仅用来校验参数，后面的攻击就回到了普通的堆利用上，对这题的逆向分析就到此为止。
## 实战：第五空间线上赛 babyruby
再次碰到mruby还是比较意外的，由于有了DEFCON的经验，这次的babyruby做的比较顺利，侥幸拿了全场唯一解。
题目给的字节码开头是`RITE0200`，对应mruby
v3.0.0，编译运行并dump字节码，程序的main函数位于底部，开头先检查flag{xxxx}格式，括号内的x共32字节。
再翻一翻上面的字节码，发现其中有不少有趣的函数：
显然后四样操作是AES的组成部分，于是猜测题目是AES加密，开始寻找加密后的密文，以及加密用的密钥。密文比较部分就位于整个程序的末尾：