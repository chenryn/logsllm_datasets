is “https://abc.xyz/key=ab&lat=34.123&lng=-91.456,”
our deﬁned regex rule “lat=(.*?)&lng=(.*?)” will be
able to extract the latitude and longitude in this URL.
If it is conﬁrmed that the requesting URL contains the
user’s location information, the interceptor will ask the
service monitor to keep a record of the location usage
and invoke the following decoys’ request generation.
is
the
and
if
the user
restaurants,
2) Generate decoys’ requests: The interceptor obtains
decoys’ current
locations from the decoy simulator,
and then generates service requests for the decoys
in the same form of the user’s real service request.
For example,
looking for nearby
Italian
requesting URL is
“https://abc.xyz/food/italian/lat=34.123&lng=-91.456,”
the requests from the decoys will also be looking for
restaurants near the decoys’ locations but the restaurants’
types may be different such as Mexican restaurants.
For example, the decoy’s requesting URL would be
“https://abc.xyz/food/mexican/lat=40.12&lng=-80.34”.
3) Send out mixed requests: After generating the
decoys’
the interceptor mixes them with
the real user’s request and send all
the requests
out
to the service provider by calling the function
“decoyWebView_i.loadUrl(decoyUrl_i)” and “mainWe-
bView.loadUrl(userUrl)”.
requests,
4) Filter
returned responses: Upon receiving the
responses from the service provider, the query results
corresponding to the user’s real request will be displayed
in the main webview to the user. The responses that are
related to the decoys’ requests will return to the decoys’
webviews which will be invisible to the user unless the
user wants to monitor the decoys’ activities and clicks
a switch button in our interface to switch to the decoys’
query result page.
With the support of
the decoy simulator component,
the request interceptor can act as a middle ware between
the user and the service provider to protect user’s location
privacy without reducing the quality of service. It is worth
noting that all the APIs, functions, and UI elements used
by this component are ofﬁcially supported by both Android
and iOS platforms. Therefore, the user can install and use
our MoveWithMe app just like other apps, without changing,
re-compiling any existing framework or gaining any “root”
access of the mobile devices.
F. Service Monitor
Upon receiving the detection results from the request inter-
ceptor, the service monitor component will ﬁrst inform the
Fig. 7. Service Monitor.
user when his/her location information is being requested by
the service provider. Meanwhile, it will keep the record of
these accesses. Speciﬁcally, when the user taps the “Service
Monitor” button on the phone screen, our app will display a
list of the current services that require location information.
For example, Figure 7 (a) shows the notiﬁcation that the
website is uploading user’s precise geo-location information,
and Figure 7 (b) shows the services a user has visited and
the corresponding types of location information that have
been uploaded to the service providers. The purpose of these
two additional features aims to draw user’s attention to the
location-based services that have collected their location infor-
mation, and let the users be aware of potential privacy risks
that they may not notice before.
G. Location Recorder
The location recorder component is currently in charge of
storing the user’s real trajectories and decoys’ fake trajectories.
A potential usage of these stored historical trajectories is to
provide ﬂexible and adaptive privacy protection. Speciﬁcally,
the system can present a report about the similarity between
the trajectories of a decoy (decoyi) and the user u to the user.
Based on the user’s input, the decoys’ social and travel patterns
and proﬁles may be changed to reach the desired similarity,
i.e., adjust decoys’ proﬁles to make decoys perform more (or
less) similar to the user. There are several ways to do the
similarity calculation. For example, we can directly compare
the types of places visited by a decoy with that of the real
user; or we can consider also the stay time and transition time
during the comparison. This feature is optional and can be
turned off without affecting the other functions. In this paper,
since we focus on the simulation of decoys and the request
intercepting, we leave the details of the similarity calculation
and the adjustment of decoys’ proﬁles as the future work.
H. Trajectory Display
The trajectory display component aims to help users visual-
ize their real trajectories as well as decoys’ trajectories. In this
sense, the users may possibly feel more secure.
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
720
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 15, 2020
the users’ real
We utilize the Google Maps API to display trajectories.
location will be
When viewing the trace,
automatically placed with a blue map-marker and lines, so that
users can visualize the other reported locations compared
to their origins. Lines with different colors are connecting
locations based on the movement from one place to the next.
An example of this trajectory display feature is presented
in Figure 9 in the experimental section.
IV. PRIVACY ANALYSIS
that
We now discuss the privacy protection achieved by our
proposed MoveWithMe system. Recall
in the threat
model (Section III-A), we consider two types of user location
information: (i) precise location such as coordinates provided
by GPS; (ii) coarse location such as postal code. Service
providers may utilize collected location information to learn
the user’s sensitive information. The more precise the location
is and the more frequent the user accesses the same service,
the respective service provider would have more chances to
infer the user’s personal information such as hobbies, religions,
health status, and political stance.
With the aid of our proposed MoveWithMe system, the user
will be able to prevent the service provider (or attackers who
compromise the server) from knowing his/her true proﬁle. This
is because the user’s service requests are now accompanied
by a group of decoys’ service requests. More importantly,
these decoys have different patterns and proﬁles (e.g., daily
schedule, personal interests, living city) from the real user. For
example, if the real user is a student, one decoy may behave
like a full-time worker in Las Angeles, another decoy may
be a part-time worker moving in Toronto, Canada. Moreover,
our decoys behave like the real human so that even advanced
data mining tools cannot tell which trajectory belongs to a
decoy (as shown in our experiments). As a result, the service
provider will receive seemly multiple users’ service requests
and hard to tell what are the real users’ true interests.
It is worth mentioning that for the users to gain such privacy
protection from the MoveWithMe system, they need to connect
to the Internet via certain VPN or anonymity network TOR
so that the service provider cannot identify the users’ real
locations by analyzing the original IP address. Also, the users
should not directly use the location-based services to consume
third-party services, such as reserving a restaurant through
the TripAdvisor’s website, which would lead the users’ true
locations since decoys are not allowed to purchase anything.
Users are suggested to only use the location-based services to
browse the needed services, and then directly go to the website
of the desired service for the purchasing operations.
V. EXPERIMENTAL STUDY
We have implemented the proposed MoveWithMe system as
mobile apps both in Android 6.0 and iOS 11.3, and conducted
a series of experiments to evaluate the effectiveness and
efﬁciency of the system. In terms of effectiveness, we examine
three aspects: (i) we tested various location-based services to
see if the requests generated from decoys are also received
and responded by the service providers; (ii) we check if the
TABLE I
LOCATION-BASED SERVICES TESTED
decoys’ trajectories are consistent with the designated social
patterns as time evolves; (iii) we utilize data mining tools
to see if fake trajectories can be identiﬁed out of the real
trajectories. In terms of efﬁciency, we measure the response
time taken for the user to receive the original location-based
service with and without the MoveWithMe app. The devices
used for testing include a Samsung Galaxy S4, a Samsung
Galaxy S6, a Google Nexus 5X, and an iPhone 7. Unless
noted, the results are from Google Nexus 5X.
A. Effectiveness Testing
In the ﬁrst round of experiments, we evaluate the effective-
ness of the MoveWithMe app when the user is visiting the
popular location-based services as shown in Table I. These
websites can be classiﬁed into three categories. The ﬁrst
category of the websites needs the user’s precise geolocation
information (latitude and longitude) to perform the services,
such as Yelp, TripAdvisor, and Google Arts & Culture.
The second category of the websites would submit the user’s
address information, such as Airbnb and Aol. Weather. The
third category of websites such as KFC and Movietickets use
the postal code to locate the user.
In the experiments, we ﬁrst use our MoveWithMe app to
test whether or not the above websites receive the real user’s
location and the decoy’s locations. The real user’s location is
in Rolla, MO. Figure 8 (b), (c), and (d) shows the query results
from the Yelp when the user inquiries nearby restaurants.
We can see that these query results are not restaurants near the
user’s real location (i.e., Rolla), but the results with respect to
the decoys’ locations at Chicago, Kansas, and Atlanta. That
means MoveWithMe has successfully fed fake locations to
Yelp. Note that the requests of those decoys are performed
in the background automatically. For the user, he/she will
browse the Yelp website in the foreground as usual without
any interruption. As presented in Figure 8 (a),
the user
will obtain the restaurant information regarding his/her real
location. Similarly, in Figure 8 (e), the user is searching for
nearby things to do in Rolla using an iOS device. As presented
in Figure 8 (f), the ﬁrst decoy in Chicago is querying things to
do at the same time. We observe the similar performance of
MoveWithMe for other websites that provide location-based
services. Due to the space constraints, we do not include the
screenshots here.
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
KANG et al.: MoveWithMe: LOCATION PRIVACY PRESERVATION FOR SMARTPHONE USERS
721
Fig. 9. Historical Traces of Decoys and the Real User.
Fig. 10. Trajectory Classiﬁcation Precision.
more effectively than other randomly generated dummies.
We select
three commonly used data mining algorithms:
DecisionTree, KNN, and GaussionProcesses. Each algorithm
is trained by using 1000 real trajectories extracted from the
GeoLife trajectory dataset [45]–[47] and 1000 fake trajectories
from our MoveWithMe app. For each trajectory, n sample
points are randomly selected to simulate the number of daily
visit
to the same service provider. The features used for
training include various aspects of a trajectory, which are
the minimum segment length, the maximum segment length,
the average segment length, the minimum speed, the max
speed, the average speed, and the standard deviation of speed.
For comparison, we also generate another set of fake trajec-
tories that are formed by randomly selected locations around
the real locations in the GeoLife trajectories with less than
1km distance deviation. During the testing, we mix 500 real
GeoLife trajectories with 500 fake trajectories.
As shown in Figure 10, the detection rate of randomly
generated dummy trajectories is also very high (around 95%).
This is because the moving patterns of the random dummies
are much different from real humans. Compared to random
dummies, the decoys generated by our MoveWithMe system
are much harder to be correctly classiﬁed by the data mining
algorithm. The detection accuracy of our decoys is only around
60% to 70%, slightly higher than a random guess (50%). Note
that this detection rate is achieved when we give the service
provider advantages by assuming that
they have correctly
labeled 1000 of our decoy trajectories as fake trajectories
Fig. 8. Effectiveness Testing.
Next, we run the MoveWithMe system for a whole day
and compare the historical trajectories of the real user and
decoys. Figure 9 (a) and (b) show the results. We can see that
it is hard to tell which trajectory is fake since the decoy also
follows the speed limit, the human’s schedule like lunch break
and going back home at night. In addition, we also observe
that the decoy’s movement pattern is quite different from the
user, which means the MoveWithMe app can effectively help
prevent the service provider from proﬁling the user.
After that, we test if the fake trajectories generated by the
MoveWithMe app can prevent the data mining tools’ detection
Authorized licensed use limited to: University of Missouri Libraries. Downloaded on March 26,2020 at 16:32:19 UTC from IEEE Xplore.  Restrictions apply. 
722
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 15, 2020
Fig. 11. Response Time.
during the training. When the service provider uses the random
dummies for training, their ability of detecting our decoys
drops to 45%.
More formally,
let k be the number of decoys in the
MoveWithMe app, and p be the accuracy of the real trajectory
classiﬁcation. We can calculate the possibility for the service
provider to precisely distinguish the real trajectory and rule
out the fake trajectories as P = pk+1. For example, even if
p equals to 70% while k equals to 10, the chance for the
service provider to precisely distinguish the real trajectory
is only 1.98%. This demonstrates that our MoveWithMe
can effectively protect user’s location privacy even when the
service provider is trying to identify the real trajectories using
advanced data mining tools. In addition, we also vary the
number of daily visits to the same service provider from
25 to 200 (denoted by the number under the algorithm name
in the ﬁgure). When there are fewer daily visits (e.g., 25),
the detection rate is lower. The reason is straightforward that
the less frequent use of the same service, the less location
information the service provider will collect from the user.
B. Response Time Testing
The second round of experiments aims to evaluate the
response time of the proposed MoveWithMe app. We vary the
number of decoys (the value of k) from 0 to 5 (k = 0 means
accessing location-based services without our MoveWithMe
app’s protection). In each instance of a run, we perform
10 different queries and record the response time for each
query. Then, we calculate the average response time of the
10 queries.
Figure 11 reports the average response time with respect
to each service and the aggregated average response time of
all the services (denoted as “AVE.”). From the ﬁgure, we can
observe that the response time of the services slightly increases