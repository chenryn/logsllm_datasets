right to a given object.
Deﬁnition 3 (Safety Analysis) Given an access control
scheme hΓ, Ψ, Q,`i, let the set of subjects that can exist
in a system based on the scheme be S, let the set of objects
be O, and let the set of rights be R. Assume that there ex-
ists a function hasRight: S×O×R → {true, false} such
that hasRight(s, o, r) returns true if in the current state, s
and o exist, r is a right in the system, and s has the right r
over o, and false otherwise. A safety analysis instance has
the form hγ, ψ,T , ¤¬hasRight(s, o, r)i for some s ∈ S,
o ∈ O and r ∈ R. That is, safety analysis is security anal-
ysis with φ instantiated to ¬hasRight(s, o, r). The safety
analysis instance is true if hasRight(s, o, r) is false in ev-
ery reachable state, with no state change initiated by a user
from T , and false otherwise.
What is DAC? The NCSC guide titled ‘A Guide To Un-
derstanding Discretionary Access Control in Trusted Sys-
tems’ [6], portions of which were published as a research
paper [7], states that “the basis for (DAC) is that an in-
dividual user, or program operating on the user’s behalf,
3
is allowed to specify explicitly the types of access other
users (or programs executing on their behalf) may have to
information under the user’s control.” We point out two
speciﬁc properties from this characterization of DAC: (1)
The notion of “control” – there is a notion that users ex-
ercise control over resources in that a user that controls
a resource gets to dictate the sorts of rights other users
have over the resource, and (2) the notion of initiation of
an action by a user to change the protection state – such
state changes occur because particular users initiate such
changes. A representation of a DAC scheme needs to cap-
ture both these properties.
Some literature (for example, [18, 22]) appears to
equate DAC with the HRU scheme [10]. This is incorrect,
as there exist many systems based on the HRU scheme
that are not DAC systems. For instance, consider an HRU
system in which there is only one command, and that com-
mand has no condition. This system is not a DAC sys-
tem as it does not have the ﬁrst property from above on
the control of resources by a subject. In addition, there
are DAC schemes that do not have natural representa-
tions as HRU schemes. For instance, the Graham-Denning
scheme [8] (see Section 4.1) is a DAC scheme in which
a subject may be ‘owned’ or ‘controlled’ by at most one
other subject. A system based on the HRU scheme cannot
capture this feature in a natural way.
4. Safety Analysis in the Graham-Denning
Scheme
In this section, we study safety analysis in the Graham-
Denning DAC scheme [8]. We ﬁrst present a description
of the scheme in the following section. Our description
clearly describes the states and state-change rules in the
scheme. In Section 4.2, we present an algorithm to de-
cide safety in the scheme, and show that the algorithm is
correct. We also assert that the algorithm is efﬁcient.
4.1. The Graham-Denning Scheme
In this section, We present a precise representation for
the Graham-Denning scheme. We deﬁne what data are
stored in a protection state, and how a state-change rule
changes a state.
Assumptions We postulate the existence of the follow-
ing countably inﬁnite sets: O, the set of objects; S, the set
of subjects (S ⊂ O); and R, the set of rights.
Note that the set of objects (or subjects) in any given
state in the Graham-Denning scheme is ﬁnite; however,
the number of objects that could be added in some future
state is unbounded. Similarly, the set of rights in any given
access control system is ﬁnite; however, different access
control systems may use different sets of rights. There-
fore, we assume S, O, and R are countably inﬁnite.
We assume a naming convention so that we can de-
termine, in constant time, whether a given object, o, is a
subject (i.e., o ∈ S) or not (i.e., o ∈ O − S). There
exists a special “universal subject” u ∈ S; the role of u
will be explained later. The set of rights R contains two
special rights, own and control, a countably inﬁnite set
Rb of “basic” rights, and a countably inﬁnite set R∗b of
basic rights with the copy ﬂag denoted by ∗, i.e., R∗b =
{r∗|r ∈ Rb}. In other words, R = {own, control}∪Rb∪
R∗b. The meaning of the copy ﬂag is clariﬁed when we
discuss the state-change rules for the scheme. An access
control system based on the Graham-Denning scheme is
associated with a protection state, and a state-change rule.
States, Γ A state in the Graham-Denning scheme, γ, is
associated with the tuple hOγ, Sγ, Mγ[ ]i, where Oγ ⊂ O
is a ﬁnite set of objects that exist in the state γ, Sγ ⊂ S is
a ﬁnite set of subjects that exist in γ, and Sγ is a subset of
Oγ. Mγ[ ] is the access matrix, and Mγ[ ]: Sγ×Oγ → 2R.
That is, Mγ[s, o] ⊂ R is the ﬁnite set of rights the subject
s ∈ Sγ has over the object o ∈ Oγ.
Every state, γ = hOγ, Sγ, Mγ[ ]i, in the Graham-
Denning scheme satisﬁes the following seven properties.
1. Every object must be owned by at least one subject,
2. Objects are not controlled, only subjects are, i.e.,
i.e., ∀ o ∈ Oγ ∃s ∈ Sγ(own ∈ Mγ[s, o]).
∀ o ∈ (Oγ − Sγ)∀ s ∈ Sγ(control 6∈ Mγ[s, o]).
3. The special subject u exists in the state, is not owned
by any subject, and is not controlled by any other
subject, i.e., u ∈ Sγ ∧ ∀ s ∈ Sγ(own 6∈ Mγ[s, u]) ∧
∀ s ∈ Sγ − {u}(control 6∈ Mγ[s, u]).
4. A subject other than u is owned by exactly one other
subject, i.e., for every s ∈ Sγ − {u}, there exists
exactly one s0 ∈ Sγ such that s0
6= s and own ∈
Mγ[s0, s];
5. Every subject controls itself, i.e., ∀s ∈ Sγ(control ∈
6. A subject other than u is controlled by at most one
other subject, i.e., for every s ∈ Sγ−{u}, there exists
at most one s0 ∈ Sγ such that s0 6= s and control ∈
Mγ[s0, s].
7. There exists no set of subjects such that they form
a “cycle” in terms of ownership of each other (and
in particular, a subject does not own itself),
i.e.,
¬(∃{s1, . . . , sn} ⊆ Sγ(own ∈ Mγ[s2, s1] ∧ own ∈
Mγ[s3, s2] ∧ ··· ∧ own ∈ Mγ[sn, sn−1] ∧ own ∈
Mγ[s1, sn])).
Mγ[s, s]).
These state invariants are maintained by the state-
change rules.
4
State-Change Rules, Ψ Each member, ψ, of the set of
state-change rules, Ψ, in the Graham-Denning scheme,
is a set of commands parameterized by a set of rights,
Rψ. These commands are shown in Figure 1. Where
possible, we use the syntax for commands from the HRU
scheme [10], but as we mention in Section 3, we can-
not represent all aspects of DAC schemes using only con-
structs for commands in the HRU scheme. We use some
additional well-known constructs such as ∀ and ∃ in these
commands. A state-change is the successful execution of
one of the commands. We assume that the state subse-
quent to the execution of a command is γ0. We denote
such a state-change as γ 7→ψ(s) γ0, where s is the initiator
of the command. We point out that for each command,
unless speciﬁed otherwise, Sγ0 = Sγ, Oγ0 = Oγ, and
Mγ0 [s, o] = Mγ[s, o] for every s ∈ Sγ and o ∈ Oγ. We
use ← to denote assignment, i.e., x ← y means that the
value in x is replaced with the value in y. The commands
in the Graham-Denning scheme are the following. The
ﬁrst parameter to each command is named i, and is the
subject that is the initiator of the execution of the com-
mand.
• transfer r(i, s, o) This command is used to grant the
right r by an initiator that has the right r∗ over o.
There is one such command for every r ∈ Rψ ∩ Rb.
The initiator, i, must possess the right r∗ over o, and
the subject s must exist for this command execution
to succeed.
• transfer r∗(i, s, o) This command is used to grant the
right r∗ by an initiator that has the right r∗ over o.
There is one such command for every r∗ ∈ Rψ∩R∗b.
The initiator, i, must possess the right r∗ over o, and
the subject s must exist for this command execution
to succeed.
• transfer own(i, s, o) This command is used to trans-
fer ownership over o from i to s. For this command
to succeed, i must have the own right over o, s must
exist, and the transfer of ownership must not violate
invariant (7) from the list of state invariants we dis-
cuss above. After the execution of this command, i
will no longer have the own right over o (but s will).
• grant r(i, s, o) This command is used to grant the
right r over o by the owner of o. There is one such
command for every r ∈ Rψ ∩Rb. For this command
execution to succeed, i must have the own right over
o, and s must exist.
• grant r∗(i, s, o) This command is very similar to the
previous command, except the the owner grants r∗ ∈
Rψ ∩ R∗b.
• grant control(i, s, o) This command is used to grant
the control right over o by its owner. For the exe-
cution of this command to succeed, i must have the
right control over o, s must exist, o must be a subject,
and another subject must not already have the right
control over o. These checks are needed to maintain
the state invariants related to the control right that we
discuss above.
• grant own(i, s, o) This command is used to grant
the own right over o. This is different from the
transfer own command in that in this case, i retains
(joint) ownership over o. For the execution of this
command to succeed, i must have the right own over
o, o must not be a subject, and s must exist.
• delete r(i, s, o) This command is used to delete a
right a subject has over o. There is one such com-
mand for every r ∈ Rψ ∩ Rb. For the execution of
this command to succeed, i must have the right own
over o, and s must exist.
• delete r∗(i, s, o) This command is similar to the pre-
vious command, except that a right r∗ ∈ Rψ ∩ R∗b is
deleted.
• create object(i, o) This command is used to create
an object that is not a subject. For the execution of
this command to succeed, i must exist, and o must be
an object that is not a subject, that does not exist. An
effect of this command is that i gets the own right
over o in the new state.
• destroy object(i, o) This command is used to destroy
an object that exists. For the execution of this com-
mand to succeed, i must have the right own over o,
and o must be an object that is not a subject.
• create subject(i, s) This command is used to create
a subject. For the execution of this command to suc-
ceed, i must exist, and s must be a subject that does
not exist. In the new state, i has the own right over s,
and s has the control right over itself.
• destroy subject(i, s) This command is used to de-
stroy a subject. For the execution of this command to
succeed, i must have the own right over s. An effect
of this command is that ownership over any object
owned by s is transferred to i.
4.2. Safety analysis
An algorithm to decide whether a system based on the
Graham-Denning scheme is safe is shown in Figure 2. A
system based on the Graham-Denning scheme is charac-
terized by a start-state, γ, and state-change rule, ψ (which
is a set of commands). The algorithm takes as input γ,
ψ, a triple, ω = hs, o, xi ∈ S × O × R, and a ﬁnite set,
T ⊂ S, of trusted subjects. The algorithm outputs “true”
if the system satisﬁes the safety property with respect to
the subject s, object o and right x, and “false” otherwise.
We ﬁrst discuss the algorithm, and then its correctness and
time-complexity.
In lines 5-10 of the algorithm, we check the cases for
which we do not have to consider potential state-changes
5
command transfer r(i, s, o)
if r∗ ∈ Mγ[i, o] ∧ s ∈ Sγ then
Mγ0 [s, o] ← Mγ[s, o] ∪ {r}
command transfer own(i, s, o)
if own ∈ Mγ[i, o] ∧ o ∈ Sγ ∧ s ∈ Sγ then
if @{s1, . . . , sn} ∈ Sγ such that
own ∈ Mγ[s1, s] ∧ own ∈ Mγ[s2, s1]
∧ ··· ∧ own ∈ Mγ[sn, sn−1]
∧ own ∈ Mγ[o, sn] then
Mγ0[s, o] ← Mγ[s, o] ∪ {own}
Mγ0[i, o] ← Mγ[i, o] − {own}
command grant control(i, s, o)
if own ∈ Mγ[i, o] ∧ o ∈ Sγ ∧ s ∈ Sγ then
if @ s0 ∈ Sγ such that
s0 6= o ∧ control ∈ Mγ[s0, o] then
Mγ0[s, o] ← Mγ[s, o] ∪ {control}
command delete r(i, s, o)
if (own ∈ Mγ[i, o] ∧ s ∈ Sγ)
∨ control ∈ Mγ[i, s] then
Mγ0 [s, o] ← Mγ[s, o] − {r}
command create object(i, o)
if o 6∈ Oγ ∧ i ∈ Sγ ∧ o ∈ O − S then
Oγ0 ← Oγ ∪ {o}
Mγ0 [i, o] ← own
command create subject(i, s)
if s 6∈ Oγ ∧ i ∈ Sγ ∧ s ∈ S then
Oγ0 ← Oγ ∪ {s}
Sγ0 ← Sγ ∪ {s}
Mγ0 [i, s] ← {own}
Mγ0 [s, s] ← {control}
command transfer r∗(i, s, o)
if r∗ ∈ Mγ[i, o] ∧ s ∈ Sγ then
Mγ0 [s, o] ← Mγ[s, o] ∪ {r∗}
command grant r(i, s, o)
if own ∈ Mγ[i, o] ∧ s ∈ Sγ then
Mγ0 [s, o] ← Mγ[s, o] ∪ {r}
command grant r∗(i, s, o)
if own ∈ Mγ[i, o] ∧ s ∈ Sγ then
Mγ0 [s, o] ← Mγ[s, o] ∪ {r∗}
command grant own(i, s, o)
if own ∈ Mγ[i, o] ∧ o 6∈ Sγ
∧ s ∈ Sγ then
Mγ0 [s, o] ← Mγ[s, o] ∪ {own}
command delete r∗(i, s, o)
if (own ∈ Mγ[i, o] ∧ s ∈ Sγ)