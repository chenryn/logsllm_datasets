R
s
s
e
c
c
u
S
db, 220
db, 222
db, 224
db, 226
db, 228
sb, 220
sb, 222
sb, 224
sb, 226
sb, 228
 0
 0
 64
 128
 192
 256
Starting Position
Figure 5: Recovery rate of single-byte versus double-byte
algorithm for S = 220, . . . ,2 28 (n = 6, T = 5, 1≤ r ≤ 251).
computes a password candidate rather than evaluating
the likelihood of candidates from a list which may not
contain the target password. On the other hand, our attack
trivially supports larger values of T , whereas the naive
attack is not so easily modiﬁed to enable this feature.
Comparing the Single-Byte and Double-Byte Attacks
Figure 5 provides a comparison of our single-byte and
double-byte attacks. With all other parameters equal, the
success rates are very similar for the initial 256 positions.
The reason for this is the absence of many strong double-
byte biases that do not arise from the known single-byte
biases in the early positions of the RC4 keystream.
Effect of the a priori Distribution As a means of test-
ing the extent to which our success rates are inﬂuenced by
knowledge of the a priori probabilities of the candidate
passwords, we ran simulations in which we tried to re-
cover passwords sampled correctly from the Singles.org
dataset but using a uniform a priori distribution for the
RockYou-based dictionary used in the attack. Figure 6
shows the results (S = 224, n = 6, T = 5, double-byte
attack) of these simulations, compared to the results we
obtain by exploiting the a priori probabilities in the attack.
It can be seen that a signiﬁcant gain is made by using the
a priori probabilities, with the uniform attack’s success
rate rapidly dropping to zero at around r = 128.
Effect of Password Length Figure 7 shows the effect
of increasing n, the password length, on recovery rates,
with the sub-ﬁgures showing the performance of our
double-byte attack for different numbers of ciphertexts
(S = 2s with s ∈ {24,26,28}). Other parameters are set
to their default values. As intuition suggests, password
recovery becomes more difﬁcult as the length increases.
Also notable is that the ceiling on success rate of our
attack decreases with increasing n, dropping from more
than 80% for n = 5 to around 50% for n = 8. This is due
to the fact that only 48% of the length 8 passwords in the
Singles.org data set actually occur in the RockYou attack
dictionary: our attack is doing as well as it can in this
case, and we would expect stronger performance with an
attack dictionary that is better matched to the target site.
Effect of Increasing Try Limit T Recall that the pa-
rameter T deﬁnes the number of password trials our at-
tacks make. The number of permitted attempts for speciﬁc
protocols like BasicAuth and IMAP is server-dependent
and not mandated in the relevant speciﬁcations. Whilst
not speciﬁc to our chosen protocols, a 2010 study [5]
showed that 84% of websites surveyed allowed at least
T = 100 attempts; many websites appear to actually al-
USENIX Association  
24th USENIX Security Symposium  123
11
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
Len 5
Len 6
Len 7
Len 8
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
Len 5
Len 6
Len 7
Len 8
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
Len 5
Len 6
Len 7
Len 8
 0
 0
 64
 128
 192
 256
 0
 0
 64
 128
 192
 256
 0
 0
 64
 128
 192
 256
Starting Position
(a) 224 ciphertexts
Starting Position
(b) 226 ciphertexts
Starting Position
(c) 228 ciphertexts
Figure 7: Effect of password length on recovery rate (T = 5, 1 ≤ r ≤ 251, double-byte algorithm).
low T = ∞. Figure 8 shows the effect of varying T in our
double-byte algorithm for different numbers of cipher-
texts (S = 2s with s ∈ {24,26,28}). Other parameters are
set to their default values. It is clear that allowing large
values of T boosts the success rate of the attacks.
Note however that a careful comparison must be made
between our attack with parameter T and the success rate
of the obvious password guessing attack given T attempts.
Such a guessing attack does not require any ciphertexts
but instead uses the a priori distribution on passwords in
the attack dictionary (RockYou) to make guesses for the
target password in descending order of probability, the
success rate being determined by the a priori probabilities
of the guessed passwords in the target set (Singles.org).
Clearly, our attacks are only of value if they signiﬁcantly
out-perform this ciphertext-less attack.
Figure 9 shows the results of plotting log2(T ) against
success rate α for S = 2s with s ∈ {14,16, . . . ,28}. The
ﬁgure then illustrates the value of T necessary in our
attack to achieve a given password recovery rate α for
different values of S. This measure is related to the α-
work-factor metric explored in [4] (though with the added
novelty of representing a work factor when one set of
passwords is used to recover passwords from a different
set). To generate this ﬁgure, we used 1024 independent
runs rather than the usual 256, but using a ﬁxed set of
1024 passwords sampled according to the a priori distri-
bution for Singles.org. This was in an attempt to improve
the stability of the results (with small numbers of cipher-
texts S, the success rate becomes heavily dependent on
the particular set of passwords selected and their a pri-
ori probabilities, while we wished to have comparability
across different values of S).
The success rates shown in Figure 9 are for our double-
byte attack with n = 6 and r = 133, this speciﬁc choice of
r being motivated by it being the location of passwords for
our BasicAuth attack proof-of-concept when the Chrome
browser is used (similar results are obtained for other
values of r). The graph also shows the corresponding
work factor T as a function of α for the guessing attack
(labeled “optimal guessing” in the ﬁgure).
Figure 9 shows that our attack far outperforms the
guessing attack for larger values of S, with a signiﬁcant
advantage accruing for S = 224 and above. However, the
advantage over the guessing attack for smaller values of
S, namely 220 and below, is not signiﬁcant. This can be
attributed to our attack simply not being able to compute
stable enough statistics for these small numbers of ci-
phertexts. In turn, this is because the expected random
ﬂuctuations in the keystream distributions overwhelm the
small biases; in short, the signal does not sufﬁciently
exceed the noise for these low values of S.
Effect of Base64 Encoding We investigated the effect
of Base64 encoding of passwords on recovery rates, since
many application layer protocols use such an encoding.
The encoding increases the password length, making re-
covery harder, but also introduces redundancy, potentially
helping the recovery process to succeed. Figure 10 shows
our simulation results comparing the performance of our
double-byte algorithm acting on 6-character passwords
and on Base64 encoded versions of them. It is apparent
from the ﬁgure that the overall effect of the Base64 en-
coding is to help our attack to succeed. In practice, the
start of the target password may not be well-aligned with
the Base64 encoding process (for example, part of the
last character of the username and/or a delimiter such as
“:” may be jointly encoded with part of the ﬁrst charac-
ter of the password). This can be handled by building a
special-purpose set of candidates X for each possibility.
Handling this requires some care when mounting a real
attack against a speciﬁc protocol; a detailed analysis is
deferred to future work.
Shifting Attack In certain application protocols and
attack environments (such as HTTPS) it is possible for the
adversary to incrementally pad the plaintext messages so
that the unknown bytes are always aligned with positions
having large keystream biases. Our algorithm descriptions
124  24th USENIX Security Symposium 
USENIX Association
12
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
1
3
5
10
100
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
1
3
5
10
100
 1
 0.8
e
t
a
R
s
s
e
c
c
u
S
 0.6
 0.4
 0.2
1
3
5
10
100
 0
 0
 64
 128
 192
 256
 0
 0
 64
 128
 192
 256
 0
 0
 64
 128
 192
 256
Starting Position
(a) 224 ciphertexts
Starting Position
(b) 226 ciphertexts
Starting Position
(c) 228 ciphertexts
Figure 8: Effect of try limit T on recovery rate (n = 6, 1 ≤ r ≤ 251, double-byte algorithm).
e
t
a
R
s
s
e
c
c
u
S
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
db, 220
db, 222
db, 224
db, 226
db, 228
base64, 220
base64, 222
base64, 224
base64, 226
base64, 228
 64
 128
 192
 256