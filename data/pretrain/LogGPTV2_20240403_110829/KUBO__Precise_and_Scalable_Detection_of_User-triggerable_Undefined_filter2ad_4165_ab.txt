out-of-bound bool
out-of-bound array index
out-of-bound enum
UB condition
i. V  1
i.V > array bound
i.V > enum max value
integer overﬂow
if unsigned: i.V > max(uint)
if signed: i.V > max(sint)
ii.V  object size
i.V > max(uint)
Fig. 1: CVE-2018-13053: A low severity UB in kernel caused by
inputs that is not directly user controllable.
shift out of bound
1These UBs are triggered by fuzzing during run time.
3
for V1 left/right shift by V2:
i.V1= bitwidth(V)
1if(flags!=TIMER_ABSTIME){2ktime_tnow=alarm_bases[type].gettime();3-exp=ktime_add(now,exp);4+5+exp=ktime_add_safe(now,exp);6}7restart->nanosleep.expires=exp;(i.e., should be properly validated) by the OS and may enter
the kernel space via several different interfaces. According to
our survey, 71% (42) of the CVEs in Ssurvey shown in Table I
can be directly attributed to missing or incomplete validation
on userspace inputs, which justiﬁes our design choice to focus
on detecting UBs triggered by userspace inputs. Guided by
Ssurvey, below we list the supported userspace input channels
by KUBO.
1) parameters of syscall/ioctl: The most common system
interfaces exposed by the kernel or the device drivers
for receiving service requests from userspace. As a con-
sequence, the parameters of these functions are directly
provided by the user.
2) sysctl/sysfs: This mechanism lets a privileged user/pro-
gram read or write kernel global variables in the form of
ﬁle access, such as ﬁles under /proc/sys and /sys
directories usually for the purpose of being able to con-
ﬁgure the kernel on the run. These kernel variables form
a channel for userspace inputs.
3) Memory data transfer functions: Apart from user di-
rectly feeding input to the parameters of syscall/ioctl
functions, userspace input can also be fetched from user
programs by kernel via designated transfer functions
(e.g.,copy_from_user()), which take as input a user-
supplied pointer to a userspace memory buffer. Such
pointers should be annotated using the __user macro in
the kernel code, preventing direct (accidental) dereference
by the kernel.
We note that there exist other types of untrusted UB-triggering
inputs, such as network payload ﬂowing through the kernel and
input from I/O devices. However, based on our survey, these
inputs account for a fairly small portion of our surveyed CVEs.
Also covering them requires synergy from other lines of works
that tries to precisely identify these inputs e.g., PeriScope [32]
did a good job identifying input from I/O devices. As a result,
as a userspace input oriented approach, KUBO does not consider
these untrusted inputs in its design. We discussed the limitation
of not considering these inputs in Section VI-A.
Discussed UB scope and triggering condition: As the popular
open source OS such as Linux and FreeBSD are implemented
in C, the types of UB this paper discussed are also C related.
In this context, UB, as speciﬁed in the C language standard,
has a wide range of causes and it covers varieties of bugs such
as uninitialized read and integer overﬂow, just to name a few.
In this paper, we focus on the most typical and critical UBs
that are covered by UB sanitizers [4]. Table II lists these UBs
and the condition for each type of UB to be triggered (called
UB conditions). All UBs observed in Ssurvey are covered in
this table.
UB instruction: If an instruction can directly produce a UB
(i.e., a UB condition is met immediately after the execution of
the instruction), it is referred to as a UB instruction.
from high false positives (i.e., the majority of reported UBs
are in fact false or non-triggerable).
In comparison, KUBO performs a backward and on-demand
inter-procedural analysis, which simultaneously achieves the
whole-kernel scalability and a much lower false detection rate.
Moreover, KUBO is focused on detecting critical UBs that are
triggered by userspace inputs.
Figure 2 shows the high-level workﬂow of KUBO. It starts
from each potential UB instruction (ﬂagged by UBSan) and
traverses back along the code paths to verify whether the
UB is triggerable by userspace inputs. KUBO determines
the triggerability based on two requirements pertaining to a
traversed code path P : (R1), the variable(s) involved in the
UB condition must fully depend on (or be solely modiﬁed by)
userspace inputs; (R2), the path constraints on P and the UB
condition are satisﬁable.
KUBO veriﬁes R1 by statically tracking the data and control
dependencies of each UB triggering variable (§ III-D). If R1
cannot be determined in the current function (x in Figure 2,
e.g., the data sources of a UB conditional variable or its
dependence are yet to be found), KUBO checks whether an
inter-procedural analysis is needed in this case by checking an
empirical indicator called BTI. If BTI is true (y), KUBO can
have high conﬁdence that the UB can be triggered by userspace
inputs (§ III-E). BTI reduces the number of inter-procedural
paths that KUBO needs to analyze. If BTI is false (z), KUBO
launches the incremental call chain upwalk and continues the
backward analysis into selected caller functions, to verify if R1
holds (i.e., UB conditional variables take values solely from
userspace inputs). The incremental call chain upwalk chooses
one caller function at a time and sends the data-ﬂow summary
of the function to the input tracking component ({) for another
round of checking on R1. This process stops when either R1
is conﬁrmed/deﬁned or the number of function hops reaches a
limit (§ III-F).
After R1 is conﬁrmed (either y or |), as part of the post-
bug analysis (§ III-G), KUBO veriﬁes R2 by checking if the
path constraints and UB conditions are satisﬁable using an
SMT solver. If R2 is met as well, KUBO then performs the rest
of the post-bug analysis, which ﬁnally conﬁrms whether the
UB may cause unintended consequences, and if so, produces
a bug report (}).
Fig. 2: KUBO workﬂow overview
B. System overview
C. Identifying UB instructions
Previous work [38], [37] on statically detecting UB in
kernels used simple intra-procedural analysis, which can scale
up to the whole kernel but scariﬁes accuracy and thus suffers
To identify all potential UB instructions, KUBO applies the
UB Sanitizer (UBSan) [4] on the whole kernel source code and
analyzes the code instrumentations done by UBSan (UBSan
4
FalseTrueBTI Calculation(Section III-E)Callchain Upwalk(Section III-F)Post-Bug Analysis(Section III-G)Bug ReportR1 is metR1 not metBackwardUserspace InputTracking& UB ConditionAnalysis(Section III-D)123456From each UB InstructionTABLE III: Data tags and propagation rules of the back-ward user-
space input tracing.
Symbol
Deﬁnitions
Tag
Propagation
Rules
Variables: v ∈ V
Tags: Φ = {N, U, C}, where N > U > C
Tag query on v: µ(v) → φ
Tag update on v: µ[v → φ]
φ(cid:48) =µ(v1 ) µ(cid:48) =µ[v→φ(cid:48) ]
µ,v=(cid:104)uniop(cid:105)v1(cid:32)µ(cid:48) U N IOP
µ,v=v1(cid:104)binop(cid:105)v2(cid:32)µ(cid:48)
φ(cid:48) =max(µ(v1),µ(v2)) µ(cid:48) =µ[v→φ(cid:48) ]
BIN OP
µ(cid:48) =µ[∗ptr1→U ]
µ,f etch(dst:ptr1,src:ptr2,...)(cid:32)µ(cid:48) F ET CH (userspace)
µ(cid:48) =µ[∗ptr→N ]
µ,f oo(ptr,...)(cid:32)µ(cid:48) CALL
µ(cid:48) =µ[∗ptr→µ(v)]
µ,store(ptr,v)(cid:32)µ(cid:48) ST ORE
µ(cid:48) =µ[v→µ(∗ptr)]
µ,v=load(ptr)(cid:32)µ(cid:48) LOAD
ifµ(v)==N,µ(cid:48) =µ[values deﬁning v→N ]
µ,if v then goto v1 else v2(cid:32)µ(cid:48)
BRAN CH
instruments every instruction that may produce a UB by placing
a simple UB condition assertion right before it). Although
comprehensive, the majority of the potential UB instructions
identiﬁed this way is false due to its non-triggerability.
This is not an issue for UBSan, a dynamic sanitizer, because
the false UBs never happen during runtime and thus the
assertions are never invoked. Being a static analyzer, KUBO
treats the UB instructions identiﬁed by UBSan merely as
possible UB candidates and takes multiple analysis steps
(Figure 2) to ﬁlter out false UBs and identify true UBs that
can be triggered by userspace input.
D. Backward userspace input tracking & UB condition analysis
Starting from each potential UB instruction, KUBO ﬁrst
performs a backward slicing to the beginning of the enclosing
function. The slice contains all
the UB
instruction has data- or control-dependence on. KUBO then
performs a path- and ﬁeld-sensitive data-ﬂow analysis on the
slice, checking if R1 is met (i.e., whether a path exists that
allows the UB condition to be solely inﬂuenced by userspace
input). Speciﬁcally, for each path in the slice, KUBO tracks the
propagation of the following data tags:
instructions that
sources (§ III-A) are assigned this tag.
• Userspace Input: Values originated from the userspace
• Const: This tag is assigned to constant values.
• Not known yet: This tag is assigned to values whose
source cannot be determined yet and further backward
tracking (inter-procedural) might be needed. Function
parameters and some global variables are examples of
values with this tag.
The tag propagation rules are deﬁned in Table III using the
operational semantics in the form of:
calculation
Apart from the merging rule, some other rules worth
noting are 1). If a U tagged variable is compared with a
N tagged variable, ﬁrst, the result boolean variable will be
tagged N according to the BIN OP rule, secondly, if this
boolean variable is used in a UB-control-dependent branch
instruction (the BRAN CH rule), the U tagged variable must
also be changed to N as this branch instruction exert unknown
constraint onto this U tagged variable. 2). If a pointer is passed
into a call instruction, then the tag assigned to the content it
points to must be changed to N.
This order among the tags and the propagation rules are
deﬁned to enable quick determination of R1.
After analyzing the current slice, KUBO checks the tag
propagated to the UB conditional variable. If it is tagged as U,
KUBO conﬁrms that R1 is met and it has found a path through
which some userspace inputs fully modify the UB condition. If
the UB conditional variable is tagged as N (i.e., its data source
has not been fully identiﬁed yet), KUBO needs to calculate BTI
and determines if the backward userspace input tracking needs
to be continued to upstream caller functions.
E. Bug triggerability indicator (BTI)
We introduce BTI as an optimization to KUBO. As KUBO
seeks to trace the input source dependencies for a targeted UB,
we found cases where a full scale search is not necessary, thus
we can early report with conﬁdence without really diving into
other function(s). We use BTI to distinguish these cases. BTI
helps reduce the number of cases where KUBO may otherwise
perform inter-procedural userspace input tracking. These cases
represent UBs that can be reported with high conﬁdence without
fully tracking the origins of all UB conditional variables e.g.
meeting the requirement R1.
The idea behind BTI is fairly simple, which can be demon-
strated using a snippet of real kernel code shown in Figure 3.
On Line 8, a signed integer overﬂow/underﬂow UB can be
triggered solely by knowing that sr.l_start is userspace
input (tagged U) fetched on Line 5, even though the other
operand, namely filp->f_pos, is tagged N, i.e., do not know
it can be inﬂuenced by userspace input or not. In cases like
this, we can conﬁdently report the UB without further tracking
input sources of UB conditional variables.
Base on this idea, we deﬁne BTI, a boolean value for
indicating if a UB is already detected even when some inter-
procedural data dependencies of the UB condition are not fully
established yet. BTI is set to True when KUBO’s backward
input tracking ﬁnds that an integer arithmetics operation takes
at least one operand whose value originates from userspace (i.e.,
the operand is tagged as U); otherwise, BTI is set to False
and KUBO continues onto the incremental call chain upwalk to
further analyze UB data sources and the UB condition.
context, analyzed statement (cid:32) new context
(1)
F.
Incremental call chain upwalk
Table III listed some of the most important rules for tag prop-
agation given that the overall principle of this tag propagation
is simple: When two tags are merged together through a
binary operation, the result of this operation takes the most
signiﬁcant tag carried by the operands. The tags, ranked by
their signiﬁcance from high to low, are N, U, and C.
KUBO performs on-demand and efﬁcient inter-procedural
analysis, called incremental call chain upwalk, for resolving
the data dependencies of the UB condition. This analysis
is another technical contribution of our work and sets KUBO
apart from the previous work, which had to limit themselves
to intra-procedural techniques in order to analyze the whole
5
Fig. 3: A real example demonstrating the basic idea of BTI
kernel. Without knowing the inter-procedural context and data
dependencies, the previous work suffers from very high false
positive rates.
The incremental call chain upwalk allows KUBO to achieve
both whole-kernel scalability and high precision when detecting
UBs. It is on-demand and incremental in that the analysis
only backtracks to the selected function callers and does so
one layer at a time. To speed up the analysis and avoid
repetition, KUBO generates per-function dataﬂow summaries.
When the incremental call chain upwalk reaches a function,
KUBO retrieves the dataﬂow summary for the function, plugs
it into the callchain analyzed so far and quickly performs the
userspace input tracking on the extended call chain.
Per-function dataﬂow summary: The dataﬂow summary
captures how, inside a function, the parameters and userspace
inputs, if any, propagate outside the function (e.g., via calls and
returns). Userspace inputs are identiﬁed by the list of system
interfaces discussed in § III-A. A summary is generated via
a path- and ﬁeld-sensitive dataﬂow analysis. The summary
generation happens ofﬂine. During the incremental call chain
upwalk, KUBO adds the dataﬂow summary of the most recently
traversed function to the dataﬂow model of the call chain, on
which a new round of tag propagation can be quickly performed
as described in § III-D.
Caller selection: By checking the dataﬂow summaries of all
the functions that may call the current function, the incremental
call chain upwalk only selects the caller instructions that can
propagate their parameters and/or userspace input to the UB
condition variables in the current function. This avoids unnec-
essary backtracks into caller functions that cannot inﬂuence the
UB conditions.
For example, when we are about to backtrack a caller
function foo which has 3 parameters namely p1, p2, p3. Through
analyzing the current function, we can obtain the information
of what are the parameters that the current UB is depending on,
say, p1 and p2. We ﬁrst collect all the call instructions that call
this function foo from the call graph, for example, c1, c2...c10.
Then we look at the dataﬂow summary that contains each call
instruction. More speciﬁcally, in each dataﬂow summary, we
check whether or not the userspace input can propagate outside
the function through the speciﬁc dependent parameter(s), e.g.,
p1 and p2 in this case. If yes, then this caller is kept, otherwise
discarded. KUBO then keeps the selected caller functions in
a queue and analyzes the possible callchains in breadth-ﬁrst
search order.
Number of hops (callchain length): The incremental call
chain upwalk continues until either R1 is conﬁrmed or the
Fig. 4: For each input-related UBs in Seval, how many hops are
required to trace to where the input can be identiﬁed. Turns out 52