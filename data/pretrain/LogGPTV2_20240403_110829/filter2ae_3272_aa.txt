CVE-2016-0165 是一个典型的整数上溢漏洞，由于在 `win32k!RGNMEMOBJ::vCreate`
函数中分配内核池内存块前没有对计算的内存块大小参数进行溢出校验，导致函数有分配到远小于所期望大小的内存块的可能性。而函数本身并未对分配的内存块大小进行必要的校验，在后续通过该内存块作为缓冲区存储数据时，将会触发缓冲区溢出访问的
OOB 问题，严重情况将导致系统 BSOD 的发生。
# 配置漏洞触发环境
    [+] win7 x86 sp1
    [+] windbg preview 1.0.2001.02001
# 漏洞原理
## 定位漏洞
通过Bindiff可以看出，在`RGNMEMOBJ::vCreate`函数中，当调用`ExAllocatePoolWithTag`函数分配内存之前，增加了对`ULongAdd`函数和`ULongLongToULong`函数的调用。这两个函数在运算时如果发现运算数值超过了`ULONG`整数的范围就会返回`ERROR_ARITHMETIC_OVERFLOW`错误码，所以这两个函数通常用来防止发生整数溢出，在这里，这两个函数用来防止`ExAllocatePoolWithTag`函数的参数`NumberOfBytes`的整数溢出。
接着我们追踪一下这个参数`NumberOfBytes`到底是从哪里来，到哪里去，方便我们更加深入的了解这个漏洞。
    .text:BF876200 ; ---------------------------------------------------------------------------    .text:BF876200
    .text:BF876200 loc_BF876200:                           ; CODE XREF: RGNMEMOBJ::vCreate(EPATHOBJ &,ulong,_RECTL *)+A0↑j
    .text:BF876200                 lea     eax, [ebp+NumberOfBytes]
    .text:BF876203                 push    eax             ; unsigned int *
    .text:BF876204                 xor     edi, edi
    .text:BF876206                 inc     edi
    .text:BF876207                 push    edi             ; unsigned int
    .text:BF876208                 push    [ebp+NumberOfBytes] ; unsigned int
    .text:BF87620B                 call    ?ULongAdd@@YGJKKPAK@Z ; [ebp+NumberOfBytes] = [ebp+NumberOfBytes] + 1
    .text:BF876210                 test    eax, eax
    .text:BF876212                 jl      loc_BF8763D2
    .text:BF876218                 mov     eax, [ebp+NumberOfBytes] ; eax为被乘数
    .text:BF87621B                 push    28h
    .text:BF87621D                 pop     ecx             ; ecx为乘数
    .text:BF87621E                 mul     ecx             ; mul reg32 的答案保存在edx:eax之中
    .text:BF876220                 lea     ecx, [ebp+NumberOfBytes]
    .text:BF876223                 push    ecx             ; unsigned int *
    .text:BF876224                 push    edx
    .text:BF876225                 push    eax             ; 结果保存在[ebp+NumberOfBytes]中
    .text:BF876226                 call    _ULongLongToULong@12 ; ULongLongToULong(x,x,x)
    .text:BF87622B                 test    eax, eax
    .text:BF87622D                 jl      loc_BF8763D2
    .text:BF876233                 cmp     [ebp+NumberOfBytes], 0
    .text:BF876237                 jz      short loc_BF87624E
    .text:BF876239                 push    67646547h       ; Tag
    .text:BF87623E                 push    [ebp+NumberOfBytes] ; NumberOfBytes
    .text:BF876241                 push    21h             ; PoolType
    .text:BF876243                 call    ds:__imp__ExAllocatePoolWithTag@12 ; ExAllocatePoolWithTag(x,x,x)
    .text:BF876249                 mov     [ebp+P], eax
    .text:BF87624C                 jmp     short loc_BF876252
    .text:BF87624E ; ---------------------------------------------------------------------------
这段代码配合注释应该很容易看明白，参数NumberOfBytes在传入函数`ExAllocatePoolWithTag`之前，经历了如下的运算过程：
    [ebp+NumberOfBytes] = ([ebp+NumberOfBytes] + 1) * 0x28
即函数`ExAllocatePoolWithTag`申请的内存大小为(x + 1) *
0x28，对x往前追溯可以发现x来自于函数`ExAllocatePoolWithTag`的第二个参数`EPATHOBJ+4`偏移地址的域
    .text:BF87615C                 mov     esi, [ebp+arg_0]
    (省略无关内容)
    .text:BF876189                 mov     eax, [esi+4]
    .text:BF87618C                 mov     [ebp+NumberOfBytes], eax
在MSDN可以找到`PATHOBJ`的结构
    typedef struct _PATHOBJ {
      FLONG fl;
      ULONG cCurves;
    } PATHOBJ;
+4偏移地址是被定义为`ULONG cCurves`的成员变量
    cCurves
    The number of lines and Bezier curves that make up the path.
该变量表示当前`PATHOBJ`对象的曲线数目。也就是说`(曲线数目 + 1) *
0x28`可以造成整数溢出，使得分配一个远小于目标大小的内存。这里可以看看未修补的素人版本，功能是一致的：
    .text:BF873FEA ; ---------------------------------------------------------------------------    .text:BF873FEA
    .text:BF873FEA loc_BF873FEA:                           ; CODE XREF: RGNMEMOBJ::vCreate(EPATHOBJ &,ulong,_RECTL *)+A2↑j
    .text:BF873FEA                 lea     eax, [ecx+1]    ; ULONG cCurves
    .text:BF873FED                 imul    eax, 28h
    .text:BF873FF0                 test    eax, eax
    .text:BF873FF2                 jz      short loc_BF87400A
    .text:BF873FF4                 push    6E677247h       ; Tag
    .text:BF873FF9                 push    eax             ; NumberOfBytes
    .text:BF873FFA                 push    21h             ; PoolType
    .text:BF873FFC                 call    ds:__imp__ExAllocatePoolWithTag@12 ; ExAllocatePoolWithTag(x,x,x)
    .text:BF874002                 mov     edx, [ebp+arg_8]
    .text:BF874005                 mov     [ebp+P], eax
    .text:BF874008                 jmp     short loc_BF87400E
    .text:BF87400A ; ---------------------------------------------------------------------------
接着往后跟进，查看一下申请出来的这块内存会被如何使用
    .text:BF8740D4 loc_BF8740D4:                           ; CODE XREF: RGNMEMOBJ::vCreate(EPATHOBJ &,ulong,_RECTL *)+18C↑j
    .text:BF8740D4                 push    [ebp+arg_8]     ; struct _RECTL *
    .text:BF8740D7                 mov     [eax+10h], esi
    .text:BF8740DA                 mov     eax, [ebx]
    .text:BF8740DC                 push    [ebp+P]         ; struct EDGE * ; [ebp+P]保存的就是ExAllocatePoolWithTag申请的内存
    .text:BF8740DF                 mov     dword ptr [eax+30h], 48h
    .text:BF8740E6                 mov     eax, [ebx]
    .text:BF8740E8                 mov     [eax+18h], ecx
    .text:BF8740EB                 mov     eax, [ebx]
    .text:BF8740ED                 mov     [eax+14h], ecx
    .text:BF8740F0                 mov     eax, [ebx]
    .text:BF8740F2                 mov     [eax+34h], ecx
    .text:BF8740F5                 mov     eax, [ebx]
    .text:BF8740F7                 lea     ecx, [eax+48h]
    .text:BF8740FA                 mov     [eax+1Ch], ecx
    .text:BF8740FD                 mov     eax, [ebx]
    .text:BF8740FF                 add     eax, 20h
    .text:BF874102                 mov     [eax+4], eax
    .text:BF874105                 mov     [eax], eax
    .text:BF874107                 lea     eax, [ebp+var_68]
    .text:BF87410A                 push    eax             ; struct EDGE *
    .text:BF87410B                 push    [ebp+arg_0]     ; struct EPATHOBJ *
    .text:BF87410E                 call    ?vConstructGET@@YGXAAVEPATHOBJ@@PAVEDGE@@1PAU_RECTL@@@Z ; vConstructGET(EPATHOBJ &,EDGE *,EDGE *,_RECTL *)
函数`ExAllocatePoolWithTag`申请的内存被当作函数`vConstructGET`的第三个参数，作为`struct EDGE
*`类型的指针参数传入的。关于EDGE是什么东西，我们可以在windows的源码中找到
    class EDGE
    {
    public:
        PEDGE pNext;
        LONG  lScansLeft;
        LONG  X;
        LONG  Y;
        LONG  lErrorTerm;
        LONG  lErrorAdjustUp;
        LONG  lErrorAdjustDown;
        LONG  lXWhole;
        LONG  lXDirection;
        LONG  lWindingDirection;
    };
这个结构用来描述将要填充的路径中的单个非水平边。在我们的实验环境中，该结构的大小为40，即0x28。看看函数`vConstructGET`干了些什么。
    VOID vConstructGET(EPATHOBJ& po, EDGE *pGETHead, EDGE *pFreeEdges,RECTL *pBound)
    {
    // Create an empty GET with the head node also a tail sentinel
        pGETHead->pNext = pGETHead; // mark that the GET is empty
        pGETHead->Y = 0x7FFFFFFF;   // this is greater than any valid Y value, so
                                    //  searches will always terminate
        PPATH ppath = po.ppath;
        for (PATHRECORD *ppr = ppath->pprfirst;
             ppr != (PPATHREC) NULL;
             ppr = ppr->pprnext)
        {
        // If first point starts a subpath, remember it as such
        // and go on to the next point, so we can get an edge.
            PPOINTFIX pptfxStart, pptfxEnd, pptfxPrev, pptfx;
            pptfx = ppr->aptfx;
            if (ppr->flags & PD_BEGINSUBPATH)
            {
                pptfxStart = ppr->aptfx;        // the subpath starts here
                pptfxPrev = ppr->aptfx;         // this points starts next edge
                pptfx++;                        // advance to the next point
            }
       // Add edges in PATH to GET, in Y-X sorted order.
            pptfxEnd = ppr->aptfx + ppr->count;
            while (pptfx flags & PD_ENDSUBPATH)
            {
                pFreeEdges =
                    AddEdgeToGET(pGETHead, pFreeEdges,pptfxPrev, pptfxStart,pBound);
            }
        }
    }
函数`ExAllocatePoolWithTag`申请的内存pFreeEdges又一次被当作参数传入函数`vConstructGET`，函数`vConstructGET`循环调用函数`AddEdgeToGET`来将两个点描述的边加入到GET表中，并将数据写入pFreeEdges参数指向的EDGE结构体，最后将下一个EDGE元素地址作为返回值返回。
    pFreeEdge->pNext = pGETHead->pNext; // link the edge into the GET
        pGETHead->pNext = pFreeEdge;
        return(++pFreeEdge);
由于函数`ExAllocatePoolWithTag`申请的内存大小发生了整数溢出，导致这块内存的大小远小于我们的预期，之后进行大量写入操作的时候，将会造成OOB覆盖其他内容，从而导致系统BSOD的触发。
## 触发路径
  * `NtPathToRegion`函数
win32k中的很多函数都会调用`RGNMEMOBJ::vCreate`函数，再从中选取一个可以控制申请内存大小的函数来抵达漏洞，这里我们选择`NtPathToRegion`函数：
    DCOBJ::DCOBJ((DCOBJ *)&v9, a1);
      ......
      XEPATHOBJ::XEPATHOBJ((XEPATHOBJ *)&v7, (struct XDCOBJ *)&v9);
      if ( v8 )
      {
        v4 = *(_BYTE *)(*(_DWORD *)(v9 + 56) + 58);
        v11 = 0;
        RGNMEMOBJ::vCreate((RGNMEMOBJ *)&v10, (struct EPATHOBJ *)&v7, v4, 0);
        if ( v10 )
        {
          v5 = HmgInsertObject(v10, 0, 4);
          if ( !v5 )
            RGNOBJ::vDeleteRGNOBJ((RGNOBJ *)&v10);
        }
        else
        {
          v5 = 0;
        }
        ......
> 该函数用于根据被选择在 `DC` 对象中的路径 `PATH` 对象创建区域 `REGION` 对象，生成的区域将使用设备坐标，唯一的参数 `HDC
> a1` 是指向某个设备上下文 `DC` 对象的句柄。由于区域的转换需要闭合的图形，所以在函数中执行转换之前，函数会将 `PATH`
> 中所有未闭合的图形闭合。在成功执行从路径到区域的转换操作之后，系统将释放目标 `DC` 对象中的闭合路径。另外该函数可在用户态进程中通过
> `gdi32.dll` 中的导出函数在用户进程中进行直接调用，这给路径追踪带来便利。
`XEPATHOBJ v7`被作为第二个参数传递给`RGNMEMOBJ::vCreate`函数，`XEPATHOBJ
v7`早已经在自身的`XEPATHOBJ::XEPATHOBJ`构造函数中依据用户对象`DCOBJ v9`进行初始化，而`DCOBJ
v9`也早在`DCOBJ::DCOBJ`构造函数中依据`NtPathToRegion`函数的唯一参数`HDC a1`进行了初始化。
    DCOBJ *__thiscall DCOBJ::DCOBJ(DCOBJ *this, HDC a2)
    {
      DCOBJ *v2; // esi
      v2 = this;
      *(_DWORD *)this = 0;
      *((_DWORD *)this + 1) = 0;