### Checking for Co-Residence of Instances

In the remainder of this paper, we will use the following methodology to check for co-residence of an instance with a target instance that we do not control. The process involves two primary steps:

1. **Internal IP Address Comparison**: First, compare the internal IP addresses of the two instances to determine if they are numerically close. For m1.small instances, "close" is defined as being within seven numerical units.

2. **TCP SYN Traceroute**: If the IP addresses are close, perform a TCP SYN traceroute to an open port on the target instance. If there is only a single hop (the Dom0 IP), it indicates that the instances are co-resident. This check requires sending at most two TCP SYN packets, making it a very "quiet" method.

### Obfuscating Co-Residence

A cloud provider could potentially render network-based co-residence checks ineffective by implementing certain precautions. For example, the provider might:
- Configure Dom0 to not respond in traceroutes.
- Randomly assign internal IP addresses at the time of instance launch.
- Use virtual LANs to isolate accounts.

If these measures are taken, attackers might need to rely on side-channels to establish co-residence, independent of network configuration. As shown in Section 8.1, side-channels can be used to detect co-residence. However, inhibiting network-based co-residence checks would still impede attackers to some degree, making it a viable defensive strategy.

### Exploiting Placement in EC2

Consider an adversary aiming to attack one or more EC2 instances. Can the attacker place an instance on the same physical machine as the target? In this section, we evaluate the feasibility of achieving co-residence with target victims, defining success as achieving good coverage (co-residence with a notable fraction of the target set). We propose two adversarial strategies that leverage the map developed in Section 5 and the cheap co-residence checks introduced in Section 6.

#### 7.1 Brute-Forcing Placement

The brute-force strategy involves launching many instances over a relatively long period to achieve co-residence with a large target set. Our experiments show that this naive approach can already yield reasonable success rates, especially for large target sets.

**Experimental Setup:**
- **Targets**: Public EC2-based web servers responding with HTTP 200 or 206 to a wget request on port 80.
- **Zone and Instance Type**: Zone 3 and m1.small instances.
- **Data Collection**: Launched numerous m1.small probe instances in Zone 3, instrumented to perform co-residence checks and wget requests to ensure targets were still serving web pages.

**Results:**
- **Probes**: 1,785 probe instances, landing on 78 unique physical machines.
- **Coverage**: Achieved co-residence with 141 out of 1,686 target victims, resulting in an 8.4% coverage rate.

**Discussion:**
- The reported numbers are conservative, representing a lower bound on the true success rate.
- The gap between the survey and probe launches means new or re-launched servers were not detected.
- Despite the limitations, the results suggest that even a naive attack strategy can achieve co-residence with a significant fraction of targets.

#### 7.2 Abusing Placement Locality

To improve upon the brute-force strategy, we explore an alternate approach that leverages placement locality. This strategy assumes the attacker can launch instances soon after the target victim is launched.

**Attack Strategy:**
- **Instance Flooding**: Run as many instances as possible (or as many as the attacker is willing to pay for) in the appropriate availability zone and instance type.
- **Sequential and Parallel Locality**: Take advantage of the strong sequential and parallel placement locality observed in EC2.

**Experimental Setup:**
- **Victim and Attacker Launches**: Victim account launches 1, 10, or 20 instances simultaneously. Five minutes later, an attacker account launches 20 instances.
- **Data Collection**: Repeated the experiment in different availability zones and at different times of the day.

**Results:**
- **Success Rate**: Achieved co-residence with 40% of specific target instances, regardless of availability zone, attacking account, or time of day.
- **Time Lag**: Even with a two-day delay between victim and attacker launches, the success rate remained consistent.

**Conclusion:**
- The dynamic nature of cloud computing and the use of auto-scaling systems provide opportunities for creative adversaries to trigger new victim instances.
- Clever adversaries can find multiple practical ways to exploit this attack scenario, making it a significant security concern.

By understanding and addressing these vulnerabilities, cloud providers can enhance their defenses against such attacks.