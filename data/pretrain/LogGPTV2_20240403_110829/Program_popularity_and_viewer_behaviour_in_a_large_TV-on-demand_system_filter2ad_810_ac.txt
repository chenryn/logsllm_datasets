urday.
4.2.2 The life of a TV news program
TV news programs have a very short lifespan compared
to movies. Figure 12 shows the rank and number of requests
per hour for a news program that was sent live at 19:00.
Most of the requests are the ﬁrst hour when the program
becomes available. The news program immediately becomes
the most requested program that hour and number one on
the ranking. The popularity then quickly declines. There
are almost no requests at all for a news program after the
ﬁrst day. The access pattern is very diﬀerent compared to
what we see in Figure 11 for the simultaneously available
movie.
4.2.3 TV series and children’s programs – periodic
increase in popularity
The interest in a TV program usually decreases with time.
But more often than not the popularity of a program can
also increase temporarily or periodically. We saw in the
previous sections that the number of requests for a program
varies during the day and the week. We also saw for rental
movies that the ranking increased during weekends.
Many TV shows are part of a series of programs. When
the next episode is sent there is often also renewed interest
for old episodes available on-demand. Figure 13 shows an
example with the rank and number of started sessions per
day for an episode of a weekly home improvement TV show.
We can see that the program increase in rank every Thurs-
day when the series is shown on the traditional scheduled
TV.
Figure 14 shows the number of requests per day and the
204Requests per day and rank for a rental movie (comedy−drama), 12/5−13/9
Ranking for a rental movie (comedy−drama) in top 100, 12/5−13/9
3500
3000
2500
2000
1500
1000
500
s
t
s
e
u
q
e
r
#
1
200
400
600
800
1000
k
n
a
R
1200
1400
1600
1800
Rank among rental movies
Rank among all programs
1
10
20
30
40
50
60
70
80
90
100
k
n
a
R
0
5
12 19 26 33 40 47 54 61 68 75 82 89 96 103 110 117 124
2000
Time (days)
(a)
5
12 19 26 33 40 47 54 61 68 75 82 89 96 103 110 117 124
Time (days)
(b)
Figure 10: (a) Requests per day and ranking for a rental movie (comedy-drama). The bar graph shows requests per day
with the scale on the Y-axis shown to the left. The plotted line shows the ranking of the program among all other programs
requested that day. The scale of the ranking is shown on the Y-axis to the right. The grid points out weeks starting on
Mondays. (b) Detailed look at the rank among all programs (top 100) and among rental movies.
Requests per hour and rank for a rental movie (comedy−drama), 25/5−31/5
Requests per hour and rank for a news program, 25/5−31/5
s
t
s
e
u
q
e
r
#
1000
900
800
700
600
500
400
300
200
100
0
1
10
20
30
40
50
60
70
80
90
100
k
n
a
R
s
t
s
e
u
q
e
r
#
1000
900
800
700
600
500
400
300
200
100
0
Immediately becomes number
one on the ranking. But only
popular for a few hours.
Very few requests for a
news program after
the first day.
1
10
20
30
40
50
60
70
80
90
100
k
n
a
R
Wed
Thu
Fri
Sat
Sun
Mon
Tue
Time (hours)
Wed
Thu
Fri
Sat
Sun
Mon
Tue
Time (hours)
Figure 11: Requests per hour and ranking for a rental movie
(comedy-drama). The grid points out the hours between
11:00-12:00 and 23:00-00:00.
Figure 12: Requests per hour and ranking for a TV news
program.
ranking for a cartoon. After the initial peak in interest the
popularity decreases and remains at a steady level over the
month when the program is available. This is diﬀerent if we
look at the ranking on an hourly basis. Figure 15 shows the
ranking of the program per hour during the ﬁrst week. The
pattern is the same for the next three weeks as well. The
program varies in popularity. It goes in and out of the top
100 list, often twice a day.
The number of requests for children’s programs increases
in the mornings and in the early evenings. This is a daily
recurring pattern. Also, at these times of the day there is
little demand for other TV-programs so few requests are
needed to get into the top ranking.
5.
IMPACT ON CACHING
In previous sections we have seen many aspects of the
access patterns in a TV-on-Demand system. In this section
we study the impact on caching. We examine the proportion
of requests that are not ﬁrst-time requests for a program and
therefore potentially could be served from a cache. We look
at this for diﬀerent population sizes and time periods.
We then use trace-driven simulation to investigate the
cache friendliness of the workload with a limited cache size
and the classic LRU and LFU cache replacement policies.
We run the sequence of requests in our data set through
caches of diﬀerent size and look at the resulting cache hit
ratios.
5.1 Cacheability
For on-demand caching, the ﬁrst request for a program
needs to go to the central server. But if we imagine an
unlimited cache size then all other requests could potentially
be served from the local cache. It is therefore interesting to
examine the proportion of requests that are not ﬁrst-time
requests. We here call that cacheability.
205s
t
s
e
u
q
e
r
#
800
700
600
500
400
300
200
100
0
Requests per day and rank for a home improvement TV show, 30/6−13/9
Renewed interest
every Thursday
when the next
episode is shown.
1
200
400
600
800
1000
k
n
a
R
1200
1400
1600
1800
5
12
19
26
40
33
Time (days)
47
54
61
68
2000
75
Figure 13: Requests per day and ranking for an episode of
a weekly home improvement TV show. The grid points out
weeks starting on Mondays.
Requests and rank per day for a cartoon, 27/5−26/6
700
600
500
s
t
s
e
u
q
e
r
#
400
300
200
100
0
4
11
18
25
Time (days)
1
200
400
600
800
1000
k
n
a
R
1200
1400
1600
1800
2000
Figure 14: Requests per day and ranking for a cartoon.
Ranking per hour for a cartoon, 27/5−2/6
1
20
40
60
80
100
120
140
160
180
200
k
n
a
R
Wed
Thu
Fri
Sat
Sun
Mon
Tue
Time (hours)
Figure 15: Ranking per hour for a cartoon. The grid points
out the hours between 11:00-12:00 and 23:00-00:00 each day.
The program jumps up and down in popularity. It always
climbs to top 40 in the mornings and are often in top 100 in
the early evenings.
We follow the deﬁnition of cacheability used by Ager et
al. [2]. But our data set do not include information about
program size so here we only consider requests. Cacheability
is then the share of requests that are not ﬁrst-time requests.
If ki is the total number of requests for a program k then
the cacheability is Pn
i=1(ki), where n is the
number of programs.
i=1(ki − 1)/ Pn
The share of ﬁrst time requests is very low in the TV-on-
Demand system if we consider all clients over a long period
of time. The cacheability over 125 days is: 99.13%.
In Figure 16 we also look at the cacheability per day and
per hour and for populations of diﬀerent size. The calcula-
tion of cacheability starts from the beginning of each time
interval.
It is not considering what have been requested
the hour or day before. For all clients in the region during
the week in Figure 16, the median cacheability per hour is
59%. However, there are large daily variations. During night
many programs are requested only once and the cacheability
is low. During Friday and Saturday evenings the cacheabil-
ity is above 80%.
Figure 17 shows examples of cacheability over 125 days for
smaller populations. For very small populations the proba-
bility that a viewer will choose a program that nobody else
in the group has requested before is high. So the share of
ﬁrst-time requests is high and the cacheability is low. But we
see that already for groups of 1000 viewers the cacheability
is above 60%. We calculated the cacheability for ﬁve diﬀer-
ent groups of 1000 viewers. The median was 63.9% and the
group with lowest result had a cacheability of 61.7%.
5.2 Limited cache size
We saw in the previous section that the cacheabilty in the
TV-on-Demand system is very high. But in practice there
is a limited cache size.
In order to investigate the cache
friendliness of the TV-on-Demand workload we use trace-
driven simulation. We run the sequence of requests in the
data set through caches of diﬀerent size and study the cache
hit ratios for three classic caching policies:
Least Recently Used (LRU): with the LRU strategy
we delete from the cache the program that has not been
requested for the longest time.
Least Frequently Used (LFU): with LFU we discard
the program that is requested least often. This is done by
keeping track of the hit ratio for all programs currently in
the cache (in cache LFU).
Clairvoyant: we also implement a clairvoyant strategy
with the ability to look into the future and delete the pro-
gram that will not be needed for the longest time. This is
used for comparison to obtain an upper limit on the cache
hit ratio.
It is implemented by going through the traces
twice. First, for each request of a program we look up and
determine when the program will be requested next. This
is then used in the simulation to determine what program
should stay in the cache.
Figure 18 shows cache hit ratios for the LRU, LFU and
Clairvoyant replacement policies for increasing cache sizes.
The hit ratios are calculated over 3 days. The size of the
programs are not taken into account. We calculate request
(or program) hit rate and not the byte hit rate. The x-
axis shows cache size in number of programs. The median
number of distinct programs requested per day is 7523. To
put the hit ratio and cache size in relation to the daily de-
mand we therefore look speciﬁcally at cache sizes of 376
206Cacheability per day, 12/5−13/9
Cacheability per hour, 19/5−25/5
Region (population: 307347)
Town (population: 23304)
rand 10000
rand 1000
5
12 19 26 33 40 47 54 61 68 75 82 89 96 103 110 117 124
Time (days)
y
t
i
l
i
b
a
e
h
c
a
C
1
0.8
0.6
0.4
0.2
0
Region (population: 307347)
Town (population: 23304)
Thu
Fri
Sat
Sun
Mon
Tue
Wed