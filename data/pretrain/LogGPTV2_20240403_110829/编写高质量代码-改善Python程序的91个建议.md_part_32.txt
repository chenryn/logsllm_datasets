B=None
print"Garbage collectorbefore running:collected &d objects."%(collected)
collected =gc.collect()
B.a
None
Leak()
=B
第6章内部机制195
---
## Page 209
196
gc.html。
序员进行修复。更多gc 模块的使用方法读者可以参考文档：http://docs.python.org/2/library/
露，gc并不释放内存，而是输出更为详细的诊断信息为发现内存泄露提供便利，从而方便程
环被打破时，gc 在回收对象的时候便会再次自动调用_del_O方法。读者可以自行试验。
垃圾回收器不能确定对象析构的顺序，所以为了安全起见仍然保持这些对象不被销毁。而当
gc.garbagO输出如下：
是对象A、B的内存地址，也就是说这两个对象在内存中仍然以“垃圾”的形式存在。
式和内存回收的情况是否有所不同。示例代码如下：
象A、B，以及其实例属性dict)。
存中此时不存在垃圾对象。gc.collectO显示所有收集和销毁的对象的数目，此处为4（2个对
我们再来考虑一个问题：如果我们在类Leak中添加析构方法_del_O，对象的销毁形
这是什么原因造成的呢？实际上当存在循环引用并且当这个环中存在多个析构方法时，
gc.garbage返回的是由于循环引用而产生的不可达的垃圾对象的列表，输出为空表示内
[,]
当加入了析构方法_del_O在运行程序的时候会发现gc.garbage的输出不再为空，而
Garbage collector after running:collected 4objects.
Garbage collector before running:collected 0objects.
运行程序输出结果如下：
def_del_(self):
sys.exit(ret)
=="_main_"：
---
## Page 210
包等。
下载、安装PyPI上的包。对于包的作者，在PyPI上注册账号后，还可以登记、更新、上传
（统称为包）提交到上面。既然名字中带有“索引”一词，顾名思义，可以通过包的名字查找、
言的软件仓库，类似Perl的CPAN或Ruby的Gems，目前已经有将近35000个软件和库
建议70：从PyPI安装包
掌握它们能够让读者在将来的项目开发中达到事半功倍的效果。
setuptools、pip、paster、nose和Flask-PyPI-Proxy等，这些工具涵盖了项目开发中的几大节点，
辅助开发有利于减少流程损耗，提升生产力。本章将介绍几个常用的、先进的工具，比如
包的安装、管理、测试和发布等多个节点构成，所以这是一个复杂的过程，使用工具进行
PyPI全称Python PackageIndex，直译过来就是“Python 包索引l"，它是Python编程语
Python项目的开发过程，其实就是一个或多个包的开发过程，而这个开发过程又由
像列出在PyPI Mirrors 页面上，而各个镜像的同步情况可以在专门的网站上看到。因
easy_install/pip的--index参数）。
为访问外国网站普遍比较慢，为了方便众多的Python程序员，豆瓣网架设了一个镜
使用工具辅助项目开发
第7章
---
## Page 211
198
行以下命令将其更新到最新版本：
Windows，则需要去它的主页（https://pypi.python.org/pypi/setuptools）下载，然后手动安装。
给大家。在UbuntuLinux上，可以使用apt安装这个包。
化。爱好偷懒的Pythonista自然编写好了工具供大家使用，其中 setuptols尤其值得优先推荐
人下载目录，执行tar解压缩。
上半部分是requests 的简要文档，往下拉可以看到它的下载链接，单击后下载保存，然后进
PyPI，在右上角输人reuqests然后单击搜索按钮，如图7-1所示。
一试这个号称“更适合给人用”的HTTP客户端库，那么可以打开你的浏览器，并导航到
操作系统对应的软件仓库中的 setuptools 版本通常比较低，所以安装完成以后，最好执
其他操作系统大同小异，运行其相应的包管理软件就可安装。但如果你使用MS
sudo aptitude install python-setuptools
注意
显然，手动安装包实在是太麻烦了，查找、下载、解压、安装整个流程完全可以自动
然后进人requests-1.2.3目录安装。
:~# tar zxvf requests-1.2.3.tar.gz
接下来浏览器将会显示搜索结果列表，从中找到名为requests的项目，打开以后页面的
某日，你在邮件列表里看到有人推荐requests，
:~/requests-1.2.3#python setup.py install
:~#cd requests-1.2.3
URL。
式，所以在知道包名的情况下，熟手一般并不使用搜索功能，而是直接手动输入
因为包在PyPI上的主页的URL都是https://pypi.python.org/pypi/{package}的形
python
PyPI-thePythonPackageIndex
Package Index
图7-1PyPI首页
please
写得非常煽情，让你相当有兴趣想要试
seOg
search
---
## Page 212
包)，也缺乏对 git、hg 等版本控制系统的原生支持，所以致力于做easy_install改进版的 pip
建议 71：使用 pip 和 yolk 安装、
慧
最新版本的包，然后进行下载、安装，比手动安装要简单、方便得多。
载Python包，因为它可以自动处理包的依赖关系，所以深受大家的喜爱。
企业级应用工具包的项目），由一组发布工具组成，方便程序员下载、构建、安装、升级和卸
setuptools 有几个缺点，比如功能缺失（不能查看已经安装的包、不能删除已经安装的
setuptools 是来自 PEAK（Python Enterprise Application Kit，
Finished processing dependencies for requests
Installed /usr/local/lib/python2.6/dist-packages/requests-1.2.3-py2.6.egg
Writing/tmp/easy_install-vwjYkv/requests-1.2.3/setup.cfg
#easy_install requests
安装 setuptools 之后，就可以运行easy_install 命令了。
easy_install -U setuptools
Processing dependencies for requests
Adding requests 1.2.3 to easy-install.pthfile
Processing requests-1.2.3.tar.gz
https://pypi.python.org/packages/source/r/requests/requests-
Downloading
Best match:requests 1.2.3
Reading https://pypi.python.org/simple/requests/
Searching for requests
这些功能将在后续的几节中讲述。
setuptools的功能非常丰富，包括对Python包的构建、测试、发布等都支持得很好，
distribute合并到 setuptools，
行easy_install-U setuptools 更新的时候，安装的其实是distibute。但是，在 2013年年初，
重新创建了一个分支项目，称为distribute，受到了大家的喜爱。在很长一段时间里，运
因为PEAK最近几年发展停滞，累及setuptools也有好几年没有更新。所以有些程序员
/tmp/easy_instal1-vwjYKV/requests-1.2.3/egg-dist-tmp-MeMFx1
1.2.3.tar.gz#md5=adbd3f18445f7fe5e77f65c502e264fb
布大版本，至2013年9月，最新的版本已经是1.1.5版，而distribute项目也就不再维护了
，回归主分支，并发布了 setuptools 0.7版本。随后几个月频繁发
、管理包
一个致力于提供Python开发
第7章使用工具辅助项目开发199
---
## Page 213
200
看uninstall命令。
装的包，对感兴趣的包可以使用 show命令查看它的具体情况。下面我们重点了解一下这4
个命令。
子命令的帮助信息。Install、uninstall就是用得最多的安装与卸载功能，list可以列出已经安
在最近几年大受欢迎，成为了最流行的 Python包管理工具。
Uninstalling requests:
#pip uninstall requests
可以看到pip 的 install命令使用起来跟 easy_install类似，但输出要简洁得多。然后再看
Proceed (y/n)？y
Cleaning up...
从子命令可以对pip 的功能有个大体的了解，也可以使用pip help命令查看
Successfully installed requests
Installing collected packages:requests
Downloading/unpacking requests
#pip install requests
General Options:
pip 使用子命令形式的 CLI 接口，首先要学习的当然是help。
在安装了setuptools以后，安装pip就非常简单了。
Running setup.py install for requests
Commands
#pip help
easy_install pip
/usr/local/lib/python2.6/dist-packages/requests-1.2.3-py2.6.egg
Running setup.py egg_info for package requests
Usage:
pip [options]
Downloading requests-1.2.3.tar.gz (348kB):348kB downloaded
help
bundle
unzip
zip
wheel
show
list
freeze
uninstall
install
search
Show help for commands.
Unzip individual packages.
Build wheels from your requirements.
Search PyPIfor packages.
Show information about installed packages.
List installed packages.
Output installedpackages
Uninstall packages.
Install packages.
in requirements format.
---
## Page 214
缺页
---
## Page 215
202
使用。比如在一个简单的计算项目中，我们可以这样使用刚编好的库：
建议72：做 paster 创建包
有更多的功能可通过阅读它的手册逐步发掘。
器，并将你指定的包显示在PyPI上的主页，从此告别手动拼接URL的历史。当然，yolk还
安装了的包有了更深刻的理解？
人口点名字分别是read_and_display.admin和caihui.bs.admin。怎么样，是不是对自己机器上
nosetests 命令并实现了distutils.commands插件（即python setup.py nosetests扩展命令）。那
提供了哪些命令行工具，或者支持哪些基于entry-point 的插件系统。上例中，nose 提供了
所有包和可以更新的包，在此就不再介绍了。下面介绍的是pip 还不具备的功能。
最后，如果你使用的是桌面版的操作系统，利用yolk-H可以打开一个浏览
可以把代码保存到一个名为arithmetic.py的文件中，然后复制到需要的文件目录中以备
如果有一个小程序，或者很简单一个库，举个例子，假定编写了一个四则运算的库。
yolk--ntry-map可以显示包注册的所有人口点，这样可以了解到安装的包都
def add(x,y):
可以看到，支持abu.admin插件协议的包有两个：read_and_distplay和caihui.bs，它们的
def
def
def
caihui.bs.admin
read_and_display.admin
#yolk
#yolk--entry-mapnose
'distutils.commands':('nosetests':EntryPoint.parse('nosetests = nose.
caihui.bs =caihui.bs.admin:Admin
read_and_display= read_and_display.admin:Admin
subtract（x,y):
return x-y
return x*y
multiply(x，y):
return x/y
division（x，y）:
commands:nosetests')}}
run_exit'),
--entry-pointsabu.admin
'nosetests-2.6':EntryPoint.parse('nosetests-2.6=
nose:run_exit')},
---
## Page 216
一个序列类型，里面包含需要安装的 Python 文件，在本例中即为 arithmetic.py。
是通过命名参数指定的。name 参数指定的是包名；version指定版本；而py_modules参数是
arithmetic.py 同层目录，建立一个 setup.py文件。
distutils.key_words 等人口点，为 setuptools 和pip 等提供了基础设施。
pip 或 yolk这样的工具集成。Python 作为“自带电池”的高级语言，自然提供了这方面的支
持，那就是distutils标准库。distutils 标准库至少提供了以下几方面内容：
样，
有几个问题：
要使用distutils，按习惯需要编写一个 setup.py文件，作为后续操作的入口点。在
编写好 setup.py 文件以后，就可以使用 python setup.py install 把它安装到系统中了。
，可以方便地下载、安装、升级、卸载，也就是说能够放到PyPI上面，也能够很好地跟
一眼就可以看出，setup.py文件的意义是执行时调用distutils.core.setupO函数，而实参
3）定义了扩展指令的协议，包括distutils.cmd.Command基类、distutils.commands和
2）保证版本同步。arithmetic.py不带有任何版本信息，不利于团队成员自检版本。
1）程序的发布。如果版本更新了，如何快速地发布给团队中的所有人。
如果只是个人项目，或者很小的团队协作，这种做法问题不大。但如果团队比较大，就
creating build
running build
#python setup.py install
setup(name='arithmetic',
from distutils.core import setup
#tree
2）支持PyPI的登记、上传。
running install
1）支持包的构建、安装、发布（打包)。
显然，这个四则运算程序库最好是像之前讨论过的requests 之类的优秀的第三方库一
print arithmetic.multiply(12,6)
它的内容如下：
print arithmetic.division(2,
print arithmetic.subtract(10,5)
print arithmetic.add(5,8)
import arithmetic
setup.py
arithmetic.py
py_modules=['arithmetic'],
version='1.0',
7）
第7章使用工具辅助项目开发203
---
## Page 217
204
distutils还带有其他命令，可以通过python setup.py--help-commands 进行查询。
usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
可以看到它的确跟其他的Python一样被安排到了系统当中。除了install命令以外，
Standard commands:
python setup.py --help-commands
arithmetic
#yolk -l1grep arithmetic
完全符合预期啊！接下来再用yolk查看一下。
>>>arithmetic.add(1,2)
安装成功后，我们来试一下。
Writing/usr/local/lib/python2.6/dist-packages/arithmetic-1.0.egg-info
copying bui1d/1ib.1inux-x86_64-2.6/arithmetic.py->/usr/1ocal/1ib/python2.6/
creating build/1ib.1inux-x86_64-2.6
#python
running install_egg_info
upload
bdist_wininst
bdist_rpm
bdist_dumb
bdist
install_data
build_scripts
build_py
build
register
sdist
install_scripts