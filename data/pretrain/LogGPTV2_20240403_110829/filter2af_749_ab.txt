     ------
我们可以通过`jtool - JCOLOR=1 jtool -v -d objc teamblind.decrypted`的 objc 选项转储类与方法。
用jtool提取类信息
还需要说明一点，虽然本文使用IDA，读者完全可以根据自身反汇编需要使用jtool，例如研究某个特殊类时输入`jtool -d
UserControl:getSecretUserDefaultString: teamblind.decrypted`。
拆分类信息
#### 破解加密值
现在，我们已经成功拦截流量，但如何破解加密流量成为难题。不妨先找出加密实现方法。如上文所述，Blind允许通过工作邮件或LinkedIn账户登录。登录后将看到创建账户选项：
登录界面
应用设置可在`com.teamblind.blind.plist`中查找，具体位置在
`/private/var/mobile/Containers/Data/Application//Library/Preferences/com.tea
mblind.blind.plist`。此时，检查文件就会发现其中包含明文电子邮件以及登录时填写的公司信息。可以使用plutil实用程序读取文件。
plist代码段
一旦输入密码、用户名，点击“开始”后就是另一番景象了。
现在，你的电子邮件不再以明文存储而是经过加密，新增了密码与其他几个值。牢记千万不要在plist文件中存储密码等敏感信息。敏锐的读者可能会注意到我并没有隐藏`password_enc`值。秘钥名称以`_enc`结尾表示该值可能被加密，但事实是否果真如此？另外，应注意该值是加密过程必不可少的一部分，具体原因将在后文介绍。接下来，我们将继续探索关于这个值的更多细节。
“加密”密码仅是一个md5哈希值，可以在AuthCompleteViewController的requestPassword中看到。
创建密码哈希值
在 0x000000010004EB50 位置得到用户提供值后计算 0x000000010004EB8C 位置的md5
哈希值。为了证实这一点，我们在与上文plist取值相同处使用Python。现在，我的超级密码一目了然。
     >>> import hashlib  
     >>> m = hashlib.md5()  
     >>> m.update("password#1")  
     >>> print m.hexdigest()  
     5486b4af453c7830dcea12f347137b07  
     >>> 
#### 识别ViewControllers
为了确定需要检查的类，我首先来到账户创建页面，用cycript 确定ViewController外观：
     root@Jekyl (/var/root)# ps aux | grep blind  
     mobile  4136  0.1 5.8  815696 59532  ?? Ss  4:10PM  0:06.85 /var/containers/Bundle/Application/3C411AB3-6018-4604-97D2-DC2A546EAB85/teamblind.app/teamblind  
     root   4139  0.0 0.0  657104  212 s000 R+  4:11PM  0:00.01 grep blind  
     root@Jekyl (/var/root)# cycript -p 4136  
     cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()  
     ", state: appeared, view: \n  | , state: disappeared, view:  not in the window\n  | , state: appeared, view: "  
     cy#  
别忘了你的电子邮件经过加密处理。加密惯例也在requestPassword 方法中呈现。你的电子邮件首先通过 plist(NSUserDefaults)
找回，然后传输至NSString ([NSString encryptHES256:]) encryptHES256 方法。
读取用户电子邮件
encryptHES256方法在过渡至AES256EncryptWithKey方法（涵盖加密过程）前生成带有密码简单异或的加密秘钥和一些“随机”值。从技术角度看，此方法调用另一个功能，但整体情况已趋向明朗，不难发现“随机性”。
#### Frida
稍微借助[Frida](https://www.frida.re/ "Frida")就可以看到实际效果。对于还不了解
Frida的读者，我强烈建议您将这款工具添加至兵器库并在使用go脚本前检查[Frida
CodeShare](https://codeshare.frida.re/ "Frida
CodeShare")。当然，代码运行前的例行检查无论何时都是必要步骤。
通过Frida与CodeShare ObjC method observer脚本，我们能够观察到AES256EncryptWithKey方法起到的作用：
     macho-reverser:BLIND macho-reverser$ frida -U --codeshare mrmacete/objc-method-observer -f com.teamblind.blind  
        ____  
       / _ |  Frida 10.6.15 - A world-class dynamic instrumentation framework  
       | (_| |  
       > _ |  Commands:  
       /_/ |_|    help   -> Displays the help system  
       . . . .    object?  -> Display information about 'object'  
       . . . .    exit/quit -> Exit  
       . . . .  
       . . . .  More info at http://www.frida.re/docs/home/  
     Spawned `com.teamblind.blind`. Use %resume to let the main thread start executing!  
     [iPhone::com.teamblind.blind]-> %resume  
     [iPhone::com.teamblind.blind]-> observeSomething('*[* *AES256EncryptWithKey:*]');  
     (0x125fcdca0) -[NSData AES256EncryptWithKey:]  
     AES256EncryptWithKey: password#1^0123456789abcdefghijk  
     0x1001b25cc teamblind!0x11e5cc  
     0x1000e2c7c teamblind!0x4ec7c  
     ---- 
现在，密码与电子邮件加密方式已知。基本说来，重复以上步骤就能找到其他加密值。接下来，了解实际流量。
如上文所述，设备出口流量监控结果显示，所有请求均包括一个载荷。在IDA中搜索字符串后发现多数请求参数在[NetworkControl
encRequestWithParams:showAlert:completionBlock:failBlock:] 方法中设置。
#### encRequestWithParams
此方法首先尝试找回之前生成的加密秘钥与初始化向量（IV），如果失败则调用 EncriptControl 类 `makeKeyAndIvForEnc
(-[EncriptControl makeKeyAndIvForEnc])` 方法。没错，是带有IV的Encript。 或许可称之为隐匿式安全……:)
#### makeKeyAndIvForEnc
这种做法的有趣之处在于加密秘钥通过用户密码与硬编码值组合生成。还记得之前提到的加密密码（password_enc）吗？该方法首先尝试将其找回：
根据硬编码值生成另一个md5哈希值：
生成静态值
如果涉及用户密码找回问题，则再生成一个哈希值：
最后，秘钥设置完毕，以 hash1+hash2 或 hash1+password_enc 组合结尾。
生成实际秘钥
在此例中，加密秘钥应为 md5("QkdEhdk") + md5(“password#1")，并由此得到“c07bcdc2 3522ed81
fb76db0c 0c4387cf 5486b4af 453c7830 dcea12f3 47137b07”。
该方法的其余部分用于设置初始向量（IV）：
生成 IV
#### 冲破黑暗
NetworkControl 类 encRequestWithParams 方法通过调用EncriptControl
类makeKeyAndIvForEnc设置加密。设置完毕后使用encRequestWithParams 方法调用 EncriptControl
类makePayloadDataWithJsonString。该方法使用之前提及的加密秘钥与IV调用CocoaSecurity
aesEncryp，结果返回base64 编码密文，也就是Burp呈现的内容。
加密载荷
暂时返回 jtool -d objc dump，注意 EncriptControl 类实例变量：
Encript实例变量
收集到所有线索后编写Frida脚本，获得实例变量，即加密秘钥、明文数据与相应密文：
    if(ObjC.available){  
       var makeKandIv = ObjC.classes.EncriptControl["- makePayloadDataWithJsonString:"];  
         Interceptor.attach(makeKandIv.implementation, {  
          onEnter: function(args) {  
            /* Get Class/Params */  
            var obj = ObjC.Object(args[0]);  
            var params = ObjC.Object(args[2]);  
            /* Get ivars */  
            var ivar = obj.$ivars;  
            // Print ivars values   
            console.log("-----------------------------------------------------------\n");  
            console.log("_encKey: " + ivar["_encKey"] + "\n");  
            console.log("_encIv: " + ivar["_encIv"] + "\n");  
            console.log("_encIvStr: " + ivar["_encIvStr"] + "\n");   
            console.log("_encKeyForDM: " + ivar["_encKeyForDM"] + "\n");   
            console.log("_encKeyForDM: " + ivar["_encIvForDM"] + "\n");   
            console.log("-----------------------------------------------------------\n");   
            console.log("PARAMS: " + params);  
           },  
          onLeave: function onLeave(retval) {  
             console.log("Encrypted Payload: " + new ObjC.Object(retval).toString() + "\n");  
          }  
       });  
     }  
一次加密的burp流量
现在变成：
具有加密秘钥的明文数据
此外，连接EncriptControl 类convertDictionaryEncWithResultStr:
方法后打印出服务器响应明文。这时需要考虑将[Brida](https://github.com/federicodotta/Brida "Brida")
Burpsuite 插件用于其他选项。
#### 结语
Ok，今天就到此为止。如前文所述，我没有注册Blind
账户，因此无法使用会员功能。但这些都无妨，我只对Burp上的一些数据感兴趣。考虑到应用程序性质与要求，我打算探索更多内容。因此，并无恶意流量发送至Blind服务器。
Happy hacking!!!
本文可用于围绕Blind应用开展进一步调研。对于提供信息的采用，本博客不承担任何责任。
* * *