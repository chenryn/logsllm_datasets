be simulated in AIF by a persistent fact f(cid:48)(t1, . . . , tn, F ID),
where F ID is a fresh identiﬁer created when introducing the
fact, and using a distinguished set valid that contains F ID
in exactly those states where f (t1, . . . , tn) holds.
Our construction to make set membership the only “revo-
cable” entity while facts monotonously grow over transitions
gives a distinction that becomes valuable in the abstraction
later. To see that, consider that the AIF transition rules (or
the AVISPA IF transition rules) are not monotonic (i.e. a
rule that is applicable to a state S is not necessarily appli-
cable to any superset of S). In contrast, the Horn-clauses of
the abstract model are interpreted in standard–monotone–
ﬁrst-order logic. Our construction thus ensures that all the
non-monotonic aspects, the set memberships, are part of the
abstraction.
We close this discussion with the remark that all previous
abstraction approaches in protocol veriﬁcation like [7, 11,
10, 21] are entirely based on persistent facts. This (usu-
ally) means an over-approximation that leads to the fol-
lowing phenomenon [16]: every participant can react to a
given message any number of times, even if the real system
prevents that with challenge-response or timestamps. As
can be seen by the success of the abstraction methods, this
over-approximation usually works ﬁne (if one does not con-
sider replay which requires special care [8]). So in general,
for what concerns this new abstraction approach where we
have the choice to make things revocable, one may start
with a model where all facts are persistent and perform
the above encoding of non-persistent facts only when nec-
essary, i.e. when one obtains false attacks caused by the
over-approximation.
2.3 Syntactic Sugar
For readability and brevity of speciﬁcations, the AIF lan-
guage supports a number of constructs to avoid ﬁnite enu-
merations. One can declare a number of variables that range
over a given set of constants, e.g.:
A, B : {a, b, s, i};
Honest
Status
: {a, b};
: {valid , revoked};
353We call variables that have been declared in this way enu-
meration variables. An AIF speciﬁcation includes the enu-
meration of all sets or databases that occur in the speciﬁ-
cation. Here, the enumeration variables can be used. For
example:
Sets : ring(Honest), db(s, A, Status);
deﬁnes that every honest agent Honest has its own keyring
ring(Honest), which may be for instance a set of public keys,
and the server s has a database for each agent A and each
Status, each of which may again be a set of public-keys.
Thus, this example speciﬁcation uses N = 10 sets.
One can further use the enumeration variables as abbre-
viations in rules. First, we may use universal quantiﬁcation
of enumeration variables in negative set conditions, e.g.
∀A, Status.PK /∈ db(s, A, Status)
to mean that PK cannot occur in any of the sets covered
by expanding all values of the enumeration variables, so this
example expands to 8 negative set conditions.
Second, we can parametrize an entire rule over enumera-
tion variables. We may write for instance λA. ⇒ iknows(A)
to denote that the intruder knows every agent name. We
write λ to avoid confusion with quantiﬁcation: in fact, the
meaning of λX.r is the set of rules {r[X (cid:55)→ v] | v ∈ V }
where V is the enumeration declared for X.
With this syntactic sugar, it is easy to generalize our ex-
ample speciﬁcation for any number of honest and dishonest
users and servers, namely by replacing the constants by enu-
meration variables and enumerating the desired set of agents
there [17]. The “unrolling” of this sugar is not always eﬃ-
cient and we plan as future work to investigate strategies for
avoiding that in the translation.
2.4
Inconsistent Rules
We exclude rules that are “inconsistent” in a certain sense
(although their semantics is well-deﬁned):
Deﬁnition 4. A rule r = LF · S+ · S− =[F ]⇒ RF · RS is
called inconsistent, if any of the following holds:
• t ∈ M occurs in S+ and t /∈ M occurs in S−, or
• s ∈ M occurs in S+\RF and t ∈ M occurs in RF , and
the rule allows for an instantiation σ with sσ = tσ.
For the rest of this paper, we consider only consistent rules.
The ﬁrst kind of inconsistent rule is simply never applicable.
For the second kind, we get the contradiction only under a
particular instantiation, namely when sσ = tσ, because the
rule says that the constraint sσ ∈ M should be removed and
tσ ∈ M should be added or kept. (The semantics tells us
that here the positive constraint to keep tσ ∈ M wins.)
Note that all rules of our running example are consistent;
for instance in the second rule, the instantiation P Kσ =
N P Kσ is not possible because N P K is fresh, and in the
third rule such a substitution is also ruled out by the left-
hand side constraints P K ∈ db(s, a, valid) and N P K /∈
db(s, a, valid). In fact, the notion that a rule allows for the
instantiation sσ = tσ is purely syntactical (i.e. independent
of the actually reachable states).
There are two reasons to exclude inconsistent rules. First,
they often result from a speciﬁcation mistake, i.e. they do
not reﬂect what the user actually wanted to model. Sec-
ond, the soundness proof of our abstractions below is more
complex when allowing the second kind of inconsistent rules.
3. SET-BASED ABSTRACTION
The core idea of set-based abstraction is the following: we
abstract the fresh data according to its membership in the
used sets. For instance, if we have three sets s1, s2, and s3,
we may abstract all elements that are contained in s1 but not
in s2 and s3 into one equivalence class denoted val(1, 0, 0).
In our running example, we have the sets s1 = ring(a),
s2 = db(s, a, valid ), and s3 = db(s, a, revoked). Thus let
val(1, 0, 0) represent the class of all public keys that the
user a has created but that are not (yet) registered with the
server s as valid or revoked. The abstract model thus does
not distinguish between several diﬀerent keys that have the
same status in terms of set-membership.
The standard way to express the abstract model by Horn
clauses in previous approaches does not work with this ab-
straction. In particular, when the set membership of a con-
stant changes from the abstract value a to the abstract value
a(cid:48), then for every derivable fact f [a] that contains a also f [a(cid:48)]
is derivable. This requires an extension with a new kind of
rule that can exactly express f [a] =⇒ f [a(cid:48)] for every con-
text f [·] and which we formalize below. Note that this kind
of rule is diﬀerent from an algebraic equation like a ≈ a(cid:48),
because f [a(cid:48)] does not necessarily imply f [a]; moreover, it
is diﬀerent from a rewrite rule, because f [a] is not replaced
by f [a(cid:48)] but both f [a] and f [a(cid:48)] hold.
3.1 Deﬁnition of the Abstraction
Deﬁnition 5. Consider a set of rules that uses the ground
terms s1, . . . , sN in set conditions t ∈ si and t /∈ si (including
the choice of a total order on the si). For a state S, we deﬁne
the function absS that maps from A to val(Bn) as follows:
absS(c) = val(b1, . . . , bN ) with bi true iﬀ (c ∈ si) ∈ S. This
induces an equivalence relation (parametrized by a state S)
on A: deﬁne c ≡S c(cid:48) iﬀ absS(c) = absS(c(cid:48)).
It is indeed unusual that an abstract interpretation depends
on states and can change from state to state. This reﬂects
exactly why the databases we want to model do not ex-
actly ﬁt into the standard abstraction approach of protocol
veriﬁcation: the abstract model does not have a notion of
states any more. We will see below (in section 4) how to
overcome this problem and deﬁne a state-independent ab-
straction function.
3.2 Term Implication Rules
We now introduce the form of rule that allows us to deal
with abstractions with the changing set-membership of con-
stants.
Deﬁnition 6. A term implication rule has the form
P1
. . . Pn
s →→ t
(cid:83)n
where the Pi are predicates (i.e. facts) and vars(t)∪vars(s) ⊆
i=1 vars(Pi). An implication rule is either a term implica-
tion rule or a Horn clause. We often write A → C instead of
. We may also write A → C1 · . . . · Cn as an abbreviation
A
C
for the set of rules { A → Ci | 1 ≤ i ≤ n}.
354(cid:20)(cid:20)φ1
(cid:20)(cid:20)φ1
(cid:21)(cid:21)
(cid:21)(cid:21)
For implication rules, we deﬁne a function that, given a
set Γ of facts, yields all facts that can be derived from Γ by
one rule application:
. . . φn
φ
(Γ) = {φσ | φ1σ ∈ Γ ∧ . . . ∧ φnσ ∈ Γ}
. . . φn
s →→ t
(Γ) = {C[tσ] | C[sσ] ∈ Γ ∧ φ1σ ∈ Γ
∧ . . . ∧ φnσ ∈ Γ }
Here, C[·] is a context, i.e. a “term with a hole”, and C[t]
means ﬁlling the hole with term t. The least ﬁxed-point of
a set of implication rules R, denoted LF P (R) is deﬁned as
the least set Γ that is closed under [[r]] for each r ∈ R.
3.3 Translation to Abstract Rules
We now translate the standard transition rules (that work
on the real sets) to implication rules of an abstract model
(that work on the abstract encoding of set membership). We
show in section 4 that this abstraction is sound.
Deﬁnition 7. Consider a transition rule
r = LF · S+ · S− =[F ]⇒ RF · RS
Li(t) =
Let TA(r) be the symbols from TA that occur in r. We deﬁne
for each t ∈ TA(r) and for each 1 ≤ i ≤ N :
if t ∈ si occurs in S+
if t /∈ si occurs in S−
otherwise
if t ∈ si occurs in RS
otherwise, if Li(t) = Xt,i and t /∈ F
otherwise
1
1
Ri(t) =
0
Xt,i
Xt,i
0
Here, let Xt,i :: B be variables that do not occur in r. Let
L(t) = val(L1(t), . . . , LN (t))
R(t) = val(R1(t), . . . , RN (t)) .
The abstraction r of the rule r is deﬁned as:
r = LF λ → RF ρ · C
for the following substitutions λ and ρ and term implications
C:
• λ = [t (cid:55)→ L(t) | t ∈ TA(r)]
• ρ = [t (cid:55)→ R(t) | t ∈ TA(r)]
• C = {tλ →→ tρ | t ∈ TA(r) \ F}
3.4 The Example
Figure 1 shows the translation of our running example.
Thanks to the abstraction, it is straightforward to convince
oneself that attack is unreachable, as this requires the fact
iknows(inv(val(X1, 1, X2))) (i.e. a valid key) whereas the
only rule that gives the intruder a private key has the in-
compatible set membership (X1, 0, 1) (i.e. a revoked key)
and there is no term implication rule that could turn a re-
voked key into a valid one. Let
SK = {val(0, 0, 0), val(0, 1, 0), val(0, 0, 1)}
K = SK ∪ {val(1, 0, 0), val(1, 1, 0)}
K is the set of all public keys that occur in some fact.
(The other three bearable keys val(0, 1, 1) and val(1, 1, 1)
Figure 2: The key life-cycle as formalized by the
term implications.
and val(1, 0, 1) do never occur.) The subset SK contains
those keys that can ever occur as the signing key in a signa-
ture.
The ﬁxed-point is Γ = {iknows(m) | m ∈ M} where
M = DY(K ∪ {signinv(sk)(a, new, k) | sk ∈ SK, k ∈ K}
∪{inv(val(0, 0, 1))})
and DY(·) denotes the closure under protocol-independent
intruder deduction rules (like encryption).
In particular,
only the private keys of revoked, invalid keys get known to
the intruder, and attack is not in Γ.
We note that the concrete term implications s →→ t which
get activated in Γ, displayed in Figure 2, represent exactly
the life-cycle of keys.
4. SOUNDNESS
For veriﬁcation, the crucial property of our abstraction
is that if the concrete model has an attack, then so has
the abstract model.
If this holds, then veriﬁcation of the
abstract model implies veriﬁcation of the concrete model.We
take a detour over some intermediate models which greatly
simpliﬁes the actual proof of correctness.
The labeled concrete model.
The ﬁrst idea is to label all symbols of TA in the concrete
model with the corresponding abstract terms according to
Deﬁnition 5. Being merely an annotation, this does not
change the model.
Deﬁnition 8. The labeled concrete model is deﬁned as the
following modiﬁcation rules of the concrete model: every
t ∈ TA on the LHS (RHS) of a rule is labeled with L(t)
(R(T )) (cf. Deﬁnition 7). We denote the labeling of term t
with label l by t@l. Moreover, for each t ∈ TA that occurs on
both sides, we add the label modiﬁcation t@L(t) (cid:55)→ t@R(t).
This label modiﬁcation is applied as a replacement on the
successor state: let r(cid:48) = r·(t@l (cid:55)→ t@l(cid:48)) the augmentation of
r with the label modiﬁcation. We then deﬁne r(cid:48) transitions
based on r transitions as follows: if S ⇒r S(cid:48) under match σ
then S ⇒r(cid:48) S(cid:48)τ where τ is the replacement of all occurrences
of tσ (for any label) with tσ labeled by l(cid:48).
As an example, the second rule of our running example
looks as follows in the labeled model:
iknows(PK @(1, X1, X2)) · PK @(1, X1, X2) ∈ ring(a)
=[NPK @(1, 0, 0)]⇒
NPK @(1, 0, 0) ∈ ring(a)
iknows(signinv(PK @(0,X1,X2))(new, a, NPK @(1, 0, 0))) ·
P K@(1, X1, X2) (cid:55)→ P K@(0, X1, X2)
Lemma 1. In the labeled model, in every state S, every
occurrence of an abstractable constant c is labeled with l =
(b1, . . . , bN ) such that bi is true iﬀ the set condition c ∈ si
is contained in S.
1,0,00,0,00,1,00,0,11,1,0355=[PK ]⇒
iknows(PK ) · PK ∈ ring(a) · PK ∈ db(s, a, valid )
iknows(PK ) · PK ∈ ring(a)
=[NPK ]⇒
NPK ∈ ring(a) ·
iknows(signinv(PK )(new, a, NPK ))
iknows(signinv(PK )(new, a, NPK )) ·
PK ∈ db(s, a, valid ) · NPK /∈ db(s, a, valid ) · NPK /∈ db(s, a, revoked)
⇒
PK ∈ db(s, a, revoked) ·
NPK ∈ db(s, a, valid ) ·
iknows(inv(PK ))
iknows(inv(PK )) · PK ∈ db(s, a, valid )
⇒
attack
→
iknows(val(1, 1, 0))
iknows(val(1, X1, X2))
→
val(1, X1, X2) →→ val(0, X1, X2) ·
iknows(signinv(val(0,X1,X2))(new, a, val(1, 0, 0)))
iknows(signinv(val(X1,1,X2))(new, a, val(X3, 0, 0)))
→