此外，渲染器和JavaScript引擎等Web浏览器组件的使用进一步扩展到使用Electron和Android
WebView等框架的应用程序。此外，Node.js[56]和Deno[47]使用Google的V8引擎在浏览器上下文之外启用JavaScript（例如，用于实现Web服务器）。因此，浏览器引擎的漏洞和漏洞利用不仅会影响浏览器本身，对更好的防御机制以避免灾难性后果的需求也扩大了。
    Lession 7: 浏览器引擎的同质性造成了严重的问题；需要更好的修补方法。由于浏览器引擎的同质性，一个浏览器引擎中的漏洞会影响其他许多浏览器和应用程序。我们建议领先的浏览器（如Chrome）将其JavaScript引擎作为共享库提供给其他应用程序使用，以便通过无线更新更容易地部署补丁，而不是手动集成补丁。
### C. 漏洞发现工具
人们已经做出许多努力来开发用于发现浏览器引擎错误的最新的工具，这些工具主要可以分为两类：`模糊测试`和`静态分析`。
`模糊测试(Fuzzing)`:
Fuzzing是发现bug的最有效策略之一，自2012年以来一直有被应用于发现浏览器bug。我们在表VI（附录）中总结了过去十年中有关浏览器fuzzer的论文，其中包括他们在Chrome中发现的bug统计信息、Firefox、Safari和Edge（基于ChakraCore和V8），以及它们的关键技术。这些模糊器在两种经典模式之间进行选择：突变模糊测试（mutational
fuzzing，例如，Montage[143]）和生成模糊测试（generational
fuzzing，例如，CodeAlchemist[122]）。一些模糊器，如Lang-Fuzz[125]和DIE[182]，利用了两种模式的混合以及覆盖反馈(coverage
feedback)。构建像DIE[182]和LangFuzz[125]这样的句法和语义感知输入对于产生更多的崩溃很有用。一些关于模糊浏览器的产业性的努力在发现复杂的浏览器漏洞方面非常有效。例如，ClusterFuzz[111]在超过25,000个核心[109]上运行，并在Chrome中发现了超过29,000个漏洞[110]。
`静态分析(Static analysis)`:
最近，在以fuzzing为主导的浏览器漏洞挖掘领域出现了另一项工作。SYS[82]是首个用于在浏览器代码中查找错误的"静态/符号"工具，静态分析可以通过将浏览器的巨大代码库分解成小块来扩展它们。具体来说，SYS使用静态检查器来查找潜在的漏洞位置，然后使用它们的可扩展符号执行(extensible
symbolic execution)来分析这些漏洞位置。因此，SYS在通过静态分析发现浏览器bug领域为未来的工作指明了一个很好的方向。
    Lession 8：自动化漏洞挖掘很棒，但仍需要改进。
    业界最先进的模糊器在捕获浏览器中的漏洞方面做得很好。然而，尽管它们的性能很好，但这些工具仍然无法替代手动审计，而手动审计仍然是发现复杂逻辑漏洞的主要方法。因此，学术界和行业内都需要更先进的漏洞挖掘技术。
### D. 主动应对措施
大多数现有的缓解措施都是被动的，这意味着它们是在发现漏洞后实施的，这还不够好。如果可以在攻击发生之前采取措施（主动方法），那将是理想的，这可以击败未知威胁。例如，站点隔离[186]最初旨在使用进程外iframe缓解UXSS攻击，但它也有助于击败Spectre/Meltdown攻击，这是研究人员在站点隔离项目开始很久后发现的。这是应对未知威胁的主动方法的一个很好的例子。
在应对漏洞利用的游戏中，防御者永远无法击败攻击者，因为防御者的行为对攻击者是透明的。供应商可以通过秘密部署新的应对措施来改变这种情况，例如，在安全浏览基础设施的沙箱中。这还可以通过收集极有可能是恶意的样本来帮助检测在野漏洞并修补错误。此外，供应商可以尝试更积极的应对措施，这些措施可能会影响此类环境中的用户体验。例如，如果在发布公告之前就将StructureID随机化(§III-D)部署在安全浏览沙箱中，则大多数涉及fakeobj原语的JIT漏洞都会被检测到。
## VII. 结论
在本文中，我们呈现了第一个浏览器安全
SoK。我们首先提供了一个统一的模型来研究四大浏览器的安全设计，并提出了一个为期10年的浏览器漏洞纵向研究来研究趋势。然后我们介绍突出的漏洞类型，并提出最先进的应对措施。我们还详细研究了Pwn2Own
2020的真实世界全链漏洞利用。本文阐明了浏览器安全领域，并提出了一些关键要点，可以启发研究人员和浏览器供应商了解未来提高浏览器安全性的方向。
* * *
## 附录
### A. 漏洞挖掘工具
我们在表VI中总结了过去十年中有关浏览器模糊器的论文。
表VI: 浏览器引擎模糊器的比较
Fuzzer | Year | C+E† | FF | S | E‡ | G | M | SM | SN | Cov | OS | 关键技术  
---|---|---|---|---|---|---|---|---|---|---|---|---  
SoFi [124] | 2021 | 1 | 5 | 1 | 18 | × | √ | √ | √ | √ | × |
使用细粒度的程序分析和修复策略来生成语义上有效的输入  
Token-Level Fuzzing [191] | 2021 | 16 | 3 | 4 | 6 | × | √ | × | × | √ | × |
通过更改或替换整个单词在token-level应用突变  
Favocado [91] | 2021 | 8 | NA | 5 | NA | × | √ | √ | √ | × | √ |
根据语义信息生成测试用例，并跟踪状态突变  
DIE [182] | 2020 | 4 | NA | 16 | 28 | √ | √ | √ | √ | √ | √ |
保留有益的特性和条件，被称为aspects across mutation  
FREEDOM [227] | 2020 | 4 | 5 | 13 | NA | √ | √ | √ | √ | √ | √ | 使用定制的IR(FD-IR)来描述HTML文档和定义突变  
Montage [143] | 2020 | 1 | 0 | 2 | 34 | × | √ | √ | √ | × | √ | 将JS
AST转换为序列以训练神经网络语言模型(Neural Network Language Models)  
Nautilus [70] | 2019 | NA | NA | NA | 2 | × | √ | × | √ | √ | √ |
将基于语法的输入生成与覆盖反馈(coverage feedback)相结合  
Deity [145] | 2019 | NA | NA | 1 | 1 | √ | √ | × | √ | √ | √ |
使用以前已知的bug和PoC生成基于语法的JS代码  
Superion [220] | 2019 | NA | NA | 16 | 3 | × | √ | × | √ | √ | √ |
使用基于树和字典的变异对语法感知(grammar-aware)测试输入进行修剪  
CodeAlchemist [122] | 2019 | 2 | NA | 10 | 7 | √ | × | √ | √ | × | √ |
使用约束标记代码块，定义何时与其他代码块组合  
LangFuzz [125] | 2012 | 11 | 20 | NA | NA | √ | √ | √ | √ | × | × |
生成语法感知测试输入，并利用以前已知的错误程序  
    G: Generational 生成(模糊测试样本)
    M: Mutational 变异(模糊测试样本)
    SM: Semantic Aware (语义感知)
    SN: Syntactic Aware (语法/词法感知)
    Cov: Coverage Feedback 代码覆盖率反馈
    OS: Open Source 开源
    C: Chrome
    FF: Firefox
    E†: : 基于V8引擎的Edge
    E‡ : 基于ChakraCore引擎的Edge
### B. 浏览器隐私保护
网络浏览中最令人担忧的隐私泄露内容之一是用户的IP地址。由于Web服务器可以轻松收集和存储IP，因此可以根据网络环境（例如NAT）以精细的粒度立即公开用户的地理位置。Tor浏览器[213]使用洋葱协议解决了这个问题，该协议使用Tor网络中的多个随机节点重新路由用户的连接，并且每个节点不能同时知道用户的身份（IP）和目的地。然而，通过观察加密的网络数据包序列[181]、[199]，仍然可以通过网站指纹技术破坏隐私。另一种浏览器Brave[203]通过删除网站中包含的所有广告和广告跟踪器来阻止网站跟踪用户，但用户的浏览历史仍然可能被泄露[214]、[223]。
### C. 插件和扩展
插件和扩展是通过提供多种功能来定制浏览器功能的小型软件程序。Java和Flash等插件在网页上下文中运行，而扩展程序将附加功能附加到浏览器。尽管它们有好处，但插件是浏览器不稳定的主要来源[8]、[9]。插件还使渲染器进程的沙箱化变得不切实际，因为插件是由第三方编写的，浏览器供应商无法控制他们对操作系统的访问。此外，扩展在浏览器中具有特殊权限，使它们成为攻击者眼中有吸引力的目标[10]-[12]。
`NPAPI插件`。
NPAPI允许浏览器供应商开发具有通用接口的插件。当浏览器访问具有未知内容类型的页面时，它会搜索并加载可用插件来委派内容处理。因此，攻击者可以通过为网页分配特定的内容类型来触发漏洞，从而欺骗浏览器加载具有漏洞的特定插件。利用NPAPI插件的攻击在不同的浏览器和平台上很普遍，特别是在Java、Flash和PDF[163]上。为了应对这个问题，浏览器将插件进程与浏览器的主进程分开，即进程外插件缓解(out-of-process plugin
mitigation)[170]、[188]。但是，插件仍然可以用于浏览器利用，并被指责为性能下降、浏览器崩溃的原因。最后，所有浏览器都停止了对NPAPI插件的支持[169]。
### D. 部署应对措施的难度
浏览器供应商很难部署应对措施，原因如下：
a. `兼容性`:
第三方代码（例如浏览器插件）依赖于浏览器代码才能正常运行。在引入浏览器缓解措施时，可能会破坏浏览器供应商无法控制的第三方代码。例如，当尝试在Windows中为Chrome的Pepper
Plugin API(PPAPI)引入Win32k锁定时，在Windows
8.1及更低版本上应用补丁时存在稳定性问题，Chrome团队无法追踪[130]，影响Flash、PDFium和Widevine等插件。因此，PPAPI
Win32k锁定仅针对Windows 10而非Windows 8/8.1启用以避免稳定性问题。
b. `性能`:
添加安全缓解措施的成本很高。为了减轻安全威胁，浏览器供应商有时会选择以性能换取安全，反之亦然。例如，2018年初在所有现代浏览器中禁用SharedArrayBuffer(SAB)作为Spectre攻击的对策，正如§IV-D中所讨论的那样，极大地危害了性能，因为SAB最初旨在实现worker之间的轻量级同步[76] .
c. `安全`:
更多的代码通常意味着更多的安全漏洞。通常，引入缓解措施或补丁会增加攻击面。在为浏览器部署新补丁后，浏览器供应商通常会寻找漏洞报告以尽快解决新的安全问题。例如，Firefox单独为主动应对措施中的安全漏洞推出了一类全新的漏洞奖励[215]。
`还原的缓解措施`:
一些缓解措施被临时部署以处理即时威胁，同时开发更好的缓解措施。例如，在上面提到的SAB案例中，在引入更强大的应对措施（即站点隔离和COOP/COEP）后不久，Chrome和Firefox重新启用了SAB[27]、[172]。
尽管尽了所有努力来确保缓解措施是安全的、高性能的和兼容的，但有时缓解措施由于它们带来的一些严重后果而不得不撤销。例如，在表IV中，Chrome内置的XSS过滤器XSS
Auditor[72]遭受了许多安全副作用，导致其在2019年退役[207]。
* * *
## 参考链接
[1] CVE-2003-1048. Double free vulnerability in mshtml.dll.  
[2] CVE-2006-5579. Access of previously freed memory in Internet Explorer 6.  
[3] CVE-2011-3046. Universal XSS in Chromium with largest reward amount
($60k).  
[4] CVE-2013-6632. Memory corruption leads to sandbox escape in Chrome