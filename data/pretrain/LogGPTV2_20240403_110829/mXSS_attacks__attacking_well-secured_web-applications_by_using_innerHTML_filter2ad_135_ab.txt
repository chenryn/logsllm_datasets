content they wish to present. Typical examples are web-
mailers (visualization of HTML-mail content provided by
the sender of the e-mail) or collaborative editing of com-
plex HTML-based documents (HTML content provided by
all editors).
To protect these applications and their users from XSS at-
tacks, website owners tend to call server-side HTML (cid:12)lters
like e.g. the HTML Puri(cid:12)er, mentioned in Section 5.1, for
assistance. These HTML (cid:12)lters are highly skilled and con-
(cid:12)gurable tool-kits, capable of catching potentially harmful
HTML and removing it from benign content. While it has
become almost impossible to bypass those (cid:12)lters with regu-
lar HTML/Javascript strings, the mXSS problem has yet to
be tackled by most libraries. The core issue is as follows: the
HTML markup an attacker uses to initiate an mXSS attack
is considered harmless and contains no active elements or
potentially malicious attributes { the attack vector exam-
ples shown in Section 3 demonstrate that.
Only the browser will transform the markup internally
(each browser family in a di(cid:11)erent manner), thereby unfold-
ing the embedded attack vector and executing the malicious
code. As previously mentioned, such attacks can be labeled
mXSS { XSS attacks that are only successful because the
attack vector is mutated by the browser, a result of behav-
ioral mishaps introduced by the internal HTML processing
of the user agents.
3. EXPLOITS
The following sections describe a set of innerHTML-based
attacks we discovered during our research on DOM mutation
and string transformation. We present the code purposefully
appearing as sane and inactive markup before the transfor-
mation occurs, while it then becomes an active XSS vector
executing the example method xss() after that said trans-
formation. This way server- and client-side XSS (cid:12)lters are
being elegantly bypassed.
The code shown in Listing 3 provides one basic example
of how to activate (Step 2 in the chain of events described
in Section 4) each and any of the subsequently following
exploits { it simply concatenates an empty string to an ex-
isting innerHTML property. The exploits can further be
triggered by the DOM operations mentioned in Section 2.2.
Any innerHTML-access mentioned in the following sections
signi(cid:12)es a reference to a general usage of the DOM opera-
tions framed by this work.
Listing 3: Code-snippet { illustrating the minimal
amount of DOM-transaction necessary to cause and
trigger mXSS attacks
We created a test-suite to analyze the innerHTML trans-
formations in a systematic way; this tool was later published
on a related website dedicated to HTML and HTML5 secu-
rity implications 2. The important innerHTML-transformations
are highlighted in the code examples to follow.
3.1 Backtick Characters breaking Attribute De-
limiter Syntax
This DOM string-mutation and the resulting attack tech-
nique was (cid:12)rst publicly documented in 2007, in connection
with the original print-preview bug described in Section 2.2.
Meanwhile, the attack can only be used in legacy browsers
as their modern counterparts have deployed e(cid:11)ective (cid:12)xes
against this problem. Nevertheless, the majority of tested
2innerHTML
innerhtml, 2012
Test-Suite,
http://html5sec.org/
web applications and XSS (cid:12)lter frameworks remain vulner-
able against this kind of attack { albeit measurable exis-
tence of a legacy browser user-base. The code shown in List-
ing 4 demonstrates the initial attack vector and the resulting
transformation performed by the browser engine during the
processing of the innerHTML property.
Listing 4:
innerHTML-access to an element with
backtick attribute values causes JavaScript execu-
tion
3.2 XML Namespaces in Unknown Elements
causing Structural Mutation
A browser that does not yet support the HTML5 standard
is likely to interpret elements such as article, aside, menu
and others as unknown elements. A developer can decide
how an unknown element is to be treated by the browser: A
common way to pass these instructions is to use the xmlns
attribute, thus providing information on which XML names-
pace the element is supposed to reside on. Once the xmlns
attribute is being (cid:12)lled with data, the visual e(cid:11)ects often
do not change when compared to none or empty names-
pace declarations. However, once the innerHTML property
of one of the element’s container nodes is being accessed, a
very unusual behavior can be observed. The browser pre-
(cid:12)xes the unknown but namespaced element with the XML
namespace that in itself contains unquoted input from the
xmlns attribute. The code shown in Listing 5 demonstrates
this case.
Listing 5:
innerHTML-access to an unknown ele-
ment causes mutation and unsolicited JavaScript ex-
ecution
123
123 
The result of this structural mutation and the pseudo-
namespace allowing white-space is an injection point. It is
through this point that an attacker can simply abuse the
fact that an attribute value is being rendered despite its
malformed nature, consequently smuggling arbitrary HTML
into the DOM and executing JavaScript. This problem was
reported and (cid:12)xed in the modern browsers. A similar issue
was discovered and published by Silin 3.
3Silin, A., XSS using "xmlns" attribute in custom tag
when copying innerHTML, http://html5sec.org/?xmlns#
97, Dec. 2011
3.3 Backslashes in CSS Escapes causing String-
Boundary Violation
To properly escape syntactically relevant characters in
CSS property values, the CSS1 and CSS2 speci(cid:12)cations pro-
pose CSS escapes. These cover the Unicode range and allow
to, for instance, use the single-quote character without risk.
This is possible even inside a CSS string that is delimited by
single quotes. Per speci(cid:12)cation, the correct usage for CSS es-
capes inside CSS string values would be: property: ’v\61
lue’. The escape sequence is representing the a character,
based on its position in the ASCII table of characters. Uni-
code values can be represented by escaping sequences such
as n20AC for the ¿ glyph, to give one example.
Several modern browsers nevertheless break the security
promises indicated by the correct and standards-driven us-
age of CSS escapes. In particular, it takes place for the in-
nerHTML property of a parent element being accessed. We
observed a behavior that converted escapes to their canon-
ical representation. The sequence property: ’val\27ue’
would result in the innerHTML representation PROPERTY:
’val’ue’. An attacker can abuse this behavior by inject-
ing arbitrary CSS code hidden inside a properly quoted and
escaped CSS string. This way HTML (cid:12)lters checking for
valid code that observes the standards can be bypassed, as
depicted in Listing 6.
Listing 6:
innerHTML-access to an element using
CSS escapes in CSS strings causes JavaScript exe-
cution
Unlike the backtick-based attacks described in Section 3.1,
this technique allows recursive mutation. This means that,
for example, a double-escaped or double-encoded character
will be double-decoded in case that innerHTML-access oc-
curs twice. More speci(cid:12)cally, the \5c 5c escape sequence
will be broken down to the \5c sequence after (cid:12)rst inner-
HTML-access, and consequently decoded to the \ character
after the second innerHTML-access.
During our attack surface’s evaluation, we discovered that
some of the tested HTML (cid:12)lters could be bypassed with the
use of &#amp;x5c 5c 5c 5c or alike sequences. Due to the
backslashes’ presence allowed in CSS property values, the
HTML entity representation combined with the recursive
decoding feature had to be employed for code execution and
attack payload delivery.
The attacks that become possible through this technique
range from overlay attacks injecting otherwise unsolicited
CSS properties (such as positioning instructions and nega-
tive margins), to arbitrary JavaScript execution, font injec-
tions (as described by Heiderich et al. [14]), and the DHTML
behavior injections for levering XSS and ActiveX-based at-
tacks.
3.4 Misﬁt Characters in Entity Representation
breaking CSS Strings
Combining aforementioned exploit with enabling CSS-escape
decoding behavior results in yet another interesting e(cid:11)ect
observable in several browsers. That is, when both CSS es-
cape and the canonical representation for the double-quote
character inside a CSS string are used, the render engine
converts them into a single quote, regardless of those two
characters seeming unrelated. This means that the \22,
&quot;, &#x22; and &#34; character sequences will be con-
verted to the ’ character upon innerHTML-access. Based
on the fact that both characters have syntactic relevance
in CSS, the severity of the problems arising from this be-
havior is grand. The code example displayed in Listing 7
shows a mutation-based XSS attack example. To sum up
and underline once again, it is based on fully valid and inac-
tive HTML and CSS markup that will unfold to active code
once the innerHTML-access is involved.
innerHTML-access to an element using
Listing 7:
CSS strings containing mis(cid:12)t HTML entities causes
JavaScript execution
We can only speculate about the reasons for this surpris-
ing behavior. One potential explanation is that in case when
the innerHTML transformation might lead the \22, &quot;,
&#x22; and &#34; sequences to be converted into the actual
double-quote character ("), then { given that the attribute
itself is being delimited with double-quotes { an improper
handling could not only break the CSS string but even dis-
rupt the syntactic validity of the surrounding HTML. An
attacker could abuse that to terminate the attribute with a
CSS escape or HTML entity, and, afterwards, inject crimson
HTML to cause an XSS attack.
Our tests showed that it is not possible to break the
HTML markup syntax with CSS escapes once used in a
CSS string or any other CSS property value. The mutation
e(cid:11)ects only allow CSS strings to be terminated illegitimately
and lead to an introduction of new CSS property-value pairs.
Depending on the browser, this may very well lead to an XSS
exploit executing arbitrary JavaScript code. Supporting this
theory, the attack technique shown in Section 3.5 considers
markup integrity but omits CSS string sanity considerations
within the transformation algorithm of HTML entities and
CSS escapes.
3.5 CSS Escapes in Property Names violating
entire HTML Structure
As mentioned in Section 3.4, an attacker cannot abuse
mutation-based attacks to break the markup structure of
the document containing the style attribute hosting the CSS
escapes and entities. Thus far, the CSS escapes and entities
were used exclusively in CSS property values and not in
the property names. Applying the formerly discussed tech-
niques to CSS property names instead of values forces some
browsers into a completely di(cid:11)erent behavior, as demon-
strated in Listing 8.
Listing 8:
innerHTML-access to an element with
invalid CSS property names causes JavaScript exe-
cution
Listing 10:
innerHTML-access to an element with
encoded XHTML in CSS string values causes Java-
Script execution
Creating a successful exploit, which is capable of executing
arbitrary JavaScript, requires an attacker to (cid:12)rst terminate
the style attribute by using a CSS escape. Therefore, the
injected code would trigger the exploit code while it still fol-
lows the CSS syntax rules. Otherwise, the browser would
simply remove the property-value pair deemed invalid. This
syntax constraint renders several characters useless for cre-
ating exploits. White-space characters, colon, equals, curly
brackets and the semi colon are among them. To bypass
the restriction, the attacker simply needs to escape those
characters as well. We illustrate this in Listing 8. By escap-
ing the entire attack payload, the adversary can abuse the
mutation feature and deliver arbitrary CSS-escaped HTML
code.
Note that the attack only works with the double-quote
representation inside double-quoted attributes. Once a web-
site uses single-quotes to delimit attributes, the technique
can be no longer applied. The innerHTML-access will con-
vert single quotes to double quotes. Then again, the \22
escape sequence can be used to break and terminate the at-
tribute value. The code displayed in Listing 9 showcases this
yet again surprising e(cid:11)ect.
Listing 9: Example for automatic quote conversion
on innerHTML-access
3.6 Entity-Mutation in non-HTML Documents
Once a document is being rendered in XHTML/XML
mode, di(cid:11)erent rules apply to the handling of character enti-
ties, non-wellformed content including unquoted attributes,
unclosed tags and elements, invalid elements nesting and
other aspects of document structure. A web-server can in-
struct a browser to render a document in XHTML/XML
by setting a matching MIME type via Content-Type HTTP
headers; in particular the MIME text/xhtml, text/xml, ap-
plication/xhtml+xml and application/xml types can be em-
ployed for this task (more exotic MIME types like image/svg
+xml and application/vnd.wap.xhtml+xml can also be used).
These speci(cid:12)c and MIME-type dependent parser behav-
iors cause several browsers to show anomalies when, for in-
stance, CSS strings in style elements are exercised in com-
bination with (X)HTML entities. Several of these behaviors
can be used in the context of mutation-based XSS attacks,
as the code example in Listing 10 shows.
*{ font - family : ’ arial ’} 
Here-above, the browser automatically decodes the HTML
entities hidden in the CSS string specifying the font family.
By doing so, the parser must assume that the CSS string
contains actual HTML. While in text/html neither a muta-
tion nor any form or parser confusion leading to script exe-
cution would occur, in text/xhtml and various related MIME
type rendering modes, a CSS style element is supposed to be
capable of containing other markup elements. Thus, without
leaving the context of the style element, the parser decides
to equally consider the decoded img element hidden in the
CSS string, evaluate it and thereby execute the JavaScript
connected to the successful activation of the event handler.
This problem is unique to the WebKit browser family, al-
though similar issues were spotted in other browser engines.
Beware that despite a very small distribution of sites us-
ing MIME types such as text/xhtml, text/xml, application/x-
html+xml and application/ xml (0.0075% in the Alexa Top
1 Million website list), an attacker might abuse MIME sni(cid:11)-
ing, frame inheritance and other techniques to force a web-
site into the necessary rendering mode, purposefully acting
towards a successful exploit execution. The topic of security
issues arising from MIME-sni(cid:14)ng has been covered by by
Barth et al., Gebre et al. and others [2, 3, 8].
3.7 Entity-Mutation in non-HTML context of
HTML documents
In-line SVG support provided in older browsers could lead
to XSS attacks originating in HTML entities that were em-
bedded inside style and similar elements, which are by de-