    /*
     *  This file contains an ISA-portable PIN tool for tracing memory accesses.*
     */
    #include 
    #include "pin.H"
    FILE* trace;
    // 打印地址读的指令的地址
    VOID RecordMemRead(VOID* ip, VOID* addr) { fprintf(trace, "%p: R %p\n", ip, addr); }
    // 打印地址写的指令的地址
    VOID RecordMemWrite(VOID* ip, VOID* addr) { fprintf(trace, "%p: W %p\n", ip, addr); }
    // 使用谓词函数调用来检测内存访问
    // 每个读和写的指令都会调用
    VOID Instruction(INS ins, VOID* v)
    {
      // 获取指令中的内存操作数计数
      UINT32 memOperands = INS_MemoryOperandCount(ins);
      // 遍历指令中的每个内存操作数
      for (UINT32 memOp = 0; memOp 
    #include 
    #include 
    using std::endl;
    using std::ofstream;
    using std::string;
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "imageload.out", "specify file name");
    ofstream TraceFile;
    // Pin 在 image 加载时调用该函数，在该例中没有进行插桩
    VOID ImageLoad(IMG img, VOID* v) { TraceFile 
    #include 
    #include "pin.H"
    using std::cerr;
    using std::endl;
    using std::ios;
    using std::ofstream;
    using std::string;
    ofstream OutFile;
    // 保存指令的运行次数，设置为静态变量以帮助编译器优化 docount
    static UINT64 icount = 0;
    // 在每个 block 前都会被调用
    VOID docount(UINT32 c) { icount += c; }
    // Pin 在遇到一个新的block 时进行调用，插入对 docount 函数的调用
    VOID Trace(TRACE trace, VOID* v)
    {
        // 访问 trace 中的每个 bbl
        for (BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl = BBL_Next(bbl))
        {
            // 在每个 bbl 前插入对 docount 函数的调用，传入指令数量
            BBL_InsertCall(bbl, IPOINT_BEFORE, (AFUNPTR)docount, IARG_UINT32, BBL_NumIns(bbl), IARG_END);
        }
    }
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "inscount.out", "specify output file name");
    // 退出函数
    VOID Fini(INT32 code, VOID* v)
    {
        // 写入到文件中，程序可能会关闭 cout 和 cerr
        OutFile.setf(ios::showbase);
        OutFile 
    #include 
    #include 
    #include 
    #include "pin.H"
    using std::cerr;
    using std::dec;
    using std::endl;
    using std::hex;
    using std::ofstream;
    using std::setw;
    using std::string;
    ofstream outFile;
    // 保存 procedure 的指令数
    typedef struct RtnCount
    {
        string _name;
        string _image;
        ADDRINT _address;
        RTN _rtn;
        UINT64 _rtnCount;
        UINT64 _icount;
        struct RtnCount* _next;
    } RTN_COUNT;
    // 每个 procedure 的指令数的链表
    RTN_COUNT* RtnList = 0;
    // 每条指令执行前调用
    VOID docount(UINT64* counter) { (*counter)++; }
    const char* StripPath(const char* path)
    {
        const char* file = strrchr(path, '/');
        if (file)
            return file + 1;
        else
            return path;
    }
    // Pin 在一个新的 rtn 执行时调用该函数
    VOID Routine(RTN rtn, VOID* v)
    {
        // 对该routine设置一个计数器
        RTN_COUNT* rc = new RTN_COUNT;
        // image unloaded 时， RTN 数据消失，所以在此处直接保存，后续 fini 中还要使用
        rc->_name     = RTN_Name(rtn);