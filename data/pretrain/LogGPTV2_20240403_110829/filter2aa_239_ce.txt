                    group r by r.Country into c
                    select new
                    {
                      Country = c.Key,
                      Wins = (from r1 in c
                            select r1.Wins).Sum()
                    }
                    orderby c.Wins descending, c.Country
                    select c).Take(5);
    foreach (var country in countries)
    {
      WriteLine("{country.Country} {country.Wins}");
    }
根据获得一级方程式冠军的次数，最成功的国家是：
    UK 186
    Germany 130
    Brazil 78
    France 51
    Finland 45
方法Min（）、Max（）、Average（）和Aggregate（）的使用方式与Count（）和
Sum（）相同。Min（）方法返回集合中的最小值，Max（）方法返回集合中的最大值，
Average（）方法计算集合中的平均值。对于Aggregate（）方法，可以传递一个lambda表
达式，该表达式对所有的值进行聚合。
13.2.16 转换操作符
本章前面提到，查询可以推迟到访问数据项时再执行。在迭代中使用查询时，查询会
执行。而使用转换操作符会立即执行查询，把查询结果放在数组、列表或字典中。
在下面的例子中，调用ToList（）扩展方法，立即执行查询，得到的结果放在List
类中（代码文件EnumerableSample/Program.cs）：
    List racers = (from r in Formula1.GetChampions()
                          where r.Starts > 150
                          orderby r.Starts descending
                          select r).ToList()
;
    foreach (var racer in racers)
    {
      WriteLine($"{racer} {racer:S}");
    }
把返回的对象放在列表中并没有这么简单。例如，对于集合类中从赛车到赛车手的快
速访问，可以使用新类Lookup。
 注意： 
Dictionary类只支持一个键对应一个值。在
System.Linq名称空间的类Lookup类中，一个键可以对应多个值。这
些类详见第11章。
使用复合的from查询，可以摊平赛车手和赛车序列，创建带有Car和Racer属性的匿名
类型。在返回的Lookup对象中，键的类型应是表示汽车的string，值的类型应是Racer。为
了进行这个选择，可以给ToLookup（）方法的一个重载版本传递一个键和一个元素选择
器。键选择器引用Car属性，元素选择器引用Racer属性：
    var racers = (from r in Formula1.GetChampions()
                  from c in r.Cars
                  select new
                  {
                    Car = c,
                    Racer = r
                  }).ToLookup(cr => cr.Car, cr => cr.Racer);
    if (racers.Contains("Williams"))
    {
      foreach (var williamsRacer in racers["Williams"])
      {
        WriteLine(williamsRacer);
      }
    }
用Lookup类的索引器访问的所有“Williams”冠军，结果如下：
    Alan Jones
    Keke Rosberg
    Nigel Mansell
    Alain Prost
    Damon Hill
    Jacques Villeneuve
如果需要在非类型化的集合上（如ArrayList）使用LINQ查询，就可以使用Cast（）
方法。在下面的例子中，基于Object类型的ArrayList集合用Racer对象填充。为了定义强类
型化的查询，可以使用Cast（）方法：
    var list = new System.Collections.ArrayList(Formula1.GetChampions()
        as System.Collections.ICollection);
    var query = from r in list.Cast()
                where r.Country == "USA"
                orderby r.Wins descending
                select r;
    foreach (var racer in query)
    {
      WriteLine("{racer:A}", racer);
    }
结果仅包含来自美国的一级方程式冠军：
    Mario Andretti, country: USA, starts: 128, wins: 12
    Phil Hill, country: USA, starts: 48, wins: 3
13.2.17 生成操作符
生成操作符Range（）、Empty（）和Repeat（）不是扩展方法，而是返回序列的正常
静态方法。在LINQ to Objects中，这些方法可用于Enumerable类。
有时需要填充一个范围的数字，此时就应使用Range（）方法。这个方法把第一个参
数作为起始值，把第二个参数作为要填充的项数：
    var values = Enumerable.Range(1, 20);
    foreach (var item in values)
    {
      Write($"{item} ", item);
    }
    WriteLine();
当然，结果如下所示：
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
  注意： Range（）方法不返回填充了所定义值的集合，这个方法与其他方法
一样，也推迟执行查询，并返回一个RangeEnumerator，其中只有一条yield 
return语
句，来递增值。
可以把该结果与其他扩展方法合并起来，获得另一个结果，例如，使用Select（）扩
展方法：
    var values = Enumerable.Range(1, 20).Select(n => n ＊ 3);
Empty（）方法返回一个不返回值的迭代器，它可以用于需要一个集合的参数，其中
可以给参数传递空集合。
Repeat（）方法返回一个迭代器，该迭代器把同一个值重复特定的次数。
13.3 并行LINQ
System.Linq名称空间中包含的类ParallelEnumerable可以分解查询的工作，使其分布在
多个线程上。尽管Enumerable类给IEnumerable接口定义了扩展方法，但
ParallelEnumerable类的大多数扩展方法是ParallelQuery类的扩展。一个重要的异
常是AsParallel（）方法，它扩展了IEnumerable接口，返回
ParallelQuery类，所以正常的集合类可以以并行方式查询。
13.3.1 并行查询
为了说明并行LINQ（Parallel LINQ, PLINQ），需要一个大型集合。对于可以放在
CPU的缓存中的小集合，并行LINQ看不出效果。在下面的代码中，用随机值填充一个大
型的int集合（代码文件ParallelLinqSample/Program.cs）：
    static IEnumerable SampleData()
    {
      const int arraySize = 50000000;
      var r = new Random();
      return Enumerable.Range(0, arraySize).Select(x => r.Next(140)).ToList();
    }
现在可以使用LINQ查询筛选数据，进行一些计算，获取所筛选数据的平均数。该查
询用where子句定义了一个筛选器，仅汇总对应值小于20的项，接着调用聚合函数
Sum（）方法。与前面的LINQ查询的唯一区别是，这次调用了AsParallel（）方法。
    var res = (from x in data.AsParallel()
                where Math.Log(x) 接口，所以可以对简单的数组调用它。AsParallel（）方法返回
ParallelQuery。因为返回的类型，所以编译器选择的Where（）方法是
ParallelEnumerable.Where（），而不是Enumerable.Where（）。在下面的代码中，
Select（）和Average（）方法也来自ParallelEnumerable类。与Enumerable类的实现代码相
反，对于ParallelEnumerable类，查询是分区的，以便多个线程可以同时处理该查询。集合
可以分为多个部分，其中每个部分由不同的线程处理，以筛选其余项。完成分区的工作
后，就需要合并，获得所有部分的总和。
    var res = data.AsParallel().Where(x => Math.Log(x)  x).Average();
运行这行代码会启动任务管理器，这样就可以看出系统的所有CPU都在忙碌。如果删
除AsParallel（）方法，就不可能使用多个CPU。当然，如果系统上没有多个CPU，就不
会看到并行版本带来的改进。
13.3.2 分区器
AsParallel（）方法不仅扩展了IEnumerable接口，还扩展了Partitioner类。通过
它，可以影响要创建的分区。
Partitioner类用System.Collection.Concurrent名称空间定义，并且有不同的变体。
Create（）方法接受实现了IList类的数组或对象。根据这一点，以及Boolean类型的参
数loadBalance和该方法的一些重载版本，会返回一个不同的Partitioner类型。对于数组，
使用派生自抽象基类OrderablePartitioner的DynamicPartitionerForArray
类和StaticPartitionerFor-Array类。
修改13.3.1小节中的代码，手工创建一个分区器，而不是使用默认的分区器：
    var result = (from x in Partitioner.Create(data, true).AsParallel()
                  where Math.Log(x) 
    {
      try
      {
        var res = (from x in data.AsParallel().WithCancellation(cts.Token)
                  where Math.Log(x) 类型的参数。C#编译器根据类
型给lambda表达式定义不同的行为。如果类型是Expression，编译器就从lambda表达
式中创建一个表达式树，并存储在程序集中。这样，就可以在运行期间分析表达式树，并
进行优化，以便于查询数据源。
下面看看一个前面使用的查询表达式（代码文件
ExpressionTreeSample/Program.cs）：
    var brazilRacers = from r in racers
                      where r.Country == "Brazil"
                      orderby r.Wins
                      select r;
这个查询表达式使用了扩展方法Where（）、OrderBy（）和Select（）。Enumerable
类定义了Where（）扩展方法，并将委托类型Func作为参数谓词。
    public static IEnumerable Where(
        this IEnumerable source, Func predicate);
这样，就把lambda表达式赋予谓词。这里lambda表达式类似于前面介绍的匿名方法。
    Func predicate = r => r.Country == "Brazil";
Enumerable类不是唯一一个定义了扩展方法Where（）的类。Queryable类也定义
了Where（）扩展方法。这个类对Where（）扩展方法的定义是不同的：
    public static IQueryable Where(
        this IQueryable source,
        Expression> predicate);
其中，把lambda表达式赋予类型Expression，该类型的操作是不同的：
    Expression> predicate = r => r.Country == "Brazil";
除了使用委托之外，编译器还会把表达式树放在程序集中。表达式树可以在运行期间
读取。表达式树从派生自抽象基类Expression的类中构建。Expression类与Expression
不同。继承自Expression类的表达式类有BinaryExpression、ConstantExpression、
InvocationExpression、lambdaExpression、NewExpression、NewArrayExpression、
TernaryExpression以及Unary Expression等。编译器会从lambda表达式中创建表达式树。
例如，lambda表达式r.Country 
== 
"Brazil"使用了ParameterExpression、
MemberExpression、ConstantExpression和MethodCallExpression，来创建一个表达式树，
并将该树存储在程序集中。之后在运行期间使用这个树，创建一个用于底层数据源的优化
查询。
DisplayTree（）方法在控制台上图形化地显示表达式树。其中传递了一个Expression
对象，并根据表达式的类型，把表达式的一些信息写到控制台上。根据表达式的类型，递
归地调用DisplayTree（）方法。
  注意： 在这个方法中，没有处理所有的表达式类型，只处理了在下一个示例
表达式中使用的类型。
    private static void DisplayTree(int indent, string message,
    Expression expression)
    {
    string output = $"{string.Empty.PadLeft(indent, '>')} {message} " +
    $"! NodeType: {expression.NodeType}; Expr: {expression}";
    indent++;
    switch (expression.NodeType)
    {
     case ExpressionType.Lambda:
      Console.WriteLine(output);
      LambdaExpression lambdaExpr = (LambdaExpression)expression;
      foreach (var parameter in lambdaExpr.Parameters)
      {
        DisplayTree(indent, "Parameter", parameter);
      }
      DisplayTree(indent, "Body", lambdaExpr.Body);
      break;
    case ExpressionType.Constant:
      ConstantExpression constExpr = (ConstantExpression)expression;
      WriteLine($"{output} Const Value: {constExpr.Value}");
      break;
    case ExpressionType.Parameter:
      ParameterExpression paramExpr = (ParameterExpression)expression;
      WriteLine($"{output} Param Type: {paramExpr.Type.Name}");
      break;
    case ExpressionType.Equal:
    case ExpressionType.AndAlso:
    case ExpressionType.GreaterThan:
      BinaryExpression binExpr = (BinaryExpression)expression;
      if (binExpr.Method ! = null)
      {
        WriteLine($"{output} Method: {binExpr.Method.Name}");
      }
      else
      {
         WriteLine(output);
      }
      DisplayTree(indent, "Left", binExpr.Left);
      DisplayTree(indent, "Right", binExpr.Right);
      break;
    case ExpressionType.MemberAccess:
      MemberExpression memberExpr = (MemberExpression)expression;
      WriteLine($"{output} Member Name: {memberExpr.Member.Name}, " +
               " Type: {memberExpr.Expression}");
      DisplayTree(indent, "Member Expr", memberExpr.Expression);
      break;
    default:
      WriteLine();
      WriteLine($"{expression.NodeType} {expression.Type.Name}");
      break;
    }
  }