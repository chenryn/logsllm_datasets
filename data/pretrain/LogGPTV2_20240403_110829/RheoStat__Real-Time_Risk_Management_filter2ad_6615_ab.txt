Reconfigure
Yes
Fig. 3. Risk can be analyzed as a function of the threats,
their likelihood, the vulnerabilities, the safeguards, the
assets and the consequences. Risk can be managed by
using safeguards to control the exposure of vulnerable
resources.
Analyzing the risk of a system re-
quires knowledge of a number of
factors. Below we describe each of these factors along with its associated semantics.
We deﬁne these in the context of the operating system paradigm since our goal is host-
based response.
The paradigm assumes the existence of an operating system augmented with an
access control subsystem that mediates access by subjects to objects in the system using
RheoStat: Real-Time Risk Management
301
predicated permissions. In addition, a host-based intrusion detection system is assumed
to be present and operational.
Threats. A threat is an agent that can cause harm to an asset in the system. We deﬁne a
threat to be a speciﬁc attack against any of the application or system software that is
running on the host. It is characterized by an intrusion detection signature. The set
of threats is denoted by T = {t1, t2, . . .}, where tα ∈ T is an intrusion detection
signature. Since tα is a host-based signature, it is comprised of an ordered set of
events S(tα) = {s1, s2, . . .}. If this set occurs in the order recognized by the rules
of the intrusion detector, it signiﬁes the presence of an attack.
Likelihood. The likelihood of a threat is the hypothetical probability of it occurring. If
a signature has been partially matched, the extent of the match serves as a predictor
of the chance that it will subsequently be completely matched. A function µ is used
to compute the likelihood of threat tα. µ can be threat speciﬁc and will depend on
the history of system events that are relevant to the intrusion signature. Thus, if
E = {e1, e2, . . .} denotes the ordered set of all events that have occurred, then:
T (tα) = µ(tα, E
≺∩ S(tα))
(5)
≺∩ yields the set of all events that occur in the same order in each input set.
where
Our implementation of µ is described in Section 7.1.
Assets. An asset is an item that has value. We deﬁne the assets to be the data stored in
the system. In particular, each ﬁle is considered a separate object oβ ∈ O, where
O = {o1, o2, . . .} is the set of assets. A set of objects A(tα) ⊆ O is associated
with each threat tα. Only objects oβ ∈ A(tα) can be harmed if the attack that is
characterized by tα succeeds.
Consequences. A consequence is a type of harm that an asset may suffer. Three types
of consequences can impact the data. These are the loss of conﬁdentiality, integrity
and availability. If an object oβ ∈ A(tα) is affected by the threat tα, then the re-
sulting costs due to the loss of conﬁdentiality, integrity and availability are denoted
by c(oβ), i(oβ), and a(oβ) respectively. Any of these values may be 0 if the attack
can not effect the relevant consequence. However, all three values associated with
a single object can not be 0 since in that case oβ ∈ A(tα) would not hold. Thus,
the consequence of a threat tα is:
C(tα) =
(cid:1)
oβ∈A(tα)
c(oβ) + i(oβ) + a(oβ)
(6)
Vulnerabilities. A vulnerability is a weakness in the system. It results from an error
in the design, implementation or conﬁguration of either the operating system or
application software. The set of vulnerabilities present in the system is denoted by
W = {w1, w2, . . .}. W (tα) ⊆ W is the set of weaknesses exploited by the threat
tα to subvert the security policy.
Safeguards. A safeguard is a mechanism that controls the exposure of the system’s
assets. The reference monitor’s set of permission checks P = {p1, p2, . . .} serve as
safeguards in an operating system. Since the reference monitor mediates access to
302
Ashish Gehani and Gershon Kedem
all objects, a vulnerability’s exposure can be limited by denying the relevant per-
missions. The set P (wγ) ⊆ P contains all the permissions that are requested in the
process of exploiting vulnerability wγ. The static conﬁguration of a conventional
reference monitor either grants or denies access to a permission pλ. This exposure
is denoted by v(pλ), with the value being either 0 or 1. The active reference moni-
tor can reduce the exposure of a statically granted permission to v(cid:3)(pλ), a value in
the range [0, 1]. This reﬂects the nuance that results from evaluating predicates as
auxiliary safeguards.)
Thus, if all auxiliary safeguards are utilized, the total exposure to a threat tα is:
(cid:1)
V(tα) =
v(pλ) × v(cid:3)(pλ)
| ˆP (tα)|
pλ∈ ˆP (tα)
(cid:2)
ˆP (tα) =
P (wγ)
wγ∈W (tα)
(7)
(8)
where:
5 Runtime Risk Management
The risk to the host is the sum of the risks that result from each of the threats that it
faces. The risk from a single threat is the product of the chance that the attack will
occur, the exposure of the system to the attack, and the cost of the consequences of the
attack succeeding [NIST800-12]. Thus, the cumulative risk faced by the system is:
R =
(cid:1)
tα∈T
T (tα) × V(tα) × C(tα)
(9)
If the risk posed to the system is to be managed, the current level must be contin-
uously monitored. When the risk rises past the threshold that the host can tolerate, the
system’s security must be tightened. Similarly, when the risk decreases, the restrictions
can be relaxed to improve performance and usability. This process is elucidated below.
The system’s risk can be reduced by reducing the exposure of vulnerabilities. This
is is effected through the use of auxiliary safeguards prior granting a permission. Simi-
larly, if the threat recedes, the restrictive permission checks can be relaxed.
5.1 Managed Risk
The set of permissions P is kept partitioned into two disjoint sets, Ψ(P ) and Ω(P ),
that is Ψ(P ) ∩ Ω(P ) = φ and Ψ(P ) ∪ Ω(P ) = P . The set Ψ(P ) ⊆ P contains the
permissions for which auxiliary safeguards are currently active. The remaining permis-
sions Ω(P ) ⊆ P are handled conventionally by the reference monitor, using only static
lookups rather than evaluating associated predicates prior to granting these permissions.
At any given point, when the set of safeguards Ψ(P ) is in use, the current risk R(cid:3)
is
calculated with:
R(cid:3) =
(cid:1)
tα∈T
T (tα) × V(cid:3)(tα) × C(tα)
(10)
where:
RheoStat: Real-Time Risk Management
303
V(cid:3)(tα) =
(cid:1)
+
pλ∈ ˆP (tα)∩Ω(P )
pλ∈ ˆP (tα)∩Ψ (P )
5.2 Risk Tolerance
(cid:1)
v(pλ)
| ˆP (tα)|
v(pλ) × v(cid:3)(pλ)
| ˆP (tα)|
(11)
While the risk must be monitored continuously, there is a computational cost incurred
each time it is recalculated. Therefore, the frequency with which the risk is estimated
must be minimized to the extent possible. Instead of calculating the risk synchronously
at ﬁxed intervals in time, we exploit the fact that the risk level only changes when the
threat to the system is altered.
An intrusion detector is assumed to be monitoring the system’s activity. Each time
it detects an event that changes the extent to which a signature has been matched, it
passes the event e to the intrusion response subsystem. The level of risk Rb before e
occurred is noted, and then the level of risk Ra after e occurred is calculated. Thus,
Ra = Rb + , where  denotes the change in the risk. Since the risk is recalculated only
when it actually changes, the computational cost of monitoring it is minimized.
Each time an event e occurs, either the risk decreases, stays the same or increases.
Each host is conﬁgured to tolerate risk upto a threshold, denoted by R0. After each
event e, the system’s response guarantees that the risk will return to a level below this
threshold. As a result, Rb  0 and Ra ≤ R0, then no action needs to be taken. Even though the risk has
increased, it is below the threshold that the system can tolerate, so no further safeguards
need to be introduced. In addition, the system will not be able to ﬁnd any set of unused
safeguards whose removal will increase the risk by less than R0 − Rb − , since the
presence of such a combination would also mean that the set existed before e occurred.
It is not possible that such a combination of safeguards existed before e occurred since
they would also have satisﬁed the condition of being less than R0 −Rb and would have
been utilized before e occurred in the process of minimizing the impact on performance
in the previous step.
If  > 0 and Ra > R0, then action is required to reduce the risk to a level below
the threshold of tolerance. The response system must search for and implement a set
of safeguards to this end. Since the severity of the response is dependent on the current
risk level, the risk recalculation can not be delayed despite the additional overhead it
imposes at a point when the system is already stressed.
304
Ashish Gehani and Gershon Kedem
5.3 Recalculating Risk
When the risk is calculated the ﬁrst time, Equation 9 is used. Therefore, the cost is
O(|T|×|P|×|O|). Since the change in the risk must be repeatedly evaluated during real-
time reconﬁguration of the runtime environment, it is imperative the cost is minimized.
This is achieved by caching all the values V(cid:3)(tα)×C(tα) associated with threats tα ∈ T
during the evaluation of Equation 9. Subsequently, when an event e occurs, the change
in the risk  = δ(R(cid:3), e) can be calculated with cost O(|T|) as described below.
The ordered set E refers to all the events that have occurred in the system prior to
the event e. The change in the likelihood of a threat tα due to e is:
≺∩ S(tα)) − µ(tα, E
δ(T (tα), e) = µ(tα, (E ∪ e)
(12)
The set of threats affected by e is denoted by ∆(T, e). A threat tα ∈ ∆(T, e) is con-
sidered to be affected by e if δ(T (tα), e) (cid:7)= 0, that is its likelihood changed due to the
event e. The resultant change in the risk level is:
≺∩ S(tα))
δ(R(cid:3), e) =
(cid:1)
tα∈∆(T,e)
δ(T (tα), e) × V(cid:3)(tα) × C(tα)
(13)
6 Cost / Beneﬁt Analysis
After an event e occurs, if the risk level Ra increases past the threshold of risk tolerance
R0, the goal of the response engine is to reduce the risk by δg ≥ Ra − R0 to a level
below the threshold. To do this, it must select a subset of permissions ρ(Ω(P )) ⊆
Ω(P ), such that adding the safeguards will reduce the risk to the desired level. By
ensuring that the permissions in ρ(Ω(P )) are granted only after relevant predicates are
veriﬁed, the resulting risk level is reduced to:
(14)
(15)
R(cid:3)(cid:3) =
T (tα) × V(cid:3)(cid:3)(tα) × C(tα)
(cid:1)
tα∈T
where the new vulnerability measure, based on Equation 7, is:
v(pλ)
| ˆP (tα)|
v(pλ) × v(cid:3)(pλ)
pλ∈( ˆP (tα)∩Ω(P )−ρ(Ω(P )))
V(cid:3)(cid:3)(tα) =
(cid:1)
(cid:1)
+
pλ∈( ˆP (tα)∩Ψ (P )∪ρ(Ω(P )))
| ˆP (tα)|
Instead, after an event e occurs, if the risk level Ra decreases, the goal of the re-
sponse engine is to allow the risk to rise by δg ≤ R0−Ra to a level below the threshold
of risk tolerance R0. To do this, it must select a subset of permissions ρ(Ψ(P )) ⊆ Ψ(P ),
such that removing the safeguards currently in use for the set will yield the maximum
improvement to runtime performance. After the safeguards are relaxed, the risk level
will rise to:
(cid:1)
R(cid:3)(cid:3) =
T (tα) × V(cid:3)(cid:3)(tα) × C(tα)
(16)
tα∈T
RheoStat: Real-Time Risk Management
305
where the new vulnerability measure, based on Equation 7, is:
v(pλ)
| ˆP (tα)|
v(pλ × v(cid:3)(pλ))
pλ∈ ˆP (tα)∩Ω(P )∪ρ(Ψ (P ))
V(cid:3)(cid:3)(tα) =
(cid:1)
(cid:1)
+
pλ∈ ˆP (tα)∩Ψ (P )−ρ(Ψ (P ))
| ˆP (tα)|