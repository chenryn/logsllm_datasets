critical code in ROM of SMART cannot be interrupted during exe-
cution.
We implemented SEDA on TrustLite as trustlets – join, attest,
attdev, and clear are each implemented as a single trustlet.
In-
tegrity of these trustlets is ensured by the secure boot component
secureBoot. EA-MPU controls access to ROM and RAM such
that only the SEDA trustlets can access secret data. For instance,
in Figure 5 the set of attestation keys K can only be written by join
(rule 3) and read by attest, attdev and clear (rule 4).
6. PERFORMANCE EVALUATION
We evaluated computation, memory, communication, and energy
costs of SEDA based on two implementations in Section 5. For the
evaluation we assume that the swarm is static throughout protocol
execution. However, in Section 8 we sketch out a protocol exten-
sion to handle highly dynamic swarms. Our evaluation results do
Figure 5: Implementation based on TrustLite [25]
not include the join protocol, mainly because it is expected to be ex-
ecuted seldom, perhaps only once per device. The costs of join are
in the same order as the costs of attest. Simulation results for our
implementation based on TrustLite are similar to those of SMART,
in terms of showing the efﬁciency of SEDA compared to traditional
attestation, and are therefore omitted. However, TrustLite is a more
advanced embedded device than SMART and has more computing
power. Thus, TrustLite can run SEDA considerably faster. For
more details you can refer to the technical report [4].
Computation cost. The dominating component of the computation
cost is due to cryptographic operations, e.g., MACs. Initiator D1,
which directly communicates with the veriﬁer VRF, computes one
digital signature and veriﬁes at most 2g MACs, where g is the num-
ber of D1’s neighbors. Every other device Di computes two MACs
and veriﬁes at most 2pi MACs, where pi ≤ gi − 1 and gi is the
number of neighbors of Di.
Communication cost. We implemented MAC as HMAC with
SHA-1, and the signature scheme with ECDSA, where (cid:96)mac = 160
and (cid:96)sign = 320. Also, we use (cid:96)N = 160, (cid:96)q = 64, and 64-bit
sVeriﬁerVcert(pk),cert(c),β,τ,σDeviceDQ,K,sk,c0,cert(pk),cert(c)σ←sign(sk;Nkβkτkc0)elseb←0endifN∈R{0,1}‘Nattdev(cid:2)D:ki;Di:Qi,Ki,c0i;∗:q,ci(cid:3)→(cid:2)D:bi,βi,τi;Di:−(cid:3)β←β+bi+βiβ←0,τ←0τ←τ+1+τiNforeachki∈Kdoendforifversig(pk;Nkβkτkc,σ)=1∧β=τ=s−1thenb=1q$←{0,1}‘qforeachki∈Kdoclear[D:q,ki;Di:Qi,Ki;∗:−]→[V:−;D:−]endforQ←Q∪{q}Q←Q\{q}Table 2: Performance of cryptographic functions
Function
Run-time (8 MHz)
SMART [16] (ms)
Create
Verify
Run-time (24 MHz)
TrustLite [25] (ms)
Create
Verify
HMAC (SHA-1)
ECDSA
PRNG (20 Bytes)
48
56, 900
160
48
—
—
0.3
347.2
3.8
0.3
—
—
Figure 6: Run-time of SEDA per device
Table 3: Performance of SEDA per device as function of the
number of neighbors g
Node Type
Run-time (8 MHz)
SMART [16] (ms)
Run-time (24 MHz)
TrustLite [25] (ms)
Initiator
Other Devices
56, 900 + 256g
96 + 256(g − 1)
347.2 + 4.4g
0.6 + 4.4(g − 1)
counter values for β and τ. This means that global session iden-
tiﬁers and counter values are 8 bytes, nonces are 20 bytes, MACs
are 20 bytes, signing and veriﬁcation keys are 20 bytes, signatures
are 40 bytes, and certiﬁcates are 20 + 40 = 60 bytes. Maximum
communication overhead for D1 is sending 48g + 176 and receiv-
ing 20 + 56g bytes. For every other Di, communication is at most
sending 56gi + 68 and receiving 68gi + 56 bytes.
Memory cost. Each Di must store at least: (1) one q for the du-
ration of each swarm attestation protocol instance, (2) its signing
key pair (sk , pk ), (3) its identity certiﬁcate cert(pk ), (4) code
certiﬁcate cert(c), and (5) the set of attestation keys K shared
with its neighbors. Hence, storage costs can be estimated as
20gi + 168 bytes, where gi is the number of Di’s neighbors. Note
that low-end embedded systems, such as TI MSP430 (which are tar-
geted by SEDA), provide at least 1, 024 bytes of non-volatile Flash
memory. Using only half of that sufﬁces for 12 neighbors, while,
in most applications (such as smart factories and vehicular ad-hoc
networks) devices will most likely have fewer neighbors or more
memory resources.
Run-time. SEDA is designed such that all devices at the same
height in the spanning tree can perform computation in parallel.
However, MAC veriﬁcation at height l depends on that at height l−
1. Hence, overall run-time of the protocol depends on the spanning
tree height7 d = f (s) ∈ O(log(s)). Another factor that affects
run-time performance is the average number of neighbors of each
device.
Let tmac, tsign, tprng, and ttr represent the times needed by a de-
vice to compute mac or vermac, sign, to generate 20 random bytes,
and to transmit one byte of information, respectively. Total run-
time t of the protocol can thus be estimated as:
d(cid:88)
(cid:17)
(cid:16)
d(cid:88)
(cid:17)
t ≤(cid:16)
280 + 168d +
gi
ttr +
2 + 4d +
gi
tmac
i=0
i=0
+ (d + 1)tprng + tsign
(1)
Run-times of cryptographic operations in SMART [16] are
shown in Table 2.8 Overall performance results are depicted in
7Note that tree height d does not include the root, e.g., d = 0 for a
tree with only the root.
8Run-time of HMAC was reported in [16]; run-times of ECDSA
and PRNG on SMART are estimations based on HMAC run-time.
Figure 7: Energy consumption of SEDA
Table 3 and Figure 6. As Figure 6 shows, run-time of SEDA on a
single device is linear in the number of its neighbors, as reﬂected
in Equation 1. Run-time of the initiator is longer than that of other
devices, due to computation of sign. Note that, the run-time of
Trustlite is linear although it looks constant due to the scale of the
graph. Furthermore, it is faster than the SMART implementation
since TrustLite hardware runs at a higher clock speed.
Energy costs. Let Esend, Erecv, Eprng, Emac, and Esign denote en-
ergy required to send one byte, receive one byte, generate 20 ran-
dom bytes, compute mac or vermac, and sign, respectively. Esti-
mated energy consumption E of the initiator is:
E ≤ (176 + 68g)Esend + (20 + 56g)Erecv
+ 3gEmac + gEprng + Esign
Meanwhile, energy consumption Ei for every other device is:
Ei ≤ (56 + 68gi)Esend + (68 + 56gi)Erecv
+ (3 + 3gi)Emac + giEprng
(2)
Figure 7 shows the energy consumption estimates of SEDA. Our
estimates are based on two types of sensor nodes.9 MICAz and
TelosB fall into the same class of low-end embedded devices as
SMART and TrustLite. We used previously reported energy con-
sumption for communication and cryptographic operations of MI-
CAz and TelosB [14] to estimate energy consumption of SEDA.
Energy consumption is linear in the number of device’s neigh-
bors, per Equation 2. Hence, if the number of neighbors is about
the same for every device, energy consumption is evenly distributed
over the whole swarm.
Initiator’s energy consumption is higher
than that of other devices, mainly due to computing sign. How-
ever, the cost of sign can be amortized among all devices by using
a different initiator in each attestation instance.
Simulation results. To evaluate performance of SEDA for large
numbers of devices, we simulated it in the OMNeT++ [38] simu-
9Neither TurstLite nor SMART are available as manufactured
chips. FPGA implementations consume more energy than manu-
factured chips.
Figure 8: Performance of SEDA for tree topologies
Figure 10: Performance of SEDA for swarms with varying
numbers of devices and tree topology, as a function of the num-
ber of neighbors per device
Figure 9: Performance of SEDA for chain and star topologies
lation environment. We implemented the protocol at the applica-
tion layer and simulated cryptographic operations by delays that
correspond to their real execution times when implemented on
SMART [16] and TrustLite [25]. We also simulated the naïve alter-
native, where VRF attests all devices individually. We excluded
VRF’s veriﬁcation time from our simulations; it is constant in
SEDA and linear in the number of devices for the naïve approach.
Simulations use 20 ms as average end-to-end delay of a wireless
communication link between two devices, which is the average in
ZigBee sensor networks [50]. We simulated some popular network
topologies: a chain, a star, and a tree, with varying numbers of
child nodes (2, 4, 8, and 12). We chose these topologies since
they reﬂect the best and worst case scenarios, in terms of efﬁciency
for SEDA. Moreover, we varied the number of devices from 10 to
1, 000, 000. Simulation results for the SMART-based implementa-
tion are shown in Figures 8, 9 and 10.
For tree topologies, run-time of SEDA is logarithmic in the num-
ber of devices (Figure 8) and linear for chain and star topologies
(Figure 9). The optimal number of neighbors per device with re-
spect to a given swarm size depends on the network and device
characteristics (mainly the time to compute MACs and network
delays). Figure 10 shows run-time of SEDA as a function of the
number of neighbors per device for different swarm sizes. For
1,000 and 10,000 devices, run-time decreases along with the num-
ber of neighbors up to a certain threshold and then starts to grow.
We believe that this occurs because higher number of neighbors
inﬂuences SEDA’s performance in two ways: (1) it increases par-
allelism and decreases spanning-tree depth, thus lowering overall
runtime; and (2) it increases runtime for individual devices, result-
ing in longer overall runtime. Hence, performance increases with
number of neighbors until the effect of (2) overshadows that of (1).
The optimal number of neighbors depends on the total number of
nodes, regardless of swarm topology and density. For example, the
optimal number of neighbors in swarms with 10 and 100 devices is
2; it grows to 4 for swarms of 1,000 and 10,000 devices.
Figure 11 compares performance of SEDA to the naïve approach,
where each device is attested individually: SEDA’s performance
protocol is signiﬁcantly better than that of the naïve approach,
Figure 11: Performance of SEDA compared to the naïve ap-
proach
which is quadratic in the number of devices for chain topologies,
and linear for tree topologies.
Evaluation results in Figures 8, 9, and 10 show that SEDA per-
forms best in swarms that allow establishing spanning trees with a
limited number of children. The reason is that tree topologies allow
attestation of multiple nodes in parallel and limiting the number of
children also limits the number of MAC veriﬁcations performed by
each node. However, even for topologies that are not conducive to
such spanning trees (e.g., star and chain), SEDA performs signif-
icantly better than the naïve approach, as illustrated in Figure 11.
Furthermore, in such worst case scenarios the random sampling ap-
proach discussed later in Section 8 can be used to reduce SEDA’s
run-time.
ADV
7. SECURITY ANALYSIS
The goal of swarm attestation is for a veriﬁer VRF to accept
only if all devices in a swarm S are running a software certiﬁed by
the swarm operator OP. This is formalized by a security experi-
, where an adversary ADV interacts with devices in
ment Exp
S and VRF. Speciﬁcally, ADV modiﬁes the software of at least
one device D, i.e., compromises that D. ADV can eavesdrop on,
delete, and modify any message sent from any D ∈ S and VRF.
Furthermore, ADV can send arbitrary messages to any D ∈ S
. After a polynomial number (in terms of the security parameters
(cid:96)N , (cid:96)q, (cid:96)mac, and (cid:96)sign) of steps by ADV, VRF outputs its deci-
sion bit b = 1 indicating that attestation of S was successful, or
b = 0 otherwise. The result is deﬁned as the output of VRF, i.e.,
Exp
= b. A secure swarm attestation scheme is deﬁned as:
ADV
attestation scheme is secure if Pr(cid:2)b = 1|Exp
DEFINITION 1
(1(cid:96)) = b(cid:3) is neg-
(SECURE SWARM ATTESTATION). A swarm
ligible in (cid:96) = f ((cid:96)N , (cid:96)q , (cid:96)mac, (cid:96)sign), where function f is polynomial
in (cid:96)N , (cid:96)q, (cid:96)mac, and (cid:96)sign.
ADV
THEOREM 1
(SECURITY OF SEDA). SEDA is a secure
swarm attestation scheme (Deﬁnition 1) if the underlying signature
and MAC scheme are selective forgery resistant.
accepts
PROOF (SKETCH) OF THEOREM 1. VRF
it
only
if
receives a message (β, τ, σ, cert(pk ), cert(sk )) where