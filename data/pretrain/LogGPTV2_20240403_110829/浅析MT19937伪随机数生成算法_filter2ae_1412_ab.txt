    # left shift inverse
    def inverse_left(res,shift,bits=32):
        tmp = res
        for i in range(bits//shift):
            tmp = res ^ tmp > 30) + i)
        return mt
定位到关键函数`mt[i] = _int32(1812433253 * (mt[i - 1] ^ mt[i - 1] >> 30) +
i)`，可以发现其中的`(mt[i - 1] ^ mt[i - 1] >>
30)`是可逆的(详见题型1)，注意到`_int32`其实相当于取低32位，相当于mod 2^32。而`gcd(1812433253,2**32) ==
1`于是`1812433253`存在逆元。那么逆向的过程其实就是模逆操作再组合上题型1的操作，便可以得到seed。代码如下：
    from gmpy2 import invert
    def _int32(x):
        return int(0xFFFFFFFF & x)
    def init(seed):
        mt = [0] * 624
        mt[0] = seed
        for i in range(1, 624):
            mt[i] = _int32(1812433253 * (mt[i - 1] ^ mt[i - 1] >> 30) + i)
        return mt
    seed = 2080737669
    def invert_right(res,shift):
        tmp = res
        for i in range(32//shift):
            res = tmp^res>>shift
        return _int32(res)
    def recover(last):
        n = 1<<32
        inv = invert(1812433253,n)
        for i in range(623,0,-1):
            last = ((last-i)*inv)%n
            last = invert_right(last,30)
        return last
    state = init(seed)
    print(recover(state[-1]) == seed)
## 扩展题型
在题型2中我们采用的黑盒测试的方法，找到了状态和输出的转移矩阵T。这是因为每个状态的二进制位与其输出的随机数的二进制位，存在线性关系。而每次twist后新生成的状态都是前一组状态的线性组合，也就是说任意一组状态都是第一组状态的线性组合。那么由任意一组状态生成的伪随机数的二进制位和第一组状态的二进制位存在线性关系。
不妨设 初始状态的二进制形式为：
设19968个伪随机数的MSB
(注意这里不要求一定是MSB，可以是随机数的任意二进制位，也不一定要求是19968个随机数，只要能构成19968个二进制位即可)构成的向量为：
于是有在GF(2)上有如下等式,其中X,Z为1 x 19968 的向量，T为19968 x 19968 的矩阵：
采用题型2中同样的方法，对T进行黑盒测试。即设置X(1,0,0,0,…0)得到Z为T的第一行，遍历所有情况得到T。最后还原出X。
###  2020 pwnhub CoinFlip2
    #!/usr/bin/env -S python3 -u
    import random
    count = 0
    while True:
        print("Progress: %s/50" % count)
        coin = random.getrandbits(1)
        if int(input("Your guess: ")) == coin:
            print("Correct!")
            count += 1
            if count == 50:
                print(open("flag").read())
                exit()
        else:
            print("Wrong!")
            count = 0
python中的`getrandbits(1)`其实截取的是`getrandbits(32)`的最高位即`MSB`。于是我们需要收集19968个`MSB`，并构造`T`，才能还原state。需要注意的是这里构造的`T`并不是满秩的，但是sage仍然可以求解，不过求解得到的`X`的前32位，并不正确。但是我们仍然能够得到623位的state，我们可以利用题型3中的方法还原第一位state。进而利用state预测接下来的随机数。不过需要注意的是，构造矩阵`T`是相当耗费时间的，笔者在2h2g的机器上跑了大约一个多小时，才算出结果。为了读者的方便，这里直接给出矩阵的数据
[坚果云(需要注册，但速度很快访问密码 :
badmonkey)](https://www.jianguoyun.com/p/Da01v98Q8PO5CBjht5oD)
[腾讯云(密码 monkey)](https://share.weiyun.com/jt9VDr2l)
具体代码如下，可以根据需要更改：
    #! /bin/bash/env python3
    from sage.all import *
    from random import Random
    from tqdm import tqdm
    prng = Random()
    length = 19968
    def myState():
        state = [0]*624
        i = 0
        while i<length:
            ind = i//32
            expont = i%32
            state[ind] = 1<<(31-expont)
            s = (3,tuple(state+[0]),None)
            yield s
            state[ind] = 0
            i += 1
    def getRow():
        rng = Random()
        gs = myState()
        for i in range(length):
            s = next(gs)
            rng.setstate(s)
    #         print(s[1][0])
            row = vector(GF(2),[rng.getrandbits(1) for j in range(length)])
            yield row
    def buildBox():
        b = matrix(GF(2),length,length)
        rg = getRow()
        for i in tqdm(range(length)):
            b[i] = next(rg)
        return b
    def test():
        prng = Random()
        originState = prng.getstate()
        # 这里都是用的MSB,如果采用不同的二进制位(如LSB)最后的矩阵T 也会不同
        leak = vector(GF(2),[prng.getrandbits(1) for i in range(length)])
        b = buildBox()
        f = open("Matrix","w")
        for i in range(b.nrows()):
            for j in range(b.ncols()):
                f.write(str(b[i,j])+"n")
        f.close()
        x = b.solve_left(leak)
        x = ''.join([str(i) for i in x])
        state = []
        for i in range(624):
            tmp = int(x[i*32:(i+1)*32],2)
            state.append(tmp)
        prng.setstate(originState)
        prng.getrandbits(1)
        originState = [x for x in prng.getstate()[1][:-1]]
        print(originState[1:] == state[1:])
    #     print(state)
        return state,b
    test()
利用脚本如下：
    from sage.all import *
    from random import Random
    from tqdm import tqdm
    # 根据文件中的信息，构造矩阵
    def buildMatrix():
        length = 19968
        cnt = 0
        m = matrix(GF(2), length, length)
        for line in tqdm(open("Matrix", "r")):
            row = cnt // 19968
            col = cnt % 19968
            m[row, col] = int(line.strip('n'))
            cnt += 1
        return m
    m = buildMatrix()
    # X = Z*(T^-1)
    def recoverState(leak):
        x = m.solve_left(leak)
        x = ''.join([str(i) for i in x])
        state = []
        for i in range(624):
            tmp = int(x[i * 32:(i + 1) * 32], 2)
            state.append(tmp)
        return state
    # 根据题型2,还原state,有两种可能,这时候可以用暴破
    def backfirst(state):
        high = 0x80000000
        low = 0x7fffffff
        mask = 0x9908b0df
        tmp = state[623] ^ state[396]
        if tmp & high == high:
            tmp ^= mask
            tmp <<= 1
            tmp |= 1
        else:
            tmp <<= 1
        return (1 << 32 - 1) | tmp & low, tmp & low
    def pwn(leak):
        state = recoverState(leak)
        L = [leak[i] for i in range(100)]
        prng = Random()
        guess1, guess2 = backfirst(state)
        print(guess1, guess2)
        state[0] = guess1
        s = state
        prng.setstate((3, tuple(s + [0]), None))
        g1 = [prng.getrandbits(1) for i in range(100)]
        if g1 == L:
            print("first")
            prng.setstate((3, tuple(s + [0]), None))
            return prng
        state[0] = guess2
        s = state
        prng.setstate((3, tuple(s + [0]), None))
        g2 = [prng.getrandbits(1) for i in range(100)]
        if g2 == L:
            print("second")
            prng.setstate((3, tuple(s + [0]), None))
            return prng
    def test():
        length = 19968
        prng = Random()
        originState = prng.getstate()
        leak = vector(GF(2), [prng.getrandbits(1) for i in range(length)])
        # 恢复state
        state = recoverState(leak)
        prng.setstate(originState)
        prng.getrandbits(1)
        originState = [x for x in prng.getstate()[1][:-1]]
        # 成功恢复623个state
        print(originState[1:] == state[1:])
        # 获取泄露信息
        L = [leak[i] for i in range(100)]
        # 两种可能
        guess1, guess2 = backfirst(state)
        print(guess1, guess2)
        state[0] = guess1
        s = state
        prng.setstate((3, tuple(s + [0]), None))
        g1 = [prng.getrandbits(1) for i in range(100)]
        if g1 == L:
            print("first")
            prng.setstate((3, tuple(s + [0]), None))
            now = vector(GF(2), [prng.getrandbits(1) for i in range(length)])
            if now == leak:
                print("true")
                return
        state[0] = guess2
        s = state
        prng.setstate((3, tuple(s + [0]), None))
        g2 = [prng.getrandbits(1) for i in range(100)]
        if g2 == L:
            print("second")
            prng.setstate((3, tuple(s + [0]), None))
            now = vector(GF(2), [prng.getrandbits(1) for i in range(length)])
            if now == leak:
                print("true")
                return
    test()
大概需要6-7分钟可以构建完矩阵。
## 结语
本人水平有限，如有错误欢迎指出，希望大家能从中学到一些东西。