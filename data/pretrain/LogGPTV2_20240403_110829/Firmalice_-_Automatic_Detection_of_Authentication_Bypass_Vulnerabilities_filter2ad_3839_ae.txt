of ﬁrmware in embedded systems. It is a hybrid approach,
involving both the target physical device as well as an
emulator based on the selective symbolic execution engine
S2E [9]. Communication between the emulator and the target
is orchestrated in such a way that I/O operations can be
forwarded and executed on the actual hardware and interrupts
injected into the emulator. Arbitrary context switches are
also supported: execution can be started on the real device
and transfered to the emulator for analysis from a speciﬁc
point in the ﬁrmware. Returning execution to the hardware
is also supported. In both cases, the execution state is frozen
and transferred from/to the hardware or the emulator. While
Avatar presents promising capabilities and support for reverse
engineering and vulnerability discovery, it requires access to
the physical hardware, either through a debugging interface,
or by installing a custom proxy in the target environment,
which is generally not possible, e.g., in the presence of locked
hardware. Our framework is an alternative to such hardware-
dependent approaches, by providing a model along with tools
for analyzing such ﬁrmware with no hardware requirements.
FIE [12] is a platform for detecting bugs in ﬁrmware
running on the MSP430 family of micro-controllers, mainly
focusing on memory safety issues. The source code of the
analyzed programs is compiled into LLVM bytecode, which
is then analyzed using a symbolic execution engine based
on KLEE [8]. The latter has been modiﬁed to support the
target 16-bit architecture, its memory speciﬁcation, and its
interrupt library. FIE supports hardware speciﬁc layouts of
memory and access to hardware through special memory.
It also considers the execution of enabled interrupts at any
given point in the program. It performs complete analysis of
ﬁrmware images (i.e., all possible execution paths are taken).
In order to achieve this without falling into inﬁnite loops or
state explosion, state pruning is used, removing redundant
(equivalent) states from the list of states to explore, and
memory smudging is used to concretize variables with respect
to a given ﬁnite set of values. FIE is limited to analyzing
small ﬁrmware written in C, for which the source code is
available. In comparison, our current work is not bound to
any speciﬁc architecture (in fact, our symbolic execution
engine currently supports multiple architectures) and works
directly on binary code with no source code requirement.
Recent advancements have also been made in the ﬁeld
of automated ﬁrmware analysis. Costin et al. [10] carried
out an analysis of over 30,000 ﬁrmware samples. However,
their system performs no in-depth analysis: it instead extracts
each ﬁrmware sample and investigates it for artifacts such
as included private encryption keys and “known-bad” strings
(i.e., known values of hardcoded authentication credentials).
This latter action makes the system quite well-suited for
discovering backdoors in devices whose ﬁrmware shares
a codebase with devices that have known backdoors, but
not for in-depth analysis of individual ﬁrmware samples.
With a further investment into analysis automation, Costin’s
system could be used as an input to Firmalice, allowing for
large-scale, automated, in-depth ﬁrmware analysis.
XII. CONCLUSION
We presented Firmalice, a framework for detecting
authentication bypass vulnerabilities in binary ﬁrmware, for
which no source code, and possibly no access to the underlying
hardware,
is available. Additionally, we have presented a
model of authentication bypass vulnerabilities (or backdoors),
based on the concept of input determinism and have shown that
Firmalice is capable of successfully detecting such vulnerabil-
ities in the ﬁrmware of two commercially-available systems.
Finally, we have demonstrated that current techniques for iden-
tifying authentication bypass in ﬁrmware, which are mostly
limited to manual analysis, are error-prone and insufﬁcient.
Acknowledgements. This work is sponsored by DARPA
under agreement number N66001-13-2-4039 and by the
ARO through MURI grant W911NF-09-1-0553. The U.S.
Government is authorized to reproduce and distribute reprints
for Governmental purposes notwithstanding any copyright
notation thereon.
Additionally, we would like to thank Timon Van Overveldt
for his assistance with the selection, extraction, and initial
analysis of ﬁrmware samples.
REFERENCES
[1] 86,800 network printers open to the whole Internet. http://nakedsecurity.
sophos.com/2013/01/29/86800-printers-open-to-internet/.
[2] CVE-2012-4964.
CVE-2012-4964.
http://cve.mitre.org/cgi-bin/cvename.cgi?name=
[3] Re:
ION Meter Security.
http://www.powerlogic.com/literature/
IONMeterCyberSecurityApril2012.pdf.
[4] Vetting
Commodity
IT
Software
and
Firmware
(VET).
http://www.darpa.mil/Our_Work/I2O/Programs/Vetting_Commodity_
IT_Software_and_Firmware_(VET).aspx.
[5] Akos Kiss, Judit Jasz, Gabor Lehotai, and Tibor Gyimothy. Interproce-
dural static slicing of binary executables. In Source Code Analysis and
Manipulation, pages 118–127. IEEE, 2003.
[6] Arstechnica.
Bizarre Attack Infects Linksys Routers With Self-
http://arstechnica.com/security/2014/02/
Replicating Malware, 2014.
bizarre-attack-infects-linksys-routers-with-self-replicating-malware/.
[7] Babi´c, Domagoj and Martignoni, Lorenzo and McCamant, Stephen and
Song, Dawn. Statically-directed dynamic automated test generation. In
Proceedings of the 2011 International Symposium on Software Testing
and Analysis, pages 12–22. ACM, 2011.
[8] Cadar, Cristian and Dunbar, Daniel and Engler, Dawson R. KLEE:
Unassisted and automatic generation of high-coverage tests for complex
systems programs. In Proceedings of OSDI, volume 8, pages 209–224,
2008.
[9] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: A platform for
SIGPLAN Not.,
in-vivo multi-path analysis of software systems.
47(4):265–278, Mar. 2011.
[10] A. Costin, J. Zaddach, A. Francillon, D. Balzarotti, and S. Antipolis.
A large-scale analysis of the security of embedded ﬁrmwares.
[11] Craig Heffner.
Finding and Reversing Backdoors in Consumer
http://www.devttys0.com/wp-content/uploads/2014/04/
Firmware.
FindingAndReversingBackdoors.pdf.
[12] D. Davidson, B. Moench, S. Jha, and T. Ristenpart. FIE on ﬁrmware:
ﬁnding vulnerabilities in embedded systems using symbolic execution.
In Proceedings of the USENIX Security Symposium, pages 463–478.
USENIX Association, 2013.
13
[14]
[13] L. De Moura and N. Bjørner. Z3: An efﬁcient smt solver.
In Tools
and Algorithms for the Construction and Analysis of Systems, pages
337–340. Springer, 2008.
/dev/ttypS0. Finding and Reverse Engineering Backdoors in Consumer
Firmware, 2014.
http://www.devttys0.com/wp-content/uploads/2014/
04/FindingAndReversingBackdoors.pdf.
/dev/ttyS0. From China, With Love, 2013. http://www.devttys0.com/
2013/10/from-china-with-love/.
/dev/ttyS0. Reverse Engineering a D-Link Backdoor, 2013.
http:
//www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/.
[17] T. Dullien and S. Porst. REIL: A platform-independent intermediate
analysis.
representation of disassembled code
CanSecWest, 2009.
static
code
[15]
[16]
for
[18] Forbes.
When “Smart Homes” Get Hacked:
Complete Stranger’s House Via The
//www.forbes.com/sites/kashmirhill/2013/07/26/smart-homes-hack/.
Internet, 2013.
I Haunted A
http:
[19] C. Kruegel, W. K. Robertson, F. Valeur, and G. Vigna.
Static
In Proceedings of the USENIX
disassembly of obfuscated binaries.
Security Symposium, 2004.
[20] C. Lattner and V. Adve.
LLVM: A compilation framework for
In Proceedings of the
lifelong program analysis & transformation.
International Symposium on Code Generation and Optimization
(CGO), pages 75–86. IEEE, 2004.
[21] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized
program analysis tools with dynamic instrumentation. In Proceedings
of the ACM SIGPLAN Conference on Programming Language Design
and Implementation, (PLDI), 2005.
[22] P. Mag. U.S. Barely Cracks List of Countries With Top Wi-Fi Pene-
tration, 2012. http://www.pcmag.com/article2/0,2817,2402672,00.asp.
[23] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. ACM Sigplan Notices, 42(6):89–100,
2007.
[24] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David
Brumley. Unleashing mayhem on binary code. In Proceedings of the
IEEE Symposium on Security and Privacy, pages 380–394. IEEE, 2012.
[25] R. Santamarta. Here be backdoors: A journey into the secrets of
industrial ﬁrmware. In BlackHat, 2012.
[26] F. Schuster and T. Holz. Towards reducing the attack surface of
software backdoors. In Proceedings of the ACM SIGSAC Conference
on Computer & Communications Security, (CCS), pages 851–862,
New York, NY, USA, 2013. ACM.
[27] Y. Shoshitaishvili.
PyVEX - Python bindings
for VEX IR.
http://github.com/zardus/pyvex.
[28] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena. BitBlaze: A new
approach to computer security via binary analysis. In Proceedings of
the International Conference on Information Systems Security, ICISS,
Berlin, Heidelberg, 2008. Springer-Verlag.
[29] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David
Brumley. AEG: Automatic Exploit Generation. In Proceedings of the
network and Distributed System Security Symposium, Feb. 2011.
[30] Tok, Teck Bok and Guyer, Samuel Z and Lin, Calvin. Efﬁcient
ﬂow-sensitive interprocedural data-ﬂow analysis in the presence of
pointers. In Compiler Construction, pages 17–31. Springer, 2006.
[31] Tripwire.
SOHO Wireless
Router
(In)security,
2014.
http://www.tripwire.com/register/soho-wireless-router-insecurity/.
[32] L. Xu, F. Sun, and Z. Su. Constructing precise control ﬂow graphs
from binaries, 2010.
[33] Zaddach, Jonas and Bruno, Luca and Francillon, Aurelien and
AVATAR: A framework to support dynamic
Balzarotti, Davide.
In Proceedings
security analysis of embedded systems’ ﬁrmwares.
of the Network and Distributed System Security Symposium, 2014.
http://www.eurecom.fr/publication/4158.
[34] D. Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall. TaintEraser:
protecting sensitive data leaks using application-level taint tracking.
ACM SIGOPS Operating Systems Review, 45(1):142–154, 2011.
14
APPENDIX A
IR TRANSLATION
Because ﬁrmware is made for devices with widely diverse
architectures, ﬁrmware analysis systems must be able to carry
out their analysis in the context of many different hardware
platforms. To address this challenge, Firmalice translates the
machine code of different architectures into an intermediate
representation, or IR. The IR must abstract away several archi-
tecture differences when dealing with different architectures:
Register names. The quantity and names of registers differ
between architectures, but modern CPU designs hold to
a common theme: each CPU contains several general
purpose registers, a register to hold the stack pointer,
a set of registers to store condition ﬂags, and so forth.
The IR must provide a consistent, abstracted interface to
registers on different platforms.
Memory access. Different architectures access memory in
different ways. For example, ARM can access memory
in both little-endian and big-endian modes. The IR must
be able to abstract away these differences.
Memory segmentation. Some architectures, such as x86,
which is beginning to be used in embedded applications,
support memory segmentation through the use of special
segment registers. The chosen IR needs to be able to
model such memory access mechanisms.
Instruction side-effects. Most instructions have side-effects.
For example, most operations in Thumb mode on
ARM update the condition ﬂags, and stack push/pop
instructions update the stack pointer. Tracking these
side-effects in an ad hoc manner in the analysis would be
error-prone, so the IR should make these effects explicit.
There are many existing intermediate representations avail-
able for use, including REIL [17], LLVM IR [20], and VEX,
the IR of the Valgrind project [23]. We decided to utilize VEX
due to its ability to address our IR requirements and an active
and helpful developer community. However, our approach
would work with any intermediate representation. To reason
about VEX IR in Python, we implemented Python bindings
for libVEX. We have open-sourced these bindings [27] in the
hope that they will be useful for the community.
VEX is an architecture-agnostic representation of a number
of target machine languages, of which the x86, AMD64, PPC,
PPC64, MIPS, MIPS64, ARM (in both ARM and Thumb
mode), ARM64, and S390X architectures are supported. VEX
abstracts machine code into a representation designed to make
program analysis easier by modeling instructions in a uniﬁed
way, with explicit modeling of all
instruction side-effects.
This representation has four main classes of objects.
Expressions. IR Expressions
calculated or
constant value. This includes values of memory loads,
register reads, and results of arithmetic operations.
Operations. IR Operations describe a modiﬁcation of IR
Expressions. This includes integer arithmetic, ﬂoating-
point arithmetic, bit operations, and so forth. An IR
Operation applied to IR Expressions yields an IR
Expression as a result.
Temporary variables. VEX uses “temporary variables” as
internal registers: IR Expressions are stored in temporary
variables between use. The content of a temporary
represent
a
variable can be retrieved using an IR Expression.
Statements. IR Statements model changes in the state of
the target machine, such as the effect of memory stores
and register writes. IR Statements use IR Expressions
for values they may need. For example, a memory store
statement uses an IR Expression for the target address
of the write, and another IR Expression for the content.
Blocks. An IR Block is a collection of IR Statements, repre-
senting an extended basic block in the target architecture.
A block can have several exits. For conditional exits from
the middle of a basic block, a special “Exit” IR Statement
is used. An IR Expression is used to represent the target
of the unconditional exit at the end of the block.
Relevant IR Expressions and IR Statements for an analysis
are detailed in Tables III and IV.
The IR translation of an example ARM instruction
is presented in Table V. In the example,
the subtraction
operation is translated into a single IR block comprising 5 IR
Statements, each of which contains at least one IR Expression.
Register names are translated into numerical indices given to
the GET Expression and PUT Statement. The astute reader
will observe that the actual subtraction is modeled by the ﬁrst
4 IR Statements of the block, and the incrementing of the
program counter to point to the next instruction (which, in this
case, is located at 0x59FC8) is modeled by the last statement.
IR Expression
Constant
Read Temp
Get Register
Load Memory
Operation
If-Then-Else
Helper Function
Evaluated Value
A constant value.
The value stored in a VEX temporary variable.
The value stored in a register.
The value stored at a memory address, with the address
speciﬁed by another IR Expression.
A result of a speciﬁed IR Operation, applied to speciﬁed
IR Expression arguments.
If a given IR Expression evaluates to 0, return one IR
Expression. Otherwise, return another.
VEX uses C helper functions for certain operations, such
as computing the conditional ﬂags registers of certain
architectures. These functions return IR Expressions.
TABLE III: A list of relevant VEX IR Expressions for
Firmalice’s analysis.
IR Statement
Write Temp
Put Register
Store Memory
Exit
Effect
Set a VEX temporary variable to the value of the given IR
Expression.
Update a register with the value of the given IR Expression.
Update a location in memory, given as an IR Expression,
with a value, also given as an IR Expression.
A conditional exit from a basic block, with the jump target
speciﬁed by an IR Expression. The condition is speciﬁed
by an IR Expression.
TABLE IV: A list of
Firmalice’s analysis and their effects on the ﬁrmware state.
relevant VEX IR Statements for
ARM Assembly
subs R2, R2, #8
VEX Representation
t0 = GET:I32(16)
t1 = 0x8:I32
t3 = Sub32(t0,t1)
PUT(16) = t3
PUT(68) = 0x59FC8:I32
TABLE V: An example of a VEX IR translation of a machine
code instruction located at 0x59FC4. VEX converts register
names to numerical identiﬁers: 16 refers to R2 and 68 refers
to the program counter.
15