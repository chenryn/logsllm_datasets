PS C:\Tools> net group "Sales Department" /domain
The request will be processed at a domain controller for domain corp.com.
Group name Sales Department
Comment
Members
-------------------------------------------------------------y------------------
pete stephanie
The command completed successfully.
k
Listing 715 - Running “net group” to display members in specific group
This reveals that pete and stephanie are members of thes Sales Department group.
Although this doesn’t seem to reveal much, each small piece of information gained through
enumeration is potentially valuable. In a real-worldo assessment, we might enumerate each group,
cataloging the results. This will require good organization, which we’ll discuss later, but we’ll move
on for now as we have more flexible alternatives to net.exe to discuss in the next section.
n
21.2.2 Enumerating Active Directory using PowerShell and .NET
Classes i
z
There are several tools we can use to enumerate Active Directory. PowerShell cmdlets like Get-
ADUser1016 work well but thDey are only installed by default on domain controllers as part of the
Remote Server Administration Tools (RSAT).1017 RSAT is very rarely present on clients in a domain
and we must have administrative privileges to install them. While we can, in principle, import the
DLL required for enumeration ourselves, we will look into other options.
We’ll develop a tool that requires only basic privileges and is flexible enough to use in real-world
engagements. We will mimic the queries that occur as part of AD’s regular operation. This will
help us understand the basic concepts used in the pre-built tools we’ll use later.
Specifically, we’ll use PowerShell and .NET classes to create a script that enumerates the domain.
Although PowerShell development can seem complex, we’ll take it one step at a time.
In order to enumerate AD, we first need to understand how to communicate with the service.
Before we start building our script, let’s discuss some theory.
1015 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups
1016 (Microsoft), https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2022-ps
1017 (Microsoft, 2022), https://learn.microsoft.com/en-us/troubleshoot/windows-server/system-management-components/remote-
server-administration-tools
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 694
Made in Morocco
Penetration Testing with Kali Linux
AD enumeration relies on LDAP. When a domain machine searches for an object, like a printer, or
when we query user or group objects, LDAP is used as the communication channel for the query.
In other words, LDAP is the protocol used to communicate with Active Directory.
LDAP is not exclusive to AD. Other directory services use it as well.
LDAP communication with AD is not always straight-forward, but we’ll leverage an Active
Directory Services Interface (ADSI)1018 (a set of interfaces built on COM1019) as an LDAP provider.
According to Microsoft’s documentation,1020 we need a specific LDAP ADsPath in order to
communicate with the AD service. The LDAP path’s prototype looks like this:
y
LDAP://HostName[:PortNumber][/DistinguishedName]
Listing 716 - LDAP path format
k
We need three parameters for a full LDAP path: HostName, PortNumber, and a
DistinguishedName. Let’s take a moment to break this down.
s
The Hostname can be a computer name, IP address or a domain name. In our case, we are
working with the corp.com domain, so we couldo simply add that to our LDAP path and likely
obtain information. Note that a domain may have multiple DCs, so setting the domain name could
potentially resolve to the IP address of any DC in the domain.
n
While this would likely still return valid information, it might not be the most optimal enumeration
approach. In fact, to make our enumeration as accurate as possible, we should look for the DC
i
that holds the most updated information. This is known as the Primary Domain Controller
z
(PDC).1021 There can be only one PDC in a domain. To find the PDC, we need to find the DC
holding the PdcRoleOwner property. We’ll eventually use PowerShell and a specific .NET class to
find this. D
The PortNumber for the LDAP connection is optional as per Microsoft’s documentation. In our
case we will not add the port number since it will automatically choose the port based on whether
or not we are using an SSL connection. However, it is worth noting that if we come across a
domain in the future using non-default ports, we may need to manually add this to the script.
Lastly, a DistinguishedName (DN)1022 is a part of the LDAP path. A DN is a name that uniquely
identifies an object in AD, including the domain itself. If we aren’t familiar with LDAP, this may be
somewhat confusing so let’s go into a bit more detail.
In order for LDAP to function, objects in AD (or other directory services) must be formatted
according to a specific naming standard.1023 To show an example of a DN, we can use our
1018 (Microsoft, 2020), https://learn.microsoft.com/en-us/windows/win32/adsi/active-directory-service-interfaces-adsi
1019 (Microsoft, 2019), https://learn.microsoft.com/en-us/windows/win32/com/com-objects-and-interfaces
1020 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/win32/adsi/ldap-adspath?redirectedfrom=MSDN
1021 (Microsoft, 2021), https://learn.microsoft.com/en-GB/troubleshoot/windows-server/identity/fsmo-roles
1022 (Microsoft, 2018), https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/distinguished-names
1023 (rfc-editor.org, 1998), https://www.rfc-editor.org/rfc/rfc2247.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 695
Made in Morocco
Penetration Testing with Kali Linux
stephanie domain user. We know that stephanie is a user object within the corp.com domain. With
this, the DN may (although we cannot be sure yet) look something like this:
CN=Stephanie,CN=Users,DC=corp,DC=com
Listing 717 - Example of a Distinguished Name
The Listing above shows a few new references we haven’t seen earlier in this Module, such as CN
and DC. The CN is known as the Common Name, which specifies the identifier of an object in the
domain. While we normally refer to “DC” as the Domain Controller in AD terms, “DC” means
Domain Component when we are referring to a Distinguished Name. The Domain Component
represents the top of an LDAP tree and in this case we refer to it as the Distinguished Name of
the domain itself.
When reading a DN, we start with the Domain Component objects on the right side and move to
the left. In the example above, we have four components, starting with two components named
y
DC=corp,DC=com. The Domain Component objects as mentioned above represent the top of an
LDAP tree following the required naming standard.
k
Continuing through the DN, CN=Users represents the Common Name for the container where the
user object is stored (also known as the parent container). Finally, all the way to the left,
s
CN=Stephanie represents the Common Name for the user object itself, which is also lowest in the
hierarchy.
o
In our case for the LDAP path, we are interested in the Domain Component object, which is
DC=corp,DC=com. If we added CN=Users to our LDAP path, we would restrict ourselves by only
n
being able to search objects within that given container.
Let’s begin writing our script by obtaining the required hostname for the PDC.
i
z
In the Microsoft .NET classes related to AD,1024 we find the
System.DirectoryServices.ActiveDirectory namespace. While there are a few classes to choose
from here, we’ll focus onD the Domain Class.1025 It specifically contains a reference to the
PdcRoleOwner in the properties, which is exactly what we need. By checking the methods, we find
a method called GetCurrentDomain(), which will return the domain object for the current user, in
this case stephanie.
To invoke the Domain Class and the GetCurrentDomain method, we’ll run the following command
in PowerShell:
PS C:\Users\stephanie>
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
Forest : corp.com
DomainControllers : {DC1.corp.com}
Children : {}
DomainMode : Unknown
DomainModeLevel : 7
Parent :
PdcRoleOwner : DC1.corp.com
1024 (Microsoft, 2022), https://learn.microsoft.com/en-us/dotnet/api/
1025 (Microsoft), https://learn.microsoft.com/en-
us/dotnet/api/system.directoryservices.activedirectory.domain?view=windowsdesktop-7.0
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 696
Made in Morocco
Penetration Testing with Kali Linux
RidRoleOwner : DC1.corp.com
InfrastructureRoleOwner : DC1.corp.com
Name : corp.com
Listing 718 - Domain class from System.DirectoryServices.ActiveDirectory namespace
The output reveals the PdcRoleOwner property, which in this case is DC1.corp.com. While we can
certainly add this hostname directly into our script as part of the LDAP path, we want to automate
the process so we can also use this script in future engagements.
Let’s do this one step at a time. First, we’ll create a variable that will store the domain object, then
we will print the variable so we can verify that it still works within our script. The first part of our
script is listed below:
# Store the domain object in the $domainObj variable
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
y
# Print the variable
$domainObj
k
Listing 719 - Storing domain object in our first variable
In order to run the script, we must bypass the executiosn policy, which was designed to keep us
from accidentally running PowerShell scripts. We’ll do this with powershell -ep bypass:
o
PS C:\Users\stephanie> powershell -ep bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
n
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
i
z
PS C:\Users\stephanie>
Now let’s run our script and verify that it prints the domain object:
D
PS C:\Users\stephanie> .\enumeration.ps1
Forest : corp.com
DomainControllers : {DC1.corp.com}
Children : {}
DomainMode : Unknown
DomainModeLevel : 7
Parent :
PdcRoleOwner : DC1.corp.com
RidRoleOwner : DC1.corp.com
InfrastructureRoleOwner : DC1.corp.com
Name : corp.com
Listing 720 - Output displaying information stored in our first variable
Our domainObj variable now holds the information about the domain object. Although this print
statement isn’t required, it’s a nice way to verify that our command and the variable worked as
intended.
Since the hostname in the PdcRoleOwner property is required for our LDAP path, we can extract
the name directly from the domain object. In case we need more information from the domain
object later in our script, we will keep the $domainObj for the time being and create a new variable
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 697
Made in Morocco
Penetration Testing with Kali Linux
called $PDC, which will extract the value from the PdcRoleOwner property held in our $domainObj
variable:
# Store the domain object in the $domainObj variable
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
# Store the PdcRoleOwner name to the $PDC variable
$PDC = $domainObj.PdcRoleOwner.Name
# Print the $PDC variable
$PDC
Listing 721 - Adding the $PDC variable to our script and extracting PdcRoleOwner name to it
Now let’s run the script again and inspect the output:
PS C:\Users\stephanie> .\enumeration.ps1 y
DC1.corp.com
Listing 722 - Printing the $PDC variable
k
In this case we have dynamically extracted the PDC from the PdcRoleOwner property by using the
Domain Class. Good.
s
While we can also get the DN for the domain via the domain object, it does not follow the naming
standard required by LDAP. In our example, we konow that the base domain is corp.com and the
DN would in fact be DC=corp,DC=com. In this instance, we could grab corp.com from the Name
property in the domain object and tell PowerShell to break it up and add the required DC=
n
parameter. However, there is an easier way of doing it, which will also make sure we are obtaining
the correct DN.
i
We can use ADSI directly in PowerShell to retrieve the DN. We’ll use two single quotes to indicate
z
that the search starts at the top of the AD hierarchy.
PS C:\Users\stephanie> ([Dadsi]'').distinguishedName
DC=corp,DC=com
Listing 723 - Using ADSI to obtain the DN for the domain
This returns the DN in the proper format for the LDAP path.
Now we can add a new variable in our script that will store the DN for the domain. To make sure
the script still works, we’ll add a print statement and print the contents of our new variable:
# Store the domain object in the $domainObj variable
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
# Store the PdcRoleOwner name to the $PDC variable
$PDC = $domainObj.PdcRoleOwner.Name
# Store the Distinguished Name variable into the $DN variable
$DN = ([adsi]'').distinguishedName
# Print the $DN variable
$DN
Listing 724 - Creating a new variable holding the DN for the domain
Let’s run the script.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 698
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\stephanie> .\enumeration.ps1
DC=corp,DC=com
Listing 725 - Using our script to print the DN of the domain
At this point, we are dynamically obtaining the Hostname and the DN with our script. Now we
must assemble the pieces to build the full LDAP path. To do this, we’ll add a new $LDAP variable
to our script that will contain the $PDC and $DN variables, prefixed with “LDAP://”.
The final script generates the LDAP shown below. Note that in order to clean it up, we have
removed the comments. Since we only needed the PdcRoleOwner property’s name value from the
domain object, we add that directly in our $PDC variable on the first line, limiting the amount of
code required:
$PDC =
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Nam
y
e
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN" k
$LDAP
Listing 726 - Script which will create the full LDAP path required for enumeration
s
Let’s run the script.
o
PS C:\Users\stephanie> .\enumeration.ps1
LDAP://DC1.corp.com/DC=corp,DC=com
Listing 727 - Script output showing the full LDAP path
n
Great! We have successfully used .NET classes and ADSI to dynamically obtain the full LDAP path
required for our enumeration. Also, our script is dynamic, so we can easily reuse it in real-world
i
engagements.
z
21.2.3 Adding Search Functionality to our Script
D
So far, our script builds the required LDAP path. Now we can build in search functionality.
To do this, we will use two .NET classes that are located in the System.DirectoryServices
namespace, more specifically the DirectoryEntry1026 and DirectorySearcher1027 classes. Let’s
discuss these before we implement them.
The DirectoryEntry class encapsulates an object in the AD service hierarchy. In our case, we want
to search from the very top of the AD hierarchy, so we will provide the obtained LDAP path to the
DirectoryEntry class.
One thing to note with DirectoryEntry is that we can pass it credentials to
authenticate to the domain. However, since we are already logged in, there is no
need to do that here.
1026 (Microsoft), https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directoryentry?view=dotnet-plat-ext-6.0
1027 (Microsoft), https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher?view=dotnet-plat-ext-6.0
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 699
Made in Morocco
Penetration Testing with Kali Linux
The DirectorySearcher class performs queries against AD using LDAP. When creating an instance
of DirectorySearcher, we must specify the AD service we want to query in the form of the
SearchRoot1028 property. According to Microsoft’s documentation, this property indicates where
the search begins in the AD hierarchy. Since the DirectoryEntry class encapsulates the LDAP path
that points to the top of the hierarchy, we will pass that as a variable to DirectorySearcher.
The DirectorySearcher documentation lists FindAll(),1029 which returns a collection of all the entries
found in AD.
Let’s implement these two classes into our script. The code below shows the relevant part of the
script:
$PDC =
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Nam
e
y
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN"
k
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
s