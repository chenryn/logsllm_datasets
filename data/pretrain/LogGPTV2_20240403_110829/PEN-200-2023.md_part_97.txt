### 21.2.1 Enumerating Group Members Using `net group`

To list the members of a specific group, such as the "Sales Department" group, in a domain, you can use the `net group` command:

```powershell
PS C:\Tools> net group "Sales Department" /domain
```

The output will be processed by a domain controller for the `corp.com` domain.

#### Output:
```
Group name: Sales Department
Comment:
Members
-------------------------------------------------------------
pete
stephanie
The command completed successfully.
```

**Listing 715 - Running `net group` to display members in a specific group**

This command reveals that `pete` and `stephanie` are members of the "Sales Department" group. Although this information may seem limited, each piece of data gathered through enumeration is potentially valuable. In a real-world assessment, you might enumerate each group and catalog the results, which requires good organization. We will discuss this later, but for now, we will move on to more flexible alternatives to `net.exe`.

### 21.2.2 Enumerating Active Directory Using PowerShell and .NET Classes

There are several tools available for enumerating Active Directory, including PowerShell cmdlets like `Get-ADUser`. However, these cmdlets are only installed by default on domain controllers as part of the Remote Server Administration Tools (RSAT). RSAT is rarely present on client machines in a domain, and administrative privileges are required to install it. While it is possible to import the necessary DLLs manually, we will explore other options.

We will develop a tool that requires only basic privileges and is flexible enough for real-world engagements. Our tool will mimic the queries that occur as part of AD's regular operation, helping us understand the basic concepts used in pre-built tools.

#### LDAP and ADSI

Active Directory enumeration relies on LDAP (Lightweight Directory Access Protocol). When a domain machine searches for an object, such as a printer, or when we query user or group objects, LDAP is the communication channel used for the query. LDAP is not exclusive to AD; other directory services also use it.

LDAP communication with AD can be complex, but we can leverage the Active Directory Services Interface (ADSI), a set of interfaces built on COM, as an LDAP provider. According to Microsoftâ€™s documentation, we need a specific LDAP ADsPath to communicate with the AD service. The LDAP path format is:

```
LDAP://HostName[:PortNumber][/DistinguishedName]
```

**Listing 716 - LDAP path format**

We need three parameters for a full LDAP path: `HostName`, `PortNumber`, and `DistinguishedName`.

- **HostName**: This can be a computer name, IP address, or domain name. For the `corp.com` domain, we can use the domain name directly.
- **PortNumber**: This is optional. If not specified, the port will be chosen based on whether an SSL connection is used.
- **DistinguishedName (DN)**: A DN uniquely identifies an object in AD, including the domain itself. For example, the DN for a user `stephanie` in the `corp.com` domain might look like this:

  ```
  CN=Stephanie,CN=Users,DC=corp,DC=com
  ```

  **Listing 717 - Example of a Distinguished Name**

  - **CN (Common Name)**: Specifies the identifier of an object in the domain.
  - **DC (Domain Component)**: Represents the top of an LDAP tree. In this case, `DC=corp,DC=com` represents the domain itself.

#### Finding the Primary Domain Controller (PDC)

To make our enumeration as accurate as possible, we should find the PDC, which holds the most updated information. We can use the `System.DirectoryServices.ActiveDirectory` namespace in .NET to find the PDC.

```powershell
$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = $domainObj.PdcRoleOwner.Name
$PDC
```

**Listing 718 - Storing the PDC in a variable**

Running this script will return the PDC, which in this case is `DC1.corp.com`.

#### Obtaining the Distinguished Name (DN)

We can use ADSI directly in PowerShell to retrieve the DN for the domain:

```powershell
$DN = ([adsi]'').distinguishedName
$DN
```

**Listing 723 - Using ADSI to obtain the DN for the domain**

This returns the DN in the proper format, `DC=corp,DC=com`.

#### Assembling the Full LDAP Path

Now, we can assemble the pieces to build the full LDAP path:

```powershell
$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN"
$LDAP
```

**Listing 726 - Script to create the full LDAP path**

Running this script will generate the full LDAP path:

```
LDAP://DC1.corp.com/DC=corp,DC=com
```

**Listing 727 - Script output showing the full LDAP path**

### 21.2.3 Adding Search Functionality to Our Script

Now that we have the full LDAP path, we can add search functionality using the `System.DirectoryServices` namespace, specifically the `DirectoryEntry` and `DirectorySearcher` classes.

- **DirectoryEntry**: Encapsulates an object in the AD service hierarchy. We will provide the obtained LDAP path to the `DirectoryEntry` class.
- **DirectorySearcher**: Performs queries against AD using LDAP. We will specify the `SearchRoot` property, which indicates where the search begins in the AD hierarchy.

Here is the relevant part of the script:

```powershell
$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
$DN = ([adsi]'').distinguishedName
$LDAP = "LDAP://$PDC/$DN"
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
```

This sets up the `DirectoryEntry` object, which we will use to perform searches in the next steps.

### Conclusion

By using .NET classes and ADSI, we have dynamically obtained the full LDAP path required for our enumeration. Our script is dynamic and can be easily reused in real-world engagements. In the next section, we will add search functionality to our script using the `DirectoryEntry` and `DirectorySearcher` classes.