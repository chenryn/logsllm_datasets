《智能家居安全——身份劫持》 
——作者：挽秋(daizy) 
1、概要 
本文以如何劫持(窃取)智能家居时代设备的身份“安全凭证”为出发点，调研并分析了目
前国内市场的主流产品和设备交互协议，及其所依赖身份凭证，通过介绍、分析和发现设备
交互控制协议安全性，最终通过身份劫持，实现相关设备和产品的任意远程控制。 
2、智能家居身份和劫持危害 
先通过一张简图来了解一下应用、智能设备和云端三者交互时携带的身份标识，如图 2.1
所示： 
图 2.1：智能家居设备交互时携带的身份标识 
从上图了解到，智能家居身份标识通常是以下几种情况： 
1）账号 cookie 相关，如身份 Token； 
2）用户 id：userid 
3）设备 id：deviceid 
4）认证或加密的 key 
一旦用户或设备的身份被劫持，那么至少存在如下几方面危害： 
1） 个人信息，聊天内容等隐私敏感信息泄露 
2） 智能设备被任意控制 
3） 财产损失 
4） 随时被监控 
以智能音箱和智能插座等设备为例，至少有两个环节设计“身份”相关： 
1） 账号同步 
2） 设备交互操作 
下面将分别介绍如何在这两个环节进行身份劫持。 
3、账号同步 
账号同步是指，在智能设备在初次激活使用(或更改绑定用户时)，用户将自己的身份信
息同步给设备，并绑定设备。 
一个简化的账号同步流程，如图 3.1 所示： 
APP
设备
1.设备id或key
2.用户身份(token)、wifi密码
Server
3.携带Token等信息进行请求
4.返回结果
图 3.1：账号同步 
账号同步通常会存在如下两类问题： 
1） 设备是否合法：验证设备 id 还是设备 key？id 和 key 都很容易泄露伪造。 
2） 账号 Token 如何安全传输：设备此时为入网，通过蓝牙、AP，还是其他何种方式传
输账号信息。 
账号同步时身份劫持 
以厂商 A 音箱的配网和身份账号同步为例，其账号同步分为两种方式： 
1）直接通过 UDP 广播 255.255.255.255:50000,发送 userid、token 和 wifi 的 ssid 和 wifi 密
码。 
2）将 userid、token、ssid 和 wifi 密码等转化成语音播放，音箱进行语音信息识别即可。 
关 于 两 种 模 式 的 选 择 ： 由 本 地 sharedPreferences 文 件 (tg_app_env.xml) 中 的
app_connect_mode 属性值决定，其账号同步代码如图 3.2 所示： 
图 3.2：厂商 A 音箱的账号同步 
厂商 A 的音箱将身份信息，通过固定“协议”的格式，在 UDP255.255.255.255:50000 端
口进行身份信息发送，攻击者可以监听 UDP50000 端口，从而获取用户的 userid 和 token，
窃取身份凭据；语音发送也是按照同一套固定的“协议”格式发送。协议格式通过破解后如
图 3.3 所示： 
整个
组长
度
厂商A音箱的身份信息广播格式，该byte数组一共有4个子数组，从左到
右分别是：userid、token、ssid和password相关
协议
类型
Userid
数组
长度
Token
数组
长度
SSID数
组长
度
Pwd数
组长
度
Byte0
Byte1
Byte2
Byte3
Byte4
Byte5
Byte6
Byte...
Byten
… … 
存储者Userid变化后byte数组：转
换格式：new byte=(byte&255)-32)
token、ssid和password
数组变换格式同userid
图 3.3：厂商 A 音箱的账号信息同步格式 
4、设备交互 
设备交互是指应用、设备和云端的三者交互访问；交互操作大体分为两种方式： 
1） 只支持广域网：厂商 A 为代表； 
2） 支持广域网和局域网：厂商 B 和 C 为代表。 
广域网应用与设备交互、设备与设备的交互方式如图 4.1 和 4.2 所示： 
App Server
SmartHome中心
1.APP操作播放音乐
2.播放音乐url
3.播放音乐url
4.音乐播放指令(directive)
智能音箱
图 4.1：应用和设备广域网交互 
SmartHome中心
第三方云
2.query
1.打开灯
3.控制协议:turn  ligth on
4.第三方开灯协议
5.返回操作结果
6.返回操作结果
帐户绑定：Oauth2.0
7.已开灯
智能音箱
图 4.2：设备和设备广域网交互 
厂商 A 的智能家居接入方式：已开灯为例 
第一步：厂商 A 的音箱音箱 server 
url：https://***.com/*** 
Payload:  { Uderid, Deviceid, Accesstoken, 打开灯的语音} 
第二步：厂商 A 的音箱 sever第三方 server 
用户需要在第三方产品 server 注册并通过 Oauth 授权给厂商 A 的 Server，消息格式如
下： 
｛ 
 "header":{ 
   “namespace”:”***Genie.Iot.Device.Control", 
      "name":"TurnOn", 
      "messageId":"1bd5d003-31b9-476f-ad03-71d471922820", 
      "payLoadVersion":1 
   }, 
   "payload":{ 
       "accessToken":"access token", 
       "deviceId":"34234", 
       "deviceType":"XXX", 
       "attribute":"powerstate", 
       "value":"on", 
       "extensions":{ 
          "extension1":"", 
          "extension2":"" 
       } 
} 
｝ 
第三步：第三方 server设备 
Payload：{command: turn-on, currentValue:0 } 
厂商 A 音箱的身份劫持 
厂商 A 的音箱每次交互时，都会携带: token、userid、deviceid、action 来进行，并且 server
会依据 userid 来进行身份判断。 
1）有了 userid 就可以身份劫持——远程设备任意操作； 
2）userId 是顺序的，可遍历的 9 位数字：比如一个 userid 是 50****123，另一个 userid
则是 50****397 这几位数字; 
3） userid 还有其他多种方式获得：配网时窃取、APP 端上获取； 
厂商 A 音箱被劫持后，可以用户查看聊天记录，自定义问答，设置闹钟、话费充值、智
能家居控制等等，此外音箱 “被分享”之后，宿主不能主动取消分享，只能等“攻击者”
取消分享，身份劫持危害如图 4.3 所示，中间的攻击者可以任意查看用户的聊天记录： 
图 4.3：厂商 A 音箱的身份劫持 
如何发现这类身份劫持？ 
应用或设备通过携带 4 元组信息：userid、deviceid、token 和 action，向云端进行请求
时，如图 4.4 所示，如果云端对 4 元组信息校验出现不一致的情况下，就会导致身份劫持： 
1） 把 userid、deviceid、token 三者信息中的一种直接当成用户身份，而不是进行严格
的身份一致性判断：判断 userid 和 token 是否一致，用户身份和设备列表是否是绑
定关系。 
2） 用户身份和 action 判断，存在逻辑漏洞，导致攻击者可以进行操作提权，比如子设
备提权可以操作“属主”身份的一些权限，OTA 更新等等。 
Userid
Token
Devicei
d
Action
APP/设备
云server
图 4.4: 4 元组访问请求 
局域网中应用与设备交互、设备与设备的交互方式如图 4.5 和 4.6 所示： 
1.UDP广播查询设备信息
局域网路由器
2.返回设备信息(IP、id、key等)
3.发送command指令
4.返回操作结果
智能音箱
图 4.5：应用和设备局域网交互 
SmartHome中心
第三方云
1.获取设备列表
6.打开灯
2.控制协议:获取设备信息
上传wifi信息、设备列表和IP及端口
3.返回设备信息
帐户绑定：Oauth2.0
4.下发设备信息
5.获取设备操作token
7. Token+action:Turn On
局域网路由器
智能音箱
图 4.6：设备和设备局域网交互 
厂商 B 的设备局域网身份劫持 
在同一局域网下，厂商 B 设备通过专有的加密 UDP 网络协议——miio 协议，进行通信控制。 
1）通过广播发送一个握手协议包，如果设备支持 miio 协议，那么设备就会回复自身信息：
token、ip 和 ID。 
2）向指定设备发送一串 hello bytes 获得设备信息结构体”header” 
3）凭借 token、ID 等信息构造信息结构体”header”，跟随控制消息发送给设备，实现设备控
制。 
厂商 B 的设备局域网身份劫持交互如图 4.7 所示： 
Hacker
厂
商
B
的
设
备
1.发送mirobo discover --handshake 1
4.返回控制消息结构体，其中header包含ts变量
3.发送hello bytes到设备54321端口
2.返回设备IP、ID、Token
5.构造结构体header和控制消息发送
6.设备返回执行结果
图 4.7：厂商 B 的设备局域网身份劫持交互 
第一步：安装 python-miio 库，然后执行：mirobo discover --handshake 1，获取设备 IP、ID 和
Token 信息。 
第二步：发送 hello bytes 消息给设备 54321 端口，获取设备消息结构体 Header： 
第三步：伪造控制消息结构体 Header、消息指令 cmd 和 checksum(Token)，给设备发送； 
typedef struct{ 
Header, 
cmd, 
checksum 
}Msg 
控制消息结构体如图 4.8 所示： 
图 4.8：厂商 B 的设备控制消息结构体 
已打开智能插座为例：cmd={'id':1,'method':'set_power','params':['on']} 