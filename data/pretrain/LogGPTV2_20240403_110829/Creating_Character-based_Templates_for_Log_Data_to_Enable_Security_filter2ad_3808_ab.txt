cluster in temporal order to sequentially refine the template, so that
the resulting template matches all log lines of the cluster. Finally,
we introduce the token_char algorithm which combines the token-
based and character-based approach to calculate character-based
templates.
4.1 Initial matching
Since a template is defined as a list of substrings that occur in
the same order in each log line of a cluster, a string-list character-
izes each template. In the following, the term block refers to these
strings.
Initially, the first template is equivalent to the temporal first
line of the cluster. Thus, the string-list consists of a single string
which is equal to the first log line of the cluster. Next, the algorithm
calculates the LV-distance between the initial template, which is
a string, and the second log line of the cluster. The string-list of
the template, which is equal to the first line, is now adapted to the
substrings shared with the second line according to the LV-distance.
Figure 3 illustrates how the first matching of log lines is accom-
plished. The green blocks represent the template before and after
the matching, and the blue block corresponds to the log line which
the current template is matched to. Additionally, Alg. 1 describes
the implementation of the initial matching, which is a combination
of the calculation of the LV-distance between two strings and a
modification of the commonly used backtrace procedure to com-
pute the alignment of two strings based on the resulting scoring
matrix of the LV-distance calculation [4]. The algorithm described
in Alg. 1 takes as input the scoring matrix of the LV-distance M and
the path in M that relates to the optimal alignment. For this, the
path is represented by the list of directions that have to be taken
through the scoring matrix during the backtrace procedure. In the
for loop, the algorithm extends the currently generated substring
with the currently processed character if the direction is diagonal
Figure 3: Initial matching.
and the compared strings have equal characters at the compared
position1. It ends the substring and appends an empty string to
list T , which represents the template, if the direction is up or down.
The latter is only done, if the last element of the list last(T) is not
an empty string. In the returned list of substrings T , empty strings
represent gaps, which are defined as wildcards for the text between
two blocks of a template.
if direction = diagonal then
x ← x + 1;
y ← y + 1;
if S1[x] = S2[y] then
last(T).append(S1[x]);
T .append(‘’);
Algorithm 1 String_String_Matching(S1, S2)
1: M ← LV_Matrix(S1, S2);
2: path ← Path in M from M[0][0] to M[len(S1)][len(S2)];
3: T ← [‘’];
4: x ← 0;
5: y ← 0;
6: for directions ∈ path do
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26: end for
27: return T
end if
y ← y + 1;
if last(T)! = ‘’ then
else if direction = down then
end if
x ← x + 1;
if last(T)! = ‘’ then
else if direction = right then
T .append(‘’);
end if
end if
else
T .append(‘’);
4.2 Merge algorithm
The merge algorithm is the most straightforward of the considered
algorithms. Figure 4 depicts the matching between a template and
a log line. First, the algorithm converts the template into a single
string by merging the blocks together, i.e., by concatenating the
strings in the list into a single string. Then, the LV-distance be-
tween this aggregated string and the log line is calculated. Thus,
the previous template is adapted, according to the LV-distance, so
that it matches also the new log line. Note, it is prohibited that the
algorithm deletes already existing gaps in the template, because if
1Note, the direction is also diagonal when a character should be replaced.
Figure 4: Merge algorithm matching: The green blocks repre-
sent the template, the upper blue block the merged template
and the lower blue block the log line.
this happens the template does not fit previously processed lines
anymore. However, gaps are not considered as mandatory, i.e. they
do not have to occur in all lines. Algorithm 2 describes the linear
procedure consisting of three steps: (i) merge the current template
T1 to a single string S1, (ii) use Alg. 1 to compute the alignment T2
between the merged template S1 and the log line S2, and (iii) ensure
that no gaps that existed in the previous template T1 are missing in
the resulting template T .
Algorithm 2 Merge(T1, S2)
1: S1 ← Merge_Template _to_String(T1);
2: T2 ← String_String_Matching(S1, S2);
3: T ← Align_Gaps(T1,T2);
4: return T
4.3 Length algorithm
The merge algorithm always calculates the LV-distance for a log
line and the current template, which results in a rather long runtime.
Hence, the length algorithm instead only calculates the LV-distance
for blocks and corresponding substrings of the log line. This re-
duces the runtime, because the length of the strings, for which the
algorithm calculates the LV-distance, is shorter.
The length algorithm processes the blocks in order of their
lengths, beginning with the longest one. Since the algorithm does
not process the blocks from left to right and calculates the LV-
distance between blocks of the template and corresponding sub-
strings of the log line, it first has to localize which block corresponds
to which part of the log line. The localization process is described in
more details later in this section. Processing the blocks in order of
their length prohibits that smaller blocks prevent larger ones from
becoming part of the new template, or to force the algorithm to
split them. Therefore, the template tends to include more characters
which results in a higher coverage, i.e., on average more characters
of the log lines are part of the template of the corresponding cluster.
Furthermore, longer blocks are considered more significant for a
cluster than shorter ones.
Figure 5 supports the description of the length algorithm. The
algorithm starts with the localization procedure. For that purpose,
it marks all blocks of the template that occur as identical substrings
in the log line, starting with the longest one. Figure 5 depicts this in
the first two lines by connecting block 1 and 3 with equal substrings
in the template. During the marking process, the algorithm does
not consider the whole line for all blocks, but only a valid section to
sustain the order of the blocks. For example, the second processed
block .lxcal in Fig 5, can only mark a substring in the section
.d03.arc.local.mysql-normal, because it has marked blocks to
the left and to the right. Empirical studies support to only consider
blocks consisting of more than two characters in this phase to avoid
that larger blocks are excluded from the resulting template. This
leads to templates of higher quality.
Once the algorithm marked all blocks of the template that identi-
cally occur as substrings in the log line, it processes the remaining
blocks of the template, again in the order of their lengths starting
with the longest. Lines three to five in Fig. 5 visualize this procedure.
Each unmarked block of the template is matched with the corre-
sponding section of the log line. As Fig. 5 illustrates, the matched
block gets either split or deleted according to the LV-distance. Af-
ter the matching, the substring that matched the block becomes a
marked section and is not further considered in the matching pro-
cess. For example, the algorithm matches the first processed block
.lxcal in the lower part of Fig 5 with the corresponding substring
.local. Thus, the algorithm marks this substring, which is illus-
trated by the dashed rectangle. Therefore, the algorithm matches
the third block with a shorter section than the first block.
Note, if at any point during this procedure two blocks have the
same size, the algorithm processes the leftmost one first. The fact
that similar log lines usually differ more from each other towards
the end, supports this decision. As Alg. 3 demonstrates, in opposite
to the merge algorithm, the input template is modified and returned
and not generated from scratch. Therefore, the gap alignment can be
omitted. The length algorithm consists of two for loops, one for the
marking process and a second one that matches unmarked blocks.
Hence, Alg. 3 applies Alg. 1 to match all blocks (str in the Alg. 3)
from the current template T1, that have not been marked yet, to cor-
responding substrings in log line S2. Once a substring of S2 has been
matched, it is marked so that no other block of T1 can be matched
to it. Algorithm 4 describes the function CORRESPONDING_SUBSTR.
It returns for a block of the template T[j] the corresponding sub-
string in log line S. Note, if there is no corresponding substring, the
algorithm returns an empty string.
if str ⊆ corresponding_substr(S2, str) then
Algorithm 3 Length(T1, S2)
1: for str ∈ T1 ordered by length do
2:
3:
4:
5: end for
6: for unmarked str ∈ T1 ordered by length do
7:
Mark str in T1 and S2;
replace
end if
str
with
String_String_Matching
(str, corresponding_substr(S2, str));
Mark the matched string in S2;
8:
9: end for
10: return T1
Because of the marking procedure of the length algorithm, the
algorithm has to calculate the LV-distance only for the remaining
unmarked blocks. Therefore, the runtime of the length algorithm is
significantly lower than the runtime of the merge algorithm, which
calculates the LV-distance for the whole template and log line.
Since the log lines are considered pre-clustered, they have a high
similarity, which means that the the marking process significantly
j ← Next smaller index of a marked block in T ;
m ← Index of last marked character of T[j] in S;
m ← 0;
Algorithm 4 corresponding_substring(S,T[i])
1: if ∃ marked block T[j] in T , with j  i then
k ← Next higher index of a marked block in T ;
8:
n ← Index of first marked character of T[k] in S;
9:
10: else
n ← len(S);
11:
12: end if
13: return S[m, n]
Figure 5: Length algorithm marking and matching: The
green blocks represent the template and the blue blocks the
log line. The upper part illustrates the marking. The lower
part visualizes the matching of the remaining blocks. The
horizontal brackets highlight the sections of the log line
which are matched with the blocks. The dashed rectangle in
the lower blue block represents the marked section which
originates from the matching with block 1 from above.
reduces the runtime. However, while the marking process reduces
the runtime, it might also reduce the quality of the template, because
the matching is optimized with respect to sections within the strings
and not globally over the whole strings. The evaluation discusses
this in Sec. 5.7.
4.4 Equalmerge algorithm
Figure 6 depicts the matching between a template and a log line
applying the equalmerge algorithm. The following algorithm com-
bines the features of the merge and the length algorithm. Equally
to the length algorithm, the equalmerge algorithm first marks the
blocks, which occur as substrings in the log line. After the marking,
the algorithm merges the blocks remaining between the marked
blocks of the template identical to the merge algorithm. The algo-
rithm merges the unmarked blocks according to their correspond-
ing section. Hence, for example, it merges in line three of Fig. 6
the remaining unmarked blocks between block 1 and block 2 from
line one to a single block. Finally, the newly created blocks are
matched with the related sections of the log line. These blocks are
split or gaps are included according to the LV-distance. Equally
to the merge algorithm, it is prohibited that the algorithm deletes
gaps.
Algorithm 5 and Alg. 3 show that the implementations of the
equalmerge and the length algorithm are similar to each other and
Figure 6: Equalmerge algorithm matching.
differ only in the second for loop. In the second for loop of the
equalmerge algorithm adjacent unmarked strings, i.e. unmarked
strings between marked stings, are aggregated to adj_strinдs. Af-
terwards, Alg. 2 is applied to compute the alignment (T3) between
adj_strinдs and the corresponding substring of the log line S2. Fi-
nally, alignment T3 replaces the strings in the current template T1
that have been aggregated to adj_strinдs.
Algorithm 5 Eqalmerge(T1, S2)
1: for str ∈ T1 ordered by length do
2:
3:
4:
5: end for
6: for unmarked str ∈ T1 do
7:
if str ⊆ corresponding_substr(S2, strinд) then
Mark str in T1 and S2;
cluding str itself;
adj_strinдs ← adjacent unmarked strings of str in T1 in-
T3 ← Merge(adj_strinдs, corresponding_substr(S2, str));
Replace adj_strinдs in T1 with T3;
Mark T3 and the matched string in S2;
end if
8:
9:
10:
11: end for
12: return T1
The equalmerge algorithm implements a refinement of the length
algorithm. Since it calculates the LV-distance between the merged
blocks of the template and the corresponding substring of the log
line, it has a slightly longer runtime than the length algorithm,
but simultaneously the resulting template inherits the higher qual-
ity of the merge algorithm. At the same time, the runtime of the
equalmerge algorithm is shorter than the one of the merge algo-
rithm, while the decrease of the quality of the template is smaller
than the one of the length algorithm.
4.5 Token_char algorithm
Since most template generators operate token-based, we developed
a hybrid approach, which should combine the advantages of both
token-based and character-based approaches. While, for example,
token-based templates are easier to convert into parser models,
character-based templates provide a more detailed description of
log line clusters and provide more accurate signatures. Thus, to
accomplish a hybrid template, we separate the template into two
layers. The first layer comprises the token-structure, which contains
the token-list that stores the tokens. The second layer composes the
character-structure. Therefore, a character-structure is assigned to
each gap, which contains a character-based template for the tokens
that are replaced by the gap. In the end, the token and the character
structure are merged to a character-based template.
Figure 7 depicts the procedure of the matching performed by the
token_char algorithm and supports the algorithm’s description. The
initial step of the token_char algorithm differs from the previous
algorithms. First, the algorithm converts all log lines of a cluster
into token-structures, i.e., lists of tokens. Therefore, the algorithm
splits the log lines into substrings at predefined delimiters. Hence,
this algorithm inherits the disadvantage of token-based template
generators, which have to split all log lines at the same delimiters,
whether it is useful or not. Next, between each token, a character-
structure is established which initially contains the corresponding
delimiter. Finally, the token-char-structure of the temporal first log
line represents the initial template.
The following describes the matching procedure between a