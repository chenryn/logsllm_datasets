33-40
9-16
1-8
SMAIL_REOUEST_THRESHOLD
Size of allocated block
256
(SMALL_REQUEST_THRESHOLD/ ALIGNMENT)
1Ynextoffset
ze
//DOo1指向了一块4kB的内存
->maxnextoffset
->szidx =size;
>ref.count=l;
struct pool_headerpooip
POOL_OVERHEAD
(pool->freeblock)=NuLL;
POOL_OVERHEAD+
图16-2改造成pool后的4kB内存
freeblock
POOLOVBRHEAD
(（x）
Size
szidx
并进行对齐
ROUNDUp(sizeof(struct pool_header))
POOL_OVERHEAD+SiZe+Size
Python源码剖析
bp
16.2小块空间的内存池
maxnextoffset
一深度探索动态语言核心技术
435
---
## Page 466
Python源码剖析
436
只是在机械地前进前进，这是因为它在等待一个特殊的时刻，在这个特殊的时刻，你会发
*freeblock的动作正是建立离散自由block链表的关键所在。目前我们看到的freeblock
还设置了*freeblock。这一个动作似乎非常诡异，然而我们马上就会看到，设置
这个机制就是所谓的自由block链表。这个链表的关键就着落在poo1_header中的那个
散的自由block，Python必须建立一种机制，将这些离散的自由block组织起来，再次使用。
block。可以想像，一旦Python运转起来，内存的释放动作将会导致pool中出现大量的离
第2块还是第6块block呢？很显然，为了pool的使用效率，最好再次分配自由的第2块
释放了其中第2和第4块block，那么下一次再分配32字节的内存时：pool提交的应该是
的内存分配，可以想像，pool中5个连续的block都被分配出去了。过了一段时间，程序
这样不容易理解，我们来考虑一个形象的例子。现在我们已经进行了5次连续的32字节
意味着一个pool中只能满足pooL_SIzE/size次对block的申请，这很难让人接受。如果
maxnextoffset时，也就意味着已经遍历完了pool中所有的block了。
可用的block距pool开始位置的便移，它界定了pool的边界，当nextoffset
反复，就可对所有的block进行一次遍历。而maxnextoffset指名了该pool中最后一个
在分配了block之后，freeblock和nextoffset都会向前移动一个block的距离，如此
向了freeblock之后的下一个可用的block的地址。从这里分配block的动作也可以看到，
行选代的变量：从初始化pool的结果及图16-2中可以看到，它所指示的偏移位置正好指
很显然，这时freeblock需要向前进，指向下一个可用的block。这时，nextoffset现身了
下一个可以分配出去的block的地址。然而奇特的是，Python在设置了freeblock之后，
freeblock身上。
以看得出。当再次申请32字节的block时，只需返回freebiock指向的地址就可以了，
[obmalloc.c]-[allocate block]
嗯，申请，前进，申请，前进，这个过程非常自然，也容易理解。但是且慢，这好像
第16章Python的内存管理机制
在poolheader中，nextoffset和maxoffset是两个用于对pol中的block集合进
刚才我们就说了，当pool初始化完成之后，freeblock指向了一个有效的地址，为
原来freeb1ock指向的是下一个可用的block的起始地址，这一点在图16-2中也可
if
一深度探索动态语言核心技术
bp=pool=>freeblook;
(pool
pool->nextoffset+=INDEx2SIzE(size);
(pool-
//有足够的block空间
pool
>nextpool)0
freeblock=(block*）p:
*(blaok**）p
(
next,prev;
freeblock
ADDRESS_IN RANGE(P.
lastfree;
N
图16-3释放了block之后产生的自由block链表
3
=lastfree
(poolp)((uptr)(P)&（uptr)POOLLSIZE_MASK))
释放block
4
5
POOl))
freeblock
NULL
NULL
pool->freeblock;
Python源码剖析
16.2小块空间的内存池
/[2]
(/[1]
深度探索动态语言核心技术
5
已分配的block
未分配的block
437
---
## Page 468
Python源码剖析
16.2.3
438
为ARENA_SIzE的符号控制，为256KB。那么很显然，一个arena中容纳的pool的个数就
值为4KB，同样，每个arena的大小都有一个默认的值。在Pyhon2.5中，这个值由名
#cefine ARENA_SIZE
中，存在一个pool的集合。
的block被用光了，最简单的解决方案就是：我给你另一个pool。这就意味着，在Python
都不成立了呢？嗨，老兄，别忘了，我们现在谈论的仅仅是一个pool，如果这个pool中
typedef uchar block;
[obmalloc.a]
[obmalloc.c]
当[2]处的判断为真时，表明已经不存在离散自由block链表了，如果可能，则会继续分配
代码清单16-2
本小节开始时我们剖析过的一般的block分配行为（见代码清单16-2）。
[obmalloc.c]-[allocate block]
好了，我们现在来看一看Python中的arena到底是个什么东西。
uintntotalpools;
uptr addrees;
arena
这里的代码清单16-2的[1]和[2]正是Python中freeb1ock=feeblock的实现方式
第16章Python的内存管理机制
一深度探索动态语言核心技术
pool_address;
(poo1l=pool->nextpoo1)
tpool->ref,count:
There is a used pool for this size class.
(pool->nextoffset maxmextoffset)(
(pool
DOLS
(256K10）/256KB/
//（=（d（a）
---
## Page 469
16.2.3.1
状态。
时刻是一个关键的时刻，Python从这个时刻一刀切下，将一个arena_object切分为两种
换句话说，arena_object和pool集合在某一时刻需要建立联系。注意，这个建立联系的
被申请了：但是当aerna_object被申请时，它所管理的pool集合的内存则没有被申请。
面隐藏着这样一个事实：当pool_header被申请时，它所管理的block集合的内存一定也
续的内存，而areana_object与其管理的内存则是分离的。这种差别如图16-4所示。
管理的内存有一点细微的差别。pool_header管理的内存与poo1_header自身是一块连
pool_header的作用是一样的，但是实际上，pool_header管理的内存和areana_object
织起来了，为什么又要搞出一个链表来。乍一看，真的有点稀奇古怪。
也确实是用来连接arena_object组成链表的，既然多个arena_object已经通过数组组
维护，这个数组就是Pyhon中的通用小块内存的内存池：另一方面，nextarea和prevarea
集合，但是这个集合并不构成链表，而是构成了一个arena的数组。数组的首地址由arenas
，这种猜测只对了一半，实际上，在Pyhon中，确实会存在多个arena_object构成的
这似乎意味着在Python中会有一个多个arena构成的链表，这个链表的表头就是arenasa
管理着的block集合。
同样，pool的情况类似，一个完整的pool包括一个poo1_header和透过这个poo1_header
一个完整的arena包括一个arena_object和透过这个arena_object管理着的pool集合
arena_object仅仅是一个arena的一部分，就像poo1_header只是pool的一部分一样。
初看上去，这似乎没什么大不了的，不就一个是连着的，
我们曾说arena是用来管理一组pool 的集合的，arenaobject的作用看上去和
在arena_object结构体的定义中，我们看到了nextarea和prevarea这两个东西，
struct
struct arena_object* nextarena;
struce pool_header* freepools;
一个概念上的arena在Python 源码中就对应arena_object结构体，确切地说，
“未使用”的arena和“可用”的arena
arena_object*
pool_header
nenaobiect
图16-4pool和arena的内存布局区别
prevarena
blocks
Python源码剖析
16.2小块空间的内存池
一个是分开的吗？但是这后
深度探索动态语言核心技术
439
---
## Page 470