### Chapter 15: Auditing Security Policy with OpenSCAP

#### Running Interactive and Immediate Scans with SCAP Workbench
If you need to perform an interactive and immediate scan of a system, SCAP Workbench is the most straightforward tool to use. The only limitation is that it can only process XCCDF files, meaning OVAL files used for identifying package vulnerabilities cannot be utilized in this context.

Throughout this chapter, we have explored various ways to use OpenSCAP tools to scan your infrastructure. We have demonstrated a range of scans, and their outputs are generally easy to interpret. In the next section, we will delve deeper into these topics before concluding our discussion on OpenSCAP.

#### Interpreting Scan Results
OpenSCAP scans, especially those based on XCCDF, produce clear and easily actionable reports. However, if the reports are not clear, you may struggle to identify and fix compliance issues. Fortunately, both the OVAL policies used to check for vulnerable packages and the XCCDF-based reports provide sufficient information to address these issues.

For example, consider our earlier scan of a CentOS 7 server using SSG version 0.1.47. One of the failed checks was "Disable ntpdate Service (ntpdate)." If this result was unclear, you could click on the check title in the HTML report to view detailed information, including the scan details, references from security standards, and manual commands to rectify the issue and ensure compliance for future scans.

Moreover, many recent versions of the SSG, including version 0.1.47, include Ansible code to automate the remediation process. This makes it easier to apply fixes and achieve compliance.

By exploring the scan results, you can not only identify non-compliance but also generate the necessary fixes.

#### Remediation with OpenSCAP
OpenSCAP can automatically remediate (fix) issues it finds during scanning, helping you maintain compliance. However, we have not covered this feature here because it is crucial to understand the scans and their implications before attempting automatic remediation. Both the OpenSCAP Daemon and SCAP Workbench offer a simple option to enable remediation during scans.

While XCCDF profiles are powerful and user-friendly, OVAL profile reports are less readable. Fortunately, the CVE numbers in OVAL reports are hyperlinks that direct you to the operating system vendor's website, where you can find detailed information about the vulnerability, affected packages, and when the fix was implemented.

This concludes our discussion on auditing your Linux environment with OpenSCAP. We hope you find this useful and can apply it to enhance your security and auditing processes.

#### Summary
Monitoring the security compliance of your Linux infrastructure is increasingly important, given the large number of security recommendations and the extensive use of Linux servers in modern enterprises. OpenSCAP provides a robust framework for auditing compliance, generating valuable and easy-to-interpret reports.

In this chapter, you gained hands-on experience with installing OpenSCAP tools, understanding available policies, and effectively using them. You learned how to audit your Linux servers with various OpenSCAP tools and how to interpret scan reports to take appropriate action.

In the final chapter, we will explore tips and tricks to make your automation tasks easier.

#### Questions
1. What does SCAP stand for?
2. Why are SCAP policies a valuable tool in auditing your Linux infrastructure?
3. Which OpenSCAP tool would you use to centrally perform scanning of several Linux hosts regularly?
4. What is the difference between an XCCDF file and an OVAL file?
5. When would you use the vendor-supplied SSG policies, even if they are older than the currently available ones?
6. Why might the scan results for a CentOS 7 host show "not applicable" when using a RHEL 7 policy file?
7. Can you generate an HTML report from the XML results generated by the OpenSCAP Daemon?
8. What are the requirements for a remote SSH scan to be performed by SCAP Workbench or the OpenSCAP Daemon?

#### Further Reading
- Learn Ansible by Russ McKendrick: [https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible](https://www.packtpub.com/gb/virtualization-and-cloud/learn-ansible)
- OpenSCAP website: [https://www.open-scap.org/](https://www.open-scap.org/)

---

### Chapter 16: Tips and Tricks

#### Introduction
This book has provided insights into automating your Enterprise Linux environment and the standardization required for efficient large-scale operations. However, the examples have been kept simple to accommodate readers with varying levels of experience. This concluding chapter offers essential tips and tricks to help you scale up the examples to enterprise-level while avoiding management headaches.

#### Topics Covered
- Version control for your scripts
- Inventories â€“ maintaining a single source of truth
- Handling one-off tasks
- Technical requirements

#### Example Technologies
- Ubuntu Server 18.04 LTS
- CentOS 7.6
- Ansible 2.8

#### Version Control for Your Scripts
Standardizing your Ansible playbooks and other scripts across your enterprise is crucial. This ensures consistency and minimizes training requirements. Using version control systems like Git, Subversion, or Mercurial helps manage and track changes to your playbooks.

#### Integrating Ansible with Git
Ansible itself does not integrate directly with Git, but playbooks and roles can be stored in Git repositories. For example, to run a playbook from a Git repository, you can clone the repository and execute the playbook:

```sh
$ git clone https://github.com/ansible/ansible-examples.git
$ cd ansible-examples/wordpress-nginx_rhel7/
$ ansible-playbook site.yml
```

To update the local working copy:

```sh
$ git pull
```

While this approach is straightforward, it does not enforce good practices. A more robust solution is to use tools like AWX or Ansible Tower, which ensure that playbooks are pulled from a version control system, preventing the use of arbitrary playbooks.

#### Organizing Your Version Control Repositories
Organizing your playbooks within version control repositories is essential for easy access and management. The AWX tool refers to each version control repository as a "Project." Depending on the size of your enterprise, you might end up with hundreds of playbooks. Storing all playbooks in a single repository can lead to confusion. Dividing repositories by project is a good starting point.

#### Version Control of Roles in Ansible
Role reuse is vital for building efficient and standardized playbooks. To ensure role reuse and version control, store roles in separate repositories. For example, a role to add users to a Linux system can be improved by using Ansible variables instead of hardcoding user accounts:

```yaml
---
- name: Add required users to Linux servers
  user:
    name: "{{ item.name }}"
    comment: "{{ item.comment }}"
    shell: /bin/bash
    groups: "{{ item.groups }}"
    append: yes
    state: present
  loop:
    - { name: 'johndoe', comment: 'John Doe', groups: 'sudo' }
    - { name: 'janedoe', comment: 'Jane Doe', groups: 'docker' }
```

Using Git submodules, you can include roles in multiple playbooks and ensure they are up to date. This approach supports efficient and effective role reuse.

By following these tips and best practices, you can scale your automation efforts and maintain a well-organized and compliant Linux environment.