---
author: Julia Evans
category: 技术
comments_data:
- date: '2023-10-31 09:19:10'
  message: "“最近，我首次尝试了 Mac。直至现在，我注意到的最大缺点是其软件包管理比 Linux 差很多。一段时间以来，我对于 homebrew 感到相当不满，因为每次我安装新的软件包时，它大部分时间都花在了升级上。”\r\n\r\n这只能说作者不会用，至少没看文档。homebrew只是会在安装软件时自动更新源（不是软件），可以通过环境变量禁用。\r\n\r\nHOMEBREW_AUTO_UPDATE_SECS\r\nRun brew update once every HOMEBREW_AUTO_UPDATE_SECS
    seconds before some commands, e.g. brew install, brew upgrade and brew tap. Alternatively,
    disable auto-update entirely with"
  postip: 113.65.250.213
  username: 来自广东广州的 Chrome Mobile 118.0|Android 10 用户
- date: '2023-10-31 09:22:31'
  message: "Alternatively, disable auto-update entirely with HOMEBREW_NO_AUTO_UPDATE.\r\n\r\n也可以通过以下命令自动更新源，加上`--upgrade`参数自动升级软件，加上`--cleanup`参数自动清理。\r\nbrew
    autoupdate start &lt;interval seconds&gt;"
  postip: 113.65.250.213
  username: 来自广东广州的 Chrome Mobile 118.0|Android 10 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1890
date: '2023-10-30 21:54:00'
editorchoice: false
excerpt: 以下是我至今为止学习到的内容, 敬请期待如何进行
fromurl: https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/
id: 16332
islctt: true
largepic: /data/attachment/album/202310/30/221702nk4a42dglmcgc7lh.jpg
permalink: /article-16332-1.html
pic: /data/attachment/album/202310/30/221702nk4a42dglmcgc7lh.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 以下是我至今为止学习到的内容, 敬请期待如何进行
tags:
- nix
thumb: false
title: 我的一些 nix 学习经验：安装和打包
titlepic: true
translator: ChatGPT
updated: '2023-10-30 21:54:00'
---
![](/data/attachment/album/202310/30/221702nk4a42dglmcgc7lh.jpg)
最近，我首次尝试了 Mac。直至现在，我注意到的最大缺点是其软件包管理比 Linux 差很多。一段时间以来，我对于 homebrew 感到相当不满，因为每次我安装新的软件包时，它大部分时间都花在了升级上。于是，我萌生了试试 [nix](https://nixos.org/) 包管理器的想法！
公认的，nix 的使用存在一定困惑性（甚至它有自己单独的编程语言！），因此，我一直在努力以最简洁的方式掌握使用 nix，避开复杂的配置文件管理和新编程语言学习。以下是我至今为止学习到的内容, 敬请期待如何进行：
* 使用 nix 安装软件包
* 为一个名为 [paperjam](https://mj.ucw.cz/sw/paperjam/) 的 C++ 程序构建一个自定义的 nix 包
* 用 nix 安装五年前的 [hugo](https://github.com/gohugoio/hugo/) 版本
如同以往，由于我对 nix 的了解还停留在入门阶段，本篇文章可能存在一些表述不准确的地方。甚至我自己也对于我是否真的喜欢上 nix 感到模棱两可 —— 它的使用真的让人相当困惑！但是，它帮我成功编译了一些以前总是难以编译的软件，并且通常来说，它比 homebrew 的安装速度要快。
### nix 为何引人关注？
通常，人们把 nix 定义为一种“声明式的包管理”。尽管我对此并不太感兴趣，但以下是我对 nix 的两个主要欣赏之处：
* 它提供了二进制包（托管在  上），你可以迅速下载并安装
* 对于那些没有二进制包的软件，nix 使编译它们变得更容易
我认为 nix 之所以擅长于编译软件，主要有以下两个原因：
* 在你的系统中，可以安装同一库或程序的多个版本（例如，你可能有两个不同版本的 libc）。举个例子，我当前的计算机上就存在两个版本的 node，一个位于 `/nix/store/4ykq0lpvmskdlhrvz1j3kwslgc6c7pnv-nodejs-16.17.1`，另一个位于 `/nix/store/5y4bd2r99zhdbir95w5pf51bwfg37bwa-nodejs-18.9.1`。
* 除此之外，nix 在构建包时是在隔离的环境下进行的，只使用你明确声明的依赖项的特定版本。因此，你无需担心这个包可能依赖于你的系统里的其它你并不了解的包，再也不用与 `LD_LIBRARY_PATH` 战斗了！许多人投入了大量工作，来列出所有包的依赖项。
在本文后面，我将给出两个例子，展示 nix 如何使我在编译软件时遇到了更小的困难。
#### 我是如何开始使用 nix 的
下面是我开始使用 nix 的步骤：
* 安装 nix。我忘记了我当时是如何做到这一点，但看起来有一个[官方安装程序](https://nixos.org/download) 和一个来自 [zero-to-nix.com](http://zero-to-nix.com) 的 [非官方安装程序](https://zero-to-nix.com/concepts/nix-installer)。在 MacOS 上使用标准的多用户安装卸载 nix 的 [教程](https://nixos.org/manual/nix/stable/installation/installing-binary.html#macos) 有点复杂，所以选择一个卸载教程更为简单的安装方法可能值得。
* 把 `~/.nix-profile/bin` 添加到我的 `PATH`
* 用 `nix-env -iA nixpkgs.NAME` 命令安装包
* 就是这样。
基本上，是把 `nix-env -iA` 当作 `brew install` 或者 `apt-get install`。
例如，如果我想安装 `fish`，我可以这样做：
```
nix-env -iA nixpkgs.fish
```
这看起来就像是从  下载一些二进制文件 - 非常简单。
有些人使用 nix 来安装他们的 Node 和 Python 和 Ruby 包，但我并没有那样做 —— 我仍然像我以前一样使用 `npm install` 和 `pip install`。
#### 一些我没有使用的 nix 功能
有一些 nix 功能/工具我并没有使用，但我要提及一下。我最初认为你必须使用这些功能才能使用 nix，因为我读过的大部分 nix 教程都讨论了它们。但事实证明，你并不一定要使用它们。
* NixOS（一个 Linux 发行版）
* [nix-shell](https://nixos.org/guides/nix-pills/developing-with-nix-shell.html)
* [nix flakes](https://nixos.wiki/wiki/Flakes)
* [home-manager](https://github.com/nix-community/home-manager)
* [devenv.sh](https://devenv.sh/)
我不去深入讨论它们，因为我并没真正使用过它们，而且网上已经有很多详解。
### 安装软件包
#### nix 包在哪里定义的？
我认为 nix 包主仓库中的包是定义在 。
你可以在  查找包。似乎有两种官方推荐的查找包的方式：
* `nix-env -qaP NAME`，但这非常缓慢，并且我并没有得到期望的结果
* `nix --extra-experimental-features 'nix-command flakes' search nixpkgs NAME`，这倒是管用，但显得有点儿冗长。并且，无论何种原因，它输出的所有包都以 `legacyPackages` 开头
我找到了一种我更喜欢的从命令行搜索 nix 包的方式：
* 运行 `nix-env -qa '*' > nix-packages.txt` 获取 Nix 仓库中所有包的列表
* 编写一个简洁的 `nix-search` 脚本，仅在 `packages.txt` 中进行 grep 操作（`cat ~/bin/nix-packages.txt | awk '{print $1}' | rg "$1"`）
#### 所有的东西都是通过符号链接来安装的
nix 的一个主要设计是，没有一个单一的 `bin` 文件夹来存放所有的包，而是使用了符号链接。有许多层的符号链接。比如，以下就是一些符号链接的例子：
* 我机器上的 `~/.nix-profile` 最终是一个到 `/nix/var/nix/profiles/per-user/bork/profile-111-link/` 的链接
* `~/.nix-profile/bin/fish` 是到 `/nix/store/afkwn6k8p8g97jiqgx9nd26503s35mgi-fish-3.5.1/bin/fish` 的链接
当我安装某样东西的时候，它会创建一个新的 `profile-112-link` 目录并建立新的链接，并且更新我的 `~/.nix-profile` 使其指向那个目录。
我认为，这意味着如果我安装了新版本的 `fish` 但我并不满意，我可以很容易地退回先前的版本，只需运行 `nix-env --rollback`，这样就可以让我回到之前的配置文件目录了。
#### 卸载包并不意味着删除它们
如果我像这样卸载 nix 包，实际上并不会释放任何硬盘空间，而仅仅是移除了符号链接：
```
$ nix-env --uninstall oil
```
我尚不清楚如何彻底删除包 - 我试着运行了如下的垃圾收集命令，这似乎删除了一些项目：
```
$ nix-collect-garbage
...
85 store paths deleted, 74.90 MiB freed
```
然而，我系统上仍然存在 `oil` 包，在 `/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0`。
`nix-collect-garbage` 有一个更具攻击性的版本，它也会删除你配置文件的旧版本（这样你就不能回滚了）。
```
$ nix-collect-garbage -d --delete-old
```
尽管如此，上述命令仍无法删除 `/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0`，我不明白原因。
#### 升级过程
你可以通过以下的方式升级 nix 包：
```
nix-channel --update
nix-env --upgrade
```
（这与 `apt-get update && apt-get upgrade` 类似。）
我还没真正尝试升级任何东西。我推测，如果升级过程中出现任何问题，我可以通过以下方式轻松地回滚（因为在 nix 中，所有事物都是不可变的！）：