# 0x00 前言
本文将分享一个简单的渗透测试项目，尽管过程中遇到一些小障碍，但最终成功获取了root权限。首先需要强调的是，如果因 **代码片段不完整** 导致能够定位目标，请各位同行手下留情。

# 0x01 信息收集
略过具体过程，我们通过侦察手段获得了目标网站的主站、邮件服务器及DNS服务器的相关信息，并决定从主站入手进行进一步探索。

# 0x02 漏洞挖掘
### 后台发现
在尝试于域名后添加“admin”字符串时，成功定位到了后台登录界面。
### SQL注入点识别
返回前台继续探索，在某页面中发现了一个可疑参数`id`。通过构造特定查询语句（例如`?id=125 and 1=0`与`?id=125 and 1=1`），验证了存在数字型SQL注入漏洞。进一步使用`order by`子句确定了查询结果包含7列数据。
### 绕过WAF
初次尝试利用`union select`语句进行联合查询时遭遇了响应延迟问题，推测可能是Web应用防火墙(WAF)导致。经过一系列关键词大小写变换以及内联注释技巧的应用，最终确认WAF过滤规则并成功绕过了它。
### 数据提取
借助`information_schema`数据库中的表结构信息，结合适当的payload调整，最终成功导出了管理员账户密码等敏感信息。
### 文件上传漏洞利用
随后发现了允许上传任意文件的安全缺陷。上传PHP webshell并通过访问特定URL路径触发执行，从而实现了远程命令执行能力。
### 隐蔽操作
为了降低被检测风险，在较为隐蔽的位置部署新webshell的同时删除旧版痕迹。

# 0x03 反弹Shell
由于直接通过HTTP协议控制的webshell不具备持久性和交互性，因此选择先反弹一个真正的shell至攻击者VPS上。设置好监听端口后，通过Python脚本实现连接，并采用pty库创建伪终端以支持更复杂的交互式会话。

# 0x04 提升权限
考虑到初始获得的用户权限较低，尝试了几种常见的提权方法如SUID滥用等未果后，转而利用已知Linux内核漏洞CVE-2012-0056完成了最终的权限提升。

# 0x05 总结
整个攻击链条包括：前台SQL注入 -> 绕过WAF -> 后台文件上传 -> 确定实际上传位置 -> 反弹shell -> shell升级 -> 利用系统漏洞提权。再次提醒各位同仁注意道德规范，在非授权情况下不得擅自实施此类行为。

欢迎关注公众号：安译Sec