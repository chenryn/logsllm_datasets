# 九、Helm 安全考虑
正如您在本书中可能已经意识到的那样，Helm 是一个强大的工具，它为用户提供了许多部署可能性。然而，如果某些安全范例得不到认可和遵循，这种权力就会失控。幸运的是，从下载 Helm CLI 到在 Kubernetes 集群上安装 Helm 图表，Helm 提供了许多将安全性以简单的方式纳入日常使用的方法。
在本章中，我们将涵盖以下主题:
*   数据来源和完整性
*   Helm 图安全性
*   关于 RBAC、价值和图表存储库的其他注意事项
# 技术要求
本章将利用以下技术:
*   `minikube`
*   `kubectl`
*   舵
*   **GNU 隐私卫士** ( **GPG** )
Minikube、Kubectl 和 Helm 的安装和配置在 [*第 2 章*](02.html#_idTextAnchor098)*准备 Kubernetes 和 Helm 环境*中进行了介绍。
我们还将利用位于 https://github.com/PacktPublishing/-Learn-Helm T2 的 Packt 存储库中的`guestbook`图表，作为本章后面的示例。如果您尚未克隆此存储库，请务必使用以下命令进行克隆:
```
$ git clone https://github.com/PacktPublishing/-Learn-Helm.git Learn-Helm
```
# 数据来源和完整性
处理任何类型的数据时，都应该考虑两个经常被忽略的问题:
*   数据是来自可靠的来源还是来自你期望的来源？
*   数据是否包含您预期的所有内容？
第一个问题是关于**数据出处**的话题。数据来源是关于确定数据的来源。
第二个问题是关于**数据完整性**的话题。数据完整性是关于确定您从远程位置接收的内容是否代表您预期接收的内容，并且可以帮助确定数据在通过网络发送时是否被篡改。数据来源和数据完整性都可以通过一个名为**数字签名**的概念进行验证。作者可以基于密码学创建一个唯一的签名来对数据进行签名，而该数据的消费者可以使用加密工具来验证该签名的真实性。
如果真实性得到验证，那么消费者就知道数据来自预期的来源，并且在传输时没有被篡改。
作者可以创建一个数字签名，首先创建一个“T1”良好隐私“T2”(“T3”PGP“T4”)密钥文件。在本文中，PGP 指的是 OpenPGP，它是一套基于加密的标准。PGP 专注于建立非对称加密，这是基于两种不同密钥的使用——私有和公共。
私钥是保密的，而公钥是共享的。对于数字签名，私钥用于加密数据，而公钥由消费者用于解密该数据。PGP 密钥文件通常是使用一种叫做 GPG 的工具创建的，这是一种实现 OpenPGP 标准的开源工具。
一旦 PGP 密钥文件被创建，作者就可以使用 GPG 对数据进行签名。签署数据后，GPG 在后台执行以下步骤:
1.  基于数据的内容计算散列。输出是一个固定长度的字符串，称为**消息摘要**。
2.  消息摘要是使用作者的私钥加密的。输出是数字签名。
为了验证签名，消费者必须使用作者的公钥来解密它。这种验证也可以使用 GPG 进行。
数字签名以两种方式在掌舵中发挥作用:
*   首先，每个 Helm 下载都有一个来自其中一个维护者的附带数字签名，可以用来验证二进制文件的真实性。该签名可用于验证下载的来源及其完整性。
*   其次，Helm 图表也可以进行数字签名，以受益于相同的验证。图表的作者在打包过程中对图表进行签名，图表用户使用作者的公钥验证图表的有效性。
了解了数据来源和完整性与数字签名之间的关系后，让我们在您的本地工作站上创建一个 GPG 关键点，如果您还没有这样的工作站的话，我们将使用它来阐述前面描述的许多概念。
## 创建 GPG 关键帧
为了创建一个关键帧，你必须首先在你的本地机器上安装 GPG。使用以下说明作为在本地计算机上安装 GPG 的指南。请注意，在 Linux 系统上，您可能已经安装了 GPG:
*   For Windows, you can use the Chocolatey package manager, as in the following command:
    ```
    > choco install gnupg
    ```
    你也可以从 nload.html https://gpg4win.org/dow 下载 Win [dows 的安装程序。](https://gpg4win.org/download.html)
*   For macOS, you can use the Homebrew package manager using the following command:
    ```
    $ brew install gpg
    ```
    你也可以从 https://sourceforge.net/p/gpgosx/docu 下载基于苹果操作系统的 insta[/Download/。](https://sourceforge.net/p/gpgosx/docu/Download/)
*   对于基于 Debian 的 Linux 发行版，您可以使用`apt`包管理器，如图所示:
    ```
    $ sudo apt install gnupg
    ```
*   对于基于 RPM 的 Linux 发行版，可以使用`dnf`包管理器，如图所示:
    ```
    $ sudo dnf install gnupg
    ```
一旦您安装了 GPG，您就可以创建自己的 GPG keypair，我们将在讨论数据来源和完整性时用到它。
配置此密钥空气的步骤如下:
1.  运行以下命令创建一个新的 keypair。该命令可以从任何目录运行:
    ```
    $ gpg --generate-key
    ```
2.  按照提示输入您的姓名和电子邮件地址。这些将用于识别您是密钥的所有者，并将是接收您的公钥的人看到的姓名和电子邮件地址。
3.  按下 *O* 键继续。
4.  然后系统会提示您输入私钥密码。输入并确认用于加密和解密操作的所需密码..
一旦创建了 GPG 关键帧，您将看到类似以下的输出:
![Figure 9.1: The output after the successful creation of the GPG keypair ](img/Figure_9.1.jpg)
图 9.1:成功创建 GPG 关键帧后的输出
输出显示关于公钥(`pub`)和私钥(`sub`)的信息，以及公钥的指纹(输出的第二行)。指纹是一个唯一的标识符，用来识别你是钥匙的主人。第三行，以`uid`开头，显示您在生成 GPG 关键帧时输入的姓名和电子邮件地址。
现在您的`gpg`关键帧已经创建，请继续下一节，了解如何验证 Helm 下载。
## 验证 Helm 下载
正如*第 2 章*、*中所讨论的，准备一个 Kubernetes 和 Helm 环境*，可以安装 Helm 的方法之一是从 GitHub 下载一个档案。通过选择以下截图中显示的链接之一，可以从 Helm 的 GitHub 发行版页面([https://github.com/helm/helm/releases](https://github.com/helm/helm/releases))安装这些档案:
![Figure 9.2: The Installation section from Helm’s GitHub releases page ](img/Figure_9.2.jpg)
图 9.2:Helm 的 GitHub 发行版页面的安装部分
在**安装**部分的底部，你会注意到一个段落，解释发布已经签署。每个 Helm 版本都由 Helm 维护人员签名，并且可以根据与下载的 Helm 版本相对应的数字签名进行验证。每个数字签名都位于**资产**部分。
下面的截图显示了这些是如何表示的:
![Figure 9.3: The Assets section from Helm’s GitHub releases page ](img/Figure_9.3.jpg)
图 9.3:Helm 的 GitHub 发布页面中的资产部分
要验证你的 Helm 下载的出处和完整性，还应该下载相应的`.asc`文件。注意`.sha256.asc`文件仅用于验证完整性。在本例中，我们将下载相应的`.asc`文件，该文件将验证出处和完整性。
按照以下步骤开始验证舵的释放:
1.  在与您的操作系统相对应的安装下下载 Helm 归档文件。尽管 Helm 二进制文件可能已经安装，但您仍然可以下载一个归档文件来跟随示例。完成示例后，您可以从工作站中删除归档文件。
2.  Download the `.asc` file that corresponds with your operating system. For example, if you are running an AMD64-based Linux system, you would download the `helm-v3.0.0-linux-amd64.tar.gz.asc` file.
    重要说明
    文件名中包含的版本对应于您正在下载的实际 Helm 版本。
下载完这两个文件后，您应该会在命令行的同一目录中看到两个相似的文件:
```
helm-v3.0.0-linux-amd64.tar.gz
helm-v3.0.0-linux-amd64.tar.gz.asc
```