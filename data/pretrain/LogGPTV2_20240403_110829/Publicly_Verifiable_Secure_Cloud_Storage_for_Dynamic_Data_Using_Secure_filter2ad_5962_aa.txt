# Publicly Verifiable Secure Cloud Storage for Dynamic Data Using Secure Network Coding

**Authors:**
- Binanda Sengupta
- Sushmita Ruj

**Affiliations:**
- Indian Statistical Institute, Kolkata, India
- Email: [Email Address]

## Abstract

Cloud service providers offer storage outsourcing to their clients. In a secure cloud storage (SCS) protocol, the integrity of the client's data is maintained. This work introduces a publicly verifiable secure cloud storage protocol based on a secure network coding (SNC) protocol, allowing the client to update the outsourced data as needed. To the best of our knowledge, this is the first SNC-based SCS protocol for dynamic data that is secure in the standard model and provides privacy-preserving audits in a publicly verifiable setting. We also discuss the (im)possibility of constructing an efficient SCS protocol for dynamic data (DSCS protocol) from an arbitrary SNC protocol. Additionally, we modify an existing DSCS scheme (DPDP I) to support privacy-preserving audits and compare our DSCS protocol with other SCS schemes, including the modified DPDP I. Finally, we identify some limitations of an SCS scheme constructed using an SNC protocol.

**Keywords:** Cloud Storage, Provable Data Possession, Dynamic Data, Network Coding

## 1. Introduction

Cloud computing has emerged as a recent technology enabling devices with limited resources to delegate heavy tasks to powerful cloud servers. These services include computation, storage outsourcing, and more. For example, a smartphone with a low-performance processor or limited storage capacity can delegate its computation or storage to a cloud server. The client can then download the results or access only the required portion of the uploaded data.

For storage outsourcing, the cloud server stores a large volume of data on behalf of its clients. However, a malicious cloud server might delete the client's data to save space. Therefore, the client must have a mechanism to check the integrity of the outsourced data. Secure cloud storage (SCS) protocols ensure that the client's data are stored untampered. These protocols are classified into SCS for static data (SSCS) and SCS for dynamic data (DSCS). Static data cannot be changed once uploaded, while dynamic data can be modified after initial outsourcing. Some SSCS protocols include [3, 23, 36], and some DSCS protocols include [18, 39, 10, 37]. In SCS protocols, the client can audit the data without accessing the entire file, detecting any unwanted modifications by a malicious server. Audits are publicly verifiable if any third-party auditor (TPA) can perform them with public parameters, and privately verifiable if the client's secret information is needed. Privacy-preserving audits ensure that the TPA cannot gain knowledge of the data file.

Network coding (NC) is an alternative to conventional store-and-forward routing, where intermediate nodes combine incoming packets to output another packet. NC protocols improve throughput, efficiency, and scalability but are susceptible to pollution attacks. Secure network coding (SNC) protocols provide countermeasures using cryptographic primitives. Each packet is authenticated with a small tag generated using homomorphic message authentication codes (MACs) or homomorphic signatures.

Chen et al. [14] explored the relationship between an SCS protocol for static data and an SNC protocol, showing that an SNC protocol can be used to construct an SSCS protocol. However, for static data, the client cannot efficiently update the data after uploading. This constraint makes SSCS protocols insufficient for many cloud applications. A naive way to update data is to download, update, and re-upload the entire file, which is highly inefficient. Thus, further research is needed to construct an efficient DSCS protocol using an SNC protocol.

**Our Contribution:**

- We investigate the general construction of a DSCS protocol using any SNC protocol, discussing the challenges and identifying necessary properties.
- We provide a construction of a DSCS protocol from an SNC protocol proposed by Catalano et al. [11], which is secure in the standard model and offers public verifiability with privacy-preserving audits.
- We modify the DPDP I scheme [18] to support privacy-preserving audits and analyze its security.
- We analyze the efficiency of our DSCS protocol and compare it with other existing SCS protocols, discussing the limitations of SNC-based SCS protocols.

The rest of the paper is organized as follows: Section 2 covers preliminaries and background. Section 3 discusses the general construction of a DSCS protocol using an SNC protocol and describes our DSCS construction. Section 4 modifies the DPDP I scheme to support privacy-preserving audits. Section 5 analyzes the efficiency of our DSCS scheme and compares it with existing SCS schemes. Section 6 concludes the paper.

## 2. Preliminaries and Background

### 2.1 Notation

We use λ as the security parameter. An algorithm \( A(1^\lambda) \) is probabilistic polynomial-time if its running time is polynomial in λ and its output \( y \) is a random variable depending on internal coin tosses. An element \( a \) chosen uniformly at random from a set \( S \) is denoted as \( a \xleftarrow{R} S \). A function \( f : \mathbb{N} \to \mathbb{R} \) is negligible in λ if for all positive integers \( c \) and sufficiently large λ, \( f(\lambda) < \frac{1}{\lambda^c} \). Generally, \( \mathbb{F} \) denotes a finite field. The multiplication of a vector \( v \) by a scalar \( s \) is denoted by \( s \cdot v \). The terms "packet" and "vector" are used interchangeably.

### 2.2 Secure Network Coding

Ahlswede et al. [2] introduced network coding as a replacement for conventional store-and-forward routing. Intermediate nodes encode received packets to output another packet, increasing network throughput. Linear network coding was proposed by Li et al. [25]. Here, a file \( F \) is divided into \( m \) packets (vectors) \( v_1, v_2, \ldots, v_m \), each consisting of \( n \) components (blocks) from a finite field \( \mathbb{F} \). Each \( v_i \in \mathbb{F}^n \) for \( i \in [1, m] \). The sender augments each vector to form \( u_i = [v_i \, e_i] \in \mathbb{F}^{n+m} \), where \( e_i \) is the \( m \)-dimensional unit vector with 1 in the \( i \)-th position and 0 elsewhere. The sender transmits these augmented vectors to the network.

Let \( V \subset \mathbb{F}^{n+m} \) be the linear subspace spanned by the augmented vectors \( u_1, u_2, \ldots, u_m \). A random file identifier \( \text{fid} \) is associated with the file \( F \) (or \( V \)). In random (linear) network coding [22, 21], an intermediate node, upon receiving \( l \) packets \( y_1, y_2, \ldots, y_l \in \mathbb{F}^{n+m} \), chooses \( l \) coefficients \( \nu_1, \nu_2, \ldots, \nu_l \xleftarrow{R} \mathbb{F} \) and outputs another packet \( w \in \mathbb{F}^{n+m} \) such that \( w = \sum_{i=1}^l \nu_i \cdot y_i \). The output packet of each intermediate node is of the form \( w = [w_1, w_2, \ldots, w_n, c_1, c_2, \ldots, c_m] \in V \), where \( w_j = \sum_{i=1}^m c_i v_{ij} \) for each \( j \in [1, n] \). When the receiver accumulates \( m \) linearly independent vectors, it solves a system of linear equations to obtain the file.

In a secure network coding (SNC) protocol, an authentication tag is attached to each packet to prevent pollution attacks. Tags are computed using homomorphic MACs or homomorphic signatures. We define an SNC protocol below.

**Definition 2.1.** A secure network coding (SNC) protocol consists of the following algorithms:

- **SNC.KeyGen(1λ, m, n):** Generates a secret key-public key pair \( K = (sk, pk) \) for the sender.
- **SNC.TagGen(V, sk, m, n, fid):** On input a linear subspace \( V \subset \mathbb{F}^{n+m} \), the secret key \( sk \), and a random file identifier \( \text{fid} \) associated with \( V \), the sender produces the authentication tag \( t \) for \( V \).
- **SNC.Combine({yi, ti, νi}1≤i≤l, pk, m, n, fid):** Given \( l \) incoming packets \( y_1, y_2, \ldots, y_l \in \mathbb{F}^{n+m} \) and their corresponding tags \( t_1, t_2, \ldots, t_l \) for a file associated with \( \text{fid} \), an intermediate node chooses \( l \) random coefficients \( \nu_1, \nu_2, \ldots, \nu_l \xleftarrow{R} \mathbb{F} \) and runs this algorithm. The algorithm outputs another packet \( w \in \mathbb{F}^{n+m} \) and its authentication tag \( t \) such that \( w = \sum_{i=1}^l \nu_i \cdot y_i \).
- **SNC.Verify(w, t, K, m, n, fid):** An intermediate node or the receiver, on input a packet \( w \) and its tag \( t \) for a file associated with \( \text{fid} \), executes this algorithm, which returns 1 if \( t \) is authentic for the packet \( w \); returns 0 otherwise.

In some schemes, the algorithm SNC.Verify requires only the public key \( pk \) [7, 19, 11]. The secret key \( sk \) is necessary to verify the incoming packets in other schemes [1].

**Security of an SNC Protocol:**

The security of an SNC protocol based on a homomorphic signature scheme is defined by a security game between a challenger and a probabilistic polynomial-time adversary \( A \) [11]:

- **Setup:** The adversary \( A \) provides values \( m \) and \( n \) to the challenger. The challenger runs SNC.KeyGen(1λ, m, n) to output \( K = (sk, pk) \) and returns \( pk \) to \( A \).
- **Queries:** The adversary \( A \) specifies a sequence of vector spaces \( V_i \subset \mathbb{F}^{n+m} \) by respective augmented basis vectors \( \{u_{i1}, u_{i2}, \ldots, u_{im}\} \) and asks the challenger to authenticate the vector spaces. For each \( i \), the challenger chooses a random file identifier \( \text{fid}_i \) from a predefined space, generates an authentication tag \( t_i \) by running SNC.TagGen(Vi, sk, m, n, \text{fid}_i) and gives \( t_i \) to \( A \).
- **Forgery:** The adversary \( A \) outputs \( (\text{fid}^*, w^*, t^*) \). Let \( w^* = [w^*_1, w^*_2, \ldots, w^*_{n+m}] \in \mathbb{F}^{n+m} \). The adversary \( A \) wins the security game if \( [w^*_{n+1}, w^*_{n+2}, \ldots, w^*_{n+m}] \) is not the all-zero vector, SNC.Verify(w^*, t^*, pk, m, n, \text{fid}^*) outputs 1, and one of the following conditions is satisfied:
  - \( \text{fid}^* \neq \text{fid}_i \) for all \( i \) (type-1 forgery)
  - \( \text{fid}^* = \text{fid}_i \) for some \( i \), but \( w^* \notin V_i \) (type-2 forgery).

For an SNC protocol based on homomorphic MACs, the security game is the same, except that the algorithm SNC.KeyGen now produces a secret key only (unknown to the adversary).