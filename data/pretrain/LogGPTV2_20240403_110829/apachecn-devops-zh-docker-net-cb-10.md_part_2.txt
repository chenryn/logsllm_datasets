### 注
您可能会注意到，只需在一台主机上添加一条路由，该主机就可以到达另一台主机上的虚拟接口。这是因为我们只需要路由就可以让发起主机的流量消失。流量将由主机`eth0`接口(`2003:ab11::/64`)提供，其他主机本身就知道如何到达该接口。如果 ping 来自虚拟接口，则需要两条路由才能工作。
现在我们已经配置并验证了基本的连接，让我们进行最后一步，使用网络名称空间重建这些接口。为此，让我们首先清理虚拟接口，因为我们将在名称空间内重用这些 IPv6 子网:
```
user@net1:~$ sudo ip link del dev ipv6_dummy
user@net2:~$ sudo ip link del dev ipv6_dummy
```
我们需要的配置如下:
![How to do it…](img/5453_10_03.jpg)
虽然与上一个配置非常相似，但有两大区别。您会注意到，我们现在正在使用网络名称空间来封装新的接口。这样，我们已经为 VETH 对一侧的新接口配置了 IPv6 地址。VETH 对的另一端位于默认网络命名空间中的主机上。
### 注
如果您对其中一些 Linux 网络结构不满意，请查看[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*，在这里我们将更详细地讨论名称空间和 VETH 接口。
为此，我们将应用以下配置:
添加名为`net1_ns`的新网络命名空间:
```
user@net1:~$ sudo ip netns add net1_ns
```
创建一个 VETH 对，命名一端`host_veth1`和另一端`ns_veth1`:
```
user@net1:~$ sudo ip link add host_veth1 type veth peer name ns_veth1
```
将 VETH 对的命名空间侧移动到命名空间中:
```
user@net1:~$ sudo ip link set dev ns_veth1 netns net1_ns
```
在命名空间中，给 VETH 接口一个 IP 地址:
```
user@net1:~$ sudo ip netns exec net1_ns ip -6 address \
add 2003:cd11::2/64 dev ns_veth1
```
在命名空间中，调出接口:
```
user@net1:~$ sudo ip netns exec net1_ns ip link set ns_veth1 up
```
在命名空间中，添加一条到达另一台主机上的命名空间的路由:
```
user@net1:~$ sudo ip netns exec net1_ns ip -6 route \
add 2003:ef11::/64 via 2003:cd11::1
```
给 VETH 对的主机端一个 IP 地址:
```
user@net1:~$ sudo ip -6 address add 2003:cd11::1/64 dev host_veth1
```
调出 VETH 接口的主机端:
```
user@net1:~$ sudo ip link set host_veth1 up
```
### 注
请注意，我们只在名称空间中添加了一条到达另一个名称空间的路由。我们没有在 Linux 主机上添加相同的路由。这是因为为了到达虚拟界面，我们已经在配方的前面做了。如果您删除了该路由，则需要重新添加它才能正常工作。
我们现在必须在第二台主机上执行类似的配置:
```
user@net2:~$ sudo ip netns add net2_ns
user@net2:~$ sudo ip link add host_veth1 type veth peer name ns_veth1
user@net2:~$ sudo ip link set dev ns_veth1 netns net2_ns
user@net2:~$ sudo ip netns exec net2_ns ip -6 address add \
2003:ef11::2/64 dev ns_veth1
user@net2:~$ sudo ip netns exec net2_ns ip link set ns_veth1 up
user@net2:~$ sudo ip netns exec net2_ns ip -6 route add \
2003:cd11::/64 via 2003:ef11::1
user@net2:~$ sudo ip -6 address add 2003:ef11::1/64 dev host_veth1
user@net2:~$ sudo ip link set host_veth1 up
```
添加后，您应该能够验证每个命名空间都有到达其他主机命名空间所需的路由信息:
```
user@net1:~$ sudo ip netns exec net1_ns ip -6 route
2003:cd11::/64 dev ns_veth1  proto kernel  metric 256  pref medium
2003:ef11::/64 via 2003:cd11::1 dev ns_veth1  metric 1024  pref medium
fe80::/64 dev ns_veth1  proto kernel  metric 256  pref medium
user@net1:~$
user@net2:~$ sudo ip netns exec net2_ns ip -6 route
2003:cd11::/64 via 2003:ef11::1 dev ns_veth1  metric 1024  pref medium
2003:ef11::/64 dev ns_veth1  proto kernel  metric 256  pref medium
fe80::/64 dev ns_veth1  proto kernel  metric 256  pref medium
user@net2:~$
```
但是当我们试图从一个名称空间到达另一个名称空间时，连接失败了:
```
user@net1:~$ sudo ip netns exec net1_ns ping6 2003:ef11::2 -c 2
PING 2003:ef11::2(2003:ef11::2) 56 data bytes
--- 2003:ef11::2 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 1007ms
user@net1:~$
```
这是因为我们现在正试图使用 Linux 主机作为路由器。如果你还记得前几章，当我们希望 Linux 内核转发或路由数据包时，我们必须启用该功能。这是通过在每台主机上更改这两个内核参数来实现的:
```
user@net1:~$ sudo sysctl net.ipv6.conf.default.forwarding=1
net.ipv6.conf.default.forwarding = 1
user@net1:~$ sudo sysctl net.ipv6.conf.all.forwarding=1
net.ipv6.conf.all.forwarding = 1
```
### 注
请记住，以这种方式定义时，这些设置不会在重新启动时保持不变。
一旦在两台主机上进行了这些设置，您的 ping 应该开始工作了:
```
user@net1:~$ sudo ip netns exec net1_ns ping6 2003:ef11::2 -c 2
PING 2003:ef11::2(2003:ef11::2) 56 data bytes
64 bytes from 2003:ef11::2: icmp_seq=1 ttl=62 time=0.540 ms
64 bytes from 2003:ef11::2: icmp_seq=2 ttl=62 time=0.480 ms
--- 2003:ef11::2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.480/0.510/0.540/0.030 ms
user@net1:~$
```
有趣的是，一旦在内核中启用了 IPv6 转发，请检查主机上的邻居表:
```
user@net1:~$ ip -6 neighbor
2003:ab11::2 dev eth0 lladdr 00:0c:29:59:ca:ca router STALE
2003:cd11::2 dev host_veth1 lladdr a6:14:b5:39:da:96 STALE
fe80::20c:29ff:fe59:caca dev eth0 lladdr 00:0c:29:59:ca:ca router STALE
fe80::a414:b5ff:fe39:da96 dev host_veth1 lladdr a6:14:b5:39:da:96 STALE
user@net1:~$
```
你能注意到其他 Linux 主机的邻居条目有什么不同吗？它现在有`router`标志作为邻居定义的一部分。当内核中启用 IPv6 转发时，Linux 主机会将自己宣传为网段上的路由器。
# 在 Docker 中启用 IPv6 功能
在 Docker 中，IPv6 功能默认被禁用。很像我们之前回顾的其他特性，启用它需要在服务级别这样做。一旦启用，Docker 将为与 Docker 相关联的主机接口以及容器本身提供 IPv6 寻址。
## 做好准备
在本食谱中，我们将使用一个由两台 Docker 主机组成的小型实验室:
![Getting ready](img/5453_10_04.jpg)
每台主机都有分配给其物理接口的 IPv4 地址和 IPv6 地址。您需要对每台主机进行根级访问，以更改网络配置。假设安装了 Docker，这是默认配置。
## 怎么做…
如上所述，除非被告知，否则 Docker 不会为容器提供 IPv6 地址。为了在 Docker 中启用 IPv6，我们需要向 Docker 服务传递一个服务级别标志。
### 注
如果您需要了解如何定义 Docker 服务级别参数，请参阅[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*中的最后一个方法，我们将在运行`systemd`的系统上讨论如何配置这些参数。
除了启用 IPv6 功能，您还需要为`docker0`网桥定义一个子网。为此，我们将为 Docker 修改我们的`systemd`插件文件，并确保它具有以下选项:
*   主机上`docker1` :
    ```
    ExecStart=/usr/bin/dockerd --ipv6 --fixed-cidr-v6=2003:cd11::/64
    ```