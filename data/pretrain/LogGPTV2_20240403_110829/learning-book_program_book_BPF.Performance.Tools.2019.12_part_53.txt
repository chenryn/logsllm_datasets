# 定义常量
```c
#define BLK_STS_NEXUS 9
#define BLK_STS_NEDIUH 12
#define BLK_STS_PROTECTI08 8
#define BLK_STS_RESOURCE 6
#define BLK_STS_I0ERR 34
```

# 文件操作日志
- **filebeat** 在 `nd0` 设备上执行了多次磁盘刷新操作：
  - 时间：23:43:53，进程ID：5575
  - 时间：23:43:58，进程ID：5824

## md flush 事件分析
md flush 事件通常是不频繁的，并且会导致大量的磁盘写入操作，从而影响系统性能。了解这些事件发生的具体时间有助于与监控仪表板进行关联，以查看它们是否与延迟峰值或其他问题对齐。

通过跟踪 `md_flush_request()` 函数，可以发现 filebeat 每五秒执行一次 md flush 操作。由于事件频率较低，这种操作的开销应该是微不足道的。

### BCC 工具
目前，`mdflush(8)` 不支持任何选项。

### bpftrace 代码
以下是使用 bpftrace 实现的代码：
```bash
#!/usr/local/bin/bpftrace
#include <linux/kprobes.h>
BEGIN {
    printf("Tracing nd flush events... Hit Ctrl-C to end.\n");
    printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "DEVICE");
}

kprobe:md_flush_request {
    time = strftime("%H:%M:%S");
    printf("%-8s %-6d %-16s %s\n", time, pid, comm, (struct bio *)arg1->bi_disk->disk_name);
}
```
该程序通过 `struct bio` 参数获取磁盘名称。

## I/O 调度器追踪
`iosched(8)` 追踪 I/O 调度器中的请求排队时间，并按调度器名称分组。例如：
```bash
#!/usr/local/bin/bpftrace
#include <linux/kprobes.h>
BEGIN {
    printf("Tracing block I/O schedulers. Hit Ctrl-C to end.\n");
}

kprobe:elv_add_request {
    @start[arg1] = nsecs;
}

kprobe:blk_start_request / [arg1]->bio / {
    @usecs[pid][comm][arg1->q->elevator->type->elevator_name] = (nsecs - @start[arg1]) / 1000;
    delete(@start[arg1]);
}

END {
    clear(@start);
}
```
该工具记录请求添加到 I/O 调度器的时间戳，并在 I/O 发出时计算排队时间。调度器名称从 `struct request` 中获取。

## SCSI 命令延迟追踪
`scsilatency(8)` 是一个用于追踪 SCSI 命令延迟分布的工具。例如：
```bash
#!/usr/local/bin/bpftrace
#include <linux/kprobes.h>
BEGIN {
    printf("Tracing scsi latency. Hit Ctrl-C to end.\n");
}

// SCSI opcodes from scsi/scsi_proto.h; add more mappings if desired:
@opcode[0x08] = "READ_6";
@opcode[0x0a] = "WRITE_6";
@opcode[0x28] = "READ_10";
@opcode[0x2a] = "WRITE_10";
@opcode[0x35] = "SYNCHRONIZE_CACHE";

kprobe:scsi_init_io {
    @start[arg0] = nsecs;
}

kprobe:scsi_done / @start[arg0] / {
    $cmd = (struct scsi_cmnd *)arg0;
    $opcode = $cmd->request->cmd[0] & 0xff;
    @usecs[$cmd->device->host->host_no][$opcode] = (nsecs - @start[arg0]) / 1000;
    delete(@start[arg0]);
}

END {
    clear(@start);
    clear(@opcode);
}
```
该工具将 SCSI 命令码转换为名称，并显示每个命令的延迟分布。

## SCSI 命令结果总结
`scsiresult(8)` 总结了 SCSI 命令的结果，包括主机和状态码。例如：
```bash
#!/usr/local/bin/bpftrace
#include <linux/kprobes.h>
BEGIN {
    printf("Tracing scsi command results. Hit Ctrl-C to end.\n");
}

// host byte codes from include/scsi/scsi.h:
@host[0x00] = "DID_OK";
@host[0x01] = "DID_NO_CONNECT";
@host[0x02] = "DID_BUS_BUSY";
@host[0x03] = "DID_TIME_OUT";
@host[0x04] = "DID_BAD_TARGET";
@host[0x05] = "DID_ABORT";
@host[0x07] = "DID_ERROR";
@host[0x0b] = "DID_SOFT_ERROR";
@host[0x0c] = "DID_IMM_RETRY";
@host[0x0d] = "DID_TRANSPORT_DISRUPTED";
@host[0x10] = "DID_TARGET_FAILURE";

// status byte codes from include/scsi/scsi_proto.h:
@status[0x00] = "SAM_STAT_GOOD";
@status[0x02] = "SAM_STAT_CHECK_CONDITION";
@status[0x04] = "SAM_STAT_CONDITION_MET";
@status[0x08] = "SAM_STAT_BUSY";
@status[0x10] = "SAM_STAT_INTERMEDIATE";
@status[0x14] = "SAM_STAT_INTERMEDIATE_CONDITION_MET";
@status[0x28] = "SAM_STAT_TASK_SET_FULL";
@status[0x40] = "SAM_STAT_TASK_ABORTED";

tracepoint:scsi:scsi_dispatch_cmd_done {
    @[@host[(args->result >> 16) & 0xff], @status[args->result & 0xff]] = count();
}

END {
    clear(@status);
    clear(@host);
}
```
该工具通过追踪 `scsi:scsi_dispatch_cmd_done` 事件点并提取主机和状态字节，然后将其映射到内核名称。

## NVMe 命令延迟追踪
`nvmelatency(8)` 追踪 NVMe 存储驱动程序，并按磁盘和 NVMe 命令码显示命令延迟。这有助于隔离设备延迟与块 I/O 层测量的延迟。例如：
```bash
#!/usr/local/bin/bpftrace
#include <linux/kprobes.h>
BEGIN {
    printf("Tracing nvme command latency. Hit Ctrl-C to end.\n");
}

kprobe:nvme_submit_sync_cmd {
    @start[arg0] = nsecs;
}

kprobe:nvme_complete_rq {
    $cmd = (struct request *)arg0;
    $opcode = $cmd->cmd_flags & 0xff;
    @usecs[$cmd->rq_disk->disk_name][$opcode] = (nsecs - @start[arg0]) / 1000;
    delete(@start[arg0]);
}

END {
    clear(@start);
}
```
该工具通过追踪 NVMe 驱动程序函数来显示命令延迟分布。

希望这些优化后的文本能够更清晰、连贯和专业。如果有进一步的需求或修改，请告诉我。