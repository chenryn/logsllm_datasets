(s(xesxq sxog)
define BLK_STS_NEXUS
{9 (e>q a3>)
define BLK_STS_NEDIUH
{c(smqeasxTq soxog>)
define BLK_STS_PROTECTI08
{8(e>q 3>)
define BLK_STS_RESOURCE
(6 (snesxq sxo>)
define BLK_STS_I0ERR
(+=2Z
f1lebeat
nd0
23:43:53 5575
filebest
llebeat
nd0
23:43:58 5824
nd0
[...]
md flush events are usually infrequent and cause bursts of disk writes, perturbing system perfor-
mance. Knowing exactly when they occurred can be useful for correlation with monitoring dash-
boards, to see if they align with latency spikes or other problems.
This output shows a process called filebeat doing md flushes every five seconds (I just discovered
this). filebeat is a service that sends log files to Logstash or directly to Elasticsearch.
This works by tracing the md_flush_request() function using a kprobe. Since the event frequency
is low, the overhead should be negligible.
BCC
mdflush(8) currently does not support any options.
bpftrace
The following is the code for the bpftrace version:
1/usr/local/bin/bpftrace
include 
#1nclude 
BEGIY
printf(*Txacing nd flush eventa... Bit Ctrl-C to end.\o") ;
printf(*8s 6s 16s s*, *TIME*, *pID*, *covM", "EVIcE*1
1.3 0rigin: 1 created it for BCC on 13-Feb-2015 and for bpftrace on 8-Sep-2018
---
## Page 412
9.3 BPF Tools
375
kprobe imd_tLush_request
time I**B:M:s *)
printf (*4=6d 516s ss^n*, pid, conm,
1 (struct bio *) argl >bi_disk=>disk_name] 
The program digs out the disk name via the struct bio argument.
9.3.10 iosched
iosched(8)1 traces the time that requests were queued in the I/O scheduler, and groups this by
scheduler name, For example:
1osched.bt
Attach.ing 5 probes...
Tracing block I/0 schedulers. Hit Ctr1-C to end.
^C
fusecs [cfq] :
[2, 4)
11
[4, 8]
318
[8, 16}
80886e81 8t
[16,32)
6188
[32, 64)
0 1
[64, 128]
0 1
[128, 256}
0 1
[256, 512}
0 1
[512, 1K)
6188
[1K, 2K)
81869
[2K, 4K)
0 1
[4K, 8K)
0 1
[8K, 16K)
886886886881 87
[16K,32K]
131 186988988e886 886988986986986988988e886 886988986986986 1
[32x, 64K}
68 188e88e88e888888e88e88988e8
: on 20-Mar-2019
---
## Page 413
376
 Chapter 9 Disk I/0
This shows the CFQ scheduler in use, with queueing times usually between eight and
64 milliseconds.
The source to iosched(8) is:
#1/usx/1ocal/bin/bpEtrace
#Include 
BEGIN
printf (*Tracing block I/0 schedulers. Bit Ctrl-C to end.\n*);
kprobe1_elv_add_request
Bstart [argl]  = nsecs
kprobe :blk_staxt_request,
kprobe :blk_mq_start_request
/ [06xe]xes8/
f@6xe (. 1senbexona1s) =3S
Busecs[$r=>q=>elevator=>type=>elevator_nane]=
[000t / ([06:e]xes8 - so9su) 15g
delete (@start[arg0]1 
END
clear (8start) 
This works by recording a timestamp when requests were added to an I/O scheduler via an eleva-
This focuses tracing I/O to only those that pass via an I/O schedulet, and also focuses on tracing
tor function, elv_add_request(), and then calculating the time queued when the I/O was issued.
just the queued time. The scheduler elevator) name is fetched from the struct request.
With the Linux 5.0 switch to multi-queue only, the blk_start_request() function was removed
from the kernel. On that and later kernels this tool will print a warning about skipping the blk
start_request( kprobe, which can be ignored, or that kprobe can be removed from this program.
---
## Page 414
9.3  BPF Tools
377
9.3.11
scsilatency
scsilatency(8)1# is a tool to trace SCSI commands with latency distributions. For example:
+sesilatency.bt
Attaching 4 probes..
Tracing scsi latency. Hit Ctrl-C to end.
C
?usecs [0, TEST_ONIT_READY] :
[128K, 256K]
[256K, 512K)
2 18ee88e88e88e e8ee8ee8ee8ee8ee88e88e
[512K,14)
0 1
[1H, 2H)
868888888886881T
[2M, 4M)
21889889889888 8889889889889889889889
[4M, 8N)
3 leeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1
[8M, 168)
118ee88e88e88e 886e8
fusecs [42, WRITE_10] :
[2K, 4K)
218
[4K, 8K)
01
[8K, 16K)
2 18
[16K,32K)
(x9*x21
57 18ee88e88e88e888e88e88e8898ee88e88e88e888e88e88e8ee8e1
pusecs [40, READ_10]:
[4K,8K)
1518
[BB, 16K]
676 888888 888888888808e88e886 888e88e88e88e80 1
[16K,32K]
47 88 888888889
[323, 64K)
2 1
[..]
This has a latency histogram for each SCSI command type, showing the opcode and command
name (if available).
The source to scsilatency(8) is:
1/usz/local/bin/bpftrace
include 
BEGIN
15 0riginc I created it for
---
## Page 415
378
Chapter 9 Disk I/0
printf (*7xacing scs1 latency. Hit Ctr1-C to end. \n*)
// SCSI opcodes fron scsi/scsi_proto.h; add more mappings if desired:
xoYagsIanLs3L。= [0oxolepoodog
rμ3sNss"Lsan0sx. - [coxo]apoodog
Bopcode[0x08] - *READ_6′;
Bopcode[0x0a] = *WRITE_6”;
9x33s - [ox0]epoodog
rμXHIoONI。 - [ZTx0]apoodog
3sY3. -[s1xo]epoodo8
Bopcode[0x28] - *REA_10*;
μ0tsLIHn = [ezxo]epoodog
0Txass。 - [q7x0]apoodog
Bopcode[0x35] - *&YHCHRONIZE_CACHE*;
kprobe:scsi_init_io
Bstart [arg0] = nsecs
J
kprobe:scs1_done,
kprobe:scsi_mq_done
/8start[arg01/
$csnd = (struct sesl_cnmd *)arg0;
$opcode = *$cnnd>req,cnd ≤ 0xff;
(o0ot / ([obxe]xeasg - soesul )astu = I[epoodogl apcodog *epcodog]soesn.
1
END
clear (8start) : clear (Bogcode) :
There are many possible SCSI commands; this tool only translates a handful into the opcode
names. Since the opcode number is printed with the output, if a translation is missing it can still
be determined by referring to scsi/scsi_proto.h, and this tool can be enhanced to include it.
There are scsi tracepoints, and one is used in the next tool, but these lack a unique identifier,
which would be needed as a BPF map key to store a timestamp.
Due to the Linux 5.0 switch to multi-queue only, the scsi_done() function was removed, and so
the kprobe:scsi_done can be removed.
---
## Page 416
9.3 BPF Tools
379
With the Linux 5.0 switch to multi-queue only, scsi_done( function was removed from the
kernel. On that and later kernels this tool will print a warning about skipping the scsi_done0
kprobe, which can be ignored, or that kprobe can be removed from this program.
9.3.12 scsiresult
scsiresult(8)l summarizes SCSI command results: the host and status codes. For example:
+scsiresult.bt
Attaching 3 pzobes..
Tracing scsi cormand results. Hit Ctrl-C to end.
°C
? [DID_BAD_TARGET, SAM_STAT_GOOD]: 1
[DID_OK, SAM_STAT_CHECK_CONDITION] : 10
e[DID_OK, SAH_STAT_G00D] : 2202
This shows 2202 results with the codes DID_OK and SAM_STAT_GOOD and one with DID_BAD_
TARGET and SAM_STAT_GOOD. These codes are defined in the kernel source, for example, from
include/scsi/scsi.h:
define DID_OK
0x00
/* NO erroT
/* Couldn*t connect before tineout period
* /
define DID_HO_COMMECT
0x01
/
ASng"sng ara eutgep#
0x02
/* BUS stayed busy through tine out pexlod */
define DID_TIME_OT
C0X)
/* TIMED oUT for other resson
* /
define DID_BAD_7ARGET0x04
/* BAD target.
* /
[...]
This tool can be used to identify anomalous results from SCSI devices.
The source to scsiresult(8) is:
#1/usx/1ocal/bin/bpEtrace
BEGIX
printf(*Tracing scsl conmand results. Bit Ctrl-C to end.\n*):
// host byte codes, fron Include/scsi/scsl.h:
rμx0α10。 - [00x0]oqB
ghost [Ox01] = *DID_NO_CONNECT* ,;
Bhost[0x02] = *DID_BUS_BUSY";
Bhost [0x03] = *DID_TIXE_OUT";
16 0riginc I created it for this bo
: 0n 21-M8r-2019,
spired by slit
ools I created for the 2011 DTrace book [Gregg 11]
---
## Page 417
380
0Chapter 9 Disk I/0
Bhost[0x05] = *DID_AB0RT";
XLIxVa(10。 - [90x0]soq8
Bhost [OxO7] = *DID_ERROR";
rL3ss8α10。 - [e0x0]soqg
uxINIgY8(10。 = [60x0]aeo8
fHOn08HLssvaaIa。 = [egx0]eoqg
ghost[0xOb] = *DID_SOFT_ERROR*;
Bhost[0xOc] = *DID_IMM_RETRY*;
f3nsn0s"1a。 = [poxolsou8
Bhost [0xDe] = *DID_TRANSPORT_DISRUPTED*;
Bhost [0x10] = *DID_TARGET_FAILURE*;
3HCTIYasnxaN0Ia。 - ITtx0]4s08
3xT1a007Tv1。 = [x0]20q8
// status byte codes, fron include/scsl/scsi_pzoto.h:
Bstatus[0x00] - *SAM_STAT_GOCo*;
Bstatus[OxO2] = *SAM_STAT_CHECK_CONDITION*;
Bstatus[0x04] - *SAM_STAT_CONDITION_MET*;
Bstatus[0xO8] - *SAH_STAT_BUSY";
Bstatus[0x10] = *SAM_STAT_INTERMEDIATE*≠
Bstatus[Ox14] = *SAM_STAT_INTERMEDIATE_CONDITION_MET";
Bstatus [0x28] - *SAM_STAT_TASK_SET_rULL*;
Bstatus [0x40] - *SAM_STAT_TASK_ABORTED*;
tacepoint:scsl:scsi_dispatch_cnd_done
[ghost[ (args=>zesult >> 16) & Oxff], @status [axgs=>zesult & Oxff]1 =
count (1 
EXD
clear (8status) 
clear (Bhost) 
---
## Page 418
9.3 BPF Tools
381
This works by tracing the scsi:scsi_dispatch_cmd_done tracepoint and fetching the host and
status bytes from the result, and then mapping them to kernel names. The kernel has similar
lookup tables in include/trace/events/scsi.h for the tracepoint format string.
The result also has driver and message bytes, not shown by this tool. It is of the format:
driver_byte << 24 1host_byte << 16 1 msg_byte << 8 1 status_byte
This tool can be enhanced to add these bytes and other details to the map as additional keys.
Other details are readily available in that tracepoint:
+ bpftrace -1v t:sesi:scsi_dispatch_cnd_done
tracepointiscsi:scsi_dispatch_cnd_done
un.signed Int host_no
unsigned int channel
un.sigmed int 1d;
unsigned int lun,
int result;
unsigned int opcode,
un.signed int cnd_len
un.signed int data_sglen:
un.signed 1nt prot_sglen
un.signed char prot_op7
_data_loc unslgned char [] cmnd;
Even more details are available via kprobes of scsi functions, although without the interface
stalbility.
9.3.13nvmelatency
nvmelatency(8)^ traces the nvme storage driver and shows command latencies by disk and nvme
command opcode. This can be useful for isolating device latency from the latency measured
higher in the stack at the block 1/O layer. For example:
nvmelatency.bt
Attaching 4 probes...
Tracing nvse connand Latency. Hit Ctx1-C to end.
^C
fusecs [nvmelnl, nvme_md_flush] :
[B, 16}
2188e88e889
[16, 32)
718e988e88e886 88ee88e8e986e8ee88e88
[32, 64)
6 18ee8ee88e88e 88ee8ee8ee8ee8ee
17 Origin: I crested it for this book on 21-Mar-2019, inspired by similar storage driver tools that I created for the 2011
DTrace book [Greg 11]
---
## Page 419
382
Chapter 9 Disk I/O
[64, 128]
11 1889889889886 8869889889869869889889886 8869889889869861
(95z *8z1]
[256, 512}
0 1
[512,1K)
88888688 886881 E
[1K,2K)
81869889889886 889889889889889889889886
[2K, 4K)
1188e8
[4K, 8K)
086888 8886886886881 6
cmd_vri te] :
[8, 16}
86e81 E
[16, 32)
37 18e988 88e886 88ee88 8e986 8e988 88e886 88ee88 8e986e881
[32, 64)
20 188e88e88e88e888e88e88e88e880
[64, 128]