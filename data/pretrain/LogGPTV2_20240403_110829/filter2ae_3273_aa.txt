客户端CSRF是一种新型的CSRF漏洞，攻击者可以通过修改程序的输入参数，欺骗客户端JavaScript程序将伪造的HTTP请求发送到易受攻击的目标站点。现有研究对这个新漏洞几乎一无所知，而基于JavaScript的Web应用程序的探索性安全性评估由于缺乏可靠且可扩展的测试技术而受到阻碍。本文介绍了工具JAW（
），该工具可利用混合属性图上的声明式遍历（针对JavaScript程序的标准混合模型），针对客户端CSRF来分析现代Web应用程序。
本研究使用JAW评估了Bitnami目录中所有（即106个）Web应用程序中客户端CSRF漏洞的普遍性，涵盖了超过2.28亿行JavaScript代码。本文工具发现了12,701个可伪造的客户端请求，总共影响了87个Web应用程序。对于203个可伪造的请求，针对七个Web应用程序成功创建了客户端CSRF攻击，这些Web应用程序可以执行任意服务器端状态更改操作或启用跨站点脚本和SQL注入，而这是传统攻击向量无法实现的。最后分析了可伪造的请求并确定了25个请求模板，突出显示了可以操纵的字段和操纵的类型。
## 0x01 简介
客户端跨站点请求伪造（客户端CSRF）是影响现代Web应用程序的新型CSRF漏洞。与更传统的CSRF一样，攻击者可以短暂访问恶意URL，从而诱骗受害者的浏览器以用户的名义向目标网站发送经过身份验证的，对安全性敏感的HTTP请求，而无需用户的同意或意识到。在传统的CSRF中，易受攻击的组件是服务器端程序，该程序无法区分传入的身份验证请求是否是有意执行的，也称为混淆代理问题。通常通过添加伪随机不可预测的请求参数，防止伪造或更改默认浏览器的行为并避免在跨站点请求中包含HTTP
cookie。在客户端CSRF中，易受攻击的组件是JavaScript程序，它使攻击者可以通过修改JavaScript程序的输入参数来生成任意请求。与传统的CSRF相反，现有的反CSRF对策不足以保护Web应用程序免受客户端CSRF攻击。
客户端CSRF非常新，它在2018年首次影响了Facebook
，而且研究者几乎不了解易受攻击的行为，新漏洞的严重性以及利用情况。研究新漏洞不是一件容易的事，因为它需要每个真实的Web应用程序收集和分析数百个网页。不幸的是，此类分析主要由于缺乏适用于检测和分析易受攻击的JavaScript行为的可靠且可扩展的工具而受到阻碍。
通常，研究基于JavaScript的Web应用程序中的客户端CSRF漏洞并非易事。首先，没有JavaScript代码的规范表示。其次，JavaScript程序是事件驱动的，需要模型来捕获这方面并将其纳入规范表示中。第三，由于JavaScript程序及其执行环境的动态特性，纯静态分析通常不够准确，因此需要混合静态+动态分析技术。最后，JavaScript库构成了跨网页的代码中值得注意的一部分，并且反复分析它们会导致效率低下的模型，不适合检测漏洞。
在本文中，通过提出混合属性图（HPG）来解决这些挑战，该属性图是客户端JavaScript程序的一种基于图的一致表示形式，可以捕获静态和动态程序行为。受先前工作的启发，使用属性图进行模型表示和声明式图遍历，以识别对安全敏感的HTTP请求，这些请求消耗来自攻击者可控源的数据值。另外介绍了JAW，这是一个用于检测客户端CSRF的工具，该框架从种子URL开始，通过自动收集Web资源并监视程序执行来实例化HPG。
## 0x02 背景
### A.客户端CSRF
客户端CSRF是一类新的CSRF漏洞，攻击者可以通过操纵该程序的输入参数来欺骗客户端JavaScript程序，以将伪造的HTTP请求发送到易受攻击的目标站点。在客户端CSRF攻击中，攻击者诱使受害者单击属于攻击者控制的网页或诚实但易受攻击的网站的恶意URL，从而导致目标网站的与安全性相关的状态更改。
**影响：**
与经典CSRF相似，可以利用客户端CSRF在服务器端执行对安全敏感的操作并损害数据库完整性。成功的CSRF攻击可能导致远程执行代码，非法汇款或假冒和身份欺诈等等。
**根本原因：**
当JavaScript程序使用攻击者控制的输入（例如URL）来生成传出的HTTP请求时，就会产生客户端CSRF漏洞。下面将讨论操作不同的JavaScript输入源所需的功能。
**威胁模型：**
攻击者的总体目标是通过操纵各种JavaScript输入源来伪造客户端HTTP请求。在本文中考虑URL，窗口名称，文档引荐来源网址，postMessages，Web存储，HTML属性和cookie，它们各自需要不同的攻击者功能。操纵URL，窗口名称，引荐来源网址和postMessages要求攻击者能够伪造URL或控制恶意网页。例如，网络攻击者可以制作一个恶意URL，该URL属于诚实但易受攻击的网站的来源，当受害者访问该URL时，目标站点的JavaScript程序会自动提交HTTP请求。
网络攻击者可以控制恶意页面，并使用浏览器API欺骗目标页面的易受攻击的JavaScript，以发送HTTP请求。例如，网络攻击者可以使用window.open(
)在新窗口中打开目标URL，将postMessages发送到打开的窗口，或通过window.name
API设置窗口名称。此外，Web攻击者可以利用攻击者控制的网页的URL来操纵document.referrer。
对于Web存储和HTML属性，攻击者需要在Web存储或DOM树中添加临时数据项。
Web攻击者可以假设Web应用程序提供了这样的功能（例如，通过HTTP请求）来实现。同样，了解XSS漏洞的Web攻击者可以操纵Web存储或DOM树。最后，修改Cookie可能需要强大的攻击者，例如网络攻击者。攻击者可以通过修改可能处于休眠状态的cookie将永久的客户端CSRF有效载荷植入受害者的浏览器中，然后利用该cookie攻击受害者。注意到，网络攻击者也可以执行网络攻击者执行的所有攻击。
**漏洞：** Listing
1展示了一个易受攻击的脚本，该脚本基于本研究在SuiteCRM中发现的真实漏洞，该脚本在页面加载期间通过HTTP请求获取购物发票。首先，程序获取一个具有id输入的HTML输入字段（第1行），然后定义一个事件处理程序h，该事件处理程序h负责通过异步请求获取发票的价格，并使用价格填充输入（第2-9行）。对于异步请求，函数h使用YUI库，该库为低级XMLHttpRequest浏览器API提供了包装asyncRequest。然后，将函数h注册为名为loadInvoice的自定义事件的处理程序。此事件由函数showInvoicePrice分派（第14-16行）。当JavaScript程序使用URL片段存储HTTP请求的服务器端终结点时，就会发生此漏洞（第3-5行），攻击者可以修改该输入。
**攻击：** 上图显示了利用Listing
1的客户端CSRF漏洞进行攻击的示例。首先，攻击者通过将目标站点的URL作为URL片段插入来准备易受攻击站点的URL（步骤1）。然后，诱使受害者访问易受攻击的URL（步骤2），因为它属于用户信任的应用程序。页面加载完成后（步骤3），JavaScript代码将从URL片段中提取URL，并向目标站点发送异步HTTP请求，这又会导致目标服务器上与安全性相关的状态更改。
**现有防御措施无效：** 在过去的几年中，社区提出了针对CSRF的几种防御措施。最近，浏览器供应商提议通过将所有cookie都默认标记为SameSite
=
Lax来引入更严格的相同站点cookie策略。不幸的是，现有机制无法提供针对客户端CSRF攻击的完整保护，例如，当使用同步Token或自定义HTTP标头时，JavaScript程序会将它们包括在外发请求中，如图所示Listing
1的第7行中。此外，如果浏览器或网站对cookie使用同一站点策略，则JavaScript网页一旦加载，便可以执行初步的同一站点请求，以确定是否存在预先建立的用户会话绕过同一个网站政策。
### B.挑战
在这项工作中，打算在Web应用程序的客户端JavaScript代码中研究新的客户端CSRF漏洞。在提出解决方案之前，将展示实现目标所需要解决的挑战。
**（C1）静态表示模型：**
通过静态分析来分析JavaScript程序具有极大的挑战性。例如，先前的工作提出了过程间控制流程图，数据流相关性图表，类型分析器和指向分析。不幸的是，这些方法提供了程序的临时表示，每个方法都集中在一个单独的方面，而这不足以研究客户端CSRF。最近看到了一些新的想法，它们将静态表示与代码属性图（CPG）统一在一起。但是，这些新想法并不是针对JavaScript的细微差别而定制的，例如异步事件或执行环境。迄今为止，还没有用于JavaScript的模型可以提供规范的表示形式来进行代码的检测和探索性分析。
**（C2）特定于漏洞的分析工具：**
在过去的几年中，已经有很多方法可以检测客户端JavaScript程序中的漏洞。迄今为止，这些方法已主要应用于XSS或逻辑和验证漏洞，这些工具与漏洞的具体分析紧密结合在一起。因此，试图研究新的客户端漏洞（如客户端CSRF）的研究人员被迫重新实施那些重新发现调整和陷阱的方法。
**（C3）基于事件的控制权转移：**
现有的统一表示形式（例如CPG）假设控制权的转移仅通过函数调用发生，而这一假设不再适用于JavaScript。在JavaScript中，控制转移也通过事件发生，这些事件要么源于环境，例如鼠标事件，要么是用户定义的，如清单1所示。当分派一个事件时，将执行一个或多个注册函数，这些事件将被执行。可以更改程序的状态，注册新的处理程序并触发新事件。表示通过事件处理程序进行的控制转移是分析JavaScript程序的基础。
**（C4）动态Web执行环境：**
JavaScript程序依赖于许多动态行为，因此很难通过纯静态分析来研究它们。一个典型的例子是动态代码加载。本质上，就像其他资源一样，JavaScript程序可以流式传输到用户的Web浏览器。因此，与大多数静态分析方法中的假设相反，整个JavaScript代码可能无法用于分析。另一个示例是JavaScript与DOM树之间的交互。例如，考虑两个包含相同DOM树节点的变量；但是，一个变量的内容是通过document.querySelector（“
input”）获取的，而另一个是通过document.form [0]
.input获取的。在这种情况下，确定两个变量是否指向同一个对象（即指向分析）通常很重要。但是，通过查看源代码很难确定这一点，因为DOM树通常是由同一程序生成的。
**（C5）共享的第三方代码：**
大多数现代的Web应用程序至少包括一个第三方JavaScript库，例如jQuery，以从其对低级浏览器API的强大抽象中受益。客户端CSRF的检测需要能够确定程序何时执行HTTP请求，以及程序何时将低级网络操作委托给库。同样，库函数可以是程序数据流的一部分。
迄今为止，现有方法的效率非常低，因为它们在分析中包括了库的源代码。观察到外部库占每个网页的JavaScript代码行总数的60.55％，因此即使在访问同一Web应用程序的新页面时，也需要使用现有技术来重新处理相同的代码。一种替代方法包括创建手工制作的库模型。尽管这种方法在对低级浏览器API进行建模时很有效，但无法很好地扩展到外部库。首先，外部库的更新频率要高于浏览器API，其次，JavaScript程序可以使用许多替代库。
### C.方法概述
为了克服挑战，本研究提出了混合属性图（以下简称HPG），这是JavaScript程序的基于图的规范模型。此外，提出了JAW，这是一个从种子URL开始构建HPG的工具，并利用声明式性图遍历来检测客户端CSRF。本文方法解决了以下挑战：
**（C1）** HPG为JavaScript源代码提供统一的规范表示，类似于C / C ++ [91]和PHP [33]的代码属性图。
**（C2）**
定义HPG并开发JAW，以能够执行各种安全任务，即对客户端CSRF漏洞的检测和探索性分析。将代码表示形式（图）与分析（遍历）解耦可能会使JAW更适合重用（就像其他基于CPG的方法一样）。但是，由于研究目标是研究客户端CSRF，因此在本文中，既不针对HPG，也不主张HPG可重用性。