printf(“08%x:%s\n”, uregs[R_EIP], probefunc);
}
Here is a sample of running it.
$ sudo dtrace -qp 65567 -s instruction_tracer2.d
0894784cf0:WTF::fastMalloc(unsigned long)
0894787160:WTF::fastFree(void*)
0894787850:WTF::fastZeroedMalloc(unsigned long)
0894784cf0:WTF::fastMalloc(unsigned long)
0894787160:WTF::fastFree(void*)
089478f8e0:KJS::JSLock::lock()
089478f9a0:KJS::JSLock::registerThread()
089478f9b0:KJS::Collector::registerThread()
0894796910:KJS::JSObject::type() const
08947b3080:KJS::InternalFunctionImp::implementsCall() const
08947993f0:KJS::JSGlobalObject::globalExec()
0894799400:KJS::JSGlobalObject::startTimeoutCheck()
9955336633cc0044..iinndddd 9933 11//2255//0099 44::4400::4466 PPMM
94 Part II ■ Discovering Vulnerabilities
08947fd3f0:KJS::JSObject::call(KJS::ExecState*, KJS::JSObject*,
KJS::List const&)
08947b90b0:KJS::FunctionImp::callAsFunction(KJS::ExecState*,
KJS::JSObject*, KJS::List const&)
08947b92c0:KJS::FunctionExecState::
FunctionExecState(KJS::JSGlobalObject*, KJS::JSObject*,
KJS::FunctionBodyNode*, KJS::ExecState*, KJS::F
08947b9430:KJS::JSGlobalObject::pushActivation(KJS::ExecState*)
08947b9530:KJS::ActivationImp::init(KJS::ExecState*)
If you aren’t interested in the order of execution but purely in which functions
or instructions are executed, you can use the following probes. For instructions
within a function, we use the following:
pid$target:JavaScriptCore:jsRegExpCompile*:
{
@code_coverage[uregs[R_EIP]] = count();
}
END
{
printa(“0x%x : %@d\n”, @code_coverage);
}
Here we trace only the instructions within the jsRegExpCompile function in
the JavaScriptCore framework. Of course, we could do this for any combination of
functions or, for that matter, all instructions. The @ sign denotes a special aggrega-
tion in D. This is an effi cient way for DTrace to collect data. The printa function is
used to print aggregates, and the @ sign is used to print the corresponding aggre-
gate value—in this case the number of times the probe was executed.
Running this script against Safari reveals the following:
$ sudo dtrace -p 4535 -qs code_coverage.d
^C
0x9714f4e1 : 6
0x9714f4e3 : 6
0x9714f4e4 : 6
0x9714f4e5 : 6
0x9714f4e6 : 6
0x9714f4e9 : 6
0x9714f4ec : 6
0x9714f4f1 : 6
0x9714f4f2 : 6
0x9714f4f5 : 6
0x9714f4f8 : 6
0x9714f4ff : 6
0x9714f501 : 6
0x9714f507 : 6
0x9714f50a : 6
…
9955336633cc0044..iinndddd 9944 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 95
It doesn’t print anything until you quit DTrace, at which point it prints out all
the instructions that were hit and the number of times each was executed.
Here is the function-coverage program.
pid$target:JavaScriptCore::entry
{
@code_coverage[probefunc] = count();
}
With just a few lines of D you are able to replicate much of the functionality
of Pai Mei, which is a reverse-engineering framework named after a character in
the movie Kill Bill 2. We’ll discuss Pai Mei in more detail in the section “Binary
Code Coverage with Pai Mei” later in this chapter. Here is an example of this
probe in use.
$ sudo dtrace -p 65567 -s code_coverage2.d
dtrace: script ‘code_coverage2.d’ matched 2048 probes
^C
KJS::CaseBlockNode::executeBlock(KJS::ExecState*, KJS::JSValue*)
1
KJS::Collector::collect() 1
KJS::Collector::markCurrentThreadConservatively() 1
KJS::Collector::markProtectedObjects() 1
KJS::Collector::markStackObjectsConservatively(void*, void*)
1
KJS::DoWhileNode::execute(KJS::ExecState*) 1
KJS::EmptyStatementNode::EmptyStatementNode() 1
KJS::EmptyStatementNode::isEmptyStatement() const 1
Example: Memory Tracer
The fi nal example is useful for heap analysis. This program will allow you to
watch as buffers are allocated and freed. In particular, you can watch particular
size allocations, which might help you track down what is happening to the data
you are passing into the target program. Additionally, stack backtraces could be
printed for allocations that match the buffer size using the D function ustack().
pid$target::malloc:entry,
pid$target::valloc:entry
{
allocation = arg0;
}
pid$target::realloc:entry
{
allocation = arg1;
}
9955336633cc0044..iinndddd 9955 11//2255//0099 44::4400::4466 PPMM
96 Part II ■ Discovering Vulnerabilities
pid$target::calloc:entry
{
allocation = arg0 * arg1;
}
pid$target::calloc:return,
pid$target::malloc:return,
pid$target::valloc:return,
pid$target::realloc:return
/allocation > 300 && allocation  N/A
EBX: 00001fa6 ( 8102) -> N/A
ECX: bffff6ac (3221223084) -> /z (stack)
EDX: 96735b06 (2524142342) -> N/A
9955336633cc0044..iinndddd 9977 11//2255//0099 44::4400::4466 PPMM
98 Part II ■ Discovering Vulnerabilities
EDI: 00000000 ( 0) -> N/A
ESI: 00000000 ( 0) -> N/A
EBP: bffff778 (3221223288) ->
....n.......................................................O...{......
.................2...T.......*...;...C...W...g.........................
......./test.../test.MANPATH=/sw/share/man:/Library/Frameworks/Python.
framework/Versions/Current/man:/opt/local/sh (stack)
ESP: bffff750 (3221223248) ->
....B...K...................C...............n...........................
............................O...{.......................2...T.......*...
;...C...W...g................................/test.../test.MANPATH=/sw/
share/man:/Library/Frameworks/Python.fram (stack)
+00: 00000001 ( 1) -> N/A
+04: 00000042 ( 66) -> N/A
+08: 8fe0154b (2413827403) -> N/A
+0c: 00001000 ( 4096) -> N/A
+10: 00000000 ( 0) -> N/A
+14: 00000000 ( 0) -> N/A
…
Now that you understand the basics of PyDbg, we’ll walk you through a few
examples of its use to give a fl avor for the types of things it can do. The pos-
sibilities are limited only by the user’s imagination.
Memory Searching
One of the features that GDB is missing on all platforms is the ability to search
memory. There are many times when this capability would be useful, such as
when searching memory to see where a fi le has been mapped, or looking for
shellcode. Using PyDbg, this is rather simple.
Consider the following PyDbg script:
#!python
from pydbg import *
dbg = pydbg()
dbg.attach(int(sys.argv[1]))
dbg.search_memory(“PATH”)
dbg.detach()
This script simply performs the necessary prologue, attaches to a process
specifi ed by the PID, searches memory for the string “PATH,” and then detaches
from the process. This is all accomplished in basically four lines of Python.
$ python test9.py 625
8fe25ca0: 4c 44 5f 46 52 41 4d 45 57 4f 52 4b 5f 50 41 54
LD_FRAMEWORK_PAT
8fe25cb0: 48 00 44 59 4c 44 5f 46 41 4c 4c 42 41 43 4b 5f
H.DYLD_FALLBACK_
9955336633cc0044..iinndddd 9988 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 99
bffff830: 73 74 00 00 2e 2f 74 65 73 74 00 4d 41 4e 50 41
st…/test.MANPA
bffff840: 54 48 3d 2f 73 77 2f 73 68 61 72 65 2f 6d 61 6e
TH=/sw/share/man
In this example, the script found two instances of the string “PATH” in
memory.
In-Memory Fuzzing
In the next chapter, we will discuss the vulnerability-discovery technique
known as fuzzing. This technique has been used to fi nd a variety of security
issues in a wide range of programs. The basic idea is to send anomalous data
into a program in an attempt to make it crash. One problem that comes up in
fuzzing can be addressed with PyDbg. Namely, with fuzzing, we are limited
to interacting only with the interfaces of the target, but sometimes we are inter-
ested in a particular section of code located deep within the program.
This issue may manifest itself in a number of ways. The data entering the
program may be encrypted. Rather than reimplement the program’s encryption
algorithm so that the inputs are passed as the target expects, it would be easier to
fuzz the part of the program that deals with the unencrypted payload. The same
argument holds true for complex, multistep protocols. If we really want to fuzz
only one packet type, but to get to that portion of the protocol we fi rst need to send
a number of complex packets, we will be doing much more work than we’d like.
An example of this occurs with SSL, where a number of packets need to be
exchanged before certain SSL packets are expected and processed. The same
would be true in a shopping application. If we wanted to fuzz the code respon-
sible for parsing a credit-card number, we’d have to design our fuzzer such that
it authenticated to the application, selected some items for the shopping cart,
checked out, and entered the shipping information, all before sending a single
fuzzed credit-card number. Then it would have to clean up by removing items
from the cart, logging out, etc. This is a lot of overhead when we’re interested
in fuzzing only a few lines of code.
The solution is to fuzz not the interface, but the actual code we are interested
in. Consider the following simple application:
#include 
#include 
void print_hi(int y){
char x[4];
memcpy(x, “hi”, 2);
x[y] = 0;
printf(“%s\n”, x);
}
9955336633cc0044..iinndddd 9999 11//2255//0099 44::4400::4466 PPMM
100 Part II ■ Discovering Vulnerabilities
int main(int argc, char *argv[]){
getchar();
print_hi(atoi(argv[1]));
}
This program attempts to print out the word “hi” but allows the user to spec-
ify where the terminating NULL should go in the fi rst argument to the program.
The call to getchar() is there to allow you time to attach to the program, but isn’t
necessary. This program could easily be fuzzed in the traditional method, at the
interface (in this case via command-line arguments), but here it is an example of
how to fuzz from within a program. You can do this by writing a PyDbg script.
The basic idea is to take a snapshot of the memory and context at the beginning
of the function print_hi, then execute that function many times with different
inputs, being careful to restore the snapshot before each execution. In this way
you get to try many values of inputs to the function print_hi but you have to
send only one input to the program. PyDbg handles the rest.
#!python
from pydbg import *
value = 0
def handler_badness (pydbg):
global value
print “Caused a fault with input %x” % value
return DBG_EXCEPTION_HANDLED
def handler_breakpoint (pydbg):
global value
if(pydbg.context.Eip == 0x00001fbc):
pydbg.suspend_all_threads()
pydbg.process_snapshot()
pydbg.resume_all_threads()
elif (pydbg.context.Eip == 0x00001ffc) :