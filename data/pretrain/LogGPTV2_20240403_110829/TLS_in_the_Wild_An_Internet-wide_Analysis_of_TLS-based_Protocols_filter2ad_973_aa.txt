title:TLS in the Wild: An Internet-wide Analysis of TLS-based Protocols
for Electronic Communication
author:Ralph Holz and
Johanna Amann and
Olivier Mehani and
Mohamed Ali Kâafar and
Matthias Wachs
TLS in the wild: An Internet-wide analysis of
TLS-based protocols for electronic communication
Ralph Holz⇤, Johanna Amann‡, Olivier Mehani†, Matthias Wachs§, Mohamed Ali Kaafar†
⇤University of Sydney, Australia, Email: PI:EMAIL
†Data61/CSIRO, Sydney, Australia, Email: PI:EMAIL
‡ICSI, Berkeley, USA, Email: PI:EMAIL
§Technical University of Munich, Germany, Email: PI:EMAIL
Abstract—Email and chat still constitute the majority of
electronic communication on the Internet. The standardisation
and acceptance of protocols such as SMTP, IMAP, POP3, XMPP,
and IRC has allowed to deploy servers for email and chat in a
decentralised and interoperable fashion. These protocols can be
secured by providing encryption with TLS—directly or via the
STARTTLS extension. X.509 PKIs and ad hoc methods can be
leveraged to authenticate communication peers. However, secure
conﬁguration is not straight-forward and many combinations
of encryption and authentication mechanisms lead to insecure
deployments and potentially compromise of data in transit. In
this paper, we present the largest study to date that investigates
the security of our email and chat infrastructures. We used active
Internet-wide scans to determine the amount of secure service
deployments, and employed passive monitoring to investigate to
which degree user agents actually choose secure mechanisms
for their communication. We addressed both client-to-server
interactions as well as server-to-server forwarding. Apart from the
authentication and encryption mechanisms that the investigated
protocols offer on the transport layer, we also investigated the
methods for client authentication in use on the application layer.
Our ﬁndings shed light on an insofar unexplored area of the
Internet. Our results, in a nutshell, are a mix of both positive
and negative ﬁndings. While large providers offer good security
for their users, most of our communication is poorly secured in
transit, with weaknesses in the cryptographic setup and especially
in the choice of authentication mechanisms. We present a list of
actionable changes to improve the situation.
I.
INTRODUCTION
Despite the rise of mobile messaging and some more
centralised, newer communication platforms, two forms of
electronic, (nearly) instant messaging still remain dominant
on the public Internet: email and chat. Of the two, email is
the most pervasive form of communication ever, with over 4.1
billion accounts in 2014, predicted to reach over 5.2 billion in
2018 [11]. As for chat, the most widely used standard-based
networks are IRC group chats and the XMPP instant messaging
and multi-user conferencing network.
⇤The work was carried out during the ﬁrst author’s time at Data61/CSIRO.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23055
In their early days, email protocols such as SMTP, POP3,
and IMAP were designed with no special focus on security. In
particular, authentication in SMTP was introduced a while after
the protocol’s standardisation, initially as a way to ﬁght spam.
User agents started to move towards encryption and authen-
ticated connections gradually, using the then-new SSL 3 and
later the TLS protocols to protect the transport layer. SSL/TLS
can provide authentication, integrity, and conﬁdentiality. Where
SSL/TLS is not used, user credentials may be transmitted
in plaintext, with no protection against eavesdropping, and
message bodies can be tampered with (unless end-to-end
mechanisms like OpenPGP or S/MIME are used, which is
a comparatively rare setup).
Although SSL/TLS support mutual authentication, the most
common usage pattern in the context of email and chat is
unilateral authentication: only the responder of a communi-
cation is authenticated on the transport layer. The primary
reason for this is the protocols’ reliance on an X.509 Public
Key Infrastructure (PKI) for authentication purposes1 and the
subsequent need for client certiﬁcation, an operation that is
expensive in practice, introduces much administrative overhead,
and often also requires user education. In most cases, initiators
are authenticated on the application layer instead, i.e., by
mechanisms that are speciﬁc to the application layer protocol
in question. Passwords schemes are the most common choice,
although any mechanism that is supported by both initiator
and responder is possible. Different password schemes offer
varying levels of security—e.g., the password may be sent
without further protection over the SSL/TLS channel, or a
challenge-response mechanism like CRAM, or even SCRAM,
may be used. The latter is particularly elegant as it does not
require the responder to store the actual password, nor is the
password ever sent over the connection. The choice of password
scheme has a profound inﬂuence on security in case of missing
authentication on the level of SSL/TLS.
The proper in-band authentication of the responder is a key
element in SSL/TLS. X.509 certiﬁcates are used for this purpose.
These are issued by so-called Certiﬁcate Authorities (CAs),
which are trusted parties whose trust anchors (so-called root
certiﬁcates) are shipped with common software (e.g., operating
systems, browsers, mail clients, . . . ). Unfortunately, it is known
today that X.509 PKIs often suffer from poor deployment
practices. Holz et al. [24] were the ﬁrst to show this in a large-
scale, long-term study for the Web PKI. Durumeric et al. [7]
1Variants of TLS that support other forms of authentication have been
standardised, but seem to be rarely used.
later extended the study to all Internet hosts, conﬁrming the
earlier ﬁndings. However, no such work exists for the electronic
communication protocols on which we rely every day.
In this paper, we present the largest measurement study to
date that investigates the security of SSL/TLS deployments
for email and chat. Based on our ﬁndings, we derive recom-
mendations to achieve better overall security. We employ both
active Internet-wide scans as well as passive monitoring. Active
scans are used to characterise global server installations, i.e.,
how servers are conﬁgured to act as responders in a SSL/TLS
connection. Passive monitoring allows us to investigate the
actual security parameters in use when initiators establish
SSL/TLS connections.
From 2015-06-30 through 2015-08-04, we actively
scanned the IPv4 address space (3.2B routable addresses),
with one scanning run for each protocol we analysed.
We connected to the standard ports for
the considered
protocols: SMTP/STARTTLS, SMTPS, SUBMISSION,
IMAP/STARTTLS, IMAPS, POP3/STARTTLS, and POP3S
for email; for chat, we investigated IRC/STARTTLS, IRCS,
XMPP/STARTTLS, and XMPPS. We performed complete
SSL/TLS handshakes. This allowed us to establish a list of
current deployments (a total of more than 50M active ports),
and collect certiﬁcates, cipher suite offers, and cryptographic
parameters. Where applicable, we also sent application-layer
messages to request
the list of supported methods for
authentication on the application layer. Orthogonally to
this, nine days of passive monitoring (2015-07-29 through
2015-08-06) of a link serving more than 50,000 users showed
more than 16M connections to about 14,000 different services.
We captured the same set of SSL/TLS and authentication-
related parameters from this monitoring data as we did for
active scans. This allows us to compare usage by actual clients
to the simple existence of a deployed service. As a reference
and comparison point, we also considered HTTPS and trafﬁc
on port 443 in both active and passive measurements as the
deployment of this protocol is particularly well understood.
We analysed this data to evaluate the security of connections
and deployments. We considered the validity of the certiﬁcates
and the practices of the issuing CAs, the quality of crypto-
graphic parameters, software, and SSL/TLS versions, as well as
the authentication methods. In a nutshell, we have both negative
and positive ﬁndings to report. Considering active scans, we ﬁnd
that there is much room for improvement. For example, for the
IMAPS servers that completed the TLS handshake, we report
that just under 40% also had correct certiﬁcate chains deployed.
We found such low rates for all protocols—the best-provisioned
service was in fact SMTPS, where just over 40% of servers had
valid certiﬁcate chains. SMTP/STARTTLS, which is used to
forward emails between mail exchange servers, showed a rate
of just 30%. For chat, we found the best results for XMPPS
in server-to-server forwarding: 27% of servers offered valid
certiﬁcates.
When considering data from our passive monitoring and
investigating connections rather than server deployments, the
situation seems much better, at least at a ﬁrst glance: the vast
majority of connections is encrypted and uses valid certiﬁ-
cates (with SMTP/STARTTLS again showing poorer numbers,
however). This is due to the fact that large providers such
as Gmail or Hotmail are properly conﬁgured and offer good
security, and most connections go to these providers. However,
we also found that it is common that the STARTTLS extension
is not supported by servers that receive less connections. In
these cases, connections are not encrypted at all. This is again
particularly often true for email. This phenomenon suggests a
likelihood that communication is often not sufﬁciently secured
in transit between mail exchange servers, unless both sender
and receiver are customers of large providers.
The rest of this paper is organised as follows. The next
section presents background for SSL/TLS, PKI, and the studied
protocols. It also gives an overview of related work. We describe
our data collection methods and datasets in Section III and data
analysis in Section IV. Based on our ﬁndings, we identify risks
and threats in Section V. We suggest some pathways towards
improving the situation before concluding in Section VI.
II. BACKGROUND AND RELATED WORK
A. Standard messaging protocols
The messaging protocols in common use today have been
speciﬁed by the IETF over the years; use with SSL/TLS or
the STARTTLS extension was added later. For example, the
original RFC 821 for SMTP is from 1982, but the STARTTLS
extension for SMTP was speciﬁed in 1999. Other protocols
experienced similar organic development, and the result is a
variety of ways in which SSL/TLS is used in email and chat.
a) Electronic Mail: Email relies on two sets of protocols:
one for email transfer and one for retrieval. The Simple Mail
Transfer Protocol (SMTP) [27] is the cornerstone of email
distribution systems. Its primary purpose was message transfer:
so-called Message Transfer Agents (MTAs) forward messages
by establishing an SMTP session to the next MTA on the path
to the destination, until they arrive at their ﬁnal destination.
SMTP is also used as a submission protocol2: in a nutshell,
user agents—e.g., ‘email clients’ such as Thunderbird—submit
mails from a local computer for further delivery to a ‘mail
server’ that is commonly operated by the user’s service provider.
‘Webmail’ solutions such as GMail blur the distinctions between
mail submission and mail transfer somewhat: they offer web-
hosted front-ends for mail composition; mail submission and
mail transfer are handled entirely transparently on server-side.
SMTP was initially operated on port 25. Later, port 587 was
speciﬁed to be used for message submission [16] by potentially
authenticated submitters, in an attempt to differentiate between
legitimate activity and spam. Nevertheless, port 25 still remains
in use for both purposes, message transfer and submission.
Once at the destination server, email can be retrieved using
either of two protocols. The Post Ofﬁce Protocol (version 3,
commonly referred to as POP3) [30] operates on port 110 and
allows a remote client to download newly-received emails to a
local mailbox. The Internet Message Access Protocol (version 4,
commonly called IMAP) [4] uses port 143 and offers access,
manipulation, and download of messages in a mailbox stored
on the server side.
b) Chat and Instant Messaging: Instant chat is an old
concept, which predates even the Web. Internet Relay Chat
(IRC) [34] is a protocol that allows a number of IRC clients
to connect to an IRC server and join so-called channels (chat
2This was possibly ﬁrst made explicit in RFC 2476 [15].
2
rooms) or have private conversations. Messages, especially
on channels, are relayed between IRC servers. An oddity of
IRC deployments is that server-to-server communication is
implementation-dependent (despite a speciﬁcation in [26]). Over
time, this has led to IRC servers clustering into a number of
distinct ‘IRC networks’. While the ofﬁcial IANA port for client-
to-server connections is 194, IRC is most commonly deployed
on port 6667 instead [17], but other ports are also sometimes
used. The ports for server-to-server communication are speciﬁc
to the IRC network.
In the footsteps of the proprietary instant messaging (IM)
networks of the late 1990s, the more general XML-based
eXtensible Messaging and Presence Protocol (XMPP) was
speciﬁed. Its core functionality is deﬁned in RFC 6120 [39],
IM extensions in RFC 6121 [40]. Further extensions exist.
Similar to the SMTP infrastructure, a number of XMPP servers
exchange messages on behalf of their users as part of the
XMPP IM network3. The protocol uses port 5222 for client-to-
server communication, and 5269 for server-to-server forwarding.
XMPP, with or without proprietary extensions, is also used in
non-federated enterprise or proprietary services4.
B. SSL/TLS
TLS 1.0 is the IETF-standardised version of SSL 35. All
versions before TLS 1.0, i.e., SSL 2 and SSL 3, are deprecated
today. TLS is at version 1.2 and contains many critical ﬁxes
that remove weaknesses of previous versions. Version 1.3 is
currently in the standardisation process. As SSL 3 and TLS 1.0
are very similar and a few pockets of SSL 3 use remain, we
speak of SSL/TLS when our ﬁndings apply to both SSL 3 and
TLS. All email and chat protocols can be used with SSL/TLS. In
IMAP and POP3, only client-to-server communication occurs.
SMTP and XMPP deﬁne both client-to-server and server-to-
server communication patterns. For IRC, once again only the
client-to-server pattern is properly deﬁned.
There are two ways to negotiate an SSL/TLS session. The
ﬁrst is to use SSL/TLS directly. This requires a well-known port,
i.e., assignment of a new, dedicated port by IANA. Application
layer protocols that use this method are often indicated by
adding a ’S’ at the end, e.g., HTTPS, IMAPS, etc. Clients that
do not support SSL/TLS may still connect to the normal port. In
server-to-server communication, the servers may use certiﬁcates
to authenticate to each other (i.e., either unilateral or mutual
authentication may be used). As stated in the introduction,
in client-to-server communication it is common that only the
server is authenticated; the client is authenticated later as part
of the application layer protocol. In the case of SMTP, port 465
was initially deﬁned for SMTPS, but was deprecated later [22]
in favour of STARTTLS (see below). It is nevertheless still
used. The dedicated ports for IMAPS and POP3S are 993
and 995, respectively. For IRCS, several exist [17], with 6697
being very commonly used for client connections. XMPP does
not have standard ports for SSL/TLS, but ports 5223 and
5270 are prevalent for client-to-server and server-to-server
communication, respectively.
3XMPP Instant Messaging was known as Jabber before its standardisation.
4E.g., HipChat uses a ﬂavour of XMPP, as did the early Google Talk.
5SSL 3, originally created at Netscape, was never standardised by the IETF,
but later captured in a historic RFC [13].
The second major way to use SSL/TLS is to connect with
TCP on the normal port ﬁrst and then upgrade the connection
using a protocol-speciﬁc command. This method is commonly
referred to as STARTTLS. The speciﬁcations in the RFCs
commonly require clients to ﬁrst query a server for STARTTLS
support with a speciﬁc ‘capability’ command before trying to
upgrade the connection [32]. The server can conﬁrm an upgrade;
the SSL/TLS handshake follows. This is speciﬁed for SMTP
(particularly for SUBMISSION) in [20], in [32] for IMAP
and POP3, and in [41] for XMPP. While STARTTLS is not
formally speciﬁed for IRC, the InspIRCd implementation6 is
generally considered a reference.
STARTTLS has the advantage that no dedicated port is
required and that the communication partners can decide
dynamically whether they want to use SSL/TLS. A major
limitation is the vulnerability to active MitM attacks, where
an attacker interferes with the STARTTLS-related commands.
Unless clients or servers are speciﬁcally conﬁgured not to allow
any connection without upgrade, the attack succeeds and the
entire communication will be in plain. Depending on the user
agent, users may not even be prompted with a security warning.
The attack has been observed in the wild [9].
The SSL/TLS handshake is the same for both forms of
connection establishment. The initiator sends an initial message
together with information which symmetric cipher suites and
SSL/TLS protocol versions it can support. The responder picks
a cipher suite and negotiates a protocol version in its reply. It
also sends an X.509 PKI certiﬁcate to authenticate. In another
round trip, the cryptographic parameters—which may also
include Difﬁe–Hellman parameters for forward secrecy—are
then conﬁrmed. The entities that wish to authenticate also
include a proof that they are in possession of the private key
that corresponds to their certiﬁcate.
It should be noted that email transfer over SSL/TLS is
generally designed to prioritise successful transfer over any
security guarantees. An opportunistic approach to security is
often favoured by implementations: both initiator and responder
may choose to ignore any authentication problems and proceed
with message delivery despite errors or warnings.
C. X.509 PKI
In order for an entity to have trust into the authentication
step, a number of conditions must be fulﬁlled that pertain to
the conﬁguration of the X.509 PKI in use. First and foremost,
CAs must only issue certiﬁcates after applying due diligence in
identifying the party that wishes to be certiﬁed. The CA/Browser
forum has established guidelines for the Web use case [3].
The so-called Baseline Requirements deﬁne due diligence to
require at least an (usually automated) check if the requesting
party can receive email under the requested domain name
and a speciﬁc email address.7 However, previous work has
revealed cases where even this basic diligence was neglected.
These cases are documented in, e.g., [23, 38]. On several
occasions, CAs have been compromised. Since any CA may
issue certiﬁcates for any domain, compromise of one CA is
enough to compromise the entire PKI. More details on relevant
6https://wiki.inspircd.org/STARTTLS_Documentation
7There are alternatives, e.g., some form of token can be published on the
web server, and some CAs apply further checks, e.g., lookups of WHOIS.
3
X509v3 Certificate
Version
Version
Validity
Serial no.
Issuer
Sig. algo.
Not Before
Not After
Subject Public Key Info
Subject
Algorithm
Public Key
X509 v3 Extensions
CA Flag, EV, CRL, etc.
Signature
Fig. 1: An X.509 certiﬁcate.
R
1
Root
Store
R
2
CA
1
I
1
I4
I2
CA
2
E 1 E 2
I5
I3
E 3
I6
E 5
E
6
E 4
R3
CA
3
E
7
Fig. 2: X.509 PKI showing the most relevant features: root
certiﬁcates, intermediate certiﬁcates, end-host certiﬁcates, a
root store and a certiﬁcate signed by an untrusted CA.
attacks on the X.509 PKI for the Web can also be found
in [23, 38]. Notably however, X.509’s use in email and chat
protocols remains largely unexplored.
Fig. 1 shows the format of an X.509 certiﬁcate, and Fig. 2
shows a simpliﬁed PKI. The certiﬁcates of the CAs form trust