detected on the internet through Greynoise [35] honeypots
over a period of one year (Sept 2017 to Sept 2018). There
are 341,521 unique IPs scanning for OS related vulnerabil-
ities, 445,908 unique IPs scanning for SS vulnerabilities,
and 206,533 unique IPs scanning for AS vulnerabilities.
Many of these scans target N-day vulnerabilities, while
scans for 0-day vulnerabilities cannot be accounted for.
Nonetheless, past events demonstrate that attackers are
prone to scan for and exploit 0-day vulnerable web apps like
Wordpress [50], Drupel [51], and PHPMyAdmin [52] when
publicly disclosed. Furthermore, a recent report [53] also
pointed out that the number of vulnerabilities in web apps
increased in 2018 and that support for PHP version 5.x and
7.x will end in 2019, which means we can anticipate more
unpatched and exposed backends in the future.
6 Case Studies
6.1 Case Study 1: Vulnerable Web App
The mobile app “Dailyhunt” has more than 50M+ installs
and is part of the “Books & Reference” category. The mo-
bile app interacts with nine different backends as shown in
Table 10. The backends are split into two labels, hybrid and
third-party. The hybrid backends are hosted on Akamai’s
EdgeComputing [36] and run a custom web app to serve
the mobile app. The hybrid backends are used for CDN,
telemetry, and requesting app-speciﬁc data. Speciﬁcally, the
Label
Backend
Use
Bhyb
B3rd
App Data
api-news.dailyhunt.in
App Data &
acq-news.dailyhunt.in
Telemetry
CDN
bcdn.newshunt.com
CDN
acdn.newshunt.com
CDN
fonts.gstatic.com
e.crashlytics.com
Telemetry
settings.crashlytics.com Telemetry
t.appsﬂyer.com
api.appsﬂyer.com
Ads
Ads
Vulns.
CS
AS
1
0
1
2
0
1
1
0
0
0
0
0
0
0
0
0
0
0
Table 10: A list of backends and issues found for the mobile
app Dailyhunt.
api-news.* domain registers the device and requests content,
where the acq-news.* backend captures user behavior and
offers promotion and the actual content is delivered by the
two CDN domains acdn.* and bcdn.*.
We were not able to ﬁngerprint the OS and the SS be-
cause the Akamai servers respond only to web app spe-
ciﬁc responses, i.e., minimal header and banner informa-
tion. Nonetheless, we found two 0-day vulnerabilities in the
acq-news.* backend on the same API interface. Since this
web application is speciﬁc to this mobile app, we looked for
other apps published by the same developer. We found that
the eBooks by Dailyhunt app (which has over 500K installs
but does not rank in the top 5,000 apps) also uses the same
vulnerable API interface. Additionally, the mobile apps use
HTTP to communicate with the hybrid backends and HTTPS
to communicate with third-party services.
As for the third-party services, we did not ﬁnd any vul-
nerabilities. The third-party backends serve requests on port
443 (HTTPS). The appsﬂyer.com backend is a service for
ad analytics that provides different functions using the same
interface. The t.appsﬂyer.com backend is a telemetry end-
point for the ad network and the api.appsﬂyer.com backend
authenticates and associates the app with its proﬁle.
Takeaway. This case highlights several challenges to secur-
ing mobile app backends. First, backends are heterogeneous
and differ across their software stack, topology setup, conﬁg-
uration, and custom application. Second, outsourcing cloud
management and provisioning (e.g., to cloud providers and
CDNs) beneﬁts security but comes with a lack of visibility,
limited per-app customization, and unclear incident liability.
Third, vulnerabilities can exist (and be scanned for) in any
software layer of the cloud and API interface on the web
app, which makes them challenging to identify and ﬁx. Un-
fortunately, app developers do not have the resources, time,
or personnel to fulﬁll this task. Using SkyWalker, we aim to
provide guidance to where the most pressing issues exist and
map them to responsible parties as shown in Table 2.
USENIX Association
28th USENIX Security Symposium    561
App Name
com.icegame.fruitlink
com.unbrained.wiﬁpasswordgenerator
com.magdalm.wiﬁmasterpassword
com.unbrained.wiﬁpassgen.app
com.magdalm.freewiﬁpassword
apps.ignisamerica.gamebooster
com.icegame.crazyfruit
com.magdalm.wiﬁpasswordpro
apps.ignisamerica.bluelight
com.icegame.fruitsplash2
# Reviews
332,907
151,518
148,355
43,824
35,552
23,725
23,631
22,113
16,659
15,193
# Installs
50M+
10M+
10M+
1M+
1M+
500K+
1M+
1M+
500K+
1M+
Table 11: A list of the top 10 mobile apps using the appnext
platform.
Label
Backend
Usage
B3rd
admin.appnext.com App Data
global.appnext.com App Data
cdn.appnext.com
cdn3.appnext.com
CDN
CDN
Vulns.
AS
1
0
0
0
OS
0
0
1
1
CS
0
0
1
1
Table 12: List of backends and vulnerable layers found in
the appnext platform.
6.2 Case Study 2: Vulnerable Platform
The appnext [54] platform integrates with mobile apps to in-
gest user behavior telemetry and provide predictive actions
that users might perform. Developers use this to upsell sub-
scription, ads, or recommend actions to app users. The app-
next platform is used by 6 mobile apps from the top 5,000
free apps. We analyzed all apps by the same developers that
are not in the top 5,000 and found 140 additional apps using
the appnext platform. The top 10 most reviewed apps using
the appnext platform can be found in Table 11. The top app
has 332,907 reviews and over 50M+ installs. These numbers
give us an indication of the the platform’s signiﬁcant popu-
larity and daily use.
The appnext platform backends (shown in Table 12) are
labelled as third-party, because the backends are found in an
SDK library. We found two CDN domains that point to the
same server IP, which are hosted on Limelight Networks, a
CDN provider. This CDN backend is vulnerable to an OS
integer overﬂow in the HTTP protocol stack (MS15-034)
that can be remotely exploited. Further, the CS still offers
SSLv2 and SSLv3, which are vulnerable to insecure padding
scheme for CBC cipher. appnext’s admin.* and global.* do-
mains run on Amazon AWS and provide app-speciﬁc data,
like authentication, telemetry ingestion, predictive actions,
and conﬁguration. The infrastructures run Microsoft Win-
dows Server 2008 R2 for the OS, Microsoft-IIS/7.5 for its
web server (SS), and the CS uses HTTPS. The application
(AS) backend is a custom web application that is written in
ASP and uses the ASP.NET framework. The AS has a vulner-
ability that allows an attacker to run arbitrary SQL queries.
We have notiﬁed the developers about these ﬁndings and
awaiting remediation.
Takeaway.
This case highlights multiple vulnerabilities,
0-day and N-day,
that affect three of the four software
layers. This mobile platform collects sensitive information
about user behavior, including PII and device information.
Unfortunately, these backend vulnerabilities are inherited by
multiple apps and developers, and the app developers cannot
immediately remediate the vulnerabilities in third-party
services. The mitigation strategy for the app developer is
to report (r) these ﬁndings to appnext or migrate (m) their
app to a different service. SkyWalker helps us label the
backends, identify the vulnerability, and guide the developer
to a clear action (report or migrate).
7 Mitigation
The goal of our empirical analysis was to bring attention
to this overlooked problem in mobile backends, but also to
provide guidance to app developers for building or choosing
secure backends.
In this section, we discuss the general
mitigation strategies which SkyWalker recommends for app
developers and to help improve the security posture of their
app backends.
7.1 Remediation Strategies
App developers who rely on ﬁrst-party backends have to up-
grade, patch, and block as needed for each software layer
on their backend. If they rely on third-party backends they
can report the issue or migrate their backend to a more se-
cure provider. Ambiguity arises when the backend is hosted
by a cloud provider, a hybrid type backend. To resolve these
issues we further generalize the hybrid backends into IaaS
(cloud provider manages the virtual HW ) and PaaS (cloud
provider manages HW , OS, and SS).
Hybrid
Strategies HW OS
Upgrade

Patch

Block
Report
Migrate


AS
CS
SS


  






Table 13: A mapping of mitigation strategies for developers
hosting their hybrid backend on infrastructure (IaaS) or a
platform (PaaS).
Table 13 provides developers with a guideline on how to
mitigate vulnerable hybrid backends. For example:
if the
hybrid backend is using a cloud provider’s platform offer-
ing, developers should report and/or migrate their backend
if the vulnerabilities are found in HW , OS, SS and upgrade
or patch if the vulnerabilities CS or AS related, respectively.
562    28th USENIX Security Symposium
USENIX Association
This matrix provides a starting point for app developers to
explore their options, i.e., migrate or wait for a ﬁx. In some
cases, the offering from cloud providers includes HW and
OS (as in the motivating example which uses Google Com-
pute Engine Flexible Environment). In this case, developers
have to make sure they use the latest OS images supported
by their cloud provider.
7.2 Recommendations
The empirical analysis provides insight not only about inse-
cure mobile backends, but also secure practices that devel-
opers can learn from. For developers who decide to build
their own ﬁrst-party backends, we recommend the follow-
ing: First, developers should delegate as much of the back-
end functionality to reputable third-party backends and min-
imize the number of features and functions their backend
needs to support. Second, developers should dedicate per-
sonnel to manage and maintain their backends including the
routine maintenance of OS, SS and CS, and timely ﬁxes of
known vulnerabilities affecting their cloud backends and mo-
bile apps using patching tools [55]–[57]. Third, developers
should develop an audit plan and a mitigation plan and be
familiar with it to execute during an incident or vulnera-
bility disclosure. Finally, developers should utilize defense
tools like web app ﬁrewalls (WAF), DDoS mitigation, and
crawler/scanner blockers to protect from internet scanners,
DDoS threats, and web app attacks (SQLi, authentication by-
pass, etc.). We identiﬁed over 730 backends using defense
services, all of which had smaller footprints when ﬁnger-
printed and no vulnerabilities were detected.
8 Measurement Considerations
Ethical. Because our work does not require or implicate hu-
man subjects, no IRB approval was required by our institute.
Our study identiﬁed a large number of 0-day and N-day vul-
nerabilities in active mobile app backends through scanning
and probing. Our techniques include service scans, banner
grabs, and side-channel probes. We emphasize that no ac-
tive exploitation, disruption, or sensitive data access was at-
tempted against the mobile backends. Although there are no
set guidelines for vulnerability measurements in the commu-
nity, several previous works (e.g., [48], [58]–[60]) have set
some precedent. Our measurements followed the best prac-
tices used in previous work using the following approach:
• Good Internet Citizenship: Similar to the work of Li
et al. [58], we provided an opt-out page for our scanner
IP that gives targets an option to be removed from the
study. Further, we signal our benign intention by setting
the user-agent string in the scans and provide a reverse
DNS record for our IP to give targets additional infor-
mation about our study. We were contacted by one app
developer and requested that we remove their backends
and related infrastructure from our study.
• Non-Exploit Payloads: Similar to the work of Du-
rumeric et al. [59], our scanning and measurement tech-
niques did not include any active exploits against the
mobile app backends. We used side-channel measure-