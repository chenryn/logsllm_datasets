2021 年 12 ⽉ 9 号注定是⼀个不眠之夜，著名的Apache Log4j 项⽬被爆存在远程代码执⾏漏洞，
且利⽤简单，影响危害巨⼤，光是引⼊了 log4j2 依赖的组件都是数不清，更别提项⽬本身可能存
在的⻛险了，如下图所示，mvnrepository搜索引⽤了 log4j-core version 2.14.1的项⽬就 ⼗⼏
⻚了：
本⽂就来简单分析⼀下该漏洞的原理。
引⽤了版本处于2.x  
        %d %p %c{1.} [%t] $${jndi:logging/context-name} 
%m%n 
${jndi:JNDIContent} 
LogManager.getLogger().error() 
LogManager.getLogger().fatal() 
LogManager.getLogger().trace() 
LogManager.getLogger().traceExit() 
LogManager.getLogger().traceEntry() 
LogManager.getLogger().info() 
LogManager.getLogger().warn() 
LogManager.getLogger().debug() 
LogManager.getLogger().log() 
LogManager.getLogger().printf() 
只有当当前事件的⽇志等级⼤于等于设置的⽇志等级时，才会符合条件，进⼊ logMessage() ⽅法
知道这些基本信息后，就可以进⼀步了解漏洞的触发原理了。
测试 case 如下：
public class log4j {   
    private static final Logger logger = LogManager.getLogger();   
    public static void main(String[] args) {   
        Collection current = 
LoggerContext.getContext(false).getLoggers();   
        Collection notcurrent = 
LoggerContext.getContext().getLoggers();   
        Collection allConfig = 
current;   
        allConfig.addAll(notcurrent);   
        for (
Logger log:allConfig){   
            log.setLevel(Level.ALL);   
        }   
        logger.error(Level.ALL,"payload");   
//        logger.warn("payload");   
JAVA
org.apache.logging.log4j.core.
org.apache.logging.log4j.core.
org.apache.logging.log4j.core.
org.apache.logging.log4j.core.
由于这些调⽤⽅法触发漏洞的原理都是⼀样的，所以本⽂就以 error 举例说明。
查看 error 的类继承关系可以发现，实际上会调⽤ AbstractLogger.java 中的 public void
error() ⽅法：
在该⽅法中会调⽤ logIfEnabled 判断是否符合⽇志记录的等级要求，如果符合，那么会进⾏
logMessage 操作：
后续不关键调⽤路径如下：
//        logger.info("payload");   
//        logger.debug("payload");   
//        logger.traceExit("payload");   
//        logger.trace("payload");   
//        logger.fatal("payload"); 
//        logger.printf(Level.ALL,"payload");   
//        logger.traceEntry("payload");   
//        logger.log(Level.ALL,"payload");   
 }     
} 
logMessage  ----> logMessageSafely  ----> logMessageTrackRecursion  ---->
tryLogMessage  ----> log
----> DefaultReliabilityStrategy.log  ----> loggerConfig.log  ----> processLogEvent  -
---> callAppenders  
----> tryCallAppender  ----> append  ----> tryAppend  ----> directEncodeEvent  ---->
encode  ----> toText  ----> 
toSerializable  ----> format ----> PatternFormatter.format
第⼀个关键点在 PatternFormatter.java 中的 format ⽅法：
如果检测到 $ 字符后跟了⼀个 { 字符，那么会对直到 } 中间的内容进⾏解析并 replace
replace  --> substitute  --> StrSubstitutor.substitute  --> resolveVariable  -->
Interpolator.lookup
在 Interpolator.lookup ⽅法中，⾸先会获取字符串的前缀值：
如果匹配到内置⽅法，那么就进⼊对应的处理⽅法，这⾥是 JNDI ⽅法，那么就会由 JndiLookup
类进⼀步处理：
最终加载由攻击者传⼊的LDAP服务端地址，然后返回⼀个恶意的JNDI Reference对象，触发漏
洞，实现 RCE。
log4j2涉及的组件之多、牵扯的范围之⼴，造成的结果，恐怕是漏洞发现者或者是某个公开 poc 的
安全公众号都始料未及的。
其实这个漏洞带给我们的不仅仅是⼀个新的吃饭技能，更多的是⼀些思考：
第⼀，安全发展⾄今，为什么⼀个 java底层依赖出现漏洞，却导致国内所有⼤⼚全军覆没？虽然个
别⼚商提前修复，但同样说明了⼀件事，供应链级别的0day攻击，依旧是⽆法第⼀时间防御的。
是否存在⼀种新的机制或⽅案能够防御供应链级别的0day攻击？ 
第⼆，log4j2 项⽬引⼊JNDI lookup 已有 7 年之久，但是应⽤范围如此之⼴、利⽤复杂难度之低
的漏洞，⻓达 7 年未被发现，实在有些惭愧（更惭愧的是官⽅⽂档还有 jndilookp 的使⽤说明） 
第三，以后挖0day思路真如 skay 说的⼀样加⼀： 
find *.jar => add as library => shift+shift => find log4j => RCE
实际上不仅是 log4j，通常这也是⼀个挖掘组件依赖漏洞的⼀种思路 
004 漏洞复现
005 写在最后
第四，
https://logging.apache.org/log4j/2.x/manual/lookups.html 
https://github.com/apache/logging-
log4j2/pull/608/commits/755e2c9d57f0517a73d16bfcaed93cc91969bdee
参考