                get_tcp4_sock(v, seq, st->num, &len);    
                break;    
        case TCP_SEQ_STATE_OPENREQ:    
                get_openreq4(st->syn_wait_sk, v, seq, st->num, st->uid, &len);    
                break;    
        case TCP_SEQ_STATE_TIME_WAIT:    
                get_timewait4_sock(v, seq, st->num, &len);    
                break;    
        }    
        seq_printf(seq, "%*s\n", TMPSZ - 1 - len, "");    
out:    
        return 0;    
}    
static void get_tcp4_sock(struct sock *sk, struct seq_file *f, int i, int *len)    
{    
....    
        seq_printf(f, "%4d: %08X:%04X %08X:%04X %02X %08X:%08X %02X:%08lX "    
                        "%08X %5d %8d %lu %d %pK %lu %lu %u %u %d%n",    
                i, src, srcp, dest, destp, sk->sk_state,    
                tp->write_seq - tp->snd_una,    
                rx_queue,    
                timer_active,    
                jiffies_to_clock_t(timer_expires - jiffies),    
                icsk->icsk_retransmits,    
                sock_i_uid(sk),    
                icsk->icsk_probes_out,    
                sock_i_ino(sk),    
                atomic_read(&sk->sk_refcnt), sk,    
                jiffies_to_clock_t(icsk->icsk_rto),    
                jiffies_to_clock_t(icsk->icsk_ack.ato),    
                (icsk->icsk_ack.quick icsk_ack.pingpong,    
                tp->snd_cwnd,    
                tcp_in_initial_slowstart(tp) ? -1 : tp->snd_ssthresh,    
                len);    
}    
which defined in include/net/inet_connection_sock.h:    
/** inet_connection_sock - INET connection oriented sock    
 *                  
 * @icsk_accept_queue:     FIFO of established children     
 * @icsk_bind_hash:        Bind node    
 * @icsk_timeout:          Timeout    
 * @icsk_retransmit_timer: Resend (no ack)    
 * @icsk_rto:              Retransmit timeout    
 * @icsk_pmtu_cookie       Last pmtu seen by socket    
 * @icsk_ca_ops            Pluggable congestion control hook    
 * @icsk_af_ops            Operations which are AF_INET{4,6} specific    
 * @icsk_ca_state:         Congestion control state    
 * @icsk_retransmits:      Number of unrecovered [RTO] timeouts    
 * @icsk_pending:          Scheduled timer event    
 * @icsk_backoff:          Backoff    
 * @icsk_syn_retries:      Number of allowed SYN (or equivalent) retries    
 * @icsk_probes_out:       unanswered 0 window probes    
 * @icsk_ext_hdr_len:      Network protocol overhead (IP/IPv6 options)    
 * @icsk_ack:              Delayed ACK control data    
 * @icsk_mtup;             MTU probing control data    
 */    
For a not established socket     
static void get_openreq4(const struct sock *sk, const struct request_sock *req,    
                         struct seq_file *f, int i, int uid, int *len)    
{    
        const struct inet_request_sock *ireq = inet_rsk(req);    
        int ttd = req->expires - jiffies;    
        seq_printf(f, "%4d: %08X:%04X %08X:%04X"    
                " %02X %08X:%08X %02X:%08lX %08X %5d %8d %u %d %pK%n",    
                i,    
                ireq->loc_addr,    
                ntohs(inet_sk(sk)->inet_sport),    
                ireq->rmt_addr,    
                ntohs(ireq->rmt_port),    
                TCP_SYN_RECV,    
                0, 0, /* could print option size, but that is af dependent. */    
                1,    /* timers active (only the expire timer) */    
                jiffies_to_clock_t(ttd),    
                req->retrans,    
                uid,    
                0,  /* non standard timer */    
                0, /* open_requests have no inode */    
                atomic_read(&sk->sk_refcnt),    
                req,    
                len);    
}    
static void get_timewait4_sock(const struct inet_timewait_sock *tw,    
                               struct seq_file *f, int i, int *len)    
{    
        __be32 dest, src;    
        __u16 destp, srcp;    
        int ttd = tw->tw_ttd - jiffies;    
        if (ttd tw_daddr;    
        src   = tw->tw_rcv_saddr;    
        destp = ntohs(tw->tw_dport);    
        srcp  = ntohs(tw->tw_sport);    
        seq_printf(f, "%4d: %08X:%04X %08X:%04X"    
                " %02X %08X:%08X %02X:%08lX %08X %5d %8d %d %d %pK%n",    
                i, src, srcp, dest, destp, tw->tw_substate, 0, 0,    
                3, jiffies_to_clock_t(ttd), 0, 0, 0, 0,    
                atomic_read(&tw->tw_refcnt), tw, len);    
}    
Let's back to our questions, The description of the 'Timer' field from 'netstat -o'    
which with the format (1st/2nd/3rd)    
1. The 1st field indicates when the timer will expire    
2. The 2nd field is the retransmits which already have done    
3. The 3rd field - for a synreq socket(not yet established) and a timewait socket it's always 0, for a established socket it's 'unanswered 0 window probes'     
TCP zero window probe means that the receiver has reduced his receive buffer (a.k.a. window) to zero, basically telling the sender to stop sending - usually for performance reasons.  If the receiver does not recover and send an so called "Window Update" with a buffer size greater than zero (meaning, the sender is allowed to continue) the sender will become "impatient" at some point and "check" if the receiver is able to receive more data. That "check" is the Zero Window Probe.    
TCP Keep-Alive - Occurs when the sequence number is equal to the last byte of data in the previous packet. Used to elicit an ACK from the receiver.    
TCP Keep-Alive ACK - Self-explanatory. ACK packet sent in response to a "keep-alive" packet.    
TCP DupACK - Occurs when the same ACK number is seen AND it is lower than the last byte of data sent by the sender. If the receiver detects a gap in the sequence numbers, it will generate a duplicate ACK for each subsequent packet it receives on that connection, until the missing packet is successfully received (retransmitted). A clear indication of dropped/missing packets.    
TCP ZeroWindow - Occurs when a receiver advertises a receive window size of zero. This effectively tells the sender to stop sending because the receiver's buffer is full. Indicates a resource issue on the receiver, as the application is not retrieving data from the TCP buffer in a timely manner.    
TCP ZerowindowProbe - The sender is testing to see if the receiver's zero window condition still exists by sending the next byte of data to elicit an ACK from the receiver. If the window is still zero, the sender will double his persist timer before probing again.    
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")