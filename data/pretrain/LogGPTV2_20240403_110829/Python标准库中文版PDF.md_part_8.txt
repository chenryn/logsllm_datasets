self.stdout = stdout
def write(self, s):
self.stdout.write(string.lower(s))
# redirect standard output (including the print statement)
# 重定向标准输出(包括print语句)
old_stdout = sys.stdout
sys.stdout = Redirect(sys.stdout)
print "HEJA SVERIGE",
print "FRISKT HUM\303\226R"
# restore standard output
# 恢复标准输出
sys.stdout = old_stdout
print "M\303\205\303\205\303\205\303\205L!"
heja sverige friskt hum\303\266r
M\303\205\303\205\303\205\303\205L!
要重定向输出只要创建一个对象, 并实现它的 write 方法.
(除非 C 类型的实例外：Python 使用一个叫做 softspace 的整数属性来控制输
出中的空白. 如果没有这个属性, Python 将把这个属性附加到这个对象上. 你
不需要在使用 Python 对象时担心, 但是在重定向到一个 C 类型时, 你应该确
保该类型支持 softspace 属性.)
1.13.6. 退出程序
执行至主程序的末尾时,解释器会自动退出. 但是如果需要中途退出程序, 你可
以调用 sys.exit 函数, 它带有一个可选的整数参数返回给调用它的程序.
Example 1-75 给出了范例.
1.13.6.1. Example 1-75. 使用 sys 模块退出程序
File: sys-exit-example-1.py
import sys
print "hello"
sys.exit(1)
print "there"
hello
注意 sys.exit 并不是立即退出. 而是引发一个 SystemExit 异常. 这意味着
你可以在主程序中捕获对 sys.exit 的调用, 如 Example 1-76 所示.
1.13.6.2. Example 1-76. 捕获 sys.exit调用
File: sys-exit-example-2.py
import sys
print "hello"
try:
sys.exit(1)
except SystemExit:
pass
print "there"
hello
there
如果准备在退出前自己清理一些东西(比如删除临时文件), 你可以配置一个 "
退出处理函数"(exit handler), 它将在程序退出的时候自动被调用. 如
Example 1-77 所示.
1.13.6.3. Example 1-77. 另一种捕获 sys.exit 调用的方法
File: sys-exitfunc-example-1.py
import sys
def exitfunc():
print "world"
sys.exitfunc = exitfunc
print "hello"
sys.exit(1)
print "there" # never printed # 不会被 print
hello
world
在 Python 2.0 以后, 你可以使用 atexit 模块来注册多个退出处理函数.
1.14. atexit 模块
(用于2.0版本及以上) atexit 模块允许你注册一个或多个终止函数(暂且这么
叫), 这些函数将在解释器终止前被自动调用.
调用 register 函数, 便可以将函数注册为终止函数, 如 Example 1-78 所示.
你也可以添加更多的参数, 这些将作为 exit 函数的参数传递.
1.14.0.1. Example 1-78. 使用 atexit 模块
File: atexit-example-1.py
import atexit
def exit(*args):
print "exit", args
# register two exit handler
atexit.register(exit)
atexit.register(exit, 1)
atexit.register(exit, "hello", "world")
exit ('hello', 'world')
exit (1,)
exit ()
该模块其实是一个对 sys.exitfunc 钩子( hook )的简单封装.
1.15. time 模块
time 模块提供了一些处理日期和一天内时间的函数. 它是建立在 C 运行时库
的简单封装.
给定的日期和时间可以被表示为浮点型(从参考时间, 通常是 1970.1.1 到现在
经过的秒数. 即 Unix 格式), 或者一个表示时间的 struct (类元组).
1.15.1. 获得当前时间
Example 1-79 展示了如何使用 time 模块获取当前时间.
1.15.1.1. Example 1-79. 使用 time 模块获取当前时间
File: time-example-1.py
import time
now = time.time()
print now, "seconds since", time.gmtime(0)[:6]
print
print "or in other words:"
print "- local time:", time.localtime(now)
print "- utc:", time.gmtime(now)
937758359.77 seconds since (1970, 1, 1, 0, 0, 0)
or in other words:
- local time: (1999, 9, 19, 18, 25, 59, 6, 262, 1)
- utc: (1999, 9, 19, 16, 25, 59, 6, 262, 0)
localtime 和 gmtime 返回的类元组包括年, 月, 日, 时, 分, 秒, 星期, 一
年的第几天, 日光标志. 其中年是一个四位数(在有千年虫问题的平台上另有规
定, 但还是四位数), 星期从星期一(数字 0 代表)开始, 1月1日是一年的第一
天.
1.15.2. 将时间值转换为字符串
你可以使用标准的格式化字符串把时间对象转换为字符串, 不过 time 模块已
经提供了许多标准转换函数, 如 Example 1-80 所示.
1.15.2.1. Example 1-80. 使用 time 模块格式化时间输出
File: time-example-2.py
import time
now = time.localtime(time.time())
print time.asctime(now)
print time.strftime("%y/%m/%d %H:%M", now)
print time.strftime("%a %b %d", now)
print time.strftime("%c", now)
print time.strftime("%I %p", now)
print time.strftime("%Y-%m-%d %H:%M:%S %Z", now)
# do it by hand...
year, month, day, hour, minute, second, weekday, yearday, daylight = now
print "%04d-%02d-%02d" % (year, month, day)
print "%02d:%02d:%02d" % (hour, minute, second)
print ("MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN")[weekday], yearday
Sun Oct 10 21:39:24 1999
99/10/10 21:39
Sun Oct 10
Sun Oct 10 21:39:24 1999
09 PM
1999-10-10 21:39:24 CEST
1999-10-10
21:39:24
SUN 283
1.15.3. 将字符串转换为时间对象
在一些平台上, time 模块包含了 strptime 函数, 它的作用与 strftime 相反.
给定一个字符串和模式, 它返回相应的时间对象, 如 Example 1-81 所示.
1.15.3.1. Example 1-81. 使用 time.strptime 函数解析时间
File: time-example-6.py
import time
# make sure we have a strptime function!
# 确认有函数 strptime
try:
strptime = time.strptime
except AttributeError:
from strptime import strptime
print strptime("31 Nov 00", "%d %b %y")
print strptime("1 Jan 70 1:30pm", "%d %b %y %I:%M%p")
只有在系统的 C 库提供了相应的函数的时候, time.strptime 函数才可以使用.
对于没有提供标准实现的平台, Example 1-82 提供了一个不完全的实现.
1.15.3.2. Example 1-82. strptime 实现
File: strptime.py
import re
import string
MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
"Sep", "Oct", "Nov", "Dec"]
SPEC = {
# map formatting code to a regular expression fragment
"%a": "(?P[a-z]+)",
"%A": "(?P[a-z]+)",
"%b": "(?P[a-z]+)",
"%B": "(?P[a-z]+)",
"%C": "(?P\d\d?)",
"%d": "(?P\d\d?)",
"%D": "(?P\d\d?)/(?P\d\d?)/(?P\d\d)",
"%e": "(?P\d\d?)",
"%h": "(?P[a-z]+)",
"%H": "(?P\d\d?)",
"%I": "(?P\d\d?)",
"%j": "(?P\d\d?\d?)",
"%m": "(?P\d\d?)",
"%M": "(?P\d\d?)",
"%p": "(?Pam|pm)",
"%R": "(?P\d\d?):(?P\d\d?)",
"%S": "(?P\d\d?)",
"%T": "(?P\d\d?):(?P\d\d?):(?P\d\d?)",
"%U": "(?P\d\d)",
"%w": "(?P\d)",
"%W": "(?P\d\d)",
"%y": "(?P\d\d)",
"%Y": "(?P\d\d\d\d)",
"%%": "%"
}
class TimeParser:
def _ _init_ _(self, format):
# convert strptime format string to regular expression
format = string.join(re.split("(?:\s|%t|%n)+", format))
pattern = []
try:
for spec in re.findall("%\w|%%|.", format):
if spec[0] == "%":
spec = SPEC[spec]
pattern.append(spec)
except KeyError:
raise ValueError, "unknown specificer: %s" % spec
self.pattern = re.compile("(?i)" + string.join(pattern, ""))
def match(self, daytime):
# match time string
match = self.pattern.match(daytime)
if not match:
raise ValueError, "format mismatch"
get = match.groupdict().get
tm = [0] * 9
# extract date elements
y = get("year")
if y:
y = int(y)
if y  2 and not y % 4 and (y % 100 or not y % 400)) and 1))
def timegm(tm, epoch=_d(1970,1,1)):
year, month, day, h, m, s = tm[:6]
assert year >= 1970
assert 1  INSTANCE
 INSTANCE
注意所有的类都具有相同的类型, 所有的实例也是一样. 要测试一个类或者实
例所属的类, 可以使用内建的 issubclass 和 isinstance 函数.
types 模块在第一次引入的时候会破坏当前的异常状态. 也就是说, 不要在异
常处理语句块中导入该模块 (或其他会导入它的模块 ) .
1.17. gc 模块