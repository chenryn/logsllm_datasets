-   启用服务：
    ::: itemizedlist
    -   要在系统启动时启用服务，无论用户是否登录，输入：
        ``` screen
        # systemctl enable 
        ```
        您必须将 systemd 单元文件复制到 `/etc/systemd/system`{.literal}
        目录中。
    -   要在用户登录时启动服务并在用户注销时停止该服务，输入：
        ``` screen
        $ systemctl --user enable 
        ```
        您必须将 systemd 单元文件复制到
        `$HOME/.config/systemd/user`{.literal} 目录中。
    -   要允许用户在系统启动并保留日志时启动服务，请输入：
        ``` screen
        # loginctl enable-linger 
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `man systemctl`{.literal}
-   `man loginctl`{.literal}
-   [使用 systemd
    管理服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#proc_generating-a-systemd-unit-file-using-podman_assembly_porting-containers-to-systemd-using-podman}使用 Podman 生成 systemd 单元文件 {.title}
:::
Podman 允许 systemd 控制和管理容器进程。您可以使用
`podman generate systemd`{.literal} 命令为现有容器和 pod 生成 systemd
单元文件。建议使用
`podman generate systemd`{.literal}，因为生成的单元文件会频繁变化（通过对
Podman 的更新），并使用 `podman generate systemd`{.literal}
确保获取最新版本的单元文件。
::: orderedlist
**流程**
1.  创建容器（如 `myubi`{.literal}）：
    ``` literallayout
    $ podman create --name myubi registry.access.redhat.com/ubi8:latest sleep infinity
    0280afe98bb75a5c5e713b28de4b7c5cb49f156f1cce4a208f13fee2f75cb453
    ```
2.  使用容器名称或 ID 来生成 systemd 单元文件，并将其定向到
    `~/.config/systemd/user/container-myubi.service`{.literal} 文件中：
    ``` literallayout
    $ podman generate systemd --name myubi > ~/.config/systemd/user/container-myubi.service
    ```
:::
::: itemizedlist
**验证步骤**
-   显示生成的 systemd 单元文件的内容：
    ``` literallayout
    $ cat ~/.config/systemd/user/container-myubi.service
    # container-myubi.service
    # autogenerated by Podman 3.3.1
    # Wed Sep  8 20:34:46 CEST 2021
    [Unit]
    Description=Podman container-myubi.service
    Documentation=man:podman-generate-systemd(1)
    Wants=network-online.target
    After=network-online.target
    RequiresMountsFor=/run/user/1000/containers
    [Service]
    Environment=PODMAN_SYSTEMD_UNIT=%n
    Restart=on-failure
    TimeoutStopSec=70
    ExecStart=/usr/bin/podman start myubi
    ExecStop=/usr/bin/podman stop -t 10 myubi
    ExecStopPost=/usr/bin/podman stop -t 10 myubi
    PIDFile=/run/user/1000/containers/overlay-containers/9683103f58a32192c84801f0be93446cb33c1ee7d9cdda225b78049d7c5deea4/userdata/conmon.pid
    Type=forking
    [Install]
    WantedBy=multi-user.target default.target
    ```
    ::: itemizedlist
    -   `Restart=on-failure`{.literal} 行设置重启策略，并指示 systemd
        在无法彻底启动或停止服务时，或者在进程以非零状态退出时重新启动。
    -   `ExecStart`{.literal} 行描述了如何启动容器。
    -   `ExecStop`{.literal} 行描述了如何停止和移除容器。
    :::
:::
::: itemizedlist
**其他资源**
-   [使用 Podman 和共享 systemd
    服务运行容器](https://www.redhat.com/sysadmin/podman-shareable-systemd-services){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#proc_auto-generating-a-systemd-unit-file-using-podman_assembly_porting-containers-to-systemd-using-podman}使用 Podman 自动生成 systemd 单元文件 {.title}
:::
默认情况下，Podman 为现有容器或 pod 生成一个单元文件。您可以使用
`podman generate systemd --new`{.literal} 生成更多可移植的 systemd
单元文件。`--new`{.literal} 标志指示 Podman
生成创建、启动和删除容器的单元文件。
::: orderedlist
**流程**
1.  拉取您要在系统中使用的镜像。例如，要拉取 `httpd-24`{.literal} 镜像：
    ``` literallayout
    # podman pull registry.access.redhat.com/ubi8/httpd-24
    ```
2.  Optional.列出系统中所有可用镜像：
    ``` literallayout
    # podman images
    REPOSITORY                                TAG                  IMAGE ID      CREATED        SIZE
    registry.access.redhat.com/ubi8/httpd-24  latest               8594be0a0b57  2 weeks ago    462 MB
    ```
3.  创建 `httpd`{.literal} 容器：
    ``` literallayout
    # podman create --name httpd -p 8080:8080 registry.access.redhat.com/ubi8/httpd-24
    cdb9f981cf143021b1679599d860026b13a77187f75e46cc0eac85293710a4b1
    ```
4.  Optional.验证容器是否已创建：
    ``` literallayout
    # podman ps -a
    CONTAINER ID  IMAGE                                            COMMAND               CREATED        STATUS      PORTS                   NAMES
    cdb9f981cf14  registry.access.redhat.com/ubi8/httpd-24:latest  /usr/bin/run-http...  5 minutes ago  Created     0.0.0.0:8080->8080/tcp  httpd
    ```
5.  为 `httpd`{.literal} 容器生成 systemd 单元文件：
    ``` literallayout
    # podman generate systemd --new --files --name httpd
    /root/container-httpd.service
    ```
6.  显示生成的 `container-httpd.service`{.literal} systemd
    单元文件的内容：
    ``` literallayout
    # cat /root/container-httpd.service
    # container-httpd.service
    # autogenerated by Podman 3.3.1
    # Wed Sep  8 20:41:44 CEST 2021
    [Unit]
    Description=Podman container-httpd.service
    Documentation=man:podman-generate-systemd(1)
    Wants=network-online.target
    After=network-online.target
    RequiresMountsFor=%t/containers
    [Service]
    Environment=PODMAN_SYSTEMD_UNIT=%n
    Restart=on-failure
    TimeoutStopSec=70
    ExecStartPre=/bin/rm -f %t/%n.ctr-id
    ExecStart=/usr/bin/podman run --cidfile=%t/%n.ctr-id --sdnotify=conmon --cgroups=no-conmon --rm -d --replace --name httpd -p 8080:8080 registry.access.redhat.com/ubi8/httpd-24
    ExecStop=/usr/bin/podman stop --ignore --cidfile=%t/%n.ctr-id
    ExecStopPost=/usr/bin/podman rm -f --ignore --cidfile=%t/%n.ctr-id
    Type=notify
    NotifyAccess=all
    [Install]
    WantedBy=multi-user.target default.target
    ```
    ::: variablelist
    [注意]{.term}
    :   使用 `--new`{.literal} 选项生成的单元文件不会期望容器和 pod
        存在。因此，它们会在启动服务时执行 `podman run`{.literal}
        命令（请参阅 `ExecStart`{.literal} 行），而不是
        `podman start`{.literal} 命令。例如，请参阅 [使用 Podman 生成
        systemd
        单元文件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/building_running_and_managing_containers/index#generating-a-systemd-unit-file-using-podman_building-running-and-managing-containers){.link}
        部分。
        ::: itemizedlist
        -   `podman run`{.literal} 命令使用以下命令行选项：
            ::: itemizedlist
            -   `--conmon-pidfile`{.literal} 选项指向存储主机上运行的
                `conmon`{.literal} 进程的进程 ID
                的路径。`conmon`{.literal}
                进程以与容器相同的退出状态终止，允许 systemd
                报告正确的服务状态，并在需要时重启容器。
            -   `--cidfile`{.literal} 选项指向存储容器 ID 的路径。
            -   `%t`{.literal} 是运行时间目录根目录的路径，例如
                `/run/user/$UserID`{.literal}。
            -   `%n`{.literal} 是该服务的全名。
            :::
        :::
    :::
7.  将单元文件复制到 `/usr/lib/systemd/system`{.literal} 中以便以 root
    用户身份安装它们：
    ``` literallayout
    # cp -Z container-httpd.service  /etc/systemd/system
    ```
8.  启用并启动 `container-httpd.service`{.literal} ：
    ``` literallayout
    # systemctl daemon-reload
    # systemctl enable --now container-httpd.service
    Created symlink /etc/systemd/system/multi-user.target.wants/container-httpd.service → /etc/systemd/system/container-httpd.service.
    Created symlink /etc/systemd/system/default.target.wants/container-httpd.service → /etc/systemd/system/container-httpd.service.
    ```
:::
::: itemizedlist
**验证步骤**
-   检查 `container-httpd.service`{.literal} 的状态：
    ``` literallayout
    # systemctl status container-httpd.service
        ● container-httpd.service - Podman container-httpd.service
           Loaded: loaded (/etc/systemd/system/container-httpd.service; enabled; vendor preset: disabled)
           Active: active (running) since Tue 2021-08-24 09:53:40 EDT; 1min 5s ago
             Docs: man:podman-generate-systemd(1)
          Process: 493317 ExecStart=/usr/bin/podman run --conmon-pidfile /run/container-httpd.pid --cidfile /run/container-httpd.ctr-id --cgroups=no-conmon -d --repla>
          Process: 493315 ExecStartPre=/bin/rm -f /run/container-httpd.pid /run/container-httpd.ctr-id (code=exited, status=0/SUCCESS)
         Main PID: 493435 (conmon)
        ...
    ```
:::
::: itemizedlist
**其他资源**
-   [改进了 Systemd 与 Podman 2.0
    的集成](https://www.redhat.com/sysadmin/improved-systemd-podman){.link}
    的文章
-   [使用 systemctl
    管理服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#proc_auto-starting-containers-using-systemd_assembly_porting-containers-to-systemd-using-podman}使用 systemd 自动启动容器 {.title}
:::
您可以使用 `systemctl`{.literal} 命令控制 systemd
系统和服务管理器的状态。本节演示了如何以非 root
用户身份启用、启动、停止该服务的一般步骤。若要以 root
用户身份安装服务，请省略 `--user`{.literal} 选项。
::: orderedlist
**流程**
1.  重新载入 systemd Manager 配置：
    ``` literallayout
    # systemctl --user daemon-reload
    ```
2.  启用服务 `container.service`{.literal} ，并在引导时启动它：
    ``` literallayout
    # systemctl --user enable container.service
    ```
3.  立即启动该服务：
    ``` literallayout
    # systemctl --user start container.service
    ```
4.  检查服务的状态：
    ``` literallayout
    $ systemctl --user status container.service
    ● container.service - Podman container.service
       Loaded: loaded (/home/user/.config/systemd/user/container.service; enabled; vendor preset: enabled)
       Active: active (running) since Wed 2020-09-16 11:56:57 CEST; 8s ago
         Docs: man:podman-generate-systemd(1)
      Process: 80602 ExecStart=/usr/bin/podman run --conmon-pidfile //run/user/1000/container.service-pid --cidfile //run/user/1000/container.service-cid -d ubi8-minimal:>
      Process: 80601 ExecStartPre=/usr/bin/rm -f //run/user/1000/container.service-pid //run/user/1000/container.service-cid (code=exited, status=0/SUCCESS)
     Main PID: 80617 (conmon)
       CGroup: /user.slice/user-1000.slice/user@1000.service/container.service
               ├─ 2870 /usr/bin/podman
               ├─80612 /usr/bin/slirp4netns --disable-host-loopback --mtu 65520 --enable-sandbox --enable-seccomp -c -e 3 -r 4 --netns-type=path /run/user/1000/netns/cni->
               ├─80614 /usr/bin/fuse-overlayfs -o lowerdir=/home/user/.local/share/containers/storage/overlay/l/YJSPGXM2OCDZPLMLXJOW3NRF6Q:/home/user/.local/share/contain>
               ├─80617 /usr/bin/conmon --api-version 1 -c cbc75d6031508dfd3d78a74a03e4ace1732b51223e72a2ce4aa3bfe10a78e4fa -u cbc75d6031508dfd3d78a74a03e4ace1732b51223e72>
               └─cbc75d6031508dfd3d78a74a03e4ace1732b51223e72a2ce4aa3bfe10a78e4fa
                 └─80626 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1d
    ```
    您可以使用 `systemctl is-enabled container.service`{.literal}
    命令检查服务是否已启用。
:::
::: itemizedlist
**验证步骤**
-   列出正在运行或已退出的容器：
    ``` literallayout
    # podman ps
    CONTAINER ID  IMAGE                            COMMAND  CREATED         STATUS             PORTS  NAMES
    f20988d59920  registry.access.redhat.com/ubi8-minimal:latest  uname -a     12 seconds ago  Up 11 seconds ago         funny_zhukovsky
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要停止 `container.service`{.literal}，请输入：
``` literallayout
# systemctl --user stop container.service
```
:::
::: itemizedlist
**其他资源**
-   `man systemctl`{.literal}
-   [使用 Podman 和共享 systemd
    服务运行容器](https://www.redhat.com/sysadmin/podman-shareable-systemd-services){.link}
-   [使用 systemd
    管理服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/configuring_basic_system_settings/managing-services-with-systemd_configuring-basic-system-settings){.link}
    章节
:::
:::
::: section
::: titlepage
# []{#assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers.html#proc_auto-starting-pods-using-systemd_assembly_porting-containers-to-systemd-using-podman}使用 systemd 自动启动 pod {.title}
:::
您可以启动多个容器作为 systemd 服务。请注意，`system`{.literal} ctl
命令应该只用于 pod，不应通过 `systemctl`{.literal}
单独启动或停止容器，因为它们由 pod 服务与内部 infra-container 一起管理。
::: orderedlist
**流程**
1.  创建一个空 pod，如 `systemd-pod`{.literal}:
    ``` literallayout
    $ podman pod create --name systemd-pod
    11d4646ba41b1fffa51c108cbdf97cfab3213f7bd9b3e1ca52fe81b90fed5577
    ```
2.  Optional.列出所有 pod:
    ``` literallayout
    $ podman pod ps
    POD ID        NAME         STATUS   CREATED         # OF CONTAINERS  INFRA ID
    11d4646ba41b  systemd-pod  Created  40 seconds ago  1                8a428b257111
    11d4646ba41b1fffa51c108cbdf97cfab3213f7bd9b3e1ca52fe81b90fed5577
    ```
3.  在空 pod 中创建两个容器。例如，要在 `systemd-pod`{.literal} 中创建
    `container0`{.literal} 和 `container1`{.literal} ：
    ``` literallayout
    $ podman create --pod systemd-pod --name container0 registry.access.redhat.com/ubi8 "yum -y install top && top"
    $ podman create --pod systemd-pod --name container1 registry.access.redhat.com/ubi8 "yum -y install top && top"
    ```
4.  Optional.列出与其关联的所有 pod 和容器：
    ``` literallayout