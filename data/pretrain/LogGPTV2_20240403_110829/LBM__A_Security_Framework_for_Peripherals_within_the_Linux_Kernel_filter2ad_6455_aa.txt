title:LBM: A Security Framework for Peripherals within the Linux Kernel
author:Dave Jing Tian and
Grant Hernandez and
Joseph I. Choi and
Vanessa Frost and
Peter C. Johnson and
Kevin R. B. Butler
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
LBM: A Security Framework for Peripherals within
the Linux Kernel
Dave (Jing) Tian
∗
∗
, Grant Hernandez
∗
∗
, Vanessa Frost
†
, Peter C. Johnson
∗
, Kevin R. B. Butler
{daveti, grant.hernandez, choijoseph007, vfrost, butler}@uﬂ.edu
, Joseph I. Choi
∗
University of Florida
†
Middlebury College
PI:EMAIL
Abstract—Modern computer peripherals are diverse in their
capabilities and functionality, ranging from keyboards and print-
ers to smartphones and external GPUs. In recent years, periph-
erals increasingly connect over a small number of standardized
communication protocols, including USB, Bluetooth, and NFC.
The host operating system is responsible for managing these
devices; however, malicious peripherals can request additional
functionality from the OS resulting in system compromise, or
can craft data packets to exploit vulnerabilities within OS
software stacks. Defenses against malicious peripherals to date
only partially cover the peripheral attack surface and are limited
to speciﬁc protocols (e.g., USB). In this paper, we propose
Linux (e)BPF Modules (LBM), a general security framework
that provides a uniﬁed API for enforcing protection against
malicious peripherals within the Linux kernel. LBM leverages
the eBPF packet ﬁltering mechanism for performance and
extensibility and we provide a high-level language to facilitate the
development of powerful ﬁltering functionality. We demonstrate
how LBM can provide host protection against malicious USB,
Bluetooth, and NFC devices; we also instantiate and unify existing
defenses under the LBM framework. Our evaluation shows that
the overhead introduced by LBM is within 1 μs per packet
in most cases, application and system overhead is negligible,
and LBM outperforms other state-of-the-art solutions. To our
knowledge, LBM is the ﬁrst security framework designed to
provide comprehensive protection against malicious peripherals
within the Linux kernel.
I. INTRODUCTION
Computer peripherals provide critical features to facilitate
system use. The broad adoption of computers can be traced
not only to the reduction in cost and size from mainframe
to microcomputer, but to the interactivity afforded by devices
such as keyboards and mice. Displays, printers, and scanners
have become integral parts of the modern ofﬁce environ-
ment. Nowadays, smartphones and tablets can not only act
as peripherals to a host computer, but can themselves support
peripherals that attach to them.
The scope of functionality that peripherals can contain is
almost limitless, but the methods of connecting them to host
computers have converged to a few select standards, such
as USB [10] for wired connections and Bluetooth [15] for
wireless. As a result, most modern operating systems provide
support for these standards (and the peripherals that use them)
by default, implementing the respective software stacks inside
the kernel and running different device drivers to support
various classes of peripherals.
However, with this virtually unconstrained functionality
comes the threat of malicious devices that can compromise
computer systems in myriad ways. The BadUSB attack [62]
allows attackers to add functionality allowed by the USB pro-
tocol to device ﬁrmware with malicious intent. For example,
a BadUSB ﬂash drive presents not only expected behavior
of a storage device when plugged into a computer, but also
registers keyboard functionality to allow it to inject malicious
keystrokes with the aim of gaining administrative privilege.
Other examples of malicious USB functionality include charg-
ers that can inject malware into iOS devices [51], or take
control of Android devices via AT commands [78]. Bluetooth
peripherals are also vulnerable: the BlueBorne attack [11]
allows remote adversaries to craft Bluetooth packets that will
cause a kernel stack overﬂow and enable privilege escalation,
while BleedingBit [12] exploits a stack overﬂow within the
Texas Instruments Bluetooth Low Energy (BLE) stack. We
observe that malicious peripherals launch attacks in one of two
ways, either by (1) sending unexpected packets (I/O requests
or responses) to activate extra functionality enabled by the
operating system, or by (2) crafting specially formed packets
(either legitimate or malformed) to exploit vulnerabilities
within the operating system’s protocol software stack.
Current defenses against malicious peripherals are not
comprehensive and are limited in scope. USBFILTER [79]
applies user-deﬁned rules to USB packet ﬁltering within the
Linux kernel, but fails to prevent exploitation from malformed
packets. USBFirewall [43], on the other hand, provides bit-
level protection by parsing individual incoming USB packets,
but offers limited support for user-deﬁned ﬁltering rules. Apple
recently added USB restricted mode in iOS 11.4, shutting
down USB data connections after the device stays locked for
an hour [84], but this restriction can be bypassed [2]. Not only
do these defenses lack comprehensive coverage, but they often
focus primarily or solely on USB, providing no protection
against peripherals using other interfaces.
In this paper, we propose Linux (e)BPF Modules (LBM),
a general security framework that provides a uniﬁed API for
enforcing protection against malicious peripherals within the
Linux kernel. LBM requires only a single hook for incoming
and outgoing peripheral data to be placed in each peripheral
subsystem, and modules for ﬁltering speciﬁc peripheral packet
types (e.g., USB request blocks or Bluetooth socket buffers)
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:37)(cid:66)(cid:87)(cid:70)(cid:1)(cid:43)(cid:74)(cid:79)(cid:72)(cid:1)(cid:53)(cid:74)(cid:66)(cid:79)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:21)(cid:18)
(cid:26)(cid:23)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
can then be developed. Importantly for performance and
extensibility, we leverage the Extended BSD Packet Filter
(eBPF) mechanism [25], which supports loading of ﬁlter
programs from user space. Unlike previous solutions, LBM is
designed to be a general framework suitable for any peripheral
protocol. As a result, existing solutions such as USBFIL-
TER and USBFirewall can be easily instantiated using LBM.
Moreover, new peripherals can be easily supported by adding
extensions into the LBM core framework. To demonstrate the
generality and ﬂexibility of LBM, we have fully instantiated
USBFILTER and USBFirewall using the LBM framework,
developed hooks for the Bluetooth Host Control Interface
(HCI) and Logical Link and Adaptation Protocol (L2CAP)
layers, and demonstrated a hook mechanism for the Near-Field
Communication (NFC) protocol. Our evaluation shows that the
general overhead introduced by LBM is within 1 μs per packet
across different peripherals in most cases; the application and
system benchmarks demonstrate a negligible overhead from
LBM; and LBM has a better performance when compared to
other state-of-the-art solutions.
We summarize our contributions1 below:
• Design and implement LBM as a general security frame-
work to defend against malicious peripherals. The LBM
core is designed as a high-performance packet ﬁltering
framework based on eBPF. LBM hooks are provided to
extend support for different peripheral subsystems.
• Develop a high-level ﬁlter language to facilitate writing
LBM rules. Users can write LBM rules in a high-level,
PCAP-like language to apply different policies to periph-
eral data packets, to avoid having to write ﬁlters in the
complex, low-level BPF assembly language. Our user-
space LBMTOOL utility translates LBM rules into eBPF
instructions and loads them into the LBM core.
• Develop support for USB, Bluetooth, and NFC in LBM.
We extend LBM to support multiple peripheral protocols
by exposing useful protocol ﬁelds to the user space and
extending LBMTOOL to recognize LBM rules for differ-
ent peripherals. We demonstrate LBM’s extensibility by
unifying and fully implementing the USBFILTER and
USBFirewall defenses under the LBM framework.
• Evaluate performance and analyze coverage against pe-
ripheral attacks. By applying the appropriate LBM rules,
we are able to defend against all known peripheral
attacks. Our micro-benchmark shows that
the general
overhead introduced by LBM is within 1 μs in most
cases, and the macro-benchmark shows that LBM has
better performance than other solutions, with negligible
impact on application throughput.
The remainder of the paper is structured as follows: Sec-
tion II provides background on peripheral security and BPF;
Section III presents our security model and goals alongside the
design of our solution; Section IV details the implementation
of our design in both kernel and user spaces; Section V eval-
uates LBM through case studies and benchmarks; Section VI
1Available at https://github.com/FICS/lbm.
discusses additional dimensions of our work; Section VII
explains limitations of our work; Section VIII summarizes
related work; and Section IX concludes.
II. BACKGROUND
A. Peripheral Security
USB. The Universal Serial Bus (USB) has been around since
1996 with the release of the version 1.0 speciﬁcation [23].
USB emerged to provide a single, ubiquitous means to connect
peripherals that would support a variety of applications with
different performance requirements. Since its inception, USB
has undergone many revisions (1.1, 2.0, 3.0, 3.1, and most
recently 3.2 and Type-C). The set of supported peripheral
devices expanded with each version, and the current USB
version 3.2 [10] supports a data transfer rate of 20 Gbits per
second, much improved over the 12 Mbits per second of v1.0.
Numerous attacks have been demonstrated by vulnerable
or malicious USB peripherals. BadUSB [62] attacks work
by altering the ﬁrmware of USB devices so they register as
deceptive device types when plugged into a machine. For
example, a USB mass storage device could masquerade as
a keyboard to gain the ability to inject malicious keystrokes.
A malicious USB charger can inject malware into iOS de-
vices [51] or take full control of Android devices via AT
commands [78]. MouseJack [61] affects wireless mice and
keyboards that communicate with a computer through a USB
dongle. An adversary may inject keystrokes by spooﬁng either
a mouse or keyboard, and in some cases may even pair a fake
keyboard with a victim’s dongle.
More vulnerabilities with the USB protocol stack and
device drivers have been identiﬁed with the help of tools
such as FaceDancer [30] and syzkaller [31]. On one hand,
these vulnerabilities are mostly implementation bugs within
the software stack. On the other hand, malicious USB
devices can exploit these vulnerabilities to compromise the
whole system by sending out specially-crafted USB packets.
For a comprehensive exploration of the variety of available
USB attack vectors, we refer readers to Tian et al.’s study [80].
Bluetooth. Just as USB dominates wired connections for pe-
ripherals, Bluetooth [15] is the de facto standard for connecting
peripherals wirelessly. Being a short-distance Radio Frequency
(RF) technology, Bluetooth usually allows data transmission
within 10 meters. After Bluetooth 4.0, Bluetooth Low Energy
(BLE) and Bluetooth Mesh were introduced to support lower-
power consumption devices (e.g., IoT) and sensor networks.
Bluetooth, like USB, is also susceptible to a wide variety
of attacks [81] due to software implementation vulnerabilities
and malicious Bluetooth peripherals. BlueBug [52] allows an
attacker to send AT commands to take control of the victim’s
phone, from e.g., a malicious Bluetooth headset. Blueprint-
ing [38] and BlueBag [21] identify and collect statistics on
all discoverable devices in the area. BlueSnarf and BlueS-
narf++ [52] allow an adversary to acquire ﬁles from a victim
device without being authenticated. BlueDump [53] causes a
victim device to dump its stored link keys associated with
(cid:26)(cid:23)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
connection events. CarWhisperer [37] allows an adversary to
eavesdrop on and inject audio into a car over Bluetooth. Blue-
Borne [11] attacks craft specially-formed Bluetooth packets to
exploit certain vulnerabilities within the software stack imple-
mentation, causing e.g., privilege escalation. BleedingBit [12]
attacks exploit another stack overﬂow within TI’s BLE stack.
While pairing is used to prevent unidentiﬁed devices
from being connected via Bluetooth, many attacks happen
before the pairing procedure. Also, pairing does not work for
simple devices without a means to input PINs. Unlike the
case for USB, there is no available systematic solution that
defends against malicious Bluetooth peripherals at all. The
most effective defense seems to be turning off Bluetooth or
physically unplugging the Bluetooth module.
NFC. Near Field Communication (NFC) [60] is another short-
range wireless communication protocol based on RFID tech-
nology. The operation range is usually within 4 to 5 centime-
ters. Smartphones (e.g., Androids and iPhones) commonly use
NFC as a quick means to exchange information, such as when
downloading a poster or making a payment.
Similarly, these NFC software stacks are also vulnerable. A
NFC feature that unknowingly invokes a Bluetooth connection
can install malware on phones [83]. “Exploring the NFC
Attacking Surface” [56] lists four possible attacks enabled by
bugs within the Android and N9 software stacks. A recent
bug within the Linux kernel NFC software stack [13] allows
a malicious NFC device to inject a malformed packet
to
launch out-of-bounds writes in kernel memory.
In Summary. Regardless of wireline or wireless, these pe-
ripheral communication protocols often refer to their commu-
nication unit as a “packet” (e.g., USB packets or Bluetooth
packets). The OS further instantiates the abstraction of these
“packets” within the context of a given I/O subsystem. This
provides us an opportunity to treat these peripheral security
issues as we would treat networking security issues: by build-
ing ﬁrewalls for these peripherals and applying rules to ﬁlter
unwanted (malicious) packets.
B. BPF/eBPF
The BSD Packet Filter (BPF) [54] is a high-performance
RISC-based virtual machine running inside the OS. Since its
creation, it has been used as a standard way for packet ﬁltering
in the kernel space. The most well-known BPF customer
might be tcpdump, which compiles ﬁltering rules into BPF
instructions and loads them into the kernel via socket APIs.
Extended BPF (eBPF) [25], [45] is a new ISA based on the
classic BPF. Compared to the old ISA, eBPF increases the
number of registers from 2 to 10 and register width from 32-
bit to 64-bit. eBPF also introduces a JIT compiler to map eBPF
instructions to native CPU instructions, including x86, x86-64,
ARM, PowerPC, Sparc, etc. A new syscall bpf, added since
Linux kernel 3.18, supports loading eBPF programs from the
user space.
Besides the ISA extensions, eBPF provides new ways to
communicate between user and kernel spaces, and to call
kernel APIs within BPF programs [67]. eBPF maps are a
generic data structure to share data between the user/kernel
spaces. A typical usage is to have the kernel update certain
values (e.g., the number of IP packets received) inside the
map with the user space program picking up the change.
BPF helpers are a special call to bridge the eBPF programs
and kernel APIs. The newly added CALL instruction can
be used to trigger predeﬁned BPF helpers, which usually
wrap up kernel APIs to implement some functionalities that
cannot be achieved by eBPF instructions themselves. eBPF
also includes a veriﬁer, which checks the safety of a given
eBPF program via a directed acyclic graph (DAG) check
(to ensure bounded execution) and by checking for memory
violations. The purpose of this veriﬁer is to make sure that an
eBPF program cannot affect the kernel’s integrity.
III. DESIGN
We ﬁrst describe the security model we consider, outline
the goals we set for our solution, and ﬁnally show how we
achieve these goals through different aspects of the design.
A. Security Model
We consider attacks from peripherals to require physical
access to the host machine (e.g., plugging into the USB port)
or use wireless channels to connect with the host (e.g., over
Bluetooth). These malicious peripherals usually try to achieve
privilege escalation by claiming unexpected functionalities
(e.g., BadUSB [62]), or exploiting the kernel protocol stack via
specially crafted packets (e.g., BlueBorne [11]). Note that we
do not consider DMA-based attacks [74], where IOMMU [41]
is needed to stop arbitrary memory writes from the peripheral.
Our Trusted Computing Base (TCB) is made up of the
Linux kernel and the software stack down below. We assume
trusted boot or measured boot, such as Intel TXT [32], is
deployed to protect system integrity. We also assume Man-
datary Access Control (MAC), such as SELinux [69], is being
enforced across the whole system.
B. Goals: Beyond A Reference Monitor
The ﬁrst three goals we set (G1 through G3) are drawn from
the classic reference monitor concept [7], and are needed to
build a secure kernel. The remaining goals (G4 through G7)
draw inspiration from existing security frameworks, such as
Linux Security Modules (LSM) [86], and consider practical
issues surrounding usage and deployment.
G1 Complete Mediation – For each kind of supported
peripheral, we need to guarantee that all inputs from the
device and all outputs from the host are mediated.
G2 Tamper-proofness – Assuming the system TCB is not
compromised, we need to defend against any attacks
originating from outside the TCB.
G3 Veriﬁability – While a whole-system formal veriﬁcation
may be infeasible, we should mandate formal guarantees
for security-sensitive components.
(cid:26)(cid:23)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
if usb.devnum 
== 7: drop
lbmtool
 bpf syscall
LLVM/
Clang