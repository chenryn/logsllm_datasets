# Android逆向：基础入门
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
随着app的广泛应用，使用过程中，难免会遇到些很不友好的功能，比如：游戏充值、间断性弹窗广告、续费解锁下一回等等。
如何将这些功能给XX掉？Android逆向就可以做到，纵向丝滑。
当然这只是安卓逆向的 **非专业性作用** 之一，安卓逆向的作用不仅限于此，之所以以此引入，是因为激发学习最大的动力——兴趣，有了兴趣，你们想不学都不行。
网上教程上都这样讲，学习安卓逆向，不可避免的需要掌握一定的java基础、等等这就话虽说没错，但对于零基础的小白，难道要先学这些编程语言再去入手逆向吗？
我的想法是，采用理论实践相结合，边练边学，这样印象才更加深入人心啊
当然此观念是在经过两节框架式知识铺垫的前提下，想了解andorid逆向，没有提前做功课可不行。接下来这篇文章呢，大家就当科普内容，先了解下andnroid系统的运行机制、框架及andorid应用程序的相关知识。
## 目录
  1. **android系统架构**
  2. **Dalvik虚拟机与ART虚拟机**
  3. **android应用程序架构**
  4. **android应用编译流程**
  5. **android应用反编译流程及工具利用**
  6. **android逆向概述**
## android系统架构
### android系统
安卓（Android）是一种 **基于Linux内核** （不包含GNU组件）的自由及开放源代码的操作系统。主要使用于移动设备，如智能手机和平板电脑，
**由美国Google公司和开放手机联盟领导及开发** 。
### android系统架构
左边的就是android系统框架了，右边我加了备注，这样更加明了，我们可以看到，android系统架构共 **分四层** ， **从下往上** 分别是：
**Linux内核层** 、 **系统运行库层** （程序库+android运行库）、 **应用程序框架层** 、 **应用层** 。
**大家重点关注下Android Runtime这一部分，其他的简单了解下就可以涉及到后面的讲解** ：
  1. **Llnux内核层：** Android系统是基于Linux内核的,它提供了基本的系统功能及与硬件交互的驱动，像图中Display Driver（显示驱动）、Camera Driver（摄像头驱动）、WiFi Driver（WiFi驱动）等， **简单了解下就可以** 。
  2. **系统运行库层：** 像图中内核的上一层就是系统运行库层，它由 **程序库（绿色部分）** 和 **Android运行库（黄色部分）** 组成。
  3. **Librares（程序库）：** 由C、C++编写，一系列程序库的集合，供Android系统的各个组件使用。其中包括:
系统类库名称 | 说明  
---|---  
Surface Manager | 执行多个应用程序时，管理子系统的显示，另外也对2D和3D图形提供支持  
Media Framework |
基PacketVideoOpenCore的多媒体库，支持多种常用的音频和视频格式的录制和回放，所支持的编码格式包括MPEG4，MP3，H264，AAC，ARM  
SQLite | 本地小型关系数据库，Android提供了一些新的SQLite数据库API，以替代传统的耗费资源的JDBC API  
OpenGL/ES | 基于OpenGL ES 1.0API标准实现的3D跨平台图形库  
FreeType | 用于显示位图和矢量字体  
WebKit | Web浏览器的软件引擎  
SGL | 底层的2D图形引擎  
Libc（bionic l ibc） | 继承自BSD的C函数库bionic libc，更适合基于嵌入式Linux的移动设备  
SSL | 安全套接层，是为网络通信提供安全及数据完整性的一种安全协议  
  1. **Android runtime（Core Librares + Dalvik虚拟机）：** 翻译过来就是Android运行时，Android应用程序时采用Java语言编写， **程序在Android运行时中执行** ，其运行时分为 **核心库** 和 **Dalvik虚拟机** 两部分。
  2. **Dalvik虚拟机（DVM）：**
  3. 而 Dalvik虚拟机又是什么鬼？
  4.   5. 它呢就类似java虚拟机，所有Android应用程序基本是在Dalvik虚拟机环境下运行的。下面会有单独一章给大家介绍。
  6. **Core Librares（核心库）：** 由于DVM也是兼容java语言的，所以Android核心库，它里面都集成了支持JAVA语言的jar包，
  7. **application Framework（应用程序框架层）：** 这一层呢主要是提供一些组件，搭建框架，方便app开发人用再次基础上快速开发开发应用程序。而实际上就是一些AndroidAPI, **简单了解下就可以**
应用程序框架层类库名称 | 功能  
---|---  
活动管理器（Activity Mananger） | 管理各个应用程序生命周期并提供常用的导航回退功能，为所有程序的窗口提供交互的接口  
窗口管理器（Window Manager） | 对所有开启的窗口程序进行管理  
内容提供器（Content Provider） | 提供一个应用程序访问另一个应用程序数据的功能，或者实现应用程序之间的数据共享视图系统（View
System）创建应用程序的基本组件，包括列表（lists），网格（grids），文本框（text
boxes），按钮（buttons），还有可嵌入的web浏览器。  
通知管理器（Notification Manager） | 使应用程序可以在状态栏中显示自定义的客户提示信息  
包管理器（Package Manager） | 对应用程序进行管理，提供的功能诸如安装应用程序，卸载应用程序，查询相关权限信息等。  
资源管理器（Resource Manager） | 提供各种非代码资源供应用程序使用，如本地化字符串，图片，音频等  
位置管理器（Location Manager） | 提供位置服务  
电话管理器（Telephony Manager） | 管理所有的移动设备功能XMPP服务是Google在线即时交流软件中一个通用的进程，提供后台推送服务  
  1. **Applications（应用层）：** 顶层中有所有的 Android 应用程序，如手机中的：电话、文件管理、信息等。
## Dalvik虚拟机与ART虚拟机
### Dalvik虚拟机
Dalvik是google专门为Android操作系统设计的一个虚拟机, **简称DVM** 。 **在Android 4.4及以前的版本，**
所有的Android程序都是在Dalvik虚拟机环境下去运行的。DVM的指令是 **基于寄存器** 的，运行的是经过转换的 **.dex文件**
（.dex是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统）,Dalvik虚拟机每次应用运行的时候，将代码编译成机器语言执行。
而DVM与JVM的区别:
  1. **JVM运行的是Java字节码,DM运行的是 Dalvik字节码。**
  2. 传统java程序经过编译，生成java字节码保存在class文件中，java虚拟机通过解码class文件来运行程序，而 Dalvik虚拟机运行的是Dalvik字节码，所有的Dalvik字节码都由java字节码转换而来，并打包到一个dex可执行文件（.dex）,Dalvik虚拟机通过解释DEX文件来执行字节码。
  3. **DVM是基于寄存器的虚拟机 而JVM执行是基于虚拟栈的虚拟机。**
  4. 寄存器存取速度比栈快的多，dvm可以根据硬件实现最大的优化，比较适合移动设备。
  5. 以下是同段代码经反编译形成的java字节码与Dalvik字节码对比
  6. java字节码
  7.   8. Dalvik字节码
  9.   10. **dvm执行的是.dex格式文件，jvm执行的是.class文件**
  11. .dex文件，是DVM独有的执行文件格式，体积更小，速度跟快，占用空间更少
  12. **运行环境的区别**
  13. Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。
### ART虚拟机
前面说到，当我们使用手机每运行一个程序，Dalvik虚拟机都会产生一个实例，互不影响，这就可能会出现占用资源过多等问题，随着人们日益增长的需求，dalvik无法满足人们对软件运行效率的需要。这是就诞生了ART虚拟机。
在 **Android4.4及以上版本** ，应运而生的ART（Android Run
Time）虚拟机替代了Dalvik虚拟机，其处理机制根本上的区别是它采用AOT(Ahead of TIme)技术，
**会在应用程序安装时就转换成机器语言，不再在执行时解释**
，从而优化了应用运行的速度。在内存管理方面，ART也有比较大的改进，对内存分配和回收都做了算法优化，降低了内存碎片化程度，回收时间也得以缩短。
**DVM与ART的区别：**
虽说ART替换了Dalvik虚拟机，并不意味着，其应用程序开发上也要发生改变，像android应用程序安装包（apk）中，仍然还是可执行的.dex文件。