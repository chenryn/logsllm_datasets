ProbGen(pkF , x), the ith server running Compute(i, F, σi),
the client running Verify(vkF , vkx,{πi}k
i=1), and the client
locally computing F (x). Let Tc and T ∗
c be the total and
maximum running time of the servers, i.e.,
c = max{T 1
T ∗
c }.
c , . . . , T k
i=1
T i
c ;
Tc =
c , T 2
(9)
Our evaluation will focus on the following question: (△)
In terms of the time/monetary cost, under what conditions and
to what extent the client will benefit from using MSVC?
A. Time Cost
k(cid:88)
Among the five schemes, Π1 and Π4 have a non-empty
KeyGen, which is heavier than the native computation of
F (x). In all schemes, the client has to prepare its input x for
computation and verify the servers’ partial results, by running
ProbGen and Verify respectively.
In the field of verifiable computation, many pioneer works
such as [51], [79], [80] have suggested that the one-time cost
Tk of executing KeyGen(λ, F ) can be amortized when the
same function F is evaluated many times, and a scheme is
outsourceable if the total running time of ProbGen and Verify
is far smaller than that of the native computation, i.e.,
Tp + Tv ≪ Tn.
(10)
Following this idea, a proof for (10) appears in Section G and
shows that our schemes are all outsourceable provided that
where n =(cid:0)m+d
kmt2 + k3 + (k + d)λ = o (nd) ,
(cid:1). Given a security parameter λ, the param-
(11)
eters (q, m, d, t) in our schemes may be chosen such that
d
q ≈ 2O(λ), m = poly(λ), d = O(1), t = O(1),
(12)
to satisfy (11) and thus result in outsourceable schemes.
In terms of time cost, we believe that a client may benefit
from MSVC, only if the client spends less time in learning
F (x), compared with locally computing F (x). While the
requirement of (10) is interesting and may realize this idea
in a setting where the servers’ computations take essentially
no time (i.e., Tc = 0), it is generally not realistic.
In MSVC, some of the servers may finish their computations
earlier than the others and the client may receive their partial
results earlier. However, the client will not be able to verify
until all partial results arrive. If all servers initiate their
computations simultaneously, the time that has to be spent by
the client before actually learning F (x) will be Tp + Tv + T ∗
c ,
where T ∗
c is the maximum of the servers’ running time. In the
amortized model of [51], [79], [80], a client will benefit from
MSVC with reduced time cost if and only if
Tp + Tv + T ∗
(13)
As per (13), in terms of time cost, the aforementioned
question (△) may be answered by analyzing the parameter
(14)
Rt = (Tp + Tv + T ∗
c  m0, and analyze how Rt
will vary as m is increasing.
B. Monetary Cost
Cloud computing aims to cut costs. Computing resources
provided by the cloud servers are usually much cheaper than
those owned by the client. A main motivation for the client to
outsource computations is reducing the monetary cost.
By locally computing F (x), the client has to spend time Tn
and the monetary cost of this local computation may be quite
high. By using MSVC, the amount of local computations is
reduced to Tp + Tv. However, the client has to additionally
pay for the Tc unit of cloud servers’ computations. Let Rp
be the ratio of the price of the client’s local computation to
that of the cloud servers’ computation. Then the client’s total
monetary cost in MSVC will be equivalent to Tp +Tv +Tc/Rp
units of its local computation. In terms of monetary cost, the
client will benefit from using MSVC if and only if
Tp + Tv + Tc/Rp  Rp⋆.
The actual values of Rp⋆ may depend on factors such as the
scale of (F, x). The smaller the Rp⋆ is, the easier it is for the
client to benefit from using MSVC. We are mostly interested
in the values of Rp⋆ when m > m0, in order to decide when
the client will benefit in terms of both the time cost and the
monetary cost. More precisely, we need to analyze how Rp⋆
will vary as m > m0 is increasing, and decide an upper bound,
say Rp⋆
0, of Rp⋆ for all m > m0.
C. Break-Even Points
In Π1 and Π4, the client has to perform a one-time execution
of KeyGen(λ, F ). Although these schemes are outsourceable
according to (10) and under the condition of (11), the client
will not really benefit from using them unless the same
function F is evaluated multiple times.
If the time Tk needed by KeyGen(λ, F ) is accounted and
the function F is evaluated at N inputs, then the client’s time
cost per input in MSVC will be Tp + Tv + T ∗
the client may benefit from using MSVC if and only if
c + Tk/N and
Tp + Tv + T ∗
c + Tk/N  m0 a break-even
point for the client’s time cost. On the other hand, the client’s
monetary cost per input will be Tp + Tv + Tc/Rp + Tk/N and
the client may benefit from using MSVC if and only if
Tp + Tv + Tc/Rp + Tk/N  m0 and Rp = Rp⋆
monetary cost. Ideally, we would like Nt and Nm to be as
small as possible. In order to answer the question of (△), we
need to analyze how Nt and Nm vary as well.
D. Our Implementation
In this section, we describe our implementations in detail.
The main parameters in our schemes include λ, q, m, d and t,
where λ is a security parameter, (q, m, d) specify a function
family P(q, m, d), and t is the threshold for privacy and
security. We will describe both the choices of these parameters
and the choice of the cyclic group G in Π4 and Π5. We
will also describe the libraries and platforms with which our
experiments will be conducted.
Security parameters, cyclic groups and finite fields. Our
implementations achieve λ-bit security for λ = 128. Our
privately verifiable schemes Π1, Π2 and Π3 are ϵ-secure for
ϵ = O(1/q). In order to assure 128-bit security, a sensible
choice of q would be q ≈ 2128. In particular, we shall choose
q = 2128 + 51 in our implementation of these schemes.
Then the servers in Π1 and Π2 will perform polynomial
evaluations over a 129-bit finite field Fq, except in Π3 where
the computation is done over a 257-bit finite field Fq2. The
security of our publicly verifiable schemes Π4 and Π5 relies
on the DLog assumption in a cyclic group G of prime
order q. For the sake of efficiency, we choose G to be
the ristretto255 group [43], a cyclic group of prime order
q = 2252 +27742317777372353535851937790883648493 that
is obtained from Bernstein’s Curve25519 [18] by applying
Hamburg’s Decaf point compression technique [64] for con-
structing prime-order groups. It is believed that such a group
provides 128-bit of security strength [41]. As a result, we have
that q ≈ 2253 and the servers in Π4 and Π5 will perform
polynomial evaluations over a 253-bit finite field.
Libraries. The field operations in Fq and Fq2 are implemented
with FLINT (v2.8.0),
library for number theory,
which is based on GMP. The ristretto255 cyclic group G is
implemented with libsodium (v1.0.18). The programming of
all schemes is done in C.
Platforms. We perform each server’s computation (i.e., the
Compute in MSVC) on a virtual machine VMs that runs a
Ubuntu 20.04 operating system with a single core of a 3.60
the fast
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
9604
GHz CPU and 8GB of RAM; and perform both the client’s
computation (i.e., KeyGen, ProbGen and Verify) and the native
computation on a virtual machine VMc that runs a Ubuntu
20.04 operating system with a single core of a 1.9 GHz CPU
and 4GB of RAM. With these choices we try to mimic the
gap of computing speed between the client’s device (e.g., a
netbook) and the servers’ machines.
Degree of polynomials. In theory there is no limitation on the
degree d of the polynomials that can be outsourced by MSVC.
However, due to three reasons, our schemes are more suitable
for outsourcing low-degree polynomials.
• First, the number k of servers required by each of our
schemes is linear in d. A large d would result in a large
number of servers. While k ≥ dt + 1 is necessary in
order to provide information-theoretic t-privacy with non-
communicating servers, and thus one of our schemes (i.e.,
Π3) is already optimal in terms of the number of servers
and can hardly be improved, it may be still undesirable
to use too many servers. Therefore, we prefer to use the
proposed MSVC to evaluate polynomials of small degree
d, in order to limit the number of required servers.
• Second, the Theorem 8 in Appendix G shows that our
schemes are outsourceable (i.e., Tp +Tv ≪ Tn), provided
that (11) is satisfied. As we are working over finite fields
of order q ≈ 2O(λ), many choices of (m, d, t) would meet
the requirement of (11), e.g., (m, d, t) = (poly(λ), O(1),
O(1)) or (m, d, t) = (O(1), poly(λ), O(1)). Among
these choices, the client will benefit most from the former
one, which requires d = O(1).
• Third, comparing with high-degree polynomials, the low-
degree ones are preferred in many scenarios. For example,
the information-theoretic PIR protocols [37], [94] require
low-degree polynomial interpolations and give quite prac-
tical communication complexity; in the polynomial re-
gression based curve fitting, low-degree polynomials are
usually preferred and approached first [58], and require
low-degree multivariate polynomial evaluations.
Many existing works experiment with low-degree polyno-
mials. For example, the degree-2 and degree-3 polynomial
evaluations have been the focus of the implementations of
[39], [85]. Pinocchio [79] and Trinocchio [81] also experiment
with polynomials of degree 6, 8 and 10. In Section V-E, we
will provide a detailed analysis of the parameters Rt,Rp,Nt
and Nm with the experimental results of degree-2 polynomial
evaluations. However, besides d = 2, we will also consider
polynomials of degree d = 4, 8, 16, 32, 64 and show slightly
rough analysis of the same parameters, in order to have a more
complete overview of the performance.
Threshold for privacy and security. Our schemes in Section
III and IV are both information-theoretically t-private and t-
secure. Any choice of the threshold t may have its pros and
cons. Besides privacy and security, the t also has direct impact
on the number of required servers and the client’s computation
complexity. A larger t not only implies stronger privacy and
security, but also results in a larger number k of servers and
Fig. 1. The value of Rt = (Tp + Tv + T ∗
c )/Tn in degree-2 polynomial
evaluations (d = 2, t = 1, 2, 3 and m = 200, 400, . . . , 2000 in all schemes)
a heavier workload of the client. A smaller t would imply
less servers and faster verification, but also lower security
level. How to choose t may not only depend on the client’s
preference, but also depend on the actual situation of how
many servers can collude with each other. In our model and
constructions, the servers do not need to communicate with
each other, in order for the client to reconstruct F (x). Such
model and constructions allow the client to keep every server
anonymous from the others. Then it would be difficult for
even two servers to collude. Thus, it seems not unreasonable
to choose a small t. Based on these observations, we will
experiment with relatively small t such as t = 1, 2, 3.
E. Experimental Results: Polynomials of Degree Two
As stated in Section V-D, for degree-2 polynomial eval-
uations, we choose t = 1, 2, 3 and choose q to be either
a 129-bit prime or a 253-bit prime. Given q, the scale of a
problem instance (F, x) ∈ P(q, m, 2) × Fm
q can be measured
with m, the number of variables in F . In the experiments,
we choose m = 200, 400, . . . , 2000 and analyze how Rt,Rp
(for all schemes) and Nt,Nm (for Π4 and Π5) vary as m is