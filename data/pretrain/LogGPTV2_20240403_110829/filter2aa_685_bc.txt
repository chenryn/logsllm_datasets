The discardable pragma is 
used here to implicitly discard 
the return value.
The points parameter is a
pointer to the beginning of
an array of tuples.
This stops the 
propagation of the 
dynlib pragma.
Licensed to   
240
CHAPTER 8
Interfacing with other languages
type. In practice, however, it’s better to use a ptr T type for improved type safety. But
you can only do so if you know that the procedure you’re wrapping will only ever
accept a specific pointer type.
 Lastly, the drawLines procedure is the most complicated, as it accepts an array of
points to draw as lines. In C, an array of elements is represented by a pointer to the
first element in the array and the number of variables in that array. In the case of the
drawLines procedure, each element in the points array is an SDL_Point type, and it’s
defined as a simple C struct containing two integers that represent the x and y coordi-
nates of the point. In Nim, this simple struct can be represented using a tuple.
 Add the contents of listing 8.7 to your sdl module. It’s time to use it to write the
application. 
8.2.6
Using the SDL wrapper
You can now use the wrapper you’ve just written. First, create an sdl_test.nim file beside
your wrapper, and then import the wrapper by writing import sdl at the top of the file.
 Before the library can be used, you’ll have to initialize it using the init procedure.
The init procedure expects to receive a flags argument that specifies which SDL
subsystems should be initialized. For the purposes of this application, you only need
to initialize the video subsystem. To do this, you’ll need to define a constant for the
SDL_INIT_VIDEO flag, like this:
const INIT_VIDEO* = 0x00000020
The value of this constant needs to be defined in the Nim source file because it’s not
available in the shared library. C header files typically define such constants using a
#define that isn’t compiled into any shared libraries.
 Add this constant into your sdl module. Then, you’ll finally be ready to use the
sdl wrapper to implement a simple application. The following listing shows the code
needed to do so.
import os
import sdl
if sdl.init(INIT_VIDEO) == -1:
quit("Couldn't initialise SDL")
var window: SdlWindowPtr
var renderer: SdlRendererPtr
if createWindowAndRenderer(640, 480, 0, window, renderer) == -1:
quit("Couldn't create a window or renderer")
Listing 8.8
An SDL application implemented using the sdl wrapper
Initializes the SDL video subsystem
Quits with an error if 
the initialization fails
Creates a window and
renderer to draw things on
Quits with an error if the creation 
of the window or renderer fails
Licensed to   
241
Wrapping an external C library
discard pollEvent(nil)
renderer.setDrawColor 29, 64, 153, 255
renderer.clear
renderer.present
sleep(5000)
Compile and run the sdl_test.nim file.
You should see a window with a blue
background, as shown in figure 8.6
(to see color versions of the figures,
please refer to the electronic version
of this book).
 A blank SDL window is a great
achievement, but it isn’t a very excit-
ing one. Let’s use the drawLines pro-
cedure to draw the letter N in the
middle of the screen. The following
code shows how this can be done:
renderer.setDrawColor 255, 255, 255, 255
var points = [
(260'i32, 320'i32),
(260'i32, 110'i32),
(360'i32, 320'i32),
(360'i32, 110'i32)
]
renderer.drawLines(addr points[0], points.len.cint)
Add this code just below the renderer.clear statement in the sdl_test.nim file. Then,
compile and run the file. You should see a window with a blue background and the let-
ter N, as shown in figure 8.7.
 In the preceding code, the drawLines call is the important one. The address of the
first element in the points array is passed to this procedure together with the length
of the points array. The drawLines procedure then has all the information it needs to
read all the points in the array. It’s important to note that this call isn’t memory safe; if
the points count is too high, the drawLines procedure will attempt to read memory
This is where you’d handle any pending 
input events. For this application, it’s only 
called so that the window initializes properly.
Sets the drawing color to 
the specified red, green, 
blue, and alpha values
Clears the screen with the 
specified drawing color
Shows the pixels drawn 
on the renderer
Waits for 5 seconds before 
terminating the application
Figure 8.6
The result of running listing 8.8
Changes the draw color to white
Defines an array of points that define the 
coordinates to draw an N. Each coordinate 
must be an int32 because that’s what a cint is.
Draws the lines defined 
by the points array
Licensed to   
242
CHAPTER 8
Interfacing with other languages
that’s adjacent to the array. This is known as a buffer overread and can result in serious
issues because there’s no way of knowing what the adjacent memory contains.2
 That’s how you wrap an external library using Nim. Of course, there’s plenty of
room for improvement. Ideally, a module that provides a higher-level API should
always be written on top of a wrapper; that way, a much more intuitive interface can be
used for writing applications. Currently, the biggest improvement that could be made
to the sdl module is to add exceptions. Both init and createWindowAndRenderer
should raise an exception when an error occurs, instead of requiring the user to check
the return value manually.
 The last two sections have given you an overview of the C FFI. Nim also supports
interfacing with other C-like languages, including C++ and Objective-C. Those two back-
ends are beyond the scope of this book, but the concepts you’ve learned so far should
give you a good starting point. For further information about these backends, take a
look at the Nim manual: http://nim-lang.org/docs/manual.html#implementation-
specific-pragmas-importcpp-pragma.
 Next, we’ll look at how to write JavaScript wrappers. 
8.3
The JavaScript backend
JavaScript is increasingly becoming known as the “assembly language of the web”
because of the many new languages that target it. Languages that can be translated to
JavaScript are desirable for various reasons. For example, they make it possible to
2 See the Wikipedia article for an explanation of buffer overreads: https://en.wikipedia.org/wiki/Buffer_over-read.
Figure 8.7
The final sdl_test application with the letter N drawn
Licensed to   
243
The JavaScript backend
share code between client scripts that run in a web browser and applications that run
on a server, reducing the need for code duplication.
 As an example, consider a chat application. The server manages connections and
messages from multiple clients, and a client script allows users to connect to the server
and send messages to it from their web browser. These messages must be understood
by all the clients and the server, so it’s beneficial for the code that parses those mes-
sages to be shared between the server and the client. If both the client and the server
are written in Nim, sharing this code is trivial. Figure 8.8 shows how such a chat appli-
cation could take advantage of Nim’s JavaScript backend.
Of course, when writing JavaScript applications, you’ll eventually need to interface
with the APIs exposed by the web browser as well as libraries that abstract those APIs.
The process of wrapping JavaScript procedures and types is similar to what was
described in the previous sections for the C backend, but there are some differences
that are worth an explanation.
 This section will show you how to wrap the JavaScript procedures required to
achieve the same result as in the previous section with the SDL library: filling the
drawable surface with a blue color and drawing a list of lines to form the letter N.
8.3.1
Wrapping the canvas element
The canvas element is part of HTML5, and it allows rendering of 2D shapes and bitmap
images on an HTML web page. All major web browsers support it and expose it via a
JavaScript API.
Figure 8.8
How the same code is shared between two platforms
Client
Server
Running in a
web browser
JavaScript
Running on a
server
Binary
protocol.nim
The same module is
reused for the client
and the server.
Licensed to   
244
CHAPTER 8
Interfacing with other languages
Let’s look at an example of its usage. Assuming that an HTML page contains a  element with an ID of canvas, and its size is 600 x 600, the code in the following
listing will fill the canvas with the color blue and draw the letter N in the middle of it.
var canvas = document.getElementById("canvas");
canvas.width = 600;
canvas.height = 600;
var ctx = canvas.getContext("2d");
ctx.fillStyle = "#1d4099";
ctx.fillRect(0, 0, 600, 600);
ctx.strokeStyle = "#ffffff";
ctx.moveTo(250, 320);
ctx.lineTo(250, 110);
ctx.lineTo(350, 320);
ctx.lineTo(350, 110);
ctx.stroke();
The code is fairly self-explanatory. It starts by retrieving the canvas element from the
DOM by ID. The canvas size is set, and a 2D drawing context is created. Lastly, the
screen is filled with a blue color, the letter N is traced using the moveTo and lineTo
procedures, and the letter is drawn using the stroke procedure. Wrapping the proce-
dures used in this example shouldn’t take too much effort, so let’s begin.
 Create a new file called canvas.nim. This file will contain the procedure wrappers
needed to use the Canvas API. The getElementById procedure is already wrapped by
Nim; it’s a part of the DOM, so it’s available via the dom module.
 Unlike in C, in JavaScript there’s no such thing as a header file. The easiest way to
find out how a JavaScript procedure is defined is to look at the documentation. The
following list contains the documentation for the types and procedures that will be
wrapped in this section:
CanvasRenderingContext2D type—https://developer.mozilla.org/en-US/docs/
Web/API/CanvasRenderingContext2D
canvas.getContext(contextType, contextAttributes); procedure—http://mng
.bz/6kIp
void ctx.fillRect(x, y, width, height); procedure—http://mng.bz/xN3Y
void ctx.moveTo(x, y); procedure—http://mng.bz/A9Bk
void ctx.lineTo(x, y); procedure—http://mng.bz/t355
void ctx.stroke(); procedure—http://mng.bz/nv6C
Because JavaScript is a dynamically typed programming language, procedure defini-
tions don’t contain information about each argument’s type. You must look at the
documentation, which more often than not tells you enough to figure out the under-
lying type. The following listing shows how the CanvasRenderingContext2D type and
the five procedures should be wrapped. Save the listing as canvas.nim.
Listing 8.9
Using the Canvas API in JavaScript
Licensed to   
245
The JavaScript backend
import dom
type
CanvasRenderingContext* = ref object
fillStyle* {.importc.}: cstring
strokeStyle* {.importc.}: cstring
{.push importcpp.}
proc getContext*(canvasElement: Element,
contextType: cstring): CanvasRenderingContext
proc fillRect*(context: CanvasRenderingContext, x, y, width, height: int)
proc moveTo*(context: CanvasRenderingContext, x, y: int)
proc lineTo*(context: CanvasRenderingContext, x, y: int)
proc stroke*(context: CanvasRenderingContext)
This code is fairly short and to the point. You should be familiar with everything
except the importcpp pragma. The name of this pragma is borrowed from the C++
backend. It instructs the compiler to generate JavaScript code that calls the specified
procedure as if it were a member of the first argument’s object. Figure 8.9 demon-
strates the difference between importc and importcpp for the JavaScript backend.
Listing 8.10
Wrapping the Canvas API
The dom module exports 
the Element type used in 
the getContext proc.
All JavaScript objects
have ref semantics;
hence, the ref object
definition.
Each field must be 
explicitly imported 
using importc.
Each procedure is given 
the importcpp pragma.
The contextAttributes
argument is intentionally
omitted here. It’s an
optional argument
with a default value.
Figure 8.9
The differences in JavaScript code produced with the importc and importcpp pragmas
{.importc.}
{.importcpp.}
vs.
proc getContext*(el: Element, typ: cstring): Ctx
nim js file.nim
element.getContext( "2D")
getContext(element, "2D"); 
Function getContext is
not deﬁned.
nim js file.nim
element.getContext("2D")
element.getContext("2D"); 
getContext is a
member of element, so
this works!
JavaScript
code after
compilation
Nim code
before
compilation
when applied to the following deﬁnition:
Licensed to   
246
CHAPTER 8
Interfacing with other languages
There aren’t many other surprises, but one interesting aspect to note is that when
you’re wrapping a data type in JavaScript, the wrapped type should be declared as a ref
object. JavaScript objects have reference semantics and so should be wrapped as such.
 That’s all there is to it! Time to put this wrapper to use. 
8.3.2
Using the Canvas wrapper
Now that the wrapper is complete, you can write a little script that will make use of it,
together with a small HTML page to execute it.
 Save the following listing as index.html beside your canvas.nim file.
Nim in Action - Chapter 8
The HTML is pretty bare bones. It’s got some small style adjustments to make the can-
vas full screen, and it defines an onLoad procedure to be called when the  tag’s
onLoad event fires.
 Save the next listing as canvas_test.nim beside your canvas.nim file.
import canvas, dom
proc onLoad() {.exportc.} =
var canvas = document.getElementById("canvas").EmbedElement
canvas.width = window.innerWidth
canvas.height = window.innerHeight
var ctx = canvas.getContext("2d")
ctx.fillStyle = "#1d4099"
ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)
Note how similar the code is to JavaScript. This code listing defines an onLoad proce-
dure that’s then exported, which allows the browser to use it as an event callback. The
exportc procedure is used to do this. It simply ensures that the generated JavaScript
code contains an onLoad procedure. This pragma also works for the other backends.
Listing 8.11
The index.html file
Listing 8.12
The canvas_test.nim file
Licensed to   
247
The JavaScript backend
 You may wonder what the purpose of the .EmbedElement type conversion is. The
getElementById procedure returns an object of type Element, but this object doesn’t
have width or height properties, so it must be converted to a more concrete type. In
this case, it’s converted to the EmbedElement type, which allows the two width and
height assignments.
 Compile this canvas_test module by running nim js -o:canvas_test.js canvas_
test.nim. You can then test it by opening the index.html file in your favorite browser.
You should see something resembling figure 8.10.
For now, this is just a blue screen. Let’s extend it to draw the letter N. Add the follow-
ing code at the bottom of the onLoad procedure:
ctx.strokeStyle = "#ffffff"
let letterWidth = 100
let letterLeftPos = (window.innerWidth div 2) - (letterWidth div 2)
ctx.moveTo(letterLeftPos, 320)
ctx.lineTo(letterLeftPos, 110)
ctx.lineTo(letterLeftPos + letterWidth, 320)
ctx.lineTo(letterLeftPos + letterWidth, 110)
ctx.stroke()
In this case, the code calculates where the letter should be placed so that it’s in the
middle of the screen. This is necessary because the canvas size depends on the size of
the web browser window. In the SDL example, the SDL window was always the same
size, so this calculation wasn’t needed.
 Recompile the canvas_test.nim file by running the same command again, and then
refresh your browser. You should see something resembling figure 8.11.
 That’s all there is to it. You should now have a good basic understanding of how to
wrap JavaScript and how to make use of Nim’s JavaScript backend. 
Figure 8.10
The canvas_test.nim script 
showing a blue screen in the web browser
Sets the stroke color to white
Creates a local letterWidth 
variable to store the desired 
letter width
Calculates the top-left
position where the
letter should be placed
Begins tracing the lines 
of the letter
Draws the letter
Licensed to   
248
CHAPTER 8
Interfacing with other languages
8.4
Summary
 The Nim foreign function interface supports interfacing with C, C++, Objective-C,
and JavaScript.
 C libraries can be either statically or dynamically linked with Nim applications.
 C header files declare procedure prototypes and types that provide all the infor-
mation necessary to wrap them.
 The importc pragma is used to wrap a foreign procedure, including C and
JavaScript procedures.
 The discardable pragma can be used to override the need to explicitly discard
values.
 The cstring type should be used to wrap procedures that accept a string argu-
ment.
 Using an external C library is best done via dynamic linking.
 The dynlib pragma is used to import a procedure from a shared library.
 The importcpp pragma is used to wrap C++ procedures and also member pro-
cedures in JavaScript.
Figure 8.11
The canvas_test.nim script showing a blue screen with the 
letter N in the web browser
Licensed to   
249
Metaprogramming
This chapter describes one of the most advanced and most powerful features in the
Nim programming language: metaprogramming, composed of a number of compo-
nents including generics, templates, and macros.
 Metaprogramming is a feature of Nim that gives you the ability to treat your
application’s source code as data. This means you can write code that reads, gener-
ates, analyses, and modifies other code. Being able to perform such activities brings
many advantages, including allowing you to minimize the number of lines of code
needed to express a solution. In turn, this means that metaprogramming reduces
development time.
 Generating code is usually easy enough in most languages, but reading, analyz-
ing, and modifying it isn’t. Consider the following simple type definition:
This chapter covers
 Understanding metaprogramming and its uses
 Using generics to remove code duplication
 Constructing a Nim abstract syntax tree
 Executing code at compile time
 Using templates and macros
Licensed to   
250
CHAPTER 9
Metaprogramming